
bin/ble_freertos_fit_lp.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 e9 55 02 00 51 56 02 00 65 19 02 00     .+...U..QV..e...
    c010:	53 56 02 00 53 56 02 00 53 56 02 00 00 00 00 00     SV..SV..SV......
	...
    c02c:	21 c4 01 00 55 56 02 00 00 00 00 00 01 c6 01 00     !...UV..........
    c03c:	69 c6 01 00 55 56 02 00 55 56 02 00 55 56 02 00     i...UV..UV..UV..
    c04c:	55 56 02 00 55 56 02 00 55 56 02 00 55 56 02 00     UV..UV..UV..UV..
    c05c:	55 56 02 00 55 56 02 00 55 56 02 00 55 56 02 00     UV..UV..UV..UV..
    c06c:	55 56 02 00 ed 6e 01 00 55 56 02 00 1f 6f 01 00     UV...n..UV...o..
    c07c:	d5 6e 01 00 55 56 02 00 55 56 02 00 55 56 02 00     .n..UV..UV..UV..
    c08c:	55 56 02 00 55 56 02 00 55 56 02 00 55 56 02 00     UV..UV..UV..UV..
    c09c:	e9 c8 01 00 15 c9 01 00 55 56 02 00 55 56 02 00     ........UV..UV..
    c0ac:	55 56 02 00 55 56 02 00 55 56 02 00 55 56 02 00     UV..UV..UV..UV..
    c0bc:	55 56 02 00                                         UV..

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
    c234:	b500      	push	{lr}
    c236:	b083      	sub	sp, #12
    c238:	9001      	str	r0, [sp, #4]
    c23a:	9100      	str	r1, [sp, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
    c23c:	2206      	movs	r2, #6
    c23e:	9900      	ldr	r1, [sp, #0]
    c240:	9801      	ldr	r0, [sp, #4]
    c242:	f7ff ff5d 	bl	c100 <memcpy>
}
    c246:	bf00      	nop
    c248:	b003      	add	sp, #12
    c24a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c24e <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
    c24e:	b500      	push	{lr}
    c250:	b083      	sub	sp, #12
    c252:	9001      	str	r0, [sp, #4]
    c254:	9100      	str	r1, [sp, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
    c256:	2206      	movs	r2, #6
    c258:	9900      	ldr	r1, [sp, #0]
    c25a:	9801      	ldr	r0, [sp, #4]
    c25c:	f019 f9fc 	bl	25658 <memcmp>
    c260:	4603      	mov	r3, r0
    c262:	2b00      	cmp	r3, #0
    c264:	bf0c      	ite	eq
    c266:	2301      	moveq	r3, #1
    c268:	2300      	movne	r3, #0
    c26a:	b2db      	uxtb	r3, r3
}
    c26c:	4618      	mov	r0, r3
    c26e:	b003      	add	sp, #12
    c270:	f85d fb04 	ldr.w	pc, [sp], #4

0000c274 <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
    c274:	b500      	push	{lr}
    c276:	b083      	sub	sp, #12
    c278:	9001      	str	r0, [sp, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
    c27a:	2206      	movs	r2, #6
    c27c:	2100      	movs	r1, #0
    c27e:	9801      	ldr	r0, [sp, #4]
    c280:	f019 fa1c 	bl	256bc <memset>

  return (pDst + BDA_ADDR_LEN);
    c284:	9b01      	ldr	r3, [sp, #4]
    c286:	3306      	adds	r3, #6
}
    c288:	4618      	mov	r0, r3
    c28a:	b003      	add	sp, #12
    c28c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c290 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
    c290:	b500      	push	{lr}
    c292:	b085      	sub	sp, #20
    c294:	9001      	str	r0, [sp, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
    c296:	2300      	movs	r3, #0
    c298:	9302      	str	r3, [sp, #8]
    c29a:	2300      	movs	r3, #0
    c29c:	f8ad 300c 	strh.w	r3, [sp, #12]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
    c2a0:	ab02      	add	r3, sp, #8
    c2a2:	2206      	movs	r2, #6
    c2a4:	4619      	mov	r1, r3
    c2a6:	9801      	ldr	r0, [sp, #4]
    c2a8:	f019 f9d6 	bl	25658 <memcmp>
    c2ac:	4603      	mov	r3, r0
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	bf0c      	ite	eq
    c2b2:	2301      	moveq	r3, #1
    c2b4:	2300      	movne	r3, #0
    c2b6:	b2db      	uxtb	r3, r3
}
    c2b8:	4618      	mov	r0, r3
    c2ba:	b005      	add	sp, #20
    c2bc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c2c0 <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
    c2c0:	b500      	push	{lr}
    c2c2:	b083      	sub	sp, #12
    c2c4:	9001      	str	r0, [sp, #4]
    c2c6:	9100      	str	r1, [sp, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
    c2c8:	2210      	movs	r2, #16
    c2ca:	9900      	ldr	r1, [sp, #0]
    c2cc:	9801      	ldr	r0, [sp, #4]
    c2ce:	f7ff ff17 	bl	c100 <memcpy>
}
    c2d2:	bf00      	nop
    c2d4:	b003      	add	sp, #12
    c2d6:	f85d fb04 	ldr.w	pc, [sp], #4

0000c2da <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
    c2da:	b500      	push	{lr}
    c2dc:	b083      	sub	sp, #12
    c2de:	9001      	str	r0, [sp, #4]
    c2e0:	9100      	str	r1, [sp, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
    c2e2:	2208      	movs	r2, #8
    c2e4:	9900      	ldr	r1, [sp, #0]
    c2e6:	9801      	ldr	r0, [sp, #4]
    c2e8:	f7ff ff0a 	bl	c100 <memcpy>
}
    c2ec:	bf00      	nop
    c2ee:	b003      	add	sp, #12
    c2f0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c2f4 <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
    c2f4:	b084      	sub	sp, #16
    c2f6:	9001      	str	r0, [sp, #4]
    c2f8:	9100      	str	r1, [sp, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
    c2fa:	2310      	movs	r3, #16
    c2fc:	f88d 300f 	strb.w	r3, [sp, #15]
    c300:	e00f      	b.n	c322 <Calc128Xor+0x2e>
  {
    *pDst++ ^= *pSrc++;
    c302:	9b00      	ldr	r3, [sp, #0]
    c304:	1c5a      	adds	r2, r3, #1
    c306:	9200      	str	r2, [sp, #0]
    c308:	7819      	ldrb	r1, [r3, #0]
    c30a:	9b01      	ldr	r3, [sp, #4]
    c30c:	1c5a      	adds	r2, r3, #1
    c30e:	9201      	str	r2, [sp, #4]
    c310:	781a      	ldrb	r2, [r3, #0]
    c312:	404a      	eors	r2, r1
    c314:	b2d2      	uxtb	r2, r2
    c316:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
    c318:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c31c:	3b01      	subs	r3, #1
    c31e:	f88d 300f 	strb.w	r3, [sp, #15]
    c322:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c326:	2b00      	cmp	r3, #0
    c328:	d1eb      	bne.n	c302 <Calc128Xor+0xe>
  }
}
    c32a:	bf00      	nop
    c32c:	bf00      	nop
    c32e:	b004      	add	sp, #16
    c330:	4770      	bx	lr

0000c332 <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
    c332:	b086      	sub	sp, #24
    c334:	9003      	str	r0, [sp, #12]
    c336:	9102      	str	r1, [sp, #8]
    c338:	4613      	mov	r3, r2
    c33a:	f8ad 3006 	strh.w	r3, [sp, #6]
  int16_t i;

  for (i=0; i<len; i++)
    c33e:	2300      	movs	r3, #0
    c340:	f8ad 3016 	strh.w	r3, [sp, #22]
    c344:	e015      	b.n	c372 <WStrReverseCpy+0x40>
  {
    pBuf1[len-1-i] = pBuf2[i];
    c346:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
    c34a:	9a02      	ldr	r2, [sp, #8]
    c34c:	441a      	add	r2, r3
    c34e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c352:	1e59      	subs	r1, r3, #1
    c354:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
    c358:	1acb      	subs	r3, r1, r3
    c35a:	4619      	mov	r1, r3
    c35c:	9b03      	ldr	r3, [sp, #12]
    c35e:	440b      	add	r3, r1
    c360:	7812      	ldrb	r2, [r2, #0]
    c362:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
    c364:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
    c368:	b29b      	uxth	r3, r3
    c36a:	3301      	adds	r3, #1
    c36c:	b29b      	uxth	r3, r3
    c36e:	f8ad 3016 	strh.w	r3, [sp, #22]
    c372:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    c376:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    c37a:	429a      	cmp	r2, r3
    c37c:	dbe3      	blt.n	c346 <WStrReverseCpy+0x14>
  }
}
    c37e:	bf00      	nop
    c380:	bf00      	nop
    c382:	b006      	add	sp, #24
    c384:	4770      	bx	lr

0000c386 <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
    c386:	b084      	sub	sp, #16
    c388:	9001      	str	r0, [sp, #4]
    c38a:	460b      	mov	r3, r1
    c38c:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
    c390:	2300      	movs	r3, #0
    c392:	f88d 300f 	strb.w	r3, [sp, #15]
    c396:	e024      	b.n	c3e2 <WStrReverse+0x5c>
  {
    temp = pBuf[len-i-1];
    c398:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c39c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3a0:	1ad3      	subs	r3, r2, r3
    c3a2:	3b01      	subs	r3, #1
    c3a4:	9a01      	ldr	r2, [sp, #4]
    c3a6:	4413      	add	r3, r2
    c3a8:	781b      	ldrb	r3, [r3, #0]
    c3aa:	f88d 300e 	strb.w	r3, [sp, #14]
    pBuf[len-i-1] = pBuf[i];
    c3ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3b2:	9a01      	ldr	r2, [sp, #4]
    c3b4:	441a      	add	r2, r3
    c3b6:	f89d 1003 	ldrb.w	r1, [sp, #3]
    c3ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3be:	1acb      	subs	r3, r1, r3
    c3c0:	3b01      	subs	r3, #1
    c3c2:	9901      	ldr	r1, [sp, #4]
    c3c4:	440b      	add	r3, r1
    c3c6:	7812      	ldrb	r2, [r2, #0]
    c3c8:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
    c3ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3ce:	9a01      	ldr	r2, [sp, #4]
    c3d0:	4413      	add	r3, r2
    c3d2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    c3d6:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
    c3d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3dc:	3301      	adds	r3, #1
    c3de:	f88d 300f 	strb.w	r3, [sp, #15]
    c3e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c3e6:	085b      	lsrs	r3, r3, #1
    c3e8:	b2db      	uxtb	r3, r3
    c3ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c3ee:	429a      	cmp	r2, r3
    c3f0:	d3d2      	bcc.n	c398 <WStrReverse+0x12>
  }
}
    c3f2:	bf00      	nop
    c3f4:	bf00      	nop
    c3f6:	b004      	add	sp, #16
    c3f8:	4770      	bx	lr

0000c3fa <AppDbInit>:
void AppDbInit(void)
{
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
  return;
    c3fa:	bf00      	nop
}
    c3fc:	4770      	bx	lr
	...

0000c400 <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr, bool_t master_role)
{
    c400:	b500      	push	{lr}
    c402:	b085      	sub	sp, #20
    c404:	4603      	mov	r3, r0
    c406:	9100      	str	r1, [sp, #0]
    c408:	f88d 3007 	strb.w	r3, [sp, #7]
    c40c:	4613      	mov	r3, r2
    c40e:	f88d 3006 	strb.w	r3, [sp, #6]
  appDbRec_t  *pRec = appDb.rec;
    c412:	4b28      	ldr	r3, [pc, #160]	; (c4b4 <AppDbNewRecord+0xb4>)
    c414:	9303      	str	r3, [sp, #12]
  uint8_t     i;

  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c416:	2303      	movs	r3, #3
    c418:	f88d 300b 	strb.w	r3, [sp, #11]
    c41c:	e00c      	b.n	c438 <AppDbNewRecord+0x38>
  {
    if (!pRec->inUse)
    c41e:	9b03      	ldr	r3, [sp, #12]
    c420:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c424:	2b00      	cmp	r3, #0
    c426:	d00c      	beq.n	c442 <AppDbNewRecord+0x42>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c428:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c42c:	3b01      	subs	r3, #1
    c42e:	f88d 300b 	strb.w	r3, [sp, #11]
    c432:	9b03      	ldr	r3, [sp, #12]
    c434:	33c4      	adds	r3, #196	; 0xc4
    c436:	9303      	str	r3, [sp, #12]
    c438:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c43c:	2b00      	cmp	r3, #0
    c43e:	d1ee      	bne.n	c41e <AppDbNewRecord+0x1e>
    c440:	e000      	b.n	c444 <AppDbNewRecord+0x44>
    {
      break;
    c442:	bf00      	nop
    }
  }

  /* if all records were allocated */
  if (i == 0)
    c444:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c448:	2b00      	cmp	r3, #0
    c44a:	d10f      	bne.n	c46c <AppDbNewRecord+0x6c>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
    c44c:	4b1a      	ldr	r3, [pc, #104]	; (c4b8 <AppDbNewRecord+0xb8>)
    c44e:	681b      	ldr	r3, [r3, #0]
    c450:	9303      	str	r3, [sp, #12]

    /* get next record to overwrite */
    pAppDbNewRec++;
    c452:	4b19      	ldr	r3, [pc, #100]	; (c4b8 <AppDbNewRecord+0xb8>)
    c454:	681b      	ldr	r3, [r3, #0]
    c456:	33c4      	adds	r3, #196	; 0xc4
    c458:	4a17      	ldr	r2, [pc, #92]	; (c4b8 <AppDbNewRecord+0xb8>)
    c45a:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
    c45c:	4b16      	ldr	r3, [pc, #88]	; (c4b8 <AppDbNewRecord+0xb8>)
    c45e:	681b      	ldr	r3, [r3, #0]
    c460:	4a16      	ldr	r2, [pc, #88]	; (c4bc <AppDbNewRecord+0xbc>)
    c462:	4293      	cmp	r3, r2
    c464:	d102      	bne.n	c46c <AppDbNewRecord+0x6c>
    {
      pAppDbNewRec = appDb.rec;
    c466:	4b14      	ldr	r3, [pc, #80]	; (c4b8 <AppDbNewRecord+0xb8>)
    c468:	4a12      	ldr	r2, [pc, #72]	; (c4b4 <AppDbNewRecord+0xb4>)
    c46a:	601a      	str	r2, [r3, #0]
    }
  }

  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
    c46c:	22c4      	movs	r2, #196	; 0xc4
    c46e:	2100      	movs	r1, #0
    c470:	9803      	ldr	r0, [sp, #12]
    c472:	f019 f923 	bl	256bc <memset>
  pRec->inUse = TRUE;
    c476:	9b03      	ldr	r3, [sp, #12]
    c478:	2201      	movs	r2, #1
    c47a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
    c47e:	9b03      	ldr	r3, [sp, #12]
    c480:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c484:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
    c486:	9b03      	ldr	r3, [sp, #12]
    c488:	9900      	ldr	r1, [sp, #0]
    c48a:	4618      	mov	r0, r3
    c48c:	f7ff fed2 	bl	c234 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
    c490:	9b03      	ldr	r3, [sp, #12]
    c492:	2200      	movs	r2, #0
    c494:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
    c498:	9b03      	ldr	r3, [sp, #12]
    c49a:	2200      	movs	r2, #0
    c49c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pRec->master_role = master_role;
    c4a0:	9b03      	ldr	r3, [sp, #12]
    c4a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c4a6:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  return (appDbHdl_t) pRec;
    c4aa:	9b03      	ldr	r3, [sp, #12]
}
    c4ac:	4618      	mov	r0, r3
    c4ae:	b005      	add	sp, #20
    c4b0:	f85d fb04 	ldr.w	pc, [sp], #4
    c4b4:	10003ed0 	.word	0x10003ed0
    c4b8:	10002b00 	.word	0x10002b00
    c4bc:	1000411c 	.word	0x1000411c

0000c4c0 <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
    c4c0:	b500      	push	{lr}
    c4c2:	b085      	sub	sp, #20
    c4c4:	9001      	str	r0, [sp, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
    c4c6:	9b01      	ldr	r3, [sp, #4]
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d102      	bne.n	c4d2 <AppDbGetNextRecord+0x12>
  {
    pRec = appDb.rec;
    c4cc:	4b14      	ldr	r3, [pc, #80]	; (c520 <AppDbGetNextRecord+0x60>)
    c4ce:	9303      	str	r3, [sp, #12]
    c4d0:	e01c      	b.n	c50c <AppDbGetNextRecord+0x4c>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
    c4d2:	9801      	ldr	r0, [sp, #4]
    c4d4:	f000 f852 	bl	c57c <AppDbRecordInUse>
    c4d8:	4603      	mov	r3, r0
    c4da:	2b00      	cmp	r3, #0
    c4dc:	d005      	beq.n	c4ea <AppDbGetNextRecord+0x2a>
  {
    pRec = (appDbRec_t *)hdl;
    c4de:	9b01      	ldr	r3, [sp, #4]
    c4e0:	9303      	str	r3, [sp, #12]
    pRec++;
    c4e2:	9b03      	ldr	r3, [sp, #12]
    c4e4:	33c4      	adds	r3, #196	; 0xc4
    c4e6:	9303      	str	r3, [sp, #12]
    c4e8:	e010      	b.n	c50c <AppDbGetNextRecord+0x4c>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
    c4ea:	2300      	movs	r3, #0
    c4ec:	e013      	b.n	c516 <AppDbGetNextRecord+0x56>

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
    c4ee:	9b03      	ldr	r3, [sp, #12]
    c4f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c4f4:	2b00      	cmp	r3, #0
    c4f6:	d006      	beq.n	c506 <AppDbGetNextRecord+0x46>
    c4f8:	9b03      	ldr	r3, [sp, #12]
    c4fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    c4fe:	2b00      	cmp	r3, #0
    c500:	d001      	beq.n	c506 <AppDbGetNextRecord+0x46>
    {
      /* record found */
      return (appDbHdl_t)pRec;
    c502:	9b03      	ldr	r3, [sp, #12]
    c504:	e007      	b.n	c516 <AppDbGetNextRecord+0x56>
    }

    /* look for next record */
    pRec++;
    c506:	9b03      	ldr	r3, [sp, #12]
    c508:	33c4      	adds	r3, #196	; 0xc4
    c50a:	9303      	str	r3, [sp, #12]
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
    c50c:	9b03      	ldr	r3, [sp, #12]
    c50e:	4a05      	ldr	r2, [pc, #20]	; (c524 <AppDbGetNextRecord+0x64>)
    c510:	4293      	cmp	r3, r2
    c512:	d3ec      	bcc.n	c4ee <AppDbGetNextRecord+0x2e>
  }

  /* end of records */
  return APP_DB_HDL_NONE;
    c514:	2300      	movs	r3, #0
}
    c516:	4618      	mov	r0, r3
    c518:	b005      	add	sp, #20
    c51a:	f85d fb04 	ldr.w	pc, [sp], #4
    c51e:	bf00      	nop
    c520:	10003ed0 	.word	0x10003ed0
    c524:	1000411c 	.word	0x1000411c

0000c528 <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
    c528:	b082      	sub	sp, #8
    c52a:	9001      	str	r0, [sp, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
    c52c:	9b01      	ldr	r3, [sp, #4]
    c52e:	2200      	movs	r2, #0
    c530:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
    c534:	bf00      	nop
    c536:	b002      	add	sp, #8
    c538:	4770      	bx	lr

0000c53a <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
    c53a:	b082      	sub	sp, #8
    c53c:	9001      	str	r0, [sp, #4]
    c53e:	460b      	mov	r3, r1
    c540:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
    c544:	9b01      	ldr	r3, [sp, #4]
    c546:	2201      	movs	r2, #1
    c548:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
    c54c:	9b01      	ldr	r3, [sp, #4]
    c54e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c552:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

#ifdef AM_BLE_USE_NVM
  AppStorePairingInfoInNVM(hdl);
#endif
}
    c556:	bf00      	nop
    c558:	b002      	add	sp, #8
    c55a:	4770      	bx	lr

0000c55c <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
    c55c:	b500      	push	{lr}
    c55e:	b083      	sub	sp, #12
    c560:	9001      	str	r0, [sp, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
    c562:	9b01      	ldr	r3, [sp, #4]
    c564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    c568:	2b00      	cmp	r3, #0
    c56a:	d102      	bne.n	c572 <AppDbCheckValidRecord+0x16>
  {
    AppDbDeleteRecord(hdl);
    c56c:	9801      	ldr	r0, [sp, #4]
    c56e:	f7ff ffdb 	bl	c528 <AppDbDeleteRecord>
  }
}
    c572:	bf00      	nop
    c574:	b003      	add	sp, #12
    c576:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c57c <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
    c57c:	b084      	sub	sp, #16
    c57e:	9001      	str	r0, [sp, #4]
  appDbRec_t  *pRec = appDb.rec;
    c580:	4b12      	ldr	r3, [pc, #72]	; (c5cc <AppDbRecordInUse+0x50>)
    c582:	9303      	str	r3, [sp, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c584:	2303      	movs	r3, #3
    c586:	f88d 300b 	strb.w	r3, [sp, #11]
    c58a:	e017      	b.n	c5bc <AppDbRecordInUse+0x40>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
    c58c:	9b03      	ldr	r3, [sp, #12]
    c58e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c592:	2b00      	cmp	r3, #0
    c594:	d00a      	beq.n	c5ac <AppDbRecordInUse+0x30>
    c596:	9b03      	ldr	r3, [sp, #12]
    c598:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    c59c:	2b00      	cmp	r3, #0
    c59e:	d005      	beq.n	c5ac <AppDbRecordInUse+0x30>
    c5a0:	9a03      	ldr	r2, [sp, #12]
    c5a2:	9b01      	ldr	r3, [sp, #4]
    c5a4:	429a      	cmp	r2, r3
    c5a6:	d101      	bne.n	c5ac <AppDbRecordInUse+0x30>
    {
      return TRUE;
    c5a8:	2301      	movs	r3, #1
    c5aa:	e00c      	b.n	c5c6 <AppDbRecordInUse+0x4a>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c5ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c5b0:	3b01      	subs	r3, #1
    c5b2:	f88d 300b 	strb.w	r3, [sp, #11]
    c5b6:	9b03      	ldr	r3, [sp, #12]
    c5b8:	33c4      	adds	r3, #196	; 0xc4
    c5ba:	9303      	str	r3, [sp, #12]
    c5bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c5c0:	2b00      	cmp	r3, #0
    c5c2:	d1e3      	bne.n	c58c <AppDbRecordInUse+0x10>
    }
  }

  return FALSE;
    c5c4:	2300      	movs	r3, #0
}
    c5c6:	4618      	mov	r0, r3
    c5c8:	b004      	add	sp, #16
    c5ca:	4770      	bx	lr
    c5cc:	10003ed0 	.word	0x10003ed0

0000c5d0 <AppDbCheckBonded>:
 *
 *  \return TRUE if a bonded device is found, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t AppDbCheckBonded(void)
{
    c5d0:	b082      	sub	sp, #8
  appDbRec_t  *pRec = appDb.rec;
    c5d2:	4b11      	ldr	r3, [pc, #68]	; (c618 <AppDbCheckBonded+0x48>)
    c5d4:	9301      	str	r3, [sp, #4]
  uint8_t     i;

  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c5d6:	2303      	movs	r3, #3
    c5d8:	f88d 3003 	strb.w	r3, [sp, #3]
    c5dc:	e013      	b.n	c606 <AppDbCheckBonded+0x36>
  {
    if (pRec->inUse && !pRec->master_role)
    c5de:	9b01      	ldr	r3, [sp, #4]
    c5e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c5e4:	2b00      	cmp	r3, #0
    c5e6:	d006      	beq.n	c5f6 <AppDbCheckBonded+0x26>
    c5e8:	9b01      	ldr	r3, [sp, #4]
    c5ea:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d101      	bne.n	c5f6 <AppDbCheckBonded+0x26>
    {
      return TRUE;
    c5f2:	2301      	movs	r3, #1
    c5f4:	e00c      	b.n	c610 <AppDbCheckBonded+0x40>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c5f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c5fa:	3b01      	subs	r3, #1
    c5fc:	f88d 3003 	strb.w	r3, [sp, #3]
    c600:	9b01      	ldr	r3, [sp, #4]
    c602:	33c4      	adds	r3, #196	; 0xc4
    c604:	9301      	str	r3, [sp, #4]
    c606:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c60a:	2b00      	cmp	r3, #0
    c60c:	d1e7      	bne.n	c5de <AppDbCheckBonded+0xe>
    }
  }

  return FALSE;
    c60e:	2300      	movs	r3, #0
}
    c610:	4618      	mov	r0, r3
    c612:	b002      	add	sp, #8
    c614:	4770      	bx	lr
    c616:	bf00      	nop
    c618:	10003ed0 	.word	0x10003ed0

0000c61c <AppDbDeleteAllRecords>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteAllRecords(void)
{
    c61c:	b082      	sub	sp, #8
  appDbRec_t  *pRec = appDb.rec;
    c61e:	4b0d      	ldr	r3, [pc, #52]	; (c654 <AppDbDeleteAllRecords+0x38>)
    c620:	9301      	str	r3, [sp, #4]
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c622:	2303      	movs	r3, #3
    c624:	f88d 3003 	strb.w	r3, [sp, #3]
    c628:	e00b      	b.n	c642 <AppDbDeleteAllRecords+0x26>
  {
    pRec->inUse = FALSE;
    c62a:	9b01      	ldr	r3, [sp, #4]
    c62c:	2200      	movs	r2, #0
    c62e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c632:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c636:	3b01      	subs	r3, #1
    c638:	f88d 3003 	strb.w	r3, [sp, #3]
    c63c:	9b01      	ldr	r3, [sp, #4]
    c63e:	33c4      	adds	r3, #196	; 0xc4
    c640:	9301      	str	r3, [sp, #4]
    c642:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c646:	2b00      	cmp	r3, #0
    c648:	d1ef      	bne.n	c62a <AppDbDeleteAllRecords+0xe>
  }
}
    c64a:	bf00      	nop
    c64c:	bf00      	nop
    c64e:	b002      	add	sp, #8
    c650:	4770      	bx	lr
    c652:	bf00      	nop
    c654:	10003ed0 	.word	0x10003ed0

0000c658 <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
    c658:	b500      	push	{lr}
    c65a:	b085      	sub	sp, #20
    c65c:	4603      	mov	r3, r0
    c65e:	9100      	str	r1, [sp, #0]
    c660:	f88d 3007 	strb.w	r3, [sp, #7]
  appDbRec_t  *pRec = appDb.rec;
    c664:	4b19      	ldr	r3, [pc, #100]	; (c6cc <AppDbFindByAddr+0x74>)
    c666:	9303      	str	r3, [sp, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
    c668:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c66c:	4618      	mov	r0, r3
    c66e:	f009 fd53 	bl	16118 <DmHostAddrType>
    c672:	4603      	mov	r3, r0
    c674:	f88d 300a 	strb.w	r3, [sp, #10]
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c678:	2303      	movs	r3, #3
    c67a:	f88d 300b 	strb.w	r3, [sp, #11]
    c67e:	e01c      	b.n	c6ba <AppDbFindByAddr+0x62>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
    c680:	9b03      	ldr	r3, [sp, #12]
    c682:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c686:	2b00      	cmp	r3, #0
    c688:	d00f      	beq.n	c6aa <AppDbFindByAddr+0x52>
    c68a:	9b03      	ldr	r3, [sp, #12]
    c68c:	799b      	ldrb	r3, [r3, #6]
    c68e:	f89d 200a 	ldrb.w	r2, [sp, #10]
    c692:	429a      	cmp	r2, r3
    c694:	d109      	bne.n	c6aa <AppDbFindByAddr+0x52>
    c696:	9b03      	ldr	r3, [sp, #12]
    c698:	9900      	ldr	r1, [sp, #0]
    c69a:	4618      	mov	r0, r3
    c69c:	f7ff fdd7 	bl	c24e <BdaCmp>
    c6a0:	4603      	mov	r3, r0
    c6a2:	2b00      	cmp	r3, #0
    c6a4:	d001      	beq.n	c6aa <AppDbFindByAddr+0x52>
    {
      return (appDbHdl_t) pRec;
    c6a6:	9b03      	ldr	r3, [sp, #12]
    c6a8:	e00c      	b.n	c6c4 <AppDbFindByAddr+0x6c>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c6aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c6ae:	3b01      	subs	r3, #1
    c6b0:	f88d 300b 	strb.w	r3, [sp, #11]
    c6b4:	9b03      	ldr	r3, [sp, #12]
    c6b6:	33c4      	adds	r3, #196	; 0xc4
    c6b8:	9303      	str	r3, [sp, #12]
    c6ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d1de      	bne.n	c680 <AppDbFindByAddr+0x28>
    }
  }

  return APP_DB_HDL_NONE;
    c6c2:	2300      	movs	r3, #0
}
    c6c4:	4618      	mov	r0, r3
    c6c6:	b005      	add	sp, #20
    c6c8:	f85d fb04 	ldr.w	pc, [sp], #4
    c6cc:	10003ed0 	.word	0x10003ed0

0000c6d0 <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
    c6d0:	b500      	push	{lr}
    c6d2:	b085      	sub	sp, #20
    c6d4:	4603      	mov	r3, r0
    c6d6:	9100      	str	r1, [sp, #0]
    c6d8:	f8ad 3006 	strh.w	r3, [sp, #6]
  appDbRec_t  *pRec = appDb.rec;
    c6dc:	4b17      	ldr	r3, [pc, #92]	; (c73c <AppDbFindByLtkReq+0x6c>)
    c6de:	9303      	str	r3, [sp, #12]
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c6e0:	2303      	movs	r3, #3
    c6e2:	f88d 300b 	strb.w	r3, [sp, #11]
    c6e6:	e01f      	b.n	c728 <AppDbFindByLtkReq+0x58>
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
    c6e8:	9b03      	ldr	r3, [sp, #12]
    c6ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	d012      	beq.n	c718 <AppDbFindByLtkReq+0x48>
    c6f2:	9b03      	ldr	r3, [sp, #12]
    c6f4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    c6f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c6fc:	429a      	cmp	r2, r3
    c6fe:	d10b      	bne.n	c718 <AppDbFindByLtkReq+0x48>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
    c700:	9b03      	ldr	r3, [sp, #12]
    c702:	3344      	adds	r3, #68	; 0x44
    c704:	2208      	movs	r2, #8
    c706:	9900      	ldr	r1, [sp, #0]
    c708:	4618      	mov	r0, r3
    c70a:	f018 ffa5 	bl	25658 <memcmp>
    c70e:	4603      	mov	r3, r0
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
    c710:	2b00      	cmp	r3, #0
    c712:	d101      	bne.n	c718 <AppDbFindByLtkReq+0x48>
    {
      return (appDbHdl_t) pRec;
    c714:	9b03      	ldr	r3, [sp, #12]
    c716:	e00c      	b.n	c732 <AppDbFindByLtkReq+0x62>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c718:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c71c:	3b01      	subs	r3, #1
    c71e:	f88d 300b 	strb.w	r3, [sp, #11]
    c722:	9b03      	ldr	r3, [sp, #12]
    c724:	33c4      	adds	r3, #196	; 0xc4
    c726:	9303      	str	r3, [sp, #12]
    c728:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c72c:	2b00      	cmp	r3, #0
    c72e:	d1db      	bne.n	c6e8 <AppDbFindByLtkReq+0x18>
    }
  }

  return APP_DB_HDL_NONE;
    c730:	2300      	movs	r3, #0
}
    c732:	4618      	mov	r0, r3
    c734:	b005      	add	sp, #20
    c736:	f85d fb04 	ldr.w	pc, [sp], #4
    c73a:	bf00      	nop
    c73c:	10003ed0 	.word	0x10003ed0

0000c740 <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
    c740:	b086      	sub	sp, #24
    c742:	9003      	str	r0, [sp, #12]
    c744:	460b      	mov	r3, r1
    c746:	9201      	str	r2, [sp, #4]
    c748:	f88d 300b 	strb.w	r3, [sp, #11]
  dmSecKey_t *pKey = NULL;
    c74c:	2300      	movs	r3, #0
    c74e:	9305      	str	r3, [sp, #20]

  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
    c750:	9b03      	ldr	r3, [sp, #12]
    c752:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    c756:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c75a:	4013      	ands	r3, r2
    c75c:	b2db      	uxtb	r3, r3
    c75e:	2b00      	cmp	r3, #0
    c760:	d032      	beq.n	c7c8 <AppDbGetKey+0x88>
  {
    switch(type)
    c762:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c766:	3b01      	subs	r3, #1
    c768:	2b07      	cmp	r3, #7
    c76a:	d82f      	bhi.n	c7cc <AppDbGetKey+0x8c>
    c76c:	a201      	add	r2, pc, #4	; (adr r2, c774 <AppDbGetKey+0x34>)
    c76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c772:	bf00      	nop
    c774:	0000c795 	.word	0x0000c795
    c778:	0000c7a7 	.word	0x0000c7a7
    c77c:	0000c7cd 	.word	0x0000c7cd
    c780:	0000c7b9 	.word	0x0000c7b9
    c784:	0000c7cd 	.word	0x0000c7cd
    c788:	0000c7cd 	.word	0x0000c7cd
    c78c:	0000c7cd 	.word	0x0000c7cd
    c790:	0000c7c1 	.word	0x0000c7c1
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
    c794:	9b03      	ldr	r3, [sp, #12]
    c796:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
    c79a:	9b01      	ldr	r3, [sp, #4]
    c79c:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
    c79e:	9b03      	ldr	r3, [sp, #12]
    c7a0:	3334      	adds	r3, #52	; 0x34
    c7a2:	9305      	str	r3, [sp, #20]
        break;
    c7a4:	e013      	b.n	c7ce <AppDbGetKey+0x8e>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
    c7a6:	9b03      	ldr	r3, [sp, #12]
    c7a8:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    c7ac:	9b01      	ldr	r3, [sp, #4]
    c7ae:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
    c7b0:	9b03      	ldr	r3, [sp, #12]
    c7b2:	3350      	adds	r3, #80	; 0x50
    c7b4:	9305      	str	r3, [sp, #20]
        break;
    c7b6:	e00a      	b.n	c7ce <AppDbGetKey+0x8e>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
    c7b8:	9b03      	ldr	r3, [sp, #12]
    c7ba:	3307      	adds	r3, #7
    c7bc:	9305      	str	r3, [sp, #20]
        break;
    c7be:	e006      	b.n	c7ce <AppDbGetKey+0x8e>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
    c7c0:	9b03      	ldr	r3, [sp, #12]
    c7c2:	331e      	adds	r3, #30
    c7c4:	9305      	str	r3, [sp, #20]
        break;
    c7c6:	e002      	b.n	c7ce <AppDbGetKey+0x8e>

      default:
        break;
    }
  }
    c7c8:	bf00      	nop
    c7ca:	e000      	b.n	c7ce <AppDbGetKey+0x8e>
        break;
    c7cc:	bf00      	nop

  return pKey;
    c7ce:	9b05      	ldr	r3, [sp, #20]
}
    c7d0:	4618      	mov	r0, r3
    c7d2:	b006      	add	sp, #24
    c7d4:	4770      	bx	lr
    c7d6:	bf00      	nop

0000c7d8 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
    c7d8:	b530      	push	{r4, r5, lr}
    c7da:	b083      	sub	sp, #12
    c7dc:	9001      	str	r0, [sp, #4]
    c7de:	9100      	str	r1, [sp, #0]
  switch(pKey->type)
    c7e0:	9b00      	ldr	r3, [sp, #0]
    c7e2:	7f9b      	ldrb	r3, [r3, #30]
    c7e4:	3b01      	subs	r3, #1
    c7e6:	2b07      	cmp	r3, #7
    c7e8:	d86b      	bhi.n	c8c2 <AppDbSetKey+0xea>
    c7ea:	a201      	add	r2, pc, #4	; (adr r2, c7f0 <AppDbSetKey+0x18>)
    c7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c7f0:	0000c811 	.word	0x0000c811
    c7f4:	0000c83b 	.word	0x0000c83b
    c7f8:	0000c8c3 	.word	0x0000c8c3
    c7fc:	0000c865 	.word	0x0000c865
    c800:	0000c8c3 	.word	0x0000c8c3
    c804:	0000c8c3 	.word	0x0000c8c3
    c808:	0000c8c3 	.word	0x0000c8c3
    c80c:	0000c8a1 	.word	0x0000c8a1
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
    c810:	9b00      	ldr	r3, [sp, #0]
    c812:	7fda      	ldrb	r2, [r3, #31]
    c814:	9b01      	ldr	r3, [sp, #4]
    c816:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
    c81a:	9a01      	ldr	r2, [sp, #4]
    c81c:	9b00      	ldr	r3, [sp, #0]
    c81e:	f102 0434 	add.w	r4, r2, #52	; 0x34
    c822:	1d1d      	adds	r5, r3, #4
    c824:	6828      	ldr	r0, [r5, #0]
    c826:	6869      	ldr	r1, [r5, #4]
    c828:	68aa      	ldr	r2, [r5, #8]
    c82a:	68eb      	ldr	r3, [r5, #12]
    c82c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c82e:	6928      	ldr	r0, [r5, #16]
    c830:	6969      	ldr	r1, [r5, #20]
    c832:	c403      	stmia	r4!, {r0, r1}
    c834:	8b2b      	ldrh	r3, [r5, #24]
    c836:	8023      	strh	r3, [r4, #0]
      break;
    c838:	e044      	b.n	c8c4 <AppDbSetKey+0xec>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
    c83a:	9b00      	ldr	r3, [sp, #0]
    c83c:	7fda      	ldrb	r2, [r3, #31]
    c83e:	9b01      	ldr	r3, [sp, #4]
    c840:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
    c844:	9a01      	ldr	r2, [sp, #4]
    c846:	9b00      	ldr	r3, [sp, #0]
    c848:	f102 0450 	add.w	r4, r2, #80	; 0x50
    c84c:	1d1d      	adds	r5, r3, #4
    c84e:	6828      	ldr	r0, [r5, #0]
    c850:	6869      	ldr	r1, [r5, #4]
    c852:	68aa      	ldr	r2, [r5, #8]
    c854:	68eb      	ldr	r3, [r5, #12]
    c856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c858:	6928      	ldr	r0, [r5, #16]
    c85a:	6969      	ldr	r1, [r5, #20]
    c85c:	c403      	stmia	r4!, {r0, r1}
    c85e:	8b2b      	ldrh	r3, [r5, #24]
    c860:	8023      	strh	r3, [r4, #0]
      break;
    c862:	e02f      	b.n	c8c4 <AppDbSetKey+0xec>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
    c864:	9b01      	ldr	r3, [sp, #4]
    c866:	9a00      	ldr	r2, [sp, #0]
    c868:	3307      	adds	r3, #7
    c86a:	3204      	adds	r2, #4
    c86c:	6811      	ldr	r1, [r2, #0]
    c86e:	6855      	ldr	r5, [r2, #4]
    c870:	6894      	ldr	r4, [r2, #8]
    c872:	68d0      	ldr	r0, [r2, #12]
    c874:	6019      	str	r1, [r3, #0]
    c876:	605d      	str	r5, [r3, #4]
    c878:	609c      	str	r4, [r3, #8]
    c87a:	60d8      	str	r0, [r3, #12]
    c87c:	6911      	ldr	r1, [r2, #16]
    c87e:	6119      	str	r1, [r3, #16]
    c880:	8a91      	ldrh	r1, [r2, #20]
    c882:	7d92      	ldrb	r2, [r2, #22]
    c884:	8299      	strh	r1, [r3, #20]
    c886:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
    c888:	9b00      	ldr	r3, [sp, #0]
    c88a:	7e9a      	ldrb	r2, [r3, #26]
    c88c:	9b01      	ldr	r3, [sp, #4]
    c88e:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
    c890:	9a01      	ldr	r2, [sp, #4]
    c892:	9b00      	ldr	r3, [sp, #0]
    c894:	3314      	adds	r3, #20
    c896:	4619      	mov	r1, r3
    c898:	4610      	mov	r0, r2
    c89a:	f7ff fccb 	bl	c234 <BdaCpy>
      break;
    c89e:	e011      	b.n	c8c4 <AppDbSetKey+0xec>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
    c8a0:	9b01      	ldr	r3, [sp, #4]
    c8a2:	9a00      	ldr	r2, [sp, #0]
    c8a4:	331e      	adds	r3, #30
    c8a6:	3204      	adds	r2, #4
    c8a8:	6814      	ldr	r4, [r2, #0]
    c8aa:	6850      	ldr	r0, [r2, #4]
    c8ac:	6891      	ldr	r1, [r2, #8]
    c8ae:	68d2      	ldr	r2, [r2, #12]
    c8b0:	601c      	str	r4, [r3, #0]
    c8b2:	6058      	str	r0, [r3, #4]
    c8b4:	6099      	str	r1, [r3, #8]
    c8b6:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
    c8b8:	9b01      	ldr	r3, [sp, #4]
    c8ba:	2200      	movs	r2, #0
    c8bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
    c8c0:	e000      	b.n	c8c4 <AppDbSetKey+0xec>

    default:
      break;
    c8c2:	bf00      	nop
  }
}
    c8c4:	bf00      	nop
    c8c6:	b003      	add	sp, #12
    c8c8:	bd30      	pop	{r4, r5, pc}
    c8ca:	bf00      	nop

0000c8cc <AppDbGetCccTbl>:
 *
 *  \return Pointer to client characteristic configuration descriptor table.
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
    c8cc:	b082      	sub	sp, #8
    c8ce:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *) hdl)->cccTbl;
    c8d0:	9b01      	ldr	r3, [sp, #4]
    c8d2:	336c      	adds	r3, #108	; 0x6c
}
    c8d4:	4618      	mov	r0, r3
    c8d6:	b002      	add	sp, #8
    c8d8:	4770      	bx	lr

0000c8da <AppDbSetCccTblValue>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
    c8da:	b082      	sub	sp, #8
    c8dc:	9001      	str	r0, [sp, #4]
    c8de:	460b      	mov	r3, r1
    c8e0:	f8ad 3002 	strh.w	r3, [sp, #2]
    c8e4:	4613      	mov	r3, r2
    c8e6:	f8ad 3000 	strh.w	r3, [sp]
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);

  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
    c8ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    c8ee:	9a01      	ldr	r2, [sp, #4]
    c8f0:	3334      	adds	r3, #52	; 0x34
    c8f2:	005b      	lsls	r3, r3, #1
    c8f4:	4413      	add	r3, r2
    c8f6:	f8bd 2000 	ldrh.w	r2, [sp]
    c8fa:	809a      	strh	r2, [r3, #4]
  if(AppCheckBonded(connId))
  {
    AppStorePairingInfoInNVM(hdl);
  }
#endif
}
    c8fc:	bf00      	nop
    c8fe:	b002      	add	sp, #8
    c900:	4770      	bx	lr

0000c902 <AppDbGetCsfRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbGetCsfRecord(appDbHdl_t hdl, uint8_t *pChangeAwareState, uint8_t **pCsf)
{
    c902:	b084      	sub	sp, #16
    c904:	9003      	str	r0, [sp, #12]
    c906:	9102      	str	r1, [sp, #8]
    c908:	9201      	str	r2, [sp, #4]
  *pChangeAwareState = ((appDbRec_t *)hdl)->changeAwareState;
    c90a:	9b03      	ldr	r3, [sp, #12]
    c90c:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
    c910:	9b02      	ldr	r3, [sp, #8]
    c912:	701a      	strb	r2, [r3, #0]
  *pCsf = ((appDbRec_t *) hdl)->csf;
    c914:	9b03      	ldr	r3, [sp, #12]
    c916:	f103 0285 	add.w	r2, r3, #133	; 0x85
    c91a:	9b01      	ldr	r3, [sp, #4]
    c91c:	601a      	str	r2, [r3, #0]
}
    c91e:	bf00      	nop
    c920:	b004      	add	sp, #16
    c922:	4770      	bx	lr

0000c924 <AppDbSetCsfRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCsfRecord(appDbHdl_t hdl, uint8_t changeAwareState, uint8_t *pCsf)
{
    c924:	b084      	sub	sp, #16
    c926:	9003      	str	r0, [sp, #12]
    c928:	460b      	mov	r3, r1
    c92a:	9201      	str	r2, [sp, #4]
    c92c:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((pCsf != NULL) && (hdl != APP_DB_HDL_NONE))
    c930:	9b01      	ldr	r3, [sp, #4]
    c932:	2b00      	cmp	r3, #0
    c934:	d00c      	beq.n	c950 <AppDbSetCsfRecord+0x2c>
    c936:	9b03      	ldr	r3, [sp, #12]
    c938:	2b00      	cmp	r3, #0
    c93a:	d009      	beq.n	c950 <AppDbSetCsfRecord+0x2c>
  {
    ((appDbRec_t *) hdl)->changeAwareState = changeAwareState;
    c93c:	9b03      	ldr	r3, [sp, #12]
    c93e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    memcpy(&((appDbRec_t *) hdl)->csf, pCsf, ATT_CSF_LEN);
    c946:	9b03      	ldr	r3, [sp, #12]
    c948:	3385      	adds	r3, #133	; 0x85
    c94a:	9a01      	ldr	r2, [sp, #4]
    c94c:	7812      	ldrb	r2, [r2, #0]
    c94e:	701a      	strb	r2, [r3, #0]
  }
}
    c950:	bf00      	nop
    c952:	b004      	add	sp, #16
    c954:	4770      	bx	lr
	...

0000c958 <AppDbSetClientsChangeAwareState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetClientsChangeAwareState(appDbHdl_t hdl, uint8_t state)
{
    c958:	b084      	sub	sp, #16
    c95a:	9001      	str	r0, [sp, #4]
    c95c:	460b      	mov	r3, r1
    c95e:	f88d 3003 	strb.w	r3, [sp, #3]
  if (hdl == APP_DB_HDL_NONE)
    c962:	9b01      	ldr	r3, [sp, #4]
    c964:	2b00      	cmp	r3, #0
    c966:	d117      	bne.n	c998 <AppDbSetClientsChangeAwareState+0x40>
  {
    appDbRec_t  *pRec = appDb.rec;
    c968:	4b0f      	ldr	r3, [pc, #60]	; (c9a8 <AppDbSetClientsChangeAwareState+0x50>)
    c96a:	9303      	str	r3, [sp, #12]
    uint8_t     i;

    /* Set all clients status to change-unaware. */
    for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c96c:	2303      	movs	r3, #3
    c96e:	f88d 300b 	strb.w	r3, [sp, #11]
    c972:	e00c      	b.n	c98e <AppDbSetClientsChangeAwareState+0x36>
    {
      pRec->changeAwareState = state;
    c974:	9b03      	ldr	r3, [sp, #12]
    c976:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c97a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
    c97e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c982:	3b01      	subs	r3, #1
    c984:	f88d 300b 	strb.w	r3, [sp, #11]
    c988:	9b03      	ldr	r3, [sp, #12]
    c98a:	33c4      	adds	r3, #196	; 0xc4
    c98c:	9303      	str	r3, [sp, #12]
    c98e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c992:	2b00      	cmp	r3, #0
    c994:	d1ee      	bne.n	c974 <AppDbSetClientsChangeAwareState+0x1c>
  }
  else
  {
    ((appDbRec_t *) hdl)->changeAwareState = state;
  }
}
    c996:	e004      	b.n	c9a2 <AppDbSetClientsChangeAwareState+0x4a>
    ((appDbRec_t *) hdl)->changeAwareState = state;
    c998:	9b01      	ldr	r3, [sp, #4]
    c99a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c99e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
    c9a2:	bf00      	nop
    c9a4:	b004      	add	sp, #16
    c9a6:	4770      	bx	lr
    c9a8:	10003ed0 	.word	0x10003ed0

0000c9ac <AppDbGetDbHash>:
 *  \return Pointer to database hash.
 */
/*************************************************************************************************/
uint8_t *AppDbGetDbHash(void)
{
  return appDb.dbHash;
    c9ac:	4b01      	ldr	r3, [pc, #4]	; (c9b4 <AppDbGetDbHash+0x8>)
}
    c9ae:	4618      	mov	r0, r3
    c9b0:	4770      	bx	lr
    c9b2:	bf00      	nop
    c9b4:	10004131 	.word	0x10004131

0000c9b8 <AppDbSetDbHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDbHash(uint8_t *pHash)
{
    c9b8:	b410      	push	{r4}
    c9ba:	b083      	sub	sp, #12
    c9bc:	9001      	str	r0, [sp, #4]
  if (pHash != NULL)
    c9be:	9b01      	ldr	r3, [sp, #4]
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d00b      	beq.n	c9dc <AppDbSetDbHash+0x24>
  {
    memcpy(appDb.dbHash, pHash, ATT_DATABASE_HASH_LEN);
    c9c4:	4b08      	ldr	r3, [pc, #32]	; (c9e8 <AppDbSetDbHash+0x30>)
    c9c6:	9a01      	ldr	r2, [sp, #4]
    c9c8:	f203 2361 	addw	r3, r3, #609	; 0x261
    c9cc:	6814      	ldr	r4, [r2, #0]
    c9ce:	6850      	ldr	r0, [r2, #4]
    c9d0:	6891      	ldr	r1, [r2, #8]
    c9d2:	68d2      	ldr	r2, [r2, #12]
    c9d4:	601c      	str	r4, [r3, #0]
    c9d6:	6058      	str	r0, [r3, #4]
    c9d8:	6099      	str	r1, [r3, #8]
    c9da:	60da      	str	r2, [r3, #12]
  }
}
    c9dc:	bf00      	nop
    c9de:	b003      	add	sp, #12
    c9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    c9e4:	4770      	bx	lr
    c9e6:	bf00      	nop
    c9e8:	10003ed0 	.word	0x10003ed0

0000c9ec <AppDbGetPeerSignCounter>:
 *
 *  \return Sign counter for peer device.
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
    c9ec:	b082      	sub	sp, #8
    c9ee:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerSignCounter;
    c9f0:	9b01      	ldr	r3, [sp, #4]
    c9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
    c9f6:	4618      	mov	r0, r3
    c9f8:	b002      	add	sp, #8
    c9fa:	4770      	bx	lr

0000c9fc <AppDbSetPeerSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
    c9fc:	b082      	sub	sp, #8
    c9fe:	9001      	str	r0, [sp, #4]
    ca00:	9100      	str	r1, [sp, #0]
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
    ca02:	9b01      	ldr	r3, [sp, #4]
    ca04:	9a00      	ldr	r2, [sp, #0]
    ca06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
    ca0a:	bf00      	nop
    ca0c:	b002      	add	sp, #8
    ca0e:	4770      	bx	lr

0000ca10 <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
    ca10:	b082      	sub	sp, #8
    ca12:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
    ca14:	9b01      	ldr	r3, [sp, #4]
    ca16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
    ca1a:	4618      	mov	r0, r3
    ca1c:	b002      	add	sp, #8
    ca1e:	4770      	bx	lr

0000ca20 <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
    ca20:	b082      	sub	sp, #8
    ca22:	9001      	str	r0, [sp, #4]
    ca24:	460b      	mov	r3, r1
    ca26:	f88d 3003 	strb.w	r3, [sp, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
    ca2a:	9b01      	ldr	r3, [sp, #4]
    ca2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ca30:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
    ca34:	bf00      	nop
    ca36:	b002      	add	sp, #8
    ca38:	4770      	bx	lr

0000ca3a <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
    ca3a:	b082      	sub	sp, #8
    ca3c:	9001      	str	r0, [sp, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
    ca3e:	9b01      	ldr	r3, [sp, #4]
    ca40:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
    ca44:	4618      	mov	r0, r3
    ca46:	b002      	add	sp, #8
    ca48:	4770      	bx	lr
	...

0000ca4c <AppHwBattRead>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHwBattRead(uint8_t *pLevel)
{
    ca4c:	b082      	sub	sp, #8
    ca4e:	9001      	str	r0, [sp, #4]
 *pLevel = appHwBattLevel;
    ca50:	4b03      	ldr	r3, [pc, #12]	; (ca60 <AppHwBattRead+0x14>)
    ca52:	781a      	ldrb	r2, [r3, #0]
    ca54:	9b01      	ldr	r3, [sp, #4]
    ca56:	701a      	strb	r2, [r3, #0]
}
    ca58:	bf00      	nop
    ca5a:	b002      	add	sp, #8
    ca5c:	4770      	bx	lr
    ca5e:	bf00      	nop
    ca60:	10002b04 	.word	0x10002b04

0000ca64 <AppHwHrmRead>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHwHrmRead(appHrm_t *pHrm)
{
    ca64:	b082      	sub	sp, #8
    ca66:	9001      	str	r0, [sp, #4]
  pHrm->heartRate = appHwHeartRate;
    ca68:	4b10      	ldr	r3, [pc, #64]	; (caac <AppHwHrmRead+0x48>)
    ca6a:	781b      	ldrb	r3, [r3, #0]
    ca6c:	b29a      	uxth	r2, r3
    ca6e:	9b01      	ldr	r3, [sp, #4]
    ca70:	811a      	strh	r2, [r3, #8]

  /* calculate simulated RR intervals from heart rate */
  appHwRrInterval[0] = APP_HR_MEAS_SIM_RR(appHwHeartRate);
    ca72:	4b0e      	ldr	r3, [pc, #56]	; (caac <AppHwHrmRead+0x48>)
    ca74:	781b      	ldrb	r3, [r3, #0]
    ca76:	461a      	mov	r2, r3
    ca78:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    ca7c:	fb93 f3f2 	sdiv	r3, r3, r2
    ca80:	b29a      	uxth	r2, r3
    ca82:	4b0b      	ldr	r3, [pc, #44]	; (cab0 <AppHwHrmRead+0x4c>)
    ca84:	801a      	strh	r2, [r3, #0]
  appHwRrInterval[1] = APP_HR_MEAS_SIM_RR(appHwHeartRate);
    ca86:	4b09      	ldr	r3, [pc, #36]	; (caac <AppHwHrmRead+0x48>)
    ca88:	781b      	ldrb	r3, [r3, #0]
    ca8a:	461a      	mov	r2, r3
    ca8c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    ca90:	fb93 f3f2 	sdiv	r3, r3, r2
    ca94:	b29a      	uxth	r2, r3
    ca96:	4b06      	ldr	r3, [pc, #24]	; (cab0 <AppHwHrmRead+0x4c>)
    ca98:	805a      	strh	r2, [r3, #2]

  pHrm->pRrInterval = appHwRrInterval;
    ca9a:	9b01      	ldr	r3, [sp, #4]
    ca9c:	4a04      	ldr	r2, [pc, #16]	; (cab0 <AppHwHrmRead+0x4c>)
    ca9e:	601a      	str	r2, [r3, #0]
  pHrm->numIntervals = 2;
    caa0:	9b01      	ldr	r3, [sp, #4]
    caa2:	2202      	movs	r2, #2
    caa4:	711a      	strb	r2, [r3, #4]
}
    caa6:	bf00      	nop
    caa8:	b002      	add	sp, #8
    caaa:	4770      	bx	lr
    caac:	10002b05 	.word	0x10002b05
    cab0:	10004144 	.word	0x10004144

0000cab4 <AppHwHrmTest>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHwHrmTest(uint8_t heartRate)
{
    cab4:	b082      	sub	sp, #8
    cab6:	4603      	mov	r3, r0
    cab8:	f88d 3007 	strb.w	r3, [sp, #7]
  appHwHeartRate = heartRate;
    cabc:	4a03      	ldr	r2, [pc, #12]	; (cacc <AppHwHrmTest+0x18>)
    cabe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cac2:	7013      	strb	r3, [r2, #0]
}
    cac4:	bf00      	nop
    cac6:	b002      	add	sp, #8
    cac8:	4770      	bx	lr
    caca:	bf00      	nop
    cacc:	10002b05 	.word	0x10002b05

0000cad0 <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
    cad0:	b500      	push	{lr}
    cad2:	b083      	sub	sp, #12
    cad4:	4603      	mov	r3, r0
    cad6:	f88d 3007 	strb.w	r3, [sp, #7]
  switch (event)
    cada:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cade:	2b1a      	cmp	r3, #26
    cae0:	d838      	bhi.n	cb54 <AppUiAction+0x84>
    cae2:	a201      	add	r2, pc, #4	; (adr r2, cae8 <AppUiAction+0x18>)
    cae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cae8:	0000cb55 	.word	0x0000cb55
    caec:	0000cb55 	.word	0x0000cb55
    caf0:	0000cb55 	.word	0x0000cb55
    caf4:	0000cb55 	.word	0x0000cb55
    caf8:	0000cb55 	.word	0x0000cb55
    cafc:	0000cb55 	.word	0x0000cb55
    cb00:	0000cb55 	.word	0x0000cb55
    cb04:	0000cb55 	.word	0x0000cb55
    cb08:	0000cb55 	.word	0x0000cb55
    cb0c:	0000cb55 	.word	0x0000cb55
    cb10:	0000cb55 	.word	0x0000cb55
    cb14:	0000cb55 	.word	0x0000cb55
    cb18:	0000cb55 	.word	0x0000cb55
    cb1c:	0000cb55 	.word	0x0000cb55
    cb20:	0000cb55 	.word	0x0000cb55
    cb24:	0000cb55 	.word	0x0000cb55
    cb28:	0000cb55 	.word	0x0000cb55
    cb2c:	0000cb55 	.word	0x0000cb55
    cb30:	0000cb55 	.word	0x0000cb55
    cb34:	0000cb55 	.word	0x0000cb55
    cb38:	0000cb55 	.word	0x0000cb55
    cb3c:	0000cb55 	.word	0x0000cb55
    cb40:	0000cb55 	.word	0x0000cb55
    cb44:	0000cb55 	.word	0x0000cb55
    cb48:	0000cb55 	.word	0x0000cb55
    cb4c:	0000cb55 	.word	0x0000cb55
    cb50:	0000cb55 	.word	0x0000cb55
    case APP_UI_PER_ADV_SYNC_LOST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync lost <<<");
      break;

    default:
      break;
    cb54:	bf00      	nop
  }

  if (appUiCbackTbl.actionCback)
    cb56:	4b07      	ldr	r3, [pc, #28]	; (cb74 <AppUiAction+0xa4>)
    cb58:	685b      	ldr	r3, [r3, #4]
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d005      	beq.n	cb6a <AppUiAction+0x9a>
  {
    (*appUiCbackTbl.actionCback)(event);
    cb5e:	4b05      	ldr	r3, [pc, #20]	; (cb74 <AppUiAction+0xa4>)
    cb60:	685b      	ldr	r3, [r3, #4]
    cb62:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cb66:	4610      	mov	r0, r2
    cb68:	4798      	blx	r3
  }
}
    cb6a:	bf00      	nop
    cb6c:	b003      	add	sp, #12
    cb6e:	f85d fb04 	ldr.w	pc, [sp], #4
    cb72:	bf00      	nop
    cb74:	10004148 	.word	0x10004148

0000cb78 <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
    cb78:	b082      	sub	sp, #8
    cb7a:	9001      	str	r0, [sp, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
}
    cb7c:	bf00      	nop
    cb7e:	b002      	add	sp, #8
    cb80:	4770      	bx	lr

0000cb82 <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
    cb82:	b082      	sub	sp, #8
    cb84:	9001      	str	r0, [sp, #4]
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
}
    cb86:	bf00      	nop
    cb88:	b002      	add	sp, #8
    cb8a:	4770      	bx	lr

0000cb8c <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
    cb8c:	b082      	sub	sp, #8
    cb8e:	9001      	str	r0, [sp, #4]

}
    cb90:	bf00      	nop
    cb92:	b002      	add	sp, #8
    cb94:	4770      	bx	lr
	...

0000cb98 <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
    cb98:	b508      	push	{r3, lr}
  if (appUiCbackTbl.btnPollCback)
    cb9a:	4b04      	ldr	r3, [pc, #16]	; (cbac <appUiBtnPoll+0x14>)
    cb9c:	689b      	ldr	r3, [r3, #8]
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d002      	beq.n	cba8 <appUiBtnPoll+0x10>
  {
    (*appUiCbackTbl.btnPollCback)();
    cba2:	4b02      	ldr	r3, [pc, #8]	; (cbac <appUiBtnPoll+0x14>)
    cba4:	689b      	ldr	r3, [r3, #8]
    cba6:	4798      	blx	r3
  }
}
    cba8:	bf00      	nop
    cbaa:	bd08      	pop	{r3, pc}
    cbac:	10004148 	.word	0x10004148

0000cbb0 <AppUiBtnPressed>:
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{

}
    cbb0:	bf00      	nop
    cbb2:	4770      	bx	lr

0000cbb4 <AppUiBtnRegister>:
 *
 *  \note   Registered by application to receive button events
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t btnCback)
{
    cbb4:	b082      	sub	sp, #8
    cbb6:	9001      	str	r0, [sp, #4]
  appUiCbackTbl.btnCback = btnCback;
    cbb8:	4a02      	ldr	r2, [pc, #8]	; (cbc4 <AppUiBtnRegister+0x10>)
    cbba:	9b01      	ldr	r3, [sp, #4]
    cbbc:	6013      	str	r3, [r2, #0]
}
    cbbe:	bf00      	nop
    cbc0:	b002      	add	sp, #8
    cbc2:	4770      	bx	lr
    cbc4:	10004148 	.word	0x10004148

0000cbc8 <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
    cbc8:	b500      	push	{lr}
    cbca:	b085      	sub	sp, #20
    cbcc:	4603      	mov	r3, r0
    cbce:	460a      	mov	r2, r1
    cbd0:	f8ad 3006 	strh.w	r3, [sp, #6]
    cbd4:	4613      	mov	r3, r2
    cbd6:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
    cbda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cbde:	3303      	adds	r3, #3
    cbe0:	b29b      	uxth	r3, r3
    cbe2:	4618      	mov	r0, r3
    cbe4:	f012 fe86 	bl	1f8f4 <WsfMsgAlloc>
    cbe8:	9003      	str	r0, [sp, #12]
    cbea:	9b03      	ldr	r3, [sp, #12]
    cbec:	2b00      	cmp	r3, #0
    cbee:	d019      	beq.n	cc24 <hciCmdAlloc+0x5c>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
    cbf0:	9b03      	ldr	r3, [sp, #12]
    cbf2:	1c5a      	adds	r2, r3, #1
    cbf4:	9203      	str	r2, [sp, #12]
    cbf6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    cbfa:	b2d2      	uxtb	r2, r2
    cbfc:	701a      	strb	r2, [r3, #0]
    cbfe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cc02:	0a1b      	lsrs	r3, r3, #8
    cc04:	b299      	uxth	r1, r3
    cc06:	9b03      	ldr	r3, [sp, #12]
    cc08:	1c5a      	adds	r2, r3, #1
    cc0a:	9203      	str	r2, [sp, #12]
    cc0c:	b2ca      	uxtb	r2, r1
    cc0e:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
    cc10:	9b03      	ldr	r3, [sp, #12]
    cc12:	1c5a      	adds	r2, r3, #1
    cc14:	9203      	str	r2, [sp, #12]
    cc16:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    cc1a:	b2d2      	uxtb	r2, r2
    cc1c:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
    cc1e:	9b03      	ldr	r3, [sp, #12]
    cc20:	3b03      	subs	r3, #3
    cc22:	9303      	str	r3, [sp, #12]
  }

  return p;
    cc24:	9b03      	ldr	r3, [sp, #12]
}
    cc26:	4618      	mov	r0, r3
    cc28:	b005      	add	sp, #20
    cc2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000cc30 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
    cc30:	b500      	push	{lr}
    cc32:	b085      	sub	sp, #20
    cc34:	9001      	str	r0, [sp, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
    cc36:	9b01      	ldr	r3, [sp, #4]
    cc38:	2b00      	cmp	r3, #0
    cc3a:	d004      	beq.n	cc46 <hciCmdSend+0x16>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
    cc3c:	9a01      	ldr	r2, [sp, #4]
    cc3e:	2100      	movs	r1, #0
    cc40:	4817      	ldr	r0, [pc, #92]	; (cca0 <hciCmdSend+0x70>)
    cc42:	f012 fe96 	bl	1f972 <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
    cc46:	4b17      	ldr	r3, [pc, #92]	; (cca4 <hciCmdSend+0x74>)
    cc48:	7e9b      	ldrb	r3, [r3, #26]
    cc4a:	2b00      	cmp	r3, #0
    cc4c:	d023      	beq.n	cc96 <hciCmdSend+0x66>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    cc4e:	f10d 030b 	add.w	r3, sp, #11
    cc52:	4619      	mov	r1, r3
    cc54:	4812      	ldr	r0, [pc, #72]	; (cca0 <hciCmdSend+0x70>)
    cc56:	f012 fea2 	bl	1f99e <WsfMsgDeq>
    cc5a:	9003      	str	r0, [sp, #12]
    cc5c:	9b03      	ldr	r3, [sp, #12]
    cc5e:	2b00      	cmp	r3, #0
    cc60:	d019      	beq.n	cc96 <hciCmdSend+0x66>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
    cc62:	4b10      	ldr	r3, [pc, #64]	; (cca4 <hciCmdSend+0x74>)
    cc64:	7e9b      	ldrb	r3, [r3, #26]
    cc66:	3b01      	subs	r3, #1
    cc68:	b2da      	uxtb	r2, r3
    cc6a:	4b0e      	ldr	r3, [pc, #56]	; (cca4 <hciCmdSend+0x74>)
    cc6c:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
    cc6e:	9b03      	ldr	r3, [sp, #12]
    cc70:	781b      	ldrb	r3, [r3, #0]
    cc72:	b29a      	uxth	r2, r3
    cc74:	9b03      	ldr	r3, [sp, #12]
    cc76:	3301      	adds	r3, #1
    cc78:	781b      	ldrb	r3, [r3, #0]
    cc7a:	b29b      	uxth	r3, r3
    cc7c:	021b      	lsls	r3, r3, #8
    cc7e:	b29b      	uxth	r3, r3
    cc80:	4413      	add	r3, r2
    cc82:	b29a      	uxth	r2, r3
    cc84:	4b07      	ldr	r3, [pc, #28]	; (cca4 <hciCmdSend+0x74>)
    cc86:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
    cc88:	210a      	movs	r1, #10
    cc8a:	4806      	ldr	r0, [pc, #24]	; (cca4 <hciCmdSend+0x74>)
    cc8c:	f013 f9ce 	bl	2002c <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
    cc90:	9803      	ldr	r0, [sp, #12]
    cc92:	f003 fce6 	bl	10662 <hciTrSendCmd>
    }
  }
}
    cc96:	bf00      	nop
    cc98:	b005      	add	sp, #20
    cc9a:	f85d fb04 	ldr.w	pc, [sp], #4
    cc9e:	bf00      	nop
    cca0:	10004164 	.word	0x10004164
    cca4:	10004154 	.word	0x10004154

0000cca8 <hciCmdInit>:
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
    cca8:	4b08      	ldr	r3, [pc, #32]	; (cccc <hciCmdInit+0x24>)
    ccaa:	2200      	movs	r2, #0
    ccac:	611a      	str	r2, [r3, #16]
    ccae:	4b07      	ldr	r3, [pc, #28]	; (cccc <hciCmdInit+0x24>)
    ccb0:	2200      	movs	r2, #0
    ccb2:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
    ccb4:	4b05      	ldr	r3, [pc, #20]	; (cccc <hciCmdInit+0x24>)
    ccb6:	2201      	movs	r2, #1
    ccb8:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
    ccba:	4b04      	ldr	r3, [pc, #16]	; (cccc <hciCmdInit+0x24>)
    ccbc:	2201      	movs	r2, #1
    ccbe:	729a      	strb	r2, [r3, #10]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
    ccc0:	4b03      	ldr	r3, [pc, #12]	; (ccd0 <hciCmdInit+0x28>)
    ccc2:	7e1a      	ldrb	r2, [r3, #24]
    ccc4:	4b01      	ldr	r3, [pc, #4]	; (cccc <hciCmdInit+0x24>)
    ccc6:	731a      	strb	r2, [r3, #12]
}
    ccc8:	bf00      	nop
    ccca:	4770      	bx	lr
    cccc:	10004154 	.word	0x10004154
    ccd0:	10004230 	.word	0x10004230

0000ccd4 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
    ccd4:	b500      	push	{lr}
    ccd6:	b083      	sub	sp, #12
    ccd8:	9001      	str	r0, [sp, #4]
  HCI_TRACE_INFO1("hciCmdTimeout, opcode=0x%x", hciCmdCb.cmdOpcode);
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
    ccda:	f014 f8a5 	bl	20e28 <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
    ccde:	2000      	movs	r0, #0
    cce0:	f013 ffa8 	bl	20c34 <HciDrvRadioBoot>
  DmDevReset();
    cce4:	f009 f930 	bl	15f48 <DmDevReset>
}
    cce8:	bf00      	nop
    ccea:	b003      	add	sp, #12
    ccec:	f85d fb04 	ldr.w	pc, [sp], #4

0000ccf0 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
    ccf0:	b500      	push	{lr}
    ccf2:	b083      	sub	sp, #12
    ccf4:	4603      	mov	r3, r0
    ccf6:	f88d 3007 	strb.w	r3, [sp, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
    ccfa:	4806      	ldr	r0, [pc, #24]	; (cd14 <hciCmdRecvCmpl+0x24>)
    ccfc:	f013 f9ba 	bl	20074 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
    cd00:	4b04      	ldr	r3, [pc, #16]	; (cd14 <hciCmdRecvCmpl+0x24>)
    cd02:	2201      	movs	r2, #1
    cd04:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
    cd06:	2000      	movs	r0, #0
    cd08:	f7ff ff92 	bl	cc30 <hciCmdSend>
}
    cd0c:	bf00      	nop
    cd0e:	b003      	add	sp, #12
    cd10:	f85d fb04 	ldr.w	pc, [sp], #4
    cd14:	10004154 	.word	0x10004154

0000cd18 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
    cd18:	b500      	push	{lr}
    cd1a:	b085      	sub	sp, #20
    cd1c:	4603      	mov	r3, r0
    cd1e:	460a      	mov	r2, r1
    cd20:	f8ad 3006 	strh.w	r3, [sp, #6]
    cd24:	4613      	mov	r3, r2
    cd26:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
    cd2a:	2103      	movs	r1, #3
    cd2c:	f240 4006 	movw	r0, #1030	; 0x406
    cd30:	f7ff ff4a 	bl	cbc8 <hciCmdAlloc>
    cd34:	9003      	str	r0, [sp, #12]
    cd36:	9b03      	ldr	r3, [sp, #12]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d01b      	beq.n	cd74 <HciDisconnectCmd+0x5c>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    cd3c:	9b03      	ldr	r3, [sp, #12]
    cd3e:	3303      	adds	r3, #3
    cd40:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    cd42:	9b02      	ldr	r3, [sp, #8]
    cd44:	1c5a      	adds	r2, r3, #1
    cd46:	9202      	str	r2, [sp, #8]
    cd48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    cd4c:	b2d2      	uxtb	r2, r2
    cd4e:	701a      	strb	r2, [r3, #0]
    cd50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cd54:	0a1b      	lsrs	r3, r3, #8
    cd56:	b299      	uxth	r1, r3
    cd58:	9b02      	ldr	r3, [sp, #8]
    cd5a:	1c5a      	adds	r2, r3, #1
    cd5c:	9202      	str	r2, [sp, #8]
    cd5e:	b2ca      	uxtb	r2, r1
    cd60:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
    cd62:	9b02      	ldr	r3, [sp, #8]
    cd64:	1c5a      	adds	r2, r3, #1
    cd66:	9202      	str	r2, [sp, #8]
    cd68:	f89d 2005 	ldrb.w	r2, [sp, #5]
    cd6c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    cd6e:	9803      	ldr	r0, [sp, #12]
    cd70:	f7ff ff5e 	bl	cc30 <hciCmdSend>
  }
}
    cd74:	bf00      	nop
    cd76:	b005      	add	sp, #20
    cd78:	f85d fb04 	ldr.w	pc, [sp], #4

0000cd7c <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
    cd7c:	b500      	push	{lr}
    cd7e:	b085      	sub	sp, #20
    cd80:	4603      	mov	r3, r0
    cd82:	9100      	str	r1, [sp, #0]
    cd84:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
    cd88:	210e      	movs	r1, #14
    cd8a:	f242 0013 	movw	r0, #8211	; 0x2013
    cd8e:	f7ff ff1b 	bl	cbc8 <hciCmdAlloc>
    cd92:	9003      	str	r0, [sp, #12]
    cd94:	9b03      	ldr	r3, [sp, #12]
    cd96:	2b00      	cmp	r3, #0
    cd98:	d075      	beq.n	ce86 <HciLeConnUpdateCmd+0x10a>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    cd9a:	9b03      	ldr	r3, [sp, #12]
    cd9c:	3303      	adds	r3, #3
    cd9e:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    cda0:	9b02      	ldr	r3, [sp, #8]
    cda2:	1c5a      	adds	r2, r3, #1
    cda4:	9202      	str	r2, [sp, #8]
    cda6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    cdaa:	b2d2      	uxtb	r2, r2
    cdac:	701a      	strb	r2, [r3, #0]
    cdae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cdb2:	0a1b      	lsrs	r3, r3, #8
    cdb4:	b299      	uxth	r1, r3
    cdb6:	9b02      	ldr	r3, [sp, #8]
    cdb8:	1c5a      	adds	r2, r3, #1
    cdba:	9202      	str	r2, [sp, #8]
    cdbc:	b2ca      	uxtb	r2, r1
    cdbe:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
    cdc0:	9b00      	ldr	r3, [sp, #0]
    cdc2:	8819      	ldrh	r1, [r3, #0]
    cdc4:	9b02      	ldr	r3, [sp, #8]
    cdc6:	1c5a      	adds	r2, r3, #1
    cdc8:	9202      	str	r2, [sp, #8]
    cdca:	b2ca      	uxtb	r2, r1
    cdcc:	701a      	strb	r2, [r3, #0]
    cdce:	9b00      	ldr	r3, [sp, #0]
    cdd0:	881b      	ldrh	r3, [r3, #0]
    cdd2:	0a1b      	lsrs	r3, r3, #8
    cdd4:	b299      	uxth	r1, r3
    cdd6:	9b02      	ldr	r3, [sp, #8]
    cdd8:	1c5a      	adds	r2, r3, #1
    cdda:	9202      	str	r2, [sp, #8]
    cddc:	b2ca      	uxtb	r2, r1
    cdde:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
    cde0:	9b00      	ldr	r3, [sp, #0]
    cde2:	8859      	ldrh	r1, [r3, #2]
    cde4:	9b02      	ldr	r3, [sp, #8]
    cde6:	1c5a      	adds	r2, r3, #1
    cde8:	9202      	str	r2, [sp, #8]
    cdea:	b2ca      	uxtb	r2, r1
    cdec:	701a      	strb	r2, [r3, #0]
    cdee:	9b00      	ldr	r3, [sp, #0]
    cdf0:	885b      	ldrh	r3, [r3, #2]
    cdf2:	0a1b      	lsrs	r3, r3, #8
    cdf4:	b299      	uxth	r1, r3
    cdf6:	9b02      	ldr	r3, [sp, #8]
    cdf8:	1c5a      	adds	r2, r3, #1
    cdfa:	9202      	str	r2, [sp, #8]
    cdfc:	b2ca      	uxtb	r2, r1
    cdfe:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
    ce00:	9b00      	ldr	r3, [sp, #0]
    ce02:	8899      	ldrh	r1, [r3, #4]
    ce04:	9b02      	ldr	r3, [sp, #8]
    ce06:	1c5a      	adds	r2, r3, #1
    ce08:	9202      	str	r2, [sp, #8]
    ce0a:	b2ca      	uxtb	r2, r1
    ce0c:	701a      	strb	r2, [r3, #0]
    ce0e:	9b00      	ldr	r3, [sp, #0]
    ce10:	889b      	ldrh	r3, [r3, #4]
    ce12:	0a1b      	lsrs	r3, r3, #8
    ce14:	b299      	uxth	r1, r3
    ce16:	9b02      	ldr	r3, [sp, #8]
    ce18:	1c5a      	adds	r2, r3, #1
    ce1a:	9202      	str	r2, [sp, #8]
    ce1c:	b2ca      	uxtb	r2, r1
    ce1e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
    ce20:	9b00      	ldr	r3, [sp, #0]
    ce22:	88d9      	ldrh	r1, [r3, #6]
    ce24:	9b02      	ldr	r3, [sp, #8]
    ce26:	1c5a      	adds	r2, r3, #1
    ce28:	9202      	str	r2, [sp, #8]
    ce2a:	b2ca      	uxtb	r2, r1
    ce2c:	701a      	strb	r2, [r3, #0]
    ce2e:	9b00      	ldr	r3, [sp, #0]
    ce30:	88db      	ldrh	r3, [r3, #6]
    ce32:	0a1b      	lsrs	r3, r3, #8
    ce34:	b299      	uxth	r1, r3
    ce36:	9b02      	ldr	r3, [sp, #8]
    ce38:	1c5a      	adds	r2, r3, #1
    ce3a:	9202      	str	r2, [sp, #8]
    ce3c:	b2ca      	uxtb	r2, r1
    ce3e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
    ce40:	9b00      	ldr	r3, [sp, #0]
    ce42:	8919      	ldrh	r1, [r3, #8]
    ce44:	9b02      	ldr	r3, [sp, #8]
    ce46:	1c5a      	adds	r2, r3, #1
    ce48:	9202      	str	r2, [sp, #8]
    ce4a:	b2ca      	uxtb	r2, r1
    ce4c:	701a      	strb	r2, [r3, #0]
    ce4e:	9b00      	ldr	r3, [sp, #0]
    ce50:	891b      	ldrh	r3, [r3, #8]
    ce52:	0a1b      	lsrs	r3, r3, #8
    ce54:	b299      	uxth	r1, r3
    ce56:	9b02      	ldr	r3, [sp, #8]
    ce58:	1c5a      	adds	r2, r3, #1
    ce5a:	9202      	str	r2, [sp, #8]
    ce5c:	b2ca      	uxtb	r2, r1
    ce5e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
    ce60:	9b00      	ldr	r3, [sp, #0]
    ce62:	8959      	ldrh	r1, [r3, #10]
    ce64:	9b02      	ldr	r3, [sp, #8]
    ce66:	1c5a      	adds	r2, r3, #1
    ce68:	9202      	str	r2, [sp, #8]
    ce6a:	b2ca      	uxtb	r2, r1
    ce6c:	701a      	strb	r2, [r3, #0]
    ce6e:	9b00      	ldr	r3, [sp, #0]
    ce70:	895b      	ldrh	r3, [r3, #10]
    ce72:	0a1b      	lsrs	r3, r3, #8
    ce74:	b299      	uxth	r1, r3
    ce76:	9b02      	ldr	r3, [sp, #8]
    ce78:	1c5a      	adds	r2, r3, #1
    ce7a:	9202      	str	r2, [sp, #8]
    ce7c:	b2ca      	uxtb	r2, r1
    ce7e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    ce80:	9803      	ldr	r0, [sp, #12]
    ce82:	f7ff fed5 	bl	cc30 <hciCmdSend>
  }
}
    ce86:	bf00      	nop
    ce88:	b005      	add	sp, #20
    ce8a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce8e <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
    ce8e:	b510      	push	{r4, lr}
    ce90:	b084      	sub	sp, #16
    ce92:	4604      	mov	r4, r0
    ce94:	4608      	mov	r0, r1
    ce96:	4611      	mov	r1, r2
    ce98:	461a      	mov	r2, r3
    ce9a:	4623      	mov	r3, r4
    ce9c:	f8ad 3006 	strh.w	r3, [sp, #6]
    cea0:	4603      	mov	r3, r0
    cea2:	f8ad 3004 	strh.w	r3, [sp, #4]
    cea6:	460b      	mov	r3, r1
    cea8:	f8ad 3002 	strh.w	r3, [sp, #2]
    ceac:	4613      	mov	r3, r2
    ceae:	f8ad 3000 	strh.w	r3, [sp]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
    ceb2:	210e      	movs	r1, #14
    ceb4:	f242 0020 	movw	r0, #8224	; 0x2020
    ceb8:	f7ff fe86 	bl	cbc8 <hciCmdAlloc>
    cebc:	9003      	str	r0, [sp, #12]
    cebe:	9b03      	ldr	r3, [sp, #12]
    cec0:	2b00      	cmp	r3, #0
    cec2:	d075      	beq.n	cfb0 <HciLeRemoteConnParamReqReply+0x122>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    cec4:	9b03      	ldr	r3, [sp, #12]
    cec6:	3303      	adds	r3, #3
    cec8:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    ceca:	9b02      	ldr	r3, [sp, #8]
    cecc:	1c5a      	adds	r2, r3, #1
    cece:	9202      	str	r2, [sp, #8]
    ced0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ced4:	b2d2      	uxtb	r2, r2
    ced6:	701a      	strb	r2, [r3, #0]
    ced8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cedc:	0a1b      	lsrs	r3, r3, #8
    cede:	b299      	uxth	r1, r3
    cee0:	9b02      	ldr	r3, [sp, #8]
    cee2:	1c5a      	adds	r2, r3, #1
    cee4:	9202      	str	r2, [sp, #8]
    cee6:	b2ca      	uxtb	r2, r1
    cee8:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
    ceea:	9b02      	ldr	r3, [sp, #8]
    ceec:	1c5a      	adds	r2, r3, #1
    ceee:	9202      	str	r2, [sp, #8]
    cef0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    cef4:	b2d2      	uxtb	r2, r2
    cef6:	701a      	strb	r2, [r3, #0]
    cef8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cefc:	0a1b      	lsrs	r3, r3, #8
    cefe:	b299      	uxth	r1, r3
    cf00:	9b02      	ldr	r3, [sp, #8]
    cf02:	1c5a      	adds	r2, r3, #1
    cf04:	9202      	str	r2, [sp, #8]
    cf06:	b2ca      	uxtb	r2, r1
    cf08:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
    cf0a:	9b02      	ldr	r3, [sp, #8]
    cf0c:	1c5a      	adds	r2, r3, #1
    cf0e:	9202      	str	r2, [sp, #8]
    cf10:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    cf14:	b2d2      	uxtb	r2, r2
    cf16:	701a      	strb	r2, [r3, #0]
    cf18:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    cf1c:	0a1b      	lsrs	r3, r3, #8
    cf1e:	b299      	uxth	r1, r3
    cf20:	9b02      	ldr	r3, [sp, #8]
    cf22:	1c5a      	adds	r2, r3, #1
    cf24:	9202      	str	r2, [sp, #8]
    cf26:	b2ca      	uxtb	r2, r1
    cf28:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
    cf2a:	9b02      	ldr	r3, [sp, #8]
    cf2c:	1c5a      	adds	r2, r3, #1
    cf2e:	9202      	str	r2, [sp, #8]
    cf30:	f8bd 2000 	ldrh.w	r2, [sp]
    cf34:	b2d2      	uxtb	r2, r2
    cf36:	701a      	strb	r2, [r3, #0]
    cf38:	f8bd 3000 	ldrh.w	r3, [sp]
    cf3c:	0a1b      	lsrs	r3, r3, #8
    cf3e:	b299      	uxth	r1, r3
    cf40:	9b02      	ldr	r3, [sp, #8]
    cf42:	1c5a      	adds	r2, r3, #1
    cf44:	9202      	str	r2, [sp, #8]
    cf46:	b2ca      	uxtb	r2, r1
    cf48:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
    cf4a:	9b02      	ldr	r3, [sp, #8]
    cf4c:	1c5a      	adds	r2, r3, #1
    cf4e:	9202      	str	r2, [sp, #8]
    cf50:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    cf54:	b2d2      	uxtb	r2, r2
    cf56:	701a      	strb	r2, [r3, #0]
    cf58:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    cf5c:	0a1b      	lsrs	r3, r3, #8
    cf5e:	b299      	uxth	r1, r3
    cf60:	9b02      	ldr	r3, [sp, #8]
    cf62:	1c5a      	adds	r2, r3, #1
    cf64:	9202      	str	r2, [sp, #8]
    cf66:	b2ca      	uxtb	r2, r1
    cf68:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
    cf6a:	9b02      	ldr	r3, [sp, #8]
    cf6c:	1c5a      	adds	r2, r3, #1
    cf6e:	9202      	str	r2, [sp, #8]
    cf70:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    cf74:	b2d2      	uxtb	r2, r2
    cf76:	701a      	strb	r2, [r3, #0]
    cf78:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    cf7c:	0a1b      	lsrs	r3, r3, #8
    cf7e:	b299      	uxth	r1, r3
    cf80:	9b02      	ldr	r3, [sp, #8]
    cf82:	1c5a      	adds	r2, r3, #1
    cf84:	9202      	str	r2, [sp, #8]
    cf86:	b2ca      	uxtb	r2, r1
    cf88:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
    cf8a:	9b02      	ldr	r3, [sp, #8]
    cf8c:	1c5a      	adds	r2, r3, #1
    cf8e:	9202      	str	r2, [sp, #8]
    cf90:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    cf94:	b2d2      	uxtb	r2, r2
    cf96:	701a      	strb	r2, [r3, #0]
    cf98:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    cf9c:	0a1b      	lsrs	r3, r3, #8
    cf9e:	b299      	uxth	r1, r3
    cfa0:	9b02      	ldr	r3, [sp, #8]
    cfa2:	1c5a      	adds	r2, r3, #1
    cfa4:	9202      	str	r2, [sp, #8]
    cfa6:	b2ca      	uxtb	r2, r1
    cfa8:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    cfaa:	9803      	ldr	r0, [sp, #12]
    cfac:	f7ff fe40 	bl	cc30 <hciCmdSend>
  }
}
    cfb0:	bf00      	nop
    cfb2:	b004      	add	sp, #16
    cfb4:	bd10      	pop	{r4, pc}

0000cfb6 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
    cfb6:	b500      	push	{lr}
    cfb8:	b085      	sub	sp, #20
    cfba:	4603      	mov	r3, r0
    cfbc:	460a      	mov	r2, r1
    cfbe:	f8ad 3006 	strh.w	r3, [sp, #6]
    cfc2:	4613      	mov	r3, r2
    cfc4:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
    cfc8:	2103      	movs	r1, #3
    cfca:	f242 0021 	movw	r0, #8225	; 0x2021
    cfce:	f7ff fdfb 	bl	cbc8 <hciCmdAlloc>
    cfd2:	9003      	str	r0, [sp, #12]
    cfd4:	9b03      	ldr	r3, [sp, #12]
    cfd6:	2b00      	cmp	r3, #0
    cfd8:	d01b      	beq.n	d012 <HciLeRemoteConnParamReqNegReply+0x5c>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    cfda:	9b03      	ldr	r3, [sp, #12]
    cfdc:	3303      	adds	r3, #3
    cfde:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    cfe0:	9b02      	ldr	r3, [sp, #8]
    cfe2:	1c5a      	adds	r2, r3, #1
    cfe4:	9202      	str	r2, [sp, #8]
    cfe6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    cfea:	b2d2      	uxtb	r2, r2
    cfec:	701a      	strb	r2, [r3, #0]
    cfee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cff2:	0a1b      	lsrs	r3, r3, #8
    cff4:	b299      	uxth	r1, r3
    cff6:	9b02      	ldr	r3, [sp, #8]
    cff8:	1c5a      	adds	r2, r3, #1
    cffa:	9202      	str	r2, [sp, #8]
    cffc:	b2ca      	uxtb	r2, r1
    cffe:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
    d000:	9b02      	ldr	r3, [sp, #8]
    d002:	1c5a      	adds	r2, r3, #1
    d004:	9202      	str	r2, [sp, #8]
    d006:	f89d 2005 	ldrb.w	r2, [sp, #5]
    d00a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d00c:	9803      	ldr	r0, [sp, #12]
    d00e:	f7ff fe0f 	bl	cc30 <hciCmdSend>
  }
}
    d012:	bf00      	nop
    d014:	b005      	add	sp, #20
    d016:	f85d fb04 	ldr.w	pc, [sp], #4

0000d01a <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
    d01a:	b500      	push	{lr}
    d01c:	b085      	sub	sp, #20
    d01e:	4603      	mov	r3, r0
    d020:	f8ad 3006 	strh.w	r3, [sp, #6]
    d024:	460b      	mov	r3, r1
    d026:	f8ad 3004 	strh.w	r3, [sp, #4]
    d02a:	4613      	mov	r3, r2
    d02c:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
    d030:	2106      	movs	r1, #6
    d032:	f242 0022 	movw	r0, #8226	; 0x2022
    d036:	f7ff fdc7 	bl	cbc8 <hciCmdAlloc>
    d03a:	9003      	str	r0, [sp, #12]
    d03c:	9b03      	ldr	r3, [sp, #12]
    d03e:	2b00      	cmp	r3, #0
    d040:	d035      	beq.n	d0ae <HciLeSetDataLen+0x94>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d042:	9b03      	ldr	r3, [sp, #12]
    d044:	3303      	adds	r3, #3
    d046:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    d048:	9b02      	ldr	r3, [sp, #8]
    d04a:	1c5a      	adds	r2, r3, #1
    d04c:	9202      	str	r2, [sp, #8]
    d04e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d052:	b2d2      	uxtb	r2, r2
    d054:	701a      	strb	r2, [r3, #0]
    d056:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d05a:	0a1b      	lsrs	r3, r3, #8
    d05c:	b299      	uxth	r1, r3
    d05e:	9b02      	ldr	r3, [sp, #8]
    d060:	1c5a      	adds	r2, r3, #1
    d062:	9202      	str	r2, [sp, #8]
    d064:	b2ca      	uxtb	r2, r1
    d066:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
    d068:	9b02      	ldr	r3, [sp, #8]
    d06a:	1c5a      	adds	r2, r3, #1
    d06c:	9202      	str	r2, [sp, #8]
    d06e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d072:	b2d2      	uxtb	r2, r2
    d074:	701a      	strb	r2, [r3, #0]
    d076:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d07a:	0a1b      	lsrs	r3, r3, #8
    d07c:	b299      	uxth	r1, r3
    d07e:	9b02      	ldr	r3, [sp, #8]
    d080:	1c5a      	adds	r2, r3, #1
    d082:	9202      	str	r2, [sp, #8]
    d084:	b2ca      	uxtb	r2, r1
    d086:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
    d088:	9b02      	ldr	r3, [sp, #8]
    d08a:	1c5a      	adds	r2, r3, #1
    d08c:	9202      	str	r2, [sp, #8]
    d08e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d092:	b2d2      	uxtb	r2, r2
    d094:	701a      	strb	r2, [r3, #0]
    d096:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    d09a:	0a1b      	lsrs	r3, r3, #8
    d09c:	b299      	uxth	r1, r3
    d09e:	9b02      	ldr	r3, [sp, #8]
    d0a0:	1c5a      	adds	r2, r3, #1
    d0a2:	9202      	str	r2, [sp, #8]
    d0a4:	b2ca      	uxtb	r2, r1
    d0a6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d0a8:	9803      	ldr	r0, [sp, #12]
    d0aa:	f7ff fdc1 	bl	cc30 <hciCmdSend>
  }
}
    d0ae:	bf00      	nop
    d0b0:	b005      	add	sp, #20
    d0b2:	f85d fb04 	ldr.w	pc, [sp], #4

0000d0b6 <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
    d0b6:	b500      	push	{lr}
    d0b8:	b085      	sub	sp, #20
    d0ba:	4603      	mov	r3, r0
    d0bc:	460a      	mov	r2, r1
    d0be:	f8ad 3006 	strh.w	r3, [sp, #6]
    d0c2:	4613      	mov	r3, r2
    d0c4:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
    d0c8:	2104      	movs	r1, #4
    d0ca:	f242 0024 	movw	r0, #8228	; 0x2024
    d0ce:	f7ff fd7b 	bl	cbc8 <hciCmdAlloc>
    d0d2:	9003      	str	r0, [sp, #12]
    d0d4:	9b03      	ldr	r3, [sp, #12]
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	d025      	beq.n	d126 <HciLeWriteDefDataLen+0x70>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d0da:	9b03      	ldr	r3, [sp, #12]
    d0dc:	3303      	adds	r3, #3
    d0de:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
    d0e0:	9b02      	ldr	r3, [sp, #8]
    d0e2:	1c5a      	adds	r2, r3, #1
    d0e4:	9202      	str	r2, [sp, #8]
    d0e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d0ea:	b2d2      	uxtb	r2, r2
    d0ec:	701a      	strb	r2, [r3, #0]
    d0ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d0f2:	0a1b      	lsrs	r3, r3, #8
    d0f4:	b299      	uxth	r1, r3
    d0f6:	9b02      	ldr	r3, [sp, #8]
    d0f8:	1c5a      	adds	r2, r3, #1
    d0fa:	9202      	str	r2, [sp, #8]
    d0fc:	b2ca      	uxtb	r2, r1
    d0fe:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
    d100:	9b02      	ldr	r3, [sp, #8]
    d102:	1c5a      	adds	r2, r3, #1
    d104:	9202      	str	r2, [sp, #8]
    d106:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d10a:	b2d2      	uxtb	r2, r2
    d10c:	701a      	strb	r2, [r3, #0]
    d10e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d112:	0a1b      	lsrs	r3, r3, #8
    d114:	b299      	uxth	r1, r3
    d116:	9b02      	ldr	r3, [sp, #8]
    d118:	1c5a      	adds	r2, r3, #1
    d11a:	9202      	str	r2, [sp, #8]
    d11c:	b2ca      	uxtb	r2, r1
    d11e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d120:	9803      	ldr	r0, [sp, #12]
    d122:	f7ff fd85 	bl	cc30 <hciCmdSend>
  }
}
    d126:	bf00      	nop
    d128:	b005      	add	sp, #20
    d12a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d12e <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
    d12e:	b500      	push	{lr}
    d130:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
    d132:	2100      	movs	r1, #0
    d134:	f242 002f 	movw	r0, #8239	; 0x202f
    d138:	f7ff fd46 	bl	cbc8 <hciCmdAlloc>
    d13c:	9001      	str	r0, [sp, #4]
    d13e:	9b01      	ldr	r3, [sp, #4]
    d140:	2b00      	cmp	r3, #0
    d142:	d002      	beq.n	d14a <HciLeReadMaxDataLen+0x1c>
  {
    hciCmdSend(pBuf);
    d144:	9801      	ldr	r0, [sp, #4]
    d146:	f7ff fd73 	bl	cc30 <hciCmdSend>
  }
}
    d14a:	bf00      	nop
    d14c:	b003      	add	sp, #12
    d14e:	f85d fb04 	ldr.w	pc, [sp], #4

0000d152 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
    d152:	b500      	push	{lr}
    d154:	b085      	sub	sp, #20
    d156:	9001      	str	r0, [sp, #4]
    d158:	9100      	str	r1, [sp, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
    d15a:	2120      	movs	r1, #32
    d15c:	f242 0017 	movw	r0, #8215	; 0x2017
    d160:	f7ff fd32 	bl	cbc8 <hciCmdAlloc>
    d164:	9003      	str	r0, [sp, #12]
    d166:	9b03      	ldr	r3, [sp, #12]
    d168:	2b00      	cmp	r3, #0
    d16a:	d012      	beq.n	d192 <HciLeEncryptCmd+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d16c:	9b03      	ldr	r3, [sp, #12]
    d16e:	3303      	adds	r3, #3
    d170:	9302      	str	r3, [sp, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
    d172:	2210      	movs	r2, #16
    d174:	9901      	ldr	r1, [sp, #4]
    d176:	9802      	ldr	r0, [sp, #8]
    d178:	f7fe ffc2 	bl	c100 <memcpy>
    p += HCI_KEY_LEN;
    d17c:	9b02      	ldr	r3, [sp, #8]
    d17e:	3310      	adds	r3, #16
    d180:	9302      	str	r3, [sp, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
    d182:	2210      	movs	r2, #16
    d184:	9900      	ldr	r1, [sp, #0]
    d186:	9802      	ldr	r0, [sp, #8]
    d188:	f7fe ffba 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
    d18c:	9803      	ldr	r0, [sp, #12]
    d18e:	f7ff fd4f 	bl	cc30 <hciCmdSend>
  }
}
    d192:	bf00      	nop
    d194:	b005      	add	sp, #20
    d196:	f85d fb04 	ldr.w	pc, [sp], #4

0000d19a <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
    d19a:	b500      	push	{lr}
    d19c:	b085      	sub	sp, #20
    d19e:	4603      	mov	r3, r0
    d1a0:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
    d1a4:	2102      	movs	r1, #2
    d1a6:	f242 001b 	movw	r0, #8219	; 0x201b
    d1aa:	f7ff fd0d 	bl	cbc8 <hciCmdAlloc>
    d1ae:	9003      	str	r0, [sp, #12]
    d1b0:	9b03      	ldr	r3, [sp, #12]
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	d015      	beq.n	d1e2 <HciLeLtkReqNegReplCmd+0x48>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d1b6:	9b03      	ldr	r3, [sp, #12]
    d1b8:	3303      	adds	r3, #3
    d1ba:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    d1bc:	9b02      	ldr	r3, [sp, #8]
    d1be:	1c5a      	adds	r2, r3, #1
    d1c0:	9202      	str	r2, [sp, #8]
    d1c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d1c6:	b2d2      	uxtb	r2, r2
    d1c8:	701a      	strb	r2, [r3, #0]
    d1ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d1ce:	0a1b      	lsrs	r3, r3, #8
    d1d0:	b299      	uxth	r1, r3
    d1d2:	9b02      	ldr	r3, [sp, #8]
    d1d4:	1c5a      	adds	r2, r3, #1
    d1d6:	9202      	str	r2, [sp, #8]
    d1d8:	b2ca      	uxtb	r2, r1
    d1da:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d1dc:	9803      	ldr	r0, [sp, #12]
    d1de:	f7ff fd27 	bl	cc30 <hciCmdSend>
  }
}
    d1e2:	bf00      	nop
    d1e4:	b005      	add	sp, #20
    d1e6:	f85d fb04 	ldr.w	pc, [sp], #4

0000d1ea <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
    d1ea:	b500      	push	{lr}
    d1ec:	b085      	sub	sp, #20
    d1ee:	4603      	mov	r3, r0
    d1f0:	9100      	str	r1, [sp, #0]
    d1f2:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
    d1f6:	2112      	movs	r1, #18
    d1f8:	f242 001a 	movw	r0, #8218	; 0x201a
    d1fc:	f7ff fce4 	bl	cbc8 <hciCmdAlloc>
    d200:	9003      	str	r0, [sp, #12]
    d202:	9b03      	ldr	r3, [sp, #12]
    d204:	2b00      	cmp	r3, #0
    d206:	d01a      	beq.n	d23e <HciLeLtkReqReplCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d208:	9b03      	ldr	r3, [sp, #12]
    d20a:	3303      	adds	r3, #3
    d20c:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    d20e:	9b02      	ldr	r3, [sp, #8]
    d210:	1c5a      	adds	r2, r3, #1
    d212:	9202      	str	r2, [sp, #8]
    d214:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d218:	b2d2      	uxtb	r2, r2
    d21a:	701a      	strb	r2, [r3, #0]
    d21c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d220:	0a1b      	lsrs	r3, r3, #8
    d222:	b299      	uxth	r1, r3
    d224:	9b02      	ldr	r3, [sp, #8]
    d226:	1c5a      	adds	r2, r3, #1
    d228:	9202      	str	r2, [sp, #8]
    d22a:	b2ca      	uxtb	r2, r1
    d22c:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
    d22e:	2210      	movs	r2, #16
    d230:	9900      	ldr	r1, [sp, #0]
    d232:	9802      	ldr	r0, [sp, #8]
    d234:	f7fe ff64 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
    d238:	9803      	ldr	r0, [sp, #12]
    d23a:	f7ff fcf9 	bl	cc30 <hciCmdSend>
  }
}
    d23e:	bf00      	nop
    d240:	b005      	add	sp, #20
    d242:	f85d fb04 	ldr.w	pc, [sp], #4

0000d246 <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
    d246:	b500      	push	{lr}
    d248:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
    d24a:	2100      	movs	r1, #0
    d24c:	f242 0018 	movw	r0, #8216	; 0x2018
    d250:	f7ff fcba 	bl	cbc8 <hciCmdAlloc>
    d254:	9001      	str	r0, [sp, #4]
    d256:	9b01      	ldr	r3, [sp, #4]
    d258:	2b00      	cmp	r3, #0
    d25a:	d002      	beq.n	d262 <HciLeRandCmd+0x1c>
  {
    hciCmdSend(pBuf);
    d25c:	9801      	ldr	r0, [sp, #4]
    d25e:	f7ff fce7 	bl	cc30 <hciCmdSend>
  }
}
    d262:	bf00      	nop
    d264:	b003      	add	sp, #12
    d266:	f85d fb04 	ldr.w	pc, [sp], #4

0000d26a <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
    d26a:	b500      	push	{lr}
    d26c:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
    d26e:	2100      	movs	r1, #0
    d270:	f242 0002 	movw	r0, #8194	; 0x2002
    d274:	f7ff fca8 	bl	cbc8 <hciCmdAlloc>
    d278:	9001      	str	r0, [sp, #4]
    d27a:	9b01      	ldr	r3, [sp, #4]
    d27c:	2b00      	cmp	r3, #0
    d27e:	d002      	beq.n	d286 <HciLeReadBufSizeCmd+0x1c>
  {
    hciCmdSend(pBuf);
    d280:	9801      	ldr	r0, [sp, #4]
    d282:	f7ff fcd5 	bl	cc30 <hciCmdSend>
  }
}
    d286:	bf00      	nop
    d288:	b003      	add	sp, #12
    d28a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d28e <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
    d28e:	b500      	push	{lr}
    d290:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
    d292:	2100      	movs	r1, #0
    d294:	f242 0003 	movw	r0, #8195	; 0x2003
    d298:	f7ff fc96 	bl	cbc8 <hciCmdAlloc>
    d29c:	9001      	str	r0, [sp, #4]
    d29e:	9b01      	ldr	r3, [sp, #4]
    d2a0:	2b00      	cmp	r3, #0
    d2a2:	d002      	beq.n	d2aa <HciLeReadLocalSupFeatCmd+0x1c>
  {
    hciCmdSend(pBuf);
    d2a4:	9801      	ldr	r0, [sp, #4]
    d2a6:	f7ff fcc3 	bl	cc30 <hciCmdSend>
  }
}
    d2aa:	bf00      	nop
    d2ac:	b003      	add	sp, #12
    d2ae:	f85d fb04 	ldr.w	pc, [sp], #4

0000d2b2 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
    d2b2:	b500      	push	{lr}
    d2b4:	b085      	sub	sp, #20
    d2b6:	4603      	mov	r3, r0
    d2b8:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
    d2bc:	2102      	movs	r1, #2
    d2be:	f242 0016 	movw	r0, #8214	; 0x2016
    d2c2:	f7ff fc81 	bl	cbc8 <hciCmdAlloc>
    d2c6:	9003      	str	r0, [sp, #12]
    d2c8:	9b03      	ldr	r3, [sp, #12]
    d2ca:	2b00      	cmp	r3, #0
    d2cc:	d015      	beq.n	d2fa <HciLeReadRemoteFeatCmd+0x48>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d2ce:	9b03      	ldr	r3, [sp, #12]
    d2d0:	3303      	adds	r3, #3
    d2d2:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    d2d4:	9b02      	ldr	r3, [sp, #8]
    d2d6:	1c5a      	adds	r2, r3, #1
    d2d8:	9202      	str	r2, [sp, #8]
    d2da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d2de:	b2d2      	uxtb	r2, r2
    d2e0:	701a      	strb	r2, [r3, #0]
    d2e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d2e6:	0a1b      	lsrs	r3, r3, #8
    d2e8:	b299      	uxth	r1, r3
    d2ea:	9b02      	ldr	r3, [sp, #8]
    d2ec:	1c5a      	adds	r2, r3, #1
    d2ee:	9202      	str	r2, [sp, #8]
    d2f0:	b2ca      	uxtb	r2, r1
    d2f2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d2f4:	9803      	ldr	r0, [sp, #12]
    d2f6:	f7ff fc9b 	bl	cc30 <hciCmdSend>
  }
}
    d2fa:	bf00      	nop
    d2fc:	b005      	add	sp, #20
    d2fe:	f85d fb04 	ldr.w	pc, [sp], #4

0000d302 <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
    d302:	b500      	push	{lr}
    d304:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
    d306:	2100      	movs	r1, #0
    d308:	f242 001c 	movw	r0, #8220	; 0x201c
    d30c:	f7ff fc5c 	bl	cbc8 <hciCmdAlloc>
    d310:	9001      	str	r0, [sp, #4]
    d312:	9b01      	ldr	r3, [sp, #4]
    d314:	2b00      	cmp	r3, #0
    d316:	d002      	beq.n	d31e <HciLeReadSupStatesCmd+0x1c>
  {
    hciCmdSend(pBuf);
    d318:	9801      	ldr	r0, [sp, #4]
    d31a:	f7ff fc89 	bl	cc30 <hciCmdSend>
  }
}
    d31e:	bf00      	nop
    d320:	b003      	add	sp, #12
    d322:	f85d fb04 	ldr.w	pc, [sp], #4

0000d326 <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
    d326:	b500      	push	{lr}
    d328:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
    d32a:	2100      	movs	r1, #0
    d32c:	f242 000f 	movw	r0, #8207	; 0x200f
    d330:	f7ff fc4a 	bl	cbc8 <hciCmdAlloc>
    d334:	9001      	str	r0, [sp, #4]
    d336:	9b01      	ldr	r3, [sp, #4]
    d338:	2b00      	cmp	r3, #0
    d33a:	d002      	beq.n	d342 <HciLeReadWhiteListSizeCmd+0x1c>
  {
    hciCmdSend(pBuf);
    d33c:	9801      	ldr	r0, [sp, #4]
    d33e:	f7ff fc77 	bl	cc30 <hciCmdSend>
  }
}
    d342:	bf00      	nop
    d344:	b003      	add	sp, #12
    d346:	f85d fb04 	ldr.w	pc, [sp], #4

0000d34a <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
    d34a:	b500      	push	{lr}
    d34c:	b085      	sub	sp, #20
    d34e:	4603      	mov	r3, r0
    d350:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
    d354:	2101      	movs	r1, #1
    d356:	f242 000a 	movw	r0, #8202	; 0x200a
    d35a:	f7ff fc35 	bl	cbc8 <hciCmdAlloc>
    d35e:	9003      	str	r0, [sp, #12]
    d360:	9b03      	ldr	r3, [sp, #12]
    d362:	2b00      	cmp	r3, #0
    d364:	d00b      	beq.n	d37e <HciLeSetAdvEnableCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d366:	9b03      	ldr	r3, [sp, #12]
    d368:	3303      	adds	r3, #3
    d36a:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, enable);
    d36c:	9b02      	ldr	r3, [sp, #8]
    d36e:	1c5a      	adds	r2, r3, #1
    d370:	9202      	str	r2, [sp, #8]
    d372:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d376:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d378:	9803      	ldr	r0, [sp, #12]
    d37a:	f7ff fc59 	bl	cc30 <hciCmdSend>
  }
}
    d37e:	bf00      	nop
    d380:	b005      	add	sp, #20
    d382:	f85d fb04 	ldr.w	pc, [sp], #4

0000d386 <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
    d386:	b500      	push	{lr}
    d388:	b085      	sub	sp, #20
    d38a:	4603      	mov	r3, r0
    d38c:	9100      	str	r1, [sp, #0]
    d38e:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
    d392:	2120      	movs	r1, #32
    d394:	f242 0008 	movw	r0, #8200	; 0x2008
    d398:	f7ff fc16 	bl	cbc8 <hciCmdAlloc>
    d39c:	9003      	str	r0, [sp, #12]
    d39e:	9b03      	ldr	r3, [sp, #12]
    d3a0:	2b00      	cmp	r3, #0
    d3a2:	d020      	beq.n	d3e6 <HciLeSetAdvDataCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d3a4:	9b03      	ldr	r3, [sp, #12]
    d3a6:	3303      	adds	r3, #3
    d3a8:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, len);
    d3aa:	9b02      	ldr	r3, [sp, #8]
    d3ac:	1c5a      	adds	r2, r3, #1
    d3ae:	9202      	str	r2, [sp, #8]
    d3b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d3b4:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
    d3b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3ba:	461a      	mov	r2, r3
    d3bc:	9900      	ldr	r1, [sp, #0]
    d3be:	9802      	ldr	r0, [sp, #8]
    d3c0:	f7fe fe9e 	bl	c100 <memcpy>
    p += len;
    d3c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3c8:	9a02      	ldr	r2, [sp, #8]
    d3ca:	4413      	add	r3, r2
    d3cc:	9302      	str	r3, [sp, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
    d3ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d3d2:	f1c3 031f 	rsb	r3, r3, #31
    d3d6:	461a      	mov	r2, r3
    d3d8:	2100      	movs	r1, #0
    d3da:	9802      	ldr	r0, [sp, #8]
    d3dc:	f018 f96e 	bl	256bc <memset>
    hciCmdSend(pBuf);
    d3e0:	9803      	ldr	r0, [sp, #12]
    d3e2:	f7ff fc25 	bl	cc30 <hciCmdSend>
  }
}
    d3e6:	bf00      	nop
    d3e8:	b005      	add	sp, #20
    d3ea:	f85d fb04 	ldr.w	pc, [sp], #4

0000d3ee <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
    d3ee:	b510      	push	{r4, lr}
    d3f0:	b084      	sub	sp, #16
    d3f2:	4604      	mov	r4, r0
    d3f4:	4608      	mov	r0, r1
    d3f6:	4611      	mov	r1, r2
    d3f8:	461a      	mov	r2, r3
    d3fa:	4623      	mov	r3, r4
    d3fc:	f8ad 3006 	strh.w	r3, [sp, #6]
    d400:	4603      	mov	r3, r0
    d402:	f8ad 3004 	strh.w	r3, [sp, #4]
    d406:	460b      	mov	r3, r1
    d408:	f88d 3003 	strb.w	r3, [sp, #3]
    d40c:	4613      	mov	r3, r2
    d40e:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
    d412:	210f      	movs	r1, #15
    d414:	f242 0006 	movw	r0, #8198	; 0x2006
    d418:	f7ff fbd6 	bl	cbc8 <hciCmdAlloc>
    d41c:	9002      	str	r0, [sp, #8]
    d41e:	9b02      	ldr	r3, [sp, #8]
    d420:	2b00      	cmp	r3, #0
    d422:	d052      	beq.n	d4ca <HciLeSetAdvParamCmd+0xdc>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d424:	9b02      	ldr	r3, [sp, #8]
    d426:	3303      	adds	r3, #3
    d428:	9303      	str	r3, [sp, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
    d42a:	9b03      	ldr	r3, [sp, #12]
    d42c:	1c5a      	adds	r2, r3, #1
    d42e:	9203      	str	r2, [sp, #12]
    d430:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d434:	b2d2      	uxtb	r2, r2
    d436:	701a      	strb	r2, [r3, #0]
    d438:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d43c:	0a1b      	lsrs	r3, r3, #8
    d43e:	b299      	uxth	r1, r3
    d440:	9b03      	ldr	r3, [sp, #12]
    d442:	1c5a      	adds	r2, r3, #1
    d444:	9203      	str	r2, [sp, #12]
    d446:	b2ca      	uxtb	r2, r1
    d448:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
    d44a:	9b03      	ldr	r3, [sp, #12]
    d44c:	1c5a      	adds	r2, r3, #1
    d44e:	9203      	str	r2, [sp, #12]
    d450:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d454:	b2d2      	uxtb	r2, r2
    d456:	701a      	strb	r2, [r3, #0]
    d458:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d45c:	0a1b      	lsrs	r3, r3, #8
    d45e:	b299      	uxth	r1, r3
    d460:	9b03      	ldr	r3, [sp, #12]
    d462:	1c5a      	adds	r2, r3, #1
    d464:	9203      	str	r2, [sp, #12]
    d466:	b2ca      	uxtb	r2, r1
    d468:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
    d46a:	9b03      	ldr	r3, [sp, #12]
    d46c:	1c5a      	adds	r2, r3, #1
    d46e:	9203      	str	r2, [sp, #12]
    d470:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d474:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
    d476:	9b03      	ldr	r3, [sp, #12]
    d478:	1c5a      	adds	r2, r3, #1
    d47a:	9203      	str	r2, [sp, #12]
    d47c:	f89d 2002 	ldrb.w	r2, [sp, #2]
    d480:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
    d482:	9b03      	ldr	r3, [sp, #12]
    d484:	1c5a      	adds	r2, r3, #1
    d486:	9203      	str	r2, [sp, #12]
    d488:	f89d 2018 	ldrb.w	r2, [sp, #24]
    d48c:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
    d48e:	9b07      	ldr	r3, [sp, #28]
    d490:	2b00      	cmp	r3, #0
    d492:	d007      	beq.n	d4a4 <HciLeSetAdvParamCmd+0xb6>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
    d494:	9907      	ldr	r1, [sp, #28]
    d496:	9803      	ldr	r0, [sp, #12]
    d498:	f7fe fecc 	bl	c234 <BdaCpy>
    d49c:	9b03      	ldr	r3, [sp, #12]
    d49e:	3306      	adds	r3, #6
    d4a0:	9303      	str	r3, [sp, #12]
    d4a2:	e003      	b.n	d4ac <HciLeSetAdvParamCmd+0xbe>
    }
    else
    {
      p = BdaClr(p);
    d4a4:	9803      	ldr	r0, [sp, #12]
    d4a6:	f7fe fee5 	bl	c274 <BdaClr>
    d4aa:	9003      	str	r0, [sp, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
    d4ac:	9b03      	ldr	r3, [sp, #12]
    d4ae:	1c5a      	adds	r2, r3, #1
    d4b0:	9203      	str	r2, [sp, #12]
    d4b2:	f89d 2020 	ldrb.w	r2, [sp, #32]
    d4b6:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
    d4b8:	9b03      	ldr	r3, [sp, #12]
    d4ba:	1c5a      	adds	r2, r3, #1
    d4bc:	9203      	str	r2, [sp, #12]
    d4be:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    d4c2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d4c4:	9802      	ldr	r0, [sp, #8]
    d4c6:	f7ff fbb3 	bl	cc30 <hciCmdSend>
  }
}
    d4ca:	bf00      	nop
    d4cc:	b004      	add	sp, #16
    d4ce:	bd10      	pop	{r4, pc}

0000d4d0 <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
    d4d0:	b500      	push	{lr}
    d4d2:	b085      	sub	sp, #20
    d4d4:	9001      	str	r0, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
    d4d6:	2108      	movs	r1, #8
    d4d8:	f242 0001 	movw	r0, #8193	; 0x2001
    d4dc:	f7ff fb74 	bl	cbc8 <hciCmdAlloc>
    d4e0:	9003      	str	r0, [sp, #12]
    d4e2:	9b03      	ldr	r3, [sp, #12]
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	d00a      	beq.n	d4fe <HciLeSetEventMaskCmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d4e8:	9b03      	ldr	r3, [sp, #12]
    d4ea:	3303      	adds	r3, #3
    d4ec:	9302      	str	r3, [sp, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
    d4ee:	2208      	movs	r2, #8
    d4f0:	9901      	ldr	r1, [sp, #4]
    d4f2:	9802      	ldr	r0, [sp, #8]
    d4f4:	f7fe fe04 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
    d4f8:	9803      	ldr	r0, [sp, #12]
    d4fa:	f7ff fb99 	bl	cc30 <hciCmdSend>
  }
}
    d4fe:	bf00      	nop
    d500:	b005      	add	sp, #20
    d502:	f85d fb04 	ldr.w	pc, [sp], #4

0000d506 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
    d506:	b500      	push	{lr}
    d508:	b085      	sub	sp, #20
    d50a:	4603      	mov	r3, r0
    d50c:	9100      	str	r1, [sp, #0]
    d50e:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
    d512:	2120      	movs	r1, #32
    d514:	f242 0009 	movw	r0, #8201	; 0x2009
    d518:	f7ff fb56 	bl	cbc8 <hciCmdAlloc>
    d51c:	9003      	str	r0, [sp, #12]
    d51e:	9b03      	ldr	r3, [sp, #12]
    d520:	2b00      	cmp	r3, #0
    d522:	d020      	beq.n	d566 <HciLeSetScanRespDataCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d524:	9b03      	ldr	r3, [sp, #12]
    d526:	3303      	adds	r3, #3
    d528:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, len);
    d52a:	9b02      	ldr	r3, [sp, #8]
    d52c:	1c5a      	adds	r2, r3, #1
    d52e:	9202      	str	r2, [sp, #8]
    d530:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d534:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
    d536:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d53a:	461a      	mov	r2, r3
    d53c:	9900      	ldr	r1, [sp, #0]
    d53e:	9802      	ldr	r0, [sp, #8]
    d540:	f7fe fdde 	bl	c100 <memcpy>
    p += len;
    d544:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d548:	9a02      	ldr	r2, [sp, #8]
    d54a:	4413      	add	r3, r2
    d54c:	9302      	str	r3, [sp, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
    d54e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d552:	f1c3 031f 	rsb	r3, r3, #31
    d556:	461a      	mov	r2, r3
    d558:	2100      	movs	r1, #0
    d55a:	9802      	ldr	r0, [sp, #8]
    d55c:	f018 f8ae 	bl	256bc <memset>
    hciCmdSend(pBuf);
    d560:	9803      	ldr	r0, [sp, #12]
    d562:	f7ff fb65 	bl	cc30 <hciCmdSend>
  }
}
    d566:	bf00      	nop
    d568:	b005      	add	sp, #20
    d56a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d56e <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
    d56e:	b500      	push	{lr}
    d570:	b087      	sub	sp, #28
    d572:	9102      	str	r1, [sp, #8]
    d574:	9301      	str	r3, [sp, #4]
    d576:	4603      	mov	r3, r0
    d578:	f8ad 300e 	strh.w	r3, [sp, #14]
    d57c:	4613      	mov	r3, r2
    d57e:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
    d582:	211c      	movs	r1, #28
    d584:	f242 0019 	movw	r0, #8217	; 0x2019
    d588:	f7ff fb1e 	bl	cbc8 <hciCmdAlloc>
    d58c:	9005      	str	r0, [sp, #20]
    d58e:	9b05      	ldr	r3, [sp, #20]
    d590:	2b00      	cmp	r3, #0
    d592:	d032      	beq.n	d5fa <HciLeStartEncryptionCmd+0x8c>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d594:	9b05      	ldr	r3, [sp, #20]
    d596:	3303      	adds	r3, #3
    d598:	9304      	str	r3, [sp, #16]
    UINT16_TO_BSTREAM(p, handle);
    d59a:	9b04      	ldr	r3, [sp, #16]
    d59c:	1c5a      	adds	r2, r3, #1
    d59e:	9204      	str	r2, [sp, #16]
    d5a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    d5a4:	b2d2      	uxtb	r2, r2
    d5a6:	701a      	strb	r2, [r3, #0]
    d5a8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    d5ac:	0a1b      	lsrs	r3, r3, #8
    d5ae:	b299      	uxth	r1, r3
    d5b0:	9b04      	ldr	r3, [sp, #16]
    d5b2:	1c5a      	adds	r2, r3, #1
    d5b4:	9204      	str	r2, [sp, #16]
    d5b6:	b2ca      	uxtb	r2, r1
    d5b8:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
    d5ba:	2208      	movs	r2, #8
    d5bc:	9902      	ldr	r1, [sp, #8]
    d5be:	9804      	ldr	r0, [sp, #16]
    d5c0:	f7fe fd9e 	bl	c100 <memcpy>
    p += HCI_RAND_LEN;
    d5c4:	9b04      	ldr	r3, [sp, #16]
    d5c6:	3308      	adds	r3, #8
    d5c8:	9304      	str	r3, [sp, #16]
    UINT16_TO_BSTREAM(p, diversifier);
    d5ca:	9b04      	ldr	r3, [sp, #16]
    d5cc:	1c5a      	adds	r2, r3, #1
    d5ce:	9204      	str	r2, [sp, #16]
    d5d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    d5d4:	b2d2      	uxtb	r2, r2
    d5d6:	701a      	strb	r2, [r3, #0]
    d5d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    d5dc:	0a1b      	lsrs	r3, r3, #8
    d5de:	b299      	uxth	r1, r3
    d5e0:	9b04      	ldr	r3, [sp, #16]
    d5e2:	1c5a      	adds	r2, r3, #1
    d5e4:	9204      	str	r2, [sp, #16]
    d5e6:	b2ca      	uxtb	r2, r1
    d5e8:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
    d5ea:	2210      	movs	r2, #16
    d5ec:	9901      	ldr	r1, [sp, #4]
    d5ee:	9804      	ldr	r0, [sp, #16]
    d5f0:	f7fe fd86 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
    d5f4:	9805      	ldr	r0, [sp, #20]
    d5f6:	f7ff fb1b 	bl	cc30 <hciCmdSend>
  }
}
    d5fa:	bf00      	nop
    d5fc:	b007      	add	sp, #28
    d5fe:	f85d fb04 	ldr.w	pc, [sp], #4

0000d602 <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
    d602:	b500      	push	{lr}
    d604:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
    d606:	2100      	movs	r1, #0
    d608:	f241 0009 	movw	r0, #4105	; 0x1009
    d60c:	f7ff fadc 	bl	cbc8 <hciCmdAlloc>
    d610:	9001      	str	r0, [sp, #4]
    d612:	9b01      	ldr	r3, [sp, #4]
    d614:	2b00      	cmp	r3, #0
    d616:	d002      	beq.n	d61e <HciReadBdAddrCmd+0x1c>
  {
    hciCmdSend(pBuf);
    d618:	9801      	ldr	r0, [sp, #4]
    d61a:	f7ff fb09 	bl	cc30 <hciCmdSend>
  }
}
    d61e:	bf00      	nop
    d620:	b003      	add	sp, #12
    d622:	f85d fb04 	ldr.w	pc, [sp], #4

0000d626 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
    d626:	b500      	push	{lr}
    d628:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
    d62a:	2100      	movs	r1, #0
    d62c:	f241 0001 	movw	r0, #4097	; 0x1001
    d630:	f7ff faca 	bl	cbc8 <hciCmdAlloc>
    d634:	9001      	str	r0, [sp, #4]
    d636:	9b01      	ldr	r3, [sp, #4]
    d638:	2b00      	cmp	r3, #0
    d63a:	d002      	beq.n	d642 <HciReadLocalVerInfoCmd+0x1c>
  {
    hciCmdSend(pBuf);
    d63c:	9801      	ldr	r0, [sp, #4]
    d63e:	f7ff faf7 	bl	cc30 <hciCmdSend>
  }
}
    d642:	bf00      	nop
    d644:	b003      	add	sp, #12
    d646:	f85d fb04 	ldr.w	pc, [sp], #4

0000d64a <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
    d64a:	b500      	push	{lr}
    d64c:	b085      	sub	sp, #20
    d64e:	4603      	mov	r3, r0
    d650:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
    d654:	2102      	movs	r1, #2
    d656:	f241 4005 	movw	r0, #5125	; 0x1405
    d65a:	f7ff fab5 	bl	cbc8 <hciCmdAlloc>
    d65e:	9003      	str	r0, [sp, #12]
    d660:	9b03      	ldr	r3, [sp, #12]
    d662:	2b00      	cmp	r3, #0
    d664:	d015      	beq.n	d692 <HciReadRssiCmd+0x48>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d666:	9b03      	ldr	r3, [sp, #12]
    d668:	3303      	adds	r3, #3
    d66a:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    d66c:	9b02      	ldr	r3, [sp, #8]
    d66e:	1c5a      	adds	r2, r3, #1
    d670:	9202      	str	r2, [sp, #8]
    d672:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d676:	b2d2      	uxtb	r2, r2
    d678:	701a      	strb	r2, [r3, #0]
    d67a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d67e:	0a1b      	lsrs	r3, r3, #8
    d680:	b299      	uxth	r1, r3
    d682:	9b02      	ldr	r3, [sp, #8]
    d684:	1c5a      	adds	r2, r3, #1
    d686:	9202      	str	r2, [sp, #8]
    d688:	b2ca      	uxtb	r2, r1
    d68a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d68c:	9803      	ldr	r0, [sp, #12]
    d68e:	f7ff facf 	bl	cc30 <hciCmdSend>
  }
}
    d692:	bf00      	nop
    d694:	b005      	add	sp, #20
    d696:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000d69c <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
    d69c:	b500      	push	{lr}
    d69e:	b085      	sub	sp, #20
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
    d6a0:	2314      	movs	r3, #20
    d6a2:	f88d 3006 	strb.w	r3, [sp, #6]

  hciCb.secCback((hciEvt_t *)&evt);
    d6a6:	4b13      	ldr	r3, [pc, #76]	; (d6f4 <HciResetCmd+0x58>)
    d6a8:	68db      	ldr	r3, [r3, #12]
    d6aa:	aa01      	add	r2, sp, #4
    d6ac:	4610      	mov	r0, r2
    d6ae:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d6b0:	e002      	b.n	d6b8 <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
    d6b2:	9803      	ldr	r0, [sp, #12]
    d6b4:	f012 f936 	bl	1f924 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
    d6b8:	f10d 030b 	add.w	r3, sp, #11
    d6bc:	4619      	mov	r1, r3
    d6be:	480e      	ldr	r0, [pc, #56]	; (d6f8 <HciResetCmd+0x5c>)
    d6c0:	f012 f96d 	bl	1f99e <WsfMsgDeq>
    d6c4:	9003      	str	r0, [sp, #12]
    d6c6:	9b03      	ldr	r3, [sp, #12]
    d6c8:	2b00      	cmp	r3, #0
    d6ca:	d1f2      	bne.n	d6b2 <HciResetCmd+0x16>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
    d6cc:	4b0b      	ldr	r3, [pc, #44]	; (d6fc <HciResetCmd+0x60>)
    d6ce:	2201      	movs	r2, #1
    d6d0:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
    d6d2:	2100      	movs	r1, #0
    d6d4:	f640 4003 	movw	r0, #3075	; 0xc03
    d6d8:	f7ff fa76 	bl	cbc8 <hciCmdAlloc>
    d6dc:	9003      	str	r0, [sp, #12]
    d6de:	9b03      	ldr	r3, [sp, #12]
    d6e0:	2b00      	cmp	r3, #0
    d6e2:	d002      	beq.n	d6ea <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
    d6e4:	9803      	ldr	r0, [sp, #12]
    d6e6:	f7ff faa3 	bl	cc30 <hciCmdSend>
  }
}
    d6ea:	bf00      	nop
    d6ec:	b005      	add	sp, #20
    d6ee:	f85d fb04 	ldr.w	pc, [sp], #4
    d6f2:	bf00      	nop
    d6f4:	10004230 	.word	0x10004230
    d6f8:	10004164 	.word	0x10004164
    d6fc:	10004154 	.word	0x10004154

0000d700 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
    d700:	b500      	push	{lr}
    d702:	b085      	sub	sp, #20
    d704:	9001      	str	r0, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
    d706:	2108      	movs	r1, #8
    d708:	f640 4001 	movw	r0, #3073	; 0xc01
    d70c:	f7ff fa5c 	bl	cbc8 <hciCmdAlloc>
    d710:	9003      	str	r0, [sp, #12]
    d712:	9b03      	ldr	r3, [sp, #12]
    d714:	2b00      	cmp	r3, #0
    d716:	d00a      	beq.n	d72e <HciSetEventMaskCmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d718:	9b03      	ldr	r3, [sp, #12]
    d71a:	3303      	adds	r3, #3
    d71c:	9302      	str	r3, [sp, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
    d71e:	2208      	movs	r2, #8
    d720:	9901      	ldr	r1, [sp, #4]
    d722:	9802      	ldr	r0, [sp, #8]
    d724:	f7fe fcec 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
    d728:	9803      	ldr	r0, [sp, #12]
    d72a:	f7ff fa81 	bl	cc30 <hciCmdSend>
  }
}
    d72e:	bf00      	nop
    d730:	b005      	add	sp, #20
    d732:	f85d fb04 	ldr.w	pc, [sp], #4

0000d736 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
    d736:	b500      	push	{lr}
    d738:	b085      	sub	sp, #20
    d73a:	9001      	str	r0, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
    d73c:	2108      	movs	r1, #8
    d73e:	f640 4063 	movw	r0, #3171	; 0xc63
    d742:	f7ff fa41 	bl	cbc8 <hciCmdAlloc>
    d746:	9003      	str	r0, [sp, #12]
    d748:	9b03      	ldr	r3, [sp, #12]
    d74a:	2b00      	cmp	r3, #0
    d74c:	d00a      	beq.n	d764 <HciSetEventMaskPage2Cmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d74e:	9b03      	ldr	r3, [sp, #12]
    d750:	3303      	adds	r3, #3
    d752:	9302      	str	r3, [sp, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
    d754:	2208      	movs	r2, #8
    d756:	9901      	ldr	r1, [sp, #4]
    d758:	9802      	ldr	r0, [sp, #8]
    d75a:	f7fe fcd1 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
    d75e:	9803      	ldr	r0, [sp, #12]
    d760:	f7ff fa66 	bl	cc30 <hciCmdSend>
  }
}
    d764:	bf00      	nop
    d766:	b005      	add	sp, #20
    d768:	f85d fb04 	ldr.w	pc, [sp], #4

0000d76c <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
    d76c:	b500      	push	{lr}
    d76e:	b085      	sub	sp, #20
    d770:	4603      	mov	r3, r0
    d772:	460a      	mov	r2, r1
    d774:	f8ad 3006 	strh.w	r3, [sp, #6]
    d778:	4613      	mov	r3, r2
    d77a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
    d77e:	2104      	movs	r1, #4
    d780:	f640 407c 	movw	r0, #3196	; 0xc7c
    d784:	f7ff fa20 	bl	cbc8 <hciCmdAlloc>
    d788:	9003      	str	r0, [sp, #12]
    d78a:	9b03      	ldr	r3, [sp, #12]
    d78c:	2b00      	cmp	r3, #0
    d78e:	d025      	beq.n	d7dc <HciWriteAuthPayloadTimeout+0x70>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d790:	9b03      	ldr	r3, [sp, #12]
    d792:	3303      	adds	r3, #3
    d794:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, handle);
    d796:	9b02      	ldr	r3, [sp, #8]
    d798:	1c5a      	adds	r2, r3, #1
    d79a:	9202      	str	r2, [sp, #8]
    d79c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d7a0:	b2d2      	uxtb	r2, r2
    d7a2:	701a      	strb	r2, [r3, #0]
    d7a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d7a8:	0a1b      	lsrs	r3, r3, #8
    d7aa:	b299      	uxth	r1, r3
    d7ac:	9b02      	ldr	r3, [sp, #8]
    d7ae:	1c5a      	adds	r2, r3, #1
    d7b0:	9202      	str	r2, [sp, #8]
    d7b2:	b2ca      	uxtb	r2, r1
    d7b4:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
    d7b6:	9b02      	ldr	r3, [sp, #8]
    d7b8:	1c5a      	adds	r2, r3, #1
    d7ba:	9202      	str	r2, [sp, #8]
    d7bc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d7c0:	b2d2      	uxtb	r2, r2
    d7c2:	701a      	strb	r2, [r3, #0]
    d7c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    d7c8:	0a1b      	lsrs	r3, r3, #8
    d7ca:	b299      	uxth	r1, r3
    d7cc:	9b02      	ldr	r3, [sp, #8]
    d7ce:	1c5a      	adds	r2, r3, #1
    d7d0:	9202      	str	r2, [sp, #8]
    d7d2:	b2ca      	uxtb	r2, r1
    d7d4:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d7d6:	9803      	ldr	r0, [sp, #12]
    d7d8:	f7ff fa2a 	bl	cc30 <hciCmdSend>
  }
}
    d7dc:	bf00      	nop
    d7de:	b005      	add	sp, #20
    d7e0:	f85d fb04 	ldr.w	pc, [sp], #4

0000d7e4 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
    d7e4:	b500      	push	{lr}
    d7e6:	b087      	sub	sp, #28
    d7e8:	9102      	str	r1, [sp, #8]
    d7ea:	9201      	str	r2, [sp, #4]
    d7ec:	9300      	str	r3, [sp, #0]
    d7ee:	4603      	mov	r3, r0
    d7f0:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
    d7f4:	2127      	movs	r1, #39	; 0x27
    d7f6:	f242 0027 	movw	r0, #8231	; 0x2027
    d7fa:	f7ff f9e5 	bl	cbc8 <hciCmdAlloc>
    d7fe:	9005      	str	r0, [sp, #20]
    d800:	9b05      	ldr	r3, [sp, #20]
    d802:	2b00      	cmp	r3, #0
    d804:	d01f      	beq.n	d846 <HciLeAddDeviceToResolvingListCmd+0x62>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d806:	9b05      	ldr	r3, [sp, #20]
    d808:	3303      	adds	r3, #3
    d80a:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
    d80c:	9b04      	ldr	r3, [sp, #16]
    d80e:	1c5a      	adds	r2, r3, #1
    d810:	9204      	str	r2, [sp, #16]
    d812:	f89d 200f 	ldrb.w	r2, [sp, #15]
    d816:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    d818:	9902      	ldr	r1, [sp, #8]
    d81a:	9804      	ldr	r0, [sp, #16]
    d81c:	f7fe fd0a 	bl	c234 <BdaCpy>
    d820:	9b04      	ldr	r3, [sp, #16]
    d822:	3306      	adds	r3, #6
    d824:	9304      	str	r3, [sp, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
    d826:	2210      	movs	r2, #16
    d828:	9901      	ldr	r1, [sp, #4]
    d82a:	9804      	ldr	r0, [sp, #16]
    d82c:	f7fe fc68 	bl	c100 <memcpy>
    p += HCI_KEY_LEN;
    d830:	9b04      	ldr	r3, [sp, #16]
    d832:	3310      	adds	r3, #16
    d834:	9304      	str	r3, [sp, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
    d836:	2210      	movs	r2, #16
    d838:	9900      	ldr	r1, [sp, #0]
    d83a:	9804      	ldr	r0, [sp, #16]
    d83c:	f7fe fc60 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
    d840:	9805      	ldr	r0, [sp, #20]
    d842:	f7ff f9f5 	bl	cc30 <hciCmdSend>
  }
}
    d846:	bf00      	nop
    d848:	b007      	add	sp, #28
    d84a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d84e <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
    d84e:	b500      	push	{lr}
    d850:	b085      	sub	sp, #20
    d852:	4603      	mov	r3, r0
    d854:	9100      	str	r1, [sp, #0]
    d856:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
    d85a:	2107      	movs	r1, #7
    d85c:	f242 0028 	movw	r0, #8232	; 0x2028
    d860:	f7ff f9b2 	bl	cbc8 <hciCmdAlloc>
    d864:	9003      	str	r0, [sp, #12]
    d866:	9b03      	ldr	r3, [sp, #12]
    d868:	2b00      	cmp	r3, #0
    d86a:	d012      	beq.n	d892 <HciLeRemoveDeviceFromResolvingList+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d86c:	9b03      	ldr	r3, [sp, #12]
    d86e:	3303      	adds	r3, #3
    d870:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
    d872:	9b02      	ldr	r3, [sp, #8]
    d874:	1c5a      	adds	r2, r3, #1
    d876:	9202      	str	r2, [sp, #8]
    d878:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d87c:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
    d87e:	9900      	ldr	r1, [sp, #0]
    d880:	9802      	ldr	r0, [sp, #8]
    d882:	f7fe fcd7 	bl	c234 <BdaCpy>
    d886:	9b02      	ldr	r3, [sp, #8]
    d888:	3306      	adds	r3, #6
    d88a:	9302      	str	r3, [sp, #8]
    hciCmdSend(pBuf);
    d88c:	9803      	ldr	r0, [sp, #12]
    d88e:	f7ff f9cf 	bl	cc30 <hciCmdSend>
  }
}
    d892:	bf00      	nop
    d894:	b005      	add	sp, #20
    d896:	f85d fb04 	ldr.w	pc, [sp], #4

0000d89a <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
    d89a:	b500      	push	{lr}
    d89c:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
    d89e:	2100      	movs	r1, #0
    d8a0:	f242 0029 	movw	r0, #8233	; 0x2029
    d8a4:	f7ff f990 	bl	cbc8 <hciCmdAlloc>
    d8a8:	9001      	str	r0, [sp, #4]
    d8aa:	9b01      	ldr	r3, [sp, #4]
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	d002      	beq.n	d8b6 <HciLeClearResolvingList+0x1c>
  {
    hciCmdSend(pBuf);
    d8b0:	9801      	ldr	r0, [sp, #4]
    d8b2:	f7ff f9bd 	bl	cc30 <hciCmdSend>
  }
}
    d8b6:	bf00      	nop
    d8b8:	b003      	add	sp, #12
    d8ba:	f85d fb04 	ldr.w	pc, [sp], #4

0000d8be <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
    d8be:	b500      	push	{lr}
    d8c0:	b083      	sub	sp, #12
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
    d8c2:	2100      	movs	r1, #0
    d8c4:	f242 002a 	movw	r0, #8234	; 0x202a
    d8c8:	f7ff f97e 	bl	cbc8 <hciCmdAlloc>
    d8cc:	9001      	str	r0, [sp, #4]
    d8ce:	9b01      	ldr	r3, [sp, #4]
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d002      	beq.n	d8da <HciLeReadResolvingListSize+0x1c>
  {
    hciCmdSend(pBuf);
    d8d4:	9801      	ldr	r0, [sp, #4]
    d8d6:	f7ff f9ab 	bl	cc30 <hciCmdSend>
  }
}
    d8da:	bf00      	nop
    d8dc:	b003      	add	sp, #12
    d8de:	f85d fb04 	ldr.w	pc, [sp], #4

0000d8e2 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
    d8e2:	b500      	push	{lr}
    d8e4:	b085      	sub	sp, #20
    d8e6:	4603      	mov	r3, r0
    d8e8:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
    d8ec:	2101      	movs	r1, #1
    d8ee:	f242 002d 	movw	r0, #8237	; 0x202d
    d8f2:	f7ff f969 	bl	cbc8 <hciCmdAlloc>
    d8f6:	9003      	str	r0, [sp, #12]
    d8f8:	9b03      	ldr	r3, [sp, #12]
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	d00b      	beq.n	d916 <HciLeSetAddrResolutionEnable+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d8fe:	9b03      	ldr	r3, [sp, #12]
    d900:	3303      	adds	r3, #3
    d902:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, enable);
    d904:	9b02      	ldr	r3, [sp, #8]
    d906:	1c5a      	adds	r2, r3, #1
    d908:	9202      	str	r2, [sp, #8]
    d90a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d90e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d910:	9803      	ldr	r0, [sp, #12]
    d912:	f7ff f98d 	bl	cc30 <hciCmdSend>
  }
}
    d916:	bf00      	nop
    d918:	b005      	add	sp, #20
    d91a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d91e <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
    d91e:	b500      	push	{lr}
    d920:	b085      	sub	sp, #20
    d922:	4603      	mov	r3, r0
    d924:	9100      	str	r1, [sp, #0]
    d926:	f88d 3007 	strb.w	r3, [sp, #7]
    d92a:	4613      	mov	r3, r2
    d92c:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
    d930:	2108      	movs	r1, #8
    d932:	f242 004e 	movw	r0, #8270	; 0x204e
    d936:	f7ff f947 	bl	cbc8 <hciCmdAlloc>
    d93a:	9003      	str	r0, [sp, #12]
    d93c:	9b03      	ldr	r3, [sp, #12]
    d93e:	2b00      	cmp	r3, #0
    d940:	d018      	beq.n	d974 <HciLeSetPrivacyModeCmd+0x56>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d942:	9b03      	ldr	r3, [sp, #12]
    d944:	3303      	adds	r3, #3
    d946:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, addrType);
    d948:	9b02      	ldr	r3, [sp, #8]
    d94a:	1c5a      	adds	r2, r3, #1
    d94c:	9202      	str	r2, [sp, #8]
    d94e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d952:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
    d954:	9900      	ldr	r1, [sp, #0]
    d956:	9802      	ldr	r0, [sp, #8]
    d958:	f7fe fc6c 	bl	c234 <BdaCpy>
    d95c:	9b02      	ldr	r3, [sp, #8]
    d95e:	3306      	adds	r3, #6
    d960:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, mode);
    d962:	9b02      	ldr	r3, [sp, #8]
    d964:	1c5a      	adds	r2, r3, #1
    d966:	9202      	str	r2, [sp, #8]
    d968:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d96c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
    d96e:	9803      	ldr	r0, [sp, #12]
    d970:	f7ff f95e 	bl	cc30 <hciCmdSend>
  }
}
    d974:	bf00      	nop
    d976:	b005      	add	sp, #20
    d978:	f85d fb04 	ldr.w	pc, [sp], #4

0000d97c <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
    d97c:	b500      	push	{lr}
    d97e:	b085      	sub	sp, #20
    d980:	4603      	mov	r3, r0
    d982:	9200      	str	r2, [sp, #0]
    d984:	f8ad 3006 	strh.w	r3, [sp, #6]
    d988:	460b      	mov	r3, r1
    d98a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
    d98e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    d992:	b29a      	uxth	r2, r3
    d994:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d998:	4611      	mov	r1, r2
    d99a:	4618      	mov	r0, r3
    d99c:	f7ff f914 	bl	cbc8 <hciCmdAlloc>
    d9a0:	9003      	str	r0, [sp, #12]
    d9a2:	9b03      	ldr	r3, [sp, #12]
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d00c      	beq.n	d9c2 <HciVendorSpecificCmd+0x46>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    d9a8:	9b03      	ldr	r3, [sp, #12]
    d9aa:	3303      	adds	r3, #3
    d9ac:	9302      	str	r3, [sp, #8]
    memcpy(p, pData, len);
    d9ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    d9b2:	461a      	mov	r2, r3
    d9b4:	9900      	ldr	r1, [sp, #0]
    d9b6:	9802      	ldr	r0, [sp, #8]
    d9b8:	f7fe fba2 	bl	c100 <memcpy>
    hciCmdSend(pBuf);
    d9bc:	9803      	ldr	r0, [sp, #12]
    d9be:	f7ff f937 	bl	cc30 <hciCmdSend>
  }
}
    d9c2:	bf00      	nop
    d9c4:	b005      	add	sp, #20
    d9c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000d9cc <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
    d9cc:	b084      	sub	sp, #16
    d9ce:	4603      	mov	r3, r0
    d9d0:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    d9d4:	4b13      	ldr	r3, [pc, #76]	; (da24 <hciCoreConnAlloc+0x58>)
    d9d6:	9302      	str	r3, [sp, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    d9d8:	2303      	movs	r3, #3
    d9da:	f88d 300f 	strb.w	r3, [sp, #15]
    d9de:	e01b      	b.n	da18 <hciCoreConnAlloc+0x4c>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
    d9e0:	9b02      	ldr	r3, [sp, #8]
    d9e2:	8a1b      	ldrh	r3, [r3, #16]
    d9e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d9e8:	4293      	cmp	r3, r2
    d9ea:	d10d      	bne.n	da08 <hciCoreConnAlloc+0x3c>
    {
      /* allocate and initialize */
      pConn->handle = handle;
    d9ec:	9b02      	ldr	r3, [sp, #8]
    d9ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    d9f2:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
    d9f4:	9b02      	ldr	r3, [sp, #8]
    d9f6:	2200      	movs	r2, #0
    d9f8:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
    d9fa:	9b02      	ldr	r3, [sp, #8]
    d9fc:	2200      	movs	r2, #0
    d9fe:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
    da00:	9b02      	ldr	r3, [sp, #8]
    da02:	2200      	movs	r2, #0
    da04:	761a      	strb	r2, [r3, #24]

      return;
    da06:	e00b      	b.n	da20 <hciCoreConnAlloc+0x54>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    da08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    da0c:	3b01      	subs	r3, #1
    da0e:	f88d 300f 	strb.w	r3, [sp, #15]
    da12:	9b02      	ldr	r3, [sp, #8]
    da14:	331c      	adds	r3, #28
    da16:	9302      	str	r3, [sp, #8]
    da18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    da1c:	2b00      	cmp	r3, #0
    da1e:	d1df      	bne.n	d9e0 <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
    da20:	b004      	add	sp, #16
    da22:	4770      	bx	lr
    da24:	10004170 	.word	0x10004170

0000da28 <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
    da28:	b500      	push	{lr}
    da2a:	b085      	sub	sp, #20
    da2c:	4603      	mov	r3, r0
    da2e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    da32:	4b20      	ldr	r3, [pc, #128]	; (dab4 <hciCoreConnFree+0x8c>)
    da34:	9302      	str	r3, [sp, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    da36:	2303      	movs	r3, #3
    da38:	f88d 300f 	strb.w	r3, [sp, #15]
    da3c:	e032      	b.n	daa4 <hciCoreConnFree+0x7c>
  {
    if (pConn->handle == handle)
    da3e:	9b02      	ldr	r3, [sp, #8]
    da40:	8a1b      	ldrh	r3, [r3, #16]
    da42:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    da46:	429a      	cmp	r2, r3
    da48:	d124      	bne.n	da94 <hciCoreConnFree+0x6c>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
    da4a:	9b02      	ldr	r3, [sp, #8]
    da4c:	681b      	ldr	r3, [r3, #0]
    da4e:	2b00      	cmp	r3, #0
    da50:	d007      	beq.n	da62 <hciCoreConnFree+0x3a>
      {
        WsfMsgFree(pConn->pTxAclPkt);
    da52:	9b02      	ldr	r3, [sp, #8]
    da54:	681b      	ldr	r3, [r3, #0]
    da56:	4618      	mov	r0, r3
    da58:	f011 ff64 	bl	1f924 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
    da5c:	9b02      	ldr	r3, [sp, #8]
    da5e:	2200      	movs	r2, #0
    da60:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
    da62:	9b02      	ldr	r3, [sp, #8]
    da64:	2200      	movs	r2, #0
    da66:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
    da68:	9b02      	ldr	r3, [sp, #8]
    da6a:	689b      	ldr	r3, [r3, #8]
    da6c:	2b00      	cmp	r3, #0
    da6e:	d007      	beq.n	da80 <hciCoreConnFree+0x58>
      {
        WsfMsgFree(pConn->pRxAclPkt);
    da70:	9b02      	ldr	r3, [sp, #8]
    da72:	689b      	ldr	r3, [r3, #8]
    da74:	4618      	mov	r0, r3
    da76:	f011 ff55 	bl	1f924 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
    da7a:	9b02      	ldr	r3, [sp, #8]
    da7c:	2200      	movs	r2, #0
    da7e:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
    da80:	9b02      	ldr	r3, [sp, #8]
    da82:	f64f 72ff 	movw	r2, #65535	; 0xffff
    da86:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
    da88:	9b02      	ldr	r3, [sp, #8]
    da8a:	7e5b      	ldrb	r3, [r3, #25]
    da8c:	4618      	mov	r0, r3
    da8e:	f000 f89b 	bl	dbc8 <hciCoreTxReady>

      return;
    da92:	e00b      	b.n	daac <hciCoreConnFree+0x84>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    da94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    da98:	3b01      	subs	r3, #1
    da9a:	f88d 300f 	strb.w	r3, [sp, #15]
    da9e:	9b02      	ldr	r3, [sp, #8]
    daa0:	331c      	adds	r3, #28
    daa2:	9302      	str	r3, [sp, #8]
    daa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    daa8:	2b00      	cmp	r3, #0
    daaa:	d1c8      	bne.n	da3e <hciCoreConnFree+0x16>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
    daac:	b005      	add	sp, #20
    daae:	f85d fb04 	ldr.w	pc, [sp], #4
    dab2:	bf00      	nop
    dab4:	10004170 	.word	0x10004170

0000dab8 <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
    dab8:	b084      	sub	sp, #16
    daba:	4603      	mov	r3, r0
    dabc:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    dac0:	4b0e      	ldr	r3, [pc, #56]	; (dafc <hciCoreConnByHandle+0x44>)
    dac2:	9302      	str	r3, [sp, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    dac4:	2303      	movs	r3, #3
    dac6:	f88d 300f 	strb.w	r3, [sp, #15]
    daca:	e00f      	b.n	daec <hciCoreConnByHandle+0x34>
  {
    if (pConn->handle == handle)
    dacc:	9b02      	ldr	r3, [sp, #8]
    dace:	8a1b      	ldrh	r3, [r3, #16]
    dad0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    dad4:	429a      	cmp	r2, r3
    dad6:	d101      	bne.n	dadc <hciCoreConnByHandle+0x24>
    {
      return pConn;
    dad8:	9b02      	ldr	r3, [sp, #8]
    dada:	e00c      	b.n	daf6 <hciCoreConnByHandle+0x3e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    dadc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dae0:	3b01      	subs	r3, #1
    dae2:	f88d 300f 	strb.w	r3, [sp, #15]
    dae6:	9b02      	ldr	r3, [sp, #8]
    dae8:	331c      	adds	r3, #28
    daea:	9302      	str	r3, [sp, #8]
    daec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    daf0:	2b00      	cmp	r3, #0
    daf2:	d1eb      	bne.n	dacc <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
    daf4:	2300      	movs	r3, #0
}
    daf6:	4618      	mov	r0, r3
    daf8:	b004      	add	sp, #16
    dafa:	4770      	bx	lr
    dafc:	10004170 	.word	0x10004170

0000db00 <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
    db00:	b082      	sub	sp, #8
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    db02:	4b11      	ldr	r3, [pc, #68]	; (db48 <hciCoreNextConnFragment+0x48>)
    db04:	9300      	str	r3, [sp, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    db06:	2303      	movs	r3, #3
    db08:	f88d 3007 	strb.w	r3, [sp, #7]
    db0c:	e013      	b.n	db36 <hciCoreNextConnFragment+0x36>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
    db0e:	9b00      	ldr	r3, [sp, #0]
    db10:	8a1b      	ldrh	r3, [r3, #16]
    db12:	f64f 72ff 	movw	r2, #65535	; 0xffff
    db16:	4293      	cmp	r3, r2
    db18:	d005      	beq.n	db26 <hciCoreNextConnFragment+0x26>
    db1a:	9b00      	ldr	r3, [sp, #0]
    db1c:	7d9b      	ldrb	r3, [r3, #22]
    db1e:	2b00      	cmp	r3, #0
    db20:	d001      	beq.n	db26 <hciCoreNextConnFragment+0x26>
    {
      return pConn;
    db22:	9b00      	ldr	r3, [sp, #0]
    db24:	e00c      	b.n	db40 <hciCoreNextConnFragment+0x40>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    db26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db2a:	3b01      	subs	r3, #1
    db2c:	f88d 3007 	strb.w	r3, [sp, #7]
    db30:	9b00      	ldr	r3, [sp, #0]
    db32:	331c      	adds	r3, #28
    db34:	9300      	str	r3, [sp, #0]
    db36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db3a:	2b00      	cmp	r3, #0
    db3c:	d1e7      	bne.n	db0e <hciCoreNextConnFragment+0xe>
    }
  }

  return NULL;
    db3e:	2300      	movs	r3, #0
}
    db40:	4618      	mov	r0, r3
    db42:	b002      	add	sp, #8
    db44:	4770      	bx	lr
    db46:	bf00      	nop
    db48:	10004170 	.word	0x10004170

0000db4c <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
    db4c:	b500      	push	{lr}
    db4e:	b083      	sub	sp, #12
    db50:	4603      	mov	r3, r0
    db52:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
    db56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    db5a:	4618      	mov	r0, r3
    db5c:	f7ff ff36 	bl	d9cc <hciCoreConnAlloc>
}
    db60:	bf00      	nop
    db62:	b003      	add	sp, #12
    db64:	f85d fb04 	ldr.w	pc, [sp], #4

0000db68 <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
    db68:	b500      	push	{lr}
    db6a:	b083      	sub	sp, #12
    db6c:	4603      	mov	r3, r0
    db6e:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
    db72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    db76:	4618      	mov	r0, r3
    db78:	f7ff ff56 	bl	da28 <hciCoreConnFree>
}
    db7c:	bf00      	nop
    db7e:	b003      	add	sp, #12
    db80:	f85d fb04 	ldr.w	pc, [sp], #4

0000db84 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
    db84:	b500      	push	{lr}
    db86:	b083      	sub	sp, #12
    db88:	9001      	str	r0, [sp, #4]
    db8a:	9100      	str	r1, [sp, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
    db8c:	9b01      	ldr	r3, [sp, #4]
    db8e:	7e5b      	ldrb	r3, [r3, #25]
    db90:	3301      	adds	r3, #1
    db92:	b2da      	uxtb	r2, r3
    db94:	9b01      	ldr	r3, [sp, #4]
    db96:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
    db98:	9900      	ldr	r1, [sp, #0]
    db9a:	9801      	ldr	r0, [sp, #4]
    db9c:	f002 fd36 	bl	1060c <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
    dba0:	4b08      	ldr	r3, [pc, #32]	; (dbc4 <hciCoreSendAclData+0x40>)
    dba2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    dba6:	2b00      	cmp	r3, #0
    dba8:	d007      	beq.n	dbba <hciCoreSendAclData+0x36>
  {
    hciCoreCb.availBufs--;
    dbaa:	4b06      	ldr	r3, [pc, #24]	; (dbc4 <hciCoreSendAclData+0x40>)
    dbac:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    dbb0:	3b01      	subs	r3, #1
    dbb2:	b2da      	uxtb	r2, r3
    dbb4:	4b03      	ldr	r3, [pc, #12]	; (dbc4 <hciCoreSendAclData+0x40>)
    dbb6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
    dbba:	bf00      	nop
    dbbc:	b003      	add	sp, #12
    dbbe:	f85d fb04 	ldr.w	pc, [sp], #4
    dbc2:	bf00      	nop
    dbc4:	10004170 	.word	0x10004170

0000dbc8 <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
    dbc8:	b500      	push	{lr}
    dbca:	b087      	sub	sp, #28
    dbcc:	4603      	mov	r3, r0
    dbce:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
    dbd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbd6:	2b00      	cmp	r3, #0
    dbd8:	d055      	beq.n	dc86 <hciCoreTxReady+0xbe>
  {
    hciCoreCb.availBufs += bufs;
    dbda:	4b30      	ldr	r3, [pc, #192]	; (dc9c <hciCoreTxReady+0xd4>)
    dbdc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
    dbe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbe4:	4413      	add	r3, r2
    dbe6:	b2da      	uxtb	r2, r3
    dbe8:	4b2c      	ldr	r3, [pc, #176]	; (dc9c <hciCoreTxReady+0xd4>)
    dbea:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
    dbee:	4b2b      	ldr	r3, [pc, #172]	; (dc9c <hciCoreTxReady+0xd4>)
    dbf0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
    dbf4:	4b29      	ldr	r3, [pc, #164]	; (dc9c <hciCoreTxReady+0xd4>)
    dbf6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    dbfa:	429a      	cmp	r2, r3
    dbfc:	d943      	bls.n	dc86 <hciCoreTxReady+0xbe>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
    dbfe:	4b27      	ldr	r3, [pc, #156]	; (dc9c <hciCoreTxReady+0xd4>)
    dc00:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
    dc04:	4b25      	ldr	r3, [pc, #148]	; (dc9c <hciCoreTxReady+0xd4>)
    dc06:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
    dc0a:	e03c      	b.n	dc86 <hciCoreTxReady+0xbe>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
    dc0c:	2000      	movs	r0, #0
    dc0e:	f000 f899 	bl	dd44 <hciCoreTxAclContinue>
    dc12:	4603      	mov	r3, r0
    dc14:	2b00      	cmp	r3, #0
    dc16:	d136      	bne.n	dc86 <hciCoreTxReady+0xbe>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
    dc18:	f10d 030b 	add.w	r3, sp, #11
    dc1c:	4619      	mov	r1, r3
    dc1e:	4820      	ldr	r0, [pc, #128]	; (dca0 <hciCoreTxReady+0xd8>)
    dc20:	f011 febd 	bl	1f99e <WsfMsgDeq>
    dc24:	9005      	str	r0, [sp, #20]
    dc26:	9b05      	ldr	r3, [sp, #20]
    dc28:	2b00      	cmp	r3, #0
    dc2a:	d032      	beq.n	dc92 <hciCoreTxReady+0xca>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
    dc2c:	9b05      	ldr	r3, [sp, #20]
    dc2e:	781b      	ldrb	r3, [r3, #0]
    dc30:	b29a      	uxth	r2, r3
    dc32:	9b05      	ldr	r3, [sp, #20]
    dc34:	3301      	adds	r3, #1
    dc36:	781b      	ldrb	r3, [r3, #0]
    dc38:	b29b      	uxth	r3, r3
    dc3a:	021b      	lsls	r3, r3, #8
    dc3c:	b29b      	uxth	r3, r3
    dc3e:	4413      	add	r3, r2
    dc40:	f8ad 3012 	strh.w	r3, [sp, #18]
        BYTES_TO_UINT16(len, &pData[2]);
    dc44:	9b05      	ldr	r3, [sp, #20]
    dc46:	3302      	adds	r3, #2
    dc48:	781b      	ldrb	r3, [r3, #0]
    dc4a:	b29a      	uxth	r2, r3
    dc4c:	9b05      	ldr	r3, [sp, #20]
    dc4e:	3303      	adds	r3, #3
    dc50:	781b      	ldrb	r3, [r3, #0]
    dc52:	b29b      	uxth	r3, r3
    dc54:	021b      	lsls	r3, r3, #8
    dc56:	b29b      	uxth	r3, r3
    dc58:	4413      	add	r3, r2
    dc5a:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    dc5e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    dc62:	4618      	mov	r0, r3
    dc64:	f7ff ff28 	bl	dab8 <hciCoreConnByHandle>
    dc68:	9003      	str	r0, [sp, #12]
    dc6a:	9b03      	ldr	r3, [sp, #12]
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	d007      	beq.n	dc80 <hciCoreTxReady+0xb8>
        {
          hciCoreTxAclStart(pConn, len, pData);
    dc70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    dc74:	9a05      	ldr	r2, [sp, #20]
    dc76:	4619      	mov	r1, r3
    dc78:	9803      	ldr	r0, [sp, #12]
    dc7a:	f000 f813 	bl	dca4 <hciCoreTxAclStart>
    dc7e:	e002      	b.n	dc86 <hciCoreTxReady+0xbe>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
    dc80:	9805      	ldr	r0, [sp, #20]
    dc82:	f011 fe4f 	bl	1f924 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
    dc86:	4b05      	ldr	r3, [pc, #20]	; (dc9c <hciCoreTxReady+0xd4>)
    dc88:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	d1bd      	bne.n	dc0c <hciCoreTxReady+0x44>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
    dc90:	e000      	b.n	dc94 <hciCoreTxReady+0xcc>
        break;
    dc92:	bf00      	nop
}
    dc94:	bf00      	nop
    dc96:	b007      	add	sp, #28
    dc98:	f85d fb04 	ldr.w	pc, [sp], #4
    dc9c:	10004170 	.word	0x10004170
    dca0:	100041d4 	.word	0x100041d4

0000dca4 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
    dca4:	b500      	push	{lr}
    dca6:	b087      	sub	sp, #28
    dca8:	9003      	str	r0, [sp, #12]
    dcaa:	460b      	mov	r3, r1
    dcac:	9201      	str	r2, [sp, #4]
    dcae:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
    dcb2:	f000 fbd7 	bl	e464 <HciGetBufSize>
    dcb6:	4603      	mov	r3, r0
    dcb8:	f8ad 3016 	strh.w	r3, [sp, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
    dcbc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    dcc0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    dcc4:	429a      	cmp	r2, r3
    dcc6:	d932      	bls.n	dd2e <hciCoreTxAclStart+0x8a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
    dcc8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    dccc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    dcd0:	1ad3      	subs	r3, r2, r3
    dcd2:	b29a      	uxth	r2, r3
    dcd4:	9b03      	ldr	r3, [sp, #12]
    dcd6:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
    dcd8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    dcdc:	9a01      	ldr	r2, [sp, #4]
    dcde:	441a      	add	r2, r3
    dce0:	9b03      	ldr	r3, [sp, #12]
    dce2:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
    dce4:	9b03      	ldr	r3, [sp, #12]
    dce6:	9a01      	ldr	r2, [sp, #4]
    dce8:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
    dcea:	9b03      	ldr	r3, [sp, #12]
    dcec:	2201      	movs	r2, #1
    dcee:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
    dcf0:	9b01      	ldr	r3, [sp, #4]
    dcf2:	3302      	adds	r3, #2
    dcf4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    dcf8:	b2d2      	uxtb	r2, r2
    dcfa:	701a      	strb	r2, [r3, #0]
    dcfc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    dd00:	0a1b      	lsrs	r3, r3, #8
    dd02:	b29a      	uxth	r2, r3
    dd04:	9b01      	ldr	r3, [sp, #4]
    dd06:	3303      	adds	r3, #3
    dd08:	b2d2      	uxtb	r2, r2
    dd0a:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
    dd0c:	9901      	ldr	r1, [sp, #4]
    dd0e:	9803      	ldr	r0, [sp, #12]
    dd10:	f7ff ff38 	bl	db84 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
    dd14:	bf00      	nop
    dd16:	4b0a      	ldr	r3, [pc, #40]	; (dd40 <hciCoreTxAclStart+0x9c>)
    dd18:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    dd1c:	2b00      	cmp	r3, #0
    dd1e:	d00a      	beq.n	dd36 <hciCoreTxAclStart+0x92>
    dd20:	9803      	ldr	r0, [sp, #12]
    dd22:	f000 f80f 	bl	dd44 <hciCoreTxAclContinue>
    dd26:	4603      	mov	r3, r0
    dd28:	2b00      	cmp	r3, #0
    dd2a:	d1f4      	bne.n	dd16 <hciCoreTxAclStart+0x72>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
    dd2c:	e003      	b.n	dd36 <hciCoreTxAclStart+0x92>
    hciCoreSendAclData(pConn, pData);
    dd2e:	9901      	ldr	r1, [sp, #4]
    dd30:	9803      	ldr	r0, [sp, #12]
    dd32:	f7ff ff27 	bl	db84 <hciCoreSendAclData>
}
    dd36:	bf00      	nop
    dd38:	b007      	add	sp, #28
    dd3a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd3e:	bf00      	nop
    dd40:	10004170 	.word	0x10004170

0000dd44 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
    dd44:	b510      	push	{r4, lr}
    dd46:	b084      	sub	sp, #16
    dd48:	9001      	str	r0, [sp, #4]
  uint16_t aclLen;

  if (pConn == NULL)
    dd4a:	9b01      	ldr	r3, [sp, #4]
    dd4c:	2b00      	cmp	r3, #0
    dd4e:	d102      	bne.n	dd56 <hciCoreTxAclContinue+0x12>
  {
    pConn = hciCoreNextConnFragment();
    dd50:	f7ff fed6 	bl	db00 <hciCoreNextConnFragment>
    dd54:	9001      	str	r0, [sp, #4]
  }

  if (pConn != NULL)
    dd56:	9b01      	ldr	r3, [sp, #4]
    dd58:	2b00      	cmp	r3, #0
    dd5a:	d04f      	beq.n	ddfc <hciCoreTxAclContinue+0xb8>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
    dd5c:	9b01      	ldr	r3, [sp, #4]
    dd5e:	8a5c      	ldrh	r4, [r3, #18]
    dd60:	f000 fb80 	bl	e464 <HciGetBufSize>
    dd64:	4603      	mov	r3, r0
    dd66:	429c      	cmp	r4, r3
    dd68:	d202      	bcs.n	dd70 <hciCoreTxAclContinue+0x2c>
    dd6a:	9b01      	ldr	r3, [sp, #4]
    dd6c:	8a5b      	ldrh	r3, [r3, #18]
    dd6e:	e002      	b.n	dd76 <hciCoreTxAclContinue+0x32>
    dd70:	f000 fb78 	bl	e464 <HciGetBufSize>
    dd74:	4603      	mov	r3, r0
    dd76:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (aclLen > 0)
    dd7a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d03c      	beq.n	ddfc <hciCoreTxAclContinue+0xb8>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
    dd82:	9b01      	ldr	r3, [sp, #4]
    dd84:	8a5a      	ldrh	r2, [r3, #18]
    dd86:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    dd8a:	1ad3      	subs	r3, r2, r3
    dd8c:	b29a      	uxth	r2, r3
    dd8e:	9b01      	ldr	r3, [sp, #4]
    dd90:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
    dd92:	9b01      	ldr	r3, [sp, #4]
    dd94:	8a1a      	ldrh	r2, [r3, #16]
    dd96:	9b01      	ldr	r3, [sp, #4]
    dd98:	685b      	ldr	r3, [r3, #4]
    dd9a:	b2d2      	uxtb	r2, r2
    dd9c:	701a      	strb	r2, [r3, #0]
    dd9e:	9b01      	ldr	r3, [sp, #4]
    dda0:	8a1b      	ldrh	r3, [r3, #16]
    dda2:	0a1b      	lsrs	r3, r3, #8
    dda4:	b29b      	uxth	r3, r3
    dda6:	f043 0310 	orr.w	r3, r3, #16
    ddaa:	b29a      	uxth	r2, r3
    ddac:	9b01      	ldr	r3, [sp, #4]
    ddae:	685b      	ldr	r3, [r3, #4]
    ddb0:	3301      	adds	r3, #1
    ddb2:	b2d2      	uxtb	r2, r2
    ddb4:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
    ddb6:	9b01      	ldr	r3, [sp, #4]
    ddb8:	685b      	ldr	r3, [r3, #4]
    ddba:	3302      	adds	r3, #2
    ddbc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ddc0:	b2d2      	uxtb	r2, r2
    ddc2:	701a      	strb	r2, [r3, #0]
    ddc4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ddc8:	0a1b      	lsrs	r3, r3, #8
    ddca:	b29a      	uxth	r2, r3
    ddcc:	9b01      	ldr	r3, [sp, #4]
    ddce:	685b      	ldr	r3, [r3, #4]
    ddd0:	3303      	adds	r3, #3
    ddd2:	b2d2      	uxtb	r2, r2
    ddd4:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
    ddd6:	9b01      	ldr	r3, [sp, #4]
    ddd8:	685b      	ldr	r3, [r3, #4]
    ddda:	4619      	mov	r1, r3
    dddc:	9801      	ldr	r0, [sp, #4]
    ddde:	f7ff fed1 	bl	db84 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
    dde2:	9b01      	ldr	r3, [sp, #4]
    dde4:	8a5b      	ldrh	r3, [r3, #18]
    dde6:	2b00      	cmp	r3, #0
    dde8:	d006      	beq.n	ddf8 <hciCoreTxAclContinue+0xb4>
      {
        pConn->pNextTxFrag += aclLen;
    ddea:	9b01      	ldr	r3, [sp, #4]
    ddec:	685a      	ldr	r2, [r3, #4]
    ddee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ddf2:	441a      	add	r2, r3
    ddf4:	9b01      	ldr	r3, [sp, #4]
    ddf6:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
    ddf8:	2301      	movs	r3, #1
    ddfa:	e000      	b.n	ddfe <hciCoreTxAclContinue+0xba>
    }
  }

  return FALSE;
    ddfc:	2300      	movs	r3, #0
}
    ddfe:	4618      	mov	r0, r3
    de00:	b004      	add	sp, #16
    de02:	bd10      	pop	{r4, pc}

0000de04 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
    de04:	b500      	push	{lr}
    de06:	b083      	sub	sp, #12
    de08:	9001      	str	r0, [sp, #4]
    de0a:	9100      	str	r1, [sp, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
    de0c:	9b01      	ldr	r3, [sp, #4]
    de0e:	7d9b      	ldrb	r3, [r3, #22]
    de10:	2b00      	cmp	r3, #0
    de12:	d00f      	beq.n	de34 <hciCoreTxAclComplete+0x30>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
    de14:	9b01      	ldr	r3, [sp, #4]
    de16:	8a5b      	ldrh	r3, [r3, #18]
    de18:	2b00      	cmp	r3, #0
    de1a:	d111      	bne.n	de40 <hciCoreTxAclComplete+0x3c>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
    de1c:	9b01      	ldr	r3, [sp, #4]
    de1e:	681b      	ldr	r3, [r3, #0]
    de20:	4618      	mov	r0, r3
    de22:	f011 fd7f 	bl	1f924 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
    de26:	9b01      	ldr	r3, [sp, #4]
    de28:	2200      	movs	r2, #0
    de2a:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
    de2c:	9b01      	ldr	r3, [sp, #4]
    de2e:	2200      	movs	r2, #0
    de30:	759a      	strb	r2, [r3, #22]
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
    de32:	e005      	b.n	de40 <hciCoreTxAclComplete+0x3c>
  else if (pData != NULL)
    de34:	9b00      	ldr	r3, [sp, #0]
    de36:	2b00      	cmp	r3, #0
    de38:	d002      	beq.n	de40 <hciCoreTxAclComplete+0x3c>
    WsfMsgFree(pData);
    de3a:	9800      	ldr	r0, [sp, #0]
    de3c:	f011 fd72 	bl	1f924 <WsfMsgFree>
}
    de40:	bf00      	nop
    de42:	b003      	add	sp, #12
    de44:	f85d fb04 	ldr.w	pc, [sp], #4

0000de48 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
    de48:	b500      	push	{lr}
    de4a:	b089      	sub	sp, #36	; 0x24
    de4c:	9001      	str	r0, [sp, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
    de4e:	2300      	movs	r3, #0
    de50:	9307      	str	r3, [sp, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
    de52:	2301      	movs	r3, #1
    de54:	f88d 301b 	strb.w	r3, [sp, #27]

  BYTES_TO_UINT16(handle, pData);
    de58:	9b01      	ldr	r3, [sp, #4]
    de5a:	781b      	ldrb	r3, [r3, #0]
    de5c:	b29a      	uxth	r2, r3
    de5e:	9b01      	ldr	r3, [sp, #4]
    de60:	3301      	adds	r3, #1
    de62:	781b      	ldrb	r3, [r3, #0]
    de64:	b29b      	uxth	r3, r3
    de66:	021b      	lsls	r3, r3, #8
    de68:	b29b      	uxth	r3, r3
    de6a:	4413      	add	r3, r2
    de6c:	f8ad 3018 	strh.w	r3, [sp, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
    de70:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    de74:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    de78:	f8ad 3016 	strh.w	r3, [sp, #22]
  handle &= HCI_HANDLE_MASK;
    de7c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    de80:	f3c3 030b 	ubfx	r3, r3, #0, #12
    de84:	f8ad 3018 	strh.w	r3, [sp, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
    de88:	9b01      	ldr	r3, [sp, #4]
    de8a:	3302      	adds	r3, #2
    de8c:	781b      	ldrb	r3, [r3, #0]
    de8e:	b29a      	uxth	r2, r3
    de90:	9b01      	ldr	r3, [sp, #4]
    de92:	3303      	adds	r3, #3
    de94:	781b      	ldrb	r3, [r3, #0]
    de96:	b29b      	uxth	r3, r3
    de98:	021b      	lsls	r3, r3, #8
    de9a:	b29b      	uxth	r3, r3
    de9c:	4413      	add	r3, r2
    de9e:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    dea2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    dea6:	4618      	mov	r0, r3
    dea8:	f7ff fe06 	bl	dab8 <hciCoreConnByHandle>
    deac:	9004      	str	r0, [sp, #16]
    deae:	9b04      	ldr	r3, [sp, #16]
    deb0:	2b00      	cmp	r3, #0
    deb2:	f000 80c3 	beq.w	e03c <hciCoreAclReassembly+0x1f4>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
    deb6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    deba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    debe:	f040 808c 	bne.w	dfda <hciCoreAclReassembly+0x192>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
    dec2:	9b04      	ldr	r3, [sp, #16]
    dec4:	689b      	ldr	r3, [r3, #8]
    dec6:	2b00      	cmp	r3, #0
    dec8:	d007      	beq.n	deda <hciCoreAclReassembly+0x92>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
    deca:	9b04      	ldr	r3, [sp, #16]
    decc:	689b      	ldr	r3, [r3, #8]
    dece:	4618      	mov	r0, r3
    ded0:	f011 fd28 	bl	1f924 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
    ded4:	9b04      	ldr	r3, [sp, #16]
    ded6:	2200      	movs	r2, #0
    ded8:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
    deda:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    dede:	2b03      	cmp	r3, #3
    dee0:	f240 80ac 	bls.w	e03c <hciCoreAclReassembly+0x1f4>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
    dee4:	9b01      	ldr	r3, [sp, #4]
    dee6:	3304      	adds	r3, #4
    dee8:	781b      	ldrb	r3, [r3, #0]
    deea:	b29a      	uxth	r2, r3
    deec:	9b01      	ldr	r3, [sp, #4]
    deee:	3305      	adds	r3, #5
    def0:	781b      	ldrb	r3, [r3, #0]
    def2:	b29b      	uxth	r3, r3
    def4:	021b      	lsls	r3, r3, #8
    def6:	b29b      	uxth	r3, r3
    def8:	4413      	add	r3, r2
    defa:	f8ad 300e 	strh.w	r3, [sp, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
    defe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    df02:	3303      	adds	r3, #3
    df04:	4a53      	ldr	r2, [pc, #332]	; (e054 <hciCoreAclReassembly+0x20c>)
    df06:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
    df0a:	4293      	cmp	r3, r2
    df0c:	f280 8096 	bge.w	e03c <hciCoreAclReassembly+0x1f4>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
    df10:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    df14:	1cda      	adds	r2, r3, #3
    df16:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    df1a:	429a      	cmp	r2, r3
    df1c:	db57      	blt.n	dfce <hciCoreAclReassembly+0x186>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
    df1e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    df22:	3308      	adds	r3, #8
    df24:	b29b      	uxth	r3, r3
    df26:	2100      	movs	r1, #0
    df28:	4618      	mov	r0, r3
    df2a:	f011 fccb 	bl	1f8c4 <WsfMsgDataAlloc>
    df2e:	4602      	mov	r2, r0
    df30:	9b04      	ldr	r3, [sp, #16]
    df32:	609a      	str	r2, [r3, #8]
    df34:	9b04      	ldr	r3, [sp, #16]
    df36:	689b      	ldr	r3, [r3, #8]
    df38:	2b00      	cmp	r3, #0
    df3a:	d07f      	beq.n	e03c <hciCoreAclReassembly+0x1f4>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
    df3c:	9b04      	ldr	r3, [sp, #16]
    df3e:	689a      	ldr	r2, [r3, #8]
    df40:	9b04      	ldr	r3, [sp, #16]
    df42:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
    df44:	9b04      	ldr	r3, [sp, #16]
    df46:	68db      	ldr	r3, [r3, #12]
    df48:	1c59      	adds	r1, r3, #1
    df4a:	9a04      	ldr	r2, [sp, #16]
    df4c:	60d1      	str	r1, [r2, #12]
    df4e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    df52:	b2d2      	uxtb	r2, r2
    df54:	701a      	strb	r2, [r3, #0]
    df56:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    df5a:	0a1b      	lsrs	r3, r3, #8
    df5c:	b298      	uxth	r0, r3
    df5e:	9b04      	ldr	r3, [sp, #16]
    df60:	68db      	ldr	r3, [r3, #12]
    df62:	1c59      	adds	r1, r3, #1
    df64:	9a04      	ldr	r2, [sp, #16]
    df66:	60d1      	str	r1, [r2, #12]
    df68:	b2c2      	uxtb	r2, r0
    df6a:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
    df6c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    df70:	b2da      	uxtb	r2, r3
    df72:	9b04      	ldr	r3, [sp, #16]
    df74:	68db      	ldr	r3, [r3, #12]
    df76:	1c58      	adds	r0, r3, #1
    df78:	9904      	ldr	r1, [sp, #16]
    df7a:	60c8      	str	r0, [r1, #12]
    df7c:	3204      	adds	r2, #4
    df7e:	b2d2      	uxtb	r2, r2
    df80:	701a      	strb	r2, [r3, #0]
    df82:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    df86:	3304      	adds	r3, #4
    df88:	1218      	asrs	r0, r3, #8
    df8a:	9b04      	ldr	r3, [sp, #16]
    df8c:	68db      	ldr	r3, [r3, #12]
    df8e:	1c59      	adds	r1, r3, #1
    df90:	9a04      	ldr	r2, [sp, #16]
    df92:	60d1      	str	r1, [r2, #12]
    df94:	b2c2      	uxtb	r2, r0
    df96:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
    df98:	9b04      	ldr	r3, [sp, #16]
    df9a:	68d8      	ldr	r0, [r3, #12]
    df9c:	9b01      	ldr	r3, [sp, #4]
    df9e:	3304      	adds	r3, #4
    dfa0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dfa4:	4619      	mov	r1, r3
    dfa6:	f7fe f8ab 	bl	c100 <memcpy>
            pConn->pNextRxFrag += aclLen;
    dfaa:	9b04      	ldr	r3, [sp, #16]
    dfac:	68da      	ldr	r2, [r3, #12]
    dfae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    dfb2:	441a      	add	r2, r3
    dfb4:	9b04      	ldr	r3, [sp, #16]
    dfb6:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
    dfb8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    dfbc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    dfc0:	1ad3      	subs	r3, r2, r3
    dfc2:	b29b      	uxth	r3, r3
    dfc4:	3304      	adds	r3, #4
    dfc6:	b29a      	uxth	r2, r3
    dfc8:	9b04      	ldr	r3, [sp, #16]
    dfca:	829a      	strh	r2, [r3, #20]
    dfcc:	e036      	b.n	e03c <hciCoreAclReassembly+0x1f4>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
    dfce:	9b01      	ldr	r3, [sp, #4]
    dfd0:	9307      	str	r3, [sp, #28]
          freeData = FALSE;
    dfd2:	2300      	movs	r3, #0
    dfd4:	f88d 301b 	strb.w	r3, [sp, #27]
    dfd8:	e030      	b.n	e03c <hciCoreAclReassembly+0x1f4>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
    dfda:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    dfde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    dfe2:	d12b      	bne.n	e03c <hciCoreAclReassembly+0x1f4>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
    dfe4:	9b04      	ldr	r3, [sp, #16]
    dfe6:	689b      	ldr	r3, [r3, #8]
    dfe8:	2b00      	cmp	r3, #0
    dfea:	d027      	beq.n	e03c <hciCoreAclReassembly+0x1f4>
      {
        if (aclLen <= pConn->rxAclRemLen)
    dfec:	9b04      	ldr	r3, [sp, #16]
    dfee:	8a9b      	ldrh	r3, [r3, #20]
    dff0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dff4:	429a      	cmp	r2, r3
    dff6:	d821      	bhi.n	e03c <hciCoreAclReassembly+0x1f4>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
    dff8:	9b04      	ldr	r3, [sp, #16]
    dffa:	68d8      	ldr	r0, [r3, #12]
    dffc:	9b01      	ldr	r3, [sp, #4]
    dffe:	3304      	adds	r3, #4
    e000:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e004:	4619      	mov	r1, r3
    e006:	f7fe f87b 	bl	c100 <memcpy>
          pConn->pNextRxFrag += aclLen;
    e00a:	9b04      	ldr	r3, [sp, #16]
    e00c:	68da      	ldr	r2, [r3, #12]
    e00e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e012:	441a      	add	r2, r3
    e014:	9b04      	ldr	r3, [sp, #16]
    e016:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
    e018:	9b04      	ldr	r3, [sp, #16]
    e01a:	8a9a      	ldrh	r2, [r3, #20]
    e01c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e020:	1ad3      	subs	r3, r2, r3
    e022:	b29a      	uxth	r2, r3
    e024:	9b04      	ldr	r3, [sp, #16]
    e026:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
    e028:	9b04      	ldr	r3, [sp, #16]
    e02a:	8a9b      	ldrh	r3, [r3, #20]
    e02c:	2b00      	cmp	r3, #0
    e02e:	d105      	bne.n	e03c <hciCoreAclReassembly+0x1f4>
          {
            pDataRtn = pConn->pRxAclPkt;
    e030:	9b04      	ldr	r3, [sp, #16]
    e032:	689b      	ldr	r3, [r3, #8]
    e034:	9307      	str	r3, [sp, #28]
            pConn->pRxAclPkt = NULL;
    e036:	9b04      	ldr	r3, [sp, #16]
    e038:	2200      	movs	r2, #0
    e03a:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
    e03c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    e040:	2b00      	cmp	r3, #0
    e042:	d002      	beq.n	e04a <hciCoreAclReassembly+0x202>
  {
    WsfMsgFree(pData);
    e044:	9801      	ldr	r0, [sp, #4]
    e046:	f011 fc6d 	bl	1f924 <WsfMsgFree>
  }

  return pDataRtn;
    e04a:	9b07      	ldr	r3, [sp, #28]
}
    e04c:	4618      	mov	r0, r3
    e04e:	b009      	add	sp, #36	; 0x24
    e050:	f85d fb04 	ldr.w	pc, [sp], #4
    e054:	10004170 	.word	0x10004170

0000e058 <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
    e058:	b500      	push	{lr}
    e05a:	b083      	sub	sp, #12
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
    e05c:	4b24      	ldr	r3, [pc, #144]	; (e0f0 <HciCoreInit+0x98>)
    e05e:	2200      	movs	r2, #0
    e060:	665a      	str	r2, [r3, #100]	; 0x64
    e062:	4b23      	ldr	r3, [pc, #140]	; (e0f0 <HciCoreInit+0x98>)
    e064:	2200      	movs	r2, #0
    e066:	669a      	str	r2, [r3, #104]	; 0x68

  for (i = 0; i < DM_CONN_MAX; i++)
    e068:	2300      	movs	r3, #0
    e06a:	f88d 3007 	strb.w	r3, [sp, #7]
    e06e:	e010      	b.n	e092 <HciCoreInit+0x3a>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
    e070:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e074:	491e      	ldr	r1, [pc, #120]	; (e0f0 <HciCoreInit+0x98>)
    e076:	4613      	mov	r3, r2
    e078:	00db      	lsls	r3, r3, #3
    e07a:	1a9b      	subs	r3, r3, r2
    e07c:	009b      	lsls	r3, r3, #2
    e07e:	440b      	add	r3, r1
    e080:	3310      	adds	r3, #16
    e082:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e086:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
    e088:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e08c:	3301      	adds	r3, #1
    e08e:	f88d 3007 	strb.w	r3, [sp, #7]
    e092:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e096:	2b02      	cmp	r3, #2
    e098:	d9ea      	bls.n	e070 <HciCoreInit+0x18>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
    e09a:	4b15      	ldr	r3, [pc, #84]	; (e0f0 <HciCoreInit+0x98>)
    e09c:	221b      	movs	r2, #27
    e09e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
    e0a2:	4b13      	ldr	r3, [pc, #76]	; (e0f0 <HciCoreInit+0x98>)
    e0a4:	2205      	movs	r2, #5
    e0a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
    e0aa:	4b11      	ldr	r3, [pc, #68]	; (e0f0 <HciCoreInit+0x98>)
    e0ac:	2203      	movs	r2, #3
    e0ae:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

  #if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    if (APOLLO3_GE_B0)
    e0b2:	4b10      	ldr	r3, [pc, #64]	; (e0f4 <HciCoreInit+0x9c>)
    e0b4:	68db      	ldr	r3, [r3, #12]
    e0b6:	b2db      	uxtb	r3, r3
    e0b8:	2b20      	cmp	r3, #32
    e0ba:	d90f      	bls.n	e0dc <HciCoreInit+0x84>
    {
      // B0 has only less internal ACL buffers
      hciCoreCb.aclQueueHi--;
    e0bc:	4b0c      	ldr	r3, [pc, #48]	; (e0f0 <HciCoreInit+0x98>)
    e0be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    e0c2:	3b01      	subs	r3, #1
    e0c4:	b2da      	uxtb	r2, r3
    e0c6:	4b0a      	ldr	r3, [pc, #40]	; (e0f0 <HciCoreInit+0x98>)
    e0c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      hciCoreCb.aclQueueLo--;
    e0cc:	4b08      	ldr	r3, [pc, #32]	; (e0f0 <HciCoreInit+0x98>)
    e0ce:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    e0d2:	3b01      	subs	r3, #1
    e0d4:	b2da      	uxtb	r2, r3
    e0d6:	4b06      	ldr	r3, [pc, #24]	; (e0f0 <HciCoreInit+0x98>)
    e0d8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
  #endif
  hciCoreCb.extResetSeq = NULL;
    e0dc:	4b04      	ldr	r3, [pc, #16]	; (e0f0 <HciCoreInit+0x98>)
    e0de:	2200      	movs	r2, #0
    e0e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  hciCoreInit();
    e0e4:	f000 f8da 	bl	e29c <hciCoreInit>
}
    e0e8:	bf00      	nop
    e0ea:	b003      	add	sp, #12
    e0ec:	f85d fb04 	ldr.w	pc, [sp], #4
    e0f0:	10004170 	.word	0x10004170
    e0f4:	40020000 	.word	0x40020000

0000e0f8 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
    e0f8:	b500      	push	{lr}
    e0fa:	b085      	sub	sp, #20
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;

  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
    e0fc:	4b26      	ldr	r3, [pc, #152]	; (e198 <HciResetSequence+0xa0>)
    e0fe:	9302      	str	r3, [sp, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    e100:	e002      	b.n	e108 <HciResetSequence+0x10>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
    e102:	9801      	ldr	r0, [sp, #4]
    e104:	f011 fc0e 	bl	1f924 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    e108:	f10d 0303 	add.w	r3, sp, #3
    e10c:	4619      	mov	r1, r3
    e10e:	4823      	ldr	r0, [pc, #140]	; (e19c <HciResetSequence+0xa4>)
    e110:	f011 fc45 	bl	1f99e <WsfMsgDeq>
    e114:	9001      	str	r0, [sp, #4]
    e116:	9b01      	ldr	r3, [sp, #4]
    e118:	2b00      	cmp	r3, #0
    e11a:	d1f2      	bne.n	e102 <HciResetSequence+0xa>
  }

  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e11c:	2303      	movs	r3, #3
    e11e:	f88d 300f 	strb.w	r3, [sp, #15]
    e122:	e02b      	b.n	e17c <HciResetSequence+0x84>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
    e124:	9b02      	ldr	r3, [sp, #8]
    e126:	681b      	ldr	r3, [r3, #0]
    e128:	2b00      	cmp	r3, #0
    e12a:	d007      	beq.n	e13c <HciResetSequence+0x44>
    {
      WsfMsgFree(pConn->pTxAclPkt);
    e12c:	9b02      	ldr	r3, [sp, #8]
    e12e:	681b      	ldr	r3, [r3, #0]
    e130:	4618      	mov	r0, r3
    e132:	f011 fbf7 	bl	1f924 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
    e136:	9b02      	ldr	r3, [sp, #8]
    e138:	2200      	movs	r2, #0
    e13a:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
    e13c:	9b02      	ldr	r3, [sp, #8]
    e13e:	2200      	movs	r2, #0
    e140:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
    e142:	9b02      	ldr	r3, [sp, #8]
    e144:	689b      	ldr	r3, [r3, #8]
    e146:	2b00      	cmp	r3, #0
    e148:	d007      	beq.n	e15a <HciResetSequence+0x62>
    {
      WsfMsgFree(pConn->pRxAclPkt);
    e14a:	9b02      	ldr	r3, [sp, #8]
    e14c:	689b      	ldr	r3, [r3, #8]
    e14e:	4618      	mov	r0, r3
    e150:	f011 fbe8 	bl	1f924 <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
    e154:	9b02      	ldr	r3, [sp, #8]
    e156:	2200      	movs	r2, #0
    e158:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
    e15a:	9b02      	ldr	r3, [sp, #8]
    e15c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e160:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
    e162:	9b02      	ldr	r3, [sp, #8]
    e164:	7e5b      	ldrb	r3, [r3, #25]
    e166:	4618      	mov	r0, r3
    e168:	f7ff fd2e 	bl	dbc8 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
    e16c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e170:	3b01      	subs	r3, #1
    e172:	f88d 300f 	strb.w	r3, [sp, #15]
    e176:	9b02      	ldr	r3, [sp, #8]
    e178:	331c      	adds	r3, #28
    e17a:	9302      	str	r3, [sp, #8]
    e17c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e180:	2b00      	cmp	r3, #0
    e182:	d1cf      	bne.n	e124 <HciResetSequence+0x2c>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
    e184:	4b05      	ldr	r3, [pc, #20]	; (e19c <HciResetSequence+0xa4>)
    e186:	2201      	movs	r2, #1
    e188:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
    e18a:	f013 f8bd 	bl	21308 <hciCoreResetStart>
}
    e18e:	bf00      	nop
    e190:	b005      	add	sp, #20
    e192:	f85d fb04 	ldr.w	pc, [sp], #4
    e196:	bf00      	nop
    e198:	10004170 	.word	0x10004170
    e19c:	10004230 	.word	0x10004230

0000e1a0 <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
    e1a0:	b082      	sub	sp, #8
    e1a2:	4603      	mov	r3, r0
    e1a4:	f8ad 3006 	strh.w	r3, [sp, #6]
  hciCoreCb.maxRxAclLen = len;
    e1a8:	4a03      	ldr	r2, [pc, #12]	; (e1b8 <HciSetMaxRxAclLen+0x18>)
    e1aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e1ae:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
    e1b2:	bf00      	nop
    e1b4:	b002      	add	sp, #8
    e1b6:	4770      	bx	lr
    e1b8:	10004170 	.word	0x10004170

0000e1bc <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
    e1bc:	b510      	push	{r4, lr}
    e1be:	b084      	sub	sp, #16
    e1c0:	9001      	str	r0, [sp, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
    e1c2:	9b01      	ldr	r3, [sp, #4]
    e1c4:	781b      	ldrb	r3, [r3, #0]
    e1c6:	b29a      	uxth	r2, r3
    e1c8:	9b01      	ldr	r3, [sp, #4]
    e1ca:	3301      	adds	r3, #1
    e1cc:	781b      	ldrb	r3, [r3, #0]
    e1ce:	b29b      	uxth	r3, r3
    e1d0:	021b      	lsls	r3, r3, #8
    e1d2:	b29b      	uxth	r3, r3
    e1d4:	4413      	add	r3, r2
    e1d6:	f8ad 300e 	strh.w	r3, [sp, #14]
  BYTES_TO_UINT16(len, &pData[2]);
    e1da:	9b01      	ldr	r3, [sp, #4]
    e1dc:	3302      	adds	r3, #2
    e1de:	781b      	ldrb	r3, [r3, #0]
    e1e0:	b29a      	uxth	r2, r3
    e1e2:	9b01      	ldr	r3, [sp, #4]
    e1e4:	3303      	adds	r3, #3
    e1e6:	781b      	ldrb	r3, [r3, #0]
    e1e8:	b29b      	uxth	r3, r3
    e1ea:	021b      	lsls	r3, r3, #8
    e1ec:	b29b      	uxth	r3, r3
    e1ee:	4413      	add	r3, r2
    e1f0:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    e1f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e1f8:	4618      	mov	r0, r3
    e1fa:	f7ff fc5d 	bl	dab8 <hciCoreConnByHandle>
    e1fe:	9002      	str	r0, [sp, #8]
    e200:	9b02      	ldr	r3, [sp, #8]
    e202:	2b00      	cmp	r3, #0
    e204:	d03d      	beq.n	e282 <HciSendAclData+0xc6>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
    e206:	4822      	ldr	r0, [pc, #136]	; (e290 <HciSendAclData+0xd4>)
    e208:	f011 fe5f 	bl	1feca <WsfQueueEmpty>
    e20c:	4603      	mov	r3, r0
    e20e:	2b00      	cmp	r3, #0
    e210:	d00c      	beq.n	e22c <HciSendAclData+0x70>
    e212:	4b20      	ldr	r3, [pc, #128]	; (e294 <HciSendAclData+0xd8>)
    e214:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    e218:	2b00      	cmp	r3, #0
    e21a:	d007      	beq.n	e22c <HciSendAclData+0x70>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
    e21c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    e220:	9a01      	ldr	r2, [sp, #4]
    e222:	4619      	mov	r1, r3
    e224:	9802      	ldr	r0, [sp, #8]
    e226:	f7ff fd3d 	bl	dca4 <hciCoreTxAclStart>
    e22a:	e004      	b.n	e236 <HciSendAclData+0x7a>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
    e22c:	9a01      	ldr	r2, [sp, #4]
    e22e:	2100      	movs	r1, #0
    e230:	4817      	ldr	r0, [pc, #92]	; (e290 <HciSendAclData+0xd4>)
    e232:	f011 fb9e 	bl	1f972 <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
    e236:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    e23a:	1e5c      	subs	r4, r3, #1
    e23c:	f000 f912 	bl	e464 <HciGetBufSize>
    e240:	4603      	mov	r3, r0
    e242:	fb94 f3f3 	sdiv	r3, r4, r3
    e246:	1c59      	adds	r1, r3, #1
    e248:	9b02      	ldr	r3, [sp, #8]
    e24a:	7e1a      	ldrb	r2, [r3, #24]
    e24c:	b2cb      	uxtb	r3, r1
    e24e:	4413      	add	r3, r2
    e250:	b2da      	uxtb	r2, r3
    e252:	9b02      	ldr	r3, [sp, #8]
    e254:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
    e256:	9b02      	ldr	r3, [sp, #8]
    e258:	7e1a      	ldrb	r2, [r3, #24]
    e25a:	4b0e      	ldr	r3, [pc, #56]	; (e294 <HciSendAclData+0xd8>)
    e25c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    e260:	429a      	cmp	r2, r3
    e262:	d311      	bcc.n	e288 <HciSendAclData+0xcc>
    e264:	9b02      	ldr	r3, [sp, #8]
    e266:	7ddb      	ldrb	r3, [r3, #23]
    e268:	2b00      	cmp	r3, #0
    e26a:	d10d      	bne.n	e288 <HciSendAclData+0xcc>
    {
      pConn->flowDisabled = TRUE;
    e26c:	9b02      	ldr	r3, [sp, #8]
    e26e:	2201      	movs	r2, #1
    e270:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
    e272:	4b09      	ldr	r3, [pc, #36]	; (e298 <HciSendAclData+0xdc>)
    e274:	695b      	ldr	r3, [r3, #20]
    e276:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    e27a:	2101      	movs	r1, #1
    e27c:	4610      	mov	r0, r2
    e27e:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
    e280:	e002      	b.n	e288 <HciSendAclData+0xcc>
    WsfMsgFree(pData);
    e282:	9801      	ldr	r0, [sp, #4]
    e284:	f011 fb4e 	bl	1f924 <WsfMsgFree>
}
    e288:	bf00      	nop
    e28a:	b004      	add	sp, #16
    e28c:	bd10      	pop	{r4, pc}
    e28e:	bf00      	nop
    e290:	100041d4 	.word	0x100041d4
    e294:	10004170 	.word	0x10004170
    e298:	10004230 	.word	0x10004230

0000e29c <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
    e29c:	b508      	push	{r3, lr}
  hciCmdInit();
    e29e:	f7fe fd03 	bl	cca8 <hciCmdInit>
}
    e2a2:	bf00      	nop
    e2a4:	bd08      	pop	{r3, pc}
	...

0000e2a8 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
    e2a8:	b500      	push	{lr}
    e2aa:	b087      	sub	sp, #28
    e2ac:	9001      	str	r0, [sp, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
    e2ae:	2300      	movs	r3, #0
    e2b0:	f88d 3016 	strb.w	r3, [sp, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
    e2b4:	9b01      	ldr	r3, [sp, #4]
    e2b6:	1c5a      	adds	r2, r3, #1
    e2b8:	9201      	str	r2, [sp, #4]
    e2ba:	781b      	ldrb	r3, [r3, #0]
    e2bc:	f88d 3017 	strb.w	r3, [sp, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
    e2c0:	e055      	b.n	e36e <hciCoreNumCmplPkts+0xc6>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
    e2c2:	9b01      	ldr	r3, [sp, #4]
    e2c4:	781b      	ldrb	r3, [r3, #0]
    e2c6:	b29a      	uxth	r2, r3
    e2c8:	9b01      	ldr	r3, [sp, #4]
    e2ca:	3301      	adds	r3, #1
    e2cc:	781b      	ldrb	r3, [r3, #0]
    e2ce:	b29b      	uxth	r3, r3
    e2d0:	021b      	lsls	r3, r3, #8
    e2d2:	b29b      	uxth	r3, r3
    e2d4:	4413      	add	r3, r2
    e2d6:	f8ad 3014 	strh.w	r3, [sp, #20]
    e2da:	9b01      	ldr	r3, [sp, #4]
    e2dc:	3302      	adds	r3, #2
    e2de:	9301      	str	r3, [sp, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
    e2e0:	9b01      	ldr	r3, [sp, #4]
    e2e2:	781b      	ldrb	r3, [r3, #0]
    e2e4:	b29a      	uxth	r2, r3
    e2e6:	9b01      	ldr	r3, [sp, #4]
    e2e8:	3301      	adds	r3, #1
    e2ea:	781b      	ldrb	r3, [r3, #0]
    e2ec:	b29b      	uxth	r3, r3
    e2ee:	021b      	lsls	r3, r3, #8
    e2f0:	b29b      	uxth	r3, r3
    e2f2:	4413      	add	r3, r2
    e2f4:	f8ad 3012 	strh.w	r3, [sp, #18]
    e2f8:	9b01      	ldr	r3, [sp, #4]
    e2fa:	3302      	adds	r3, #2
    e2fc:	9301      	str	r3, [sp, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
    e2fe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e302:	4618      	mov	r0, r3
    e304:	f7ff fbd8 	bl	dab8 <hciCoreConnByHandle>
    e308:	9003      	str	r0, [sp, #12]
    e30a:	9b03      	ldr	r3, [sp, #12]
    e30c:	2b00      	cmp	r3, #0
    e30e:	d02e      	beq.n	e36e <hciCoreNumCmplPkts+0xc6>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
    e310:	9b03      	ldr	r3, [sp, #12]
    e312:	7e5a      	ldrb	r2, [r3, #25]
    e314:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e318:	b2db      	uxtb	r3, r3
    e31a:	1ad3      	subs	r3, r2, r3
    e31c:	b2da      	uxtb	r2, r3
    e31e:	9b03      	ldr	r3, [sp, #12]
    e320:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
    e322:	9b03      	ldr	r3, [sp, #12]
    e324:	7e1a      	ldrb	r2, [r3, #24]
    e326:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e32a:	b2db      	uxtb	r3, r3
    e32c:	1ad3      	subs	r3, r2, r3
    e32e:	b2da      	uxtb	r2, r3
    e330:	9b03      	ldr	r3, [sp, #12]
    e332:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
    e334:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e338:	b2da      	uxtb	r2, r3
    e33a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e33e:	4413      	add	r3, r2
    e340:	f88d 3016 	strb.w	r3, [sp, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
    e344:	9b03      	ldr	r3, [sp, #12]
    e346:	7ddb      	ldrb	r3, [r3, #23]
    e348:	2b00      	cmp	r3, #0
    e34a:	d010      	beq.n	e36e <hciCoreNumCmplPkts+0xc6>
    e34c:	9b03      	ldr	r3, [sp, #12]
    e34e:	7e1a      	ldrb	r2, [r3, #24]
    e350:	4b0f      	ldr	r3, [pc, #60]	; (e390 <hciCoreNumCmplPkts+0xe8>)
    e352:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    e356:	429a      	cmp	r2, r3
    e358:	d809      	bhi.n	e36e <hciCoreNumCmplPkts+0xc6>
      {
        pConn->flowDisabled = FALSE;
    e35a:	9b03      	ldr	r3, [sp, #12]
    e35c:	2200      	movs	r2, #0
    e35e:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
    e360:	4b0c      	ldr	r3, [pc, #48]	; (e394 <hciCoreNumCmplPkts+0xec>)
    e362:	695b      	ldr	r3, [r3, #20]
    e364:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e368:	2100      	movs	r1, #0
    e36a:	4610      	mov	r0, r2
    e36c:	4798      	blx	r3
  while (numHandles-- > 0)
    e36e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e372:	1e5a      	subs	r2, r3, #1
    e374:	f88d 2017 	strb.w	r2, [sp, #23]
    e378:	2b00      	cmp	r3, #0
    e37a:	d1a2      	bne.n	e2c2 <hciCoreNumCmplPkts+0x1a>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
    e37c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e380:	4618      	mov	r0, r3
    e382:	f7ff fc21 	bl	dbc8 <hciCoreTxReady>
}
    e386:	bf00      	nop
    e388:	b007      	add	sp, #28
    e38a:	f85d fb04 	ldr.w	pc, [sp], #4
    e38e:	bf00      	nop
    e390:	10004170 	.word	0x10004170
    e394:	10004230 	.word	0x10004230

0000e398 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
    e398:	b500      	push	{lr}
    e39a:	b083      	sub	sp, #12
    e39c:	4603      	mov	r3, r0
    e39e:	9100      	str	r1, [sp, #0]
    e3a0:	f88d 3007 	strb.w	r3, [sp, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
    e3a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3a8:	9a00      	ldr	r2, [sp, #0]
    e3aa:	4619      	mov	r1, r3
    e3ac:	4806      	ldr	r0, [pc, #24]	; (e3c8 <hciCoreRecv+0x30>)
    e3ae:	f011 fae0 	bl	1f972 <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
    e3b2:	4b05      	ldr	r3, [pc, #20]	; (e3c8 <hciCoreRecv+0x30>)
    e3b4:	7e1b      	ldrb	r3, [r3, #24]
    e3b6:	2101      	movs	r1, #1
    e3b8:	4618      	mov	r0, r3
    e3ba:	f011 fb7b 	bl	1fab4 <WsfSetEvent>
}
    e3be:	bf00      	nop
    e3c0:	b003      	add	sp, #12
    e3c2:	f85d fb04 	ldr.w	pc, [sp], #4
    e3c6:	bf00      	nop
    e3c8:	10004230 	.word	0x10004230

0000e3cc <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    e3cc:	b500      	push	{lr}
    e3ce:	b085      	sub	sp, #20
    e3d0:	4603      	mov	r3, r0
    e3d2:	9100      	str	r1, [sp, #0]
    e3d4:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
    e3d8:	9b00      	ldr	r3, [sp, #0]
    e3da:	2b00      	cmp	r3, #0
    e3dc:	d007      	beq.n	e3ee <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
    e3de:	9b00      	ldr	r3, [sp, #0]
    e3e0:	789b      	ldrb	r3, [r3, #2]
    e3e2:	2b01      	cmp	r3, #1
    e3e4:	d131      	bne.n	e44a <HciCoreHandler+0x7e>
    {
      hciCmdTimeout(pMsg);
    e3e6:	9800      	ldr	r0, [sp, #0]
    e3e8:	f7fe fc74 	bl	ccd4 <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
    e3ec:	e02d      	b.n	e44a <HciCoreHandler+0x7e>
  else if (event & HCI_EVT_RX)
    e3ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3f2:	f003 0301 	and.w	r3, r3, #1
    e3f6:	2b00      	cmp	r3, #0
    e3f8:	d027      	beq.n	e44a <HciCoreHandler+0x7e>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    e3fa:	e01c      	b.n	e436 <HciCoreHandler+0x6a>
      if (handlerId == HCI_EVT_TYPE)
    e3fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e400:	2b04      	cmp	r3, #4
    e402:	d10d      	bne.n	e420 <HciCoreHandler+0x54>
        hciEvtProcessMsg(pBuf);
    e404:	9803      	ldr	r0, [sp, #12]
    e406:	f001 fe97 	bl	10138 <hciEvtProcessMsg>
        if (hciCb.resetting)
    e40a:	4b12      	ldr	r3, [pc, #72]	; (e454 <HciCoreHandler+0x88>)
    e40c:	7e5b      	ldrb	r3, [r3, #25]
    e40e:	2b00      	cmp	r3, #0
    e410:	d002      	beq.n	e418 <HciCoreHandler+0x4c>
          hciCoreResetSequence(pBuf);
    e412:	9803      	ldr	r0, [sp, #12]
    e414:	f012 ff80 	bl	21318 <hciCoreResetSequence>
        WsfMsgFree(pBuf);
    e418:	9803      	ldr	r0, [sp, #12]
    e41a:	f011 fa83 	bl	1f924 <WsfMsgFree>
    e41e:	e00a      	b.n	e436 <HciCoreHandler+0x6a>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
    e420:	9803      	ldr	r0, [sp, #12]
    e422:	f7ff fd11 	bl	de48 <hciCoreAclReassembly>
    e426:	9003      	str	r0, [sp, #12]
    e428:	9b03      	ldr	r3, [sp, #12]
    e42a:	2b00      	cmp	r3, #0
    e42c:	d003      	beq.n	e436 <HciCoreHandler+0x6a>
          hciCb.aclCback(pBuf);
    e42e:	4b09      	ldr	r3, [pc, #36]	; (e454 <HciCoreHandler+0x88>)
    e430:	691b      	ldr	r3, [r3, #16]
    e432:	9803      	ldr	r0, [sp, #12]
    e434:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
    e436:	f10d 030b 	add.w	r3, sp, #11
    e43a:	4619      	mov	r1, r3
    e43c:	4805      	ldr	r0, [pc, #20]	; (e454 <HciCoreHandler+0x88>)
    e43e:	f011 faae 	bl	1f99e <WsfMsgDeq>
    e442:	9003      	str	r0, [sp, #12]
    e444:	9b03      	ldr	r3, [sp, #12]
    e446:	2b00      	cmp	r3, #0
    e448:	d1d8      	bne.n	e3fc <HciCoreHandler+0x30>
}
    e44a:	bf00      	nop
    e44c:	b005      	add	sp, #20
    e44e:	f85d fb04 	ldr.w	pc, [sp], #4
    e452:	bf00      	nop
    e454:	10004230 	.word	0x10004230

0000e458 <HciGetBdAddr>:
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
  return hciCoreCb.bdAddr;
    e458:	4b01      	ldr	r3, [pc, #4]	; (e460 <HciGetBdAddr+0x8>)
}
    e45a:	4618      	mov	r0, r3
    e45c:	4770      	bx	lr
    e45e:	bf00      	nop
    e460:	100041cc 	.word	0x100041cc

0000e464 <HciGetBufSize>:
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
  return hciCoreCb.bufSize;
    e464:	4b02      	ldr	r3, [pc, #8]	; (e470 <HciGetBufSize+0xc>)
    e466:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
}
    e46a:	4618      	mov	r0, r3
    e46c:	4770      	bx	lr
    e46e:	bf00      	nop
    e470:	10004170 	.word	0x10004170

0000e474 <HciGetLeSupFeat>:
/*************************************************************************************************/
uint32_t HciGetLeSupFeat(void)
{
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
    e474:	4b02      	ldr	r3, [pc, #8]	; (e480 <HciGetLeSupFeat+0xc>)
    e476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e478:	f023 0302 	bic.w	r3, r3, #2
}
    e47c:	4618      	mov	r0, r3
    e47e:	4770      	bx	lr
    e480:	10004170 	.word	0x10004170

0000e484 <HciGetMaxRxAclLen>:
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
  return hciCoreCb.maxRxAclLen;
    e484:	4b02      	ldr	r3, [pc, #8]	; (e490 <HciGetMaxRxAclLen+0xc>)
    e486:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
}
    e48a:	4618      	mov	r0, r3
    e48c:	4770      	bx	lr
    e48e:	bf00      	nop
    e490:	10004170 	.word	0x10004170

0000e494 <HciLlPrivacySupported>:
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
    e494:	4b04      	ldr	r3, [pc, #16]	; (e4a8 <HciLlPrivacySupported+0x14>)
    e496:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    e49a:	2b00      	cmp	r3, #0
    e49c:	bf14      	ite	ne
    e49e:	2301      	movne	r3, #1
    e4a0:	2300      	moveq	r3, #0
    e4a2:	b2db      	uxtb	r3, r3
}
    e4a4:	4618      	mov	r0, r3
    e4a6:	4770      	bx	lr
    e4a8:	10004170 	.word	0x10004170

0000e4ac <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e4ac:	b500      	push	{lr}
    e4ae:	b085      	sub	sp, #20
    e4b0:	9003      	str	r0, [sp, #12]
    e4b2:	9102      	str	r1, [sp, #8]
    e4b4:	4613      	mov	r3, r2
    e4b6:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
    e4ba:	9b02      	ldr	r3, [sp, #8]
    e4bc:	1c5a      	adds	r2, r3, #1
    e4be:	9202      	str	r2, [sp, #8]
    e4c0:	781a      	ldrb	r2, [r3, #0]
    e4c2:	9b03      	ldr	r3, [sp, #12]
    e4c4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    e4c6:	9b02      	ldr	r3, [sp, #8]
    e4c8:	781b      	ldrb	r3, [r3, #0]
    e4ca:	b29a      	uxth	r2, r3
    e4cc:	9b02      	ldr	r3, [sp, #8]
    e4ce:	3301      	adds	r3, #1
    e4d0:	781b      	ldrb	r3, [r3, #0]
    e4d2:	b29b      	uxth	r3, r3
    e4d4:	021b      	lsls	r3, r3, #8
    e4d6:	b29b      	uxth	r3, r3
    e4d8:	4413      	add	r3, r2
    e4da:	b29a      	uxth	r2, r3
    e4dc:	9b03      	ldr	r3, [sp, #12]
    e4de:	80da      	strh	r2, [r3, #6]
    e4e0:	9b02      	ldr	r3, [sp, #8]
    e4e2:	3302      	adds	r3, #2
    e4e4:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
    e4e6:	9b02      	ldr	r3, [sp, #8]
    e4e8:	1c5a      	adds	r2, r3, #1
    e4ea:	9202      	str	r2, [sp, #8]
    e4ec:	781a      	ldrb	r2, [r3, #0]
    e4ee:	9b03      	ldr	r3, [sp, #12]
    e4f0:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
    e4f2:	9b02      	ldr	r3, [sp, #8]
    e4f4:	1c5a      	adds	r2, r3, #1
    e4f6:	9202      	str	r2, [sp, #8]
    e4f8:	781a      	ldrb	r2, [r3, #0]
    e4fa:	9b03      	ldr	r3, [sp, #12]
    e4fc:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
    e4fe:	9b03      	ldr	r3, [sp, #12]
    e500:	330a      	adds	r3, #10
    e502:	9902      	ldr	r1, [sp, #8]
    e504:	4618      	mov	r0, r3
    e506:	f7fd fe95 	bl	c234 <BdaCpy>
    e50a:	9b02      	ldr	r3, [sp, #8]
    e50c:	3306      	adds	r3, #6
    e50e:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
    e510:	9b02      	ldr	r3, [sp, #8]
    e512:	781b      	ldrb	r3, [r3, #0]
    e514:	b29a      	uxth	r2, r3
    e516:	9b02      	ldr	r3, [sp, #8]
    e518:	3301      	adds	r3, #1
    e51a:	781b      	ldrb	r3, [r3, #0]
    e51c:	b29b      	uxth	r3, r3
    e51e:	021b      	lsls	r3, r3, #8
    e520:	b29b      	uxth	r3, r3
    e522:	4413      	add	r3, r2
    e524:	b29a      	uxth	r2, r3
    e526:	9b03      	ldr	r3, [sp, #12]
    e528:	821a      	strh	r2, [r3, #16]
    e52a:	9b02      	ldr	r3, [sp, #8]
    e52c:	3302      	adds	r3, #2
    e52e:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
    e530:	9b02      	ldr	r3, [sp, #8]
    e532:	781b      	ldrb	r3, [r3, #0]
    e534:	b29a      	uxth	r2, r3
    e536:	9b02      	ldr	r3, [sp, #8]
    e538:	3301      	adds	r3, #1
    e53a:	781b      	ldrb	r3, [r3, #0]
    e53c:	b29b      	uxth	r3, r3
    e53e:	021b      	lsls	r3, r3, #8
    e540:	b29b      	uxth	r3, r3
    e542:	4413      	add	r3, r2
    e544:	b29a      	uxth	r2, r3
    e546:	9b03      	ldr	r3, [sp, #12]
    e548:	825a      	strh	r2, [r3, #18]
    e54a:	9b02      	ldr	r3, [sp, #8]
    e54c:	3302      	adds	r3, #2
    e54e:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
    e550:	9b02      	ldr	r3, [sp, #8]
    e552:	781b      	ldrb	r3, [r3, #0]
    e554:	b29a      	uxth	r2, r3
    e556:	9b02      	ldr	r3, [sp, #8]
    e558:	3301      	adds	r3, #1
    e55a:	781b      	ldrb	r3, [r3, #0]
    e55c:	b29b      	uxth	r3, r3
    e55e:	021b      	lsls	r3, r3, #8
    e560:	b29b      	uxth	r3, r3
    e562:	4413      	add	r3, r2
    e564:	b29a      	uxth	r2, r3
    e566:	9b03      	ldr	r3, [sp, #12]
    e568:	829a      	strh	r2, [r3, #20]
    e56a:	9b02      	ldr	r3, [sp, #8]
    e56c:	3302      	adds	r3, #2
    e56e:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    e570:	9b02      	ldr	r3, [sp, #8]
    e572:	1c5a      	adds	r2, r3, #1
    e574:	9202      	str	r2, [sp, #8]
    e576:	781a      	ldrb	r2, [r3, #0]
    e578:	9b03      	ldr	r3, [sp, #12]
    e57a:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
    e57c:	9b03      	ldr	r3, [sp, #12]
    e57e:	3317      	adds	r3, #23
    e580:	2206      	movs	r2, #6
    e582:	2100      	movs	r1, #0
    e584:	4618      	mov	r0, r3
    e586:	f017 f899 	bl	256bc <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
    e58a:	9b03      	ldr	r3, [sp, #12]
    e58c:	331d      	adds	r3, #29
    e58e:	2206      	movs	r2, #6
    e590:	2100      	movs	r1, #0
    e592:	4618      	mov	r0, r3
    e594:	f017 f892 	bl	256bc <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    e598:	9b03      	ldr	r3, [sp, #12]
    e59a:	88da      	ldrh	r2, [r3, #6]
    e59c:	9b03      	ldr	r3, [sp, #12]
    e59e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    e5a0:	9b03      	ldr	r3, [sp, #12]
    e5a2:	791a      	ldrb	r2, [r3, #4]
    e5a4:	9b03      	ldr	r3, [sp, #12]
    e5a6:	70da      	strb	r2, [r3, #3]
}
    e5a8:	bf00      	nop
    e5aa:	b005      	add	sp, #20
    e5ac:	f85d fb04 	ldr.w	pc, [sp], #4

0000e5b0 <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e5b0:	b500      	push	{lr}
    e5b2:	b085      	sub	sp, #20
    e5b4:	9003      	str	r0, [sp, #12]
    e5b6:	9102      	str	r1, [sp, #8]
    e5b8:	4613      	mov	r3, r2
    e5ba:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
    e5be:	9b02      	ldr	r3, [sp, #8]
    e5c0:	1c5a      	adds	r2, r3, #1
    e5c2:	9202      	str	r2, [sp, #8]
    e5c4:	781a      	ldrb	r2, [r3, #0]
    e5c6:	9b03      	ldr	r3, [sp, #12]
    e5c8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
    e5ca:	9b02      	ldr	r3, [sp, #8]
    e5cc:	781b      	ldrb	r3, [r3, #0]
    e5ce:	b29a      	uxth	r2, r3
    e5d0:	9b02      	ldr	r3, [sp, #8]
    e5d2:	3301      	adds	r3, #1
    e5d4:	781b      	ldrb	r3, [r3, #0]
    e5d6:	b29b      	uxth	r3, r3
    e5d8:	021b      	lsls	r3, r3, #8
    e5da:	b29b      	uxth	r3, r3
    e5dc:	4413      	add	r3, r2
    e5de:	b29a      	uxth	r2, r3
    e5e0:	9b03      	ldr	r3, [sp, #12]
    e5e2:	80da      	strh	r2, [r3, #6]
    e5e4:	9b02      	ldr	r3, [sp, #8]
    e5e6:	3302      	adds	r3, #2
    e5e8:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
    e5ea:	9b02      	ldr	r3, [sp, #8]
    e5ec:	1c5a      	adds	r2, r3, #1
    e5ee:	9202      	str	r2, [sp, #8]
    e5f0:	781a      	ldrb	r2, [r3, #0]
    e5f2:	9b03      	ldr	r3, [sp, #12]
    e5f4:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
    e5f6:	9b02      	ldr	r3, [sp, #8]
    e5f8:	1c5a      	adds	r2, r3, #1
    e5fa:	9202      	str	r2, [sp, #8]
    e5fc:	781a      	ldrb	r2, [r3, #0]
    e5fe:	9b03      	ldr	r3, [sp, #12]
    e600:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
    e602:	9b03      	ldr	r3, [sp, #12]
    e604:	330a      	adds	r3, #10
    e606:	9902      	ldr	r1, [sp, #8]
    e608:	4618      	mov	r0, r3
    e60a:	f7fd fe13 	bl	c234 <BdaCpy>
    e60e:	9b02      	ldr	r3, [sp, #8]
    e610:	3306      	adds	r3, #6
    e612:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
    e614:	9b03      	ldr	r3, [sp, #12]
    e616:	3317      	adds	r3, #23
    e618:	9902      	ldr	r1, [sp, #8]
    e61a:	4618      	mov	r0, r3
    e61c:	f7fd fe0a 	bl	c234 <BdaCpy>
    e620:	9b02      	ldr	r3, [sp, #8]
    e622:	3306      	adds	r3, #6
    e624:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
    e626:	9b03      	ldr	r3, [sp, #12]
    e628:	331d      	adds	r3, #29
    e62a:	9902      	ldr	r1, [sp, #8]
    e62c:	4618      	mov	r0, r3
    e62e:	f7fd fe01 	bl	c234 <BdaCpy>
    e632:	9b02      	ldr	r3, [sp, #8]
    e634:	3306      	adds	r3, #6
    e636:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
    e638:	9b02      	ldr	r3, [sp, #8]
    e63a:	781b      	ldrb	r3, [r3, #0]
    e63c:	b29a      	uxth	r2, r3
    e63e:	9b02      	ldr	r3, [sp, #8]
    e640:	3301      	adds	r3, #1
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	b29b      	uxth	r3, r3
    e646:	021b      	lsls	r3, r3, #8
    e648:	b29b      	uxth	r3, r3
    e64a:	4413      	add	r3, r2
    e64c:	b29a      	uxth	r2, r3
    e64e:	9b03      	ldr	r3, [sp, #12]
    e650:	821a      	strh	r2, [r3, #16]
    e652:	9b02      	ldr	r3, [sp, #8]
    e654:	3302      	adds	r3, #2
    e656:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
    e658:	9b02      	ldr	r3, [sp, #8]
    e65a:	781b      	ldrb	r3, [r3, #0]
    e65c:	b29a      	uxth	r2, r3
    e65e:	9b02      	ldr	r3, [sp, #8]
    e660:	3301      	adds	r3, #1
    e662:	781b      	ldrb	r3, [r3, #0]
    e664:	b29b      	uxth	r3, r3
    e666:	021b      	lsls	r3, r3, #8
    e668:	b29b      	uxth	r3, r3
    e66a:	4413      	add	r3, r2
    e66c:	b29a      	uxth	r2, r3
    e66e:	9b03      	ldr	r3, [sp, #12]
    e670:	825a      	strh	r2, [r3, #18]
    e672:	9b02      	ldr	r3, [sp, #8]
    e674:	3302      	adds	r3, #2
    e676:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
    e678:	9b02      	ldr	r3, [sp, #8]
    e67a:	781b      	ldrb	r3, [r3, #0]
    e67c:	b29a      	uxth	r2, r3
    e67e:	9b02      	ldr	r3, [sp, #8]
    e680:	3301      	adds	r3, #1
    e682:	781b      	ldrb	r3, [r3, #0]
    e684:	b29b      	uxth	r3, r3
    e686:	021b      	lsls	r3, r3, #8
    e688:	b29b      	uxth	r3, r3
    e68a:	4413      	add	r3, r2
    e68c:	b29a      	uxth	r2, r3
    e68e:	9b03      	ldr	r3, [sp, #12]
    e690:	829a      	strh	r2, [r3, #20]
    e692:	9b02      	ldr	r3, [sp, #8]
    e694:	3302      	adds	r3, #2
    e696:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
    e698:	9b02      	ldr	r3, [sp, #8]
    e69a:	1c5a      	adds	r2, r3, #1
    e69c:	9202      	str	r2, [sp, #8]
    e69e:	781a      	ldrb	r2, [r3, #0]
    e6a0:	9b03      	ldr	r3, [sp, #12]
    e6a2:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
    e6a4:	9b03      	ldr	r3, [sp, #12]
    e6a6:	88da      	ldrh	r2, [r3, #6]
    e6a8:	9b03      	ldr	r3, [sp, #12]
    e6aa:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
    e6ac:	9b03      	ldr	r3, [sp, #12]
    e6ae:	791a      	ldrb	r2, [r3, #4]
    e6b0:	9b03      	ldr	r3, [sp, #12]
    e6b2:	70da      	strb	r2, [r3, #3]
}
    e6b4:	bf00      	nop
    e6b6:	b005      	add	sp, #20
    e6b8:	f85d fb04 	ldr.w	pc, [sp], #4

0000e6bc <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e6bc:	b084      	sub	sp, #16
    e6be:	9003      	str	r0, [sp, #12]
    e6c0:	9102      	str	r1, [sp, #8]
    e6c2:	4613      	mov	r3, r2
    e6c4:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
    e6c8:	9b02      	ldr	r3, [sp, #8]
    e6ca:	1c5a      	adds	r2, r3, #1
    e6cc:	9202      	str	r2, [sp, #8]
    e6ce:	781a      	ldrb	r2, [r3, #0]
    e6d0:	9b03      	ldr	r3, [sp, #12]
    e6d2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
    e6d4:	9b02      	ldr	r3, [sp, #8]
    e6d6:	781b      	ldrb	r3, [r3, #0]
    e6d8:	b29a      	uxth	r2, r3
    e6da:	9b02      	ldr	r3, [sp, #8]
    e6dc:	3301      	adds	r3, #1
    e6de:	781b      	ldrb	r3, [r3, #0]
    e6e0:	b29b      	uxth	r3, r3
    e6e2:	021b      	lsls	r3, r3, #8
    e6e4:	b29b      	uxth	r3, r3
    e6e6:	4413      	add	r3, r2
    e6e8:	b29a      	uxth	r2, r3
    e6ea:	9b03      	ldr	r3, [sp, #12]
    e6ec:	80da      	strh	r2, [r3, #6]
    e6ee:	9b02      	ldr	r3, [sp, #8]
    e6f0:	3302      	adds	r3, #2
    e6f2:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
    e6f4:	9b02      	ldr	r3, [sp, #8]
    e6f6:	1c5a      	adds	r2, r3, #1
    e6f8:	9202      	str	r2, [sp, #8]
    e6fa:	781a      	ldrb	r2, [r3, #0]
    e6fc:	9b03      	ldr	r3, [sp, #12]
    e6fe:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
    e700:	9b03      	ldr	r3, [sp, #12]
    e702:	88da      	ldrh	r2, [r3, #6]
    e704:	9b03      	ldr	r3, [sp, #12]
    e706:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
    e708:	9b03      	ldr	r3, [sp, #12]
    e70a:	791a      	ldrb	r2, [r3, #4]
    e70c:	9b03      	ldr	r3, [sp, #12]
    e70e:	70da      	strb	r2, [r3, #3]
}
    e710:	bf00      	nop
    e712:	b004      	add	sp, #16
    e714:	4770      	bx	lr

0000e716 <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e716:	b084      	sub	sp, #16
    e718:	9003      	str	r0, [sp, #12]
    e71a:	9102      	str	r1, [sp, #8]
    e71c:	4613      	mov	r3, r2
    e71e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
    e722:	9b02      	ldr	r3, [sp, #8]
    e724:	1c5a      	adds	r2, r3, #1
    e726:	9202      	str	r2, [sp, #8]
    e728:	781a      	ldrb	r2, [r3, #0]
    e72a:	9b03      	ldr	r3, [sp, #12]
    e72c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
    e72e:	9b02      	ldr	r3, [sp, #8]
    e730:	781b      	ldrb	r3, [r3, #0]
    e732:	b29a      	uxth	r2, r3
    e734:	9b02      	ldr	r3, [sp, #8]
    e736:	3301      	adds	r3, #1
    e738:	781b      	ldrb	r3, [r3, #0]
    e73a:	b29b      	uxth	r3, r3
    e73c:	021b      	lsls	r3, r3, #8
    e73e:	b29b      	uxth	r3, r3
    e740:	4413      	add	r3, r2
    e742:	b29a      	uxth	r2, r3
    e744:	9b03      	ldr	r3, [sp, #12]
    e746:	80da      	strh	r2, [r3, #6]
    e748:	9b02      	ldr	r3, [sp, #8]
    e74a:	3302      	adds	r3, #2
    e74c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
    e74e:	9b02      	ldr	r3, [sp, #8]
    e750:	781b      	ldrb	r3, [r3, #0]
    e752:	b29a      	uxth	r2, r3
    e754:	9b02      	ldr	r3, [sp, #8]
    e756:	3301      	adds	r3, #1
    e758:	781b      	ldrb	r3, [r3, #0]
    e75a:	b29b      	uxth	r3, r3
    e75c:	021b      	lsls	r3, r3, #8
    e75e:	b29b      	uxth	r3, r3
    e760:	4413      	add	r3, r2
    e762:	b29a      	uxth	r2, r3
    e764:	9b03      	ldr	r3, [sp, #12]
    e766:	811a      	strh	r2, [r3, #8]
    e768:	9b02      	ldr	r3, [sp, #8]
    e76a:	3302      	adds	r3, #2
    e76c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
    e76e:	9b02      	ldr	r3, [sp, #8]
    e770:	781b      	ldrb	r3, [r3, #0]
    e772:	b29a      	uxth	r2, r3
    e774:	9b02      	ldr	r3, [sp, #8]
    e776:	3301      	adds	r3, #1
    e778:	781b      	ldrb	r3, [r3, #0]
    e77a:	b29b      	uxth	r3, r3
    e77c:	021b      	lsls	r3, r3, #8
    e77e:	b29b      	uxth	r3, r3
    e780:	4413      	add	r3, r2
    e782:	b29a      	uxth	r2, r3
    e784:	9b03      	ldr	r3, [sp, #12]
    e786:	815a      	strh	r2, [r3, #10]
    e788:	9b02      	ldr	r3, [sp, #8]
    e78a:	3302      	adds	r3, #2
    e78c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
    e78e:	9b02      	ldr	r3, [sp, #8]
    e790:	781b      	ldrb	r3, [r3, #0]
    e792:	b29a      	uxth	r2, r3
    e794:	9b02      	ldr	r3, [sp, #8]
    e796:	3301      	adds	r3, #1
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	b29b      	uxth	r3, r3
    e79c:	021b      	lsls	r3, r3, #8
    e79e:	b29b      	uxth	r3, r3
    e7a0:	4413      	add	r3, r2
    e7a2:	b29a      	uxth	r2, r3
    e7a4:	9b03      	ldr	r3, [sp, #12]
    e7a6:	819a      	strh	r2, [r3, #12]
    e7a8:	9b02      	ldr	r3, [sp, #8]
    e7aa:	3302      	adds	r3, #2
    e7ac:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
    e7ae:	9b03      	ldr	r3, [sp, #12]
    e7b0:	88da      	ldrh	r2, [r3, #6]
    e7b2:	9b03      	ldr	r3, [sp, #12]
    e7b4:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
    e7b6:	9b03      	ldr	r3, [sp, #12]
    e7b8:	791a      	ldrb	r2, [r3, #4]
    e7ba:	9b03      	ldr	r3, [sp, #12]
    e7bc:	70da      	strb	r2, [r3, #3]
}
    e7be:	bf00      	nop
    e7c0:	b004      	add	sp, #16
    e7c2:	4770      	bx	lr

0000e7c4 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e7c4:	b084      	sub	sp, #16
    e7c6:	9003      	str	r0, [sp, #12]
    e7c8:	9102      	str	r1, [sp, #8]
    e7ca:	4613      	mov	r3, r2
    e7cc:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
    e7d0:	9b02      	ldr	r3, [sp, #8]
    e7d2:	1c5a      	adds	r2, r3, #1
    e7d4:	9202      	str	r2, [sp, #8]
    e7d6:	781a      	ldrb	r2, [r3, #0]
    e7d8:	9b03      	ldr	r3, [sp, #12]
    e7da:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
    e7dc:	9b03      	ldr	r3, [sp, #12]
    e7de:	791a      	ldrb	r2, [r3, #4]
    e7e0:	9b03      	ldr	r3, [sp, #12]
    e7e2:	70da      	strb	r2, [r3, #3]
}
    e7e4:	bf00      	nop
    e7e6:	b004      	add	sp, #16
    e7e8:	4770      	bx	lr

0000e7ea <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e7ea:	b084      	sub	sp, #16
    e7ec:	9003      	str	r0, [sp, #12]
    e7ee:	9102      	str	r1, [sp, #8]
    e7f0:	4613      	mov	r3, r2
    e7f2:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
    e7f6:	9b02      	ldr	r3, [sp, #8]
    e7f8:	1c5a      	adds	r2, r3, #1
    e7fa:	9202      	str	r2, [sp, #8]
    e7fc:	781a      	ldrb	r2, [r3, #0]
    e7fe:	9b03      	ldr	r3, [sp, #12]
    e800:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
    e802:	9b02      	ldr	r3, [sp, #8]
    e804:	781b      	ldrb	r3, [r3, #0]
    e806:	b29a      	uxth	r2, r3
    e808:	9b02      	ldr	r3, [sp, #8]
    e80a:	3301      	adds	r3, #1
    e80c:	781b      	ldrb	r3, [r3, #0]
    e80e:	b29b      	uxth	r3, r3
    e810:	021b      	lsls	r3, r3, #8
    e812:	b29b      	uxth	r3, r3
    e814:	4413      	add	r3, r2
    e816:	b29a      	uxth	r2, r3
    e818:	9b03      	ldr	r3, [sp, #12]
    e81a:	80da      	strh	r2, [r3, #6]
    e81c:	9b02      	ldr	r3, [sp, #8]
    e81e:	3302      	adds	r3, #2
    e820:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
    e822:	9b02      	ldr	r3, [sp, #8]
    e824:	1c5a      	adds	r2, r3, #1
    e826:	9202      	str	r2, [sp, #8]
    e828:	781b      	ldrb	r3, [r3, #0]
    e82a:	b25a      	sxtb	r2, r3
    e82c:	9b03      	ldr	r3, [sp, #12]
    e82e:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
    e830:	9b03      	ldr	r3, [sp, #12]
    e832:	88da      	ldrh	r2, [r3, #6]
    e834:	9b03      	ldr	r3, [sp, #12]
    e836:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
    e838:	9b03      	ldr	r3, [sp, #12]
    e83a:	791a      	ldrb	r2, [r3, #4]
    e83c:	9b03      	ldr	r3, [sp, #12]
    e83e:	70da      	strb	r2, [r3, #3]
}
    e840:	bf00      	nop
    e842:	b004      	add	sp, #16
    e844:	4770      	bx	lr

0000e846 <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e846:	b500      	push	{lr}
    e848:	b085      	sub	sp, #20
    e84a:	9003      	str	r0, [sp, #12]
    e84c:	9102      	str	r1, [sp, #8]
    e84e:	4613      	mov	r3, r2
    e850:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
    e854:	9b02      	ldr	r3, [sp, #8]
    e856:	1c5a      	adds	r2, r3, #1
    e858:	9202      	str	r2, [sp, #8]
    e85a:	781a      	ldrb	r2, [r3, #0]
    e85c:	9b03      	ldr	r3, [sp, #12]
    e85e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
    e860:	9b02      	ldr	r3, [sp, #8]
    e862:	781b      	ldrb	r3, [r3, #0]
    e864:	b29a      	uxth	r2, r3
    e866:	9b02      	ldr	r3, [sp, #8]
    e868:	3301      	adds	r3, #1
    e86a:	781b      	ldrb	r3, [r3, #0]
    e86c:	b29b      	uxth	r3, r3
    e86e:	021b      	lsls	r3, r3, #8
    e870:	b29b      	uxth	r3, r3
    e872:	4413      	add	r3, r2
    e874:	b29a      	uxth	r2, r3
    e876:	9b03      	ldr	r3, [sp, #12]
    e878:	80da      	strh	r2, [r3, #6]
    e87a:	9b02      	ldr	r3, [sp, #8]
    e87c:	3302      	adds	r3, #2
    e87e:	9302      	str	r3, [sp, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
    e880:	9b03      	ldr	r3, [sp, #12]
    e882:	3308      	adds	r3, #8
    e884:	2205      	movs	r2, #5
    e886:	9902      	ldr	r1, [sp, #8]
    e888:	4618      	mov	r0, r3
    e88a:	f7fd fc39 	bl	c100 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
    e88e:	9b03      	ldr	r3, [sp, #12]
    e890:	88da      	ldrh	r2, [r3, #6]
    e892:	9b03      	ldr	r3, [sp, #12]
    e894:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
    e896:	9b03      	ldr	r3, [sp, #12]
    e898:	791a      	ldrb	r2, [r3, #4]
    e89a:	9b03      	ldr	r3, [sp, #12]
    e89c:	70da      	strb	r2, [r3, #3]
}
    e89e:	bf00      	nop
    e8a0:	b005      	add	sp, #20
    e8a2:	f85d fb04 	ldr.w	pc, [sp], #4

0000e8a6 <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e8a6:	b084      	sub	sp, #16
    e8a8:	9003      	str	r0, [sp, #12]
    e8aa:	9102      	str	r1, [sp, #8]
    e8ac:	4613      	mov	r3, r2
    e8ae:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
    e8b2:	9b02      	ldr	r3, [sp, #8]
    e8b4:	1c5a      	adds	r2, r3, #1
    e8b6:	9202      	str	r2, [sp, #8]
    e8b8:	781a      	ldrb	r2, [r3, #0]
    e8ba:	9b03      	ldr	r3, [sp, #12]
    e8bc:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
    e8be:	9b02      	ldr	r3, [sp, #8]
    e8c0:	781a      	ldrb	r2, [r3, #0]
    e8c2:	9b03      	ldr	r3, [sp, #12]
    e8c4:	715a      	strb	r2, [r3, #5]
    e8c6:	9b02      	ldr	r3, [sp, #8]
    e8c8:	3302      	adds	r3, #2
    e8ca:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
    e8cc:	9b02      	ldr	r3, [sp, #8]
    e8ce:	1c5a      	adds	r2, r3, #1
    e8d0:	9202      	str	r2, [sp, #8]
    e8d2:	781b      	ldrb	r3, [r3, #0]
    e8d4:	b25a      	sxtb	r2, r3
    e8d6:	9b03      	ldr	r3, [sp, #12]
    e8d8:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
    e8da:	9b03      	ldr	r3, [sp, #12]
    e8dc:	795b      	ldrb	r3, [r3, #5]
    e8de:	b29a      	uxth	r2, r3
    e8e0:	9b03      	ldr	r3, [sp, #12]
    e8e2:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
    e8e4:	9b03      	ldr	r3, [sp, #12]
    e8e6:	791a      	ldrb	r2, [r3, #4]
    e8e8:	9b03      	ldr	r3, [sp, #12]
    e8ea:	70da      	strb	r2, [r3, #3]
}
    e8ec:	bf00      	nop
    e8ee:	b004      	add	sp, #16
    e8f0:	4770      	bx	lr

0000e8f2 <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e8f2:	b084      	sub	sp, #16
    e8f4:	9003      	str	r0, [sp, #12]
    e8f6:	9102      	str	r1, [sp, #8]
    e8f8:	4613      	mov	r3, r2
    e8fa:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
    e8fe:	9b02      	ldr	r3, [sp, #8]
    e900:	1c5a      	adds	r2, r3, #1
    e902:	9202      	str	r2, [sp, #8]
    e904:	781a      	ldrb	r2, [r3, #0]
    e906:	9b03      	ldr	r3, [sp, #12]
    e908:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
    e90a:	9b02      	ldr	r3, [sp, #8]
    e90c:	781b      	ldrb	r3, [r3, #0]
    e90e:	b29a      	uxth	r2, r3
    e910:	9b02      	ldr	r3, [sp, #8]
    e912:	3301      	adds	r3, #1
    e914:	781b      	ldrb	r3, [r3, #0]
    e916:	b29b      	uxth	r3, r3
    e918:	021b      	lsls	r3, r3, #8
    e91a:	b29b      	uxth	r3, r3
    e91c:	4413      	add	r3, r2
    e91e:	b29a      	uxth	r2, r3
    e920:	9b03      	ldr	r3, [sp, #12]
    e922:	80da      	strh	r2, [r3, #6]
    e924:	9b02      	ldr	r3, [sp, #8]
    e926:	3302      	adds	r3, #2
    e928:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
    e92a:	9b02      	ldr	r3, [sp, #8]
    e92c:	1c5a      	adds	r2, r3, #1
    e92e:	9202      	str	r2, [sp, #8]
    e930:	781a      	ldrb	r2, [r3, #0]
    e932:	9b03      	ldr	r3, [sp, #12]
    e934:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
    e936:	9b02      	ldr	r3, [sp, #8]
    e938:	781b      	ldrb	r3, [r3, #0]
    e93a:	b29a      	uxth	r2, r3
    e93c:	9b02      	ldr	r3, [sp, #8]
    e93e:	3301      	adds	r3, #1
    e940:	781b      	ldrb	r3, [r3, #0]
    e942:	b29b      	uxth	r3, r3
    e944:	021b      	lsls	r3, r3, #8
    e946:	b29b      	uxth	r3, r3
    e948:	4413      	add	r3, r2
    e94a:	b29a      	uxth	r2, r3
    e94c:	9b03      	ldr	r3, [sp, #12]
    e94e:	815a      	strh	r2, [r3, #10]
    e950:	9b02      	ldr	r3, [sp, #8]
    e952:	3302      	adds	r3, #2
    e954:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
    e956:	9b02      	ldr	r3, [sp, #8]
    e958:	781b      	ldrb	r3, [r3, #0]
    e95a:	b29a      	uxth	r2, r3
    e95c:	9b02      	ldr	r3, [sp, #8]
    e95e:	3301      	adds	r3, #1
    e960:	781b      	ldrb	r3, [r3, #0]
    e962:	b29b      	uxth	r3, r3
    e964:	021b      	lsls	r3, r3, #8
    e966:	b29b      	uxth	r3, r3
    e968:	4413      	add	r3, r2
    e96a:	b29a      	uxth	r2, r3
    e96c:	9b03      	ldr	r3, [sp, #12]
    e96e:	819a      	strh	r2, [r3, #12]
    e970:	9b02      	ldr	r3, [sp, #8]
    e972:	3302      	adds	r3, #2
    e974:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
    e976:	9b03      	ldr	r3, [sp, #12]
    e978:	88da      	ldrh	r2, [r3, #6]
    e97a:	9b03      	ldr	r3, [sp, #12]
    e97c:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
    e97e:	9b03      	ldr	r3, [sp, #12]
    e980:	791a      	ldrb	r2, [r3, #4]
    e982:	9b03      	ldr	r3, [sp, #12]
    e984:	70da      	strb	r2, [r3, #3]
}
    e986:	bf00      	nop
    e988:	b004      	add	sp, #16
    e98a:	4770      	bx	lr

0000e98c <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e98c:	b500      	push	{lr}
    e98e:	b085      	sub	sp, #20
    e990:	9003      	str	r0, [sp, #12]
    e992:	9102      	str	r1, [sp, #8]
    e994:	4613      	mov	r3, r2
    e996:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
    e99a:	9b02      	ldr	r3, [sp, #8]
    e99c:	1c5a      	adds	r2, r3, #1
    e99e:	9202      	str	r2, [sp, #8]
    e9a0:	781a      	ldrb	r2, [r3, #0]
    e9a2:	9b03      	ldr	r3, [sp, #12]
    e9a4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
    e9a6:	9b02      	ldr	r3, [sp, #8]
    e9a8:	781b      	ldrb	r3, [r3, #0]
    e9aa:	b29a      	uxth	r2, r3
    e9ac:	9b02      	ldr	r3, [sp, #8]
    e9ae:	3301      	adds	r3, #1
    e9b0:	781b      	ldrb	r3, [r3, #0]
    e9b2:	b29b      	uxth	r3, r3
    e9b4:	021b      	lsls	r3, r3, #8
    e9b6:	b29b      	uxth	r3, r3
    e9b8:	4413      	add	r3, r2
    e9ba:	b29a      	uxth	r2, r3
    e9bc:	9b03      	ldr	r3, [sp, #12]
    e9be:	80da      	strh	r2, [r3, #6]
    e9c0:	9b02      	ldr	r3, [sp, #8]
    e9c2:	3302      	adds	r3, #2
    e9c4:	9302      	str	r3, [sp, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
    e9c6:	9b03      	ldr	r3, [sp, #12]
    e9c8:	3308      	adds	r3, #8
    e9ca:	2208      	movs	r2, #8
    e9cc:	9902      	ldr	r1, [sp, #8]
    e9ce:	4618      	mov	r0, r3
    e9d0:	f7fd fb96 	bl	c100 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
    e9d4:	9b03      	ldr	r3, [sp, #12]
    e9d6:	88da      	ldrh	r2, [r3, #6]
    e9d8:	9b03      	ldr	r3, [sp, #12]
    e9da:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
    e9dc:	9b03      	ldr	r3, [sp, #12]
    e9de:	791a      	ldrb	r2, [r3, #4]
    e9e0:	9b03      	ldr	r3, [sp, #12]
    e9e2:	70da      	strb	r2, [r3, #3]
}
    e9e4:	bf00      	nop
    e9e6:	b005      	add	sp, #20
    e9e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000e9ec <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    e9ec:	b084      	sub	sp, #16
    e9ee:	9003      	str	r0, [sp, #12]
    e9f0:	9102      	str	r1, [sp, #8]
    e9f2:	4613      	mov	r3, r2
    e9f4:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
    e9f8:	9b02      	ldr	r3, [sp, #8]
    e9fa:	1c5a      	adds	r2, r3, #1
    e9fc:	9202      	str	r2, [sp, #8]
    e9fe:	781a      	ldrb	r2, [r3, #0]
    ea00:	9b03      	ldr	r3, [sp, #12]
    ea02:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
    ea04:	9b02      	ldr	r3, [sp, #8]
    ea06:	781b      	ldrb	r3, [r3, #0]
    ea08:	b29a      	uxth	r2, r3
    ea0a:	9b02      	ldr	r3, [sp, #8]
    ea0c:	3301      	adds	r3, #1
    ea0e:	781b      	ldrb	r3, [r3, #0]
    ea10:	b29b      	uxth	r3, r3
    ea12:	021b      	lsls	r3, r3, #8
    ea14:	b29b      	uxth	r3, r3
    ea16:	4413      	add	r3, r2
    ea18:	b29a      	uxth	r2, r3
    ea1a:	9b03      	ldr	r3, [sp, #12]
    ea1c:	80da      	strh	r2, [r3, #6]
    ea1e:	9b02      	ldr	r3, [sp, #8]
    ea20:	3302      	adds	r3, #2
    ea22:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
    ea24:	9b03      	ldr	r3, [sp, #12]
    ea26:	88da      	ldrh	r2, [r3, #6]
    ea28:	9b03      	ldr	r3, [sp, #12]
    ea2a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
    ea2c:	9b03      	ldr	r3, [sp, #12]
    ea2e:	791a      	ldrb	r2, [r3, #4]
    ea30:	9b03      	ldr	r3, [sp, #12]
    ea32:	70da      	strb	r2, [r3, #3]
}
    ea34:	bf00      	nop
    ea36:	b004      	add	sp, #16
    ea38:	4770      	bx	lr

0000ea3a <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ea3a:	b084      	sub	sp, #16
    ea3c:	9003      	str	r0, [sp, #12]
    ea3e:	9102      	str	r1, [sp, #8]
    ea40:	4613      	mov	r3, r2
    ea42:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
    ea46:	9b02      	ldr	r3, [sp, #8]
    ea48:	1c5a      	adds	r2, r3, #1
    ea4a:	9202      	str	r2, [sp, #8]
    ea4c:	781a      	ldrb	r2, [r3, #0]
    ea4e:	9b03      	ldr	r3, [sp, #12]
    ea50:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
    ea52:	9b02      	ldr	r3, [sp, #8]
    ea54:	781b      	ldrb	r3, [r3, #0]
    ea56:	b29a      	uxth	r2, r3
    ea58:	9b02      	ldr	r3, [sp, #8]
    ea5a:	3301      	adds	r3, #1
    ea5c:	781b      	ldrb	r3, [r3, #0]
    ea5e:	b29b      	uxth	r3, r3
    ea60:	021b      	lsls	r3, r3, #8
    ea62:	b29b      	uxth	r3, r3
    ea64:	4413      	add	r3, r2
    ea66:	b29a      	uxth	r2, r3
    ea68:	9b03      	ldr	r3, [sp, #12]
    ea6a:	80da      	strh	r2, [r3, #6]
    ea6c:	9b02      	ldr	r3, [sp, #8]
    ea6e:	3302      	adds	r3, #2
    ea70:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
    ea72:	9b03      	ldr	r3, [sp, #12]
    ea74:	88da      	ldrh	r2, [r3, #6]
    ea76:	9b03      	ldr	r3, [sp, #12]
    ea78:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
    ea7a:	9b03      	ldr	r3, [sp, #12]
    ea7c:	791a      	ldrb	r2, [r3, #4]
    ea7e:	9b03      	ldr	r3, [sp, #12]
    ea80:	70da      	strb	r2, [r3, #3]
}
    ea82:	bf00      	nop
    ea84:	b004      	add	sp, #16
    ea86:	4770      	bx	lr

0000ea88 <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ea88:	b084      	sub	sp, #16
    ea8a:	9003      	str	r0, [sp, #12]
    ea8c:	9102      	str	r1, [sp, #8]
    ea8e:	4613      	mov	r3, r2
    ea90:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
    ea94:	9b02      	ldr	r3, [sp, #8]
    ea96:	1c5a      	adds	r2, r3, #1
    ea98:	9202      	str	r2, [sp, #8]
    ea9a:	781a      	ldrb	r2, [r3, #0]
    ea9c:	9b03      	ldr	r3, [sp, #12]
    ea9e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
    eaa0:	9b02      	ldr	r3, [sp, #8]
    eaa2:	781b      	ldrb	r3, [r3, #0]
    eaa4:	b29a      	uxth	r2, r3
    eaa6:	9b02      	ldr	r3, [sp, #8]
    eaa8:	3301      	adds	r3, #1
    eaaa:	781b      	ldrb	r3, [r3, #0]
    eaac:	b29b      	uxth	r3, r3
    eaae:	021b      	lsls	r3, r3, #8
    eab0:	b29b      	uxth	r3, r3
    eab2:	4413      	add	r3, r2
    eab4:	b29a      	uxth	r2, r3
    eab6:	9b03      	ldr	r3, [sp, #12]
    eab8:	80da      	strh	r2, [r3, #6]
    eaba:	9b02      	ldr	r3, [sp, #8]
    eabc:	3302      	adds	r3, #2
    eabe:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
    eac0:	9b03      	ldr	r3, [sp, #12]
    eac2:	88da      	ldrh	r2, [r3, #6]
    eac4:	9b03      	ldr	r3, [sp, #12]
    eac6:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
    eac8:	9b03      	ldr	r3, [sp, #12]
    eaca:	791a      	ldrb	r2, [r3, #4]
    eacc:	9b03      	ldr	r3, [sp, #12]
    eace:	70da      	strb	r2, [r3, #3]
}
    ead0:	bf00      	nop
    ead2:	b004      	add	sp, #16
    ead4:	4770      	bx	lr

0000ead6 <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ead6:	b084      	sub	sp, #16
    ead8:	9003      	str	r0, [sp, #12]
    eada:	9102      	str	r1, [sp, #8]
    eadc:	4613      	mov	r3, r2
    eade:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
    eae2:	9b02      	ldr	r3, [sp, #8]
    eae4:	1c5a      	adds	r2, r3, #1
    eae6:	9202      	str	r2, [sp, #8]
    eae8:	781a      	ldrb	r2, [r3, #0]
    eaea:	9b03      	ldr	r3, [sp, #12]
    eaec:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
    eaee:	9b02      	ldr	r3, [sp, #8]
    eaf0:	781b      	ldrb	r3, [r3, #0]
    eaf2:	b29a      	uxth	r2, r3
    eaf4:	9b02      	ldr	r3, [sp, #8]
    eaf6:	3301      	adds	r3, #1
    eaf8:	781b      	ldrb	r3, [r3, #0]
    eafa:	b29b      	uxth	r3, r3
    eafc:	021b      	lsls	r3, r3, #8
    eafe:	b29b      	uxth	r3, r3
    eb00:	4413      	add	r3, r2
    eb02:	b29a      	uxth	r2, r3
    eb04:	9b03      	ldr	r3, [sp, #12]
    eb06:	80da      	strh	r2, [r3, #6]
    eb08:	9b02      	ldr	r3, [sp, #8]
    eb0a:	3302      	adds	r3, #2
    eb0c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
    eb0e:	9b02      	ldr	r3, [sp, #8]
    eb10:	1c5a      	adds	r2, r3, #1
    eb12:	9202      	str	r2, [sp, #8]
    eb14:	781a      	ldrb	r2, [r3, #0]
    eb16:	9b03      	ldr	r3, [sp, #12]
    eb18:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
    eb1a:	9b03      	ldr	r3, [sp, #12]
    eb1c:	88da      	ldrh	r2, [r3, #6]
    eb1e:	9b03      	ldr	r3, [sp, #12]
    eb20:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
    eb22:	9b03      	ldr	r3, [sp, #12]
    eb24:	791a      	ldrb	r2, [r3, #4]
    eb26:	9b03      	ldr	r3, [sp, #12]
    eb28:	70da      	strb	r2, [r3, #3]
}
    eb2a:	bf00      	nop
    eb2c:	b004      	add	sp, #16
    eb2e:	4770      	bx	lr

0000eb30 <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    eb30:	b500      	push	{lr}
    eb32:	b085      	sub	sp, #20
    eb34:	9003      	str	r0, [sp, #12]
    eb36:	9102      	str	r1, [sp, #8]
    eb38:	4613      	mov	r3, r2
    eb3a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
    eb3e:	9b02      	ldr	r3, [sp, #8]
    eb40:	781b      	ldrb	r3, [r3, #0]
    eb42:	b29a      	uxth	r2, r3
    eb44:	9b02      	ldr	r3, [sp, #8]
    eb46:	3301      	adds	r3, #1
    eb48:	781b      	ldrb	r3, [r3, #0]
    eb4a:	b29b      	uxth	r3, r3
    eb4c:	021b      	lsls	r3, r3, #8
    eb4e:	b29b      	uxth	r3, r3
    eb50:	4413      	add	r3, r2
    eb52:	b29a      	uxth	r2, r3
    eb54:	9b03      	ldr	r3, [sp, #12]
    eb56:	809a      	strh	r2, [r3, #4]
    eb58:	9b02      	ldr	r3, [sp, #8]
    eb5a:	3302      	adds	r3, #2
    eb5c:	9302      	str	r3, [sp, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
    eb5e:	9b03      	ldr	r3, [sp, #12]
    eb60:	3306      	adds	r3, #6
    eb62:	2208      	movs	r2, #8
    eb64:	9902      	ldr	r1, [sp, #8]
    eb66:	4618      	mov	r0, r3
    eb68:	f7fd faca 	bl	c100 <memcpy>
  p += HCI_RAND_LEN;
    eb6c:	9b02      	ldr	r3, [sp, #8]
    eb6e:	3308      	adds	r3, #8
    eb70:	9302      	str	r3, [sp, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
    eb72:	9b02      	ldr	r3, [sp, #8]
    eb74:	781b      	ldrb	r3, [r3, #0]
    eb76:	b29a      	uxth	r2, r3
    eb78:	9b02      	ldr	r3, [sp, #8]
    eb7a:	3301      	adds	r3, #1
    eb7c:	781b      	ldrb	r3, [r3, #0]
    eb7e:	b29b      	uxth	r3, r3
    eb80:	021b      	lsls	r3, r3, #8
    eb82:	b29b      	uxth	r3, r3
    eb84:	4413      	add	r3, r2
    eb86:	b29a      	uxth	r2, r3
    eb88:	9b03      	ldr	r3, [sp, #12]
    eb8a:	81da      	strh	r2, [r3, #14]
    eb8c:	9b02      	ldr	r3, [sp, #8]
    eb8e:	3302      	adds	r3, #2
    eb90:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
    eb92:	9b03      	ldr	r3, [sp, #12]
    eb94:	889a      	ldrh	r2, [r3, #4]
    eb96:	9b03      	ldr	r3, [sp, #12]
    eb98:	801a      	strh	r2, [r3, #0]
}
    eb9a:	bf00      	nop
    eb9c:	b005      	add	sp, #20
    eb9e:	f85d fb04 	ldr.w	pc, [sp], #4

0000eba2 <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    eba2:	b084      	sub	sp, #16
    eba4:	9003      	str	r0, [sp, #12]
    eba6:	9102      	str	r1, [sp, #8]
    eba8:	4613      	mov	r3, r2
    ebaa:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
    ebae:	9b02      	ldr	r3, [sp, #8]
    ebb0:	781b      	ldrb	r3, [r3, #0]
    ebb2:	b29a      	uxth	r2, r3
    ebb4:	9b02      	ldr	r3, [sp, #8]
    ebb6:	3301      	adds	r3, #1
    ebb8:	781b      	ldrb	r3, [r3, #0]
    ebba:	b29b      	uxth	r3, r3
    ebbc:	021b      	lsls	r3, r3, #8
    ebbe:	b29b      	uxth	r3, r3
    ebc0:	4413      	add	r3, r2
    ebc2:	b29a      	uxth	r2, r3
    ebc4:	9b03      	ldr	r3, [sp, #12]
    ebc6:	809a      	strh	r2, [r3, #4]
    ebc8:	9b02      	ldr	r3, [sp, #8]
    ebca:	3302      	adds	r3, #2
    ebcc:	9302      	str	r3, [sp, #8]
}
    ebce:	bf00      	nop
    ebd0:	b004      	add	sp, #16
    ebd2:	4770      	bx	lr

0000ebd4 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ebd4:	b500      	push	{lr}
    ebd6:	b085      	sub	sp, #20
    ebd8:	9003      	str	r0, [sp, #12]
    ebda:	9102      	str	r1, [sp, #8]
    ebdc:	4613      	mov	r3, r2
    ebde:	f88d 3007 	strb.w	r3, [sp, #7]
  /* roll pointer back to opcode */
  p -= 2;
    ebe2:	9b02      	ldr	r3, [sp, #8]
    ebe4:	3b02      	subs	r3, #2
    ebe6:	9302      	str	r3, [sp, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
    ebe8:	9b02      	ldr	r3, [sp, #8]
    ebea:	781b      	ldrb	r3, [r3, #0]
    ebec:	b29a      	uxth	r2, r3
    ebee:	9b02      	ldr	r3, [sp, #8]
    ebf0:	3301      	adds	r3, #1
    ebf2:	781b      	ldrb	r3, [r3, #0]
    ebf4:	b29b      	uxth	r3, r3
    ebf6:	021b      	lsls	r3, r3, #8
    ebf8:	b29b      	uxth	r3, r3
    ebfa:	4413      	add	r3, r2
    ebfc:	b29a      	uxth	r2, r3
    ebfe:	9b03      	ldr	r3, [sp, #12]
    ec00:	809a      	strh	r2, [r3, #4]
    ec02:	9b02      	ldr	r3, [sp, #8]
    ec04:	3302      	adds	r3, #2
    ec06:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
    ec08:	9b02      	ldr	r3, [sp, #8]
    ec0a:	1c5a      	adds	r2, r3, #1
    ec0c:	9202      	str	r2, [sp, #8]
    ec0e:	781a      	ldrb	r2, [r3, #0]
    ec10:	9b03      	ldr	r3, [sp, #12]
    ec12:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
    ec14:	9b03      	ldr	r3, [sp, #12]
    ec16:	1d98      	adds	r0, r3, #6
    ec18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec1c:	3b04      	subs	r3, #4
    ec1e:	461a      	mov	r2, r3
    ec20:	9902      	ldr	r1, [sp, #8]
    ec22:	f7fd fa6d 	bl	c100 <memcpy>
}
    ec26:	bf00      	nop
    ec28:	b005      	add	sp, #20
    ec2a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ec2e <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ec2e:	b500      	push	{lr}
    ec30:	b085      	sub	sp, #20
    ec32:	9003      	str	r0, [sp, #12]
    ec34:	9102      	str	r1, [sp, #8]
    ec36:	4613      	mov	r3, r2
    ec38:	f88d 3007 	strb.w	r3, [sp, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
    ec3c:	9b03      	ldr	r3, [sp, #12]
    ec3e:	3304      	adds	r3, #4
    ec40:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ec44:	9902      	ldr	r1, [sp, #8]
    ec46:	4618      	mov	r0, r3
    ec48:	f7fd fa5a 	bl	c100 <memcpy>
}
    ec4c:	bf00      	nop
    ec4e:	b005      	add	sp, #20
    ec50:	f85d fb04 	ldr.w	pc, [sp], #4

0000ec54 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ec54:	b084      	sub	sp, #16
    ec56:	9003      	str	r0, [sp, #12]
    ec58:	9102      	str	r1, [sp, #8]
    ec5a:	4613      	mov	r3, r2
    ec5c:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
    ec60:	9b02      	ldr	r3, [sp, #8]
    ec62:	1c5a      	adds	r2, r3, #1
    ec64:	9202      	str	r2, [sp, #8]
    ec66:	781a      	ldrb	r2, [r3, #0]
    ec68:	9b03      	ldr	r3, [sp, #12]
    ec6a:	711a      	strb	r2, [r3, #4]
}
    ec6c:	bf00      	nop
    ec6e:	b004      	add	sp, #16
    ec70:	4770      	bx	lr

0000ec72 <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ec72:	b500      	push	{lr}
    ec74:	b085      	sub	sp, #20
    ec76:	9003      	str	r0, [sp, #12]
    ec78:	9102      	str	r1, [sp, #8]
    ec7a:	4613      	mov	r3, r2
    ec7c:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
    ec80:	9b02      	ldr	r3, [sp, #8]
    ec82:	1c5a      	adds	r2, r3, #1
    ec84:	9202      	str	r2, [sp, #8]
    ec86:	781a      	ldrb	r2, [r3, #0]
    ec88:	9b03      	ldr	r3, [sp, #12]
    ec8a:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
    ec8c:	9b03      	ldr	r3, [sp, #12]
    ec8e:	3305      	adds	r3, #5
    ec90:	2210      	movs	r2, #16
    ec92:	9902      	ldr	r1, [sp, #8]
    ec94:	4618      	mov	r0, r3
    ec96:	f7fd fa33 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
    ec9a:	9b03      	ldr	r3, [sp, #12]
    ec9c:	791a      	ldrb	r2, [r3, #4]
    ec9e:	9b03      	ldr	r3, [sp, #12]
    eca0:	70da      	strb	r2, [r3, #3]
}
    eca2:	bf00      	nop
    eca4:	b005      	add	sp, #20
    eca6:	f85d fb04 	ldr.w	pc, [sp], #4

0000ecaa <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ecaa:	b500      	push	{lr}
    ecac:	b085      	sub	sp, #20
    ecae:	9003      	str	r0, [sp, #12]
    ecb0:	9102      	str	r1, [sp, #8]
    ecb2:	4613      	mov	r3, r2
    ecb4:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
    ecb8:	9b02      	ldr	r3, [sp, #8]
    ecba:	1c5a      	adds	r2, r3, #1
    ecbc:	9202      	str	r2, [sp, #8]
    ecbe:	781a      	ldrb	r2, [r3, #0]
    ecc0:	9b03      	ldr	r3, [sp, #12]
    ecc2:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
    ecc4:	9b03      	ldr	r3, [sp, #12]
    ecc6:	3305      	adds	r3, #5
    ecc8:	2208      	movs	r2, #8
    ecca:	9902      	ldr	r1, [sp, #8]
    eccc:	4618      	mov	r0, r3
    ecce:	f7fd fa17 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
    ecd2:	9b03      	ldr	r3, [sp, #12]
    ecd4:	791a      	ldrb	r2, [r3, #4]
    ecd6:	9b03      	ldr	r3, [sp, #12]
    ecd8:	70da      	strb	r2, [r3, #3]
}
    ecda:	bf00      	nop
    ecdc:	b005      	add	sp, #20
    ecde:	f85d fb04 	ldr.w	pc, [sp], #4

0000ece2 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ece2:	b084      	sub	sp, #16
    ece4:	9003      	str	r0, [sp, #12]
    ece6:	9102      	str	r1, [sp, #8]
    ece8:	4613      	mov	r3, r2
    ecea:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
    ecee:	9b02      	ldr	r3, [sp, #8]
    ecf0:	1c5a      	adds	r2, r3, #1
    ecf2:	9202      	str	r2, [sp, #8]
    ecf4:	781a      	ldrb	r2, [r3, #0]
    ecf6:	9b03      	ldr	r3, [sp, #12]
    ecf8:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
    ecfa:	9b03      	ldr	r3, [sp, #12]
    ecfc:	791a      	ldrb	r2, [r3, #4]
    ecfe:	9b03      	ldr	r3, [sp, #12]
    ed00:	70da      	strb	r2, [r3, #3]
}
    ed02:	bf00      	nop
    ed04:	b004      	add	sp, #16
    ed06:	4770      	bx	lr

0000ed08 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ed08:	b084      	sub	sp, #16
    ed0a:	9003      	str	r0, [sp, #12]
    ed0c:	9102      	str	r1, [sp, #8]
    ed0e:	4613      	mov	r3, r2
    ed10:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
    ed14:	9b02      	ldr	r3, [sp, #8]
    ed16:	1c5a      	adds	r2, r3, #1
    ed18:	9202      	str	r2, [sp, #8]
    ed1a:	781a      	ldrb	r2, [r3, #0]
    ed1c:	9b03      	ldr	r3, [sp, #12]
    ed1e:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
    ed20:	9b03      	ldr	r3, [sp, #12]
    ed22:	791a      	ldrb	r2, [r3, #4]
    ed24:	9b03      	ldr	r3, [sp, #12]
    ed26:	70da      	strb	r2, [r3, #3]
}
    ed28:	bf00      	nop
    ed2a:	b004      	add	sp, #16
    ed2c:	4770      	bx	lr

0000ed2e <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ed2e:	b084      	sub	sp, #16
    ed30:	9003      	str	r0, [sp, #12]
    ed32:	9102      	str	r1, [sp, #8]
    ed34:	4613      	mov	r3, r2
    ed36:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
    ed3a:	9b02      	ldr	r3, [sp, #8]
    ed3c:	1c5a      	adds	r2, r3, #1
    ed3e:	9202      	str	r2, [sp, #8]
    ed40:	781a      	ldrb	r2, [r3, #0]
    ed42:	9b03      	ldr	r3, [sp, #12]
    ed44:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
    ed46:	9b03      	ldr	r3, [sp, #12]
    ed48:	791a      	ldrb	r2, [r3, #4]
    ed4a:	9b03      	ldr	r3, [sp, #12]
    ed4c:	70da      	strb	r2, [r3, #3]
}
    ed4e:	bf00      	nop
    ed50:	b004      	add	sp, #16
    ed52:	4770      	bx	lr

0000ed54 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ed54:	b500      	push	{lr}
    ed56:	b085      	sub	sp, #20
    ed58:	9003      	str	r0, [sp, #12]
    ed5a:	9102      	str	r1, [sp, #8]
    ed5c:	4613      	mov	r3, r2
    ed5e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
    ed62:	9b02      	ldr	r3, [sp, #8]
    ed64:	1c5a      	adds	r2, r3, #1
    ed66:	9202      	str	r2, [sp, #8]
    ed68:	781a      	ldrb	r2, [r3, #0]
    ed6a:	9b03      	ldr	r3, [sp, #12]
    ed6c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
    ed6e:	9b03      	ldr	r3, [sp, #12]
    ed70:	3305      	adds	r3, #5
    ed72:	9902      	ldr	r1, [sp, #8]
    ed74:	4618      	mov	r0, r3
    ed76:	f7fd fa5d 	bl	c234 <BdaCpy>
    ed7a:	9b02      	ldr	r3, [sp, #8]
    ed7c:	3306      	adds	r3, #6
    ed7e:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
    ed80:	9b03      	ldr	r3, [sp, #12]
    ed82:	791a      	ldrb	r2, [r3, #4]
    ed84:	9b03      	ldr	r3, [sp, #12]
    ed86:	70da      	strb	r2, [r3, #3]
}
    ed88:	bf00      	nop
    ed8a:	b005      	add	sp, #20
    ed8c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ed90 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ed90:	b500      	push	{lr}
    ed92:	b085      	sub	sp, #20
    ed94:	9003      	str	r0, [sp, #12]
    ed96:	9102      	str	r1, [sp, #8]
    ed98:	4613      	mov	r3, r2
    ed9a:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
    ed9e:	9b02      	ldr	r3, [sp, #8]
    eda0:	1c5a      	adds	r2, r3, #1
    eda2:	9202      	str	r2, [sp, #8]
    eda4:	781a      	ldrb	r2, [r3, #0]
    eda6:	9b03      	ldr	r3, [sp, #12]
    eda8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
    edaa:	9b03      	ldr	r3, [sp, #12]
    edac:	3305      	adds	r3, #5
    edae:	9902      	ldr	r1, [sp, #8]
    edb0:	4618      	mov	r0, r3
    edb2:	f7fd fa3f 	bl	c234 <BdaCpy>
    edb6:	9b02      	ldr	r3, [sp, #8]
    edb8:	3306      	adds	r3, #6
    edba:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
    edbc:	9b03      	ldr	r3, [sp, #12]
    edbe:	791a      	ldrb	r2, [r3, #4]
    edc0:	9b03      	ldr	r3, [sp, #12]
    edc2:	70da      	strb	r2, [r3, #3]
}
    edc4:	bf00      	nop
    edc6:	b005      	add	sp, #20
    edc8:	f85d fb04 	ldr.w	pc, [sp], #4

0000edcc <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    edcc:	b084      	sub	sp, #16
    edce:	9003      	str	r0, [sp, #12]
    edd0:	9102      	str	r1, [sp, #8]
    edd2:	4613      	mov	r3, r2
    edd4:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
    edd8:	9b02      	ldr	r3, [sp, #8]
    edda:	1c5a      	adds	r2, r3, #1
    eddc:	9202      	str	r2, [sp, #8]
    edde:	781a      	ldrb	r2, [r3, #0]
    ede0:	9b03      	ldr	r3, [sp, #12]
    ede2:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
    ede4:	9b03      	ldr	r3, [sp, #12]
    ede6:	791a      	ldrb	r2, [r3, #4]
    ede8:	9b03      	ldr	r3, [sp, #12]
    edea:	70da      	strb	r2, [r3, #3]
}
    edec:	bf00      	nop
    edee:	b004      	add	sp, #16
    edf0:	4770      	bx	lr

0000edf2 <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    edf2:	b084      	sub	sp, #16
    edf4:	9003      	str	r0, [sp, #12]
    edf6:	9102      	str	r1, [sp, #8]
    edf8:	4613      	mov	r3, r2
    edfa:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
    edfe:	9b02      	ldr	r3, [sp, #8]
    ee00:	1c5a      	adds	r2, r3, #1
    ee02:	9202      	str	r2, [sp, #8]
    ee04:	781a      	ldrb	r2, [r3, #0]
    ee06:	9b03      	ldr	r3, [sp, #12]
    ee08:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
    ee0a:	9b02      	ldr	r3, [sp, #8]
    ee0c:	781b      	ldrb	r3, [r3, #0]
    ee0e:	b29a      	uxth	r2, r3
    ee10:	9b02      	ldr	r3, [sp, #8]
    ee12:	3301      	adds	r3, #1
    ee14:	781b      	ldrb	r3, [r3, #0]
    ee16:	b29b      	uxth	r3, r3
    ee18:	021b      	lsls	r3, r3, #8
    ee1a:	b29b      	uxth	r3, r3
    ee1c:	4413      	add	r3, r2
    ee1e:	b29a      	uxth	r2, r3
    ee20:	9b03      	ldr	r3, [sp, #12]
    ee22:	80da      	strh	r2, [r3, #6]
    ee24:	9b02      	ldr	r3, [sp, #8]
    ee26:	3302      	adds	r3, #2
    ee28:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
    ee2a:	9b03      	ldr	r3, [sp, #12]
    ee2c:	791a      	ldrb	r2, [r3, #4]
    ee2e:	9b03      	ldr	r3, [sp, #12]
    ee30:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
    ee32:	9b03      	ldr	r3, [sp, #12]
    ee34:	88da      	ldrh	r2, [r3, #6]
    ee36:	9b03      	ldr	r3, [sp, #12]
    ee38:	801a      	strh	r2, [r3, #0]
}
    ee3a:	bf00      	nop
    ee3c:	b004      	add	sp, #16
    ee3e:	4770      	bx	lr

0000ee40 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ee40:	b084      	sub	sp, #16
    ee42:	9003      	str	r0, [sp, #12]
    ee44:	9102      	str	r1, [sp, #8]
    ee46:	4613      	mov	r3, r2
    ee48:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
    ee4c:	9b02      	ldr	r3, [sp, #8]
    ee4e:	1c5a      	adds	r2, r3, #1
    ee50:	9202      	str	r2, [sp, #8]
    ee52:	781a      	ldrb	r2, [r3, #0]
    ee54:	9b03      	ldr	r3, [sp, #12]
    ee56:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
    ee58:	9b02      	ldr	r3, [sp, #8]
    ee5a:	781b      	ldrb	r3, [r3, #0]
    ee5c:	b29a      	uxth	r2, r3
    ee5e:	9b02      	ldr	r3, [sp, #8]
    ee60:	3301      	adds	r3, #1
    ee62:	781b      	ldrb	r3, [r3, #0]
    ee64:	b29b      	uxth	r3, r3
    ee66:	021b      	lsls	r3, r3, #8
    ee68:	b29b      	uxth	r3, r3
    ee6a:	4413      	add	r3, r2
    ee6c:	b29a      	uxth	r2, r3
    ee6e:	9b03      	ldr	r3, [sp, #12]
    ee70:	80da      	strh	r2, [r3, #6]
    ee72:	9b02      	ldr	r3, [sp, #8]
    ee74:	3302      	adds	r3, #2
    ee76:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
    ee78:	9b03      	ldr	r3, [sp, #12]
    ee7a:	791a      	ldrb	r2, [r3, #4]
    ee7c:	9b03      	ldr	r3, [sp, #12]
    ee7e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
    ee80:	9b03      	ldr	r3, [sp, #12]
    ee82:	88da      	ldrh	r2, [r3, #6]
    ee84:	9b03      	ldr	r3, [sp, #12]
    ee86:	801a      	strh	r2, [r3, #0]
}
    ee88:	bf00      	nop
    ee8a:	b004      	add	sp, #16
    ee8c:	4770      	bx	lr

0000ee8e <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ee8e:	b084      	sub	sp, #16
    ee90:	9003      	str	r0, [sp, #12]
    ee92:	9102      	str	r1, [sp, #8]
    ee94:	4613      	mov	r3, r2
    ee96:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
    ee9a:	9b02      	ldr	r3, [sp, #8]
    ee9c:	1c5a      	adds	r2, r3, #1
    ee9e:	9202      	str	r2, [sp, #8]
    eea0:	781a      	ldrb	r2, [r3, #0]
    eea2:	9b03      	ldr	r3, [sp, #12]
    eea4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
    eea6:	9b02      	ldr	r3, [sp, #8]
    eea8:	781b      	ldrb	r3, [r3, #0]
    eeaa:	b29a      	uxth	r2, r3
    eeac:	9b02      	ldr	r3, [sp, #8]
    eeae:	3301      	adds	r3, #1
    eeb0:	781b      	ldrb	r3, [r3, #0]
    eeb2:	b29b      	uxth	r3, r3
    eeb4:	021b      	lsls	r3, r3, #8
    eeb6:	b29b      	uxth	r3, r3
    eeb8:	4413      	add	r3, r2
    eeba:	b29a      	uxth	r2, r3
    eebc:	9b03      	ldr	r3, [sp, #12]
    eebe:	80da      	strh	r2, [r3, #6]
    eec0:	9b02      	ldr	r3, [sp, #8]
    eec2:	3302      	adds	r3, #2
    eec4:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
    eec6:	9b02      	ldr	r3, [sp, #8]
    eec8:	781b      	ldrb	r3, [r3, #0]
    eeca:	b29a      	uxth	r2, r3
    eecc:	9b02      	ldr	r3, [sp, #8]
    eece:	3301      	adds	r3, #1
    eed0:	781b      	ldrb	r3, [r3, #0]
    eed2:	b29b      	uxth	r3, r3
    eed4:	021b      	lsls	r3, r3, #8
    eed6:	b29b      	uxth	r3, r3
    eed8:	4413      	add	r3, r2
    eeda:	b29a      	uxth	r2, r3
    eedc:	9b03      	ldr	r3, [sp, #12]
    eede:	811a      	strh	r2, [r3, #8]
    eee0:	9b02      	ldr	r3, [sp, #8]
    eee2:	3302      	adds	r3, #2
    eee4:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
    eee6:	9b03      	ldr	r3, [sp, #12]
    eee8:	791a      	ldrb	r2, [r3, #4]
    eeea:	9b03      	ldr	r3, [sp, #12]
    eeec:	70da      	strb	r2, [r3, #3]
}
    eeee:	bf00      	nop
    eef0:	b004      	add	sp, #16
    eef2:	4770      	bx	lr

0000eef4 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    eef4:	b084      	sub	sp, #16
    eef6:	9003      	str	r0, [sp, #12]
    eef8:	9102      	str	r1, [sp, #8]
    eefa:	4613      	mov	r3, r2
    eefc:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
    ef00:	9b02      	ldr	r3, [sp, #8]
    ef02:	1c5a      	adds	r2, r3, #1
    ef04:	9202      	str	r2, [sp, #8]
    ef06:	781a      	ldrb	r2, [r3, #0]
    ef08:	9b03      	ldr	r3, [sp, #12]
    ef0a:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
    ef0c:	9b03      	ldr	r3, [sp, #12]
    ef0e:	791a      	ldrb	r2, [r3, #4]
    ef10:	9b03      	ldr	r3, [sp, #12]
    ef12:	70da      	strb	r2, [r3, #3]
}
    ef14:	bf00      	nop
    ef16:	b004      	add	sp, #16
    ef18:	4770      	bx	lr

0000ef1a <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ef1a:	b084      	sub	sp, #16
    ef1c:	9003      	str	r0, [sp, #12]
    ef1e:	9102      	str	r1, [sp, #8]
    ef20:	4613      	mov	r3, r2
    ef22:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
    ef26:	9b02      	ldr	r3, [sp, #8]
    ef28:	1c5a      	adds	r2, r3, #1
    ef2a:	9202      	str	r2, [sp, #8]
    ef2c:	781a      	ldrb	r2, [r3, #0]
    ef2e:	9b03      	ldr	r3, [sp, #12]
    ef30:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
    ef32:	9b02      	ldr	r3, [sp, #8]
    ef34:	781b      	ldrb	r3, [r3, #0]
    ef36:	b29a      	uxth	r2, r3
    ef38:	9b02      	ldr	r3, [sp, #8]
    ef3a:	3301      	adds	r3, #1
    ef3c:	781b      	ldrb	r3, [r3, #0]
    ef3e:	b29b      	uxth	r3, r3
    ef40:	021b      	lsls	r3, r3, #8
    ef42:	b29b      	uxth	r3, r3
    ef44:	4413      	add	r3, r2
    ef46:	b29a      	uxth	r2, r3
    ef48:	9b03      	ldr	r3, [sp, #12]
    ef4a:	80da      	strh	r2, [r3, #6]
    ef4c:	9b02      	ldr	r3, [sp, #8]
    ef4e:	3302      	adds	r3, #2
    ef50:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
    ef52:	9b03      	ldr	r3, [sp, #12]
    ef54:	791a      	ldrb	r2, [r3, #4]
    ef56:	9b03      	ldr	r3, [sp, #12]
    ef58:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
    ef5a:	9b03      	ldr	r3, [sp, #12]
    ef5c:	88da      	ldrh	r2, [r3, #6]
    ef5e:	9b03      	ldr	r3, [sp, #12]
    ef60:	801a      	strh	r2, [r3, #0]
}
    ef62:	bf00      	nop
    ef64:	b004      	add	sp, #16
    ef66:	4770      	bx	lr

0000ef68 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    ef68:	b084      	sub	sp, #16
    ef6a:	9003      	str	r0, [sp, #12]
    ef6c:	9102      	str	r1, [sp, #8]
    ef6e:	4613      	mov	r3, r2
    ef70:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
    ef74:	9b02      	ldr	r3, [sp, #8]
    ef76:	1c5a      	adds	r2, r3, #1
    ef78:	9202      	str	r2, [sp, #8]
    ef7a:	781a      	ldrb	r2, [r3, #0]
    ef7c:	9b03      	ldr	r3, [sp, #12]
    ef7e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
    ef80:	9b02      	ldr	r3, [sp, #8]
    ef82:	781b      	ldrb	r3, [r3, #0]
    ef84:	b29a      	uxth	r2, r3
    ef86:	9b02      	ldr	r3, [sp, #8]
    ef88:	3301      	adds	r3, #1
    ef8a:	781b      	ldrb	r3, [r3, #0]
    ef8c:	b29b      	uxth	r3, r3
    ef8e:	021b      	lsls	r3, r3, #8
    ef90:	b29b      	uxth	r3, r3
    ef92:	4413      	add	r3, r2
    ef94:	b29a      	uxth	r2, r3
    ef96:	9b03      	ldr	r3, [sp, #12]
    ef98:	80da      	strh	r2, [r3, #6]
    ef9a:	9b02      	ldr	r3, [sp, #8]
    ef9c:	3302      	adds	r3, #2
    ef9e:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
    efa0:	9b02      	ldr	r3, [sp, #8]
    efa2:	781b      	ldrb	r3, [r3, #0]
    efa4:	b29a      	uxth	r2, r3
    efa6:	9b02      	ldr	r3, [sp, #8]
    efa8:	3301      	adds	r3, #1
    efaa:	781b      	ldrb	r3, [r3, #0]
    efac:	b29b      	uxth	r3, r3
    efae:	021b      	lsls	r3, r3, #8
    efb0:	b29b      	uxth	r3, r3
    efb2:	4413      	add	r3, r2
    efb4:	b29a      	uxth	r2, r3
    efb6:	9b03      	ldr	r3, [sp, #12]
    efb8:	811a      	strh	r2, [r3, #8]
    efba:	9b02      	ldr	r3, [sp, #8]
    efbc:	3302      	adds	r3, #2
    efbe:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
    efc0:	9b02      	ldr	r3, [sp, #8]
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	b29a      	uxth	r2, r3
    efc6:	9b02      	ldr	r3, [sp, #8]
    efc8:	3301      	adds	r3, #1
    efca:	781b      	ldrb	r3, [r3, #0]
    efcc:	b29b      	uxth	r3, r3
    efce:	021b      	lsls	r3, r3, #8
    efd0:	b29b      	uxth	r3, r3
    efd2:	4413      	add	r3, r2
    efd4:	b29a      	uxth	r2, r3
    efd6:	9b03      	ldr	r3, [sp, #12]
    efd8:	815a      	strh	r2, [r3, #10]
    efda:	9b02      	ldr	r3, [sp, #8]
    efdc:	3302      	adds	r3, #2
    efde:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
    efe0:	9b02      	ldr	r3, [sp, #8]
    efe2:	781b      	ldrb	r3, [r3, #0]
    efe4:	b29a      	uxth	r2, r3
    efe6:	9b02      	ldr	r3, [sp, #8]
    efe8:	3301      	adds	r3, #1
    efea:	781b      	ldrb	r3, [r3, #0]
    efec:	b29b      	uxth	r3, r3
    efee:	021b      	lsls	r3, r3, #8
    eff0:	b29b      	uxth	r3, r3
    eff2:	4413      	add	r3, r2
    eff4:	b29a      	uxth	r2, r3
    eff6:	9b03      	ldr	r3, [sp, #12]
    eff8:	819a      	strh	r2, [r3, #12]
    effa:	9b02      	ldr	r3, [sp, #8]
    effc:	3302      	adds	r3, #2
    effe:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
    f000:	9b03      	ldr	r3, [sp, #12]
    f002:	791a      	ldrb	r2, [r3, #4]
    f004:	9b03      	ldr	r3, [sp, #12]
    f006:	70da      	strb	r2, [r3, #3]
}
    f008:	bf00      	nop
    f00a:	b004      	add	sp, #16
    f00c:	4770      	bx	lr

0000f00e <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f00e:	b084      	sub	sp, #16
    f010:	9003      	str	r0, [sp, #12]
    f012:	9102      	str	r1, [sp, #8]
    f014:	4613      	mov	r3, r2
    f016:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
    f01a:	9b02      	ldr	r3, [sp, #8]
    f01c:	781b      	ldrb	r3, [r3, #0]
    f01e:	b29a      	uxth	r2, r3
    f020:	9b02      	ldr	r3, [sp, #8]
    f022:	3301      	adds	r3, #1
    f024:	781b      	ldrb	r3, [r3, #0]
    f026:	b29b      	uxth	r3, r3
    f028:	021b      	lsls	r3, r3, #8
    f02a:	b29b      	uxth	r3, r3
    f02c:	4413      	add	r3, r2
    f02e:	b29a      	uxth	r2, r3
    f030:	9b03      	ldr	r3, [sp, #12]
    f032:	809a      	strh	r2, [r3, #4]
    f034:	9b02      	ldr	r3, [sp, #8]
    f036:	3302      	adds	r3, #2
    f038:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
    f03a:	9b02      	ldr	r3, [sp, #8]
    f03c:	781b      	ldrb	r3, [r3, #0]
    f03e:	b29a      	uxth	r2, r3
    f040:	9b02      	ldr	r3, [sp, #8]
    f042:	3301      	adds	r3, #1
    f044:	781b      	ldrb	r3, [r3, #0]
    f046:	b29b      	uxth	r3, r3
    f048:	021b      	lsls	r3, r3, #8
    f04a:	b29b      	uxth	r3, r3
    f04c:	4413      	add	r3, r2
    f04e:	b29a      	uxth	r2, r3
    f050:	9b03      	ldr	r3, [sp, #12]
    f052:	80da      	strh	r2, [r3, #6]
    f054:	9b02      	ldr	r3, [sp, #8]
    f056:	3302      	adds	r3, #2
    f058:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
    f05a:	9b02      	ldr	r3, [sp, #8]
    f05c:	781b      	ldrb	r3, [r3, #0]
    f05e:	b29a      	uxth	r2, r3
    f060:	9b02      	ldr	r3, [sp, #8]
    f062:	3301      	adds	r3, #1
    f064:	781b      	ldrb	r3, [r3, #0]
    f066:	b29b      	uxth	r3, r3
    f068:	021b      	lsls	r3, r3, #8
    f06a:	b29b      	uxth	r3, r3
    f06c:	4413      	add	r3, r2
    f06e:	b29a      	uxth	r2, r3
    f070:	9b03      	ldr	r3, [sp, #12]
    f072:	811a      	strh	r2, [r3, #8]
    f074:	9b02      	ldr	r3, [sp, #8]
    f076:	3302      	adds	r3, #2
    f078:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
    f07a:	9b02      	ldr	r3, [sp, #8]
    f07c:	781b      	ldrb	r3, [r3, #0]
    f07e:	b29a      	uxth	r2, r3
    f080:	9b02      	ldr	r3, [sp, #8]
    f082:	3301      	adds	r3, #1
    f084:	781b      	ldrb	r3, [r3, #0]
    f086:	b29b      	uxth	r3, r3
    f088:	021b      	lsls	r3, r3, #8
    f08a:	b29b      	uxth	r3, r3
    f08c:	4413      	add	r3, r2
    f08e:	b29a      	uxth	r2, r3
    f090:	9b03      	ldr	r3, [sp, #12]
    f092:	815a      	strh	r2, [r3, #10]
    f094:	9b02      	ldr	r3, [sp, #8]
    f096:	3302      	adds	r3, #2
    f098:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
    f09a:	9b02      	ldr	r3, [sp, #8]
    f09c:	781b      	ldrb	r3, [r3, #0]
    f09e:	b29a      	uxth	r2, r3
    f0a0:	9b02      	ldr	r3, [sp, #8]
    f0a2:	3301      	adds	r3, #1
    f0a4:	781b      	ldrb	r3, [r3, #0]
    f0a6:	b29b      	uxth	r3, r3
    f0a8:	021b      	lsls	r3, r3, #8
    f0aa:	b29b      	uxth	r3, r3
    f0ac:	4413      	add	r3, r2
    f0ae:	b29a      	uxth	r2, r3
    f0b0:	9b03      	ldr	r3, [sp, #12]
    f0b2:	819a      	strh	r2, [r3, #12]
    f0b4:	9b02      	ldr	r3, [sp, #8]
    f0b6:	3302      	adds	r3, #2
    f0b8:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
    f0ba:	9b03      	ldr	r3, [sp, #12]
    f0bc:	889a      	ldrh	r2, [r3, #4]
    f0be:	9b03      	ldr	r3, [sp, #12]
    f0c0:	801a      	strh	r2, [r3, #0]
}
    f0c2:	bf00      	nop
    f0c4:	b004      	add	sp, #16
    f0c6:	4770      	bx	lr

0000f0c8 <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f0c8:	b084      	sub	sp, #16
    f0ca:	9003      	str	r0, [sp, #12]
    f0cc:	9102      	str	r1, [sp, #8]
    f0ce:	4613      	mov	r3, r2
    f0d0:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
    f0d4:	9b02      	ldr	r3, [sp, #8]
    f0d6:	781b      	ldrb	r3, [r3, #0]
    f0d8:	b29a      	uxth	r2, r3
    f0da:	9b02      	ldr	r3, [sp, #8]
    f0dc:	3301      	adds	r3, #1
    f0de:	781b      	ldrb	r3, [r3, #0]
    f0e0:	b29b      	uxth	r3, r3
    f0e2:	021b      	lsls	r3, r3, #8
    f0e4:	b29b      	uxth	r3, r3
    f0e6:	4413      	add	r3, r2
    f0e8:	b29a      	uxth	r2, r3
    f0ea:	9b03      	ldr	r3, [sp, #12]
    f0ec:	809a      	strh	r2, [r3, #4]
    f0ee:	9b02      	ldr	r3, [sp, #8]
    f0f0:	3302      	adds	r3, #2
    f0f2:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
    f0f4:	9b02      	ldr	r3, [sp, #8]
    f0f6:	781b      	ldrb	r3, [r3, #0]
    f0f8:	b29a      	uxth	r2, r3
    f0fa:	9b02      	ldr	r3, [sp, #8]
    f0fc:	3301      	adds	r3, #1
    f0fe:	781b      	ldrb	r3, [r3, #0]
    f100:	b29b      	uxth	r3, r3
    f102:	021b      	lsls	r3, r3, #8
    f104:	b29b      	uxth	r3, r3
    f106:	4413      	add	r3, r2
    f108:	b29a      	uxth	r2, r3
    f10a:	9b03      	ldr	r3, [sp, #12]
    f10c:	80da      	strh	r2, [r3, #6]
    f10e:	9b02      	ldr	r3, [sp, #8]
    f110:	3302      	adds	r3, #2
    f112:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
    f114:	9b02      	ldr	r3, [sp, #8]
    f116:	781b      	ldrb	r3, [r3, #0]
    f118:	b29a      	uxth	r2, r3
    f11a:	9b02      	ldr	r3, [sp, #8]
    f11c:	3301      	adds	r3, #1
    f11e:	781b      	ldrb	r3, [r3, #0]
    f120:	b29b      	uxth	r3, r3
    f122:	021b      	lsls	r3, r3, #8
    f124:	b29b      	uxth	r3, r3
    f126:	4413      	add	r3, r2
    f128:	b29a      	uxth	r2, r3
    f12a:	9b03      	ldr	r3, [sp, #12]
    f12c:	811a      	strh	r2, [r3, #8]
    f12e:	9b02      	ldr	r3, [sp, #8]
    f130:	3302      	adds	r3, #2
    f132:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
    f134:	9b02      	ldr	r3, [sp, #8]
    f136:	781b      	ldrb	r3, [r3, #0]
    f138:	b29a      	uxth	r2, r3
    f13a:	9b02      	ldr	r3, [sp, #8]
    f13c:	3301      	adds	r3, #1
    f13e:	781b      	ldrb	r3, [r3, #0]
    f140:	b29b      	uxth	r3, r3
    f142:	021b      	lsls	r3, r3, #8
    f144:	b29b      	uxth	r3, r3
    f146:	4413      	add	r3, r2
    f148:	b29a      	uxth	r2, r3
    f14a:	9b03      	ldr	r3, [sp, #12]
    f14c:	815a      	strh	r2, [r3, #10]
    f14e:	9b02      	ldr	r3, [sp, #8]
    f150:	3302      	adds	r3, #2
    f152:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
    f154:	9b02      	ldr	r3, [sp, #8]
    f156:	781b      	ldrb	r3, [r3, #0]
    f158:	b29a      	uxth	r2, r3
    f15a:	9b02      	ldr	r3, [sp, #8]
    f15c:	3301      	adds	r3, #1
    f15e:	781b      	ldrb	r3, [r3, #0]
    f160:	b29b      	uxth	r3, r3
    f162:	021b      	lsls	r3, r3, #8
    f164:	b29b      	uxth	r3, r3
    f166:	4413      	add	r3, r2
    f168:	b29a      	uxth	r2, r3
    f16a:	9b03      	ldr	r3, [sp, #12]
    f16c:	819a      	strh	r2, [r3, #12]
    f16e:	9b02      	ldr	r3, [sp, #8]
    f170:	3302      	adds	r3, #2
    f172:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
    f174:	9b03      	ldr	r3, [sp, #12]
    f176:	889a      	ldrh	r2, [r3, #4]
    f178:	9b03      	ldr	r3, [sp, #12]
    f17a:	801a      	strh	r2, [r3, #0]
}
    f17c:	bf00      	nop
    f17e:	b004      	add	sp, #16
    f180:	4770      	bx	lr

0000f182 <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f182:	b500      	push	{lr}
    f184:	b085      	sub	sp, #20
    f186:	9003      	str	r0, [sp, #12]
    f188:	9102      	str	r1, [sp, #8]
    f18a:	4613      	mov	r3, r2
    f18c:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
    f190:	9b02      	ldr	r3, [sp, #8]
    f192:	1c5a      	adds	r2, r3, #1
    f194:	9202      	str	r2, [sp, #8]
    f196:	781a      	ldrb	r2, [r3, #0]
    f198:	9b03      	ldr	r3, [sp, #12]
    f19a:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
    f19c:	9b03      	ldr	r3, [sp, #12]
    f19e:	3305      	adds	r3, #5
    f1a0:	2240      	movs	r2, #64	; 0x40
    f1a2:	9902      	ldr	r1, [sp, #8]
    f1a4:	4618      	mov	r0, r3
    f1a6:	f7fc ffab 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
    f1aa:	9b03      	ldr	r3, [sp, #12]
    f1ac:	791a      	ldrb	r2, [r3, #4]
    f1ae:	9b03      	ldr	r3, [sp, #12]
    f1b0:	70da      	strb	r2, [r3, #3]
}
    f1b2:	bf00      	nop
    f1b4:	b005      	add	sp, #20
    f1b6:	f85d fb04 	ldr.w	pc, [sp], #4

0000f1ba <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f1ba:	b500      	push	{lr}
    f1bc:	b085      	sub	sp, #20
    f1be:	9003      	str	r0, [sp, #12]
    f1c0:	9102      	str	r1, [sp, #8]
    f1c2:	4613      	mov	r3, r2
    f1c4:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
    f1c8:	9b02      	ldr	r3, [sp, #8]
    f1ca:	1c5a      	adds	r2, r3, #1
    f1cc:	9202      	str	r2, [sp, #8]
    f1ce:	781a      	ldrb	r2, [r3, #0]
    f1d0:	9b03      	ldr	r3, [sp, #12]
    f1d2:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
    f1d4:	9b03      	ldr	r3, [sp, #12]
    f1d6:	3305      	adds	r3, #5
    f1d8:	2220      	movs	r2, #32
    f1da:	9902      	ldr	r1, [sp, #8]
    f1dc:	4618      	mov	r0, r3
    f1de:	f7fc ff8f 	bl	c100 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
    f1e2:	9b03      	ldr	r3, [sp, #12]
    f1e4:	791a      	ldrb	r2, [r3, #4]
    f1e6:	9b03      	ldr	r3, [sp, #12]
    f1e8:	70da      	strb	r2, [r3, #3]
}
    f1ea:	bf00      	nop
    f1ec:	b005      	add	sp, #20
    f1ee:	f85d fb04 	ldr.w	pc, [sp], #4

0000f1f2 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f1f2:	b084      	sub	sp, #16
    f1f4:	9003      	str	r0, [sp, #12]
    f1f6:	9102      	str	r1, [sp, #8]
    f1f8:	4613      	mov	r3, r2
    f1fa:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
    f1fe:	9b02      	ldr	r3, [sp, #8]
    f200:	1c5a      	adds	r2, r3, #1
    f202:	9202      	str	r2, [sp, #8]
    f204:	781a      	ldrb	r2, [r3, #0]
    f206:	9b03      	ldr	r3, [sp, #12]
    f208:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
    f20a:	9b02      	ldr	r3, [sp, #8]
    f20c:	781b      	ldrb	r3, [r3, #0]
    f20e:	b29a      	uxth	r2, r3
    f210:	9b02      	ldr	r3, [sp, #8]
    f212:	3301      	adds	r3, #1
    f214:	781b      	ldrb	r3, [r3, #0]
    f216:	b29b      	uxth	r3, r3
    f218:	021b      	lsls	r3, r3, #8
    f21a:	b29b      	uxth	r3, r3
    f21c:	4413      	add	r3, r2
    f21e:	b29a      	uxth	r2, r3
    f220:	9b03      	ldr	r3, [sp, #12]
    f222:	80da      	strh	r2, [r3, #6]
    f224:	9b02      	ldr	r3, [sp, #8]
    f226:	3302      	adds	r3, #2
    f228:	9302      	str	r3, [sp, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
    f22a:	9b03      	ldr	r3, [sp, #12]
    f22c:	791a      	ldrb	r2, [r3, #4]
    f22e:	9b03      	ldr	r3, [sp, #12]
    f230:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
    f232:	9b03      	ldr	r3, [sp, #12]
    f234:	88da      	ldrh	r2, [r3, #6]
    f236:	9b03      	ldr	r3, [sp, #12]
    f238:	801a      	strh	r2, [r3, #0]
}
    f23a:	bf00      	nop
    f23c:	b004      	add	sp, #16
    f23e:	4770      	bx	lr

0000f240 <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f240:	b084      	sub	sp, #16
    f242:	9003      	str	r0, [sp, #12]
    f244:	9102      	str	r1, [sp, #8]
    f246:	4613      	mov	r3, r2
    f248:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
    f24c:	9b02      	ldr	r3, [sp, #8]
    f24e:	781b      	ldrb	r3, [r3, #0]
    f250:	b29a      	uxth	r2, r3
    f252:	9b02      	ldr	r3, [sp, #8]
    f254:	3301      	adds	r3, #1
    f256:	781b      	ldrb	r3, [r3, #0]
    f258:	b29b      	uxth	r3, r3
    f25a:	021b      	lsls	r3, r3, #8
    f25c:	b29b      	uxth	r3, r3
    f25e:	4413      	add	r3, r2
    f260:	b29a      	uxth	r2, r3
    f262:	9b03      	ldr	r3, [sp, #12]
    f264:	809a      	strh	r2, [r3, #4]
    f266:	9b02      	ldr	r3, [sp, #8]
    f268:	3302      	adds	r3, #2
    f26a:	9302      	str	r3, [sp, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
    f26c:	9b03      	ldr	r3, [sp, #12]
    f26e:	889a      	ldrh	r2, [r3, #4]
    f270:	9b03      	ldr	r3, [sp, #12]
    f272:	801a      	strh	r2, [r3, #0]
}
    f274:	bf00      	nop
    f276:	b004      	add	sp, #16
    f278:	4770      	bx	lr

0000f27a <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f27a:	b084      	sub	sp, #16
    f27c:	9003      	str	r0, [sp, #12]
    f27e:	9102      	str	r1, [sp, #8]
    f280:	4613      	mov	r3, r2
    f282:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
    f286:	9b02      	ldr	r3, [sp, #8]
    f288:	1c5a      	adds	r2, r3, #1
    f28a:	9202      	str	r2, [sp, #8]
    f28c:	781a      	ldrb	r2, [r3, #0]
    f28e:	9b03      	ldr	r3, [sp, #12]
    f290:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
    f292:	9b02      	ldr	r3, [sp, #8]
    f294:	781b      	ldrb	r3, [r3, #0]
    f296:	b29a      	uxth	r2, r3
    f298:	9b02      	ldr	r3, [sp, #8]
    f29a:	3301      	adds	r3, #1
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	b29b      	uxth	r3, r3
    f2a0:	021b      	lsls	r3, r3, #8
    f2a2:	b29b      	uxth	r3, r3
    f2a4:	4413      	add	r3, r2
    f2a6:	b29a      	uxth	r2, r3
    f2a8:	9b03      	ldr	r3, [sp, #12]
    f2aa:	80da      	strh	r2, [r3, #6]
    f2ac:	9b02      	ldr	r3, [sp, #8]
    f2ae:	3302      	adds	r3, #2
    f2b0:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
    f2b2:	9b02      	ldr	r3, [sp, #8]
    f2b4:	1c5a      	adds	r2, r3, #1
    f2b6:	9202      	str	r2, [sp, #8]
    f2b8:	781a      	ldrb	r2, [r3, #0]
    f2ba:	9b03      	ldr	r3, [sp, #12]
    f2bc:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
    f2be:	9b02      	ldr	r3, [sp, #8]
    f2c0:	1c5a      	adds	r2, r3, #1
    f2c2:	9202      	str	r2, [sp, #8]
    f2c4:	781a      	ldrb	r2, [r3, #0]
    f2c6:	9b03      	ldr	r3, [sp, #12]
    f2c8:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
    f2ca:	9b03      	ldr	r3, [sp, #12]
    f2cc:	791a      	ldrb	r2, [r3, #4]
    f2ce:	9b03      	ldr	r3, [sp, #12]
    f2d0:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
    f2d2:	9b03      	ldr	r3, [sp, #12]
    f2d4:	88da      	ldrh	r2, [r3, #6]
    f2d6:	9b03      	ldr	r3, [sp, #12]
    f2d8:	801a      	strh	r2, [r3, #0]
}
    f2da:	bf00      	nop
    f2dc:	b004      	add	sp, #16
    f2de:	4770      	bx	lr

0000f2e0 <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f2e0:	b084      	sub	sp, #16
    f2e2:	9003      	str	r0, [sp, #12]
    f2e4:	9102      	str	r1, [sp, #8]
    f2e6:	4613      	mov	r3, r2
    f2e8:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
    f2ec:	9b02      	ldr	r3, [sp, #8]
    f2ee:	1c5a      	adds	r2, r3, #1
    f2f0:	9202      	str	r2, [sp, #8]
    f2f2:	781a      	ldrb	r2, [r3, #0]
    f2f4:	9b03      	ldr	r3, [sp, #12]
    f2f6:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
    f2f8:	9b03      	ldr	r3, [sp, #12]
    f2fa:	791a      	ldrb	r2, [r3, #4]
    f2fc:	9b03      	ldr	r3, [sp, #12]
    f2fe:	70da      	strb	r2, [r3, #3]
}
    f300:	bf00      	nop
    f302:	b004      	add	sp, #16
    f304:	4770      	bx	lr

0000f306 <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f306:	b084      	sub	sp, #16
    f308:	9003      	str	r0, [sp, #12]
    f30a:	9102      	str	r1, [sp, #8]
    f30c:	4613      	mov	r3, r2
    f30e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
    f312:	9b02      	ldr	r3, [sp, #8]
    f314:	1c5a      	adds	r2, r3, #1
    f316:	9202      	str	r2, [sp, #8]
    f318:	781a      	ldrb	r2, [r3, #0]
    f31a:	9b03      	ldr	r3, [sp, #12]
    f31c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
    f31e:	9b02      	ldr	r3, [sp, #8]
    f320:	781b      	ldrb	r3, [r3, #0]
    f322:	b29a      	uxth	r2, r3
    f324:	9b02      	ldr	r3, [sp, #8]
    f326:	3301      	adds	r3, #1
    f328:	781b      	ldrb	r3, [r3, #0]
    f32a:	b29b      	uxth	r3, r3
    f32c:	021b      	lsls	r3, r3, #8
    f32e:	b29b      	uxth	r3, r3
    f330:	4413      	add	r3, r2
    f332:	b29a      	uxth	r2, r3
    f334:	9b03      	ldr	r3, [sp, #12]
    f336:	80da      	strh	r2, [r3, #6]
    f338:	9b02      	ldr	r3, [sp, #8]
    f33a:	3302      	adds	r3, #2
    f33c:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
    f33e:	9b02      	ldr	r3, [sp, #8]
    f340:	1c5a      	adds	r2, r3, #1
    f342:	9202      	str	r2, [sp, #8]
    f344:	781a      	ldrb	r2, [r3, #0]
    f346:	9b03      	ldr	r3, [sp, #12]
    f348:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
    f34a:	9b02      	ldr	r3, [sp, #8]
    f34c:	1c5a      	adds	r2, r3, #1
    f34e:	9202      	str	r2, [sp, #8]
    f350:	781a      	ldrb	r2, [r3, #0]
    f352:	9b03      	ldr	r3, [sp, #12]
    f354:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
    f356:	9b03      	ldr	r3, [sp, #12]
    f358:	791a      	ldrb	r2, [r3, #4]
    f35a:	9b03      	ldr	r3, [sp, #12]
    f35c:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
    f35e:	9b03      	ldr	r3, [sp, #12]
    f360:	88da      	ldrh	r2, [r3, #6]
    f362:	9b03      	ldr	r3, [sp, #12]
    f364:	801a      	strh	r2, [r3, #0]
}
    f366:	bf00      	nop
    f368:	b004      	add	sp, #16
    f36a:	4770      	bx	lr

0000f36c <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
    f36c:	b500      	push	{lr}
    f36e:	b085      	sub	sp, #20
    f370:	9001      	str	r0, [sp, #4]
    f372:	460b      	mov	r3, r1
    f374:	f88d 3003 	strb.w	r3, [sp, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
    f378:	9b01      	ldr	r3, [sp, #4]
    f37a:	1c5a      	adds	r2, r3, #1
    f37c:	9201      	str	r2, [sp, #4]
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	f88d 300f 	strb.w	r3, [sp, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
    f384:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f388:	2b0f      	cmp	r3, #15
    f38a:	d864      	bhi.n	f456 <hciEvtProcessLeAdvReport+0xea>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
    f38c:	203b      	movs	r0, #59	; 0x3b
    f38e:	f010 fa23 	bl	1f7d8 <WsfBufAlloc>
    f392:	9002      	str	r0, [sp, #8]
    f394:	9b02      	ldr	r3, [sp, #8]
    f396:	2b00      	cmp	r3, #0
    f398:	d05e      	beq.n	f458 <hciEvtProcessLeAdvReport+0xec>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
    f39a:	e04f      	b.n	f43c <hciEvtProcessLeAdvReport+0xd0>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
    f39c:	9b01      	ldr	r3, [sp, #4]
    f39e:	1c5a      	adds	r2, r3, #1
    f3a0:	9201      	str	r2, [sp, #4]
    f3a2:	781a      	ldrb	r2, [r3, #0]
    f3a4:	9b02      	ldr	r3, [sp, #8]
    f3a6:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    f3a8:	9b01      	ldr	r3, [sp, #4]
    f3aa:	1c5a      	adds	r2, r3, #1
    f3ac:	9201      	str	r2, [sp, #4]
    f3ae:	781a      	ldrb	r2, [r3, #0]
    f3b0:	9b02      	ldr	r3, [sp, #8]
    f3b2:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
    f3b4:	9b02      	ldr	r3, [sp, #8]
    f3b6:	330c      	adds	r3, #12
    f3b8:	9901      	ldr	r1, [sp, #4]
    f3ba:	4618      	mov	r0, r3
    f3bc:	f7fc ff3a 	bl	c234 <BdaCpy>
    f3c0:	9b01      	ldr	r3, [sp, #4]
    f3c2:	3306      	adds	r3, #6
    f3c4:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
    f3c6:	9b01      	ldr	r3, [sp, #4]
    f3c8:	1c5a      	adds	r2, r3, #1
    f3ca:	9201      	str	r2, [sp, #4]
    f3cc:	781a      	ldrb	r2, [r3, #0]
    f3ce:	9b02      	ldr	r3, [sp, #8]
    f3d0:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
    f3d2:	9b02      	ldr	r3, [sp, #8]
    f3d4:	7a1b      	ldrb	r3, [r3, #8]
    f3d6:	2b1f      	cmp	r3, #31
    f3d8:	d838      	bhi.n	f44c <hciEvtProcessLeAdvReport+0xe0>
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
    f3da:	9b02      	ldr	r3, [sp, #8]
    f3dc:	f103 021c 	add.w	r2, r3, #28
    f3e0:	9b02      	ldr	r3, [sp, #8]
    f3e2:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
    f3e4:	9b02      	ldr	r3, [sp, #8]
    f3e6:	6858      	ldr	r0, [r3, #4]
    f3e8:	9b02      	ldr	r3, [sp, #8]
    f3ea:	7a1b      	ldrb	r3, [r3, #8]
    f3ec:	461a      	mov	r2, r3
    f3ee:	9901      	ldr	r1, [sp, #4]
    f3f0:	f7fc fe86 	bl	c100 <memcpy>
      p += pMsg->len;
    f3f4:	9b02      	ldr	r3, [sp, #8]
    f3f6:	7a1b      	ldrb	r3, [r3, #8]
    f3f8:	461a      	mov	r2, r3
    f3fa:	9b01      	ldr	r3, [sp, #4]
    f3fc:	4413      	add	r3, r2
    f3fe:	9301      	str	r3, [sp, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
    f400:	9b01      	ldr	r3, [sp, #4]
    f402:	1c5a      	adds	r2, r3, #1
    f404:	9201      	str	r2, [sp, #4]
    f406:	781b      	ldrb	r3, [r3, #0]
    f408:	b25a      	sxtb	r2, r3
    f40a:	9b02      	ldr	r3, [sp, #8]
    f40c:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
    f40e:	9b02      	ldr	r3, [sp, #8]
    f410:	2200      	movs	r2, #0
    f412:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
    f414:	9b02      	ldr	r3, [sp, #8]
    f416:	3313      	adds	r3, #19
    f418:	2206      	movs	r2, #6
    f41a:	2100      	movs	r1, #0
    f41c:	4618      	mov	r0, r3
    f41e:	f016 f94d 	bl	256bc <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
    f422:	9b02      	ldr	r3, [sp, #8]
    f424:	2200      	movs	r2, #0
    f426:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
    f428:	9b02      	ldr	r3, [sp, #8]
    f42a:	2206      	movs	r2, #6
    f42c:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    f42e:	9b02      	ldr	r3, [sp, #8]
    f430:	2200      	movs	r2, #0
    f432:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f434:	4b0a      	ldr	r3, [pc, #40]	; (f460 <hciEvtProcessLeAdvReport+0xf4>)
    f436:	689b      	ldr	r3, [r3, #8]
    f438:	9802      	ldr	r0, [sp, #8]
    f43a:	4798      	blx	r3
    while (i-- > 0)
    f43c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f440:	1e5a      	subs	r2, r3, #1
    f442:	f88d 200f 	strb.w	r2, [sp, #15]
    f446:	2b00      	cmp	r3, #0
    f448:	d1a8      	bne.n	f39c <hciEvtProcessLeAdvReport+0x30>
    f44a:	e000      	b.n	f44e <hciEvtProcessLeAdvReport+0xe2>
        break;
    f44c:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
    f44e:	9802      	ldr	r0, [sp, #8]
    f450:	f010 fa00 	bl	1f854 <WsfBufFree>
    f454:	e000      	b.n	f458 <hciEvtProcessLeAdvReport+0xec>
    return;
    f456:	bf00      	nop
  }
}
    f458:	b005      	add	sp, #20
    f45a:	f85d fb04 	ldr.w	pc, [sp], #4
    f45e:	bf00      	nop
    f460:	10004230 	.word	0x10004230

0000f464 <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
    f464:	b500      	push	{lr}
    f466:	b089      	sub	sp, #36	; 0x24
    f468:	9001      	str	r0, [sp, #4]
    f46a:	460b      	mov	r3, r1
    f46c:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
    f470:	9b01      	ldr	r3, [sp, #4]
    f472:	781b      	ldrb	r3, [r3, #0]
    f474:	f88d 301f 	strb.w	r3, [sp, #31]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
    f478:	f89d 301f 	ldrb.w	r3, [sp, #31]
    f47c:	2b0f      	cmp	r3, #15
    f47e:	f200 80d2 	bhi.w	f626 <hciEvtProcessLeExtAdvReport+0x1c2>
  {
    return;
  }

  ptr = p + 1;
    f482:	9b01      	ldr	r3, [sp, #4]
    f484:	3301      	adds	r3, #1
    f486:	9306      	str	r3, [sp, #24]
  maxLen = 0;
    f488:	2300      	movs	r3, #0
    f48a:	f88d 3017 	strb.w	r3, [sp, #23]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
    f48e:	e017      	b.n	f4c0 <hciEvtProcessLeExtAdvReport+0x5c>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
    f490:	9b06      	ldr	r3, [sp, #24]
    f492:	3317      	adds	r3, #23
    f494:	9306      	str	r3, [sp, #24]
    BSTREAM_TO_UINT8(dataLen, ptr);
    f496:	9b06      	ldr	r3, [sp, #24]
    f498:	1c5a      	adds	r2, r3, #1
    f49a:	9206      	str	r2, [sp, #24]
    f49c:	781b      	ldrb	r3, [r3, #0]
    f49e:	f88d 300f 	strb.w	r3, [sp, #15]
    ptr += dataLen;
    f4a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f4a6:	9a06      	ldr	r2, [sp, #24]
    f4a8:	4413      	add	r3, r2
    f4aa:	9306      	str	r3, [sp, #24]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
    f4ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f4b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f4b4:	429a      	cmp	r2, r3
    f4b6:	d903      	bls.n	f4c0 <hciEvtProcessLeExtAdvReport+0x5c>
    {
      /* update max len */
      maxLen = dataLen;
    f4b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f4bc:	f88d 3017 	strb.w	r3, [sp, #23]
  while (i-- > 0)
    f4c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    f4c4:	1e5a      	subs	r2, r3, #1
    f4c6:	f88d 201f 	strb.w	r2, [sp, #31]
    f4ca:	2b00      	cmp	r3, #0
    f4cc:	d1e0      	bne.n	f490 <hciEvtProcessLeExtAdvReport+0x2c>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
    f4ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f4d2:	b29b      	uxth	r3, r3
    f4d4:	3324      	adds	r3, #36	; 0x24
    f4d6:	b29b      	uxth	r3, r3
    f4d8:	4618      	mov	r0, r3
    f4da:	f010 f97d 	bl	1f7d8 <WsfBufAlloc>
    f4de:	9004      	str	r0, [sp, #16]
    f4e0:	9b04      	ldr	r3, [sp, #16]
    f4e2:	2b00      	cmp	r3, #0
    f4e4:	f000 80a0 	beq.w	f628 <hciEvtProcessLeExtAdvReport+0x1c4>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
    f4e8:	9b01      	ldr	r3, [sp, #4]
    f4ea:	1c5a      	adds	r2, r3, #1
    f4ec:	9201      	str	r2, [sp, #4]
    f4ee:	781b      	ldrb	r3, [r3, #0]
    f4f0:	f88d 301f 	strb.w	r3, [sp, #31]

    /* parse each report and execute callback */
    while (i-- > 0)
    f4f4:	e089      	b.n	f60a <hciEvtProcessLeExtAdvReport+0x1a6>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
    f4f6:	9b01      	ldr	r3, [sp, #4]
    f4f8:	781b      	ldrb	r3, [r3, #0]
    f4fa:	b29a      	uxth	r2, r3
    f4fc:	9b01      	ldr	r3, [sp, #4]
    f4fe:	3301      	adds	r3, #1
    f500:	781b      	ldrb	r3, [r3, #0]
    f502:	b29b      	uxth	r3, r3
    f504:	021b      	lsls	r3, r3, #8
    f506:	b29b      	uxth	r3, r3
    f508:	4413      	add	r3, r2
    f50a:	b29a      	uxth	r2, r3
    f50c:	9b04      	ldr	r3, [sp, #16]
    f50e:	809a      	strh	r2, [r3, #4]
    f510:	9b01      	ldr	r3, [sp, #4]
    f512:	3302      	adds	r3, #2
    f514:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    f516:	9b01      	ldr	r3, [sp, #4]
    f518:	1c5a      	adds	r2, r3, #1
    f51a:	9201      	str	r2, [sp, #4]
    f51c:	781a      	ldrb	r2, [r3, #0]
    f51e:	9b04      	ldr	r3, [sp, #16]
    f520:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
    f522:	9b04      	ldr	r3, [sp, #16]
    f524:	3307      	adds	r3, #7
    f526:	9901      	ldr	r1, [sp, #4]
    f528:	4618      	mov	r0, r3
    f52a:	f7fc fe83 	bl	c234 <BdaCpy>
    f52e:	9b01      	ldr	r3, [sp, #4]
    f530:	3306      	adds	r3, #6
    f532:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
    f534:	9b01      	ldr	r3, [sp, #4]
    f536:	1c5a      	adds	r2, r3, #1
    f538:	9201      	str	r2, [sp, #4]
    f53a:	781a      	ldrb	r2, [r3, #0]
    f53c:	9b04      	ldr	r3, [sp, #16]
    f53e:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
    f540:	9b01      	ldr	r3, [sp, #4]
    f542:	1c5a      	adds	r2, r3, #1
    f544:	9201      	str	r2, [sp, #4]
    f546:	781a      	ldrb	r2, [r3, #0]
    f548:	9b04      	ldr	r3, [sp, #16]
    f54a:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
    f54c:	9b01      	ldr	r3, [sp, #4]
    f54e:	1c5a      	adds	r2, r3, #1
    f550:	9201      	str	r2, [sp, #4]
    f552:	781a      	ldrb	r2, [r3, #0]
    f554:	9b04      	ldr	r3, [sp, #16]
    f556:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
    f558:	9b01      	ldr	r3, [sp, #4]
    f55a:	1c5a      	adds	r2, r3, #1
    f55c:	9201      	str	r2, [sp, #4]
    f55e:	781b      	ldrb	r3, [r3, #0]
    f560:	b25a      	sxtb	r2, r3
    f562:	9b04      	ldr	r3, [sp, #16]
    f564:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
    f566:	9b01      	ldr	r3, [sp, #4]
    f568:	1c5a      	adds	r2, r3, #1
    f56a:	9201      	str	r2, [sp, #4]
    f56c:	781b      	ldrb	r3, [r3, #0]
    f56e:	b25a      	sxtb	r2, r3
    f570:	9b04      	ldr	r3, [sp, #16]
    f572:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
    f574:	9b01      	ldr	r3, [sp, #4]
    f576:	781b      	ldrb	r3, [r3, #0]
    f578:	b29a      	uxth	r2, r3
    f57a:	9b01      	ldr	r3, [sp, #4]
    f57c:	3301      	adds	r3, #1
    f57e:	781b      	ldrb	r3, [r3, #0]
    f580:	b29b      	uxth	r3, r3
    f582:	021b      	lsls	r3, r3, #8
    f584:	b29b      	uxth	r3, r3
    f586:	4413      	add	r3, r2
    f588:	b29b      	uxth	r3, r3
    f58a:	b21a      	sxth	r2, r3
    f58c:	9b04      	ldr	r3, [sp, #16]
    f58e:	825a      	strh	r2, [r3, #18]
    f590:	9b01      	ldr	r3, [sp, #4]
    f592:	3302      	adds	r3, #2
    f594:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
    f596:	9b01      	ldr	r3, [sp, #4]
    f598:	1c5a      	adds	r2, r3, #1
    f59a:	9201      	str	r2, [sp, #4]
    f59c:	781a      	ldrb	r2, [r3, #0]
    f59e:	9b04      	ldr	r3, [sp, #16]
    f5a0:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    f5a2:	9b04      	ldr	r3, [sp, #16]
    f5a4:	3315      	adds	r3, #21
    f5a6:	9901      	ldr	r1, [sp, #4]
    f5a8:	4618      	mov	r0, r3
    f5aa:	f7fc fe43 	bl	c234 <BdaCpy>
    f5ae:	9b01      	ldr	r3, [sp, #4]
    f5b0:	3306      	adds	r3, #6
    f5b2:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
    f5b4:	9b01      	ldr	r3, [sp, #4]
    f5b6:	1c5a      	adds	r2, r3, #1
    f5b8:	9201      	str	r2, [sp, #4]
    f5ba:	781b      	ldrb	r3, [r3, #0]
    f5bc:	b29a      	uxth	r2, r3
    f5be:	9b04      	ldr	r3, [sp, #16]
    f5c0:	839a      	strh	r2, [r3, #28]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
    f5c2:	9b04      	ldr	r3, [sp, #16]
    f5c4:	8b9b      	ldrh	r3, [r3, #28]
    f5c6:	2be5      	cmp	r3, #229	; 0xe5
    f5c8:	d828      	bhi.n	f61c <hciEvtProcessLeExtAdvReport+0x1b8>
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
    f5ca:	9b04      	ldr	r3, [sp, #16]
    f5cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
    f5d0:	9b04      	ldr	r3, [sp, #16]
    f5d2:	621a      	str	r2, [r3, #32]
      memcpy(pMsg->pData, p, pMsg->len);
    f5d4:	9b04      	ldr	r3, [sp, #16]
    f5d6:	6a18      	ldr	r0, [r3, #32]
    f5d8:	9b04      	ldr	r3, [sp, #16]
    f5da:	8b9b      	ldrh	r3, [r3, #28]
    f5dc:	461a      	mov	r2, r3
    f5de:	9901      	ldr	r1, [sp, #4]
    f5e0:	f7fc fd8e 	bl	c100 <memcpy>
      p += pMsg->len;
    f5e4:	9b04      	ldr	r3, [sp, #16]
    f5e6:	8b9b      	ldrh	r3, [r3, #28]
    f5e8:	461a      	mov	r2, r3
    f5ea:	9b01      	ldr	r3, [sp, #4]
    f5ec:	4413      	add	r3, r2
    f5ee:	9301      	str	r3, [sp, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
    f5f0:	9b04      	ldr	r3, [sp, #16]
    f5f2:	2200      	movs	r2, #0
    f5f4:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
    f5f6:	9b04      	ldr	r3, [sp, #16]
    f5f8:	222c      	movs	r2, #44	; 0x2c
    f5fa:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    f5fc:	9b04      	ldr	r3, [sp, #16]
    f5fe:	2200      	movs	r2, #0
    f600:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
    f602:	4b0b      	ldr	r3, [pc, #44]	; (f630 <hciEvtProcessLeExtAdvReport+0x1cc>)
    f604:	689b      	ldr	r3, [r3, #8]
    f606:	9804      	ldr	r0, [sp, #16]
    f608:	4798      	blx	r3
    while (i-- > 0)
    f60a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    f60e:	1e5a      	subs	r2, r3, #1
    f610:	f88d 201f 	strb.w	r2, [sp, #31]
    f614:	2b00      	cmp	r3, #0
    f616:	f47f af6e 	bne.w	f4f6 <hciEvtProcessLeExtAdvReport+0x92>
    f61a:	e000      	b.n	f61e <hciEvtProcessLeExtAdvReport+0x1ba>
        break;
    f61c:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
    f61e:	9804      	ldr	r0, [sp, #16]
    f620:	f010 f918 	bl	1f854 <WsfBufFree>
    f624:	e000      	b.n	f628 <hciEvtProcessLeExtAdvReport+0x1c4>
    return;
    f626:	bf00      	nop
  }
}
    f628:	b009      	add	sp, #36	; 0x24
    f62a:	f85d fb04 	ldr.w	pc, [sp], #4
    f62e:	bf00      	nop
    f630:	10004230 	.word	0x10004230

0000f634 <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f634:	b084      	sub	sp, #16
    f636:	9003      	str	r0, [sp, #12]
    f638:	9102      	str	r1, [sp, #8]
    f63a:	4613      	mov	r3, r2
    f63c:	f88d 3007 	strb.w	r3, [sp, #7]
  /* empty */
}
    f640:	bf00      	nop
    f642:	b004      	add	sp, #16
    f644:	4770      	bx	lr

0000f646 <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f646:	b084      	sub	sp, #16
    f648:	9003      	str	r0, [sp, #12]
    f64a:	9102      	str	r1, [sp, #8]
    f64c:	4613      	mov	r3, r2
    f64e:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
    f652:	9b02      	ldr	r3, [sp, #8]
    f654:	1c5a      	adds	r2, r3, #1
    f656:	9202      	str	r2, [sp, #8]
    f658:	781a      	ldrb	r2, [r3, #0]
    f65a:	9b03      	ldr	r3, [sp, #12]
    f65c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
    f65e:	9b02      	ldr	r3, [sp, #8]
    f660:	1c5a      	adds	r2, r3, #1
    f662:	9202      	str	r2, [sp, #8]
    f664:	781a      	ldrb	r2, [r3, #0]
    f666:	9b03      	ldr	r3, [sp, #12]
    f668:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
    f66a:	9b02      	ldr	r3, [sp, #8]
    f66c:	781b      	ldrb	r3, [r3, #0]
    f66e:	b29a      	uxth	r2, r3
    f670:	9b02      	ldr	r3, [sp, #8]
    f672:	3301      	adds	r3, #1
    f674:	781b      	ldrb	r3, [r3, #0]
    f676:	b29b      	uxth	r3, r3
    f678:	021b      	lsls	r3, r3, #8
    f67a:	b29b      	uxth	r3, r3
    f67c:	4413      	add	r3, r2
    f67e:	b29a      	uxth	r2, r3
    f680:	9b03      	ldr	r3, [sp, #12]
    f682:	80da      	strh	r2, [r3, #6]
    f684:	9b02      	ldr	r3, [sp, #8]
    f686:	3302      	adds	r3, #2
    f688:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
    f68a:	9b02      	ldr	r3, [sp, #8]
    f68c:	1c5a      	adds	r2, r3, #1
    f68e:	9202      	str	r2, [sp, #8]
    f690:	781a      	ldrb	r2, [r3, #0]
    f692:	9b03      	ldr	r3, [sp, #12]
    f694:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
    f696:	9b03      	ldr	r3, [sp, #12]
    f698:	791a      	ldrb	r2, [r3, #4]
    f69a:	9b03      	ldr	r3, [sp, #12]
    f69c:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
    f69e:	9b03      	ldr	r3, [sp, #12]
    f6a0:	88da      	ldrh	r2, [r3, #6]
    f6a2:	9b03      	ldr	r3, [sp, #12]
    f6a4:	801a      	strh	r2, [r3, #0]
}
    f6a6:	bf00      	nop
    f6a8:	b004      	add	sp, #16
    f6aa:	4770      	bx	lr

0000f6ac <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f6ac:	b500      	push	{lr}
    f6ae:	b085      	sub	sp, #20
    f6b0:	9003      	str	r0, [sp, #12]
    f6b2:	9102      	str	r1, [sp, #8]
    f6b4:	4613      	mov	r3, r2
    f6b6:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
    f6ba:	9b02      	ldr	r3, [sp, #8]
    f6bc:	1c5a      	adds	r2, r3, #1
    f6be:	9202      	str	r2, [sp, #8]
    f6c0:	781a      	ldrb	r2, [r3, #0]
    f6c2:	9b03      	ldr	r3, [sp, #12]
    f6c4:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
    f6c6:	9b02      	ldr	r3, [sp, #8]
    f6c8:	1c5a      	adds	r2, r3, #1
    f6ca:	9202      	str	r2, [sp, #8]
    f6cc:	781a      	ldrb	r2, [r3, #0]
    f6ce:	9b03      	ldr	r3, [sp, #12]
    f6d0:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
    f6d2:	9b03      	ldr	r3, [sp, #12]
    f6d4:	3306      	adds	r3, #6
    f6d6:	9902      	ldr	r1, [sp, #8]
    f6d8:	4618      	mov	r0, r3
    f6da:	f7fc fdab 	bl	c234 <BdaCpy>
    f6de:	9b02      	ldr	r3, [sp, #8]
    f6e0:	3306      	adds	r3, #6
    f6e2:	9302      	str	r3, [sp, #8]
}
    f6e4:	bf00      	nop
    f6e6:	b005      	add	sp, #20
    f6e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000f6ec <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f6ec:	b500      	push	{lr}
    f6ee:	b085      	sub	sp, #20
    f6f0:	9003      	str	r0, [sp, #12]
    f6f2:	9102      	str	r1, [sp, #8]
    f6f4:	4613      	mov	r3, r2
    f6f6:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
    f6fa:	9b02      	ldr	r3, [sp, #8]
    f6fc:	1c5a      	adds	r2, r3, #1
    f6fe:	9202      	str	r2, [sp, #8]
    f700:	781a      	ldrb	r2, [r3, #0]
    f702:	9b03      	ldr	r3, [sp, #12]
    f704:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
    f706:	9b02      	ldr	r3, [sp, #8]
    f708:	781b      	ldrb	r3, [r3, #0]
    f70a:	b29a      	uxth	r2, r3
    f70c:	9b02      	ldr	r3, [sp, #8]
    f70e:	3301      	adds	r3, #1
    f710:	781b      	ldrb	r3, [r3, #0]
    f712:	b29b      	uxth	r3, r3
    f714:	021b      	lsls	r3, r3, #8
    f716:	b29b      	uxth	r3, r3
    f718:	4413      	add	r3, r2
    f71a:	b29a      	uxth	r2, r3
    f71c:	9b03      	ldr	r3, [sp, #12]
    f71e:	80da      	strh	r2, [r3, #6]
    f720:	9b02      	ldr	r3, [sp, #8]
    f722:	3302      	adds	r3, #2
    f724:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
    f726:	9b02      	ldr	r3, [sp, #8]
    f728:	1c5a      	adds	r2, r3, #1
    f72a:	9202      	str	r2, [sp, #8]
    f72c:	781a      	ldrb	r2, [r3, #0]
    f72e:	9b03      	ldr	r3, [sp, #12]
    f730:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
    f732:	9b02      	ldr	r3, [sp, #8]
    f734:	1c5a      	adds	r2, r3, #1
    f736:	9202      	str	r2, [sp, #8]
    f738:	781a      	ldrb	r2, [r3, #0]
    f73a:	9b03      	ldr	r3, [sp, #12]
    f73c:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
    f73e:	9b03      	ldr	r3, [sp, #12]
    f740:	330a      	adds	r3, #10
    f742:	9902      	ldr	r1, [sp, #8]
    f744:	4618      	mov	r0, r3
    f746:	f7fc fd75 	bl	c234 <BdaCpy>
    f74a:	9b02      	ldr	r3, [sp, #8]
    f74c:	3306      	adds	r3, #6
    f74e:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
    f750:	9b02      	ldr	r3, [sp, #8]
    f752:	1c5a      	adds	r2, r3, #1
    f754:	9202      	str	r2, [sp, #8]
    f756:	781a      	ldrb	r2, [r3, #0]
    f758:	9b03      	ldr	r3, [sp, #12]
    f75a:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
    f75c:	9b02      	ldr	r3, [sp, #8]
    f75e:	781b      	ldrb	r3, [r3, #0]
    f760:	b29a      	uxth	r2, r3
    f762:	9b02      	ldr	r3, [sp, #8]
    f764:	3301      	adds	r3, #1
    f766:	781b      	ldrb	r3, [r3, #0]
    f768:	b29b      	uxth	r3, r3
    f76a:	021b      	lsls	r3, r3, #8
    f76c:	b29b      	uxth	r3, r3
    f76e:	4413      	add	r3, r2
    f770:	b29a      	uxth	r2, r3
    f772:	9b03      	ldr	r3, [sp, #12]
    f774:	825a      	strh	r2, [r3, #18]
    f776:	9b02      	ldr	r3, [sp, #8]
    f778:	3302      	adds	r3, #2
    f77a:	9302      	str	r3, [sp, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
    f77c:	9b02      	ldr	r3, [sp, #8]
    f77e:	1c5a      	adds	r2, r3, #1
    f780:	9202      	str	r2, [sp, #8]
    f782:	781a      	ldrb	r2, [r3, #0]
    f784:	9b03      	ldr	r3, [sp, #12]
    f786:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
    f788:	9b03      	ldr	r3, [sp, #12]
    f78a:	791a      	ldrb	r2, [r3, #4]
    f78c:	9b03      	ldr	r3, [sp, #12]
    f78e:	70da      	strb	r2, [r3, #3]
}
    f790:	bf00      	nop
    f792:	b005      	add	sp, #20
    f794:	f85d fb04 	ldr.w	pc, [sp], #4

0000f798 <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
    f798:	b500      	push	{lr}
    f79a:	b085      	sub	sp, #20
    f79c:	9001      	str	r0, [sp, #4]
    f79e:	460b      	mov	r3, r1
    f7a0:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
    f7a4:	9b01      	ldr	r3, [sp, #4]
    f7a6:	799b      	ldrb	r3, [r3, #6]
    f7a8:	f88d 300f 	strb.w	r3, [sp, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
    f7ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f7b0:	2bf7      	cmp	r3, #247	; 0xf7
    f7b2:	d859      	bhi.n	f868 <hciEvtProcessLePerAdvReport+0xd0>
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
    f7b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f7b8:	b29b      	uxth	r3, r3
    f7ba:	3310      	adds	r3, #16
    f7bc:	b29b      	uxth	r3, r3
    f7be:	4618      	mov	r0, r3
    f7c0:	f010 f80a 	bl	1f7d8 <WsfBufAlloc>
    f7c4:	9002      	str	r0, [sp, #8]
    f7c6:	9b02      	ldr	r3, [sp, #8]
    f7c8:	2b00      	cmp	r3, #0
    f7ca:	d04e      	beq.n	f86a <hciEvtProcessLePerAdvReport+0xd2>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
    f7cc:	9b01      	ldr	r3, [sp, #4]
    f7ce:	781b      	ldrb	r3, [r3, #0]
    f7d0:	b29a      	uxth	r2, r3
    f7d2:	9b01      	ldr	r3, [sp, #4]
    f7d4:	3301      	adds	r3, #1
    f7d6:	781b      	ldrb	r3, [r3, #0]
    f7d8:	b29b      	uxth	r3, r3
    f7da:	021b      	lsls	r3, r3, #8
    f7dc:	b29b      	uxth	r3, r3
    f7de:	4413      	add	r3, r2
    f7e0:	b29a      	uxth	r2, r3
    f7e2:	9b02      	ldr	r3, [sp, #8]
    f7e4:	809a      	strh	r2, [r3, #4]
    f7e6:	9b01      	ldr	r3, [sp, #4]
    f7e8:	3302      	adds	r3, #2
    f7ea:	9301      	str	r3, [sp, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
    f7ec:	9b01      	ldr	r3, [sp, #4]
    f7ee:	1c5a      	adds	r2, r3, #1
    f7f0:	9201      	str	r2, [sp, #4]
    f7f2:	781a      	ldrb	r2, [r3, #0]
    f7f4:	9b02      	ldr	r3, [sp, #8]
    f7f6:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
    f7f8:	9b01      	ldr	r3, [sp, #4]
    f7fa:	1c5a      	adds	r2, r3, #1
    f7fc:	9201      	str	r2, [sp, #4]
    f7fe:	781a      	ldrb	r2, [r3, #0]
    f800:	9b02      	ldr	r3, [sp, #8]
    f802:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
    f804:	9b01      	ldr	r3, [sp, #4]
    f806:	1c5a      	adds	r2, r3, #1
    f808:	9201      	str	r2, [sp, #4]
    f80a:	781a      	ldrb	r2, [r3, #0]
    f80c:	9b02      	ldr	r3, [sp, #8]
    f80e:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
    f810:	9b01      	ldr	r3, [sp, #4]
    f812:	1c5a      	adds	r2, r3, #1
    f814:	9201      	str	r2, [sp, #4]
    f816:	781a      	ldrb	r2, [r3, #0]
    f818:	9b02      	ldr	r3, [sp, #8]
    f81a:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
    f81c:	9b01      	ldr	r3, [sp, #4]
    f81e:	1c5a      	adds	r2, r3, #1
    f820:	9201      	str	r2, [sp, #4]
    f822:	781b      	ldrb	r3, [r3, #0]
    f824:	b29a      	uxth	r2, r3
    f826:	9b02      	ldr	r3, [sp, #8]
    f828:	815a      	strh	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
    f82a:	9b02      	ldr	r3, [sp, #8]
    f82c:	f103 0210 	add.w	r2, r3, #16
    f830:	9b02      	ldr	r3, [sp, #8]
    f832:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
    f834:	9b02      	ldr	r3, [sp, #8]
    f836:	68d8      	ldr	r0, [r3, #12]
    f838:	9b02      	ldr	r3, [sp, #8]
    f83a:	895b      	ldrh	r3, [r3, #10]
    f83c:	461a      	mov	r2, r3
    f83e:	9901      	ldr	r1, [sp, #4]
    f840:	f7fc fc5e 	bl	c100 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
    f844:	9b02      	ldr	r3, [sp, #8]
    f846:	2200      	movs	r2, #0
    f848:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
    f84a:	9b02      	ldr	r3, [sp, #8]
    f84c:	2231      	movs	r2, #49	; 0x31
    f84e:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
    f850:	9b02      	ldr	r3, [sp, #8]
    f852:	7a5a      	ldrb	r2, [r3, #9]
    f854:	9b02      	ldr	r3, [sp, #8]
    f856:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
    f858:	4b05      	ldr	r3, [pc, #20]	; (f870 <hciEvtProcessLePerAdvReport+0xd8>)
    f85a:	689b      	ldr	r3, [r3, #8]
    f85c:	9802      	ldr	r0, [sp, #8]
    f85e:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
    f860:	9802      	ldr	r0, [sp, #8]
    f862:	f00f fff7 	bl	1f854 <WsfBufFree>
    f866:	e000      	b.n	f86a <hciEvtProcessLePerAdvReport+0xd2>
    return;
    f868:	bf00      	nop
  }
}
    f86a:	b005      	add	sp, #20
    f86c:	f85d fb04 	ldr.w	pc, [sp], #4
    f870:	10004230 	.word	0x10004230

0000f874 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    f874:	b084      	sub	sp, #16
    f876:	9003      	str	r0, [sp, #12]
    f878:	9102      	str	r1, [sp, #8]
    f87a:	4613      	mov	r3, r2
    f87c:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
    f880:	9b02      	ldr	r3, [sp, #8]
    f882:	1c5a      	adds	r2, r3, #1
    f884:	9202      	str	r2, [sp, #8]
    f886:	781a      	ldrb	r2, [r3, #0]
    f888:	9b03      	ldr	r3, [sp, #12]
    f88a:	70da      	strb	r2, [r3, #3]
}
    f88c:	bf00      	nop
    f88e:	b004      	add	sp, #16
    f890:	4770      	bx	lr
	...

0000f894 <hciEvtProcessLeConnIQReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeConnIQReport(uint8_t *p, uint8_t len)
{
    f894:	b500      	push	{lr}
    f896:	b085      	sub	sp, #20
    f898:	9001      	str	r0, [sp, #4]
    f89a:	460b      	mov	r3, r1
    f89c:	f88d 3003 	strb.w	r3, [sp, #3]
    hciLeConnIQReportEvt_t *pMsg;
    APP_TRACE_INFO0("hciEvtProcessLeConnIQReport");

    if ((pMsg = WsfBufAlloc(sizeof(hciLeConnIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
    f8a0:	20c0      	movs	r0, #192	; 0xc0
    f8a2:	f00f ff99 	bl	1f7d8 <WsfBufAlloc>
    f8a6:	9003      	str	r0, [sp, #12]
    f8a8:	9b03      	ldr	r3, [sp, #12]
    f8aa:	2b00      	cmp	r3, #0
    f8ac:	f000 808e 	beq.w	f9cc <hciEvtProcessLeConnIQReport+0x138>
    {
        APP_TRACE_INFO0("rcv Le ConnIQ Report...");
        BSTREAM_TO_UINT16(pMsg->handle, p);
    f8b0:	9b01      	ldr	r3, [sp, #4]
    f8b2:	781b      	ldrb	r3, [r3, #0]
    f8b4:	b29a      	uxth	r2, r3
    f8b6:	9b01      	ldr	r3, [sp, #4]
    f8b8:	3301      	adds	r3, #1
    f8ba:	781b      	ldrb	r3, [r3, #0]
    f8bc:	b29b      	uxth	r3, r3
    f8be:	021b      	lsls	r3, r3, #8
    f8c0:	b29b      	uxth	r3, r3
    f8c2:	4413      	add	r3, r2
    f8c4:	b29a      	uxth	r2, r3
    f8c6:	9b03      	ldr	r3, [sp, #12]
    f8c8:	809a      	strh	r2, [r3, #4]
    f8ca:	9b01      	ldr	r3, [sp, #4]
    f8cc:	3302      	adds	r3, #2
    f8ce:	9301      	str	r3, [sp, #4]
        BSTREAM_TO_UINT8(pMsg->rxPhy, p);
    f8d0:	9b01      	ldr	r3, [sp, #4]
    f8d2:	1c5a      	adds	r2, r3, #1
    f8d4:	9201      	str	r2, [sp, #4]
    f8d6:	781a      	ldrb	r2, [r3, #0]
    f8d8:	9b03      	ldr	r3, [sp, #12]
    f8da:	719a      	strb	r2, [r3, #6]
        BSTREAM_TO_UINT8(pMsg->dataChIdx, p);
    f8dc:	9b01      	ldr	r3, [sp, #4]
    f8de:	1c5a      	adds	r2, r3, #1
    f8e0:	9201      	str	r2, [sp, #4]
    f8e2:	781a      	ldrb	r2, [r3, #0]
    f8e4:	9b03      	ldr	r3, [sp, #12]
    f8e6:	71da      	strb	r2, [r3, #7]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
    f8e8:	9b01      	ldr	r3, [sp, #4]
    f8ea:	781b      	ldrb	r3, [r3, #0]
    f8ec:	b29a      	uxth	r2, r3
    f8ee:	9b01      	ldr	r3, [sp, #4]
    f8f0:	3301      	adds	r3, #1
    f8f2:	781b      	ldrb	r3, [r3, #0]
    f8f4:	b29b      	uxth	r3, r3
    f8f6:	021b      	lsls	r3, r3, #8
    f8f8:	b29b      	uxth	r3, r3
    f8fa:	4413      	add	r3, r2
    f8fc:	b29b      	uxth	r3, r3
    f8fe:	b21a      	sxth	r2, r3
    f900:	9b03      	ldr	r3, [sp, #12]
    f902:	811a      	strh	r2, [r3, #8]
    f904:	9b01      	ldr	r3, [sp, #4]
    f906:	3302      	adds	r3, #2
    f908:	9301      	str	r3, [sp, #4]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
    f90a:	9b01      	ldr	r3, [sp, #4]
    f90c:	1c5a      	adds	r2, r3, #1
    f90e:	9201      	str	r2, [sp, #4]
    f910:	781a      	ldrb	r2, [r3, #0]
    f912:	9b03      	ldr	r3, [sp, #12]
    f914:	729a      	strb	r2, [r3, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
    f916:	9b01      	ldr	r3, [sp, #4]
    f918:	1c5a      	adds	r2, r3, #1
    f91a:	9201      	str	r2, [sp, #4]
    f91c:	781a      	ldrb	r2, [r3, #0]
    f91e:	9b03      	ldr	r3, [sp, #12]
    f920:	72da      	strb	r2, [r3, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
    f922:	9b01      	ldr	r3, [sp, #4]
    f924:	1c5a      	adds	r2, r3, #1
    f926:	9201      	str	r2, [sp, #4]
    f928:	781a      	ldrb	r2, [r3, #0]
    f92a:	9b03      	ldr	r3, [sp, #12]
    f92c:	731a      	strb	r2, [r3, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
    f92e:	9b01      	ldr	r3, [sp, #4]
    f930:	1c5a      	adds	r2, r3, #1
    f932:	9201      	str	r2, [sp, #4]
    f934:	781a      	ldrb	r2, [r3, #0]
    f936:	9b03      	ldr	r3, [sp, #12]
    f938:	735a      	strb	r2, [r3, #13]
        BSTREAM_TO_UINT16(pMsg->connEvtCnt, p);
    f93a:	9b01      	ldr	r3, [sp, #4]
    f93c:	781b      	ldrb	r3, [r3, #0]
    f93e:	b29a      	uxth	r2, r3
    f940:	9b01      	ldr	r3, [sp, #4]
    f942:	3301      	adds	r3, #1
    f944:	781b      	ldrb	r3, [r3, #0]
    f946:	b29b      	uxth	r3, r3
    f948:	021b      	lsls	r3, r3, #8
    f94a:	b29b      	uxth	r3, r3
    f94c:	4413      	add	r3, r2
    f94e:	b29a      	uxth	r2, r3
    f950:	9b03      	ldr	r3, [sp, #12]
    f952:	81da      	strh	r2, [r3, #14]
    f954:	9b01      	ldr	r3, [sp, #4]
    f956:	3302      	adds	r3, #2
    f958:	9301      	str	r3, [sp, #4]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
    f95a:	9b01      	ldr	r3, [sp, #4]
    f95c:	1c5a      	adds	r2, r3, #1
    f95e:	9201      	str	r2, [sp, #4]
    f960:	781a      	ldrb	r2, [r3, #0]
    f962:	9b03      	ldr	r3, [sp, #12]
    f964:	741a      	strb	r2, [r3, #16]

        /* Copy IQ sample data to space after end of report struct */
        pMsg->pISample = (int8_t *) (pMsg + 1);
    f966:	9b03      	ldr	r3, [sp, #12]
    f968:	f103 021c 	add.w	r2, r3, #28
    f96c:	9b03      	ldr	r3, [sp, #12]
    f96e:	615a      	str	r2, [r3, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
    f970:	9b03      	ldr	r3, [sp, #12]
    f972:	6958      	ldr	r0, [r3, #20]
    f974:	9b03      	ldr	r3, [sp, #12]
    f976:	7c1b      	ldrb	r3, [r3, #16]
    f978:	461a      	mov	r2, r3
    f97a:	9901      	ldr	r1, [sp, #4]
    f97c:	f7fc fbc0 	bl	c100 <memcpy>
        p += pMsg->sampleCnt;
    f980:	9b03      	ldr	r3, [sp, #12]
    f982:	7c1b      	ldrb	r3, [r3, #16]
    f984:	461a      	mov	r2, r3
    f986:	9b01      	ldr	r3, [sp, #4]
    f988:	4413      	add	r3, r2
    f98a:	9301      	str	r3, [sp, #4]

        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
    f98c:	9b03      	ldr	r3, [sp, #12]
    f98e:	331c      	adds	r3, #28
    f990:	f103 0252 	add.w	r2, r3, #82	; 0x52
    f994:	9b03      	ldr	r3, [sp, #12]
    f996:	619a      	str	r2, [r3, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
    f998:	9b03      	ldr	r3, [sp, #12]
    f99a:	6958      	ldr	r0, [r3, #20]
    f99c:	9b03      	ldr	r3, [sp, #12]
    f99e:	7c1b      	ldrb	r3, [r3, #16]
    f9a0:	461a      	mov	r2, r3
    f9a2:	9901      	ldr	r1, [sp, #4]
    f9a4:	f7fc fbac 	bl	c100 <memcpy>

        pMsg->hdr.param = pMsg->handle;
    f9a8:	9b03      	ldr	r3, [sp, #12]
    f9aa:	889a      	ldrh	r2, [r3, #4]
    f9ac:	9b03      	ldr	r3, [sp, #12]
    f9ae:	801a      	strh	r2, [r3, #0]
        pMsg->hdr.status = pMsg->pktStatus;
    f9b0:	9b03      	ldr	r3, [sp, #12]
    f9b2:	7b5a      	ldrb	r2, [r3, #13]
    f9b4:	9b03      	ldr	r3, [sp, #12]
    f9b6:	70da      	strb	r2, [r3, #3]
        pMsg->hdr.event = HCI_LE_CONN_IQ_REPORT_CBACK_EVT;
    f9b8:	9b03      	ldr	r3, [sp, #12]
    f9ba:	223d      	movs	r2, #61	; 0x3d
    f9bc:	709a      	strb	r2, [r3, #2]
        
        /* execute callback */
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
    f9be:	4b05      	ldr	r3, [pc, #20]	; (f9d4 <hciEvtProcessLeConnIQReport+0x140>)
    f9c0:	689b      	ldr	r3, [r3, #8]
    f9c2:	9803      	ldr	r0, [sp, #12]
    f9c4:	4798      	blx	r3

        /* free buffer */
        WsfBufFree(pMsg);
    f9c6:	9803      	ldr	r0, [sp, #12]
    f9c8:	f00f ff44 	bl	1f854 <WsfBufFree>
    }
}
    f9cc:	bf00      	nop
    f9ce:	b005      	add	sp, #20
    f9d0:	f85d fb04 	ldr.w	pc, [sp], #4
    f9d4:	10004230 	.word	0x10004230

0000f9d8 <hciEvtProcessLeConlessIQReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeConlessIQReport(uint8_t *p, uint8_t len)
{
    f9d8:	b500      	push	{lr}
    f9da:	b085      	sub	sp, #20
    f9dc:	9001      	str	r0, [sp, #4]
    f9de:	460b      	mov	r3, r1
    f9e0:	f88d 3003 	strb.w	r3, [sp, #3]
    hciLeConlessIQReportEvt_t *pMsg;

    if ((pMsg = WsfBufAlloc(sizeof(hciLeConlessIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
    f9e4:	20c0      	movs	r0, #192	; 0xc0
    f9e6:	f00f fef7 	bl	1f7d8 <WsfBufAlloc>
    f9ea:	9003      	str	r0, [sp, #12]
    f9ec:	9b03      	ldr	r3, [sp, #12]
    f9ee:	2b00      	cmp	r3, #0
    f9f0:	f000 8088 	beq.w	fb04 <hciEvtProcessLeConlessIQReport+0x12c>
    {
        APP_TRACE_INFO0("rcv Le Conntless IQ Report...");
        BSTREAM_TO_UINT16(pMsg->synHdl, p);
    f9f4:	9b01      	ldr	r3, [sp, #4]
    f9f6:	781b      	ldrb	r3, [r3, #0]
    f9f8:	b29a      	uxth	r2, r3
    f9fa:	9b01      	ldr	r3, [sp, #4]
    f9fc:	3301      	adds	r3, #1
    f9fe:	781b      	ldrb	r3, [r3, #0]
    fa00:	b29b      	uxth	r3, r3
    fa02:	021b      	lsls	r3, r3, #8
    fa04:	b29b      	uxth	r3, r3
    fa06:	4413      	add	r3, r2
    fa08:	b29a      	uxth	r2, r3
    fa0a:	9b03      	ldr	r3, [sp, #12]
    fa0c:	809a      	strh	r2, [r3, #4]
    fa0e:	9b01      	ldr	r3, [sp, #4]
    fa10:	3302      	adds	r3, #2
    fa12:	9301      	str	r3, [sp, #4]
        BSTREAM_TO_UINT8(pMsg->chIdx, p);
    fa14:	9b01      	ldr	r3, [sp, #4]
    fa16:	1c5a      	adds	r2, r3, #1
    fa18:	9201      	str	r2, [sp, #4]
    fa1a:	781a      	ldrb	r2, [r3, #0]
    fa1c:	9b03      	ldr	r3, [sp, #12]
    fa1e:	719a      	strb	r2, [r3, #6]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
    fa20:	9b01      	ldr	r3, [sp, #4]
    fa22:	781b      	ldrb	r3, [r3, #0]
    fa24:	b29a      	uxth	r2, r3
    fa26:	9b01      	ldr	r3, [sp, #4]
    fa28:	3301      	adds	r3, #1
    fa2a:	781b      	ldrb	r3, [r3, #0]
    fa2c:	b29b      	uxth	r3, r3
    fa2e:	021b      	lsls	r3, r3, #8
    fa30:	b29b      	uxth	r3, r3
    fa32:	4413      	add	r3, r2
    fa34:	b29b      	uxth	r3, r3
    fa36:	b21a      	sxth	r2, r3
    fa38:	9b03      	ldr	r3, [sp, #12]
    fa3a:	811a      	strh	r2, [r3, #8]
    fa3c:	9b01      	ldr	r3, [sp, #4]
    fa3e:	3302      	adds	r3, #2
    fa40:	9301      	str	r3, [sp, #4]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
    fa42:	9b01      	ldr	r3, [sp, #4]
    fa44:	1c5a      	adds	r2, r3, #1
    fa46:	9201      	str	r2, [sp, #4]
    fa48:	781a      	ldrb	r2, [r3, #0]
    fa4a:	9b03      	ldr	r3, [sp, #12]
    fa4c:	729a      	strb	r2, [r3, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
    fa4e:	9b01      	ldr	r3, [sp, #4]
    fa50:	1c5a      	adds	r2, r3, #1
    fa52:	9201      	str	r2, [sp, #4]
    fa54:	781a      	ldrb	r2, [r3, #0]
    fa56:	9b03      	ldr	r3, [sp, #12]
    fa58:	72da      	strb	r2, [r3, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
    fa5a:	9b01      	ldr	r3, [sp, #4]
    fa5c:	1c5a      	adds	r2, r3, #1
    fa5e:	9201      	str	r2, [sp, #4]
    fa60:	781a      	ldrb	r2, [r3, #0]
    fa62:	9b03      	ldr	r3, [sp, #12]
    fa64:	731a      	strb	r2, [r3, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
    fa66:	9b01      	ldr	r3, [sp, #4]
    fa68:	1c5a      	adds	r2, r3, #1
    fa6a:	9201      	str	r2, [sp, #4]
    fa6c:	781a      	ldrb	r2, [r3, #0]
    fa6e:	9b03      	ldr	r3, [sp, #12]
    fa70:	735a      	strb	r2, [r3, #13]
        BSTREAM_TO_UINT16(pMsg->paEvtCnt, p);
    fa72:	9b01      	ldr	r3, [sp, #4]
    fa74:	781b      	ldrb	r3, [r3, #0]
    fa76:	b29a      	uxth	r2, r3
    fa78:	9b01      	ldr	r3, [sp, #4]
    fa7a:	3301      	adds	r3, #1
    fa7c:	781b      	ldrb	r3, [r3, #0]
    fa7e:	b29b      	uxth	r3, r3
    fa80:	021b      	lsls	r3, r3, #8
    fa82:	b29b      	uxth	r3, r3
    fa84:	4413      	add	r3, r2
    fa86:	b29a      	uxth	r2, r3
    fa88:	9b03      	ldr	r3, [sp, #12]
    fa8a:	81da      	strh	r2, [r3, #14]
    fa8c:	9b01      	ldr	r3, [sp, #4]
    fa8e:	3302      	adds	r3, #2
    fa90:	9301      	str	r3, [sp, #4]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
    fa92:	9b01      	ldr	r3, [sp, #4]
    fa94:	1c5a      	adds	r2, r3, #1
    fa96:	9201      	str	r2, [sp, #4]
    fa98:	781a      	ldrb	r2, [r3, #0]
    fa9a:	9b03      	ldr	r3, [sp, #12]
    fa9c:	741a      	strb	r2, [r3, #16]

        /* Copy IQ sample data to space after end of report struct */
        pMsg->pISample = (int8_t *) (pMsg + 1);
    fa9e:	9b03      	ldr	r3, [sp, #12]
    faa0:	f103 021c 	add.w	r2, r3, #28
    faa4:	9b03      	ldr	r3, [sp, #12]
    faa6:	615a      	str	r2, [r3, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
    faa8:	9b03      	ldr	r3, [sp, #12]
    faaa:	6958      	ldr	r0, [r3, #20]
    faac:	9b03      	ldr	r3, [sp, #12]
    faae:	7c1b      	ldrb	r3, [r3, #16]
    fab0:	461a      	mov	r2, r3
    fab2:	9901      	ldr	r1, [sp, #4]
    fab4:	f7fc fb24 	bl	c100 <memcpy>
        p += pMsg->sampleCnt;
    fab8:	9b03      	ldr	r3, [sp, #12]
    faba:	7c1b      	ldrb	r3, [r3, #16]
    fabc:	461a      	mov	r2, r3
    fabe:	9b01      	ldr	r3, [sp, #4]
    fac0:	4413      	add	r3, r2
    fac2:	9301      	str	r3, [sp, #4]

        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
    fac4:	9b03      	ldr	r3, [sp, #12]
    fac6:	331c      	adds	r3, #28
    fac8:	f103 0252 	add.w	r2, r3, #82	; 0x52
    facc:	9b03      	ldr	r3, [sp, #12]
    face:	619a      	str	r2, [r3, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
    fad0:	9b03      	ldr	r3, [sp, #12]
    fad2:	6958      	ldr	r0, [r3, #20]
    fad4:	9b03      	ldr	r3, [sp, #12]
    fad6:	7c1b      	ldrb	r3, [r3, #16]
    fad8:	461a      	mov	r2, r3
    fada:	9901      	ldr	r1, [sp, #4]
    fadc:	f7fc fb10 	bl	c100 <memcpy>

        pMsg->hdr.param = pMsg->synHdl;
    fae0:	9b03      	ldr	r3, [sp, #12]
    fae2:	889a      	ldrh	r2, [r3, #4]
    fae4:	9b03      	ldr	r3, [sp, #12]
    fae6:	801a      	strh	r2, [r3, #0]
        pMsg->hdr.status = pMsg->pktStatus;
    fae8:	9b03      	ldr	r3, [sp, #12]
    faea:	7b5a      	ldrb	r2, [r3, #13]
    faec:	9b03      	ldr	r3, [sp, #12]
    faee:	70da      	strb	r2, [r3, #3]
        pMsg->hdr.event = HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT;
    faf0:	9b03      	ldr	r3, [sp, #12]
    faf2:	2247      	movs	r2, #71	; 0x47
    faf4:	709a      	strb	r2, [r3, #2]
        
        /* execute callback */
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
    faf6:	4b05      	ldr	r3, [pc, #20]	; (fb0c <hciEvtProcessLeConlessIQReport+0x134>)
    faf8:	689b      	ldr	r3, [r3, #8]
    fafa:	9803      	ldr	r0, [sp, #12]
    fafc:	4798      	blx	r3

        /* free buffer */
        WsfBufFree(pMsg);
    fafe:	9803      	ldr	r0, [sp, #12]
    fb00:	f00f fea8 	bl	1f854 <WsfBufFree>
    }
}
    fb04:	bf00      	nop
    fb06:	b005      	add	sp, #20
    fb08:	f85d fb04 	ldr.w	pc, [sp], #4
    fb0c:	10004230 	.word	0x10004230

0000fb10 <hciEvtParseLeSetConnCteRcvParm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteRcvParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    fb10:	b084      	sub	sp, #16
    fb12:	9003      	str	r0, [sp, #12]
    fb14:	9102      	str	r1, [sp, #8]
    fb16:	4613      	mov	r3, r2
    fb18:	f88d 3007 	strb.w	r3, [sp, #7]
    BSTREAM_TO_UINT8(pMsg->leSetConnCteRxParamsCmdCmpl.status, p);
    fb1c:	9b02      	ldr	r3, [sp, #8]
    fb1e:	1c5a      	adds	r2, r3, #1
    fb20:	9202      	str	r2, [sp, #8]
    fb22:	781a      	ldrb	r2, [r3, #0]
    fb24:	9b03      	ldr	r3, [sp, #12]
    fb26:	711a      	strb	r2, [r3, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteRxParamsCmdCmpl.handle, p);
    fb28:	9b02      	ldr	r3, [sp, #8]
    fb2a:	781b      	ldrb	r3, [r3, #0]
    fb2c:	b29a      	uxth	r2, r3
    fb2e:	9b02      	ldr	r3, [sp, #8]
    fb30:	3301      	adds	r3, #1
    fb32:	781b      	ldrb	r3, [r3, #0]
    fb34:	b29b      	uxth	r3, r3
    fb36:	021b      	lsls	r3, r3, #8
    fb38:	b29b      	uxth	r3, r3
    fb3a:	4413      	add	r3, r2
    fb3c:	b29a      	uxth	r2, r3
    fb3e:	9b03      	ldr	r3, [sp, #12]
    fb40:	80da      	strh	r2, [r3, #6]
    fb42:	9b02      	ldr	r3, [sp, #8]
    fb44:	3302      	adds	r3, #2
    fb46:	9302      	str	r3, [sp, #8]
    
    pMsg->hdr.status = pMsg->leSetConnCteRxParamsCmdCmpl.status;
    fb48:	9b03      	ldr	r3, [sp, #12]
    fb4a:	791a      	ldrb	r2, [r3, #4]
    fb4c:	9b03      	ldr	r3, [sp, #12]
    fb4e:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.param = pMsg->leSetConnCteRxParamsCmdCmpl.handle;
    fb50:	9b03      	ldr	r3, [sp, #12]
    fb52:	88da      	ldrh	r2, [r3, #6]
    fb54:	9b03      	ldr	r3, [sp, #12]
    fb56:	801a      	strh	r2, [r3, #0]
}
    fb58:	bf00      	nop
    fb5a:	b004      	add	sp, #16
    fb5c:	4770      	bx	lr

0000fb5e <hciEvtParseLeSetConnCteTxParm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteTxParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    fb5e:	b084      	sub	sp, #16
    fb60:	9003      	str	r0, [sp, #12]
    fb62:	9102      	str	r1, [sp, #8]
    fb64:	4613      	mov	r3, r2
    fb66:	f88d 3007 	strb.w	r3, [sp, #7]
    BSTREAM_TO_UINT8(pMsg->leSetConnCteTxParamsCmdCmpl.status, p);
    fb6a:	9b02      	ldr	r3, [sp, #8]
    fb6c:	1c5a      	adds	r2, r3, #1
    fb6e:	9202      	str	r2, [sp, #8]
    fb70:	781a      	ldrb	r2, [r3, #0]
    fb72:	9b03      	ldr	r3, [sp, #12]
    fb74:	711a      	strb	r2, [r3, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteTxParamsCmdCmpl.handle, p);
    fb76:	9b02      	ldr	r3, [sp, #8]
    fb78:	781b      	ldrb	r3, [r3, #0]
    fb7a:	b29a      	uxth	r2, r3
    fb7c:	9b02      	ldr	r3, [sp, #8]
    fb7e:	3301      	adds	r3, #1
    fb80:	781b      	ldrb	r3, [r3, #0]
    fb82:	b29b      	uxth	r3, r3
    fb84:	021b      	lsls	r3, r3, #8
    fb86:	b29b      	uxth	r3, r3
    fb88:	4413      	add	r3, r2
    fb8a:	b29a      	uxth	r2, r3
    fb8c:	9b03      	ldr	r3, [sp, #12]
    fb8e:	80da      	strh	r2, [r3, #6]
    fb90:	9b02      	ldr	r3, [sp, #8]
    fb92:	3302      	adds	r3, #2
    fb94:	9302      	str	r3, [sp, #8]
    
    pMsg->hdr.status = pMsg->leSetConnCteTxParamsCmdCmpl.status;
    fb96:	9b03      	ldr	r3, [sp, #12]
    fb98:	791a      	ldrb	r2, [r3, #4]
    fb9a:	9b03      	ldr	r3, [sp, #12]
    fb9c:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.param = pMsg->leSetConnCteTxParamsCmdCmpl.handle;
    fb9e:	9b03      	ldr	r3, [sp, #12]
    fba0:	88da      	ldrh	r2, [r3, #6]
    fba2:	9b03      	ldr	r3, [sp, #12]
    fba4:	801a      	strh	r2, [r3, #0]
}
    fba6:	bf00      	nop
    fba8:	b004      	add	sp, #16
    fbaa:	4770      	bx	lr

0000fbac <hciEvtParseLeConnCteReqEn>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteReqEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    fbac:	b084      	sub	sp, #16
    fbae:	9003      	str	r0, [sp, #12]
    fbb0:	9102      	str	r1, [sp, #8]
    fbb2:	4613      	mov	r3, r2
    fbb4:	f88d 3007 	strb.w	r3, [sp, #7]
    BSTREAM_TO_UINT8(pMsg->leConnCteReqEnableCmdCmpl.status, p);
    fbb8:	9b02      	ldr	r3, [sp, #8]
    fbba:	1c5a      	adds	r2, r3, #1
    fbbc:	9202      	str	r2, [sp, #8]
    fbbe:	781a      	ldrb	r2, [r3, #0]
    fbc0:	9b03      	ldr	r3, [sp, #12]
    fbc2:	711a      	strb	r2, [r3, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteReqEnableCmdCmpl.handle, p);
    fbc4:	9b02      	ldr	r3, [sp, #8]
    fbc6:	781b      	ldrb	r3, [r3, #0]
    fbc8:	b29a      	uxth	r2, r3
    fbca:	9b02      	ldr	r3, [sp, #8]
    fbcc:	3301      	adds	r3, #1
    fbce:	781b      	ldrb	r3, [r3, #0]
    fbd0:	b29b      	uxth	r3, r3
    fbd2:	021b      	lsls	r3, r3, #8
    fbd4:	b29b      	uxth	r3, r3
    fbd6:	4413      	add	r3, r2
    fbd8:	b29a      	uxth	r2, r3
    fbda:	9b03      	ldr	r3, [sp, #12]
    fbdc:	80da      	strh	r2, [r3, #6]
    fbde:	9b02      	ldr	r3, [sp, #8]
    fbe0:	3302      	adds	r3, #2
    fbe2:	9302      	str	r3, [sp, #8]
    
    pMsg->hdr.status = pMsg->leConnCteReqEnableCmdCmpl.status;
    fbe4:	9b03      	ldr	r3, [sp, #12]
    fbe6:	791a      	ldrb	r2, [r3, #4]
    fbe8:	9b03      	ldr	r3, [sp, #12]
    fbea:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.param = pMsg->leConnCteReqEnableCmdCmpl.handle;
    fbec:	9b03      	ldr	r3, [sp, #12]
    fbee:	88da      	ldrh	r2, [r3, #6]
    fbf0:	9b03      	ldr	r3, [sp, #12]
    fbf2:	801a      	strh	r2, [r3, #0]
}
    fbf4:	bf00      	nop
    fbf6:	b004      	add	sp, #16
    fbf8:	4770      	bx	lr

0000fbfa <hciEvtParseLeConnCteRspEn>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteRspEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    fbfa:	b084      	sub	sp, #16
    fbfc:	9003      	str	r0, [sp, #12]
    fbfe:	9102      	str	r1, [sp, #8]
    fc00:	4613      	mov	r3, r2
    fc02:	f88d 3007 	strb.w	r3, [sp, #7]
    BSTREAM_TO_UINT8(pMsg->leConnCteRspEnableCmdCmpl.status, p);
    fc06:	9b02      	ldr	r3, [sp, #8]
    fc08:	1c5a      	adds	r2, r3, #1
    fc0a:	9202      	str	r2, [sp, #8]
    fc0c:	781a      	ldrb	r2, [r3, #0]
    fc0e:	9b03      	ldr	r3, [sp, #12]
    fc10:	711a      	strb	r2, [r3, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteRspEnableCmdCmpl.handle, p);
    fc12:	9b02      	ldr	r3, [sp, #8]
    fc14:	781b      	ldrb	r3, [r3, #0]
    fc16:	b29a      	uxth	r2, r3
    fc18:	9b02      	ldr	r3, [sp, #8]
    fc1a:	3301      	adds	r3, #1
    fc1c:	781b      	ldrb	r3, [r3, #0]
    fc1e:	b29b      	uxth	r3, r3
    fc20:	021b      	lsls	r3, r3, #8
    fc22:	b29b      	uxth	r3, r3
    fc24:	4413      	add	r3, r2
    fc26:	b29a      	uxth	r2, r3
    fc28:	9b03      	ldr	r3, [sp, #12]
    fc2a:	80da      	strh	r2, [r3, #6]
    fc2c:	9b02      	ldr	r3, [sp, #8]
    fc2e:	3302      	adds	r3, #2
    fc30:	9302      	str	r3, [sp, #8]
    
    pMsg->hdr.status = pMsg->leConnCteRspEnableCmdCmpl.status;
    fc32:	9b03      	ldr	r3, [sp, #12]
    fc34:	791a      	ldrb	r2, [r3, #4]
    fc36:	9b03      	ldr	r3, [sp, #12]
    fc38:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.param = pMsg->leConnCteRspEnableCmdCmpl.handle;
    fc3a:	9b03      	ldr	r3, [sp, #12]
    fc3c:	88da      	ldrh	r2, [r3, #6]
    fc3e:	9b03      	ldr	r3, [sp, #12]
    fc40:	801a      	strh	r2, [r3, #0]
}
    fc42:	bf00      	nop
    fc44:	b004      	add	sp, #16
    fc46:	4770      	bx	lr

0000fc48 <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    fc48:	b084      	sub	sp, #16
    fc4a:	9003      	str	r0, [sp, #12]
    fc4c:	9102      	str	r1, [sp, #8]
    fc4e:	4613      	mov	r3, r2
    fc50:	f88d 3007 	strb.w	r3, [sp, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
    fc54:	9b02      	ldr	r3, [sp, #8]
    fc56:	781b      	ldrb	r3, [r3, #0]
    fc58:	b29a      	uxth	r2, r3
    fc5a:	9b02      	ldr	r3, [sp, #8]
    fc5c:	3301      	adds	r3, #1
    fc5e:	781b      	ldrb	r3, [r3, #0]
    fc60:	b29b      	uxth	r3, r3
    fc62:	021b      	lsls	r3, r3, #8
    fc64:	b29b      	uxth	r3, r3
    fc66:	4413      	add	r3, r2
    fc68:	b29a      	uxth	r2, r3
    fc6a:	9b03      	ldr	r3, [sp, #12]
    fc6c:	809a      	strh	r2, [r3, #4]
    fc6e:	9b02      	ldr	r3, [sp, #8]
    fc70:	3302      	adds	r3, #2
    fc72:	9302      	str	r3, [sp, #8]
}
    fc74:	bf00      	nop
    fc76:	b004      	add	sp, #16
    fc78:	4770      	bx	lr
	...

0000fc7c <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
    fc7c:	b500      	push	{lr}
    fc7e:	b085      	sub	sp, #20
    fc80:	9001      	str	r0, [sp, #4]
    fc82:	460b      	mov	r3, r1
    fc84:	f88d 3003 	strb.w	r3, [sp, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
    fc88:	9b01      	ldr	r3, [sp, #4]
    fc8a:	1c5a      	adds	r2, r3, #1
    fc8c:	9201      	str	r2, [sp, #4]
    fc8e:	781b      	ldrb	r3, [r3, #0]
    fc90:	f88d 300f 	strb.w	r3, [sp, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
    fc94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fc98:	2b0f      	cmp	r3, #15
    fc9a:	d850      	bhi.n	fd3e <hciEvtProcessLeDirectAdvReport+0xc2>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
    fc9c:	201c      	movs	r0, #28
    fc9e:	f00f fd9b 	bl	1f7d8 <WsfBufAlloc>
    fca2:	9002      	str	r0, [sp, #8]
    fca4:	9b02      	ldr	r3, [sp, #8]
    fca6:	2b00      	cmp	r3, #0
    fca8:	d04a      	beq.n	fd40 <hciEvtProcessLeDirectAdvReport+0xc4>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
    fcaa:	e03d      	b.n	fd28 <hciEvtProcessLeDirectAdvReport+0xac>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
    fcac:	9b01      	ldr	r3, [sp, #4]
    fcae:	1c5a      	adds	r2, r3, #1
    fcb0:	9201      	str	r2, [sp, #4]
    fcb2:	781a      	ldrb	r2, [r3, #0]
    fcb4:	9b02      	ldr	r3, [sp, #8]
    fcb6:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
    fcb8:	9b01      	ldr	r3, [sp, #4]
    fcba:	1c5a      	adds	r2, r3, #1
    fcbc:	9201      	str	r2, [sp, #4]
    fcbe:	781a      	ldrb	r2, [r3, #0]
    fcc0:	9b02      	ldr	r3, [sp, #8]
    fcc2:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
    fcc4:	9b02      	ldr	r3, [sp, #8]
    fcc6:	330c      	adds	r3, #12
    fcc8:	9901      	ldr	r1, [sp, #4]
    fcca:	4618      	mov	r0, r3
    fccc:	f7fc fab2 	bl	c234 <BdaCpy>
    fcd0:	9b01      	ldr	r3, [sp, #4]
    fcd2:	3306      	adds	r3, #6
    fcd4:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
    fcd6:	9b01      	ldr	r3, [sp, #4]
    fcd8:	1c5a      	adds	r2, r3, #1
    fcda:	9201      	str	r2, [sp, #4]
    fcdc:	781a      	ldrb	r2, [r3, #0]
    fcde:	9b02      	ldr	r3, [sp, #8]
    fce0:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
    fce2:	9b02      	ldr	r3, [sp, #8]
    fce4:	3313      	adds	r3, #19
    fce6:	9901      	ldr	r1, [sp, #4]
    fce8:	4618      	mov	r0, r3
    fcea:	f7fc faa3 	bl	c234 <BdaCpy>
    fcee:	9b01      	ldr	r3, [sp, #4]
    fcf0:	3306      	adds	r3, #6
    fcf2:	9301      	str	r3, [sp, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
    fcf4:	9b01      	ldr	r3, [sp, #4]
    fcf6:	1c5a      	adds	r2, r3, #1
    fcf8:	9201      	str	r2, [sp, #4]
    fcfa:	781b      	ldrb	r3, [r3, #0]
    fcfc:	b25a      	sxtb	r2, r3
    fcfe:	9b02      	ldr	r3, [sp, #8]
    fd00:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
    fd02:	9b02      	ldr	r3, [sp, #8]
    fd04:	2200      	movs	r2, #0
    fd06:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
    fd08:	9b02      	ldr	r3, [sp, #8]
    fd0a:	2200      	movs	r2, #0
    fd0c:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
    fd0e:	9b02      	ldr	r3, [sp, #8]
    fd10:	2200      	movs	r2, #0
    fd12:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
    fd14:	9b02      	ldr	r3, [sp, #8]
    fd16:	2206      	movs	r2, #6
    fd18:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
    fd1a:	9b02      	ldr	r3, [sp, #8]
    fd1c:	2200      	movs	r2, #0
    fd1e:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
    fd20:	4b09      	ldr	r3, [pc, #36]	; (fd48 <hciEvtProcessLeDirectAdvReport+0xcc>)
    fd22:	689b      	ldr	r3, [r3, #8]
    fd24:	9802      	ldr	r0, [sp, #8]
    fd26:	4798      	blx	r3
    while (i-- > 0)
    fd28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fd2c:	1e5a      	subs	r2, r3, #1
    fd2e:	f88d 200f 	strb.w	r2, [sp, #15]
    fd32:	2b00      	cmp	r3, #0
    fd34:	d1ba      	bne.n	fcac <hciEvtProcessLeDirectAdvReport+0x30>
    }

    /* free buffer */
    WsfBufFree(pMsg);
    fd36:	9802      	ldr	r0, [sp, #8]
    fd38:	f00f fd8c 	bl	1f854 <WsfBufFree>
    fd3c:	e000      	b.n	fd40 <hciEvtProcessLeDirectAdvReport+0xc4>
    return;
    fd3e:	bf00      	nop
  }
}
    fd40:	b005      	add	sp, #20
    fd42:	f85d fb04 	ldr.w	pc, [sp], #4
    fd46:	bf00      	nop
    fd48:	10004230 	.word	0x10004230

0000fd4c <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
    fd4c:	b082      	sub	sp, #8
    fd4e:	4603      	mov	r3, r0
    fd50:	460a      	mov	r2, r1
    fd52:	f88d 3007 	strb.w	r3, [sp, #7]
    fd56:	4613      	mov	r3, r2
    fd58:	f8ad 3004 	strh.w	r3, [sp, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
    fd5c:	bf00      	nop
    fd5e:	b002      	add	sp, #8
    fd60:	4770      	bx	lr

0000fd62 <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
    fd62:	b500      	push	{lr}
    fd64:	b085      	sub	sp, #20
    fd66:	9001      	str	r0, [sp, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
    fd68:	9b01      	ldr	r3, [sp, #4]
    fd6a:	1c5a      	adds	r2, r3, #1
    fd6c:	9201      	str	r2, [sp, #4]
    fd6e:	781b      	ldrb	r3, [r3, #0]
    fd70:	f88d 300f 	strb.w	r3, [sp, #15]
  BSTREAM_TO_UINT8(numPkts, p);
    fd74:	9b01      	ldr	r3, [sp, #4]
    fd76:	1c5a      	adds	r2, r3, #1
    fd78:	9201      	str	r2, [sp, #4]
    fd7a:	781b      	ldrb	r3, [r3, #0]
    fd7c:	f88d 300e 	strb.w	r3, [sp, #14]
  BSTREAM_TO_UINT16(opcode, p);
    fd80:	9b01      	ldr	r3, [sp, #4]
    fd82:	781b      	ldrb	r3, [r3, #0]
    fd84:	b29a      	uxth	r2, r3
    fd86:	9b01      	ldr	r3, [sp, #4]
    fd88:	3301      	adds	r3, #1
    fd8a:	781b      	ldrb	r3, [r3, #0]
    fd8c:	b29b      	uxth	r3, r3
    fd8e:	021b      	lsls	r3, r3, #8
    fd90:	b29b      	uxth	r3, r3
    fd92:	4413      	add	r3, r2
    fd94:	f8ad 300c 	strh.w	r3, [sp, #12]
    fd98:	9b01      	ldr	r3, [sp, #4]
    fd9a:	3302      	adds	r3, #2
    fd9c:	9301      	str	r3, [sp, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
    fd9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fda2:	2b00      	cmp	r3, #0
    fda4:	d007      	beq.n	fdb6 <hciEvtProcessCmdStatus+0x54>
  {
    hciEvtCmdStatusFailure(status, opcode);
    fda6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    fdaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fdae:	4611      	mov	r1, r2
    fdb0:	4618      	mov	r0, r3
    fdb2:	f7ff ffcb 	bl	fd4c <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
    fdb6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fdba:	4618      	mov	r0, r3
    fdbc:	f7fc ff98 	bl	ccf0 <hciCmdRecvCmpl>
}
    fdc0:	bf00      	nop
    fdc2:	b005      	add	sp, #20
    fdc4:	f85d fb04 	ldr.w	pc, [sp], #4

0000fdc8 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
    fdc8:	b500      	push	{lr}
    fdca:	b087      	sub	sp, #28
    fdcc:	9001      	str	r0, [sp, #4]
    fdce:	460b      	mov	r3, r1
    fdd0:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
    fdd4:	2300      	movs	r3, #0
    fdd6:	f88d 3017 	strb.w	r3, [sp, #23]
  hciEvtCback_t cback = hciCb.evtCback;
    fdda:	4bb1      	ldr	r3, [pc, #708]	; (100a0 <hciEvtProcessCmdCmpl+0x2d8>)
    fddc:	689b      	ldr	r3, [r3, #8]
    fdde:	9304      	str	r3, [sp, #16]

  BSTREAM_TO_UINT8(numPkts, p);
    fde0:	9b01      	ldr	r3, [sp, #4]
    fde2:	1c5a      	adds	r2, r3, #1
    fde4:	9201      	str	r2, [sp, #4]
    fde6:	781b      	ldrb	r3, [r3, #0]
    fde8:	f88d 300f 	strb.w	r3, [sp, #15]
  BSTREAM_TO_UINT16(opcode, p);
    fdec:	9b01      	ldr	r3, [sp, #4]
    fdee:	781b      	ldrb	r3, [r3, #0]
    fdf0:	b29a      	uxth	r2, r3
    fdf2:	9b01      	ldr	r3, [sp, #4]
    fdf4:	3301      	adds	r3, #1
    fdf6:	781b      	ldrb	r3, [r3, #0]
    fdf8:	b29b      	uxth	r3, r3
    fdfa:	021b      	lsls	r3, r3, #8
    fdfc:	b29b      	uxth	r3, r3
    fdfe:	4413      	add	r3, r2
    fe00:	f8ad 300c 	strh.w	r3, [sp, #12]
    fe04:	9b01      	ldr	r3, [sp, #4]
    fe06:	3302      	adds	r3, #2
    fe08:	9301      	str	r3, [sp, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
    fe0a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    fe0e:	f242 0257 	movw	r2, #8279	; 0x2057
    fe12:	4293      	cmp	r3, r2
    fe14:	f300 8146 	bgt.w	100a4 <hciEvtProcessCmdCmpl+0x2dc>
    fe18:	f242 020a 	movw	r2, #8202	; 0x200a
    fe1c:	4293      	cmp	r3, r2
    fe1e:	da14      	bge.n	fe4a <hciEvtProcessCmdCmpl+0x82>
    fe20:	f241 4205 	movw	r2, #5125	; 0x1405
    fe24:	4293      	cmp	r3, r2
    fe26:	f000 80eb 	beq.w	10000 <hciEvtProcessCmdCmpl+0x238>
    fe2a:	f241 4205 	movw	r2, #5125	; 0x1405
    fe2e:	4293      	cmp	r3, r2
    fe30:	f300 8138 	bgt.w	100a4 <hciEvtProcessCmdCmpl+0x2dc>
    fe34:	f640 422d 	movw	r2, #3117	; 0xc2d
    fe38:	4293      	cmp	r3, r2
    fe3a:	f000 80e5 	beq.w	10008 <hciEvtProcessCmdCmpl+0x240>
    fe3e:	f640 427c 	movw	r2, #3196	; 0xc7c
    fe42:	4293      	cmp	r3, r2
    fe44:	f000 80fc 	beq.w	10040 <hciEvtProcessCmdCmpl+0x278>
    fe48:	e12c      	b.n	100a4 <hciEvtProcessCmdCmpl+0x2dc>
    fe4a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    fe4e:	3b0a      	subs	r3, #10
    fe50:	2b4d      	cmp	r3, #77	; 0x4d
    fe52:	f200 8127 	bhi.w	100a4 <hciEvtProcessCmdCmpl+0x2dc>
    fe56:	a201      	add	r2, pc, #4	; (adr r2, fe5c <hciEvtProcessCmdCmpl+0x94>)
    fe58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fe5c:	00010061 	.word	0x00010061
    fe60:	000100a5 	.word	0x000100a5
    fe64:	00010059 	.word	0x00010059
    fe68:	000100a5 	.word	0x000100a5
    fe6c:	0000ff95 	.word	0x0000ff95
    fe70:	000100a5 	.word	0x000100a5
    fe74:	000100a5 	.word	0x000100a5
    fe78:	000100a5 	.word	0x000100a5
    fe7c:	000100a5 	.word	0x000100a5
    fe80:	000100a5 	.word	0x000100a5
    fe84:	000100a5 	.word	0x000100a5
    fe88:	0000fff9 	.word	0x0000fff9
    fe8c:	000100a5 	.word	0x000100a5
    fe90:	0000ff9d 	.word	0x0000ff9d
    fe94:	0000ffeb 	.word	0x0000ffeb
    fe98:	000100a5 	.word	0x000100a5
    fe9c:	0000ffdb 	.word	0x0000ffdb
    fea0:	0000ffe3 	.word	0x0000ffe3
    fea4:	000100a5 	.word	0x000100a5
    fea8:	000100a5 	.word	0x000100a5
    feac:	000100a5 	.word	0x000100a5
    feb0:	000100a5 	.word	0x000100a5
    feb4:	0000ffab 	.word	0x0000ffab
    feb8:	0000ffb3 	.word	0x0000ffb3
    febc:	0000ffcb 	.word	0x0000ffcb
    fec0:	0000ffbb 	.word	0x0000ffbb
    fec4:	0000ffc3 	.word	0x0000ffc3
    fec8:	000100a5 	.word	0x000100a5
    fecc:	000100a5 	.word	0x000100a5
    fed0:	00010011 	.word	0x00010011
    fed4:	00010019 	.word	0x00010019
    fed8:	00010021 	.word	0x00010021
    fedc:	000100a5 	.word	0x000100a5
    fee0:	00010029 	.word	0x00010029
    fee4:	00010031 	.word	0x00010031
    fee8:	00010039 	.word	0x00010039
    feec:	000100a5 	.word	0x000100a5
    fef0:	0000ffd3 	.word	0x0000ffd3
    fef4:	00010049 	.word	0x00010049
    fef8:	00010051 	.word	0x00010051
    fefc:	000100a5 	.word	0x000100a5
    ff00:	000100a5 	.word	0x000100a5
    ff04:	000100a5 	.word	0x000100a5
    ff08:	000100a5 	.word	0x000100a5
    ff0c:	000100a5 	.word	0x000100a5
    ff10:	000100a5 	.word	0x000100a5
    ff14:	000100a5 	.word	0x000100a5
    ff18:	00010071 	.word	0x00010071
    ff1c:	000100a5 	.word	0x000100a5
    ff20:	000100a5 	.word	0x000100a5
    ff24:	000100a5 	.word	0x000100a5
    ff28:	000100a5 	.word	0x000100a5
    ff2c:	000100a5 	.word	0x000100a5
    ff30:	000100a5 	.word	0x000100a5
    ff34:	00010079 	.word	0x00010079
    ff38:	000100a5 	.word	0x000100a5
    ff3c:	00010069 	.word	0x00010069
    ff40:	000100a5 	.word	0x000100a5
    ff44:	000100a5 	.word	0x000100a5
    ff48:	000100a5 	.word	0x000100a5
    ff4c:	000100a5 	.word	0x000100a5
    ff50:	000100a5 	.word	0x000100a5
    ff54:	000100a5 	.word	0x000100a5
    ff58:	000100a5 	.word	0x000100a5
    ff5c:	000100a5 	.word	0x000100a5
    ff60:	000100a5 	.word	0x000100a5
    ff64:	000100a5 	.word	0x000100a5
    ff68:	000100a5 	.word	0x000100a5
    ff6c:	000100a5 	.word	0x000100a5
    ff70:	000100a5 	.word	0x000100a5
    ff74:	000100a5 	.word	0x000100a5
    ff78:	000100a5 	.word	0x000100a5
    ff7c:	000100a5 	.word	0x000100a5
    ff80:	000100a5 	.word	0x000100a5
    ff84:	00010081 	.word	0x00010081
    ff88:	00010089 	.word	0x00010089
    ff8c:	00010091 	.word	0x00010091
    ff90:	00010099 	.word	0x00010099
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
    ff94:	2305      	movs	r3, #5
    ff96:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    ff9a:	e095      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
    ff9c:	231b      	movs	r3, #27
    ff9e:	f88d 3017 	strb.w	r3, [sp, #23]
    cback = hciCb.secCback;
    ffa2:	4b3f      	ldr	r3, [pc, #252]	; (100a0 <hciEvtProcessCmdCmpl+0x2d8>)
    ffa4:	68db      	ldr	r3, [r3, #12]
    ffa6:	9304      	str	r3, [sp, #16]
    break;
    ffa8:	e08e      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
    ffaa:	231d      	movs	r3, #29
    ffac:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    ffb0:	e08a      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
    ffb2:	231e      	movs	r3, #30
    ffb4:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    ffb8:	e086      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
    ffba:	231f      	movs	r3, #31
    ffbc:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    ffc0:	e082      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
    ffc2:	2320      	movs	r3, #32
    ffc4:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    ffc8:	e07e      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
    ffca:	2321      	movs	r3, #33	; 0x21
    ffcc:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    ffd0:	e07a      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
    ffd2:	2322      	movs	r3, #34	; 0x22
    ffd4:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    ffd8:	e076      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
    ffda:	230c      	movs	r3, #12
    ffdc:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    ffe0:	e072      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
    ffe2:	230d      	movs	r3, #13
    ffe4:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    ffe8:	e06e      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
    ffea:	231c      	movs	r3, #28
    ffec:	f88d 3017 	strb.w	r3, [sp, #23]
    cback = hciCb.secCback;
    fff0:	4b2b      	ldr	r3, [pc, #172]	; (100a0 <hciEvtProcessCmdCmpl+0x2d8>)
    fff2:	68db      	ldr	r3, [r3, #12]
    fff4:	9304      	str	r3, [sp, #16]
    break;
    fff6:	e067      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
    fff8:	2308      	movs	r3, #8
    fffa:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
    fffe:	e063      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   10000:	2307      	movs	r3, #7
   10002:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10006:	e05f      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   10008:	2309      	movs	r3, #9
   1000a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1000e:	e05b      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   10010:	2315      	movs	r3, #21
   10012:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10016:	e057      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   10018:	2316      	movs	r3, #22
   1001a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1001e:	e053      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   10020:	2317      	movs	r3, #23
   10022:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10026:	e04f      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   10028:	2318      	movs	r3, #24
   1002a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1002e:	e04b      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   10030:	2319      	movs	r3, #25
   10032:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10036:	e047      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   10038:	231a      	movs	r3, #26
   1003a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1003e:	e043      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   10040:	2327      	movs	r3, #39	; 0x27
   10042:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10046:	e03f      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   10048:	2329      	movs	r3, #41	; 0x29
   1004a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1004e:	e03b      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   10050:	232a      	movs	r3, #42	; 0x2a
   10052:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10056:	e037      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   10058:	2334      	movs	r3, #52	; 0x34
   1005a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1005e:	e033      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   10060:	2335      	movs	r3, #53	; 0x35
   10062:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10066:	e02f      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   10068:	2336      	movs	r3, #54	; 0x36
   1006a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1006e:	e02b      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   10070:	2337      	movs	r3, #55	; 0x37
   10072:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10076:	e027      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   10078:	2338      	movs	r3, #56	; 0x38
   1007a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1007e:	e023      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_SET_CONN_CTE_RX_PARAMS:
    cbackEvt = HCI_LE_SET_CONN_CTE_RX_PARAMS_CMD_CMPL_CBACK_EVT;
   10080:	233f      	movs	r3, #63	; 0x3f
   10082:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10086:	e01f      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>
    
  case HCI_OPCODE_LE_SET_CONN_CTE_TX_PARAMS:
    cbackEvt = HCI_LE_SET_CONN_CTE_TX_PARAMS_CMD_CMPL_CBACK_EVT;
   10088:	2340      	movs	r3, #64	; 0x40
   1008a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1008e:	e01b      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_CONN_CTE_REQ_ENABLE:
    cbackEvt = HCI_LE_CONN_CTE_REQ_ENABLE_CMD_CMPL_CBACK_EVT;
   10090:	2341      	movs	r3, #65	; 0x41
   10092:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   10096:	e017      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>

  case HCI_OPCODE_LE_CONN_CTE_RSP_ENABLE:       
    cbackEvt = HCI_LE_CONN_CTE_RSP_ENABLE_CMD_CMPL_CBACK_EVT;
   10098:	2342      	movs	r3, #66	; 0x42
   1009a:	f88d 3017 	strb.w	r3, [sp, #23]
    break;
   1009e:	e013      	b.n	100c8 <hciEvtProcessCmdCmpl+0x300>
   100a0:	10004230 	.word	0x10004230

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   100a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   100a8:	0a9b      	lsrs	r3, r3, #10
   100aa:	b29b      	uxth	r3, r3
   100ac:	2b3f      	cmp	r3, #63	; 0x3f
   100ae:	d10a      	bne.n	100c6 <hciEvtProcessCmdCmpl+0x2fe>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   100b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
   100b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   100b8:	9901      	ldr	r1, [sp, #4]
   100ba:	4618      	mov	r0, r3
   100bc:	f011 fb18 	bl	216f0 <hciCoreVsCmdCmplRcvd>
   100c0:	4603      	mov	r3, r0
   100c2:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    break;
   100c6:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   100c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   100cc:	2b00      	cmp	r3, #0
   100ce:	d025      	beq.n	1011c <hciEvtProcessCmdCmpl+0x354>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   100d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   100d4:	4a16      	ldr	r2, [pc, #88]	; (10130 <hciEvtProcessCmdCmpl+0x368>)
   100d6:	5cd3      	ldrb	r3, [r2, r3]
   100d8:	b29b      	uxth	r3, r3
   100da:	4618      	mov	r0, r3
   100dc:	f00f fb7c 	bl	1f7d8 <WsfBufAlloc>
   100e0:	9002      	str	r0, [sp, #8]
   100e2:	9b02      	ldr	r3, [sp, #8]
   100e4:	2b00      	cmp	r3, #0
   100e6:	d019      	beq.n	1011c <hciEvtProcessCmdCmpl+0x354>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   100e8:	9b02      	ldr	r3, [sp, #8]
   100ea:	2200      	movs	r2, #0
   100ec:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   100ee:	9b02      	ldr	r3, [sp, #8]
   100f0:	f89d 2017 	ldrb.w	r2, [sp, #23]
   100f4:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   100f6:	9b02      	ldr	r3, [sp, #8]
   100f8:	2200      	movs	r2, #0
   100fa:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   100fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10100:	4a0c      	ldr	r2, [pc, #48]	; (10134 <hciEvtProcessCmdCmpl+0x36c>)
   10102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10106:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1010a:	9901      	ldr	r1, [sp, #4]
   1010c:	9802      	ldr	r0, [sp, #8]
   1010e:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   10110:	9b04      	ldr	r3, [sp, #16]
   10112:	9802      	ldr	r0, [sp, #8]
   10114:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   10116:	9802      	ldr	r0, [sp, #8]
   10118:	f00f fb9c 	bl	1f854 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   1011c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10120:	4618      	mov	r0, r3
   10122:	f7fc fde5 	bl	ccf0 <hciCmdRecvCmpl>
}
   10126:	bf00      	nop
   10128:	b007      	add	sp, #28
   1012a:	f85d fb04 	ldr.w	pc, [sp], #4
   1012e:	bf00      	nop
   10130:	00027e84 	.word	0x00027e84
   10134:	00027d78 	.word	0x00027d78

00010138 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   10138:	b500      	push	{lr}
   1013a:	b089      	sub	sp, #36	; 0x24
   1013c:	9001      	str	r0, [sp, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   1013e:	2300      	movs	r3, #0
   10140:	f88d 301f 	strb.w	r3, [sp, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   10144:	4bcf      	ldr	r3, [pc, #828]	; (10484 <hciEvtProcessMsg+0x34c>)
   10146:	689b      	ldr	r3, [r3, #8]
   10148:	9306      	str	r3, [sp, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   1014a:	9b01      	ldr	r3, [sp, #4]
   1014c:	1c5a      	adds	r2, r3, #1
   1014e:	9201      	str	r2, [sp, #4]
   10150:	781b      	ldrb	r3, [r3, #0]
   10152:	f88d 3017 	strb.w	r3, [sp, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   10156:	9b01      	ldr	r3, [sp, #4]
   10158:	1c5a      	adds	r2, r3, #1
   1015a:	9201      	str	r2, [sp, #4]
   1015c:	781b      	ldrb	r3, [r3, #0]
   1015e:	f88d 3016 	strb.w	r3, [sp, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   10162:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10166:	2b57      	cmp	r3, #87	; 0x57
   10168:	f300 80b0 	bgt.w	102cc <hciEvtProcessMsg+0x194>
   1016c:	2b05      	cmp	r3, #5
   1016e:	f2c0 8201 	blt.w	10574 <hciEvtProcessMsg+0x43c>
   10172:	3b05      	subs	r3, #5
   10174:	2b52      	cmp	r3, #82	; 0x52
   10176:	f200 81fd 	bhi.w	10574 <hciEvtProcessMsg+0x43c>
   1017a:	a201      	add	r2, pc, #4	; (adr r2, 10180 <hciEvtProcessMsg+0x48>)
   1017c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10180:	000104db 	.word	0x000104db
   10184:	00010575 	.word	0x00010575
   10188:	00010575 	.word	0x00010575
   1018c:	000104ef 	.word	0x000104ef
   10190:	00010575 	.word	0x00010575
   10194:	00010575 	.word	0x00010575
   10198:	00010575 	.word	0x00010575
   1019c:	00010503 	.word	0x00010503
   101a0:	00010575 	.word	0x00010575
   101a4:	000102e9 	.word	0x000102e9
   101a8:	000102d5 	.word	0x000102d5
   101ac:	00010539 	.word	0x00010539
   101b0:	00010575 	.word	0x00010575
   101b4:	00010575 	.word	0x00010575
   101b8:	00010303 	.word	0x00010303
   101bc:	00010575 	.word	0x00010575
   101c0:	00010575 	.word	0x00010575
   101c4:	00010575 	.word	0x00010575
   101c8:	00010575 	.word	0x00010575
   101cc:	00010575 	.word	0x00010575
   101d0:	00010575 	.word	0x00010575
   101d4:	0001052b 	.word	0x0001052b
   101d8:	00010575 	.word	0x00010575
   101dc:	00010575 	.word	0x00010575
   101e0:	00010575 	.word	0x00010575
   101e4:	00010575 	.word	0x00010575
   101e8:	00010575 	.word	0x00010575
   101ec:	00010575 	.word	0x00010575
   101f0:	00010575 	.word	0x00010575
   101f4:	00010575 	.word	0x00010575
   101f8:	00010575 	.word	0x00010575
   101fc:	00010575 	.word	0x00010575
   10200:	00010575 	.word	0x00010575
   10204:	00010575 	.word	0x00010575
   10208:	00010575 	.word	0x00010575
   1020c:	00010575 	.word	0x00010575
   10210:	00010575 	.word	0x00010575
   10214:	00010575 	.word	0x00010575
   10218:	00010575 	.word	0x00010575
   1021c:	00010575 	.word	0x00010575
   10220:	00010575 	.word	0x00010575
   10224:	00010575 	.word	0x00010575
   10228:	00010575 	.word	0x00010575
   1022c:	00010517 	.word	0x00010517
   10230:	00010575 	.word	0x00010575
   10234:	00010575 	.word	0x00010575
   10238:	00010575 	.word	0x00010575
   1023c:	00010575 	.word	0x00010575
   10240:	00010575 	.word	0x00010575
   10244:	00010575 	.word	0x00010575
   10248:	00010575 	.word	0x00010575
   1024c:	00010575 	.word	0x00010575
   10250:	00010575 	.word	0x00010575
   10254:	00010575 	.word	0x00010575
   10258:	00010575 	.word	0x00010575
   1025c:	00010575 	.word	0x00010575
   10260:	00010575 	.word	0x00010575
   10264:	00010317 	.word	0x00010317
   10268:	00010575 	.word	0x00010575
   1026c:	00010575 	.word	0x00010575
   10270:	00010575 	.word	0x00010575
   10274:	00010575 	.word	0x00010575
   10278:	00010575 	.word	0x00010575
   1027c:	00010575 	.word	0x00010575
   10280:	00010575 	.word	0x00010575
   10284:	00010575 	.word	0x00010575
   10288:	00010575 	.word	0x00010575
   1028c:	00010575 	.word	0x00010575
   10290:	00010575 	.word	0x00010575
   10294:	00010575 	.word	0x00010575
   10298:	00010575 	.word	0x00010575
   1029c:	00010575 	.word	0x00010575
   102a0:	00010575 	.word	0x00010575
   102a4:	00010575 	.word	0x00010575
   102a8:	00010575 	.word	0x00010575
   102ac:	00010575 	.word	0x00010575
   102b0:	00010575 	.word	0x00010575
   102b4:	00010575 	.word	0x00010575
   102b8:	00010575 	.word	0x00010575
   102bc:	00010575 	.word	0x00010575
   102c0:	00010575 	.word	0x00010575
   102c4:	00010575 	.word	0x00010575
   102c8:	0001054d 	.word	0x0001054d
   102cc:	2bff      	cmp	r3, #255	; 0xff
   102ce:	f000 8147 	beq.w	10560 <hciEvtProcessMsg+0x428>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;
     
    default:
      break;
   102d2:	e14f      	b.n	10574 <hciEvtProcessMsg+0x43c>
      hciEvtStats.numCmdStatusEvt++;
   102d4:	4b6c      	ldr	r3, [pc, #432]	; (10488 <hciEvtProcessMsg+0x350>)
   102d6:	891b      	ldrh	r3, [r3, #8]
   102d8:	3301      	adds	r3, #1
   102da:	b29a      	uxth	r2, r3
   102dc:	4b6a      	ldr	r3, [pc, #424]	; (10488 <hciEvtProcessMsg+0x350>)
   102de:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   102e0:	9801      	ldr	r0, [sp, #4]
   102e2:	f7ff fd3e 	bl	fd62 <hciEvtProcessCmdStatus>
      break;
   102e6:	e146      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciEvtStats.numCmdCmplEvt++;
   102e8:	4b67      	ldr	r3, [pc, #412]	; (10488 <hciEvtProcessMsg+0x350>)
   102ea:	88db      	ldrh	r3, [r3, #6]
   102ec:	3301      	adds	r3, #1
   102ee:	b29a      	uxth	r2, r3
   102f0:	4b65      	ldr	r3, [pc, #404]	; (10488 <hciEvtProcessMsg+0x350>)
   102f2:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   102f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   102f8:	4619      	mov	r1, r3
   102fa:	9801      	ldr	r0, [sp, #4]
   102fc:	f7ff fd64 	bl	fdc8 <hciEvtProcessCmdCmpl>
      break;
   10300:	e139      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciCoreNumCmplPkts(pEvt);
   10302:	9801      	ldr	r0, [sp, #4]
   10304:	f7fd ffd0 	bl	e2a8 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   10308:	4b5f      	ldr	r3, [pc, #380]	; (10488 <hciEvtProcessMsg+0x350>)
   1030a:	899b      	ldrh	r3, [r3, #12]
   1030c:	3301      	adds	r3, #1
   1030e:	b29a      	uxth	r2, r3
   10310:	4b5d      	ldr	r3, [pc, #372]	; (10488 <hciEvtProcessMsg+0x350>)
   10312:	819a      	strh	r2, [r3, #12]
      break;
   10314:	e12f      	b.n	10576 <hciEvtProcessMsg+0x43e>
      BSTREAM_TO_UINT8(subEvt, pEvt);
   10316:	9b01      	ldr	r3, [sp, #4]
   10318:	1c5a      	adds	r2, r3, #1
   1031a:	9201      	str	r2, [sp, #4]
   1031c:	781b      	ldrb	r3, [r3, #0]
   1031e:	f88d 3015 	strb.w	r3, [sp, #21]
      hciEvtStats.numLeMetaEvt++;
   10322:	4b59      	ldr	r3, [pc, #356]	; (10488 <hciEvtProcessMsg+0x350>)
   10324:	8a5b      	ldrh	r3, [r3, #18]
   10326:	3301      	adds	r3, #1
   10328:	b29a      	uxth	r2, r3
   1032a:	4b57      	ldr	r3, [pc, #348]	; (10488 <hciEvtProcessMsg+0x350>)
   1032c:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   1032e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   10332:	3b01      	subs	r3, #1
   10334:	2b16      	cmp	r3, #22
   10336:	f200 80ce 	bhi.w	104d6 <hciEvtProcessMsg+0x39e>
   1033a:	a201      	add	r2, pc, #4	; (adr r2, 10340 <hciEvtProcessMsg+0x208>)
   1033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10340:	0001039d 	.word	0x0001039d
   10344:	000103d1 	.word	0x000103d1
   10348:	000103df 	.word	0x000103df
   1034c:	000103e7 	.word	0x000103e7
   10350:	000103ef 	.word	0x000103ef
   10354:	00010439 	.word	0x00010439
   10358:	00010441 	.word	0x00010441
   1035c:	00010449 	.word	0x00010449
   10360:	00010457 	.word	0x00010457
   10364:	000103f7 	.word	0x000103f7
   10368:	0001042b 	.word	0x0001042b
   1036c:	00010465 	.word	0x00010465
   10370:	0001046d 	.word	0x0001046d
   10374:	0001049d 	.word	0x0001049d
   10378:	000104a5 	.word	0x000104a5
   1037c:	000104b3 	.word	0x000104b3
   10380:	0001047b 	.word	0x0001047b
   10384:	0001048d 	.word	0x0001048d
   10388:	00010495 	.word	0x00010495
   1038c:	000104d7 	.word	0x000104d7
   10390:	000104c9 	.word	0x000104c9
   10394:	000104bb 	.word	0x000104bb
   10398:	000104d7 	.word	0x000104d7
          if (*pEvt == HCI_SUCCESS)
   1039c:	9b01      	ldr	r3, [sp, #4]
   1039e:	781b      	ldrb	r3, [r3, #0]
   103a0:	2b00      	cmp	r3, #0
   103a2:	d111      	bne.n	103c8 <hciEvtProcessMsg+0x290>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   103a4:	9b01      	ldr	r3, [sp, #4]
   103a6:	3301      	adds	r3, #1
   103a8:	781b      	ldrb	r3, [r3, #0]
   103aa:	b29a      	uxth	r2, r3
   103ac:	9b01      	ldr	r3, [sp, #4]
   103ae:	3302      	adds	r3, #2
   103b0:	781b      	ldrb	r3, [r3, #0]
   103b2:	b29b      	uxth	r3, r3
   103b4:	021b      	lsls	r3, r3, #8
   103b6:	b29b      	uxth	r3, r3
   103b8:	4413      	add	r3, r2
   103ba:	f8ad 3012 	strh.w	r3, [sp, #18]
            hciCoreConnOpen(handle);
   103be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   103c2:	4618      	mov	r0, r3
   103c4:	f7fd fbc2 	bl	db4c <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   103c8:	2301      	movs	r3, #1
   103ca:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   103ce:	e083      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          hciEvtProcessLeAdvReport(pEvt, len);
   103d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   103d4:	4619      	mov	r1, r3
   103d6:	9801      	ldr	r0, [sp, #4]
   103d8:	f7fe ffc8 	bl	f36c <hciEvtProcessLeAdvReport>
          break;
   103dc:	e07c      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   103de:	2304      	movs	r3, #4
   103e0:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   103e4:	e078      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   103e6:	230b      	movs	r3, #11
   103e8:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   103ec:	e074      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   103ee:	2310      	movs	r3, #16
   103f0:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   103f4:	e070      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          if (*pEvt == HCI_SUCCESS)
   103f6:	9b01      	ldr	r3, [sp, #4]
   103f8:	781b      	ldrb	r3, [r3, #0]
   103fa:	2b00      	cmp	r3, #0
   103fc:	d111      	bne.n	10422 <hciEvtProcessMsg+0x2ea>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   103fe:	9b01      	ldr	r3, [sp, #4]
   10400:	3301      	adds	r3, #1
   10402:	781b      	ldrb	r3, [r3, #0]
   10404:	b29a      	uxth	r2, r3
   10406:	9b01      	ldr	r3, [sp, #4]
   10408:	3302      	adds	r3, #2
   1040a:	781b      	ldrb	r3, [r3, #0]
   1040c:	b29b      	uxth	r3, r3
   1040e:	021b      	lsls	r3, r3, #8
   10410:	b29b      	uxth	r3, r3
   10412:	4413      	add	r3, r2
   10414:	f8ad 3012 	strh.w	r3, [sp, #18]
            hciCoreConnOpen(handle);
   10418:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1041c:	4618      	mov	r0, r3
   1041e:	f7fd fb95 	bl	db4c <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   10422:	2302      	movs	r3, #2
   10424:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   10428:	e056      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   1042a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1042e:	4619      	mov	r1, r3
   10430:	9801      	ldr	r0, [sp, #4]
   10432:	f7ff fc23 	bl	fc7c <hciEvtProcessLeDirectAdvReport>
          break;
   10436:	e04f      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   10438:	2323      	movs	r3, #35	; 0x23
   1043a:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1043e:	e04b      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   10440:	2324      	movs	r3, #36	; 0x24
   10442:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   10446:	e047      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cback = hciCb.secCback;
   10448:	4b0e      	ldr	r3, [pc, #56]	; (10484 <hciEvtProcessMsg+0x34c>)
   1044a:	68db      	ldr	r3, [r3, #12]
   1044c:	9306      	str	r3, [sp, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   1044e:	2325      	movs	r3, #37	; 0x25
   10450:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   10454:	e040      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cback = hciCb.secCback;
   10456:	4b0b      	ldr	r3, [pc, #44]	; (10484 <hciEvtProcessMsg+0x34c>)
   10458:	68db      	ldr	r3, [r3, #12]
   1045a:	9306      	str	r3, [sp, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   1045c:	2326      	movs	r3, #38	; 0x26
   1045e:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   10462:	e039      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   10464:	232b      	movs	r3, #43	; 0x2b
   10466:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1046a:	e035      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          hciEvtProcessLeExtAdvReport(pEvt, len);
   1046c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   10470:	4619      	mov	r1, r3
   10472:	9801      	ldr	r0, [sp, #4]
   10474:	f7fe fff6 	bl	f464 <hciEvtProcessLeExtAdvReport>
          break;
   10478:	e02e      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   1047a:	232d      	movs	r3, #45	; 0x2d
   1047c:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   10480:	e02a      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
   10482:	bf00      	nop
   10484:	10004230 	.word	0x10004230
   10488:	10004204 	.word	0x10004204
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   1048c:	232e      	movs	r3, #46	; 0x2e
   1048e:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   10492:	e021      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   10494:	232f      	movs	r3, #47	; 0x2f
   10496:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   1049a:	e01d      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   1049c:	2330      	movs	r3, #48	; 0x30
   1049e:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   104a2:	e019      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          hciEvtProcessLePerAdvReport(pEvt, len);
   104a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   104a8:	4619      	mov	r1, r3
   104aa:	9801      	ldr	r0, [sp, #4]
   104ac:	f7ff f974 	bl	f798 <hciEvtProcessLePerAdvReport>
          break;
   104b0:	e012      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   104b2:	2332      	movs	r3, #50	; 0x32
   104b4:	f88d 301f 	strb.w	r3, [sp, #31]
          break;
   104b8:	e00e      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          hciEvtProcessLeConnIQReport(pEvt, len);
   104ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
   104be:	4619      	mov	r1, r3
   104c0:	9801      	ldr	r0, [sp, #4]
   104c2:	f7ff f9e7 	bl	f894 <hciEvtProcessLeConnIQReport>
          break;
   104c6:	e007      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          hciEvtProcessLeConlessIQReport(pEvt, len);
   104c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   104cc:	4619      	mov	r1, r3
   104ce:	9801      	ldr	r0, [sp, #4]
   104d0:	f7ff fa82 	bl	f9d8 <hciEvtProcessLeConlessIQReport>
          break;
   104d4:	e000      	b.n	104d8 <hciEvtProcessMsg+0x3a0>
          break;
   104d6:	bf00      	nop
      break;
   104d8:	e04d      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciEvtStats.numDiscCmplEvt++;
   104da:	4b49      	ldr	r3, [pc, #292]	; (10600 <hciEvtProcessMsg+0x4c8>)
   104dc:	881b      	ldrh	r3, [r3, #0]
   104de:	3301      	adds	r3, #1
   104e0:	b29a      	uxth	r2, r3
   104e2:	4b47      	ldr	r3, [pc, #284]	; (10600 <hciEvtProcessMsg+0x4c8>)
   104e4:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   104e6:	2303      	movs	r3, #3
   104e8:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   104ec:	e043      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciEvtStats.numEncChangeEvt++;
   104ee:	4b44      	ldr	r3, [pc, #272]	; (10600 <hciEvtProcessMsg+0x4c8>)
   104f0:	885b      	ldrh	r3, [r3, #2]
   104f2:	3301      	adds	r3, #1
   104f4:	b29a      	uxth	r2, r3
   104f6:	4b42      	ldr	r3, [pc, #264]	; (10600 <hciEvtProcessMsg+0x4c8>)
   104f8:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   104fa:	230f      	movs	r3, #15
   104fc:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   10500:	e039      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   10502:	4b3f      	ldr	r3, [pc, #252]	; (10600 <hciEvtProcessMsg+0x4c8>)
   10504:	889b      	ldrh	r3, [r3, #4]
   10506:	3301      	adds	r3, #1
   10508:	b29a      	uxth	r2, r3
   1050a:	4b3d      	ldr	r3, [pc, #244]	; (10600 <hciEvtProcessMsg+0x4c8>)
   1050c:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   1050e:	230a      	movs	r3, #10
   10510:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   10514:	e02f      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   10516:	4b3a      	ldr	r3, [pc, #232]	; (10600 <hciEvtProcessMsg+0x4c8>)
   10518:	8a1b      	ldrh	r3, [r3, #16]
   1051a:	3301      	adds	r3, #1
   1051c:	b29a      	uxth	r2, r3
   1051e:	4b38      	ldr	r3, [pc, #224]	; (10600 <hciEvtProcessMsg+0x4c8>)
   10520:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   10522:	230e      	movs	r3, #14
   10524:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   10528:	e025      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciEvtStats.numDataBufOverflowEvt++;
   1052a:	4b35      	ldr	r3, [pc, #212]	; (10600 <hciEvtProcessMsg+0x4c8>)
   1052c:	89db      	ldrh	r3, [r3, #14]
   1052e:	3301      	adds	r3, #1
   10530:	b29a      	uxth	r2, r3
   10532:	4b33      	ldr	r3, [pc, #204]	; (10600 <hciEvtProcessMsg+0x4c8>)
   10534:	81da      	strh	r2, [r3, #14]
      break;
   10536:	e01e      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciEvtStats.numHwErrorEvt++;
   10538:	4b31      	ldr	r3, [pc, #196]	; (10600 <hciEvtProcessMsg+0x4c8>)
   1053a:	895b      	ldrh	r3, [r3, #10]
   1053c:	3301      	adds	r3, #1
   1053e:	b29a      	uxth	r2, r3
   10540:	4b2f      	ldr	r3, [pc, #188]	; (10600 <hciEvtProcessMsg+0x4c8>)
   10542:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   10544:	2314      	movs	r3, #20
   10546:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   1054a:	e014      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciEvtStats.numAuthToEvt++;
   1054c:	4b2c      	ldr	r3, [pc, #176]	; (10600 <hciEvtProcessMsg+0x4c8>)
   1054e:	8adb      	ldrh	r3, [r3, #22]
   10550:	3301      	adds	r3, #1
   10552:	b29a      	uxth	r2, r3
   10554:	4b2a      	ldr	r3, [pc, #168]	; (10600 <hciEvtProcessMsg+0x4c8>)
   10556:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   10558:	2328      	movs	r3, #40	; 0x28
   1055a:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   1055e:	e00a      	b.n	10576 <hciEvtProcessMsg+0x43e>
      hciEvtStats.numVendorSpecEvt++;
   10560:	4b27      	ldr	r3, [pc, #156]	; (10600 <hciEvtProcessMsg+0x4c8>)
   10562:	8a9b      	ldrh	r3, [r3, #20]
   10564:	3301      	adds	r3, #1
   10566:	b29a      	uxth	r2, r3
   10568:	4b25      	ldr	r3, [pc, #148]	; (10600 <hciEvtProcessMsg+0x4c8>)
   1056a:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   1056c:	2313      	movs	r3, #19
   1056e:	f88d 301f 	strb.w	r3, [sp, #31]
      break;
   10572:	e000      	b.n	10576 <hciEvtProcessMsg+0x43e>
      break;
   10574:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   10576:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1057a:	2b00      	cmp	r3, #0
   1057c:	d03b      	beq.n	105f6 <hciEvtProcessMsg+0x4be>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   1057e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   10582:	4a20      	ldr	r2, [pc, #128]	; (10604 <hciEvtProcessMsg+0x4cc>)
   10584:	5cd3      	ldrb	r3, [r2, r3]
   10586:	b29b      	uxth	r3, r3
   10588:	4618      	mov	r0, r3
   1058a:	f00f f925 	bl	1f7d8 <WsfBufAlloc>
   1058e:	9003      	str	r0, [sp, #12]
   10590:	9b03      	ldr	r3, [sp, #12]
   10592:	2b00      	cmp	r3, #0
   10594:	d019      	beq.n	105ca <hciEvtProcessMsg+0x492>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   10596:	9b03      	ldr	r3, [sp, #12]
   10598:	2200      	movs	r2, #0
   1059a:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   1059c:	9b03      	ldr	r3, [sp, #12]
   1059e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   105a2:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   105a4:	9b03      	ldr	r3, [sp, #12]
   105a6:	2200      	movs	r2, #0
   105a8:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   105aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
   105ae:	4a16      	ldr	r2, [pc, #88]	; (10608 <hciEvtProcessMsg+0x4d0>)
   105b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105b4:	f89d 2016 	ldrb.w	r2, [sp, #22]
   105b8:	9901      	ldr	r1, [sp, #4]
   105ba:	9803      	ldr	r0, [sp, #12]
   105bc:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   105be:	9b06      	ldr	r3, [sp, #24]
   105c0:	9803      	ldr	r0, [sp, #12]
   105c2:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   105c4:	9803      	ldr	r0, [sp, #12]
   105c6:	f00f f945 	bl	1f854 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   105ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
   105ce:	2b03      	cmp	r3, #3
   105d0:	d111      	bne.n	105f6 <hciEvtProcessMsg+0x4be>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   105d2:	9b01      	ldr	r3, [sp, #4]
   105d4:	3301      	adds	r3, #1
   105d6:	781b      	ldrb	r3, [r3, #0]
   105d8:	b29a      	uxth	r2, r3
   105da:	9b01      	ldr	r3, [sp, #4]
   105dc:	3302      	adds	r3, #2
   105de:	781b      	ldrb	r3, [r3, #0]
   105e0:	b29b      	uxth	r3, r3
   105e2:	021b      	lsls	r3, r3, #8
   105e4:	b29b      	uxth	r3, r3
   105e6:	4413      	add	r3, r2
   105e8:	f8ad 3012 	strh.w	r3, [sp, #18]
      hciCoreConnClose(handle);
   105ec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   105f0:	4618      	mov	r0, r3
   105f2:	f7fd fab9 	bl	db68 <hciCoreConnClose>
    }
  }
}
   105f6:	bf00      	nop
   105f8:	b009      	add	sp, #36	; 0x24
   105fa:	f85d fb04 	ldr.w	pc, [sp], #4
   105fe:	bf00      	nop
   10600:	10004204 	.word	0x10004204
   10604:	00027e84 	.word	0x00027e84
   10608:	00027d78 	.word	0x00027d78

0001060c <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   1060c:	b500      	push	{lr}
   1060e:	b085      	sub	sp, #20
   10610:	9001      	str	r0, [sp, #4]
   10612:	9100      	str	r1, [sp, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   10614:	9b00      	ldr	r3, [sp, #0]
   10616:	3302      	adds	r3, #2
   10618:	781b      	ldrb	r3, [r3, #0]
   1061a:	b29a      	uxth	r2, r3
   1061c:	9b00      	ldr	r3, [sp, #0]
   1061e:	3303      	adds	r3, #3
   10620:	781b      	ldrb	r3, [r3, #0]
   10622:	b29b      	uxth	r3, r3
   10624:	021b      	lsls	r3, r3, #8
   10626:	b29b      	uxth	r3, r3
   10628:	4413      	add	r3, r2
   1062a:	f8ad 300e 	strh.w	r3, [sp, #14]
  len += HCI_ACL_HDR_LEN;
   1062e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10632:	3304      	adds	r3, #4
   10634:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   10638:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1063c:	9a00      	ldr	r2, [sp, #0]
   1063e:	4619      	mov	r1, r3
   10640:	2002      	movs	r0, #2
   10642:	f010 fc31 	bl	20ea8 <hciDrvWrite>
   10646:	4603      	mov	r3, r0
   10648:	461a      	mov	r2, r3
   1064a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1064e:	4293      	cmp	r3, r2
   10650:	d103      	bne.n	1065a <hciTrSendAclData+0x4e>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   10652:	9900      	ldr	r1, [sp, #0]
   10654:	9801      	ldr	r0, [sp, #4]
   10656:	f7fd fbd5 	bl	de04 <hciCoreTxAclComplete>
  }
}
   1065a:	bf00      	nop
   1065c:	b005      	add	sp, #20
   1065e:	f85d fb04 	ldr.w	pc, [sp], #4

00010662 <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   10662:	b500      	push	{lr}
   10664:	b085      	sub	sp, #20
   10666:	9001      	str	r0, [sp, #4]
  uint16_t   len;  // in case like LE set periodic advertising data, the maximum HCI command parameter length is 255

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   10668:	9b01      	ldr	r3, [sp, #4]
   1066a:	3302      	adds	r3, #2
   1066c:	781b      	ldrb	r3, [r3, #0]
   1066e:	b29b      	uxth	r3, r3
   10670:	3303      	adds	r3, #3
   10672:	f8ad 300e 	strh.w	r3, [sp, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   10676:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1067a:	9a01      	ldr	r2, [sp, #4]
   1067c:	4619      	mov	r1, r3
   1067e:	2001      	movs	r0, #1
   10680:	f010 fc12 	bl	20ea8 <hciDrvWrite>
   10684:	4603      	mov	r3, r0
   10686:	461a      	mov	r2, r3
   10688:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1068c:	4293      	cmp	r3, r2
   1068e:	d102      	bne.n	10696 <hciTrSendCmd+0x34>
  {
    /* free buffer */
    WsfMsgFree(pData);
   10690:	9801      	ldr	r0, [sp, #4]
   10692:	f00f f947 	bl	1f924 <WsfMsgFree>
  }
}
   10696:	bf00      	nop
   10698:	b005      	add	sp, #20
   1069a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000106a0 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   106a0:	b500      	push	{lr}
   106a2:	b085      	sub	sp, #20
   106a4:	9001      	str	r0, [sp, #4]
   106a6:	460b      	mov	r3, r1
   106a8:	f8ad 3002 	strh.w	r3, [sp, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   106ac:	2300      	movs	r3, #0
   106ae:	f8ad 300e 	strh.w	r3, [sp, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   106b2:	e10f      	b.n	108d4 <hciTrSerialRxIncoming+0x234>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   106b4:	9b01      	ldr	r3, [sp, #4]
   106b6:	781b      	ldrb	r3, [r3, #0]
   106b8:	f88d 3008 	strb.w	r3, [sp, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   106bc:	4b8b      	ldr	r3, [pc, #556]	; (108ec <hciTrSerialRxIncoming+0x24c>)
   106be:	781b      	ldrb	r3, [r3, #0]
   106c0:	2b00      	cmp	r3, #0
   106c2:	d11a      	bne.n	106fa <hciTrSerialRxIncoming+0x5a>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   106c4:	4a8a      	ldr	r2, [pc, #552]	; (108f0 <hciTrSerialRxIncoming+0x250>)
   106c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   106ca:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   106cc:	4b89      	ldr	r3, [pc, #548]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   106ce:	2200      	movs	r2, #0
   106d0:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   106d2:	4b86      	ldr	r3, [pc, #536]	; (108ec <hciTrSerialRxIncoming+0x24c>)
   106d4:	2201      	movs	r2, #1
   106d6:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   106d8:	4b87      	ldr	r3, [pc, #540]	; (108f8 <hciTrSerialRxIncoming+0x258>)
   106da:	2201      	movs	r2, #1
   106dc:	701a      	strb	r2, [r3, #0]
      pBuf++;
   106de:	9b01      	ldr	r3, [sp, #4]
   106e0:	3301      	adds	r3, #1
   106e2:	9301      	str	r3, [sp, #4]
      consumed_bytes++;
   106e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   106e8:	3301      	adds	r3, #1
   106ea:	f8ad 300e 	strh.w	r3, [sp, #14]
      len--;
   106ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   106f2:	3b01      	subs	r3, #1
   106f4:	f8ad 3002 	strh.w	r3, [sp, #2]
   106f8:	e0d6      	b.n	108a8 <hciTrSerialRxIncoming+0x208>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   106fa:	4b7c      	ldr	r3, [pc, #496]	; (108ec <hciTrSerialRxIncoming+0x24c>)
   106fc:	781b      	ldrb	r3, [r3, #0]
   106fe:	2b01      	cmp	r3, #1
   10700:	f040 80ac 	bne.w	1085c <hciTrSerialRxIncoming+0x1bc>
    {
      uint8_t  hdrLen = 0;
   10704:	2300      	movs	r3, #0
   10706:	f88d 300d 	strb.w	r3, [sp, #13]
      uint16_t dataLen = 0;
   1070a:	2300      	movs	r3, #0
   1070c:	f8ad 300a 	strh.w	r3, [sp, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   10710:	4b77      	ldr	r3, [pc, #476]	; (108f0 <hciTrSerialRxIncoming+0x250>)
   10712:	781b      	ldrb	r3, [r3, #0]
   10714:	2b04      	cmp	r3, #4
   10716:	d103      	bne.n	10720 <hciTrSerialRxIncoming+0x80>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   10718:	2302      	movs	r3, #2
   1071a:	f88d 300d 	strb.w	r3, [sp, #13]
   1071e:	e00a      	b.n	10736 <hciTrSerialRxIncoming+0x96>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   10720:	4b73      	ldr	r3, [pc, #460]	; (108f0 <hciTrSerialRxIncoming+0x250>)
   10722:	781b      	ldrb	r3, [r3, #0]
   10724:	2b02      	cmp	r3, #2
   10726:	d103      	bne.n	10730 <hciTrSerialRxIncoming+0x90>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   10728:	2304      	movs	r3, #4
   1072a:	f88d 300d 	strb.w	r3, [sp, #13]
   1072e:	e002      	b.n	10736 <hciTrSerialRxIncoming+0x96>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   10730:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10734:	e0d5      	b.n	108e2 <hciTrSerialRxIncoming+0x242>
      }

      if (iRx != hdrLen) {
   10736:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1073a:	b29a      	uxth	r2, r3
   1073c:	4b6d      	ldr	r3, [pc, #436]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   1073e:	881b      	ldrh	r3, [r3, #0]
   10740:	429a      	cmp	r2, r3
   10742:	d017      	beq.n	10774 <hciTrSerialRxIncoming+0xd4>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   10744:	4b6b      	ldr	r3, [pc, #428]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   10746:	881b      	ldrh	r3, [r3, #0]
   10748:	1c5a      	adds	r2, r3, #1
   1074a:	b291      	uxth	r1, r2
   1074c:	4a69      	ldr	r2, [pc, #420]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   1074e:	8011      	strh	r1, [r2, #0]
   10750:	4619      	mov	r1, r3
   10752:	4a6a      	ldr	r2, [pc, #424]	; (108fc <hciTrSerialRxIncoming+0x25c>)
   10754:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10758:	5453      	strb	r3, [r2, r1]
        pBuf++;
   1075a:	9b01      	ldr	r3, [sp, #4]
   1075c:	3301      	adds	r3, #1
   1075e:	9301      	str	r3, [sp, #4]
        consumed_bytes++;
   10760:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10764:	3301      	adds	r3, #1
   10766:	f8ad 300e 	strh.w	r3, [sp, #14]
        len--;
   1076a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1076e:	3b01      	subs	r3, #1
   10770:	f8ad 3002 	strh.w	r3, [sp, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   10774:	f89d 300d 	ldrb.w	r3, [sp, #13]
   10778:	b29a      	uxth	r2, r3
   1077a:	4b5e      	ldr	r3, [pc, #376]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   1077c:	881b      	ldrh	r3, [r3, #0]
   1077e:	429a      	cmp	r2, r3
   10780:	f040 8092 	bne.w	108a8 <hciTrSerialRxIncoming+0x208>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   10784:	4b5a      	ldr	r3, [pc, #360]	; (108f0 <hciTrSerialRxIncoming+0x250>)
   10786:	781b      	ldrb	r3, [r3, #0]
   10788:	2b04      	cmp	r3, #4
   1078a:	d104      	bne.n	10796 <hciTrSerialRxIncoming+0xf6>
        {
          dataLen = hdrRx[1];
   1078c:	4b5b      	ldr	r3, [pc, #364]	; (108fc <hciTrSerialRxIncoming+0x25c>)
   1078e:	785b      	ldrb	r3, [r3, #1]
   10790:	f8ad 300a 	strh.w	r3, [sp, #10]
   10794:	e00e      	b.n	107b4 <hciTrSerialRxIncoming+0x114>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   10796:	4b56      	ldr	r3, [pc, #344]	; (108f0 <hciTrSerialRxIncoming+0x250>)
   10798:	781b      	ldrb	r3, [r3, #0]
   1079a:	2b02      	cmp	r3, #2
   1079c:	d10a      	bne.n	107b4 <hciTrSerialRxIncoming+0x114>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   1079e:	4b57      	ldr	r3, [pc, #348]	; (108fc <hciTrSerialRxIncoming+0x25c>)
   107a0:	789b      	ldrb	r3, [r3, #2]
   107a2:	b29a      	uxth	r2, r3
   107a4:	4b56      	ldr	r3, [pc, #344]	; (10900 <hciTrSerialRxIncoming+0x260>)
   107a6:	781b      	ldrb	r3, [r3, #0]
   107a8:	b29b      	uxth	r3, r3
   107aa:	021b      	lsls	r3, r3, #8
   107ac:	b29b      	uxth	r3, r3
   107ae:	4413      	add	r3, r2
   107b0:	f8ad 300a 	strh.w	r3, [sp, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   107b4:	4b4e      	ldr	r3, [pc, #312]	; (108f0 <hciTrSerialRxIncoming+0x250>)
   107b6:	781b      	ldrb	r3, [r3, #0]
   107b8:	2b02      	cmp	r3, #2
   107ba:	d10e      	bne.n	107da <hciTrSerialRxIncoming+0x13a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   107bc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   107c0:	b29a      	uxth	r2, r3
   107c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   107c6:	4413      	add	r3, r2
   107c8:	b29b      	uxth	r3, r3
   107ca:	2100      	movs	r1, #0
   107cc:	4618      	mov	r0, r3
   107ce:	f00f f879 	bl	1f8c4 <WsfMsgDataAlloc>
   107d2:	4603      	mov	r3, r0
   107d4:	4a4b      	ldr	r2, [pc, #300]	; (10904 <hciTrSerialRxIncoming+0x264>)
   107d6:	6013      	str	r3, [r2, #0]
   107d8:	e00c      	b.n	107f4 <hciTrSerialRxIncoming+0x154>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   107da:	f89d 300d 	ldrb.w	r3, [sp, #13]
   107de:	b29a      	uxth	r2, r3
   107e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   107e4:	4413      	add	r3, r2
   107e6:	b29b      	uxth	r3, r3
   107e8:	4618      	mov	r0, r3
   107ea:	f00f f883 	bl	1f8f4 <WsfMsgAlloc>
   107ee:	4603      	mov	r3, r0
   107f0:	4a44      	ldr	r2, [pc, #272]	; (10904 <hciTrSerialRxIncoming+0x264>)
   107f2:	6013      	str	r3, [r2, #0]
        }

        if (pPktRx != NULL)
   107f4:	4b43      	ldr	r3, [pc, #268]	; (10904 <hciTrSerialRxIncoming+0x264>)
   107f6:	681b      	ldr	r3, [r3, #0]
   107f8:	2b00      	cmp	r3, #0
   107fa:	d02c      	beq.n	10856 <hciTrSerialRxIncoming+0x1b6>
        {
          pDataRx = pPktRx;
   107fc:	4b41      	ldr	r3, [pc, #260]	; (10904 <hciTrSerialRxIncoming+0x264>)
   107fe:	681b      	ldr	r3, [r3, #0]
   10800:	4a41      	ldr	r2, [pc, #260]	; (10908 <hciTrSerialRxIncoming+0x268>)
   10802:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   10804:	2300      	movs	r3, #0
   10806:	f88d 3009 	strb.w	r3, [sp, #9]
   1080a:	e00e      	b.n	1082a <hciTrSerialRxIncoming+0x18a>
            {
              *pDataRx++ = hdrRx[i];
   1080c:	f89d 2009 	ldrb.w	r2, [sp, #9]
   10810:	4b3d      	ldr	r3, [pc, #244]	; (10908 <hciTrSerialRxIncoming+0x268>)
   10812:	681b      	ldr	r3, [r3, #0]
   10814:	1c59      	adds	r1, r3, #1
   10816:	483c      	ldr	r0, [pc, #240]	; (10908 <hciTrSerialRxIncoming+0x268>)
   10818:	6001      	str	r1, [r0, #0]
   1081a:	4938      	ldr	r1, [pc, #224]	; (108fc <hciTrSerialRxIncoming+0x25c>)
   1081c:	5c8a      	ldrb	r2, [r1, r2]
   1081e:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
   10820:	f89d 3009 	ldrb.w	r3, [sp, #9]
   10824:	3301      	adds	r3, #1
   10826:	f88d 3009 	strb.w	r3, [sp, #9]
   1082a:	f89d 2009 	ldrb.w	r2, [sp, #9]
   1082e:	f89d 300d 	ldrb.w	r3, [sp, #13]
   10832:	429a      	cmp	r2, r3
   10834:	d3ea      	bcc.n	1080c <hciTrSerialRxIncoming+0x16c>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   10836:	4a2f      	ldr	r2, [pc, #188]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   10838:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1083c:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   1083e:	4b2d      	ldr	r3, [pc, #180]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   10840:	881b      	ldrh	r3, [r3, #0]
   10842:	2b00      	cmp	r3, #0
   10844:	d103      	bne.n	1084e <hciTrSerialRxIncoming+0x1ae>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   10846:	4b29      	ldr	r3, [pc, #164]	; (108ec <hciTrSerialRxIncoming+0x24c>)
   10848:	2203      	movs	r2, #3
   1084a:	701a      	strb	r2, [r3, #0]
   1084c:	e02c      	b.n	108a8 <hciTrSerialRxIncoming+0x208>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   1084e:	4b27      	ldr	r3, [pc, #156]	; (108ec <hciTrSerialRxIncoming+0x24c>)
   10850:	2202      	movs	r2, #2
   10852:	701a      	strb	r2, [r3, #0]
   10854:	e028      	b.n	108a8 <hciTrSerialRxIncoming+0x208>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   10856:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1085a:	e042      	b.n	108e2 <hciTrSerialRxIncoming+0x242>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   1085c:	4b23      	ldr	r3, [pc, #140]	; (108ec <hciTrSerialRxIncoming+0x24c>)
   1085e:	781b      	ldrb	r3, [r3, #0]
   10860:	2b02      	cmp	r3, #2
   10862:	d121      	bne.n	108a8 <hciTrSerialRxIncoming+0x208>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   10864:	4b28      	ldr	r3, [pc, #160]	; (10908 <hciTrSerialRxIncoming+0x268>)
   10866:	681b      	ldr	r3, [r3, #0]
   10868:	1c5a      	adds	r2, r3, #1
   1086a:	4927      	ldr	r1, [pc, #156]	; (10908 <hciTrSerialRxIncoming+0x268>)
   1086c:	600a      	str	r2, [r1, #0]
   1086e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10872:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   10874:	4b1f      	ldr	r3, [pc, #124]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   10876:	881b      	ldrh	r3, [r3, #0]
   10878:	3b01      	subs	r3, #1
   1087a:	b29a      	uxth	r2, r3
   1087c:	4b1d      	ldr	r3, [pc, #116]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   1087e:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   10880:	4b1c      	ldr	r3, [pc, #112]	; (108f4 <hciTrSerialRxIncoming+0x254>)
   10882:	881b      	ldrh	r3, [r3, #0]
   10884:	2b00      	cmp	r3, #0
   10886:	d102      	bne.n	1088e <hciTrSerialRxIncoming+0x1ee>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   10888:	4b18      	ldr	r3, [pc, #96]	; (108ec <hciTrSerialRxIncoming+0x24c>)
   1088a:	2203      	movs	r2, #3
   1088c:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   1088e:	9b01      	ldr	r3, [sp, #4]
   10890:	3301      	adds	r3, #1
   10892:	9301      	str	r3, [sp, #4]
      consumed_bytes++;
   10894:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10898:	3301      	adds	r3, #1
   1089a:	f8ad 300e 	strh.w	r3, [sp, #14]
      len--;
   1089e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   108a2:	3b01      	subs	r3, #1
   108a4:	f8ad 3002 	strh.w	r3, [sp, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   108a8:	4b10      	ldr	r3, [pc, #64]	; (108ec <hciTrSerialRxIncoming+0x24c>)
   108aa:	781b      	ldrb	r3, [r3, #0]
   108ac:	2b03      	cmp	r3, #3
   108ae:	d111      	bne.n	108d4 <hciTrSerialRxIncoming+0x234>
    {
      g_bHCIReceivingPacket = FALSE;
   108b0:	4b11      	ldr	r3, [pc, #68]	; (108f8 <hciTrSerialRxIncoming+0x258>)
   108b2:	2200      	movs	r2, #0
   108b4:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   108b6:	4b13      	ldr	r3, [pc, #76]	; (10904 <hciTrSerialRxIncoming+0x264>)
   108b8:	681b      	ldr	r3, [r3, #0]
   108ba:	2b00      	cmp	r3, #0
   108bc:	d007      	beq.n	108ce <hciTrSerialRxIncoming+0x22e>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   108be:	4b0c      	ldr	r3, [pc, #48]	; (108f0 <hciTrSerialRxIncoming+0x250>)
   108c0:	781b      	ldrb	r3, [r3, #0]
   108c2:	4a10      	ldr	r2, [pc, #64]	; (10904 <hciTrSerialRxIncoming+0x264>)
   108c4:	6812      	ldr	r2, [r2, #0]
   108c6:	4611      	mov	r1, r2
   108c8:	4618      	mov	r0, r3
   108ca:	f7fd fd65 	bl	e398 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   108ce:	4b07      	ldr	r3, [pc, #28]	; (108ec <hciTrSerialRxIncoming+0x24c>)
   108d0:	2200      	movs	r2, #0
   108d2:	701a      	strb	r2, [r3, #0]
  while (len)
   108d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   108d8:	2b00      	cmp	r3, #0
   108da:	f47f aeeb 	bne.w	106b4 <hciTrSerialRxIncoming+0x14>
    }
  }
  return consumed_bytes;
   108de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   108e2:	4618      	mov	r0, r3
   108e4:	b005      	add	sp, #20
   108e6:	f85d fb04 	ldr.w	pc, [sp], #4
   108ea:	bf00      	nop
   108ec:	1000421d 	.word	0x1000421d
   108f0:	1000421e 	.word	0x1000421e
   108f4:	10004220 	.word	0x10004220
   108f8:	1000421c 	.word	0x1000421c
   108fc:	10004224 	.word	0x10004224
   10900:	10004227 	.word	0x10004227
   10904:	10004228 	.word	0x10004228
   10908:	1000422c 	.word	0x1000422c

0001090c <secEccRng>:
 *
 *  \return TRUE if successful.
 */
/*************************************************************************************************/
static int secEccRng(uint8_t *p_dest, unsigned p_size)
{
   1090c:	b500      	push	{lr}
   1090e:	b083      	sub	sp, #12
   10910:	9001      	str	r0, [sp, #4]
   10912:	9100      	str	r1, [sp, #0]
  SecRand(p_dest, p_size);
   10914:	9b00      	ldr	r3, [sp, #0]
   10916:	b2db      	uxtb	r3, r3
   10918:	4619      	mov	r1, r3
   1091a:	9801      	ldr	r0, [sp, #4]
   1091c:	f006 ff30 	bl	17780 <SecRand>
  return TRUE;
   10920:	2301      	movs	r3, #1
}
   10922:	4618      	mov	r0, r3
   10924:	b003      	add	sp, #12
   10926:	f85d fb04 	ldr.w	pc, [sp], #4

0001092a <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1092a:	b500      	push	{lr}
   1092c:	b085      	sub	sp, #20
   1092e:	4603      	mov	r3, r0
   10930:	f88d 3007 	strb.w	r3, [sp, #7]
   10934:	460b      	mov	r3, r1
   10936:	f8ad 3004 	strh.w	r3, [sp, #4]
   1093a:	4613      	mov	r3, r2
   1093c:	f88d 3006 	strb.w	r3, [sp, #6]
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   10940:	2064      	movs	r0, #100	; 0x64
   10942:	f00e ffd7 	bl	1f8f4 <WsfMsgAlloc>
   10946:	9003      	str	r0, [sp, #12]

  if (pMsg)
   10948:	9b03      	ldr	r3, [sp, #12]
   1094a:	2b00      	cmp	r3, #0
   1094c:	d01a      	beq.n	10984 <SecEccGenKey+0x5a>
  {
    /* Generate the keys */
    uECC_make_key(pMsg->data.key.pubKey_x, pMsg->data.key.privKey);
   1094e:	9b03      	ldr	r3, [sp, #12]
   10950:	1d1a      	adds	r2, r3, #4
   10952:	9b03      	ldr	r3, [sp, #12]
   10954:	3344      	adds	r3, #68	; 0x44
   10956:	4619      	mov	r1, r3
   10958:	4610      	mov	r0, r2
   1095a:	f00e f9b5 	bl	1ecc8 <uECC_make_key>

    /* Send shared secret to handler */
    pMsg->hdr.event = event;
   1095e:	9b03      	ldr	r3, [sp, #12]
   10960:	f89d 2006 	ldrb.w	r2, [sp, #6]
   10964:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   10966:	9b03      	ldr	r3, [sp, #12]
   10968:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1096c:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.status = HCI_SUCCESS;
   1096e:	9b03      	ldr	r3, [sp, #12]
   10970:	2200      	movs	r2, #0
   10972:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   10974:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10978:	9903      	ldr	r1, [sp, #12]
   1097a:	4618      	mov	r0, r3
   1097c:	f00e ffde 	bl	1f93c <WsfMsgSend>

    return TRUE;
   10980:	2301      	movs	r3, #1
   10982:	e000      	b.n	10986 <SecEccGenKey+0x5c>
  }

  return FALSE;
   10984:	2300      	movs	r3, #0
}
   10986:	4618      	mov	r0, r3
   10988:	b005      	add	sp, #20
   1098a:	f85d fb04 	ldr.w	pc, [sp], #4

0001098e <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1098e:	b500      	push	{lr}
   10990:	b085      	sub	sp, #20
   10992:	9001      	str	r0, [sp, #4]
   10994:	4608      	mov	r0, r1
   10996:	4611      	mov	r1, r2
   10998:	461a      	mov	r2, r3
   1099a:	4603      	mov	r3, r0
   1099c:	f88d 3003 	strb.w	r3, [sp, #3]
   109a0:	460b      	mov	r3, r1
   109a2:	f8ad 3000 	strh.w	r3, [sp]
   109a6:	4613      	mov	r3, r2
   109a8:	f88d 3002 	strb.w	r3, [sp, #2]
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   109ac:	2064      	movs	r0, #100	; 0x64
   109ae:	f00e ffa1 	bl	1f8f4 <WsfMsgAlloc>
   109b2:	9003      	str	r0, [sp, #12]

  if (pMsg)
   109b4:	9b03      	ldr	r3, [sp, #12]
   109b6:	2b00      	cmp	r3, #0
   109b8:	d034      	beq.n	10a24 <SecEccGenSharedSecret+0x96>
  {
    bool_t keyValid = uECC_valid_public_key(pKey->pubKey_x);
   109ba:	9b01      	ldr	r3, [sp, #4]
   109bc:	4618      	mov	r0, r3
   109be:	f00e fa67 	bl	1ee90 <uECC_valid_public_key>
   109c2:	4603      	mov	r3, r0
   109c4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (keyValid)
   109c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   109cc:	2b00      	cmp	r3, #0
   109ce:	d009      	beq.n	109e4 <SecEccGenSharedSecret+0x56>
    {
      uECC_shared_secret(pKey->pubKey_x, pKey->privKey, pMsg->data.sharedSecret.secret);
   109d0:	9801      	ldr	r0, [sp, #4]
   109d2:	9b01      	ldr	r3, [sp, #4]
   109d4:	f103 0140 	add.w	r1, r3, #64	; 0x40
   109d8:	9b03      	ldr	r3, [sp, #12]
   109da:	3304      	adds	r3, #4
   109dc:	461a      	mov	r2, r3
   109de:	f00e f9af 	bl	1ed40 <uECC_shared_secret>
   109e2:	e006      	b.n	109f2 <SecEccGenSharedSecret+0x64>
    }
    else
    {
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   109e4:	9b03      	ldr	r3, [sp, #12]
   109e6:	3304      	adds	r3, #4
   109e8:	2220      	movs	r2, #32
   109ea:	21ff      	movs	r1, #255	; 0xff
   109ec:	4618      	mov	r0, r3
   109ee:	f014 fe65 	bl	256bc <memset>
    }

    /* Send shared secret to handler. */
    pMsg->hdr.event = event;
   109f2:	9b03      	ldr	r3, [sp, #12]
   109f4:	f89d 2002 	ldrb.w	r2, [sp, #2]
   109f8:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   109fa:	9b03      	ldr	r3, [sp, #12]
   109fc:	f8bd 2000 	ldrh.w	r2, [sp]
   10a00:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
   10a02:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10a06:	2b00      	cmp	r3, #0
   10a08:	d001      	beq.n	10a0e <SecEccGenSharedSecret+0x80>
   10a0a:	2200      	movs	r2, #0
   10a0c:	e000      	b.n	10a10 <SecEccGenSharedSecret+0x82>
   10a0e:	2212      	movs	r2, #18
   10a10:	9b03      	ldr	r3, [sp, #12]
   10a12:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   10a14:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a18:	9903      	ldr	r1, [sp, #12]
   10a1a:	4618      	mov	r0, r3
   10a1c:	f00e ff8e 	bl	1f93c <WsfMsgSend>

    return TRUE;
   10a20:	2301      	movs	r3, #1
   10a22:	e000      	b.n	10a26 <SecEccGenSharedSecret+0x98>
  }

  return FALSE;
   10a24:	2300      	movs	r3, #0
}
   10a26:	4618      	mov	r0, r3
   10a28:	b005      	add	sp, #20
   10a2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00010a30 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   10a30:	b508      	push	{r3, lr}
  //srand((unsigned int)time(NULL));
  uECC_set_rng(secEccRng);
   10a32:	4802      	ldr	r0, [pc, #8]	; (10a3c <SecEccInit+0xc>)
   10a34:	f00c fd72 	bl	1d51c <uECC_set_rng>
}
   10a38:	bf00      	nop
   10a3a:	bd08      	pop	{r3, pc}
   10a3c:	0001090d 	.word	0x0001090d

00010a40 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   10a40:	b082      	sub	sp, #8
   10a42:	9001      	str	r0, [sp, #4]
  hciCb.evtCback = evtCback;
   10a44:	4a02      	ldr	r2, [pc, #8]	; (10a50 <HciEvtRegister+0x10>)
   10a46:	9b01      	ldr	r3, [sp, #4]
   10a48:	6093      	str	r3, [r2, #8]
}
   10a4a:	bf00      	nop
   10a4c:	b002      	add	sp, #8
   10a4e:	4770      	bx	lr
   10a50:	10004230 	.word	0x10004230

00010a54 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   10a54:	b082      	sub	sp, #8
   10a56:	9001      	str	r0, [sp, #4]
  hciCb.secCback = secCback;
   10a58:	4a02      	ldr	r2, [pc, #8]	; (10a64 <HciSecRegister+0x10>)
   10a5a:	9b01      	ldr	r3, [sp, #4]
   10a5c:	60d3      	str	r3, [r2, #12]
}
   10a5e:	bf00      	nop
   10a60:	b002      	add	sp, #8
   10a62:	4770      	bx	lr
   10a64:	10004230 	.word	0x10004230

00010a68 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   10a68:	b082      	sub	sp, #8
   10a6a:	9001      	str	r0, [sp, #4]
   10a6c:	9100      	str	r1, [sp, #0]
  hciCb.aclCback = aclCback;
   10a6e:	4a04      	ldr	r2, [pc, #16]	; (10a80 <HciAclRegister+0x18>)
   10a70:	9b01      	ldr	r3, [sp, #4]
   10a72:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   10a74:	4a02      	ldr	r2, [pc, #8]	; (10a80 <HciAclRegister+0x18>)
   10a76:	9b00      	ldr	r3, [sp, #0]
   10a78:	6153      	str	r3, [r2, #20]
}
   10a7a:	bf00      	nop
   10a7c:	b002      	add	sp, #8
   10a7e:	4770      	bx	lr
   10a80:	10004230 	.word	0x10004230

00010a84 <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   10a84:	b500      	push	{lr}
   10a86:	b083      	sub	sp, #12
   10a88:	4603      	mov	r3, r0
   10a8a:	f88d 3007 	strb.w	r3, [sp, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   10a8e:	4a08      	ldr	r2, [pc, #32]	; (10ab0 <HciHandlerInit+0x2c>)
   10a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10a94:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   10a96:	4b06      	ldr	r3, [pc, #24]	; (10ab0 <HciHandlerInit+0x2c>)
   10a98:	2200      	movs	r2, #0
   10a9a:	601a      	str	r2, [r3, #0]
   10a9c:	4b04      	ldr	r3, [pc, #16]	; (10ab0 <HciHandlerInit+0x2c>)
   10a9e:	2200      	movs	r2, #0
   10aa0:	605a      	str	r2, [r3, #4]

  /* perform other hci initialization */
  HciCoreInit();
   10aa2:	f7fd fad9 	bl	e058 <HciCoreInit>
}
   10aa6:	bf00      	nop
   10aa8:	b003      	add	sp, #12
   10aaa:	f85d fb04 	ldr.w	pc, [sp], #4
   10aae:	bf00      	nop
   10ab0:	10004230 	.word	0x10004230

00010ab4 <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   10ab4:	b500      	push	{lr}
   10ab6:	b083      	sub	sp, #12
   10ab8:	4603      	mov	r3, r0
   10aba:	9100      	str	r1, [sp, #0]
   10abc:	f88d 3007 	strb.w	r3, [sp, #7]
  HciCoreHandler(event, pMsg);
   10ac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10ac4:	9900      	ldr	r1, [sp, #0]
   10ac6:	4618      	mov	r0, r3
   10ac8:	f7fd fc80 	bl	e3cc <HciCoreHandler>
}
   10acc:	bf00      	nop
   10ace:	b003      	add	sp, #12
   10ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00010ad4 <smprActSendSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10ad4:	b500      	push	{lr}
   10ad6:	b085      	sub	sp, #20
   10ad8:	9001      	str	r0, [sp, #4]
   10ada:	9100      	str	r1, [sp, #0]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   10adc:	9801      	ldr	r0, [sp, #4]
   10ade:	f000 fd9f 	bl	11620 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_SECURITY_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   10ae2:	200a      	movs	r0, #10
   10ae4:	f002 f92d 	bl	12d42 <smpMsgAlloc>
   10ae8:	9003      	str	r0, [sp, #12]
   10aea:	9b03      	ldr	r3, [sp, #12]
   10aec:	2b00      	cmp	r3, #0
   10aee:	d011      	beq.n	10b14 <smprActSendSecurityReq+0x40>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   10af0:	9b03      	ldr	r3, [sp, #12]
   10af2:	3308      	adds	r3, #8
   10af4:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_SECURITY_REQ);
   10af6:	9b02      	ldr	r3, [sp, #8]
   10af8:	1c5a      	adds	r2, r3, #1
   10afa:	9202      	str	r2, [sp, #8]
   10afc:	220b      	movs	r2, #11
   10afe:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, pMsg->dm.securityReq.auth);
   10b00:	9b02      	ldr	r3, [sp, #8]
   10b02:	1c5a      	adds	r2, r3, #1
   10b04:	9202      	str	r2, [sp, #8]
   10b06:	9a00      	ldr	r2, [sp, #0]
   10b08:	7912      	ldrb	r2, [r2, #4]
   10b0a:	701a      	strb	r2, [r3, #0]

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   10b0c:	9903      	ldr	r1, [sp, #12]
   10b0e:	9801      	ldr	r0, [sp, #4]
   10b10:	f002 f8e0 	bl	12cd4 <smpSendPkt>
  }
}
   10b14:	bf00      	nop
   10b16:	b005      	add	sp, #20
   10b18:	f85d fb04 	ldr.w	pc, [sp], #4

00010b1c <smprActProcPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10b1c:	b500      	push	{lr}
   10b1e:	b087      	sub	sp, #28
   10b20:	9001      	str	r0, [sp, #4]
   10b22:	9100      	str	r1, [sp, #0]
  dmSecPairIndEvt_t   pairInd;
  uint8_t             *p;

  /* allocate scratch buffer */
  if (pCcb->pScr == NULL)
   10b24:	9b01      	ldr	r3, [sp, #4]
   10b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10b28:	2b00      	cmp	r3, #0
   10b2a:	d114      	bne.n	10b56 <smprActProcPairReq+0x3a>
  {
    if ((pCcb->pScr = WsfBufAlloc(sizeof(smpScratch_t))) == NULL)
   10b2c:	2040      	movs	r0, #64	; 0x40
   10b2e:	f00e fe53 	bl	1f7d8 <WsfBufAlloc>
   10b32:	4602      	mov	r2, r0
   10b34:	9b01      	ldr	r3, [sp, #4]
   10b36:	631a      	str	r2, [r3, #48]	; 0x30
   10b38:	9b01      	ldr	r3, [sp, #4]
   10b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10b3c:	2b00      	cmp	r3, #0
   10b3e:	d10a      	bne.n	10b56 <smprActProcPairReq+0x3a>
    {
      /* alloc failed; cancel pairing */
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   10b40:	9b00      	ldr	r3, [sp, #0]
   10b42:	2208      	movs	r2, #8
   10b44:	70da      	strb	r2, [r3, #3]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   10b46:	9b00      	ldr	r3, [sp, #0]
   10b48:	2203      	movs	r2, #3
   10b4a:	709a      	strb	r2, [r3, #2]
      smpSmExecute(pCcb, pMsg);
   10b4c:	9900      	ldr	r1, [sp, #0]
   10b4e:	9801      	ldr	r0, [sp, #4]
   10b50:	f001 fa9c 	bl	1208c <smpSmExecute>
   10b54:	e040      	b.n	10bd8 <smprActProcPairReq+0xbc>
    /* should not happen */
    SMP_TRACE_ERR0("pScr already allocated");
  }

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   10b56:	9b01      	ldr	r3, [sp, #4]
   10b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   10b5c:	2201      	movs	r2, #1
   10b5e:	2101      	movs	r1, #1
   10b60:	4618      	mov	r0, r3
   10b62:	f004 ff3b 	bl	159dc <DmConnSetIdle>

  p = pMsg->data.pPacket + L2C_PAYLOAD_START;
   10b66:	9b00      	ldr	r3, [sp, #0]
   10b68:	685b      	ldr	r3, [r3, #4]
   10b6a:	3308      	adds	r3, #8
   10b6c:	9305      	str	r3, [sp, #20]

  /* store packet for later */
  memcpy(pCcb->pairReq, p, SMP_PAIR_REQ_LEN);
   10b6e:	9b01      	ldr	r3, [sp, #4]
   10b70:	3320      	adds	r3, #32
   10b72:	2207      	movs	r2, #7
   10b74:	9905      	ldr	r1, [sp, #20]
   10b76:	4618      	mov	r0, r3
   10b78:	f7fb fac2 	bl	c100 <memcpy>

  /* parse packet to callback event structure */
  p++;    /* skip command code */
   10b7c:	9b05      	ldr	r3, [sp, #20]
   10b7e:	3301      	adds	r3, #1
   10b80:	9305      	str	r3, [sp, #20]
  p++;    /* skip IO capabilities */
   10b82:	9b05      	ldr	r3, [sp, #20]
   10b84:	3301      	adds	r3, #1
   10b86:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT8(pairInd.oob, p);
   10b88:	9b05      	ldr	r3, [sp, #20]
   10b8a:	1c5a      	adds	r2, r3, #1
   10b8c:	9205      	str	r2, [sp, #20]
   10b8e:	781b      	ldrb	r3, [r3, #0]
   10b90:	f88d 3011 	strb.w	r3, [sp, #17]
  BSTREAM_TO_UINT8(pairInd.auth, p);
   10b94:	9b05      	ldr	r3, [sp, #20]
   10b96:	1c5a      	adds	r2, r3, #1
   10b98:	9205      	str	r2, [sp, #20]
   10b9a:	781b      	ldrb	r3, [r3, #0]
   10b9c:	f88d 3010 	strb.w	r3, [sp, #16]
  p++;    /* skip max key len */
   10ba0:	9b05      	ldr	r3, [sp, #20]
   10ba2:	3301      	adds	r3, #1
   10ba4:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
   10ba6:	9b05      	ldr	r3, [sp, #20]
   10ba8:	1c5a      	adds	r2, r3, #1
   10baa:	9205      	str	r2, [sp, #20]
   10bac:	781b      	ldrb	r3, [r3, #0]
   10bae:	f88d 3012 	strb.w	r3, [sp, #18]
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);
   10bb2:	9b05      	ldr	r3, [sp, #20]
   10bb4:	1c5a      	adds	r2, r3, #1
   10bb6:	9205      	str	r2, [sp, #20]
   10bb8:	781b      	ldrb	r3, [r3, #0]
   10bba:	f88d 3013 	strb.w	r3, [sp, #19]

  /* call app callback */
  pairInd.hdr.param = pCcb->connId;
   10bbe:	9b01      	ldr	r3, [sp, #4]
   10bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   10bc4:	b29b      	uxth	r3, r3
   10bc6:	f8ad 300c 	strh.w	r3, [sp, #12]
  pairInd.hdr.event = DM_SEC_PAIR_IND;
   10bca:	2331      	movs	r3, #49	; 0x31
   10bcc:	f88d 300e 	strb.w	r3, [sp, #14]
  DmSmpCbackExec((dmEvt_t *) &pairInd);
   10bd0:	ab03      	add	r3, sp, #12
   10bd2:	4618      	mov	r0, r3
   10bd4:	f005 fe9c 	bl	16910 <DmSmpCbackExec>
}
   10bd8:	b007      	add	sp, #28
   10bda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00010be0 <smprActSendPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRsp(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10be0:	b500      	push	{lr}
   10be2:	b087      	sub	sp, #28
   10be4:	9001      	str	r0, [sp, #4]
   10be6:	9100      	str	r1, [sp, #0]
  uint8_t   *p;
  uint8_t   oob;
  uint8_t   display;

  /* build packet to pairing response buffer in ccb */
  p = pCcb->pairRsp;
   10be8:	9b01      	ldr	r3, [sp, #4]
   10bea:	3327      	adds	r3, #39	; 0x27
   10bec:	9305      	str	r3, [sp, #20]
  UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RSP);
   10bee:	9b05      	ldr	r3, [sp, #20]
   10bf0:	1c5a      	adds	r2, r3, #1
   10bf2:	9205      	str	r2, [sp, #20]
   10bf4:	2202      	movs	r2, #2
   10bf6:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   10bf8:	4b34      	ldr	r3, [pc, #208]	; (10ccc <smprActSendPairRsp+0xec>)
   10bfa:	681a      	ldr	r2, [r3, #0]
   10bfc:	9b05      	ldr	r3, [sp, #20]
   10bfe:	1c59      	adds	r1, r3, #1
   10c00:	9105      	str	r1, [sp, #20]
   10c02:	7912      	ldrb	r2, [r2, #4]
   10c04:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.oob);
   10c06:	9b05      	ldr	r3, [sp, #20]
   10c08:	1c5a      	adds	r2, r3, #1
   10c0a:	9205      	str	r2, [sp, #20]
   10c0c:	9a00      	ldr	r2, [sp, #0]
   10c0e:	7912      	ldrb	r2, [r2, #4]
   10c10:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.auth);
   10c12:	9b05      	ldr	r3, [sp, #20]
   10c14:	1c5a      	adds	r2, r3, #1
   10c16:	9205      	str	r2, [sp, #20]
   10c18:	9a00      	ldr	r2, [sp, #0]
   10c1a:	7952      	ldrb	r2, [r2, #5]
   10c1c:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
   10c1e:	4b2b      	ldr	r3, [pc, #172]	; (10ccc <smprActSendPairRsp+0xec>)
   10c20:	681a      	ldr	r2, [r3, #0]
   10c22:	9b05      	ldr	r3, [sp, #20]
   10c24:	1c59      	adds	r1, r3, #1
   10c26:	9105      	str	r1, [sp, #20]
   10c28:	7992      	ldrb	r2, [r2, #6]
   10c2a:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
   10c2c:	9b05      	ldr	r3, [sp, #20]
   10c2e:	1c5a      	adds	r2, r3, #1
   10c30:	9205      	str	r2, [sp, #20]
   10c32:	9a00      	ldr	r2, [sp, #0]
   10c34:	7992      	ldrb	r2, [r2, #6]
   10c36:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
   10c38:	9b05      	ldr	r3, [sp, #20]
   10c3a:	1c5a      	adds	r2, r3, #1
   10c3c:	9205      	str	r2, [sp, #20]
   10c3e:	9a00      	ldr	r2, [sp, #0]
   10c40:	79d2      	ldrb	r2, [r2, #7]
   10c42:	701a      	strb	r2, [r3, #0]

  /* process pairing request and response data */
  if (smpCb.procPairing(pCcb, &oob, &display))
   10c44:	4b22      	ldr	r3, [pc, #136]	; (10cd0 <smprActSendPairRsp+0xf0>)
   10c46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   10c4a:	f10d 020e 	add.w	r2, sp, #14
   10c4e:	f10d 010f 	add.w	r1, sp, #15
   10c52:	9801      	ldr	r0, [sp, #4]
   10c54:	4798      	blx	r3
   10c56:	4603      	mov	r3, r0
   10c58:	2b00      	cmp	r3, #0
   10c5a:	d033      	beq.n	10cc4 <smprActSendPairRsp+0xe4>
  {
    /* set next expected packet */
    if ((pCcb->pairReq[SMP_AUTHREQ_POS] & pMsg->dm.pair.auth & SMP_AUTH_SC_FLAG) == SMP_AUTH_SC_FLAG)
   10c5c:	9b01      	ldr	r3, [sp, #4]
   10c5e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   10c62:	9b00      	ldr	r3, [sp, #0]
   10c64:	795b      	ldrb	r3, [r3, #5]
   10c66:	4013      	ands	r3, r2
   10c68:	b2db      	uxtb	r3, r3
   10c6a:	f003 0308 	and.w	r3, r3, #8
   10c6e:	2b00      	cmp	r3, #0
   10c70:	d004      	beq.n	10c7c <smprActSendPairRsp+0x9c>
    {
      pCcb->nextCmdCode = SMP_CMD_PUBLIC_KEY;
   10c72:	9b01      	ldr	r3, [sp, #4]
   10c74:	220c      	movs	r2, #12
   10c76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   10c7a:	e003      	b.n	10c84 <smprActSendPairRsp+0xa4>
    }
    else
    {
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   10c7c:	9b01      	ldr	r3, [sp, #4]
   10c7e:	2203      	movs	r2, #3
   10c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    }

    /* start smp response timer */
    smpStartRspTimer(pCcb);
   10c84:	9801      	ldr	r0, [sp, #4]
   10c86:	f000 fccb 	bl	11620 <smpStartRspTimer>

    /* send pairing response; allocate packet buffer */
    if ((pPkt = smpMsgAlloc(SMP_PAIR_RSP_LEN + L2C_PAYLOAD_START)) != NULL)
   10c8a:	200f      	movs	r0, #15
   10c8c:	f002 f859 	bl	12d42 <smpMsgAlloc>
   10c90:	9004      	str	r0, [sp, #16]
   10c92:	9b04      	ldr	r3, [sp, #16]
   10c94:	2b00      	cmp	r3, #0
   10c96:	d00c      	beq.n	10cb2 <smprActSendPairRsp+0xd2>
    {
      /* build packet from pairing response buffer */
      memcpy(pPkt + L2C_PAYLOAD_START, pCcb->pairRsp, SMP_PAIR_RSP_LEN);
   10c98:	9b04      	ldr	r3, [sp, #16]
   10c9a:	f103 0008 	add.w	r0, r3, #8
   10c9e:	9b01      	ldr	r3, [sp, #4]
   10ca0:	3327      	adds	r3, #39	; 0x27
   10ca2:	2207      	movs	r2, #7
   10ca4:	4619      	mov	r1, r3
   10ca6:	f7fb fa2b 	bl	c100 <memcpy>

      /* send packet */
      smpSendPkt(pCcb, pPkt);
   10caa:	9904      	ldr	r1, [sp, #16]
   10cac:	9801      	ldr	r0, [sp, #4]
   10cae:	f002 f811 	bl	12cd4 <smpSendPkt>
    }

    /* request authentication data */
    smpCb.procAuthReq(pCcb, oob, display);
   10cb2:	4b07      	ldr	r3, [pc, #28]	; (10cd0 <smprActSendPairRsp+0xf0>)
   10cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   10cb8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   10cbc:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10cc0:	9801      	ldr	r0, [sp, #4]
   10cc2:	4798      	blx	r3
  }
}
   10cc4:	bf00      	nop
   10cc6:	b007      	add	sp, #28
   10cc8:	f85d fb04 	ldr.w	pc, [sp], #4
   10ccc:	10002bb4 	.word	0x10002bb4
   10cd0:	100042a4 	.word	0x100042a4

00010cd4 <smprActProcPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10cd4:	b500      	push	{lr}
   10cd6:	b085      	sub	sp, #20
   10cd8:	9001      	str	r0, [sp, #4]
   10cda:	9100      	str	r1, [sp, #0]
  uint8_t   *p;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   10cdc:	9b00      	ldr	r3, [sp, #0]
   10cde:	685b      	ldr	r3, [r3, #4]
   10ce0:	3309      	adds	r3, #9
   10ce2:	9303      	str	r3, [sp, #12]

  /* store confirm value */
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   10ce4:	9b01      	ldr	r3, [sp, #4]
   10ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10ce8:	3320      	adds	r3, #32
   10cea:	2210      	movs	r2, #16
   10cec:	9903      	ldr	r1, [sp, #12]
   10cee:	4618      	mov	r0, r3
   10cf0:	f7fb fa06 	bl	c100 <memcpy>

  /* discard any packets received erroneously at this point */
  pCcb->nextCmdCode = 0;
   10cf4:	9b01      	ldr	r3, [sp, #4]
   10cf6:	2200      	movs	r2, #0
   10cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   10cfc:	bf00      	nop
   10cfe:	b005      	add	sp, #20
   10d00:	f85d fb04 	ldr.w	pc, [sp], #4

00010d04 <smprActProcPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10d04:	b500      	push	{lr}
   10d06:	b083      	sub	sp, #12
   10d08:	9001      	str	r0, [sp, #4]
   10d0a:	9100      	str	r1, [sp, #0]
  smprActProcPairCnf(pCcb, pMsg);
   10d0c:	9900      	ldr	r1, [sp, #0]
   10d0e:	9801      	ldr	r0, [sp, #4]
   10d10:	f7ff ffe0 	bl	10cd4 <smprActProcPairCnf>

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   10d14:	9b01      	ldr	r3, [sp, #4]
   10d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10d18:	3330      	adds	r3, #48	; 0x30
   10d1a:	2110      	movs	r1, #16
   10d1c:	4618      	mov	r0, r3
   10d1e:	f006 fd2f 	bl	17780 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   10d22:	9b01      	ldr	r3, [sp, #4]
   10d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10d26:	4619      	mov	r1, r3
   10d28:	9b01      	ldr	r3, [sp, #4]
   10d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10d2c:	3330      	adds	r3, #48	; 0x30
   10d2e:	461a      	mov	r2, r3
   10d30:	9801      	ldr	r0, [sp, #4]
   10d32:	f001 fd77 	bl	12824 <smpCalcC1Part1>
}
   10d36:	bf00      	nop
   10d38:	b003      	add	sp, #12
   10d3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00010d40 <smprActCnfVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActCnfVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10d40:	b500      	push	{lr}
   10d42:	b083      	sub	sp, #12
   10d44:	9001      	str	r0, [sp, #4]
   10d46:	9100      	str	r1, [sp, #0]
  /* compare calculated confirm value with value received earlier */
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   10d48:	9b00      	ldr	r3, [sp, #0]
   10d4a:	6858      	ldr	r0, [r3, #4]
   10d4c:	9b01      	ldr	r3, [sp, #4]
   10d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10d50:	3320      	adds	r3, #32
   10d52:	2210      	movs	r2, #16
   10d54:	4619      	mov	r1, r3
   10d56:	f014 fc7f 	bl	25658 <memcmp>
   10d5a:	4603      	mov	r3, r0
   10d5c:	2b00      	cmp	r3, #0
   10d5e:	d024      	beq.n	10daa <smprActCnfVerify+0x6a>
  {
    /* confirm values don't match; update repeated attempts count */
    pCcb->attempts++;
   10d60:	9b01      	ldr	r3, [sp, #4]
   10d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   10d66:	3301      	adds	r3, #1
   10d68:	b2da      	uxtb	r2, r3
   10d6a:	9b01      	ldr	r3, [sp, #4]
   10d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   10d70:	9b01      	ldr	r3, [sp, #4]
   10d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   10d76:	4618      	mov	r0, r3
   10d78:	f001 fb38 	bl	123ec <SmpDbPairingFailed>
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
   10d7c:	9b00      	ldr	r3, [sp, #0]
   10d7e:	2204      	movs	r2, #4
   10d80:	70da      	strb	r2, [r3, #3]

    if (pCcb->attempts == pSmpCfg->maxAttempts)
   10d82:	9b01      	ldr	r3, [sp, #4]
   10d84:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
   10d88:	4b10      	ldr	r3, [pc, #64]	; (10dcc <smprActCnfVerify+0x8c>)
   10d8a:	681b      	ldr	r3, [r3, #0]
   10d8c:	79db      	ldrb	r3, [r3, #7]
   10d8e:	429a      	cmp	r2, r3
   10d90:	d103      	bne.n	10d9a <smprActCnfVerify+0x5a>
    {
      /* max attempts reached */
      pMsg->hdr.event = SMP_MSG_INT_MAX_ATTEMPTS;
   10d92:	9b00      	ldr	r3, [sp, #0]
   10d94:	220d      	movs	r2, #13
   10d96:	709a      	strb	r2, [r3, #2]
   10d98:	e002      	b.n	10da0 <smprActCnfVerify+0x60>
    }
    else
    {
      /* else just fail */
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   10d9a:	9b00      	ldr	r3, [sp, #0]
   10d9c:	2203      	movs	r2, #3
   10d9e:	709a      	strb	r2, [r3, #2]
    }

    smpSmExecute(pCcb, pMsg);
   10da0:	9900      	ldr	r1, [sp, #0]
   10da2:	9801      	ldr	r0, [sp, #4]
   10da4:	f001 f972 	bl	1208c <smpSmExecute>
    return;
   10da8:	e00c      	b.n	10dc4 <smprActCnfVerify+0x84>
  }

  /* do STK calculation: key, responder rand, initiator rand */
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4, pCcb->pScr->buf.b2);
   10daa:	9b01      	ldr	r3, [sp, #4]
   10dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10dae:	4619      	mov	r1, r3
   10db0:	9b01      	ldr	r3, [sp, #4]
   10db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10db4:	f103 0230 	add.w	r2, r3, #48	; 0x30
   10db8:	9b01      	ldr	r3, [sp, #4]
   10dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10dbc:	3310      	adds	r3, #16
   10dbe:	9801      	ldr	r0, [sp, #4]
   10dc0:	f001 fefc 	bl	12bbc <smpCalcS1>
}
   10dc4:	b003      	add	sp, #12
   10dc6:	f85d fb04 	ldr.w	pc, [sp], #4
   10dca:	bf00      	nop
   10dcc:	10002bb4 	.word	0x10002bb4

00010dd0 <smprActSendPairRandom>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRandom(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10dd0:	b500      	push	{lr}
   10dd2:	b087      	sub	sp, #28
   10dd4:	9001      	str	r0, [sp, #4]
   10dd6:	9100      	str	r1, [sp, #0]
  uint8_t   *pPkt;
  uint8_t   *p;
  uint8_t   encKeyLen;

  /* get max STK length */
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   10dd8:	9b01      	ldr	r3, [sp, #4]
   10dda:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   10dde:	9b01      	ldr	r3, [sp, #4]
   10de0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   10de4:	4293      	cmp	r3, r2
   10de6:	bf28      	it	cs
   10de8:	4613      	movcs	r3, r2
   10dea:	f88d 3017 	strb.w	r3, [sp, #23]
               pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

  /* store STK and adjust based on max key length */
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   10dee:	9b01      	ldr	r3, [sp, #4]
   10df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10df2:	f103 0020 	add.w	r0, r3, #32
   10df6:	9b00      	ldr	r3, [sp, #0]
   10df8:	685b      	ldr	r3, [r3, #4]
   10dfa:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10dfe:	4619      	mov	r1, r3
   10e00:	f7fb f97e 	bl	c100 <memcpy>
  memset((pCcb->pScr->buf.b3 + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   10e04:	9b01      	ldr	r3, [sp, #4]
   10e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10e08:	f103 0220 	add.w	r2, r3, #32
   10e0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10e10:	18d0      	adds	r0, r2, r3
   10e12:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10e16:	f1c3 0310 	rsb	r3, r3, #16
   10e1a:	461a      	mov	r2, r3
   10e1c:	2100      	movs	r1, #0
   10e1e:	f014 fc4d 	bl	256bc <memset>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   10e22:	9801      	ldr	r0, [sp, #4]
   10e24:	f000 fbfc 	bl	11620 <smpStartRspTimer>

  /* allocate packet buffer and send pairing random packet */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   10e28:	2019      	movs	r0, #25
   10e2a:	f001 ff8a 	bl	12d42 <smpMsgAlloc>
   10e2e:	9004      	str	r0, [sp, #16]
   10e30:	9b04      	ldr	r3, [sp, #16]
   10e32:	2b00      	cmp	r3, #0
   10e34:	d013      	beq.n	10e5e <smprActSendPairRandom+0x8e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   10e36:	9b04      	ldr	r3, [sp, #16]
   10e38:	3308      	adds	r3, #8
   10e3a:	9303      	str	r3, [sp, #12]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   10e3c:	9b03      	ldr	r3, [sp, #12]
   10e3e:	1c5a      	adds	r2, r3, #1
   10e40:	9203      	str	r2, [sp, #12]
   10e42:	2204      	movs	r2, #4
   10e44:	701a      	strb	r2, [r3, #0]
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   10e46:	9b01      	ldr	r3, [sp, #4]
   10e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10e4a:	3330      	adds	r3, #48	; 0x30
   10e4c:	2210      	movs	r2, #16
   10e4e:	4619      	mov	r1, r3
   10e50:	9803      	ldr	r0, [sp, #12]
   10e52:	f7fb f955 	bl	c100 <memcpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   10e56:	9904      	ldr	r1, [sp, #16]
   10e58:	9801      	ldr	r0, [sp, #4]
   10e5a:	f001 ff3b 	bl	12cd4 <smpSendPkt>
  }
}
   10e5e:	bf00      	nop
   10e60:	b007      	add	sp, #28
   10e62:	f85d fb04 	ldr.w	pc, [sp], #4

00010e66 <smprActSetupKeyDist>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSetupKeyDist(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10e66:	b500      	push	{lr}
   10e68:	b083      	sub	sp, #12
   10e6a:	9001      	str	r0, [sp, #4]
   10e6c:	9100      	str	r1, [sp, #0]
  /* don't receive anything yet */
  pCcb->nextCmdCode = 0;
   10e6e:	9b01      	ldr	r3, [sp, #4]
   10e70:	2200      	movs	r2, #0
   10e72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* start smp response timer once for entire key distribution phase */
  smpStartRspTimer(pCcb);
   10e76:	9801      	ldr	r0, [sp, #4]
   10e78:	f000 fbd2 	bl	11620 <smpStartRspTimer>

  /* initialize parameters in key ind struct */
  pCcb->pScr->keyInd.hdr.param = pCcb->connId;
   10e7c:	9b01      	ldr	r3, [sp, #4]
   10e7e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   10e82:	9b01      	ldr	r3, [sp, #4]
   10e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10e86:	b292      	uxth	r2, r2
   10e88:	801a      	strh	r2, [r3, #0]
  pCcb->pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ?
   10e8a:	9b01      	ldr	r3, [sp, #4]
   10e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10e90:	f003 0304 	and.w	r3, r3, #4
   10e94:	2b00      	cmp	r3, #0
   10e96:	d001      	beq.n	10e9c <smprActSetupKeyDist+0x36>
   10e98:	2202      	movs	r2, #2
   10e9a:	e000      	b.n	10e9e <smprActSetupKeyDist+0x38>
   10e9c:	2201      	movs	r2, #1
   10e9e:	9b01      	ldr	r3, [sp, #4]
   10ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10ea2:	77da      	strb	r2, [r3, #31]
                                DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
  pCcb->pScr->keyInd.encKeyLen =
    (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   10ea4:	9b01      	ldr	r3, [sp, #4]
   10ea6:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
   10eaa:	9b01      	ldr	r3, [sp, #4]
   10eac:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
  pCcb->pScr->keyInd.encKeyLen =
   10eb0:	9b01      	ldr	r3, [sp, #4]
   10eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
   10eb4:	428a      	cmp	r2, r1
   10eb6:	bf28      	it	cs
   10eb8:	460a      	movcs	r2, r1
   10eba:	b2d2      	uxtb	r2, r2
  pCcb->pScr->keyInd.encKeyLen =
   10ebc:	f883 2020 	strb.w	r2, [r3, #32]

  /* start key distribution */
  smprActSendKey(pCcb, pMsg);
   10ec0:	9900      	ldr	r1, [sp, #0]
   10ec2:	9801      	ldr	r0, [sp, #4]
   10ec4:	f000 f804 	bl	10ed0 <smprActSendKey>
}
   10ec8:	bf00      	nop
   10eca:	b003      	add	sp, #12
   10ecc:	f85d fb04 	ldr.w	pc, [sp], #4

00010ed0 <smprActSendKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10ed0:	b500      	push	{lr}
   10ed2:	b085      	sub	sp, #20
   10ed4:	9001      	str	r0, [sp, #4]
   10ed6:	9100      	str	r1, [sp, #0]
  uint8_t     keyDist;

  /* get responder key distribution */
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   10ed8:	9b01      	ldr	r3, [sp, #4]
   10eda:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   10ede:	9b01      	ldr	r3, [sp, #4]
   10ee0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   10ee4:	4013      	ands	r3, r2
   10ee6:	f88d 300f 	strb.w	r3, [sp, #15]

  /* send next key; if done sending keys set up to receive keys */
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   10eea:	9b01      	ldr	r3, [sp, #4]
   10eec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d156      	bne.n	10fa2 <smprActSendKey+0xd2>
   10ef4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10ef8:	4619      	mov	r1, r3
   10efa:	9801      	ldr	r0, [sp, #4]
   10efc:	f000 fe20 	bl	11b40 <smpSendKey>
   10f00:	4603      	mov	r3, r0
   10f02:	2b00      	cmp	r3, #0
   10f04:	d04d      	beq.n	10fa2 <smprActSendKey+0xd2>
  {
    pCcb->nextCmdCode = 0;
   10f06:	9b01      	ldr	r3, [sp, #4]
   10f08:	2200      	movs	r2, #0
   10f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

    /* get initiator key distribution */
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   10f0e:	9b01      	ldr	r3, [sp, #4]
   10f10:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   10f14:	9b01      	ldr	r3, [sp, #4]
   10f16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   10f1a:	4013      	ands	r3, r2
   10f1c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* set up to receive first key distribution packet */
    if (keyDist & SMP_KEY_DIST_ENC)
   10f20:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10f24:	f003 0301 	and.w	r3, r3, #1
   10f28:	2b00      	cmp	r3, #0
   10f2a:	d019      	beq.n	10f60 <smprActSendKey+0x90>
    {
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
   10f2c:	4b1f      	ldr	r3, [pc, #124]	; (10fac <smprActSendKey+0xdc>)
   10f2e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   10f32:	2b00      	cmp	r3, #0
   10f34:	d00f      	beq.n	10f56 <smprActSendKey+0x86>
   10f36:	9b01      	ldr	r3, [sp, #4]
   10f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10f3a:	781b      	ldrb	r3, [r3, #0]
   10f3c:	2b00      	cmp	r3, #0
   10f3e:	d00a      	beq.n	10f56 <smprActSendKey+0x86>
      {
        if (keyDist & SMP_KEY_DIST_ID)
   10f40:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10f44:	f003 0302 	and.w	r3, r3, #2
   10f48:	2b00      	cmp	r3, #0
   10f4a:	d01e      	beq.n	10f8a <smprActSendKey+0xba>
        {
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   10f4c:	9b01      	ldr	r3, [sp, #4]
   10f4e:	2208      	movs	r2, #8
   10f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        if (keyDist & SMP_KEY_DIST_ID)
   10f54:	e019      	b.n	10f8a <smprActSendKey+0xba>
        }
      }
      else
      {
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
   10f56:	9b01      	ldr	r3, [sp, #4]
   10f58:	2206      	movs	r2, #6
   10f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   10f5e:	e014      	b.n	10f8a <smprActSendKey+0xba>
      }
    }
    else if (keyDist & SMP_KEY_DIST_ID)
   10f60:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10f64:	f003 0302 	and.w	r3, r3, #2
   10f68:	2b00      	cmp	r3, #0
   10f6a:	d004      	beq.n	10f76 <smprActSendKey+0xa6>
    {
      pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   10f6c:	9b01      	ldr	r3, [sp, #4]
   10f6e:	2208      	movs	r2, #8
   10f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   10f74:	e009      	b.n	10f8a <smprActSendKey+0xba>
    }
    else if (keyDist & SMP_KEY_DIST_SIGN)
   10f76:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10f7a:	f003 0304 	and.w	r3, r3, #4
   10f7e:	2b00      	cmp	r3, #0
   10f80:	d003      	beq.n	10f8a <smprActSendKey+0xba>
    {
      pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   10f82:	9b01      	ldr	r3, [sp, #4]
   10f84:	220a      	movs	r2, #10
   10f86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    }

    if (pCcb->nextCmdCode == 0)
   10f8a:	9b01      	ldr	r3, [sp, #4]
   10f8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   10f90:	2b00      	cmp	r3, #0
   10f92:	d106      	bne.n	10fa2 <smprActSendKey+0xd2>
    {
      /* no keys to receive; send ourselves pairing complete msg */
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   10f94:	9b00      	ldr	r3, [sp, #0]
   10f96:	220e      	movs	r2, #14
   10f98:	709a      	strb	r2, [r3, #2]
      smpSmExecute(pCcb, pMsg);
   10f9a:	9900      	ldr	r1, [sp, #0]
   10f9c:	9801      	ldr	r0, [sp, #4]
   10f9e:	f001 f875 	bl	1208c <smpSmExecute>
    }
  }
}
   10fa2:	bf00      	nop
   10fa4:	b005      	add	sp, #20
   10fa6:	f85d fb04 	ldr.w	pc, [sp], #4
   10faa:	bf00      	nop
   10fac:	100042a4 	.word	0x100042a4

00010fb0 <smprActRcvKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActRcvKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10fb0:	b500      	push	{lr}
   10fb2:	b085      	sub	sp, #20
   10fb4:	9001      	str	r0, [sp, #4]
   10fb6:	9100      	str	r1, [sp, #0]
  uint8_t   keyDist;

  /* get initiator key distribution */
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   10fb8:	9b01      	ldr	r3, [sp, #4]
   10fba:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   10fbe:	9b01      	ldr	r3, [sp, #4]
   10fc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   10fc4:	4013      	ands	r3, r2
   10fc6:	f88d 300f 	strb.w	r3, [sp, #15]

  /* process received key */
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   10fca:	9b01      	ldr	r3, [sp, #4]
   10fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10fce:	4619      	mov	r1, r3
   10fd0:	9b00      	ldr	r3, [sp, #0]
   10fd2:	685a      	ldr	r2, [r3, #4]
   10fd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10fd8:	9801      	ldr	r0, [sp, #4]
   10fda:	f000 fefb 	bl	11dd4 <smpProcRcvKey>
   10fde:	4603      	mov	r3, r0
   10fe0:	2b00      	cmp	r3, #0
   10fe2:	d006      	beq.n	10ff2 <smprActRcvKey+0x42>
  {
    /* no more keys to receive; send ourselves pairing complete msg */
    pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   10fe4:	9b00      	ldr	r3, [sp, #0]
   10fe6:	220e      	movs	r2, #14
   10fe8:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   10fea:	9900      	ldr	r1, [sp, #0]
   10fec:	9801      	ldr	r0, [sp, #4]
   10fee:	f001 f84d 	bl	1208c <smpSmExecute>
  }
}
   10ff2:	bf00      	nop
   10ff4:	b005      	add	sp, #20
   10ff6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00010ffc <smprScActStoreLescPin>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActStoreLescPin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   10ffc:	b500      	push	{lr}
   10ffe:	b083      	sub	sp, #12
   11000:	9001      	str	r0, [sp, #4]
   11002:	9100      	str	r1, [sp, #0]
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   11004:	9b01      	ldr	r3, [sp, #4]
   11006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11008:	785b      	ldrb	r3, [r3, #1]
   1100a:	2b03      	cmp	r3, #3
   1100c:	d12d      	bne.n	1106a <smprScActStoreLescPin+0x6e>
  {
    /* Store the pin */
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   1100e:	9b01      	ldr	r3, [sp, #4]
   11010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11012:	695b      	ldr	r3, [r3, #20]
   11014:	3320      	adds	r3, #32
   11016:	4917      	ldr	r1, [pc, #92]	; (11074 <smprScActStoreLescPin+0x78>)
   11018:	4618      	mov	r0, r3
   1101a:	f7fb f951 	bl	c2c0 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
   1101e:	9b01      	ldr	r3, [sp, #4]
   11020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11022:	695b      	ldr	r3, [r3, #20]
   11024:	3330      	adds	r3, #48	; 0x30
   11026:	4913      	ldr	r1, [pc, #76]	; (11074 <smprScActStoreLescPin+0x78>)
   11028:	4618      	mov	r0, r3
   1102a:	f7fb f949 	bl	c2c0 <Calc128Cpy>

    if (pMsg->dm.authRsp.authDataLen <= 3)
   1102e:	9b00      	ldr	r3, [sp, #0]
   11030:	7d1b      	ldrb	r3, [r3, #20]
   11032:	2b03      	cmp	r3, #3
   11034:	d819      	bhi.n	1106a <smprScActStoreLescPin+0x6e>
    {
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   11036:	9b01      	ldr	r3, [sp, #4]
   11038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1103a:	695b      	ldr	r3, [r3, #20]
   1103c:	f103 002d 	add.w	r0, r3, #45	; 0x2d
   11040:	9b00      	ldr	r3, [sp, #0]
   11042:	1d19      	adds	r1, r3, #4
   11044:	9b00      	ldr	r3, [sp, #0]
   11046:	7d1b      	ldrb	r3, [r3, #20]
   11048:	b29b      	uxth	r3, r3
   1104a:	461a      	mov	r2, r3
   1104c:	f7fb f971 	bl	c332 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   11050:	9b01      	ldr	r3, [sp, #4]
   11052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11054:	695b      	ldr	r3, [r3, #20]
   11056:	f103 003d 	add.w	r0, r3, #61	; 0x3d
   1105a:	9b00      	ldr	r3, [sp, #0]
   1105c:	1d19      	adds	r1, r3, #4
   1105e:	9b00      	ldr	r3, [sp, #0]
   11060:	7d1b      	ldrb	r3, [r3, #20]
   11062:	b29b      	uxth	r3, r3
   11064:	461a      	mov	r2, r3
   11066:	f7fb f964 	bl	c332 <WStrReverseCpy>
    }
  }
}
   1106a:	bf00      	nop
   1106c:	b003      	add	sp, #12
   1106e:	f85d fb04 	ldr.w	pc, [sp], #4
   11072:	bf00      	nop
   11074:	00027d50 	.word	0x00027d50

00011078 <smprScActSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11078:	b500      	push	{lr}
   1107a:	b083      	sub	sp, #12
   1107c:	9001      	str	r0, [sp, #4]
   1107e:	9100      	str	r1, [sp, #0]
  /* Execute Common Auth Select actions */
  smpScActAuthSelect(pCcb, pMsg);
   11080:	9900      	ldr	r1, [sp, #0]
   11082:	9801      	ldr	r0, [sp, #4]
   11084:	f002 fb0e 	bl	136a4 <smpScActAuthSelect>

  /* Send our public key */
  smpScSendPubKey(pCcb, pMsg);
   11088:	9900      	ldr	r1, [sp, #0]
   1108a:	9801      	ldr	r0, [sp, #4]
   1108c:	f003 f83c 	bl	14108 <smpScSendPubKey>
}
   11090:	bf00      	nop
   11092:	b003      	add	sp, #12
   11094:	f85d fb04 	ldr.w	pc, [sp], #4

00011098 <smprScActJwncSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11098:	b500      	push	{lr}
   1109a:	b083      	sub	sp, #12
   1109c:	9001      	str	r0, [sp, #4]
   1109e:	9100      	str	r1, [sp, #0]
  /* Select Random Na (128-bits) */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   110a0:	9b01      	ldr	r3, [sp, #4]
   110a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   110a4:	695b      	ldr	r3, [r3, #20]
   110a6:	3310      	adds	r3, #16
   110a8:	2110      	movs	r1, #16
   110aa:	4618      	mov	r0, r3
   110ac:	f006 fb68 	bl	17780 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);

  /* Set Ra and Rb to zero */
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
   110b0:	9b01      	ldr	r3, [sp, #4]
   110b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   110b4:	695b      	ldr	r3, [r3, #20]
   110b6:	3320      	adds	r3, #32
   110b8:	490b      	ldr	r1, [pc, #44]	; (110e8 <smprScActJwncSetup+0x50>)
   110ba:	4618      	mov	r0, r3
   110bc:	f7fb f900 	bl	c2c0 <Calc128Cpy>
  Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   110c0:	9b01      	ldr	r3, [sp, #4]
   110c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   110c4:	695b      	ldr	r3, [r3, #20]
   110c6:	3330      	adds	r3, #48	; 0x30
   110c8:	4907      	ldr	r1, [pc, #28]	; (110e8 <smprScActJwncSetup+0x50>)
   110ca:	4618      	mov	r0, r3
   110cc:	f7fb f8f8 	bl	c2c0 <Calc128Cpy>

  /* Next command is a Pair Rand from Initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   110d0:	9b01      	ldr	r3, [sp, #4]
   110d2:	2204      	movs	r2, #4
   110d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Perform F4 Calculation of Cb */
  smpScActJwncCalcF4(pCcb, pMsg);
   110d8:	9900      	ldr	r1, [sp, #0]
   110da:	9801      	ldr	r0, [sp, #4]
   110dc:	f002 fb57 	bl	1378e <smpScActJwncCalcF4>
}
   110e0:	bf00      	nop
   110e2:	b003      	add	sp, #12
   110e4:	f85d fb04 	ldr.w	pc, [sp], #4
   110e8:	00027d50 	.word	0x00027d50

000110ec <smprScActJwncSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   110ec:	b500      	push	{lr}
   110ee:	b083      	sub	sp, #12
   110f0:	9001      	str	r0, [sp, #4]
   110f2:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("JWNC Confirm", pMsg->aes.pCiphertext);

  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   110f4:	9b00      	ldr	r3, [sp, #0]
   110f6:	685b      	ldr	r3, [r3, #4]
   110f8:	461a      	mov	r2, r3
   110fa:	9900      	ldr	r1, [sp, #0]
   110fc:	9801      	ldr	r0, [sp, #4]
   110fe:	f003 f8b5 	bl	1426c <smpScSendPairCnf>
}
   11102:	bf00      	nop
   11104:	b003      	add	sp, #12
   11106:	f85d fb04 	ldr.w	pc, [sp], #4

0001110a <smprScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1110a:	b500      	push	{lr}
   1110c:	b085      	sub	sp, #20
   1110e:	9001      	str	r0, [sp, #4]
   11110:	9100      	str	r1, [sp, #0]
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   11112:	9b00      	ldr	r3, [sp, #0]
   11114:	685b      	ldr	r3, [r3, #4]
   11116:	3309      	adds	r3, #9
   11118:	9303      	str	r3, [sp, #12]

  /* Na from initiator is in Random Cmd from initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   1111a:	9b01      	ldr	r3, [sp, #4]
   1111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1111e:	695b      	ldr	r3, [r3, #20]
   11120:	2210      	movs	r2, #16
   11122:	9903      	ldr	r1, [sp, #12]
   11124:	4618      	mov	r0, r3
   11126:	f7fb f904 	bl	c332 <WStrReverseCpy>

  /* Calculate Vb using G2 */
  smpScActJwncCalcG2(pCcb, pMsg);
   1112a:	9900      	ldr	r1, [sp, #0]
   1112c:	9801      	ldr	r0, [sp, #4]
   1112e:	f002 fb64 	bl	137fa <smpScActJwncCalcG2>
}
   11132:	bf00      	nop
   11134:	b005      	add	sp, #20
   11136:	f85d fb04 	ldr.w	pc, [sp], #4

0001113a <smprScActJwncDisplay>:
*
*  \return None.
*/
/*************************************************************************************************/
void smprScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1113a:	b500      	push	{lr}
   1113c:	b083      	sub	sp, #12
   1113e:	9001      	str	r0, [sp, #4]
   11140:	9100      	str	r1, [sp, #0]
  /* Next command is a DH Key Check  */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   11142:	9b01      	ldr	r3, [sp, #4]
   11144:	220d      	movs	r2, #13
   11146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Send Pair Rand Nb to the Initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1114a:	9b01      	ldr	r3, [sp, #4]
   1114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1114e:	695b      	ldr	r3, [r3, #20]
   11150:	3310      	adds	r3, #16
   11152:	461a      	mov	r2, r3
   11154:	9900      	ldr	r1, [sp, #0]
   11156:	9801      	ldr	r0, [sp, #4]
   11158:	f003 f851 	bl	141fe <smpScSendRand>

  /* Send Numeric Comparison to application, if applicable */
  smpScActJwncDisplay(pCcb, pMsg);
   1115c:	9900      	ldr	r1, [sp, #0]
   1115e:	9801      	ldr	r0, [sp, #4]
   11160:	f002 fb9c 	bl	1389c <smpScActJwncDisplay>
}
   11164:	bf00      	nop
   11166:	b003      	add	sp, #12
   11168:	f85d fb04 	ldr.w	pc, [sp], #4

0001116c <smprScActPkStoreCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStoreCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1116c:	b500      	push	{lr}
   1116e:	b085      	sub	sp, #20
   11170:	9001      	str	r0, [sp, #4]
   11172:	9100      	str	r1, [sp, #0]
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   11174:	9b00      	ldr	r3, [sp, #0]
   11176:	685b      	ldr	r3, [r3, #4]
   11178:	3309      	adds	r3, #9
   1117a:	9303      	str	r3, [sp, #12]

  /* Store the Cai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   1117c:	9b01      	ldr	r3, [sp, #4]
   1117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11180:	695b      	ldr	r3, [r3, #20]
   11182:	3350      	adds	r3, #80	; 0x50
   11184:	2210      	movs	r2, #16
   11186:	9903      	ldr	r1, [sp, #12]
   11188:	4618      	mov	r0, r3
   1118a:	f7fb f8d2 	bl	c332 <WStrReverseCpy>
}
   1118e:	bf00      	nop
   11190:	b005      	add	sp, #20
   11192:	f85d fb04 	ldr.w	pc, [sp], #4

00011196 <smprScActPkStoreCnfAndCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStoreCnfAndCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11196:	b500      	push	{lr}
   11198:	b083      	sub	sp, #12
   1119a:	9001      	str	r0, [sp, #4]
   1119c:	9100      	str	r1, [sp, #0]
  smprScActPkStoreCnf(pCcb, pMsg);
   1119e:	9900      	ldr	r1, [sp, #0]
   111a0:	9801      	ldr	r0, [sp, #4]
   111a2:	f7ff ffe3 	bl	1116c <smprScActPkStoreCnf>
  smprScActPkCalcCb(pCcb, pMsg);
   111a6:	9900      	ldr	r1, [sp, #0]
   111a8:	9801      	ldr	r0, [sp, #4]
   111aa:	f000 f814 	bl	111d6 <smprScActPkCalcCb>
}
   111ae:	bf00      	nop
   111b0:	b003      	add	sp, #12
   111b2:	f85d fb04 	ldr.w	pc, [sp], #4

000111b6 <smprScActPkStorePinAndCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStorePinAndCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   111b6:	b500      	push	{lr}
   111b8:	b083      	sub	sp, #12
   111ba:	9001      	str	r0, [sp, #4]
   111bc:	9100      	str	r1, [sp, #0]
  smprScActStoreLescPin(pCcb, pMsg);
   111be:	9900      	ldr	r1, [sp, #0]
   111c0:	9801      	ldr	r0, [sp, #4]
   111c2:	f7ff ff1b 	bl	10ffc <smprScActStoreLescPin>
  smprScActPkCalcCb(pCcb, pMsg);
   111c6:	9900      	ldr	r1, [sp, #0]
   111c8:	9801      	ldr	r0, [sp, #4]
   111ca:	f000 f804 	bl	111d6 <smprScActPkCalcCb>
}
   111ce:	bf00      	nop
   111d0:	b003      	add	sp, #12
   111d2:	f85d fb04 	ldr.w	pc, [sp], #4

000111d6 <smprScActPkCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   111d6:	b530      	push	{r4, r5, lr}
   111d8:	b085      	sub	sp, #20
   111da:	9003      	str	r0, [sp, #12]
   111dc:	9102      	str	r1, [sp, #8]
  /* Get random Nbi */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   111de:	9b03      	ldr	r3, [sp, #12]
   111e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   111e2:	695b      	ldr	r3, [r3, #20]
   111e4:	3310      	adds	r3, #16
   111e6:	2110      	movs	r1, #16
   111e8:	4618      	mov	r0, r3
   111ea:	f006 fac9 	bl	17780 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);

  /* Next command is the Pair Random */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   111ee:	9b03      	ldr	r3, [sp, #12]
   111f0:	2204      	movs	r2, #4
   111f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Cb = f4(PKbx, PKax, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   111f6:	9b03      	ldr	r3, [sp, #12]
   111f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   111fa:	68db      	ldr	r3, [r3, #12]
   111fc:	461c      	mov	r4, r3
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   111fe:	9b03      	ldr	r3, [sp, #12]
   11200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11202:	689b      	ldr	r3, [r3, #8]
   11204:	461d      	mov	r5, r3
  SmpScCalcF4(pCcb, pMsg,
   11206:	9803      	ldr	r0, [sp, #12]
   11208:	f003 f867 	bl	142da <smpGetPkBit>
   1120c:	4603      	mov	r3, r0
   1120e:	461a      	mov	r2, r3
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   11210:	9b03      	ldr	r3, [sp, #12]
   11212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11214:	695b      	ldr	r3, [r3, #20]
   11216:	3310      	adds	r3, #16
  SmpScCalcF4(pCcb, pMsg,
   11218:	9301      	str	r3, [sp, #4]
   1121a:	9200      	str	r2, [sp, #0]
   1121c:	462b      	mov	r3, r5
   1121e:	4622      	mov	r2, r4
   11220:	9902      	ldr	r1, [sp, #8]
   11222:	9803      	ldr	r0, [sp, #12]
   11224:	f002 fee6 	bl	13ff4 <SmpScCalcF4>
}
   11228:	bf00      	nop
   1122a:	b005      	add	sp, #20
   1122c:	bd30      	pop	{r4, r5, pc}

0001122e <smprScActPkSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1122e:	b500      	push	{lr}
   11230:	b083      	sub	sp, #12
   11232:	9001      	str	r0, [sp, #4]
   11234:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);

  /* Send the Cbi to the peer */
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   11236:	9b00      	ldr	r3, [sp, #0]
   11238:	685b      	ldr	r3, [r3, #4]
   1123a:	461a      	mov	r2, r3
   1123c:	9900      	ldr	r1, [sp, #0]
   1123e:	9801      	ldr	r0, [sp, #4]
   11240:	f003 f814 	bl	1426c <smpScSendPairCnf>
}
   11244:	bf00      	nop
   11246:	b003      	add	sp, #12
   11248:	f85d fb04 	ldr.w	pc, [sp], #4

0001124c <smprScActPkCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1124c:	b530      	push	{r4, r5, lr}
   1124e:	b087      	sub	sp, #28
   11250:	9003      	str	r0, [sp, #12]
   11252:	9102      	str	r1, [sp, #8]
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   11254:	9b02      	ldr	r3, [sp, #8]
   11256:	685b      	ldr	r3, [r3, #4]
   11258:	3309      	adds	r3, #9
   1125a:	9305      	str	r3, [sp, #20]

  /* Copy the Nai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   1125c:	9b03      	ldr	r3, [sp, #12]
   1125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11260:	695b      	ldr	r3, [r3, #20]
   11262:	2210      	movs	r2, #16
   11264:	9905      	ldr	r1, [sp, #20]
   11266:	4618      	mov	r0, r3
   11268:	f7fb f863 	bl	c332 <WStrReverseCpy>

  /* Cai = f4(PKax, PKbx, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1126c:	9b03      	ldr	r3, [sp, #12]
   1126e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11270:	689b      	ldr	r3, [r3, #8]
   11272:	461c      	mov	r4, r3
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   11274:	9b03      	ldr	r3, [sp, #12]
   11276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11278:	68db      	ldr	r3, [r3, #12]
   1127a:	461d      	mov	r5, r3
  SmpScCalcF4(pCcb, pMsg,
   1127c:	9803      	ldr	r0, [sp, #12]
   1127e:	f003 f82c 	bl	142da <smpGetPkBit>
   11282:	4603      	mov	r3, r0
   11284:	461a      	mov	r2, r3
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Na_Ea);
   11286:	9b03      	ldr	r3, [sp, #12]
   11288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1128a:	695b      	ldr	r3, [r3, #20]
  SmpScCalcF4(pCcb, pMsg,
   1128c:	9301      	str	r3, [sp, #4]
   1128e:	9200      	str	r2, [sp, #0]
   11290:	462b      	mov	r3, r5
   11292:	4622      	mov	r2, r4
   11294:	9902      	ldr	r1, [sp, #8]
   11296:	9803      	ldr	r0, [sp, #12]
   11298:	f002 feac 	bl	13ff4 <SmpScCalcF4>
}
   1129c:	bf00      	nop
   1129e:	b007      	add	sp, #28
   112a0:	bd30      	pop	{r4, r5, pc}

000112a2 <smprScActPkSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   112a2:	b500      	push	{lr}
   112a4:	b085      	sub	sp, #20
   112a6:	9001      	str	r0, [sp, #4]
   112a8:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
  SMP_TRACE_128("Ca Peer", pCcb->pScCcb->pScratch->PeerCa_Ea);

  /* Verify the Calculated Cai to previously received Cai */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_RAND_LEN))
   112aa:	9b01      	ldr	r3, [sp, #4]
   112ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   112ae:	695b      	ldr	r3, [r3, #20]
   112b0:	f103 0050 	add.w	r0, r3, #80	; 0x50
   112b4:	9b00      	ldr	r3, [sp, #0]
   112b6:	685b      	ldr	r3, [r3, #4]
   112b8:	2210      	movs	r2, #16
   112ba:	4619      	mov	r1, r3
   112bc:	f014 f9cc 	bl	25658 <memcmp>
   112c0:	4603      	mov	r3, r0
   112c2:	2b00      	cmp	r3, #0
   112c4:	d003      	beq.n	112ce <smprScActPkSendRand+0x2c>
  {
    smpScFailWithReattempt(pCcb);
   112c6:	9801      	ldr	r0, [sp, #4]
   112c8:	f003 f86a 	bl	143a0 <smpScFailWithReattempt>

    /* Post an event to move to the next passkey confirm or complete the process */
    hdr.param = pCcb->connId;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   112cc:	e027      	b.n	1131e <smprScActPkSendRand+0x7c>
    if (++pCcb->pScCcb->pkPos >= SMP_PK_BIT_COUNT)
   112ce:	9b01      	ldr	r3, [sp, #4]
   112d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   112d2:	78da      	ldrb	r2, [r3, #3]
   112d4:	3201      	adds	r2, #1
   112d6:	b2d2      	uxtb	r2, r2
   112d8:	70da      	strb	r2, [r3, #3]
   112da:	78db      	ldrb	r3, [r3, #3]
   112dc:	2b13      	cmp	r3, #19
   112de:	d903      	bls.n	112e8 <smprScActPkSendRand+0x46>
      hdr.event = SMP_MSG_INT_PK_CMPL;
   112e0:	231b      	movs	r3, #27
   112e2:	f88d 300e 	strb.w	r3, [sp, #14]
   112e6:	e00f      	b.n	11308 <smprScActPkSendRand+0x66>
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   112e8:	9b01      	ldr	r3, [sp, #4]
   112ea:	2203      	movs	r2, #3
   112ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      hdr.event = SMP_MSG_INT_PK_NEXT;
   112f0:	231a      	movs	r3, #26
   112f2:	f88d 300e 	strb.w	r3, [sp, #14]
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   112f6:	9b01      	ldr	r3, [sp, #4]
   112f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   112fa:	695b      	ldr	r3, [r3, #20]
   112fc:	3310      	adds	r3, #16
   112fe:	461a      	mov	r2, r3
   11300:	9900      	ldr	r1, [sp, #0]
   11302:	9801      	ldr	r0, [sp, #4]
   11304:	f002 ff7b 	bl	141fe <smpScSendRand>
    hdr.param = pCcb->connId;
   11308:	9b01      	ldr	r3, [sp, #4]
   1130a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1130e:	b29b      	uxth	r3, r3
   11310:	f8ad 300c 	strh.w	r3, [sp, #12]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   11314:	ab03      	add	r3, sp, #12
   11316:	4619      	mov	r1, r3
   11318:	9801      	ldr	r0, [sp, #4]
   1131a:	f000 feb7 	bl	1208c <smpSmExecute>
}
   1131e:	bf00      	nop
   11320:	b005      	add	sp, #20
   11322:	f85d fb04 	ldr.w	pc, [sp], #4

00011326 <smprScActOobSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11326:	b082      	sub	sp, #8
   11328:	9001      	str	r0, [sp, #4]
   1132a:	9100      	str	r1, [sp, #0]
  /* The next command is the Pair Rand from the initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1132c:	9b01      	ldr	r3, [sp, #4]
   1132e:	2204      	movs	r2, #4
   11330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   11334:	bf00      	nop
   11336:	b002      	add	sp, #8
   11338:	4770      	bx	lr
	...

0001133c <smprScActOobCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1133c:	b500      	push	{lr}
   1133e:	b089      	sub	sp, #36	; 0x24
   11340:	9003      	str	r0, [sp, #12]
   11342:	9102      	str	r1, [sp, #8]
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   11344:	9b02      	ldr	r3, [sp, #8]
   11346:	685b      	ldr	r3, [r3, #4]
   11348:	3309      	adds	r3, #9
   1134a:	9307      	str	r3, [sp, #28]

  /* Copy the Na from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_CONFIRM_LEN);
   1134c:	9b03      	ldr	r3, [sp, #12]
   1134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11350:	695b      	ldr	r3, [r3, #20]
   11352:	2210      	movs	r2, #16
   11354:	9907      	ldr	r1, [sp, #28]
   11356:	4618      	mov	r0, r3
   11358:	f7fa ffeb 	bl	c332 <WStrReverseCpy>

  /* If the peer device's OOB data flag does not indicate remote OOB data has been received,
     clear Rb. */
  if (pCcb->pairReq[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
   1135c:	9b03      	ldr	r3, [sp, #12]
   1135e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   11362:	2b01      	cmp	r3, #1
   11364:	d007      	beq.n	11376 <smprScActOobCalcCa+0x3a>
  {
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   11366:	9b03      	ldr	r3, [sp, #12]
   11368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1136a:	695b      	ldr	r3, [r3, #20]
   1136c:	3330      	adds	r3, #48	; 0x30
   1136e:	491d      	ldr	r1, [pc, #116]	; (113e4 <smprScActOobCalcCa+0xa8>)
   11370:	4618      	mov	r0, r3
   11372:	f7fa ffa5 	bl	c2c0 <Calc128Cpy>
  }

  /* If we indicated the presence of remote OOB data has been received, calculate Ca. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   11376:	9b03      	ldr	r3, [sp, #12]
   11378:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1137c:	2b01      	cmp	r3, #1
   1137e:	d114      	bne.n	113aa <smprScActOobCalcCa+0x6e>
  {
    /* Calculate Ca using Toolkit function F4 */
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   11380:	9b03      	ldr	r3, [sp, #12]
   11382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11384:	689b      	ldr	r3, [r3, #8]
   11386:	461a      	mov	r2, r3
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   11388:	9b03      	ldr	r3, [sp, #12]
   1138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1138c:	689b      	ldr	r3, [r3, #8]
   1138e:	4619      	mov	r1, r3
                0, pCcb->pScCcb->pScratch->Ra);
   11390:	9b03      	ldr	r3, [sp, #12]
   11392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11394:	695b      	ldr	r3, [r3, #20]
   11396:	3320      	adds	r3, #32
    SmpScCalcF4(pCcb, pMsg,
   11398:	9301      	str	r3, [sp, #4]
   1139a:	2300      	movs	r3, #0
   1139c:	9300      	str	r3, [sp, #0]
   1139e:	460b      	mov	r3, r1
   113a0:	9902      	ldr	r1, [sp, #8]
   113a2:	9803      	ldr	r0, [sp, #12]
   113a4:	f002 fe26 	bl	13ff4 <SmpScCalcF4>
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
    msg.pPlainText = NULL;

    smpSmExecute(pCcb, (smpMsg_t *) &msg);
  }
}
   113a8:	e017      	b.n	113da <smprScActOobCalcCa+0x9e>
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*)calc128Zeros);
   113aa:	9b03      	ldr	r3, [sp, #12]
   113ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   113ae:	695b      	ldr	r3, [r3, #20]
   113b0:	3320      	adds	r3, #32
   113b2:	490c      	ldr	r1, [pc, #48]	; (113e4 <smprScActOobCalcCa+0xa8>)
   113b4:	4618      	mov	r0, r3
   113b6:	f7fa ff83 	bl	c2c0 <Calc128Cpy>
    msg.hdr.param = pCcb->connId;
   113ba:	9b03      	ldr	r3, [sp, #12]
   113bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   113c0:	b29b      	uxth	r3, r3
   113c2:	f8ad 3010 	strh.w	r3, [sp, #16]
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   113c6:	231c      	movs	r3, #28
   113c8:	f88d 3012 	strb.w	r3, [sp, #18]
    msg.pPlainText = NULL;
   113cc:	2300      	movs	r3, #0
   113ce:	9306      	str	r3, [sp, #24]
    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   113d0:	ab04      	add	r3, sp, #16
   113d2:	4619      	mov	r1, r3
   113d4:	9803      	ldr	r0, [sp, #12]
   113d6:	f000 fe59 	bl	1208c <smpSmExecute>
}
   113da:	bf00      	nop
   113dc:	b009      	add	sp, #36	; 0x24
   113de:	f85d fb04 	ldr.w	pc, [sp], #4
   113e2:	bf00      	nop
   113e4:	00027d50 	.word	0x00027d50

000113e8 <smprScActOobSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   113e8:	b500      	push	{lr}
   113ea:	b083      	sub	sp, #12
   113ec:	9001      	str	r0, [sp, #4]
   113ee:	9100      	str	r1, [sp, #0]
  /* Only compare Ca if we indicated that we received OOB data. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   113f0:	9b01      	ldr	r3, [sp, #4]
   113f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   113f6:	2b01      	cmp	r3, #1
   113f8:	d111      	bne.n	1141e <smprScActOobSendRand+0x36>
  {
    SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);

    /* Check that the Ca value passed via OOB methods match expectations */
    if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN))
   113fa:	9b01      	ldr	r3, [sp, #4]
   113fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   113fe:	695b      	ldr	r3, [r3, #20]
   11400:	f103 0050 	add.w	r0, r3, #80	; 0x50
   11404:	9b00      	ldr	r3, [sp, #0]
   11406:	685b      	ldr	r3, [r3, #4]
   11408:	2210      	movs	r2, #16
   1140a:	4619      	mov	r1, r3
   1140c:	f014 f924 	bl	25658 <memcmp>
   11410:	4603      	mov	r3, r0
   11412:	2b00      	cmp	r3, #0
   11414:	d003      	beq.n	1141e <smprScActOobSendRand+0x36>
    {
      smpScFailWithReattempt(pCcb);
   11416:	9801      	ldr	r0, [sp, #4]
   11418:	f002 ffc2 	bl	143a0 <smpScFailWithReattempt>
      return;
   1141c:	e014      	b.n	11448 <smprScActOobSendRand+0x60>
    }
  }

  /* Next command is a DK Key Check from initiator */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1141e:	9b01      	ldr	r3, [sp, #4]
   11420:	220d      	movs	r2, #13
   11422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* Get a random Nb */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   11426:	9b01      	ldr	r3, [sp, #4]
   11428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1142a:	695b      	ldr	r3, [r3, #20]
   1142c:	3310      	adds	r3, #16
   1142e:	2110      	movs	r1, #16
   11430:	4618      	mov	r0, r3
   11432:	f006 f9a5 	bl	17780 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);

  /* Send the rand Nb to the initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   11436:	9b01      	ldr	r3, [sp, #4]
   11438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1143a:	695b      	ldr	r3, [r3, #20]
   1143c:	3310      	adds	r3, #16
   1143e:	461a      	mov	r2, r3
   11440:	9900      	ldr	r1, [sp, #0]
   11442:	9801      	ldr	r0, [sp, #4]
   11444:	f002 fedb 	bl	141fe <smpScSendRand>
}
   11448:	b003      	add	sp, #12
   1144a:	f85d fb04 	ldr.w	pc, [sp], #4

0001144e <smprScActStoreDhCheck>:
*
*  \return None.
*/
/*************************************************************************************************/
void smprScActStoreDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1144e:	b500      	push	{lr}
   11450:	b085      	sub	sp, #20
   11452:	9001      	str	r0, [sp, #4]
   11454:	9100      	str	r1, [sp, #0]
  uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   11456:	9b00      	ldr	r3, [sp, #0]
   11458:	685b      	ldr	r3, [r3, #4]
   1145a:	3309      	adds	r3, #9
   1145c:	9303      	str	r3, [sp, #12]

  /* Signal that not further commands are expected until Key Distribution phase (if applicable) */
  pCcb->nextCmdCode = SMP_CMD_MAX;
   1145e:	9b01      	ldr	r3, [sp, #4]
   11460:	220f      	movs	r2, #15
   11462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* The Ea from the peer is in the cmd message (copy as MSB First) */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   11466:	9b01      	ldr	r3, [sp, #4]
   11468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1146a:	695b      	ldr	r3, [r3, #20]
   1146c:	3350      	adds	r3, #80	; 0x50
   1146e:	2210      	movs	r2, #16
   11470:	9903      	ldr	r1, [sp, #12]
   11472:	4618      	mov	r0, r3
   11474:	f7fa ff5d 	bl	c332 <WStrReverseCpy>
}
   11478:	bf00      	nop
   1147a:	b005      	add	sp, #20
   1147c:	f85d fb04 	ldr.w	pc, [sp], #4

00011480 <smprScActWaitDhCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActWaitDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11480:	b500      	push	{lr}
   11482:	b083      	sub	sp, #12
   11484:	9001      	str	r0, [sp, #4]
   11486:	9100      	str	r1, [sp, #0]
  /* Next command is a DH Key Check */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   11488:	9b01      	ldr	r3, [sp, #4]
   1148a:	220d      	movs	r2, #13
   1148c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   11490:	9b01      	ldr	r3, [sp, #4]
   11492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11494:	785b      	ldrb	r3, [r3, #1]
   11496:	2b03      	cmp	r3, #3
   11498:	d108      	bne.n	114ac <smprScActWaitDhCheck+0x2c>
  {
    /* Send the Pair Rand Nb */
    smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1149a:	9b01      	ldr	r3, [sp, #4]
   1149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1149e:	695b      	ldr	r3, [r3, #20]
   114a0:	3310      	adds	r3, #16
   114a2:	461a      	mov	r2, r3
   114a4:	9900      	ldr	r1, [sp, #0]
   114a6:	9801      	ldr	r0, [sp, #4]
   114a8:	f002 fea9 	bl	141fe <smpScSendRand>
  }
}
   114ac:	bf00      	nop
   114ae:	b003      	add	sp, #12
   114b0:	f85d fb04 	ldr.w	pc, [sp], #4

000114b4 <smprScActCalcDHKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActCalcDHKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   114b4:	b500      	push	{lr}
   114b6:	b085      	sub	sp, #20
   114b8:	9001      	str	r0, [sp, #4]
   114ba:	9100      	str	r1, [sp, #0]
  if (pCcb->nextCmdCode == SMP_CMD_DHKEY_CHECK)
   114bc:	9b01      	ldr	r3, [sp, #4]
   114be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   114c2:	2b0d      	cmp	r3, #13
   114c4:	d10c      	bne.n	114e0 <smprScActCalcDHKey+0x2c>
  {
    uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   114c6:	9b00      	ldr	r3, [sp, #0]
   114c8:	685b      	ldr	r3, [r3, #4]
   114ca:	3309      	adds	r3, #9
   114cc:	9303      	str	r3, [sp, #12]

    /* The Ea from the peer is in the cmd message (copy as MSB First) */
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   114ce:	9b01      	ldr	r3, [sp, #4]
   114d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   114d2:	695b      	ldr	r3, [r3, #20]
   114d4:	3350      	adds	r3, #80	; 0x50
   114d6:	2210      	movs	r2, #16
   114d8:	9903      	ldr	r1, [sp, #12]
   114da:	4618      	mov	r0, r3
   114dc:	f7fa ff29 	bl	c332 <WStrReverseCpy>
  }

  /* Complete the calculation */
  smpScActCalcSharedSecret(pCcb, pMsg);
   114e0:	9900      	ldr	r1, [sp, #0]
   114e2:	9801      	ldr	r0, [sp, #4]
   114e4:	f002 fa7c 	bl	139e0 <smpScActCalcSharedSecret>
}
   114e8:	bf00      	nop
   114ea:	b005      	add	sp, #20
   114ec:	f85d fb04 	ldr.w	pc, [sp], #4

000114f0 <smprScActDHKeyCheckSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActDHKeyCheckSend(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   114f0:	b500      	push	{lr}
   114f2:	b085      	sub	sp, #20
   114f4:	9001      	str	r0, [sp, #4]
   114f6:	9100      	str	r1, [sp, #0]
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);

  /* The Eb from the CMAC calculation */
  Calc128Cpy(pCcb->pScCcb->pScratch->Nb_Eb, pMsg->aes.pCiphertext);
   114f8:	9b01      	ldr	r3, [sp, #4]
   114fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   114fc:	695b      	ldr	r3, [r3, #20]
   114fe:	f103 0210 	add.w	r2, r3, #16
   11502:	9b00      	ldr	r3, [sp, #0]
   11504:	685b      	ldr	r3, [r3, #4]
   11506:	4619      	mov	r1, r3
   11508:	4610      	mov	r0, r2
   1150a:	f7fa fed9 	bl	c2c0 <Calc128Cpy>

  /* Verify the DH Key Check Ea with the value received from the initiator */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN) == 0)
   1150e:	9b01      	ldr	r3, [sp, #4]
   11510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11512:	695b      	ldr	r3, [r3, #20]
   11514:	f103 0050 	add.w	r0, r3, #80	; 0x50
   11518:	9b01      	ldr	r3, [sp, #4]
   1151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1151c:	695b      	ldr	r3, [r3, #20]
   1151e:	2210      	movs	r2, #16
   11520:	4619      	mov	r1, r3
   11522:	f014 f899 	bl	25658 <memcmp>
   11526:	4603      	mov	r3, r0
   11528:	2b00      	cmp	r3, #0
   1152a:	d124      	bne.n	11576 <smprScActDHKeyCheckSend+0x86>
  {
    /* Adjust key based on max key length */
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1152c:	9b01      	ldr	r3, [sp, #4]
   1152e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   11532:	9b01      	ldr	r3, [sp, #4]
   11534:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   11538:	4293      	cmp	r3, r2
   1153a:	bf28      	it	cs
   1153c:	4613      	movcs	r3, r2
   1153e:	f88d 300f 	strb.w	r3, [sp, #15]
                          pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   11542:	9b01      	ldr	r3, [sp, #4]
   11544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11546:	699b      	ldr	r3, [r3, #24]
   11548:	f103 0210 	add.w	r2, r3, #16
   1154c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11550:	18d0      	adds	r0, r2, r3
   11552:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11556:	f1c3 0310 	rsb	r3, r3, #16
   1155a:	461a      	mov	r2, r3
   1155c:	2100      	movs	r1, #0
   1155e:	f014 f8ad 	bl	256bc <memset>

    /* Send the DH Key check Eb to the initiator */
    smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   11562:	9b01      	ldr	r3, [sp, #4]
   11564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11566:	695b      	ldr	r3, [r3, #20]
   11568:	3310      	adds	r3, #16
   1156a:	461a      	mov	r2, r3
   1156c:	9900      	ldr	r1, [sp, #0]
   1156e:	9801      	ldr	r0, [sp, #4]
   11570:	f002 fe0e 	bl	14190 <smpScSendDHKeyCheck>
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   11574:	e02a      	b.n	115cc <smprScActDHKeyCheckSend+0xdc>
    hdr.param = pCcb->connId;
   11576:	9b01      	ldr	r3, [sp, #4]
   11578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1157c:	b29b      	uxth	r3, r3
   1157e:	f8ad 3008 	strh.w	r3, [sp, #8]
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   11582:	230b      	movs	r3, #11
   11584:	f88d 300b 	strb.w	r3, [sp, #11]
    pCcb->attempts++;
   11588:	9b01      	ldr	r3, [sp, #4]
   1158a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   1158e:	3301      	adds	r3, #1
   11590:	b2da      	uxtb	r2, r3
   11592:	9b01      	ldr	r3, [sp, #4]
   11594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   11598:	9b01      	ldr	r3, [sp, #4]
   1159a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1159e:	4618      	mov	r0, r3
   115a0:	f000 ff24 	bl	123ec <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   115a4:	9b01      	ldr	r3, [sp, #4]
   115a6:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
   115aa:	4b0a      	ldr	r3, [pc, #40]	; (115d4 <smprScActDHKeyCheckSend+0xe4>)
   115ac:	681b      	ldr	r3, [r3, #0]
   115ae:	79db      	ldrb	r3, [r3, #7]
   115b0:	429a      	cmp	r2, r3
   115b2:	d103      	bne.n	115bc <smprScActDHKeyCheckSend+0xcc>
      hdr.event = SMP_MSG_INT_MAX_ATTEMPTS;
   115b4:	230d      	movs	r3, #13
   115b6:	f88d 300a 	strb.w	r3, [sp, #10]
   115ba:	e002      	b.n	115c2 <smprScActDHKeyCheckSend+0xd2>
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
   115bc:	231d      	movs	r3, #29
   115be:	f88d 300a 	strb.w	r3, [sp, #10]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   115c2:	ab02      	add	r3, sp, #8
   115c4:	4619      	mov	r1, r3
   115c6:	9801      	ldr	r0, [sp, #4]
   115c8:	f000 fd60 	bl	1208c <smpSmExecute>
}
   115cc:	bf00      	nop
   115ce:	b005      	add	sp, #20
   115d0:	f85d fb04 	ldr.w	pc, [sp], #4
   115d4:	10002bb4 	.word	0x10002bb4

000115d8 <SmprScInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmprScInit(void)
{
   115d8:	b508      	push	{r3, lr}
  /* set up callback interface */
  smpCb.pSlave = &smprScSmIf;
   115da:	4b04      	ldr	r3, [pc, #16]	; (115ec <SmprScInit+0x14>)
   115dc:	4a04      	ldr	r2, [pc, #16]	; (115f0 <SmprScInit+0x18>)
   115de:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* General SMP LESC Initialization */
  SmpScInit();
   115e2:	f002 fd35 	bl	14050 <SmpScInit>
}
   115e6:	bf00      	nop
   115e8:	bd08      	pop	{r3, pc}
   115ea:	bf00      	nop
   115ec:	100042a4 	.word	0x100042a4
   115f0:	00028210 	.word	0x00028210

000115f4 <SmprInit>:
 */
/*************************************************************************************************/
void SmprInit(void)
{
  /* set up state machine interface */
  smpCb.pSlave = &smprSmIf;
   115f4:	4b06      	ldr	r3, [pc, #24]	; (11610 <SmprInit+0x1c>)
   115f6:	4a07      	ldr	r2, [pc, #28]	; (11614 <SmprInit+0x20>)
   115f8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  smpCb.procPairing = smpProcPairing;
   115fc:	4b04      	ldr	r3, [pc, #16]	; (11610 <SmprInit+0x1c>)
   115fe:	4a06      	ldr	r2, [pc, #24]	; (11618 <SmprInit+0x24>)
   11600:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  smpCb.procAuthReq = smpAuthReq;
   11604:	4b02      	ldr	r3, [pc, #8]	; (11610 <SmprInit+0x1c>)
   11606:	4a05      	ldr	r2, [pc, #20]	; (1161c <SmprInit+0x28>)
   11608:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
}
   1160c:	bf00      	nop
   1160e:	4770      	bx	lr
   11610:	100042a4 	.word	0x100042a4
   11614:	0002839c 	.word	0x0002839c
   11618:	0001179d 	.word	0x0001179d
   1161c:	000119a5 	.word	0x000119a5

00011620 <smpStartRspTimer>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpStartRspTimer(smpCcb_t *pCcb)
{
   11620:	b500      	push	{lr}
   11622:	b083      	sub	sp, #12
   11624:	9001      	str	r0, [sp, #4]
  /* start smp response timer */
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   11626:	9b01      	ldr	r3, [sp, #4]
   11628:	220f      	movs	r2, #15
   1162a:	729a      	strb	r2, [r3, #10]
  pCcb->rspTimer.msg.status = SMP_ERR_TIMEOUT;
   1162c:	9b01      	ldr	r3, [sp, #4]
   1162e:	22e1      	movs	r2, #225	; 0xe1
   11630:	72da      	strb	r2, [r3, #11]
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   11632:	9b01      	ldr	r3, [sp, #4]
   11634:	211e      	movs	r1, #30
   11636:	4618      	mov	r0, r3
   11638:	f00e fcf8 	bl	2002c <WsfTimerStartSec>
}
   1163c:	bf00      	nop
   1163e:	b003      	add	sp, #12
   11640:	f85d fb04 	ldr.w	pc, [sp], #4

00011644 <smpActNone>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActNone(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11644:	b082      	sub	sp, #8
   11646:	9001      	str	r0, [sp, #4]
   11648:	9100      	str	r1, [sp, #0]
  return;
   1164a:	bf00      	nop
}
   1164c:	b002      	add	sp, #8
   1164e:	4770      	bx	lr

00011650 <smpCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCleanup(smpCcb_t *pCcb)
{
   11650:	b500      	push	{lr}
   11652:	b083      	sub	sp, #12
   11654:	9001      	str	r0, [sp, #4]
  /* free scratch buffer */
  if (pCcb->pScr != NULL)
   11656:	9b01      	ldr	r3, [sp, #4]
   11658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1165a:	2b00      	cmp	r3, #0
   1165c:	d007      	beq.n	1166e <smpCleanup+0x1e>
  {
    WsfBufFree(pCcb->pScr);
   1165e:	9b01      	ldr	r3, [sp, #4]
   11660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11662:	4618      	mov	r0, r3
   11664:	f00e f8f6 	bl	1f854 <WsfBufFree>
    pCcb->pScr = NULL;
   11668:	9b01      	ldr	r3, [sp, #4]
   1166a:	2200      	movs	r2, #0
   1166c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* stop response timer */
  WsfTimerStop(&pCcb->rspTimer);
   1166e:	9b01      	ldr	r3, [sp, #4]
   11670:	4618      	mov	r0, r3
   11672:	f00e fcff 	bl	20074 <WsfTimerStop>

  /* stop wait interval timer */
  WsfTimerStop(&pCcb->waitTimer);
   11676:	9b01      	ldr	r3, [sp, #4]
   11678:	3310      	adds	r3, #16
   1167a:	4618      	mov	r0, r3
   1167c:	f00e fcfa 	bl	20074 <WsfTimerStop>

  pCcb->secReq = FALSE;
   11680:	9b01      	ldr	r3, [sp, #4]
   11682:	2200      	movs	r2, #0
   11684:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   11688:	9b01      	ldr	r3, [sp, #4]
   1168a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1168e:	2b00      	cmp	r3, #0
   11690:	d001      	beq.n	11696 <smpCleanup+0x46>
   11692:	220b      	movs	r2, #11
   11694:	e000      	b.n	11698 <smpCleanup+0x48>
   11696:	2201      	movs	r2, #1
   11698:	9b01      	ldr	r3, [sp, #4]
   1169a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   1169e:	9b01      	ldr	r3, [sp, #4]
   116a0:	2200      	movs	r2, #0
   116a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
   116a6:	bf00      	nop
   116a8:	b003      	add	sp, #12
   116aa:	f85d fb04 	ldr.w	pc, [sp], #4

000116ae <smpActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   116ae:	b500      	push	{lr}
   116b0:	b083      	sub	sp, #12
   116b2:	9001      	str	r0, [sp, #4]
   116b4:	9100      	str	r1, [sp, #0]
  smpCleanup(pCcb);
   116b6:	9801      	ldr	r0, [sp, #4]
   116b8:	f7ff ffca 	bl	11650 <smpCleanup>
}
   116bc:	bf00      	nop
   116be:	b003      	add	sp, #12
   116c0:	f85d fb04 	ldr.w	pc, [sp], #4

000116c4 <smpSendPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPairingFailed(smpCcb_t *pCcb, uint8_t reason)
{
   116c4:	b500      	push	{lr}
   116c6:	b085      	sub	sp, #20
   116c8:	9001      	str	r0, [sp, #4]
   116ca:	460b      	mov	r3, r1
   116cc:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t *pPacket;
  uint8_t *p;

  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   116d0:	200a      	movs	r0, #10
   116d2:	f001 fb36 	bl	12d42 <smpMsgAlloc>
   116d6:	9003      	str	r0, [sp, #12]
   116d8:	9b03      	ldr	r3, [sp, #12]
   116da:	2b00      	cmp	r3, #0
   116dc:	d011      	beq.n	11702 <smpSendPairingFailed+0x3e>
  {
    p = pPacket + L2C_PAYLOAD_START;
   116de:	9b03      	ldr	r3, [sp, #12]
   116e0:	3308      	adds	r3, #8
   116e2:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   116e4:	9b02      	ldr	r3, [sp, #8]
   116e6:	1c5a      	adds	r2, r3, #1
   116e8:	9202      	str	r2, [sp, #8]
   116ea:	2205      	movs	r2, #5
   116ec:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   116ee:	9b02      	ldr	r3, [sp, #8]
   116f0:	1c5a      	adds	r2, r3, #1
   116f2:	9202      	str	r2, [sp, #8]
   116f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   116f8:	701a      	strb	r2, [r3, #0]

    smpSendPkt(pCcb, pPacket);
   116fa:	9903      	ldr	r1, [sp, #12]
   116fc:	9801      	ldr	r0, [sp, #4]
   116fe:	f001 fae9 	bl	12cd4 <smpSendPkt>
  }
}
   11702:	bf00      	nop
   11704:	b005      	add	sp, #20
   11706:	f85d fb04 	ldr.w	pc, [sp], #4

0001170a <smpActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1170a:	b500      	push	{lr}
   1170c:	b083      	sub	sp, #12
   1170e:	9001      	str	r0, [sp, #4]
   11710:	9100      	str	r1, [sp, #0]
  /* clean up */
  smpCleanup(pCcb);
   11712:	9801      	ldr	r0, [sp, #4]
   11714:	f7ff ff9c 	bl	11650 <smpCleanup>

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   11718:	9b01      	ldr	r3, [sp, #4]
   1171a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1171e:	2200      	movs	r2, #0
   11720:	2101      	movs	r1, #1
   11722:	4618      	mov	r0, r3
   11724:	f004 f95a 	bl	159dc <DmConnSetIdle>

  /* notify DM of pairing failure */
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   11728:	9b00      	ldr	r3, [sp, #0]
   1172a:	222b      	movs	r2, #43	; 0x2b
   1172c:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1172e:	9800      	ldr	r0, [sp, #0]
   11730:	f005 f8ee 	bl	16910 <DmSmpCbackExec>
}
   11734:	bf00      	nop
   11736:	b003      	add	sp, #12
   11738:	f85d fb04 	ldr.w	pc, [sp], #4

0001173c <smpActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1173c:	b500      	push	{lr}
   1173e:	b083      	sub	sp, #12
   11740:	9001      	str	r0, [sp, #4]
   11742:	9100      	str	r1, [sp, #0]
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   11744:	9b00      	ldr	r3, [sp, #0]
   11746:	78db      	ldrb	r3, [r3, #3]
   11748:	4619      	mov	r1, r3
   1174a:	9801      	ldr	r0, [sp, #4]
   1174c:	f7ff ffba 	bl	116c4 <smpSendPairingFailed>

  smpActPairingFailed(pCcb, pMsg);
   11750:	9900      	ldr	r1, [sp, #0]
   11752:	9801      	ldr	r0, [sp, #4]
   11754:	f7ff ffd9 	bl	1170a <smpActPairingFailed>
}
   11758:	bf00      	nop
   1175a:	b003      	add	sp, #12
   1175c:	f85d fb04 	ldr.w	pc, [sp], #4

00011760 <smpActStorePin>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActStorePin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11760:	b500      	push	{lr}
   11762:	b083      	sub	sp, #12
   11764:	9001      	str	r0, [sp, #4]
   11766:	9100      	str	r1, [sp, #0]
  /* copy authentication data to scratchpad */
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   11768:	9b01      	ldr	r3, [sp, #4]
   1176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1176c:	4618      	mov	r0, r3
   1176e:	9b00      	ldr	r3, [sp, #0]
   11770:	1d19      	adds	r1, r3, #4
   11772:	9b00      	ldr	r3, [sp, #0]
   11774:	7d1b      	ldrb	r3, [r3, #20]
   11776:	461a      	mov	r2, r3
   11778:	f7fa fcc2 	bl	c100 <memcpy>

  /* zero out unused pin data */
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
   1177c:	9b00      	ldr	r3, [sp, #0]
   1177e:	7d1b      	ldrb	r3, [r3, #20]
   11780:	2b03      	cmp	r3, #3
   11782:	d107      	bne.n	11794 <smpActStorePin+0x34>
  {
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
   11784:	9b01      	ldr	r3, [sp, #4]
   11786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11788:	3303      	adds	r3, #3
   1178a:	220d      	movs	r2, #13
   1178c:	2100      	movs	r1, #0
   1178e:	4618      	mov	r0, r3
   11790:	f013 ff94 	bl	256bc <memset>
  }
}
   11794:	bf00      	nop
   11796:	b003      	add	sp, #12
   11798:	f85d fb04 	ldr.w	pc, [sp], #4

0001179c <smpProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
   1179c:	b500      	push	{lr}
   1179e:	b087      	sub	sp, #28
   117a0:	9003      	str	r0, [sp, #12]
   117a2:	9102      	str	r1, [sp, #8]
   117a4:	9201      	str	r2, [sp, #4]
  bool_t          justWorks = TRUE;
   117a6:	2301      	movs	r3, #1
   117a8:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
   117ac:	9b01      	ldr	r3, [sp, #4]
   117ae:	2200      	movs	r2, #0
   117b0:	701a      	strb	r2, [r3, #0]
  *pOob = FALSE;
   117b2:	9b02      	ldr	r3, [sp, #8]
   117b4:	2200      	movs	r2, #0
   117b6:	701a      	strb	r2, [r3, #0]

  /* if OOB available use that */
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   117b8:	9b03      	ldr	r3, [sp, #12]
   117ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   117be:	2b01      	cmp	r3, #1
   117c0:	d10b      	bne.n	117da <smpProcPairing+0x3e>
      pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   117c2:	9b03      	ldr	r3, [sp, #12]
   117c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   117c8:	2b01      	cmp	r3, #1
   117ca:	d106      	bne.n	117da <smpProcPairing+0x3e>
  {
    *pOob = SMP_OOB_DATA_PRESENT;
   117cc:	9b02      	ldr	r3, [sp, #8]
   117ce:	2201      	movs	r2, #1
   117d0:	701a      	strb	r2, [r3, #0]
    justWorks = FALSE;
   117d2:	2300      	movs	r3, #0
   117d4:	f88d 3017 	strb.w	r3, [sp, #23]
   117d8:	e068      	b.n	118ac <smpProcPairing+0x110>
  }
  /* if either device set mitm flag */
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   117da:	9b03      	ldr	r3, [sp, #12]
   117dc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   117e0:	f003 0304 	and.w	r3, r3, #4
   117e4:	2b00      	cmp	r3, #0
   117e6:	d106      	bne.n	117f6 <smpProcPairing+0x5a>
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
   117e8:	9b03      	ldr	r3, [sp, #12]
   117ea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   117ee:	f003 0304 	and.w	r3, r3, #4
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   117f2:	2b00      	cmp	r3, #0
   117f4:	d05a      	beq.n	118ac <smpProcPairing+0x110>
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   117f6:	9b03      	ldr	r3, [sp, #12]
   117f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   117fc:	2b03      	cmp	r3, #3
   117fe:	d055      	beq.n	118ac <smpProcPairing+0x110>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   11800:	9b03      	ldr	r3, [sp, #12]
   11802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   11806:	2b03      	cmp	r3, #3
   11808:	d050      	beq.n	118ac <smpProcPairing+0x110>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1180a:	9b03      	ldr	r3, [sp, #12]
   1180c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   11810:	2b00      	cmp	r3, #0
   11812:	d004      	beq.n	1181e <smpProcPairing+0x82>
           (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO)) &&
   11814:	9b03      	ldr	r3, [sp, #12]
   11816:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1181a:	2b01      	cmp	r3, #1
   1181c:	d109      	bne.n	11832 <smpProcPairing+0x96>
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
   1181e:	9b03      	ldr	r3, [sp, #12]
   11820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   11824:	2b00      	cmp	r3, #0
   11826:	d041      	beq.n	118ac <smpProcPairing+0x110>
           (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO))))
   11828:	9b03      	ldr	r3, [sp, #12]
   1182a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
   1182e:	2b01      	cmp	r3, #1
   11830:	d03c      	beq.n	118ac <smpProcPairing+0x110>
    {
      /* use pin */
      justWorks = FALSE;
   11832:	2300      	movs	r3, #0
   11834:	f88d 3017 	strb.w	r3, [sp, #23]

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
   11838:	9b03      	ldr	r3, [sp, #12]
   1183a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1183e:	2b00      	cmp	r3, #0
   11840:	d013      	beq.n	1186a <smpProcPairing+0xce>
   11842:	9b03      	ldr	r3, [sp, #12]
   11844:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
   11848:	2b01      	cmp	r3, #1
   1184a:	d00e      	beq.n	1186a <smpProcPairing+0xce>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1184c:	9b03      	ldr	r3, [sp, #12]
   1184e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   11852:	2b04      	cmp	r3, #4
   11854:	d10b      	bne.n	1186e <smpProcPairing+0xd2>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   11856:	9b03      	ldr	r3, [sp, #12]
   11858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1185c:	2b02      	cmp	r3, #2
   1185e:	d004      	beq.n	1186a <smpProcPairing+0xce>
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));
   11860:	9b03      	ldr	r3, [sp, #12]
   11862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   11866:	2b04      	cmp	r3, #4
   11868:	d101      	bne.n	1186e <smpProcPairing+0xd2>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1186a:	2301      	movs	r3, #1
   1186c:	e000      	b.n	11870 <smpProcPairing+0xd4>
   1186e:	2300      	movs	r3, #0
      *pDisplay =
   11870:	b2da      	uxtb	r2, r3
   11872:	9b01      	ldr	r3, [sp, #4]
   11874:	701a      	strb	r2, [r3, #0]

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   11876:	9b03      	ldr	r3, [sp, #12]
   11878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1187c:	2b02      	cmp	r3, #2
   1187e:	d104      	bne.n	1188a <smpProcPairing+0xee>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
   11880:	9b03      	ldr	r3, [sp, #12]
   11882:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   11886:	2b02      	cmp	r3, #2
   11888:	d010      	beq.n	118ac <smpProcPairing+0x110>
      {
        *pDisplay ^= !pCcb->initiator;
   1188a:	9b01      	ldr	r3, [sp, #4]
   1188c:	781b      	ldrb	r3, [r3, #0]
   1188e:	b25a      	sxtb	r2, r3
   11890:	9b03      	ldr	r3, [sp, #12]
   11892:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   11896:	2b00      	cmp	r3, #0
   11898:	bf0c      	ite	eq
   1189a:	2301      	moveq	r3, #1
   1189c:	2300      	movne	r3, #0
   1189e:	b2db      	uxtb	r3, r3
   118a0:	b25b      	sxtb	r3, r3
   118a2:	4053      	eors	r3, r2
   118a4:	b25b      	sxtb	r3, r3
   118a6:	b2da      	uxtb	r2, r3
   118a8:	9b01      	ldr	r3, [sp, #4]
   118aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (!justWorks)
   118ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
   118b0:	2b00      	cmp	r3, #0
   118b2:	d10e      	bne.n	118d2 <smpProcPairing+0x136>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   118b4:	9b03      	ldr	r3, [sp, #12]
   118b6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   118ba:	9b03      	ldr	r3, [sp, #12]
   118bc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   118c0:	4013      	ands	r3, r2
   118c2:	b2db      	uxtb	r3, r3
   118c4:	f043 0304 	orr.w	r3, r3, #4
   118c8:	b2da      	uxtb	r2, r3
   118ca:	9b03      	ldr	r3, [sp, #12]
   118cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   118d0:	e00d      	b.n	118ee <smpProcPairing+0x152>
  }
  else
  {
    /* set auth flags with mitm bit cleared */
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   118d2:	9b03      	ldr	r3, [sp, #12]
   118d4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   118d8:	9b03      	ldr	r3, [sp, #12]
   118da:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   118de:	4013      	ands	r3, r2
   118e0:	b2db      	uxtb	r3, r3
   118e2:	f023 0304 	bic.w	r3, r3, #4
   118e6:	b2da      	uxtb	r2, r3
   118e8:	9b03      	ldr	r3, [sp, #12]
   118ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   118ee:	9b03      	ldr	r3, [sp, #12]
   118f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   118f4:	2b00      	cmp	r3, #0
   118f6:	d003      	beq.n	11900 <smpProcPairing+0x164>
   118f8:	9b03      	ldr	r3, [sp, #12]
   118fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   118fe:	e002      	b.n	11906 <smpProcPairing+0x16a>
   11900:	9b03      	ldr	r3, [sp, #12]
   11902:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   11906:	f88d 3016 	strb.w	r3, [sp, #22]
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1190a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1190e:	2b00      	cmp	r3, #0
   11910:	d01d      	beq.n	1194e <smpProcPairing+0x1b2>
   11912:	4b23      	ldr	r3, [pc, #140]	; (119a0 <smpProcPairing+0x204>)
   11914:	681b      	ldr	r3, [r3, #0]
   11916:	7a1a      	ldrb	r2, [r3, #8]
   11918:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1191c:	4013      	ands	r3, r2
   1191e:	b2db      	uxtb	r3, r3
   11920:	f003 0304 	and.w	r3, r3, #4
   11924:	2b00      	cmp	r3, #0
   11926:	d012      	beq.n	1194e <smpProcPairing+0x1b2>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
   11928:	9b03      	ldr	r3, [sp, #12]
   1192a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1192e:	b29b      	uxth	r3, r3
   11930:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_AUTH_REQ;
   11934:	2303      	movs	r3, #3
   11936:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1193a:	2303      	movs	r3, #3
   1193c:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   11940:	ab04      	add	r3, sp, #16
   11942:	4619      	mov	r1, r3
   11944:	9803      	ldr	r0, [sp, #12]
   11946:	f000 fba1 	bl	1208c <smpSmExecute>
    return FALSE;
   1194a:	2300      	movs	r3, #0
   1194c:	e023      	b.n	11996 <smpProcPairing+0x1fa>
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1194e:	9b03      	ldr	r3, [sp, #12]
   11950:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   11954:	4b12      	ldr	r3, [pc, #72]	; (119a0 <smpProcPairing+0x204>)
   11956:	681b      	ldr	r3, [r3, #0]
   11958:	795b      	ldrb	r3, [r3, #5]
   1195a:	429a      	cmp	r2, r3
   1195c:	d307      	bcc.n	1196e <smpProcPairing+0x1d2>
      pCcb->pairRsp[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen)
   1195e:	9b03      	ldr	r3, [sp, #12]
   11960:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   11964:	4b0e      	ldr	r3, [pc, #56]	; (119a0 <smpProcPairing+0x204>)
   11966:	681b      	ldr	r3, [r3, #0]
   11968:	795b      	ldrb	r3, [r3, #5]
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1196a:	429a      	cmp	r2, r3
   1196c:	d212      	bcs.n	11994 <smpProcPairing+0x1f8>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
   1196e:	9b03      	ldr	r3, [sp, #12]
   11970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   11974:	b29b      	uxth	r3, r3
   11976:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_ENC_KEY_SIZE;
   1197a:	2306      	movs	r3, #6
   1197c:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   11980:	2303      	movs	r3, #3
   11982:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   11986:	ab04      	add	r3, sp, #16
   11988:	4619      	mov	r1, r3
   1198a:	9803      	ldr	r0, [sp, #12]
   1198c:	f000 fb7e 	bl	1208c <smpSmExecute>
    return FALSE;
   11990:	2300      	movs	r3, #0
   11992:	e000      	b.n	11996 <smpProcPairing+0x1fa>
  }

  return TRUE;
   11994:	2301      	movs	r3, #1
}
   11996:	4618      	mov	r0, r3
   11998:	b007      	add	sp, #28
   1199a:	f85d fb04 	ldr.w	pc, [sp], #4
   1199e:	bf00      	nop
   119a0:	10002bb4 	.word	0x10002bb4

000119a4 <smpAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
   119a4:	b500      	push	{lr}
   119a6:	b089      	sub	sp, #36	; 0x24
   119a8:	9001      	str	r0, [sp, #4]
   119aa:	460b      	mov	r3, r1
   119ac:	f88d 3003 	strb.w	r3, [sp, #3]
   119b0:	4613      	mov	r3, r2
   119b2:	f88d 3002 	strb.w	r3, [sp, #2]
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   119b6:	9b01      	ldr	r3, [sp, #4]
   119b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   119bc:	f003 0304 	and.w	r3, r3, #4
   119c0:	2b00      	cmp	r3, #0
   119c2:	d015      	beq.n	119f0 <smpAuthReq+0x4c>
  {
    /* request pin or oob from user */
    buf.authReq.hdr.param = pCcb->connId;
   119c4:	9b01      	ldr	r3, [sp, #4]
   119c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   119ca:	b29b      	uxth	r3, r3
   119cc:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   119d0:	232e      	movs	r3, #46	; 0x2e
   119d2:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authReq.oob = oob;
   119d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   119da:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authReq.display = display;
   119de:	f89d 3002 	ldrb.w	r3, [sp, #2]
   119e2:	f88d 300d 	strb.w	r3, [sp, #13]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   119e6:	ab02      	add	r3, sp, #8
   119e8:	4618      	mov	r0, r3
   119ea:	f004 ff91 	bl	16910 <DmSmpCbackExec>
    buf.authRsp.authData[1] = 0;
    buf.authRsp.authData[2] = 0;
    buf.authRsp.authDataLen = SMP_PIN_LEN;
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
  }
}
   119ee:	e019      	b.n	11a24 <smpAuthReq+0x80>
    buf.authRsp.hdr.param = pCcb->connId;
   119f0:	9b01      	ldr	r3, [sp, #4]
   119f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   119f6:	b29b      	uxth	r3, r3
   119f8:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   119fc:	2304      	movs	r3, #4
   119fe:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authRsp.authData[0] = 0;
   11a02:	2300      	movs	r3, #0
   11a04:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authRsp.authData[1] = 0;
   11a08:	2300      	movs	r3, #0
   11a0a:	f88d 300d 	strb.w	r3, [sp, #13]
    buf.authRsp.authData[2] = 0;
   11a0e:	2300      	movs	r3, #0
   11a10:	f88d 300e 	strb.w	r3, [sp, #14]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   11a14:	2303      	movs	r3, #3
   11a16:	f88d 301c 	strb.w	r3, [sp, #28]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   11a1a:	ab02      	add	r3, sp, #8
   11a1c:	4619      	mov	r1, r3
   11a1e:	9801      	ldr	r0, [sp, #4]
   11a20:	f000 fb34 	bl	1208c <smpSmExecute>
}
   11a24:	bf00      	nop
   11a26:	b009      	add	sp, #36	; 0x24
   11a28:	f85d fb04 	ldr.w	pc, [sp], #4

00011a2c <smpActPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11a2c:	b500      	push	{lr}
   11a2e:	b083      	sub	sp, #12
   11a30:	9001      	str	r0, [sp, #4]
   11a32:	9100      	str	r1, [sp, #0]
  /* store authentication data */
  smpActStorePin(pCcb, pMsg);
   11a34:	9900      	ldr	r1, [sp, #0]
   11a36:	9801      	ldr	r0, [sp, #4]
   11a38:	f7ff fe92 	bl	11760 <smpActStorePin>

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   11a3c:	9b01      	ldr	r3, [sp, #4]
   11a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11a40:	3330      	adds	r3, #48	; 0x30
   11a42:	2110      	movs	r1, #16
   11a44:	4618      	mov	r0, r3
   11a46:	f005 fe9b 	bl	17780 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   11a4a:	9b01      	ldr	r3, [sp, #4]
   11a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11a4e:	4619      	mov	r1, r3
   11a50:	9b01      	ldr	r3, [sp, #4]
   11a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11a54:	3330      	adds	r3, #48	; 0x30
   11a56:	461a      	mov	r2, r3
   11a58:	9801      	ldr	r0, [sp, #4]
   11a5a:	f000 fee3 	bl	12824 <smpCalcC1Part1>
}
   11a5e:	bf00      	nop
   11a60:	b003      	add	sp, #12
   11a62:	f85d fb04 	ldr.w	pc, [sp], #4

00011a66 <smpActPairCnfCalc2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11a66:	b500      	push	{lr}
   11a68:	b083      	sub	sp, #12
   11a6a:	9001      	str	r0, [sp, #4]
   11a6c:	9100      	str	r1, [sp, #0]
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
   11a6e:	9b01      	ldr	r3, [sp, #4]
   11a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11a72:	4619      	mov	r1, r3
   11a74:	9b00      	ldr	r3, [sp, #0]
   11a76:	685b      	ldr	r3, [r3, #4]
   11a78:	461a      	mov	r2, r3
   11a7a:	9801      	ldr	r0, [sp, #4]
   11a7c:	f000 ffc2 	bl	12a04 <smpCalcC1Part2>
}
   11a80:	bf00      	nop
   11a82:	b003      	add	sp, #12
   11a84:	f85d fb04 	ldr.w	pc, [sp], #4

00011a88 <smpActSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11a88:	b500      	push	{lr}
   11a8a:	b085      	sub	sp, #20
   11a8c:	9001      	str	r0, [sp, #4]
   11a8e:	9100      	str	r1, [sp, #0]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set next expected packet */
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
   11a90:	9b01      	ldr	r3, [sp, #4]
   11a92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   11a96:	2b00      	cmp	r3, #0
   11a98:	d001      	beq.n	11a9e <smpActSendPairCnf+0x16>
   11a9a:	2203      	movs	r2, #3
   11a9c:	e000      	b.n	11aa0 <smpActSendPairCnf+0x18>
   11a9e:	2204      	movs	r2, #4
   11aa0:	9b01      	ldr	r3, [sp, #4]
   11aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   11aa6:	9801      	ldr	r0, [sp, #4]
   11aa8:	f7ff fdba 	bl	11620 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   11aac:	2019      	movs	r0, #25
   11aae:	f001 f948 	bl	12d42 <smpMsgAlloc>
   11ab2:	9003      	str	r0, [sp, #12]
   11ab4:	9b03      	ldr	r3, [sp, #12]
   11ab6:	2b00      	cmp	r3, #0
   11ab8:	d012      	beq.n	11ae0 <smpActSendPairCnf+0x58>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   11aba:	9b03      	ldr	r3, [sp, #12]
   11abc:	3308      	adds	r3, #8
   11abe:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   11ac0:	9b02      	ldr	r3, [sp, #8]
   11ac2:	1c5a      	adds	r2, r3, #1
   11ac4:	9202      	str	r2, [sp, #8]
   11ac6:	2203      	movs	r2, #3
   11ac8:	701a      	strb	r2, [r3, #0]
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
   11aca:	9b00      	ldr	r3, [sp, #0]
   11acc:	685b      	ldr	r3, [r3, #4]
   11ace:	2210      	movs	r2, #16
   11ad0:	4619      	mov	r1, r3
   11ad2:	9802      	ldr	r0, [sp, #8]
   11ad4:	f7fa fb14 	bl	c100 <memcpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   11ad8:	9903      	ldr	r1, [sp, #12]
   11ada:	9801      	ldr	r0, [sp, #4]
   11adc:	f001 f8fa 	bl	12cd4 <smpSendPkt>
  }
}
   11ae0:	bf00      	nop
   11ae2:	b005      	add	sp, #20
   11ae4:	f85d fb04 	ldr.w	pc, [sp], #4

00011ae8 <smpActPairCnfVerCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11ae8:	b500      	push	{lr}
   11aea:	b085      	sub	sp, #20
   11aec:	9001      	str	r0, [sp, #4]
   11aee:	9100      	str	r1, [sp, #0]
  uint8_t   *p;

  /* go to start of received pairing random packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   11af0:	9b00      	ldr	r3, [sp, #0]
   11af2:	685b      	ldr	r3, [r3, #4]
   11af4:	3309      	adds	r3, #9
   11af6:	9303      	str	r3, [sp, #12]

  /* store random value */
  memcpy(pCcb->pScr->buf.b2, p, SMP_RAND_LEN);
   11af8:	9b01      	ldr	r3, [sp, #4]
   11afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11afc:	3310      	adds	r3, #16
   11afe:	2210      	movs	r2, #16
   11b00:	9903      	ldr	r1, [sp, #12]
   11b02:	4618      	mov	r0, r3
   11b04:	f7fa fafc 	bl	c100 <memcpy>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
   11b08:	9b01      	ldr	r3, [sp, #4]
   11b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11b0c:	9a03      	ldr	r2, [sp, #12]
   11b0e:	4619      	mov	r1, r3
   11b10:	9801      	ldr	r0, [sp, #4]
   11b12:	f000 fe87 	bl	12824 <smpCalcC1Part1>
}
   11b16:	bf00      	nop
   11b18:	b005      	add	sp, #20
   11b1a:	f85d fb04 	ldr.w	pc, [sp], #4

00011b1e <smpActPairCnfVerCalc2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11b1e:	b500      	push	{lr}
   11b20:	b083      	sub	sp, #12
   11b22:	9001      	str	r0, [sp, #4]
   11b24:	9100      	str	r1, [sp, #0]
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
   11b26:	9b01      	ldr	r3, [sp, #4]
   11b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11b2a:	4619      	mov	r1, r3
   11b2c:	9b00      	ldr	r3, [sp, #0]
   11b2e:	685b      	ldr	r3, [r3, #4]
   11b30:	461a      	mov	r2, r3
   11b32:	9801      	ldr	r0, [sp, #4]
   11b34:	f000 ff66 	bl	12a04 <smpCalcC1Part2>
}
   11b38:	bf00      	nop
   11b3a:	b003      	add	sp, #12
   11b3c:	f85d fb04 	ldr.w	pc, [sp], #4

00011b40 <smpSendKey>:
 *
 *  \return TRUE if done sending keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpSendKey(smpCcb_t *pCcb, uint8_t keyDist)
{
   11b40:	b500      	push	{lr}
   11b42:	b08f      	sub	sp, #60	; 0x3c
   11b44:	9001      	str	r0, [sp, #4]
   11b46:	460b      	mov	r3, r1
   11b48:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t     *pPkt;
  uint8_t     *p;
  wsfMsgHdr_t *pHdr;

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   11b4c:	4ba0      	ldr	r3, [pc, #640]	; (11dd0 <smpSendKey+0x290>)
   11b4e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   11b52:	2b00      	cmp	r3, #0
   11b54:	d045      	beq.n	11be2 <smpSendKey+0xa2>
   11b56:	9b01      	ldr	r3, [sp, #4]
   11b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11b5a:	781b      	ldrb	r3, [r3, #0]
   11b5c:	2b00      	cmp	r3, #0
   11b5e:	d040      	beq.n	11be2 <smpSendKey+0xa2>
   11b60:	9b01      	ldr	r3, [sp, #4]
   11b62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   11b66:	2b00      	cmp	r3, #0
   11b68:	d13b      	bne.n	11be2 <smpSendKey+0xa2>
  {
    dmSecKeyIndEvt_t keyInd;

    /* pass LTK to app via DM */
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   11b6a:	9b01      	ldr	r3, [sp, #4]
   11b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   11b70:	4618      	mov	r0, r3
   11b72:	f003 ffad 	bl	15ad0 <DmConnRole>
   11b76:	4603      	mov	r3, r0
   11b78:	2b00      	cmp	r3, #0
   11b7a:	d103      	bne.n	11b84 <smpSendKey+0x44>
    {
      keyInd.type = DM_KEY_PEER_LTK;
   11b7c:	2302      	movs	r3, #2
   11b7e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   11b82:	e002      	b.n	11b8a <smpSendKey+0x4a>
    }
    else
    {
      keyInd.type = DM_KEY_LOCAL_LTK;
   11b84:	2301      	movs	r3, #1
   11b86:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    }

    keyInd.hdr.event = DM_SEC_KEY_IND;
   11b8a:	232f      	movs	r3, #47	; 0x2f
   11b8c:	f88d 300a 	strb.w	r3, [sp, #10]
    keyInd.hdr.param = pCcb->connId;
   11b90:	9b01      	ldr	r3, [sp, #4]
   11b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   11b96:	b29b      	uxth	r3, r3
   11b98:	f8ad 3008 	strh.w	r3, [sp, #8]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   11b9c:	9801      	ldr	r0, [sp, #4]
   11b9e:	f001 f905 	bl	12dac <smpGetScSecLevel>
   11ba2:	4603      	mov	r3, r0
   11ba4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    keyInd.keyData.ltk.ediv = 0;
   11ba8:	2300      	movs	r3, #0
   11baa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    memset(keyInd.keyData.ltk.rand, 0, SMP_RAND8_LEN);
   11bae:	ab02      	add	r3, sp, #8
   11bb0:	3314      	adds	r3, #20
   11bb2:	2208      	movs	r2, #8
   11bb4:	2100      	movs	r1, #0
   11bb6:	4618      	mov	r0, r3
   11bb8:	f013 fd80 	bl	256bc <memset>
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   11bbc:	9b01      	ldr	r3, [sp, #4]
   11bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11bc0:	699b      	ldr	r3, [r3, #24]
   11bc2:	f103 0210 	add.w	r2, r3, #16
   11bc6:	ab02      	add	r3, sp, #8
   11bc8:	3304      	adds	r3, #4
   11bca:	4611      	mov	r1, r2
   11bcc:	4618      	mov	r0, r3
   11bce:	f7fa fb77 	bl	c2c0 <Calc128Cpy>
    DmSmpCbackExec((dmEvt_t *)&keyInd);
   11bd2:	ab02      	add	r3, sp, #8
   11bd4:	4618      	mov	r0, r3
   11bd6:	f004 fe9b 	bl	16910 <DmSmpCbackExec>

    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
   11bda:	9b01      	ldr	r3, [sp, #4]
   11bdc:	2207      	movs	r2, #7
   11bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* check if we're done sending keys */
  if ((keyDist == 0) ||
   11be2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11be6:	2b00      	cmp	r3, #0
   11be8:	d016      	beq.n	11c18 <smpSendKey+0xd8>
   11bea:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11bee:	2b01      	cmp	r3, #1
   11bf0:	d104      	bne.n	11bfc <smpSendKey+0xbc>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   11bf2:	9b01      	ldr	r3, [sp, #4]
   11bf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   11bf8:	2b07      	cmp	r3, #7
   11bfa:	d00d      	beq.n	11c18 <smpSendKey+0xd8>
   11bfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11c00:	2b03      	cmp	r3, #3
   11c02:	d804      	bhi.n	11c0e <smpSendKey+0xce>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   11c04:	9b01      	ldr	r3, [sp, #4]
   11c06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   11c0a:	2b09      	cmp	r3, #9
   11c0c:	d004      	beq.n	11c18 <smpSendKey+0xd8>
      (pCcb->lastSentKey == SMP_CMD_SIGN_INFO))
   11c0e:	9b01      	ldr	r3, [sp, #4]
   11c10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   11c14:	2b0a      	cmp	r3, #10
   11c16:	d101      	bne.n	11c1c <smpSendKey+0xdc>
  {
      return TRUE;
   11c18:	2301      	movs	r3, #1
   11c1a:	e0d5      	b.n	11dc8 <smpSendKey+0x288>
  }

  /* if flow disabled return */
  if (pCcb->flowDisabled)
   11c1c:	9b01      	ldr	r3, [sp, #4]
   11c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   11c22:	2b00      	cmp	r3, #0
   11c24:	d001      	beq.n	11c2a <smpSendKey+0xea>
  {
    return FALSE;
   11c26:	2300      	movs	r3, #0
   11c28:	e0ce      	b.n	11dc8 <smpSendKey+0x288>
  }

  /* allocate packet buffer for largest packet size */
  if ((pPkt = smpMsgAlloc(SMP_ENC_INFO_LEN + L2C_PAYLOAD_START)) != NULL)
   11c2a:	2019      	movs	r0, #25
   11c2c:	f001 f889 	bl	12d42 <smpMsgAlloc>
   11c30:	900d      	str	r0, [sp, #52]	; 0x34
   11c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11c34:	2b00      	cmp	r3, #0
   11c36:	f000 80c6 	beq.w	11dc6 <smpSendKey+0x286>
  {
    p = pPkt + L2C_PAYLOAD_START;
   11c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11c3c:	3308      	adds	r3, #8
   11c3e:	930c      	str	r3, [sp, #48]	; 0x30

    /* determine next key to send */
    if (pCcb->lastSentKey == 0 && (keyDist & SMP_KEY_DIST_ENC))
   11c40:	9b01      	ldr	r3, [sp, #4]
   11c42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   11c46:	2b00      	cmp	r3, #0
   11c48:	d115      	bne.n	11c76 <smpSendKey+0x136>
   11c4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11c4e:	f003 0301 	and.w	r3, r3, #1
   11c52:	2b00      	cmp	r3, #0
   11c54:	d00f      	beq.n	11c76 <smpSendKey+0x136>
    {
      /* generate LTK, EDIV, and RAND */
      smpGenerateLtk(pCcb);
   11c56:	9801      	ldr	r0, [sp, #4]
   11c58:	f000 ffea 	bl	12c30 <smpGenerateLtk>

      /* send first part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_ENC_INFO);
   11c5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11c5e:	1c5a      	adds	r2, r3, #1
   11c60:	920c      	str	r2, [sp, #48]	; 0x30
   11c62:	2206      	movs	r2, #6
   11c64:	701a      	strb	r2, [r3, #0]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
   11c66:	9b01      	ldr	r3, [sp, #4]
   11c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11c6a:	3304      	adds	r3, #4
   11c6c:	4619      	mov	r1, r3
   11c6e:	980c      	ldr	r0, [sp, #48]	; 0x30
   11c70:	f7fa fb26 	bl	c2c0 <Calc128Cpy>
   11c74:	e082      	b.n	11d7c <smpSendKey+0x23c>
    }
    else if (pCcb->lastSentKey == SMP_CMD_ENC_INFO)
   11c76:	9b01      	ldr	r3, [sp, #4]
   11c78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   11c7c:	2b06      	cmp	r3, #6
   11c7e:	d11f      	bne.n	11cc0 <smpSendKey+0x180>
    {
      /* send second part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
   11c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11c82:	1c5a      	adds	r2, r3, #1
   11c84:	920c      	str	r2, [sp, #48]	; 0x30
   11c86:	2207      	movs	r2, #7
   11c88:	701a      	strb	r2, [r3, #0]
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
   11c8a:	9b01      	ldr	r3, [sp, #4]
   11c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11c8e:	8b99      	ldrh	r1, [r3, #28]
   11c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11c92:	1c5a      	adds	r2, r3, #1
   11c94:	920c      	str	r2, [sp, #48]	; 0x30
   11c96:	b2ca      	uxtb	r2, r1
   11c98:	701a      	strb	r2, [r3, #0]
   11c9a:	9b01      	ldr	r3, [sp, #4]
   11c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11c9e:	8b9b      	ldrh	r3, [r3, #28]
   11ca0:	0a1b      	lsrs	r3, r3, #8
   11ca2:	b299      	uxth	r1, r3
   11ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11ca6:	1c5a      	adds	r2, r3, #1
   11ca8:	920c      	str	r2, [sp, #48]	; 0x30
   11caa:	b2ca      	uxtb	r2, r1
   11cac:	701a      	strb	r2, [r3, #0]
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
   11cae:	9b01      	ldr	r3, [sp, #4]
   11cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11cb2:	3314      	adds	r3, #20
   11cb4:	2208      	movs	r2, #8
   11cb6:	4619      	mov	r1, r3
   11cb8:	980c      	ldr	r0, [sp, #48]	; 0x30
   11cba:	f7fa fa21 	bl	c100 <memcpy>
   11cbe:	e05d      	b.n	11d7c <smpSendKey+0x23c>
    }
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   11cc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11cc4:	f003 0302 	and.w	r3, r3, #2
   11cc8:	2b00      	cmp	r3, #0
   11cca:	d016      	beq.n	11cfa <smpSendKey+0x1ba>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
   11ccc:	9b01      	ldr	r3, [sp, #4]
   11cce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   11cd2:	2b00      	cmp	r3, #0
   11cd4:	d004      	beq.n	11ce0 <smpSendKey+0x1a0>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
   11cd6:	9b01      	ldr	r3, [sp, #4]
   11cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   11cdc:	2b07      	cmp	r3, #7
   11cde:	d10c      	bne.n	11cfa <smpSendKey+0x1ba>
    {
      /* send first part of IRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_INFO);
   11ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11ce2:	1c5a      	adds	r2, r3, #1
   11ce4:	920c      	str	r2, [sp, #48]	; 0x30
   11ce6:	2208      	movs	r2, #8
   11ce8:	701a      	strb	r2, [r3, #0]
      Calc128Cpy(p, DmSecGetLocalIrk());
   11cea:	f004 fe9f 	bl	16a2c <DmSecGetLocalIrk>
   11cee:	4603      	mov	r3, r0
   11cf0:	4619      	mov	r1, r3
   11cf2:	980c      	ldr	r0, [sp, #48]	; 0x30
   11cf4:	f7fa fae4 	bl	c2c0 <Calc128Cpy>
   11cf8:	e040      	b.n	11d7c <smpSendKey+0x23c>
    }
    else if (pCcb->lastSentKey == SMP_CMD_ID_INFO)
   11cfa:	9b01      	ldr	r3, [sp, #4]
   11cfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   11d00:	2b08      	cmp	r3, #8
   11d02:	d114      	bne.n	11d2e <smpSendKey+0x1ee>
    {
      /* send second part of IRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
   11d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11d06:	1c5a      	adds	r2, r3, #1
   11d08:	920c      	str	r2, [sp, #48]	; 0x30
   11d0a:	2209      	movs	r2, #9
   11d0c:	701a      	strb	r2, [r3, #0]
      UINT8_TO_BSTREAM(p, DM_ADDR_PUBLIC);
   11d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11d10:	1c5a      	adds	r2, r3, #1
   11d12:	920c      	str	r2, [sp, #48]	; 0x30
   11d14:	2200      	movs	r2, #0
   11d16:	701a      	strb	r2, [r3, #0]
      BDA_TO_BSTREAM(p, HciGetBdAddr());
   11d18:	f7fc fb9e 	bl	e458 <HciGetBdAddr>
   11d1c:	4603      	mov	r3, r0
   11d1e:	4619      	mov	r1, r3
   11d20:	980c      	ldr	r0, [sp, #48]	; 0x30
   11d22:	f7fa fa87 	bl	c234 <BdaCpy>
   11d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11d28:	3306      	adds	r3, #6
   11d2a:	930c      	str	r3, [sp, #48]	; 0x30
   11d2c:	e026      	b.n	11d7c <smpSendKey+0x23c>

    }
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   11d2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11d32:	f003 0304 	and.w	r3, r3, #4
   11d36:	2b00      	cmp	r3, #0
   11d38:	d01b      	beq.n	11d72 <smpSendKey+0x232>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
   11d3a:	9b01      	ldr	r3, [sp, #4]
   11d3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   11d40:	2b00      	cmp	r3, #0
   11d42:	d009      	beq.n	11d58 <smpSendKey+0x218>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
   11d44:	9b01      	ldr	r3, [sp, #4]
   11d46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   11d4a:	2b09      	cmp	r3, #9
   11d4c:	d004      	beq.n	11d58 <smpSendKey+0x218>
              pCcb->lastSentKey == SMP_CMD_MASTER_ID))
   11d4e:	9b01      	ldr	r3, [sp, #4]
   11d50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
   11d54:	2b07      	cmp	r3, #7
   11d56:	d10c      	bne.n	11d72 <smpSendKey+0x232>
    {
      /* send SRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_SIGN_INFO);
   11d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11d5a:	1c5a      	adds	r2, r3, #1
   11d5c:	920c      	str	r2, [sp, #48]	; 0x30
   11d5e:	220a      	movs	r2, #10
   11d60:	701a      	strb	r2, [r3, #0]
      Calc128Cpy(p, DmSecGetLocalCsrk());
   11d62:	f004 fe5d 	bl	16a20 <DmSecGetLocalCsrk>
   11d66:	4603      	mov	r3, r0
   11d68:	4619      	mov	r1, r3
   11d6a:	980c      	ldr	r0, [sp, #48]	; 0x30
   11d6c:	f7fa faa8 	bl	c2c0 <Calc128Cpy>
   11d70:	e004      	b.n	11d7c <smpSendKey+0x23c>
    }
    else
    {
      /* should never get here */
      WsfMsgFree(pPkt);
   11d72:	980d      	ldr	r0, [sp, #52]	; 0x34
   11d74:	f00d fdd6 	bl	1f924 <WsfMsgFree>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
      return TRUE;
   11d78:	2301      	movs	r3, #1
   11d7a:	e025      	b.n	11dc8 <smpSendKey+0x288>
    }

    /* set last sent key to command code */
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   11d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11d7e:	7a1a      	ldrb	r2, [r3, #8]
   11d80:	9b01      	ldr	r3, [sp, #4]
   11d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* send command packet */
    smpSendPkt(pCcb, pPkt);
   11d86:	990d      	ldr	r1, [sp, #52]	; 0x34
   11d88:	9801      	ldr	r0, [sp, #4]
   11d8a:	f000 ffa3 	bl	12cd4 <smpSendPkt>

    /* if flow not disabled set up to send next key */
    if (!pCcb->flowDisabled)
   11d8e:	9b01      	ldr	r3, [sp, #4]
   11d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   11d94:	2b00      	cmp	r3, #0
   11d96:	d116      	bne.n	11dc6 <smpSendKey+0x286>
    {
      if ((pHdr = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   11d98:	2004      	movs	r0, #4
   11d9a:	f00d fdab 	bl	1f8f4 <WsfMsgAlloc>
   11d9e:	900b      	str	r0, [sp, #44]	; 0x2c
   11da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11da2:	2b00      	cmp	r3, #0
   11da4:	d00f      	beq.n	11dc6 <smpSendKey+0x286>
      {
        pHdr->event = SMP_MSG_INT_SEND_NEXT_KEY;
   11da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11da8:	220c      	movs	r2, #12
   11daa:	709a      	strb	r2, [r3, #2]
        pHdr->param = pCcb->connId;
   11dac:	9b01      	ldr	r3, [sp, #4]
   11dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   11db2:	b29a      	uxth	r2, r3
   11db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11db6:	801a      	strh	r2, [r3, #0]
        WsfMsgSend(smpCb.handlerId, pHdr);
   11db8:	4b05      	ldr	r3, [pc, #20]	; (11dd0 <smpSendKey+0x290>)
   11dba:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   11dbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11dc0:	4618      	mov	r0, r3
   11dc2:	f00d fdbb 	bl	1f93c <WsfMsgSend>
      }
    }
  }

  return FALSE;
   11dc6:	2300      	movs	r3, #0
}
   11dc8:	4618      	mov	r0, r3
   11dca:	b00f      	add	sp, #60	; 0x3c
   11dcc:	f85d fb04 	ldr.w	pc, [sp], #4
   11dd0:	100042a4 	.word	0x100042a4

00011dd4 <smpProcRcvKey>:
 *
 *  \return TRUE if done receiving keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcRcvKey(smpCcb_t *pCcb, dmSecKeyIndEvt_t *pKeyInd, uint8_t *pBuf, uint8_t keyDist)
{
   11dd4:	b500      	push	{lr}
   11dd6:	b087      	sub	sp, #28
   11dd8:	9003      	str	r0, [sp, #12]
   11dda:	9102      	str	r1, [sp, #8]
   11ddc:	9201      	str	r2, [sp, #4]
   11dde:	f88d 3003 	strb.w	r3, [sp, #3]
  bool_t    keyIndReady = FALSE;
   11de2:	2300      	movs	r3, #0
   11de4:	f88d 3017 	strb.w	r3, [sp, #23]
  bool_t    done = FALSE;
   11de8:	2300      	movs	r3, #0
   11dea:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t   cmdCode;

  /* go to start of packet */
  pBuf += L2C_PAYLOAD_START;
   11dee:	9b01      	ldr	r3, [sp, #4]
   11df0:	3308      	adds	r3, #8
   11df2:	9301      	str	r3, [sp, #4]
  cmdCode = *pBuf++;
   11df4:	9b01      	ldr	r3, [sp, #4]
   11df6:	1c5a      	adds	r2, r3, #1
   11df8:	9201      	str	r2, [sp, #4]
   11dfa:	781b      	ldrb	r3, [r3, #0]
   11dfc:	f88d 3015 	strb.w	r3, [sp, #21]

  if (cmdCode == SMP_CMD_ENC_INFO)
   11e00:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11e04:	2b06      	cmp	r3, #6
   11e06:	d106      	bne.n	11e16 <smpProcRcvKey+0x42>
  {
    /* parse encryption information packet */
    Calc128Cpy(pKeyInd->keyData.ltk.key, pBuf);
   11e08:	9b02      	ldr	r3, [sp, #8]
   11e0a:	3304      	adds	r3, #4
   11e0c:	9901      	ldr	r1, [sp, #4]
   11e0e:	4618      	mov	r0, r3
   11e10:	f7fa fa56 	bl	c2c0 <Calc128Cpy>
   11e14:	e062      	b.n	11edc <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_MASTER_ID)
   11e16:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11e1a:	2b07      	cmp	r3, #7
   11e1c:	d129      	bne.n	11e72 <smpProcRcvKey+0x9e>
  {
    /* parse master identification packet */
    BSTREAM_TO_UINT16(pKeyInd->keyData.ltk.ediv, pBuf);
   11e1e:	9b01      	ldr	r3, [sp, #4]
   11e20:	781b      	ldrb	r3, [r3, #0]
   11e22:	b29a      	uxth	r2, r3
   11e24:	9b01      	ldr	r3, [sp, #4]
   11e26:	3301      	adds	r3, #1
   11e28:	781b      	ldrb	r3, [r3, #0]
   11e2a:	b29b      	uxth	r3, r3
   11e2c:	021b      	lsls	r3, r3, #8
   11e2e:	b29b      	uxth	r3, r3
   11e30:	4413      	add	r3, r2
   11e32:	b29a      	uxth	r2, r3
   11e34:	9b02      	ldr	r3, [sp, #8]
   11e36:	839a      	strh	r2, [r3, #28]
   11e38:	9b01      	ldr	r3, [sp, #4]
   11e3a:	3302      	adds	r3, #2
   11e3c:	9301      	str	r3, [sp, #4]
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
   11e3e:	9b02      	ldr	r3, [sp, #8]
   11e40:	3314      	adds	r3, #20
   11e42:	2208      	movs	r2, #8
   11e44:	9901      	ldr	r1, [sp, #4]
   11e46:	4618      	mov	r0, r3
   11e48:	f7fa f95a 	bl	c100 <memcpy>
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   11e4c:	9b03      	ldr	r3, [sp, #12]
   11e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   11e52:	f003 0304 	and.w	r3, r3, #4
   11e56:	2b00      	cmp	r3, #0
   11e58:	d001      	beq.n	11e5e <smpProcRcvKey+0x8a>
   11e5a:	2202      	movs	r2, #2
   11e5c:	e000      	b.n	11e60 <smpProcRcvKey+0x8c>
   11e5e:	2201      	movs	r2, #1
   11e60:	9b02      	ldr	r3, [sp, #8]
   11e62:	77da      	strb	r2, [r3, #31]
    pKeyInd->type = DM_KEY_PEER_LTK;
   11e64:	9b02      	ldr	r3, [sp, #8]
   11e66:	2202      	movs	r2, #2
   11e68:	779a      	strb	r2, [r3, #30]
    keyIndReady = TRUE;
   11e6a:	2301      	movs	r3, #1
   11e6c:	f88d 3017 	strb.w	r3, [sp, #23]
   11e70:	e034      	b.n	11edc <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_ID_INFO)
   11e72:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11e76:	2b08      	cmp	r3, #8
   11e78:	d106      	bne.n	11e88 <smpProcRcvKey+0xb4>
  {
    /* parse identity information packet */
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
   11e7a:	9b02      	ldr	r3, [sp, #8]
   11e7c:	3304      	adds	r3, #4
   11e7e:	9901      	ldr	r1, [sp, #4]
   11e80:	4618      	mov	r0, r3
   11e82:	f7fa fa1d 	bl	c2c0 <Calc128Cpy>
   11e86:	e029      	b.n	11edc <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_ID_ADDR_INFO)
   11e88:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11e8c:	2b09      	cmp	r3, #9
   11e8e:	d115      	bne.n	11ebc <smpProcRcvKey+0xe8>
  {
    /* parse identity address information packet */
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
   11e90:	9b01      	ldr	r3, [sp, #4]
   11e92:	1c5a      	adds	r2, r3, #1
   11e94:	9201      	str	r2, [sp, #4]
   11e96:	781a      	ldrb	r2, [r3, #0]
   11e98:	9b02      	ldr	r3, [sp, #8]
   11e9a:	769a      	strb	r2, [r3, #26]
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
   11e9c:	9b02      	ldr	r3, [sp, #8]
   11e9e:	3314      	adds	r3, #20
   11ea0:	9901      	ldr	r1, [sp, #4]
   11ea2:	4618      	mov	r0, r3
   11ea4:	f7fa f9c6 	bl	c234 <BdaCpy>
   11ea8:	9b01      	ldr	r3, [sp, #4]
   11eaa:	3306      	adds	r3, #6
   11eac:	9301      	str	r3, [sp, #4]
    pKeyInd->type = DM_KEY_IRK;
   11eae:	9b02      	ldr	r3, [sp, #8]
   11eb0:	2204      	movs	r2, #4
   11eb2:	779a      	strb	r2, [r3, #30]
    keyIndReady = TRUE;
   11eb4:	2301      	movs	r3, #1
   11eb6:	f88d 3017 	strb.w	r3, [sp, #23]
   11eba:	e00f      	b.n	11edc <smpProcRcvKey+0x108>
  }
  else if (cmdCode == SMP_CMD_SIGN_INFO)
   11ebc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11ec0:	2b0a      	cmp	r3, #10
   11ec2:	d10b      	bne.n	11edc <smpProcRcvKey+0x108>
  {
    /* parse signing information packet */
    Calc128Cpy(pKeyInd->keyData.csrk.key, pBuf);
   11ec4:	9b02      	ldr	r3, [sp, #8]
   11ec6:	3304      	adds	r3, #4
   11ec8:	9901      	ldr	r1, [sp, #4]
   11eca:	4618      	mov	r0, r3
   11ecc:	f7fa f9f8 	bl	c2c0 <Calc128Cpy>
    pKeyInd->type = DM_KEY_CSRK;
   11ed0:	9b02      	ldr	r3, [sp, #8]
   11ed2:	2208      	movs	r2, #8
   11ed4:	779a      	strb	r2, [r3, #30]
    keyIndReady = TRUE;
   11ed6:	2301      	movs	r3, #1
   11ed8:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  /* set up to receive next key */

  /* if just got first part of LTK or IRK */
  if (pCcb->nextCmdCode == SMP_CMD_ENC_INFO || pCcb->nextCmdCode == SMP_CMD_ID_INFO)
   11edc:	9b03      	ldr	r3, [sp, #12]
   11ede:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   11ee2:	2b06      	cmp	r3, #6
   11ee4:	d004      	beq.n	11ef0 <smpProcRcvKey+0x11c>
   11ee6:	9b03      	ldr	r3, [sp, #12]
   11ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   11eec:	2b08      	cmp	r3, #8
   11eee:	d108      	bne.n	11f02 <smpProcRcvKey+0x12e>
  {
    /* wait for second part of LTK or IRK info */
    pCcb->nextCmdCode++;
   11ef0:	9b03      	ldr	r3, [sp, #12]
   11ef2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   11ef6:	3301      	adds	r3, #1
   11ef8:	b2da      	uxtb	r2, r3
   11efa:	9b03      	ldr	r3, [sp, #12]
   11efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   11f00:	e027      	b.n	11f52 <smpProcRcvKey+0x17e>
  }
  /* else if got LTK and need IRK */
  else if ((keyDist & SMP_KEY_DIST_ID) && (pCcb->nextCmdCode == SMP_CMD_MASTER_ID))
   11f02:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11f06:	f003 0302 	and.w	r3, r3, #2
   11f0a:	2b00      	cmp	r3, #0
   11f0c:	d009      	beq.n	11f22 <smpProcRcvKey+0x14e>
   11f0e:	9b03      	ldr	r3, [sp, #12]
   11f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   11f14:	2b07      	cmp	r3, #7
   11f16:	d104      	bne.n	11f22 <smpProcRcvKey+0x14e>
  {
    /* wait for first part of IRK */
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   11f18:	9b03      	ldr	r3, [sp, #12]
   11f1a:	2208      	movs	r2, #8
   11f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   11f20:	e017      	b.n	11f52 <smpProcRcvKey+0x17e>
  }
  /* else if got LTK or IRK and need SRK */
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   11f22:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11f26:	f003 0304 	and.w	r3, r3, #4
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	d00e      	beq.n	11f4c <smpProcRcvKey+0x178>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
   11f2e:	9b03      	ldr	r3, [sp, #12]
   11f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   11f34:	2b07      	cmp	r3, #7
   11f36:	d004      	beq.n	11f42 <smpProcRcvKey+0x16e>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
   11f38:	9b03      	ldr	r3, [sp, #12]
   11f3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
   11f3e:	2b09      	cmp	r3, #9
   11f40:	d104      	bne.n	11f4c <smpProcRcvKey+0x178>
  {
    /* wait for SRK */
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   11f42:	9b03      	ldr	r3, [sp, #12]
   11f44:	220a      	movs	r2, #10
   11f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   11f4a:	e002      	b.n	11f52 <smpProcRcvKey+0x17e>
  }
  else
  {
    /* done receiving keys */
    done = TRUE;
   11f4c:	2301      	movs	r3, #1
   11f4e:	f88d 3016 	strb.w	r3, [sp, #22]
  }

  /* call callback if key ready */
  if (keyIndReady)
   11f52:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11f56:	2b00      	cmp	r3, #0
   11f58:	d005      	beq.n	11f66 <smpProcRcvKey+0x192>
  {
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
   11f5a:	9b02      	ldr	r3, [sp, #8]
   11f5c:	222f      	movs	r2, #47	; 0x2f
   11f5e:	709a      	strb	r2, [r3, #2]
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
   11f60:	9802      	ldr	r0, [sp, #8]
   11f62:	f004 fcd5 	bl	16910 <DmSmpCbackExec>
  }

  return done;
   11f66:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
   11f6a:	4618      	mov	r0, r3
   11f6c:	b007      	add	sp, #28
   11f6e:	f85d fb04 	ldr.w	pc, [sp], #4

00011f72 <smpActMaxAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActMaxAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11f72:	b500      	push	{lr}
   11f74:	b085      	sub	sp, #20
   11f76:	9001      	str	r0, [sp, #4]
   11f78:	9100      	str	r1, [sp, #0]
  uint32_t timeout;

  /* send paring failed packet; note this stops the timer so call this first */
  smpActPairingCancel(pCcb, pMsg);
   11f7a:	9900      	ldr	r1, [sp, #0]
   11f7c:	9801      	ldr	r0, [sp, #4]
   11f7e:	f7ff fbdd 	bl	1173c <smpActPairingCancel>

  /* Check SMP device DB to determine time to wait before pairing can happen again */
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
   11f82:	9b01      	ldr	r3, [sp, #4]
   11f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   11f88:	4618      	mov	r0, r3
   11f8a:	f000 f9e5 	bl	12358 <SmpDbMaxAttemptReached>
   11f8e:	9003      	str	r0, [sp, #12]

  /* start wait interval timer */
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   11f90:	9b01      	ldr	r3, [sp, #4]
   11f92:	2210      	movs	r2, #16
   11f94:	769a      	strb	r2, [r3, #26]
  WsfTimerStartMs(&pCcb->waitTimer, timeout);
   11f96:	9b01      	ldr	r3, [sp, #4]
   11f98:	3310      	adds	r3, #16
   11f9a:	9903      	ldr	r1, [sp, #12]
   11f9c:	4618      	mov	r0, r3
   11f9e:	f00e f855 	bl	2004c <WsfTimerStartMs>

  /* clear attempts count */
  pCcb->attempts = 0;
   11fa2:	9b01      	ldr	r3, [sp, #4]
   11fa4:	2200      	movs	r2, #0
   11fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
   11faa:	bf00      	nop
   11fac:	b005      	add	sp, #20
   11fae:	f85d fb04 	ldr.w	pc, [sp], #4

00011fb2 <smpActAttemptRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActAttemptRcvd(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11fb2:	b082      	sub	sp, #8
   11fb4:	9001      	str	r0, [sp, #4]
   11fb6:	9100      	str	r1, [sp, #0]
  /* set that attempt was received */
  pCcb->attempts = 1;
   11fb8:	9b01      	ldr	r3, [sp, #4]
   11fba:	2201      	movs	r2, #1
   11fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
   11fc0:	bf00      	nop
   11fc2:	b002      	add	sp, #8
   11fc4:	4770      	bx	lr

00011fc6 <smpActNotifyDmAttemptsFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActNotifyDmAttemptsFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11fc6:	b500      	push	{lr}
   11fc8:	b083      	sub	sp, #12
   11fca:	9001      	str	r0, [sp, #4]
   11fcc:	9100      	str	r1, [sp, #0]
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_ATTEMPTS;
   11fce:	9b00      	ldr	r3, [sp, #0]
   11fd0:	2209      	movs	r2, #9
   11fd2:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   11fd4:	9b00      	ldr	r3, [sp, #0]
   11fd6:	222b      	movs	r2, #43	; 0x2b
   11fd8:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   11fda:	9800      	ldr	r0, [sp, #0]
   11fdc:	f004 fc98 	bl	16910 <DmSmpCbackExec>
}
   11fe0:	bf00      	nop
   11fe2:	b003      	add	sp, #12
   11fe4:	f85d fb04 	ldr.w	pc, [sp], #4

00011fe8 <smpActNotifyDmRspToFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActNotifyDmRspToFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   11fe8:	b500      	push	{lr}
   11fea:	b083      	sub	sp, #12
   11fec:	9001      	str	r0, [sp, #4]
   11fee:	9100      	str	r1, [sp, #0]
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_TIMEOUT;
   11ff0:	9b00      	ldr	r3, [sp, #0]
   11ff2:	22e1      	movs	r2, #225	; 0xe1
   11ff4:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   11ff6:	9b00      	ldr	r3, [sp, #0]
   11ff8:	222b      	movs	r2, #43	; 0x2b
   11ffa:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   11ffc:	9800      	ldr	r0, [sp, #0]
   11ffe:	f004 fc87 	bl	16910 <DmSmpCbackExec>
}
   12002:	bf00      	nop
   12004:	b003      	add	sp, #12
   12006:	f85d fb04 	ldr.w	pc, [sp], #4

0001200a <smpActCheckAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCheckAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1200a:	b500      	push	{lr}
   1200c:	b083      	sub	sp, #12
   1200e:	9001      	str	r0, [sp, #4]
   12010:	9100      	str	r1, [sp, #0]
  /* check if attempt was received */
  if (pCcb->attempts)
   12012:	9b01      	ldr	r3, [sp, #4]
   12014:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   12018:	2b00      	cmp	r3, #0
   1201a:	d00e      	beq.n	1203a <smpActCheckAttempts+0x30>
  {
    pCcb->attempts = 0;
   1201c:	9b01      	ldr	r3, [sp, #4]
   1201e:	2200      	movs	r2, #0
   12020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    smpSendPairingFailed(pCcb, SMP_ERR_ATTEMPTS);
   12024:	2109      	movs	r1, #9
   12026:	9801      	ldr	r0, [sp, #4]
   12028:	f7ff fb4c 	bl	116c4 <smpSendPairingFailed>

    /* notify DM of pairing failure */
    smpActNotifyDmAttemptsFailure(pCcb, pMsg);
   1202c:	9900      	ldr	r1, [sp, #0]
   1202e:	9801      	ldr	r0, [sp, #4]
   12030:	f7ff ffc9 	bl	11fc6 <smpActNotifyDmAttemptsFailure>

    smpCleanup(pCcb);
   12034:	9801      	ldr	r0, [sp, #4]
   12036:	f7ff fb0b 	bl	11650 <smpCleanup>
  }
}
   1203a:	bf00      	nop
   1203c:	b003      	add	sp, #12
   1203e:	f85d fb04 	ldr.w	pc, [sp], #4

00012042 <smpActPairingCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCmpl(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   12042:	b500      	push	{lr}
   12044:	b085      	sub	sp, #20
   12046:	9001      	str	r0, [sp, #4]
   12048:	9100      	str	r1, [sp, #0]
  dmSecPairCmplIndEvt_t pairCmpl;

  smpCleanup(pCcb);
   1204a:	9801      	ldr	r0, [sp, #4]
   1204c:	f7ff fb00 	bl	11650 <smpCleanup>

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   12050:	9b01      	ldr	r3, [sp, #4]
   12052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12056:	2200      	movs	r2, #0
   12058:	2101      	movs	r1, #1
   1205a:	4618      	mov	r0, r3
   1205c:	f003 fcbe 	bl	159dc <DmConnSetIdle>

  pairCmpl.auth = pCcb->auth;
   12060:	9b01      	ldr	r3, [sp, #4]
   12062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   12066:	f88d 300c 	strb.w	r3, [sp, #12]
  pairCmpl.hdr.param = pCcb->connId;
   1206a:	9b01      	ldr	r3, [sp, #4]
   1206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12070:	b29b      	uxth	r3, r3
   12072:	f8ad 3008 	strh.w	r3, [sp, #8]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
   12076:	232a      	movs	r3, #42	; 0x2a
   12078:	f88d 300a 	strb.w	r3, [sp, #10]
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
   1207c:	ab02      	add	r3, sp, #8
   1207e:	4618      	mov	r0, r3
   12080:	f004 fc46 	bl	16910 <DmSmpCbackExec>
}
   12084:	bf00      	nop
   12086:	b005      	add	sp, #20
   12088:	f85d fb04 	ldr.w	pc, [sp], #4

0001208c <smpSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSmExecute(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1208c:	b500      	push	{lr}
   1208e:	b085      	sub	sp, #20
   12090:	9001      	str	r0, [sp, #4]
   12092:	9100      	str	r1, [sp, #0]
  else
#endif
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);

  /* look up state table for state */
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
   12094:	9b01      	ldr	r3, [sp, #4]
   12096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1209a:	4618      	mov	r0, r3
   1209c:	f003 fd18 	bl	15ad0 <DmConnRole>
   120a0:	4603      	mov	r3, r0
   120a2:	2b01      	cmp	r3, #1
   120a4:	d103      	bne.n	120ae <smpSmExecute+0x22>
   120a6:	4b1e      	ldr	r3, [pc, #120]	; (12120 <smpSmExecute+0x94>)
   120a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   120ac:	e002      	b.n	120b4 <smpSmExecute+0x28>
   120ae:	4b1c      	ldr	r3, [pc, #112]	; (12120 <smpSmExecute+0x94>)
   120b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   120b4:	9302      	str	r3, [sp, #8]
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
   120b6:	9b02      	ldr	r3, [sp, #8]
   120b8:	681a      	ldr	r2, [r3, #0]
   120ba:	9b01      	ldr	r3, [sp, #4]
   120bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   120c0:	009b      	lsls	r3, r3, #2
   120c2:	4413      	add	r3, r2
   120c4:	681b      	ldr	r3, [r3, #0]
   120c6:	9303      	str	r3, [sp, #12]
  {
    /* look for event match and execute action */
    do
    {
      /* if match */
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
   120c8:	9b03      	ldr	r3, [sp, #12]
   120ca:	781a      	ldrb	r2, [r3, #0]
   120cc:	9b00      	ldr	r3, [sp, #0]
   120ce:	789b      	ldrb	r3, [r3, #2]
   120d0:	429a      	cmp	r2, r3
   120d2:	d10f      	bne.n	120f4 <smpSmExecute+0x68>
      {
        /* set next state */
        pCcb->state = (*pTblEntry)[SMP_SM_POS_NEXT_STATE];
   120d4:	9b03      	ldr	r3, [sp, #12]
   120d6:	785a      	ldrb	r2, [r3, #1]
   120d8:	9b01      	ldr	r3, [sp, #4]
   120da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* execute action */
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
   120de:	9b02      	ldr	r3, [sp, #8]
   120e0:	685a      	ldr	r2, [r3, #4]
   120e2:	9b03      	ldr	r3, [sp, #12]
   120e4:	789b      	ldrb	r3, [r3, #2]
   120e6:	009b      	lsls	r3, r3, #2
   120e8:	4413      	add	r3, r2
   120ea:	681b      	ldr	r3, [r3, #0]
   120ec:	9900      	ldr	r1, [sp, #0]
   120ee:	9801      	ldr	r0, [sp, #4]
   120f0:	4798      	blx	r3

        return;
   120f2:	e011      	b.n	12118 <smpSmExecute+0x8c>
      }

      /* next entry */
      pTblEntry++;
   120f4:	9b03      	ldr	r3, [sp, #12]
   120f6:	3303      	adds	r3, #3
   120f8:	9303      	str	r3, [sp, #12]

      /* while not at end */
    } while ((*pTblEntry)[SMP_SM_POS_EVENT] != 0);
   120fa:	9b03      	ldr	r3, [sp, #12]
   120fc:	781b      	ldrb	r3, [r3, #0]
   120fe:	2b00      	cmp	r3, #0
   12100:	d1e2      	bne.n	120c8 <smpSmExecute+0x3c>

    /* if we've reached end of the common state table */
    if (pTblEntry == (pSmIf->pCommonTbl + SMP_STATE_TBL_COMMON_MAX - 1))
   12102:	9b02      	ldr	r3, [sp, #8]
   12104:	689b      	ldr	r3, [r3, #8]
   12106:	330c      	adds	r3, #12
   12108:	9a03      	ldr	r2, [sp, #12]
   1210a:	429a      	cmp	r2, r3
   1210c:	d003      	beq.n	12116 <smpSmExecute+0x8a>
    }
    /* else we haven't run through common state table yet */
    else
    {
      /* set it up */
      pTblEntry = pSmIf->pCommonTbl;
   1210e:	9b02      	ldr	r3, [sp, #8]
   12110:	689b      	ldr	r3, [r3, #8]
   12112:	9303      	str	r3, [sp, #12]
  for(;;)
   12114:	e7d8      	b.n	120c8 <smpSmExecute+0x3c>
      break;
   12116:	bf00      	nop
    }
  }
}
   12118:	b005      	add	sp, #20
   1211a:	f85d fb04 	ldr.w	pc, [sp], #4
   1211e:	bf00      	nop
   12120:	100042a4 	.word	0x100042a4

00012124 <smpDbStartServiceTimer>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpDbStartServiceTimer(void)
{
   12124:	b508      	push	{r3, lr}
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   12126:	4b06      	ldr	r3, [pc, #24]	; (12140 <smpDbStartServiceTimer+0x1c>)
   12128:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
   1212c:	2b00      	cmp	r3, #0
   1212e:	d104      	bne.n	1213a <smpDbStartServiceTimer+0x16>
  {
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   12130:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12134:	4803      	ldr	r0, [pc, #12]	; (12144 <smpDbStartServiceTimer+0x20>)
   12136:	f00d ff89 	bl	2004c <WsfTimerStartMs>
  }
}
   1213a:	bf00      	nop
   1213c:	bd08      	pop	{r3, pc}
   1213e:	bf00      	nop
   12140:	1000424c 	.word	0x1000424c
   12144:	10004294 	.word	0x10004294

00012148 <smpDbRecordInUse>:
 *
 *  \return TRUE if record in use, else FALSE.
 */
/*************************************************************************************************/
static bool_t smpDbRecordInUse(smpDbDevice_t *pRec)
{
   12148:	b082      	sub	sp, #8
   1214a:	9001      	str	r0, [sp, #4]
  /* When failCount, lockMs, and attemptMult are zero, the record can be used for another device. */
  if (pRec->failCount > 0)
   1214c:	9b01      	ldr	r3, [sp, #4]
   1214e:	79db      	ldrb	r3, [r3, #7]
   12150:	2b00      	cmp	r3, #0
   12152:	d001      	beq.n	12158 <smpDbRecordInUse+0x10>
  {
    return TRUE;
   12154:	2301      	movs	r3, #1
   12156:	e00c      	b.n	12172 <smpDbRecordInUse+0x2a>
  }

  if (pRec->lockMs > 0)
   12158:	9b01      	ldr	r3, [sp, #4]
   1215a:	68db      	ldr	r3, [r3, #12]
   1215c:	2b00      	cmp	r3, #0
   1215e:	d001      	beq.n	12164 <smpDbRecordInUse+0x1c>
  {
    return TRUE;
   12160:	2301      	movs	r3, #1
   12162:	e006      	b.n	12172 <smpDbRecordInUse+0x2a>
  }

  if (pRec->attemptMult > 0)
   12164:	9b01      	ldr	r3, [sp, #4]
   12166:	891b      	ldrh	r3, [r3, #8]
   12168:	2b00      	cmp	r3, #0
   1216a:	d001      	beq.n	12170 <smpDbRecordInUse+0x28>
  {
    return TRUE;
   1216c:	2301      	movs	r3, #1
   1216e:	e000      	b.n	12172 <smpDbRecordInUse+0x2a>
  }

  return FALSE;
   12170:	2300      	movs	r3, #0
}
   12172:	4618      	mov	r0, r3
   12174:	b002      	add	sp, #8
   12176:	4770      	bx	lr

00012178 <smpDbAddDevice>:
 *
 *  \return Pointer to DB record or NULL if database full.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbAddDevice(uint8_t *pAddr, uint8_t addrType)
{
   12178:	b500      	push	{lr}
   1217a:	b085      	sub	sp, #20
   1217c:	9001      	str	r0, [sp, #4]
   1217e:	460b      	mov	r3, r1
   12180:	f88d 3003 	strb.w	r3, [sp, #3]
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   12184:	4b16      	ldr	r3, [pc, #88]	; (121e0 <smpDbAddDevice+0x68>)
   12186:	9303      	str	r3, [sp, #12]
  uint8_t i;

  SMP_TRACE_INFO0("smpDbAddDevice");

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   12188:	2301      	movs	r3, #1
   1218a:	f88d 300b 	strb.w	r3, [sp, #11]
   1218e:	e01d      	b.n	121cc <smpDbAddDevice+0x54>
  {
    if (smpDbRecordInUse(pRec) == FALSE)
   12190:	9803      	ldr	r0, [sp, #12]
   12192:	f7ff ffd9 	bl	12148 <smpDbRecordInUse>
   12196:	4603      	mov	r3, r0
   12198:	2b00      	cmp	r3, #0
   1219a:	d10f      	bne.n	121bc <smpDbAddDevice+0x44>
    {
      /* Reset record. */
      memset(pRec, 0, sizeof(smpDbDevice_t));
   1219c:	2218      	movs	r2, #24
   1219e:	2100      	movs	r1, #0
   121a0:	9803      	ldr	r0, [sp, #12]
   121a2:	f013 fa8b 	bl	256bc <memset>

      pRec->addrType = addrType;
   121a6:	9b03      	ldr	r3, [sp, #12]
   121a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
   121ac:	719a      	strb	r2, [r3, #6]
      BdaCpy(pRec->peerAddr, pAddr);
   121ae:	9b03      	ldr	r3, [sp, #12]
   121b0:	9901      	ldr	r1, [sp, #4]
   121b2:	4618      	mov	r0, r3
   121b4:	f7fa f83e 	bl	c234 <BdaCpy>
      return pRec;
   121b8:	9b03      	ldr	r3, [sp, #12]
   121ba:	e00c      	b.n	121d6 <smpDbAddDevice+0x5e>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   121bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   121c0:	3301      	adds	r3, #1
   121c2:	f88d 300b 	strb.w	r3, [sp, #11]
   121c6:	9b03      	ldr	r3, [sp, #12]
   121c8:	3318      	adds	r3, #24
   121ca:	9303      	str	r3, [sp, #12]
   121cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   121d0:	2b02      	cmp	r3, #2
   121d2:	d9dd      	bls.n	12190 <smpDbAddDevice+0x18>
    }
  }

  return NULL;
   121d4:	2300      	movs	r3, #0
}
   121d6:	4618      	mov	r0, r3
   121d8:	b005      	add	sp, #20
   121da:	f85d fb04 	ldr.w	pc, [sp], #4
   121de:	bf00      	nop
   121e0:	10004264 	.word	0x10004264

000121e4 <smpDbGetRecord>:
 *
 *  \return Pointer to the record associated with the connection or the common record.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbGetRecord(dmConnId_t connId)
{
   121e4:	b500      	push	{lr}
   121e6:	b087      	sub	sp, #28
   121e8:	4603      	mov	r3, r0
   121ea:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   121ee:	4b25      	ldr	r3, [pc, #148]	; (12284 <smpDbGetRecord+0xa0>)
   121f0:	9305      	str	r3, [sp, #20]
  uint8_t addrType = DmHostAddrType(DmConnPeerAddrType(connId));
   121f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   121f6:	4618      	mov	r0, r3
   121f8:	f003 fb66 	bl	158c8 <DmConnPeerAddrType>
   121fc:	4603      	mov	r3, r0
   121fe:	4618      	mov	r0, r3
   12200:	f003 ff8a 	bl	16118 <DmHostAddrType>
   12204:	4603      	mov	r3, r0
   12206:	f88d 3012 	strb.w	r3, [sp, #18]
  uint8_t *pAddr = DmConnPeerAddr(connId);
   1220a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1220e:	4618      	mov	r0, r3
   12210:	f003 fb6e 	bl	158f0 <DmConnPeerAddr>
   12214:	9003      	str	r0, [sp, #12]
  uint8_t i;

  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   12216:	2301      	movs	r3, #1
   12218:	f88d 3013 	strb.w	r3, [sp, #19]
   1221c:	e01d      	b.n	1225a <smpDbGetRecord+0x76>
  {
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1221e:	9805      	ldr	r0, [sp, #20]
   12220:	f7ff ff92 	bl	12148 <smpDbRecordInUse>
   12224:	4603      	mov	r3, r0
   12226:	2b00      	cmp	r3, #0
   12228:	d00f      	beq.n	1224a <smpDbGetRecord+0x66>
   1222a:	9b05      	ldr	r3, [sp, #20]
   1222c:	799b      	ldrb	r3, [r3, #6]
   1222e:	f89d 2012 	ldrb.w	r2, [sp, #18]
   12232:	429a      	cmp	r2, r3
   12234:	d109      	bne.n	1224a <smpDbGetRecord+0x66>
   12236:	9b05      	ldr	r3, [sp, #20]
   12238:	9903      	ldr	r1, [sp, #12]
   1223a:	4618      	mov	r0, r3
   1223c:	f7fa f807 	bl	c24e <BdaCmp>
   12240:	4603      	mov	r3, r0
   12242:	2b00      	cmp	r3, #0
   12244:	d001      	beq.n	1224a <smpDbGetRecord+0x66>
    {
      return pRec;
   12246:	9b05      	ldr	r3, [sp, #20]
   12248:	e018      	b.n	1227c <smpDbGetRecord+0x98>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1224a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1224e:	3301      	adds	r3, #1
   12250:	f88d 3013 	strb.w	r3, [sp, #19]
   12254:	9b05      	ldr	r3, [sp, #20]
   12256:	3318      	adds	r3, #24
   12258:	9305      	str	r3, [sp, #20]
   1225a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1225e:	2b02      	cmp	r3, #2
   12260:	d9dd      	bls.n	1221e <smpDbGetRecord+0x3a>
    }
  }

  /* Device is not in the database, add the device. */
  pRec = smpDbAddDevice(pAddr, addrType);
   12262:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12266:	4619      	mov	r1, r3
   12268:	9803      	ldr	r0, [sp, #12]
   1226a:	f7ff ff85 	bl	12178 <smpDbAddDevice>
   1226e:	9005      	str	r0, [sp, #20]

  if (pRec == NULL)
   12270:	9b05      	ldr	r3, [sp, #20]
   12272:	2b00      	cmp	r3, #0
   12274:	d101      	bne.n	1227a <smpDbGetRecord+0x96>
  {
    SMP_TRACE_INFO0("smpDbGetRecord: common record");

    /* Database is full, use the common record. */
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
   12276:	4b04      	ldr	r3, [pc, #16]	; (12288 <smpDbGetRecord+0xa4>)
   12278:	9305      	str	r3, [sp, #20]
  }

  return pRec;
   1227a:	9b05      	ldr	r3, [sp, #20]
}
   1227c:	4618      	mov	r0, r3
   1227e:	b007      	add	sp, #28
   12280:	f85d fb04 	ldr.w	pc, [sp], #4
   12284:	10004264 	.word	0x10004264
   12288:	1000424c 	.word	0x1000424c

0001228c <SmpDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbInit(void)
{
   1228c:	b508      	push	{r3, lr}
  /* Stop active service timer. */
  if (smpDbCb.serviceTimer.isStarted == TRUE)
   1228e:	4b0c      	ldr	r3, [pc, #48]	; (122c0 <SmpDbInit+0x34>)
   12290:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
   12294:	2b01      	cmp	r3, #1
   12296:	d102      	bne.n	1229e <SmpDbInit+0x12>
  {
    WsfTimerStop(&smpDbCb.serviceTimer);
   12298:	480a      	ldr	r0, [pc, #40]	; (122c4 <SmpDbInit+0x38>)
   1229a:	f00d feeb 	bl	20074 <WsfTimerStop>
  }

  /* Reset control block. */
  memset(&smpDbCb, 0, sizeof(smpDbCb));
   1229e:	2258      	movs	r2, #88	; 0x58
   122a0:	2100      	movs	r1, #0
   122a2:	4807      	ldr	r0, [pc, #28]	; (122c0 <SmpDbInit+0x34>)
   122a4:	f013 fa0a 	bl	256bc <memset>

  /* Setup service timer. */
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
   122a8:	4b07      	ldr	r3, [pc, #28]	; (122c8 <SmpDbInit+0x3c>)
   122aa:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   122ae:	4b04      	ldr	r3, [pc, #16]	; (122c0 <SmpDbInit+0x34>)
   122b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
   122b4:	4b02      	ldr	r3, [pc, #8]	; (122c0 <SmpDbInit+0x34>)
   122b6:	221f      	movs	r2, #31
   122b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
   122bc:	bf00      	nop
   122be:	bd08      	pop	{r3, pc}
   122c0:	1000424c 	.word	0x1000424c
   122c4:	10004294 	.word	0x10004294
   122c8:	100042a4 	.word	0x100042a4

000122cc <SmpDbGetPairingDisabledTime>:
 *
 *  \return Time pairing is disabled (msec), or zero if pairing isn't disabled.
 */
/*************************************************************************************************/
uint32_t SmpDbGetPairingDisabledTime(dmConnId_t connId)
{
   122cc:	b500      	push	{lr}
   122ce:	b085      	sub	sp, #20
   122d0:	4603      	mov	r3, r0
   122d2:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   122d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   122da:	4618      	mov	r0, r3
   122dc:	f7ff ff82 	bl	121e4 <smpDbGetRecord>
   122e0:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO3("SmpDbGetPairingDisabledTime: connId: %d period: %d attemptMult: %d",
                  connId, pRec->lockMs, pRec->attemptMult);

  return pRec->lockMs;
   122e2:	9b03      	ldr	r3, [sp, #12]
   122e4:	68db      	ldr	r3, [r3, #12]
}
   122e6:	4618      	mov	r0, r3
   122e8:	b005      	add	sp, #20
   122ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000122f0 <SmpDbSetFailureCount>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbSetFailureCount(dmConnId_t connId, uint8_t count)
{
   122f0:	b500      	push	{lr}
   122f2:	b085      	sub	sp, #20
   122f4:	4603      	mov	r3, r0
   122f6:	460a      	mov	r2, r1
   122f8:	f88d 3007 	strb.w	r3, [sp, #7]
   122fc:	4613      	mov	r3, r2
   122fe:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   12302:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12306:	4618      	mov	r0, r3
   12308:	f7ff ff6c 	bl	121e4 <smpDbGetRecord>
   1230c:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO2("SmpDbSetFailureCount: connId: %d count: %d", connId, count);

  pRec->failCount = count;
   1230e:	9b03      	ldr	r3, [sp, #12]
   12310:	f89d 2006 	ldrb.w	r2, [sp, #6]
   12314:	71da      	strb	r2, [r3, #7]

  if (count != 0)
   12316:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1231a:	2b00      	cmp	r3, #0
   1231c:	d004      	beq.n	12328 <SmpDbSetFailureCount+0x38>
  {
    pRec->failCountToMs = pSmpCfg->maxAttemptTimeout;
   1231e:	4b04      	ldr	r3, [pc, #16]	; (12330 <SmpDbSetFailureCount+0x40>)
   12320:	681b      	ldr	r3, [r3, #0]
   12322:	68da      	ldr	r2, [r3, #12]
   12324:	9b03      	ldr	r3, [sp, #12]
   12326:	615a      	str	r2, [r3, #20]
  }
}
   12328:	bf00      	nop
   1232a:	b005      	add	sp, #20
   1232c:	f85d fb04 	ldr.w	pc, [sp], #4
   12330:	10002bb4 	.word	0x10002bb4

00012334 <SmpDbGetFailureCount>:
 *
 *  \return The failure count.
 */
/*************************************************************************************************/
uint8_t SmpDbGetFailureCount(dmConnId_t connId)
{
   12334:	b500      	push	{lr}
   12336:	b085      	sub	sp, #20
   12338:	4603      	mov	r3, r0
   1233a:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1233e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12342:	4618      	mov	r0, r3
   12344:	f7ff ff4e 	bl	121e4 <smpDbGetRecord>
   12348:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO2("SmpDbGetFailureCount: connId: %d count: %d", connId, pRec->failCount);

  return pRec->failCount;
   1234a:	9b03      	ldr	r3, [sp, #12]
   1234c:	79db      	ldrb	r3, [r3, #7]
}
   1234e:	4618      	mov	r0, r3
   12350:	b005      	add	sp, #20
   12352:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00012358 <SmpDbMaxAttemptReached>:
 *
 *  \return Time until device can retry pairing.
 */
/*************************************************************************************************/
uint32_t SmpDbMaxAttemptReached(dmConnId_t connId)
{
   12358:	b500      	push	{lr}
   1235a:	b085      	sub	sp, #20
   1235c:	4603      	mov	r3, r0
   1235e:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   12362:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12366:	4618      	mov	r0, r3
   12368:	f7ff ff3c 	bl	121e4 <smpDbGetRecord>
   1236c:	9002      	str	r0, [sp, #8]
  uint16_t multiplier;

  SMP_TRACE_INFO1("SmpDbMaxAttemptReached: connId: %d", connId);

  if (pRec->attemptMult == 0)
   1236e:	9b02      	ldr	r3, [sp, #8]
   12370:	891b      	ldrh	r3, [r3, #8]
   12372:	2b00      	cmp	r3, #0
   12374:	d103      	bne.n	1237e <SmpDbMaxAttemptReached+0x26>
  {
    /* Due to a disconnection, a record exists but the attempt multipier hasn't been set. */
    multiplier = 1;
   12376:	2301      	movs	r3, #1
   12378:	f8ad 300e 	strh.w	r3, [sp, #14]
   1237c:	e008      	b.n	12390 <SmpDbMaxAttemptReached+0x38>
  }
  else
  {
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   1237e:	9b02      	ldr	r3, [sp, #8]
   12380:	891a      	ldrh	r2, [r3, #8]
   12382:	4b19      	ldr	r3, [pc, #100]	; (123e8 <SmpDbMaxAttemptReached+0x90>)
   12384:	681b      	ldr	r3, [r3, #0]
   12386:	8a9b      	ldrh	r3, [r3, #20]
   12388:	fb12 f303 	smulbb	r3, r2, r3
   1238c:	f8ad 300e 	strh.w	r3, [sp, #14]
  }

  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   12390:	4b15      	ldr	r3, [pc, #84]	; (123e8 <SmpDbMaxAttemptReached+0x90>)
   12392:	681b      	ldr	r3, [r3, #0]
   12394:	681b      	ldr	r3, [r3, #0]
   12396:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1239a:	fb03 f202 	mul.w	r2, r3, r2
   1239e:	4b12      	ldr	r3, [pc, #72]	; (123e8 <SmpDbMaxAttemptReached+0x90>)
   123a0:	681b      	ldr	r3, [r3, #0]
   123a2:	68db      	ldr	r3, [r3, #12]
   123a4:	429a      	cmp	r2, r3
   123a6:	d80d      	bhi.n	123c4 <SmpDbMaxAttemptReached+0x6c>
  {
    pRec->lockMs = pSmpCfg->attemptTimeout * multiplier;
   123a8:	4b0f      	ldr	r3, [pc, #60]	; (123e8 <SmpDbMaxAttemptReached+0x90>)
   123aa:	681b      	ldr	r3, [r3, #0]
   123ac:	681b      	ldr	r3, [r3, #0]
   123ae:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   123b2:	fb03 f202 	mul.w	r2, r3, r2
   123b6:	9b02      	ldr	r3, [sp, #8]
   123b8:	60da      	str	r2, [r3, #12]
    pRec->attemptMult = multiplier;
   123ba:	9b02      	ldr	r3, [sp, #8]
   123bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   123c0:	811a      	strh	r2, [r3, #8]
   123c2:	e004      	b.n	123ce <SmpDbMaxAttemptReached+0x76>
  }
  else
  {
    /* Exponential increase is greater than max timeout. */
    pRec->lockMs = pSmpCfg->maxAttemptTimeout;
   123c4:	4b08      	ldr	r3, [pc, #32]	; (123e8 <SmpDbMaxAttemptReached+0x90>)
   123c6:	681b      	ldr	r3, [r3, #0]
   123c8:	68da      	ldr	r2, [r3, #12]
   123ca:	9b02      	ldr	r3, [sp, #8]
   123cc:	60da      	str	r2, [r3, #12]
  }

  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   123ce:	4b06      	ldr	r3, [pc, #24]	; (123e8 <SmpDbMaxAttemptReached+0x90>)
   123d0:	681b      	ldr	r3, [r3, #0]
   123d2:	691a      	ldr	r2, [r3, #16]
   123d4:	9b02      	ldr	r3, [sp, #8]
   123d6:	611a      	str	r2, [r3, #16]

  /* Ensure the service timer is running. */
  smpDbStartServiceTimer();
   123d8:	f7ff fea4 	bl	12124 <smpDbStartServiceTimer>

  return pRec->lockMs;
   123dc:	9b02      	ldr	r3, [sp, #8]
   123de:	68db      	ldr	r3, [r3, #12]
}
   123e0:	4618      	mov	r0, r3
   123e2:	b005      	add	sp, #20
   123e4:	f85d fb04 	ldr.w	pc, [sp], #4
   123e8:	10002bb4 	.word	0x10002bb4

000123ec <SmpDbPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbPairingFailed(dmConnId_t connId)
{
   123ec:	b500      	push	{lr}
   123ee:	b085      	sub	sp, #20
   123f0:	4603      	mov	r3, r0
   123f2:	f88d 3007 	strb.w	r3, [sp, #7]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   123f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   123fa:	4618      	mov	r0, r3
   123fc:	f7ff fef2 	bl	121e4 <smpDbGetRecord>
   12400:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);

  /* Reset exponent decrement timer. */
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   12402:	4b04      	ldr	r3, [pc, #16]	; (12414 <SmpDbPairingFailed+0x28>)
   12404:	681b      	ldr	r3, [r3, #0]
   12406:	691a      	ldr	r2, [r3, #16]
   12408:	9b03      	ldr	r3, [sp, #12]
   1240a:	611a      	str	r2, [r3, #16]
}
   1240c:	bf00      	nop
   1240e:	b005      	add	sp, #20
   12410:	f85d fb04 	ldr.w	pc, [sp], #4
   12414:	10002bb4 	.word	0x10002bb4

00012418 <SmpDbService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbService(void)
{
   12418:	b500      	push	{lr}
   1241a:	b083      	sub	sp, #12
  uint8_t i;
  smpDbDevice_t *pRec = smpDbCb.db;
   1241c:	4b31      	ldr	r3, [pc, #196]	; (124e4 <SmpDbService+0xcc>)
   1241e:	9300      	str	r3, [sp, #0]

  /* Service device specific records. */
  for (i = 0; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   12420:	2300      	movs	r3, #0
   12422:	f88d 3007 	strb.w	r3, [sp, #7]
   12426:	e054      	b.n	124d2 <SmpDbService+0xba>
  {
    if (smpDbRecordInUse(pRec))
   12428:	9800      	ldr	r0, [sp, #0]
   1242a:	f7ff fe8d 	bl	12148 <smpDbRecordInUse>
   1242e:	4603      	mov	r3, r0
   12430:	2b00      	cmp	r3, #0
   12432:	d046      	beq.n	124c2 <SmpDbService+0xaa>
    {
      /* Decrement all time periods. */
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   12434:	9b00      	ldr	r3, [sp, #0]
   12436:	691b      	ldr	r3, [r3, #16]
   12438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1243c:	bf38      	it	cc
   1243e:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   12442:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   12446:	9b00      	ldr	r3, [sp, #0]
   12448:	611a      	str	r2, [r3, #16]
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1244a:	9b00      	ldr	r3, [sp, #0]
   1244c:	68db      	ldr	r3, [r3, #12]
   1244e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   12452:	bf38      	it	cc
   12454:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   12458:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   1245c:	9b00      	ldr	r3, [sp, #0]
   1245e:	60da      	str	r2, [r3, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   12460:	9b00      	ldr	r3, [sp, #0]
   12462:	695b      	ldr	r3, [r3, #20]
   12464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   12468:	bf38      	it	cc
   1246a:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
   1246e:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   12472:	9b00      	ldr	r3, [sp, #0]
   12474:	615a      	str	r2, [r3, #20]

      /* Process expDecrementMs timeout. */
      if (pRec->expDecrementMs == 0)
   12476:	9b00      	ldr	r3, [sp, #0]
   12478:	691b      	ldr	r3, [r3, #16]
   1247a:	2b00      	cmp	r3, #0
   1247c:	d112      	bne.n	124a4 <SmpDbService+0x8c>
      {
        /* Exponential decrease of multiplier. */
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1247e:	9b00      	ldr	r3, [sp, #0]
   12480:	891a      	ldrh	r2, [r3, #8]
   12482:	4b19      	ldr	r3, [pc, #100]	; (124e8 <SmpDbService+0xd0>)
   12484:	681b      	ldr	r3, [r3, #0]
   12486:	8a9b      	ldrh	r3, [r3, #20]
   12488:	fbb2 f3f3 	udiv	r3, r2, r3
   1248c:	b29a      	uxth	r2, r3
   1248e:	9b00      	ldr	r3, [sp, #0]
   12490:	811a      	strh	r2, [r3, #8]

        if (pRec->attemptMult)
   12492:	9b00      	ldr	r3, [sp, #0]
   12494:	891b      	ldrh	r3, [r3, #8]
   12496:	2b00      	cmp	r3, #0
   12498:	d004      	beq.n	124a4 <SmpDbService+0x8c>
        {
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1249a:	4b13      	ldr	r3, [pc, #76]	; (124e8 <SmpDbService+0xd0>)
   1249c:	681b      	ldr	r3, [r3, #0]
   1249e:	691a      	ldr	r2, [r3, #16]
   124a0:	9b00      	ldr	r3, [sp, #0]
   124a2:	611a      	str	r2, [r3, #16]
        }
      }

      /* Process failCountToMs timeout. */
      if (pRec->failCountToMs == 0)
   124a4:	9b00      	ldr	r3, [sp, #0]
   124a6:	695b      	ldr	r3, [r3, #20]
   124a8:	2b00      	cmp	r3, #0
   124aa:	d102      	bne.n	124b2 <SmpDbService+0x9a>
      {
        pRec->failCount = 0;
   124ac:	9b00      	ldr	r3, [sp, #0]
   124ae:	2200      	movs	r2, #0
   124b0:	71da      	strb	r2, [r3, #7]
      }

      /* If the record is in use, ensure the service timer is running. */
      if (smpDbRecordInUse(pRec))
   124b2:	9800      	ldr	r0, [sp, #0]
   124b4:	f7ff fe48 	bl	12148 <smpDbRecordInUse>
   124b8:	4603      	mov	r3, r0
   124ba:	2b00      	cmp	r3, #0
   124bc:	d001      	beq.n	124c2 <SmpDbService+0xaa>
      {
        smpDbStartServiceTimer();
   124be:	f7ff fe31 	bl	12124 <smpDbStartServiceTimer>
  for (i = 0; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   124c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   124c6:	3301      	adds	r3, #1
   124c8:	f88d 3007 	strb.w	r3, [sp, #7]
   124cc:	9b00      	ldr	r3, [sp, #0]
   124ce:	3318      	adds	r3, #24
   124d0:	9300      	str	r3, [sp, #0]
   124d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   124d6:	2b02      	cmp	r3, #2
   124d8:	d9a6      	bls.n	12428 <SmpDbService+0x10>
      }
    }
  }
}
   124da:	bf00      	nop
   124dc:	bf00      	nop
   124de:	b003      	add	sp, #12
   124e0:	f85d fb04 	ldr.w	pc, [sp], #4
   124e4:	1000424c 	.word	0x1000424c
   124e8:	10002bb4 	.word	0x10002bb4

000124ec <smpL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   124ec:	b500      	push	{lr}
   124ee:	b08b      	sub	sp, #44	; 0x2c
   124f0:	4603      	mov	r3, r0
   124f2:	9200      	str	r2, [sp, #0]
   124f4:	f8ad 3006 	strh.w	r3, [sp, #6]
   124f8:	460b      	mov	r3, r1
   124fa:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t       cmdCode;
  smpCcb_t      *pCcb;

  /* get connection control block for this handle, ignore packet if not found */
  if ((pCcb = smpCcbByHandle(handle)) == NULL)
   124fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12502:	4618      	mov	r0, r3
   12504:	f000 f95a 	bl	127bc <smpCcbByHandle>
   12508:	9009      	str	r0, [sp, #36]	; 0x24
   1250a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1250c:	2b00      	cmp	r3, #0
   1250e:	d03c      	beq.n	1258a <smpL2cDataCback+0x9e>
  {
    return;
  }

  /* parse command code */
  cmdCode = *(pPacket + L2C_PAYLOAD_START);
   12510:	9b00      	ldr	r3, [sp, #0]
   12512:	7a1b      	ldrb	r3, [r3, #8]
   12514:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

  /* verify length and that command is the expected command or pairing failed */
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   12518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1251c:	2b00      	cmp	r3, #0
   1251e:	d035      	beq.n	1258c <smpL2cDataCback+0xa0>
   12520:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12524:	2b0e      	cmp	r3, #14
   12526:	d831      	bhi.n	1258c <smpL2cDataCback+0xa0>
      (len == smpPktLenTbl[cmdCode]) &&
   12528:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1252c:	4a19      	ldr	r2, [pc, #100]	; (12594 <smpL2cDataCback+0xa8>)
   1252e:	5cd3      	ldrb	r3, [r2, r3]
   12530:	b29b      	uxth	r3, r3
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   12532:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   12536:	429a      	cmp	r2, r3
   12538:	d128      	bne.n	1258c <smpL2cDataCback+0xa0>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   1253a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1253c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
      (len == smpPktLenTbl[cmdCode]) &&
   12540:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   12544:	429a      	cmp	r2, r3
   12546:	d003      	beq.n	12550 <smpL2cDataCback+0x64>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   12548:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1254c:	2b05      	cmp	r3, #5
   1254e:	d11d      	bne.n	1258c <smpL2cDataCback+0xa0>
  {
    smpMsg_t msg;

    /* send to state machine */
    if (cmdCode == SMP_CMD_PAIR_FAIL)
   12550:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12554:	2b05      	cmp	r3, #5
   12556:	d107      	bne.n	12568 <smpL2cDataCback+0x7c>
    {
      msg.hdr.event = SMP_MSG_CMD_PAIRING_FAILED;
   12558:	2307      	movs	r3, #7
   1255a:	f88d 300a 	strb.w	r3, [sp, #10]
      msg.hdr.status = *(pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
   1255e:	9b00      	ldr	r3, [sp, #0]
   12560:	7a5b      	ldrb	r3, [r3, #9]
   12562:	f88d 300b 	strb.w	r3, [sp, #11]
   12566:	e002      	b.n	1256e <smpL2cDataCback+0x82>
    }
    else
    {
      msg.hdr.event = SMP_MSG_CMD_PKT;
   12568:	2306      	movs	r3, #6
   1256a:	f88d 300a 	strb.w	r3, [sp, #10]
    }

    msg.hdr.param = pCcb->connId;
   1256e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12574:	b29b      	uxth	r3, r3
   12576:	f8ad 3008 	strh.w	r3, [sp, #8]
    msg.data.pPacket = pPacket;
   1257a:	9b00      	ldr	r3, [sp, #0]
   1257c:	9303      	str	r3, [sp, #12]
    smpSmExecute(pCcb, &msg);
   1257e:	ab02      	add	r3, sp, #8
   12580:	4619      	mov	r1, r3
   12582:	9809      	ldr	r0, [sp, #36]	; 0x24
   12584:	f7ff fd82 	bl	1208c <smpSmExecute>
   12588:	e000      	b.n	1258c <smpL2cDataCback+0xa0>
    return;
   1258a:	bf00      	nop
  /* else ignore it */
  else
  {
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
  }
}
   1258c:	b00b      	add	sp, #44	; 0x2c
   1258e:	f85d fb04 	ldr.w	pc, [sp], #4
   12592:	bf00      	nop
   12594:	000283a8 	.word	0x000283a8

00012598 <smpL2cCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
   12598:	b500      	push	{lr}
   1259a:	b085      	sub	sp, #20
   1259c:	9001      	str	r0, [sp, #4]
  smpCcb_t      *pCcb;
  uint8_t       *pPkt;

  /* get connection control block */
  pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);
   1259e:	9b01      	ldr	r3, [sp, #4]
   125a0:	881b      	ldrh	r3, [r3, #0]
   125a2:	b2db      	uxtb	r3, r3
   125a4:	4618      	mov	r0, r3
   125a6:	f000 f92b 	bl	12800 <smpCcbByConnId>
   125aa:	9003      	str	r0, [sp, #12]

  /* verify connection is open */
  if (pCcb->connId != DM_CONN_ID_NONE)
   125ac:	9b03      	ldr	r3, [sp, #12]
   125ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   125b2:	2b00      	cmp	r3, #0
   125b4:	d02a      	beq.n	1260c <smpL2cCtrlCback+0x74>
  {
    /* set flow */
    pCcb->flowDisabled = (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND);
   125b6:	9b01      	ldr	r3, [sp, #4]
   125b8:	789b      	ldrb	r3, [r3, #2]
   125ba:	2b01      	cmp	r3, #1
   125bc:	bf0c      	ite	eq
   125be:	2301      	moveq	r3, #1
   125c0:	2300      	movne	r3, #0
   125c2:	b2db      	uxtb	r3, r3
   125c4:	461a      	mov	r2, r3
   125c6:	9b03      	ldr	r3, [sp, #12]
   125c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* if data flow enabled */
    if (!pCcb->flowDisabled)
   125cc:	9b03      	ldr	r3, [sp, #12]
   125ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   125d2:	2b00      	cmp	r3, #0
   125d4:	d11a      	bne.n	1260c <smpL2cCtrlCback+0x74>
    {
      /* if packet in qeueue */
      if (pCcb->pQueued != NULL)
   125d6:	9b03      	ldr	r3, [sp, #12]
   125d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   125da:	2b00      	cmp	r3, #0
   125dc:	d009      	beq.n	125f2 <smpL2cCtrlCback+0x5a>
      {
        /* send queued packet */
        pPkt = pCcb->pQueued;
   125de:	9b03      	ldr	r3, [sp, #12]
   125e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   125e2:	9302      	str	r3, [sp, #8]
        pCcb->pQueued = NULL;
   125e4:	9b03      	ldr	r3, [sp, #12]
   125e6:	2200      	movs	r2, #0
   125e8:	635a      	str	r2, [r3, #52]	; 0x34
        smpSendPkt(pCcb, pPkt);
   125ea:	9902      	ldr	r1, [sp, #8]
   125ec:	9803      	ldr	r0, [sp, #12]
   125ee:	f000 fb71 	bl	12cd4 <smpSendPkt>
      }

      /* if SMP state not idle */
      if (!smpStateIdle(pCcb))
   125f2:	9803      	ldr	r0, [sp, #12]
   125f4:	f000 fb98 	bl	12d28 <smpStateIdle>
   125f8:	4603      	mov	r3, r0
   125fa:	2b00      	cmp	r3, #0
   125fc:	d106      	bne.n	1260c <smpL2cCtrlCback+0x74>
      {
        /* trigger send of next key */
        pMsg->event = SMP_MSG_INT_SEND_NEXT_KEY;
   125fe:	9b01      	ldr	r3, [sp, #4]
   12600:	220c      	movs	r2, #12
   12602:	709a      	strb	r2, [r3, #2]
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   12604:	9901      	ldr	r1, [sp, #4]
   12606:	9803      	ldr	r0, [sp, #12]
   12608:	f7ff fd40 	bl	1208c <smpSmExecute>
      }
    }
  }
}
   1260c:	bf00      	nop
   1260e:	b005      	add	sp, #20
   12610:	f85d fb04 	ldr.w	pc, [sp], #4

00012614 <smpResumeAttemptsState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpResumeAttemptsState(dmConnId_t connId)
{
   12614:	b500      	push	{lr}
   12616:	b085      	sub	sp, #20
   12618:	4603      	mov	r3, r0
   1261a:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   1261e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12622:	4618      	mov	r0, r3
   12624:	f000 f8ec 	bl	12800 <smpCcbByConnId>
   12628:	9003      	str	r0, [sp, #12]
  uint32_t timeMs = SmpDbGetPairingDisabledTime(connId);
   1262a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1262e:	4618      	mov	r0, r3
   12630:	f7ff fe4c 	bl	122cc <SmpDbGetPairingDisabledTime>
   12634:	9002      	str	r0, [sp, #8]

  if (timeMs)
   12636:	9b02      	ldr	r3, [sp, #8]
   12638:	2b00      	cmp	r3, #0
   1263a:	d02a      	beq.n	12692 <smpResumeAttemptsState+0x7e>
  {
    if (smpCb.lescSupported)
   1263c:	4b17      	ldr	r3, [pc, #92]	; (1269c <smpResumeAttemptsState+0x88>)
   1263e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   12642:	2b00      	cmp	r3, #0
   12644:	d00e      	beq.n	12664 <smpResumeAttemptsState+0x50>
    {
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
   12646:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1264a:	4618      	mov	r0, r3
   1264c:	f003 fa40 	bl	15ad0 <DmConnRole>
   12650:	4603      	mov	r3, r0
   12652:	2b01      	cmp	r3, #1
   12654:	d101      	bne.n	1265a <smpResumeAttemptsState+0x46>
   12656:	2226      	movs	r2, #38	; 0x26
   12658:	e000      	b.n	1265c <smpResumeAttemptsState+0x48>
   1265a:	2224      	movs	r2, #36	; 0x24
   1265c:	9b03      	ldr	r3, [sp, #12]
   1265e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   12662:	e00d      	b.n	12680 <smpResumeAttemptsState+0x6c>
    }
    else
    {
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SM_ST_ATTEMPTS : SMPI_SM_ST_ATTEMPTS;
   12664:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12668:	4618      	mov	r0, r3
   1266a:	f003 fa31 	bl	15ad0 <DmConnRole>
   1266e:	4603      	mov	r3, r0
   12670:	2b01      	cmp	r3, #1
   12672:	d101      	bne.n	12678 <smpResumeAttemptsState+0x64>
   12674:	220d      	movs	r2, #13
   12676:	e000      	b.n	1267a <smpResumeAttemptsState+0x66>
   12678:	220c      	movs	r2, #12
   1267a:	9b03      	ldr	r3, [sp, #12]
   1267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    /* Start smp timer indicating the time to prevent pairing in the attempts state */
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   12680:	9b03      	ldr	r3, [sp, #12]
   12682:	2210      	movs	r2, #16
   12684:	769a      	strb	r2, [r3, #26]
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
   12686:	9b03      	ldr	r3, [sp, #12]
   12688:	3310      	adds	r3, #16
   1268a:	9902      	ldr	r1, [sp, #8]
   1268c:	4618      	mov	r0, r3
   1268e:	f00d fcdd 	bl	2004c <WsfTimerStartMs>
  }
}
   12692:	bf00      	nop
   12694:	b005      	add	sp, #20
   12696:	f85d fb04 	ldr.w	pc, [sp], #4
   1269a:	bf00      	nop
   1269c:	100042a4 	.word	0x100042a4

000126a0 <smpDmConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpDmConnCback(dmEvt_t *pDmEvt)
{
   126a0:	b500      	push	{lr}
   126a2:	b085      	sub	sp, #20
   126a4:	9001      	str	r0, [sp, #4]
  smpCcb_t      *pCcb;
  wsfMsgHdr_t   hdr;

  pCcb = smpCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   126a6:	9b01      	ldr	r3, [sp, #4]
   126a8:	881b      	ldrh	r3, [r3, #0]
   126aa:	b2db      	uxtb	r3, r3
   126ac:	4618      	mov	r0, r3
   126ae:	f000 f8a7 	bl	12800 <smpCcbByConnId>
   126b2:	9003      	str	r0, [sp, #12]

  /* if new connection created */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   126b4:	9b01      	ldr	r3, [sp, #4]
   126b6:	789b      	ldrb	r3, [r3, #2]
   126b8:	2b27      	cmp	r3, #39	; 0x27
   126ba:	d145      	bne.n	12748 <smpDmConnCback+0xa8>
  {
    /* set up state machine for master or slave */
    if (DmConnRole((dmConnId_t) pDmEvt->hdr.param) == DM_ROLE_MASTER)
   126bc:	9b01      	ldr	r3, [sp, #4]
   126be:	881b      	ldrh	r3, [r3, #0]
   126c0:	b2db      	uxtb	r3, r3
   126c2:	4618      	mov	r0, r3
   126c4:	f003 fa04 	bl	15ad0 <DmConnRole>
   126c8:	4603      	mov	r3, r0
   126ca:	2b00      	cmp	r3, #0
   126cc:	d108      	bne.n	126e0 <smpDmConnCback+0x40>
    {
      pCcb->initiator = TRUE;
   126ce:	9b03      	ldr	r3, [sp, #12]
   126d0:	2201      	movs	r2, #1
   126d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      pCcb->nextCmdCode = SMP_CMD_SECURITY_REQ;
   126d6:	9b03      	ldr	r3, [sp, #12]
   126d8:	220b      	movs	r2, #11
   126da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   126de:	e007      	b.n	126f0 <smpDmConnCback+0x50>
    }
    else
    {
      pCcb->initiator = FALSE;
   126e0:	9b03      	ldr	r3, [sp, #12]
   126e2:	2200      	movs	r2, #0
   126e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
   126e8:	9b03      	ldr	r3, [sp, #12]
   126ea:	2201      	movs	r2, #1
   126ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    }

    /* initialize control block */
    pCcb->handle = pDmEvt->connOpen.handle;
   126f0:	9b01      	ldr	r3, [sp, #4]
   126f2:	88da      	ldrh	r2, [r3, #6]
   126f4:	9b03      	ldr	r3, [sp, #12]
   126f6:	871a      	strh	r2, [r3, #56]	; 0x38
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   126f8:	9b01      	ldr	r3, [sp, #4]
   126fa:	881b      	ldrh	r3, [r3, #0]
   126fc:	b2da      	uxtb	r2, r3
   126fe:	9b03      	ldr	r3, [sp, #12]
   12700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    pCcb->secReq = FALSE;
   12704:	9b03      	ldr	r3, [sp, #12]
   12706:	2200      	movs	r2, #0
   12708:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    pCcb->flowDisabled = FALSE;
   1270c:	9b03      	ldr	r3, [sp, #12]
   1270e:	2200      	movs	r2, #0
   12710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
   12714:	9b01      	ldr	r3, [sp, #4]
   12716:	881b      	ldrh	r3, [r3, #0]
   12718:	b2db      	uxtb	r3, r3
   1271a:	4618      	mov	r0, r3
   1271c:	f7ff fe0a 	bl	12334 <SmpDbGetFailureCount>
   12720:	4603      	mov	r3, r0
   12722:	461a      	mov	r2, r3
   12724:	9b03      	ldr	r3, [sp, #12]
   12726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    pCcb->lastSentKey = 0;
   1272a:	9b03      	ldr	r3, [sp, #12]
   1272c:	2200      	movs	r2, #0
   1272e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    pCcb->state = 0;
   12732:	9b03      	ldr	r3, [sp, #12]
   12734:	2200      	movs	r2, #0
   12736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Resume the attempts state if necessary */
    smpResumeAttemptsState((dmConnId_t) pDmEvt->hdr.param);
   1273a:	9b01      	ldr	r3, [sp, #4]
   1273c:	881b      	ldrh	r3, [r3, #0]
   1273e:	b2db      	uxtb	r3, r3
   12740:	4618      	mov	r0, r3
   12742:	f7ff ff67 	bl	12614 <smpResumeAttemptsState>
        WsfMsgFree(pCcb->pQueued);
        pCcb->pQueued = NULL;
      }
    }
  }
}
   12746:	e034      	b.n	127b2 <smpDmConnCback+0x112>
  else if (pCcb->connId != DM_CONN_ID_NONE)
   12748:	9b03      	ldr	r3, [sp, #12]
   1274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1274e:	2b00      	cmp	r3, #0
   12750:	d02f      	beq.n	127b2 <smpDmConnCback+0x112>
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   12752:	9b01      	ldr	r3, [sp, #4]
   12754:	789b      	ldrb	r3, [r3, #2]
   12756:	2b28      	cmp	r3, #40	; 0x28
   12758:	d12b      	bne.n	127b2 <smpDmConnCback+0x112>
      SmpDbSetFailureCount((dmConnId_t) pDmEvt->hdr.param, pCcb->attempts);
   1275a:	9b01      	ldr	r3, [sp, #4]
   1275c:	881b      	ldrh	r3, [r3, #0]
   1275e:	b2da      	uxtb	r2, r3
   12760:	9b03      	ldr	r3, [sp, #12]
   12762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   12766:	4619      	mov	r1, r3
   12768:	4610      	mov	r0, r2
   1276a:	f7ff fdc1 	bl	122f0 <SmpDbSetFailureCount>
      hdr.param = pDmEvt->hdr.param;
   1276e:	9b01      	ldr	r3, [sp, #4]
   12770:	881b      	ldrh	r3, [r3, #0]
   12772:	f8ad 3008 	strh.w	r3, [sp, #8]
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
   12776:	230a      	movs	r3, #10
   12778:	f88d 300a 	strb.w	r3, [sp, #10]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   1277c:	9b01      	ldr	r3, [sp, #4]
   1277e:	7a1b      	ldrb	r3, [r3, #8]
   12780:	3320      	adds	r3, #32
   12782:	b2db      	uxtb	r3, r3
   12784:	f88d 300b 	strb.w	r3, [sp, #11]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12788:	ab02      	add	r3, sp, #8
   1278a:	4619      	mov	r1, r3
   1278c:	9803      	ldr	r0, [sp, #12]
   1278e:	f7ff fc7d 	bl	1208c <smpSmExecute>
      pCcb->connId = DM_CONN_ID_NONE;
   12792:	9b03      	ldr	r3, [sp, #12]
   12794:	2200      	movs	r2, #0
   12796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (pCcb->pQueued != NULL)
   1279a:	9b03      	ldr	r3, [sp, #12]
   1279c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1279e:	2b00      	cmp	r3, #0
   127a0:	d007      	beq.n	127b2 <smpDmConnCback+0x112>
        WsfMsgFree(pCcb->pQueued);
   127a2:	9b03      	ldr	r3, [sp, #12]
   127a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   127a6:	4618      	mov	r0, r3
   127a8:	f00d f8bc 	bl	1f924 <WsfMsgFree>
        pCcb->pQueued = NULL;
   127ac:	9b03      	ldr	r3, [sp, #12]
   127ae:	2200      	movs	r2, #0
   127b0:	635a      	str	r2, [r3, #52]	; 0x34
}
   127b2:	bf00      	nop
   127b4:	b005      	add	sp, #20
   127b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000127bc <smpCcbByHandle>:
 *
 *  \return Pointer to connection control block or NULL if not found.
 */
/*************************************************************************************************/
smpCcb_t *smpCcbByHandle(uint16_t handle)
{
   127bc:	b500      	push	{lr}
   127be:	b085      	sub	sp, #20
   127c0:	4603      	mov	r3, r0
   127c2:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   127c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   127ca:	4618      	mov	r0, r3
   127cc:	f003 f83e 	bl	1584c <DmConnIdByHandle>
   127d0:	4603      	mov	r3, r0
   127d2:	f88d 300f 	strb.w	r3, [sp, #15]
   127d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   127da:	2b00      	cmp	r3, #0
   127dc:	d009      	beq.n	127f2 <smpCcbByHandle+0x36>
  {
    return &smpCb.ccb[connId - 1];
   127de:	f89d 300f 	ldrb.w	r3, [sp, #15]
   127e2:	1e5a      	subs	r2, r3, #1
   127e4:	4613      	mov	r3, r2
   127e6:	00db      	lsls	r3, r3, #3
   127e8:	4413      	add	r3, r2
   127ea:	00db      	lsls	r3, r3, #3
   127ec:	4a03      	ldr	r2, [pc, #12]	; (127fc <smpCcbByHandle+0x40>)
   127ee:	4413      	add	r3, r2
   127f0:	e000      	b.n	127f4 <smpCcbByHandle+0x38>
  }

  return NULL;
   127f2:	2300      	movs	r3, #0
}
   127f4:	4618      	mov	r0, r3
   127f6:	b005      	add	sp, #20
   127f8:	f85d fb04 	ldr.w	pc, [sp], #4
   127fc:	100042a4 	.word	0x100042a4

00012800 <smpCcbByConnId>:
 *
 *  \return Pointer to connection control block.
 */
/*************************************************************************************************/
smpCcb_t *smpCcbByConnId(dmConnId_t connId)
{
   12800:	b082      	sub	sp, #8
   12802:	4603      	mov	r3, r0
   12804:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &smpCb.ccb[connId - 1];
   12808:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1280c:	1e5a      	subs	r2, r3, #1
   1280e:	4613      	mov	r3, r2
   12810:	00db      	lsls	r3, r3, #3
   12812:	4413      	add	r3, r2
   12814:	00db      	lsls	r3, r3, #3
   12816:	4a02      	ldr	r2, [pc, #8]	; (12820 <smpCcbByConnId+0x20>)
   12818:	4413      	add	r3, r2
}
   1281a:	4618      	mov	r0, r3
   1281c:	b002      	add	sp, #8
   1281e:	4770      	bx	lr
   12820:	100042a4 	.word	0x100042a4

00012824 <smpCalcC1Part1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCalcC1Part1(smpCcb_t *pCcb, uint8_t *pKey, uint8_t *pRand)
{
   12824:	b500      	push	{lr}
   12826:	b08f      	sub	sp, #60	; 0x3c
   12828:	9005      	str	r0, [sp, #20]
   1282a:	9104      	str	r1, [sp, #16]
   1282c:	9203      	str	r2, [sp, #12]
  uint8_t   i;
  uint8_t   iAddrType;
  uint8_t   rAddrType;

  /* set initiator/responder address types */
  if (pCcb->initiator)
   1282e:	9b05      	ldr	r3, [sp, #20]
   12830:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   12834:	2b00      	cmp	r3, #0
   12836:	d034      	beq.n	128a2 <smpCalcC1Part1+0x7e>
  {
    /* if local device's using RPA */
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   12838:	9b05      	ldr	r3, [sp, #20]
   1283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1283e:	4618      	mov	r0, r3
   12840:	f003 f8a4 	bl	1598c <DmConnLocalRpa>
   12844:	4603      	mov	r3, r0
   12846:	4618      	mov	r0, r3
   12848:	f7f9 fd22 	bl	c290 <BdaIsZeros>
   1284c:	4603      	mov	r3, r0
   1284e:	2b00      	cmp	r3, #0
   12850:	d103      	bne.n	1285a <smpCalcC1Part1+0x36>
    {
      iAddrType = DM_ADDR_RANDOM;
   12852:	2301      	movs	r3, #1
   12854:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   12858:	e008      	b.n	1286c <smpCalcC1Part1+0x48>
    }
    else
    {
      iAddrType = DmConnLocalAddrType(pCcb->connId);
   1285a:	9b05      	ldr	r3, [sp, #20]
   1285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12860:	4618      	mov	r0, r3
   12862:	f003 f857 	bl	15914 <DmConnLocalAddrType>
   12866:	4603      	mov	r3, r0
   12868:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    /* if peer device's using RPA */
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   1286c:	9b05      	ldr	r3, [sp, #20]
   1286e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12872:	4618      	mov	r0, r3
   12874:	f003 f876 	bl	15964 <DmConnPeerRpa>
   12878:	4603      	mov	r3, r0
   1287a:	4618      	mov	r0, r3
   1287c:	f7f9 fd08 	bl	c290 <BdaIsZeros>
   12880:	4603      	mov	r3, r0
   12882:	2b00      	cmp	r3, #0
   12884:	d103      	bne.n	1288e <smpCalcC1Part1+0x6a>
    {
      rAddrType = DM_ADDR_RANDOM;
   12886:	2301      	movs	r3, #1
   12888:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   1288c:	e03d      	b.n	1290a <smpCalcC1Part1+0xe6>
    }
    else
    {
      rAddrType = DmConnPeerAddrType(pCcb->connId);
   1288e:	9b05      	ldr	r3, [sp, #20]
   12890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12894:	4618      	mov	r0, r3
   12896:	f003 f817 	bl	158c8 <DmConnPeerAddrType>
   1289a:	4603      	mov	r3, r0
   1289c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   128a0:	e033      	b.n	1290a <smpCalcC1Part1+0xe6>
    }
  }
  else
  {
    /* if peer device's using RPA */
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   128a2:	9b05      	ldr	r3, [sp, #20]
   128a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   128a8:	4618      	mov	r0, r3
   128aa:	f003 f85b 	bl	15964 <DmConnPeerRpa>
   128ae:	4603      	mov	r3, r0
   128b0:	4618      	mov	r0, r3
   128b2:	f7f9 fced 	bl	c290 <BdaIsZeros>
   128b6:	4603      	mov	r3, r0
   128b8:	2b00      	cmp	r3, #0
   128ba:	d103      	bne.n	128c4 <smpCalcC1Part1+0xa0>
    {
      iAddrType = DM_ADDR_RANDOM;
   128bc:	2301      	movs	r3, #1
   128be:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   128c2:	e008      	b.n	128d6 <smpCalcC1Part1+0xb2>
    }
    else
    {
      iAddrType = DmConnPeerAddrType(pCcb->connId);
   128c4:	9b05      	ldr	r3, [sp, #20]
   128c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   128ca:	4618      	mov	r0, r3
   128cc:	f002 fffc 	bl	158c8 <DmConnPeerAddrType>
   128d0:	4603      	mov	r3, r0
   128d2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    }

    /* if local device's using RPA */
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   128d6:	9b05      	ldr	r3, [sp, #20]
   128d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   128dc:	4618      	mov	r0, r3
   128de:	f003 f855 	bl	1598c <DmConnLocalRpa>
   128e2:	4603      	mov	r3, r0
   128e4:	4618      	mov	r0, r3
   128e6:	f7f9 fcd3 	bl	c290 <BdaIsZeros>
   128ea:	4603      	mov	r3, r0
   128ec:	2b00      	cmp	r3, #0
   128ee:	d103      	bne.n	128f8 <smpCalcC1Part1+0xd4>
    {
      rAddrType = DM_ADDR_RANDOM;
   128f0:	2301      	movs	r3, #1
   128f2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   128f6:	e008      	b.n	1290a <smpCalcC1Part1+0xe6>
    }
    else
    {
      rAddrType = DmConnLocalAddrType(pCcb->connId);
   128f8:	9b05      	ldr	r3, [sp, #20]
   128fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   128fe:	4618      	mov	r0, r3
   12900:	f003 f808 	bl	15914 <DmConnLocalAddrType>
   12904:	4603      	mov	r3, r0
   12906:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  }

  /* note all numbers contained in byte arrays are little endian */

  /* create parameter from xor of r and pres, preq, rat, and iat */
  p = buf;
   1290a:	ab08      	add	r3, sp, #32
   1290c:	930d      	str	r3, [sp, #52]	; 0x34
  *p++ = iAddrType ^ *pRand++;
   1290e:	9b03      	ldr	r3, [sp, #12]
   12910:	1c5a      	adds	r2, r3, #1
   12912:	9203      	str	r2, [sp, #12]
   12914:	7819      	ldrb	r1, [r3, #0]
   12916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12918:	1c5a      	adds	r2, r3, #1
   1291a:	920d      	str	r2, [sp, #52]	; 0x34
   1291c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   12920:	404a      	eors	r2, r1
   12922:	b2d2      	uxtb	r2, r2
   12924:	701a      	strb	r2, [r3, #0]
  *p++ = rAddrType ^ *pRand++;
   12926:	9b03      	ldr	r3, [sp, #12]
   12928:	1c5a      	adds	r2, r3, #1
   1292a:	9203      	str	r2, [sp, #12]
   1292c:	7819      	ldrb	r1, [r3, #0]
   1292e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12930:	1c5a      	adds	r2, r3, #1
   12932:	920d      	str	r2, [sp, #52]	; 0x34
   12934:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12938:	404a      	eors	r2, r1
   1293a:	b2d2      	uxtb	r2, r2
   1293c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SMP_PAIR_REQ_LEN; i++)
   1293e:	2300      	movs	r3, #0
   12940:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   12944:	e014      	b.n	12970 <smpCalcC1Part1+0x14c>
  {
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   12946:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1294a:	9a05      	ldr	r2, [sp, #20]
   1294c:	4413      	add	r3, r2
   1294e:	f893 1020 	ldrb.w	r1, [r3, #32]
   12952:	9b03      	ldr	r3, [sp, #12]
   12954:	1c5a      	adds	r2, r3, #1
   12956:	9203      	str	r2, [sp, #12]
   12958:	781a      	ldrb	r2, [r3, #0]
   1295a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1295c:	1c58      	adds	r0, r3, #1
   1295e:	900d      	str	r0, [sp, #52]	; 0x34
   12960:	404a      	eors	r2, r1
   12962:	b2d2      	uxtb	r2, r2
   12964:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SMP_PAIR_REQ_LEN; i++)
   12966:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1296a:	3301      	adds	r3, #1
   1296c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   12970:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   12974:	2b06      	cmp	r3, #6
   12976:	d9e6      	bls.n	12946 <smpCalcC1Part1+0x122>
  }
  for (i = 0; i < SMP_PAIR_RSP_LEN; i++)
   12978:	2300      	movs	r3, #0
   1297a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1297e:	e014      	b.n	129aa <smpCalcC1Part1+0x186>
  {
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   12980:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   12984:	9a05      	ldr	r2, [sp, #20]
   12986:	4413      	add	r3, r2
   12988:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
   1298c:	9b03      	ldr	r3, [sp, #12]
   1298e:	1c5a      	adds	r2, r3, #1
   12990:	9203      	str	r2, [sp, #12]
   12992:	781a      	ldrb	r2, [r3, #0]
   12994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12996:	1c58      	adds	r0, r3, #1
   12998:	900d      	str	r0, [sp, #52]	; 0x34
   1299a:	404a      	eors	r2, r1
   1299c:	b2d2      	uxtb	r2, r2
   1299e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SMP_PAIR_RSP_LEN; i++)
   129a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   129a4:	3301      	adds	r3, #1
   129a6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   129aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   129ae:	2b06      	cmp	r3, #6
   129b0:	d9e6      	bls.n	12980 <smpCalcC1Part1+0x15c>
  }

  /* encrypt */
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   129b2:	4b13      	ldr	r3, [pc, #76]	; (12a00 <smpCalcC1Part1+0x1dc>)
   129b4:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   129b8:	9b05      	ldr	r3, [sp, #20]
   129ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   129be:	b29b      	uxth	r3, r3
   129c0:	a908      	add	r1, sp, #32
   129c2:	200b      	movs	r0, #11
   129c4:	9000      	str	r0, [sp, #0]
   129c6:	9804      	ldr	r0, [sp, #16]
   129c8:	f004 fbf6 	bl	171b8 <SecAes>
   129cc:	4603      	mov	r3, r0
   129ce:	461a      	mov	r2, r3
   129d0:	9b05      	ldr	r3, [sp, #20]
   129d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  if (pCcb->token == SEC_TOKEN_INVALID)
   129d6:	9b05      	ldr	r3, [sp, #20]
   129d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   129dc:	2bff      	cmp	r3, #255	; 0xff
   129de:	d10a      	bne.n	129f6 <smpCalcC1Part1+0x1d2>
  {
    wsfMsgHdr_t     hdr;

    /* fail on invalid token */
    hdr.status = SMP_ERR_UNSPECIFIED;
   129e0:	2308      	movs	r3, #8
   129e2:	f88d 301f 	strb.w	r3, [sp, #31]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   129e6:	2303      	movs	r3, #3
   129e8:	f88d 301e 	strb.w	r3, [sp, #30]

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   129ec:	ab07      	add	r3, sp, #28
   129ee:	4619      	mov	r1, r3
   129f0:	9805      	ldr	r0, [sp, #20]
   129f2:	f7ff fb4b 	bl	1208c <smpSmExecute>
  }
}
   129f6:	bf00      	nop
   129f8:	b00f      	add	sp, #60	; 0x3c
   129fa:	f85d fb04 	ldr.w	pc, [sp], #4
   129fe:	bf00      	nop
   12a00:	100042a4 	.word	0x100042a4

00012a04 <smpCalcC1Part2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCalcC1Part2(smpCcb_t *pCcb, uint8_t *pKey, uint8_t *pPart1)
{
   12a04:	b500      	push	{lr}
   12a06:	b091      	sub	sp, #68	; 0x44
   12a08:	9005      	str	r0, [sp, #20]
   12a0a:	9104      	str	r1, [sp, #16]
   12a0c:	9203      	str	r2, [sp, #12]
  uint8_t   i;
  uint8_t   *pIaddr;
  uint8_t   *pRaddr;

  /* set initiator/responder addresss */
  if (pCcb->initiator)
   12a0e:	9b05      	ldr	r3, [sp, #20]
   12a10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   12a14:	2b00      	cmp	r3, #0
   12a16:	d028      	beq.n	12a6a <smpCalcC1Part2+0x66>
  {
    /* use local device's RPA */
    pIaddr = DmConnLocalRpa(pCcb->connId);
   12a18:	9b05      	ldr	r3, [sp, #20]
   12a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12a1e:	4618      	mov	r0, r3
   12a20:	f002 ffb4 	bl	1598c <DmConnLocalRpa>
   12a24:	900d      	str	r0, [sp, #52]	; 0x34

    /* if local device's not using RPA */
    if (BdaIsZeros(pIaddr))
   12a26:	980d      	ldr	r0, [sp, #52]	; 0x34
   12a28:	f7f9 fc32 	bl	c290 <BdaIsZeros>
   12a2c:	4603      	mov	r3, r0
   12a2e:	2b00      	cmp	r3, #0
   12a30:	d006      	beq.n	12a40 <smpCalcC1Part2+0x3c>
    {
      /* use local device's address */
      pIaddr = DmConnLocalAddr(pCcb->connId);
   12a32:	9b05      	ldr	r3, [sp, #20]
   12a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12a38:	4618      	mov	r0, r3
   12a3a:	f002 ff7f 	bl	1593c <DmConnLocalAddr>
   12a3e:	900d      	str	r0, [sp, #52]	; 0x34
    }

    /* use peer device's RPA */
    pRaddr = DmConnPeerRpa(pCcb->connId);
   12a40:	9b05      	ldr	r3, [sp, #20]
   12a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12a46:	4618      	mov	r0, r3
   12a48:	f002 ff8c 	bl	15964 <DmConnPeerRpa>
   12a4c:	900c      	str	r0, [sp, #48]	; 0x30

    /* if peer device's not using RPA */
    if (BdaIsZeros(pRaddr))
   12a4e:	980c      	ldr	r0, [sp, #48]	; 0x30
   12a50:	f7f9 fc1e 	bl	c290 <BdaIsZeros>
   12a54:	4603      	mov	r3, r0
   12a56:	2b00      	cmp	r3, #0
   12a58:	d02f      	beq.n	12aba <smpCalcC1Part2+0xb6>
    {
      /* use peer device's address */
      pRaddr = DmConnPeerAddr(pCcb->connId);
   12a5a:	9b05      	ldr	r3, [sp, #20]
   12a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12a60:	4618      	mov	r0, r3
   12a62:	f002 ff45 	bl	158f0 <DmConnPeerAddr>
   12a66:	900c      	str	r0, [sp, #48]	; 0x30
   12a68:	e027      	b.n	12aba <smpCalcC1Part2+0xb6>
    }
  }
  else
  {
    /* use peer device's RPA */
    pIaddr = DmConnPeerRpa(pCcb->connId);
   12a6a:	9b05      	ldr	r3, [sp, #20]
   12a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12a70:	4618      	mov	r0, r3
   12a72:	f002 ff77 	bl	15964 <DmConnPeerRpa>
   12a76:	900d      	str	r0, [sp, #52]	; 0x34

    /* if peer device's not using RPA */
    if (BdaIsZeros(pIaddr))
   12a78:	980d      	ldr	r0, [sp, #52]	; 0x34
   12a7a:	f7f9 fc09 	bl	c290 <BdaIsZeros>
   12a7e:	4603      	mov	r3, r0
   12a80:	2b00      	cmp	r3, #0
   12a82:	d006      	beq.n	12a92 <smpCalcC1Part2+0x8e>
    {
      /* use peer device's address */
      pIaddr = DmConnPeerAddr(pCcb->connId);
   12a84:	9b05      	ldr	r3, [sp, #20]
   12a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12a8a:	4618      	mov	r0, r3
   12a8c:	f002 ff30 	bl	158f0 <DmConnPeerAddr>
   12a90:	900d      	str	r0, [sp, #52]	; 0x34
    }

    /* use local device's RPA */
    pRaddr = DmConnLocalRpa(pCcb->connId);
   12a92:	9b05      	ldr	r3, [sp, #20]
   12a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12a98:	4618      	mov	r0, r3
   12a9a:	f002 ff77 	bl	1598c <DmConnLocalRpa>
   12a9e:	900c      	str	r0, [sp, #48]	; 0x30

    /* if local device's not using RPA */
    if (BdaIsZeros(pRaddr))
   12aa0:	980c      	ldr	r0, [sp, #48]	; 0x30
   12aa2:	f7f9 fbf5 	bl	c290 <BdaIsZeros>
   12aa6:	4603      	mov	r3, r0
   12aa8:	2b00      	cmp	r3, #0
   12aaa:	d006      	beq.n	12aba <smpCalcC1Part2+0xb6>
    {
      /* use local device's address */
      pRaddr = DmConnLocalAddr(pCcb->connId);
   12aac:	9b05      	ldr	r3, [sp, #20]
   12aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12ab2:	4618      	mov	r0, r3
   12ab4:	f002 ff42 	bl	1593c <DmConnLocalAddr>
   12ab8:	900c      	str	r0, [sp, #48]	; 0x30
  }

  /* note all numbers contained in byte arrays are little endian */

  /* create parameter from xor of part 1 result with ia, ra, and pad */
  p = buf;
   12aba:	ab08      	add	r3, sp, #32
   12abc:	930f      	str	r3, [sp, #60]	; 0x3c
  for (i = BDA_ADDR_LEN; i > 0; i--)
   12abe:	2306      	movs	r3, #6
   12ac0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12ac4:	e012      	b.n	12aec <smpCalcC1Part2+0xe8>
  {
    *p++ = *pRaddr++ ^ *pPart1++;
   12ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12ac8:	1c5a      	adds	r2, r3, #1
   12aca:	920c      	str	r2, [sp, #48]	; 0x30
   12acc:	7819      	ldrb	r1, [r3, #0]
   12ace:	9b03      	ldr	r3, [sp, #12]
   12ad0:	1c5a      	adds	r2, r3, #1
   12ad2:	9203      	str	r2, [sp, #12]
   12ad4:	781a      	ldrb	r2, [r3, #0]
   12ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12ad8:	1c58      	adds	r0, r3, #1
   12ada:	900f      	str	r0, [sp, #60]	; 0x3c
   12adc:	404a      	eors	r2, r1
   12ade:	b2d2      	uxtb	r2, r2
   12ae0:	701a      	strb	r2, [r3, #0]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   12ae2:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   12ae6:	3b01      	subs	r3, #1
   12ae8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12aec:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   12af0:	2b00      	cmp	r3, #0
   12af2:	d1e8      	bne.n	12ac6 <smpCalcC1Part2+0xc2>
  }
  for (i = BDA_ADDR_LEN; i > 0; i--)
   12af4:	2306      	movs	r3, #6
   12af6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12afa:	e012      	b.n	12b22 <smpCalcC1Part2+0x11e>
  {
    *p++ = *pIaddr++ ^ *pPart1++;
   12afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12afe:	1c5a      	adds	r2, r3, #1
   12b00:	920d      	str	r2, [sp, #52]	; 0x34
   12b02:	7819      	ldrb	r1, [r3, #0]
   12b04:	9b03      	ldr	r3, [sp, #12]
   12b06:	1c5a      	adds	r2, r3, #1
   12b08:	9203      	str	r2, [sp, #12]
   12b0a:	781a      	ldrb	r2, [r3, #0]
   12b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12b0e:	1c58      	adds	r0, r3, #1
   12b10:	900f      	str	r0, [sp, #60]	; 0x3c
   12b12:	404a      	eors	r2, r1
   12b14:	b2d2      	uxtb	r2, r2
   12b16:	701a      	strb	r2, [r3, #0]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   12b18:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   12b1c:	3b01      	subs	r3, #1
   12b1e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   12b22:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   12b26:	2b00      	cmp	r3, #0
   12b28:	d1e8      	bne.n	12afc <smpCalcC1Part2+0xf8>
  }
  *p++ = *pPart1++;
   12b2a:	9a03      	ldr	r2, [sp, #12]
   12b2c:	1c53      	adds	r3, r2, #1
   12b2e:	9303      	str	r3, [sp, #12]
   12b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12b32:	1c59      	adds	r1, r3, #1
   12b34:	910f      	str	r1, [sp, #60]	; 0x3c
   12b36:	7812      	ldrb	r2, [r2, #0]
   12b38:	701a      	strb	r2, [r3, #0]
  *p++ = *pPart1++;
   12b3a:	9a03      	ldr	r2, [sp, #12]
   12b3c:	1c53      	adds	r3, r2, #1
   12b3e:	9303      	str	r3, [sp, #12]
   12b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12b42:	1c59      	adds	r1, r3, #1
   12b44:	910f      	str	r1, [sp, #60]	; 0x3c
   12b46:	7812      	ldrb	r2, [r2, #0]
   12b48:	701a      	strb	r2, [r3, #0]
  *p++ = *pPart1++;
   12b4a:	9a03      	ldr	r2, [sp, #12]
   12b4c:	1c53      	adds	r3, r2, #1
   12b4e:	9303      	str	r3, [sp, #12]
   12b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12b52:	1c59      	adds	r1, r3, #1
   12b54:	910f      	str	r1, [sp, #60]	; 0x3c
   12b56:	7812      	ldrb	r2, [r2, #0]
   12b58:	701a      	strb	r2, [r3, #0]
  *p++ = *pPart1++;
   12b5a:	9a03      	ldr	r2, [sp, #12]
   12b5c:	1c53      	adds	r3, r2, #1
   12b5e:	9303      	str	r3, [sp, #12]
   12b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12b62:	1c59      	adds	r1, r3, #1
   12b64:	910f      	str	r1, [sp, #60]	; 0x3c
   12b66:	7812      	ldrb	r2, [r2, #0]
   12b68:	701a      	strb	r2, [r3, #0]

  /* encrypt */
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   12b6a:	4b13      	ldr	r3, [pc, #76]	; (12bb8 <smpCalcC1Part2+0x1b4>)
   12b6c:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   12b70:	9b05      	ldr	r3, [sp, #20]
   12b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12b76:	b29b      	uxth	r3, r3
   12b78:	a908      	add	r1, sp, #32
   12b7a:	200b      	movs	r0, #11
   12b7c:	9000      	str	r0, [sp, #0]
   12b7e:	9804      	ldr	r0, [sp, #16]
   12b80:	f004 fb1a 	bl	171b8 <SecAes>
   12b84:	4603      	mov	r3, r0
   12b86:	461a      	mov	r2, r3
   12b88:	9b05      	ldr	r3, [sp, #20]
   12b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  if (pCcb->token == SEC_TOKEN_INVALID)
   12b8e:	9b05      	ldr	r3, [sp, #20]
   12b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   12b94:	2bff      	cmp	r3, #255	; 0xff
   12b96:	d10a      	bne.n	12bae <smpCalcC1Part2+0x1aa>
  {
    wsfMsgHdr_t     hdr;

    /* fail on invalid token */
    hdr.status = SMP_ERR_UNSPECIFIED;
   12b98:	2308      	movs	r3, #8
   12b9a:	f88d 301f 	strb.w	r3, [sp, #31]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   12b9e:	2303      	movs	r3, #3
   12ba0:	f88d 301e 	strb.w	r3, [sp, #30]

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12ba4:	ab07      	add	r3, sp, #28
   12ba6:	4619      	mov	r1, r3
   12ba8:	9805      	ldr	r0, [sp, #20]
   12baa:	f7ff fa6f 	bl	1208c <smpSmExecute>
  }
}
   12bae:	bf00      	nop
   12bb0:	b011      	add	sp, #68	; 0x44
   12bb2:	f85d fb04 	ldr.w	pc, [sp], #4
   12bb6:	bf00      	nop
   12bb8:	100042a4 	.word	0x100042a4

00012bbc <smpCalcS1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpCalcS1(smpCcb_t *pCcb, uint8_t *pKey, uint8_t *pRand1, uint8_t *pRand2)
{
   12bbc:	b500      	push	{lr}
   12bbe:	b08d      	sub	sp, #52	; 0x34
   12bc0:	9005      	str	r0, [sp, #20]
   12bc2:	9104      	str	r1, [sp, #16]
   12bc4:	9203      	str	r2, [sp, #12]
   12bc6:	9302      	str	r3, [sp, #8]
  uint8_t   buf[HCI_ENCRYPT_DATA_LEN];

  /* note all numbers contained in byte arrays are little endian */

  /* construct parameter r' from r1 and r2 */
  Calc128Cpy64(buf, pRand2);
   12bc8:	ab08      	add	r3, sp, #32
   12bca:	9902      	ldr	r1, [sp, #8]
   12bcc:	4618      	mov	r0, r3
   12bce:	f7f9 fb84 	bl	c2da <Calc128Cpy64>
  Calc128Cpy64(&buf[SMP_RAND8_LEN], pRand1);
   12bd2:	ab08      	add	r3, sp, #32
   12bd4:	3308      	adds	r3, #8
   12bd6:	9903      	ldr	r1, [sp, #12]
   12bd8:	4618      	mov	r0, r3
   12bda:	f7f9 fb7e 	bl	c2da <Calc128Cpy64>

  /* encrypt */
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   12bde:	4b13      	ldr	r3, [pc, #76]	; (12c2c <smpCalcS1+0x70>)
   12be0:	f893 20e0 	ldrb.w	r2, [r3, #224]	; 0xe0
   12be4:	9b05      	ldr	r3, [sp, #20]
   12be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12bea:	b29b      	uxth	r3, r3
   12bec:	a908      	add	r1, sp, #32
   12bee:	200b      	movs	r0, #11
   12bf0:	9000      	str	r0, [sp, #0]
   12bf2:	9804      	ldr	r0, [sp, #16]
   12bf4:	f004 fae0 	bl	171b8 <SecAes>
   12bf8:	4603      	mov	r3, r0
   12bfa:	461a      	mov	r2, r3
   12bfc:	9b05      	ldr	r3, [sp, #20]
   12bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  if (pCcb->token == SEC_TOKEN_INVALID)
   12c02:	9b05      	ldr	r3, [sp, #20]
   12c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   12c08:	2bff      	cmp	r3, #255	; 0xff
   12c0a:	d10a      	bne.n	12c22 <smpCalcS1+0x66>
  {
    wsfMsgHdr_t     hdr;

    /* fail on invalid token */
    hdr.status = SMP_ERR_UNSPECIFIED;
   12c0c:	2308      	movs	r3, #8
   12c0e:	f88d 301f 	strb.w	r3, [sp, #31]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   12c12:	2303      	movs	r3, #3
   12c14:	f88d 301e 	strb.w	r3, [sp, #30]

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   12c18:	ab07      	add	r3, sp, #28
   12c1a:	4619      	mov	r1, r3
   12c1c:	9805      	ldr	r0, [sp, #20]
   12c1e:	f7ff fa35 	bl	1208c <smpSmExecute>
  }
}
   12c22:	bf00      	nop
   12c24:	b00d      	add	sp, #52	; 0x34
   12c26:	f85d fb04 	ldr.w	pc, [sp], #4
   12c2a:	bf00      	nop
   12c2c:	100042a4 	.word	0x100042a4

00012c30 <smpGenerateLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpGenerateLtk(smpCcb_t *pCcb)
{
   12c30:	b500      	push	{lr}
   12c32:	b085      	sub	sp, #20
   12c34:	9001      	str	r0, [sp, #4]
  uint8_t *p;
  smpScratch_t *pScr = pCcb->pScr;
   12c36:	9b01      	ldr	r3, [sp, #4]
   12c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12c3a:	9303      	str	r3, [sp, #12]

  /* generated results are stored in scratch buffer */
  p = pScr->keyInd.keyData.ltk.key;
   12c3c:	9b03      	ldr	r3, [sp, #12]
   12c3e:	3304      	adds	r3, #4
   12c40:	9302      	str	r3, [sp, #8]

  /* generate LTK from random number */
  SecRand(p, pScr->keyInd.encKeyLen);
   12c42:	9b03      	ldr	r3, [sp, #12]
   12c44:	f893 3020 	ldrb.w	r3, [r3, #32]
   12c48:	4619      	mov	r1, r3
   12c4a:	9802      	ldr	r0, [sp, #8]
   12c4c:	f004 fd98 	bl	17780 <SecRand>
  p += pScr->keyInd.encKeyLen;
   12c50:	9b03      	ldr	r3, [sp, #12]
   12c52:	f893 3020 	ldrb.w	r3, [r3, #32]
   12c56:	461a      	mov	r2, r3
   12c58:	9b02      	ldr	r3, [sp, #8]
   12c5a:	4413      	add	r3, r2
   12c5c:	9302      	str	r3, [sp, #8]

  /* set remaining key bytes to zero */
  memset(p, 0, (SMP_KEY_LEN - pScr->keyInd.encKeyLen));
   12c5e:	9b03      	ldr	r3, [sp, #12]
   12c60:	f893 3020 	ldrb.w	r3, [r3, #32]
   12c64:	f1c3 0310 	rsb	r3, r3, #16
   12c68:	461a      	mov	r2, r3
   12c6a:	2100      	movs	r1, #0
   12c6c:	9802      	ldr	r0, [sp, #8]
   12c6e:	f012 fd25 	bl	256bc <memset>

  /* use existing random number stored in scratch buf b4 for EDIV and RAND */
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   12c72:	9b03      	ldr	r3, [sp, #12]
   12c74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   12c78:	b29a      	uxth	r2, r3
   12c7a:	9b03      	ldr	r3, [sp, #12]
   12c7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   12c80:	b29b      	uxth	r3, r3
   12c82:	021b      	lsls	r3, r3, #8
   12c84:	b29b      	uxth	r3, r3
   12c86:	4413      	add	r3, r2
   12c88:	b29a      	uxth	r2, r3
   12c8a:	9b03      	ldr	r3, [sp, #12]
   12c8c:	839a      	strh	r2, [r3, #28]
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   12c8e:	9b03      	ldr	r3, [sp, #12]
   12c90:	f103 0014 	add.w	r0, r3, #20
   12c94:	9b03      	ldr	r3, [sp, #12]
   12c96:	3332      	adds	r3, #50	; 0x32
   12c98:	2208      	movs	r2, #8
   12c9a:	4619      	mov	r1, r3
   12c9c:	f7f9 fa30 	bl	c100 <memcpy>

  /* pass key to app via DM */
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
   12ca0:	9b03      	ldr	r3, [sp, #12]
   12ca2:	2201      	movs	r2, #1
   12ca4:	779a      	strb	r2, [r3, #30]
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   12ca6:	9b01      	ldr	r3, [sp, #4]
   12ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   12cac:	f003 0304 	and.w	r3, r3, #4
   12cb0:	2b00      	cmp	r3, #0
   12cb2:	d001      	beq.n	12cb8 <smpGenerateLtk+0x88>
   12cb4:	2202      	movs	r2, #2
   12cb6:	e000      	b.n	12cba <smpGenerateLtk+0x8a>
   12cb8:	2201      	movs	r2, #1
   12cba:	9b03      	ldr	r3, [sp, #12]
   12cbc:	77da      	strb	r2, [r3, #31]
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
   12cbe:	9b03      	ldr	r3, [sp, #12]
   12cc0:	222f      	movs	r2, #47	; 0x2f
   12cc2:	709a      	strb	r2, [r3, #2]
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
   12cc4:	9b03      	ldr	r3, [sp, #12]
   12cc6:	4618      	mov	r0, r3
   12cc8:	f003 fe22 	bl	16910 <DmSmpCbackExec>
}
   12ccc:	bf00      	nop
   12cce:	b005      	add	sp, #20
   12cd0:	f85d fb04 	ldr.w	pc, [sp], #4

00012cd4 <smpSendPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPkt(smpCcb_t *pCcb, uint8_t *pPkt)
{
   12cd4:	b500      	push	{lr}
   12cd6:	b083      	sub	sp, #12
   12cd8:	9001      	str	r0, [sp, #4]
   12cda:	9100      	str	r1, [sp, #0]
  /* if flow disabled */
  if (pCcb->flowDisabled)
   12cdc:	9b01      	ldr	r3, [sp, #4]
   12cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   12ce2:	2b00      	cmp	r3, #0
   12ce4:	d00c      	beq.n	12d00 <smpSendPkt+0x2c>
  {
    /* if packet already queued discard it and replace it with this new packet */
    if (pCcb->pQueued != NULL)
   12ce6:	9b01      	ldr	r3, [sp, #4]
   12ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12cea:	2b00      	cmp	r3, #0
   12cec:	d004      	beq.n	12cf8 <smpSendPkt+0x24>
    {
      SMP_TRACE_WARN1("smpSendPkt packet discarded cmd:%d", pCcb->pQueued[L2C_PAYLOAD_START]);
      WsfMsgFree(pCcb->pQueued);
   12cee:	9b01      	ldr	r3, [sp, #4]
   12cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12cf2:	4618      	mov	r0, r3
   12cf4:	f00c fe16 	bl	1f924 <WsfMsgFree>
    }

    /* queue packet */
    pCcb->pQueued = pPkt;
   12cf8:	9b01      	ldr	r3, [sp, #4]
   12cfa:	9a00      	ldr	r2, [sp, #0]
   12cfc:	635a      	str	r2, [r3, #52]	; 0x34
  /* else send it to L2CAP */
  else
  {
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
  }
}
   12cfe:	e00c      	b.n	12d1a <smpSendPkt+0x46>
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   12d00:	9b01      	ldr	r3, [sp, #4]
   12d02:	8f19      	ldrh	r1, [r3, #56]	; 0x38
   12d04:	9b00      	ldr	r3, [sp, #0]
   12d06:	3308      	adds	r3, #8
   12d08:	781b      	ldrb	r3, [r3, #0]
   12d0a:	461a      	mov	r2, r3
   12d0c:	4b05      	ldr	r3, [pc, #20]	; (12d24 <smpSendPkt+0x50>)
   12d0e:	5c9b      	ldrb	r3, [r3, r2]
   12d10:	b29a      	uxth	r2, r3
   12d12:	9b00      	ldr	r3, [sp, #0]
   12d14:	2006      	movs	r0, #6
   12d16:	f00a fa17 	bl	1d148 <L2cDataReq>
}
   12d1a:	bf00      	nop
   12d1c:	b003      	add	sp, #12
   12d1e:	f85d fb04 	ldr.w	pc, [sp], #4
   12d22:	bf00      	nop
   12d24:	000283a8 	.word	0x000283a8

00012d28 <smpStateIdle>:
 *
 *  \return TRUE if in idle state, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpStateIdle(smpCcb_t *pCcb)
{
   12d28:	b082      	sub	sp, #8
   12d2a:	9001      	str	r0, [sp, #4]
  return (pCcb->state == 0);
   12d2c:	9b01      	ldr	r3, [sp, #4]
   12d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   12d32:	2b00      	cmp	r3, #0
   12d34:	bf0c      	ite	eq
   12d36:	2301      	moveq	r3, #1
   12d38:	2300      	movne	r3, #0
   12d3a:	b2db      	uxtb	r3, r3
}
   12d3c:	4618      	mov	r0, r3
   12d3e:	b002      	add	sp, #8
   12d40:	4770      	bx	lr

00012d42 <smpMsgAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *smpMsgAlloc(uint16_t len)
{
   12d42:	b500      	push	{lr}
   12d44:	b083      	sub	sp, #12
   12d46:	4603      	mov	r3, r0
   12d48:	f8ad 3006 	strh.w	r3, [sp, #6]
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   12d4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12d50:	2100      	movs	r1, #0
   12d52:	4618      	mov	r0, r3
   12d54:	f00c fdb6 	bl	1f8c4 <WsfMsgDataAlloc>
   12d58:	4603      	mov	r3, r0
}
   12d5a:	4618      	mov	r0, r3
   12d5c:	b003      	add	sp, #12
   12d5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00012d64 <SmpDmMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmMsgSend(smpDmMsg_t *pMsg)
{
   12d64:	b500      	push	{lr}
   12d66:	b083      	sub	sp, #12
   12d68:	9001      	str	r0, [sp, #4]
  WsfMsgSend(smpCb.handlerId, pMsg);
   12d6a:	4b05      	ldr	r3, [pc, #20]	; (12d80 <SmpDmMsgSend+0x1c>)
   12d6c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   12d70:	9901      	ldr	r1, [sp, #4]
   12d72:	4618      	mov	r0, r3
   12d74:	f00c fde2 	bl	1f93c <WsfMsgSend>
}
   12d78:	bf00      	nop
   12d7a:	b003      	add	sp, #12
   12d7c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d80:	100042a4 	.word	0x100042a4

00012d84 <SmpDmEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmEncryptInd(wsfMsgHdr_t *pMsg)
{
   12d84:	b500      	push	{lr}
   12d86:	b083      	sub	sp, #12
   12d88:	9001      	str	r0, [sp, #4]
  /* set event to SMP event type */
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   12d8a:	9b01      	ldr	r3, [sp, #4]
   12d8c:	78db      	ldrb	r3, [r3, #3]
   12d8e:	2b00      	cmp	r3, #0
   12d90:	d101      	bne.n	12d96 <SmpDmEncryptInd+0x12>
   12d92:	2208      	movs	r2, #8
   12d94:	e000      	b.n	12d98 <SmpDmEncryptInd+0x14>
   12d96:	2209      	movs	r2, #9
   12d98:	9b01      	ldr	r3, [sp, #4]
   12d9a:	709a      	strb	r2, [r3, #2]
                 SMP_MSG_DM_ENCRYPT_CMPL : SMP_MSG_DM_ENCRYPT_FAILED;

  /* pass event to handler */
  SmpHandler(0, pMsg);
   12d9c:	9901      	ldr	r1, [sp, #4]
   12d9e:	2000      	movs	r0, #0
   12da0:	f000 f8b6 	bl	12f10 <SmpHandler>
}
   12da4:	bf00      	nop
   12da6:	b003      	add	sp, #12
   12da8:	f85d fb04 	ldr.w	pc, [sp], #4

00012dac <smpGetScSecLevel>:
*
*  \return Security level.
*/
/*************************************************************************************************/
uint8_t smpGetScSecLevel(smpCcb_t *pCcb)
{
   12dac:	b084      	sub	sp, #16
   12dae:	9001      	str	r0, [sp, #4]
  uint8_t secLevel;

  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   12db0:	9b01      	ldr	r3, [sp, #4]
   12db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   12db6:	f003 0304 	and.w	r3, r3, #4
   12dba:	2b00      	cmp	r3, #0
   12dbc:	d013      	beq.n	12de6 <smpGetScSecLevel+0x3a>
  {
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
   12dbe:	9b01      	ldr	r3, [sp, #4]
   12dc0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   12dc4:	9b01      	ldr	r3, [sp, #4]
   12dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   12dca:	4293      	cmp	r3, r2
   12dcc:	bf28      	it	cs
   12dce:	4613      	movcs	r3, r2
   12dd0:	b2db      	uxtb	r3, r3
   12dd2:	2b10      	cmp	r3, #16
   12dd4:	d103      	bne.n	12dde <smpGetScSecLevel+0x32>
    {
      secLevel = DM_SEC_LEVEL_ENC_LESC;
   12dd6:	2303      	movs	r3, #3
   12dd8:	f88d 300f 	strb.w	r3, [sp, #15]
   12ddc:	e006      	b.n	12dec <smpGetScSecLevel+0x40>
    }
    else
    {
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
   12dde:	2302      	movs	r3, #2
   12de0:	f88d 300f 	strb.w	r3, [sp, #15]
   12de4:	e002      	b.n	12dec <smpGetScSecLevel+0x40>
    }
  }
  else
  {
    secLevel = DM_SEC_LEVEL_ENC;
   12de6:	2301      	movs	r3, #1
   12de8:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  return secLevel;
   12dec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   12df0:	4618      	mov	r0, r3
   12df2:	b004      	add	sp, #16
   12df4:	4770      	bx	lr
	...

00012df8 <SmpDmGetStk>:
 *
 *  \return Pointer to STK or NULL if not available.
 */
/*************************************************************************************************/
uint8_t *SmpDmGetStk(dmConnId_t connId, uint8_t *pSecLevel)
{
   12df8:	b500      	push	{lr}
   12dfa:	b085      	sub	sp, #20
   12dfc:	4603      	mov	r3, r0
   12dfe:	9100      	str	r1, [sp, #0]
   12e00:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t     *pCcb;

  /* get connection control block */
  pCcb = smpCcbByConnId(connId);
   12e04:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12e08:	4618      	mov	r0, r3
   12e0a:	f7ff fcf9 	bl	12800 <smpCcbByConnId>
   12e0e:	9003      	str	r0, [sp, #12]

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   12e10:	4b19      	ldr	r3, [pc, #100]	; (12e78 <SmpDmGetStk+0x80>)
   12e12:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   12e16:	2b00      	cmp	r3, #0
   12e18:	d015      	beq.n	12e46 <SmpDmGetStk+0x4e>
   12e1a:	9b03      	ldr	r3, [sp, #12]
   12e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   12e1e:	781b      	ldrb	r3, [r3, #0]
   12e20:	2b00      	cmp	r3, #0
   12e22:	d010      	beq.n	12e46 <SmpDmGetStk+0x4e>
   12e24:	9b03      	ldr	r3, [sp, #12]
   12e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   12e28:	699b      	ldr	r3, [r3, #24]
   12e2a:	2b00      	cmp	r3, #0
   12e2c:	d00b      	beq.n	12e46 <SmpDmGetStk+0x4e>
  {
    /* set security level */
    *pSecLevel = smpGetScSecLevel(pCcb);
   12e2e:	9803      	ldr	r0, [sp, #12]
   12e30:	f7ff ffbc 	bl	12dac <smpGetScSecLevel>
   12e34:	4603      	mov	r3, r0
   12e36:	461a      	mov	r2, r3
   12e38:	9b00      	ldr	r3, [sp, #0]
   12e3a:	701a      	strb	r2, [r3, #0]

    /* return buffer containing STK */
    return pCcb->pScCcb->pLtk->ltk_t;
   12e3c:	9b03      	ldr	r3, [sp, #12]
   12e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   12e40:	699b      	ldr	r3, [r3, #24]
   12e42:	3310      	adds	r3, #16
   12e44:	e014      	b.n	12e70 <SmpDmGetStk+0x78>
  }
  else if (pCcb->pScr != NULL)
   12e46:	9b03      	ldr	r3, [sp, #12]
   12e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12e4a:	2b00      	cmp	r3, #0
   12e4c:	d00f      	beq.n	12e6e <SmpDmGetStk+0x76>
  {
    /* set security level */
    *pSecLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   12e4e:	9b03      	ldr	r3, [sp, #12]
   12e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   12e54:	f003 0304 	and.w	r3, r3, #4
   12e58:	2b00      	cmp	r3, #0
   12e5a:	d001      	beq.n	12e60 <SmpDmGetStk+0x68>
   12e5c:	2202      	movs	r2, #2
   12e5e:	e000      	b.n	12e62 <SmpDmGetStk+0x6a>
   12e60:	2201      	movs	r2, #1
   12e62:	9b00      	ldr	r3, [sp, #0]
   12e64:	701a      	strb	r2, [r3, #0]

    /* return buffer containing STK */
    return pCcb->pScr->buf.b3;
   12e66:	9b03      	ldr	r3, [sp, #12]
   12e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12e6a:	3320      	adds	r3, #32
   12e6c:	e000      	b.n	12e70 <SmpDmGetStk+0x78>
  }
  else
  {
    return NULL;
   12e6e:	2300      	movs	r3, #0
  }
}
   12e70:	4618      	mov	r0, r3
   12e72:	b005      	add	sp, #20
   12e74:	f85d fb04 	ldr.w	pc, [sp], #4
   12e78:	100042a4 	.word	0x100042a4

00012e7c <SmpHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpHandlerInit(wsfHandlerId_t handlerId)
{
   12e7c:	b500      	push	{lr}
   12e7e:	b085      	sub	sp, #20
   12e80:	4603      	mov	r3, r0
   12e82:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t     i;
  smpCcb_t   *pCcb;

  /* store handler ID */
  smpCb.handlerId = handlerId;
   12e86:	4a1e      	ldr	r2, [pc, #120]	; (12f00 <SmpHandlerInit+0x84>)
   12e88:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12e8c:	f882 30e0 	strb.w	r3, [r2, #224]	; 0xe0

  /* Initialize the SMP device database */
  SmpDbInit();
   12e90:	f7ff f9fc 	bl	1228c <SmpDbInit>

  /* Initialize control block CCBs */
  for (i = 0, pCcb = smpCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   12e94:	2300      	movs	r3, #0
   12e96:	f88d 300f 	strb.w	r3, [sp, #15]
   12e9a:	4b19      	ldr	r3, [pc, #100]	; (12f00 <SmpHandlerInit+0x84>)
   12e9c:	9302      	str	r3, [sp, #8]
   12e9e:	e01d      	b.n	12edc <SmpHandlerInit+0x60>
  {
    /* initialize response timer */
    pCcb->rspTimer.handlerId = handlerId;
   12ea0:	9b02      	ldr	r3, [sp, #8]
   12ea2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12ea6:	731a      	strb	r2, [r3, #12]
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   12ea8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12eac:	b29b      	uxth	r3, r3
   12eae:	3301      	adds	r3, #1
   12eb0:	b29a      	uxth	r2, r3
   12eb2:	9b02      	ldr	r3, [sp, #8]
   12eb4:	811a      	strh	r2, [r3, #8]

    /* initialize wait interval timer */
    pCcb->waitTimer.handlerId = handlerId;
   12eb6:	9b02      	ldr	r3, [sp, #8]
   12eb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12ebc:	771a      	strb	r2, [r3, #28]
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   12ebe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12ec2:	b29b      	uxth	r3, r3
   12ec4:	3301      	adds	r3, #1
   12ec6:	b29a      	uxth	r2, r3
   12ec8:	9b02      	ldr	r3, [sp, #8]
   12eca:	831a      	strh	r2, [r3, #24]
  for (i = 0, pCcb = smpCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   12ecc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12ed0:	3301      	adds	r3, #1
   12ed2:	f88d 300f 	strb.w	r3, [sp, #15]
   12ed6:	9b02      	ldr	r3, [sp, #8]
   12ed8:	3348      	adds	r3, #72	; 0x48
   12eda:	9302      	str	r3, [sp, #8]
   12edc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   12ee0:	2b02      	cmp	r3, #2
   12ee2:	d9dd      	bls.n	12ea0 <SmpHandlerInit+0x24>
  }

  /* Register with L2C */
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   12ee4:	4a07      	ldr	r2, [pc, #28]	; (12f04 <SmpHandlerInit+0x88>)
   12ee6:	4908      	ldr	r1, [pc, #32]	; (12f08 <SmpHandlerInit+0x8c>)
   12ee8:	2006      	movs	r0, #6
   12eea:	f00a f911 	bl	1d110 <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
   12eee:	4907      	ldr	r1, [pc, #28]	; (12f0c <SmpHandlerInit+0x90>)
   12ef0:	2001      	movs	r0, #1
   12ef2:	f002 fb57 	bl	155a4 <DmConnRegister>
}
   12ef6:	bf00      	nop
   12ef8:	b005      	add	sp, #20
   12efa:	f85d fb04 	ldr.w	pc, [sp], #4
   12efe:	bf00      	nop
   12f00:	100042a4 	.word	0x100042a4
   12f04:	00012599 	.word	0x00012599
   12f08:	000124ed 	.word	0x000124ed
   12f0c:	000126a1 	.word	0x000126a1

00012f10 <SmpHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   12f10:	b500      	push	{lr}
   12f12:	b087      	sub	sp, #28
   12f14:	4603      	mov	r3, r0
   12f16:	9100      	str	r1, [sp, #0]
   12f18:	f88d 3007 	strb.w	r3, [sp, #7]
  smpCcb_t     *pCcb;

  /* Handle message */
  if (pMsg != NULL)
   12f1c:	9b00      	ldr	r3, [sp, #0]
   12f1e:	2b00      	cmp	r3, #0
   12f20:	d045      	beq.n	12fae <SmpHandler+0x9e>
  {
    if (pMsg->event == SMP_DB_SERVICE_IND)
   12f22:	9b00      	ldr	r3, [sp, #0]
   12f24:	789b      	ldrb	r3, [r3, #2]
   12f26:	2b1f      	cmp	r3, #31
   12f28:	d102      	bne.n	12f30 <SmpHandler+0x20>
    {
      SmpDbService();
   12f2a:	f7ff fa75 	bl	12418 <SmpDbService>
  /* Handle events */
  else if (event)
  {

  }
}
   12f2e:	e03e      	b.n	12fae <SmpHandler+0x9e>
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
   12f30:	9b00      	ldr	r3, [sp, #0]
   12f32:	789b      	ldrb	r3, [r3, #2]
   12f34:	2b1c      	cmp	r3, #28
   12f36:	d10a      	bne.n	12f4e <SmpHandler+0x3e>
        secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
   12f38:	9b00      	ldr	r3, [sp, #0]
   12f3a:	9305      	str	r3, [sp, #20]
        if (pCmac->pPlainText)
   12f3c:	9b05      	ldr	r3, [sp, #20]
   12f3e:	689b      	ldr	r3, [r3, #8]
   12f40:	2b00      	cmp	r3, #0
   12f42:	d004      	beq.n	12f4e <SmpHandler+0x3e>
          WsfBufFree(pCmac->pPlainText);
   12f44:	9b05      	ldr	r3, [sp, #20]
   12f46:	689b      	ldr	r3, [r3, #8]
   12f48:	4618      	mov	r0, r3
   12f4a:	f00c fc83 	bl	1f854 <WsfBufFree>
      pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);
   12f4e:	9b00      	ldr	r3, [sp, #0]
   12f50:	881b      	ldrh	r3, [r3, #0]
   12f52:	b2db      	uxtb	r3, r3
   12f54:	4618      	mov	r0, r3
   12f56:	f7ff fc53 	bl	12800 <smpCcbByConnId>
   12f5a:	9004      	str	r0, [sp, #16]
      if (pCcb->connId != DM_CONN_ID_NONE)
   12f5c:	9b04      	ldr	r3, [sp, #16]
   12f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12f62:	2b00      	cmp	r3, #0
   12f64:	d023      	beq.n	12fae <SmpHandler+0x9e>
        if (pMsg->event == SMP_MSG_WSF_AES_CMPL && pCcb->token != pMsg->status)
   12f66:	9b00      	ldr	r3, [sp, #0]
   12f68:	789b      	ldrb	r3, [r3, #2]
   12f6a:	2b0b      	cmp	r3, #11
   12f6c:	d11a      	bne.n	12fa4 <SmpHandler+0x94>
   12f6e:	9b04      	ldr	r3, [sp, #16]
   12f70:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   12f74:	9b00      	ldr	r3, [sp, #0]
   12f76:	78db      	ldrb	r3, [r3, #3]
   12f78:	429a      	cmp	r2, r3
   12f7a:	d013      	beq.n	12fa4 <SmpHandler+0x94>
            wsfHandlerId_t  handlerId = 0;
   12f7c:	2300      	movs	r3, #0
   12f7e:	f88d 300b 	strb.w	r3, [sp, #11]
            secQueueBuf_t *pBuf = NULL;
   12f82:	2300      	movs	r3, #0
   12f84:	9303      	str	r3, [sp, #12]
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   12f86:	e002      	b.n	12f8e <SmpHandler+0x7e>
                WsfMsgFree(pBuf);
   12f88:	9803      	ldr	r0, [sp, #12]
   12f8a:	f00c fccb 	bl	1f924 <WsfMsgFree>
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   12f8e:	f10d 030b 	add.w	r3, sp, #11
   12f92:	4619      	mov	r1, r3
   12f94:	4808      	ldr	r0, [pc, #32]	; (12fb8 <SmpHandler+0xa8>)
   12f96:	f00c fd02 	bl	1f99e <WsfMsgDeq>
   12f9a:	9003      	str	r0, [sp, #12]
   12f9c:	9b03      	ldr	r3, [sp, #12]
   12f9e:	2b00      	cmp	r3, #0
   12fa0:	d1f2      	bne.n	12f88 <SmpHandler+0x78>
        {
   12fa2:	e004      	b.n	12fae <SmpHandler+0x9e>
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   12fa4:	9900      	ldr	r1, [sp, #0]
   12fa6:	9804      	ldr	r0, [sp, #16]
   12fa8:	f7ff f870 	bl	1208c <smpSmExecute>
}
   12fac:	e7ff      	b.n	12fae <SmpHandler+0x9e>
   12fae:	bf00      	nop
   12fb0:	b007      	add	sp, #28
   12fb2:	f85d fb04 	ldr.w	pc, [sp], #4
   12fb6:	bf00      	nop
   12fb8:	10004f10 	.word	0x10004f10

00012fbc <smpScCatInitiatorBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatInitiatorBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   12fbc:	b500      	push	{lr}
   12fbe:	b085      	sub	sp, #20
   12fc0:	9001      	str	r0, [sp, #4]
   12fc2:	9100      	str	r1, [sp, #0]
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   12fc4:	9b01      	ldr	r3, [sp, #4]
   12fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   12fca:	4618      	mov	r0, r3
   12fcc:	f001 fe78 	bl	14cc0 <dmConnCcbById>
   12fd0:	9003      	str	r0, [sp, #12]

  if (pDmCcb)
   12fd2:	9b03      	ldr	r3, [sp, #12]
   12fd4:	2b00      	cmp	r3, #0
   12fd6:	d04b      	beq.n	13070 <smpScCatInitiatorBdAddr+0xb4>
  {
    if (pCcb->initiator)
   12fd8:	9b01      	ldr	r3, [sp, #4]
   12fda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   12fde:	2b00      	cmp	r3, #0
   12fe0:	d022      	beq.n	13028 <smpScCatInitiatorBdAddr+0x6c>
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
   12fe2:	9b03      	ldr	r3, [sp, #12]
   12fe4:	331a      	adds	r3, #26
   12fe6:	4618      	mov	r0, r3
   12fe8:	f7f9 f952 	bl	c290 <BdaIsZeros>
   12fec:	4603      	mov	r3, r0
   12fee:	2b00      	cmp	r3, #0
   12ff0:	d10c      	bne.n	1300c <smpScCatInitiatorBdAddr+0x50>
      {
        *pBuf++ = DM_ADDR_RANDOM;
   12ff2:	9b00      	ldr	r3, [sp, #0]
   12ff4:	1c5a      	adds	r2, r3, #1
   12ff6:	9200      	str	r2, [sp, #0]
   12ff8:	2201      	movs	r2, #1
   12ffa:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
   12ffc:	9b03      	ldr	r3, [sp, #12]
   12ffe:	331a      	adds	r3, #26
   13000:	2206      	movs	r2, #6
   13002:	4619      	mov	r1, r3
   13004:	9800      	ldr	r0, [sp, #0]
   13006:	f7f9 f994 	bl	c332 <WStrReverseCpy>
   1300a:	e02e      	b.n	1306a <smpScCatInitiatorBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->localAddrType;
   1300c:	9b00      	ldr	r3, [sp, #0]
   1300e:	1c5a      	adds	r2, r3, #1
   13010:	9200      	str	r2, [sp, #0]
   13012:	9a03      	ldr	r2, [sp, #12]
   13014:	7d12      	ldrb	r2, [r2, #20]
   13016:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   13018:	9b03      	ldr	r3, [sp, #12]
   1301a:	3306      	adds	r3, #6
   1301c:	2206      	movs	r2, #6
   1301e:	4619      	mov	r1, r3
   13020:	9800      	ldr	r0, [sp, #0]
   13022:	f7f9 f986 	bl	c332 <WStrReverseCpy>
   13026:	e020      	b.n	1306a <smpScCatInitiatorBdAddr+0xae>
      }
    }
    else
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
   13028:	9b03      	ldr	r3, [sp, #12]
   1302a:	3320      	adds	r3, #32
   1302c:	4618      	mov	r0, r3
   1302e:	f7f9 f92f 	bl	c290 <BdaIsZeros>
   13032:	4603      	mov	r3, r0
   13034:	2b00      	cmp	r3, #0
   13036:	d10c      	bne.n	13052 <smpScCatInitiatorBdAddr+0x96>
      {
        *pBuf++ = DM_ADDR_RANDOM;
   13038:	9b00      	ldr	r3, [sp, #0]
   1303a:	1c5a      	adds	r2, r3, #1
   1303c:	9200      	str	r2, [sp, #0]
   1303e:	2201      	movs	r2, #1
   13040:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
   13042:	9b03      	ldr	r3, [sp, #12]
   13044:	3320      	adds	r3, #32
   13046:	2206      	movs	r2, #6
   13048:	4619      	mov	r1, r3
   1304a:	9800      	ldr	r0, [sp, #0]
   1304c:	f7f9 f971 	bl	c332 <WStrReverseCpy>
   13050:	e00b      	b.n	1306a <smpScCatInitiatorBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->peerAddrType;
   13052:	9b00      	ldr	r3, [sp, #0]
   13054:	1c5a      	adds	r2, r3, #1
   13056:	9200      	str	r2, [sp, #0]
   13058:	9a03      	ldr	r2, [sp, #12]
   1305a:	7cd2      	ldrb	r2, [r2, #19]
   1305c:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   1305e:	9b03      	ldr	r3, [sp, #12]
   13060:	2206      	movs	r2, #6
   13062:	4619      	mov	r1, r3
   13064:	9800      	ldr	r0, [sp, #0]
   13066:	f7f9 f964 	bl	c332 <WStrReverseCpy>
      }
    }

    pBuf += BDA_ADDR_LEN;
   1306a:	9b00      	ldr	r3, [sp, #0]
   1306c:	3306      	adds	r3, #6
   1306e:	9300      	str	r3, [sp, #0]
  }

  return pBuf;
   13070:	9b00      	ldr	r3, [sp, #0]
}
   13072:	4618      	mov	r0, r3
   13074:	b005      	add	sp, #20
   13076:	f85d fb04 	ldr.w	pc, [sp], #4

0001307a <smpScCatResponderBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatResponderBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   1307a:	b500      	push	{lr}
   1307c:	b085      	sub	sp, #20
   1307e:	9001      	str	r0, [sp, #4]
   13080:	9100      	str	r1, [sp, #0]
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   13082:	9b01      	ldr	r3, [sp, #4]
   13084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   13088:	4618      	mov	r0, r3
   1308a:	f001 fe19 	bl	14cc0 <dmConnCcbById>
   1308e:	9003      	str	r0, [sp, #12]

  if (pDmCcb)
   13090:	9b03      	ldr	r3, [sp, #12]
   13092:	2b00      	cmp	r3, #0
   13094:	d04b      	beq.n	1312e <smpScCatResponderBdAddr+0xb4>
  {
    if (pCcb->initiator)
   13096:	9b01      	ldr	r3, [sp, #4]
   13098:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1309c:	2b00      	cmp	r3, #0
   1309e:	d021      	beq.n	130e4 <smpScCatResponderBdAddr+0x6a>
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
   130a0:	9b03      	ldr	r3, [sp, #12]
   130a2:	3320      	adds	r3, #32
   130a4:	4618      	mov	r0, r3
   130a6:	f7f9 f8f3 	bl	c290 <BdaIsZeros>
   130aa:	4603      	mov	r3, r0
   130ac:	2b00      	cmp	r3, #0
   130ae:	d10c      	bne.n	130ca <smpScCatResponderBdAddr+0x50>
      {
        *pBuf++ = DM_ADDR_RANDOM;
   130b0:	9b00      	ldr	r3, [sp, #0]
   130b2:	1c5a      	adds	r2, r3, #1
   130b4:	9200      	str	r2, [sp, #0]
   130b6:	2201      	movs	r2, #1
   130b8:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
   130ba:	9b03      	ldr	r3, [sp, #12]
   130bc:	3320      	adds	r3, #32
   130be:	2206      	movs	r2, #6
   130c0:	4619      	mov	r1, r3
   130c2:	9800      	ldr	r0, [sp, #0]
   130c4:	f7f9 f935 	bl	c332 <WStrReverseCpy>
   130c8:	e02e      	b.n	13128 <smpScCatResponderBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->peerAddrType;
   130ca:	9b00      	ldr	r3, [sp, #0]
   130cc:	1c5a      	adds	r2, r3, #1
   130ce:	9200      	str	r2, [sp, #0]
   130d0:	9a03      	ldr	r2, [sp, #12]
   130d2:	7cd2      	ldrb	r2, [r2, #19]
   130d4:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   130d6:	9b03      	ldr	r3, [sp, #12]
   130d8:	2206      	movs	r2, #6
   130da:	4619      	mov	r1, r3
   130dc:	9800      	ldr	r0, [sp, #0]
   130de:	f7f9 f928 	bl	c332 <WStrReverseCpy>
   130e2:	e021      	b.n	13128 <smpScCatResponderBdAddr+0xae>
      }
    }
    else
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
   130e4:	9b03      	ldr	r3, [sp, #12]
   130e6:	331a      	adds	r3, #26
   130e8:	4618      	mov	r0, r3
   130ea:	f7f9 f8d1 	bl	c290 <BdaIsZeros>
   130ee:	4603      	mov	r3, r0
   130f0:	2b00      	cmp	r3, #0
   130f2:	d10c      	bne.n	1310e <smpScCatResponderBdAddr+0x94>
      {
        *pBuf++ = DM_ADDR_RANDOM;
   130f4:	9b00      	ldr	r3, [sp, #0]
   130f6:	1c5a      	adds	r2, r3, #1
   130f8:	9200      	str	r2, [sp, #0]
   130fa:	2201      	movs	r2, #1
   130fc:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
   130fe:	9b03      	ldr	r3, [sp, #12]
   13100:	331a      	adds	r3, #26
   13102:	2206      	movs	r2, #6
   13104:	4619      	mov	r1, r3
   13106:	9800      	ldr	r0, [sp, #0]
   13108:	f7f9 f913 	bl	c332 <WStrReverseCpy>
   1310c:	e00c      	b.n	13128 <smpScCatResponderBdAddr+0xae>
      }
      else
      {
        *pBuf++ = pDmCcb->localAddrType;
   1310e:	9b00      	ldr	r3, [sp, #0]
   13110:	1c5a      	adds	r2, r3, #1
   13112:	9200      	str	r2, [sp, #0]
   13114:	9a03      	ldr	r2, [sp, #12]
   13116:	7d12      	ldrb	r2, [r2, #20]
   13118:	701a      	strb	r2, [r3, #0]
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   1311a:	9b03      	ldr	r3, [sp, #12]
   1311c:	3306      	adds	r3, #6
   1311e:	2206      	movs	r2, #6
   13120:	4619      	mov	r1, r3
   13122:	9800      	ldr	r0, [sp, #0]
   13124:	f7f9 f905 	bl	c332 <WStrReverseCpy>
      }
    }

    pBuf += BDA_ADDR_LEN;
   13128:	9b00      	ldr	r3, [sp, #0]
   1312a:	3306      	adds	r3, #6
   1312c:	9300      	str	r3, [sp, #0]
  }

  return pBuf;
   1312e:	9b00      	ldr	r3, [sp, #0]
}
   13130:	4618      	mov	r0, r3
   13132:	b005      	add	sp, #20
   13134:	f85d fb04 	ldr.w	pc, [sp], #4

00013138 <smpScProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpScProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
   13138:	b510      	push	{r4, lr}
   1313a:	b086      	sub	sp, #24
   1313c:	9003      	str	r0, [sp, #12]
   1313e:	9102      	str	r1, [sp, #8]
   13140:	9201      	str	r2, [sp, #4]
  bool_t          justWorks = TRUE;
   13142:	2301      	movs	r3, #1
   13144:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
   13148:	9b01      	ldr	r3, [sp, #4]
   1314a:	2200      	movs	r2, #0
   1314c:	701a      	strb	r2, [r3, #0]
  *pOob = SMP_OOB_DATA_NONE;
   1314e:	9b02      	ldr	r3, [sp, #8]
   13150:	2200      	movs	r2, #0
   13152:	701a      	strb	r2, [r3, #0]

  /* check for LE Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   13154:	9b03      	ldr	r3, [sp, #12]
   13156:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1315a:	f003 0308 	and.w	r3, r3, #8
   1315e:	2b00      	cmp	r3, #0
   13160:	d017      	beq.n	13192 <smpScProcPairing+0x5a>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
   13162:	9b03      	ldr	r3, [sp, #12]
   13164:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   13168:	f003 0308 	and.w	r3, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1316c:	2b00      	cmp	r3, #0
   1316e:	d010      	beq.n	13192 <smpScProcPairing+0x5a>
  {
    /* if one or both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   13170:	9b03      	ldr	r3, [sp, #12]
   13172:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   13176:	2b01      	cmp	r3, #1
   13178:	d004      	beq.n	13184 <smpScProcPairing+0x4c>
        (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT))
   1317a:	9b03      	ldr	r3, [sp, #12]
   1317c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   13180:	2b01      	cmp	r3, #1
   13182:	d117      	bne.n	131b4 <smpScProcPairing+0x7c>
    {
      *pOob = SMP_OOB_DATA_PRESENT;
   13184:	9b02      	ldr	r3, [sp, #8]
   13186:	2201      	movs	r2, #1
   13188:	701a      	strb	r2, [r3, #0]
      justWorks = FALSE;
   1318a:	2300      	movs	r3, #0
   1318c:	f88d 3017 	strb.w	r3, [sp, #23]
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   13190:	e010      	b.n	131b4 <smpScProcPairing+0x7c>
  }
  /* legacy pairing */
  else
  {
    /* if both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
   13192:	9b03      	ldr	r3, [sp, #12]
   13194:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   13198:	2b01      	cmp	r3, #1
   1319a:	d10c      	bne.n	131b6 <smpScProcPairing+0x7e>
        (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT))
   1319c:	9b03      	ldr	r3, [sp, #12]
   1319e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
   131a2:	2b01      	cmp	r3, #1
   131a4:	d107      	bne.n	131b6 <smpScProcPairing+0x7e>
    {
      *pOob = SMP_OOB_DATA_PRESENT;
   131a6:	9b02      	ldr	r3, [sp, #8]
   131a8:	2201      	movs	r2, #1
   131aa:	701a      	strb	r2, [r3, #0]
      justWorks = FALSE;
   131ac:	2300      	movs	r3, #0
   131ae:	f88d 3017 	strb.w	r3, [sp, #23]
   131b2:	e000      	b.n	131b6 <smpScProcPairing+0x7e>
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   131b4:	bf00      	nop
    }
  }

  /* if OOB authentication data not present and either device has set MITM option */
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   131b6:	9b02      	ldr	r3, [sp, #8]
   131b8:	781b      	ldrb	r3, [r3, #0]
   131ba:	2b00      	cmp	r3, #0
   131bc:	d168      	bne.n	13290 <smpScProcPairing+0x158>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   131be:	9b03      	ldr	r3, [sp, #12]
   131c0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   131c4:	f003 0304 	and.w	r3, r3, #4
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   131c8:	2b00      	cmp	r3, #0
   131ca:	d106      	bne.n	131da <smpScProcPairing+0xa2>
       (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG)))
   131cc:	9b03      	ldr	r3, [sp, #12]
   131ce:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   131d2:	f003 0304 	and.w	r3, r3, #4
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   131d6:	2b00      	cmp	r3, #0
   131d8:	d05a      	beq.n	13290 <smpScProcPairing+0x158>
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   131da:	9b03      	ldr	r3, [sp, #12]
   131dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   131e0:	2b03      	cmp	r3, #3
   131e2:	d055      	beq.n	13290 <smpScProcPairing+0x158>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   131e4:	9b03      	ldr	r3, [sp, #12]
   131e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   131ea:	2b03      	cmp	r3, #3
   131ec:	d050      	beq.n	13290 <smpScProcPairing+0x158>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   131ee:	9b03      	ldr	r3, [sp, #12]
   131f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   131f4:	2b00      	cmp	r3, #0
   131f6:	d004      	beq.n	13202 <smpScProcPairing+0xca>
           (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO)) &&
   131f8:	9b03      	ldr	r3, [sp, #12]
   131fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   131fe:	2b01      	cmp	r3, #1
   13200:	d109      	bne.n	13216 <smpScProcPairing+0xde>
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
   13202:	9b03      	ldr	r3, [sp, #12]
   13204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   13208:	2b00      	cmp	r3, #0
   1320a:	d041      	beq.n	13290 <smpScProcPairing+0x158>
           (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO))))
   1320c:	9b03      	ldr	r3, [sp, #12]
   1320e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||
   13212:	2b01      	cmp	r3, #1
   13214:	d03c      	beq.n	13290 <smpScProcPairing+0x158>
    {
      /* use pin */
      justWorks = FALSE;
   13216:	2300      	movs	r3, #0
   13218:	f88d 3017 	strb.w	r3, [sp, #23]

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
   1321c:	9b03      	ldr	r3, [sp, #12]
   1321e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   13222:	2b00      	cmp	r3, #0
   13224:	d013      	beq.n	1324e <smpScProcPairing+0x116>
   13226:	9b03      	ldr	r3, [sp, #12]
   13228:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
   1322c:	2b01      	cmp	r3, #1
   1322e:	d00e      	beq.n	1324e <smpScProcPairing+0x116>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   13230:	9b03      	ldr	r3, [sp, #12]
   13232:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   13236:	2b04      	cmp	r3, #4
   13238:	d10b      	bne.n	13252 <smpScProcPairing+0x11a>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1323a:	9b03      	ldr	r3, [sp, #12]
   1323c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   13240:	2b02      	cmp	r3, #2
   13242:	d004      	beq.n	1324e <smpScProcPairing+0x116>
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));
   13244:	9b03      	ldr	r3, [sp, #12]
   13246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1324a:	2b04      	cmp	r3, #4
   1324c:	d101      	bne.n	13252 <smpScProcPairing+0x11a>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1324e:	2301      	movs	r3, #1
   13250:	e000      	b.n	13254 <smpScProcPairing+0x11c>
   13252:	2300      	movs	r3, #0
      *pDisplay =
   13254:	b2da      	uxtb	r2, r3
   13256:	9b01      	ldr	r3, [sp, #4]
   13258:	701a      	strb	r2, [r3, #0]

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1325a:	9b03      	ldr	r3, [sp, #12]
   1325c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   13260:	2b02      	cmp	r3, #2
   13262:	d104      	bne.n	1326e <smpScProcPairing+0x136>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
   13264:	9b03      	ldr	r3, [sp, #12]
   13266:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1326a:	2b02      	cmp	r3, #2
   1326c:	d010      	beq.n	13290 <smpScProcPairing+0x158>
      {
        *pDisplay ^= !pCcb->initiator;
   1326e:	9b01      	ldr	r3, [sp, #4]
   13270:	781b      	ldrb	r3, [r3, #0]
   13272:	b25a      	sxtb	r2, r3
   13274:	9b03      	ldr	r3, [sp, #12]
   13276:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1327a:	2b00      	cmp	r3, #0
   1327c:	bf0c      	ite	eq
   1327e:	2301      	moveq	r3, #1
   13280:	2300      	movne	r3, #0
   13282:	b2db      	uxtb	r3, r3
   13284:	b25b      	sxtb	r3, r3
   13286:	4053      	eors	r3, r2
   13288:	b25b      	sxtb	r3, r3
   1328a:	b2da      	uxtb	r2, r3
   1328c:	9b01      	ldr	r3, [sp, #4]
   1328e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Check for Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   13290:	9b03      	ldr	r3, [sp, #12]
   13292:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   13296:	f003 0308 	and.w	r3, r3, #8
   1329a:	2b00      	cmp	r3, #0
   1329c:	f000 80d0 	beq.w	13440 <smpScProcPairing+0x308>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
   132a0:	9b03      	ldr	r3, [sp, #12]
   132a2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   132a6:	f003 0308 	and.w	r3, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   132aa:	2b00      	cmp	r3, #0
   132ac:	f000 80c8 	beq.w	13440 <smpScProcPairing+0x308>
  {
    if (smpCb.lescSupported == FALSE)
   132b0:	4ba2      	ldr	r3, [pc, #648]	; (1353c <smpScProcPairing+0x404>)
   132b2:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
   132b6:	2b00      	cmp	r3, #0
   132b8:	d112      	bne.n	132e0 <smpScProcPairing+0x1a8>
    {
      /* cancel pairing if LESC is not initialized by application */
      hdr.param = pCcb->connId;
   132ba:	9b03      	ldr	r3, [sp, #12]
   132bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   132c0:	b29b      	uxth	r3, r3
   132c2:	f8ad 3010 	strh.w	r3, [sp, #16]
      hdr.status = SMP_ERR_AUTH_REQ;
   132c6:	2303      	movs	r3, #3
   132c8:	f88d 3013 	strb.w	r3, [sp, #19]
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   132cc:	2303      	movs	r3, #3
   132ce:	f88d 3012 	strb.w	r3, [sp, #18]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   132d2:	ab04      	add	r3, sp, #16
   132d4:	4619      	mov	r1, r3
   132d6:	9803      	ldr	r0, [sp, #12]
   132d8:	f7fe fed8 	bl	1208c <smpSmExecute>
      return FALSE;
   132dc:	2300      	movs	r3, #0
   132de:	e155      	b.n	1358c <smpScProcPairing+0x454>
    }
    else
    {
      pCcb->pScCcb->lescEnabled = TRUE;
   132e0:	9b03      	ldr	r3, [sp, #12]
   132e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   132e4:	2201      	movs	r2, #1
   132e6:	701a      	strb	r2, [r3, #0]
      pCcb->pScCcb->authType = SMP_AUTH_TYPE_JUST_WORKS;
   132e8:	9b03      	ldr	r3, [sp, #12]
   132ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   132ec:	2201      	movs	r2, #1
   132ee:	705a      	strb	r2, [r3, #1]
      pCcb->pScCcb->display = *pDisplay;
   132f0:	9b03      	ldr	r3, [sp, #12]
   132f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   132f4:	9a01      	ldr	r2, [sp, #4]
   132f6:	7812      	ldrb	r2, [r2, #0]
   132f8:	711a      	strb	r2, [r3, #4]

      if (*pOob)
   132fa:	9b02      	ldr	r3, [sp, #8]
   132fc:	781b      	ldrb	r3, [r3, #0]
   132fe:	2b00      	cmp	r3, #0
   13300:	d004      	beq.n	1330c <smpScProcPairing+0x1d4>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_OOB;
   13302:	9b03      	ldr	r3, [sp, #12]
   13304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13306:	2202      	movs	r2, #2
   13308:	705a      	strb	r2, [r3, #1]
   1330a:	e057      	b.n	133bc <smpScProcPairing+0x284>
      }
      else if (justWorks == FALSE)
   1330c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   13310:	2b00      	cmp	r3, #0
   13312:	d134      	bne.n	1337e <smpScProcPairing+0x246>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_PASSKEY;
   13314:	9b03      	ldr	r3, [sp, #12]
   13316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13318:	2203      	movs	r2, #3
   1331a:	705a      	strb	r2, [r3, #1]

        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1331c:	9b03      	ldr	r3, [sp, #12]
   1331e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   13322:	2b04      	cmp	r3, #4
   13324:	d109      	bne.n	1333a <smpScProcPairing+0x202>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   13326:	9b03      	ldr	r3, [sp, #12]
   13328:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1332c:	2b01      	cmp	r3, #1
   1332e:	d00e      	beq.n	1334e <smpScProcPairing+0x216>
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
   13330:	9b03      	ldr	r3, [sp, #12]
   13332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   13336:	2b04      	cmp	r3, #4
   13338:	d009      	beq.n	1334e <smpScProcPairing+0x216>

            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1333a:	9b03      	ldr	r3, [sp, #12]
   1333c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
   13340:	2b01      	cmp	r3, #1
   13342:	d109      	bne.n	13358 <smpScProcPairing+0x220>
             (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP)))
   13344:	9b03      	ldr	r3, [sp, #12]
   13346:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1334a:	2b04      	cmp	r3, #4
   1334c:	d104      	bne.n	13358 <smpScProcPairing+0x220>
        {
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   1334e:	9b03      	ldr	r3, [sp, #12]
   13350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13352:	2204      	movs	r2, #4
   13354:	705a      	strb	r2, [r3, #1]
   13356:	e031      	b.n	133bc <smpScProcPairing+0x284>
        }
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
   13358:	9b03      	ldr	r3, [sp, #12]
   1335a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1335e:	f003 0310 	and.w	r3, r3, #16
   13362:	2b00      	cmp	r3, #0
   13364:	d02a      	beq.n	133bc <smpScProcPairing+0x284>
                 (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG))
   13366:	9b03      	ldr	r3, [sp, #12]
   13368:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1336c:	f003 0310 	and.w	r3, r3, #16
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
   13370:	2b00      	cmp	r3, #0
   13372:	d023      	beq.n	133bc <smpScProcPairing+0x284>
        {
          pCcb->pScCcb->kpNotify = TRUE;
   13374:	9b03      	ldr	r3, [sp, #12]
   13376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13378:	2201      	movs	r2, #1
   1337a:	709a      	strb	r2, [r3, #2]
   1337c:	e01e      	b.n	133bc <smpScProcPairing+0x284>
        }
      }
      else
      {
        /* Check for numeric comparison */
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1337e:	9b03      	ldr	r3, [sp, #12]
   13380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   13384:	2b01      	cmp	r3, #1
   13386:	d10c      	bne.n	133a2 <smpScProcPairing+0x26a>
            (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO))
   13388:	9b03      	ldr	r3, [sp, #12]
   1338a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1338e:	2b01      	cmp	r3, #1
   13390:	d107      	bne.n	133a2 <smpScProcPairing+0x26a>
        {
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   13392:	9b03      	ldr	r3, [sp, #12]
   13394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13396:	2204      	movs	r2, #4
   13398:	705a      	strb	r2, [r3, #1]

          /* set false to add in MITM below */
          justWorks = FALSE;
   1339a:	2300      	movs	r3, #0
   1339c:	f88d 3017 	strb.w	r3, [sp, #23]
   133a0:	e00c      	b.n	133bc <smpScProcPairing+0x284>
        }
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
   133a2:	9b03      	ldr	r3, [sp, #12]
   133a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   133a8:	2b03      	cmp	r3, #3
   133aa:	d004      	beq.n	133b6 <smpScProcPairing+0x27e>
            (pCcb->pairReq[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT))
   133ac:	9b03      	ldr	r3, [sp, #12]
   133ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
   133b2:	2b03      	cmp	r3, #3
   133b4:	d102      	bne.n	133bc <smpScProcPairing+0x284>
        {
          /* BT Spec v5.2 Vol 3 Part H C.2.2.2.1 */
          /* Allow for MITM bit being set for "Just works" */
          /* if a device has no in/out capabilities */
          justWorks = FALSE;
   133b6:	2300      	movs	r3, #0
   133b8:	f88d 3017 	strb.w	r3, [sp, #23]
        }

      }
    }

    hdr.param = pCcb->connId;
   133bc:	9b03      	ldr	r3, [sp, #12]
   133be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   133c2:	b29b      	uxth	r3, r3
   133c4:	f8ad 3010 	strh.w	r3, [sp, #16]

    /* Allocate a scratch pad for Peer Key and CMAC calculations */
    if (SmpScAllocScratchBuffers(pCcb))
   133c8:	9803      	ldr	r0, [sp, #12]
   133ca:	f000 fd12 	bl	13df2 <SmpScAllocScratchBuffers>
   133ce:	4603      	mov	r3, r0
   133d0:	2b00      	cmp	r3, #0
   133d2:	d029      	beq.n	13428 <smpScProcPairing+0x2f0>
    {
      /* Store the current ECC key */
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyX, DmSecGetEccKey()->pubKey_x, SMP_PUB_KEY_LEN);
   133d4:	9b03      	ldr	r3, [sp, #12]
   133d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   133d8:	68db      	ldr	r3, [r3, #12]
   133da:	461c      	mov	r4, r3
   133dc:	f003 fb92 	bl	16b04 <DmSecGetEccKey>
   133e0:	4603      	mov	r3, r0
   133e2:	2220      	movs	r2, #32
   133e4:	4619      	mov	r1, r3
   133e6:	4620      	mov	r0, r4
   133e8:	f7f8 fe8a 	bl	c100 <memcpy>
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyY, DmSecGetEccKey()->pubKey_y, SMP_PUB_KEY_LEN);
   133ec:	9b03      	ldr	r3, [sp, #12]
   133ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   133f0:	68db      	ldr	r3, [r3, #12]
   133f2:	f103 0420 	add.w	r4, r3, #32
   133f6:	f003 fb85 	bl	16b04 <DmSecGetEccKey>
   133fa:	4603      	mov	r3, r0
   133fc:	3320      	adds	r3, #32
   133fe:	2220      	movs	r2, #32
   13400:	4619      	mov	r1, r3
   13402:	4620      	mov	r0, r4
   13404:	f7f8 fe7c 	bl	c100 <memcpy>
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
   13408:	9b03      	ldr	r3, [sp, #12]
   1340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1340c:	691c      	ldr	r4, [r3, #16]
   1340e:	f003 fb79 	bl	16b04 <DmSecGetEccKey>
   13412:	4603      	mov	r3, r0
   13414:	3340      	adds	r3, #64	; 0x40
   13416:	2220      	movs	r2, #32
   13418:	4619      	mov	r1, r3
   1341a:	4620      	mov	r0, r4
   1341c:	f7f8 fe70 	bl	c100 <memcpy>

      /* Send internal message indicating LESC was requested */
      hdr.event = SMP_MSG_INT_LESC;
   13420:	2311      	movs	r3, #17
   13422:	f88d 3012 	strb.w	r3, [sp, #18]
   13426:	e005      	b.n	13434 <smpScProcPairing+0x2fc>
    }
    else
    {
      hdr.status = SMP_ERR_UNSPECIFIED;
   13428:	2308      	movs	r3, #8
   1342a:	f88d 3013 	strb.w	r3, [sp, #19]
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   1342e:	2303      	movs	r3, #3
   13430:	f88d 3012 	strb.w	r3, [sp, #18]
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   13434:	ab04      	add	r3, sp, #16
   13436:	4619      	mov	r1, r3
   13438:	9803      	ldr	r0, [sp, #12]
   1343a:	f7fe fe27 	bl	1208c <smpSmExecute>
   1343e:	e02b      	b.n	13498 <smpScProcPairing+0x360>
  }
  else if ((pSmpCfg->auth & SMP_AUTH_SC_FLAG) != 0)
   13440:	4b3f      	ldr	r3, [pc, #252]	; (13540 <smpScProcPairing+0x408>)
   13442:	681b      	ldr	r3, [r3, #0]
   13444:	7a1b      	ldrb	r3, [r3, #8]
   13446:	f003 0308 	and.w	r3, r3, #8
   1344a:	2b00      	cmp	r3, #0
   1344c:	d012      	beq.n	13474 <smpScProcPairing+0x33c>
  {
    /* cancel pairing if configuration requires LESC and we are falling back to legacy */
    hdr.param = pCcb->connId;
   1344e:	9b03      	ldr	r3, [sp, #12]
   13450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   13454:	b29b      	uxth	r3, r3
   13456:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_AUTH_REQ;
   1345a:	2303      	movs	r3, #3
   1345c:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   13460:	2303      	movs	r3, #3
   13462:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   13466:	ab04      	add	r3, sp, #16
   13468:	4619      	mov	r1, r3
   1346a:	9803      	ldr	r0, [sp, #12]
   1346c:	f7fe fe0e 	bl	1208c <smpSmExecute>
    return FALSE;
   13470:	2300      	movs	r3, #0
   13472:	e08b      	b.n	1358c <smpScProcPairing+0x454>
  }
  else
  {
    /* in case we're falling back to legacy after being paired with SC */
    pCcb->pScCcb->lescEnabled = FALSE;
   13474:	9b03      	ldr	r3, [sp, #12]
   13476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13478:	2200      	movs	r2, #0
   1347a:	701a      	strb	r2, [r3, #0]

    /* Send internal message indicating legacy security was requested */
    hdr.param = pCcb->connId;
   1347c:	9b03      	ldr	r3, [sp, #12]
   1347e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   13482:	b29b      	uxth	r3, r3
   13484:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.event = SMP_MSG_INT_LEGACY;
   13488:	2312      	movs	r3, #18
   1348a:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1348e:	ab04      	add	r3, sp, #16
   13490:	4619      	mov	r1, r3
   13492:	9803      	ldr	r0, [sp, #12]
   13494:	f7fe fdfa 	bl	1208c <smpSmExecute>
  }

  if (!justWorks)
   13498:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1349c:	2b00      	cmp	r3, #0
   1349e:	d10e      	bne.n	134be <smpScProcPairing+0x386>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   134a0:	9b03      	ldr	r3, [sp, #12]
   134a2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   134a6:	9b03      	ldr	r3, [sp, #12]
   134a8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   134ac:	4013      	ands	r3, r2
   134ae:	b2db      	uxtb	r3, r3
   134b0:	f043 0304 	orr.w	r3, r3, #4
   134b4:	b2da      	uxtb	r2, r3
   134b6:	9b03      	ldr	r3, [sp, #12]
   134b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   134bc:	e00d      	b.n	134da <smpScProcPairing+0x3a2>
  }
  else
  {
    /* set auth flags with mitm bit cleared */
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   134be:	9b03      	ldr	r3, [sp, #12]
   134c0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   134c4:	9b03      	ldr	r3, [sp, #12]
   134c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   134ca:	4013      	ands	r3, r2
   134cc:	b2db      	uxtb	r3, r3
   134ce:	f023 0304 	bic.w	r3, r3, #4
   134d2:	b2da      	uxtb	r2, r3
   134d4:	9b03      	ldr	r3, [sp, #12]
   134d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   134da:	9b03      	ldr	r3, [sp, #12]
   134dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   134e0:	2b00      	cmp	r3, #0
   134e2:	d003      	beq.n	134ec <smpScProcPairing+0x3b4>
   134e4:	9b03      	ldr	r3, [sp, #12]
   134e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   134ea:	e002      	b.n	134f2 <smpScProcPairing+0x3ba>
   134ec:	9b03      	ldr	r3, [sp, #12]
   134ee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   134f2:	f88d 3016 	strb.w	r3, [sp, #22]
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   134f6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   134fa:	2b00      	cmp	r3, #0
   134fc:	d022      	beq.n	13544 <smpScProcPairing+0x40c>
   134fe:	4b10      	ldr	r3, [pc, #64]	; (13540 <smpScProcPairing+0x408>)
   13500:	681b      	ldr	r3, [r3, #0]
   13502:	7a1a      	ldrb	r2, [r3, #8]
   13504:	f89d 3016 	ldrb.w	r3, [sp, #22]
   13508:	4013      	ands	r3, r2
   1350a:	b2db      	uxtb	r3, r3
   1350c:	f003 0304 	and.w	r3, r3, #4
   13510:	2b00      	cmp	r3, #0
   13512:	d017      	beq.n	13544 <smpScProcPairing+0x40c>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
   13514:	9b03      	ldr	r3, [sp, #12]
   13516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1351a:	b29b      	uxth	r3, r3
   1351c:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_AUTH_REQ;
   13520:	2303      	movs	r3, #3
   13522:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   13526:	2303      	movs	r3, #3
   13528:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1352c:	ab04      	add	r3, sp, #16
   1352e:	4619      	mov	r1, r3
   13530:	9803      	ldr	r0, [sp, #12]
   13532:	f7fe fdab 	bl	1208c <smpSmExecute>
    return FALSE;
   13536:	2300      	movs	r3, #0
   13538:	e028      	b.n	1358c <smpScProcPairing+0x454>
   1353a:	bf00      	nop
   1353c:	100042a4 	.word	0x100042a4
   13540:	10002bb4 	.word	0x10002bb4
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   13544:	9b03      	ldr	r3, [sp, #12]
   13546:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1354a:	4b12      	ldr	r3, [pc, #72]	; (13594 <smpScProcPairing+0x45c>)
   1354c:	681b      	ldr	r3, [r3, #0]
   1354e:	795b      	ldrb	r3, [r3, #5]
   13550:	429a      	cmp	r2, r3
   13552:	d307      	bcc.n	13564 <smpScProcPairing+0x42c>
      pCcb->pairRsp[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen)
   13554:	9b03      	ldr	r3, [sp, #12]
   13556:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   1355a:	4b0e      	ldr	r3, [pc, #56]	; (13594 <smpScProcPairing+0x45c>)
   1355c:	681b      	ldr	r3, [r3, #0]
   1355e:	795b      	ldrb	r3, [r3, #5]
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   13560:	429a      	cmp	r2, r3
   13562:	d212      	bcs.n	1358a <smpScProcPairing+0x452>
  {
    /* cancel pairing */
    hdr.param = pCcb->connId;
   13564:	9b03      	ldr	r3, [sp, #12]
   13566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1356a:	b29b      	uxth	r3, r3
   1356c:	f8ad 3010 	strh.w	r3, [sp, #16]
    hdr.status = SMP_ERR_ENC_KEY_SIZE;
   13570:	2306      	movs	r3, #6
   13572:	f88d 3013 	strb.w	r3, [sp, #19]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   13576:	2303      	movs	r3, #3
   13578:	f88d 3012 	strb.w	r3, [sp, #18]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1357c:	ab04      	add	r3, sp, #16
   1357e:	4619      	mov	r1, r3
   13580:	9803      	ldr	r0, [sp, #12]
   13582:	f7fe fd83 	bl	1208c <smpSmExecute>
    return FALSE;
   13586:	2300      	movs	r3, #0
   13588:	e000      	b.n	1358c <smpScProcPairing+0x454>
  }

  return TRUE;
   1358a:	2301      	movs	r3, #1
}
   1358c:	4618      	mov	r0, r3
   1358e:	b006      	add	sp, #24
   13590:	bd10      	pop	{r4, pc}
   13592:	bf00      	nop
   13594:	10002bb4 	.word	0x10002bb4

00013598 <smpScAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
   13598:	b500      	push	{lr}
   1359a:	b089      	sub	sp, #36	; 0x24
   1359c:	9001      	str	r0, [sp, #4]
   1359e:	460b      	mov	r3, r1
   135a0:	f88d 3003 	strb.w	r3, [sp, #3]
   135a4:	4613      	mov	r3, r2
   135a6:	f88d 3002 	strb.w	r3, [sp, #2]
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   135aa:	9b01      	ldr	r3, [sp, #4]
   135ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   135ae:	781b      	ldrb	r3, [r3, #0]
   135b0:	2b00      	cmp	r3, #0
   135b2:	d106      	bne.n	135c2 <smpScAuthReq+0x2a>
   135b4:	9b01      	ldr	r3, [sp, #4]
   135b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   135ba:	f003 0304 	and.w	r3, r3, #4
   135be:	2b00      	cmp	r3, #0
   135c0:	d109      	bne.n	135d6 <smpScAuthReq+0x3e>
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
   135c2:	9b01      	ldr	r3, [sp, #4]
   135c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   135c6:	781b      	ldrb	r3, [r3, #0]
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   135c8:	2b00      	cmp	r3, #0
   135ca:	d01a      	beq.n	13602 <smpScAuthReq+0x6a>
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
   135cc:	9b01      	ldr	r3, [sp, #4]
   135ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   135d0:	785b      	ldrb	r3, [r3, #1]
   135d2:	2b02      	cmp	r3, #2
   135d4:	d115      	bne.n	13602 <smpScAuthReq+0x6a>
  {
    /* request pin or oob from user */
    buf.authReq.hdr.param = pCcb->connId;
   135d6:	9b01      	ldr	r3, [sp, #4]
   135d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   135dc:	b29b      	uxth	r3, r3
   135de:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   135e2:	232e      	movs	r3, #46	; 0x2e
   135e4:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authReq.oob = oob;
   135e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   135ec:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authReq.display = display;
   135f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   135f4:	f88d 300d 	strb.w	r3, [sp, #13]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   135f8:	ab02      	add	r3, sp, #8
   135fa:	4618      	mov	r0, r3
   135fc:	f003 f988 	bl	16910 <DmSmpCbackExec>
   13600:	e01a      	b.n	13638 <smpScAuthReq+0xa0>
  }
  else
  {
    /* else use just works; send ourselves a auth rsp with all zero pin */
    buf.authRsp.hdr.param = pCcb->connId;
   13602:	9b01      	ldr	r3, [sp, #4]
   13604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   13608:	b29b      	uxth	r3, r3
   1360a:	f8ad 3008 	strh.w	r3, [sp, #8]
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1360e:	2304      	movs	r3, #4
   13610:	f88d 300a 	strb.w	r3, [sp, #10]
    buf.authRsp.authData[0] = 0;
   13614:	2300      	movs	r3, #0
   13616:	f88d 300c 	strb.w	r3, [sp, #12]
    buf.authRsp.authData[1] = 0;
   1361a:	2300      	movs	r3, #0
   1361c:	f88d 300d 	strb.w	r3, [sp, #13]
    buf.authRsp.authData[2] = 0;
   13620:	2300      	movs	r3, #0
   13622:	f88d 300e 	strb.w	r3, [sp, #14]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   13626:	2303      	movs	r3, #3
   13628:	f88d 301c 	strb.w	r3, [sp, #28]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1362c:	ab02      	add	r3, sp, #8
   1362e:	4619      	mov	r1, r3
   13630:	9801      	ldr	r0, [sp, #4]
   13632:	f7fe fd2b 	bl	1208c <smpSmExecute>
  }
}
   13636:	bf00      	nop
   13638:	bf00      	nop
   1363a:	b009      	add	sp, #36	; 0x24
   1363c:	f85d fb04 	ldr.w	pc, [sp], #4

00013640 <smpScActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13640:	b500      	push	{lr}
   13642:	b083      	sub	sp, #12
   13644:	9001      	str	r0, [sp, #4]
   13646:	9100      	str	r1, [sp, #0]
  smpActCleanup(pCcb, pMsg);
   13648:	9900      	ldr	r1, [sp, #0]
   1364a:	9801      	ldr	r0, [sp, #4]
   1364c:	f7fe f82f 	bl	116ae <smpActCleanup>

  /* Free scratch buffers */
  SmpScFreeScratchBuffers(pCcb);
   13650:	9801      	ldr	r0, [sp, #4]
   13652:	f000 fc2c 	bl	13eae <SmpScFreeScratchBuffers>
}
   13656:	bf00      	nop
   13658:	b003      	add	sp, #12
   1365a:	f85d fb04 	ldr.w	pc, [sp], #4

0001365e <smpScActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1365e:	b500      	push	{lr}
   13660:	b083      	sub	sp, #12
   13662:	9001      	str	r0, [sp, #4]
   13664:	9100      	str	r1, [sp, #0]
  /* Perform LESC Cleanup */
  smpScActCleanup(pCcb, pMsg);
   13666:	9900      	ldr	r1, [sp, #0]
   13668:	9801      	ldr	r0, [sp, #4]
   1366a:	f7ff ffe9 	bl	13640 <smpScActCleanup>

  /* Process failure */
  smpActPairingFailed(pCcb, pMsg);
   1366e:	9900      	ldr	r1, [sp, #0]
   13670:	9801      	ldr	r0, [sp, #4]
   13672:	f7fe f84a 	bl	1170a <smpActPairingFailed>
}
   13676:	bf00      	nop
   13678:	b003      	add	sp, #12
   1367a:	f85d fb04 	ldr.w	pc, [sp], #4

0001367e <smpScActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1367e:	b500      	push	{lr}
   13680:	b083      	sub	sp, #12
   13682:	9001      	str	r0, [sp, #4]
   13684:	9100      	str	r1, [sp, #0]
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   13686:	9b00      	ldr	r3, [sp, #0]
   13688:	78db      	ldrb	r3, [r3, #3]
   1368a:	4619      	mov	r1, r3
   1368c:	9801      	ldr	r0, [sp, #4]
   1368e:	f7fe f819 	bl	116c4 <smpSendPairingFailed>

  smpScActPairingFailed(pCcb, pMsg);
   13692:	9900      	ldr	r1, [sp, #0]
   13694:	9801      	ldr	r0, [sp, #4]
   13696:	f7ff ffe2 	bl	1365e <smpScActPairingFailed>
}
   1369a:	bf00      	nop
   1369c:	b003      	add	sp, #12
   1369e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000136a4 <smpScActAuthSelect>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActAuthSelect(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   136a4:	b500      	push	{lr}
   136a6:	b085      	sub	sp, #20
   136a8:	9001      	str	r0, [sp, #4]
   136aa:	9100      	str	r1, [sp, #0]
  wsfMsgHdr_t hdr;
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;
   136ac:	9b00      	ldr	r3, [sp, #0]
   136ae:	685b      	ldr	r3, [r3, #4]
   136b0:	3308      	adds	r3, #8
   136b2:	9303      	str	r3, [sp, #12]

  /* Process public key from peer (store in MSB first format) */
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
   136b4:	9b01      	ldr	r3, [sp, #4]
   136b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   136b8:	689b      	ldr	r3, [r3, #8]
   136ba:	4618      	mov	r0, r3
   136bc:	9b03      	ldr	r3, [sp, #12]
   136be:	3301      	adds	r3, #1
   136c0:	2220      	movs	r2, #32
   136c2:	4619      	mov	r1, r3
   136c4:	f7f8 fe35 	bl	c332 <WStrReverseCpy>
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyY, &pPacket[SMP_PUB_KEY_Y_POS], SMP_PUB_KEY_LEN);
   136c8:	9b01      	ldr	r3, [sp, #4]
   136ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   136cc:	689b      	ldr	r3, [r3, #8]
   136ce:	f103 0020 	add.w	r0, r3, #32
   136d2:	9b03      	ldr	r3, [sp, #12]
   136d4:	3321      	adds	r3, #33	; 0x21
   136d6:	2220      	movs	r2, #32
   136d8:	4619      	mov	r1, r3
   136da:	f7f8 fe2a 	bl	c332 <WStrReverseCpy>

  /* Message state machine indicating authorization mode (JW, OOB, or passkey) */
  hdr.param = pCcb->connId;
   136de:	9b01      	ldr	r3, [sp, #4]
   136e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   136e4:	b29b      	uxth	r3, r3
   136e6:	f8ad 3008 	strh.w	r3, [sp, #8]

  switch(pCcb->pScCcb->authType)
   136ea:	9b01      	ldr	r3, [sp, #4]
   136ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   136ee:	785b      	ldrb	r3, [r3, #1]
   136f0:	3b01      	subs	r3, #1
   136f2:	2b03      	cmp	r3, #3
   136f4:	d816      	bhi.n	13724 <smpScActAuthSelect+0x80>
   136f6:	a201      	add	r2, pc, #4	; (adr r2, 136fc <smpScActAuthSelect+0x58>)
   136f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   136fc:	0001370d 	.word	0x0001370d
   13700:	00013715 	.word	0x00013715
   13704:	0001371d 	.word	0x0001371d
   13708:	0001370d 	.word	0x0001370d
  {
  case SMP_AUTH_TYPE_NUM_COMP:
  case SMP_AUTH_TYPE_JUST_WORKS:
    hdr.event = SMP_MSG_INT_JW_NC;
   1370c:	2313      	movs	r3, #19
   1370e:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
   13712:	e00e      	b.n	13732 <smpScActAuthSelect+0x8e>
  case SMP_AUTH_TYPE_OOB:
    hdr.event = SMP_MSG_INT_OOB;
   13714:	2315      	movs	r3, #21
   13716:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
   1371a:	e00a      	b.n	13732 <smpScActAuthSelect+0x8e>
  case SMP_AUTH_TYPE_PASSKEY:
    hdr.event = SMP_MSG_INT_PASSKEY;
   1371c:	2314      	movs	r3, #20
   1371e:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
   13722:	e006      	b.n	13732 <smpScActAuthSelect+0x8e>
  default:
    hdr.status = SMP_ERR_UNSPECIFIED;
   13724:	2308      	movs	r3, #8
   13726:	f88d 300b 	strb.w	r3, [sp, #11]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1372a:	2303      	movs	r3, #3
   1372c:	f88d 300a 	strb.w	r3, [sp, #10]
    break;
   13730:	bf00      	nop
  }

  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   13732:	ab02      	add	r3, sp, #8
   13734:	4619      	mov	r1, r3
   13736:	9801      	ldr	r0, [sp, #4]
   13738:	f7fe fca8 	bl	1208c <smpSmExecute>
}
   1373c:	bf00      	nop
   1373e:	b005      	add	sp, #20
   13740:	f85d fb04 	ldr.w	pc, [sp], #4

00013744 <smpScActPkSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13744:	b500      	push	{lr}
   13746:	b089      	sub	sp, #36	; 0x24
   13748:	9001      	str	r0, [sp, #4]
   1374a:	9100      	str	r1, [sp, #0]
  {
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  pCcb->pScCcb->pkPos = 0;
   1374c:	9b01      	ldr	r3, [sp, #4]
   1374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13750:	2200      	movs	r2, #0
   13752:	70da      	strb	r2, [r3, #3]

  /* Next command is the Pair Confirm */
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   13754:	9b01      	ldr	r3, [sp, #4]
   13756:	2203      	movs	r2, #3
   13758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

  /* request pin or oob from user */
  buf.authReq.hdr.param = pCcb->connId;
   1375c:	9b01      	ldr	r3, [sp, #4]
   1375e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   13762:	b29b      	uxth	r3, r3
   13764:	f8ad 3008 	strh.w	r3, [sp, #8]
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   13768:	232e      	movs	r3, #46	; 0x2e
   1376a:	f88d 300a 	strb.w	r3, [sp, #10]
  buf.authReq.oob = FALSE;
   1376e:	2300      	movs	r3, #0
   13770:	f88d 300c 	strb.w	r3, [sp, #12]
  buf.authReq.display = pCcb->pScCcb->display;
   13774:	9b01      	ldr	r3, [sp, #4]
   13776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13778:	791b      	ldrb	r3, [r3, #4]
   1377a:	f88d 300d 	strb.w	r3, [sp, #13]
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
   1377e:	ab02      	add	r3, sp, #8
   13780:	4618      	mov	r0, r3
   13782:	f003 f8c5 	bl	16910 <DmSmpCbackExec>
}
   13786:	bf00      	nop
   13788:	b009      	add	sp, #36	; 0x24
   1378a:	f85d fb04 	ldr.w	pc, [sp], #4

0001378e <smpScActJwncCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1378e:	b500      	push	{lr}
   13790:	b085      	sub	sp, #20
   13792:	9003      	str	r0, [sp, #12]
   13794:	9102      	str	r1, [sp, #8]
  /* Cb = f4(PKbx, PKax, Nb, 0x00) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if (pCcb->initiator)
   13796:	9b03      	ldr	r3, [sp, #12]
   13798:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1379c:	2b00      	cmp	r3, #0
   1379e:	d014      	beq.n	137ca <smpScActJwncCalcF4+0x3c>
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pLocalPublicKey->pubKeyX);
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);

    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   137a0:	9b03      	ldr	r3, [sp, #12]
   137a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   137a4:	689b      	ldr	r3, [r3, #8]
   137a6:	461a      	mov	r2, r3
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   137a8:	9b03      	ldr	r3, [sp, #12]
   137aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   137ac:	68db      	ldr	r3, [r3, #12]
   137ae:	4619      	mov	r1, r3
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   137b0:	9b03      	ldr	r3, [sp, #12]
   137b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   137b4:	695b      	ldr	r3, [r3, #20]
   137b6:	3310      	adds	r3, #16
    SmpScCalcF4(pCcb, pMsg,
   137b8:	9301      	str	r3, [sp, #4]
   137ba:	2300      	movs	r3, #0
   137bc:	9300      	str	r3, [sp, #0]
   137be:	460b      	mov	r3, r1
   137c0:	9902      	ldr	r1, [sp, #8]
   137c2:	9803      	ldr	r0, [sp, #12]
   137c4:	f000 fc16 	bl	13ff4 <SmpScCalcF4>
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
   137c8:	e013      	b.n	137f2 <smpScActJwncCalcF4+0x64>
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   137ca:	9b03      	ldr	r3, [sp, #12]
   137cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   137ce:	68db      	ldr	r3, [r3, #12]
   137d0:	461a      	mov	r2, r3
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   137d2:	9b03      	ldr	r3, [sp, #12]
   137d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   137d6:	689b      	ldr	r3, [r3, #8]
   137d8:	4619      	mov	r1, r3
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   137da:	9b03      	ldr	r3, [sp, #12]
   137dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   137de:	695b      	ldr	r3, [r3, #20]
   137e0:	3310      	adds	r3, #16
    SmpScCalcF4(pCcb, pMsg,
   137e2:	9301      	str	r3, [sp, #4]
   137e4:	2300      	movs	r3, #0
   137e6:	9300      	str	r3, [sp, #0]
   137e8:	460b      	mov	r3, r1
   137ea:	9902      	ldr	r1, [sp, #8]
   137ec:	9803      	ldr	r0, [sp, #12]
   137ee:	f000 fc01 	bl	13ff4 <SmpScCalcF4>
}
   137f2:	bf00      	nop
   137f4:	b005      	add	sp, #20
   137f6:	f85d fb04 	ldr.w	pc, [sp], #4

000137fa <smpScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   137fa:	b500      	push	{lr}
   137fc:	b087      	sub	sp, #28
   137fe:	9003      	str	r0, [sp, #12]
   13800:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;

  /* g2(PKax, PKbx, Na, Nb) where g2(U, V, X, Z) = AES-CMACx (U || V || Z) mod 2^32 */
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   13802:	9a02      	ldr	r2, [sp, #8]
   13804:	9903      	ldr	r1, [sp, #12]
   13806:	2050      	movs	r0, #80	; 0x50
   13808:	f000 fbd4 	bl	13fb4 <SmpScAlloc>
   1380c:	9004      	str	r0, [sp, #16]
   1380e:	9b04      	ldr	r3, [sp, #16]
   13810:	2b00      	cmp	r3, #0
   13812:	d03f      	beq.n	13894 <smpScActJwncCalcG2+0x9a>
  {
    uint8_t *pCatBuf = pCmacText;
   13814:	9b04      	ldr	r3, [sp, #16]
   13816:	9305      	str	r3, [sp, #20]

    /* Concatinate PKax, PKbx, Nb */
    if (pCcb->initiator)
   13818:	9b03      	ldr	r3, [sp, #12]
   1381a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1381e:	2b00      	cmp	r3, #0
   13820:	d012      	beq.n	13848 <smpScActJwncCalcG2+0x4e>
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   13822:	9b03      	ldr	r3, [sp, #12]
   13824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13826:	68db      	ldr	r3, [r3, #12]
   13828:	2220      	movs	r2, #32
   1382a:	4619      	mov	r1, r3
   1382c:	9805      	ldr	r0, [sp, #20]
   1382e:	f000 fc47 	bl	140c0 <SmpScCat>
   13832:	9005      	str	r0, [sp, #20]
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   13834:	9b03      	ldr	r3, [sp, #12]
   13836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13838:	689b      	ldr	r3, [r3, #8]
   1383a:	2220      	movs	r2, #32
   1383c:	4619      	mov	r1, r3
   1383e:	9805      	ldr	r0, [sp, #20]
   13840:	f000 fc3e 	bl	140c0 <SmpScCat>
   13844:	9005      	str	r0, [sp, #20]
   13846:	e011      	b.n	1386c <smpScActJwncCalcG2+0x72>
    }
    else
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   13848:	9b03      	ldr	r3, [sp, #12]
   1384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1384c:	689b      	ldr	r3, [r3, #8]
   1384e:	2220      	movs	r2, #32
   13850:	4619      	mov	r1, r3
   13852:	9805      	ldr	r0, [sp, #20]
   13854:	f000 fc34 	bl	140c0 <SmpScCat>
   13858:	9005      	str	r0, [sp, #20]
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1385a:	9b03      	ldr	r3, [sp, #12]
   1385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1385e:	68db      	ldr	r3, [r3, #12]
   13860:	2220      	movs	r2, #32
   13862:	4619      	mov	r1, r3
   13864:	9805      	ldr	r0, [sp, #20]
   13866:	f000 fc2b 	bl	140c0 <SmpScCat>
   1386a:	9005      	str	r0, [sp, #20]
    }

    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1386c:	9b03      	ldr	r3, [sp, #12]
   1386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13870:	695b      	ldr	r3, [r3, #20]
   13872:	3310      	adds	r3, #16
   13874:	4619      	mov	r1, r3
   13876:	9805      	ldr	r0, [sp, #20]
   13878:	f000 fc38 	bl	140ec <SmpScCat128>
   1387c:	9005      	str	r0, [sp, #20]

    /* Execute CMAC with Na as the key */
    SmpScCmac(pCcb->pScCcb->pScratch->Na_Ea, pCmacText, SMP_G2_TEXT_LEN, pCcb, pMsg);
   1387e:	9b03      	ldr	r3, [sp, #12]
   13880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13882:	695b      	ldr	r3, [r3, #20]
   13884:	4618      	mov	r0, r3
   13886:	9b02      	ldr	r3, [sp, #8]
   13888:	9300      	str	r3, [sp, #0]
   1388a:	9b03      	ldr	r3, [sp, #12]
   1388c:	2250      	movs	r2, #80	; 0x50
   1388e:	9904      	ldr	r1, [sp, #16]
   13890:	f000 fb60 	bl	13f54 <SmpScCmac>
  }
}
   13894:	bf00      	nop
   13896:	b007      	add	sp, #28
   13898:	f85d fb04 	ldr.w	pc, [sp], #4

0001389c <smpScActJwncDisplay>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1389c:	b500      	push	{lr}
   1389e:	b089      	sub	sp, #36	; 0x24
   138a0:	9001      	str	r0, [sp, #4]
   138a2:	9100      	str	r1, [sp, #0]
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
   138a4:	9b01      	ldr	r3, [sp, #4]
   138a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   138a8:	785b      	ldrb	r3, [r3, #1]
   138aa:	2b04      	cmp	r3, #4
   138ac:	d118      	bne.n	138e0 <smpScActJwncDisplay+0x44>
    dmSecCnfIndEvt_t cnfEvt;

    SMP_TRACE_128("JWNC Display Cnf", pMsg->aes.pCiphertext);

    /* Send the confirm value to the application for display to the user */
    Calc128Cpy(cnfEvt.confirm, pMsg->aes.pCiphertext);
   138ae:	9b00      	ldr	r3, [sp, #0]
   138b0:	685a      	ldr	r2, [r3, #4]
   138b2:	ab03      	add	r3, sp, #12
   138b4:	3304      	adds	r3, #4
   138b6:	4611      	mov	r1, r2
   138b8:	4618      	mov	r0, r3
   138ba:	f7f8 fd01 	bl	c2c0 <Calc128Cpy>
    cnfEvt.hdr.param = pCcb->connId;
   138be:	9b01      	ldr	r3, [sp, #4]
   138c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   138c4:	b29b      	uxth	r3, r3
   138c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
   138ca:	2335      	movs	r3, #53	; 0x35
   138cc:	f88d 300e 	strb.w	r3, [sp, #14]
    cnfEvt.hdr.status = HCI_SUCCESS;
   138d0:	2300      	movs	r3, #0
   138d2:	f88d 300f 	strb.w	r3, [sp, #15]

    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
   138d6:	ab03      	add	r3, sp, #12
   138d8:	4618      	mov	r0, r3
   138da:	f003 f819 	bl	16910 <DmSmpCbackExec>
    hdr.param = pCcb->connId;
    hdr.event = SMP_MSG_API_USER_CONFIRM;
    hdr.status = HCI_SUCCESS;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   138de:	e010      	b.n	13902 <smpScActJwncDisplay+0x66>
    hdr.param = pCcb->connId;
   138e0:	9b01      	ldr	r3, [sp, #4]
   138e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   138e6:	b29b      	uxth	r3, r3
   138e8:	f8ad 3008 	strh.w	r3, [sp, #8]
    hdr.event = SMP_MSG_API_USER_CONFIRM;
   138ec:	2316      	movs	r3, #22
   138ee:	f88d 300a 	strb.w	r3, [sp, #10]
    hdr.status = HCI_SUCCESS;
   138f2:	2300      	movs	r3, #0
   138f4:	f88d 300b 	strb.w	r3, [sp, #11]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   138f8:	ab02      	add	r3, sp, #8
   138fa:	4619      	mov	r1, r3
   138fc:	9801      	ldr	r0, [sp, #4]
   138fe:	f7fe fbc5 	bl	1208c <smpSmExecute>
}
   13902:	bf00      	nop
   13904:	b009      	add	sp, #36	; 0x24
   13906:	f85d fb04 	ldr.w	pc, [sp], #4

0001390a <smpScActPkKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1390a:	b500      	push	{lr}
   1390c:	b087      	sub	sp, #28
   1390e:	9001      	str	r0, [sp, #4]
   13910:	9100      	str	r1, [sp, #0]
  uint8_t *pCmd = pMsg->data.pPacket + L2C_PAYLOAD_START;
   13912:	9b00      	ldr	r3, [sp, #0]
   13914:	685b      	ldr	r3, [r3, #4]
   13916:	3308      	adds	r3, #8
   13918:	9305      	str	r3, [sp, #20]
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1391a:	9b00      	ldr	r3, [sp, #0]
   1391c:	685b      	ldr	r3, [r3, #4]
   1391e:	3309      	adds	r3, #9
   13920:	9304      	str	r3, [sp, #16]

  if (*pCmd == SMP_CMD_KEYPRESS)
   13922:	9b05      	ldr	r3, [sp, #20]
   13924:	781b      	ldrb	r3, [r3, #0]
   13926:	2b0e      	cmp	r3, #14
   13928:	d114      	bne.n	13954 <smpScActPkKeypress+0x4a>
  {
    dmSecKeypressIndEvt_t keypressEvt;

    /* Notify the application a keypress message was received from the responder */
    keypressEvt.notificationType = *pPacket;
   1392a:	9b04      	ldr	r3, [sp, #16]
   1392c:	781b      	ldrb	r3, [r3, #0]
   1392e:	f88d 300c 	strb.w	r3, [sp, #12]
    keypressEvt.hdr.param = pCcb->connId;
   13932:	9b01      	ldr	r3, [sp, #4]
   13934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   13938:	b29b      	uxth	r3, r3
   1393a:	f8ad 3008 	strh.w	r3, [sp, #8]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
   1393e:	2336      	movs	r3, #54	; 0x36
   13940:	f88d 300a 	strb.w	r3, [sp, #10]
    keypressEvt.hdr.status = HCI_SUCCESS;
   13944:	2300      	movs	r3, #0
   13946:	f88d 300b 	strb.w	r3, [sp, #11]

    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
   1394a:	ab02      	add	r3, sp, #8
   1394c:	4618      	mov	r0, r3
   1394e:	f002 ffdf 	bl	16910 <DmSmpCbackExec>
  }
  else
  {
    /* Unexpected command */
  }
}
   13952:	e00d      	b.n	13970 <smpScActPkKeypress+0x66>
  else if (*pCmd == SMP_CMD_PAIR_CNF)
   13954:	9b05      	ldr	r3, [sp, #20]
   13956:	781b      	ldrb	r3, [r3, #0]
   13958:	2b03      	cmp	r3, #3
   1395a:	d109      	bne.n	13970 <smpScActPkKeypress+0x66>
    pMsg->hdr.event = SMP_MSG_EARLY_CNF;
   1395c:	9b00      	ldr	r3, [sp, #0]
   1395e:	221e      	movs	r2, #30
   13960:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = HCI_SUCCESS;
   13962:	9b00      	ldr	r3, [sp, #0]
   13964:	2200      	movs	r2, #0
   13966:	70da      	strb	r2, [r3, #3]
    smpSmExecute(pCcb, pMsg);
   13968:	9900      	ldr	r1, [sp, #0]
   1396a:	9801      	ldr	r0, [sp, #4]
   1396c:	f7fe fb8e 	bl	1208c <smpSmExecute>
}
   13970:	bf00      	nop
   13972:	b007      	add	sp, #28
   13974:	f85d fb04 	ldr.w	pc, [sp], #4

00013978 <smpScActPkSendKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSendKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13978:	b500      	push	{lr}
   1397a:	b087      	sub	sp, #28
   1397c:	9001      	str	r0, [sp, #4]
   1397e:	9100      	str	r1, [sp, #0]
  /* Send keypress notification to the peer */
  smpDmKeypress_t *pKeypress = (smpDmKeypress_t *) pMsg;
   13980:	9b00      	ldr	r3, [sp, #0]
   13982:	9305      	str	r3, [sp, #20]
  uint8_t         *pPkt;
  uint8_t         *p;

  if (pCcb->pScCcb->kpNotify)
   13984:	9b01      	ldr	r3, [sp, #4]
   13986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13988:	789b      	ldrb	r3, [r3, #2]
   1398a:	2b00      	cmp	r3, #0
   1398c:	d024      	beq.n	139d8 <smpScActPkSendKeypress+0x60>
  {
    /* start smp response timer */
    smpStartRspTimer(pCcb);
   1398e:	9801      	ldr	r0, [sp, #4]
   13990:	f7fd fe46 	bl	11620 <smpStartRspTimer>

    /* allocate packet buffer */
    if ((pPkt = smpMsgAlloc(SMP_KEYPRESS_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   13994:	200a      	movs	r0, #10
   13996:	f7ff f9d4 	bl	12d42 <smpMsgAlloc>
   1399a:	9004      	str	r0, [sp, #16]
   1399c:	9b04      	ldr	r3, [sp, #16]
   1399e:	2b00      	cmp	r3, #0
   139a0:	d010      	beq.n	139c4 <smpScActPkSendKeypress+0x4c>
    {
      /* build packet */
      p = pPkt + L2C_PAYLOAD_START;
   139a2:	9b04      	ldr	r3, [sp, #16]
   139a4:	3308      	adds	r3, #8
   139a6:	9303      	str	r3, [sp, #12]
      UINT8_TO_BSTREAM(p, SMP_CMD_KEYPRESS);
   139a8:	9b03      	ldr	r3, [sp, #12]
   139aa:	1c5a      	adds	r2, r3, #1
   139ac:	9203      	str	r2, [sp, #12]
   139ae:	220e      	movs	r2, #14
   139b0:	701a      	strb	r2, [r3, #0]

      /* Store keypress notification type */
      *p = pKeypress->keypress;
   139b2:	9b05      	ldr	r3, [sp, #20]
   139b4:	791a      	ldrb	r2, [r3, #4]
   139b6:	9b03      	ldr	r3, [sp, #12]
   139b8:	701a      	strb	r2, [r3, #0]

      /* send packet */
      smpSendPkt(pCcb, pPkt);
   139ba:	9904      	ldr	r1, [sp, #16]
   139bc:	9801      	ldr	r0, [sp, #4]
   139be:	f7ff f989 	bl	12cd4 <smpSendPkt>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
      smpSmExecute(pCcb, pMsg);
    }
  }
}
   139c2:	e009      	b.n	139d8 <smpScActPkSendKeypress+0x60>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   139c4:	9b00      	ldr	r3, [sp, #0]
   139c6:	2208      	movs	r2, #8
   139c8:	70da      	strb	r2, [r3, #3]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   139ca:	9b00      	ldr	r3, [sp, #0]
   139cc:	2203      	movs	r2, #3
   139ce:	709a      	strb	r2, [r3, #2]
      smpSmExecute(pCcb, pMsg);
   139d0:	9900      	ldr	r1, [sp, #0]
   139d2:	9801      	ldr	r0, [sp, #4]
   139d4:	f7fe fb5a 	bl	1208c <smpSmExecute>
}
   139d8:	bf00      	nop
   139da:	b007      	add	sp, #28
   139dc:	f85d fb04 	ldr.w	pc, [sp], #4

000139e0 <smpScActCalcSharedSecret>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcSharedSecret(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   139e0:	b530      	push	{r4, r5, lr}
   139e2:	b09b      	sub	sp, #108	; 0x6c
   139e4:	9001      	str	r0, [sp, #4]
   139e6:	9100      	str	r1, [sp, #0]
    }
  }
#endif

  /* Use local private key and peer public key to generate the shared secret */
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   139e8:	9b01      	ldr	r3, [sp, #4]
   139ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   139ec:	691b      	ldr	r3, [r3, #16]
   139ee:	ac12      	add	r4, sp, #72	; 0x48
   139f0:	461d      	mov	r5, r3
   139f2:	6828      	ldr	r0, [r5, #0]
   139f4:	6869      	ldr	r1, [r5, #4]
   139f6:	68aa      	ldr	r2, [r5, #8]
   139f8:	68eb      	ldr	r3, [r5, #12]
   139fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   139fc:	6928      	ldr	r0, [r5, #16]
   139fe:	6969      	ldr	r1, [r5, #20]
   13a00:	69aa      	ldr	r2, [r5, #24]
   13a02:	69eb      	ldr	r3, [r5, #28]
   13a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   13a06:	9b01      	ldr	r3, [sp, #4]
   13a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13a0a:	689b      	ldr	r3, [r3, #8]
   13a0c:	ac02      	add	r4, sp, #8
   13a0e:	461d      	mov	r5, r3
   13a10:	6828      	ldr	r0, [r5, #0]
   13a12:	6869      	ldr	r1, [r5, #4]
   13a14:	68aa      	ldr	r2, [r5, #8]
   13a16:	68eb      	ldr	r3, [r5, #12]
   13a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13a1a:	6928      	ldr	r0, [r5, #16]
   13a1c:	6969      	ldr	r1, [r5, #20]
   13a1e:	69aa      	ldr	r2, [r5, #24]
   13a20:	69eb      	ldr	r3, [r5, #28]
   13a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   13a24:	9b01      	ldr	r3, [sp, #4]
   13a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13a28:	689b      	ldr	r3, [r3, #8]
   13a2a:	3320      	adds	r3, #32
   13a2c:	ac0a      	add	r4, sp, #40	; 0x28
   13a2e:	461d      	mov	r5, r3
   13a30:	6828      	ldr	r0, [r5, #0]
   13a32:	6869      	ldr	r1, [r5, #4]
   13a34:	68aa      	ldr	r2, [r5, #8]
   13a36:	68eb      	ldr	r3, [r5, #12]
   13a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13a3a:	6928      	ldr	r0, [r5, #16]
   13a3c:	6969      	ldr	r1, [r5, #20]
   13a3e:	69aa      	ldr	r2, [r5, #24]
   13a40:	69eb      	ldr	r3, [r5, #28]
   13a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}

  /* Generate the shared secret */
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
   13a44:	4b0d      	ldr	r3, [pc, #52]	; (13a7c <smpScActCalcSharedSecret+0x9c>)
   13a46:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
   13a4a:	9b01      	ldr	r3, [sp, #4]
   13a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   13a50:	b29a      	uxth	r2, r3
   13a52:	a802      	add	r0, sp, #8
   13a54:	2319      	movs	r3, #25
   13a56:	f7fc ff9a 	bl	1098e <SecEccGenSharedSecret>
   13a5a:	4603      	mov	r3, r0
   13a5c:	2b00      	cmp	r3, #0
   13a5e:	d109      	bne.n	13a74 <smpScActCalcSharedSecret+0x94>
  {
    pMsg->hdr.status = SMP_ERR_MEMORY;
   13a60:	9b00      	ldr	r3, [sp, #0]
   13a62:	22e0      	movs	r2, #224	; 0xe0
   13a64:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   13a66:	9b00      	ldr	r3, [sp, #0]
   13a68:	2203      	movs	r2, #3
   13a6a:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   13a6c:	9900      	ldr	r1, [sp, #0]
   13a6e:	9801      	ldr	r0, [sp, #4]
   13a70:	f7fe fb0c 	bl	1208c <smpSmExecute>
  }
}
   13a74:	bf00      	nop
   13a76:	b01b      	add	sp, #108	; 0x6c
   13a78:	bd30      	pop	{r4, r5, pc}
   13a7a:	bf00      	nop
   13a7c:	100042a4 	.word	0x100042a4

00013a80 <smpScActCalcF5TKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5TKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13a80:	b510      	push	{r4, lr}
   13a82:	b08a      	sub	sp, #40	; 0x28
   13a84:	9003      	str	r0, [sp, #12]
   13a86:	9102      	str	r1, [sp, #8]
  secEccMsg_t *pSecretMsg = (secEccMsg_t*) pMsg;
   13a88:	9b02      	ldr	r3, [sp, #8]
   13a8a:	9309      	str	r3, [sp, #36]	; 0x24
  uint8_t *pCmacText;

  if (pMsg->hdr.status == HCI_SUCCESS)
   13a8c:	9b02      	ldr	r3, [sp, #8]
   13a8e:	78db      	ldrb	r3, [r3, #3]
   13a90:	2b00      	cmp	r3, #0
   13a92:	d11d      	bne.n	13ad0 <smpScActCalcF5TKey+0x50>
  {
    /* The shared secret is the DH Key */
    SMP_TRACE_256("DHKey (Shared Secret)", pSecretMsg->data.sharedSecret.secret);

    if ((pCmacText = SmpScAlloc(SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   13a94:	9a02      	ldr	r2, [sp, #8]
   13a96:	9903      	ldr	r1, [sp, #12]
   13a98:	2020      	movs	r0, #32
   13a9a:	f000 fa8b 	bl	13fb4 <SmpScAlloc>
   13a9e:	9008      	str	r0, [sp, #32]
   13aa0:	9b08      	ldr	r3, [sp, #32]
   13aa2:	2b00      	cmp	r3, #0
   13aa4:	d020      	beq.n	13ae8 <smpScActCalcF5TKey+0x68>
    {
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
   13aa6:	4b12      	ldr	r3, [pc, #72]	; (13af0 <smpScActCalcF5TKey+0x70>)
   13aa8:	ac04      	add	r4, sp, #16
   13aaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                              0x60, 0x37, 0x0B, 0xDB, 0x5A, 0x60, 0x83, 0xBE};

      /* T = AES-CMACsalt (DHKey) */
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
   13ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13ab2:	3304      	adds	r3, #4
   13ab4:	2220      	movs	r2, #32
   13ab6:	4619      	mov	r1, r3
   13ab8:	9808      	ldr	r0, [sp, #32]
   13aba:	f7f8 fb21 	bl	c100 <memcpy>

      /* Execute CMAC with salt as the key */
      SmpScCmac(salt, pCmacText, SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg);
   13abe:	a804      	add	r0, sp, #16
   13ac0:	9b02      	ldr	r3, [sp, #8]
   13ac2:	9300      	str	r3, [sp, #0]
   13ac4:	9b03      	ldr	r3, [sp, #12]
   13ac6:	2220      	movs	r2, #32
   13ac8:	9908      	ldr	r1, [sp, #32]
   13aca:	f000 fa43 	bl	13f54 <SmpScCmac>
  else
  {
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
    smpSmExecute(pCcb, pMsg);
  }
}
   13ace:	e00b      	b.n	13ae8 <smpScActCalcF5TKey+0x68>
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
   13ad0:	9b03      	ldr	r3, [sp, #12]
   13ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   13ad6:	9902      	ldr	r1, [sp, #8]
   13ad8:	220b      	movs	r2, #11
   13ada:	4618      	mov	r0, r3
   13adc:	f000 fc26 	bl	1432c <SmpScGetCancelMsgWithReattempt>
    smpSmExecute(pCcb, pMsg);
   13ae0:	9902      	ldr	r1, [sp, #8]
   13ae2:	9803      	ldr	r0, [sp, #12]
   13ae4:	f7fe fad2 	bl	1208c <smpSmExecute>
}
   13ae8:	bf00      	nop
   13aea:	b00a      	add	sp, #40	; 0x28
   13aec:	bd10      	pop	{r4, pc}
   13aee:	bf00      	nop
   13af0:	00027cf0 	.word	0x00027cf0

00013af4 <smpScActCalcF5MacKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5MacKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13af4:	b500      	push	{lr}
   13af6:	b089      	sub	sp, #36	; 0x24
   13af8:	9003      	str	r0, [sp, #12]
   13afa:	9102      	str	r1, [sp, #8]
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
   13afc:	9b02      	ldr	r3, [sp, #8]
   13afe:	9307      	str	r3, [sp, #28]
  uint8_t *pCmacText;

  /* Copy T from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   13b00:	9b03      	ldr	r3, [sp, #12]
   13b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b04:	699b      	ldr	r3, [r3, #24]
   13b06:	f103 0210 	add.w	r2, r3, #16
   13b0a:	9b07      	ldr	r3, [sp, #28]
   13b0c:	685b      	ldr	r3, [r3, #4]
   13b0e:	4619      	mov	r1, r3
   13b10:	4610      	mov	r0, r2
   13b12:	f7f8 fbd5 	bl	c2c0 <Calc128Cpy>

  SMP_TRACE_128("T", pCcb->pScCcb->pLtk->ltk_t);

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   13b16:	9a02      	ldr	r2, [sp, #8]
   13b18:	9903      	ldr	r1, [sp, #12]
   13b1a:	2035      	movs	r0, #53	; 0x35
   13b1c:	f000 fa4a 	bl	13fb4 <SmpScAlloc>
   13b20:	9006      	str	r0, [sp, #24]
   13b22:	9b06      	ldr	r3, [sp, #24]
   13b24:	2b00      	cmp	r3, #0
   13b26:	d03d      	beq.n	13ba4 <smpScActCalcF5MacKey+0xb0>
  {
    uint8_t *pCatBuf = pCmacText;
   13b28:	9b06      	ldr	r3, [sp, #24]
   13b2a:	9305      	str	r3, [sp, #20]

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* mackey = AES-CMACT (Counter = 0 || keyID ||N1 || N2|| A1|| A2|| Length = 256) */
    *pCatBuf++ = 0;
   13b2c:	9b05      	ldr	r3, [sp, #20]
   13b2e:	1c5a      	adds	r2, r3, #1
   13b30:	9205      	str	r2, [sp, #20]
   13b32:	2200      	movs	r2, #0
   13b34:	701a      	strb	r2, [r3, #0]
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   13b36:	2204      	movs	r2, #4
   13b38:	491c      	ldr	r1, [pc, #112]	; (13bac <smpScActCalcF5MacKey+0xb8>)
   13b3a:	9805      	ldr	r0, [sp, #20]
   13b3c:	f000 fac0 	bl	140c0 <SmpScCat>
   13b40:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   13b42:	9b03      	ldr	r3, [sp, #12]
   13b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b46:	695b      	ldr	r3, [r3, #20]
   13b48:	4619      	mov	r1, r3
   13b4a:	9805      	ldr	r0, [sp, #20]
   13b4c:	f000 face 	bl	140ec <SmpScCat128>
   13b50:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   13b52:	9b03      	ldr	r3, [sp, #12]
   13b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b56:	695b      	ldr	r3, [r3, #20]
   13b58:	3310      	adds	r3, #16
   13b5a:	4619      	mov	r1, r3
   13b5c:	9805      	ldr	r0, [sp, #20]
   13b5e:	f000 fac5 	bl	140ec <SmpScCat128>
   13b62:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   13b64:	9905      	ldr	r1, [sp, #20]
   13b66:	9803      	ldr	r0, [sp, #12]
   13b68:	f7ff fa28 	bl	12fbc <smpScCatInitiatorBdAddr>
   13b6c:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   13b6e:	9905      	ldr	r1, [sp, #20]
   13b70:	9803      	ldr	r0, [sp, #12]
   13b72:	f7ff fa82 	bl	1307a <smpScCatResponderBdAddr>
   13b76:	9005      	str	r0, [sp, #20]
    *pCatBuf++ = 1;
   13b78:	9b05      	ldr	r3, [sp, #20]
   13b7a:	1c5a      	adds	r2, r3, #1
   13b7c:	9205      	str	r2, [sp, #20]
   13b7e:	2201      	movs	r2, #1
   13b80:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = 0;
   13b82:	9b05      	ldr	r3, [sp, #20]
   13b84:	1c5a      	adds	r2, r3, #1
   13b86:	9205      	str	r2, [sp, #20]
   13b88:	2200      	movs	r2, #0
   13b8a:	701a      	strb	r2, [r3, #0]

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   13b8c:	9b03      	ldr	r3, [sp, #12]
   13b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13b90:	699b      	ldr	r3, [r3, #24]
   13b92:	f103 0010 	add.w	r0, r3, #16
   13b96:	9b02      	ldr	r3, [sp, #8]
   13b98:	9300      	str	r3, [sp, #0]
   13b9a:	9b03      	ldr	r3, [sp, #12]
   13b9c:	2235      	movs	r2, #53	; 0x35
   13b9e:	9906      	ldr	r1, [sp, #24]
   13ba0:	f000 f9d8 	bl	13f54 <SmpScCmac>
  }
}
   13ba4:	bf00      	nop
   13ba6:	b009      	add	sp, #36	; 0x24
   13ba8:	f85d fb04 	ldr.w	pc, [sp], #4
   13bac:	000283b8 	.word	0x000283b8

00013bb0 <smpScActCalcF5Ltk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5Ltk(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13bb0:	b500      	push	{lr}
   13bb2:	b089      	sub	sp, #36	; 0x24
   13bb4:	9003      	str	r0, [sp, #12]
   13bb6:	9102      	str	r1, [sp, #8]
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
   13bb8:	9b02      	ldr	r3, [sp, #8]
   13bba:	9307      	str	r3, [sp, #28]
  uint8_t *pCmacText;

  SMP_TRACE_128("MAC", pMsg->aes.pCiphertext);

  /* Copy Mac Key from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->mac, pCmac->pCiphertext);
   13bbc:	9b03      	ldr	r3, [sp, #12]
   13bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13bc0:	699b      	ldr	r3, [r3, #24]
   13bc2:	461a      	mov	r2, r3
   13bc4:	9b07      	ldr	r3, [sp, #28]
   13bc6:	685b      	ldr	r3, [r3, #4]
   13bc8:	4619      	mov	r1, r3
   13bca:	4610      	mov	r0, r2
   13bcc:	f7f8 fb78 	bl	c2c0 <Calc128Cpy>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   13bd0:	9a02      	ldr	r2, [sp, #8]
   13bd2:	9903      	ldr	r1, [sp, #12]
   13bd4:	2035      	movs	r0, #53	; 0x35
   13bd6:	f000 f9ed 	bl	13fb4 <SmpScAlloc>
   13bda:	9006      	str	r0, [sp, #24]
   13bdc:	9b06      	ldr	r3, [sp, #24]
   13bde:	2b00      	cmp	r3, #0
   13be0:	d03d      	beq.n	13c5e <smpScActCalcF5Ltk+0xae>
  {
    uint8_t *pCatBuf = pCmacText;
   13be2:	9b06      	ldr	r3, [sp, #24]
   13be4:	9305      	str	r3, [sp, #20]

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* ltk = AES-CMACT (Counter = 1 || keyID || N1 || N2|| A1|| A2 ||Length = 256) */
    *pCatBuf++ = 1;
   13be6:	9b05      	ldr	r3, [sp, #20]
   13be8:	1c5a      	adds	r2, r3, #1
   13bea:	9205      	str	r2, [sp, #20]
   13bec:	2201      	movs	r2, #1
   13bee:	701a      	strb	r2, [r3, #0]
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   13bf0:	2204      	movs	r2, #4
   13bf2:	491d      	ldr	r1, [pc, #116]	; (13c68 <smpScActCalcF5Ltk+0xb8>)
   13bf4:	9805      	ldr	r0, [sp, #20]
   13bf6:	f000 fa63 	bl	140c0 <SmpScCat>
   13bfa:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   13bfc:	9b03      	ldr	r3, [sp, #12]
   13bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13c00:	695b      	ldr	r3, [r3, #20]
   13c02:	4619      	mov	r1, r3
   13c04:	9805      	ldr	r0, [sp, #20]
   13c06:	f000 fa71 	bl	140ec <SmpScCat128>
   13c0a:	9005      	str	r0, [sp, #20]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   13c0c:	9b03      	ldr	r3, [sp, #12]
   13c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13c10:	695b      	ldr	r3, [r3, #20]
   13c12:	3310      	adds	r3, #16
   13c14:	4619      	mov	r1, r3
   13c16:	9805      	ldr	r0, [sp, #20]
   13c18:	f000 fa68 	bl	140ec <SmpScCat128>
   13c1c:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   13c1e:	9905      	ldr	r1, [sp, #20]
   13c20:	9803      	ldr	r0, [sp, #12]
   13c22:	f7ff f9cb 	bl	12fbc <smpScCatInitiatorBdAddr>
   13c26:	9005      	str	r0, [sp, #20]
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   13c28:	9905      	ldr	r1, [sp, #20]
   13c2a:	9803      	ldr	r0, [sp, #12]
   13c2c:	f7ff fa25 	bl	1307a <smpScCatResponderBdAddr>
   13c30:	9005      	str	r0, [sp, #20]
    *pCatBuf++ = 1;
   13c32:	9b05      	ldr	r3, [sp, #20]
   13c34:	1c5a      	adds	r2, r3, #1
   13c36:	9205      	str	r2, [sp, #20]
   13c38:	2201      	movs	r2, #1
   13c3a:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = 0;
   13c3c:	9b05      	ldr	r3, [sp, #20]
   13c3e:	1c5a      	adds	r2, r3, #1
   13c40:	9205      	str	r2, [sp, #20]
   13c42:	2200      	movs	r2, #0
   13c44:	701a      	strb	r2, [r3, #0]

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   13c46:	9b03      	ldr	r3, [sp, #12]
   13c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13c4a:	699b      	ldr	r3, [r3, #24]
   13c4c:	f103 0010 	add.w	r0, r3, #16
   13c50:	9b02      	ldr	r3, [sp, #8]
   13c52:	9300      	str	r3, [sp, #0]
   13c54:	9b03      	ldr	r3, [sp, #12]
   13c56:	2235      	movs	r2, #53	; 0x35
   13c58:	9906      	ldr	r1, [sp, #24]
   13c5a:	f000 f97b 	bl	13f54 <SmpScCmac>
  }
}
   13c5e:	bf00      	nop
   13c60:	b009      	add	sp, #36	; 0x24
   13c62:	f85d fb04 	ldr.w	pc, [sp], #4
   13c66:	bf00      	nop
   13c68:	000283b8 	.word	0x000283b8

00013c6c <smpScActDHKeyCalcF6Ea>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Ea(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13c6c:	b500      	push	{lr}
   13c6e:	b087      	sub	sp, #28
   13c70:	9003      	str	r0, [sp, #12]
   13c72:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;

  SMP_TRACE_128("LTK", pMsg->aes.pCiphertext);

  /* Copy LTK from the previous state (smpScActCalcF5Ltk) */
  WStrReverseCpy(pCcb->pScCcb->pLtk->ltk_t, pMsg->aes.pCiphertext, 16);
   13c74:	9b03      	ldr	r3, [sp, #12]
   13c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13c78:	699b      	ldr	r3, [r3, #24]
   13c7a:	f103 0010 	add.w	r0, r3, #16
   13c7e:	9b02      	ldr	r3, [sp, #8]
   13c80:	685b      	ldr	r3, [r3, #4]
   13c82:	2210      	movs	r2, #16
   13c84:	4619      	mov	r1, r3
   13c86:	f7f8 fb54 	bl	c332 <WStrReverseCpy>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   13c8a:	9a02      	ldr	r2, [sp, #8]
   13c8c:	9903      	ldr	r1, [sp, #12]
   13c8e:	2041      	movs	r0, #65	; 0x41
   13c90:	f000 f990 	bl	13fb4 <SmpScAlloc>
   13c94:	9005      	str	r0, [sp, #20]
   13c96:	9b05      	ldr	r3, [sp, #20]
   13c98:	2b00      	cmp	r3, #0
   13c9a:	d045      	beq.n	13d28 <smpScActDHKeyCalcF6Ea+0xbc>
  {
    uint8_t *pCatBuf = pCmacText;
   13c9c:	9b05      	ldr	r3, [sp, #20]
   13c9e:	9304      	str	r3, [sp, #16]

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   13ca0:	9b03      	ldr	r3, [sp, #12]
   13ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13ca4:	695b      	ldr	r3, [r3, #20]
   13ca6:	4619      	mov	r1, r3
   13ca8:	9804      	ldr	r0, [sp, #16]
   13caa:	f000 fa1f 	bl	140ec <SmpScCat128>
   13cae:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   13cb0:	9b03      	ldr	r3, [sp, #12]
   13cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13cb4:	695b      	ldr	r3, [r3, #20]
   13cb6:	3310      	adds	r3, #16
   13cb8:	4619      	mov	r1, r3
   13cba:	9804      	ldr	r0, [sp, #16]
   13cbc:	f000 fa16 	bl	140ec <SmpScCat128>
   13cc0:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Rb);
   13cc2:	9b03      	ldr	r3, [sp, #12]
   13cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13cc6:	695b      	ldr	r3, [r3, #20]
   13cc8:	3330      	adds	r3, #48	; 0x30
   13cca:	4619      	mov	r1, r3
   13ccc:	9804      	ldr	r0, [sp, #16]
   13cce:	f000 fa0d 	bl	140ec <SmpScCat128>
   13cd2:	9004      	str	r0, [sp, #16]

    *pCatBuf++ = pCcb->pairReq[SMP_AUTHREQ_POS]; /* AuthReq */
   13cd4:	9b04      	ldr	r3, [sp, #16]
   13cd6:	1c5a      	adds	r2, r3, #1
   13cd8:	9204      	str	r2, [sp, #16]
   13cda:	9a03      	ldr	r2, [sp, #12]
   13cdc:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   13ce0:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_OOB_POS]; /* OOB Data Flag */
   13ce2:	9b04      	ldr	r3, [sp, #16]
   13ce4:	1c5a      	adds	r2, r3, #1
   13ce6:	9204      	str	r2, [sp, #16]
   13ce8:	9a03      	ldr	r2, [sp, #12]
   13cea:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   13cee:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_IO_POS]; /* IO Capability Parameter */
   13cf0:	9b04      	ldr	r3, [sp, #16]
   13cf2:	1c5a      	adds	r2, r3, #1
   13cf4:	9204      	str	r2, [sp, #16]
   13cf6:	9a03      	ldr	r2, [sp, #12]
   13cf8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   13cfc:	701a      	strb	r2, [r3, #0]

    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   13cfe:	9904      	ldr	r1, [sp, #16]
   13d00:	9803      	ldr	r0, [sp, #12]
   13d02:	f7ff f95b 	bl	12fbc <smpScCatInitiatorBdAddr>
   13d06:	9004      	str	r0, [sp, #16]
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   13d08:	9904      	ldr	r1, [sp, #16]
   13d0a:	9803      	ldr	r0, [sp, #12]
   13d0c:	f7ff f9b5 	bl	1307a <smpScCatResponderBdAddr>
   13d10:	9004      	str	r0, [sp, #16]

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   13d12:	9b03      	ldr	r3, [sp, #12]
   13d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13d16:	699b      	ldr	r3, [r3, #24]
   13d18:	4618      	mov	r0, r3
   13d1a:	9b02      	ldr	r3, [sp, #8]
   13d1c:	9300      	str	r3, [sp, #0]
   13d1e:	9b03      	ldr	r3, [sp, #12]
   13d20:	2241      	movs	r2, #65	; 0x41
   13d22:	9905      	ldr	r1, [sp, #20]
   13d24:	f000 f916 	bl	13f54 <SmpScCmac>
  }
}
   13d28:	bf00      	nop
   13d2a:	b007      	add	sp, #28
   13d2c:	f85d fb04 	ldr.w	pc, [sp], #4

00013d30 <smpScActDHKeyCalcF6Eb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Eb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13d30:	b500      	push	{lr}
   13d32:	b087      	sub	sp, #28
   13d34:	9003      	str	r0, [sp, #12]
   13d36:	9102      	str	r1, [sp, #8]
  uint8_t *pCmacText;

  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   13d38:	9a02      	ldr	r2, [sp, #8]
   13d3a:	9903      	ldr	r1, [sp, #12]
   13d3c:	2041      	movs	r0, #65	; 0x41
   13d3e:	f000 f939 	bl	13fb4 <SmpScAlloc>
   13d42:	9005      	str	r0, [sp, #20]
   13d44:	9b05      	ldr	r3, [sp, #20]
   13d46:	2b00      	cmp	r3, #0
   13d48:	d045      	beq.n	13dd6 <smpScActDHKeyCalcF6Eb+0xa6>
  {
    uint8_t *pCatBuf = pCmacText;
   13d4a:	9b05      	ldr	r3, [sp, #20]
   13d4c:	9304      	str	r3, [sp, #16]

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   13d4e:	9b03      	ldr	r3, [sp, #12]
   13d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13d52:	695b      	ldr	r3, [r3, #20]
   13d54:	3310      	adds	r3, #16
   13d56:	4619      	mov	r1, r3
   13d58:	9804      	ldr	r0, [sp, #16]
   13d5a:	f000 f9c7 	bl	140ec <SmpScCat128>
   13d5e:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   13d60:	9b03      	ldr	r3, [sp, #12]
   13d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13d64:	695b      	ldr	r3, [r3, #20]
   13d66:	4619      	mov	r1, r3
   13d68:	9804      	ldr	r0, [sp, #16]
   13d6a:	f000 f9bf 	bl	140ec <SmpScCat128>
   13d6e:	9004      	str	r0, [sp, #16]
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Ra);
   13d70:	9b03      	ldr	r3, [sp, #12]
   13d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13d74:	695b      	ldr	r3, [r3, #20]
   13d76:	3320      	adds	r3, #32
   13d78:	4619      	mov	r1, r3
   13d7a:	9804      	ldr	r0, [sp, #16]
   13d7c:	f000 f9b6 	bl	140ec <SmpScCat128>
   13d80:	9004      	str	r0, [sp, #16]

    *pCatBuf++ = pCcb->pairRsp[SMP_AUTHREQ_POS]; /* AuthReq */
   13d82:	9b04      	ldr	r3, [sp, #16]
   13d84:	1c5a      	adds	r2, r3, #1
   13d86:	9204      	str	r2, [sp, #16]
   13d88:	9a03      	ldr	r2, [sp, #12]
   13d8a:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
   13d8e:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_OOB_POS]; /* OOB Data Flag */
   13d90:	9b04      	ldr	r3, [sp, #16]
   13d92:	1c5a      	adds	r2, r3, #1
   13d94:	9204      	str	r2, [sp, #16]
   13d96:	9a03      	ldr	r2, [sp, #12]
   13d98:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
   13d9c:	701a      	strb	r2, [r3, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_IO_POS]; /* IO Capability Parameter */
   13d9e:	9b04      	ldr	r3, [sp, #16]
   13da0:	1c5a      	adds	r2, r3, #1
   13da2:	9204      	str	r2, [sp, #16]
   13da4:	9a03      	ldr	r2, [sp, #12]
   13da6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
   13daa:	701a      	strb	r2, [r3, #0]

    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   13dac:	9904      	ldr	r1, [sp, #16]
   13dae:	9803      	ldr	r0, [sp, #12]
   13db0:	f7ff f963 	bl	1307a <smpScCatResponderBdAddr>
   13db4:	9004      	str	r0, [sp, #16]
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   13db6:	9904      	ldr	r1, [sp, #16]
   13db8:	9803      	ldr	r0, [sp, #12]
   13dba:	f7ff f8ff 	bl	12fbc <smpScCatInitiatorBdAddr>
   13dbe:	9004      	str	r0, [sp, #16]

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   13dc0:	9b03      	ldr	r3, [sp, #12]
   13dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13dc4:	699b      	ldr	r3, [r3, #24]
   13dc6:	4618      	mov	r0, r3
   13dc8:	9b02      	ldr	r3, [sp, #8]
   13dca:	9300      	str	r3, [sp, #0]
   13dcc:	9b03      	ldr	r3, [sp, #12]
   13dce:	2241      	movs	r2, #65	; 0x41
   13dd0:	9905      	ldr	r1, [sp, #20]
   13dd2:	f000 f8bf 	bl	13f54 <SmpScCmac>
  }

  /* Copy Ea from the previous state (smpScActDHKeyCalcF6Ea) */
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
   13dd6:	9b03      	ldr	r3, [sp, #12]
   13dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13dda:	695b      	ldr	r3, [r3, #20]
   13ddc:	461a      	mov	r2, r3
   13dde:	9b02      	ldr	r3, [sp, #8]
   13de0:	685b      	ldr	r3, [r3, #4]
   13de2:	4619      	mov	r1, r3
   13de4:	4610      	mov	r0, r2
   13de6:	f7f8 fa6b 	bl	c2c0 <Calc128Cpy>
}
   13dea:	bf00      	nop
   13dec:	b007      	add	sp, #28
   13dee:	f85d fb04 	ldr.w	pc, [sp], #4

00013df2 <SmpScAllocScratchBuffers>:
 *
 *  \return TRUE if success, else FALSE.
 */
/*************************************************************************************************/
bool_t SmpScAllocScratchBuffers(smpCcb_t *pCcb)
{
   13df2:	b510      	push	{r4, lr}
   13df4:	b082      	sub	sp, #8
   13df6:	9001      	str	r0, [sp, #4]
  if (pCcb->pScCcb->pScratch == NULL)
   13df8:	9b01      	ldr	r3, [sp, #4]
   13dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13dfc:	695b      	ldr	r3, [r3, #20]
   13dfe:	2b00      	cmp	r3, #0
   13e00:	d106      	bne.n	13e10 <SmpScAllocScratchBuffers+0x1e>
  {
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
   13e02:	9b01      	ldr	r3, [sp, #4]
   13e04:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   13e06:	2060      	movs	r0, #96	; 0x60
   13e08:	f00b fce6 	bl	1f7d8 <WsfBufAlloc>
   13e0c:	4603      	mov	r3, r0
   13e0e:	6163      	str	r3, [r4, #20]
  }

  if (pCcb->pScCcb->pPeerPublicKey == NULL)
   13e10:	9b01      	ldr	r3, [sp, #4]
   13e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e14:	689b      	ldr	r3, [r3, #8]
   13e16:	2b00      	cmp	r3, #0
   13e18:	d106      	bne.n	13e28 <SmpScAllocScratchBuffers+0x36>
  {
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   13e1a:	9b01      	ldr	r3, [sp, #4]
   13e1c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   13e1e:	2040      	movs	r0, #64	; 0x40
   13e20:	f00b fcda 	bl	1f7d8 <WsfBufAlloc>
   13e24:	4603      	mov	r3, r0
   13e26:	60a3      	str	r3, [r4, #8]
  }

  if (pCcb->pScCcb->pLtk == NULL)
   13e28:	9b01      	ldr	r3, [sp, #4]
   13e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e2c:	699b      	ldr	r3, [r3, #24]
   13e2e:	2b00      	cmp	r3, #0
   13e30:	d106      	bne.n	13e40 <SmpScAllocScratchBuffers+0x4e>
  {
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
   13e32:	9b01      	ldr	r3, [sp, #4]
   13e34:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   13e36:	2020      	movs	r0, #32
   13e38:	f00b fcce 	bl	1f7d8 <WsfBufAlloc>
   13e3c:	4603      	mov	r3, r0
   13e3e:	61a3      	str	r3, [r4, #24]
  }

  if (pCcb->pScCcb->pLocalPublicKey == NULL)
   13e40:	9b01      	ldr	r3, [sp, #4]
   13e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e44:	68db      	ldr	r3, [r3, #12]
   13e46:	2b00      	cmp	r3, #0
   13e48:	d106      	bne.n	13e58 <SmpScAllocScratchBuffers+0x66>
  {
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   13e4a:	9b01      	ldr	r3, [sp, #4]
   13e4c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   13e4e:	2040      	movs	r0, #64	; 0x40
   13e50:	f00b fcc2 	bl	1f7d8 <WsfBufAlloc>
   13e54:	4603      	mov	r3, r0
   13e56:	60e3      	str	r3, [r4, #12]
  }

  if (pCcb->pScCcb->pPrivateKey == NULL)
   13e58:	9b01      	ldr	r3, [sp, #4]
   13e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e5c:	691b      	ldr	r3, [r3, #16]
   13e5e:	2b00      	cmp	r3, #0
   13e60:	d106      	bne.n	13e70 <SmpScAllocScratchBuffers+0x7e>
  {
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
   13e62:	9b01      	ldr	r3, [sp, #4]
   13e64:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   13e66:	2020      	movs	r0, #32
   13e68:	f00b fcb6 	bl	1f7d8 <WsfBufAlloc>
   13e6c:	4603      	mov	r3, r0
   13e6e:	6123      	str	r3, [r4, #16]
  }

  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   13e70:	9b01      	ldr	r3, [sp, #4]
   13e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e74:	695b      	ldr	r3, [r3, #20]
   13e76:	2b00      	cmp	r3, #0
   13e78:	d015      	beq.n	13ea6 <SmpScAllocScratchBuffers+0xb4>
   13e7a:	9b01      	ldr	r3, [sp, #4]
   13e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e7e:	689b      	ldr	r3, [r3, #8]
   13e80:	2b00      	cmp	r3, #0
   13e82:	d010      	beq.n	13ea6 <SmpScAllocScratchBuffers+0xb4>
   13e84:	9b01      	ldr	r3, [sp, #4]
   13e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e88:	699b      	ldr	r3, [r3, #24]
   13e8a:	2b00      	cmp	r3, #0
   13e8c:	d00b      	beq.n	13ea6 <SmpScAllocScratchBuffers+0xb4>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
   13e8e:	9b01      	ldr	r3, [sp, #4]
   13e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e92:	68db      	ldr	r3, [r3, #12]
  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   13e94:	2b00      	cmp	r3, #0
   13e96:	d006      	beq.n	13ea6 <SmpScAllocScratchBuffers+0xb4>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
   13e98:	9b01      	ldr	r3, [sp, #4]
   13e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13e9c:	691b      	ldr	r3, [r3, #16]
   13e9e:	2b00      	cmp	r3, #0
   13ea0:	d001      	beq.n	13ea6 <SmpScAllocScratchBuffers+0xb4>
  {
    return TRUE;
   13ea2:	2301      	movs	r3, #1
   13ea4:	e000      	b.n	13ea8 <SmpScAllocScratchBuffers+0xb6>
  }

  return FALSE;
   13ea6:	2300      	movs	r3, #0
}
   13ea8:	4618      	mov	r0, r3
   13eaa:	b002      	add	sp, #8
   13eac:	bd10      	pop	{r4, pc}

00013eae <SmpScFreeScratchBuffers>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScFreeScratchBuffers(smpCcb_t *pCcb)
{
   13eae:	b500      	push	{lr}
   13eb0:	b083      	sub	sp, #12
   13eb2:	9001      	str	r0, [sp, #4]
  /* free scratch buffer */
  if (pCcb->pScCcb->pScratch != NULL)
   13eb4:	9b01      	ldr	r3, [sp, #4]
   13eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13eb8:	695b      	ldr	r3, [r3, #20]
   13eba:	2b00      	cmp	r3, #0
   13ebc:	d009      	beq.n	13ed2 <SmpScFreeScratchBuffers+0x24>
  {
    WsfBufFree(pCcb->pScCcb->pScratch);
   13ebe:	9b01      	ldr	r3, [sp, #4]
   13ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13ec2:	695b      	ldr	r3, [r3, #20]
   13ec4:	4618      	mov	r0, r3
   13ec6:	f00b fcc5 	bl	1f854 <WsfBufFree>
    pCcb->pScCcb->pScratch = NULL;
   13eca:	9b01      	ldr	r3, [sp, #4]
   13ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13ece:	2200      	movs	r2, #0
   13ed0:	615a      	str	r2, [r3, #20]
  }

  /* free scratch peer public key buffer */
  if (pCcb->pScCcb->pPeerPublicKey != NULL)
   13ed2:	9b01      	ldr	r3, [sp, #4]
   13ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13ed6:	689b      	ldr	r3, [r3, #8]
   13ed8:	2b00      	cmp	r3, #0
   13eda:	d009      	beq.n	13ef0 <SmpScFreeScratchBuffers+0x42>
  {
    WsfBufFree(pCcb->pScCcb->pPeerPublicKey);
   13edc:	9b01      	ldr	r3, [sp, #4]
   13ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13ee0:	689b      	ldr	r3, [r3, #8]
   13ee2:	4618      	mov	r0, r3
   13ee4:	f00b fcb6 	bl	1f854 <WsfBufFree>
    pCcb->pScCcb->pPeerPublicKey = NULL;
   13ee8:	9b01      	ldr	r3, [sp, #4]
   13eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13eec:	2200      	movs	r2, #0
   13eee:	609a      	str	r2, [r3, #8]
  }

  /* free scratch LTK buffer */
  if (pCcb->pScCcb->pLtk != NULL)
   13ef0:	9b01      	ldr	r3, [sp, #4]
   13ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13ef4:	699b      	ldr	r3, [r3, #24]
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	d009      	beq.n	13f0e <SmpScFreeScratchBuffers+0x60>
  {
    WsfBufFree(pCcb->pScCcb->pLtk);
   13efa:	9b01      	ldr	r3, [sp, #4]
   13efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13efe:	699b      	ldr	r3, [r3, #24]
   13f00:	4618      	mov	r0, r3
   13f02:	f00b fca7 	bl	1f854 <WsfBufFree>
    pCcb->pScCcb->pLtk = NULL;
   13f06:	9b01      	ldr	r3, [sp, #4]
   13f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13f0a:	2200      	movs	r2, #0
   13f0c:	619a      	str	r2, [r3, #24]
  }

  /* free scratch local public key buffer */
  if (pCcb->pScCcb->pLocalPublicKey != NULL)
   13f0e:	9b01      	ldr	r3, [sp, #4]
   13f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13f12:	68db      	ldr	r3, [r3, #12]
   13f14:	2b00      	cmp	r3, #0
   13f16:	d009      	beq.n	13f2c <SmpScFreeScratchBuffers+0x7e>
  {
    WsfBufFree(pCcb->pScCcb->pLocalPublicKey);
   13f18:	9b01      	ldr	r3, [sp, #4]
   13f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13f1c:	68db      	ldr	r3, [r3, #12]
   13f1e:	4618      	mov	r0, r3
   13f20:	f00b fc98 	bl	1f854 <WsfBufFree>
    pCcb->pScCcb->pLocalPublicKey = NULL;
   13f24:	9b01      	ldr	r3, [sp, #4]
   13f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13f28:	2200      	movs	r2, #0
   13f2a:	60da      	str	r2, [r3, #12]
  }

  /* free scratch private key buffer */
  if (pCcb->pScCcb->pPrivateKey != NULL)
   13f2c:	9b01      	ldr	r3, [sp, #4]
   13f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13f30:	691b      	ldr	r3, [r3, #16]
   13f32:	2b00      	cmp	r3, #0
   13f34:	d009      	beq.n	13f4a <SmpScFreeScratchBuffers+0x9c>
  {
    WsfBufFree(pCcb->pScCcb->pPrivateKey);
   13f36:	9b01      	ldr	r3, [sp, #4]
   13f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13f3a:	691b      	ldr	r3, [r3, #16]
   13f3c:	4618      	mov	r0, r3
   13f3e:	f00b fc89 	bl	1f854 <WsfBufFree>
    pCcb->pScCcb->pPrivateKey = NULL;
   13f42:	9b01      	ldr	r3, [sp, #4]
   13f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   13f46:	2200      	movs	r2, #0
   13f48:	611a      	str	r2, [r3, #16]
  }
}
   13f4a:	bf00      	nop
   13f4c:	b003      	add	sp, #12
   13f4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013f54 <SmpScCmac>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCmac(const uint8_t *pKey, uint8_t *pText, uint8_t textLen, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13f54:	b500      	push	{lr}
   13f56:	b087      	sub	sp, #28
   13f58:	9005      	str	r0, [sp, #20]
   13f5a:	9104      	str	r1, [sp, #16]
   13f5c:	9302      	str	r3, [sp, #8]
   13f5e:	4613      	mov	r3, r2
   13f60:	f88d 300f 	strb.w	r3, [sp, #15]
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   13f64:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13f68:	b29a      	uxth	r2, r3
   13f6a:	4b11      	ldr	r3, [pc, #68]	; (13fb0 <SmpScCmac+0x5c>)
   13f6c:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
   13f70:	9b02      	ldr	r3, [sp, #8]
   13f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   13f76:	b29b      	uxth	r3, r3
   13f78:	201c      	movs	r0, #28
   13f7a:	9001      	str	r0, [sp, #4]
   13f7c:	9300      	str	r3, [sp, #0]
   13f7e:	460b      	mov	r3, r1
   13f80:	9904      	ldr	r1, [sp, #16]
   13f82:	9805      	ldr	r0, [sp, #20]
   13f84:	f003 fae8 	bl	17558 <SecCmac>
   13f88:	4603      	mov	r3, r0
   13f8a:	2b00      	cmp	r3, #0
   13f8c:	d10c      	bne.n	13fa8 <SmpScCmac+0x54>
  {
    WsfBufFree(pText);
   13f8e:	9804      	ldr	r0, [sp, #16]
   13f90:	f00b fc60 	bl	1f854 <WsfBufFree>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   13f94:	9b08      	ldr	r3, [sp, #32]
   13f96:	2208      	movs	r2, #8
   13f98:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   13f9a:	9b08      	ldr	r3, [sp, #32]
   13f9c:	2203      	movs	r2, #3
   13f9e:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   13fa0:	9908      	ldr	r1, [sp, #32]
   13fa2:	9802      	ldr	r0, [sp, #8]
   13fa4:	f7fe f872 	bl	1208c <smpSmExecute>
  }
}
   13fa8:	bf00      	nop
   13faa:	b007      	add	sp, #28
   13fac:	f85d fb04 	ldr.w	pc, [sp], #4
   13fb0:	100042a4 	.word	0x100042a4

00013fb4 <SmpScAlloc>:
 *
 *  \return Allocated buffer.
 */
/*************************************************************************************************/
uint8_t *SmpScAlloc(uint8_t size, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   13fb4:	b500      	push	{lr}
   13fb6:	b087      	sub	sp, #28
   13fb8:	4603      	mov	r3, r0
   13fba:	9102      	str	r1, [sp, #8]
   13fbc:	9201      	str	r2, [sp, #4]
   13fbe:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t *pBuf = WsfBufAlloc(size);
   13fc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   13fc6:	b29b      	uxth	r3, r3
   13fc8:	4618      	mov	r0, r3
   13fca:	f00b fc05 	bl	1f7d8 <WsfBufAlloc>
   13fce:	9005      	str	r0, [sp, #20]

  if (pBuf == NULL)
   13fd0:	9b05      	ldr	r3, [sp, #20]
   13fd2:	2b00      	cmp	r3, #0
   13fd4:	d109      	bne.n	13fea <SmpScAlloc+0x36>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   13fd6:	9b01      	ldr	r3, [sp, #4]
   13fd8:	2208      	movs	r2, #8
   13fda:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   13fdc:	9b01      	ldr	r3, [sp, #4]
   13fde:	2203      	movs	r2, #3
   13fe0:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   13fe2:	9901      	ldr	r1, [sp, #4]
   13fe4:	9802      	ldr	r0, [sp, #8]
   13fe6:	f7fe f851 	bl	1208c <smpSmExecute>
  }

  return pBuf;
   13fea:	9b05      	ldr	r3, [sp, #20]
}
   13fec:	4618      	mov	r0, r3
   13fee:	b007      	add	sp, #28
   13ff0:	f85d fb04 	ldr.w	pc, [sp], #4

00013ff4 <SmpScCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pU, uint8_t *pV, uint8_t z, uint8_t *pX)
{
   13ff4:	b500      	push	{lr}
   13ff6:	b089      	sub	sp, #36	; 0x24
   13ff8:	9005      	str	r0, [sp, #20]
   13ffa:	9104      	str	r1, [sp, #16]
   13ffc:	9203      	str	r2, [sp, #12]
   13ffe:	9302      	str	r3, [sp, #8]
  uint8_t *pCmacText;

  /* f4(pU, pV, pX, z) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if ((pCmacText = SmpScAlloc(SMP_F4_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   14000:	9a04      	ldr	r2, [sp, #16]
   14002:	9905      	ldr	r1, [sp, #20]
   14004:	2041      	movs	r0, #65	; 0x41
   14006:	f7ff ffd5 	bl	13fb4 <SmpScAlloc>
   1400a:	9007      	str	r0, [sp, #28]
   1400c:	9b07      	ldr	r3, [sp, #28]
   1400e:	2b00      	cmp	r3, #0
   14010:	d019      	beq.n	14046 <SmpScCalcF4+0x52>
  {
    uint8_t *pCatBuf = pCmacText;
   14012:	9b07      	ldr	r3, [sp, #28]
   14014:	9306      	str	r3, [sp, #24]

    /* Concatinate pU, pV, z */
    pCatBuf = SmpScCat(pCatBuf, pU, SMP_PUB_KEY_LEN);
   14016:	2220      	movs	r2, #32
   14018:	9903      	ldr	r1, [sp, #12]
   1401a:	9806      	ldr	r0, [sp, #24]
   1401c:	f000 f850 	bl	140c0 <SmpScCat>
   14020:	9006      	str	r0, [sp, #24]
    pCatBuf = SmpScCat(pCatBuf, pV, SMP_PUB_KEY_LEN);
   14022:	2220      	movs	r2, #32
   14024:	9902      	ldr	r1, [sp, #8]
   14026:	9806      	ldr	r0, [sp, #24]
   14028:	f000 f84a 	bl	140c0 <SmpScCat>
   1402c:	9006      	str	r0, [sp, #24]
    *pCatBuf = z;
   1402e:	9b06      	ldr	r3, [sp, #24]
   14030:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   14034:	701a      	strb	r2, [r3, #0]

    /* Execute CMAC with Nb as the key */
    SmpScCmac(pX, pCmacText, SMP_F4_TEXT_LEN, pCcb, pMsg);
   14036:	9b04      	ldr	r3, [sp, #16]
   14038:	9300      	str	r3, [sp, #0]
   1403a:	9b05      	ldr	r3, [sp, #20]
   1403c:	2241      	movs	r2, #65	; 0x41
   1403e:	9907      	ldr	r1, [sp, #28]
   14040:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14042:	f7ff ff87 	bl	13f54 <SmpScCmac>
  }
}
   14046:	bf00      	nop
   14048:	b009      	add	sp, #36	; 0x24
   1404a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00014050 <SmpScInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScInit()
{
   14050:	b082      	sub	sp, #8
  uint8_t i;

  for (i=0; i<DM_CONN_MAX; i++)
   14052:	2300      	movs	r3, #0
   14054:	f88d 3007 	strb.w	r3, [sp, #7]
   14058:	e016      	b.n	14088 <SmpScInit+0x38>
  {
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1405a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1405e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   14062:	460b      	mov	r3, r1
   14064:	00db      	lsls	r3, r3, #3
   14066:	1a5b      	subs	r3, r3, r1
   14068:	009b      	lsls	r3, r3, #2
   1406a:	4911      	ldr	r1, [pc, #68]	; (140b0 <SmpScInit+0x60>)
   1406c:	4419      	add	r1, r3
   1406e:	4811      	ldr	r0, [pc, #68]	; (140b4 <SmpScInit+0x64>)
   14070:	4613      	mov	r3, r2
   14072:	00db      	lsls	r3, r3, #3
   14074:	4413      	add	r3, r2
   14076:	00db      	lsls	r3, r3, #3
   14078:	4403      	add	r3, r0
   1407a:	3344      	adds	r3, #68	; 0x44
   1407c:	6019      	str	r1, [r3, #0]
  for (i=0; i<DM_CONN_MAX; i++)
   1407e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14082:	3301      	adds	r3, #1
   14084:	f88d 3007 	strb.w	r3, [sp, #7]
   14088:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1408c:	2b02      	cmp	r3, #2
   1408e:	d9e4      	bls.n	1405a <SmpScInit+0xa>
  }

  smpCb.procPairing = smpScProcPairing;
   14090:	4b08      	ldr	r3, [pc, #32]	; (140b4 <SmpScInit+0x64>)
   14092:	4a09      	ldr	r2, [pc, #36]	; (140b8 <SmpScInit+0x68>)
   14094:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  smpCb.procAuthReq = smpScAuthReq;
   14098:	4b06      	ldr	r3, [pc, #24]	; (140b4 <SmpScInit+0x64>)
   1409a:	4a08      	ldr	r2, [pc, #32]	; (140bc <SmpScInit+0x6c>)
   1409c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  smpCb.lescSupported = TRUE;
   140a0:	4b04      	ldr	r3, [pc, #16]	; (140b4 <SmpScInit+0x64>)
   140a2:	2201      	movs	r2, #1
   140a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
}
   140a8:	bf00      	nop
   140aa:	b002      	add	sp, #8
   140ac:	4770      	bx	lr
   140ae:	bf00      	nop
   140b0:	10004394 	.word	0x10004394
   140b4:	100042a4 	.word	0x100042a4
   140b8:	00013139 	.word	0x00013139
   140bc:	00013599 	.word	0x00013599

000140c0 <SmpScCat>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat(uint8_t *pDst, const uint8_t *pSrc, uint8_t len)
{
   140c0:	b500      	push	{lr}
   140c2:	b085      	sub	sp, #20
   140c4:	9003      	str	r0, [sp, #12]
   140c6:	9102      	str	r1, [sp, #8]
   140c8:	4613      	mov	r3, r2
   140ca:	f88d 3007 	strb.w	r3, [sp, #7]
  memcpy(pDst, pSrc, len);
   140ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   140d2:	461a      	mov	r2, r3
   140d4:	9902      	ldr	r1, [sp, #8]
   140d6:	9803      	ldr	r0, [sp, #12]
   140d8:	f7f8 f812 	bl	c100 <memcpy>
  return pDst + len;
   140dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   140e0:	9a03      	ldr	r2, [sp, #12]
   140e2:	4413      	add	r3, r2
}
   140e4:	4618      	mov	r0, r3
   140e6:	b005      	add	sp, #20
   140e8:	f85d fb04 	ldr.w	pc, [sp], #4

000140ec <SmpScCat128>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat128(uint8_t *pDst, uint8_t *pSrc)
{
   140ec:	b500      	push	{lr}
   140ee:	b083      	sub	sp, #12
   140f0:	9001      	str	r0, [sp, #4]
   140f2:	9100      	str	r1, [sp, #0]
  Calc128Cpy(pDst, pSrc);
   140f4:	9900      	ldr	r1, [sp, #0]
   140f6:	9801      	ldr	r0, [sp, #4]
   140f8:	f7f8 f8e2 	bl	c2c0 <Calc128Cpy>
  return pDst + 16;
   140fc:	9b01      	ldr	r3, [sp, #4]
   140fe:	3310      	adds	r3, #16
}
   14100:	4618      	mov	r0, r3
   14102:	b003      	add	sp, #12
   14104:	f85d fb04 	ldr.w	pc, [sp], #4

00014108 <smpScSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   14108:	b500      	push	{lr}
   1410a:	b085      	sub	sp, #20
   1410c:	9001      	str	r0, [sp, #4]
   1410e:	9100      	str	r1, [sp, #0]
  /* Transmit the public key */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   14110:	9b01      	ldr	r3, [sp, #4]
   14112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   14116:	2201      	movs	r2, #1
   14118:	2101      	movs	r1, #1
   1411a:	4618      	mov	r0, r3
   1411c:	f001 fc5e 	bl	159dc <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   14120:	9801      	ldr	r0, [sp, #4]
   14122:	f7fd fa7d 	bl	11620 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PUB_KEY_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   14126:	2049      	movs	r0, #73	; 0x49
   14128:	f7fe fe0b 	bl	12d42 <smpMsgAlloc>
   1412c:	9003      	str	r0, [sp, #12]
   1412e:	9b03      	ldr	r3, [sp, #12]
   14130:	2b00      	cmp	r3, #0
   14132:	d01f      	beq.n	14174 <smpScSendPubKey+0x6c>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   14134:	9b03      	ldr	r3, [sp, #12]
   14136:	3308      	adds	r3, #8
   14138:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, SMP_CMD_PUBLIC_KEY);
   1413a:	9b02      	ldr	r3, [sp, #8]
   1413c:	1c5a      	adds	r2, r3, #1
   1413e:	9202      	str	r2, [sp, #8]
   14140:	220c      	movs	r2, #12
   14142:	701a      	strb	r2, [r3, #0]

    /* Store Public Key X data in LSB first format */
    WStrReverseCpy(p,  pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   14144:	9b01      	ldr	r3, [sp, #4]
   14146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   14148:	68db      	ldr	r3, [r3, #12]
   1414a:	2220      	movs	r2, #32
   1414c:	4619      	mov	r1, r3
   1414e:	9802      	ldr	r0, [sp, #8]
   14150:	f7f8 f8ef 	bl	c332 <WStrReverseCpy>

    /* Store Public Key Y data in LSB first format */
    WStrReverseCpy(p+SMP_PUB_KEY_LEN, pCcb->pScCcb->pLocalPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   14154:	9b02      	ldr	r3, [sp, #8]
   14156:	f103 0020 	add.w	r0, r3, #32
   1415a:	9b01      	ldr	r3, [sp, #4]
   1415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1415e:	68db      	ldr	r3, [r3, #12]
   14160:	3320      	adds	r3, #32
   14162:	2220      	movs	r2, #32
   14164:	4619      	mov	r1, r3
   14166:	f7f8 f8e4 	bl	c332 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1416a:	9903      	ldr	r1, [sp, #12]
   1416c:	9801      	ldr	r0, [sp, #4]
   1416e:	f7fe fdb1 	bl	12cd4 <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   14172:	e009      	b.n	14188 <smpScSendPubKey+0x80>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   14174:	9b00      	ldr	r3, [sp, #0]
   14176:	2208      	movs	r2, #8
   14178:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1417a:	9b00      	ldr	r3, [sp, #0]
   1417c:	2203      	movs	r2, #3
   1417e:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   14180:	9900      	ldr	r1, [sp, #0]
   14182:	9801      	ldr	r0, [sp, #4]
   14184:	f7fd ff82 	bl	1208c <smpSmExecute>
}
   14188:	bf00      	nop
   1418a:	b005      	add	sp, #20
   1418c:	f85d fb04 	ldr.w	pc, [sp], #4

00014190 <smpScSendDHKeyCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendDHKeyCheck(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCheck)
{
   14190:	b500      	push	{lr}
   14192:	b087      	sub	sp, #28
   14194:	9003      	str	r0, [sp, #12]
   14196:	9102      	str	r1, [sp, #8]
   14198:	9201      	str	r2, [sp, #4]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1419a:	9b03      	ldr	r3, [sp, #12]
   1419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   141a0:	2201      	movs	r2, #1
   141a2:	2101      	movs	r1, #1
   141a4:	4618      	mov	r0, r3
   141a6:	f001 fc19 	bl	159dc <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   141aa:	9803      	ldr	r0, [sp, #12]
   141ac:	f7fd fa38 	bl	11620 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_DHKEY_CHECK_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   141b0:	2019      	movs	r0, #25
   141b2:	f7fe fdc6 	bl	12d42 <smpMsgAlloc>
   141b6:	9005      	str	r0, [sp, #20]
   141b8:	9b05      	ldr	r3, [sp, #20]
   141ba:	2b00      	cmp	r3, #0
   141bc:	d011      	beq.n	141e2 <smpScSendDHKeyCheck+0x52>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   141be:	9b05      	ldr	r3, [sp, #20]
   141c0:	3308      	adds	r3, #8
   141c2:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, SMP_CMD_DHKEY_CHECK);
   141c4:	9b04      	ldr	r3, [sp, #16]
   141c6:	1c5a      	adds	r2, r3, #1
   141c8:	9204      	str	r2, [sp, #16]
   141ca:	220d      	movs	r2, #13
   141cc:	701a      	strb	r2, [r3, #0]

    /* DH Key Check data is result of last CMAC operation (LSB first) */
    WStrReverseCpy(p, pCheck, SMP_DHKEY_CHECK_LEN);
   141ce:	2210      	movs	r2, #16
   141d0:	9901      	ldr	r1, [sp, #4]
   141d2:	9804      	ldr	r0, [sp, #16]
   141d4:	f7f8 f8ad 	bl	c332 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   141d8:	9905      	ldr	r1, [sp, #20]
   141da:	9803      	ldr	r0, [sp, #12]
   141dc:	f7fe fd7a 	bl	12cd4 <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   141e0:	e009      	b.n	141f6 <smpScSendDHKeyCheck+0x66>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   141e2:	9b02      	ldr	r3, [sp, #8]
   141e4:	2208      	movs	r2, #8
   141e6:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   141e8:	9b02      	ldr	r3, [sp, #8]
   141ea:	2203      	movs	r2, #3
   141ec:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   141ee:	9902      	ldr	r1, [sp, #8]
   141f0:	9803      	ldr	r0, [sp, #12]
   141f2:	f7fd ff4b 	bl	1208c <smpSmExecute>
}
   141f6:	bf00      	nop
   141f8:	b007      	add	sp, #28
   141fa:	f85d fb04 	ldr.w	pc, [sp], #4

000141fe <smpScSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pRand)
{
   141fe:	b500      	push	{lr}
   14200:	b087      	sub	sp, #28
   14202:	9003      	str	r0, [sp, #12]
   14204:	9102      	str	r1, [sp, #8]
   14206:	9201      	str	r2, [sp, #4]
  /* Transmit the Pair Rand */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   14208:	9b03      	ldr	r3, [sp, #12]
   1420a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1420e:	2201      	movs	r2, #1
   14210:	2101      	movs	r1, #1
   14212:	4618      	mov	r0, r3
   14214:	f001 fbe2 	bl	159dc <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   14218:	9803      	ldr	r0, [sp, #12]
   1421a:	f7fd fa01 	bl	11620 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   1421e:	2019      	movs	r0, #25
   14220:	f7fe fd8f 	bl	12d42 <smpMsgAlloc>
   14224:	9005      	str	r0, [sp, #20]
   14226:	9b05      	ldr	r3, [sp, #20]
   14228:	2b00      	cmp	r3, #0
   1422a:	d011      	beq.n	14250 <smpScSendRand+0x52>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   1422c:	9b05      	ldr	r3, [sp, #20]
   1422e:	3308      	adds	r3, #8
   14230:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   14232:	9b04      	ldr	r3, [sp, #16]
   14234:	1c5a      	adds	r2, r3, #1
   14236:	9204      	str	r2, [sp, #16]
   14238:	2204      	movs	r2, #4
   1423a:	701a      	strb	r2, [r3, #0]

    /* Store Random data (LSB first) */
    WStrReverseCpy(p, pRand, SMP_RAND_LEN);
   1423c:	2210      	movs	r2, #16
   1423e:	9901      	ldr	r1, [sp, #4]
   14240:	9804      	ldr	r0, [sp, #16]
   14242:	f7f8 f876 	bl	c332 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   14246:	9905      	ldr	r1, [sp, #20]
   14248:	9803      	ldr	r0, [sp, #12]
   1424a:	f7fe fd43 	bl	12cd4 <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1424e:	e009      	b.n	14264 <smpScSendRand+0x66>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   14250:	9b02      	ldr	r3, [sp, #8]
   14252:	2208      	movs	r2, #8
   14254:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   14256:	9b02      	ldr	r3, [sp, #8]
   14258:	2203      	movs	r2, #3
   1425a:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   1425c:	9902      	ldr	r1, [sp, #8]
   1425e:	9803      	ldr	r0, [sp, #12]
   14260:	f7fd ff14 	bl	1208c <smpSmExecute>
}
   14264:	bf00      	nop
   14266:	b007      	add	sp, #28
   14268:	f85d fb04 	ldr.w	pc, [sp], #4

0001426c <smpScSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCnf)
{
   1426c:	b500      	push	{lr}
   1426e:	b087      	sub	sp, #28
   14270:	9003      	str	r0, [sp, #12]
   14272:	9102      	str	r1, [sp, #8]
   14274:	9201      	str	r2, [sp, #4]
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   14276:	9b03      	ldr	r3, [sp, #12]
   14278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   1427c:	2201      	movs	r2, #1
   1427e:	2101      	movs	r1, #1
   14280:	4618      	mov	r0, r3
   14282:	f001 fbab 	bl	159dc <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   14286:	9803      	ldr	r0, [sp, #12]
   14288:	f7fd f9ca 	bl	11620 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1428c:	2019      	movs	r0, #25
   1428e:	f7fe fd58 	bl	12d42 <smpMsgAlloc>
   14292:	9005      	str	r0, [sp, #20]
   14294:	9b05      	ldr	r3, [sp, #20]
   14296:	2b00      	cmp	r3, #0
   14298:	d011      	beq.n	142be <smpScSendPairCnf+0x52>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
   1429a:	9b05      	ldr	r3, [sp, #20]
   1429c:	3308      	adds	r3, #8
   1429e:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   142a0:	9b04      	ldr	r3, [sp, #16]
   142a2:	1c5a      	adds	r2, r3, #1
   142a4:	9204      	str	r2, [sp, #16]
   142a6:	2203      	movs	r2, #3
   142a8:	701a      	strb	r2, [r3, #0]

    /* Store Confirm data (LSB first) */
    WStrReverseCpy(p, pCnf, SMP_CONFIRM_LEN);
   142aa:	2210      	movs	r2, #16
   142ac:	9901      	ldr	r1, [sp, #4]
   142ae:	9804      	ldr	r0, [sp, #16]
   142b0:	f7f8 f83f 	bl	c332 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   142b4:	9905      	ldr	r1, [sp, #20]
   142b6:	9803      	ldr	r0, [sp, #12]
   142b8:	f7fe fd0c 	bl	12cd4 <smpSendPkt>
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   142bc:	e009      	b.n	142d2 <smpScSendPairCnf+0x66>
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
   142be:	9b02      	ldr	r3, [sp, #8]
   142c0:	2208      	movs	r2, #8
   142c2:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   142c4:	9b02      	ldr	r3, [sp, #8]
   142c6:	2203      	movs	r2, #3
   142c8:	709a      	strb	r2, [r3, #2]
    smpSmExecute(pCcb, pMsg);
   142ca:	9902      	ldr	r1, [sp, #8]
   142cc:	9803      	ldr	r0, [sp, #12]
   142ce:	f7fd fedd 	bl	1208c <smpSmExecute>
}
   142d2:	bf00      	nop
   142d4:	b007      	add	sp, #28
   142d6:	f85d fb04 	ldr.w	pc, [sp], #4

000142da <smpGetPkBit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
uint8_t smpGetPkBit(smpCcb_t *pCcb)
{
   142da:	b084      	sub	sp, #16
   142dc:	9001      	str	r0, [sp, #4]
  smpScCcb_t *pScCb = pCcb->pScCcb;
   142de:	9b01      	ldr	r3, [sp, #4]
   142e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   142e2:	9303      	str	r3, [sp, #12]
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
   142e4:	9b03      	ldr	r3, [sp, #12]
   142e6:	78db      	ldrb	r3, [r3, #3]
   142e8:	08db      	lsrs	r3, r3, #3
   142ea:	b2db      	uxtb	r3, r3
   142ec:	f1c3 030f 	rsb	r3, r3, #15
   142f0:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t bit = pScCb->pkPos % 8;
   142f4:	9b03      	ldr	r3, [sp, #12]
   142f6:	78db      	ldrb	r3, [r3, #3]
   142f8:	f003 0307 	and.w	r3, r3, #7
   142fc:	f88d 300a 	strb.w	r3, [sp, #10]

  if (pScCb->pScratch->Ra[indx] & 1<<bit)
   14300:	9b03      	ldr	r3, [sp, #12]
   14302:	695a      	ldr	r2, [r3, #20]
   14304:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14308:	4413      	add	r3, r2
   1430a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1430e:	461a      	mov	r2, r3
   14310:	f89d 300a 	ldrb.w	r3, [sp, #10]
   14314:	fa42 f303 	asr.w	r3, r2, r3
   14318:	f003 0301 	and.w	r3, r3, #1
   1431c:	2b00      	cmp	r3, #0
   1431e:	d001      	beq.n	14324 <smpGetPkBit+0x4a>
    return 0x81;
   14320:	2381      	movs	r3, #129	; 0x81
   14322:	e000      	b.n	14326 <smpGetPkBit+0x4c>

  return 0x80;
   14324:	2380      	movs	r3, #128	; 0x80
}
   14326:	4618      	mov	r0, r3
   14328:	b004      	add	sp, #16
   1432a:	4770      	bx	lr

0001432c <SmpScGetCancelMsgWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SmpScGetCancelMsgWithReattempt(dmConnId_t connId, wsfMsgHdr_t *pHdr, uint8_t status)
{
   1432c:	b500      	push	{lr}
   1432e:	b085      	sub	sp, #20
   14330:	4603      	mov	r3, r0
   14332:	9100      	str	r1, [sp, #0]
   14334:	f88d 3007 	strb.w	r3, [sp, #7]
   14338:	4613      	mov	r3, r2
   1433a:	f88d 3006 	strb.w	r3, [sp, #6]
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   1433e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14342:	4618      	mov	r0, r3
   14344:	f7fe fa5c 	bl	12800 <smpCcbByConnId>
   14348:	9003      	str	r0, [sp, #12]

  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);

  /* update repeated attempts count */
  pCcb->attempts++;
   1434a:	9b03      	ldr	r3, [sp, #12]
   1434c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   14350:	3301      	adds	r3, #1
   14352:	b2da      	uxtb	r2, r3
   14354:	9b03      	ldr	r3, [sp, #12]
   14356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  pHdr->param = connId;
   1435a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1435e:	b29a      	uxth	r2, r3
   14360:	9b00      	ldr	r3, [sp, #0]
   14362:	801a      	strh	r2, [r3, #0]
  pHdr->status = status;
   14364:	9b00      	ldr	r3, [sp, #0]
   14366:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1436a:	70da      	strb	r2, [r3, #3]

  SmpDbPairingFailed(connId);
   1436c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14370:	4618      	mov	r0, r3
   14372:	f7fe f83b 	bl	123ec <SmpDbPairingFailed>

  if (pCcb->attempts == pSmpCfg->maxAttempts)
   14376:	9b03      	ldr	r3, [sp, #12]
   14378:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
   1437c:	4b07      	ldr	r3, [pc, #28]	; (1439c <SmpScGetCancelMsgWithReattempt+0x70>)
   1437e:	681b      	ldr	r3, [r3, #0]
   14380:	79db      	ldrb	r3, [r3, #7]
   14382:	429a      	cmp	r2, r3
   14384:	d103      	bne.n	1438e <SmpScGetCancelMsgWithReattempt+0x62>
  {
    /* max attempts reached */
    pHdr->event = SMP_MSG_INT_MAX_ATTEMPTS;
   14386:	9b00      	ldr	r3, [sp, #0]
   14388:	220d      	movs	r2, #13
   1438a:	709a      	strb	r2, [r3, #2]
  else
  {
    /* else just fail */
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
  }
}
   1438c:	e002      	b.n	14394 <SmpScGetCancelMsgWithReattempt+0x68>
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
   1438e:	9b00      	ldr	r3, [sp, #0]
   14390:	2203      	movs	r2, #3
   14392:	709a      	strb	r2, [r3, #2]
}
   14394:	bf00      	nop
   14396:	b005      	add	sp, #20
   14398:	f85d fb04 	ldr.w	pc, [sp], #4
   1439c:	10002bb4 	.word	0x10002bb4

000143a0 <smpScFailWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void smpScFailWithReattempt(smpCcb_t *pCcb)
{
   143a0:	b500      	push	{lr}
   143a2:	b085      	sub	sp, #20
   143a4:	9001      	str	r0, [sp, #4]
  wsfMsgHdr_t hdr;

  SmpScGetCancelMsgWithReattempt(pCcb->connId, &hdr, SMP_ERR_CONFIRM_VALUE);
   143a6:	9b01      	ldr	r3, [sp, #4]
   143a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   143ac:	a903      	add	r1, sp, #12
   143ae:	2204      	movs	r2, #4
   143b0:	4618      	mov	r0, r3
   143b2:	f7ff ffbb 	bl	1432c <SmpScGetCancelMsgWithReattempt>

  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
   143b6:	ab03      	add	r3, sp, #12
   143b8:	4619      	mov	r1, r3
   143ba:	9801      	ldr	r0, [sp, #4]
   143bc:	f7fd fe66 	bl	1208c <smpSmExecute>
}
   143c0:	bf00      	nop
   143c2:	b005      	add	sp, #20
   143c4:	f85d fb04 	ldr.w	pc, [sp], #4

000143c8 <dmAdvCbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvCbInit(uint8_t advHandle)
{
   143c8:	b082      	sub	sp, #8
   143ca:	4603      	mov	r3, r0
   143cc:	f88d 3007 	strb.w	r3, [sp, #7]
  /* initialize control block */
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
   143d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   143d4:	4a14      	ldr	r2, [pc, #80]	; (14428 <dmAdvCbInit+0x60>)
   143d6:	4413      	add	r3, r2
   143d8:	22ff      	movs	r2, #255	; 0xff
   143da:	761a      	strb	r2, [r3, #24]
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   143dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   143e0:	4a11      	ldr	r2, [pc, #68]	; (14428 <dmAdvCbInit+0x60>)
   143e2:	3308      	adds	r3, #8
   143e4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
   143e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  dmAdvCb.intervalMax[advHandle] = DM_GAP_ADV_SLOW_INT_MAX;
   143ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   143f0:	4a0d      	ldr	r2, [pc, #52]	; (14428 <dmAdvCbInit+0x60>)
   143f2:	3308      	adds	r3, #8
   143f4:	005b      	lsls	r3, r3, #1
   143f6:	4413      	add	r3, r2
   143f8:	f44f 62f0 	mov.w	r2, #1920	; 0x780
   143fc:	809a      	strh	r2, [r3, #4]
  dmAdvCb.channelMap[advHandle] = DM_ADV_CHAN_ALL;
   143fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14402:	4a09      	ldr	r2, [pc, #36]	; (14428 <dmAdvCbInit+0x60>)
   14404:	4413      	add	r3, r2
   14406:	2207      	movs	r2, #7
   14408:	769a      	strb	r2, [r3, #26]
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   1440a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1440e:	4a07      	ldr	r2, [pc, #28]	; (1442c <dmAdvCbInit+0x64>)
   14410:	4413      	add	r3, r2
   14412:	2200      	movs	r2, #0
   14414:	745a      	strb	r2, [r3, #17]
  dmAdvCb.advState[advHandle] = DM_ADV_STATE_IDLE;
   14416:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1441a:	4a03      	ldr	r2, [pc, #12]	; (14428 <dmAdvCbInit+0x60>)
   1441c:	4413      	add	r3, r2
   1441e:	2200      	movs	r2, #0
   14420:	775a      	strb	r2, [r3, #29]
}
   14422:	bf00      	nop
   14424:	b002      	add	sp, #8
   14426:	4770      	bx	lr
   14428:	100043e8 	.word	0x100043e8
   1442c:	100044f4 	.word	0x100044f4

00014430 <dmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvInit(void)
{
   14430:	b500      	push	{lr}
   14432:	b083      	sub	sp, #12
  uint8_t i;

  /* initialize control block */
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   14434:	2300      	movs	r3, #0
   14436:	f88d 3007 	strb.w	r3, [sp, #7]
   1443a:	e009      	b.n	14450 <dmAdvInit+0x20>
  {
    dmAdvCbInit(i);
   1443c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14440:	4618      	mov	r0, r3
   14442:	f7ff ffc1 	bl	143c8 <dmAdvCbInit>
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   14446:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1444a:	3301      	adds	r3, #1
   1444c:	f88d 3007 	strb.w	r3, [sp, #7]
   14450:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14454:	2b01      	cmp	r3, #1
   14456:	d9f1      	bls.n	1443c <dmAdvInit+0xc>
  }

  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
   14458:	4b05      	ldr	r3, [pc, #20]	; (14470 <dmAdvInit+0x40>)
   1445a:	7b1a      	ldrb	r2, [r3, #12]
   1445c:	4b05      	ldr	r3, [pc, #20]	; (14474 <dmAdvInit+0x44>)
   1445e:	731a      	strb	r2, [r3, #12]
  dmCb.advAddrType = DM_ADDR_PUBLIC;
   14460:	4b03      	ldr	r3, [pc, #12]	; (14470 <dmAdvInit+0x40>)
   14462:	2200      	movs	r2, #0
   14464:	739a      	strb	r2, [r3, #14]
}
   14466:	bf00      	nop
   14468:	b003      	add	sp, #12
   1446a:	f85d fb04 	ldr.w	pc, [sp], #4
   1446e:	bf00      	nop
   14470:	100044f4 	.word	0x100044f4
   14474:	100043e8 	.word	0x100043e8

00014478 <dmAdvGenConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvGenConnCmpl(uint8_t advHandle, uint8_t status)
{
   14478:	b500      	push	{lr}
   1447a:	b08d      	sub	sp, #52	; 0x34
   1447c:	4603      	mov	r3, r0
   1447e:	460a      	mov	r2, r1
   14480:	f88d 3007 	strb.w	r3, [sp, #7]
   14484:	4613      	mov	r3, r2
   14486:	f88d 3006 	strb.w	r3, [sp, #6]
  hciLeConnCmplEvt_t  leConnCmpl;

  /* generate enhanced connection complete event */
  memset(&leConnCmpl, 0, sizeof(leConnCmpl));
   1448a:	ab03      	add	r3, sp, #12
   1448c:	2224      	movs	r2, #36	; 0x24
   1448e:	2100      	movs	r1, #0
   14490:	4618      	mov	r0, r3
   14492:	f011 f913 	bl	256bc <memset>

  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   14496:	2302      	movs	r3, #2
   14498:	f88d 300e 	strb.w	r3, [sp, #14]
  leConnCmpl.hdr.status = leConnCmpl.status = status;
   1449c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   144a0:	f88d 3010 	strb.w	r3, [sp, #16]
   144a4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   144a8:	f88d 300f 	strb.w	r3, [sp, #15]
  leConnCmpl.role = DM_ROLE_SLAVE;
   144ac:	2301      	movs	r3, #1
   144ae:	f88d 3014 	strb.w	r3, [sp, #20]
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   144b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   144b6:	4a0f      	ldr	r2, [pc, #60]	; (144f4 <dmAdvGenConnCmpl+0x7c>)
   144b8:	4413      	add	r3, r2
   144ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   144be:	f88d 3015 	strb.w	r3, [sp, #21]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   144c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   144c6:	4613      	mov	r3, r2
   144c8:	005b      	lsls	r3, r3, #1
   144ca:	4413      	add	r3, r2
   144cc:	005b      	lsls	r3, r3, #1
   144ce:	3320      	adds	r3, #32
   144d0:	4a08      	ldr	r2, [pc, #32]	; (144f4 <dmAdvGenConnCmpl+0x7c>)
   144d2:	4413      	add	r3, r2
   144d4:	1d5a      	adds	r2, r3, #5
   144d6:	ab03      	add	r3, sp, #12
   144d8:	330a      	adds	r3, #10
   144da:	4611      	mov	r1, r2
   144dc:	4618      	mov	r0, r3
   144de:	f7f7 fea9 	bl	c234 <BdaCpy>

  /* pass connection complete event to DM connection management module */
  dmDevPassHciEvtToConn((hciEvt_t *) &leConnCmpl);
   144e2:	ab03      	add	r3, sp, #12
   144e4:	4618      	mov	r0, r3
   144e6:	f001 fd7f 	bl	15fe8 <dmDevPassHciEvtToConn>
}
   144ea:	bf00      	nop
   144ec:	b00d      	add	sp, #52	; 0x34
   144ee:	f85d fb04 	ldr.w	pc, [sp], #4
   144f2:	bf00      	nop
   144f4:	100043e8 	.word	0x100043e8

000144f8 <DmAdvConfig>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvConfig(uint8_t advHandle, uint8_t advType, uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   144f8:	b500      	push	{lr}
   144fa:	b085      	sub	sp, #20
   144fc:	9300      	str	r3, [sp, #0]
   144fe:	4603      	mov	r3, r0
   14500:	f88d 3007 	strb.w	r3, [sp, #7]
   14504:	460b      	mov	r3, r1
   14506:	f88d 3006 	strb.w	r3, [sp, #6]
   1450a:	4613      	mov	r3, r2
   1450c:	f88d 3005 	strb.w	r3, [sp, #5]
  dmAdvApiConfig_t *pMsg;

  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiConfig_t))) != NULL)
   14510:	200e      	movs	r0, #14
   14512:	f00b f9ef 	bl	1f8f4 <WsfMsgAlloc>
   14516:	9003      	str	r0, [sp, #12]
   14518:	9b03      	ldr	r3, [sp, #12]
   1451a:	2b00      	cmp	r3, #0
   1451c:	d01a      	beq.n	14554 <DmAdvConfig+0x5c>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_CONFIG;
   1451e:	9b03      	ldr	r3, [sp, #12]
   14520:	2200      	movs	r2, #0
   14522:	709a      	strb	r2, [r3, #2]
    pMsg->advType = advType;
   14524:	9b03      	ldr	r3, [sp, #12]
   14526:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1452a:	715a      	strb	r2, [r3, #5]
    pMsg->advHandle = advHandle;
   1452c:	9b03      	ldr	r3, [sp, #12]
   1452e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   14532:	711a      	strb	r2, [r3, #4]
    pMsg->peerAddrType = peerAddrType;
   14534:	9b03      	ldr	r3, [sp, #12]
   14536:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1453a:	719a      	strb	r2, [r3, #6]
    BdaCpy(pMsg->peerAddr, pPeerAddr);
   1453c:	9b03      	ldr	r3, [sp, #12]
   1453e:	3307      	adds	r3, #7
   14540:	9900      	ldr	r1, [sp, #0]
   14542:	4618      	mov	r0, r3
   14544:	f7f7 fe76 	bl	c234 <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   14548:	4b04      	ldr	r3, [pc, #16]	; (1455c <DmAdvConfig+0x64>)
   1454a:	7b1b      	ldrb	r3, [r3, #12]
   1454c:	9903      	ldr	r1, [sp, #12]
   1454e:	4618      	mov	r0, r3
   14550:	f00b f9f4 	bl	1f93c <WsfMsgSend>
  }
}
   14554:	bf00      	nop
   14556:	b005      	add	sp, #20
   14558:	f85d fb04 	ldr.w	pc, [sp], #4
   1455c:	100044f4 	.word	0x100044f4

00014560 <DmAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetData(uint8_t advHandle, uint8_t op, uint8_t location, uint8_t len, uint8_t *pData)
{
   14560:	b510      	push	{r4, lr}
   14562:	b084      	sub	sp, #16
   14564:	4604      	mov	r4, r0
   14566:	4608      	mov	r0, r1
   14568:	4611      	mov	r1, r2
   1456a:	461a      	mov	r2, r3
   1456c:	4623      	mov	r3, r4
   1456e:	f88d 3007 	strb.w	r3, [sp, #7]
   14572:	4603      	mov	r3, r0
   14574:	f88d 3006 	strb.w	r3, [sp, #6]
   14578:	460b      	mov	r3, r1
   1457a:	f88d 3005 	strb.w	r3, [sp, #5]
   1457e:	4613      	mov	r3, r2
   14580:	f88d 3004 	strb.w	r3, [sp, #4]
  dmAdvApiSetData_t *pMsg;

  WSF_ASSERT((location == DM_DATA_LOC_SCAN) || (location == DM_DATA_LOC_ADV));
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiSetData_t) + len)) != NULL)
   14584:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14588:	b29b      	uxth	r3, r3
   1458a:	3308      	adds	r3, #8
   1458c:	b29b      	uxth	r3, r3
   1458e:	4618      	mov	r0, r3
   14590:	f00b f9b0 	bl	1f8f4 <WsfMsgAlloc>
   14594:	9003      	str	r0, [sp, #12]
   14596:	9b03      	ldr	r3, [sp, #12]
   14598:	2b00      	cmp	r3, #0
   1459a:	d020      	beq.n	145de <DmAdvSetData+0x7e>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_SET_DATA;
   1459c:	9b03      	ldr	r3, [sp, #12]
   1459e:	2201      	movs	r2, #1
   145a0:	709a      	strb	r2, [r3, #2]
    pMsg->advHandle = advHandle;
   145a2:	9b03      	ldr	r3, [sp, #12]
   145a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   145a8:	711a      	strb	r2, [r3, #4]
    pMsg->op = op;
   145aa:	9b03      	ldr	r3, [sp, #12]
   145ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
   145b0:	715a      	strb	r2, [r3, #5]
    pMsg->location = location;
   145b2:	9b03      	ldr	r3, [sp, #12]
   145b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
   145b8:	719a      	strb	r2, [r3, #6]
    pMsg->len = len;
   145ba:	9b03      	ldr	r3, [sp, #12]
   145bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
   145c0:	71da      	strb	r2, [r3, #7]
    memcpy(pMsg->pData, pData, len);
   145c2:	9b03      	ldr	r3, [sp, #12]
   145c4:	3308      	adds	r3, #8
   145c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   145ca:	9906      	ldr	r1, [sp, #24]
   145cc:	4618      	mov	r0, r3
   145ce:	f7f7 fd97 	bl	c100 <memcpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   145d2:	4b04      	ldr	r3, [pc, #16]	; (145e4 <DmAdvSetData+0x84>)
   145d4:	7b1b      	ldrb	r3, [r3, #12]
   145d6:	9903      	ldr	r1, [sp, #12]
   145d8:	4618      	mov	r0, r3
   145da:	f00b f9af 	bl	1f93c <WsfMsgSend>
  }
}
   145de:	bf00      	nop
   145e0:	b004      	add	sp, #16
   145e2:	bd10      	pop	{r4, pc}
   145e4:	100044f4 	.word	0x100044f4

000145e8 <DmAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pDuration, uint8_t *pMaxEaEvents)
{
   145e8:	b500      	push	{lr}
   145ea:	b087      	sub	sp, #28
   145ec:	9102      	str	r1, [sp, #8]
   145ee:	9201      	str	r2, [sp, #4]
   145f0:	9300      	str	r3, [sp, #0]
   145f2:	4603      	mov	r3, r0
   145f4:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t i;
  dmAdvApiStart_t *pMsg;

  WSF_ASSERT(numSets <= DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStart_t))) != NULL)
   145f8:	200e      	movs	r0, #14
   145fa:	f00b f97b 	bl	1f8f4 <WsfMsgAlloc>
   145fe:	9004      	str	r0, [sp, #16]
   14600:	9b04      	ldr	r3, [sp, #16]
   14602:	2b00      	cmp	r3, #0
   14604:	d03d      	beq.n	14682 <DmAdvStart+0x9a>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_START;
   14606:	9b04      	ldr	r3, [sp, #16]
   14608:	2202      	movs	r2, #2
   1460a:	709a      	strb	r2, [r3, #2]
    pMsg->numSets = numSets;
   1460c:	9b04      	ldr	r3, [sp, #16]
   1460e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14612:	711a      	strb	r2, [r3, #4]

    for (i = 0; i < numSets; i++)
   14614:	2300      	movs	r3, #0
   14616:	f88d 3017 	strb.w	r3, [sp, #23]
   1461a:	e026      	b.n	1466a <DmAdvStart+0x82>
    {
      pMsg->advHandle[i] = pAdvHandles[i];
   1461c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14620:	9a02      	ldr	r2, [sp, #8]
   14622:	441a      	add	r2, r3
   14624:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14628:	7811      	ldrb	r1, [r2, #0]
   1462a:	9a04      	ldr	r2, [sp, #16]
   1462c:	4413      	add	r3, r2
   1462e:	460a      	mov	r2, r1
   14630:	715a      	strb	r2, [r3, #5]
      pMsg->duration[i] = pDuration[i];
   14632:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14636:	005b      	lsls	r3, r3, #1
   14638:	9a01      	ldr	r2, [sp, #4]
   1463a:	4413      	add	r3, r2
   1463c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   14640:	8819      	ldrh	r1, [r3, #0]
   14642:	9b04      	ldr	r3, [sp, #16]
   14644:	3204      	adds	r2, #4
   14646:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      pMsg->maxEaEvents[i] = pMaxEaEvents[i];
   1464a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1464e:	9a00      	ldr	r2, [sp, #0]
   14650:	441a      	add	r2, r3
   14652:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14656:	7811      	ldrb	r1, [r2, #0]
   14658:	9a04      	ldr	r2, [sp, #16]
   1465a:	4413      	add	r3, r2
   1465c:	460a      	mov	r2, r1
   1465e:	731a      	strb	r2, [r3, #12]
    for (i = 0; i < numSets; i++)
   14660:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14664:	3301      	adds	r3, #1
   14666:	f88d 3017 	strb.w	r3, [sp, #23]
   1466a:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1466e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14672:	429a      	cmp	r2, r3
   14674:	d3d2      	bcc.n	1461c <DmAdvStart+0x34>
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   14676:	4b05      	ldr	r3, [pc, #20]	; (1468c <DmAdvStart+0xa4>)
   14678:	7b1b      	ldrb	r3, [r3, #12]
   1467a:	9904      	ldr	r1, [sp, #16]
   1467c:	4618      	mov	r0, r3
   1467e:	f00b f95d 	bl	1f93c <WsfMsgSend>
  }
}
   14682:	bf00      	nop
   14684:	b007      	add	sp, #28
   14686:	f85d fb04 	ldr.w	pc, [sp], #4
   1468a:	bf00      	nop
   1468c:	100044f4 	.word	0x100044f4

00014690 <DmAdvSetInterval>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetInterval(uint8_t advHandle, uint16_t intervalMin, uint16_t intervalMax)
{
   14690:	b500      	push	{lr}
   14692:	b083      	sub	sp, #12
   14694:	4603      	mov	r3, r0
   14696:	f88d 3007 	strb.w	r3, [sp, #7]
   1469a:	460b      	mov	r3, r1
   1469c:	f8ad 3004 	strh.w	r3, [sp, #4]
   146a0:	4613      	mov	r3, r2
   146a2:	f8ad 3002 	strh.w	r3, [sp, #2]
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  WsfTaskLock();
   146a6:	f00b f9b1 	bl	1fa0c <WsfTaskLock>
  dmAdvCb.intervalMin[advHandle] = intervalMin;
   146aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146ae:	490a      	ldr	r1, [pc, #40]	; (146d8 <DmAdvSetInterval+0x48>)
   146b0:	3308      	adds	r3, #8
   146b2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   146b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  dmAdvCb.intervalMax[advHandle] = intervalMax;
   146ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146be:	4a06      	ldr	r2, [pc, #24]	; (146d8 <DmAdvSetInterval+0x48>)
   146c0:	3308      	adds	r3, #8
   146c2:	005b      	lsls	r3, r3, #1
   146c4:	4413      	add	r3, r2
   146c6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   146ca:	809a      	strh	r2, [r3, #4]
  WsfTaskUnlock();
   146cc:	f00b f9a3 	bl	1fa16 <WsfTaskUnlock>
}
   146d0:	bf00      	nop
   146d2:	b003      	add	sp, #12
   146d4:	f85d fb04 	ldr.w	pc, [sp], #4
   146d8:	100043e8 	.word	0x100043e8

000146dc <dmAdvConfig>:
 *
 *  \return None.
*/
/*************************************************************************************************/
static void dmAdvConfig(uint8_t advType, uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   146dc:	b530      	push	{r4, r5, lr}
   146de:	b087      	sub	sp, #28
   146e0:	4603      	mov	r3, r0
   146e2:	9204      	str	r2, [sp, #16]
   146e4:	f88d 3017 	strb.w	r3, [sp, #23]
   146e8:	460b      	mov	r3, r1
   146ea:	f88d 3016 	strb.w	r3, [sp, #22]
  /* set advertising parameters */
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   146ee:	4b12      	ldr	r3, [pc, #72]	; (14738 <dmAdvConfig+0x5c>)
   146f0:	8a1c      	ldrh	r4, [r3, #16]
   146f2:	4b11      	ldr	r3, [pc, #68]	; (14738 <dmAdvConfig+0x5c>)
   146f4:	8a9d      	ldrh	r5, [r3, #20]
   146f6:	4b11      	ldr	r3, [pc, #68]	; (1473c <dmAdvConfig+0x60>)
   146f8:	7b9b      	ldrb	r3, [r3, #14]
   146fa:	4618      	mov	r0, r3
   146fc:	f001 fcea 	bl	160d4 <DmLlAddrType>
   14700:	4603      	mov	r3, r0
   14702:	4618      	mov	r0, r3
   14704:	4b0c      	ldr	r3, [pc, #48]	; (14738 <dmAdvConfig+0x5c>)
   14706:	7e9b      	ldrb	r3, [r3, #26]
   14708:	4a0c      	ldr	r2, [pc, #48]	; (1473c <dmAdvConfig+0x60>)
   1470a:	7c52      	ldrb	r2, [r2, #17]
   1470c:	f89d 1017 	ldrb.w	r1, [sp, #23]
   14710:	9203      	str	r2, [sp, #12]
   14712:	9302      	str	r3, [sp, #8]
   14714:	9b04      	ldr	r3, [sp, #16]
   14716:	9301      	str	r3, [sp, #4]
   14718:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1471c:	9300      	str	r3, [sp, #0]
   1471e:	4603      	mov	r3, r0
   14720:	460a      	mov	r2, r1
   14722:	4629      	mov	r1, r5
   14724:	4620      	mov	r0, r4
   14726:	f7f8 fe62 	bl	d3ee <HciLeSetAdvParamCmd>
                      pPeerAddr,                                  /* pPeerAddr */
                      dmAdvCb.channelMap[DM_ADV_HANDLE_DEFAULT],  /* advChanMap */
                      dmCb.advFiltPolicy[DM_ADV_HANDLE_DEFAULT]); /* advFiltPolicy */

  /* store advertising type */
  dmLegAdvCb.advType = advType;
   1472a:	4a05      	ldr	r2, [pc, #20]	; (14740 <dmAdvConfig+0x64>)
   1472c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14730:	7013      	strb	r3, [r2, #0]
}
   14732:	bf00      	nop
   14734:	b007      	add	sp, #28
   14736:	bd30      	pop	{r4, r5, pc}
   14738:	100043e8 	.word	0x100043e8
   1473c:	100044f4 	.word	0x100044f4
   14740:	1000441c 	.word	0x1000441c

00014744 <dmAdvActConfig>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActConfig(dmAdvMsg_t *pMsg)
{
   14744:	b500      	push	{lr}
   14746:	b083      	sub	sp, #12
   14748:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   1474a:	4b0d      	ldr	r3, [pc, #52]	; (14780 <dmAdvActConfig+0x3c>)
   1474c:	7f5b      	ldrb	r3, [r3, #29]
   1474e:	2b00      	cmp	r3, #0
   14750:	d112      	bne.n	14778 <dmAdvActConfig+0x34>
  {
    /* if doing directed advertising ignore the request */
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   14752:	4b0b      	ldr	r3, [pc, #44]	; (14780 <dmAdvActConfig+0x3c>)
   14754:	7e1b      	ldrb	r3, [r3, #24]
   14756:	2b01      	cmp	r3, #1
   14758:	d00d      	beq.n	14776 <dmAdvActConfig+0x32>
        (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT_LO_DUTY))
   1475a:	4b09      	ldr	r3, [pc, #36]	; (14780 <dmAdvActConfig+0x3c>)
   1475c:	7e1b      	ldrb	r3, [r3, #24]
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   1475e:	2b04      	cmp	r3, #4
   14760:	d009      	beq.n	14776 <dmAdvActConfig+0x32>
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
      return;
    }

    /* set advertising parameters */
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
   14762:	9b01      	ldr	r3, [sp, #4]
   14764:	7958      	ldrb	r0, [r3, #5]
   14766:	9b01      	ldr	r3, [sp, #4]
   14768:	7999      	ldrb	r1, [r3, #6]
   1476a:	9b01      	ldr	r3, [sp, #4]
   1476c:	3307      	adds	r3, #7
   1476e:	461a      	mov	r2, r3
   14770:	f7ff ffb4 	bl	146dc <dmAdvConfig>
   14774:	e000      	b.n	14778 <dmAdvActConfig+0x34>
      return;
   14776:	bf00      	nop
  }
}
   14778:	b003      	add	sp, #12
   1477a:	f85d fb04 	ldr.w	pc, [sp], #4
   1477e:	bf00      	nop
   14780:	100043e8 	.word	0x100043e8

00014784 <dmAdvActSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActSetData(dmAdvMsg_t *pMsg)
{
   14784:	b500      	push	{lr}
   14786:	b083      	sub	sp, #12
   14788:	9001      	str	r0, [sp, #4]
  WSF_ASSERT(pMsg->apiSetData.len <= HCI_ADV_DATA_LEN);

  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   1478a:	4b0e      	ldr	r3, [pc, #56]	; (147c4 <dmAdvActSetData+0x40>)
   1478c:	7f5b      	ldrb	r3, [r3, #29]
   1478e:	2b00      	cmp	r3, #0
   14790:	d114      	bne.n	147bc <dmAdvActSetData+0x38>
  {
    /* set new data in HCI */
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
   14792:	9b01      	ldr	r3, [sp, #4]
   14794:	799b      	ldrb	r3, [r3, #6]
   14796:	2b00      	cmp	r3, #0
   14798:	d108      	bne.n	147ac <dmAdvActSetData+0x28>
    {
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   1479a:	9b01      	ldr	r3, [sp, #4]
   1479c:	79da      	ldrb	r2, [r3, #7]
   1479e:	9b01      	ldr	r3, [sp, #4]
   147a0:	3308      	adds	r3, #8
   147a2:	4619      	mov	r1, r3
   147a4:	4610      	mov	r0, r2
   147a6:	f7f8 fdee 	bl	d386 <HciLeSetAdvDataCmd>
    else
    {
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
    }
  }
}
   147aa:	e007      	b.n	147bc <dmAdvActSetData+0x38>
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   147ac:	9b01      	ldr	r3, [sp, #4]
   147ae:	79da      	ldrb	r2, [r3, #7]
   147b0:	9b01      	ldr	r3, [sp, #4]
   147b2:	3308      	adds	r3, #8
   147b4:	4619      	mov	r1, r3
   147b6:	4610      	mov	r0, r2
   147b8:	f7f8 fea5 	bl	d506 <HciLeSetScanRespDataCmd>
}
   147bc:	bf00      	nop
   147be:	b003      	add	sp, #12
   147c0:	f85d fb04 	ldr.w	pc, [sp], #4
   147c4:	100043e8 	.word	0x100043e8

000147c8 <dmAdvActStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActStart(dmAdvMsg_t *pMsg)
{
   147c8:	b500      	push	{lr}
   147ca:	b083      	sub	sp, #12
   147cc:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);

   if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   147ce:	4b0d      	ldr	r3, [pc, #52]	; (14804 <dmAdvActStart+0x3c>)
   147d0:	7f5b      	ldrb	r3, [r3, #29]
   147d2:	2b00      	cmp	r3, #0
   147d4:	d113      	bne.n	147fe <dmAdvActStart+0x36>
  {
    /* if doing directed advertising ignore the request */
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   147d6:	4b0b      	ldr	r3, [pc, #44]	; (14804 <dmAdvActStart+0x3c>)
   147d8:	7e1b      	ldrb	r3, [r3, #24]
   147da:	2b01      	cmp	r3, #1
   147dc:	d00e      	beq.n	147fc <dmAdvActStart+0x34>
        (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT_LO_DUTY))
   147de:	4b09      	ldr	r3, [pc, #36]	; (14804 <dmAdvActStart+0x3c>)
   147e0:	7e1b      	ldrb	r3, [r3, #24]
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   147e2:	2b04      	cmp	r3, #4
   147e4:	d00a      	beq.n	147fc <dmAdvActStart+0x34>
      DM_TRACE_WARN0("dmAdvActStart during directed advertising!");
      return;
    }

    /* start advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STARTING;
   147e6:	4b07      	ldr	r3, [pc, #28]	; (14804 <dmAdvActStart+0x3c>)
   147e8:	2203      	movs	r2, #3
   147ea:	775a      	strb	r2, [r3, #29]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = pMsg->apiStart.duration[DM_ADV_HANDLE_DEFAULT];
   147ec:	9b01      	ldr	r3, [sp, #4]
   147ee:	891a      	ldrh	r2, [r3, #8]
   147f0:	4b04      	ldr	r3, [pc, #16]	; (14804 <dmAdvActStart+0x3c>)
   147f2:	841a      	strh	r2, [r3, #32]
    HciLeSetAdvEnableCmd(TRUE);
   147f4:	2001      	movs	r0, #1
   147f6:	f7f8 fda8 	bl	d34a <HciLeSetAdvEnableCmd>
   147fa:	e000      	b.n	147fe <dmAdvActStart+0x36>
      return;
   147fc:	bf00      	nop
  }
}
   147fe:	b003      	add	sp, #12
   14800:	f85d fb04 	ldr.w	pc, [sp], #4
   14804:	100043e8 	.word	0x100043e8

00014808 <dmAdvActStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActStop(dmAdvMsg_t *pMsg)
{
   14808:	b500      	push	{lr}
   1480a:	b083      	sub	sp, #12
   1480c:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO1("dmAdvActStop: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   1480e:	4b0b      	ldr	r3, [pc, #44]	; (1483c <dmAdvActStop+0x34>)
   14810:	7f5b      	ldrb	r3, [r3, #29]
   14812:	2b01      	cmp	r3, #1
   14814:	d10f      	bne.n	14836 <dmAdvActStop+0x2e>
  {
    /* if doing directed advertising ignore the request */
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   14816:	4b09      	ldr	r3, [pc, #36]	; (1483c <dmAdvActStop+0x34>)
   14818:	7e1b      	ldrb	r3, [r3, #24]
   1481a:	2b01      	cmp	r3, #1
   1481c:	d00a      	beq.n	14834 <dmAdvActStop+0x2c>
        (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT_LO_DUTY))
   1481e:	4b07      	ldr	r3, [pc, #28]	; (1483c <dmAdvActStop+0x34>)
   14820:	7e1b      	ldrb	r3, [r3, #24]
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   14822:	2b04      	cmp	r3, #4
   14824:	d006      	beq.n	14834 <dmAdvActStop+0x2c>
      DM_TRACE_WARN0("DmAdvStop during directed advertising!");
      return;
    }

    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   14826:	4b05      	ldr	r3, [pc, #20]	; (1483c <dmAdvActStop+0x34>)
   14828:	2205      	movs	r2, #5
   1482a:	775a      	strb	r2, [r3, #29]
    HciLeSetAdvEnableCmd(FALSE);
   1482c:	2000      	movs	r0, #0
   1482e:	f7f8 fd8c 	bl	d34a <HciLeSetAdvEnableCmd>
   14832:	e000      	b.n	14836 <dmAdvActStop+0x2e>
      return;
   14834:	bf00      	nop
  }
}
   14836:	b003      	add	sp, #12
   14838:	f85d fb04 	ldr.w	pc, [sp], #4
   1483c:	100043e8 	.word	0x100043e8

00014840 <dmAdvActRemoveSet>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActRemoveSet(dmAdvMsg_t *pMsg)
{
   14840:	b082      	sub	sp, #8
   14842:	9001      	str	r0, [sp, #4]
  /* empty */
}
   14844:	bf00      	nop
   14846:	b002      	add	sp, #8
   14848:	4770      	bx	lr

0001484a <dmAdvActClearSets>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActClearSets(dmAdvMsg_t *pMsg)
{
   1484a:	b082      	sub	sp, #8
   1484c:	9001      	str	r0, [sp, #4]
  /* empty */
}
   1484e:	bf00      	nop
   14850:	b002      	add	sp, #8
   14852:	4770      	bx	lr

00014854 <dmAdvActSetRandAddr>:
*
*  \return None.
*/
/*************************************************************************************************/
void dmAdvActSetRandAddr(dmAdvMsg_t *pMsg)
{
   14854:	b082      	sub	sp, #8
   14856:	9001      	str	r0, [sp, #4]
  /* empty */
}
   14858:	bf00      	nop
   1485a:	b002      	add	sp, #8
   1485c:	4770      	bx	lr
	...

00014860 <dmAdvActTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvActTimeout(dmAdvMsg_t *pMsg)
{
   14860:	b500      	push	{lr}
   14862:	b083      	sub	sp, #12
   14864:	9001      	str	r0, [sp, #4]
  DM_TRACE_INFO0("dmAdvActTimeout!");

  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   14866:	4b07      	ldr	r3, [pc, #28]	; (14884 <dmAdvActTimeout+0x24>)
   14868:	7f5b      	ldrb	r3, [r3, #29]
   1486a:	2b01      	cmp	r3, #1
   1486c:	d105      	bne.n	1487a <dmAdvActTimeout+0x1a>
  {
    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   1486e:	4b05      	ldr	r3, [pc, #20]	; (14884 <dmAdvActTimeout+0x24>)
   14870:	2205      	movs	r2, #5
   14872:	775a      	strb	r2, [r3, #29]
    HciLeSetAdvEnableCmd(FALSE);
   14874:	2000      	movs	r0, #0
   14876:	f7f8 fd68 	bl	d34a <HciLeSetAdvEnableCmd>
  }
}
   1487a:	bf00      	nop
   1487c:	b003      	add	sp, #12
   1487e:	f85d fb04 	ldr.w	pc, [sp], #4
   14882:	bf00      	nop
   14884:	100043e8 	.word	0x100043e8

00014888 <dmAdvReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvReset(void)
{
   14888:	b500      	push	{lr}
   1488a:	b083      	sub	sp, #12
  wsfMsgHdr_t advStop;

  /* if stopping undirected advertisement or advertising but not high duty cycle directed adv */
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   1488c:	4b0f      	ldr	r3, [pc, #60]	; (148cc <dmAdvReset+0x44>)
   1488e:	7f5b      	ldrb	r3, [r3, #29]
   14890:	2b05      	cmp	r3, #5
   14892:	d007      	beq.n	148a4 <dmAdvReset+0x1c>
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
   14894:	4b0d      	ldr	r3, [pc, #52]	; (148cc <dmAdvReset+0x44>)
   14896:	7f5b      	ldrb	r3, [r3, #29]
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   14898:	2b01      	cmp	r3, #1
   1489a:	d111      	bne.n	148c0 <dmAdvReset+0x38>
       (dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] != DM_ADV_CONN_DIRECT)))
   1489c:	4b0b      	ldr	r3, [pc, #44]	; (148cc <dmAdvReset+0x44>)
   1489e:	7e1b      	ldrb	r3, [r3, #24]
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
   148a0:	2b01      	cmp	r3, #1
   148a2:	d00d      	beq.n	148c0 <dmAdvReset+0x38>
  {
    /* stop advertising timer */
    WsfTimerStop(&dmAdvCb.advTimer);
   148a4:	4809      	ldr	r0, [pc, #36]	; (148cc <dmAdvReset+0x44>)
   148a6:	f00b fbe5 	bl	20074 <WsfTimerStop>

    /* generate advertising stop event */
    advStop.status = HCI_SUCCESS;
   148aa:	2300      	movs	r3, #0
   148ac:	f88d 3007 	strb.w	r3, [sp, #7]
    advStop.event = DM_ADV_STOP_IND;
   148b0:	2322      	movs	r3, #34	; 0x22
   148b2:	f88d 3006 	strb.w	r3, [sp, #6]

    /* call callback */
    (*dmCb.cback)((dmEvt_t *) &advStop);
   148b6:	4b06      	ldr	r3, [pc, #24]	; (148d0 <dmAdvReset+0x48>)
   148b8:	689b      	ldr	r3, [r3, #8]
   148ba:	aa01      	add	r2, sp, #4
   148bc:	4610      	mov	r0, r2
   148be:	4798      	blx	r3
  }

  /* reset legacy adv module */
  dmAdvInit();
   148c0:	f7ff fdb6 	bl	14430 <dmAdvInit>
}
   148c4:	bf00      	nop
   148c6:	b003      	add	sp, #12
   148c8:	f85d fb04 	ldr.w	pc, [sp], #4
   148cc:	100043e8 	.word	0x100043e8
   148d0:	100044f4 	.word	0x100044f4

000148d4 <dmAdvHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvHciHandler(hciEvt_t *pEvent)
{
   148d4:	b500      	push	{lr}
   148d6:	b085      	sub	sp, #20
   148d8:	9001      	str	r0, [sp, #4]
  if (pEvent->hdr.event == HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT)
   148da:	9b01      	ldr	r3, [sp, #4]
   148dc:	789b      	ldrb	r3, [r3, #2]
   148de:	2b35      	cmp	r3, #53	; 0x35
   148e0:	d178      	bne.n	149d4 <dmAdvHciHandler+0x100>
  {
    uint8_t cbackEvent = 0;
   148e2:	2300      	movs	r3, #0
   148e4:	f88d 300f 	strb.w	r3, [sp, #15]

    DM_TRACE_INFO1("HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);

    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   148e8:	4b3c      	ldr	r3, [pc, #240]	; (149dc <dmAdvHciHandler+0x108>)
   148ea:	7f5b      	ldrb	r3, [r3, #29]
   148ec:	2b03      	cmp	r3, #3
   148ee:	dc02      	bgt.n	148f6 <dmAdvHciHandler+0x22>
   148f0:	2b02      	cmp	r3, #2
   148f2:	da04      	bge.n	148fe <dmAdvHciHandler+0x2a>
      }
      break;

    default:
      /* ignore the event */
      break;
   148f4:	e058      	b.n	149a8 <dmAdvHciHandler+0xd4>
   148f6:	3b04      	subs	r3, #4
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   148f8:	2b01      	cmp	r3, #1
   148fa:	d855      	bhi.n	149a8 <dmAdvHciHandler+0xd4>
   148fc:	e02d      	b.n	1495a <dmAdvHciHandler+0x86>
      if (pEvent->hdr.status == HCI_SUCCESS)
   148fe:	9b01      	ldr	r3, [sp, #4]
   14900:	78db      	ldrb	r3, [r3, #3]
   14902:	2b00      	cmp	r3, #0
   14904:	d125      	bne.n	14952 <dmAdvHciHandler+0x7e>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)
   14906:	4b35      	ldr	r3, [pc, #212]	; (149dc <dmAdvHciHandler+0x108>)
   14908:	7f5b      	ldrb	r3, [r3, #29]
   1490a:	2b03      	cmp	r3, #3
   1490c:	d113      	bne.n	14936 <dmAdvHciHandler+0x62>
          if (dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] > 0)
   1490e:	4b33      	ldr	r3, [pc, #204]	; (149dc <dmAdvHciHandler+0x108>)
   14910:	8c1b      	ldrh	r3, [r3, #32]
   14912:	2b00      	cmp	r3, #0
   14914:	d008      	beq.n	14928 <dmAdvHciHandler+0x54>
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
   14916:	4b31      	ldr	r3, [pc, #196]	; (149dc <dmAdvHciHandler+0x108>)
   14918:	2207      	movs	r2, #7
   1491a:	729a      	strb	r2, [r3, #10]
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
   1491c:	4b2f      	ldr	r3, [pc, #188]	; (149dc <dmAdvHciHandler+0x108>)
   1491e:	8c1b      	ldrh	r3, [r3, #32]
   14920:	4619      	mov	r1, r3
   14922:	482e      	ldr	r0, [pc, #184]	; (149dc <dmAdvHciHandler+0x108>)
   14924:	f00b fb92 	bl	2004c <WsfTimerStartMs>
          if (dmLegAdvCb.advType != DM_ADV_CONN_DIRECT_LO_DUTY)
   14928:	4b2d      	ldr	r3, [pc, #180]	; (149e0 <dmAdvHciHandler+0x10c>)
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	2b04      	cmp	r3, #4
   1492e:	d002      	beq.n	14936 <dmAdvHciHandler+0x62>
            cbackEvent = DM_ADV_START_IND;
   14930:	2321      	movs	r3, #33	; 0x21
   14932:	f88d 300f 	strb.w	r3, [sp, #15]
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
   14936:	2300      	movs	r3, #0
   14938:	2200      	movs	r2, #0
   1493a:	2121      	movs	r1, #33	; 0x21
   1493c:	2014      	movs	r0, #20
   1493e:	f001 fab3 	bl	15ea8 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
   14942:	4b27      	ldr	r3, [pc, #156]	; (149e0 <dmAdvHciHandler+0x10c>)
   14944:	781a      	ldrb	r2, [r3, #0]
   14946:	4b25      	ldr	r3, [pc, #148]	; (149dc <dmAdvHciHandler+0x108>)
   14948:	761a      	strb	r2, [r3, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   1494a:	4b24      	ldr	r3, [pc, #144]	; (149dc <dmAdvHciHandler+0x108>)
   1494c:	2201      	movs	r2, #1
   1494e:	775a      	strb	r2, [r3, #29]
      break;
   14950:	e02b      	b.n	149aa <dmAdvHciHandler+0xd6>
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   14952:	4b22      	ldr	r3, [pc, #136]	; (149dc <dmAdvHciHandler+0x108>)
   14954:	2200      	movs	r2, #0
   14956:	775a      	strb	r2, [r3, #29]
      break;
   14958:	e027      	b.n	149aa <dmAdvHciHandler+0xd6>
      if (pEvent->hdr.status == HCI_SUCCESS)
   1495a:	9b01      	ldr	r3, [sp, #4]
   1495c:	78db      	ldrb	r3, [r3, #3]
   1495e:	2b00      	cmp	r3, #0
   14960:	d11e      	bne.n	149a0 <dmAdvHciHandler+0xcc>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)
   14962:	4b1e      	ldr	r3, [pc, #120]	; (149dc <dmAdvHciHandler+0x108>)
   14964:	7f5b      	ldrb	r3, [r3, #29]
   14966:	2b05      	cmp	r3, #5
   14968:	d10d      	bne.n	14986 <dmAdvHciHandler+0xb2>
          WsfTimerStop(&dmAdvCb.advTimer);
   1496a:	481c      	ldr	r0, [pc, #112]	; (149dc <dmAdvHciHandler+0x108>)
   1496c:	f00b fb82 	bl	20074 <WsfTimerStop>
          if (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT_LO_DUTY)
   14970:	4b1b      	ldr	r3, [pc, #108]	; (149e0 <dmAdvHciHandler+0x10c>)
   14972:	781b      	ldrb	r3, [r3, #0]
   14974:	2b04      	cmp	r3, #4
   14976:	d103      	bne.n	14980 <dmAdvHciHandler+0xac>
            cbackEvent = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   14978:	2302      	movs	r3, #2
   1497a:	f88d 300f 	strb.w	r3, [sp, #15]
   1497e:	e002      	b.n	14986 <dmAdvHciHandler+0xb2>
            cbackEvent = DM_ADV_STOP_IND;
   14980:	2322      	movs	r3, #34	; 0x22
   14982:	f88d 300f 	strb.w	r3, [sp, #15]
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   14986:	2300      	movs	r3, #0
   14988:	2200      	movs	r2, #0
   1498a:	2122      	movs	r1, #34	; 0x22
   1498c:	2015      	movs	r0, #21
   1498e:	f001 fa8b 	bl	15ea8 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   14992:	4b12      	ldr	r3, [pc, #72]	; (149dc <dmAdvHciHandler+0x108>)
   14994:	22ff      	movs	r2, #255	; 0xff
   14996:	761a      	strb	r2, [r3, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   14998:	4b10      	ldr	r3, [pc, #64]	; (149dc <dmAdvHciHandler+0x108>)
   1499a:	2200      	movs	r2, #0
   1499c:	775a      	strb	r2, [r3, #29]
      break;
   1499e:	e004      	b.n	149aa <dmAdvHciHandler+0xd6>
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   149a0:	4b0e      	ldr	r3, [pc, #56]	; (149dc <dmAdvHciHandler+0x108>)
   149a2:	2201      	movs	r2, #1
   149a4:	775a      	strb	r2, [r3, #29]
      break;
   149a6:	e000      	b.n	149aa <dmAdvHciHandler+0xd6>
      break;
   149a8:	bf00      	nop
    }

    /* if DM conn notify needed */
    if (cbackEvent == HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT)
   149aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   149ae:	2b02      	cmp	r3, #2
   149b0:	d104      	bne.n	149bc <dmAdvHciHandler+0xe8>
    {
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   149b2:	213c      	movs	r1, #60	; 0x3c
   149b4:	2000      	movs	r0, #0
   149b6:	f7ff fd5f 	bl	14478 <dmAdvGenConnCmpl>
    {
      pEvent->hdr.event = cbackEvent;
      (*dmCb.cback)((dmEvt_t *) pEvent);
    }
  }
}
   149ba:	e00b      	b.n	149d4 <dmAdvHciHandler+0x100>
    else if (cbackEvent)
   149bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   149c0:	2b00      	cmp	r3, #0
   149c2:	d007      	beq.n	149d4 <dmAdvHciHandler+0x100>
      pEvent->hdr.event = cbackEvent;
   149c4:	9b01      	ldr	r3, [sp, #4]
   149c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   149ca:	709a      	strb	r2, [r3, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   149cc:	4b05      	ldr	r3, [pc, #20]	; (149e4 <dmAdvHciHandler+0x110>)
   149ce:	689b      	ldr	r3, [r3, #8]
   149d0:	9801      	ldr	r0, [sp, #4]
   149d2:	4798      	blx	r3
}
   149d4:	bf00      	nop
   149d6:	b005      	add	sp, #20
   149d8:	f85d fb04 	ldr.w	pc, [sp], #4
   149dc:	100043e8 	.word	0x100043e8
   149e0:	1000441c 	.word	0x1000441c
   149e4:	100044f4 	.word	0x100044f4

000149e8 <dmAdvMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvMsgHandler(wsfMsgHdr_t *pMsg)
{
   149e8:	b500      	push	{lr}
   149ea:	b083      	sub	sp, #12
   149ec:	9001      	str	r0, [sp, #4]
  /* execute action function */
  (*dmAdvAct[DM_MSG_MASK(pMsg->event)])((dmAdvMsg_t *)pMsg);
   149ee:	9b01      	ldr	r3, [sp, #4]
   149f0:	789b      	ldrb	r3, [r3, #2]
   149f2:	f003 030f 	and.w	r3, r3, #15
   149f6:	4a04      	ldr	r2, [pc, #16]	; (14a08 <dmAdvMsgHandler+0x20>)
   149f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149fc:	9801      	ldr	r0, [sp, #4]
   149fe:	4798      	blx	r3
}
   14a00:	bf00      	nop
   14a02:	b003      	add	sp, #12
   14a04:	f85d fb04 	ldr.w	pc, [sp], #4
   14a08:	000283bc 	.word	0x000283bc

00014a0c <dmAdvStartDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStartDirected(uint8_t advType, uint16_t duration, uint8_t addrType, uint8_t *pAddr)
{
   14a0c:	b500      	push	{lr}
   14a0e:	b083      	sub	sp, #12
   14a10:	9300      	str	r3, [sp, #0]
   14a12:	4603      	mov	r3, r0
   14a14:	f88d 3007 	strb.w	r3, [sp, #7]
   14a18:	460b      	mov	r3, r1
   14a1a:	f8ad 3004 	strh.w	r3, [sp, #4]
   14a1e:	4613      	mov	r3, r2
   14a20:	f88d 3006 	strb.w	r3, [sp, #6]
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);

  /* if not advertising */
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   14a24:	4b10      	ldr	r3, [pc, #64]	; (14a68 <dmAdvStartDirected+0x5c>)
   14a26:	7f5b      	ldrb	r3, [r3, #29]
   14a28:	2b00      	cmp	r3, #0
   14a2a:	d118      	bne.n	14a5e <dmAdvStartDirected+0x52>
  {
    /* start advertising */
    HciLeSetAdvEnableCmd(TRUE);
   14a2c:	2001      	movs	r0, #1
   14a2e:	f7f8 fc8c 	bl	d34a <HciLeSetAdvEnableCmd>

    /* store advertising info */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (advType == DM_ADV_CONN_DIRECT) ? \
   14a32:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a36:	2b01      	cmp	r3, #1
   14a38:	d101      	bne.n	14a3e <dmAdvStartDirected+0x32>
   14a3a:	2202      	movs	r2, #2
   14a3c:	e000      	b.n	14a40 <dmAdvStartDirected+0x34>
   14a3e:	2203      	movs	r2, #3
   14a40:	4b09      	ldr	r3, [pc, #36]	; (14a68 <dmAdvStartDirected+0x5c>)
   14a42:	775a      	strb	r2, [r3, #29]
                                              DM_ADV_STATE_STARTING_DIRECTED : DM_ADV_STATE_STARTING;

    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = duration;
   14a44:	4a08      	ldr	r2, [pc, #32]	; (14a68 <dmAdvStartDirected+0x5c>)
   14a46:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14a4a:	8413      	strh	r3, [r2, #32]
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
   14a4c:	9900      	ldr	r1, [sp, #0]
   14a4e:	4807      	ldr	r0, [pc, #28]	; (14a6c <dmAdvStartDirected+0x60>)
   14a50:	f7f7 fbf0 	bl	c234 <BdaCpy>
    dmAdvCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = addrType;
   14a54:	4a04      	ldr	r2, [pc, #16]	; (14a68 <dmAdvStartDirected+0x5c>)
   14a56:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14a5a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
  }
}
   14a5e:	bf00      	nop
   14a60:	b003      	add	sp, #12
   14a62:	f85d fb04 	ldr.w	pc, [sp], #4
   14a66:	bf00      	nop
   14a68:	100043e8 	.word	0x100043e8
   14a6c:	1000440d 	.word	0x1000440d

00014a70 <dmAdvStopDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStopDirected(void)
{
   14a70:	b508      	push	{r3, lr}
  DM_TRACE_INFO1("dmAdvStopDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);

  /* if advertising or starting advertising */
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) ||
   14a72:	4b0d      	ldr	r3, [pc, #52]	; (14aa8 <dmAdvStopDirected+0x38>)
   14a74:	7f5b      	ldrb	r3, [r3, #29]
   14a76:	2b01      	cmp	r3, #1
   14a78:	d007      	beq.n	14a8a <dmAdvStopDirected+0x1a>
      (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)    ||
   14a7a:	4b0b      	ldr	r3, [pc, #44]	; (14aa8 <dmAdvStopDirected+0x38>)
   14a7c:	7f5b      	ldrb	r3, [r3, #29]
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) ||
   14a7e:	2b03      	cmp	r3, #3
   14a80:	d003      	beq.n	14a8a <dmAdvStopDirected+0x1a>
      (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING_DIRECTED))
   14a82:	4b09      	ldr	r3, [pc, #36]	; (14aa8 <dmAdvStopDirected+0x38>)
   14a84:	7f5b      	ldrb	r3, [r3, #29]
      (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)    ||
   14a86:	2b02      	cmp	r3, #2
   14a88:	d10b      	bne.n	14aa2 <dmAdvStopDirected+0x32>
  {
    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT) ? \
   14a8a:	4b08      	ldr	r3, [pc, #32]	; (14aac <dmAdvStopDirected+0x3c>)
   14a8c:	781b      	ldrb	r3, [r3, #0]
   14a8e:	2b01      	cmp	r3, #1
   14a90:	d101      	bne.n	14a96 <dmAdvStopDirected+0x26>
   14a92:	2204      	movs	r2, #4
   14a94:	e000      	b.n	14a98 <dmAdvStopDirected+0x28>
   14a96:	2205      	movs	r2, #5
   14a98:	4b03      	ldr	r3, [pc, #12]	; (14aa8 <dmAdvStopDirected+0x38>)
   14a9a:	775a      	strb	r2, [r3, #29]
                                              DM_ADV_STATE_STOPPING_DIRECTED : DM_ADV_STATE_STOPPING;
    HciLeSetAdvEnableCmd(FALSE);
   14a9c:	2000      	movs	r0, #0
   14a9e:	f7f8 fc54 	bl	d34a <HciLeSetAdvEnableCmd>
  }
}
   14aa2:	bf00      	nop
   14aa4:	bd08      	pop	{r3, pc}
   14aa6:	bf00      	nop
   14aa8:	100043e8 	.word	0x100043e8
   14aac:	1000441c 	.word	0x1000441c

00014ab0 <dmAdvConnected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnected(void)
{
   14ab0:	b508      	push	{r3, lr}
  DM_TRACE_INFO1("dmAdvConnected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);

  WsfTimerStop(&dmAdvCb.advTimer);
   14ab2:	4808      	ldr	r0, [pc, #32]	; (14ad4 <dmAdvConnected+0x24>)
   14ab4:	f00b fade 	bl	20074 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   14ab8:	2300      	movs	r3, #0
   14aba:	2200      	movs	r2, #0
   14abc:	2122      	movs	r1, #34	; 0x22
   14abe:	2015      	movs	r0, #21
   14ac0:	f001 f9f2 	bl	15ea8 <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   14ac4:	4b03      	ldr	r3, [pc, #12]	; (14ad4 <dmAdvConnected+0x24>)
   14ac6:	22ff      	movs	r2, #255	; 0xff
   14ac8:	761a      	strb	r2, [r3, #24]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   14aca:	4b02      	ldr	r3, [pc, #8]	; (14ad4 <dmAdvConnected+0x24>)
   14acc:	2200      	movs	r2, #0
   14ace:	775a      	strb	r2, [r3, #29]
}
   14ad0:	bf00      	nop
   14ad2:	bd08      	pop	{r3, pc}
   14ad4:	100043e8 	.word	0x100043e8

00014ad8 <dmAdvConnectFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnectFailed(void)
{
   14ad8:	b508      	push	{r3, lr}
  DM_TRACE_INFO1("dmAdvConnectFailed: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);

  WsfTimerStop(&dmAdvCb.advTimer);
   14ada:	4808      	ldr	r0, [pc, #32]	; (14afc <dmAdvConnectFailed+0x24>)
   14adc:	f00b faca 	bl	20074 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   14ae0:	2300      	movs	r3, #0
   14ae2:	2200      	movs	r2, #0
   14ae4:	2122      	movs	r1, #34	; 0x22
   14ae6:	2015      	movs	r0, #21
   14ae8:	f001 f9de 	bl	15ea8 <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   14aec:	4b03      	ldr	r3, [pc, #12]	; (14afc <dmAdvConnectFailed+0x24>)
   14aee:	22ff      	movs	r2, #255	; 0xff
   14af0:	761a      	strb	r2, [r3, #24]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   14af2:	4b02      	ldr	r3, [pc, #8]	; (14afc <dmAdvConnectFailed+0x24>)
   14af4:	2200      	movs	r2, #0
   14af6:	775a      	strb	r2, [r3, #29]
}
   14af8:	bf00      	nop
   14afa:	bd08      	pop	{r3, pc}
   14afc:	100043e8 	.word	0x100043e8

00014b00 <DmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvInit(void)
{
   14b00:	b508      	push	{r3, lr}
  WsfTaskLock();
   14b02:	f00a ff83 	bl	1fa0c <WsfTaskLock>

  /* set function interface table */
  dmFcnIfTbl[DM_ID_ADV] = (dmFcnIf_t *) &dmAdvFcnIf;
   14b06:	4b07      	ldr	r3, [pc, #28]	; (14b24 <DmAdvInit+0x24>)
   14b08:	4a07      	ldr	r2, [pc, #28]	; (14b28 <DmAdvInit+0x28>)
   14b0a:	601a      	str	r2, [r3, #0]

  /* initialize legacy adv module */
  dmAdvInit();
   14b0c:	f7ff fc90 	bl	14430 <dmAdvInit>

  /* clear set advertising set random address callback */
  dmDevCb.advSetRandAddrCback = NULL;
   14b10:	4b06      	ldr	r3, [pc, #24]	; (14b2c <DmAdvInit+0x2c>)
   14b12:	2200      	movs	r2, #0
   14b14:	601a      	str	r2, [r3, #0]

  /* initialize HCI VS module */
  HciVsInit(0);
   14b16:	2000      	movs	r0, #0
   14b18:	f00c fdf6 	bl	21708 <HciVsInit>

  WsfTaskUnlock();
   14b1c:	f00a ff7b 	bl	1fa16 <WsfTaskUnlock>
}
   14b20:	bf00      	nop
   14b22:	bd08      	pop	{r3, pc}
   14b24:	10002b0c 	.word	0x10002b0c
   14b28:	000283dc 	.word	0x000283dc
   14b2c:	100044f0 	.word	0x100044f0

00014b30 <dmConnCmplStates>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
static dmConnCcb_t *dmConnCmplStates(void)
{
   14b30:	b082      	sub	sp, #8
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   14b32:	4b15      	ldr	r3, [pc, #84]	; (14b88 <dmConnCmplStates+0x58>)
   14b34:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  /* if there's a ccb in accepting state */
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14b36:	2303      	movs	r3, #3
   14b38:	f88d 3003 	strb.w	r3, [sp, #3]
   14b3c:	e01b      	b.n	14b76 <dmConnCmplStates+0x46>
  {
    /* look for connection in accepting state or disconnecting state, cancelled connection */
    if (pCcb->inUse &&
   14b3e:	9b01      	ldr	r3, [sp, #4]
   14b40:	7d9b      	ldrb	r3, [r3, #22]
   14b42:	2b00      	cmp	r3, #0
   14b44:	d00f      	beq.n	14b66 <dmConnCmplStates+0x36>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   14b46:	9b01      	ldr	r3, [sp, #4]
   14b48:	7d5b      	ldrb	r3, [r3, #21]
    if (pCcb->inUse &&
   14b4a:	2b02      	cmp	r3, #2
   14b4c:	d009      	beq.n	14b62 <dmConnCmplStates+0x32>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   14b4e:	9b01      	ldr	r3, [sp, #4]
   14b50:	7d5b      	ldrb	r3, [r3, #21]
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   14b52:	2b04      	cmp	r3, #4
   14b54:	d107      	bne.n	14b66 <dmConnCmplStates+0x36>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   14b56:	9b01      	ldr	r3, [sp, #4]
   14b58:	899b      	ldrh	r3, [r3, #12]
   14b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14b5e:	4293      	cmp	r3, r2
   14b60:	d101      	bne.n	14b66 <dmConnCmplStates+0x36>
    {
      DM_TRACE_INFO1("dmConnCmplStates %d", pCcb->connId);
      return pCcb;
   14b62:	9b01      	ldr	r3, [sp, #4]
   14b64:	e00c      	b.n	14b80 <dmConnCmplStates+0x50>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14b66:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14b6a:	3b01      	subs	r3, #1
   14b6c:	f88d 3003 	strb.w	r3, [sp, #3]
   14b70:	9b01      	ldr	r3, [sp, #4]
   14b72:	3330      	adds	r3, #48	; 0x30
   14b74:	9301      	str	r3, [sp, #4]
   14b76:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	d1df      	bne.n	14b3e <dmConnCmplStates+0xe>
    }
  }

  return NULL;
   14b7e:	2300      	movs	r3, #0
}
   14b80:	4618      	mov	r0, r3
   14b82:	b002      	add	sp, #8
   14b84:	4770      	bx	lr
   14b86:	bf00      	nop
   14b88:	10004420 	.word	0x10004420

00014b8c <dmConnCcbAlloc>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbAlloc(uint8_t *pAddr)
{
   14b8c:	b500      	push	{lr}
   14b8e:	b085      	sub	sp, #20
   14b90:	9001      	str	r0, [sp, #4]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   14b92:	4b1d      	ldr	r3, [pc, #116]	; (14c08 <dmConnCcbAlloc+0x7c>)
   14b94:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   14b96:	2300      	movs	r3, #0
   14b98:	f88d 300b 	strb.w	r3, [sp, #11]
   14b9c:	e02b      	b.n	14bf6 <dmConnCcbAlloc+0x6a>
  {
    if (pCcb->inUse == FALSE)
   14b9e:	9b03      	ldr	r3, [sp, #12]
   14ba0:	7d9b      	ldrb	r3, [r3, #22]
   14ba2:	2b00      	cmp	r3, #0
   14ba4:	d11f      	bne.n	14be6 <dmConnCcbAlloc+0x5a>
    {
      memset(pCcb, 0, sizeof(dmConnCcb_t));
   14ba6:	2230      	movs	r2, #48	; 0x30
   14ba8:	2100      	movs	r1, #0
   14baa:	9803      	ldr	r0, [sp, #12]
   14bac:	f010 fd86 	bl	256bc <memset>

      BdaCpy(pCcb->peerAddr, pAddr);
   14bb0:	9b03      	ldr	r3, [sp, #12]
   14bb2:	9901      	ldr	r1, [sp, #4]
   14bb4:	4618      	mov	r0, r3
   14bb6:	f7f7 fb3d 	bl	c234 <BdaCpy>
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   14bba:	9b03      	ldr	r3, [sp, #12]
   14bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14bc0:	819a      	strh	r2, [r3, #12]
      pCcb->connId = i + 1;
   14bc2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14bc6:	3301      	adds	r3, #1
   14bc8:	b2da      	uxtb	r2, r3
   14bca:	9b03      	ldr	r3, [sp, #12]
   14bcc:	741a      	strb	r2, [r3, #16]
      pCcb->updating = FALSE;
   14bce:	9b03      	ldr	r3, [sp, #12]
   14bd0:	2200      	movs	r2, #0
   14bd2:	745a      	strb	r2, [r3, #17]
      pCcb->inUse = TRUE;
   14bd4:	9b03      	ldr	r3, [sp, #12]
   14bd6:	2201      	movs	r2, #1
   14bd8:	759a      	strb	r2, [r3, #22]
      pCcb->featuresPresent = FALSE;
   14bda:	9b03      	ldr	r3, [sp, #12]
   14bdc:	2200      	movs	r2, #0
   14bde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);

      return pCcb;
   14be2:	9b03      	ldr	r3, [sp, #12]
   14be4:	e00c      	b.n	14c00 <dmConnCcbAlloc+0x74>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   14be6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14bea:	3301      	adds	r3, #1
   14bec:	f88d 300b 	strb.w	r3, [sp, #11]
   14bf0:	9b03      	ldr	r3, [sp, #12]
   14bf2:	3330      	adds	r3, #48	; 0x30
   14bf4:	9303      	str	r3, [sp, #12]
   14bf6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14bfa:	2b02      	cmp	r3, #2
   14bfc:	d9cf      	bls.n	14b9e <dmConnCcbAlloc+0x12>
    }
  }

  DM_TRACE_ERR0("dmConnCcbAlloc failed");

  return NULL;
   14bfe:	2300      	movs	r3, #0
}
   14c00:	4618      	mov	r0, r3
   14c02:	b005      	add	sp, #20
   14c04:	f85d fb04 	ldr.w	pc, [sp], #4
   14c08:	10004420 	.word	0x10004420

00014c0c <dmConnCcbDealloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnCcbDealloc(dmConnCcb_t *pCcb)
{
   14c0c:	b082      	sub	sp, #8
   14c0e:	9001      	str	r0, [sp, #4]
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);

  pCcb->inUse = FALSE;
   14c10:	9b01      	ldr	r3, [sp, #4]
   14c12:	2200      	movs	r2, #0
   14c14:	759a      	strb	r2, [r3, #22]
}
   14c16:	bf00      	nop
   14c18:	b002      	add	sp, #8
   14c1a:	4770      	bx	lr

00014c1c <dmConnCcbByHandle>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbByHandle(uint16_t handle)
{
   14c1c:	b084      	sub	sp, #16
   14c1e:	4603      	mov	r3, r0
   14c20:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   14c24:	4b10      	ldr	r3, [pc, #64]	; (14c68 <dmConnCcbByHandle+0x4c>)
   14c26:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14c28:	2303      	movs	r3, #3
   14c2a:	f88d 300b 	strb.w	r3, [sp, #11]
   14c2e:	e013      	b.n	14c58 <dmConnCcbByHandle+0x3c>
  {
    if (pCcb->inUse && (pCcb->handle == handle))
   14c30:	9b03      	ldr	r3, [sp, #12]
   14c32:	7d9b      	ldrb	r3, [r3, #22]
   14c34:	2b00      	cmp	r3, #0
   14c36:	d007      	beq.n	14c48 <dmConnCcbByHandle+0x2c>
   14c38:	9b03      	ldr	r3, [sp, #12]
   14c3a:	899b      	ldrh	r3, [r3, #12]
   14c3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   14c40:	429a      	cmp	r2, r3
   14c42:	d101      	bne.n	14c48 <dmConnCcbByHandle+0x2c>
    {
      return pCcb;
   14c44:	9b03      	ldr	r3, [sp, #12]
   14c46:	e00c      	b.n	14c62 <dmConnCcbByHandle+0x46>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14c48:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14c4c:	3b01      	subs	r3, #1
   14c4e:	f88d 300b 	strb.w	r3, [sp, #11]
   14c52:	9b03      	ldr	r3, [sp, #12]
   14c54:	3330      	adds	r3, #48	; 0x30
   14c56:	9303      	str	r3, [sp, #12]
   14c58:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14c5c:	2b00      	cmp	r3, #0
   14c5e:	d1e7      	bne.n	14c30 <dmConnCcbByHandle+0x14>
    }
  }

  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);

  return NULL;
   14c60:	2300      	movs	r3, #0
}
   14c62:	4618      	mov	r0, r3
   14c64:	b004      	add	sp, #16
   14c66:	4770      	bx	lr
   14c68:	10004420 	.word	0x10004420

00014c6c <dmConnCcbByBdAddr>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbByBdAddr(uint8_t *pAddr)
{
   14c6c:	b500      	push	{lr}
   14c6e:	b085      	sub	sp, #20
   14c70:	9001      	str	r0, [sp, #4]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   14c72:	4b12      	ldr	r3, [pc, #72]	; (14cbc <dmConnCcbByBdAddr+0x50>)
   14c74:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14c76:	2303      	movs	r3, #3
   14c78:	f88d 300b 	strb.w	r3, [sp, #11]
   14c7c:	e015      	b.n	14caa <dmConnCcbByBdAddr+0x3e>
  {
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   14c7e:	9b03      	ldr	r3, [sp, #12]
   14c80:	7d9b      	ldrb	r3, [r3, #22]
   14c82:	2b00      	cmp	r3, #0
   14c84:	d009      	beq.n	14c9a <dmConnCcbByBdAddr+0x2e>
   14c86:	9b03      	ldr	r3, [sp, #12]
   14c88:	9901      	ldr	r1, [sp, #4]
   14c8a:	4618      	mov	r0, r3
   14c8c:	f7f7 fadf 	bl	c24e <BdaCmp>
   14c90:	4603      	mov	r3, r0
   14c92:	2b00      	cmp	r3, #0
   14c94:	d001      	beq.n	14c9a <dmConnCcbByBdAddr+0x2e>
    {
      return pCcb;
   14c96:	9b03      	ldr	r3, [sp, #12]
   14c98:	e00c      	b.n	14cb4 <dmConnCcbByBdAddr+0x48>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14c9a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14c9e:	3b01      	subs	r3, #1
   14ca0:	f88d 300b 	strb.w	r3, [sp, #11]
   14ca4:	9b03      	ldr	r3, [sp, #12]
   14ca6:	3330      	adds	r3, #48	; 0x30
   14ca8:	9303      	str	r3, [sp, #12]
   14caa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14cae:	2b00      	cmp	r3, #0
   14cb0:	d1e5      	bne.n	14c7e <dmConnCcbByBdAddr+0x12>
    }
  }

  DM_TRACE_INFO0("dmConnIdByBdAddr not found");

  return NULL;
   14cb2:	2300      	movs	r3, #0
}
   14cb4:	4618      	mov	r0, r3
   14cb6:	b005      	add	sp, #20
   14cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   14cbc:	10004420 	.word	0x10004420

00014cc0 <dmConnCcbById>:
 *
 *  \return Pointer to CCB or NULL if failure.
 */
/*************************************************************************************************/
dmConnCcb_t *dmConnCcbById(dmConnId_t connId)
{
   14cc0:	b082      	sub	sp, #8
   14cc2:	4603      	mov	r3, r0
   14cc4:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  connId--;
   14cc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14ccc:	3b01      	subs	r3, #1
   14cce:	f88d 3007 	strb.w	r3, [sp, #7]
  if (dmConnCb.ccb[connId].inUse)
   14cd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   14cd6:	490b      	ldr	r1, [pc, #44]	; (14d04 <dmConnCcbById+0x44>)
   14cd8:	4613      	mov	r3, r2
   14cda:	005b      	lsls	r3, r3, #1
   14cdc:	4413      	add	r3, r2
   14cde:	011b      	lsls	r3, r3, #4
   14ce0:	440b      	add	r3, r1
   14ce2:	3316      	adds	r3, #22
   14ce4:	781b      	ldrb	r3, [r3, #0]
   14ce6:	2b00      	cmp	r3, #0
   14ce8:	d008      	beq.n	14cfc <dmConnCcbById+0x3c>
  {
    return &dmConnCb.ccb[connId];
   14cea:	f89d 2007 	ldrb.w	r2, [sp, #7]
   14cee:	4613      	mov	r3, r2
   14cf0:	005b      	lsls	r3, r3, #1
   14cf2:	4413      	add	r3, r2
   14cf4:	011b      	lsls	r3, r3, #4
   14cf6:	4a03      	ldr	r2, [pc, #12]	; (14d04 <dmConnCcbById+0x44>)
   14cf8:	4413      	add	r3, r2
   14cfa:	e000      	b.n	14cfe <dmConnCcbById+0x3e>
  }

  return NULL;
   14cfc:	2300      	movs	r3, #0
}
   14cfe:	4618      	mov	r0, r3
   14d00:	b002      	add	sp, #8
   14d02:	4770      	bx	lr
   14d04:	10004420 	.word	0x10004420

00014d08 <dmConnNum>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t dmConnNum(void)
{
   14d08:	b082      	sub	sp, #8
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   14d0a:	4b11      	ldr	r3, [pc, #68]	; (14d50 <dmConnNum+0x48>)
   14d0c:	9301      	str	r3, [sp, #4]
  uint8_t       i, j;

  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   14d0e:	2303      	movs	r3, #3
   14d10:	f88d 3003 	strb.w	r3, [sp, #3]
   14d14:	2300      	movs	r3, #0
   14d16:	f88d 3002 	strb.w	r3, [sp, #2]
   14d1a:	e010      	b.n	14d3e <dmConnNum+0x36>
  {
    if (pCcb->inUse)
   14d1c:	9b01      	ldr	r3, [sp, #4]
   14d1e:	7d9b      	ldrb	r3, [r3, #22]
   14d20:	2b00      	cmp	r3, #0
   14d22:	d004      	beq.n	14d2e <dmConnNum+0x26>
    {
      j++;
   14d24:	f89d 3002 	ldrb.w	r3, [sp, #2]
   14d28:	3301      	adds	r3, #1
   14d2a:	f88d 3002 	strb.w	r3, [sp, #2]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   14d2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14d32:	3b01      	subs	r3, #1
   14d34:	f88d 3003 	strb.w	r3, [sp, #3]
   14d38:	9b01      	ldr	r3, [sp, #4]
   14d3a:	3330      	adds	r3, #48	; 0x30
   14d3c:	9301      	str	r3, [sp, #4]
   14d3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14d42:	2b00      	cmp	r3, #0
   14d44:	d1ea      	bne.n	14d1c <dmConnNum+0x14>
    }
  }

  return j;
   14d46:	f89d 3002 	ldrb.w	r3, [sp, #2]
}
   14d4a:	4618      	mov	r0, r3
   14d4c:	b002      	add	sp, #8
   14d4e:	4770      	bx	lr
   14d50:	10004420 	.word	0x10004420

00014d54 <dmConnExecCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnExecCback(dmConnMsg_t *pMsg)
{
   14d54:	b500      	push	{lr}
   14d56:	b085      	sub	sp, #20
   14d58:	9001      	str	r0, [sp, #4]
  uint8_t i;

  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   14d5a:	2300      	movs	r3, #0
   14d5c:	f88d 300f 	strb.w	r3, [sp, #15]
   14d60:	e014      	b.n	14d8c <dmConnExecCback+0x38>
  {
    if (dmConnCb.connCback[i] != NULL)
   14d62:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d66:	4a0e      	ldr	r2, [pc, #56]	; (14da0 <dmConnExecCback+0x4c>)
   14d68:	3324      	adds	r3, #36	; 0x24
   14d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d6e:	2b00      	cmp	r3, #0
   14d70:	d007      	beq.n	14d82 <dmConnExecCback+0x2e>
    {
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   14d72:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d76:	4a0a      	ldr	r2, [pc, #40]	; (14da0 <dmConnExecCback+0x4c>)
   14d78:	3324      	adds	r3, #36	; 0x24
   14d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d7e:	9801      	ldr	r0, [sp, #4]
   14d80:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   14d82:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d86:	3301      	adds	r3, #1
   14d88:	f88d 300f 	strb.w	r3, [sp, #15]
   14d8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d90:	2b04      	cmp	r3, #4
   14d92:	d9e6      	bls.n	14d62 <dmConnExecCback+0xe>
    }
  }
}
   14d94:	bf00      	nop
   14d96:	bf00      	nop
   14d98:	b005      	add	sp, #20
   14d9a:	f85d fb04 	ldr.w	pc, [sp], #4
   14d9e:	bf00      	nop
   14da0:	10004420 	.word	0x10004420

00014da4 <dmConnSmActNone>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActNone(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   14da4:	b082      	sub	sp, #8
   14da6:	9001      	str	r0, [sp, #4]
   14da8:	9100      	str	r1, [sp, #0]
  return;
   14daa:	bf00      	nop
}
   14dac:	b002      	add	sp, #8
   14dae:	4770      	bx	lr

00014db0 <dmConnSmActClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActClose(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   14db0:	b500      	push	{lr}
   14db2:	b083      	sub	sp, #12
   14db4:	9001      	str	r0, [sp, #4]
   14db6:	9100      	str	r1, [sp, #0]
  HciDisconnectCmd(pCcb->handle, pMsg->apiClose.reason);
   14db8:	9b01      	ldr	r3, [sp, #4]
   14dba:	899a      	ldrh	r2, [r3, #12]
   14dbc:	9b00      	ldr	r3, [sp, #0]
   14dbe:	791b      	ldrb	r3, [r3, #4]
   14dc0:	4619      	mov	r1, r3
   14dc2:	4610      	mov	r0, r2
   14dc4:	f7f7 ffa8 	bl	cd18 <HciDisconnectCmd>
}
   14dc8:	bf00      	nop
   14dca:	b003      	add	sp, #12
   14dcc:	f85d fb04 	ldr.w	pc, [sp], #4

00014dd0 <dmConnSmActConnOpened>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnOpened(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   14dd0:	b510      	push	{r4, lr}
   14dd2:	b082      	sub	sp, #8
   14dd4:	9001      	str	r0, [sp, #4]
   14dd6:	9100      	str	r1, [sp, #0]
  /* store peer address, handle, and role */
  BdaCpy(pCcb->peerAddr, pMsg->hciLeConnCmpl.peerAddr);
   14dd8:	9a01      	ldr	r2, [sp, #4]
   14dda:	9b00      	ldr	r3, [sp, #0]
   14ddc:	330a      	adds	r3, #10
   14dde:	4619      	mov	r1, r3
   14de0:	4610      	mov	r0, r2
   14de2:	f7f7 fa27 	bl	c234 <BdaCpy>
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
   14de6:	9b00      	ldr	r3, [sp, #0]
   14de8:	88da      	ldrh	r2, [r3, #6]
   14dea:	9b01      	ldr	r3, [sp, #4]
   14dec:	819a      	strh	r2, [r3, #12]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
   14dee:	9b00      	ldr	r3, [sp, #0]
   14df0:	7a5b      	ldrb	r3, [r3, #9]
   14df2:	4618      	mov	r0, r3
   14df4:	f001 f990 	bl	16118 <DmHostAddrType>
   14df8:	4603      	mov	r3, r0
   14dfa:	461a      	mov	r2, r3
   14dfc:	9b01      	ldr	r3, [sp, #4]
   14dfe:	74da      	strb	r2, [r3, #19]
  pCcb->role = pMsg->hciLeConnCmpl.role;
   14e00:	9b00      	ldr	r3, [sp, #0]
   14e02:	7a1a      	ldrb	r2, [r3, #8]
   14e04:	9b01      	ldr	r3, [sp, #4]
   14e06:	765a      	strb	r2, [r3, #25]

  /* set local address type of connection */
  if (pCcb->role == DM_ROLE_MASTER)
   14e08:	9b01      	ldr	r3, [sp, #4]
   14e0a:	7e5b      	ldrb	r3, [r3, #25]
   14e0c:	2b00      	cmp	r3, #0
   14e0e:	d104      	bne.n	14e1a <dmConnSmActConnOpened+0x4a>
  {
    pCcb->localAddrType = dmCb.connAddrType;
   14e10:	4b2a      	ldr	r3, [pc, #168]	; (14ebc <dmConnSmActConnOpened+0xec>)
   14e12:	7b5a      	ldrb	r2, [r3, #13]
   14e14:	9b01      	ldr	r3, [sp, #4]
   14e16:	751a      	strb	r2, [r3, #20]
   14e18:	e003      	b.n	14e22 <dmConnSmActConnOpened+0x52>
  }
  else
  {
    pCcb->localAddrType = dmCb.advAddrType;
   14e1a:	4b28      	ldr	r3, [pc, #160]	; (14ebc <dmConnSmActConnOpened+0xec>)
   14e1c:	7b9a      	ldrb	r2, [r3, #14]
   14e1e:	9b01      	ldr	r3, [sp, #4]
   14e20:	751a      	strb	r2, [r3, #20]
  }

  /* set local address of connection */
  if (pCcb->localAddrType == DM_ADDR_PUBLIC)
   14e22:	9b01      	ldr	r3, [sp, #4]
   14e24:	7d1b      	ldrb	r3, [r3, #20]
   14e26:	2b00      	cmp	r3, #0
   14e28:	d109      	bne.n	14e3e <dmConnSmActConnOpened+0x6e>
  {
    BdaCpy(pCcb->localAddr, HciGetBdAddr());
   14e2a:	9b01      	ldr	r3, [sp, #4]
   14e2c:	1d9c      	adds	r4, r3, #6
   14e2e:	f7f9 fb13 	bl	e458 <HciGetBdAddr>
   14e32:	4603      	mov	r3, r0
   14e34:	4619      	mov	r1, r3
   14e36:	4620      	mov	r0, r4
   14e38:	f7f7 f9fc 	bl	c234 <BdaCpy>
   14e3c:	e005      	b.n	14e4a <dmConnSmActConnOpened+0x7a>
  }
  else
  {
    BdaCpy(pCcb->localAddr, dmCb.localAddr);
   14e3e:	9b01      	ldr	r3, [sp, #4]
   14e40:	3306      	adds	r3, #6
   14e42:	491e      	ldr	r1, [pc, #120]	; (14ebc <dmConnSmActConnOpened+0xec>)
   14e44:	4618      	mov	r0, r3
   14e46:	f7f7 f9f5 	bl	c234 <BdaCpy>
  }

  /* store enhanced fields */
  BdaCpy(pCcb->localRpa, pMsg->hciLeConnCmpl.localRpa);
   14e4a:	9b01      	ldr	r3, [sp, #4]
   14e4c:	f103 021a 	add.w	r2, r3, #26
   14e50:	9b00      	ldr	r3, [sp, #0]
   14e52:	3317      	adds	r3, #23
   14e54:	4619      	mov	r1, r3
   14e56:	4610      	mov	r0, r2
   14e58:	f7f7 f9ec 	bl	c234 <BdaCpy>
  BdaCpy(pCcb->peerRpa, pMsg->hciLeConnCmpl.peerRpa);
   14e5c:	9b01      	ldr	r3, [sp, #4]
   14e5e:	f103 0220 	add.w	r2, r3, #32
   14e62:	9b00      	ldr	r3, [sp, #0]
   14e64:	331d      	adds	r3, #29
   14e66:	4619      	mov	r1, r3
   14e68:	4610      	mov	r0, r2
   14e6a:	f7f7 f9e3 	bl	c234 <BdaCpy>

  /* initialize idle state */
  pCcb->idleMask = 0;
   14e6e:	9b01      	ldr	r3, [sp, #4]
   14e70:	2200      	movs	r2, #0
   14e72:	81da      	strh	r2, [r3, #14]

  /* if central */
  if (pCcb->role == DM_ROLE_MASTER)
   14e74:	9b01      	ldr	r3, [sp, #4]
   14e76:	7e5b      	ldrb	r3, [r3, #25]
   14e78:	2b00      	cmp	r3, #0
   14e7a:	d110      	bne.n	14e9e <dmConnSmActConnOpened+0xce>
  {
    /* pass connection initiation completed to dev priv */
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0 , 0);
   14e7c:	2300      	movs	r3, #0
   14e7e:	2200      	movs	r2, #0
   14e80:	2101      	movs	r1, #1
   14e82:	2016      	movs	r0, #22
   14e84:	f001 f810 	bl	15ea8 <dmDevPassEvtToDevPriv>

    /* if first connection opened */
    if (dmConnNum() == 1)
   14e88:	f7ff ff3e 	bl	14d08 <dmConnNum>
   14e8c:	4603      	mov	r3, r0
   14e8e:	2b01      	cmp	r3, #1
   14e90:	d105      	bne.n	14e9e <dmConnSmActConnOpened+0xce>
    {
      /* pass conn open event to dev priv */
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_CONN_OPEN_IND, 0, 0);
   14e92:	2300      	movs	r3, #0
   14e94:	2200      	movs	r2, #0
   14e96:	2127      	movs	r1, #39	; 0x27
   14e98:	2014      	movs	r0, #20
   14e9a:	f001 f805 	bl	15ea8 <dmDevPassEvtToDevPriv>
    }
  }

  /* pass conn open event to Connection CTE */
  dmDevPassEvtToConnCte(DM_CONN_OPEN_IND, pCcb->connId);
   14e9e:	9b01      	ldr	r3, [sp, #4]
   14ea0:	7c1b      	ldrb	r3, [r3, #16]
   14ea2:	4619      	mov	r1, r3
   14ea4:	2027      	movs	r0, #39	; 0x27
   14ea6:	f001 f82d 	bl	15f04 <dmDevPassEvtToConnCte>

  pMsg->hdr.event = DM_CONN_OPEN_IND;
   14eaa:	9b00      	ldr	r3, [sp, #0]
   14eac:	2227      	movs	r2, #39	; 0x27
   14eae:	709a      	strb	r2, [r3, #2]
  dmConnExecCback(pMsg);
   14eb0:	9800      	ldr	r0, [sp, #0]
   14eb2:	f7ff ff4f 	bl	14d54 <dmConnExecCback>
}
   14eb6:	bf00      	nop
   14eb8:	b002      	add	sp, #8
   14eba:	bd10      	pop	{r4, pc}
   14ebc:	100044f4 	.word	0x100044f4

00014ec0 <dmConnSmActConnFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnFailed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   14ec0:	b500      	push	{lr}
   14ec2:	b083      	sub	sp, #12
   14ec4:	9001      	str	r0, [sp, #4]
   14ec6:	9100      	str	r1, [sp, #0]
  /* deallocate ccb */
  dmConnCcbDealloc(pCcb);
   14ec8:	9801      	ldr	r0, [sp, #4]
   14eca:	f7ff fe9f 	bl	14c0c <dmConnCcbDealloc>

  /* if central */
  if (pCcb->role == DM_ROLE_MASTER)
   14ece:	9b01      	ldr	r3, [sp, #4]
   14ed0:	7e5b      	ldrb	r3, [r3, #25]
   14ed2:	2b00      	cmp	r3, #0
   14ed4:	d110      	bne.n	14ef8 <dmConnSmActConnFailed+0x38>
  {
    /* pass connection initiation completed to dev priv */
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
   14ed6:	2300      	movs	r3, #0
   14ed8:	2200      	movs	r2, #0
   14eda:	2101      	movs	r1, #1
   14edc:	2016      	movs	r0, #22
   14ede:	f000 ffe3 	bl	15ea8 <dmDevPassEvtToDevPriv>

    /* if last connection closed */
    if (dmConnNum() == 0)
   14ee2:	f7ff ff11 	bl	14d08 <dmConnNum>
   14ee6:	4603      	mov	r3, r0
   14ee8:	2b00      	cmp	r3, #0
   14eea:	d105      	bne.n	14ef8 <dmConnSmActConnFailed+0x38>
    {
      /* pass conn close event to dev priv */
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0 , 0);
   14eec:	2300      	movs	r3, #0
   14eee:	2200      	movs	r2, #0
   14ef0:	2128      	movs	r1, #40	; 0x28
   14ef2:	2015      	movs	r0, #21
   14ef4:	f000 ffd8 	bl	15ea8 <dmDevPassEvtToDevPriv>
    }
  }

  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   14ef8:	9b00      	ldr	r3, [sp, #0]
   14efa:	2228      	movs	r2, #40	; 0x28
   14efc:	709a      	strb	r2, [r3, #2]
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
   14efe:	9b00      	ldr	r3, [sp, #0]
   14f00:	2200      	movs	r2, #0
   14f02:	721a      	strb	r2, [r3, #8]
   14f04:	9b00      	ldr	r3, [sp, #0]
   14f06:	2200      	movs	r2, #0
   14f08:	80da      	strh	r2, [r3, #6]
  dmConnExecCback(pMsg);
   14f0a:	9800      	ldr	r0, [sp, #0]
   14f0c:	f7ff ff22 	bl	14d54 <dmConnExecCback>
}
   14f10:	bf00      	nop
   14f12:	b003      	add	sp, #12
   14f14:	f85d fb04 	ldr.w	pc, [sp], #4

00014f18 <dmConnSmActConnClosed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnClosed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   14f18:	b500      	push	{lr}
   14f1a:	b083      	sub	sp, #12
   14f1c:	9001      	str	r0, [sp, #4]
   14f1e:	9100      	str	r1, [sp, #0]
  /* pass conn close event to Connection CTE */
  dmDevPassEvtToConnCte(DM_CONN_CLOSE_IND, pCcb->connId);
   14f20:	9b01      	ldr	r3, [sp, #4]
   14f22:	7c1b      	ldrb	r3, [r3, #16]
   14f24:	4619      	mov	r1, r3
   14f26:	2028      	movs	r0, #40	; 0x28
   14f28:	f000 ffec 	bl	15f04 <dmDevPassEvtToConnCte>

  /* deallocate ccb */
  dmConnCcbDealloc(pCcb);
   14f2c:	9801      	ldr	r0, [sp, #4]
   14f2e:	f7ff fe6d 	bl	14c0c <dmConnCcbDealloc>

  /* if central and last connection closed */
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
   14f32:	9b01      	ldr	r3, [sp, #4]
   14f34:	7e5b      	ldrb	r3, [r3, #25]
   14f36:	2b00      	cmp	r3, #0
   14f38:	d10a      	bne.n	14f50 <dmConnSmActConnClosed+0x38>
   14f3a:	f7ff fee5 	bl	14d08 <dmConnNum>
   14f3e:	4603      	mov	r3, r0
   14f40:	2b00      	cmp	r3, #0
   14f42:	d105      	bne.n	14f50 <dmConnSmActConnClosed+0x38>
  {
    /* pass conn close event to dev priv */
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0, 0);
   14f44:	2300      	movs	r3, #0
   14f46:	2200      	movs	r2, #0
   14f48:	2128      	movs	r1, #40	; 0x28
   14f4a:	2015      	movs	r0, #21
   14f4c:	f000 ffac 	bl	15ea8 <dmDevPassEvtToDevPriv>
  }

  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   14f50:	9b00      	ldr	r3, [sp, #0]
   14f52:	2228      	movs	r2, #40	; 0x28
   14f54:	709a      	strb	r2, [r3, #2]
  dmConnExecCback(pMsg);
   14f56:	9800      	ldr	r0, [sp, #0]
   14f58:	f7ff fefc 	bl	14d54 <dmConnExecCback>
}
   14f5c:	bf00      	nop
   14f5e:	b003      	add	sp, #12
   14f60:	f85d fb04 	ldr.w	pc, [sp], #4

00014f64 <dmConnSmActHciUpdated>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActHciUpdated(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   14f64:	b500      	push	{lr}
   14f66:	b083      	sub	sp, #12
   14f68:	9001      	str	r0, [sp, #4]
   14f6a:	9100      	str	r1, [sp, #0]
  /* call callback */
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
   14f6c:	9b00      	ldr	r3, [sp, #0]
   14f6e:	2229      	movs	r2, #41	; 0x29
   14f70:	709a      	strb	r2, [r3, #2]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   14f72:	4b04      	ldr	r3, [pc, #16]	; (14f84 <dmConnSmActHciUpdated+0x20>)
   14f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   14f78:	9800      	ldr	r0, [sp, #0]
   14f7a:	4798      	blx	r3
}
   14f7c:	bf00      	nop
   14f7e:	b003      	add	sp, #12
   14f80:	f85d fb04 	ldr.w	pc, [sp], #4
   14f84:	10004420 	.word	0x10004420

00014f88 <dmConnReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnReset(void)
{
   14f88:	b500      	push	{lr}
   14f8a:	b085      	sub	sp, #20
  dmConnCcb_t             *pCcb = dmConnCb.ccb;
   14f8c:	4b31      	ldr	r3, [pc, #196]	; (15054 <dmConnReset+0xcc>)
   14f8e:	9303      	str	r3, [sp, #12]
  hciDisconnectCmplEvt_t  disconnectCmpl;
  uint8_t                 i;

  /* generate HCI disconnect complete event */
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
   14f90:	2303      	movs	r3, #3
   14f92:	f88d 3002 	strb.w	r3, [sp, #2]
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
   14f96:	2300      	movs	r3, #0
   14f98:	f88d 3004 	strb.w	r3, [sp, #4]
   14f9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14fa0:	f88d 3003 	strb.w	r3, [sp, #3]
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
   14fa4:	2316      	movs	r3, #22
   14fa6:	f88d 3008 	strb.w	r3, [sp, #8]

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14faa:	2303      	movs	r3, #3
   14fac:	f88d 300b 	strb.w	r3, [sp, #11]
   14fb0:	e017      	b.n	14fe2 <dmConnReset+0x5a>
  {
    if (pCcb->inUse)
   14fb2:	9b03      	ldr	r3, [sp, #12]
   14fb4:	7d9b      	ldrb	r3, [r3, #22]
   14fb6:	2b00      	cmp	r3, #0
   14fb8:	d00b      	beq.n	14fd2 <dmConnReset+0x4a>
    {
      /* set connection id */
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   14fba:	9b03      	ldr	r3, [sp, #12]
   14fbc:	899b      	ldrh	r3, [r3, #12]
   14fbe:	f8ad 3006 	strh.w	r3, [sp, #6]
   14fc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14fc6:	f8ad 3000 	strh.w	r3, [sp]

      /* handle the event */
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   14fca:	466b      	mov	r3, sp
   14fcc:	4618      	mov	r0, r3
   14fce:	f000 f85c 	bl	1508a <dmConnHciHandler>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   14fd2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14fd6:	3b01      	subs	r3, #1
   14fd8:	f88d 300b 	strb.w	r3, [sp, #11]
   14fdc:	9b03      	ldr	r3, [sp, #12]
   14fde:	3330      	adds	r3, #48	; 0x30
   14fe0:	9303      	str	r3, [sp, #12]
   14fe2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14fe6:	2b00      	cmp	r3, #0
   14fe8:	d1e3      	bne.n	14fb2 <dmConnReset+0x2a>
    }
  }

  /* initialize control block */
  for (i = 0; i < DM_NUM_PHYS; i++)
   14fea:	2300      	movs	r3, #0
   14fec:	f88d 300b 	strb.w	r3, [sp, #11]
   14ff0:	e021      	b.n	15036 <dmConnReset+0xae>
  {
    dmConnCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
   14ff2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14ff6:	4a17      	ldr	r2, [pc, #92]	; (15054 <dmConnReset+0xcc>)
   14ff8:	335c      	adds	r3, #92	; 0x5c
   14ffa:	005b      	lsls	r3, r3, #1
   14ffc:	4413      	add	r3, r2
   14ffe:	2230      	movs	r2, #48	; 0x30
   15000:	809a      	strh	r2, [r3, #4]
    dmConnCb.scanWindow[i] = DM_GAP_SCAN_FAST_WINDOW;
   15002:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15006:	4a13      	ldr	r2, [pc, #76]	; (15054 <dmConnReset+0xcc>)
   15008:	3360      	adds	r3, #96	; 0x60
   1500a:	2130      	movs	r1, #48	; 0x30
   1500c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   15010:	f89d 200b 	ldrb.w	r2, [sp, #11]
   15014:	490f      	ldr	r1, [pc, #60]	; (15054 <dmConnReset+0xcc>)
   15016:	4613      	mov	r3, r2
   15018:	005b      	lsls	r3, r3, #1
   1501a:	4413      	add	r3, r2
   1501c:	009b      	lsls	r3, r3, #2
   1501e:	440b      	add	r3, r1
   15020:	33a0      	adds	r3, #160	; 0xa0
   15022:	4a0d      	ldr	r2, [pc, #52]	; (15058 <dmConnReset+0xd0>)
   15024:	3304      	adds	r3, #4
   15026:	ca07      	ldmia	r2, {r0, r1, r2}
   15028:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for (i = 0; i < DM_NUM_PHYS; i++)
   1502c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15030:	3301      	adds	r3, #1
   15032:	f88d 300b 	strb.w	r3, [sp, #11]
   15036:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1503a:	2b01      	cmp	r3, #1
   1503c:	d9d9      	bls.n	14ff2 <dmConnReset+0x6a>
  }

  dmCb.initFiltPolicy = HCI_FILT_NONE;
   1503e:	4b07      	ldr	r3, [pc, #28]	; (1505c <dmConnReset+0xd4>)
   15040:	2200      	movs	r2, #0
   15042:	751a      	strb	r2, [r3, #20]
  dmCb.connAddrType = DM_ADDR_PUBLIC;
   15044:	4b05      	ldr	r3, [pc, #20]	; (1505c <dmConnReset+0xd4>)
   15046:	2200      	movs	r2, #0
   15048:	735a      	strb	r2, [r3, #13]
}
   1504a:	bf00      	nop
   1504c:	b005      	add	sp, #20
   1504e:	f85d fb04 	ldr.w	pc, [sp], #4
   15052:	bf00      	nop
   15054:	10004420 	.word	0x10004420
   15058:	000283e8 	.word	0x000283e8
   1505c:	100044f4 	.word	0x100044f4

00015060 <dmConnMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnMsgHandler(wsfMsgHdr_t *pMsg)
{
   15060:	b500      	push	{lr}
   15062:	b085      	sub	sp, #20
   15064:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   15066:	9b01      	ldr	r3, [sp, #4]
   15068:	881b      	ldrh	r3, [r3, #0]
   1506a:	b2db      	uxtb	r3, r3
   1506c:	4618      	mov	r0, r3
   1506e:	f7ff fe27 	bl	14cc0 <dmConnCcbById>
   15072:	9003      	str	r0, [sp, #12]
   15074:	9b03      	ldr	r3, [sp, #12]
   15076:	2b00      	cmp	r3, #0
   15078:	d003      	beq.n	15082 <dmConnMsgHandler+0x22>
  {
    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
   1507a:	9901      	ldr	r1, [sp, #4]
   1507c:	9803      	ldr	r0, [sp, #12]
   1507e:	f000 fe39 	bl	15cf4 <dmConnSmExecute>
  }
}
   15082:	bf00      	nop
   15084:	b005      	add	sp, #20
   15086:	f85d fb04 	ldr.w	pc, [sp], #4

0001508a <dmConnHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnHciHandler(hciEvt_t *pEvent)
{
   1508a:	b500      	push	{lr}
   1508c:	b085      	sub	sp, #20
   1508e:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* handle special cases for connection complete event */
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   15090:	9b01      	ldr	r3, [sp, #4]
   15092:	789b      	ldrb	r3, [r3, #2]
   15094:	2b01      	cmp	r3, #1
   15096:	d003      	beq.n	150a0 <dmConnHciHandler+0x16>
      (pEvent->hdr.event == HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT))
   15098:	9b01      	ldr	r3, [sp, #4]
   1509a:	789b      	ldrb	r3, [r3, #2]
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   1509c:	2b02      	cmp	r3, #2
   1509e:	d128      	bne.n	150f2 <dmConnHciHandler+0x68>
  {
    /* first check if ccb exists for this bd addr */
    if ((pCcb = dmConnCcbByBdAddr(pEvent->leConnCmpl.peerAddr)) == NULL)
   150a0:	9b01      	ldr	r3, [sp, #4]
   150a2:	330a      	adds	r3, #10
   150a4:	4618      	mov	r0, r3
   150a6:	f7ff fde1 	bl	14c6c <dmConnCcbByBdAddr>
   150aa:	9003      	str	r0, [sp, #12]
   150ac:	9b03      	ldr	r3, [sp, #12]
   150ae:	2b00      	cmp	r3, #0
   150b0:	d113      	bne.n	150da <dmConnHciHandler+0x50>
    {
      /* check for special case states */
      if ((pCcb = dmConnCmplStates()) == NULL)
   150b2:	f7ff fd3d 	bl	14b30 <dmConnCmplStates>
   150b6:	9003      	str	r0, [sp, #12]
   150b8:	9b03      	ldr	r3, [sp, #12]
   150ba:	2b00      	cmp	r3, #0
   150bc:	d10d      	bne.n	150da <dmConnHciHandler+0x50>
      {
        /* else default case for slave, allocate new ccb */
        if ((pEvent->hdr.status == HCI_SUCCESS) && (pEvent->leConnCmpl.role == HCI_ROLE_SLAVE))
   150be:	9b01      	ldr	r3, [sp, #4]
   150c0:	78db      	ldrb	r3, [r3, #3]
   150c2:	2b00      	cmp	r3, #0
   150c4:	d109      	bne.n	150da <dmConnHciHandler+0x50>
   150c6:	9b01      	ldr	r3, [sp, #4]
   150c8:	7a1b      	ldrb	r3, [r3, #8]
   150ca:	2b01      	cmp	r3, #1
   150cc:	d105      	bne.n	150da <dmConnHciHandler+0x50>
        {
          pCcb = dmConnCcbAlloc(pEvent->leConnCmpl.peerAddr);
   150ce:	9b01      	ldr	r3, [sp, #4]
   150d0:	330a      	adds	r3, #10
   150d2:	4618      	mov	r0, r3
   150d4:	f7ff fd5a 	bl	14b8c <dmConnCcbAlloc>
   150d8:	9003      	str	r0, [sp, #12]
        }
      }
    }

    /* translate HCI event to state machine event */
    if (pEvent->hdr.status == HCI_SUCCESS)
   150da:	9b01      	ldr	r3, [sp, #4]
   150dc:	78db      	ldrb	r3, [r3, #3]
   150de:	2b00      	cmp	r3, #0
   150e0:	d103      	bne.n	150ea <dmConnHciHandler+0x60>
    {
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
   150e2:	9b01      	ldr	r3, [sp, #4]
   150e4:	2238      	movs	r2, #56	; 0x38
   150e6:	709a      	strb	r2, [r3, #2]
    if (pEvent->hdr.status == HCI_SUCCESS)
   150e8:	e00f      	b.n	1510a <dmConnHciHandler+0x80>
    }
    else
    {
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
   150ea:	9b01      	ldr	r3, [sp, #4]
   150ec:	2237      	movs	r2, #55	; 0x37
   150ee:	709a      	strb	r2, [r3, #2]
    if (pEvent->hdr.status == HCI_SUCCESS)
   150f0:	e00b      	b.n	1510a <dmConnHciHandler+0x80>
    }
  }
  else
  {
    pCcb = dmConnCcbByHandle(pEvent->hdr.param);
   150f2:	9b01      	ldr	r3, [sp, #4]
   150f4:	881b      	ldrh	r3, [r3, #0]
   150f6:	4618      	mov	r0, r3
   150f8:	f7ff fd90 	bl	14c1c <dmConnCcbByHandle>
   150fc:	9003      	str	r0, [sp, #12]

    /* translate HCI event to state machine message */
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
   150fe:	9b01      	ldr	r3, [sp, #4]
   15100:	789b      	ldrb	r3, [r3, #2]
   15102:	3336      	adds	r3, #54	; 0x36
   15104:	b2da      	uxtb	r2, r3
   15106:	9b01      	ldr	r3, [sp, #4]
   15108:	709a      	strb	r2, [r3, #2]
  }

  /* if ccb found */
  if (pCcb != NULL)
   1510a:	9b03      	ldr	r3, [sp, #12]
   1510c:	2b00      	cmp	r3, #0
   1510e:	d008      	beq.n	15122 <dmConnHciHandler+0x98>
  {
    /* set conn id */
    pEvent->hdr.param = pCcb->connId;
   15110:	9b03      	ldr	r3, [sp, #12]
   15112:	7c1b      	ldrb	r3, [r3, #16]
   15114:	b29a      	uxth	r2, r3
   15116:	9b01      	ldr	r3, [sp, #4]
   15118:	801a      	strh	r2, [r3, #0]

    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
   1511a:	9901      	ldr	r1, [sp, #4]
   1511c:	9803      	ldr	r0, [sp, #12]
   1511e:	f000 fde9 	bl	15cf4 <dmConnSmExecute>
  }
}
   15122:	bf00      	nop
   15124:	b005      	add	sp, #20
   15126:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001512c <dmConn2MsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2MsgHandler(wsfMsgHdr_t *pMsg)
{
   1512c:	b570      	push	{r4, r5, r6, lr}
   1512e:	b08a      	sub	sp, #40	; 0x28
   15130:	9005      	str	r0, [sp, #20]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   15132:	9b05      	ldr	r3, [sp, #20]
   15134:	881b      	ldrh	r3, [r3, #0]
   15136:	b2db      	uxtb	r3, r3
   15138:	4618      	mov	r0, r3
   1513a:	f7ff fdc1 	bl	14cc0 <dmConnCcbById>
   1513e:	9009      	str	r0, [sp, #36]	; 0x24
   15140:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15142:	2b00      	cmp	r3, #0
   15144:	d052      	beq.n	151ec <dmConn2MsgHandler+0xc0>
  {
    dmConn2Msg_t *pConn2Msg = (dmConn2Msg_t *) pMsg;
   15146:	9b05      	ldr	r3, [sp, #20]
   15148:	9308      	str	r3, [sp, #32]

    /* handle incoming message */
    switch (pMsg->event)
   1514a:	9b05      	ldr	r3, [sp, #20]
   1514c:	789b      	ldrb	r3, [r3, #2]
   1514e:	3b41      	subs	r3, #65	; 0x41
   15150:	2b04      	cmp	r3, #4
   15152:	d84d      	bhi.n	151f0 <dmConn2MsgHandler+0xc4>
   15154:	a201      	add	r2, pc, #4	; (adr r2, 1515c <dmConn2MsgHandler+0x30>)
   15156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1515a:	bf00      	nop
   1515c:	00015171 	.word	0x00015171
   15160:	0001517d 	.word	0x0001517d
   15164:	000151b1 	.word	0x000151b1
   15168:	000151c3 	.word	0x000151c3
   1516c:	000151db 	.word	0x000151db
    {
      case DM_CONN_MSG_API_READ_RSSI:
        HciReadRssiCmd(pCcb->handle);
   15170:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15172:	899b      	ldrh	r3, [r3, #12]
   15174:	4618      	mov	r0, r3
   15176:	f7f8 fa68 	bl	d64a <HciReadRssiCmd>
        break;
   1517a:	e03a      	b.n	151f2 <dmConn2MsgHandler+0xc6>

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY:
        {
          hciConnSpec_t *pConnSpec = &pConn2Msg->apiRemConnParamReqReply.connSpec;
   1517c:	9b08      	ldr	r3, [sp, #32]
   1517e:	3304      	adds	r3, #4
   15180:	9306      	str	r3, [sp, #24]

          HciLeRemoteConnParamReqReply(pCcb->handle, pConnSpec->connIntervalMin,
   15182:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15184:	8998      	ldrh	r0, [r3, #12]
   15186:	9b06      	ldr	r3, [sp, #24]
   15188:	881c      	ldrh	r4, [r3, #0]
   1518a:	9b06      	ldr	r3, [sp, #24]
   1518c:	885d      	ldrh	r5, [r3, #2]
   1518e:	9b06      	ldr	r3, [sp, #24]
   15190:	889e      	ldrh	r6, [r3, #4]
   15192:	9b06      	ldr	r3, [sp, #24]
   15194:	88db      	ldrh	r3, [r3, #6]
   15196:	9a06      	ldr	r2, [sp, #24]
   15198:	8912      	ldrh	r2, [r2, #8]
   1519a:	9906      	ldr	r1, [sp, #24]
   1519c:	8949      	ldrh	r1, [r1, #10]
   1519e:	9102      	str	r1, [sp, #8]
   151a0:	9201      	str	r2, [sp, #4]
   151a2:	9300      	str	r3, [sp, #0]
   151a4:	4633      	mov	r3, r6
   151a6:	462a      	mov	r2, r5
   151a8:	4621      	mov	r1, r4
   151aa:	f7f7 fe70 	bl	ce8e <HciLeRemoteConnParamReqReply>
                                       pConnSpec->connIntervalMax, pConnSpec->connLatency,
                                       pConnSpec->supTimeout, pConnSpec->minCeLen,
                                       pConnSpec->maxCeLen);
        }
        break;
   151ae:	e020      	b.n	151f2 <dmConn2MsgHandler+0xc6>

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY:
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
   151b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   151b2:	899a      	ldrh	r2, [r3, #12]
   151b4:	9b08      	ldr	r3, [sp, #32]
   151b6:	791b      	ldrb	r3, [r3, #4]
   151b8:	4619      	mov	r1, r3
   151ba:	4610      	mov	r0, r2
   151bc:	f7f7 fefb 	bl	cfb6 <HciLeRemoteConnParamReqNegReply>
        break;
   151c0:	e017      	b.n	151f2 <dmConn2MsgHandler+0xc6>

      case DM_CONN_MSG_API_SET_DATA_LEN:
        {
          dmConnApiSetDataLen_t *pDataLen = &pConn2Msg->apiSetDataLen;
   151c2:	9b08      	ldr	r3, [sp, #32]
   151c4:	9307      	str	r3, [sp, #28]

          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
   151c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   151c8:	8998      	ldrh	r0, [r3, #12]
   151ca:	9b07      	ldr	r3, [sp, #28]
   151cc:	8899      	ldrh	r1, [r3, #4]
   151ce:	9b07      	ldr	r3, [sp, #28]
   151d0:	88db      	ldrh	r3, [r3, #6]
   151d2:	461a      	mov	r2, r3
   151d4:	f7f7 ff21 	bl	d01a <HciLeSetDataLen>
        }
        break;
   151d8:	e00b      	b.n	151f2 <dmConn2MsgHandler+0xc6>

      case DM_CONN_MSG_API_WRITE_AUTH_TO:
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
   151da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   151dc:	899a      	ldrh	r2, [r3, #12]
   151de:	9b08      	ldr	r3, [sp, #32]
   151e0:	889b      	ldrh	r3, [r3, #4]
   151e2:	4619      	mov	r1, r3
   151e4:	4610      	mov	r0, r2
   151e6:	f7f8 fac1 	bl	d76c <HciWriteAuthPayloadTimeout>
        break;
   151ea:	e002      	b.n	151f2 <dmConn2MsgHandler+0xc6>

      default:
        /* should never get here */
        break;
    }
  }
   151ec:	bf00      	nop
   151ee:	e000      	b.n	151f2 <dmConn2MsgHandler+0xc6>
        break;
   151f0:	bf00      	nop
}
   151f2:	bf00      	nop
   151f4:	b00a      	add	sp, #40	; 0x28
   151f6:	bd70      	pop	{r4, r5, r6, pc}

000151f8 <dmConn2HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2HciHandler(hciEvt_t *pEvent)
{
   151f8:	b500      	push	{lr}
   151fa:	b085      	sub	sp, #20
   151fc:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   151fe:	9b01      	ldr	r3, [sp, #4]
   15200:	881b      	ldrh	r3, [r3, #0]
   15202:	4618      	mov	r0, r3
   15204:	f7ff fd0a 	bl	14c1c <dmConnCcbByHandle>
   15208:	9003      	str	r0, [sp, #12]
   1520a:	9b03      	ldr	r3, [sp, #12]
   1520c:	2b00      	cmp	r3, #0
   1520e:	d06e      	beq.n	152ee <dmConn2HciHandler+0xf6>
  {
    /* handle incoming event */
    switch (pEvent->hdr.event)
   15210:	9b01      	ldr	r3, [sp, #4]
   15212:	789b      	ldrb	r3, [r3, #2]
   15214:	3b07      	subs	r3, #7
   15216:	2b21      	cmp	r3, #33	; 0x21
   15218:	d86b      	bhi.n	152f2 <dmConn2HciHandler+0xfa>
   1521a:	a201      	add	r2, pc, #4	; (adr r2, 15220 <dmConn2HciHandler+0x28>)
   1521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15220:	000152a9 	.word	0x000152a9
   15224:	000152f3 	.word	0x000152f3
   15228:	000152f3 	.word	0x000152f3
   1522c:	000152e5 	.word	0x000152e5
   15230:	000152db 	.word	0x000152db
   15234:	000152f3 	.word	0x000152f3
   15238:	000152f3 	.word	0x000152f3
   1523c:	000152f3 	.word	0x000152f3
   15240:	000152f3 	.word	0x000152f3
   15244:	000152f3 	.word	0x000152f3
   15248:	000152f3 	.word	0x000152f3
   1524c:	000152f3 	.word	0x000152f3
   15250:	000152f3 	.word	0x000152f3
   15254:	000152f3 	.word	0x000152f3
   15258:	000152f3 	.word	0x000152f3
   1525c:	000152f3 	.word	0x000152f3
   15260:	000152f3 	.word	0x000152f3
   15264:	000152f3 	.word	0x000152f3
   15268:	000152f3 	.word	0x000152f3
   1526c:	000152f3 	.word	0x000152f3
   15270:	000152f3 	.word	0x000152f3
   15274:	000152f3 	.word	0x000152f3
   15278:	000152f3 	.word	0x000152f3
   1527c:	000152f3 	.word	0x000152f3
   15280:	000152f3 	.word	0x000152f3
   15284:	000152f3 	.word	0x000152f3
   15288:	000152f3 	.word	0x000152f3
   1528c:	000152f3 	.word	0x000152f3
   15290:	000152b3 	.word	0x000152b3
   15294:	000152bd 	.word	0x000152bd
   15298:	000152f3 	.word	0x000152f3
   1529c:	000152f3 	.word	0x000152f3
   152a0:	000152c7 	.word	0x000152c7
   152a4:	000152d1 	.word	0x000152d1
    {
      case HCI_READ_RSSI_CMD_CMPL_CBACK_EVT:
        dmConn2ActRssiRead(pCcb, pEvent);
   152a8:	9901      	ldr	r1, [sp, #4]
   152aa:	9803      	ldr	r0, [sp, #12]
   152ac:	f000 f826 	bl	152fc <dmConn2ActRssiRead>
        break;
   152b0:	e020      	b.n	152f4 <dmConn2HciHandler+0xfc>

      case HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT:
        dmConn2ActRemoteConnParamReq(pCcb, pEvent);
   152b2:	9901      	ldr	r1, [sp, #4]
   152b4:	9803      	ldr	r0, [sp, #12]
   152b6:	f000 f84b 	bl	15350 <dmConn2ActRemoteConnParamReq>
        break;
   152ba:	e01b      	b.n	152f4 <dmConn2HciHandler+0xfc>

      case HCI_LE_DATA_LEN_CHANGE_CBACK_EVT:
        dmConn2ActDataLenChange(pCcb, pEvent);
   152bc:	9901      	ldr	r1, [sp, #4]
   152be:	9803      	ldr	r0, [sp, #12]
   152c0:	f000 f876 	bl	153b0 <dmConn2ActDataLenChange>
        break;
   152c4:	e016      	b.n	152f4 <dmConn2HciHandler+0xfc>

      case HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT:
        dmConn2ActWriteAuthToCmpl(pCcb, pEvent);
   152c6:	9901      	ldr	r1, [sp, #4]
   152c8:	9803      	ldr	r0, [sp, #12]
   152ca:	f000 f8a1 	bl	15410 <dmConn2ActWriteAuthToCmpl>
        break;
   152ce:	e011      	b.n	152f4 <dmConn2HciHandler+0xfc>

      case HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT:
        dmConn2ActAuthToExpired(pCcb, pEvent);
   152d0:	9901      	ldr	r1, [sp, #4]
   152d2:	9803      	ldr	r0, [sp, #12]
   152d4:	f000 f8c0 	bl	15458 <dmConn2ActAuthToExpired>
        break;
   152d8:	e00c      	b.n	152f4 <dmConn2HciHandler+0xfc>

      case HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT:
        dmConn2ActReadRemoteFeaturesCmpl(pCcb, pEvent);
   152da:	9901      	ldr	r1, [sp, #4]
   152dc:	9803      	ldr	r0, [sp, #12]
   152de:	f000 f8db 	bl	15498 <dmConn2ActReadRemoteFeaturesCmpl>
        break;
   152e2:	e007      	b.n	152f4 <dmConn2HciHandler+0xfc>

      case HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT:
        dmConn2ActReadRemoteVerInfoCmpl(pCcb, pEvent);
   152e4:	9901      	ldr	r1, [sp, #4]
   152e6:	9803      	ldr	r0, [sp, #12]
   152e8:	f000 f916 	bl	15518 <dmConn2ActReadRemoteVerInfoCmpl>
        break;
   152ec:	e002      	b.n	152f4 <dmConn2HciHandler+0xfc>

      default:
        /* should never get here */
        break;
    }
  }
   152ee:	bf00      	nop
   152f0:	e000      	b.n	152f4 <dmConn2HciHandler+0xfc>
        break;
   152f2:	bf00      	nop
}
   152f4:	bf00      	nop
   152f6:	b005      	add	sp, #20
   152f8:	f85d fb04 	ldr.w	pc, [sp], #4

000152fc <dmConn2ActRssiRead>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActRssiRead(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   152fc:	b500      	push	{lr}
   152fe:	b087      	sub	sp, #28
   15300:	9001      	str	r0, [sp, #4]
   15302:	9100      	str	r1, [sp, #0]
  hciReadRssiCmdCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
   15304:	2339      	movs	r3, #57	; 0x39
   15306:	f88d 300e 	strb.w	r3, [sp, #14]
  evt.hdr.param = pCcb->connId;
   1530a:	9b01      	ldr	r3, [sp, #4]
   1530c:	7c1b      	ldrb	r3, [r3, #16]
   1530e:	b29b      	uxth	r3, r3
   15310:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
   15314:	9b00      	ldr	r3, [sp, #0]
   15316:	791b      	ldrb	r3, [r3, #4]
   15318:	f88d 300f 	strb.w	r3, [sp, #15]
   1531c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15320:	f88d 3010 	strb.w	r3, [sp, #16]
  evt.handle = pCcb->handle;
   15324:	9b01      	ldr	r3, [sp, #4]
   15326:	899b      	ldrh	r3, [r3, #12]
   15328:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
   1532c:	9b00      	ldr	r3, [sp, #0]
   1532e:	f993 3008 	ldrsb.w	r3, [r3, #8]
   15332:	f88d 3014 	strb.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   15336:	4b05      	ldr	r3, [pc, #20]	; (1534c <dmConn2ActRssiRead+0x50>)
   15338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1533c:	aa03      	add	r2, sp, #12
   1533e:	4610      	mov	r0, r2
   15340:	4798      	blx	r3
}
   15342:	bf00      	nop
   15344:	b007      	add	sp, #28
   15346:	f85d fb04 	ldr.w	pc, [sp], #4
   1534a:	bf00      	nop
   1534c:	10004420 	.word	0x10004420

00015350 <dmConn2ActRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActRemoteConnParamReq(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15350:	b500      	push	{lr}
   15352:	b087      	sub	sp, #28
   15354:	9001      	str	r0, [sp, #4]
   15356:	9100      	str	r1, [sp, #0]
  hciLeRemConnParamReqEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_REM_CONN_PARAM_REQ_IND;
   15358:	2340      	movs	r3, #64	; 0x40
   1535a:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   1535e:	9b01      	ldr	r3, [sp, #4]
   15360:	7c1b      	ldrb	r3, [r3, #16]
   15362:	b29b      	uxth	r3, r3
   15364:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   15368:	2300      	movs	r3, #0
   1536a:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pCcb->handle;
   1536e:	9b01      	ldr	r3, [sp, #4]
   15370:	899b      	ldrh	r3, [r3, #12]
   15372:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.intervalMin = pEvent->leRemConnParamReq.intervalMin;
   15376:	9b00      	ldr	r3, [sp, #0]
   15378:	88db      	ldrh	r3, [r3, #6]
   1537a:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.intervalMax = pEvent->leRemConnParamReq.intervalMax;
   1537e:	9b00      	ldr	r3, [sp, #0]
   15380:	891b      	ldrh	r3, [r3, #8]
   15382:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.latency = pEvent->leRemConnParamReq.latency;
   15386:	9b00      	ldr	r3, [sp, #0]
   15388:	895b      	ldrh	r3, [r3, #10]
   1538a:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.timeout = pEvent->leRemConnParamReq.timeout;
   1538e:	9b00      	ldr	r3, [sp, #0]
   15390:	899b      	ldrh	r3, [r3, #12]
   15392:	f8ad 3014 	strh.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   15396:	4b05      	ldr	r3, [pc, #20]	; (153ac <dmConn2ActRemoteConnParamReq+0x5c>)
   15398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1539c:	aa02      	add	r2, sp, #8
   1539e:	4610      	mov	r0, r2
   153a0:	4798      	blx	r3
}
   153a2:	bf00      	nop
   153a4:	b007      	add	sp, #28
   153a6:	f85d fb04 	ldr.w	pc, [sp], #4
   153aa:	bf00      	nop
   153ac:	10004420 	.word	0x10004420

000153b0 <dmConn2ActDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActDataLenChange(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   153b0:	b500      	push	{lr}
   153b2:	b087      	sub	sp, #28
   153b4:	9001      	str	r0, [sp, #4]
   153b6:	9100      	str	r1, [sp, #0]
  hciLeDataLenChangeEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
   153b8:	2341      	movs	r3, #65	; 0x41
   153ba:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   153be:	9b01      	ldr	r3, [sp, #4]
   153c0:	7c1b      	ldrb	r3, [r3, #16]
   153c2:	b29b      	uxth	r3, r3
   153c4:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   153c8:	2300      	movs	r3, #0
   153ca:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pCcb->handle;
   153ce:	9b01      	ldr	r3, [sp, #4]
   153d0:	899b      	ldrh	r3, [r3, #12]
   153d2:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
   153d6:	9b00      	ldr	r3, [sp, #0]
   153d8:	88db      	ldrh	r3, [r3, #6]
   153da:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
   153de:	9b00      	ldr	r3, [sp, #0]
   153e0:	891b      	ldrh	r3, [r3, #8]
   153e2:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
   153e6:	9b00      	ldr	r3, [sp, #0]
   153e8:	895b      	ldrh	r3, [r3, #10]
   153ea:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
   153ee:	9b00      	ldr	r3, [sp, #0]
   153f0:	899b      	ldrh	r3, [r3, #12]
   153f2:	f8ad 3014 	strh.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   153f6:	4b05      	ldr	r3, [pc, #20]	; (1540c <dmConn2ActDataLenChange+0x5c>)
   153f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   153fc:	aa02      	add	r2, sp, #8
   153fe:	4610      	mov	r0, r2
   15400:	4798      	blx	r3
}
   15402:	bf00      	nop
   15404:	b007      	add	sp, #28
   15406:	f85d fb04 	ldr.w	pc, [sp], #4
   1540a:	bf00      	nop
   1540c:	10004420 	.word	0x10004420

00015410 <dmConn2ActWriteAuthToCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActWriteAuthToCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15410:	b500      	push	{lr}
   15412:	b085      	sub	sp, #20
   15414:	9001      	str	r0, [sp, #4]
   15416:	9100      	str	r1, [sp, #0]
  hciWriteAuthPayloadToCmdCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_WRITE_AUTH_TO_IND;
   15418:	2342      	movs	r3, #66	; 0x42
   1541a:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   1541e:	9b01      	ldr	r3, [sp, #4]
   15420:	7c1b      	ldrb	r3, [r3, #16]
   15422:	b29b      	uxth	r3, r3
   15424:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   15428:	2300      	movs	r3, #0
   1542a:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
   1542e:	9b00      	ldr	r3, [sp, #0]
   15430:	88db      	ldrh	r3, [r3, #6]
   15432:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
   15436:	9b00      	ldr	r3, [sp, #0]
   15438:	791b      	ldrb	r3, [r3, #4]
   1543a:	f88d 300c 	strb.w	r3, [sp, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1543e:	4b05      	ldr	r3, [pc, #20]	; (15454 <dmConn2ActWriteAuthToCmpl+0x44>)
   15440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15444:	aa02      	add	r2, sp, #8
   15446:	4610      	mov	r0, r2
   15448:	4798      	blx	r3
}
   1544a:	bf00      	nop
   1544c:	b005      	add	sp, #20
   1544e:	f85d fb04 	ldr.w	pc, [sp], #4
   15452:	bf00      	nop
   15454:	10004420 	.word	0x10004420

00015458 <dmConn2ActAuthToExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActAuthToExpired(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15458:	b500      	push	{lr}
   1545a:	b085      	sub	sp, #20
   1545c:	9001      	str	r0, [sp, #4]
   1545e:	9100      	str	r1, [sp, #0]
  hciAuthPayloadToExpiredEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
   15460:	2343      	movs	r3, #67	; 0x43
   15462:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   15466:	9b01      	ldr	r3, [sp, #4]
   15468:	7c1b      	ldrb	r3, [r3, #16]
   1546a:	b29b      	uxth	r3, r3
   1546c:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   15470:	2300      	movs	r3, #0
   15472:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.handle = pEvent->authPayloadToExpired.handle;
   15476:	9b00      	ldr	r3, [sp, #0]
   15478:	889b      	ldrh	r3, [r3, #4]
   1547a:	f8ad 300c 	strh.w	r3, [sp, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1547e:	4b05      	ldr	r3, [pc, #20]	; (15494 <dmConn2ActAuthToExpired+0x3c>)
   15480:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15484:	aa02      	add	r2, sp, #8
   15486:	4610      	mov	r0, r2
   15488:	4798      	blx	r3
}
   1548a:	bf00      	nop
   1548c:	b005      	add	sp, #20
   1548e:	f85d fb04 	ldr.w	pc, [sp], #4
   15492:	bf00      	nop
   15494:	10004420 	.word	0x10004420

00015498 <dmConn2ActReadRemoteFeaturesCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActReadRemoteFeaturesCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15498:	b500      	push	{lr}
   1549a:	b087      	sub	sp, #28
   1549c:	9001      	str	r0, [sp, #4]
   1549e:	9100      	str	r1, [sp, #0]
  hciLeReadRemoteFeatCmplEvt_t evt;

  /* Save the features */
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
   154a0:	9b00      	ldr	r3, [sp, #0]
   154a2:	7a1b      	ldrb	r3, [r3, #8]
   154a4:	461a      	mov	r2, r3
   154a6:	9b00      	ldr	r3, [sp, #0]
   154a8:	7a5b      	ldrb	r3, [r3, #9]
   154aa:	021b      	lsls	r3, r3, #8
   154ac:	441a      	add	r2, r3
   154ae:	9b00      	ldr	r3, [sp, #0]
   154b0:	7a9b      	ldrb	r3, [r3, #10]
   154b2:	041b      	lsls	r3, r3, #16
   154b4:	441a      	add	r2, r3
   154b6:	9b00      	ldr	r3, [sp, #0]
   154b8:	7adb      	ldrb	r3, [r3, #11]
   154ba:	061b      	lsls	r3, r3, #24
   154bc:	441a      	add	r2, r3
   154be:	9b01      	ldr	r3, [sp, #4]
   154c0:	629a      	str	r2, [r3, #40]	; 0x28
  pCcb->featuresPresent = TRUE;
   154c2:	9b01      	ldr	r3, [sp, #4]
   154c4:	2201      	movs	r2, #1
   154c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* call callback */
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
   154ca:	2357      	movs	r3, #87	; 0x57
   154cc:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   154d0:	9b01      	ldr	r3, [sp, #4]
   154d2:	7c1b      	ldrb	r3, [r3, #16]
   154d4:	b29b      	uxth	r3, r3
   154d6:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   154da:	2300      	movs	r3, #0
   154dc:	f88d 300b 	strb.w	r3, [sp, #11]

  evt.status = pEvent->leReadRemoteFeatCmpl.status;
   154e0:	9b00      	ldr	r3, [sp, #0]
   154e2:	791b      	ldrb	r3, [r3, #4]
   154e4:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
   154e8:	9b00      	ldr	r3, [sp, #0]
   154ea:	88db      	ldrh	r3, [r3, #6]
   154ec:	f8ad 300e 	strh.w	r3, [sp, #14]
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   154f0:	9b00      	ldr	r3, [sp, #0]
   154f2:	f103 0208 	add.w	r2, r3, #8
   154f6:	ab04      	add	r3, sp, #16
   154f8:	6810      	ldr	r0, [r2, #0]
   154fa:	6851      	ldr	r1, [r2, #4]
   154fc:	c303      	stmia	r3!, {r0, r1}

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   154fe:	4b05      	ldr	r3, [pc, #20]	; (15514 <dmConn2ActReadRemoteFeaturesCmpl+0x7c>)
   15500:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15504:	aa02      	add	r2, sp, #8
   15506:	4610      	mov	r0, r2
   15508:	4798      	blx	r3
}
   1550a:	bf00      	nop
   1550c:	b007      	add	sp, #28
   1550e:	f85d fb04 	ldr.w	pc, [sp], #4
   15512:	bf00      	nop
   15514:	10004420 	.word	0x10004420

00015518 <dmConn2ActReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConn2ActReadRemoteVerInfoCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
   15518:	b500      	push	{lr}
   1551a:	b087      	sub	sp, #28
   1551c:	9001      	str	r0, [sp, #4]
   1551e:	9100      	str	r1, [sp, #0]
  hciReadRemoteVerInfoCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
   15520:	2358      	movs	r3, #88	; 0x58
   15522:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   15526:	9b01      	ldr	r3, [sp, #4]
   15528:	7c1b      	ldrb	r3, [r3, #16]
   1552a:	b29b      	uxth	r3, r3
   1552c:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = HCI_SUCCESS;
   15530:	2300      	movs	r3, #0
   15532:	f88d 300b 	strb.w	r3, [sp, #11]

  evt.status = pEvent->readRemoteVerInfoCmpl.status;
   15536:	9b00      	ldr	r3, [sp, #0]
   15538:	791b      	ldrb	r3, [r3, #4]
   1553a:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
   1553e:	9b00      	ldr	r3, [sp, #0]
   15540:	88db      	ldrh	r3, [r3, #6]
   15542:	f8ad 300e 	strh.w	r3, [sp, #14]
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
   15546:	9b00      	ldr	r3, [sp, #0]
   15548:	7a1b      	ldrb	r3, [r3, #8]
   1554a:	f88d 3010 	strb.w	r3, [sp, #16]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
   1554e:	9b00      	ldr	r3, [sp, #0]
   15550:	895b      	ldrh	r3, [r3, #10]
   15552:	f8ad 3012 	strh.w	r3, [sp, #18]
  evt.subversion = pEvent->readRemoteVerInfoCmpl.subversion;
   15556:	9b00      	ldr	r3, [sp, #0]
   15558:	899b      	ldrh	r3, [r3, #12]
   1555a:	f8ad 3014 	strh.w	r3, [sp, #20]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1555e:	4b05      	ldr	r3, [pc, #20]	; (15574 <dmConn2ActReadRemoteVerInfoCmpl+0x5c>)
   15560:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15564:	aa02      	add	r2, sp, #8
   15566:	4610      	mov	r0, r2
   15568:	4798      	blx	r3
}
   1556a:	bf00      	nop
   1556c:	b007      	add	sp, #28
   1556e:	f85d fb04 	ldr.w	pc, [sp], #4
   15572:	bf00      	nop
   15574:	10004420 	.word	0x10004420

00015578 <DmConnInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnInit(void)
{
  dmFcnIfTbl[DM_ID_CONN] = (dmFcnIf_t *) &dmConnFcnIf;
   15578:	4b05      	ldr	r3, [pc, #20]	; (15590 <DmConnInit+0x18>)
   1557a:	4a06      	ldr	r2, [pc, #24]	; (15594 <DmConnInit+0x1c>)
   1557c:	60da      	str	r2, [r3, #12]
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
   1557e:	4b04      	ldr	r3, [pc, #16]	; (15590 <DmConnInit+0x18>)
   15580:	4a05      	ldr	r2, [pc, #20]	; (15598 <DmConnInit+0x20>)
   15582:	611a      	str	r2, [r3, #16]
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
   15584:	4b05      	ldr	r3, [pc, #20]	; (1559c <DmConnInit+0x24>)
   15586:	4a06      	ldr	r2, [pc, #24]	; (155a0 <DmConnInit+0x28>)
   15588:	601a      	str	r2, [r3, #0]
}
   1558a:	bf00      	nop
   1558c:	4770      	bx	lr
   1558e:	bf00      	nop
   15590:	10002b0c 	.word	0x10002b0c
   15594:	0002840c 	.word	0x0002840c
   15598:	00028418 	.word	0x00028418
   1559c:	100044e4 	.word	0x100044e4
   155a0:	000283f4 	.word	0x000283f4

000155a4 <DmConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnRegister(uint8_t clientId, dmCback_t cback)
{
   155a4:	b500      	push	{lr}
   155a6:	b083      	sub	sp, #12
   155a8:	4603      	mov	r3, r0
   155aa:	9100      	str	r1, [sp, #0]
   155ac:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT(clientId < DM_CLIENT_ID_MAX);

  /* store callback */
  WsfTaskLock();
   155b0:	f00a fa2c 	bl	1fa0c <WsfTaskLock>
  dmConnCb.connCback[clientId] = cback;
   155b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   155b8:	4905      	ldr	r1, [pc, #20]	; (155d0 <DmConnRegister+0x2c>)
   155ba:	3324      	adds	r3, #36	; 0x24
   155bc:	9a00      	ldr	r2, [sp, #0]
   155be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  WsfTaskUnlock();
   155c2:	f00a fa28 	bl	1fa16 <WsfTaskUnlock>
}
   155c6:	bf00      	nop
   155c8:	b003      	add	sp, #12
   155ca:	f85d fb04 	ldr.w	pc, [sp], #4
   155ce:	bf00      	nop
   155d0:	10004420 	.word	0x10004420

000155d4 <DmConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnClose(uint8_t clientId, dmConnId_t connId, uint8_t reason)
{
   155d4:	b500      	push	{lr}
   155d6:	b085      	sub	sp, #20
   155d8:	4603      	mov	r3, r0
   155da:	f88d 3007 	strb.w	r3, [sp, #7]
   155de:	460b      	mov	r3, r1
   155e0:	f88d 3006 	strb.w	r3, [sp, #6]
   155e4:	4613      	mov	r3, r2
   155e6:	f88d 3005 	strb.w	r3, [sp, #5]
  dmConnApiClose_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiClose_t))) != NULL)
   155ea:	2006      	movs	r0, #6
   155ec:	f00a f982 	bl	1f8f4 <WsfMsgAlloc>
   155f0:	9003      	str	r0, [sp, #12]
   155f2:	9b03      	ldr	r3, [sp, #12]
   155f4:	2b00      	cmp	r3, #0
   155f6:	d019      	beq.n	1562c <DmConnClose+0x58>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_CLOSE;
   155f8:	9b03      	ldr	r3, [sp, #12]
   155fa:	2231      	movs	r2, #49	; 0x31
   155fc:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   155fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15602:	b29a      	uxth	r2, r3
   15604:	9b03      	ldr	r3, [sp, #12]
   15606:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.status = pMsg->reason = reason;
   15608:	9b03      	ldr	r3, [sp, #12]
   1560a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1560e:	711a      	strb	r2, [r3, #4]
   15610:	9b03      	ldr	r3, [sp, #12]
   15612:	791a      	ldrb	r2, [r3, #4]
   15614:	9b03      	ldr	r3, [sp, #12]
   15616:	70da      	strb	r2, [r3, #3]
    pMsg->clientId = clientId;
   15618:	9b03      	ldr	r3, [sp, #12]
   1561a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1561e:	715a      	strb	r2, [r3, #5]

    WsfMsgSend(dmCb.handlerId, pMsg);
   15620:	4b04      	ldr	r3, [pc, #16]	; (15634 <DmConnClose+0x60>)
   15622:	7b1b      	ldrb	r3, [r3, #12]
   15624:	9903      	ldr	r1, [sp, #12]
   15626:	4618      	mov	r0, r3
   15628:	f00a f988 	bl	1f93c <WsfMsgSend>
  }
}
   1562c:	bf00      	nop
   1562e:	b005      	add	sp, #20
   15630:	f85d fb04 	ldr.w	pc, [sp], #4
   15634:	100044f4 	.word	0x100044f4

00015638 <DmReadRemoteFeatures>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmReadRemoteFeatures(dmConnId_t connId)
{
   15638:	b500      	push	{lr}
   1563a:	b089      	sub	sp, #36	; 0x24
   1563c:	4603      	mov	r3, r0
   1563e:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbById(connId)) != NULL)
   15642:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15646:	4618      	mov	r0, r3
   15648:	f7ff fb3a 	bl	14cc0 <dmConnCcbById>
   1564c:	9007      	str	r0, [sp, #28]
   1564e:	9b07      	ldr	r3, [sp, #28]
   15650:	2b00      	cmp	r3, #0
   15652:	d044      	beq.n	156de <DmReadRemoteFeatures+0xa6>
  {
    if (pCcb->featuresPresent)
   15654:	9b07      	ldr	r3, [sp, #28]
   15656:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1565a:	2b00      	cmp	r3, #0
   1565c:	d03a      	beq.n	156d4 <DmReadRemoteFeatures+0x9c>
    {
      hciLeReadRemoteFeatCmplEvt_t evt;
      uint8_t *p = evt.features;
   1565e:	ab02      	add	r3, sp, #8
   15660:	3308      	adds	r3, #8
   15662:	9306      	str	r3, [sp, #24]

      /* call callback */
      evt.hdr.event = DM_REMOTE_FEATURES_IND;
   15664:	2357      	movs	r3, #87	; 0x57
   15666:	f88d 300a 	strb.w	r3, [sp, #10]
      evt.hdr.param = pCcb->connId;
   1566a:	9b07      	ldr	r3, [sp, #28]
   1566c:	7c1b      	ldrb	r3, [r3, #16]
   1566e:	b29b      	uxth	r3, r3
   15670:	f8ad 3008 	strh.w	r3, [sp, #8]
      evt.hdr.status = HCI_SUCCESS;
   15674:	2300      	movs	r3, #0
   15676:	f88d 300b 	strb.w	r3, [sp, #11]

      evt.status = HCI_SUCCESS;
   1567a:	2300      	movs	r3, #0
   1567c:	f88d 300c 	strb.w	r3, [sp, #12]
      evt.handle = pCcb->handle;
   15680:	9b07      	ldr	r3, [sp, #28]
   15682:	899b      	ldrh	r3, [r3, #12]
   15684:	f8ad 300e 	strh.w	r3, [sp, #14]
      UINT32_TO_BSTREAM(p, pCcb->features);
   15688:	9b07      	ldr	r3, [sp, #28]
   1568a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1568c:	9b06      	ldr	r3, [sp, #24]
   1568e:	1c5a      	adds	r2, r3, #1
   15690:	9206      	str	r2, [sp, #24]
   15692:	b2ca      	uxtb	r2, r1
   15694:	701a      	strb	r2, [r3, #0]
   15696:	9b07      	ldr	r3, [sp, #28]
   15698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1569a:	0a19      	lsrs	r1, r3, #8
   1569c:	9b06      	ldr	r3, [sp, #24]
   1569e:	1c5a      	adds	r2, r3, #1
   156a0:	9206      	str	r2, [sp, #24]
   156a2:	b2ca      	uxtb	r2, r1
   156a4:	701a      	strb	r2, [r3, #0]
   156a6:	9b07      	ldr	r3, [sp, #28]
   156a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   156aa:	0c19      	lsrs	r1, r3, #16
   156ac:	9b06      	ldr	r3, [sp, #24]
   156ae:	1c5a      	adds	r2, r3, #1
   156b0:	9206      	str	r2, [sp, #24]
   156b2:	b2ca      	uxtb	r2, r1
   156b4:	701a      	strb	r2, [r3, #0]
   156b6:	9b07      	ldr	r3, [sp, #28]
   156b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   156ba:	0e19      	lsrs	r1, r3, #24
   156bc:	9b06      	ldr	r3, [sp, #24]
   156be:	1c5a      	adds	r2, r3, #1
   156c0:	9206      	str	r2, [sp, #24]
   156c2:	b2ca      	uxtb	r2, r1
   156c4:	701a      	strb	r2, [r3, #0]

      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   156c6:	4b08      	ldr	r3, [pc, #32]	; (156e8 <DmReadRemoteFeatures+0xb0>)
   156c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   156cc:	aa02      	add	r2, sp, #8
   156ce:	4610      	mov	r0, r2
   156d0:	4798      	blx	r3
    {
      /* Request the remote features from the peer */
      HciLeReadRemoteFeatCmd(pCcb->handle);
    }
  }
}
   156d2:	e004      	b.n	156de <DmReadRemoteFeatures+0xa6>
      HciLeReadRemoteFeatCmd(pCcb->handle);
   156d4:	9b07      	ldr	r3, [sp, #28]
   156d6:	899b      	ldrh	r3, [r3, #12]
   156d8:	4618      	mov	r0, r3
   156da:	f7f7 fdea 	bl	d2b2 <HciLeReadRemoteFeatCmd>
}
   156de:	bf00      	nop
   156e0:	b009      	add	sp, #36	; 0x24
   156e2:	f85d fb04 	ldr.w	pc, [sp], #4
   156e6:	bf00      	nop
   156e8:	10004420 	.word	0x10004420

000156ec <DmConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnUpdate(dmConnId_t connId, hciConnSpec_t *pConnSpec)
{
   156ec:	b500      	push	{lr}
   156ee:	b085      	sub	sp, #20
   156f0:	4603      	mov	r3, r0
   156f2:	9100      	str	r1, [sp, #0]
   156f4:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnApiUpdate_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiUpdate_t))) != NULL)
   156f8:	2010      	movs	r0, #16
   156fa:	f00a f8fb 	bl	1f8f4 <WsfMsgAlloc>
   156fe:	9003      	str	r0, [sp, #12]
   15700:	9b03      	ldr	r3, [sp, #12]
   15702:	2b00      	cmp	r3, #0
   15704:	d01e      	beq.n	15744 <DmConnUpdate+0x58>
  {
    pMsg->hdr.event = (DmConnRole(connId) == DM_ROLE_MASTER) ?
   15706:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1570a:	4618      	mov	r0, r3
   1570c:	f000 f9e0 	bl	15ad0 <DmConnRole>
   15710:	4603      	mov	r3, r0
   15712:	2b00      	cmp	r3, #0
   15714:	d101      	bne.n	1571a <DmConnUpdate+0x2e>
   15716:	2233      	movs	r2, #51	; 0x33
   15718:	e000      	b.n	1571c <DmConnUpdate+0x30>
   1571a:	2234      	movs	r2, #52	; 0x34
   1571c:	9b03      	ldr	r3, [sp, #12]
   1571e:	709a      	strb	r2, [r3, #2]
                      DM_CONN_MSG_API_UPDATE_MASTER : DM_CONN_MSG_API_UPDATE_SLAVE;
    pMsg->hdr.param = connId;
   15720:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15724:	b29a      	uxth	r2, r3
   15726:	9b03      	ldr	r3, [sp, #12]
   15728:	801a      	strh	r2, [r3, #0]
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   1572a:	9b03      	ldr	r3, [sp, #12]
   1572c:	3304      	adds	r3, #4
   1572e:	220c      	movs	r2, #12
   15730:	9900      	ldr	r1, [sp, #0]
   15732:	4618      	mov	r0, r3
   15734:	f7f6 fce4 	bl	c100 <memcpy>

    WsfMsgSend(dmCb.handlerId, pMsg);
   15738:	4b04      	ldr	r3, [pc, #16]	; (1574c <DmConnUpdate+0x60>)
   1573a:	7b1b      	ldrb	r3, [r3, #12]
   1573c:	9903      	ldr	r1, [sp, #12]
   1573e:	4618      	mov	r0, r3
   15740:	f00a f8fc 	bl	1f93c <WsfMsgSend>
  }
}
   15744:	bf00      	nop
   15746:	b005      	add	sp, #20
   15748:	f85d fb04 	ldr.w	pc, [sp], #4
   1574c:	100044f4 	.word	0x100044f4

00015750 <DmRemoteConnParamReqReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void DmRemoteConnParamReqReply(dmConnId_t connId, hciConnSpec_t *pConnSpec)
{
   15750:	b500      	push	{lr}
   15752:	b085      	sub	sp, #20
   15754:	4603      	mov	r3, r0
   15756:	9100      	str	r1, [sp, #0]
   15758:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnApiRemConnParamReqReply_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqReply_t))) != NULL)
   1575c:	2010      	movs	r0, #16
   1575e:	f00a f8c9 	bl	1f8f4 <WsfMsgAlloc>
   15762:	9003      	str	r0, [sp, #12]
   15764:	9b03      	ldr	r3, [sp, #12]
   15766:	2b00      	cmp	r3, #0
   15768:	d014      	beq.n	15794 <DmRemoteConnParamReqReply+0x44>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY;
   1576a:	9b03      	ldr	r3, [sp, #12]
   1576c:	2242      	movs	r2, #66	; 0x42
   1576e:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   15770:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15774:	b29a      	uxth	r2, r3
   15776:	9b03      	ldr	r3, [sp, #12]
   15778:	801a      	strh	r2, [r3, #0]
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   1577a:	9b03      	ldr	r3, [sp, #12]
   1577c:	3304      	adds	r3, #4
   1577e:	220c      	movs	r2, #12
   15780:	9900      	ldr	r1, [sp, #0]
   15782:	4618      	mov	r0, r3
   15784:	f7f6 fcbc 	bl	c100 <memcpy>

    WsfMsgSend(dmCb.handlerId, pMsg);
   15788:	4b04      	ldr	r3, [pc, #16]	; (1579c <DmRemoteConnParamReqReply+0x4c>)
   1578a:	7b1b      	ldrb	r3, [r3, #12]
   1578c:	9903      	ldr	r1, [sp, #12]
   1578e:	4618      	mov	r0, r3
   15790:	f00a f8d4 	bl	1f93c <WsfMsgSend>
  }
}
   15794:	bf00      	nop
   15796:	b005      	add	sp, #20
   15798:	f85d fb04 	ldr.w	pc, [sp], #4
   1579c:	100044f4 	.word	0x100044f4

000157a0 <DmRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void DmRemoteConnParamReqNegReply(dmConnId_t connId, uint8_t reason)
{
   157a0:	b500      	push	{lr}
   157a2:	b085      	sub	sp, #20
   157a4:	4603      	mov	r3, r0
   157a6:	460a      	mov	r2, r1
   157a8:	f88d 3007 	strb.w	r3, [sp, #7]
   157ac:	4613      	mov	r3, r2
   157ae:	f88d 3006 	strb.w	r3, [sp, #6]
  dmConnApiRemConnParamReqNegReply_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqNegReply_t))) != NULL)
   157b2:	2006      	movs	r0, #6
   157b4:	f00a f89e 	bl	1f8f4 <WsfMsgAlloc>
   157b8:	9003      	str	r0, [sp, #12]
   157ba:	9b03      	ldr	r3, [sp, #12]
   157bc:	2b00      	cmp	r3, #0
   157be:	d011      	beq.n	157e4 <DmRemoteConnParamReqNegReply+0x44>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY;
   157c0:	9b03      	ldr	r3, [sp, #12]
   157c2:	2243      	movs	r2, #67	; 0x43
   157c4:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   157c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   157ca:	b29a      	uxth	r2, r3
   157cc:	9b03      	ldr	r3, [sp, #12]
   157ce:	801a      	strh	r2, [r3, #0]
    pMsg->reason = reason;
   157d0:	9b03      	ldr	r3, [sp, #12]
   157d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   157d6:	711a      	strb	r2, [r3, #4]

    WsfMsgSend(dmCb.handlerId, pMsg);
   157d8:	4b04      	ldr	r3, [pc, #16]	; (157ec <DmRemoteConnParamReqNegReply+0x4c>)
   157da:	7b1b      	ldrb	r3, [r3, #12]
   157dc:	9903      	ldr	r1, [sp, #12]
   157de:	4618      	mov	r0, r3
   157e0:	f00a f8ac 	bl	1f93c <WsfMsgSend>
  }
}
   157e4:	bf00      	nop
   157e6:	b005      	add	sp, #20
   157e8:	f85d fb04 	ldr.w	pc, [sp], #4
   157ec:	100044f4 	.word	0x100044f4

000157f0 <DmConnSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void DmConnSetDataLen(dmConnId_t connId, uint16_t txOctets, uint16_t txTime)
{
   157f0:	b500      	push	{lr}
   157f2:	b085      	sub	sp, #20
   157f4:	4603      	mov	r3, r0
   157f6:	f88d 3007 	strb.w	r3, [sp, #7]
   157fa:	460b      	mov	r3, r1
   157fc:	f8ad 3004 	strh.w	r3, [sp, #4]
   15800:	4613      	mov	r3, r2
   15802:	f8ad 3002 	strh.w	r3, [sp, #2]
  dmConnApiSetDataLen_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiSetDataLen_t))) != NULL)
   15806:	2008      	movs	r0, #8
   15808:	f00a f874 	bl	1f8f4 <WsfMsgAlloc>
   1580c:	9003      	str	r0, [sp, #12]
   1580e:	9b03      	ldr	r3, [sp, #12]
   15810:	2b00      	cmp	r3, #0
   15812:	d015      	beq.n	15840 <DmConnSetDataLen+0x50>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_SET_DATA_LEN;
   15814:	9b03      	ldr	r3, [sp, #12]
   15816:	2244      	movs	r2, #68	; 0x44
   15818:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   1581a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1581e:	b29a      	uxth	r2, r3
   15820:	9b03      	ldr	r3, [sp, #12]
   15822:	801a      	strh	r2, [r3, #0]
    pMsg->txOctets = txOctets;
   15824:	9b03      	ldr	r3, [sp, #12]
   15826:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1582a:	809a      	strh	r2, [r3, #4]
    pMsg->txTime = txTime;
   1582c:	9b03      	ldr	r3, [sp, #12]
   1582e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   15832:	80da      	strh	r2, [r3, #6]

    WsfMsgSend(dmCb.handlerId, pMsg);
   15834:	4b04      	ldr	r3, [pc, #16]	; (15848 <DmConnSetDataLen+0x58>)
   15836:	7b1b      	ldrb	r3, [r3, #12]
   15838:	9903      	ldr	r1, [sp, #12]
   1583a:	4618      	mov	r0, r3
   1583c:	f00a f87e 	bl	1f93c <WsfMsgSend>
  }
}
   15840:	bf00      	nop
   15842:	b005      	add	sp, #20
   15844:	f85d fb04 	ldr.w	pc, [sp], #4
   15848:	100044f4 	.word	0x100044f4

0001584c <DmConnIdByHandle>:
 *
 *  \return Connection ID or DM_CONN_ID_NONE if error.
 */
/*************************************************************************************************/
dmConnId_t DmConnIdByHandle(uint16_t handle)
{
   1584c:	b084      	sub	sp, #16
   1584e:	4603      	mov	r3, r0
   15850:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   15854:	4b11      	ldr	r3, [pc, #68]	; (1589c <DmConnIdByHandle+0x50>)
   15856:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   15858:	2303      	movs	r3, #3
   1585a:	f88d 300b 	strb.w	r3, [sp, #11]
   1585e:	e014      	b.n	1588a <DmConnIdByHandle+0x3e>
  {
    if (pCcb->inUse && (pCcb->handle == handle))
   15860:	9b03      	ldr	r3, [sp, #12]
   15862:	7d9b      	ldrb	r3, [r3, #22]
   15864:	2b00      	cmp	r3, #0
   15866:	d008      	beq.n	1587a <DmConnIdByHandle+0x2e>
   15868:	9b03      	ldr	r3, [sp, #12]
   1586a:	899b      	ldrh	r3, [r3, #12]
   1586c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15870:	429a      	cmp	r2, r3
   15872:	d102      	bne.n	1587a <DmConnIdByHandle+0x2e>
    {
      return pCcb->connId;
   15874:	9b03      	ldr	r3, [sp, #12]
   15876:	7c1b      	ldrb	r3, [r3, #16]
   15878:	e00c      	b.n	15894 <DmConnIdByHandle+0x48>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1587a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1587e:	3b01      	subs	r3, #1
   15880:	f88d 300b 	strb.w	r3, [sp, #11]
   15884:	9b03      	ldr	r3, [sp, #12]
   15886:	3330      	adds	r3, #48	; 0x30
   15888:	9303      	str	r3, [sp, #12]
   1588a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1588e:	2b00      	cmp	r3, #0
   15890:	d1e6      	bne.n	15860 <DmConnIdByHandle+0x14>
    }
  }

  // DM_TRACE_WARN1("DmConnIdByHandle not found 0x%04x", handle);

  return DM_CONN_ID_NONE;
   15892:	2300      	movs	r3, #0
}
   15894:	4618      	mov	r0, r3
   15896:	b004      	add	sp, #16
   15898:	4770      	bx	lr
   1589a:	bf00      	nop
   1589c:	10004420 	.word	0x10004420

000158a0 <DmConnInUse>:
 *
 *  \return TRUE if the connection is in use, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t DmConnInUse(dmConnId_t connId)
{
   158a0:	b082      	sub	sp, #8
   158a2:	4603      	mov	r3, r0
   158a4:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].inUse;
   158a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   158ac:	1e5a      	subs	r2, r3, #1
   158ae:	4905      	ldr	r1, [pc, #20]	; (158c4 <DmConnInUse+0x24>)
   158b0:	4613      	mov	r3, r2
   158b2:	005b      	lsls	r3, r3, #1
   158b4:	4413      	add	r3, r2
   158b6:	011b      	lsls	r3, r3, #4
   158b8:	440b      	add	r3, r1
   158ba:	3316      	adds	r3, #22
   158bc:	781b      	ldrb	r3, [r3, #0]
}
   158be:	4618      	mov	r0, r3
   158c0:	b002      	add	sp, #8
   158c2:	4770      	bx	lr
   158c4:	10004420 	.word	0x10004420

000158c8 <DmConnPeerAddrType>:
 *
 *  \return Peer address type.
 */
/*************************************************************************************************/
uint8_t DmConnPeerAddrType(dmConnId_t connId)
{
   158c8:	b082      	sub	sp, #8
   158ca:	4603      	mov	r3, r0
   158cc:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddrType;
   158d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   158d4:	1e5a      	subs	r2, r3, #1
   158d6:	4905      	ldr	r1, [pc, #20]	; (158ec <DmConnPeerAddrType+0x24>)
   158d8:	4613      	mov	r3, r2
   158da:	005b      	lsls	r3, r3, #1
   158dc:	4413      	add	r3, r2
   158de:	011b      	lsls	r3, r3, #4
   158e0:	440b      	add	r3, r1
   158e2:	3313      	adds	r3, #19
   158e4:	781b      	ldrb	r3, [r3, #0]
}
   158e6:	4618      	mov	r0, r3
   158e8:	b002      	add	sp, #8
   158ea:	4770      	bx	lr
   158ec:	10004420 	.word	0x10004420

000158f0 <DmConnPeerAddr>:
 *
 *  \return Pointer to peer device address.
 */
/*************************************************************************************************/
uint8_t *DmConnPeerAddr(dmConnId_t connId)
{
   158f0:	b082      	sub	sp, #8
   158f2:	4603      	mov	r3, r0
   158f4:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddr;
   158f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   158fc:	1e5a      	subs	r2, r3, #1
   158fe:	4613      	mov	r3, r2
   15900:	005b      	lsls	r3, r3, #1
   15902:	4413      	add	r3, r2
   15904:	011b      	lsls	r3, r3, #4
   15906:	4a02      	ldr	r2, [pc, #8]	; (15910 <DmConnPeerAddr+0x20>)
   15908:	4413      	add	r3, r2
}
   1590a:	4618      	mov	r0, r3
   1590c:	b002      	add	sp, #8
   1590e:	4770      	bx	lr
   15910:	10004420 	.word	0x10004420

00015914 <DmConnLocalAddrType>:
 *
 *  \return Local address type.
 */
/*************************************************************************************************/
uint8_t DmConnLocalAddrType(dmConnId_t connId)
{
   15914:	b082      	sub	sp, #8
   15916:	4603      	mov	r3, r0
   15918:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddrType;
   1591c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15920:	1e5a      	subs	r2, r3, #1
   15922:	4905      	ldr	r1, [pc, #20]	; (15938 <DmConnLocalAddrType+0x24>)
   15924:	4613      	mov	r3, r2
   15926:	005b      	lsls	r3, r3, #1
   15928:	4413      	add	r3, r2
   1592a:	011b      	lsls	r3, r3, #4
   1592c:	440b      	add	r3, r1
   1592e:	3314      	adds	r3, #20
   15930:	781b      	ldrb	r3, [r3, #0]
}
   15932:	4618      	mov	r0, r3
   15934:	b002      	add	sp, #8
   15936:	4770      	bx	lr
   15938:	10004420 	.word	0x10004420

0001593c <DmConnLocalAddr>:
 *
 *  \return Pointer to local address.
 */
/*************************************************************************************************/
uint8_t *DmConnLocalAddr(dmConnId_t connId)
{
   1593c:	b082      	sub	sp, #8
   1593e:	4603      	mov	r3, r0
   15940:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddr;
   15944:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15948:	1e5a      	subs	r2, r3, #1
   1594a:	4613      	mov	r3, r2
   1594c:	005b      	lsls	r3, r3, #1
   1594e:	4413      	add	r3, r2
   15950:	011b      	lsls	r3, r3, #4
   15952:	4a03      	ldr	r2, [pc, #12]	; (15960 <DmConnLocalAddr+0x24>)
   15954:	4413      	add	r3, r2
   15956:	3306      	adds	r3, #6
}
   15958:	4618      	mov	r0, r3
   1595a:	b002      	add	sp, #8
   1595c:	4770      	bx	lr
   1595e:	bf00      	nop
   15960:	10004420 	.word	0x10004420

00015964 <DmConnPeerRpa>:
*
*  \return Pointer to peer RPA.
*/
/*************************************************************************************************/
uint8_t *DmConnPeerRpa(dmConnId_t connId)
{
   15964:	b082      	sub	sp, #8
   15966:	4603      	mov	r3, r0
   15968:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].peerRpa;
   1596c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15970:	1e5a      	subs	r2, r3, #1
   15972:	4613      	mov	r3, r2
   15974:	005b      	lsls	r3, r3, #1
   15976:	4413      	add	r3, r2
   15978:	011b      	lsls	r3, r3, #4
   1597a:	3320      	adds	r3, #32
   1597c:	4a02      	ldr	r2, [pc, #8]	; (15988 <DmConnPeerRpa+0x24>)
   1597e:	4413      	add	r3, r2
}
   15980:	4618      	mov	r0, r3
   15982:	b002      	add	sp, #8
   15984:	4770      	bx	lr
   15986:	bf00      	nop
   15988:	10004420 	.word	0x10004420

0001598c <DmConnLocalRpa>:
*
*  \return Pointer to local RPA.
*/
/*************************************************************************************************/
uint8_t *DmConnLocalRpa(dmConnId_t connId)
{
   1598c:	b082      	sub	sp, #8
   1598e:	4603      	mov	r3, r0
   15990:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].localRpa;
   15994:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15998:	1e5a      	subs	r2, r3, #1
   1599a:	4613      	mov	r3, r2
   1599c:	005b      	lsls	r3, r3, #1
   1599e:	4413      	add	r3, r2
   159a0:	011b      	lsls	r3, r3, #4
   159a2:	3318      	adds	r3, #24
   159a4:	4a02      	ldr	r2, [pc, #8]	; (159b0 <DmConnLocalRpa+0x24>)
   159a6:	4413      	add	r3, r2
   159a8:	3302      	adds	r3, #2
}
   159aa:	4618      	mov	r0, r3
   159ac:	b002      	add	sp, #8
   159ae:	4770      	bx	lr
   159b0:	10004420 	.word	0x10004420

000159b4 <DmConnSecLevel>:
 *
 *  \return Security level of the connection.
 */
/*************************************************************************************************/
uint8_t DmConnSecLevel(dmConnId_t connId)
{
   159b4:	b082      	sub	sp, #8
   159b6:	4603      	mov	r3, r0
   159b8:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].secLevel;
   159bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   159c0:	1e5a      	subs	r2, r3, #1
   159c2:	4905      	ldr	r1, [pc, #20]	; (159d8 <DmConnSecLevel+0x24>)
   159c4:	4613      	mov	r3, r2
   159c6:	005b      	lsls	r3, r3, #1
   159c8:	4413      	add	r3, r2
   159ca:	011b      	lsls	r3, r3, #4
   159cc:	440b      	add	r3, r1
   159ce:	3317      	adds	r3, #23
   159d0:	781b      	ldrb	r3, [r3, #0]
}
   159d2:	4618      	mov	r0, r3
   159d4:	b002      	add	sp, #8
   159d6:	4770      	bx	lr
   159d8:	10004420 	.word	0x10004420

000159dc <DmConnSetIdle>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSetIdle(dmConnId_t connId, uint16_t idleMask, uint8_t idle)
{
   159dc:	b500      	push	{lr}
   159de:	b083      	sub	sp, #12
   159e0:	4603      	mov	r3, r0
   159e2:	f88d 3007 	strb.w	r3, [sp, #7]
   159e6:	460b      	mov	r3, r1
   159e8:	f8ad 3004 	strh.w	r3, [sp, #4]
   159ec:	4613      	mov	r3, r2
   159ee:	f88d 3006 	strb.w	r3, [sp, #6]
  WsfTaskLock();
   159f2:	f00a f80b 	bl	1fa0c <WsfTaskLock>

  if (DmConnInUse(connId))
   159f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   159fa:	4618      	mov	r0, r3
   159fc:	f7ff ff50 	bl	158a0 <DmConnInUse>
   15a00:	4603      	mov	r3, r0
   15a02:	2b00      	cmp	r3, #0
   15a04:	d03e      	beq.n	15a84 <DmConnSetIdle+0xa8>
  {
    if (idle == DM_CONN_IDLE)
   15a06:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15a0a:	2b00      	cmp	r3, #0
   15a0c:	d11f      	bne.n	15a4e <DmConnSetIdle+0x72>
    {
      /* clear bit if idle */
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
   15a0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15a12:	1e5a      	subs	r2, r3, #1
   15a14:	491e      	ldr	r1, [pc, #120]	; (15a90 <DmConnSetIdle+0xb4>)
   15a16:	4613      	mov	r3, r2
   15a18:	005b      	lsls	r3, r3, #1
   15a1a:	4413      	add	r3, r2
   15a1c:	011b      	lsls	r3, r3, #4
   15a1e:	440b      	add	r3, r1
   15a20:	330e      	adds	r3, #14
   15a22:	881b      	ldrh	r3, [r3, #0]
   15a24:	b21a      	sxth	r2, r3
   15a26:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   15a2a:	43db      	mvns	r3, r3
   15a2c:	b21b      	sxth	r3, r3
   15a2e:	4013      	ands	r3, r2
   15a30:	b219      	sxth	r1, r3
   15a32:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15a36:	1e5a      	subs	r2, r3, #1
   15a38:	b288      	uxth	r0, r1
   15a3a:	4915      	ldr	r1, [pc, #84]	; (15a90 <DmConnSetIdle+0xb4>)
   15a3c:	4613      	mov	r3, r2
   15a3e:	005b      	lsls	r3, r3, #1
   15a40:	4413      	add	r3, r2
   15a42:	011b      	lsls	r3, r3, #4
   15a44:	440b      	add	r3, r1
   15a46:	330e      	adds	r3, #14
   15a48:	4602      	mov	r2, r0
   15a4a:	801a      	strh	r2, [r3, #0]
   15a4c:	e01a      	b.n	15a84 <DmConnSetIdle+0xa8>
    }
    else
    {
      /* set bit if busy */
      dmConnCb.ccb[connId-1].idleMask |= idleMask;
   15a4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15a52:	1e5a      	subs	r2, r3, #1
   15a54:	490e      	ldr	r1, [pc, #56]	; (15a90 <DmConnSetIdle+0xb4>)
   15a56:	4613      	mov	r3, r2
   15a58:	005b      	lsls	r3, r3, #1
   15a5a:	4413      	add	r3, r2
   15a5c:	011b      	lsls	r3, r3, #4
   15a5e:	440b      	add	r3, r1
   15a60:	330e      	adds	r3, #14
   15a62:	8819      	ldrh	r1, [r3, #0]
   15a64:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15a68:	1e5a      	subs	r2, r3, #1
   15a6a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15a6e:	430b      	orrs	r3, r1
   15a70:	b298      	uxth	r0, r3
   15a72:	4907      	ldr	r1, [pc, #28]	; (15a90 <DmConnSetIdle+0xb4>)
   15a74:	4613      	mov	r3, r2
   15a76:	005b      	lsls	r3, r3, #1
   15a78:	4413      	add	r3, r2
   15a7a:	011b      	lsls	r3, r3, #4
   15a7c:	440b      	add	r3, r1
   15a7e:	330e      	adds	r3, #14
   15a80:	4602      	mov	r2, r0
   15a82:	801a      	strh	r2, [r3, #0]
    }
  }

  WsfTaskUnlock();
   15a84:	f009 ffc7 	bl	1fa16 <WsfTaskUnlock>

  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
}
   15a88:	bf00      	nop
   15a8a:	b003      	add	sp, #12
   15a8c:	f85d fb04 	ldr.w	pc, [sp], #4
   15a90:	10004420 	.word	0x10004420

00015a94 <DmConnCheckIdle>:
 *
 *  \return Zero if connection is idle, nonzero if busy.
 */
/*************************************************************************************************/
uint16_t DmConnCheckIdle(dmConnId_t connId)
{
   15a94:	b500      	push	{lr}
   15a96:	b085      	sub	sp, #20
   15a98:	4603      	mov	r3, r0
   15a9a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t idleMask;

  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  WsfTaskLock();
   15a9e:	f009 ffb5 	bl	1fa0c <WsfTaskLock>
  idleMask = dmConnCb.ccb[connId-1].idleMask;
   15aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15aa6:	1e5a      	subs	r2, r3, #1
   15aa8:	4908      	ldr	r1, [pc, #32]	; (15acc <DmConnCheckIdle+0x38>)
   15aaa:	4613      	mov	r3, r2
   15aac:	005b      	lsls	r3, r3, #1
   15aae:	4413      	add	r3, r2
   15ab0:	011b      	lsls	r3, r3, #4
   15ab2:	440b      	add	r3, r1
   15ab4:	330e      	adds	r3, #14
   15ab6:	881b      	ldrh	r3, [r3, #0]
   15ab8:	f8ad 300e 	strh.w	r3, [sp, #14]
  WsfTaskUnlock();
   15abc:	f009 ffab 	bl	1fa16 <WsfTaskUnlock>

  return idleMask;
   15ac0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   15ac4:	4618      	mov	r0, r3
   15ac6:	b005      	add	sp, #20
   15ac8:	f85d fb04 	ldr.w	pc, [sp], #4
   15acc:	10004420 	.word	0x10004420

00015ad0 <DmConnRole>:
 *
 *  \return Connection role.
 */
/*************************************************************************************************/
uint8_t DmConnRole(dmConnId_t connId)
{
   15ad0:	b082      	sub	sp, #8
   15ad2:	4603      	mov	r3, r0
   15ad4:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].role;
   15ad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15adc:	1e5a      	subs	r2, r3, #1
   15ade:	4905      	ldr	r1, [pc, #20]	; (15af4 <DmConnRole+0x24>)
   15ae0:	4613      	mov	r3, r2
   15ae2:	005b      	lsls	r3, r3, #1
   15ae4:	4413      	add	r3, r2
   15ae6:	011b      	lsls	r3, r3, #4
   15ae8:	440b      	add	r3, r1
   15aea:	3319      	adds	r3, #25
   15aec:	781b      	ldrb	r3, [r3, #0]
}
   15aee:	4618      	mov	r0, r3
   15af0:	b002      	add	sp, #8
   15af2:	4770      	bx	lr
   15af4:	10004420 	.word	0x10004420

00015af8 <dmConnUpdateCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmConnUpdateCback(dmConnCcb_t *pCcb, uint8_t status)
{
   15af8:	b500      	push	{lr}
   15afa:	b087      	sub	sp, #28
   15afc:	9001      	str	r0, [sp, #4]
   15afe:	460b      	mov	r3, r1
   15b00:	f88d 3003 	strb.w	r3, [sp, #3]
  hciLeConnUpdateCmplEvt_t  evt;

  /* call callback */
  evt.hdr.event = DM_CONN_UPDATE_IND;
   15b04:	2329      	movs	r3, #41	; 0x29
   15b06:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = pCcb->connId;
   15b0a:	9b01      	ldr	r3, [sp, #4]
   15b0c:	7c1b      	ldrb	r3, [r3, #16]
   15b0e:	b29b      	uxth	r3, r3
   15b10:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.status = evt.hdr.status = status;
   15b14:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15b18:	f88d 300b 	strb.w	r3, [sp, #11]
   15b1c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15b20:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.handle = pCcb->handle;
   15b24:	9b01      	ldr	r3, [sp, #4]
   15b26:	899b      	ldrh	r3, [r3, #12]
   15b28:	f8ad 300e 	strh.w	r3, [sp, #14]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   15b2c:	4b04      	ldr	r3, [pc, #16]	; (15b40 <dmConnUpdateCback+0x48>)
   15b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15b32:	aa02      	add	r2, sp, #8
   15b34:	4610      	mov	r0, r2
   15b36:	4798      	blx	r3
}
   15b38:	bf00      	nop
   15b3a:	b007      	add	sp, #28
   15b3c:	f85d fb04 	ldr.w	pc, [sp], #4
   15b40:	10004420 	.word	0x10004420

00015b44 <dmConnSmActUpdateSlave>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActUpdateSlave(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   15b44:	b500      	push	{lr}
   15b46:	b083      	sub	sp, #12
   15b48:	9001      	str	r0, [sp, #4]
   15b4a:	9100      	str	r1, [sp, #0]
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   15b4c:	9b01      	ldr	r3, [sp, #4]
   15b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15b50:	f003 0302 	and.w	r3, r3, #2
   15b54:	2b00      	cmp	r3, #0
   15b56:	d00f      	beq.n	15b78 <dmConnSmActUpdateSlave+0x34>
      (HciGetLeSupFeat() & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC))
   15b58:	f7f8 fc8c 	bl	e474 <HciGetLeSupFeat>
   15b5c:	4603      	mov	r3, r0
   15b5e:	f003 0302 	and.w	r3, r3, #2
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
   15b62:	2b00      	cmp	r3, #0
   15b64:	d008      	beq.n	15b78 <dmConnSmActUpdateSlave+0x34>
  {
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
   15b66:	9b01      	ldr	r3, [sp, #4]
   15b68:	899a      	ldrh	r2, [r3, #12]
   15b6a:	9b00      	ldr	r3, [sp, #0]
   15b6c:	3304      	adds	r3, #4
   15b6e:	4619      	mov	r1, r3
   15b70:	4610      	mov	r0, r2
   15b72:	f7f7 f903 	bl	cd7c <HciLeConnUpdateCmd>
  else
  {
    /* call callback */
    dmConnUpdateCback(pCcb, (uint8_t) HCI_ERR_CMD_DISALLOWED);
  }
}
   15b76:	e013      	b.n	15ba0 <dmConnSmActUpdateSlave+0x5c>
  else if (!pCcb->updating)
   15b78:	9b01      	ldr	r3, [sp, #4]
   15b7a:	7c5b      	ldrb	r3, [r3, #17]
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d10b      	bne.n	15b98 <dmConnSmActUpdateSlave+0x54>
    pCcb->updating = TRUE;
   15b80:	9b01      	ldr	r3, [sp, #4]
   15b82:	2201      	movs	r2, #1
   15b84:	745a      	strb	r2, [r3, #17]
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
   15b86:	9b01      	ldr	r3, [sp, #4]
   15b88:	899a      	ldrh	r2, [r3, #12]
   15b8a:	9b00      	ldr	r3, [sp, #0]
   15b8c:	3304      	adds	r3, #4
   15b8e:	4619      	mov	r1, r3
   15b90:	4610      	mov	r0, r2
   15b92:	f007 fbf7 	bl	1d384 <L2cDmConnUpdateReq>
}
   15b96:	e003      	b.n	15ba0 <dmConnSmActUpdateSlave+0x5c>
    dmConnUpdateCback(pCcb, (uint8_t) HCI_ERR_CMD_DISALLOWED);
   15b98:	210c      	movs	r1, #12
   15b9a:	9801      	ldr	r0, [sp, #4]
   15b9c:	f7ff ffac 	bl	15af8 <dmConnUpdateCback>
}
   15ba0:	bf00      	nop
   15ba2:	b003      	add	sp, #12
   15ba4:	f85d fb04 	ldr.w	pc, [sp], #4

00015ba8 <dmConnSmActL2cUpdateCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActL2cUpdateCnf(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   15ba8:	b500      	push	{lr}
   15baa:	b083      	sub	sp, #12
   15bac:	9001      	str	r0, [sp, #4]
   15bae:	9100      	str	r1, [sp, #0]
  /* if connection update in progress */
  if (pCcb->updating)
   15bb0:	9b01      	ldr	r3, [sp, #4]
   15bb2:	7c5b      	ldrb	r3, [r3, #17]
   15bb4:	2b00      	cmp	r3, #0
   15bb6:	d00d      	beq.n	15bd4 <dmConnSmActL2cUpdateCnf+0x2c>
  {
    pCcb->updating = FALSE;
   15bb8:	9b01      	ldr	r3, [sp, #4]
   15bba:	2200      	movs	r2, #0
   15bbc:	745a      	strb	r2, [r3, #17]

    /* if reason indicates failure */
    if (pMsg->l2cUpdateCnf.result != L2C_CONN_PARAM_ACCEPTED)
   15bbe:	9b00      	ldr	r3, [sp, #0]
   15bc0:	889b      	ldrh	r3, [r3, #4]
   15bc2:	2b00      	cmp	r3, #0
   15bc4:	d006      	beq.n	15bd4 <dmConnSmActL2cUpdateCnf+0x2c>
    {
      /* call callback */
      dmConnUpdateCback(pCcb, (uint8_t) pMsg->l2cUpdateCnf.result);
   15bc6:	9b00      	ldr	r3, [sp, #0]
   15bc8:	889b      	ldrh	r3, [r3, #4]
   15bca:	b2db      	uxtb	r3, r3
   15bcc:	4619      	mov	r1, r3
   15bce:	9801      	ldr	r0, [sp, #4]
   15bd0:	f7ff ff92 	bl	15af8 <dmConnUpdateCback>
    }
  }
}
   15bd4:	bf00      	nop
   15bd6:	b003      	add	sp, #12
   15bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00015bdc <DmL2cConnUpdateCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cConnUpdateCnf(uint16_t handle, uint16_t result)
{
   15bdc:	b500      	push	{lr}
   15bde:	b087      	sub	sp, #28
   15be0:	4603      	mov	r3, r0
   15be2:	460a      	mov	r2, r1
   15be4:	f8ad 3006 	strh.w	r3, [sp, #6]
   15be8:	4613      	mov	r3, r2
   15bea:	f8ad 3004 	strh.w	r3, [sp, #4]
  dmConnL2cUpdateCnf_t  updateCnf;
  dmConnCcb_t           *pCcb;

  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
   15bee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15bf2:	4618      	mov	r0, r3
   15bf4:	f7ff f812 	bl	14c1c <dmConnCcbByHandle>
   15bf8:	9005      	str	r0, [sp, #20]
   15bfa:	9b05      	ldr	r3, [sp, #20]
   15bfc:	2b00      	cmp	r3, #0
   15bfe:	d00b      	beq.n	15c18 <DmL2cConnUpdateCnf+0x3c>
  {
    updateCnf.hdr.event = DM_CONN_MSG_L2C_UPDATE_CNF;
   15c00:	2336      	movs	r3, #54	; 0x36
   15c02:	f88d 300e 	strb.w	r3, [sp, #14]
    updateCnf.result = result;
   15c06:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15c0a:	f8ad 3010 	strh.w	r3, [sp, #16]

    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateCnf);
   15c0e:	ab03      	add	r3, sp, #12
   15c10:	4619      	mov	r1, r3
   15c12:	9805      	ldr	r0, [sp, #20]
   15c14:	f000 f86e 	bl	15cf4 <dmConnSmExecute>
  }
}
   15c18:	bf00      	nop
   15c1a:	b007      	add	sp, #28
   15c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00015c20 <DmL2cCmdRejInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cCmdRejInd(uint16_t handle, uint16_t result)
{
   15c20:	b500      	push	{lr}
   15c22:	b085      	sub	sp, #20
   15c24:	4603      	mov	r3, r0
   15c26:	460a      	mov	r2, r1
   15c28:	f8ad 3006 	strh.w	r3, [sp, #6]
   15c2c:	4613      	mov	r3, r2
   15c2e:	f8ad 3004 	strh.w	r3, [sp, #4]
  dmL2cCmdRejEvt_t  evt;

  /* call callback */
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
   15c32:	2364      	movs	r3, #100	; 0x64
   15c34:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.status = HCI_SUCCESS;
   15c38:	2300      	movs	r3, #0
   15c3a:	f88d 300b 	strb.w	r3, [sp, #11]
  evt.reason = result;
   15c3e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15c42:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.handle = handle;
   15c46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15c4a:	f8ad 300e 	strh.w	r3, [sp, #14]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
   15c4e:	4b05      	ldr	r3, [pc, #20]	; (15c64 <DmL2cCmdRejInd+0x44>)
   15c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15c54:	aa02      	add	r2, sp, #8
   15c56:	4610      	mov	r0, r2
   15c58:	4798      	blx	r3
}
   15c5a:	bf00      	nop
   15c5c:	b005      	add	sp, #20
   15c5e:	f85d fb04 	ldr.w	pc, [sp], #4
   15c62:	bf00      	nop
   15c64:	10004420 	.word	0x10004420

00015c68 <dmConnSmActAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   15c68:	b500      	push	{lr}
   15c6a:	b083      	sub	sp, #12
   15c6c:	9001      	str	r0, [sp, #4]
   15c6e:	9100      	str	r1, [sp, #0]
  dmAdvStartDirected(pMsg->apiOpen.advType, pMsg->apiOpen.duration, pMsg->apiOpen.addrType,
   15c70:	9b00      	ldr	r3, [sp, #0]
   15c72:	7998      	ldrb	r0, [r3, #6]
   15c74:	9b00      	ldr	r3, [sp, #0]
   15c76:	8919      	ldrh	r1, [r3, #8]
   15c78:	9b00      	ldr	r3, [sp, #0]
   15c7a:	7c5a      	ldrb	r2, [r3, #17]
                     pMsg->apiOpen.peerAddr);
   15c7c:	9b00      	ldr	r3, [sp, #0]
   15c7e:	330b      	adds	r3, #11
  dmAdvStartDirected(pMsg->apiOpen.advType, pMsg->apiOpen.duration, pMsg->apiOpen.addrType,
   15c80:	f7fe fec4 	bl	14a0c <dmAdvStartDirected>
}
   15c84:	bf00      	nop
   15c86:	b003      	add	sp, #12
   15c88:	f85d fb04 	ldr.w	pc, [sp], #4

00015c8c <dmConnSmActCancelAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActCancelAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   15c8c:	b500      	push	{lr}
   15c8e:	b083      	sub	sp, #12
   15c90:	9001      	str	r0, [sp, #4]
   15c92:	9100      	str	r1, [sp, #0]
  dmAdvStopDirected();
   15c94:	f7fe feec 	bl	14a70 <dmAdvStopDirected>

  dmConnSmActConnFailed(pCcb, pMsg);
   15c98:	9900      	ldr	r1, [sp, #0]
   15c9a:	9801      	ldr	r0, [sp, #4]
   15c9c:	f7ff f910 	bl	14ec0 <dmConnSmActConnFailed>
}
   15ca0:	bf00      	nop
   15ca2:	b003      	add	sp, #12
   15ca4:	f85d fb04 	ldr.w	pc, [sp], #4

00015ca8 <dmConnSmActConnAccepted>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnAccepted(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   15ca8:	b500      	push	{lr}
   15caa:	b083      	sub	sp, #12
   15cac:	9001      	str	r0, [sp, #4]
   15cae:	9100      	str	r1, [sp, #0]
  dmAdvConnected();
   15cb0:	f7fe fefe 	bl	14ab0 <dmAdvConnected>

  dmConnSmActConnOpened(pCcb, pMsg);
   15cb4:	9900      	ldr	r1, [sp, #0]
   15cb6:	9801      	ldr	r0, [sp, #4]
   15cb8:	f7ff f88a 	bl	14dd0 <dmConnSmActConnOpened>
}
   15cbc:	bf00      	nop
   15cbe:	b003      	add	sp, #12
   15cc0:	f85d fb04 	ldr.w	pc, [sp], #4

00015cc4 <dmConnSmActAcceptFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAcceptFailed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   15cc4:	b500      	push	{lr}
   15cc6:	b083      	sub	sp, #12
   15cc8:	9001      	str	r0, [sp, #4]
   15cca:	9100      	str	r1, [sp, #0]
  dmAdvConnectFailed();
   15ccc:	f7fe ff04 	bl	14ad8 <dmAdvConnectFailed>

  dmConnSmActConnFailed(pCcb, pMsg);
   15cd0:	9900      	ldr	r1, [sp, #0]
   15cd2:	9801      	ldr	r0, [sp, #4]
   15cd4:	f7ff f8f4 	bl	14ec0 <dmConnSmActConnFailed>
}
   15cd8:	bf00      	nop
   15cda:	b003      	add	sp, #12
   15cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00015ce0 <DmConnSlaveInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSlaveInit(void)
{
  dmConnActSet[DM_CONN_ACT_SET_SLAVE] = (dmConnAct_t *) dmConnActSetSlave;
   15ce0:	4b02      	ldr	r3, [pc, #8]	; (15cec <DmConnSlaveInit+0xc>)
   15ce2:	4a03      	ldr	r2, [pc, #12]	; (15cf0 <DmConnSlaveInit+0x10>)
   15ce4:	609a      	str	r2, [r3, #8]
}
   15ce6:	bf00      	nop
   15ce8:	4770      	bx	lr
   15cea:	bf00      	nop
   15cec:	100044e4 	.word	0x100044e4
   15cf0:	00028424 	.word	0x00028424

00015cf4 <dmConnSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmExecute(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   15cf4:	b500      	push	{lr}
   15cf6:	b085      	sub	sp, #20
   15cf8:	9001      	str	r0, [sp, #4]
   15cfa:	9100      	str	r1, [sp, #0]
  uint8_t           event;

  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);

  /* get the event */
  event = DM_MSG_MASK(pMsg->hdr.event);
   15cfc:	9b00      	ldr	r3, [sp, #0]
   15cfe:	789b      	ldrb	r3, [r3, #2]
   15d00:	f003 030f 	and.w	r3, r3, #15
   15d04:	f88d 300f 	strb.w	r3, [sp, #15]

  /* get action */
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   15d08:	9b01      	ldr	r3, [sp, #4]
   15d0a:	7d5b      	ldrb	r3, [r3, #21]
   15d0c:	461a      	mov	r2, r3
   15d0e:	f89d 100f 	ldrb.w	r1, [sp, #15]
   15d12:	481e      	ldr	r0, [pc, #120]	; (15d8c <dmConnSmExecute+0x98>)
   15d14:	4613      	mov	r3, r2
   15d16:	005b      	lsls	r3, r3, #1
   15d18:	4413      	add	r3, r2
   15d1a:	009b      	lsls	r3, r3, #2
   15d1c:	4413      	add	r3, r2
   15d1e:	440b      	add	r3, r1
   15d20:	005b      	lsls	r3, r3, #1
   15d22:	4403      	add	r3, r0
   15d24:	785b      	ldrb	r3, [r3, #1]
   15d26:	f88d 300e 	strb.w	r3, [sp, #14]

  /* set next state */
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
   15d2a:	9b01      	ldr	r3, [sp, #4]
   15d2c:	7d5b      	ldrb	r3, [r3, #21]
   15d2e:	461a      	mov	r2, r3
   15d30:	f89d 100f 	ldrb.w	r1, [sp, #15]
   15d34:	4815      	ldr	r0, [pc, #84]	; (15d8c <dmConnSmExecute+0x98>)
   15d36:	4613      	mov	r3, r2
   15d38:	005b      	lsls	r3, r3, #1
   15d3a:	4413      	add	r3, r2
   15d3c:	009b      	lsls	r3, r3, #2
   15d3e:	4413      	add	r3, r2
   15d40:	440b      	add	r3, r1
   15d42:	f810 2013 	ldrb.w	r2, [r0, r3, lsl #1]
   15d46:	9b01      	ldr	r3, [sp, #4]
   15d48:	755a      	strb	r2, [r3, #21]

  /* look up action set */
  actSet = dmConnActSet[DM_CONN_ACT_SET_ID(action)];
   15d4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   15d4e:	091b      	lsrs	r3, r3, #4
   15d50:	b2db      	uxtb	r3, r3
   15d52:	461a      	mov	r2, r3
   15d54:	4b0e      	ldr	r3, [pc, #56]	; (15d90 <dmConnSmExecute+0x9c>)
   15d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15d5a:	9302      	str	r3, [sp, #8]

  /* if action set present */
  if (actSet != NULL)
   15d5c:	9b02      	ldr	r3, [sp, #8]
   15d5e:	2b00      	cmp	r3, #0
   15d60:	d00b      	beq.n	15d7a <dmConnSmExecute+0x86>
  {
    /* execute action function in action set */
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
   15d62:	f89d 300e 	ldrb.w	r3, [sp, #14]
   15d66:	f003 030f 	and.w	r3, r3, #15
   15d6a:	009b      	lsls	r3, r3, #2
   15d6c:	9a02      	ldr	r2, [sp, #8]
   15d6e:	4413      	add	r3, r2
   15d70:	681b      	ldr	r3, [r3, #0]
   15d72:	9900      	ldr	r1, [sp, #0]
   15d74:	9801      	ldr	r0, [sp, #4]
   15d76:	4798      	blx	r3
  else
  {
     /* no action */
     dmConnSmActNone(pCcb, pMsg);
  }
}
   15d78:	e003      	b.n	15d82 <dmConnSmExecute+0x8e>
     dmConnSmActNone(pCcb, pMsg);
   15d7a:	9900      	ldr	r1, [sp, #0]
   15d7c:	9801      	ldr	r0, [sp, #4]
   15d7e:	f7ff f811 	bl	14da4 <dmConnSmActNone>
}
   15d82:	bf00      	nop
   15d84:	b005      	add	sp, #20
   15d86:	f85d fb04 	ldr.w	pc, [sp], #4
   15d8a:	bf00      	nop
   15d8c:	0002843c 	.word	0x0002843c
   15d90:	100044e4 	.word	0x100044e4

00015d94 <dmDevActReset>:
 *
 *  \return None.
*/
/*************************************************************************************************/
void dmDevActReset(wsfMsgHdr_t *pMsg)
{
   15d94:	b500      	push	{lr}
   15d96:	b085      	sub	sp, #20
   15d98:	9001      	str	r0, [sp, #4]
  uint8_t i;

  /* if DM not resetting */
  if (!dmCb.resetting)
   15d9a:	4b10      	ldr	r3, [pc, #64]	; (15ddc <dmDevActReset+0x48>)
   15d9c:	7c1b      	ldrb	r3, [r3, #16]
   15d9e:	2b00      	cmp	r3, #0
   15da0:	d118      	bne.n	15dd4 <dmDevActReset+0x40>
  {
    /* set resetting state */
    dmCb.resetting = TRUE;
   15da2:	4b0e      	ldr	r3, [pc, #56]	; (15ddc <dmDevActReset+0x48>)
   15da4:	2201      	movs	r2, #1
   15da6:	741a      	strb	r2, [r3, #16]

    /* for each DM component */
    for (i = 0; i < DM_NUM_IDS; i++)
   15da8:	2300      	movs	r3, #0
   15daa:	f88d 300f 	strb.w	r3, [sp, #15]
   15dae:	e00b      	b.n	15dc8 <dmDevActReset+0x34>
    {
      /* call component's reset function */
      (*(dmFcnIfTbl[i]->reset))();
   15db0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15db4:	4a0a      	ldr	r2, [pc, #40]	; (15de0 <dmDevActReset+0x4c>)
   15db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dba:	681b      	ldr	r3, [r3, #0]
   15dbc:	4798      	blx	r3
    for (i = 0; i < DM_NUM_IDS; i++)
   15dbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15dc2:	3301      	adds	r3, #1
   15dc4:	f88d 300f 	strb.w	r3, [sp, #15]
   15dc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15dcc:	2b0d      	cmp	r3, #13
   15dce:	d9ef      	bls.n	15db0 <dmDevActReset+0x1c>
    }

    /* start HCI reset sequence */
    HciResetSequence();
   15dd0:	f7f8 f992 	bl	e0f8 <HciResetSequence>
  }
}
   15dd4:	bf00      	nop
   15dd6:	b005      	add	sp, #20
   15dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   15ddc:	100044f4 	.word	0x100044f4
   15de0:	10002b0c 	.word	0x10002b0c

00015de4 <dmDevHciEvtReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmDevHciEvtReset(hciEvt_t *pEvent)
{
   15de4:	b500      	push	{lr}
   15de6:	b083      	sub	sp, #12
   15de8:	9001      	str	r0, [sp, #4]
  /* reset resetting state */
  dmCb.resetting = FALSE;
   15dea:	4b07      	ldr	r3, [pc, #28]	; (15e08 <dmDevHciEvtReset+0x24>)
   15dec:	2200      	movs	r2, #0
   15dee:	741a      	strb	r2, [r3, #16]

  pEvent->hdr.event = DM_RESET_CMPL_IND;
   15df0:	9b01      	ldr	r3, [sp, #4]
   15df2:	2220      	movs	r2, #32
   15df4:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   15df6:	4b04      	ldr	r3, [pc, #16]	; (15e08 <dmDevHciEvtReset+0x24>)
   15df8:	689b      	ldr	r3, [r3, #8]
   15dfa:	9801      	ldr	r0, [sp, #4]
   15dfc:	4798      	blx	r3
}
   15dfe:	bf00      	nop
   15e00:	b003      	add	sp, #12
   15e02:	f85d fb04 	ldr.w	pc, [sp], #4
   15e06:	bf00      	nop
   15e08:	100044f4 	.word	0x100044f4

00015e0c <dmDevHciEvtVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmDevHciEvtVendorSpec(hciEvt_t *pEvent)
{
   15e0c:	b500      	push	{lr}
   15e0e:	b083      	sub	sp, #12
   15e10:	9001      	str	r0, [sp, #4]
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
   15e12:	9b01      	ldr	r3, [sp, #4]
   15e14:	2267      	movs	r2, #103	; 0x67
   15e16:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   15e18:	4b03      	ldr	r3, [pc, #12]	; (15e28 <dmDevHciEvtVendorSpec+0x1c>)
   15e1a:	689b      	ldr	r3, [r3, #8]
   15e1c:	9801      	ldr	r0, [sp, #4]
   15e1e:	4798      	blx	r3
}
   15e20:	bf00      	nop
   15e22:	b003      	add	sp, #12
   15e24:	f85d fb04 	ldr.w	pc, [sp], #4
   15e28:	100044f4 	.word	0x100044f4

00015e2c <dmDevHciEvtHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmDevHciEvtHwError(hciEvt_t *pEvent)
{
   15e2c:	b500      	push	{lr}
   15e2e:	b083      	sub	sp, #12
   15e30:	9001      	str	r0, [sp, #4]
  pEvent->hdr.event = DM_HW_ERROR_IND;
   15e32:	9b01      	ldr	r3, [sp, #4]
   15e34:	2266      	movs	r2, #102	; 0x66
   15e36:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   15e38:	4b03      	ldr	r3, [pc, #12]	; (15e48 <dmDevHciEvtHwError+0x1c>)
   15e3a:	689b      	ldr	r3, [r3, #8]
   15e3c:	9801      	ldr	r0, [sp, #4]
   15e3e:	4798      	blx	r3
}
   15e40:	bf00      	nop
   15e42:	b003      	add	sp, #12
   15e44:	f85d fb04 	ldr.w	pc, [sp], #4
   15e48:	100044f4 	.word	0x100044f4

00015e4c <dmDevHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevHciHandler(hciEvt_t *pEvent)
{
   15e4c:	b500      	push	{lr}
   15e4e:	b083      	sub	sp, #12
   15e50:	9001      	str	r0, [sp, #4]
  switch (pEvent->hdr.event)
   15e52:	9b01      	ldr	r3, [sp, #4]
   15e54:	789b      	ldrb	r3, [r3, #2]
   15e56:	2b14      	cmp	r3, #20
   15e58:	d011      	beq.n	15e7e <dmDevHciHandler+0x32>
   15e5a:	2b14      	cmp	r3, #20
   15e5c:	dc13      	bgt.n	15e86 <dmDevHciHandler+0x3a>
   15e5e:	2b00      	cmp	r3, #0
   15e60:	d005      	beq.n	15e6e <dmDevHciHandler+0x22>
   15e62:	2b00      	cmp	r3, #0
   15e64:	db0f      	blt.n	15e86 <dmDevHciHandler+0x3a>
   15e66:	3b12      	subs	r3, #18
   15e68:	2b01      	cmp	r3, #1
   15e6a:	d80c      	bhi.n	15e86 <dmDevHciHandler+0x3a>
   15e6c:	e003      	b.n	15e76 <dmDevHciHandler+0x2a>
  {
    case HCI_RESET_SEQ_CMPL_CBACK_EVT:
      dmDevHciEvtReset(pEvent);
   15e6e:	9801      	ldr	r0, [sp, #4]
   15e70:	f7ff ffb8 	bl	15de4 <dmDevHciEvtReset>
      break;
   15e74:	e008      	b.n	15e88 <dmDevHciHandler+0x3c>

    case HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT:
    case HCI_VENDOR_SPEC_CBACK_EVT:
      dmDevHciEvtVendorSpec(pEvent);
   15e76:	9801      	ldr	r0, [sp, #4]
   15e78:	f7ff ffc8 	bl	15e0c <dmDevHciEvtVendorSpec>
      break;
   15e7c:	e004      	b.n	15e88 <dmDevHciHandler+0x3c>

    case HCI_HW_ERROR_CBACK_EVT:
      dmDevHciEvtHwError(pEvent);
   15e7e:	9801      	ldr	r0, [sp, #4]
   15e80:	f7ff ffd4 	bl	15e2c <dmDevHciEvtHwError>
      break;
   15e84:	e000      	b.n	15e88 <dmDevHciHandler+0x3c>

    default:
      /* ignore event */
      break;
   15e86:	bf00      	nop
  }
}
   15e88:	bf00      	nop
   15e8a:	b003      	add	sp, #12
   15e8c:	f85d fb04 	ldr.w	pc, [sp], #4

00015e90 <dmDevMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevMsgHandler(wsfMsgHdr_t *pMsg)
{
   15e90:	b500      	push	{lr}
   15e92:	b083      	sub	sp, #12
   15e94:	9001      	str	r0, [sp, #4]
  /* execute action function */
  (*dmDevAct[DM_MSG_MASK(pMsg->event)])(pMsg);
   15e96:	4b03      	ldr	r3, [pc, #12]	; (15ea4 <dmDevMsgHandler+0x14>)
   15e98:	9801      	ldr	r0, [sp, #4]
   15e9a:	4798      	blx	r3
}
   15e9c:	bf00      	nop
   15e9e:	b003      	add	sp, #12
   15ea0:	f85d fb04 	ldr.w	pc, [sp], #4
   15ea4:	00015d95 	.word	0x00015d95

00015ea8 <dmDevPassEvtToDevPriv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToDevPriv(uint8_t event, uint8_t param, uint8_t advHandle, bool_t connectable)
{
   15ea8:	b510      	push	{r4, lr}
   15eaa:	b084      	sub	sp, #16
   15eac:	4604      	mov	r4, r0
   15eae:	4608      	mov	r0, r1
   15eb0:	4611      	mov	r1, r2
   15eb2:	461a      	mov	r2, r3
   15eb4:	4623      	mov	r3, r4
   15eb6:	f88d 3007 	strb.w	r3, [sp, #7]
   15eba:	4603      	mov	r3, r0
   15ebc:	f88d 3006 	strb.w	r3, [sp, #6]
   15ec0:	460b      	mov	r3, r1
   15ec2:	f88d 3005 	strb.w	r3, [sp, #5]
   15ec6:	4613      	mov	r3, r2
   15ec8:	f88d 3004 	strb.w	r3, [sp, #4]
  dmDevPrivMsg_t evt;

  DM_TRACE_INFO3("dmDevPassEvtToDevPriv: event: %d, param: %d, advHandle: %d", event, param, advHandle);

  /* build event */
  evt.hdr.event = event;
   15ecc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15ed0:	f88d 300a 	strb.w	r3, [sp, #10]
  evt.hdr.param = param;
   15ed4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15ed8:	b29b      	uxth	r3, r3
   15eda:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.privCtrl.advHandle = advHandle;
   15ede:	f89d 3005 	ldrb.w	r3, [sp, #5]
   15ee2:	f88d 300c 	strb.w	r3, [sp, #12]
  evt.privCtrl.connectable = connectable;
   15ee6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   15eea:	f88d 300d 	strb.w	r3, [sp, #13]

  /* pass event to device privacy */
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   15eee:	4b04      	ldr	r3, [pc, #16]	; (15f00 <dmDevPassEvtToDevPriv+0x58>)
   15ef0:	685b      	ldr	r3, [r3, #4]
   15ef2:	689b      	ldr	r3, [r3, #8]
   15ef4:	aa02      	add	r2, sp, #8
   15ef6:	4610      	mov	r0, r2
   15ef8:	4798      	blx	r3
}
   15efa:	bf00      	nop
   15efc:	b004      	add	sp, #16
   15efe:	bd10      	pop	{r4, pc}
   15f00:	10002b0c 	.word	0x10002b0c

00015f04 <dmDevPassEvtToConnCte>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToConnCte(uint8_t state, dmConnId_t connId)
{
   15f04:	b500      	push	{lr}
   15f06:	b085      	sub	sp, #20
   15f08:	4603      	mov	r3, r0
   15f0a:	460a      	mov	r2, r1
   15f0c:	f88d 3007 	strb.w	r3, [sp, #7]
   15f10:	4613      	mov	r3, r2
   15f12:	f88d 3006 	strb.w	r3, [sp, #6]
  wsfMsgHdr_t evt;

  /* build event */
  evt.event = DM_CONN_CTE_MSG_STATE;
   15f16:	23d7      	movs	r3, #215	; 0xd7
   15f18:	f88d 300e 	strb.w	r3, [sp, #14]
  evt.status = state;
   15f1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f20:	f88d 300f 	strb.w	r3, [sp, #15]
  evt.param = connId;
   15f24:	f89d 3006 	ldrb.w	r3, [sp, #6]
   15f28:	b29b      	uxth	r3, r3
   15f2a:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* pass event to Connection CTE */
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   15f2e:	4b05      	ldr	r3, [pc, #20]	; (15f44 <dmDevPassEvtToConnCte+0x40>)
   15f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15f32:	689b      	ldr	r3, [r3, #8]
   15f34:	aa03      	add	r2, sp, #12
   15f36:	4610      	mov	r0, r2
   15f38:	4798      	blx	r3
}
   15f3a:	bf00      	nop
   15f3c:	b005      	add	sp, #20
   15f3e:	f85d fb04 	ldr.w	pc, [sp], #4
   15f42:	bf00      	nop
   15f44:	10002b0c 	.word	0x10002b0c

00015f48 <DmDevReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevReset(void)
{
   15f48:	b500      	push	{lr}
   15f4a:	b083      	sub	sp, #12
  wsfMsgHdr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   15f4c:	2004      	movs	r0, #4
   15f4e:	f009 fcd1 	bl	1f8f4 <WsfMsgAlloc>
   15f52:	9001      	str	r0, [sp, #4]
   15f54:	9b01      	ldr	r3, [sp, #4]
   15f56:	2b00      	cmp	r3, #0
   15f58:	d008      	beq.n	15f6c <DmDevReset+0x24>
  {
    pMsg->event = DM_DEV_MSG_API_RESET;
   15f5a:	9b01      	ldr	r3, [sp, #4]
   15f5c:	2270      	movs	r2, #112	; 0x70
   15f5e:	709a      	strb	r2, [r3, #2]

    WsfMsgSend(dmCb.handlerId, pMsg);
   15f60:	4b04      	ldr	r3, [pc, #16]	; (15f74 <DmDevReset+0x2c>)
   15f62:	7b1b      	ldrb	r3, [r3, #12]
   15f64:	9901      	ldr	r1, [sp, #4]
   15f66:	4618      	mov	r0, r3
   15f68:	f009 fce8 	bl	1f93c <WsfMsgSend>
  }
}
   15f6c:	bf00      	nop
   15f6e:	b003      	add	sp, #12
   15f70:	f85d fb04 	ldr.w	pc, [sp], #4
   15f74:	100044f4 	.word	0x100044f4

00015f78 <DmDevVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevVsInit(uint8_t param)
{
   15f78:	b500      	push	{lr}
   15f7a:	b083      	sub	sp, #12
   15f7c:	4603      	mov	r3, r0
   15f7e:	f88d 3007 	strb.w	r3, [sp, #7]
  HciVsInit(param);
   15f82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f86:	4618      	mov	r0, r3
   15f88:	f00b fbbe 	bl	21708 <HciVsInit>
}
   15f8c:	bf00      	nop
   15f8e:	b003      	add	sp, #12
   15f90:	f85d fb04 	ldr.w	pc, [sp], #4

00015f94 <dmHciEvtCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmHciEvtCback(hciEvt_t *pEvent)
{
   15f94:	b500      	push	{lr}
   15f96:	b083      	sub	sp, #12
   15f98:	9001      	str	r0, [sp, #4]
  WSF_ASSERT(pEvent->hdr.event <= HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT);

  /* if DM not resetting or resetting but incoming event is HCI reset sequence complete event */
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
   15f9a:	4b0c      	ldr	r3, [pc, #48]	; (15fcc <dmHciEvtCback+0x38>)
   15f9c:	7c1b      	ldrb	r3, [r3, #16]
   15f9e:	2b00      	cmp	r3, #0
   15fa0:	d003      	beq.n	15faa <dmHciEvtCback+0x16>
   15fa2:	9b01      	ldr	r3, [sp, #4]
   15fa4:	789b      	ldrb	r3, [r3, #2]
   15fa6:	2b00      	cmp	r3, #0
   15fa8:	d10b      	bne.n	15fc2 <dmHciEvtCback+0x2e>
  {
    /* route event to DM component handling function */
    (*(dmFcnIfTbl[dmHciToIdTbl[pEvent->hdr.event]]->hciHandler))(pEvent);
   15faa:	9b01      	ldr	r3, [sp, #4]
   15fac:	789b      	ldrb	r3, [r3, #2]
   15fae:	461a      	mov	r2, r3
   15fb0:	4b07      	ldr	r3, [pc, #28]	; (15fd0 <dmHciEvtCback+0x3c>)
   15fb2:	5c9b      	ldrb	r3, [r3, r2]
   15fb4:	461a      	mov	r2, r3
   15fb6:	4b07      	ldr	r3, [pc, #28]	; (15fd4 <dmHciEvtCback+0x40>)
   15fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15fbc:	685b      	ldr	r3, [r3, #4]
   15fbe:	9801      	ldr	r0, [sp, #4]
   15fc0:	4798      	blx	r3
  }
}
   15fc2:	bf00      	nop
   15fc4:	b003      	add	sp, #12
   15fc6:	f85d fb04 	ldr.w	pc, [sp], #4
   15fca:	bf00      	nop
   15fcc:	100044f4 	.word	0x100044f4
   15fd0:	000284cc 	.word	0x000284cc
   15fd4:	10002b0c 	.word	0x10002b0c

00015fd8 <dmEmptyReset>:
 */
/*************************************************************************************************/
void dmEmptyReset(void)
{
  /* empty */
}
   15fd8:	bf00      	nop
   15fda:	4770      	bx	lr

00015fdc <dmEmptyHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmEmptyHandler(wsfMsgHdr_t *pMsg)
{
   15fdc:	b082      	sub	sp, #8
   15fde:	9001      	str	r0, [sp, #4]
  return;
   15fe0:	bf00      	nop
}
   15fe2:	b002      	add	sp, #8
   15fe4:	4770      	bx	lr
	...

00015fe8 <dmDevPassHciEvtToConn>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassHciEvtToConn(hciEvt_t *pEvent)
{
   15fe8:	b500      	push	{lr}
   15fea:	b083      	sub	sp, #12
   15fec:	9001      	str	r0, [sp, #4]
  /* pass event to DM connection management module */
  (*(dmFcnIfTbl[DM_ID_CONN]->hciHandler))(pEvent);
   15fee:	4b04      	ldr	r3, [pc, #16]	; (16000 <dmDevPassHciEvtToConn+0x18>)
   15ff0:	68db      	ldr	r3, [r3, #12]
   15ff2:	685b      	ldr	r3, [r3, #4]
   15ff4:	9801      	ldr	r0, [sp, #4]
   15ff6:	4798      	blx	r3
}
   15ff8:	bf00      	nop
   15ffa:	b003      	add	sp, #12
   15ffc:	f85d fb04 	ldr.w	pc, [sp], #4
   16000:	10002b0c 	.word	0x10002b0c

00016004 <DmRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmRegister(dmCback_t cback)
{
   16004:	b500      	push	{lr}
   16006:	b09d      	sub	sp, #116	; 0x74
   16008:	9001      	str	r0, [sp, #4]
  dmCb.cback = cback;
   1600a:	4a0f      	ldr	r2, [pc, #60]	; (16048 <DmRegister+0x44>)
   1600c:	9b01      	ldr	r3, [sp, #4]
   1600e:	6093      	str	r3, [r2, #8]

  /* if LESC is enabled */
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   16010:	4b0e      	ldr	r3, [pc, #56]	; (1604c <DmRegister+0x48>)
   16012:	6a1b      	ldr	r3, [r3, #32]
   16014:	4a0e      	ldr	r2, [pc, #56]	; (16050 <DmRegister+0x4c>)
   16016:	4293      	cmp	r3, r2
   16018:	d012      	beq.n	16040 <DmRegister+0x3c>
  {
    /* if largest LESC key length is larger than maximum RX PDU length */
    if (SMP_PUB_KEY_MSG_LEN > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   1601a:	f7f8 fa33 	bl	e484 <HciGetMaxRxAclLen>
   1601e:	4603      	mov	r3, r0
   16020:	2b44      	cmp	r3, #68	; 0x44
   16022:	d80d      	bhi.n	16040 <DmRegister+0x3c>
    {
      dmEvt_t evt;

      evt.hdr.param = 0;
   16024:	2300      	movs	r3, #0
   16026:	f8ad 300c 	strh.w	r3, [sp, #12]
      evt.hdr.event = DM_ERROR_IND;
   1602a:	2365      	movs	r3, #101	; 0x65
   1602c:	f88d 300e 	strb.w	r3, [sp, #14]
      evt.hdr.status = DM_ERR_SMP_RX_PDU_LEN_EXCEEDED;
   16030:	2301      	movs	r3, #1
   16032:	f88d 300f 	strb.w	r3, [sp, #15]

      (*dmCb.cback)(&evt);
   16036:	4b04      	ldr	r3, [pc, #16]	; (16048 <DmRegister+0x44>)
   16038:	689b      	ldr	r3, [r3, #8]
   1603a:	aa03      	add	r2, sp, #12
   1603c:	4610      	mov	r0, r2
   1603e:	4798      	blx	r3
    }
  }
}
   16040:	bf00      	nop
   16042:	b01d      	add	sp, #116	; 0x74
   16044:	f85d fb04 	ldr.w	pc, [sp], #4
   16048:	100044f4 	.word	0x100044f4
   1604c:	10002b0c 	.word	0x10002b0c
   16050:	000285a4 	.word	0x000285a4

00016054 <DmHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmHandlerInit(wsfHandlerId_t handlerId)
{
   16054:	b500      	push	{lr}
   16056:	b083      	sub	sp, #12
   16058:	4603      	mov	r3, r0
   1605a:	f88d 3007 	strb.w	r3, [sp, #7]
  /* store handler ID */
  dmCb.handlerId = handlerId;
   1605e:	4a08      	ldr	r2, [pc, #32]	; (16080 <DmHandlerInit+0x2c>)
   16060:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16064:	7313      	strb	r3, [r2, #12]

  dmCb.llPrivEnabled = FALSE;
   16066:	4b06      	ldr	r3, [pc, #24]	; (16080 <DmHandlerInit+0x2c>)
   16068:	2200      	movs	r2, #0
   1606a:	759a      	strb	r2, [r3, #22]
  dmCb.resetting = FALSE;
   1606c:	4b04      	ldr	r3, [pc, #16]	; (16080 <DmHandlerInit+0x2c>)
   1606e:	2200      	movs	r2, #0
   16070:	741a      	strb	r2, [r3, #16]

  /* register with the HCI event interface */
  HciEvtRegister(dmHciEvtCback);
   16072:	4804      	ldr	r0, [pc, #16]	; (16084 <DmHandlerInit+0x30>)
   16074:	f7fa fce4 	bl	10a40 <HciEvtRegister>
}
   16078:	bf00      	nop
   1607a:	b003      	add	sp, #12
   1607c:	f85d fb04 	ldr.w	pc, [sp], #4
   16080:	100044f4 	.word	0x100044f4
   16084:	00015f95 	.word	0x00015f95

00016088 <DmHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   16088:	b500      	push	{lr}
   1608a:	b083      	sub	sp, #12
   1608c:	4603      	mov	r3, r0
   1608e:	9100      	str	r1, [sp, #0]
   16090:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Handle message */
  if (pMsg != NULL)
   16094:	9b00      	ldr	r3, [sp, #0]
   16096:	2b00      	cmp	r3, #0
   16098:	d00e      	beq.n	160b8 <DmHandler+0x30>
  {
    WSF_ASSERT(DM_ID_FROM_MSG(pMsg->event) < DM_NUM_IDS);

    /* if DM not resetting */
    if (!dmCb.resetting)
   1609a:	4b09      	ldr	r3, [pc, #36]	; (160c0 <DmHandler+0x38>)
   1609c:	7c1b      	ldrb	r3, [r3, #16]
   1609e:	2b00      	cmp	r3, #0
   160a0:	d10a      	bne.n	160b8 <DmHandler+0x30>
    {
      /* route message to DM component handling function */
      (*(dmFcnIfTbl[DM_ID_FROM_MSG(pMsg->event)]->msgHandler))(pMsg);
   160a2:	9b00      	ldr	r3, [sp, #0]
   160a4:	789b      	ldrb	r3, [r3, #2]
   160a6:	091b      	lsrs	r3, r3, #4
   160a8:	b2db      	uxtb	r3, r3
   160aa:	461a      	mov	r2, r3
   160ac:	4b05      	ldr	r3, [pc, #20]	; (160c4 <DmHandler+0x3c>)
   160ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   160b2:	689b      	ldr	r3, [r3, #8]
   160b4:	9800      	ldr	r0, [sp, #0]
   160b6:	4798      	blx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   160b8:	bf00      	nop
   160ba:	b003      	add	sp, #12
   160bc:	f85d fb04 	ldr.w	pc, [sp], #4
   160c0:	100044f4 	.word	0x100044f4
   160c4:	10002b0c 	.word	0x10002b0c

000160c8 <DmLlPrivEnabled>:
 *  \return TRUE if LL Privacy is enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmLlPrivEnabled(void)
{
  return dmCb.llPrivEnabled;
   160c8:	4b01      	ldr	r3, [pc, #4]	; (160d0 <DmLlPrivEnabled+0x8>)
   160ca:	7d9b      	ldrb	r3, [r3, #22]
}
   160cc:	4618      	mov	r0, r3
   160ce:	4770      	bx	lr
   160d0:	100044f4 	.word	0x100044f4

000160d4 <DmLlAddrType>:
 *
 *  \return Address type used by LL.
 */
/*************************************************************************************************/
uint8_t DmLlAddrType(uint8_t addrType)
{
   160d4:	b084      	sub	sp, #16
   160d6:	4603      	mov	r3, r0
   160d8:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t llAddrType = addrType;
   160dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   160e0:	f88d 300f 	strb.w	r3, [sp, #15]

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   160e4:	4b0b      	ldr	r3, [pc, #44]	; (16114 <DmLlAddrType+0x40>)
   160e6:	7d9b      	ldrb	r3, [r3, #22]
   160e8:	2b00      	cmp	r3, #0
   160ea:	d00e      	beq.n	1610a <DmLlAddrType+0x36>
  {
    if (addrType == DM_ADDR_PUBLIC)
   160ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   160f0:	2b00      	cmp	r3, #0
   160f2:	d103      	bne.n	160fc <DmLlAddrType+0x28>
    {
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
   160f4:	2302      	movs	r3, #2
   160f6:	f88d 300f 	strb.w	r3, [sp, #15]
   160fa:	e006      	b.n	1610a <DmLlAddrType+0x36>
    }
    else if (addrType == DM_ADDR_RANDOM)
   160fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16100:	2b01      	cmp	r3, #1
   16102:	d102      	bne.n	1610a <DmLlAddrType+0x36>
    {
      llAddrType = DM_ADDR_RANDOM_IDENTITY;
   16104:	2303      	movs	r3, #3
   16106:	f88d 300f 	strb.w	r3, [sp, #15]
    }
  }

  return llAddrType;
   1610a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1610e:	4618      	mov	r0, r3
   16110:	b004      	add	sp, #16
   16112:	4770      	bx	lr
   16114:	100044f4 	.word	0x100044f4

00016118 <DmHostAddrType>:
 *
 *  \return Address type used by Host.
 */
/*************************************************************************************************/
uint8_t DmHostAddrType(uint8_t addrType)
{
   16118:	b084      	sub	sp, #16
   1611a:	4603      	mov	r3, r0
   1611c:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t hostAddrType = addrType;
   16120:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16124:	f88d 300f 	strb.w	r3, [sp, #15]

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   16128:	4b0b      	ldr	r3, [pc, #44]	; (16158 <DmHostAddrType+0x40>)
   1612a:	7d9b      	ldrb	r3, [r3, #22]
   1612c:	2b00      	cmp	r3, #0
   1612e:	d00e      	beq.n	1614e <DmHostAddrType+0x36>
  {
    if (addrType == DM_ADDR_PUBLIC_IDENTITY)
   16130:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16134:	2b02      	cmp	r3, #2
   16136:	d103      	bne.n	16140 <DmHostAddrType+0x28>
    {
      hostAddrType = DM_ADDR_PUBLIC;
   16138:	2300      	movs	r3, #0
   1613a:	f88d 300f 	strb.w	r3, [sp, #15]
   1613e:	e006      	b.n	1614e <DmHostAddrType+0x36>
    }
    else if (addrType == DM_ADDR_RANDOM_IDENTITY)
   16140:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16144:	2b03      	cmp	r3, #3
   16146:	d102      	bne.n	1614e <DmHostAddrType+0x36>
    {
      hostAddrType = DM_ADDR_RANDOM;
   16148:	2301      	movs	r3, #1
   1614a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
  }

  return hostAddrType;
   1614e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   16152:	4618      	mov	r0, r3
   16154:	b004      	add	sp, #16
   16156:	4770      	bx	lr
   16158:	100044f4 	.word	0x100044f4

0001615c <DmSizeOfEvt>:
 *
 *  \return Size of DM callback event.
 */
/*************************************************************************************************/
uint16_t DmSizeOfEvt(dmEvt_t *pDmEvt)
{
   1615c:	b084      	sub	sp, #16
   1615e:	9001      	str	r0, [sp, #4]
  uint16_t len;

  /* if a valid DM event ID */
  if ((pDmEvt->hdr.event >= DM_CBACK_START) && (pDmEvt->hdr.event <= DM_CBACK_END))
   16160:	9b01      	ldr	r3, [sp, #4]
   16162:	789b      	ldrb	r3, [r3, #2]
   16164:	2b1f      	cmp	r3, #31
   16166:	d90c      	bls.n	16182 <DmSizeOfEvt+0x26>
   16168:	9b01      	ldr	r3, [sp, #4]
   1616a:	789b      	ldrb	r3, [r3, #2]
   1616c:	2b68      	cmp	r3, #104	; 0x68
   1616e:	d808      	bhi.n	16182 <DmSizeOfEvt+0x26>
  {
    len = dmEvtCbackLen[pDmEvt->hdr.event - DM_CBACK_START];
   16170:	9b01      	ldr	r3, [sp, #4]
   16172:	789b      	ldrb	r3, [r3, #2]
   16174:	3b20      	subs	r3, #32
   16176:	4a07      	ldr	r2, [pc, #28]	; (16194 <DmSizeOfEvt+0x38>)
   16178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1617c:	f8ad 300e 	strh.w	r3, [sp, #14]
   16180:	e002      	b.n	16188 <DmSizeOfEvt+0x2c>
  }
  else
  {
    len = sizeof(wsfMsgHdr_t);
   16182:	2304      	movs	r3, #4
   16184:	f8ad 300e 	strh.w	r3, [sp, #14]
  }

  return len;
   16188:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   1618c:	4618      	mov	r0, r3
   1618e:	b004      	add	sp, #16
   16190:	4770      	bx	lr
   16192:	bf00      	nop
   16194:	00028514 	.word	0x00028514

00016198 <dmPrivActResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActResolveAddr(dmPrivMsg_t *pMsg)
{
   16198:	b510      	push	{r4, lr}
   1619a:	b088      	sub	sp, #32
   1619c:	9003      	str	r0, [sp, #12]
  uint8_t buf[DM_PRIV_PLAINTEXT_LEN];

  /* verify no resolution procedure currently in progress */
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
   1619e:	4b1e      	ldr	r3, [pc, #120]	; (16218 <dmPrivActResolveAddr+0x80>)
   161a0:	78db      	ldrb	r3, [r3, #3]
   161a2:	f003 0301 	and.w	r3, r3, #1
   161a6:	2b00      	cmp	r3, #0
   161a8:	d129      	bne.n	161fe <dmPrivActResolveAddr+0x66>
  {
    /* store hash */
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
   161aa:	9b03      	ldr	r3, [sp, #12]
   161ac:	f103 0214 	add.w	r2, r3, #20
   161b0:	4b19      	ldr	r3, [pc, #100]	; (16218 <dmPrivActResolveAddr+0x80>)
   161b2:	8811      	ldrh	r1, [r2, #0]
   161b4:	7892      	ldrb	r2, [r2, #2]
   161b6:	8019      	strh	r1, [r3, #0]
   161b8:	709a      	strb	r2, [r3, #2]

    /* copy random part of address with padding for address resolution calculation */
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
   161ba:	9b03      	ldr	r3, [sp, #12]
   161bc:	f103 0117 	add.w	r1, r3, #23
   161c0:	ab04      	add	r3, sp, #16
   161c2:	2203      	movs	r2, #3
   161c4:	4618      	mov	r0, r3
   161c6:	f7f5 ff9b 	bl	c100 <memcpy>
    memset(buf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   161ca:	ab04      	add	r3, sp, #16
   161cc:	3303      	adds	r3, #3
   161ce:	220d      	movs	r2, #13
   161d0:	2100      	movs	r1, #0
   161d2:	4618      	mov	r0, r3
   161d4:	f00f fa72 	bl	256bc <memset>

    /* set in progress */
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_RES_ADDR;
   161d8:	4b0f      	ldr	r3, [pc, #60]	; (16218 <dmPrivActResolveAddr+0x80>)
   161da:	78db      	ldrb	r3, [r3, #3]
   161dc:	f043 0301 	orr.w	r3, r3, #1
   161e0:	b2da      	uxtb	r2, r3
   161e2:	4b0d      	ldr	r3, [pc, #52]	; (16218 <dmPrivActResolveAddr+0x80>)
   161e4:	70da      	strb	r2, [r3, #3]

    /* run calculation */
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   161e6:	9b03      	ldr	r3, [sp, #12]
   161e8:	1d18      	adds	r0, r3, #4
   161ea:	4b0c      	ldr	r3, [pc, #48]	; (1621c <dmPrivActResolveAddr+0x84>)
   161ec:	7b1a      	ldrb	r2, [r3, #12]
   161ee:	9b03      	ldr	r3, [sp, #12]
   161f0:	881b      	ldrh	r3, [r3, #0]
   161f2:	a904      	add	r1, sp, #16
   161f4:	2461      	movs	r4, #97	; 0x61
   161f6:	9400      	str	r4, [sp, #0]
   161f8:	f000 ffde 	bl	171b8 <SecAes>
    /* call callback with error (note hdr.param is already set) */
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
}
   161fc:	e009      	b.n	16212 <dmPrivActResolveAddr+0x7a>
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
   161fe:	9b03      	ldr	r3, [sp, #12]
   16200:	2207      	movs	r2, #7
   16202:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   16204:	9b03      	ldr	r3, [sp, #12]
   16206:	2237      	movs	r2, #55	; 0x37
   16208:	709a      	strb	r2, [r3, #2]
    (*dmCb.cback)((dmEvt_t *) pMsg);
   1620a:	4b04      	ldr	r3, [pc, #16]	; (1621c <dmPrivActResolveAddr+0x84>)
   1620c:	689b      	ldr	r3, [r3, #8]
   1620e:	9803      	ldr	r0, [sp, #12]
   16210:	4798      	blx	r3
}
   16212:	bf00      	nop
   16214:	b008      	add	sp, #32
   16216:	bd10      	pop	{r4, pc}
   16218:	1000450c 	.word	0x1000450c
   1621c:	100044f4 	.word	0x100044f4

00016220 <dmPrivActResAddrAesCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActResAddrAesCmpl(dmPrivMsg_t *pMsg)
{
   16220:	b500      	push	{lr}
   16222:	b083      	sub	sp, #12
   16224:	9001      	str	r0, [sp, #4]
  /* compare calculated value with hash */
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
   16226:	9b01      	ldr	r3, [sp, #4]
   16228:	685b      	ldr	r3, [r3, #4]
   1622a:	2203      	movs	r2, #3
   1622c:	4619      	mov	r1, r3
   1622e:	480f      	ldr	r0, [pc, #60]	; (1626c <dmPrivActResAddrAesCmpl+0x4c>)
   16230:	f00f fa12 	bl	25658 <memcmp>
   16234:	4603      	mov	r3, r0
   16236:	2b00      	cmp	r3, #0
   16238:	d103      	bne.n	16242 <dmPrivActResAddrAesCmpl+0x22>
  {
    pMsg->hdr.status = HCI_SUCCESS;
   1623a:	9b01      	ldr	r3, [sp, #4]
   1623c:	2200      	movs	r2, #0
   1623e:	70da      	strb	r2, [r3, #3]
   16240:	e002      	b.n	16248 <dmPrivActResAddrAesCmpl+0x28>
  }
  else
  {
    pMsg->hdr.status = HCI_ERR_AUTH_FAILURE;
   16242:	9b01      	ldr	r3, [sp, #4]
   16244:	2205      	movs	r2, #5
   16246:	70da      	strb	r2, [r3, #3]
  }

  /* clear in progress */
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
   16248:	4b08      	ldr	r3, [pc, #32]	; (1626c <dmPrivActResAddrAesCmpl+0x4c>)
   1624a:	78db      	ldrb	r3, [r3, #3]
   1624c:	f023 0301 	bic.w	r3, r3, #1
   16250:	b2da      	uxtb	r2, r3
   16252:	4b06      	ldr	r3, [pc, #24]	; (1626c <dmPrivActResAddrAesCmpl+0x4c>)
   16254:	70da      	strb	r2, [r3, #3]

  /* call client callback (note hdr.param is already set) */
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   16256:	9b01      	ldr	r3, [sp, #4]
   16258:	2237      	movs	r2, #55	; 0x37
   1625a:	709a      	strb	r2, [r3, #2]
  (*dmCb.cback)((dmEvt_t *) pMsg);
   1625c:	4b04      	ldr	r3, [pc, #16]	; (16270 <dmPrivActResAddrAesCmpl+0x50>)
   1625e:	689b      	ldr	r3, [r3, #8]
   16260:	9801      	ldr	r0, [sp, #4]
   16262:	4798      	blx	r3
}
   16264:	bf00      	nop
   16266:	b003      	add	sp, #12
   16268:	f85d fb04 	ldr.w	pc, [sp], #4
   1626c:	1000450c 	.word	0x1000450c
   16270:	100044f4 	.word	0x100044f4

00016274 <dmPrivActAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActAddDevToResList(dmPrivMsg_t *pMsg)
{
   16274:	b500      	push	{lr}
   16276:	b085      	sub	sp, #20
   16278:	9001      	str	r0, [sp, #4]
  dmPrivApiAddDevToResList_t *pDev = &pMsg->apiAddDevToResList;
   1627a:	9b01      	ldr	r3, [sp, #4]
   1627c:	9303      	str	r3, [sp, #12]

  /* save whether asked to enable address resolution */
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
   1627e:	9b03      	ldr	r3, [sp, #12]
   16280:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   16284:	4b0a      	ldr	r3, [pc, #40]	; (162b0 <dmPrivActAddDevToResList+0x3c>)
   16286:	721a      	strb	r2, [r3, #8]

  /* save client-defined parameter for callback event */
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
   16288:	9b01      	ldr	r3, [sp, #4]
   1628a:	881a      	ldrh	r2, [r3, #0]
   1628c:	4b08      	ldr	r3, [pc, #32]	; (162b0 <dmPrivActAddDevToResList+0x3c>)
   1628e:	809a      	strh	r2, [r3, #4]

  /* add device to resolving list */
  HciLeAddDeviceToResolvingListCmd(pDev->addrType, pDev->peerAddr, pDev->peerIrk, pDev->localIrk);
   16290:	9b03      	ldr	r3, [sp, #12]
   16292:	7918      	ldrb	r0, [r3, #4]
   16294:	9b03      	ldr	r3, [sp, #12]
   16296:	1d59      	adds	r1, r3, #5
   16298:	9b03      	ldr	r3, [sp, #12]
   1629a:	f103 020b 	add.w	r2, r3, #11
   1629e:	9b03      	ldr	r3, [sp, #12]
   162a0:	331b      	adds	r3, #27
   162a2:	f7f7 fa9f 	bl	d7e4 <HciLeAddDeviceToResolvingListCmd>
}
   162a6:	bf00      	nop
   162a8:	b005      	add	sp, #20
   162aa:	f85d fb04 	ldr.w	pc, [sp], #4
   162ae:	bf00      	nop
   162b0:	1000450c 	.word	0x1000450c

000162b4 <dmPrivActRemDevFromResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActRemDevFromResList(dmPrivMsg_t *pMsg)
{
   162b4:	b500      	push	{lr}
   162b6:	b085      	sub	sp, #20
   162b8:	9001      	str	r0, [sp, #4]
  dmPrivApiRemDevFromResList_t *pDev = &pMsg->apiRemDevFromResList;
   162ba:	9b01      	ldr	r3, [sp, #4]
   162bc:	9303      	str	r3, [sp, #12]

  /* save client-defined parameter for callback event */
  dmPrivCb.remDevFromResListParam = pMsg->hdr.param;
   162be:	9b01      	ldr	r3, [sp, #4]
   162c0:	881a      	ldrh	r2, [r3, #0]
   162c2:	4b07      	ldr	r3, [pc, #28]	; (162e0 <dmPrivActRemDevFromResList+0x2c>)
   162c4:	80da      	strh	r2, [r3, #6]

  /* remove device from resolving list */
  HciLeRemoveDeviceFromResolvingList(pDev->addrType, pDev->peerAddr);
   162c6:	9b03      	ldr	r3, [sp, #12]
   162c8:	791a      	ldrb	r2, [r3, #4]
   162ca:	9b03      	ldr	r3, [sp, #12]
   162cc:	3305      	adds	r3, #5
   162ce:	4619      	mov	r1, r3
   162d0:	4610      	mov	r0, r2
   162d2:	f7f7 fabc 	bl	d84e <HciLeRemoveDeviceFromResolvingList>
}
   162d6:	bf00      	nop
   162d8:	b005      	add	sp, #20
   162da:	f85d fb04 	ldr.w	pc, [sp], #4
   162de:	bf00      	nop
   162e0:	1000450c 	.word	0x1000450c

000162e4 <dmPrivActClearResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActClearResList(dmPrivMsg_t *pMsg)
{
   162e4:	b500      	push	{lr}
   162e6:	b083      	sub	sp, #12
   162e8:	9001      	str	r0, [sp, #4]
  /* clear resolving list */
  HciLeClearResolvingList();
   162ea:	f7f7 fad6 	bl	d89a <HciLeClearResolvingList>
}
   162ee:	bf00      	nop
   162f0:	b003      	add	sp, #12
   162f2:	f85d fb04 	ldr.w	pc, [sp], #4

000162f6 <dmPrivActSetAddrResEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActSetAddrResEnable(dmPrivMsg_t *pMsg)
{
   162f6:	b500      	push	{lr}
   162f8:	b085      	sub	sp, #20
   162fa:	9001      	str	r0, [sp, #4]
  dmPrivApiSetAddrResEnable_t *pAddrRes = &pMsg->apiSetAddrResEnable;
   162fc:	9b01      	ldr	r3, [sp, #4]
   162fe:	9303      	str	r3, [sp, #12]

  /* enable or disable address resolution in LL */
  dmPrivSetAddrResEnable(pAddrRes->enable);
   16300:	9b03      	ldr	r3, [sp, #12]
   16302:	791b      	ldrb	r3, [r3, #4]
   16304:	4618      	mov	r0, r3
   16306:	f000 f90f 	bl	16528 <dmPrivSetAddrResEnable>
}
   1630a:	bf00      	nop
   1630c:	b005      	add	sp, #20
   1630e:	f85d fb04 	ldr.w	pc, [sp], #4

00016312 <dmPrivActSetPrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActSetPrivacyMode(dmPrivMsg_t *pMsg)
{
   16312:	b500      	push	{lr}
   16314:	b085      	sub	sp, #20
   16316:	9001      	str	r0, [sp, #4]
  dmPrivApiSetPrivacyMode_t *pPrivacyMode = &pMsg->apiSetPrivacyMode;
   16318:	9b01      	ldr	r3, [sp, #4]
   1631a:	9303      	str	r3, [sp, #12]

  /* set privacy mode */
  HciLeSetPrivacyModeCmd(pPrivacyMode->addrType, pPrivacyMode->peerAddr, pPrivacyMode->mode);
   1631c:	9b03      	ldr	r3, [sp, #12]
   1631e:	7918      	ldrb	r0, [r3, #4]
   16320:	9b03      	ldr	r3, [sp, #12]
   16322:	1d59      	adds	r1, r3, #5
   16324:	9b03      	ldr	r3, [sp, #12]
   16326:	7adb      	ldrb	r3, [r3, #11]
   16328:	461a      	mov	r2, r3
   1632a:	f7f7 faf8 	bl	d91e <HciLeSetPrivacyModeCmd>
}
   1632e:	bf00      	nop
   16330:	b005      	add	sp, #20
   16332:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00016338 <dmPrivActGenAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActGenAddr(dmPrivMsg_t *pMsg)
{
   16338:	b500      	push	{lr}
   1633a:	b085      	sub	sp, #20
   1633c:	9003      	str	r0, [sp, #12]
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
   1633e:	4b1e      	ldr	r3, [pc, #120]	; (163b8 <dmPrivActGenAddr+0x80>)
   16340:	78db      	ldrb	r3, [r3, #3]
   16342:	f003 0302 	and.w	r3, r3, #2
   16346:	2b00      	cmp	r3, #0
   16348:	d128      	bne.n	1639c <dmPrivActGenAddr+0x64>
  {
    /* get random number */
    SecRand(dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   1634a:	2103      	movs	r1, #3
   1634c:	481b      	ldr	r0, [pc, #108]	; (163bc <dmPrivActGenAddr+0x84>)
   1634e:	f001 fa17 	bl	17780 <SecRand>

    /* set address type in random number */
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   16352:	4b19      	ldr	r3, [pc, #100]	; (163b8 <dmPrivActGenAddr+0x80>)
   16354:	7b1b      	ldrb	r3, [r3, #12]
   16356:	b25b      	sxtb	r3, r3
   16358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1635c:	b25b      	sxtb	r3, r3
   1635e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16362:	b25b      	sxtb	r3, r3
   16364:	b2da      	uxtb	r2, r3
   16366:	4b14      	ldr	r3, [pc, #80]	; (163b8 <dmPrivActGenAddr+0x80>)
   16368:	731a      	strb	r2, [r3, #12]

    /* pad buffer */
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   1636a:	4b15      	ldr	r3, [pc, #84]	; (163c0 <dmPrivActGenAddr+0x88>)
   1636c:	220d      	movs	r2, #13
   1636e:	2100      	movs	r1, #0
   16370:	4618      	mov	r0, r3
   16372:	f00f f9a3 	bl	256bc <memset>

    /* set in progress */
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   16376:	4b10      	ldr	r3, [pc, #64]	; (163b8 <dmPrivActGenAddr+0x80>)
   16378:	78db      	ldrb	r3, [r3, #3]
   1637a:	f043 0302 	orr.w	r3, r3, #2
   1637e:	b2da      	uxtb	r2, r3
   16380:	4b0d      	ldr	r3, [pc, #52]	; (163b8 <dmPrivActGenAddr+0x80>)
   16382:	70da      	strb	r2, [r3, #3]

    /* run calculation */
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   16384:	9b03      	ldr	r3, [sp, #12]
   16386:	1d18      	adds	r0, r3, #4
   16388:	4b0e      	ldr	r3, [pc, #56]	; (163c4 <dmPrivActGenAddr+0x8c>)
   1638a:	7b1a      	ldrb	r2, [r3, #12]
   1638c:	9b03      	ldr	r3, [sp, #12]
   1638e:	881b      	ldrh	r3, [r3, #0]
   16390:	2168      	movs	r1, #104	; 0x68
   16392:	9100      	str	r1, [sp, #0]
   16394:	4909      	ldr	r1, [pc, #36]	; (163bc <dmPrivActGenAddr+0x84>)
   16396:	f000 ff0f 	bl	171b8 <SecAes>
    /* call callback with error (note hdr.param is already set) */
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
}
   1639a:	e009      	b.n	163b0 <dmPrivActGenAddr+0x78>
    pMsg->hdr.status = HCI_ERR_MEMORY_EXCEEDED;
   1639c:	9b03      	ldr	r3, [sp, #12]
   1639e:	2207      	movs	r2, #7
   163a0:	70da      	strb	r2, [r3, #3]
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   163a2:	9b03      	ldr	r3, [sp, #12]
   163a4:	2238      	movs	r2, #56	; 0x38
   163a6:	709a      	strb	r2, [r3, #2]
    (*dmCb.cback)((dmEvt_t *) pMsg);
   163a8:	4b06      	ldr	r3, [pc, #24]	; (163c4 <dmPrivActGenAddr+0x8c>)
   163aa:	689b      	ldr	r3, [r3, #8]
   163ac:	9803      	ldr	r0, [sp, #12]
   163ae:	4798      	blx	r3
}
   163b0:	bf00      	nop
   163b2:	b005      	add	sp, #20
   163b4:	f85d fb04 	ldr.w	pc, [sp], #4
   163b8:	1000450c 	.word	0x1000450c
   163bc:	10004516 	.word	0x10004516
   163c0:	10004519 	.word	0x10004519
   163c4:	100044f4 	.word	0x100044f4

000163c8 <dmPrivActGenAddrAesCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivActGenAddrAesCmpl(dmPrivMsg_t *pMsg)
{
   163c8:	b500      	push	{lr}
   163ca:	b085      	sub	sp, #20
   163cc:	9001      	str	r0, [sp, #4]
  dmPrivGenAddrIndEvt_t *pAddrEvt = (dmPrivGenAddrIndEvt_t*) pMsg;
   163ce:	9b01      	ldr	r3, [sp, #4]
   163d0:	9303      	str	r3, [sp, #12]

  /* copy the hash and address to buffer */
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
   163d2:	9b03      	ldr	r3, [sp, #12]
   163d4:	1d18      	adds	r0, r3, #4
   163d6:	9b01      	ldr	r3, [sp, #4]
   163d8:	685b      	ldr	r3, [r3, #4]
   163da:	2203      	movs	r2, #3
   163dc:	4619      	mov	r1, r3
   163de:	f7f5 fe8f 	bl	c100 <memcpy>
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   163e2:	9b03      	ldr	r3, [sp, #12]
   163e4:	3304      	adds	r3, #4
   163e6:	3303      	adds	r3, #3
   163e8:	2203      	movs	r2, #3
   163ea:	490c      	ldr	r1, [pc, #48]	; (1641c <dmPrivActGenAddrAesCmpl+0x54>)
   163ec:	4618      	mov	r0, r3
   163ee:	f7f5 fe87 	bl	c100 <memcpy>

  /* clear in progress */
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
   163f2:	4b0b      	ldr	r3, [pc, #44]	; (16420 <dmPrivActGenAddrAesCmpl+0x58>)
   163f4:	78db      	ldrb	r3, [r3, #3]
   163f6:	f023 0302 	bic.w	r3, r3, #2
   163fa:	b2da      	uxtb	r2, r3
   163fc:	4b08      	ldr	r3, [pc, #32]	; (16420 <dmPrivActGenAddrAesCmpl+0x58>)
   163fe:	70da      	strb	r2, [r3, #3]

  /* call client callback */
  pAddrEvt->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   16400:	9b03      	ldr	r3, [sp, #12]
   16402:	2238      	movs	r2, #56	; 0x38
   16404:	709a      	strb	r2, [r3, #2]
  pMsg->hdr.status = HCI_SUCCESS;
   16406:	9b01      	ldr	r3, [sp, #4]
   16408:	2200      	movs	r2, #0
   1640a:	70da      	strb	r2, [r3, #3]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
   1640c:	4b05      	ldr	r3, [pc, #20]	; (16424 <dmPrivActGenAddrAesCmpl+0x5c>)
   1640e:	689b      	ldr	r3, [r3, #8]
   16410:	9803      	ldr	r0, [sp, #12]
   16412:	4798      	blx	r3
}
   16414:	bf00      	nop
   16416:	b005      	add	sp, #20
   16418:	f85d fb04 	ldr.w	pc, [sp], #4
   1641c:	10004516 	.word	0x10004516
   16420:	1000450c 	.word	0x1000450c
   16424:	100044f4 	.word	0x100044f4

00016428 <dmPrivHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivHciHandler(hciEvt_t *pEvent)
{
   16428:	b500      	push	{lr}
   1642a:	b083      	sub	sp, #12
   1642c:	9001      	str	r0, [sp, #4]
  /* handle incoming event */
  switch (pEvent->hdr.event)
   1642e:	9b01      	ldr	r3, [sp, #4]
   16430:	789b      	ldrb	r3, [r3, #2]
   16432:	3b15      	subs	r3, #21
   16434:	2b05      	cmp	r3, #5
   16436:	d86e      	bhi.n	16516 <dmPrivHciHandler+0xee>
   16438:	a201      	add	r2, pc, #4	; (adr r2, 16440 <dmPrivHciHandler+0x18>)
   1643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1643e:	bf00      	nop
   16440:	00016459 	.word	0x00016459
   16444:	00016487 	.word	0x00016487
   16448:	00016497 	.word	0x00016497
   1644c:	000164b5 	.word	0x000164b5
   16450:	000164bd 	.word	0x000164bd
   16454:	000164c5 	.word	0x000164c5
  {
    case HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_ADD_DEV_TO_RES_LIST_IND;
   16458:	9b01      	ldr	r3, [sp, #4]
   1645a:	223a      	movs	r2, #58	; 0x3a
   1645c:	709a      	strb	r2, [r3, #2]
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
   1645e:	4b30      	ldr	r3, [pc, #192]	; (16520 <dmPrivHciHandler+0xf8>)
   16460:	889a      	ldrh	r2, [r3, #4]
   16462:	9b01      	ldr	r3, [sp, #4]
   16464:	801a      	strh	r2, [r3, #0]

      /* if LE add device to resolving list command succeeded and been asked to enable address
       * resolution in LL and it's not enabled yet
       */
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
   16466:	9b01      	ldr	r3, [sp, #4]
   16468:	78db      	ldrb	r3, [r3, #3]
   1646a:	2b00      	cmp	r3, #0
   1646c:	d149      	bne.n	16502 <dmPrivHciHandler+0xda>
   1646e:	4b2c      	ldr	r3, [pc, #176]	; (16520 <dmPrivHciHandler+0xf8>)
   16470:	7a1b      	ldrb	r3, [r3, #8]
   16472:	2b00      	cmp	r3, #0
   16474:	d045      	beq.n	16502 <dmPrivHciHandler+0xda>
   16476:	4b2b      	ldr	r3, [pc, #172]	; (16524 <dmPrivHciHandler+0xfc>)
   16478:	7d9b      	ldrb	r3, [r3, #22]
   1647a:	2b00      	cmp	r3, #0
   1647c:	d141      	bne.n	16502 <dmPrivHciHandler+0xda>
      {
        /* enable address resolution in LL */
        dmPrivSetAddrResEnable(TRUE);
   1647e:	2001      	movs	r0, #1
   16480:	f000 f852 	bl	16528 <dmPrivSetAddrResEnable>
      }
      break;
   16484:	e03d      	b.n	16502 <dmPrivHciHandler+0xda>

    case HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
   16486:	9b01      	ldr	r3, [sp, #4]
   16488:	223b      	movs	r2, #59	; 0x3b
   1648a:	709a      	strb	r2, [r3, #2]
      pEvent->hdr.param = dmPrivCb.remDevFromResListParam;
   1648c:	4b24      	ldr	r3, [pc, #144]	; (16520 <dmPrivHciHandler+0xf8>)
   1648e:	88da      	ldrh	r2, [r3, #6]
   16490:	9b01      	ldr	r3, [sp, #4]
   16492:	801a      	strh	r2, [r3, #0]
      break;
   16494:	e03a      	b.n	1650c <dmPrivHciHandler+0xe4>

    case HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_CLEAR_RES_LIST_IND;
   16496:	9b01      	ldr	r3, [sp, #4]
   16498:	223c      	movs	r2, #60	; 0x3c
   1649a:	709a      	strb	r2, [r3, #2]

      /* if LE clear resolving list command succeeded and address resolution's enabled in LL */
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
   1649c:	9b01      	ldr	r3, [sp, #4]
   1649e:	78db      	ldrb	r3, [r3, #3]
   164a0:	2b00      	cmp	r3, #0
   164a2:	d130      	bne.n	16506 <dmPrivHciHandler+0xde>
   164a4:	4b1f      	ldr	r3, [pc, #124]	; (16524 <dmPrivHciHandler+0xfc>)
   164a6:	7d9b      	ldrb	r3, [r3, #22]
   164a8:	2b00      	cmp	r3, #0
   164aa:	d02c      	beq.n	16506 <dmPrivHciHandler+0xde>
      {
        /* disable address resolution in LL */
        dmPrivSetAddrResEnable(FALSE);
   164ac:	2000      	movs	r0, #0
   164ae:	f000 f83b 	bl	16528 <dmPrivSetAddrResEnable>
      }
      break;
   164b2:	e028      	b.n	16506 <dmPrivHciHandler+0xde>

    case HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_READ_PEER_RES_ADDR_IND;
   164b4:	9b01      	ldr	r3, [sp, #4]
   164b6:	223d      	movs	r2, #61	; 0x3d
   164b8:	709a      	strb	r2, [r3, #2]
      break;
   164ba:	e027      	b.n	1650c <dmPrivHciHandler+0xe4>

    case HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_READ_LOCAL_RES_ADDR_IND;
   164bc:	9b01      	ldr	r3, [sp, #4]
   164be:	223e      	movs	r2, #62	; 0x3e
   164c0:	709a      	strb	r2, [r3, #2]
      break;
   164c2:	e023      	b.n	1650c <dmPrivHciHandler+0xe4>

    case HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT:
      pEvent->hdr.event = DM_PRIV_SET_ADDR_RES_ENABLE_IND;
   164c4:	9b01      	ldr	r3, [sp, #4]
   164c6:	223f      	movs	r2, #63	; 0x3f
   164c8:	709a      	strb	r2, [r3, #2]

      /* if LE set address resoultion enable command succeeded */
      if (pEvent->hdr.status == HCI_SUCCESS)
   164ca:	9b01      	ldr	r3, [sp, #4]
   164cc:	78db      	ldrb	r3, [r3, #3]
   164ce:	2b00      	cmp	r3, #0
   164d0:	d11b      	bne.n	1650a <dmPrivHciHandler+0xe2>
      {
        /* update LL Privacy Enabled flag */
        dmCb.llPrivEnabled = dmPrivCb.addrResEnable;
   164d2:	4b13      	ldr	r3, [pc, #76]	; (16520 <dmPrivHciHandler+0xf8>)
   164d4:	7a5a      	ldrb	r2, [r3, #9]
   164d6:	4b13      	ldr	r3, [pc, #76]	; (16524 <dmPrivHciHandler+0xfc>)
   164d8:	759a      	strb	r2, [r3, #22]

        /* pass LL Privacy enable/disable event to dev priv */
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
   164da:	4b12      	ldr	r3, [pc, #72]	; (16524 <dmPrivHciHandler+0xfc>)
   164dc:	7d9b      	ldrb	r3, [r3, #22]
   164de:	2b00      	cmp	r3, #0
   164e0:	d001      	beq.n	164e6 <dmPrivHciHandler+0xbe>
   164e2:	2015      	movs	r0, #21
   164e4:	e000      	b.n	164e8 <dmPrivHciHandler+0xc0>
   164e6:	2014      	movs	r0, #20
                              dmCb.llPrivEnabled ? TRUE : FALSE, 0, 0);
   164e8:	4b0e      	ldr	r3, [pc, #56]	; (16524 <dmPrivHciHandler+0xfc>)
   164ea:	7d9b      	ldrb	r3, [r3, #22]
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
   164ec:	2b00      	cmp	r3, #0
   164ee:	bf14      	ite	ne
   164f0:	2301      	movne	r3, #1
   164f2:	2300      	moveq	r3, #0
   164f4:	b2db      	uxtb	r3, r3
   164f6:	4619      	mov	r1, r3
   164f8:	2300      	movs	r3, #0
   164fa:	2200      	movs	r2, #0
   164fc:	f7ff fcd4 	bl	15ea8 <dmDevPassEvtToDevPriv>
      }
      break;
   16500:	e003      	b.n	1650a <dmPrivHciHandler+0xe2>
      break;
   16502:	bf00      	nop
   16504:	e002      	b.n	1650c <dmPrivHciHandler+0xe4>
      break;
   16506:	bf00      	nop
   16508:	e000      	b.n	1650c <dmPrivHciHandler+0xe4>
      break;
   1650a:	bf00      	nop
      /* should never get here */
      return;
  }

  /* call callback (note hdr.status is already set) */
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1650c:	4b05      	ldr	r3, [pc, #20]	; (16524 <dmPrivHciHandler+0xfc>)
   1650e:	689b      	ldr	r3, [r3, #8]
   16510:	9801      	ldr	r0, [sp, #4]
   16512:	4798      	blx	r3
   16514:	e000      	b.n	16518 <dmPrivHciHandler+0xf0>
      return;
   16516:	bf00      	nop
}
   16518:	b003      	add	sp, #12
   1651a:	f85d fb04 	ldr.w	pc, [sp], #4
   1651e:	bf00      	nop
   16520:	1000450c 	.word	0x1000450c
   16524:	100044f4 	.word	0x100044f4

00016528 <dmPrivSetAddrResEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void dmPrivSetAddrResEnable(bool_t enable)
{
   16528:	b500      	push	{lr}
   1652a:	b083      	sub	sp, #12
   1652c:	4603      	mov	r3, r0
   1652e:	f88d 3007 	strb.w	r3, [sp, #7]
  /* save input parameter */
  dmPrivCb.addrResEnable = enable;
   16532:	4a06      	ldr	r2, [pc, #24]	; (1654c <dmPrivSetAddrResEnable+0x24>)
   16534:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16538:	7253      	strb	r3, [r2, #9]

  /* enable or disable address resolution in LL */
  HciLeSetAddrResolutionEnable(enable);
   1653a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1653e:	4618      	mov	r0, r3
   16540:	f7f7 f9cf 	bl	d8e2 <HciLeSetAddrResolutionEnable>
}
   16544:	bf00      	nop
   16546:	b003      	add	sp, #12
   16548:	f85d fb04 	ldr.w	pc, [sp], #4
   1654c:	1000450c 	.word	0x1000450c

00016550 <dmPrivMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmPrivMsgHandler(wsfMsgHdr_t *pMsg)
{
   16550:	b500      	push	{lr}
   16552:	b083      	sub	sp, #12
   16554:	9001      	str	r0, [sp, #4]
  /* execute action function */
  (*dmPrivAct[DM_MSG_MASK(pMsg->event)])((dmPrivMsg_t *) pMsg);
   16556:	9b01      	ldr	r3, [sp, #4]
   16558:	789b      	ldrb	r3, [r3, #2]
   1655a:	f003 030f 	and.w	r3, r3, #15
   1655e:	4a04      	ldr	r2, [pc, #16]	; (16570 <dmPrivMsgHandler+0x20>)
   16560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16564:	9801      	ldr	r0, [sp, #4]
   16566:	4798      	blx	r3
}
   16568:	bf00      	nop
   1656a:	b003      	add	sp, #12
   1656c:	f85d fb04 	ldr.w	pc, [sp], #4
   16570:	000285b0 	.word	0x000285b0

00016574 <dmPrivReset>:
 */
/*************************************************************************************************/
void dmPrivReset(void)
{
  /* initialize control block */
  dmPrivCb.inProgress = 0;
   16574:	4b03      	ldr	r3, [pc, #12]	; (16584 <dmPrivReset+0x10>)
   16576:	2200      	movs	r2, #0
   16578:	70da      	strb	r2, [r3, #3]
  dmCb.llPrivEnabled = FALSE;
   1657a:	4b03      	ldr	r3, [pc, #12]	; (16588 <dmPrivReset+0x14>)
   1657c:	2200      	movs	r2, #0
   1657e:	759a      	strb	r2, [r3, #22]
}
   16580:	bf00      	nop
   16582:	4770      	bx	lr
   16584:	1000450c 	.word	0x1000450c
   16588:	100044f4 	.word	0x100044f4

0001658c <DmPrivInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivInit(void)
{
  dmFcnIfTbl[DM_ID_PRIV] = (dmFcnIf_t *) &dmPrivFcnIf;
   1658c:	4b02      	ldr	r3, [pc, #8]	; (16598 <DmPrivInit+0xc>)
   1658e:	4a03      	ldr	r2, [pc, #12]	; (1659c <DmPrivInit+0x10>)
   16590:	619a      	str	r2, [r3, #24]
}
   16592:	bf00      	nop
   16594:	4770      	bx	lr
   16596:	bf00      	nop
   16598:	10002b0c 	.word	0x10002b0c
   1659c:	000285d4 	.word	0x000285d4

000165a0 <DmPrivResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivResolveAddr(uint8_t *pAddr, uint8_t *pIrk, uint16_t param)
{
   165a0:	b500      	push	{lr}
   165a2:	b087      	sub	sp, #28
   165a4:	9003      	str	r0, [sp, #12]
   165a6:	9102      	str	r1, [sp, #8]
   165a8:	4613      	mov	r3, r2
   165aa:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmPrivApiResolveAddr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiResolveAddr_t))) != NULL)
   165ae:	201a      	movs	r0, #26
   165b0:	f009 f9a0 	bl	1f8f4 <WsfMsgAlloc>
   165b4:	9005      	str	r0, [sp, #20]
   165b6:	9b05      	ldr	r3, [sp, #20]
   165b8:	2b00      	cmp	r3, #0
   165ba:	d018      	beq.n	165ee <DmPrivResolveAddr+0x4e>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_RESOLVE_ADDR;
   165bc:	9b05      	ldr	r3, [sp, #20]
   165be:	2260      	movs	r2, #96	; 0x60
   165c0:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   165c2:	9b05      	ldr	r3, [sp, #20]
   165c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   165c8:	801a      	strh	r2, [r3, #0]
    Calc128Cpy(pMsg->irk, pIrk);
   165ca:	9b05      	ldr	r3, [sp, #20]
   165cc:	3304      	adds	r3, #4
   165ce:	9902      	ldr	r1, [sp, #8]
   165d0:	4618      	mov	r0, r3
   165d2:	f7f5 fe75 	bl	c2c0 <Calc128Cpy>
    BdaCpy(pMsg->addr, pAddr);
   165d6:	9b05      	ldr	r3, [sp, #20]
   165d8:	3314      	adds	r3, #20
   165da:	9903      	ldr	r1, [sp, #12]
   165dc:	4618      	mov	r0, r3
   165de:	f7f5 fe29 	bl	c234 <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   165e2:	4b05      	ldr	r3, [pc, #20]	; (165f8 <DmPrivResolveAddr+0x58>)
   165e4:	7b1b      	ldrb	r3, [r3, #12]
   165e6:	9905      	ldr	r1, [sp, #20]
   165e8:	4618      	mov	r0, r3
   165ea:	f009 f9a7 	bl	1f93c <WsfMsgSend>
  }
}
   165ee:	bf00      	nop
   165f0:	b007      	add	sp, #28
   165f2:	f85d fb04 	ldr.w	pc, [sp], #4
   165f6:	bf00      	nop
   165f8:	100044f4 	.word	0x100044f4

000165fc <DmPrivAddDevToResList>:
 *          to resolving list to enable address resolution in the Controller.
 */
/*************************************************************************************************/
void DmPrivAddDevToResList(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t *pPeerIrk,
                           uint8_t *pLocalIrk, bool_t enableLlPriv, uint16_t param)
{
   165fc:	b500      	push	{lr}
   165fe:	b087      	sub	sp, #28
   16600:	9102      	str	r1, [sp, #8]
   16602:	9201      	str	r2, [sp, #4]
   16604:	9300      	str	r3, [sp, #0]
   16606:	4603      	mov	r3, r0
   16608:	f88d 300f 	strb.w	r3, [sp, #15]
  dmPrivApiAddDevToResList_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiAddDevToResList_t))) != NULL)
   1660c:	202c      	movs	r0, #44	; 0x2c
   1660e:	f009 f971 	bl	1f8f4 <WsfMsgAlloc>
   16612:	9005      	str	r0, [sp, #20]
   16614:	9b05      	ldr	r3, [sp, #20]
   16616:	2b00      	cmp	r3, #0
   16618:	d027      	beq.n	1666a <DmPrivAddDevToResList+0x6e>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_ADD_DEV_TO_RES_LIST;
   1661a:	9b05      	ldr	r3, [sp, #20]
   1661c:	2262      	movs	r2, #98	; 0x62
   1661e:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = param;
   16620:	9b05      	ldr	r3, [sp, #20]
   16622:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   16626:	801a      	strh	r2, [r3, #0]
    pMsg->addrType = addrType;
   16628:	9b05      	ldr	r3, [sp, #20]
   1662a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1662e:	711a      	strb	r2, [r3, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   16630:	9b05      	ldr	r3, [sp, #20]
   16632:	3305      	adds	r3, #5
   16634:	9902      	ldr	r1, [sp, #8]
   16636:	4618      	mov	r0, r3
   16638:	f7f5 fdfc 	bl	c234 <BdaCpy>
    Calc128Cpy(pMsg->peerIrk, pPeerIrk);
   1663c:	9b05      	ldr	r3, [sp, #20]
   1663e:	330b      	adds	r3, #11
   16640:	9901      	ldr	r1, [sp, #4]
   16642:	4618      	mov	r0, r3
   16644:	f7f5 fe3c 	bl	c2c0 <Calc128Cpy>
    Calc128Cpy(pMsg->localIrk, pLocalIrk);
   16648:	9b05      	ldr	r3, [sp, #20]
   1664a:	331b      	adds	r3, #27
   1664c:	9900      	ldr	r1, [sp, #0]
   1664e:	4618      	mov	r0, r3
   16650:	f7f5 fe36 	bl	c2c0 <Calc128Cpy>
    pMsg->enableLlPriv = enableLlPriv;
   16654:	9b05      	ldr	r3, [sp, #20]
   16656:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1665a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    WsfMsgSend(dmCb.handlerId, pMsg);
   1665e:	4b05      	ldr	r3, [pc, #20]	; (16674 <DmPrivAddDevToResList+0x78>)
   16660:	7b1b      	ldrb	r3, [r3, #12]
   16662:	9905      	ldr	r1, [sp, #20]
   16664:	4618      	mov	r0, r3
   16666:	f009 f969 	bl	1f93c <WsfMsgSend>
  }
}
   1666a:	bf00      	nop
   1666c:	b007      	add	sp, #28
   1666e:	f85d fb04 	ldr.w	pc, [sp], #4
   16672:	bf00      	nop
   16674:	100044f4 	.word	0x100044f4

00016678 <DmPrivClearResList>:
 *  \Note   Address resolution in the Controller will be disabled when resolving list's cleared
 *          successfully.
 */
/*************************************************************************************************/
void DmPrivClearResList(void)
{
   16678:	b500      	push	{lr}
   1667a:	b083      	sub	sp, #12
  dmPrivMsg_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivMsg_t))) != NULL)
   1667c:	202c      	movs	r0, #44	; 0x2c
   1667e:	f009 f939 	bl	1f8f4 <WsfMsgAlloc>
   16682:	9001      	str	r0, [sp, #4]
   16684:	9b01      	ldr	r3, [sp, #4]
   16686:	2b00      	cmp	r3, #0
   16688:	d008      	beq.n	1669c <DmPrivClearResList+0x24>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_CLEAR_RES_LIST;
   1668a:	9b01      	ldr	r3, [sp, #4]
   1668c:	2264      	movs	r2, #100	; 0x64
   1668e:	709a      	strb	r2, [r3, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   16690:	4b04      	ldr	r3, [pc, #16]	; (166a4 <DmPrivClearResList+0x2c>)
   16692:	7b1b      	ldrb	r3, [r3, #12]
   16694:	9901      	ldr	r1, [sp, #4]
   16696:	4618      	mov	r0, r3
   16698:	f009 f950 	bl	1f93c <WsfMsgSend>
  }
}
   1669c:	bf00      	nop
   1669e:	b003      	add	sp, #12
   166a0:	f85d fb04 	ldr.w	pc, [sp], #4
   166a4:	100044f4 	.word	0x100044f4

000166a8 <DmPrivSetAddrResEnable>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetAddrResEnable(bool_t enable)
{
   166a8:	b500      	push	{lr}
   166aa:	b085      	sub	sp, #20
   166ac:	4603      	mov	r3, r0
   166ae:	f88d 3007 	strb.w	r3, [sp, #7]
  dmPrivApiSetAddrResEnable_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivMsg_t))) != NULL)
   166b2:	202c      	movs	r0, #44	; 0x2c
   166b4:	f009 f91e 	bl	1f8f4 <WsfMsgAlloc>
   166b8:	9003      	str	r0, [sp, #12]
   166ba:	9b03      	ldr	r3, [sp, #12]
   166bc:	2b00      	cmp	r3, #0
   166be:	d00f      	beq.n	166e0 <DmPrivSetAddrResEnable+0x38>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_ADDR_RES_ENABLE;
   166c0:	9b03      	ldr	r3, [sp, #12]
   166c2:	2265      	movs	r2, #101	; 0x65
   166c4:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = 0;
   166c6:	9b03      	ldr	r3, [sp, #12]
   166c8:	2200      	movs	r2, #0
   166ca:	801a      	strh	r2, [r3, #0]
    pMsg->enable = enable;
   166cc:	9b03      	ldr	r3, [sp, #12]
   166ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
   166d2:	711a      	strb	r2, [r3, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
   166d4:	4b04      	ldr	r3, [pc, #16]	; (166e8 <DmPrivSetAddrResEnable+0x40>)
   166d6:	7b1b      	ldrb	r3, [r3, #12]
   166d8:	9903      	ldr	r1, [sp, #12]
   166da:	4618      	mov	r0, r3
   166dc:	f009 f92e 	bl	1f93c <WsfMsgSend>
  }
}
   166e0:	bf00      	nop
   166e2:	b005      	add	sp, #20
   166e4:	f85d fb04 	ldr.w	pc, [sp], #4
   166e8:	100044f4 	.word	0x100044f4

000166ec <DmPrivSetPrivacyMode>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetPrivacyMode(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t mode)
{
   166ec:	b500      	push	{lr}
   166ee:	b085      	sub	sp, #20
   166f0:	4603      	mov	r3, r0
   166f2:	9100      	str	r1, [sp, #0]
   166f4:	f88d 3007 	strb.w	r3, [sp, #7]
   166f8:	4613      	mov	r3, r2
   166fa:	f88d 3006 	strb.w	r3, [sp, #6]
  dmPrivApiSetPrivacyMode_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiSetPrivacyMode_t))) != NULL)
   166fe:	200c      	movs	r0, #12
   16700:	f009 f8f8 	bl	1f8f4 <WsfMsgAlloc>
   16704:	9003      	str	r0, [sp, #12]
   16706:	9b03      	ldr	r3, [sp, #12]
   16708:	2b00      	cmp	r3, #0
   1670a:	d016      	beq.n	1673a <DmPrivSetPrivacyMode+0x4e>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_PRIVACY_MODE;
   1670c:	9b03      	ldr	r3, [sp, #12]
   1670e:	2266      	movs	r2, #102	; 0x66
   16710:	709a      	strb	r2, [r3, #2]
    pMsg->addrType = addrType;
   16712:	9b03      	ldr	r3, [sp, #12]
   16714:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16718:	711a      	strb	r2, [r3, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   1671a:	9b03      	ldr	r3, [sp, #12]
   1671c:	3305      	adds	r3, #5
   1671e:	9900      	ldr	r1, [sp, #0]
   16720:	4618      	mov	r0, r3
   16722:	f7f5 fd87 	bl	c234 <BdaCpy>
    pMsg->mode = mode;
   16726:	9b03      	ldr	r3, [sp, #12]
   16728:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1672c:	72da      	strb	r2, [r3, #11]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1672e:	4b05      	ldr	r3, [pc, #20]	; (16744 <DmPrivSetPrivacyMode+0x58>)
   16730:	7b1b      	ldrb	r3, [r3, #12]
   16732:	9903      	ldr	r1, [sp, #12]
   16734:	4618      	mov	r0, r3
   16736:	f009 f901 	bl	1f93c <WsfMsgSend>
  }
}
   1673a:	bf00      	nop
   1673c:	b005      	add	sp, #20
   1673e:	f85d fb04 	ldr.w	pc, [sp], #4
   16742:	bf00      	nop
   16744:	100044f4 	.word	0x100044f4

00016748 <dmSecHciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecHciHandler(hciEvt_t *pEvent)
{
   16748:	b500      	push	{lr}
   1674a:	b089      	sub	sp, #36	; 0x24
   1674c:	9001      	str	r0, [sp, #4]
  dmConnCcb_t           *pCcb;
  uint8_t               *pKey;
  dmSecEncryptIndEvt_t  encryptInd;
  uint8_t               secLevel;

  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   1674e:	9b01      	ldr	r3, [sp, #4]
   16750:	881b      	ldrh	r3, [r3, #0]
   16752:	4618      	mov	r0, r3
   16754:	f7fe fa62 	bl	14c1c <dmConnCcbByHandle>
   16758:	9007      	str	r0, [sp, #28]
   1675a:	9b07      	ldr	r3, [sp, #28]
   1675c:	2b00      	cmp	r3, #0
   1675e:	d07e      	beq.n	1685e <dmSecHciHandler+0x116>
  {
    if (pEvent->hdr.event == HCI_LE_LTK_REQ_CBACK_EVT)
   16760:	9b01      	ldr	r3, [sp, #4]
   16762:	789b      	ldrb	r3, [r3, #2]
   16764:	2b10      	cmp	r3, #16
   16766:	d13e      	bne.n	167e6 <dmSecHciHandler+0x9e>
    {
      /* if ediv and rand are zero then check if STK is available from SMP */
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   16768:	9b01      	ldr	r3, [sp, #4]
   1676a:	89db      	ldrh	r3, [r3, #14]
   1676c:	2b00      	cmp	r3, #0
   1676e:	d123      	bne.n	167b8 <dmSecHciHandler+0x70>
          (memcmp(pEvent->leLtkReq.randNum, calc128Zeros, HCI_RAND_LEN) == 0))
   16770:	9b01      	ldr	r3, [sp, #4]
   16772:	3306      	adds	r3, #6
   16774:	2208      	movs	r2, #8
   16776:	493b      	ldr	r1, [pc, #236]	; (16864 <dmSecHciHandler+0x11c>)
   16778:	4618      	mov	r0, r3
   1677a:	f00e ff6d 	bl	25658 <memcmp>
   1677e:	4603      	mov	r3, r0
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   16780:	2b00      	cmp	r3, #0
   16782:	d119      	bne.n	167b8 <dmSecHciHandler+0x70>
      {
        if ((pKey = SmpDmGetStk(pCcb->connId, &secLevel)) != NULL)
   16784:	9b07      	ldr	r3, [sp, #28]
   16786:	7c1b      	ldrb	r3, [r3, #16]
   16788:	f10d 020f 	add.w	r2, sp, #15
   1678c:	4611      	mov	r1, r2
   1678e:	4618      	mov	r0, r3
   16790:	f7fc fb32 	bl	12df8 <SmpDmGetStk>
   16794:	9006      	str	r0, [sp, #24]
   16796:	9b06      	ldr	r3, [sp, #24]
   16798:	2b00      	cmp	r3, #0
   1679a:	d00d      	beq.n	167b8 <dmSecHciHandler+0x70>
        {
          /* store security level */
          pCcb->tmpSecLevel = secLevel;
   1679c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   167a0:	9b07      	ldr	r3, [sp, #28]
   167a2:	761a      	strb	r2, [r3, #24]

          /* not using LTK */
          pCcb->usingLtk = FALSE;
   167a4:	9b07      	ldr	r3, [sp, #28]
   167a6:	2200      	movs	r2, #0
   167a8:	749a      	strb	r2, [r3, #18]

          /* provide key to HCI */
          HciLeLtkReqReplCmd(pEvent->hdr.param, pKey);
   167aa:	9b01      	ldr	r3, [sp, #4]
   167ac:	881b      	ldrh	r3, [r3, #0]
   167ae:	9906      	ldr	r1, [sp, #24]
   167b0:	4618      	mov	r0, r3
   167b2:	f7f6 fd1a 	bl	d1ea <HciLeLtkReqReplCmd>
   167b6:	e052      	b.n	1685e <dmSecHciHandler+0x116>
      }

      /* call callback to get key from app */

      /* set connection busy */
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   167b8:	9b07      	ldr	r3, [sp, #28]
   167ba:	7c1b      	ldrb	r3, [r3, #16]
   167bc:	2201      	movs	r2, #1
   167be:	2102      	movs	r1, #2
   167c0:	4618      	mov	r0, r3
   167c2:	f7ff f90b 	bl	159dc <DmConnSetIdle>

      /* using LTK */
      pCcb->usingLtk = TRUE;
   167c6:	9b07      	ldr	r3, [sp, #28]
   167c8:	2201      	movs	r2, #1
   167ca:	749a      	strb	r2, [r3, #18]

      /* use the header from the encryptInd struct for efficiency */
      pEvent->hdr.param = pCcb->connId;
   167cc:	9b07      	ldr	r3, [sp, #28]
   167ce:	7c1b      	ldrb	r3, [r3, #16]
   167d0:	b29a      	uxth	r2, r3
   167d2:	9b01      	ldr	r3, [sp, #4]
   167d4:	801a      	strh	r2, [r3, #0]
      pEvent->hdr.event = DM_SEC_LTK_REQ_IND;
   167d6:	9b01      	ldr	r3, [sp, #4]
   167d8:	2230      	movs	r2, #48	; 0x30
   167da:	709a      	strb	r2, [r3, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   167dc:	4b22      	ldr	r3, [pc, #136]	; (16868 <dmSecHciHandler+0x120>)
   167de:	689b      	ldr	r3, [r3, #8]
   167e0:	9801      	ldr	r0, [sp, #4]
   167e2:	4798      	blx	r3
   167e4:	e03b      	b.n	1685e <dmSecHciHandler+0x116>
    }
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
   167e6:	9b01      	ldr	r3, [sp, #4]
   167e8:	789b      	ldrb	r3, [r3, #2]
   167ea:	2b0e      	cmp	r3, #14
   167ec:	d003      	beq.n	167f6 <dmSecHciHandler+0xae>
             pEvent->hdr.event == HCI_ENC_CHANGE_CBACK_EVT)
   167ee:	9b01      	ldr	r3, [sp, #4]
   167f0:	789b      	ldrb	r3, [r3, #2]
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
   167f2:	2b0f      	cmp	r3, #15
   167f4:	d133      	bne.n	1685e <dmSecHciHandler+0x116>
    {
      /* set connection idle */
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   167f6:	9b07      	ldr	r3, [sp, #28]
   167f8:	7c1b      	ldrb	r3, [r3, #16]
   167fa:	2200      	movs	r2, #0
   167fc:	2102      	movs	r1, #2
   167fe:	4618      	mov	r0, r3
   16800:	f7ff f8ec 	bl	159dc <DmConnSetIdle>

      encryptInd.hdr.param = pCcb->connId;
   16804:	9b07      	ldr	r3, [sp, #28]
   16806:	7c1b      	ldrb	r3, [r3, #16]
   16808:	b29b      	uxth	r3, r3
   1680a:	f8ad 3010 	strh.w	r3, [sp, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
   1680e:	9b01      	ldr	r3, [sp, #4]
   16810:	78db      	ldrb	r3, [r3, #3]
   16812:	f88d 3013 	strb.w	r3, [sp, #19]
      if (encryptInd.hdr.status == HCI_SUCCESS)
   16816:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1681a:	2b00      	cmp	r3, #0
   1681c:	d10b      	bne.n	16836 <dmSecHciHandler+0xee>
      {
        encryptInd.hdr.event = DM_SEC_ENCRYPT_IND;
   1681e:	232c      	movs	r3, #44	; 0x2c
   16820:	f88d 3012 	strb.w	r3, [sp, #18]

        /* update security level of connection */
        pCcb->secLevel = pCcb->tmpSecLevel;
   16824:	9b07      	ldr	r3, [sp, #28]
   16826:	7e1a      	ldrb	r2, [r3, #24]
   16828:	9b07      	ldr	r3, [sp, #28]
   1682a:	75da      	strb	r2, [r3, #23]

        /* set LTK flag */
        encryptInd.usingLtk = pCcb->usingLtk;
   1682c:	9b07      	ldr	r3, [sp, #28]
   1682e:	7c9b      	ldrb	r3, [r3, #18]
   16830:	f88d 3014 	strb.w	r3, [sp, #20]
   16834:	e002      	b.n	1683c <dmSecHciHandler+0xf4>
      }
      else
      {
        encryptInd.hdr.event = DM_SEC_ENCRYPT_FAIL_IND;
   16836:	232d      	movs	r3, #45	; 0x2d
   16838:	f88d 3012 	strb.w	r3, [sp, #18]
      }

      /* call callback before passing to SMP */
      DmSmpCbackExec((dmEvt_t *) &encryptInd);
   1683c:	ab04      	add	r3, sp, #16
   1683e:	4618      	mov	r0, r3
   16840:	f000 f866 	bl	16910 <DmSmpCbackExec>

      /* pass to SMP */
      encryptInd.hdr.param = pCcb->connId;
   16844:	9b07      	ldr	r3, [sp, #28]
   16846:	7c1b      	ldrb	r3, [r3, #16]
   16848:	b29b      	uxth	r3, r3
   1684a:	f8ad 3010 	strh.w	r3, [sp, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
   1684e:	9b01      	ldr	r3, [sp, #4]
   16850:	78db      	ldrb	r3, [r3, #3]
   16852:	f88d 3013 	strb.w	r3, [sp, #19]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
   16856:	ab04      	add	r3, sp, #16
   16858:	4618      	mov	r0, r3
   1685a:	f7fc fa93 	bl	12d84 <SmpDmEncryptInd>
    }
  }
}
   1685e:	b009      	add	sp, #36	; 0x24
   16860:	f85d fb04 	ldr.w	pc, [sp], #4
   16864:	00027d50 	.word	0x00027d50
   16868:	100044f4 	.word	0x100044f4

0001686c <dmSecMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecMsgHandler(dmSecMsg_t *pMsg)
{
   1686c:	b500      	push	{lr}
   1686e:	b085      	sub	sp, #20
   16870:	9001      	str	r0, [sp, #4]
  dmConnCcb_t *pCcb;

  /* look up ccb */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->hdr.param)) != NULL)
   16872:	9b01      	ldr	r3, [sp, #4]
   16874:	881b      	ldrh	r3, [r3, #0]
   16876:	b2db      	uxtb	r3, r3
   16878:	4618      	mov	r0, r3
   1687a:	f7fe fa21 	bl	14cc0 <dmConnCcbById>
   1687e:	9003      	str	r0, [sp, #12]
   16880:	9b03      	ldr	r3, [sp, #12]
   16882:	2b00      	cmp	r3, #0
   16884:	d03e      	beq.n	16904 <dmSecMsgHandler+0x98>
  {
    /* process API encrypt req */
    switch (pMsg->hdr.event)
   16886:	9b01      	ldr	r3, [sp, #4]
   16888:	789b      	ldrb	r3, [r3, #2]
   1688a:	2b50      	cmp	r3, #80	; 0x50
   1688c:	d002      	beq.n	16894 <dmSecMsgHandler+0x28>
   1688e:	2b51      	cmp	r3, #81	; 0x51
   16890:	d01a      	beq.n	168c8 <dmSecMsgHandler+0x5c>
        HciLeLtkReqNegReplCmd(pCcb->handle);
      }
      break;

    default:
      break;
   16892:	e038      	b.n	16906 <dmSecMsgHandler+0x9a>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   16894:	9b03      	ldr	r3, [sp, #12]
   16896:	7c1b      	ldrb	r3, [r3, #16]
   16898:	2201      	movs	r2, #1
   1689a:	2102      	movs	r1, #2
   1689c:	4618      	mov	r0, r3
   1689e:	f7ff f89d 	bl	159dc <DmConnSetIdle>
      pCcb->tmpSecLevel = pMsg->encryptReq.secLevel;
   168a2:	9b01      	ldr	r3, [sp, #4]
   168a4:	7f9a      	ldrb	r2, [r3, #30]
   168a6:	9b03      	ldr	r3, [sp, #12]
   168a8:	761a      	strb	r2, [r3, #24]
      pCcb->usingLtk = TRUE;
   168aa:	9b03      	ldr	r3, [sp, #12]
   168ac:	2201      	movs	r2, #1
   168ae:	749a      	strb	r2, [r3, #18]
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   168b0:	9b03      	ldr	r3, [sp, #12]
   168b2:	8998      	ldrh	r0, [r3, #12]
   168b4:	9b01      	ldr	r3, [sp, #4]
   168b6:	f103 0114 	add.w	r1, r3, #20
   168ba:	9b01      	ldr	r3, [sp, #4]
   168bc:	8b9a      	ldrh	r2, [r3, #28]
                              pMsg->encryptReq.ltk.ediv, pMsg->encryptReq.ltk.key);
   168be:	9b01      	ldr	r3, [sp, #4]
   168c0:	3304      	adds	r3, #4
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   168c2:	f7f6 fe54 	bl	d56e <HciLeStartEncryptionCmd>
      break;
   168c6:	e01e      	b.n	16906 <dmSecMsgHandler+0x9a>
      if (pMsg->ltkRsp.keyFound)
   168c8:	9b01      	ldr	r3, [sp, #4]
   168ca:	7d1b      	ldrb	r3, [r3, #20]
   168cc:	2b00      	cmp	r3, #0
   168ce:	d00c      	beq.n	168ea <dmSecMsgHandler+0x7e>
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
   168d0:	9b01      	ldr	r3, [sp, #4]
   168d2:	7d5a      	ldrb	r2, [r3, #21]
   168d4:	9b03      	ldr	r3, [sp, #12]
   168d6:	761a      	strb	r2, [r3, #24]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   168d8:	9b03      	ldr	r3, [sp, #12]
   168da:	899a      	ldrh	r2, [r3, #12]
   168dc:	9b01      	ldr	r3, [sp, #4]
   168de:	3304      	adds	r3, #4
   168e0:	4619      	mov	r1, r3
   168e2:	4610      	mov	r0, r2
   168e4:	f7f6 fc81 	bl	d1ea <HciLeLtkReqReplCmd>
      break;
   168e8:	e00d      	b.n	16906 <dmSecMsgHandler+0x9a>
        DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   168ea:	9b03      	ldr	r3, [sp, #12]
   168ec:	7c1b      	ldrb	r3, [r3, #16]
   168ee:	2200      	movs	r2, #0
   168f0:	2102      	movs	r1, #2
   168f2:	4618      	mov	r0, r3
   168f4:	f7ff f872 	bl	159dc <DmConnSetIdle>
        HciLeLtkReqNegReplCmd(pCcb->handle);
   168f8:	9b03      	ldr	r3, [sp, #12]
   168fa:	899b      	ldrh	r3, [r3, #12]
   168fc:	4618      	mov	r0, r3
   168fe:	f7f6 fc4c 	bl	d19a <HciLeLtkReqNegReplCmd>
      break;
   16902:	e000      	b.n	16906 <dmSecMsgHandler+0x9a>
    }
  }
   16904:	bf00      	nop
}
   16906:	bf00      	nop
   16908:	b005      	add	sp, #20
   1690a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00016910 <DmSmpCbackExec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSmpCbackExec(dmEvt_t *pDmEvt)
{
   16910:	b500      	push	{lr}
   16912:	b083      	sub	sp, #12
   16914:	9001      	str	r0, [sp, #4]
  /* certain messages need to get to ATT */
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   16916:	9b01      	ldr	r3, [sp, #4]
   16918:	789b      	ldrb	r3, [r3, #2]
   1691a:	2b2a      	cmp	r3, #42	; 0x2a
   1691c:	d003      	beq.n	16926 <DmSmpCbackExec+0x16>
      pDmEvt->hdr.event == DM_SEC_ENCRYPT_IND)
   1691e:	9b01      	ldr	r3, [sp, #4]
   16920:	789b      	ldrb	r3, [r3, #2]
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   16922:	2b2c      	cmp	r3, #44	; 0x2c
   16924:	d109      	bne.n	1693a <DmSmpCbackExec+0x2a>
  {
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   16926:	4b09      	ldr	r3, [pc, #36]	; (1694c <DmSmpCbackExec+0x3c>)
   16928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1692c:	2b00      	cmp	r3, #0
   1692e:	d004      	beq.n	1693a <DmSmpCbackExec+0x2a>
    {
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   16930:	4b06      	ldr	r3, [pc, #24]	; (1694c <DmSmpCbackExec+0x3c>)
   16932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   16936:	9801      	ldr	r0, [sp, #4]
   16938:	4798      	blx	r3
    }
  }

  /* execute DM client callback */
  (*dmCb.cback)(pDmEvt);
   1693a:	4b05      	ldr	r3, [pc, #20]	; (16950 <DmSmpCbackExec+0x40>)
   1693c:	689b      	ldr	r3, [r3, #8]
   1693e:	9801      	ldr	r0, [sp, #4]
   16940:	4798      	blx	r3
}
   16942:	bf00      	nop
   16944:	b003      	add	sp, #12
   16946:	f85d fb04 	ldr.w	pc, [sp], #4
   1694a:	bf00      	nop
   1694c:	10004420 	.word	0x10004420
   16950:	100044f4 	.word	0x100044f4

00016954 <DmSecCancelReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecCancelReq(dmConnId_t connId, uint8_t reason)
{
   16954:	b500      	push	{lr}
   16956:	b085      	sub	sp, #20
   16958:	4603      	mov	r3, r0
   1695a:	460a      	mov	r2, r1
   1695c:	f88d 3007 	strb.w	r3, [sp, #7]
   16960:	4613      	mov	r3, r2
   16962:	f88d 3006 	strb.w	r3, [sp, #6]
  wsfMsgHdr_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   16966:	2004      	movs	r0, #4
   16968:	f008 ffc4 	bl	1f8f4 <WsfMsgAlloc>
   1696c:	9003      	str	r0, [sp, #12]
   1696e:	9b03      	ldr	r3, [sp, #12]
   16970:	2b00      	cmp	r3, #0
   16972:	d00e      	beq.n	16992 <DmSecCancelReq+0x3e>
  {
    pMsg->event = SMP_MSG_API_CANCEL_REQ;
   16974:	9b03      	ldr	r3, [sp, #12]
   16976:	2203      	movs	r2, #3
   16978:	709a      	strb	r2, [r3, #2]
    pMsg->param = connId;
   1697a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1697e:	b29a      	uxth	r2, r3
   16980:	9b03      	ldr	r3, [sp, #12]
   16982:	801a      	strh	r2, [r3, #0]
    pMsg->status = reason;
   16984:	9b03      	ldr	r3, [sp, #12]
   16986:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1698a:	70da      	strb	r2, [r3, #3]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1698c:	9803      	ldr	r0, [sp, #12]
   1698e:	f7fc f9e9 	bl	12d64 <SmpDmMsgSend>
  }
}
   16992:	bf00      	nop
   16994:	b005      	add	sp, #20
   16996:	f85d fb04 	ldr.w	pc, [sp], #4

0001699a <DmSecAuthRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecAuthRsp(dmConnId_t connId, uint8_t authDataLen, uint8_t *pAuthData)
{
   1699a:	b500      	push	{lr}
   1699c:	b085      	sub	sp, #20
   1699e:	4603      	mov	r3, r0
   169a0:	9200      	str	r2, [sp, #0]
   169a2:	f88d 3007 	strb.w	r3, [sp, #7]
   169a6:	460b      	mov	r3, r1
   169a8:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDmAuthRsp_t   *pMsg;

  WSF_ASSERT(authDataLen <= SMP_OOB_LEN);

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
   169ac:	2016      	movs	r0, #22
   169ae:	f008 ffa1 	bl	1f8f4 <WsfMsgAlloc>
   169b2:	9003      	str	r0, [sp, #12]
   169b4:	9b03      	ldr	r3, [sp, #12]
   169b6:	2b00      	cmp	r3, #0
   169b8:	d019      	beq.n	169ee <DmSecAuthRsp+0x54>
  {
    pMsg->hdr.event = SMP_MSG_API_AUTH_RSP;
   169ba:	9b03      	ldr	r3, [sp, #12]
   169bc:	2204      	movs	r2, #4
   169be:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   169c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   169c4:	b29a      	uxth	r2, r3
   169c6:	9b03      	ldr	r3, [sp, #12]
   169c8:	801a      	strh	r2, [r3, #0]
    pMsg->authDataLen = authDataLen;
   169ca:	9b03      	ldr	r3, [sp, #12]
   169cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
   169d0:	751a      	strb	r2, [r3, #20]

    if (pAuthData != NULL)
   169d2:	9b00      	ldr	r3, [sp, #0]
   169d4:	2b00      	cmp	r3, #0
   169d6:	d007      	beq.n	169e8 <DmSecAuthRsp+0x4e>
    {
      memcpy(pMsg->authData, pAuthData, authDataLen);
   169d8:	9b03      	ldr	r3, [sp, #12]
   169da:	3304      	adds	r3, #4
   169dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
   169e0:	9900      	ldr	r1, [sp, #0]
   169e2:	4618      	mov	r0, r3
   169e4:	f7f5 fb8c 	bl	c100 <memcpy>
    }

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   169e8:	9803      	ldr	r0, [sp, #12]
   169ea:	f7fc f9bb 	bl	12d64 <SmpDmMsgSend>
  }
}
   169ee:	bf00      	nop
   169f0:	b005      	add	sp, #20
   169f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000169f8 <DmSecInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecInit(void)
{
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
   169f8:	4b05      	ldr	r3, [pc, #20]	; (16a10 <DmSecInit+0x18>)
   169fa:	4a06      	ldr	r2, [pc, #24]	; (16a14 <DmSecInit+0x1c>)
   169fc:	615a      	str	r2, [r3, #20]

  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   169fe:	4b06      	ldr	r3, [pc, #24]	; (16a18 <DmSecInit+0x20>)
   16a00:	4a06      	ldr	r2, [pc, #24]	; (16a1c <DmSecInit+0x24>)
   16a02:	601a      	str	r2, [r3, #0]
   16a04:	4b04      	ldr	r3, [pc, #16]	; (16a18 <DmSecInit+0x20>)
   16a06:	681b      	ldr	r3, [r3, #0]
   16a08:	4a03      	ldr	r2, [pc, #12]	; (16a18 <DmSecInit+0x20>)
   16a0a:	6053      	str	r3, [r2, #4]
}
   16a0c:	bf00      	nop
   16a0e:	4770      	bx	lr
   16a10:	10002b0c 	.word	0x10002b0c
   16a14:	000285e0 	.word	0x000285e0
   16a18:	10004528 	.word	0x10004528
   16a1c:	00027d50 	.word	0x00027d50

00016a20 <DmSecGetLocalCsrk>:
 *  \return Pointer to CSRK.
 */
/*************************************************************************************************/
uint8_t *DmSecGetLocalCsrk(void)
{
  return dmSecCb.pCsrk;
   16a20:	4b01      	ldr	r3, [pc, #4]	; (16a28 <DmSecGetLocalCsrk+0x8>)
   16a22:	685b      	ldr	r3, [r3, #4]
}
   16a24:	4618      	mov	r0, r3
   16a26:	4770      	bx	lr
   16a28:	10004528 	.word	0x10004528

00016a2c <DmSecGetLocalIrk>:
 *  \return Pointer to IRK.
 */
/*************************************************************************************************/
uint8_t *DmSecGetLocalIrk(void)
{
  return dmSecCb.pIrk;
   16a2c:	4b01      	ldr	r3, [pc, #4]	; (16a34 <DmSecGetLocalIrk+0x8>)
   16a2e:	681b      	ldr	r3, [r3, #0]
}
   16a30:	4618      	mov	r0, r3
   16a32:	4770      	bx	lr
   16a34:	10004528 	.word	0x10004528

00016a38 <dmSecReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecReset(void)
{
   16a38:	b508      	push	{r3, lr}
  /* initialize smp database */
  SmpDbInit();
   16a3a:	f7fb fc27 	bl	1228c <SmpDbInit>
}
   16a3e:	bf00      	nop
   16a40:	bd08      	pop	{r3, pc}
	...

00016a44 <dmSecLescMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecLescMsgHandler(dmSecMsg_t *pMsg)
{
   16a44:	b500      	push	{lr}
   16a46:	b08d      	sub	sp, #52	; 0x34
   16a48:	9001      	str	r0, [sp, #4]
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
   16a4a:	9b01      	ldr	r3, [sp, #4]
   16a4c:	789b      	ldrb	r3, [r3, #2]
   16a4e:	2b81      	cmp	r3, #129	; 0x81
   16a50:	d107      	bne.n	16a62 <dmSecLescMsgHandler+0x1e>
  {
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
   16a52:	9b01      	ldr	r3, [sp, #4]
   16a54:	2234      	movs	r2, #52	; 0x34
   16a56:	709a      	strb	r2, [r3, #2]
    (*dmCb.cback)((dmEvt_t *) pMsg);
   16a58:	4b19      	ldr	r3, [pc, #100]	; (16ac0 <dmSecLescMsgHandler+0x7c>)
   16a5a:	689b      	ldr	r3, [r3, #8]
   16a5c:	9801      	ldr	r0, [sp, #4]
   16a5e:	4798      	blx	r3

    WsfBufFree(dmSecOobRand);

    (*dmCb.cback)((dmEvt_t *) &oobEvt);
  }
}
   16a60:	e02a      	b.n	16ab8 <dmSecLescMsgHandler+0x74>
  else if (pMsg->hdr.event == DM_SEC_MSG_CALC_OOB_CNF)
   16a62:	9b01      	ldr	r3, [sp, #4]
   16a64:	789b      	ldrb	r3, [r3, #2]
   16a66:	2b80      	cmp	r3, #128	; 0x80
   16a68:	d126      	bne.n	16ab8 <dmSecLescMsgHandler+0x74>
    secCmacMsg_t *pCmacMsg = (secCmacMsg_t *) pMsg;
   16a6a:	9b01      	ldr	r3, [sp, #4]
   16a6c:	930b      	str	r3, [sp, #44]	; 0x2c
    WsfBufFree(pCmacMsg->pPlainText);
   16a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16a70:	689b      	ldr	r3, [r3, #8]
   16a72:	4618      	mov	r0, r3
   16a74:	f008 feee 	bl	1f854 <WsfBufFree>
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   16a78:	2333      	movs	r3, #51	; 0x33
   16a7a:	f88d 300a 	strb.w	r3, [sp, #10]
    oobEvt.hdr.status = HCI_SUCCESS;
   16a7e:	2300      	movs	r3, #0
   16a80:	f88d 300b 	strb.w	r3, [sp, #11]
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
   16a84:	9b01      	ldr	r3, [sp, #4]
   16a86:	685a      	ldr	r2, [r3, #4]
   16a88:	ab02      	add	r3, sp, #8
   16a8a:	3304      	adds	r3, #4
   16a8c:	4611      	mov	r1, r2
   16a8e:	4618      	mov	r0, r3
   16a90:	f7f5 fc16 	bl	c2c0 <Calc128Cpy>
    Calc128Cpy(oobEvt.random, dmSecOobRand);
   16a94:	4b0b      	ldr	r3, [pc, #44]	; (16ac4 <dmSecLescMsgHandler+0x80>)
   16a96:	681a      	ldr	r2, [r3, #0]
   16a98:	ab02      	add	r3, sp, #8
   16a9a:	3314      	adds	r3, #20
   16a9c:	4611      	mov	r1, r2
   16a9e:	4618      	mov	r0, r3
   16aa0:	f7f5 fc0e 	bl	c2c0 <Calc128Cpy>
    WsfBufFree(dmSecOobRand);
   16aa4:	4b07      	ldr	r3, [pc, #28]	; (16ac4 <dmSecLescMsgHandler+0x80>)
   16aa6:	681b      	ldr	r3, [r3, #0]
   16aa8:	4618      	mov	r0, r3
   16aaa:	f008 fed3 	bl	1f854 <WsfBufFree>
    (*dmCb.cback)((dmEvt_t *) &oobEvt);
   16aae:	4b04      	ldr	r3, [pc, #16]	; (16ac0 <dmSecLescMsgHandler+0x7c>)
   16ab0:	689b      	ldr	r3, [r3, #8]
   16ab2:	aa02      	add	r2, sp, #8
   16ab4:	4610      	mov	r0, r2
   16ab6:	4798      	blx	r3
}
   16ab8:	bf00      	nop
   16aba:	b00d      	add	sp, #52	; 0x34
   16abc:	f85d fb04 	ldr.w	pc, [sp], #4
   16ac0:	100044f4 	.word	0x100044f4
   16ac4:	10004530 	.word	0x10004530

00016ac8 <DmSecGenerateEccKeyReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecGenerateEccKeyReq()
{
   16ac8:	b508      	push	{r3, lr}
  SecEccGenKey(dmCb.handlerId, 0, DM_SEC_MSG_ECC_KEY_CNF);
   16aca:	4b04      	ldr	r3, [pc, #16]	; (16adc <DmSecGenerateEccKeyReq+0x14>)
   16acc:	7b1b      	ldrb	r3, [r3, #12]
   16ace:	2281      	movs	r2, #129	; 0x81
   16ad0:	2100      	movs	r1, #0
   16ad2:	4618      	mov	r0, r3
   16ad4:	f7f9 ff29 	bl	1092a <SecEccGenKey>
}
   16ad8:	bf00      	nop
   16ada:	bd08      	pop	{r3, pc}
   16adc:	100044f4 	.word	0x100044f4

00016ae0 <DmSecSetEccKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSetEccKey(secEccKey_t *pKey)
{
   16ae0:	b500      	push	{lr}
   16ae2:	b083      	sub	sp, #12
   16ae4:	9001      	str	r0, [sp, #4]
  memcpy(&localEccKey, pKey, sizeof(secEccKey_t));
   16ae6:	4a06      	ldr	r2, [pc, #24]	; (16b00 <DmSecSetEccKey+0x20>)
   16ae8:	9b01      	ldr	r3, [sp, #4]
   16aea:	4610      	mov	r0, r2
   16aec:	4619      	mov	r1, r3
   16aee:	2360      	movs	r3, #96	; 0x60
   16af0:	461a      	mov	r2, r3
   16af2:	f7f5 fb05 	bl	c100 <memcpy>
}
   16af6:	bf00      	nop
   16af8:	b003      	add	sp, #12
   16afa:	f85d fb04 	ldr.w	pc, [sp], #4
   16afe:	bf00      	nop
   16b00:	10004534 	.word	0x10004534

00016b04 <DmSecGetEccKey>:
 *  \return Pointer to local ECC key.
 */
/*************************************************************************************************/
secEccKey_t *DmSecGetEccKey(void)
{
  return &localEccKey;
   16b04:	4b01      	ldr	r3, [pc, #4]	; (16b0c <DmSecGetEccKey+0x8>)
}
   16b06:	4618      	mov	r0, r3
   16b08:	4770      	bx	lr
   16b0a:	bf00      	nop
   16b0c:	10004534 	.word	0x10004534

00016b10 <DmSecCompareRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecCompareRsp(dmConnId_t connId, bool_t valid)
{
   16b10:	b500      	push	{lr}
   16b12:	b085      	sub	sp, #20
   16b14:	4603      	mov	r3, r0
   16b16:	460a      	mov	r2, r1
   16b18:	f88d 3007 	strb.w	r3, [sp, #7]
   16b1c:	4613      	mov	r3, r2
   16b1e:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDmMsg_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmMsg_t))) != NULL)
   16b22:	2016      	movs	r0, #22
   16b24:	f008 fee6 	bl	1f8f4 <WsfMsgAlloc>
   16b28:	9003      	str	r0, [sp, #12]
   16b2a:	9b03      	ldr	r3, [sp, #12]
   16b2c:	2b00      	cmp	r3, #0
   16b2e:	d016      	beq.n	16b5e <DmSecCompareRsp+0x4e>
  {
    /* Execution an an SMP state machine event to send the compare response */
    pMsg->hdr.param = connId;
   16b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16b34:	b29a      	uxth	r2, r3
   16b36:	9b03      	ldr	r3, [sp, #12]
   16b38:	801a      	strh	r2, [r3, #0]

    if (valid)
   16b3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   16b3e:	2b00      	cmp	r3, #0
   16b40:	d003      	beq.n	16b4a <DmSecCompareRsp+0x3a>
    {
      pMsg->hdr.event = SMP_MSG_API_USER_CONFIRM;
   16b42:	9b03      	ldr	r3, [sp, #12]
   16b44:	2216      	movs	r2, #22
   16b46:	709a      	strb	r2, [r3, #2]
   16b48:	e006      	b.n	16b58 <DmSecCompareRsp+0x48>
    }
    else
    {
      SmpScGetCancelMsgWithReattempt(connId, (wsfMsgHdr_t *) pMsg, SMP_ERR_NUMERIC_COMPARISON);
   16b4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16b4e:	220c      	movs	r2, #12
   16b50:	9903      	ldr	r1, [sp, #12]
   16b52:	4618      	mov	r0, r3
   16b54:	f7fd fbea 	bl	1432c <SmpScGetCancelMsgWithReattempt>
    }

    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   16b58:	9803      	ldr	r0, [sp, #12]
   16b5a:	f7fc f903 	bl	12d64 <SmpDmMsgSend>
  }
}
   16b5e:	bf00      	nop
   16b60:	b005      	add	sp, #20
   16b62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00016b68 <DmSecGetCompareValue>:
 *
 *  \return Six-digit compare value.
 */
/*************************************************************************************************/
uint32_t DmSecGetCompareValue(uint8_t *pConfirm)
{
   16b68:	b084      	sub	sp, #16
   16b6a:	9001      	str	r0, [sp, #4]
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   16b6c:	9b01      	ldr	r3, [sp, #4]
   16b6e:	330f      	adds	r3, #15
   16b70:	781b      	ldrb	r3, [r3, #0]
   16b72:	461a      	mov	r2, r3
                     ((uint32_t) pConfirm[14] << 8)  +
   16b74:	9b01      	ldr	r3, [sp, #4]
   16b76:	330e      	adds	r3, #14
   16b78:	781b      	ldrb	r3, [r3, #0]
   16b7a:	021b      	lsls	r3, r3, #8
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   16b7c:	441a      	add	r2, r3
                     ((uint32_t) pConfirm[13] << 16) +
   16b7e:	9b01      	ldr	r3, [sp, #4]
   16b80:	330d      	adds	r3, #13
   16b82:	781b      	ldrb	r3, [r3, #0]
   16b84:	041b      	lsls	r3, r3, #16
                     ((uint32_t) pConfirm[14] << 8)  +
   16b86:	441a      	add	r2, r3
                     ((uint32_t) pConfirm[12] << 24));
   16b88:	9b01      	ldr	r3, [sp, #4]
   16b8a:	330c      	adds	r3, #12
   16b8c:	781b      	ldrb	r3, [r3, #0]
   16b8e:	061b      	lsls	r3, r3, #24
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   16b90:	4413      	add	r3, r2
   16b92:	9303      	str	r3, [sp, #12]

  /* return the least significant six digits */
  return compare % 1000000;
   16b94:	9a03      	ldr	r2, [sp, #12]
   16b96:	4b05      	ldr	r3, [pc, #20]	; (16bac <DmSecGetCompareValue+0x44>)
   16b98:	fba3 1302 	umull	r1, r3, r3, r2
   16b9c:	0c9b      	lsrs	r3, r3, #18
   16b9e:	4904      	ldr	r1, [pc, #16]	; (16bb0 <DmSecGetCompareValue+0x48>)
   16ba0:	fb01 f303 	mul.w	r3, r1, r3
   16ba4:	1ad3      	subs	r3, r2, r3
}
   16ba6:	4618      	mov	r0, r3
   16ba8:	b004      	add	sp, #16
   16baa:	4770      	bx	lr
   16bac:	431bde83 	.word	0x431bde83
   16bb0:	000f4240 	.word	0x000f4240

00016bb4 <DmSecLescInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLescInit(void)
{
  dmFcnIfTbl[DM_ID_LESC] = (dmFcnIf_t *) &dmSecLescFcnIf;
   16bb4:	4b02      	ldr	r3, [pc, #8]	; (16bc0 <DmSecLescInit+0xc>)
   16bb6:	4a03      	ldr	r2, [pc, #12]	; (16bc4 <DmSecLescInit+0x10>)
   16bb8:	621a      	str	r2, [r3, #32]
}
   16bba:	bf00      	nop
   16bbc:	4770      	bx	lr
   16bbe:	bf00      	nop
   16bc0:	10002b0c 	.word	0x10002b0c
   16bc4:	000285ec 	.word	0x000285ec

00016bc8 <DmSecPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecPairRsp(dmConnId_t connId, uint8_t oob, uint8_t auth, uint8_t iKeyDist, uint8_t rKeyDist)
{
   16bc8:	b510      	push	{r4, lr}
   16bca:	b084      	sub	sp, #16
   16bcc:	4604      	mov	r4, r0
   16bce:	4608      	mov	r0, r1
   16bd0:	4611      	mov	r1, r2
   16bd2:	461a      	mov	r2, r3
   16bd4:	4623      	mov	r3, r4
   16bd6:	f88d 3007 	strb.w	r3, [sp, #7]
   16bda:	4603      	mov	r3, r0
   16bdc:	f88d 3006 	strb.w	r3, [sp, #6]
   16be0:	460b      	mov	r3, r1
   16be2:	f88d 3005 	strb.w	r3, [sp, #5]
   16be6:	4613      	mov	r3, r2
   16be8:	f88d 3004 	strb.w	r3, [sp, #4]
  smpDmPair_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
   16bec:	2008      	movs	r0, #8
   16bee:	f008 fe81 	bl	1f8f4 <WsfMsgAlloc>
   16bf2:	9003      	str	r0, [sp, #12]
   16bf4:	9b03      	ldr	r3, [sp, #12]
   16bf6:	2b00      	cmp	r3, #0
   16bf8:	d020      	beq.n	16c3c <DmSecPairRsp+0x74>
  {
    pMsg->hdr.event = SMP_MSG_API_PAIR_RSP;
   16bfa:	9b03      	ldr	r3, [sp, #12]
   16bfc:	2202      	movs	r2, #2
   16bfe:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   16c00:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16c04:	b29a      	uxth	r2, r3
   16c06:	9b03      	ldr	r3, [sp, #12]
   16c08:	801a      	strh	r2, [r3, #0]
    pMsg->oob = oob;
   16c0a:	9b03      	ldr	r3, [sp, #12]
   16c0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16c10:	711a      	strb	r2, [r3, #4]
    pMsg->auth = auth;
   16c12:	9b03      	ldr	r3, [sp, #12]
   16c14:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16c18:	715a      	strb	r2, [r3, #5]

    /* clear any erroneous key dist bits set by app */
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
   16c1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   16c1e:	f003 0307 	and.w	r3, r3, #7
   16c22:	b2da      	uxtb	r2, r3
   16c24:	9b03      	ldr	r3, [sp, #12]
   16c26:	719a      	strb	r2, [r3, #6]
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
   16c28:	f89d 3018 	ldrb.w	r3, [sp, #24]
   16c2c:	f003 0307 	and.w	r3, r3, #7
   16c30:	b2da      	uxtb	r2, r3
   16c32:	9b03      	ldr	r3, [sp, #12]
   16c34:	71da      	strb	r2, [r3, #7]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   16c36:	9803      	ldr	r0, [sp, #12]
   16c38:	f7fc f894 	bl	12d64 <SmpDmMsgSend>
  }
}
   16c3c:	bf00      	nop
   16c3e:	b004      	add	sp, #16
   16c40:	bd10      	pop	{r4, pc}

00016c42 <DmSecSlaveReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSlaveReq(dmConnId_t connId, uint8_t auth)
{
   16c42:	b500      	push	{lr}
   16c44:	b085      	sub	sp, #20
   16c46:	4603      	mov	r3, r0
   16c48:	460a      	mov	r2, r1
   16c4a:	f88d 3007 	strb.w	r3, [sp, #7]
   16c4e:	4613      	mov	r3, r2
   16c50:	f88d 3006 	strb.w	r3, [sp, #6]
  smpDmSecurityReq_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmSecurityReq_t))) != NULL)
   16c54:	2006      	movs	r0, #6
   16c56:	f008 fe4d 	bl	1f8f4 <WsfMsgAlloc>
   16c5a:	9003      	str	r0, [sp, #12]
   16c5c:	9b03      	ldr	r3, [sp, #12]
   16c5e:	2b00      	cmp	r3, #0
   16c60:	d00e      	beq.n	16c80 <DmSecSlaveReq+0x3e>
  {
    pMsg->hdr.event = SMP_MSG_API_SECURITY_REQ;
   16c62:	9b03      	ldr	r3, [sp, #12]
   16c64:	2205      	movs	r2, #5
   16c66:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   16c68:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16c6c:	b29a      	uxth	r2, r3
   16c6e:	9b03      	ldr	r3, [sp, #12]
   16c70:	801a      	strh	r2, [r3, #0]
    pMsg->auth = auth;
   16c72:	9b03      	ldr	r3, [sp, #12]
   16c74:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16c78:	711a      	strb	r2, [r3, #4]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   16c7a:	9803      	ldr	r0, [sp, #12]
   16c7c:	f7fc f872 	bl	12d64 <SmpDmMsgSend>
  }
}
   16c80:	bf00      	nop
   16c82:	b005      	add	sp, #20
   16c84:	f85d fb04 	ldr.w	pc, [sp], #4

00016c88 <DmSecLtkRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLtkRsp(dmConnId_t connId, bool_t keyFound, uint8_t secLevel, uint8_t *pKey)
{
   16c88:	b500      	push	{lr}
   16c8a:	b085      	sub	sp, #20
   16c8c:	9300      	str	r3, [sp, #0]
   16c8e:	4603      	mov	r3, r0
   16c90:	f88d 3007 	strb.w	r3, [sp, #7]
   16c94:	460b      	mov	r3, r1
   16c96:	f88d 3006 	strb.w	r3, [sp, #6]
   16c9a:	4613      	mov	r3, r2
   16c9c:	f88d 3005 	strb.w	r3, [sp, #5]
  dmSecApiLtkRsp_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiLtkRsp_t))) != NULL)
   16ca0:	2016      	movs	r0, #22
   16ca2:	f008 fe27 	bl	1f8f4 <WsfMsgAlloc>
   16ca6:	9003      	str	r0, [sp, #12]
   16ca8:	9b03      	ldr	r3, [sp, #12]
   16caa:	2b00      	cmp	r3, #0
   16cac:	d01f      	beq.n	16cee <DmSecLtkRsp+0x66>
  {
    pMsg->hdr.event = DM_SEC_MSG_API_LTK_RSP;
   16cae:	9b03      	ldr	r3, [sp, #12]
   16cb0:	2251      	movs	r2, #81	; 0x51
   16cb2:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.param = connId;
   16cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16cb8:	b29a      	uxth	r2, r3
   16cba:	9b03      	ldr	r3, [sp, #12]
   16cbc:	801a      	strh	r2, [r3, #0]
    pMsg->keyFound = keyFound;
   16cbe:	9b03      	ldr	r3, [sp, #12]
   16cc0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   16cc4:	751a      	strb	r2, [r3, #20]
    pMsg->secLevel = secLevel;
   16cc6:	9b03      	ldr	r3, [sp, #12]
   16cc8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   16ccc:	755a      	strb	r2, [r3, #21]
    if (keyFound)
   16cce:	f89d 3006 	ldrb.w	r3, [sp, #6]
   16cd2:	2b00      	cmp	r3, #0
   16cd4:	d005      	beq.n	16ce2 <DmSecLtkRsp+0x5a>
    {
      Calc128Cpy(pMsg->key, pKey);
   16cd6:	9b03      	ldr	r3, [sp, #12]
   16cd8:	3304      	adds	r3, #4
   16cda:	9900      	ldr	r1, [sp, #0]
   16cdc:	4618      	mov	r0, r3
   16cde:	f7f5 faef 	bl	c2c0 <Calc128Cpy>
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
   16ce2:	4b05      	ldr	r3, [pc, #20]	; (16cf8 <DmSecLtkRsp+0x70>)
   16ce4:	7b1b      	ldrb	r3, [r3, #12]
   16ce6:	9903      	ldr	r1, [sp, #12]
   16ce8:	4618      	mov	r0, r3
   16cea:	f008 fe27 	bl	1f93c <WsfMsgSend>
  }
}
   16cee:	bf00      	nop
   16cf0:	b005      	add	sp, #20
   16cf2:	f85d fb04 	ldr.w	pc, [sp], #4
   16cf6:	bf00      	nop
   16cf8:	100044f4 	.word	0x100044f4

00016cfc <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
   16cfc:	b508      	push	{r3, lr}
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   16cfe:	2100      	movs	r1, #0
   16d00:	2000      	movs	r0, #0
   16d02:	f010 f979 	bl	26ff8 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   16d06:	480a      	ldr	r0, [pc, #40]	; (16d30 <main+0x34>)
   16d08:	f00f ffce 	bl	26ca8 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   16d0c:	f00f fff0 	bl	26cf0 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   16d10:	f010 ffcc 	bl	27cac <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   16d14:	2001      	movs	r0, #1
   16d16:	f010 ffd1 	bl	27cbc <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   16d1a:	f00e fd21 	bl	25760 <am_bsp_low_power_init>

    //
    // Turn off unneeded Flash & SRAM
    //
#if defined(AM_PART_APOLLO3)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_96K);
   16d1e:	2004      	movs	r0, #4
   16d20:	f010 fd3e 	bl	277a0 <am_hal_pwrctrl_memory_enable>
#endif
#if defined(AM_PART_APOLLO3P)
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM);
#endif
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_MIN);
   16d24:	200e      	movs	r0, #14
   16d26:	f010 fd3b 	bl	277a0 <am_hal_pwrctrl_memory_enable>
    am_util_debug_printf("FreeRTOS Fit Example\n");

    //
    // Run the application.
    //
    run_tasks();
   16d2a:	f000 f939 	bl	16fa0 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   16d2e:	e7fe      	b.n	16d2e <main+0x32>
   16d30:	0002a900 	.word	0x0002a900

00016d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   16d34:	b082      	sub	sp, #8
   16d36:	4603      	mov	r3, r0
   16d38:	9100      	str	r1, [sp, #0]
   16d3a:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   16d3e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   16d42:	2b00      	cmp	r3, #0
   16d44:	db0a      	blt.n	16d5c <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16d46:	9b00      	ldr	r3, [sp, #0]
   16d48:	b2da      	uxtb	r2, r3
   16d4a:	490c      	ldr	r1, [pc, #48]	; (16d7c <__NVIC_SetPriority+0x48>)
   16d4c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   16d50:	0152      	lsls	r2, r2, #5
   16d52:	b2d2      	uxtb	r2, r2
   16d54:	440b      	add	r3, r1
   16d56:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   16d5a:	e00b      	b.n	16d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16d5c:	9b00      	ldr	r3, [sp, #0]
   16d5e:	b2da      	uxtb	r2, r3
   16d60:	4907      	ldr	r1, [pc, #28]	; (16d80 <__NVIC_SetPriority+0x4c>)
   16d62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16d66:	f003 030f 	and.w	r3, r3, #15
   16d6a:	3b04      	subs	r3, #4
   16d6c:	0152      	lsls	r2, r2, #5
   16d6e:	b2d2      	uxtb	r2, r2
   16d70:	440b      	add	r3, r1
   16d72:	761a      	strb	r2, [r3, #24]
}
   16d74:	bf00      	nop
   16d76:	b002      	add	sp, #8
   16d78:	4770      	bx	lr
   16d7a:	bf00      	nop
   16d7c:	e000e100 	.word	0xe000e100
   16d80:	e000ed00 	.word	0xe000ed00

00016d84 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   16d84:	b500      	push	{lr}
   16d86:	b083      	sub	sp, #12
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    WsfOsInit();
   16d88:	f008 ff18 	bl	1fbbc <WsfOsInit>
    WsfTimerInit();
   16d8c:	f009 f91e 	bl	1ffcc <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   16d90:	4b46      	ldr	r3, [pc, #280]	; (16eac <exactle_stack_init+0x128>)
   16d92:	2204      	movs	r2, #4
   16d94:	4946      	ldr	r1, [pc, #280]	; (16eb0 <exactle_stack_init+0x12c>)
   16d96:	f44f 6015 	mov.w	r0, #2384	; 0x950
   16d9a:	f008 fc67 	bl	1f66c <WsfBufInit>
   16d9e:	4603      	mov	r3, r0
   16da0:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   16da4:	f000 fccc 	bl	17740 <SecInit>
    SecAesInit();
   16da8:	f000 fa60 	bl	1726c <SecAesInit>
    SecCmacInit();
   16dac:	f000 fc2e 	bl	1760c <SecCmacInit>
    SecEccInit();
   16db0:	f7f9 fe3e 	bl	10a30 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   16db4:	483f      	ldr	r0, [pc, #252]	; (16eb4 <exactle_stack_init+0x130>)
   16db6:	f008 fedb 	bl	1fb70 <WsfOsSetNextHandler>
   16dba:	4603      	mov	r3, r0
   16dbc:	f88d 3005 	strb.w	r3, [sp, #5]
    HciHandlerInit(handlerId);
   16dc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16dc4:	4618      	mov	r0, r3
   16dc6:	f7f9 fe5d 	bl	10a84 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   16dca:	483b      	ldr	r0, [pc, #236]	; (16eb8 <exactle_stack_init+0x134>)
   16dcc:	f008 fed0 	bl	1fb70 <WsfOsSetNextHandler>
   16dd0:	4603      	mov	r3, r0
   16dd2:	f88d 3005 	strb.w	r3, [sp, #5]
    DmDevVsInit(0);
   16dd6:	2000      	movs	r0, #0
   16dd8:	f7ff f8ce 	bl	15f78 <DmDevVsInit>
    DmAdvInit();
   16ddc:	f7fd fe90 	bl	14b00 <DmAdvInit>
    DmConnInit();
   16de0:	f7fe fbca 	bl	15578 <DmConnInit>
    DmConnSlaveInit();
   16de4:	f7fe ff7c 	bl	15ce0 <DmConnSlaveInit>
    DmSecInit();
   16de8:	f7ff fe06 	bl	169f8 <DmSecInit>
    DmSecLescInit();
   16dec:	f7ff fee2 	bl	16bb4 <DmSecLescInit>
    DmPrivInit();
   16df0:	f7ff fbcc 	bl	1658c <DmPrivInit>
    DmHandlerInit(handlerId);
   16df4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16df8:	4618      	mov	r0, r3
   16dfa:	f7ff f92b 	bl	16054 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   16dfe:	482f      	ldr	r0, [pc, #188]	; (16ebc <exactle_stack_init+0x138>)
   16e00:	f008 feb6 	bl	1fb70 <WsfOsSetNextHandler>
   16e04:	4603      	mov	r3, r0
   16e06:	f88d 3005 	strb.w	r3, [sp, #5]
    L2cSlaveHandlerInit(handlerId);
   16e0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16e0e:	4618      	mov	r0, r3
   16e10:	f006 fb54 	bl	1d4bc <L2cSlaveHandlerInit>
    L2cInit();
   16e14:	f006 f94e 	bl	1d0b4 <L2cInit>
    L2cSlaveInit();
   16e18:	f006 fa92 	bl	1d340 <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   16e1c:	4828      	ldr	r0, [pc, #160]	; (16ec0 <exactle_stack_init+0x13c>)
   16e1e:	f008 fea7 	bl	1fb70 <WsfOsSetNextHandler>
   16e22:	4603      	mov	r3, r0
   16e24:	f88d 3005 	strb.w	r3, [sp, #5]
    AttHandlerInit(handlerId);
   16e28:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16e2c:	4618      	mov	r0, r3
   16e2e:	f005 f9c1 	bl	1c1b4 <AttHandlerInit>
    AttsInit();
   16e32:	f003 f88b 	bl	19f4c <AttsInit>
    AttsIndInit();
   16e36:	f002 fd29 	bl	1988c <AttsIndInit>
    AttcInit();
   16e3a:	f001 f985 	bl	18148 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   16e3e:	4821      	ldr	r0, [pc, #132]	; (16ec4 <exactle_stack_init+0x140>)
   16e40:	f008 fe96 	bl	1fb70 <WsfOsSetNextHandler>
   16e44:	4603      	mov	r3, r0
   16e46:	f88d 3005 	strb.w	r3, [sp, #5]
    SmpHandlerInit(handlerId);
   16e4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16e4e:	4618      	mov	r0, r3
   16e50:	f7fc f814 	bl	12e7c <SmpHandlerInit>
    SmprInit();
   16e54:	f7fa fbce 	bl	115f4 <SmprInit>
    SmprScInit();
   16e58:	f7fa fbbe 	bl	115d8 <SmprScInit>
    HciSetMaxRxAclLen(251);
   16e5c:	20fb      	movs	r0, #251	; 0xfb
   16e5e:	f7f7 f99f 	bl	e1a0 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   16e62:	4819      	ldr	r0, [pc, #100]	; (16ec8 <exactle_stack_init+0x144>)
   16e64:	f008 fe84 	bl	1fb70 <WsfOsSetNextHandler>
   16e68:	4603      	mov	r3, r0
   16e6a:	f88d 3005 	strb.w	r3, [sp, #5]
    AppHandlerInit(handlerId);
   16e6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16e72:	4618      	mov	r0, r3
   16e74:	f00c fe1c 	bl	23ab0 <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(FitHandler);
   16e78:	4814      	ldr	r0, [pc, #80]	; (16ecc <exactle_stack_init+0x148>)
   16e7a:	f008 fe79 	bl	1fb70 <WsfOsSetNextHandler>
   16e7e:	4603      	mov	r3, r0
   16e80:	f88d 3005 	strb.w	r3, [sp, #5]
    FitHandlerInit(handlerId);
   16e84:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16e88:	4618      	mov	r0, r3
   16e8a:	f009 fdb9 	bl	20a00 <FitHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   16e8e:	4810      	ldr	r0, [pc, #64]	; (16ed0 <exactle_stack_init+0x14c>)
   16e90:	f008 fe6e 	bl	1fb70 <WsfOsSetNextHandler>
   16e94:	4603      	mov	r3, r0
   16e96:	f88d 3005 	strb.w	r3, [sp, #5]
    HciDrvHandlerInit(handlerId);
   16e9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   16e9e:	4618      	mov	r0, r3
   16ea0:	f00a f862 	bl	20f68 <HciDrvHandlerInit>
}
   16ea4:	bf00      	nop
   16ea6:	b003      	add	sp, #12
   16ea8:	f85d fb04 	ldr.w	pc, [sp], #4
   16eac:	10002b44 	.word	0x10002b44
   16eb0:	10004598 	.word	0x10004598
   16eb4:	00010ab5 	.word	0x00010ab5
   16eb8:	00016089 	.word	0x00016089
   16ebc:	0001d4e5 	.word	0x0001d4e5
   16ec0:	0001c205 	.word	0x0001c205
   16ec4:	00012f11 	.word	0x00012f11
   16ec8:	00023ad5 	.word	0x00023ad5
   16ecc:	00020a9d 	.word	0x00020a9d
   16ed0:	00020ff1 	.word	0x00020ff1

00016ed4 <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
   16ed4:	b082      	sub	sp, #8
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
   16ed6:	4b04      	ldr	r3, [pc, #16]	; (16ee8 <am_uart_isr+0x14>)
   16ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16eda:	9301      	str	r3, [sp, #4]
    UARTn(0)->IEC = ui32Status;
   16edc:	4a02      	ldr	r2, [pc, #8]	; (16ee8 <am_uart_isr+0x14>)
   16ede:	9b01      	ldr	r3, [sp, #4]
   16ee0:	6453      	str	r3, [r2, #68]	; 0x44

}
   16ee2:	bf00      	nop
   16ee4:	b002      	add	sp, #8
   16ee6:	4770      	bx	lr
   16ee8:	4001c000 	.word	0x4001c000

00016eec <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
   16eec:	b508      	push	{r3, lr}

    HciDrvIntService();
   16eee:	f00a f85b 	bl	20fa8 <HciDrvIntService>
}
   16ef2:	bf00      	nop
   16ef4:	bd08      	pop	{r3, pc}

00016ef6 <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   16ef6:	b508      	push	{r3, lr}
    am_util_debug_printf("RadioTask: setup\r\n");


    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
   16ef8:	2104      	movs	r1, #4
   16efa:	200c      	movs	r0, #12
   16efc:	f7ff ff1a 	bl	16d34 <__NVIC_SetPriority>

}
   16f00:	bf00      	nop
   16f02:	bd08      	pop	{r3, pc}

00016f04 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   16f04:	b500      	push	{lr}
   16f06:	b083      	sub	sp, #12
   16f08:	9001      	str	r0, [sp, #4]
    am_util_debug_printf("Starting wicentric trace:\n\n");
#endif
    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   16f0a:	2001      	movs	r0, #1
   16f0c:	f009 fe92 	bl	20c34 <HciDrvRadioBoot>

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   16f10:	f7ff ff38 	bl	16d84 <exactle_stack_init>


    //
    // Start the "Fit" profile.
    //
    FitStart();
   16f14:	f009 fdec 	bl	20af0 <FitStart>
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        wsfOsDispatcher();
   16f18:	f008 fe66 	bl	1fbe8 <wsfOsDispatcher>
   16f1c:	e7fc      	b.n	16f18 <RadioTask+0x14>

00016f1e <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
   16f1e:	b500      	push	{lr}
   16f20:	b083      	sub	sp, #12
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
   16f22:	2000      	movs	r0, #0
   16f24:	f010 f94c 	bl	271c0 <am_hal_ctimer_int_status_get>
   16f28:	9001      	str	r0, [sp, #4]
    am_hal_ctimer_int_clear(ui32Status);
   16f2a:	9801      	ldr	r0, [sp, #4]
   16f2c:	f010 f936 	bl	2719c <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
   16f30:	9801      	ldr	r0, [sp, #4]
   16f32:	f010 f91b 	bl	2716c <am_hal_ctimer_int_service>
}
   16f36:	bf00      	nop
   16f38:	b003      	add	sp, #12
   16f3a:	f85d fb04 	ldr.w	pc, [sp], #4

00016f3e <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
   16f3e:	b500      	push	{lr}
   16f40:	b083      	sub	sp, #12
   16f42:	9001      	str	r0, [sp, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   16f44:	2001      	movs	r0, #1
   16f46:	f010 fe79 	bl	27c3c <am_hal_sysctrl_sleep>
    return 0;
   16f4a:	2300      	movs	r3, #0
}
   16f4c:	4618      	mov	r0, r3
   16f4e:	b003      	add	sp, #12
   16f50:	f85d fb04 	ldr.w	pc, [sp], #4

00016f54 <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
   16f54:	b082      	sub	sp, #8
   16f56:	9001      	str	r0, [sp, #4]
    return;
   16f58:	bf00      	nop
}
   16f5a:	b002      	add	sp, #8
   16f5c:	4770      	bx	lr

00016f5e <vApplicationMallocFailedHook>:
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
   16f5e:	e7fe      	b.n	16f5e <vApplicationMallocFailedHook>

00016f60 <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   16f60:	b082      	sub	sp, #8
   16f62:	9001      	str	r0, [sp, #4]
   16f64:	9100      	str	r1, [sp, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
   16f66:	be00      	bkpt	0x0000
   16f68:	e7fd      	b.n	16f66 <vApplicationStackOverflowHook+0x6>
	...

00016f6c <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   16f6c:	b500      	push	{lr}
   16f6e:	b085      	sub	sp, #20
   16f70:	9003      	str	r0, [sp, #12]
    am_util_debug_printf("Running setup tasks...\r\n");

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   16f72:	f7ff ffc0 	bl	16ef6 <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   16f76:	4b07      	ldr	r3, [pc, #28]	; (16f94 <setup_task+0x28>)
   16f78:	9301      	str	r3, [sp, #4]
   16f7a:	2303      	movs	r3, #3
   16f7c:	9300      	str	r3, [sp, #0]
   16f7e:	2300      	movs	r3, #0
   16f80:	f44f 7200 	mov.w	r2, #512	; 0x200
   16f84:	4904      	ldr	r1, [pc, #16]	; (16f98 <setup_task+0x2c>)
   16f86:	4805      	ldr	r0, [pc, #20]	; (16f9c <setup_task+0x30>)
   16f88:	f00b fb5a 	bl	22640 <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   16f8c:	2000      	movs	r0, #0
   16f8e:	f00b fc7f 	bl	22890 <vTaskSuspend>

    while (1);
   16f92:	e7fe      	b.n	16f92 <setup_task+0x26>
   16f94:	10004594 	.word	0x10004594
   16f98:	00027d00 	.word	0x00027d00
   16f9c:	00016f05 	.word	0x00016f05

00016fa0 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   16fa0:	b500      	push	{lr}
   16fa2:	b083      	sub	sp, #12
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   16fa4:	4b08      	ldr	r3, [pc, #32]	; (16fc8 <run_tasks+0x28>)
   16fa6:	9301      	str	r3, [sp, #4]
   16fa8:	2303      	movs	r3, #3
   16faa:	9300      	str	r3, [sp, #0]
   16fac:	2300      	movs	r3, #0
   16fae:	f44f 7200 	mov.w	r2, #512	; 0x200
   16fb2:	4906      	ldr	r1, [pc, #24]	; (16fcc <run_tasks+0x2c>)
   16fb4:	4806      	ldr	r0, [pc, #24]	; (16fd0 <run_tasks+0x30>)
   16fb6:	f00b fb43 	bl	22640 <xTaskCreate>


    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
   16fba:	f00b fcd3 	bl	22964 <vTaskStartScheduler>
}
   16fbe:	bf00      	nop
   16fc0:	b003      	add	sp, #12
   16fc2:	f85d fb04 	ldr.w	pc, [sp], #4
   16fc6:	bf00      	nop
   16fc8:	10004ee8 	.word	0x10004ee8
   16fcc:	00027d0c 	.word	0x00027d0c
   16fd0:	00016f6d 	.word	0x00016f6d

00016fd4 <GattSetSvcChangedIdx>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattSetSvcChangedIdx(uint8_t idx)
{
   16fd4:	b082      	sub	sp, #8
   16fd6:	4603      	mov	r3, r0
   16fd8:	f88d 3007 	strb.w	r3, [sp, #7]
  gattServCb.svcChangedCccdIdxSet = TRUE;
   16fdc:	4b04      	ldr	r3, [pc, #16]	; (16ff0 <GattSetSvcChangedIdx+0x1c>)
   16fde:	2201      	movs	r2, #1
   16fe0:	701a      	strb	r2, [r3, #0]
  gattServCb.svcChangedCccdIdx = idx;
   16fe2:	4a03      	ldr	r2, [pc, #12]	; (16ff0 <GattSetSvcChangedIdx+0x1c>)
   16fe4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16fe8:	7053      	strb	r3, [r2, #1]
}
   16fea:	bf00      	nop
   16fec:	b002      	add	sp, #8
   16fee:	4770      	bx	lr
   16ff0:	10004eec 	.word	0x10004eec

00016ff4 <GattSendServiceChangedInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattSendServiceChangedInd(dmConnId_t connId, uint16_t start, uint16_t end)
{
   16ff4:	b500      	push	{lr}
   16ff6:	b085      	sub	sp, #20
   16ff8:	4603      	mov	r3, r0
   16ffa:	f88d 3007 	strb.w	r3, [sp, #7]
   16ffe:	460b      	mov	r3, r1
   17000:	f8ad 3004 	strh.w	r3, [sp, #4]
   17004:	4613      	mov	r3, r2
   17006:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t svcChangedValues[4];
  uint8_t *p;

  if (!gattServCb.svcChangedCccdIdxSet)
   1700a:	4b30      	ldr	r3, [pc, #192]	; (170cc <GattSendServiceChangedInd+0xd8>)
   1700c:	781b      	ldrb	r3, [r3, #0]
   1700e:	2b00      	cmp	r3, #0
   17010:	d058      	beq.n	170c4 <GattSendServiceChangedInd+0xd0>
  {
    return;
  }

  p = svcChangedValues;
   17012:	ab02      	add	r3, sp, #8
   17014:	9303      	str	r3, [sp, #12]
  UINT16_TO_BSTREAM(p, start);
   17016:	9b03      	ldr	r3, [sp, #12]
   17018:	1c5a      	adds	r2, r3, #1
   1701a:	9203      	str	r2, [sp, #12]
   1701c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   17020:	b2d2      	uxtb	r2, r2
   17022:	701a      	strb	r2, [r3, #0]
   17024:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17028:	0a1b      	lsrs	r3, r3, #8
   1702a:	b299      	uxth	r1, r3
   1702c:	9b03      	ldr	r3, [sp, #12]
   1702e:	1c5a      	adds	r2, r3, #1
   17030:	9203      	str	r2, [sp, #12]
   17032:	b2ca      	uxtb	r2, r1
   17034:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, end);
   17036:	9b03      	ldr	r3, [sp, #12]
   17038:	1c5a      	adds	r2, r3, #1
   1703a:	9203      	str	r2, [sp, #12]
   1703c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17040:	b2d2      	uxtb	r2, r2
   17042:	701a      	strb	r2, [r3, #0]
   17044:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   17048:	0a1b      	lsrs	r3, r3, #8
   1704a:	b299      	uxth	r1, r3
   1704c:	9b03      	ldr	r3, [sp, #12]
   1704e:	1c5a      	adds	r2, r3, #1
   17050:	9203      	str	r2, [sp, #12]
   17052:	b2ca      	uxtb	r2, r1
   17054:	701a      	strb	r2, [r3, #0]

  /* If connection is not specified */
  if (connId == DM_CONN_ID_NONE)
   17056:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1705a:	2b00      	cmp	r3, #0
   1705c:	d11f      	bne.n	1709e <GattSendServiceChangedInd+0xaa>
  {
    /* Send to all. */
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   1705e:	2301      	movs	r3, #1
   17060:	f88d 3007 	strb.w	r3, [sp, #7]
   17064:	e016      	b.n	17094 <GattSendServiceChangedInd+0xa0>
    {
      if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   17066:	4b19      	ldr	r3, [pc, #100]	; (170cc <GattSendServiceChangedInd+0xd8>)
   17068:	785a      	ldrb	r2, [r3, #1]
   1706a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1706e:	4611      	mov	r1, r2
   17070:	4618      	mov	r0, r3
   17072:	f001 ff01 	bl	18e78 <AttsCccEnabled>
   17076:	4603      	mov	r3, r0
   17078:	2b00      	cmp	r3, #0
   1707a:	d006      	beq.n	1708a <GattSendServiceChangedInd+0x96>
      {
        AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   1707c:	ab02      	add	r3, sp, #8
   1707e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17082:	2204      	movs	r2, #4
   17084:	2112      	movs	r1, #18
   17086:	f002 fc39 	bl	198fc <AttsHandleValueInd>
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   1708a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1708e:	3301      	adds	r3, #1
   17090:	f88d 3007 	strb.w	r3, [sp, #7]
   17094:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17098:	2b03      	cmp	r3, #3
   1709a:	d9e4      	bls.n	17066 <GattSendServiceChangedInd+0x72>
   1709c:	e013      	b.n	170c6 <GattSendServiceChangedInd+0xd2>
    }
  }
  else
  {
    /* Send to only this one. */
    if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   1709e:	4b0b      	ldr	r3, [pc, #44]	; (170cc <GattSendServiceChangedInd+0xd8>)
   170a0:	785a      	ldrb	r2, [r3, #1]
   170a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   170a6:	4611      	mov	r1, r2
   170a8:	4618      	mov	r0, r3
   170aa:	f001 fee5 	bl	18e78 <AttsCccEnabled>
   170ae:	4603      	mov	r3, r0
   170b0:	2b00      	cmp	r3, #0
   170b2:	d008      	beq.n	170c6 <GattSendServiceChangedInd+0xd2>
    {
      AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   170b4:	ab02      	add	r3, sp, #8
   170b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   170ba:	2204      	movs	r2, #4
   170bc:	2112      	movs	r1, #18
   170be:	f002 fc1d 	bl	198fc <AttsHandleValueInd>
   170c2:	e000      	b.n	170c6 <GattSendServiceChangedInd+0xd2>
    return;
   170c4:	bf00      	nop
    }
  }
}
   170c6:	b005      	add	sp, #20
   170c8:	f85d fb04 	ldr.w	pc, [sp], #4
   170cc:	10004eec 	.word	0x10004eec

000170d0 <GattReadCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t GattReadCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                      uint16_t offset, attsAttr_t *pAttr)
{
   170d0:	b510      	push	{r4, lr}
   170d2:	b084      	sub	sp, #16
   170d4:	4604      	mov	r4, r0
   170d6:	4608      	mov	r0, r1
   170d8:	4611      	mov	r1, r2
   170da:	461a      	mov	r2, r3
   170dc:	4623      	mov	r3, r4
   170de:	f88d 3007 	strb.w	r3, [sp, #7]
   170e2:	4603      	mov	r3, r0
   170e4:	f8ad 3004 	strh.w	r3, [sp, #4]
   170e8:	460b      	mov	r3, r1
   170ea:	f88d 3006 	strb.w	r3, [sp, #6]
   170ee:	4613      	mov	r3, r2
   170f0:	f8ad 3002 	strh.w	r3, [sp, #2]
  switch (handle)
   170f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   170f8:	2b15      	cmp	r3, #21
   170fa:	d10c      	bne.n	17116 <GattReadCback+0x46>
  {
    case GATT_CSF_HDL:
    {
      uint8_t csf[ATT_CSF_LEN];

      AttsCsfGetFeatures(connId, csf, sizeof(csf));
   170fc:	a903      	add	r1, sp, #12
   170fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17102:	2201      	movs	r2, #1
   17104:	4618      	mov	r0, r3
   17106:	f002 f891 	bl	1922c <AttsCsfGetFeatures>
      memcpy(pAttr->pValue, csf, ATT_CSF_LEN);
   1710a:	9b06      	ldr	r3, [sp, #24]
   1710c:	685b      	ldr	r3, [r3, #4]
   1710e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   17112:	701a      	strb	r2, [r3, #0]
    }
    break;
   17114:	e000      	b.n	17118 <GattReadCback+0x48>

    default:
      break;
   17116:	bf00      	nop
  }

  return ATT_SUCCESS;
   17118:	2300      	movs	r3, #0
}
   1711a:	4618      	mov	r0, r3
   1711c:	b004      	add	sp, #16
   1711e:	bd10      	pop	{r4, pc}

00017120 <GattWriteCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t GattWriteCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                       uint16_t offset, uint16_t len, uint8_t *pValue, attsAttr_t *pAttr)
{
   17120:	b510      	push	{r4, lr}
   17122:	b084      	sub	sp, #16
   17124:	4604      	mov	r4, r0
   17126:	4608      	mov	r0, r1
   17128:	4611      	mov	r1, r2
   1712a:	461a      	mov	r2, r3
   1712c:	4623      	mov	r3, r4
   1712e:	f88d 3007 	strb.w	r3, [sp, #7]
   17132:	4603      	mov	r3, r0
   17134:	f8ad 3004 	strh.w	r3, [sp, #4]
   17138:	460b      	mov	r3, r1
   1713a:	f88d 3006 	strb.w	r3, [sp, #6]
   1713e:	4613      	mov	r3, r2
   17140:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t status;

  switch (handle)
   17144:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17148:	2b15      	cmp	r3, #21
   1714a:	d10c      	bne.n	17166 <GattWriteCback+0x46>
  {
    case GATT_CSF_HDL:
      status = AttsCsfWriteFeatures(connId, offset, len, pValue);
   1714c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   17150:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   17154:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17158:	9b07      	ldr	r3, [sp, #28]
   1715a:	f002 f827 	bl	191ac <AttsCsfWriteFeatures>
   1715e:	4603      	mov	r3, r0
   17160:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   17164:	e003      	b.n	1716e <GattWriteCback+0x4e>

    default:
      status = ATT_SUCCESS;
   17166:	2300      	movs	r3, #0
   17168:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1716c:	bf00      	nop
  }

  return status;
   1716e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   17172:	4618      	mov	r0, r3
   17174:	b004      	add	sp, #16
   17176:	bd10      	pop	{r4, pc}

00017178 <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   17178:	b082      	sub	sp, #8
  uint8_t token = secCb.token++;
   1717a:	4b0e      	ldr	r3, [pc, #56]	; (171b4 <getNextToken+0x3c>)
   1717c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   17180:	1c5a      	adds	r2, r3, #1
   17182:	b2d1      	uxtb	r1, r2
   17184:	4a0b      	ldr	r2, [pc, #44]	; (171b4 <getNextToken+0x3c>)
   17186:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   1718a:	f88d 3007 	strb.w	r3, [sp, #7]

  if (token == SEC_TOKEN_INVALID)
   1718e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17192:	2bff      	cmp	r3, #255	; 0xff
   17194:	d109      	bne.n	171aa <getNextToken+0x32>
  {
    token = secCb.token++;
   17196:	4b07      	ldr	r3, [pc, #28]	; (171b4 <getNextToken+0x3c>)
   17198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1719c:	1c5a      	adds	r2, r3, #1
   1719e:	b2d1      	uxtb	r1, r2
   171a0:	4a04      	ldr	r2, [pc, #16]	; (171b4 <getNextToken+0x3c>)
   171a2:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   171a6:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return token;
   171aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
   171ae:	4618      	mov	r0, r3
   171b0:	b002      	add	sp, #8
   171b2:	4770      	bx	lr
   171b4:	10004ef0 	.word	0x10004ef0

000171b8 <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   171b8:	b500      	push	{lr}
   171ba:	b087      	sub	sp, #28
   171bc:	9003      	str	r0, [sp, #12]
   171be:	9102      	str	r1, [sp, #8]
   171c0:	4611      	mov	r1, r2
   171c2:	461a      	mov	r2, r3
   171c4:	460b      	mov	r3, r1
   171c6:	f88d 3007 	strb.w	r3, [sp, #7]
   171ca:	4613      	mov	r3, r2
   171cc:	f8ad 3004 	strh.w	r3, [sp, #4]
  secQueueBuf_t  *pBuf;

  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   171d0:	2038      	movs	r0, #56	; 0x38
   171d2:	f008 fb8f 	bl	1f8f4 <WsfMsgAlloc>
   171d6:	9005      	str	r0, [sp, #20]
   171d8:	9b05      	ldr	r3, [sp, #20]
   171da:	2b00      	cmp	r3, #0
   171dc:	d01f      	beq.n	1721e <SecAes+0x66>
  {
    pBuf->msg.hdr.status = getNextToken();
   171de:	f7ff ffcb 	bl	17178 <getNextToken>
   171e2:	4603      	mov	r3, r0
   171e4:	461a      	mov	r2, r3
   171e6:	9b05      	ldr	r3, [sp, #20]
   171e8:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   171ea:	9b05      	ldr	r3, [sp, #20]
   171ec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   171f0:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   171f2:	9b05      	ldr	r3, [sp, #20]
   171f4:	f89d 2020 	ldrb.w	r2, [sp, #32]
   171f8:	709a      	strb	r2, [r3, #2]

    pBuf->type = SEC_TYPE_AES;
   171fa:	9b05      	ldr	r3, [sp, #20]
   171fc:	2200      	movs	r2, #0
   171fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* queue buffer */
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   17202:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17206:	9a05      	ldr	r2, [sp, #20]
   17208:	4619      	mov	r1, r3
   1720a:	4807      	ldr	r0, [pc, #28]	; (17228 <SecAes+0x70>)
   1720c:	f008 fbb1 	bl	1f972 <WsfMsgEnq>

    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   17210:	9902      	ldr	r1, [sp, #8]
   17212:	9803      	ldr	r0, [sp, #12]
   17214:	f7f5 ff9d 	bl	d152 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   17218:	9b05      	ldr	r3, [sp, #20]
   1721a:	78db      	ldrb	r3, [r3, #3]
   1721c:	e000      	b.n	17220 <SecAes+0x68>
  }

  return SEC_TOKEN_INVALID;
   1721e:	23ff      	movs	r3, #255	; 0xff
}
   17220:	4618      	mov	r0, r3
   17222:	b007      	add	sp, #28
   17224:	f85d fb04 	ldr.w	pc, [sp], #4
   17228:	10004f10 	.word	0x10004f10

0001722c <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1722c:	b500      	push	{lr}
   1722e:	b087      	sub	sp, #28
   17230:	9003      	str	r0, [sp, #12]
   17232:	9102      	str	r1, [sp, #8]
   17234:	4613      	mov	r3, r2
   17236:	f88d 3007 	strb.w	r3, [sp, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   1723a:	9b03      	ldr	r3, [sp, #12]
   1723c:	9305      	str	r3, [sp, #20]

  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   1723e:	9b03      	ldr	r3, [sp, #12]
   17240:	f103 0210 	add.w	r2, r3, #16
   17244:	9b05      	ldr	r3, [sp, #20]
   17246:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   17248:	9b05      	ldr	r3, [sp, #20]
   1724a:	685a      	ldr	r2, [r3, #4]
   1724c:	9b02      	ldr	r3, [sp, #8]
   1724e:	3305      	adds	r3, #5
   17250:	4619      	mov	r1, r3
   17252:	4610      	mov	r0, r2
   17254:	f7f5 f834 	bl	c2c0 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   17258:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1725c:	9905      	ldr	r1, [sp, #20]
   1725e:	4618      	mov	r0, r3
   17260:	f008 fb6c 	bl	1f93c <WsfMsgSend>
}
   17264:	bf00      	nop
   17266:	b007      	add	sp, #28
   17268:	f85d fb04 	ldr.w	pc, [sp], #4

0001726c <SecAesInit>:
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   1726c:	4b02      	ldr	r3, [pc, #8]	; (17278 <SecAesInit+0xc>)
   1726e:	4a03      	ldr	r2, [pc, #12]	; (1727c <SecAesInit+0x10>)
   17270:	63da      	str	r2, [r3, #60]	; 0x3c
}
   17272:	bf00      	nop
   17274:	4770      	bx	lr
   17276:	bf00      	nop
   17278:	10004ef0 	.word	0x10004ef0
   1727c:	0001722d 	.word	0x0001722d

00017280 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   17280:	b500      	push	{lr}
   17282:	b08b      	sub	sp, #44	; 0x2c
   17284:	9001      	str	r0, [sp, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   17286:	9b01      	ldr	r3, [sp, #4]
   17288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1728a:	9309      	str	r3, [sp, #36]	; 0x24
  uint8_t text[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   1728c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1728e:	681b      	ldr	r3, [r3, #0]
   17290:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17292:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   17294:	4413      	add	r3, r2
   17296:	9308      	str	r3, [sp, #32]
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
   17298:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1729a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1729c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1729e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   172a0:	1ad3      	subs	r3, r2, r3
   172a2:	b29b      	uxth	r3, r3
   172a4:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   172a8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   172ac:	2b10      	cmp	r3, #16
   172ae:	dc2a      	bgt.n	17306 <secCmacProcessBlock+0x86>
  {
    memcpy(text, pMn, remaining);
   172b0:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
   172b4:	ab03      	add	r3, sp, #12
   172b6:	9908      	ldr	r1, [sp, #32]
   172b8:	4618      	mov	r0, r3
   172ba:	f7f4 ff21 	bl	c100 <memcpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   172be:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   172c2:	2b10      	cmp	r3, #16
   172c4:	d012      	beq.n	172ec <secCmacProcessBlock+0x6c>
    {
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
   172c6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   172ca:	aa03      	add	r2, sp, #12
   172cc:	18d0      	adds	r0, r2, r3
   172ce:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   172d2:	f1c3 0310 	rsb	r3, r3, #16
   172d6:	461a      	mov	r2, r3
   172d8:	2100      	movs	r1, #0
   172da:	f00e f9ef 	bl	256bc <memset>
      text[remaining] = 0x80;
   172de:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   172e2:	3328      	adds	r3, #40	; 0x28
   172e4:	446b      	add	r3, sp
   172e6:	2280      	movs	r2, #128	; 0x80
   172e8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(text, pCmac->subkey);
   172ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   172ee:	f103 0214 	add.w	r2, r3, #20
   172f2:	ab03      	add	r3, sp, #12
   172f4:	4611      	mov	r1, r2
   172f6:	4618      	mov	r0, r3
   172f8:	f7f4 fffc 	bl	c2f4 <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   172fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   172fe:	2202      	movs	r2, #2
   17300:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   17304:	e004      	b.n	17310 <secCmacProcessBlock+0x90>
  }
  else
  {
    /* Copy the block to the buffer */
    Calc128Cpy(text, pMn);
   17306:	ab03      	add	r3, sp, #12
   17308:	9908      	ldr	r1, [sp, #32]
   1730a:	4618      	mov	r0, r3
   1730c:	f7f4 ffd8 	bl	c2c0 <Calc128Cpy>
  }

  if (pCmac->position != 0)
   17310:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   17314:	2b00      	cmp	r3, #0
   17316:	d007      	beq.n	17328 <secCmacProcessBlock+0xa8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(text, pBuf->ciphertext);
   17318:	9b01      	ldr	r3, [sp, #4]
   1731a:	f103 0210 	add.w	r2, r3, #16
   1731e:	ab03      	add	r3, sp, #12
   17320:	4611      	mov	r1, r2
   17322:	4618      	mov	r0, r3
   17324:	f7f4 ffe6 	bl	c2f4 <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   17328:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1732a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1732c:	3310      	adds	r3, #16
   1732e:	b29a      	uxth	r2, r3
   17330:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17332:	849a      	strh	r2, [r3, #36]	; 0x24

  SecLeEncryptCmd(pCmac->key, text, pBuf, pCmac->handlerId);
   17334:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17336:	1d18      	adds	r0, r3, #4
   17338:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1733a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1733e:	a903      	add	r1, sp, #12
   17340:	9a01      	ldr	r2, [sp, #4]
   17342:	f000 fa71 	bl	17828 <SecLeEncryptCmd>
}
   17346:	bf00      	nop
   17348:	b00b      	add	sp, #44	; 0x2c
   1734a:	f85d fb04 	ldr.w	pc, [sp], #4

0001734e <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   1734e:	b500      	push	{lr}
   17350:	b089      	sub	sp, #36	; 0x24
   17352:	9001      	str	r0, [sp, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   17354:	9b01      	ldr	r3, [sp, #4]
   17356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17358:	9307      	str	r3, [sp, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   1735a:	ab03      	add	r3, sp, #12
   1735c:	2210      	movs	r2, #16
   1735e:	2100      	movs	r1, #0
   17360:	4618      	mov	r0, r3
   17362:	f00e f9ab 	bl	256bc <memset>

  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
   17366:	9b07      	ldr	r3, [sp, #28]
   17368:	1d18      	adds	r0, r3, #4
   1736a:	9b07      	ldr	r3, [sp, #28]
   1736c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   17370:	a903      	add	r1, sp, #12
   17372:	9a01      	ldr	r2, [sp, #4]
   17374:	f000 fa58 	bl	17828 <SecLeEncryptCmd>
}
   17378:	bf00      	nop
   1737a:	b009      	add	sp, #36	; 0x24
   1737c:	f85d fb04 	ldr.w	pc, [sp], #4

00017380 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   17380:	b084      	sub	sp, #16
   17382:	9001      	str	r0, [sp, #4]
   17384:	460b      	mov	r3, r1
   17386:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t overflow, i;
  uint8_t finalOverflow = pBuf[0] >> (8 - shift);
   1738a:	9b01      	ldr	r3, [sp, #4]
   1738c:	781b      	ldrb	r3, [r3, #0]
   1738e:	461a      	mov	r2, r3
   17390:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17394:	f1c3 0308 	rsb	r3, r3, #8
   17398:	fa42 f303 	asr.w	r3, r2, r3
   1739c:	f88d 300d 	strb.w	r3, [sp, #13]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   173a0:	2300      	movs	r3, #0
   173a2:	f88d 300e 	strb.w	r3, [sp, #14]
   173a6:	e030      	b.n	1740a <secCmacKeyShift+0x8a>
  {
    /* store shifted bits for next byte */
    if (i < SEC_CMAC_KEY_LEN-1)
   173a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   173ac:	2b0e      	cmp	r3, #14
   173ae:	d80f      	bhi.n	173d0 <secCmacKeyShift+0x50>
    {
      overflow = pBuf[i+1] >> (8 - shift);
   173b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   173b4:	3301      	adds	r3, #1
   173b6:	9a01      	ldr	r2, [sp, #4]
   173b8:	4413      	add	r3, r2
   173ba:	781b      	ldrb	r3, [r3, #0]
   173bc:	461a      	mov	r2, r3
   173be:	f89d 3003 	ldrb.w	r3, [sp, #3]
   173c2:	f1c3 0308 	rsb	r3, r3, #8
   173c6:	fa42 f303 	asr.w	r3, r2, r3
   173ca:	f88d 300f 	strb.w	r3, [sp, #15]
   173ce:	e002      	b.n	173d6 <secCmacKeyShift+0x56>
    }
    else
    {
      overflow = 0;
   173d0:	2300      	movs	r3, #0
   173d2:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | overflow;
   173d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   173da:	9a01      	ldr	r2, [sp, #4]
   173dc:	4413      	add	r3, r2
   173de:	781b      	ldrb	r3, [r3, #0]
   173e0:	461a      	mov	r2, r3
   173e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   173e6:	fa02 f303 	lsl.w	r3, r2, r3
   173ea:	b25a      	sxtb	r2, r3
   173ec:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   173f0:	4313      	orrs	r3, r2
   173f2:	b259      	sxtb	r1, r3
   173f4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   173f8:	9a01      	ldr	r2, [sp, #4]
   173fa:	4413      	add	r3, r2
   173fc:	b2ca      	uxtb	r2, r1
   173fe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   17400:	f89d 300e 	ldrb.w	r3, [sp, #14]
   17404:	3301      	adds	r3, #1
   17406:	f88d 300e 	strb.w	r3, [sp, #14]
   1740a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1740e:	2b0f      	cmp	r3, #15
   17410:	d9ca      	bls.n	173a8 <secCmacKeyShift+0x28>
  }

  return finalOverflow;
   17412:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
   17416:	4618      	mov	r0, r3
   17418:	b004      	add	sp, #16
   1741a:	4770      	bx	lr

0001741c <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   1741c:	b500      	push	{lr}
   1741e:	b085      	sub	sp, #20
   17420:	9001      	str	r0, [sp, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   17422:	9b01      	ldr	r3, [sp, #4]
   17424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17426:	9303      	str	r3, [sp, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   17428:	9b03      	ldr	r3, [sp, #12]
   1742a:	f103 0214 	add.w	r2, r3, #20
   1742e:	9b01      	ldr	r3, [sp, #4]
   17430:	3310      	adds	r3, #16
   17432:	4619      	mov	r1, r3
   17434:	4610      	mov	r0, r2
   17436:	f7f4 ff43 	bl	c2c0 <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   1743a:	9b03      	ldr	r3, [sp, #12]
   1743c:	3314      	adds	r3, #20
   1743e:	2101      	movs	r1, #1
   17440:	4618      	mov	r0, r3
   17442:	f7ff ff9d 	bl	17380 <secCmacKeyShift>
   17446:	4603      	mov	r3, r0
   17448:	f88d 300b 	strb.w	r3, [sp, #11]

  if (overflow)
   1744c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   17450:	2b00      	cmp	r3, #0
   17452:	d009      	beq.n	17468 <secCmacGenSubkey2+0x4c>
  {
    pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   17454:	9b03      	ldr	r3, [sp, #12]
   17456:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1745a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   1745e:	43db      	mvns	r3, r3
   17460:	b2da      	uxtb	r2, r3
   17462:	9b03      	ldr	r3, [sp, #12]
   17464:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   17468:	9b03      	ldr	r3, [sp, #12]
   1746a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1746c:	f003 030f 	and.w	r3, r3, #15
   17470:	b29b      	uxth	r3, r3
   17472:	2b00      	cmp	r3, #0
   17474:	d016      	beq.n	174a4 <secCmacGenSubkey2+0x88>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   17476:	9b03      	ldr	r3, [sp, #12]
   17478:	3314      	adds	r3, #20
   1747a:	2101      	movs	r1, #1
   1747c:	4618      	mov	r0, r3
   1747e:	f7ff ff7f 	bl	17380 <secCmacKeyShift>
   17482:	4603      	mov	r3, r0
   17484:	f88d 300b 	strb.w	r3, [sp, #11]

    if (overflow)
   17488:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1748c:	2b00      	cmp	r3, #0
   1748e:	d009      	beq.n	174a4 <secCmacGenSubkey2+0x88>
    {
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   17490:	9b03      	ldr	r3, [sp, #12]
   17492:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   17496:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   1749a:	43db      	mvns	r3, r3
   1749c:	b2da      	uxtb	r2, r3
   1749e:	9b03      	ldr	r3, [sp, #12]
   174a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   174a4:	9b03      	ldr	r3, [sp, #12]
   174a6:	2201      	movs	r2, #1
   174a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   174ac:	9801      	ldr	r0, [sp, #4]
   174ae:	f7ff fee7 	bl	17280 <secCmacProcessBlock>
}
   174b2:	bf00      	nop
   174b4:	b005      	add	sp, #20
   174b6:	f85d fb04 	ldr.w	pc, [sp], #4

000174ba <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   174ba:	b500      	push	{lr}
   174bc:	b085      	sub	sp, #20
   174be:	9001      	str	r0, [sp, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   174c0:	9b01      	ldr	r3, [sp, #4]
   174c2:	9303      	str	r3, [sp, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   174c4:	9b01      	ldr	r3, [sp, #4]
   174c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   174c8:	9302      	str	r3, [sp, #8]

  pMsg->pCiphertext = pBuf->ciphertext;
   174ca:	9b01      	ldr	r3, [sp, #4]
   174cc:	f103 0210 	add.w	r2, r3, #16
   174d0:	9b03      	ldr	r3, [sp, #12]
   174d2:	605a      	str	r2, [r3, #4]
  pMsg->pPlainText = pCmac->pPlainText;
   174d4:	9b02      	ldr	r3, [sp, #8]
   174d6:	681a      	ldr	r2, [r3, #0]
   174d8:	9b03      	ldr	r3, [sp, #12]
   174da:	609a      	str	r2, [r3, #8]

  WsfMsgSend(pCmac->handlerId, pMsg);
   174dc:	9b02      	ldr	r3, [sp, #8]
   174de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   174e2:	9903      	ldr	r1, [sp, #12]
   174e4:	4618      	mov	r0, r3
   174e6:	f008 fa29 	bl	1f93c <WsfMsgSend>
}
   174ea:	bf00      	nop
   174ec:	b005      	add	sp, #20
   174ee:	f85d fb04 	ldr.w	pc, [sp], #4

000174f2 <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   174f2:	b500      	push	{lr}
   174f4:	b087      	sub	sp, #28
   174f6:	9003      	str	r0, [sp, #12]
   174f8:	9102      	str	r1, [sp, #8]
   174fa:	4613      	mov	r3, r2
   174fc:	f88d 3007 	strb.w	r3, [sp, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   17500:	9b03      	ldr	r3, [sp, #12]
   17502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17504:	9305      	str	r3, [sp, #20]

  if (pCmac)
   17506:	9b05      	ldr	r3, [sp, #20]
   17508:	2b00      	cmp	r3, #0
   1750a:	d020      	beq.n	1754e <SecCmacHciCback+0x5c>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   1750c:	9b03      	ldr	r3, [sp, #12]
   1750e:	f103 0210 	add.w	r2, r3, #16
   17512:	9b02      	ldr	r3, [sp, #8]
   17514:	3305      	adds	r3, #5
   17516:	4619      	mov	r1, r3
   17518:	4610      	mov	r0, r2
   1751a:	f7f4 fed1 	bl	c2c0 <Calc128Cpy>

    switch (pCmac->state)
   1751e:	9b05      	ldr	r3, [sp, #20]
   17520:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   17524:	2b02      	cmp	r3, #2
   17526:	d00e      	beq.n	17546 <SecCmacHciCback+0x54>
   17528:	2b02      	cmp	r3, #2
   1752a:	dc11      	bgt.n	17550 <SecCmacHciCback+0x5e>
   1752c:	2b00      	cmp	r3, #0
   1752e:	d002      	beq.n	17536 <SecCmacHciCback+0x44>
   17530:	2b01      	cmp	r3, #1
   17532:	d004      	beq.n	1753e <SecCmacHciCback+0x4c>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   17534:	e00c      	b.n	17550 <SecCmacHciCback+0x5e>
      secCmacGenSubkey2(pBuf);
   17536:	9803      	ldr	r0, [sp, #12]
   17538:	f7ff ff70 	bl	1741c <secCmacGenSubkey2>
      break;
   1753c:	e008      	b.n	17550 <SecCmacHciCback+0x5e>
      secCmacProcessBlock(pBuf);
   1753e:	9803      	ldr	r0, [sp, #12]
   17540:	f7ff fe9e 	bl	17280 <secCmacProcessBlock>
      break;
   17544:	e004      	b.n	17550 <SecCmacHciCback+0x5e>
      secCmacComplete(pBuf);
   17546:	9803      	ldr	r0, [sp, #12]
   17548:	f7ff ffb7 	bl	174ba <secCmacComplete>
      break;
   1754c:	e000      	b.n	17550 <SecCmacHciCback+0x5e>
  }
   1754e:	bf00      	nop
}
   17550:	bf00      	nop
   17552:	b007      	add	sp, #28
   17554:	f85d fb04 	ldr.w	pc, [sp], #4

00017558 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint16_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   17558:	b500      	push	{lr}
   1755a:	b089      	sub	sp, #36	; 0x24
   1755c:	9003      	str	r0, [sp, #12]
   1755e:	9102      	str	r1, [sp, #8]
   17560:	4611      	mov	r1, r2
   17562:	461a      	mov	r2, r3
   17564:	460b      	mov	r3, r1
   17566:	f8ad 3006 	strh.w	r3, [sp, #6]
   1756a:	4613      	mov	r3, r2
   1756c:	f88d 3005 	strb.w	r3, [sp, #5]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   17570:	2364      	movs	r3, #100	; 0x64
   17572:	f8ad 301e 	strh.w	r3, [sp, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   17576:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1757a:	4618      	mov	r0, r3
   1757c:	f008 f9ba 	bl	1f8f4 <WsfMsgAlloc>
   17580:	9006      	str	r0, [sp, #24]
   17582:	9b06      	ldr	r3, [sp, #24]
   17584:	2b00      	cmp	r3, #0
   17586:	d039      	beq.n	175fc <SecCmac+0xa4>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   17588:	9b06      	ldr	r3, [sp, #24]
   1758a:	3338      	adds	r3, #56	; 0x38
   1758c:	9305      	str	r3, [sp, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   1758e:	9b06      	ldr	r3, [sp, #24]
   17590:	9a05      	ldr	r2, [sp, #20]
   17592:	631a      	str	r2, [r3, #48]	; 0x30
    pBuf->type = SEC_TYPE_CMAC;
   17594:	9b06      	ldr	r3, [sp, #24]
   17596:	2201      	movs	r2, #1
   17598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    pBuf->msg.hdr.status = secCb.token++;
   1759c:	4b1a      	ldr	r3, [pc, #104]	; (17608 <SecCmac+0xb0>)
   1759e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   175a2:	1c5a      	adds	r2, r3, #1
   175a4:	b2d1      	uxtb	r1, r2
   175a6:	4a18      	ldr	r2, [pc, #96]	; (17608 <SecCmac+0xb0>)
   175a8:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   175ac:	9a06      	ldr	r2, [sp, #24]
   175ae:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   175b0:	9b06      	ldr	r3, [sp, #24]
   175b2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   175b6:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   175b8:	9b06      	ldr	r3, [sp, #24]
   175ba:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   175be:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   175c0:	9b05      	ldr	r3, [sp, #20]
   175c2:	9a02      	ldr	r2, [sp, #8]
   175c4:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   175c6:	9b05      	ldr	r3, [sp, #20]
   175c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   175cc:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   175ce:	9b05      	ldr	r3, [sp, #20]
   175d0:	2200      	movs	r2, #0
   175d2:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   175d4:	9b05      	ldr	r3, [sp, #20]
   175d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
   175da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   175de:	9b05      	ldr	r3, [sp, #20]
   175e0:	2200      	movs	r2, #0
   175e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   175e6:	9b05      	ldr	r3, [sp, #20]
   175e8:	3304      	adds	r3, #4
   175ea:	9903      	ldr	r1, [sp, #12]
   175ec:	4618      	mov	r0, r3
   175ee:	f7f4 fe67 	bl	c2c0 <Calc128Cpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   175f2:	9806      	ldr	r0, [sp, #24]
   175f4:	f7ff feab 	bl	1734e <secCmacGenSubkey1>

    return TRUE;
   175f8:	2301      	movs	r3, #1
   175fa:	e000      	b.n	175fe <SecCmac+0xa6>
  }

  return FALSE;
   175fc:	2300      	movs	r3, #0
}
   175fe:	4618      	mov	r0, r3
   17600:	b009      	add	sp, #36	; 0x24
   17602:	f85d fb04 	ldr.w	pc, [sp], #4
   17606:	bf00      	nop
   17608:	10004ef0 	.word	0x10004ef0

0001760c <SecCmacInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   1760c:	4b02      	ldr	r3, [pc, #8]	; (17618 <SecCmacInit+0xc>)
   1760e:	4a03      	ldr	r2, [pc, #12]	; (1761c <SecCmacInit+0x10>)
   17610:	641a      	str	r2, [r3, #64]	; 0x40
}
   17612:	bf00      	nop
   17614:	4770      	bx	lr
   17616:	bf00      	nop
   17618:	10004ef0 	.word	0x10004ef0
   1761c:	000174f3 	.word	0x000174f3

00017620 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   17620:	b500      	push	{lr}
   17622:	b085      	sub	sp, #20
   17624:	9001      	str	r0, [sp, #4]
  secQueueBuf_t *pBuf = NULL;
   17626:	2300      	movs	r3, #0
   17628:	9303      	str	r3, [sp, #12]
  wsfHandlerId_t handlerId = 0;
   1762a:	2300      	movs	r3, #0
   1762c:	f88d 300b 	strb.w	r3, [sp, #11]

  /* Handle random number event. */
  switch (pEvent->hdr.event)
   17630:	9b01      	ldr	r3, [sp, #4]
   17632:	789b      	ldrb	r3, [r3, #2]
   17634:	3b1b      	subs	r3, #27
   17636:	2b0b      	cmp	r3, #11
   17638:	d863      	bhi.n	17702 <secHciCback+0xe2>
   1763a:	a201      	add	r2, pc, #4	; (adr r2, 17640 <secHciCback+0x20>)
   1763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17640:	000176a9 	.word	0x000176a9
   17644:	00017671 	.word	0x00017671
   17648:	00017703 	.word	0x00017703
   1764c:	00017703 	.word	0x00017703
   17650:	00017703 	.word	0x00017703
   17654:	00017703 	.word	0x00017703
   17658:	00017703 	.word	0x00017703
   1765c:	00017703 	.word	0x00017703
   17660:	00017703 	.word	0x00017703
   17664:	00017703 	.word	0x00017703
   17668:	000176e3 	.word	0x000176e3
   1766c:	000176f3 	.word	0x000176f3
  {
  case HCI_LE_RAND_CMD_CMPL_CBACK_EVT:

    /* Copy new data to circular buffer of random data. */
    memcpy(&secCb.rand[HCI_RAND_LEN * secCb.randTop], pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   17670:	4b2f      	ldr	r3, [pc, #188]	; (17730 <secHciCback+0x110>)
   17672:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   17676:	00db      	lsls	r3, r3, #3
   17678:	4a2d      	ldr	r2, [pc, #180]	; (17730 <secHciCback+0x110>)
   1767a:	1898      	adds	r0, r3, r2
   1767c:	9b01      	ldr	r3, [sp, #4]
   1767e:	3305      	adds	r3, #5
   17680:	2208      	movs	r2, #8
   17682:	4619      	mov	r1, r3
   17684:	f7f4 fd3c 	bl	c100 <memcpy>
    secCb.randTop = (secCb.randTop >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randTop + 1;
   17688:	4b29      	ldr	r3, [pc, #164]	; (17730 <secHciCback+0x110>)
   1768a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   1768e:	2b02      	cmp	r3, #2
   17690:	d805      	bhi.n	1769e <secHciCback+0x7e>
   17692:	4b27      	ldr	r3, [pc, #156]	; (17730 <secHciCback+0x110>)
   17694:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   17698:	3301      	adds	r3, #1
   1769a:	b2db      	uxtb	r3, r3
   1769c:	e000      	b.n	176a0 <secHciCback+0x80>
   1769e:	2300      	movs	r3, #0
   176a0:	4a23      	ldr	r2, [pc, #140]	; (17730 <secHciCback+0x110>)
   176a2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
    break;
   176a6:	e02f      	b.n	17708 <secHciCback+0xe8>

  case HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   176a8:	f10d 030b 	add.w	r3, sp, #11
   176ac:	4619      	mov	r1, r3
   176ae:	4821      	ldr	r0, [pc, #132]	; (17734 <secHciCback+0x114>)
   176b0:	f008 f975 	bl	1f99e <WsfMsgDeq>
   176b4:	9003      	str	r0, [sp, #12]

    WSF_ASSERT(pBuf != NULL);

    /* note: pBuf should never be NULL and is checked by assert above. */
    /* coverity[dereference] */
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   176b6:	9b03      	ldr	r3, [sp, #12]
   176b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   176bc:	2b03      	cmp	r3, #3
   176be:	d009      	beq.n	176d4 <secHciCback+0xb4>
   176c0:	9b03      	ldr	r3, [sp, #12]
   176c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   176c6:	2b01      	cmp	r3, #1
   176c8:	d004      	beq.n	176d4 <secHciCback+0xb4>
   176ca:	9b03      	ldr	r3, [sp, #12]
   176cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   176d0:	2b04      	cmp	r3, #4
   176d2:	d118      	bne.n	17706 <secHciCback+0xe6>
    {
      WStrReverse(pEvent->leEncryptCmdCmpl.data, HCI_ENCRYPT_DATA_LEN);
   176d4:	9b01      	ldr	r3, [sp, #4]
   176d6:	3305      	adds	r3, #5
   176d8:	2110      	movs	r1, #16
   176da:	4618      	mov	r0, r3
   176dc:	f7f4 fe53 	bl	c386 <WStrReverse>
    }
    break;
   176e0:	e011      	b.n	17706 <secHciCback+0xe6>

  case HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
   176e2:	f10d 030b 	add.w	r3, sp, #11
   176e6:	4619      	mov	r1, r3
   176e8:	4813      	ldr	r0, [pc, #76]	; (17738 <secHciCback+0x118>)
   176ea:	f008 f958 	bl	1f99e <WsfMsgDeq>
   176ee:	9003      	str	r0, [sp, #12]
    break;
   176f0:	e00a      	b.n	17708 <secHciCback+0xe8>

  case HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.dhKeyQueue, &handlerId);
   176f2:	f10d 030b 	add.w	r3, sp, #11
   176f6:	4619      	mov	r1, r3
   176f8:	4810      	ldr	r0, [pc, #64]	; (1773c <secHciCback+0x11c>)
   176fa:	f008 f950 	bl	1f99e <WsfMsgDeq>
   176fe:	9003      	str	r0, [sp, #12]
    break;
   17700:	e002      	b.n	17708 <secHciCback+0xe8>

  default:
    break;
   17702:	bf00      	nop
   17704:	e000      	b.n	17708 <secHciCback+0xe8>
    break;
   17706:	bf00      	nop
  }

  if (pBuf)
   17708:	9b03      	ldr	r3, [sp, #12]
   1770a:	2b00      	cmp	r3, #0
   1770c:	d00c      	beq.n	17728 <secHciCback+0x108>
  {
    WSF_ASSERT(secCb.hciCbackTbl[pBuf->type]);
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   1770e:	9b03      	ldr	r3, [sp, #12]
   17710:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   17714:	4a06      	ldr	r2, [pc, #24]	; (17730 <secHciCback+0x110>)
   17716:	330e      	adds	r3, #14
   17718:	009b      	lsls	r3, r3, #2
   1771a:	4413      	add	r3, r2
   1771c:	685b      	ldr	r3, [r3, #4]
   1771e:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17722:	9901      	ldr	r1, [sp, #4]
   17724:	9803      	ldr	r0, [sp, #12]
   17726:	4798      	blx	r3
  }
}
   17728:	bf00      	nop
   1772a:	b005      	add	sp, #20
   1772c:	f85d fb04 	ldr.w	pc, [sp], #4
   17730:	10004ef0 	.word	0x10004ef0
   17734:	10004f10 	.word	0x10004f10
   17738:	10004f18 	.word	0x10004f18
   1773c:	10004f20 	.word	0x10004f20

00017740 <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   17740:	b508      	push	{r3, lr}
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   17742:	4b0d      	ldr	r3, [pc, #52]	; (17778 <SecInit+0x38>)
   17744:	2200      	movs	r2, #0
   17746:	621a      	str	r2, [r3, #32]
   17748:	4b0b      	ldr	r3, [pc, #44]	; (17778 <SecInit+0x38>)
   1774a:	2200      	movs	r2, #0
   1774c:	625a      	str	r2, [r3, #36]	; 0x24
  WSF_QUEUE_INIT(&secCb.pubKeyQueue);
   1774e:	4b0a      	ldr	r3, [pc, #40]	; (17778 <SecInit+0x38>)
   17750:	2200      	movs	r2, #0
   17752:	629a      	str	r2, [r3, #40]	; 0x28
   17754:	4b08      	ldr	r3, [pc, #32]	; (17778 <SecInit+0x38>)
   17756:	2200      	movs	r2, #0
   17758:	62da      	str	r2, [r3, #44]	; 0x2c
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);
   1775a:	4b07      	ldr	r3, [pc, #28]	; (17778 <SecInit+0x38>)
   1775c:	2200      	movs	r2, #0
   1775e:	631a      	str	r2, [r3, #48]	; 0x30
   17760:	4b05      	ldr	r3, [pc, #20]	; (17778 <SecInit+0x38>)
   17762:	2200      	movs	r2, #0
   17764:	635a      	str	r2, [r3, #52]	; 0x34

  secCb.token = 0;
   17766:	4b04      	ldr	r3, [pc, #16]	; (17778 <SecInit+0x38>)
   17768:	2200      	movs	r2, #0
   1776a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   1776e:	4803      	ldr	r0, [pc, #12]	; (1777c <SecInit+0x3c>)
   17770:	f7f9 f970 	bl	10a54 <HciSecRegister>
}
   17774:	bf00      	nop
   17776:	bd08      	pop	{r3, pc}
   17778:	10004ef0 	.word	0x10004ef0
   1777c:	00017621 	.word	0x00017621

00017780 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   17780:	b500      	push	{lr}
   17782:	b085      	sub	sp, #20
   17784:	9001      	str	r0, [sp, #4]
   17786:	460b      	mov	r3, r1
   17788:	f88d 3003 	strb.w	r3, [sp, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   1778c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17790:	3307      	adds	r3, #7
   17792:	2b00      	cmp	r3, #0
   17794:	da00      	bge.n	17798 <SecRand+0x18>
   17796:	3307      	adds	r3, #7
   17798:	10db      	asrs	r3, r3, #3
   1779a:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   1779e:	4b21      	ldr	r3, [pc, #132]	; (17824 <SecRand+0xa4>)
   177a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   177a4:	00db      	lsls	r3, r3, #3
   177a6:	f88d 300e 	strb.w	r3, [sp, #14]

  WSF_ASSERT(randLen <= SEC_RAND_DATA_LEN);

  /* Copy from circular buffer of random data. */
  while (randLen--)
   177aa:	e013      	b.n	177d4 <SecRand+0x54>
  {
    *pRand++ = secCb.rand[index];
   177ac:	f89d 200e 	ldrb.w	r2, [sp, #14]
   177b0:	9b01      	ldr	r3, [sp, #4]
   177b2:	1c59      	adds	r1, r3, #1
   177b4:	9101      	str	r1, [sp, #4]
   177b6:	491b      	ldr	r1, [pc, #108]	; (17824 <SecRand+0xa4>)
   177b8:	5c8a      	ldrb	r2, [r1, r2]
   177ba:	701a      	strb	r2, [r3, #0]
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   177bc:	f89d 300e 	ldrb.w	r3, [sp, #14]
   177c0:	2b1f      	cmp	r3, #31
   177c2:	d004      	beq.n	177ce <SecRand+0x4e>
   177c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   177c8:	3301      	adds	r3, #1
   177ca:	b2db      	uxtb	r3, r3
   177cc:	e000      	b.n	177d0 <SecRand+0x50>
   177ce:	2300      	movs	r3, #0
   177d0:	f88d 300e 	strb.w	r3, [sp, #14]
  while (randLen--)
   177d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   177d8:	1e5a      	subs	r2, r3, #1
   177da:	f88d 2003 	strb.w	r2, [sp, #3]
   177de:	2b00      	cmp	r3, #0
   177e0:	d1e4      	bne.n	177ac <SecRand+0x2c>
  }

  while (count--)
   177e2:	e010      	b.n	17806 <SecRand+0x86>
  {
    /* Request more random data. */
    HciLeRandCmd();
   177e4:	f7f5 fd2f 	bl	d246 <HciLeRandCmd>

    /* Update copy index. */
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   177e8:	4b0e      	ldr	r3, [pc, #56]	; (17824 <SecRand+0xa4>)
   177ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   177ee:	2b02      	cmp	r3, #2
   177f0:	d805      	bhi.n	177fe <SecRand+0x7e>
   177f2:	4b0c      	ldr	r3, [pc, #48]	; (17824 <SecRand+0xa4>)
   177f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   177f8:	3301      	adds	r3, #1
   177fa:	b2db      	uxtb	r3, r3
   177fc:	e000      	b.n	17800 <SecRand+0x80>
   177fe:	2300      	movs	r3, #0
   17800:	4a08      	ldr	r2, [pc, #32]	; (17824 <SecRand+0xa4>)
   17802:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  while (count--)
   17806:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   1780a:	b2da      	uxtb	r2, r3
   1780c:	3a01      	subs	r2, #1
   1780e:	b2d2      	uxtb	r2, r2
   17810:	f88d 200f 	strb.w	r2, [sp, #15]
   17814:	2b00      	cmp	r3, #0
   17816:	d1e5      	bne.n	177e4 <SecRand+0x64>
  }
}
   17818:	bf00      	nop
   1781a:	bf00      	nop
   1781c:	b005      	add	sp, #20
   1781e:	f85d fb04 	ldr.w	pc, [sp], #4
   17822:	bf00      	nop
   17824:	10004ef0 	.word	0x10004ef0

00017828 <SecLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecLeEncryptCmd(uint8_t *pKey, uint8_t *pText, void *pBuf, wsfHandlerId_t handlerId)
{
   17828:	b500      	push	{lr}
   1782a:	b08d      	sub	sp, #52	; 0x34
   1782c:	9003      	str	r0, [sp, #12]
   1782e:	9102      	str	r1, [sp, #8]
   17830:	9201      	str	r2, [sp, #4]
   17832:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t revKey[HCI_KEY_LEN];
  uint8_t revText[HCI_ENCRYPT_DATA_LEN];

  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   17836:	ab08      	add	r3, sp, #32
   17838:	2210      	movs	r2, #16
   1783a:	9903      	ldr	r1, [sp, #12]
   1783c:	4618      	mov	r0, r3
   1783e:	f7f4 fd78 	bl	c332 <WStrReverseCpy>
  WStrReverseCpy(revText, pText, HCI_ENCRYPT_DATA_LEN);
   17842:	ab04      	add	r3, sp, #16
   17844:	2210      	movs	r2, #16
   17846:	9902      	ldr	r1, [sp, #8]
   17848:	4618      	mov	r0, r3
   1784a:	f7f4 fd72 	bl	c332 <WStrReverseCpy>

  WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   1784e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17852:	9a01      	ldr	r2, [sp, #4]
   17854:	4619      	mov	r1, r3
   17856:	4806      	ldr	r0, [pc, #24]	; (17870 <SecLeEncryptCmd+0x48>)
   17858:	f008 f88b 	bl	1f972 <WsfMsgEnq>
  HciLeEncryptCmd(revKey, revText);
   1785c:	aa04      	add	r2, sp, #16
   1785e:	ab08      	add	r3, sp, #32
   17860:	4611      	mov	r1, r2
   17862:	4618      	mov	r0, r3
   17864:	f7f5 fc75 	bl	d152 <HciLeEncryptCmd>
}
   17868:	bf00      	nop
   1786a:	b00d      	add	sp, #52	; 0x34
   1786c:	f85d fb04 	ldr.w	pc, [sp], #4
   17870:	10004f10 	.word	0x10004f10

00017874 <attcPendWriteCmd>:
 *  \return TRUE if app callback's pending or maximum number of simultaneous write commands reached.
 *          FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t attcPendWriteCmd(attcCcb_t *pCcb, attcApiMsg_t *pMsg)
{
   17874:	b084      	sub	sp, #16
   17876:	9001      	str	r0, [sp, #4]
   17878:	9100      	str	r1, [sp, #0]
  uint8_t     pendRsp;
  uint8_t     i;

  /* initialize number of response callbacks pending */
  pendRsp = 0;
   1787a:	2300      	movs	r3, #0
   1787c:	f88d 300f 	strb.w	r3, [sp, #15]

  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   17880:	2300      	movs	r3, #0
   17882:	f88d 300e 	strb.w	r3, [sp, #14]
   17886:	e01f      	b.n	178c8 <attcPendWriteCmd+0x54>
  {
    /* if callback pending for write command */
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   17888:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1788c:	9a01      	ldr	r2, [sp, #4]
   1788e:	3318      	adds	r3, #24
   17890:	005b      	lsls	r3, r3, #1
   17892:	4413      	add	r3, r2
   17894:	88db      	ldrh	r3, [r3, #6]
   17896:	2b00      	cmp	r3, #0
   17898:	d011      	beq.n	178be <attcPendWriteCmd+0x4a>
    {
      /* if callback pending for this handle */
      if (pCcb->pendWriteCmdHandle[i] == pMsg->handle)
   1789a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1789e:	9a01      	ldr	r2, [sp, #4]
   178a0:	3318      	adds	r3, #24
   178a2:	005b      	lsls	r3, r3, #1
   178a4:	4413      	add	r3, r2
   178a6:	88da      	ldrh	r2, [r3, #6]
   178a8:	9b00      	ldr	r3, [sp, #0]
   178aa:	891b      	ldrh	r3, [r3, #8]
   178ac:	429a      	cmp	r2, r3
   178ae:	d101      	bne.n	178b4 <attcPendWriteCmd+0x40>
      {
        /* callback pending for this write command */
        return TRUE;
   178b0:	2301      	movs	r3, #1
   178b2:	e014      	b.n	178de <attcPendWriteCmd+0x6a>
      }

      pendRsp++;
   178b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   178b8:	3301      	adds	r3, #1
   178ba:	f88d 300f 	strb.w	r3, [sp, #15]
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   178be:	f89d 300e 	ldrb.w	r3, [sp, #14]
   178c2:	3301      	adds	r3, #1
   178c4:	f88d 300e 	strb.w	r3, [sp, #14]
   178c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   178cc:	2b00      	cmp	r3, #0
   178ce:	d0db      	beq.n	17888 <attcPendWriteCmd+0x14>
    }
  }

  /* no callback is pending for this write command but see if the maximum number of simultaneous
     write commands has been reached */
  return (pendRsp < ATT_NUM_SIMUL_WRITE_CMD) ? FALSE : TRUE;
   178d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   178d4:	2b00      	cmp	r3, #0
   178d6:	bf14      	ite	ne
   178d8:	2301      	movne	r3, #1
   178da:	2300      	moveq	r3, #0
   178dc:	b2db      	uxtb	r3, r3
}
   178de:	4618      	mov	r0, r3
   178e0:	b004      	add	sp, #16
   178e2:	4770      	bx	lr

000178e4 <attcSetPendWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSetPendWriteCmd(attcCcb_t *pCcb)
{
   178e4:	b084      	sub	sp, #16
   178e6:	9001      	str	r0, [sp, #4]
  uint8_t     i;

  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   178e8:	2300      	movs	r3, #0
   178ea:	f88d 300f 	strb.w	r3, [sp, #15]
   178ee:	e018      	b.n	17922 <attcSetPendWriteCmd+0x3e>
  {
    /* if entry free */
    if (pCcb->pendWriteCmdHandle[i] == ATT_HANDLE_NONE)
   178f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   178f4:	9a01      	ldr	r2, [sp, #4]
   178f6:	3318      	adds	r3, #24
   178f8:	005b      	lsls	r3, r3, #1
   178fa:	4413      	add	r3, r2
   178fc:	88db      	ldrh	r3, [r3, #6]
   178fe:	2b00      	cmp	r3, #0
   17900:	d10a      	bne.n	17918 <attcSetPendWriteCmd+0x34>
    {
      /* set pending write command handle */
      pCcb->pendWriteCmdHandle[i] = pCcb->outReq.handle;
   17902:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17906:	9a01      	ldr	r2, [sp, #4]
   17908:	8b11      	ldrh	r1, [r2, #24]
   1790a:	9a01      	ldr	r2, [sp, #4]
   1790c:	3318      	adds	r3, #24
   1790e:	005b      	lsls	r3, r3, #1
   17910:	4413      	add	r3, r2
   17912:	460a      	mov	r2, r1
   17914:	80da      	strh	r2, [r3, #6]
      break;
   17916:	e009      	b.n	1792c <attcSetPendWriteCmd+0x48>
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   17918:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1791c:	3301      	adds	r3, #1
   1791e:	f88d 300f 	strb.w	r3, [sp, #15]
   17922:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17926:	2b00      	cmp	r3, #0
   17928:	d0e2      	beq.n	178f0 <attcSetPendWriteCmd+0xc>
    }
  }
}
   1792a:	bf00      	nop
   1792c:	bf00      	nop
   1792e:	b004      	add	sp, #16
   17930:	4770      	bx	lr

00017932 <attcWriteCmdCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcWriteCmdCallback(dmConnId_t connId, attcCcb_t *pCcb, uint8_t status)
{
   17932:	b500      	push	{lr}
   17934:	b085      	sub	sp, #20
   17936:	4603      	mov	r3, r0
   17938:	9100      	str	r1, [sp, #0]
   1793a:	f88d 3007 	strb.w	r3, [sp, #7]
   1793e:	4613      	mov	r3, r2
   17940:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t     i;

  /* if any pending write command callback */
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   17944:	2300      	movs	r3, #0
   17946:	f88d 300f 	strb.w	r3, [sp, #15]
   1794a:	e023      	b.n	17994 <attcWriteCmdCallback+0x62>
  {
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   1794c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17950:	9a00      	ldr	r2, [sp, #0]
   17952:	3318      	adds	r3, #24
   17954:	005b      	lsls	r3, r3, #1
   17956:	4413      	add	r3, r2
   17958:	88db      	ldrh	r3, [r3, #6]
   1795a:	2b00      	cmp	r3, #0
   1795c:	d015      	beq.n	1798a <attcWriteCmdCallback+0x58>
    {
      /* call callback with status */
      attcExecCallback(connId, ATTC_WRITE_CMD_RSP, pCcb->pendWriteCmdHandle[i], status);
   1795e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17962:	9a00      	ldr	r2, [sp, #0]
   17964:	3318      	adds	r3, #24
   17966:	005b      	lsls	r3, r3, #1
   17968:	4413      	add	r3, r2
   1796a:	88da      	ldrh	r2, [r3, #6]
   1796c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   17970:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17974:	210a      	movs	r1, #10
   17976:	f000 fba6 	bl	180c6 <attcExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
   1797a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1797e:	9a00      	ldr	r2, [sp, #0]
   17980:	3318      	adds	r3, #24
   17982:	005b      	lsls	r3, r3, #1
   17984:	4413      	add	r3, r2
   17986:	2200      	movs	r2, #0
   17988:	80da      	strh	r2, [r3, #6]
  for (i = 0; i < ATT_NUM_SIMUL_WRITE_CMD; i++)
   1798a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1798e:	3301      	adds	r3, #1
   17990:	f88d 300f 	strb.w	r3, [sp, #15]
   17994:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17998:	2b00      	cmp	r3, #0
   1799a:	d0d7      	beq.n	1794c <attcWriteCmdCallback+0x1a>
    }
  }
}
   1799c:	bf00      	nop
   1799e:	bf00      	nop
   179a0:	b005      	add	sp, #20
   179a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000179a8 <attcSendSimpleReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendSimpleReq(attcCcb_t *pCcb)
{
   179a8:	b500      	push	{lr}
   179aa:	b085      	sub	sp, #20
   179ac:	9001      	str	r0, [sp, #4]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   179ae:	9b01      	ldr	r3, [sp, #4]
   179b0:	695b      	ldr	r3, [r3, #20]
   179b2:	9303      	str	r3, [sp, #12]

  /* clear stored packet pointer */
  pCcb->outReq.pPkt = NULL;
   179b4:	9b01      	ldr	r3, [sp, #4]
   179b6:	2200      	movs	r2, #0
   179b8:	615a      	str	r2, [r3, #20]

  /* start request timer (except for write command) */
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   179ba:	9b01      	ldr	r3, [sp, #4]
   179bc:	7c9b      	ldrb	r3, [r3, #18]
   179be:	2b0a      	cmp	r3, #10
   179c0:	d00d      	beq.n	179de <attcSendSimpleReq+0x36>
  {
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   179c2:	9b01      	ldr	r3, [sp, #4]
   179c4:	2210      	movs	r2, #16
   179c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   179ca:	9b01      	ldr	r3, [sp, #4]
   179cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
   179d0:	4b09      	ldr	r3, [pc, #36]	; (179f8 <attcSendSimpleReq+0x50>)
   179d2:	681b      	ldr	r3, [r3, #0]
   179d4:	799b      	ldrb	r3, [r3, #6]
   179d6:	4619      	mov	r1, r3
   179d8:	4610      	mov	r0, r2
   179da:	f008 fb27 	bl	2002c <WsfTimerStartSec>
  }

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   179de:	9b01      	ldr	r3, [sp, #4]
   179e0:	681b      	ldr	r3, [r3, #0]
   179e2:	8b19      	ldrh	r1, [r3, #24]
   179e4:	9b03      	ldr	r3, [sp, #12]
   179e6:	881a      	ldrh	r2, [r3, #0]
   179e8:	9b03      	ldr	r3, [sp, #12]
   179ea:	2004      	movs	r0, #4
   179ec:	f005 fbac 	bl	1d148 <L2cDataReq>
}
   179f0:	bf00      	nop
   179f2:	b005      	add	sp, #20
   179f4:	f85d fb04 	ldr.w	pc, [sp], #4
   179f8:	10002bb0 	.word	0x10002bb0

000179fc <attcSendContinuingReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendContinuingReq(attcCcb_t *pCcb)
{
   179fc:	b500      	push	{lr}
   179fe:	b085      	sub	sp, #20
   17a00:	9001      	str	r0, [sp, #4]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   17a02:	9b01      	ldr	r3, [sp, #4]
   17a04:	7cdb      	ldrb	r3, [r3, #19]
   17a06:	2b01      	cmp	r3, #1
   17a08:	d11e      	bne.n	17a48 <attcSendContinuingReq+0x4c>
  {
    /* allocate new buffer */
    if ((pPkt = attMsgAlloc(pCcb->outReq.pPkt->len + L2C_PAYLOAD_START)) != NULL)
   17a0a:	9b01      	ldr	r3, [sp, #4]
   17a0c:	695b      	ldr	r3, [r3, #20]
   17a0e:	881b      	ldrh	r3, [r3, #0]
   17a10:	3308      	adds	r3, #8
   17a12:	b29b      	uxth	r3, r3
   17a14:	4618      	mov	r0, r3
   17a16:	f004 fbbd 	bl	1c194 <attMsgAlloc>
   17a1a:	9003      	str	r0, [sp, #12]
   17a1c:	9b03      	ldr	r3, [sp, #12]
   17a1e:	2b00      	cmp	r3, #0
   17a20:	d00a      	beq.n	17a38 <attcSendContinuingReq+0x3c>
    {
      /* copy stored packet to new */
      memcpy(pPkt, pCcb->outReq.pPkt, pCcb->outReq.pPkt->len + L2C_PAYLOAD_START);
   17a22:	9b01      	ldr	r3, [sp, #4]
   17a24:	6959      	ldr	r1, [r3, #20]
   17a26:	9b01      	ldr	r3, [sp, #4]
   17a28:	695b      	ldr	r3, [r3, #20]
   17a2a:	881b      	ldrh	r3, [r3, #0]
   17a2c:	3308      	adds	r3, #8
   17a2e:	461a      	mov	r2, r3
   17a30:	9803      	ldr	r0, [sp, #12]
   17a32:	f7f4 fb65 	bl	c100 <memcpy>
   17a36:	e00d      	b.n	17a54 <attcSendContinuingReq+0x58>
    }
    /* else handle error case of allocation failure */
    else
    {
      /* free stored packet and call callback with failure status */
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_MEMORY);
   17a38:	9b01      	ldr	r3, [sp, #4]
   17a3a:	3310      	adds	r3, #16
   17a3c:	2270      	movs	r2, #112	; 0x70
   17a3e:	4619      	mov	r1, r3
   17a40:	9801      	ldr	r0, [sp, #4]
   17a42:	f000 fb65 	bl	18110 <attcReqClear>
      return;
   17a46:	e057      	b.n	17af8 <attcSendContinuingReq+0xfc>
  }
  /* else not continuing */
  else
  {
    /* send the stored packet */
    pPkt = pCcb->outReq.pPkt;
   17a48:	9b01      	ldr	r3, [sp, #4]
   17a4a:	695b      	ldr	r3, [r3, #20]
   17a4c:	9303      	str	r3, [sp, #12]

    /* clear stored packet pointer */
    pCcb->outReq.pPkt = NULL;
   17a4e:	9b01      	ldr	r3, [sp, #4]
   17a50:	2200      	movs	r2, #0
   17a52:	615a      	str	r2, [r3, #20]
  }

  /* build remaining fields of packet from stored parameters */
  p = (uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_HDR_LEN;
   17a54:	9b03      	ldr	r3, [sp, #12]
   17a56:	3309      	adds	r3, #9
   17a58:	9302      	str	r3, [sp, #8]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
   17a5a:	9b01      	ldr	r3, [sp, #4]
   17a5c:	7c9b      	ldrb	r3, [r3, #18]
   17a5e:	2b06      	cmp	r3, #6
   17a60:	d113      	bne.n	17a8a <attcSendContinuingReq+0x8e>
  {
    /* build offset field */
    p += sizeof(uint16_t);
   17a62:	9b02      	ldr	r3, [sp, #8]
   17a64:	3302      	adds	r3, #2
   17a66:	9302      	str	r3, [sp, #8]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
   17a68:	9b01      	ldr	r3, [sp, #4]
   17a6a:	8bd9      	ldrh	r1, [r3, #30]
   17a6c:	9b02      	ldr	r3, [sp, #8]
   17a6e:	1c5a      	adds	r2, r3, #1
   17a70:	9202      	str	r2, [sp, #8]
   17a72:	b2ca      	uxtb	r2, r1
   17a74:	701a      	strb	r2, [r3, #0]
   17a76:	9b01      	ldr	r3, [sp, #4]
   17a78:	8bdb      	ldrh	r3, [r3, #30]
   17a7a:	0a1b      	lsrs	r3, r3, #8
   17a7c:	b299      	uxth	r1, r3
   17a7e:	9b02      	ldr	r3, [sp, #8]
   17a80:	1c5a      	adds	r2, r3, #1
   17a82:	9202      	str	r2, [sp, #8]
   17a84:	b2ca      	uxtb	r2, r1
   17a86:	701a      	strb	r2, [r3, #0]
   17a88:	e01f      	b.n	17aca <attcSendContinuingReq+0xce>
  {
    /*
     * Find Info, Find By Type Value, Read By Type, and Read By Group Type
     * request packets all begin with a start handle and end handle.
     */
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.startHandle);
   17a8a:	9b01      	ldr	r3, [sp, #4]
   17a8c:	8bd9      	ldrh	r1, [r3, #30]
   17a8e:	9b02      	ldr	r3, [sp, #8]
   17a90:	1c5a      	adds	r2, r3, #1
   17a92:	9202      	str	r2, [sp, #8]
   17a94:	b2ca      	uxtb	r2, r1
   17a96:	701a      	strb	r2, [r3, #0]
   17a98:	9b01      	ldr	r3, [sp, #4]
   17a9a:	8bdb      	ldrh	r3, [r3, #30]
   17a9c:	0a1b      	lsrs	r3, r3, #8
   17a9e:	b299      	uxth	r1, r3
   17aa0:	9b02      	ldr	r3, [sp, #8]
   17aa2:	1c5a      	adds	r2, r3, #1
   17aa4:	9202      	str	r2, [sp, #8]
   17aa6:	b2ca      	uxtb	r2, r1
   17aa8:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.endHandle);
   17aaa:	9b01      	ldr	r3, [sp, #4]
   17aac:	8c19      	ldrh	r1, [r3, #32]
   17aae:	9b02      	ldr	r3, [sp, #8]
   17ab0:	1c5a      	adds	r2, r3, #1
   17ab2:	9202      	str	r2, [sp, #8]
   17ab4:	b2ca      	uxtb	r2, r1
   17ab6:	701a      	strb	r2, [r3, #0]
   17ab8:	9b01      	ldr	r3, [sp, #4]
   17aba:	8c1b      	ldrh	r3, [r3, #32]
   17abc:	0a1b      	lsrs	r3, r3, #8
   17abe:	b299      	uxth	r1, r3
   17ac0:	9b02      	ldr	r3, [sp, #8]
   17ac2:	1c5a      	adds	r2, r3, #1
   17ac4:	9202      	str	r2, [sp, #8]
   17ac6:	b2ca      	uxtb	r2, r1
   17ac8:	701a      	strb	r2, [r3, #0]
  }

  /* start request timer */
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   17aca:	9b01      	ldr	r3, [sp, #4]
   17acc:	2210      	movs	r2, #16
   17ace:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   17ad2:	9b01      	ldr	r3, [sp, #4]
   17ad4:	f103 0224 	add.w	r2, r3, #36	; 0x24
   17ad8:	4b09      	ldr	r3, [pc, #36]	; (17b00 <attcSendContinuingReq+0x104>)
   17ada:	681b      	ldr	r3, [r3, #0]
   17adc:	799b      	ldrb	r3, [r3, #6]
   17ade:	4619      	mov	r1, r3
   17ae0:	4610      	mov	r0, r2
   17ae2:	f008 faa3 	bl	2002c <WsfTimerStartSec>

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   17ae6:	9b01      	ldr	r3, [sp, #4]
   17ae8:	681b      	ldr	r3, [r3, #0]
   17aea:	8b19      	ldrh	r1, [r3, #24]
   17aec:	9b03      	ldr	r3, [sp, #12]
   17aee:	881a      	ldrh	r2, [r3, #0]
   17af0:	9b03      	ldr	r3, [sp, #12]
   17af2:	2004      	movs	r0, #4
   17af4:	f005 fb28 	bl	1d148 <L2cDataReq>
}
   17af8:	b005      	add	sp, #20
   17afa:	f85d fb04 	ldr.w	pc, [sp], #4
   17afe:	bf00      	nop
   17b00:	10002bb0 	.word	0x10002bb0

00017b04 <attcSendMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendMtuReq(attcCcb_t *pCcb)
{
   17b04:	b500      	push	{lr}
   17b06:	b083      	sub	sp, #12
   17b08:	9001      	str	r0, [sp, #4]
  /* if MTU already exchanged */
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
   17b0a:	9b01      	ldr	r3, [sp, #4]
   17b0c:	681b      	ldr	r3, [r3, #0]
   17b0e:	7f5b      	ldrb	r3, [r3, #29]
   17b10:	f003 0301 	and.w	r3, r3, #1
   17b14:	2b00      	cmp	r3, #0
   17b16:	d008      	beq.n	17b2a <attcSendMtuReq+0x26>
  {
    /* discard request */
    attcFreePkt(&pCcb->outReq);
   17b18:	9b01      	ldr	r3, [sp, #4]
   17b1a:	3310      	adds	r3, #16
   17b1c:	4618      	mov	r0, r3
   17b1e:	f000 fabf 	bl	180a0 <attcFreePkt>

    /* clear out req */
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   17b22:	9b01      	ldr	r3, [sp, #4]
   17b24:	2200      	movs	r2, #0
   17b26:	749a      	strb	r2, [r3, #18]
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;

    /* send packet */
    attcSendSimpleReq(pCcb);
  }
}
   17b28:	e00b      	b.n	17b42 <attcSendMtuReq+0x3e>
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;
   17b2a:	9b01      	ldr	r3, [sp, #4]
   17b2c:	681b      	ldr	r3, [r3, #0]
   17b2e:	7f5a      	ldrb	r2, [r3, #29]
   17b30:	9b01      	ldr	r3, [sp, #4]
   17b32:	681b      	ldr	r3, [r3, #0]
   17b34:	f042 0201 	orr.w	r2, r2, #1
   17b38:	b2d2      	uxtb	r2, r2
   17b3a:	775a      	strb	r2, [r3, #29]
    attcSendSimpleReq(pCcb);
   17b3c:	9801      	ldr	r0, [sp, #4]
   17b3e:	f7ff ff33 	bl	179a8 <attcSendSimpleReq>
}
   17b42:	bf00      	nop
   17b44:	b003      	add	sp, #12
   17b46:	f85d fb04 	ldr.w	pc, [sp], #4

00017b4a <attcSendWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendWriteCmd(attcCcb_t *pCcb)
{
   17b4a:	b500      	push	{lr}
   17b4c:	b083      	sub	sp, #12
   17b4e:	9001      	str	r0, [sp, #4]
  /* send packet */
  attcSendSimpleReq(pCcb);
   17b50:	9801      	ldr	r0, [sp, #4]
   17b52:	f7ff ff29 	bl	179a8 <attcSendSimpleReq>

  /* if flow not disabled */
  if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   17b56:	9b01      	ldr	r3, [sp, #4]
   17b58:	681b      	ldr	r3, [r3, #0]
   17b5a:	7f5b      	ldrb	r3, [r3, #29]
   17b5c:	f003 0302 	and.w	r3, r3, #2
   17b60:	2b00      	cmp	r3, #0
   17b62:	d109      	bne.n	17b78 <attcSendWriteCmd+0x2e>
  {
    /* call callback */
    attcExecCallback(pCcb->pMainCcb->connId, ATTC_WRITE_CMD_RSP, pCcb->outReq.handle, ATT_SUCCESS);
   17b64:	9b01      	ldr	r3, [sp, #4]
   17b66:	681b      	ldr	r3, [r3, #0]
   17b68:	7f18      	ldrb	r0, [r3, #28]
   17b6a:	9b01      	ldr	r3, [sp, #4]
   17b6c:	8b1a      	ldrh	r2, [r3, #24]
   17b6e:	2300      	movs	r3, #0
   17b70:	210a      	movs	r1, #10
   17b72:	f000 faa8 	bl	180c6 <attcExecCallback>
   17b76:	e002      	b.n	17b7e <attcSendWriteCmd+0x34>
  }
  else
  {
    /* set pending write command callback for this handle */
    attcSetPendWriteCmd(pCcb);
   17b78:	9801      	ldr	r0, [sp, #4]
   17b7a:	f7ff feb3 	bl	178e4 <attcSetPendWriteCmd>
  }

  /* clear out req */
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   17b7e:	9b01      	ldr	r3, [sp, #4]
   17b80:	2200      	movs	r2, #0
   17b82:	749a      	strb	r2, [r3, #18]
}
   17b84:	bf00      	nop
   17b86:	b003      	add	sp, #12
   17b88:	f85d fb04 	ldr.w	pc, [sp], #4

00017b8c <attcSendPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendPrepWriteReq(attcCcb_t *pCcb)
{
   17b8c:	b500      	push	{lr}
   17b8e:	b087      	sub	sp, #28
   17b90:	9001      	str	r0, [sp, #4]
  attcPktParam_t  *pPkt;
  uint8_t         *p;
  uint16_t        dataLen;

  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   17b92:	9b01      	ldr	r3, [sp, #4]
   17b94:	7cdb      	ldrb	r3, [r3, #19]
   17b96:	2b01      	cmp	r3, #1
   17b98:	d147      	bne.n	17c2a <attcSendPrepWriteReq+0x9e>
  {
    /* determine size of buffer to allocate */
    if (pCcb->outReqParams.w.len < (pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN))
   17b9a:	9b01      	ldr	r3, [sp, #4]
   17b9c:	8b9b      	ldrh	r3, [r3, #28]
   17b9e:	461a      	mov	r2, r3
   17ba0:	9b01      	ldr	r3, [sp, #4]
   17ba2:	681b      	ldr	r3, [r3, #0]
   17ba4:	8b5b      	ldrh	r3, [r3, #26]
   17ba6:	3b05      	subs	r3, #5
   17ba8:	429a      	cmp	r2, r3
   17baa:	da04      	bge.n	17bb6 <attcSendPrepWriteReq+0x2a>
    {
      dataLen = pCcb->outReqParams.w.len;
   17bac:	9b01      	ldr	r3, [sp, #4]
   17bae:	8b9b      	ldrh	r3, [r3, #28]
   17bb0:	f8ad 3012 	strh.w	r3, [sp, #18]
   17bb4:	e005      	b.n	17bc2 <attcSendPrepWriteReq+0x36>
    }
    else
    {
      dataLen = pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN;
   17bb6:	9b01      	ldr	r3, [sp, #4]
   17bb8:	681b      	ldr	r3, [r3, #0]
   17bba:	8b5b      	ldrh	r3, [r3, #26]
   17bbc:	3b05      	subs	r3, #5
   17bbe:	f8ad 3012 	strh.w	r3, [sp, #18]
    }

    /* allocate new buffer */
    if ((pPkt = attMsgAlloc(dataLen + ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   17bc2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   17bc6:	330d      	adds	r3, #13
   17bc8:	b29b      	uxth	r3, r3
   17bca:	4618      	mov	r0, r3
   17bcc:	f004 fae2 	bl	1c194 <attMsgAlloc>
   17bd0:	9005      	str	r0, [sp, #20]
   17bd2:	9b05      	ldr	r3, [sp, #20]
   17bd4:	2b00      	cmp	r3, #0
   17bd6:	d020      	beq.n	17c1a <attcSendPrepWriteReq+0x8e>
    {
      /* copy fixed fields */
      memcpy(pPkt, pCcb->outReq.pPkt, ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START);
   17bd8:	9b01      	ldr	r3, [sp, #4]
   17bda:	695b      	ldr	r3, [r3, #20]
   17bdc:	220d      	movs	r2, #13
   17bde:	4619      	mov	r1, r3
   17be0:	9805      	ldr	r0, [sp, #20]
   17be2:	f7f4 fa8d 	bl	c100 <memcpy>

      /* copy data */
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
   17be6:	9b05      	ldr	r3, [sp, #20]
   17be8:	f103 000d 	add.w	r0, r3, #13
             pCcb->outReqParams.w.pValue, dataLen);
   17bec:	9b01      	ldr	r3, [sp, #4]
   17bee:	6a1b      	ldr	r3, [r3, #32]
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
   17bf0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   17bf4:	4619      	mov	r1, r3
   17bf6:	f7f4 fa83 	bl	c100 <memcpy>

      /* update length and data pointer */
      pCcb->outReqParams.w.pValue += dataLen;
   17bfa:	9b01      	ldr	r3, [sp, #4]
   17bfc:	6a1a      	ldr	r2, [r3, #32]
   17bfe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   17c02:	441a      	add	r2, r3
   17c04:	9b01      	ldr	r3, [sp, #4]
   17c06:	621a      	str	r2, [r3, #32]
      pCcb->outReqParams.w.len -= dataLen;
   17c08:	9b01      	ldr	r3, [sp, #4]
   17c0a:	8b9a      	ldrh	r2, [r3, #28]
   17c0c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   17c10:	1ad3      	subs	r3, r2, r3
   17c12:	b29a      	uxth	r2, r3
   17c14:	9b01      	ldr	r3, [sp, #4]
   17c16:	839a      	strh	r2, [r3, #28]
   17c18:	e011      	b.n	17c3e <attcSendPrepWriteReq+0xb2>
    }
    /* else handle error case of allocation failure */
    else
    {
      /* free stored packet and call callback with failure status */
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_MEMORY);
   17c1a:	9b01      	ldr	r3, [sp, #4]
   17c1c:	3310      	adds	r3, #16
   17c1e:	2270      	movs	r2, #112	; 0x70
   17c20:	4619      	mov	r1, r3
   17c22:	9801      	ldr	r0, [sp, #4]
   17c24:	f000 fa74 	bl	18110 <attcReqClear>
      return;
   17c28:	e03d      	b.n	17ca6 <attcSendPrepWriteReq+0x11a>
    }
  }
  /* else not continuing */
  else
  {
    dataLen = pCcb->outReqParams.w.len;
   17c2a:	9b01      	ldr	r3, [sp, #4]
   17c2c:	8b9b      	ldrh	r3, [r3, #28]
   17c2e:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* send the stored packet */
    pPkt = pCcb->outReq.pPkt;
   17c32:	9b01      	ldr	r3, [sp, #4]
   17c34:	695b      	ldr	r3, [r3, #20]
   17c36:	9305      	str	r3, [sp, #20]

    /* clear stored packet pointer */
    pCcb->outReq.pPkt = NULL;
   17c38:	9b01      	ldr	r3, [sp, #4]
   17c3a:	2200      	movs	r2, #0
   17c3c:	615a      	str	r2, [r3, #20]
  }

  /* build remaining fields of packet from stored parameters */
  p = (uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_HDR_LEN + sizeof(uint16_t);
   17c3e:	9b05      	ldr	r3, [sp, #20]
   17c40:	330b      	adds	r3, #11
   17c42:	9303      	str	r3, [sp, #12]
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
   17c44:	9b01      	ldr	r3, [sp, #4]
   17c46:	8bd9      	ldrh	r1, [r3, #30]
   17c48:	9b03      	ldr	r3, [sp, #12]
   17c4a:	1c5a      	adds	r2, r3, #1
   17c4c:	9203      	str	r2, [sp, #12]
   17c4e:	b2ca      	uxtb	r2, r1
   17c50:	701a      	strb	r2, [r3, #0]
   17c52:	9b01      	ldr	r3, [sp, #4]
   17c54:	8bdb      	ldrh	r3, [r3, #30]
   17c56:	0a1b      	lsrs	r3, r3, #8
   17c58:	b299      	uxth	r1, r3
   17c5a:	9b03      	ldr	r3, [sp, #12]
   17c5c:	1c5a      	adds	r2, r3, #1
   17c5e:	9203      	str	r2, [sp, #12]
   17c60:	b2ca      	uxtb	r2, r1
   17c62:	701a      	strb	r2, [r3, #0]

  /* update offset after building packet */
  pCcb->outReqParams.w.offset += dataLen;
   17c64:	9b01      	ldr	r3, [sp, #4]
   17c66:	8bda      	ldrh	r2, [r3, #30]
   17c68:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   17c6c:	4413      	add	r3, r2
   17c6e:	b29a      	uxth	r2, r3
   17c70:	9b01      	ldr	r3, [sp, #4]
   17c72:	83da      	strh	r2, [r3, #30]

  /* start request timer */
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   17c74:	9b01      	ldr	r3, [sp, #4]
   17c76:	2210      	movs	r2, #16
   17c78:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   17c7c:	9b01      	ldr	r3, [sp, #4]
   17c7e:	f103 0224 	add.w	r2, r3, #36	; 0x24
   17c82:	4b0a      	ldr	r3, [pc, #40]	; (17cac <attcSendPrepWriteReq+0x120>)
   17c84:	681b      	ldr	r3, [r3, #0]
   17c86:	799b      	ldrb	r3, [r3, #6]
   17c88:	4619      	mov	r1, r3
   17c8a:	4610      	mov	r0, r2
   17c8c:	f008 f9ce 	bl	2002c <WsfTimerStartSec>

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
   17c90:	9b01      	ldr	r3, [sp, #4]
   17c92:	681b      	ldr	r3, [r3, #0]
   17c94:	8b19      	ldrh	r1, [r3, #24]
   17c96:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   17c9a:	3305      	adds	r3, #5
   17c9c:	b29a      	uxth	r2, r3
   17c9e:	9b05      	ldr	r3, [sp, #20]
   17ca0:	2004      	movs	r0, #4
   17ca2:	f005 fa51 	bl	1d148 <L2cDataReq>
}
   17ca6:	b007      	add	sp, #28
   17ca8:	f85d fb04 	ldr.w	pc, [sp], #4
   17cac:	10002bb0 	.word	0x10002bb0

00017cb0 <attcSendReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSendReq(attcCcb_t *pCcb)
{
   17cb0:	b500      	push	{lr}
   17cb2:	b083      	sub	sp, #12
   17cb4:	9001      	str	r0, [sp, #4]
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   17cb6:	9b01      	ldr	r3, [sp, #4]
   17cb8:	7c9b      	ldrb	r3, [r3, #18]
   17cba:	461a      	mov	r2, r3
   17cbc:	4b04      	ldr	r3, [pc, #16]	; (17cd0 <attcSendReq+0x20>)
   17cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17cc2:	9801      	ldr	r0, [sp, #4]
   17cc4:	4798      	blx	r3
}
   17cc6:	bf00      	nop
   17cc8:	b003      	add	sp, #12
   17cca:	f85d fb04 	ldr.w	pc, [sp], #4
   17cce:	bf00      	nop
   17cd0:	00028608 	.word	0x00028608

00017cd4 <attcSetupReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSetupReq(attcCcb_t *pCcb, attcApiMsg_t *pMsg)
{
   17cd4:	b500      	push	{lr}
   17cd6:	b083      	sub	sp, #12
   17cd8:	9001      	str	r0, [sp, #4]
   17cda:	9100      	str	r1, [sp, #0]
  /* set out req to api message */
  pCcb->outReq = *pMsg;
   17cdc:	9b01      	ldr	r3, [sp, #4]
   17cde:	9a00      	ldr	r2, [sp, #0]
   17ce0:	3310      	adds	r3, #16
   17ce2:	ca07      	ldmia	r2, {r0, r1, r2}
   17ce4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* store parameters */
  pCcb->outReqParams = *(pMsg->pPkt);
   17ce8:	9b00      	ldr	r3, [sp, #0]
   17cea:	685a      	ldr	r2, [r3, #4]
   17cec:	9b01      	ldr	r3, [sp, #4]
   17cee:	331c      	adds	r3, #28
   17cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
   17cf4:	e883 0003 	stmia.w	r3, {r0, r1}

  /* build and send request */
  attcSendReq(pCcb);
   17cf8:	9801      	ldr	r0, [sp, #4]
   17cfa:	f7ff ffd9 	bl	17cb0 <attcSendReq>
}
   17cfe:	bf00      	nop
   17d00:	b003      	add	sp, #12
   17d02:	f85d fb04 	ldr.w	pc, [sp], #4

00017d06 <attcDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   17d06:	b500      	push	{lr}
   17d08:	b085      	sub	sp, #20
   17d0a:	4603      	mov	r3, r0
   17d0c:	9200      	str	r2, [sp, #0]
   17d0e:	f8ad 3006 	strh.w	r3, [sp, #6]
   17d12:	460b      	mov	r3, r1
   17d14:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t       opcode;
  attcCcb_t     *pCcb;

  /* get connection control block for this handle, ignore packet if not found */
  if ((pCcb = attcCcbByHandle(handle)) == NULL)
   17d18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17d1c:	4618      	mov	r0, r3
   17d1e:	f000 f99d 	bl	1805c <attcCcbByHandle>
   17d22:	9003      	str	r0, [sp, #12]
   17d24:	9b03      	ldr	r3, [sp, #12]
   17d26:	2b00      	cmp	r3, #0
   17d28:	d01f      	beq.n	17d6a <attcDataCback+0x64>
  {
    return;
  }

  /* parse opcode */
  opcode = *(pPacket + L2C_PAYLOAD_START);
   17d2a:	9b00      	ldr	r3, [sp, #0]
   17d2c:	7a1b      	ldrb	r3, [r3, #8]
   17d2e:	f88d 300b 	strb.w	r3, [sp, #11]

  /* if response */
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
   17d32:	f89d 300b 	ldrb.w	r3, [sp, #11]
   17d36:	2b19      	cmp	r3, #25
   17d38:	d807      	bhi.n	17d4a <attcDataCback+0x44>
  {
    attcProcRsp(pCcb, len, pPacket);
   17d3a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17d3e:	9a00      	ldr	r2, [sp, #0]
   17d40:	4619      	mov	r1, r3
   17d42:	9803      	ldr	r0, [sp, #12]
   17d44:	f000 fbae 	bl	184a4 <attcProcRsp>
   17d48:	e010      	b.n	17d6c <attcDataCback+0x66>
  }
  /* else if indication or notification */
  else if ((opcode == ATT_PDU_VALUE_NTF) || (opcode == ATT_PDU_VALUE_IND))
   17d4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   17d4e:	2b1b      	cmp	r3, #27
   17d50:	d003      	beq.n	17d5a <attcDataCback+0x54>
   17d52:	f89d 300b 	ldrb.w	r3, [sp, #11]
   17d56:	2b1d      	cmp	r3, #29
   17d58:	d108      	bne.n	17d6c <attcDataCback+0x66>
  {
    attcProcInd(pCcb, len, pPacket);
   17d5a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17d5e:	9a00      	ldr	r2, [sp, #0]
   17d60:	4619      	mov	r1, r3
   17d62:	9803      	ldr	r0, [sp, #12]
   17d64:	f000 fc24 	bl	185b0 <attcProcInd>
   17d68:	e000      	b.n	17d6c <attcDataCback+0x66>
    return;
   17d6a:	bf00      	nop
  /* else unknown opcode */
  else
  {
    ATT_TRACE_WARN1("attc unknown opcode 0x%02x", opcode);
  }
}
   17d6c:	b005      	add	sp, #20
   17d6e:	f85d fb04 	ldr.w	pc, [sp], #4

00017d72 <attcCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcCtrlCback(wsfMsgHdr_t *pMsg)
{
   17d72:	b500      	push	{lr}
   17d74:	b085      	sub	sp, #20
   17d76:	9001      	str	r0, [sp, #4]
  attcCcb_t     *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   17d78:	9b01      	ldr	r3, [sp, #4]
   17d7a:	881b      	ldrh	r3, [r3, #0]
   17d7c:	b2db      	uxtb	r3, r3
   17d7e:	4618      	mov	r0, r3
   17d80:	f000 f94e 	bl	18020 <attcCcbByConnId>
   17d84:	9003      	str	r0, [sp, #12]
   17d86:	9b03      	ldr	r3, [sp, #12]
   17d88:	2b00      	cmp	r3, #0
   17d8a:	d00d      	beq.n	17da8 <attcCtrlCback+0x36>
  {
    /* if confirmation pending try sending now */
    AttcIndConfirm((dmConnId_t) pMsg->param);
   17d8c:	9b01      	ldr	r3, [sp, #4]
   17d8e:	881b      	ldrh	r3, [r3, #0]
   17d90:	b2db      	uxtb	r3, r3
   17d92:	4618      	mov	r0, r3
   17d94:	f000 fd4e 	bl	18834 <AttcIndConfirm>

    /* call pending write command callback */
    attcWriteCmdCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   17d98:	9b01      	ldr	r3, [sp, #4]
   17d9a:	881b      	ldrh	r3, [r3, #0]
   17d9c:	b2db      	uxtb	r3, r3
   17d9e:	2200      	movs	r2, #0
   17da0:	9903      	ldr	r1, [sp, #12]
   17da2:	4618      	mov	r0, r3
   17da4:	f7ff fdc5 	bl	17932 <attcWriteCmdCallback>
  }
}
   17da8:	bf00      	nop
   17daa:	b005      	add	sp, #20
   17dac:	f85d fb04 	ldr.w	pc, [sp], #4

00017db0 <attcConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   17db0:	b510      	push	{r4, lr}
   17db2:	b086      	sub	sp, #24
   17db4:	9001      	str	r0, [sp, #4]
   17db6:	9100      	str	r1, [sp, #0]
  attcCcb_t *pClient;
  uint16_t  localMtu;
  uint8_t   status;

  /* if connection opened */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   17db8:	9b00      	ldr	r3, [sp, #0]
   17dba:	789b      	ldrb	r3, [r3, #2]
   17dbc:	2b27      	cmp	r3, #39	; 0x27
   17dbe:	d129      	bne.n	17e14 <attcConnCback+0x64>
  {
    /* if we initiated connection send MTU request */
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   17dc0:	9b01      	ldr	r3, [sp, #4]
   17dc2:	7f1b      	ldrb	r3, [r3, #28]
   17dc4:	4618      	mov	r0, r3
   17dc6:	f7fd fe83 	bl	15ad0 <DmConnRole>
   17dca:	4603      	mov	r3, r0
   17dcc:	2b00      	cmp	r3, #0
   17dce:	d179      	bne.n	17ec4 <attcConnCback+0x114>
    {
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   17dd0:	4b3e      	ldr	r3, [pc, #248]	; (17ecc <attcConnCback+0x11c>)
   17dd2:	681b      	ldr	r3, [r3, #0]
   17dd4:	889b      	ldrh	r3, [r3, #4]
   17dd6:	461c      	mov	r4, r3
   17dd8:	f7f6 fb54 	bl	e484 <HciGetMaxRxAclLen>
   17ddc:	4603      	mov	r3, r0
   17dde:	3b04      	subs	r3, #4
   17de0:	429c      	cmp	r4, r3
   17de2:	da03      	bge.n	17dec <attcConnCback+0x3c>
   17de4:	4b39      	ldr	r3, [pc, #228]	; (17ecc <attcConnCback+0x11c>)
   17de6:	681b      	ldr	r3, [r3, #0]
   17de8:	889b      	ldrh	r3, [r3, #4]
   17dea:	e004      	b.n	17df6 <attcConnCback+0x46>
   17dec:	f7f6 fb4a 	bl	e484 <HciGetMaxRxAclLen>
   17df0:	4603      	mov	r3, r0
   17df2:	3b04      	subs	r3, #4
   17df4:	b29b      	uxth	r3, r3
   17df6:	f8ad 300e 	strh.w	r3, [sp, #14]

      /* if desired MTU is not the default */
      if (localMtu != ATT_DEFAULT_MTU)
   17dfa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   17dfe:	2b17      	cmp	r3, #23
   17e00:	d060      	beq.n	17ec4 <attcConnCback+0x114>
      {
        AttcMtuReq(pCcb->connId, localMtu);
   17e02:	9b01      	ldr	r3, [sp, #4]
   17e04:	7f1b      	ldrb	r3, [r3, #28]
   17e06:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   17e0a:	4611      	mov	r1, r2
   17e0c:	4618      	mov	r0, r3
   17e0e:	f000 fcd9 	bl	187c4 <AttcMtuReq>
    }

    /* call pending write command callback */
    attcWriteCmdCallback(pCcb->connId, pClient, status);
  }
}
   17e12:	e057      	b.n	17ec4 <attcConnCback+0x114>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   17e14:	9b00      	ldr	r3, [sp, #0]
   17e16:	789b      	ldrb	r3, [r3, #2]
   17e18:	2b28      	cmp	r3, #40	; 0x28
   17e1a:	d153      	bne.n	17ec4 <attcConnCback+0x114>
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   17e1c:	9b00      	ldr	r3, [sp, #0]
   17e1e:	78db      	ldrb	r3, [r3, #3]
   17e20:	2b00      	cmp	r3, #0
   17e22:	d105      	bne.n	17e30 <attcConnCback+0x80>
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   17e24:	9b00      	ldr	r3, [sp, #0]
   17e26:	7a1b      	ldrb	r3, [r3, #8]
   17e28:	3320      	adds	r3, #32
   17e2a:	f88d 3017 	strb.w	r3, [sp, #23]
   17e2e:	e004      	b.n	17e3a <attcConnCback+0x8a>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   17e30:	9b00      	ldr	r3, [sp, #0]
   17e32:	78db      	ldrb	r3, [r3, #3]
   17e34:	3320      	adds	r3, #32
   17e36:	f88d 3017 	strb.w	r3, [sp, #23]
    pClient = &attcCb.ccb[pCcb->connId - 1];
   17e3a:	9b01      	ldr	r3, [sp, #4]
   17e3c:	7f1b      	ldrb	r3, [r3, #28]
   17e3e:	1e5a      	subs	r2, r3, #1
   17e40:	4613      	mov	r3, r2
   17e42:	00db      	lsls	r3, r3, #3
   17e44:	1a9b      	subs	r3, r3, r2
   17e46:	00db      	lsls	r3, r3, #3
   17e48:	4a21      	ldr	r2, [pc, #132]	; (17ed0 <attcConnCback+0x120>)
   17e4a:	4413      	add	r3, r2
   17e4c:	9304      	str	r3, [sp, #16]
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
   17e4e:	9b04      	ldr	r3, [sp, #16]
   17e50:	7c9b      	ldrb	r3, [r3, #18]
   17e52:	2b00      	cmp	r3, #0
   17e54:	d00c      	beq.n	17e70 <attcConnCback+0xc0>
      WsfTimerStop(&pClient->outReqTimer);
   17e56:	9b04      	ldr	r3, [sp, #16]
   17e58:	3324      	adds	r3, #36	; 0x24
   17e5a:	4618      	mov	r0, r3
   17e5c:	f008 f90a 	bl	20074 <WsfTimerStop>
      attcReqClear(pClient, &pClient->outReq, status);
   17e60:	9b04      	ldr	r3, [sp, #16]
   17e62:	3310      	adds	r3, #16
   17e64:	f89d 2017 	ldrb.w	r2, [sp, #23]
   17e68:	4619      	mov	r1, r3
   17e6a:	9804      	ldr	r0, [sp, #16]
   17e6c:	f000 f950 	bl	18110 <attcReqClear>
    if (pClient->onDeck.hdr.event != ATTC_MSG_API_NONE)
   17e70:	9b04      	ldr	r3, [sp, #16]
   17e72:	799b      	ldrb	r3, [r3, #6]
   17e74:	2b00      	cmp	r3, #0
   17e76:	d007      	beq.n	17e88 <attcConnCback+0xd8>
      attcReqClear(pClient, &pClient->onDeck, status);
   17e78:	9b04      	ldr	r3, [sp, #16]
   17e7a:	3304      	adds	r3, #4
   17e7c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   17e80:	4619      	mov	r1, r3
   17e82:	9804      	ldr	r0, [sp, #16]
   17e84:	f000 f944 	bl	18110 <attcReqClear>
    pClient->flowDisabled = FALSE;
   17e88:	9b04      	ldr	r3, [sp, #16]
   17e8a:	2200      	movs	r2, #0
   17e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    pClient->cnfPending = FALSE;
   17e90:	9b04      	ldr	r3, [sp, #16]
   17e92:	2200      	movs	r2, #0
   17e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if (attcCb.pSign != NULL)
   17e98:	4b0d      	ldr	r3, [pc, #52]	; (17ed0 <attcConnCback+0x120>)
   17e9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   17e9e:	2b00      	cmp	r3, #0
   17ea0:	d008      	beq.n	17eb4 <attcConnCback+0x104>
      (*attcCb.pSign->closeCback)(pClient, status);
   17ea2:	4b0b      	ldr	r3, [pc, #44]	; (17ed0 <attcConnCback+0x120>)
   17ea4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   17ea8:	685b      	ldr	r3, [r3, #4]
   17eaa:	f89d 2017 	ldrb.w	r2, [sp, #23]
   17eae:	4611      	mov	r1, r2
   17eb0:	9804      	ldr	r0, [sp, #16]
   17eb2:	4798      	blx	r3
    attcWriteCmdCallback(pCcb->connId, pClient, status);
   17eb4:	9b01      	ldr	r3, [sp, #4]
   17eb6:	7f1b      	ldrb	r3, [r3, #28]
   17eb8:	f89d 2017 	ldrb.w	r2, [sp, #23]
   17ebc:	9904      	ldr	r1, [sp, #16]
   17ebe:	4618      	mov	r0, r3
   17ec0:	f7ff fd37 	bl	17932 <attcWriteCmdCallback>
}
   17ec4:	bf00      	nop
   17ec6:	b006      	add	sp, #24
   17ec8:	bd10      	pop	{r4, pc}
   17eca:	bf00      	nop
   17ecc:	10002bb0 	.word	0x10002bb0
   17ed0:	10004f40 	.word	0x10004f40

00017ed4 <attcMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcMsgCback(attcApiMsg_t *pMsg)
{
   17ed4:	b500      	push	{lr}
   17ed6:	b085      	sub	sp, #20
   17ed8:	9001      	str	r0, [sp, #4]
  attcCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   17eda:	9b01      	ldr	r3, [sp, #4]
   17edc:	881b      	ldrh	r3, [r3, #0]
   17ede:	b2db      	uxtb	r3, r3
   17ee0:	4618      	mov	r0, r3
   17ee2:	f000 f89d 	bl	18020 <attcCcbByConnId>
   17ee6:	9003      	str	r0, [sp, #12]
   17ee8:	9b03      	ldr	r3, [sp, #12]
   17eea:	2b00      	cmp	r3, #0
   17eec:	d10d      	bne.n	17f0a <attcMsgCback+0x36>
  {
    /* if message has a packet buffer */
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
   17eee:	9b01      	ldr	r3, [sp, #4]
   17ef0:	789b      	ldrb	r3, [r3, #2]
   17ef2:	2b00      	cmp	r3, #0
   17ef4:	f000 808e 	beq.w	18014 <attcMsgCback+0x140>
        pMsg->hdr.event <= ATTC_MSG_API_SIGNED_WRITE_CMD)
   17ef8:	9b01      	ldr	r3, [sp, #4]
   17efa:	789b      	ldrb	r3, [r3, #2]
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
   17efc:	2b0d      	cmp	r3, #13
   17efe:	f200 8089 	bhi.w	18014 <attcMsgCback+0x140>
    {
      /* free packet buffer */
      attcFreePkt(pMsg);
   17f02:	9801      	ldr	r0, [sp, #4]
   17f04:	f000 f8cc 	bl	180a0 <attcFreePkt>
    }

    /* ignore if connection not in use */
    return;
   17f08:	e084      	b.n	18014 <attcMsgCback+0x140>
  }

  /* if an API request to send packet (non-signed) */
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   17f0a:	9b01      	ldr	r3, [sp, #4]
   17f0c:	789b      	ldrb	r3, [r3, #2]
   17f0e:	2b0c      	cmp	r3, #12
   17f10:	d82d      	bhi.n	17f6e <attcMsgCback+0x9a>
  {
    /* verify no API request already waiting on deck, in progress, or no pending write command
       already for this handle */
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   17f12:	9b03      	ldr	r3, [sp, #12]
   17f14:	799b      	ldrb	r3, [r3, #6]
   17f16:	2b00      	cmp	r3, #0
   17f18:	d10e      	bne.n	17f38 <attcMsgCback+0x64>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   17f1a:	9b03      	ldr	r3, [sp, #12]
   17f1c:	7c9b      	ldrb	r3, [r3, #18]
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   17f1e:	2b01      	cmp	r3, #1
   17f20:	d80a      	bhi.n	17f38 <attcMsgCback+0x64>
        ((pMsg->hdr.event == ATTC_MSG_API_WRITE_CMD)  &&
   17f22:	9b01      	ldr	r3, [sp, #4]
   17f24:	789b      	ldrb	r3, [r3, #2]
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   17f26:	2b0a      	cmp	r3, #10
   17f28:	d10c      	bne.n	17f44 <attcMsgCback+0x70>
         attcPendWriteCmd(pCcb, pMsg)))
   17f2a:	9901      	ldr	r1, [sp, #4]
   17f2c:	9803      	ldr	r0, [sp, #12]
   17f2e:	f7ff fca1 	bl	17874 <attcPendWriteCmd>
   17f32:	4603      	mov	r3, r0
        ((pMsg->hdr.event == ATTC_MSG_API_WRITE_CMD)  &&
   17f34:	2b00      	cmp	r3, #0
   17f36:	d005      	beq.n	17f44 <attcMsgCback+0x70>
    {
      /* free request and call callback with failure status */
      attcReqClear(pCcb, pMsg, ATT_ERR_OVERFLOW);
   17f38:	2272      	movs	r2, #114	; 0x72
   17f3a:	9901      	ldr	r1, [sp, #4]
   17f3c:	9803      	ldr	r0, [sp, #12]
   17f3e:	f000 f8e7 	bl	18110 <attcReqClear>
      return;
   17f42:	e068      	b.n	18016 <attcMsgCback+0x142>
    }

    /* if MTU request in progress or flow controlled */
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_MTU || pCcb->flowDisabled)
   17f44:	9b03      	ldr	r3, [sp, #12]
   17f46:	7c9b      	ldrb	r3, [r3, #18]
   17f48:	2b01      	cmp	r3, #1
   17f4a:	d004      	beq.n	17f56 <attcMsgCback+0x82>
   17f4c:	9b03      	ldr	r3, [sp, #12]
   17f4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   17f52:	2b00      	cmp	r3, #0
   17f54:	d006      	beq.n	17f64 <attcMsgCback+0x90>
    {
      /* put request "on deck" for processing later */
      pCcb->onDeck = *pMsg;
   17f56:	9b03      	ldr	r3, [sp, #12]
   17f58:	9a01      	ldr	r2, [sp, #4]
   17f5a:	3304      	adds	r3, #4
   17f5c:	ca07      	ldmia	r2, {r0, r1, r2}
   17f5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   17f62:	e058      	b.n	18016 <attcMsgCback+0x142>
    }
    /* otherwise ready to send; set up request */
    else
    {
      attcSetupReq(pCcb, pMsg);
   17f64:	9901      	ldr	r1, [sp, #4]
   17f66:	9803      	ldr	r0, [sp, #12]
   17f68:	f7ff feb4 	bl	17cd4 <attcSetupReq>
   17f6c:	e053      	b.n	18016 <attcMsgCback+0x142>
    }
  }
  /* else if signed data event */
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
   17f6e:	9b01      	ldr	r3, [sp, #4]
   17f70:	789b      	ldrb	r3, [r3, #2]
   17f72:	2b0c      	cmp	r3, #12
   17f74:	d910      	bls.n	17f98 <attcMsgCback+0xc4>
           pMsg->hdr.event <= ATTC_MSG_CMAC_CMPL)
   17f76:	9b01      	ldr	r3, [sp, #4]
   17f78:	789b      	ldrb	r3, [r3, #2]
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
   17f7a:	2b0e      	cmp	r3, #14
   17f7c:	d80c      	bhi.n	17f98 <attcMsgCback+0xc4>
  {
    /* pass to message callback for signed data */
    if (attcCb.pSign != NULL)
   17f7e:	4b27      	ldr	r3, [pc, #156]	; (1801c <attcMsgCback+0x148>)
   17f80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   17f84:	2b00      	cmp	r3, #0
   17f86:	d046      	beq.n	18016 <attcMsgCback+0x142>
    {
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
   17f88:	4b24      	ldr	r3, [pc, #144]	; (1801c <attcMsgCback+0x148>)
   17f8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   17f8e:	681b      	ldr	r3, [r3, #0]
   17f90:	9901      	ldr	r1, [sp, #4]
   17f92:	9803      	ldr	r0, [sp, #12]
   17f94:	4798      	blx	r3
    if (attcCb.pSign != NULL)
   17f96:	e03e      	b.n	18016 <attcMsgCback+0x142>
    }
  }
  /* else if cancel request */
  else if (pMsg->hdr.event == ATTC_MSG_API_CANCEL)
   17f98:	9b01      	ldr	r3, [sp, #4]
   17f9a:	789b      	ldrb	r3, [r3, #2]
   17f9c:	2b0f      	cmp	r3, #15
   17f9e:	d120      	bne.n	17fe2 <attcMsgCback+0x10e>
  {
    /* free any out req (except mtu req) */
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
   17fa0:	9b03      	ldr	r3, [sp, #12]
   17fa2:	7c9b      	ldrb	r3, [r3, #18]
   17fa4:	2b00      	cmp	r3, #0
   17fa6:	d010      	beq.n	17fca <attcMsgCback+0xf6>
        pCcb->outReq.hdr.event != ATTC_MSG_API_MTU)
   17fa8:	9b03      	ldr	r3, [sp, #12]
   17faa:	7c9b      	ldrb	r3, [r3, #18]
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
   17fac:	2b01      	cmp	r3, #1
   17fae:	d00c      	beq.n	17fca <attcMsgCback+0xf6>
    {
      WsfTimerStop(&pCcb->outReqTimer);
   17fb0:	9b03      	ldr	r3, [sp, #12]
   17fb2:	3324      	adds	r3, #36	; 0x24
   17fb4:	4618      	mov	r0, r3
   17fb6:	f008 f85d 	bl	20074 <WsfTimerStop>
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_CANCELLED);
   17fba:	9b03      	ldr	r3, [sp, #12]
   17fbc:	3310      	adds	r3, #16
   17fbe:	2274      	movs	r2, #116	; 0x74
   17fc0:	4619      	mov	r1, r3
   17fc2:	9803      	ldr	r0, [sp, #12]
   17fc4:	f000 f8a4 	bl	18110 <attcReqClear>
   17fc8:	e025      	b.n	18016 <attcMsgCback+0x142>
    }
    /* else free any req on deck */
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   17fca:	9b03      	ldr	r3, [sp, #12]
   17fcc:	799b      	ldrb	r3, [r3, #6]
   17fce:	2b00      	cmp	r3, #0
   17fd0:	d021      	beq.n	18016 <attcMsgCback+0x142>
    {
      attcReqClear(pCcb, &pCcb->onDeck, ATT_ERR_CANCELLED);
   17fd2:	9b03      	ldr	r3, [sp, #12]
   17fd4:	3304      	adds	r3, #4
   17fd6:	2274      	movs	r2, #116	; 0x74
   17fd8:	4619      	mov	r1, r3
   17fda:	9803      	ldr	r0, [sp, #12]
   17fdc:	f000 f898 	bl	18110 <attcReqClear>
   17fe0:	e019      	b.n	18016 <attcMsgCback+0x142>
    }
  }
  /* else if timeout */
  else if (pMsg->hdr.event == ATTC_MSG_REQ_TIMEOUT)
   17fe2:	9b01      	ldr	r3, [sp, #4]
   17fe4:	789b      	ldrb	r3, [r3, #2]
   17fe6:	2b10      	cmp	r3, #16
   17fe8:	d115      	bne.n	18016 <attcMsgCback+0x142>
  {
    /* free any out req */
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE)
   17fea:	9b03      	ldr	r3, [sp, #12]
   17fec:	7c9b      	ldrb	r3, [r3, #18]
   17fee:	2b00      	cmp	r3, #0
   17ff0:	d011      	beq.n	18016 <attcMsgCback+0x142>
    {
      attcReqClear(pCcb, &pCcb->outReq, ATT_ERR_TIMEOUT);
   17ff2:	9b03      	ldr	r3, [sp, #12]
   17ff4:	3310      	adds	r3, #16
   17ff6:	2271      	movs	r2, #113	; 0x71
   17ff8:	4619      	mov	r1, r3
   17ffa:	9803      	ldr	r0, [sp, #12]
   17ffc:	f000 f888 	bl	18110 <attcReqClear>
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   18000:	9b03      	ldr	r3, [sp, #12]
   18002:	681b      	ldr	r3, [r3, #0]
   18004:	7f5a      	ldrb	r2, [r3, #29]
   18006:	9b03      	ldr	r3, [sp, #12]
   18008:	681b      	ldr	r3, [r3, #0]
   1800a:	f042 0204 	orr.w	r2, r2, #4
   1800e:	b2d2      	uxtb	r2, r2
   18010:	775a      	strb	r2, [r3, #29]
   18012:	e000      	b.n	18016 <attcMsgCback+0x142>
    return;
   18014:	bf00      	nop
    }
  }
}
   18016:	b005      	add	sp, #20
   18018:	f85d fb04 	ldr.w	pc, [sp], #4
   1801c:	10004f40 	.word	0x10004f40

00018020 <attcCcbByConnId>:
 *
 *  \return Pointer to connection control block or NULL if not in use.
 */
/*************************************************************************************************/
attcCcb_t *attcCcbByConnId(dmConnId_t connId)
{
   18020:	b500      	push	{lr}
   18022:	b083      	sub	sp, #12
   18024:	4603      	mov	r3, r0
   18026:	f88d 3007 	strb.w	r3, [sp, #7]
  if (DmConnInUse(connId))
   1802a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1802e:	4618      	mov	r0, r3
   18030:	f7fd fc36 	bl	158a0 <DmConnInUse>
   18034:	4603      	mov	r3, r0
   18036:	2b00      	cmp	r3, #0
   18038:	d009      	beq.n	1804e <attcCcbByConnId+0x2e>
  {
    return &attcCb.ccb[connId - 1];
   1803a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1803e:	1e5a      	subs	r2, r3, #1
   18040:	4613      	mov	r3, r2
   18042:	00db      	lsls	r3, r3, #3
   18044:	1a9b      	subs	r3, r3, r2
   18046:	00db      	lsls	r3, r3, #3
   18048:	4a03      	ldr	r2, [pc, #12]	; (18058 <attcCcbByConnId+0x38>)
   1804a:	4413      	add	r3, r2
   1804c:	e000      	b.n	18050 <attcCcbByConnId+0x30>
  }
  else
  {
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
    return NULL;
   1804e:	2300      	movs	r3, #0
  }
}
   18050:	4618      	mov	r0, r3
   18052:	b003      	add	sp, #12
   18054:	f85d fb04 	ldr.w	pc, [sp], #4
   18058:	10004f40 	.word	0x10004f40

0001805c <attcCcbByHandle>:
 *
 *  \return Pointer to connection control block or NULL if not found.
 */
/*************************************************************************************************/
attcCcb_t *attcCcbByHandle(uint16_t handle)
{
   1805c:	b500      	push	{lr}
   1805e:	b085      	sub	sp, #20
   18060:	4603      	mov	r3, r0
   18062:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   18066:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1806a:	4618      	mov	r0, r3
   1806c:	f7fd fbee 	bl	1584c <DmConnIdByHandle>
   18070:	4603      	mov	r3, r0
   18072:	f88d 300f 	strb.w	r3, [sp, #15]
   18076:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1807a:	2b00      	cmp	r3, #0
   1807c:	d009      	beq.n	18092 <attcCcbByHandle+0x36>
  {
    return &attcCb.ccb[connId - 1];
   1807e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18082:	1e5a      	subs	r2, r3, #1
   18084:	4613      	mov	r3, r2
   18086:	00db      	lsls	r3, r3, #3
   18088:	1a9b      	subs	r3, r3, r2
   1808a:	00db      	lsls	r3, r3, #3
   1808c:	4a03      	ldr	r2, [pc, #12]	; (1809c <attcCcbByHandle+0x40>)
   1808e:	4413      	add	r3, r2
   18090:	e000      	b.n	18094 <attcCcbByHandle+0x38>
  }

  return NULL;
   18092:	2300      	movs	r3, #0
}
   18094:	4618      	mov	r0, r3
   18096:	b005      	add	sp, #20
   18098:	f85d fb04 	ldr.w	pc, [sp], #4
   1809c:	10004f40 	.word	0x10004f40

000180a0 <attcFreePkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcFreePkt(attcApiMsg_t *pMsg)
{
   180a0:	b500      	push	{lr}
   180a2:	b083      	sub	sp, #12
   180a4:	9001      	str	r0, [sp, #4]
  if (pMsg->pPkt != NULL)
   180a6:	9b01      	ldr	r3, [sp, #4]
   180a8:	685b      	ldr	r3, [r3, #4]
   180aa:	2b00      	cmp	r3, #0
   180ac:	d007      	beq.n	180be <attcFreePkt+0x1e>
  {
    WsfMsgFree(pMsg->pPkt);
   180ae:	9b01      	ldr	r3, [sp, #4]
   180b0:	685b      	ldr	r3, [r3, #4]
   180b2:	4618      	mov	r0, r3
   180b4:	f007 fc36 	bl	1f924 <WsfMsgFree>
    pMsg->pPkt = NULL;
   180b8:	9b01      	ldr	r3, [sp, #4]
   180ba:	2200      	movs	r2, #0
   180bc:	605a      	str	r2, [r3, #4]
  }
}
   180be:	bf00      	nop
   180c0:	b003      	add	sp, #12
   180c2:	f85d fb04 	ldr.w	pc, [sp], #4

000180c6 <attcExecCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status)
{
   180c6:	b510      	push	{r4, lr}
   180c8:	b084      	sub	sp, #16
   180ca:	4604      	mov	r4, r0
   180cc:	4608      	mov	r0, r1
   180ce:	4611      	mov	r1, r2
   180d0:	461a      	mov	r2, r3
   180d2:	4623      	mov	r3, r4
   180d4:	f88d 300f 	strb.w	r3, [sp, #15]
   180d8:	4603      	mov	r3, r0
   180da:	f88d 300e 	strb.w	r3, [sp, #14]
   180de:	460b      	mov	r3, r1
   180e0:	f8ad 300c 	strh.w	r3, [sp, #12]
   180e4:	4613      	mov	r3, r2
   180e6:	f88d 300b 	strb.w	r3, [sp, #11]
  if (event != ATT_METHOD_MTU)
   180ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
   180ee:	2b01      	cmp	r3, #1
   180f0:	d00b      	beq.n	1810a <attcExecCallback+0x44>
  {
    attExecCallback(connId, event, handle, status, 0);
   180f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   180f6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   180fa:	f89d 100e 	ldrb.w	r1, [sp, #14]
   180fe:	f89d 000f 	ldrb.w	r0, [sp, #15]
   18102:	2400      	movs	r4, #0
   18104:	9400      	str	r4, [sp, #0]
   18106:	f004 f809 	bl	1c11c <attExecCallback>
  }
}
   1810a:	bf00      	nop
   1810c:	b004      	add	sp, #16
   1810e:	bd10      	pop	{r4, pc}

00018110 <attcReqClear>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcReqClear(attcCcb_t *pCcb, attcApiMsg_t *pMsg, uint8_t status)
{
   18110:	b500      	push	{lr}
   18112:	b085      	sub	sp, #20
   18114:	9003      	str	r0, [sp, #12]
   18116:	9102      	str	r1, [sp, #8]
   18118:	4613      	mov	r3, r2
   1811a:	f88d 3007 	strb.w	r3, [sp, #7]
  attcFreePkt(pMsg);
   1811e:	9802      	ldr	r0, [sp, #8]
   18120:	f7ff ffbe 	bl	180a0 <attcFreePkt>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   18124:	9b03      	ldr	r3, [sp, #12]
   18126:	681b      	ldr	r3, [r3, #0]
   18128:	7f18      	ldrb	r0, [r3, #28]
   1812a:	9b02      	ldr	r3, [sp, #8]
   1812c:	7899      	ldrb	r1, [r3, #2]
   1812e:	9b02      	ldr	r3, [sp, #8]
   18130:	891a      	ldrh	r2, [r3, #8]
   18132:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18136:	f7ff ffc6 	bl	180c6 <attcExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   1813a:	9b02      	ldr	r3, [sp, #8]
   1813c:	2200      	movs	r2, #0
   1813e:	709a      	strb	r2, [r3, #2]
}
   18140:	bf00      	nop
   18142:	b005      	add	sp, #20
   18144:	f85d fb04 	ldr.w	pc, [sp], #4

00018148 <AttcInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcInit(void)
{
   18148:	b082      	sub	sp, #8
  uint8_t     i;
  attcCcb_t   *pCcb;

  /* Initialize control block */
  attcCb.pSign = NULL;
   1814a:	4b1b      	ldr	r3, [pc, #108]	; (181b8 <AttcInit+0x70>)
   1814c:	2200      	movs	r2, #0
   1814e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  attcCb.autoCnf = TRUE;
   18152:	4b19      	ldr	r3, [pc, #100]	; (181b8 <AttcInit+0x70>)
   18154:	2201      	movs	r2, #1
   18156:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attcCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   1815a:	2300      	movs	r3, #0
   1815c:	f88d 3007 	strb.w	r3, [sp, #7]
   18160:	4b15      	ldr	r3, [pc, #84]	; (181b8 <AttcInit+0x70>)
   18162:	9300      	str	r3, [sp, #0]
   18164:	e01e      	b.n	181a4 <AttcInit+0x5c>
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
   18166:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1816a:	4613      	mov	r3, r2
   1816c:	00db      	lsls	r3, r3, #3
   1816e:	4413      	add	r3, r2
   18170:	009b      	lsls	r3, r3, #2
   18172:	4a12      	ldr	r2, [pc, #72]	; (181bc <AttcInit+0x74>)
   18174:	441a      	add	r2, r3
   18176:	9b00      	ldr	r3, [sp, #0]
   18178:	601a      	str	r2, [r3, #0]

    /* initialize timer */
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   1817a:	4b10      	ldr	r3, [pc, #64]	; (181bc <AttcInit+0x74>)
   1817c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   18180:	9b00      	ldr	r3, [sp, #0]
   18182:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   18186:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1818a:	b29b      	uxth	r3, r3
   1818c:	3301      	adds	r3, #1
   1818e:	b29a      	uxth	r2, r3
   18190:	9b00      	ldr	r3, [sp, #0]
   18192:	859a      	strh	r2, [r3, #44]	; 0x2c
  for (i = 0, pCcb = attcCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   18194:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18198:	3301      	adds	r3, #1
   1819a:	f88d 3007 	strb.w	r3, [sp, #7]
   1819e:	9b00      	ldr	r3, [sp, #0]
   181a0:	3338      	adds	r3, #56	; 0x38
   181a2:	9300      	str	r3, [sp, #0]
   181a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   181a8:	2b02      	cmp	r3, #2
   181aa:	d9dc      	bls.n	18166 <AttcInit+0x1e>
  }

  /* set up callback interface */
  attCb.pClient = &attcFcnIf;
   181ac:	4b03      	ldr	r3, [pc, #12]	; (181bc <AttcInit+0x74>)
   181ae:	4a04      	ldr	r2, [pc, #16]	; (181c0 <AttcInit+0x78>)
   181b0:	66da      	str	r2, [r3, #108]	; 0x6c
}
   181b2:	bf00      	nop
   181b4:	b002      	add	sp, #8
   181b6:	4770      	bx	lr
   181b8:	10004f40 	.word	0x10004f40
   181bc:	100050c0 	.word	0x100050c0
   181c0:	000285f8 	.word	0x000285f8

000181c4 <attcProcErrRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcErrRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   181c4:	b086      	sub	sp, #24
   181c6:	9003      	str	r0, [sp, #12]
   181c8:	9201      	str	r2, [sp, #4]
   181ca:	9300      	str	r3, [sp, #0]
   181cc:	460b      	mov	r3, r1
   181ce:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t *p;

  p =  pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   181d2:	9b01      	ldr	r3, [sp, #4]
   181d4:	3309      	adds	r3, #9
   181d6:	9305      	str	r3, [sp, #20]

  /* set callback event from stored method */
  pEvt->hdr.event = pCcb->outReq.hdr.event;
   181d8:	9b03      	ldr	r3, [sp, #12]
   181da:	7c9a      	ldrb	r2, [r3, #18]
   181dc:	9b00      	ldr	r3, [sp, #0]
   181de:	709a      	strb	r2, [r3, #2]

  /* ignore request opcode in the error response */
  p++;
   181e0:	9b05      	ldr	r3, [sp, #20]
   181e2:	3301      	adds	r3, #1
   181e4:	9305      	str	r3, [sp, #20]

  /* if request was a read or write with a specific handle */
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
   181e6:	9b00      	ldr	r3, [sp, #0]
   181e8:	789b      	ldrb	r3, [r3, #2]
   181ea:	2b05      	cmp	r3, #5
   181ec:	d00b      	beq.n	18206 <attcProcErrRsp+0x42>
   181ee:	9b00      	ldr	r3, [sp, #0]
   181f0:	789b      	ldrb	r3, [r3, #2]
   181f2:	2b06      	cmp	r3, #6
   181f4:	d007      	beq.n	18206 <attcProcErrRsp+0x42>
      pEvt->hdr.event == ATTC_WRITE_RSP || pEvt->hdr.event == ATTC_PREPARE_WRITE_RSP)
   181f6:	9b00      	ldr	r3, [sp, #0]
   181f8:	789b      	ldrb	r3, [r3, #2]
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
   181fa:	2b09      	cmp	r3, #9
   181fc:	d003      	beq.n	18206 <attcProcErrRsp+0x42>
      pEvt->hdr.event == ATTC_WRITE_RSP || pEvt->hdr.event == ATTC_PREPARE_WRITE_RSP)
   181fe:	9b00      	ldr	r3, [sp, #0]
   18200:	789b      	ldrb	r3, [r3, #2]
   18202:	2b0b      	cmp	r3, #11
   18204:	d103      	bne.n	1820e <attcProcErrRsp+0x4a>
  {
    /* ignore handle in the error response; callback will use stored handle from request */
    p += 2;
   18206:	9b05      	ldr	r3, [sp, #20]
   18208:	3302      	adds	r3, #2
   1820a:	9305      	str	r3, [sp, #20]
   1820c:	e00f      	b.n	1822e <attcProcErrRsp+0x6a>
  }
  else
  {
    /* set handle from packet */
    BSTREAM_TO_UINT16(pEvt->handle, p);
   1820e:	9b05      	ldr	r3, [sp, #20]
   18210:	781b      	ldrb	r3, [r3, #0]
   18212:	b29a      	uxth	r2, r3
   18214:	9b05      	ldr	r3, [sp, #20]
   18216:	3301      	adds	r3, #1
   18218:	781b      	ldrb	r3, [r3, #0]
   1821a:	b29b      	uxth	r3, r3
   1821c:	021b      	lsls	r3, r3, #8
   1821e:	b29b      	uxth	r3, r3
   18220:	4413      	add	r3, r2
   18222:	b29a      	uxth	r2, r3
   18224:	9b00      	ldr	r3, [sp, #0]
   18226:	815a      	strh	r2, [r3, #10]
   18228:	9b05      	ldr	r3, [sp, #20]
   1822a:	3302      	adds	r3, #2
   1822c:	9305      	str	r3, [sp, #20]
  }

  /* set status from error code in packet, but verify it's not 'success' */
  BSTREAM_TO_UINT8(pEvt->hdr.status, p);
   1822e:	9b05      	ldr	r3, [sp, #20]
   18230:	1c5a      	adds	r2, r3, #1
   18232:	9205      	str	r2, [sp, #20]
   18234:	781a      	ldrb	r2, [r3, #0]
   18236:	9b00      	ldr	r3, [sp, #0]
   18238:	70da      	strb	r2, [r3, #3]
  if (pEvt->hdr.status == ATT_SUCCESS)
   1823a:	9b00      	ldr	r3, [sp, #0]
   1823c:	78db      	ldrb	r3, [r3, #3]
   1823e:	2b00      	cmp	r3, #0
   18240:	d102      	bne.n	18248 <attcProcErrRsp+0x84>
  {
    pEvt->hdr.status = ATT_ERR_UNDEFINED;
   18242:	9b00      	ldr	r3, [sp, #0]
   18244:	2275      	movs	r2, #117	; 0x75
   18246:	70da      	strb	r2, [r3, #3]
  }

  /* no parameters so clear length */
  pEvt->valueLen = 0;
   18248:	9b00      	ldr	r3, [sp, #0]
   1824a:	2200      	movs	r2, #0
   1824c:	811a      	strh	r2, [r3, #8]
}
   1824e:	bf00      	nop
   18250:	b006      	add	sp, #24
   18252:	4770      	bx	lr

00018254 <attcProcMtuRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcMtuRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   18254:	b530      	push	{r4, r5, lr}
   18256:	b087      	sub	sp, #28
   18258:	9003      	str	r0, [sp, #12]
   1825a:	9201      	str	r2, [sp, #4]
   1825c:	9300      	str	r3, [sp, #0]
   1825e:	460b      	mov	r3, r1
   18260:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t  mtu;

  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   18264:	9b01      	ldr	r3, [sp, #4]
   18266:	3309      	adds	r3, #9
   18268:	781b      	ldrb	r3, [r3, #0]
   1826a:	b29a      	uxth	r2, r3
   1826c:	9b01      	ldr	r3, [sp, #4]
   1826e:	330a      	adds	r3, #10
   18270:	781b      	ldrb	r3, [r3, #0]
   18272:	b29b      	uxth	r3, r3
   18274:	021b      	lsls	r3, r3, #8
   18276:	b29b      	uxth	r3, r3
   18278:	4413      	add	r3, r2
   1827a:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* verify */
  if (mtu < ATT_DEFAULT_MTU)
   1827e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   18282:	2b16      	cmp	r3, #22
   18284:	d802      	bhi.n	1828c <attcProcMtuRsp+0x38>
  {
    mtu = ATT_DEFAULT_MTU;
   18286:	2317      	movs	r3, #23
   18288:	f8ad 3016 	strh.w	r3, [sp, #22]
  }

  /* set mtu for the connection */
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   1828c:	9b03      	ldr	r3, [sp, #12]
   1828e:	681c      	ldr	r4, [r3, #0]
   18290:	4b0d      	ldr	r3, [pc, #52]	; (182c8 <attcProcMtuRsp+0x74>)
   18292:	681b      	ldr	r3, [r3, #0]
   18294:	889b      	ldrh	r3, [r3, #4]
   18296:	461d      	mov	r5, r3
   18298:	f7f6 f8f4 	bl	e484 <HciGetMaxRxAclLen>
   1829c:	4603      	mov	r3, r0
   1829e:	3b04      	subs	r3, #4
   182a0:	429d      	cmp	r5, r3
   182a2:	da03      	bge.n	182ac <attcProcMtuRsp+0x58>
   182a4:	4b08      	ldr	r3, [pc, #32]	; (182c8 <attcProcMtuRsp+0x74>)
   182a6:	681b      	ldr	r3, [r3, #0]
   182a8:	889b      	ldrh	r3, [r3, #4]
   182aa:	e004      	b.n	182b6 <attcProcMtuRsp+0x62>
   182ac:	f7f6 f8ea 	bl	e484 <HciGetMaxRxAclLen>
   182b0:	4603      	mov	r3, r0
   182b2:	3b04      	subs	r3, #4
   182b4:	b29b      	uxth	r3, r3
   182b6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   182ba:	461a      	mov	r2, r3
   182bc:	4620      	mov	r0, r4
   182be:	f003 ff03 	bl	1c0c8 <attSetMtu>
}
   182c2:	bf00      	nop
   182c4:	b007      	add	sp, #28
   182c6:	bd30      	pop	{r4, r5, pc}
   182c8:	10002bb0 	.word	0x10002bb0

000182cc <attcProcFindOrReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindOrReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   182cc:	b08a      	sub	sp, #40	; 0x28
   182ce:	9003      	str	r0, [sp, #12]
   182d0:	9201      	str	r2, [sp, #4]
   182d2:	9300      	str	r3, [sp, #0]
   182d4:	460b      	mov	r3, r1
   182d6:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint16_t  handle;
  uint16_t  nextHandle;
  uint16_t  prevHandle;
  uint8_t   paramLen;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   182da:	9b01      	ldr	r3, [sp, #4]
   182dc:	3309      	adds	r3, #9
   182de:	9309      	str	r3, [sp, #36]	; 0x24
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   182e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   182e4:	3308      	adds	r3, #8
   182e6:	9a01      	ldr	r2, [sp, #4]
   182e8:	4413      	add	r3, r2
   182ea:	9306      	str	r3, [sp, #24]

  /* parameter length depends on packet type */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   182ec:	9b03      	ldr	r3, [sp, #12]
   182ee:	7c9b      	ldrb	r3, [r3, #18]
   182f0:	2b02      	cmp	r3, #2
   182f2:	d10d      	bne.n	18310 <attcProcFindOrReadRsp+0x44>
  {
    /* length in find info response is coded by UUID */
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
   182f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   182f6:	1c5a      	adds	r2, r3, #1
   182f8:	9209      	str	r2, [sp, #36]	; 0x24
   182fa:	781b      	ldrb	r3, [r3, #0]
   182fc:	2b01      	cmp	r3, #1
   182fe:	d103      	bne.n	18308 <attcProcFindOrReadRsp+0x3c>
    {
      paramLen = ATT_16_UUID_LEN;
   18300:	2302      	movs	r3, #2
   18302:	f88d 301f 	strb.w	r3, [sp, #31]
   18306:	e016      	b.n	18336 <attcProcFindOrReadRsp+0x6a>
    }
    else
    {
      paramLen = ATT_128_UUID_LEN;
   18308:	2310      	movs	r3, #16
   1830a:	f88d 301f 	strb.w	r3, [sp, #31]
   1830e:	e012      	b.n	18336 <attcProcFindOrReadRsp+0x6a>
    }
  }
  else if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_TYPE)
   18310:	9b03      	ldr	r3, [sp, #12]
   18312:	7c9b      	ldrb	r3, [r3, #18]
   18314:	2b04      	cmp	r3, #4
   18316:	d107      	bne.n	18328 <attcProcFindOrReadRsp+0x5c>
  {
    /* length in read by type response is handle plus parameter length */
    paramLen = *p++ - sizeof(uint16_t);
   18318:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1831a:	1c5a      	adds	r2, r3, #1
   1831c:	9209      	str	r2, [sp, #36]	; 0x24
   1831e:	781b      	ldrb	r3, [r3, #0]
   18320:	3b02      	subs	r3, #2
   18322:	f88d 301f 	strb.w	r3, [sp, #31]
   18326:	e006      	b.n	18336 <attcProcFindOrReadRsp+0x6a>
  }
  else
  {
    /* length in read by group type response is two handles plus parameter length */
    paramLen = *p++ - (2 * sizeof(uint16_t));
   18328:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1832a:	1c5a      	adds	r2, r3, #1
   1832c:	9209      	str	r2, [sp, #36]	; 0x24
   1832e:	781b      	ldrb	r3, [r3, #0]
   18330:	3b04      	subs	r3, #4
   18332:	f88d 301f 	strb.w	r3, [sp, #31]
  }

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   18336:	9b03      	ldr	r3, [sp, #12]
   18338:	8bdb      	ldrh	r3, [r3, #30]
   1833a:	f8ad 3020 	strh.w	r3, [sp, #32]
  while (p < pEnd)
   1833e:	e073      	b.n	18428 <attcProcFindOrReadRsp+0x15c>
  {
    /* get and compare handle */
    BSTREAM_TO_UINT16(handle, p);
   18340:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18342:	781b      	ldrb	r3, [r3, #0]
   18344:	b29a      	uxth	r2, r3
   18346:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18348:	3301      	adds	r3, #1
   1834a:	781b      	ldrb	r3, [r3, #0]
   1834c:	b29b      	uxth	r3, r3
   1834e:	021b      	lsls	r3, r3, #8
   18350:	b29b      	uxth	r3, r3
   18352:	4413      	add	r3, r2
   18354:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   18358:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1835a:	3302      	adds	r3, #2
   1835c:	9309      	str	r3, [sp, #36]	; 0x24
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   1835e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   18362:	2b00      	cmp	r3, #0
   18364:	d00f      	beq.n	18386 <attcProcFindOrReadRsp+0xba>
   18366:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1836a:	2b00      	cmp	r3, #0
   1836c:	d00b      	beq.n	18386 <attcProcFindOrReadRsp+0xba>
   1836e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   18372:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   18376:	429a      	cmp	r2, r3
   18378:	d305      	bcc.n	18386 <attcProcFindOrReadRsp+0xba>
        handle > pCcb->outReqParams.h.endHandle)
   1837a:	9b03      	ldr	r3, [sp, #12]
   1837c:	8c1b      	ldrh	r3, [r3, #32]
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   1837e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   18382:	429a      	cmp	r2, r3
   18384:	d903      	bls.n	1838e <attcProcFindOrReadRsp+0xc2>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   18386:	9b00      	ldr	r3, [sp, #0]
   18388:	2273      	movs	r2, #115	; 0x73
   1838a:	70da      	strb	r2, [r3, #3]
      break;
   1838c:	e050      	b.n	18430 <attcProcFindOrReadRsp+0x164>
    }

    /* if read by group type response get second handle */
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_GROUP_TYPE)
   1838e:	9b03      	ldr	r3, [sp, #12]
   18390:	7c9b      	ldrb	r3, [r3, #18]
   18392:	2b08      	cmp	r3, #8
   18394:	d12c      	bne.n	183f0 <attcProcFindOrReadRsp+0x124>
    {
      prevHandle = handle;
   18396:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   1839a:	f8ad 3016 	strh.w	r3, [sp, #22]
      BSTREAM_TO_UINT16(handle, p);
   1839e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   183a0:	781b      	ldrb	r3, [r3, #0]
   183a2:	b29a      	uxth	r2, r3
   183a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   183a6:	3301      	adds	r3, #1
   183a8:	781b      	ldrb	r3, [r3, #0]
   183aa:	b29b      	uxth	r3, r3
   183ac:	021b      	lsls	r3, r3, #8
   183ae:	b29b      	uxth	r3, r3
   183b0:	4413      	add	r3, r2
   183b2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   183b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   183b8:	3302      	adds	r3, #2
   183ba:	9309      	str	r3, [sp, #36]	; 0x24
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
   183bc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   183c0:	2b00      	cmp	r3, #0
   183c2:	d011      	beq.n	183e8 <attcProcFindOrReadRsp+0x11c>
   183c4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   183c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   183cc:	429a      	cmp	r2, r3
   183ce:	d30b      	bcc.n	183e8 <attcProcFindOrReadRsp+0x11c>
   183d0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   183d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   183d8:	429a      	cmp	r2, r3
   183da:	d305      	bcc.n	183e8 <attcProcFindOrReadRsp+0x11c>
          handle > pCcb->outReqParams.h.endHandle)
   183dc:	9b03      	ldr	r3, [sp, #12]
   183de:	8c1b      	ldrh	r3, [r3, #32]
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
   183e0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   183e4:	429a      	cmp	r2, r3
   183e6:	d903      	bls.n	183f0 <attcProcFindOrReadRsp+0x124>
      {
        pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   183e8:	9b00      	ldr	r3, [sp, #0]
   183ea:	2273      	movs	r2, #115	; 0x73
   183ec:	70da      	strb	r2, [r3, #3]
        break;
   183ee:	e01f      	b.n	18430 <attcProcFindOrReadRsp+0x164>
      }
    }

    /* set next expected handle, with special case for max handle */
    if (handle == ATT_HANDLE_MAX)
   183f0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   183f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   183f8:	4293      	cmp	r3, r2
   183fa:	d103      	bne.n	18404 <attcProcFindOrReadRsp+0x138>
    {
      nextHandle = 0;
   183fc:	2300      	movs	r3, #0
   183fe:	f8ad 3020 	strh.w	r3, [sp, #32]
   18402:	e004      	b.n	1840e <attcProcFindOrReadRsp+0x142>
    }
    else
    {
      nextHandle = handle + 1;
   18404:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   18408:	3301      	adds	r3, #1
   1840a:	f8ad 3020 	strh.w	r3, [sp, #32]
    }

    /* skip over parameter */
    p += paramLen;
   1840e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18412:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18414:	4413      	add	r3, r2
   18416:	9309      	str	r3, [sp, #36]	; 0x24

    /* check for truncated response */
    if (p > pEnd)
   18418:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1841a:	9b06      	ldr	r3, [sp, #24]
   1841c:	429a      	cmp	r2, r3
   1841e:	d903      	bls.n	18428 <attcProcFindOrReadRsp+0x15c>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   18420:	9b00      	ldr	r3, [sp, #0]
   18422:	2273      	movs	r2, #115	; 0x73
   18424:	70da      	strb	r2, [r3, #3]
      break;
   18426:	e003      	b.n	18430 <attcProcFindOrReadRsp+0x164>
  while (p < pEnd)
   18428:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1842a:	9b06      	ldr	r3, [sp, #24]
   1842c:	429a      	cmp	r2, r3
   1842e:	d387      	bcc.n	18340 <attcProcFindOrReadRsp+0x74>
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   18430:	9b00      	ldr	r3, [sp, #0]
   18432:	78db      	ldrb	r3, [r3, #3]
   18434:	2b00      	cmp	r3, #0
   18436:	d11a      	bne.n	1846e <attcProcFindOrReadRsp+0x1a2>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   18438:	9b03      	ldr	r3, [sp, #12]
   1843a:	7cdb      	ldrb	r3, [r3, #19]
   1843c:	2b01      	cmp	r3, #1
   1843e:	d116      	bne.n	1846e <attcProcFindOrReadRsp+0x1a2>
    {
      /* if all handles read */
      if (nextHandle == 0 || nextHandle == (pCcb->outReqParams.h.endHandle + 1))
   18440:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   18444:	2b00      	cmp	r3, #0
   18446:	d006      	beq.n	18456 <attcProcFindOrReadRsp+0x18a>
   18448:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1844c:	9b03      	ldr	r3, [sp, #12]
   1844e:	8c1b      	ldrh	r3, [r3, #32]
   18450:	3301      	adds	r3, #1
   18452:	429a      	cmp	r2, r3
   18454:	d103      	bne.n	1845e <attcProcFindOrReadRsp+0x192>
      {
        /* we're done */
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   18456:	9b03      	ldr	r3, [sp, #12]
   18458:	2200      	movs	r2, #0
   1845a:	74da      	strb	r2, [r3, #19]
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   1845c:	e007      	b.n	1846e <attcProcFindOrReadRsp+0x1a2>
        pCcb->outReqParams.h.startHandle = nextHandle;
   1845e:	9b03      	ldr	r3, [sp, #12]
   18460:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   18464:	83da      	strh	r2, [r3, #30]
        pCcb->outReq.handle = nextHandle;
   18466:	9b03      	ldr	r3, [sp, #12]
   18468:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1846c:	831a      	strh	r2, [r3, #24]
}
   1846e:	bf00      	nop
   18470:	b00a      	add	sp, #40	; 0x28
   18472:	4770      	bx	lr

00018474 <attcProcReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   18474:	b084      	sub	sp, #16
   18476:	9003      	str	r0, [sp, #12]
   18478:	9201      	str	r2, [sp, #4]
   1847a:	9300      	str	r3, [sp, #0]
   1847c:	460b      	mov	r3, r1
   1847e:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* nothing to process */
}
   18482:	bf00      	nop
   18484:	b004      	add	sp, #16
   18486:	4770      	bx	lr

00018488 <attcProcWriteRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   18488:	b084      	sub	sp, #16
   1848a:	9003      	str	r0, [sp, #12]
   1848c:	9201      	str	r2, [sp, #4]
   1848e:	9300      	str	r3, [sp, #0]
   18490:	460b      	mov	r3, r1
   18492:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* no parameters so clear length */
  pEvt->valueLen = 0;
   18496:	9b00      	ldr	r3, [sp, #0]
   18498:	2200      	movs	r2, #0
   1849a:	811a      	strh	r2, [r3, #8]
}
   1849c:	bf00      	nop
   1849e:	b004      	add	sp, #16
   184a0:	4770      	bx	lr
	...

000184a4 <attcProcRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   184a4:	b510      	push	{r4, lr}
   184a6:	b088      	sub	sp, #32
   184a8:	9003      	str	r0, [sp, #12]
   184aa:	460b      	mov	r3, r1
   184ac:	9201      	str	r2, [sp, #4]
   184ae:	f8ad 300a 	strh.w	r3, [sp, #10]
  attEvt_t    evt;

  /* if no request in progress ignore response */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_NONE)
   184b2:	9b03      	ldr	r3, [sp, #12]
   184b4:	7c9b      	ldrb	r3, [r3, #18]
   184b6:	2b00      	cmp	r3, #0
   184b8:	d071      	beq.n	1859e <attcProcRsp+0xfa>
  {
    return;
  }

  /* get method */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   184ba:	9b01      	ldr	r3, [sp, #4]
   184bc:	3308      	adds	r3, #8
   184be:	781b      	ldrb	r3, [r3, #0]
   184c0:	105b      	asrs	r3, r3, #1
   184c2:	b2db      	uxtb	r3, r3
   184c4:	f88d 3012 	strb.w	r3, [sp, #18]

  /* if response method is not error and does not match stored method ignore response */
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
   184c8:	f89d 3012 	ldrb.w	r3, [sp, #18]
   184cc:	2b00      	cmp	r3, #0
   184ce:	d005      	beq.n	184dc <attcProcRsp+0x38>
   184d0:	f89d 2012 	ldrb.w	r2, [sp, #18]
   184d4:	9b03      	ldr	r3, [sp, #12]
   184d6:	7c9b      	ldrb	r3, [r3, #18]
   184d8:	429a      	cmp	r2, r3
   184da:	d162      	bne.n	185a2 <attcProcRsp+0xfe>
  {
    return;
  }

  /* stop request timer */
  WsfTimerStop(&pCcb->outReqTimer);
   184dc:	9b03      	ldr	r3, [sp, #12]
   184de:	3324      	adds	r3, #36	; 0x24
   184e0:	4618      	mov	r0, r3
   184e2:	f007 fdc7 	bl	20074 <WsfTimerStop>

  /* initialize event structure then process response */
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   184e6:	9b01      	ldr	r3, [sp, #4]
   184e8:	3309      	adds	r3, #9
   184ea:	9305      	str	r3, [sp, #20]
  evt.valueLen = len - ATT_HDR_LEN;
   184ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   184f0:	3b01      	subs	r3, #1
   184f2:	b29b      	uxth	r3, r3
   184f4:	f8ad 3018 	strh.w	r3, [sp, #24]
  evt.handle = pCcb->outReq.handle;
   184f8:	9b03      	ldr	r3, [sp, #12]
   184fa:	8b1b      	ldrh	r3, [r3, #24]
   184fc:	f8ad 301a 	strh.w	r3, [sp, #26]
  evt.hdr.status = ATT_SUCCESS;
   18500:	2300      	movs	r3, #0
   18502:	f88d 3013 	strb.w	r3, [sp, #19]
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   18506:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1850a:	461a      	mov	r2, r3
   1850c:	4b26      	ldr	r3, [pc, #152]	; (185a8 <attcProcRsp+0x104>)
   1850e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   18512:	ab04      	add	r3, sp, #16
   18514:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   18518:	9a01      	ldr	r2, [sp, #4]
   1851a:	9803      	ldr	r0, [sp, #12]
   1851c:	47a0      	blx	r4

  /* if not continuing or status is not success */
  if ((pCcb->outReq.hdr.status == ATTC_NOT_CONTINUING) || (evt.hdr.status != ATT_SUCCESS))
   1851e:	9b03      	ldr	r3, [sp, #12]
   18520:	7cdb      	ldrb	r3, [r3, #19]
   18522:	2b00      	cmp	r3, #0
   18524:	d003      	beq.n	1852e <attcProcRsp+0x8a>
   18526:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1852a:	2b00      	cmp	r3, #0
   1852c:	d007      	beq.n	1853e <attcProcRsp+0x9a>
  {
    /* we're not sending another request so clear the out req */
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   1852e:	9b03      	ldr	r3, [sp, #12]
   18530:	2200      	movs	r2, #0
   18532:	749a      	strb	r2, [r3, #18]
    attcFreePkt(&pCcb->outReq);
   18534:	9b03      	ldr	r3, [sp, #12]
   18536:	3310      	adds	r3, #16
   18538:	4618      	mov	r0, r3
   1853a:	f7ff fdb1 	bl	180a0 <attcFreePkt>
  }

  /* call callback (if not mtu rsp) */
  if ((evt.hdr.event != ATT_METHOD_MTU) && attCb.cback)
   1853e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   18542:	2b01      	cmp	r3, #1
   18544:	d010      	beq.n	18568 <attcProcRsp+0xc4>
   18546:	4b19      	ldr	r3, [pc, #100]	; (185ac <attcProcRsp+0x108>)
   18548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1854a:	2b00      	cmp	r3, #0
   1854c:	d00c      	beq.n	18568 <attcProcRsp+0xc4>
  {
    /* set additional parameters and call callback */
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
   1854e:	9b03      	ldr	r3, [sp, #12]
   18550:	7cdb      	ldrb	r3, [r3, #19]
   18552:	f88d 301c 	strb.w	r3, [sp, #28]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
   18556:	9b03      	ldr	r3, [sp, #12]
   18558:	8a1b      	ldrh	r3, [r3, #16]
   1855a:	f8ad 3010 	strh.w	r3, [sp, #16]
    (*attCb.cback)(&evt);
   1855e:	4b13      	ldr	r3, [pc, #76]	; (185ac <attcProcRsp+0x108>)
   18560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   18562:	aa04      	add	r2, sp, #16
   18564:	4610      	mov	r0, r2
   18566:	4798      	blx	r3
  }

  /* if no flow control */
  if (!pCcb->flowDisabled)
   18568:	9b03      	ldr	r3, [sp, #12]
   1856a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   1856e:	2b00      	cmp	r3, #0
   18570:	d118      	bne.n	185a4 <attcProcRsp+0x100>
  {
    /* if out req ready */
    if (pCcb->outReq.pPkt != NULL)
   18572:	9b03      	ldr	r3, [sp, #12]
   18574:	695b      	ldr	r3, [r3, #20]
   18576:	2b00      	cmp	r3, #0
   18578:	d003      	beq.n	18582 <attcProcRsp+0xde>
    {
      /* build and send request */
      attcSendReq(pCcb);
   1857a:	9803      	ldr	r0, [sp, #12]
   1857c:	f7ff fb98 	bl	17cb0 <attcSendReq>
   18580:	e010      	b.n	185a4 <attcProcRsp+0x100>
    }
    /* else if api is on deck */
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   18582:	9b03      	ldr	r3, [sp, #12]
   18584:	799b      	ldrb	r3, [r3, #6]
   18586:	2b00      	cmp	r3, #0
   18588:	d00c      	beq.n	185a4 <attcProcRsp+0x100>
    {
      /* set up and send request */
      attcSetupReq(pCcb, &pCcb->onDeck);
   1858a:	9b03      	ldr	r3, [sp, #12]
   1858c:	3304      	adds	r3, #4
   1858e:	4619      	mov	r1, r3
   18590:	9803      	ldr	r0, [sp, #12]
   18592:	f7ff fb9f 	bl	17cd4 <attcSetupReq>

      /* clear on deck */
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
   18596:	9b03      	ldr	r3, [sp, #12]
   18598:	2200      	movs	r2, #0
   1859a:	719a      	strb	r2, [r3, #6]
   1859c:	e002      	b.n	185a4 <attcProcRsp+0x100>
    return;
   1859e:	bf00      	nop
   185a0:	e000      	b.n	185a4 <attcProcRsp+0x100>
    return;
   185a2:	bf00      	nop
    }
  }
}
   185a4:	b008      	add	sp, #32
   185a6:	bd10      	pop	{r4, pc}
   185a8:	0002863c 	.word	0x0002863c
   185ac:	100050c0 	.word	0x100050c0

000185b0 <attcProcInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcInd(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   185b0:	b500      	push	{lr}
   185b2:	b08b      	sub	sp, #44	; 0x2c
   185b4:	9003      	str	r0, [sp, #12]
   185b6:	460b      	mov	r3, r1
   185b8:	9201      	str	r2, [sp, #4]
   185ba:	f8ad 300a 	strh.w	r3, [sp, #10]
  attEvt_t    evt;
  uint8_t     *p;
  uint8_t     *pPkt;

  p = pPacket + L2C_PAYLOAD_START;
   185be:	9b01      	ldr	r3, [sp, #4]
   185c0:	3308      	adds	r3, #8
   185c2:	9309      	str	r3, [sp, #36]	; 0x24

  /* parse packet and set callback event struct */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
   185c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   185c6:	1c5a      	adds	r2, r3, #1
   185c8:	9209      	str	r2, [sp, #36]	; 0x24
   185ca:	781b      	ldrb	r3, [r3, #0]
   185cc:	105b      	asrs	r3, r3, #1
   185ce:	b2db      	uxtb	r3, r3
   185d0:	f88d 3012 	strb.w	r3, [sp, #18]
  BSTREAM_TO_UINT16(evt.handle, p);
   185d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   185d6:	781b      	ldrb	r3, [r3, #0]
   185d8:	b29a      	uxth	r2, r3
   185da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   185dc:	3301      	adds	r3, #1
   185de:	781b      	ldrb	r3, [r3, #0]
   185e0:	b29b      	uxth	r3, r3
   185e2:	021b      	lsls	r3, r3, #8
   185e4:	b29b      	uxth	r3, r3
   185e6:	4413      	add	r3, r2
   185e8:	b29b      	uxth	r3, r3
   185ea:	f8ad 301a 	strh.w	r3, [sp, #26]
   185ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   185f0:	3302      	adds	r3, #2
   185f2:	9309      	str	r3, [sp, #36]	; 0x24
  evt.pValue = p;
   185f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   185f6:	9305      	str	r3, [sp, #20]
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
   185f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   185fc:	3b03      	subs	r3, #3
   185fe:	b29b      	uxth	r3, r3
   18600:	f8ad 3018 	strh.w	r3, [sp, #24]
  evt.hdr.param = pCcb->pMainCcb->connId;
   18604:	9b03      	ldr	r3, [sp, #12]
   18606:	681b      	ldr	r3, [r3, #0]
   18608:	7f1b      	ldrb	r3, [r3, #28]
   1860a:	b29b      	uxth	r3, r3
   1860c:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.hdr.status = ATT_SUCCESS;
   18610:	2300      	movs	r3, #0
   18612:	f88d 3013 	strb.w	r3, [sp, #19]
  evt.continuing = FALSE;
   18616:	2300      	movs	r3, #0
   18618:	f88d 301c 	strb.w	r3, [sp, #28]

  /* verify handle and call callback */
  if ((evt.handle != 0) && attCb.cback)
   1861c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   18620:	2b00      	cmp	r3, #0
   18622:	d008      	beq.n	18636 <attcProcInd+0x86>
   18624:	4b19      	ldr	r3, [pc, #100]	; (1868c <attcProcInd+0xdc>)
   18626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   18628:	2b00      	cmp	r3, #0
   1862a:	d004      	beq.n	18636 <attcProcInd+0x86>
  {
    (*attCb.cback)(&evt);
   1862c:	4b17      	ldr	r3, [pc, #92]	; (1868c <attcProcInd+0xdc>)
   1862e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   18630:	aa04      	add	r2, sp, #16
   18632:	4610      	mov	r0, r2
   18634:	4798      	blx	r3
  }

  /* if indication send confirm */
  if (attcCb.autoCnf && (evt.hdr.event == ATT_METHOD_VALUE_IND))
   18636:	4b16      	ldr	r3, [pc, #88]	; (18690 <attcProcInd+0xe0>)
   18638:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
   1863c:	2b00      	cmp	r3, #0
   1863e:	d01c      	beq.n	1867a <attcProcInd+0xca>
   18640:	f89d 3012 	ldrb.w	r3, [sp, #18]
   18644:	2b0e      	cmp	r3, #14
   18646:	d118      	bne.n	1867a <attcProcInd+0xca>
  {
    if (!pCcb->flowDisabled)
   18648:	9b03      	ldr	r3, [sp, #12]
   1864a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   1864e:	2b00      	cmp	r3, #0
   18650:	d118      	bne.n	18684 <attcProcInd+0xd4>
    {
      if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   18652:	2009      	movs	r0, #9
   18654:	f003 fd9e 	bl	1c194 <attMsgAlloc>
   18658:	9008      	str	r0, [sp, #32]
   1865a:	9b08      	ldr	r3, [sp, #32]
   1865c:	2b00      	cmp	r3, #0
   1865e:	d011      	beq.n	18684 <attcProcInd+0xd4>
      {
        *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   18660:	9b08      	ldr	r3, [sp, #32]
   18662:	3308      	adds	r3, #8
   18664:	221e      	movs	r2, #30
   18666:	701a      	strb	r2, [r3, #0]
        L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   18668:	9b03      	ldr	r3, [sp, #12]
   1866a:	681b      	ldr	r3, [r3, #0]
   1866c:	8b19      	ldrh	r1, [r3, #24]
   1866e:	9b08      	ldr	r3, [sp, #32]
   18670:	2201      	movs	r2, #1
   18672:	2004      	movs	r0, #4
   18674:	f004 fd68 	bl	1d148 <L2cDataReq>
   18678:	e005      	b.n	18686 <attcProcInd+0xd6>

    return;
  }

  /* mark confirm as pending; will be sent when flow enabled or application sends it. */
  pCcb->cnfPending = TRUE;
   1867a:	9b03      	ldr	r3, [sp, #12]
   1867c:	2201      	movs	r2, #1
   1867e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   18682:	e000      	b.n	18686 <attcProcInd+0xd6>
    return;
   18684:	bf00      	nop
}
   18686:	b00b      	add	sp, #44	; 0x2c
   18688:	f85d fb04 	ldr.w	pc, [sp], #4
   1868c:	100050c0 	.word	0x100050c0
   18690:	10004f40 	.word	0x10004f40

00018694 <attcSendMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSendMsg(dmConnId_t connId, uint16_t handle, uint8_t msgId, attcPktParam_t *pPkt, bool_t continuing)
{
   18694:	b500      	push	{lr}
   18696:	b087      	sub	sp, #28
   18698:	9300      	str	r3, [sp, #0]
   1869a:	4603      	mov	r3, r0
   1869c:	f88d 3007 	strb.w	r3, [sp, #7]
   186a0:	460b      	mov	r3, r1
   186a2:	f8ad 3004 	strh.w	r3, [sp, #4]
   186a6:	4613      	mov	r3, r2
   186a8:	f88d 3006 	strb.w	r3, [sp, #6]
  attcCcb_t   *pCcb;
  uint16_t    mtu;
  bool_t      transTimedOut;

  WsfTaskLock();
   186ac:	f007 f9ae 	bl	1fa0c <WsfTaskLock>

  /* get CCB and verify connection still in use */
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   186b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   186b4:	4618      	mov	r0, r3
   186b6:	f7ff fcb3 	bl	18020 <attcCcbByConnId>
   186ba:	9003      	str	r0, [sp, #12]
   186bc:	9b03      	ldr	r3, [sp, #12]
   186be:	2b00      	cmp	r3, #0
   186c0:	d011      	beq.n	186e6 <attcSendMsg+0x52>
  {
    /* get MTU size */
    mtu = pCcb->pMainCcb->mtu;
   186c2:	9b03      	ldr	r3, [sp, #12]
   186c4:	681b      	ldr	r3, [r3, #0]
   186c6:	8b5b      	ldrh	r3, [r3, #26]
   186c8:	f8ad 3016 	strh.w	r3, [sp, #22]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   186cc:	9b03      	ldr	r3, [sp, #12]
   186ce:	681b      	ldr	r3, [r3, #0]
   186d0:	7f5b      	ldrb	r3, [r3, #29]
   186d2:	f003 0304 	and.w	r3, r3, #4
   186d6:	2b00      	cmp	r3, #0
   186d8:	bf14      	ite	ne
   186da:	2301      	movne	r3, #1
   186dc:	2300      	moveq	r3, #0
   186de:	b2db      	uxtb	r3, r3
   186e0:	f88d 3015 	strb.w	r3, [sp, #21]
   186e4:	e005      	b.n	186f2 <attcSendMsg+0x5e>
  }
  /* else connection not in use */
  else
  {
    /* MTU size unknown */
    mtu = 0;
   186e6:	2300      	movs	r3, #0
   186e8:	f8ad 3016 	strh.w	r3, [sp, #22]
    transTimedOut = FALSE;
   186ec:	2300      	movs	r3, #0
   186ee:	f88d 3015 	strb.w	r3, [sp, #21]
  }

  WsfTaskUnlock();
   186f2:	f007 f990 	bl	1fa16 <WsfTaskUnlock>

  /* if MTU size known for connection */
  if (mtu > 0)
   186f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   186fa:	2b00      	cmp	r3, #0
   186fc:	d057      	beq.n	187ae <attcSendMsg+0x11a>
  {
    /* if no transaction's timed out */
    if (!transTimedOut)
   186fe:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18702:	2b00      	cmp	r3, #0
   18704:	d14a      	bne.n	1879c <attcSendMsg+0x108>
    {
      uint16_t dataLen = 0;
   18706:	2300      	movs	r3, #0
   18708:	f8ad 3012 	strh.w	r3, [sp, #18]

      /* if packet is not null then find out its length */
      if (pPkt != NULL)
   1870c:	9b00      	ldr	r3, [sp, #0]
   1870e:	2b00      	cmp	r3, #0
   18710:	d011      	beq.n	18736 <attcSendMsg+0xa2>
      {
        /* if not prepare write request */
        if (msgId != ATTC_MSG_API_PREP_WRITE)
   18712:	f89d 3006 	ldrb.w	r3, [sp, #6]
   18716:	2b0b      	cmp	r3, #11
   18718:	d004      	beq.n	18724 <attcSendMsg+0x90>
        {
          dataLen = pPkt->len;
   1871a:	9b00      	ldr	r3, [sp, #0]
   1871c:	881b      	ldrh	r3, [r3, #0]
   1871e:	f8ad 3012 	strh.w	r3, [sp, #18]
   18722:	e008      	b.n	18736 <attcSendMsg+0xa2>
        }
        /* else prepare write request */
        else
        {
          /* if not continuing */
          if (!continuing)
   18724:	f89d 3020 	ldrb.w	r3, [sp, #32]
   18728:	2b00      	cmp	r3, #0
   1872a:	d104      	bne.n	18736 <attcSendMsg+0xa2>
          {
            /* single prepare write request */
            dataLen = ATT_PREP_WRITE_REQ_LEN + pPkt->w.len;
   1872c:	9b00      	ldr	r3, [sp, #0]
   1872e:	881b      	ldrh	r3, [r3, #0]
   18730:	3305      	adds	r3, #5
   18732:	f8ad 3012 	strh.w	r3, [sp, #18]
          /* else will be sent as multiple prepare write requests */
        }
      }

      /* if packet length is less than or equal to negotiated MTU */
      if (dataLen <= mtu)
   18736:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1873a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1873e:	429a      	cmp	r2, r3
   18740:	d822      	bhi.n	18788 <attcSendMsg+0xf4>
      {
        attcApiMsg_t *pMsg;

        /* allocate message buffer */
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   18742:	200c      	movs	r0, #12
   18744:	f007 f8d6 	bl	1f8f4 <WsfMsgAlloc>
   18748:	9002      	str	r0, [sp, #8]
   1874a:	9b02      	ldr	r3, [sp, #8]
   1874c:	2b00      	cmp	r3, #0
   1874e:	d02e      	beq.n	187ae <attcSendMsg+0x11a>
        {
          /* set parameters */
          pMsg->hdr.param = connId;
   18750:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18754:	b29a      	uxth	r2, r3
   18756:	9b02      	ldr	r3, [sp, #8]
   18758:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = continuing;
   1875a:	9b02      	ldr	r3, [sp, #8]
   1875c:	f89d 2020 	ldrb.w	r2, [sp, #32]
   18760:	70da      	strb	r2, [r3, #3]
          pMsg->hdr.event = msgId;
   18762:	9b02      	ldr	r3, [sp, #8]
   18764:	f89d 2006 	ldrb.w	r2, [sp, #6]
   18768:	709a      	strb	r2, [r3, #2]
          pMsg->pPkt = pPkt;
   1876a:	9b02      	ldr	r3, [sp, #8]
   1876c:	9a00      	ldr	r2, [sp, #0]
   1876e:	605a      	str	r2, [r3, #4]
          pMsg->handle = handle;
   18770:	9b02      	ldr	r3, [sp, #8]
   18772:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   18776:	811a      	strh	r2, [r3, #8]

          /* send message */
          WsfMsgSend(attCb.handlerId, pMsg);
   18778:	4b11      	ldr	r3, [pc, #68]	; (187c0 <attcSendMsg+0x12c>)
   1877a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   1877e:	9902      	ldr	r1, [sp, #8]
   18780:	4618      	mov	r0, r3
   18782:	f007 f8db 	bl	1f93c <WsfMsgSend>
          return;
   18786:	e018      	b.n	187ba <attcSendMsg+0x126>
      }
      /* else packet length exceeds MTU size */
      else
      {
        /* call callback with failure status */
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   18788:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1878c:	f89d 1006 	ldrb.w	r1, [sp, #6]
   18790:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18794:	2377      	movs	r3, #119	; 0x77
   18796:	f7ff fc96 	bl	180c6 <attcExecCallback>
   1879a:	e008      	b.n	187ae <attcSendMsg+0x11a>
    }
    else
    /* transaction's timed out */
    {
      /* call callback with failure status */
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   1879c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   187a0:	f89d 1006 	ldrb.w	r1, [sp, #6]
   187a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   187a8:	2371      	movs	r3, #113	; 0x71
   187aa:	f7ff fc8c 	bl	180c6 <attcExecCallback>
    }
  }

  /* alloc failed, transaction's timed out or packet length exceeded MTU size; free packet buffer */
  if (pPkt != NULL)
   187ae:	9b00      	ldr	r3, [sp, #0]
   187b0:	2b00      	cmp	r3, #0
   187b2:	d002      	beq.n	187ba <attcSendMsg+0x126>
  {
    WsfMsgFree(pPkt);
   187b4:	9800      	ldr	r0, [sp, #0]
   187b6:	f007 f8b5 	bl	1f924 <WsfMsgFree>
  }
}
   187ba:	b007      	add	sp, #28
   187bc:	f85d fb04 	ldr.w	pc, [sp], #4
   187c0:	100050c0 	.word	0x100050c0

000187c4 <AttcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcMtuReq(dmConnId_t connId, uint16_t mtu)
{
   187c4:	b500      	push	{lr}
   187c6:	b087      	sub	sp, #28
   187c8:	4603      	mov	r3, r0
   187ca:	460a      	mov	r2, r1
   187cc:	f88d 300f 	strb.w	r3, [sp, #15]
   187d0:	4613      	mov	r3, r2
   187d2:	f8ad 300c 	strh.w	r3, [sp, #12]
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
   187d6:	200b      	movs	r0, #11
   187d8:	f003 fcdc 	bl	1c194 <attMsgAlloc>
   187dc:	9005      	str	r0, [sp, #20]
   187de:	9b05      	ldr	r3, [sp, #20]
   187e0:	2b00      	cmp	r3, #0
   187e2:	d023      	beq.n	1882c <AttcMtuReq+0x68>
  {
    /* set length */
    pPkt->len = ATT_MTU_REQ_LEN;
   187e4:	9b05      	ldr	r3, [sp, #20]
   187e6:	2203      	movs	r2, #3
   187e8:	801a      	strh	r2, [r3, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
   187ea:	9b05      	ldr	r3, [sp, #20]
   187ec:	3308      	adds	r3, #8
   187ee:	9304      	str	r3, [sp, #16]
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_REQ);
   187f0:	9b04      	ldr	r3, [sp, #16]
   187f2:	1c5a      	adds	r2, r3, #1
   187f4:	9204      	str	r2, [sp, #16]
   187f6:	2202      	movs	r2, #2
   187f8:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, mtu);
   187fa:	9b04      	ldr	r3, [sp, #16]
   187fc:	1c5a      	adds	r2, r3, #1
   187fe:	9204      	str	r2, [sp, #16]
   18800:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   18804:	b2d2      	uxtb	r2, r2
   18806:	701a      	strb	r2, [r3, #0]
   18808:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1880c:	0a1b      	lsrs	r3, r3, #8
   1880e:	b299      	uxth	r1, r3
   18810:	9b04      	ldr	r3, [sp, #16]
   18812:	1c5a      	adds	r2, r3, #1
   18814:	9204      	str	r2, [sp, #16]
   18816:	b2ca      	uxtb	r2, r1
   18818:	701a      	strb	r2, [r3, #0]

    /* send message */
    attcSendMsg(connId, 0, ATTC_MSG_API_MTU, pPkt, FALSE);
   1881a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1881e:	2300      	movs	r3, #0
   18820:	9300      	str	r3, [sp, #0]
   18822:	9b05      	ldr	r3, [sp, #20]
   18824:	2201      	movs	r2, #1
   18826:	2100      	movs	r1, #0
   18828:	f7ff ff34 	bl	18694 <attcSendMsg>
  }
}
   1882c:	bf00      	nop
   1882e:	b007      	add	sp, #28
   18830:	f85d fb04 	ldr.w	pc, [sp], #4

00018834 <AttcIndConfirm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcIndConfirm(dmConnId_t connId)
{
   18834:	b500      	push	{lr}
   18836:	b085      	sub	sp, #20
   18838:	4603      	mov	r3, r0
   1883a:	f88d 3007 	strb.w	r3, [sp, #7]
  attcCcb_t   *pCcb;
  uint8_t     *pPkt;

  pCcb = attcCcbByHandle(connId - 1);
   1883e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18842:	b29b      	uxth	r3, r3
   18844:	3b01      	subs	r3, #1
   18846:	b29b      	uxth	r3, r3
   18848:	4618      	mov	r0, r3
   1884a:	f7ff fc07 	bl	1805c <attcCcbByHandle>
   1884e:	9003      	str	r0, [sp, #12]

  /* If confirmation is pending */
  if (pCcb && pCcb->cnfPending && !pCcb->flowDisabled)
   18850:	9b03      	ldr	r3, [sp, #12]
   18852:	2b00      	cmp	r3, #0
   18854:	d020      	beq.n	18898 <AttcIndConfirm+0x64>
   18856:	9b03      	ldr	r3, [sp, #12]
   18858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
   1885c:	2b00      	cmp	r3, #0
   1885e:	d01b      	beq.n	18898 <AttcIndConfirm+0x64>
   18860:	9b03      	ldr	r3, [sp, #12]
   18862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   18866:	2b00      	cmp	r3, #0
   18868:	d116      	bne.n	18898 <AttcIndConfirm+0x64>
  {
    if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1886a:	2009      	movs	r0, #9
   1886c:	f003 fc92 	bl	1c194 <attMsgAlloc>
   18870:	9002      	str	r0, [sp, #8]
   18872:	9b02      	ldr	r3, [sp, #8]
   18874:	2b00      	cmp	r3, #0
   18876:	d00f      	beq.n	18898 <AttcIndConfirm+0x64>
    {
      pCcb->cnfPending = FALSE;
   18878:	9b03      	ldr	r3, [sp, #12]
   1887a:	2200      	movs	r2, #0
   1887c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   18880:	9b02      	ldr	r3, [sp, #8]
   18882:	3308      	adds	r3, #8
   18884:	221e      	movs	r2, #30
   18886:	701a      	strb	r2, [r3, #0]
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   18888:	9b03      	ldr	r3, [sp, #12]
   1888a:	681b      	ldr	r3, [r3, #0]
   1888c:	8b19      	ldrh	r1, [r3, #24]
   1888e:	9b02      	ldr	r3, [sp, #8]
   18890:	2201      	movs	r2, #1
   18892:	2004      	movs	r0, #4
   18894:	f004 fc58 	bl	1d148 <L2cDataReq>
    }
  }
}
   18898:	bf00      	nop
   1889a:	b005      	add	sp, #20
   1889c:	f85d fb04 	ldr.w	pc, [sp], #4

000188a0 <attcProcFindByTypeRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindByTypeRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   188a0:	b088      	sub	sp, #32
   188a2:	9003      	str	r0, [sp, #12]
   188a4:	9201      	str	r2, [sp, #4]
   188a6:	9300      	str	r3, [sp, #0]
   188a8:	460b      	mov	r3, r1
   188aa:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t   *pEnd;
  uint16_t  startHandle;
  uint16_t  endHandle;
  uint16_t  nextHandle;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   188ae:	9b01      	ldr	r3, [sp, #4]
   188b0:	3309      	adds	r3, #9
   188b2:	9307      	str	r3, [sp, #28]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   188b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   188b8:	3308      	adds	r3, #8
   188ba:	9a01      	ldr	r2, [sp, #4]
   188bc:	4413      	add	r3, r2
   188be:	9305      	str	r3, [sp, #20]

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   188c0:	9b03      	ldr	r3, [sp, #12]
   188c2:	8bdb      	ldrh	r3, [r3, #30]
   188c4:	f8ad 301a 	strh.w	r3, [sp, #26]
  while (p < pEnd)
   188c8:	e04e      	b.n	18968 <attcProcFindByTypeRsp+0xc8>
  {
    /* get handle pair */
    BSTREAM_TO_UINT16(startHandle, p);
   188ca:	9b07      	ldr	r3, [sp, #28]
   188cc:	781b      	ldrb	r3, [r3, #0]
   188ce:	b29a      	uxth	r2, r3
   188d0:	9b07      	ldr	r3, [sp, #28]
   188d2:	3301      	adds	r3, #1
   188d4:	781b      	ldrb	r3, [r3, #0]
   188d6:	b29b      	uxth	r3, r3
   188d8:	021b      	lsls	r3, r3, #8
   188da:	b29b      	uxth	r3, r3
   188dc:	4413      	add	r3, r2
   188de:	f8ad 3012 	strh.w	r3, [sp, #18]
   188e2:	9b07      	ldr	r3, [sp, #28]
   188e4:	3302      	adds	r3, #2
   188e6:	9307      	str	r3, [sp, #28]
    BSTREAM_TO_UINT16(endHandle, p);
   188e8:	9b07      	ldr	r3, [sp, #28]
   188ea:	781b      	ldrb	r3, [r3, #0]
   188ec:	b29a      	uxth	r2, r3
   188ee:	9b07      	ldr	r3, [sp, #28]
   188f0:	3301      	adds	r3, #1
   188f2:	781b      	ldrb	r3, [r3, #0]
   188f4:	b29b      	uxth	r3, r3
   188f6:	021b      	lsls	r3, r3, #8
   188f8:	b29b      	uxth	r3, r3
   188fa:	4413      	add	r3, r2
   188fc:	f8ad 3010 	strh.w	r3, [sp, #16]
   18900:	9b07      	ldr	r3, [sp, #28]
   18902:	3302      	adds	r3, #2
   18904:	9307      	str	r3, [sp, #28]
     *  not greater than end handle of handle pair
     *  not less than than start handle of request or end handle of previous handle pair
     *  not greater than end handle of request
     * and no additional handle pairs following end handle = 0xFFFF
     */
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   18906:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1890a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1890e:	429a      	cmp	r2, r3
   18910:	d80f      	bhi.n	18932 <attcProcFindByTypeRsp+0x92>
   18912:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   18916:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1891a:	429a      	cmp	r2, r3
   1891c:	d309      	bcc.n	18932 <attcProcFindByTypeRsp+0x92>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
   1891e:	9b03      	ldr	r3, [sp, #12]
   18920:	8c1b      	ldrh	r3, [r3, #32]
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   18922:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   18926:	429a      	cmp	r2, r3
   18928:	d803      	bhi.n	18932 <attcProcFindByTypeRsp+0x92>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
   1892a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1892e:	2b00      	cmp	r3, #0
   18930:	d103      	bne.n	1893a <attcProcFindByTypeRsp+0x9a>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   18932:	9b00      	ldr	r3, [sp, #0]
   18934:	2273      	movs	r2, #115	; 0x73
   18936:	70da      	strb	r2, [r3, #3]
      break;
   18938:	e01a      	b.n	18970 <attcProcFindByTypeRsp+0xd0>
    }

    /* set next expected handle, with special case for max handle */
    if (endHandle == ATT_HANDLE_MAX)
   1893a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1893e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18942:	4293      	cmp	r3, r2
   18944:	d103      	bne.n	1894e <attcProcFindByTypeRsp+0xae>
    {
      nextHandle = 0;
   18946:	2300      	movs	r3, #0
   18948:	f8ad 301a 	strh.w	r3, [sp, #26]
   1894c:	e004      	b.n	18958 <attcProcFindByTypeRsp+0xb8>
    }
    else
    {
      nextHandle = endHandle + 1;
   1894e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18952:	3301      	adds	r3, #1
   18954:	f8ad 301a 	strh.w	r3, [sp, #26]
    }

    /* check for truncated response */
    if (p > pEnd)
   18958:	9a07      	ldr	r2, [sp, #28]
   1895a:	9b05      	ldr	r3, [sp, #20]
   1895c:	429a      	cmp	r2, r3
   1895e:	d903      	bls.n	18968 <attcProcFindByTypeRsp+0xc8>
    {
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   18960:	9b00      	ldr	r3, [sp, #0]
   18962:	2273      	movs	r2, #115	; 0x73
   18964:	70da      	strb	r2, [r3, #3]
      break;
   18966:	e003      	b.n	18970 <attcProcFindByTypeRsp+0xd0>
  while (p < pEnd)
   18968:	9a07      	ldr	r2, [sp, #28]
   1896a:	9b05      	ldr	r3, [sp, #20]
   1896c:	429a      	cmp	r2, r3
   1896e:	d3ac      	bcc.n	188ca <attcProcFindByTypeRsp+0x2a>
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   18970:	9b00      	ldr	r3, [sp, #0]
   18972:	78db      	ldrb	r3, [r3, #3]
   18974:	2b00      	cmp	r3, #0
   18976:	d119      	bne.n	189ac <attcProcFindByTypeRsp+0x10c>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   18978:	9b03      	ldr	r3, [sp, #12]
   1897a:	7cdb      	ldrb	r3, [r3, #19]
   1897c:	2b01      	cmp	r3, #1
   1897e:	d115      	bne.n	189ac <attcProcFindByTypeRsp+0x10c>
    {
      /* if all handles read */
      if (nextHandle == 0 || nextHandle > pCcb->outReqParams.h.endHandle)
   18980:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   18984:	2b00      	cmp	r3, #0
   18986:	d005      	beq.n	18994 <attcProcFindByTypeRsp+0xf4>
   18988:	9b03      	ldr	r3, [sp, #12]
   1898a:	8c1b      	ldrh	r3, [r3, #32]
   1898c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   18990:	429a      	cmp	r2, r3
   18992:	d903      	bls.n	1899c <attcProcFindByTypeRsp+0xfc>
      {
        /* we're done */
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   18994:	9b03      	ldr	r3, [sp, #12]
   18996:	2200      	movs	r2, #0
   18998:	74da      	strb	r2, [r3, #19]
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   1899a:	e007      	b.n	189ac <attcProcFindByTypeRsp+0x10c>
        pCcb->outReqParams.h.startHandle = nextHandle;
   1899c:	9b03      	ldr	r3, [sp, #12]
   1899e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   189a2:	83da      	strh	r2, [r3, #30]
        pCcb->outReq.handle = nextHandle;
   189a4:	9b03      	ldr	r3, [sp, #12]
   189a6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   189aa:	831a      	strh	r2, [r3, #24]
}
   189ac:	bf00      	nop
   189ae:	b008      	add	sp, #32
   189b0:	4770      	bx	lr

000189b2 <attcProcReadLongRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcReadLongRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   189b2:	b084      	sub	sp, #16
   189b4:	9003      	str	r0, [sp, #12]
   189b6:	9201      	str	r2, [sp, #4]
   189b8:	9300      	str	r3, [sp, #0]
   189ba:	460b      	mov	r3, r1
   189bc:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   189c0:	9b03      	ldr	r3, [sp, #12]
   189c2:	7cdb      	ldrb	r3, [r3, #19]
   189c4:	2b01      	cmp	r3, #1
   189c6:	d112      	bne.n	189ee <attcProcReadLongRsp+0x3c>
  {
    /* length of response is less than mtu */
    if (len < pCcb->pMainCcb->mtu)
   189c8:	9b03      	ldr	r3, [sp, #12]
   189ca:	681b      	ldr	r3, [r3, #0]
   189cc:	8b5b      	ldrh	r3, [r3, #26]
   189ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   189d2:	429a      	cmp	r2, r3
   189d4:	d203      	bcs.n	189de <attcProcReadLongRsp+0x2c>
    {
      /* we're done */
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   189d6:	9b03      	ldr	r3, [sp, #12]
   189d8:	2200      	movs	r2, #0
   189da:	74da      	strb	r2, [r3, #19]
    else
    {
      pCcb->outReqParams.o.offset += pEvt->valueLen;
    }
  }
}
   189dc:	e007      	b.n	189ee <attcProcReadLongRsp+0x3c>
      pCcb->outReqParams.o.offset += pEvt->valueLen;
   189de:	9b03      	ldr	r3, [sp, #12]
   189e0:	8bda      	ldrh	r2, [r3, #30]
   189e2:	9b00      	ldr	r3, [sp, #0]
   189e4:	891b      	ldrh	r3, [r3, #8]
   189e6:	4413      	add	r3, r2
   189e8:	b29a      	uxth	r2, r3
   189ea:	9b03      	ldr	r3, [sp, #12]
   189ec:	83da      	strh	r2, [r3, #30]
}
   189ee:	bf00      	nop
   189f0:	b004      	add	sp, #16
   189f2:	4770      	bx	lr

000189f4 <attcProcPrepWriteRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcPrepWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   189f4:	b084      	sub	sp, #16
   189f6:	9003      	str	r0, [sp, #12]
   189f8:	9201      	str	r2, [sp, #4]
   189fa:	9300      	str	r3, [sp, #0]
   189fc:	460b      	mov	r3, r1
   189fe:	f8ad 300a 	strh.w	r3, [sp, #10]
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   18a02:	9b03      	ldr	r3, [sp, #12]
   18a04:	7cdb      	ldrb	r3, [r3, #19]
   18a06:	2b01      	cmp	r3, #1
   18a08:	d106      	bne.n	18a18 <attcProcPrepWriteRsp+0x24>
  {
    /* if no more data to send */
    if (pCcb->outReqParams.w.len == 0)
   18a0a:	9b03      	ldr	r3, [sp, #12]
   18a0c:	8b9b      	ldrh	r3, [r3, #28]
   18a0e:	2b00      	cmp	r3, #0
   18a10:	d102      	bne.n	18a18 <attcProcPrepWriteRsp+0x24>
    {
      /* we're done */
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   18a12:	9b03      	ldr	r3, [sp, #12]
   18a14:	2200      	movs	r2, #0
   18a16:	74da      	strb	r2, [r3, #19]
    }
  }

  /* adjust attribute value and its length (adjusted by ATT header length already) */
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   18a18:	9b00      	ldr	r3, [sp, #0]
   18a1a:	685b      	ldr	r3, [r3, #4]
   18a1c:	1d1a      	adds	r2, r3, #4
   18a1e:	9b00      	ldr	r3, [sp, #0]
   18a20:	605a      	str	r2, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   18a22:	9b00      	ldr	r3, [sp, #0]
   18a24:	891b      	ldrh	r3, [r3, #8]
   18a26:	3b04      	subs	r3, #4
   18a28:	b29a      	uxth	r2, r3
   18a2a:	9b00      	ldr	r3, [sp, #0]
   18a2c:	811a      	strh	r2, [r3, #8]
}
   18a2e:	bf00      	nop
   18a30:	b004      	add	sp, #16
   18a32:	4770      	bx	lr

00018a34 <attsCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsCccCback(dmConnId_t connId, uint8_t idx, uint16_t handle, uint16_t value)
{
   18a34:	b510      	push	{r4, lr}
   18a36:	b086      	sub	sp, #24
   18a38:	4604      	mov	r4, r0
   18a3a:	4608      	mov	r0, r1
   18a3c:	4611      	mov	r1, r2
   18a3e:	461a      	mov	r2, r3
   18a40:	4623      	mov	r3, r4
   18a42:	f88d 3007 	strb.w	r3, [sp, #7]
   18a46:	4603      	mov	r3, r0
   18a48:	f88d 3006 	strb.w	r3, [sp, #6]
   18a4c:	460b      	mov	r3, r1
   18a4e:	f8ad 3004 	strh.w	r3, [sp, #4]
   18a52:	4613      	mov	r3, r2
   18a54:	f8ad 3002 	strh.w	r3, [sp, #2]
  attsCccEvt_t  evt;

  evt.hdr.event = ATTS_CCC_STATE_IND;
   18a58:	2310      	movs	r3, #16
   18a5a:	f88d 300e 	strb.w	r3, [sp, #14]
  evt.hdr.param = connId;
   18a5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18a62:	b29b      	uxth	r3, r3
   18a64:	f8ad 300c 	strh.w	r3, [sp, #12]
  evt.idx = idx;
   18a68:	f89d 3006 	ldrb.w	r3, [sp, #6]
   18a6c:	f88d 3014 	strb.w	r3, [sp, #20]
  evt.handle = handle;
   18a70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   18a74:	f8ad 3010 	strh.w	r3, [sp, #16]
  evt.value = value;
   18a78:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   18a7c:	f8ad 3012 	strh.w	r3, [sp, #18]

  (*attsCccCb.cback)(&evt);
   18a80:	4b03      	ldr	r3, [pc, #12]	; (18a90 <attsCccCback+0x5c>)
   18a82:	691b      	ldr	r3, [r3, #16]
   18a84:	aa03      	add	r2, sp, #12
   18a86:	4610      	mov	r0, r2
   18a88:	4798      	blx	r3
}
   18a8a:	bf00      	nop
   18a8c:	b006      	add	sp, #24
   18a8e:	bd10      	pop	{r4, pc}
   18a90:	10004ff0 	.word	0x10004ff0

00018a94 <attsCccAllocTbl>:
 *
 *  \return Pointer into the CCC table.
 */
/*************************************************************************************************/
static uint16_t *attsCccAllocTbl(dmConnId_t connId)
{
   18a94:	b510      	push	{r4, lr}
   18a96:	b082      	sub	sp, #8
   18a98:	4603      	mov	r3, r0
   18a9a:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  /* if not already allocated */
  if (attsCccCb.pCccTbl[connId - 1] == NULL)
   18a9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18aa2:	3b01      	subs	r3, #1
   18aa4:	4a0e      	ldr	r2, [pc, #56]	; (18ae0 <attsCccAllocTbl+0x4c>)
   18aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18aaa:	2b00      	cmp	r3, #0
   18aac:	d10e      	bne.n	18acc <attsCccAllocTbl+0x38>
  {
    WSF_ASSERT(attsCccCb.setLen > 0);

    /* allocate new buffer */
    attsCccCb.pCccTbl[connId - 1] = WsfBufAlloc(attsCccCb.setLen * sizeof(uint16_t));
   18aae:	4b0c      	ldr	r3, [pc, #48]	; (18ae0 <attsCccAllocTbl+0x4c>)
   18ab0:	7d1b      	ldrb	r3, [r3, #20]
   18ab2:	b29b      	uxth	r3, r3
   18ab4:	005b      	lsls	r3, r3, #1
   18ab6:	b29a      	uxth	r2, r3
   18ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18abc:	1e5c      	subs	r4, r3, #1
   18abe:	4610      	mov	r0, r2
   18ac0:	f006 fe8a 	bl	1f7d8 <WsfBufAlloc>
   18ac4:	4603      	mov	r3, r0
   18ac6:	4a06      	ldr	r2, [pc, #24]	; (18ae0 <attsCccAllocTbl+0x4c>)
   18ac8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  }

  return attsCccCb.pCccTbl[connId - 1];
   18acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18ad0:	3b01      	subs	r3, #1
   18ad2:	4a03      	ldr	r2, [pc, #12]	; (18ae0 <attsCccAllocTbl+0x4c>)
   18ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
   18ad8:	4618      	mov	r0, r3
   18ada:	b002      	add	sp, #8
   18adc:	bd10      	pop	{r4, pc}
   18ade:	bf00      	nop
   18ae0:	10004ff0 	.word	0x10004ff0

00018ae4 <attsCccGetTbl>:
 *
 *  \return Pointer into the CCC table.
 */
/*************************************************************************************************/
static uint16_t *attsCccGetTbl(dmConnId_t connId)
{
   18ae4:	b082      	sub	sp, #8
   18ae6:	4603      	mov	r3, r0
   18ae8:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return attsCccCb.pCccTbl[connId - 1];
   18aec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18af0:	3b01      	subs	r3, #1
   18af2:	4a03      	ldr	r2, [pc, #12]	; (18b00 <attsCccGetTbl+0x1c>)
   18af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
   18af8:	4618      	mov	r0, r3
   18afa:	b002      	add	sp, #8
   18afc:	4770      	bx	lr
   18afe:	bf00      	nop
   18b00:	10004ff0 	.word	0x10004ff0

00018b04 <attsCccFreeTbl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsCccFreeTbl(dmConnId_t connId)
{
   18b04:	b500      	push	{lr}
   18b06:	b083      	sub	sp, #12
   18b08:	4603      	mov	r3, r0
   18b0a:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  if (attsCccCb.pCccTbl[connId - 1] != NULL)
   18b0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18b12:	3b01      	subs	r3, #1
   18b14:	4a0c      	ldr	r2, [pc, #48]	; (18b48 <attsCccFreeTbl+0x44>)
   18b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18b1a:	2b00      	cmp	r3, #0
   18b1c:	d00f      	beq.n	18b3e <attsCccFreeTbl+0x3a>
  {
    WsfBufFree(attsCccCb.pCccTbl[connId - 1]);
   18b1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18b22:	3b01      	subs	r3, #1
   18b24:	4a08      	ldr	r2, [pc, #32]	; (18b48 <attsCccFreeTbl+0x44>)
   18b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18b2a:	4618      	mov	r0, r3
   18b2c:	f006 fe92 	bl	1f854 <WsfBufFree>
    attsCccCb.pCccTbl[connId - 1] = NULL;
   18b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18b34:	3b01      	subs	r3, #1
   18b36:	4a04      	ldr	r2, [pc, #16]	; (18b48 <attsCccFreeTbl+0x44>)
   18b38:	2100      	movs	r1, #0
   18b3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
}
   18b3e:	bf00      	nop
   18b40:	b003      	add	sp, #12
   18b42:	f85d fb04 	ldr.w	pc, [sp], #4
   18b46:	bf00      	nop
   18b48:	10004ff0 	.word	0x10004ff0

00018b4c <attsCccReadValue>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccReadValue(dmConnId_t connId, uint16_t handle, uint8_t *pValue)
{
   18b4c:	b500      	push	{lr}
   18b4e:	b087      	sub	sp, #28
   18b50:	4603      	mov	r3, r0
   18b52:	9200      	str	r2, [sp, #0]
   18b54:	f88d 3007 	strb.w	r3, [sp, #7]
   18b58:	460b      	mov	r3, r1
   18b5a:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsCccSet_t  *pSet;
  uint16_t      *pTbl;
  uint8_t       i;

  /* find handle in handle array */
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   18b5e:	4b26      	ldr	r3, [pc, #152]	; (18bf8 <attsCccReadValue+0xac>)
   18b60:	68db      	ldr	r3, [r3, #12]
   18b62:	9305      	str	r3, [sp, #20]
   18b64:	2300      	movs	r3, #0
   18b66:	f88d 3013 	strb.w	r3, [sp, #19]
   18b6a:	e00d      	b.n	18b88 <attsCccReadValue+0x3c>
  {
    if (pSet->handle == handle)
   18b6c:	9b05      	ldr	r3, [sp, #20]
   18b6e:	881b      	ldrh	r3, [r3, #0]
   18b70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   18b74:	429a      	cmp	r2, r3
   18b76:	d00e      	beq.n	18b96 <attsCccReadValue+0x4a>
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   18b78:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18b7c:	3301      	adds	r3, #1
   18b7e:	f88d 3013 	strb.w	r3, [sp, #19]
   18b82:	9b05      	ldr	r3, [sp, #20]
   18b84:	3306      	adds	r3, #6
   18b86:	9305      	str	r3, [sp, #20]
   18b88:	4b1b      	ldr	r3, [pc, #108]	; (18bf8 <attsCccReadValue+0xac>)
   18b8a:	7d1b      	ldrb	r3, [r3, #20]
   18b8c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   18b90:	429a      	cmp	r2, r3
   18b92:	d3eb      	bcc.n	18b6c <attsCccReadValue+0x20>
   18b94:	e000      	b.n	18b98 <attsCccReadValue+0x4c>
    {
      break;
   18b96:	bf00      	nop
    }
  }

  /* if handle not found return error */
  if (i == attsCccCb.setLen)
   18b98:	4b17      	ldr	r3, [pc, #92]	; (18bf8 <attsCccReadValue+0xac>)
   18b9a:	7d1b      	ldrb	r3, [r3, #20]
   18b9c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   18ba0:	429a      	cmp	r2, r3
   18ba2:	d101      	bne.n	18ba8 <attsCccReadValue+0x5c>
  {
    return ATT_ERR_NOT_FOUND;
   18ba4:	230a      	movs	r3, #10
   18ba6:	e023      	b.n	18bf0 <attsCccReadValue+0xa4>
  }

  /* get pointer to the table for this connection */
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   18ba8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18bac:	4618      	mov	r0, r3
   18bae:	f7ff ff99 	bl	18ae4 <attsCccGetTbl>
   18bb2:	9003      	str	r0, [sp, #12]
   18bb4:	9b03      	ldr	r3, [sp, #12]
   18bb6:	2b00      	cmp	r3, #0
   18bb8:	d019      	beq.n	18bee <attsCccReadValue+0xa2>
  {
    /* read value */
    UINT16_TO_BSTREAM(pValue, pTbl[i]);
   18bba:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18bbe:	005b      	lsls	r3, r3, #1
   18bc0:	9a03      	ldr	r2, [sp, #12]
   18bc2:	4413      	add	r3, r2
   18bc4:	8819      	ldrh	r1, [r3, #0]
   18bc6:	9b00      	ldr	r3, [sp, #0]
   18bc8:	1c5a      	adds	r2, r3, #1
   18bca:	9200      	str	r2, [sp, #0]
   18bcc:	b2ca      	uxtb	r2, r1
   18bce:	701a      	strb	r2, [r3, #0]
   18bd0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18bd4:	005b      	lsls	r3, r3, #1
   18bd6:	9a03      	ldr	r2, [sp, #12]
   18bd8:	4413      	add	r3, r2
   18bda:	881b      	ldrh	r3, [r3, #0]
   18bdc:	0a1b      	lsrs	r3, r3, #8
   18bde:	b299      	uxth	r1, r3
   18be0:	9b00      	ldr	r3, [sp, #0]
   18be2:	1c5a      	adds	r2, r3, #1
   18be4:	9200      	str	r2, [sp, #0]
   18be6:	b2ca      	uxtb	r2, r1
   18be8:	701a      	strb	r2, [r3, #0]

    return ATT_SUCCESS;
   18bea:	2300      	movs	r3, #0
   18bec:	e000      	b.n	18bf0 <attsCccReadValue+0xa4>
  }
  else
  {
    return ATT_ERR_RESOURCES;
   18bee:	2311      	movs	r3, #17
  }
}
   18bf0:	4618      	mov	r0, r3
   18bf2:	b007      	add	sp, #28
   18bf4:	f85d fb04 	ldr.w	pc, [sp], #4
   18bf8:	10004ff0 	.word	0x10004ff0

00018bfc <attsCccWriteValue>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccWriteValue(dmConnId_t connId, uint16_t handle, uint8_t *pValue)
{
   18bfc:	b500      	push	{lr}
   18bfe:	b087      	sub	sp, #28
   18c00:	4603      	mov	r3, r0
   18c02:	9200      	str	r2, [sp, #0]
   18c04:	f88d 3007 	strb.w	r3, [sp, #7]
   18c08:	460b      	mov	r3, r1
   18c0a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t       i;
  uint16_t      value;
  uint16_t      prevValue;

  /* find handle in handle array */
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   18c0e:	4b3d      	ldr	r3, [pc, #244]	; (18d04 <attsCccWriteValue+0x108>)
   18c10:	68db      	ldr	r3, [r3, #12]
   18c12:	9305      	str	r3, [sp, #20]
   18c14:	2300      	movs	r3, #0
   18c16:	f88d 3013 	strb.w	r3, [sp, #19]
   18c1a:	e00d      	b.n	18c38 <attsCccWriteValue+0x3c>
  {
    if (pSet->handle == handle)
   18c1c:	9b05      	ldr	r3, [sp, #20]
   18c1e:	881b      	ldrh	r3, [r3, #0]
   18c20:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   18c24:	429a      	cmp	r2, r3
   18c26:	d00e      	beq.n	18c46 <attsCccWriteValue+0x4a>
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   18c28:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18c2c:	3301      	adds	r3, #1
   18c2e:	f88d 3013 	strb.w	r3, [sp, #19]
   18c32:	9b05      	ldr	r3, [sp, #20]
   18c34:	3306      	adds	r3, #6
   18c36:	9305      	str	r3, [sp, #20]
   18c38:	4b32      	ldr	r3, [pc, #200]	; (18d04 <attsCccWriteValue+0x108>)
   18c3a:	7d1b      	ldrb	r3, [r3, #20]
   18c3c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   18c40:	429a      	cmp	r2, r3
   18c42:	d3eb      	bcc.n	18c1c <attsCccWriteValue+0x20>
   18c44:	e000      	b.n	18c48 <attsCccWriteValue+0x4c>
    {
      break;
   18c46:	bf00      	nop
    }
  }

  /* if handle not found return error */
  if (i == attsCccCb.setLen)
   18c48:	4b2e      	ldr	r3, [pc, #184]	; (18d04 <attsCccWriteValue+0x108>)
   18c4a:	7d1b      	ldrb	r3, [r3, #20]
   18c4c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   18c50:	429a      	cmp	r2, r3
   18c52:	d101      	bne.n	18c58 <attsCccWriteValue+0x5c>
  {
    return ATT_ERR_NOT_FOUND;
   18c54:	230a      	movs	r3, #10
   18c56:	e051      	b.n	18cfc <attsCccWriteValue+0x100>
  }

  BYTES_TO_UINT16(value, pValue);
   18c58:	9b00      	ldr	r3, [sp, #0]
   18c5a:	781b      	ldrb	r3, [r3, #0]
   18c5c:	b29a      	uxth	r2, r3
   18c5e:	9b00      	ldr	r3, [sp, #0]
   18c60:	3301      	adds	r3, #1
   18c62:	781b      	ldrb	r3, [r3, #0]
   18c64:	b29b      	uxth	r3, r3
   18c66:	021b      	lsls	r3, r3, #8
   18c68:	b29b      	uxth	r3, r3
   18c6a:	4413      	add	r3, r2
   18c6c:	f8ad 3010 	strh.w	r3, [sp, #16]

  /* verify value range */
  if (((value != 0) && (value != ATT_CLIENT_CFG_NOTIFY) && (value != ATT_CLIENT_CFG_INDICATE)) ||
   18c70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18c74:	2b00      	cmp	r3, #0
   18c76:	d007      	beq.n	18c88 <attsCccWriteValue+0x8c>
   18c78:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18c7c:	2b01      	cmp	r3, #1
   18c7e:	d003      	beq.n	18c88 <attsCccWriteValue+0x8c>
   18c80:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18c84:	2b02      	cmp	r3, #2
   18c86:	d10b      	bne.n	18ca0 <attsCccWriteValue+0xa4>
   18c88:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18c8c:	2b00      	cmp	r3, #0
   18c8e:	d009      	beq.n	18ca4 <attsCccWriteValue+0xa8>
      ((value != 0) && ((value & pSet->valueRange) == 0)))
   18c90:	9b05      	ldr	r3, [sp, #20]
   18c92:	885a      	ldrh	r2, [r3, #2]
   18c94:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18c98:	4013      	ands	r3, r2
   18c9a:	b29b      	uxth	r3, r3
   18c9c:	2b00      	cmp	r3, #0
   18c9e:	d101      	bne.n	18ca4 <attsCccWriteValue+0xa8>
  {
    return ATT_ERR_VALUE_RANGE;
   18ca0:	2380      	movs	r3, #128	; 0x80
   18ca2:	e02b      	b.n	18cfc <attsCccWriteValue+0x100>
  }

  /* get pointer to the table for this connection */
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   18ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18ca8:	4618      	mov	r0, r3
   18caa:	f7ff ff1b 	bl	18ae4 <attsCccGetTbl>
   18cae:	9003      	str	r0, [sp, #12]
   18cb0:	9b03      	ldr	r3, [sp, #12]
   18cb2:	2b00      	cmp	r3, #0
   18cb4:	d021      	beq.n	18cfa <attsCccWriteValue+0xfe>
  {
    /* write value */
    prevValue = pTbl[i];
   18cb6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18cba:	005b      	lsls	r3, r3, #1
   18cbc:	9a03      	ldr	r2, [sp, #12]
   18cbe:	4413      	add	r3, r2
   18cc0:	881b      	ldrh	r3, [r3, #0]
   18cc2:	f8ad 300a 	strh.w	r3, [sp, #10]
    pTbl[i] = value;
   18cc6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18cca:	005b      	lsls	r3, r3, #1
   18ccc:	9a03      	ldr	r2, [sp, #12]
   18cce:	4413      	add	r3, r2
   18cd0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   18cd4:	801a      	strh	r2, [r3, #0]

    /* if value changed call callback */
    if (prevValue != value)
   18cd6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   18cda:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18cde:	429a      	cmp	r2, r3
   18ce0:	d009      	beq.n	18cf6 <attsCccWriteValue+0xfa>
    {
      attsCccCback(connId, i, handle, value);
   18ce2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18ce6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   18cea:	f89d 1013 	ldrb.w	r1, [sp, #19]
   18cee:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18cf2:	f7ff fe9f 	bl	18a34 <attsCccCback>
    }

    return ATT_SUCCESS;
   18cf6:	2300      	movs	r3, #0
   18cf8:	e000      	b.n	18cfc <attsCccWriteValue+0x100>
  }
  else
  {
    return ATT_ERR_RESOURCES;
   18cfa:	2311      	movs	r3, #17
  }
}
   18cfc:	4618      	mov	r0, r3
   18cfe:	b007      	add	sp, #28
   18d00:	f85d fb04 	ldr.w	pc, [sp], #4
   18d04:	10004ff0 	.word	0x10004ff0

00018d08 <attsCccMainCback>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccMainCback(dmConnId_t connId, uint8_t method, uint16_t handle, uint8_t *pValue)
{
   18d08:	b500      	push	{lr}
   18d0a:	b083      	sub	sp, #12
   18d0c:	9300      	str	r3, [sp, #0]
   18d0e:	4603      	mov	r3, r0
   18d10:	f88d 3007 	strb.w	r3, [sp, #7]
   18d14:	460b      	mov	r3, r1
   18d16:	f88d 3006 	strb.w	r3, [sp, #6]
   18d1a:	4613      	mov	r3, r2
   18d1c:	f8ad 3004 	strh.w	r3, [sp, #4]
  ATT_TRACE_INFO2("attsCccMainCback connId=%d handle=%d", connId, handle);

  if (method == ATT_METHOD_READ)
   18d20:	f89d 3006 	ldrb.w	r3, [sp, #6]
   18d24:	2b05      	cmp	r3, #5
   18d26:	d109      	bne.n	18d3c <attsCccMainCback+0x34>
  {
    return attsCccReadValue(connId, handle, pValue);
   18d28:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   18d2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18d30:	9a00      	ldr	r2, [sp, #0]
   18d32:	4618      	mov	r0, r3
   18d34:	f7ff ff0a 	bl	18b4c <attsCccReadValue>
   18d38:	4603      	mov	r3, r0
   18d3a:	e008      	b.n	18d4e <attsCccMainCback+0x46>
  }
  else
  {
    return attsCccWriteValue(connId, handle, pValue);
   18d3c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   18d40:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18d44:	9a00      	ldr	r2, [sp, #0]
   18d46:	4618      	mov	r0, r3
   18d48:	f7ff ff58 	bl	18bfc <attsCccWriteValue>
   18d4c:	4603      	mov	r3, r0
  }
}
   18d4e:	4618      	mov	r0, r3
   18d50:	b003      	add	sp, #12
   18d52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00018d58 <AttsCccRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccRegister(uint8_t setLen, attsCccSet_t *pSet, attsCccCback_t cback)
{
   18d58:	b084      	sub	sp, #16
   18d5a:	4603      	mov	r3, r0
   18d5c:	9102      	str	r1, [sp, #8]
   18d5e:	9201      	str	r2, [sp, #4]
   18d60:	f88d 300f 	strb.w	r3, [sp, #15]
  attsCccCb.setLen = setLen;
   18d64:	4a07      	ldr	r2, [pc, #28]	; (18d84 <AttsCccRegister+0x2c>)
   18d66:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18d6a:	7513      	strb	r3, [r2, #20]
  attsCccCb.pSet = pSet;
   18d6c:	4a05      	ldr	r2, [pc, #20]	; (18d84 <AttsCccRegister+0x2c>)
   18d6e:	9b02      	ldr	r3, [sp, #8]
   18d70:	60d3      	str	r3, [r2, #12]
  attsCccCb.cback = cback;
   18d72:	4a04      	ldr	r2, [pc, #16]	; (18d84 <AttsCccRegister+0x2c>)
   18d74:	9b01      	ldr	r3, [sp, #4]
   18d76:	6113      	str	r3, [r2, #16]

  attsCb.cccCback = attsCccMainCback;
   18d78:	4b03      	ldr	r3, [pc, #12]	; (18d88 <AttsCccRegister+0x30>)
   18d7a:	4a04      	ldr	r2, [pc, #16]	; (18d8c <AttsCccRegister+0x34>)
   18d7c:	615a      	str	r2, [r3, #20]
}
   18d7e:	bf00      	nop
   18d80:	b004      	add	sp, #16
   18d82:	4770      	bx	lr
   18d84:	10004ff0 	.word	0x10004ff0
   18d88:	1000506c 	.word	0x1000506c
   18d8c:	00018d09 	.word	0x00018d09

00018d90 <AttsCccInitTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccInitTable(dmConnId_t connId, uint16_t *pCccTbl)
{
   18d90:	b500      	push	{lr}
   18d92:	b085      	sub	sp, #20
   18d94:	4603      	mov	r3, r0
   18d96:	9100      	str	r1, [sp, #0]
   18d98:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t   i;
  uint16_t  *pTbl;

  ATT_TRACE_INFO1("AttsCccInitTable connId=%d", connId);

  if ((pTbl = attsCccAllocTbl(connId)) != NULL)
   18d9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18da0:	4618      	mov	r0, r3
   18da2:	f7ff fe77 	bl	18a94 <attsCccAllocTbl>
   18da6:	9002      	str	r0, [sp, #8]
   18da8:	9b02      	ldr	r3, [sp, #8]
   18daa:	2b00      	cmp	r3, #0
   18dac:	d031      	beq.n	18e12 <AttsCccInitTable+0x82>
  {
    /* if initializer table is passed in */
    if (pCccTbl != NULL)
   18dae:	9b00      	ldr	r3, [sp, #0]
   18db0:	2b00      	cmp	r3, #0
   18db2:	d026      	beq.n	18e02 <AttsCccInitTable+0x72>
    {
      /* initialize table */
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
   18db4:	2300      	movs	r3, #0
   18db6:	f88d 300f 	strb.w	r3, [sp, #15]
   18dba:	e01b      	b.n	18df4 <AttsCccInitTable+0x64>
      {
        /* copy value */
        *pTbl = *pCccTbl;
   18dbc:	9b00      	ldr	r3, [sp, #0]
   18dbe:	881a      	ldrh	r2, [r3, #0]
   18dc0:	9b02      	ldr	r3, [sp, #8]
   18dc2:	801a      	strh	r2, [r3, #0]

        /* execute callback for each nonzero entry in table */
        if (*pCccTbl != 0)
   18dc4:	9b00      	ldr	r3, [sp, #0]
   18dc6:	881b      	ldrh	r3, [r3, #0]
   18dc8:	2b00      	cmp	r3, #0
   18dca:	d008      	beq.n	18dde <AttsCccInitTable+0x4e>
        {
          attsCccCback(connId, i, ATT_HANDLE_NONE, *pCccTbl);
   18dcc:	9b00      	ldr	r3, [sp, #0]
   18dce:	881b      	ldrh	r3, [r3, #0]
   18dd0:	f89d 100f 	ldrb.w	r1, [sp, #15]
   18dd4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18dd8:	2200      	movs	r2, #0
   18dda:	f7ff fe2b 	bl	18a34 <attsCccCback>
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
   18dde:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18de2:	3301      	adds	r3, #1
   18de4:	f88d 300f 	strb.w	r3, [sp, #15]
   18de8:	9b00      	ldr	r3, [sp, #0]
   18dea:	3302      	adds	r3, #2
   18dec:	9300      	str	r3, [sp, #0]
   18dee:	9b02      	ldr	r3, [sp, #8]
   18df0:	3302      	adds	r3, #2
   18df2:	9302      	str	r3, [sp, #8]
   18df4:	4b09      	ldr	r3, [pc, #36]	; (18e1c <AttsCccInitTable+0x8c>)
   18df6:	7d1b      	ldrb	r3, [r3, #20]
   18df8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   18dfc:	429a      	cmp	r2, r3
   18dfe:	d3dd      	bcc.n	18dbc <AttsCccInitTable+0x2c>
    {
      /* initialize table to zero */
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
    }
  }
}
   18e00:	e007      	b.n	18e12 <AttsCccInitTable+0x82>
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
   18e02:	4b06      	ldr	r3, [pc, #24]	; (18e1c <AttsCccInitTable+0x8c>)
   18e04:	7d1b      	ldrb	r3, [r3, #20]
   18e06:	005b      	lsls	r3, r3, #1
   18e08:	461a      	mov	r2, r3
   18e0a:	2100      	movs	r1, #0
   18e0c:	9802      	ldr	r0, [sp, #8]
   18e0e:	f00c fc55 	bl	256bc <memset>
}
   18e12:	bf00      	nop
   18e14:	b005      	add	sp, #20
   18e16:	f85d fb04 	ldr.w	pc, [sp], #4
   18e1a:	bf00      	nop
   18e1c:	10004ff0 	.word	0x10004ff0

00018e20 <AttsCccClearTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccClearTable(dmConnId_t connId)
{
   18e20:	b500      	push	{lr}
   18e22:	b083      	sub	sp, #12
   18e24:	4603      	mov	r3, r0
   18e26:	f88d 3007 	strb.w	r3, [sp, #7]
  ATT_TRACE_INFO1("AttsCccClearTable connId=%d", connId);

  attsCccFreeTbl(connId);
   18e2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18e2e:	4618      	mov	r0, r3
   18e30:	f7ff fe68 	bl	18b04 <attsCccFreeTbl>
}
   18e34:	bf00      	nop
   18e36:	b003      	add	sp, #12
   18e38:	f85d fb04 	ldr.w	pc, [sp], #4

00018e3c <AttsCccGet>:
 *
 *  \return Value of the descriptor.
 */
/*************************************************************************************************/
uint16_t AttsCccGet(dmConnId_t connId, uint8_t idx)
{
   18e3c:	b500      	push	{lr}
   18e3e:	b085      	sub	sp, #20
   18e40:	4603      	mov	r3, r0
   18e42:	460a      	mov	r2, r1
   18e44:	f88d 3007 	strb.w	r3, [sp, #7]
   18e48:	4613      	mov	r3, r2
   18e4a:	f88d 3006 	strb.w	r3, [sp, #6]
  uint16_t      *pTbl;

  WSF_ASSERT(idx < attsCccCb.setLen);

  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   18e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18e52:	4618      	mov	r0, r3
   18e54:	f7ff fe46 	bl	18ae4 <attsCccGetTbl>
   18e58:	9003      	str	r0, [sp, #12]
   18e5a:	9b03      	ldr	r3, [sp, #12]
   18e5c:	2b00      	cmp	r3, #0
   18e5e:	d006      	beq.n	18e6e <AttsCccGet+0x32>
  {
    /* return value from table */
    return pTbl[idx];
   18e60:	f89d 3006 	ldrb.w	r3, [sp, #6]
   18e64:	005b      	lsls	r3, r3, #1
   18e66:	9a03      	ldr	r2, [sp, #12]
   18e68:	4413      	add	r3, r2
   18e6a:	881b      	ldrh	r3, [r3, #0]
   18e6c:	e000      	b.n	18e70 <AttsCccGet+0x34>
  }
  else
  {
    return 0;
   18e6e:	2300      	movs	r3, #0
  }
}
   18e70:	4618      	mov	r0, r3
   18e72:	b005      	add	sp, #20
   18e74:	f85d fb04 	ldr.w	pc, [sp], #4

00018e78 <AttsCccEnabled>:
 *
 *  \return Value of the descriptor if security level is met, otherwise zero.
 */
/*************************************************************************************************/
uint16_t AttsCccEnabled(dmConnId_t connId, uint8_t idx)
{
   18e78:	b500      	push	{lr}
   18e7a:	b083      	sub	sp, #12
   18e7c:	4603      	mov	r3, r0
   18e7e:	460a      	mov	r2, r1
   18e80:	f88d 3007 	strb.w	r3, [sp, #7]
   18e84:	4613      	mov	r3, r2
   18e86:	f88d 3006 	strb.w	r3, [sp, #6]
  WSF_ASSERT(idx < attsCccCb.setLen);

  /* check security level */
  if (DmConnSecLevel(connId) < attsCccCb.pSet[idx].secLevel)
   18e8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18e8e:	4618      	mov	r0, r3
   18e90:	f7fc fd90 	bl	159b4 <DmConnSecLevel>
   18e94:	4603      	mov	r3, r0
   18e96:	4618      	mov	r0, r3
   18e98:	4b0d      	ldr	r3, [pc, #52]	; (18ed0 <AttsCccEnabled+0x58>)
   18e9a:	68d9      	ldr	r1, [r3, #12]
   18e9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   18ea0:	4613      	mov	r3, r2
   18ea2:	005b      	lsls	r3, r3, #1
   18ea4:	4413      	add	r3, r2
   18ea6:	005b      	lsls	r3, r3, #1
   18ea8:	440b      	add	r3, r1
   18eaa:	791b      	ldrb	r3, [r3, #4]
   18eac:	4298      	cmp	r0, r3
   18eae:	d201      	bcs.n	18eb4 <AttsCccEnabled+0x3c>
  {
    return 0;
   18eb0:	2300      	movs	r3, #0
   18eb2:	e008      	b.n	18ec6 <AttsCccEnabled+0x4e>
  }

  /* get value */
  return AttsCccGet(connId, idx);
   18eb4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   18eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18ebc:	4611      	mov	r1, r2
   18ebe:	4618      	mov	r0, r3
   18ec0:	f7ff ffbc 	bl	18e3c <AttsCccGet>
   18ec4:	4603      	mov	r3, r0
}
   18ec6:	4618      	mov	r0, r3
   18ec8:	b003      	add	sp, #12
   18eca:	f85d fb04 	ldr.w	pc, [sp], #4
   18ece:	bf00      	nop
   18ed0:	10004ff0 	.word	0x10004ff0

00018ed4 <AttsGetCccTableLen>:
 *  \return  Number of CCC entries in table.
 */
/*************************************************************************************************/
uint8_t AttsGetCccTableLen(void)
{
  return attsCccCb.setLen;
   18ed4:	4b01      	ldr	r3, [pc, #4]	; (18edc <AttsGetCccTableLen+0x8>)
   18ed6:	7d1b      	ldrb	r3, [r3, #20]
}
   18ed8:	4618      	mov	r0, r3
   18eda:	4770      	bx	lr
   18edc:	10004ff0 	.word	0x10004ff0

00018ee0 <attsCsfSetHashUpdateStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCsfSetHashUpdateStatus(bool_t isUpdating)
{
   18ee0:	b500      	push	{lr}
   18ee2:	b085      	sub	sp, #20
   18ee4:	4603      	mov	r3, r0
   18ee6:	f88d 3007 	strb.w	r3, [sp, #7]
  if (attsCsfCb.isHashUpdating == isUpdating)
   18eea:	4b19      	ldr	r3, [pc, #100]	; (18f50 <attsCsfSetHashUpdateStatus+0x70>)
   18eec:	7b1b      	ldrb	r3, [r3, #12]
   18eee:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18ef2:	429a      	cmp	r2, r3
   18ef4:	d027      	beq.n	18f46 <attsCsfSetHashUpdateStatus+0x66>
    return;
  }
  else
  {
    /* Update state. */
    attsCsfCb.isHashUpdating = isUpdating;
   18ef6:	4a16      	ldr	r2, [pc, #88]	; (18f50 <attsCsfSetHashUpdateStatus+0x70>)
   18ef8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18efc:	7313      	strb	r3, [r2, #12]
  }

  /* Update complete.
   * Check if clients were pending on the hash value and fulfill their requests.
   */
  if (isUpdating == FALSE)
   18efe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18f02:	2b00      	cmp	r3, #0
   18f04:	d102      	bne.n	18f0c <attsCsfSetHashUpdateStatus+0x2c>
  {
    ATT_TRACE_INFO0("Database hash calculation complete");

    attsCheckPendDbHashReadRsp();
   18f06:	f000 ff25 	bl	19d54 <attsCheckPendDbHashReadRsp>
   18f0a:	e01d      	b.n	18f48 <attsCsfSetHashUpdateStatus+0x68>
    /* If the application, for whatever reason, previously recalculated the database hash over an
     * unchanged database and a client pended on a Read By Type Request of the database hash, then
     * that clients state may be out of step if the application did not initiate a state
     * transition.  That state transition is forced here to keep handle next transition.
     */
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   18f0c:	2300      	movs	r3, #0
   18f0e:	f88d 300f 	strb.w	r3, [sp, #15]
   18f12:	e013      	b.n	18f3c <attsCsfSetHashUpdateStatus+0x5c>
    {
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   18f14:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18f18:	4a0d      	ldr	r2, [pc, #52]	; (18f50 <attsCsfSetHashUpdateStatus+0x70>)
   18f1a:	005b      	lsls	r3, r3, #1
   18f1c:	4413      	add	r3, r2
   18f1e:	785b      	ldrb	r3, [r3, #1]
   18f20:	2b02      	cmp	r3, #2
   18f22:	d106      	bne.n	18f32 <attsCsfSetHashUpdateStatus+0x52>
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   18f24:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18f28:	4a09      	ldr	r2, [pc, #36]	; (18f50 <attsCsfSetHashUpdateStatus+0x70>)
   18f2a:	005b      	lsls	r3, r3, #1
   18f2c:	4413      	add	r3, r2
   18f2e:	2201      	movs	r2, #1
   18f30:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   18f32:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18f36:	3301      	adds	r3, #1
   18f38:	f88d 300f 	strb.w	r3, [sp, #15]
   18f3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18f40:	2b02      	cmp	r3, #2
   18f42:	d9e7      	bls.n	18f14 <attsCsfSetHashUpdateStatus+0x34>
   18f44:	e000      	b.n	18f48 <attsCsfSetHashUpdateStatus+0x68>
    return;
   18f46:	bf00      	nop
      }
    }
  }
}
   18f48:	b005      	add	sp, #20
   18f4a:	f85d fb04 	ldr.w	pc, [sp], #4
   18f4e:	bf00      	nop
   18f50:	10005008 	.word	0x10005008

00018f54 <attsCsfGetHashUpdateStatus>:
*  \return \ref TRUE if update in progress, \ref FALSE otherwise.
*/
/*************************************************************************************************/
uint8_t attsCsfGetHashUpdateStatus(void)
{
  return attsCsfCb.isHashUpdating;
   18f54:	4b01      	ldr	r3, [pc, #4]	; (18f5c <attsCsfGetHashUpdateStatus+0x8>)
   18f56:	7b1b      	ldrb	r3, [r3, #12]
}
   18f58:	4618      	mov	r0, r3
   18f5a:	4770      	bx	lr
   18f5c:	10005008 	.word	0x10005008

00018f60 <attsCsfIsClientChangeAware>:
 *
 *  \return \ref TRUE if client is aware, otherwise \ref FALSE.
 */
/*************************************************************************************************/
uint8_t attsCsfIsClientChangeAware(dmConnId_t connId, uint16_t handle)
{
   18f60:	b082      	sub	sp, #8
   18f62:	4603      	mov	r3, r0
   18f64:	460a      	mov	r2, r1
   18f66:	f88d 3007 	strb.w	r3, [sp, #7]
   18f6a:	4613      	mov	r3, r2
   18f6c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
   18f70:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18f74:	3b01      	subs	r3, #1
   18f76:	4a0d      	ldr	r2, [pc, #52]	; (18fac <attsCsfIsClientChangeAware+0x4c>)
   18f78:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
   18f7c:	f003 0301 	and.w	r3, r3, #1
   18f80:	2b00      	cmp	r3, #0
   18f82:	d00e      	beq.n	18fa2 <attsCsfIsClientChangeAware+0x42>
      (attsCsfCb.attsCsfTable[connId - 1].changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE) &&
   18f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18f88:	3b01      	subs	r3, #1
   18f8a:	4a08      	ldr	r2, [pc, #32]	; (18fac <attsCsfIsClientChangeAware+0x4c>)
   18f8c:	005b      	lsls	r3, r3, #1
   18f8e:	4413      	add	r3, r2
   18f90:	785b      	ldrb	r3, [r3, #1]
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
   18f92:	2b03      	cmp	r3, #3
   18f94:	d105      	bne.n	18fa2 <attsCsfIsClientChangeAware+0x42>
      (attsCsfCb.attsCsfTable[connId - 1].changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE) &&
   18f96:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   18f9a:	2b12      	cmp	r3, #18
   18f9c:	d001      	beq.n	18fa2 <attsCsfIsClientChangeAware+0x42>
      (handle != GATT_SC_HDL))
  {
    return FALSE;
   18f9e:	2300      	movs	r3, #0
   18fa0:	e000      	b.n	18fa4 <attsCsfIsClientChangeAware+0x44>
  }

  return TRUE;
   18fa2:	2301      	movs	r3, #1
}
   18fa4:	4618      	mov	r0, r3
   18fa6:	b002      	add	sp, #8
   18fa8:	4770      	bx	lr
   18faa:	bf00      	nop
   18fac:	10005008 	.word	0x10005008

00018fb0 <attsCsfActClientState>:
 *
 *  \return \ref ATT_SUCCESS if client is change-aware, else \ref ATT_ERR_DATABASE_OUT_OF_SYNC.
 */
/*************************************************************************************************/
uint8_t attsCsfActClientState(uint16_t handle, uint8_t opcode, uint8_t *pPacket)
{
   18fb0:	b500      	push	{lr}
   18fb2:	b087      	sub	sp, #28
   18fb4:	4603      	mov	r3, r0
   18fb6:	9200      	str	r2, [sp, #0]
   18fb8:	f8ad 3006 	strh.w	r3, [sp, #6]
   18fbc:	460b      	mov	r3, r1
   18fbe:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t err = ATT_SUCCESS;
   18fc2:	2300      	movs	r3, #0
   18fc4:	f88d 3017 	strb.w	r3, [sp, #23]
  attsCsfRec_t *pRec;

  /* PDU which do not operate on att handles are handled agnostically of the client's state. */
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
   18fc8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18fcc:	2b02      	cmp	r3, #2
   18fce:	d003      	beq.n	18fd8 <attsCsfActClientState+0x28>
   18fd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18fd4:	2b1e      	cmp	r3, #30
   18fd6:	d102      	bne.n	18fde <attsCsfActClientState+0x2e>
  {
    return err;
   18fd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18fdc:	e065      	b.n	190aa <attsCsfActClientState+0xfa>
  }

  pRec = &attsCsfCb.attsCsfTable[handle];
   18fde:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18fe2:	005b      	lsls	r3, r3, #1
   18fe4:	4a33      	ldr	r2, [pc, #204]	; (190b4 <attsCsfActClientState+0x104>)
   18fe6:	4413      	add	r3, r2
   18fe8:	9304      	str	r3, [sp, #16]

  /* If the client is change-unaware */
  if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   18fea:	9b04      	ldr	r3, [sp, #16]
   18fec:	785b      	ldrb	r3, [r3, #1]
   18fee:	2b03      	cmp	r3, #3
   18ff0:	d118      	bne.n	19024 <attsCsfActClientState+0x74>
  {
    /* If not a command */
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   18ff2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   18ffa:	2b00      	cmp	r3, #0
   18ffc:	d102      	bne.n	19004 <attsCsfActClientState+0x54>
      /* Note: there is no need to call back to the application here.  The application only
       * needs to know when a transition to or from the change-aware state occurs.
       */

      /* Move client change-aware state to pending */
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   18ffe:	9b04      	ldr	r3, [sp, #16]
   19000:	2201      	movs	r2, #1
   19002:	705a      	strb	r2, [r3, #1]
    }

    /* If this is a command or the Client has indicated Robust Caching, set an error so that
     * this command or request is not processed.
     */
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
   19004:	f89d 3005 	ldrb.w	r3, [sp, #5]
   19008:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1900c:	2b00      	cmp	r3, #0
   1900e:	d105      	bne.n	1901c <attsCsfActClientState+0x6c>
        (pRec->csf & ATTS_CSF_ROBUST_CACHING))
   19010:	9b04      	ldr	r3, [sp, #16]
   19012:	781b      	ldrb	r3, [r3, #0]
   19014:	f003 0301 	and.w	r3, r3, #1
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
   19018:	2b00      	cmp	r3, #0
   1901a:	d023      	beq.n	19064 <attsCsfActClientState+0xb4>
    {
      /* return a database out of sync error */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
   1901c:	2312      	movs	r3, #18
   1901e:	f88d 3017 	strb.w	r3, [sp, #23]
   19022:	e01f      	b.n	19064 <attsCsfActClientState+0xb4>
    }
  }
  else if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_PENDING_AWARE)
   19024:	9b04      	ldr	r3, [sp, #16]
   19026:	785b      	ldrb	r3, [r3, #1]
   19028:	2b01      	cmp	r3, #1
   1902a:	d11b      	bne.n	19064 <attsCsfActClientState+0xb4>
  {
    /* If not a command */
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   1902c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   19030:	f003 0340 	and.w	r3, r3, #64	; 0x40
   19034:	2b00      	cmp	r3, #0
   19036:	d112      	bne.n	1905e <attsCsfActClientState+0xae>
    {
      /* Move client change-aware state to aware */
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE;
   19038:	9b04      	ldr	r3, [sp, #16]
   1903a:	2200      	movs	r2, #0
   1903c:	705a      	strb	r2, [r3, #1]

      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);

      /* Callback to application to store updated awareness, if bonded. */
      if (attsCsfCb.writeCback != NULL)
   1903e:	4b1d      	ldr	r3, [pc, #116]	; (190b4 <attsCsfActClientState+0x104>)
   19040:	689b      	ldr	r3, [r3, #8]
   19042:	2b00      	cmp	r3, #0
   19044:	d00e      	beq.n	19064 <attsCsfActClientState+0xb4>
      {
        attsCsfCb.writeCback(handle + 1, pRec->changeAwareState, &pRec->csf);
   19046:	4b1b      	ldr	r3, [pc, #108]	; (190b4 <attsCsfActClientState+0x104>)
   19048:	689b      	ldr	r3, [r3, #8]
   1904a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1904e:	b2d2      	uxtb	r2, r2
   19050:	3201      	adds	r2, #1
   19052:	b2d0      	uxtb	r0, r2
   19054:	9a04      	ldr	r2, [sp, #16]
   19056:	7851      	ldrb	r1, [r2, #1]
   19058:	9a04      	ldr	r2, [sp, #16]
   1905a:	4798      	blx	r3
   1905c:	e002      	b.n	19064 <attsCsfActClientState+0xb4>
      }
    }
    else
    {
      /* Return an error so that command is not processed. */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
   1905e:	2312      	movs	r3, #18
   19060:	f88d 3017 	strb.w	r3, [sp, #23]
    }
  }

  /* If this is Read by Type request */
  if (opcode == ATT_PDU_READ_TYPE_REQ)
   19064:	f89d 3005 	ldrb.w	r3, [sp, #5]
   19068:	2b08      	cmp	r3, #8
   1906a:	d11c      	bne.n	190a6 <attsCsfActClientState+0xf6>
  {
    uint16_t    uuid;

    /* Extract UUID: Skip L2C, ATT Header and 4 byte handle range */
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
   1906c:	9b00      	ldr	r3, [sp, #0]
   1906e:	330d      	adds	r3, #13
   19070:	781b      	ldrb	r3, [r3, #0]
   19072:	b29a      	uxth	r2, r3
   19074:	9b00      	ldr	r3, [sp, #0]
   19076:	330e      	adds	r3, #14
   19078:	781b      	ldrb	r3, [r3, #0]
   1907a:	b29b      	uxth	r3, r3
   1907c:	021b      	lsls	r3, r3, #8
   1907e:	b29b      	uxth	r3, r3
   19080:	4413      	add	r3, r2
   19082:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If this is a Read By Type Request of the Database Hash characteristic value */
    if (uuid == ATT_UUID_DATABASE_HASH)
   19086:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1908a:	f642 322a 	movw	r2, #11050	; 0x2b2a
   1908e:	4293      	cmp	r3, r2
   19090:	d109      	bne.n	190a6 <attsCsfActClientState+0xf6>
    {
      err = ATT_SUCCESS;
   19092:	2300      	movs	r3, #0
   19094:	f88d 3017 	strb.w	r3, [sp, #23]

      /* Reading the hash during a hash update causes the new hash to be returned and counts
       * towards the peer's progression towards a change-aware state.
       */
      if (attsCsfCb.isHashUpdating)
   19098:	4b06      	ldr	r3, [pc, #24]	; (190b4 <attsCsfActClientState+0x104>)
   1909a:	7b1b      	ldrb	r3, [r3, #12]
   1909c:	2b00      	cmp	r3, #0
   1909e:	d002      	beq.n	190a6 <attsCsfActClientState+0xf6>
      {
        /* This read will not be processed until after the hash update completes, so this read
        * request shall be counted as a move from change-unaware to chang-aware pending.
        */
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
   190a0:	9b04      	ldr	r3, [sp, #16]
   190a2:	2202      	movs	r2, #2
   190a4:	705a      	strb	r2, [r3, #1]
  if (err == ATT_ERR_DATABASE_OUT_OF_SYNC)
  {
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
  }

  return err;
   190a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   190aa:	4618      	mov	r0, r3
   190ac:	b007      	add	sp, #28
   190ae:	f85d fb04 	ldr.w	pc, [sp], #4
   190b2:	bf00      	nop
   190b4:	10005008 	.word	0x10005008

000190b8 <AttsCsfSetClientsChangeAwarenessState>:
 *  \note A callback to application is not needed as it is expected the caller (i.e. the
 *        application) will have updated all persistent records prior to calling this function.
 */
/*************************************************************************************************/
void AttsCsfSetClientsChangeAwarenessState(dmConnId_t connId, uint8_t state)
{
   190b8:	b084      	sub	sp, #16
   190ba:	4603      	mov	r3, r0
   190bc:	460a      	mov	r2, r1
   190be:	f88d 3007 	strb.w	r3, [sp, #7]
   190c2:	4613      	mov	r3, r2
   190c4:	f88d 3006 	strb.w	r3, [sp, #6]
  if (connId == DM_CONN_ID_NONE)
   190c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   190cc:	2b00      	cmp	r3, #0
   190ce:	d125      	bne.n	1911c <AttsCsfSetClientsChangeAwarenessState+0x64>
  {
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   190d0:	2300      	movs	r3, #0
   190d2:	f88d 300f 	strb.w	r3, [sp, #15]
   190d6:	e01c      	b.n	19112 <AttsCsfSetClientsChangeAwarenessState+0x5a>
    {
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   190d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   190dc:	4a15      	ldr	r2, [pc, #84]	; (19134 <AttsCsfSetClientsChangeAwarenessState+0x7c>)
   190de:	005b      	lsls	r3, r3, #1
   190e0:	4413      	add	r3, r2
   190e2:	785b      	ldrb	r3, [r3, #1]
   190e4:	2b02      	cmp	r3, #2
   190e6:	d107      	bne.n	190f8 <AttsCsfSetClientsChangeAwarenessState+0x40>
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   190e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   190ec:	4a11      	ldr	r2, [pc, #68]	; (19134 <AttsCsfSetClientsChangeAwarenessState+0x7c>)
   190ee:	005b      	lsls	r3, r3, #1
   190f0:	4413      	add	r3, r2
   190f2:	2201      	movs	r2, #1
   190f4:	705a      	strb	r2, [r3, #1]
   190f6:	e007      	b.n	19108 <AttsCsfSetClientsChangeAwarenessState+0x50>
      }
      else
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = state;
   190f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   190fc:	4a0d      	ldr	r2, [pc, #52]	; (19134 <AttsCsfSetClientsChangeAwarenessState+0x7c>)
   190fe:	005b      	lsls	r3, r3, #1
   19100:	4413      	add	r3, r2
   19102:	f89d 2006 	ldrb.w	r2, [sp, #6]
   19106:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   19108:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1910c:	3301      	adds	r3, #1
   1910e:	f88d 300f 	strb.w	r3, [sp, #15]
   19112:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19116:	2b02      	cmp	r3, #2
   19118:	d9de      	bls.n	190d8 <AttsCsfSetClientsChangeAwarenessState+0x20>
  {
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;

    ATT_TRACE_INFO2("ConnId %d change aware state is %d", connId, state);
  }
}
   1911a:	e008      	b.n	1912e <AttsCsfSetClientsChangeAwarenessState+0x76>
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;
   1911c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19120:	3b01      	subs	r3, #1
   19122:	4a04      	ldr	r2, [pc, #16]	; (19134 <AttsCsfSetClientsChangeAwarenessState+0x7c>)
   19124:	005b      	lsls	r3, r3, #1
   19126:	4413      	add	r3, r2
   19128:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1912c:	705a      	strb	r2, [r3, #1]
}
   1912e:	bf00      	nop
   19130:	b004      	add	sp, #16
   19132:	4770      	bx	lr
   19134:	10005008 	.word	0x10005008

00019138 <AttsCsfConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfConnOpen(dmConnId_t connId, uint8_t changeAwareState, uint8_t *pCsf)
{
   19138:	b500      	push	{lr}
   1913a:	b083      	sub	sp, #12
   1913c:	4603      	mov	r3, r0
   1913e:	9200      	str	r2, [sp, #0]
   19140:	f88d 3007 	strb.w	r3, [sp, #7]
   19144:	460b      	mov	r3, r1
   19146:	f88d 3006 	strb.w	r3, [sp, #6]
  if (pCsf != NULL)
   1914a:	9b00      	ldr	r3, [sp, #0]
   1914c:	2b00      	cmp	r3, #0
   1914e:	d012      	beq.n	19176 <AttsCsfConnOpen+0x3e>
  {
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = changeAwareState;
   19150:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19154:	3b01      	subs	r3, #1
   19156:	4a0f      	ldr	r2, [pc, #60]	; (19194 <AttsCsfConnOpen+0x5c>)
   19158:	005b      	lsls	r3, r3, #1
   1915a:	4413      	add	r3, r2
   1915c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   19160:	705a      	strb	r2, [r3, #1]
    memcpy(&attsCsfCb.attsCsfTable[connId - 1].csf, pCsf, ATT_CSF_LEN);
   19162:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19166:	3b01      	subs	r3, #1
   19168:	005b      	lsls	r3, r3, #1
   1916a:	4a0a      	ldr	r2, [pc, #40]	; (19194 <AttsCsfConnOpen+0x5c>)
   1916c:	4413      	add	r3, r2
   1916e:	9a00      	ldr	r2, [sp, #0]
   19170:	7812      	ldrb	r2, [r2, #0]
   19172:	701a      	strb	r2, [r3, #0]
  else
  {
    /* Note: this set client to the change-aware state. */
    memset(&attsCsfCb.attsCsfTable[connId - 1], 0, sizeof(attsCsfRec_t));
  }
}
   19174:	e00a      	b.n	1918c <AttsCsfConnOpen+0x54>
    memset(&attsCsfCb.attsCsfTable[connId - 1], 0, sizeof(attsCsfRec_t));
   19176:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1917a:	3b01      	subs	r3, #1
   1917c:	005b      	lsls	r3, r3, #1
   1917e:	4a05      	ldr	r2, [pc, #20]	; (19194 <AttsCsfConnOpen+0x5c>)
   19180:	4413      	add	r3, r2
   19182:	2202      	movs	r2, #2
   19184:	2100      	movs	r1, #0
   19186:	4618      	mov	r0, r3
   19188:	f00c fa98 	bl	256bc <memset>
}
   1918c:	bf00      	nop
   1918e:	b003      	add	sp, #12
   19190:	f85d fb04 	ldr.w	pc, [sp], #4
   19194:	10005008 	.word	0x10005008

00019198 <AttsCsfRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfRegister(attsCsfWriteCback_t writeCback)
{
   19198:	b082      	sub	sp, #8
   1919a:	9001      	str	r0, [sp, #4]
  attsCsfCb.writeCback = writeCback;
   1919c:	4a02      	ldr	r2, [pc, #8]	; (191a8 <AttsCsfRegister+0x10>)
   1919e:	9b01      	ldr	r3, [sp, #4]
   191a0:	6093      	str	r3, [r2, #8]
}
   191a2:	bf00      	nop
   191a4:	b002      	add	sp, #8
   191a6:	4770      	bx	lr
   191a8:	10005008 	.word	0x10005008

000191ac <AttsCsfWriteFeatures>:
 *  \return \ref ATT_SUCCESS is successful, \ref ATT_ERR_VALUE_NOT_ALLOWED if any supported
 *          features are flipped from 1 to 0.
 */
/*************************************************************************************************/
uint8_t AttsCsfWriteFeatures(dmConnId_t connId, uint16_t offset, uint16_t valueLen, uint8_t *pValue)
{
   191ac:	b500      	push	{lr}
   191ae:	b087      	sub	sp, #28
   191b0:	9301      	str	r3, [sp, #4]
   191b2:	4603      	mov	r3, r0
   191b4:	f88d 300f 	strb.w	r3, [sp, #15]
   191b8:	460b      	mov	r3, r1
   191ba:	f8ad 300c 	strh.w	r3, [sp, #12]
   191be:	4613      	mov	r3, r2
   191c0:	f8ad 300a 	strh.w	r3, [sp, #10]
  attsCsfRec_t *pCsfRec = &attsCsfCb.attsCsfTable[connId - 1];
   191c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   191c8:	3b01      	subs	r3, #1
   191ca:	005b      	lsls	r3, r3, #1
   191cc:	4a16      	ldr	r2, [pc, #88]	; (19228 <AttsCsfWriteFeatures+0x7c>)
   191ce:	4413      	add	r3, r2
   191d0:	9305      	str	r3, [sp, #20]
  /* future parameter in case the client supported features characteristic becomes a multi-octet
   * structure.
   */
  (void)offset;

  if (valueLen > ATT_CSF_LEN)
   191d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   191d6:	2b01      	cmp	r3, #1
   191d8:	d901      	bls.n	191de <AttsCsfWriteFeatures+0x32>
  {
    return ATT_ERR_LENGTH;
   191da:	230d      	movs	r3, #13
   191dc:	e01f      	b.n	1921e <AttsCsfWriteFeatures+0x72>
  }

  /* A client can not clear any bits it has set. */
  if ((pCsfRec->csf & *pValue) < pCsfRec->csf)
   191de:	9b05      	ldr	r3, [sp, #20]
   191e0:	781a      	ldrb	r2, [r3, #0]
   191e2:	9b01      	ldr	r3, [sp, #4]
   191e4:	781b      	ldrb	r3, [r3, #0]
   191e6:	4013      	ands	r3, r2
   191e8:	b2da      	uxtb	r2, r3
   191ea:	9b05      	ldr	r3, [sp, #20]
   191ec:	781b      	ldrb	r3, [r3, #0]
   191ee:	429a      	cmp	r2, r3
   191f0:	d201      	bcs.n	191f6 <AttsCsfWriteFeatures+0x4a>
  {
    return ATT_ERR_VALUE_NOT_ALLOWED;
   191f2:	2313      	movs	r3, #19
   191f4:	e013      	b.n	1921e <AttsCsfWriteFeatures+0x72>
  }

  pCsfRec->csf = *pValue & ATTS_CSF_OCT0_FEATURES;
   191f6:	9b01      	ldr	r3, [sp, #4]
   191f8:	781b      	ldrb	r3, [r3, #0]
   191fa:	f003 0301 	and.w	r3, r3, #1
   191fe:	b2da      	uxtb	r2, r3
   19200:	9b05      	ldr	r3, [sp, #20]
   19202:	701a      	strb	r2, [r3, #0]

  ATT_TRACE_INFO2("connId %d updated csf to 0x%02x", connId, pCsfRec->csf);

  /* Callback to application to store updated features, if bonded. */
  if (attsCsfCb.writeCback != NULL)
   19204:	4b08      	ldr	r3, [pc, #32]	; (19228 <AttsCsfWriteFeatures+0x7c>)
   19206:	689b      	ldr	r3, [r3, #8]
   19208:	2b00      	cmp	r3, #0
   1920a:	d007      	beq.n	1921c <AttsCsfWriteFeatures+0x70>
  {
    attsCsfCb.writeCback(connId, pCsfRec->changeAwareState, &pCsfRec->csf);
   1920c:	4b06      	ldr	r3, [pc, #24]	; (19228 <AttsCsfWriteFeatures+0x7c>)
   1920e:	689b      	ldr	r3, [r3, #8]
   19210:	9a05      	ldr	r2, [sp, #20]
   19212:	7851      	ldrb	r1, [r2, #1]
   19214:	9a05      	ldr	r2, [sp, #20]
   19216:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1921a:	4798      	blx	r3
  }

  return ATT_SUCCESS;
   1921c:	2300      	movs	r3, #0
}
   1921e:	4618      	mov	r0, r3
   19220:	b007      	add	sp, #28
   19222:	f85d fb04 	ldr.w	pc, [sp], #4
   19226:	bf00      	nop
   19228:	10005008 	.word	0x10005008

0001922c <AttsCsfGetFeatures>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfGetFeatures(dmConnId_t connId, uint8_t *pCsfOut, uint8_t pCsfOutLen)
{
   1922c:	b500      	push	{lr}
   1922e:	b083      	sub	sp, #12
   19230:	4603      	mov	r3, r0
   19232:	9100      	str	r1, [sp, #0]
   19234:	f88d 3007 	strb.w	r3, [sp, #7]
   19238:	4613      	mov	r3, r2
   1923a:	f88d 3006 	strb.w	r3, [sp, #6]
  if (pCsfOutLen <= ATT_CSF_LEN)
   1923e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   19242:	2b01      	cmp	r3, #1
   19244:	d80b      	bhi.n	1925e <AttsCsfGetFeatures+0x32>
  {
    memcpy(pCsfOut, &attsCsfCb.attsCsfTable[connId - 1].csf, pCsfOutLen);
   19246:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1924a:	3b01      	subs	r3, #1
   1924c:	005b      	lsls	r3, r3, #1
   1924e:	4a06      	ldr	r2, [pc, #24]	; (19268 <AttsCsfGetFeatures+0x3c>)
   19250:	4413      	add	r3, r2
   19252:	f89d 2006 	ldrb.w	r2, [sp, #6]
   19256:	4619      	mov	r1, r3
   19258:	9800      	ldr	r0, [sp, #0]
   1925a:	f7f2 ff51 	bl	c100 <memcpy>
  }
}
   1925e:	bf00      	nop
   19260:	b003      	add	sp, #12
   19262:	f85d fb04 	ldr.w	pc, [sp], #4
   19266:	bf00      	nop
   19268:	10005008 	.word	0x10005008

0001926c <AttsCsfGetChangeAwareState>:
 *
 *  \return Client's change-aware state.
 */
/*************************************************************************************************/
uint8_t AttsCsfGetChangeAwareState(dmConnId_t connId)
{
   1926c:	b082      	sub	sp, #8
   1926e:	4603      	mov	r3, r0
   19270:	f88d 3007 	strb.w	r3, [sp, #7]
  return attsCsfCb.attsCsfTable[connId - 1].changeAwareState;
   19274:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19278:	3b01      	subs	r3, #1
   1927a:	4a03      	ldr	r2, [pc, #12]	; (19288 <AttsCsfGetChangeAwareState+0x1c>)
   1927c:	005b      	lsls	r3, r3, #1
   1927e:	4413      	add	r3, r2
   19280:	785b      	ldrb	r3, [r3, #1]
}
   19282:	4618      	mov	r0, r3
   19284:	b002      	add	sp, #8
   19286:	4770      	bx	lr
   19288:	10005008 	.word	0x10005008

0001928c <attsIndCcbByConnId>:
 *
 *  \return Pointer to connection control block or NULL if not in use.
 */
/*************************************************************************************************/
static attsIndCcb_t *attsIndCcbByConnId(dmConnId_t connId)
{
   1928c:	b500      	push	{lr}
   1928e:	b083      	sub	sp, #12
   19290:	4603      	mov	r3, r0
   19292:	f88d 3007 	strb.w	r3, [sp, #7]
  if (DmConnInUse(connId))
   19296:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1929a:	4618      	mov	r0, r3
   1929c:	f7fc fb00 	bl	158a0 <DmConnInUse>
   192a0:	4603      	mov	r3, r0
   192a2:	2b00      	cmp	r3, #0
   192a4:	d009      	beq.n	192ba <attsIndCcbByConnId+0x2e>
  {
    return &attsIndCb.ccb[connId - 1];
   192a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   192aa:	1e5a      	subs	r2, r3, #1
   192ac:	4613      	mov	r3, r2
   192ae:	00db      	lsls	r3, r3, #3
   192b0:	1a9b      	subs	r3, r3, r2
   192b2:	009b      	lsls	r3, r3, #2
   192b4:	4a03      	ldr	r2, [pc, #12]	; (192c4 <attsIndCcbByConnId+0x38>)
   192b6:	4413      	add	r3, r2
   192b8:	e000      	b.n	192bc <attsIndCcbByConnId+0x30>
  }
  else
  {
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
    return NULL;
   192ba:	2300      	movs	r3, #0
  }
}
   192bc:	4618      	mov	r0, r3
   192be:	b003      	add	sp, #12
   192c0:	f85d fb04 	ldr.w	pc, [sp], #4
   192c4:	10005018 	.word	0x10005018

000192c8 <attsPendIndNtfHandle>:
 *  \return TRUE if app callback's pending or max number of simultaneous notifications reached.
 *          FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t attsPendIndNtfHandle(attsIndCcb_t *pCcb, attsPktParam_t *pPkt)
{
   192c8:	b084      	sub	sp, #16
   192ca:	9001      	str	r0, [sp, #4]
   192cc:	9100      	str	r1, [sp, #0]
  uint8_t     opcode;
  uint8_t     pendNtfs;
  uint8_t     i;

  /* extract opcode */
  opcode = *(((uint8_t *) pPkt) + L2C_PAYLOAD_START);
   192ce:	9b00      	ldr	r3, [sp, #0]
   192d0:	7a1b      	ldrb	r3, [r3, #8]
   192d2:	f88d 300d 	strb.w	r3, [sp, #13]

  /* if indication */
  if (opcode == ATT_PDU_VALUE_IND)
   192d6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   192da:	2b1d      	cmp	r3, #29
   192dc:	d107      	bne.n	192ee <attsPendIndNtfHandle+0x26>
  {
    /* see if callback pending for indication */
    return (pCcb->pendIndHandle == ATT_HANDLE_NONE) ? FALSE : TRUE;
   192de:	9b01      	ldr	r3, [sp, #4]
   192e0:	8adb      	ldrh	r3, [r3, #22]
   192e2:	2b00      	cmp	r3, #0
   192e4:	bf14      	ite	ne
   192e6:	2301      	movne	r3, #1
   192e8:	2300      	moveq	r3, #0
   192ea:	b2db      	uxtb	r3, r3
   192ec:	e02f      	b.n	1934e <attsPendIndNtfHandle+0x86>
  }

  /* initialize number of notification callbacks pending */
  pendNtfs = 0;
   192ee:	2300      	movs	r3, #0
   192f0:	f88d 300f 	strb.w	r3, [sp, #15]

  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   192f4:	2300      	movs	r3, #0
   192f6:	f88d 300e 	strb.w	r3, [sp, #14]
   192fa:	e01d      	b.n	19338 <attsPendIndNtfHandle+0x70>
  {
    /* if callback pending for notification */
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   192fc:	f89d 200e 	ldrb.w	r2, [sp, #14]
   19300:	9b01      	ldr	r3, [sp, #4]
   19302:	320c      	adds	r2, #12
   19304:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   19308:	2b00      	cmp	r3, #0
   1930a:	d010      	beq.n	1932e <attsPendIndNtfHandle+0x66>
    {
      /* if callback pending for this handle */
      if (pCcb->pendNtfHandle[i] == pPkt->handle)
   1930c:	f89d 200e 	ldrb.w	r2, [sp, #14]
   19310:	9b01      	ldr	r3, [sp, #4]
   19312:	320c      	adds	r2, #12
   19314:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   19318:	9b00      	ldr	r3, [sp, #0]
   1931a:	885b      	ldrh	r3, [r3, #2]
   1931c:	429a      	cmp	r2, r3
   1931e:	d101      	bne.n	19324 <attsPendIndNtfHandle+0x5c>
      {
        /* callback pending for this notification */
        return TRUE;
   19320:	2301      	movs	r3, #1
   19322:	e014      	b.n	1934e <attsPendIndNtfHandle+0x86>
      }

      pendNtfs++;
   19324:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19328:	3301      	adds	r3, #1
   1932a:	f88d 300f 	strb.w	r3, [sp, #15]
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   1932e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   19332:	3301      	adds	r3, #1
   19334:	f88d 300e 	strb.w	r3, [sp, #14]
   19338:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1933c:	2b00      	cmp	r3, #0
   1933e:	d0dd      	beq.n	192fc <attsPendIndNtfHandle+0x34>
    }
  }

  /* no callback is pending for this notification but see if the maximum number of simultaneous
     notifications has been reached */
  return (pendNtfs < ATT_NUM_SIMUL_NTF) ? FALSE : TRUE;
   19340:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19344:	2b00      	cmp	r3, #0
   19346:	bf14      	ite	ne
   19348:	2301      	movne	r3, #1
   1934a:	2300      	moveq	r3, #0
   1934c:	b2db      	uxtb	r3, r3
}
   1934e:	4618      	mov	r0, r3
   19350:	b004      	add	sp, #16
   19352:	4770      	bx	lr

00019354 <attsSetPendNtfHandle>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsSetPendNtfHandle(attsIndCcb_t *pCcb, uint16_t handle)
{
   19354:	b084      	sub	sp, #16
   19356:	9001      	str	r0, [sp, #4]
   19358:	460b      	mov	r3, r1
   1935a:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t     i;

  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   1935e:	2300      	movs	r3, #0
   19360:	f88d 300f 	strb.w	r3, [sp, #15]
   19364:	e015      	b.n	19392 <attsSetPendNtfHandle+0x3e>
  {
    /* if entry free */
    if (pCcb->pendNtfHandle[i] == ATT_HANDLE_NONE)
   19366:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1936a:	9b01      	ldr	r3, [sp, #4]
   1936c:	320c      	adds	r2, #12
   1936e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   19372:	2b00      	cmp	r3, #0
   19374:	d108      	bne.n	19388 <attsSetPendNtfHandle+0x34>
    {
      /* set pending notification handle */
      pCcb->pendNtfHandle[i] = handle;
   19376:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1937a:	9b01      	ldr	r3, [sp, #4]
   1937c:	320c      	adds	r2, #12
   1937e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   19382:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      break;
   19386:	e009      	b.n	1939c <attsSetPendNtfHandle+0x48>
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   19388:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1938c:	3301      	adds	r3, #1
   1938e:	f88d 300f 	strb.w	r3, [sp, #15]
   19392:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19396:	2b00      	cmp	r3, #0
   19398:	d0e5      	beq.n	19366 <attsSetPendNtfHandle+0x12>
    }
  }
}
   1939a:	bf00      	nop
   1939c:	bf00      	nop
   1939e:	b004      	add	sp, #16
   193a0:	4770      	bx	lr

000193a2 <attsExecCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsExecCallback(dmConnId_t connId, uint16_t handle, uint8_t status)
{
   193a2:	b500      	push	{lr}
   193a4:	b085      	sub	sp, #20
   193a6:	4603      	mov	r3, r0
   193a8:	f88d 300f 	strb.w	r3, [sp, #15]
   193ac:	460b      	mov	r3, r1
   193ae:	f8ad 300c 	strh.w	r3, [sp, #12]
   193b2:	4613      	mov	r3, r2
   193b4:	f88d 300e 	strb.w	r3, [sp, #14]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   193b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   193bc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   193c0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   193c4:	2100      	movs	r1, #0
   193c6:	9100      	str	r1, [sp, #0]
   193c8:	210f      	movs	r1, #15
   193ca:	f002 fea7 	bl	1c11c <attExecCallback>
}
   193ce:	bf00      	nop
   193d0:	b005      	add	sp, #20
   193d2:	f85d fb04 	ldr.w	pc, [sp], #4

000193d6 <attsIndNtfCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndNtfCallback(dmConnId_t connId, attsIndCcb_t *pCcb, uint8_t status)
{
   193d6:	b500      	push	{lr}
   193d8:	b085      	sub	sp, #20
   193da:	4603      	mov	r3, r0
   193dc:	9100      	str	r1, [sp, #0]
   193de:	f88d 3007 	strb.w	r3, [sp, #7]
   193e2:	4613      	mov	r3, r2
   193e4:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t     i;

  /* if pending indication callback */
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   193e8:	9b00      	ldr	r3, [sp, #0]
   193ea:	8adb      	ldrh	r3, [r3, #22]
   193ec:	2b00      	cmp	r3, #0
   193ee:	d00b      	beq.n	19408 <attsIndNtfCallback+0x32>
  {
    /* call indication callback with status */
    attsExecCallback(connId, pCcb->pendIndHandle, status);
   193f0:	9b00      	ldr	r3, [sp, #0]
   193f2:	8ad9      	ldrh	r1, [r3, #22]
   193f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   193f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   193fc:	4618      	mov	r0, r3
   193fe:	f7ff ffd0 	bl	193a2 <attsExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
   19402:	9b00      	ldr	r3, [sp, #0]
   19404:	2200      	movs	r2, #0
   19406:	82da      	strh	r2, [r3, #22]
  }

  /* if any pending notification callback */
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   19408:	2300      	movs	r3, #0
   1940a:	f88d 300f 	strb.w	r3, [sp, #15]
   1940e:	e020      	b.n	19452 <attsIndNtfCallback+0x7c>
  {
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   19410:	f89d 200f 	ldrb.w	r2, [sp, #15]
   19414:	9b00      	ldr	r3, [sp, #0]
   19416:	320c      	adds	r2, #12
   19418:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1941c:	2b00      	cmp	r3, #0
   1941e:	d013      	beq.n	19448 <attsIndNtfCallback+0x72>
    {
      /* call notification callback with status */
      attsExecCallback(connId, pCcb->pendNtfHandle[i], status);
   19420:	f89d 200f 	ldrb.w	r2, [sp, #15]
   19424:	9b00      	ldr	r3, [sp, #0]
   19426:	320c      	adds	r2, #12
   19428:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   1942c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   19430:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19434:	4618      	mov	r0, r3
   19436:	f7ff ffb4 	bl	193a2 <attsExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
   1943a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1943e:	9b00      	ldr	r3, [sp, #0]
   19440:	320c      	adds	r2, #12
   19442:	2100      	movs	r1, #0
   19444:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (i = 0; i < ATT_NUM_SIMUL_NTF; i++)
   19448:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1944c:	3301      	adds	r3, #1
   1944e:	f88d 300f 	strb.w	r3, [sp, #15]
   19452:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19456:	2b00      	cmp	r3, #0
   19458:	d0da      	beq.n	19410 <attsIndNtfCallback+0x3a>
    }
  }
}
   1945a:	bf00      	nop
   1945c:	bf00      	nop
   1945e:	b005      	add	sp, #20
   19460:	f85d fb04 	ldr.w	pc, [sp], #4

00019464 <attsSetupMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsSetupMsg(attsIndCcb_t *pCcb, dmConnId_t connId, attsPktParam_t *pPkt)
{
   19464:	b500      	push	{lr}
   19466:	b087      	sub	sp, #28
   19468:	9003      	str	r0, [sp, #12]
   1946a:	460b      	mov	r3, r1
   1946c:	9201      	str	r2, [sp, #4]
   1946e:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t     opcode;
  uint16_t    handle;

  /* extract opcode */
  opcode = *(((uint8_t *) pPkt) + L2C_PAYLOAD_START);
   19472:	9b01      	ldr	r3, [sp, #4]
   19474:	7a1b      	ldrb	r3, [r3, #8]
   19476:	f88d 3017 	strb.w	r3, [sp, #23]

  /* copy handle (it may be overwritten in pPkt) */
  handle = pPkt->handle;
   1947a:	9b01      	ldr	r3, [sp, #4]
   1947c:	885b      	ldrh	r3, [r3, #2]
   1947e:	f8ad 3014 	strh.w	r3, [sp, #20]

  /* send pdu */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   19482:	9b03      	ldr	r3, [sp, #12]
   19484:	691b      	ldr	r3, [r3, #16]
   19486:	8b19      	ldrh	r1, [r3, #24]
   19488:	9b01      	ldr	r3, [sp, #4]
   1948a:	881a      	ldrh	r2, [r3, #0]
   1948c:	9b01      	ldr	r3, [sp, #4]
   1948e:	2004      	movs	r0, #4
   19490:	f003 fe5a 	bl	1d148 <L2cDataReq>

  /* if indication store handle and start timer */
  if (opcode == ATT_PDU_VALUE_IND)
   19494:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19498:	2b1d      	cmp	r3, #29
   1949a:	d113      	bne.n	194c4 <attsSetupMsg+0x60>
  {
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   1949c:	9b03      	ldr	r3, [sp, #12]
   1949e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   194a2:	82da      	strh	r2, [r3, #22]
   194a4:	9b03      	ldr	r3, [sp, #12]
   194a6:	8ada      	ldrh	r2, [r3, #22]
   194a8:	9b03      	ldr	r3, [sp, #12]
   194aa:	829a      	strh	r2, [r3, #20]
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
   194ac:	9b03      	ldr	r3, [sp, #12]
   194ae:	2222      	movs	r2, #34	; 0x22
   194b0:	729a      	strb	r2, [r3, #10]
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   194b2:	9a03      	ldr	r2, [sp, #12]
   194b4:	4b10      	ldr	r3, [pc, #64]	; (194f8 <attsSetupMsg+0x94>)
   194b6:	681b      	ldr	r3, [r3, #0]
   194b8:	799b      	ldrb	r3, [r3, #6]
   194ba:	4619      	mov	r1, r3
   194bc:	4610      	mov	r0, r2
   194be:	f006 fdb5 	bl	2002c <WsfTimerStartSec>
  /* else set pending notification callback for this handle */
  else
  {
    attsSetPendNtfHandle(pCcb, handle);
  }
}
   194c2:	e015      	b.n	194f0 <attsSetupMsg+0x8c>
  else if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   194c4:	9b03      	ldr	r3, [sp, #12]
   194c6:	691b      	ldr	r3, [r3, #16]
   194c8:	7f5b      	ldrb	r3, [r3, #29]
   194ca:	f003 0302 	and.w	r3, r3, #2
   194ce:	2b00      	cmp	r3, #0
   194d0:	d108      	bne.n	194e4 <attsSetupMsg+0x80>
    attsExecCallback(connId, handle, ATT_SUCCESS);
   194d2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   194d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   194da:	2200      	movs	r2, #0
   194dc:	4618      	mov	r0, r3
   194de:	f7ff ff60 	bl	193a2 <attsExecCallback>
}
   194e2:	e005      	b.n	194f0 <attsSetupMsg+0x8c>
    attsSetPendNtfHandle(pCcb, handle);
   194e4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   194e8:	4619      	mov	r1, r3
   194ea:	9803      	ldr	r0, [sp, #12]
   194ec:	f7ff ff32 	bl	19354 <attsSetPendNtfHandle>
}
   194f0:	bf00      	nop
   194f2:	b007      	add	sp, #28
   194f4:	f85d fb04 	ldr.w	pc, [sp], #4
   194f8:	10002bb0 	.word	0x10002bb0

000194fc <attsIndConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   194fc:	b500      	push	{lr}
   194fe:	b085      	sub	sp, #20
   19500:	9001      	str	r0, [sp, #4]
   19502:	9100      	str	r1, [sp, #0]
  attsIndCcb_t *pIndCcb;
  uint8_t      status;

  /* if connection opened */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   19504:	9b00      	ldr	r3, [sp, #0]
   19506:	789b      	ldrb	r3, [r3, #2]
   19508:	2b27      	cmp	r3, #39	; 0x27
   1950a:	d02f      	beq.n	1956c <attsIndConnCback+0x70>
  {

  }
  /* if connection closed */
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1950c:	9b00      	ldr	r3, [sp, #0]
   1950e:	789b      	ldrb	r3, [r3, #2]
   19510:	2b28      	cmp	r3, #40	; 0x28
   19512:	d12b      	bne.n	1956c <attsIndConnCback+0x70>
  {
    /* set status */
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   19514:	9b00      	ldr	r3, [sp, #0]
   19516:	78db      	ldrb	r3, [r3, #3]
   19518:	2b00      	cmp	r3, #0
   1951a:	d105      	bne.n	19528 <attsIndConnCback+0x2c>
    {
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   1951c:	9b00      	ldr	r3, [sp, #0]
   1951e:	7a1b      	ldrb	r3, [r3, #8]
   19520:	3320      	adds	r3, #32
   19522:	f88d 300f 	strb.w	r3, [sp, #15]
   19526:	e004      	b.n	19532 <attsIndConnCback+0x36>
    }
    else
    {
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   19528:	9b00      	ldr	r3, [sp, #0]
   1952a:	78db      	ldrb	r3, [r3, #3]
   1952c:	3320      	adds	r3, #32
   1952e:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    /* get server control block directly */
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
   19532:	9b01      	ldr	r3, [sp, #4]
   19534:	7f1b      	ldrb	r3, [r3, #28]
   19536:	1e5a      	subs	r2, r3, #1
   19538:	4613      	mov	r3, r2
   1953a:	00db      	lsls	r3, r3, #3
   1953c:	1a9b      	subs	r3, r3, r2
   1953e:	009b      	lsls	r3, r3, #2
   19540:	4a0c      	ldr	r2, [pc, #48]	; (19574 <attsIndConnCback+0x78>)
   19542:	4413      	add	r3, r2
   19544:	9302      	str	r3, [sp, #8]

    /* if outstanding indication */
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   19546:	9b02      	ldr	r3, [sp, #8]
   19548:	8a9b      	ldrh	r3, [r3, #20]
   1954a:	2b00      	cmp	r3, #0
   1954c:	d006      	beq.n	1955c <attsIndConnCback+0x60>
    {
      /* stop timer */
      WsfTimerStop(&pIndCcb->outIndTimer);
   1954e:	9b02      	ldr	r3, [sp, #8]
   19550:	4618      	mov	r0, r3
   19552:	f006 fd8f 	bl	20074 <WsfTimerStop>
      pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   19556:	9b02      	ldr	r3, [sp, #8]
   19558:	2200      	movs	r2, #0
   1955a:	829a      	strh	r2, [r3, #20]
    }

    /* call pending indication and notification callback */
    attsIndNtfCallback(pCcb->connId, pIndCcb, status);
   1955c:	9b01      	ldr	r3, [sp, #4]
   1955e:	7f1b      	ldrb	r3, [r3, #28]
   19560:	f89d 200f 	ldrb.w	r2, [sp, #15]
   19564:	9902      	ldr	r1, [sp, #8]
   19566:	4618      	mov	r0, r3
   19568:	f7ff ff35 	bl	193d6 <attsIndNtfCallback>
  }
}
   1956c:	bf00      	nop
   1956e:	b005      	add	sp, #20
   19570:	f85d fb04 	ldr.w	pc, [sp], #4
   19574:	10005018 	.word	0x10005018

00019578 <attsIndMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndMsgCback(attsApiMsg_t *pMsg)
{
   19578:	b500      	push	{lr}
   1957a:	b085      	sub	sp, #20
   1957c:	9001      	str	r0, [sp, #4]
  attsIndCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   1957e:	9b01      	ldr	r3, [sp, #4]
   19580:	881b      	ldrh	r3, [r3, #0]
   19582:	b2db      	uxtb	r3, r3
   19584:	4618      	mov	r0, r3
   19586:	f7ff fe81 	bl	1928c <attsIndCcbByConnId>
   1958a:	9003      	str	r0, [sp, #12]
   1958c:	9b03      	ldr	r3, [sp, #12]
   1958e:	2b00      	cmp	r3, #0
   19590:	d109      	bne.n	195a6 <attsIndMsgCback+0x2e>
  {
    /* if message has a packet buffer free packet buffer */
    if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   19592:	9b01      	ldr	r3, [sp, #4]
   19594:	789b      	ldrb	r3, [r3, #2]
   19596:	2b21      	cmp	r3, #33	; 0x21
   19598:	d14d      	bne.n	19636 <attsIndMsgCback+0xbe>
    {
      WsfMsgFree(pMsg->pPkt);
   1959a:	9b01      	ldr	r3, [sp, #4]
   1959c:	685b      	ldr	r3, [r3, #4]
   1959e:	4618      	mov	r0, r3
   195a0:	f006 f9c0 	bl	1f924 <WsfMsgFree>
    }

    /* ignore if connection not in use */
    return;
   195a4:	e047      	b.n	19636 <attsIndMsgCback+0xbe>
  }

  /* if an API message to send packet */
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   195a6:	9b01      	ldr	r3, [sp, #4]
   195a8:	789b      	ldrb	r3, [r3, #2]
   195aa:	2b21      	cmp	r3, #33	; 0x21
   195ac:	d122      	bne.n	195f4 <attsIndMsgCback+0x7c>
  {
    /* verify no API message already pending */
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
   195ae:	9b01      	ldr	r3, [sp, #4]
   195b0:	685b      	ldr	r3, [r3, #4]
   195b2:	4619      	mov	r1, r3
   195b4:	9803      	ldr	r0, [sp, #12]
   195b6:	f7ff fe87 	bl	192c8 <attsPendIndNtfHandle>
   195ba:	4603      	mov	r3, r0
   195bc:	2b00      	cmp	r3, #0
   195be:	d00f      	beq.n	195e0 <attsIndMsgCback+0x68>
    {
      /* call callback with failure status and free packet buffer */
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pMsg->pPkt->handle, ATT_ERR_OVERFLOW);
   195c0:	9b01      	ldr	r3, [sp, #4]
   195c2:	881b      	ldrh	r3, [r3, #0]
   195c4:	b2d8      	uxtb	r0, r3
   195c6:	9b01      	ldr	r3, [sp, #4]
   195c8:	685b      	ldr	r3, [r3, #4]
   195ca:	885b      	ldrh	r3, [r3, #2]
   195cc:	2272      	movs	r2, #114	; 0x72
   195ce:	4619      	mov	r1, r3
   195d0:	f7ff fee7 	bl	193a2 <attsExecCallback>
      WsfMsgFree(pMsg->pPkt);
   195d4:	9b01      	ldr	r3, [sp, #4]
   195d6:	685b      	ldr	r3, [r3, #4]
   195d8:	4618      	mov	r0, r3
   195da:	f006 f9a3 	bl	1f924 <WsfMsgFree>
   195de:	e02b      	b.n	19638 <attsIndMsgCback+0xc0>
    }
    /* otherwise ready to send; set up request */
    else
    {
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
   195e0:	9b01      	ldr	r3, [sp, #4]
   195e2:	881b      	ldrh	r3, [r3, #0]
   195e4:	b2d9      	uxtb	r1, r3
   195e6:	9b01      	ldr	r3, [sp, #4]
   195e8:	685b      	ldr	r3, [r3, #4]
   195ea:	461a      	mov	r2, r3
   195ec:	9803      	ldr	r0, [sp, #12]
   195ee:	f7ff ff39 	bl	19464 <attsSetupMsg>
   195f2:	e021      	b.n	19638 <attsIndMsgCback+0xc0>
    }
  }
  /* else if indication timeout */
  else if (pMsg->hdr.event == ATTS_MSG_IND_TIMEOUT)
   195f4:	9b01      	ldr	r3, [sp, #4]
   195f6:	789b      	ldrb	r3, [r3, #2]
   195f8:	2b22      	cmp	r3, #34	; 0x22
   195fa:	d11d      	bne.n	19638 <attsIndMsgCback+0xc0>
  {
    /* if outstanding indication */
    if (pCcb->outIndHandle != ATT_HANDLE_NONE)
   195fc:	9b03      	ldr	r3, [sp, #12]
   195fe:	8a9b      	ldrh	r3, [r3, #20]
   19600:	2b00      	cmp	r3, #0
   19602:	d019      	beq.n	19638 <attsIndMsgCback+0xc0>
    {
      /* clear out handle */
      pCcb->outIndHandle = ATT_HANDLE_NONE;
   19604:	9b03      	ldr	r3, [sp, #12]
   19606:	2200      	movs	r2, #0
   19608:	829a      	strh	r2, [r3, #20]

      /* call callback with timeout error */
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pCcb->pendIndHandle, ATT_ERR_TIMEOUT);
   1960a:	9b01      	ldr	r3, [sp, #4]
   1960c:	881b      	ldrh	r3, [r3, #0]
   1960e:	b2d8      	uxtb	r0, r3
   19610:	9b03      	ldr	r3, [sp, #12]
   19612:	8adb      	ldrh	r3, [r3, #22]
   19614:	2271      	movs	r2, #113	; 0x71
   19616:	4619      	mov	r1, r3
   19618:	f7ff fec3 	bl	193a2 <attsExecCallback>
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
   1961c:	9b03      	ldr	r3, [sp, #12]
   1961e:	2200      	movs	r2, #0
   19620:	82da      	strh	r2, [r3, #22]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   19622:	9b03      	ldr	r3, [sp, #12]
   19624:	691b      	ldr	r3, [r3, #16]
   19626:	7f5a      	ldrb	r2, [r3, #29]
   19628:	9b03      	ldr	r3, [sp, #12]
   1962a:	691b      	ldr	r3, [r3, #16]
   1962c:	f042 0204 	orr.w	r2, r2, #4
   19630:	b2d2      	uxtb	r2, r2
   19632:	775a      	strb	r2, [r3, #29]
   19634:	e000      	b.n	19638 <attsIndMsgCback+0xc0>
    return;
   19636:	bf00      	nop
    }
  }
}
   19638:	b005      	add	sp, #20
   1963a:	f85d fb04 	ldr.w	pc, [sp], #4

0001963e <attsIndCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndCtrlCback(wsfMsgHdr_t *pMsg)
{
   1963e:	b500      	push	{lr}
   19640:	b085      	sub	sp, #20
   19642:	9001      	str	r0, [sp, #4]
  attsIndCcb_t   *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   19644:	9b01      	ldr	r3, [sp, #4]
   19646:	881b      	ldrh	r3, [r3, #0]
   19648:	b2db      	uxtb	r3, r3
   1964a:	4618      	mov	r0, r3
   1964c:	f7ff fe1e 	bl	1928c <attsIndCcbByConnId>
   19650:	9003      	str	r0, [sp, #12]
   19652:	9b03      	ldr	r3, [sp, #12]
   19654:	2b00      	cmp	r3, #0
   19656:	d007      	beq.n	19668 <attsIndCtrlCback+0x2a>
  {
    /* call pending indication and notification callback */
    attsIndNtfCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   19658:	9b01      	ldr	r3, [sp, #4]
   1965a:	881b      	ldrh	r3, [r3, #0]
   1965c:	b2db      	uxtb	r3, r3
   1965e:	2200      	movs	r2, #0
   19660:	9903      	ldr	r1, [sp, #12]
   19662:	4618      	mov	r0, r3
   19664:	f7ff feb7 	bl	193d6 <attsIndNtfCallback>
  }
}
   19668:	bf00      	nop
   1966a:	b005      	add	sp, #20
   1966c:	f85d fb04 	ldr.w	pc, [sp], #4

00019670 <attsHandleValueIndNtf>:
 *  \return None.
 */
/*************************************************************************************************/
static void attsHandleValueIndNtf(dmConnId_t connId, uint16_t handle, uint16_t valueLen,
                                  uint8_t *pValue, uint8_t opcode, bool_t zeroCpy)
{
   19670:	b500      	push	{lr}
   19672:	b089      	sub	sp, #36	; 0x24
   19674:	9301      	str	r3, [sp, #4]
   19676:	4603      	mov	r3, r0
   19678:	f88d 300f 	strb.w	r3, [sp, #15]
   1967c:	460b      	mov	r3, r1
   1967e:	f8ad 300c 	strh.w	r3, [sp, #12]
   19682:	4613      	mov	r3, r2
   19684:	f8ad 300a 	strh.w	r3, [sp, #10]
  attsIndCcb_t   *pCcb;
  uint16_t       mtu;
  bool_t         transTimedOut;
  bool_t         pktSent = FALSE;
   19688:	2300      	movs	r3, #0
   1968a:	f88d 301c 	strb.w	r3, [sp, #28]

  WsfTaskLock();
   1968e:	f006 f9bd 	bl	1fa0c <WsfTaskLock>

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId(connId)) != NULL)
   19692:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19696:	4618      	mov	r0, r3
   19698:	f7ff fdf8 	bl	1928c <attsIndCcbByConnId>
   1969c:	9006      	str	r0, [sp, #24]
   1969e:	9b06      	ldr	r3, [sp, #24]
   196a0:	2b00      	cmp	r3, #0
   196a2:	d011      	beq.n	196c8 <attsHandleValueIndNtf+0x58>
  {
    /* get MTU size */
    mtu = pCcb->pMainCcb->mtu;
   196a4:	9b06      	ldr	r3, [sp, #24]
   196a6:	691b      	ldr	r3, [r3, #16]
   196a8:	8b5b      	ldrh	r3, [r3, #26]
   196aa:	f8ad 301e 	strh.w	r3, [sp, #30]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   196ae:	9b06      	ldr	r3, [sp, #24]
   196b0:	691b      	ldr	r3, [r3, #16]
   196b2:	7f5b      	ldrb	r3, [r3, #29]
   196b4:	f003 0304 	and.w	r3, r3, #4
   196b8:	2b00      	cmp	r3, #0
   196ba:	bf14      	ite	ne
   196bc:	2301      	movne	r3, #1
   196be:	2300      	moveq	r3, #0
   196c0:	b2db      	uxtb	r3, r3
   196c2:	f88d 301d 	strb.w	r3, [sp, #29]
   196c6:	e005      	b.n	196d4 <attsHandleValueIndNtf+0x64>
  }
  /* else connection not in use */
  else
  {
    /* MTU size unknown */
    mtu = 0;
   196c8:	2300      	movs	r3, #0
   196ca:	f8ad 301e 	strh.w	r3, [sp, #30]
    transTimedOut = FALSE;
   196ce:	2300      	movs	r3, #0
   196d0:	f88d 301d 	strb.w	r3, [sp, #29]
  }

  WsfTaskUnlock();
   196d4:	f006 f99f 	bl	1fa16 <WsfTaskUnlock>

  /* if MTU size known for connection */
  if (mtu > 0)
   196d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   196dc:	2b00      	cmp	r3, #0
   196de:	f000 808f 	beq.w	19800 <attsHandleValueIndNtf+0x190>
  {
    /* if no transaction's timed out */
    if (!transTimedOut)
   196e2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   196e6:	2b00      	cmp	r3, #0
   196e8:	f040 8082 	bne.w	197f0 <attsHandleValueIndNtf+0x180>
    {
      /* Only send notifications and indications if client is aware of any database changes. */
      if (attsCsfIsClientChangeAware(connId, handle))
   196ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   196f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   196f4:	4611      	mov	r1, r2
   196f6:	4618      	mov	r0, r3
   196f8:	f7ff fc32 	bl	18f60 <attsCsfIsClientChangeAware>
   196fc:	4603      	mov	r3, r0
   196fe:	2b00      	cmp	r3, #0
   19700:	d07e      	beq.n	19800 <attsHandleValueIndNtf+0x190>
      {
        /* if packet length is less than or equal to negotiated MTU */
        if ((valueLen + ATT_VALUE_NTF_LEN) <= mtu)
   19702:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   19706:	1c9a      	adds	r2, r3, #2
   19708:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1970c:	429a      	cmp	r2, r3
   1970e:	da66      	bge.n	197de <attsHandleValueIndNtf+0x16e>
        {
          attsApiMsg_t  *pMsg;
          uint8_t       *p;

          /* allocate message buffer */
          if ((pMsg = WsfMsgAlloc(sizeof(attsApiMsg_t))) != NULL)
   19710:	2008      	movs	r0, #8
   19712:	f006 f8ef 	bl	1f8f4 <WsfMsgAlloc>
   19716:	9005      	str	r0, [sp, #20]
   19718:	9b05      	ldr	r3, [sp, #20]
   1971a:	2b00      	cmp	r3, #0
   1971c:	d070      	beq.n	19800 <attsHandleValueIndNtf+0x190>
          {
            /* set parameters */
            pMsg->hdr.param = connId;
   1971e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19722:	b29a      	uxth	r2, r3
   19724:	9b05      	ldr	r3, [sp, #20]
   19726:	801a      	strh	r2, [r3, #0]
            pMsg->hdr.event = ATTS_MSG_API_VALUE_IND_NTF;
   19728:	9b05      	ldr	r3, [sp, #20]
   1972a:	2221      	movs	r2, #33	; 0x21
   1972c:	709a      	strb	r2, [r3, #2]

            if (zeroCpy)
   1972e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19732:	2b00      	cmp	r3, #0
   19734:	d005      	beq.n	19742 <attsHandleValueIndNtf+0xd2>
            {
              /* use packet buffer provided */
              pMsg->pPkt = (attsPktParam_t *)(pValue - ATT_VALUE_IND_NTF_BUF_LEN);
   19736:	9b01      	ldr	r3, [sp, #4]
   19738:	f1a3 020b 	sub.w	r2, r3, #11
   1973c:	9b05      	ldr	r3, [sp, #20]
   1973e:	605a      	str	r2, [r3, #4]
   19740:	e009      	b.n	19756 <attsHandleValueIndNtf+0xe6>
            }
            else
            {
              /* allocate packet buffer */
              pMsg->pPkt = attMsgAlloc(ATT_VALUE_IND_NTF_BUF_LEN + valueLen);
   19742:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   19746:	330b      	adds	r3, #11
   19748:	b29b      	uxth	r3, r3
   1974a:	4618      	mov	r0, r3
   1974c:	f002 fd22 	bl	1c194 <attMsgAlloc>
   19750:	4602      	mov	r2, r0
   19752:	9b05      	ldr	r3, [sp, #20]
   19754:	605a      	str	r2, [r3, #4]
            }

            if (pMsg->pPkt != NULL)
   19756:	9b05      	ldr	r3, [sp, #20]
   19758:	685b      	ldr	r3, [r3, #4]
   1975a:	2b00      	cmp	r3, #0
   1975c:	d03b      	beq.n	197d6 <attsHandleValueIndNtf+0x166>
            {
              /* set data length and handle (ind and ntf have same header length) */
              pMsg->pPkt->len = ATT_VALUE_IND_LEN + valueLen;
   1975e:	9b05      	ldr	r3, [sp, #20]
   19760:	685b      	ldr	r3, [r3, #4]
   19762:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   19766:	3203      	adds	r2, #3
   19768:	b292      	uxth	r2, r2
   1976a:	801a      	strh	r2, [r3, #0]
              pMsg->pPkt->handle = handle;
   1976c:	9b05      	ldr	r3, [sp, #20]
   1976e:	685b      	ldr	r3, [r3, #4]
   19770:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   19774:	805a      	strh	r2, [r3, #2]

              /* build packet */
              p = (uint8_t *)pMsg->pPkt + L2C_PAYLOAD_START;
   19776:	9b05      	ldr	r3, [sp, #20]
   19778:	685b      	ldr	r3, [r3, #4]
   1977a:	3308      	adds	r3, #8
   1977c:	9304      	str	r3, [sp, #16]
              UINT8_TO_BSTREAM(p, opcode);
   1977e:	9b04      	ldr	r3, [sp, #16]
   19780:	1c5a      	adds	r2, r3, #1
   19782:	9204      	str	r2, [sp, #16]
   19784:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   19788:	701a      	strb	r2, [r3, #0]
              UINT16_TO_BSTREAM(p, handle);
   1978a:	9b04      	ldr	r3, [sp, #16]
   1978c:	1c5a      	adds	r2, r3, #1
   1978e:	9204      	str	r2, [sp, #16]
   19790:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   19794:	b2d2      	uxtb	r2, r2
   19796:	701a      	strb	r2, [r3, #0]
   19798:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1979c:	0a1b      	lsrs	r3, r3, #8
   1979e:	b299      	uxth	r1, r3
   197a0:	9b04      	ldr	r3, [sp, #16]
   197a2:	1c5a      	adds	r2, r3, #1
   197a4:	9204      	str	r2, [sp, #16]
   197a6:	b2ca      	uxtb	r2, r1
   197a8:	701a      	strb	r2, [r3, #0]

              if (!zeroCpy)
   197aa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   197ae:	2b00      	cmp	r3, #0
   197b0:	d106      	bne.n	197c0 <attsHandleValueIndNtf+0x150>
              {
                memcpy(p, pValue, valueLen);
   197b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   197b6:	461a      	mov	r2, r3
   197b8:	9901      	ldr	r1, [sp, #4]
   197ba:	9804      	ldr	r0, [sp, #16]
   197bc:	f7f2 fca0 	bl	c100 <memcpy>
              }

              /* send message */
              WsfMsgSend(attCb.handlerId, pMsg);
   197c0:	4b18      	ldr	r3, [pc, #96]	; (19824 <attsHandleValueIndNtf+0x1b4>)
   197c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   197c6:	9905      	ldr	r1, [sp, #20]
   197c8:	4618      	mov	r0, r3
   197ca:	f006 f8b7 	bl	1f93c <WsfMsgSend>
              pktSent = TRUE;
   197ce:	2301      	movs	r3, #1
   197d0:	f88d 301c 	strb.w	r3, [sp, #28]
   197d4:	e014      	b.n	19800 <attsHandleValueIndNtf+0x190>
            }
            else
            {
              /* free message buffer if packet buffer alloc failed */
              WsfMsgFree(pMsg);
   197d6:	9805      	ldr	r0, [sp, #20]
   197d8:	f006 f8a4 	bl	1f924 <WsfMsgFree>
   197dc:	e010      	b.n	19800 <attsHandleValueIndNtf+0x190>
        }
        /* packet length exceeds MTU size */
        else
        {
          /* call callback with failure status */
          attsExecCallback(connId, handle, ATT_ERR_MTU_EXCEEDED);
   197de:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   197e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   197e6:	2277      	movs	r2, #119	; 0x77
   197e8:	4618      	mov	r0, r3
   197ea:	f7ff fdda 	bl	193a2 <attsExecCallback>
   197ee:	e007      	b.n	19800 <attsHandleValueIndNtf+0x190>
    }
    else
    /* transaction's timed out */
    {
      /* call callback with failure status */
      attsExecCallback(connId, handle, ATT_ERR_TIMEOUT);
   197f0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   197f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   197f8:	2271      	movs	r2, #113	; 0x71
   197fa:	4618      	mov	r0, r3
   197fc:	f7ff fdd1 	bl	193a2 <attsExecCallback>
    }
  }

  /* if packet wasn't sent and it's a zero-copy packet */
  if (!pktSent && zeroCpy)
   19800:	f89d 301c 	ldrb.w	r3, [sp, #28]
   19804:	2b00      	cmp	r3, #0
   19806:	d109      	bne.n	1981c <attsHandleValueIndNtf+0x1ac>
   19808:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1980c:	2b00      	cmp	r3, #0
   1980e:	d005      	beq.n	1981c <attsHandleValueIndNtf+0x1ac>
  {
    /* free packet buffer provided */
    AttMsgFree(pValue, opcode);
   19810:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   19814:	4619      	mov	r1, r3
   19816:	9801      	ldr	r0, [sp, #4]
   19818:	f002 fd4c 	bl	1c2b4 <AttMsgFree>
  }
}
   1981c:	bf00      	nop
   1981e:	b009      	add	sp, #36	; 0x24
   19820:	f85d fb04 	ldr.w	pc, [sp], #4
   19824:	100050c0 	.word	0x100050c0

00019828 <attsProcValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcValueCnf(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   19828:	b500      	push	{lr}
   1982a:	b087      	sub	sp, #28
   1982c:	9003      	str	r0, [sp, #12]
   1982e:	460b      	mov	r3, r1
   19830:	9201      	str	r2, [sp, #4]
   19832:	f8ad 300a 	strh.w	r3, [sp, #10]
  attsIndCcb_t    *pIndCcb;

  /* get server indication CCB */
  if ((pIndCcb = attsIndCcbByConnId(pCcb->connId)) == NULL)
   19836:	9b03      	ldr	r3, [sp, #12]
   19838:	7f1b      	ldrb	r3, [r3, #28]
   1983a:	4618      	mov	r0, r3
   1983c:	f7ff fd26 	bl	1928c <attsIndCcbByConnId>
   19840:	9005      	str	r0, [sp, #20]
   19842:	9b05      	ldr	r3, [sp, #20]
   19844:	2b00      	cmp	r3, #0
   19846:	d01c      	beq.n	19882 <attsProcValueCnf+0x5a>
  {
    return;
  }

  /* if an outstanding indication */
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   19848:	9b05      	ldr	r3, [sp, #20]
   1984a:	8a9b      	ldrh	r3, [r3, #20]
   1984c:	2b00      	cmp	r3, #0
   1984e:	d019      	beq.n	19884 <attsProcValueCnf+0x5c>
  {
    /* clear outstanding indication */
    pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   19850:	9b05      	ldr	r3, [sp, #20]
   19852:	2200      	movs	r2, #0
   19854:	829a      	strh	r2, [r3, #20]

    /* stop indication timer */
    WsfTimerStop(&pIndCcb->outIndTimer);
   19856:	9b05      	ldr	r3, [sp, #20]
   19858:	4618      	mov	r0, r3
   1985a:	f006 fc0b 	bl	20074 <WsfTimerStop>

    /* call callback if flow control permits */
    if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   1985e:	9b03      	ldr	r3, [sp, #12]
   19860:	7f5b      	ldrb	r3, [r3, #29]
   19862:	f003 0302 	and.w	r3, r3, #2
   19866:	2b00      	cmp	r3, #0
   19868:	d10c      	bne.n	19884 <attsProcValueCnf+0x5c>
    {
      attsExecCallback(pCcb->connId, pIndCcb->pendIndHandle, ATT_SUCCESS);
   1986a:	9b03      	ldr	r3, [sp, #12]
   1986c:	7f18      	ldrb	r0, [r3, #28]
   1986e:	9b05      	ldr	r3, [sp, #20]
   19870:	8adb      	ldrh	r3, [r3, #22]
   19872:	2200      	movs	r2, #0
   19874:	4619      	mov	r1, r3
   19876:	f7ff fd94 	bl	193a2 <attsExecCallback>
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
   1987a:	9b05      	ldr	r3, [sp, #20]
   1987c:	2200      	movs	r2, #0
   1987e:	82da      	strh	r2, [r3, #22]
   19880:	e000      	b.n	19884 <attsProcValueCnf+0x5c>
    return;
   19882:	bf00      	nop
    }
  }
}
   19884:	b007      	add	sp, #28
   19886:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001988c <AttsIndInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsIndInit(void)
{
   1988c:	b082      	sub	sp, #8
  uint8_t       i;
  attsIndCcb_t  *pCcb;

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   1988e:	2300      	movs	r3, #0
   19890:	f88d 3007 	strb.w	r3, [sp, #7]
   19894:	4b15      	ldr	r3, [pc, #84]	; (198ec <AttsIndInit+0x60>)
   19896:	9300      	str	r3, [sp, #0]
   19898:	e01d      	b.n	198d6 <AttsIndInit+0x4a>
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
   1989a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1989e:	4613      	mov	r3, r2
   198a0:	00db      	lsls	r3, r3, #3
   198a2:	4413      	add	r3, r2
   198a4:	009b      	lsls	r3, r3, #2
   198a6:	4a12      	ldr	r2, [pc, #72]	; (198f0 <AttsIndInit+0x64>)
   198a8:	441a      	add	r2, r3
   198aa:	9b00      	ldr	r3, [sp, #0]
   198ac:	611a      	str	r2, [r3, #16]

    /* initialize timer */
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   198ae:	4b10      	ldr	r3, [pc, #64]	; (198f0 <AttsIndInit+0x64>)
   198b0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   198b4:	9b00      	ldr	r3, [sp, #0]
   198b6:	731a      	strb	r2, [r3, #12]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   198b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   198bc:	b29b      	uxth	r3, r3
   198be:	3301      	adds	r3, #1
   198c0:	b29a      	uxth	r2, r3
   198c2:	9b00      	ldr	r3, [sp, #0]
   198c4:	811a      	strh	r2, [r3, #8]
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
   198c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   198ca:	3301      	adds	r3, #1
   198cc:	f88d 3007 	strb.w	r3, [sp, #7]
   198d0:	9b00      	ldr	r3, [sp, #0]
   198d2:	331c      	adds	r3, #28
   198d4:	9300      	str	r3, [sp, #0]
   198d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   198da:	2b02      	cmp	r3, #2
   198dc:	d9dd      	bls.n	1989a <AttsIndInit+0xe>
  }

  /* set up callback interface */
  attsCb.pInd = &attsIndFcnIf;
   198de:	4b05      	ldr	r3, [pc, #20]	; (198f4 <AttsIndInit+0x68>)
   198e0:	4a05      	ldr	r2, [pc, #20]	; (198f8 <AttsIndInit+0x6c>)
   198e2:	609a      	str	r2, [r3, #8]
}
   198e4:	bf00      	nop
   198e6:	b002      	add	sp, #8
   198e8:	4770      	bx	lr
   198ea:	bf00      	nop
   198ec:	10005018 	.word	0x10005018
   198f0:	100050c0 	.word	0x100050c0
   198f4:	1000506c 	.word	0x1000506c
   198f8:	00028670 	.word	0x00028670

000198fc <AttsHandleValueInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsHandleValueInd(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   198fc:	b500      	push	{lr}
   198fe:	b087      	sub	sp, #28
   19900:	9303      	str	r3, [sp, #12]
   19902:	4603      	mov	r3, r0
   19904:	f88d 3017 	strb.w	r3, [sp, #23]
   19908:	460b      	mov	r3, r1
   1990a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1990e:	4613      	mov	r3, r2
   19910:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsHandleValueIndNtf(connId, handle, valueLen, pValue, ATT_PDU_VALUE_IND, FALSE);
   19914:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   19918:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1991c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   19920:	2300      	movs	r3, #0
   19922:	9301      	str	r3, [sp, #4]
   19924:	231d      	movs	r3, #29
   19926:	9300      	str	r3, [sp, #0]
   19928:	9b03      	ldr	r3, [sp, #12]
   1992a:	f7ff fea1 	bl	19670 <attsHandleValueIndNtf>
}
   1992e:	bf00      	nop
   19930:	b007      	add	sp, #28
   19932:	f85d fb04 	ldr.w	pc, [sp], #4

00019936 <AttsHandleValueNtf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsHandleValueNtf(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   19936:	b500      	push	{lr}
   19938:	b087      	sub	sp, #28
   1993a:	9303      	str	r3, [sp, #12]
   1993c:	4603      	mov	r3, r0
   1993e:	f88d 3017 	strb.w	r3, [sp, #23]
   19942:	460b      	mov	r3, r1
   19944:	f8ad 3014 	strh.w	r3, [sp, #20]
   19948:	4613      	mov	r3, r2
   1994a:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsHandleValueIndNtf(connId, handle, valueLen, pValue, ATT_PDU_VALUE_NTF, FALSE);
   1994e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   19952:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   19956:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1995a:	2300      	movs	r3, #0
   1995c:	9301      	str	r3, [sp, #4]
   1995e:	231b      	movs	r3, #27
   19960:	9300      	str	r3, [sp, #0]
   19962:	9b03      	ldr	r3, [sp, #12]
   19964:	f7ff fe84 	bl	19670 <attsHandleValueIndNtf>
}
   19968:	bf00      	nop
   1996a:	b007      	add	sp, #28
   1996c:	f85d fb04 	ldr.w	pc, [sp], #4

00019970 <attsDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   19970:	b500      	push	{lr}
   19972:	b087      	sub	sp, #28
   19974:	4603      	mov	r3, r0
   19976:	9200      	str	r2, [sp, #0]
   19978:	f8ad 3006 	strh.w	r3, [sp, #6]
   1997c:	460b      	mov	r3, r1
   1997e:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsProcFcn_t procFcn;
  attCcb_t      *pCcb;
  uint16_t      attHandle;

  /* get connection cb for this handle */
  if ((pCcb = attCcbByHandle(handle)) == NULL)
   19982:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19986:	4618      	mov	r0, r3
   19988:	f002 fb4c 	bl	1c024 <attCcbByHandle>
   1998c:	9004      	str	r0, [sp, #16]
   1998e:	9b04      	ldr	r3, [sp, #16]
   19990:	2b00      	cmp	r3, #0
   19992:	f000 8097 	beq.w	19ac4 <attsDataCback+0x154>
  {
    return;
  }

  /* parse opcode */
  opcode = *(pPacket + L2C_PAYLOAD_START);
   19996:	9b00      	ldr	r3, [sp, #0]
   19998:	7a1b      	ldrb	r3, [r3, #8]
   1999a:	f88d 300f 	strb.w	r3, [sp, #15]

  /* get method */
  if ((opcode <= ATT_PDU_WRITE_REQ) ||
   1999e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   199a2:	2b12      	cmp	r3, #18
   199a4:	d907      	bls.n	199b6 <attsDataCback+0x46>
   199a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   199aa:	2b15      	cmp	r3, #21
   199ac:	d909      	bls.n	199c2 <attsDataCback+0x52>
      ((opcode >= ATT_PDU_PREP_WRITE_REQ) && (opcode <= ATT_PDU_VALUE_CNF)))
   199ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
   199b2:	2b1e      	cmp	r3, #30
   199b4:	d805      	bhi.n	199c2 <attsDataCback+0x52>
  {
    method = ATT_OPCODE_2_METHOD(opcode);
   199b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   199ba:	105b      	asrs	r3, r3, #1
   199bc:	f88d 3017 	strb.w	r3, [sp, #23]
   199c0:	e012      	b.n	199e8 <attsDataCback+0x78>
  }
  else if (opcode == ATT_PDU_WRITE_CMD)
   199c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   199c6:	2b52      	cmp	r3, #82	; 0x52
   199c8:	d103      	bne.n	199d2 <attsDataCback+0x62>
  {
    method = ATT_METHOD_WRITE_CMD;
   199ca:	230a      	movs	r3, #10
   199cc:	f88d 3017 	strb.w	r3, [sp, #23]
   199d0:	e00a      	b.n	199e8 <attsDataCback+0x78>
  }
  else if (opcode == ATT_PDU_SIGNED_WRITE_CMD)
   199d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   199d6:	2bd2      	cmp	r3, #210	; 0xd2
   199d8:	d103      	bne.n	199e2 <attsDataCback+0x72>
  {
    method = ATT_METHOD_SIGNED_WRITE_CMD;
   199da:	2310      	movs	r3, #16
   199dc:	f88d 3017 	strb.w	r3, [sp, #23]
   199e0:	e002      	b.n	199e8 <attsDataCback+0x78>
  }
  else
  {
    method = ATT_METHOD_ERR;
   199e2:	2300      	movs	r3, #0
   199e4:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  /* ignore packet if write response is pending. */
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   199e8:	9b04      	ldr	r3, [sp, #16]
   199ea:	7f5b      	ldrb	r3, [r3, #29]
   199ec:	f003 0308 	and.w	r3, r3, #8
   199f0:	2b00      	cmp	r3, #0
   199f2:	d003      	beq.n	199fc <attsDataCback+0x8c>
  {
    if (method != ATT_METHOD_VALUE_CNF)
   199f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   199f8:	2b0f      	cmp	r3, #15
   199fa:	d165      	bne.n	19ac8 <attsDataCback+0x158>
      return;
    }
  }

  /* check client's status to see if server is allowed to process this PDU. */
  err = attsCsfActClientState(handle, opcode, pPacket);
   199fc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   19a00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19a04:	9a00      	ldr	r2, [sp, #0]
   19a06:	4618      	mov	r0, r3
   19a08:	f7ff fad2 	bl	18fb0 <attsCsfActClientState>
   19a0c:	4603      	mov	r3, r0
   19a0e:	f88d 3016 	strb.w	r3, [sp, #22]
  if (err)
   19a12:	f89d 3016 	ldrb.w	r3, [sp, #22]
   19a16:	2b00      	cmp	r3, #0
   19a18:	d00d      	beq.n	19a36 <attsDataCback+0xc6>
  {
    BYTES_TO_UINT16(attHandle, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   19a1a:	9b00      	ldr	r3, [sp, #0]
   19a1c:	3309      	adds	r3, #9
   19a1e:	781b      	ldrb	r3, [r3, #0]
   19a20:	b29a      	uxth	r2, r3
   19a22:	9b00      	ldr	r3, [sp, #0]
   19a24:	330a      	adds	r3, #10
   19a26:	781b      	ldrb	r3, [r3, #0]
   19a28:	b29b      	uxth	r3, r3
   19a2a:	021b      	lsls	r3, r3, #8
   19a2c:	b29b      	uxth	r3, r3
   19a2e:	4413      	add	r3, r2
   19a30:	f8ad 3014 	strh.w	r3, [sp, #20]
   19a34:	e002      	b.n	19a3c <attsDataCback+0xcc>
  }
  else
  {
    attHandle = ATT_HANDLE_NONE;
   19a36:	2300      	movs	r3, #0
   19a38:	f8ad 3014 	strh.w	r3, [sp, #20]
    return;
  }
#endif

  /* if no error process request */
  if (!err)
   19a3c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   19a40:	2b00      	cmp	r3, #0
   19a42:	d122      	bne.n	19a8a <attsDataCback+0x11a>
  {
    /* look up processing function */
    procFcn = attsProcFcnTbl[method];
   19a44:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19a48:	4a21      	ldr	r2, [pc, #132]	; (19ad0 <attsDataCback+0x160>)
   19a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19a4e:	9302      	str	r3, [sp, #8]

    /* if method is supported */
    if (procFcn != NULL)
   19a50:	9b02      	ldr	r3, [sp, #8]
   19a52:	2b00      	cmp	r3, #0
   19a54:	d016      	beq.n	19a84 <attsDataCback+0x114>
    {
      /* verify length */
      if (len >= attsMinPduLen[method])
   19a56:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19a5a:	4a1e      	ldr	r2, [pc, #120]	; (19ad4 <attsDataCback+0x164>)
   19a5c:	5cd3      	ldrb	r3, [r2, r3]
   19a5e:	b29b      	uxth	r3, r3
   19a60:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   19a64:	429a      	cmp	r2, r3
   19a66:	d309      	bcc.n	19a7c <attsDataCback+0x10c>
      {
        /* execute processing function */
        (*procFcn)(pCcb, len, pPacket);
   19a68:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   19a6c:	9b02      	ldr	r3, [sp, #8]
   19a6e:	9a00      	ldr	r2, [sp, #0]
   19a70:	9804      	ldr	r0, [sp, #16]
   19a72:	4798      	blx	r3
        err = 0;
   19a74:	2300      	movs	r3, #0
   19a76:	f88d 3016 	strb.w	r3, [sp, #22]
   19a7a:	e006      	b.n	19a8a <attsDataCback+0x11a>
      }
      else
      {
        /* invalid PDU length */
        err = ATT_ERR_INVALID_PDU;
   19a7c:	2304      	movs	r3, #4
   19a7e:	f88d 3016 	strb.w	r3, [sp, #22]
   19a82:	e002      	b.n	19a8a <attsDataCback+0x11a>
      }
    }
    else
    {
      /* PDU not supported */
      err = ATT_ERR_NOT_SUP;
   19a84:	2306      	movs	r3, #6
   19a86:	f88d 3016 	strb.w	r3, [sp, #22]
    }
  }

  /* if there's an error and an error response can be sent for this opcode */
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
   19a8a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   19a8e:	2b00      	cmp	r3, #0
   19a90:	d01b      	beq.n	19aca <attsDataCback+0x15a>
   19a92:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19a96:	2b02      	cmp	r3, #2
   19a98:	d017      	beq.n	19aca <attsDataCback+0x15a>
   19a9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19a9e:	2b1e      	cmp	r3, #30
   19aa0:	d013      	beq.n	19aca <attsDataCback+0x15a>
      ((opcode & ATT_PDU_MASK_COMMAND) == 0))
   19aa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
   19aaa:	2b00      	cmp	r3, #0
   19aac:	d10d      	bne.n	19aca <attsDataCback+0x15a>
  {
    attsErrRsp(handle, opcode, attHandle, err);
   19aae:	f89d 3016 	ldrb.w	r3, [sp, #22]
   19ab2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   19ab6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   19aba:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   19abe:	f000 f86f 	bl	19ba0 <attsErrRsp>
   19ac2:	e002      	b.n	19aca <attsDataCback+0x15a>
    return;
   19ac4:	bf00      	nop
   19ac6:	e000      	b.n	19aca <attsDataCback+0x15a>
      return;
   19ac8:	bf00      	nop
  }
}
   19aca:	b007      	add	sp, #28
   19acc:	f85d fb04 	ldr.w	pc, [sp], #4
   19ad0:	10002b54 	.word	0x10002b54
   19ad4:	00028690 	.word	0x00028690

00019ad8 <attsConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   19ad8:	b500      	push	{lr}
   19ada:	b083      	sub	sp, #12
   19adc:	9001      	str	r0, [sp, #4]
   19ade:	9100      	str	r1, [sp, #0]
  /* if connection closed */
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   19ae0:	9b00      	ldr	r3, [sp, #0]
   19ae2:	789b      	ldrb	r3, [r3, #2]
   19ae4:	2b28      	cmp	r3, #40	; 0x28
   19ae6:	d111      	bne.n	19b0c <attsConnCback+0x34>
  {
    /* clear prepare write queue */
    attsClearPrepWrites(pCcb);
   19ae8:	9801      	ldr	r0, [sp, #4]
   19aea:	f000 f8a0 	bl	19c2e <attsClearPrepWrites>

    /* stop service discovery idle timer, if running */
    if (DmConnCheckIdle(pCcb->connId) & DM_IDLE_ATTS_DISC)
   19aee:	9b01      	ldr	r3, [sp, #4]
   19af0:	7f1b      	ldrb	r3, [r3, #28]
   19af2:	4618      	mov	r0, r3
   19af4:	f7fb ffce 	bl	15a94 <DmConnCheckIdle>
   19af8:	4603      	mov	r3, r0
   19afa:	f003 0304 	and.w	r3, r3, #4
   19afe:	2b00      	cmp	r3, #0
   19b00:	d004      	beq.n	19b0c <attsConnCback+0x34>
    {
      WsfTimerStop(&pCcb->idleTimer);
   19b02:	9b01      	ldr	r3, [sp, #4]
   19b04:	3308      	adds	r3, #8
   19b06:	4618      	mov	r0, r3
   19b08:	f006 fab4 	bl	20074 <WsfTimerStop>
    }
  }

  /* pass event to indication interface */
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
   19b0c:	4b04      	ldr	r3, [pc, #16]	; (19b20 <attsConnCback+0x48>)
   19b0e:	689b      	ldr	r3, [r3, #8]
   19b10:	68db      	ldr	r3, [r3, #12]
   19b12:	9900      	ldr	r1, [sp, #0]
   19b14:	9801      	ldr	r0, [sp, #4]
   19b16:	4798      	blx	r3
}
   19b18:	bf00      	nop
   19b1a:	b003      	add	sp, #12
   19b1c:	f85d fb04 	ldr.w	pc, [sp], #4
   19b20:	1000506c 	.word	0x1000506c

00019b24 <attsMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsMsgCback(wsfMsgHdr_t *pMsg)
{
   19b24:	b500      	push	{lr}
   19b26:	b083      	sub	sp, #12
   19b28:	9001      	str	r0, [sp, #4]
  /* handle service discovery idle timeout */
  if (pMsg->event == ATTS_MSG_IDLE_TIMEOUT)
   19b2a:	9b01      	ldr	r3, [sp, #4]
   19b2c:	789b      	ldrb	r3, [r3, #2]
   19b2e:	2b20      	cmp	r3, #32
   19b30:	d108      	bne.n	19b44 <attsMsgCback+0x20>
  {
    /* set channel as idle */
    DmConnSetIdle((dmConnId_t) pMsg->param, DM_IDLE_ATTS_DISC, DM_CONN_IDLE);
   19b32:	9b01      	ldr	r3, [sp, #4]
   19b34:	881b      	ldrh	r3, [r3, #0]
   19b36:	b2db      	uxtb	r3, r3
   19b38:	2200      	movs	r2, #0
   19b3a:	2104      	movs	r1, #4
   19b3c:	4618      	mov	r0, r3
   19b3e:	f7fb ff4d 	bl	159dc <DmConnSetIdle>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
  {
    /* handle database hash update */
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
  }
}
   19b42:	e019      	b.n	19b78 <attsMsgCback+0x54>
  else if (pMsg->event <= ATTS_MSG_IND_TIMEOUT)
   19b44:	9b01      	ldr	r3, [sp, #4]
   19b46:	789b      	ldrb	r3, [r3, #2]
   19b48:	2b22      	cmp	r3, #34	; 0x22
   19b4a:	d805      	bhi.n	19b58 <attsMsgCback+0x34>
    (*attsCb.pInd->msgCback)(pMsg);
   19b4c:	4b0c      	ldr	r3, [pc, #48]	; (19b80 <attsMsgCback+0x5c>)
   19b4e:	689b      	ldr	r3, [r3, #8]
   19b50:	689b      	ldr	r3, [r3, #8]
   19b52:	9801      	ldr	r0, [sp, #4]
   19b54:	4798      	blx	r3
}
   19b56:	e00f      	b.n	19b78 <attsMsgCback+0x54>
  else if (pMsg->event == ATTS_MSG_SIGN_CMAC_CMPL)
   19b58:	9b01      	ldr	r3, [sp, #4]
   19b5a:	789b      	ldrb	r3, [r3, #2]
   19b5c:	2b23      	cmp	r3, #35	; 0x23
   19b5e:	d104      	bne.n	19b6a <attsMsgCback+0x46>
    (*attsCb.signMsgCback)(pMsg);
   19b60:	4b07      	ldr	r3, [pc, #28]	; (19b80 <attsMsgCback+0x5c>)
   19b62:	68db      	ldr	r3, [r3, #12]
   19b64:	9801      	ldr	r0, [sp, #4]
   19b66:	4798      	blx	r3
}
   19b68:	e006      	b.n	19b78 <attsMsgCback+0x54>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
   19b6a:	9b01      	ldr	r3, [sp, #4]
   19b6c:	789b      	ldrb	r3, [r3, #2]
   19b6e:	2b24      	cmp	r3, #36	; 0x24
   19b70:	d102      	bne.n	19b78 <attsMsgCback+0x54>
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
   19b72:	9801      	ldr	r0, [sp, #4]
   19b74:	f000 f89e 	bl	19cb4 <attsProcessDatabaseHashUpdate>
}
   19b78:	bf00      	nop
   19b7a:	b003      	add	sp, #12
   19b7c:	f85d fb04 	ldr.w	pc, [sp], #4
   19b80:	1000506c 	.word	0x1000506c

00019b84 <attsL2cCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
   19b84:	b500      	push	{lr}
   19b86:	b083      	sub	sp, #12
   19b88:	9001      	str	r0, [sp, #4]
  /* pass event to indication interface */
  (*attsCb.pInd->ctrlCback)(pMsg);
   19b8a:	4b04      	ldr	r3, [pc, #16]	; (19b9c <attsL2cCtrlCback+0x18>)
   19b8c:	689b      	ldr	r3, [r3, #8]
   19b8e:	685b      	ldr	r3, [r3, #4]
   19b90:	9801      	ldr	r0, [sp, #4]
   19b92:	4798      	blx	r3
}
   19b94:	bf00      	nop
   19b96:	b003      	add	sp, #12
   19b98:	f85d fb04 	ldr.w	pc, [sp], #4
   19b9c:	1000506c 	.word	0x1000506c

00019ba0 <attsErrRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsErrRsp(uint16_t handle, uint8_t opcode, uint16_t attHandle, uint8_t reason)
{
   19ba0:	b510      	push	{r4, lr}
   19ba2:	b084      	sub	sp, #16
   19ba4:	4604      	mov	r4, r0
   19ba6:	4608      	mov	r0, r1
   19ba8:	4611      	mov	r1, r2
   19baa:	461a      	mov	r2, r3
   19bac:	4623      	mov	r3, r4
   19bae:	f8ad 3006 	strh.w	r3, [sp, #6]
   19bb2:	4603      	mov	r3, r0
   19bb4:	f88d 3005 	strb.w	r3, [sp, #5]
   19bb8:	460b      	mov	r3, r1
   19bba:	f8ad 3002 	strh.w	r3, [sp, #2]
   19bbe:	4613      	mov	r3, r2
   19bc0:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t *pBuf;
  uint8_t *p;

  /* allocate buffer */
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   19bc4:	200d      	movs	r0, #13
   19bc6:	f002 fae5 	bl	1c194 <attMsgAlloc>
   19bca:	9003      	str	r0, [sp, #12]
   19bcc:	9b03      	ldr	r3, [sp, #12]
   19bce:	2b00      	cmp	r3, #0
   19bd0:	d02a      	beq.n	19c28 <attsErrRsp+0x88>
  {
    p = pBuf + L2C_PAYLOAD_START;
   19bd2:	9b03      	ldr	r3, [sp, #12]
   19bd4:	3308      	adds	r3, #8
   19bd6:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   19bd8:	9b02      	ldr	r3, [sp, #8]
   19bda:	1c5a      	adds	r2, r3, #1
   19bdc:	9202      	str	r2, [sp, #8]
   19bde:	2201      	movs	r2, #1
   19be0:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, opcode);
   19be2:	9b02      	ldr	r3, [sp, #8]
   19be4:	1c5a      	adds	r2, r3, #1
   19be6:	9202      	str	r2, [sp, #8]
   19be8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   19bec:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, attHandle);
   19bee:	9b02      	ldr	r3, [sp, #8]
   19bf0:	1c5a      	adds	r2, r3, #1
   19bf2:	9202      	str	r2, [sp, #8]
   19bf4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   19bf8:	b2d2      	uxtb	r2, r2
   19bfa:	701a      	strb	r2, [r3, #0]
   19bfc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   19c00:	0a1b      	lsrs	r3, r3, #8
   19c02:	b299      	uxth	r1, r3
   19c04:	9b02      	ldr	r3, [sp, #8]
   19c06:	1c5a      	adds	r2, r3, #1
   19c08:	9202      	str	r2, [sp, #8]
   19c0a:	b2ca      	uxtb	r2, r1
   19c0c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   19c0e:	9b02      	ldr	r3, [sp, #8]
   19c10:	1c5a      	adds	r2, r3, #1
   19c12:	9202      	str	r2, [sp, #8]
   19c14:	f89d 2004 	ldrb.w	r2, [sp, #4]
   19c18:	701a      	strb	r2, [r3, #0]

    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   19c1a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   19c1e:	9b03      	ldr	r3, [sp, #12]
   19c20:	2205      	movs	r2, #5
   19c22:	2004      	movs	r0, #4
   19c24:	f003 fa90 	bl	1d148 <L2cDataReq>
  }
}
   19c28:	bf00      	nop
   19c2a:	b004      	add	sp, #16
   19c2c:	bd10      	pop	{r4, pc}

00019c2e <attsClearPrepWrites>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsClearPrepWrites(attCcb_t *pCcb)
{
   19c2e:	b500      	push	{lr}
   19c30:	b085      	sub	sp, #20
   19c32:	9001      	str	r0, [sp, #4]
  void *pBuf;

  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   19c34:	e002      	b.n	19c3c <attsClearPrepWrites+0xe>
  {
    WsfBufFree(pBuf);
   19c36:	9803      	ldr	r0, [sp, #12]
   19c38:	f005 fe0c 	bl	1f854 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   19c3c:	9b01      	ldr	r3, [sp, #4]
   19c3e:	4618      	mov	r0, r3
   19c40:	f006 f89d 	bl	1fd7e <WsfQueueDeq>
   19c44:	9003      	str	r0, [sp, #12]
   19c46:	9b03      	ldr	r3, [sp, #12]
   19c48:	2b00      	cmp	r3, #0
   19c4a:	d1f4      	bne.n	19c36 <attsClearPrepWrites+0x8>
  }
}
   19c4c:	bf00      	nop
   19c4e:	bf00      	nop
   19c50:	b005      	add	sp, #20
   19c52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00019c58 <attsDiscBusy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsDiscBusy(attCcb_t *pCcb)
{
   19c58:	b500      	push	{lr}
   19c5a:	b083      	sub	sp, #12
   19c5c:	9001      	str	r0, [sp, #4]
  if (pAttCfg->discIdleTimeout > 0)
   19c5e:	4b13      	ldr	r3, [pc, #76]	; (19cac <attsDiscBusy+0x54>)
   19c60:	681b      	ldr	r3, [r3, #0]
   19c62:	681b      	ldr	r3, [r3, #0]
   19c64:	2b00      	cmp	r3, #0
   19c66:	d01d      	beq.n	19ca4 <attsDiscBusy+0x4c>
  {
    /* set channel as busy */
    DmConnSetIdle(pCcb->connId, DM_IDLE_ATTS_DISC, DM_CONN_BUSY);
   19c68:	9b01      	ldr	r3, [sp, #4]
   19c6a:	7f1b      	ldrb	r3, [r3, #28]
   19c6c:	2201      	movs	r2, #1
   19c6e:	2104      	movs	r1, #4
   19c70:	4618      	mov	r0, r3
   19c72:	f7fb feb3 	bl	159dc <DmConnSetIdle>

    /* start service discovery idle timer */
    pCcb->idleTimer.handlerId = attCb.handlerId;
   19c76:	4b0e      	ldr	r3, [pc, #56]	; (19cb0 <attsDiscBusy+0x58>)
   19c78:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   19c7c:	9b01      	ldr	r3, [sp, #4]
   19c7e:	751a      	strb	r2, [r3, #20]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
   19c80:	9b01      	ldr	r3, [sp, #4]
   19c82:	2220      	movs	r2, #32
   19c84:	749a      	strb	r2, [r3, #18]
    pCcb->idleTimer.msg.param = pCcb->connId;
   19c86:	9b01      	ldr	r3, [sp, #4]
   19c88:	7f1b      	ldrb	r3, [r3, #28]
   19c8a:	b29a      	uxth	r2, r3
   19c8c:	9b01      	ldr	r3, [sp, #4]
   19c8e:	821a      	strh	r2, [r3, #16]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   19c90:	9b01      	ldr	r3, [sp, #4]
   19c92:	f103 0208 	add.w	r2, r3, #8
   19c96:	4b05      	ldr	r3, [pc, #20]	; (19cac <attsDiscBusy+0x54>)
   19c98:	681b      	ldr	r3, [r3, #0]
   19c9a:	681b      	ldr	r3, [r3, #0]
   19c9c:	4619      	mov	r1, r3
   19c9e:	4610      	mov	r0, r2
   19ca0:	f006 f9c4 	bl	2002c <WsfTimerStartSec>
  }
}
   19ca4:	bf00      	nop
   19ca6:	b003      	add	sp, #12
   19ca8:	f85d fb04 	ldr.w	pc, [sp], #4
   19cac:	10002bb0 	.word	0x10002bb0
   19cb0:	100050c0 	.word	0x100050c0

00019cb4 <attsProcessDatabaseHashUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcessDatabaseHashUpdate(secCmacMsg_t *pMsg)
{
   19cb4:	b500      	push	{lr}
   19cb6:	b08d      	sub	sp, #52	; 0x34
   19cb8:	9003      	str	r0, [sp, #12]
  attsAttr_t *pAttr;
  attsGroup_t *pGroup;
  uint16_t dbhCharHandle;

  /* send to application */
  evt.hdr.event = ATTS_DB_HASH_CALC_CMPL_IND;
   19cba:	2311      	movs	r3, #17
   19cbc:	f88d 301e 	strb.w	r3, [sp, #30]
  evt.hdr.status = ATT_SUCCESS;
   19cc0:	2300      	movs	r3, #0
   19cc2:	f88d 301f 	strb.w	r3, [sp, #31]
  evt.hdr.param = DM_CONN_ID_NONE;
   19cc6:	2300      	movs	r3, #0
   19cc8:	f8ad 301c 	strh.w	r3, [sp, #28]

  evt.valueLen = ATT_DATABASE_HASH_LEN;
   19ccc:	2310      	movs	r3, #16
   19cce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  evt.handle = ATT_HANDLE_NONE;
   19cd2:	2300      	movs	r3, #0
   19cd4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  evt.continuing = FALSE;
   19cd8:	2300      	movs	r3, #0
   19cda:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  evt.mtu = 0;
   19cde:	2300      	movs	r3, #0
   19ce0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a

  /* free plain text buffer */
  if (pMsg->pPlainText != NULL)
   19ce4:	9b03      	ldr	r3, [sp, #12]
   19ce6:	689b      	ldr	r3, [r3, #8]
   19ce8:	2b00      	cmp	r3, #0
   19cea:	d007      	beq.n	19cfc <attsProcessDatabaseHashUpdate+0x48>
  {
    WsfBufFree(pMsg->pPlainText);
   19cec:	9b03      	ldr	r3, [sp, #12]
   19cee:	689b      	ldr	r3, [r3, #8]
   19cf0:	4618      	mov	r0, r3
   19cf2:	f005 fdaf 	bl	1f854 <WsfBufFree>
    pMsg->pPlainText = NULL;
   19cf6:	9b03      	ldr	r3, [sp, #12]
   19cf8:	2200      	movs	r2, #0
   19cfa:	609a      	str	r2, [r3, #8]
  }

  /* copy in little endian */
  evt.pValue = pMsg->pCiphertext;
   19cfc:	9b03      	ldr	r3, [sp, #12]
   19cfe:	685b      	ldr	r3, [r3, #4]
   19d00:	9308      	str	r3, [sp, #32]

  /* find GATT database handle */
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   19d02:	ab05      	add	r3, sp, #20
   19d04:	9301      	str	r3, [sp, #4]
   19d06:	ab06      	add	r3, sp, #24
   19d08:	9300      	str	r3, [sp, #0]
   19d0a:	4b10      	ldr	r3, [pc, #64]	; (19d4c <attsProcessDatabaseHashUpdate+0x98>)
   19d0c:	2202      	movs	r2, #2
   19d0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19d12:	2001      	movs	r0, #1
   19d14:	f000 fe0a 	bl	1a92c <attsFindUuidInRange>
   19d18:	4603      	mov	r3, r0
   19d1a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
                                      (uint8_t *) attGattDbhChUuid, &pAttr, &pGroup);

  if (dbhCharHandle != ATT_HANDLE_NONE)
   19d1e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   19d22:	2b00      	cmp	r3, #0
   19d24:	d006      	beq.n	19d34 <attsProcessDatabaseHashUpdate+0x80>
  {
    /* Set hash in service. */
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
   19d26:	9a08      	ldr	r2, [sp, #32]
   19d28:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   19d2c:	2110      	movs	r1, #16
   19d2e:	4618      	mov	r0, r3
   19d30:	f000 fa4c 	bl	1a1cc <AttsSetAttr>
  }

  /* set hash update complete */
  attsCsfSetHashUpdateStatus(FALSE);
   19d34:	2000      	movs	r0, #0
   19d36:	f7ff f8d3 	bl	18ee0 <attsCsfSetHashUpdateStatus>

  attCb.cback(&evt);
   19d3a:	4b05      	ldr	r3, [pc, #20]	; (19d50 <attsProcessDatabaseHashUpdate+0x9c>)
   19d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   19d3e:	aa07      	add	r2, sp, #28
   19d40:	4610      	mov	r0, r2
   19d42:	4798      	blx	r3
}
   19d44:	bf00      	nop
   19d46:	b00d      	add	sp, #52	; 0x34
   19d48:	f85d fb04 	ldr.w	pc, [sp], #4
   19d4c:	000286e4 	.word	0x000286e4
   19d50:	100050c0 	.word	0x100050c0

00019d54 <attsCheckPendDbHashReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCheckPendDbHashReadRsp(void)
{
   19d54:	b500      	push	{lr}
   19d56:	b087      	sub	sp, #28
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   19d58:	2300      	movs	r3, #0
   19d5a:	f88d 3017 	strb.w	r3, [sp, #23]
   19d5e:	e080      	b.n	19e62 <attsCheckPendDbHashReadRsp+0x10e>
  {
    attCcb_t *pCcb = &attCb.ccb[i];
   19d60:	f89d 2017 	ldrb.w	r2, [sp, #23]
   19d64:	4613      	mov	r3, r2
   19d66:	00db      	lsls	r3, r3, #3
   19d68:	4413      	add	r3, r2
   19d6a:	009b      	lsls	r3, r3, #2
   19d6c:	4a42      	ldr	r2, [pc, #264]	; (19e78 <attsCheckPendDbHashReadRsp+0x124>)
   19d6e:	4413      	add	r3, r2
   19d70:	9304      	str	r3, [sp, #16]

    if (pCcb->pPendDbHashRsp)
   19d72:	9b04      	ldr	r3, [sp, #16]
   19d74:	6a1b      	ldr	r3, [r3, #32]
   19d76:	2b00      	cmp	r3, #0
   19d78:	d06e      	beq.n	19e58 <attsCheckPendDbHashReadRsp+0x104>
    {
      uint8_t *pBuf;

      /* allocate max size buffer for response */
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   19d7a:	9b04      	ldr	r3, [sp, #16]
   19d7c:	8b5b      	ldrh	r3, [r3, #26]
   19d7e:	3308      	adds	r3, #8
   19d80:	b29b      	uxth	r3, r3
   19d82:	4618      	mov	r0, r3
   19d84:	f002 fa06 	bl	1c194 <attMsgAlloc>
   19d88:	9003      	str	r0, [sp, #12]
   19d8a:	9b03      	ldr	r3, [sp, #12]
   19d8c:	2b00      	cmp	r3, #0
   19d8e:	d051      	beq.n	19e34 <attsCheckPendDbHashReadRsp+0xe0>
      {
        uint8_t *p;
        attsAttr_t  *pAttr;
        attsGroup_t *pGroup;

        p = pBuf + L2C_PAYLOAD_START;
   19d90:	9b03      	ldr	r3, [sp, #12]
   19d92:	3308      	adds	r3, #8
   19d94:	9302      	str	r3, [sp, #8]
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   19d96:	9b02      	ldr	r3, [sp, #8]
   19d98:	1c5a      	adds	r2, r3, #1
   19d9a:	9202      	str	r2, [sp, #8]
   19d9c:	2209      	movs	r2, #9
   19d9e:	701a      	strb	r2, [r3, #0]

        /* set length parameter in response message */
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
   19da0:	9b02      	ldr	r3, [sp, #8]
   19da2:	1c5a      	adds	r2, r3, #1
   19da4:	9202      	str	r2, [sp, #8]
   19da6:	2212      	movs	r2, #18
   19da8:	701a      	strb	r2, [r3, #0]

        /* copy result to response message */
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
   19daa:	9b04      	ldr	r3, [sp, #16]
   19dac:	6a1b      	ldr	r3, [r3, #32]
   19dae:	8859      	ldrh	r1, [r3, #2]
   19db0:	9b02      	ldr	r3, [sp, #8]
   19db2:	1c5a      	adds	r2, r3, #1
   19db4:	9202      	str	r2, [sp, #8]
   19db6:	b2ca      	uxtb	r2, r1
   19db8:	701a      	strb	r2, [r3, #0]
   19dba:	9b04      	ldr	r3, [sp, #16]
   19dbc:	6a1b      	ldr	r3, [r3, #32]
   19dbe:	885b      	ldrh	r3, [r3, #2]
   19dc0:	0a1b      	lsrs	r3, r3, #8
   19dc2:	b299      	uxth	r1, r3
   19dc4:	9b02      	ldr	r3, [sp, #8]
   19dc6:	1c5a      	adds	r2, r3, #1
   19dc8:	9202      	str	r2, [sp, #8]
   19dca:	b2ca      	uxtb	r2, r1
   19dcc:	701a      	strb	r2, [r3, #0]

        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   19dce:	9b04      	ldr	r3, [sp, #16]
   19dd0:	6a1b      	ldr	r3, [r3, #32]
   19dd2:	885b      	ldrh	r3, [r3, #2]
   19dd4:	466a      	mov	r2, sp
   19dd6:	4611      	mov	r1, r2
   19dd8:	4618      	mov	r0, r3
   19dda:	f000 faa7 	bl	1a32c <attsFindByHandle>
   19dde:	9001      	str	r0, [sp, #4]
   19de0:	9b01      	ldr	r3, [sp, #4]
   19de2:	2b00      	cmp	r3, #0
   19de4:	d01b      	beq.n	19e1e <attsCheckPendDbHashReadRsp+0xca>
        {
          memcpy(p, pAttr->pValue, *pAttr->pLen);
   19de6:	9b01      	ldr	r3, [sp, #4]
   19de8:	6859      	ldr	r1, [r3, #4]
   19dea:	9b01      	ldr	r3, [sp, #4]
   19dec:	689b      	ldr	r3, [r3, #8]
   19dee:	881b      	ldrh	r3, [r3, #0]
   19df0:	461a      	mov	r2, r3
   19df2:	9802      	ldr	r0, [sp, #8]
   19df4:	f7f2 f984 	bl	c100 <memcpy>
          p += *pAttr->pLen;
   19df8:	9b01      	ldr	r3, [sp, #4]
   19dfa:	689b      	ldr	r3, [r3, #8]
   19dfc:	881b      	ldrh	r3, [r3, #0]
   19dfe:	461a      	mov	r2, r3
   19e00:	9b02      	ldr	r3, [sp, #8]
   19e02:	4413      	add	r3, r2
   19e04:	9302      	str	r3, [sp, #8]

          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
   19e06:	9b04      	ldr	r3, [sp, #16]
   19e08:	8b19      	ldrh	r1, [r3, #24]
   19e0a:	9b03      	ldr	r3, [sp, #12]
   19e0c:	3308      	adds	r3, #8
   19e0e:	9a02      	ldr	r2, [sp, #8]
   19e10:	1ad3      	subs	r3, r2, r3
   19e12:	b29a      	uxth	r2, r3
   19e14:	9b03      	ldr	r3, [sp, #12]
   19e16:	2004      	movs	r0, #4
   19e18:	f003 f996 	bl	1d148 <L2cDataReq>
   19e1c:	e014      	b.n	19e48 <attsCheckPendDbHashReadRsp+0xf4>
        }
        else
        {
          attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_NOT_FOUND);
   19e1e:	9b04      	ldr	r3, [sp, #16]
   19e20:	7f1b      	ldrb	r3, [r3, #28]
   19e22:	b298      	uxth	r0, r3
   19e24:	9b04      	ldr	r3, [sp, #16]
   19e26:	6a1b      	ldr	r3, [r3, #32]
   19e28:	881a      	ldrh	r2, [r3, #0]
   19e2a:	230a      	movs	r3, #10
   19e2c:	2108      	movs	r1, #8
   19e2e:	f7ff feb7 	bl	19ba0 <attsErrRsp>
   19e32:	e009      	b.n	19e48 <attsCheckPendDbHashReadRsp+0xf4>
        }
      }
      else
      {
        attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_RESOURCES);
   19e34:	9b04      	ldr	r3, [sp, #16]
   19e36:	7f1b      	ldrb	r3, [r3, #28]
   19e38:	b298      	uxth	r0, r3
   19e3a:	9b04      	ldr	r3, [sp, #16]
   19e3c:	6a1b      	ldr	r3, [r3, #32]
   19e3e:	881a      	ldrh	r2, [r3, #0]
   19e40:	2311      	movs	r3, #17
   19e42:	2108      	movs	r1, #8
   19e44:	f7ff feac 	bl	19ba0 <attsErrRsp>
      }

      /* Free pending state information. */
      WsfBufFree(pCcb->pPendDbHashRsp);
   19e48:	9b04      	ldr	r3, [sp, #16]
   19e4a:	6a1b      	ldr	r3, [r3, #32]
   19e4c:	4618      	mov	r0, r3
   19e4e:	f005 fd01 	bl	1f854 <WsfBufFree>
      pCcb->pPendDbHashRsp = NULL;
   19e52:	9b04      	ldr	r3, [sp, #16]
   19e54:	2200      	movs	r2, #0
   19e56:	621a      	str	r2, [r3, #32]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   19e58:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19e5c:	3301      	adds	r3, #1
   19e5e:	f88d 3017 	strb.w	r3, [sp, #23]
   19e62:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19e66:	2b02      	cmp	r3, #2
   19e68:	f67f af7a 	bls.w	19d60 <attsCheckPendDbHashReadRsp+0xc>
    }
  }
}
   19e6c:	bf00      	nop
   19e6e:	bf00      	nop
   19e70:	b007      	add	sp, #28
   19e72:	f85d fb04 	ldr.w	pc, [sp], #4
   19e76:	bf00      	nop
   19e78:	100050c0 	.word	0x100050c0

00019e7c <attsIsHashableAttr>:
 *        Characteristic Format, and Characteristic Aggreate Format which contribute their ATT
 *        handle and ATT type.
 */
/*************************************************************************************************/
uint16_t attsIsHashableAttr(attsAttr_t *pAttr)
{
   19e7c:	b084      	sub	sp, #16
   19e7e:	9001      	str	r0, [sp, #4]
  /* Initialize length to 2 for ATT Handle length */
  uint16_t length = 2;
   19e80:	2302      	movs	r3, #2
   19e82:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint16_t uuid;
  static bool_t isAttrCharVal = FALSE;

  /* Characteristic values are skipped */
  if (isAttrCharVal)
   19e86:	4b30      	ldr	r3, [pc, #192]	; (19f48 <attsIsHashableAttr+0xcc>)
   19e88:	781b      	ldrb	r3, [r3, #0]
   19e8a:	2b00      	cmp	r3, #0
   19e8c:	d004      	beq.n	19e98 <attsIsHashableAttr+0x1c>
  {
    isAttrCharVal = FALSE;
   19e8e:	4b2e      	ldr	r3, [pc, #184]	; (19f48 <attsIsHashableAttr+0xcc>)
   19e90:	2200      	movs	r2, #0
   19e92:	701a      	strb	r2, [r3, #0]
    return 0;
   19e94:	2300      	movs	r3, #0
   19e96:	e053      	b.n	19f40 <attsIsHashableAttr+0xc4>
  }

  BYTES_TO_UINT16(uuid, pAttr->pUuid);
   19e98:	9b01      	ldr	r3, [sp, #4]
   19e9a:	681b      	ldr	r3, [r3, #0]
   19e9c:	781b      	ldrb	r3, [r3, #0]
   19e9e:	b29a      	uxth	r2, r3
   19ea0:	9b01      	ldr	r3, [sp, #4]
   19ea2:	681b      	ldr	r3, [r3, #0]
   19ea4:	3301      	adds	r3, #1
   19ea6:	781b      	ldrb	r3, [r3, #0]
   19ea8:	b29b      	uxth	r3, r3
   19eaa:	021b      	lsls	r3, r3, #8
   19eac:	b29b      	uxth	r3, r3
   19eae:	4413      	add	r3, r2
   19eb0:	f8ad 300c 	strh.w	r3, [sp, #12]
  switch (uuid)
   19eb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   19eb8:	f642 1205 	movw	r2, #10501	; 0x2905
   19ebc:	4293      	cmp	r3, r2
   19ebe:	d027      	beq.n	19f10 <attsIsHashableAttr+0x94>
   19ec0:	f642 1205 	movw	r2, #10501	; 0x2905
   19ec4:	4293      	cmp	r3, r2
   19ec6:	dc35      	bgt.n	19f34 <attsIsHashableAttr+0xb8>
   19ec8:	f642 1203 	movw	r2, #10499	; 0x2903
   19ecc:	4293      	cmp	r3, r2
   19ece:	dc31      	bgt.n	19f34 <attsIsHashableAttr+0xb8>
   19ed0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   19ed4:	dc1c      	bgt.n	19f10 <attsIsHashableAttr+0x94>
   19ed6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   19eda:	d011      	beq.n	19f00 <attsIsHashableAttr+0x84>
   19edc:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   19ee0:	dc28      	bgt.n	19f34 <attsIsHashableAttr+0xb8>
   19ee2:	f642 0202 	movw	r2, #10242	; 0x2802
   19ee6:	4293      	cmp	r3, r2
   19ee8:	dc03      	bgt.n	19ef2 <attsIsHashableAttr+0x76>
   19eea:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
   19eee:	da07      	bge.n	19f00 <attsIsHashableAttr+0x84>
   19ef0:	e020      	b.n	19f34 <attsIsHashableAttr+0xb8>
   19ef2:	f642 0203 	movw	r2, #10243	; 0x2803
   19ef6:	4293      	cmp	r3, r2
   19ef8:	d11c      	bne.n	19f34 <attsIsHashableAttr+0xb8>
  {
    /* Top cases include Attribute Value length */
    case ATT_UUID_CHARACTERISTIC:
      /* Set the next characteristic in database to be skipped */
      isAttrCharVal = TRUE;
   19efa:	4b13      	ldr	r3, [pc, #76]	; (19f48 <attsIsHashableAttr+0xcc>)
   19efc:	2201      	movs	r2, #1
   19efe:	701a      	strb	r2, [r3, #0]
      /* Fallthrough */
    case ATT_UUID_PRIMARY_SERVICE:
    case ATT_UUID_SECONDARY_SERVICE:
    case ATT_UUID_INCLUDE:
    case ATT_UUID_CHARACTERISTIC_EXT:
      length += *pAttr->pLen;
   19f00:	9b01      	ldr	r3, [sp, #4]
   19f02:	689b      	ldr	r3, [r3, #8]
   19f04:	881a      	ldrh	r2, [r3, #0]
   19f06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19f0a:	4413      	add	r3, r2
   19f0c:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* All values fall through to include Attribute Type length */
    case ATT_UUID_CHAR_USER_DESC:
    case ATT_UUID_CLIENT_CHAR_CONFIG:
    case ATT_UUID_SERVER_CHAR_CONFIG:
    case ATT_UUID_AGGREGATE_FORMAT:
      if (pAttr->settings & ATTS_SET_UUID_128)
   19f10:	9b01      	ldr	r3, [sp, #4]
   19f12:	7b9b      	ldrb	r3, [r3, #14]
   19f14:	f003 0301 	and.w	r3, r3, #1
   19f18:	2b00      	cmp	r3, #0
   19f1a:	d005      	beq.n	19f28 <attsIsHashableAttr+0xac>
      {
        length += 16;
   19f1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19f20:	3310      	adds	r3, #16
   19f22:	f8ad 300e 	strh.w	r3, [sp, #14]
      }
      else
      {
        length += 2;
      }
      break;
   19f26:	e009      	b.n	19f3c <attsIsHashableAttr+0xc0>
        length += 2;
   19f28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   19f2c:	3302      	adds	r3, #2
   19f2e:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
   19f32:	e003      	b.n	19f3c <attsIsHashableAttr+0xc0>

    default:
      length = 0;
   19f34:	2300      	movs	r3, #0
   19f36:	f8ad 300e 	strh.w	r3, [sp, #14]
      break;
   19f3a:	bf00      	nop
  }

  return length;
   19f3c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   19f40:	4618      	mov	r0, r3
   19f42:	b004      	add	sp, #16
   19f44:	4770      	bx	lr
   19f46:	bf00      	nop
   19f48:	10005084 	.word	0x10005084

00019f4c <AttsInit>:
 */
/*************************************************************************************************/
void AttsInit(void)
{
  /* Initialize control block */
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   19f4c:	4b08      	ldr	r3, [pc, #32]	; (19f70 <AttsInit+0x24>)
   19f4e:	2200      	movs	r2, #0
   19f50:	601a      	str	r2, [r3, #0]
   19f52:	4b07      	ldr	r3, [pc, #28]	; (19f70 <AttsInit+0x24>)
   19f54:	2200      	movs	r2, #0
   19f56:	605a      	str	r2, [r3, #4]
  attsCb.pInd = &attFcnDefault;
   19f58:	4b05      	ldr	r3, [pc, #20]	; (19f70 <AttsInit+0x24>)
   19f5a:	4a06      	ldr	r2, [pc, #24]	; (19f74 <AttsInit+0x28>)
   19f5c:	609a      	str	r2, [r3, #8]
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
   19f5e:	4b04      	ldr	r3, [pc, #16]	; (19f70 <AttsInit+0x24>)
   19f60:	4a05      	ldr	r2, [pc, #20]	; (19f78 <AttsInit+0x2c>)
   19f62:	60da      	str	r2, [r3, #12]

  /* set up callback interfaces */
  attCb.pServer = &attsFcnIf;
   19f64:	4b05      	ldr	r3, [pc, #20]	; (19f7c <AttsInit+0x30>)
   19f66:	4a06      	ldr	r2, [pc, #24]	; (19f80 <AttsInit+0x34>)
   19f68:	671a      	str	r2, [r3, #112]	; 0x70
}
   19f6a:	bf00      	nop
   19f6c:	4770      	bx	lr
   19f6e:	bf00      	nop
   19f70:	1000506c 	.word	0x1000506c
   19f74:	000286a4 	.word	0x000286a4
   19f78:	0001bff9 	.word	0x0001bff9
   19f7c:	100050c0 	.word	0x100050c0
   19f80:	00028680 	.word	0x00028680

00019f84 <AttsHashDatabaseString>:
 *
 *  \return \ref TRUE if successful, \ref FALSE if not.
 */
/*************************************************************************************************/
bool_t AttsHashDatabaseString(uint8_t *pKey, uint8_t *pMsg, uint16_t msgLen)
{
   19f84:	b500      	push	{lr}
   19f86:	b087      	sub	sp, #28
   19f88:	9005      	str	r0, [sp, #20]
   19f8a:	9104      	str	r1, [sp, #16]
   19f8c:	4613      	mov	r3, r2
   19f8e:	f8ad 300e 	strh.w	r3, [sp, #14]
  return SecCmac(pKey, pMsg, msgLen, attCb.handlerId, 0, ATTS_MSG_DBH_CMAC_CMPL);
   19f92:	4b09      	ldr	r3, [pc, #36]	; (19fb8 <AttsHashDatabaseString+0x34>)
   19f94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   19f98:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   19f9c:	2124      	movs	r1, #36	; 0x24
   19f9e:	9101      	str	r1, [sp, #4]
   19fa0:	2100      	movs	r1, #0
   19fa2:	9100      	str	r1, [sp, #0]
   19fa4:	9904      	ldr	r1, [sp, #16]
   19fa6:	9805      	ldr	r0, [sp, #20]
   19fa8:	f7fd fad6 	bl	17558 <SecCmac>
   19fac:	4603      	mov	r3, r0
}
   19fae:	4618      	mov	r0, r3
   19fb0:	b007      	add	sp, #28
   19fb2:	f85d fb04 	ldr.w	pc, [sp], #4
   19fb6:	bf00      	nop
   19fb8:	100050c0 	.word	0x100050c0

00019fbc <AttsCalculateDbHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCalculateDbHash(void)
{
   19fbc:	b500      	push	{lr}
   19fbe:	b08f      	sub	sp, #60	; 0x3c
  uint16_t msgLen = 0;
   19fc0:	2300      	movs	r3, #0
   19fc2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  uint8_t *pMsg;
  attsGroup_t *pGroup = (attsGroup_t *) attsCb.groupQueue.pHead;
   19fc6:	4b6a      	ldr	r3, [pc, #424]	; (1a170 <AttsCalculateDbHash+0x1b4>)
   19fc8:	681b      	ldr	r3, [r3, #0]
   19fca:	930c      	str	r3, [sp, #48]	; 0x30

  /* Determine length of message. */
  while (pGroup != NULL)
   19fcc:	e027      	b.n	1a01e <AttsCalculateDbHash+0x62>
  {
    uint8_t numAttrs = (pGroup->endHandle - pGroup->startHandle) + 1;
   19fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19fd0:	8a5b      	ldrh	r3, [r3, #18]
   19fd2:	b2da      	uxtb	r2, r3
   19fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19fd6:	8a1b      	ldrh	r3, [r3, #16]
   19fd8:	b2db      	uxtb	r3, r3
   19fda:	1ad3      	subs	r3, r2, r3
   19fdc:	b2db      	uxtb	r3, r3
   19fde:	3301      	adds	r3, #1
   19fe0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
   19fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19fe6:	685b      	ldr	r3, [r3, #4]
   19fe8:	930a      	str	r3, [sp, #40]	; 0x28
   19fea:	e011      	b.n	1a010 <AttsCalculateDbHash+0x54>
    {
      msgLen += attsIsHashableAttr(pAttr);
   19fec:	980a      	ldr	r0, [sp, #40]	; 0x28
   19fee:	f7ff ff45 	bl	19e7c <attsIsHashableAttr>
   19ff2:	4603      	mov	r3, r0
   19ff4:	461a      	mov	r2, r3
   19ff6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   19ffa:	4413      	add	r3, r2
   19ffc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
   1a000:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1a004:	3b01      	subs	r3, #1
   1a006:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   1a00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a00c:	3310      	adds	r3, #16
   1a00e:	930a      	str	r3, [sp, #40]	; 0x28
   1a010:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1a014:	2b00      	cmp	r3, #0
   1a016:	d1e9      	bne.n	19fec <AttsCalculateDbHash+0x30>
    }

    pGroup = pGroup->pNext;
   1a018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a01a:	681b      	ldr	r3, [r3, #0]
   1a01c:	930c      	str	r3, [sp, #48]	; 0x30
  while (pGroup != NULL)
   1a01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a020:	2b00      	cmp	r3, #0
   1a022:	d1d4      	bne.n	19fce <AttsCalculateDbHash+0x12>
  }

  /* Allocate buffer for message. */
  if ((pMsg = WsfBufAlloc(msgLen)) != NULL)
   1a024:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1a028:	4618      	mov	r0, r3
   1a02a:	f005 fbd5 	bl	1f7d8 <WsfBufAlloc>
   1a02e:	9005      	str	r0, [sp, #20]
   1a030:	9b05      	ldr	r3, [sp, #20]
   1a032:	2b00      	cmp	r3, #0
   1a034:	f000 8099 	beq.w	1a16a <AttsCalculateDbHash+0x1ae>
  {
    pGroup = (attsGroup_t *)attsCb.groupQueue.pHead;
   1a038:	4b4d      	ldr	r3, [pc, #308]	; (1a170 <AttsCalculateDbHash+0x1b4>)
   1a03a:	681b      	ldr	r3, [r3, #0]
   1a03c:	930c      	str	r3, [sp, #48]	; 0x30
    uint8_t hashingKey[16] = { 0, };
   1a03e:	2300      	movs	r3, #0
   1a040:	9300      	str	r3, [sp, #0]
   1a042:	ab01      	add	r3, sp, #4
   1a044:	2200      	movs	r2, #0
   1a046:	601a      	str	r2, [r3, #0]
   1a048:	605a      	str	r2, [r3, #4]
   1a04a:	609a      	str	r2, [r3, #8]
    uint8_t *p = pMsg;
   1a04c:	9b05      	ldr	r3, [sp, #20]
   1a04e:	9309      	str	r3, [sp, #36]	; 0x24

    /* For each service in services */
    while (pGroup)
   1a050:	e07e      	b.n	1a150 <AttsCalculateDbHash+0x194>
    {
      uint16_t attHandle = pGroup->startHandle;
   1a052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a054:	8a1b      	ldrh	r3, [r3, #16]
   1a056:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22

      /* For each attribute in the service */
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   1a05a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a05c:	685b      	ldr	r3, [r3, #4]
   1a05e:	9307      	str	r3, [sp, #28]
   1a060:	e06d      	b.n	1a13e <AttsCalculateDbHash+0x182>
      {
        uint16_t valLen;
        uint8_t uuidLen = 2;
   1a062:	2302      	movs	r3, #2
   1a064:	f88d 301b 	strb.w	r3, [sp, #27]

        valLen = attsIsHashableAttr(pAttr);
   1a068:	9807      	ldr	r0, [sp, #28]
   1a06a:	f7ff ff07 	bl	19e7c <attsIsHashableAttr>
   1a06e:	4603      	mov	r3, r0
   1a070:	f8ad 3012 	strh.w	r3, [sp, #18]
        if (valLen)
   1a074:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1a078:	2b00      	cmp	r3, #0
   1a07a:	d058      	beq.n	1a12e <AttsCalculateDbHash+0x172>
        {
          /* Add handle */
          UINT16_TO_BSTREAM(p, attHandle);
   1a07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a07e:	1c5a      	adds	r2, r3, #1
   1a080:	9209      	str	r2, [sp, #36]	; 0x24
   1a082:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1a086:	b2d2      	uxtb	r2, r2
   1a088:	701a      	strb	r2, [r3, #0]
   1a08a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   1a08e:	0a1b      	lsrs	r3, r3, #8
   1a090:	b299      	uxth	r1, r3
   1a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a094:	1c5a      	adds	r2, r3, #1
   1a096:	9209      	str	r2, [sp, #36]	; 0x24
   1a098:	b2ca      	uxtb	r2, r1
   1a09a:	701a      	strb	r2, [r3, #0]

          /* Add attribute type*/
          if (pAttr->settings & ATTS_SET_UUID_128)
   1a09c:	9b07      	ldr	r3, [sp, #28]
   1a09e:	7b9b      	ldrb	r3, [r3, #14]
   1a0a0:	f003 0301 	and.w	r3, r3, #1
   1a0a4:	2b00      	cmp	r3, #0
   1a0a6:	d00d      	beq.n	1a0c4 <AttsCalculateDbHash+0x108>
          {
            memcpy(p, pAttr->pUuid, 16);
   1a0a8:	9b07      	ldr	r3, [sp, #28]
   1a0aa:	681b      	ldr	r3, [r3, #0]
   1a0ac:	2210      	movs	r2, #16
   1a0ae:	4619      	mov	r1, r3
   1a0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a0b2:	f7f2 f825 	bl	c100 <memcpy>
            p += 16;
   1a0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a0b8:	3310      	adds	r3, #16
   1a0ba:	9309      	str	r3, [sp, #36]	; 0x24
            uuidLen = 16;
   1a0bc:	2310      	movs	r3, #16
   1a0be:	f88d 301b 	strb.w	r3, [sp, #27]
   1a0c2:	e01d      	b.n	1a100 <AttsCalculateDbHash+0x144>
          }
          else
          {
            uint16_t uuid;
            BYTES_TO_UINT16(uuid, pAttr->pUuid);
   1a0c4:	9b07      	ldr	r3, [sp, #28]
   1a0c6:	681b      	ldr	r3, [r3, #0]
   1a0c8:	781b      	ldrb	r3, [r3, #0]
   1a0ca:	b29a      	uxth	r2, r3
   1a0cc:	9b07      	ldr	r3, [sp, #28]
   1a0ce:	681b      	ldr	r3, [r3, #0]
   1a0d0:	3301      	adds	r3, #1
   1a0d2:	781b      	ldrb	r3, [r3, #0]
   1a0d4:	b29b      	uxth	r3, r3
   1a0d6:	021b      	lsls	r3, r3, #8
   1a0d8:	b29b      	uxth	r3, r3
   1a0da:	4413      	add	r3, r2
   1a0dc:	f8ad 3010 	strh.w	r3, [sp, #16]
            UINT16_TO_BSTREAM(p,uuid);
   1a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a0e2:	1c5a      	adds	r2, r3, #1
   1a0e4:	9209      	str	r2, [sp, #36]	; 0x24
   1a0e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1a0ea:	b2d2      	uxtb	r2, r2
   1a0ec:	701a      	strb	r2, [r3, #0]
   1a0ee:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1a0f2:	0a1b      	lsrs	r3, r3, #8
   1a0f4:	b299      	uxth	r1, r3
   1a0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a0f8:	1c5a      	adds	r2, r3, #1
   1a0fa:	9209      	str	r2, [sp, #36]	; 0x24
   1a0fc:	b2ca      	uxtb	r2, r1
   1a0fe:	701a      	strb	r2, [r3, #0]
          }

          /* Add Attribute value if required */
          if (valLen - (uuidLen + 2))
   1a100:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1a104:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1a108:	3302      	adds	r3, #2
   1a10a:	429a      	cmp	r2, r3
   1a10c:	d00f      	beq.n	1a12e <AttsCalculateDbHash+0x172>
          {
            memcpy(p, pAttr->pValue, *pAttr->pLen);
   1a10e:	9b07      	ldr	r3, [sp, #28]
   1a110:	6859      	ldr	r1, [r3, #4]
   1a112:	9b07      	ldr	r3, [sp, #28]
   1a114:	689b      	ldr	r3, [r3, #8]
   1a116:	881b      	ldrh	r3, [r3, #0]
   1a118:	461a      	mov	r2, r3
   1a11a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a11c:	f7f1 fff0 	bl	c100 <memcpy>
            p += *pAttr->pLen;
   1a120:	9b07      	ldr	r3, [sp, #28]
   1a122:	689b      	ldr	r3, [r3, #8]
   1a124:	881b      	ldrh	r3, [r3, #0]
   1a126:	461a      	mov	r2, r3
   1a128:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a12a:	4413      	add	r3, r2
   1a12c:	9309      	str	r3, [sp, #36]	; 0x24
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   1a12e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   1a132:	3301      	adds	r3, #1
   1a134:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   1a138:	9b07      	ldr	r3, [sp, #28]
   1a13a:	3310      	adds	r3, #16
   1a13c:	9307      	str	r3, [sp, #28]
   1a13e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a140:	8a5b      	ldrh	r3, [r3, #18]
   1a142:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1a146:	429a      	cmp	r2, r3
   1a148:	d98b      	bls.n	1a062 <AttsCalculateDbHash+0xa6>
          }
        }
      }

      pGroup = pGroup->pNext;
   1a14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a14c:	681b      	ldr	r3, [r3, #0]
   1a14e:	930c      	str	r3, [sp, #48]	; 0x30
    while (pGroup)
   1a150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a152:	2b00      	cmp	r3, #0
   1a154:	f47f af7d 	bne.w	1a052 <AttsCalculateDbHash+0x96>
    }

    /* Send to CMAC */
    if (AttsHashDatabaseString(hashingKey, pMsg, msgLen))
   1a158:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1a15c:	466b      	mov	r3, sp
   1a15e:	9905      	ldr	r1, [sp, #20]
   1a160:	4618      	mov	r0, r3
   1a162:	f7ff ff0f 	bl	19f84 <AttsHashDatabaseString>
   1a166:	4603      	mov	r3, r0
   1a168:	2b00      	cmp	r3, #0
    }
  }

  /* Assert on failure to initiate database hash generation. */
  WSF_ASSERT(FALSE);
}
   1a16a:	b00f      	add	sp, #60	; 0x3c
   1a16c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a170:	1000506c 	.word	0x1000506c

0001a174 <AttsAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsAddGroup(attsGroup_t *pGroup)
{
   1a174:	b500      	push	{lr}
   1a176:	b085      	sub	sp, #20
   1a178:	9001      	str	r0, [sp, #4]
  attsGroup_t   *pElem;
  attsGroup_t   *pPrev = NULL;
   1a17a:	2300      	movs	r3, #0
   1a17c:	9302      	str	r3, [sp, #8]

  /* task schedule lock */
  WsfTaskLock();
   1a17e:	f005 fc45 	bl	1fa0c <WsfTaskLock>

  pElem = (attsGroup_t *) attsCb.groupQueue.pHead;
   1a182:	4b11      	ldr	r3, [pc, #68]	; (1a1c8 <AttsAddGroup+0x54>)
   1a184:	681b      	ldr	r3, [r3, #0]
   1a186:	9303      	str	r3, [sp, #12]

  /* iterate over queue sorted by increasing handle value */
  while (pElem != NULL)
   1a188:	e00a      	b.n	1a1a0 <AttsAddGroup+0x2c>
  {
    if (pGroup->startHandle < pElem->startHandle)
   1a18a:	9b01      	ldr	r3, [sp, #4]
   1a18c:	8a1a      	ldrh	r2, [r3, #16]
   1a18e:	9b03      	ldr	r3, [sp, #12]
   1a190:	8a1b      	ldrh	r3, [r3, #16]
   1a192:	429a      	cmp	r2, r3
   1a194:	d308      	bcc.n	1a1a8 <AttsAddGroup+0x34>
    {
      break;
    }
    pPrev = pElem;
   1a196:	9b03      	ldr	r3, [sp, #12]
   1a198:	9302      	str	r3, [sp, #8]
    pElem = pElem->pNext;
   1a19a:	9b03      	ldr	r3, [sp, #12]
   1a19c:	681b      	ldr	r3, [r3, #0]
   1a19e:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   1a1a0:	9b03      	ldr	r3, [sp, #12]
   1a1a2:	2b00      	cmp	r3, #0
   1a1a4:	d1f1      	bne.n	1a18a <AttsAddGroup+0x16>
   1a1a6:	e000      	b.n	1a1aa <AttsAddGroup+0x36>
      break;
   1a1a8:	bf00      	nop
  }

  /* insert new group */
  WsfQueueInsert(&attsCb.groupQueue, pGroup, pPrev);
   1a1aa:	9a02      	ldr	r2, [sp, #8]
   1a1ac:	9901      	ldr	r1, [sp, #4]
   1a1ae:	4806      	ldr	r0, [pc, #24]	; (1a1c8 <AttsAddGroup+0x54>)
   1a1b0:	f005 fe1c 	bl	1fdec <WsfQueueInsert>

  /* set database hash update status to true until a new hash is generated */
  attsCsfSetHashUpdateStatus(TRUE);
   1a1b4:	2001      	movs	r0, #1
   1a1b6:	f7fe fe93 	bl	18ee0 <attsCsfSetHashUpdateStatus>

  /* task schedule unlock */
  WsfTaskUnlock();
   1a1ba:	f005 fc2c 	bl	1fa16 <WsfTaskUnlock>
}
   1a1be:	bf00      	nop
   1a1c0:	b005      	add	sp, #20
   1a1c2:	f85d fb04 	ldr.w	pc, [sp], #4
   1a1c6:	bf00      	nop
   1a1c8:	1000506c 	.word	0x1000506c

0001a1cc <AttsSetAttr>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
uint8_t AttsSetAttr(uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   1a1cc:	b500      	push	{lr}
   1a1ce:	b087      	sub	sp, #28
   1a1d0:	4603      	mov	r3, r0
   1a1d2:	9200      	str	r2, [sp, #0]
   1a1d4:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a1d8:	460b      	mov	r3, r1
   1a1da:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;
   1a1de:	2300      	movs	r3, #0
   1a1e0:	f88d 3017 	strb.w	r3, [sp, #23]

  WsfTaskLock();
   1a1e4:	f005 fc12 	bl	1fa0c <WsfTaskLock>

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   1a1e8:	aa03      	add	r2, sp, #12
   1a1ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1a1ee:	4611      	mov	r1, r2
   1a1f0:	4618      	mov	r0, r3
   1a1f2:	f000 f89b 	bl	1a32c <attsFindByHandle>
   1a1f6:	9004      	str	r0, [sp, #16]
   1a1f8:	9b04      	ldr	r3, [sp, #16]
   1a1fa:	2b00      	cmp	r3, #0
   1a1fc:	d01d      	beq.n	1a23a <AttsSetAttr+0x6e>
  {
    /* verify write length */
    if (valueLen > pAttr->maxLen)
   1a1fe:	9b04      	ldr	r3, [sp, #16]
   1a200:	899b      	ldrh	r3, [r3, #12]
   1a202:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1a206:	429a      	cmp	r2, r3
   1a208:	d903      	bls.n	1a212 <AttsSetAttr+0x46>
    {
      err = ATT_ERR_LENGTH;
   1a20a:	230d      	movs	r3, #13
   1a20c:	f88d 3017 	strb.w	r3, [sp, #23]
   1a210:	e016      	b.n	1a240 <AttsSetAttr+0x74>
    }
    else
    {
      /* set attribute value */
      memcpy(pAttr->pValue, pValue, valueLen);
   1a212:	9b04      	ldr	r3, [sp, #16]
   1a214:	685b      	ldr	r3, [r3, #4]
   1a216:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1a21a:	9900      	ldr	r1, [sp, #0]
   1a21c:	4618      	mov	r0, r3
   1a21e:	f7f1 ff6f 	bl	c100 <memcpy>

      /* set the length if variable length attribute */
      if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   1a222:	9b04      	ldr	r3, [sp, #16]
   1a224:	7b9b      	ldrb	r3, [r3, #14]
   1a226:	f003 0308 	and.w	r3, r3, #8
   1a22a:	2b00      	cmp	r3, #0
   1a22c:	d008      	beq.n	1a240 <AttsSetAttr+0x74>
      {
        *(pAttr->pLen) = valueLen;
   1a22e:	9b04      	ldr	r3, [sp, #16]
   1a230:	689b      	ldr	r3, [r3, #8]
   1a232:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1a236:	801a      	strh	r2, [r3, #0]
   1a238:	e002      	b.n	1a240 <AttsSetAttr+0x74>
    }
  }
  /* else attribute not found */
  else
  {
    err = ATT_ERR_NOT_FOUND;
   1a23a:	230a      	movs	r3, #10
   1a23c:	f88d 3017 	strb.w	r3, [sp, #23]
  }

  WsfTaskUnlock();
   1a240:	f005 fbe9 	bl	1fa16 <WsfTaskUnlock>

  return err;
   1a244:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   1a248:	4618      	mov	r0, r3
   1a24a:	b007      	add	sp, #28
   1a24c:	f85d fb04 	ldr.w	pc, [sp], #4

0001a250 <attsUuidCmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuidCmp(attsAttr_t *pAttr, uint8_t uuidLen, uint8_t *pUuid)
{
   1a250:	b500      	push	{lr}
   1a252:	b085      	sub	sp, #20
   1a254:	9003      	str	r0, [sp, #12]
   1a256:	460b      	mov	r3, r1
   1a258:	9201      	str	r2, [sp, #4]
   1a25a:	f88d 300b 	strb.w	r3, [sp, #11]
  /* if both uuids are the same length */
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   1a25e:	9b03      	ldr	r3, [sp, #12]
   1a260:	7b9b      	ldrb	r3, [r3, #14]
   1a262:	f003 0301 	and.w	r3, r3, #1
   1a266:	2b00      	cmp	r3, #0
   1a268:	d103      	bne.n	1a272 <attsUuidCmp+0x22>
   1a26a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1a26e:	2b02      	cmp	r3, #2
   1a270:	d009      	beq.n	1a286 <attsUuidCmp+0x36>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
   1a272:	9b03      	ldr	r3, [sp, #12]
   1a274:	7b9b      	ldrb	r3, [r3, #14]
   1a276:	f003 0301 	and.w	r3, r3, #1
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   1a27a:	2b00      	cmp	r3, #0
   1a27c:	d012      	beq.n	1a2a4 <attsUuidCmp+0x54>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
   1a27e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1a282:	2b10      	cmp	r3, #16
   1a284:	d10e      	bne.n	1a2a4 <attsUuidCmp+0x54>
  {
    /* simply compare the data */
    return (memcmp(pAttr->pUuid, pUuid, uuidLen) == 0);
   1a286:	9b03      	ldr	r3, [sp, #12]
   1a288:	681b      	ldr	r3, [r3, #0]
   1a28a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1a28e:	9901      	ldr	r1, [sp, #4]
   1a290:	4618      	mov	r0, r3
   1a292:	f00b f9e1 	bl	25658 <memcmp>
   1a296:	4603      	mov	r3, r0
   1a298:	2b00      	cmp	r3, #0
   1a29a:	bf0c      	ite	eq
   1a29c:	2301      	moveq	r3, #1
   1a29e:	2300      	movne	r3, #0
   1a2a0:	b2db      	uxtb	r3, r3
   1a2a2:	e018      	b.n	1a2d6 <attsUuidCmp+0x86>
  }
  /* else we need to convert one of the uuids */
  else if (((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_128_UUID_LEN))
   1a2a4:	9b03      	ldr	r3, [sp, #12]
   1a2a6:	7b9b      	ldrb	r3, [r3, #14]
   1a2a8:	f003 0301 	and.w	r3, r3, #1
   1a2ac:	2b00      	cmp	r3, #0
   1a2ae:	d10b      	bne.n	1a2c8 <attsUuidCmp+0x78>
   1a2b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1a2b4:	2b10      	cmp	r3, #16
   1a2b6:	d107      	bne.n	1a2c8 <attsUuidCmp+0x78>
  {
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
   1a2b8:	9b03      	ldr	r3, [sp, #12]
   1a2ba:	681b      	ldr	r3, [r3, #0]
   1a2bc:	9901      	ldr	r1, [sp, #4]
   1a2be:	4618      	mov	r0, r3
   1a2c0:	f001 fee4 	bl	1c08c <attUuidCmp16to128>
   1a2c4:	4603      	mov	r3, r0
   1a2c6:	e006      	b.n	1a2d6 <attsUuidCmp+0x86>
  }
  else
  {
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
   1a2c8:	9b03      	ldr	r3, [sp, #12]
   1a2ca:	681b      	ldr	r3, [r3, #0]
   1a2cc:	4619      	mov	r1, r3
   1a2ce:	9801      	ldr	r0, [sp, #4]
   1a2d0:	f001 fedc 	bl	1c08c <attUuidCmp16to128>
   1a2d4:	4603      	mov	r3, r0
  }
}
   1a2d6:	4618      	mov	r0, r3
   1a2d8:	b005      	add	sp, #20
   1a2da:	f85d fb04 	ldr.w	pc, [sp], #4

0001a2de <attsUuid16Cmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuid16Cmp(uint8_t *pUuid16, uint8_t uuidLen, uint8_t *pUuid)
{
   1a2de:	b500      	push	{lr}
   1a2e0:	b085      	sub	sp, #20
   1a2e2:	9003      	str	r0, [sp, #12]
   1a2e4:	460b      	mov	r3, r1
   1a2e6:	9201      	str	r2, [sp, #4]
   1a2e8:	f88d 300b 	strb.w	r3, [sp, #11]
  if (uuidLen == ATT_16_UUID_LEN)
   1a2ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1a2f0:	2b02      	cmp	r3, #2
   1a2f2:	d112      	bne.n	1a31a <attsUuid16Cmp+0x3c>
  {
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
   1a2f4:	9b03      	ldr	r3, [sp, #12]
   1a2f6:	781a      	ldrb	r2, [r3, #0]
   1a2f8:	9b01      	ldr	r3, [sp, #4]
   1a2fa:	781b      	ldrb	r3, [r3, #0]
   1a2fc:	429a      	cmp	r2, r3
   1a2fe:	d109      	bne.n	1a314 <attsUuid16Cmp+0x36>
   1a300:	9b03      	ldr	r3, [sp, #12]
   1a302:	3301      	adds	r3, #1
   1a304:	781a      	ldrb	r2, [r3, #0]
   1a306:	9b01      	ldr	r3, [sp, #4]
   1a308:	3301      	adds	r3, #1
   1a30a:	781b      	ldrb	r3, [r3, #0]
   1a30c:	429a      	cmp	r2, r3
   1a30e:	d101      	bne.n	1a314 <attsUuid16Cmp+0x36>
   1a310:	2301      	movs	r3, #1
   1a312:	e000      	b.n	1a316 <attsUuid16Cmp+0x38>
   1a314:	2300      	movs	r3, #0
   1a316:	b2db      	uxtb	r3, r3
   1a318:	e004      	b.n	1a324 <attsUuid16Cmp+0x46>
  }
  else
  {
    return attUuidCmp16to128(pUuid16, pUuid);
   1a31a:	9901      	ldr	r1, [sp, #4]
   1a31c:	9803      	ldr	r0, [sp, #12]
   1a31e:	f001 feb5 	bl	1c08c <attUuidCmp16to128>
   1a322:	4603      	mov	r3, r0
  }
}
   1a324:	4618      	mov	r0, r3
   1a326:	b005      	add	sp, #20
   1a328:	f85d fb04 	ldr.w	pc, [sp], #4

0001a32c <attsFindByHandle>:
 *
 *  \return Pointer to attribute if found, othewise NULL.
 */
/*************************************************************************************************/
attsAttr_t *attsFindByHandle(uint16_t handle, attsGroup_t **pAttrGroup)
{
   1a32c:	b084      	sub	sp, #16
   1a32e:	4603      	mov	r3, r0
   1a330:	9100      	str	r1, [sp, #0]
   1a332:	f8ad 3006 	strh.w	r3, [sp, #6]
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1a336:	4b13      	ldr	r3, [pc, #76]	; (1a384 <attsFindByHandle+0x58>)
   1a338:	681b      	ldr	r3, [r3, #0]
   1a33a:	9303      	str	r3, [sp, #12]
   1a33c:	e01b      	b.n	1a376 <attsFindByHandle+0x4a>
  {
    /*  if start handle within handle range of group */
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
   1a33e:	9b03      	ldr	r3, [sp, #12]
   1a340:	8a1b      	ldrh	r3, [r3, #16]
   1a342:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1a346:	429a      	cmp	r2, r3
   1a348:	d312      	bcc.n	1a370 <attsFindByHandle+0x44>
   1a34a:	9b03      	ldr	r3, [sp, #12]
   1a34c:	8a5b      	ldrh	r3, [r3, #18]
   1a34e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1a352:	429a      	cmp	r2, r3
   1a354:	d80c      	bhi.n	1a370 <attsFindByHandle+0x44>
    {
      /* index by handle into attribute array to return attribute */
      *pAttrGroup = pGroup;
   1a356:	9b00      	ldr	r3, [sp, #0]
   1a358:	9a03      	ldr	r2, [sp, #12]
   1a35a:	601a      	str	r2, [r3, #0]
      return &pGroup->pAttr[handle - pGroup->startHandle];
   1a35c:	9b03      	ldr	r3, [sp, #12]
   1a35e:	685a      	ldr	r2, [r3, #4]
   1a360:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1a364:	9903      	ldr	r1, [sp, #12]
   1a366:	8a09      	ldrh	r1, [r1, #16]
   1a368:	1a5b      	subs	r3, r3, r1
   1a36a:	011b      	lsls	r3, r3, #4
   1a36c:	4413      	add	r3, r2
   1a36e:	e006      	b.n	1a37e <attsFindByHandle+0x52>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1a370:	9b03      	ldr	r3, [sp, #12]
   1a372:	681b      	ldr	r3, [r3, #0]
   1a374:	9303      	str	r3, [sp, #12]
   1a376:	9b03      	ldr	r3, [sp, #12]
   1a378:	2b00      	cmp	r3, #0
   1a37a:	d1e0      	bne.n	1a33e <attsFindByHandle+0x12>
    }
  }

  /* handle not found */
  return NULL;
   1a37c:	2300      	movs	r3, #0
}
   1a37e:	4618      	mov	r0, r3
   1a380:	b004      	add	sp, #16
   1a382:	4770      	bx	lr
   1a384:	1000506c 	.word	0x1000506c

0001a388 <attsFindInRange>:
 *
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindInRange(uint16_t startHandle, uint16_t endHandle, attsAttr_t **pAttr)
{
   1a388:	b084      	sub	sp, #16
   1a38a:	4603      	mov	r3, r0
   1a38c:	9200      	str	r2, [sp, #0]
   1a38e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a392:	460b      	mov	r3, r1
   1a394:	f8ad 3004 	strh.w	r3, [sp, #4]
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1a398:	4b1b      	ldr	r3, [pc, #108]	; (1a408 <attsFindInRange+0x80>)
   1a39a:	681b      	ldr	r3, [r3, #0]
   1a39c:	9303      	str	r3, [sp, #12]
   1a39e:	e02c      	b.n	1a3fa <attsFindInRange+0x72>
  {
    /* if start handle is less than group start handle but handle range is within group */
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   1a3a0:	9b03      	ldr	r3, [sp, #12]
   1a3a2:	8a1b      	ldrh	r3, [r3, #16]
   1a3a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1a3a8:	429a      	cmp	r2, r3
   1a3aa:	d209      	bcs.n	1a3c0 <attsFindInRange+0x38>
   1a3ac:	9b03      	ldr	r3, [sp, #12]
   1a3ae:	8a1b      	ldrh	r3, [r3, #16]
   1a3b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1a3b4:	429a      	cmp	r2, r3
   1a3b6:	d303      	bcc.n	1a3c0 <attsFindInRange+0x38>
    {
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
   1a3b8:	9b03      	ldr	r3, [sp, #12]
   1a3ba:	8a1b      	ldrh	r3, [r3, #16]
   1a3bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    /*  if start handle within handle range of group */
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   1a3c0:	9b03      	ldr	r3, [sp, #12]
   1a3c2:	8a1b      	ldrh	r3, [r3, #16]
   1a3c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1a3c8:	429a      	cmp	r2, r3
   1a3ca:	d313      	bcc.n	1a3f4 <attsFindInRange+0x6c>
   1a3cc:	9b03      	ldr	r3, [sp, #12]
   1a3ce:	8a5b      	ldrh	r3, [r3, #18]
   1a3d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1a3d4:	429a      	cmp	r2, r3
   1a3d6:	d80d      	bhi.n	1a3f4 <attsFindInRange+0x6c>
    {
      /* index by handle into attribute array to return attribute */
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1a3d8:	9b03      	ldr	r3, [sp, #12]
   1a3da:	685a      	ldr	r2, [r3, #4]
   1a3dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1a3e0:	9903      	ldr	r1, [sp, #12]
   1a3e2:	8a09      	ldrh	r1, [r1, #16]
   1a3e4:	1a5b      	subs	r3, r3, r1
   1a3e6:	011b      	lsls	r3, r3, #4
   1a3e8:	441a      	add	r2, r3
   1a3ea:	9b00      	ldr	r3, [sp, #0]
   1a3ec:	601a      	str	r2, [r3, #0]
      return startHandle;
   1a3ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1a3f2:	e006      	b.n	1a402 <attsFindInRange+0x7a>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1a3f4:	9b03      	ldr	r3, [sp, #12]
   1a3f6:	681b      	ldr	r3, [r3, #0]
   1a3f8:	9303      	str	r3, [sp, #12]
   1a3fa:	9b03      	ldr	r3, [sp, #12]
   1a3fc:	2b00      	cmp	r3, #0
   1a3fe:	d1cf      	bne.n	1a3a0 <attsFindInRange+0x18>
    }
  }

  /* handle within range not found */
  return ATT_HANDLE_NONE;
   1a400:	2300      	movs	r3, #0
}
   1a402:	4618      	mov	r0, r3
   1a404:	b004      	add	sp, #16
   1a406:	4770      	bx	lr
   1a408:	1000506c 	.word	0x1000506c

0001a40c <attsPermissions>:
 *
 *  \return ATT_SUCCESS if successful or error code on failure.
 */
/*************************************************************************************************/
uint8_t attsPermissions(dmConnId_t connId, uint8_t permit, uint16_t handle, uint8_t permissions)
{
   1a40c:	b510      	push	{r4, lr}
   1a40e:	b084      	sub	sp, #16
   1a410:	4604      	mov	r4, r0
   1a412:	4608      	mov	r0, r1
   1a414:	4611      	mov	r1, r2
   1a416:	461a      	mov	r2, r3
   1a418:	4623      	mov	r3, r4
   1a41a:	f88d 3007 	strb.w	r3, [sp, #7]
   1a41e:	4603      	mov	r3, r0
   1a420:	f88d 3006 	strb.w	r3, [sp, #6]
   1a424:	460b      	mov	r3, r1
   1a426:	f8ad 3004 	strh.w	r3, [sp, #4]
   1a42a:	4613      	mov	r3, r2
   1a42c:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t secLevel;

  /* verify read or write permissions */
  if (!(permissions & permit))
   1a430:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1a434:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1a438:	4013      	ands	r3, r2
   1a43a:	b2db      	uxtb	r3, r3
   1a43c:	2b00      	cmp	r3, #0
   1a43e:	d107      	bne.n	1a450 <attsPermissions+0x44>
  {
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
   1a440:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1a444:	2b01      	cmp	r3, #1
   1a446:	d101      	bne.n	1a44c <attsPermissions+0x40>
   1a448:	2302      	movs	r3, #2
   1a44a:	e04a      	b.n	1a4e2 <attsPermissions+0xd6>
   1a44c:	2303      	movs	r3, #3
   1a44e:	e048      	b.n	1a4e2 <attsPermissions+0xd6>
  }

  /* convert write permissions to read permissions for easier masking */
  if (permit == ATTS_PERMIT_WRITE)
   1a450:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1a454:	2b10      	cmp	r3, #16
   1a456:	d104      	bne.n	1a462 <attsPermissions+0x56>
  {
    permissions >>= 4;
   1a458:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1a45c:	091b      	lsrs	r3, r3, #4
   1a45e:	f88d 3003 	strb.w	r3, [sp, #3]
  }

  /* if no security requirements return quickly */
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
   1a462:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1a466:	f003 030e 	and.w	r3, r3, #14
   1a46a:	2b00      	cmp	r3, #0
   1a46c:	d101      	bne.n	1a472 <attsPermissions+0x66>
  {
    return ATT_SUCCESS;
   1a46e:	2300      	movs	r3, #0
   1a470:	e037      	b.n	1a4e2 <attsPermissions+0xd6>
  }

  /* get security level for this connection */
  secLevel = DmConnSecLevel(connId);
   1a472:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a476:	4618      	mov	r0, r3
   1a478:	f7fb fa9c 	bl	159b4 <DmConnSecLevel>
   1a47c:	4603      	mov	r3, r0
   1a47e:	f88d 300f 	strb.w	r3, [sp, #15]

  /* check if encryption required */
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
   1a482:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1a486:	f003 0308 	and.w	r3, r3, #8
   1a48a:	2b00      	cmp	r3, #0
   1a48c:	d005      	beq.n	1a49a <attsPermissions+0x8e>
   1a48e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a492:	2b00      	cmp	r3, #0
   1a494:	d101      	bne.n	1a49a <attsPermissions+0x8e>
  {
    return ATT_ERR_AUTH;
   1a496:	2305      	movs	r3, #5
   1a498:	e023      	b.n	1a4e2 <attsPermissions+0xd6>
  }

  /* check if encryption required with authenticated key */
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
   1a49a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1a49e:	f003 030a 	and.w	r3, r3, #10
   1a4a2:	2b0a      	cmp	r3, #10
   1a4a4:	d105      	bne.n	1a4b2 <attsPermissions+0xa6>
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
   1a4a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a4aa:	2b01      	cmp	r3, #1
   1a4ac:	d801      	bhi.n	1a4b2 <attsPermissions+0xa6>
  {
    return ATT_ERR_AUTH;
   1a4ae:	2305      	movs	r3, #5
   1a4b0:	e017      	b.n	1a4e2 <attsPermissions+0xd6>
  }

  /* authorization check */
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
   1a4b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1a4b6:	f003 0304 	and.w	r3, r3, #4
   1a4ba:	2b00      	cmp	r3, #0
   1a4bc:	d010      	beq.n	1a4e0 <attsPermissions+0xd4>
  {
    if (attsCb.authorCback == NULL)
   1a4be:	4b0a      	ldr	r3, [pc, #40]	; (1a4e8 <attsPermissions+0xdc>)
   1a4c0:	691b      	ldr	r3, [r3, #16]
   1a4c2:	2b00      	cmp	r3, #0
   1a4c4:	d101      	bne.n	1a4ca <attsPermissions+0xbe>
    {
      return ATT_ERR_AUTHOR;
   1a4c6:	2308      	movs	r3, #8
   1a4c8:	e00b      	b.n	1a4e2 <attsPermissions+0xd6>
    }
    else
    {
      return (*attsCb.authorCback)(connId, permit, handle);
   1a4ca:	4b07      	ldr	r3, [pc, #28]	; (1a4e8 <attsPermissions+0xdc>)
   1a4cc:	691b      	ldr	r3, [r3, #16]
   1a4ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1a4d2:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1a4d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1a4da:	4798      	blx	r3
   1a4dc:	4603      	mov	r3, r0
   1a4de:	e000      	b.n	1a4e2 <attsPermissions+0xd6>
    }
  }
  else
  {
    return ATT_SUCCESS;
   1a4e0:	2300      	movs	r3, #0
  }
}
   1a4e2:	4618      	mov	r0, r3
   1a4e4:	b004      	add	sp, #16
   1a4e6:	bd10      	pop	{r4, pc}
   1a4e8:	1000506c 	.word	0x1000506c

0001a4ec <attsProcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcMtuReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1a4ec:	b510      	push	{r4, lr}
   1a4ee:	b088      	sub	sp, #32
   1a4f0:	9003      	str	r0, [sp, #12]
   1a4f2:	460b      	mov	r3, r1
   1a4f4:	9201      	str	r2, [sp, #4]
   1a4f6:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t   *p;
  uint16_t  mtu;
  uint16_t  localMtu;
  uint8_t   *pRsp;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   1a4fa:	9b01      	ldr	r3, [sp, #4]
   1a4fc:	3309      	adds	r3, #9
   1a4fe:	9306      	str	r3, [sp, #24]

  /* parse mtu */
  BYTES_TO_UINT16(mtu, p);
   1a500:	9b06      	ldr	r3, [sp, #24]
   1a502:	781b      	ldrb	r3, [r3, #0]
   1a504:	b29a      	uxth	r2, r3
   1a506:	9b06      	ldr	r3, [sp, #24]
   1a508:	3301      	adds	r3, #1
   1a50a:	781b      	ldrb	r3, [r3, #0]
   1a50c:	b29b      	uxth	r3, r3
   1a50e:	021b      	lsls	r3, r3, #8
   1a510:	b29b      	uxth	r3, r3
   1a512:	4413      	add	r3, r2
   1a514:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* verify */
  if (mtu < ATT_DEFAULT_MTU)
   1a518:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a51c:	2b16      	cmp	r3, #22
   1a51e:	d802      	bhi.n	1a526 <attsProcMtuReq+0x3a>
  {
    mtu = ATT_DEFAULT_MTU;
   1a520:	2317      	movs	r3, #23
   1a522:	f8ad 301e 	strh.w	r3, [sp, #30]
  }

  /* get desired MTU */
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   1a526:	4b23      	ldr	r3, [pc, #140]	; (1a5b4 <attsProcMtuReq+0xc8>)
   1a528:	681b      	ldr	r3, [r3, #0]
   1a52a:	889b      	ldrh	r3, [r3, #4]
   1a52c:	461c      	mov	r4, r3
   1a52e:	f7f3 ffa9 	bl	e484 <HciGetMaxRxAclLen>
   1a532:	4603      	mov	r3, r0
   1a534:	3b04      	subs	r3, #4
   1a536:	429c      	cmp	r4, r3
   1a538:	da03      	bge.n	1a542 <attsProcMtuReq+0x56>
   1a53a:	4b1e      	ldr	r3, [pc, #120]	; (1a5b4 <attsProcMtuReq+0xc8>)
   1a53c:	681b      	ldr	r3, [r3, #0]
   1a53e:	889b      	ldrh	r3, [r3, #4]
   1a540:	e004      	b.n	1a54c <attsProcMtuReq+0x60>
   1a542:	f7f3 ff9f 	bl	e484 <HciGetMaxRxAclLen>
   1a546:	4603      	mov	r3, r0
   1a548:	3b04      	subs	r3, #4
   1a54a:	b29b      	uxth	r3, r3
   1a54c:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* send response */
  if ((pRsp = attMsgAlloc(L2C_PAYLOAD_START + ATT_MTU_RSP_LEN)) != NULL)
   1a550:	200b      	movs	r0, #11
   1a552:	f001 fe1f 	bl	1c194 <attMsgAlloc>
   1a556:	9004      	str	r0, [sp, #16]
   1a558:	9b04      	ldr	r3, [sp, #16]
   1a55a:	2b00      	cmp	r3, #0
   1a55c:	d01e      	beq.n	1a59c <attsProcMtuReq+0xb0>
  {
    p = pRsp + L2C_PAYLOAD_START;
   1a55e:	9b04      	ldr	r3, [sp, #16]
   1a560:	3308      	adds	r3, #8
   1a562:	9306      	str	r3, [sp, #24]
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
   1a564:	9b06      	ldr	r3, [sp, #24]
   1a566:	1c5a      	adds	r2, r3, #1
   1a568:	9206      	str	r2, [sp, #24]
   1a56a:	2203      	movs	r2, #3
   1a56c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, localMtu);
   1a56e:	9b06      	ldr	r3, [sp, #24]
   1a570:	1c5a      	adds	r2, r3, #1
   1a572:	9206      	str	r2, [sp, #24]
   1a574:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1a578:	b2d2      	uxtb	r2, r2
   1a57a:	701a      	strb	r2, [r3, #0]
   1a57c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1a580:	0a1b      	lsrs	r3, r3, #8
   1a582:	b299      	uxth	r1, r3
   1a584:	9b06      	ldr	r3, [sp, #24]
   1a586:	1c5a      	adds	r2, r3, #1
   1a588:	9206      	str	r2, [sp, #24]
   1a58a:	b2ca      	uxtb	r2, r1
   1a58c:	701a      	strb	r2, [r3, #0]

    L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_MTU_RSP_LEN, pRsp);
   1a58e:	9b03      	ldr	r3, [sp, #12]
   1a590:	8b19      	ldrh	r1, [r3, #24]
   1a592:	9b04      	ldr	r3, [sp, #16]
   1a594:	2203      	movs	r2, #3
   1a596:	2004      	movs	r0, #4
   1a598:	f002 fdd6 	bl	1d148 <L2cDataReq>
  }

  /* set mtu for the connection */
  attSetMtu(pCcb, mtu, localMtu);
   1a59c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1a5a0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a5a4:	4619      	mov	r1, r3
   1a5a6:	9803      	ldr	r0, [sp, #12]
   1a5a8:	f001 fd8e 	bl	1c0c8 <attSetMtu>
}
   1a5ac:	bf00      	nop
   1a5ae:	b008      	add	sp, #32
   1a5b0:	bd10      	pop	{r4, pc}
   1a5b2:	bf00      	nop
   1a5b4:	10002bb0 	.word	0x10002bb0

0001a5b8 <attsProcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindInfoReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1a5b8:	b500      	push	{lr}
   1a5ba:	b08b      	sub	sp, #44	; 0x2c
   1a5bc:	9003      	str	r0, [sp, #12]
   1a5be:	460b      	mov	r3, r1
   1a5c0:	9201      	str	r2, [sp, #4]
   1a5c2:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t     *p;
  attsAttr_t  *pAttr;
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     err = ATT_SUCCESS;
   1a5c6:	2300      	movs	r3, #0
   1a5c8:	f88d 301d 	strb.w	r3, [sp, #29]

  /* parse handles */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1a5cc:	9b01      	ldr	r3, [sp, #4]
   1a5ce:	3309      	adds	r3, #9
   1a5d0:	9301      	str	r3, [sp, #4]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   1a5d2:	9b01      	ldr	r3, [sp, #4]
   1a5d4:	781b      	ldrb	r3, [r3, #0]
   1a5d6:	b29a      	uxth	r2, r3
   1a5d8:	9b01      	ldr	r3, [sp, #4]
   1a5da:	3301      	adds	r3, #1
   1a5dc:	781b      	ldrb	r3, [r3, #0]
   1a5de:	b29b      	uxth	r3, r3
   1a5e0:	021b      	lsls	r3, r3, #8
   1a5e2:	b29b      	uxth	r3, r3
   1a5e4:	4413      	add	r3, r2
   1a5e6:	f8ad 301a 	strh.w	r3, [sp, #26]
   1a5ea:	9b01      	ldr	r3, [sp, #4]
   1a5ec:	3302      	adds	r3, #2
   1a5ee:	9301      	str	r3, [sp, #4]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   1a5f0:	9b01      	ldr	r3, [sp, #4]
   1a5f2:	781b      	ldrb	r3, [r3, #0]
   1a5f4:	b29a      	uxth	r2, r3
   1a5f6:	9b01      	ldr	r3, [sp, #4]
   1a5f8:	3301      	adds	r3, #1
   1a5fa:	781b      	ldrb	r3, [r3, #0]
   1a5fc:	b29b      	uxth	r3, r3
   1a5fe:	021b      	lsls	r3, r3, #8
   1a600:	b29b      	uxth	r3, r3
   1a602:	4413      	add	r3, r2
   1a604:	f8ad 3018 	strh.w	r3, [sp, #24]
   1a608:	9b01      	ldr	r3, [sp, #4]
   1a60a:	3302      	adds	r3, #2
   1a60c:	9301      	str	r3, [sp, #4]

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   1a60e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1a612:	2b00      	cmp	r3, #0
   1a614:	d005      	beq.n	1a622 <attsProcFindInfoReq+0x6a>
   1a616:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1a61a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1a61e:	429a      	cmp	r2, r3
   1a620:	d902      	bls.n	1a628 <attsProcFindInfoReq+0x70>
  {
    err = ATT_ERR_HANDLE;
   1a622:	2301      	movs	r3, #1
   1a624:	f88d 301d 	strb.w	r3, [sp, #29]
  }

  if (!err)
   1a628:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1a62c:	2b00      	cmp	r3, #0
   1a62e:	f040 80ab 	bne.w	1a788 <attsProcFindInfoReq+0x1d0>
  {
    /* allocate max size buffer for response */
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1a632:	9b03      	ldr	r3, [sp, #12]
   1a634:	8b5b      	ldrh	r3, [r3, #26]
   1a636:	3308      	adds	r3, #8
   1a638:	b29b      	uxth	r3, r3
   1a63a:	4618      	mov	r0, r3
   1a63c:	f001 fdaa 	bl	1c194 <attMsgAlloc>
   1a640:	9009      	str	r0, [sp, #36]	; 0x24
   1a642:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a644:	2b00      	cmp	r3, #0
   1a646:	f000 809c 	beq.w	1a782 <attsProcFindInfoReq+0x1ca>
    {
      p = pBuf + L2C_PAYLOAD_START;
   1a64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a64c:	3308      	adds	r3, #8
   1a64e:	9308      	str	r3, [sp, #32]
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_RSP);
   1a650:	9b08      	ldr	r3, [sp, #32]
   1a652:	1c5a      	adds	r2, r3, #1
   1a654:	9208      	str	r2, [sp, #32]
   1a656:	2205      	movs	r2, #5
   1a658:	701a      	strb	r2, [r3, #0]

      /* set result format */
      UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_16_UUID);
   1a65a:	9b08      	ldr	r3, [sp, #32]
   1a65c:	1c5a      	adds	r2, r3, #1
   1a65e:	9208      	str	r2, [sp, #32]
   1a660:	2201      	movs	r2, #1
   1a662:	701a      	strb	r2, [r3, #0]

      /* find attributes within handle range */
      handle = startHandle;
   1a664:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1a668:	f8ad 301e 	strh.w	r3, [sp, #30]
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   1a66c:	e066      	b.n	1a73c <attsProcFindInfoReq+0x184>
      {
        /* copy handle and UUID into response buffer */

        /* if 128 bit UUID */
        if (pAttr->settings & ATTS_SET_UUID_128)
   1a66e:	9b05      	ldr	r3, [sp, #20]
   1a670:	7b9b      	ldrb	r3, [r3, #14]
   1a672:	f003 0301 	and.w	r3, r3, #1
   1a676:	2b00      	cmp	r3, #0
   1a678:	d027      	beq.n	1a6ca <attsProcFindInfoReq+0x112>
        {
          /* if this is the first result */
          if (p == (pBuf + L2C_PAYLOAD_START + 2))
   1a67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a67c:	330a      	adds	r3, #10
   1a67e:	9a08      	ldr	r2, [sp, #32]
   1a680:	429a      	cmp	r2, r3
   1a682:	d16b      	bne.n	1a75c <attsProcFindInfoReq+0x1a4>
          {
            p--;
   1a684:	9b08      	ldr	r3, [sp, #32]
   1a686:	3b01      	subs	r3, #1
   1a688:	9308      	str	r3, [sp, #32]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
   1a68a:	9b08      	ldr	r3, [sp, #32]
   1a68c:	1c5a      	adds	r2, r3, #1
   1a68e:	9208      	str	r2, [sp, #32]
   1a690:	2202      	movs	r2, #2
   1a692:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(p, handle);
   1a694:	9b08      	ldr	r3, [sp, #32]
   1a696:	1c5a      	adds	r2, r3, #1
   1a698:	9208      	str	r2, [sp, #32]
   1a69a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   1a69e:	b2d2      	uxtb	r2, r2
   1a6a0:	701a      	strb	r2, [r3, #0]
   1a6a2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a6a6:	0a1b      	lsrs	r3, r3, #8
   1a6a8:	b299      	uxth	r1, r3
   1a6aa:	9b08      	ldr	r3, [sp, #32]
   1a6ac:	1c5a      	adds	r2, r3, #1
   1a6ae:	9208      	str	r2, [sp, #32]
   1a6b0:	b2ca      	uxtb	r2, r1
   1a6b2:	701a      	strb	r2, [r3, #0]
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
   1a6b4:	9b05      	ldr	r3, [sp, #20]
   1a6b6:	681b      	ldr	r3, [r3, #0]
   1a6b8:	2210      	movs	r2, #16
   1a6ba:	4619      	mov	r1, r3
   1a6bc:	9808      	ldr	r0, [sp, #32]
   1a6be:	f7f1 fd1f 	bl	c100 <memcpy>
            p += ATT_128_UUID_LEN;
   1a6c2:	9b08      	ldr	r3, [sp, #32]
   1a6c4:	3310      	adds	r3, #16
   1a6c6:	9308      	str	r3, [sp, #32]
          }
          break;
   1a6c8:	e048      	b.n	1a75c <attsProcFindInfoReq+0x1a4>
        }
        /* else 16 bit UUID */
        else
        {
          /* check if result fits */
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
   1a6ca:	9b08      	ldr	r3, [sp, #32]
   1a6cc:	1d1a      	adds	r2, r3, #4
              (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1a6ce:	9b03      	ldr	r3, [sp, #12]
   1a6d0:	8b5b      	ldrh	r3, [r3, #26]
   1a6d2:	3308      	adds	r3, #8
   1a6d4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a6d6:	440b      	add	r3, r1
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
   1a6d8:	429a      	cmp	r2, r3
   1a6da:	d841      	bhi.n	1a760 <attsProcFindInfoReq+0x1a8>
          {
            /* copy result */
            UINT16_TO_BSTREAM(p, handle);
   1a6dc:	9b08      	ldr	r3, [sp, #32]
   1a6de:	1c5a      	adds	r2, r3, #1
   1a6e0:	9208      	str	r2, [sp, #32]
   1a6e2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   1a6e6:	b2d2      	uxtb	r2, r2
   1a6e8:	701a      	strb	r2, [r3, #0]
   1a6ea:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a6ee:	0a1b      	lsrs	r3, r3, #8
   1a6f0:	b299      	uxth	r1, r3
   1a6f2:	9b08      	ldr	r3, [sp, #32]
   1a6f4:	1c5a      	adds	r2, r3, #1
   1a6f6:	9208      	str	r2, [sp, #32]
   1a6f8:	b2ca      	uxtb	r2, r1
   1a6fa:	701a      	strb	r2, [r3, #0]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[0]);
   1a6fc:	9b05      	ldr	r3, [sp, #20]
   1a6fe:	681a      	ldr	r2, [r3, #0]
   1a700:	9b08      	ldr	r3, [sp, #32]
   1a702:	1c59      	adds	r1, r3, #1
   1a704:	9108      	str	r1, [sp, #32]
   1a706:	7812      	ldrb	r2, [r2, #0]
   1a708:	701a      	strb	r2, [r3, #0]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
   1a70a:	9b05      	ldr	r3, [sp, #20]
   1a70c:	681b      	ldr	r3, [r3, #0]
   1a70e:	1c5a      	adds	r2, r3, #1
   1a710:	9b08      	ldr	r3, [sp, #32]
   1a712:	1c59      	adds	r1, r3, #1
   1a714:	9108      	str	r1, [sp, #32]
   1a716:	7812      	ldrb	r2, [r2, #0]
   1a718:	701a      	strb	r2, [r3, #0]
            break;
          }
        }

        /* special case of handle at max range */
        if (handle == ATT_HANDLE_MAX)
   1a71a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a71e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a722:	4293      	cmp	r3, r2
   1a724:	d01e      	beq.n	1a764 <attsProcFindInfoReq+0x1ac>
        {
          break;
        }

        /* try next handle */
        if (++handle > endHandle)
   1a726:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a72a:	3301      	adds	r3, #1
   1a72c:	f8ad 301e 	strh.w	r3, [sp, #30]
   1a730:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   1a734:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1a738:	429a      	cmp	r2, r3
   1a73a:	d815      	bhi.n	1a768 <attsProcFindInfoReq+0x1b0>
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   1a73c:	aa05      	add	r2, sp, #20
   1a73e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1a742:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a746:	4618      	mov	r0, r3
   1a748:	f7ff fe1e 	bl	1a388 <attsFindInRange>
   1a74c:	4603      	mov	r3, r0
   1a74e:	f8ad 301e 	strh.w	r3, [sp, #30]
   1a752:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a756:	2b00      	cmp	r3, #0
   1a758:	d189      	bne.n	1a66e <attsProcFindInfoReq+0xb6>
   1a75a:	e006      	b.n	1a76a <attsProcFindInfoReq+0x1b2>
          break;
   1a75c:	bf00      	nop
   1a75e:	e004      	b.n	1a76a <attsProcFindInfoReq+0x1b2>
            break;
   1a760:	bf00      	nop
   1a762:	e002      	b.n	1a76a <attsProcFindInfoReq+0x1b2>
          break;
   1a764:	bf00      	nop
   1a766:	e000      	b.n	1a76a <attsProcFindInfoReq+0x1b2>
        {
          break;
   1a768:	bf00      	nop
        }
      }

      /* if no results found set error, free buffer */
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   1a76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a76c:	330a      	adds	r3, #10
   1a76e:	9a08      	ldr	r2, [sp, #32]
   1a770:	429a      	cmp	r2, r3
   1a772:	d109      	bne.n	1a788 <attsProcFindInfoReq+0x1d0>
      {
        WsfMsgFree(pBuf);
   1a774:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a776:	f005 f8d5 	bl	1f924 <WsfMsgFree>
        err = ATT_ERR_NOT_FOUND;
   1a77a:	230a      	movs	r3, #10
   1a77c:	f88d 301d 	strb.w	r3, [sp, #29]
   1a780:	e002      	b.n	1a788 <attsProcFindInfoReq+0x1d0>
      }
    }
    else
    {
      /* buffer allocation failed */
      err = ATT_ERR_RESOURCES;
   1a782:	2311      	movs	r3, #17
   1a784:	f88d 301d 	strb.w	r3, [sp, #29]
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   1a788:	9803      	ldr	r0, [sp, #12]
   1a78a:	f7ff fa65 	bl	19c58 <attsDiscBusy>

  /* if no error send response, else send error */
  if (!err)
   1a78e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1a792:	2b00      	cmp	r3, #0
   1a794:	d10b      	bne.n	1a7ae <attsProcFindInfoReq+0x1f6>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1a796:	9b03      	ldr	r3, [sp, #12]
   1a798:	8b19      	ldrh	r1, [r3, #24]
   1a79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a79c:	3308      	adds	r3, #8
   1a79e:	9a08      	ldr	r2, [sp, #32]
   1a7a0:	1ad3      	subs	r3, r2, r3
   1a7a2:	b29a      	uxth	r2, r3
   1a7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a7a6:	2004      	movs	r0, #4
   1a7a8:	f002 fcce 	bl	1d148 <L2cDataReq>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
  }
}
   1a7ac:	e008      	b.n	1a7c0 <attsProcFindInfoReq+0x208>
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
   1a7ae:	9b03      	ldr	r3, [sp, #12]
   1a7b0:	8b18      	ldrh	r0, [r3, #24]
   1a7b2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1a7b6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1a7ba:	2104      	movs	r1, #4
   1a7bc:	f7ff f9f0 	bl	19ba0 <attsErrRsp>
}
   1a7c0:	bf00      	nop
   1a7c2:	b00b      	add	sp, #44	; 0x2c
   1a7c4:	f85d fb04 	ldr.w	pc, [sp], #4

0001a7c8 <attsProcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1a7c8:	b510      	push	{r4, lr}
   1a7ca:	b08c      	sub	sp, #48	; 0x30
   1a7cc:	9005      	str	r0, [sp, #20]
   1a7ce:	460b      	mov	r3, r1
   1a7d0:	9203      	str	r2, [sp, #12]
   1a7d2:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint8_t     *p;
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint16_t    handle;
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;
   1a7d6:	2300      	movs	r3, #0
   1a7d8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f

  /* parse handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1a7dc:	9b03      	ldr	r3, [sp, #12]
   1a7de:	3309      	adds	r3, #9
   1a7e0:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   1a7e2:	9b03      	ldr	r3, [sp, #12]
   1a7e4:	781b      	ldrb	r3, [r3, #0]
   1a7e6:	b29a      	uxth	r2, r3
   1a7e8:	9b03      	ldr	r3, [sp, #12]
   1a7ea:	3301      	adds	r3, #1
   1a7ec:	781b      	ldrb	r3, [r3, #0]
   1a7ee:	b29b      	uxth	r3, r3
   1a7f0:	021b      	lsls	r3, r3, #8
   1a7f2:	b29b      	uxth	r3, r3
   1a7f4:	4413      	add	r3, r2
   1a7f6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   1a7fa:	9b03      	ldr	r3, [sp, #12]
   1a7fc:	3302      	adds	r3, #2
   1a7fe:	9303      	str	r3, [sp, #12]

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   1a800:	aa06      	add	r2, sp, #24
   1a802:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1a806:	4611      	mov	r1, r2
   1a808:	4618      	mov	r0, r3
   1a80a:	f7ff fd8f 	bl	1a32c <attsFindByHandle>
   1a80e:	900a      	str	r0, [sp, #40]	; 0x28
   1a810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a812:	2b00      	cmp	r3, #0
   1a814:	d074      	beq.n	1a900 <attsProcReadReq+0x138>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1a816:	9b05      	ldr	r3, [sp, #20]
   1a818:	7f18      	ldrb	r0, [r3, #28]
   1a81a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a81c:	7bdb      	ldrb	r3, [r3, #15]
   1a81e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1a822:	2101      	movs	r1, #1
   1a824:	f7ff fdf2 	bl	1a40c <attsPermissions>
   1a828:	4603      	mov	r3, r0
   1a82a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   1a82e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1a832:	2b00      	cmp	r3, #0
   1a834:	d167      	bne.n	1a906 <attsProcReadReq+0x13e>
                               handle, pAttr->permissions)) == ATT_SUCCESS)
    {
      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1a836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a838:	7b9b      	ldrb	r3, [r3, #14]
   1a83a:	f003 0304 	and.w	r3, r3, #4
   1a83e:	2b00      	cmp	r3, #0
   1a840:	d012      	beq.n	1a868 <attsProcReadReq+0xa0>
          (pGroup->readCback != NULL))
   1a842:	9b06      	ldr	r3, [sp, #24]
   1a844:	689b      	ldr	r3, [r3, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1a846:	2b00      	cmp	r3, #0
   1a848:	d00e      	beq.n	1a868 <attsProcReadReq+0xa0>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_REQ, 0, pAttr);
   1a84a:	9b06      	ldr	r3, [sp, #24]
   1a84c:	689c      	ldr	r4, [r3, #8]
   1a84e:	9b05      	ldr	r3, [sp, #20]
   1a850:	7f18      	ldrb	r0, [r3, #28]
   1a852:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1a856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a858:	9300      	str	r3, [sp, #0]
   1a85a:	2300      	movs	r3, #0
   1a85c:	220a      	movs	r2, #10
   1a85e:	47a0      	blx	r4
   1a860:	4603      	mov	r3, r0
   1a862:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   1a866:	e016      	b.n	1a896 <attsProcReadReq+0xce>
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1a868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a86a:	7b9b      	ldrb	r3, [r3, #14]
   1a86c:	f003 0320 	and.w	r3, r3, #32
   1a870:	2b00      	cmp	r3, #0
   1a872:	d010      	beq.n	1a896 <attsProcReadReq+0xce>
   1a874:	4b2c      	ldr	r3, [pc, #176]	; (1a928 <attsProcReadReq+0x160>)
   1a876:	695b      	ldr	r3, [r3, #20]
   1a878:	2b00      	cmp	r3, #0
   1a87a:	d00c      	beq.n	1a896 <attsProcReadReq+0xce>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   1a87c:	4b2a      	ldr	r3, [pc, #168]	; (1a928 <attsProcReadReq+0x160>)
   1a87e:	695c      	ldr	r4, [r3, #20]
   1a880:	9b05      	ldr	r3, [sp, #20]
   1a882:	7f18      	ldrb	r0, [r3, #28]
   1a884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a886:	685b      	ldr	r3, [r3, #4]
   1a888:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1a88c:	2105      	movs	r1, #5
   1a88e:	47a0      	blx	r4
   1a890:	4603      	mov	r3, r0
   1a892:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      }

      if (err == ATT_SUCCESS)
   1a896:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1a89a:	2b00      	cmp	r3, #0
   1a89c:	d133      	bne.n	1a906 <attsProcReadReq+0x13e>
      {
        /* determine length of data to read */
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   1a89e:	9b05      	ldr	r3, [sp, #20]
   1a8a0:	8b5b      	ldrh	r3, [r3, #26]
   1a8a2:	3b01      	subs	r3, #1
   1a8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a8a6:	6892      	ldr	r2, [r2, #8]
   1a8a8:	8812      	ldrh	r2, [r2, #0]
                   *pAttr->pLen : (pCcb->mtu - ATT_READ_RSP_LEN);
   1a8aa:	4293      	cmp	r3, r2
   1a8ac:	bfa8      	it	ge
   1a8ae:	4613      	movge	r3, r2
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   1a8b0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

        /* Allocate response buffer */
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_RSP_LEN + readLen)) != NULL)
   1a8b4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1a8b8:	3309      	adds	r3, #9
   1a8ba:	b29b      	uxth	r3, r3
   1a8bc:	4618      	mov	r0, r3
   1a8be:	f001 fc69 	bl	1c194 <attMsgAlloc>
   1a8c2:	9008      	str	r0, [sp, #32]
   1a8c4:	9b08      	ldr	r3, [sp, #32]
   1a8c6:	2b00      	cmp	r3, #0
   1a8c8:	d01d      	beq.n	1a906 <attsProcReadReq+0x13e>
        {
          /* build and send PDU */
          p = pBuf + L2C_PAYLOAD_START;
   1a8ca:	9b08      	ldr	r3, [sp, #32]
   1a8cc:	3308      	adds	r3, #8
   1a8ce:	9307      	str	r3, [sp, #28]
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_RSP);
   1a8d0:	9b07      	ldr	r3, [sp, #28]
   1a8d2:	1c5a      	adds	r2, r3, #1
   1a8d4:	9207      	str	r2, [sp, #28]
   1a8d6:	220b      	movs	r2, #11
   1a8d8:	701a      	strb	r2, [r3, #0]
          memcpy(p, pAttr->pValue, readLen);
   1a8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a8dc:	685b      	ldr	r3, [r3, #4]
   1a8de:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   1a8e2:	4619      	mov	r1, r3
   1a8e4:	9807      	ldr	r0, [sp, #28]
   1a8e6:	f7f1 fc0b 	bl	c100 <memcpy>

          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
   1a8ea:	9b05      	ldr	r3, [sp, #20]
   1a8ec:	8b19      	ldrh	r1, [r3, #24]
   1a8ee:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1a8f2:	3301      	adds	r3, #1
   1a8f4:	b29a      	uxth	r2, r3
   1a8f6:	9b08      	ldr	r3, [sp, #32]
   1a8f8:	2004      	movs	r0, #4
   1a8fa:	f002 fc25 	bl	1d148 <L2cDataReq>
   1a8fe:	e002      	b.n	1a906 <attsProcReadReq+0x13e>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
   1a900:	2301      	movs	r3, #1
   1a902:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  }

  if (err)
   1a906:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1a90a:	2b00      	cmp	r3, #0
   1a90c:	d008      	beq.n	1a920 <attsProcReadReq+0x158>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
   1a90e:	9b05      	ldr	r3, [sp, #20]
   1a910:	8b18      	ldrh	r0, [r3, #24]
   1a912:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1a916:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1a91a:	210a      	movs	r1, #10
   1a91c:	f7ff f940 	bl	19ba0 <attsErrRsp>
  }
}
   1a920:	bf00      	nop
   1a922:	b00c      	add	sp, #48	; 0x30
   1a924:	bd10      	pop	{r4, pc}
   1a926:	bf00      	nop
   1a928:	1000506c 	.word	0x1000506c

0001a92c <attsFindUuidInRange>:
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindUuidInRange(uint16_t startHandle, uint16_t endHandle, uint8_t uuidLen,
                             uint8_t *pUuid, attsAttr_t **pAttr, attsGroup_t **pAttrGroup)
{
   1a92c:	b500      	push	{lr}
   1a92e:	b087      	sub	sp, #28
   1a930:	9301      	str	r3, [sp, #4]
   1a932:	4603      	mov	r3, r0
   1a934:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a938:	460b      	mov	r3, r1
   1a93a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1a93e:	4613      	mov	r3, r2
   1a940:	f88d 300b 	strb.w	r3, [sp, #11]
  attsGroup_t *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1a944:	4b33      	ldr	r3, [pc, #204]	; (1aa14 <attsFindUuidInRange+0xe8>)
   1a946:	681b      	ldr	r3, [r3, #0]
   1a948:	9305      	str	r3, [sp, #20]
   1a94a:	e05a      	b.n	1aa02 <attsFindUuidInRange+0xd6>
  {
    /* if start handle is less than group start handle but handle range is within group */
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   1a94c:	9b05      	ldr	r3, [sp, #20]
   1a94e:	8a1b      	ldrh	r3, [r3, #16]
   1a950:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1a954:	429a      	cmp	r2, r3
   1a956:	d209      	bcs.n	1a96c <attsFindUuidInRange+0x40>
   1a958:	9b05      	ldr	r3, [sp, #20]
   1a95a:	8a1b      	ldrh	r3, [r3, #16]
   1a95c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1a960:	429a      	cmp	r2, r3
   1a962:	d303      	bcc.n	1a96c <attsFindUuidInRange+0x40>
    {
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
   1a964:	9b05      	ldr	r3, [sp, #20]
   1a966:	8a1b      	ldrh	r3, [r3, #16]
   1a968:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    /*  if start handle within handle range of group */
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   1a96c:	9b05      	ldr	r3, [sp, #20]
   1a96e:	8a1b      	ldrh	r3, [r3, #16]
   1a970:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1a974:	429a      	cmp	r2, r3
   1a976:	d341      	bcc.n	1a9fc <attsFindUuidInRange+0xd0>
   1a978:	9b05      	ldr	r3, [sp, #20]
   1a97a:	8a5b      	ldrh	r3, [r3, #18]
   1a97c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1a980:	429a      	cmp	r2, r3
   1a982:	d83b      	bhi.n	1a9fc <attsFindUuidInRange+0xd0>
    {
      /* compare uuid with each attribute in group */
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1a984:	9b05      	ldr	r3, [sp, #20]
   1a986:	685a      	ldr	r2, [r3, #4]
   1a988:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1a98c:	9905      	ldr	r1, [sp, #20]
   1a98e:	8a09      	ldrh	r1, [r1, #16]
   1a990:	1a5b      	subs	r3, r3, r1
   1a992:	011b      	lsls	r3, r3, #4
   1a994:	441a      	add	r2, r3
   1a996:	9b08      	ldr	r3, [sp, #32]
   1a998:	601a      	str	r2, [r3, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   1a99a:	e021      	b.n	1a9e0 <attsFindUuidInRange+0xb4>
      {
        /* compare uuid in attribute */
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   1a99c:	9b08      	ldr	r3, [sp, #32]
   1a99e:	681b      	ldr	r3, [r3, #0]
   1a9a0:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1a9a4:	9a01      	ldr	r2, [sp, #4]
   1a9a6:	4618      	mov	r0, r3
   1a9a8:	f7ff fc52 	bl	1a250 <attsUuidCmp>
   1a9ac:	4603      	mov	r3, r0
   1a9ae:	2b00      	cmp	r3, #0
   1a9b0:	d005      	beq.n	1a9be <attsFindUuidInRange+0x92>
        {
          *pAttrGroup = pGroup;
   1a9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a9b4:	9a05      	ldr	r2, [sp, #20]
   1a9b6:	601a      	str	r2, [r3, #0]
          return startHandle;
   1a9b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1a9bc:	e025      	b.n	1aa0a <attsFindUuidInRange+0xde>
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
   1a9be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1a9c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a9c6:	4293      	cmp	r3, r2
   1a9c8:	d017      	beq.n	1a9fa <attsFindUuidInRange+0xce>
        {
          break;
        }

        startHandle++;
   1a9ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1a9ce:	3301      	adds	r3, #1
   1a9d0:	f8ad 300e 	strh.w	r3, [sp, #14]
        (*pAttr)++;
   1a9d4:	9b08      	ldr	r3, [sp, #32]
   1a9d6:	681b      	ldr	r3, [r3, #0]
   1a9d8:	f103 0210 	add.w	r2, r3, #16
   1a9dc:	9b08      	ldr	r3, [sp, #32]
   1a9de:	601a      	str	r2, [r3, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   1a9e0:	9b05      	ldr	r3, [sp, #20]
   1a9e2:	8a5b      	ldrh	r3, [r3, #18]
   1a9e4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1a9e8:	429a      	cmp	r2, r3
   1a9ea:	d807      	bhi.n	1a9fc <attsFindUuidInRange+0xd0>
   1a9ec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1a9f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1a9f4:	429a      	cmp	r2, r3
   1a9f6:	d9d1      	bls.n	1a99c <attsFindUuidInRange+0x70>
   1a9f8:	e000      	b.n	1a9fc <attsFindUuidInRange+0xd0>
          break;
   1a9fa:	bf00      	nop
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1a9fc:	9b05      	ldr	r3, [sp, #20]
   1a9fe:	681b      	ldr	r3, [r3, #0]
   1aa00:	9305      	str	r3, [sp, #20]
   1aa02:	9b05      	ldr	r3, [sp, #20]
   1aa04:	2b00      	cmp	r3, #0
   1aa06:	d1a1      	bne.n	1a94c <attsFindUuidInRange+0x20>
      }
    }
  }

  /* no match found */
  return ATT_HANDLE_NONE;
   1aa08:	2300      	movs	r3, #0
}
   1aa0a:	4618      	mov	r0, r3
   1aa0c:	b007      	add	sp, #28
   1aa0e:	f85d fb04 	ldr.w	pc, [sp], #4
   1aa12:	bf00      	nop
   1aa14:	1000506c 	.word	0x1000506c

0001aa18 <attsFindServiceGroupEnd>:
 *
 *  \return Service group end handle.
 */
/*************************************************************************************************/
uint16_t attsFindServiceGroupEnd(uint16_t startHandle)
{
   1aa18:	b500      	push	{lr}
   1aa1a:	b087      	sub	sp, #28
   1aa1c:	4603      	mov	r3, r0
   1aa1e:	f8ad 3006 	strh.w	r3, [sp, #6]
  attsGroup_t   *pGroup;
  attsAttr_t    *pAttr;
  uint16_t      prevHandle;
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   1aa22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1aa26:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
   1aa2a:	f642 0301 	movw	r3, #10241	; 0x2801
   1aa2e:	f8ad 3008 	strh.w	r3, [sp, #8]

  /* special case for max handle */
  if (startHandle == ATT_HANDLE_MAX)
   1aa32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1aa36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aa3a:	4293      	cmp	r3, r2
   1aa3c:	d102      	bne.n	1aa44 <attsFindServiceGroupEnd+0x2c>
  {
    return ATT_HANDLE_MAX;
   1aa3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1aa42:	e05f      	b.n	1ab04 <attsFindServiceGroupEnd+0xec>
  }

  prevHandle = startHandle;
   1aa44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1aa48:	f8ad 300e 	strh.w	r3, [sp, #14]
  startHandle++;
   1aa4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1aa50:	3301      	adds	r3, #1
   1aa52:	f8ad 3006 	strh.w	r3, [sp, #6]

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1aa56:	4b2d      	ldr	r3, [pc, #180]	; (1ab0c <attsFindServiceGroupEnd+0xf4>)
   1aa58:	681b      	ldr	r3, [r3, #0]
   1aa5a:	9305      	str	r3, [sp, #20]
   1aa5c:	e04d      	b.n	1aafa <attsFindServiceGroupEnd+0xe2>
  {
    /* if start handle is less than group start handle */
    if (startHandle < pGroup->startHandle)
   1aa5e:	9b05      	ldr	r3, [sp, #20]
   1aa60:	8a1b      	ldrh	r3, [r3, #16]
   1aa62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1aa66:	429a      	cmp	r2, r3
   1aa68:	d203      	bcs.n	1aa72 <attsFindServiceGroupEnd+0x5a>
    {
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
   1aa6a:	9b05      	ldr	r3, [sp, #20]
   1aa6c:	8a1b      	ldrh	r3, [r3, #16]
   1aa6e:	f8ad 3006 	strh.w	r3, [sp, #6]
    }

    /*  if start handle within handle range of group */
    if (startHandle <= pGroup->endHandle)
   1aa72:	9b05      	ldr	r3, [sp, #20]
   1aa74:	8a5b      	ldrh	r3, [r3, #18]
   1aa76:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1aa7a:	429a      	cmp	r2, r3
   1aa7c:	d83a      	bhi.n	1aaf4 <attsFindServiceGroupEnd+0xdc>
    {
      /* compare uuid with each attribute in group */
      pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1aa7e:	9b05      	ldr	r3, [sp, #20]
   1aa80:	685a      	ldr	r2, [r3, #4]
   1aa82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1aa86:	9905      	ldr	r1, [sp, #20]
   1aa88:	8a09      	ldrh	r1, [r1, #16]
   1aa8a:	1a5b      	subs	r3, r3, r1
   1aa8c:	011b      	lsls	r3, r3, #4
   1aa8e:	4413      	add	r3, r2
   1aa90:	9304      	str	r3, [sp, #16]
      while (startHandle <= pGroup->endHandle)
   1aa92:	e029      	b.n	1aae8 <attsFindServiceGroupEnd+0xd0>
      {
        /* compare uuid in attribute to service uuids */
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   1aa94:	ab03      	add	r3, sp, #12
   1aa96:	461a      	mov	r2, r3
   1aa98:	2102      	movs	r1, #2
   1aa9a:	9804      	ldr	r0, [sp, #16]
   1aa9c:	f7ff fbd8 	bl	1a250 <attsUuidCmp>
   1aaa0:	4603      	mov	r3, r0
   1aaa2:	2b00      	cmp	r3, #0
   1aaa4:	d108      	bne.n	1aab8 <attsFindServiceGroupEnd+0xa0>
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
   1aaa6:	ab02      	add	r3, sp, #8
   1aaa8:	461a      	mov	r2, r3
   1aaaa:	2102      	movs	r1, #2
   1aaac:	9804      	ldr	r0, [sp, #16]
   1aaae:	f7ff fbcf 	bl	1a250 <attsUuidCmp>
   1aab2:	4603      	mov	r3, r0
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   1aab4:	2b00      	cmp	r3, #0
   1aab6:	d002      	beq.n	1aabe <attsFindServiceGroupEnd+0xa6>
        {
          /* found next service; return handle of previous attribute */
          return prevHandle;
   1aab8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1aabc:	e022      	b.n	1ab04 <attsFindServiceGroupEnd+0xec>
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
   1aabe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1aac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aac6:	4293      	cmp	r3, r2
   1aac8:	d102      	bne.n	1aad0 <attsFindServiceGroupEnd+0xb8>
        {
          return ATT_HANDLE_MAX;
   1aaca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1aace:	e019      	b.n	1ab04 <attsFindServiceGroupEnd+0xec>
        }

        prevHandle = startHandle;
   1aad0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1aad4:	f8ad 300e 	strh.w	r3, [sp, #14]
        startHandle++;
   1aad8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1aadc:	3301      	adds	r3, #1
   1aade:	f8ad 3006 	strh.w	r3, [sp, #6]
        pAttr++;
   1aae2:	9b04      	ldr	r3, [sp, #16]
   1aae4:	3310      	adds	r3, #16
   1aae6:	9304      	str	r3, [sp, #16]
      while (startHandle <= pGroup->endHandle)
   1aae8:	9b05      	ldr	r3, [sp, #20]
   1aaea:	8a5b      	ldrh	r3, [r3, #18]
   1aaec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1aaf0:	429a      	cmp	r2, r3
   1aaf2:	d9cf      	bls.n	1aa94 <attsFindServiceGroupEnd+0x7c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1aaf4:	9b05      	ldr	r3, [sp, #20]
   1aaf6:	681b      	ldr	r3, [r3, #0]
   1aaf8:	9305      	str	r3, [sp, #20]
   1aafa:	9b05      	ldr	r3, [sp, #20]
   1aafc:	2b00      	cmp	r3, #0
   1aafe:	d1ae      	bne.n	1aa5e <attsFindServiceGroupEnd+0x46>
      }
    }
  }

  /* next service not found; return 0xFFFF as the last handle in the database */
  return ATT_HANDLE_MAX;
   1ab00:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   1ab04:	4618      	mov	r0, r3
   1ab06:	b007      	add	sp, #28
   1ab08:	f85d fb04 	ldr.w	pc, [sp], #4
   1ab0c:	1000506c 	.word	0x1000506c

0001ab10 <attsProcReadBlobReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadBlobReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1ab10:	b510      	push	{r4, lr}
   1ab12:	b08e      	sub	sp, #56	; 0x38
   1ab14:	9005      	str	r0, [sp, #20]
   1ab16:	460b      	mov	r3, r1
   1ab18:	9203      	str	r2, [sp, #12]
   1ab1a:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint16_t    handle;
  uint16_t    offset;
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;
   1ab1e:	2300      	movs	r3, #0
   1ab20:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

  /* parse handle and offset */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1ab24:	9b03      	ldr	r3, [sp, #12]
   1ab26:	3309      	adds	r3, #9
   1ab28:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   1ab2a:	9b03      	ldr	r3, [sp, #12]
   1ab2c:	781b      	ldrb	r3, [r3, #0]
   1ab2e:	b29a      	uxth	r2, r3
   1ab30:	9b03      	ldr	r3, [sp, #12]
   1ab32:	3301      	adds	r3, #1
   1ab34:	781b      	ldrb	r3, [r3, #0]
   1ab36:	b29b      	uxth	r3, r3
   1ab38:	021b      	lsls	r3, r3, #8
   1ab3a:	b29b      	uxth	r3, r3
   1ab3c:	4413      	add	r3, r2
   1ab3e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   1ab42:	9b03      	ldr	r3, [sp, #12]
   1ab44:	3302      	adds	r3, #2
   1ab46:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(offset, pPacket);
   1ab48:	9b03      	ldr	r3, [sp, #12]
   1ab4a:	781b      	ldrb	r3, [r3, #0]
   1ab4c:	b29a      	uxth	r2, r3
   1ab4e:	9b03      	ldr	r3, [sp, #12]
   1ab50:	3301      	adds	r3, #1
   1ab52:	781b      	ldrb	r3, [r3, #0]
   1ab54:	b29b      	uxth	r3, r3
   1ab56:	021b      	lsls	r3, r3, #8
   1ab58:	b29b      	uxth	r3, r3
   1ab5a:	4413      	add	r3, r2
   1ab5c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
   1ab60:	9b03      	ldr	r3, [sp, #12]
   1ab62:	3302      	adds	r3, #2
   1ab64:	9303      	str	r3, [sp, #12]

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   1ab66:	aa07      	add	r2, sp, #28
   1ab68:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1ab6c:	4611      	mov	r1, r2
   1ab6e:	4618      	mov	r0, r3
   1ab70:	f7ff fbdc 	bl	1a32c <attsFindByHandle>
   1ab74:	900b      	str	r0, [sp, #44]	; 0x2c
   1ab76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ab78:	2b00      	cmp	r3, #0
   1ab7a:	f000 8089 	beq.w	1ac90 <attsProcReadBlobReq+0x180>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1ab7e:	9b05      	ldr	r3, [sp, #20]
   1ab80:	7f18      	ldrb	r0, [r3, #28]
   1ab82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ab84:	7bdb      	ldrb	r3, [r3, #15]
   1ab86:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1ab8a:	2101      	movs	r1, #1
   1ab8c:	f7ff fc3e 	bl	1a40c <attsPermissions>
   1ab90:	4603      	mov	r3, r0
   1ab92:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1ab96:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1ab9a:	2b00      	cmp	r3, #0
   1ab9c:	d17b      	bne.n	1ac96 <attsProcReadBlobReq+0x186>
                               handle, pAttr->permissions)) != ATT_SUCCESS)
    {
      /* err has been set; fail */
    }
    /* verify offset */
    else if (offset > *pAttr->pLen)
   1ab9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aba0:	689b      	ldr	r3, [r3, #8]
   1aba2:	881b      	ldrh	r3, [r3, #0]
   1aba4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1aba8:	429a      	cmp	r2, r3
   1abaa:	d903      	bls.n	1abb4 <attsProcReadBlobReq+0xa4>
    {
      err = ATT_ERR_OFFSET;
   1abac:	2307      	movs	r3, #7
   1abae:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1abb2:	e070      	b.n	1ac96 <attsProcReadBlobReq+0x186>
    }
    else
    {
      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1abb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1abb6:	7b9b      	ldrb	r3, [r3, #14]
   1abb8:	f003 0304 	and.w	r3, r3, #4
   1abbc:	2b00      	cmp	r3, #0
   1abbe:	d014      	beq.n	1abea <attsProcReadBlobReq+0xda>
          (pGroup->readCback != NULL))
   1abc0:	9b07      	ldr	r3, [sp, #28]
   1abc2:	689b      	ldr	r3, [r3, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1abc4:	2b00      	cmp	r3, #0
   1abc6:	d010      	beq.n	1abea <attsProcReadBlobReq+0xda>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_BLOB_REQ, offset, pAttr);
   1abc8:	9b07      	ldr	r3, [sp, #28]
   1abca:	689c      	ldr	r4, [r3, #8]
   1abcc:	9b05      	ldr	r3, [sp, #20]
   1abce:	7f18      	ldrb	r0, [r3, #28]
   1abd0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1abd4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   1abd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1abda:	9300      	str	r3, [sp, #0]
   1abdc:	4613      	mov	r3, r2
   1abde:	220c      	movs	r2, #12
   1abe0:	47a0      	blx	r4
   1abe2:	4603      	mov	r3, r0
   1abe4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1abe8:	e016      	b.n	1ac18 <attsProcReadBlobReq+0x108>
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1abea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1abec:	7b9b      	ldrb	r3, [r3, #14]
   1abee:	f003 0320 	and.w	r3, r3, #32
   1abf2:	2b00      	cmp	r3, #0
   1abf4:	d010      	beq.n	1ac18 <attsProcReadBlobReq+0x108>
   1abf6:	4b30      	ldr	r3, [pc, #192]	; (1acb8 <attsProcReadBlobReq+0x1a8>)
   1abf8:	695b      	ldr	r3, [r3, #20]
   1abfa:	2b00      	cmp	r3, #0
   1abfc:	d00c      	beq.n	1ac18 <attsProcReadBlobReq+0x108>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   1abfe:	4b2e      	ldr	r3, [pc, #184]	; (1acb8 <attsProcReadBlobReq+0x1a8>)
   1ac00:	695c      	ldr	r4, [r3, #20]
   1ac02:	9b05      	ldr	r3, [sp, #20]
   1ac04:	7f18      	ldrb	r0, [r3, #28]
   1ac06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac08:	685b      	ldr	r3, [r3, #4]
   1ac0a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1ac0e:	2105      	movs	r1, #5
   1ac10:	47a0      	blx	r4
   1ac12:	4603      	mov	r3, r0
   1ac14:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      }

      if (err == ATT_SUCCESS)
   1ac18:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1ac1c:	2b00      	cmp	r3, #0
   1ac1e:	d13a      	bne.n	1ac96 <attsProcReadBlobReq+0x186>
      {
        /* determine length of data to read */
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   1ac20:	9b05      	ldr	r3, [sp, #20]
   1ac22:	8b5b      	ldrh	r3, [r3, #26]
   1ac24:	1e5a      	subs	r2, r3, #1
   1ac26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac28:	689b      	ldr	r3, [r3, #8]
   1ac2a:	881b      	ldrh	r3, [r3, #0]
   1ac2c:	4619      	mov	r1, r3
   1ac2e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   1ac32:	1acb      	subs	r3, r1, r3
                   (*pAttr->pLen - offset) : (pCcb->mtu - ATT_READ_BLOB_RSP_LEN);
   1ac34:	4293      	cmp	r3, r2
   1ac36:	bfa8      	it	ge
   1ac38:	4613      	movge	r3, r2
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   1ac3a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a

        /* Allocate response buffer */
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_BLOB_RSP_LEN + readLen)) != NULL)
   1ac3e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1ac42:	3309      	adds	r3, #9
   1ac44:	b29b      	uxth	r3, r3
   1ac46:	4618      	mov	r0, r3
   1ac48:	f001 faa4 	bl	1c194 <attMsgAlloc>
   1ac4c:	9009      	str	r0, [sp, #36]	; 0x24
   1ac4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ac50:	2b00      	cmp	r3, #0
   1ac52:	d020      	beq.n	1ac96 <attsProcReadBlobReq+0x186>
        {
          /* build and send PDU */
          p = pBuf + L2C_PAYLOAD_START;
   1ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ac56:	3308      	adds	r3, #8
   1ac58:	9308      	str	r3, [sp, #32]
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_BLOB_RSP);
   1ac5a:	9b08      	ldr	r3, [sp, #32]
   1ac5c:	1c5a      	adds	r2, r3, #1
   1ac5e:	9208      	str	r2, [sp, #32]
   1ac60:	220d      	movs	r2, #13
   1ac62:	701a      	strb	r2, [r3, #0]
          memcpy(p, (pAttr->pValue + offset), readLen);
   1ac64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ac66:	685a      	ldr	r2, [r3, #4]
   1ac68:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   1ac6c:	4413      	add	r3, r2
   1ac6e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   1ac72:	4619      	mov	r1, r3
   1ac74:	9808      	ldr	r0, [sp, #32]
   1ac76:	f7f1 fa43 	bl	c100 <memcpy>

          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_BLOB_RSP_LEN + readLen), pBuf);
   1ac7a:	9b05      	ldr	r3, [sp, #20]
   1ac7c:	8b19      	ldrh	r1, [r3, #24]
   1ac7e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1ac82:	3301      	adds	r3, #1
   1ac84:	b29a      	uxth	r2, r3
   1ac86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ac88:	2004      	movs	r0, #4
   1ac8a:	f002 fa5d 	bl	1d148 <L2cDataReq>
   1ac8e:	e002      	b.n	1ac96 <attsProcReadBlobReq+0x186>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
   1ac90:	2301      	movs	r3, #1
   1ac92:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  }

  if (err)
   1ac96:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1ac9a:	2b00      	cmp	r3, #0
   1ac9c:	d008      	beq.n	1acb0 <attsProcReadBlobReq+0x1a0>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_BLOB_REQ, handle, err);
   1ac9e:	9b05      	ldr	r3, [sp, #20]
   1aca0:	8b18      	ldrh	r0, [r3, #24]
   1aca2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1aca6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1acaa:	210c      	movs	r1, #12
   1acac:	f7fe ff78 	bl	19ba0 <attsErrRsp>
  }
}
   1acb0:	bf00      	nop
   1acb2:	b00e      	add	sp, #56	; 0x38
   1acb4:	bd10      	pop	{r4, pc}
   1acb6:	bf00      	nop
   1acb8:	1000506c 	.word	0x1000506c

0001acbc <attsProcFindTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1acbc:	b500      	push	{lr}
   1acbe:	b08f      	sub	sp, #60	; 0x3c
   1acc0:	9005      	str	r0, [sp, #20]
   1acc2:	460b      	mov	r3, r1
   1acc4:	9203      	str	r2, [sp, #12]
   1acc6:	f8ad 3012 	strh.w	r3, [sp, #18]
  attsGroup_t *pGroup;
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint16_t    nextHandle;
  uint8_t     err = ATT_SUCCESS;
   1acca:	2300      	movs	r3, #0
   1accc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

  /* parse handles and uuid; pPacket then points to the value in the request */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1acd0:	9b03      	ldr	r3, [sp, #12]
   1acd2:	3309      	adds	r3, #9
   1acd4:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   1acd6:	9b03      	ldr	r3, [sp, #12]
   1acd8:	781b      	ldrb	r3, [r3, #0]
   1acda:	b29a      	uxth	r2, r3
   1acdc:	9b03      	ldr	r3, [sp, #12]
   1acde:	3301      	adds	r3, #1
   1ace0:	781b      	ldrb	r3, [r3, #0]
   1ace2:	b29b      	uxth	r3, r3
   1ace4:	021b      	lsls	r3, r3, #8
   1ace6:	b29b      	uxth	r3, r3
   1ace8:	4413      	add	r3, r2
   1acea:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   1acee:	9b03      	ldr	r3, [sp, #12]
   1acf0:	3302      	adds	r3, #2
   1acf2:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   1acf4:	9b03      	ldr	r3, [sp, #12]
   1acf6:	781b      	ldrb	r3, [r3, #0]
   1acf8:	b29a      	uxth	r2, r3
   1acfa:	9b03      	ldr	r3, [sp, #12]
   1acfc:	3301      	adds	r3, #1
   1acfe:	781b      	ldrb	r3, [r3, #0]
   1ad00:	b29b      	uxth	r3, r3
   1ad02:	021b      	lsls	r3, r3, #8
   1ad04:	b29b      	uxth	r3, r3
   1ad06:	4413      	add	r3, r2
   1ad08:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1ad0c:	9b03      	ldr	r3, [sp, #12]
   1ad0e:	3302      	adds	r3, #2
   1ad10:	9303      	str	r3, [sp, #12]
  pUuid = pPacket;
   1ad12:	9b03      	ldr	r3, [sp, #12]
   1ad14:	9308      	str	r3, [sp, #32]
  pPacket += ATT_16_UUID_LEN;
   1ad16:	9b03      	ldr	r3, [sp, #12]
   1ad18:	3302      	adds	r3, #2
   1ad1a:	9303      	str	r3, [sp, #12]

  /* set len to the value length */
  len -= ATT_FIND_TYPE_REQ_LEN;
   1ad1c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1ad20:	3b07      	subs	r3, #7
   1ad22:	f8ad 3012 	strh.w	r3, [sp, #18]

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   1ad26:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ad2a:	2b00      	cmp	r3, #0
   1ad2c:	d005      	beq.n	1ad3a <attsProcFindTypeReq+0x7e>
   1ad2e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1ad32:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1ad36:	429a      	cmp	r2, r3
   1ad38:	d902      	bls.n	1ad40 <attsProcFindTypeReq+0x84>
  {
    err = ATT_ERR_HANDLE;
   1ad3a:	2301      	movs	r3, #1
   1ad3c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  }

  if (!err)
   1ad40:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1ad44:	2b00      	cmp	r3, #0
   1ad46:	f040 80af 	bne.w	1aea8 <attsProcFindTypeReq+0x1ec>
  {
    /* allocate max size buffer for response */
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1ad4a:	9b05      	ldr	r3, [sp, #20]
   1ad4c:	8b5b      	ldrh	r3, [r3, #26]
   1ad4e:	3308      	adds	r3, #8
   1ad50:	b29b      	uxth	r3, r3
   1ad52:	4618      	mov	r0, r3
   1ad54:	f001 fa1e 	bl	1c194 <attMsgAlloc>
   1ad58:	900d      	str	r0, [sp, #52]	; 0x34
   1ad5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ad5c:	2b00      	cmp	r3, #0
   1ad5e:	f000 80a0 	beq.w	1aea2 <attsProcFindTypeReq+0x1e6>
    {
      p = pBuf + L2C_PAYLOAD_START;
   1ad62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ad64:	3308      	adds	r3, #8
   1ad66:	930c      	str	r3, [sp, #48]	; 0x30
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   1ad68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ad6a:	1c5a      	adds	r2, r3, #1
   1ad6c:	920c      	str	r2, [sp, #48]	; 0x30
   1ad6e:	2207      	movs	r2, #7
   1ad70:	701a      	strb	r2, [r3, #0]

      /* find attributes with matching uuid within handle range */
      handle = startHandle;
   1ad72:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ad76:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   1ad7a:	e070      	b.n	1ae5e <attsProcFindTypeReq+0x1a2>
                                           pUuid, &pAttr, &pGroup)) != ATT_HANDLE_NONE)
      {
        /* if value and length matches */
        if ((pAttr->permissions & ATTS_PERMIT_READ) &&
   1ad7c:	9b07      	ldr	r3, [sp, #28]
   1ad7e:	7bdb      	ldrb	r3, [r3, #15]
   1ad80:	f003 0301 	and.w	r3, r3, #1
   1ad84:	2b00      	cmp	r3, #0
   1ad86:	d055      	beq.n	1ae34 <attsProcFindTypeReq+0x178>
   1ad88:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1ad8c:	2b00      	cmp	r3, #0
   1ad8e:	d011      	beq.n	1adb4 <attsProcFindTypeReq+0xf8>
            ((len == 0) ||
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   1ad90:	9b07      	ldr	r3, [sp, #28]
   1ad92:	689b      	ldr	r3, [r3, #8]
   1ad94:	881b      	ldrh	r3, [r3, #0]
            ((len == 0) ||
   1ad96:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1ad9a:	429a      	cmp	r2, r3
   1ad9c:	d14a      	bne.n	1ae34 <attsProcFindTypeReq+0x178>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   1ad9e:	9b07      	ldr	r3, [sp, #28]
   1ada0:	685b      	ldr	r3, [r3, #4]
   1ada2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1ada6:	4619      	mov	r1, r3
   1ada8:	9803      	ldr	r0, [sp, #12]
   1adaa:	f00a fc55 	bl	25658 <memcmp>
   1adae:	4603      	mov	r3, r0
   1adb0:	2b00      	cmp	r3, #0
   1adb2:	d13f      	bne.n	1ae34 <attsProcFindTypeReq+0x178>
        {
          /* if uuid in request is for primary service */
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   1adb4:	9b08      	ldr	r3, [sp, #32]
   1adb6:	781b      	ldrb	r3, [r3, #0]
   1adb8:	2b00      	cmp	r3, #0
   1adba:	d10d      	bne.n	1add8 <attsProcFindTypeReq+0x11c>
              pUuid[1] == UINT16_TO_BYTE1(ATT_UUID_PRIMARY_SERVICE))
   1adbc:	9b08      	ldr	r3, [sp, #32]
   1adbe:	3301      	adds	r3, #1
   1adc0:	781b      	ldrb	r3, [r3, #0]
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   1adc2:	2b28      	cmp	r3, #40	; 0x28
   1adc4:	d108      	bne.n	1add8 <attsProcFindTypeReq+0x11c>
          {
            /* next handle is service group end handle */
            nextHandle = attsFindServiceGroupEnd(handle);
   1adc6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1adca:	4618      	mov	r0, r3
   1adcc:	f7ff fe24 	bl	1aa18 <attsFindServiceGroupEnd>
   1add0:	4603      	mov	r3, r0
   1add2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   1add6:	e003      	b.n	1ade0 <attsProcFindTypeReq+0x124>
          }
          else
          {
            /* for any other uuid next handle is same as found handle */
            nextHandle = handle;
   1add8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1addc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
          }

          /* copy result into response buffer; first check if it fits */
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1ade0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ade2:	1d1a      	adds	r2, r3, #4
   1ade4:	9b05      	ldr	r3, [sp, #20]
   1ade6:	8b5b      	ldrh	r3, [r3, #26]
   1ade8:	3308      	adds	r3, #8
   1adea:	990d      	ldr	r1, [sp, #52]	; 0x34
   1adec:	440b      	add	r3, r1
   1adee:	429a      	cmp	r2, r3
   1adf0:	d84a      	bhi.n	1ae88 <attsProcFindTypeReq+0x1cc>
          {
            UINT16_TO_BSTREAM(p, handle);
   1adf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1adf4:	1c5a      	adds	r2, r3, #1
   1adf6:	920c      	str	r2, [sp, #48]	; 0x30
   1adf8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   1adfc:	b2d2      	uxtb	r2, r2
   1adfe:	701a      	strb	r2, [r3, #0]
   1ae00:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1ae04:	0a1b      	lsrs	r3, r3, #8
   1ae06:	b299      	uxth	r1, r3
   1ae08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ae0a:	1c5a      	adds	r2, r3, #1
   1ae0c:	920c      	str	r2, [sp, #48]	; 0x30
   1ae0e:	b2ca      	uxtb	r2, r1
   1ae10:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(p, nextHandle);
   1ae12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ae14:	1c5a      	adds	r2, r3, #1
   1ae16:	920c      	str	r2, [sp, #48]	; 0x30
   1ae18:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1ae1c:	b2d2      	uxtb	r2, r2
   1ae1e:	701a      	strb	r2, [r3, #0]
   1ae20:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1ae24:	0a1b      	lsrs	r3, r3, #8
   1ae26:	b299      	uxth	r1, r3
   1ae28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ae2a:	1c5a      	adds	r2, r3, #1
   1ae2c:	920c      	str	r2, [sp, #48]	; 0x30
   1ae2e:	b2ca      	uxtb	r2, r1
   1ae30:	701a      	strb	r2, [r3, #0]
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1ae32:	e003      	b.n	1ae3c <attsProcFindTypeReq+0x180>
          }
        }
        /* value doesn't match; still need to set next handle */
        else
        {
          nextHandle = handle;
   1ae34:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1ae38:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        }

        /* check if handle has reached end */
        if ((nextHandle >= endHandle) || (nextHandle == ATT_HANDLE_MAX))
   1ae3c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1ae40:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1ae44:	429a      	cmp	r2, r3
   1ae46:	d220      	bcs.n	1ae8a <attsProcFindTypeReq+0x1ce>
   1ae48:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1ae4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ae50:	4293      	cmp	r3, r2
   1ae52:	d01a      	beq.n	1ae8a <attsProcFindTypeReq+0x1ce>
        {
          break;
        }

        /* try next handle */
        handle = nextHandle + 1;
   1ae54:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1ae58:	3301      	adds	r3, #1
   1ae5a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   1ae5e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   1ae62:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   1ae66:	ab06      	add	r3, sp, #24
   1ae68:	9301      	str	r3, [sp, #4]
   1ae6a:	ab07      	add	r3, sp, #28
   1ae6c:	9300      	str	r3, [sp, #0]
   1ae6e:	9b08      	ldr	r3, [sp, #32]
   1ae70:	2202      	movs	r2, #2
   1ae72:	f7ff fd5b 	bl	1a92c <attsFindUuidInRange>
   1ae76:	4603      	mov	r3, r0
   1ae78:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ae7c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1ae80:	2b00      	cmp	r3, #0
   1ae82:	f47f af7b 	bne.w	1ad7c <attsProcFindTypeReq+0xc0>
   1ae86:	e000      	b.n	1ae8a <attsProcFindTypeReq+0x1ce>
            break;
   1ae88:	bf00      	nop
      }

      /* if no results found set error, free buffer */
      if (p == (pBuf + L2C_PAYLOAD_START + 1))
   1ae8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ae8c:	3309      	adds	r3, #9
   1ae8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ae90:	429a      	cmp	r2, r3
   1ae92:	d109      	bne.n	1aea8 <attsProcFindTypeReq+0x1ec>
      {
        WsfMsgFree(pBuf);
   1ae94:	980d      	ldr	r0, [sp, #52]	; 0x34
   1ae96:	f004 fd45 	bl	1f924 <WsfMsgFree>
        err = ATT_ERR_NOT_FOUND;
   1ae9a:	230a      	movs	r3, #10
   1ae9c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   1aea0:	e002      	b.n	1aea8 <attsProcFindTypeReq+0x1ec>
      }
    }
    else
    {
      /* buffer allocation failed */
      err = ATT_ERR_RESOURCES;
   1aea2:	2311      	movs	r3, #17
   1aea4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   1aea8:	9805      	ldr	r0, [sp, #20]
   1aeaa:	f7fe fed5 	bl	19c58 <attsDiscBusy>

  /* if no error send response, else send error */
  if (!err)
   1aeae:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1aeb2:	2b00      	cmp	r3, #0
   1aeb4:	d10b      	bne.n	1aece <attsProcFindTypeReq+0x212>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1aeb6:	9b05      	ldr	r3, [sp, #20]
   1aeb8:	8b19      	ldrh	r1, [r3, #24]
   1aeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aebc:	3308      	adds	r3, #8
   1aebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1aec0:	1ad3      	subs	r3, r2, r3
   1aec2:	b29a      	uxth	r2, r3
   1aec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aec6:	2004      	movs	r0, #4
   1aec8:	f002 f93e 	bl	1d148 <L2cDataReq>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
  }
}
   1aecc:	e008      	b.n	1aee0 <attsProcFindTypeReq+0x224>
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
   1aece:	9b05      	ldr	r3, [sp, #20]
   1aed0:	8b18      	ldrh	r0, [r3, #24]
   1aed2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1aed6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1aeda:	2106      	movs	r1, #6
   1aedc:	f7fe fe60 	bl	19ba0 <attsErrRsp>
}
   1aee0:	bf00      	nop
   1aee2:	b00f      	add	sp, #60	; 0x3c
   1aee4:	f85d fb04 	ldr.w	pc, [sp], #4

0001aee8 <attsProcReadTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1aee8:	b510      	push	{r4, lr}
   1aeea:	b08e      	sub	sp, #56	; 0x38
   1aeec:	9005      	str	r0, [sp, #20]
   1aeee:	460b      	mov	r3, r1
   1aef0:	9203      	str	r2, [sp, #12]
   1aef2:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     cbackErr = ATT_SUCCESS;
   1aef6:	2300      	movs	r3, #0
   1aef8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  uint8_t     err = ATT_SUCCESS;
   1aefc:	2300      	movs	r3, #0
   1aefe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1af02:	9b03      	ldr	r3, [sp, #12]
   1af04:	3309      	adds	r3, #9
   1af06:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   1af08:	9b03      	ldr	r3, [sp, #12]
   1af0a:	781b      	ldrb	r3, [r3, #0]
   1af0c:	b29a      	uxth	r2, r3
   1af0e:	9b03      	ldr	r3, [sp, #12]
   1af10:	3301      	adds	r3, #1
   1af12:	781b      	ldrb	r3, [r3, #0]
   1af14:	b29b      	uxth	r3, r3
   1af16:	021b      	lsls	r3, r3, #8
   1af18:	b29b      	uxth	r3, r3
   1af1a:	4413      	add	r3, r2
   1af1c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1af20:	9b03      	ldr	r3, [sp, #12]
   1af22:	3302      	adds	r3, #2
   1af24:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   1af26:	9b03      	ldr	r3, [sp, #12]
   1af28:	781b      	ldrb	r3, [r3, #0]
   1af2a:	b29a      	uxth	r2, r3
   1af2c:	9b03      	ldr	r3, [sp, #12]
   1af2e:	3301      	adds	r3, #1
   1af30:	781b      	ldrb	r3, [r3, #0]
   1af32:	b29b      	uxth	r3, r3
   1af34:	021b      	lsls	r3, r3, #8
   1af36:	b29b      	uxth	r3, r3
   1af38:	4413      	add	r3, r2
   1af3a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   1af3e:	9b03      	ldr	r3, [sp, #12]
   1af40:	3302      	adds	r3, #2
   1af42:	9303      	str	r3, [sp, #12]

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
   1af44:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1af48:	b2db      	uxtb	r3, r3
   1af4a:	3b05      	subs	r3, #5
   1af4c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   1af50:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1af54:	2b02      	cmp	r3, #2
   1af56:	d007      	beq.n	1af68 <attsProcReadTypeReq+0x80>
   1af58:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1af5c:	2b10      	cmp	r3, #16
   1af5e:	d003      	beq.n	1af68 <attsProcReadTypeReq+0x80>
  {
    err = ATT_ERR_INVALID_PDU;
   1af60:	2304      	movs	r3, #4
   1af62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1af66:	e00c      	b.n	1af82 <attsProcReadTypeReq+0x9a>
  }
  /* verify handles */
  else if ((startHandle == 0) || (startHandle > endHandle))
   1af68:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1af6c:	2b00      	cmp	r3, #0
   1af6e:	d005      	beq.n	1af7c <attsProcReadTypeReq+0x94>
   1af70:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   1af74:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1af78:	429a      	cmp	r2, r3
   1af7a:	d902      	bls.n	1af82 <attsProcReadTypeReq+0x9a>
  {
    err = ATT_ERR_HANDLE;
   1af7c:	2301      	movs	r3, #1
   1af7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  }

  if (!err)
   1af82:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1af86:	2b00      	cmp	r3, #0
   1af88:	f040 8177 	bne.w	1b27a <attsProcReadTypeReq+0x392>
  {
    /* find first attribute with matching uuid within handle range */
    handle = attsFindUuidInRange(startHandle, endHandle, uuidLen, pPacket, &pAttr, &pGroup);
   1af8c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   1af90:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   1af94:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   1af98:	ab07      	add	r3, sp, #28
   1af9a:	9301      	str	r3, [sp, #4]
   1af9c:	ab08      	add	r3, sp, #32
   1af9e:	9300      	str	r3, [sp, #0]
   1afa0:	9b03      	ldr	r3, [sp, #12]
   1afa2:	f7ff fcc3 	bl	1a92c <attsFindUuidInRange>
   1afa6:	4603      	mov	r3, r0
   1afa8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    startHandle = handle;
   1afac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1afb0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

    if (handle == ATT_HANDLE_NONE)
   1afb4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1afb8:	2b00      	cmp	r3, #0
   1afba:	d103      	bne.n	1afc4 <attsProcReadTypeReq+0xdc>
    {
      err = ATT_ERR_NOT_FOUND;
   1afbc:	230a      	movs	r3, #10
   1afbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1afc2:	e03f      	b.n	1b044 <attsProcReadTypeReq+0x15c>
    }
    /* check permissions */
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1afc4:	9b05      	ldr	r3, [sp, #20]
   1afc6:	7f18      	ldrb	r0, [r3, #28]
                                    handle, pAttr->permissions)) != ATT_SUCCESS)
   1afc8:	9b08      	ldr	r3, [sp, #32]
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1afca:	7bdb      	ldrb	r3, [r3, #15]
   1afcc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1afd0:	2101      	movs	r1, #1
   1afd2:	f7ff fa1b 	bl	1a40c <attsPermissions>
   1afd6:	4603      	mov	r3, r0
   1afd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1afdc:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1afe0:	2b00      	cmp	r3, #0
   1afe2:	d12f      	bne.n	1b044 <attsProcReadTypeReq+0x15c>
    {
      /* err is set above */
    }
    /* check if read callback should be called */
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1afe4:	9b08      	ldr	r3, [sp, #32]
   1afe6:	7b9b      	ldrb	r3, [r3, #14]
   1afe8:	f003 0304 	and.w	r3, r3, #4
   1afec:	2b00      	cmp	r3, #0
   1afee:	d012      	beq.n	1b016 <attsProcReadTypeReq+0x12e>
             (pGroup->readCback != NULL))
   1aff0:	9b07      	ldr	r3, [sp, #28]
   1aff2:	689b      	ldr	r3, [r3, #8]
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1aff4:	2b00      	cmp	r3, #0
   1aff6:	d00e      	beq.n	1b016 <attsProcReadTypeReq+0x12e>
    {
      err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   1aff8:	9b07      	ldr	r3, [sp, #28]
   1affa:	689c      	ldr	r4, [r3, #8]
   1affc:	9b05      	ldr	r3, [sp, #20]
   1affe:	7f18      	ldrb	r0, [r3, #28]
   1b000:	9b08      	ldr	r3, [sp, #32]
   1b002:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1b006:	9300      	str	r3, [sp, #0]
   1b008:	2300      	movs	r3, #0
   1b00a:	2208      	movs	r2, #8
   1b00c:	47a0      	blx	r4
   1b00e:	4603      	mov	r3, r0
   1b010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1b014:	e016      	b.n	1b044 <attsProcReadTypeReq+0x15c>
    }
    /* else check if CCC */
    else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1b016:	9b08      	ldr	r3, [sp, #32]
   1b018:	7b9b      	ldrb	r3, [r3, #14]
   1b01a:	f003 0320 	and.w	r3, r3, #32
   1b01e:	2b00      	cmp	r3, #0
   1b020:	d010      	beq.n	1b044 <attsProcReadTypeReq+0x15c>
   1b022:	4ba3      	ldr	r3, [pc, #652]	; (1b2b0 <attsProcReadTypeReq+0x3c8>)
   1b024:	695b      	ldr	r3, [r3, #20]
   1b026:	2b00      	cmp	r3, #0
   1b028:	d00c      	beq.n	1b044 <attsProcReadTypeReq+0x15c>
    {
      err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   1b02a:	4ba1      	ldr	r3, [pc, #644]	; (1b2b0 <attsProcReadTypeReq+0x3c8>)
   1b02c:	695c      	ldr	r4, [r3, #20]
   1b02e:	9b05      	ldr	r3, [sp, #20]
   1b030:	7f18      	ldrb	r0, [r3, #28]
   1b032:	9b08      	ldr	r3, [sp, #32]
   1b034:	685b      	ldr	r3, [r3, #4]
   1b036:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b03a:	2105      	movs	r1, #5
   1b03c:	47a0      	blx	r4
   1b03e:	4603      	mov	r3, r0
   1b040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    }

    if (err == ATT_SUCCESS)
   1b044:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1b048:	2b00      	cmp	r3, #0
   1b04a:	f040 8116 	bne.w	1b27a <attsProcReadTypeReq+0x392>
    {
      /* Check if UUID is the Database Hash Characteristic Value and the value is being
       * re-calculated
       */
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
   1b04e:	2202      	movs	r2, #2
   1b050:	4998      	ldr	r1, [pc, #608]	; (1b2b4 <attsProcReadTypeReq+0x3cc>)
   1b052:	9803      	ldr	r0, [sp, #12]
   1b054:	f00a fb00 	bl	25658 <memcmp>
   1b058:	4603      	mov	r3, r0
   1b05a:	2b00      	cmp	r3, #0
   1b05c:	d122      	bne.n	1b0a4 <attsProcReadTypeReq+0x1bc>
   1b05e:	f7fd ff79 	bl	18f54 <attsCsfGetHashUpdateStatus>
   1b062:	4603      	mov	r3, r0
   1b064:	2b00      	cmp	r3, #0
   1b066:	d01d      	beq.n	1b0a4 <attsProcReadTypeReq+0x1bc>
      {
        /* Store info and return */
        pCcb->pPendDbHashRsp = WsfBufAlloc(sizeof(attPendDbHashRsp_t));
   1b068:	2004      	movs	r0, #4
   1b06a:	f004 fbb5 	bl	1f7d8 <WsfBufAlloc>
   1b06e:	4602      	mov	r2, r0
   1b070:	9b05      	ldr	r3, [sp, #20]
   1b072:	621a      	str	r2, [r3, #32]
        if (pCcb->pPendDbHashRsp)
   1b074:	9b05      	ldr	r3, [sp, #20]
   1b076:	6a1b      	ldr	r3, [r3, #32]
   1b078:	2b00      	cmp	r3, #0
   1b07a:	d00a      	beq.n	1b092 <attsProcReadTypeReq+0x1aa>
        {
          pCcb->pPendDbHashRsp->startHandle = startHandle;
   1b07c:	9b05      	ldr	r3, [sp, #20]
   1b07e:	6a1b      	ldr	r3, [r3, #32]
   1b080:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   1b084:	801a      	strh	r2, [r3, #0]
          pCcb->pPendDbHashRsp->handle = handle;
   1b086:	9b05      	ldr	r3, [sp, #20]
   1b088:	6a1b      	ldr	r3, [r3, #32]
   1b08a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b08e:	805a      	strh	r2, [r3, #2]
        else
        {
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
        }

        return;
   1b090:	e10c      	b.n	1b2ac <attsProcReadTypeReq+0x3c4>
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
   1b092:	9b05      	ldr	r3, [sp, #20]
   1b094:	8b18      	ldrh	r0, [r3, #24]
   1b096:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   1b09a:	2311      	movs	r3, #17
   1b09c:	2108      	movs	r1, #8
   1b09e:	f7fe fd7f 	bl	19ba0 <attsErrRsp>
   1b0a2:	e103      	b.n	1b2ac <attsProcReadTypeReq+0x3c4>
      }

      /* allocate max size buffer for response */
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1b0a4:	9b05      	ldr	r3, [sp, #20]
   1b0a6:	8b5b      	ldrh	r3, [r3, #26]
   1b0a8:	3308      	adds	r3, #8
   1b0aa:	b29b      	uxth	r3, r3
   1b0ac:	4618      	mov	r0, r3
   1b0ae:	f001 f871 	bl	1c194 <attMsgAlloc>
   1b0b2:	900d      	str	r0, [sp, #52]	; 0x34
   1b0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b0b6:	2b00      	cmp	r3, #0
   1b0b8:	f000 80d6 	beq.w	1b268 <attsProcReadTypeReq+0x380>
      {
        p = pBuf + L2C_PAYLOAD_START;
   1b0bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b0be:	3308      	adds	r3, #8
   1b0c0:	930c      	str	r3, [sp, #48]	; 0x30
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   1b0c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b0c4:	1c5a      	adds	r2, r3, #1
   1b0c6:	920c      	str	r2, [sp, #48]	; 0x30
   1b0c8:	2209      	movs	r2, #9
   1b0ca:	701a      	strb	r2, [r3, #0]

        /* get length of this first attribute */
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   1b0cc:	9b05      	ldr	r3, [sp, #20]
   1b0ce:	8b5b      	ldrh	r3, [r3, #26]
   1b0d0:	3b04      	subs	r3, #4
   1b0d2:	9a08      	ldr	r2, [sp, #32]
   1b0d4:	6892      	ldr	r2, [r2, #8]
   1b0d6:	8812      	ldrh	r2, [r2, #0]
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t));
   1b0d8:	4293      	cmp	r3, r2
   1b0da:	bf28      	it	cs
   1b0dc:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   1b0de:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

        /* set length parameter in response message */
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   1b0e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b0e4:	1c5a      	adds	r2, r3, #1
   1b0e6:	920c      	str	r2, [sp, #48]	; 0x30
   1b0e8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1b0ec:	3202      	adds	r2, #2
   1b0ee:	b2d2      	uxtb	r2, r2
   1b0f0:	701a      	strb	r2, [r3, #0]

        /* copy result to response message */
        UINT16_TO_BSTREAM(p, handle);
   1b0f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b0f4:	1c5a      	adds	r2, r3, #1
   1b0f6:	920c      	str	r2, [sp, #48]	; 0x30
   1b0f8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b0fc:	b2d2      	uxtb	r2, r2
   1b0fe:	701a      	strb	r2, [r3, #0]
   1b100:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b104:	0a1b      	lsrs	r3, r3, #8
   1b106:	b299      	uxth	r1, r3
   1b108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b10a:	1c5a      	adds	r2, r3, #1
   1b10c:	920c      	str	r2, [sp, #48]	; 0x30
   1b10e:	b2ca      	uxtb	r2, r1
   1b110:	701a      	strb	r2, [r3, #0]
        memcpy(p, pAttr->pValue, attLen);
   1b112:	9b08      	ldr	r3, [sp, #32]
   1b114:	685b      	ldr	r3, [r3, #4]
   1b116:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1b11a:	4619      	mov	r1, r3
   1b11c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b11e:	f7f0 ffef 	bl	c100 <memcpy>
        p += attLen;
   1b122:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1b126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b128:	4413      	add	r3, r2
   1b12a:	930c      	str	r3, [sp, #48]	; 0x30

        /* look for additional attributes */
        handle++;
   1b12c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b130:	3301      	adds	r3, #1
   1b132:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   1b136:	e081      	b.n	1b23c <attsProcReadTypeReq+0x354>
                                             pPacket, &pAttr, &pGroup)) != ATT_HANDLE_NONE)
        {
          /* call read callback if desired */
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1b138:	9b08      	ldr	r3, [sp, #32]
   1b13a:	7b9b      	ldrb	r3, [r3, #14]
   1b13c:	f003 0304 	and.w	r3, r3, #4
   1b140:	2b00      	cmp	r3, #0
   1b142:	d012      	beq.n	1b16a <attsProcReadTypeReq+0x282>
              (pGroup->readCback != NULL))
   1b144:	9b07      	ldr	r3, [sp, #28]
   1b146:	689b      	ldr	r3, [r3, #8]
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1b148:	2b00      	cmp	r3, #0
   1b14a:	d00e      	beq.n	1b16a <attsProcReadTypeReq+0x282>
          {
            cbackErr = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   1b14c:	9b07      	ldr	r3, [sp, #28]
   1b14e:	689c      	ldr	r4, [r3, #8]
   1b150:	9b05      	ldr	r3, [sp, #20]
   1b152:	7f18      	ldrb	r0, [r3, #28]
   1b154:	9b08      	ldr	r3, [sp, #32]
   1b156:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1b15a:	9300      	str	r3, [sp, #0]
   1b15c:	2300      	movs	r3, #0
   1b15e:	2208      	movs	r2, #8
   1b160:	47a0      	blx	r4
   1b162:	4603      	mov	r3, r0
   1b164:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   1b168:	e016      	b.n	1b198 <attsProcReadTypeReq+0x2b0>
          }
          /* else check if CCC */
          else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1b16a:	9b08      	ldr	r3, [sp, #32]
   1b16c:	7b9b      	ldrb	r3, [r3, #14]
   1b16e:	f003 0320 	and.w	r3, r3, #32
   1b172:	2b00      	cmp	r3, #0
   1b174:	d010      	beq.n	1b198 <attsProcReadTypeReq+0x2b0>
   1b176:	4b4e      	ldr	r3, [pc, #312]	; (1b2b0 <attsProcReadTypeReq+0x3c8>)
   1b178:	695b      	ldr	r3, [r3, #20]
   1b17a:	2b00      	cmp	r3, #0
   1b17c:	d00c      	beq.n	1b198 <attsProcReadTypeReq+0x2b0>
          {
            cbackErr = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   1b17e:	4b4c      	ldr	r3, [pc, #304]	; (1b2b0 <attsProcReadTypeReq+0x3c8>)
   1b180:	695c      	ldr	r4, [r3, #20]
   1b182:	9b05      	ldr	r3, [sp, #20]
   1b184:	7f18      	ldrb	r0, [r3, #28]
   1b186:	9b08      	ldr	r3, [sp, #32]
   1b188:	685b      	ldr	r3, [r3, #4]
   1b18a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b18e:	2105      	movs	r1, #5
   1b190:	47a0      	blx	r4
   1b192:	4603      	mov	r3, r0
   1b194:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

          /* verify no error from read callback
           * verify length is same as first found attribute
           * verify attribute permissions
           */
          if ((cbackErr == ATT_SUCCESS) &&
   1b198:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1b19c:	2b00      	cmp	r3, #0
   1b19e:	d16c      	bne.n	1b27a <attsProcReadTypeReq+0x392>
              (*pAttr->pLen == attLen) &&
   1b1a0:	9b08      	ldr	r3, [sp, #32]
   1b1a2:	689b      	ldr	r3, [r3, #8]
   1b1a4:	881a      	ldrh	r2, [r3, #0]
   1b1a6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1b1aa:	b29b      	uxth	r3, r3
          if ((cbackErr == ATT_SUCCESS) &&
   1b1ac:	429a      	cmp	r2, r3
   1b1ae:	d164      	bne.n	1b27a <attsProcReadTypeReq+0x392>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1b1b0:	9b05      	ldr	r3, [sp, #20]
   1b1b2:	7f18      	ldrb	r0, [r3, #28]
                               handle, pAttr->permissions) == ATT_SUCCESS))
   1b1b4:	9b08      	ldr	r3, [sp, #32]
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1b1b6:	7bdb      	ldrb	r3, [r3, #15]
   1b1b8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b1bc:	2101      	movs	r1, #1
   1b1be:	f7ff f925 	bl	1a40c <attsPermissions>
   1b1c2:	4603      	mov	r3, r0
              (*pAttr->pLen == attLen) &&
   1b1c4:	2b00      	cmp	r3, #0
   1b1c6:	d158      	bne.n	1b27a <attsProcReadTypeReq+0x392>
          {
            /* copy result into response buffer; first check if it fits */
            if ((p + attLen + sizeof(uint16_t)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1b1c8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1b1cc:	3302      	adds	r3, #2
   1b1ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b1d0:	441a      	add	r2, r3
   1b1d2:	9b05      	ldr	r3, [sp, #20]
   1b1d4:	8b5b      	ldrh	r3, [r3, #26]
   1b1d6:	3308      	adds	r3, #8
   1b1d8:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b1da:	440b      	add	r3, r1
   1b1dc:	429a      	cmp	r2, r3
   1b1de:	d847      	bhi.n	1b270 <attsProcReadTypeReq+0x388>
            {
              UINT16_TO_BSTREAM(p, handle);
   1b1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b1e2:	1c5a      	adds	r2, r3, #1
   1b1e4:	920c      	str	r2, [sp, #48]	; 0x30
   1b1e6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b1ea:	b2d2      	uxtb	r2, r2
   1b1ec:	701a      	strb	r2, [r3, #0]
   1b1ee:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b1f2:	0a1b      	lsrs	r3, r3, #8
   1b1f4:	b299      	uxth	r1, r3
   1b1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b1f8:	1c5a      	adds	r2, r3, #1
   1b1fa:	920c      	str	r2, [sp, #48]	; 0x30
   1b1fc:	b2ca      	uxtb	r2, r1
   1b1fe:	701a      	strb	r2, [r3, #0]
              memcpy(p, pAttr->pValue, attLen);
   1b200:	9b08      	ldr	r3, [sp, #32]
   1b202:	685b      	ldr	r3, [r3, #4]
   1b204:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1b208:	4619      	mov	r1, r3
   1b20a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b20c:	f7f0 ff78 	bl	c100 <memcpy>
              p += attLen;
   1b210:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1b214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b216:	4413      	add	r3, r2
   1b218:	930c      	str	r3, [sp, #48]	; 0x30
            /* problem with read callback, length, or permissions; send what we've got so far */
            break;
          }

          /* special case of handle at max range */
          if (handle == ATT_HANDLE_MAX)
   1b21a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b21e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b222:	4293      	cmp	r3, r2
   1b224:	d026      	beq.n	1b274 <attsProcReadTypeReq+0x38c>
          {
            break;
          }

          /* try next handle */
          if (++handle > endHandle)
   1b226:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b22a:	3301      	adds	r3, #1
   1b22c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   1b230:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b234:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b238:	429a      	cmp	r2, r3
   1b23a:	d81d      	bhi.n	1b278 <attsProcReadTypeReq+0x390>
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   1b23c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   1b240:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   1b244:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   1b248:	ab07      	add	r3, sp, #28
   1b24a:	9301      	str	r3, [sp, #4]
   1b24c:	ab08      	add	r3, sp, #32
   1b24e:	9300      	str	r3, [sp, #0]
   1b250:	9b03      	ldr	r3, [sp, #12]
   1b252:	f7ff fb6b 	bl	1a92c <attsFindUuidInRange>
   1b256:	4603      	mov	r3, r0
   1b258:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   1b25c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b260:	2b00      	cmp	r3, #0
   1b262:	f47f af69 	bne.w	1b138 <attsProcReadTypeReq+0x250>
   1b266:	e008      	b.n	1b27a <attsProcReadTypeReq+0x392>
        }
      }
      else
      {
        /* buffer allocation failed */
        err = ATT_ERR_RESOURCES;
   1b268:	2311      	movs	r3, #17
   1b26a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1b26e:	e004      	b.n	1b27a <attsProcReadTypeReq+0x392>
              break;
   1b270:	bf00      	nop
   1b272:	e002      	b.n	1b27a <attsProcReadTypeReq+0x392>
            break;
   1b274:	bf00      	nop
   1b276:	e000      	b.n	1b27a <attsProcReadTypeReq+0x392>
            break;
   1b278:	bf00      	nop
      }
    }
  }

  /* if no error send response, else send error */
  if (!err)
   1b27a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1b27e:	2b00      	cmp	r3, #0
   1b280:	d10b      	bne.n	1b29a <attsProcReadTypeReq+0x3b2>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1b282:	9b05      	ldr	r3, [sp, #20]
   1b284:	8b19      	ldrh	r1, [r3, #24]
   1b286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b288:	3308      	adds	r3, #8
   1b28a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b28c:	1ad3      	subs	r3, r2, r3
   1b28e:	b29a      	uxth	r2, r3
   1b290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b292:	2004      	movs	r0, #4
   1b294:	f001 ff58 	bl	1d148 <L2cDataReq>
   1b298:	e008      	b.n	1b2ac <attsProcReadTypeReq+0x3c4>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
   1b29a:	9b05      	ldr	r3, [sp, #20]
   1b29c:	8b18      	ldrh	r0, [r3, #24]
   1b29e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1b2a2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   1b2a6:	2108      	movs	r1, #8
   1b2a8:	f7fe fc7a 	bl	19ba0 <attsErrRsp>
  }
}
   1b2ac:	b00e      	add	sp, #56	; 0x38
   1b2ae:	bd10      	pop	{r4, pc}
   1b2b0:	1000506c 	.word	0x1000506c
   1b2b4:	000286e4 	.word	0x000286e4

0001b2b8 <attsProcReadMultReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadMultReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1b2b8:	b510      	push	{r4, lr}
   1b2ba:	b08e      	sub	sp, #56	; 0x38
   1b2bc:	9005      	str	r0, [sp, #20]
   1b2be:	460b      	mov	r3, r1
   1b2c0:	9203      	str	r2, [sp, #12]
   1b2c2:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint8_t     *pBuf;
  uint8_t     *p;
  uint8_t     *pEnd;
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint16_t    handle = ATT_HANDLE_NONE;
   1b2c6:	2300      	movs	r3, #0
   1b2c8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;
   1b2cc:	2300      	movs	r3, #0
   1b2ce:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31

  /* points to end of payload */
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   1b2d2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1b2d6:	3308      	adds	r3, #8
   1b2d8:	9a03      	ldr	r2, [sp, #12]
   1b2da:	4413      	add	r3, r2
   1b2dc:	930b      	str	r3, [sp, #44]	; 0x2c

  /* points to first handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1b2de:	9b03      	ldr	r3, [sp, #12]
   1b2e0:	3309      	adds	r3, #9
   1b2e2:	9303      	str	r3, [sp, #12]

  /* allocate max size buffer for response */
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1b2e4:	9b05      	ldr	r3, [sp, #20]
   1b2e6:	8b5b      	ldrh	r3, [r3, #26]
   1b2e8:	3308      	adds	r3, #8
   1b2ea:	b29b      	uxth	r3, r3
   1b2ec:	4618      	mov	r0, r3
   1b2ee:	f000 ff51 	bl	1c194 <attMsgAlloc>
   1b2f2:	900a      	str	r0, [sp, #40]	; 0x28
   1b2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b2f6:	2b00      	cmp	r3, #0
   1b2f8:	f000 809d 	beq.w	1b436 <attsProcReadMultReq+0x17e>
  {
    p = pBuf + L2C_PAYLOAD_START;
   1b2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b2fe:	3308      	adds	r3, #8
   1b300:	930d      	str	r3, [sp, #52]	; 0x34
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   1b302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b304:	1c5a      	adds	r2, r3, #1
   1b306:	920d      	str	r2, [sp, #52]	; 0x34
   1b308:	220f      	movs	r2, #15
   1b30a:	701a      	strb	r2, [r3, #0]

    /* while there are handles remaining and there is space in response buffer */
    while (pPacket < pEnd)
   1b30c:	e08d      	b.n	1b42a <attsProcReadMultReq+0x172>
    {
      /* parse handle */
      BSTREAM_TO_UINT16(handle, pPacket);
   1b30e:	9b03      	ldr	r3, [sp, #12]
   1b310:	781b      	ldrb	r3, [r3, #0]
   1b312:	b29a      	uxth	r2, r3
   1b314:	9b03      	ldr	r3, [sp, #12]
   1b316:	3301      	adds	r3, #1
   1b318:	781b      	ldrb	r3, [r3, #0]
   1b31a:	b29b      	uxth	r3, r3
   1b31c:	021b      	lsls	r3, r3, #8
   1b31e:	b29b      	uxth	r3, r3
   1b320:	4413      	add	r3, r2
   1b322:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
   1b326:	9b03      	ldr	r3, [sp, #12]
   1b328:	3302      	adds	r3, #2
   1b32a:	9303      	str	r3, [sp, #12]

      /* find attribute */
      if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   1b32c:	aa07      	add	r2, sp, #28
   1b32e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   1b332:	4611      	mov	r1, r2
   1b334:	4618      	mov	r0, r3
   1b336:	f7fe fff9 	bl	1a32c <attsFindByHandle>
   1b33a:	9009      	str	r0, [sp, #36]	; 0x24
   1b33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b33e:	2b00      	cmp	r3, #0
   1b340:	d103      	bne.n	1b34a <attsProcReadMultReq+0x92>
      {
        err = ATT_ERR_HANDLE;
   1b342:	2301      	movs	r3, #1
   1b344:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        break;
   1b348:	e07c      	b.n	1b444 <attsProcReadMultReq+0x18c>
      }

      /* verify permissions */
      if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1b34a:	9b05      	ldr	r3, [sp, #20]
   1b34c:	7f18      	ldrb	r0, [r3, #28]
   1b34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b350:	7bdb      	ldrb	r3, [r3, #15]
   1b352:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1b356:	2101      	movs	r1, #1
   1b358:	f7ff f858 	bl	1a40c <attsPermissions>
   1b35c:	4603      	mov	r3, r0
   1b35e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   1b362:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1b366:	2b00      	cmp	r3, #0
   1b368:	d169      	bne.n	1b43e <attsProcReadMultReq+0x186>
      {
        break;
      }

      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1b36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b36c:	7b9b      	ldrb	r3, [r3, #14]
   1b36e:	f003 0304 	and.w	r3, r3, #4
   1b372:	2b00      	cmp	r3, #0
   1b374:	d016      	beq.n	1b3a4 <attsProcReadMultReq+0xec>
          (pGroup->readCback != NULL))
   1b376:	9b07      	ldr	r3, [sp, #28]
   1b378:	689b      	ldr	r3, [r3, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1b37a:	2b00      	cmp	r3, #0
   1b37c:	d012      	beq.n	1b3a4 <attsProcReadMultReq+0xec>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_MULT_REQ, 0, pAttr);
   1b37e:	9b07      	ldr	r3, [sp, #28]
   1b380:	689c      	ldr	r4, [r3, #8]
   1b382:	9b05      	ldr	r3, [sp, #20]
   1b384:	7f18      	ldrb	r0, [r3, #28]
   1b386:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
   1b38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b38c:	9300      	str	r3, [sp, #0]
   1b38e:	2300      	movs	r3, #0
   1b390:	220e      	movs	r2, #14
   1b392:	47a0      	blx	r4
   1b394:	4603      	mov	r3, r0
   1b396:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        if (err != ATT_SUCCESS)
   1b39a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1b39e:	2b00      	cmp	r3, #0
   1b3a0:	d01b      	beq.n	1b3da <attsProcReadMultReq+0x122>
        {
          break;
   1b3a2:	e04f      	b.n	1b444 <attsProcReadMultReq+0x18c>
        }
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1b3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b3a6:	7b9b      	ldrb	r3, [r3, #14]
   1b3a8:	f003 0320 	and.w	r3, r3, #32
   1b3ac:	2b00      	cmp	r3, #0
   1b3ae:	d014      	beq.n	1b3da <attsProcReadMultReq+0x122>
   1b3b0:	4b35      	ldr	r3, [pc, #212]	; (1b488 <attsProcReadMultReq+0x1d0>)
   1b3b2:	695b      	ldr	r3, [r3, #20]
   1b3b4:	2b00      	cmp	r3, #0
   1b3b6:	d010      	beq.n	1b3da <attsProcReadMultReq+0x122>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   1b3b8:	4b33      	ldr	r3, [pc, #204]	; (1b488 <attsProcReadMultReq+0x1d0>)
   1b3ba:	695c      	ldr	r4, [r3, #20]
   1b3bc:	9b05      	ldr	r3, [sp, #20]
   1b3be:	7f18      	ldrb	r0, [r3, #28]
   1b3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b3c2:	685b      	ldr	r3, [r3, #4]
   1b3c4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1b3c8:	2105      	movs	r1, #5
   1b3ca:	47a0      	blx	r4
   1b3cc:	4603      	mov	r3, r0
   1b3ce:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
        if (err != ATT_SUCCESS)
   1b3d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1b3d6:	2b00      	cmp	r3, #0
   1b3d8:	d133      	bne.n	1b442 <attsProcReadMultReq+0x18a>
        {
          break;
        }
      }

      if (p < (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1b3da:	9b05      	ldr	r3, [sp, #20]
   1b3dc:	8b5b      	ldrh	r3, [r3, #26]
   1b3de:	3308      	adds	r3, #8
   1b3e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b3e2:	4413      	add	r3, r2
   1b3e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b3e6:	429a      	cmp	r2, r3
   1b3e8:	d21f      	bcs.n	1b42a <attsProcReadMultReq+0x172>
      {
        /* calculate remaining space in response buffer */
        readLen = (pBuf + pCcb->mtu + L2C_PAYLOAD_START) - p;
   1b3ea:	9b05      	ldr	r3, [sp, #20]
   1b3ec:	8b5b      	ldrh	r3, [r3, #26]
   1b3ee:	3308      	adds	r3, #8
   1b3f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b3f2:	441a      	add	r2, r3
   1b3f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b3f6:	1ad3      	subs	r3, r2, r3
   1b3f8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22

        /* actual length is minimum of remaining space and attribute length */
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
   1b3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b3fe:	689b      	ldr	r3, [r3, #8]
   1b400:	881b      	ldrh	r3, [r3, #0]
   1b402:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1b406:	4293      	cmp	r3, r2
   1b408:	bf28      	it	cs
   1b40a:	4613      	movcs	r3, r2
   1b40c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22

        /* copy attribute to response buffer */
        memcpy(p, pAttr->pValue, readLen);
   1b410:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b412:	685b      	ldr	r3, [r3, #4]
   1b414:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1b418:	4619      	mov	r1, r3
   1b41a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1b41c:	f7f0 fe70 	bl	c100 <memcpy>
        p += readLen;
   1b420:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   1b424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b426:	4413      	add	r3, r2
   1b428:	930d      	str	r3, [sp, #52]	; 0x34
    while (pPacket < pEnd)
   1b42a:	9a03      	ldr	r2, [sp, #12]
   1b42c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b42e:	429a      	cmp	r2, r3
   1b430:	f4ff af6d 	bcc.w	1b30e <attsProcReadMultReq+0x56>
   1b434:	e006      	b.n	1b444 <attsProcReadMultReq+0x18c>
    }
  }
  else
  {
    /* buffer allocation failed */
    err = ATT_ERR_RESOURCES;
   1b436:	2311      	movs	r3, #17
   1b438:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   1b43c:	e002      	b.n	1b444 <attsProcReadMultReq+0x18c>
        break;
   1b43e:	bf00      	nop
   1b440:	e000      	b.n	1b444 <attsProcReadMultReq+0x18c>
          break;
   1b442:	bf00      	nop
  }

  /* if no error send response, else send error */
  if (!err)
   1b444:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1b448:	2b00      	cmp	r3, #0
   1b44a:	d10b      	bne.n	1b464 <attsProcReadMultReq+0x1ac>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1b44c:	9b05      	ldr	r3, [sp, #20]
   1b44e:	8b19      	ldrh	r1, [r3, #24]
   1b450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b452:	3308      	adds	r3, #8
   1b454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b456:	1ad3      	subs	r3, r2, r3
   1b458:	b29a      	uxth	r2, r3
   1b45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b45c:	2004      	movs	r0, #4
   1b45e:	f001 fe73 	bl	1d148 <L2cDataReq>
      WsfMsgFree(pBuf);
    }

    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
  }
}
   1b462:	e00e      	b.n	1b482 <attsProcReadMultReq+0x1ca>
    if (pBuf != NULL)
   1b464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b466:	2b00      	cmp	r3, #0
   1b468:	d002      	beq.n	1b470 <attsProcReadMultReq+0x1b8>
      WsfMsgFree(pBuf);
   1b46a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1b46c:	f004 fa5a 	bl	1f924 <WsfMsgFree>
    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
   1b470:	9b05      	ldr	r3, [sp, #20]
   1b472:	8b18      	ldrh	r0, [r3, #24]
   1b474:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1b478:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1b47c:	210e      	movs	r1, #14
   1b47e:	f7fe fb8f 	bl	19ba0 <attsErrRsp>
}
   1b482:	bf00      	nop
   1b484:	b00e      	add	sp, #56	; 0x38
   1b486:	bd10      	pop	{r4, pc}
   1b488:	1000506c 	.word	0x1000506c

0001b48c <attsProcReadGroupTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadGroupTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1b48c:	b500      	push	{lr}
   1b48e:	b08f      	sub	sp, #60	; 0x3c
   1b490:	9005      	str	r0, [sp, #20]
   1b492:	460b      	mov	r3, r1
   1b494:	9203      	str	r2, [sp, #12]
   1b496:	f8ad 3012 	strh.w	r3, [sp, #18]
  uint8_t     *pBuf = NULL;
   1b49a:	2300      	movs	r3, #0
   1b49c:	930d      	str	r3, [sp, #52]	; 0x34
  uint8_t     *p = NULL;
   1b49e:	2300      	movs	r3, #0
   1b4a0:	930c      	str	r3, [sp, #48]	; 0x30
  uint16_t    startHandle;
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     err = ATT_SUCCESS;
   1b4a2:	2300      	movs	r3, #0
   1b4a4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   1b4a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b4ac:	f8ad 3018 	strh.w	r3, [sp, #24]

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1b4b0:	9b03      	ldr	r3, [sp, #12]
   1b4b2:	3309      	adds	r3, #9
   1b4b4:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(startHandle, pPacket);
   1b4b6:	9b03      	ldr	r3, [sp, #12]
   1b4b8:	781b      	ldrb	r3, [r3, #0]
   1b4ba:	b29a      	uxth	r2, r3
   1b4bc:	9b03      	ldr	r3, [sp, #12]
   1b4be:	3301      	adds	r3, #1
   1b4c0:	781b      	ldrb	r3, [r3, #0]
   1b4c2:	b29b      	uxth	r3, r3
   1b4c4:	021b      	lsls	r3, r3, #8
   1b4c6:	b29b      	uxth	r3, r3
   1b4c8:	4413      	add	r3, r2
   1b4ca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1b4ce:	9b03      	ldr	r3, [sp, #12]
   1b4d0:	3302      	adds	r3, #2
   1b4d2:	9303      	str	r3, [sp, #12]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   1b4d4:	9b03      	ldr	r3, [sp, #12]
   1b4d6:	781b      	ldrb	r3, [r3, #0]
   1b4d8:	b29a      	uxth	r2, r3
   1b4da:	9b03      	ldr	r3, [sp, #12]
   1b4dc:	3301      	adds	r3, #1
   1b4de:	781b      	ldrb	r3, [r3, #0]
   1b4e0:	b29b      	uxth	r3, r3
   1b4e2:	021b      	lsls	r3, r3, #8
   1b4e4:	b29b      	uxth	r3, r3
   1b4e6:	4413      	add	r3, r2
   1b4e8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   1b4ec:	9b03      	ldr	r3, [sp, #12]
   1b4ee:	3302      	adds	r3, #2
   1b4f0:	9303      	str	r3, [sp, #12]

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
   1b4f2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1b4f6:	b2db      	uxtb	r3, r3
   1b4f8:	3b05      	subs	r3, #5
   1b4fa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   1b4fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1b502:	2b02      	cmp	r3, #2
   1b504:	d007      	beq.n	1b516 <attsProcReadGroupTypeReq+0x8a>
   1b506:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1b50a:	2b10      	cmp	r3, #16
   1b50c:	d003      	beq.n	1b516 <attsProcReadGroupTypeReq+0x8a>
  {
    err = ATT_ERR_INVALID_PDU;
   1b50e:	2304      	movs	r3, #4
   1b510:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   1b514:	e01a      	b.n	1b54c <attsProcReadGroupTypeReq+0xc0>
  }
  /* verify handles */
  else if ((startHandle == 0) || (startHandle > endHandle))
   1b516:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   1b51a:	2b00      	cmp	r3, #0
   1b51c:	d005      	beq.n	1b52a <attsProcReadGroupTypeReq+0x9e>
   1b51e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   1b522:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b526:	429a      	cmp	r2, r3
   1b528:	d903      	bls.n	1b532 <attsProcReadGroupTypeReq+0xa6>
  {
    err = ATT_ERR_HANDLE;
   1b52a:	2301      	movs	r3, #1
   1b52c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   1b530:	e00c      	b.n	1b54c <attsProcReadGroupTypeReq+0xc0>
  }
  /* verify uuid is primary service group */
  else if (!attsUuid16Cmp(primSvcUuid, uuidLen, pPacket))
   1b532:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   1b536:	ab06      	add	r3, sp, #24
   1b538:	9a03      	ldr	r2, [sp, #12]
   1b53a:	4618      	mov	r0, r3
   1b53c:	f7fe fecf 	bl	1a2de <attsUuid16Cmp>
   1b540:	4603      	mov	r3, r0
   1b542:	2b00      	cmp	r3, #0
   1b544:	d102      	bne.n	1b54c <attsProcReadGroupTypeReq+0xc0>
  {
    err = ATT_ERR_GROUP_TYPE;
   1b546:	2310      	movs	r3, #16
   1b548:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  }

  if (!err)
   1b54c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1b550:	2b00      	cmp	r3, #0
   1b552:	f040 810f 	bne.w	1b774 <attsProcReadGroupTypeReq+0x2e8>
  {
    /* find first attribute with matching uuid within handle range */
    handle = attsFindUuidInRange(startHandle, endHandle, uuidLen, pPacket, &pAttr, &pGroup);
   1b556:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   1b55a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   1b55e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   1b562:	ab07      	add	r3, sp, #28
   1b564:	9301      	str	r3, [sp, #4]
   1b566:	ab08      	add	r3, sp, #32
   1b568:	9300      	str	r3, [sp, #0]
   1b56a:	9b03      	ldr	r3, [sp, #12]
   1b56c:	f7ff f9de 	bl	1a92c <attsFindUuidInRange>
   1b570:	4603      	mov	r3, r0
   1b572:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

    if (handle == ATT_HANDLE_NONE)
   1b576:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b57a:	2b00      	cmp	r3, #0
   1b57c:	d103      	bne.n	1b586 <attsProcReadGroupTypeReq+0xfa>
    {
      err = ATT_ERR_NOT_FOUND;
   1b57e:	230a      	movs	r3, #10
   1b580:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   1b584:	e0f6      	b.n	1b774 <attsProcReadGroupTypeReq+0x2e8>
    }
    /* check permissions */
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1b586:	9b05      	ldr	r3, [sp, #20]
   1b588:	7f18      	ldrb	r0, [r3, #28]
                                    handle, pAttr->permissions)) != ATT_SUCCESS)
   1b58a:	9b08      	ldr	r3, [sp, #32]
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1b58c:	7bdb      	ldrb	r3, [r3, #15]
   1b58e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b592:	2101      	movs	r1, #1
   1b594:	f7fe ff3a 	bl	1a40c <attsPermissions>
   1b598:	4603      	mov	r3, r0
   1b59a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   1b59e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1b5a2:	2b00      	cmp	r3, #0
   1b5a4:	d004      	beq.n	1b5b0 <attsProcReadGroupTypeReq+0x124>
    {
      startHandle = handle;     /* this handle is returned in error response */
   1b5a6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b5aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1b5ae:	e0e1      	b.n	1b774 <attsProcReadGroupTypeReq+0x2e8>
    }
    else
    {
      /* allocate max size buffer for response */
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1b5b0:	9b05      	ldr	r3, [sp, #20]
   1b5b2:	8b5b      	ldrh	r3, [r3, #26]
   1b5b4:	3308      	adds	r3, #8
   1b5b6:	b29b      	uxth	r3, r3
   1b5b8:	4618      	mov	r0, r3
   1b5ba:	f000 fdeb 	bl	1c194 <attMsgAlloc>
   1b5be:	900d      	str	r0, [sp, #52]	; 0x34
   1b5c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b5c2:	2b00      	cmp	r3, #0
   1b5c4:	f000 80cb 	beq.w	1b75e <attsProcReadGroupTypeReq+0x2d2>
      {
        p = pBuf + L2C_PAYLOAD_START;
   1b5c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b5ca:	3308      	adds	r3, #8
   1b5cc:	930c      	str	r3, [sp, #48]	; 0x30
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_GROUP_TYPE_RSP);
   1b5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b5d0:	1c5a      	adds	r2, r3, #1
   1b5d2:	920c      	str	r2, [sp, #48]	; 0x30
   1b5d4:	2211      	movs	r2, #17
   1b5d6:	701a      	strb	r2, [r3, #0]

        /* get length of this first attribute */
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   1b5d8:	9b05      	ldr	r3, [sp, #20]
   1b5da:	8b5b      	ldrh	r3, [r3, #26]
   1b5dc:	3b06      	subs	r3, #6
   1b5de:	9a08      	ldr	r2, [sp, #32]
   1b5e0:	6892      	ldr	r2, [r2, #8]
   1b5e2:	8812      	ldrh	r2, [r2, #0]
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)));
   1b5e4:	4293      	cmp	r3, r2
   1b5e6:	bf28      	it	cs
   1b5e8:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   1b5ea:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

        /* set length parameter in response message */
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   1b5ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b5f0:	1c5a      	adds	r2, r3, #1
   1b5f2:	920c      	str	r2, [sp, #48]	; 0x30
   1b5f4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1b5f8:	3204      	adds	r2, #4
   1b5fa:	b2d2      	uxtb	r2, r2
   1b5fc:	701a      	strb	r2, [r3, #0]

        /* copy handle to response message */
        UINT16_TO_BSTREAM(p, handle);
   1b5fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b600:	1c5a      	adds	r2, r3, #1
   1b602:	920c      	str	r2, [sp, #48]	; 0x30
   1b604:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b608:	b2d2      	uxtb	r2, r2
   1b60a:	701a      	strb	r2, [r3, #0]
   1b60c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b610:	0a1b      	lsrs	r3, r3, #8
   1b612:	b299      	uxth	r1, r3
   1b614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b616:	1c5a      	adds	r2, r3, #1
   1b618:	920c      	str	r2, [sp, #48]	; 0x30
   1b61a:	b2ca      	uxtb	r2, r1
   1b61c:	701a      	strb	r2, [r3, #0]

        /* get end group handle and copy it to response message */
        handle = attsFindServiceGroupEnd(handle);
   1b61e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b622:	4618      	mov	r0, r3
   1b624:	f7ff f9f8 	bl	1aa18 <attsFindServiceGroupEnd>
   1b628:	4603      	mov	r3, r0
   1b62a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        UINT16_TO_BSTREAM(p, handle);
   1b62e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b630:	1c5a      	adds	r2, r3, #1
   1b632:	920c      	str	r2, [sp, #48]	; 0x30
   1b634:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b638:	b2d2      	uxtb	r2, r2
   1b63a:	701a      	strb	r2, [r3, #0]
   1b63c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b640:	0a1b      	lsrs	r3, r3, #8
   1b642:	b299      	uxth	r1, r3
   1b644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b646:	1c5a      	adds	r2, r3, #1
   1b648:	920c      	str	r2, [sp, #48]	; 0x30
   1b64a:	b2ca      	uxtb	r2, r1
   1b64c:	701a      	strb	r2, [r3, #0]

        /* copy the attribute value to response message */
        memcpy(p, pAttr->pValue, attLen);
   1b64e:	9b08      	ldr	r3, [sp, #32]
   1b650:	685b      	ldr	r3, [r3, #4]
   1b652:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1b656:	4619      	mov	r1, r3
   1b658:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b65a:	f7f0 fd51 	bl	c100 <memcpy>
        p += attLen;
   1b65e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1b662:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b664:	4413      	add	r3, r2
   1b666:	930c      	str	r3, [sp, #48]	; 0x30

        /* look for additional attributes */
        while (TRUE)
        {
          /* special case of handle at max range */
          if (handle == ATT_HANDLE_MAX)
   1b668:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b66c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b670:	4293      	cmp	r3, r2
   1b672:	d078      	beq.n	1b766 <attsProcReadGroupTypeReq+0x2da>
          {
            break;
          }

          /* increment to next handle */
          if (++handle > endHandle)
   1b674:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b678:	3301      	adds	r3, #1
   1b67a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   1b67e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b682:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b686:	429a      	cmp	r2, r3
   1b688:	d86f      	bhi.n	1b76a <attsProcReadGroupTypeReq+0x2de>
          {
            break;
          }

          /* find next matching handle */
          if ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   1b68a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   1b68e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
   1b692:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   1b696:	ab07      	add	r3, sp, #28
   1b698:	9301      	str	r3, [sp, #4]
   1b69a:	ab08      	add	r3, sp, #32
   1b69c:	9300      	str	r3, [sp, #0]
   1b69e:	9b03      	ldr	r3, [sp, #12]
   1b6a0:	f7ff f944 	bl	1a92c <attsFindUuidInRange>
   1b6a4:	4603      	mov	r3, r0
   1b6a6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   1b6aa:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b6ae:	2b00      	cmp	r3, #0
   1b6b0:	d05d      	beq.n	1b76e <attsProcReadGroupTypeReq+0x2e2>
          }

          /* verify length is same as first found attribute
           * verify attribute permissions
           */
          if ((*pAttr->pLen == attLen) &&
   1b6b2:	9b08      	ldr	r3, [sp, #32]
   1b6b4:	689b      	ldr	r3, [r3, #8]
   1b6b6:	881a      	ldrh	r2, [r3, #0]
   1b6b8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1b6bc:	b29b      	uxth	r3, r3
   1b6be:	429a      	cmp	r2, r3
   1b6c0:	d158      	bne.n	1b774 <attsProcReadGroupTypeReq+0x2e8>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1b6c2:	9b05      	ldr	r3, [sp, #20]
   1b6c4:	7f18      	ldrb	r0, [r3, #28]
                               handle, pAttr->permissions) == ATT_SUCCESS))
   1b6c6:	9b08      	ldr	r3, [sp, #32]
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1b6c8:	7bdb      	ldrb	r3, [r3, #15]
   1b6ca:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b6ce:	2101      	movs	r1, #1
   1b6d0:	f7fe fe9c 	bl	1a40c <attsPermissions>
   1b6d4:	4603      	mov	r3, r0
          if ((*pAttr->pLen == attLen) &&
   1b6d6:	2b00      	cmp	r3, #0
   1b6d8:	d14c      	bne.n	1b774 <attsProcReadGroupTypeReq+0x2e8>
          {
            /* copy result into response buffer; first check if it fits */
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
   1b6da:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1b6de:	3304      	adds	r3, #4
   1b6e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b6e2:	441a      	add	r2, r3
                (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1b6e4:	9b05      	ldr	r3, [sp, #20]
   1b6e6:	8b5b      	ldrh	r3, [r3, #26]
   1b6e8:	3308      	adds	r3, #8
   1b6ea:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b6ec:	440b      	add	r3, r1
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
   1b6ee:	429a      	cmp	r2, r3
   1b6f0:	d83f      	bhi.n	1b772 <attsProcReadGroupTypeReq+0x2e6>
            {
              UINT16_TO_BSTREAM(p, handle);
   1b6f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b6f4:	1c5a      	adds	r2, r3, #1
   1b6f6:	920c      	str	r2, [sp, #48]	; 0x30
   1b6f8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b6fc:	b2d2      	uxtb	r2, r2
   1b6fe:	701a      	strb	r2, [r3, #0]
   1b700:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b704:	0a1b      	lsrs	r3, r3, #8
   1b706:	b299      	uxth	r1, r3
   1b708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b70a:	1c5a      	adds	r2, r3, #1
   1b70c:	920c      	str	r2, [sp, #48]	; 0x30
   1b70e:	b2ca      	uxtb	r2, r1
   1b710:	701a      	strb	r2, [r3, #0]
              handle = attsFindServiceGroupEnd(handle);
   1b712:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b716:	4618      	mov	r0, r3
   1b718:	f7ff f97e 	bl	1aa18 <attsFindServiceGroupEnd>
   1b71c:	4603      	mov	r3, r0
   1b71e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
              UINT16_TO_BSTREAM(p, handle);
   1b722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b724:	1c5a      	adds	r2, r3, #1
   1b726:	920c      	str	r2, [sp, #48]	; 0x30
   1b728:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   1b72c:	b2d2      	uxtb	r2, r2
   1b72e:	701a      	strb	r2, [r3, #0]
   1b730:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1b734:	0a1b      	lsrs	r3, r3, #8
   1b736:	b299      	uxth	r1, r3
   1b738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b73a:	1c5a      	adds	r2, r3, #1
   1b73c:	920c      	str	r2, [sp, #48]	; 0x30
   1b73e:	b2ca      	uxtb	r2, r1
   1b740:	701a      	strb	r2, [r3, #0]
              memcpy(p, pAttr->pValue, attLen);
   1b742:	9b08      	ldr	r3, [sp, #32]
   1b744:	685b      	ldr	r3, [r3, #4]
   1b746:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   1b74a:	4619      	mov	r1, r3
   1b74c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b74e:	f7f0 fcd7 	bl	c100 <memcpy>
              p += attLen;
   1b752:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1b756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b758:	4413      	add	r3, r2
   1b75a:	930c      	str	r3, [sp, #48]	; 0x30
          if (handle == ATT_HANDLE_MAX)
   1b75c:	e784      	b.n	1b668 <attsProcReadGroupTypeReq+0x1dc>
        }
      }
      else
      {
        /* buffer allocation failed */
        err = ATT_ERR_RESOURCES;
   1b75e:	2311      	movs	r3, #17
   1b760:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   1b764:	e006      	b.n	1b774 <attsProcReadGroupTypeReq+0x2e8>
            break;
   1b766:	bf00      	nop
   1b768:	e004      	b.n	1b774 <attsProcReadGroupTypeReq+0x2e8>
            break;
   1b76a:	bf00      	nop
   1b76c:	e002      	b.n	1b774 <attsProcReadGroupTypeReq+0x2e8>
            break;
   1b76e:	bf00      	nop
   1b770:	e000      	b.n	1b774 <attsProcReadGroupTypeReq+0x2e8>
              break;
   1b772:	bf00      	nop
      }
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   1b774:	9805      	ldr	r0, [sp, #20]
   1b776:	f7fe fa6f 	bl	19c58 <attsDiscBusy>

  /* if no error send response, else send error */
  if (!err)
   1b77a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1b77e:	2b00      	cmp	r3, #0
   1b780:	d10b      	bne.n	1b79a <attsProcReadGroupTypeReq+0x30e>
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1b782:	9b05      	ldr	r3, [sp, #20]
   1b784:	8b19      	ldrh	r1, [r3, #24]
   1b786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b788:	3308      	adds	r3, #8
   1b78a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b78c:	1ad3      	subs	r3, r2, r3
   1b78e:	b29a      	uxth	r2, r3
   1b790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b792:	2004      	movs	r0, #4
   1b794:	f001 fcd8 	bl	1d148 <L2cDataReq>
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
  }
}
   1b798:	e008      	b.n	1b7ac <attsProcReadGroupTypeReq+0x320>
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
   1b79a:	9b05      	ldr	r3, [sp, #20]
   1b79c:	8b18      	ldrh	r0, [r3, #24]
   1b79e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   1b7a2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   1b7a6:	2110      	movs	r1, #16
   1b7a8:	f7fe f9fa 	bl	19ba0 <attsErrRsp>
}
   1b7ac:	bf00      	nop
   1b7ae:	b00f      	add	sp, #60	; 0x3c
   1b7b0:	f85d fb04 	ldr.w	pc, [sp], #4

0001b7b4 <attsSignCcbByConnId>:
 *
 *  \return Pointer to control block.
 */
/*************************************************************************************************/
static attsSignCcb_t *attsSignCcbByConnId(dmConnId_t connId)
{
   1b7b4:	b082      	sub	sp, #8
   1b7b6:	4603      	mov	r3, r0
   1b7b8:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attsSignCb.ccb[connId - 1];
   1b7bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b7c0:	3b01      	subs	r3, #1
   1b7c2:	011b      	lsls	r3, r3, #4
   1b7c4:	4a02      	ldr	r2, [pc, #8]	; (1b7d0 <attsSignCcbByConnId+0x1c>)
   1b7c6:	4413      	add	r3, r2
}
   1b7c8:	4618      	mov	r0, r3
   1b7ca:	b002      	add	sp, #8
   1b7cc:	4770      	bx	lr
   1b7ce:	bf00      	nop
   1b7d0:	10005088 	.word	0x10005088

0001b7d4 <AttsSetCsrk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetCsrk(dmConnId_t connId, uint8_t *pCsrk, bool_t authenticated)
{
   1b7d4:	b500      	push	{lr}
   1b7d6:	b083      	sub	sp, #12
   1b7d8:	4603      	mov	r3, r0
   1b7da:	9100      	str	r1, [sp, #0]
   1b7dc:	f88d 3007 	strb.w	r3, [sp, #7]
   1b7e0:	4613      	mov	r3, r2
   1b7e2:	f88d 3006 	strb.w	r3, [sp, #6]
  attsSignCcbByConnId(connId)->pCsrk = pCsrk;
   1b7e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b7ea:	4618      	mov	r0, r3
   1b7ec:	f7ff ffe2 	bl	1b7b4 <attsSignCcbByConnId>
   1b7f0:	4602      	mov	r2, r0
   1b7f2:	9b00      	ldr	r3, [sp, #0]
   1b7f4:	6053      	str	r3, [r2, #4]
  attsSignCcbByConnId(connId)->authenticated = authenticated;
   1b7f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b7fa:	4618      	mov	r0, r3
   1b7fc:	f7ff ffda 	bl	1b7b4 <attsSignCcbByConnId>
   1b800:	4602      	mov	r2, r0
   1b802:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b806:	7313      	strb	r3, [r2, #12]
}
   1b808:	bf00      	nop
   1b80a:	b003      	add	sp, #12
   1b80c:	f85d fb04 	ldr.w	pc, [sp], #4

0001b810 <AttsSetSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetSignCounter(dmConnId_t connId, uint32_t signCounter)
{
   1b810:	b500      	push	{lr}
   1b812:	b083      	sub	sp, #12
   1b814:	4603      	mov	r3, r0
   1b816:	9100      	str	r1, [sp, #0]
   1b818:	f88d 3007 	strb.w	r3, [sp, #7]
  attsSignCcbByConnId(connId)->signCounter = signCounter;
   1b81c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b820:	4618      	mov	r0, r3
   1b822:	f7ff ffc7 	bl	1b7b4 <attsSignCcbByConnId>
   1b826:	4602      	mov	r2, r0
   1b828:	9b00      	ldr	r3, [sp, #0]
   1b82a:	6013      	str	r3, [r2, #0]
}
   1b82c:	bf00      	nop
   1b82e:	b003      	add	sp, #12
   1b830:	f85d fb04 	ldr.w	pc, [sp], #4

0001b834 <AttsGetSignCounter>:
 *
 *  \return Sign counter.
 */
/*************************************************************************************************/
uint32_t AttsGetSignCounter(dmConnId_t connId)
{
   1b834:	b500      	push	{lr}
   1b836:	b083      	sub	sp, #12
   1b838:	4603      	mov	r3, r0
   1b83a:	f88d 3007 	strb.w	r3, [sp, #7]
  return attsSignCcbByConnId(connId)->signCounter;
   1b83e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b842:	4618      	mov	r0, r3
   1b844:	f7ff ffb6 	bl	1b7b4 <attsSignCcbByConnId>
   1b848:	4603      	mov	r3, r0
   1b84a:	681b      	ldr	r3, [r3, #0]
}
   1b84c:	4618      	mov	r0, r3
   1b84e:	b003      	add	sp, #12
   1b850:	f85d fb04 	ldr.w	pc, [sp], #4

0001b854 <attsExecPrepWrite>:
 *
 *  \return ATT_SUCCESS or failure status.
 */
/*************************************************************************************************/
static uint8_t attsExecPrepWrite(attCcb_t *pCcb, attsPrepWrite_t *pPrep)
{
   1b854:	b530      	push	{r4, r5, lr}
   1b856:	b08b      	sub	sp, #44	; 0x2c
   1b858:	9005      	str	r0, [sp, #20]
   1b85a:	9104      	str	r1, [sp, #16]
  uint8_t     *p;
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;
   1b85c:	2300      	movs	r3, #0
   1b85e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

  p = pPrep->packet;
   1b862:	9b04      	ldr	r3, [sp, #16]
   1b864:	330a      	adds	r3, #10
   1b866:	9308      	str	r3, [sp, #32]

  /* find attribute */
  if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) == NULL)
   1b868:	9b04      	ldr	r3, [sp, #16]
   1b86a:	88db      	ldrh	r3, [r3, #6]
   1b86c:	aa06      	add	r2, sp, #24
   1b86e:	4611      	mov	r1, r2
   1b870:	4618      	mov	r0, r3
   1b872:	f7fe fd5b 	bl	1a32c <attsFindByHandle>
   1b876:	9007      	str	r0, [sp, #28]
   1b878:	9b07      	ldr	r3, [sp, #28]
   1b87a:	2b00      	cmp	r3, #0
   1b87c:	d103      	bne.n	1b886 <attsExecPrepWrite+0x32>
  {
    /* handle not found; only possible unless handle was removed */
    err = ATT_ERR_UNLIKELY;
   1b87e:	230e      	movs	r3, #14
   1b880:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   1b884:	e05a      	b.n	1b93c <attsExecPrepWrite+0xe8>
  }
  /* verify write permissions (in theory could have changed) */
  else if (!(pAttr->permissions & ATTS_PERMIT_WRITE))
   1b886:	9b07      	ldr	r3, [sp, #28]
   1b888:	7bdb      	ldrb	r3, [r3, #15]
   1b88a:	f003 0310 	and.w	r3, r3, #16
   1b88e:	2b00      	cmp	r3, #0
   1b890:	d103      	bne.n	1b89a <attsExecPrepWrite+0x46>
  {
    err = ATT_ERR_WRITE;
   1b892:	2303      	movs	r3, #3
   1b894:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   1b898:	e050      	b.n	1b93c <attsExecPrepWrite+0xe8>
  }
  /* if write callback is desired */
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1b89a:	9b07      	ldr	r3, [sp, #28]
   1b89c:	7b9b      	ldrb	r3, [r3, #14]
   1b89e:	f003 0302 	and.w	r3, r3, #2
   1b8a2:	2b00      	cmp	r3, #0
   1b8a4:	d019      	beq.n	1b8da <attsExecPrepWrite+0x86>
           (pGroup->writeCback != NULL))
   1b8a6:	9b06      	ldr	r3, [sp, #24]
   1b8a8:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1b8aa:	2b00      	cmp	r3, #0
   1b8ac:	d015      	beq.n	1b8da <attsExecPrepWrite+0x86>
  {

    /* write callback performs the write */
    err = (*pGroup->writeCback)(pCcb->connId, pPrep->handle, ATT_PDU_EXEC_WRITE_REQ,
   1b8ae:	9b06      	ldr	r3, [sp, #24]
   1b8b0:	68dc      	ldr	r4, [r3, #12]
   1b8b2:	9b05      	ldr	r3, [sp, #20]
   1b8b4:	7f18      	ldrb	r0, [r3, #28]
   1b8b6:	9b04      	ldr	r3, [sp, #16]
   1b8b8:	88d9      	ldrh	r1, [r3, #6]
   1b8ba:	9b04      	ldr	r3, [sp, #16]
   1b8bc:	891d      	ldrh	r5, [r3, #8]
   1b8be:	9b04      	ldr	r3, [sp, #16]
   1b8c0:	889b      	ldrh	r3, [r3, #4]
   1b8c2:	9a07      	ldr	r2, [sp, #28]
   1b8c4:	9202      	str	r2, [sp, #8]
   1b8c6:	9a08      	ldr	r2, [sp, #32]
   1b8c8:	9201      	str	r2, [sp, #4]
   1b8ca:	9300      	str	r3, [sp, #0]
   1b8cc:	462b      	mov	r3, r5
   1b8ce:	2218      	movs	r2, #24
   1b8d0:	47a0      	blx	r4
   1b8d2:	4603      	mov	r3, r0
   1b8d4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   1b8d8:	e030      	b.n	1b93c <attsExecPrepWrite+0xe8>
                                pPrep->offset, pPrep->writeLen, p, pAttr);
  }
  /* else check if CCC */
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1b8da:	9b07      	ldr	r3, [sp, #28]
   1b8dc:	7b9b      	ldrb	r3, [r3, #14]
   1b8de:	f003 0320 	and.w	r3, r3, #32
   1b8e2:	2b00      	cmp	r3, #0
   1b8e4:	d010      	beq.n	1b908 <attsExecPrepWrite+0xb4>
   1b8e6:	4b18      	ldr	r3, [pc, #96]	; (1b948 <attsExecPrepWrite+0xf4>)
   1b8e8:	695b      	ldr	r3, [r3, #20]
   1b8ea:	2b00      	cmp	r3, #0
   1b8ec:	d00c      	beq.n	1b908 <attsExecPrepWrite+0xb4>
  {
    err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, pPrep->handle, p);
   1b8ee:	4b16      	ldr	r3, [pc, #88]	; (1b948 <attsExecPrepWrite+0xf4>)
   1b8f0:	695c      	ldr	r4, [r3, #20]
   1b8f2:	9b05      	ldr	r3, [sp, #20]
   1b8f4:	7f18      	ldrb	r0, [r3, #28]
   1b8f6:	9b04      	ldr	r3, [sp, #16]
   1b8f8:	88da      	ldrh	r2, [r3, #6]
   1b8fa:	9b08      	ldr	r3, [sp, #32]
   1b8fc:	2109      	movs	r1, #9
   1b8fe:	47a0      	blx	r4
   1b900:	4603      	mov	r3, r0
   1b902:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   1b906:	e019      	b.n	1b93c <attsExecPrepWrite+0xe8>
  else
  {
    /* perform write; parameters have already been vetted by previous procedures */

    /* write attribute value */
    memcpy((pAttr->pValue + pPrep->offset), p, pPrep->writeLen);
   1b908:	9b07      	ldr	r3, [sp, #28]
   1b90a:	685b      	ldr	r3, [r3, #4]
   1b90c:	9a04      	ldr	r2, [sp, #16]
   1b90e:	8912      	ldrh	r2, [r2, #8]
   1b910:	1898      	adds	r0, r3, r2
   1b912:	9b04      	ldr	r3, [sp, #16]
   1b914:	889b      	ldrh	r3, [r3, #4]
   1b916:	461a      	mov	r2, r3
   1b918:	9908      	ldr	r1, [sp, #32]
   1b91a:	f7f0 fbf1 	bl	c100 <memcpy>

    /* write the length if variable length attribute */
    if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   1b91e:	9b07      	ldr	r3, [sp, #28]
   1b920:	7b9b      	ldrb	r3, [r3, #14]
   1b922:	f003 0308 	and.w	r3, r3, #8
   1b926:	2b00      	cmp	r3, #0
   1b928:	d008      	beq.n	1b93c <attsExecPrepWrite+0xe8>
    {
      *(pAttr->pLen) = pPrep->writeLen + pPrep->offset;
   1b92a:	9b04      	ldr	r3, [sp, #16]
   1b92c:	8899      	ldrh	r1, [r3, #4]
   1b92e:	9b04      	ldr	r3, [sp, #16]
   1b930:	891a      	ldrh	r2, [r3, #8]
   1b932:	9b07      	ldr	r3, [sp, #28]
   1b934:	689b      	ldr	r3, [r3, #8]
   1b936:	440a      	add	r2, r1
   1b938:	b292      	uxth	r2, r2
   1b93a:	801a      	strh	r2, [r3, #0]
    }
  }

  return err;
   1b93c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
   1b940:	4618      	mov	r0, r3
   1b942:	b00b      	add	sp, #44	; 0x2c
   1b944:	bd30      	pop	{r4, r5, pc}
   1b946:	bf00      	nop
   1b948:	1000506c 	.word	0x1000506c

0001b94c <attsProcWrite>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcWrite(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1b94c:	b510      	push	{r4, lr}
   1b94e:	b08e      	sub	sp, #56	; 0x38
   1b950:	9007      	str	r0, [sp, #28]
   1b952:	460b      	mov	r3, r1
   1b954:	9205      	str	r2, [sp, #20]
   1b956:	f8ad 301a 	strh.w	r3, [sp, #26]
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     opcode;
  uint16_t    handle;
  uint16_t    writeLen;
  uint8_t     err = ATT_SUCCESS;
   1b95a:	2300      	movs	r3, #0
   1b95c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

  /* parse opcode handle, calculate write length */
  pPacket += L2C_PAYLOAD_START;
   1b960:	9b05      	ldr	r3, [sp, #20]
   1b962:	3308      	adds	r3, #8
   1b964:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT8(opcode, pPacket);
   1b966:	9b05      	ldr	r3, [sp, #20]
   1b968:	1c5a      	adds	r2, r3, #1
   1b96a:	9205      	str	r2, [sp, #20]
   1b96c:	781b      	ldrb	r3, [r3, #0]
   1b96e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  BSTREAM_TO_UINT16(handle, pPacket);
   1b972:	9b05      	ldr	r3, [sp, #20]
   1b974:	781b      	ldrb	r3, [r3, #0]
   1b976:	b29a      	uxth	r2, r3
   1b978:	9b05      	ldr	r3, [sp, #20]
   1b97a:	3301      	adds	r3, #1
   1b97c:	781b      	ldrb	r3, [r3, #0]
   1b97e:	b29b      	uxth	r3, r3
   1b980:	021b      	lsls	r3, r3, #8
   1b982:	b29b      	uxth	r3, r3
   1b984:	4413      	add	r3, r2
   1b986:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   1b98a:	9b05      	ldr	r3, [sp, #20]
   1b98c:	3302      	adds	r3, #2
   1b98e:	9305      	str	r3, [sp, #20]
  writeLen = len - ATT_WRITE_REQ_LEN;
   1b990:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1b994:	3b03      	subs	r3, #3
   1b996:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   1b99a:	aa08      	add	r2, sp, #32
   1b99c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1b9a0:	4611      	mov	r1, r2
   1b9a2:	4618      	mov	r0, r3
   1b9a4:	f7fe fcc2 	bl	1a32c <attsFindByHandle>
   1b9a8:	900b      	str	r0, [sp, #44]	; 0x2c
   1b9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b9ac:	2b00      	cmp	r3, #0
   1b9ae:	f000 8099 	beq.w	1bae4 <attsProcWrite+0x198>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   1b9b2:	9b07      	ldr	r3, [sp, #28]
   1b9b4:	7f18      	ldrb	r0, [r3, #28]
   1b9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b9b8:	7bdb      	ldrb	r3, [r3, #15]
   1b9ba:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1b9be:	2110      	movs	r1, #16
   1b9c0:	f7fe fd24 	bl	1a40c <attsPermissions>
   1b9c4:	4603      	mov	r3, r0
   1b9c6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1b9ca:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1b9ce:	2b00      	cmp	r3, #0
   1b9d0:	f040 808b 	bne.w	1baea <attsProcWrite+0x19e>
                               handle, pAttr->permissions)) != ATT_SUCCESS)
    {
      /* err has been set; fail */
    }
    /* verify write length, fixed length */
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   1b9d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b9d6:	7b9b      	ldrb	r3, [r3, #14]
   1b9d8:	f003 0308 	and.w	r3, r3, #8
   1b9dc:	2b00      	cmp	r3, #0
   1b9de:	d109      	bne.n	1b9f4 <attsProcWrite+0xa8>
             (writeLen != pAttr->maxLen))
   1b9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b9e2:	899b      	ldrh	r3, [r3, #12]
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   1b9e4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1b9e8:	429a      	cmp	r2, r3
   1b9ea:	d003      	beq.n	1b9f4 <attsProcWrite+0xa8>
    {
      err = ATT_ERR_LENGTH;
   1b9ec:	230d      	movs	r3, #13
   1b9ee:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1b9f2:	e07a      	b.n	1baea <attsProcWrite+0x19e>
    }
    /* verify write length, variable length */
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
   1b9f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b9f6:	7b9b      	ldrb	r3, [r3, #14]
   1b9f8:	f003 0308 	and.w	r3, r3, #8
   1b9fc:	2b00      	cmp	r3, #0
   1b9fe:	d009      	beq.n	1ba14 <attsProcWrite+0xc8>
             (writeLen > pAttr->maxLen))
   1ba00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba02:	899b      	ldrh	r3, [r3, #12]
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
   1ba04:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1ba08:	429a      	cmp	r2, r3
   1ba0a:	d903      	bls.n	1ba14 <attsProcWrite+0xc8>
    {
      err = ATT_ERR_LENGTH;
   1ba0c:	230d      	movs	r3, #13
   1ba0e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1ba12:	e06a      	b.n	1baea <attsProcWrite+0x19e>
    }
    else
    {
      /* if write callback is desired */
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1ba14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba16:	7b9b      	ldrb	r3, [r3, #14]
   1ba18:	f003 0302 	and.w	r3, r3, #2
   1ba1c:	2b00      	cmp	r3, #0
   1ba1e:	d018      	beq.n	1ba52 <attsProcWrite+0x106>
          (pGroup->writeCback != NULL))
   1ba20:	9b08      	ldr	r3, [sp, #32]
   1ba22:	68db      	ldr	r3, [r3, #12]
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1ba24:	2b00      	cmp	r3, #0
   1ba26:	d014      	beq.n	1ba52 <attsProcWrite+0x106>
      {
        err = (*pGroup->writeCback)(pCcb->connId, handle, opcode, 0, writeLen,
   1ba28:	9b08      	ldr	r3, [sp, #32]
   1ba2a:	68dc      	ldr	r4, [r3, #12]
   1ba2c:	9b07      	ldr	r3, [sp, #28]
   1ba2e:	7f18      	ldrb	r0, [r3, #28]
   1ba30:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
   1ba34:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
   1ba38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba3a:	9302      	str	r3, [sp, #8]
   1ba3c:	9b05      	ldr	r3, [sp, #20]
   1ba3e:	9301      	str	r3, [sp, #4]
   1ba40:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   1ba44:	9300      	str	r3, [sp, #0]
   1ba46:	2300      	movs	r3, #0
   1ba48:	47a0      	blx	r4
   1ba4a:	4603      	mov	r3, r0
   1ba4c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1ba50:	e029      	b.n	1baa6 <attsProcWrite+0x15a>
                                    pPacket, pAttr);
      }
      /* else check if CCC */
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1ba52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba54:	7b9b      	ldrb	r3, [r3, #14]
   1ba56:	f003 0320 	and.w	r3, r3, #32
   1ba5a:	2b00      	cmp	r3, #0
   1ba5c:	d010      	beq.n	1ba80 <attsProcWrite+0x134>
   1ba5e:	4b33      	ldr	r3, [pc, #204]	; (1bb2c <attsProcWrite+0x1e0>)
   1ba60:	695b      	ldr	r3, [r3, #20]
   1ba62:	2b00      	cmp	r3, #0
   1ba64:	d00c      	beq.n	1ba80 <attsProcWrite+0x134>
      {
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, handle, pPacket);
   1ba66:	4b31      	ldr	r3, [pc, #196]	; (1bb2c <attsProcWrite+0x1e0>)
   1ba68:	695c      	ldr	r4, [r3, #20]
   1ba6a:	9b07      	ldr	r3, [sp, #28]
   1ba6c:	7f18      	ldrb	r0, [r3, #28]
   1ba6e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1ba72:	9b05      	ldr	r3, [sp, #20]
   1ba74:	2109      	movs	r1, #9
   1ba76:	47a0      	blx	r4
   1ba78:	4603      	mov	r3, r0
   1ba7a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   1ba7e:	e012      	b.n	1baa6 <attsProcWrite+0x15a>
      }
      else
      {
        /* write attribute value */
        memcpy(pAttr->pValue, pPacket, writeLen);
   1ba80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba82:	685b      	ldr	r3, [r3, #4]
   1ba84:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1ba88:	9905      	ldr	r1, [sp, #20]
   1ba8a:	4618      	mov	r0, r3
   1ba8c:	f7f0 fb38 	bl	c100 <memcpy>

        /* write the length if variable length attribute */
        if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   1ba90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba92:	7b9b      	ldrb	r3, [r3, #14]
   1ba94:	f003 0308 	and.w	r3, r3, #8
   1ba98:	2b00      	cmp	r3, #0
   1ba9a:	d004      	beq.n	1baa6 <attsProcWrite+0x15a>
        {
          *(pAttr->pLen) = writeLen;
   1ba9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba9e:	689b      	ldr	r3, [r3, #8]
   1baa0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   1baa4:	801a      	strh	r2, [r3, #0]
        }
      }

      /* if success and write req allocate response buffer */
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
   1baa6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1baaa:	2b00      	cmp	r3, #0
   1baac:	d11d      	bne.n	1baea <attsProcWrite+0x19e>
   1baae:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   1bab2:	2b12      	cmp	r3, #18
   1bab4:	d119      	bne.n	1baea <attsProcWrite+0x19e>
      {
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_WRITE_RSP_LEN)) != NULL)
   1bab6:	2009      	movs	r0, #9
   1bab8:	f000 fb6c 	bl	1c194 <attMsgAlloc>
   1babc:	900a      	str	r0, [sp, #40]	; 0x28
   1babe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bac0:	2b00      	cmp	r3, #0
   1bac2:	d012      	beq.n	1baea <attsProcWrite+0x19e>
        {
          /* build and send PDU */
          p = pBuf + L2C_PAYLOAD_START;
   1bac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bac6:	3308      	adds	r3, #8
   1bac8:	9309      	str	r3, [sp, #36]	; 0x24
          UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_RSP);
   1baca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bacc:	1c5a      	adds	r2, r3, #1
   1bace:	9209      	str	r2, [sp, #36]	; 0x24
   1bad0:	2213      	movs	r2, #19
   1bad2:	701a      	strb	r2, [r3, #0]

          L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_WRITE_RSP_LEN, pBuf);
   1bad4:	9b07      	ldr	r3, [sp, #28]
   1bad6:	8b19      	ldrh	r1, [r3, #24]
   1bad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bada:	2201      	movs	r2, #1
   1badc:	2004      	movs	r0, #4
   1bade:	f001 fb33 	bl	1d148 <L2cDataReq>
   1bae2:	e002      	b.n	1baea <attsProcWrite+0x19e>
    }
  }
  /* else attribute not found */
  else
  {
    err = ATT_ERR_HANDLE;
   1bae4:	2301      	movs	r3, #1
   1bae6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  }

  /* send error response for write req only */
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   1baea:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1baee:	2b00      	cmp	r3, #0
   1baf0:	d018      	beq.n	1bb24 <attsProcWrite+0x1d8>
   1baf2:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   1baf6:	2b12      	cmp	r3, #18
   1baf8:	d114      	bne.n	1bb24 <attsProcWrite+0x1d8>
  {
    if (err == ATT_RSP_PENDING)
   1bafa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1bafe:	2b79      	cmp	r3, #121	; 0x79
   1bb00:	d107      	bne.n	1bb12 <attsProcWrite+0x1c6>
    {
      /* set response pending */
      pCcb->control |= ATT_CCB_STATUS_RSP_PENDING;
   1bb02:	9b07      	ldr	r3, [sp, #28]
   1bb04:	7f5b      	ldrb	r3, [r3, #29]
   1bb06:	f043 0308 	orr.w	r3, r3, #8
   1bb0a:	b2da      	uxtb	r2, r3
   1bb0c:	9b07      	ldr	r3, [sp, #28]
   1bb0e:	775a      	strb	r2, [r3, #29]
    else
    {
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    }
  }
}
   1bb10:	e008      	b.n	1bb24 <attsProcWrite+0x1d8>
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   1bb12:	9b07      	ldr	r3, [sp, #28]
   1bb14:	8b18      	ldrh	r0, [r3, #24]
   1bb16:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   1bb1a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1bb1e:	2112      	movs	r1, #18
   1bb20:	f7fe f83e 	bl	19ba0 <attsErrRsp>
}
   1bb24:	bf00      	nop
   1bb26:	b00e      	add	sp, #56	; 0x38
   1bb28:	bd10      	pop	{r4, pc}
   1bb2a:	bf00      	nop
   1bb2c:	1000506c 	.word	0x1000506c

0001bb30 <attsProcPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcPrepWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1bb30:	b510      	push	{r4, lr}
   1bb32:	b090      	sub	sp, #64	; 0x40
   1bb34:	9007      	str	r0, [sp, #28]
   1bb36:	460b      	mov	r3, r1
   1bb38:	9205      	str	r2, [sp, #20]
   1bb3a:	f8ad 301a 	strh.w	r3, [sp, #26]
  attsGroup_t     *pGroup;
  attsPrepWrite_t *pPrep;
  uint16_t        handle;
  uint16_t        offset;
  uint16_t        writeLen;
  uint8_t         err = ATT_SUCCESS;
   1bb3e:	2300      	movs	r3, #0
   1bb40:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b

  /* parse handle and offset, calculate write length */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1bb44:	9b05      	ldr	r3, [sp, #20]
   1bb46:	3309      	adds	r3, #9
   1bb48:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT16(handle, pPacket);
   1bb4a:	9b05      	ldr	r3, [sp, #20]
   1bb4c:	781b      	ldrb	r3, [r3, #0]
   1bb4e:	b29a      	uxth	r2, r3
   1bb50:	9b05      	ldr	r3, [sp, #20]
   1bb52:	3301      	adds	r3, #1
   1bb54:	781b      	ldrb	r3, [r3, #0]
   1bb56:	b29b      	uxth	r3, r3
   1bb58:	021b      	lsls	r3, r3, #8
   1bb5a:	b29b      	uxth	r3, r3
   1bb5c:	4413      	add	r3, r2
   1bb5e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   1bb62:	9b05      	ldr	r3, [sp, #20]
   1bb64:	3302      	adds	r3, #2
   1bb66:	9305      	str	r3, [sp, #20]
  BSTREAM_TO_UINT16(offset, pPacket);
   1bb68:	9b05      	ldr	r3, [sp, #20]
   1bb6a:	781b      	ldrb	r3, [r3, #0]
   1bb6c:	b29a      	uxth	r2, r3
   1bb6e:	9b05      	ldr	r3, [sp, #20]
   1bb70:	3301      	adds	r3, #1
   1bb72:	781b      	ldrb	r3, [r3, #0]
   1bb74:	b29b      	uxth	r3, r3
   1bb76:	021b      	lsls	r3, r3, #8
   1bb78:	b29b      	uxth	r3, r3
   1bb7a:	4413      	add	r3, r2
   1bb7c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   1bb80:	9b05      	ldr	r3, [sp, #20]
   1bb82:	3302      	adds	r3, #2
   1bb84:	9305      	str	r3, [sp, #20]
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
   1bb86:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1bb8a:	3b05      	subs	r3, #5
   1bb8c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   1bb90:	aa09      	add	r2, sp, #36	; 0x24
   1bb92:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1bb96:	4611      	mov	r1, r2
   1bb98:	4618      	mov	r0, r3
   1bb9a:	f7fe fbc7 	bl	1a32c <attsFindByHandle>
   1bb9e:	900c      	str	r0, [sp, #48]	; 0x30
   1bba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bba2:	2b00      	cmp	r3, #0
   1bba4:	d103      	bne.n	1bbae <attsProcPrepWriteReq+0x7e>
  {
    /* attribute not found */
    err = ATT_ERR_HANDLE;
   1bba6:	2301      	movs	r3, #1
   1bba8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1bbac:	e069      	b.n	1bc82 <attsProcPrepWriteReq+0x152>
  }
  /* verify permissions */
  else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   1bbae:	9b07      	ldr	r3, [sp, #28]
   1bbb0:	7f18      	ldrb	r0, [r3, #28]
   1bbb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bbb4:	7bdb      	ldrb	r3, [r3, #15]
   1bbb6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1bbba:	2110      	movs	r1, #16
   1bbbc:	f7fe fc26 	bl	1a40c <attsPermissions>
   1bbc0:	4603      	mov	r3, r0
   1bbc2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1bbc6:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1bbca:	2b00      	cmp	r3, #0
   1bbcc:	d159      	bne.n	1bc82 <attsProcPrepWriteReq+0x152>
                               handle, pAttr->permissions)) != ATT_SUCCESS)
  {
    /* err has been set; fail */
  }
  /* verify offset is allowed */
  else if ((offset != 0) && ((pAttr->settings & ATTS_SET_ALLOW_OFFSET) == 0))
   1bbce:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1bbd2:	2b00      	cmp	r3, #0
   1bbd4:	d009      	beq.n	1bbea <attsProcPrepWriteReq+0xba>
   1bbd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bbd8:	7b9b      	ldrb	r3, [r3, #14]
   1bbda:	f003 0310 	and.w	r3, r3, #16
   1bbde:	2b00      	cmp	r3, #0
   1bbe0:	d103      	bne.n	1bbea <attsProcPrepWriteReq+0xba>
  {
    err = ATT_ERR_NOT_LONG;
   1bbe2:	230b      	movs	r3, #11
   1bbe4:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1bbe8:	e04b      	b.n	1bc82 <attsProcPrepWriteReq+0x152>
  }
  /* verify write length, fixed length */
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   1bbea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bbec:	7b9b      	ldrb	r3, [r3, #14]
   1bbee:	f003 0308 	and.w	r3, r3, #8
   1bbf2:	2b00      	cmp	r3, #0
   1bbf4:	d109      	bne.n	1bc0a <attsProcPrepWriteReq+0xda>
           (writeLen != pAttr->maxLen))
   1bbf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bbf8:	899b      	ldrh	r3, [r3, #12]
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   1bbfa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1bbfe:	429a      	cmp	r2, r3
   1bc00:	d003      	beq.n	1bc0a <attsProcPrepWriteReq+0xda>
  {
    err = ATT_ERR_LENGTH;
   1bc02:	230d      	movs	r3, #13
   1bc04:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1bc08:	e03b      	b.n	1bc82 <attsProcPrepWriteReq+0x152>
  }
  /* verify prepare write queue limit not reached */
  else if (WsfQueueCount(&pCcb->prepWriteQueue) >= pAttCfg->numPrepWrites)
   1bc0a:	9b07      	ldr	r3, [sp, #28]
   1bc0c:	4618      	mov	r0, r3
   1bc0e:	f004 f93d 	bl	1fe8c <WsfQueueCount>
   1bc12:	4603      	mov	r3, r0
   1bc14:	461a      	mov	r2, r3
   1bc16:	4b53      	ldr	r3, [pc, #332]	; (1bd64 <attsProcPrepWriteReq+0x234>)
   1bc18:	681b      	ldr	r3, [r3, #0]
   1bc1a:	79db      	ldrb	r3, [r3, #7]
   1bc1c:	b29b      	uxth	r3, r3
   1bc1e:	429a      	cmp	r2, r3
   1bc20:	d303      	bcc.n	1bc2a <attsProcPrepWriteReq+0xfa>
  {
    err = ATT_ERR_QUEUE_FULL;
   1bc22:	2309      	movs	r3, #9
   1bc24:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1bc28:	e02b      	b.n	1bc82 <attsProcPrepWriteReq+0x152>
  }
  /* allocate new buffer to hold prepared write */
  else if ((pPrep = WsfBufAlloc(sizeof(attsPrepWrite_t) - 1 + writeLen)) == NULL)
   1bc2a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1bc2e:	330b      	adds	r3, #11
   1bc30:	b29b      	uxth	r3, r3
   1bc32:	4618      	mov	r0, r3
   1bc34:	f003 fdd0 	bl	1f7d8 <WsfBufAlloc>
   1bc38:	900f      	str	r0, [sp, #60]	; 0x3c
   1bc3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bc3c:	2b00      	cmp	r3, #0
   1bc3e:	d103      	bne.n	1bc48 <attsProcPrepWriteReq+0x118>
  {
    err = ATT_ERR_RESOURCES;
   1bc40:	2311      	movs	r3, #17
   1bc42:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   1bc46:	e01c      	b.n	1bc82 <attsProcPrepWriteReq+0x152>
  }
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1bc48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bc4a:	7b9b      	ldrb	r3, [r3, #14]
   1bc4c:	f003 0302 	and.w	r3, r3, #2
   1bc50:	2b00      	cmp	r3, #0
   1bc52:	d016      	beq.n	1bc82 <attsProcPrepWriteReq+0x152>
          (pGroup->writeCback != NULL))
   1bc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bc56:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   1bc58:	2b00      	cmp	r3, #0
   1bc5a:	d012      	beq.n	1bc82 <attsProcPrepWriteReq+0x152>
  {
    err = (*pGroup->writeCback)(pCcb->connId, handle, ATT_PDU_PREP_WRITE_REQ, 0, writeLen,
   1bc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bc5e:	68dc      	ldr	r4, [r3, #12]
   1bc60:	9b07      	ldr	r3, [sp, #28]
   1bc62:	7f18      	ldrb	r0, [r3, #28]
   1bc64:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   1bc68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bc6a:	9302      	str	r3, [sp, #8]
   1bc6c:	9b05      	ldr	r3, [sp, #20]
   1bc6e:	9301      	str	r3, [sp, #4]
   1bc70:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1bc74:	9300      	str	r3, [sp, #0]
   1bc76:	2300      	movs	r3, #0
   1bc78:	2216      	movs	r2, #22
   1bc7a:	47a0      	blx	r4
   1bc7c:	4603      	mov	r3, r0
   1bc7e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
                                pPacket, pAttr);
  }

  if (err == ATT_SUCCESS)
   1bc82:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1bc86:	2b00      	cmp	r3, #0
   1bc88:	d15c      	bne.n	1bd44 <attsProcPrepWriteReq+0x214>
  {
    /* copy data to new buffer and queue it */
    pPrep->writeLen = writeLen;
   1bc8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bc8c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1bc90:	809a      	strh	r2, [r3, #4]
    pPrep->handle = handle;
   1bc92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bc94:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1bc98:	80da      	strh	r2, [r3, #6]
    pPrep->offset = offset;
   1bc9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bc9c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1bca0:	811a      	strh	r2, [r3, #8]
    memcpy(pPrep->packet, pPacket, writeLen);
   1bca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bca4:	330a      	adds	r3, #10
   1bca6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1bcaa:	9905      	ldr	r1, [sp, #20]
   1bcac:	4618      	mov	r0, r3
   1bcae:	f7f0 fa27 	bl	c100 <memcpy>
    WsfQueueEnq(&pCcb->prepWriteQueue, pPrep);
   1bcb2:	9b07      	ldr	r3, [sp, #28]
   1bcb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1bcb6:	4618      	mov	r0, r3
   1bcb8:	f004 f840 	bl	1fd3c <WsfQueueEnq>

    /* allocate response buffer */
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_PREP_WRITE_RSP_LEN + writeLen)) != NULL)
   1bcbc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1bcc0:	330d      	adds	r3, #13
   1bcc2:	b29b      	uxth	r3, r3
   1bcc4:	4618      	mov	r0, r3
   1bcc6:	f000 fa65 	bl	1c194 <attMsgAlloc>
   1bcca:	900b      	str	r0, [sp, #44]	; 0x2c
   1bccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bcce:	2b00      	cmp	r3, #0
   1bcd0:	d038      	beq.n	1bd44 <attsProcPrepWriteReq+0x214>
    {
      /* build and send PDU */
      p = pBuf + L2C_PAYLOAD_START;
   1bcd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bcd4:	3308      	adds	r3, #8
   1bcd6:	930a      	str	r3, [sp, #40]	; 0x28
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
   1bcd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bcda:	1c5a      	adds	r2, r3, #1
   1bcdc:	920a      	str	r2, [sp, #40]	; 0x28
   1bcde:	2217      	movs	r2, #23
   1bce0:	701a      	strb	r2, [r3, #0]
      UINT16_TO_BSTREAM(p, handle);
   1bce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bce4:	1c5a      	adds	r2, r3, #1
   1bce6:	920a      	str	r2, [sp, #40]	; 0x28
   1bce8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1bcec:	b2d2      	uxtb	r2, r2
   1bcee:	701a      	strb	r2, [r3, #0]
   1bcf0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1bcf4:	0a1b      	lsrs	r3, r3, #8
   1bcf6:	b299      	uxth	r1, r3
   1bcf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bcfa:	1c5a      	adds	r2, r3, #1
   1bcfc:	920a      	str	r2, [sp, #40]	; 0x28
   1bcfe:	b2ca      	uxtb	r2, r1
   1bd00:	701a      	strb	r2, [r3, #0]
      UINT16_TO_BSTREAM(p, offset);
   1bd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bd04:	1c5a      	adds	r2, r3, #1
   1bd06:	920a      	str	r2, [sp, #40]	; 0x28
   1bd08:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1bd0c:	b2d2      	uxtb	r2, r2
   1bd0e:	701a      	strb	r2, [r3, #0]
   1bd10:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1bd14:	0a1b      	lsrs	r3, r3, #8
   1bd16:	b299      	uxth	r1, r3
   1bd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bd1a:	1c5a      	adds	r2, r3, #1
   1bd1c:	920a      	str	r2, [sp, #40]	; 0x28
   1bd1e:	b2ca      	uxtb	r2, r1
   1bd20:	701a      	strb	r2, [r3, #0]
      memcpy(p, pPacket, writeLen);
   1bd22:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1bd26:	461a      	mov	r2, r3
   1bd28:	9905      	ldr	r1, [sp, #20]
   1bd2a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1bd2c:	f7f0 f9e8 	bl	c100 <memcpy>

      L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_PREP_WRITE_RSP_LEN + writeLen), pBuf);
   1bd30:	9b07      	ldr	r3, [sp, #28]
   1bd32:	8b19      	ldrh	r1, [r3, #24]
   1bd34:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1bd38:	3305      	adds	r3, #5
   1bd3a:	b29a      	uxth	r2, r3
   1bd3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bd3e:	2004      	movs	r0, #4
   1bd40:	f001 fa02 	bl	1d148 <L2cDataReq>
    }
  }

  if (err)
   1bd44:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1bd48:	2b00      	cmp	r3, #0
   1bd4a:	d008      	beq.n	1bd5e <attsProcPrepWriteReq+0x22e>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_PREP_WRITE_REQ, handle, err);
   1bd4c:	9b07      	ldr	r3, [sp, #28]
   1bd4e:	8b18      	ldrh	r0, [r3, #24]
   1bd50:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1bd54:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1bd58:	2116      	movs	r1, #22
   1bd5a:	f7fd ff21 	bl	19ba0 <attsErrRsp>
  }
}
   1bd5e:	bf00      	nop
   1bd60:	b010      	add	sp, #64	; 0x40
   1bd62:	bd10      	pop	{r4, pc}
   1bd64:	10002bb0 	.word	0x10002bb0

0001bd68 <attsProcExecWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcExecWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1bd68:	b500      	push	{lr}
   1bd6a:	b08b      	sub	sp, #44	; 0x2c
   1bd6c:	9003      	str	r0, [sp, #12]
   1bd6e:	460b      	mov	r3, r1
   1bd70:	9201      	str	r2, [sp, #4]
   1bd72:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t         *pBuf;
  uint8_t         *p;
  attsPrepWrite_t *pPrep;
  attsAttr_t      *pAttr;
  attsGroup_t     *pGroup;
  uint8_t         err = ATT_SUCCESS;
   1bd76:	2300      	movs	r3, #0
   1bd78:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   1bd7c:	9b01      	ldr	r3, [sp, #4]
   1bd7e:	3309      	adds	r3, #9
   1bd80:	9301      	str	r3, [sp, #4]

  /* if cancelling all prepared writes */
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
   1bd82:	9b01      	ldr	r3, [sp, #4]
   1bd84:	781b      	ldrb	r3, [r3, #0]
   1bd86:	2b00      	cmp	r3, #0
   1bd88:	d103      	bne.n	1bd92 <attsProcExecWriteReq+0x2a>
  {
    /* free all queued buffers */
    attsClearPrepWrites(pCcb);
   1bd8a:	9803      	ldr	r0, [sp, #12]
   1bd8c:	f7fd ff4f 	bl	19c2e <attsClearPrepWrites>
   1bd90:	e059      	b.n	1be46 <attsProcExecWriteReq+0xde>
  }
  /* else writing all prepared writes */
  else if (*pPacket == ATT_EXEC_WRITE_ALL)
   1bd92:	9b01      	ldr	r3, [sp, #4]
   1bd94:	781b      	ldrb	r3, [r3, #0]
   1bd96:	2b01      	cmp	r3, #1
   1bd98:	d152      	bne.n	1be40 <attsProcExecWriteReq+0xd8>
  {
    /* iterate over prepare write queue and verify offset and length */
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   1bd9a:	9b03      	ldr	r3, [sp, #12]
   1bd9c:	681b      	ldr	r3, [r3, #0]
   1bd9e:	9309      	str	r3, [sp, #36]	; 0x24
   1bda0:	e02c      	b.n	1bdfc <attsProcExecWriteReq+0x94>
    {
      /* find attribute */
      if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) != NULL)
   1bda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bda4:	88db      	ldrh	r3, [r3, #6]
   1bda6:	aa04      	add	r2, sp, #16
   1bda8:	4611      	mov	r1, r2
   1bdaa:	4618      	mov	r0, r3
   1bdac:	f7fe fabe 	bl	1a32c <attsFindByHandle>
   1bdb0:	9007      	str	r0, [sp, #28]
   1bdb2:	9b07      	ldr	r3, [sp, #28]
   1bdb4:	2b00      	cmp	r3, #0
   1bdb6:	d01e      	beq.n	1bdf6 <attsProcExecWriteReq+0x8e>
      {
        /* verify offset */
        if (pPrep->offset > pAttr->maxLen)
   1bdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bdba:	891a      	ldrh	r2, [r3, #8]
   1bdbc:	9b07      	ldr	r3, [sp, #28]
   1bdbe:	899b      	ldrh	r3, [r3, #12]
   1bdc0:	429a      	cmp	r2, r3
   1bdc2:	d903      	bls.n	1bdcc <attsProcExecWriteReq+0x64>
        {
          err = ATT_ERR_OFFSET;
   1bdc4:	2307      	movs	r3, #7
   1bdc6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   1bdca:	e00c      	b.n	1bde6 <attsProcExecWriteReq+0x7e>
        }
        /* verify write length with offset */
        else if ((pPrep->writeLen + pPrep->offset) > pAttr->maxLen)
   1bdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bdce:	889b      	ldrh	r3, [r3, #4]
   1bdd0:	461a      	mov	r2, r3
   1bdd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bdd4:	891b      	ldrh	r3, [r3, #8]
   1bdd6:	4413      	add	r3, r2
   1bdd8:	9a07      	ldr	r2, [sp, #28]
   1bdda:	8992      	ldrh	r2, [r2, #12]
   1bddc:	4293      	cmp	r3, r2
   1bdde:	dd02      	ble.n	1bde6 <attsProcExecWriteReq+0x7e>
        {
          err = ATT_ERR_LENGTH;
   1bde0:	230d      	movs	r3, #13
   1bde2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        }

        if (err)
   1bde6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1bdea:	2b00      	cmp	r3, #0
   1bdec:	d003      	beq.n	1bdf6 <attsProcExecWriteReq+0x8e>
        {
          /* verification failed; discard all prepared writes */
          attsClearPrepWrites(pCcb);
   1bdee:	9803      	ldr	r0, [sp, #12]
   1bdf0:	f7fd ff1d 	bl	19c2e <attsClearPrepWrites>
          break;
   1bdf4:	e005      	b.n	1be02 <attsProcExecWriteReq+0x9a>
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   1bdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bdf8:	681b      	ldr	r3, [r3, #0]
   1bdfa:	9309      	str	r3, [sp, #36]	; 0x24
   1bdfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bdfe:	2b00      	cmp	r3, #0
   1be00:	d1cf      	bne.n	1bda2 <attsProcExecWriteReq+0x3a>
        }
      }
    }

    /* if length and offset checks ok then write all buffers in queue */
    if (err == ATT_SUCCESS)
   1be02:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1be06:	2b00      	cmp	r3, #0
   1be08:	d11d      	bne.n	1be46 <attsProcExecWriteReq+0xde>
    {
      /* for each buffer */
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   1be0a:	e010      	b.n	1be2e <attsProcExecWriteReq+0xc6>
      {
        /* write buffer */
        if ((err = attsExecPrepWrite(pCcb, pPrep)) != ATT_SUCCESS)
   1be0c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1be0e:	9803      	ldr	r0, [sp, #12]
   1be10:	f7ff fd20 	bl	1b854 <attsExecPrepWrite>
   1be14:	4603      	mov	r3, r0
   1be16:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   1be1a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1be1e:	2b00      	cmp	r3, #0
   1be20:	d002      	beq.n	1be28 <attsProcExecWriteReq+0xc0>
        {
          /* write failed; discard remaining prepared writes */
          attsClearPrepWrites(pCcb);
   1be22:	9803      	ldr	r0, [sp, #12]
   1be24:	f7fd ff03 	bl	19c2e <attsClearPrepWrites>
        }

        /* free buffer */
        WsfBufFree(pPrep);
   1be28:	9809      	ldr	r0, [sp, #36]	; 0x24
   1be2a:	f003 fd13 	bl	1f854 <WsfBufFree>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   1be2e:	9b03      	ldr	r3, [sp, #12]
   1be30:	4618      	mov	r0, r3
   1be32:	f003 ffa4 	bl	1fd7e <WsfQueueDeq>
   1be36:	9009      	str	r0, [sp, #36]	; 0x24
   1be38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1be3a:	2b00      	cmp	r3, #0
   1be3c:	d1e6      	bne.n	1be0c <attsProcExecWriteReq+0xa4>
   1be3e:	e002      	b.n	1be46 <attsProcExecWriteReq+0xde>
    }
  }
  /* else unknown operation */
  else
  {
    err = ATT_ERR_INVALID_PDU;
   1be40:	2304      	movs	r3, #4
   1be42:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  }

  /* send response or error response */
  if (err)
   1be46:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1be4a:	2b00      	cmp	r3, #0
   1be4c:	d008      	beq.n	1be60 <attsProcExecWriteReq+0xf8>
  {
    attsErrRsp(pCcb->handle, ATT_PDU_EXEC_WRITE_REQ, 0, err);
   1be4e:	9b03      	ldr	r3, [sp, #12]
   1be50:	8b18      	ldrh	r0, [r3, #24]
   1be52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1be56:	2200      	movs	r2, #0
   1be58:	2118      	movs	r1, #24
   1be5a:	f7fd fea1 	bl	19ba0 <attsErrRsp>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);

      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
    }
  }
}
   1be5e:	e015      	b.n	1be8c <attsProcExecWriteReq+0x124>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_EXEC_WRITE_RSP_LEN)) != NULL)
   1be60:	2009      	movs	r0, #9
   1be62:	f000 f997 	bl	1c194 <attMsgAlloc>
   1be66:	9006      	str	r0, [sp, #24]
   1be68:	9b06      	ldr	r3, [sp, #24]
   1be6a:	2b00      	cmp	r3, #0
   1be6c:	d00e      	beq.n	1be8c <attsProcExecWriteReq+0x124>
      p = pBuf + L2C_PAYLOAD_START;
   1be6e:	9b06      	ldr	r3, [sp, #24]
   1be70:	3308      	adds	r3, #8
   1be72:	9305      	str	r3, [sp, #20]
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);
   1be74:	9b05      	ldr	r3, [sp, #20]
   1be76:	1c5a      	adds	r2, r3, #1
   1be78:	9205      	str	r2, [sp, #20]
   1be7a:	2219      	movs	r2, #25
   1be7c:	701a      	strb	r2, [r3, #0]
      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
   1be7e:	9b03      	ldr	r3, [sp, #12]
   1be80:	8b19      	ldrh	r1, [r3, #24]
   1be82:	9b06      	ldr	r3, [sp, #24]
   1be84:	2201      	movs	r2, #1
   1be86:	2004      	movs	r0, #4
   1be88:	f001 f95e 	bl	1d148 <L2cDataReq>
}
   1be8c:	bf00      	nop
   1be8e:	b00b      	add	sp, #44	; 0x2c
   1be90:	f85d fb04 	ldr.w	pc, [sp], #4

0001be94 <attL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1be94:	b500      	push	{lr}
   1be96:	b085      	sub	sp, #20
   1be98:	4603      	mov	r3, r0
   1be9a:	9200      	str	r2, [sp, #0]
   1be9c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1bea0:	460b      	mov	r3, r1
   1bea2:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t pduType;

  /* parse PDU type */
  pduType = *(pPacket + L2C_PAYLOAD_START);
   1bea6:	9b00      	ldr	r3, [sp, #0]
   1bea8:	7a1b      	ldrb	r3, [r3, #8]
   1beaa:	f88d 300f 	strb.w	r3, [sp, #15]

  /* if from server */
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
   1beae:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1beb2:	f003 0301 	and.w	r3, r3, #1
   1beb6:	2b00      	cmp	r3, #0
   1beb8:	d009      	beq.n	1bece <attL2cDataCback+0x3a>
  {
    /* call client data callback */
    (*attCb.pClient->dataCback)(handle, len, pPacket);
   1beba:	4b0b      	ldr	r3, [pc, #44]	; (1bee8 <attL2cDataCback+0x54>)
   1bebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1bebe:	681b      	ldr	r3, [r3, #0]
   1bec0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1bec4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1bec8:	9a00      	ldr	r2, [sp, #0]
   1beca:	4798      	blx	r3
  else
  {
    /* call server data callback */
    (*attCb.pServer->dataCback)(handle, len, pPacket);
  }
}
   1becc:	e008      	b.n	1bee0 <attL2cDataCback+0x4c>
    (*attCb.pServer->dataCback)(handle, len, pPacket);
   1bece:	4b06      	ldr	r3, [pc, #24]	; (1bee8 <attL2cDataCback+0x54>)
   1bed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1bed2:	681b      	ldr	r3, [r3, #0]
   1bed4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1bed8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1bedc:	9a00      	ldr	r2, [sp, #0]
   1bede:	4798      	blx	r3
}
   1bee0:	bf00      	nop
   1bee2:	b005      	add	sp, #20
   1bee4:	f85d fb04 	ldr.w	pc, [sp], #4
   1bee8:	100050c0 	.word	0x100050c0

0001beec <attL2cCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
   1beec:	b500      	push	{lr}
   1beee:	b085      	sub	sp, #20
   1bef0:	9001      	str	r0, [sp, #4]
  attCcb_t      *pCcb;

  /* get connection control block */
  pCcb = attCcbByConnId((dmConnId_t) pMsg->param);
   1bef2:	9b01      	ldr	r3, [sp, #4]
   1bef4:	881b      	ldrh	r3, [r3, #0]
   1bef6:	b2db      	uxtb	r3, r3
   1bef8:	4618      	mov	r0, r3
   1befa:	f000 f8b5 	bl	1c068 <attCcbByConnId>
   1befe:	9003      	str	r0, [sp, #12]

  /* verify connection is open */
  if (pCcb->connId != DM_CONN_ID_NONE)
   1bf00:	9b03      	ldr	r3, [sp, #12]
   1bf02:	7f1b      	ldrb	r3, [r3, #28]
   1bf04:	2b00      	cmp	r3, #0
   1bf06:	d022      	beq.n	1bf4e <attL2cCtrlCback+0x62>
  {
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
   1bf08:	9b01      	ldr	r3, [sp, #4]
   1bf0a:	789b      	ldrb	r3, [r3, #2]
   1bf0c:	2b01      	cmp	r3, #1
   1bf0e:	d107      	bne.n	1bf20 <attL2cCtrlCback+0x34>
    {
      /* flow disabled */
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
   1bf10:	9b03      	ldr	r3, [sp, #12]
   1bf12:	7f5b      	ldrb	r3, [r3, #29]
   1bf14:	f043 0302 	orr.w	r3, r3, #2
   1bf18:	b2da      	uxtb	r2, r3
   1bf1a:	9b03      	ldr	r3, [sp, #12]
   1bf1c:	775a      	strb	r2, [r3, #29]
        /* call client control callback */
        (*attCb.pClient->ctrlCback)(pMsg);
      }
    }
  }
}
   1bf1e:	e016      	b.n	1bf4e <attL2cCtrlCback+0x62>
      pCcb->control &= ~ATT_CCB_STATUS_FLOW_DISABLED;
   1bf20:	9b03      	ldr	r3, [sp, #12]
   1bf22:	7f5b      	ldrb	r3, [r3, #29]
   1bf24:	f023 0302 	bic.w	r3, r3, #2
   1bf28:	b2da      	uxtb	r2, r3
   1bf2a:	9b03      	ldr	r3, [sp, #12]
   1bf2c:	775a      	strb	r2, [r3, #29]
      (*attCb.pServer->ctrlCback)(pMsg);
   1bf2e:	4b0a      	ldr	r3, [pc, #40]	; (1bf58 <attL2cCtrlCback+0x6c>)
   1bf30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1bf32:	685b      	ldr	r3, [r3, #4]
   1bf34:	9801      	ldr	r0, [sp, #4]
   1bf36:	4798      	blx	r3
      if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   1bf38:	9b03      	ldr	r3, [sp, #12]
   1bf3a:	7f5b      	ldrb	r3, [r3, #29]
   1bf3c:	f003 0302 	and.w	r3, r3, #2
   1bf40:	2b00      	cmp	r3, #0
   1bf42:	d104      	bne.n	1bf4e <attL2cCtrlCback+0x62>
        (*attCb.pClient->ctrlCback)(pMsg);
   1bf44:	4b04      	ldr	r3, [pc, #16]	; (1bf58 <attL2cCtrlCback+0x6c>)
   1bf46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1bf48:	685b      	ldr	r3, [r3, #4]
   1bf4a:	9801      	ldr	r0, [sp, #4]
   1bf4c:	4798      	blx	r3
}
   1bf4e:	bf00      	nop
   1bf50:	b005      	add	sp, #20
   1bf52:	f85d fb04 	ldr.w	pc, [sp], #4
   1bf56:	bf00      	nop
   1bf58:	100050c0 	.word	0x100050c0

0001bf5c <attDmConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attDmConnCback(dmEvt_t *pDmEvt)
{
   1bf5c:	b500      	push	{lr}
   1bf5e:	b085      	sub	sp, #20
   1bf60:	9001      	str	r0, [sp, #4]
  attCcb_t  *pCcb;

  pCcb = attCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   1bf62:	9b01      	ldr	r3, [sp, #4]
   1bf64:	881b      	ldrh	r3, [r3, #0]
   1bf66:	b2db      	uxtb	r3, r3
   1bf68:	4618      	mov	r0, r3
   1bf6a:	f000 f87d 	bl	1c068 <attCcbByConnId>
   1bf6e:	9003      	str	r0, [sp, #12]

  /* if new connection created */
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1bf70:	9b01      	ldr	r3, [sp, #4]
   1bf72:	789b      	ldrb	r3, [r3, #2]
   1bf74:	2b27      	cmp	r3, #39	; 0x27
   1bf76:	d111      	bne.n	1bf9c <attDmConnCback+0x40>
  {
    /* initialize control block before handling event */
    pCcb->handle = pDmEvt->connOpen.handle;
   1bf78:	9b01      	ldr	r3, [sp, #4]
   1bf7a:	88da      	ldrh	r2, [r3, #6]
   1bf7c:	9b03      	ldr	r3, [sp, #12]
   1bf7e:	831a      	strh	r2, [r3, #24]
    pCcb->mtu = ATT_DEFAULT_MTU;
   1bf80:	9b03      	ldr	r3, [sp, #12]
   1bf82:	2217      	movs	r2, #23
   1bf84:	835a      	strh	r2, [r3, #26]
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   1bf86:	9b01      	ldr	r3, [sp, #4]
   1bf88:	881b      	ldrh	r3, [r3, #0]
   1bf8a:	b2da      	uxtb	r2, r3
   1bf8c:	9b03      	ldr	r3, [sp, #12]
   1bf8e:	771a      	strb	r2, [r3, #28]
    pCcb->control = 0;
   1bf90:	9b03      	ldr	r3, [sp, #12]
   1bf92:	2200      	movs	r2, #0
   1bf94:	775a      	strb	r2, [r3, #29]
    pCcb->pPendDbHashRsp = NULL;
   1bf96:	9b03      	ldr	r3, [sp, #12]
   1bf98:	2200      	movs	r2, #0
   1bf9a:	621a      	str	r2, [r3, #32]
  }

  /* if connection has been opened */
  if (pCcb->connId != DM_CONN_ID_NONE)
   1bf9c:	9b03      	ldr	r3, [sp, #12]
   1bf9e:	7f1b      	ldrb	r3, [r3, #28]
   1bfa0:	2b00      	cmp	r3, #0
   1bfa2:	d01b      	beq.n	1bfdc <attDmConnCback+0x80>
  {
    /* pass event to server */
    (*attCb.pServer->connCback)(pCcb, pDmEvt);
   1bfa4:	4b13      	ldr	r3, [pc, #76]	; (1bff4 <attDmConnCback+0x98>)
   1bfa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1bfa8:	68db      	ldr	r3, [r3, #12]
   1bfaa:	9901      	ldr	r1, [sp, #4]
   1bfac:	9803      	ldr	r0, [sp, #12]
   1bfae:	4798      	blx	r3

    /* pass event to client */
    (*attCb.pClient->connCback)(pCcb, pDmEvt);
   1bfb0:	4b10      	ldr	r3, [pc, #64]	; (1bff4 <attDmConnCback+0x98>)
   1bfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1bfb4:	68db      	ldr	r3, [r3, #12]
   1bfb6:	9901      	ldr	r1, [sp, #4]
   1bfb8:	9803      	ldr	r0, [sp, #12]
   1bfba:	4798      	blx	r3

    /* if connection closed */
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1bfbc:	9b01      	ldr	r3, [sp, #4]
   1bfbe:	789b      	ldrb	r3, [r3, #2]
   1bfc0:	2b28      	cmp	r3, #40	; 0x28
   1bfc2:	d10b      	bne.n	1bfdc <attDmConnCback+0x80>
    {
      /* clear control block after handling event */
      pCcb->connId = DM_CONN_ID_NONE;
   1bfc4:	9b03      	ldr	r3, [sp, #12]
   1bfc6:	2200      	movs	r2, #0
   1bfc8:	771a      	strb	r2, [r3, #28]

      if (pCcb->pPendDbHashRsp)
   1bfca:	9b03      	ldr	r3, [sp, #12]
   1bfcc:	6a1b      	ldr	r3, [r3, #32]
   1bfce:	2b00      	cmp	r3, #0
   1bfd0:	d004      	beq.n	1bfdc <attDmConnCback+0x80>
      {
        WsfBufFree(pCcb->pPendDbHashRsp);
   1bfd2:	9b03      	ldr	r3, [sp, #12]
   1bfd4:	6a1b      	ldr	r3, [r3, #32]
   1bfd6:	4618      	mov	r0, r3
   1bfd8:	f003 fc3c 	bl	1f854 <WsfBufFree>
      }
    }
  }

  /* execute ATT connection callback */
  if (attCb.connCback != NULL)
   1bfdc:	4b05      	ldr	r3, [pc, #20]	; (1bff4 <attDmConnCback+0x98>)
   1bfde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1bfe0:	2b00      	cmp	r3, #0
   1bfe2:	d003      	beq.n	1bfec <attDmConnCback+0x90>
  {
    (*attCb.connCback)(pDmEvt);
   1bfe4:	4b03      	ldr	r3, [pc, #12]	; (1bff4 <attDmConnCback+0x98>)
   1bfe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1bfe8:	9801      	ldr	r0, [sp, #4]
   1bfea:	4798      	blx	r3
  }
}
   1bfec:	bf00      	nop
   1bfee:	b005      	add	sp, #20
   1bff0:	f85d fb04 	ldr.w	pc, [sp], #4
   1bff4:	100050c0 	.word	0x100050c0

0001bff8 <attEmptyHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attEmptyHandler(wsfMsgHdr_t *pMsg)
{
   1bff8:	b082      	sub	sp, #8
   1bffa:	9001      	str	r0, [sp, #4]
  return;
   1bffc:	bf00      	nop
}
   1bffe:	b002      	add	sp, #8
   1c000:	4770      	bx	lr

0001c002 <attEmptyConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attEmptyConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
   1c002:	b082      	sub	sp, #8
   1c004:	9001      	str	r0, [sp, #4]
   1c006:	9100      	str	r1, [sp, #0]
  return;
   1c008:	bf00      	nop
}
   1c00a:	b002      	add	sp, #8
   1c00c:	4770      	bx	lr

0001c00e <attEmptyDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attEmptyDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1c00e:	b082      	sub	sp, #8
   1c010:	4603      	mov	r3, r0
   1c012:	9200      	str	r2, [sp, #0]
   1c014:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c018:	460b      	mov	r3, r1
   1c01a:	f8ad 3004 	strh.w	r3, [sp, #4]
  return;
   1c01e:	bf00      	nop
}
   1c020:	b002      	add	sp, #8
   1c022:	4770      	bx	lr

0001c024 <attCcbByHandle>:
 *
 *  \return Pointer to connection control block or NULL if not found.
 */
/*************************************************************************************************/
attCcb_t *attCcbByHandle(uint16_t handle)
{
   1c024:	b500      	push	{lr}
   1c026:	b085      	sub	sp, #20
   1c028:	4603      	mov	r3, r0
   1c02a:	f8ad 3006 	strh.w	r3, [sp, #6]
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   1c02e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c032:	4618      	mov	r0, r3
   1c034:	f7f9 fc0a 	bl	1584c <DmConnIdByHandle>
   1c038:	4603      	mov	r3, r0
   1c03a:	f88d 300f 	strb.w	r3, [sp, #15]
   1c03e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c042:	2b00      	cmp	r3, #0
   1c044:	d009      	beq.n	1c05a <attCcbByHandle+0x36>
  {
    return &attCb.ccb[connId - 1];
   1c046:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c04a:	1e5a      	subs	r2, r3, #1
   1c04c:	4613      	mov	r3, r2
   1c04e:	00db      	lsls	r3, r3, #3
   1c050:	4413      	add	r3, r2
   1c052:	009b      	lsls	r3, r3, #2
   1c054:	4a03      	ldr	r2, [pc, #12]	; (1c064 <attCcbByHandle+0x40>)
   1c056:	4413      	add	r3, r2
   1c058:	e000      	b.n	1c05c <attCcbByHandle+0x38>
  }

  return NULL;
   1c05a:	2300      	movs	r3, #0
}
   1c05c:	4618      	mov	r0, r3
   1c05e:	b005      	add	sp, #20
   1c060:	f85d fb04 	ldr.w	pc, [sp], #4
   1c064:	100050c0 	.word	0x100050c0

0001c068 <attCcbByConnId>:
 *
 *  \return Pointer to connection control block.
 */
/*************************************************************************************************/
attCcb_t *attCcbByConnId(dmConnId_t connId)
{
   1c068:	b082      	sub	sp, #8
   1c06a:	4603      	mov	r3, r0
   1c06c:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attCb.ccb[connId - 1];
   1c070:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c074:	1e5a      	subs	r2, r3, #1
   1c076:	4613      	mov	r3, r2
   1c078:	00db      	lsls	r3, r3, #3
   1c07a:	4413      	add	r3, r2
   1c07c:	009b      	lsls	r3, r3, #2
   1c07e:	4a02      	ldr	r2, [pc, #8]	; (1c088 <attCcbByConnId+0x20>)
   1c080:	4413      	add	r3, r2
}
   1c082:	4618      	mov	r0, r3
   1c084:	b002      	add	sp, #8
   1c086:	4770      	bx	lr
   1c088:	100050c0 	.word	0x100050c0

0001c08c <attUuidCmp16to128>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attUuidCmp16to128(const uint8_t *pUuid16, const uint8_t *pUuid128)
{
   1c08c:	b500      	push	{lr}
   1c08e:	b083      	sub	sp, #12
   1c090:	9001      	str	r0, [sp, #4]
   1c092:	9100      	str	r1, [sp, #0]
  attBaseUuid[ATT_BASE_UUID_POS_0] = pUuid16[0];
   1c094:	9b01      	ldr	r3, [sp, #4]
   1c096:	781a      	ldrb	r2, [r3, #0]
   1c098:	4b0a      	ldr	r3, [pc, #40]	; (1c0c4 <attUuidCmp16to128+0x38>)
   1c09a:	731a      	strb	r2, [r3, #12]
  attBaseUuid[ATT_BASE_UUID_POS_1] = pUuid16[1];
   1c09c:	9b01      	ldr	r3, [sp, #4]
   1c09e:	785a      	ldrb	r2, [r3, #1]
   1c0a0:	4b08      	ldr	r3, [pc, #32]	; (1c0c4 <attUuidCmp16to128+0x38>)
   1c0a2:	735a      	strb	r2, [r3, #13]

  return (memcmp(attBaseUuid, pUuid128, ATT_128_UUID_LEN) == 0);
   1c0a4:	2210      	movs	r2, #16
   1c0a6:	9900      	ldr	r1, [sp, #0]
   1c0a8:	4806      	ldr	r0, [pc, #24]	; (1c0c4 <attUuidCmp16to128+0x38>)
   1c0aa:	f009 fad5 	bl	25658 <memcmp>
   1c0ae:	4603      	mov	r3, r0
   1c0b0:	2b00      	cmp	r3, #0
   1c0b2:	bf0c      	ite	eq
   1c0b4:	2301      	moveq	r3, #1
   1c0b6:	2300      	movne	r3, #0
   1c0b8:	b2db      	uxtb	r3, r3
}
   1c0ba:	4618      	mov	r0, r3
   1c0bc:	b003      	add	sp, #12
   1c0be:	f85d fb04 	ldr.w	pc, [sp], #4
   1c0c2:	bf00      	nop
   1c0c4:	10002b98 	.word	0x10002b98

0001c0c8 <attSetMtu>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attSetMtu(attCcb_t *pCcb, uint16_t peerMtu, uint16_t localMtu)
{
   1c0c8:	b500      	push	{lr}
   1c0ca:	b087      	sub	sp, #28
   1c0cc:	9003      	str	r0, [sp, #12]
   1c0ce:	460b      	mov	r3, r1
   1c0d0:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c0d4:	4613      	mov	r3, r2
   1c0d6:	f8ad 3008 	strh.w	r3, [sp, #8]
  uint16_t  mtu;

  /* set negotiated mtu for the connection to the lesser of ours and theirs */
  mtu = WSF_MIN(peerMtu, localMtu);
   1c0da:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1c0de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1c0e2:	4293      	cmp	r3, r2
   1c0e4:	bf28      	it	cs
   1c0e6:	4613      	movcs	r3, r2
   1c0e8:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* if current mtu is not the same as the negotiated value */
  if (pCcb->mtu != mtu)
   1c0ec:	9b03      	ldr	r3, [sp, #12]
   1c0ee:	8b5b      	ldrh	r3, [r3, #26]
   1c0f0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1c0f4:	429a      	cmp	r2, r3
   1c0f6:	d00d      	beq.n	1c114 <attSetMtu+0x4c>
  {
    /* set mtu to the new value */
    pCcb->mtu = mtu;
   1c0f8:	9b03      	ldr	r3, [sp, #12]
   1c0fa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1c0fe:	835a      	strh	r2, [r3, #26]

    /* notify app about the new value */
    attExecCallback(pCcb->connId, ATT_MTU_UPDATE_IND, 0, ATT_SUCCESS, mtu);
   1c100:	9b03      	ldr	r3, [sp, #12]
   1c102:	7f18      	ldrb	r0, [r3, #28]
   1c104:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1c108:	9300      	str	r3, [sp, #0]
   1c10a:	2300      	movs	r3, #0
   1c10c:	2200      	movs	r2, #0
   1c10e:	2112      	movs	r1, #18
   1c110:	f000 f804 	bl	1c11c <attExecCallback>
  }
}
   1c114:	bf00      	nop
   1c116:	b007      	add	sp, #28
   1c118:	f85d fb04 	ldr.w	pc, [sp], #4

0001c11c <attExecCallback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status, uint16_t mtu)
{
   1c11c:	b510      	push	{r4, lr}
   1c11e:	b086      	sub	sp, #24
   1c120:	4604      	mov	r4, r0
   1c122:	4608      	mov	r0, r1
   1c124:	4611      	mov	r1, r2
   1c126:	461a      	mov	r2, r3
   1c128:	4623      	mov	r3, r4
   1c12a:	f88d 3007 	strb.w	r3, [sp, #7]
   1c12e:	4603      	mov	r3, r0
   1c130:	f88d 3006 	strb.w	r3, [sp, #6]
   1c134:	460b      	mov	r3, r1
   1c136:	f8ad 3004 	strh.w	r3, [sp, #4]
   1c13a:	4613      	mov	r3, r2
   1c13c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (attCb.cback)
   1c140:	4b13      	ldr	r3, [pc, #76]	; (1c190 <attExecCallback+0x74>)
   1c142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1c144:	2b00      	cmp	r3, #0
   1c146:	d01f      	beq.n	1c188 <attExecCallback+0x6c>
  {
    attEvt_t evt;

    evt.hdr.param = connId;
   1c148:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c14c:	b29b      	uxth	r3, r3
   1c14e:	f8ad 3008 	strh.w	r3, [sp, #8]
    evt.hdr.event = event;
   1c152:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1c156:	f88d 300a 	strb.w	r3, [sp, #10]
    evt.hdr.status = status;
   1c15a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1c15e:	f88d 300b 	strb.w	r3, [sp, #11]
    evt.valueLen = 0;
   1c162:	2300      	movs	r3, #0
   1c164:	f8ad 3010 	strh.w	r3, [sp, #16]
    evt.handle = handle;
   1c168:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1c16c:	f8ad 3012 	strh.w	r3, [sp, #18]
    evt.continuing = 0;
   1c170:	2300      	movs	r3, #0
   1c172:	f88d 3014 	strb.w	r3, [sp, #20]
    evt.mtu = mtu;
   1c176:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1c17a:	f8ad 3016 	strh.w	r3, [sp, #22]

    (*attCb.cback)(&evt);
   1c17e:	4b04      	ldr	r3, [pc, #16]	; (1c190 <attExecCallback+0x74>)
   1c180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1c182:	aa02      	add	r2, sp, #8
   1c184:	4610      	mov	r0, r2
   1c186:	4798      	blx	r3
  }
}
   1c188:	bf00      	nop
   1c18a:	b006      	add	sp, #24
   1c18c:	bd10      	pop	{r4, pc}
   1c18e:	bf00      	nop
   1c190:	100050c0 	.word	0x100050c0

0001c194 <attMsgAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *attMsgAlloc(uint16_t len)
{
   1c194:	b500      	push	{lr}
   1c196:	b083      	sub	sp, #12
   1c198:	4603      	mov	r3, r0
   1c19a:	f8ad 3006 	strh.w	r3, [sp, #6]
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1c19e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c1a2:	2100      	movs	r1, #0
   1c1a4:	4618      	mov	r0, r3
   1c1a6:	f003 fb8d 	bl	1f8c4 <WsfMsgDataAlloc>
   1c1aa:	4603      	mov	r3, r0
}
   1c1ac:	4618      	mov	r0, r3
   1c1ae:	b003      	add	sp, #12
   1c1b0:	f85d fb04 	ldr.w	pc, [sp], #4

0001c1b4 <AttHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandlerInit(wsfHandlerId_t handlerId)
{
   1c1b4:	b500      	push	{lr}
   1c1b6:	b083      	sub	sp, #12
   1c1b8:	4603      	mov	r3, r0
   1c1ba:	f88d 3007 	strb.w	r3, [sp, #7]
  /* store handler ID */
  attCb.handlerId = handlerId;
   1c1be:	4a0c      	ldr	r2, [pc, #48]	; (1c1f0 <AttHandlerInit+0x3c>)
   1c1c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c1c4:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c

  /* initialize control block */
  attCb.pClient = &attFcnDefault;
   1c1c8:	4b09      	ldr	r3, [pc, #36]	; (1c1f0 <AttHandlerInit+0x3c>)
   1c1ca:	4a0a      	ldr	r2, [pc, #40]	; (1c1f4 <AttHandlerInit+0x40>)
   1c1cc:	66da      	str	r2, [r3, #108]	; 0x6c
  attCb.pServer = &attFcnDefault;
   1c1ce:	4b08      	ldr	r3, [pc, #32]	; (1c1f0 <AttHandlerInit+0x3c>)
   1c1d0:	4a08      	ldr	r2, [pc, #32]	; (1c1f4 <AttHandlerInit+0x40>)
   1c1d2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Register with L2C */
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   1c1d4:	4a08      	ldr	r2, [pc, #32]	; (1c1f8 <AttHandlerInit+0x44>)
   1c1d6:	4909      	ldr	r1, [pc, #36]	; (1c1fc <AttHandlerInit+0x48>)
   1c1d8:	2004      	movs	r0, #4
   1c1da:	f000 ff99 	bl	1d110 <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);
   1c1de:	4908      	ldr	r1, [pc, #32]	; (1c200 <AttHandlerInit+0x4c>)
   1c1e0:	2000      	movs	r0, #0
   1c1e2:	f7f9 f9df 	bl	155a4 <DmConnRegister>

}
   1c1e6:	bf00      	nop
   1c1e8:	b003      	add	sp, #12
   1c1ea:	f85d fb04 	ldr.w	pc, [sp], #4
   1c1ee:	bf00      	nop
   1c1f0:	100050c0 	.word	0x100050c0
   1c1f4:	000286a4 	.word	0x000286a4
   1c1f8:	0001beed 	.word	0x0001beed
   1c1fc:	0001be95 	.word	0x0001be95
   1c200:	0001bf5d 	.word	0x0001bf5d

0001c204 <AttHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1c204:	b500      	push	{lr}
   1c206:	b083      	sub	sp, #12
   1c208:	4603      	mov	r3, r0
   1c20a:	9100      	str	r1, [sp, #0]
   1c20c:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Handle message */
  if (pMsg != NULL)
   1c210:	9b00      	ldr	r3, [sp, #0]
   1c212:	2b00      	cmp	r3, #0
   1c214:	d00e      	beq.n	1c234 <AttHandler+0x30>
  {
    if (pMsg->event >= ATTS_MSG_START)
   1c216:	9b00      	ldr	r3, [sp, #0]
   1c218:	789b      	ldrb	r3, [r3, #2]
   1c21a:	2b1f      	cmp	r3, #31
   1c21c:	d905      	bls.n	1c22a <AttHandler+0x26>
    {
      /* pass event to server */
      (*attCb.pServer->msgCback)(pMsg);
   1c21e:	4b07      	ldr	r3, [pc, #28]	; (1c23c <AttHandler+0x38>)
   1c220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1c222:	689b      	ldr	r3, [r3, #8]
   1c224:	9800      	ldr	r0, [sp, #0]
   1c226:	4798      	blx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   1c228:	e004      	b.n	1c234 <AttHandler+0x30>
      (*attCb.pClient->msgCback)(pMsg);
   1c22a:	4b04      	ldr	r3, [pc, #16]	; (1c23c <AttHandler+0x38>)
   1c22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1c22e:	689b      	ldr	r3, [r3, #8]
   1c230:	9800      	ldr	r0, [sp, #0]
   1c232:	4798      	blx	r3
}
   1c234:	bf00      	nop
   1c236:	b003      	add	sp, #12
   1c238:	f85d fb04 	ldr.w	pc, [sp], #4
   1c23c:	100050c0 	.word	0x100050c0

0001c240 <AttRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttRegister(attCback_t cback)
{
   1c240:	b500      	push	{lr}
   1c242:	b085      	sub	sp, #20
   1c244:	9003      	str	r0, [sp, #12]
  attCb.cback = cback;
   1c246:	4a0c      	ldr	r2, [pc, #48]	; (1c278 <AttRegister+0x38>)
   1c248:	9b03      	ldr	r3, [sp, #12]
   1c24a:	6753      	str	r3, [r2, #116]	; 0x74

  /* if configured MTU size is larger than maximum RX PDU length */
  if (pAttCfg->mtu > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   1c24c:	f7f2 f91a 	bl	e484 <HciGetMaxRxAclLen>
   1c250:	4603      	mov	r3, r0
   1c252:	3b03      	subs	r3, #3
   1c254:	4a09      	ldr	r2, [pc, #36]	; (1c27c <AttRegister+0x3c>)
   1c256:	6812      	ldr	r2, [r2, #0]
   1c258:	8892      	ldrh	r2, [r2, #4]
   1c25a:	4293      	cmp	r3, r2
   1c25c:	dc07      	bgt.n	1c26e <AttRegister+0x2e>
  {
    /* notify app about MTU misconfiguration */
    attExecCallback(0, DM_ERROR_IND, 0, DM_ERR_ATT_RX_PDU_LEN_EXCEEDED, 0);
   1c25e:	2300      	movs	r3, #0
   1c260:	9300      	str	r3, [sp, #0]
   1c262:	2302      	movs	r3, #2
   1c264:	2200      	movs	r2, #0
   1c266:	2165      	movs	r1, #101	; 0x65
   1c268:	2000      	movs	r0, #0
   1c26a:	f7ff ff57 	bl	1c11c <attExecCallback>
  }
}
   1c26e:	bf00      	nop
   1c270:	b005      	add	sp, #20
   1c272:	f85d fb04 	ldr.w	pc, [sp], #4
   1c276:	bf00      	nop
   1c278:	100050c0 	.word	0x100050c0
   1c27c:	10002bb0 	.word	0x10002bb0

0001c280 <AttConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttConnRegister(dmCback_t cback)
{
   1c280:	b082      	sub	sp, #8
   1c282:	9001      	str	r0, [sp, #4]
  attCb.connCback = cback;
   1c284:	4a02      	ldr	r2, [pc, #8]	; (1c290 <AttConnRegister+0x10>)
   1c286:	9b01      	ldr	r3, [sp, #4]
   1c288:	6793      	str	r3, [r2, #120]	; 0x78
}
   1c28a:	bf00      	nop
   1c28c:	b002      	add	sp, #8
   1c28e:	4770      	bx	lr
   1c290:	100050c0 	.word	0x100050c0

0001c294 <AttGetMtu>:
 *
 *  \return MTU of the connection.
 */
/*************************************************************************************************/
uint16_t AttGetMtu(dmConnId_t connId)
{
   1c294:	b500      	push	{lr}
   1c296:	b083      	sub	sp, #12
   1c298:	4603      	mov	r3, r0
   1c29a:	f88d 3007 	strb.w	r3, [sp, #7]
  return (attCcbByConnId(connId)->mtu);
   1c29e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c2a2:	4618      	mov	r0, r3
   1c2a4:	f7ff fee0 	bl	1c068 <attCcbByConnId>
   1c2a8:	4603      	mov	r3, r0
   1c2aa:	8b5b      	ldrh	r3, [r3, #26]
}
   1c2ac:	4618      	mov	r0, r3
   1c2ae:	b003      	add	sp, #12
   1c2b0:	f85d fb04 	ldr.w	pc, [sp], #4

0001c2b4 <AttMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttMsgFree(void *pMsg, uint8_t opcode)
{
   1c2b4:	b500      	push	{lr}
   1c2b6:	b085      	sub	sp, #20
   1c2b8:	9001      	str	r0, [sp, #4]
   1c2ba:	460b      	mov	r3, r1
   1c2bc:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t  hdrLen;

  WSF_ASSERT((opcode == ATT_PDU_VALUE_IND) || (opcode == ATT_PDU_VALUE_NTF));

  switch (opcode)
   1c2c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1c2c4:	2b1b      	cmp	r3, #27
   1c2c6:	d001      	beq.n	1c2cc <AttMsgFree+0x18>
   1c2c8:	2b1d      	cmp	r3, #29
   1c2ca:	d103      	bne.n	1c2d4 <AttMsgFree+0x20>
  {
    case ATT_PDU_VALUE_IND:
    case ATT_PDU_VALUE_NTF:
      hdrLen = ATT_VALUE_IND_NTF_BUF_LEN;
   1c2cc:	230b      	movs	r3, #11
   1c2ce:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c2d2:	e003      	b.n	1c2dc <AttMsgFree+0x28>

    default:
      hdrLen = 0;
   1c2d4:	2300      	movs	r3, #0
   1c2d6:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   1c2da:	bf00      	nop
  }

  WsfMsgFree(((uint8_t *)pMsg) - hdrLen);
   1c2dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c2e0:	425b      	negs	r3, r3
   1c2e2:	9a01      	ldr	r2, [sp, #4]
   1c2e4:	4413      	add	r3, r2
   1c2e6:	4618      	mov	r0, r3
   1c2e8:	f003 fb1c 	bl	1f924 <WsfMsgFree>
}
   1c2ec:	bf00      	nop
   1c2ee:	b005      	add	sp, #20
   1c2f0:	f85d fb04 	ldr.w	pc, [sp], #4

0001c2f4 <__NVIC_EnableIRQ>:
{
   1c2f4:	b082      	sub	sp, #8
   1c2f6:	4603      	mov	r3, r0
   1c2f8:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   1c2fc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1c300:	2b00      	cmp	r3, #0
   1c302:	db0c      	blt.n	1c31e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c304:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c308:	f003 021f 	and.w	r2, r3, #31
   1c30c:	4905      	ldr	r1, [pc, #20]	; (1c324 <__NVIC_EnableIRQ+0x30>)
   1c30e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1c312:	095b      	lsrs	r3, r3, #5
   1c314:	2001      	movs	r0, #1
   1c316:	fa00 f202 	lsl.w	r2, r0, r2
   1c31a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1c31e:	bf00      	nop
   1c320:	b002      	add	sp, #8
   1c322:	4770      	bx	lr
   1c324:	e000e100 	.word	0xe000e100

0001c328 <__NVIC_SetPriority>:
{
   1c328:	b082      	sub	sp, #8
   1c32a:	4603      	mov	r3, r0
   1c32c:	9100      	str	r1, [sp, #0]
   1c32e:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   1c332:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1c336:	2b00      	cmp	r3, #0
   1c338:	db0a      	blt.n	1c350 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c33a:	9b00      	ldr	r3, [sp, #0]
   1c33c:	b2da      	uxtb	r2, r3
   1c33e:	490c      	ldr	r1, [pc, #48]	; (1c370 <__NVIC_SetPriority+0x48>)
   1c340:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   1c344:	0152      	lsls	r2, r2, #5
   1c346:	b2d2      	uxtb	r2, r2
   1c348:	440b      	add	r3, r1
   1c34a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   1c34e:	e00b      	b.n	1c368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c350:	9b00      	ldr	r3, [sp, #0]
   1c352:	b2da      	uxtb	r2, r3
   1c354:	4907      	ldr	r1, [pc, #28]	; (1c374 <__NVIC_SetPriority+0x4c>)
   1c356:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c35a:	f003 030f 	and.w	r3, r3, #15
   1c35e:	3b04      	subs	r3, #4
   1c360:	0152      	lsls	r2, r2, #5
   1c362:	b2d2      	uxtb	r2, r2
   1c364:	440b      	add	r3, r1
   1c366:	761a      	strb	r2, [r3, #24]
}
   1c368:	bf00      	nop
   1c36a:	b002      	add	sp, #8
   1c36c:	4770      	bx	lr
   1c36e:	bf00      	nop
   1c370:	e000e100 	.word	0xe000e100
   1c374:	e000ed00 	.word	0xe000ed00

0001c378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1c378:	b084      	sub	sp, #16
   1c37a:	9003      	str	r0, [sp, #12]
   1c37c:	9102      	str	r1, [sp, #8]
   1c37e:	9201      	str	r2, [sp, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   1c380:	9b03      	ldr	r3, [sp, #12]
   1c382:	3b04      	subs	r3, #4
   1c384:	9303      	str	r3, [sp, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1c386:	9b03      	ldr	r3, [sp, #12]
   1c388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1c38c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c38e:	9b03      	ldr	r3, [sp, #12]
   1c390:	3b04      	subs	r3, #4
   1c392:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   1c394:	9b02      	ldr	r3, [sp, #8]
   1c396:	f023 0201 	bic.w	r2, r3, #1
   1c39a:	9b03      	ldr	r3, [sp, #12]
   1c39c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1c39e:	9b03      	ldr	r3, [sp, #12]
   1c3a0:	3b04      	subs	r3, #4
   1c3a2:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1c3a4:	4a0b      	ldr	r2, [pc, #44]	; (1c3d4 <pxPortInitialiseStack+0x5c>)
   1c3a6:	9b03      	ldr	r3, [sp, #12]
   1c3a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1c3aa:	9b03      	ldr	r3, [sp, #12]
   1c3ac:	3b14      	subs	r3, #20
   1c3ae:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1c3b0:	9a01      	ldr	r2, [sp, #4]
   1c3b2:	9b03      	ldr	r3, [sp, #12]
   1c3b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   1c3b6:	9b03      	ldr	r3, [sp, #12]
   1c3b8:	3b04      	subs	r3, #4
   1c3ba:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   1c3bc:	9b03      	ldr	r3, [sp, #12]
   1c3be:	f06f 0202 	mvn.w	r2, #2
   1c3c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   1c3c4:	9b03      	ldr	r3, [sp, #12]
   1c3c6:	3b20      	subs	r3, #32
   1c3c8:	9303      	str	r3, [sp, #12]

	return pxTopOfStack;
   1c3ca:	9b03      	ldr	r3, [sp, #12]
}
   1c3cc:	4618      	mov	r0, r3
   1c3ce:	b004      	add	sp, #16
   1c3d0:	4770      	bx	lr
   1c3d2:	bf00      	nop
   1c3d4:	0001c3d9 	.word	0x0001c3d9

0001c3d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1c3d8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
   1c3da:	2300      	movs	r3, #0
   1c3dc:	9300      	str	r3, [sp, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1c3de:	4b0c      	ldr	r3, [pc, #48]	; (1c410 <prvTaskExitError+0x38>)
   1c3e0:	681b      	ldr	r3, [r3, #0]
   1c3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c3e6:	d000      	beq.n	1c3ea <prvTaskExitError+0x12>
   1c3e8:	e7fe      	b.n	1c3e8 <prvTaskExitError+0x10>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   1c3ea:	f04f 0380 	mov.w	r3, #128	; 0x80
   1c3ee:	f383 8811 	msr	BASEPRI, r3
   1c3f2:	f3bf 8f6f 	isb	sy
   1c3f6:	f3bf 8f4f 	dsb	sy
   1c3fa:	9301      	str	r3, [sp, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
   1c3fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   1c3fe:	bf00      	nop
   1c400:	9b00      	ldr	r3, [sp, #0]
   1c402:	2b00      	cmp	r3, #0
   1c404:	d0fc      	beq.n	1c400 <prvTaskExitError+0x28>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1c406:	bf00      	nop
   1c408:	bf00      	nop
   1c40a:	b002      	add	sp, #8
   1c40c:	4770      	bx	lr
   1c40e:	bf00      	nop
   1c410:	10002ba8 	.word	0x10002ba8
	...

0001c420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   1c420:	4b07      	ldr	r3, [pc, #28]	; (1c440 <pxCurrentTCBConst2>)
   1c422:	6819      	ldr	r1, [r3, #0]
   1c424:	6808      	ldr	r0, [r1, #0]
   1c426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c42a:	f380 8809 	msr	PSP, r0
   1c42e:	f3bf 8f6f 	isb	sy
   1c432:	f04f 0000 	mov.w	r0, #0
   1c436:	f380 8811 	msr	BASEPRI, r0
   1c43a:	4770      	bx	lr
   1c43c:	f3af 8000 	nop.w

0001c440 <pxCurrentTCBConst2>:
   1c440:	100077f8 	.word	0x100077f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   1c444:	bf00      	nop
   1c446:	bf00      	nop

0001c448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   1c448:	4808      	ldr	r0, [pc, #32]	; (1c46c <prvPortStartFirstTask+0x24>)
   1c44a:	6800      	ldr	r0, [r0, #0]
   1c44c:	6800      	ldr	r0, [r0, #0]
   1c44e:	f380 8808 	msr	MSP, r0
   1c452:	f04f 0000 	mov.w	r0, #0
   1c456:	f380 8814 	msr	CONTROL, r0
   1c45a:	b662      	cpsie	i
   1c45c:	b661      	cpsie	f
   1c45e:	f3bf 8f4f 	dsb	sy
   1c462:	f3bf 8f6f 	isb	sy
   1c466:	df00      	svc	0
   1c468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   1c46a:	bf00      	nop
   1c46c:	e000ed08 	.word	0xe000ed08

0001c470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1c470:	b500      	push	{lr}
   1c472:	b085      	sub	sp, #20
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   1c474:	4b39      	ldr	r3, [pc, #228]	; (1c55c <xPortStartScheduler+0xec>)
   1c476:	681b      	ldr	r3, [r3, #0]
   1c478:	4a39      	ldr	r2, [pc, #228]	; (1c560 <xPortStartScheduler+0xf0>)
   1c47a:	4293      	cmp	r3, r2
   1c47c:	d100      	bne.n	1c480 <xPortStartScheduler+0x10>
   1c47e:	e7fe      	b.n	1c47e <xPortStartScheduler+0xe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   1c480:	4b36      	ldr	r3, [pc, #216]	; (1c55c <xPortStartScheduler+0xec>)
   1c482:	681b      	ldr	r3, [r3, #0]
   1c484:	4a37      	ldr	r2, [pc, #220]	; (1c564 <xPortStartScheduler+0xf4>)
   1c486:	4293      	cmp	r3, r2
   1c488:	d100      	bne.n	1c48c <xPortStartScheduler+0x1c>
   1c48a:	e7fe      	b.n	1c48a <xPortStartScheduler+0x1a>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   1c48c:	4b36      	ldr	r3, [pc, #216]	; (1c568 <xPortStartScheduler+0xf8>)
   1c48e:	9303      	str	r3, [sp, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   1c490:	9b03      	ldr	r3, [sp, #12]
   1c492:	781b      	ldrb	r3, [r3, #0]
   1c494:	b2db      	uxtb	r3, r3
   1c496:	9302      	str	r3, [sp, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   1c498:	9b03      	ldr	r3, [sp, #12]
   1c49a:	22ff      	movs	r2, #255	; 0xff
   1c49c:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   1c49e:	9b03      	ldr	r3, [sp, #12]
   1c4a0:	781b      	ldrb	r3, [r3, #0]
   1c4a2:	b2db      	uxtb	r3, r3
   1c4a4:	f88d 3007 	strb.w	r3, [sp, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   1c4a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c4ac:	b2db      	uxtb	r3, r3
   1c4ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1c4b2:	b2da      	uxtb	r2, r3
   1c4b4:	4b2d      	ldr	r3, [pc, #180]	; (1c56c <xPortStartScheduler+0xfc>)
   1c4b6:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   1c4b8:	4b2d      	ldr	r3, [pc, #180]	; (1c570 <xPortStartScheduler+0x100>)
   1c4ba:	2207      	movs	r2, #7
   1c4bc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1c4be:	e00b      	b.n	1c4d8 <xPortStartScheduler+0x68>
		{
			ulMaxPRIGROUPValue--;
   1c4c0:	4b2b      	ldr	r3, [pc, #172]	; (1c570 <xPortStartScheduler+0x100>)
   1c4c2:	681b      	ldr	r3, [r3, #0]
   1c4c4:	3b01      	subs	r3, #1
   1c4c6:	4a2a      	ldr	r2, [pc, #168]	; (1c570 <xPortStartScheduler+0x100>)
   1c4c8:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   1c4ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c4ce:	b2db      	uxtb	r3, r3
   1c4d0:	005b      	lsls	r3, r3, #1
   1c4d2:	b2db      	uxtb	r3, r3
   1c4d4:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1c4d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c4dc:	b2db      	uxtb	r3, r3
   1c4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1c4e2:	2b80      	cmp	r3, #128	; 0x80
   1c4e4:	d0ec      	beq.n	1c4c0 <xPortStartScheduler+0x50>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   1c4e6:	4b22      	ldr	r3, [pc, #136]	; (1c570 <xPortStartScheduler+0x100>)
   1c4e8:	681b      	ldr	r3, [r3, #0]
   1c4ea:	f1c3 0307 	rsb	r3, r3, #7
   1c4ee:	2b03      	cmp	r3, #3
   1c4f0:	d000      	beq.n	1c4f4 <xPortStartScheduler+0x84>
   1c4f2:	e7fe      	b.n	1c4f2 <xPortStartScheduler+0x82>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   1c4f4:	4b1e      	ldr	r3, [pc, #120]	; (1c570 <xPortStartScheduler+0x100>)
   1c4f6:	681b      	ldr	r3, [r3, #0]
   1c4f8:	021b      	lsls	r3, r3, #8
   1c4fa:	4a1d      	ldr	r2, [pc, #116]	; (1c570 <xPortStartScheduler+0x100>)
   1c4fc:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   1c4fe:	4b1c      	ldr	r3, [pc, #112]	; (1c570 <xPortStartScheduler+0x100>)
   1c500:	681b      	ldr	r3, [r3, #0]
   1c502:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   1c506:	4a1a      	ldr	r2, [pc, #104]	; (1c570 <xPortStartScheduler+0x100>)
   1c508:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1c50a:	9b02      	ldr	r3, [sp, #8]
   1c50c:	b2da      	uxtb	r2, r3
   1c50e:	9b03      	ldr	r3, [sp, #12]
   1c510:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   1c512:	4b18      	ldr	r3, [pc, #96]	; (1c574 <xPortStartScheduler+0x104>)
   1c514:	681b      	ldr	r3, [r3, #0]
   1c516:	4a17      	ldr	r2, [pc, #92]	; (1c574 <xPortStartScheduler+0x104>)
   1c518:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   1c51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   1c51e:	4b15      	ldr	r3, [pc, #84]	; (1c574 <xPortStartScheduler+0x104>)
   1c520:	681b      	ldr	r3, [r3, #0]
   1c522:	4a14      	ldr	r2, [pc, #80]	; (1c574 <xPortStartScheduler+0x104>)
   1c524:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   1c528:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   1c52a:	f000 fa0f 	bl	1c94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1c52e:	4b12      	ldr	r3, [pc, #72]	; (1c578 <xPortStartScheduler+0x108>)
   1c530:	2200      	movs	r2, #0
   1c532:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   1c534:	f000 f8ba 	bl	1c6ac <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   1c538:	4b10      	ldr	r3, [pc, #64]	; (1c57c <xPortStartScheduler+0x10c>)
   1c53a:	681b      	ldr	r3, [r3, #0]
   1c53c:	4a0f      	ldr	r2, [pc, #60]	; (1c57c <xPortStartScheduler+0x10c>)
   1c53e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1c542:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   1c544:	f7ff ff80 	bl	1c448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1c548:	f006 fbde 	bl	22d08 <vTaskSwitchContext>
	prvTaskExitError();
   1c54c:	f7ff ff44 	bl	1c3d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
   1c550:	2300      	movs	r3, #0
}
   1c552:	4618      	mov	r0, r3
   1c554:	b005      	add	sp, #20
   1c556:	f85d fb04 	ldr.w	pc, [sp], #4
   1c55a:	bf00      	nop
   1c55c:	e000ed00 	.word	0xe000ed00
   1c560:	410fc271 	.word	0x410fc271
   1c564:	410fc270 	.word	0x410fc270
   1c568:	e000e400 	.word	0xe000e400
   1c56c:	10005144 	.word	0x10005144
   1c570:	10005148 	.word	0x10005148
   1c574:	e000ed20 	.word	0xe000ed20
   1c578:	10002ba8 	.word	0x10002ba8
   1c57c:	e000ef34 	.word	0xe000ef34

0001c580 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1c580:	b082      	sub	sp, #8
	__asm volatile
   1c582:	f04f 0380 	mov.w	r3, #128	; 0x80
   1c586:	f383 8811 	msr	BASEPRI, r3
   1c58a:	f3bf 8f6f 	isb	sy
   1c58e:	f3bf 8f4f 	dsb	sy
   1c592:	9301      	str	r3, [sp, #4]
}
   1c594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   1c596:	4b09      	ldr	r3, [pc, #36]	; (1c5bc <vPortEnterCritical+0x3c>)
   1c598:	681b      	ldr	r3, [r3, #0]
   1c59a:	3301      	adds	r3, #1
   1c59c:	4a07      	ldr	r2, [pc, #28]	; (1c5bc <vPortEnterCritical+0x3c>)
   1c59e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   1c5a0:	4b06      	ldr	r3, [pc, #24]	; (1c5bc <vPortEnterCritical+0x3c>)
   1c5a2:	681b      	ldr	r3, [r3, #0]
   1c5a4:	2b01      	cmp	r3, #1
   1c5a6:	d105      	bne.n	1c5b4 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   1c5a8:	4b05      	ldr	r3, [pc, #20]	; (1c5c0 <vPortEnterCritical+0x40>)
   1c5aa:	681b      	ldr	r3, [r3, #0]
   1c5ac:	b2db      	uxtb	r3, r3
   1c5ae:	2b00      	cmp	r3, #0
   1c5b0:	d000      	beq.n	1c5b4 <vPortEnterCritical+0x34>
   1c5b2:	e7fe      	b.n	1c5b2 <vPortEnterCritical+0x32>
	}
}
   1c5b4:	bf00      	nop
   1c5b6:	b002      	add	sp, #8
   1c5b8:	4770      	bx	lr
   1c5ba:	bf00      	nop
   1c5bc:	10002ba8 	.word	0x10002ba8
   1c5c0:	e000ed04 	.word	0xe000ed04

0001c5c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1c5c4:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting );
   1c5c6:	4b0b      	ldr	r3, [pc, #44]	; (1c5f4 <vPortExitCritical+0x30>)
   1c5c8:	681b      	ldr	r3, [r3, #0]
   1c5ca:	2b00      	cmp	r3, #0
   1c5cc:	d100      	bne.n	1c5d0 <vPortExitCritical+0xc>
   1c5ce:	e7fe      	b.n	1c5ce <vPortExitCritical+0xa>
	uxCriticalNesting--;
   1c5d0:	4b08      	ldr	r3, [pc, #32]	; (1c5f4 <vPortExitCritical+0x30>)
   1c5d2:	681b      	ldr	r3, [r3, #0]
   1c5d4:	3b01      	subs	r3, #1
   1c5d6:	4a07      	ldr	r2, [pc, #28]	; (1c5f4 <vPortExitCritical+0x30>)
   1c5d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   1c5da:	4b06      	ldr	r3, [pc, #24]	; (1c5f4 <vPortExitCritical+0x30>)
   1c5dc:	681b      	ldr	r3, [r3, #0]
   1c5de:	2b00      	cmp	r3, #0
   1c5e0:	d105      	bne.n	1c5ee <vPortExitCritical+0x2a>
   1c5e2:	2300      	movs	r3, #0
   1c5e4:	9301      	str	r3, [sp, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   1c5e6:	9b01      	ldr	r3, [sp, #4]
   1c5e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
   1c5ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
   1c5ee:	bf00      	nop
   1c5f0:	b002      	add	sp, #8
   1c5f2:	4770      	bx	lr
   1c5f4:	10002ba8 	.word	0x10002ba8
	...

0001c600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1c600:	f3ef 8009 	mrs	r0, PSP
   1c604:	f3bf 8f6f 	isb	sy
   1c608:	4b15      	ldr	r3, [pc, #84]	; (1c660 <pxCurrentTCBConst>)
   1c60a:	681a      	ldr	r2, [r3, #0]
   1c60c:	f01e 0f10 	tst.w	lr, #16
   1c610:	bf08      	it	eq
   1c612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   1c616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c61a:	6010      	str	r0, [r2, #0]
   1c61c:	e92d 0009 	stmdb	sp!, {r0, r3}
   1c620:	f04f 0080 	mov.w	r0, #128	; 0x80
   1c624:	f380 8811 	msr	BASEPRI, r0
   1c628:	f3bf 8f4f 	dsb	sy
   1c62c:	f3bf 8f6f 	isb	sy
   1c630:	f006 fb6a 	bl	22d08 <vTaskSwitchContext>
   1c634:	f04f 0000 	mov.w	r0, #0
   1c638:	f380 8811 	msr	BASEPRI, r0
   1c63c:	bc09      	pop	{r0, r3}
   1c63e:	6819      	ldr	r1, [r3, #0]
   1c640:	6808      	ldr	r0, [r1, #0]
   1c642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c646:	f01e 0f10 	tst.w	lr, #16
   1c64a:	bf08      	it	eq
   1c64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   1c650:	f380 8809 	msr	PSP, r0
   1c654:	f3bf 8f6f 	isb	sy
   1c658:	4770      	bx	lr
   1c65a:	bf00      	nop
   1c65c:	f3af 8000 	nop.w

0001c660 <pxCurrentTCBConst>:
   1c660:	100077f8 	.word	0x100077f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   1c664:	bf00      	nop
   1c666:	bf00      	nop

0001c668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1c668:	b500      	push	{lr}
   1c66a:	b083      	sub	sp, #12
	__asm volatile
   1c66c:	f04f 0380 	mov.w	r3, #128	; 0x80
   1c670:	f383 8811 	msr	BASEPRI, r3
   1c674:	f3bf 8f6f 	isb	sy
   1c678:	f3bf 8f4f 	dsb	sy
   1c67c:	9301      	str	r3, [sp, #4]
}
   1c67e:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1c680:	f006 faa4 	bl	22bcc <xTaskIncrementTick>
   1c684:	4603      	mov	r3, r0
   1c686:	2b00      	cmp	r3, #0
   1c688:	d003      	beq.n	1c692 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   1c68a:	4b07      	ldr	r3, [pc, #28]	; (1c6a8 <SysTick_Handler+0x40>)
   1c68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c690:	601a      	str	r2, [r3, #0]
   1c692:	2300      	movs	r3, #0
   1c694:	9300      	str	r3, [sp, #0]
	__asm volatile
   1c696:	9b00      	ldr	r3, [sp, #0]
   1c698:	f383 8811 	msr	BASEPRI, r3
}
   1c69c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
   1c69e:	bf00      	nop
   1c6a0:	b003      	add	sp, #12
   1c6a2:	f85d fb04 	ldr.w	pc, [sp], #4
   1c6a6:	bf00      	nop
   1c6a8:	e000ed04 	.word	0xe000ed04

0001c6ac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   1c6ac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1c6bc <vPortEnableVFP+0x10>
   1c6b0:	6801      	ldr	r1, [r0, #0]
   1c6b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c6b6:	6001      	str	r1, [r0, #0]
   1c6b8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   1c6ba:	bf00      	nop
   1c6bc:	e000ed88 	.word	0xe000ed88

0001c6c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   1c6c0:	b082      	sub	sp, #8
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   1c6c2:	f3ef 8305 	mrs	r3, IPSR
   1c6c6:	9301      	str	r3, [sp, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   1c6c8:	9b01      	ldr	r3, [sp, #4]
   1c6ca:	2b0f      	cmp	r3, #15
   1c6cc:	d90c      	bls.n	1c6e8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   1c6ce:	4a0c      	ldr	r2, [pc, #48]	; (1c700 <vPortValidateInterruptPriority+0x40>)
   1c6d0:	9b01      	ldr	r3, [sp, #4]
   1c6d2:	4413      	add	r3, r2
   1c6d4:	781b      	ldrb	r3, [r3, #0]
   1c6d6:	f88d 3003 	strb.w	r3, [sp, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   1c6da:	4b0a      	ldr	r3, [pc, #40]	; (1c704 <vPortValidateInterruptPriority+0x44>)
   1c6dc:	781b      	ldrb	r3, [r3, #0]
   1c6de:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1c6e2:	429a      	cmp	r2, r3
   1c6e4:	d200      	bcs.n	1c6e8 <vPortValidateInterruptPriority+0x28>
   1c6e6:	e7fe      	b.n	1c6e6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   1c6e8:	4b07      	ldr	r3, [pc, #28]	; (1c708 <vPortValidateInterruptPriority+0x48>)
   1c6ea:	681b      	ldr	r3, [r3, #0]
   1c6ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   1c6f0:	4b06      	ldr	r3, [pc, #24]	; (1c70c <vPortValidateInterruptPriority+0x4c>)
   1c6f2:	681b      	ldr	r3, [r3, #0]
   1c6f4:	429a      	cmp	r2, r3
   1c6f6:	d900      	bls.n	1c6fa <vPortValidateInterruptPriority+0x3a>
   1c6f8:	e7fe      	b.n	1c6f8 <vPortValidateInterruptPriority+0x38>
	}
   1c6fa:	bf00      	nop
   1c6fc:	b002      	add	sp, #8
   1c6fe:	4770      	bx	lr
   1c700:	e000e3f0 	.word	0xe000e3f0
   1c704:	10005144 	.word	0x10005144
   1c708:	e000ed0c 	.word	0xe000ed0c
   1c70c:	10005148 	.word	0x10005148

0001c710 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   1c710:	b500      	push	{lr}
   1c712:	b089      	sub	sp, #36	; 0x24
   1c714:	9001      	str	r0, [sp, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   1c716:	4b3e      	ldr	r3, [pc, #248]	; (1c810 <vPortSuppressTicksAndSleep+0x100>)
   1c718:	681b      	ldr	r3, [r3, #0]
   1c71a:	9a01      	ldr	r2, [sp, #4]
   1c71c:	429a      	cmp	r2, r3
   1c71e:	d902      	bls.n	1c726 <vPortSuppressTicksAndSleep+0x16>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
   1c720:	4b3b      	ldr	r3, [pc, #236]	; (1c810 <vPortSuppressTicksAndSleep+0x100>)
   1c722:	681b      	ldr	r3, [r3, #0]
   1c724:	9301      	str	r3, [sp, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1c726:	9b01      	ldr	r3, [sp, #4]
   1c728:	3b01      	subs	r3, #1
   1c72a:	4a3a      	ldr	r2, [pc, #232]	; (1c814 <vPortSuppressTicksAndSleep+0x104>)
   1c72c:	6812      	ldr	r2, [r2, #0]
   1c72e:	fb02 f303 	mul.w	r3, r2, r3
   1c732:	9307      	str	r3, [sp, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   1c734:	b672      	cpsid	i
	__asm volatile( "dsb" );
   1c736:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1c73a:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    uint32_t curTime = am_hal_stimer_counter_get();
   1c73e:	f00b f9f5 	bl	27b2c <am_hal_stimer_counter_get>
   1c742:	9006      	str	r0, [sp, #24]
    gF_stimerGetHistory[gF_stimerGetHistoryCount][1] = curTime;
    gF_stimerGetHistory[gF_stimerGetHistoryCount][2] = AM_REGVAL(AM_REG_STIMER_COMPARE(0, 0));
    gF_stimerGetHistory[gF_stimerGetHistoryCount][3] = gF_stimerHistoryCount;
    gF_stimerGetHistoryCount++;
#endif
    elapsed_time = curTime - g_lastSTimerVal;
   1c744:	4b34      	ldr	r3, [pc, #208]	; (1c818 <vPortSuppressTicksAndSleep+0x108>)
   1c746:	681b      	ldr	r3, [r3, #0]
   1c748:	9a06      	ldr	r2, [sp, #24]
   1c74a:	1ad3      	subs	r3, r2, r3
   1c74c:	9305      	str	r3, [sp, #20]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   1c74e:	f006 fcf9 	bl	23144 <eTaskConfirmSleepModeStatus>
   1c752:	4603      	mov	r3, r0
   1c754:	2b00      	cmp	r3, #0
   1c756:	d006      	beq.n	1c766 <vPortSuppressTicksAndSleep+0x56>
   1c758:	4b2e      	ldr	r3, [pc, #184]	; (1c814 <vPortSuppressTicksAndSleep+0x104>)
   1c75a:	681a      	ldr	r2, [r3, #0]
   1c75c:	9b05      	ldr	r3, [sp, #20]
   1c75e:	4413      	add	r3, r2
   1c760:	9a07      	ldr	r2, [sp, #28]
   1c762:	429a      	cmp	r2, r3
   1c764:	d201      	bcs.n	1c76a <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   1c766:	b662      	cpsie	i
   1c768:	e04d      	b.n	1c806 <vPortSuppressTicksAndSleep+0xf6>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
   1c76a:	9a07      	ldr	r2, [sp, #28]
   1c76c:	9b05      	ldr	r3, [sp, #20]
   1c76e:	1ad3      	subs	r3, r2, r3
   1c770:	9307      	str	r3, [sp, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   1c772:	9907      	ldr	r1, [sp, #28]
   1c774:	2000      	movs	r0, #0
   1c776:	f00b f9e9 	bl	27b4c <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
        am_hal_stimer_compare_delta_set(1, ulReloadValue+1);
   1c77a:	9b07      	ldr	r3, [sp, #28]
   1c77c:	3301      	adds	r3, #1
   1c77e:	4619      	mov	r1, r3
   1c780:	2001      	movs	r0, #1
   1c782:	f00b f9e3 	bl	27b4c <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
   1c786:	9b01      	ldr	r3, [sp, #4]
   1c788:	9304      	str	r3, [sp, #16]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   1c78a:	9804      	ldr	r0, [sp, #16]
   1c78c:	f7fa fbd7 	bl	16f3e <am_freertos_sleep>
   1c790:	9004      	str	r0, [sp, #16]

		if( xModifiableIdleTime > 0 )
   1c792:	9b04      	ldr	r3, [sp, #16]
   1c794:	2b00      	cmp	r3, #0
   1c796:	d004      	beq.n	1c7a2 <vPortSuppressTicksAndSleep+0x92>
		{
			__asm volatile( "dsb" );
   1c798:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   1c79c:	bf30      	wfi
			__asm volatile( "isb" );
   1c79e:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   1c7a2:	9801      	ldr	r0, [sp, #4]
   1c7a4:	f7fa fbd6 	bl	16f54 <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
   1c7a8:	f00b f9c0 	bl	27b2c <am_hal_stimer_counter_get>
   1c7ac:	9003      	str	r0, [sp, #12]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   1c7ae:	9b03      	ldr	r3, [sp, #12]
   1c7b0:	4a19      	ldr	r2, [pc, #100]	; (1c818 <vPortSuppressTicksAndSleep+0x108>)
   1c7b2:	6812      	ldr	r2, [r2, #0]
   1c7b4:	1a9b      	subs	r3, r3, r2
   1c7b6:	9302      	str	r3, [sp, #8]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   1c7b8:	4b16      	ldr	r3, [pc, #88]	; (1c814 <vPortSuppressTicksAndSleep+0x104>)
   1c7ba:	681a      	ldr	r2, [r3, #0]
   1c7bc:	9b02      	ldr	r3, [sp, #8]
   1c7be:	fbb3 f1f2 	udiv	r1, r3, r2
   1c7c2:	fb01 f202 	mul.w	r2, r1, r2
   1c7c6:	1a9b      	subs	r3, r3, r2
   1c7c8:	9a03      	ldr	r2, [sp, #12]
   1c7ca:	1ad3      	subs	r3, r2, r3
   1c7cc:	4a12      	ldr	r2, [pc, #72]	; (1c818 <vPortSuppressTicksAndSleep+0x108>)
   1c7ce:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
   1c7d0:	4b10      	ldr	r3, [pc, #64]	; (1c814 <vPortSuppressTicksAndSleep+0x104>)
   1c7d2:	681b      	ldr	r3, [r3, #0]
   1c7d4:	9a02      	ldr	r2, [sp, #8]
   1c7d6:	fbb2 f3f3 	udiv	r3, r2, r3
   1c7da:	9302      	str	r3, [sp, #8]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
   1c7dc:	9802      	ldr	r0, [sp, #8]
   1c7de:	f006 f9dd 	bl	22b9c <vTaskStepTick>
		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
#ifdef AM_FREERTOS_STIMER_BACKUP
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   1c7e2:	2003      	movs	r0, #3
   1c7e4:	f00b fa18 	bl	27c18 <am_hal_stimer_int_clear>
#else
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
#endif
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   1c7e8:	4b0a      	ldr	r3, [pc, #40]	; (1c814 <vPortSuppressTicksAndSleep+0x104>)
   1c7ea:	681b      	ldr	r3, [r3, #0]
   1c7ec:	4619      	mov	r1, r3
   1c7ee:	2000      	movs	r0, #0
   1c7f0:	f00b f9ac 	bl	27b4c <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
        am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   1c7f4:	4b07      	ldr	r3, [pc, #28]	; (1c814 <vPortSuppressTicksAndSleep+0x104>)
   1c7f6:	681b      	ldr	r3, [r3, #0]
   1c7f8:	3301      	adds	r3, #1
   1c7fa:	4619      	mov	r1, r3
   1c7fc:	2001      	movs	r0, #1
   1c7fe:	f00b f9a5 	bl	27b4c <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   1c802:	b662      	cpsie	i

	}
}
   1c804:	bf00      	nop
   1c806:	bf00      	nop
   1c808:	b009      	add	sp, #36	; 0x24
   1c80a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c80e:	bf00      	nop
   1c810:	10005150 	.word	0x10005150
   1c814:	1000514c 	.word	0x1000514c
   1c818:	10005140 	.word	0x10005140

0001c81c <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   1c81c:	b500      	push	{lr}
   1c81e:	b08b      	sub	sp, #44	; 0x2c
   1c820:	9001      	str	r0, [sp, #4]
    uint32_t remainder = 0;
   1c822:	2300      	movs	r3, #0
   1c824:	9307      	str	r3, [sp, #28]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
   1c826:	2300      	movs	r3, #0
   1c828:	9308      	str	r3, [sp, #32]

    curSTimer = am_hal_stimer_counter_get();
   1c82a:	f00b f97f 	bl	27b2c <am_hal_stimer_counter_get>
   1c82e:	9006      	str	r0, [sp, #24]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   1c830:	4b2a      	ldr	r3, [pc, #168]	; (1c8dc <xPortStimerTickHandler+0xc0>)
   1c832:	681a      	ldr	r2, [r3, #0]
   1c834:	9b01      	ldr	r3, [sp, #4]
   1c836:	1ad3      	subs	r3, r2, r3
   1c838:	4619      	mov	r1, r3
   1c83a:	2000      	movs	r0, #0
   1c83c:	f00b f986 	bl	27b4c <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   1c840:	4b26      	ldr	r3, [pc, #152]	; (1c8dc <xPortStimerTickHandler+0xc0>)
   1c842:	681a      	ldr	r2, [r3, #0]
   1c844:	9b01      	ldr	r3, [sp, #4]
   1c846:	1ad3      	subs	r3, r2, r3
   1c848:	3301      	adds	r3, #1
   1c84a:	4619      	mov	r1, r3
   1c84c:	2001      	movs	r0, #1
   1c84e:	f00b f97d 	bl	27b4c <am_hal_stimer_compare_delta_set>
#endif

    timerCounts = curSTimer - g_lastSTimerVal;
   1c852:	4b23      	ldr	r3, [pc, #140]	; (1c8e0 <xPortStimerTickHandler+0xc4>)
   1c854:	681b      	ldr	r3, [r3, #0]
   1c856:	9a06      	ldr	r2, [sp, #24]
   1c858:	1ad3      	subs	r3, r2, r3
   1c85a:	9305      	str	r3, [sp, #20]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   1c85c:	4b1f      	ldr	r3, [pc, #124]	; (1c8dc <xPortStimerTickHandler+0xc0>)
   1c85e:	681b      	ldr	r3, [r3, #0]
   1c860:	9a05      	ldr	r2, [sp, #20]
   1c862:	fbb2 f3f3 	udiv	r3, r2, r3
   1c866:	9309      	str	r3, [sp, #36]	; 0x24
    remainder = timerCounts % ulTimerCountsForOneTick;
   1c868:	4b1c      	ldr	r3, [pc, #112]	; (1c8dc <xPortStimerTickHandler+0xc0>)
   1c86a:	681a      	ldr	r2, [r3, #0]
   1c86c:	9b05      	ldr	r3, [sp, #20]
   1c86e:	fbb3 f1f2 	udiv	r1, r3, r2
   1c872:	fb01 f202 	mul.w	r2, r1, r2
   1c876:	1a9b      	subs	r3, r3, r2
   1c878:	9307      	str	r3, [sp, #28]
    g_lastSTimerVal = curSTimer - remainder;
   1c87a:	9a06      	ldr	r2, [sp, #24]
   1c87c:	9b07      	ldr	r3, [sp, #28]
   1c87e:	1ad3      	subs	r3, r2, r3
   1c880:	4a17      	ldr	r2, [pc, #92]	; (1c8e0 <xPortStimerTickHandler+0xc4>)
   1c882:	6013      	str	r3, [r2, #0]
	__asm volatile
   1c884:	f3ef 8211 	mrs	r2, BASEPRI
   1c888:	f04f 0380 	mov.w	r3, #128	; 0x80
   1c88c:	f383 8811 	msr	BASEPRI, r3
   1c890:	f3bf 8f6f 	isb	sy
   1c894:	f3bf 8f4f 	dsb	sy
   1c898:	9204      	str	r2, [sp, #16]
   1c89a:	9303      	str	r3, [sp, #12]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   1c89c:	e008      	b.n	1c8b0 <xPortStimerTickHandler+0x94>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   1c89e:	f006 f995 	bl	22bcc <xTaskIncrementTick>
   1c8a2:	4603      	mov	r3, r0
   1c8a4:	2b00      	cmp	r3, #0
   1c8a6:	d101      	bne.n	1c8ac <xPortStimerTickHandler+0x90>
   1c8a8:	9b08      	ldr	r3, [sp, #32]
   1c8aa:	e000      	b.n	1c8ae <xPortStimerTickHandler+0x92>
   1c8ac:	2301      	movs	r3, #1
   1c8ae:	9308      	str	r3, [sp, #32]
        while (numTicksElapsed--)
   1c8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c8b2:	1e5a      	subs	r2, r3, #1
   1c8b4:	9209      	str	r2, [sp, #36]	; 0x24
   1c8b6:	2b00      	cmp	r3, #0
   1c8b8:	d1f1      	bne.n	1c89e <xPortStimerTickHandler+0x82>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   1c8ba:	9b08      	ldr	r3, [sp, #32]
   1c8bc:	2b00      	cmp	r3, #0
   1c8be:	d003      	beq.n	1c8c8 <xPortStimerTickHandler+0xac>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   1c8c0:	4b08      	ldr	r3, [pc, #32]	; (1c8e4 <xPortStimerTickHandler+0xc8>)
   1c8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c8c6:	601a      	str	r2, [r3, #0]
   1c8c8:	2300      	movs	r3, #0
   1c8ca:	9302      	str	r3, [sp, #8]
	__asm volatile
   1c8cc:	9b02      	ldr	r3, [sp, #8]
   1c8ce:	f383 8811 	msr	BASEPRI, r3
}
   1c8d2:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   1c8d4:	bf00      	nop
   1c8d6:	b00b      	add	sp, #44	; 0x2c
   1c8d8:	f85d fb04 	ldr.w	pc, [sp], #4
   1c8dc:	1000514c 	.word	0x1000514c
   1c8e0:	10005140 	.word	0x10005140
   1c8e4:	e000ed04 	.word	0xe000ed04

0001c8e8 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   1c8e8:	b500      	push	{lr}
   1c8ea:	b083      	sub	sp, #12

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1c8ec:	2000      	movs	r0, #0
   1c8ee:	f00b f999 	bl	27c24 <am_hal_stimer_int_status_get>
   1c8f2:	9001      	str	r0, [sp, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   1c8f4:	9b01      	ldr	r3, [sp, #4]
   1c8f6:	f003 0301 	and.w	r3, r3, #1
   1c8fa:	2b00      	cmp	r3, #0
   1c8fc:	d005      	beq.n	1c90a <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   1c8fe:	2001      	movs	r0, #1
   1c900:	f00b f98a 	bl	27c18 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
   1c904:	2000      	movs	r0, #0
   1c906:	f7ff ff89 	bl	1c81c <xPortStimerTickHandler>
    }
}
   1c90a:	bf00      	nop
   1c90c:	b003      	add	sp, #12
   1c90e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001c914 <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   1c914:	b500      	push	{lr}
   1c916:	b083      	sub	sp, #12

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1c918:	2000      	movs	r0, #0
   1c91a:	f00b f983 	bl	27c24 <am_hal_stimer_int_status_get>
   1c91e:	9001      	str	r0, [sp, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   1c920:	9b01      	ldr	r3, [sp, #4]
   1c922:	f003 0302 	and.w	r3, r3, #2
   1c926:	2b00      	cmp	r3, #0
   1c928:	d00a      	beq.n	1c940 <am_stimer_cmpr1_isr+0x2c>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   1c92a:	2002      	movs	r0, #2
   1c92c:	f00b f974 	bl	27c18 <am_hal_stimer_int_clear>
        gNumCmpB++;
   1c930:	4b05      	ldr	r3, [pc, #20]	; (1c948 <am_stimer_cmpr1_isr+0x34>)
   1c932:	681b      	ldr	r3, [r3, #0]
   1c934:	3301      	adds	r3, #1
   1c936:	4a04      	ldr	r2, [pc, #16]	; (1c948 <am_stimer_cmpr1_isr+0x34>)
   1c938:	6013      	str	r3, [r2, #0]
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
   1c93a:	2001      	movs	r0, #1
   1c93c:	f7ff ff6e 	bl	1c81c <xPortStimerTickHandler>
    }
}
   1c940:	bf00      	nop
   1c942:	b003      	add	sp, #12
   1c944:	f85d fb04 	ldr.w	pc, [sp], #4
   1c948:	10005154 	.word	0x10005154

0001c94c <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   1c94c:	b500      	push	{lr}
   1c94e:	b083      	sub	sp, #12
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   1c950:	4b20      	ldr	r3, [pc, #128]	; (1c9d4 <vPortSetupTimerInterrupt+0x88>)
   1c952:	2220      	movs	r2, #32
   1c954:	601a      	str	r2, [r3, #0]
#ifdef AM_FREERTOS_STIMER_BACKUP
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   1c956:	4b1f      	ldr	r3, [pc, #124]	; (1c9d4 <vPortSetupTimerInterrupt+0x88>)
   1c958:	681b      	ldr	r3, [r3, #0]
   1c95a:	f04f 32ff 	mov.w	r2, #4294967295
   1c95e:	fbb2 f3f3 	udiv	r3, r2, r3
   1c962:	3b01      	subs	r3, #1
   1c964:	4a1c      	ldr	r2, [pc, #112]	; (1c9d8 <vPortSetupTimerInterrupt+0x8c>)
   1c966:	6013      	str	r3, [r2, #0]
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   1c968:	2003      	movs	r0, #3
   1c96a:	f00b f94b 	bl	27c04 <am_hal_stimer_int_enable>
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR0_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   1c96e:	2107      	movs	r1, #7
   1c970:	2017      	movs	r0, #23
   1c972:	f7ff fcd9 	bl	1c328 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
   1c976:	2017      	movs	r0, #23
   1c978:	f7ff fcbc 	bl	1c2f4 <__NVIC_EnableIRQ>
    am_hal_interrupt_priority_set(AM_HAL_INTERRUPT_STIMER_CMPR0, configKERNEL_INTERRUPT_PRIORITY);
    am_hal_interrupt_enable(AM_HAL_INTERRUPT_STIMER_CMPR0);
#endif // AM_CMSIS_REGS
#ifdef AM_FREERTOS_STIMER_BACKUP
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR1_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   1c97c:	2107      	movs	r1, #7
   1c97e:	2018      	movs	r0, #24
   1c980:	f7ff fcd2 	bl	1c328 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR1_IRQn);
   1c984:	2018      	movs	r0, #24
   1c986:	f7ff fcb5 	bl	1c2f4 <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS
#endif
    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   1c98a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1c98e:	f00b f8c3 	bl	27b18 <am_hal_stimer_config>
   1c992:	9001      	str	r0, [sp, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   1c994:	f00b f8ca 	bl	27b2c <am_hal_stimer_counter_get>
   1c998:	4603      	mov	r3, r0
   1c99a:	4a10      	ldr	r2, [pc, #64]	; (1c9dc <vPortSetupTimerInterrupt+0x90>)
   1c99c:	6013      	str	r3, [r2, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   1c99e:	4b0d      	ldr	r3, [pc, #52]	; (1c9d4 <vPortSetupTimerInterrupt+0x88>)
   1c9a0:	681b      	ldr	r3, [r3, #0]
   1c9a2:	4619      	mov	r1, r3
   1c9a4:	2000      	movs	r0, #0
   1c9a6:	f00b f8d1 	bl	27b4c <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   1c9aa:	4b0a      	ldr	r3, [pc, #40]	; (1c9d4 <vPortSetupTimerInterrupt+0x88>)
   1c9ac:	681b      	ldr	r3, [r3, #0]
   1c9ae:	3301      	adds	r3, #1
   1c9b0:	4619      	mov	r1, r3
   1c9b2:	2001      	movs	r0, #1
   1c9b4:	f00b f8ca 	bl	27b4c <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   1c9b8:	9a01      	ldr	r2, [sp, #4]
   1c9ba:	4b09      	ldr	r3, [pc, #36]	; (1c9e0 <vPortSetupTimerInterrupt+0x94>)
   1c9bc:	4013      	ands	r3, r2
   1c9be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   1c9c2:	f043 0303 	orr.w	r3, r3, #3
   1c9c6:	4618      	mov	r0, r3
   1c9c8:	f00b f8a6 	bl	27b18 <am_hal_stimer_config>
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   1c9cc:	bf00      	nop
   1c9ce:	b003      	add	sp, #12
   1c9d0:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9d4:	1000514c 	.word	0x1000514c
   1c9d8:	10005150 	.word	0x10005150
   1c9dc:	10005140 	.word	0x10005140
   1c9e0:	7ffffcf0 	.word	0x7ffffcf0

0001c9e4 <basNoConnActive>:
 *
 *  \return TRUE if no connections active.
 */
/*************************************************************************************************/
static bool_t basNoConnActive(void)
{
   1c9e4:	b082      	sub	sp, #8
  basConn_t     *pConn = basCb.conn;
   1c9e6:	4b0e      	ldr	r3, [pc, #56]	; (1ca20 <basNoConnActive+0x3c>)
   1c9e8:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1c9ea:	2300      	movs	r3, #0
   1c9ec:	f88d 3003 	strb.w	r3, [sp, #3]
   1c9f0:	e00d      	b.n	1ca0e <basNoConnActive+0x2a>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   1c9f2:	9b01      	ldr	r3, [sp, #4]
   1c9f4:	781b      	ldrb	r3, [r3, #0]
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	d001      	beq.n	1c9fe <basNoConnActive+0x1a>
    {
      return FALSE;
   1c9fa:	2300      	movs	r3, #0
   1c9fc:	e00c      	b.n	1ca18 <basNoConnActive+0x34>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1c9fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ca02:	3301      	adds	r3, #1
   1ca04:	f88d 3003 	strb.w	r3, [sp, #3]
   1ca08:	9b01      	ldr	r3, [sp, #4]
   1ca0a:	3303      	adds	r3, #3
   1ca0c:	9301      	str	r3, [sp, #4]
   1ca0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ca12:	2b02      	cmp	r3, #2
   1ca14:	d9ed      	bls.n	1c9f2 <basNoConnActive+0xe>
    }
  }
  return TRUE;
   1ca16:	2301      	movs	r3, #1
}
   1ca18:	4618      	mov	r0, r3
   1ca1a:	b002      	add	sp, #8
   1ca1c:	4770      	bx	lr
   1ca1e:	bf00      	nop
   1ca20:	10005158 	.word	0x10005158

0001ca24 <basSetupToSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basSetupToSend(void)
{
   1ca24:	b082      	sub	sp, #8
  basConn_t     *pConn = basCb.conn;
   1ca26:	4b0e      	ldr	r3, [pc, #56]	; (1ca60 <basSetupToSend+0x3c>)
   1ca28:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1ca2a:	2300      	movs	r3, #0
   1ca2c:	f88d 3003 	strb.w	r3, [sp, #3]
   1ca30:	e00e      	b.n	1ca50 <basSetupToSend+0x2c>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   1ca32:	9b01      	ldr	r3, [sp, #4]
   1ca34:	781b      	ldrb	r3, [r3, #0]
   1ca36:	2b00      	cmp	r3, #0
   1ca38:	d002      	beq.n	1ca40 <basSetupToSend+0x1c>
    {
      pConn->battToSend = TRUE;
   1ca3a:	9b01      	ldr	r3, [sp, #4]
   1ca3c:	2201      	movs	r2, #1
   1ca3e:	705a      	strb	r2, [r3, #1]
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1ca40:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ca44:	3301      	adds	r3, #1
   1ca46:	f88d 3003 	strb.w	r3, [sp, #3]
   1ca4a:	9b01      	ldr	r3, [sp, #4]
   1ca4c:	3303      	adds	r3, #3
   1ca4e:	9301      	str	r3, [sp, #4]
   1ca50:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ca54:	2b02      	cmp	r3, #2
   1ca56:	d9ec      	bls.n	1ca32 <basSetupToSend+0xe>
    }
  }
}
   1ca58:	bf00      	nop
   1ca5a:	bf00      	nop
   1ca5c:	b002      	add	sp, #8
   1ca5e:	4770      	bx	lr
   1ca60:	10005158 	.word	0x10005158

0001ca64 <basFindNextToSend>:
 *
 *  \return Connection control block.
 */
/*************************************************************************************************/
static basConn_t *basFindNextToSend(uint8_t cccIdx)
{
   1ca64:	b500      	push	{lr}
   1ca66:	b085      	sub	sp, #20
   1ca68:	4603      	mov	r3, r0
   1ca6a:	f88d 3007 	strb.w	r3, [sp, #7]
  basConn_t    *pConn = basCb.conn;
   1ca6e:	4b19      	ldr	r3, [pc, #100]	; (1cad4 <basFindNextToSend+0x70>)
   1ca70:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1ca72:	2300      	movs	r3, #0
   1ca74:	f88d 300b 	strb.w	r3, [sp, #11]
   1ca78:	e023      	b.n	1cac2 <basFindNextToSend+0x5e>
  {
    if (pConn->connId != DM_CONN_ID_NONE && pConn->battToSend &&
   1ca7a:	9b03      	ldr	r3, [sp, #12]
   1ca7c:	781b      	ldrb	r3, [r3, #0]
   1ca7e:	2b00      	cmp	r3, #0
   1ca80:	d017      	beq.n	1cab2 <basFindNextToSend+0x4e>
   1ca82:	9b03      	ldr	r3, [sp, #12]
   1ca84:	785b      	ldrb	r3, [r3, #1]
   1ca86:	2b00      	cmp	r3, #0
   1ca88:	d013      	beq.n	1cab2 <basFindNextToSend+0x4e>
        pConn->sentBattLevel != basCb.measBattLevel)
   1ca8a:	9b03      	ldr	r3, [sp, #12]
   1ca8c:	789a      	ldrb	r2, [r3, #2]
   1ca8e:	4b11      	ldr	r3, [pc, #68]	; (1cad4 <basFindNextToSend+0x70>)
   1ca90:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    if (pConn->connId != DM_CONN_ID_NONE && pConn->battToSend &&
   1ca94:	429a      	cmp	r2, r3
   1ca96:	d00c      	beq.n	1cab2 <basFindNextToSend+0x4e>
    {
      if (AttsCccEnabled(pConn->connId, cccIdx))
   1ca98:	9b03      	ldr	r3, [sp, #12]
   1ca9a:	781b      	ldrb	r3, [r3, #0]
   1ca9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1caa0:	4611      	mov	r1, r2
   1caa2:	4618      	mov	r0, r3
   1caa4:	f7fc f9e8 	bl	18e78 <AttsCccEnabled>
   1caa8:	4603      	mov	r3, r0
   1caaa:	2b00      	cmp	r3, #0
   1caac:	d001      	beq.n	1cab2 <basFindNextToSend+0x4e>
      {
        return pConn;
   1caae:	9b03      	ldr	r3, [sp, #12]
   1cab0:	e00c      	b.n	1cacc <basFindNextToSend+0x68>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1cab2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1cab6:	3301      	adds	r3, #1
   1cab8:	f88d 300b 	strb.w	r3, [sp, #11]
   1cabc:	9b03      	ldr	r3, [sp, #12]
   1cabe:	3303      	adds	r3, #3
   1cac0:	9303      	str	r3, [sp, #12]
   1cac2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1cac6:	2b02      	cmp	r3, #2
   1cac8:	d9d7      	bls.n	1ca7a <basFindNextToSend+0x16>
      }
    }
  }
  return NULL;
   1caca:	2300      	movs	r3, #0
}
   1cacc:	4618      	mov	r0, r3
   1cace:	b005      	add	sp, #20
   1cad0:	f85d fb04 	ldr.w	pc, [sp], #4
   1cad4:	10005158 	.word	0x10005158

0001cad8 <basSendPeriodicBattlevel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basSendPeriodicBattlevel(basConn_t *pConn)
{
   1cad8:	b500      	push	{lr}
   1cada:	b083      	sub	sp, #12
   1cadc:	9001      	str	r0, [sp, #4]
  BasSendBattLevel(pConn->connId, basCb.measTimer.msg.status, basCb.measBattLevel);
   1cade:	9b01      	ldr	r3, [sp, #4]
   1cae0:	781b      	ldrb	r3, [r3, #0]
   1cae2:	4a0c      	ldr	r2, [pc, #48]	; (1cb14 <basSendPeriodicBattlevel+0x3c>)
   1cae4:	7dd1      	ldrb	r1, [r2, #23]
   1cae6:	4a0b      	ldr	r2, [pc, #44]	; (1cb14 <basSendPeriodicBattlevel+0x3c>)
   1cae8:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   1caec:	4618      	mov	r0, r3
   1caee:	f000 f923 	bl	1cd38 <BasSendBattLevel>
  pConn->sentBattLevel = basCb.measBattLevel;
   1caf2:	4b08      	ldr	r3, [pc, #32]	; (1cb14 <basSendPeriodicBattlevel+0x3c>)
   1caf4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   1caf8:	9b01      	ldr	r3, [sp, #4]
   1cafa:	709a      	strb	r2, [r3, #2]
  pConn->battToSend = FALSE;
   1cafc:	9b01      	ldr	r3, [sp, #4]
   1cafe:	2200      	movs	r2, #0
   1cb00:	705a      	strb	r2, [r3, #1]
  basCb.txReady = FALSE;
   1cb02:	4b04      	ldr	r3, [pc, #16]	; (1cb14 <basSendPeriodicBattlevel+0x3c>)
   1cb04:	2200      	movs	r2, #0
   1cb06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
   1cb0a:	bf00      	nop
   1cb0c:	b003      	add	sp, #12
   1cb0e:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb12:	bf00      	nop
   1cb14:	10005158 	.word	0x10005158

0001cb18 <basConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basConnOpen(dmEvt_t *pMsg)
{
   1cb18:	b082      	sub	sp, #8
   1cb1a:	9001      	str	r0, [sp, #4]
  basCb.txReady = TRUE;
   1cb1c:	4b03      	ldr	r3, [pc, #12]	; (1cb2c <basConnOpen+0x14>)
   1cb1e:	2201      	movs	r2, #1
   1cb20:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
   1cb24:	bf00      	nop
   1cb26:	b002      	add	sp, #8
   1cb28:	4770      	bx	lr
   1cb2a:	bf00      	nop
   1cb2c:	10005158 	.word	0x10005158

0001cb30 <basHandleValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basHandleValueCnf(attEvt_t *pMsg)
{
   1cb30:	b500      	push	{lr}
   1cb32:	b085      	sub	sp, #20
   1cb34:	9001      	str	r0, [sp, #4]
  basConn_t  *pConn;

  if (pMsg->hdr.status == ATT_SUCCESS && pMsg->handle == BATT_LVL_HDL)
   1cb36:	9b01      	ldr	r3, [sp, #4]
   1cb38:	78db      	ldrb	r3, [r3, #3]
   1cb3a:	2b00      	cmp	r3, #0
   1cb3c:	d113      	bne.n	1cb66 <basHandleValueCnf+0x36>
   1cb3e:	9b01      	ldr	r3, [sp, #4]
   1cb40:	895b      	ldrh	r3, [r3, #10]
   1cb42:	2b62      	cmp	r3, #98	; 0x62
   1cb44:	d10f      	bne.n	1cb66 <basHandleValueCnf+0x36>
  {
    basCb.txReady = TRUE;
   1cb46:	4b0a      	ldr	r3, [pc, #40]	; (1cb70 <basHandleValueCnf+0x40>)
   1cb48:	2201      	movs	r2, #1
   1cb4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    /* find next connection to send (note ccc idx is stored in timer status) */
    if ((pConn = basFindNextToSend(basCb.measTimer.msg.status)) != NULL)
   1cb4e:	4b08      	ldr	r3, [pc, #32]	; (1cb70 <basHandleValueCnf+0x40>)
   1cb50:	7ddb      	ldrb	r3, [r3, #23]
   1cb52:	4618      	mov	r0, r3
   1cb54:	f7ff ff86 	bl	1ca64 <basFindNextToSend>
   1cb58:	9003      	str	r0, [sp, #12]
   1cb5a:	9b03      	ldr	r3, [sp, #12]
   1cb5c:	2b00      	cmp	r3, #0
   1cb5e:	d002      	beq.n	1cb66 <basHandleValueCnf+0x36>
    {
      basSendPeriodicBattlevel(pConn);
   1cb60:	9803      	ldr	r0, [sp, #12]
   1cb62:	f7ff ffb9 	bl	1cad8 <basSendPeriodicBattlevel>
    }
  }
}
   1cb66:	bf00      	nop
   1cb68:	b005      	add	sp, #20
   1cb6a:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb6e:	bf00      	nop
   1cb70:	10005158 	.word	0x10005158

0001cb74 <basMeasTimerExp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void basMeasTimerExp(wsfMsgHdr_t *pMsg)
{
   1cb74:	b500      	push	{lr}
   1cb76:	b085      	sub	sp, #20
   1cb78:	9001      	str	r0, [sp, #4]
  basConn_t  *pConn;

  /* if there are active connections */
  if (basNoConnActive() == FALSE)
   1cb7a:	f7ff ff33 	bl	1c9e4 <basNoConnActive>
   1cb7e:	4603      	mov	r3, r0
   1cb80:	2b00      	cmp	r3, #0
   1cb82:	d129      	bne.n	1cbd8 <basMeasTimerExp+0x64>
  {
    if (--basCb.currCount == 0)
   1cb84:	4b16      	ldr	r3, [pc, #88]	; (1cbe0 <basMeasTimerExp+0x6c>)
   1cb86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1cb88:	3b01      	subs	r3, #1
   1cb8a:	b29a      	uxth	r2, r3
   1cb8c:	4b14      	ldr	r3, [pc, #80]	; (1cbe0 <basMeasTimerExp+0x6c>)
   1cb8e:	849a      	strh	r2, [r3, #36]	; 0x24
   1cb90:	4b13      	ldr	r3, [pc, #76]	; (1cbe0 <basMeasTimerExp+0x6c>)
   1cb92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1cb94:	2b00      	cmp	r3, #0
   1cb96:	d119      	bne.n	1cbcc <basMeasTimerExp+0x58>
    {
      /* reset count */
      basCb.currCount = basCb.cfg.count;
   1cb98:	4b11      	ldr	r3, [pc, #68]	; (1cbe0 <basMeasTimerExp+0x6c>)
   1cb9a:	8c1a      	ldrh	r2, [r3, #32]
   1cb9c:	4b10      	ldr	r3, [pc, #64]	; (1cbe0 <basMeasTimerExp+0x6c>)
   1cb9e:	849a      	strh	r2, [r3, #36]	; 0x24

      /* set up battery measurement to be sent on all connections */
      basSetupToSend();
   1cba0:	f7ff ff40 	bl	1ca24 <basSetupToSend>

      /* read battery measurement sensor data */
      AppHwBattRead(&basCb.measBattLevel);
   1cba4:	480f      	ldr	r0, [pc, #60]	; (1cbe4 <basMeasTimerExp+0x70>)
   1cba6:	f7ef ff51 	bl	ca4c <AppHwBattRead>

      /* if ready to send measurements */
      if (basCb.txReady)
   1cbaa:	4b0d      	ldr	r3, [pc, #52]	; (1cbe0 <basMeasTimerExp+0x6c>)
   1cbac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
   1cbb0:	2b00      	cmp	r3, #0
   1cbb2:	d00b      	beq.n	1cbcc <basMeasTimerExp+0x58>
      {
        /* find next connection to send (note ccc idx is stored in timer status) */
        if ((pConn = basFindNextToSend(pMsg->status)) != NULL)
   1cbb4:	9b01      	ldr	r3, [sp, #4]
   1cbb6:	78db      	ldrb	r3, [r3, #3]
   1cbb8:	4618      	mov	r0, r3
   1cbba:	f7ff ff53 	bl	1ca64 <basFindNextToSend>
   1cbbe:	9003      	str	r0, [sp, #12]
   1cbc0:	9b03      	ldr	r3, [sp, #12]
   1cbc2:	2b00      	cmp	r3, #0
   1cbc4:	d002      	beq.n	1cbcc <basMeasTimerExp+0x58>
        {
          basSendPeriodicBattlevel(pConn);
   1cbc6:	9803      	ldr	r0, [sp, #12]
   1cbc8:	f7ff ff86 	bl	1cad8 <basSendPeriodicBattlevel>
        }
      }
    }

    /* restart timer */
    WsfTimerStartSec(&basCb.measTimer, basCb.cfg.period);
   1cbcc:	4b04      	ldr	r3, [pc, #16]	; (1cbe0 <basMeasTimerExp+0x6c>)
   1cbce:	69db      	ldr	r3, [r3, #28]
   1cbd0:	4619      	mov	r1, r3
   1cbd2:	4805      	ldr	r0, [pc, #20]	; (1cbe8 <basMeasTimerExp+0x74>)
   1cbd4:	f003 fa2a 	bl	2002c <WsfTimerStartSec>
  }
}
   1cbd8:	bf00      	nop
   1cbda:	b005      	add	sp, #20
   1cbdc:	f85d fb04 	ldr.w	pc, [sp], #4
   1cbe0:	10005158 	.word	0x10005158
   1cbe4:	1000517f 	.word	0x1000517f
   1cbe8:	10005164 	.word	0x10005164

0001cbec <BasInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasInit(wsfHandlerId_t handlerId, basCfg_t *pCfg)
{
   1cbec:	b082      	sub	sp, #8
   1cbee:	4603      	mov	r3, r0
   1cbf0:	9100      	str	r1, [sp, #0]
   1cbf2:	f88d 3007 	strb.w	r3, [sp, #7]
  basCb.measTimer.handlerId = handlerId;
   1cbf6:	4a07      	ldr	r2, [pc, #28]	; (1cc14 <BasInit+0x28>)
   1cbf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cbfc:	7613      	strb	r3, [r2, #24]
  basCb.cfg = *pCfg;
   1cbfe:	4b05      	ldr	r3, [pc, #20]	; (1cc14 <BasInit+0x28>)
   1cc00:	9a00      	ldr	r2, [sp, #0]
   1cc02:	331c      	adds	r3, #28
   1cc04:	e892 0003 	ldmia.w	r2, {r0, r1}
   1cc08:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1cc0c:	bf00      	nop
   1cc0e:	b002      	add	sp, #8
   1cc10:	4770      	bx	lr
   1cc12:	bf00      	nop
   1cc14:	10005158 	.word	0x10005158

0001cc18 <BasMeasBattStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasMeasBattStart(dmConnId_t connId, uint8_t timerEvt, uint8_t battCccIdx)
{
   1cc18:	b500      	push	{lr}
   1cc1a:	b083      	sub	sp, #12
   1cc1c:	4603      	mov	r3, r0
   1cc1e:	f88d 3007 	strb.w	r3, [sp, #7]
   1cc22:	460b      	mov	r3, r1
   1cc24:	f88d 3006 	strb.w	r3, [sp, #6]
   1cc28:	4613      	mov	r3, r2
   1cc2a:	f88d 3005 	strb.w	r3, [sp, #5]
  /* if this is first connection */
  if (basNoConnActive())
   1cc2e:	f7ff fed9 	bl	1c9e4 <basNoConnActive>
   1cc32:	4603      	mov	r3, r0
   1cc34:	2b00      	cmp	r3, #0
   1cc36:	d015      	beq.n	1cc64 <BasMeasBattStart+0x4c>
  {
    /* initialize control block */
    basCb.measTimer.msg.event = timerEvt;
   1cc38:	4a17      	ldr	r2, [pc, #92]	; (1cc98 <BasMeasBattStart+0x80>)
   1cc3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1cc3e:	7593      	strb	r3, [r2, #22]
    basCb.measTimer.msg.status = battCccIdx;
   1cc40:	4a15      	ldr	r2, [pc, #84]	; (1cc98 <BasMeasBattStart+0x80>)
   1cc42:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cc46:	75d3      	strb	r3, [r2, #23]
    basCb.measBattLevel = BAS_BATT_LEVEL_INIT;
   1cc48:	4b13      	ldr	r3, [pc, #76]	; (1cc98 <BasMeasBattStart+0x80>)
   1cc4a:	22ff      	movs	r2, #255	; 0xff
   1cc4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    basCb.currCount = basCb.cfg.count;
   1cc50:	4b11      	ldr	r3, [pc, #68]	; (1cc98 <BasMeasBattStart+0x80>)
   1cc52:	8c1a      	ldrh	r2, [r3, #32]
   1cc54:	4b10      	ldr	r3, [pc, #64]	; (1cc98 <BasMeasBattStart+0x80>)
   1cc56:	849a      	strh	r2, [r3, #36]	; 0x24

    /* start timer */
    WsfTimerStartSec(&basCb.measTimer, basCb.cfg.period);
   1cc58:	4b0f      	ldr	r3, [pc, #60]	; (1cc98 <BasMeasBattStart+0x80>)
   1cc5a:	69db      	ldr	r3, [r3, #28]
   1cc5c:	4619      	mov	r1, r3
   1cc5e:	480f      	ldr	r0, [pc, #60]	; (1cc9c <BasMeasBattStart+0x84>)
   1cc60:	f003 f9e4 	bl	2002c <WsfTimerStartSec>
  }

  /* set conn id and last sent battery level */
  basCb.conn[connId - 1].connId = connId;
   1cc64:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cc68:	1e5a      	subs	r2, r3, #1
   1cc6a:	490b      	ldr	r1, [pc, #44]	; (1cc98 <BasMeasBattStart+0x80>)
   1cc6c:	4613      	mov	r3, r2
   1cc6e:	005b      	lsls	r3, r3, #1
   1cc70:	4413      	add	r3, r2
   1cc72:	440b      	add	r3, r1
   1cc74:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1cc78:	701a      	strb	r2, [r3, #0]
  basCb.conn[connId - 1].sentBattLevel = BAS_BATT_LEVEL_INIT;
   1cc7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cc7e:	1e5a      	subs	r2, r3, #1
   1cc80:	4905      	ldr	r1, [pc, #20]	; (1cc98 <BasMeasBattStart+0x80>)
   1cc82:	4613      	mov	r3, r2
   1cc84:	005b      	lsls	r3, r3, #1
   1cc86:	4413      	add	r3, r2
   1cc88:	440b      	add	r3, r1
   1cc8a:	3302      	adds	r3, #2
   1cc8c:	22ff      	movs	r2, #255	; 0xff
   1cc8e:	701a      	strb	r2, [r3, #0]
}
   1cc90:	bf00      	nop
   1cc92:	b003      	add	sp, #12
   1cc94:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc98:	10005158 	.word	0x10005158
   1cc9c:	10005164 	.word	0x10005164

0001cca0 <BasMeasBattStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasMeasBattStop(dmConnId_t connId)
{
   1cca0:	b500      	push	{lr}
   1cca2:	b083      	sub	sp, #12
   1cca4:	4603      	mov	r3, r0
   1cca6:	f88d 3007 	strb.w	r3, [sp, #7]
  /* clear connection */
  basCb.conn[connId - 1].connId = DM_CONN_ID_NONE;
   1ccaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ccae:	1e5a      	subs	r2, r3, #1
   1ccb0:	490e      	ldr	r1, [pc, #56]	; (1ccec <BasMeasBattStop+0x4c>)
   1ccb2:	4613      	mov	r3, r2
   1ccb4:	005b      	lsls	r3, r3, #1
   1ccb6:	4413      	add	r3, r2
   1ccb8:	440b      	add	r3, r1
   1ccba:	2200      	movs	r2, #0
   1ccbc:	701a      	strb	r2, [r3, #0]
  basCb.conn[connId - 1].battToSend = FALSE;
   1ccbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ccc2:	1e5a      	subs	r2, r3, #1
   1ccc4:	4909      	ldr	r1, [pc, #36]	; (1ccec <BasMeasBattStop+0x4c>)
   1ccc6:	4613      	mov	r3, r2
   1ccc8:	005b      	lsls	r3, r3, #1
   1ccca:	4413      	add	r3, r2
   1cccc:	440b      	add	r3, r1
   1ccce:	3301      	adds	r3, #1
   1ccd0:	2200      	movs	r2, #0
   1ccd2:	701a      	strb	r2, [r3, #0]

  /* if no remaining connections */
  if (basNoConnActive())
   1ccd4:	f7ff fe86 	bl	1c9e4 <basNoConnActive>
   1ccd8:	4603      	mov	r3, r0
   1ccda:	2b00      	cmp	r3, #0
   1ccdc:	d002      	beq.n	1cce4 <BasMeasBattStop+0x44>
  {
    /* stop timer */
    WsfTimerStop(&basCb.measTimer);
   1ccde:	4804      	ldr	r0, [pc, #16]	; (1ccf0 <BasMeasBattStop+0x50>)
   1cce0:	f003 f9c8 	bl	20074 <WsfTimerStop>
  }
}
   1cce4:	bf00      	nop
   1cce6:	b003      	add	sp, #12
   1cce8:	f85d fb04 	ldr.w	pc, [sp], #4
   1ccec:	10005158 	.word	0x10005158
   1ccf0:	10005164 	.word	0x10005164

0001ccf4 <BasProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasProcMsg(wsfMsgHdr_t *pMsg)
{
   1ccf4:	b500      	push	{lr}
   1ccf6:	b083      	sub	sp, #12
   1ccf8:	9001      	str	r0, [sp, #4]
  if (pMsg->event == DM_CONN_OPEN_IND)
   1ccfa:	9b01      	ldr	r3, [sp, #4]
   1ccfc:	789b      	ldrb	r3, [r3, #2]
   1ccfe:	2b27      	cmp	r3, #39	; 0x27
   1cd00:	d103      	bne.n	1cd0a <BasProcMsg+0x16>
  {
    basConnOpen((dmEvt_t *) pMsg);
   1cd02:	9801      	ldr	r0, [sp, #4]
   1cd04:	f7ff ff08 	bl	1cb18 <basConnOpen>
  }
  else if (pMsg->event == basCb.measTimer.msg.event)
  {
    basMeasTimerExp(pMsg);
  }
}
   1cd08:	e010      	b.n	1cd2c <BasProcMsg+0x38>
  else if (pMsg->event == ATTS_HANDLE_VALUE_CNF)
   1cd0a:	9b01      	ldr	r3, [sp, #4]
   1cd0c:	789b      	ldrb	r3, [r3, #2]
   1cd0e:	2b0f      	cmp	r3, #15
   1cd10:	d103      	bne.n	1cd1a <BasProcMsg+0x26>
    basHandleValueCnf((attEvt_t *) pMsg);
   1cd12:	9801      	ldr	r0, [sp, #4]
   1cd14:	f7ff ff0c 	bl	1cb30 <basHandleValueCnf>
}
   1cd18:	e008      	b.n	1cd2c <BasProcMsg+0x38>
  else if (pMsg->event == basCb.measTimer.msg.event)
   1cd1a:	9b01      	ldr	r3, [sp, #4]
   1cd1c:	789a      	ldrb	r2, [r3, #2]
   1cd1e:	4b05      	ldr	r3, [pc, #20]	; (1cd34 <BasProcMsg+0x40>)
   1cd20:	7d9b      	ldrb	r3, [r3, #22]
   1cd22:	429a      	cmp	r2, r3
   1cd24:	d102      	bne.n	1cd2c <BasProcMsg+0x38>
    basMeasTimerExp(pMsg);
   1cd26:	9801      	ldr	r0, [sp, #4]
   1cd28:	f7ff ff24 	bl	1cb74 <basMeasTimerExp>
}
   1cd2c:	bf00      	nop
   1cd2e:	b003      	add	sp, #12
   1cd30:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd34:	10005158 	.word	0x10005158

0001cd38 <BasSendBattLevel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasSendBattLevel(dmConnId_t connId, uint8_t idx, uint8_t level)
{
   1cd38:	b500      	push	{lr}
   1cd3a:	b083      	sub	sp, #12
   1cd3c:	4603      	mov	r3, r0
   1cd3e:	f88d 3007 	strb.w	r3, [sp, #7]
   1cd42:	460b      	mov	r3, r1
   1cd44:	f88d 3006 	strb.w	r3, [sp, #6]
   1cd48:	4613      	mov	r3, r2
   1cd4a:	f88d 3005 	strb.w	r3, [sp, #5]
  if (AttsCccEnabled(connId, idx))
   1cd4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1cd52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cd56:	4611      	mov	r1, r2
   1cd58:	4618      	mov	r0, r3
   1cd5a:	f7fc f88d 	bl	18e78 <AttsCccEnabled>
   1cd5e:	4603      	mov	r3, r0
   1cd60:	2b00      	cmp	r3, #0
   1cd62:	d007      	beq.n	1cd74 <BasSendBattLevel+0x3c>
  {
    AttsHandleValueNtf(connId, BATT_LVL_HDL, CH_BATT_LEVEL_LEN, &level);
   1cd64:	f10d 0305 	add.w	r3, sp, #5
   1cd68:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1cd6c:	2201      	movs	r2, #1
   1cd6e:	2162      	movs	r1, #98	; 0x62
   1cd70:	f7fc fde1 	bl	19936 <AttsHandleValueNtf>
  }
}
   1cd74:	bf00      	nop
   1cd76:	b003      	add	sp, #12
   1cd78:	f85d fb04 	ldr.w	pc, [sp], #4

0001cd7c <BasReadCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t BasReadCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                     uint16_t offset, attsAttr_t *pAttr)
{
   1cd7c:	b510      	push	{r4, lr}
   1cd7e:	b082      	sub	sp, #8
   1cd80:	4604      	mov	r4, r0
   1cd82:	4608      	mov	r0, r1
   1cd84:	4611      	mov	r1, r2
   1cd86:	461a      	mov	r2, r3
   1cd88:	4623      	mov	r3, r4
   1cd8a:	f88d 3007 	strb.w	r3, [sp, #7]
   1cd8e:	4603      	mov	r3, r0
   1cd90:	f8ad 3004 	strh.w	r3, [sp, #4]
   1cd94:	460b      	mov	r3, r1
   1cd96:	f88d 3006 	strb.w	r3, [sp, #6]
   1cd9a:	4613      	mov	r3, r2
   1cd9c:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* read the battery level and set attribute value */
  AppHwBattRead(pAttr->pValue);
   1cda0:	9b04      	ldr	r3, [sp, #16]
   1cda2:	685b      	ldr	r3, [r3, #4]
   1cda4:	4618      	mov	r0, r3
   1cda6:	f7ef fe51 	bl	ca4c <AppHwBattRead>

  return ATT_SUCCESS;
   1cdaa:	2300      	movs	r3, #0
}
   1cdac:	4618      	mov	r0, r3
   1cdae:	b002      	add	sp, #8
   1cdb0:	bd10      	pop	{r4, pc}

0001cdb2 <l2cDefaultDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cDefaultDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1cdb2:	b082      	sub	sp, #8
   1cdb4:	4603      	mov	r3, r0
   1cdb6:	9200      	str	r2, [sp, #0]
   1cdb8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1cdbc:	460b      	mov	r3, r1
   1cdbe:	f8ad 3004 	strh.w	r3, [sp, #4]
  L2C_TRACE_WARN0("rcvd data on uregistered cid");
}
   1cdc2:	bf00      	nop
   1cdc4:	b002      	add	sp, #8
   1cdc6:	4770      	bx	lr

0001cdc8 <l2cDefaultDataCidCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cDefaultDataCidCback(uint16_t handle, uint16_t cid, uint16_t len, uint8_t *pPacket)
{
   1cdc8:	b084      	sub	sp, #16
   1cdca:	9301      	str	r3, [sp, #4]
   1cdcc:	4603      	mov	r3, r0
   1cdce:	f8ad 300e 	strh.w	r3, [sp, #14]
   1cdd2:	460b      	mov	r3, r1
   1cdd4:	f8ad 300c 	strh.w	r3, [sp, #12]
   1cdd8:	4613      	mov	r3, r2
   1cdda:	f8ad 300a 	strh.w	r3, [sp, #10]
  L2C_TRACE_WARN1("unknown cid=0x%04x", cid);
}
   1cdde:	bf00      	nop
   1cde0:	b004      	add	sp, #16
   1cde2:	4770      	bx	lr

0001cde4 <l2cDefaultCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cDefaultCtrlCback(wsfMsgHdr_t *pMsg)
{
   1cde4:	b082      	sub	sp, #8
   1cde6:	9001      	str	r0, [sp, #4]
  return;
   1cde8:	bf00      	nop
}
   1cdea:	b002      	add	sp, #8
   1cdec:	4770      	bx	lr
	...

0001cdf0 <l2cRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cRxSignalingPkt(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1cdf0:	b500      	push	{lr}
   1cdf2:	b085      	sub	sp, #20
   1cdf4:	4603      	mov	r3, r0
   1cdf6:	9200      	str	r2, [sp, #0]
   1cdf8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1cdfc:	460b      	mov	r3, r1
   1cdfe:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t role;
  dmConnId_t connId;

  if ((connId = DmConnIdByHandle(handle)) == DM_CONN_ID_NONE)
   1ce02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1ce06:	4618      	mov	r0, r3
   1ce08:	f7f8 fd20 	bl	1584c <DmConnIdByHandle>
   1ce0c:	4603      	mov	r3, r0
   1ce0e:	f88d 300f 	strb.w	r3, [sp, #15]
   1ce12:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ce16:	2b00      	cmp	r3, #0
   1ce18:	d029      	beq.n	1ce6e <l2cRxSignalingPkt+0x7e>
  {
    return;
  }

  role = DmConnRole(connId);
   1ce1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ce1e:	4618      	mov	r0, r3
   1ce20:	f7f8 fe56 	bl	15ad0 <DmConnRole>
   1ce24:	4603      	mov	r3, r0
   1ce26:	f88d 300e 	strb.w	r3, [sp, #14]

  if ((role == DM_ROLE_MASTER) && (l2cCb.masterRxSignalingPkt != NULL))
   1ce2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1ce2e:	2b00      	cmp	r3, #0
   1ce30:	d10c      	bne.n	1ce4c <l2cRxSignalingPkt+0x5c>
   1ce32:	4b11      	ldr	r3, [pc, #68]	; (1ce78 <l2cRxSignalingPkt+0x88>)
   1ce34:	699b      	ldr	r3, [r3, #24]
   1ce36:	2b00      	cmp	r3, #0
   1ce38:	d008      	beq.n	1ce4c <l2cRxSignalingPkt+0x5c>
  {
    (*l2cCb.masterRxSignalingPkt)(handle, len, pPacket);
   1ce3a:	4b0f      	ldr	r3, [pc, #60]	; (1ce78 <l2cRxSignalingPkt+0x88>)
   1ce3c:	699b      	ldr	r3, [r3, #24]
   1ce3e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1ce42:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1ce46:	9a00      	ldr	r2, [sp, #0]
   1ce48:	4798      	blx	r3
   1ce4a:	e011      	b.n	1ce70 <l2cRxSignalingPkt+0x80>
  }
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   1ce4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1ce50:	2b01      	cmp	r3, #1
   1ce52:	d10d      	bne.n	1ce70 <l2cRxSignalingPkt+0x80>
   1ce54:	4b08      	ldr	r3, [pc, #32]	; (1ce78 <l2cRxSignalingPkt+0x88>)
   1ce56:	69db      	ldr	r3, [r3, #28]
   1ce58:	2b00      	cmp	r3, #0
   1ce5a:	d009      	beq.n	1ce70 <l2cRxSignalingPkt+0x80>
  {
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1ce5c:	4b06      	ldr	r3, [pc, #24]	; (1ce78 <l2cRxSignalingPkt+0x88>)
   1ce5e:	69db      	ldr	r3, [r3, #28]
   1ce60:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1ce64:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   1ce68:	9a00      	ldr	r2, [sp, #0]
   1ce6a:	4798      	blx	r3
   1ce6c:	e000      	b.n	1ce70 <l2cRxSignalingPkt+0x80>
    return;
   1ce6e:	bf00      	nop
  }
  else
  {
    L2C_TRACE_ERR1("Invalid role configuration: role=%d", role);
  }
}
   1ce70:	b005      	add	sp, #20
   1ce72:	f85d fb04 	ldr.w	pc, [sp], #4
   1ce76:	bf00      	nop
   1ce78:	10005180 	.word	0x10005180

0001ce7c <l2cHciAclCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciAclCback(uint8_t *pPacket)
{
   1ce7c:	b510      	push	{r4, lr}
   1ce7e:	b086      	sub	sp, #24
   1ce80:	9001      	str	r0, [sp, #4]
  uint16_t  handle;
  uint16_t  hciLen;
  uint16_t  cid;
  uint16_t  l2cLen;
  uint8_t   *p = pPacket;
   1ce82:	9b01      	ldr	r3, [sp, #4]
   1ce84:	9304      	str	r3, [sp, #16]

  /* parse HCI handle and length */
  BSTREAM_TO_UINT16(handle, p);
   1ce86:	9b04      	ldr	r3, [sp, #16]
   1ce88:	781b      	ldrb	r3, [r3, #0]
   1ce8a:	b29a      	uxth	r2, r3
   1ce8c:	9b04      	ldr	r3, [sp, #16]
   1ce8e:	3301      	adds	r3, #1
   1ce90:	781b      	ldrb	r3, [r3, #0]
   1ce92:	b29b      	uxth	r3, r3
   1ce94:	021b      	lsls	r3, r3, #8
   1ce96:	b29b      	uxth	r3, r3
   1ce98:	4413      	add	r3, r2
   1ce9a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ce9e:	9b04      	ldr	r3, [sp, #16]
   1cea0:	3302      	adds	r3, #2
   1cea2:	9304      	str	r3, [sp, #16]
  handle &= HCI_HANDLE_MASK;
   1cea4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1cea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1ceac:	f8ad 300e 	strh.w	r3, [sp, #14]
  BSTREAM_TO_UINT16(hciLen, p);
   1ceb0:	9b04      	ldr	r3, [sp, #16]
   1ceb2:	781b      	ldrb	r3, [r3, #0]
   1ceb4:	b29a      	uxth	r2, r3
   1ceb6:	9b04      	ldr	r3, [sp, #16]
   1ceb8:	3301      	adds	r3, #1
   1ceba:	781b      	ldrb	r3, [r3, #0]
   1cebc:	b29b      	uxth	r3, r3
   1cebe:	021b      	lsls	r3, r3, #8
   1cec0:	b29b      	uxth	r3, r3
   1cec2:	4413      	add	r3, r2
   1cec4:	f8ad 300c 	strh.w	r3, [sp, #12]
   1cec8:	9b04      	ldr	r3, [sp, #16]
   1ceca:	3302      	adds	r3, #2
   1cecc:	9304      	str	r3, [sp, #16]

  /* parse L2CAP length */
  if (hciLen >= L2C_HDR_LEN)
   1cece:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1ced2:	2b03      	cmp	r3, #3
   1ced4:	d90f      	bls.n	1cef6 <l2cHciAclCback+0x7a>
  {
    BSTREAM_TO_UINT16(l2cLen, p);
   1ced6:	9b04      	ldr	r3, [sp, #16]
   1ced8:	781b      	ldrb	r3, [r3, #0]
   1ceda:	b29a      	uxth	r2, r3
   1cedc:	9b04      	ldr	r3, [sp, #16]
   1cede:	3301      	adds	r3, #1
   1cee0:	781b      	ldrb	r3, [r3, #0]
   1cee2:	b29b      	uxth	r3, r3
   1cee4:	021b      	lsls	r3, r3, #8
   1cee6:	b29b      	uxth	r3, r3
   1cee8:	4413      	add	r3, r2
   1ceea:	f8ad 3016 	strh.w	r3, [sp, #22]
   1ceee:	9b04      	ldr	r3, [sp, #16]
   1cef0:	3302      	adds	r3, #2
   1cef2:	9304      	str	r3, [sp, #16]
   1cef4:	e002      	b.n	1cefc <l2cHciAclCback+0x80>
  }
  else
  {
    l2cLen = 0;
   1cef6:	2300      	movs	r3, #0
   1cef8:	f8ad 3016 	strh.w	r3, [sp, #22]
  }

  /* verify L2CAP length vs HCI length */
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   1cefc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1cf00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1cf04:	3304      	adds	r3, #4
   1cf06:	429a      	cmp	r2, r3
   1cf08:	d13e      	bne.n	1cf88 <l2cHciAclCback+0x10c>
  {
    /* parse CID */
    BSTREAM_TO_UINT16(cid, p);
   1cf0a:	9b04      	ldr	r3, [sp, #16]
   1cf0c:	781b      	ldrb	r3, [r3, #0]
   1cf0e:	b29a      	uxth	r2, r3
   1cf10:	9b04      	ldr	r3, [sp, #16]
   1cf12:	3301      	adds	r3, #1
   1cf14:	781b      	ldrb	r3, [r3, #0]
   1cf16:	b29b      	uxth	r3, r3
   1cf18:	021b      	lsls	r3, r3, #8
   1cf1a:	b29b      	uxth	r3, r3
   1cf1c:	4413      	add	r3, r2
   1cf1e:	f8ad 300a 	strh.w	r3, [sp, #10]
   1cf22:	9b04      	ldr	r3, [sp, #16]
   1cf24:	3302      	adds	r3, #2
   1cf26:	9304      	str	r3, [sp, #16]

    switch (cid)
   1cf28:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1cf2c:	2b06      	cmp	r3, #6
   1cf2e:	d017      	beq.n	1cf60 <l2cHciAclCback+0xe4>
   1cf30:	2b06      	cmp	r3, #6
   1cf32:	dc1e      	bgt.n	1cf72 <l2cHciAclCback+0xf6>
   1cf34:	2b04      	cmp	r3, #4
   1cf36:	d00a      	beq.n	1cf4e <l2cHciAclCback+0xd2>
   1cf38:	2b05      	cmp	r3, #5
   1cf3a:	d11a      	bne.n	1cf72 <l2cHciAclCback+0xf6>
    {
      case L2C_CID_LE_SIGNALING:
        (*l2cCb.l2cSignalingCback)(handle, l2cLen, pPacket);
   1cf3c:	4b15      	ldr	r3, [pc, #84]	; (1cf94 <l2cHciAclCback+0x118>)
   1cf3e:	689b      	ldr	r3, [r3, #8]
   1cf40:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1cf44:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1cf48:	9a01      	ldr	r2, [sp, #4]
   1cf4a:	4798      	blx	r3
        break;
   1cf4c:	e01c      	b.n	1cf88 <l2cHciAclCback+0x10c>

      case L2C_CID_ATT:
        (*l2cCb.attDataCback)(handle, l2cLen, pPacket);
   1cf4e:	4b11      	ldr	r3, [pc, #68]	; (1cf94 <l2cHciAclCback+0x118>)
   1cf50:	681b      	ldr	r3, [r3, #0]
   1cf52:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1cf56:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1cf5a:	9a01      	ldr	r2, [sp, #4]
   1cf5c:	4798      	blx	r3
        break;
   1cf5e:	e013      	b.n	1cf88 <l2cHciAclCback+0x10c>

      case L2C_CID_SMP:
        (*l2cCb.smpDataCback)(handle, l2cLen, pPacket);
   1cf60:	4b0c      	ldr	r3, [pc, #48]	; (1cf94 <l2cHciAclCback+0x118>)
   1cf62:	685b      	ldr	r3, [r3, #4]
   1cf64:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1cf68:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1cf6c:	9a01      	ldr	r2, [sp, #4]
   1cf6e:	4798      	blx	r3
        break;
   1cf70:	e00a      	b.n	1cf88 <l2cHciAclCback+0x10c>

      default:
        (*l2cCb.l2cDataCidCback)(handle, cid, l2cLen, pPacket);
   1cf72:	4b08      	ldr	r3, [pc, #32]	; (1cf94 <l2cHciAclCback+0x118>)
   1cf74:	6a1c      	ldr	r4, [r3, #32]
   1cf76:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1cf7a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1cf7e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1cf82:	9b01      	ldr	r3, [sp, #4]
   1cf84:	47a0      	blx	r4
        break;
   1cf86:	bf00      	nop
  {
    L2C_TRACE_WARN2("length mismatch: l2c=%u hci=%u", l2cLen, hciLen);
  }

  /* deallocate buffer */
  WsfMsgFree(pPacket);
   1cf88:	9801      	ldr	r0, [sp, #4]
   1cf8a:	f002 fccb 	bl	1f924 <WsfMsgFree>
}
   1cf8e:	bf00      	nop
   1cf90:	b006      	add	sp, #24
   1cf92:	bd10      	pop	{r4, pc}
   1cf94:	10005180 	.word	0x10005180

0001cf98 <l2cHciFlowCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciFlowCback(uint16_t handle, bool_t flowDisabled)
{
   1cf98:	b500      	push	{lr}
   1cf9a:	b085      	sub	sp, #20
   1cf9c:	4603      	mov	r3, r0
   1cf9e:	460a      	mov	r2, r1
   1cfa0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1cfa4:	4613      	mov	r3, r2
   1cfa6:	f88d 3005 	strb.w	r3, [sp, #5]
  wsfMsgHdr_t hdr;

  /* get conn ID for handle */
  if ((hdr.param = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   1cfaa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1cfae:	4618      	mov	r0, r3
   1cfb0:	f7f8 fc4c 	bl	1584c <DmConnIdByHandle>
   1cfb4:	4603      	mov	r3, r0
   1cfb6:	b29b      	uxth	r3, r3
   1cfb8:	f8ad 300c 	strh.w	r3, [sp, #12]
   1cfbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1cfc0:	2b00      	cmp	r3, #0
   1cfc2:	d01a      	beq.n	1cffa <l2cHciFlowCback+0x62>
  {
    /* execute higher layer flow control callbacks */
    hdr.event = flowDisabled;
   1cfc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cfc8:	f88d 300e 	strb.w	r3, [sp, #14]
    (*l2cCb.attCtrlCback)(&hdr);
   1cfcc:	4b0d      	ldr	r3, [pc, #52]	; (1d004 <l2cHciFlowCback+0x6c>)
   1cfce:	68db      	ldr	r3, [r3, #12]
   1cfd0:	aa03      	add	r2, sp, #12
   1cfd2:	4610      	mov	r0, r2
   1cfd4:	4798      	blx	r3
    hdr.event = flowDisabled;
   1cfd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cfda:	f88d 300e 	strb.w	r3, [sp, #14]
    (*l2cCb.smpCtrlCback)(&hdr);
   1cfde:	4b09      	ldr	r3, [pc, #36]	; (1d004 <l2cHciFlowCback+0x6c>)
   1cfe0:	691b      	ldr	r3, [r3, #16]
   1cfe2:	aa03      	add	r2, sp, #12
   1cfe4:	4610      	mov	r0, r2
   1cfe6:	4798      	blx	r3

    /* execute connection oriented channel flow control callback */
    hdr.event = flowDisabled;
   1cfe8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cfec:	f88d 300e 	strb.w	r3, [sp, #14]
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   1cff0:	4b04      	ldr	r3, [pc, #16]	; (1d004 <l2cHciFlowCback+0x6c>)
   1cff2:	695b      	ldr	r3, [r3, #20]
   1cff4:	aa03      	add	r2, sp, #12
   1cff6:	4610      	mov	r0, r2
   1cff8:	4798      	blx	r3
  }
}
   1cffa:	bf00      	nop
   1cffc:	b005      	add	sp, #20
   1cffe:	f85d fb04 	ldr.w	pc, [sp], #4
   1d002:	bf00      	nop
   1d004:	10005180 	.word	0x10005180

0001d008 <l2cSendCmdReject>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cSendCmdReject(uint16_t handle, uint8_t identifier, uint16_t reason)
{
   1d008:	b500      	push	{lr}
   1d00a:	b085      	sub	sp, #20
   1d00c:	4603      	mov	r3, r0
   1d00e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d012:	460b      	mov	r3, r1
   1d014:	f88d 3005 	strb.w	r3, [sp, #5]
   1d018:	4613      	mov	r3, r2
   1d01a:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint8_t *pPacket;
  uint8_t *p;

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CMD_REJ_LEN)) != NULL)
   1d01e:	200e      	movs	r0, #14
   1d020:	f000 f837 	bl	1d092 <l2cMsgAlloc>
   1d024:	9003      	str	r0, [sp, #12]
   1d026:	9b03      	ldr	r3, [sp, #12]
   1d028:	2b00      	cmp	r3, #0
   1d02a:	d02e      	beq.n	1d08a <l2cSendCmdReject+0x82>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
   1d02c:	9b03      	ldr	r3, [sp, #12]
   1d02e:	3308      	adds	r3, #8
   1d030:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   1d032:	9b02      	ldr	r3, [sp, #8]
   1d034:	1c5a      	adds	r2, r3, #1
   1d036:	9202      	str	r2, [sp, #8]
   1d038:	2201      	movs	r2, #1
   1d03a:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, identifier);              /* identifier */
   1d03c:	9b02      	ldr	r3, [sp, #8]
   1d03e:	1c5a      	adds	r2, r3, #1
   1d040:	9202      	str	r2, [sp, #8]
   1d042:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1d046:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   1d048:	9b02      	ldr	r3, [sp, #8]
   1d04a:	1c5a      	adds	r2, r3, #1
   1d04c:	9202      	str	r2, [sp, #8]
   1d04e:	2202      	movs	r2, #2
   1d050:	701a      	strb	r2, [r3, #0]
   1d052:	9b02      	ldr	r3, [sp, #8]
   1d054:	1c5a      	adds	r2, r3, #1
   1d056:	9202      	str	r2, [sp, #8]
   1d058:	2200      	movs	r2, #0
   1d05a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   1d05c:	9b02      	ldr	r3, [sp, #8]
   1d05e:	1c5a      	adds	r2, r3, #1
   1d060:	9202      	str	r2, [sp, #8]
   1d062:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1d066:	b2d2      	uxtb	r2, r2
   1d068:	701a      	strb	r2, [r3, #0]
   1d06a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1d06e:	0a1b      	lsrs	r3, r3, #8
   1d070:	b299      	uxth	r1, r3
   1d072:	9b02      	ldr	r3, [sp, #8]
   1d074:	1c5a      	adds	r2, r3, #1
   1d076:	9202      	str	r2, [sp, #8]
   1d078:	b2ca      	uxtb	r2, r1
   1d07a:	701a      	strb	r2, [r3, #0]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CMD_REJ_LEN), pPacket);
   1d07c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1d080:	9b03      	ldr	r3, [sp, #12]
   1d082:	2206      	movs	r2, #6
   1d084:	2005      	movs	r0, #5
   1d086:	f000 f85f 	bl	1d148 <L2cDataReq>
  }
}
   1d08a:	bf00      	nop
   1d08c:	b005      	add	sp, #20
   1d08e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d092 <l2cMsgAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *l2cMsgAlloc(uint16_t len)
{
   1d092:	b500      	push	{lr}
   1d094:	b083      	sub	sp, #12
   1d096:	4603      	mov	r3, r0
   1d098:	f8ad 3006 	strh.w	r3, [sp, #6]
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1d09c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d0a0:	2100      	movs	r1, #0
   1d0a2:	4618      	mov	r0, r3
   1d0a4:	f002 fc0e 	bl	1f8c4 <WsfMsgDataAlloc>
   1d0a8:	4603      	mov	r3, r0
}
   1d0aa:	4618      	mov	r0, r3
   1d0ac:	b003      	add	sp, #12
   1d0ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001d0b4 <L2cInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cInit(void)
{
   1d0b4:	b508      	push	{r3, lr}
  /* Initialize control block */
  l2cCb.attDataCback = l2cDefaultDataCback;
   1d0b6:	4b0f      	ldr	r3, [pc, #60]	; (1d0f4 <L2cInit+0x40>)
   1d0b8:	4a0f      	ldr	r2, [pc, #60]	; (1d0f8 <L2cInit+0x44>)
   1d0ba:	601a      	str	r2, [r3, #0]
  l2cCb.smpDataCback = l2cDefaultDataCback;
   1d0bc:	4b0d      	ldr	r3, [pc, #52]	; (1d0f4 <L2cInit+0x40>)
   1d0be:	4a0e      	ldr	r2, [pc, #56]	; (1d0f8 <L2cInit+0x44>)
   1d0c0:	605a      	str	r2, [r3, #4]
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   1d0c2:	4b0c      	ldr	r3, [pc, #48]	; (1d0f4 <L2cInit+0x40>)
   1d0c4:	4a0d      	ldr	r2, [pc, #52]	; (1d0fc <L2cInit+0x48>)
   1d0c6:	609a      	str	r2, [r3, #8]
  l2cCb.attCtrlCback = l2cDefaultCtrlCback;
   1d0c8:	4b0a      	ldr	r3, [pc, #40]	; (1d0f4 <L2cInit+0x40>)
   1d0ca:	4a0d      	ldr	r2, [pc, #52]	; (1d100 <L2cInit+0x4c>)
   1d0cc:	60da      	str	r2, [r3, #12]
  l2cCb.smpCtrlCback = l2cDefaultCtrlCback;
   1d0ce:	4b09      	ldr	r3, [pc, #36]	; (1d0f4 <L2cInit+0x40>)
   1d0d0:	4a0b      	ldr	r2, [pc, #44]	; (1d100 <L2cInit+0x4c>)
   1d0d2:	611a      	str	r2, [r3, #16]
  l2cCb.l2cCocCtrlCback = l2cDefaultCtrlCback;
   1d0d4:	4b07      	ldr	r3, [pc, #28]	; (1d0f4 <L2cInit+0x40>)
   1d0d6:	4a0a      	ldr	r2, [pc, #40]	; (1d100 <L2cInit+0x4c>)
   1d0d8:	615a      	str	r2, [r3, #20]
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   1d0da:	4b06      	ldr	r3, [pc, #24]	; (1d0f4 <L2cInit+0x40>)
   1d0dc:	4a09      	ldr	r2, [pc, #36]	; (1d104 <L2cInit+0x50>)
   1d0de:	621a      	str	r2, [r3, #32]
  l2cCb.identifier = 1;
   1d0e0:	4b04      	ldr	r3, [pc, #16]	; (1d0f4 <L2cInit+0x40>)
   1d0e2:	2201      	movs	r2, #1
   1d0e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Register with HCI */
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   1d0e8:	4907      	ldr	r1, [pc, #28]	; (1d108 <L2cInit+0x54>)
   1d0ea:	4808      	ldr	r0, [pc, #32]	; (1d10c <L2cInit+0x58>)
   1d0ec:	f7f3 fcbc 	bl	10a68 <HciAclRegister>
}
   1d0f0:	bf00      	nop
   1d0f2:	bd08      	pop	{r3, pc}
   1d0f4:	10005180 	.word	0x10005180
   1d0f8:	0001cdb3 	.word	0x0001cdb3
   1d0fc:	0001cdf1 	.word	0x0001cdf1
   1d100:	0001cde5 	.word	0x0001cde5
   1d104:	0001cdc9 	.word	0x0001cdc9
   1d108:	0001cf99 	.word	0x0001cf99
   1d10c:	0001ce7d 	.word	0x0001ce7d

0001d110 <L2cRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cRegister(uint16_t cid, l2cDataCback_t dataCback, l2cCtrlCback_t ctrlCback)
{
   1d110:	b084      	sub	sp, #16
   1d112:	4603      	mov	r3, r0
   1d114:	9102      	str	r1, [sp, #8]
   1d116:	9201      	str	r2, [sp, #4]
   1d118:	f8ad 300e 	strh.w	r3, [sp, #14]
  WSF_ASSERT((cid == L2C_CID_ATT) || (cid == L2C_CID_SMP));

  /* store the callbacks */
  if (cid == L2C_CID_ATT)
   1d11c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1d120:	2b04      	cmp	r3, #4
   1d122:	d106      	bne.n	1d132 <L2cRegister+0x22>
  {
    /* registering for attribute protocol */
    l2cCb.attDataCback = dataCback;
   1d124:	4a07      	ldr	r2, [pc, #28]	; (1d144 <L2cRegister+0x34>)
   1d126:	9b02      	ldr	r3, [sp, #8]
   1d128:	6013      	str	r3, [r2, #0]
    l2cCb.attCtrlCback = ctrlCback;
   1d12a:	4a06      	ldr	r2, [pc, #24]	; (1d144 <L2cRegister+0x34>)
   1d12c:	9b01      	ldr	r3, [sp, #4]
   1d12e:	60d3      	str	r3, [r2, #12]
  {
    /* registering for security manager protocol */
    l2cCb.smpDataCback = dataCback;
    l2cCb.smpCtrlCback = ctrlCback;
  }
}
   1d130:	e005      	b.n	1d13e <L2cRegister+0x2e>
    l2cCb.smpDataCback = dataCback;
   1d132:	4a04      	ldr	r2, [pc, #16]	; (1d144 <L2cRegister+0x34>)
   1d134:	9b02      	ldr	r3, [sp, #8]
   1d136:	6053      	str	r3, [r2, #4]
    l2cCb.smpCtrlCback = ctrlCback;
   1d138:	4a02      	ldr	r2, [pc, #8]	; (1d144 <L2cRegister+0x34>)
   1d13a:	9b01      	ldr	r3, [sp, #4]
   1d13c:	6113      	str	r3, [r2, #16]
}
   1d13e:	bf00      	nop
   1d140:	b004      	add	sp, #16
   1d142:	4770      	bx	lr
   1d144:	10005180 	.word	0x10005180

0001d148 <L2cDataReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cDataReq(uint16_t cid, uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1d148:	b500      	push	{lr}
   1d14a:	b087      	sub	sp, #28
   1d14c:	9301      	str	r3, [sp, #4]
   1d14e:	4603      	mov	r3, r0
   1d150:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d154:	460b      	mov	r3, r1
   1d156:	f8ad 300c 	strh.w	r3, [sp, #12]
   1d15a:	4613      	mov	r3, r2
   1d15c:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint8_t *p = pPacket;
   1d160:	9b01      	ldr	r3, [sp, #4]
   1d162:	9305      	str	r3, [sp, #20]

  /* Set HCI header */
  UINT16_TO_BSTREAM(p, handle);
   1d164:	9b05      	ldr	r3, [sp, #20]
   1d166:	1c5a      	adds	r2, r3, #1
   1d168:	9205      	str	r2, [sp, #20]
   1d16a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1d16e:	b2d2      	uxtb	r2, r2
   1d170:	701a      	strb	r2, [r3, #0]
   1d172:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1d176:	0a1b      	lsrs	r3, r3, #8
   1d178:	b299      	uxth	r1, r3
   1d17a:	9b05      	ldr	r3, [sp, #20]
   1d17c:	1c5a      	adds	r2, r3, #1
   1d17e:	9205      	str	r2, [sp, #20]
   1d180:	b2ca      	uxtb	r2, r1
   1d182:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   1d184:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d188:	b2da      	uxtb	r2, r3
   1d18a:	9b05      	ldr	r3, [sp, #20]
   1d18c:	1c59      	adds	r1, r3, #1
   1d18e:	9105      	str	r1, [sp, #20]
   1d190:	3204      	adds	r2, #4
   1d192:	b2d2      	uxtb	r2, r2
   1d194:	701a      	strb	r2, [r3, #0]
   1d196:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d19a:	3304      	adds	r3, #4
   1d19c:	1219      	asrs	r1, r3, #8
   1d19e:	9b05      	ldr	r3, [sp, #20]
   1d1a0:	1c5a      	adds	r2, r3, #1
   1d1a2:	9205      	str	r2, [sp, #20]
   1d1a4:	b2ca      	uxtb	r2, r1
   1d1a6:	701a      	strb	r2, [r3, #0]

  /* Set L2CAP header */
  UINT16_TO_BSTREAM(p, len);
   1d1a8:	9b05      	ldr	r3, [sp, #20]
   1d1aa:	1c5a      	adds	r2, r3, #1
   1d1ac:	9205      	str	r2, [sp, #20]
   1d1ae:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1d1b2:	b2d2      	uxtb	r2, r2
   1d1b4:	701a      	strb	r2, [r3, #0]
   1d1b6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d1ba:	0a1b      	lsrs	r3, r3, #8
   1d1bc:	b299      	uxth	r1, r3
   1d1be:	9b05      	ldr	r3, [sp, #20]
   1d1c0:	1c5a      	adds	r2, r3, #1
   1d1c2:	9205      	str	r2, [sp, #20]
   1d1c4:	b2ca      	uxtb	r2, r1
   1d1c6:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, cid);
   1d1c8:	9b05      	ldr	r3, [sp, #20]
   1d1ca:	1c5a      	adds	r2, r3, #1
   1d1cc:	9205      	str	r2, [sp, #20]
   1d1ce:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1d1d2:	b2d2      	uxtb	r2, r2
   1d1d4:	701a      	strb	r2, [r3, #0]
   1d1d6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1d1da:	0a1b      	lsrs	r3, r3, #8
   1d1dc:	b299      	uxth	r1, r3
   1d1de:	9b05      	ldr	r3, [sp, #20]
   1d1e0:	1c5a      	adds	r2, r3, #1
   1d1e2:	9205      	str	r2, [sp, #20]
   1d1e4:	b2ca      	uxtb	r2, r1
   1d1e6:	701a      	strb	r2, [r3, #0]

  /* Send to HCI */
  HciSendAclData(pPacket);
   1d1e8:	9801      	ldr	r0, [sp, #4]
   1d1ea:	f7f0 ffe7 	bl	e1bc <HciSendAclData>
}
   1d1ee:	bf00      	nop
   1d1f0:	b007      	add	sp, #28
   1d1f2:	f85d fb04 	ldr.w	pc, [sp], #4

0001d1f6 <l2cSlaveReqTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cSlaveReqTimeout(wsfMsgHdr_t *pMsg)
{
   1d1f6:	b500      	push	{lr}
   1d1f8:	b083      	sub	sp, #12
   1d1fa:	9001      	str	r0, [sp, #4]
  L2C_TRACE_WARN0("conn update req timeout");

  /* Notify DM that connection update has failed (handle is stored in param) */
  DmL2cConnUpdateCnf(pMsg->param, L2C_CONN_PARAM_REJECTED);
   1d1fc:	9b01      	ldr	r3, [sp, #4]
   1d1fe:	881b      	ldrh	r3, [r3, #0]
   1d200:	2101      	movs	r1, #1
   1d202:	4618      	mov	r0, r3
   1d204:	f7f8 fcea 	bl	15bdc <DmL2cConnUpdateCnf>
}
   1d208:	bf00      	nop
   1d20a:	b003      	add	sp, #12
   1d20c:	f85d fb04 	ldr.w	pc, [sp], #4

0001d210 <l2cSlaveRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cSlaveRxSignalingPkt(uint16_t handle, uint16_t l2cLen, uint8_t *pPacket)
{
   1d210:	b500      	push	{lr}
   1d212:	b085      	sub	sp, #20
   1d214:	4603      	mov	r3, r0
   1d216:	9200      	str	r2, [sp, #0]
   1d218:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d21c:	460b      	mov	r3, r1
   1d21e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t   id;
  uint16_t  len;
  uint16_t  result;

  /* parse code, len, and identifier */
  pPacket += L2C_PAYLOAD_START;
   1d222:	9b00      	ldr	r3, [sp, #0]
   1d224:	3308      	adds	r3, #8
   1d226:	9300      	str	r3, [sp, #0]
  BSTREAM_TO_UINT8(code, pPacket);
   1d228:	9b00      	ldr	r3, [sp, #0]
   1d22a:	1c5a      	adds	r2, r3, #1
   1d22c:	9200      	str	r2, [sp, #0]
   1d22e:	781b      	ldrb	r3, [r3, #0]
   1d230:	f88d 300d 	strb.w	r3, [sp, #13]
  BSTREAM_TO_UINT8(id, pPacket);
   1d234:	9b00      	ldr	r3, [sp, #0]
   1d236:	1c5a      	adds	r2, r3, #1
   1d238:	9200      	str	r2, [sp, #0]
   1d23a:	781b      	ldrb	r3, [r3, #0]
   1d23c:	f88d 300c 	strb.w	r3, [sp, #12]
  BSTREAM_TO_UINT16(len, pPacket);
   1d240:	9b00      	ldr	r3, [sp, #0]
   1d242:	781b      	ldrb	r3, [r3, #0]
   1d244:	b29a      	uxth	r2, r3
   1d246:	9b00      	ldr	r3, [sp, #0]
   1d248:	3301      	adds	r3, #1
   1d24a:	781b      	ldrb	r3, [r3, #0]
   1d24c:	b29b      	uxth	r3, r3
   1d24e:	021b      	lsls	r3, r3, #8
   1d250:	b29b      	uxth	r3, r3
   1d252:	4413      	add	r3, r2
   1d254:	f8ad 300a 	strh.w	r3, [sp, #10]
   1d258:	9b00      	ldr	r3, [sp, #0]
   1d25a:	3302      	adds	r3, #2
   1d25c:	9300      	str	r3, [sp, #0]

  /* verify signal identifier is valid */
  if (id == L2C_SIGNAL_ID_INVALID)
   1d25e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d262:	2b00      	cmp	r3, #0
   1d264:	d064      	beq.n	1d330 <l2cSlaveRxSignalingPkt+0x120>
  /* verify signal identifier is expected
   * verify signaling length vs. l2c length
   * verify this is a conn param update rsp or command reject
   * verify parameter length
   */
  if ((id == l2cSlaveCb.signId[handle])   &&
   1d266:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d26a:	4a34      	ldr	r2, [pc, #208]	; (1d33c <l2cSlaveRxSignalingPkt+0x12c>)
   1d26c:	4413      	add	r3, r2
   1d26e:	7d1b      	ldrb	r3, [r3, #20]
   1d270:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1d274:	429a      	cmp	r2, r3
   1d276:	d14e      	bne.n	1d316 <l2cSlaveRxSignalingPkt+0x106>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   1d278:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1d27c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d280:	3304      	adds	r3, #4
  if ((id == l2cSlaveCb.signId[handle])   &&
   1d282:	429a      	cmp	r2, r3
   1d284:	d147      	bne.n	1d316 <l2cSlaveRxSignalingPkt+0x106>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   1d286:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1d28a:	2b13      	cmp	r3, #19
   1d28c:	d103      	bne.n	1d296 <l2cSlaveRxSignalingPkt+0x86>
      (((code == L2C_SIG_CONN_UPDATE_RSP) && (len == L2C_SIG_CONN_UPDATE_RSP_LEN)) ||
   1d28e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d292:	2b02      	cmp	r3, #2
   1d294:	d003      	beq.n	1d29e <l2cSlaveRxSignalingPkt+0x8e>
   1d296:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1d29a:	2b01      	cmp	r3, #1
   1d29c:	d13b      	bne.n	1d316 <l2cSlaveRxSignalingPkt+0x106>
       (code == L2C_SIG_CMD_REJ)))
  {
    /* get last sent code */
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];
   1d29e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d2a2:	4a26      	ldr	r2, [pc, #152]	; (1d33c <l2cSlaveRxSignalingPkt+0x12c>)
   1d2a4:	4413      	add	r3, r2
   1d2a6:	7c5b      	ldrb	r3, [r3, #17]
   1d2a8:	f88d 3009 	strb.w	r3, [sp, #9]

    /* clear pending signal id */
    l2cSlaveCb.signId[handle] = L2C_SIGNAL_ID_INVALID;
   1d2ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d2b0:	4a22      	ldr	r2, [pc, #136]	; (1d33c <l2cSlaveRxSignalingPkt+0x12c>)
   1d2b2:	4413      	add	r3, r2
   1d2b4:	2200      	movs	r2, #0
   1d2b6:	751a      	strb	r2, [r3, #20]

    /* parse result parameter */
    BSTREAM_TO_UINT16(result, pPacket);
   1d2b8:	9b00      	ldr	r3, [sp, #0]
   1d2ba:	781b      	ldrb	r3, [r3, #0]
   1d2bc:	b29a      	uxth	r2, r3
   1d2be:	9b00      	ldr	r3, [sp, #0]
   1d2c0:	3301      	adds	r3, #1
   1d2c2:	781b      	ldrb	r3, [r3, #0]
   1d2c4:	b29b      	uxth	r3, r3
   1d2c6:	021b      	lsls	r3, r3, #8
   1d2c8:	b29b      	uxth	r3, r3
   1d2ca:	4413      	add	r3, r2
   1d2cc:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d2d0:	9b00      	ldr	r3, [sp, #0]
   1d2d2:	3302      	adds	r3, #2
   1d2d4:	9300      	str	r3, [sp, #0]

    /* stop req timer */
    WsfTimerStop(&l2cSlaveCb.reqTimer);
   1d2d6:	4819      	ldr	r0, [pc, #100]	; (1d33c <l2cSlaveRxSignalingPkt+0x12c>)
   1d2d8:	f002 fecc 	bl	20074 <WsfTimerStop>

    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   1d2dc:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1d2e0:	2b12      	cmp	r3, #18
   1d2e2:	d10f      	bne.n	1d304 <l2cSlaveRxSignalingPkt+0xf4>
    {
      if (code == L2C_SIG_CMD_REJ)
   1d2e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1d2e8:	2b01      	cmp	r3, #1
   1d2ea:	d102      	bne.n	1d2f2 <l2cSlaveRxSignalingPkt+0xe2>
      {
        /* got command reject */
        result = L2C_CONN_PARAM_REJECTED;
   1d2ec:	2301      	movs	r3, #1
   1d2ee:	f8ad 300e 	strh.w	r3, [sp, #14]
      }

      /* send to DM */
      DmL2cConnUpdateCnf(handle, result);
   1d2f2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1d2f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d2fa:	4611      	mov	r1, r2
   1d2fc:	4618      	mov	r0, r3
   1d2fe:	f7f8 fc6d 	bl	15bdc <DmL2cConnUpdateCnf>
  {
   1d302:	e018      	b.n	1d336 <l2cSlaveRxSignalingPkt+0x126>
    }
    else
    {
      /* send to DM */
      DmL2cCmdRejInd(handle, result);
   1d304:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1d308:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d30c:	4611      	mov	r1, r2
   1d30e:	4618      	mov	r0, r3
   1d310:	f7f8 fc86 	bl	15c20 <DmL2cCmdRejInd>
  {
   1d314:	e00f      	b.n	1d336 <l2cSlaveRxSignalingPkt+0x126>
  else
  {
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);

    /* reject all unknown, invalid or unidentified commands except command reject. */
    if (code != L2C_SIG_CMD_REJ)
   1d316:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1d31a:	2b01      	cmp	r3, #1
   1d31c:	d00a      	beq.n	1d334 <l2cSlaveRxSignalingPkt+0x124>
    {
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   1d31e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1d322:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d326:	2200      	movs	r2, #0
   1d328:	4618      	mov	r0, r3
   1d32a:	f7ff fe6d 	bl	1d008 <l2cSendCmdReject>
    }

    return;
   1d32e:	e001      	b.n	1d334 <l2cSlaveRxSignalingPkt+0x124>
    return;
   1d330:	bf00      	nop
   1d332:	e000      	b.n	1d336 <l2cSlaveRxSignalingPkt+0x126>
    return;
   1d334:	bf00      	nop
  }
}
   1d336:	b005      	add	sp, #20
   1d338:	f85d fb04 	ldr.w	pc, [sp], #4
   1d33c:	100051a8 	.word	0x100051a8

0001d340 <L2cSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveInit(void)
{
   1d340:	b082      	sub	sp, #8
  l2cCb.slaveRxSignalingPkt = l2cSlaveRxSignalingPkt;
   1d342:	4b0d      	ldr	r3, [pc, #52]	; (1d378 <L2cSlaveInit+0x38>)
   1d344:	4a0d      	ldr	r2, [pc, #52]	; (1d37c <L2cSlaveInit+0x3c>)
   1d346:	61da      	str	r2, [r3, #28]

  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   1d348:	2300      	movs	r3, #0
   1d34a:	f88d 3007 	strb.w	r3, [sp, #7]
   1d34e:	e00a      	b.n	1d366 <L2cSlaveInit+0x26>
  {
    l2cSlaveCb.signId[i] = L2C_SIGNAL_ID_INVALID;
   1d350:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d354:	4a0a      	ldr	r2, [pc, #40]	; (1d380 <L2cSlaveInit+0x40>)
   1d356:	4413      	add	r3, r2
   1d358:	2200      	movs	r2, #0
   1d35a:	751a      	strb	r2, [r3, #20]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   1d35c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d360:	3301      	adds	r3, #1
   1d362:	f88d 3007 	strb.w	r3, [sp, #7]
   1d366:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d36a:	2b02      	cmp	r3, #2
   1d36c:	d9f0      	bls.n	1d350 <L2cSlaveInit+0x10>
  }
}
   1d36e:	bf00      	nop
   1d370:	bf00      	nop
   1d372:	b002      	add	sp, #8
   1d374:	4770      	bx	lr
   1d376:	bf00      	nop
   1d378:	10005180 	.word	0x10005180
   1d37c:	0001d211 	.word	0x0001d211
   1d380:	100051a8 	.word	0x100051a8

0001d384 <L2cDmConnUpdateReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cDmConnUpdateReq(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   1d384:	b500      	push	{lr}
   1d386:	b085      	sub	sp, #20
   1d388:	4603      	mov	r3, r0
   1d38a:	9100      	str	r1, [sp, #0]
   1d38c:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t *pPacket;
  uint8_t *p;

  /* record code */
  l2cSlaveCb.lastCode[handle] = L2C_SIG_CONN_UPDATE_REQ;
   1d390:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d394:	4a47      	ldr	r2, [pc, #284]	; (1d4b4 <L2cDmConnUpdateReq+0x130>)
   1d396:	4413      	add	r3, r2
   1d398:	2212      	movs	r2, #18
   1d39a:	745a      	strb	r2, [r3, #17]

  /* Start signaling request timer and store handle */
  WsfTimerStartSec(&l2cSlaveCb.reqTimer, L2C_SIG_REQ_TIMEOUT);
   1d39c:	211e      	movs	r1, #30
   1d39e:	4845      	ldr	r0, [pc, #276]	; (1d4b4 <L2cDmConnUpdateReq+0x130>)
   1d3a0:	f002 fe44 	bl	2002c <WsfTimerStartSec>
  l2cSlaveCb.reqTimer.msg.param = handle;
   1d3a4:	4a43      	ldr	r2, [pc, #268]	; (1d4b4 <L2cDmConnUpdateReq+0x130>)
   1d3a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d3aa:	8113      	strh	r3, [r2, #8]

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN)) != NULL)
   1d3ac:	2014      	movs	r0, #20
   1d3ae:	f7ff fe70 	bl	1d092 <l2cMsgAlloc>
   1d3b2:	9003      	str	r0, [sp, #12]
   1d3b4:	9b03      	ldr	r3, [sp, #12]
   1d3b6:	2b00      	cmp	r3, #0
   1d3b8:	d077      	beq.n	1d4aa <L2cDmConnUpdateReq+0x126>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
   1d3ba:	9b03      	ldr	r3, [sp, #12]
   1d3bc:	3308      	adds	r3, #8
   1d3be:	9302      	str	r3, [sp, #8]
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ);       /* command code */
   1d3c0:	9b02      	ldr	r3, [sp, #8]
   1d3c2:	1c5a      	adds	r2, r3, #1
   1d3c4:	9202      	str	r2, [sp, #8]
   1d3c6:	2212      	movs	r2, #18
   1d3c8:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, l2cCb.identifier);              /* identifier */
   1d3ca:	9b02      	ldr	r3, [sp, #8]
   1d3cc:	1c5a      	adds	r2, r3, #1
   1d3ce:	9202      	str	r2, [sp, #8]
   1d3d0:	4a39      	ldr	r2, [pc, #228]	; (1d4b8 <L2cDmConnUpdateReq+0x134>)
   1d3d2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   1d3d6:	701a      	strb	r2, [r3, #0]
    l2cSlaveCb.signId[handle] = l2cCb.identifier;
   1d3d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d3dc:	4a36      	ldr	r2, [pc, #216]	; (1d4b8 <L2cDmConnUpdateReq+0x134>)
   1d3de:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   1d3e2:	4a34      	ldr	r2, [pc, #208]	; (1d4b4 <L2cDmConnUpdateReq+0x130>)
   1d3e4:	4413      	add	r3, r2
   1d3e6:	460a      	mov	r2, r1
   1d3e8:	751a      	strb	r2, [r3, #20]
    l2cCb.identifier = L2C_NEXT_ID(l2cCb.identifier);
   1d3ea:	4b33      	ldr	r3, [pc, #204]	; (1d4b8 <L2cDmConnUpdateReq+0x134>)
   1d3ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1d3f0:	2bff      	cmp	r3, #255	; 0xff
   1d3f2:	d005      	beq.n	1d400 <L2cDmConnUpdateReq+0x7c>
   1d3f4:	4b30      	ldr	r3, [pc, #192]	; (1d4b8 <L2cDmConnUpdateReq+0x134>)
   1d3f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1d3fa:	3301      	adds	r3, #1
   1d3fc:	b2db      	uxtb	r3, r3
   1d3fe:	e000      	b.n	1d402 <L2cDmConnUpdateReq+0x7e>
   1d400:	2301      	movs	r3, #1
   1d402:	4a2d      	ldr	r2, [pc, #180]	; (1d4b8 <L2cDmConnUpdateReq+0x134>)
   1d404:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ_LEN);  /* parameter length */
   1d408:	9b02      	ldr	r3, [sp, #8]
   1d40a:	1c5a      	adds	r2, r3, #1
   1d40c:	9202      	str	r2, [sp, #8]
   1d40e:	2208      	movs	r2, #8
   1d410:	701a      	strb	r2, [r3, #0]
   1d412:	9b02      	ldr	r3, [sp, #8]
   1d414:	1c5a      	adds	r2, r3, #1
   1d416:	9202      	str	r2, [sp, #8]
   1d418:	2200      	movs	r2, #0
   1d41a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);   /* interval min */
   1d41c:	9b00      	ldr	r3, [sp, #0]
   1d41e:	8819      	ldrh	r1, [r3, #0]
   1d420:	9b02      	ldr	r3, [sp, #8]
   1d422:	1c5a      	adds	r2, r3, #1
   1d424:	9202      	str	r2, [sp, #8]
   1d426:	b2ca      	uxtb	r2, r1
   1d428:	701a      	strb	r2, [r3, #0]
   1d42a:	9b00      	ldr	r3, [sp, #0]
   1d42c:	881b      	ldrh	r3, [r3, #0]
   1d42e:	0a1b      	lsrs	r3, r3, #8
   1d430:	b299      	uxth	r1, r3
   1d432:	9b02      	ldr	r3, [sp, #8]
   1d434:	1c5a      	adds	r2, r3, #1
   1d436:	9202      	str	r2, [sp, #8]
   1d438:	b2ca      	uxtb	r2, r1
   1d43a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);   /* interval max */
   1d43c:	9b00      	ldr	r3, [sp, #0]
   1d43e:	8859      	ldrh	r1, [r3, #2]
   1d440:	9b02      	ldr	r3, [sp, #8]
   1d442:	1c5a      	adds	r2, r3, #1
   1d444:	9202      	str	r2, [sp, #8]
   1d446:	b2ca      	uxtb	r2, r1
   1d448:	701a      	strb	r2, [r3, #0]
   1d44a:	9b00      	ldr	r3, [sp, #0]
   1d44c:	885b      	ldrh	r3, [r3, #2]
   1d44e:	0a1b      	lsrs	r3, r3, #8
   1d450:	b299      	uxth	r1, r3
   1d452:	9b02      	ldr	r3, [sp, #8]
   1d454:	1c5a      	adds	r2, r3, #1
   1d456:	9202      	str	r2, [sp, #8]
   1d458:	b2ca      	uxtb	r2, r1
   1d45a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);       /* slave latency */
   1d45c:	9b00      	ldr	r3, [sp, #0]
   1d45e:	8899      	ldrh	r1, [r3, #4]
   1d460:	9b02      	ldr	r3, [sp, #8]
   1d462:	1c5a      	adds	r2, r3, #1
   1d464:	9202      	str	r2, [sp, #8]
   1d466:	b2ca      	uxtb	r2, r1
   1d468:	701a      	strb	r2, [r3, #0]
   1d46a:	9b00      	ldr	r3, [sp, #0]
   1d46c:	889b      	ldrh	r3, [r3, #4]
   1d46e:	0a1b      	lsrs	r3, r3, #8
   1d470:	b299      	uxth	r1, r3
   1d472:	9b02      	ldr	r3, [sp, #8]
   1d474:	1c5a      	adds	r2, r3, #1
   1d476:	9202      	str	r2, [sp, #8]
   1d478:	b2ca      	uxtb	r2, r1
   1d47a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);        /* timeout multiplier */
   1d47c:	9b00      	ldr	r3, [sp, #0]
   1d47e:	88d9      	ldrh	r1, [r3, #6]
   1d480:	9b02      	ldr	r3, [sp, #8]
   1d482:	1c5a      	adds	r2, r3, #1
   1d484:	9202      	str	r2, [sp, #8]
   1d486:	b2ca      	uxtb	r2, r1
   1d488:	701a      	strb	r2, [r3, #0]
   1d48a:	9b00      	ldr	r3, [sp, #0]
   1d48c:	88db      	ldrh	r3, [r3, #6]
   1d48e:	0a1b      	lsrs	r3, r3, #8
   1d490:	b299      	uxth	r1, r3
   1d492:	9b02      	ldr	r3, [sp, #8]
   1d494:	1c5a      	adds	r2, r3, #1
   1d496:	9202      	str	r2, [sp, #8]
   1d498:	b2ca      	uxtb	r2, r1
   1d49a:	701a      	strb	r2, [r3, #0]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN), pPacket);
   1d49c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1d4a0:	9b03      	ldr	r3, [sp, #12]
   1d4a2:	220c      	movs	r2, #12
   1d4a4:	2005      	movs	r0, #5
   1d4a6:	f7ff fe4f 	bl	1d148 <L2cDataReq>
  }
}
   1d4aa:	bf00      	nop
   1d4ac:	b005      	add	sp, #20
   1d4ae:	f85d fb04 	ldr.w	pc, [sp], #4
   1d4b2:	bf00      	nop
   1d4b4:	100051a8 	.word	0x100051a8
   1d4b8:	10005180 	.word	0x10005180

0001d4bc <L2cSlaveHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveHandlerInit(wsfHandlerId_t handlerId)
{
   1d4bc:	b082      	sub	sp, #8
   1d4be:	4603      	mov	r3, r0
   1d4c0:	f88d 3007 	strb.w	r3, [sp, #7]
  l2cSlaveCb.reqTimer.msg.event = L2C_MSG_REQ_TIMEOUT;
   1d4c4:	4b06      	ldr	r3, [pc, #24]	; (1d4e0 <L2cSlaveHandlerInit+0x24>)
   1d4c6:	2201      	movs	r2, #1
   1d4c8:	729a      	strb	r2, [r3, #10]
  l2cSlaveCb.reqTimer.handlerId = handlerId;
   1d4ca:	4a05      	ldr	r2, [pc, #20]	; (1d4e0 <L2cSlaveHandlerInit+0x24>)
   1d4cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d4d0:	7313      	strb	r3, [r2, #12]
  l2cSlaveCb.handlerId = handlerId;
   1d4d2:	4a03      	ldr	r2, [pc, #12]	; (1d4e0 <L2cSlaveHandlerInit+0x24>)
   1d4d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d4d8:	7413      	strb	r3, [r2, #16]
}
   1d4da:	bf00      	nop
   1d4dc:	b002      	add	sp, #8
   1d4de:	4770      	bx	lr
   1d4e0:	100051a8 	.word	0x100051a8

0001d4e4 <L2cSlaveHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1d4e4:	b500      	push	{lr}
   1d4e6:	b083      	sub	sp, #12
   1d4e8:	4603      	mov	r3, r0
   1d4ea:	9100      	str	r1, [sp, #0]
   1d4ec:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Handle message */
  if (pMsg != NULL)
   1d4f0:	9b00      	ldr	r3, [sp, #0]
   1d4f2:	2b00      	cmp	r3, #0
   1d4f4:	d006      	beq.n	1d504 <L2cSlaveHandler+0x20>
  {
    WSF_ASSERT(pMsg->event > 0 && pMsg->event <= L2C_MSG_TYPE_MAX);

    /* handle slave signaling request timeout */
    if (pMsg->event == L2C_MSG_REQ_TIMEOUT)
   1d4f6:	9b00      	ldr	r3, [sp, #0]
   1d4f8:	789b      	ldrb	r3, [r3, #2]
   1d4fa:	2b01      	cmp	r3, #1
   1d4fc:	d102      	bne.n	1d504 <L2cSlaveHandler+0x20>
    {
      l2cSlaveReqTimeout(pMsg);
   1d4fe:	9800      	ldr	r0, [sp, #0]
   1d500:	f7ff fe79 	bl	1d1f6 <l2cSlaveReqTimeout>
  /* Handle events */
  else if (event)
  {

  }
}
   1d504:	bf00      	nop
   1d506:	b003      	add	sp, #12
   1d508:	f85d fb04 	ldr.w	pc, [sp], #4

0001d50c <default_RNG>:
    return 1;
}

#else /* Some other platform */

static int default_RNG(uint8_t *dest, unsigned size) {
   1d50c:	b082      	sub	sp, #8
   1d50e:	9001      	str	r0, [sp, #4]
   1d510:	9100      	str	r1, [sp, #0]
    return 0;
   1d512:	2300      	movs	r3, #0
}
   1d514:	4618      	mov	r0, r3
   1d516:	b002      	add	sp, #8
   1d518:	4770      	bx	lr
	...

0001d51c <uECC_set_rng>:

#endif

static uECC_RNG_Function g_rng_function = &default_RNG;

void uECC_set_rng(uECC_RNG_Function rng_function) {
   1d51c:	b082      	sub	sp, #8
   1d51e:	9001      	str	r0, [sp, #4]
    g_rng_function = rng_function;
   1d520:	4a02      	ldr	r2, [pc, #8]	; (1d52c <uECC_set_rng+0x10>)
   1d522:	9b01      	ldr	r3, [sp, #4]
   1d524:	6013      	str	r3, [r2, #0]
}
   1d526:	bf00      	nop
   1d528:	b002      	add	sp, #8
   1d52a:	4770      	bx	lr
   1d52c:	10002bac 	.word	0x10002bac

0001d530 <vli_add>:
#define STR2(thing) #thing
#define STR(thing) STR2(thing)

#if (uECC_ASM == uECC_asm_fast)

static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   1d530:	b430      	push	{r4, r5}
   1d532:	b088      	sub	sp, #32
   1d534:	9003      	str	r0, [sp, #12]
   1d536:	9102      	str	r1, [sp, #8]
   1d538:	9201      	str	r2, [sp, #4]
    uint32_t carry = 0;
   1d53a:	2300      	movs	r3, #0
   1d53c:	9307      	str	r3, [sp, #28]
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   1d53e:	9803      	ldr	r0, [sp, #12]
   1d540:	9902      	ldr	r1, [sp, #8]
   1d542:	9a01      	ldr	r2, [sp, #4]
   1d544:	9b07      	ldr	r3, [sp, #28]
   1d546:	c920      	ldmia	r1!, {r5}
   1d548:	ca10      	ldmia	r2!, {r4}
   1d54a:	192d      	adds	r5, r5, r4
   1d54c:	c020      	stmia	r0!, {r5}
   1d54e:	c920      	ldmia	r1!, {r5}
   1d550:	ca10      	ldmia	r2!, {r4}
   1d552:	4165      	adcs	r5, r4
   1d554:	c020      	stmia	r0!, {r5}
   1d556:	c920      	ldmia	r1!, {r5}
   1d558:	ca10      	ldmia	r2!, {r4}
   1d55a:	4165      	adcs	r5, r4
   1d55c:	c020      	stmia	r0!, {r5}
   1d55e:	c920      	ldmia	r1!, {r5}
   1d560:	ca10      	ldmia	r2!, {r4}
   1d562:	4165      	adcs	r5, r4
   1d564:	c020      	stmia	r0!, {r5}
   1d566:	c920      	ldmia	r1!, {r5}
   1d568:	ca10      	ldmia	r2!, {r4}
   1d56a:	4165      	adcs	r5, r4
   1d56c:	c020      	stmia	r0!, {r5}
   1d56e:	c920      	ldmia	r1!, {r5}
   1d570:	ca10      	ldmia	r2!, {r4}
   1d572:	4165      	adcs	r5, r4
   1d574:	c020      	stmia	r0!, {r5}
   1d576:	c920      	ldmia	r1!, {r5}
   1d578:	ca10      	ldmia	r2!, {r4}
   1d57a:	4165      	adcs	r5, r4
   1d57c:	c020      	stmia	r0!, {r5}
   1d57e:	c920      	ldmia	r1!, {r5}
   1d580:	ca10      	ldmia	r2!, {r4}
   1d582:	4165      	adcs	r5, r4
   1d584:	c020      	stmia	r0!, {r5}
   1d586:	415b      	adcs	r3, r3
   1d588:	9003      	str	r0, [sp, #12]
   1d58a:	9102      	str	r1, [sp, #8]
   1d58c:	9201      	str	r2, [sp, #4]
   1d58e:	9307      	str	r3, [sp, #28]
   1d590:	9506      	str	r5, [sp, #24]
   1d592:	9405      	str	r4, [sp, #20]
          [carry] "+r" (carry), [left] "=r" (left_word), [right] "=r" (right_word)
    #endif
        :
        : "cc", "memory"
    );
    return carry;
   1d594:	9b07      	ldr	r3, [sp, #28]
}
   1d596:	4618      	mov	r0, r3
   1d598:	b008      	add	sp, #32
   1d59a:	bc30      	pop	{r4, r5}
   1d59c:	4770      	bx	lr

0001d59e <vli_sub>:
#define asm_add 1

static uint32_t vli_sub(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   1d59e:	b430      	push	{r4, r5}
   1d5a0:	b088      	sub	sp, #32
   1d5a2:	9003      	str	r0, [sp, #12]
   1d5a4:	9102      	str	r1, [sp, #8]
   1d5a6:	9201      	str	r2, [sp, #4]
    uint32_t carry = 0;
   1d5a8:	2300      	movs	r3, #0
   1d5aa:	9307      	str	r3, [sp, #28]
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   1d5ac:	9803      	ldr	r0, [sp, #12]
   1d5ae:	9902      	ldr	r1, [sp, #8]
   1d5b0:	9a01      	ldr	r2, [sp, #4]
   1d5b2:	9b07      	ldr	r3, [sp, #28]
   1d5b4:	c920      	ldmia	r1!, {r5}
   1d5b6:	ca10      	ldmia	r2!, {r4}
   1d5b8:	1b2d      	subs	r5, r5, r4
   1d5ba:	c020      	stmia	r0!, {r5}
   1d5bc:	c920      	ldmia	r1!, {r5}
   1d5be:	ca10      	ldmia	r2!, {r4}
   1d5c0:	41a5      	sbcs	r5, r4
   1d5c2:	c020      	stmia	r0!, {r5}
   1d5c4:	c920      	ldmia	r1!, {r5}
   1d5c6:	ca10      	ldmia	r2!, {r4}
   1d5c8:	41a5      	sbcs	r5, r4
   1d5ca:	c020      	stmia	r0!, {r5}
   1d5cc:	c920      	ldmia	r1!, {r5}
   1d5ce:	ca10      	ldmia	r2!, {r4}
   1d5d0:	41a5      	sbcs	r5, r4
   1d5d2:	c020      	stmia	r0!, {r5}
   1d5d4:	c920      	ldmia	r1!, {r5}
   1d5d6:	ca10      	ldmia	r2!, {r4}
   1d5d8:	41a5      	sbcs	r5, r4
   1d5da:	c020      	stmia	r0!, {r5}
   1d5dc:	c920      	ldmia	r1!, {r5}
   1d5de:	ca10      	ldmia	r2!, {r4}
   1d5e0:	41a5      	sbcs	r5, r4
   1d5e2:	c020      	stmia	r0!, {r5}
   1d5e4:	c920      	ldmia	r1!, {r5}
   1d5e6:	ca10      	ldmia	r2!, {r4}
   1d5e8:	41a5      	sbcs	r5, r4
   1d5ea:	c020      	stmia	r0!, {r5}
   1d5ec:	c920      	ldmia	r1!, {r5}
   1d5ee:	ca10      	ldmia	r2!, {r4}
   1d5f0:	41a5      	sbcs	r5, r4
   1d5f2:	c020      	stmia	r0!, {r5}
   1d5f4:	415b      	adcs	r3, r3
   1d5f6:	9003      	str	r0, [sp, #12]
   1d5f8:	9102      	str	r1, [sp, #8]
   1d5fa:	9201      	str	r2, [sp, #4]
   1d5fc:	9307      	str	r3, [sp, #28]
   1d5fe:	9506      	str	r5, [sp, #24]
   1d600:	9405      	str	r4, [sp, #20]
          [carry] "+r" (carry), [left] "=r" (left_word), [right] "=r" (right_word)
    #endif
        :
        : "cc", "memory"
    );
    return !carry; // note that on ARM, carry flag set means "no borrow" when subtracting
   1d602:	9b07      	ldr	r3, [sp, #28]
   1d604:	2b00      	cmp	r3, #0
   1d606:	bf0c      	ite	eq
   1d608:	2301      	moveq	r3, #1
   1d60a:	2300      	movne	r3, #0
   1d60c:	b2db      	uxtb	r3, r3
                   // (for some reason...)
}
   1d60e:	4618      	mov	r0, r3
   1d610:	b008      	add	sp, #32
   1d612:	bc30      	pop	{r4, r5}
   1d614:	4770      	bx	lr

0001d616 <vli_mult>:
}
#define asm_mult 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_mult(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   1d616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d61a:	b085      	sub	sp, #20
   1d61c:	9003      	str	r0, [sp, #12]
   1d61e:	9102      	str	r1, [sp, #8]
   1d620:	9201      	str	r2, [sp, #4]
    register uint32_t *r0 __asm__("r0") = result;
   1d622:	9803      	ldr	r0, [sp, #12]
    register const uint32_t *r1 __asm__("r1") = left;
   1d624:	9902      	ldr	r1, [sp, #8]
    register const uint32_t *r2 __asm__("r2") = right;
   1d626:	9a01      	ldr	r2, [sp, #4]

    __asm__ volatile (
   1d628:	f100 0018 	add.w	r0, r0, #24
   1d62c:	f102 0218 	add.w	r2, r2, #24
   1d630:	c918      	ldmia	r1!, {r3, r4}
   1d632:	cac0      	ldmia	r2!, {r6, r7}
   1d634:	fba3 bc06 	umull	fp, ip, r3, r6
   1d638:	f840 bb04 	str.w	fp, [r0], #4
   1d63c:	f04f 0a00 	mov.w	sl, #0
   1d640:	fba3 b907 	umull	fp, r9, r3, r7
   1d644:	eb1c 0c0b 	adds.w	ip, ip, fp
   1d648:	f149 0900 	adc.w	r9, r9, #0
   1d64c:	fba4 be06 	umull	fp, lr, r4, r6
   1d650:	eb1c 0c0b 	adds.w	ip, ip, fp
   1d654:	eb59 090e 	adcs.w	r9, r9, lr
   1d658:	f14a 0a00 	adc.w	sl, sl, #0
   1d65c:	f840 cb04 	str.w	ip, [r0], #4
   1d660:	fba4 ce07 	umull	ip, lr, r4, r7
   1d664:	eb19 090c 	adds.w	r9, r9, ip
   1d668:	eb4a 0a0e 	adc.w	sl, sl, lr
   1d66c:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   1d670:	f1a0 001c 	sub.w	r0, r0, #28
   1d674:	f1a2 0214 	sub.w	r2, r2, #20
   1d678:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   1d67c:	c920      	ldmia	r1!, {r5}
   1d67e:	fba3 bc06 	umull	fp, ip, r3, r6
   1d682:	f840 bb04 	str.w	fp, [r0], #4
   1d686:	f04f 0a00 	mov.w	sl, #0
   1d68a:	fba3 b907 	umull	fp, r9, r3, r7
   1d68e:	eb1c 0c0b 	adds.w	ip, ip, fp
   1d692:	f149 0900 	adc.w	r9, r9, #0
   1d696:	fba4 be06 	umull	fp, lr, r4, r6
   1d69a:	eb1c 0c0b 	adds.w	ip, ip, fp
   1d69e:	eb59 090e 	adcs.w	r9, r9, lr
   1d6a2:	f14a 0a00 	adc.w	sl, sl, #0
   1d6a6:	f840 cb04 	str.w	ip, [r0], #4
   1d6aa:	f04f 0b00 	mov.w	fp, #0
   1d6ae:	fba3 ce08 	umull	ip, lr, r3, r8
   1d6b2:	eb19 090c 	adds.w	r9, r9, ip
   1d6b6:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1d6ba:	f14b 0b00 	adc.w	fp, fp, #0
   1d6be:	fba4 ce07 	umull	ip, lr, r4, r7
   1d6c2:	eb19 090c 	adds.w	r9, r9, ip
   1d6c6:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1d6ca:	f14b 0b00 	adc.w	fp, fp, #0
   1d6ce:	fba5 ce06 	umull	ip, lr, r5, r6
   1d6d2:	eb19 090c 	adds.w	r9, r9, ip
   1d6d6:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1d6da:	f14b 0b00 	adc.w	fp, fp, #0
   1d6de:	f840 9b04 	str.w	r9, [r0], #4
   1d6e2:	c908      	ldmia	r1!, {r3}
   1d6e4:	f04f 0c00 	mov.w	ip, #0
   1d6e8:	fba4 e908 	umull	lr, r9, r4, r8
   1d6ec:	eb1a 0a0e 	adds.w	sl, sl, lr
   1d6f0:	eb5b 0b09 	adcs.w	fp, fp, r9
   1d6f4:	f14c 0c00 	adc.w	ip, ip, #0
   1d6f8:	fba5 e907 	umull	lr, r9, r5, r7
   1d6fc:	eb1a 0a0e 	adds.w	sl, sl, lr
   1d700:	eb5b 0b09 	adcs.w	fp, fp, r9
   1d704:	f14c 0c00 	adc.w	ip, ip, #0
   1d708:	fba3 e906 	umull	lr, r9, r3, r6
   1d70c:	eb1a 0a0e 	adds.w	sl, sl, lr
   1d710:	eb5b 0b09 	adcs.w	fp, fp, r9
   1d714:	f14c 0c00 	adc.w	ip, ip, #0
   1d718:	f8d0 e000 	ldr.w	lr, [r0]
   1d71c:	eb1a 0a0e 	adds.w	sl, sl, lr
   1d720:	f15b 0b00 	adcs.w	fp, fp, #0
   1d724:	f14c 0c00 	adc.w	ip, ip, #0
   1d728:	f840 ab04 	str.w	sl, [r0], #4
   1d72c:	c910      	ldmia	r1!, {r4}
   1d72e:	f04f 0e00 	mov.w	lr, #0
   1d732:	fba5 9a08 	umull	r9, sl, r5, r8
   1d736:	eb1b 0b09 	adds.w	fp, fp, r9
   1d73a:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1d73e:	f14e 0e00 	adc.w	lr, lr, #0
   1d742:	fba3 9a07 	umull	r9, sl, r3, r7
   1d746:	eb1b 0b09 	adds.w	fp, fp, r9
   1d74a:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1d74e:	f14e 0e00 	adc.w	lr, lr, #0
   1d752:	fba4 9a06 	umull	r9, sl, r4, r6
   1d756:	eb1b 0b09 	adds.w	fp, fp, r9
   1d75a:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1d75e:	f14e 0e00 	adc.w	lr, lr, #0
   1d762:	f8d0 9000 	ldr.w	r9, [r0]
   1d766:	eb1b 0b09 	adds.w	fp, fp, r9
   1d76a:	f15c 0c00 	adcs.w	ip, ip, #0
   1d76e:	f14e 0e00 	adc.w	lr, lr, #0
   1d772:	f840 bb04 	str.w	fp, [r0], #4
   1d776:	ca40      	ldmia	r2!, {r6}
   1d778:	f04f 0900 	mov.w	r9, #0
   1d77c:	fba5 ab06 	umull	sl, fp, r5, r6
   1d780:	eb1c 0c0a 	adds.w	ip, ip, sl
   1d784:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1d788:	f149 0900 	adc.w	r9, r9, #0
   1d78c:	fba3 ab08 	umull	sl, fp, r3, r8
   1d790:	eb1c 0c0a 	adds.w	ip, ip, sl
   1d794:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1d798:	f149 0900 	adc.w	r9, r9, #0
   1d79c:	fba4 ab07 	umull	sl, fp, r4, r7
   1d7a0:	eb1c 0c0a 	adds.w	ip, ip, sl
   1d7a4:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1d7a8:	f149 0900 	adc.w	r9, r9, #0
   1d7ac:	f8d0 a000 	ldr.w	sl, [r0]
   1d7b0:	eb1c 0c0a 	adds.w	ip, ip, sl
   1d7b4:	f15e 0e00 	adcs.w	lr, lr, #0
   1d7b8:	f149 0900 	adc.w	r9, r9, #0
   1d7bc:	f840 cb04 	str.w	ip, [r0], #4
   1d7c0:	ca80      	ldmia	r2!, {r7}
   1d7c2:	f04f 0a00 	mov.w	sl, #0
   1d7c6:	fba5 bc07 	umull	fp, ip, r5, r7
   1d7ca:	eb1e 0e0b 	adds.w	lr, lr, fp
   1d7ce:	eb59 090c 	adcs.w	r9, r9, ip
   1d7d2:	f14a 0a00 	adc.w	sl, sl, #0
   1d7d6:	fba3 bc06 	umull	fp, ip, r3, r6
   1d7da:	eb1e 0e0b 	adds.w	lr, lr, fp
   1d7de:	eb59 090c 	adcs.w	r9, r9, ip
   1d7e2:	f14a 0a00 	adc.w	sl, sl, #0
   1d7e6:	fba4 bc08 	umull	fp, ip, r4, r8
   1d7ea:	eb1e 0e0b 	adds.w	lr, lr, fp
   1d7ee:	eb59 090c 	adcs.w	r9, r9, ip
   1d7f2:	f14a 0a00 	adc.w	sl, sl, #0
   1d7f6:	f8d0 b000 	ldr.w	fp, [r0]
   1d7fa:	eb1e 0e0b 	adds.w	lr, lr, fp
   1d7fe:	f159 0900 	adcs.w	r9, r9, #0
   1d802:	f14a 0a00 	adc.w	sl, sl, #0
   1d806:	f840 eb04 	str.w	lr, [r0], #4
   1d80a:	f04f 0b00 	mov.w	fp, #0
   1d80e:	fba3 ce07 	umull	ip, lr, r3, r7
   1d812:	eb19 090c 	adds.w	r9, r9, ip
   1d816:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1d81a:	f14b 0b00 	adc.w	fp, fp, #0
   1d81e:	fba4 ce06 	umull	ip, lr, r4, r6
   1d822:	eb19 090c 	adds.w	r9, r9, ip
   1d826:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1d82a:	f14b 0b00 	adc.w	fp, fp, #0
   1d82e:	f840 9b04 	str.w	r9, [r0], #4
   1d832:	fba4 e907 	umull	lr, r9, r4, r7
   1d836:	eb1a 0a0e 	adds.w	sl, sl, lr
   1d83a:	eb4b 0b09 	adc.w	fp, fp, r9
   1d83e:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   1d842:	f1a0 0034 	sub.w	r0, r0, #52	; 0x34
   1d846:	f1a1 0114 	sub.w	r1, r1, #20
   1d84a:	f1a2 0220 	sub.w	r2, r2, #32
   1d84e:	c938      	ldmia	r1!, {r3, r4, r5}
   1d850:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   1d854:	fba3 bc06 	umull	fp, ip, r3, r6
   1d858:	f840 bb04 	str.w	fp, [r0], #4
   1d85c:	f04f 0a00 	mov.w	sl, #0
   1d860:	fba3 b907 	umull	fp, r9, r3, r7
   1d864:	eb1c 0c0b 	adds.w	ip, ip, fp
   1d868:	f149 0900 	adc.w	r9, r9, #0
   1d86c:	fba4 be06 	umull	fp, lr, r4, r6
   1d870:	eb1c 0c0b 	adds.w	ip, ip, fp
   1d874:	eb59 090e 	adcs.w	r9, r9, lr
   1d878:	f14a 0a00 	adc.w	sl, sl, #0
   1d87c:	f840 cb04 	str.w	ip, [r0], #4
   1d880:	f04f 0b00 	mov.w	fp, #0
   1d884:	fba3 ce08 	umull	ip, lr, r3, r8
   1d888:	eb19 090c 	adds.w	r9, r9, ip
   1d88c:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1d890:	f14b 0b00 	adc.w	fp, fp, #0
   1d894:	fba4 ce07 	umull	ip, lr, r4, r7
   1d898:	eb19 090c 	adds.w	r9, r9, ip
   1d89c:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1d8a0:	f14b 0b00 	adc.w	fp, fp, #0
   1d8a4:	fba5 ce06 	umull	ip, lr, r5, r6
   1d8a8:	eb19 090c 	adds.w	r9, r9, ip
   1d8ac:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1d8b0:	f14b 0b00 	adc.w	fp, fp, #0
   1d8b4:	f840 9b04 	str.w	r9, [r0], #4
   1d8b8:	c908      	ldmia	r1!, {r3}
   1d8ba:	f04f 0c00 	mov.w	ip, #0
   1d8be:	fba4 e908 	umull	lr, r9, r4, r8
   1d8c2:	eb1a 0a0e 	adds.w	sl, sl, lr
   1d8c6:	eb5b 0b09 	adcs.w	fp, fp, r9
   1d8ca:	f14c 0c00 	adc.w	ip, ip, #0
   1d8ce:	fba5 e907 	umull	lr, r9, r5, r7
   1d8d2:	eb1a 0a0e 	adds.w	sl, sl, lr
   1d8d6:	eb5b 0b09 	adcs.w	fp, fp, r9
   1d8da:	f14c 0c00 	adc.w	ip, ip, #0
   1d8de:	fba3 e906 	umull	lr, r9, r3, r6
   1d8e2:	eb1a 0a0e 	adds.w	sl, sl, lr
   1d8e6:	eb5b 0b09 	adcs.w	fp, fp, r9
   1d8ea:	f14c 0c00 	adc.w	ip, ip, #0
   1d8ee:	f8d0 e000 	ldr.w	lr, [r0]
   1d8f2:	eb1a 0a0e 	adds.w	sl, sl, lr
   1d8f6:	f15b 0b00 	adcs.w	fp, fp, #0
   1d8fa:	f14c 0c00 	adc.w	ip, ip, #0
   1d8fe:	f840 ab04 	str.w	sl, [r0], #4
   1d902:	c910      	ldmia	r1!, {r4}
   1d904:	f04f 0e00 	mov.w	lr, #0
   1d908:	fba5 9a08 	umull	r9, sl, r5, r8
   1d90c:	eb1b 0b09 	adds.w	fp, fp, r9
   1d910:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1d914:	f14e 0e00 	adc.w	lr, lr, #0
   1d918:	fba3 9a07 	umull	r9, sl, r3, r7
   1d91c:	eb1b 0b09 	adds.w	fp, fp, r9
   1d920:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1d924:	f14e 0e00 	adc.w	lr, lr, #0
   1d928:	fba4 9a06 	umull	r9, sl, r4, r6
   1d92c:	eb1b 0b09 	adds.w	fp, fp, r9
   1d930:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1d934:	f14e 0e00 	adc.w	lr, lr, #0
   1d938:	f8d0 9000 	ldr.w	r9, [r0]
   1d93c:	eb1b 0b09 	adds.w	fp, fp, r9
   1d940:	f15c 0c00 	adcs.w	ip, ip, #0
   1d944:	f14e 0e00 	adc.w	lr, lr, #0
   1d948:	f840 bb04 	str.w	fp, [r0], #4
   1d94c:	c920      	ldmia	r1!, {r5}
   1d94e:	f04f 0900 	mov.w	r9, #0
   1d952:	fba3 ab08 	umull	sl, fp, r3, r8
   1d956:	eb1c 0c0a 	adds.w	ip, ip, sl
   1d95a:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1d95e:	f149 0900 	adc.w	r9, r9, #0
   1d962:	fba4 ab07 	umull	sl, fp, r4, r7
   1d966:	eb1c 0c0a 	adds.w	ip, ip, sl
   1d96a:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1d96e:	f149 0900 	adc.w	r9, r9, #0
   1d972:	fba5 ab06 	umull	sl, fp, r5, r6
   1d976:	eb1c 0c0a 	adds.w	ip, ip, sl
   1d97a:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1d97e:	f149 0900 	adc.w	r9, r9, #0
   1d982:	f8d0 a000 	ldr.w	sl, [r0]
   1d986:	eb1c 0c0a 	adds.w	ip, ip, sl
   1d98a:	f15e 0e00 	adcs.w	lr, lr, #0
   1d98e:	f149 0900 	adc.w	r9, r9, #0
   1d992:	f840 cb04 	str.w	ip, [r0], #4
   1d996:	c908      	ldmia	r1!, {r3}
   1d998:	f04f 0a00 	mov.w	sl, #0
   1d99c:	fba4 bc08 	umull	fp, ip, r4, r8
   1d9a0:	eb1e 0e0b 	adds.w	lr, lr, fp
   1d9a4:	eb59 090c 	adcs.w	r9, r9, ip
   1d9a8:	f14a 0a00 	adc.w	sl, sl, #0
   1d9ac:	fba5 bc07 	umull	fp, ip, r5, r7
   1d9b0:	eb1e 0e0b 	adds.w	lr, lr, fp
   1d9b4:	eb59 090c 	adcs.w	r9, r9, ip
   1d9b8:	f14a 0a00 	adc.w	sl, sl, #0
   1d9bc:	fba3 bc06 	umull	fp, ip, r3, r6
   1d9c0:	eb1e 0e0b 	adds.w	lr, lr, fp
   1d9c4:	eb59 090c 	adcs.w	r9, r9, ip
   1d9c8:	f14a 0a00 	adc.w	sl, sl, #0
   1d9cc:	f8d0 b000 	ldr.w	fp, [r0]
   1d9d0:	eb1e 0e0b 	adds.w	lr, lr, fp
   1d9d4:	f159 0900 	adcs.w	r9, r9, #0
   1d9d8:	f14a 0a00 	adc.w	sl, sl, #0
   1d9dc:	f840 eb04 	str.w	lr, [r0], #4
   1d9e0:	c910      	ldmia	r1!, {r4}
   1d9e2:	f04f 0b00 	mov.w	fp, #0
   1d9e6:	fba5 ce08 	umull	ip, lr, r5, r8
   1d9ea:	eb19 090c 	adds.w	r9, r9, ip
   1d9ee:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1d9f2:	f14b 0b00 	adc.w	fp, fp, #0
   1d9f6:	fba3 ce07 	umull	ip, lr, r3, r7
   1d9fa:	eb19 090c 	adds.w	r9, r9, ip
   1d9fe:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1da02:	f14b 0b00 	adc.w	fp, fp, #0
   1da06:	fba4 ce06 	umull	ip, lr, r4, r6
   1da0a:	eb19 090c 	adds.w	r9, r9, ip
   1da0e:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1da12:	f14b 0b00 	adc.w	fp, fp, #0
   1da16:	f8d0 c000 	ldr.w	ip, [r0]
   1da1a:	eb19 090c 	adds.w	r9, r9, ip
   1da1e:	f15a 0a00 	adcs.w	sl, sl, #0
   1da22:	f14b 0b00 	adc.w	fp, fp, #0
   1da26:	f840 9b04 	str.w	r9, [r0], #4
   1da2a:	ca40      	ldmia	r2!, {r6}
   1da2c:	f04f 0c00 	mov.w	ip, #0
   1da30:	fba5 e906 	umull	lr, r9, r5, r6
   1da34:	eb1a 0a0e 	adds.w	sl, sl, lr
   1da38:	eb5b 0b09 	adcs.w	fp, fp, r9
   1da3c:	f14c 0c00 	adc.w	ip, ip, #0
   1da40:	fba3 e908 	umull	lr, r9, r3, r8
   1da44:	eb1a 0a0e 	adds.w	sl, sl, lr
   1da48:	eb5b 0b09 	adcs.w	fp, fp, r9
   1da4c:	f14c 0c00 	adc.w	ip, ip, #0
   1da50:	fba4 e907 	umull	lr, r9, r4, r7
   1da54:	eb1a 0a0e 	adds.w	sl, sl, lr
   1da58:	eb5b 0b09 	adcs.w	fp, fp, r9
   1da5c:	f14c 0c00 	adc.w	ip, ip, #0
   1da60:	f8d0 e000 	ldr.w	lr, [r0]
   1da64:	eb1a 0a0e 	adds.w	sl, sl, lr
   1da68:	f15b 0b00 	adcs.w	fp, fp, #0
   1da6c:	f14c 0c00 	adc.w	ip, ip, #0
   1da70:	f840 ab04 	str.w	sl, [r0], #4
   1da74:	ca80      	ldmia	r2!, {r7}
   1da76:	f04f 0e00 	mov.w	lr, #0
   1da7a:	fba5 9a07 	umull	r9, sl, r5, r7
   1da7e:	eb1b 0b09 	adds.w	fp, fp, r9
   1da82:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1da86:	f14e 0e00 	adc.w	lr, lr, #0
   1da8a:	fba3 9a06 	umull	r9, sl, r3, r6
   1da8e:	eb1b 0b09 	adds.w	fp, fp, r9
   1da92:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1da96:	f14e 0e00 	adc.w	lr, lr, #0
   1da9a:	fba4 9a08 	umull	r9, sl, r4, r8
   1da9e:	eb1b 0b09 	adds.w	fp, fp, r9
   1daa2:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1daa6:	f14e 0e00 	adc.w	lr, lr, #0
   1daaa:	f8d0 9000 	ldr.w	r9, [r0]
   1daae:	eb1b 0b09 	adds.w	fp, fp, r9
   1dab2:	f15c 0c00 	adcs.w	ip, ip, #0
   1dab6:	f14e 0e00 	adc.w	lr, lr, #0
   1daba:	f840 bb04 	str.w	fp, [r0], #4
   1dabe:	f852 8b04 	ldr.w	r8, [r2], #4
   1dac2:	f04f 0900 	mov.w	r9, #0
   1dac6:	fba5 ab08 	umull	sl, fp, r5, r8
   1daca:	eb1c 0c0a 	adds.w	ip, ip, sl
   1dace:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1dad2:	f149 0900 	adc.w	r9, r9, #0
   1dad6:	fba3 ab07 	umull	sl, fp, r3, r7
   1dada:	eb1c 0c0a 	adds.w	ip, ip, sl
   1dade:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1dae2:	f149 0900 	adc.w	r9, r9, #0
   1dae6:	fba4 ab06 	umull	sl, fp, r4, r6
   1daea:	eb1c 0c0a 	adds.w	ip, ip, sl
   1daee:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1daf2:	f149 0900 	adc.w	r9, r9, #0
   1daf6:	f8d0 a000 	ldr.w	sl, [r0]
   1dafa:	eb1c 0c0a 	adds.w	ip, ip, sl
   1dafe:	f15e 0e00 	adcs.w	lr, lr, #0
   1db02:	f149 0900 	adc.w	r9, r9, #0
   1db06:	f840 cb04 	str.w	ip, [r0], #4
   1db0a:	ca40      	ldmia	r2!, {r6}
   1db0c:	f04f 0a00 	mov.w	sl, #0
   1db10:	fba5 bc06 	umull	fp, ip, r5, r6
   1db14:	eb1e 0e0b 	adds.w	lr, lr, fp
   1db18:	eb59 090c 	adcs.w	r9, r9, ip
   1db1c:	f14a 0a00 	adc.w	sl, sl, #0
   1db20:	fba3 bc08 	umull	fp, ip, r3, r8
   1db24:	eb1e 0e0b 	adds.w	lr, lr, fp
   1db28:	eb59 090c 	adcs.w	r9, r9, ip
   1db2c:	f14a 0a00 	adc.w	sl, sl, #0
   1db30:	fba4 bc07 	umull	fp, ip, r4, r7
   1db34:	eb1e 0e0b 	adds.w	lr, lr, fp
   1db38:	eb59 090c 	adcs.w	r9, r9, ip
   1db3c:	f14a 0a00 	adc.w	sl, sl, #0
   1db40:	f8d0 b000 	ldr.w	fp, [r0]
   1db44:	eb1e 0e0b 	adds.w	lr, lr, fp
   1db48:	f159 0900 	adcs.w	r9, r9, #0
   1db4c:	f14a 0a00 	adc.w	sl, sl, #0
   1db50:	f840 eb04 	str.w	lr, [r0], #4
   1db54:	ca80      	ldmia	r2!, {r7}
   1db56:	f04f 0b00 	mov.w	fp, #0
   1db5a:	fba5 ce07 	umull	ip, lr, r5, r7
   1db5e:	eb19 090c 	adds.w	r9, r9, ip
   1db62:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1db66:	f14b 0b00 	adc.w	fp, fp, #0
   1db6a:	fba3 ce06 	umull	ip, lr, r3, r6
   1db6e:	eb19 090c 	adds.w	r9, r9, ip
   1db72:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1db76:	f14b 0b00 	adc.w	fp, fp, #0
   1db7a:	fba4 ce08 	umull	ip, lr, r4, r8
   1db7e:	eb19 090c 	adds.w	r9, r9, ip
   1db82:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1db86:	f14b 0b00 	adc.w	fp, fp, #0
   1db8a:	f8d0 c000 	ldr.w	ip, [r0]
   1db8e:	eb19 090c 	adds.w	r9, r9, ip
   1db92:	f15a 0a00 	adcs.w	sl, sl, #0
   1db96:	f14b 0b00 	adc.w	fp, fp, #0
   1db9a:	f840 9b04 	str.w	r9, [r0], #4
   1db9e:	f04f 0c00 	mov.w	ip, #0
   1dba2:	fba3 e907 	umull	lr, r9, r3, r7
   1dba6:	eb1a 0a0e 	adds.w	sl, sl, lr
   1dbaa:	eb5b 0b09 	adcs.w	fp, fp, r9
   1dbae:	f14c 0c00 	adc.w	ip, ip, #0
   1dbb2:	fba4 e906 	umull	lr, r9, r4, r6
   1dbb6:	eb1a 0a0e 	adds.w	sl, sl, lr
   1dbba:	eb5b 0b09 	adcs.w	fp, fp, r9
   1dbbe:	f14c 0c00 	adc.w	ip, ip, #0
   1dbc2:	f840 ab04 	str.w	sl, [r0], #4
   1dbc6:	fba4 9a07 	umull	r9, sl, r4, r7
   1dbca:	eb1b 0b09 	adds.w	fp, fp, r9
   1dbce:	eb4c 0c0a 	adc.w	ip, ip, sl
   1dbd2:	e8a0 1800 	stmia.w	r0!, {fp, ip}
    #endif
        : "+r" (r0), "+r" (r1), "+r" (r2)
        :
        : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   1dbd6:	bf00      	nop
   1dbd8:	b005      	add	sp, #20
   1dbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dbde <vli_square>:
}
#define asm_square 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_square(uint32_t *result, const uint32_t *left) {
   1dbde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbe2:	b083      	sub	sp, #12
   1dbe4:	9001      	str	r0, [sp, #4]
   1dbe6:	9100      	str	r1, [sp, #0]
    register uint32_t *r0 __asm__("r0") = result;
   1dbe8:	9801      	ldr	r0, [sp, #4]
    register const uint32_t *r1 __asm__("r1") = left;
   1dbea:	9900      	ldr	r1, [sp, #0]

    __asm__ volatile (
   1dbec:	c90c      	ldmia	r1!, {r2, r3}
   1dbee:	f101 0110 	add.w	r1, r1, #16
   1dbf2:	c960      	ldmia	r1!, {r5, r6}
   1dbf4:	f100 0018 	add.w	r0, r0, #24
   1dbf8:	fba2 8905 	umull	r8, r9, r2, r5
   1dbfc:	f840 8b04 	str.w	r8, [r0], #4
   1dc00:	fba2 ca06 	umull	ip, sl, r2, r6
   1dc04:	eb19 090c 	adds.w	r9, r9, ip
   1dc08:	f14a 0a00 	adc.w	sl, sl, #0
   1dc0c:	f840 9b04 	str.w	r9, [r0], #4
   1dc10:	fba3 8906 	umull	r8, r9, r3, r6
   1dc14:	eb1a 0a08 	adds.w	sl, sl, r8
   1dc18:	f149 0b00 	adc.w	fp, r9, #0
   1dc1c:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   1dc20:	f1a0 0028 	sub.w	r0, r0, #40	; 0x28
   1dc24:	f1a1 0120 	sub.w	r1, r1, #32
   1dc28:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
   1dc2a:	fba2 bc02 	umull	fp, ip, r2, r2
   1dc2e:	f840 bb04 	str.w	fp, [r0], #4
   1dc32:	f04f 0900 	mov.w	r9, #0
   1dc36:	fba2 ab03 	umull	sl, fp, r2, r3
   1dc3a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1dc3e:	f15b 0800 	adcs.w	r8, fp, #0
   1dc42:	f149 0900 	adc.w	r9, r9, #0
   1dc46:	eb1c 0c0a 	adds.w	ip, ip, sl
   1dc4a:	eb58 080b 	adcs.w	r8, r8, fp
   1dc4e:	f149 0900 	adc.w	r9, r9, #0
   1dc52:	f840 cb04 	str.w	ip, [r0], #4
   1dc56:	f04f 0a00 	mov.w	sl, #0
   1dc5a:	fba2 bc04 	umull	fp, ip, r2, r4
   1dc5e:	eb1b 0b0b 	adds.w	fp, fp, fp
   1dc62:	eb5c 0c0c 	adcs.w	ip, ip, ip
   1dc66:	f14a 0a00 	adc.w	sl, sl, #0
   1dc6a:	eb18 080b 	adds.w	r8, r8, fp
   1dc6e:	eb59 090c 	adcs.w	r9, r9, ip
   1dc72:	f14a 0a00 	adc.w	sl, sl, #0
   1dc76:	fba3 bc03 	umull	fp, ip, r3, r3
   1dc7a:	eb18 080b 	adds.w	r8, r8, fp
   1dc7e:	eb59 090c 	adcs.w	r9, r9, ip
   1dc82:	f14a 0a00 	adc.w	sl, sl, #0
   1dc86:	f840 8b04 	str.w	r8, [r0], #4
   1dc8a:	f04f 0c00 	mov.w	ip, #0
   1dc8e:	fba2 8b05 	umull	r8, fp, r2, r5
   1dc92:	46de      	mov	lr, fp
   1dc94:	fbe3 8b04 	umlal	r8, fp, r3, r4
   1dc98:	45de      	cmp	lr, fp
   1dc9a:	bf88      	it	hi
   1dc9c:	f14c 0c00 	adchi.w	ip, ip, #0
   1dca0:	eb18 0808 	adds.w	r8, r8, r8
   1dca4:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1dca8:	eb4c 0c0c 	adc.w	ip, ip, ip
   1dcac:	eb18 0809 	adds.w	r8, r8, r9
   1dcb0:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1dcb4:	f14c 0c00 	adc.w	ip, ip, #0
   1dcb8:	f840 8b04 	str.w	r8, [r0], #4
   1dcbc:	f04f 0a00 	mov.w	sl, #0
   1dcc0:	fba2 8906 	umull	r8, r9, r2, r6
   1dcc4:	46ce      	mov	lr, r9
   1dcc6:	fbe3 8905 	umlal	r8, r9, r3, r5
   1dcca:	45ce      	cmp	lr, r9
   1dccc:	bf88      	it	hi
   1dcce:	f14a 0a00 	adchi.w	sl, sl, #0
   1dcd2:	eb18 0808 	adds.w	r8, r8, r8
   1dcd6:	eb59 0909 	adcs.w	r9, r9, r9
   1dcda:	eb4a 0a0a 	adc.w	sl, sl, sl
   1dcde:	46ce      	mov	lr, r9
   1dce0:	fbe4 8904 	umlal	r8, r9, r4, r4
   1dce4:	45ce      	cmp	lr, r9
   1dce6:	bf88      	it	hi
   1dce8:	f14a 0a00 	adchi.w	sl, sl, #0
   1dcec:	eb18 080b 	adds.w	r8, r8, fp
   1dcf0:	eb59 090c 	adcs.w	r9, r9, ip
   1dcf4:	f14a 0a00 	adc.w	sl, sl, #0
   1dcf8:	f840 8b04 	str.w	r8, [r0], #4
   1dcfc:	f04f 0c00 	mov.w	ip, #0
   1dd00:	fba2 8b07 	umull	r8, fp, r2, r7
   1dd04:	46de      	mov	lr, fp
   1dd06:	fbe3 8b06 	umlal	r8, fp, r3, r6
   1dd0a:	45de      	cmp	lr, fp
   1dd0c:	bf88      	it	hi
   1dd0e:	f14c 0c00 	adchi.w	ip, ip, #0
   1dd12:	46de      	mov	lr, fp
   1dd14:	fbe4 8b05 	umlal	r8, fp, r4, r5
   1dd18:	45de      	cmp	lr, fp
   1dd1a:	bf88      	it	hi
   1dd1c:	f14c 0c00 	adchi.w	ip, ip, #0
   1dd20:	eb18 0808 	adds.w	r8, r8, r8
   1dd24:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1dd28:	eb4c 0c0c 	adc.w	ip, ip, ip
   1dd2c:	eb18 0809 	adds.w	r8, r8, r9
   1dd30:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1dd34:	f14c 0c00 	adc.w	ip, ip, #0
   1dd38:	f840 8b04 	str.w	r8, [r0], #4
   1dd3c:	c904      	ldmia	r1!, {r2}
   1dd3e:	f04f 0a00 	mov.w	sl, #0
   1dd42:	fba3 8907 	umull	r8, r9, r3, r7
   1dd46:	46ce      	mov	lr, r9
   1dd48:	fbe4 8906 	umlal	r8, r9, r4, r6
   1dd4c:	45ce      	cmp	lr, r9
   1dd4e:	bf88      	it	hi
   1dd50:	f14a 0a00 	adchi.w	sl, sl, #0
   1dd54:	f8d0 e000 	ldr.w	lr, [r0]
   1dd58:	eb18 080e 	adds.w	r8, r8, lr
   1dd5c:	f159 0900 	adcs.w	r9, r9, #0
   1dd60:	f14a 0a00 	adc.w	sl, sl, #0
   1dd64:	eb18 0808 	adds.w	r8, r8, r8
   1dd68:	eb59 0909 	adcs.w	r9, r9, r9
   1dd6c:	eb4a 0a0a 	adc.w	sl, sl, sl
   1dd70:	46ce      	mov	lr, r9
   1dd72:	fbe5 8905 	umlal	r8, r9, r5, r5
   1dd76:	45ce      	cmp	lr, r9
   1dd78:	bf88      	it	hi
   1dd7a:	f14a 0a00 	adchi.w	sl, sl, #0
   1dd7e:	eb18 080b 	adds.w	r8, r8, fp
   1dd82:	eb59 090c 	adcs.w	r9, r9, ip
   1dd86:	f14a 0a00 	adc.w	sl, sl, #0
   1dd8a:	f840 8b04 	str.w	r8, [r0], #4
   1dd8e:	f04f 0c00 	mov.w	ip, #0
   1dd92:	fba3 8b02 	umull	r8, fp, r3, r2
   1dd96:	46de      	mov	lr, fp
   1dd98:	fbe4 8b07 	umlal	r8, fp, r4, r7
   1dd9c:	45de      	cmp	lr, fp
   1dd9e:	bf88      	it	hi
   1dda0:	f14c 0c00 	adchi.w	ip, ip, #0
   1dda4:	46de      	mov	lr, fp
   1dda6:	fbe5 8b06 	umlal	r8, fp, r5, r6
   1ddaa:	45de      	cmp	lr, fp
   1ddac:	bf88      	it	hi
   1ddae:	f14c 0c00 	adchi.w	ip, ip, #0
   1ddb2:	f8d0 e000 	ldr.w	lr, [r0]
   1ddb6:	eb18 080e 	adds.w	r8, r8, lr
   1ddba:	f15b 0b00 	adcs.w	fp, fp, #0
   1ddbe:	f14c 0c00 	adc.w	ip, ip, #0
   1ddc2:	eb18 0808 	adds.w	r8, r8, r8
   1ddc6:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1ddca:	eb4c 0c0c 	adc.w	ip, ip, ip
   1ddce:	eb18 0809 	adds.w	r8, r8, r9
   1ddd2:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1ddd6:	f14c 0c00 	adc.w	ip, ip, #0
   1ddda:	f840 8b04 	str.w	r8, [r0], #4
   1ddde:	c908      	ldmia	r1!, {r3}
   1dde0:	f04f 0a00 	mov.w	sl, #0
   1dde4:	fba4 8902 	umull	r8, r9, r4, r2
   1dde8:	46ce      	mov	lr, r9
   1ddea:	fbe5 8907 	umlal	r8, r9, r5, r7
   1ddee:	45ce      	cmp	lr, r9
   1ddf0:	bf88      	it	hi
   1ddf2:	f14a 0a00 	adchi.w	sl, sl, #0
   1ddf6:	f8d0 e000 	ldr.w	lr, [r0]
   1ddfa:	eb18 080e 	adds.w	r8, r8, lr
   1ddfe:	f159 0900 	adcs.w	r9, r9, #0
   1de02:	f14a 0a00 	adc.w	sl, sl, #0
   1de06:	eb18 0808 	adds.w	r8, r8, r8
   1de0a:	eb59 0909 	adcs.w	r9, r9, r9
   1de0e:	eb4a 0a0a 	adc.w	sl, sl, sl
   1de12:	46ce      	mov	lr, r9
   1de14:	fbe6 8906 	umlal	r8, r9, r6, r6
   1de18:	45ce      	cmp	lr, r9
   1de1a:	bf88      	it	hi
   1de1c:	f14a 0a00 	adchi.w	sl, sl, #0
   1de20:	eb18 080b 	adds.w	r8, r8, fp
   1de24:	eb59 090c 	adcs.w	r9, r9, ip
   1de28:	f14a 0a00 	adc.w	sl, sl, #0
   1de2c:	f840 8b04 	str.w	r8, [r0], #4
   1de30:	f04f 0c00 	mov.w	ip, #0
   1de34:	fba4 8b03 	umull	r8, fp, r4, r3
   1de38:	46de      	mov	lr, fp
   1de3a:	fbe5 8b02 	umlal	r8, fp, r5, r2
   1de3e:	45de      	cmp	lr, fp
   1de40:	bf88      	it	hi
   1de42:	f14c 0c00 	adchi.w	ip, ip, #0
   1de46:	46de      	mov	lr, fp
   1de48:	fbe6 8b07 	umlal	r8, fp, r6, r7
   1de4c:	45de      	cmp	lr, fp
   1de4e:	bf88      	it	hi
   1de50:	f14c 0c00 	adchi.w	ip, ip, #0
   1de54:	f8d0 e000 	ldr.w	lr, [r0]
   1de58:	eb18 080e 	adds.w	r8, r8, lr
   1de5c:	f15b 0b00 	adcs.w	fp, fp, #0
   1de60:	f14c 0c00 	adc.w	ip, ip, #0
   1de64:	eb18 0808 	adds.w	r8, r8, r8
   1de68:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1de6c:	eb4c 0c0c 	adc.w	ip, ip, ip
   1de70:	eb18 0809 	adds.w	r8, r8, r9
   1de74:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1de78:	f14c 0c00 	adc.w	ip, ip, #0
   1de7c:	f840 8b04 	str.w	r8, [r0], #4
   1de80:	f04f 0a00 	mov.w	sl, #0
   1de84:	fba5 8903 	umull	r8, r9, r5, r3
   1de88:	46ce      	mov	lr, r9
   1de8a:	fbe6 8902 	umlal	r8, r9, r6, r2
   1de8e:	45ce      	cmp	lr, r9
   1de90:	bf88      	it	hi
   1de92:	f14a 0a00 	adchi.w	sl, sl, #0
   1de96:	eb18 0808 	adds.w	r8, r8, r8
   1de9a:	eb59 0909 	adcs.w	r9, r9, r9
   1de9e:	eb4a 0a0a 	adc.w	sl, sl, sl
   1dea2:	46ce      	mov	lr, r9
   1dea4:	fbe7 8907 	umlal	r8, r9, r7, r7
   1dea8:	45ce      	cmp	lr, r9
   1deaa:	bf88      	it	hi
   1deac:	f14a 0a00 	adchi.w	sl, sl, #0
   1deb0:	eb18 080b 	adds.w	r8, r8, fp
   1deb4:	eb59 090c 	adcs.w	r9, r9, ip
   1deb8:	f14a 0a00 	adc.w	sl, sl, #0
   1debc:	f840 8b04 	str.w	r8, [r0], #4
   1dec0:	f04f 0c00 	mov.w	ip, #0
   1dec4:	fba6 8b03 	umull	r8, fp, r6, r3
   1dec8:	46de      	mov	lr, fp
   1deca:	fbe7 8b02 	umlal	r8, fp, r7, r2
   1dece:	45de      	cmp	lr, fp
   1ded0:	bf88      	it	hi
   1ded2:	f14c 0c00 	adchi.w	ip, ip, #0
   1ded6:	eb18 0808 	adds.w	r8, r8, r8
   1deda:	eb5b 0b0b 	adcs.w	fp, fp, fp
   1dede:	eb4c 0c0c 	adc.w	ip, ip, ip
   1dee2:	eb18 0809 	adds.w	r8, r8, r9
   1dee6:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1deea:	f14c 0c00 	adc.w	ip, ip, #0
   1deee:	f840 8b04 	str.w	r8, [r0], #4
   1def2:	f04f 0800 	mov.w	r8, #0
   1def6:	fba7 1a03 	umull	r1, sl, r7, r3
   1defa:	1849      	adds	r1, r1, r1
   1defc:	eb5a 0a0a 	adcs.w	sl, sl, sl
   1df00:	f148 0800 	adc.w	r8, r8, #0
   1df04:	eb1b 0b01 	adds.w	fp, fp, r1
   1df08:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1df0c:	f148 0800 	adc.w	r8, r8, #0
   1df10:	fba2 1a02 	umull	r1, sl, r2, r2
   1df14:	eb1b 0b01 	adds.w	fp, fp, r1
   1df18:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1df1c:	f148 0800 	adc.w	r8, r8, #0
   1df20:	f840 bb04 	str.w	fp, [r0], #4
   1df24:	f04f 0b00 	mov.w	fp, #0
   1df28:	fba2 1a03 	umull	r1, sl, r2, r3
   1df2c:	1849      	adds	r1, r1, r1
   1df2e:	eb5a 0a0a 	adcs.w	sl, sl, sl
   1df32:	f14b 0b00 	adc.w	fp, fp, #0
   1df36:	eb1c 0c01 	adds.w	ip, ip, r1
   1df3a:	eb58 080a 	adcs.w	r8, r8, sl
   1df3e:	f14b 0b00 	adc.w	fp, fp, #0
   1df42:	f840 cb04 	str.w	ip, [r0], #4
   1df46:	fba3 1a03 	umull	r1, sl, r3, r3
   1df4a:	eb18 0801 	adds.w	r8, r8, r1
   1df4e:	eb5b 0b0a 	adcs.w	fp, fp, sl
   1df52:	e8a0 0900 	stmia.w	r0!, {r8, fp}
    #endif
        : "+r" (r0), "+r" (r1)
        :
        : "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   1df56:	bf00      	nop
   1df58:	b003      	add	sp, #12
   1df5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001df5e <vli_clear>:
        #include "asm_arm.inc"
    #endif
#endif

#if !defined(asm_clear) || !asm_clear
static void vli_clear(uECC_word_t *vli) {
   1df5e:	b084      	sub	sp, #16
   1df60:	9001      	str	r0, [sp, #4]
    wordcount_t i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1df62:	2300      	movs	r3, #0
   1df64:	9303      	str	r3, [sp, #12]
   1df66:	e008      	b.n	1df7a <vli_clear+0x1c>
        vli[i] = 0;
   1df68:	9b03      	ldr	r3, [sp, #12]
   1df6a:	009b      	lsls	r3, r3, #2
   1df6c:	9a01      	ldr	r2, [sp, #4]
   1df6e:	4413      	add	r3, r2
   1df70:	2200      	movs	r2, #0
   1df72:	601a      	str	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   1df74:	9b03      	ldr	r3, [sp, #12]
   1df76:	3301      	adds	r3, #1
   1df78:	9303      	str	r3, [sp, #12]
   1df7a:	9b03      	ldr	r3, [sp, #12]
   1df7c:	2b07      	cmp	r3, #7
   1df7e:	d9f3      	bls.n	1df68 <vli_clear+0xa>
    }
}
   1df80:	bf00      	nop
   1df82:	bf00      	nop
   1df84:	b004      	add	sp, #16
   1df86:	4770      	bx	lr

0001df88 <vli_isZero>:
#endif

/* Returns 1 if vli == 0, 0 otherwise. */
#if !defined(asm_isZero) || !asm_isZero
static uECC_word_t vli_isZero(const uECC_word_t *vli) {
   1df88:	b084      	sub	sp, #16
   1df8a:	9001      	str	r0, [sp, #4]
    wordcount_t i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1df8c:	2300      	movs	r3, #0
   1df8e:	9303      	str	r3, [sp, #12]
   1df90:	e00b      	b.n	1dfaa <vli_isZero+0x22>
        if (vli[i]) {
   1df92:	9b03      	ldr	r3, [sp, #12]
   1df94:	009b      	lsls	r3, r3, #2
   1df96:	9a01      	ldr	r2, [sp, #4]
   1df98:	4413      	add	r3, r2
   1df9a:	681b      	ldr	r3, [r3, #0]
   1df9c:	2b00      	cmp	r3, #0
   1df9e:	d001      	beq.n	1dfa4 <vli_isZero+0x1c>
            return 0;
   1dfa0:	2300      	movs	r3, #0
   1dfa2:	e006      	b.n	1dfb2 <vli_isZero+0x2a>
    for (i = 0; i < uECC_WORDS; ++i) {
   1dfa4:	9b03      	ldr	r3, [sp, #12]
   1dfa6:	3301      	adds	r3, #1
   1dfa8:	9303      	str	r3, [sp, #12]
   1dfaa:	9b03      	ldr	r3, [sp, #12]
   1dfac:	2b07      	cmp	r3, #7
   1dfae:	d9f0      	bls.n	1df92 <vli_isZero+0xa>
        }
    }
    return 1;
   1dfb0:	2301      	movs	r3, #1
}
   1dfb2:	4618      	mov	r0, r3
   1dfb4:	b004      	add	sp, #16
   1dfb6:	4770      	bx	lr

0001dfb8 <vli_testBit>:
#endif

/* Returns nonzero if bit 'bit' of vli is set. */
#if !defined(asm_testBit) || !asm_testBit
static uECC_word_t vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
   1dfb8:	b082      	sub	sp, #8
   1dfba:	9001      	str	r0, [sp, #4]
   1dfbc:	9100      	str	r1, [sp, #0]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1dfbe:	9b00      	ldr	r3, [sp, #0]
   1dfc0:	115b      	asrs	r3, r3, #5
   1dfc2:	009b      	lsls	r3, r3, #2
   1dfc4:	9a01      	ldr	r2, [sp, #4]
   1dfc6:	4413      	add	r3, r2
   1dfc8:	681a      	ldr	r2, [r3, #0]
   1dfca:	9b00      	ldr	r3, [sp, #0]
   1dfcc:	f003 031f 	and.w	r3, r3, #31
   1dfd0:	2101      	movs	r1, #1
   1dfd2:	fa01 f303 	lsl.w	r3, r1, r3
   1dfd6:	4013      	ands	r3, r2
}
   1dfd8:	4618      	mov	r0, r3
   1dfda:	b002      	add	sp, #8
   1dfdc:	4770      	bx	lr

0001dfde <vli_set>:
}
#endif /* !asm_numBits */

/* Sets dest = src. */
#if !defined(asm_set) || !asm_set
static void vli_set(uECC_word_t *dest, const uECC_word_t *src) {
   1dfde:	b084      	sub	sp, #16
   1dfe0:	9001      	str	r0, [sp, #4]
   1dfe2:	9100      	str	r1, [sp, #0]
    wordcount_t i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1dfe4:	2300      	movs	r3, #0
   1dfe6:	9303      	str	r3, [sp, #12]
   1dfe8:	e00c      	b.n	1e004 <vli_set+0x26>
        dest[i] = src[i];
   1dfea:	9b03      	ldr	r3, [sp, #12]
   1dfec:	009b      	lsls	r3, r3, #2
   1dfee:	9a00      	ldr	r2, [sp, #0]
   1dff0:	441a      	add	r2, r3
   1dff2:	9b03      	ldr	r3, [sp, #12]
   1dff4:	009b      	lsls	r3, r3, #2
   1dff6:	9901      	ldr	r1, [sp, #4]
   1dff8:	440b      	add	r3, r1
   1dffa:	6812      	ldr	r2, [r2, #0]
   1dffc:	601a      	str	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   1dffe:	9b03      	ldr	r3, [sp, #12]
   1e000:	3301      	adds	r3, #1
   1e002:	9303      	str	r3, [sp, #12]
   1e004:	9b03      	ldr	r3, [sp, #12]
   1e006:	2b07      	cmp	r3, #7
   1e008:	d9ef      	bls.n	1dfea <vli_set+0xc>
    }
}
   1e00a:	bf00      	nop
   1e00c:	bf00      	nop
   1e00e:	b004      	add	sp, #16
   1e010:	4770      	bx	lr

0001e012 <vli_cmp>:
#endif

/* Returns sign of left - right. */
#if !defined(asm_cmp) || !asm_cmp
static cmpresult_t vli_cmp(const uECC_word_t *left, const uECC_word_t *right) {
   1e012:	b084      	sub	sp, #16
   1e014:	9001      	str	r0, [sp, #4]
   1e016:	9100      	str	r1, [sp, #0]
    swordcount_t i;
    for (i = uECC_WORDS - 1; i >= 0; --i) {
   1e018:	2307      	movs	r3, #7
   1e01a:	9303      	str	r3, [sp, #12]
   1e01c:	e01f      	b.n	1e05e <vli_cmp+0x4c>
        if (left[i] > right[i]) {
   1e01e:	9b03      	ldr	r3, [sp, #12]
   1e020:	009b      	lsls	r3, r3, #2
   1e022:	9a01      	ldr	r2, [sp, #4]
   1e024:	4413      	add	r3, r2
   1e026:	681a      	ldr	r2, [r3, #0]
   1e028:	9b03      	ldr	r3, [sp, #12]
   1e02a:	009b      	lsls	r3, r3, #2
   1e02c:	9900      	ldr	r1, [sp, #0]
   1e02e:	440b      	add	r3, r1
   1e030:	681b      	ldr	r3, [r3, #0]
   1e032:	429a      	cmp	r2, r3
   1e034:	d901      	bls.n	1e03a <vli_cmp+0x28>
            return 1;
   1e036:	2301      	movs	r3, #1
   1e038:	e015      	b.n	1e066 <vli_cmp+0x54>
        } else if (left[i] < right[i]) {
   1e03a:	9b03      	ldr	r3, [sp, #12]
   1e03c:	009b      	lsls	r3, r3, #2
   1e03e:	9a01      	ldr	r2, [sp, #4]
   1e040:	4413      	add	r3, r2
   1e042:	681a      	ldr	r2, [r3, #0]
   1e044:	9b03      	ldr	r3, [sp, #12]
   1e046:	009b      	lsls	r3, r3, #2
   1e048:	9900      	ldr	r1, [sp, #0]
   1e04a:	440b      	add	r3, r1
   1e04c:	681b      	ldr	r3, [r3, #0]
   1e04e:	429a      	cmp	r2, r3
   1e050:	d202      	bcs.n	1e058 <vli_cmp+0x46>
            return -1;
   1e052:	f04f 33ff 	mov.w	r3, #4294967295
   1e056:	e006      	b.n	1e066 <vli_cmp+0x54>
    for (i = uECC_WORDS - 1; i >= 0; --i) {
   1e058:	9b03      	ldr	r3, [sp, #12]
   1e05a:	3b01      	subs	r3, #1
   1e05c:	9303      	str	r3, [sp, #12]
   1e05e:	9b03      	ldr	r3, [sp, #12]
   1e060:	2b00      	cmp	r3, #0
   1e062:	dadc      	bge.n	1e01e <vli_cmp+0xc>
        }
    }
    return 0;
   1e064:	2300      	movs	r3, #0
}
   1e066:	4618      	mov	r0, r3
   1e068:	b004      	add	sp, #16
   1e06a:	4770      	bx	lr

0001e06c <vli_rshift1>:
    return (result == 0);
}

/* Computes vli = vli >> 1. */
#if !defined(asm_rshift1) || !asm_rshift1
static void vli_rshift1(uECC_word_t *vli) {
   1e06c:	b086      	sub	sp, #24
   1e06e:	9001      	str	r0, [sp, #4]
    uECC_word_t *end = vli;
   1e070:	9b01      	ldr	r3, [sp, #4]
   1e072:	9304      	str	r3, [sp, #16]
    uECC_word_t carry = 0;
   1e074:	2300      	movs	r3, #0
   1e076:	9305      	str	r3, [sp, #20]

    vli += uECC_WORDS;
   1e078:	9b01      	ldr	r3, [sp, #4]
   1e07a:	3320      	adds	r3, #32
   1e07c:	9301      	str	r3, [sp, #4]
    while (vli-- > end) {
   1e07e:	e00b      	b.n	1e098 <vli_rshift1+0x2c>
        uECC_word_t temp = *vli;
   1e080:	9b01      	ldr	r3, [sp, #4]
   1e082:	681b      	ldr	r3, [r3, #0]
   1e084:	9303      	str	r3, [sp, #12]
        *vli = (temp >> 1) | carry;
   1e086:	9b03      	ldr	r3, [sp, #12]
   1e088:	085a      	lsrs	r2, r3, #1
   1e08a:	9b05      	ldr	r3, [sp, #20]
   1e08c:	431a      	orrs	r2, r3
   1e08e:	9b01      	ldr	r3, [sp, #4]
   1e090:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - 1);
   1e092:	9b03      	ldr	r3, [sp, #12]
   1e094:	07db      	lsls	r3, r3, #31
   1e096:	9305      	str	r3, [sp, #20]
    while (vli-- > end) {
   1e098:	9b01      	ldr	r3, [sp, #4]
   1e09a:	1f1a      	subs	r2, r3, #4
   1e09c:	9201      	str	r2, [sp, #4]
   1e09e:	9a04      	ldr	r2, [sp, #16]
   1e0a0:	429a      	cmp	r2, r3
   1e0a2:	d3ed      	bcc.n	1e080 <vli_rshift1+0x14>
    }
}
   1e0a4:	bf00      	nop
   1e0a6:	bf00      	nop
   1e0a8:	b006      	add	sp, #24
   1e0aa:	4770      	bx	lr

0001e0ac <vli_modAdd>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
#if !defined(asm_modAdd) || !asm_modAdd
static void vli_modAdd(uECC_word_t *result,
                       const uECC_word_t *left,
                       const uECC_word_t *right,
                       const uECC_word_t *mod) {
   1e0ac:	b500      	push	{lr}
   1e0ae:	b087      	sub	sp, #28
   1e0b0:	9003      	str	r0, [sp, #12]
   1e0b2:	9102      	str	r1, [sp, #8]
   1e0b4:	9201      	str	r2, [sp, #4]
   1e0b6:	9300      	str	r3, [sp, #0]
    uECC_word_t carry = vli_add(result, left, right);
   1e0b8:	9a01      	ldr	r2, [sp, #4]
   1e0ba:	9902      	ldr	r1, [sp, #8]
   1e0bc:	9803      	ldr	r0, [sp, #12]
   1e0be:	f7ff fa37 	bl	1d530 <vli_add>
   1e0c2:	9005      	str	r0, [sp, #20]
    if (carry || vli_cmp(result, mod) >= 0) {
   1e0c4:	9b05      	ldr	r3, [sp, #20]
   1e0c6:	2b00      	cmp	r3, #0
   1e0c8:	d106      	bne.n	1e0d8 <vli_modAdd+0x2c>
   1e0ca:	9900      	ldr	r1, [sp, #0]
   1e0cc:	9803      	ldr	r0, [sp, #12]
   1e0ce:	f7ff ffa0 	bl	1e012 <vli_cmp>
   1e0d2:	4603      	mov	r3, r0
   1e0d4:	2b00      	cmp	r3, #0
   1e0d6:	db04      	blt.n	1e0e2 <vli_modAdd+0x36>
        /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
        vli_sub(result, result, mod);
   1e0d8:	9a00      	ldr	r2, [sp, #0]
   1e0da:	9903      	ldr	r1, [sp, #12]
   1e0dc:	9803      	ldr	r0, [sp, #12]
   1e0de:	f7ff fa5e 	bl	1d59e <vli_sub>
    }
}
   1e0e2:	bf00      	nop
   1e0e4:	b007      	add	sp, #28
   1e0e6:	f85d fb04 	ldr.w	pc, [sp], #4

0001e0ea <vli_modSub>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
#if !defined(asm_modSub) || !asm_modSub
static void vli_modSub(uECC_word_t *result,
                       const uECC_word_t *left,
                       const uECC_word_t *right,
                       const uECC_word_t *mod) {
   1e0ea:	b500      	push	{lr}
   1e0ec:	b087      	sub	sp, #28
   1e0ee:	9003      	str	r0, [sp, #12]
   1e0f0:	9102      	str	r1, [sp, #8]
   1e0f2:	9201      	str	r2, [sp, #4]
   1e0f4:	9300      	str	r3, [sp, #0]
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1e0f6:	9a01      	ldr	r2, [sp, #4]
   1e0f8:	9902      	ldr	r1, [sp, #8]
   1e0fa:	9803      	ldr	r0, [sp, #12]
   1e0fc:	f7ff fa4f 	bl	1d59e <vli_sub>
   1e100:	9005      	str	r0, [sp, #20]
    if (l_borrow) {
   1e102:	9b05      	ldr	r3, [sp, #20]
   1e104:	2b00      	cmp	r3, #0
   1e106:	d004      	beq.n	1e112 <vli_modSub+0x28>
        /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
           we can get the correct result from result + mod (with overflow). */
        vli_add(result, result, mod);
   1e108:	9a00      	ldr	r2, [sp, #0]
   1e10a:	9903      	ldr	r1, [sp, #12]
   1e10c:	9803      	ldr	r0, [sp, #12]
   1e10e:	f7ff fa0f 	bl	1d530 <vli_add>
    }
}
   1e112:	bf00      	nop
   1e114:	b007      	add	sp, #28
   1e116:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001e11c <vli_mmod_fast>:
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   1e11c:	b500      	push	{lr}
   1e11e:	b08d      	sub	sp, #52	; 0x34
   1e120:	9001      	str	r0, [sp, #4]
   1e122:	9100      	str	r1, [sp, #0]
    uint32_t tmp[uECC_WORDS];
    int carry;

    /* t */
    vli_set(result, product);
   1e124:	9900      	ldr	r1, [sp, #0]
   1e126:	9801      	ldr	r0, [sp, #4]
   1e128:	f7ff ff59 	bl	1dfde <vli_set>

    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
   1e12c:	2300      	movs	r3, #0
   1e12e:	9305      	str	r3, [sp, #20]
   1e130:	9b05      	ldr	r3, [sp, #20]
   1e132:	9304      	str	r3, [sp, #16]
   1e134:	9b04      	ldr	r3, [sp, #16]
   1e136:	9303      	str	r3, [sp, #12]
    tmp[3] = product[11];
   1e138:	9b00      	ldr	r3, [sp, #0]
   1e13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e13c:	9306      	str	r3, [sp, #24]
    tmp[4] = product[12];
   1e13e:	9b00      	ldr	r3, [sp, #0]
   1e140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e142:	9307      	str	r3, [sp, #28]
    tmp[5] = product[13];
   1e144:	9b00      	ldr	r3, [sp, #0]
   1e146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e148:	9308      	str	r3, [sp, #32]
    tmp[6] = product[14];
   1e14a:	9b00      	ldr	r3, [sp, #0]
   1e14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e14e:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[15];
   1e150:	9b00      	ldr	r3, [sp, #0]
   1e152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e154:	930a      	str	r3, [sp, #40]	; 0x28
    carry = vli_add(tmp, tmp, tmp);
   1e156:	aa03      	add	r2, sp, #12
   1e158:	a903      	add	r1, sp, #12
   1e15a:	ab03      	add	r3, sp, #12
   1e15c:	4618      	mov	r0, r3
   1e15e:	f7ff f9e7 	bl	1d530 <vli_add>
   1e162:	4603      	mov	r3, r0
   1e164:	930b      	str	r3, [sp, #44]	; 0x2c
    carry += vli_add(result, result, tmp);
   1e166:	ab03      	add	r3, sp, #12
   1e168:	461a      	mov	r2, r3
   1e16a:	9901      	ldr	r1, [sp, #4]
   1e16c:	9801      	ldr	r0, [sp, #4]
   1e16e:	f7ff f9df 	bl	1d530 <vli_add>
   1e172:	4602      	mov	r2, r0
   1e174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e176:	4413      	add	r3, r2
   1e178:	930b      	str	r3, [sp, #44]	; 0x2c

    /* s2 */
    tmp[3] = product[12];
   1e17a:	9b00      	ldr	r3, [sp, #0]
   1e17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e17e:	9306      	str	r3, [sp, #24]
    tmp[4] = product[13];
   1e180:	9b00      	ldr	r3, [sp, #0]
   1e182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e184:	9307      	str	r3, [sp, #28]
    tmp[5] = product[14];
   1e186:	9b00      	ldr	r3, [sp, #0]
   1e188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e18a:	9308      	str	r3, [sp, #32]
    tmp[6] = product[15];
   1e18c:	9b00      	ldr	r3, [sp, #0]
   1e18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e190:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = 0;
   1e192:	2300      	movs	r3, #0
   1e194:	930a      	str	r3, [sp, #40]	; 0x28
    carry += vli_add(tmp, tmp, tmp);
   1e196:	aa03      	add	r2, sp, #12
   1e198:	a903      	add	r1, sp, #12
   1e19a:	ab03      	add	r3, sp, #12
   1e19c:	4618      	mov	r0, r3
   1e19e:	f7ff f9c7 	bl	1d530 <vli_add>
   1e1a2:	4602      	mov	r2, r0
   1e1a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e1a6:	4413      	add	r3, r2
   1e1a8:	930b      	str	r3, [sp, #44]	; 0x2c
    carry += vli_add(result, result, tmp);
   1e1aa:	ab03      	add	r3, sp, #12
   1e1ac:	461a      	mov	r2, r3
   1e1ae:	9901      	ldr	r1, [sp, #4]
   1e1b0:	9801      	ldr	r0, [sp, #4]
   1e1b2:	f7ff f9bd 	bl	1d530 <vli_add>
   1e1b6:	4602      	mov	r2, r0
   1e1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e1ba:	4413      	add	r3, r2
   1e1bc:	930b      	str	r3, [sp, #44]	; 0x2c

    /* s3 */
    tmp[0] = product[8];
   1e1be:	9b00      	ldr	r3, [sp, #0]
   1e1c0:	6a1b      	ldr	r3, [r3, #32]
   1e1c2:	9303      	str	r3, [sp, #12]
    tmp[1] = product[9];
   1e1c4:	9b00      	ldr	r3, [sp, #0]
   1e1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e1c8:	9304      	str	r3, [sp, #16]
    tmp[2] = product[10];
   1e1ca:	9b00      	ldr	r3, [sp, #0]
   1e1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e1ce:	9305      	str	r3, [sp, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
   1e1d0:	2300      	movs	r3, #0
   1e1d2:	9308      	str	r3, [sp, #32]
   1e1d4:	9b08      	ldr	r3, [sp, #32]
   1e1d6:	9307      	str	r3, [sp, #28]
   1e1d8:	9b07      	ldr	r3, [sp, #28]
   1e1da:	9306      	str	r3, [sp, #24]
    tmp[6] = product[14];
   1e1dc:	9b00      	ldr	r3, [sp, #0]
   1e1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e1e0:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[15];
   1e1e2:	9b00      	ldr	r3, [sp, #0]
   1e1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e1e6:	930a      	str	r3, [sp, #40]	; 0x28
    carry += vli_add(result, result, tmp);
   1e1e8:	ab03      	add	r3, sp, #12
   1e1ea:	461a      	mov	r2, r3
   1e1ec:	9901      	ldr	r1, [sp, #4]
   1e1ee:	9801      	ldr	r0, [sp, #4]
   1e1f0:	f7ff f99e 	bl	1d530 <vli_add>
   1e1f4:	4602      	mov	r2, r0
   1e1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e1f8:	4413      	add	r3, r2
   1e1fa:	930b      	str	r3, [sp, #44]	; 0x2c

    /* s4 */
    tmp[0] = product[9];
   1e1fc:	9b00      	ldr	r3, [sp, #0]
   1e1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e200:	9303      	str	r3, [sp, #12]
    tmp[1] = product[10];
   1e202:	9b00      	ldr	r3, [sp, #0]
   1e204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e206:	9304      	str	r3, [sp, #16]
    tmp[2] = product[11];
   1e208:	9b00      	ldr	r3, [sp, #0]
   1e20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e20c:	9305      	str	r3, [sp, #20]
    tmp[3] = product[13];
   1e20e:	9b00      	ldr	r3, [sp, #0]
   1e210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e212:	9306      	str	r3, [sp, #24]
    tmp[4] = product[14];
   1e214:	9b00      	ldr	r3, [sp, #0]
   1e216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e218:	9307      	str	r3, [sp, #28]
    tmp[5] = product[15];
   1e21a:	9b00      	ldr	r3, [sp, #0]
   1e21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e21e:	9308      	str	r3, [sp, #32]
    tmp[6] = product[13];
   1e220:	9b00      	ldr	r3, [sp, #0]
   1e222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e224:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[8];
   1e226:	9b00      	ldr	r3, [sp, #0]
   1e228:	6a1b      	ldr	r3, [r3, #32]
   1e22a:	930a      	str	r3, [sp, #40]	; 0x28
    carry += vli_add(result, result, tmp);
   1e22c:	ab03      	add	r3, sp, #12
   1e22e:	461a      	mov	r2, r3
   1e230:	9901      	ldr	r1, [sp, #4]
   1e232:	9801      	ldr	r0, [sp, #4]
   1e234:	f7ff f97c 	bl	1d530 <vli_add>
   1e238:	4602      	mov	r2, r0
   1e23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e23c:	4413      	add	r3, r2
   1e23e:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d1 */
    tmp[0] = product[11];
   1e240:	9b00      	ldr	r3, [sp, #0]
   1e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e244:	9303      	str	r3, [sp, #12]
    tmp[1] = product[12];
   1e246:	9b00      	ldr	r3, [sp, #0]
   1e248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e24a:	9304      	str	r3, [sp, #16]
    tmp[2] = product[13];
   1e24c:	9b00      	ldr	r3, [sp, #0]
   1e24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e250:	9305      	str	r3, [sp, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
   1e252:	2300      	movs	r3, #0
   1e254:	9308      	str	r3, [sp, #32]
   1e256:	9b08      	ldr	r3, [sp, #32]
   1e258:	9307      	str	r3, [sp, #28]
   1e25a:	9b07      	ldr	r3, [sp, #28]
   1e25c:	9306      	str	r3, [sp, #24]
    tmp[6] = product[8];
   1e25e:	9b00      	ldr	r3, [sp, #0]
   1e260:	6a1b      	ldr	r3, [r3, #32]
   1e262:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[10];
   1e264:	9b00      	ldr	r3, [sp, #0]
   1e266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e268:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   1e26a:	ab03      	add	r3, sp, #12
   1e26c:	461a      	mov	r2, r3
   1e26e:	9901      	ldr	r1, [sp, #4]
   1e270:	9801      	ldr	r0, [sp, #4]
   1e272:	f7ff f994 	bl	1d59e <vli_sub>
   1e276:	4602      	mov	r2, r0
   1e278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e27a:	1a9b      	subs	r3, r3, r2
   1e27c:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d2 */
    tmp[0] = product[12];
   1e27e:	9b00      	ldr	r3, [sp, #0]
   1e280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e282:	9303      	str	r3, [sp, #12]
    tmp[1] = product[13];
   1e284:	9b00      	ldr	r3, [sp, #0]
   1e286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e288:	9304      	str	r3, [sp, #16]
    tmp[2] = product[14];
   1e28a:	9b00      	ldr	r3, [sp, #0]
   1e28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e28e:	9305      	str	r3, [sp, #20]
    tmp[3] = product[15];
   1e290:	9b00      	ldr	r3, [sp, #0]
   1e292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e294:	9306      	str	r3, [sp, #24]
    tmp[4] = tmp[5] = 0;
   1e296:	2300      	movs	r3, #0
   1e298:	9308      	str	r3, [sp, #32]
   1e29a:	9b08      	ldr	r3, [sp, #32]
   1e29c:	9307      	str	r3, [sp, #28]
    tmp[6] = product[9];
   1e29e:	9b00      	ldr	r3, [sp, #0]
   1e2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e2a2:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[11];
   1e2a4:	9b00      	ldr	r3, [sp, #0]
   1e2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e2a8:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   1e2aa:	ab03      	add	r3, sp, #12
   1e2ac:	461a      	mov	r2, r3
   1e2ae:	9901      	ldr	r1, [sp, #4]
   1e2b0:	9801      	ldr	r0, [sp, #4]
   1e2b2:	f7ff f974 	bl	1d59e <vli_sub>
   1e2b6:	4602      	mov	r2, r0
   1e2b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e2ba:	1a9b      	subs	r3, r3, r2
   1e2bc:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d3 */
    tmp[0] = product[13];
   1e2be:	9b00      	ldr	r3, [sp, #0]
   1e2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e2c2:	9303      	str	r3, [sp, #12]
    tmp[1] = product[14];
   1e2c4:	9b00      	ldr	r3, [sp, #0]
   1e2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e2c8:	9304      	str	r3, [sp, #16]
    tmp[2] = product[15];
   1e2ca:	9b00      	ldr	r3, [sp, #0]
   1e2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e2ce:	9305      	str	r3, [sp, #20]
    tmp[3] = product[8];
   1e2d0:	9b00      	ldr	r3, [sp, #0]
   1e2d2:	6a1b      	ldr	r3, [r3, #32]
   1e2d4:	9306      	str	r3, [sp, #24]
    tmp[4] = product[9];
   1e2d6:	9b00      	ldr	r3, [sp, #0]
   1e2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e2da:	9307      	str	r3, [sp, #28]
    tmp[5] = product[10];
   1e2dc:	9b00      	ldr	r3, [sp, #0]
   1e2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e2e0:	9308      	str	r3, [sp, #32]
    tmp[6] = 0;
   1e2e2:	2300      	movs	r3, #0
   1e2e4:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[12];
   1e2e6:	9b00      	ldr	r3, [sp, #0]
   1e2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e2ea:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   1e2ec:	ab03      	add	r3, sp, #12
   1e2ee:	461a      	mov	r2, r3
   1e2f0:	9901      	ldr	r1, [sp, #4]
   1e2f2:	9801      	ldr	r0, [sp, #4]
   1e2f4:	f7ff f953 	bl	1d59e <vli_sub>
   1e2f8:	4602      	mov	r2, r0
   1e2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e2fc:	1a9b      	subs	r3, r3, r2
   1e2fe:	930b      	str	r3, [sp, #44]	; 0x2c

    /* d4 */
    tmp[0] = product[14];
   1e300:	9b00      	ldr	r3, [sp, #0]
   1e302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e304:	9303      	str	r3, [sp, #12]
    tmp[1] = product[15];
   1e306:	9b00      	ldr	r3, [sp, #0]
   1e308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e30a:	9304      	str	r3, [sp, #16]
    tmp[2] = 0;
   1e30c:	2300      	movs	r3, #0
   1e30e:	9305      	str	r3, [sp, #20]
    tmp[3] = product[9];
   1e310:	9b00      	ldr	r3, [sp, #0]
   1e312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e314:	9306      	str	r3, [sp, #24]
    tmp[4] = product[10];
   1e316:	9b00      	ldr	r3, [sp, #0]
   1e318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e31a:	9307      	str	r3, [sp, #28]
    tmp[5] = product[11];
   1e31c:	9b00      	ldr	r3, [sp, #0]
   1e31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e320:	9308      	str	r3, [sp, #32]
    tmp[6] = 0;
   1e322:	2300      	movs	r3, #0
   1e324:	9309      	str	r3, [sp, #36]	; 0x24
    tmp[7] = product[13];
   1e326:	9b00      	ldr	r3, [sp, #0]
   1e328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e32a:	930a      	str	r3, [sp, #40]	; 0x28
    carry -= vli_sub(result, result, tmp);
   1e32c:	ab03      	add	r3, sp, #12
   1e32e:	461a      	mov	r2, r3
   1e330:	9901      	ldr	r1, [sp, #4]
   1e332:	9801      	ldr	r0, [sp, #4]
   1e334:	f7ff f933 	bl	1d59e <vli_sub>
   1e338:	4602      	mov	r2, r0
   1e33a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e33c:	1a9b      	subs	r3, r3, r2
   1e33e:	930b      	str	r3, [sp, #44]	; 0x2c

    if (carry < 0) {
   1e340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e342:	2b00      	cmp	r3, #0
   1e344:	da15      	bge.n	1e372 <vli_mmod_fast+0x256>
        do {
            carry += vli_add(result, result, curve_p);
   1e346:	4a12      	ldr	r2, [pc, #72]	; (1e390 <vli_mmod_fast+0x274>)
   1e348:	9901      	ldr	r1, [sp, #4]
   1e34a:	9801      	ldr	r0, [sp, #4]
   1e34c:	f7ff f8f0 	bl	1d530 <vli_add>
   1e350:	4602      	mov	r2, r0
   1e352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e354:	4413      	add	r3, r2
   1e356:	930b      	str	r3, [sp, #44]	; 0x2c
        } while (carry < 0);
   1e358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e35a:	2b00      	cmp	r3, #0
   1e35c:	dbf3      	blt.n	1e346 <vli_mmod_fast+0x22a>
    } else {
        while (carry || vli_cmp(curve_p, result) != 1) {
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
   1e35e:	e012      	b.n	1e386 <vli_mmod_fast+0x26a>
            carry -= vli_sub(result, result, curve_p);
   1e360:	4a0b      	ldr	r2, [pc, #44]	; (1e390 <vli_mmod_fast+0x274>)
   1e362:	9901      	ldr	r1, [sp, #4]
   1e364:	9801      	ldr	r0, [sp, #4]
   1e366:	f7ff f91a 	bl	1d59e <vli_sub>
   1e36a:	4602      	mov	r2, r0
   1e36c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e36e:	1a9b      	subs	r3, r3, r2
   1e370:	930b      	str	r3, [sp, #44]	; 0x2c
        while (carry || vli_cmp(curve_p, result) != 1) {
   1e372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e374:	2b00      	cmp	r3, #0
   1e376:	d1f3      	bne.n	1e360 <vli_mmod_fast+0x244>
   1e378:	9901      	ldr	r1, [sp, #4]
   1e37a:	4805      	ldr	r0, [pc, #20]	; (1e390 <vli_mmod_fast+0x274>)
   1e37c:	f7ff fe49 	bl	1e012 <vli_cmp>
   1e380:	4603      	mov	r3, r0
   1e382:	2b01      	cmp	r3, #1
   1e384:	d1ec      	bne.n	1e360 <vli_mmod_fast+0x244>
}
   1e386:	bf00      	nop
   1e388:	b00d      	add	sp, #52	; 0x34
   1e38a:	f85d fb04 	ldr.w	pc, [sp], #4
   1e38e:	bf00      	nop
   1e390:	000286e8 	.word	0x000286e8

0001e394 <vli_modMult_fast>:
#endif /* !asm_mmod_fast */

/* Computes result = (left * right) % curve_p. */
static void vli_modMult_fast(uECC_word_t *result,
                             const uECC_word_t *left,
                             const uECC_word_t *right) {
   1e394:	b500      	push	{lr}
   1e396:	b095      	sub	sp, #84	; 0x54
   1e398:	9003      	str	r0, [sp, #12]
   1e39a:	9102      	str	r1, [sp, #8]
   1e39c:	9201      	str	r2, [sp, #4]
    uECC_word_t product[2 * uECC_WORDS];
    vli_mult(product, left, right);
   1e39e:	ab04      	add	r3, sp, #16
   1e3a0:	9a01      	ldr	r2, [sp, #4]
   1e3a2:	9902      	ldr	r1, [sp, #8]
   1e3a4:	4618      	mov	r0, r3
   1e3a6:	f7ff f936 	bl	1d616 <vli_mult>
    vli_mmod_fast(result, product);
   1e3aa:	ab04      	add	r3, sp, #16
   1e3ac:	4619      	mov	r1, r3
   1e3ae:	9803      	ldr	r0, [sp, #12]
   1e3b0:	f7ff feb4 	bl	1e11c <vli_mmod_fast>
}
   1e3b4:	bf00      	nop
   1e3b6:	b015      	add	sp, #84	; 0x54
   1e3b8:	f85d fb04 	ldr.w	pc, [sp], #4

0001e3bc <vli_modSquare_fast>:

#if uECC_SQUARE_FUNC

/* Computes result = left^2 % curve_p. */
static void vli_modSquare_fast(uECC_word_t *result, const uECC_word_t *left) {
   1e3bc:	b500      	push	{lr}
   1e3be:	b093      	sub	sp, #76	; 0x4c
   1e3c0:	9001      	str	r0, [sp, #4]
   1e3c2:	9100      	str	r1, [sp, #0]
    uECC_word_t product[2 * uECC_WORDS];
    vli_square(product, left);
   1e3c4:	ab02      	add	r3, sp, #8
   1e3c6:	9900      	ldr	r1, [sp, #0]
   1e3c8:	4618      	mov	r0, r3
   1e3ca:	f7ff fc08 	bl	1dbde <vli_square>
    vli_mmod_fast(result, product);
   1e3ce:	ab02      	add	r3, sp, #8
   1e3d0:	4619      	mov	r1, r3
   1e3d2:	9801      	ldr	r0, [sp, #4]
   1e3d4:	f7ff fea2 	bl	1e11c <vli_mmod_fast>
}
   1e3d8:	bf00      	nop
   1e3da:	b013      	add	sp, #76	; 0x4c
   1e3dc:	f85d fb04 	ldr.w	pc, [sp], #4

0001e3e0 <vli_modInv>:
#define EVEN(vli) (!(vli[0] & 1))
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide"
   https://labs.oracle.com/techrep/2001/smli_tr-2001-95.pdf */
#if !defined(asm_modInv) || !asm_modInv
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   1e3e0:	b500      	push	{lr}
   1e3e2:	b0a7      	sub	sp, #156	; 0x9c
   1e3e4:	9003      	str	r0, [sp, #12]
   1e3e6:	9102      	str	r1, [sp, #8]
   1e3e8:	9201      	str	r2, [sp, #4]
    uECC_word_t a[uECC_WORDS], b[uECC_WORDS], u[uECC_WORDS], v[uECC_WORDS];
    uECC_word_t carry;
    cmpresult_t cmpResult;

    if (vli_isZero(input)) {
   1e3ea:	9802      	ldr	r0, [sp, #8]
   1e3ec:	f7ff fdcc 	bl	1df88 <vli_isZero>
   1e3f0:	4603      	mov	r3, r0
   1e3f2:	2b00      	cmp	r3, #0
   1e3f4:	d003      	beq.n	1e3fe <vli_modInv+0x1e>
        vli_clear(result);
   1e3f6:	9803      	ldr	r0, [sp, #12]
   1e3f8:	f7ff fdb1 	bl	1df5e <vli_clear>
   1e3fc:	e0d9      	b.n	1e5b2 <vli_modInv+0x1d2>
        return;
    }

    vli_set(a, input);
   1e3fe:	ab1c      	add	r3, sp, #112	; 0x70
   1e400:	9902      	ldr	r1, [sp, #8]
   1e402:	4618      	mov	r0, r3
   1e404:	f7ff fdeb 	bl	1dfde <vli_set>
    vli_set(b, mod);
   1e408:	ab14      	add	r3, sp, #80	; 0x50
   1e40a:	9901      	ldr	r1, [sp, #4]
   1e40c:	4618      	mov	r0, r3
   1e40e:	f7ff fde6 	bl	1dfde <vli_set>
    vli_clear(u);
   1e412:	ab0c      	add	r3, sp, #48	; 0x30
   1e414:	4618      	mov	r0, r3
   1e416:	f7ff fda2 	bl	1df5e <vli_clear>
    u[0] = 1;
   1e41a:	2301      	movs	r3, #1
   1e41c:	930c      	str	r3, [sp, #48]	; 0x30
    vli_clear(v);
   1e41e:	ab04      	add	r3, sp, #16
   1e420:	4618      	mov	r0, r3
   1e422:	f7ff fd9c 	bl	1df5e <vli_clear>
    while ((cmpResult = vli_cmp(a, b)) != 0) {
   1e426:	e0b4      	b.n	1e592 <vli_modInv+0x1b2>
        carry = 0;
   1e428:	2300      	movs	r3, #0
   1e42a:	9325      	str	r3, [sp, #148]	; 0x94
        if (EVEN(a)) {
   1e42c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1e42e:	f003 0301 	and.w	r3, r3, #1
   1e432:	2b00      	cmp	r3, #0
   1e434:	d11c      	bne.n	1e470 <vli_modInv+0x90>
            vli_rshift1(a);
   1e436:	ab1c      	add	r3, sp, #112	; 0x70
   1e438:	4618      	mov	r0, r3
   1e43a:	f7ff fe17 	bl	1e06c <vli_rshift1>
            if (!EVEN(u)) {
   1e43e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e440:	f003 0301 	and.w	r3, r3, #1
   1e444:	2b00      	cmp	r3, #0
   1e446:	d006      	beq.n	1e456 <vli_modInv+0x76>
                carry = vli_add(u, u, mod);
   1e448:	a90c      	add	r1, sp, #48	; 0x30
   1e44a:	ab0c      	add	r3, sp, #48	; 0x30
   1e44c:	9a01      	ldr	r2, [sp, #4]
   1e44e:	4618      	mov	r0, r3
   1e450:	f7ff f86e 	bl	1d530 <vli_add>
   1e454:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(u);
   1e456:	ab0c      	add	r3, sp, #48	; 0x30
   1e458:	4618      	mov	r0, r3
   1e45a:	f7ff fe07 	bl	1e06c <vli_rshift1>
            if (carry) {
   1e45e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1e460:	2b00      	cmp	r3, #0
   1e462:	f000 8096 	beq.w	1e592 <vli_modInv+0x1b2>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1e466:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e46c:	9313      	str	r3, [sp, #76]	; 0x4c
   1e46e:	e090      	b.n	1e592 <vli_modInv+0x1b2>
            }
        } else if (EVEN(b)) {
   1e470:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1e472:	f003 0301 	and.w	r3, r3, #1
   1e476:	2b00      	cmp	r3, #0
   1e478:	d11b      	bne.n	1e4b2 <vli_modInv+0xd2>
            vli_rshift1(b);
   1e47a:	ab14      	add	r3, sp, #80	; 0x50
   1e47c:	4618      	mov	r0, r3
   1e47e:	f7ff fdf5 	bl	1e06c <vli_rshift1>
            if (!EVEN(v)) {
   1e482:	9b04      	ldr	r3, [sp, #16]
   1e484:	f003 0301 	and.w	r3, r3, #1
   1e488:	2b00      	cmp	r3, #0
   1e48a:	d006      	beq.n	1e49a <vli_modInv+0xba>
                carry = vli_add(v, v, mod);
   1e48c:	a904      	add	r1, sp, #16
   1e48e:	ab04      	add	r3, sp, #16
   1e490:	9a01      	ldr	r2, [sp, #4]
   1e492:	4618      	mov	r0, r3
   1e494:	f7ff f84c 	bl	1d530 <vli_add>
   1e498:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(v);
   1e49a:	ab04      	add	r3, sp, #16
   1e49c:	4618      	mov	r0, r3
   1e49e:	f7ff fde5 	bl	1e06c <vli_rshift1>
            if (carry) {
   1e4a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1e4a4:	2b00      	cmp	r3, #0
   1e4a6:	d074      	beq.n	1e592 <vli_modInv+0x1b2>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1e4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e4aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e4ae:	930b      	str	r3, [sp, #44]	; 0x2c
   1e4b0:	e06f      	b.n	1e592 <vli_modInv+0x1b2>
            }
        } else if (cmpResult > 0) {
   1e4b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1e4b4:	2b00      	cmp	r3, #0
   1e4b6:	dd36      	ble.n	1e526 <vli_modInv+0x146>
            vli_sub(a, a, b);
   1e4b8:	aa14      	add	r2, sp, #80	; 0x50
   1e4ba:	a91c      	add	r1, sp, #112	; 0x70
   1e4bc:	ab1c      	add	r3, sp, #112	; 0x70
   1e4be:	4618      	mov	r0, r3
   1e4c0:	f7ff f86d 	bl	1d59e <vli_sub>
            vli_rshift1(a);
   1e4c4:	ab1c      	add	r3, sp, #112	; 0x70
   1e4c6:	4618      	mov	r0, r3
   1e4c8:	f7ff fdd0 	bl	1e06c <vli_rshift1>
            if (vli_cmp(u, v) < 0) {
   1e4cc:	aa04      	add	r2, sp, #16
   1e4ce:	ab0c      	add	r3, sp, #48	; 0x30
   1e4d0:	4611      	mov	r1, r2
   1e4d2:	4618      	mov	r0, r3
   1e4d4:	f7ff fd9d 	bl	1e012 <vli_cmp>
   1e4d8:	4603      	mov	r3, r0
   1e4da:	2b00      	cmp	r3, #0
   1e4dc:	da05      	bge.n	1e4ea <vli_modInv+0x10a>
                vli_add(u, u, mod);
   1e4de:	a90c      	add	r1, sp, #48	; 0x30
   1e4e0:	ab0c      	add	r3, sp, #48	; 0x30
   1e4e2:	9a01      	ldr	r2, [sp, #4]
   1e4e4:	4618      	mov	r0, r3
   1e4e6:	f7ff f823 	bl	1d530 <vli_add>
            }
            vli_sub(u, u, v);
   1e4ea:	aa04      	add	r2, sp, #16
   1e4ec:	a90c      	add	r1, sp, #48	; 0x30
   1e4ee:	ab0c      	add	r3, sp, #48	; 0x30
   1e4f0:	4618      	mov	r0, r3
   1e4f2:	f7ff f854 	bl	1d59e <vli_sub>
            if (!EVEN(u)) {
   1e4f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e4f8:	f003 0301 	and.w	r3, r3, #1
   1e4fc:	2b00      	cmp	r3, #0
   1e4fe:	d006      	beq.n	1e50e <vli_modInv+0x12e>
                carry = vli_add(u, u, mod);
   1e500:	a90c      	add	r1, sp, #48	; 0x30
   1e502:	ab0c      	add	r3, sp, #48	; 0x30
   1e504:	9a01      	ldr	r2, [sp, #4]
   1e506:	4618      	mov	r0, r3
   1e508:	f7ff f812 	bl	1d530 <vli_add>
   1e50c:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(u);
   1e50e:	ab0c      	add	r3, sp, #48	; 0x30
   1e510:	4618      	mov	r0, r3
   1e512:	f7ff fdab 	bl	1e06c <vli_rshift1>
            if (carry) {
   1e516:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1e518:	2b00      	cmp	r3, #0
   1e51a:	d03a      	beq.n	1e592 <vli_modInv+0x1b2>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1e51c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e51e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e522:	9313      	str	r3, [sp, #76]	; 0x4c
   1e524:	e035      	b.n	1e592 <vli_modInv+0x1b2>
            }
        } else {
            vli_sub(b, b, a);
   1e526:	aa1c      	add	r2, sp, #112	; 0x70
   1e528:	a914      	add	r1, sp, #80	; 0x50
   1e52a:	ab14      	add	r3, sp, #80	; 0x50
   1e52c:	4618      	mov	r0, r3
   1e52e:	f7ff f836 	bl	1d59e <vli_sub>
            vli_rshift1(b);
   1e532:	ab14      	add	r3, sp, #80	; 0x50
   1e534:	4618      	mov	r0, r3
   1e536:	f7ff fd99 	bl	1e06c <vli_rshift1>
            if (vli_cmp(v, u) < 0) {
   1e53a:	aa0c      	add	r2, sp, #48	; 0x30
   1e53c:	ab04      	add	r3, sp, #16
   1e53e:	4611      	mov	r1, r2
   1e540:	4618      	mov	r0, r3
   1e542:	f7ff fd66 	bl	1e012 <vli_cmp>
   1e546:	4603      	mov	r3, r0
   1e548:	2b00      	cmp	r3, #0
   1e54a:	da05      	bge.n	1e558 <vli_modInv+0x178>
                vli_add(v, v, mod);
   1e54c:	a904      	add	r1, sp, #16
   1e54e:	ab04      	add	r3, sp, #16
   1e550:	9a01      	ldr	r2, [sp, #4]
   1e552:	4618      	mov	r0, r3
   1e554:	f7fe ffec 	bl	1d530 <vli_add>
            }
            vli_sub(v, v, u);
   1e558:	aa0c      	add	r2, sp, #48	; 0x30
   1e55a:	a904      	add	r1, sp, #16
   1e55c:	ab04      	add	r3, sp, #16
   1e55e:	4618      	mov	r0, r3
   1e560:	f7ff f81d 	bl	1d59e <vli_sub>
            if (!EVEN(v)) {
   1e564:	9b04      	ldr	r3, [sp, #16]
   1e566:	f003 0301 	and.w	r3, r3, #1
   1e56a:	2b00      	cmp	r3, #0
   1e56c:	d006      	beq.n	1e57c <vli_modInv+0x19c>
                carry = vli_add(v, v, mod);
   1e56e:	a904      	add	r1, sp, #16
   1e570:	ab04      	add	r3, sp, #16
   1e572:	9a01      	ldr	r2, [sp, #4]
   1e574:	4618      	mov	r0, r3
   1e576:	f7fe ffdb 	bl	1d530 <vli_add>
   1e57a:	9025      	str	r0, [sp, #148]	; 0x94
            }
            vli_rshift1(v);
   1e57c:	ab04      	add	r3, sp, #16
   1e57e:	4618      	mov	r0, r3
   1e580:	f7ff fd74 	bl	1e06c <vli_rshift1>
            if (carry) {
   1e584:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1e586:	2b00      	cmp	r3, #0
   1e588:	d003      	beq.n	1e592 <vli_modInv+0x1b2>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1e58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e58c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1e590:	930b      	str	r3, [sp, #44]	; 0x2c
    while ((cmpResult = vli_cmp(a, b)) != 0) {
   1e592:	aa14      	add	r2, sp, #80	; 0x50
   1e594:	ab1c      	add	r3, sp, #112	; 0x70
   1e596:	4611      	mov	r1, r2
   1e598:	4618      	mov	r0, r3
   1e59a:	f7ff fd3a 	bl	1e012 <vli_cmp>
   1e59e:	9024      	str	r0, [sp, #144]	; 0x90
   1e5a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1e5a2:	2b00      	cmp	r3, #0
   1e5a4:	f47f af40 	bne.w	1e428 <vli_modInv+0x48>
            }
        }
    }
    vli_set(result, u);
   1e5a8:	ab0c      	add	r3, sp, #48	; 0x30
   1e5aa:	4619      	mov	r1, r3
   1e5ac:	9803      	ldr	r0, [sp, #12]
   1e5ae:	f7ff fd16 	bl	1dfde <vli_set>
}
   1e5b2:	b027      	add	sp, #156	; 0x9c
   1e5b4:	f85d fb04 	ldr.w	pc, [sp], #4

0001e5b8 <EccPoint_isZero>:
#endif /* !asm_modInv */

/* ------ Point operations ------ */

/* Returns 1 if 'point' is the point at infinity, 0 otherwise. */
static cmpresult_t EccPoint_isZero(const EccPoint *point) {
   1e5b8:	b500      	push	{lr}
   1e5ba:	b083      	sub	sp, #12
   1e5bc:	9001      	str	r0, [sp, #4]
    return (vli_isZero(point->x) && vli_isZero(point->y));
   1e5be:	9b01      	ldr	r3, [sp, #4]
   1e5c0:	4618      	mov	r0, r3
   1e5c2:	f7ff fce1 	bl	1df88 <vli_isZero>
   1e5c6:	4603      	mov	r3, r0
   1e5c8:	2b00      	cmp	r3, #0
   1e5ca:	d009      	beq.n	1e5e0 <EccPoint_isZero+0x28>
   1e5cc:	9b01      	ldr	r3, [sp, #4]
   1e5ce:	3320      	adds	r3, #32
   1e5d0:	4618      	mov	r0, r3
   1e5d2:	f7ff fcd9 	bl	1df88 <vli_isZero>
   1e5d6:	4603      	mov	r3, r0
   1e5d8:	2b00      	cmp	r3, #0
   1e5da:	d001      	beq.n	1e5e0 <EccPoint_isZero+0x28>
   1e5dc:	2301      	movs	r3, #1
   1e5de:	e000      	b.n	1e5e2 <EccPoint_isZero+0x2a>
   1e5e0:	2300      	movs	r3, #0
}
   1e5e2:	4618      	mov	r0, r3
   1e5e4:	b003      	add	sp, #12
   1e5e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001e5ec <EccPoint_double_jacobian>:
    vli_modSub(Y1, Y1, t5, curve_p); /* t2 = B * (A - x3) - y1^4 = y3 */
}
#else
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
                                     uECC_word_t * RESTRICT Y1,
                                     uECC_word_t * RESTRICT Z1) {
   1e5ec:	b500      	push	{lr}
   1e5ee:	b097      	sub	sp, #92	; 0x5c
   1e5f0:	9003      	str	r0, [sp, #12]
   1e5f2:	9102      	str	r1, [sp, #8]
   1e5f4:	9201      	str	r2, [sp, #4]
    /* t1 = X, t2 = Y, t3 = Z */
    uECC_word_t t4[uECC_WORDS];
    uECC_word_t t5[uECC_WORDS];

    if (vli_isZero(Z1)) {
   1e5f6:	9801      	ldr	r0, [sp, #4]
   1e5f8:	f7ff fcc6 	bl	1df88 <vli_isZero>
   1e5fc:	4603      	mov	r3, r0
   1e5fe:	2b00      	cmp	r3, #0
   1e600:	f040 808a 	bne.w	1e718 <EccPoint_double_jacobian+0x12c>
        return;
    }

    vli_modSquare_fast(t4, Y1);   /* t4 = y1^2 */
   1e604:	ab0d      	add	r3, sp, #52	; 0x34
   1e606:	9902      	ldr	r1, [sp, #8]
   1e608:	4618      	mov	r0, r3
   1e60a:	f7ff fed7 	bl	1e3bc <vli_modSquare_fast>
    vli_modMult_fast(t5, X1, t4); /* t5 = x1*y1^2 = A */
   1e60e:	aa0d      	add	r2, sp, #52	; 0x34
   1e610:	ab05      	add	r3, sp, #20
   1e612:	9903      	ldr	r1, [sp, #12]
   1e614:	4618      	mov	r0, r3
   1e616:	f7ff febd 	bl	1e394 <vli_modMult_fast>
    vli_modSquare_fast(t4, t4);   /* t4 = y1^4 */
   1e61a:	aa0d      	add	r2, sp, #52	; 0x34
   1e61c:	ab0d      	add	r3, sp, #52	; 0x34
   1e61e:	4611      	mov	r1, r2
   1e620:	4618      	mov	r0, r3
   1e622:	f7ff fecb 	bl	1e3bc <vli_modSquare_fast>
    vli_modMult_fast(Y1, Y1, Z1); /* t2 = y1*z1 = z3 */
   1e626:	9a01      	ldr	r2, [sp, #4]
   1e628:	9902      	ldr	r1, [sp, #8]
   1e62a:	9802      	ldr	r0, [sp, #8]
   1e62c:	f7ff feb2 	bl	1e394 <vli_modMult_fast>
    vli_modSquare_fast(Z1, Z1);   /* t3 = z1^2 */
   1e630:	9901      	ldr	r1, [sp, #4]
   1e632:	9801      	ldr	r0, [sp, #4]
   1e634:	f7ff fec2 	bl	1e3bc <vli_modSquare_fast>

    vli_modAdd(X1, X1, Z1, curve_p); /* t1 = x1 + z1^2 */
   1e638:	4b39      	ldr	r3, [pc, #228]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e63a:	9a01      	ldr	r2, [sp, #4]
   1e63c:	9903      	ldr	r1, [sp, #12]
   1e63e:	9803      	ldr	r0, [sp, #12]
   1e640:	f7ff fd34 	bl	1e0ac <vli_modAdd>
    vli_modAdd(Z1, Z1, Z1, curve_p); /* t3 = 2*z1^2 */
   1e644:	4b36      	ldr	r3, [pc, #216]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e646:	9a01      	ldr	r2, [sp, #4]
   1e648:	9901      	ldr	r1, [sp, #4]
   1e64a:	9801      	ldr	r0, [sp, #4]
   1e64c:	f7ff fd2e 	bl	1e0ac <vli_modAdd>
    vli_modSub_fast(Z1, X1, Z1);     /* t3 = x1 - z1^2 */
   1e650:	4b33      	ldr	r3, [pc, #204]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e652:	9a01      	ldr	r2, [sp, #4]
   1e654:	9903      	ldr	r1, [sp, #12]
   1e656:	9801      	ldr	r0, [sp, #4]
   1e658:	f7ff fd47 	bl	1e0ea <vli_modSub>
    vli_modMult_fast(X1, X1, Z1);    /* t1 = x1^2 - z1^4 */
   1e65c:	9a01      	ldr	r2, [sp, #4]
   1e65e:	9903      	ldr	r1, [sp, #12]
   1e660:	9803      	ldr	r0, [sp, #12]
   1e662:	f7ff fe97 	bl	1e394 <vli_modMult_fast>

    vli_modAdd(Z1, X1, X1, curve_p); /* t3 = 2*(x1^2 - z1^4) */
   1e666:	4b2e      	ldr	r3, [pc, #184]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e668:	9a03      	ldr	r2, [sp, #12]
   1e66a:	9903      	ldr	r1, [sp, #12]
   1e66c:	9801      	ldr	r0, [sp, #4]
   1e66e:	f7ff fd1d 	bl	1e0ac <vli_modAdd>
    vli_modAdd(X1, X1, Z1, curve_p); /* t1 = 3*(x1^2 - z1^4) */
   1e672:	4b2b      	ldr	r3, [pc, #172]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e674:	9a01      	ldr	r2, [sp, #4]
   1e676:	9903      	ldr	r1, [sp, #12]
   1e678:	9803      	ldr	r0, [sp, #12]
   1e67a:	f7ff fd17 	bl	1e0ac <vli_modAdd>
    if (vli_testBit(X1, 0)) {
   1e67e:	2100      	movs	r1, #0
   1e680:	9803      	ldr	r0, [sp, #12]
   1e682:	f7ff fc99 	bl	1dfb8 <vli_testBit>
   1e686:	4603      	mov	r3, r0
   1e688:	2b00      	cmp	r3, #0
   1e68a:	d012      	beq.n	1e6b2 <EccPoint_double_jacobian+0xc6>
        uECC_word_t l_carry = vli_add(X1, X1, curve_p);
   1e68c:	4a24      	ldr	r2, [pc, #144]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e68e:	9903      	ldr	r1, [sp, #12]
   1e690:	9803      	ldr	r0, [sp, #12]
   1e692:	f7fe ff4d 	bl	1d530 <vli_add>
   1e696:	9015      	str	r0, [sp, #84]	; 0x54
        vli_rshift1(X1);
   1e698:	9803      	ldr	r0, [sp, #12]
   1e69a:	f7ff fce7 	bl	1e06c <vli_rshift1>
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1e69e:	9b03      	ldr	r3, [sp, #12]
   1e6a0:	331c      	adds	r3, #28
   1e6a2:	6819      	ldr	r1, [r3, #0]
   1e6a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1e6a6:	07da      	lsls	r2, r3, #31
   1e6a8:	9b03      	ldr	r3, [sp, #12]
   1e6aa:	331c      	adds	r3, #28
   1e6ac:	430a      	orrs	r2, r1
   1e6ae:	601a      	str	r2, [r3, #0]
   1e6b0:	e002      	b.n	1e6b8 <EccPoint_double_jacobian+0xcc>
    } else {
        vli_rshift1(X1);
   1e6b2:	9803      	ldr	r0, [sp, #12]
   1e6b4:	f7ff fcda 	bl	1e06c <vli_rshift1>
    }
    /* t1 = 3/2*(x1^2 - z1^4) = B */

    vli_modSquare_fast(Z1, X1);   /* t3 = B^2 */
   1e6b8:	9903      	ldr	r1, [sp, #12]
   1e6ba:	9801      	ldr	r0, [sp, #4]
   1e6bc:	f7ff fe7e 	bl	1e3bc <vli_modSquare_fast>
    vli_modSub_fast(Z1, Z1, t5);  /* t3 = B^2 - A */
   1e6c0:	aa05      	add	r2, sp, #20
   1e6c2:	4b17      	ldr	r3, [pc, #92]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e6c4:	9901      	ldr	r1, [sp, #4]
   1e6c6:	9801      	ldr	r0, [sp, #4]
   1e6c8:	f7ff fd0f 	bl	1e0ea <vli_modSub>
    vli_modSub_fast(Z1, Z1, t5);  /* t3 = B^2 - 2A = x3 */
   1e6cc:	aa05      	add	r2, sp, #20
   1e6ce:	4b14      	ldr	r3, [pc, #80]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e6d0:	9901      	ldr	r1, [sp, #4]
   1e6d2:	9801      	ldr	r0, [sp, #4]
   1e6d4:	f7ff fd09 	bl	1e0ea <vli_modSub>
    vli_modSub_fast(t5, t5, Z1);  /* t5 = A - x3 */
   1e6d8:	a905      	add	r1, sp, #20
   1e6da:	a805      	add	r0, sp, #20
   1e6dc:	4b10      	ldr	r3, [pc, #64]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e6de:	9a01      	ldr	r2, [sp, #4]
   1e6e0:	f7ff fd03 	bl	1e0ea <vli_modSub>
    vli_modMult_fast(X1, X1, t5); /* t1 = B * (A - x3) */
   1e6e4:	ab05      	add	r3, sp, #20
   1e6e6:	461a      	mov	r2, r3
   1e6e8:	9903      	ldr	r1, [sp, #12]
   1e6ea:	9803      	ldr	r0, [sp, #12]
   1e6ec:	f7ff fe52 	bl	1e394 <vli_modMult_fast>
    vli_modSub_fast(t4, X1, t4);  /* t4 = B * (A - x3) - y1^4 = y3 */
   1e6f0:	aa0d      	add	r2, sp, #52	; 0x34
   1e6f2:	a80d      	add	r0, sp, #52	; 0x34
   1e6f4:	4b0a      	ldr	r3, [pc, #40]	; (1e720 <EccPoint_double_jacobian+0x134>)
   1e6f6:	9903      	ldr	r1, [sp, #12]
   1e6f8:	f7ff fcf7 	bl	1e0ea <vli_modSub>

    vli_set(X1, Z1);
   1e6fc:	9901      	ldr	r1, [sp, #4]
   1e6fe:	9803      	ldr	r0, [sp, #12]
   1e700:	f7ff fc6d 	bl	1dfde <vli_set>
    vli_set(Z1, Y1);
   1e704:	9902      	ldr	r1, [sp, #8]
   1e706:	9801      	ldr	r0, [sp, #4]
   1e708:	f7ff fc69 	bl	1dfde <vli_set>
    vli_set(Y1, t4);
   1e70c:	ab0d      	add	r3, sp, #52	; 0x34
   1e70e:	4619      	mov	r1, r3
   1e710:	9802      	ldr	r0, [sp, #8]
   1e712:	f7ff fc64 	bl	1dfde <vli_set>
   1e716:	e000      	b.n	1e71a <EccPoint_double_jacobian+0x12e>
        return;
   1e718:	bf00      	nop
}
   1e71a:	b017      	add	sp, #92	; 0x5c
   1e71c:	f85d fb04 	ldr.w	pc, [sp], #4
   1e720:	000286e8 	.word	0x000286e8

0001e724 <apply_z>:
#endif

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(uECC_word_t * RESTRICT X1,
                    uECC_word_t * RESTRICT Y1,
                    const uECC_word_t * RESTRICT Z) {
   1e724:	b500      	push	{lr}
   1e726:	b08d      	sub	sp, #52	; 0x34
   1e728:	9003      	str	r0, [sp, #12]
   1e72a:	9102      	str	r1, [sp, #8]
   1e72c:	9201      	str	r2, [sp, #4]
    uECC_word_t t1[uECC_WORDS];

    vli_modSquare_fast(t1, Z);    /* z^2 */
   1e72e:	ab04      	add	r3, sp, #16
   1e730:	9901      	ldr	r1, [sp, #4]
   1e732:	4618      	mov	r0, r3
   1e734:	f7ff fe42 	bl	1e3bc <vli_modSquare_fast>
    vli_modMult_fast(X1, X1, t1); /* x1 * z^2 */
   1e738:	ab04      	add	r3, sp, #16
   1e73a:	461a      	mov	r2, r3
   1e73c:	9903      	ldr	r1, [sp, #12]
   1e73e:	9803      	ldr	r0, [sp, #12]
   1e740:	f7ff fe28 	bl	1e394 <vli_modMult_fast>
    vli_modMult_fast(t1, t1, Z);  /* z^3 */
   1e744:	a904      	add	r1, sp, #16
   1e746:	ab04      	add	r3, sp, #16
   1e748:	9a01      	ldr	r2, [sp, #4]
   1e74a:	4618      	mov	r0, r3
   1e74c:	f7ff fe22 	bl	1e394 <vli_modMult_fast>
    vli_modMult_fast(Y1, Y1, t1); /* y1 * z^3 */
   1e750:	ab04      	add	r3, sp, #16
   1e752:	461a      	mov	r2, r3
   1e754:	9902      	ldr	r1, [sp, #8]
   1e756:	9802      	ldr	r0, [sp, #8]
   1e758:	f7ff fe1c 	bl	1e394 <vli_modMult_fast>
}
   1e75c:	bf00      	nop
   1e75e:	b00d      	add	sp, #52	; 0x34
   1e760:	f85d fb04 	ldr.w	pc, [sp], #4

0001e764 <XYcZ_initial_double>:
/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(uECC_word_t * RESTRICT X1,
                                uECC_word_t * RESTRICT Y1,
                                uECC_word_t * RESTRICT X2,
                                uECC_word_t * RESTRICT Y2,
                                const uECC_word_t * RESTRICT initial_Z) {
   1e764:	b500      	push	{lr}
   1e766:	b08d      	sub	sp, #52	; 0x34
   1e768:	9003      	str	r0, [sp, #12]
   1e76a:	9102      	str	r1, [sp, #8]
   1e76c:	9201      	str	r2, [sp, #4]
   1e76e:	9300      	str	r3, [sp, #0]
    uECC_word_t z[uECC_WORDS];
    if (initial_Z) {
   1e770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e772:	2b00      	cmp	r3, #0
   1e774:	d005      	beq.n	1e782 <XYcZ_initial_double+0x1e>
        vli_set(z, initial_Z);
   1e776:	ab04      	add	r3, sp, #16
   1e778:	990e      	ldr	r1, [sp, #56]	; 0x38
   1e77a:	4618      	mov	r0, r3
   1e77c:	f7ff fc2f 	bl	1dfde <vli_set>
   1e780:	e005      	b.n	1e78e <XYcZ_initial_double+0x2a>
    } else {
        vli_clear(z);
   1e782:	ab04      	add	r3, sp, #16
   1e784:	4618      	mov	r0, r3
   1e786:	f7ff fbea 	bl	1df5e <vli_clear>
        z[0] = 1;
   1e78a:	2301      	movs	r3, #1
   1e78c:	9304      	str	r3, [sp, #16]
    }

    vli_set(X2, X1);
   1e78e:	9903      	ldr	r1, [sp, #12]
   1e790:	9801      	ldr	r0, [sp, #4]
   1e792:	f7ff fc24 	bl	1dfde <vli_set>
    vli_set(Y2, Y1);
   1e796:	9902      	ldr	r1, [sp, #8]
   1e798:	9800      	ldr	r0, [sp, #0]
   1e79a:	f7ff fc20 	bl	1dfde <vli_set>

    apply_z(X1, Y1, z);
   1e79e:	ab04      	add	r3, sp, #16
   1e7a0:	461a      	mov	r2, r3
   1e7a2:	9902      	ldr	r1, [sp, #8]
   1e7a4:	9803      	ldr	r0, [sp, #12]
   1e7a6:	f7ff ffbd 	bl	1e724 <apply_z>
    EccPoint_double_jacobian(X1, Y1, z);
   1e7aa:	ab04      	add	r3, sp, #16
   1e7ac:	461a      	mov	r2, r3
   1e7ae:	9902      	ldr	r1, [sp, #8]
   1e7b0:	9803      	ldr	r0, [sp, #12]
   1e7b2:	f7ff ff1b 	bl	1e5ec <EccPoint_double_jacobian>
    apply_z(X2, Y2, z);
   1e7b6:	ab04      	add	r3, sp, #16
   1e7b8:	461a      	mov	r2, r3
   1e7ba:	9900      	ldr	r1, [sp, #0]
   1e7bc:	9801      	ldr	r0, [sp, #4]
   1e7be:	f7ff ffb1 	bl	1e724 <apply_z>
}
   1e7c2:	bf00      	nop
   1e7c4:	b00d      	add	sp, #52	; 0x34
   1e7c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001e7cc <XYcZ_add>:
   or P => P', Q => P + Q
*/
static void XYcZ_add(uECC_word_t * RESTRICT X1,
                     uECC_word_t * RESTRICT Y1,
                     uECC_word_t * RESTRICT X2,
                     uECC_word_t * RESTRICT Y2) {
   1e7cc:	b500      	push	{lr}
   1e7ce:	b08d      	sub	sp, #52	; 0x34
   1e7d0:	9003      	str	r0, [sp, #12]
   1e7d2:	9102      	str	r1, [sp, #8]
   1e7d4:	9201      	str	r2, [sp, #4]
   1e7d6:	9300      	str	r3, [sp, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_WORDS];

    vli_modSub_fast(t5, X2, X1);  /* t5 = x2 - x1 */
   1e7d8:	a804      	add	r0, sp, #16
   1e7da:	4b29      	ldr	r3, [pc, #164]	; (1e880 <XYcZ_add+0xb4>)
   1e7dc:	9a03      	ldr	r2, [sp, #12]
   1e7de:	9901      	ldr	r1, [sp, #4]
   1e7e0:	f7ff fc83 	bl	1e0ea <vli_modSub>
    vli_modSquare_fast(t5, t5);   /* t5 = (x2 - x1)^2 = A */
   1e7e4:	aa04      	add	r2, sp, #16
   1e7e6:	ab04      	add	r3, sp, #16
   1e7e8:	4611      	mov	r1, r2
   1e7ea:	4618      	mov	r0, r3
   1e7ec:	f7ff fde6 	bl	1e3bc <vli_modSquare_fast>
    vli_modMult_fast(X1, X1, t5); /* t1 = x1*A = B */
   1e7f0:	ab04      	add	r3, sp, #16
   1e7f2:	461a      	mov	r2, r3
   1e7f4:	9903      	ldr	r1, [sp, #12]
   1e7f6:	9803      	ldr	r0, [sp, #12]
   1e7f8:	f7ff fdcc 	bl	1e394 <vli_modMult_fast>
    vli_modMult_fast(X2, X2, t5); /* t3 = x2*A = C */
   1e7fc:	ab04      	add	r3, sp, #16
   1e7fe:	461a      	mov	r2, r3
   1e800:	9901      	ldr	r1, [sp, #4]
   1e802:	9801      	ldr	r0, [sp, #4]
   1e804:	f7ff fdc6 	bl	1e394 <vli_modMult_fast>
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y2 - y1 */
   1e808:	4b1d      	ldr	r3, [pc, #116]	; (1e880 <XYcZ_add+0xb4>)
   1e80a:	9a02      	ldr	r2, [sp, #8]
   1e80c:	9900      	ldr	r1, [sp, #0]
   1e80e:	9800      	ldr	r0, [sp, #0]
   1e810:	f7ff fc6b 	bl	1e0ea <vli_modSub>
    vli_modSquare_fast(t5, Y2);   /* t5 = (y2 - y1)^2 = D */
   1e814:	ab04      	add	r3, sp, #16
   1e816:	9900      	ldr	r1, [sp, #0]
   1e818:	4618      	mov	r0, r3
   1e81a:	f7ff fdcf 	bl	1e3bc <vli_modSquare_fast>

    vli_modSub_fast(t5, t5, X1);  /* t5 = D - B */
   1e81e:	a904      	add	r1, sp, #16
   1e820:	a804      	add	r0, sp, #16
   1e822:	4b17      	ldr	r3, [pc, #92]	; (1e880 <XYcZ_add+0xb4>)
   1e824:	9a03      	ldr	r2, [sp, #12]
   1e826:	f7ff fc60 	bl	1e0ea <vli_modSub>
    vli_modSub_fast(t5, t5, X2);  /* t5 = D - B - C = x3 */
   1e82a:	a904      	add	r1, sp, #16
   1e82c:	a804      	add	r0, sp, #16
   1e82e:	4b14      	ldr	r3, [pc, #80]	; (1e880 <XYcZ_add+0xb4>)
   1e830:	9a01      	ldr	r2, [sp, #4]
   1e832:	f7ff fc5a 	bl	1e0ea <vli_modSub>
    vli_modSub_fast(X2, X2, X1);  /* t3 = C - B */
   1e836:	4b12      	ldr	r3, [pc, #72]	; (1e880 <XYcZ_add+0xb4>)
   1e838:	9a03      	ldr	r2, [sp, #12]
   1e83a:	9901      	ldr	r1, [sp, #4]
   1e83c:	9801      	ldr	r0, [sp, #4]
   1e83e:	f7ff fc54 	bl	1e0ea <vli_modSub>
    vli_modMult_fast(Y1, Y1, X2); /* t2 = y1*(C - B) */
   1e842:	9a01      	ldr	r2, [sp, #4]
   1e844:	9902      	ldr	r1, [sp, #8]
   1e846:	9802      	ldr	r0, [sp, #8]
   1e848:	f7ff fda4 	bl	1e394 <vli_modMult_fast>
    vli_modSub_fast(X2, X1, t5);  /* t3 = B - x3 */
   1e84c:	aa04      	add	r2, sp, #16
   1e84e:	4b0c      	ldr	r3, [pc, #48]	; (1e880 <XYcZ_add+0xb4>)
   1e850:	9903      	ldr	r1, [sp, #12]
   1e852:	9801      	ldr	r0, [sp, #4]
   1e854:	f7ff fc49 	bl	1e0ea <vli_modSub>
    vli_modMult_fast(Y2, Y2, X2); /* t4 = (y2 - y1)*(B - x3) */
   1e858:	9a01      	ldr	r2, [sp, #4]
   1e85a:	9900      	ldr	r1, [sp, #0]
   1e85c:	9800      	ldr	r0, [sp, #0]
   1e85e:	f7ff fd99 	bl	1e394 <vli_modMult_fast>
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y3 */
   1e862:	4b07      	ldr	r3, [pc, #28]	; (1e880 <XYcZ_add+0xb4>)
   1e864:	9a02      	ldr	r2, [sp, #8]
   1e866:	9900      	ldr	r1, [sp, #0]
   1e868:	9800      	ldr	r0, [sp, #0]
   1e86a:	f7ff fc3e 	bl	1e0ea <vli_modSub>

    vli_set(X2, t5);
   1e86e:	ab04      	add	r3, sp, #16
   1e870:	4619      	mov	r1, r3
   1e872:	9801      	ldr	r0, [sp, #4]
   1e874:	f7ff fbb3 	bl	1dfde <vli_set>
}
   1e878:	bf00      	nop
   1e87a:	b00d      	add	sp, #52	; 0x34
   1e87c:	f85d fb04 	ldr.w	pc, [sp], #4
   1e880:	000286e8 	.word	0x000286e8

0001e884 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(uECC_word_t * RESTRICT X1,
                      uECC_word_t * RESTRICT Y1,
                      uECC_word_t * RESTRICT X2,
                      uECC_word_t * RESTRICT Y2) {
   1e884:	b500      	push	{lr}
   1e886:	b09d      	sub	sp, #116	; 0x74
   1e888:	9003      	str	r0, [sp, #12]
   1e88a:	9102      	str	r1, [sp, #8]
   1e88c:	9201      	str	r2, [sp, #4]
   1e88e:	9300      	str	r3, [sp, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_WORDS];
    uECC_word_t t6[uECC_WORDS];
    uECC_word_t t7[uECC_WORDS];

    vli_modSub_fast(t5, X2, X1);     /* t5 = x2 - x1 */
   1e890:	a814      	add	r0, sp, #80	; 0x50
   1e892:	4b3c      	ldr	r3, [pc, #240]	; (1e984 <XYcZ_addC+0x100>)
   1e894:	9a03      	ldr	r2, [sp, #12]
   1e896:	9901      	ldr	r1, [sp, #4]
   1e898:	f7ff fc27 	bl	1e0ea <vli_modSub>
    vli_modSquare_fast(t5, t5);      /* t5 = (x2 - x1)^2 = A */
   1e89c:	aa14      	add	r2, sp, #80	; 0x50
   1e89e:	ab14      	add	r3, sp, #80	; 0x50
   1e8a0:	4611      	mov	r1, r2
   1e8a2:	4618      	mov	r0, r3
   1e8a4:	f7ff fd8a 	bl	1e3bc <vli_modSquare_fast>
    vli_modMult_fast(X1, X1, t5);    /* t1 = x1*A = B */
   1e8a8:	ab14      	add	r3, sp, #80	; 0x50
   1e8aa:	461a      	mov	r2, r3
   1e8ac:	9903      	ldr	r1, [sp, #12]
   1e8ae:	9803      	ldr	r0, [sp, #12]
   1e8b0:	f7ff fd70 	bl	1e394 <vli_modMult_fast>
    vli_modMult_fast(X2, X2, t5);    /* t3 = x2*A = C */
   1e8b4:	ab14      	add	r3, sp, #80	; 0x50
   1e8b6:	461a      	mov	r2, r3
   1e8b8:	9901      	ldr	r1, [sp, #4]
   1e8ba:	9801      	ldr	r0, [sp, #4]
   1e8bc:	f7ff fd6a 	bl	1e394 <vli_modMult_fast>
    vli_modAdd(t5, Y2, Y1, curve_p); /* t5 = y2 + y1 */
   1e8c0:	a814      	add	r0, sp, #80	; 0x50
   1e8c2:	4b30      	ldr	r3, [pc, #192]	; (1e984 <XYcZ_addC+0x100>)
   1e8c4:	9a02      	ldr	r2, [sp, #8]
   1e8c6:	9900      	ldr	r1, [sp, #0]
   1e8c8:	f7ff fbf0 	bl	1e0ac <vli_modAdd>
    vli_modSub_fast(Y2, Y2, Y1);     /* t4 = y2 - y1 */
   1e8cc:	4b2d      	ldr	r3, [pc, #180]	; (1e984 <XYcZ_addC+0x100>)
   1e8ce:	9a02      	ldr	r2, [sp, #8]
   1e8d0:	9900      	ldr	r1, [sp, #0]
   1e8d2:	9800      	ldr	r0, [sp, #0]
   1e8d4:	f7ff fc09 	bl	1e0ea <vli_modSub>

    vli_modSub_fast(t6, X2, X1);     /* t6 = C - B */
   1e8d8:	a80c      	add	r0, sp, #48	; 0x30
   1e8da:	4b2a      	ldr	r3, [pc, #168]	; (1e984 <XYcZ_addC+0x100>)
   1e8dc:	9a03      	ldr	r2, [sp, #12]
   1e8de:	9901      	ldr	r1, [sp, #4]
   1e8e0:	f7ff fc03 	bl	1e0ea <vli_modSub>
    vli_modMult_fast(Y1, Y1, t6);    /* t2 = y1 * (C - B) = E */
   1e8e4:	ab0c      	add	r3, sp, #48	; 0x30
   1e8e6:	461a      	mov	r2, r3
   1e8e8:	9902      	ldr	r1, [sp, #8]
   1e8ea:	9802      	ldr	r0, [sp, #8]
   1e8ec:	f7ff fd52 	bl	1e394 <vli_modMult_fast>
    vli_modAdd(t6, X1, X2, curve_p); /* t6 = B + C */
   1e8f0:	a80c      	add	r0, sp, #48	; 0x30
   1e8f2:	4b24      	ldr	r3, [pc, #144]	; (1e984 <XYcZ_addC+0x100>)
   1e8f4:	9a01      	ldr	r2, [sp, #4]
   1e8f6:	9903      	ldr	r1, [sp, #12]
   1e8f8:	f7ff fbd8 	bl	1e0ac <vli_modAdd>
    vli_modSquare_fast(X2, Y2);      /* t3 = (y2 - y1)^2 = D */
   1e8fc:	9900      	ldr	r1, [sp, #0]
   1e8fe:	9801      	ldr	r0, [sp, #4]
   1e900:	f7ff fd5c 	bl	1e3bc <vli_modSquare_fast>
    vli_modSub_fast(X2, X2, t6);     /* t3 = D - (B + C) = x3 */
   1e904:	aa0c      	add	r2, sp, #48	; 0x30
   1e906:	4b1f      	ldr	r3, [pc, #124]	; (1e984 <XYcZ_addC+0x100>)
   1e908:	9901      	ldr	r1, [sp, #4]
   1e90a:	9801      	ldr	r0, [sp, #4]
   1e90c:	f7ff fbed 	bl	1e0ea <vli_modSub>

    vli_modSub_fast(t7, X1, X2);  /* t7 = B - x3 */
   1e910:	a804      	add	r0, sp, #16
   1e912:	4b1c      	ldr	r3, [pc, #112]	; (1e984 <XYcZ_addC+0x100>)
   1e914:	9a01      	ldr	r2, [sp, #4]
   1e916:	9903      	ldr	r1, [sp, #12]
   1e918:	f7ff fbe7 	bl	1e0ea <vli_modSub>
    vli_modMult_fast(Y2, Y2, t7); /* t4 = (y2 - y1)*(B - x3) */
   1e91c:	ab04      	add	r3, sp, #16
   1e91e:	461a      	mov	r2, r3
   1e920:	9900      	ldr	r1, [sp, #0]
   1e922:	9800      	ldr	r0, [sp, #0]
   1e924:	f7ff fd36 	bl	1e394 <vli_modMult_fast>
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = (y2 - y1)*(B - x3) - E = y3 */
   1e928:	4b16      	ldr	r3, [pc, #88]	; (1e984 <XYcZ_addC+0x100>)
   1e92a:	9a02      	ldr	r2, [sp, #8]
   1e92c:	9900      	ldr	r1, [sp, #0]
   1e92e:	9800      	ldr	r0, [sp, #0]
   1e930:	f7ff fbdb 	bl	1e0ea <vli_modSub>

    vli_modSquare_fast(t7, t5);   /* t7 = (y2 + y1)^2 = F */
   1e934:	aa14      	add	r2, sp, #80	; 0x50
   1e936:	ab04      	add	r3, sp, #16
   1e938:	4611      	mov	r1, r2
   1e93a:	4618      	mov	r0, r3
   1e93c:	f7ff fd3e 	bl	1e3bc <vli_modSquare_fast>
    vli_modSub_fast(t7, t7, t6);  /* t7 = F - (B + C) = x3' */
   1e940:	aa0c      	add	r2, sp, #48	; 0x30
   1e942:	a904      	add	r1, sp, #16
   1e944:	a804      	add	r0, sp, #16
   1e946:	4b0f      	ldr	r3, [pc, #60]	; (1e984 <XYcZ_addC+0x100>)
   1e948:	f7ff fbcf 	bl	1e0ea <vli_modSub>
    vli_modSub_fast(t6, t7, X1);  /* t6 = x3' - B */
   1e94c:	a904      	add	r1, sp, #16
   1e94e:	a80c      	add	r0, sp, #48	; 0x30
   1e950:	4b0c      	ldr	r3, [pc, #48]	; (1e984 <XYcZ_addC+0x100>)
   1e952:	9a03      	ldr	r2, [sp, #12]
   1e954:	f7ff fbc9 	bl	1e0ea <vli_modSub>
    vli_modMult_fast(t6, t6, t5); /* t6 = (y2 + y1)*(x3' - B) */
   1e958:	aa14      	add	r2, sp, #80	; 0x50
   1e95a:	a90c      	add	r1, sp, #48	; 0x30
   1e95c:	ab0c      	add	r3, sp, #48	; 0x30
   1e95e:	4618      	mov	r0, r3
   1e960:	f7ff fd18 	bl	1e394 <vli_modMult_fast>
    vli_modSub_fast(Y1, t6, Y1);  /* t2 = (y2 + y1)*(x3' - B) - E = y3' */
   1e964:	a90c      	add	r1, sp, #48	; 0x30
   1e966:	4b07      	ldr	r3, [pc, #28]	; (1e984 <XYcZ_addC+0x100>)
   1e968:	9a02      	ldr	r2, [sp, #8]
   1e96a:	9802      	ldr	r0, [sp, #8]
   1e96c:	f7ff fbbd 	bl	1e0ea <vli_modSub>

    vli_set(X1, t7);
   1e970:	ab04      	add	r3, sp, #16
   1e972:	4619      	mov	r1, r3
   1e974:	9803      	ldr	r0, [sp, #12]
   1e976:	f7ff fb32 	bl	1dfde <vli_set>
}
   1e97a:	bf00      	nop
   1e97c:	b01d      	add	sp, #116	; 0x74
   1e97e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e982:	bf00      	nop
   1e984:	000286e8 	.word	0x000286e8

0001e988 <EccPoint_mult>:

static void EccPoint_mult(EccPoint * RESTRICT result,
                          const EccPoint * RESTRICT point,
                          const uECC_word_t * RESTRICT scalar,
                          const uECC_word_t * RESTRICT initialZ,
                          bitcount_t numBits) {
   1e988:	b510      	push	{r4, lr}
   1e98a:	b0b0      	sub	sp, #192	; 0xc0
   1e98c:	9005      	str	r0, [sp, #20]
   1e98e:	9104      	str	r1, [sp, #16]
   1e990:	9203      	str	r2, [sp, #12]
   1e992:	9302      	str	r3, [sp, #8]
    uECC_word_t Ry[2][uECC_WORDS];
    uECC_word_t z[uECC_WORDS];
    bitcount_t i;
    uECC_word_t nb;

    vli_set(Rx[1], point->x);
   1e994:	9a04      	ldr	r2, [sp, #16]
   1e996:	ab1e      	add	r3, sp, #120	; 0x78
   1e998:	3320      	adds	r3, #32
   1e99a:	4611      	mov	r1, r2
   1e99c:	4618      	mov	r0, r3
   1e99e:	f7ff fb1e 	bl	1dfde <vli_set>
    vli_set(Ry[1], point->y);
   1e9a2:	9b04      	ldr	r3, [sp, #16]
   1e9a4:	f103 0220 	add.w	r2, r3, #32
   1e9a8:	ab0e      	add	r3, sp, #56	; 0x38
   1e9aa:	3320      	adds	r3, #32
   1e9ac:	4611      	mov	r1, r2
   1e9ae:	4618      	mov	r0, r3
   1e9b0:	f7ff fb15 	bl	1dfde <vli_set>

    XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initialZ);
   1e9b4:	ac0e      	add	r4, sp, #56	; 0x38
   1e9b6:	aa1e      	add	r2, sp, #120	; 0x78
   1e9b8:	ab0e      	add	r3, sp, #56	; 0x38
   1e9ba:	f103 0120 	add.w	r1, r3, #32
   1e9be:	ab1e      	add	r3, sp, #120	; 0x78
   1e9c0:	f103 0020 	add.w	r0, r3, #32
   1e9c4:	9b02      	ldr	r3, [sp, #8]
   1e9c6:	9300      	str	r3, [sp, #0]
   1e9c8:	4623      	mov	r3, r4
   1e9ca:	f7ff fecb 	bl	1e764 <XYcZ_initial_double>

    for (i = numBits - 2; i > 0; --i) {
   1e9ce:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   1e9d0:	3b02      	subs	r3, #2
   1e9d2:	932f      	str	r3, [sp, #188]	; 0xbc
   1e9d4:	e03b      	b.n	1ea4e <EccPoint_mult+0xc6>
        nb = !vli_testBit(scalar, i);
   1e9d6:	992f      	ldr	r1, [sp, #188]	; 0xbc
   1e9d8:	9803      	ldr	r0, [sp, #12]
   1e9da:	f7ff faed 	bl	1dfb8 <vli_testBit>
   1e9de:	4603      	mov	r3, r0
   1e9e0:	2b00      	cmp	r3, #0
   1e9e2:	bf0c      	ite	eq
   1e9e4:	2301      	moveq	r3, #1
   1e9e6:	2300      	movne	r3, #0
   1e9e8:	b2db      	uxtb	r3, r3
   1e9ea:	932e      	str	r3, [sp, #184]	; 0xb8
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   1e9ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1e9ee:	f1c3 0301 	rsb	r3, r3, #1
   1e9f2:	aa1e      	add	r2, sp, #120	; 0x78
   1e9f4:	015b      	lsls	r3, r3, #5
   1e9f6:	18d0      	adds	r0, r2, r3
   1e9f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1e9fa:	f1c3 0301 	rsb	r3, r3, #1
   1e9fe:	aa0e      	add	r2, sp, #56	; 0x38
   1ea00:	015b      	lsls	r3, r3, #5
   1ea02:	18d1      	adds	r1, r2, r3
   1ea04:	aa1e      	add	r2, sp, #120	; 0x78
   1ea06:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea08:	015b      	lsls	r3, r3, #5
   1ea0a:	18d4      	adds	r4, r2, r3
   1ea0c:	aa0e      	add	r2, sp, #56	; 0x38
   1ea0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea10:	015b      	lsls	r3, r3, #5
   1ea12:	4413      	add	r3, r2
   1ea14:	4622      	mov	r2, r4
   1ea16:	f7ff ff35 	bl	1e884 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   1ea1a:	aa1e      	add	r2, sp, #120	; 0x78
   1ea1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea1e:	015b      	lsls	r3, r3, #5
   1ea20:	18d0      	adds	r0, r2, r3
   1ea22:	aa0e      	add	r2, sp, #56	; 0x38
   1ea24:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea26:	015b      	lsls	r3, r3, #5
   1ea28:	18d1      	adds	r1, r2, r3
   1ea2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea2c:	f1c3 0301 	rsb	r3, r3, #1
   1ea30:	aa1e      	add	r2, sp, #120	; 0x78
   1ea32:	015b      	lsls	r3, r3, #5
   1ea34:	18d4      	adds	r4, r2, r3
   1ea36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea38:	f1c3 0301 	rsb	r3, r3, #1
   1ea3c:	aa0e      	add	r2, sp, #56	; 0x38
   1ea3e:	015b      	lsls	r3, r3, #5
   1ea40:	4413      	add	r3, r2
   1ea42:	4622      	mov	r2, r4
   1ea44:	f7ff fec2 	bl	1e7cc <XYcZ_add>
    for (i = numBits - 2; i > 0; --i) {
   1ea48:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1ea4a:	3b01      	subs	r3, #1
   1ea4c:	932f      	str	r3, [sp, #188]	; 0xbc
   1ea4e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1ea50:	2b00      	cmp	r3, #0
   1ea52:	dcc0      	bgt.n	1e9d6 <EccPoint_mult+0x4e>
    }

    nb = !vli_testBit(scalar, 0);
   1ea54:	2100      	movs	r1, #0
   1ea56:	9803      	ldr	r0, [sp, #12]
   1ea58:	f7ff faae 	bl	1dfb8 <vli_testBit>
   1ea5c:	4603      	mov	r3, r0
   1ea5e:	2b00      	cmp	r3, #0
   1ea60:	bf0c      	ite	eq
   1ea62:	2301      	moveq	r3, #1
   1ea64:	2300      	movne	r3, #0
   1ea66:	b2db      	uxtb	r3, r3
   1ea68:	932e      	str	r3, [sp, #184]	; 0xb8
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   1ea6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea6c:	f1c3 0301 	rsb	r3, r3, #1
   1ea70:	aa1e      	add	r2, sp, #120	; 0x78
   1ea72:	015b      	lsls	r3, r3, #5
   1ea74:	18d0      	adds	r0, r2, r3
   1ea76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea78:	f1c3 0301 	rsb	r3, r3, #1
   1ea7c:	aa0e      	add	r2, sp, #56	; 0x38
   1ea7e:	015b      	lsls	r3, r3, #5
   1ea80:	18d1      	adds	r1, r2, r3
   1ea82:	aa1e      	add	r2, sp, #120	; 0x78
   1ea84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea86:	015b      	lsls	r3, r3, #5
   1ea88:	18d4      	adds	r4, r2, r3
   1ea8a:	aa0e      	add	r2, sp, #56	; 0x38
   1ea8c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ea8e:	015b      	lsls	r3, r3, #5
   1ea90:	4413      	add	r3, r2
   1ea92:	4622      	mov	r2, r4
   1ea94:	f7ff fef6 	bl	1e884 <XYcZ_addC>

    /* Find final 1/Z value. */
    vli_modSub_fast(z, Rx[1], Rx[0]);   /* X1 - X0 */
   1ea98:	aa1e      	add	r2, sp, #120	; 0x78
   1ea9a:	ab1e      	add	r3, sp, #120	; 0x78
   1ea9c:	f103 0120 	add.w	r1, r3, #32
   1eaa0:	a806      	add	r0, sp, #24
   1eaa2:	4b2d      	ldr	r3, [pc, #180]	; (1eb58 <EccPoint_mult+0x1d0>)
   1eaa4:	f7ff fb21 	bl	1e0ea <vli_modSub>
    vli_modMult_fast(z, z, Ry[1 - nb]); /* Yb * (X1 - X0) */
   1eaa8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1eaaa:	f1c3 0301 	rsb	r3, r3, #1
   1eaae:	aa0e      	add	r2, sp, #56	; 0x38
   1eab0:	015b      	lsls	r3, r3, #5
   1eab2:	441a      	add	r2, r3
   1eab4:	a906      	add	r1, sp, #24
   1eab6:	ab06      	add	r3, sp, #24
   1eab8:	4618      	mov	r0, r3
   1eaba:	f7ff fc6b 	bl	1e394 <vli_modMult_fast>
    vli_modMult_fast(z, z, point->x); /* xP * Yb * (X1 - X0) */
   1eabe:	9a04      	ldr	r2, [sp, #16]
   1eac0:	a906      	add	r1, sp, #24
   1eac2:	ab06      	add	r3, sp, #24
   1eac4:	4618      	mov	r0, r3
   1eac6:	f7ff fc65 	bl	1e394 <vli_modMult_fast>
    vli_modInv(z, z, curve_p);          /* 1 / (xP * Yb * (X1 - X0)) */
   1eaca:	a906      	add	r1, sp, #24
   1eacc:	ab06      	add	r3, sp, #24
   1eace:	4a22      	ldr	r2, [pc, #136]	; (1eb58 <EccPoint_mult+0x1d0>)
   1ead0:	4618      	mov	r0, r3
   1ead2:	f7ff fc85 	bl	1e3e0 <vli_modInv>
    vli_modMult_fast(z, z, point->y); /* yP / (xP * Yb * (X1 - X0)) */
   1ead6:	9b04      	ldr	r3, [sp, #16]
   1ead8:	f103 0220 	add.w	r2, r3, #32
   1eadc:	a906      	add	r1, sp, #24
   1eade:	ab06      	add	r3, sp, #24
   1eae0:	4618      	mov	r0, r3
   1eae2:	f7ff fc57 	bl	1e394 <vli_modMult_fast>
    vli_modMult_fast(z, z, Rx[1 - nb]); /* Xb * yP / (xP * Yb * (X1 - X0)) */
   1eae6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1eae8:	f1c3 0301 	rsb	r3, r3, #1
   1eaec:	aa1e      	add	r2, sp, #120	; 0x78
   1eaee:	015b      	lsls	r3, r3, #5
   1eaf0:	441a      	add	r2, r3
   1eaf2:	a906      	add	r1, sp, #24
   1eaf4:	ab06      	add	r3, sp, #24
   1eaf6:	4618      	mov	r0, r3
   1eaf8:	f7ff fc4c 	bl	1e394 <vli_modMult_fast>
    /* End 1/Z calculation */

    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   1eafc:	aa1e      	add	r2, sp, #120	; 0x78
   1eafe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1eb00:	015b      	lsls	r3, r3, #5
   1eb02:	18d0      	adds	r0, r2, r3
   1eb04:	aa0e      	add	r2, sp, #56	; 0x38
   1eb06:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1eb08:	015b      	lsls	r3, r3, #5
   1eb0a:	18d1      	adds	r1, r2, r3
   1eb0c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1eb0e:	f1c3 0301 	rsb	r3, r3, #1
   1eb12:	aa1e      	add	r2, sp, #120	; 0x78
   1eb14:	015b      	lsls	r3, r3, #5
   1eb16:	18d4      	adds	r4, r2, r3
   1eb18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1eb1a:	f1c3 0301 	rsb	r3, r3, #1
   1eb1e:	aa0e      	add	r2, sp, #56	; 0x38
   1eb20:	015b      	lsls	r3, r3, #5
   1eb22:	4413      	add	r3, r2
   1eb24:	4622      	mov	r2, r4
   1eb26:	f7ff fe51 	bl	1e7cc <XYcZ_add>
    apply_z(Rx[0], Ry[0], z);
   1eb2a:	aa06      	add	r2, sp, #24
   1eb2c:	a90e      	add	r1, sp, #56	; 0x38
   1eb2e:	ab1e      	add	r3, sp, #120	; 0x78
   1eb30:	4618      	mov	r0, r3
   1eb32:	f7ff fdf7 	bl	1e724 <apply_z>

    vli_set(result->x, Rx[0]);
   1eb36:	9b05      	ldr	r3, [sp, #20]
   1eb38:	aa1e      	add	r2, sp, #120	; 0x78
   1eb3a:	4611      	mov	r1, r2
   1eb3c:	4618      	mov	r0, r3
   1eb3e:	f7ff fa4e 	bl	1dfde <vli_set>
    vli_set(result->y, Ry[0]);
   1eb42:	9b05      	ldr	r3, [sp, #20]
   1eb44:	3320      	adds	r3, #32
   1eb46:	aa0e      	add	r2, sp, #56	; 0x38
   1eb48:	4611      	mov	r1, r2
   1eb4a:	4618      	mov	r0, r3
   1eb4c:	f7ff fa47 	bl	1dfde <vli_set>
}
   1eb50:	bf00      	nop
   1eb52:	b030      	add	sp, #192	; 0xc0
   1eb54:	bd10      	pop	{r4, pc}
   1eb56:	bf00      	nop
   1eb58:	000286e8 	.word	0x000286e8

0001eb5c <EccPoint_compute_public_key>:

static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   1eb5c:	b500      	push	{lr}
   1eb5e:	b099      	sub	sp, #100	; 0x64
   1eb60:	9003      	str	r0, [sp, #12]
   1eb62:	9102      	str	r1, [sp, #8]
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp1[uECC_WORDS];
    uECC_word_t tmp2[uECC_WORDS];
    uECC_word_t *p2[2] = {tmp1, tmp2};
   1eb64:	ab0f      	add	r3, sp, #60	; 0x3c
   1eb66:	9305      	str	r3, [sp, #20]
   1eb68:	ab07      	add	r3, sp, #28
   1eb6a:	9306      	str	r3, [sp, #24]
    uECC_word_t carry;
#endif

    /* Make sure the private key is in the range [1, n-1]. */
    if (vli_isZero(private)) {
   1eb6c:	9802      	ldr	r0, [sp, #8]
   1eb6e:	f7ff fa0b 	bl	1df88 <vli_isZero>
   1eb72:	4603      	mov	r3, r0
   1eb74:	2b00      	cmp	r3, #0
   1eb76:	d001      	beq.n	1eb7c <EccPoint_compute_public_key+0x20>
        return 0;
   1eb78:	2300      	movs	r3, #0
   1eb7a:	e031      	b.n	1ebe0 <EccPoint_compute_public_key+0x84>
    // impact (about 2% slower on average) and requires the vli_xxx_n functions, leading to
    // a significant increase in code size.

    EccPoint_mult(result, &curve_G, private, 0, vli_numBits(private, uECC_WORDS));
#else
    if (vli_cmp(curve_n, private) != 1) {
   1eb7c:	9902      	ldr	r1, [sp, #8]
   1eb7e:	481a      	ldr	r0, [pc, #104]	; (1ebe8 <EccPoint_compute_public_key+0x8c>)
   1eb80:	f7ff fa47 	bl	1e012 <vli_cmp>
   1eb84:	4603      	mov	r3, r0
   1eb86:	2b01      	cmp	r3, #1
   1eb88:	d001      	beq.n	1eb8e <EccPoint_compute_public_key+0x32>
        return 0;
   1eb8a:	2300      	movs	r3, #0
   1eb8c:	e028      	b.n	1ebe0 <EccPoint_compute_public_key+0x84>
    }

    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(tmp1, private, curve_n);
   1eb8e:	ab0f      	add	r3, sp, #60	; 0x3c
   1eb90:	4a15      	ldr	r2, [pc, #84]	; (1ebe8 <EccPoint_compute_public_key+0x8c>)
   1eb92:	9902      	ldr	r1, [sp, #8]
   1eb94:	4618      	mov	r0, r3
   1eb96:	f7fe fccb 	bl	1d530 <vli_add>
   1eb9a:	9017      	str	r0, [sp, #92]	; 0x5c
    vli_add(tmp2, tmp1, curve_n);
   1eb9c:	a90f      	add	r1, sp, #60	; 0x3c
   1eb9e:	ab07      	add	r3, sp, #28
   1eba0:	4a11      	ldr	r2, [pc, #68]	; (1ebe8 <EccPoint_compute_public_key+0x8c>)
   1eba2:	4618      	mov	r0, r3
   1eba4:	f7fe fcc4 	bl	1d530 <vli_add>
    EccPoint_mult(result, &curve_G, p2[!carry], 0, (uECC_BYTES * 8) + 1);
   1eba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ebaa:	2b00      	cmp	r3, #0
   1ebac:	bf0c      	ite	eq
   1ebae:	2301      	moveq	r3, #1
   1ebb0:	2300      	movne	r3, #0
   1ebb2:	b2db      	uxtb	r3, r3
   1ebb4:	009b      	lsls	r3, r3, #2
   1ebb6:	3360      	adds	r3, #96	; 0x60
   1ebb8:	446b      	add	r3, sp
   1ebba:	f853 2c4c 	ldr.w	r2, [r3, #-76]
   1ebbe:	f240 1301 	movw	r3, #257	; 0x101
   1ebc2:	9300      	str	r3, [sp, #0]
   1ebc4:	2300      	movs	r3, #0
   1ebc6:	4909      	ldr	r1, [pc, #36]	; (1ebec <EccPoint_compute_public_key+0x90>)
   1ebc8:	9803      	ldr	r0, [sp, #12]
   1ebca:	f7ff fedd 	bl	1e988 <EccPoint_mult>
#endif

    if (EccPoint_isZero(result)) {
   1ebce:	9803      	ldr	r0, [sp, #12]
   1ebd0:	f7ff fcf2 	bl	1e5b8 <EccPoint_isZero>
   1ebd4:	4603      	mov	r3, r0
   1ebd6:	2b00      	cmp	r3, #0
   1ebd8:	d001      	beq.n	1ebde <EccPoint_compute_public_key+0x82>
        return 0;
   1ebda:	2300      	movs	r3, #0
   1ebdc:	e000      	b.n	1ebe0 <EccPoint_compute_public_key+0x84>
    }
    return 1;
   1ebde:	2301      	movs	r3, #1
}
   1ebe0:	4618      	mov	r0, r3
   1ebe2:	b019      	add	sp, #100	; 0x64
   1ebe4:	f85d fb04 	ldr.w	pc, [sp], #4
   1ebe8:	00028768 	.word	0x00028768
   1ebec:	00028728 	.word	0x00028728

0001ebf0 <vli_nativeToBytes>:

#define vli_bytesToNative(dest, src) vli_nativeToBytes((dest), (src))

#elif uECC_WORD_SIZE == 4

static void vli_nativeToBytes(uint8_t *bytes, const uint32_t *native) {
   1ebf0:	b084      	sub	sp, #16
   1ebf2:	9001      	str	r0, [sp, #4]
   1ebf4:	9100      	str	r1, [sp, #0]
    unsigned i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1ebf6:	2300      	movs	r3, #0
   1ebf8:	9303      	str	r3, [sp, #12]
   1ebfa:	e02f      	b.n	1ec5c <vli_nativeToBytes+0x6c>
        uint8_t *digit = bytes + 4 * (uECC_WORDS - 1 - i);
   1ebfc:	9b03      	ldr	r3, [sp, #12]
   1ebfe:	f1c3 0307 	rsb	r3, r3, #7
   1ec02:	009b      	lsls	r3, r3, #2
   1ec04:	9a01      	ldr	r2, [sp, #4]
   1ec06:	4413      	add	r3, r2
   1ec08:	9302      	str	r3, [sp, #8]
        digit[0] = (uint8_t)(native[i] >> 24);
   1ec0a:	9b03      	ldr	r3, [sp, #12]
   1ec0c:	009b      	lsls	r3, r3, #2
   1ec0e:	9a00      	ldr	r2, [sp, #0]
   1ec10:	4413      	add	r3, r2
   1ec12:	681b      	ldr	r3, [r3, #0]
   1ec14:	0e1b      	lsrs	r3, r3, #24
   1ec16:	b2da      	uxtb	r2, r3
   1ec18:	9b02      	ldr	r3, [sp, #8]
   1ec1a:	701a      	strb	r2, [r3, #0]
        digit[1] = (uint8_t)(native[i] >> 16);
   1ec1c:	9b03      	ldr	r3, [sp, #12]
   1ec1e:	009b      	lsls	r3, r3, #2
   1ec20:	9a00      	ldr	r2, [sp, #0]
   1ec22:	4413      	add	r3, r2
   1ec24:	681b      	ldr	r3, [r3, #0]
   1ec26:	0c1a      	lsrs	r2, r3, #16
   1ec28:	9b02      	ldr	r3, [sp, #8]
   1ec2a:	3301      	adds	r3, #1
   1ec2c:	b2d2      	uxtb	r2, r2
   1ec2e:	701a      	strb	r2, [r3, #0]
        digit[2] = (uint8_t)(native[i] >> 8);
   1ec30:	9b03      	ldr	r3, [sp, #12]
   1ec32:	009b      	lsls	r3, r3, #2
   1ec34:	9a00      	ldr	r2, [sp, #0]
   1ec36:	4413      	add	r3, r2
   1ec38:	681b      	ldr	r3, [r3, #0]
   1ec3a:	0a1a      	lsrs	r2, r3, #8
   1ec3c:	9b02      	ldr	r3, [sp, #8]
   1ec3e:	3302      	adds	r3, #2
   1ec40:	b2d2      	uxtb	r2, r2
   1ec42:	701a      	strb	r2, [r3, #0]
        digit[3] = (uint8_t)(native[i]);
   1ec44:	9b03      	ldr	r3, [sp, #12]
   1ec46:	009b      	lsls	r3, r3, #2
   1ec48:	9a00      	ldr	r2, [sp, #0]
   1ec4a:	4413      	add	r3, r2
   1ec4c:	681a      	ldr	r2, [r3, #0]
   1ec4e:	9b02      	ldr	r3, [sp, #8]
   1ec50:	3303      	adds	r3, #3
   1ec52:	b2d2      	uxtb	r2, r2
   1ec54:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   1ec56:	9b03      	ldr	r3, [sp, #12]
   1ec58:	3301      	adds	r3, #1
   1ec5a:	9303      	str	r3, [sp, #12]
   1ec5c:	9b03      	ldr	r3, [sp, #12]
   1ec5e:	2b07      	cmp	r3, #7
   1ec60:	d9cc      	bls.n	1ebfc <vli_nativeToBytes+0xc>
    }
}
   1ec62:	bf00      	nop
   1ec64:	bf00      	nop
   1ec66:	b004      	add	sp, #16
   1ec68:	4770      	bx	lr

0001ec6a <vli_bytesToNative>:

static void vli_bytesToNative(uint32_t *native, const uint8_t *bytes) {
   1ec6a:	b084      	sub	sp, #16
   1ec6c:	9001      	str	r0, [sp, #4]
   1ec6e:	9100      	str	r1, [sp, #0]
    unsigned i;
    for (i = 0; i < uECC_WORDS; ++i) {
   1ec70:	2300      	movs	r3, #0
   1ec72:	9303      	str	r3, [sp, #12]
   1ec74:	e020      	b.n	1ecb8 <vli_bytesToNative+0x4e>
        const uint8_t *digit = bytes + 4 * (uECC_WORDS - 1 - i);
   1ec76:	9b03      	ldr	r3, [sp, #12]
   1ec78:	f1c3 0307 	rsb	r3, r3, #7
   1ec7c:	009b      	lsls	r3, r3, #2
   1ec7e:	9a00      	ldr	r2, [sp, #0]
   1ec80:	4413      	add	r3, r2
   1ec82:	9302      	str	r3, [sp, #8]
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1ec84:	9b02      	ldr	r3, [sp, #8]
   1ec86:	781b      	ldrb	r3, [r3, #0]
   1ec88:	061a      	lsls	r2, r3, #24
   1ec8a:	9b02      	ldr	r3, [sp, #8]
   1ec8c:	3301      	adds	r3, #1
   1ec8e:	781b      	ldrb	r3, [r3, #0]
   1ec90:	041b      	lsls	r3, r3, #16
   1ec92:	431a      	orrs	r2, r3
                    ((uint32_t)digit[2] << 8) | (uint32_t)digit[3];
   1ec94:	9b02      	ldr	r3, [sp, #8]
   1ec96:	3302      	adds	r3, #2
   1ec98:	781b      	ldrb	r3, [r3, #0]
   1ec9a:	021b      	lsls	r3, r3, #8
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1ec9c:	431a      	orrs	r2, r3
                    ((uint32_t)digit[2] << 8) | (uint32_t)digit[3];
   1ec9e:	9b02      	ldr	r3, [sp, #8]
   1eca0:	3303      	adds	r3, #3
   1eca2:	781b      	ldrb	r3, [r3, #0]
   1eca4:	4618      	mov	r0, r3
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1eca6:	9b03      	ldr	r3, [sp, #12]
   1eca8:	009b      	lsls	r3, r3, #2
   1ecaa:	9901      	ldr	r1, [sp, #4]
   1ecac:	440b      	add	r3, r1
                    ((uint32_t)digit[2] << 8) | (uint32_t)digit[3];
   1ecae:	4302      	orrs	r2, r0
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1ecb0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < uECC_WORDS; ++i) {
   1ecb2:	9b03      	ldr	r3, [sp, #12]
   1ecb4:	3301      	adds	r3, #1
   1ecb6:	9303      	str	r3, [sp, #12]
   1ecb8:	9b03      	ldr	r3, [sp, #12]
   1ecba:	2b07      	cmp	r3, #7
   1ecbc:	d9db      	bls.n	1ec76 <vli_bytesToNative+0xc>
    }
}
   1ecbe:	bf00      	nop
   1ecc0:	bf00      	nop
   1ecc2:	b004      	add	sp, #16
   1ecc4:	4770      	bx	lr
	...

0001ecc8 <uECC_make_key>:
    }
}

#endif /* uECC_WORD_SIZE */

int uECC_make_key(uint8_t public_key[uECC_BYTES*2], uint8_t private_key[uECC_BYTES]) {
   1ecc8:	b500      	push	{lr}
   1ecca:	b09d      	sub	sp, #116	; 0x74
   1eccc:	9001      	str	r0, [sp, #4]
   1ecce:	9100      	str	r1, [sp, #0]
    uECC_word_t private[uECC_WORDS];
    EccPoint public;
    uECC_word_t tries;
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1ecd0:	2300      	movs	r3, #0
   1ecd2:	931b      	str	r3, [sp, #108]	; 0x6c
   1ecd4:	e029      	b.n	1ed2a <uECC_make_key+0x62>
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   1ecd6:	4b19      	ldr	r3, [pc, #100]	; (1ed3c <uECC_make_key+0x74>)
   1ecd8:	681b      	ldr	r3, [r3, #0]
   1ecda:	aa13      	add	r2, sp, #76	; 0x4c
   1ecdc:	2120      	movs	r1, #32
   1ecde:	4610      	mov	r0, r2
   1ece0:	4798      	blx	r3
   1ece2:	4603      	mov	r3, r0
   1ece4:	2b00      	cmp	r3, #0
   1ece6:	d01d      	beq.n	1ed24 <uECC_make_key+0x5c>
                EccPoint_compute_public_key(&public, private)) {
   1ece8:	aa13      	add	r2, sp, #76	; 0x4c
   1ecea:	ab03      	add	r3, sp, #12
   1ecec:	4611      	mov	r1, r2
   1ecee:	4618      	mov	r0, r3
   1ecf0:	f7ff ff34 	bl	1eb5c <EccPoint_compute_public_key>
   1ecf4:	4603      	mov	r3, r0
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   1ecf6:	2b00      	cmp	r3, #0
   1ecf8:	d014      	beq.n	1ed24 <uECC_make_key+0x5c>
            vli_nativeToBytes(private_key, private);
   1ecfa:	ab13      	add	r3, sp, #76	; 0x4c
   1ecfc:	4619      	mov	r1, r3
   1ecfe:	9800      	ldr	r0, [sp, #0]
   1ed00:	f7ff ff76 	bl	1ebf0 <vli_nativeToBytes>
            vli_nativeToBytes(public_key, public.x);
   1ed04:	ab03      	add	r3, sp, #12
   1ed06:	4619      	mov	r1, r3
   1ed08:	9801      	ldr	r0, [sp, #4]
   1ed0a:	f7ff ff71 	bl	1ebf0 <vli_nativeToBytes>
            vli_nativeToBytes(public_key + uECC_BYTES, public.y);
   1ed0e:	9b01      	ldr	r3, [sp, #4]
   1ed10:	f103 0220 	add.w	r2, r3, #32
   1ed14:	ab03      	add	r3, sp, #12
   1ed16:	3320      	adds	r3, #32
   1ed18:	4619      	mov	r1, r3
   1ed1a:	4610      	mov	r0, r2
   1ed1c:	f7ff ff68 	bl	1ebf0 <vli_nativeToBytes>
            return 1;
   1ed20:	2301      	movs	r3, #1
   1ed22:	e006      	b.n	1ed32 <uECC_make_key+0x6a>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1ed24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ed26:	3301      	adds	r3, #1
   1ed28:	931b      	str	r3, [sp, #108]	; 0x6c
   1ed2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ed2c:	2b3f      	cmp	r3, #63	; 0x3f
   1ed2e:	d9d2      	bls.n	1ecd6 <uECC_make_key+0xe>
        }
    }
    return 0;
   1ed30:	2300      	movs	r3, #0
}
   1ed32:	4618      	mov	r0, r3
   1ed34:	b01d      	add	sp, #116	; 0x74
   1ed36:	f85d fb04 	ldr.w	pc, [sp], #4
   1ed3a:	bf00      	nop
   1ed3c:	10002bac 	.word	0x10002bac

0001ed40 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t public_key[uECC_BYTES*2],
                       const uint8_t private_key[uECC_BYTES],
                       uint8_t secret[uECC_BYTES]) {
   1ed40:	b500      	push	{lr}
   1ed42:	b0c5      	sub	sp, #276	; 0x114
   1ed44:	9005      	str	r0, [sp, #20]
   1ed46:	ab44      	add	r3, sp, #272	; 0x110
   1ed48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
   1ed4c:	6019      	str	r1, [r3, #0]
   1ed4e:	ab44      	add	r3, sp, #272	; 0x110
   1ed50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
   1ed54:	601a      	str	r2, [r3, #0]
    EccPoint public;
    EccPoint product;
    uECC_word_t private[uECC_WORDS];
    uECC_word_t random[uECC_WORDS];
    uECC_word_t *initial_Z = 0;
   1ed56:	2300      	movs	r3, #0
   1ed58:	9343      	str	r3, [sp, #268]	; 0x10c
    uECC_word_t tries;
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp[uECC_WORDS];
    uECC_word_t *p2[2] = {private, tmp};
   1ed5a:	ab19      	add	r3, sp, #100	; 0x64
   1ed5c:	9307      	str	r3, [sp, #28]
   1ed5e:	ab09      	add	r3, sp, #36	; 0x24
   1ed60:	9308      	str	r3, [sp, #32]
#endif

    // Try to get a random initial Z value to improve protection against side-channel
    // attacks. If the RNG fails every time (eg it was not defined), we continue so that
    // uECC_shared_secret() can still work without an RNG defined.
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1ed62:	2300      	movs	r3, #0
   1ed64:	9342      	str	r3, [sp, #264]	; 0x108
   1ed66:	e015      	b.n	1ed94 <uECC_shared_secret+0x54>
        if (g_rng_function((uint8_t *)random, sizeof(random)) && !vli_isZero(random)) {
   1ed68:	4b32      	ldr	r3, [pc, #200]	; (1ee34 <uECC_shared_secret+0xf4>)
   1ed6a:	681b      	ldr	r3, [r3, #0]
   1ed6c:	aa11      	add	r2, sp, #68	; 0x44
   1ed6e:	2120      	movs	r1, #32
   1ed70:	4610      	mov	r0, r2
   1ed72:	4798      	blx	r3
   1ed74:	4603      	mov	r3, r0
   1ed76:	2b00      	cmp	r3, #0
   1ed78:	d009      	beq.n	1ed8e <uECC_shared_secret+0x4e>
   1ed7a:	ab11      	add	r3, sp, #68	; 0x44
   1ed7c:	4618      	mov	r0, r3
   1ed7e:	f7ff f903 	bl	1df88 <vli_isZero>
   1ed82:	4603      	mov	r3, r0
   1ed84:	2b00      	cmp	r3, #0
   1ed86:	d102      	bne.n	1ed8e <uECC_shared_secret+0x4e>
            initial_Z = random;
   1ed88:	ab11      	add	r3, sp, #68	; 0x44
   1ed8a:	9343      	str	r3, [sp, #268]	; 0x10c
            break;
   1ed8c:	e005      	b.n	1ed9a <uECC_shared_secret+0x5a>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1ed8e:	9b42      	ldr	r3, [sp, #264]	; 0x108
   1ed90:	3301      	adds	r3, #1
   1ed92:	9342      	str	r3, [sp, #264]	; 0x108
   1ed94:	9b42      	ldr	r3, [sp, #264]	; 0x108
   1ed96:	2b3f      	cmp	r3, #63	; 0x3f
   1ed98:	d9e6      	bls.n	1ed68 <uECC_shared_secret+0x28>
        }
    }

    vli_bytesToNative(private, private_key);
   1ed9a:	ab44      	add	r3, sp, #272	; 0x110
   1ed9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
   1eda0:	aa19      	add	r2, sp, #100	; 0x64
   1eda2:	6819      	ldr	r1, [r3, #0]
   1eda4:	4610      	mov	r0, r2
   1eda6:	f7ff ff60 	bl	1ec6a <vli_bytesToNative>
    vli_bytesToNative(public.x, public_key);
   1edaa:	ab31      	add	r3, sp, #196	; 0xc4
   1edac:	9905      	ldr	r1, [sp, #20]
   1edae:	4618      	mov	r0, r3
   1edb0:	f7ff ff5b 	bl	1ec6a <vli_bytesToNative>
    vli_bytesToNative(public.y, public_key + uECC_BYTES);
   1edb4:	9b05      	ldr	r3, [sp, #20]
   1edb6:	f103 0220 	add.w	r2, r3, #32
   1edba:	ab31      	add	r3, sp, #196	; 0xc4
   1edbc:	3320      	adds	r3, #32
   1edbe:	4611      	mov	r1, r2
   1edc0:	4618      	mov	r0, r3
   1edc2:	f7ff ff52 	bl	1ec6a <vli_bytesToNative>
    // Don't regularize the bitcount for secp160r1.
    EccPoint_mult(&product, &public, private, initial_Z, vli_numBits(private, uECC_WORDS));
#else
    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(private, private, curve_n);
   1edc6:	a919      	add	r1, sp, #100	; 0x64
   1edc8:	ab19      	add	r3, sp, #100	; 0x64
   1edca:	4a1b      	ldr	r2, [pc, #108]	; (1ee38 <uECC_shared_secret+0xf8>)
   1edcc:	4618      	mov	r0, r3
   1edce:	f7fe fbaf 	bl	1d530 <vli_add>
   1edd2:	9041      	str	r0, [sp, #260]	; 0x104
    vli_add(tmp, private, curve_n);
   1edd4:	a919      	add	r1, sp, #100	; 0x64
   1edd6:	ab09      	add	r3, sp, #36	; 0x24
   1edd8:	4a17      	ldr	r2, [pc, #92]	; (1ee38 <uECC_shared_secret+0xf8>)
   1edda:	4618      	mov	r0, r3
   1eddc:	f7fe fba8 	bl	1d530 <vli_add>
    EccPoint_mult(&product, &public, p2[!carry], initial_Z, (uECC_BYTES * 8) + 1);
   1ede0:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1ede2:	2b00      	cmp	r3, #0
   1ede4:	bf0c      	ite	eq
   1ede6:	2301      	moveq	r3, #1
   1ede8:	2300      	movne	r3, #0
   1edea:	b2db      	uxtb	r3, r3
   1edec:	009b      	lsls	r3, r3, #2
   1edee:	f503 7388 	add.w	r3, r3, #272	; 0x110
   1edf2:	446b      	add	r3, sp
   1edf4:	f853 2cf4 	ldr.w	r2, [r3, #-244]
   1edf8:	a931      	add	r1, sp, #196	; 0xc4
   1edfa:	a821      	add	r0, sp, #132	; 0x84
   1edfc:	f240 1301 	movw	r3, #257	; 0x101
   1ee00:	9300      	str	r3, [sp, #0]
   1ee02:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   1ee04:	f7ff fdc0 	bl	1e988 <EccPoint_mult>
#endif

    vli_nativeToBytes(secret, product.x);
   1ee08:	aa21      	add	r2, sp, #132	; 0x84
   1ee0a:	ab44      	add	r3, sp, #272	; 0x110
   1ee0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
   1ee10:	4611      	mov	r1, r2
   1ee12:	6818      	ldr	r0, [r3, #0]
   1ee14:	f7ff feec 	bl	1ebf0 <vli_nativeToBytes>
    return !EccPoint_isZero(&product);
   1ee18:	ab21      	add	r3, sp, #132	; 0x84
   1ee1a:	4618      	mov	r0, r3
   1ee1c:	f7ff fbcc 	bl	1e5b8 <EccPoint_isZero>
   1ee20:	4603      	mov	r3, r0
   1ee22:	2b00      	cmp	r3, #0
   1ee24:	bf0c      	ite	eq
   1ee26:	2301      	moveq	r3, #1
   1ee28:	2300      	movne	r3, #0
   1ee2a:	b2db      	uxtb	r3, r3
}
   1ee2c:	4618      	mov	r0, r3
   1ee2e:	b045      	add	sp, #276	; 0x114
   1ee30:	f85d fb04 	ldr.w	pc, [sp], #4
   1ee34:	10002bac 	.word	0x10002bac
   1ee38:	00028768 	.word	0x00028768

0001ee3c <curve_x_side>:
    }
    compressed[0] = 2 + (public_key[uECC_BYTES * 2 - 1] & 0x01);
}

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void curve_x_side(uECC_word_t * RESTRICT result, const uECC_word_t * RESTRICT x) {
   1ee3c:	b500      	push	{lr}
   1ee3e:	b08b      	sub	sp, #44	; 0x2c
   1ee40:	9001      	str	r0, [sp, #4]
   1ee42:	9100      	str	r1, [sp, #0]
#if (uECC_CURVE == uECC_secp256k1)
    vli_modSquare_fast(result, x); /* r = x^2 */
    vli_modMult_fast(result, result, x); /* r = x^3 */
    vli_modAdd(result, result, curve_b, curve_p); /* r = x^3 + b */
#else
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   1ee44:	ab02      	add	r3, sp, #8
   1ee46:	2220      	movs	r2, #32
   1ee48:	2100      	movs	r1, #0
   1ee4a:	4618      	mov	r0, r3
   1ee4c:	f006 fc36 	bl	256bc <memset>
   1ee50:	2303      	movs	r3, #3
   1ee52:	9302      	str	r3, [sp, #8]

    vli_modSquare_fast(result, x); /* r = x^2 */
   1ee54:	9900      	ldr	r1, [sp, #0]
   1ee56:	9801      	ldr	r0, [sp, #4]
   1ee58:	f7ff fab0 	bl	1e3bc <vli_modSquare_fast>
    vli_modSub_fast(result, result, _3); /* r = x^2 - 3 */
   1ee5c:	aa02      	add	r2, sp, #8
   1ee5e:	4b0a      	ldr	r3, [pc, #40]	; (1ee88 <curve_x_side+0x4c>)
   1ee60:	9901      	ldr	r1, [sp, #4]
   1ee62:	9801      	ldr	r0, [sp, #4]
   1ee64:	f7ff f941 	bl	1e0ea <vli_modSub>
    vli_modMult_fast(result, result, x); /* r = x^3 - 3x */
   1ee68:	9a00      	ldr	r2, [sp, #0]
   1ee6a:	9901      	ldr	r1, [sp, #4]
   1ee6c:	9801      	ldr	r0, [sp, #4]
   1ee6e:	f7ff fa91 	bl	1e394 <vli_modMult_fast>
    vli_modAdd(result, result, curve_b, curve_p); /* r = x^3 - 3x + b */
   1ee72:	4b05      	ldr	r3, [pc, #20]	; (1ee88 <curve_x_side+0x4c>)
   1ee74:	4a05      	ldr	r2, [pc, #20]	; (1ee8c <curve_x_side+0x50>)
   1ee76:	9901      	ldr	r1, [sp, #4]
   1ee78:	9801      	ldr	r0, [sp, #4]
   1ee7a:	f7ff f917 	bl	1e0ac <vli_modAdd>
#endif
}
   1ee7e:	bf00      	nop
   1ee80:	b00b      	add	sp, #44	; 0x2c
   1ee82:	f85d fb04 	ldr.w	pc, [sp], #4
   1ee86:	bf00      	nop
   1ee88:	000286e8 	.word	0x000286e8
   1ee8c:	00028708 	.word	0x00028708

0001ee90 <uECC_valid_public_key>:

    vli_nativeToBytes(public_key, point.x);
    vli_nativeToBytes(public_key + uECC_BYTES, point.y);
}

int uECC_valid_public_key(const uint8_t public_key[uECC_BYTES*2]) {
   1ee90:	b500      	push	{lr}
   1ee92:	b0a3      	sub	sp, #140	; 0x8c
   1ee94:	9001      	str	r0, [sp, #4]
    uECC_word_t tmp1[uECC_WORDS];
    uECC_word_t tmp2[uECC_WORDS];
    EccPoint public;

    vli_bytesToNative(public.x, public_key);
   1ee96:	ab02      	add	r3, sp, #8
   1ee98:	9901      	ldr	r1, [sp, #4]
   1ee9a:	4618      	mov	r0, r3
   1ee9c:	f7ff fee5 	bl	1ec6a <vli_bytesToNative>
    vli_bytesToNative(public.y, public_key + uECC_BYTES);
   1eea0:	9b01      	ldr	r3, [sp, #4]
   1eea2:	f103 0220 	add.w	r2, r3, #32
   1eea6:	ab02      	add	r3, sp, #8
   1eea8:	3320      	adds	r3, #32
   1eeaa:	4611      	mov	r1, r2
   1eeac:	4618      	mov	r0, r3
   1eeae:	f7ff fedc 	bl	1ec6a <vli_bytesToNative>

    // The point at infinity is invalid.
    if (EccPoint_isZero(&public)) {
   1eeb2:	ab02      	add	r3, sp, #8
   1eeb4:	4618      	mov	r0, r3
   1eeb6:	f7ff fb7f 	bl	1e5b8 <EccPoint_isZero>
   1eeba:	4603      	mov	r3, r0
   1eebc:	2b00      	cmp	r3, #0
   1eebe:	d001      	beq.n	1eec4 <uECC_valid_public_key+0x34>
        return 0;
   1eec0:	2300      	movs	r3, #0
   1eec2:	e02c      	b.n	1ef1e <uECC_valid_public_key+0x8e>
    }

    // x and y must be smaller than p.
    if (vli_cmp(curve_p, public.x) != 1 || vli_cmp(curve_p, public.y) != 1) {
   1eec4:	ab02      	add	r3, sp, #8
   1eec6:	4619      	mov	r1, r3
   1eec8:	4817      	ldr	r0, [pc, #92]	; (1ef28 <uECC_valid_public_key+0x98>)
   1eeca:	f7ff f8a2 	bl	1e012 <vli_cmp>
   1eece:	4603      	mov	r3, r0
   1eed0:	2b01      	cmp	r3, #1
   1eed2:	d108      	bne.n	1eee6 <uECC_valid_public_key+0x56>
   1eed4:	ab02      	add	r3, sp, #8
   1eed6:	3320      	adds	r3, #32
   1eed8:	4619      	mov	r1, r3
   1eeda:	4813      	ldr	r0, [pc, #76]	; (1ef28 <uECC_valid_public_key+0x98>)
   1eedc:	f7ff f899 	bl	1e012 <vli_cmp>
   1eee0:	4603      	mov	r3, r0
   1eee2:	2b01      	cmp	r3, #1
   1eee4:	d001      	beq.n	1eeea <uECC_valid_public_key+0x5a>
        return 0;
   1eee6:	2300      	movs	r3, #0
   1eee8:	e019      	b.n	1ef1e <uECC_valid_public_key+0x8e>
    }

    vli_modSquare_fast(tmp1, public.y); /* tmp1 = y^2 */
   1eeea:	ab02      	add	r3, sp, #8
   1eeec:	f103 0220 	add.w	r2, r3, #32
   1eef0:	ab1a      	add	r3, sp, #104	; 0x68
   1eef2:	4611      	mov	r1, r2
   1eef4:	4618      	mov	r0, r3
   1eef6:	f7ff fa61 	bl	1e3bc <vli_modSquare_fast>
    curve_x_side(tmp2, public.x); /* tmp2 = x^3 + ax + b */
   1eefa:	aa02      	add	r2, sp, #8
   1eefc:	ab12      	add	r3, sp, #72	; 0x48
   1eefe:	4611      	mov	r1, r2
   1ef00:	4618      	mov	r0, r3
   1ef02:	f7ff ff9b 	bl	1ee3c <curve_x_side>

    /* Make sure that y^2 == x^3 + ax + b */
    return (vli_cmp(tmp1, tmp2) == 0);
   1ef06:	aa12      	add	r2, sp, #72	; 0x48
   1ef08:	ab1a      	add	r3, sp, #104	; 0x68
   1ef0a:	4611      	mov	r1, r2
   1ef0c:	4618      	mov	r0, r3
   1ef0e:	f7ff f880 	bl	1e012 <vli_cmp>
   1ef12:	4603      	mov	r3, r0
   1ef14:	2b00      	cmp	r3, #0
   1ef16:	bf0c      	ite	eq
   1ef18:	2301      	moveq	r3, #1
   1ef1a:	2300      	movne	r3, #0
   1ef1c:	b2db      	uxtb	r3, r3
}
   1ef1e:	4618      	mov	r0, r3
   1ef20:	b023      	add	sp, #140	; 0x8c
   1ef22:	f85d fb04 	ldr.w	pc, [sp], #4
   1ef26:	bf00      	nop
   1ef28:	000286e8 	.word	0x000286e8

0001ef2c <hrpsNoConnActive>:
 *
 *  \return TRUE if no connections active.
 */
/*************************************************************************************************/
static bool_t hrpsNoConnActive(void)
{
   1ef2c:	b082      	sub	sp, #8
  hrpsConn_t    *pConn = hrpsCb.conn;
   1ef2e:	4b0e      	ldr	r3, [pc, #56]	; (1ef68 <hrpsNoConnActive+0x3c>)
   1ef30:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1ef32:	2300      	movs	r3, #0
   1ef34:	f88d 3003 	strb.w	r3, [sp, #3]
   1ef38:	e00d      	b.n	1ef56 <hrpsNoConnActive+0x2a>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   1ef3a:	9b01      	ldr	r3, [sp, #4]
   1ef3c:	781b      	ldrb	r3, [r3, #0]
   1ef3e:	2b00      	cmp	r3, #0
   1ef40:	d001      	beq.n	1ef46 <hrpsNoConnActive+0x1a>
    {
      return FALSE;
   1ef42:	2300      	movs	r3, #0
   1ef44:	e00c      	b.n	1ef60 <hrpsNoConnActive+0x34>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1ef46:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ef4a:	3301      	adds	r3, #1
   1ef4c:	f88d 3003 	strb.w	r3, [sp, #3]
   1ef50:	9b01      	ldr	r3, [sp, #4]
   1ef52:	3302      	adds	r3, #2
   1ef54:	9301      	str	r3, [sp, #4]
   1ef56:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ef5a:	2b02      	cmp	r3, #2
   1ef5c:	d9ed      	bls.n	1ef3a <hrpsNoConnActive+0xe>
    }
  }
  return TRUE;
   1ef5e:	2301      	movs	r3, #1
}
   1ef60:	4618      	mov	r0, r3
   1ef62:	b002      	add	sp, #8
   1ef64:	4770      	bx	lr
   1ef66:	bf00      	nop
   1ef68:	100051c0 	.word	0x100051c0

0001ef6c <hrpsSetupToSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsSetupToSend(void)
{
   1ef6c:	b082      	sub	sp, #8
  hrpsConn_t    *pConn = hrpsCb.conn;
   1ef6e:	4b0e      	ldr	r3, [pc, #56]	; (1efa8 <hrpsSetupToSend+0x3c>)
   1ef70:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1ef72:	2300      	movs	r3, #0
   1ef74:	f88d 3003 	strb.w	r3, [sp, #3]
   1ef78:	e00e      	b.n	1ef98 <hrpsSetupToSend+0x2c>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   1ef7a:	9b01      	ldr	r3, [sp, #4]
   1ef7c:	781b      	ldrb	r3, [r3, #0]
   1ef7e:	2b00      	cmp	r3, #0
   1ef80:	d002      	beq.n	1ef88 <hrpsSetupToSend+0x1c>
    {
      pConn->hrmToSend = TRUE;
   1ef82:	9b01      	ldr	r3, [sp, #4]
   1ef84:	2201      	movs	r2, #1
   1ef86:	705a      	strb	r2, [r3, #1]
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1ef88:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ef8c:	3301      	adds	r3, #1
   1ef8e:	f88d 3003 	strb.w	r3, [sp, #3]
   1ef92:	9b01      	ldr	r3, [sp, #4]
   1ef94:	3302      	adds	r3, #2
   1ef96:	9301      	str	r3, [sp, #4]
   1ef98:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ef9c:	2b02      	cmp	r3, #2
   1ef9e:	d9ec      	bls.n	1ef7a <hrpsSetupToSend+0xe>
    }
  }
}
   1efa0:	bf00      	nop
   1efa2:	bf00      	nop
   1efa4:	b002      	add	sp, #8
   1efa6:	4770      	bx	lr
   1efa8:	100051c0 	.word	0x100051c0

0001efac <hrpsFindNextToSend>:
 *
 *  \return Connection control block.
 */
/*************************************************************************************************/
static hrpsConn_t *hrpsFindNextToSend(uint8_t cccIdx)
{
   1efac:	b500      	push	{lr}
   1efae:	b085      	sub	sp, #20
   1efb0:	4603      	mov	r3, r0
   1efb2:	f88d 3007 	strb.w	r3, [sp, #7]
  hrpsConn_t    *pConn = hrpsCb.conn;
   1efb6:	4b16      	ldr	r3, [pc, #88]	; (1f010 <hrpsFindNextToSend+0x64>)
   1efb8:	9303      	str	r3, [sp, #12]
  uint8_t       i;

  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1efba:	2300      	movs	r3, #0
   1efbc:	f88d 300b 	strb.w	r3, [sp, #11]
   1efc0:	e01c      	b.n	1effc <hrpsFindNextToSend+0x50>
  {
    if (pConn->connId != DM_CONN_ID_NONE && pConn->hrmToSend)
   1efc2:	9b03      	ldr	r3, [sp, #12]
   1efc4:	781b      	ldrb	r3, [r3, #0]
   1efc6:	2b00      	cmp	r3, #0
   1efc8:	d010      	beq.n	1efec <hrpsFindNextToSend+0x40>
   1efca:	9b03      	ldr	r3, [sp, #12]
   1efcc:	785b      	ldrb	r3, [r3, #1]
   1efce:	2b00      	cmp	r3, #0
   1efd0:	d00c      	beq.n	1efec <hrpsFindNextToSend+0x40>
    {
      if (AttsCccEnabled(pConn->connId, cccIdx))
   1efd2:	9b03      	ldr	r3, [sp, #12]
   1efd4:	781b      	ldrb	r3, [r3, #0]
   1efd6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1efda:	4611      	mov	r1, r2
   1efdc:	4618      	mov	r0, r3
   1efde:	f7f9 ff4b 	bl	18e78 <AttsCccEnabled>
   1efe2:	4603      	mov	r3, r0
   1efe4:	2b00      	cmp	r3, #0
   1efe6:	d001      	beq.n	1efec <hrpsFindNextToSend+0x40>
      {
        return pConn;
   1efe8:	9b03      	ldr	r3, [sp, #12]
   1efea:	e00c      	b.n	1f006 <hrpsFindNextToSend+0x5a>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1efec:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1eff0:	3301      	adds	r3, #1
   1eff2:	f88d 300b 	strb.w	r3, [sp, #11]
   1eff6:	9b03      	ldr	r3, [sp, #12]
   1eff8:	3302      	adds	r3, #2
   1effa:	9303      	str	r3, [sp, #12]
   1effc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1f000:	2b02      	cmp	r3, #2
   1f002:	d9de      	bls.n	1efc2 <hrpsFindNextToSend+0x16>
      }
    }
  }
  return NULL;
   1f004:	2300      	movs	r3, #0
}
   1f006:	4618      	mov	r0, r3
   1f008:	b005      	add	sp, #20
   1f00a:	f85d fb04 	ldr.w	pc, [sp], #4
   1f00e:	bf00      	nop
   1f010:	100051c0 	.word	0x100051c0

0001f014 <hrpsBuildHrm>:
 *
 *  \return Length of pBuf in bytes.
 */
/*************************************************************************************************/
static uint8_t hrpsBuildHrm(dmConnId_t connId, uint8_t **pBuf, appHrm_t *pHrm)
{
   1f014:	b500      	push	{lr}
   1f016:	b089      	sub	sp, #36	; 0x24
   1f018:	4603      	mov	r3, r0
   1f01a:	9102      	str	r1, [sp, #8]
   1f01c:	9201      	str	r2, [sp, #4]
   1f01e:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t   *pHrpsData;
  uint8_t   flags = pHrm->flags;
   1f022:	9b01      	ldr	r3, [sp, #4]
   1f024:	7a9b      	ldrb	r3, [r3, #10]
   1f026:	f88d 3012 	strb.w	r3, [sp, #18]
  uint8_t   i;
  uint16_t  *pInterval;
  uint8_t   len = 2; /* Start with 2 for flags and 1 Byte Heart Rate measurement */
   1f02a:	2302      	movs	r3, #2
   1f02c:	f88d 3013 	strb.w	r3, [sp, #19]
  uint8_t   maxLen = AttGetMtu(connId) - ATT_VALUE_NTF_LEN;
   1f030:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f034:	4618      	mov	r0, r3
   1f036:	f7fd f92d 	bl	1c294 <AttGetMtu>
   1f03a:	4603      	mov	r3, r0
   1f03c:	b2db      	uxtb	r3, r3
   1f03e:	3b03      	subs	r3, #3
   1f040:	f88d 3011 	strb.w	r3, [sp, #17]

  /* Calculate Buffer length */
  if (flags & CH_HRM_FLAGS_VALUE_16BIT)
   1f044:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1f048:	f003 0301 	and.w	r3, r3, #1
   1f04c:	2b00      	cmp	r3, #0
   1f04e:	d004      	beq.n	1f05a <hrpsBuildHrm+0x46>
  {
    len += 1;
   1f050:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f054:	3301      	adds	r3, #1
   1f056:	f88d 3013 	strb.w	r3, [sp, #19]
  }

  if (flags & CH_HRM_FLAGS_ENERGY_EXP)
   1f05a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1f05e:	f003 0308 	and.w	r3, r3, #8
   1f062:	2b00      	cmp	r3, #0
   1f064:	d004      	beq.n	1f070 <hrpsBuildHrm+0x5c>
  {
    len += 2;
   1f066:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f06a:	3302      	adds	r3, #2
   1f06c:	f88d 3013 	strb.w	r3, [sp, #19]
  }

  /* rr interval */
  if (flags & CH_HRM_FLAGS_RR_INTERVAL)
   1f070:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1f074:	f003 0310 	and.w	r3, r3, #16
   1f078:	2b00      	cmp	r3, #0
   1f07a:	d008      	beq.n	1f08e <hrpsBuildHrm+0x7a>
  {
    len += pHrm->numIntervals * sizeof(uint16_t);
   1f07c:	9b01      	ldr	r3, [sp, #4]
   1f07e:	791b      	ldrb	r3, [r3, #4]
   1f080:	005b      	lsls	r3, r3, #1
   1f082:	b2da      	uxtb	r2, r3
   1f084:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f088:	4413      	add	r3, r2
   1f08a:	f88d 3013 	strb.w	r3, [sp, #19]
  }

  /* Adjust length if necessary */
  if (len > maxLen)
   1f08e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1f092:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1f096:	429a      	cmp	r2, r3
   1f098:	d903      	bls.n	1f0a2 <hrpsBuildHrm+0x8e>
  {
    len = maxLen;
   1f09a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1f09e:	f88d 3013 	strb.w	r3, [sp, #19]
  }

  /* Allocate buffer */
  if ((*pBuf = (uint8_t *)WsfBufAlloc(len)) != NULL)
   1f0a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f0a6:	b29b      	uxth	r3, r3
   1f0a8:	4618      	mov	r0, r3
   1f0aa:	f000 fb95 	bl	1f7d8 <WsfBufAlloc>
   1f0ae:	4602      	mov	r2, r0
   1f0b0:	9b02      	ldr	r3, [sp, #8]
   1f0b2:	601a      	str	r2, [r3, #0]
   1f0b4:	9b02      	ldr	r3, [sp, #8]
   1f0b6:	681b      	ldr	r3, [r3, #0]
   1f0b8:	2b00      	cmp	r3, #0
   1f0ba:	f000 8083 	beq.w	1f1c4 <hrpsBuildHrm+0x1b0>
  {
    /* Add data to buffer */
    pHrpsData = *pBuf;
   1f0be:	9b02      	ldr	r3, [sp, #8]
   1f0c0:	681b      	ldr	r3, [r3, #0]
   1f0c2:	9307      	str	r3, [sp, #28]

    /* flags */
    UINT8_TO_BSTREAM(pHrpsData, flags);
   1f0c4:	9b07      	ldr	r3, [sp, #28]
   1f0c6:	1c5a      	adds	r2, r3, #1
   1f0c8:	9207      	str	r2, [sp, #28]
   1f0ca:	f89d 2012 	ldrb.w	r2, [sp, #18]
   1f0ce:	701a      	strb	r2, [r3, #0]

    /* Subtract 2 for flags and 1 Byte Heart Rate measurement */
    len -= 2;
   1f0d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f0d4:	3b02      	subs	r3, #2
   1f0d6:	f88d 3013 	strb.w	r3, [sp, #19]

    /* heart rate measurement */
    if (flags & CH_HRM_FLAGS_VALUE_16BIT)
   1f0da:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1f0de:	f003 0301 	and.w	r3, r3, #1
   1f0e2:	2b00      	cmp	r3, #0
   1f0e4:	d015      	beq.n	1f112 <hrpsBuildHrm+0xfe>
    {
      UINT16_TO_BSTREAM(pHrpsData, (uint16_t)pHrm->heartRate);
   1f0e6:	9b01      	ldr	r3, [sp, #4]
   1f0e8:	8919      	ldrh	r1, [r3, #8]
   1f0ea:	9b07      	ldr	r3, [sp, #28]
   1f0ec:	1c5a      	adds	r2, r3, #1
   1f0ee:	9207      	str	r2, [sp, #28]
   1f0f0:	b2ca      	uxtb	r2, r1
   1f0f2:	701a      	strb	r2, [r3, #0]
   1f0f4:	9b01      	ldr	r3, [sp, #4]
   1f0f6:	891b      	ldrh	r3, [r3, #8]
   1f0f8:	0a1b      	lsrs	r3, r3, #8
   1f0fa:	b299      	uxth	r1, r3
   1f0fc:	9b07      	ldr	r3, [sp, #28]
   1f0fe:	1c5a      	adds	r2, r3, #1
   1f100:	9207      	str	r2, [sp, #28]
   1f102:	b2ca      	uxtb	r2, r1
   1f104:	701a      	strb	r2, [r3, #0]

      /* Subtract an additional byte for a 2 byte Heart Rate measurement */
      len -= 1;
   1f106:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f10a:	3b01      	subs	r3, #1
   1f10c:	f88d 3013 	strb.w	r3, [sp, #19]
   1f110:	e006      	b.n	1f120 <hrpsBuildHrm+0x10c>
    }
    else
    {
      UINT8_TO_BSTREAM(pHrpsData, pHrm->heartRate);
   1f112:	9b01      	ldr	r3, [sp, #4]
   1f114:	8919      	ldrh	r1, [r3, #8]
   1f116:	9b07      	ldr	r3, [sp, #28]
   1f118:	1c5a      	adds	r2, r3, #1
   1f11a:	9207      	str	r2, [sp, #28]
   1f11c:	b2ca      	uxtb	r2, r1
   1f11e:	701a      	strb	r2, [r3, #0]
    }

    /* energy expended */
    if (flags & CH_HRM_FLAGS_ENERGY_EXP)
   1f120:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1f124:	f003 0308 	and.w	r3, r3, #8
   1f128:	2b00      	cmp	r3, #0
   1f12a:	d014      	beq.n	1f156 <hrpsBuildHrm+0x142>
    {
      UINT16_TO_BSTREAM(pHrpsData, pHrm->energyExp);
   1f12c:	9b01      	ldr	r3, [sp, #4]
   1f12e:	88d9      	ldrh	r1, [r3, #6]
   1f130:	9b07      	ldr	r3, [sp, #28]
   1f132:	1c5a      	adds	r2, r3, #1
   1f134:	9207      	str	r2, [sp, #28]
   1f136:	b2ca      	uxtb	r2, r1
   1f138:	701a      	strb	r2, [r3, #0]
   1f13a:	9b01      	ldr	r3, [sp, #4]
   1f13c:	88db      	ldrh	r3, [r3, #6]
   1f13e:	0a1b      	lsrs	r3, r3, #8
   1f140:	b299      	uxth	r1, r3
   1f142:	9b07      	ldr	r3, [sp, #28]
   1f144:	1c5a      	adds	r2, r3, #1
   1f146:	9207      	str	r2, [sp, #28]
   1f148:	b2ca      	uxtb	r2, r1
   1f14a:	701a      	strb	r2, [r3, #0]
      len -= 2;
   1f14c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f150:	3b02      	subs	r3, #2
   1f152:	f88d 3013 	strb.w	r3, [sp, #19]
    }

    /* rr interval */
    if (flags & CH_HRM_FLAGS_RR_INTERVAL)
   1f156:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1f15a:	f003 0310 	and.w	r3, r3, #16
   1f15e:	2b00      	cmp	r3, #0
   1f160:	d02a      	beq.n	1f1b8 <hrpsBuildHrm+0x1a4>
    {
      pInterval = pHrm->pRrInterval;
   1f162:	9b01      	ldr	r3, [sp, #4]
   1f164:	681b      	ldr	r3, [r3, #0]
   1f166:	9305      	str	r3, [sp, #20]

      /* Use as many rr intervals as will fit in remaining buffer space. */
      i = pHrm->numIntervals < (len / sizeof(uint16_t)) ?
          pHrm->numIntervals : (len / sizeof(uint16_t));
   1f168:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f16c:	085b      	lsrs	r3, r3, #1
   1f16e:	b2da      	uxtb	r2, r3
      i = pHrm->numIntervals < (len / sizeof(uint16_t)) ?
   1f170:	9b01      	ldr	r3, [sp, #4]
   1f172:	791b      	ldrb	r3, [r3, #4]
   1f174:	4293      	cmp	r3, r2
   1f176:	bf28      	it	cs
   1f178:	4613      	movcs	r3, r2
   1f17a:	f88d 301b 	strb.w	r3, [sp, #27]

      for (; i > 0; i--, pInterval++)
   1f17e:	e017      	b.n	1f1b0 <hrpsBuildHrm+0x19c>
      {
        UINT16_TO_BSTREAM(pHrpsData, *pInterval);
   1f180:	9b05      	ldr	r3, [sp, #20]
   1f182:	8819      	ldrh	r1, [r3, #0]
   1f184:	9b07      	ldr	r3, [sp, #28]
   1f186:	1c5a      	adds	r2, r3, #1
   1f188:	9207      	str	r2, [sp, #28]
   1f18a:	b2ca      	uxtb	r2, r1
   1f18c:	701a      	strb	r2, [r3, #0]
   1f18e:	9b05      	ldr	r3, [sp, #20]
   1f190:	881b      	ldrh	r3, [r3, #0]
   1f192:	0a1b      	lsrs	r3, r3, #8
   1f194:	b299      	uxth	r1, r3
   1f196:	9b07      	ldr	r3, [sp, #28]
   1f198:	1c5a      	adds	r2, r3, #1
   1f19a:	9207      	str	r2, [sp, #28]
   1f19c:	b2ca      	uxtb	r2, r1
   1f19e:	701a      	strb	r2, [r3, #0]
      for (; i > 0; i--, pInterval++)
   1f1a0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1f1a4:	3b01      	subs	r3, #1
   1f1a6:	f88d 301b 	strb.w	r3, [sp, #27]
   1f1aa:	9b05      	ldr	r3, [sp, #20]
   1f1ac:	3302      	adds	r3, #2
   1f1ae:	9305      	str	r3, [sp, #20]
   1f1b0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1f1b4:	2b00      	cmp	r3, #0
   1f1b6:	d1e3      	bne.n	1f180 <hrpsBuildHrm+0x16c>
      }
    }

    /* return length */
    return (uint8_t)(pHrpsData - *pBuf);
   1f1b8:	9b02      	ldr	r3, [sp, #8]
   1f1ba:	681b      	ldr	r3, [r3, #0]
   1f1bc:	9a07      	ldr	r2, [sp, #28]
   1f1be:	1ad3      	subs	r3, r2, r3
   1f1c0:	b2db      	uxtb	r3, r3
   1f1c2:	e000      	b.n	1f1c6 <hrpsBuildHrm+0x1b2>
  }

  return 0;
   1f1c4:	2300      	movs	r3, #0
}
   1f1c6:	4618      	mov	r0, r3
   1f1c8:	b009      	add	sp, #36	; 0x24
   1f1ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001f1d0 <hrpsSendHrmNtf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsSendHrmNtf(dmConnId_t connId)
{
   1f1d0:	b500      	push	{lr}
   1f1d2:	b085      	sub	sp, #20
   1f1d4:	4603      	mov	r3, r0
   1f1d6:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t *pBuf;
  uint8_t len;

  /* Build heart rate measurement characteristic */
  if ((len = hrpsBuildHrm(connId, &pBuf, &hrpsCb.hrm)) > 0)
   1f1da:	a902      	add	r1, sp, #8
   1f1dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f1e0:	4a0d      	ldr	r2, [pc, #52]	; (1f218 <hrpsSendHrmNtf+0x48>)
   1f1e2:	4618      	mov	r0, r3
   1f1e4:	f7ff ff16 	bl	1f014 <hrpsBuildHrm>
   1f1e8:	4603      	mov	r3, r0
   1f1ea:	f88d 300f 	strb.w	r3, [sp, #15]
   1f1ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f1f2:	2b00      	cmp	r3, #0
   1f1f4:	d00c      	beq.n	1f210 <hrpsSendHrmNtf+0x40>
  {
    /* Send notification */
    AttsHandleValueNtf(connId, HRS_HRM_HDL, len, pBuf);
   1f1f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f1fa:	b29a      	uxth	r2, r3
   1f1fc:	9b02      	ldr	r3, [sp, #8]
   1f1fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1f202:	2122      	movs	r1, #34	; 0x22
   1f204:	f7fa fb97 	bl	19936 <AttsHandleValueNtf>

    /* Free allocated buffer */
    WsfBufFree(pBuf);
   1f208:	9b02      	ldr	r3, [sp, #8]
   1f20a:	4618      	mov	r0, r3
   1f20c:	f000 fb22 	bl	1f854 <WsfBufFree>
  }
}
   1f210:	bf00      	nop
   1f212:	b005      	add	sp, #20
   1f214:	f85d fb04 	ldr.w	pc, [sp], #4
   1f218:	100051d8 	.word	0x100051d8

0001f21c <hrpsConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsConnOpen(dmEvt_t *pMsg)
{
   1f21c:	b082      	sub	sp, #8
   1f21e:	9001      	str	r0, [sp, #4]
  hrpsCb.txReady = TRUE;
   1f220:	4b03      	ldr	r3, [pc, #12]	; (1f230 <hrpsConnOpen+0x14>)
   1f222:	2201      	movs	r2, #1
   1f224:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   1f228:	bf00      	nop
   1f22a:	b002      	add	sp, #8
   1f22c:	4770      	bx	lr
   1f22e:	bf00      	nop
   1f230:	100051c0 	.word	0x100051c0

0001f234 <hrpsHandleValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsHandleValueCnf(attEvt_t *pMsg)
{
   1f234:	b500      	push	{lr}
   1f236:	b085      	sub	sp, #20
   1f238:	9001      	str	r0, [sp, #4]
  hrpsConn_t  *pConn;

  if (pMsg->hdr.status == ATT_SUCCESS && pMsg->handle == HRS_HRM_HDL)
   1f23a:	9b01      	ldr	r3, [sp, #4]
   1f23c:	78db      	ldrb	r3, [r3, #3]
   1f23e:	2b00      	cmp	r3, #0
   1f240:	d11c      	bne.n	1f27c <hrpsHandleValueCnf+0x48>
   1f242:	9b01      	ldr	r3, [sp, #4]
   1f244:	895b      	ldrh	r3, [r3, #10]
   1f246:	2b22      	cmp	r3, #34	; 0x22
   1f248:	d118      	bne.n	1f27c <hrpsHandleValueCnf+0x48>
  {
    hrpsCb.txReady = TRUE;
   1f24a:	4b0e      	ldr	r3, [pc, #56]	; (1f284 <hrpsHandleValueCnf+0x50>)
   1f24c:	2201      	movs	r2, #1
   1f24e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

    /* find next connection to send (note ccc idx is stored in timer status) */
    if ((pConn = hrpsFindNextToSend(hrpsCb.measTimer.msg.status)) != NULL)
   1f252:	4b0c      	ldr	r3, [pc, #48]	; (1f284 <hrpsHandleValueCnf+0x50>)
   1f254:	7cdb      	ldrb	r3, [r3, #19]
   1f256:	4618      	mov	r0, r3
   1f258:	f7ff fea8 	bl	1efac <hrpsFindNextToSend>
   1f25c:	9003      	str	r0, [sp, #12]
   1f25e:	9b03      	ldr	r3, [sp, #12]
   1f260:	2b00      	cmp	r3, #0
   1f262:	d00b      	beq.n	1f27c <hrpsHandleValueCnf+0x48>
    {
      hrpsSendHrmNtf(pConn->connId);
   1f264:	9b03      	ldr	r3, [sp, #12]
   1f266:	781b      	ldrb	r3, [r3, #0]
   1f268:	4618      	mov	r0, r3
   1f26a:	f7ff ffb1 	bl	1f1d0 <hrpsSendHrmNtf>
      hrpsCb.txReady = FALSE;
   1f26e:	4b05      	ldr	r3, [pc, #20]	; (1f284 <hrpsHandleValueCnf+0x50>)
   1f270:	2200      	movs	r2, #0
   1f272:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
      pConn->hrmToSend = FALSE;
   1f276:	9b03      	ldr	r3, [sp, #12]
   1f278:	2200      	movs	r2, #0
   1f27a:	705a      	strb	r2, [r3, #1]
    }
  }
}
   1f27c:	bf00      	nop
   1f27e:	b005      	add	sp, #20
   1f280:	f85d fb04 	ldr.w	pc, [sp], #4
   1f284:	100051c0 	.word	0x100051c0

0001f288 <hrpsMeasTimerExp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hrpsMeasTimerExp(wsfMsgHdr_t *pMsg)
{
   1f288:	b500      	push	{lr}
   1f28a:	b085      	sub	sp, #20
   1f28c:	9001      	str	r0, [sp, #4]
  hrpsConn_t  *pConn;

  /* if there are active connections */
  if (hrpsNoConnActive() == FALSE)
   1f28e:	f7ff fe4d 	bl	1ef2c <hrpsNoConnActive>
   1f292:	4603      	mov	r3, r0
   1f294:	2b00      	cmp	r3, #0
   1f296:	d12a      	bne.n	1f2ee <hrpsMeasTimerExp+0x66>
  {

    /* set up heart rate measurement to be sent on all connections */
    hrpsSetupToSend();
   1f298:	f7ff fe68 	bl	1ef6c <hrpsSetupToSend>

    /* read heart rate measurement sensor data */
    AppHwHrmRead(&hrpsCb.hrm);
   1f29c:	4816      	ldr	r0, [pc, #88]	; (1f2f8 <hrpsMeasTimerExp+0x70>)
   1f29e:	f7ed fbe1 	bl	ca64 <AppHwHrmRead>

    /* if ready to send measurements */
    if (hrpsCb.txReady)
   1f2a2:	4b16      	ldr	r3, [pc, #88]	; (1f2fc <hrpsMeasTimerExp+0x74>)
   1f2a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1f2a8:	2b00      	cmp	r3, #0
   1f2aa:	d014      	beq.n	1f2d6 <hrpsMeasTimerExp+0x4e>
    {
      /* find next connection to send (note ccc idx is stored in timer status) */
      if ((pConn = hrpsFindNextToSend(pMsg->status)) != NULL)
   1f2ac:	9b01      	ldr	r3, [sp, #4]
   1f2ae:	78db      	ldrb	r3, [r3, #3]
   1f2b0:	4618      	mov	r0, r3
   1f2b2:	f7ff fe7b 	bl	1efac <hrpsFindNextToSend>
   1f2b6:	9003      	str	r0, [sp, #12]
   1f2b8:	9b03      	ldr	r3, [sp, #12]
   1f2ba:	2b00      	cmp	r3, #0
   1f2bc:	d00b      	beq.n	1f2d6 <hrpsMeasTimerExp+0x4e>
      {
        hrpsSendHrmNtf(pConn->connId);
   1f2be:	9b03      	ldr	r3, [sp, #12]
   1f2c0:	781b      	ldrb	r3, [r3, #0]
   1f2c2:	4618      	mov	r0, r3
   1f2c4:	f7ff ff84 	bl	1f1d0 <hrpsSendHrmNtf>
        hrpsCb.txReady = FALSE;
   1f2c8:	4b0c      	ldr	r3, [pc, #48]	; (1f2fc <hrpsMeasTimerExp+0x74>)
   1f2ca:	2200      	movs	r2, #0
   1f2cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        pConn->hrmToSend = FALSE;
   1f2d0:	9b03      	ldr	r3, [sp, #12]
   1f2d2:	2200      	movs	r2, #0
   1f2d4:	705a      	strb	r2, [r3, #1]
      }
    }

    /* restart timer */
    WsfTimerStartMs(&hrpsCb.measTimer, hrpsCb.cfg.period);
   1f2d6:	4b09      	ldr	r3, [pc, #36]	; (1f2fc <hrpsMeasTimerExp+0x74>)
   1f2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f2da:	4619      	mov	r1, r3
   1f2dc:	4808      	ldr	r0, [pc, #32]	; (1f300 <hrpsMeasTimerExp+0x78>)
   1f2de:	f000 feb5 	bl	2004c <WsfTimerStartMs>

    /* increment energy expended for test/demonstration purposes */
    hrpsCb.hrm.energyExp++;
   1f2e2:	4b06      	ldr	r3, [pc, #24]	; (1f2fc <hrpsMeasTimerExp+0x74>)
   1f2e4:	8bdb      	ldrh	r3, [r3, #30]
   1f2e6:	3301      	adds	r3, #1
   1f2e8:	b29a      	uxth	r2, r3
   1f2ea:	4b04      	ldr	r3, [pc, #16]	; (1f2fc <hrpsMeasTimerExp+0x74>)
   1f2ec:	83da      	strh	r2, [r3, #30]
  }
}
   1f2ee:	bf00      	nop
   1f2f0:	b005      	add	sp, #20
   1f2f2:	f85d fb04 	ldr.w	pc, [sp], #4
   1f2f6:	bf00      	nop
   1f2f8:	100051d8 	.word	0x100051d8
   1f2fc:	100051c0 	.word	0x100051c0
   1f300:	100051c8 	.word	0x100051c8

0001f304 <HrpsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsInit(wsfHandlerId_t handlerId, hrpsCfg_t *pCfg)
{
   1f304:	b082      	sub	sp, #8
   1f306:	4603      	mov	r3, r0
   1f308:	9100      	str	r1, [sp, #0]
   1f30a:	f88d 3007 	strb.w	r3, [sp, #7]
  hrpsCb.measTimer.handlerId = handlerId;
   1f30e:	4a05      	ldr	r2, [pc, #20]	; (1f324 <HrpsInit+0x20>)
   1f310:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f314:	7513      	strb	r3, [r2, #20]
  hrpsCb.cfg = *pCfg;
   1f316:	4a03      	ldr	r2, [pc, #12]	; (1f324 <HrpsInit+0x20>)
   1f318:	9b00      	ldr	r3, [sp, #0]
   1f31a:	681b      	ldr	r3, [r3, #0]
   1f31c:	6253      	str	r3, [r2, #36]	; 0x24
}
   1f31e:	bf00      	nop
   1f320:	b002      	add	sp, #8
   1f322:	4770      	bx	lr
   1f324:	100051c0 	.word	0x100051c0

0001f328 <HrpsMeasStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsMeasStart(dmConnId_t connId, uint8_t timerEvt, uint8_t hrmCccIdx)
{
   1f328:	b500      	push	{lr}
   1f32a:	b083      	sub	sp, #12
   1f32c:	4603      	mov	r3, r0
   1f32e:	f88d 3007 	strb.w	r3, [sp, #7]
   1f332:	460b      	mov	r3, r1
   1f334:	f88d 3006 	strb.w	r3, [sp, #6]
   1f338:	4613      	mov	r3, r2
   1f33a:	f88d 3005 	strb.w	r3, [sp, #5]
  /* if this is first connection */
  if (hrpsNoConnActive())
   1f33e:	f7ff fdf5 	bl	1ef2c <hrpsNoConnActive>
   1f342:	4603      	mov	r3, r0
   1f344:	2b00      	cmp	r3, #0
   1f346:	d00d      	beq.n	1f364 <HrpsMeasStart+0x3c>
  {
    /* initialize control block */
    hrpsCb.measTimer.msg.event = timerEvt;
   1f348:	4a0c      	ldr	r2, [pc, #48]	; (1f37c <HrpsMeasStart+0x54>)
   1f34a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f34e:	7493      	strb	r3, [r2, #18]
    hrpsCb.measTimer.msg.status = hrmCccIdx;
   1f350:	4a0a      	ldr	r2, [pc, #40]	; (1f37c <HrpsMeasStart+0x54>)
   1f352:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1f356:	74d3      	strb	r3, [r2, #19]

    /* start timer */
    WsfTimerStartMs(&hrpsCb.measTimer, hrpsCb.cfg.period);
   1f358:	4b08      	ldr	r3, [pc, #32]	; (1f37c <HrpsMeasStart+0x54>)
   1f35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f35c:	4619      	mov	r1, r3
   1f35e:	4808      	ldr	r0, [pc, #32]	; (1f380 <HrpsMeasStart+0x58>)
   1f360:	f000 fe74 	bl	2004c <WsfTimerStartMs>
  }

  /* set conn id */
  hrpsCb.conn[connId - 1].connId = connId;
   1f364:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f368:	3b01      	subs	r3, #1
   1f36a:	4904      	ldr	r1, [pc, #16]	; (1f37c <HrpsMeasStart+0x54>)
   1f36c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1f370:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
}
   1f374:	bf00      	nop
   1f376:	b003      	add	sp, #12
   1f378:	f85d fb04 	ldr.w	pc, [sp], #4
   1f37c:	100051c0 	.word	0x100051c0
   1f380:	100051c8 	.word	0x100051c8

0001f384 <HrpsMeasStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsMeasStop(dmConnId_t connId)
{
   1f384:	b500      	push	{lr}
   1f386:	b083      	sub	sp, #12
   1f388:	4603      	mov	r3, r0
   1f38a:	f88d 3007 	strb.w	r3, [sp, #7]
  /* clear connection */
  hrpsCb.conn[connId - 1].connId = DM_CONN_ID_NONE;
   1f38e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f392:	3b01      	subs	r3, #1
   1f394:	4a0b      	ldr	r2, [pc, #44]	; (1f3c4 <HrpsMeasStop+0x40>)
   1f396:	2100      	movs	r1, #0
   1f398:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
  hrpsCb.conn[connId - 1].hrmToSend = FALSE;
   1f39c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f3a0:	3b01      	subs	r3, #1
   1f3a2:	4a08      	ldr	r2, [pc, #32]	; (1f3c4 <HrpsMeasStop+0x40>)
   1f3a4:	005b      	lsls	r3, r3, #1
   1f3a6:	4413      	add	r3, r2
   1f3a8:	2200      	movs	r2, #0
   1f3aa:	705a      	strb	r2, [r3, #1]

  /* if no remaining connections */
  if (hrpsNoConnActive())
   1f3ac:	f7ff fdbe 	bl	1ef2c <hrpsNoConnActive>
   1f3b0:	4603      	mov	r3, r0
   1f3b2:	2b00      	cmp	r3, #0
   1f3b4:	d002      	beq.n	1f3bc <HrpsMeasStop+0x38>
  {
    /* stop timer */
    WsfTimerStop(&hrpsCb.measTimer);
   1f3b6:	4804      	ldr	r0, [pc, #16]	; (1f3c8 <HrpsMeasStop+0x44>)
   1f3b8:	f000 fe5c 	bl	20074 <WsfTimerStop>
  }
}
   1f3bc:	bf00      	nop
   1f3be:	b003      	add	sp, #12
   1f3c0:	f85d fb04 	ldr.w	pc, [sp], #4
   1f3c4:	100051c0 	.word	0x100051c0
   1f3c8:	100051c8 	.word	0x100051c8

0001f3cc <HrpsProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsProcMsg(wsfMsgHdr_t *pMsg)
{
   1f3cc:	b500      	push	{lr}
   1f3ce:	b083      	sub	sp, #12
   1f3d0:	9001      	str	r0, [sp, #4]
  if (pMsg->event == DM_CONN_OPEN_IND)
   1f3d2:	9b01      	ldr	r3, [sp, #4]
   1f3d4:	789b      	ldrb	r3, [r3, #2]
   1f3d6:	2b27      	cmp	r3, #39	; 0x27
   1f3d8:	d103      	bne.n	1f3e2 <HrpsProcMsg+0x16>
  {
    hrpsConnOpen((dmEvt_t *) pMsg);
   1f3da:	9801      	ldr	r0, [sp, #4]
   1f3dc:	f7ff ff1e 	bl	1f21c <hrpsConnOpen>
  }
  else if (pMsg->event == hrpsCb.measTimer.msg.event)
  {
    hrpsMeasTimerExp(pMsg);
  }
}
   1f3e0:	e010      	b.n	1f404 <HrpsProcMsg+0x38>
  else if (pMsg->event == ATTS_HANDLE_VALUE_CNF)
   1f3e2:	9b01      	ldr	r3, [sp, #4]
   1f3e4:	789b      	ldrb	r3, [r3, #2]
   1f3e6:	2b0f      	cmp	r3, #15
   1f3e8:	d103      	bne.n	1f3f2 <HrpsProcMsg+0x26>
    hrpsHandleValueCnf((attEvt_t *) pMsg);
   1f3ea:	9801      	ldr	r0, [sp, #4]
   1f3ec:	f7ff ff22 	bl	1f234 <hrpsHandleValueCnf>
}
   1f3f0:	e008      	b.n	1f404 <HrpsProcMsg+0x38>
  else if (pMsg->event == hrpsCb.measTimer.msg.event)
   1f3f2:	9b01      	ldr	r3, [sp, #4]
   1f3f4:	789a      	ldrb	r2, [r3, #2]
   1f3f6:	4b05      	ldr	r3, [pc, #20]	; (1f40c <HrpsProcMsg+0x40>)
   1f3f8:	7c9b      	ldrb	r3, [r3, #18]
   1f3fa:	429a      	cmp	r2, r3
   1f3fc:	d102      	bne.n	1f404 <HrpsProcMsg+0x38>
    hrpsMeasTimerExp(pMsg);
   1f3fe:	9801      	ldr	r0, [sp, #4]
   1f400:	f7ff ff42 	bl	1f288 <hrpsMeasTimerExp>
}
   1f404:	bf00      	nop
   1f406:	b003      	add	sp, #12
   1f408:	f85d fb04 	ldr.w	pc, [sp], #4
   1f40c:	100051c0 	.word	0x100051c0

0001f410 <HrpsWriteCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t HrpsWriteCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                       uint16_t offset, uint16_t len, uint8_t *pValue, attsAttr_t *pAttr)
{
   1f410:	b410      	push	{r4}
   1f412:	b083      	sub	sp, #12
   1f414:	4604      	mov	r4, r0
   1f416:	4608      	mov	r0, r1
   1f418:	4611      	mov	r1, r2
   1f41a:	461a      	mov	r2, r3
   1f41c:	4623      	mov	r3, r4
   1f41e:	f88d 3007 	strb.w	r3, [sp, #7]
   1f422:	4603      	mov	r3, r0
   1f424:	f8ad 3004 	strh.w	r3, [sp, #4]
   1f428:	460b      	mov	r3, r1
   1f42a:	f88d 3006 	strb.w	r3, [sp, #6]
   1f42e:	4613      	mov	r3, r2
   1f430:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (*pValue == CH_HRCP_RESET_ENERGY_EXP)
   1f434:	9b05      	ldr	r3, [sp, #20]
   1f436:	781b      	ldrb	r3, [r3, #0]
   1f438:	2b01      	cmp	r3, #1
   1f43a:	d104      	bne.n	1f446 <HrpsWriteCback+0x36>
  {
    /* reset energy expended */
    hrpsCb.hrm.energyExp = 0;
   1f43c:	4b05      	ldr	r3, [pc, #20]	; (1f454 <HrpsWriteCback+0x44>)
   1f43e:	2200      	movs	r2, #0
   1f440:	83da      	strh	r2, [r3, #30]
    return ATT_SUCCESS;
   1f442:	2300      	movs	r3, #0
   1f444:	e000      	b.n	1f448 <HrpsWriteCback+0x38>
  }
  else
  {
    /* else unknown control point command */
    return HRS_ERR_CP_NOT_SUP;
   1f446:	2380      	movs	r3, #128	; 0x80
  }
}
   1f448:	4618      	mov	r0, r3
   1f44a:	b003      	add	sp, #12
   1f44c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f450:	4770      	bx	lr
   1f452:	bf00      	nop
   1f454:	100051c0 	.word	0x100051c0

0001f458 <HrpsSetFlags>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsSetFlags(uint8_t flags)
{
   1f458:	b082      	sub	sp, #8
   1f45a:	4603      	mov	r3, r0
   1f45c:	f88d 3007 	strb.w	r3, [sp, #7]
  hrpsCb.hrm.flags = flags;
   1f460:	4a03      	ldr	r2, [pc, #12]	; (1f470 <HrpsSetFlags+0x18>)
   1f462:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f466:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
}
   1f46a:	bf00      	nop
   1f46c:	b002      	add	sp, #8
   1f46e:	4770      	bx	lr
   1f470:	100051c0 	.word	0x100051c0

0001f474 <RscpsSetFeatures>:
*
*  \return none
*/
/*************************************************************************************************/
void RscpsSetFeatures(uint16_t features)
{
   1f474:	b500      	push	{lr}
   1f476:	b085      	sub	sp, #20
   1f478:	4603      	mov	r3, r0
   1f47a:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t tempData[2] = {UINT16_TO_BYTES(features)};
   1f47e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f482:	b2db      	uxtb	r3, r3
   1f484:	f88d 300c 	strb.w	r3, [sp, #12]
   1f488:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f48c:	0a1b      	lsrs	r3, r3, #8
   1f48e:	b29b      	uxth	r3, r3
   1f490:	b2db      	uxtb	r3, r3
   1f492:	f88d 300d 	strb.w	r3, [sp, #13]
  AttsSetAttr(RSCS_RSF_HDL, sizeof(tempData), tempData);
   1f496:	ab03      	add	r3, sp, #12
   1f498:	461a      	mov	r2, r3
   1f49a:	2102      	movs	r1, #2
   1f49c:	f240 40a2 	movw	r0, #1186	; 0x4a2
   1f4a0:	f7fa fe94 	bl	1a1cc <AttsSetAttr>
}
   1f4a4:	bf00      	nop
   1f4a6:	b005      	add	sp, #20
   1f4a8:	f85d fb04 	ldr.w	pc, [sp], #4

0001f4ac <RscpsSetParameter>:
*
*  \return none
*/
/*************************************************************************************************/
void RscpsSetParameter(uint8_t type, uint32_t value)
{
   1f4ac:	b082      	sub	sp, #8
   1f4ae:	4603      	mov	r3, r0
   1f4b0:	9100      	str	r1, [sp, #0]
   1f4b2:	f88d 3007 	strb.w	r3, [sp, #7]
  switch (type)
   1f4b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f4ba:	2b04      	cmp	r3, #4
   1f4bc:	d840      	bhi.n	1f540 <RscpsSetParameter+0x94>
   1f4be:	a201      	add	r2, pc, #4	; (adr r2, 1f4c4 <RscpsSetParameter+0x18>)
   1f4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f4c4:	0001f4d9 	.word	0x0001f4d9
   1f4c8:	0001f4e3 	.word	0x0001f4e3
   1f4cc:	0001f4ed 	.word	0x0001f4ed
   1f4d0:	0001f505 	.word	0x0001f505
   1f4d4:	0001f51b 	.word	0x0001f51b
  {
  case RSCP_SM_PARAM_SPEED:
    rscpSmData.speed = (uint16_t) value;
   1f4d8:	9b00      	ldr	r3, [sp, #0]
   1f4da:	b29a      	uxth	r2, r3
   1f4dc:	4b1a      	ldr	r3, [pc, #104]	; (1f548 <RscpsSetParameter+0x9c>)
   1f4de:	805a      	strh	r2, [r3, #2]
    break;
   1f4e0:	e02f      	b.n	1f542 <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_CADENCE:
    rscpSmData.cadence = (uint8_t) value;
   1f4e2:	9b00      	ldr	r3, [sp, #0]
   1f4e4:	b2da      	uxtb	r2, r3
   1f4e6:	4b18      	ldr	r3, [pc, #96]	; (1f548 <RscpsSetParameter+0x9c>)
   1f4e8:	711a      	strb	r2, [r3, #4]
    break;
   1f4ea:	e02a      	b.n	1f542 <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_STRIDE_LENGTH:
    rscpSmData.flags |= (1 << RSCPS_ISLP_FLAG_INDEX);
   1f4ec:	4b16      	ldr	r3, [pc, #88]	; (1f548 <RscpsSetParameter+0x9c>)
   1f4ee:	781b      	ldrb	r3, [r3, #0]
   1f4f0:	f043 0301 	orr.w	r3, r3, #1
   1f4f4:	b2da      	uxtb	r2, r3
   1f4f6:	4b14      	ldr	r3, [pc, #80]	; (1f548 <RscpsSetParameter+0x9c>)
   1f4f8:	701a      	strb	r2, [r3, #0]
    rscpSmData.stride = (uint16_t) value;
   1f4fa:	9b00      	ldr	r3, [sp, #0]
   1f4fc:	b29a      	uxth	r2, r3
   1f4fe:	4b12      	ldr	r3, [pc, #72]	; (1f548 <RscpsSetParameter+0x9c>)
   1f500:	80da      	strh	r2, [r3, #6]
    break;
   1f502:	e01e      	b.n	1f542 <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_TOTAL_DISTANCE:
    rscpSmData.flags |= (1 << RSCPS_TDP_FLAG_INDEX);
   1f504:	4b10      	ldr	r3, [pc, #64]	; (1f548 <RscpsSetParameter+0x9c>)
   1f506:	781b      	ldrb	r3, [r3, #0]
   1f508:	f043 0302 	orr.w	r3, r3, #2
   1f50c:	b2da      	uxtb	r2, r3
   1f50e:	4b0e      	ldr	r3, [pc, #56]	; (1f548 <RscpsSetParameter+0x9c>)
   1f510:	701a      	strb	r2, [r3, #0]
    rscpSmData.distance = value;
   1f512:	4a0d      	ldr	r2, [pc, #52]	; (1f548 <RscpsSetParameter+0x9c>)
   1f514:	9b00      	ldr	r3, [sp, #0]
   1f516:	6093      	str	r3, [r2, #8]
    break;
   1f518:	e013      	b.n	1f542 <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_STATUS:
    if (value)
   1f51a:	9b00      	ldr	r3, [sp, #0]
   1f51c:	2b00      	cmp	r3, #0
   1f51e:	d007      	beq.n	1f530 <RscpsSetParameter+0x84>
    {
      rscpSmData.flags |= (1 << RSCPS_WRS_FLAG_INDEX);
   1f520:	4b09      	ldr	r3, [pc, #36]	; (1f548 <RscpsSetParameter+0x9c>)
   1f522:	781b      	ldrb	r3, [r3, #0]
   1f524:	f043 0304 	orr.w	r3, r3, #4
   1f528:	b2da      	uxtb	r2, r3
   1f52a:	4b07      	ldr	r3, [pc, #28]	; (1f548 <RscpsSetParameter+0x9c>)
   1f52c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      rscpSmData.flags &= ~(1 << RSCPS_WRS_FLAG_INDEX);
    }
    break;
   1f52e:	e008      	b.n	1f542 <RscpsSetParameter+0x96>
      rscpSmData.flags &= ~(1 << RSCPS_WRS_FLAG_INDEX);
   1f530:	4b05      	ldr	r3, [pc, #20]	; (1f548 <RscpsSetParameter+0x9c>)
   1f532:	781b      	ldrb	r3, [r3, #0]
   1f534:	f023 0304 	bic.w	r3, r3, #4
   1f538:	b2da      	uxtb	r2, r3
   1f53a:	4b03      	ldr	r3, [pc, #12]	; (1f548 <RscpsSetParameter+0x9c>)
   1f53c:	701a      	strb	r2, [r3, #0]
    break;
   1f53e:	e000      	b.n	1f542 <RscpsSetParameter+0x96>

  default:
    break;
   1f540:	bf00      	nop
  }
}
   1f542:	bf00      	nop
   1f544:	b002      	add	sp, #8
   1f546:	4770      	bx	lr
   1f548:	100051ec 	.word	0x100051ec

0001f54c <RscpsSendSpeedMeasurement>:
*
*  \return none
*/
/*************************************************************************************************/
void RscpsSendSpeedMeasurement(dmConnId_t connId)
{
   1f54c:	b500      	push	{lr}
   1f54e:	b089      	sub	sp, #36	; 0x24
   1f550:	4603      	mov	r3, r0
   1f552:	f88d 3007 	strb.w	r3, [sp, #7]
  int8_t i;
  uint16_t len;
  uint8_t msg[RSCPS_PM_MAX_LEN];
  uint8_t *p = msg;
   1f556:	ab03      	add	r3, sp, #12
   1f558:	9306      	str	r3, [sp, #24]

  /* Add manditory parameters */
  UINT8_TO_BSTREAM(p, rscpSmData.flags);
   1f55a:	9b06      	ldr	r3, [sp, #24]
   1f55c:	1c5a      	adds	r2, r3, #1
   1f55e:	9206      	str	r2, [sp, #24]
   1f560:	4a41      	ldr	r2, [pc, #260]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f562:	7812      	ldrb	r2, [r2, #0]
   1f564:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, rscpSmData.speed);
   1f566:	4b40      	ldr	r3, [pc, #256]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f568:	8859      	ldrh	r1, [r3, #2]
   1f56a:	9b06      	ldr	r3, [sp, #24]
   1f56c:	1c5a      	adds	r2, r3, #1
   1f56e:	9206      	str	r2, [sp, #24]
   1f570:	b2ca      	uxtb	r2, r1
   1f572:	701a      	strb	r2, [r3, #0]
   1f574:	4b3c      	ldr	r3, [pc, #240]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f576:	885b      	ldrh	r3, [r3, #2]
   1f578:	0a1b      	lsrs	r3, r3, #8
   1f57a:	b299      	uxth	r1, r3
   1f57c:	9b06      	ldr	r3, [sp, #24]
   1f57e:	1c5a      	adds	r2, r3, #1
   1f580:	9206      	str	r2, [sp, #24]
   1f582:	b2ca      	uxtb	r2, r1
   1f584:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, rscpSmData.cadence);
   1f586:	9b06      	ldr	r3, [sp, #24]
   1f588:	1c5a      	adds	r2, r3, #1
   1f58a:	9206      	str	r2, [sp, #24]
   1f58c:	4a36      	ldr	r2, [pc, #216]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f58e:	7912      	ldrb	r2, [r2, #4]
   1f590:	701a      	strb	r2, [r3, #0]

  /* Add optional parameters */
  for (i = 0; i < RSCPS_NUM_FLAGS; i++)
   1f592:	2300      	movs	r3, #0
   1f594:	f88d 301f 	strb.w	r3, [sp, #31]
   1f598:	e04a      	b.n	1f630 <RscpsSendSpeedMeasurement+0xe4>
  {
    if (rscpSmData.flags & (1 << i))
   1f59a:	4b33      	ldr	r3, [pc, #204]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f59c:	781b      	ldrb	r3, [r3, #0]
   1f59e:	461a      	mov	r2, r3
   1f5a0:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   1f5a4:	fa42 f303 	asr.w	r3, r2, r3
   1f5a8:	f003 0301 	and.w	r3, r3, #1
   1f5ac:	2b00      	cmp	r3, #0
   1f5ae:	d037      	beq.n	1f620 <RscpsSendSpeedMeasurement+0xd4>
    {
      switch (i)
   1f5b0:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   1f5b4:	2b00      	cmp	r3, #0
   1f5b6:	d002      	beq.n	1f5be <RscpsSendSpeedMeasurement+0x72>
   1f5b8:	2b01      	cmp	r3, #1
   1f5ba:	d011      	beq.n	1f5e0 <RscpsSendSpeedMeasurement+0x94>
      case RSCPS_TDP_FLAG_INDEX:
        UINT32_TO_BSTREAM(p, rscpSmData.distance);
        break;

      default:
        break;
   1f5bc:	e031      	b.n	1f622 <RscpsSendSpeedMeasurement+0xd6>
        UINT16_TO_BSTREAM(p, rscpSmData.stride);
   1f5be:	4b2a      	ldr	r3, [pc, #168]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f5c0:	88d9      	ldrh	r1, [r3, #6]
   1f5c2:	9b06      	ldr	r3, [sp, #24]
   1f5c4:	1c5a      	adds	r2, r3, #1
   1f5c6:	9206      	str	r2, [sp, #24]
   1f5c8:	b2ca      	uxtb	r2, r1
   1f5ca:	701a      	strb	r2, [r3, #0]
   1f5cc:	4b26      	ldr	r3, [pc, #152]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f5ce:	88db      	ldrh	r3, [r3, #6]
   1f5d0:	0a1b      	lsrs	r3, r3, #8
   1f5d2:	b299      	uxth	r1, r3
   1f5d4:	9b06      	ldr	r3, [sp, #24]
   1f5d6:	1c5a      	adds	r2, r3, #1
   1f5d8:	9206      	str	r2, [sp, #24]
   1f5da:	b2ca      	uxtb	r2, r1
   1f5dc:	701a      	strb	r2, [r3, #0]
        break;
   1f5de:	e020      	b.n	1f622 <RscpsSendSpeedMeasurement+0xd6>
        UINT32_TO_BSTREAM(p, rscpSmData.distance);
   1f5e0:	4b21      	ldr	r3, [pc, #132]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f5e2:	6899      	ldr	r1, [r3, #8]
   1f5e4:	9b06      	ldr	r3, [sp, #24]
   1f5e6:	1c5a      	adds	r2, r3, #1
   1f5e8:	9206      	str	r2, [sp, #24]
   1f5ea:	b2ca      	uxtb	r2, r1
   1f5ec:	701a      	strb	r2, [r3, #0]
   1f5ee:	4b1e      	ldr	r3, [pc, #120]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f5f0:	689b      	ldr	r3, [r3, #8]
   1f5f2:	0a19      	lsrs	r1, r3, #8
   1f5f4:	9b06      	ldr	r3, [sp, #24]
   1f5f6:	1c5a      	adds	r2, r3, #1
   1f5f8:	9206      	str	r2, [sp, #24]
   1f5fa:	b2ca      	uxtb	r2, r1
   1f5fc:	701a      	strb	r2, [r3, #0]
   1f5fe:	4b1a      	ldr	r3, [pc, #104]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f600:	689b      	ldr	r3, [r3, #8]
   1f602:	0c19      	lsrs	r1, r3, #16
   1f604:	9b06      	ldr	r3, [sp, #24]
   1f606:	1c5a      	adds	r2, r3, #1
   1f608:	9206      	str	r2, [sp, #24]
   1f60a:	b2ca      	uxtb	r2, r1
   1f60c:	701a      	strb	r2, [r3, #0]
   1f60e:	4b16      	ldr	r3, [pc, #88]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f610:	689b      	ldr	r3, [r3, #8]
   1f612:	0e19      	lsrs	r1, r3, #24
   1f614:	9b06      	ldr	r3, [sp, #24]
   1f616:	1c5a      	adds	r2, r3, #1
   1f618:	9206      	str	r2, [sp, #24]
   1f61a:	b2ca      	uxtb	r2, r1
   1f61c:	701a      	strb	r2, [r3, #0]
        break;
   1f61e:	e000      	b.n	1f622 <RscpsSendSpeedMeasurement+0xd6>
      }
    }
   1f620:	bf00      	nop
  for (i = 0; i < RSCPS_NUM_FLAGS; i++)
   1f622:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   1f626:	b2db      	uxtb	r3, r3
   1f628:	3301      	adds	r3, #1
   1f62a:	b2db      	uxtb	r3, r3
   1f62c:	f88d 301f 	strb.w	r3, [sp, #31]
   1f630:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   1f634:	2b02      	cmp	r3, #2
   1f636:	ddb0      	ble.n	1f59a <RscpsSendSpeedMeasurement+0x4e>
  }

  /* Calculate message length */
  len = (uint16_t) (p - msg);
   1f638:	ab03      	add	r3, sp, #12
   1f63a:	9a06      	ldr	r2, [sp, #24]
   1f63c:	1ad3      	subs	r3, r2, r3
   1f63e:	f8ad 3016 	strh.w	r3, [sp, #22]

  /* Transmit notification */
  AttsHandleValueNtf(connId, RSCS_RSM_HDL, len, msg);
   1f642:	ab03      	add	r3, sp, #12
   1f644:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f648:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1f64c:	f240 41a4 	movw	r1, #1188	; 0x4a4
   1f650:	f7fa f971 	bl	19936 <AttsHandleValueNtf>

  /* Clear the measurement data */
  memset(&rscpSmData, 0, sizeof(rscpSmData));
   1f654:	220c      	movs	r2, #12
   1f656:	2100      	movs	r1, #0
   1f658:	4803      	ldr	r0, [pc, #12]	; (1f668 <RscpsSendSpeedMeasurement+0x11c>)
   1f65a:	f006 f82f 	bl	256bc <memset>
}
   1f65e:	bf00      	nop
   1f660:	b009      	add	sp, #36	; 0x24
   1f662:	f85d fb04 	ldr.w	pc, [sp], #4
   1f666:	bf00      	nop
   1f668:	100051ec 	.word	0x100051ec

0001f66c <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   1f66c:	b088      	sub	sp, #32
   1f66e:	9102      	str	r1, [sp, #8]
   1f670:	9301      	str	r3, [sp, #4]
   1f672:	4603      	mov	r3, r0
   1f674:	f8ad 300e 	strh.w	r3, [sp, #14]
   1f678:	4613      	mov	r3, r2
   1f67a:	f88d 300d 	strb.w	r3, [sp, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
   1f67e:	4a53      	ldr	r2, [pc, #332]	; (1f7cc <WsfBufInit+0x160>)
   1f680:	9b02      	ldr	r3, [sp, #8]
   1f682:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   1f684:	4b51      	ldr	r3, [pc, #324]	; (1f7cc <WsfBufInit+0x160>)
   1f686:	681b      	ldr	r3, [r3, #0]
   1f688:	9307      	str	r3, [sp, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
   1f68a:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1f68e:	4613      	mov	r3, r2
   1f690:	005b      	lsls	r3, r3, #1
   1f692:	4413      	add	r3, r2
   1f694:	009b      	lsls	r3, r3, #2
   1f696:	461a      	mov	r2, r3
   1f698:	9b07      	ldr	r3, [sp, #28]
   1f69a:	4413      	add	r3, r2
   1f69c:	9306      	str	r3, [sp, #24]

  wsfBufNumPools = numPools;
   1f69e:	4a4c      	ldr	r2, [pc, #304]	; (1f7d0 <WsfBufInit+0x164>)
   1f6a0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1f6a4:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1f6a6:	4b49      	ldr	r3, [pc, #292]	; (1f7cc <WsfBufInit+0x160>)
   1f6a8:	681a      	ldr	r2, [r3, #0]
   1f6aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f6ae:	08db      	lsrs	r3, r3, #3
   1f6b0:	b29b      	uxth	r3, r3
   1f6b2:	00db      	lsls	r3, r3, #3
   1f6b4:	4413      	add	r3, r2
   1f6b6:	9a06      	ldr	r2, [sp, #24]
   1f6b8:	429a      	cmp	r2, r3
   1f6ba:	d901      	bls.n	1f6c0 <WsfBufInit+0x54>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1f6bc:	2300      	movs	r3, #0
   1f6be:	e081      	b.n	1f7c4 <WsfBufInit+0x158>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   1f6c0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1f6c4:	1e5a      	subs	r2, r3, #1
   1f6c6:	f88d 200d 	strb.w	r2, [sp, #13]
   1f6ca:	2b00      	cmp	r3, #0
   1f6cc:	d070      	beq.n	1f7b0 <WsfBufInit+0x144>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
   1f6ce:	9b01      	ldr	r3, [sp, #4]
   1f6d0:	881b      	ldrh	r3, [r3, #0]
   1f6d2:	2b07      	cmp	r3, #7
   1f6d4:	d803      	bhi.n	1f6de <WsfBufInit+0x72>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   1f6d6:	9b07      	ldr	r3, [sp, #28]
   1f6d8:	2208      	movs	r2, #8
   1f6da:	801a      	strh	r2, [r3, #0]
   1f6dc:	e014      	b.n	1f708 <WsfBufInit+0x9c>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   1f6de:	9b01      	ldr	r3, [sp, #4]
   1f6e0:	881b      	ldrh	r3, [r3, #0]
   1f6e2:	f003 0307 	and.w	r3, r3, #7
   1f6e6:	b29b      	uxth	r3, r3
   1f6e8:	2b00      	cmp	r3, #0
   1f6ea:	d009      	beq.n	1f700 <WsfBufInit+0x94>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   1f6ec:	9b01      	ldr	r3, [sp, #4]
   1f6ee:	881b      	ldrh	r3, [r3, #0]
   1f6f0:	f023 0307 	bic.w	r3, r3, #7
   1f6f4:	b29b      	uxth	r3, r3
   1f6f6:	3308      	adds	r3, #8
   1f6f8:	b29a      	uxth	r2, r3
   1f6fa:	9b07      	ldr	r3, [sp, #28]
   1f6fc:	801a      	strh	r2, [r3, #0]
   1f6fe:	e003      	b.n	1f708 <WsfBufInit+0x9c>
    }
    else
    {
      pPool->desc.len = pDesc->len;
   1f700:	9b01      	ldr	r3, [sp, #4]
   1f702:	881a      	ldrh	r2, [r3, #0]
   1f704:	9b07      	ldr	r3, [sp, #28]
   1f706:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
   1f708:	9b01      	ldr	r3, [sp, #4]
   1f70a:	789a      	ldrb	r2, [r3, #2]
   1f70c:	9b07      	ldr	r3, [sp, #28]
   1f70e:	709a      	strb	r2, [r3, #2]
    pDesc++;
   1f710:	9b01      	ldr	r3, [sp, #4]
   1f712:	3304      	adds	r3, #4
   1f714:	9301      	str	r3, [sp, #4]

    pPool->pStart = pStart;
   1f716:	9b07      	ldr	r3, [sp, #28]
   1f718:	9a06      	ldr	r2, [sp, #24]
   1f71a:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
   1f71c:	9b07      	ldr	r3, [sp, #28]
   1f71e:	9a06      	ldr	r2, [sp, #24]
   1f720:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   1f722:	9b07      	ldr	r3, [sp, #28]
   1f724:	881b      	ldrh	r3, [r3, #0]
   1f726:	08db      	lsrs	r3, r3, #3
   1f728:	f8ad 3014 	strh.w	r3, [sp, #20]
    for (i = pPool->desc.num; i > 1; i--)
   1f72c:	9b07      	ldr	r3, [sp, #28]
   1f72e:	789b      	ldrb	r3, [r3, #2]
   1f730:	f88d 3017 	strb.w	r3, [sp, #23]
   1f734:	e01e      	b.n	1f774 <WsfBufInit+0x108>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1f736:	4b25      	ldr	r3, [pc, #148]	; (1f7cc <WsfBufInit+0x160>)
   1f738:	681a      	ldr	r2, [r3, #0]
   1f73a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f73e:	08db      	lsrs	r3, r3, #3
   1f740:	b29b      	uxth	r3, r3
   1f742:	00db      	lsls	r3, r3, #3
   1f744:	4413      	add	r3, r2
   1f746:	9a06      	ldr	r2, [sp, #24]
   1f748:	429a      	cmp	r2, r3
   1f74a:	d901      	bls.n	1f750 <WsfBufInit+0xe4>
      {
        WSF_ASSERT(FALSE);
        return 0;
   1f74c:	2300      	movs	r3, #0
   1f74e:	e039      	b.n	1f7c4 <WsfBufInit+0x158>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
   1f750:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f754:	00db      	lsls	r3, r3, #3
   1f756:	9a06      	ldr	r2, [sp, #24]
   1f758:	441a      	add	r2, r3
   1f75a:	9b06      	ldr	r3, [sp, #24]
   1f75c:	601a      	str	r2, [r3, #0]
      pStart += len;
   1f75e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f762:	00db      	lsls	r3, r3, #3
   1f764:	9a06      	ldr	r2, [sp, #24]
   1f766:	4413      	add	r3, r2
   1f768:	9306      	str	r3, [sp, #24]
    for (i = pPool->desc.num; i > 1; i--)
   1f76a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1f76e:	3b01      	subs	r3, #1
   1f770:	f88d 3017 	strb.w	r3, [sp, #23]
   1f774:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1f778:	2b01      	cmp	r3, #1
   1f77a:	d8dc      	bhi.n	1f736 <WsfBufInit+0xca>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1f77c:	4b13      	ldr	r3, [pc, #76]	; (1f7cc <WsfBufInit+0x160>)
   1f77e:	681a      	ldr	r2, [r3, #0]
   1f780:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f784:	08db      	lsrs	r3, r3, #3
   1f786:	b29b      	uxth	r3, r3
   1f788:	00db      	lsls	r3, r3, #3
   1f78a:	4413      	add	r3, r2
   1f78c:	9a06      	ldr	r2, [sp, #24]
   1f78e:	429a      	cmp	r2, r3
   1f790:	d901      	bls.n	1f796 <WsfBufInit+0x12a>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1f792:	2300      	movs	r3, #0
   1f794:	e016      	b.n	1f7c4 <WsfBufInit+0x158>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   1f796:	9b06      	ldr	r3, [sp, #24]
   1f798:	2200      	movs	r2, #0
   1f79a:	601a      	str	r2, [r3, #0]
    pStart += len;
   1f79c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f7a0:	00db      	lsls	r3, r3, #3
   1f7a2:	9a06      	ldr	r2, [sp, #24]
   1f7a4:	4413      	add	r3, r2
   1f7a6:	9306      	str	r3, [sp, #24]

    /* next pool */
    pPool++;
   1f7a8:	9b07      	ldr	r3, [sp, #28]
   1f7aa:	330c      	adds	r3, #12
   1f7ac:	9307      	str	r3, [sp, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1f7ae:	e77a      	b.n	1f6a6 <WsfBufInit+0x3a>
      break;
   1f7b0:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   1f7b2:	4b06      	ldr	r3, [pc, #24]	; (1f7cc <WsfBufInit+0x160>)
   1f7b4:	681b      	ldr	r3, [r3, #0]
   1f7b6:	9a06      	ldr	r2, [sp, #24]
   1f7b8:	1ad3      	subs	r3, r2, r3
   1f7ba:	b29a      	uxth	r2, r3
   1f7bc:	4b05      	ldr	r3, [pc, #20]	; (1f7d4 <WsfBufInit+0x168>)
   1f7be:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   1f7c0:	4b04      	ldr	r3, [pc, #16]	; (1f7d4 <WsfBufInit+0x168>)
   1f7c2:	881b      	ldrh	r3, [r3, #0]
}
   1f7c4:	4618      	mov	r0, r3
   1f7c6:	b008      	add	sp, #32
   1f7c8:	4770      	bx	lr
   1f7ca:	bf00      	nop
   1f7cc:	100051fc 	.word	0x100051fc
   1f7d0:	100051f8 	.word	0x100051f8
   1f7d4:	10005200 	.word	0x10005200

0001f7d8 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   1f7d8:	b500      	push	{lr}
   1f7da:	b087      	sub	sp, #28
   1f7dc:	4603      	mov	r3, r0
   1f7de:	f8ad 3006 	strh.w	r3, [sp, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
   1f7e2:	4b1a      	ldr	r3, [pc, #104]	; (1f84c <WsfBufAlloc+0x74>)
   1f7e4:	681b      	ldr	r3, [r3, #0]
   1f7e6:	9305      	str	r3, [sp, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1f7e8:	4b19      	ldr	r3, [pc, #100]	; (1f850 <WsfBufAlloc+0x78>)
   1f7ea:	781b      	ldrb	r3, [r3, #0]
   1f7ec:	f88d 3013 	strb.w	r3, [sp, #19]
   1f7f0:	e023      	b.n	1f83a <WsfBufAlloc+0x62>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   1f7f2:	9b05      	ldr	r3, [sp, #20]
   1f7f4:	881b      	ldrh	r3, [r3, #0]
   1f7f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1f7fa:	429a      	cmp	r2, r3
   1f7fc:	d815      	bhi.n	1f82a <WsfBufAlloc+0x52>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1f7fe:	f000 f8e5 	bl	1f9cc <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   1f802:	9b05      	ldr	r3, [sp, #20]
   1f804:	689b      	ldr	r3, [r3, #8]
   1f806:	2b00      	cmp	r3, #0
   1f808:	d00d      	beq.n	1f826 <WsfBufAlloc+0x4e>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
   1f80a:	9b05      	ldr	r3, [sp, #20]
   1f80c:	689b      	ldr	r3, [r3, #8]
   1f80e:	9303      	str	r3, [sp, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
   1f810:	9b03      	ldr	r3, [sp, #12]
   1f812:	681a      	ldr	r2, [r3, #0]
   1f814:	9b05      	ldr	r3, [sp, #20]
   1f816:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
   1f818:	9b03      	ldr	r3, [sp, #12]
   1f81a:	2200      	movs	r2, #0
   1f81c:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
   1f81e:	f000 f8e5 	bl	1f9ec <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
   1f822:	9b03      	ldr	r3, [sp, #12]
   1f824:	e00e      	b.n	1f844 <WsfBufAlloc+0x6c>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1f826:	f000 f8e1 	bl	1f9ec <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1f82a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f82e:	3b01      	subs	r3, #1
   1f830:	f88d 3013 	strb.w	r3, [sp, #19]
   1f834:	9b05      	ldr	r3, [sp, #20]
   1f836:	330c      	adds	r3, #12
   1f838:	9305      	str	r3, [sp, #20]
   1f83a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f83e:	2b00      	cmp	r3, #0
   1f840:	d1d7      	bne.n	1f7f2 <WsfBufAlloc+0x1a>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   1f842:	2300      	movs	r3, #0
}
   1f844:	4618      	mov	r0, r3
   1f846:	b007      	add	sp, #28
   1f848:	f85d fb04 	ldr.w	pc, [sp], #4
   1f84c:	100051fc 	.word	0x100051fc
   1f850:	100051f8 	.word	0x100051f8

0001f854 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   1f854:	b500      	push	{lr}
   1f856:	b085      	sub	sp, #20
   1f858:	9001      	str	r0, [sp, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
   1f85a:	9b01      	ldr	r3, [sp, #4]
   1f85c:	9302      	str	r3, [sp, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   1f85e:	4b16      	ldr	r3, [pc, #88]	; (1f8b8 <WsfBufFree+0x64>)
   1f860:	681a      	ldr	r2, [r3, #0]
   1f862:	4b16      	ldr	r3, [pc, #88]	; (1f8bc <WsfBufFree+0x68>)
   1f864:	781b      	ldrb	r3, [r3, #0]
   1f866:	4619      	mov	r1, r3
   1f868:	460b      	mov	r3, r1
   1f86a:	005b      	lsls	r3, r3, #1
   1f86c:	440b      	add	r3, r1
   1f86e:	009b      	lsls	r3, r3, #2
   1f870:	3b0c      	subs	r3, #12
   1f872:	4413      	add	r3, r2
   1f874:	9303      	str	r3, [sp, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1f876:	e016      	b.n	1f8a6 <WsfBufFree+0x52>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
   1f878:	9b03      	ldr	r3, [sp, #12]
   1f87a:	685b      	ldr	r3, [r3, #4]
   1f87c:	9a02      	ldr	r2, [sp, #8]
   1f87e:	429a      	cmp	r2, r3
   1f880:	d30e      	bcc.n	1f8a0 <WsfBufFree+0x4c>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1f882:	f000 f8a3 	bl	1f9cc <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
   1f886:	9b02      	ldr	r3, [sp, #8]
   1f888:	4a0d      	ldr	r2, [pc, #52]	; (1f8c0 <WsfBufFree+0x6c>)
   1f88a:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
   1f88c:	9b03      	ldr	r3, [sp, #12]
   1f88e:	689a      	ldr	r2, [r3, #8]
   1f890:	9b02      	ldr	r3, [sp, #8]
   1f892:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
   1f894:	9b03      	ldr	r3, [sp, #12]
   1f896:	9a02      	ldr	r2, [sp, #8]
   1f898:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1f89a:	f000 f8a7 	bl	1f9ec <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
   1f89e:	e008      	b.n	1f8b2 <WsfBufFree+0x5e>
    }

    /* next pool */
    pPool--;
   1f8a0:	9b03      	ldr	r3, [sp, #12]
   1f8a2:	3b0c      	subs	r3, #12
   1f8a4:	9303      	str	r3, [sp, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1f8a6:	4b04      	ldr	r3, [pc, #16]	; (1f8b8 <WsfBufFree+0x64>)
   1f8a8:	681b      	ldr	r3, [r3, #0]
   1f8aa:	9a03      	ldr	r2, [sp, #12]
   1f8ac:	429a      	cmp	r2, r3
   1f8ae:	d2e3      	bcs.n	1f878 <WsfBufFree+0x24>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
   1f8b0:	bf00      	nop
}
   1f8b2:	b005      	add	sp, #20
   1f8b4:	f85d fb04 	ldr.w	pc, [sp], #4
   1f8b8:	100051fc 	.word	0x100051fc
   1f8bc:	100051f8 	.word	0x100051f8
   1f8c0:	faabd00d 	.word	0xfaabd00d

0001f8c4 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
   1f8c4:	b500      	push	{lr}
   1f8c6:	b083      	sub	sp, #12
   1f8c8:	4603      	mov	r3, r0
   1f8ca:	460a      	mov	r2, r1
   1f8cc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f8d0:	4613      	mov	r3, r2
   1f8d2:	f88d 3005 	strb.w	r3, [sp, #5]
  return WsfMsgAlloc(len + tailroom);
   1f8d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1f8da:	b29a      	uxth	r2, r3
   1f8dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f8e0:	4413      	add	r3, r2
   1f8e2:	b29b      	uxth	r3, r3
   1f8e4:	4618      	mov	r0, r3
   1f8e6:	f000 f805 	bl	1f8f4 <WsfMsgAlloc>
   1f8ea:	4603      	mov	r3, r0
}
   1f8ec:	4618      	mov	r0, r3
   1f8ee:	b003      	add	sp, #12
   1f8f0:	f85d fb04 	ldr.w	pc, [sp], #4

0001f8f4 <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
   1f8f4:	b500      	push	{lr}
   1f8f6:	b085      	sub	sp, #20
   1f8f8:	4603      	mov	r3, r0
   1f8fa:	f8ad 3006 	strh.w	r3, [sp, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1f8fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f902:	3308      	adds	r3, #8
   1f904:	b29b      	uxth	r3, r3
   1f906:	4618      	mov	r0, r3
   1f908:	f7ff ff66 	bl	1f7d8 <WsfBufAlloc>
   1f90c:	9003      	str	r0, [sp, #12]

  /* hide header */
  if (pMsg != NULL)
   1f90e:	9b03      	ldr	r3, [sp, #12]
   1f910:	2b00      	cmp	r3, #0
   1f912:	d002      	beq.n	1f91a <WsfMsgAlloc+0x26>
  {
    pMsg++;
   1f914:	9b03      	ldr	r3, [sp, #12]
   1f916:	3308      	adds	r3, #8
   1f918:	9303      	str	r3, [sp, #12]
  }

  return pMsg;
   1f91a:	9b03      	ldr	r3, [sp, #12]
}
   1f91c:	4618      	mov	r0, r3
   1f91e:	b005      	add	sp, #20
   1f920:	f85d fb04 	ldr.w	pc, [sp], #4

0001f924 <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
   1f924:	b500      	push	{lr}
   1f926:	b083      	sub	sp, #12
   1f928:	9001      	str	r0, [sp, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   1f92a:	9b01      	ldr	r3, [sp, #4]
   1f92c:	3b08      	subs	r3, #8
   1f92e:	4618      	mov	r0, r3
   1f930:	f7ff ff90 	bl	1f854 <WsfBufFree>
}
   1f934:	bf00      	nop
   1f936:	b003      	add	sp, #12
   1f938:	f85d fb04 	ldr.w	pc, [sp], #4

0001f93c <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   1f93c:	b500      	push	{lr}
   1f93e:	b083      	sub	sp, #12
   1f940:	4603      	mov	r3, r0
   1f942:	9100      	str	r1, [sp, #0]
   1f944:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   1f948:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f94c:	4618      	mov	r0, r3
   1f94e:	f000 f905 	bl	1fb5c <WsfTaskMsgQueue>
   1f952:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f956:	9a00      	ldr	r2, [sp, #0]
   1f958:	4619      	mov	r1, r3
   1f95a:	f000 f80a 	bl	1f972 <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   1f95e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f962:	2101      	movs	r1, #1
   1f964:	4618      	mov	r0, r3
   1f966:	f000 f8d9 	bl	1fb1c <WsfTaskSetReady>
}
   1f96a:	bf00      	nop
   1f96c:	b003      	add	sp, #12
   1f96e:	f85d fb04 	ldr.w	pc, [sp], #4

0001f972 <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
   1f972:	b500      	push	{lr}
   1f974:	b087      	sub	sp, #28
   1f976:	9003      	str	r0, [sp, #12]
   1f978:	460b      	mov	r3, r1
   1f97a:	9201      	str	r2, [sp, #4]
   1f97c:	f88d 300b 	strb.w	r3, [sp, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
   1f980:	9b01      	ldr	r3, [sp, #4]
   1f982:	3b08      	subs	r3, #8
   1f984:	9305      	str	r3, [sp, #20]

  /* set handler ID */
  p->handlerId = handlerId;
   1f986:	9b05      	ldr	r3, [sp, #20]
   1f988:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1f98c:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
   1f98e:	9905      	ldr	r1, [sp, #20]
   1f990:	9803      	ldr	r0, [sp, #12]
   1f992:	f000 f9d3 	bl	1fd3c <WsfQueueEnq>
}
   1f996:	bf00      	nop
   1f998:	b007      	add	sp, #28
   1f99a:	f85d fb04 	ldr.w	pc, [sp], #4

0001f99e <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   1f99e:	b500      	push	{lr}
   1f9a0:	b085      	sub	sp, #20
   1f9a2:	9001      	str	r0, [sp, #4]
   1f9a4:	9100      	str	r1, [sp, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   1f9a6:	9801      	ldr	r0, [sp, #4]
   1f9a8:	f000 f9e9 	bl	1fd7e <WsfQueueDeq>
   1f9ac:	9003      	str	r0, [sp, #12]
   1f9ae:	9b03      	ldr	r3, [sp, #12]
   1f9b0:	2b00      	cmp	r3, #0
   1f9b2:	d006      	beq.n	1f9c2 <WsfMsgDeq+0x24>
  {
    *pHandlerId = pMsg->handlerId;
   1f9b4:	9b03      	ldr	r3, [sp, #12]
   1f9b6:	791a      	ldrb	r2, [r3, #4]
   1f9b8:	9b00      	ldr	r3, [sp, #0]
   1f9ba:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
   1f9bc:	9b03      	ldr	r3, [sp, #12]
   1f9be:	3308      	adds	r3, #8
   1f9c0:	9303      	str	r3, [sp, #12]
  }

  return pMsg;
   1f9c2:	9b03      	ldr	r3, [sp, #12]
}
   1f9c4:	4618      	mov	r0, r3
   1f9c6:	b005      	add	sp, #20
   1f9c8:	f85d fb04 	ldr.w	pc, [sp], #4

0001f9cc <WsfCsEnter>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
  if (csNesting == 0)
   1f9cc:	4b06      	ldr	r3, [pc, #24]	; (1f9e8 <WsfCsEnter+0x1c>)
   1f9ce:	781b      	ldrb	r3, [r3, #0]
   1f9d0:	2b00      	cmp	r3, #0
   1f9d2:	d100      	bne.n	1f9d6 <WsfCsEnter+0xa>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   1f9d4:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   1f9d6:	4b04      	ldr	r3, [pc, #16]	; (1f9e8 <WsfCsEnter+0x1c>)
   1f9d8:	781b      	ldrb	r3, [r3, #0]
   1f9da:	3301      	adds	r3, #1
   1f9dc:	b2da      	uxtb	r2, r3
   1f9de:	4b02      	ldr	r3, [pc, #8]	; (1f9e8 <WsfCsEnter+0x1c>)
   1f9e0:	701a      	strb	r2, [r3, #0]
}
   1f9e2:	bf00      	nop
   1f9e4:	4770      	bx	lr
   1f9e6:	bf00      	nop
   1f9e8:	10005202 	.word	0x10005202

0001f9ec <WsfCsExit>:
/*************************************************************************************************/
void WsfCsExit(void)
{
  WSF_ASSERT(csNesting != 0);

  csNesting--;
   1f9ec:	4b06      	ldr	r3, [pc, #24]	; (1fa08 <WsfCsExit+0x1c>)
   1f9ee:	781b      	ldrb	r3, [r3, #0]
   1f9f0:	3b01      	subs	r3, #1
   1f9f2:	b2da      	uxtb	r2, r3
   1f9f4:	4b04      	ldr	r3, [pc, #16]	; (1fa08 <WsfCsExit+0x1c>)
   1f9f6:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
   1f9f8:	4b03      	ldr	r3, [pc, #12]	; (1fa08 <WsfCsExit+0x1c>)
   1f9fa:	781b      	ldrb	r3, [r3, #0]
   1f9fc:	2b00      	cmp	r3, #0
   1f9fe:	d100      	bne.n	1fa02 <WsfCsExit+0x16>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
   1fa00:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
   1fa02:	bf00      	nop
   1fa04:	4770      	bx	lr
   1fa06:	bf00      	nop
   1fa08:	10005202 	.word	0x10005202

0001fa0c <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
   1fa0c:	b508      	push	{r3, lr}
  WsfCsEnter();
   1fa0e:	f7ff ffdd 	bl	1f9cc <WsfCsEnter>
}
   1fa12:	bf00      	nop
   1fa14:	bd08      	pop	{r3, pc}

0001fa16 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
   1fa16:	b508      	push	{r3, lr}
  WsfCsExit();
   1fa18:	f7ff ffe8 	bl	1f9ec <WsfCsExit>
}
   1fa1c:	bf00      	nop
   1fa1e:	bd08      	pop	{r3, pc}

0001fa20 <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
   1fa20:	b500      	push	{lr}
   1fa22:	b085      	sub	sp, #20
  if(xRadioTaskEventObject != NULL) 
   1fa24:	4b20      	ldr	r3, [pc, #128]	; (1faa8 <WsfSetOsSpecificEvent+0x88>)
   1fa26:	681b      	ldr	r3, [r3, #0]
   1fa28:	2b00      	cmp	r3, #0
   1fa2a:	d039      	beq.n	1faa0 <WsfSetOsSpecificEvent+0x80>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   1fa2c:	f3ef 8305 	mrs	r3, IPSR
   1fa30:	9302      	str	r3, [sp, #8]
	if( ulCurrentInterrupt == 0 )
   1fa32:	9b02      	ldr	r3, [sp, #8]
   1fa34:	2b00      	cmp	r3, #0
   1fa36:	d102      	bne.n	1fa3e <WsfSetOsSpecificEvent+0x1e>
		xReturn = pdFALSE;
   1fa38:	2300      	movs	r3, #0
   1fa3a:	9301      	str	r3, [sp, #4]
   1fa3c:	e001      	b.n	1fa42 <WsfSetOsSpecificEvent+0x22>
		xReturn = pdTRUE;
   1fa3e:	2301      	movs	r3, #1
   1fa40:	9301      	str	r3, [sp, #4]
	return xReturn;
   1fa42:	9b01      	ldr	r3, [sp, #4]
  {

      BaseType_t xHigherPriorityTaskWoken, xResult;

      if(xPortIsInsideInterrupt() == pdTRUE) {
   1fa44:	2b01      	cmp	r3, #1
   1fa46:	d118      	bne.n	1fa7a <WsfSetOsSpecificEvent+0x5a>

          //
          // Send an event to the main radio task
          //
          xHigherPriorityTaskWoken = pdFALSE;
   1fa48:	2300      	movs	r3, #0
   1fa4a:	9300      	str	r3, [sp, #0]

          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1fa4c:	4b16      	ldr	r3, [pc, #88]	; (1faa8 <WsfSetOsSpecificEvent+0x88>)
   1fa4e:	6819      	ldr	r1, [r3, #0]
   1fa50:	466b      	mov	r3, sp
   1fa52:	2201      	movs	r2, #1
   1fa54:	4815      	ldr	r0, [pc, #84]	; (1faac <WsfSetOsSpecificEvent+0x8c>)
   1fa56:	f003 ff49 	bl	238ec <xTimerPendFunctionCallFromISR>
   1fa5a:	9003      	str	r0, [sp, #12]

          //
          // If the radio task is higher-priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
   1fa5c:	9b03      	ldr	r3, [sp, #12]
   1fa5e:	2b00      	cmp	r3, #0
   1fa60:	d01e      	beq.n	1faa0 <WsfSetOsSpecificEvent+0x80>
          {
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1fa62:	9b00      	ldr	r3, [sp, #0]
   1fa64:	2b00      	cmp	r3, #0
   1fa66:	d01b      	beq.n	1faa0 <WsfSetOsSpecificEvent+0x80>
   1fa68:	4b11      	ldr	r3, [pc, #68]	; (1fab0 <WsfSetOsSpecificEvent+0x90>)
   1fa6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fa6e:	601a      	str	r2, [r3, #0]
   1fa70:	f3bf 8f4f 	dsb	sy
   1fa74:	f3bf 8f6f 	isb	sy
              portYIELD();
          }
      }

  }    
}
   1fa78:	e012      	b.n	1faa0 <WsfSetOsSpecificEvent+0x80>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   1fa7a:	4b0b      	ldr	r3, [pc, #44]	; (1faa8 <WsfSetOsSpecificEvent+0x88>)
   1fa7c:	681b      	ldr	r3, [r3, #0]
   1fa7e:	2101      	movs	r1, #1
   1fa80:	4618      	mov	r0, r3
   1fa82:	f002 f8b1 	bl	21be8 <xEventGroupSetBits>
   1fa86:	4603      	mov	r3, r0
   1fa88:	9303      	str	r3, [sp, #12]
          if ( xResult != pdFAIL )
   1fa8a:	9b03      	ldr	r3, [sp, #12]
   1fa8c:	2b00      	cmp	r3, #0
   1fa8e:	d007      	beq.n	1faa0 <WsfSetOsSpecificEvent+0x80>
              portYIELD();
   1fa90:	4b07      	ldr	r3, [pc, #28]	; (1fab0 <WsfSetOsSpecificEvent+0x90>)
   1fa92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fa96:	601a      	str	r2, [r3, #0]
   1fa98:	f3bf 8f4f 	dsb	sy
   1fa9c:	f3bf 8f6f 	isb	sy
}
   1faa0:	bf00      	nop
   1faa2:	b005      	add	sp, #20
   1faa4:	f85d fb04 	ldr.w	pc, [sp], #4
   1faa8:	10005240 	.word	0x10005240
   1faac:	00021cd5 	.word	0x00021cd5
   1fab0:	e000ed04 	.word	0xe000ed04

0001fab4 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   1fab4:	b500      	push	{lr}
   1fab6:	b083      	sub	sp, #12
   1fab8:	4603      	mov	r3, r0
   1faba:	460a      	mov	r2, r1
   1fabc:	f88d 3007 	strb.w	r3, [sp, #7]
   1fac0:	4613      	mov	r3, r2
   1fac2:	f88d 3006 	strb.w	r3, [sp, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
   1fac6:	f7ff ff81 	bl	1f9cc <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1faca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1face:	f003 030f 	and.w	r3, r3, #15
   1fad2:	4a11      	ldr	r2, [pc, #68]	; (1fb18 <WsfSetEvent+0x64>)
   1fad4:	4413      	add	r3, r2
   1fad6:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1fada:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1fade:	f003 030f 	and.w	r3, r3, #15
   1fae2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1fae6:	430a      	orrs	r2, r1
   1fae8:	b2d1      	uxtb	r1, r2
   1faea:	4a0b      	ldr	r2, [pc, #44]	; (1fb18 <WsfSetEvent+0x64>)
   1faec:	4413      	add	r3, r2
   1faee:	460a      	mov	r2, r1
   1faf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1faf4:	4b08      	ldr	r3, [pc, #32]	; (1fb18 <WsfSetEvent+0x64>)
   1faf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1fafa:	f043 0304 	orr.w	r3, r3, #4
   1fafe:	b2da      	uxtb	r2, r3
   1fb00:	4b05      	ldr	r3, [pc, #20]	; (1fb18 <WsfSetEvent+0x64>)
   1fb02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   1fb06:	f7ff ff71 	bl	1f9ec <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1fb0a:	f7ff ff89 	bl	1fa20 <WsfSetOsSpecificEvent>
}
   1fb0e:	bf00      	nop
   1fb10:	b003      	add	sp, #12
   1fb12:	f85d fb04 	ldr.w	pc, [sp], #4
   1fb16:	bf00      	nop
   1fb18:	10005204 	.word	0x10005204

0001fb1c <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
   1fb1c:	b500      	push	{lr}
   1fb1e:	b083      	sub	sp, #12
   1fb20:	4603      	mov	r3, r0
   1fb22:	460a      	mov	r2, r1
   1fb24:	f88d 3007 	strb.w	r3, [sp, #7]
   1fb28:	4613      	mov	r3, r2
   1fb2a:	f88d 3006 	strb.w	r3, [sp, #6]
  /* Unused parameter */
  (void)handlerId;

  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
   1fb2e:	f7ff ff4d 	bl	1f9cc <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
   1fb32:	4b09      	ldr	r3, [pc, #36]	; (1fb58 <WsfTaskSetReady+0x3c>)
   1fb34:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1fb38:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1fb3c:	4313      	orrs	r3, r2
   1fb3e:	b2da      	uxtb	r2, r3
   1fb40:	4b05      	ldr	r3, [pc, #20]	; (1fb58 <WsfTaskSetReady+0x3c>)
   1fb42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   1fb46:	f7ff ff51 	bl	1f9ec <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1fb4a:	f7ff ff69 	bl	1fa20 <WsfSetOsSpecificEvent>
}
   1fb4e:	bf00      	nop
   1fb50:	b003      	add	sp, #12
   1fb52:	f85d fb04 	ldr.w	pc, [sp], #4
   1fb56:	bf00      	nop
   1fb58:	10005204 	.word	0x10005204

0001fb5c <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
   1fb5c:	b082      	sub	sp, #8
   1fb5e:	4603      	mov	r3, r0
   1fb60:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Unused parameter */
  (void)handlerId;

  return &(wsfOs.task.msgQueue);
   1fb64:	4b01      	ldr	r3, [pc, #4]	; (1fb6c <WsfTaskMsgQueue+0x10>)
}
   1fb66:	4618      	mov	r0, r3
   1fb68:	b002      	add	sp, #8
   1fb6a:	4770      	bx	lr
   1fb6c:	10005234 	.word	0x10005234

0001fb70 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
   1fb70:	b084      	sub	sp, #16
   1fb72:	9001      	str	r0, [sp, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   1fb74:	4b0a      	ldr	r3, [pc, #40]	; (1fba0 <WsfOsSetNextHandler+0x30>)
   1fb76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   1fb7a:	1c5a      	adds	r2, r3, #1
   1fb7c:	b2d1      	uxtb	r1, r2
   1fb7e:	4a08      	ldr	r2, [pc, #32]	; (1fba0 <WsfOsSetNextHandler+0x30>)
   1fb80:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
   1fb84:	f88d 300f 	strb.w	r3, [sp, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   1fb88:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1fb8c:	4904      	ldr	r1, [pc, #16]	; (1fba0 <WsfOsSetNextHandler+0x30>)
   1fb8e:	9a01      	ldr	r2, [sp, #4]
   1fb90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
   1fb94:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1fb98:	4618      	mov	r0, r3
   1fb9a:	b004      	add	sp, #16
   1fb9c:	4770      	bx	lr
   1fb9e:	bf00      	nop
   1fba0:	10005204 	.word	0x10005204

0001fba4 <wsfOsReadyToSleep>:
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
  return (wsfOs.task.taskEventMask == 0);
   1fba4:	4b04      	ldr	r3, [pc, #16]	; (1fbb8 <wsfOsReadyToSleep+0x14>)
   1fba6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1fbaa:	2b00      	cmp	r3, #0
   1fbac:	bf0c      	ite	eq
   1fbae:	2301      	moveq	r3, #1
   1fbb0:	2300      	movne	r3, #0
   1fbb2:	b2db      	uxtb	r3, r3
}
   1fbb4:	4618      	mov	r0, r3
   1fbb6:	4770      	bx	lr
   1fbb8:	10005204 	.word	0x10005204

0001fbbc <WsfOsInit>:
*
*  \return None.
*/
/*************************************************************************************************/
void WsfOsInit(void)
{
   1fbbc:	b508      	push	{r3, lr}
  memset(&wsfOs, 0, sizeof(wsfOs));
   1fbbe:	223c      	movs	r2, #60	; 0x3c
   1fbc0:	2100      	movs	r1, #0
   1fbc2:	4807      	ldr	r0, [pc, #28]	; (1fbe0 <WsfOsInit+0x24>)
   1fbc4:	f005 fd7a 	bl	256bc <memset>

  if( xRadioTaskEventObject == NULL)
   1fbc8:	4b06      	ldr	r3, [pc, #24]	; (1fbe4 <WsfOsInit+0x28>)
   1fbca:	681b      	ldr	r3, [r3, #0]
   1fbcc:	2b00      	cmp	r3, #0
   1fbce:	d104      	bne.n	1fbda <WsfOsInit+0x1e>
  {
    xRadioTaskEventObject = xEventGroupCreate();
   1fbd0:	f001 ff4e 	bl	21a70 <xEventGroupCreate>
   1fbd4:	4603      	mov	r3, r0
   1fbd6:	4a03      	ldr	r2, [pc, #12]	; (1fbe4 <WsfOsInit+0x28>)
   1fbd8:	6013      	str	r3, [r2, #0]

    WSF_ASSERT(xRadioTaskEventObject != NULL);
  }
}
   1fbda:	bf00      	nop
   1fbdc:	bd08      	pop	{r3, pc}
   1fbde:	bf00      	nop
   1fbe0:	10005204 	.word	0x10005204
   1fbe4:	10005240 	.word	0x10005240

0001fbe8 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   1fbe8:	b500      	push	{lr}
   1fbea:	b089      	sub	sp, #36	; 0x24
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
   1fbec:	4b51      	ldr	r3, [pc, #324]	; (1fd34 <wsfOsDispatcher+0x14c>)
   1fbee:	9306      	str	r3, [sp, #24]

  WsfTimerUpdateTicks();
   1fbf0:	f000 fac2 	bl	20178 <WsfTimerUpdateTicks>

  while (pTask->taskEventMask)
   1fbf4:	e083      	b.n	1fcfe <wsfOsDispatcher+0x116>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
   1fbf6:	f7ff fee9 	bl	1f9cc <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
   1fbfa:	9b06      	ldr	r3, [sp, #24]
   1fbfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1fc00:	f88d 3017 	strb.w	r3, [sp, #23]
    pTask->taskEventMask = 0;
   1fc04:	9b06      	ldr	r3, [sp, #24]
   1fc06:	2200      	movs	r2, #0
   1fc08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
   1fc0c:	f7ff feee 	bl	1f9ec <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   1fc10:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1fc14:	f003 0301 	and.w	r3, r3, #1
   1fc18:	2b00      	cmp	r3, #0
   1fc1a:	d018      	beq.n	1fc4e <wsfOsDispatcher+0x66>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1fc1c:	e00b      	b.n	1fc36 <wsfOsDispatcher+0x4e>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
   1fc1e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1fc22:	461a      	mov	r2, r3
   1fc24:	9b06      	ldr	r3, [sp, #24]
   1fc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1fc2a:	9904      	ldr	r1, [sp, #16]
   1fc2c:	2000      	movs	r0, #0
   1fc2e:	4798      	blx	r3
        WsfMsgFree(pMsg);
   1fc30:	9804      	ldr	r0, [sp, #16]
   1fc32:	f7ff fe77 	bl	1f924 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1fc36:	9b06      	ldr	r3, [sp, #24]
   1fc38:	3330      	adds	r3, #48	; 0x30
   1fc3a:	f10d 020a 	add.w	r2, sp, #10
   1fc3e:	4611      	mov	r1, r2
   1fc40:	4618      	mov	r0, r3
   1fc42:	f7ff feac 	bl	1f99e <WsfMsgDeq>
   1fc46:	9004      	str	r0, [sp, #16]
   1fc48:	9b04      	ldr	r3, [sp, #16]
   1fc4a:	2b00      	cmp	r3, #0
   1fc4c:	d1e7      	bne.n	1fc1e <wsfOsDispatcher+0x36>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   1fc4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1fc52:	f003 0302 	and.w	r3, r3, #2
   1fc56:	2b00      	cmp	r3, #0
   1fc58:	d012      	beq.n	1fc80 <wsfOsDispatcher+0x98>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   1fc5a:	e00a      	b.n	1fc72 <wsfOsDispatcher+0x8a>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   1fc5c:	9b03      	ldr	r3, [sp, #12]
   1fc5e:	7b1b      	ldrb	r3, [r3, #12]
   1fc60:	461a      	mov	r2, r3
   1fc62:	9b06      	ldr	r3, [sp, #24]
   1fc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1fc68:	9a03      	ldr	r2, [sp, #12]
   1fc6a:	3208      	adds	r2, #8
   1fc6c:	4611      	mov	r1, r2
   1fc6e:	2000      	movs	r0, #0
   1fc70:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   1fc72:	2000      	movs	r0, #0
   1fc74:	f000 fa58 	bl	20128 <WsfTimerServiceExpired>
   1fc78:	9003      	str	r0, [sp, #12]
   1fc7a:	9b03      	ldr	r3, [sp, #12]
   1fc7c:	2b00      	cmp	r3, #0
   1fc7e:	d1ed      	bne.n	1fc5c <wsfOsDispatcher+0x74>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   1fc80:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1fc84:	f003 0304 	and.w	r3, r3, #4
   1fc88:	2b00      	cmp	r3, #0
   1fc8a:	d038      	beq.n	1fcfe <wsfOsDispatcher+0x116>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   1fc8c:	2300      	movs	r3, #0
   1fc8e:	f88d 301f 	strb.w	r3, [sp, #31]
   1fc92:	e030      	b.n	1fcf6 <wsfOsDispatcher+0x10e>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   1fc94:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1fc98:	9a06      	ldr	r2, [sp, #24]
   1fc9a:	4413      	add	r3, r2
   1fc9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1fca0:	2b00      	cmp	r3, #0
   1fca2:	d023      	beq.n	1fcec <wsfOsDispatcher+0x104>
   1fca4:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1fca8:	9b06      	ldr	r3, [sp, #24]
   1fcaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1fcae:	2b00      	cmp	r3, #0
   1fcb0:	d01c      	beq.n	1fcec <wsfOsDispatcher+0x104>
        {
          WSF_CS_ENTER(cs);
   1fcb2:	f7ff fe8b 	bl	1f9cc <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
   1fcb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1fcba:	9a06      	ldr	r2, [sp, #24]
   1fcbc:	4413      	add	r3, r2
   1fcbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1fcc2:	f88d 300b 	strb.w	r3, [sp, #11]
          pTask->handlerEventMask[i] = 0;
   1fcc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1fcca:	9a06      	ldr	r2, [sp, #24]
   1fccc:	4413      	add	r3, r2
   1fcce:	2200      	movs	r2, #0
   1fcd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
   1fcd4:	f7ff fe8a 	bl	1f9ec <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
   1fcd8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1fcdc:	9b06      	ldr	r3, [sp, #24]
   1fcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1fce2:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1fce6:	2100      	movs	r1, #0
   1fce8:	4610      	mov	r0, r2
   1fcea:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   1fcec:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1fcf0:	3301      	adds	r3, #1
   1fcf2:	f88d 301f 	strb.w	r3, [sp, #31]
   1fcf6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1fcfa:	2b08      	cmp	r3, #8
   1fcfc:	d9ca      	bls.n	1fc94 <wsfOsDispatcher+0xac>
  while (pTask->taskEventMask)
   1fcfe:	9b06      	ldr	r3, [sp, #24]
   1fd00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1fd04:	2b00      	cmp	r3, #0
   1fd06:	f47f af76 	bne.w	1fbf6 <wsfOsDispatcher+0xe>
        }
      }
    }
  }

  WsfTimerUpdateTicks();
   1fd0a:	f000 fa35 	bl	20178 <WsfTimerUpdateTicks>

  if (wsfOsReadyToSleep())
   1fd0e:	f7ff ff49 	bl	1fba4 <wsfOsReadyToSleep>
   1fd12:	4603      	mov	r3, r0
   1fd14:	2b00      	cmp	r3, #0
   1fd16:	d009      	beq.n	1fd2c <wsfOsDispatcher+0x144>
  {
    xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
   1fd18:	4b07      	ldr	r3, [pc, #28]	; (1fd38 <wsfOsDispatcher+0x150>)
   1fd1a:	6818      	ldr	r0, [r3, #0]
   1fd1c:	f04f 33ff 	mov.w	r3, #4294967295
   1fd20:	9300      	str	r3, [sp, #0]
   1fd22:	2300      	movs	r3, #0
   1fd24:	2201      	movs	r2, #1
   1fd26:	2101      	movs	r1, #1
   1fd28:	f001 feb8 	bl	21a9c <xEventGroupWaitBits>
                      pdFALSE, portMAX_DELAY);
  }

}
   1fd2c:	bf00      	nop
   1fd2e:	b009      	add	sp, #36	; 0x24
   1fd30:	f85d fb04 	ldr.w	pc, [sp], #4
   1fd34:	10005204 	.word	0x10005204
   1fd38:	10005240 	.word	0x10005240

0001fd3c <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   1fd3c:	b500      	push	{lr}
   1fd3e:	b083      	sub	sp, #12
   1fd40:	9001      	str	r0, [sp, #4]
   1fd42:	9100      	str	r1, [sp, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   1fd44:	9b00      	ldr	r3, [sp, #0]
   1fd46:	2200      	movs	r2, #0
   1fd48:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1fd4a:	f7ff fe3f 	bl	1f9cc <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   1fd4e:	9b01      	ldr	r3, [sp, #4]
   1fd50:	681b      	ldr	r3, [r3, #0]
   1fd52:	2b00      	cmp	r3, #0
   1fd54:	d106      	bne.n	1fd64 <WsfQueueEnq+0x28>
  {
    pQueue->pHead = pElem;
   1fd56:	9b01      	ldr	r3, [sp, #4]
   1fd58:	9a00      	ldr	r2, [sp, #0]
   1fd5a:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   1fd5c:	9b01      	ldr	r3, [sp, #4]
   1fd5e:	9a00      	ldr	r2, [sp, #0]
   1fd60:	605a      	str	r2, [r3, #4]
   1fd62:	e006      	b.n	1fd72 <WsfQueueEnq+0x36>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   1fd64:	9b01      	ldr	r3, [sp, #4]
   1fd66:	685b      	ldr	r3, [r3, #4]
   1fd68:	9a00      	ldr	r2, [sp, #0]
   1fd6a:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   1fd6c:	9b01      	ldr	r3, [sp, #4]
   1fd6e:	9a00      	ldr	r2, [sp, #0]
   1fd70:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1fd72:	f7ff fe3b 	bl	1f9ec <WsfCsExit>
}
   1fd76:	bf00      	nop
   1fd78:	b003      	add	sp, #12
   1fd7a:	f85d fb04 	ldr.w	pc, [sp], #4

0001fd7e <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   1fd7e:	b500      	push	{lr}
   1fd80:	b085      	sub	sp, #20
   1fd82:	9001      	str	r0, [sp, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1fd84:	f7ff fe22 	bl	1f9cc <WsfCsEnter>

  pElem = pQueue->pHead;
   1fd88:	9b01      	ldr	r3, [sp, #4]
   1fd8a:	681b      	ldr	r3, [r3, #0]
   1fd8c:	9303      	str	r3, [sp, #12]

  /* if queue is not empty */
  if (pElem != NULL)
   1fd8e:	9b03      	ldr	r3, [sp, #12]
   1fd90:	2b00      	cmp	r3, #0
   1fd92:	d00a      	beq.n	1fdaa <WsfQueueDeq+0x2c>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1fd94:	9b03      	ldr	r3, [sp, #12]
   1fd96:	681a      	ldr	r2, [r3, #0]
   1fd98:	9b01      	ldr	r3, [sp, #4]
   1fd9a:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   1fd9c:	9b01      	ldr	r3, [sp, #4]
   1fd9e:	681b      	ldr	r3, [r3, #0]
   1fda0:	2b00      	cmp	r3, #0
   1fda2:	d102      	bne.n	1fdaa <WsfQueueDeq+0x2c>
    {
      pQueue->pTail = NULL;
   1fda4:	9b01      	ldr	r3, [sp, #4]
   1fda6:	2200      	movs	r2, #0
   1fda8:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1fdaa:	f7ff fe1f 	bl	1f9ec <WsfCsExit>

  return pElem;
   1fdae:	9b03      	ldr	r3, [sp, #12]
}
   1fdb0:	4618      	mov	r0, r3
   1fdb2:	b005      	add	sp, #20
   1fdb4:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdb8 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
   1fdb8:	b500      	push	{lr}
   1fdba:	b083      	sub	sp, #12
   1fdbc:	9001      	str	r0, [sp, #4]
   1fdbe:	9100      	str	r1, [sp, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1fdc0:	f7ff fe04 	bl	1f9cc <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   1fdc4:	9b01      	ldr	r3, [sp, #4]
   1fdc6:	681a      	ldr	r2, [r3, #0]
   1fdc8:	9b00      	ldr	r3, [sp, #0]
   1fdca:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
   1fdcc:	9b01      	ldr	r3, [sp, #4]
   1fdce:	681b      	ldr	r3, [r3, #0]
   1fdd0:	2b00      	cmp	r3, #0
   1fdd2:	d102      	bne.n	1fdda <WsfQueuePush+0x22>
  {
    pQueue->pTail = pElem;
   1fdd4:	9b01      	ldr	r3, [sp, #4]
   1fdd6:	9a00      	ldr	r2, [sp, #0]
   1fdd8:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
   1fdda:	9b01      	ldr	r3, [sp, #4]
   1fddc:	9a00      	ldr	r2, [sp, #0]
   1fdde:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1fde0:	f7ff fe04 	bl	1f9ec <WsfCsExit>
}
   1fde4:	bf00      	nop
   1fde6:	b003      	add	sp, #12
   1fde8:	f85d fb04 	ldr.w	pc, [sp], #4

0001fdec <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1fdec:	b500      	push	{lr}
   1fdee:	b085      	sub	sp, #20
   1fdf0:	9003      	str	r0, [sp, #12]
   1fdf2:	9102      	str	r1, [sp, #8]
   1fdf4:	9201      	str	r2, [sp, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1fdf6:	f7ff fde9 	bl	1f9cc <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   1fdfa:	9b03      	ldr	r3, [sp, #12]
   1fdfc:	681b      	ldr	r3, [r3, #0]
   1fdfe:	2b00      	cmp	r3, #0
   1fe00:	d004      	beq.n	1fe0c <WsfQueueInsert+0x20>
   1fe02:	9b03      	ldr	r3, [sp, #12]
   1fe04:	685b      	ldr	r3, [r3, #4]
   1fe06:	9a01      	ldr	r2, [sp, #4]
   1fe08:	429a      	cmp	r2, r3
   1fe0a:	d104      	bne.n	1fe16 <WsfQueueInsert+0x2a>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
   1fe0c:	9902      	ldr	r1, [sp, #8]
   1fe0e:	9803      	ldr	r0, [sp, #12]
   1fe10:	f7ff ff94 	bl	1fd3c <WsfQueueEnq>
   1fe14:	e00e      	b.n	1fe34 <WsfQueueInsert+0x48>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   1fe16:	9b01      	ldr	r3, [sp, #4]
   1fe18:	2b00      	cmp	r3, #0
   1fe1a:	d104      	bne.n	1fe26 <WsfQueueInsert+0x3a>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
   1fe1c:	9902      	ldr	r1, [sp, #8]
   1fe1e:	9803      	ldr	r0, [sp, #12]
   1fe20:	f7ff ffca 	bl	1fdb8 <WsfQueuePush>
   1fe24:	e006      	b.n	1fe34 <WsfQueueInsert+0x48>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   1fe26:	9b01      	ldr	r3, [sp, #4]
   1fe28:	681a      	ldr	r2, [r3, #0]
   1fe2a:	9b02      	ldr	r3, [sp, #8]
   1fe2c:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   1fe2e:	9b01      	ldr	r3, [sp, #4]
   1fe30:	9a02      	ldr	r2, [sp, #8]
   1fe32:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1fe34:	f7ff fdda 	bl	1f9ec <WsfCsExit>
}
   1fe38:	bf00      	nop
   1fe3a:	b005      	add	sp, #20
   1fe3c:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe40 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1fe40:	b500      	push	{lr}
   1fe42:	b085      	sub	sp, #20
   1fe44:	9003      	str	r0, [sp, #12]
   1fe46:	9102      	str	r1, [sp, #8]
   1fe48:	9201      	str	r2, [sp, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1fe4a:	f7ff fdbf 	bl	1f9cc <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   1fe4e:	9b03      	ldr	r3, [sp, #12]
   1fe50:	681b      	ldr	r3, [r3, #0]
   1fe52:	9a02      	ldr	r2, [sp, #8]
   1fe54:	429a      	cmp	r2, r3
   1fe56:	d104      	bne.n	1fe62 <WsfQueueRemove+0x22>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1fe58:	9b02      	ldr	r3, [sp, #8]
   1fe5a:	681a      	ldr	r2, [r3, #0]
   1fe5c:	9b03      	ldr	r3, [sp, #12]
   1fe5e:	601a      	str	r2, [r3, #0]
   1fe60:	e006      	b.n	1fe70 <WsfQueueRemove+0x30>
  }
  else if (pPrev)
   1fe62:	9b01      	ldr	r3, [sp, #4]
   1fe64:	2b00      	cmp	r3, #0
   1fe66:	d003      	beq.n	1fe70 <WsfQueueRemove+0x30>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   1fe68:	9b02      	ldr	r3, [sp, #8]
   1fe6a:	681a      	ldr	r2, [r3, #0]
   1fe6c:	9b01      	ldr	r3, [sp, #4]
   1fe6e:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   1fe70:	9b03      	ldr	r3, [sp, #12]
   1fe72:	685b      	ldr	r3, [r3, #4]
   1fe74:	9a02      	ldr	r2, [sp, #8]
   1fe76:	429a      	cmp	r2, r3
   1fe78:	d102      	bne.n	1fe80 <WsfQueueRemove+0x40>
  {
    /* update tail */
    pQueue->pTail = pPrev;
   1fe7a:	9b03      	ldr	r3, [sp, #12]
   1fe7c:	9a01      	ldr	r2, [sp, #4]
   1fe7e:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1fe80:	f7ff fdb4 	bl	1f9ec <WsfCsExit>
}
   1fe84:	bf00      	nop
   1fe86:	b005      	add	sp, #20
   1fe88:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe8c <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   1fe8c:	b500      	push	{lr}
   1fe8e:	b085      	sub	sp, #20
   1fe90:	9001      	str	r0, [sp, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
   1fe92:	2300      	movs	r3, #0
   1fe94:	f8ad 300a 	strh.w	r3, [sp, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1fe98:	f7ff fd98 	bl	1f9cc <WsfCsEnter>

  pElem = pQueue->pHead;
   1fe9c:	9b01      	ldr	r3, [sp, #4]
   1fe9e:	681b      	ldr	r3, [r3, #0]
   1fea0:	9303      	str	r3, [sp, #12]

  /* iterate over queue */
  while (pElem != NULL)
   1fea2:	e007      	b.n	1feb4 <WsfQueueCount+0x28>
  {
    count++;
   1fea4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1fea8:	3301      	adds	r3, #1
   1feaa:	f8ad 300a 	strh.w	r3, [sp, #10]
    pElem = pElem->pNext;
   1feae:	9b03      	ldr	r3, [sp, #12]
   1feb0:	681b      	ldr	r3, [r3, #0]
   1feb2:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   1feb4:	9b03      	ldr	r3, [sp, #12]
   1feb6:	2b00      	cmp	r3, #0
   1feb8:	d1f4      	bne.n	1fea4 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1feba:	f7ff fd97 	bl	1f9ec <WsfCsExit>

  return count;
   1febe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
}
   1fec2:	4618      	mov	r0, r3
   1fec4:	b005      	add	sp, #20
   1fec6:	f85d fb04 	ldr.w	pc, [sp], #4

0001feca <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   1feca:	b500      	push	{lr}
   1fecc:	b085      	sub	sp, #20
   1fece:	9001      	str	r0, [sp, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1fed0:	f7ff fd7c 	bl	1f9cc <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   1fed4:	9b01      	ldr	r3, [sp, #4]
   1fed6:	681b      	ldr	r3, [r3, #0]
   1fed8:	2b00      	cmp	r3, #0
   1feda:	bf0c      	ite	eq
   1fedc:	2301      	moveq	r3, #1
   1fede:	2300      	movne	r3, #0
   1fee0:	b2db      	uxtb	r3, r3
   1fee2:	f88d 300f 	strb.w	r3, [sp, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1fee6:	f7ff fd81 	bl	1f9ec <WsfCsExit>

  return empty;
   1feea:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1feee:	4618      	mov	r0, r3
   1fef0:	b005      	add	sp, #20
   1fef2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001fef8 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
   1fef8:	b500      	push	{lr}
   1fefa:	b085      	sub	sp, #20
   1fefc:	9001      	str	r0, [sp, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1fefe:	2300      	movs	r3, #0
   1ff00:	9302      	str	r3, [sp, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1ff02:	4b10      	ldr	r3, [pc, #64]	; (1ff44 <wsfTimerRemove+0x4c>)
   1ff04:	681b      	ldr	r3, [r3, #0]
   1ff06:	9303      	str	r3, [sp, #12]

  /* find timer in queue */
  while (pElem != NULL)
   1ff08:	e008      	b.n	1ff1c <wsfTimerRemove+0x24>
  {
    if (pElem == pTimer)
   1ff0a:	9a03      	ldr	r2, [sp, #12]
   1ff0c:	9b01      	ldr	r3, [sp, #4]
   1ff0e:	429a      	cmp	r2, r3
   1ff10:	d008      	beq.n	1ff24 <wsfTimerRemove+0x2c>
    {
      break;
    }
    pPrev = pElem;
   1ff12:	9b03      	ldr	r3, [sp, #12]
   1ff14:	9302      	str	r3, [sp, #8]
    pElem = pElem->pNext;
   1ff16:	9b03      	ldr	r3, [sp, #12]
   1ff18:	681b      	ldr	r3, [r3, #0]
   1ff1a:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   1ff1c:	9b03      	ldr	r3, [sp, #12]
   1ff1e:	2b00      	cmp	r3, #0
   1ff20:	d1f3      	bne.n	1ff0a <wsfTimerRemove+0x12>
   1ff22:	e000      	b.n	1ff26 <wsfTimerRemove+0x2e>
      break;
   1ff24:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
   1ff26:	9b03      	ldr	r3, [sp, #12]
   1ff28:	2b00      	cmp	r3, #0
   1ff2a:	d007      	beq.n	1ff3c <wsfTimerRemove+0x44>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   1ff2c:	9a02      	ldr	r2, [sp, #8]
   1ff2e:	9901      	ldr	r1, [sp, #4]
   1ff30:	4804      	ldr	r0, [pc, #16]	; (1ff44 <wsfTimerRemove+0x4c>)
   1ff32:	f7ff ff85 	bl	1fe40 <WsfQueueRemove>

    pTimer->isStarted = FALSE;
   1ff36:	9b01      	ldr	r3, [sp, #4]
   1ff38:	2200      	movs	r2, #0
   1ff3a:	735a      	strb	r2, [r3, #13]
  }
}
   1ff3c:	bf00      	nop
   1ff3e:	b005      	add	sp, #20
   1ff40:	f85d fb04 	ldr.w	pc, [sp], #4
   1ff44:	10005244 	.word	0x10005244

0001ff48 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
   1ff48:	b500      	push	{lr}
   1ff4a:	b085      	sub	sp, #20
   1ff4c:	9001      	str	r0, [sp, #4]
   1ff4e:	9100      	str	r1, [sp, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1ff50:	2300      	movs	r3, #0
   1ff52:	9302      	str	r3, [sp, #8]

  /* task schedule lock */
  WsfTaskLock();
   1ff54:	f7ff fd5a 	bl	1fa0c <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
   1ff58:	9b01      	ldr	r3, [sp, #4]
   1ff5a:	7b5b      	ldrb	r3, [r3, #13]
   1ff5c:	2b00      	cmp	r3, #0
   1ff5e:	d002      	beq.n	1ff66 <wsfTimerInsert+0x1e>
  {
    wsfTimerRemove(pTimer);
   1ff60:	9801      	ldr	r0, [sp, #4]
   1ff62:	f7ff ffc9 	bl	1fef8 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
   1ff66:	9b01      	ldr	r3, [sp, #4]
   1ff68:	2201      	movs	r2, #1
   1ff6a:	735a      	strb	r2, [r3, #13]
  pTimer->ticks = ticks;
   1ff6c:	9b01      	ldr	r3, [sp, #4]
   1ff6e:	9a00      	ldr	r2, [sp, #0]
   1ff70:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1ff72:	4b0f      	ldr	r3, [pc, #60]	; (1ffb0 <wsfTimerInsert+0x68>)
   1ff74:	681b      	ldr	r3, [r3, #0]
   1ff76:	9303      	str	r3, [sp, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
   1ff78:	e00a      	b.n	1ff90 <wsfTimerInsert+0x48>
  {
    if (pTimer->ticks < pElem->ticks)
   1ff7a:	9b01      	ldr	r3, [sp, #4]
   1ff7c:	685a      	ldr	r2, [r3, #4]
   1ff7e:	9b03      	ldr	r3, [sp, #12]
   1ff80:	685b      	ldr	r3, [r3, #4]
   1ff82:	429a      	cmp	r2, r3
   1ff84:	d308      	bcc.n	1ff98 <wsfTimerInsert+0x50>
    {
      break;
    }
    pPrev = pElem;
   1ff86:	9b03      	ldr	r3, [sp, #12]
   1ff88:	9302      	str	r3, [sp, #8]
    pElem = pElem->pNext;
   1ff8a:	9b03      	ldr	r3, [sp, #12]
   1ff8c:	681b      	ldr	r3, [r3, #0]
   1ff8e:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   1ff90:	9b03      	ldr	r3, [sp, #12]
   1ff92:	2b00      	cmp	r3, #0
   1ff94:	d1f1      	bne.n	1ff7a <wsfTimerInsert+0x32>
   1ff96:	e000      	b.n	1ff9a <wsfTimerInsert+0x52>
      break;
   1ff98:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   1ff9a:	9a02      	ldr	r2, [sp, #8]
   1ff9c:	9901      	ldr	r1, [sp, #4]
   1ff9e:	4804      	ldr	r0, [pc, #16]	; (1ffb0 <wsfTimerInsert+0x68>)
   1ffa0:	f7ff ff24 	bl	1fdec <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
   1ffa4:	f7ff fd37 	bl	1fa16 <WsfTaskUnlock>
}
   1ffa8:	bf00      	nop
   1ffaa:	b005      	add	sp, #20
   1ffac:	f85d fb04 	ldr.w	pc, [sp], #4
   1ffb0:	10005244 	.word	0x10005244

0001ffb4 <WsfTimer_handler>:

static void WsfTimer_handler(TimerHandle_t xTimer)
{
   1ffb4:	b500      	push	{lr}
   1ffb6:	b083      	sub	sp, #12
   1ffb8:	9001      	str	r0, [sp, #4]
  WsfTaskSetReady(0, WSF_TIMER_EVENT);
   1ffba:	2102      	movs	r1, #2
   1ffbc:	2000      	movs	r0, #0
   1ffbe:	f7ff fdad 	bl	1fb1c <WsfTaskSetReady>
}
   1ffc2:	bf00      	nop
   1ffc4:	b003      	add	sp, #12
   1ffc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001ffcc <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   1ffcc:	b500      	push	{lr}
   1ffce:	b083      	sub	sp, #12
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   1ffd0:	4b11      	ldr	r3, [pc, #68]	; (20018 <WsfTimerInit+0x4c>)
   1ffd2:	2200      	movs	r2, #0
   1ffd4:	601a      	str	r2, [r3, #0]
   1ffd6:	4b10      	ldr	r3, [pc, #64]	; (20018 <WsfTimerInit+0x4c>)
   1ffd8:	2200      	movs	r2, #0
   1ffda:	605a      	str	r2, [r3, #4]

  if(xWsfTimer == NULL)
   1ffdc:	4b0f      	ldr	r3, [pc, #60]	; (2001c <WsfTimerInit+0x50>)
   1ffde:	681b      	ldr	r3, [r3, #0]
   1ffe0:	2b00      	cmp	r3, #0
   1ffe2:	d114      	bne.n	2000e <WsfTimerInit+0x42>
  {
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   1ffe4:	4b0e      	ldr	r3, [pc, #56]	; (20020 <WsfTimerInit+0x54>)
   1ffe6:	9300      	str	r3, [sp, #0]
   1ffe8:	2300      	movs	r3, #0
   1ffea:	2200      	movs	r2, #0
   1ffec:	210a      	movs	r1, #10
   1ffee:	480d      	ldr	r0, [pc, #52]	; (20024 <WsfTimerInit+0x58>)
   1fff0:	f003 f9d8 	bl	233a4 <xTimerCreate>
   1fff4:	4603      	mov	r3, r0
   1fff6:	4a09      	ldr	r2, [pc, #36]	; (2001c <WsfTimerInit+0x50>)
   1fff8:	6013      	str	r3, [r2, #0]
          pdFALSE, NULL, WsfTimer_handler);
    configASSERT(xWsfTimer);
   1fffa:	4b08      	ldr	r3, [pc, #32]	; (2001c <WsfTimerInit+0x50>)
   1fffc:	681b      	ldr	r3, [r3, #0]
   1fffe:	2b00      	cmp	r3, #0
   20000:	d100      	bne.n	20004 <WsfTimerInit+0x38>
   20002:	e7fe      	b.n	20002 <WsfTimerInit+0x36>
    g_ui32LastTime = xTaskGetTickCount();
   20004:	f002 fdc0 	bl	22b88 <xTaskGetTickCount>
   20008:	4603      	mov	r3, r0
   2000a:	4a07      	ldr	r2, [pc, #28]	; (20028 <WsfTimerInit+0x5c>)
   2000c:	6013      	str	r3, [r2, #0]
  }
}
   2000e:	bf00      	nop
   20010:	b003      	add	sp, #12
   20012:	f85d fb04 	ldr.w	pc, [sp], #4
   20016:	bf00      	nop
   20018:	10005244 	.word	0x10005244
   2001c:	1000524c 	.word	0x1000524c
   20020:	0001ffb5 	.word	0x0001ffb5
   20024:	00027d14 	.word	0x00027d14
   20028:	10005250 	.word	0x10005250

0002002c <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   2002c:	b500      	push	{lr}
   2002e:	b083      	sub	sp, #12
   20030:	9001      	str	r0, [sp, #4]
   20032:	9100      	str	r1, [sp, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   20034:	9b00      	ldr	r3, [sp, #0]
   20036:	2264      	movs	r2, #100	; 0x64
   20038:	fb02 f303 	mul.w	r3, r2, r3
   2003c:	4619      	mov	r1, r3
   2003e:	9801      	ldr	r0, [sp, #4]
   20040:	f7ff ff82 	bl	1ff48 <wsfTimerInsert>
}
   20044:	bf00      	nop
   20046:	b003      	add	sp, #12
   20048:	f85d fb04 	ldr.w	pc, [sp], #4

0002004c <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   2004c:	b500      	push	{lr}
   2004e:	b083      	sub	sp, #12
   20050:	9001      	str	r0, [sp, #4]
   20052:	9100      	str	r1, [sp, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   20054:	9b00      	ldr	r3, [sp, #0]
   20056:	4a06      	ldr	r2, [pc, #24]	; (20070 <WsfTimerStartMs+0x24>)
   20058:	fba2 2303 	umull	r2, r3, r2, r3
   2005c:	08db      	lsrs	r3, r3, #3
   2005e:	4619      	mov	r1, r3
   20060:	9801      	ldr	r0, [sp, #4]
   20062:	f7ff ff71 	bl	1ff48 <wsfTimerInsert>
}
   20066:	bf00      	nop
   20068:	b003      	add	sp, #12
   2006a:	f85d fb04 	ldr.w	pc, [sp], #4
   2006e:	bf00      	nop
   20070:	cccccccd 	.word	0xcccccccd

00020074 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   20074:	b500      	push	{lr}
   20076:	b083      	sub	sp, #12
   20078:	9001      	str	r0, [sp, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   2007a:	f7ff fcc7 	bl	1fa0c <WsfTaskLock>

  wsfTimerRemove(pTimer);
   2007e:	9801      	ldr	r0, [sp, #4]
   20080:	f7ff ff3a 	bl	1fef8 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
   20084:	f7ff fcc7 	bl	1fa16 <WsfTaskUnlock>
}
   20088:	bf00      	nop
   2008a:	b003      	add	sp, #12
   2008c:	f85d fb04 	ldr.w	pc, [sp], #4

00020090 <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
   20090:	b500      	push	{lr}
   20092:	b085      	sub	sp, #20
   20094:	9001      	str	r0, [sp, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
   20096:	f7ff fcb9 	bl	1fa0c <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   2009a:	4b12      	ldr	r3, [pc, #72]	; (200e4 <WsfTimerUpdate+0x54>)
   2009c:	681b      	ldr	r3, [r3, #0]
   2009e:	9303      	str	r3, [sp, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
   200a0:	e017      	b.n	200d2 <WsfTimerUpdate+0x42>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
   200a2:	9b03      	ldr	r3, [sp, #12]
   200a4:	685b      	ldr	r3, [r3, #4]
   200a6:	9a01      	ldr	r2, [sp, #4]
   200a8:	429a      	cmp	r2, r3
   200aa:	d206      	bcs.n	200ba <WsfTimerUpdate+0x2a>
    {
      pElem->ticks -= ticks;
   200ac:	9b03      	ldr	r3, [sp, #12]
   200ae:	685a      	ldr	r2, [r3, #4]
   200b0:	9b01      	ldr	r3, [sp, #4]
   200b2:	1ad2      	subs	r2, r2, r3
   200b4:	9b03      	ldr	r3, [sp, #12]
   200b6:	605a      	str	r2, [r3, #4]
   200b8:	e008      	b.n	200cc <WsfTimerUpdate+0x3c>
    }
    else
    {
      pElem->ticks = 0;
   200ba:	9b03      	ldr	r3, [sp, #12]
   200bc:	2200      	movs	r2, #0
   200be:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   200c0:	9b03      	ldr	r3, [sp, #12]
   200c2:	7b1b      	ldrb	r3, [r3, #12]
   200c4:	2102      	movs	r1, #2
   200c6:	4618      	mov	r0, r3
   200c8:	f7ff fd28 	bl	1fb1c <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
   200cc:	9b03      	ldr	r3, [sp, #12]
   200ce:	681b      	ldr	r3, [r3, #0]
   200d0:	9303      	str	r3, [sp, #12]
  while (pElem != NULL)
   200d2:	9b03      	ldr	r3, [sp, #12]
   200d4:	2b00      	cmp	r3, #0
   200d6:	d1e4      	bne.n	200a2 <WsfTimerUpdate+0x12>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   200d8:	f7ff fc9d 	bl	1fa16 <WsfTaskUnlock>
}
   200dc:	bf00      	nop
   200de:	b005      	add	sp, #20
   200e0:	f85d fb04 	ldr.w	pc, [sp], #4
   200e4:	10005244 	.word	0x10005244

000200e8 <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
   200e8:	b500      	push	{lr}
   200ea:	b085      	sub	sp, #20
   200ec:	9001      	str	r0, [sp, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
   200ee:	f7ff fc8d 	bl	1fa0c <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
   200f2:	4b0c      	ldr	r3, [pc, #48]	; (20124 <WsfTimerNextExpiration+0x3c>)
   200f4:	681b      	ldr	r3, [r3, #0]
   200f6:	2b00      	cmp	r3, #0
   200f8:	d105      	bne.n	20106 <WsfTimerNextExpiration+0x1e>
  {
    *pTimerRunning = FALSE;
   200fa:	9b01      	ldr	r3, [sp, #4]
   200fc:	2200      	movs	r2, #0
   200fe:	701a      	strb	r2, [r3, #0]
    ticks = 0;
   20100:	2300      	movs	r3, #0
   20102:	9303      	str	r3, [sp, #12]
   20104:	e006      	b.n	20114 <WsfTimerNextExpiration+0x2c>
  }
  else
  {
    *pTimerRunning = TRUE;
   20106:	9b01      	ldr	r3, [sp, #4]
   20108:	2201      	movs	r2, #1
   2010a:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   2010c:	4b05      	ldr	r3, [pc, #20]	; (20124 <WsfTimerNextExpiration+0x3c>)
   2010e:	681b      	ldr	r3, [r3, #0]
   20110:	685b      	ldr	r3, [r3, #4]
   20112:	9303      	str	r3, [sp, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   20114:	f7ff fc7f 	bl	1fa16 <WsfTaskUnlock>

  return ticks;
   20118:	9b03      	ldr	r3, [sp, #12]
}
   2011a:	4618      	mov	r0, r3
   2011c:	b005      	add	sp, #20
   2011e:	f85d fb04 	ldr.w	pc, [sp], #4
   20122:	bf00      	nop
   20124:	10005244 	.word	0x10005244

00020128 <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   20128:	b500      	push	{lr}
   2012a:	b085      	sub	sp, #20
   2012c:	4603      	mov	r3, r0
   2012e:	f88d 3007 	strb.w	r3, [sp, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   20132:	2300      	movs	r3, #0
   20134:	9303      	str	r3, [sp, #12]

  /* Unused parameters */
  (void)taskId;

  /* task schedule lock */
  WsfTaskLock();
   20136:	f7ff fc69 	bl	1fa0c <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   2013a:	4b0e      	ldr	r3, [pc, #56]	; (20174 <WsfTimerServiceExpired+0x4c>)
   2013c:	681b      	ldr	r3, [r3, #0]
   2013e:	9302      	str	r3, [sp, #8]
   20140:	9b02      	ldr	r3, [sp, #8]
   20142:	2b00      	cmp	r3, #0
   20144:	d00f      	beq.n	20166 <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
   20146:	9b02      	ldr	r3, [sp, #8]
   20148:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   2014a:	2b00      	cmp	r3, #0
   2014c:	d10b      	bne.n	20166 <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   2014e:	9a03      	ldr	r2, [sp, #12]
   20150:	9902      	ldr	r1, [sp, #8]
   20152:	4808      	ldr	r0, [pc, #32]	; (20174 <WsfTimerServiceExpired+0x4c>)
   20154:	f7ff fe74 	bl	1fe40 <WsfQueueRemove>

    pElem->isStarted = FALSE;
   20158:	9b02      	ldr	r3, [sp, #8]
   2015a:	2200      	movs	r2, #0
   2015c:	735a      	strb	r2, [r3, #13]

    /* task schedule unlock */
    WsfTaskUnlock();
   2015e:	f7ff fc5a 	bl	1fa16 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
   20162:	9b02      	ldr	r3, [sp, #8]
   20164:	e002      	b.n	2016c <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   20166:	f7ff fc56 	bl	1fa16 <WsfTaskUnlock>

  return NULL;
   2016a:	2300      	movs	r3, #0
}
   2016c:	4618      	mov	r0, r3
   2016e:	b005      	add	sp, #20
   20170:	f85d fb04 	ldr.w	pc, [sp], #4
   20174:	10005244 	.word	0x10005244

00020178 <WsfTimerUpdateTicks>:
//
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void WsfTimerUpdateTicks(void)
{
   20178:	b500      	push	{lr}
   2017a:	b087      	sub	sp, #28
    wsfTimerTicks_t xNextExpiration;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = xTaskGetTickCount();
   2017c:	f002 fd04 	bl	22b88 <xTaskGetTickCount>
   20180:	9005      	str	r0, [sp, #20]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   20182:	4b1a      	ldr	r3, [pc, #104]	; (201ec <WsfTimerUpdateTicks+0x74>)
   20184:	681b      	ldr	r3, [r3, #0]
   20186:	9a05      	ldr	r2, [sp, #20]
   20188:	1ad3      	subs	r3, r2, r3
   2018a:	9304      	str	r3, [sp, #16]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   2018c:	9b04      	ldr	r3, [sp, #16]
   2018e:	2b09      	cmp	r3, #9
   20190:	d90a      	bls.n	201a8 <WsfTimerUpdateTicks+0x30>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   20192:	9b04      	ldr	r3, [sp, #16]
   20194:	4a16      	ldr	r2, [pc, #88]	; (201f0 <WsfTimerUpdateTicks+0x78>)
   20196:	fba2 2303 	umull	r2, r3, r2, r3
   2019a:	08db      	lsrs	r3, r3, #3
   2019c:	4618      	mov	r0, r3
   2019e:	f7ff ff77 	bl	20090 <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
   201a2:	4a12      	ldr	r2, [pc, #72]	; (201ec <WsfTimerUpdateTicks+0x74>)
   201a4:	9b05      	ldr	r3, [sp, #20]
   201a6:	6013      	str	r3, [r2, #0]
    }

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
   201a8:	f10d 030b 	add.w	r3, sp, #11
   201ac:	4618      	mov	r0, r3
   201ae:	f7ff ff9b 	bl	200e8 <WsfTimerNextExpiration>
   201b2:	9003      	str	r0, [sp, #12]

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   201b4:	9b03      	ldr	r3, [sp, #12]
   201b6:	2b00      	cmp	r3, #0
   201b8:	d014      	beq.n	201e4 <WsfTimerUpdateTicks+0x6c>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   201ba:	4b0e      	ldr	r3, [pc, #56]	; (201f4 <WsfTimerUpdateTicks+0x7c>)
   201bc:	6818      	ldr	r0, [r3, #0]
   201be:	9b03      	ldr	r3, [sp, #12]
   201c0:	f242 7210 	movw	r2, #10000	; 0x2710
   201c4:	fb02 f303 	mul.w	r3, r2, r3
   201c8:	4a0b      	ldr	r2, [pc, #44]	; (201f8 <WsfTimerUpdateTicks+0x80>)
   201ca:	fba2 2303 	umull	r2, r3, r2, r3
   201ce:	099a      	lsrs	r2, r3, #6
   201d0:	2364      	movs	r3, #100	; 0x64
   201d2:	9300      	str	r3, [sp, #0]
   201d4:	2300      	movs	r3, #0
   201d6:	2104      	movs	r1, #4
   201d8:	f003 f928 	bl	2342c <xTimerGenericCommand>
   201dc:	4603      	mov	r3, r0
   201de:	2b01      	cmp	r3, #1
   201e0:	d000      	beq.n	201e4 <WsfTimerUpdateTicks+0x6c>
   201e2:	e7fe      	b.n	201e2 <WsfTimerUpdateTicks+0x6a>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   201e4:	bf00      	nop
   201e6:	b007      	add	sp, #28
   201e8:	f85d fb04 	ldr.w	pc, [sp], #4
   201ec:	10005250 	.word	0x10005250
   201f0:	cccccccd 	.word	0xcccccccd
   201f4:	1000524c 	.word	0x1000524c
   201f8:	10624dd3 	.word	0x10624dd3

000201fc <fitDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitDmCback(dmEvt_t *pDmEvt)
{
   201fc:	b500      	push	{lr}
   201fe:	b085      	sub	sp, #20
   20200:	9001      	str	r0, [sp, #4]
  dmEvt_t *pMsg;
  uint16_t len;

  len = DmSizeOfEvt(pDmEvt);
   20202:	9801      	ldr	r0, [sp, #4]
   20204:	f7f5 ffaa 	bl	1615c <DmSizeOfEvt>
   20208:	4603      	mov	r3, r0
   2020a:	f8ad 300e 	strh.w	r3, [sp, #14]

  if ((pMsg = WsfMsgAlloc(len)) != NULL)
   2020e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   20212:	4618      	mov	r0, r3
   20214:	f7ff fb6e 	bl	1f8f4 <WsfMsgAlloc>
   20218:	9002      	str	r0, [sp, #8]
   2021a:	9b02      	ldr	r3, [sp, #8]
   2021c:	2b00      	cmp	r3, #0
   2021e:	d00c      	beq.n	2023a <fitDmCback+0x3e>
  {
    memcpy(pMsg, pDmEvt, len);
   20220:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   20224:	461a      	mov	r2, r3
   20226:	9901      	ldr	r1, [sp, #4]
   20228:	9802      	ldr	r0, [sp, #8]
   2022a:	f7eb ff69 	bl	c100 <memcpy>
    WsfMsgSend(fitHandlerId, pMsg);
   2022e:	4b05      	ldr	r3, [pc, #20]	; (20244 <fitDmCback+0x48>)
   20230:	781b      	ldrb	r3, [r3, #0]
   20232:	9902      	ldr	r1, [sp, #8]
   20234:	4618      	mov	r0, r3
   20236:	f7ff fb81 	bl	1f93c <WsfMsgSend>
  }
}
   2023a:	bf00      	nop
   2023c:	b005      	add	sp, #20
   2023e:	f85d fb04 	ldr.w	pc, [sp], #4
   20242:	bf00      	nop
   20244:	10005254 	.word	0x10005254

00020248 <fitAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitAttCback(attEvt_t *pEvt)
{
   20248:	b500      	push	{lr}
   2024a:	b085      	sub	sp, #20
   2024c:	9001      	str	r0, [sp, #4]
  attEvt_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   2024e:	9b01      	ldr	r3, [sp, #4]
   20250:	891b      	ldrh	r3, [r3, #8]
   20252:	3310      	adds	r3, #16
   20254:	b29b      	uxth	r3, r3
   20256:	4618      	mov	r0, r3
   20258:	f7ff fb4c 	bl	1f8f4 <WsfMsgAlloc>
   2025c:	9003      	str	r0, [sp, #12]
   2025e:	9b03      	ldr	r3, [sp, #12]
   20260:	2b00      	cmp	r3, #0
   20262:	d018      	beq.n	20296 <fitAttCback+0x4e>
  {
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   20264:	2210      	movs	r2, #16
   20266:	9901      	ldr	r1, [sp, #4]
   20268:	9803      	ldr	r0, [sp, #12]
   2026a:	f7eb ff49 	bl	c100 <memcpy>
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   2026e:	9b03      	ldr	r3, [sp, #12]
   20270:	f103 0210 	add.w	r2, r3, #16
   20274:	9b03      	ldr	r3, [sp, #12]
   20276:	605a      	str	r2, [r3, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   20278:	9b03      	ldr	r3, [sp, #12]
   2027a:	6858      	ldr	r0, [r3, #4]
   2027c:	9b01      	ldr	r3, [sp, #4]
   2027e:	6859      	ldr	r1, [r3, #4]
   20280:	9b01      	ldr	r3, [sp, #4]
   20282:	891b      	ldrh	r3, [r3, #8]
   20284:	461a      	mov	r2, r3
   20286:	f7eb ff3b 	bl	c100 <memcpy>
    WsfMsgSend(fitHandlerId, pMsg);
   2028a:	4b05      	ldr	r3, [pc, #20]	; (202a0 <fitAttCback+0x58>)
   2028c:	781b      	ldrb	r3, [r3, #0]
   2028e:	9903      	ldr	r1, [sp, #12]
   20290:	4618      	mov	r0, r3
   20292:	f7ff fb53 	bl	1f93c <WsfMsgSend>
  }
}
   20296:	bf00      	nop
   20298:	b005      	add	sp, #20
   2029a:	f85d fb04 	ldr.w	pc, [sp], #4
   2029e:	bf00      	nop
   202a0:	10005254 	.word	0x10005254

000202a4 <fitCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitCccCback(attsCccEvt_t *pEvt)
{
   202a4:	b500      	push	{lr}
   202a6:	b085      	sub	sp, #20
   202a8:	9001      	str	r0, [sp, #4]
  attsCccEvt_t  *pMsg;
  appDbHdl_t    dbHdl;

  /* If CCC not set from initialization and there's a device record and currently bonded */
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   202aa:	9b01      	ldr	r3, [sp, #4]
   202ac:	889b      	ldrh	r3, [r3, #4]
   202ae:	2b00      	cmp	r3, #0
   202b0:	d01b      	beq.n	202ea <fitCccCback+0x46>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE) &&
   202b2:	9b01      	ldr	r3, [sp, #4]
   202b4:	881b      	ldrh	r3, [r3, #0]
   202b6:	b2db      	uxtb	r3, r3
   202b8:	4618      	mov	r0, r3
   202ba:	f003 fcbd 	bl	23c38 <AppDbGetHdl>
   202be:	9003      	str	r0, [sp, #12]
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   202c0:	9b03      	ldr	r3, [sp, #12]
   202c2:	2b00      	cmp	r3, #0
   202c4:	d011      	beq.n	202ea <fitCccCback+0x46>
      AppCheckBonded((dmConnId_t)pEvt->hdr.param))
   202c6:	9b01      	ldr	r3, [sp, #4]
   202c8:	881b      	ldrh	r3, [r3, #0]
   202ca:	b2db      	uxtb	r3, r3
   202cc:	4618      	mov	r0, r3
   202ce:	f003 fbdd 	bl	23a8c <AppCheckBonded>
   202d2:	4603      	mov	r3, r0
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE) &&
   202d4:	2b00      	cmp	r3, #0
   202d6:	d008      	beq.n	202ea <fitCccCback+0x46>
  {
    /* Store value in device database. */
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   202d8:	9b01      	ldr	r3, [sp, #4]
   202da:	7a1b      	ldrb	r3, [r3, #8]
   202dc:	b299      	uxth	r1, r3
   202de:	9b01      	ldr	r3, [sp, #4]
   202e0:	88db      	ldrh	r3, [r3, #6]
   202e2:	461a      	mov	r2, r3
   202e4:	9803      	ldr	r0, [sp, #12]
   202e6:	f7ec faf8 	bl	c8da <AppDbSetCccTblValue>
  }

  if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
   202ea:	200a      	movs	r0, #10
   202ec:	f7ff fb02 	bl	1f8f4 <WsfMsgAlloc>
   202f0:	9002      	str	r0, [sp, #8]
   202f2:	9b02      	ldr	r3, [sp, #8]
   202f4:	2b00      	cmp	r3, #0
   202f6:	d00a      	beq.n	2030e <fitCccCback+0x6a>
  {
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   202f8:	220a      	movs	r2, #10
   202fa:	9901      	ldr	r1, [sp, #4]
   202fc:	9802      	ldr	r0, [sp, #8]
   202fe:	f7eb feff 	bl	c100 <memcpy>
    WsfMsgSend(fitHandlerId, pMsg);
   20302:	4b05      	ldr	r3, [pc, #20]	; (20318 <fitCccCback+0x74>)
   20304:	781b      	ldrb	r3, [r3, #0]
   20306:	9902      	ldr	r1, [sp, #8]
   20308:	4618      	mov	r0, r3
   2030a:	f7ff fb17 	bl	1f93c <WsfMsgSend>
  }
}
   2030e:	bf00      	nop
   20310:	b005      	add	sp, #20
   20312:	f85d fb04 	ldr.w	pc, [sp], #4
   20316:	bf00      	nop
   20318:	10005254 	.word	0x10005254

0002031c <fitSendRunningSpeedMeasurement>:
*
*  \return None.
*/
/*************************************************************************************************/
static void fitSendRunningSpeedMeasurement(dmConnId_t connId)
{
   2031c:	b500      	push	{lr}
   2031e:	b083      	sub	sp, #12
   20320:	4603      	mov	r3, r0
   20322:	f88d 3007 	strb.w	r3, [sp, #7]
  if (AttsCccEnabled(connId, FIT_RSCS_SM_CCC_IDX))
   20326:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2032a:	2103      	movs	r1, #3
   2032c:	4618      	mov	r0, r3
   2032e:	f7f8 fda3 	bl	18e78 <AttsCccEnabled>
   20332:	4603      	mov	r3, r0
   20334:	2b00      	cmp	r3, #0
   20336:	d024      	beq.n	20382 <fitSendRunningSpeedMeasurement+0x66>
  {
    static uint8_t walk_run = 1;

    /* TODO: Set Running Speed and Cadence Measurement Parameters */

    RscpsSetParameter(RSCP_SM_PARAM_SPEED, 1);
   20338:	2101      	movs	r1, #1
   2033a:	2000      	movs	r0, #0
   2033c:	f7ff f8b6 	bl	1f4ac <RscpsSetParameter>
    RscpsSetParameter(RSCP_SM_PARAM_CADENCE, 2);
   20340:	2102      	movs	r1, #2
   20342:	2001      	movs	r0, #1
   20344:	f7ff f8b2 	bl	1f4ac <RscpsSetParameter>
    RscpsSetParameter(RSCP_SM_PARAM_STRIDE_LENGTH, 3);
   20348:	2103      	movs	r1, #3
   2034a:	2002      	movs	r0, #2
   2034c:	f7ff f8ae 	bl	1f4ac <RscpsSetParameter>
    RscpsSetParameter(RSCP_SM_PARAM_TOTAL_DISTANCE, 4);
   20350:	2104      	movs	r1, #4
   20352:	2003      	movs	r0, #3
   20354:	f7ff f8aa 	bl	1f4ac <RscpsSetParameter>

    /* Toggle running/walking */
    walk_run = walk_run? 0 : 1;
   20358:	4b16      	ldr	r3, [pc, #88]	; (203b4 <fitSendRunningSpeedMeasurement+0x98>)
   2035a:	781b      	ldrb	r3, [r3, #0]
   2035c:	2b00      	cmp	r3, #0
   2035e:	bf0c      	ite	eq
   20360:	2301      	moveq	r3, #1
   20362:	2300      	movne	r3, #0
   20364:	b2db      	uxtb	r3, r3
   20366:	461a      	mov	r2, r3
   20368:	4b12      	ldr	r3, [pc, #72]	; (203b4 <fitSendRunningSpeedMeasurement+0x98>)
   2036a:	701a      	strb	r2, [r3, #0]
    RscpsSetParameter(RSCP_SM_PARAM_STATUS, walk_run);
   2036c:	4b11      	ldr	r3, [pc, #68]	; (203b4 <fitSendRunningSpeedMeasurement+0x98>)
   2036e:	781b      	ldrb	r3, [r3, #0]
   20370:	4619      	mov	r1, r3
   20372:	2004      	movs	r0, #4
   20374:	f7ff f89a 	bl	1f4ac <RscpsSetParameter>

    RscpsSendSpeedMeasurement(connId);
   20378:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2037c:	4618      	mov	r0, r3
   2037e:	f7ff f8e5 	bl	1f54c <RscpsSendSpeedMeasurement>
  }

  /* Configure and start timer to send the next measurement */
  fitRscmTimer.msg.event = FIT_RUNNING_TIMER_IND;
   20382:	4b0d      	ldr	r3, [pc, #52]	; (203b8 <fitSendRunningSpeedMeasurement+0x9c>)
   20384:	22a2      	movs	r2, #162	; 0xa2
   20386:	729a      	strb	r2, [r3, #10]
  fitRscmTimer.msg.status = FIT_RSCS_SM_CCC_IDX;
   20388:	4b0b      	ldr	r3, [pc, #44]	; (203b8 <fitSendRunningSpeedMeasurement+0x9c>)
   2038a:	2203      	movs	r2, #3
   2038c:	72da      	strb	r2, [r3, #11]
  fitRscmTimer.handlerId = fitHandlerId;
   2038e:	4b0b      	ldr	r3, [pc, #44]	; (203bc <fitSendRunningSpeedMeasurement+0xa0>)
   20390:	781a      	ldrb	r2, [r3, #0]
   20392:	4b09      	ldr	r3, [pc, #36]	; (203b8 <fitSendRunningSpeedMeasurement+0x9c>)
   20394:	731a      	strb	r2, [r3, #12]
  fitRscmTimer.msg.param = connId;
   20396:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2039a:	b29a      	uxth	r2, r3
   2039c:	4b06      	ldr	r3, [pc, #24]	; (203b8 <fitSendRunningSpeedMeasurement+0x9c>)
   2039e:	811a      	strh	r2, [r3, #8]

  WsfTimerStartSec(&fitRscmTimer, fitRscmPeriod);
   203a0:	4b07      	ldr	r3, [pc, #28]	; (203c0 <fitSendRunningSpeedMeasurement+0xa4>)
   203a2:	881b      	ldrh	r3, [r3, #0]
   203a4:	4619      	mov	r1, r3
   203a6:	4804      	ldr	r0, [pc, #16]	; (203b8 <fitSendRunningSpeedMeasurement+0x9c>)
   203a8:	f7ff fe40 	bl	2002c <WsfTimerStartSec>
}
   203ac:	bf00      	nop
   203ae:	b003      	add	sp, #12
   203b0:	f85d fb04 	ldr.w	pc, [sp], #4
   203b4:	10002bbb 	.word	0x10002bbb
   203b8:	10005258 	.word	0x10005258
   203bc:	10005254 	.word	0x10005254
   203c0:	10002bb8 	.word	0x10002bb8

000203c4 <fitProcCccState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitProcCccState(fitMsg_t *pMsg)
{
   203c4:	b500      	push	{lr}
   203c6:	b083      	sub	sp, #12
   203c8:	9001      	str	r0, [sp, #4]
  APP_TRACE_INFO3("ccc state ind value:%d handle:%d idx:%d", pMsg->ccc.value, pMsg->ccc.handle, pMsg->ccc.idx);

  /* handle heart rate measurement CCC */
  if (pMsg->ccc.idx == FIT_HRS_HRM_CCC_IDX)
   203ca:	9b01      	ldr	r3, [sp, #4]
   203cc:	7a1b      	ldrb	r3, [r3, #8]
   203ce:	2b01      	cmp	r3, #1
   203d0:	d113      	bne.n	203fa <fitProcCccState+0x36>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   203d2:	9b01      	ldr	r3, [sp, #4]
   203d4:	88db      	ldrh	r3, [r3, #6]
   203d6:	2b01      	cmp	r3, #1
   203d8:	d108      	bne.n	203ec <fitProcCccState+0x28>
    {
      HrpsMeasStart((dmConnId_t) pMsg->ccc.hdr.param, FIT_HR_TIMER_IND, FIT_HRS_HRM_CCC_IDX);
   203da:	9b01      	ldr	r3, [sp, #4]
   203dc:	881b      	ldrh	r3, [r3, #0]
   203de:	b2db      	uxtb	r3, r3
   203e0:	2201      	movs	r2, #1
   203e2:	21a0      	movs	r1, #160	; 0xa0
   203e4:	4618      	mov	r0, r3
   203e6:	f7fe ff9f 	bl	1f328 <HrpsMeasStart>
    }
    else
    {
      HrpsMeasStop((dmConnId_t) pMsg->ccc.hdr.param);
    }
    return;
   203ea:	e031      	b.n	20450 <fitProcCccState+0x8c>
      HrpsMeasStop((dmConnId_t) pMsg->ccc.hdr.param);
   203ec:	9b01      	ldr	r3, [sp, #4]
   203ee:	881b      	ldrh	r3, [r3, #0]
   203f0:	b2db      	uxtb	r3, r3
   203f2:	4618      	mov	r0, r3
   203f4:	f7fe ffc6 	bl	1f384 <HrpsMeasStop>
    return;
   203f8:	e02a      	b.n	20450 <fitProcCccState+0x8c>
  }

  /* handle running speed and cadence measurement CCC */
  if (pMsg->ccc.idx == FIT_RSCS_SM_CCC_IDX)
   203fa:	9b01      	ldr	r3, [sp, #4]
   203fc:	7a1b      	ldrb	r3, [r3, #8]
   203fe:	2b03      	cmp	r3, #3
   20400:	d10e      	bne.n	20420 <fitProcCccState+0x5c>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   20402:	9b01      	ldr	r3, [sp, #4]
   20404:	88db      	ldrh	r3, [r3, #6]
   20406:	2b01      	cmp	r3, #1
   20408:	d106      	bne.n	20418 <fitProcCccState+0x54>
    {
      fitSendRunningSpeedMeasurement((dmConnId_t)pMsg->ccc.hdr.param);
   2040a:	9b01      	ldr	r3, [sp, #4]
   2040c:	881b      	ldrh	r3, [r3, #0]
   2040e:	b2db      	uxtb	r3, r3
   20410:	4618      	mov	r0, r3
   20412:	f7ff ff83 	bl	2031c <fitSendRunningSpeedMeasurement>
    }
    else
    {
      WsfTimerStop(&fitRscmTimer);
    }
    return;
   20416:	e01b      	b.n	20450 <fitProcCccState+0x8c>
      WsfTimerStop(&fitRscmTimer);
   20418:	480f      	ldr	r0, [pc, #60]	; (20458 <fitProcCccState+0x94>)
   2041a:	f7ff fe2b 	bl	20074 <WsfTimerStop>
    return;
   2041e:	e017      	b.n	20450 <fitProcCccState+0x8c>
  }

  /* handle battery level CCC */
  if (pMsg->ccc.idx == FIT_BATT_LVL_CCC_IDX)
   20420:	9b01      	ldr	r3, [sp, #4]
   20422:	7a1b      	ldrb	r3, [r3, #8]
   20424:	2b02      	cmp	r3, #2
   20426:	d113      	bne.n	20450 <fitProcCccState+0x8c>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   20428:	9b01      	ldr	r3, [sp, #4]
   2042a:	88db      	ldrh	r3, [r3, #6]
   2042c:	2b01      	cmp	r3, #1
   2042e:	d108      	bne.n	20442 <fitProcCccState+0x7e>
    {
      BasMeasBattStart((dmConnId_t) pMsg->ccc.hdr.param, FIT_BATT_TIMER_IND, FIT_BATT_LVL_CCC_IDX);
   20430:	9b01      	ldr	r3, [sp, #4]
   20432:	881b      	ldrh	r3, [r3, #0]
   20434:	b2db      	uxtb	r3, r3
   20436:	2202      	movs	r2, #2
   20438:	21a1      	movs	r1, #161	; 0xa1
   2043a:	4618      	mov	r0, r3
   2043c:	f7fc fbec 	bl	1cc18 <BasMeasBattStart>
    }
    else
    {
      BasMeasBattStop((dmConnId_t) pMsg->ccc.hdr.param);
    }
    return;
   20440:	e005      	b.n	2044e <fitProcCccState+0x8a>
      BasMeasBattStop((dmConnId_t) pMsg->ccc.hdr.param);
   20442:	9b01      	ldr	r3, [sp, #4]
   20444:	881b      	ldrh	r3, [r3, #0]
   20446:	b2db      	uxtb	r3, r3
   20448:	4618      	mov	r0, r3
   2044a:	f7fc fc29 	bl	1cca0 <BasMeasBattStop>
    return;
   2044e:	bf00      	nop
  }
}
   20450:	b003      	add	sp, #12
   20452:	f85d fb04 	ldr.w	pc, [sp], #4
   20456:	bf00      	nop
   20458:	10005258 	.word	0x10005258

0002045c <fitClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitClose(fitMsg_t *pMsg)
{
   2045c:	b500      	push	{lr}
   2045e:	b083      	sub	sp, #12
   20460:	9001      	str	r0, [sp, #4]
  /* stop heart rate measurement */
  HrpsMeasStop((dmConnId_t) pMsg->hdr.param);
   20462:	9b01      	ldr	r3, [sp, #4]
   20464:	881b      	ldrh	r3, [r3, #0]
   20466:	b2db      	uxtb	r3, r3
   20468:	4618      	mov	r0, r3
   2046a:	f7fe ff8b 	bl	1f384 <HrpsMeasStop>

  /* stop battery measurement */
  BasMeasBattStop((dmConnId_t) pMsg->hdr.param);
   2046e:	9b01      	ldr	r3, [sp, #4]
   20470:	881b      	ldrh	r3, [r3, #0]
   20472:	b2db      	uxtb	r3, r3
   20474:	4618      	mov	r0, r3
   20476:	f7fc fc13 	bl	1cca0 <BasMeasBattStop>

  /* Stop running speed and cadence timer */
  WsfTimerStop(&fitRscmTimer);
   2047a:	4803      	ldr	r0, [pc, #12]	; (20488 <fitClose+0x2c>)
   2047c:	f7ff fdfa 	bl	20074 <WsfTimerStop>
}
   20480:	bf00      	nop
   20482:	b003      	add	sp, #12
   20484:	f85d fb04 	ldr.w	pc, [sp], #4
   20488:	10005258 	.word	0x10005258

0002048c <fitSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitSetup(fitMsg_t *pMsg)
{
   2048c:	b500      	push	{lr}
   2048e:	b083      	sub	sp, #12
   20490:	9001      	str	r0, [sp, #4]
  /* set advertising and scan response data for discoverable mode */
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(fitAdvDataDisc), (uint8_t *) fitAdvDataDisc);
   20492:	4a0d      	ldr	r2, [pc, #52]	; (204c8 <fitSetup+0x3c>)
   20494:	2110      	movs	r1, #16
   20496:	2002      	movs	r0, #2
   20498:	f005 f850 	bl	2553c <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(fitScanDataDisc), (uint8_t *) fitScanDataDisc);
   2049c:	4a0b      	ldr	r2, [pc, #44]	; (204cc <fitSetup+0x40>)
   2049e:	2105      	movs	r1, #5
   204a0:	2003      	movs	r0, #3
   204a2:	f005 f84b 	bl	2553c <AppAdvSetData>

  /* set advertising and scan response data for connectable mode */
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, 0, NULL);
   204a6:	2200      	movs	r2, #0
   204a8:	2100      	movs	r1, #0
   204aa:	2000      	movs	r0, #0
   204ac:	f005 f846 	bl	2553c <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, 0, NULL);
   204b0:	2200      	movs	r2, #0
   204b2:	2100      	movs	r1, #0
   204b4:	2001      	movs	r0, #1
   204b6:	f005 f841 	bl	2553c <AppAdvSetData>

  /* start advertising; automatically set connectable/discoverable mode and bondable mode */
  AppAdvStart(APP_MODE_AUTO_INIT);
   204ba:	2002      	movs	r0, #2
   204bc:	f005 f864 	bl	25588 <AppAdvStart>
}
   204c0:	bf00      	nop
   204c2:	b003      	add	sp, #12
   204c4:	f85d fb04 	ldr.w	pc, [sp], #4
   204c8:	000287f4 	.word	0x000287f4
   204cc:	00028804 	.word	0x00028804

000204d0 <fitBtnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitBtnCback(uint8_t btn)
{
   204d0:	b500      	push	{lr}
   204d2:	b085      	sub	sp, #20
   204d4:	4603      	mov	r3, r0
   204d6:	f88d 3007 	strb.w	r3, [sp, #7]
  dmConnId_t      connId;
  static uint8_t  heartRate = 78;    /* for testing/demonstration */

  /* button actions when connected */
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   204da:	f003 fb8d 	bl	23bf8 <AppConnIsOpen>
   204de:	4603      	mov	r3, r0
   204e0:	f88d 300f 	strb.w	r3, [sp, #15]
   204e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   204e8:	2b00      	cmp	r3, #0
   204ea:	f000 8082 	beq.w	205f2 <fitBtnCback+0x122>
  {
    switch (btn)
   204ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   204f2:	3b02      	subs	r3, #2
   204f4:	2b07      	cmp	r3, #7
   204f6:	f200 80bd 	bhi.w	20674 <fitBtnCback+0x1a4>
   204fa:	a201      	add	r2, pc, #4	; (adr r2, 20500 <fitBtnCback+0x30>)
   204fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20500:	00020521 	.word	0x00020521
   20504:	00020675 	.word	0x00020675
   20508:	00020539 	.word	0x00020539
   2050c:	00020675 	.word	0x00020675
   20510:	00020675 	.word	0x00020675
   20514:	00020545 	.word	0x00020545
   20518:	0002055d 	.word	0x0002055d
   2051c:	000205bd 	.word	0x000205bd
    {
      case APP_UI_BTN_1_SHORT:
        /* increment the heart rate */
        AppHwHrmTest(++heartRate);
   20520:	4b58      	ldr	r3, [pc, #352]	; (20684 <fitBtnCback+0x1b4>)
   20522:	781b      	ldrb	r3, [r3, #0]
   20524:	3301      	adds	r3, #1
   20526:	b2da      	uxtb	r2, r3
   20528:	4b56      	ldr	r3, [pc, #344]	; (20684 <fitBtnCback+0x1b4>)
   2052a:	701a      	strb	r2, [r3, #0]
   2052c:	4b55      	ldr	r3, [pc, #340]	; (20684 <fitBtnCback+0x1b4>)
   2052e:	781b      	ldrb	r3, [r3, #0]
   20530:	4618      	mov	r0, r3
   20532:	f7ec fabf 	bl	cab4 <AppHwHrmTest>
        break;
   20536:	e0a0      	b.n	2067a <fitBtnCback+0x1aa>

      case APP_UI_BTN_1_MED:
        break;

      case APP_UI_BTN_1_LONG:
        AppConnClose(connId);
   20538:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2053c:	4618      	mov	r0, r3
   2053e:	f003 fb4a 	bl	23bd6 <AppConnClose>
        break;
   20542:	e09a      	b.n	2067a <fitBtnCback+0x1aa>

      case APP_UI_BTN_2_SHORT:
        /* decrement the heart rate */
        AppHwHrmTest(--heartRate);
   20544:	4b4f      	ldr	r3, [pc, #316]	; (20684 <fitBtnCback+0x1b4>)
   20546:	781b      	ldrb	r3, [r3, #0]
   20548:	3b01      	subs	r3, #1
   2054a:	b2da      	uxtb	r2, r3
   2054c:	4b4d      	ldr	r3, [pc, #308]	; (20684 <fitBtnCback+0x1b4>)
   2054e:	701a      	strb	r2, [r3, #0]
   20550:	4b4c      	ldr	r3, [pc, #304]	; (20684 <fitBtnCback+0x1b4>)
   20552:	781b      	ldrb	r3, [r3, #0]
   20554:	4618      	mov	r0, r3
   20556:	f7ec faad 	bl	cab4 <AppHwHrmTest>
        break;
   2055a:	e08e      	b.n	2067a <fitBtnCback+0x1aa>

      case APP_UI_BTN_2_MED:
        /* Toggle HRM Sensor DET flags */
        if (!(fitHrmFlags & (CH_HRM_FLAGS_SENSOR_DET | CH_HRM_FLAGS_SENSOR_NOT_DET)))
   2055c:	4b4a      	ldr	r3, [pc, #296]	; (20688 <fitBtnCback+0x1b8>)
   2055e:	781b      	ldrb	r3, [r3, #0]
   20560:	f003 0306 	and.w	r3, r3, #6
   20564:	2b00      	cmp	r3, #0
   20566:	d107      	bne.n	20578 <fitBtnCback+0xa8>
        {
          fitHrmFlags |= CH_HRM_FLAGS_SENSOR_DET;
   20568:	4b47      	ldr	r3, [pc, #284]	; (20688 <fitBtnCback+0x1b8>)
   2056a:	781b      	ldrb	r3, [r3, #0]
   2056c:	f043 0306 	orr.w	r3, r3, #6
   20570:	b2da      	uxtb	r2, r3
   20572:	4b45      	ldr	r3, [pc, #276]	; (20688 <fitBtnCback+0x1b8>)
   20574:	701a      	strb	r2, [r3, #0]
   20576:	e01b      	b.n	205b0 <fitBtnCback+0xe0>
        }
        else if (fitHrmFlags & CH_HRM_FLAGS_SENSOR_DET)
   20578:	4b43      	ldr	r3, [pc, #268]	; (20688 <fitBtnCback+0x1b8>)
   2057a:	781b      	ldrb	r3, [r3, #0]
   2057c:	f003 0306 	and.w	r3, r3, #6
   20580:	2b00      	cmp	r3, #0
   20582:	d00e      	beq.n	205a2 <fitBtnCback+0xd2>
        {
          fitHrmFlags &= ~CH_HRM_FLAGS_SENSOR_DET;
   20584:	4b40      	ldr	r3, [pc, #256]	; (20688 <fitBtnCback+0x1b8>)
   20586:	781b      	ldrb	r3, [r3, #0]
   20588:	f023 0306 	bic.w	r3, r3, #6
   2058c:	b2da      	uxtb	r2, r3
   2058e:	4b3e      	ldr	r3, [pc, #248]	; (20688 <fitBtnCback+0x1b8>)
   20590:	701a      	strb	r2, [r3, #0]
          fitHrmFlags |= CH_HRM_FLAGS_SENSOR_NOT_DET;
   20592:	4b3d      	ldr	r3, [pc, #244]	; (20688 <fitBtnCback+0x1b8>)
   20594:	781b      	ldrb	r3, [r3, #0]
   20596:	f043 0304 	orr.w	r3, r3, #4
   2059a:	b2da      	uxtb	r2, r3
   2059c:	4b3a      	ldr	r3, [pc, #232]	; (20688 <fitBtnCback+0x1b8>)
   2059e:	701a      	strb	r2, [r3, #0]
   205a0:	e006      	b.n	205b0 <fitBtnCback+0xe0>
        }
        else
        {
          fitHrmFlags &= ~CH_HRM_FLAGS_SENSOR_NOT_DET;
   205a2:	4b39      	ldr	r3, [pc, #228]	; (20688 <fitBtnCback+0x1b8>)
   205a4:	781b      	ldrb	r3, [r3, #0]
   205a6:	f023 0304 	bic.w	r3, r3, #4
   205aa:	b2da      	uxtb	r2, r3
   205ac:	4b36      	ldr	r3, [pc, #216]	; (20688 <fitBtnCback+0x1b8>)
   205ae:	701a      	strb	r2, [r3, #0]
        }

        HrpsSetFlags(fitHrmFlags);
   205b0:	4b35      	ldr	r3, [pc, #212]	; (20688 <fitBtnCback+0x1b8>)
   205b2:	781b      	ldrb	r3, [r3, #0]
   205b4:	4618      	mov	r0, r3
   205b6:	f7fe ff4f 	bl	1f458 <HrpsSetFlags>
        break;
   205ba:	e05e      	b.n	2067a <fitBtnCback+0x1aa>

      case APP_UI_BTN_2_LONG:
        /* Toggle HRM RR Interval feature flag */
        if (fitHrmFlags & CH_HRM_FLAGS_RR_INTERVAL)
   205bc:	4b32      	ldr	r3, [pc, #200]	; (20688 <fitBtnCback+0x1b8>)
   205be:	781b      	ldrb	r3, [r3, #0]
   205c0:	f003 0310 	and.w	r3, r3, #16
   205c4:	2b00      	cmp	r3, #0
   205c6:	d007      	beq.n	205d8 <fitBtnCback+0x108>
        {
          fitHrmFlags &= ~CH_HRM_FLAGS_RR_INTERVAL;
   205c8:	4b2f      	ldr	r3, [pc, #188]	; (20688 <fitBtnCback+0x1b8>)
   205ca:	781b      	ldrb	r3, [r3, #0]
   205cc:	f023 0310 	bic.w	r3, r3, #16
   205d0:	b2da      	uxtb	r2, r3
   205d2:	4b2d      	ldr	r3, [pc, #180]	; (20688 <fitBtnCback+0x1b8>)
   205d4:	701a      	strb	r2, [r3, #0]
   205d6:	e006      	b.n	205e6 <fitBtnCback+0x116>
        }
        else
        {
          fitHrmFlags |= CH_HRM_FLAGS_RR_INTERVAL;
   205d8:	4b2b      	ldr	r3, [pc, #172]	; (20688 <fitBtnCback+0x1b8>)
   205da:	781b      	ldrb	r3, [r3, #0]
   205dc:	f043 0310 	orr.w	r3, r3, #16
   205e0:	b2da      	uxtb	r2, r3
   205e2:	4b29      	ldr	r3, [pc, #164]	; (20688 <fitBtnCback+0x1b8>)
   205e4:	701a      	strb	r2, [r3, #0]
        }

        HrpsSetFlags(fitHrmFlags);
   205e6:	4b28      	ldr	r3, [pc, #160]	; (20688 <fitBtnCback+0x1b8>)
   205e8:	781b      	ldrb	r3, [r3, #0]
   205ea:	4618      	mov	r0, r3
   205ec:	f7fe ff34 	bl	1f458 <HrpsSetFlags>
        break;
   205f0:	e043      	b.n	2067a <fitBtnCback+0x1aa>
    }
  }
  /* button actions when not connected */
  else
  {
    switch (btn)
   205f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   205f6:	3b02      	subs	r3, #2
   205f8:	2b05      	cmp	r3, #5
   205fa:	d83d      	bhi.n	20678 <fitBtnCback+0x1a8>
   205fc:	a201      	add	r2, pc, #4	; (adr r2, 20604 <fitBtnCback+0x134>)
   205fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   20602:	bf00      	nop
   20604:	0002061d 	.word	0x0002061d
   20608:	00020625 	.word	0x00020625
   2060c:	00020633 	.word	0x00020633
   20610:	00020679 	.word	0x00020679
   20614:	00020679 	.word	0x00020679
   20618:	0002063f 	.word	0x0002063f
    {
      case APP_UI_BTN_1_SHORT:
        /* start or restart advertising */
        AppAdvStart(APP_MODE_AUTO_INIT);
   2061c:	2002      	movs	r0, #2
   2061e:	f004 ffb3 	bl	25588 <AppAdvStart>
        break;
   20622:	e02a      	b.n	2067a <fitBtnCback+0x1aa>

      case APP_UI_BTN_1_MED:
        /* enter discoverable and bondable mode mode */
        AppSetBondable(TRUE);
   20624:	2001      	movs	r0, #1
   20626:	f004 fea3 	bl	25370 <AppSetBondable>
        AppAdvStart(APP_MODE_DISCOVERABLE);
   2062a:	2001      	movs	r0, #1
   2062c:	f004 ffac 	bl	25588 <AppAdvStart>
        break;
   20630:	e023      	b.n	2067a <fitBtnCback+0x1aa>

      case APP_UI_BTN_1_LONG:
        /* clear all bonding info */
        AppSlaveClearAllBondingInfo();
   20632:	f004 feab 	bl	2538c <AppSlaveClearAllBondingInfo>

        /* restart advertising */
        AppAdvStart(APP_MODE_AUTO_INIT);
   20636:	2002      	movs	r0, #2
   20638:	f004 ffa6 	bl	25588 <AppAdvStart>
        break;
   2063c:	e01d      	b.n	2067a <fitBtnCback+0x1aa>

      case APP_UI_BTN_2_SHORT:
        /* Toggle HRM Flag for 8 and 16 bit values */
        if (fitHrmFlags & CH_HRM_FLAGS_VALUE_16BIT)
   2063e:	4b12      	ldr	r3, [pc, #72]	; (20688 <fitBtnCback+0x1b8>)
   20640:	781b      	ldrb	r3, [r3, #0]
   20642:	f003 0301 	and.w	r3, r3, #1
   20646:	2b00      	cmp	r3, #0
   20648:	d007      	beq.n	2065a <fitBtnCback+0x18a>
        {
          fitHrmFlags &= ~CH_HRM_FLAGS_VALUE_16BIT;
   2064a:	4b0f      	ldr	r3, [pc, #60]	; (20688 <fitBtnCback+0x1b8>)
   2064c:	781b      	ldrb	r3, [r3, #0]
   2064e:	f023 0301 	bic.w	r3, r3, #1
   20652:	b2da      	uxtb	r2, r3
   20654:	4b0c      	ldr	r3, [pc, #48]	; (20688 <fitBtnCback+0x1b8>)
   20656:	701a      	strb	r2, [r3, #0]
   20658:	e006      	b.n	20668 <fitBtnCback+0x198>
        }
        else
        {
          fitHrmFlags |= CH_HRM_FLAGS_VALUE_16BIT;
   2065a:	4b0b      	ldr	r3, [pc, #44]	; (20688 <fitBtnCback+0x1b8>)
   2065c:	781b      	ldrb	r3, [r3, #0]
   2065e:	f043 0301 	orr.w	r3, r3, #1
   20662:	b2da      	uxtb	r2, r3
   20664:	4b08      	ldr	r3, [pc, #32]	; (20688 <fitBtnCback+0x1b8>)
   20666:	701a      	strb	r2, [r3, #0]
        }

        HrpsSetFlags(fitHrmFlags);
   20668:	4b07      	ldr	r3, [pc, #28]	; (20688 <fitBtnCback+0x1b8>)
   2066a:	781b      	ldrb	r3, [r3, #0]
   2066c:	4618      	mov	r0, r3
   2066e:	f7fe fef3 	bl	1f458 <HrpsSetFlags>
        break;
   20672:	e002      	b.n	2067a <fitBtnCback+0x1aa>
        break;
   20674:	bf00      	nop
   20676:	e000      	b.n	2067a <fitBtnCback+0x1aa>

      default:
        break;
   20678:	bf00      	nop
    }
  }
}
   2067a:	bf00      	nop
   2067c:	b005      	add	sp, #20
   2067e:	f85d fb04 	ldr.w	pc, [sp], #4
   20682:	bf00      	nop
   20684:	10002bbc 	.word	0x10002bbc
   20688:	10002bba 	.word	0x10002bba

0002068c <fitProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitProcMsg(fitMsg_t *pMsg)
{
   2068c:	b500      	push	{lr}
   2068e:	b085      	sub	sp, #20
   20690:	9001      	str	r0, [sp, #4]
  uint8_t uiEvent = APP_UI_NONE;
   20692:	2300      	movs	r3, #0
   20694:	f88d 300f 	strb.w	r3, [sp, #15]

  switch(pMsg->hdr.event)
   20698:	9b01      	ldr	r3, [sp, #4]
   2069a:	789b      	ldrb	r3, [r3, #2]
   2069c:	3b0f      	subs	r3, #15
   2069e:	2b93      	cmp	r3, #147	; 0x93
   206a0:	f200 81a0 	bhi.w	209e4 <fitProcMsg+0x358>
   206a4:	a201      	add	r2, pc, #4	; (adr r2, 206ac <fitProcMsg+0x20>)
   206a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   206aa:	bf00      	nop
   206ac:	0002091f 	.word	0x0002091f
   206b0:	00020931 	.word	0x00020931
   206b4:	000209e5 	.word	0x000209e5
   206b8:	000209e5 	.word	0x000209e5
   206bc:	000209e5 	.word	0x000209e5
   206c0:	000209e5 	.word	0x000209e5
   206c4:	000209e5 	.word	0x000209e5
   206c8:	000209e5 	.word	0x000209e5
   206cc:	000209e5 	.word	0x000209e5
   206d0:	000209e5 	.word	0x000209e5
   206d4:	000209e5 	.word	0x000209e5
   206d8:	000209e5 	.word	0x000209e5
   206dc:	000209e5 	.word	0x000209e5
   206e0:	000209e5 	.word	0x000209e5
   206e4:	000209e5 	.word	0x000209e5
   206e8:	000209e5 	.word	0x000209e5
   206ec:	000209e5 	.word	0x000209e5
   206f0:	00020939 	.word	0x00020939
   206f4:	0002095f 	.word	0x0002095f
   206f8:	00020967 	.word	0x00020967
   206fc:	000209e5 	.word	0x000209e5
   20700:	000209e5 	.word	0x000209e5
   20704:	000209e5 	.word	0x000209e5
   20708:	000209e5 	.word	0x000209e5
   2070c:	0002096f 	.word	0x0002096f
   20710:	00020987 	.word	0x00020987
   20714:	000209e5 	.word	0x000209e5
   20718:	00020995 	.word	0x00020995
   2071c:	000209a1 	.word	0x000209a1
   20720:	000209ad 	.word	0x000209ad
   20724:	000209b5 	.word	0x000209b5
   20728:	000209bd 	.word	0x000209bd
   2072c:	000209e5 	.word	0x000209e5
   20730:	000209e5 	.word	0x000209e5
   20734:	000209e5 	.word	0x000209e5
   20738:	000209e5 	.word	0x000209e5
   2073c:	000209e5 	.word	0x000209e5
   20740:	000209c7 	.word	0x000209c7
   20744:	000209d3 	.word	0x000209d3
   20748:	000209e5 	.word	0x000209e5
   2074c:	000209e5 	.word	0x000209e5
   20750:	000209e5 	.word	0x000209e5
   20754:	000209e5 	.word	0x000209e5
   20758:	000209e5 	.word	0x000209e5
   2075c:	000209e5 	.word	0x000209e5
   20760:	000209e5 	.word	0x000209e5
   20764:	000209e5 	.word	0x000209e5
   20768:	000209e5 	.word	0x000209e5
   2076c:	000209e5 	.word	0x000209e5
   20770:	000209e5 	.word	0x000209e5
   20774:	000209e5 	.word	0x000209e5
   20778:	000209e5 	.word	0x000209e5
   2077c:	000209e5 	.word	0x000209e5
   20780:	000209e5 	.word	0x000209e5
   20784:	000209e5 	.word	0x000209e5
   20788:	000209e5 	.word	0x000209e5
   2078c:	0002094f 	.word	0x0002094f
   20790:	00020957 	.word	0x00020957
   20794:	000209e5 	.word	0x000209e5
   20798:	000209e5 	.word	0x000209e5
   2079c:	000209e5 	.word	0x000209e5
   207a0:	000209e5 	.word	0x000209e5
   207a4:	000209e5 	.word	0x000209e5
   207a8:	000209e5 	.word	0x000209e5
   207ac:	000209e5 	.word	0x000209e5
   207b0:	000209e5 	.word	0x000209e5
   207b4:	000209e5 	.word	0x000209e5
   207b8:	000209e5 	.word	0x000209e5
   207bc:	000209e5 	.word	0x000209e5
   207c0:	000209e5 	.word	0x000209e5
   207c4:	000209e5 	.word	0x000209e5
   207c8:	000209e5 	.word	0x000209e5
   207cc:	000209e5 	.word	0x000209e5
   207d0:	000209e5 	.word	0x000209e5
   207d4:	000209e5 	.word	0x000209e5
   207d8:	000209e5 	.word	0x000209e5
   207dc:	000209e5 	.word	0x000209e5
   207e0:	000209e5 	.word	0x000209e5
   207e4:	000209e5 	.word	0x000209e5
   207e8:	000209e5 	.word	0x000209e5
   207ec:	000209e5 	.word	0x000209e5
   207f0:	000209e5 	.word	0x000209e5
   207f4:	000209e5 	.word	0x000209e5
   207f8:	000209e5 	.word	0x000209e5
   207fc:	000209e5 	.word	0x000209e5
   20800:	000209e5 	.word	0x000209e5
   20804:	000209e5 	.word	0x000209e5
   20808:	000209dd 	.word	0x000209dd
   2080c:	000209e5 	.word	0x000209e5
   20810:	000209e5 	.word	0x000209e5
   20814:	000209e5 	.word	0x000209e5
   20818:	000209e5 	.word	0x000209e5
   2081c:	000209e5 	.word	0x000209e5
   20820:	000209e5 	.word	0x000209e5
   20824:	000209e5 	.word	0x000209e5
   20828:	000209e5 	.word	0x000209e5
   2082c:	000209e5 	.word	0x000209e5
   20830:	000209e5 	.word	0x000209e5
   20834:	000209e5 	.word	0x000209e5
   20838:	000209e5 	.word	0x000209e5
   2083c:	000209e5 	.word	0x000209e5
   20840:	000209e5 	.word	0x000209e5
   20844:	000209e5 	.word	0x000209e5
   20848:	000209e5 	.word	0x000209e5
   2084c:	000209e5 	.word	0x000209e5
   20850:	000209e5 	.word	0x000209e5
   20854:	000209e5 	.word	0x000209e5
   20858:	000209e5 	.word	0x000209e5
   2085c:	000209e5 	.word	0x000209e5
   20860:	000209e5 	.word	0x000209e5
   20864:	000209e5 	.word	0x000209e5
   20868:	000209e5 	.word	0x000209e5
   2086c:	000209e5 	.word	0x000209e5
   20870:	000209e5 	.word	0x000209e5
   20874:	000209e5 	.word	0x000209e5
   20878:	000209e5 	.word	0x000209e5
   2087c:	000209e5 	.word	0x000209e5
   20880:	000209e5 	.word	0x000209e5
   20884:	000209e5 	.word	0x000209e5
   20888:	000209e5 	.word	0x000209e5
   2088c:	000209e5 	.word	0x000209e5
   20890:	000209e5 	.word	0x000209e5
   20894:	000209e5 	.word	0x000209e5
   20898:	000209e5 	.word	0x000209e5
   2089c:	000209e5 	.word	0x000209e5
   208a0:	000209e5 	.word	0x000209e5
   208a4:	000209e5 	.word	0x000209e5
   208a8:	000209e5 	.word	0x000209e5
   208ac:	000209e5 	.word	0x000209e5
   208b0:	000209e5 	.word	0x000209e5
   208b4:	000209e5 	.word	0x000209e5
   208b8:	000209e5 	.word	0x000209e5
   208bc:	000209e5 	.word	0x000209e5
   208c0:	000209e5 	.word	0x000209e5
   208c4:	000209e5 	.word	0x000209e5
   208c8:	000209e5 	.word	0x000209e5
   208cc:	000209e5 	.word	0x000209e5
   208d0:	000209e5 	.word	0x000209e5
   208d4:	000209e5 	.word	0x000209e5
   208d8:	000209e5 	.word	0x000209e5
   208dc:	000209e5 	.word	0x000209e5
   208e0:	000209e5 	.word	0x000209e5
   208e4:	000209e5 	.word	0x000209e5
   208e8:	000209e5 	.word	0x000209e5
   208ec:	000209e5 	.word	0x000209e5
   208f0:	0002090b 	.word	0x0002090b
   208f4:	00020915 	.word	0x00020915
   208f8:	000208fd 	.word	0x000208fd
  {
    case FIT_RUNNING_TIMER_IND:
      fitSendRunningSpeedMeasurement((dmConnId_t)pMsg->ccc.hdr.param);
   208fc:	9b01      	ldr	r3, [sp, #4]
   208fe:	881b      	ldrh	r3, [r3, #0]
   20900:	b2db      	uxtb	r3, r3
   20902:	4618      	mov	r0, r3
   20904:	f7ff fd0a 	bl	2031c <fitSendRunningSpeedMeasurement>
      break;
   20908:	e06d      	b.n	209e6 <fitProcMsg+0x35a>

    case FIT_HR_TIMER_IND:
      HrpsProcMsg(&pMsg->hdr);
   2090a:	9b01      	ldr	r3, [sp, #4]
   2090c:	4618      	mov	r0, r3
   2090e:	f7fe fd5d 	bl	1f3cc <HrpsProcMsg>
      break;
   20912:	e068      	b.n	209e6 <fitProcMsg+0x35a>

    case FIT_BATT_TIMER_IND:
      BasProcMsg(&pMsg->hdr);
   20914:	9b01      	ldr	r3, [sp, #4]
   20916:	4618      	mov	r0, r3
   20918:	f7fc f9ec 	bl	1ccf4 <BasProcMsg>
      break;
   2091c:	e063      	b.n	209e6 <fitProcMsg+0x35a>

    case ATTS_HANDLE_VALUE_CNF:
      HrpsProcMsg(&pMsg->hdr);
   2091e:	9b01      	ldr	r3, [sp, #4]
   20920:	4618      	mov	r0, r3
   20922:	f7fe fd53 	bl	1f3cc <HrpsProcMsg>
      BasProcMsg(&pMsg->hdr);
   20926:	9b01      	ldr	r3, [sp, #4]
   20928:	4618      	mov	r0, r3
   2092a:	f7fc f9e3 	bl	1ccf4 <BasProcMsg>
      break;
   2092e:	e05a      	b.n	209e6 <fitProcMsg+0x35a>

    case ATTS_CCC_STATE_IND:
      fitProcCccState(pMsg);
   20930:	9801      	ldr	r0, [sp, #4]
   20932:	f7ff fd47 	bl	203c4 <fitProcCccState>
      break;
   20936:	e056      	b.n	209e6 <fitProcMsg+0x35a>
    case ATT_MTU_UPDATE_IND:
      APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
      break;

    case DM_RESET_CMPL_IND:
      AttsCalculateDbHash();
   20938:	f7f9 fb40 	bl	19fbc <AttsCalculateDbHash>
      DmSecGenerateEccKeyReq();
   2093c:	f7f6 f8c4 	bl	16ac8 <DmSecGenerateEccKeyReq>
      fitSetup(pMsg);
   20940:	9801      	ldr	r0, [sp, #4]
   20942:	f7ff fda3 	bl	2048c <fitSetup>
      uiEvent = APP_UI_RESET_CMPL;
   20946:	2301      	movs	r3, #1
   20948:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   2094c:	e04b      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_ADV_SET_START_IND:
      uiEvent = APP_UI_ADV_SET_START_IND;
   2094e:	2312      	movs	r3, #18
   20950:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   20954:	e047      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_ADV_SET_STOP_IND:
      uiEvent = APP_UI_ADV_SET_STOP_IND;
   20956:	2313      	movs	r3, #19
   20958:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   2095c:	e043      	b.n	209e6 <fitProcMsg+0x35a>

     case DM_ADV_START_IND:
      uiEvent = APP_UI_ADV_START;
   2095e:	2303      	movs	r3, #3
   20960:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   20964:	e03f      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_ADV_STOP_IND:
      uiEvent = APP_UI_ADV_STOP;
   20966:	2304      	movs	r3, #4
   20968:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   2096c:	e03b      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_CONN_OPEN_IND:
      HrpsProcMsg(&pMsg->hdr);
   2096e:	9b01      	ldr	r3, [sp, #4]
   20970:	4618      	mov	r0, r3
   20972:	f7fe fd2b 	bl	1f3cc <HrpsProcMsg>
      BasProcMsg(&pMsg->hdr);
   20976:	9b01      	ldr	r3, [sp, #4]
   20978:	4618      	mov	r0, r3
   2097a:	f7fc f9bb 	bl	1ccf4 <BasProcMsg>
      // AppSlaveSecurityReq(1);
      uiEvent = APP_UI_CONN_OPEN;
   2097e:	2308      	movs	r3, #8
   20980:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   20984:	e02f      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_CONN_CLOSE_IND:
      fitClose(pMsg);
   20986:	9801      	ldr	r0, [sp, #4]
   20988:	f7ff fd68 	bl	2045c <fitClose>
      uiEvent = APP_UI_CONN_CLOSE;
   2098c:	2309      	movs	r3, #9
   2098e:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   20992:	e028      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_SEC_PAIR_CMPL_IND:
      DmSecGenerateEccKeyReq();
   20994:	f7f6 f898 	bl	16ac8 <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   20998:	230a      	movs	r3, #10
   2099a:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   2099e:	e022      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_SEC_PAIR_FAIL_IND:
      DmSecGenerateEccKeyReq();
   209a0:	f7f6 f892 	bl	16ac8 <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   209a4:	230b      	movs	r3, #11
   209a6:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   209aa:	e01c      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_SEC_ENCRYPT_IND:
      uiEvent = APP_UI_SEC_ENCRYPT;
   209ac:	230c      	movs	r3, #12
   209ae:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   209b2:	e018      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_SEC_ENCRYPT_FAIL_IND:
      uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   209b4:	230d      	movs	r3, #13
   209b6:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   209ba:	e014      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_SEC_AUTH_REQ_IND:
      AppHandlePasskey(&pMsg->dm.authReq);
   209bc:	9b01      	ldr	r3, [sp, #4]
   209be:	4618      	mov	r0, r3
   209c0:	f003 f8b6 	bl	23b30 <AppHandlePasskey>
      break;
   209c4:	e00f      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_SEC_ECC_KEY_IND:

      DmSecSetEccKey(&pMsg->dm.eccMsg.data.key);
   209c6:	9b01      	ldr	r3, [sp, #4]
   209c8:	3304      	adds	r3, #4
   209ca:	4618      	mov	r0, r3
   209cc:	f7f6 f888 	bl	16ae0 <DmSecSetEccKey>
      break;
   209d0:	e009      	b.n	209e6 <fitProcMsg+0x35a>

    case DM_SEC_COMPARE_IND:
      AppHandleNumericComparison(&pMsg->dm.cnfInd);
   209d2:	9b01      	ldr	r3, [sp, #4]
   209d4:	4618      	mov	r0, r3
   209d6:	f003 f8e7 	bl	23ba8 <AppHandleNumericComparison>
      break;
   209da:	e004      	b.n	209e6 <fitProcMsg+0x35a>
    case DM_PRIV_CLEAR_RES_LIST_IND:
      APP_TRACE_INFO1("Clear resolving list status 0x%02x", pMsg->hdr.status);
      break;

    case DM_HW_ERROR_IND:
      uiEvent = APP_UI_HW_ERROR;
   209dc:	231b      	movs	r3, #27
   209de:	f88d 300f 	strb.w	r3, [sp, #15]
      break;
   209e2:	e000      	b.n	209e6 <fitProcMsg+0x35a>
        #endif
      }
      break;
      
    default:
      break;
   209e4:	bf00      	nop
  }

  if (uiEvent != APP_UI_NONE)
   209e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   209ea:	2b00      	cmp	r3, #0
   209ec:	d004      	beq.n	209f8 <fitProcMsg+0x36c>
  {
    AppUiAction(uiEvent);
   209ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   209f2:	4618      	mov	r0, r3
   209f4:	f7ec f86c 	bl	cad0 <AppUiAction>
  }
}
   209f8:	bf00      	nop
   209fa:	b005      	add	sp, #20
   209fc:	f85d fb04 	ldr.w	pc, [sp], #4

00020a00 <FitHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FitHandlerInit(wsfHandlerId_t handlerId)
{
   20a00:	b500      	push	{lr}
   20a02:	b083      	sub	sp, #12
   20a04:	4603      	mov	r3, r0
   20a06:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_TRACE_INFO0("FitHandlerInit");

  /* store handler ID */
  fitHandlerId = handlerId;
   20a0a:	4a16      	ldr	r2, [pc, #88]	; (20a64 <FitHandlerInit+0x64>)
   20a0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20a10:	7013      	strb	r3, [r2, #0]

  /* Set configuration pointers */
  pAppAdvCfg = (appAdvCfg_t *) &fitAdvCfg;
   20a12:	4b15      	ldr	r3, [pc, #84]	; (20a68 <FitHandlerInit+0x68>)
   20a14:	4a15      	ldr	r2, [pc, #84]	; (20a6c <FitHandlerInit+0x6c>)
   20a16:	601a      	str	r2, [r3, #0]
  pAppSlaveCfg = (appSlaveCfg_t *) &fitSlaveCfg;
   20a18:	4b15      	ldr	r3, [pc, #84]	; (20a70 <FitHandlerInit+0x70>)
   20a1a:	4a16      	ldr	r2, [pc, #88]	; (20a74 <FitHandlerInit+0x74>)
   20a1c:	601a      	str	r2, [r3, #0]
  pAppSecCfg = (appSecCfg_t *) &fitSecCfg;
   20a1e:	4b16      	ldr	r3, [pc, #88]	; (20a78 <FitHandlerInit+0x78>)
   20a20:	4a16      	ldr	r2, [pc, #88]	; (20a7c <FitHandlerInit+0x7c>)
   20a22:	601a      	str	r2, [r3, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &fitUpdateCfg;
   20a24:	4b16      	ldr	r3, [pc, #88]	; (20a80 <FitHandlerInit+0x80>)
   20a26:	4a17      	ldr	r2, [pc, #92]	; (20a84 <FitHandlerInit+0x84>)
   20a28:	601a      	str	r2, [r3, #0]

  /* Initialize application framework */
  AppSlaveInit();
   20a2a:	f004 f939 	bl	24ca0 <AppSlaveInit>
  AppServerInit();
   20a2e:	f003 fb0f 	bl	24050 <AppServerInit>

  /* Set stack configuration pointers */
  pSmpCfg = (smpCfg_t *) &fitSmpCfg;
   20a32:	4b15      	ldr	r3, [pc, #84]	; (20a88 <FitHandlerInit+0x88>)
   20a34:	4a15      	ldr	r2, [pc, #84]	; (20a8c <FitHandlerInit+0x8c>)
   20a36:	601a      	str	r2, [r3, #0]

  /* initialize heart rate profile sensor */
  HrpsInit(handlerId, (hrpsCfg_t *) &fitHrpsCfg);
   20a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20a3c:	4914      	ldr	r1, [pc, #80]	; (20a90 <FitHandlerInit+0x90>)
   20a3e:	4618      	mov	r0, r3
   20a40:	f7fe fc60 	bl	1f304 <HrpsInit>
  HrpsSetFlags(fitHrmFlags);
   20a44:	4b13      	ldr	r3, [pc, #76]	; (20a94 <FitHandlerInit+0x94>)
   20a46:	781b      	ldrb	r3, [r3, #0]
   20a48:	4618      	mov	r0, r3
   20a4a:	f7fe fd05 	bl	1f458 <HrpsSetFlags>

  /* initialize battery service server */
  BasInit(handlerId, (basCfg_t *) &fitBasCfg);
   20a4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20a52:	4911      	ldr	r1, [pc, #68]	; (20a98 <FitHandlerInit+0x98>)
   20a54:	4618      	mov	r0, r3
   20a56:	f7fc f8c9 	bl	1cbec <BasInit>
}
   20a5a:	bf00      	nop
   20a5c:	b003      	add	sp, #12
   20a5e:	f85d fb04 	ldr.w	pc, [sp], #4
   20a62:	bf00      	nop
   20a64:	10005254 	.word	0x10005254
   20a68:	1000794c 	.word	0x1000794c
   20a6c:	000287a8 	.word	0x000287a8
   20a70:	10007950 	.word	0x10007950
   20a74:	000287b4 	.word	0x000287b4
   20a78:	10007954 	.word	0x10007954
   20a7c:	000287b8 	.word	0x000287b8
   20a80:	10007958 	.word	0x10007958
   20a84:	000287c0 	.word	0x000287c0
   20a88:	10002bb4 	.word	0x10002bb4
   20a8c:	000287dc 	.word	0x000287dc
   20a90:	000287d0 	.word	0x000287d0
   20a94:	10002bba 	.word	0x10002bba
   20a98:	000287d4 	.word	0x000287d4

00020a9c <FitHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FitHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   20a9c:	b500      	push	{lr}
   20a9e:	b083      	sub	sp, #12
   20aa0:	4603      	mov	r3, r0
   20aa2:	9100      	str	r1, [sp, #0]
   20aa4:	f88d 3007 	strb.w	r3, [sp, #7]
  if (pMsg != NULL)
   20aa8:	9b00      	ldr	r3, [sp, #0]
   20aaa:	2b00      	cmp	r3, #0
   20aac:	d01c      	beq.n	20ae8 <FitHandler+0x4c>
  {
    APP_TRACE_INFO1("Fit got evt %d", pMsg->event);

    /* process ATT messages */
    if (pMsg->event >= ATT_CBACK_START && pMsg->event <= ATT_CBACK_END)
   20aae:	9b00      	ldr	r3, [sp, #0]
   20ab0:	789b      	ldrb	r3, [r3, #2]
   20ab2:	2b01      	cmp	r3, #1
   20ab4:	d907      	bls.n	20ac6 <FitHandler+0x2a>
   20ab6:	9b00      	ldr	r3, [sp, #0]
   20ab8:	789b      	ldrb	r3, [r3, #2]
   20aba:	2b12      	cmp	r3, #18
   20abc:	d803      	bhi.n	20ac6 <FitHandler+0x2a>
    {
      /* process server-related ATT messages */
      AppServerProcAttMsg(pMsg);
   20abe:	9800      	ldr	r0, [sp, #0]
   20ac0:	f003 faaf 	bl	24022 <AppServerProcAttMsg>
   20ac4:	e00d      	b.n	20ae2 <FitHandler+0x46>
    }
    /* process DM messages */
    else if (pMsg->event >= DM_CBACK_START && pMsg->event <= DM_CBACK_END)
   20ac6:	9b00      	ldr	r3, [sp, #0]
   20ac8:	789b      	ldrb	r3, [r3, #2]
   20aca:	2b1f      	cmp	r3, #31
   20acc:	d909      	bls.n	20ae2 <FitHandler+0x46>
   20ace:	9b00      	ldr	r3, [sp, #0]
   20ad0:	789b      	ldrb	r3, [r3, #2]
   20ad2:	2b68      	cmp	r3, #104	; 0x68
   20ad4:	d805      	bhi.n	20ae2 <FitHandler+0x46>
    {
      /* process advertising and connection-related messages */
      AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   20ad6:	9800      	ldr	r0, [sp, #0]
   20ad8:	f004 f934 	bl	24d44 <AppSlaveProcDmMsg>

      /* process security-related messages */
      AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   20adc:	9800      	ldr	r0, [sp, #0]
   20ade:	f004 fbc5 	bl	2526c <AppSlaveSecProcDmMsg>
    }

    /* perform profile and user interface-related operations */
    fitProcMsg((fitMsg_t *) pMsg);
   20ae2:	9800      	ldr	r0, [sp, #0]
   20ae4:	f7ff fdd2 	bl	2068c <fitProcMsg>
  }
}
   20ae8:	bf00      	nop
   20aea:	b003      	add	sp, #12
   20aec:	f85d fb04 	ldr.w	pc, [sp], #4

00020af0 <FitStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FitStart(void)
{
   20af0:	b508      	push	{r3, lr}
  /* Register for stack callbacks */
  DmRegister(fitDmCback);
   20af2:	481a      	ldr	r0, [pc, #104]	; (20b5c <FitStart+0x6c>)
   20af4:	f7f5 fa86 	bl	16004 <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, fitDmCback);
   20af8:	4918      	ldr	r1, [pc, #96]	; (20b5c <FitStart+0x6c>)
   20afa:	2003      	movs	r0, #3
   20afc:	f7f4 fd52 	bl	155a4 <DmConnRegister>
  AttRegister(fitAttCback);
   20b00:	4817      	ldr	r0, [pc, #92]	; (20b60 <FitStart+0x70>)
   20b02:	f7fb fb9d 	bl	1c240 <AttRegister>
  AttConnRegister(AppServerConnCback);
   20b06:	4817      	ldr	r0, [pc, #92]	; (20b64 <FitStart+0x74>)
   20b08:	f7fb fbba 	bl	1c280 <AttConnRegister>
  AttsCccRegister(FIT_NUM_CCC_IDX, (attsCccSet_t *) fitCccSet, fitCccCback);
   20b0c:	4a16      	ldr	r2, [pc, #88]	; (20b68 <FitStart+0x78>)
   20b0e:	4917      	ldr	r1, [pc, #92]	; (20b6c <FitStart+0x7c>)
   20b10:	2004      	movs	r0, #4
   20b12:	f7f8 f921 	bl	18d58 <AttsCccRegister>

  /* Register for app framework callbacks */
  AppUiBtnRegister(fitBtnCback);
   20b16:	4816      	ldr	r0, [pc, #88]	; (20b70 <FitStart+0x80>)
   20b18:	f7ec f84c 	bl	cbb4 <AppUiBtnRegister>

  /* Initialize attribute server database */
  SvcCoreGattCbackRegister(GattReadCback, GattWriteCback);
   20b1c:	4915      	ldr	r1, [pc, #84]	; (20b74 <FitStart+0x84>)
   20b1e:	4816      	ldr	r0, [pc, #88]	; (20b78 <FitStart+0x88>)
   20b20:	f002 ff26 	bl	23970 <SvcCoreGattCbackRegister>
  SvcCoreAddGroup();
   20b24:	f002 ff16 	bl	23954 <SvcCoreAddGroup>
  SvcHrsCbackRegister(NULL, HrpsWriteCback);
   20b28:	4914      	ldr	r1, [pc, #80]	; (20b7c <FitStart+0x8c>)
   20b2a:	2000      	movs	r0, #0
   20b2c:	f002 ff4c 	bl	239c8 <SvcHrsCbackRegister>
  SvcHrsAddGroup();
   20b30:	f002 ff42 	bl	239b8 <SvcHrsAddGroup>
  SvcDisAddGroup();
   20b34:	f002 ff38 	bl	239a8 <SvcDisAddGroup>
  SvcBattCbackRegister(BasReadCback, NULL);
   20b38:	2100      	movs	r1, #0
   20b3a:	4811      	ldr	r0, [pc, #68]	; (20b80 <FitStart+0x90>)
   20b3c:	f002 fefc 	bl	23938 <SvcBattCbackRegister>
  SvcBattAddGroup();
   20b40:	f002 fef2 	bl	23928 <SvcBattAddGroup>
  SvcRscsAddGroup();
   20b44:	f002 ff4e 	bl	239e4 <SvcRscsAddGroup>

  /* Set Service Changed CCCD index. */
  GattSetSvcChangedIdx(FIT_GATT_SC_CCC_IDX);
   20b48:	2000      	movs	r0, #0
   20b4a:	f7f6 fa43 	bl	16fd4 <GattSetSvcChangedIdx>

  /* Set running speed and cadence features */
  RscpsSetFeatures(RSCS_ALL_FEATURES);
   20b4e:	2007      	movs	r0, #7
   20b50:	f7fe fc90 	bl	1f474 <RscpsSetFeatures>

  /* Reset the device */
  DmDevReset();
   20b54:	f7f5 f9f8 	bl	15f48 <DmDevReset>
}
   20b58:	bf00      	nop
   20b5a:	bd08      	pop	{r3, pc}
   20b5c:	000201fd 	.word	0x000201fd
   20b60:	00020249 	.word	0x00020249
   20b64:	00023d9b 	.word	0x00023d9b
   20b68:	000202a5 	.word	0x000202a5
   20b6c:	0002880c 	.word	0x0002880c
   20b70:	000204d1 	.word	0x000204d1
   20b74:	00017121 	.word	0x00017121
   20b78:	000170d1 	.word	0x000170d1
   20b7c:	0001f411 	.word	0x0001f411
   20b80:	0001cd7d 	.word	0x0001cd7d

00020b84 <__NVIC_EnableIRQ>:
{
   20b84:	b082      	sub	sp, #8
   20b86:	4603      	mov	r3, r0
   20b88:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   20b8c:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   20b90:	2b00      	cmp	r3, #0
   20b92:	db0c      	blt.n	20bae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20b94:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20b98:	f003 021f 	and.w	r2, r3, #31
   20b9c:	4905      	ldr	r1, [pc, #20]	; (20bb4 <__NVIC_EnableIRQ+0x30>)
   20b9e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   20ba2:	095b      	lsrs	r3, r3, #5
   20ba4:	2001      	movs	r0, #1
   20ba6:	fa00 f202 	lsl.w	r2, r0, r2
   20baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   20bae:	bf00      	nop
   20bb0:	b002      	add	sp, #8
   20bb2:	4770      	bx	lr
   20bb4:	e000e100 	.word	0xe000e100

00020bb8 <__NVIC_DisableIRQ>:
{
   20bb8:	b082      	sub	sp, #8
   20bba:	4603      	mov	r3, r0
   20bbc:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
   20bc0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   20bc4:	2b00      	cmp	r3, #0
   20bc6:	db13      	blt.n	20bf0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20bc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20bcc:	f003 021f 	and.w	r2, r3, #31
   20bd0:	4909      	ldr	r1, [pc, #36]	; (20bf8 <__NVIC_DisableIRQ+0x40>)
   20bd2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
   20bd6:	095b      	lsrs	r3, r3, #5
   20bd8:	2001      	movs	r0, #1
   20bda:	fa00 f202 	lsl.w	r2, r0, r2
   20bde:	3320      	adds	r3, #32
   20be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   20be4:	f3bf 8f4f 	dsb	sy
}
   20be8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
   20bea:	f3bf 8f6f 	isb	sy
}
   20bee:	bf00      	nop
}
   20bf0:	bf00      	nop
   20bf2:	b002      	add	sp, #8
   20bf4:	4770      	bx	lr
   20bf6:	bf00      	nop
   20bf8:	e000e100 	.word	0xe000e100

00020bfc <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   20bfc:	b500      	push	{lr}
   20bfe:	b083      	sub	sp, #12
   20c00:	9001      	str	r0, [sp, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   20c02:	9b01      	ldr	r3, [sp, #4]
   20c04:	2b00      	cmp	r3, #0
   20c06:	d00c      	beq.n	20c22 <error_check+0x26>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   20c08:	4a08      	ldr	r2, [pc, #32]	; (20c2c <error_check+0x30>)
   20c0a:	9b01      	ldr	r3, [sp, #4]
   20c0c:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   20c0e:	4b08      	ldr	r3, [pc, #32]	; (20c30 <error_check+0x34>)
   20c10:	681b      	ldr	r3, [r3, #0]
   20c12:	2b00      	cmp	r3, #0
   20c14:	d005      	beq.n	20c22 <error_check+0x26>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   20c16:	4b06      	ldr	r3, [pc, #24]	; (20c30 <error_check+0x34>)
   20c18:	681b      	ldr	r3, [r3, #0]
   20c1a:	4a04      	ldr	r2, [pc, #16]	; (20c2c <error_check+0x30>)
   20c1c:	6812      	ldr	r2, [r2, #0]
   20c1e:	4610      	mov	r0, r2
   20c20:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   20c22:	bf00      	nop
   20c24:	b003      	add	sp, #12
   20c26:	f85d fb04 	ldr.w	pc, [sp], #4
   20c2a:	bf00      	nop
   20c2c:	10005bdc 	.word	0x10005bdc
   20c30:	10005bd8 	.word	0x10005bd8

00020c34 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
uint32_t
HciDrvRadioBoot(bool bColdBoot)
{
   20c34:	b530      	push	{r4, r5, lr}
   20c36:	b0a1      	sub	sp, #132	; 0x84
   20c38:	4603      	mov	r3, r0
   20c3a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32_t ui32NumXtalRetries = 0;
   20c3e:	2300      	movs	r3, #0
   20c40:	931f      	str	r3, [sp, #124]	; 0x7c


    g_ui32NumBytes     = 0;
   20c42:	4b70      	ldr	r3, [pc, #448]	; (20e04 <HciDrvRadioBoot+0x1d0>)
   20c44:	2200      	movs	r2, #0
   20c46:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   20c48:	4b6f      	ldr	r3, [pc, #444]	; (20e08 <HciDrvRadioBoot+0x1d4>)
   20c4a:	2200      	movs	r2, #0
   20c4c:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   20c4e:	2301      	movs	r3, #1
   20c50:	931e      	str	r3, [sp, #120]	; 0x78
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   20c52:	e094      	b.n	20d7e <HciDrvRadioBoot+0x14a>
    {
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   20c54:	496d      	ldr	r1, [pc, #436]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20c56:	2000      	movs	r0, #0
   20c58:	f005 f810 	bl	25c7c <am_hal_ble_initialize>
   20c5c:	901d      	str	r0, [sp, #116]	; 0x74
   20c5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   20c60:	2b00      	cmp	r3, #0
   20c62:	d004      	beq.n	20c6e <HciDrvRadioBoot+0x3a>
   20c64:	981d      	ldr	r0, [sp, #116]	; 0x74
   20c66:	f7ff ffc9 	bl	20bfc <error_check>
   20c6a:	2301      	movs	r3, #1
   20c6c:	e0c6      	b.n	20dfc <HciDrvRadioBoot+0x1c8>
        ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   20c6e:	4b67      	ldr	r3, [pc, #412]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20c70:	681b      	ldr	r3, [r3, #0]
   20c72:	2100      	movs	r1, #0
   20c74:	4618      	mov	r0, r3
   20c76:	f005 f8e3 	bl	25e40 <am_hal_ble_power_control>
   20c7a:	901c      	str	r0, [sp, #112]	; 0x70
   20c7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   20c7e:	2b00      	cmp	r3, #0
   20c80:	d004      	beq.n	20c8c <HciDrvRadioBoot+0x58>
   20c82:	981c      	ldr	r0, [sp, #112]	; 0x70
   20c84:	f7ff ffba 	bl	20bfc <error_check>
   20c88:	2301      	movs	r3, #1
   20c8a:	e0b7      	b.n	20dfc <HciDrvRadioBoot+0x1c8>

        am_hal_ble_config_t sBleConfig =
   20c8c:	4b60      	ldr	r3, [pc, #384]	; (20e10 <HciDrvRadioBoot+0x1dc>)
   20c8e:	ac10      	add	r4, sp, #64	; 0x40
   20c90:	461d      	mov	r5, r3
   20c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20c96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   20c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#endif
            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK(am_hal_ble_config(BLE, &sBleConfig));
   20c9e:	4b5b      	ldr	r3, [pc, #364]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20ca0:	681b      	ldr	r3, [r3, #0]
   20ca2:	aa10      	add	r2, sp, #64	; 0x40
   20ca4:	4611      	mov	r1, r2
   20ca6:	4618      	mov	r0, r3
   20ca8:	f005 f83e 	bl	25d28 <am_hal_ble_config>
   20cac:	901b      	str	r0, [sp, #108]	; 0x6c
   20cae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   20cb0:	2b00      	cmp	r3, #0
   20cb2:	d004      	beq.n	20cbe <HciDrvRadioBoot+0x8a>
   20cb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
   20cb6:	f7ff ffa1 	bl	20bfc <error_check>
   20cba:	2301      	movs	r3, #1
   20cbc:	e09e      	b.n	20dfc <HciDrvRadioBoot+0x1c8>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   20cbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20cc2:	2b00      	cmp	r3, #0
   20cc4:	d003      	beq.n	20cce <HciDrvRadioBoot+0x9a>
        {
            am_util_delay_ms(1000);
   20cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20cca:	f000 fe13 	bl	218f4 <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   20cce:	4b4f      	ldr	r3, [pc, #316]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20cd0:	681b      	ldr	r3, [r3, #0]
   20cd2:	4618      	mov	r0, r3
   20cd4:	f005 ff22 	bl	26b1c <am_hal_ble_boot>
   20cd8:	901e      	str	r0, [sp, #120]	; 0x78

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   20cda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   20cdc:	2b00      	cmp	r3, #0
   20cde:	d053      	beq.n	20d88 <HciDrvRadioBoot+0x154>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   20ce0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   20ce2:	4a4c      	ldr	r2, [pc, #304]	; (20e14 <HciDrvRadioBoot+0x1e0>)
   20ce4:	4293      	cmp	r3, r2
   20ce6:	d128      	bne.n	20d3a <HciDrvRadioBoot+0x106>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   20ce8:	4b48      	ldr	r3, [pc, #288]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20cea:	681b      	ldr	r3, [r3, #0]
   20cec:	2101      	movs	r1, #1
   20cee:	4618      	mov	r0, r3
   20cf0:	f005 f8a6 	bl	25e40 <am_hal_ble_power_control>
   20cf4:	9018      	str	r0, [sp, #96]	; 0x60
   20cf6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   20cf8:	2b00      	cmp	r3, #0
   20cfa:	d004      	beq.n	20d06 <HciDrvRadioBoot+0xd2>
   20cfc:	9818      	ldr	r0, [sp, #96]	; 0x60
   20cfe:	f7ff ff7d 	bl	20bfc <error_check>
   20d02:	2301      	movs	r3, #1
   20d04:	e07a      	b.n	20dfc <HciDrvRadioBoot+0x1c8>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
   20d06:	4b41      	ldr	r3, [pc, #260]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20d08:	681b      	ldr	r3, [r3, #0]
   20d0a:	4618      	mov	r0, r3
   20d0c:	f004 ffec 	bl	25ce8 <am_hal_ble_deinitialize>
   20d10:	9017      	str	r0, [sp, #92]	; 0x5c
   20d12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   20d14:	2b00      	cmp	r3, #0
   20d16:	d004      	beq.n	20d22 <HciDrvRadioBoot+0xee>
   20d18:	9817      	ldr	r0, [sp, #92]	; 0x5c
   20d1a:	f7ff ff6f 	bl	20bfc <error_check>
   20d1e:	2301      	movs	r3, #1
   20d20:	e06c      	b.n	20dfc <HciDrvRadioBoot+0x1c8>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   20d22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   20d24:	1c5a      	adds	r2, r3, #1
   20d26:	921f      	str	r2, [sp, #124]	; 0x7c
   20d28:	2b09      	cmp	r3, #9
   20d2a:	d804      	bhi.n	20d36 <HciDrvRadioBoot+0x102>
            {
                am_util_delay_ms(1000);
   20d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20d30:	f000 fde0 	bl	218f4 <am_util_delay_ms>
   20d34:	e023      	b.n	20d7e <HciDrvRadioBoot+0x14a>
            }
            else
            {
                return AM_HAL_STATUS_FAIL;
   20d36:	2301      	movs	r3, #1
   20d38:	e060      	b.n	20dfc <HciDrvRadioBoot+0x1c8>
            }
        }
        else
        {
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   20d3a:	4b34      	ldr	r3, [pc, #208]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20d3c:	681b      	ldr	r3, [r3, #0]
   20d3e:	2101      	movs	r1, #1
   20d40:	4618      	mov	r0, r3
   20d42:	f005 f87d 	bl	25e40 <am_hal_ble_power_control>
   20d46:	901a      	str	r0, [sp, #104]	; 0x68
   20d48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   20d4a:	2b00      	cmp	r3, #0
   20d4c:	d004      	beq.n	20d58 <HciDrvRadioBoot+0x124>
   20d4e:	981a      	ldr	r0, [sp, #104]	; 0x68
   20d50:	f7ff ff54 	bl	20bfc <error_check>
   20d54:	2301      	movs	r3, #1
   20d56:	e051      	b.n	20dfc <HciDrvRadioBoot+0x1c8>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
   20d58:	4b2c      	ldr	r3, [pc, #176]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20d5a:	681b      	ldr	r3, [r3, #0]
   20d5c:	4618      	mov	r0, r3
   20d5e:	f004 ffc3 	bl	25ce8 <am_hal_ble_deinitialize>
   20d62:	9019      	str	r0, [sp, #100]	; 0x64
   20d64:	9b19      	ldr	r3, [sp, #100]	; 0x64
   20d66:	2b00      	cmp	r3, #0
   20d68:	d004      	beq.n	20d74 <HciDrvRadioBoot+0x140>
   20d6a:	9819      	ldr	r0, [sp, #100]	; 0x64
   20d6c:	f7ff ff46 	bl	20bfc <error_check>
   20d70:	2301      	movs	r3, #1
   20d72:	e043      	b.n	20dfc <HciDrvRadioBoot+0x1c8>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   20d74:	981e      	ldr	r0, [sp, #120]	; 0x78
   20d76:	f7ff ff41 	bl	20bfc <error_check>
            return AM_HAL_STATUS_FAIL;
   20d7a:	2301      	movs	r3, #1
   20d7c:	e03e      	b.n	20dfc <HciDrvRadioBoot+0x1c8>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   20d7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   20d80:	2b00      	cmp	r3, #0
   20d82:	f47f af67 	bne.w	20c54 <HciDrvRadioBoot+0x20>
   20d86:	e000      	b.n	20d8a <HciDrvRadioBoot+0x156>
            break;
   20d88:	bf00      	nop
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   20d8a:	4b20      	ldr	r3, [pc, #128]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20d8c:	681b      	ldr	r3, [r3, #0]
   20d8e:	2108      	movs	r1, #8
   20d90:	4618      	mov	r0, r3
   20d92:	f005 ff43 	bl	26c1c <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   20d96:	4b1d      	ldr	r3, [pc, #116]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20d98:	681b      	ldr	r3, [r3, #0]
   20d9a:	f240 2181 	movw	r1, #641	; 0x281
   20d9e:	4618      	mov	r0, r3
   20da0:	f005 fc46 	bl	26630 <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   20da4:	4b19      	ldr	r3, [pc, #100]	; (20e0c <HciDrvRadioBoot+0x1d8>)
   20da6:	681b      	ldr	r3, [r3, #0]
   20da8:	f240 2181 	movw	r1, #641	; 0x281
   20dac:	4618      	mov	r0, r3
   20dae:	f005 fc11 	bl	265d4 <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   20db2:	200c      	movs	r0, #12
   20db4:	f7ff fee6 	bl	20b84 <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   20db8:	f44f 6302 	mov.w	r3, #2080	; 0x820
   20dbc:	f44f 7282 	mov.w	r2, #260	; 0x104
   20dc0:	4915      	ldr	r1, [pc, #84]	; (20e18 <HciDrvRadioBoot+0x1e4>)
   20dc2:	4816      	ldr	r0, [pc, #88]	; (20e1c <HciDrvRadioBoot+0x1e8>)
   20dc4:	f006 fe16 	bl	279f4 <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   20dc8:	4b15      	ldr	r3, [pc, #84]	; (20e20 <HciDrvRadioBoot+0x1ec>)
   20dca:	2200      	movs	r2, #0
   20dcc:	601a      	str	r2, [r3, #0]

    // When it's bColdBoot, it will use Apollo's Device ID to form Bluetooth address.
    if (bColdBoot)
   20dce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20dd2:	2b00      	cmp	r3, #0
   20dd4:	d011      	beq.n	20dfa <HciDrvRadioBoot+0x1c6>
    {
        am_hal_mcuctrl_device_t sDevice;
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   20dd6:	ab03      	add	r3, sp, #12
   20dd8:	4619      	mov	r1, r3
   20dda:	2001      	movs	r0, #1
   20ddc:	f006 fbee 	bl	275bc <am_hal_mcuctrl_info_get>
   20de0:	9b05      	ldr	r3, [sp, #20]

        // Bluetooth address formed by ChipID1 (32 bits) and ChipID0 (8-23 bits).
        memcpy(g_BLEMacAddress, &sDevice.ui32ChipID1, sizeof(sDevice.ui32ChipID1));
   20de2:	4a10      	ldr	r2, [pc, #64]	; (20e24 <HciDrvRadioBoot+0x1f0>)
   20de4:	6013      	str	r3, [r2, #0]
        // ui32ChipID0 bit 8-31 is test time during chip manufacturing
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
   20de6:	9b04      	ldr	r3, [sp, #16]
   20de8:	0a1b      	lsrs	r3, r3, #8
   20dea:	b2da      	uxtb	r2, r3
   20dec:	4b0d      	ldr	r3, [pc, #52]	; (20e24 <HciDrvRadioBoot+0x1f0>)
   20dee:	711a      	strb	r2, [r3, #4]
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
   20df0:	9b04      	ldr	r3, [sp, #16]
   20df2:	0c1b      	lsrs	r3, r3, #16
   20df4:	b2da      	uxtb	r2, r3
   20df6:	4b0b      	ldr	r3, [pc, #44]	; (20e24 <HciDrvRadioBoot+0x1f0>)
   20df8:	715a      	strb	r2, [r3, #5]
    }

    return AM_HAL_STATUS_SUCCESS;
   20dfa:	2300      	movs	r3, #0
}
   20dfc:	4618      	mov	r0, r3
   20dfe:	b021      	add	sp, #132	; 0x84
   20e00:	bd30      	pop	{r4, r5, pc}
   20e02:	bf00      	nop
   20e04:	10005bcc 	.word	0x10005bcc
   20e08:	10005bd0 	.word	0x10005bd0
   20e0c:	10005268 	.word	0x10005268
   20e10:	00027d20 	.word	0x00027d20
   20e14:	0800000b 	.word	0x0800000b
   20e18:	10005294 	.word	0x10005294
   20e1c:	10005ab4 	.word	0x10005ab4
   20e20:	10005bd4 	.word	0x10005bd4
   20e24:	1000526c 	.word	0x1000526c

00020e28 <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   20e28:	b500      	push	{lr}
   20e2a:	b083      	sub	sp, #12
    BLE_HEARTBEAT_STOP();
   20e2c:	4818      	ldr	r0, [pc, #96]	; (20e90 <HciDrvRadioShutdown+0x68>)
   20e2e:	f7ff f921 	bl	20074 <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   20e32:	200c      	movs	r0, #12
   20e34:	f7ff fec0 	bl	20bb8 <__NVIC_DisableIRQ>

    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   20e38:	4b16      	ldr	r3, [pc, #88]	; (20e94 <HciDrvRadioShutdown+0x6c>)
   20e3a:	681b      	ldr	r3, [r3, #0]
   20e3c:	2101      	movs	r1, #1
   20e3e:	4618      	mov	r0, r3
   20e40:	f004 fffe 	bl	25e40 <am_hal_ble_power_control>

    // wait for 1s at max
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   20e44:	2300      	movs	r3, #0
   20e46:	9301      	str	r3, [sp, #4]
   20e48:	e009      	b.n	20e5e <HciDrvRadioShutdown+0x36>
   20e4a:	9b01      	ldr	r3, [sp, #4]
   20e4c:	4a12      	ldr	r2, [pc, #72]	; (20e98 <HciDrvRadioShutdown+0x70>)
   20e4e:	4293      	cmp	r3, r2
   20e50:	d80d      	bhi.n	20e6e <HciDrvRadioShutdown+0x46>
   20e52:	2010      	movs	r0, #16
   20e54:	f006 f9d2 	bl	271fc <am_hal_flash_delay>
   20e58:	9b01      	ldr	r3, [sp, #4]
   20e5a:	3301      	adds	r3, #1
   20e5c:	9301      	str	r3, [sp, #4]
   20e5e:	4b0f      	ldr	r3, [pc, #60]	; (20e9c <HciDrvRadioShutdown+0x74>)
   20e60:	689b      	ldr	r3, [r3, #8]
   20e62:	f3c3 3340 	ubfx	r3, r3, #13, #1
   20e66:	b2db      	uxtb	r3, r3
   20e68:	2b00      	cmp	r3, #0
   20e6a:	d1ee      	bne.n	20e4a <HciDrvRadioShutdown+0x22>
   20e6c:	e000      	b.n	20e70 <HciDrvRadioShutdown+0x48>
   20e6e:	bf00      	nop

    am_hal_ble_deinitialize(BLE);
   20e70:	4b08      	ldr	r3, [pc, #32]	; (20e94 <HciDrvRadioShutdown+0x6c>)
   20e72:	681b      	ldr	r3, [r3, #0]
   20e74:	4618      	mov	r0, r3
   20e76:	f004 ff37 	bl	25ce8 <am_hal_ble_deinitialize>

    g_ui32NumBytes   = 0;
   20e7a:	4b09      	ldr	r3, [pc, #36]	; (20ea0 <HciDrvRadioShutdown+0x78>)
   20e7c:	2200      	movs	r2, #0
   20e7e:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   20e80:	4b08      	ldr	r3, [pc, #32]	; (20ea4 <HciDrvRadioShutdown+0x7c>)
   20e82:	2200      	movs	r2, #0
   20e84:	601a      	str	r2, [r3, #0]
}
   20e86:	bf00      	nop
   20e88:	b003      	add	sp, #12
   20e8a:	f85d fb04 	ldr.w	pc, [sp], #4
   20e8e:	bf00      	nop
   20e90:	10005274 	.word	0x10005274
   20e94:	10005268 	.word	0x10005268
   20e98:	000f423f 	.word	0x000f423f
   20e9c:	40021000 	.word	0x40021000
   20ea0:	10005bcc 	.word	0x10005bcc
   20ea4:	10005bd0 	.word	0x10005bd0

00020ea8 <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   20ea8:	b500      	push	{lr}
   20eaa:	b087      	sub	sp, #28
   20eac:	4603      	mov	r3, r0
   20eae:	9200      	str	r2, [sp, #0]
   20eb0:	f88d 3007 	strb.w	r3, [sp, #7]
   20eb4:	460b      	mov	r3, r1
   20eb6:	f8ad 3004 	strh.w	r3, [sp, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   20eba:	4b28      	ldr	r3, [pc, #160]	; (20f5c <hciDrvWrite+0xb4>)
   20ebc:	689a      	ldr	r2, [r3, #8]
   20ebe:	4b27      	ldr	r3, [pc, #156]	; (20f5c <hciDrvWrite+0xb4>)
   20ec0:	68db      	ldr	r3, [r3, #12]
   20ec2:	429a      	cmp	r2, r3
   20ec4:	d106      	bne.n	20ed4 <hciDrvWrite+0x2c>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   20ec6:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   20eca:	f7ff fe97 	bl	20bfc <error_check>
   20ece:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20ed2:	e03e      	b.n	20f52 <hciDrvWrite+0xaa>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   20ed4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20ed8:	2bff      	cmp	r3, #255	; 0xff
   20eda:	d905      	bls.n	20ee8 <hciDrvWrite+0x40>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   20edc:	4820      	ldr	r0, [pc, #128]	; (20f60 <hciDrvWrite+0xb8>)
   20ede:	f7ff fe8d 	bl	20bfc <error_check>
   20ee2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20ee6:	e034      	b.n	20f52 <hciDrvWrite+0xaa>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   20ee8:	4b1c      	ldr	r3, [pc, #112]	; (20f5c <hciDrvWrite+0xb4>)
   20eea:	695a      	ldr	r2, [r3, #20]
   20eec:	4b1b      	ldr	r3, [pc, #108]	; (20f5c <hciDrvWrite+0xb4>)
   20eee:	681b      	ldr	r3, [r3, #0]
   20ef0:	4413      	add	r3, r2
   20ef2:	9304      	str	r3, [sp, #16]

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   20ef4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20ef8:	3301      	adds	r3, #1
   20efa:	461a      	mov	r2, r3
   20efc:	9b04      	ldr	r3, [sp, #16]
   20efe:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   20f00:	9b04      	ldr	r3, [sp, #16]
   20f02:	3304      	adds	r3, #4
   20f04:	9303      	str	r3, [sp, #12]

    *pui8Wptr++ = type;
   20f06:	9b03      	ldr	r3, [sp, #12]
   20f08:	1c5a      	adds	r2, r3, #1
   20f0a:	9203      	str	r2, [sp, #12]
   20f0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   20f10:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   20f12:	2300      	movs	r3, #0
   20f14:	9305      	str	r3, [sp, #20]
   20f16:	e00a      	b.n	20f2e <hciDrvWrite+0x86>
    {
        pui8Wptr[i] = pData[i];
   20f18:	9a00      	ldr	r2, [sp, #0]
   20f1a:	9b05      	ldr	r3, [sp, #20]
   20f1c:	441a      	add	r2, r3
   20f1e:	9903      	ldr	r1, [sp, #12]
   20f20:	9b05      	ldr	r3, [sp, #20]
   20f22:	440b      	add	r3, r1
   20f24:	7812      	ldrb	r2, [r2, #0]
   20f26:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++)
   20f28:	9b05      	ldr	r3, [sp, #20]
   20f2a:	3301      	adds	r3, #1
   20f2c:	9305      	str	r3, [sp, #20]
   20f2e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20f32:	9a05      	ldr	r2, [sp, #20]
   20f34:	429a      	cmp	r2, r3
   20f36:	d3ef      	bcc.n	20f18 <hciDrvWrite+0x70>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   20f38:	2201      	movs	r2, #1
   20f3a:	2100      	movs	r1, #0
   20f3c:	4807      	ldr	r0, [pc, #28]	; (20f5c <hciDrvWrite+0xb4>)
   20f3e:	f006 fd65 	bl	27a0c <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   20f42:	4b08      	ldr	r3, [pc, #32]	; (20f64 <hciDrvWrite+0xbc>)
   20f44:	781b      	ldrb	r3, [r3, #0]
   20f46:	2101      	movs	r1, #1
   20f48:	4618      	mov	r0, r3
   20f4a:	f7fe fdb3 	bl	1fab4 <WsfSetEvent>
#endif
    return len;
   20f4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
}
   20f52:	4618      	mov	r0, r3
   20f54:	b007      	add	sp, #28
   20f56:	f85d fb04 	ldr.w	pc, [sp], #4
   20f5a:	bf00      	nop
   20f5c:	10005ab4 	.word	0x10005ab4
   20f60:	09000001 	.word	0x09000001
   20f64:	10005272 	.word	0x10005272

00020f68 <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   20f68:	b082      	sub	sp, #8
   20f6a:	4603      	mov	r3, r0
   20f6c:	f88d 3007 	strb.w	r3, [sp, #7]
    g_HciDrvHandleID = handlerId;
   20f70:	4a0a      	ldr	r2, [pc, #40]	; (20f9c <HciDrvHandlerInit+0x34>)
   20f72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20f76:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   20f78:	4a09      	ldr	r2, [pc, #36]	; (20fa0 <HciDrvHandlerInit+0x38>)
   20f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20f7e:	7313      	strb	r3, [r2, #12]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   20f80:	4b07      	ldr	r3, [pc, #28]	; (20fa0 <HciDrvHandlerInit+0x38>)
   20f82:	2202      	movs	r2, #2
   20f84:	729a      	strb	r2, [r3, #10]

    g_WakeTimer.handlerId = handlerId;
   20f86:	4a07      	ldr	r2, [pc, #28]	; (20fa4 <HciDrvHandlerInit+0x3c>)
   20f88:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20f8c:	7313      	strb	r3, [r2, #12]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   20f8e:	4b05      	ldr	r3, [pc, #20]	; (20fa4 <HciDrvHandlerInit+0x3c>)
   20f90:	2203      	movs	r2, #3
   20f92:	729a      	strb	r2, [r3, #10]
}
   20f94:	bf00      	nop
   20f96:	b002      	add	sp, #8
   20f98:	4770      	bx	lr
   20f9a:	bf00      	nop
   20f9c:	10005272 	.word	0x10005272
   20fa0:	10005274 	.word	0x10005274
   20fa4:	10005284 	.word	0x10005284

00020fa8 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   20fa8:	b500      	push	{lr}
   20faa:	b083      	sub	sp, #12
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   20fac:	4b0d      	ldr	r3, [pc, #52]	; (20fe4 <HciDrvIntService+0x3c>)
   20fae:	681b      	ldr	r3, [r3, #0]
   20fb0:	2101      	movs	r1, #1
   20fb2:	4618      	mov	r0, r3
   20fb4:	f005 fb2e 	bl	26614 <am_hal_ble_int_status>
   20fb8:	9001      	str	r0, [sp, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   20fba:	4b0a      	ldr	r3, [pc, #40]	; (20fe4 <HciDrvIntService+0x3c>)
   20fbc:	681b      	ldr	r3, [r3, #0]
   20fbe:	9901      	ldr	r1, [sp, #4]
   20fc0:	4618      	mov	r0, r3
   20fc2:	f005 fb35 	bl	26630 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   20fc6:	4b08      	ldr	r3, [pc, #32]	; (20fe8 <HciDrvIntService+0x40>)
   20fc8:	681b      	ldr	r3, [r3, #0]
   20fca:	3301      	adds	r3, #1
   20fcc:	4a06      	ldr	r2, [pc, #24]	; (20fe8 <HciDrvIntService+0x40>)
   20fce:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   20fd0:	4b06      	ldr	r3, [pc, #24]	; (20fec <HciDrvIntService+0x44>)
   20fd2:	781b      	ldrb	r3, [r3, #0]
   20fd4:	2101      	movs	r1, #1
   20fd6:	4618      	mov	r0, r3
   20fd8:	f7fe fd6c 	bl	1fab4 <WsfSetEvent>

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   20fdc:	bf00      	nop
   20fde:	b003      	add	sp, #12
   20fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   20fe4:	10005268 	.word	0x10005268
   20fe8:	10005bd4 	.word	0x10005bd4
   20fec:	10005272 	.word	0x10005272

00020ff0 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   20ff0:	b500      	push	{lr}
   20ff2:	b08b      	sub	sp, #44	; 0x2c
   20ff4:	4603      	mov	r3, r0
   20ff6:	9100      	str	r1, [sp, #0]
   20ff8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   20ffc:	2300      	movs	r3, #0
   20ffe:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   21000:	2300      	movs	r3, #0
   21002:	9308      	str	r3, [sp, #32]
    uint32_t read_hci_packet_count = 0;
   21004:	2300      	movs	r3, #0
   21006:	9307      	str	r3, [sp, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   21008:	9b00      	ldr	r3, [sp, #0]
   2100a:	789b      	ldrb	r3, [r3, #2]
   2100c:	2b02      	cmp	r3, #2
   2100e:	d107      	bne.n	21020 <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   21010:	f7ec fb09 	bl	d626 <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   21014:	f242 7110 	movw	r1, #10000	; 0x2710
   21018:	4885      	ldr	r0, [pc, #532]	; (21230 <HciDrvHandler+0x240>)
   2101a:	f7ff f817 	bl	2004c <WsfTimerStartMs>
        return;
   2101e:	e104      	b.n	2122a <HciDrvHandler+0x23a>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   21020:	4b84      	ldr	r3, [pc, #528]	; (21234 <HciDrvHandler+0x244>)
   21022:	681a      	ldr	r2, [r3, #0]
   21024:	4b84      	ldr	r3, [pc, #528]	; (21238 <HciDrvHandler+0x248>)
   21026:	681b      	ldr	r3, [r3, #0]
   21028:	429a      	cmp	r2, r3
   2102a:	f240 80e4 	bls.w	211f6 <HciDrvHandler+0x206>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   2102e:	4b83      	ldr	r3, [pc, #524]	; (2123c <HciDrvHandler+0x24c>)
   21030:	681a      	ldr	r2, [r3, #0]
   21032:	4b81      	ldr	r3, [pc, #516]	; (21238 <HciDrvHandler+0x248>)
   21034:	681b      	ldr	r3, [r3, #0]
   21036:	18d0      	adds	r0, r2, r3
   21038:	4b7e      	ldr	r3, [pc, #504]	; (21234 <HciDrvHandler+0x244>)
   2103a:	681b      	ldr	r3, [r3, #0]
   2103c:	b29a      	uxth	r2, r3
   2103e:	4b7e      	ldr	r3, [pc, #504]	; (21238 <HciDrvHandler+0x248>)
   21040:	681b      	ldr	r3, [r3, #0]
   21042:	b29b      	uxth	r3, r3
   21044:	1ad3      	subs	r3, r2, r3
   21046:	b29b      	uxth	r3, r3
   21048:	4619      	mov	r1, r3
   2104a:	f7ef fb29 	bl	106a0 <hciTrSerialRxIncoming>
   2104e:	4603      	mov	r3, r0
   21050:	461a      	mov	r2, r3
   21052:	4b79      	ldr	r3, [pc, #484]	; (21238 <HciDrvHandler+0x248>)
   21054:	681b      	ldr	r3, [r3, #0]
   21056:	4413      	add	r3, r2
   21058:	4a77      	ldr	r2, [pc, #476]	; (21238 <HciDrvHandler+0x248>)
   2105a:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   2105c:	4b76      	ldr	r3, [pc, #472]	; (21238 <HciDrvHandler+0x248>)
   2105e:	681a      	ldr	r2, [r3, #0]
   21060:	4b74      	ldr	r3, [pc, #464]	; (21234 <HciDrvHandler+0x244>)
   21062:	681b      	ldr	r3, [r3, #0]
   21064:	429a      	cmp	r2, r3
   21066:	d006      	beq.n	21076 <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   21068:	4b75      	ldr	r3, [pc, #468]	; (21240 <HciDrvHandler+0x250>)
   2106a:	781b      	ldrb	r3, [r3, #0]
   2106c:	2101      	movs	r1, #1
   2106e:	4618      	mov	r0, r3
   21070:	f7fe fd20 	bl	1fab4 <WsfSetEvent>
            return;
   21074:	e0d9      	b.n	2122a <HciDrvHandler+0x23a>
        }
        else
        {
            g_ui32NumBytes   = 0;
   21076:	4b6f      	ldr	r3, [pc, #444]	; (21234 <HciDrvHandler+0x244>)
   21078:	2200      	movs	r2, #0
   2107a:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   2107c:	4b6e      	ldr	r3, [pc, #440]	; (21238 <HciDrvHandler+0x248>)
   2107e:	2200      	movs	r2, #0
   21080:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   21082:	e0b8      	b.n	211f6 <HciDrvHandler+0x206>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   21084:	4b6f      	ldr	r3, [pc, #444]	; (21244 <HciDrvHandler+0x254>)
   21086:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2108a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   2108e:	b2db      	uxtb	r3, r3
   21090:	2b00      	cmp	r3, #0
   21092:	d078      	beq.n	21186 <HciDrvHandler+0x196>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   21094:	4b6c      	ldr	r3, [pc, #432]	; (21248 <HciDrvHandler+0x258>)
   21096:	681b      	ldr	r3, [r3, #0]
   21098:	9303      	str	r3, [sp, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            BLE_HEARTBEAT_RESTART();
   2109a:	4865      	ldr	r0, [pc, #404]	; (21230 <HciDrvHandler+0x240>)
   2109c:	f7fe ffea 	bl	20074 <WsfTimerStop>
   210a0:	f242 7110 	movw	r1, #10000	; 0x2710
   210a4:	4862      	ldr	r0, [pc, #392]	; (21230 <HciDrvHandler+0x240>)
   210a6:	f7fe ffd1 	bl	2004c <WsfTimerStartMs>

            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   210aa:	4b62      	ldr	r3, [pc, #392]	; (21234 <HciDrvHandler+0x244>)
   210ac:	2200      	movs	r2, #0
   210ae:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   210b0:	4b66      	ldr	r3, [pc, #408]	; (2124c <HciDrvHandler+0x25c>)
   210b2:	681b      	ldr	r3, [r3, #0]
   210b4:	4a5f      	ldr	r2, [pc, #380]	; (21234 <HciDrvHandler+0x244>)
   210b6:	4966      	ldr	r1, [pc, #408]	; (21250 <HciDrvHandler+0x260>)
   210b8:	4618      	mov	r0, r3
   210ba:	f005 fa33 	bl	26524 <am_hal_ble_blocking_hci_read>
   210be:	9004      	str	r0, [sp, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   210c0:	4b5c      	ldr	r3, [pc, #368]	; (21234 <HciDrvHandler+0x244>)
   210c2:	681b      	ldr	r3, [r3, #0]
   210c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   210c8:	d902      	bls.n	210d0 <HciDrvHandler+0xe0>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                error_check(HCI_DRV_RX_PACKET_TOO_LARGE);
   210ca:	4862      	ldr	r0, [pc, #392]	; (21254 <HciDrvHandler+0x264>)
   210cc:	f7ff fd96 	bl	20bfc <error_check>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   210d0:	9b04      	ldr	r3, [sp, #16]
   210d2:	2b00      	cmp	r3, #0
   210d4:	d13d      	bne.n	21152 <HciDrvHandler+0x162>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   210d6:	2300      	movs	r3, #0
   210d8:	9306      	str	r3, [sp, #24]
   210da:	e012      	b.n	21102 <HciDrvHandler+0x112>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   210dc:	4b59      	ldr	r3, [pc, #356]	; (21244 <HciDrvHandler+0x254>)
   210de:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   210e2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   210e6:	b2db      	uxtb	r3, r3
   210e8:	2b00      	cmp	r3, #0
   210ea:	d00e      	beq.n	2110a <HciDrvHandler+0x11a>
   210ec:	4b56      	ldr	r3, [pc, #344]	; (21248 <HciDrvHandler+0x258>)
   210ee:	681b      	ldr	r3, [r3, #0]
   210f0:	9a03      	ldr	r2, [sp, #12]
   210f2:	429a      	cmp	r2, r3
   210f4:	d109      	bne.n	2110a <HciDrvHandler+0x11a>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   210f6:	2001      	movs	r0, #1
   210f8:	f000 fc18 	bl	2192c <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   210fc:	9b06      	ldr	r3, [sp, #24]
   210fe:	3301      	adds	r3, #1
   21100:	9306      	str	r3, [sp, #24]
   21102:	9b06      	ldr	r3, [sp, #24]
   21104:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   21108:	d3e8      	bcc.n	210dc <HciDrvHandler+0xec>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   2110a:	4b4c      	ldr	r3, [pc, #304]	; (2123c <HciDrvHandler+0x24c>)
   2110c:	681b      	ldr	r3, [r3, #0]
   2110e:	4a49      	ldr	r2, [pc, #292]	; (21234 <HciDrvHandler+0x244>)
   21110:	6812      	ldr	r2, [r2, #0]
   21112:	b292      	uxth	r2, r2
   21114:	4611      	mov	r1, r2
   21116:	4618      	mov	r0, r3
   21118:	f7ef fac2 	bl	106a0 <hciTrSerialRxIncoming>
   2111c:	4603      	mov	r3, r0
   2111e:	461a      	mov	r2, r3
   21120:	4b45      	ldr	r3, [pc, #276]	; (21238 <HciDrvHandler+0x248>)
   21122:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   21124:	4b44      	ldr	r3, [pc, #272]	; (21238 <HciDrvHandler+0x248>)
   21126:	681a      	ldr	r2, [r3, #0]
   21128:	4b42      	ldr	r3, [pc, #264]	; (21234 <HciDrvHandler+0x244>)
   2112a:	681b      	ldr	r3, [r3, #0]
   2112c:	429a      	cmp	r2, r3
   2112e:	d006      	beq.n	2113e <HciDrvHandler+0x14e>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   21130:	4b43      	ldr	r3, [pc, #268]	; (21240 <HciDrvHandler+0x250>)
   21132:	781b      	ldrb	r3, [r3, #0]
   21134:	2101      	movs	r1, #1
   21136:	4618      	mov	r0, r3
   21138:	f7fe fcbc 	bl	1fab4 <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   2113c:	e064      	b.n	21208 <HciDrvHandler+0x218>
                }

                g_ui32NumBytes   = 0;
   2113e:	4b3d      	ldr	r3, [pc, #244]	; (21234 <HciDrvHandler+0x244>)
   21140:	2200      	movs	r2, #0
   21142:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   21144:	4b3c      	ldr	r3, [pc, #240]	; (21238 <HciDrvHandler+0x248>)
   21146:	2200      	movs	r2, #0
   21148:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   2114a:	9b07      	ldr	r3, [sp, #28]
   2114c:	3301      	adds	r3, #1
   2114e:	9307      	str	r3, [sp, #28]
   21150:	e00f      	b.n	21172 <HciDrvHandler+0x182>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   21152:	9b04      	ldr	r3, [sp, #16]
   21154:	2b00      	cmp	r3, #0
   21156:	d00c      	beq.n	21172 <HciDrvHandler+0x182>
   21158:	9804      	ldr	r0, [sp, #16]
   2115a:	f7ff fd4f 	bl	20bfc <error_check>
   2115e:	f7ff fe63 	bl	20e28 <HciDrvRadioShutdown>
   21162:	2000      	movs	r0, #0
   21164:	f7ff fd66 	bl	20c34 <HciDrvRadioBoot>
   21168:	f000 f886 	bl	21278 <HciDrvEmptyWriteQueue>
   2116c:	f7f4 feec 	bl	15f48 <DmDevReset>
   21170:	e05b      	b.n	2122a <HciDrvHandler+0x23a>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   21172:	9b07      	ldr	r3, [sp, #28]
   21174:	2b03      	cmp	r3, #3
   21176:	d93e      	bls.n	211f6 <HciDrvHandler+0x206>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   21178:	4b31      	ldr	r3, [pc, #196]	; (21240 <HciDrvHandler+0x250>)
   2117a:	781b      	ldrb	r3, [r3, #0]
   2117c:	2101      	movs	r1, #1
   2117e:	4618      	mov	r0, r3
   21180:	f7fe fc98 	bl	1fab4 <WsfSetEvent>

                break;
   21184:	e040      	b.n	21208 <HciDrvHandler+0x218>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   21186:	4b34      	ldr	r3, [pc, #208]	; (21258 <HciDrvHandler+0x268>)
   21188:	689b      	ldr	r3, [r3, #8]
   2118a:	2b00      	cmp	r3, #0
   2118c:	d03b      	beq.n	21206 <HciDrvHandler+0x216>
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   2118e:	4b32      	ldr	r3, [pc, #200]	; (21258 <HciDrvHandler+0x268>)
   21190:	695a      	ldr	r2, [r3, #20]
   21192:	4b31      	ldr	r3, [pc, #196]	; (21258 <HciDrvHandler+0x268>)
   21194:	685b      	ldr	r3, [r3, #4]
   21196:	4413      	add	r3, r2
   21198:	9305      	str	r3, [sp, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   2119a:	4b2c      	ldr	r3, [pc, #176]	; (2124c <HciDrvHandler+0x25c>)
   2119c:	6818      	ldr	r0, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   2119e:	9b05      	ldr	r3, [sp, #20]
   211a0:	1d1a      	adds	r2, r3, #4
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   211a2:	9b05      	ldr	r3, [sp, #20]
   211a4:	681b      	ldr	r3, [r3, #0]
   211a6:	2100      	movs	r1, #0
   211a8:	f005 f992 	bl	264d0 <am_hal_ble_blocking_hci_write>
   211ac:	9004      	str	r0, [sp, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   211ae:	9b04      	ldr	r3, [sp, #16]
   211b0:	2b00      	cmp	r3, #0
   211b2:	d111      	bne.n	211d8 <HciDrvHandler+0x1e8>
                {
                    //
                    // Restart the heartbeat timer.
                    //
                    BLE_HEARTBEAT_RESTART();
   211b4:	481e      	ldr	r0, [pc, #120]	; (21230 <HciDrvHandler+0x240>)
   211b6:	f7fe ff5d 	bl	20074 <WsfTimerStop>
   211ba:	f242 7110 	movw	r1, #10000	; 0x2710
   211be:	481c      	ldr	r0, [pc, #112]	; (21230 <HciDrvHandler+0x240>)
   211c0:	f7fe ff44 	bl	2004c <WsfTimerStartMs>

                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   211c4:	2201      	movs	r2, #1
   211c6:	2100      	movs	r1, #0
   211c8:	4823      	ldr	r0, [pc, #140]	; (21258 <HciDrvHandler+0x268>)
   211ca:	f006 fc5d 	bl	27a88 <am_hal_queue_item_get>

                    ui32TxRetries = 0;
   211ce:	2300      	movs	r3, #0
   211d0:	9309      	str	r3, [sp, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   211d2:	2300      	movs	r3, #0
   211d4:	9308      	str	r3, [sp, #32]
   211d6:	e00e      	b.n	211f6 <HciDrvHandler+0x206>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   211d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   211da:	3301      	adds	r3, #1
   211dc:	9309      	str	r3, [sp, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   211de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   211e0:	f242 7210 	movw	r2, #10000	; 0x2710
   211e4:	4293      	cmp	r3, r2
   211e6:	d906      	bls.n	211f6 <HciDrvHandler+0x206>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   211e8:	4b15      	ldr	r3, [pc, #84]	; (21240 <HciDrvHandler+0x250>)
   211ea:	781b      	ldrb	r3, [r3, #0]
   211ec:	2101      	movs	r1, #1
   211ee:	4618      	mov	r0, r3
   211f0:	f7fe fc60 	bl	1fab4 <WsfSetEvent>
                        break;
   211f4:	e008      	b.n	21208 <HciDrvHandler+0x218>
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   211f6:	9b08      	ldr	r3, [sp, #32]
   211f8:	1c5a      	adds	r2, r3, #1
   211fa:	9208      	str	r2, [sp, #32]
   211fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   21200:	f4ff af40 	bcc.w	21084 <HciDrvHandler+0x94>
   21204:	e000      	b.n	21208 <HciDrvHandler+0x218>
                break;
   21206:	bf00      	nop

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   21208:	9b08      	ldr	r3, [sp, #32]
   2120a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   2120e:	d10c      	bne.n	2122a <HciDrvHandler+0x23a>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   21210:	4812      	ldr	r0, [pc, #72]	; (2125c <HciDrvHandler+0x26c>)
   21212:	f7ff fcf3 	bl	20bfc <error_check>
   21216:	f7ff fe07 	bl	20e28 <HciDrvRadioShutdown>
   2121a:	2000      	movs	r0, #0
   2121c:	f7ff fd0a 	bl	20c34 <HciDrvRadioBoot>
   21220:	f000 f82a 	bl	21278 <HciDrvEmptyWriteQueue>
   21224:	f7f4 fe90 	bl	15f48 <DmDevReset>
   21228:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   2122a:	b00b      	add	sp, #44	; 0x2c
   2122c:	f85d fb04 	ldr.w	pc, [sp], #4
   21230:	10005274 	.word	0x10005274
   21234:	10005bcc 	.word	0x10005bcc
   21238:	10005bd0 	.word	0x10005bd0
   2123c:	10002bc0 	.word	0x10002bc0
   21240:	10005272 	.word	0x10005272
   21244:	5000c000 	.word	0x5000c000
   21248:	10005bd4 	.word	0x10005bd4
   2124c:	10005268 	.word	0x10005268
   21250:	10005acc 	.word	0x10005acc
   21254:	09000002 	.word	0x09000002
   21258:	10005ab4 	.word	0x10005ab4
   2125c:	09000006 	.word	0x09000006

00021260 <HciVscUpdateBDAddress>:
        return true;
    }
}

void HciVscUpdateBDAddress(void)
{
   21260:	b508      	push	{r3, lr}
    HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   21262:	4a04      	ldr	r2, [pc, #16]	; (21274 <HciVscUpdateBDAddress+0x14>)
   21264:	2106      	movs	r1, #6
   21266:	f64f 4032 	movw	r0, #64562	; 0xfc32
   2126a:	f7ec fb87 	bl	d97c <HciVendorSpecificCmd>
}
   2126e:	bf00      	nop
   21270:	bd08      	pop	{r3, pc}
   21272:	bf00      	nop
   21274:	1000526c 	.word	0x1000526c

00021278 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   21278:	b508      	push	{r3, lr}
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   2127a:	f44f 6302 	mov.w	r3, #2080	; 0x820
   2127e:	f44f 7282 	mov.w	r2, #260	; 0x104
   21282:	4903      	ldr	r1, [pc, #12]	; (21290 <HciDrvEmptyWriteQueue+0x18>)
   21284:	4803      	ldr	r0, [pc, #12]	; (21294 <HciDrvEmptyWriteQueue+0x1c>)
   21286:	f006 fbb5 	bl	279f4 <am_hal_queue_init>
}
   2128a:	bf00      	nop
   2128c:	bd08      	pop	{r3, pc}
   2128e:	bf00      	nop
   21290:	10005294 	.word	0x10005294
   21294:	10005ab4 	.word	0x10005ab4

00021298 <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   21298:	b508      	push	{r3, lr}
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   2129a:	4b0c      	ldr	r3, [pc, #48]	; (212cc <hciCoreReadResolvingListSize+0x34>)
   2129c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   2129e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   212a2:	2b00      	cmp	r3, #0
   212a4:	d008      	beq.n	212b8 <hciCoreReadResolvingListSize+0x20>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   212a6:	4b0a      	ldr	r3, [pc, #40]	; (212d0 <hciCoreReadResolvingListSize+0x38>)
   212a8:	681b      	ldr	r3, [r3, #0]
   212aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   212ae:	2b00      	cmp	r3, #0
   212b0:	d002      	beq.n	212b8 <hciCoreReadResolvingListSize+0x20>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   212b2:	f7ec fb04 	bl	d8be <HciLeReadResolvingListSize>
   212b6:	e006      	b.n	212c6 <hciCoreReadResolvingListSize+0x2e>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   212b8:	4b04      	ldr	r3, [pc, #16]	; (212cc <hciCoreReadResolvingListSize+0x34>)
   212ba:	2200      	movs	r2, #0
   212bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   212c0:	f000 f808 	bl	212d4 <hciCoreReadMaxDataLen>
  }
}
   212c4:	bf00      	nop
   212c6:	bf00      	nop
   212c8:	bd08      	pop	{r3, pc}
   212ca:	bf00      	nop
   212cc:	10004170 	.word	0x10004170
   212d0:	10002b08 	.word	0x10002b08

000212d4 <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   212d4:	b508      	push	{r3, lr}
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   212d6:	4b0a      	ldr	r3, [pc, #40]	; (21300 <hciCoreReadMaxDataLen+0x2c>)
   212d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   212da:	f003 0320 	and.w	r3, r3, #32
   212de:	2b00      	cmp	r3, #0
   212e0:	d008      	beq.n	212f4 <hciCoreReadMaxDataLen+0x20>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   212e2:	4b08      	ldr	r3, [pc, #32]	; (21304 <hciCoreReadMaxDataLen+0x30>)
   212e4:	681b      	ldr	r3, [r3, #0]
   212e6:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   212ea:	2b00      	cmp	r3, #0
   212ec:	d002      	beq.n	212f4 <hciCoreReadMaxDataLen+0x20>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   212ee:	f7eb ff1e 	bl	d12e <HciLeReadMaxDataLen>
   212f2:	e002      	b.n	212fa <hciCoreReadMaxDataLen+0x26>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   212f4:	f7eb ffa7 	bl	d246 <HciLeRandCmd>
  }
}
   212f8:	bf00      	nop
   212fa:	bf00      	nop
   212fc:	bd08      	pop	{r3, pc}
   212fe:	bf00      	nop
   21300:	10004170 	.word	0x10004170
   21304:	10002b08 	.word	0x10002b08

00021308 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   21308:	b508      	push	{r3, lr}
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   2130a:	f7ec f9c7 	bl	d69c <HciResetCmd>

  // update Bluetooth Address to controller
  HciVscUpdateBDAddress();        
   2130e:	f7ff ffa7 	bl	21260 <HciVscUpdateBDAddress>

}
   21312:	bf00      	nop
   21314:	bd08      	pop	{r3, pc}
	...

00021318 <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   21318:	b500      	push	{lr}
   2131a:	b087      	sub	sp, #28
   2131c:	9001      	str	r0, [sp, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   2131e:	9b01      	ldr	r3, [sp, #4]
   21320:	781b      	ldrb	r3, [r3, #0]
   21322:	2b0e      	cmp	r3, #14
   21324:	f040 81cb 	bne.w	216be <hciCoreResetSequence+0x3a6>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   21328:	9b01      	ldr	r3, [sp, #4]
   2132a:	3302      	adds	r3, #2
   2132c:	9301      	str	r3, [sp, #4]
    pMsg++;                   /* skip num packets */
   2132e:	9b01      	ldr	r3, [sp, #4]
   21330:	3301      	adds	r3, #1
   21332:	9301      	str	r3, [sp, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   21334:	9b01      	ldr	r3, [sp, #4]
   21336:	781b      	ldrb	r3, [r3, #0]
   21338:	b29a      	uxth	r2, r3
   2133a:	9b01      	ldr	r3, [sp, #4]
   2133c:	3301      	adds	r3, #1
   2133e:	781b      	ldrb	r3, [r3, #0]
   21340:	b29b      	uxth	r3, r3
   21342:	021b      	lsls	r3, r3, #8
   21344:	b29b      	uxth	r3, r3
   21346:	4413      	add	r3, r2
   21348:	f8ad 3016 	strh.w	r3, [sp, #22]
   2134c:	9b01      	ldr	r3, [sp, #4]
   2134e:	3302      	adds	r3, #2
   21350:	9301      	str	r3, [sp, #4]
    pMsg++;                   /* skip status */
   21352:	9b01      	ldr	r3, [sp, #4]
   21354:	3301      	adds	r3, #1
   21356:	9301      	str	r3, [sp, #4]

    /* decode opcode */
    switch (opcode)
   21358:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   2135c:	f242 024a 	movw	r2, #8266	; 0x204a
   21360:	4293      	cmp	r3, r2
   21362:	f300 81ae 	bgt.w	216c2 <hciCoreResetSequence+0x3aa>
   21366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   2136a:	dc28      	bgt.n	213be <hciCoreResetSequence+0xa6>
   2136c:	f241 0209 	movw	r2, #4105	; 0x1009
   21370:	4293      	cmp	r3, r2
   21372:	f000 80d3 	beq.w	2151c <hciCoreResetSequence+0x204>
   21376:	f241 0209 	movw	r2, #4105	; 0x1009
   2137a:	4293      	cmp	r3, r2
   2137c:	f300 81a1 	bgt.w	216c2 <hciCoreResetSequence+0x3aa>
   21380:	f241 0201 	movw	r2, #4097	; 0x1001
   21384:	4293      	cmp	r3, r2
   21386:	f000 8170 	beq.w	2166a <hciCoreResetSequence+0x352>
   2138a:	f241 0201 	movw	r2, #4097	; 0x1001
   2138e:	4293      	cmp	r3, r2
   21390:	f300 8197 	bgt.w	216c2 <hciCoreResetSequence+0x3aa>
   21394:	f640 4263 	movw	r2, #3171	; 0xc63
   21398:	4293      	cmp	r3, r2
   2139a:	f000 80bc 	beq.w	21516 <hciCoreResetSequence+0x1fe>
   2139e:	f640 4263 	movw	r2, #3171	; 0xc63
   213a2:	4293      	cmp	r3, r2
   213a4:	f300 818d 	bgt.w	216c2 <hciCoreResetSequence+0x3aa>
   213a8:	f640 4201 	movw	r2, #3073	; 0xc01
   213ac:	4293      	cmp	r3, r2
   213ae:	f000 80aa 	beq.w	21506 <hciCoreResetSequence+0x1ee>
   213b2:	f640 4203 	movw	r2, #3075	; 0xc03
   213b6:	4293      	cmp	r3, r2
   213b8:	f000 809e 	beq.w	214f8 <hciCoreResetSequence+0x1e0>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   213bc:	e181      	b.n	216c2 <hciCoreResetSequence+0x3aa>
    switch (opcode)
   213be:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   213c2:	3b01      	subs	r3, #1
   213c4:	2b49      	cmp	r3, #73	; 0x49
   213c6:	f200 817c 	bhi.w	216c2 <hciCoreResetSequence+0x3aa>
   213ca:	a201      	add	r2, pc, #4	; (adr r2, 213d0 <hciCoreResetSequence+0xb8>)
   213cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   213d0:	0002150f 	.word	0x0002150f
   213d4:	0002152b 	.word	0x0002152b
   213d8:	000215ad 	.word	0x000215ad
   213dc:	000216c3 	.word	0x000216c3
   213e0:	000216c3 	.word	0x000216c3
   213e4:	000216c3 	.word	0x000216c3
   213e8:	000216c3 	.word	0x000216c3
   213ec:	000216c3 	.word	0x000216c3
   213f0:	000216c3 	.word	0x000216c3
   213f4:	000216c3 	.word	0x000216c3
   213f8:	000216c3 	.word	0x000216c3
   213fc:	000216c3 	.word	0x000216c3
   21400:	000216c3 	.word	0x000216c3
   21404:	000216c3 	.word	0x000216c3
   21408:	00021599 	.word	0x00021599
   2140c:	000216c3 	.word	0x000216c3
   21410:	000216c3 	.word	0x000216c3
   21414:	000216c3 	.word	0x000216c3
   21418:	000216c3 	.word	0x000216c3
   2141c:	000216c3 	.word	0x000216c3
   21420:	000216c3 	.word	0x000216c3
   21424:	000216c3 	.word	0x000216c3
   21428:	000216c3 	.word	0x000216c3
   2142c:	00021687 	.word	0x00021687
   21430:	000216c3 	.word	0x000216c3
   21434:	000216c3 	.word	0x000216c3
   21438:	000216c3 	.word	0x000216c3
   2143c:	00021587 	.word	0x00021587
   21440:	000216c3 	.word	0x000216c3
   21444:	000216c3 	.word	0x000216c3
   21448:	000216c3 	.word	0x000216c3
   2144c:	000216c3 	.word	0x000216c3
   21450:	000216c3 	.word	0x000216c3
   21454:	000216c3 	.word	0x000216c3
   21458:	000216c3 	.word	0x000216c3
   2145c:	00021631 	.word	0x00021631
   21460:	000216c3 	.word	0x000216c3
   21464:	000216c3 	.word	0x000216c3
   21468:	000216c3 	.word	0x000216c3
   2146c:	000216c3 	.word	0x000216c3
   21470:	000216c3 	.word	0x000216c3
   21474:	000215cf 	.word	0x000215cf
   21478:	000216c3 	.word	0x000216c3
   2147c:	000216c3 	.word	0x000216c3
   21480:	000216c3 	.word	0x000216c3
   21484:	000216c3 	.word	0x000216c3
   21488:	000215e3 	.word	0x000215e3
   2148c:	000216c3 	.word	0x000216c3
   21490:	000216c3 	.word	0x000216c3
   21494:	000216c3 	.word	0x000216c3
   21498:	000216c3 	.word	0x000216c3
   2149c:	000216c3 	.word	0x000216c3
   214a0:	000216c3 	.word	0x000216c3
   214a4:	000216c3 	.word	0x000216c3
   214a8:	000216c3 	.word	0x000216c3
   214ac:	000216c3 	.word	0x000216c3
   214b0:	000216c3 	.word	0x000216c3
   214b4:	0002166b 	.word	0x0002166b
   214b8:	0002166b 	.word	0x0002166b
   214bc:	000216c3 	.word	0x000216c3
   214c0:	000216c3 	.word	0x000216c3
   214c4:	000216c3 	.word	0x000216c3
   214c8:	000216c3 	.word	0x000216c3
   214cc:	000216c3 	.word	0x000216c3
   214d0:	000216c3 	.word	0x000216c3
   214d4:	000216c3 	.word	0x000216c3
   214d8:	000216c3 	.word	0x000216c3
   214dc:	000216c3 	.word	0x000216c3
   214e0:	000216c3 	.word	0x000216c3
   214e4:	000216c3 	.word	0x000216c3
   214e8:	000216c3 	.word	0x000216c3
   214ec:	000216c3 	.word	0x000216c3
   214f0:	000216c3 	.word	0x000216c3
   214f4:	0002166b 	.word	0x0002166b
        randCnt = 0;
   214f8:	4b75      	ldr	r3, [pc, #468]	; (216d0 <hciCoreResetSequence+0x3b8>)
   214fa:	2200      	movs	r2, #0
   214fc:	701a      	strb	r2, [r3, #0]
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   214fe:	4875      	ldr	r0, [pc, #468]	; (216d4 <hciCoreResetSequence+0x3bc>)
   21500:	f7ec f8fe 	bl	d700 <HciSetEventMaskCmd>
        break;
   21504:	e0e0      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   21506:	4874      	ldr	r0, [pc, #464]	; (216d8 <hciCoreResetSequence+0x3c0>)
   21508:	f7eb ffe2 	bl	d4d0 <HciLeSetEventMaskCmd>
        break;
   2150c:	e0dc      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   2150e:	4873      	ldr	r0, [pc, #460]	; (216dc <hciCoreResetSequence+0x3c4>)
   21510:	f7ec f911 	bl	d736 <HciSetEventMaskPage2Cmd>
        break;
   21514:	e0d8      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        HciReadBdAddrCmd();
   21516:	f7ec f874 	bl	d602 <HciReadBdAddrCmd>
        break;
   2151a:	e0d5      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   2151c:	9901      	ldr	r1, [sp, #4]
   2151e:	4870      	ldr	r0, [pc, #448]	; (216e0 <hciCoreResetSequence+0x3c8>)
   21520:	f7ea fe88 	bl	c234 <BdaCpy>
        HciLeReadBufSizeCmd();
   21524:	f7eb fea1 	bl	d26a <HciLeReadBufSizeCmd>
        break;
   21528:	e0ce      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   2152a:	9b01      	ldr	r3, [sp, #4]
   2152c:	781b      	ldrb	r3, [r3, #0]
   2152e:	b29a      	uxth	r2, r3
   21530:	9b01      	ldr	r3, [sp, #4]
   21532:	3301      	adds	r3, #1
   21534:	781b      	ldrb	r3, [r3, #0]
   21536:	b29b      	uxth	r3, r3
   21538:	021b      	lsls	r3, r3, #8
   2153a:	b29b      	uxth	r3, r3
   2153c:	4413      	add	r3, r2
   2153e:	b29a      	uxth	r2, r3
   21540:	4b68      	ldr	r3, [pc, #416]	; (216e4 <hciCoreResetSequence+0x3cc>)
   21542:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   21546:	9b01      	ldr	r3, [sp, #4]
   21548:	3302      	adds	r3, #2
   2154a:	9301      	str	r3, [sp, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   2154c:	9b01      	ldr	r3, [sp, #4]
   2154e:	1c5a      	adds	r2, r3, #1
   21550:	9201      	str	r2, [sp, #4]
   21552:	781a      	ldrb	r2, [r3, #0]
   21554:	4b63      	ldr	r3, [pc, #396]	; (216e4 <hciCoreResetSequence+0x3cc>)
   21556:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        if (!APOLLO3_GE_B0)
   2155a:	4b63      	ldr	r3, [pc, #396]	; (216e8 <hciCoreResetSequence+0x3d0>)
   2155c:	68db      	ldr	r3, [r3, #12]
   2155e:	b2db      	uxtb	r3, r3
   21560:	2b20      	cmp	r3, #32
   21562:	d807      	bhi.n	21574 <hciCoreResetSequence+0x25c>
          hciCoreCb.numBufs--;
   21564:	4b5f      	ldr	r3, [pc, #380]	; (216e4 <hciCoreResetSequence+0x3cc>)
   21566:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   2156a:	3b01      	subs	r3, #1
   2156c:	b2da      	uxtb	r2, r3
   2156e:	4b5d      	ldr	r3, [pc, #372]	; (216e4 <hciCoreResetSequence+0x3cc>)
   21570:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   21574:	4b5b      	ldr	r3, [pc, #364]	; (216e4 <hciCoreResetSequence+0x3cc>)
   21576:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
   2157a:	4b5a      	ldr	r3, [pc, #360]	; (216e4 <hciCoreResetSequence+0x3cc>)
   2157c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        HciLeReadSupStatesCmd();
   21580:	f7eb febf 	bl	d302 <HciLeReadSupStatesCmd>
        break;
   21584:	e0a0      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   21586:	4b57      	ldr	r3, [pc, #348]	; (216e4 <hciCoreResetSequence+0x3cc>)
   21588:	9a01      	ldr	r2, [sp, #4]
   2158a:	3354      	adds	r3, #84	; 0x54
   2158c:	6810      	ldr	r0, [r2, #0]
   2158e:	6851      	ldr	r1, [r2, #4]
   21590:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
   21592:	f7eb fec8 	bl	d326 <HciLeReadWhiteListSizeCmd>
        break;
   21596:	e097      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   21598:	9b01      	ldr	r3, [sp, #4]
   2159a:	1c5a      	adds	r2, r3, #1
   2159c:	9201      	str	r2, [sp, #4]
   2159e:	781a      	ldrb	r2, [r3, #0]
   215a0:	4b50      	ldr	r3, [pc, #320]	; (216e4 <hciCoreResetSequence+0x3cc>)
   215a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        HciLeReadLocalSupFeatCmd();
   215a6:	f7eb fe72 	bl	d28e <HciLeReadLocalSupFeatCmd>
        break;
   215aa:	e08d      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   215ac:	9b01      	ldr	r3, [sp, #4]
   215ae:	781b      	ldrb	r3, [r3, #0]
   215b0:	461a      	mov	r2, r3
   215b2:	9b01      	ldr	r3, [sp, #4]
   215b4:	3301      	adds	r3, #1
   215b6:	781b      	ldrb	r3, [r3, #0]
   215b8:	021b      	lsls	r3, r3, #8
   215ba:	4413      	add	r3, r2
   215bc:	461a      	mov	r2, r3
   215be:	4b49      	ldr	r3, [pc, #292]	; (216e4 <hciCoreResetSequence+0x3cc>)
   215c0:	67da      	str	r2, [r3, #124]	; 0x7c
   215c2:	9b01      	ldr	r3, [sp, #4]
   215c4:	3302      	adds	r3, #2
   215c6:	9301      	str	r3, [sp, #4]
        hciCoreReadResolvingListSize();
   215c8:	f7ff fe66 	bl	21298 <hciCoreReadResolvingListSize>
        break;
   215cc:	e07c      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   215ce:	9b01      	ldr	r3, [sp, #4]
   215d0:	1c5a      	adds	r2, r3, #1
   215d2:	9201      	str	r2, [sp, #4]
   215d4:	781a      	ldrb	r2, [r3, #0]
   215d6:	4b43      	ldr	r3, [pc, #268]	; (216e4 <hciCoreResetSequence+0x3cc>)
   215d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        hciCoreReadMaxDataLen();
   215dc:	f7ff fe7a 	bl	212d4 <hciCoreReadMaxDataLen>
        break;
   215e0:	e072      	b.n	216c8 <hciCoreResetSequence+0x3b0>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   215e2:	9b01      	ldr	r3, [sp, #4]
   215e4:	781b      	ldrb	r3, [r3, #0]
   215e6:	b29a      	uxth	r2, r3
   215e8:	9b01      	ldr	r3, [sp, #4]
   215ea:	3301      	adds	r3, #1
   215ec:	781b      	ldrb	r3, [r3, #0]
   215ee:	b29b      	uxth	r3, r3
   215f0:	021b      	lsls	r3, r3, #8
   215f2:	b29b      	uxth	r3, r3
   215f4:	4413      	add	r3, r2
   215f6:	f8ad 3014 	strh.w	r3, [sp, #20]
   215fa:	9b01      	ldr	r3, [sp, #4]
   215fc:	3302      	adds	r3, #2
   215fe:	9301      	str	r3, [sp, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   21600:	9b01      	ldr	r3, [sp, #4]
   21602:	781b      	ldrb	r3, [r3, #0]
   21604:	b29a      	uxth	r2, r3
   21606:	9b01      	ldr	r3, [sp, #4]
   21608:	3301      	adds	r3, #1
   2160a:	781b      	ldrb	r3, [r3, #0]
   2160c:	b29b      	uxth	r3, r3
   2160e:	021b      	lsls	r3, r3, #8
   21610:	b29b      	uxth	r3, r3
   21612:	4413      	add	r3, r2
   21614:	f8ad 3012 	strh.w	r3, [sp, #18]
   21618:	9b01      	ldr	r3, [sp, #4]
   2161a:	3302      	adds	r3, #2
   2161c:	9301      	str	r3, [sp, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   2161e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   21622:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   21626:	4611      	mov	r1, r2
   21628:	4618      	mov	r0, r3
   2162a:	f7eb fd44 	bl	d0b6 <HciLeWriteDefDataLen>
        break;
   2162e:	e04b      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        if (hciCoreCb.extResetSeq)
   21630:	4b2c      	ldr	r3, [pc, #176]	; (216e4 <hciCoreResetSequence+0x3cc>)
   21632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   21636:	2b00      	cmp	r3, #0
   21638:	d008      	beq.n	2164c <hciCoreResetSequence+0x334>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   2163a:	4b2a      	ldr	r3, [pc, #168]	; (216e4 <hciCoreResetSequence+0x3cc>)
   2163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   21640:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   21644:	4611      	mov	r1, r2
   21646:	9801      	ldr	r0, [sp, #4]
   21648:	4798      	blx	r3
        break;
   2164a:	e03d      	b.n	216c8 <hciCoreResetSequence+0x3b0>
          hciCoreCb.maxAdvDataLen = 0;
   2164c:	4b25      	ldr	r3, [pc, #148]	; (216e4 <hciCoreResetSequence+0x3cc>)
   2164e:	2200      	movs	r2, #0
   21650:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
          hciCoreCb.numSupAdvSets = 0;
   21654:	4b23      	ldr	r3, [pc, #140]	; (216e4 <hciCoreResetSequence+0x3cc>)
   21656:	2200      	movs	r2, #0
   21658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          hciCoreCb.perAdvListSize = 0;
   2165c:	4b21      	ldr	r3, [pc, #132]	; (216e4 <hciCoreResetSequence+0x3cc>)
   2165e:	2200      	movs	r2, #0
   21660:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
          HciLeRandCmd();
   21664:	f7eb fdef 	bl	d246 <HciLeRandCmd>
        break;
   21668:	e02e      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        if (hciCoreCb.extResetSeq)
   2166a:	4b1e      	ldr	r3, [pc, #120]	; (216e4 <hciCoreResetSequence+0x3cc>)
   2166c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   21670:	2b00      	cmp	r3, #0
   21672:	d028      	beq.n	216c6 <hciCoreResetSequence+0x3ae>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   21674:	4b1b      	ldr	r3, [pc, #108]	; (216e4 <hciCoreResetSequence+0x3cc>)
   21676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   2167a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2167e:	4611      	mov	r1, r2
   21680:	9801      	ldr	r0, [sp, #4]
   21682:	4798      	blx	r3
        break;
   21684:	e01f      	b.n	216c6 <hciCoreResetSequence+0x3ae>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   21686:	4b12      	ldr	r3, [pc, #72]	; (216d0 <hciCoreResetSequence+0x3b8>)
   21688:	781b      	ldrb	r3, [r3, #0]
   2168a:	2b02      	cmp	r3, #2
   2168c:	d808      	bhi.n	216a0 <hciCoreResetSequence+0x388>
          randCnt++;
   2168e:	4b10      	ldr	r3, [pc, #64]	; (216d0 <hciCoreResetSequence+0x3b8>)
   21690:	781b      	ldrb	r3, [r3, #0]
   21692:	3301      	adds	r3, #1
   21694:	b2da      	uxtb	r2, r3
   21696:	4b0e      	ldr	r3, [pc, #56]	; (216d0 <hciCoreResetSequence+0x3b8>)
   21698:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   2169a:	f7eb fdd4 	bl	d246 <HciLeRandCmd>
        break;
   2169e:	e013      	b.n	216c8 <hciCoreResetSequence+0x3b0>
          hciCb.resetting = FALSE;
   216a0:	4b12      	ldr	r3, [pc, #72]	; (216ec <hciCoreResetSequence+0x3d4>)
   216a2:	2200      	movs	r2, #0
   216a4:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   216a6:	2300      	movs	r3, #0
   216a8:	f8ad 300c 	strh.w	r3, [sp, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   216ac:	2300      	movs	r3, #0
   216ae:	f88d 300e 	strb.w	r3, [sp, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   216b2:	4b0e      	ldr	r3, [pc, #56]	; (216ec <hciCoreResetSequence+0x3d4>)
   216b4:	689b      	ldr	r3, [r3, #8]
   216b6:	aa03      	add	r2, sp, #12
   216b8:	4610      	mov	r0, r2
   216ba:	4798      	blx	r3
        break;
   216bc:	e004      	b.n	216c8 <hciCoreResetSequence+0x3b0>
    }
  }
   216be:	bf00      	nop
   216c0:	e002      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        break;
   216c2:	bf00      	nop
   216c4:	e000      	b.n	216c8 <hciCoreResetSequence+0x3b0>
        break;
   216c6:	bf00      	nop
}
   216c8:	bf00      	nop
   216ca:	b007      	add	sp, #28
   216cc:	f85d fb04 	ldr.w	pc, [sp], #4
   216d0:	10005be0 	.word	0x10005be0
   216d4:	00027d60 	.word	0x00027d60
   216d8:	00027d68 	.word	0x00027d68
   216dc:	00027d70 	.word	0x00027d70
   216e0:	100041cc 	.word	0x100041cc
   216e4:	10004170 	.word	0x10004170
   216e8:	40020000 	.word	0x40020000
   216ec:	10004230 	.word	0x10004230

000216f0 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   216f0:	b082      	sub	sp, #8
   216f2:	4603      	mov	r3, r0
   216f4:	9100      	str	r1, [sp, #0]
   216f6:	f8ad 3006 	strh.w	r3, [sp, #6]
   216fa:	4613      	mov	r3, r2
   216fc:	f88d 3005 	strb.w	r3, [sp, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   21700:	2312      	movs	r3, #18
}
   21702:	4618      	mov	r0, r3
   21704:	b002      	add	sp, #8
   21706:	4770      	bx	lr

00021708 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   21708:	b082      	sub	sp, #8
   2170a:	4603      	mov	r3, r0
   2170c:	f88d 3007 	strb.w	r3, [sp, #7]

}
   21710:	bf00      	nop
   21712:	b002      	add	sp, #8
   21714:	4770      	bx	lr
	...

00021718 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   21718:	b500      	push	{lr}
   2171a:	b089      	sub	sp, #36	; 0x24
   2171c:	9001      	str	r0, [sp, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   2171e:	2300      	movs	r3, #0
   21720:	9305      	str	r3, [sp, #20]

	vTaskSuspendAll();
   21722:	f001 f963 	bl	229ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   21726:	4b41      	ldr	r3, [pc, #260]	; (2182c <pvPortMalloc+0x114>)
   21728:	681b      	ldr	r3, [r3, #0]
   2172a:	2b00      	cmp	r3, #0
   2172c:	d104      	bne.n	21738 <pvPortMalloc+0x20>
		{
			prvHeapInit();
   2172e:	f000 f8bd 	bl	218ac <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
   21732:	4b3e      	ldr	r3, [pc, #248]	; (2182c <pvPortMalloc+0x114>)
   21734:	2201      	movs	r2, #1
   21736:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   21738:	9b01      	ldr	r3, [sp, #4]
   2173a:	2b00      	cmp	r3, #0
   2173c:	d00e      	beq.n	2175c <pvPortMalloc+0x44>
		{
			xWantedSize += heapSTRUCT_SIZE;
   2173e:	2308      	movs	r3, #8
   21740:	461a      	mov	r2, r3
   21742:	9b01      	ldr	r3, [sp, #4]
   21744:	4413      	add	r3, r2
   21746:	9301      	str	r3, [sp, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   21748:	9b01      	ldr	r3, [sp, #4]
   2174a:	f003 0307 	and.w	r3, r3, #7
   2174e:	2b00      	cmp	r3, #0
   21750:	d004      	beq.n	2175c <pvPortMalloc+0x44>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   21752:	9b01      	ldr	r3, [sp, #4]
   21754:	f023 0307 	bic.w	r3, r3, #7
   21758:	3308      	adds	r3, #8
   2175a:	9301      	str	r3, [sp, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   2175c:	9b01      	ldr	r3, [sp, #4]
   2175e:	2b00      	cmp	r3, #0
   21760:	d057      	beq.n	21812 <pvPortMalloc+0xfa>
   21762:	9b01      	ldr	r3, [sp, #4]
   21764:	f641 32f7 	movw	r2, #7159	; 0x1bf7
   21768:	4293      	cmp	r3, r2
   2176a:	d852      	bhi.n	21812 <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   2176c:	4b30      	ldr	r3, [pc, #192]	; (21830 <pvPortMalloc+0x118>)
   2176e:	9306      	str	r3, [sp, #24]
			pxBlock = xStart.pxNextFreeBlock;
   21770:	4b2f      	ldr	r3, [pc, #188]	; (21830 <pvPortMalloc+0x118>)
   21772:	681b      	ldr	r3, [r3, #0]
   21774:	9307      	str	r3, [sp, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   21776:	e004      	b.n	21782 <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
   21778:	9b07      	ldr	r3, [sp, #28]
   2177a:	9306      	str	r3, [sp, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
   2177c:	9b07      	ldr	r3, [sp, #28]
   2177e:	681b      	ldr	r3, [r3, #0]
   21780:	9307      	str	r3, [sp, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   21782:	9b07      	ldr	r3, [sp, #28]
   21784:	685b      	ldr	r3, [r3, #4]
   21786:	9a01      	ldr	r2, [sp, #4]
   21788:	429a      	cmp	r2, r3
   2178a:	d903      	bls.n	21794 <pvPortMalloc+0x7c>
   2178c:	9b07      	ldr	r3, [sp, #28]
   2178e:	681b      	ldr	r3, [r3, #0]
   21790:	2b00      	cmp	r3, #0
   21792:	d1f1      	bne.n	21778 <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   21794:	9b07      	ldr	r3, [sp, #28]
   21796:	4a27      	ldr	r2, [pc, #156]	; (21834 <pvPortMalloc+0x11c>)
   21798:	4293      	cmp	r3, r2
   2179a:	d03a      	beq.n	21812 <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   2179c:	9b06      	ldr	r3, [sp, #24]
   2179e:	681b      	ldr	r3, [r3, #0]
   217a0:	2208      	movs	r2, #8
   217a2:	4413      	add	r3, r2
   217a4:	9305      	str	r3, [sp, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   217a6:	9b07      	ldr	r3, [sp, #28]
   217a8:	681a      	ldr	r2, [r3, #0]
   217aa:	9b06      	ldr	r3, [sp, #24]
   217ac:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   217ae:	9b07      	ldr	r3, [sp, #28]
   217b0:	685a      	ldr	r2, [r3, #4]
   217b2:	9b01      	ldr	r3, [sp, #4]
   217b4:	1ad3      	subs	r3, r2, r3
   217b6:	2208      	movs	r2, #8
   217b8:	0052      	lsls	r2, r2, #1
   217ba:	4293      	cmp	r3, r2
   217bc:	d922      	bls.n	21804 <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   217be:	9a07      	ldr	r2, [sp, #28]
   217c0:	9b01      	ldr	r3, [sp, #4]
   217c2:	4413      	add	r3, r2
   217c4:	9303      	str	r3, [sp, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   217c6:	9b07      	ldr	r3, [sp, #28]
   217c8:	685a      	ldr	r2, [r3, #4]
   217ca:	9b01      	ldr	r3, [sp, #4]
   217cc:	1ad2      	subs	r2, r2, r3
   217ce:	9b03      	ldr	r3, [sp, #12]
   217d0:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   217d2:	9b07      	ldr	r3, [sp, #28]
   217d4:	9a01      	ldr	r2, [sp, #4]
   217d6:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   217d8:	9b03      	ldr	r3, [sp, #12]
   217da:	685b      	ldr	r3, [r3, #4]
   217dc:	9302      	str	r3, [sp, #8]
   217de:	4b14      	ldr	r3, [pc, #80]	; (21830 <pvPortMalloc+0x118>)
   217e0:	9304      	str	r3, [sp, #16]
   217e2:	e002      	b.n	217ea <pvPortMalloc+0xd2>
   217e4:	9b04      	ldr	r3, [sp, #16]
   217e6:	681b      	ldr	r3, [r3, #0]
   217e8:	9304      	str	r3, [sp, #16]
   217ea:	9b04      	ldr	r3, [sp, #16]
   217ec:	681b      	ldr	r3, [r3, #0]
   217ee:	685b      	ldr	r3, [r3, #4]
   217f0:	9a02      	ldr	r2, [sp, #8]
   217f2:	429a      	cmp	r2, r3
   217f4:	d8f6      	bhi.n	217e4 <pvPortMalloc+0xcc>
   217f6:	9b04      	ldr	r3, [sp, #16]
   217f8:	681a      	ldr	r2, [r3, #0]
   217fa:	9b03      	ldr	r3, [sp, #12]
   217fc:	601a      	str	r2, [r3, #0]
   217fe:	9b04      	ldr	r3, [sp, #16]
   21800:	9a03      	ldr	r2, [sp, #12]
   21802:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   21804:	4b0c      	ldr	r3, [pc, #48]	; (21838 <pvPortMalloc+0x120>)
   21806:	681a      	ldr	r2, [r3, #0]
   21808:	9b07      	ldr	r3, [sp, #28]
   2180a:	685b      	ldr	r3, [r3, #4]
   2180c:	1ad3      	subs	r3, r2, r3
   2180e:	4a0a      	ldr	r2, [pc, #40]	; (21838 <pvPortMalloc+0x120>)
   21810:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   21812:	f001 f927 	bl	22a64 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   21816:	9b05      	ldr	r3, [sp, #20]
   21818:	2b00      	cmp	r3, #0
   2181a:	d101      	bne.n	21820 <pvPortMalloc+0x108>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   2181c:	f7f5 fb9f 	bl	16f5e <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
   21820:	9b05      	ldr	r3, [sp, #20]
}
   21822:	4618      	mov	r0, r3
   21824:	b009      	add	sp, #36	; 0x24
   21826:	f85d fb04 	ldr.w	pc, [sp], #4
   2182a:	bf00      	nop
   2182c:	100077f4 	.word	0x100077f4
   21830:	100077e4 	.word	0x100077e4
   21834:	100077ec 	.word	0x100077ec
   21838:	10002bc4 	.word	0x10002bc4

0002183c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   2183c:	b500      	push	{lr}
   2183e:	b087      	sub	sp, #28
   21840:	9001      	str	r0, [sp, #4]
uint8_t *puc = ( uint8_t * ) pv;
   21842:	9b01      	ldr	r3, [sp, #4]
   21844:	9304      	str	r3, [sp, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
   21846:	9b01      	ldr	r3, [sp, #4]
   21848:	2b00      	cmp	r3, #0
   2184a:	d027      	beq.n	2189c <vPortFree+0x60>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   2184c:	2308      	movs	r3, #8
   2184e:	425b      	negs	r3, r3
   21850:	9a04      	ldr	r2, [sp, #16]
   21852:	4413      	add	r3, r2
   21854:	9304      	str	r3, [sp, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
   21856:	9b04      	ldr	r3, [sp, #16]
   21858:	9303      	str	r3, [sp, #12]

		vTaskSuspendAll();
   2185a:	f001 f8c7 	bl	229ec <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   2185e:	9b03      	ldr	r3, [sp, #12]
   21860:	685b      	ldr	r3, [r3, #4]
   21862:	9302      	str	r3, [sp, #8]
   21864:	4b0f      	ldr	r3, [pc, #60]	; (218a4 <vPortFree+0x68>)
   21866:	9305      	str	r3, [sp, #20]
   21868:	e002      	b.n	21870 <vPortFree+0x34>
   2186a:	9b05      	ldr	r3, [sp, #20]
   2186c:	681b      	ldr	r3, [r3, #0]
   2186e:	9305      	str	r3, [sp, #20]
   21870:	9b05      	ldr	r3, [sp, #20]
   21872:	681b      	ldr	r3, [r3, #0]
   21874:	685b      	ldr	r3, [r3, #4]
   21876:	9a02      	ldr	r2, [sp, #8]
   21878:	429a      	cmp	r2, r3
   2187a:	d8f6      	bhi.n	2186a <vPortFree+0x2e>
   2187c:	9b05      	ldr	r3, [sp, #20]
   2187e:	681a      	ldr	r2, [r3, #0]
   21880:	9b03      	ldr	r3, [sp, #12]
   21882:	601a      	str	r2, [r3, #0]
   21884:	9b05      	ldr	r3, [sp, #20]
   21886:	9a03      	ldr	r2, [sp, #12]
   21888:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   2188a:	9b03      	ldr	r3, [sp, #12]
   2188c:	685a      	ldr	r2, [r3, #4]
   2188e:	4b06      	ldr	r3, [pc, #24]	; (218a8 <vPortFree+0x6c>)
   21890:	681b      	ldr	r3, [r3, #0]
   21892:	4413      	add	r3, r2
   21894:	4a04      	ldr	r2, [pc, #16]	; (218a8 <vPortFree+0x6c>)
   21896:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
   21898:	f001 f8e4 	bl	22a64 <xTaskResumeAll>
	}
}
   2189c:	bf00      	nop
   2189e:	b007      	add	sp, #28
   218a0:	f85d fb04 	ldr.w	pc, [sp], #4
   218a4:	100077e4 	.word	0x100077e4
   218a8:	10002bc4 	.word	0x10002bc4

000218ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   218ac:	b082      	sub	sp, #8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   218ae:	4b0e      	ldr	r3, [pc, #56]	; (218e8 <prvHeapInit+0x3c>)
   218b0:	f023 0307 	bic.w	r3, r3, #7
   218b4:	9301      	str	r3, [sp, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   218b6:	4a0d      	ldr	r2, [pc, #52]	; (218ec <prvHeapInit+0x40>)
   218b8:	9b01      	ldr	r3, [sp, #4]
   218ba:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   218bc:	4b0b      	ldr	r3, [pc, #44]	; (218ec <prvHeapInit+0x40>)
   218be:	2200      	movs	r2, #0
   218c0:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   218c2:	4b0b      	ldr	r3, [pc, #44]	; (218f0 <prvHeapInit+0x44>)
   218c4:	f641 32f8 	movw	r2, #7160	; 0x1bf8
   218c8:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
   218ca:	4b09      	ldr	r3, [pc, #36]	; (218f0 <prvHeapInit+0x44>)
   218cc:	2200      	movs	r2, #0
   218ce:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   218d0:	9b01      	ldr	r3, [sp, #4]
   218d2:	9300      	str	r3, [sp, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   218d4:	9b00      	ldr	r3, [sp, #0]
   218d6:	f641 32f8 	movw	r2, #7160	; 0x1bf8
   218da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   218dc:	9b00      	ldr	r3, [sp, #0]
   218de:	4a04      	ldr	r2, [pc, #16]	; (218f0 <prvHeapInit+0x44>)
   218e0:	601a      	str	r2, [r3, #0]
}
   218e2:	bf00      	nop
   218e4:	b002      	add	sp, #8
   218e6:	4770      	bx	lr
   218e8:	10005bec 	.word	0x10005bec
   218ec:	100077e4 	.word	0x100077e4
   218f0:	100077ec 	.word	0x100077ec

000218f4 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   218f4:	b500      	push	{lr}
   218f6:	b089      	sub	sp, #36	; 0x24
   218f8:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   218fa:	ab03      	add	r3, sp, #12
   218fc:	4618      	mov	r0, r3
   218fe:	f005 fc17 	bl	27130 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   21902:	9b03      	ldr	r3, [sp, #12]
   21904:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   21906:	9b07      	ldr	r3, [sp, #28]
   21908:	4a07      	ldr	r2, [pc, #28]	; (21928 <am_util_delay_ms+0x34>)
   2190a:	fba2 2303 	umull	r2, r3, r2, r3
   2190e:	099a      	lsrs	r2, r3, #6
   21910:	9b01      	ldr	r3, [sp, #4]
   21912:	fb02 f303 	mul.w	r3, r2, r3
   21916:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   21918:	9806      	ldr	r0, [sp, #24]
   2191a:	f005 fc6f 	bl	271fc <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   2191e:	bf00      	nop
   21920:	b009      	add	sp, #36	; 0x24
   21922:	f85d fb04 	ldr.w	pc, [sp], #4
   21926:	bf00      	nop
   21928:	057619f1 	.word	0x057619f1

0002192c <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   2192c:	b500      	push	{lr}
   2192e:	b089      	sub	sp, #36	; 0x24
   21930:	9001      	str	r0, [sp, #4]
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   21932:	ab03      	add	r3, sp, #12
   21934:	4618      	mov	r0, r3
   21936:	f005 fbfb 	bl	27130 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   2193a:	9b03      	ldr	r3, [sp, #12]
   2193c:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   2193e:	9b07      	ldr	r3, [sp, #28]
   21940:	4a07      	ldr	r2, [pc, #28]	; (21960 <am_util_delay_us+0x34>)
   21942:	fba2 2303 	umull	r2, r3, r2, r3
   21946:	0c9a      	lsrs	r2, r3, #18
   21948:	9b01      	ldr	r3, [sp, #4]
   2194a:	fb02 f303 	mul.w	r3, r2, r3
   2194e:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   21950:	9806      	ldr	r0, [sp, #24]
   21952:	f005 fc53 	bl	271fc <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   21956:	bf00      	nop
   21958:	b009      	add	sp, #36	; 0x24
   2195a:	f85d fb04 	ldr.w	pc, [sp], #4
   2195e:	bf00      	nop
   21960:	165e9f81 	.word	0x165e9f81

00021964 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   21964:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   21966:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   2196a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   2196c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   21970:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   21974:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   21978:	f000 f80a 	bl	21990 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   2197c:	bd01      	pop	{r0, pc}
}
   2197e:	bf00      	nop
   21980:	4618      	mov	r0, r3

00021982 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   21982:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   21984:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   21986:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   21988:	4770      	bx	lr
}
   2198a:	bf00      	nop
   2198c:	4618      	mov	r0, r3
	...

00021990 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   21990:	b500      	push	{lr}
   21992:	b097      	sub	sp, #92	; 0x5c
   21994:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   21996:	ab03      	add	r3, sp, #12
   21998:	2200      	movs	r2, #0
   2199a:	601a      	str	r2, [r3, #0]
   2199c:	605a      	str	r2, [r3, #4]
   2199e:	609a      	str	r2, [r3, #8]
   219a0:	60da      	str	r2, [r3, #12]
   219a2:	611a      	str	r2, [r3, #16]
   219a4:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
   219a6:	2300      	movs	r3, #0
   219a8:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   219aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   219ac:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   219ae:	4b2e      	ldr	r3, [pc, #184]	; (21a68 <am_util_faultisr_collect_data+0xd8>)
   219b0:	681b      	ldr	r3, [r3, #0]
   219b2:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   219b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   219b6:	b2db      	uxtb	r3, r3
   219b8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   219bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   219be:	0a1b      	lsrs	r3, r3, #8
   219c0:	b2db      	uxtb	r3, r3
   219c2:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   219c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   219c8:	0c1b      	lsrs	r3, r3, #16
   219ca:	b29b      	uxth	r3, r3
   219cc:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   219d0:	4b26      	ldr	r3, [pc, #152]	; (21a6c <am_util_faultisr_collect_data+0xdc>)
   219d2:	681b      	ldr	r3, [r3, #0]
   219d4:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   219d6:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   219da:	b2db      	uxtb	r3, r3
   219dc:	f003 0302 	and.w	r3, r3, #2
   219e0:	2b00      	cmp	r3, #0
   219e2:	d005      	beq.n	219f0 <am_util_faultisr_collect_data+0x60>
   219e4:	9901      	ldr	r1, [sp, #4]
   219e6:	2006      	movs	r0, #6
   219e8:	f7ff ffcb 	bl	21982 <getStackedReg>
   219ec:	4603      	mov	r3, r0
   219ee:	e001      	b.n	219f4 <am_util_faultisr_collect_data+0x64>
   219f0:	f04f 33ff 	mov.w	r3, #4294967295
   219f4:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   219f6:	9901      	ldr	r1, [sp, #4]
   219f8:	2000      	movs	r0, #0
   219fa:	f7ff ffc2 	bl	21982 <getStackedReg>
   219fe:	4603      	mov	r3, r0
   21a00:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   21a02:	9901      	ldr	r1, [sp, #4]
   21a04:	2001      	movs	r0, #1
   21a06:	f7ff ffbc 	bl	21982 <getStackedReg>
   21a0a:	4603      	mov	r3, r0
   21a0c:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   21a0e:	9901      	ldr	r1, [sp, #4]
   21a10:	2002      	movs	r0, #2
   21a12:	f7ff ffb6 	bl	21982 <getStackedReg>
   21a16:	4603      	mov	r3, r0
   21a18:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   21a1a:	9901      	ldr	r1, [sp, #4]
   21a1c:	2003      	movs	r0, #3
   21a1e:	f7ff ffb0 	bl	21982 <getStackedReg>
   21a22:	4603      	mov	r3, r0
   21a24:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   21a26:	9901      	ldr	r1, [sp, #4]
   21a28:	2004      	movs	r0, #4
   21a2a:	f7ff ffaa 	bl	21982 <getStackedReg>
   21a2e:	4603      	mov	r3, r0
   21a30:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   21a32:	9901      	ldr	r1, [sp, #4]
   21a34:	2005      	movs	r0, #5
   21a36:	f7ff ffa4 	bl	21982 <getStackedReg>
   21a3a:	4603      	mov	r3, r0
   21a3c:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   21a3e:	9901      	ldr	r1, [sp, #4]
   21a40:	2006      	movs	r0, #6
   21a42:	f7ff ff9e 	bl	21982 <getStackedReg>
   21a46:	4603      	mov	r3, r0
   21a48:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   21a4a:	9901      	ldr	r1, [sp, #4]
   21a4c:	2007      	movs	r0, #7
   21a4e:	f7ff ff98 	bl	21982 <getStackedReg>
   21a52:	4603      	mov	r3, r0
   21a54:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   21a56:	ab03      	add	r3, sp, #12
   21a58:	4619      	mov	r1, r3
   21a5a:	2002      	movs	r0, #2
   21a5c:	f005 fdae 	bl	275bc <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
   21a60:	2300      	movs	r3, #0
   21a62:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   21a64:	e7fe      	b.n	21a64 <am_util_faultisr_collect_data+0xd4>
   21a66:	bf00      	nop
   21a68:	e000ed28 	.word	0xe000ed28
   21a6c:	e000ed38 	.word	0xe000ed38

00021a70 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   21a70:	b500      	push	{lr}
   21a72:	b083      	sub	sp, #12
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   21a74:	2018      	movs	r0, #24
   21a76:	f7ff fe4f 	bl	21718 <pvPortMalloc>
   21a7a:	9001      	str	r0, [sp, #4]

		if( pxEventBits != NULL )
   21a7c:	9b01      	ldr	r3, [sp, #4]
   21a7e:	2b00      	cmp	r3, #0
   21a80:	d007      	beq.n	21a92 <xEventGroupCreate+0x22>
		{
			pxEventBits->uxEventBits = 0;
   21a82:	9b01      	ldr	r3, [sp, #4]
   21a84:	2200      	movs	r2, #0
   21a86:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   21a88:	9b01      	ldr	r3, [sp, #4]
   21a8a:	3304      	adds	r3, #4
   21a8c:	4618      	mov	r0, r3
   21a8e:	f000 f94a 	bl	21d26 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
   21a92:	9b01      	ldr	r3, [sp, #4]
	}
   21a94:	4618      	mov	r0, r3
   21a96:	b003      	add	sp, #12
   21a98:	f85d fb04 	ldr.w	pc, [sp], #4

00021a9c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
   21a9c:	b500      	push	{lr}
   21a9e:	b08d      	sub	sp, #52	; 0x34
   21aa0:	9003      	str	r0, [sp, #12]
   21aa2:	9102      	str	r1, [sp, #8]
   21aa4:	9201      	str	r2, [sp, #4]
   21aa6:	9300      	str	r3, [sp, #0]
EventGroup_t *pxEventBits = xEventGroup;
   21aa8:	9b03      	ldr	r3, [sp, #12]
   21aaa:	9309      	str	r3, [sp, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
   21aac:	2300      	movs	r3, #0
   21aae:	930a      	str	r3, [sp, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
   21ab0:	2300      	movs	r3, #0
   21ab2:	9308      	str	r3, [sp, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   21ab4:	9b03      	ldr	r3, [sp, #12]
   21ab6:	2b00      	cmp	r3, #0
   21ab8:	d100      	bne.n	21abc <xEventGroupWaitBits+0x20>
   21aba:	e7fe      	b.n	21aba <xEventGroupWaitBits+0x1e>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   21abc:	9b02      	ldr	r3, [sp, #8]
   21abe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   21ac2:	2b00      	cmp	r3, #0
   21ac4:	d000      	beq.n	21ac8 <xEventGroupWaitBits+0x2c>
   21ac6:	e7fe      	b.n	21ac6 <xEventGroupWaitBits+0x2a>
	configASSERT( uxBitsToWaitFor != 0 );
   21ac8:	9b02      	ldr	r3, [sp, #8]
   21aca:	2b00      	cmp	r3, #0
   21acc:	d100      	bne.n	21ad0 <xEventGroupWaitBits+0x34>
   21ace:	e7fe      	b.n	21ace <xEventGroupWaitBits+0x32>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   21ad0:	f001 fbbe 	bl	23250 <xTaskGetSchedulerState>
   21ad4:	4603      	mov	r3, r0
   21ad6:	2b00      	cmp	r3, #0
   21ad8:	d102      	bne.n	21ae0 <xEventGroupWaitBits+0x44>
   21ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21adc:	2b00      	cmp	r3, #0
   21ade:	d101      	bne.n	21ae4 <xEventGroupWaitBits+0x48>
   21ae0:	2301      	movs	r3, #1
   21ae2:	e000      	b.n	21ae6 <xEventGroupWaitBits+0x4a>
   21ae4:	2300      	movs	r3, #0
   21ae6:	2b00      	cmp	r3, #0
   21ae8:	d100      	bne.n	21aec <xEventGroupWaitBits+0x50>
   21aea:	e7fe      	b.n	21aea <xEventGroupWaitBits+0x4e>
	}
	#endif

	vTaskSuspendAll();
   21aec:	f000 ff7e 	bl	229ec <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   21af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21af2:	681b      	ldr	r3, [r3, #0]
   21af4:	9307      	str	r3, [sp, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
   21af6:	9a00      	ldr	r2, [sp, #0]
   21af8:	9902      	ldr	r1, [sp, #8]
   21afa:	9807      	ldr	r0, [sp, #28]
   21afc:	f000 f8f6 	bl	21cec <prvTestWaitCondition>
   21b00:	9006      	str	r0, [sp, #24]

		if( xWaitConditionMet != pdFALSE )
   21b02:	9b06      	ldr	r3, [sp, #24]
   21b04:	2b00      	cmp	r3, #0
   21b06:	d00e      	beq.n	21b26 <xEventGroupWaitBits+0x8a>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
   21b08:	9b07      	ldr	r3, [sp, #28]
   21b0a:	930b      	str	r3, [sp, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
   21b0c:	2300      	movs	r3, #0
   21b0e:	930e      	str	r3, [sp, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
   21b10:	9b01      	ldr	r3, [sp, #4]
   21b12:	2b00      	cmp	r3, #0
   21b14:	d028      	beq.n	21b68 <xEventGroupWaitBits+0xcc>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   21b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21b18:	681a      	ldr	r2, [r3, #0]
   21b1a:	9b02      	ldr	r3, [sp, #8]
   21b1c:	43db      	mvns	r3, r3
   21b1e:	401a      	ands	r2, r3
   21b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21b22:	601a      	str	r2, [r3, #0]
   21b24:	e020      	b.n	21b68 <xEventGroupWaitBits+0xcc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
   21b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21b28:	2b00      	cmp	r3, #0
   21b2a:	d104      	bne.n	21b36 <xEventGroupWaitBits+0x9a>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
   21b2c:	9b07      	ldr	r3, [sp, #28]
   21b2e:	930b      	str	r3, [sp, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
   21b30:	2301      	movs	r3, #1
   21b32:	9308      	str	r3, [sp, #32]
   21b34:	e018      	b.n	21b68 <xEventGroupWaitBits+0xcc>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
   21b36:	9b01      	ldr	r3, [sp, #4]
   21b38:	2b00      	cmp	r3, #0
   21b3a:	d003      	beq.n	21b44 <xEventGroupWaitBits+0xa8>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
   21b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   21b42:	930a      	str	r3, [sp, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
   21b44:	9b00      	ldr	r3, [sp, #0]
   21b46:	2b00      	cmp	r3, #0
   21b48:	d003      	beq.n	21b52 <xEventGroupWaitBits+0xb6>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
   21b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   21b50:	930a      	str	r3, [sp, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   21b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21b54:	1d18      	adds	r0, r3, #4
   21b56:	9a02      	ldr	r2, [sp, #8]
   21b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21b5a:	4313      	orrs	r3, r2
   21b5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21b5e:	4619      	mov	r1, r3
   21b60:	f001 f964 	bl	22e2c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
   21b64:	2300      	movs	r3, #0
   21b66:	930b      	str	r3, [sp, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
   21b68:	f000 ff7c 	bl	22a64 <xTaskResumeAll>
   21b6c:	9005      	str	r0, [sp, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
   21b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21b70:	2b00      	cmp	r3, #0
   21b72:	d031      	beq.n	21bd8 <xEventGroupWaitBits+0x13c>
	{
		if( xAlreadyYielded == pdFALSE )
   21b74:	9b05      	ldr	r3, [sp, #20]
   21b76:	2b00      	cmp	r3, #0
   21b78:	d107      	bne.n	21b8a <xEventGroupWaitBits+0xee>
		{
			portYIELD_WITHIN_API();
   21b7a:	4b1a      	ldr	r3, [pc, #104]	; (21be4 <xEventGroupWaitBits+0x148>)
   21b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21b80:	601a      	str	r2, [r3, #0]
   21b82:	f3bf 8f4f 	dsb	sy
   21b86:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
   21b8a:	f001 fb7b 	bl	23284 <uxTaskResetEventItemValue>
   21b8e:	900b      	str	r0, [sp, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   21b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   21b96:	2b00      	cmp	r3, #0
   21b98:	d11a      	bne.n	21bd0 <xEventGroupWaitBits+0x134>
		{
			taskENTER_CRITICAL();
   21b9a:	f7fa fcf1 	bl	1c580 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
   21b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21ba0:	681b      	ldr	r3, [r3, #0]
   21ba2:	930b      	str	r3, [sp, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
   21ba4:	9a00      	ldr	r2, [sp, #0]
   21ba6:	9902      	ldr	r1, [sp, #8]
   21ba8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21baa:	f000 f89f 	bl	21cec <prvTestWaitCondition>
   21bae:	4603      	mov	r3, r0
   21bb0:	2b00      	cmp	r3, #0
   21bb2:	d009      	beq.n	21bc8 <xEventGroupWaitBits+0x12c>
				{
					if( xClearOnExit != pdFALSE )
   21bb4:	9b01      	ldr	r3, [sp, #4]
   21bb6:	2b00      	cmp	r3, #0
   21bb8:	d006      	beq.n	21bc8 <xEventGroupWaitBits+0x12c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   21bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21bbc:	681a      	ldr	r2, [r3, #0]
   21bbe:	9b02      	ldr	r3, [sp, #8]
   21bc0:	43db      	mvns	r3, r3
   21bc2:	401a      	ands	r2, r3
   21bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21bc6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
   21bc8:	2301      	movs	r3, #1
   21bca:	9308      	str	r3, [sp, #32]
			}
			taskEXIT_CRITICAL();
   21bcc:	f7fa fcfa 	bl	1c5c4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   21bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21bd2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   21bd6:	930b      	str	r3, [sp, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
   21bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
   21bda:	4618      	mov	r0, r3
   21bdc:	b00d      	add	sp, #52	; 0x34
   21bde:	f85d fb04 	ldr.w	pc, [sp], #4
   21be2:	bf00      	nop
   21be4:	e000ed04 	.word	0xe000ed04

00021be8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
   21be8:	b500      	push	{lr}
   21bea:	b08d      	sub	sp, #52	; 0x34
   21bec:	9001      	str	r0, [sp, #4]
   21bee:	9100      	str	r1, [sp, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
   21bf0:	2300      	movs	r3, #0
   21bf2:	930a      	str	r3, [sp, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
   21bf4:	9b01      	ldr	r3, [sp, #4]
   21bf6:	9308      	str	r3, [sp, #32]
BaseType_t xMatchFound = pdFALSE;
   21bf8:	2300      	movs	r3, #0
   21bfa:	9309      	str	r3, [sp, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
   21bfc:	9b01      	ldr	r3, [sp, #4]
   21bfe:	2b00      	cmp	r3, #0
   21c00:	d100      	bne.n	21c04 <xEventGroupSetBits+0x1c>
   21c02:	e7fe      	b.n	21c02 <xEventGroupSetBits+0x1a>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   21c04:	9b00      	ldr	r3, [sp, #0]
   21c06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   21c0a:	2b00      	cmp	r3, #0
   21c0c:	d000      	beq.n	21c10 <xEventGroupSetBits+0x28>
   21c0e:	e7fe      	b.n	21c0e <xEventGroupSetBits+0x26>

	pxList = &( pxEventBits->xTasksWaitingForBits );
   21c10:	9b08      	ldr	r3, [sp, #32]
   21c12:	3304      	adds	r3, #4
   21c14:	9307      	str	r3, [sp, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   21c16:	9b07      	ldr	r3, [sp, #28]
   21c18:	3308      	adds	r3, #8
   21c1a:	9306      	str	r3, [sp, #24]
	vTaskSuspendAll();
   21c1c:	f000 fee6 	bl	229ec <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
   21c20:	9b07      	ldr	r3, [sp, #28]
   21c22:	68db      	ldr	r3, [r3, #12]
   21c24:	930b      	str	r3, [sp, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
   21c26:	9b08      	ldr	r3, [sp, #32]
   21c28:	681a      	ldr	r2, [r3, #0]
   21c2a:	9b00      	ldr	r3, [sp, #0]
   21c2c:	431a      	orrs	r2, r3
   21c2e:	9b08      	ldr	r3, [sp, #32]
   21c30:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   21c32:	e03c      	b.n	21cae <xEventGroupSetBits+0xc6>
		{
			pxNext = listGET_NEXT( pxListItem );
   21c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21c36:	685b      	ldr	r3, [r3, #4]
   21c38:	9305      	str	r3, [sp, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   21c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21c3c:	681b      	ldr	r3, [r3, #0]
   21c3e:	9304      	str	r3, [sp, #16]
			xMatchFound = pdFALSE;
   21c40:	2300      	movs	r3, #0
   21c42:	9309      	str	r3, [sp, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
   21c44:	9b04      	ldr	r3, [sp, #16]
   21c46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   21c4a:	9303      	str	r3, [sp, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   21c4c:	9b04      	ldr	r3, [sp, #16]
   21c4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   21c52:	9304      	str	r3, [sp, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   21c54:	9b03      	ldr	r3, [sp, #12]
   21c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   21c5a:	2b00      	cmp	r3, #0
   21c5c:	d108      	bne.n	21c70 <xEventGroupSetBits+0x88>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   21c5e:	9b08      	ldr	r3, [sp, #32]
   21c60:	681a      	ldr	r2, [r3, #0]
   21c62:	9b04      	ldr	r3, [sp, #16]
   21c64:	4013      	ands	r3, r2
   21c66:	2b00      	cmp	r3, #0
   21c68:	d00b      	beq.n	21c82 <xEventGroupSetBits+0x9a>
				{
					xMatchFound = pdTRUE;
   21c6a:	2301      	movs	r3, #1
   21c6c:	9309      	str	r3, [sp, #36]	; 0x24
   21c6e:	e008      	b.n	21c82 <xEventGroupSetBits+0x9a>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   21c70:	9b08      	ldr	r3, [sp, #32]
   21c72:	681a      	ldr	r2, [r3, #0]
   21c74:	9b04      	ldr	r3, [sp, #16]
   21c76:	4013      	ands	r3, r2
   21c78:	9a04      	ldr	r2, [sp, #16]
   21c7a:	429a      	cmp	r2, r3
   21c7c:	d101      	bne.n	21c82 <xEventGroupSetBits+0x9a>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
   21c7e:	2301      	movs	r3, #1
   21c80:	9309      	str	r3, [sp, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
   21c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21c84:	2b00      	cmp	r3, #0
   21c86:	d010      	beq.n	21caa <xEventGroupSetBits+0xc2>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   21c88:	9b03      	ldr	r3, [sp, #12]
   21c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   21c8e:	2b00      	cmp	r3, #0
   21c90:	d003      	beq.n	21c9a <xEventGroupSetBits+0xb2>
				{
					uxBitsToClear |= uxBitsWaitedFor;
   21c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21c94:	9b04      	ldr	r3, [sp, #16]
   21c96:	4313      	orrs	r3, r2
   21c98:	930a      	str	r3, [sp, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   21c9a:	9b08      	ldr	r3, [sp, #32]
   21c9c:	681b      	ldr	r3, [r3, #0]
   21c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   21ca2:	4619      	mov	r1, r3
   21ca4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21ca6:	f001 f963 	bl	22f70 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
   21caa:	9b05      	ldr	r3, [sp, #20]
   21cac:	930b      	str	r3, [sp, #44]	; 0x2c
		while( pxListItem != pxListEnd )
   21cae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21cb0:	9b06      	ldr	r3, [sp, #24]
   21cb2:	429a      	cmp	r2, r3
   21cb4:	d1be      	bne.n	21c34 <xEventGroupSetBits+0x4c>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   21cb6:	9b08      	ldr	r3, [sp, #32]
   21cb8:	681a      	ldr	r2, [r3, #0]
   21cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21cbc:	43db      	mvns	r3, r3
   21cbe:	401a      	ands	r2, r3
   21cc0:	9b08      	ldr	r3, [sp, #32]
   21cc2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
   21cc4:	f000 fece 	bl	22a64 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
   21cc8:	9b08      	ldr	r3, [sp, #32]
   21cca:	681b      	ldr	r3, [r3, #0]
}
   21ccc:	4618      	mov	r0, r3
   21cce:	b00d      	add	sp, #52	; 0x34
   21cd0:	f85d fb04 	ldr.w	pc, [sp], #4

00021cd4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
   21cd4:	b500      	push	{lr}
   21cd6:	b083      	sub	sp, #12
   21cd8:	9001      	str	r0, [sp, #4]
   21cda:	9100      	str	r1, [sp, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
   21cdc:	9900      	ldr	r1, [sp, #0]
   21cde:	9801      	ldr	r0, [sp, #4]
   21ce0:	f7ff ff82 	bl	21be8 <xEventGroupSetBits>
}
   21ce4:	bf00      	nop
   21ce6:	b003      	add	sp, #12
   21ce8:	f85d fb04 	ldr.w	pc, [sp], #4

00021cec <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
   21cec:	b086      	sub	sp, #24
   21cee:	9003      	str	r0, [sp, #12]
   21cf0:	9102      	str	r1, [sp, #8]
   21cf2:	9201      	str	r2, [sp, #4]
BaseType_t xWaitConditionMet = pdFALSE;
   21cf4:	2300      	movs	r3, #0
   21cf6:	9305      	str	r3, [sp, #20]

	if( xWaitForAllBits == pdFALSE )
   21cf8:	9b01      	ldr	r3, [sp, #4]
   21cfa:	2b00      	cmp	r3, #0
   21cfc:	d107      	bne.n	21d0e <prvTestWaitCondition+0x22>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   21cfe:	9a03      	ldr	r2, [sp, #12]
   21d00:	9b02      	ldr	r3, [sp, #8]
   21d02:	4013      	ands	r3, r2
   21d04:	2b00      	cmp	r3, #0
   21d06:	d00a      	beq.n	21d1e <prvTestWaitCondition+0x32>
		{
			xWaitConditionMet = pdTRUE;
   21d08:	2301      	movs	r3, #1
   21d0a:	9305      	str	r3, [sp, #20]
   21d0c:	e007      	b.n	21d1e <prvTestWaitCondition+0x32>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   21d0e:	9a03      	ldr	r2, [sp, #12]
   21d10:	9b02      	ldr	r3, [sp, #8]
   21d12:	4013      	ands	r3, r2
   21d14:	9a02      	ldr	r2, [sp, #8]
   21d16:	429a      	cmp	r2, r3
   21d18:	d101      	bne.n	21d1e <prvTestWaitCondition+0x32>
		{
			xWaitConditionMet = pdTRUE;
   21d1a:	2301      	movs	r3, #1
   21d1c:	9305      	str	r3, [sp, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
   21d1e:	9b05      	ldr	r3, [sp, #20]
}
   21d20:	4618      	mov	r0, r3
   21d22:	b006      	add	sp, #24
   21d24:	4770      	bx	lr

00021d26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   21d26:	b082      	sub	sp, #8
   21d28:	9001      	str	r0, [sp, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   21d2a:	9b01      	ldr	r3, [sp, #4]
   21d2c:	f103 0208 	add.w	r2, r3, #8
   21d30:	9b01      	ldr	r3, [sp, #4]
   21d32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   21d34:	9b01      	ldr	r3, [sp, #4]
   21d36:	f04f 32ff 	mov.w	r2, #4294967295
   21d3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   21d3c:	9b01      	ldr	r3, [sp, #4]
   21d3e:	f103 0208 	add.w	r2, r3, #8
   21d42:	9b01      	ldr	r3, [sp, #4]
   21d44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   21d46:	9b01      	ldr	r3, [sp, #4]
   21d48:	f103 0208 	add.w	r2, r3, #8
   21d4c:	9b01      	ldr	r3, [sp, #4]
   21d4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   21d50:	9b01      	ldr	r3, [sp, #4]
   21d52:	2200      	movs	r2, #0
   21d54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   21d56:	bf00      	nop
   21d58:	b002      	add	sp, #8
   21d5a:	4770      	bx	lr

00021d5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   21d5c:	b082      	sub	sp, #8
   21d5e:	9001      	str	r0, [sp, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   21d60:	9b01      	ldr	r3, [sp, #4]
   21d62:	2200      	movs	r2, #0
   21d64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   21d66:	bf00      	nop
   21d68:	b002      	add	sp, #8
   21d6a:	4770      	bx	lr

00021d6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   21d6c:	b084      	sub	sp, #16
   21d6e:	9001      	str	r0, [sp, #4]
   21d70:	9100      	str	r1, [sp, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   21d72:	9b01      	ldr	r3, [sp, #4]
   21d74:	685b      	ldr	r3, [r3, #4]
   21d76:	9303      	str	r3, [sp, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   21d78:	9b00      	ldr	r3, [sp, #0]
   21d7a:	9a03      	ldr	r2, [sp, #12]
   21d7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   21d7e:	9b03      	ldr	r3, [sp, #12]
   21d80:	689a      	ldr	r2, [r3, #8]
   21d82:	9b00      	ldr	r3, [sp, #0]
   21d84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   21d86:	9b03      	ldr	r3, [sp, #12]
   21d88:	689b      	ldr	r3, [r3, #8]
   21d8a:	9a00      	ldr	r2, [sp, #0]
   21d8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   21d8e:	9b03      	ldr	r3, [sp, #12]
   21d90:	9a00      	ldr	r2, [sp, #0]
   21d92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   21d94:	9b00      	ldr	r3, [sp, #0]
   21d96:	9a01      	ldr	r2, [sp, #4]
   21d98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   21d9a:	9b01      	ldr	r3, [sp, #4]
   21d9c:	681b      	ldr	r3, [r3, #0]
   21d9e:	1c5a      	adds	r2, r3, #1
   21da0:	9b01      	ldr	r3, [sp, #4]
   21da2:	601a      	str	r2, [r3, #0]
}
   21da4:	bf00      	nop
   21da6:	b004      	add	sp, #16
   21da8:	4770      	bx	lr

00021daa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   21daa:	b084      	sub	sp, #16
   21dac:	9001      	str	r0, [sp, #4]
   21dae:	9100      	str	r1, [sp, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   21db0:	9b00      	ldr	r3, [sp, #0]
   21db2:	681b      	ldr	r3, [r3, #0]
   21db4:	9302      	str	r3, [sp, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   21db6:	9b02      	ldr	r3, [sp, #8]
   21db8:	f1b3 3fff 	cmp.w	r3, #4294967295
   21dbc:	d103      	bne.n	21dc6 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   21dbe:	9b01      	ldr	r3, [sp, #4]
   21dc0:	691b      	ldr	r3, [r3, #16]
   21dc2:	9303      	str	r3, [sp, #12]
   21dc4:	e00c      	b.n	21de0 <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   21dc6:	9b01      	ldr	r3, [sp, #4]
   21dc8:	3308      	adds	r3, #8
   21dca:	9303      	str	r3, [sp, #12]
   21dcc:	e002      	b.n	21dd4 <vListInsert+0x2a>
   21dce:	9b03      	ldr	r3, [sp, #12]
   21dd0:	685b      	ldr	r3, [r3, #4]
   21dd2:	9303      	str	r3, [sp, #12]
   21dd4:	9b03      	ldr	r3, [sp, #12]
   21dd6:	685b      	ldr	r3, [r3, #4]
   21dd8:	681b      	ldr	r3, [r3, #0]
   21dda:	9a02      	ldr	r2, [sp, #8]
   21ddc:	429a      	cmp	r2, r3
   21dde:	d2f6      	bcs.n	21dce <vListInsert+0x24>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   21de0:	9b03      	ldr	r3, [sp, #12]
   21de2:	685a      	ldr	r2, [r3, #4]
   21de4:	9b00      	ldr	r3, [sp, #0]
   21de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   21de8:	9b00      	ldr	r3, [sp, #0]
   21dea:	685b      	ldr	r3, [r3, #4]
   21dec:	9a00      	ldr	r2, [sp, #0]
   21dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   21df0:	9b00      	ldr	r3, [sp, #0]
   21df2:	9a03      	ldr	r2, [sp, #12]
   21df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   21df6:	9b03      	ldr	r3, [sp, #12]
   21df8:	9a00      	ldr	r2, [sp, #0]
   21dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
   21dfc:	9b00      	ldr	r3, [sp, #0]
   21dfe:	9a01      	ldr	r2, [sp, #4]
   21e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   21e02:	9b01      	ldr	r3, [sp, #4]
   21e04:	681b      	ldr	r3, [r3, #0]
   21e06:	1c5a      	adds	r2, r3, #1
   21e08:	9b01      	ldr	r3, [sp, #4]
   21e0a:	601a      	str	r2, [r3, #0]
}
   21e0c:	bf00      	nop
   21e0e:	b004      	add	sp, #16
   21e10:	4770      	bx	lr

00021e12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   21e12:	b084      	sub	sp, #16
   21e14:	9001      	str	r0, [sp, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   21e16:	9b01      	ldr	r3, [sp, #4]
   21e18:	691b      	ldr	r3, [r3, #16]
   21e1a:	9303      	str	r3, [sp, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   21e1c:	9b01      	ldr	r3, [sp, #4]
   21e1e:	685b      	ldr	r3, [r3, #4]
   21e20:	9a01      	ldr	r2, [sp, #4]
   21e22:	6892      	ldr	r2, [r2, #8]
   21e24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   21e26:	9b01      	ldr	r3, [sp, #4]
   21e28:	689b      	ldr	r3, [r3, #8]
   21e2a:	9a01      	ldr	r2, [sp, #4]
   21e2c:	6852      	ldr	r2, [r2, #4]
   21e2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   21e30:	9b03      	ldr	r3, [sp, #12]
   21e32:	685b      	ldr	r3, [r3, #4]
   21e34:	9a01      	ldr	r2, [sp, #4]
   21e36:	429a      	cmp	r2, r3
   21e38:	d103      	bne.n	21e42 <uxListRemove+0x30>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   21e3a:	9b01      	ldr	r3, [sp, #4]
   21e3c:	689a      	ldr	r2, [r3, #8]
   21e3e:	9b03      	ldr	r3, [sp, #12]
   21e40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   21e42:	9b01      	ldr	r3, [sp, #4]
   21e44:	2200      	movs	r2, #0
   21e46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   21e48:	9b03      	ldr	r3, [sp, #12]
   21e4a:	681b      	ldr	r3, [r3, #0]
   21e4c:	1e5a      	subs	r2, r3, #1
   21e4e:	9b03      	ldr	r3, [sp, #12]
   21e50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   21e52:	9b03      	ldr	r3, [sp, #12]
   21e54:	681b      	ldr	r3, [r3, #0]
}
   21e56:	4618      	mov	r0, r3
   21e58:	b004      	add	sp, #16
   21e5a:	4770      	bx	lr

00021e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   21e5c:	b500      	push	{lr}
   21e5e:	b085      	sub	sp, #20
   21e60:	9001      	str	r0, [sp, #4]
   21e62:	9100      	str	r1, [sp, #0]
Queue_t * const pxQueue = xQueue;
   21e64:	9b01      	ldr	r3, [sp, #4]
   21e66:	9303      	str	r3, [sp, #12]

	configASSERT( pxQueue );
   21e68:	9b03      	ldr	r3, [sp, #12]
   21e6a:	2b00      	cmp	r3, #0
   21e6c:	d100      	bne.n	21e70 <xQueueGenericReset+0x14>
   21e6e:	e7fe      	b.n	21e6e <xQueueGenericReset+0x12>

	taskENTER_CRITICAL();
   21e70:	f7fa fb86 	bl	1c580 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21e74:	9b03      	ldr	r3, [sp, #12]
   21e76:	681a      	ldr	r2, [r3, #0]
   21e78:	9b03      	ldr	r3, [sp, #12]
   21e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   21e7c:	9903      	ldr	r1, [sp, #12]
   21e7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
   21e80:	fb01 f303 	mul.w	r3, r1, r3
   21e84:	441a      	add	r2, r3
   21e86:	9b03      	ldr	r3, [sp, #12]
   21e88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   21e8a:	9b03      	ldr	r3, [sp, #12]
   21e8c:	2200      	movs	r2, #0
   21e8e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   21e90:	9b03      	ldr	r3, [sp, #12]
   21e92:	681a      	ldr	r2, [r3, #0]
   21e94:	9b03      	ldr	r3, [sp, #12]
   21e96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21e98:	9b03      	ldr	r3, [sp, #12]
   21e9a:	681a      	ldr	r2, [r3, #0]
   21e9c:	9b03      	ldr	r3, [sp, #12]
   21e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   21ea0:	3b01      	subs	r3, #1
   21ea2:	9903      	ldr	r1, [sp, #12]
   21ea4:	6c09      	ldr	r1, [r1, #64]	; 0x40
   21ea6:	fb01 f303 	mul.w	r3, r1, r3
   21eaa:	441a      	add	r2, r3
   21eac:	9b03      	ldr	r3, [sp, #12]
   21eae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   21eb0:	9b03      	ldr	r3, [sp, #12]
   21eb2:	22ff      	movs	r2, #255	; 0xff
   21eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   21eb8:	9b03      	ldr	r3, [sp, #12]
   21eba:	22ff      	movs	r2, #255	; 0xff
   21ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
   21ec0:	9b00      	ldr	r3, [sp, #0]
   21ec2:	2b00      	cmp	r3, #0
   21ec4:	d114      	bne.n	21ef0 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21ec6:	9b03      	ldr	r3, [sp, #12]
   21ec8:	691b      	ldr	r3, [r3, #16]
   21eca:	2b00      	cmp	r3, #0
   21ecc:	d01a      	beq.n	21f04 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21ece:	9b03      	ldr	r3, [sp, #12]
   21ed0:	3310      	adds	r3, #16
   21ed2:	4618      	mov	r0, r3
   21ed4:	f000 fff2 	bl	22ebc <xTaskRemoveFromEventList>
   21ed8:	4603      	mov	r3, r0
   21eda:	2b00      	cmp	r3, #0
   21edc:	d012      	beq.n	21f04 <xQueueGenericReset+0xa8>
				{
					queueYIELD_IF_USING_PREEMPTION();
   21ede:	4b0d      	ldr	r3, [pc, #52]	; (21f14 <xQueueGenericReset+0xb8>)
   21ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21ee4:	601a      	str	r2, [r3, #0]
   21ee6:	f3bf 8f4f 	dsb	sy
   21eea:	f3bf 8f6f 	isb	sy
   21eee:	e009      	b.n	21f04 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   21ef0:	9b03      	ldr	r3, [sp, #12]
   21ef2:	3310      	adds	r3, #16
   21ef4:	4618      	mov	r0, r3
   21ef6:	f7ff ff16 	bl	21d26 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   21efa:	9b03      	ldr	r3, [sp, #12]
   21efc:	3324      	adds	r3, #36	; 0x24
   21efe:	4618      	mov	r0, r3
   21f00:	f7ff ff11 	bl	21d26 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   21f04:	f7fa fb5e 	bl	1c5c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   21f08:	2301      	movs	r3, #1
}
   21f0a:	4618      	mov	r0, r3
   21f0c:	b005      	add	sp, #20
   21f0e:	f85d fb04 	ldr.w	pc, [sp], #4
   21f12:	bf00      	nop
   21f14:	e000ed04 	.word	0xe000ed04

00021f18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   21f18:	b500      	push	{lr}
   21f1a:	b08b      	sub	sp, #44	; 0x2c
   21f1c:	9005      	str	r0, [sp, #20]
   21f1e:	9104      	str	r1, [sp, #16]
   21f20:	4613      	mov	r3, r2
   21f22:	f88d 300f 	strb.w	r3, [sp, #15]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   21f26:	9b05      	ldr	r3, [sp, #20]
   21f28:	2b00      	cmp	r3, #0
   21f2a:	d100      	bne.n	21f2e <xQueueGenericCreate+0x16>
   21f2c:	e7fe      	b.n	21f2c <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
   21f2e:	9b04      	ldr	r3, [sp, #16]
   21f30:	2b00      	cmp	r3, #0
   21f32:	d102      	bne.n	21f3a <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   21f34:	2300      	movs	r3, #0
   21f36:	9309      	str	r3, [sp, #36]	; 0x24
   21f38:	e004      	b.n	21f44 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21f3a:	9b05      	ldr	r3, [sp, #20]
   21f3c:	9a04      	ldr	r2, [sp, #16]
   21f3e:	fb02 f303 	mul.w	r3, r2, r3
   21f42:	9309      	str	r3, [sp, #36]	; 0x24
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   21f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21f46:	3348      	adds	r3, #72	; 0x48
   21f48:	4618      	mov	r0, r3
   21f4a:	f7ff fbe5 	bl	21718 <pvPortMalloc>
   21f4e:	9008      	str	r0, [sp, #32]

		if( pxNewQueue != NULL )
   21f50:	9b08      	ldr	r3, [sp, #32]
   21f52:	2b00      	cmp	r3, #0
   21f54:	d00e      	beq.n	21f74 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
   21f56:	9b08      	ldr	r3, [sp, #32]
   21f58:	9307      	str	r3, [sp, #28]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21f5a:	9b07      	ldr	r3, [sp, #28]
   21f5c:	3348      	adds	r3, #72	; 0x48
   21f5e:	9307      	str	r3, [sp, #28]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   21f60:	f89d 200f 	ldrb.w	r2, [sp, #15]
   21f64:	9b08      	ldr	r3, [sp, #32]
   21f66:	9300      	str	r3, [sp, #0]
   21f68:	4613      	mov	r3, r2
   21f6a:	9a07      	ldr	r2, [sp, #28]
   21f6c:	9904      	ldr	r1, [sp, #16]
   21f6e:	9805      	ldr	r0, [sp, #20]
   21f70:	f000 f805 	bl	21f7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
   21f74:	9b08      	ldr	r3, [sp, #32]
	}
   21f76:	4618      	mov	r0, r3
   21f78:	b00b      	add	sp, #44	; 0x2c
   21f7a:	f85d fb04 	ldr.w	pc, [sp], #4

00021f7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   21f7e:	b500      	push	{lr}
   21f80:	b085      	sub	sp, #20
   21f82:	9003      	str	r0, [sp, #12]
   21f84:	9102      	str	r1, [sp, #8]
   21f86:	9201      	str	r2, [sp, #4]
   21f88:	f88d 3003 	strb.w	r3, [sp, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   21f8c:	9b02      	ldr	r3, [sp, #8]
   21f8e:	2b00      	cmp	r3, #0
   21f90:	d103      	bne.n	21f9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   21f92:	9b06      	ldr	r3, [sp, #24]
   21f94:	9a06      	ldr	r2, [sp, #24]
   21f96:	601a      	str	r2, [r3, #0]
   21f98:	e002      	b.n	21fa0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   21f9a:	9b06      	ldr	r3, [sp, #24]
   21f9c:	9a01      	ldr	r2, [sp, #4]
   21f9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   21fa0:	9b06      	ldr	r3, [sp, #24]
   21fa2:	9a03      	ldr	r2, [sp, #12]
   21fa4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   21fa6:	9b06      	ldr	r3, [sp, #24]
   21fa8:	9a02      	ldr	r2, [sp, #8]
   21faa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   21fac:	2101      	movs	r1, #1
   21fae:	9806      	ldr	r0, [sp, #24]
   21fb0:	f7ff ff54 	bl	21e5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   21fb4:	bf00      	nop
   21fb6:	b005      	add	sp, #20
   21fb8:	f85d fb04 	ldr.w	pc, [sp], #4

00021fbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   21fbc:	b500      	push	{lr}
   21fbe:	b08b      	sub	sp, #44	; 0x2c
   21fc0:	9003      	str	r0, [sp, #12]
   21fc2:	9102      	str	r1, [sp, #8]
   21fc4:	9201      	str	r2, [sp, #4]
   21fc6:	9300      	str	r3, [sp, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   21fc8:	2300      	movs	r3, #0
   21fca:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   21fcc:	9b03      	ldr	r3, [sp, #12]
   21fce:	9308      	str	r3, [sp, #32]

	configASSERT( pxQueue );
   21fd0:	9b08      	ldr	r3, [sp, #32]
   21fd2:	2b00      	cmp	r3, #0
   21fd4:	d100      	bne.n	21fd8 <xQueueGenericSend+0x1c>
   21fd6:	e7fe      	b.n	21fd6 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   21fd8:	9b02      	ldr	r3, [sp, #8]
   21fda:	2b00      	cmp	r3, #0
   21fdc:	d103      	bne.n	21fe6 <xQueueGenericSend+0x2a>
   21fde:	9b08      	ldr	r3, [sp, #32]
   21fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   21fe2:	2b00      	cmp	r3, #0
   21fe4:	d101      	bne.n	21fea <xQueueGenericSend+0x2e>
   21fe6:	2301      	movs	r3, #1
   21fe8:	e000      	b.n	21fec <xQueueGenericSend+0x30>
   21fea:	2300      	movs	r3, #0
   21fec:	2b00      	cmp	r3, #0
   21fee:	d100      	bne.n	21ff2 <xQueueGenericSend+0x36>
   21ff0:	e7fe      	b.n	21ff0 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   21ff2:	9b00      	ldr	r3, [sp, #0]
   21ff4:	2b02      	cmp	r3, #2
   21ff6:	d103      	bne.n	22000 <xQueueGenericSend+0x44>
   21ff8:	9b08      	ldr	r3, [sp, #32]
   21ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   21ffc:	2b01      	cmp	r3, #1
   21ffe:	d101      	bne.n	22004 <xQueueGenericSend+0x48>
   22000:	2301      	movs	r3, #1
   22002:	e000      	b.n	22006 <xQueueGenericSend+0x4a>
   22004:	2300      	movs	r3, #0
   22006:	2b00      	cmp	r3, #0
   22008:	d100      	bne.n	2200c <xQueueGenericSend+0x50>
   2200a:	e7fe      	b.n	2200a <xQueueGenericSend+0x4e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   2200c:	f001 f920 	bl	23250 <xTaskGetSchedulerState>
   22010:	4603      	mov	r3, r0
   22012:	2b00      	cmp	r3, #0
   22014:	d102      	bne.n	2201c <xQueueGenericSend+0x60>
   22016:	9b01      	ldr	r3, [sp, #4]
   22018:	2b00      	cmp	r3, #0
   2201a:	d101      	bne.n	22020 <xQueueGenericSend+0x64>
   2201c:	2301      	movs	r3, #1
   2201e:	e000      	b.n	22022 <xQueueGenericSend+0x66>
   22020:	2300      	movs	r3, #0
   22022:	2b00      	cmp	r3, #0
   22024:	d100      	bne.n	22028 <xQueueGenericSend+0x6c>
   22026:	e7fe      	b.n	22026 <xQueueGenericSend+0x6a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   22028:	f7fa faaa 	bl	1c580 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   2202c:	9b08      	ldr	r3, [sp, #32]
   2202e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   22030:	9b08      	ldr	r3, [sp, #32]
   22032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   22034:	429a      	cmp	r2, r3
   22036:	d302      	bcc.n	2203e <xQueueGenericSend+0x82>
   22038:	9b00      	ldr	r3, [sp, #0]
   2203a:	2b02      	cmp	r3, #2
   2203c:	d129      	bne.n	22092 <xQueueGenericSend+0xd6>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   2203e:	9a00      	ldr	r2, [sp, #0]
   22040:	9902      	ldr	r1, [sp, #8]
   22042:	9808      	ldr	r0, [sp, #32]
   22044:	f000 f9c6 	bl	223d4 <prvCopyDataToQueue>
   22048:	9007      	str	r0, [sp, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2204a:	9b08      	ldr	r3, [sp, #32]
   2204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2204e:	2b00      	cmp	r3, #0
   22050:	d010      	beq.n	22074 <xQueueGenericSend+0xb8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   22052:	9b08      	ldr	r3, [sp, #32]
   22054:	3324      	adds	r3, #36	; 0x24
   22056:	4618      	mov	r0, r3
   22058:	f000 ff30 	bl	22ebc <xTaskRemoveFromEventList>
   2205c:	4603      	mov	r3, r0
   2205e:	2b00      	cmp	r3, #0
   22060:	d013      	beq.n	2208a <xQueueGenericSend+0xce>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   22062:	4b3f      	ldr	r3, [pc, #252]	; (22160 <xQueueGenericSend+0x1a4>)
   22064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22068:	601a      	str	r2, [r3, #0]
   2206a:	f3bf 8f4f 	dsb	sy
   2206e:	f3bf 8f6f 	isb	sy
   22072:	e00a      	b.n	2208a <xQueueGenericSend+0xce>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   22074:	9b07      	ldr	r3, [sp, #28]
   22076:	2b00      	cmp	r3, #0
   22078:	d007      	beq.n	2208a <xQueueGenericSend+0xce>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   2207a:	4b39      	ldr	r3, [pc, #228]	; (22160 <xQueueGenericSend+0x1a4>)
   2207c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22080:	601a      	str	r2, [r3, #0]
   22082:	f3bf 8f4f 	dsb	sy
   22086:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   2208a:	f7fa fa9b 	bl	1c5c4 <vPortExitCritical>
				return pdPASS;
   2208e:	2301      	movs	r3, #1
   22090:	e061      	b.n	22156 <xQueueGenericSend+0x19a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   22092:	9b01      	ldr	r3, [sp, #4]
   22094:	2b00      	cmp	r3, #0
   22096:	d103      	bne.n	220a0 <xQueueGenericSend+0xe4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   22098:	f7fa fa94 	bl	1c5c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   2209c:	2300      	movs	r3, #0
   2209e:	e05a      	b.n	22156 <xQueueGenericSend+0x19a>
				}
				else if( xEntryTimeSet == pdFALSE )
   220a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   220a2:	2b00      	cmp	r3, #0
   220a4:	d105      	bne.n	220b2 <xQueueGenericSend+0xf6>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   220a6:	ab05      	add	r3, sp, #20
   220a8:	4618      	mov	r0, r3
   220aa:	f000 ffaf 	bl	2300c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   220ae:	2301      	movs	r3, #1
   220b0:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   220b2:	f7fa fa87 	bl	1c5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   220b6:	f000 fc99 	bl	229ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   220ba:	f7fa fa61 	bl	1c580 <vPortEnterCritical>
   220be:	9b08      	ldr	r3, [sp, #32]
   220c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   220c4:	b25b      	sxtb	r3, r3
   220c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   220ca:	d103      	bne.n	220d4 <xQueueGenericSend+0x118>
   220cc:	9b08      	ldr	r3, [sp, #32]
   220ce:	2200      	movs	r2, #0
   220d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   220d4:	9b08      	ldr	r3, [sp, #32]
   220d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   220da:	b25b      	sxtb	r3, r3
   220dc:	f1b3 3fff 	cmp.w	r3, #4294967295
   220e0:	d103      	bne.n	220ea <xQueueGenericSend+0x12e>
   220e2:	9b08      	ldr	r3, [sp, #32]
   220e4:	2200      	movs	r2, #0
   220e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   220ea:	f7fa fa6b 	bl	1c5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   220ee:	aa01      	add	r2, sp, #4
   220f0:	ab05      	add	r3, sp, #20
   220f2:	4611      	mov	r1, r2
   220f4:	4618      	mov	r0, r3
   220f6:	f000 ff9b 	bl	23030 <xTaskCheckForTimeOut>
   220fa:	4603      	mov	r3, r0
   220fc:	2b00      	cmp	r3, #0
   220fe:	d124      	bne.n	2214a <xQueueGenericSend+0x18e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   22100:	9808      	ldr	r0, [sp, #32]
   22102:	f000 fa53 	bl	225ac <prvIsQueueFull>
   22106:	4603      	mov	r3, r0
   22108:	2b00      	cmp	r3, #0
   2210a:	d018      	beq.n	2213e <xQueueGenericSend+0x182>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   2210c:	9b08      	ldr	r3, [sp, #32]
   2210e:	3310      	adds	r3, #16
   22110:	9a01      	ldr	r2, [sp, #4]
   22112:	4611      	mov	r1, r2
   22114:	4618      	mov	r0, r3
   22116:	f000 fe6f 	bl	22df8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   2211a:	9808      	ldr	r0, [sp, #32]
   2211c:	f000 f9da 	bl	224d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   22120:	f000 fca0 	bl	22a64 <xTaskResumeAll>
   22124:	4603      	mov	r3, r0
   22126:	2b00      	cmp	r3, #0
   22128:	f47f af7e 	bne.w	22028 <xQueueGenericSend+0x6c>
				{
					portYIELD_WITHIN_API();
   2212c:	4b0c      	ldr	r3, [pc, #48]	; (22160 <xQueueGenericSend+0x1a4>)
   2212e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22132:	601a      	str	r2, [r3, #0]
   22134:	f3bf 8f4f 	dsb	sy
   22138:	f3bf 8f6f 	isb	sy
   2213c:	e774      	b.n	22028 <xQueueGenericSend+0x6c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   2213e:	9808      	ldr	r0, [sp, #32]
   22140:	f000 f9c8 	bl	224d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   22144:	f000 fc8e 	bl	22a64 <xTaskResumeAll>
   22148:	e76e      	b.n	22028 <xQueueGenericSend+0x6c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   2214a:	9808      	ldr	r0, [sp, #32]
   2214c:	f000 f9c2 	bl	224d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   22150:	f000 fc88 	bl	22a64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   22154:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
   22156:	4618      	mov	r0, r3
   22158:	b00b      	add	sp, #44	; 0x2c
   2215a:	f85d fb04 	ldr.w	pc, [sp], #4
   2215e:	bf00      	nop
   22160:	e000ed04 	.word	0xe000ed04

00022164 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   22164:	b500      	push	{lr}
   22166:	b08d      	sub	sp, #52	; 0x34
   22168:	9003      	str	r0, [sp, #12]
   2216a:	9102      	str	r1, [sp, #8]
   2216c:	9201      	str	r2, [sp, #4]
   2216e:	9300      	str	r3, [sp, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
   22170:	9b03      	ldr	r3, [sp, #12]
   22172:	930a      	str	r3, [sp, #40]	; 0x28

	configASSERT( pxQueue );
   22174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22176:	2b00      	cmp	r3, #0
   22178:	d100      	bne.n	2217c <xQueueGenericSendFromISR+0x18>
   2217a:	e7fe      	b.n	2217a <xQueueGenericSendFromISR+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   2217c:	9b02      	ldr	r3, [sp, #8]
   2217e:	2b00      	cmp	r3, #0
   22180:	d103      	bne.n	2218a <xQueueGenericSendFromISR+0x26>
   22182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22186:	2b00      	cmp	r3, #0
   22188:	d101      	bne.n	2218e <xQueueGenericSendFromISR+0x2a>
   2218a:	2301      	movs	r3, #1
   2218c:	e000      	b.n	22190 <xQueueGenericSendFromISR+0x2c>
   2218e:	2300      	movs	r3, #0
   22190:	2b00      	cmp	r3, #0
   22192:	d100      	bne.n	22196 <xQueueGenericSendFromISR+0x32>
   22194:	e7fe      	b.n	22194 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   22196:	9b00      	ldr	r3, [sp, #0]
   22198:	2b02      	cmp	r3, #2
   2219a:	d103      	bne.n	221a4 <xQueueGenericSendFromISR+0x40>
   2219c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   221a0:	2b01      	cmp	r3, #1
   221a2:	d101      	bne.n	221a8 <xQueueGenericSendFromISR+0x44>
   221a4:	2301      	movs	r3, #1
   221a6:	e000      	b.n	221aa <xQueueGenericSendFromISR+0x46>
   221a8:	2300      	movs	r3, #0
   221aa:	2b00      	cmp	r3, #0
   221ac:	d100      	bne.n	221b0 <xQueueGenericSendFromISR+0x4c>
   221ae:	e7fe      	b.n	221ae <xQueueGenericSendFromISR+0x4a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   221b0:	f7fa fa86 	bl	1c6c0 <vPortValidateInterruptPriority>
	__asm volatile
   221b4:	f3ef 8211 	mrs	r2, BASEPRI
   221b8:	f04f 0380 	mov.w	r3, #128	; 0x80
   221bc:	f383 8811 	msr	BASEPRI, r3
   221c0:	f3bf 8f6f 	isb	sy
   221c4:	f3bf 8f4f 	dsb	sy
   221c8:	9207      	str	r2, [sp, #28]
   221ca:	9306      	str	r3, [sp, #24]
	return ulOriginalBASEPRI;
   221cc:	9b07      	ldr	r3, [sp, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   221ce:	9309      	str	r3, [sp, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   221d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   221d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   221d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   221d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   221d8:	429a      	cmp	r2, r3
   221da:	d302      	bcc.n	221e2 <xQueueGenericSendFromISR+0x7e>
   221dc:	9b00      	ldr	r3, [sp, #0]
   221de:	2b02      	cmp	r3, #2
   221e0:	d12c      	bne.n	2223c <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   221e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   221e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   221e8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   221ec:	9a00      	ldr	r2, [sp, #0]
   221ee:	9902      	ldr	r1, [sp, #8]
   221f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   221f2:	f000 f8ef 	bl	223d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   221f6:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
   221fa:	f1b3 3fff 	cmp.w	r3, #4294967295
   221fe:	d112      	bne.n	22226 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   22200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22204:	2b00      	cmp	r3, #0
   22206:	d016      	beq.n	22236 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   22208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2220a:	3324      	adds	r3, #36	; 0x24
   2220c:	4618      	mov	r0, r3
   2220e:	f000 fe55 	bl	22ebc <xTaskRemoveFromEventList>
   22212:	4603      	mov	r3, r0
   22214:	2b00      	cmp	r3, #0
   22216:	d00e      	beq.n	22236 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   22218:	9b01      	ldr	r3, [sp, #4]
   2221a:	2b00      	cmp	r3, #0
   2221c:	d00b      	beq.n	22236 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   2221e:	9b01      	ldr	r3, [sp, #4]
   22220:	2201      	movs	r2, #1
   22222:	601a      	str	r2, [r3, #0]
   22224:	e007      	b.n	22236 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   22226:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2222a:	3301      	adds	r3, #1
   2222c:	b2db      	uxtb	r3, r3
   2222e:	b25a      	sxtb	r2, r3
   22230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
   22236:	2301      	movs	r3, #1
   22238:	930b      	str	r3, [sp, #44]	; 0x2c
		{
   2223a:	e001      	b.n	22240 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   2223c:	2300      	movs	r3, #0
   2223e:	930b      	str	r3, [sp, #44]	; 0x2c
   22240:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22242:	9305      	str	r3, [sp, #20]
	__asm volatile
   22244:	9b05      	ldr	r3, [sp, #20]
   22246:	f383 8811 	msr	BASEPRI, r3
}
   2224a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   2224c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
   2224e:	4618      	mov	r0, r3
   22250:	b00d      	add	sp, #52	; 0x34
   22252:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00022258 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   22258:	b500      	push	{lr}
   2225a:	b08b      	sub	sp, #44	; 0x2c
   2225c:	9003      	str	r0, [sp, #12]
   2225e:	9102      	str	r1, [sp, #8]
   22260:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   22262:	2300      	movs	r3, #0
   22264:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   22266:	9b03      	ldr	r3, [sp, #12]
   22268:	9308      	str	r3, [sp, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   2226a:	9b08      	ldr	r3, [sp, #32]
   2226c:	2b00      	cmp	r3, #0
   2226e:	d100      	bne.n	22272 <xQueueReceive+0x1a>
   22270:	e7fe      	b.n	22270 <xQueueReceive+0x18>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   22272:	9b02      	ldr	r3, [sp, #8]
   22274:	2b00      	cmp	r3, #0
   22276:	d103      	bne.n	22280 <xQueueReceive+0x28>
   22278:	9b08      	ldr	r3, [sp, #32]
   2227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2227c:	2b00      	cmp	r3, #0
   2227e:	d101      	bne.n	22284 <xQueueReceive+0x2c>
   22280:	2301      	movs	r3, #1
   22282:	e000      	b.n	22286 <xQueueReceive+0x2e>
   22284:	2300      	movs	r3, #0
   22286:	2b00      	cmp	r3, #0
   22288:	d100      	bne.n	2228c <xQueueReceive+0x34>
   2228a:	e7fe      	b.n	2228a <xQueueReceive+0x32>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   2228c:	f000 ffe0 	bl	23250 <xTaskGetSchedulerState>
   22290:	4603      	mov	r3, r0
   22292:	2b00      	cmp	r3, #0
   22294:	d102      	bne.n	2229c <xQueueReceive+0x44>
   22296:	9b01      	ldr	r3, [sp, #4]
   22298:	2b00      	cmp	r3, #0
   2229a:	d101      	bne.n	222a0 <xQueueReceive+0x48>
   2229c:	2301      	movs	r3, #1
   2229e:	e000      	b.n	222a2 <xQueueReceive+0x4a>
   222a0:	2300      	movs	r3, #0
   222a2:	2b00      	cmp	r3, #0
   222a4:	d100      	bne.n	222a8 <xQueueReceive+0x50>
   222a6:	e7fe      	b.n	222a6 <xQueueReceive+0x4e>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   222a8:	f7fa f96a 	bl	1c580 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   222ac:	9b08      	ldr	r3, [sp, #32]
   222ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   222b0:	9307      	str	r3, [sp, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   222b2:	9b07      	ldr	r3, [sp, #28]
   222b4:	2b00      	cmp	r3, #0
   222b6:	d01f      	beq.n	222f8 <xQueueReceive+0xa0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   222b8:	9902      	ldr	r1, [sp, #8]
   222ba:	9808      	ldr	r0, [sp, #32]
   222bc:	f000 f8e5 	bl	2248a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   222c0:	9b07      	ldr	r3, [sp, #28]
   222c2:	1e5a      	subs	r2, r3, #1
   222c4:	9b08      	ldr	r3, [sp, #32]
   222c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   222c8:	9b08      	ldr	r3, [sp, #32]
   222ca:	691b      	ldr	r3, [r3, #16]
   222cc:	2b00      	cmp	r3, #0
   222ce:	d00f      	beq.n	222f0 <xQueueReceive+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   222d0:	9b08      	ldr	r3, [sp, #32]
   222d2:	3310      	adds	r3, #16
   222d4:	4618      	mov	r0, r3
   222d6:	f000 fdf1 	bl	22ebc <xTaskRemoveFromEventList>
   222da:	4603      	mov	r3, r0
   222dc:	2b00      	cmp	r3, #0
   222de:	d007      	beq.n	222f0 <xQueueReceive+0x98>
					{
						queueYIELD_IF_USING_PREEMPTION();
   222e0:	4b3b      	ldr	r3, [pc, #236]	; (223d0 <xQueueReceive+0x178>)
   222e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   222e6:	601a      	str	r2, [r3, #0]
   222e8:	f3bf 8f4f 	dsb	sy
   222ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   222f0:	f7fa f968 	bl	1c5c4 <vPortExitCritical>
				return pdPASS;
   222f4:	2301      	movs	r3, #1
   222f6:	e067      	b.n	223c8 <xQueueReceive+0x170>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   222f8:	9b01      	ldr	r3, [sp, #4]
   222fa:	2b00      	cmp	r3, #0
   222fc:	d103      	bne.n	22306 <xQueueReceive+0xae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   222fe:	f7fa f961 	bl	1c5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   22302:	2300      	movs	r3, #0
   22304:	e060      	b.n	223c8 <xQueueReceive+0x170>
				}
				else if( xEntryTimeSet == pdFALSE )
   22306:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22308:	2b00      	cmp	r3, #0
   2230a:	d105      	bne.n	22318 <xQueueReceive+0xc0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   2230c:	ab05      	add	r3, sp, #20
   2230e:	4618      	mov	r0, r3
   22310:	f000 fe7c 	bl	2300c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   22314:	2301      	movs	r3, #1
   22316:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   22318:	f7fa f954 	bl	1c5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   2231c:	f000 fb66 	bl	229ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   22320:	f7fa f92e 	bl	1c580 <vPortEnterCritical>
   22324:	9b08      	ldr	r3, [sp, #32]
   22326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   2232a:	b25b      	sxtb	r3, r3
   2232c:	f1b3 3fff 	cmp.w	r3, #4294967295
   22330:	d103      	bne.n	2233a <xQueueReceive+0xe2>
   22332:	9b08      	ldr	r3, [sp, #32]
   22334:	2200      	movs	r2, #0
   22336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   2233a:	9b08      	ldr	r3, [sp, #32]
   2233c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   22340:	b25b      	sxtb	r3, r3
   22342:	f1b3 3fff 	cmp.w	r3, #4294967295
   22346:	d103      	bne.n	22350 <xQueueReceive+0xf8>
   22348:	9b08      	ldr	r3, [sp, #32]
   2234a:	2200      	movs	r2, #0
   2234c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   22350:	f7fa f938 	bl	1c5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   22354:	aa01      	add	r2, sp, #4
   22356:	ab05      	add	r3, sp, #20
   22358:	4611      	mov	r1, r2
   2235a:	4618      	mov	r0, r3
   2235c:	f000 fe68 	bl	23030 <xTaskCheckForTimeOut>
   22360:	4603      	mov	r3, r0
   22362:	2b00      	cmp	r3, #0
   22364:	d123      	bne.n	223ae <xQueueReceive+0x156>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   22366:	9808      	ldr	r0, [sp, #32]
   22368:	f000 f90b 	bl	22582 <prvIsQueueEmpty>
   2236c:	4603      	mov	r3, r0
   2236e:	2b00      	cmp	r3, #0
   22370:	d017      	beq.n	223a2 <xQueueReceive+0x14a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   22372:	9b08      	ldr	r3, [sp, #32]
   22374:	3324      	adds	r3, #36	; 0x24
   22376:	9a01      	ldr	r2, [sp, #4]
   22378:	4611      	mov	r1, r2
   2237a:	4618      	mov	r0, r3
   2237c:	f000 fd3c 	bl	22df8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   22380:	9808      	ldr	r0, [sp, #32]
   22382:	f000 f8a7 	bl	224d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   22386:	f000 fb6d 	bl	22a64 <xTaskResumeAll>
   2238a:	4603      	mov	r3, r0
   2238c:	2b00      	cmp	r3, #0
   2238e:	d18b      	bne.n	222a8 <xQueueReceive+0x50>
				{
					portYIELD_WITHIN_API();
   22390:	4b0f      	ldr	r3, [pc, #60]	; (223d0 <xQueueReceive+0x178>)
   22392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22396:	601a      	str	r2, [r3, #0]
   22398:	f3bf 8f4f 	dsb	sy
   2239c:	f3bf 8f6f 	isb	sy
   223a0:	e782      	b.n	222a8 <xQueueReceive+0x50>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   223a2:	9808      	ldr	r0, [sp, #32]
   223a4:	f000 f896 	bl	224d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   223a8:	f000 fb5c 	bl	22a64 <xTaskResumeAll>
   223ac:	e77c      	b.n	222a8 <xQueueReceive+0x50>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   223ae:	9808      	ldr	r0, [sp, #32]
   223b0:	f000 f890 	bl	224d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   223b4:	f000 fb56 	bl	22a64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   223b8:	9808      	ldr	r0, [sp, #32]
   223ba:	f000 f8e2 	bl	22582 <prvIsQueueEmpty>
   223be:	4603      	mov	r3, r0
   223c0:	2b00      	cmp	r3, #0
   223c2:	f43f af71 	beq.w	222a8 <xQueueReceive+0x50>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   223c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
   223c8:	4618      	mov	r0, r3
   223ca:	b00b      	add	sp, #44	; 0x2c
   223cc:	f85d fb04 	ldr.w	pc, [sp], #4
   223d0:	e000ed04 	.word	0xe000ed04

000223d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   223d4:	b500      	push	{lr}
   223d6:	b087      	sub	sp, #28
   223d8:	9003      	str	r0, [sp, #12]
   223da:	9102      	str	r1, [sp, #8]
   223dc:	9201      	str	r2, [sp, #4]
BaseType_t xReturn = pdFALSE;
   223de:	2300      	movs	r3, #0
   223e0:	9304      	str	r3, [sp, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   223e2:	9b03      	ldr	r3, [sp, #12]
   223e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   223e6:	9305      	str	r3, [sp, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   223e8:	9b03      	ldr	r3, [sp, #12]
   223ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   223ec:	2b00      	cmp	r3, #0
   223ee:	d043      	beq.n	22478 <prvCopyDataToQueue+0xa4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   223f0:	9b01      	ldr	r3, [sp, #4]
   223f2:	2b00      	cmp	r3, #0
   223f4:	d119      	bne.n	2242a <prvCopyDataToQueue+0x56>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   223f6:	9b03      	ldr	r3, [sp, #12]
   223f8:	6858      	ldr	r0, [r3, #4]
   223fa:	9b03      	ldr	r3, [sp, #12]
   223fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   223fe:	461a      	mov	r2, r3
   22400:	9902      	ldr	r1, [sp, #8]
   22402:	f7e9 fe7d 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   22406:	9b03      	ldr	r3, [sp, #12]
   22408:	685a      	ldr	r2, [r3, #4]
   2240a:	9b03      	ldr	r3, [sp, #12]
   2240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2240e:	441a      	add	r2, r3
   22410:	9b03      	ldr	r3, [sp, #12]
   22412:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   22414:	9b03      	ldr	r3, [sp, #12]
   22416:	685a      	ldr	r2, [r3, #4]
   22418:	9b03      	ldr	r3, [sp, #12]
   2241a:	689b      	ldr	r3, [r3, #8]
   2241c:	429a      	cmp	r2, r3
   2241e:	d32b      	bcc.n	22478 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   22420:	9b03      	ldr	r3, [sp, #12]
   22422:	681a      	ldr	r2, [r3, #0]
   22424:	9b03      	ldr	r3, [sp, #12]
   22426:	605a      	str	r2, [r3, #4]
   22428:	e026      	b.n	22478 <prvCopyDataToQueue+0xa4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   2242a:	9b03      	ldr	r3, [sp, #12]
   2242c:	68d8      	ldr	r0, [r3, #12]
   2242e:	9b03      	ldr	r3, [sp, #12]
   22430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22432:	461a      	mov	r2, r3
   22434:	9902      	ldr	r1, [sp, #8]
   22436:	f7e9 fe63 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   2243a:	9b03      	ldr	r3, [sp, #12]
   2243c:	68da      	ldr	r2, [r3, #12]
   2243e:	9b03      	ldr	r3, [sp, #12]
   22440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22442:	425b      	negs	r3, r3
   22444:	441a      	add	r2, r3
   22446:	9b03      	ldr	r3, [sp, #12]
   22448:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   2244a:	9b03      	ldr	r3, [sp, #12]
   2244c:	68da      	ldr	r2, [r3, #12]
   2244e:	9b03      	ldr	r3, [sp, #12]
   22450:	681b      	ldr	r3, [r3, #0]
   22452:	429a      	cmp	r2, r3
   22454:	d207      	bcs.n	22466 <prvCopyDataToQueue+0x92>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   22456:	9b03      	ldr	r3, [sp, #12]
   22458:	689a      	ldr	r2, [r3, #8]
   2245a:	9b03      	ldr	r3, [sp, #12]
   2245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2245e:	425b      	negs	r3, r3
   22460:	441a      	add	r2, r3
   22462:	9b03      	ldr	r3, [sp, #12]
   22464:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   22466:	9b01      	ldr	r3, [sp, #4]
   22468:	2b02      	cmp	r3, #2
   2246a:	d105      	bne.n	22478 <prvCopyDataToQueue+0xa4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   2246c:	9b05      	ldr	r3, [sp, #20]
   2246e:	2b00      	cmp	r3, #0
   22470:	d002      	beq.n	22478 <prvCopyDataToQueue+0xa4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   22472:	9b05      	ldr	r3, [sp, #20]
   22474:	3b01      	subs	r3, #1
   22476:	9305      	str	r3, [sp, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   22478:	9b05      	ldr	r3, [sp, #20]
   2247a:	1c5a      	adds	r2, r3, #1
   2247c:	9b03      	ldr	r3, [sp, #12]
   2247e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   22480:	9b04      	ldr	r3, [sp, #16]
}
   22482:	4618      	mov	r0, r3
   22484:	b007      	add	sp, #28
   22486:	f85d fb04 	ldr.w	pc, [sp], #4

0002248a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   2248a:	b500      	push	{lr}
   2248c:	b083      	sub	sp, #12
   2248e:	9001      	str	r0, [sp, #4]
   22490:	9100      	str	r1, [sp, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   22492:	9b01      	ldr	r3, [sp, #4]
   22494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   22496:	2b00      	cmp	r3, #0
   22498:	d018      	beq.n	224cc <prvCopyDataFromQueue+0x42>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   2249a:	9b01      	ldr	r3, [sp, #4]
   2249c:	68da      	ldr	r2, [r3, #12]
   2249e:	9b01      	ldr	r3, [sp, #4]
   224a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   224a2:	441a      	add	r2, r3
   224a4:	9b01      	ldr	r3, [sp, #4]
   224a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   224a8:	9b01      	ldr	r3, [sp, #4]
   224aa:	68da      	ldr	r2, [r3, #12]
   224ac:	9b01      	ldr	r3, [sp, #4]
   224ae:	689b      	ldr	r3, [r3, #8]
   224b0:	429a      	cmp	r2, r3
   224b2:	d303      	bcc.n	224bc <prvCopyDataFromQueue+0x32>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   224b4:	9b01      	ldr	r3, [sp, #4]
   224b6:	681a      	ldr	r2, [r3, #0]
   224b8:	9b01      	ldr	r3, [sp, #4]
   224ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   224bc:	9b01      	ldr	r3, [sp, #4]
   224be:	68d9      	ldr	r1, [r3, #12]
   224c0:	9b01      	ldr	r3, [sp, #4]
   224c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   224c4:	461a      	mov	r2, r3
   224c6:	9800      	ldr	r0, [sp, #0]
   224c8:	f7e9 fe1a 	bl	c100 <memcpy>
	}
}
   224cc:	bf00      	nop
   224ce:	b003      	add	sp, #12
   224d0:	f85d fb04 	ldr.w	pc, [sp], #4

000224d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   224d4:	b500      	push	{lr}
   224d6:	b085      	sub	sp, #20
   224d8:	9001      	str	r0, [sp, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   224da:	f7fa f851 	bl	1c580 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   224de:	9b01      	ldr	r3, [sp, #4]
   224e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   224e4:	f88d 300f 	strb.w	r3, [sp, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   224e8:	e013      	b.n	22512 <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   224ea:	9b01      	ldr	r3, [sp, #4]
   224ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   224ee:	2b00      	cmp	r3, #0
   224f0:	d014      	beq.n	2251c <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   224f2:	9b01      	ldr	r3, [sp, #4]
   224f4:	3324      	adds	r3, #36	; 0x24
   224f6:	4618      	mov	r0, r3
   224f8:	f000 fce0 	bl	22ebc <xTaskRemoveFromEventList>
   224fc:	4603      	mov	r3, r0
   224fe:	2b00      	cmp	r3, #0
   22500:	d001      	beq.n	22506 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   22502:	f000 fde3 	bl	230cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   22506:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2250a:	3b01      	subs	r3, #1
   2250c:	b2db      	uxtb	r3, r3
   2250e:	f88d 300f 	strb.w	r3, [sp, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   22512:	f99d 300f 	ldrsb.w	r3, [sp, #15]
   22516:	2b00      	cmp	r3, #0
   22518:	dce7      	bgt.n	224ea <prvUnlockQueue+0x16>
   2251a:	e000      	b.n	2251e <prvUnlockQueue+0x4a>
					break;
   2251c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
   2251e:	9b01      	ldr	r3, [sp, #4]
   22520:	22ff      	movs	r2, #255	; 0xff
   22522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
   22526:	f7fa f84d 	bl	1c5c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   2252a:	f7fa f829 	bl	1c580 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   2252e:	9b01      	ldr	r3, [sp, #4]
   22530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   22534:	f88d 300e 	strb.w	r3, [sp, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   22538:	e013      	b.n	22562 <prvUnlockQueue+0x8e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   2253a:	9b01      	ldr	r3, [sp, #4]
   2253c:	691b      	ldr	r3, [r3, #16]
   2253e:	2b00      	cmp	r3, #0
   22540:	d014      	beq.n	2256c <prvUnlockQueue+0x98>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   22542:	9b01      	ldr	r3, [sp, #4]
   22544:	3310      	adds	r3, #16
   22546:	4618      	mov	r0, r3
   22548:	f000 fcb8 	bl	22ebc <xTaskRemoveFromEventList>
   2254c:	4603      	mov	r3, r0
   2254e:	2b00      	cmp	r3, #0
   22550:	d001      	beq.n	22556 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
   22552:	f000 fdbb 	bl	230cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   22556:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2255a:	3b01      	subs	r3, #1
   2255c:	b2db      	uxtb	r3, r3
   2255e:	f88d 300e 	strb.w	r3, [sp, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   22562:	f99d 300e 	ldrsb.w	r3, [sp, #14]
   22566:	2b00      	cmp	r3, #0
   22568:	dce7      	bgt.n	2253a <prvUnlockQueue+0x66>
   2256a:	e000      	b.n	2256e <prvUnlockQueue+0x9a>
			}
			else
			{
				break;
   2256c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   2256e:	9b01      	ldr	r3, [sp, #4]
   22570:	22ff      	movs	r2, #255	; 0xff
   22572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   22576:	f7fa f825 	bl	1c5c4 <vPortExitCritical>
}
   2257a:	bf00      	nop
   2257c:	b005      	add	sp, #20
   2257e:	f85d fb04 	ldr.w	pc, [sp], #4

00022582 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   22582:	b500      	push	{lr}
   22584:	b085      	sub	sp, #20
   22586:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   22588:	f7f9 fffa 	bl	1c580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   2258c:	9b01      	ldr	r3, [sp, #4]
   2258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22590:	2b00      	cmp	r3, #0
   22592:	d102      	bne.n	2259a <prvIsQueueEmpty+0x18>
		{
			xReturn = pdTRUE;
   22594:	2301      	movs	r3, #1
   22596:	9303      	str	r3, [sp, #12]
   22598:	e001      	b.n	2259e <prvIsQueueEmpty+0x1c>
		}
		else
		{
			xReturn = pdFALSE;
   2259a:	2300      	movs	r3, #0
   2259c:	9303      	str	r3, [sp, #12]
		}
	}
	taskEXIT_CRITICAL();
   2259e:	f7fa f811 	bl	1c5c4 <vPortExitCritical>

	return xReturn;
   225a2:	9b03      	ldr	r3, [sp, #12]
}
   225a4:	4618      	mov	r0, r3
   225a6:	b005      	add	sp, #20
   225a8:	f85d fb04 	ldr.w	pc, [sp], #4

000225ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   225ac:	b500      	push	{lr}
   225ae:	b085      	sub	sp, #20
   225b0:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   225b2:	f7f9 ffe5 	bl	1c580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   225b6:	9b01      	ldr	r3, [sp, #4]
   225b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   225ba:	9b01      	ldr	r3, [sp, #4]
   225bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   225be:	429a      	cmp	r2, r3
   225c0:	d102      	bne.n	225c8 <prvIsQueueFull+0x1c>
		{
			xReturn = pdTRUE;
   225c2:	2301      	movs	r3, #1
   225c4:	9303      	str	r3, [sp, #12]
   225c6:	e001      	b.n	225cc <prvIsQueueFull+0x20>
		}
		else
		{
			xReturn = pdFALSE;
   225c8:	2300      	movs	r3, #0
   225ca:	9303      	str	r3, [sp, #12]
		}
	}
	taskEXIT_CRITICAL();
   225cc:	f7f9 fffa 	bl	1c5c4 <vPortExitCritical>

	return xReturn;
   225d0:	9b03      	ldr	r3, [sp, #12]
}
   225d2:	4618      	mov	r0, r3
   225d4:	b005      	add	sp, #20
   225d6:	f85d fb04 	ldr.w	pc, [sp], #4

000225da <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   225da:	b500      	push	{lr}
   225dc:	b087      	sub	sp, #28
   225de:	9003      	str	r0, [sp, #12]
   225e0:	9102      	str	r1, [sp, #8]
   225e2:	9201      	str	r2, [sp, #4]
	Queue_t * const pxQueue = xQueue;
   225e4:	9b03      	ldr	r3, [sp, #12]
   225e6:	9305      	str	r3, [sp, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   225e8:	f7f9 ffca 	bl	1c580 <vPortEnterCritical>
   225ec:	9b05      	ldr	r3, [sp, #20]
   225ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   225f2:	b25b      	sxtb	r3, r3
   225f4:	f1b3 3fff 	cmp.w	r3, #4294967295
   225f8:	d103      	bne.n	22602 <vQueueWaitForMessageRestricted+0x28>
   225fa:	9b05      	ldr	r3, [sp, #20]
   225fc:	2200      	movs	r2, #0
   225fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   22602:	9b05      	ldr	r3, [sp, #20]
   22604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   22608:	b25b      	sxtb	r3, r3
   2260a:	f1b3 3fff 	cmp.w	r3, #4294967295
   2260e:	d103      	bne.n	22618 <vQueueWaitForMessageRestricted+0x3e>
   22610:	9b05      	ldr	r3, [sp, #20]
   22612:	2200      	movs	r2, #0
   22614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   22618:	f7f9 ffd4 	bl	1c5c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   2261c:	9b05      	ldr	r3, [sp, #20]
   2261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22620:	2b00      	cmp	r3, #0
   22622:	d106      	bne.n	22632 <vQueueWaitForMessageRestricted+0x58>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   22624:	9b05      	ldr	r3, [sp, #20]
   22626:	3324      	adds	r3, #36	; 0x24
   22628:	9a01      	ldr	r2, [sp, #4]
   2262a:	9902      	ldr	r1, [sp, #8]
   2262c:	4618      	mov	r0, r3
   2262e:	f000 fc25 	bl	22e7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   22632:	9805      	ldr	r0, [sp, #20]
   22634:	f7ff ff4e 	bl	224d4 <prvUnlockQueue>
	}
   22638:	bf00      	nop
   2263a:	b007      	add	sp, #28
   2263c:	f85d fb04 	ldr.w	pc, [sp], #4

00022640 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   22640:	b500      	push	{lr}
   22642:	b08d      	sub	sp, #52	; 0x34
   22644:	9007      	str	r0, [sp, #28]
   22646:	9106      	str	r1, [sp, #24]
   22648:	9304      	str	r3, [sp, #16]
   2264a:	4613      	mov	r3, r2
   2264c:	f8ad 3016 	strh.w	r3, [sp, #22]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   22650:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   22654:	009b      	lsls	r3, r3, #2
   22656:	4618      	mov	r0, r3
   22658:	f7ff f85e 	bl	21718 <pvPortMalloc>
   2265c:	9009      	str	r0, [sp, #36]	; 0x24

			if( pxStack != NULL )
   2265e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22660:	2b00      	cmp	r3, #0
   22662:	d00e      	beq.n	22682 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   22664:	204c      	movs	r0, #76	; 0x4c
   22666:	f7ff f857 	bl	21718 <pvPortMalloc>
   2266a:	900b      	str	r0, [sp, #44]	; 0x2c

				if( pxNewTCB != NULL )
   2266c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2266e:	2b00      	cmp	r3, #0
   22670:	d003      	beq.n	2267a <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   22672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22674:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22676:	631a      	str	r2, [r3, #48]	; 0x30
   22678:	e005      	b.n	22686 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   2267a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2267c:	f7ff f8de 	bl	2183c <vPortFree>
   22680:	e001      	b.n	22686 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
   22682:	2300      	movs	r3, #0
   22684:	930b      	str	r3, [sp, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   22686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22688:	2b00      	cmp	r3, #0
   2268a:	d014      	beq.n	226b6 <xTaskCreate+0x76>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   2268c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   22690:	2300      	movs	r3, #0
   22692:	9303      	str	r3, [sp, #12]
   22694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22696:	9302      	str	r3, [sp, #8]
   22698:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2269a:	9301      	str	r3, [sp, #4]
   2269c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2269e:	9300      	str	r3, [sp, #0]
   226a0:	9b04      	ldr	r3, [sp, #16]
   226a2:	9906      	ldr	r1, [sp, #24]
   226a4:	9807      	ldr	r0, [sp, #28]
   226a6:	f000 f80e 	bl	226c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   226aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   226ac:	f000 f886 	bl	227bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   226b0:	2301      	movs	r3, #1
   226b2:	930a      	str	r3, [sp, #40]	; 0x28
   226b4:	e002      	b.n	226bc <xTaskCreate+0x7c>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   226b6:	f04f 33ff 	mov.w	r3, #4294967295
   226ba:	930a      	str	r3, [sp, #40]	; 0x28
		}

		return xReturn;
   226bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	}
   226be:	4618      	mov	r0, r3
   226c0:	b00d      	add	sp, #52	; 0x34
   226c2:	f85d fb04 	ldr.w	pc, [sp], #4

000226c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   226c6:	b500      	push	{lr}
   226c8:	b087      	sub	sp, #28
   226ca:	9003      	str	r0, [sp, #12]
   226cc:	9102      	str	r1, [sp, #8]
   226ce:	9201      	str	r2, [sp, #4]
   226d0:	9300      	str	r3, [sp, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
   226d2:	9b02      	ldr	r3, [sp, #8]
   226d4:	2b00      	cmp	r3, #0
   226d6:	d100      	bne.n	226da <prvInitialiseNewTask+0x14>
   226d8:	e7fe      	b.n	226d8 <prvInitialiseNewTask+0x12>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   226da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   226dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
   226de:	9b01      	ldr	r3, [sp, #4]
   226e0:	009b      	lsls	r3, r3, #2
   226e2:	461a      	mov	r2, r3
   226e4:	21a5      	movs	r1, #165	; 0xa5
   226e6:	f002 ffe9 	bl	256bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   226ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   226ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   226ee:	9b01      	ldr	r3, [sp, #4]
   226f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   226f4:	3b01      	subs	r3, #1
   226f6:	009b      	lsls	r3, r3, #2
   226f8:	4413      	add	r3, r2
   226fa:	9304      	str	r3, [sp, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   226fc:	9b04      	ldr	r3, [sp, #16]
   226fe:	f023 0307 	bic.w	r3, r3, #7
   22702:	9304      	str	r3, [sp, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   22704:	9b04      	ldr	r3, [sp, #16]
   22706:	f003 0307 	and.w	r3, r3, #7
   2270a:	2b00      	cmp	r3, #0
   2270c:	d000      	beq.n	22710 <prvInitialiseNewTask+0x4a>
   2270e:	e7fe      	b.n	2270e <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   22710:	2300      	movs	r3, #0
   22712:	9305      	str	r3, [sp, #20]
   22714:	e012      	b.n	2273c <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   22716:	9a02      	ldr	r2, [sp, #8]
   22718:	9b05      	ldr	r3, [sp, #20]
   2271a:	4413      	add	r3, r2
   2271c:	7819      	ldrb	r1, [r3, #0]
   2271e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22720:	9b05      	ldr	r3, [sp, #20]
   22722:	4413      	add	r3, r2
   22724:	3334      	adds	r3, #52	; 0x34
   22726:	460a      	mov	r2, r1
   22728:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
   2272a:	9a02      	ldr	r2, [sp, #8]
   2272c:	9b05      	ldr	r3, [sp, #20]
   2272e:	4413      	add	r3, r2
   22730:	781b      	ldrb	r3, [r3, #0]
   22732:	2b00      	cmp	r3, #0
   22734:	d006      	beq.n	22744 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   22736:	9b05      	ldr	r3, [sp, #20]
   22738:	3301      	adds	r3, #1
   2273a:	9305      	str	r3, [sp, #20]
   2273c:	9b05      	ldr	r3, [sp, #20]
   2273e:	2b0f      	cmp	r3, #15
   22740:	d9e9      	bls.n	22716 <prvInitialiseNewTask+0x50>
   22742:	e000      	b.n	22746 <prvInitialiseNewTask+0x80>
		{
			break;
   22744:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   22746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22748:	2200      	movs	r2, #0
   2274a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   2274e:	9b08      	ldr	r3, [sp, #32]
   22750:	2b03      	cmp	r3, #3
   22752:	d901      	bls.n	22758 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   22754:	2303      	movs	r3, #3
   22756:	9308      	str	r3, [sp, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   22758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2275a:	9a08      	ldr	r2, [sp, #32]
   2275c:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   2275e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22760:	3304      	adds	r3, #4
   22762:	4618      	mov	r0, r3
   22764:	f7ff fafa 	bl	21d5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   22768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2276a:	3318      	adds	r3, #24
   2276c:	4618      	mov	r0, r3
   2276e:	f7ff faf5 	bl	21d5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   22772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22776:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   22778:	9b08      	ldr	r3, [sp, #32]
   2277a:	f1c3 0204 	rsb	r2, r3, #4
   2277e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22780:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   22782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22786:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   22788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2278a:	2200      	movs	r2, #0
   2278c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   2278e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22790:	2200      	movs	r2, #0
   22792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   22796:	9a00      	ldr	r2, [sp, #0]
   22798:	9903      	ldr	r1, [sp, #12]
   2279a:	9804      	ldr	r0, [sp, #16]
   2279c:	f7f9 fdec 	bl	1c378 <pxPortInitialiseStack>
   227a0:	4602      	mov	r2, r0
   227a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   227a4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
   227a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   227a8:	2b00      	cmp	r3, #0
   227aa:	d002      	beq.n	227b2 <prvInitialiseNewTask+0xec>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   227ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   227ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   227b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   227b2:	bf00      	nop
   227b4:	b007      	add	sp, #28
   227b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000227bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   227bc:	b500      	push	{lr}
   227be:	b083      	sub	sp, #12
   227c0:	9001      	str	r0, [sp, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   227c2:	f7f9 fedd 	bl	1c580 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   227c6:	4b2b      	ldr	r3, [pc, #172]	; (22874 <prvAddNewTaskToReadyList+0xb8>)
   227c8:	681b      	ldr	r3, [r3, #0]
   227ca:	3301      	adds	r3, #1
   227cc:	4a29      	ldr	r2, [pc, #164]	; (22874 <prvAddNewTaskToReadyList+0xb8>)
   227ce:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   227d0:	4b29      	ldr	r3, [pc, #164]	; (22878 <prvAddNewTaskToReadyList+0xbc>)
   227d2:	681b      	ldr	r3, [r3, #0]
   227d4:	2b00      	cmp	r3, #0
   227d6:	d109      	bne.n	227ec <prvAddNewTaskToReadyList+0x30>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   227d8:	4a27      	ldr	r2, [pc, #156]	; (22878 <prvAddNewTaskToReadyList+0xbc>)
   227da:	9b01      	ldr	r3, [sp, #4]
   227dc:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   227de:	4b25      	ldr	r3, [pc, #148]	; (22874 <prvAddNewTaskToReadyList+0xb8>)
   227e0:	681b      	ldr	r3, [r3, #0]
   227e2:	2b01      	cmp	r3, #1
   227e4:	d110      	bne.n	22808 <prvAddNewTaskToReadyList+0x4c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   227e6:	f000 fcdb 	bl	231a0 <prvInitialiseTaskLists>
   227ea:	e00d      	b.n	22808 <prvAddNewTaskToReadyList+0x4c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   227ec:	4b23      	ldr	r3, [pc, #140]	; (2287c <prvAddNewTaskToReadyList+0xc0>)
   227ee:	681b      	ldr	r3, [r3, #0]
   227f0:	2b00      	cmp	r3, #0
   227f2:	d109      	bne.n	22808 <prvAddNewTaskToReadyList+0x4c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   227f4:	4b20      	ldr	r3, [pc, #128]	; (22878 <prvAddNewTaskToReadyList+0xbc>)
   227f6:	681b      	ldr	r3, [r3, #0]
   227f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   227fa:	9b01      	ldr	r3, [sp, #4]
   227fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   227fe:	429a      	cmp	r2, r3
   22800:	d802      	bhi.n	22808 <prvAddNewTaskToReadyList+0x4c>
				{
					pxCurrentTCB = pxNewTCB;
   22802:	4a1d      	ldr	r2, [pc, #116]	; (22878 <prvAddNewTaskToReadyList+0xbc>)
   22804:	9b01      	ldr	r3, [sp, #4]
   22806:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   22808:	4b1d      	ldr	r3, [pc, #116]	; (22880 <prvAddNewTaskToReadyList+0xc4>)
   2280a:	681b      	ldr	r3, [r3, #0]
   2280c:	3301      	adds	r3, #1
   2280e:	4a1c      	ldr	r2, [pc, #112]	; (22880 <prvAddNewTaskToReadyList+0xc4>)
   22810:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   22812:	9b01      	ldr	r3, [sp, #4]
   22814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22816:	4b1b      	ldr	r3, [pc, #108]	; (22884 <prvAddNewTaskToReadyList+0xc8>)
   22818:	681b      	ldr	r3, [r3, #0]
   2281a:	429a      	cmp	r2, r3
   2281c:	d903      	bls.n	22826 <prvAddNewTaskToReadyList+0x6a>
   2281e:	9b01      	ldr	r3, [sp, #4]
   22820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22822:	4a18      	ldr	r2, [pc, #96]	; (22884 <prvAddNewTaskToReadyList+0xc8>)
   22824:	6013      	str	r3, [r2, #0]
   22826:	9b01      	ldr	r3, [sp, #4]
   22828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2282a:	4613      	mov	r3, r2
   2282c:	009b      	lsls	r3, r3, #2
   2282e:	4413      	add	r3, r2
   22830:	009b      	lsls	r3, r3, #2
   22832:	4a15      	ldr	r2, [pc, #84]	; (22888 <prvAddNewTaskToReadyList+0xcc>)
   22834:	441a      	add	r2, r3
   22836:	9b01      	ldr	r3, [sp, #4]
   22838:	3304      	adds	r3, #4
   2283a:	4619      	mov	r1, r3
   2283c:	4610      	mov	r0, r2
   2283e:	f7ff fa95 	bl	21d6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   22842:	f7f9 febf 	bl	1c5c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   22846:	4b0d      	ldr	r3, [pc, #52]	; (2287c <prvAddNewTaskToReadyList+0xc0>)
   22848:	681b      	ldr	r3, [r3, #0]
   2284a:	2b00      	cmp	r3, #0
   2284c:	d00e      	beq.n	2286c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   2284e:	4b0a      	ldr	r3, [pc, #40]	; (22878 <prvAddNewTaskToReadyList+0xbc>)
   22850:	681b      	ldr	r3, [r3, #0]
   22852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22854:	9b01      	ldr	r3, [sp, #4]
   22856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22858:	429a      	cmp	r2, r3
   2285a:	d207      	bcs.n	2286c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
   2285c:	4b0b      	ldr	r3, [pc, #44]	; (2288c <prvAddNewTaskToReadyList+0xd0>)
   2285e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22862:	601a      	str	r2, [r3, #0]
   22864:	f3bf 8f4f 	dsb	sy
   22868:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   2286c:	bf00      	nop
   2286e:	b003      	add	sp, #12
   22870:	f85d fb04 	ldr.w	pc, [sp], #4
   22874:	100078a4 	.word	0x100078a4
   22878:	100077f8 	.word	0x100077f8
   2287c:	100078b0 	.word	0x100078b0
   22880:	100078c0 	.word	0x100078c0
   22884:	100078ac 	.word	0x100078ac
   22888:	100077fc 	.word	0x100077fc
   2288c:	e000ed04 	.word	0xe000ed04

00022890 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   22890:	b500      	push	{lr}
   22892:	b085      	sub	sp, #20
   22894:	9001      	str	r0, [sp, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   22896:	f7f9 fe73 	bl	1c580 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   2289a:	9b01      	ldr	r3, [sp, #4]
   2289c:	2b00      	cmp	r3, #0
   2289e:	d102      	bne.n	228a6 <vTaskSuspend+0x16>
   228a0:	4b2a      	ldr	r3, [pc, #168]	; (2294c <vTaskSuspend+0xbc>)
   228a2:	681b      	ldr	r3, [r3, #0]
   228a4:	e000      	b.n	228a8 <vTaskSuspend+0x18>
   228a6:	9b01      	ldr	r3, [sp, #4]
   228a8:	9303      	str	r3, [sp, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   228aa:	9b03      	ldr	r3, [sp, #12]
   228ac:	3304      	adds	r3, #4
   228ae:	4618      	mov	r0, r3
   228b0:	f7ff faaf 	bl	21e12 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   228b4:	9b03      	ldr	r3, [sp, #12]
   228b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   228b8:	2b00      	cmp	r3, #0
   228ba:	d004      	beq.n	228c6 <vTaskSuspend+0x36>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   228bc:	9b03      	ldr	r3, [sp, #12]
   228be:	3318      	adds	r3, #24
   228c0:	4618      	mov	r0, r3
   228c2:	f7ff faa6 	bl	21e12 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   228c6:	9b03      	ldr	r3, [sp, #12]
   228c8:	3304      	adds	r3, #4
   228ca:	4619      	mov	r1, r3
   228cc:	4820      	ldr	r0, [pc, #128]	; (22950 <vTaskSuspend+0xc0>)
   228ce:	f7ff fa4d 	bl	21d6c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   228d2:	9b03      	ldr	r3, [sp, #12]
   228d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   228d8:	b2db      	uxtb	r3, r3
   228da:	2b01      	cmp	r3, #1
   228dc:	d103      	bne.n	228e6 <vTaskSuspend+0x56>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   228de:	9b03      	ldr	r3, [sp, #12]
   228e0:	2200      	movs	r2, #0
   228e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   228e6:	f7f9 fe6d 	bl	1c5c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   228ea:	4b1a      	ldr	r3, [pc, #104]	; (22954 <vTaskSuspend+0xc4>)
   228ec:	681b      	ldr	r3, [r3, #0]
   228ee:	2b00      	cmp	r3, #0
   228f0:	d005      	beq.n	228fe <vTaskSuspend+0x6e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   228f2:	f7f9 fe45 	bl	1c580 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   228f6:	f000 fc8f 	bl	23218 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   228fa:	f7f9 fe63 	bl	1c5c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   228fe:	4b13      	ldr	r3, [pc, #76]	; (2294c <vTaskSuspend+0xbc>)
   22900:	681b      	ldr	r3, [r3, #0]
   22902:	9a03      	ldr	r2, [sp, #12]
   22904:	429a      	cmp	r2, r3
   22906:	d11d      	bne.n	22944 <vTaskSuspend+0xb4>
		{
			if( xSchedulerRunning != pdFALSE )
   22908:	4b12      	ldr	r3, [pc, #72]	; (22954 <vTaskSuspend+0xc4>)
   2290a:	681b      	ldr	r3, [r3, #0]
   2290c:	2b00      	cmp	r3, #0
   2290e:	d00d      	beq.n	2292c <vTaskSuspend+0x9c>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   22910:	4b11      	ldr	r3, [pc, #68]	; (22958 <vTaskSuspend+0xc8>)
   22912:	681b      	ldr	r3, [r3, #0]
   22914:	2b00      	cmp	r3, #0
   22916:	d000      	beq.n	2291a <vTaskSuspend+0x8a>
   22918:	e7fe      	b.n	22918 <vTaskSuspend+0x88>
				portYIELD_WITHIN_API();
   2291a:	4b10      	ldr	r3, [pc, #64]	; (2295c <vTaskSuspend+0xcc>)
   2291c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22920:	601a      	str	r2, [r3, #0]
   22922:	f3bf 8f4f 	dsb	sy
   22926:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   2292a:	e00b      	b.n	22944 <vTaskSuspend+0xb4>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   2292c:	4b08      	ldr	r3, [pc, #32]	; (22950 <vTaskSuspend+0xc0>)
   2292e:	681a      	ldr	r2, [r3, #0]
   22930:	4b0b      	ldr	r3, [pc, #44]	; (22960 <vTaskSuspend+0xd0>)
   22932:	681b      	ldr	r3, [r3, #0]
   22934:	429a      	cmp	r2, r3
   22936:	d103      	bne.n	22940 <vTaskSuspend+0xb0>
					pxCurrentTCB = NULL;
   22938:	4b04      	ldr	r3, [pc, #16]	; (2294c <vTaskSuspend+0xbc>)
   2293a:	2200      	movs	r2, #0
   2293c:	601a      	str	r2, [r3, #0]
	}
   2293e:	e001      	b.n	22944 <vTaskSuspend+0xb4>
					vTaskSwitchContext();
   22940:	f000 f9e2 	bl	22d08 <vTaskSwitchContext>
	}
   22944:	bf00      	nop
   22946:	b005      	add	sp, #20
   22948:	f85d fb04 	ldr.w	pc, [sp], #4
   2294c:	100077f8 	.word	0x100077f8
   22950:	10007890 	.word	0x10007890
   22954:	100078b0 	.word	0x100078b0
   22958:	100078cc 	.word	0x100078cc
   2295c:	e000ed04 	.word	0xe000ed04
   22960:	100078a4 	.word	0x100078a4

00022964 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   22964:	b500      	push	{lr}
   22966:	b085      	sub	sp, #20
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   22968:	4b1a      	ldr	r3, [pc, #104]	; (229d4 <vTaskStartScheduler+0x70>)
   2296a:	9301      	str	r3, [sp, #4]
   2296c:	2300      	movs	r3, #0
   2296e:	9300      	str	r3, [sp, #0]
   22970:	2300      	movs	r3, #0
   22972:	f44f 7280 	mov.w	r2, #256	; 0x100
   22976:	4918      	ldr	r1, [pc, #96]	; (229d8 <vTaskStartScheduler+0x74>)
   22978:	4818      	ldr	r0, [pc, #96]	; (229dc <vTaskStartScheduler+0x78>)
   2297a:	f7ff fe61 	bl	22640 <xTaskCreate>
   2297e:	9003      	str	r0, [sp, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   22980:	9b03      	ldr	r3, [sp, #12]
   22982:	2b01      	cmp	r3, #1
   22984:	d102      	bne.n	2298c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
   22986:	f000 fce5 	bl	23354 <xTimerCreateTimerTask>
   2298a:	9003      	str	r0, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   2298c:	9b03      	ldr	r3, [sp, #12]
   2298e:	2b01      	cmp	r3, #1
   22990:	d116      	bne.n	229c0 <vTaskStartScheduler+0x5c>
	__asm volatile
   22992:	f04f 0380 	mov.w	r3, #128	; 0x80
   22996:	f383 8811 	msr	BASEPRI, r3
   2299a:	f3bf 8f6f 	isb	sy
   2299e:	f3bf 8f4f 	dsb	sy
   229a2:	9302      	str	r3, [sp, #8]
}
   229a4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   229a6:	4b0e      	ldr	r3, [pc, #56]	; (229e0 <vTaskStartScheduler+0x7c>)
   229a8:	f04f 32ff 	mov.w	r2, #4294967295
   229ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   229ae:	4b0d      	ldr	r3, [pc, #52]	; (229e4 <vTaskStartScheduler+0x80>)
   229b0:	2201      	movs	r2, #1
   229b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   229b4:	4b0c      	ldr	r3, [pc, #48]	; (229e8 <vTaskStartScheduler+0x84>)
   229b6:	2200      	movs	r2, #0
   229b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   229ba:	f7f9 fd59 	bl	1c470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   229be:	e004      	b.n	229ca <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   229c0:	9b03      	ldr	r3, [sp, #12]
   229c2:	f1b3 3fff 	cmp.w	r3, #4294967295
   229c6:	d100      	bne.n	229ca <vTaskStartScheduler+0x66>
   229c8:	e7fe      	b.n	229c8 <vTaskStartScheduler+0x64>
}
   229ca:	bf00      	nop
   229cc:	b005      	add	sp, #20
   229ce:	f85d fb04 	ldr.w	pc, [sp], #4
   229d2:	bf00      	nop
   229d4:	100078c8 	.word	0x100078c8
   229d8:	00027d3c 	.word	0x00027d3c
   229dc:	000230dd 	.word	0x000230dd
   229e0:	100078c4 	.word	0x100078c4
   229e4:	100078b0 	.word	0x100078b0
   229e8:	100078a8 	.word	0x100078a8

000229ec <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   229ec:	4b03      	ldr	r3, [pc, #12]	; (229fc <vTaskSuspendAll+0x10>)
   229ee:	681b      	ldr	r3, [r3, #0]
   229f0:	3301      	adds	r3, #1
   229f2:	4a02      	ldr	r2, [pc, #8]	; (229fc <vTaskSuspendAll+0x10>)
   229f4:	6013      	str	r3, [r2, #0]
}
   229f6:	bf00      	nop
   229f8:	4770      	bx	lr
   229fa:	bf00      	nop
   229fc:	100078cc 	.word	0x100078cc

00022a00 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
   22a00:	b082      	sub	sp, #8
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   22a02:	2300      	movs	r3, #0
   22a04:	9300      	str	r3, [sp, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   22a06:	4b12      	ldr	r3, [pc, #72]	; (22a50 <prvGetExpectedIdleTime+0x50>)
   22a08:	681b      	ldr	r3, [r3, #0]
   22a0a:	2b00      	cmp	r3, #0
   22a0c:	d001      	beq.n	22a12 <prvGetExpectedIdleTime+0x12>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   22a0e:	2301      	movs	r3, #1
   22a10:	9300      	str	r3, [sp, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   22a12:	4b10      	ldr	r3, [pc, #64]	; (22a54 <prvGetExpectedIdleTime+0x54>)
   22a14:	681b      	ldr	r3, [r3, #0]
   22a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22a18:	2b00      	cmp	r3, #0
   22a1a:	d002      	beq.n	22a22 <prvGetExpectedIdleTime+0x22>
		{
			xReturn = 0;
   22a1c:	2300      	movs	r3, #0
   22a1e:	9301      	str	r3, [sp, #4]
   22a20:	e012      	b.n	22a48 <prvGetExpectedIdleTime+0x48>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   22a22:	4b0d      	ldr	r3, [pc, #52]	; (22a58 <prvGetExpectedIdleTime+0x58>)
   22a24:	681b      	ldr	r3, [r3, #0]
   22a26:	2b01      	cmp	r3, #1
   22a28:	d902      	bls.n	22a30 <prvGetExpectedIdleTime+0x30>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
   22a2a:	2300      	movs	r3, #0
   22a2c:	9301      	str	r3, [sp, #4]
   22a2e:	e00b      	b.n	22a48 <prvGetExpectedIdleTime+0x48>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
   22a30:	9b00      	ldr	r3, [sp, #0]
   22a32:	2b00      	cmp	r3, #0
   22a34:	d002      	beq.n	22a3c <prvGetExpectedIdleTime+0x3c>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
   22a36:	2300      	movs	r3, #0
   22a38:	9301      	str	r3, [sp, #4]
   22a3a:	e005      	b.n	22a48 <prvGetExpectedIdleTime+0x48>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
   22a3c:	4b07      	ldr	r3, [pc, #28]	; (22a5c <prvGetExpectedIdleTime+0x5c>)
   22a3e:	681a      	ldr	r2, [r3, #0]
   22a40:	4b07      	ldr	r3, [pc, #28]	; (22a60 <prvGetExpectedIdleTime+0x60>)
   22a42:	681b      	ldr	r3, [r3, #0]
   22a44:	1ad3      	subs	r3, r2, r3
   22a46:	9301      	str	r3, [sp, #4]
		}

		return xReturn;
   22a48:	9b01      	ldr	r3, [sp, #4]
	}
   22a4a:	4618      	mov	r0, r3
   22a4c:	b002      	add	sp, #8
   22a4e:	4770      	bx	lr
   22a50:	100078ac 	.word	0x100078ac
   22a54:	100077f8 	.word	0x100077f8
   22a58:	100077fc 	.word	0x100077fc
   22a5c:	100078c4 	.word	0x100078c4
   22a60:	100078a8 	.word	0x100078a8

00022a64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   22a64:	b500      	push	{lr}
   22a66:	b085      	sub	sp, #20
TCB_t *pxTCB = NULL;
   22a68:	2300      	movs	r3, #0
   22a6a:	9303      	str	r3, [sp, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   22a6c:	2300      	movs	r3, #0
   22a6e:	9302      	str	r3, [sp, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   22a70:	4b3c      	ldr	r3, [pc, #240]	; (22b64 <xTaskResumeAll+0x100>)
   22a72:	681b      	ldr	r3, [r3, #0]
   22a74:	2b00      	cmp	r3, #0
   22a76:	d100      	bne.n	22a7a <xTaskResumeAll+0x16>
   22a78:	e7fe      	b.n	22a78 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   22a7a:	f7f9 fd81 	bl	1c580 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   22a7e:	4b39      	ldr	r3, [pc, #228]	; (22b64 <xTaskResumeAll+0x100>)
   22a80:	681b      	ldr	r3, [r3, #0]
   22a82:	3b01      	subs	r3, #1
   22a84:	4a37      	ldr	r2, [pc, #220]	; (22b64 <xTaskResumeAll+0x100>)
   22a86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22a88:	4b36      	ldr	r3, [pc, #216]	; (22b64 <xTaskResumeAll+0x100>)
   22a8a:	681b      	ldr	r3, [r3, #0]
   22a8c:	2b00      	cmp	r3, #0
   22a8e:	d162      	bne.n	22b56 <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   22a90:	4b35      	ldr	r3, [pc, #212]	; (22b68 <xTaskResumeAll+0x104>)
   22a92:	681b      	ldr	r3, [r3, #0]
   22a94:	2b00      	cmp	r3, #0
   22a96:	d05e      	beq.n	22b56 <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   22a98:	e02f      	b.n	22afa <xTaskResumeAll+0x96>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22a9a:	4b34      	ldr	r3, [pc, #208]	; (22b6c <xTaskResumeAll+0x108>)
   22a9c:	68db      	ldr	r3, [r3, #12]
   22a9e:	68db      	ldr	r3, [r3, #12]
   22aa0:	9303      	str	r3, [sp, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   22aa2:	9b03      	ldr	r3, [sp, #12]
   22aa4:	3318      	adds	r3, #24
   22aa6:	4618      	mov	r0, r3
   22aa8:	f7ff f9b3 	bl	21e12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   22aac:	9b03      	ldr	r3, [sp, #12]
   22aae:	3304      	adds	r3, #4
   22ab0:	4618      	mov	r0, r3
   22ab2:	f7ff f9ae 	bl	21e12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   22ab6:	9b03      	ldr	r3, [sp, #12]
   22ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22aba:	4b2d      	ldr	r3, [pc, #180]	; (22b70 <xTaskResumeAll+0x10c>)
   22abc:	681b      	ldr	r3, [r3, #0]
   22abe:	429a      	cmp	r2, r3
   22ac0:	d903      	bls.n	22aca <xTaskResumeAll+0x66>
   22ac2:	9b03      	ldr	r3, [sp, #12]
   22ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22ac6:	4a2a      	ldr	r2, [pc, #168]	; (22b70 <xTaskResumeAll+0x10c>)
   22ac8:	6013      	str	r3, [r2, #0]
   22aca:	9b03      	ldr	r3, [sp, #12]
   22acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22ace:	4613      	mov	r3, r2
   22ad0:	009b      	lsls	r3, r3, #2
   22ad2:	4413      	add	r3, r2
   22ad4:	009b      	lsls	r3, r3, #2
   22ad6:	4a27      	ldr	r2, [pc, #156]	; (22b74 <xTaskResumeAll+0x110>)
   22ad8:	441a      	add	r2, r3
   22ada:	9b03      	ldr	r3, [sp, #12]
   22adc:	3304      	adds	r3, #4
   22ade:	4619      	mov	r1, r3
   22ae0:	4610      	mov	r0, r2
   22ae2:	f7ff f943 	bl	21d6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   22ae6:	9b03      	ldr	r3, [sp, #12]
   22ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22aea:	4b23      	ldr	r3, [pc, #140]	; (22b78 <xTaskResumeAll+0x114>)
   22aec:	681b      	ldr	r3, [r3, #0]
   22aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22af0:	429a      	cmp	r2, r3
   22af2:	d302      	bcc.n	22afa <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   22af4:	4b21      	ldr	r3, [pc, #132]	; (22b7c <xTaskResumeAll+0x118>)
   22af6:	2201      	movs	r2, #1
   22af8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   22afa:	4b1c      	ldr	r3, [pc, #112]	; (22b6c <xTaskResumeAll+0x108>)
   22afc:	681b      	ldr	r3, [r3, #0]
   22afe:	2b00      	cmp	r3, #0
   22b00:	d1cb      	bne.n	22a9a <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   22b02:	9b03      	ldr	r3, [sp, #12]
   22b04:	2b00      	cmp	r3, #0
   22b06:	d001      	beq.n	22b0c <xTaskResumeAll+0xa8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   22b08:	f000 fb86 	bl	23218 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   22b0c:	4b1c      	ldr	r3, [pc, #112]	; (22b80 <xTaskResumeAll+0x11c>)
   22b0e:	681b      	ldr	r3, [r3, #0]
   22b10:	9301      	str	r3, [sp, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   22b12:	9b01      	ldr	r3, [sp, #4]
   22b14:	2b00      	cmp	r3, #0
   22b16:	d010      	beq.n	22b3a <xTaskResumeAll+0xd6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   22b18:	f000 f858 	bl	22bcc <xTaskIncrementTick>
   22b1c:	4603      	mov	r3, r0
   22b1e:	2b00      	cmp	r3, #0
   22b20:	d002      	beq.n	22b28 <xTaskResumeAll+0xc4>
							{
								xYieldPending = pdTRUE;
   22b22:	4b16      	ldr	r3, [pc, #88]	; (22b7c <xTaskResumeAll+0x118>)
   22b24:	2201      	movs	r2, #1
   22b26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   22b28:	9b01      	ldr	r3, [sp, #4]
   22b2a:	3b01      	subs	r3, #1
   22b2c:	9301      	str	r3, [sp, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   22b2e:	9b01      	ldr	r3, [sp, #4]
   22b30:	2b00      	cmp	r3, #0
   22b32:	d1f1      	bne.n	22b18 <xTaskResumeAll+0xb4>

						uxPendedTicks = 0;
   22b34:	4b12      	ldr	r3, [pc, #72]	; (22b80 <xTaskResumeAll+0x11c>)
   22b36:	2200      	movs	r2, #0
   22b38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   22b3a:	4b10      	ldr	r3, [pc, #64]	; (22b7c <xTaskResumeAll+0x118>)
   22b3c:	681b      	ldr	r3, [r3, #0]
   22b3e:	2b00      	cmp	r3, #0
   22b40:	d009      	beq.n	22b56 <xTaskResumeAll+0xf2>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   22b42:	2301      	movs	r3, #1
   22b44:	9302      	str	r3, [sp, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   22b46:	4b0f      	ldr	r3, [pc, #60]	; (22b84 <xTaskResumeAll+0x120>)
   22b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22b4c:	601a      	str	r2, [r3, #0]
   22b4e:	f3bf 8f4f 	dsb	sy
   22b52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   22b56:	f7f9 fd35 	bl	1c5c4 <vPortExitCritical>

	return xAlreadyYielded;
   22b5a:	9b02      	ldr	r3, [sp, #8]
}
   22b5c:	4618      	mov	r0, r3
   22b5e:	b005      	add	sp, #20
   22b60:	f85d fb04 	ldr.w	pc, [sp], #4
   22b64:	100078cc 	.word	0x100078cc
   22b68:	100078a4 	.word	0x100078a4
   22b6c:	1000787c 	.word	0x1000787c
   22b70:	100078ac 	.word	0x100078ac
   22b74:	100077fc 	.word	0x100077fc
   22b78:	100077f8 	.word	0x100077f8
   22b7c:	100078b8 	.word	0x100078b8
   22b80:	100078b4 	.word	0x100078b4
   22b84:	e000ed04 	.word	0xe000ed04

00022b88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   22b88:	b082      	sub	sp, #8
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   22b8a:	4b03      	ldr	r3, [pc, #12]	; (22b98 <xTaskGetTickCount+0x10>)
   22b8c:	681b      	ldr	r3, [r3, #0]
   22b8e:	9301      	str	r3, [sp, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   22b90:	9b01      	ldr	r3, [sp, #4]
}
   22b92:	4618      	mov	r0, r3
   22b94:	b002      	add	sp, #8
   22b96:	4770      	bx	lr
   22b98:	100078a8 	.word	0x100078a8

00022b9c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
   22b9c:	b082      	sub	sp, #8
   22b9e:	9001      	str	r0, [sp, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   22ba0:	4b08      	ldr	r3, [pc, #32]	; (22bc4 <vTaskStepTick+0x28>)
   22ba2:	681a      	ldr	r2, [r3, #0]
   22ba4:	9b01      	ldr	r3, [sp, #4]
   22ba6:	441a      	add	r2, r3
   22ba8:	4b07      	ldr	r3, [pc, #28]	; (22bc8 <vTaskStepTick+0x2c>)
   22baa:	681b      	ldr	r3, [r3, #0]
   22bac:	429a      	cmp	r2, r3
   22bae:	d900      	bls.n	22bb2 <vTaskStepTick+0x16>
   22bb0:	e7fe      	b.n	22bb0 <vTaskStepTick+0x14>
		xTickCount += xTicksToJump;
   22bb2:	4b04      	ldr	r3, [pc, #16]	; (22bc4 <vTaskStepTick+0x28>)
   22bb4:	681a      	ldr	r2, [r3, #0]
   22bb6:	9b01      	ldr	r3, [sp, #4]
   22bb8:	4413      	add	r3, r2
   22bba:	4a02      	ldr	r2, [pc, #8]	; (22bc4 <vTaskStepTick+0x28>)
   22bbc:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
   22bbe:	bf00      	nop
   22bc0:	b002      	add	sp, #8
   22bc2:	4770      	bx	lr
   22bc4:	100078a8 	.word	0x100078a8
   22bc8:	100078c4 	.word	0x100078c4

00022bcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   22bcc:	b500      	push	{lr}
   22bce:	b087      	sub	sp, #28
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   22bd0:	2300      	movs	r3, #0
   22bd2:	9305      	str	r3, [sp, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22bd4:	4b41      	ldr	r3, [pc, #260]	; (22cdc <xTaskIncrementTick+0x110>)
   22bd6:	681b      	ldr	r3, [r3, #0]
   22bd8:	2b00      	cmp	r3, #0
   22bda:	d16f      	bne.n	22cbc <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   22bdc:	4b40      	ldr	r3, [pc, #256]	; (22ce0 <xTaskIncrementTick+0x114>)
   22bde:	681b      	ldr	r3, [r3, #0]
   22be0:	3301      	adds	r3, #1
   22be2:	9304      	str	r3, [sp, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   22be4:	4a3e      	ldr	r2, [pc, #248]	; (22ce0 <xTaskIncrementTick+0x114>)
   22be6:	9b04      	ldr	r3, [sp, #16]
   22be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   22bea:	9b04      	ldr	r3, [sp, #16]
   22bec:	2b00      	cmp	r3, #0
   22bee:	d116      	bne.n	22c1e <xTaskIncrementTick+0x52>
		{
			taskSWITCH_DELAYED_LISTS();
   22bf0:	4b3c      	ldr	r3, [pc, #240]	; (22ce4 <xTaskIncrementTick+0x118>)
   22bf2:	681b      	ldr	r3, [r3, #0]
   22bf4:	681b      	ldr	r3, [r3, #0]
   22bf6:	2b00      	cmp	r3, #0
   22bf8:	d000      	beq.n	22bfc <xTaskIncrementTick+0x30>
   22bfa:	e7fe      	b.n	22bfa <xTaskIncrementTick+0x2e>
   22bfc:	4b39      	ldr	r3, [pc, #228]	; (22ce4 <xTaskIncrementTick+0x118>)
   22bfe:	681b      	ldr	r3, [r3, #0]
   22c00:	9303      	str	r3, [sp, #12]
   22c02:	4b39      	ldr	r3, [pc, #228]	; (22ce8 <xTaskIncrementTick+0x11c>)
   22c04:	681b      	ldr	r3, [r3, #0]
   22c06:	4a37      	ldr	r2, [pc, #220]	; (22ce4 <xTaskIncrementTick+0x118>)
   22c08:	6013      	str	r3, [r2, #0]
   22c0a:	4a37      	ldr	r2, [pc, #220]	; (22ce8 <xTaskIncrementTick+0x11c>)
   22c0c:	9b03      	ldr	r3, [sp, #12]
   22c0e:	6013      	str	r3, [r2, #0]
   22c10:	4b36      	ldr	r3, [pc, #216]	; (22cec <xTaskIncrementTick+0x120>)
   22c12:	681b      	ldr	r3, [r3, #0]
   22c14:	3301      	adds	r3, #1
   22c16:	4a35      	ldr	r2, [pc, #212]	; (22cec <xTaskIncrementTick+0x120>)
   22c18:	6013      	str	r3, [r2, #0]
   22c1a:	f000 fafd 	bl	23218 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   22c1e:	4b34      	ldr	r3, [pc, #208]	; (22cf0 <xTaskIncrementTick+0x124>)
   22c20:	681b      	ldr	r3, [r3, #0]
   22c22:	9a04      	ldr	r2, [sp, #16]
   22c24:	429a      	cmp	r2, r3
   22c26:	d34e      	bcc.n	22cc6 <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22c28:	4b2e      	ldr	r3, [pc, #184]	; (22ce4 <xTaskIncrementTick+0x118>)
   22c2a:	681b      	ldr	r3, [r3, #0]
   22c2c:	681b      	ldr	r3, [r3, #0]
   22c2e:	2b00      	cmp	r3, #0
   22c30:	d104      	bne.n	22c3c <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   22c32:	4b2f      	ldr	r3, [pc, #188]	; (22cf0 <xTaskIncrementTick+0x124>)
   22c34:	f04f 32ff 	mov.w	r2, #4294967295
   22c38:	601a      	str	r2, [r3, #0]
					break;
   22c3a:	e044      	b.n	22cc6 <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22c3c:	4b29      	ldr	r3, [pc, #164]	; (22ce4 <xTaskIncrementTick+0x118>)
   22c3e:	681b      	ldr	r3, [r3, #0]
   22c40:	68db      	ldr	r3, [r3, #12]
   22c42:	68db      	ldr	r3, [r3, #12]
   22c44:	9302      	str	r3, [sp, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   22c46:	9b02      	ldr	r3, [sp, #8]
   22c48:	685b      	ldr	r3, [r3, #4]
   22c4a:	9301      	str	r3, [sp, #4]

					if( xConstTickCount < xItemValue )
   22c4c:	9a04      	ldr	r2, [sp, #16]
   22c4e:	9b01      	ldr	r3, [sp, #4]
   22c50:	429a      	cmp	r2, r3
   22c52:	d203      	bcs.n	22c5c <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   22c54:	4a26      	ldr	r2, [pc, #152]	; (22cf0 <xTaskIncrementTick+0x124>)
   22c56:	9b01      	ldr	r3, [sp, #4]
   22c58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   22c5a:	e034      	b.n	22cc6 <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   22c5c:	9b02      	ldr	r3, [sp, #8]
   22c5e:	3304      	adds	r3, #4
   22c60:	4618      	mov	r0, r3
   22c62:	f7ff f8d6 	bl	21e12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   22c66:	9b02      	ldr	r3, [sp, #8]
   22c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22c6a:	2b00      	cmp	r3, #0
   22c6c:	d004      	beq.n	22c78 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   22c6e:	9b02      	ldr	r3, [sp, #8]
   22c70:	3318      	adds	r3, #24
   22c72:	4618      	mov	r0, r3
   22c74:	f7ff f8cd 	bl	21e12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   22c78:	9b02      	ldr	r3, [sp, #8]
   22c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22c7c:	4b1d      	ldr	r3, [pc, #116]	; (22cf4 <xTaskIncrementTick+0x128>)
   22c7e:	681b      	ldr	r3, [r3, #0]
   22c80:	429a      	cmp	r2, r3
   22c82:	d903      	bls.n	22c8c <xTaskIncrementTick+0xc0>
   22c84:	9b02      	ldr	r3, [sp, #8]
   22c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22c88:	4a1a      	ldr	r2, [pc, #104]	; (22cf4 <xTaskIncrementTick+0x128>)
   22c8a:	6013      	str	r3, [r2, #0]
   22c8c:	9b02      	ldr	r3, [sp, #8]
   22c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22c90:	4613      	mov	r3, r2
   22c92:	009b      	lsls	r3, r3, #2
   22c94:	4413      	add	r3, r2
   22c96:	009b      	lsls	r3, r3, #2
   22c98:	4a17      	ldr	r2, [pc, #92]	; (22cf8 <xTaskIncrementTick+0x12c>)
   22c9a:	441a      	add	r2, r3
   22c9c:	9b02      	ldr	r3, [sp, #8]
   22c9e:	3304      	adds	r3, #4
   22ca0:	4619      	mov	r1, r3
   22ca2:	4610      	mov	r0, r2
   22ca4:	f7ff f862 	bl	21d6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   22ca8:	9b02      	ldr	r3, [sp, #8]
   22caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22cac:	4b13      	ldr	r3, [pc, #76]	; (22cfc <xTaskIncrementTick+0x130>)
   22cae:	681b      	ldr	r3, [r3, #0]
   22cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22cb2:	429a      	cmp	r2, r3
   22cb4:	d3b8      	bcc.n	22c28 <xTaskIncrementTick+0x5c>
						{
							xSwitchRequired = pdTRUE;
   22cb6:	2301      	movs	r3, #1
   22cb8:	9305      	str	r3, [sp, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22cba:	e7b5      	b.n	22c28 <xTaskIncrementTick+0x5c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   22cbc:	4b10      	ldr	r3, [pc, #64]	; (22d00 <xTaskIncrementTick+0x134>)
   22cbe:	681b      	ldr	r3, [r3, #0]
   22cc0:	3301      	adds	r3, #1
   22cc2:	4a0f      	ldr	r2, [pc, #60]	; (22d00 <xTaskIncrementTick+0x134>)
   22cc4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   22cc6:	4b0f      	ldr	r3, [pc, #60]	; (22d04 <xTaskIncrementTick+0x138>)
   22cc8:	681b      	ldr	r3, [r3, #0]
   22cca:	2b00      	cmp	r3, #0
   22ccc:	d001      	beq.n	22cd2 <xTaskIncrementTick+0x106>
		{
			xSwitchRequired = pdTRUE;
   22cce:	2301      	movs	r3, #1
   22cd0:	9305      	str	r3, [sp, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   22cd2:	9b05      	ldr	r3, [sp, #20]
}
   22cd4:	4618      	mov	r0, r3
   22cd6:	b007      	add	sp, #28
   22cd8:	f85d fb04 	ldr.w	pc, [sp], #4
   22cdc:	100078cc 	.word	0x100078cc
   22ce0:	100078a8 	.word	0x100078a8
   22ce4:	10007874 	.word	0x10007874
   22ce8:	10007878 	.word	0x10007878
   22cec:	100078bc 	.word	0x100078bc
   22cf0:	100078c4 	.word	0x100078c4
   22cf4:	100078ac 	.word	0x100078ac
   22cf8:	100077fc 	.word	0x100077fc
   22cfc:	100077f8 	.word	0x100077f8
   22d00:	100078b4 	.word	0x100078b4
   22d04:	100078b8 	.word	0x100078b8

00022d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   22d08:	b500      	push	{lr}
   22d0a:	b085      	sub	sp, #20
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   22d0c:	4b35      	ldr	r3, [pc, #212]	; (22de4 <vTaskSwitchContext+0xdc>)
   22d0e:	681b      	ldr	r3, [r3, #0]
   22d10:	2b00      	cmp	r3, #0
   22d12:	d003      	beq.n	22d1c <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   22d14:	4b34      	ldr	r3, [pc, #208]	; (22de8 <vTaskSwitchContext+0xe0>)
   22d16:	2201      	movs	r2, #1
   22d18:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   22d1a:	e05e      	b.n	22dda <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
   22d1c:	4b32      	ldr	r3, [pc, #200]	; (22de8 <vTaskSwitchContext+0xe0>)
   22d1e:	2200      	movs	r2, #0
   22d20:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   22d22:	4b32      	ldr	r3, [pc, #200]	; (22dec <vTaskSwitchContext+0xe4>)
   22d24:	681b      	ldr	r3, [r3, #0]
   22d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   22d28:	9302      	str	r3, [sp, #8]
   22d2a:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
   22d2e:	9301      	str	r3, [sp, #4]
   22d30:	9b02      	ldr	r3, [sp, #8]
   22d32:	681b      	ldr	r3, [r3, #0]
   22d34:	9a01      	ldr	r2, [sp, #4]
   22d36:	429a      	cmp	r2, r3
   22d38:	d111      	bne.n	22d5e <vTaskSwitchContext+0x56>
   22d3a:	9b02      	ldr	r3, [sp, #8]
   22d3c:	3304      	adds	r3, #4
   22d3e:	681b      	ldr	r3, [r3, #0]
   22d40:	9a01      	ldr	r2, [sp, #4]
   22d42:	429a      	cmp	r2, r3
   22d44:	d10b      	bne.n	22d5e <vTaskSwitchContext+0x56>
   22d46:	9b02      	ldr	r3, [sp, #8]
   22d48:	3308      	adds	r3, #8
   22d4a:	681b      	ldr	r3, [r3, #0]
   22d4c:	9a01      	ldr	r2, [sp, #4]
   22d4e:	429a      	cmp	r2, r3
   22d50:	d105      	bne.n	22d5e <vTaskSwitchContext+0x56>
   22d52:	9b02      	ldr	r3, [sp, #8]
   22d54:	330c      	adds	r3, #12
   22d56:	681b      	ldr	r3, [r3, #0]
   22d58:	9a01      	ldr	r2, [sp, #4]
   22d5a:	429a      	cmp	r2, r3
   22d5c:	d008      	beq.n	22d70 <vTaskSwitchContext+0x68>
   22d5e:	4b23      	ldr	r3, [pc, #140]	; (22dec <vTaskSwitchContext+0xe4>)
   22d60:	681a      	ldr	r2, [r3, #0]
   22d62:	4b22      	ldr	r3, [pc, #136]	; (22dec <vTaskSwitchContext+0xe4>)
   22d64:	681b      	ldr	r3, [r3, #0]
   22d66:	3334      	adds	r3, #52	; 0x34
   22d68:	4619      	mov	r1, r3
   22d6a:	4610      	mov	r0, r2
   22d6c:	f7f4 f8f8 	bl	16f60 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22d70:	4b1f      	ldr	r3, [pc, #124]	; (22df0 <vTaskSwitchContext+0xe8>)
   22d72:	681b      	ldr	r3, [r3, #0]
   22d74:	9303      	str	r3, [sp, #12]
   22d76:	e006      	b.n	22d86 <vTaskSwitchContext+0x7e>
   22d78:	9b03      	ldr	r3, [sp, #12]
   22d7a:	2b00      	cmp	r3, #0
   22d7c:	d100      	bne.n	22d80 <vTaskSwitchContext+0x78>
   22d7e:	e7fe      	b.n	22d7e <vTaskSwitchContext+0x76>
   22d80:	9b03      	ldr	r3, [sp, #12]
   22d82:	3b01      	subs	r3, #1
   22d84:	9303      	str	r3, [sp, #12]
   22d86:	491b      	ldr	r1, [pc, #108]	; (22df4 <vTaskSwitchContext+0xec>)
   22d88:	9a03      	ldr	r2, [sp, #12]
   22d8a:	4613      	mov	r3, r2
   22d8c:	009b      	lsls	r3, r3, #2
   22d8e:	4413      	add	r3, r2
   22d90:	009b      	lsls	r3, r3, #2
   22d92:	440b      	add	r3, r1
   22d94:	681b      	ldr	r3, [r3, #0]
   22d96:	2b00      	cmp	r3, #0
   22d98:	d0ee      	beq.n	22d78 <vTaskSwitchContext+0x70>
   22d9a:	9a03      	ldr	r2, [sp, #12]
   22d9c:	4613      	mov	r3, r2
   22d9e:	009b      	lsls	r3, r3, #2
   22da0:	4413      	add	r3, r2
   22da2:	009b      	lsls	r3, r3, #2
   22da4:	4a13      	ldr	r2, [pc, #76]	; (22df4 <vTaskSwitchContext+0xec>)
   22da6:	4413      	add	r3, r2
   22da8:	9300      	str	r3, [sp, #0]
   22daa:	9b00      	ldr	r3, [sp, #0]
   22dac:	685b      	ldr	r3, [r3, #4]
   22dae:	685a      	ldr	r2, [r3, #4]
   22db0:	9b00      	ldr	r3, [sp, #0]
   22db2:	605a      	str	r2, [r3, #4]
   22db4:	9b00      	ldr	r3, [sp, #0]
   22db6:	685a      	ldr	r2, [r3, #4]
   22db8:	9b00      	ldr	r3, [sp, #0]
   22dba:	3308      	adds	r3, #8
   22dbc:	429a      	cmp	r2, r3
   22dbe:	d104      	bne.n	22dca <vTaskSwitchContext+0xc2>
   22dc0:	9b00      	ldr	r3, [sp, #0]
   22dc2:	685b      	ldr	r3, [r3, #4]
   22dc4:	685a      	ldr	r2, [r3, #4]
   22dc6:	9b00      	ldr	r3, [sp, #0]
   22dc8:	605a      	str	r2, [r3, #4]
   22dca:	9b00      	ldr	r3, [sp, #0]
   22dcc:	685b      	ldr	r3, [r3, #4]
   22dce:	68db      	ldr	r3, [r3, #12]
   22dd0:	4a06      	ldr	r2, [pc, #24]	; (22dec <vTaskSwitchContext+0xe4>)
   22dd2:	6013      	str	r3, [r2, #0]
   22dd4:	4a06      	ldr	r2, [pc, #24]	; (22df0 <vTaskSwitchContext+0xe8>)
   22dd6:	9b03      	ldr	r3, [sp, #12]
   22dd8:	6013      	str	r3, [r2, #0]
}
   22dda:	bf00      	nop
   22ddc:	b005      	add	sp, #20
   22dde:	f85d fb04 	ldr.w	pc, [sp], #4
   22de2:	bf00      	nop
   22de4:	100078cc 	.word	0x100078cc
   22de8:	100078b8 	.word	0x100078b8
   22dec:	100077f8 	.word	0x100077f8
   22df0:	100078ac 	.word	0x100078ac
   22df4:	100077fc 	.word	0x100077fc

00022df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   22df8:	b500      	push	{lr}
   22dfa:	b083      	sub	sp, #12
   22dfc:	9001      	str	r0, [sp, #4]
   22dfe:	9100      	str	r1, [sp, #0]
	configASSERT( pxEventList );
   22e00:	9b01      	ldr	r3, [sp, #4]
   22e02:	2b00      	cmp	r3, #0
   22e04:	d100      	bne.n	22e08 <vTaskPlaceOnEventList+0x10>
   22e06:	e7fe      	b.n	22e06 <vTaskPlaceOnEventList+0xe>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   22e08:	4b07      	ldr	r3, [pc, #28]	; (22e28 <vTaskPlaceOnEventList+0x30>)
   22e0a:	681b      	ldr	r3, [r3, #0]
   22e0c:	3318      	adds	r3, #24
   22e0e:	4619      	mov	r1, r3
   22e10:	9801      	ldr	r0, [sp, #4]
   22e12:	f7fe ffca 	bl	21daa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   22e16:	2101      	movs	r1, #1
   22e18:	9800      	ldr	r0, [sp, #0]
   22e1a:	f000 fa47 	bl	232ac <prvAddCurrentTaskToDelayedList>
}
   22e1e:	bf00      	nop
   22e20:	b003      	add	sp, #12
   22e22:	f85d fb04 	ldr.w	pc, [sp], #4
   22e26:	bf00      	nop
   22e28:	100077f8 	.word	0x100077f8

00022e2c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   22e2c:	b500      	push	{lr}
   22e2e:	b085      	sub	sp, #20
   22e30:	9003      	str	r0, [sp, #12]
   22e32:	9102      	str	r1, [sp, #8]
   22e34:	9201      	str	r2, [sp, #4]
	configASSERT( pxEventList );
   22e36:	9b03      	ldr	r3, [sp, #12]
   22e38:	2b00      	cmp	r3, #0
   22e3a:	d100      	bne.n	22e3e <vTaskPlaceOnUnorderedEventList+0x12>
   22e3c:	e7fe      	b.n	22e3c <vTaskPlaceOnUnorderedEventList+0x10>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
   22e3e:	4b0d      	ldr	r3, [pc, #52]	; (22e74 <vTaskPlaceOnUnorderedEventList+0x48>)
   22e40:	681b      	ldr	r3, [r3, #0]
   22e42:	2b00      	cmp	r3, #0
   22e44:	d100      	bne.n	22e48 <vTaskPlaceOnUnorderedEventList+0x1c>
   22e46:	e7fe      	b.n	22e46 <vTaskPlaceOnUnorderedEventList+0x1a>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   22e48:	4b0b      	ldr	r3, [pc, #44]	; (22e78 <vTaskPlaceOnUnorderedEventList+0x4c>)
   22e4a:	681b      	ldr	r3, [r3, #0]
   22e4c:	9a02      	ldr	r2, [sp, #8]
   22e4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   22e52:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   22e54:	4b08      	ldr	r3, [pc, #32]	; (22e78 <vTaskPlaceOnUnorderedEventList+0x4c>)
   22e56:	681b      	ldr	r3, [r3, #0]
   22e58:	3318      	adds	r3, #24
   22e5a:	4619      	mov	r1, r3
   22e5c:	9803      	ldr	r0, [sp, #12]
   22e5e:	f7fe ff85 	bl	21d6c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   22e62:	2101      	movs	r1, #1
   22e64:	9801      	ldr	r0, [sp, #4]
   22e66:	f000 fa21 	bl	232ac <prvAddCurrentTaskToDelayedList>
}
   22e6a:	bf00      	nop
   22e6c:	b005      	add	sp, #20
   22e6e:	f85d fb04 	ldr.w	pc, [sp], #4
   22e72:	bf00      	nop
   22e74:	100078cc 	.word	0x100078cc
   22e78:	100077f8 	.word	0x100077f8

00022e7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   22e7c:	b500      	push	{lr}
   22e7e:	b085      	sub	sp, #20
   22e80:	9003      	str	r0, [sp, #12]
   22e82:	9102      	str	r1, [sp, #8]
   22e84:	9201      	str	r2, [sp, #4]
		configASSERT( pxEventList );
   22e86:	9b03      	ldr	r3, [sp, #12]
   22e88:	2b00      	cmp	r3, #0
   22e8a:	d100      	bne.n	22e8e <vTaskPlaceOnEventListRestricted+0x12>
   22e8c:	e7fe      	b.n	22e8c <vTaskPlaceOnEventListRestricted+0x10>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   22e8e:	4b0a      	ldr	r3, [pc, #40]	; (22eb8 <vTaskPlaceOnEventListRestricted+0x3c>)
   22e90:	681b      	ldr	r3, [r3, #0]
   22e92:	3318      	adds	r3, #24
   22e94:	4619      	mov	r1, r3
   22e96:	9803      	ldr	r0, [sp, #12]
   22e98:	f7fe ff68 	bl	21d6c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   22e9c:	9b01      	ldr	r3, [sp, #4]
   22e9e:	2b00      	cmp	r3, #0
   22ea0:	d002      	beq.n	22ea8 <vTaskPlaceOnEventListRestricted+0x2c>
		{
			xTicksToWait = portMAX_DELAY;
   22ea2:	f04f 33ff 	mov.w	r3, #4294967295
   22ea6:	9302      	str	r3, [sp, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   22ea8:	9901      	ldr	r1, [sp, #4]
   22eaa:	9802      	ldr	r0, [sp, #8]
   22eac:	f000 f9fe 	bl	232ac <prvAddCurrentTaskToDelayedList>
	}
   22eb0:	bf00      	nop
   22eb2:	b005      	add	sp, #20
   22eb4:	f85d fb04 	ldr.w	pc, [sp], #4
   22eb8:	100077f8 	.word	0x100077f8

00022ebc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   22ebc:	b500      	push	{lr}
   22ebe:	b085      	sub	sp, #20
   22ec0:	9001      	str	r0, [sp, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22ec2:	9b01      	ldr	r3, [sp, #4]
   22ec4:	68db      	ldr	r3, [r3, #12]
   22ec6:	68db      	ldr	r3, [r3, #12]
   22ec8:	9302      	str	r3, [sp, #8]
	configASSERT( pxUnblockedTCB );
   22eca:	9b02      	ldr	r3, [sp, #8]
   22ecc:	2b00      	cmp	r3, #0
   22ece:	d100      	bne.n	22ed2 <xTaskRemoveFromEventList+0x16>
   22ed0:	e7fe      	b.n	22ed0 <xTaskRemoveFromEventList+0x14>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   22ed2:	9b02      	ldr	r3, [sp, #8]
   22ed4:	3318      	adds	r3, #24
   22ed6:	4618      	mov	r0, r3
   22ed8:	f7fe ff9b 	bl	21e12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22edc:	4b1e      	ldr	r3, [pc, #120]	; (22f58 <xTaskRemoveFromEventList+0x9c>)
   22ede:	681b      	ldr	r3, [r3, #0]
   22ee0:	2b00      	cmp	r3, #0
   22ee2:	d11d      	bne.n	22f20 <xTaskRemoveFromEventList+0x64>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   22ee4:	9b02      	ldr	r3, [sp, #8]
   22ee6:	3304      	adds	r3, #4
   22ee8:	4618      	mov	r0, r3
   22eea:	f7fe ff92 	bl	21e12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   22eee:	9b02      	ldr	r3, [sp, #8]
   22ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22ef2:	4b1a      	ldr	r3, [pc, #104]	; (22f5c <xTaskRemoveFromEventList+0xa0>)
   22ef4:	681b      	ldr	r3, [r3, #0]
   22ef6:	429a      	cmp	r2, r3
   22ef8:	d903      	bls.n	22f02 <xTaskRemoveFromEventList+0x46>
   22efa:	9b02      	ldr	r3, [sp, #8]
   22efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22efe:	4a17      	ldr	r2, [pc, #92]	; (22f5c <xTaskRemoveFromEventList+0xa0>)
   22f00:	6013      	str	r3, [r2, #0]
   22f02:	9b02      	ldr	r3, [sp, #8]
   22f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22f06:	4613      	mov	r3, r2
   22f08:	009b      	lsls	r3, r3, #2
   22f0a:	4413      	add	r3, r2
   22f0c:	009b      	lsls	r3, r3, #2
   22f0e:	4a14      	ldr	r2, [pc, #80]	; (22f60 <xTaskRemoveFromEventList+0xa4>)
   22f10:	441a      	add	r2, r3
   22f12:	9b02      	ldr	r3, [sp, #8]
   22f14:	3304      	adds	r3, #4
   22f16:	4619      	mov	r1, r3
   22f18:	4610      	mov	r0, r2
   22f1a:	f7fe ff27 	bl	21d6c <vListInsertEnd>
   22f1e:	e005      	b.n	22f2c <xTaskRemoveFromEventList+0x70>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   22f20:	9b02      	ldr	r3, [sp, #8]
   22f22:	3318      	adds	r3, #24
   22f24:	4619      	mov	r1, r3
   22f26:	480f      	ldr	r0, [pc, #60]	; (22f64 <xTaskRemoveFromEventList+0xa8>)
   22f28:	f7fe ff20 	bl	21d6c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   22f2c:	9b02      	ldr	r3, [sp, #8]
   22f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22f30:	4b0d      	ldr	r3, [pc, #52]	; (22f68 <xTaskRemoveFromEventList+0xac>)
   22f32:	681b      	ldr	r3, [r3, #0]
   22f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22f36:	429a      	cmp	r2, r3
   22f38:	d905      	bls.n	22f46 <xTaskRemoveFromEventList+0x8a>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   22f3a:	2301      	movs	r3, #1
   22f3c:	9303      	str	r3, [sp, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   22f3e:	4b0b      	ldr	r3, [pc, #44]	; (22f6c <xTaskRemoveFromEventList+0xb0>)
   22f40:	2201      	movs	r2, #1
   22f42:	601a      	str	r2, [r3, #0]
   22f44:	e001      	b.n	22f4a <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		xReturn = pdFALSE;
   22f46:	2300      	movs	r3, #0
   22f48:	9303      	str	r3, [sp, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
   22f4a:	f000 f965 	bl	23218 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
   22f4e:	9b03      	ldr	r3, [sp, #12]
}
   22f50:	4618      	mov	r0, r3
   22f52:	b005      	add	sp, #20
   22f54:	f85d fb04 	ldr.w	pc, [sp], #4
   22f58:	100078cc 	.word	0x100078cc
   22f5c:	100078ac 	.word	0x100078ac
   22f60:	100077fc 	.word	0x100077fc
   22f64:	1000787c 	.word	0x1000787c
   22f68:	100077f8 	.word	0x100077f8
   22f6c:	100078b8 	.word	0x100078b8

00022f70 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   22f70:	b500      	push	{lr}
   22f72:	b085      	sub	sp, #20
   22f74:	9001      	str	r0, [sp, #4]
   22f76:	9100      	str	r1, [sp, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
   22f78:	4b1f      	ldr	r3, [pc, #124]	; (22ff8 <vTaskRemoveFromUnorderedEventList+0x88>)
   22f7a:	681b      	ldr	r3, [r3, #0]
   22f7c:	2b00      	cmp	r3, #0
   22f7e:	d100      	bne.n	22f82 <vTaskRemoveFromUnorderedEventList+0x12>
   22f80:	e7fe      	b.n	22f80 <vTaskRemoveFromUnorderedEventList+0x10>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   22f82:	9b00      	ldr	r3, [sp, #0]
   22f84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   22f88:	9b01      	ldr	r3, [sp, #4]
   22f8a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22f8c:	9b01      	ldr	r3, [sp, #4]
   22f8e:	68db      	ldr	r3, [r3, #12]
   22f90:	9303      	str	r3, [sp, #12]
	configASSERT( pxUnblockedTCB );
   22f92:	9b03      	ldr	r3, [sp, #12]
   22f94:	2b00      	cmp	r3, #0
   22f96:	d100      	bne.n	22f9a <vTaskRemoveFromUnorderedEventList+0x2a>
   22f98:	e7fe      	b.n	22f98 <vTaskRemoveFromUnorderedEventList+0x28>
	( void ) uxListRemove( pxEventListItem );
   22f9a:	9801      	ldr	r0, [sp, #4]
   22f9c:	f7fe ff39 	bl	21e12 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   22fa0:	9b03      	ldr	r3, [sp, #12]
   22fa2:	3304      	adds	r3, #4
   22fa4:	4618      	mov	r0, r3
   22fa6:	f7fe ff34 	bl	21e12 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   22faa:	9b03      	ldr	r3, [sp, #12]
   22fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22fae:	4b13      	ldr	r3, [pc, #76]	; (22ffc <vTaskRemoveFromUnorderedEventList+0x8c>)
   22fb0:	681b      	ldr	r3, [r3, #0]
   22fb2:	429a      	cmp	r2, r3
   22fb4:	d903      	bls.n	22fbe <vTaskRemoveFromUnorderedEventList+0x4e>
   22fb6:	9b03      	ldr	r3, [sp, #12]
   22fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22fba:	4a10      	ldr	r2, [pc, #64]	; (22ffc <vTaskRemoveFromUnorderedEventList+0x8c>)
   22fbc:	6013      	str	r3, [r2, #0]
   22fbe:	9b03      	ldr	r3, [sp, #12]
   22fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22fc2:	4613      	mov	r3, r2
   22fc4:	009b      	lsls	r3, r3, #2
   22fc6:	4413      	add	r3, r2
   22fc8:	009b      	lsls	r3, r3, #2
   22fca:	4a0d      	ldr	r2, [pc, #52]	; (23000 <vTaskRemoveFromUnorderedEventList+0x90>)
   22fcc:	441a      	add	r2, r3
   22fce:	9b03      	ldr	r3, [sp, #12]
   22fd0:	3304      	adds	r3, #4
   22fd2:	4619      	mov	r1, r3
   22fd4:	4610      	mov	r0, r2
   22fd6:	f7fe fec9 	bl	21d6c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   22fda:	9b03      	ldr	r3, [sp, #12]
   22fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22fde:	4b09      	ldr	r3, [pc, #36]	; (23004 <vTaskRemoveFromUnorderedEventList+0x94>)
   22fe0:	681b      	ldr	r3, [r3, #0]
   22fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22fe4:	429a      	cmp	r2, r3
   22fe6:	d902      	bls.n	22fee <vTaskRemoveFromUnorderedEventList+0x7e>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
   22fe8:	4b07      	ldr	r3, [pc, #28]	; (23008 <vTaskRemoveFromUnorderedEventList+0x98>)
   22fea:	2201      	movs	r2, #1
   22fec:	601a      	str	r2, [r3, #0]
	}
}
   22fee:	bf00      	nop
   22ff0:	b005      	add	sp, #20
   22ff2:	f85d fb04 	ldr.w	pc, [sp], #4
   22ff6:	bf00      	nop
   22ff8:	100078cc 	.word	0x100078cc
   22ffc:	100078ac 	.word	0x100078ac
   23000:	100077fc 	.word	0x100077fc
   23004:	100077f8 	.word	0x100077f8
   23008:	100078b8 	.word	0x100078b8

0002300c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   2300c:	b082      	sub	sp, #8
   2300e:	9001      	str	r0, [sp, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   23010:	4b05      	ldr	r3, [pc, #20]	; (23028 <vTaskInternalSetTimeOutState+0x1c>)
   23012:	681a      	ldr	r2, [r3, #0]
   23014:	9b01      	ldr	r3, [sp, #4]
   23016:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   23018:	4b04      	ldr	r3, [pc, #16]	; (2302c <vTaskInternalSetTimeOutState+0x20>)
   2301a:	681a      	ldr	r2, [r3, #0]
   2301c:	9b01      	ldr	r3, [sp, #4]
   2301e:	605a      	str	r2, [r3, #4]
}
   23020:	bf00      	nop
   23022:	b002      	add	sp, #8
   23024:	4770      	bx	lr
   23026:	bf00      	nop
   23028:	100078bc 	.word	0x100078bc
   2302c:	100078a8 	.word	0x100078a8

00023030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   23030:	b500      	push	{lr}
   23032:	b087      	sub	sp, #28
   23034:	9001      	str	r0, [sp, #4]
   23036:	9100      	str	r1, [sp, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   23038:	9b01      	ldr	r3, [sp, #4]
   2303a:	2b00      	cmp	r3, #0
   2303c:	d100      	bne.n	23040 <xTaskCheckForTimeOut+0x10>
   2303e:	e7fe      	b.n	2303e <xTaskCheckForTimeOut+0xe>
	configASSERT( pxTicksToWait );
   23040:	9b00      	ldr	r3, [sp, #0]
   23042:	2b00      	cmp	r3, #0
   23044:	d100      	bne.n	23048 <xTaskCheckForTimeOut+0x18>
   23046:	e7fe      	b.n	23046 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   23048:	f7f9 fa9a 	bl	1c580 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   2304c:	4b1d      	ldr	r3, [pc, #116]	; (230c4 <xTaskCheckForTimeOut+0x94>)
   2304e:	681b      	ldr	r3, [r3, #0]
   23050:	9304      	str	r3, [sp, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   23052:	9b01      	ldr	r3, [sp, #4]
   23054:	685b      	ldr	r3, [r3, #4]
   23056:	9a04      	ldr	r2, [sp, #16]
   23058:	1ad3      	subs	r3, r2, r3
   2305a:	9303      	str	r3, [sp, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   2305c:	9b00      	ldr	r3, [sp, #0]
   2305e:	681b      	ldr	r3, [r3, #0]
   23060:	f1b3 3fff 	cmp.w	r3, #4294967295
   23064:	d102      	bne.n	2306c <xTaskCheckForTimeOut+0x3c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   23066:	2300      	movs	r3, #0
   23068:	9305      	str	r3, [sp, #20]
   2306a:	e023      	b.n	230b4 <xTaskCheckForTimeOut+0x84>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   2306c:	9b01      	ldr	r3, [sp, #4]
   2306e:	681a      	ldr	r2, [r3, #0]
   23070:	4b15      	ldr	r3, [pc, #84]	; (230c8 <xTaskCheckForTimeOut+0x98>)
   23072:	681b      	ldr	r3, [r3, #0]
   23074:	429a      	cmp	r2, r3
   23076:	d007      	beq.n	23088 <xTaskCheckForTimeOut+0x58>
   23078:	9b01      	ldr	r3, [sp, #4]
   2307a:	685b      	ldr	r3, [r3, #4]
   2307c:	9a04      	ldr	r2, [sp, #16]
   2307e:	429a      	cmp	r2, r3
   23080:	d302      	bcc.n	23088 <xTaskCheckForTimeOut+0x58>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   23082:	2301      	movs	r3, #1
   23084:	9305      	str	r3, [sp, #20]
   23086:	e015      	b.n	230b4 <xTaskCheckForTimeOut+0x84>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   23088:	9b00      	ldr	r3, [sp, #0]
   2308a:	681b      	ldr	r3, [r3, #0]
   2308c:	9a03      	ldr	r2, [sp, #12]
   2308e:	429a      	cmp	r2, r3
   23090:	d20b      	bcs.n	230aa <xTaskCheckForTimeOut+0x7a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   23092:	9b00      	ldr	r3, [sp, #0]
   23094:	681a      	ldr	r2, [r3, #0]
   23096:	9b03      	ldr	r3, [sp, #12]
   23098:	1ad2      	subs	r2, r2, r3
   2309a:	9b00      	ldr	r3, [sp, #0]
   2309c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   2309e:	9801      	ldr	r0, [sp, #4]
   230a0:	f7ff ffb4 	bl	2300c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
   230a4:	2300      	movs	r3, #0
   230a6:	9305      	str	r3, [sp, #20]
   230a8:	e004      	b.n	230b4 <xTaskCheckForTimeOut+0x84>
		}
		else
		{
			*pxTicksToWait = 0;
   230aa:	9b00      	ldr	r3, [sp, #0]
   230ac:	2200      	movs	r2, #0
   230ae:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   230b0:	2301      	movs	r3, #1
   230b2:	9305      	str	r3, [sp, #20]
		}
	}
	taskEXIT_CRITICAL();
   230b4:	f7f9 fa86 	bl	1c5c4 <vPortExitCritical>

	return xReturn;
   230b8:	9b05      	ldr	r3, [sp, #20]
}
   230ba:	4618      	mov	r0, r3
   230bc:	b007      	add	sp, #28
   230be:	f85d fb04 	ldr.w	pc, [sp], #4
   230c2:	bf00      	nop
   230c4:	100078a8 	.word	0x100078a8
   230c8:	100078bc 	.word	0x100078bc

000230cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
   230cc:	4b02      	ldr	r3, [pc, #8]	; (230d8 <vTaskMissedYield+0xc>)
   230ce:	2201      	movs	r2, #1
   230d0:	601a      	str	r2, [r3, #0]
}
   230d2:	bf00      	nop
   230d4:	4770      	bx	lr
   230d6:	bf00      	nop
   230d8:	100078b8 	.word	0x100078b8

000230dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   230dc:	b500      	push	{lr}
   230de:	b085      	sub	sp, #20
   230e0:	9001      	str	r0, [sp, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   230e2:	f000 f897 	bl	23214 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   230e6:	4b13      	ldr	r3, [pc, #76]	; (23134 <prvIdleTask+0x58>)
   230e8:	681b      	ldr	r3, [r3, #0]
   230ea:	2b01      	cmp	r3, #1
   230ec:	d907      	bls.n	230fe <prvIdleTask+0x22>
			{
				taskYIELD();
   230ee:	4b12      	ldr	r3, [pc, #72]	; (23138 <prvIdleTask+0x5c>)
   230f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   230f4:	601a      	str	r2, [r3, #0]
   230f6:	f3bf 8f4f 	dsb	sy
   230fa:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
   230fe:	f7ff fc7f 	bl	22a00 <prvGetExpectedIdleTime>
   23102:	9003      	str	r0, [sp, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   23104:	9b03      	ldr	r3, [sp, #12]
   23106:	2b01      	cmp	r3, #1
   23108:	d9eb      	bls.n	230e2 <prvIdleTask+0x6>
			{
				vTaskSuspendAll();
   2310a:	f7ff fc6f 	bl	229ec <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   2310e:	4b0b      	ldr	r3, [pc, #44]	; (2313c <prvIdleTask+0x60>)
   23110:	681a      	ldr	r2, [r3, #0]
   23112:	4b0b      	ldr	r3, [pc, #44]	; (23140 <prvIdleTask+0x64>)
   23114:	681b      	ldr	r3, [r3, #0]
   23116:	429a      	cmp	r2, r3
   23118:	d200      	bcs.n	2311c <prvIdleTask+0x40>
   2311a:	e7fe      	b.n	2311a <prvIdleTask+0x3e>
					xExpectedIdleTime = prvGetExpectedIdleTime();
   2311c:	f7ff fc70 	bl	22a00 <prvGetExpectedIdleTime>
   23120:	9003      	str	r0, [sp, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   23122:	9b03      	ldr	r3, [sp, #12]
   23124:	2b01      	cmp	r3, #1
   23126:	d902      	bls.n	2312e <prvIdleTask+0x52>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   23128:	9803      	ldr	r0, [sp, #12]
   2312a:	f7f9 faf1 	bl	1c710 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
   2312e:	f7ff fc99 	bl	22a64 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
   23132:	e7d6      	b.n	230e2 <prvIdleTask+0x6>
   23134:	100077fc 	.word	0x100077fc
   23138:	e000ed04 	.word	0xe000ed04
   2313c:	100078c4 	.word	0x100078c4
   23140:	100078a8 	.word	0x100078a8

00023144 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
   23144:	b082      	sub	sp, #8
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
   23146:	2301      	movs	r3, #1
   23148:	9300      	str	r3, [sp, #0]
	eSleepModeStatus eReturn = eStandardSleep;
   2314a:	2301      	movs	r3, #1
   2314c:	f88d 3007 	strb.w	r3, [sp, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   23150:	4b0f      	ldr	r3, [pc, #60]	; (23190 <eTaskConfirmSleepModeStatus+0x4c>)
   23152:	681b      	ldr	r3, [r3, #0]
   23154:	2b00      	cmp	r3, #0
   23156:	d003      	beq.n	23160 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
   23158:	2300      	movs	r3, #0
   2315a:	f88d 3007 	strb.w	r3, [sp, #7]
   2315e:	e012      	b.n	23186 <eTaskConfirmSleepModeStatus+0x42>
		}
		else if( xYieldPending != pdFALSE )
   23160:	4b0c      	ldr	r3, [pc, #48]	; (23194 <eTaskConfirmSleepModeStatus+0x50>)
   23162:	681b      	ldr	r3, [r3, #0]
   23164:	2b00      	cmp	r3, #0
   23166:	d003      	beq.n	23170 <eTaskConfirmSleepModeStatus+0x2c>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
   23168:	2300      	movs	r3, #0
   2316a:	f88d 3007 	strb.w	r3, [sp, #7]
   2316e:	e00a      	b.n	23186 <eTaskConfirmSleepModeStatus+0x42>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   23170:	4b09      	ldr	r3, [pc, #36]	; (23198 <eTaskConfirmSleepModeStatus+0x54>)
   23172:	681a      	ldr	r2, [r3, #0]
   23174:	4b09      	ldr	r3, [pc, #36]	; (2319c <eTaskConfirmSleepModeStatus+0x58>)
   23176:	6819      	ldr	r1, [r3, #0]
   23178:	9b00      	ldr	r3, [sp, #0]
   2317a:	1acb      	subs	r3, r1, r3
   2317c:	429a      	cmp	r2, r3
   2317e:	d102      	bne.n	23186 <eTaskConfirmSleepModeStatus+0x42>
			{
				eReturn = eNoTasksWaitingTimeout;
   23180:	2302      	movs	r3, #2
   23182:	f88d 3007 	strb.w	r3, [sp, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
   23186:	f89d 3007 	ldrb.w	r3, [sp, #7]
	}
   2318a:	4618      	mov	r0, r3
   2318c:	b002      	add	sp, #8
   2318e:	4770      	bx	lr
   23190:	1000787c 	.word	0x1000787c
   23194:	100078b8 	.word	0x100078b8
   23198:	10007890 	.word	0x10007890
   2319c:	100078a4 	.word	0x100078a4

000231a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   231a0:	b500      	push	{lr}
   231a2:	b083      	sub	sp, #12
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   231a4:	2300      	movs	r3, #0
   231a6:	9301      	str	r3, [sp, #4]
   231a8:	e00c      	b.n	231c4 <prvInitialiseTaskLists+0x24>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   231aa:	9a01      	ldr	r2, [sp, #4]
   231ac:	4613      	mov	r3, r2
   231ae:	009b      	lsls	r3, r3, #2
   231b0:	4413      	add	r3, r2
   231b2:	009b      	lsls	r3, r3, #2
   231b4:	4a10      	ldr	r2, [pc, #64]	; (231f8 <prvInitialiseTaskLists+0x58>)
   231b6:	4413      	add	r3, r2
   231b8:	4618      	mov	r0, r3
   231ba:	f7fe fdb4 	bl	21d26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   231be:	9b01      	ldr	r3, [sp, #4]
   231c0:	3301      	adds	r3, #1
   231c2:	9301      	str	r3, [sp, #4]
   231c4:	9b01      	ldr	r3, [sp, #4]
   231c6:	2b03      	cmp	r3, #3
   231c8:	d9ef      	bls.n	231aa <prvInitialiseTaskLists+0xa>
	}

	vListInitialise( &xDelayedTaskList1 );
   231ca:	480c      	ldr	r0, [pc, #48]	; (231fc <prvInitialiseTaskLists+0x5c>)
   231cc:	f7fe fdab 	bl	21d26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   231d0:	480b      	ldr	r0, [pc, #44]	; (23200 <prvInitialiseTaskLists+0x60>)
   231d2:	f7fe fda8 	bl	21d26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   231d6:	480b      	ldr	r0, [pc, #44]	; (23204 <prvInitialiseTaskLists+0x64>)
   231d8:	f7fe fda5 	bl	21d26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   231dc:	480a      	ldr	r0, [pc, #40]	; (23208 <prvInitialiseTaskLists+0x68>)
   231de:	f7fe fda2 	bl	21d26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   231e2:	4b0a      	ldr	r3, [pc, #40]	; (2320c <prvInitialiseTaskLists+0x6c>)
   231e4:	4a05      	ldr	r2, [pc, #20]	; (231fc <prvInitialiseTaskLists+0x5c>)
   231e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   231e8:	4b09      	ldr	r3, [pc, #36]	; (23210 <prvInitialiseTaskLists+0x70>)
   231ea:	4a05      	ldr	r2, [pc, #20]	; (23200 <prvInitialiseTaskLists+0x60>)
   231ec:	601a      	str	r2, [r3, #0]
}
   231ee:	bf00      	nop
   231f0:	b003      	add	sp, #12
   231f2:	f85d fb04 	ldr.w	pc, [sp], #4
   231f6:	bf00      	nop
   231f8:	100077fc 	.word	0x100077fc
   231fc:	1000784c 	.word	0x1000784c
   23200:	10007860 	.word	0x10007860
   23204:	1000787c 	.word	0x1000787c
   23208:	10007890 	.word	0x10007890
   2320c:	10007874 	.word	0x10007874
   23210:	10007878 	.word	0x10007878

00023214 <prvCheckTasksWaitingTermination>:

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   23214:	bf00      	nop
   23216:	4770      	bx	lr

00023218 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   23218:	b082      	sub	sp, #8
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2321a:	4b0b      	ldr	r3, [pc, #44]	; (23248 <prvResetNextTaskUnblockTime+0x30>)
   2321c:	681b      	ldr	r3, [r3, #0]
   2321e:	681b      	ldr	r3, [r3, #0]
   23220:	2b00      	cmp	r3, #0
   23222:	d104      	bne.n	2322e <prvResetNextTaskUnblockTime+0x16>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   23224:	4b09      	ldr	r3, [pc, #36]	; (2324c <prvResetNextTaskUnblockTime+0x34>)
   23226:	f04f 32ff 	mov.w	r2, #4294967295
   2322a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   2322c:	e008      	b.n	23240 <prvResetNextTaskUnblockTime+0x28>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2322e:	4b06      	ldr	r3, [pc, #24]	; (23248 <prvResetNextTaskUnblockTime+0x30>)
   23230:	681b      	ldr	r3, [r3, #0]
   23232:	68db      	ldr	r3, [r3, #12]
   23234:	68db      	ldr	r3, [r3, #12]
   23236:	9301      	str	r3, [sp, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   23238:	9b01      	ldr	r3, [sp, #4]
   2323a:	685b      	ldr	r3, [r3, #4]
   2323c:	4a03      	ldr	r2, [pc, #12]	; (2324c <prvResetNextTaskUnblockTime+0x34>)
   2323e:	6013      	str	r3, [r2, #0]
}
   23240:	bf00      	nop
   23242:	b002      	add	sp, #8
   23244:	4770      	bx	lr
   23246:	bf00      	nop
   23248:	10007874 	.word	0x10007874
   2324c:	100078c4 	.word	0x100078c4

00023250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   23250:	b082      	sub	sp, #8
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   23252:	4b0a      	ldr	r3, [pc, #40]	; (2327c <xTaskGetSchedulerState+0x2c>)
   23254:	681b      	ldr	r3, [r3, #0]
   23256:	2b00      	cmp	r3, #0
   23258:	d102      	bne.n	23260 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   2325a:	2301      	movs	r3, #1
   2325c:	9301      	str	r3, [sp, #4]
   2325e:	e008      	b.n	23272 <xTaskGetSchedulerState+0x22>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   23260:	4b07      	ldr	r3, [pc, #28]	; (23280 <xTaskGetSchedulerState+0x30>)
   23262:	681b      	ldr	r3, [r3, #0]
   23264:	2b00      	cmp	r3, #0
   23266:	d102      	bne.n	2326e <xTaskGetSchedulerState+0x1e>
			{
				xReturn = taskSCHEDULER_RUNNING;
   23268:	2302      	movs	r3, #2
   2326a:	9301      	str	r3, [sp, #4]
   2326c:	e001      	b.n	23272 <xTaskGetSchedulerState+0x22>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   2326e:	2300      	movs	r3, #0
   23270:	9301      	str	r3, [sp, #4]
			}
		}

		return xReturn;
   23272:	9b01      	ldr	r3, [sp, #4]
	}
   23274:	4618      	mov	r0, r3
   23276:	b002      	add	sp, #8
   23278:	4770      	bx	lr
   2327a:	bf00      	nop
   2327c:	100078b0 	.word	0x100078b0
   23280:	100078cc 	.word	0x100078cc

00023284 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   23284:	b082      	sub	sp, #8
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   23286:	4b08      	ldr	r3, [pc, #32]	; (232a8 <uxTaskResetEventItemValue+0x24>)
   23288:	681b      	ldr	r3, [r3, #0]
   2328a:	699b      	ldr	r3, [r3, #24]
   2328c:	9301      	str	r3, [sp, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2328e:	4b06      	ldr	r3, [pc, #24]	; (232a8 <uxTaskResetEventItemValue+0x24>)
   23290:	681b      	ldr	r3, [r3, #0]
   23292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23294:	4b04      	ldr	r3, [pc, #16]	; (232a8 <uxTaskResetEventItemValue+0x24>)
   23296:	681b      	ldr	r3, [r3, #0]
   23298:	f1c2 0204 	rsb	r2, r2, #4
   2329c:	619a      	str	r2, [r3, #24]

	return uxReturn;
   2329e:	9b01      	ldr	r3, [sp, #4]
}
   232a0:	4618      	mov	r0, r3
   232a2:	b002      	add	sp, #8
   232a4:	4770      	bx	lr
   232a6:	bf00      	nop
   232a8:	100077f8 	.word	0x100077f8

000232ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   232ac:	b500      	push	{lr}
   232ae:	b085      	sub	sp, #20
   232b0:	9001      	str	r0, [sp, #4]
   232b2:	9100      	str	r1, [sp, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   232b4:	4b21      	ldr	r3, [pc, #132]	; (2333c <prvAddCurrentTaskToDelayedList+0x90>)
   232b6:	681b      	ldr	r3, [r3, #0]
   232b8:	9303      	str	r3, [sp, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   232ba:	4b21      	ldr	r3, [pc, #132]	; (23340 <prvAddCurrentTaskToDelayedList+0x94>)
   232bc:	681b      	ldr	r3, [r3, #0]
   232be:	3304      	adds	r3, #4
   232c0:	4618      	mov	r0, r3
   232c2:	f7fe fda6 	bl	21e12 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   232c6:	9b01      	ldr	r3, [sp, #4]
   232c8:	f1b3 3fff 	cmp.w	r3, #4294967295
   232cc:	d10a      	bne.n	232e4 <prvAddCurrentTaskToDelayedList+0x38>
   232ce:	9b00      	ldr	r3, [sp, #0]
   232d0:	2b00      	cmp	r3, #0
   232d2:	d007      	beq.n	232e4 <prvAddCurrentTaskToDelayedList+0x38>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   232d4:	4b1a      	ldr	r3, [pc, #104]	; (23340 <prvAddCurrentTaskToDelayedList+0x94>)
   232d6:	681b      	ldr	r3, [r3, #0]
   232d8:	3304      	adds	r3, #4
   232da:	4619      	mov	r1, r3
   232dc:	4819      	ldr	r0, [pc, #100]	; (23344 <prvAddCurrentTaskToDelayedList+0x98>)
   232de:	f7fe fd45 	bl	21d6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   232e2:	e026      	b.n	23332 <prvAddCurrentTaskToDelayedList+0x86>
			xTimeToWake = xConstTickCount + xTicksToWait;
   232e4:	9a03      	ldr	r2, [sp, #12]
   232e6:	9b01      	ldr	r3, [sp, #4]
   232e8:	4413      	add	r3, r2
   232ea:	9302      	str	r3, [sp, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   232ec:	4b14      	ldr	r3, [pc, #80]	; (23340 <prvAddCurrentTaskToDelayedList+0x94>)
   232ee:	681b      	ldr	r3, [r3, #0]
   232f0:	9a02      	ldr	r2, [sp, #8]
   232f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   232f4:	9a02      	ldr	r2, [sp, #8]
   232f6:	9b03      	ldr	r3, [sp, #12]
   232f8:	429a      	cmp	r2, r3
   232fa:	d209      	bcs.n	23310 <prvAddCurrentTaskToDelayedList+0x64>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   232fc:	4b12      	ldr	r3, [pc, #72]	; (23348 <prvAddCurrentTaskToDelayedList+0x9c>)
   232fe:	681a      	ldr	r2, [r3, #0]
   23300:	4b0f      	ldr	r3, [pc, #60]	; (23340 <prvAddCurrentTaskToDelayedList+0x94>)
   23302:	681b      	ldr	r3, [r3, #0]
   23304:	3304      	adds	r3, #4
   23306:	4619      	mov	r1, r3
   23308:	4610      	mov	r0, r2
   2330a:	f7fe fd4e 	bl	21daa <vListInsert>
}
   2330e:	e010      	b.n	23332 <prvAddCurrentTaskToDelayedList+0x86>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   23310:	4b0e      	ldr	r3, [pc, #56]	; (2334c <prvAddCurrentTaskToDelayedList+0xa0>)
   23312:	681a      	ldr	r2, [r3, #0]
   23314:	4b0a      	ldr	r3, [pc, #40]	; (23340 <prvAddCurrentTaskToDelayedList+0x94>)
   23316:	681b      	ldr	r3, [r3, #0]
   23318:	3304      	adds	r3, #4
   2331a:	4619      	mov	r1, r3
   2331c:	4610      	mov	r0, r2
   2331e:	f7fe fd44 	bl	21daa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   23322:	4b0b      	ldr	r3, [pc, #44]	; (23350 <prvAddCurrentTaskToDelayedList+0xa4>)
   23324:	681b      	ldr	r3, [r3, #0]
   23326:	9a02      	ldr	r2, [sp, #8]
   23328:	429a      	cmp	r2, r3
   2332a:	d202      	bcs.n	23332 <prvAddCurrentTaskToDelayedList+0x86>
					xNextTaskUnblockTime = xTimeToWake;
   2332c:	4a08      	ldr	r2, [pc, #32]	; (23350 <prvAddCurrentTaskToDelayedList+0xa4>)
   2332e:	9b02      	ldr	r3, [sp, #8]
   23330:	6013      	str	r3, [r2, #0]
}
   23332:	bf00      	nop
   23334:	b005      	add	sp, #20
   23336:	f85d fb04 	ldr.w	pc, [sp], #4
   2333a:	bf00      	nop
   2333c:	100078a8 	.word	0x100078a8
   23340:	100077f8 	.word	0x100077f8
   23344:	10007890 	.word	0x10007890
   23348:	10007878 	.word	0x10007878
   2334c:	10007874 	.word	0x10007874
   23350:	100078c4 	.word	0x100078c4

00023354 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   23354:	b500      	push	{lr}
   23356:	b085      	sub	sp, #20
BaseType_t xReturn = pdFAIL;
   23358:	2300      	movs	r3, #0
   2335a:	9303      	str	r3, [sp, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   2335c:	f000 fa9c 	bl	23898 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
   23360:	4b0c      	ldr	r3, [pc, #48]	; (23394 <xTimerCreateTimerTask+0x40>)
   23362:	681b      	ldr	r3, [r3, #0]
   23364:	2b00      	cmp	r3, #0
   23366:	d00b      	beq.n	23380 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   23368:	4b0b      	ldr	r3, [pc, #44]	; (23398 <xTimerCreateTimerTask+0x44>)
   2336a:	9301      	str	r3, [sp, #4]
   2336c:	2303      	movs	r3, #3
   2336e:	9300      	str	r3, [sp, #0]
   23370:	2300      	movs	r3, #0
   23372:	f44f 7280 	mov.w	r2, #256	; 0x100
   23376:	4909      	ldr	r1, [pc, #36]	; (2339c <xTimerCreateTimerTask+0x48>)
   23378:	4809      	ldr	r0, [pc, #36]	; (233a0 <xTimerCreateTimerTask+0x4c>)
   2337a:	f7ff f961 	bl	22640 <xTaskCreate>
   2337e:	9003      	str	r0, [sp, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   23380:	9b03      	ldr	r3, [sp, #12]
   23382:	2b00      	cmp	r3, #0
   23384:	d100      	bne.n	23388 <xTimerCreateTimerTask+0x34>
   23386:	e7fe      	b.n	23386 <xTimerCreateTimerTask+0x32>
	return xReturn;
   23388:	9b03      	ldr	r3, [sp, #12]
}
   2338a:	4618      	mov	r0, r3
   2338c:	b005      	add	sp, #20
   2338e:	f85d fb04 	ldr.w	pc, [sp], #4
   23392:	bf00      	nop
   23394:	10007900 	.word	0x10007900
   23398:	10007904 	.word	0x10007904
   2339c:	00027d44 	.word	0x00027d44
   233a0:	00023519 	.word	0x00023519

000233a4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   233a4:	b500      	push	{lr}
   233a6:	b089      	sub	sp, #36	; 0x24
   233a8:	9005      	str	r0, [sp, #20]
   233aa:	9104      	str	r1, [sp, #16]
   233ac:	9203      	str	r2, [sp, #12]
   233ae:	9302      	str	r3, [sp, #8]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   233b0:	2028      	movs	r0, #40	; 0x28
   233b2:	f7fe f9b1 	bl	21718 <pvPortMalloc>
   233b6:	9007      	str	r0, [sp, #28]

		if( pxNewTimer != NULL )
   233b8:	9b07      	ldr	r3, [sp, #28]
   233ba:	2b00      	cmp	r3, #0
   233bc:	d009      	beq.n	233d2 <xTimerCreate+0x2e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   233be:	9b07      	ldr	r3, [sp, #28]
   233c0:	9301      	str	r3, [sp, #4]
   233c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   233c4:	9300      	str	r3, [sp, #0]
   233c6:	9b02      	ldr	r3, [sp, #8]
   233c8:	9a03      	ldr	r2, [sp, #12]
   233ca:	9904      	ldr	r1, [sp, #16]
   233cc:	9805      	ldr	r0, [sp, #20]
   233ce:	f000 f805 	bl	233dc <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   233d2:	9b07      	ldr	r3, [sp, #28]
	}
   233d4:	4618      	mov	r0, r3
   233d6:	b009      	add	sp, #36	; 0x24
   233d8:	f85d fb04 	ldr.w	pc, [sp], #4

000233dc <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   233dc:	b500      	push	{lr}
   233de:	b085      	sub	sp, #20
   233e0:	9003      	str	r0, [sp, #12]
   233e2:	9102      	str	r1, [sp, #8]
   233e4:	9201      	str	r2, [sp, #4]
   233e6:	9300      	str	r3, [sp, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   233e8:	9b02      	ldr	r3, [sp, #8]
   233ea:	2b00      	cmp	r3, #0
   233ec:	d100      	bne.n	233f0 <prvInitialiseNewTimer+0x14>
   233ee:	e7fe      	b.n	233ee <prvInitialiseNewTimer+0x12>

	if( pxNewTimer != NULL )
   233f0:	9b07      	ldr	r3, [sp, #28]
   233f2:	2b00      	cmp	r3, #0
   233f4:	d015      	beq.n	23422 <prvInitialiseNewTimer+0x46>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   233f6:	f000 fa4f 	bl	23898 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   233fa:	9b07      	ldr	r3, [sp, #28]
   233fc:	9a03      	ldr	r2, [sp, #12]
   233fe:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   23400:	9b07      	ldr	r3, [sp, #28]
   23402:	9a02      	ldr	r2, [sp, #8]
   23404:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   23406:	9b07      	ldr	r3, [sp, #28]
   23408:	9a01      	ldr	r2, [sp, #4]
   2340a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   2340c:	9b07      	ldr	r3, [sp, #28]
   2340e:	9a00      	ldr	r2, [sp, #0]
   23410:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   23412:	9b07      	ldr	r3, [sp, #28]
   23414:	9a06      	ldr	r2, [sp, #24]
   23416:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   23418:	9b07      	ldr	r3, [sp, #28]
   2341a:	3304      	adds	r3, #4
   2341c:	4618      	mov	r0, r3
   2341e:	f7fe fc9d 	bl	21d5c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
   23422:	bf00      	nop
   23424:	b005      	add	sp, #20
   23426:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002342c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   2342c:	b500      	push	{lr}
   2342e:	b08b      	sub	sp, #44	; 0x2c
   23430:	9003      	str	r0, [sp, #12]
   23432:	9102      	str	r1, [sp, #8]
   23434:	9201      	str	r2, [sp, #4]
   23436:	9300      	str	r3, [sp, #0]
BaseType_t xReturn = pdFAIL;
   23438:	2300      	movs	r3, #0
   2343a:	9309      	str	r3, [sp, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   2343c:	9b03      	ldr	r3, [sp, #12]
   2343e:	2b00      	cmp	r3, #0
   23440:	d100      	bne.n	23444 <xTimerGenericCommand+0x18>
   23442:	e7fe      	b.n	23442 <xTimerGenericCommand+0x16>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   23444:	4b18      	ldr	r3, [pc, #96]	; (234a8 <xTimerGenericCommand+0x7c>)
   23446:	681b      	ldr	r3, [r3, #0]
   23448:	2b00      	cmp	r3, #0
   2344a:	d027      	beq.n	2349c <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   2344c:	9b02      	ldr	r3, [sp, #8]
   2344e:	9305      	str	r3, [sp, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   23450:	9b01      	ldr	r3, [sp, #4]
   23452:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   23454:	9b03      	ldr	r3, [sp, #12]
   23456:	9307      	str	r3, [sp, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   23458:	9b02      	ldr	r3, [sp, #8]
   2345a:	2b05      	cmp	r3, #5
   2345c:	dc16      	bgt.n	2348c <xTimerGenericCommand+0x60>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   2345e:	f7ff fef7 	bl	23250 <xTaskGetSchedulerState>
   23462:	4603      	mov	r3, r0
   23464:	2b02      	cmp	r3, #2
   23466:	d108      	bne.n	2347a <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   23468:	4b0f      	ldr	r3, [pc, #60]	; (234a8 <xTimerGenericCommand+0x7c>)
   2346a:	6818      	ldr	r0, [r3, #0]
   2346c:	a905      	add	r1, sp, #20
   2346e:	2300      	movs	r3, #0
   23470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23472:	f7fe fda3 	bl	21fbc <xQueueGenericSend>
   23476:	9009      	str	r0, [sp, #36]	; 0x24
   23478:	e010      	b.n	2349c <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   2347a:	4b0b      	ldr	r3, [pc, #44]	; (234a8 <xTimerGenericCommand+0x7c>)
   2347c:	6818      	ldr	r0, [r3, #0]
   2347e:	a905      	add	r1, sp, #20
   23480:	2300      	movs	r3, #0
   23482:	2200      	movs	r2, #0
   23484:	f7fe fd9a 	bl	21fbc <xQueueGenericSend>
   23488:	9009      	str	r0, [sp, #36]	; 0x24
   2348a:	e007      	b.n	2349c <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   2348c:	4b06      	ldr	r3, [pc, #24]	; (234a8 <xTimerGenericCommand+0x7c>)
   2348e:	6818      	ldr	r0, [r3, #0]
   23490:	a905      	add	r1, sp, #20
   23492:	2300      	movs	r3, #0
   23494:	9a00      	ldr	r2, [sp, #0]
   23496:	f7fe fe65 	bl	22164 <xQueueGenericSendFromISR>
   2349a:	9009      	str	r0, [sp, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   2349c:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
   2349e:	4618      	mov	r0, r3
   234a0:	b00b      	add	sp, #44	; 0x2c
   234a2:	f85d fb04 	ldr.w	pc, [sp], #4
   234a6:	bf00      	nop
   234a8:	10007900 	.word	0x10007900

000234ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   234ac:	b500      	push	{lr}
   234ae:	b087      	sub	sp, #28
   234b0:	9003      	str	r0, [sp, #12]
   234b2:	9102      	str	r1, [sp, #8]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   234b4:	4b17      	ldr	r3, [pc, #92]	; (23514 <prvProcessExpiredTimer+0x68>)
   234b6:	681b      	ldr	r3, [r3, #0]
   234b8:	68db      	ldr	r3, [r3, #12]
   234ba:	68db      	ldr	r3, [r3, #12]
   234bc:	9305      	str	r3, [sp, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   234be:	9b05      	ldr	r3, [sp, #20]
   234c0:	3304      	adds	r3, #4
   234c2:	4618      	mov	r0, r3
   234c4:	f7fe fca5 	bl	21e12 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   234c8:	9b05      	ldr	r3, [sp, #20]
   234ca:	69db      	ldr	r3, [r3, #28]
   234cc:	2b01      	cmp	r3, #1
   234ce:	d118      	bne.n	23502 <prvProcessExpiredTimer+0x56>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   234d0:	9b05      	ldr	r3, [sp, #20]
   234d2:	699a      	ldr	r2, [r3, #24]
   234d4:	9b03      	ldr	r3, [sp, #12]
   234d6:	18d1      	adds	r1, r2, r3
   234d8:	9b03      	ldr	r3, [sp, #12]
   234da:	9a02      	ldr	r2, [sp, #8]
   234dc:	9805      	ldr	r0, [sp, #20]
   234de:	f000 f8b3 	bl	23648 <prvInsertTimerInActiveList>
   234e2:	4603      	mov	r3, r0
   234e4:	2b00      	cmp	r3, #0
   234e6:	d00c      	beq.n	23502 <prvProcessExpiredTimer+0x56>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   234e8:	2300      	movs	r3, #0
   234ea:	9300      	str	r3, [sp, #0]
   234ec:	2300      	movs	r3, #0
   234ee:	9a03      	ldr	r2, [sp, #12]
   234f0:	2100      	movs	r1, #0
   234f2:	9805      	ldr	r0, [sp, #20]
   234f4:	f7ff ff9a 	bl	2342c <xTimerGenericCommand>
   234f8:	9004      	str	r0, [sp, #16]
			configASSERT( xResult );
   234fa:	9b04      	ldr	r3, [sp, #16]
   234fc:	2b00      	cmp	r3, #0
   234fe:	d100      	bne.n	23502 <prvProcessExpiredTimer+0x56>
   23500:	e7fe      	b.n	23500 <prvProcessExpiredTimer+0x54>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   23502:	9b05      	ldr	r3, [sp, #20]
   23504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23506:	9805      	ldr	r0, [sp, #20]
   23508:	4798      	blx	r3
}
   2350a:	bf00      	nop
   2350c:	b007      	add	sp, #28
   2350e:	f85d fb04 	ldr.w	pc, [sp], #4
   23512:	bf00      	nop
   23514:	100078f8 	.word	0x100078f8

00023518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   23518:	b500      	push	{lr}
   2351a:	b085      	sub	sp, #20
   2351c:	9001      	str	r0, [sp, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   2351e:	ab02      	add	r3, sp, #8
   23520:	4618      	mov	r0, r3
   23522:	f000 f855 	bl	235d0 <prvGetNextExpireTime>
   23526:	9003      	str	r0, [sp, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   23528:	9b02      	ldr	r3, [sp, #8]
   2352a:	4619      	mov	r1, r3
   2352c:	9803      	ldr	r0, [sp, #12]
   2352e:	f000 f803 	bl	23538 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   23532:	f000 f8cb 	bl	236cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   23536:	e7f2      	b.n	2351e <prvTimerTask+0x6>

00023538 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   23538:	b500      	push	{lr}
   2353a:	b085      	sub	sp, #20
   2353c:	9001      	str	r0, [sp, #4]
   2353e:	9100      	str	r1, [sp, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   23540:	f7ff fa54 	bl	229ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   23544:	ab02      	add	r3, sp, #8
   23546:	4618      	mov	r0, r3
   23548:	f000 f860 	bl	2360c <prvSampleTimeNow>
   2354c:	9003      	str	r0, [sp, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   2354e:	9b02      	ldr	r3, [sp, #8]
   23550:	2b00      	cmp	r3, #0
   23552:	d130      	bne.n	235b6 <prvProcessTimerOrBlockTask+0x7e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   23554:	9b00      	ldr	r3, [sp, #0]
   23556:	2b00      	cmp	r3, #0
   23558:	d10a      	bne.n	23570 <prvProcessTimerOrBlockTask+0x38>
   2355a:	9a01      	ldr	r2, [sp, #4]
   2355c:	9b03      	ldr	r3, [sp, #12]
   2355e:	429a      	cmp	r2, r3
   23560:	d806      	bhi.n	23570 <prvProcessTimerOrBlockTask+0x38>
			{
				( void ) xTaskResumeAll();
   23562:	f7ff fa7f 	bl	22a64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   23566:	9903      	ldr	r1, [sp, #12]
   23568:	9801      	ldr	r0, [sp, #4]
   2356a:	f7ff ff9f 	bl	234ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   2356e:	e024      	b.n	235ba <prvProcessTimerOrBlockTask+0x82>
				if( xListWasEmpty != pdFALSE )
   23570:	9b00      	ldr	r3, [sp, #0]
   23572:	2b00      	cmp	r3, #0
   23574:	d008      	beq.n	23588 <prvProcessTimerOrBlockTask+0x50>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   23576:	4b13      	ldr	r3, [pc, #76]	; (235c4 <prvProcessTimerOrBlockTask+0x8c>)
   23578:	681b      	ldr	r3, [r3, #0]
   2357a:	681b      	ldr	r3, [r3, #0]
   2357c:	2b00      	cmp	r3, #0
   2357e:	d101      	bne.n	23584 <prvProcessTimerOrBlockTask+0x4c>
   23580:	2301      	movs	r3, #1
   23582:	e000      	b.n	23586 <prvProcessTimerOrBlockTask+0x4e>
   23584:	2300      	movs	r3, #0
   23586:	9300      	str	r3, [sp, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   23588:	4b0f      	ldr	r3, [pc, #60]	; (235c8 <prvProcessTimerOrBlockTask+0x90>)
   2358a:	6818      	ldr	r0, [r3, #0]
   2358c:	9a01      	ldr	r2, [sp, #4]
   2358e:	9b03      	ldr	r3, [sp, #12]
   23590:	1ad3      	subs	r3, r2, r3
   23592:	9a00      	ldr	r2, [sp, #0]
   23594:	4619      	mov	r1, r3
   23596:	f7ff f820 	bl	225da <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   2359a:	f7ff fa63 	bl	22a64 <xTaskResumeAll>
   2359e:	4603      	mov	r3, r0
   235a0:	2b00      	cmp	r3, #0
   235a2:	d10a      	bne.n	235ba <prvProcessTimerOrBlockTask+0x82>
					portYIELD_WITHIN_API();
   235a4:	4b09      	ldr	r3, [pc, #36]	; (235cc <prvProcessTimerOrBlockTask+0x94>)
   235a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   235aa:	601a      	str	r2, [r3, #0]
   235ac:	f3bf 8f4f 	dsb	sy
   235b0:	f3bf 8f6f 	isb	sy
}
   235b4:	e001      	b.n	235ba <prvProcessTimerOrBlockTask+0x82>
			( void ) xTaskResumeAll();
   235b6:	f7ff fa55 	bl	22a64 <xTaskResumeAll>
}
   235ba:	bf00      	nop
   235bc:	b005      	add	sp, #20
   235be:	f85d fb04 	ldr.w	pc, [sp], #4
   235c2:	bf00      	nop
   235c4:	100078fc 	.word	0x100078fc
   235c8:	10007900 	.word	0x10007900
   235cc:	e000ed04 	.word	0xe000ed04

000235d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   235d0:	b084      	sub	sp, #16
   235d2:	9001      	str	r0, [sp, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   235d4:	4b0c      	ldr	r3, [pc, #48]	; (23608 <prvGetNextExpireTime+0x38>)
   235d6:	681b      	ldr	r3, [r3, #0]
   235d8:	681b      	ldr	r3, [r3, #0]
   235da:	2b00      	cmp	r3, #0
   235dc:	d101      	bne.n	235e2 <prvGetNextExpireTime+0x12>
   235de:	2201      	movs	r2, #1
   235e0:	e000      	b.n	235e4 <prvGetNextExpireTime+0x14>
   235e2:	2200      	movs	r2, #0
   235e4:	9b01      	ldr	r3, [sp, #4]
   235e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   235e8:	9b01      	ldr	r3, [sp, #4]
   235ea:	681b      	ldr	r3, [r3, #0]
   235ec:	2b00      	cmp	r3, #0
   235ee:	d105      	bne.n	235fc <prvGetNextExpireTime+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   235f0:	4b05      	ldr	r3, [pc, #20]	; (23608 <prvGetNextExpireTime+0x38>)
   235f2:	681b      	ldr	r3, [r3, #0]
   235f4:	68db      	ldr	r3, [r3, #12]
   235f6:	681b      	ldr	r3, [r3, #0]
   235f8:	9303      	str	r3, [sp, #12]
   235fa:	e001      	b.n	23600 <prvGetNextExpireTime+0x30>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   235fc:	2300      	movs	r3, #0
   235fe:	9303      	str	r3, [sp, #12]
	}

	return xNextExpireTime;
   23600:	9b03      	ldr	r3, [sp, #12]
}
   23602:	4618      	mov	r0, r3
   23604:	b004      	add	sp, #16
   23606:	4770      	bx	lr
   23608:	100078f8 	.word	0x100078f8

0002360c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   2360c:	b500      	push	{lr}
   2360e:	b085      	sub	sp, #20
   23610:	9001      	str	r0, [sp, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   23612:	f7ff fab9 	bl	22b88 <xTaskGetTickCount>
   23616:	9003      	str	r0, [sp, #12]

	if( xTimeNow < xLastTime )
   23618:	4b0a      	ldr	r3, [pc, #40]	; (23644 <prvSampleTimeNow+0x38>)
   2361a:	681b      	ldr	r3, [r3, #0]
   2361c:	9a03      	ldr	r2, [sp, #12]
   2361e:	429a      	cmp	r2, r3
   23620:	d205      	bcs.n	2362e <prvSampleTimeNow+0x22>
	{
		prvSwitchTimerLists();
   23622:	f000 f8e3 	bl	237ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   23626:	9b01      	ldr	r3, [sp, #4]
   23628:	2201      	movs	r2, #1
   2362a:	601a      	str	r2, [r3, #0]
   2362c:	e002      	b.n	23634 <prvSampleTimeNow+0x28>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   2362e:	9b01      	ldr	r3, [sp, #4]
   23630:	2200      	movs	r2, #0
   23632:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   23634:	4a03      	ldr	r2, [pc, #12]	; (23644 <prvSampleTimeNow+0x38>)
   23636:	9b03      	ldr	r3, [sp, #12]
   23638:	6013      	str	r3, [r2, #0]

	return xTimeNow;
   2363a:	9b03      	ldr	r3, [sp, #12]
}
   2363c:	4618      	mov	r0, r3
   2363e:	b005      	add	sp, #20
   23640:	f85d fb04 	ldr.w	pc, [sp], #4
   23644:	10007908 	.word	0x10007908

00023648 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   23648:	b500      	push	{lr}
   2364a:	b087      	sub	sp, #28
   2364c:	9003      	str	r0, [sp, #12]
   2364e:	9102      	str	r1, [sp, #8]
   23650:	9201      	str	r2, [sp, #4]
   23652:	9300      	str	r3, [sp, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   23654:	2300      	movs	r3, #0
   23656:	9305      	str	r3, [sp, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   23658:	9b03      	ldr	r3, [sp, #12]
   2365a:	9a02      	ldr	r2, [sp, #8]
   2365c:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   2365e:	9b03      	ldr	r3, [sp, #12]
   23660:	9a03      	ldr	r2, [sp, #12]
   23662:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   23664:	9a02      	ldr	r2, [sp, #8]
   23666:	9b01      	ldr	r3, [sp, #4]
   23668:	429a      	cmp	r2, r3
   2366a:	d812      	bhi.n	23692 <prvInsertTimerInActiveList+0x4a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2366c:	9a01      	ldr	r2, [sp, #4]
   2366e:	9b00      	ldr	r3, [sp, #0]
   23670:	1ad2      	subs	r2, r2, r3
   23672:	9b03      	ldr	r3, [sp, #12]
   23674:	699b      	ldr	r3, [r3, #24]
   23676:	429a      	cmp	r2, r3
   23678:	d302      	bcc.n	23680 <prvInsertTimerInActiveList+0x38>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   2367a:	2301      	movs	r3, #1
   2367c:	9305      	str	r3, [sp, #20]
   2367e:	e01b      	b.n	236b8 <prvInsertTimerInActiveList+0x70>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   23680:	4b10      	ldr	r3, [pc, #64]	; (236c4 <prvInsertTimerInActiveList+0x7c>)
   23682:	681a      	ldr	r2, [r3, #0]
   23684:	9b03      	ldr	r3, [sp, #12]
   23686:	3304      	adds	r3, #4
   23688:	4619      	mov	r1, r3
   2368a:	4610      	mov	r0, r2
   2368c:	f7fe fb8d 	bl	21daa <vListInsert>
   23690:	e012      	b.n	236b8 <prvInsertTimerInActiveList+0x70>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   23692:	9a01      	ldr	r2, [sp, #4]
   23694:	9b00      	ldr	r3, [sp, #0]
   23696:	429a      	cmp	r2, r3
   23698:	d206      	bcs.n	236a8 <prvInsertTimerInActiveList+0x60>
   2369a:	9a02      	ldr	r2, [sp, #8]
   2369c:	9b00      	ldr	r3, [sp, #0]
   2369e:	429a      	cmp	r2, r3
   236a0:	d302      	bcc.n	236a8 <prvInsertTimerInActiveList+0x60>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   236a2:	2301      	movs	r3, #1
   236a4:	9305      	str	r3, [sp, #20]
   236a6:	e007      	b.n	236b8 <prvInsertTimerInActiveList+0x70>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   236a8:	4b07      	ldr	r3, [pc, #28]	; (236c8 <prvInsertTimerInActiveList+0x80>)
   236aa:	681a      	ldr	r2, [r3, #0]
   236ac:	9b03      	ldr	r3, [sp, #12]
   236ae:	3304      	adds	r3, #4
   236b0:	4619      	mov	r1, r3
   236b2:	4610      	mov	r0, r2
   236b4:	f7fe fb79 	bl	21daa <vListInsert>
		}
	}

	return xProcessTimerNow;
   236b8:	9b05      	ldr	r3, [sp, #20]
}
   236ba:	4618      	mov	r0, r3
   236bc:	b007      	add	sp, #28
   236be:	f85d fb04 	ldr.w	pc, [sp], #4
   236c2:	bf00      	nop
   236c4:	100078fc 	.word	0x100078fc
   236c8:	100078f8 	.word	0x100078f8

000236cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   236cc:	b500      	push	{lr}
   236ce:	b08d      	sub	sp, #52	; 0x34
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   236d0:	e079      	b.n	237c6 <prvProcessReceivedCommands+0xfa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   236d2:	9b04      	ldr	r3, [sp, #16]
   236d4:	2b00      	cmp	r3, #0
   236d6:	da0e      	bge.n	236f6 <prvProcessReceivedCommands+0x2a>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   236d8:	ab04      	add	r3, sp, #16
   236da:	3304      	adds	r3, #4
   236dc:	930b      	str	r3, [sp, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   236de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   236e0:	2b00      	cmp	r3, #0
   236e2:	d100      	bne.n	236e6 <prvProcessReceivedCommands+0x1a>
   236e4:	e7fe      	b.n	236e4 <prvProcessReceivedCommands+0x18>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   236e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   236e8:	681b      	ldr	r3, [r3, #0]
   236ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   236ec:	6850      	ldr	r0, [r2, #4]
   236ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   236f0:	6892      	ldr	r2, [r2, #8]
   236f2:	4611      	mov	r1, r2
   236f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   236f6:	9b04      	ldr	r3, [sp, #16]
   236f8:	2b00      	cmp	r3, #0
   236fa:	db63      	blt.n	237c4 <prvProcessReceivedCommands+0xf8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   236fc:	9b06      	ldr	r3, [sp, #24]
   236fe:	930a      	str	r3, [sp, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   23700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23702:	695b      	ldr	r3, [r3, #20]
   23704:	2b00      	cmp	r3, #0
   23706:	d004      	beq.n	23712 <prvProcessReceivedCommands+0x46>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   23708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2370a:	3304      	adds	r3, #4
   2370c:	4618      	mov	r0, r3
   2370e:	f7fe fb80 	bl	21e12 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   23712:	ab03      	add	r3, sp, #12
   23714:	4618      	mov	r0, r3
   23716:	f7ff ff79 	bl	2360c <prvSampleTimeNow>
   2371a:	9009      	str	r0, [sp, #36]	; 0x24

			switch( xMessage.xMessageID )
   2371c:	9b04      	ldr	r3, [sp, #16]
   2371e:	2b09      	cmp	r3, #9
   23720:	d851      	bhi.n	237c6 <prvProcessReceivedCommands+0xfa>
   23722:	a201      	add	r2, pc, #4	; (adr r2, 23728 <prvProcessReceivedCommands+0x5c>)
   23724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23728:	00023751 	.word	0x00023751
   2372c:	00023751 	.word	0x00023751
   23730:	00023751 	.word	0x00023751
   23734:	000237c7 	.word	0x000237c7
   23738:	00023799 	.word	0x00023799
   2373c:	000237bd 	.word	0x000237bd
   23740:	00023751 	.word	0x00023751
   23744:	00023751 	.word	0x00023751
   23748:	000237c7 	.word	0x000237c7
   2374c:	00023799 	.word	0x00023799
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   23750:	9a05      	ldr	r2, [sp, #20]
   23752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23754:	699b      	ldr	r3, [r3, #24]
   23756:	18d1      	adds	r1, r2, r3
   23758:	9b05      	ldr	r3, [sp, #20]
   2375a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2375c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2375e:	f7ff ff73 	bl	23648 <prvInsertTimerInActiveList>
   23762:	4603      	mov	r3, r0
   23764:	2b00      	cmp	r3, #0
   23766:	d02e      	beq.n	237c6 <prvProcessReceivedCommands+0xfa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   23768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2376c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2376e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   23770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23772:	69db      	ldr	r3, [r3, #28]
   23774:	2b01      	cmp	r3, #1
   23776:	d126      	bne.n	237c6 <prvProcessReceivedCommands+0xfa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   23778:	9a05      	ldr	r2, [sp, #20]
   2377a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2377c:	699b      	ldr	r3, [r3, #24]
   2377e:	441a      	add	r2, r3
   23780:	2300      	movs	r3, #0
   23782:	9300      	str	r3, [sp, #0]
   23784:	2300      	movs	r3, #0
   23786:	2100      	movs	r1, #0
   23788:	980a      	ldr	r0, [sp, #40]	; 0x28
   2378a:	f7ff fe4f 	bl	2342c <xTimerGenericCommand>
   2378e:	9008      	str	r0, [sp, #32]
							configASSERT( xResult );
   23790:	9b08      	ldr	r3, [sp, #32]
   23792:	2b00      	cmp	r3, #0
   23794:	d117      	bne.n	237c6 <prvProcessReceivedCommands+0xfa>
   23796:	e7fe      	b.n	23796 <prvProcessReceivedCommands+0xca>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   23798:	9a05      	ldr	r2, [sp, #20]
   2379a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2379c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   2379e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   237a0:	699b      	ldr	r3, [r3, #24]
   237a2:	2b00      	cmp	r3, #0
   237a4:	d100      	bne.n	237a8 <prvProcessReceivedCommands+0xdc>
   237a6:	e7fe      	b.n	237a6 <prvProcessReceivedCommands+0xda>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   237a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   237aa:	699a      	ldr	r2, [r3, #24]
   237ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   237ae:	18d1      	adds	r1, r2, r3
   237b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   237b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   237b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   237b6:	f7ff ff47 	bl	23648 <prvInsertTimerInActiveList>
					break;
   237ba:	e004      	b.n	237c6 <prvProcessReceivedCommands+0xfa>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   237bc:	980a      	ldr	r0, [sp, #40]	; 0x28
   237be:	f7fe f83d 	bl	2183c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   237c2:	e000      	b.n	237c6 <prvProcessReceivedCommands+0xfa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
   237c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   237c6:	4b08      	ldr	r3, [pc, #32]	; (237e8 <prvProcessReceivedCommands+0x11c>)
   237c8:	681b      	ldr	r3, [r3, #0]
   237ca:	a904      	add	r1, sp, #16
   237cc:	2200      	movs	r2, #0
   237ce:	4618      	mov	r0, r3
   237d0:	f7fe fd42 	bl	22258 <xQueueReceive>
   237d4:	4603      	mov	r3, r0
   237d6:	2b00      	cmp	r3, #0
   237d8:	f47f af7b 	bne.w	236d2 <prvProcessReceivedCommands+0x6>
	}
}
   237dc:	bf00      	nop
   237de:	bf00      	nop
   237e0:	b00d      	add	sp, #52	; 0x34
   237e2:	f85d fb04 	ldr.w	pc, [sp], #4
   237e6:	bf00      	nop
   237e8:	10007900 	.word	0x10007900

000237ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   237ec:	b500      	push	{lr}
   237ee:	b089      	sub	sp, #36	; 0x24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   237f0:	e03b      	b.n	2386a <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   237f2:	4b27      	ldr	r3, [pc, #156]	; (23890 <prvSwitchTimerLists+0xa4>)
   237f4:	681b      	ldr	r3, [r3, #0]
   237f6:	68db      	ldr	r3, [r3, #12]
   237f8:	681b      	ldr	r3, [r3, #0]
   237fa:	9306      	str	r3, [sp, #24]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   237fc:	4b24      	ldr	r3, [pc, #144]	; (23890 <prvSwitchTimerLists+0xa4>)
   237fe:	681b      	ldr	r3, [r3, #0]
   23800:	68db      	ldr	r3, [r3, #12]
   23802:	68db      	ldr	r3, [r3, #12]
   23804:	9305      	str	r3, [sp, #20]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   23806:	9b05      	ldr	r3, [sp, #20]
   23808:	3304      	adds	r3, #4
   2380a:	4618      	mov	r0, r3
   2380c:	f7fe fb01 	bl	21e12 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   23810:	9b05      	ldr	r3, [sp, #20]
   23812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   23814:	9805      	ldr	r0, [sp, #20]
   23816:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   23818:	9b05      	ldr	r3, [sp, #20]
   2381a:	69db      	ldr	r3, [r3, #28]
   2381c:	2b01      	cmp	r3, #1
   2381e:	d124      	bne.n	2386a <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   23820:	9b05      	ldr	r3, [sp, #20]
   23822:	699b      	ldr	r3, [r3, #24]
   23824:	9a06      	ldr	r2, [sp, #24]
   23826:	4413      	add	r3, r2
   23828:	9304      	str	r3, [sp, #16]
			if( xReloadTime > xNextExpireTime )
   2382a:	9a04      	ldr	r2, [sp, #16]
   2382c:	9b06      	ldr	r3, [sp, #24]
   2382e:	429a      	cmp	r2, r3
   23830:	d90e      	bls.n	23850 <prvSwitchTimerLists+0x64>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   23832:	9b05      	ldr	r3, [sp, #20]
   23834:	9a04      	ldr	r2, [sp, #16]
   23836:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   23838:	9b05      	ldr	r3, [sp, #20]
   2383a:	9a05      	ldr	r2, [sp, #20]
   2383c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   2383e:	4b14      	ldr	r3, [pc, #80]	; (23890 <prvSwitchTimerLists+0xa4>)
   23840:	681a      	ldr	r2, [r3, #0]
   23842:	9b05      	ldr	r3, [sp, #20]
   23844:	3304      	adds	r3, #4
   23846:	4619      	mov	r1, r3
   23848:	4610      	mov	r0, r2
   2384a:	f7fe faae 	bl	21daa <vListInsert>
   2384e:	e00c      	b.n	2386a <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   23850:	2300      	movs	r3, #0
   23852:	9300      	str	r3, [sp, #0]
   23854:	2300      	movs	r3, #0
   23856:	9a06      	ldr	r2, [sp, #24]
   23858:	2100      	movs	r1, #0
   2385a:	9805      	ldr	r0, [sp, #20]
   2385c:	f7ff fde6 	bl	2342c <xTimerGenericCommand>
   23860:	9003      	str	r0, [sp, #12]
				configASSERT( xResult );
   23862:	9b03      	ldr	r3, [sp, #12]
   23864:	2b00      	cmp	r3, #0
   23866:	d100      	bne.n	2386a <prvSwitchTimerLists+0x7e>
   23868:	e7fe      	b.n	23868 <prvSwitchTimerLists+0x7c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   2386a:	4b09      	ldr	r3, [pc, #36]	; (23890 <prvSwitchTimerLists+0xa4>)
   2386c:	681b      	ldr	r3, [r3, #0]
   2386e:	681b      	ldr	r3, [r3, #0]
   23870:	2b00      	cmp	r3, #0
   23872:	d1be      	bne.n	237f2 <prvSwitchTimerLists+0x6>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   23874:	4b06      	ldr	r3, [pc, #24]	; (23890 <prvSwitchTimerLists+0xa4>)
   23876:	681b      	ldr	r3, [r3, #0]
   23878:	9307      	str	r3, [sp, #28]
	pxCurrentTimerList = pxOverflowTimerList;
   2387a:	4b06      	ldr	r3, [pc, #24]	; (23894 <prvSwitchTimerLists+0xa8>)
   2387c:	681b      	ldr	r3, [r3, #0]
   2387e:	4a04      	ldr	r2, [pc, #16]	; (23890 <prvSwitchTimerLists+0xa4>)
   23880:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
   23882:	4a04      	ldr	r2, [pc, #16]	; (23894 <prvSwitchTimerLists+0xa8>)
   23884:	9b07      	ldr	r3, [sp, #28]
   23886:	6013      	str	r3, [r2, #0]
}
   23888:	bf00      	nop
   2388a:	b009      	add	sp, #36	; 0x24
   2388c:	f85d fb04 	ldr.w	pc, [sp], #4
   23890:	100078f8 	.word	0x100078f8
   23894:	100078fc 	.word	0x100078fc

00023898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   23898:	b508      	push	{r3, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   2389a:	f7f8 fe71 	bl	1c580 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
   2389e:	4b0e      	ldr	r3, [pc, #56]	; (238d8 <prvCheckForValidListAndQueue+0x40>)
   238a0:	681b      	ldr	r3, [r3, #0]
   238a2:	2b00      	cmp	r3, #0
   238a4:	d113      	bne.n	238ce <prvCheckForValidListAndQueue+0x36>
		{
			vListInitialise( &xActiveTimerList1 );
   238a6:	480d      	ldr	r0, [pc, #52]	; (238dc <prvCheckForValidListAndQueue+0x44>)
   238a8:	f7fe fa3d 	bl	21d26 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   238ac:	480c      	ldr	r0, [pc, #48]	; (238e0 <prvCheckForValidListAndQueue+0x48>)
   238ae:	f7fe fa3a 	bl	21d26 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   238b2:	4b0c      	ldr	r3, [pc, #48]	; (238e4 <prvCheckForValidListAndQueue+0x4c>)
   238b4:	4a09      	ldr	r2, [pc, #36]	; (238dc <prvCheckForValidListAndQueue+0x44>)
   238b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   238b8:	4b0b      	ldr	r3, [pc, #44]	; (238e8 <prvCheckForValidListAndQueue+0x50>)
   238ba:	4a09      	ldr	r2, [pc, #36]	; (238e0 <prvCheckForValidListAndQueue+0x48>)
   238bc:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   238be:	2200      	movs	r2, #0
   238c0:	2110      	movs	r1, #16
   238c2:	2005      	movs	r0, #5
   238c4:	f7fe fb28 	bl	21f18 <xQueueGenericCreate>
   238c8:	4603      	mov	r3, r0
   238ca:	4a03      	ldr	r2, [pc, #12]	; (238d8 <prvCheckForValidListAndQueue+0x40>)
   238cc:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   238ce:	f7f8 fe79 	bl	1c5c4 <vPortExitCritical>
}
   238d2:	bf00      	nop
   238d4:	bd08      	pop	{r3, pc}
   238d6:	bf00      	nop
   238d8:	10007900 	.word	0x10007900
   238dc:	100078d0 	.word	0x100078d0
   238e0:	100078e4 	.word	0x100078e4
   238e4:	100078f8 	.word	0x100078f8
   238e8:	100078fc 	.word	0x100078fc

000238ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   238ec:	b500      	push	{lr}
   238ee:	b08b      	sub	sp, #44	; 0x2c
   238f0:	9003      	str	r0, [sp, #12]
   238f2:	9102      	str	r1, [sp, #8]
   238f4:	9201      	str	r2, [sp, #4]
   238f6:	9300      	str	r3, [sp, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   238f8:	f06f 0301 	mvn.w	r3, #1
   238fc:	9305      	str	r3, [sp, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   238fe:	9b03      	ldr	r3, [sp, #12]
   23900:	9306      	str	r3, [sp, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   23902:	9b02      	ldr	r3, [sp, #8]
   23904:	9307      	str	r3, [sp, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   23906:	9b01      	ldr	r3, [sp, #4]
   23908:	9308      	str	r3, [sp, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   2390a:	4b06      	ldr	r3, [pc, #24]	; (23924 <xTimerPendFunctionCallFromISR+0x38>)
   2390c:	6818      	ldr	r0, [r3, #0]
   2390e:	a905      	add	r1, sp, #20
   23910:	2300      	movs	r3, #0
   23912:	9a00      	ldr	r2, [sp, #0]
   23914:	f7fe fc26 	bl	22164 <xQueueGenericSendFromISR>
   23918:	9009      	str	r0, [sp, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
   2391a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	}
   2391c:	4618      	mov	r0, r3
   2391e:	b00b      	add	sp, #44	; 0x2c
   23920:	f85d fb04 	ldr.w	pc, [sp], #4
   23924:	10007900 	.word	0x10007900

00023928 <SvcBattAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcBattAddGroup(void)
{
   23928:	b508      	push	{r3, lr}
  AttsAddGroup(&svcBattGroup);
   2392a:	4802      	ldr	r0, [pc, #8]	; (23934 <SvcBattAddGroup+0xc>)
   2392c:	f7f6 fc22 	bl	1a174 <AttsAddGroup>
}
   23930:	bf00      	nop
   23932:	bd08      	pop	{r3, pc}
   23934:	10002bc8 	.word	0x10002bc8

00023938 <SvcBattCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcBattCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   23938:	b082      	sub	sp, #8
   2393a:	9001      	str	r0, [sp, #4]
   2393c:	9100      	str	r1, [sp, #0]
  svcBattGroup.readCback = readCback;
   2393e:	4a04      	ldr	r2, [pc, #16]	; (23950 <SvcBattCbackRegister+0x18>)
   23940:	9b01      	ldr	r3, [sp, #4]
   23942:	6093      	str	r3, [r2, #8]
  svcBattGroup.writeCback = writeCback;
   23944:	4a02      	ldr	r2, [pc, #8]	; (23950 <SvcBattCbackRegister+0x18>)
   23946:	9b00      	ldr	r3, [sp, #0]
   23948:	60d3      	str	r3, [r2, #12]
}
   2394a:	bf00      	nop
   2394c:	b002      	add	sp, #8
   2394e:	4770      	bx	lr
   23950:	10002bc8 	.word	0x10002bc8

00023954 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   23954:	b508      	push	{r3, lr}
  AttsAddGroup(&svcGapGroup);
   23956:	4804      	ldr	r0, [pc, #16]	; (23968 <SvcCoreAddGroup+0x14>)
   23958:	f7f6 fc0c 	bl	1a174 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   2395c:	4803      	ldr	r0, [pc, #12]	; (2396c <SvcCoreAddGroup+0x18>)
   2395e:	f7f6 fc09 	bl	1a174 <AttsAddGroup>
}
   23962:	bf00      	nop
   23964:	bd08      	pop	{r3, pc}
   23966:	bf00      	nop
   23968:	10002bdc 	.word	0x10002bdc
   2396c:	10002bf0 	.word	0x10002bf0

00023970 <SvcCoreGattCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGattCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   23970:	b082      	sub	sp, #8
   23972:	9001      	str	r0, [sp, #4]
   23974:	9100      	str	r1, [sp, #0]
  svcGattGroup.readCback = readCback;
   23976:	4a04      	ldr	r2, [pc, #16]	; (23988 <SvcCoreGattCbackRegister+0x18>)
   23978:	9b01      	ldr	r3, [sp, #4]
   2397a:	6093      	str	r3, [r2, #8]
  svcGattGroup.writeCback = writeCback;
   2397c:	4a02      	ldr	r2, [pc, #8]	; (23988 <SvcCoreGattCbackRegister+0x18>)
   2397e:	9b00      	ldr	r3, [sp, #0]
   23980:	60d3      	str	r3, [r2, #12]
}
   23982:	bf00      	nop
   23984:	b002      	add	sp, #8
   23986:	4770      	bx	lr
   23988:	10002bf0 	.word	0x10002bf0

0002398c <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   2398c:	b082      	sub	sp, #8
   2398e:	4603      	mov	r3, r0
   23990:	f88d 3007 	strb.w	r3, [sp, #7]
  gapValCar[0] = value;
   23994:	4a03      	ldr	r2, [pc, #12]	; (239a4 <SvcCoreGapCentAddrResUpdate+0x18>)
   23996:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2399a:	7013      	strb	r3, [r2, #0]
}
   2399c:	bf00      	nop
   2399e:	b002      	add	sp, #8
   239a0:	4770      	bx	lr
   239a2:	bf00      	nop
   239a4:	10007918 	.word	0x10007918

000239a8 <SvcDisAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcDisAddGroup(void)
{
   239a8:	b508      	push	{r3, lr}
  AttsAddGroup(&svcDisGroup);
   239aa:	4802      	ldr	r0, [pc, #8]	; (239b4 <SvcDisAddGroup+0xc>)
   239ac:	f7f6 fbe2 	bl	1a174 <AttsAddGroup>
}
   239b0:	bf00      	nop
   239b2:	bd08      	pop	{r3, pc}
   239b4:	10002c90 	.word	0x10002c90

000239b8 <SvcHrsAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcHrsAddGroup(void)
{
   239b8:	b508      	push	{r3, lr}
  AttsAddGroup(&svcHrsGroup);
   239ba:	4802      	ldr	r0, [pc, #8]	; (239c4 <SvcHrsAddGroup+0xc>)
   239bc:	f7f6 fbda 	bl	1a174 <AttsAddGroup>
}
   239c0:	bf00      	nop
   239c2:	bd08      	pop	{r3, pc}
   239c4:	10002ca8 	.word	0x10002ca8

000239c8 <SvcHrsCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcHrsCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   239c8:	b082      	sub	sp, #8
   239ca:	9001      	str	r0, [sp, #4]
   239cc:	9100      	str	r1, [sp, #0]
  svcHrsGroup.readCback = readCback;
   239ce:	4a04      	ldr	r2, [pc, #16]	; (239e0 <SvcHrsCbackRegister+0x18>)
   239d0:	9b01      	ldr	r3, [sp, #4]
   239d2:	6093      	str	r3, [r2, #8]
  svcHrsGroup.writeCback = writeCback;
   239d4:	4a02      	ldr	r2, [pc, #8]	; (239e0 <SvcHrsCbackRegister+0x18>)
   239d6:	9b00      	ldr	r3, [sp, #0]
   239d8:	60d3      	str	r3, [r2, #12]
}
   239da:	bf00      	nop
   239dc:	b002      	add	sp, #8
   239de:	4770      	bx	lr
   239e0:	10002ca8 	.word	0x10002ca8

000239e4 <SvcRscsAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcRscsAddGroup(void)
{
   239e4:	b508      	push	{r3, lr}
  AttsAddGroup(&svcRscsGroup);
   239e6:	4802      	ldr	r0, [pc, #8]	; (239f0 <SvcRscsAddGroup+0xc>)
   239e8:	f7f6 fbc4 	bl	1a174 <AttsAddGroup>
}
   239ec:	bf00      	nop
   239ee:	bd08      	pop	{r3, pc}
   239f0:	10002cc0 	.word	0x10002cc0

000239f4 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   239f4:	b500      	push	{lr}
   239f6:	b083      	sub	sp, #12
   239f8:	9001      	str	r0, [sp, #4]
  switch(pMsg->event)
   239fa:	9b01      	ldr	r3, [sp, #4]
   239fc:	789b      	ldrb	r3, [r3, #2]
   239fe:	2b00      	cmp	r3, #0
   23a00:	d002      	beq.n	23a08 <appProcMsg+0x14>
   23a02:	2b01      	cmp	r3, #1
   23a04:	d003      	beq.n	23a0e <appProcMsg+0x1a>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;

    default:
      break;
   23a06:	e006      	b.n	23a16 <appProcMsg+0x22>
      appUiBtnPoll();
   23a08:	f7e9 f8c6 	bl	cb98 <appUiBtnPoll>
      break;
   23a0c:	e003      	b.n	23a16 <appProcMsg+0x22>
      appUiTimerExpired(pMsg);
   23a0e:	9801      	ldr	r0, [sp, #4]
   23a10:	f7e9 f8bc 	bl	cb8c <appUiTimerExpired>
      break;
   23a14:	bf00      	nop
  }
}
   23a16:	bf00      	nop
   23a18:	b003      	add	sp, #12
   23a1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00023a20 <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   23a20:	b500      	push	{lr}
   23a22:	b085      	sub	sp, #20
   23a24:	4603      	mov	r3, r0
   23a26:	f88d 3007 	strb.w	r3, [sp, #7]
  appConnCb_t   *pCcb = appConnCb;
   23a2a:	4b17      	ldr	r3, [pc, #92]	; (23a88 <appNumConns+0x68>)
   23a2c:	9303      	str	r3, [sp, #12]
  uint8_t       i, j;

  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   23a2e:	2303      	movs	r3, #3
   23a30:	f88d 300b 	strb.w	r3, [sp, #11]
   23a34:	2300      	movs	r3, #0
   23a36:	f88d 300a 	strb.w	r3, [sp, #10]
   23a3a:	e01b      	b.n	23a74 <appNumConns+0x54>
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   23a3c:	9b03      	ldr	r3, [sp, #12]
   23a3e:	791b      	ldrb	r3, [r3, #4]
   23a40:	2b00      	cmp	r3, #0
   23a42:	d00f      	beq.n	23a64 <appNumConns+0x44>
   23a44:	9b03      	ldr	r3, [sp, #12]
   23a46:	791b      	ldrb	r3, [r3, #4]
   23a48:	4618      	mov	r0, r3
   23a4a:	f7f2 f841 	bl	15ad0 <DmConnRole>
   23a4e:	4603      	mov	r3, r0
   23a50:	461a      	mov	r2, r3
   23a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23a56:	4293      	cmp	r3, r2
   23a58:	d104      	bne.n	23a64 <appNumConns+0x44>
    {
      j++;
   23a5a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   23a5e:	3301      	adds	r3, #1
   23a60:	f88d 300a 	strb.w	r3, [sp, #10]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   23a64:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23a68:	3b01      	subs	r3, #1
   23a6a:	f88d 300b 	strb.w	r3, [sp, #11]
   23a6e:	9b03      	ldr	r3, [sp, #12]
   23a70:	3320      	adds	r3, #32
   23a72:	9303      	str	r3, [sp, #12]
   23a74:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23a78:	2b00      	cmp	r3, #0
   23a7a:	d1df      	bne.n	23a3c <appNumConns+0x1c>
    }
  }

  return j;
   23a7c:	f89d 300a 	ldrb.w	r3, [sp, #10]
}
   23a80:	4618      	mov	r0, r3
   23a82:	b005      	add	sp, #20
   23a84:	f85d fb04 	ldr.w	pc, [sp], #4
   23a88:	1000795c 	.word	0x1000795c

00023a8c <AppCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t AppCheckBonded(dmConnId_t connId)
{
   23a8c:	b082      	sub	sp, #8
   23a8e:	4603      	mov	r3, r0
   23a90:	f88d 3007 	strb.w	r3, [sp, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return appConnCb[connId - 1].bonded;
   23a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23a98:	3b01      	subs	r3, #1
   23a9a:	4a04      	ldr	r2, [pc, #16]	; (23aac <AppCheckBonded+0x20>)
   23a9c:	015b      	lsls	r3, r3, #5
   23a9e:	4413      	add	r3, r2
   23aa0:	3305      	adds	r3, #5
   23aa2:	781b      	ldrb	r3, [r3, #0]
}
   23aa4:	4618      	mov	r0, r3
   23aa6:	b002      	add	sp, #8
   23aa8:	4770      	bx	lr
   23aaa:	bf00      	nop
   23aac:	1000795c 	.word	0x1000795c

00023ab0 <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   23ab0:	b500      	push	{lr}
   23ab2:	b083      	sub	sp, #12
   23ab4:	4603      	mov	r3, r0
   23ab6:	f88d 3007 	strb.w	r3, [sp, #7]
  appHandlerId = handlerId;
   23aba:	4a05      	ldr	r2, [pc, #20]	; (23ad0 <AppHandlerInit+0x20>)
   23abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23ac0:	7013      	strb	r3, [r2, #0]

  AppDbInit();
   23ac2:	f7e8 fc9a 	bl	c3fa <AppDbInit>
}
   23ac6:	bf00      	nop
   23ac8:	b003      	add	sp, #12
   23aca:	f85d fb04 	ldr.w	pc, [sp], #4
   23ace:	bf00      	nop
   23ad0:	100079bc 	.word	0x100079bc

00023ad4 <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   23ad4:	b500      	push	{lr}
   23ad6:	b083      	sub	sp, #12
   23ad8:	4603      	mov	r3, r0
   23ada:	9100      	str	r1, [sp, #0]
   23adc:	f88d 3007 	strb.w	r3, [sp, #7]
  if (pMsg != NULL)
   23ae0:	9b00      	ldr	r3, [sp, #0]
   23ae2:	2b00      	cmp	r3, #0
   23ae4:	d015      	beq.n	23b12 <AppHandler+0x3e>
  {
    APP_TRACE_INFO1("App got evt %d", pMsg->event);

    if (pMsg->event >= APP_MASTER_MSG_START)
   23ae6:	9b00      	ldr	r3, [sp, #0]
   23ae8:	789b      	ldrb	r3, [r3, #2]
   23aea:	2b1f      	cmp	r3, #31
   23aec:	d904      	bls.n	23af8 <AppHandler+0x24>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);
   23aee:	4b0f      	ldr	r3, [pc, #60]	; (23b2c <AppHandler+0x58>)
   23af0:	685b      	ldr	r3, [r3, #4]
   23af2:	9800      	ldr	r0, [sp, #0]
   23af4:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   23af6:	e014      	b.n	23b22 <AppHandler+0x4e>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   23af8:	9b00      	ldr	r3, [sp, #0]
   23afa:	789b      	ldrb	r3, [r3, #2]
   23afc:	2b0f      	cmp	r3, #15
   23afe:	d904      	bls.n	23b0a <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);
   23b00:	4b0a      	ldr	r3, [pc, #40]	; (23b2c <AppHandler+0x58>)
   23b02:	681b      	ldr	r3, [r3, #0]
   23b04:	9800      	ldr	r0, [sp, #0]
   23b06:	4798      	blx	r3
}
   23b08:	e00b      	b.n	23b22 <AppHandler+0x4e>
      appProcMsg(pMsg);
   23b0a:	9800      	ldr	r0, [sp, #0]
   23b0c:	f7ff ff72 	bl	239f4 <appProcMsg>
}
   23b10:	e007      	b.n	23b22 <AppHandler+0x4e>
    if (event & APP_BTN_DOWN_EVT)
   23b12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23b16:	f003 0310 	and.w	r3, r3, #16
   23b1a:	2b00      	cmp	r3, #0
   23b1c:	d001      	beq.n	23b22 <AppHandler+0x4e>
      AppUiBtnPressed();
   23b1e:	f7e9 f847 	bl	cbb0 <AppUiBtnPressed>
}
   23b22:	bf00      	nop
   23b24:	b003      	add	sp, #12
   23b26:	f85d fb04 	ldr.w	pc, [sp], #4
   23b2a:	bf00      	nop
   23b2c:	100079c0 	.word	0x100079c0

00023b30 <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   23b30:	b500      	push	{lr}
   23b32:	b085      	sub	sp, #20
   23b34:	9001      	str	r0, [sp, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];

  if (pAuthReq->display)
   23b36:	9b01      	ldr	r3, [sp, #4]
   23b38:	795b      	ldrb	r3, [r3, #5]
   23b3a:	2b00      	cmp	r3, #0
   23b3c:	d029      	beq.n	23b92 <AppHandlePasskey+0x62>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   23b3e:	ab03      	add	r3, sp, #12
   23b40:	2104      	movs	r1, #4
   23b42:	4618      	mov	r0, r3
   23b44:	f7f3 fe1c 	bl	17780 <SecRand>
    passkey %= 1000000;
   23b48:	9a03      	ldr	r2, [sp, #12]
   23b4a:	4b15      	ldr	r3, [pc, #84]	; (23ba0 <AppHandlePasskey+0x70>)
   23b4c:	fba3 1302 	umull	r1, r3, r3, r2
   23b50:	0c9b      	lsrs	r3, r3, #18
   23b52:	4914      	ldr	r1, [pc, #80]	; (23ba4 <AppHandlePasskey+0x74>)
   23b54:	fb01 f303 	mul.w	r3, r1, r3
   23b58:	1ad3      	subs	r3, r2, r3
   23b5a:	9303      	str	r3, [sp, #12]

    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   23b5c:	9b03      	ldr	r3, [sp, #12]
   23b5e:	b2db      	uxtb	r3, r3
   23b60:	f88d 3008 	strb.w	r3, [sp, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   23b64:	9b03      	ldr	r3, [sp, #12]
   23b66:	0a1b      	lsrs	r3, r3, #8
   23b68:	b2db      	uxtb	r3, r3
   23b6a:	f88d 3009 	strb.w	r3, [sp, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   23b6e:	9b03      	ldr	r3, [sp, #12]
   23b70:	0c1b      	lsrs	r3, r3, #16
   23b72:	b2db      	uxtb	r3, r3
   23b74:	f88d 300a 	strb.w	r3, [sp, #10]

    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   23b78:	9b01      	ldr	r3, [sp, #4]
   23b7a:	881b      	ldrh	r3, [r3, #0]
   23b7c:	b2db      	uxtb	r3, r3
   23b7e:	aa02      	add	r2, sp, #8
   23b80:	2103      	movs	r1, #3
   23b82:	4618      	mov	r0, r3
   23b84:	f7f2 ff09 	bl	1699a <DmSecAuthRsp>

    /* display passkey */
    AppUiDisplayPasskey(passkey);
   23b88:	9b03      	ldr	r3, [sp, #12]
   23b8a:	4618      	mov	r0, r3
   23b8c:	f7e8 fff4 	bl	cb78 <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  }
}
   23b90:	e002      	b.n	23b98 <AppHandlePasskey+0x68>
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   23b92:	200e      	movs	r0, #14
   23b94:	f7e8 ff9c 	bl	cad0 <AppUiAction>
}
   23b98:	bf00      	nop
   23b9a:	b005      	add	sp, #20
   23b9c:	f85d fb04 	ldr.w	pc, [sp], #4
   23ba0:	431bde83 	.word	0x431bde83
   23ba4:	000f4240 	.word	0x000f4240

00023ba8 <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   23ba8:	b500      	push	{lr}
   23baa:	b085      	sub	sp, #20
   23bac:	9001      	str	r0, [sp, #4]
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   23bae:	9b01      	ldr	r3, [sp, #4]
   23bb0:	3304      	adds	r3, #4
   23bb2:	4618      	mov	r0, r3
   23bb4:	f7f2 ffd8 	bl	16b68 <DmSecGetCompareValue>
   23bb8:	9003      	str	r0, [sp, #12]

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   23bba:	9803      	ldr	r0, [sp, #12]
   23bbc:	f7e8 ffe1 	bl	cb82 <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   23bc0:	9b01      	ldr	r3, [sp, #4]
   23bc2:	881b      	ldrh	r3, [r3, #0]
   23bc4:	b2db      	uxtb	r3, r3
   23bc6:	2101      	movs	r1, #1
   23bc8:	4618      	mov	r0, r3
   23bca:	f7f2 ffa1 	bl	16b10 <DmSecCompareRsp>
}
   23bce:	bf00      	nop
   23bd0:	b005      	add	sp, #20
   23bd2:	f85d fb04 	ldr.w	pc, [sp], #4

00023bd6 <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   23bd6:	b500      	push	{lr}
   23bd8:	b083      	sub	sp, #12
   23bda:	4603      	mov	r3, r0
   23bdc:	f88d 3007 	strb.w	r3, [sp, #7]
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   23be0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23be4:	2213      	movs	r2, #19
   23be6:	4619      	mov	r1, r3
   23be8:	2003      	movs	r0, #3
   23bea:	f7f1 fcf3 	bl	155d4 <DmConnClose>
}
   23bee:	bf00      	nop
   23bf0:	b003      	add	sp, #12
   23bf2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00023bf8 <AppConnIsOpen>:
 *
 *  \return Connection ID of open connection or DM_CONN_ID_NONE if no open connections.
 */
/*************************************************************************************************/
dmConnId_t AppConnIsOpen(void)
{
   23bf8:	b082      	sub	sp, #8
  appConnCb_t   *pCcb = appConnCb;
   23bfa:	4b0e      	ldr	r3, [pc, #56]	; (23c34 <AppConnIsOpen+0x3c>)
   23bfc:	9301      	str	r3, [sp, #4]
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   23bfe:	2303      	movs	r3, #3
   23c00:	f88d 3003 	strb.w	r3, [sp, #3]
   23c04:	e00e      	b.n	23c24 <AppConnIsOpen+0x2c>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   23c06:	9b01      	ldr	r3, [sp, #4]
   23c08:	791b      	ldrb	r3, [r3, #4]
   23c0a:	2b00      	cmp	r3, #0
   23c0c:	d002      	beq.n	23c14 <AppConnIsOpen+0x1c>
    {
      return pCcb->connId;
   23c0e:	9b01      	ldr	r3, [sp, #4]
   23c10:	791b      	ldrb	r3, [r3, #4]
   23c12:	e00c      	b.n	23c2e <AppConnIsOpen+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   23c14:	f89d 3003 	ldrb.w	r3, [sp, #3]
   23c18:	3b01      	subs	r3, #1
   23c1a:	f88d 3003 	strb.w	r3, [sp, #3]
   23c1e:	9b01      	ldr	r3, [sp, #4]
   23c20:	3320      	adds	r3, #32
   23c22:	9301      	str	r3, [sp, #4]
   23c24:	f89d 3003 	ldrb.w	r3, [sp, #3]
   23c28:	2b00      	cmp	r3, #0
   23c2a:	d1ec      	bne.n	23c06 <AppConnIsOpen+0xe>
    }
  }

  return DM_CONN_ID_NONE;
   23c2c:	2300      	movs	r3, #0
}
   23c2e:	4618      	mov	r0, r3
   23c30:	b002      	add	sp, #8
   23c32:	4770      	bx	lr
   23c34:	1000795c 	.word	0x1000795c

00023c38 <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   23c38:	b082      	sub	sp, #8
   23c3a:	4603      	mov	r3, r0
   23c3c:	f88d 3007 	strb.w	r3, [sp, #7]
  return appConnCb[connId-1].dbHdl;
   23c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23c44:	3b01      	subs	r3, #1
   23c46:	4a03      	ldr	r2, [pc, #12]	; (23c54 <AppDbGetHdl+0x1c>)
   23c48:	015b      	lsls	r3, r3, #5
   23c4a:	4413      	add	r3, r2
   23c4c:	681b      	ldr	r3, [r3, #0]
}
   23c4e:	4618      	mov	r0, r3
   23c50:	b002      	add	sp, #8
   23c52:	4770      	bx	lr
   23c54:	1000795c 	.word	0x1000795c

00023c58 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   23c58:	b570      	push	{r4, r5, r6, lr}
   23c5a:	b086      	sub	sp, #24
   23c5c:	9003      	str	r0, [sp, #12]
   23c5e:	460b      	mov	r3, r1
   23c60:	f88d 300b 	strb.w	r3, [sp, #11]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   23c64:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23c68:	3b01      	subs	r3, #1
   23c6a:	4a15      	ldr	r2, [pc, #84]	; (23cc0 <AppAddDevToResList+0x68>)
   23c6c:	015b      	lsls	r3, r3, #5
   23c6e:	4413      	add	r3, r2
   23c70:	681b      	ldr	r3, [r3, #0]
   23c72:	9305      	str	r3, [sp, #20]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   23c74:	f7ea fc0e 	bl	e494 <HciLlPrivacySupported>
   23c78:	4603      	mov	r3, r0
   23c7a:	2b00      	cmp	r3, #0
   23c7c:	d01c      	beq.n	23cb8 <AppAddDevToResList+0x60>
   23c7e:	2200      	movs	r2, #0
   23c80:	2104      	movs	r1, #4
   23c82:	9805      	ldr	r0, [sp, #20]
   23c84:	f7e8 fd5c 	bl	c740 <AppDbGetKey>
   23c88:	9004      	str	r0, [sp, #16]
   23c8a:	9b04      	ldr	r3, [sp, #16]
   23c8c:	2b00      	cmp	r3, #0
   23c8e:	d013      	beq.n	23cb8 <AppAddDevToResList+0x60>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   23c90:	9b04      	ldr	r3, [sp, #16]
   23c92:	7d9c      	ldrb	r4, [r3, #22]
   23c94:	9b04      	ldr	r3, [sp, #16]
   23c96:	f103 0510 	add.w	r5, r3, #16
   23c9a:	9e04      	ldr	r6, [sp, #16]
   23c9c:	f7f2 fec6 	bl	16a2c <DmSecGetLocalIrk>
   23ca0:	4602      	mov	r2, r0
   23ca2:	9b03      	ldr	r3, [sp, #12]
   23ca4:	881b      	ldrh	r3, [r3, #0]
   23ca6:	9301      	str	r3, [sp, #4]
   23ca8:	2301      	movs	r3, #1
   23caa:	9300      	str	r3, [sp, #0]
   23cac:	4613      	mov	r3, r2
   23cae:	4632      	mov	r2, r6
   23cb0:	4629      	mov	r1, r5
   23cb2:	4620      	mov	r0, r4
   23cb4:	f7f2 fca2 	bl	165fc <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   23cb8:	bf00      	nop
   23cba:	b006      	add	sp, #24
   23cbc:	bd70      	pop	{r4, r5, r6, pc}
   23cbe:	bf00      	nop
   23cc0:	1000795c 	.word	0x1000795c

00023cc4 <AppClearAllBondingInfo>:
 *
 *          Otherwise, clearing the resolving list in the Controller may fail.
 */
/*************************************************************************************************/
void AppClearAllBondingInfo(void)
{
   23cc4:	b508      	push	{r3, lr}
  APP_TRACE_INFO0("Clear bonding info");

  /* clear bonded device info */
  AppDbDeleteAllRecords();
   23cc6:	f7e8 fca9 	bl	c61c <AppDbDeleteAllRecords>

  /* if LL Privacy is supported */
  if (HciLlPrivacySupported())
   23cca:	f7ea fbe3 	bl	e494 <HciLlPrivacySupported>
   23cce:	4603      	mov	r3, r0
   23cd0:	2b00      	cmp	r3, #0
   23cd2:	d009      	beq.n	23ce8 <AppClearAllBondingInfo+0x24>
  {
    /* if LL Privacy has been enabled */
    if (DmLlPrivEnabled())
   23cd4:	f7f2 f9f8 	bl	160c8 <DmLlPrivEnabled>
   23cd8:	4603      	mov	r3, r0
   23cda:	2b00      	cmp	r3, #0
   23cdc:	d002      	beq.n	23ce4 <AppClearAllBondingInfo+0x20>
    {
      /* make sure LL Privacy is disabled before clearing resolving list */
      DmPrivSetAddrResEnable(FALSE);
   23cde:	2000      	movs	r0, #0
   23ce0:	f7f2 fce2 	bl	166a8 <DmPrivSetAddrResEnable>
    }

    /* clear resolving list */
    DmPrivClearResList();
   23ce4:	f7f2 fcc8 	bl	16678 <DmPrivClearResList>
  }
}
   23ce8:	bf00      	nop
   23cea:	bd08      	pop	{r3, pc}

00023cec <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   23cec:	b500      	push	{lr}
   23cee:	b085      	sub	sp, #20
   23cf0:	9001      	str	r0, [sp, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   23cf2:	9b01      	ldr	r3, [sp, #4]
   23cf4:	2b00      	cmp	r3, #0
   23cf6:	d020      	beq.n	23d3a <AppUpdatePrivacyMode+0x4e>
   23cf8:	9801      	ldr	r0, [sp, #4]
   23cfa:	f7e8 fe89 	bl	ca10 <AppDbGetPeerAddedToRl>
   23cfe:	4603      	mov	r3, r0
   23d00:	2b00      	cmp	r3, #0
   23d02:	d01a      	beq.n	23d3a <AppUpdatePrivacyMode+0x4e>
   23d04:	9801      	ldr	r0, [sp, #4]
   23d06:	f7e8 fe98 	bl	ca3a <AppDbGetPeerRpao>
   23d0a:	4603      	mov	r3, r0
   23d0c:	2b00      	cmp	r3, #0
   23d0e:	d114      	bne.n	23d3a <AppUpdatePrivacyMode+0x4e>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   23d10:	2200      	movs	r2, #0
   23d12:	2104      	movs	r1, #4
   23d14:	9801      	ldr	r0, [sp, #4]
   23d16:	f7e8 fd13 	bl	c740 <AppDbGetKey>
   23d1a:	9003      	str	r0, [sp, #12]
    if (pPeerKey != NULL)
   23d1c:	9b03      	ldr	r3, [sp, #12]
   23d1e:	2b00      	cmp	r3, #0
   23d20:	d00b      	beq.n	23d3a <AppUpdatePrivacyMode+0x4e>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   23d22:	9b03      	ldr	r3, [sp, #12]
   23d24:	7d98      	ldrb	r0, [r3, #22]
   23d26:	9b03      	ldr	r3, [sp, #12]
   23d28:	3310      	adds	r3, #16
   23d2a:	2201      	movs	r2, #1
   23d2c:	4619      	mov	r1, r3
   23d2e:	f7f2 fcdd 	bl	166ec <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   23d32:	2100      	movs	r1, #0
   23d34:	9801      	ldr	r0, [sp, #4]
   23d36:	f7e8 fe73 	bl	ca20 <AppDbSetPeerAddedToRl>
    }
  }
}
   23d3a:	bf00      	nop
   23d3c:	b005      	add	sp, #20
   23d3e:	f85d fb04 	ldr.w	pc, [sp], #4

00023d42 <appServerSetSigningInfo>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appServerSetSigningInfo(dmConnId_t connId)
{
   23d42:	b500      	push	{lr}
   23d44:	b085      	sub	sp, #20
   23d46:	4603      	mov	r3, r0
   23d48:	f88d 3007 	strb.w	r3, [sp, #7]
  appDbHdl_t  dbHdl;
  dmSecKey_t  *pPeerKey;

  /* if peer's CSRK is available */
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   23d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23d50:	4618      	mov	r0, r3
   23d52:	f7ff ff71 	bl	23c38 <AppDbGetHdl>
   23d56:	9003      	str	r0, [sp, #12]
   23d58:	9b03      	ldr	r3, [sp, #12]
   23d5a:	2b00      	cmp	r3, #0
   23d5c:	d019      	beq.n	23d92 <appServerSetSigningInfo+0x50>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
   23d5e:	2200      	movs	r2, #0
   23d60:	2108      	movs	r1, #8
   23d62:	9803      	ldr	r0, [sp, #12]
   23d64:	f7e8 fcec 	bl	c740 <AppDbGetKey>
   23d68:	9002      	str	r0, [sp, #8]
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   23d6a:	9b02      	ldr	r3, [sp, #8]
   23d6c:	2b00      	cmp	r3, #0
   23d6e:	d010      	beq.n	23d92 <appServerSetSigningInfo+0x50>
  {
    /* set peer's CSRK and sign counter on this connection */
    AttsSetCsrk(connId, pPeerKey->csrk.key, FALSE);
   23d70:	9902      	ldr	r1, [sp, #8]
   23d72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23d76:	2200      	movs	r2, #0
   23d78:	4618      	mov	r0, r3
   23d7a:	f7f7 fd2b 	bl	1b7d4 <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   23d7e:	9803      	ldr	r0, [sp, #12]
   23d80:	f7e8 fe34 	bl	c9ec <AppDbGetPeerSignCounter>
   23d84:	4602      	mov	r2, r0
   23d86:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23d8a:	4611      	mov	r1, r2
   23d8c:	4618      	mov	r0, r3
   23d8e:	f7f7 fd3f 	bl	1b810 <AttsSetSignCounter>
  }
}
   23d92:	bf00      	nop
   23d94:	b005      	add	sp, #20
   23d96:	f85d fb04 	ldr.w	pc, [sp], #4

00023d9a <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   23d9a:	b500      	push	{lr}
   23d9c:	b089      	sub	sp, #36	; 0x24
   23d9e:	9001      	str	r0, [sp, #4]
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   23da0:	9b01      	ldr	r3, [sp, #4]
   23da2:	881b      	ldrh	r3, [r3, #0]
   23da4:	f88d 301e 	strb.w	r3, [sp, #30]

  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   23da8:	9b01      	ldr	r3, [sp, #4]
   23daa:	789b      	ldrb	r3, [r3, #2]
   23dac:	2b27      	cmp	r3, #39	; 0x27
   23dae:	d141      	bne.n	23e34 <AppServerConnCback+0x9a>
  {
    /* apply the peer's CCC table - values are persistant across connection when bonded */
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   23db0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23db4:	4618      	mov	r0, r3
   23db6:	f7ff ff3f 	bl	23c38 <AppDbGetHdl>
   23dba:	9006      	str	r0, [sp, #24]
   23dbc:	9b06      	ldr	r3, [sp, #24]
   23dbe:	2b00      	cmp	r3, #0
   23dc0:	d025      	beq.n	23e0e <AppServerConnCback+0x74>
    {
      uint8_t changeAwareState;
      uint8_t *pCsf;

      AppDbGetCsfRecord(dbHdl, &changeAwareState, &pCsf);
   23dc2:	aa03      	add	r2, sp, #12
   23dc4:	f10d 0313 	add.w	r3, sp, #19
   23dc8:	4619      	mov	r1, r3
   23dca:	9806      	ldr	r0, [sp, #24]
   23dcc:	f7e8 fd99 	bl	c902 <AppDbGetCsfRecord>

      /* Apply peer's client supported features. */
      AttsCsfConnOpen(connId, changeAwareState, pCsf);
   23dd0:	f89d 1013 	ldrb.w	r1, [sp, #19]
   23dd4:	9a03      	ldr	r2, [sp, #12]
   23dd6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23dda:	4618      	mov	r0, r3
   23ddc:	f7f5 f9ac 	bl	19138 <AttsCsfConnOpen>

      AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   23de0:	9806      	ldr	r0, [sp, #24]
   23de2:	f7e8 fd73 	bl	c8cc <AppDbGetCccTbl>
   23de6:	4602      	mov	r2, r0
   23de8:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23dec:	4611      	mov	r1, r2
   23dee:	4618      	mov	r0, r3
   23df0:	f7f4 ffce 	bl	18d90 <AttsCccInitTable>

      /* If database has changed and peer configured service indications, send one now. */
      if (changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   23df4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   23df8:	2b03      	cmp	r3, #3
   23dfa:	d115      	bne.n	23e28 <AppServerConnCback+0x8e>
      {
        GattSendServiceChangedInd(connId, ATT_HANDLE_START, ATT_HANDLE_MAX);
   23dfc:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23e04:	2101      	movs	r1, #1
   23e06:	4618      	mov	r0, r3
   23e08:	f7f3 f8f4 	bl	16ff4 <GattSendServiceChangedInd>
   23e0c:	e00c      	b.n	23e28 <AppServerConnCback+0x8e>
      }
    }
    else
    {
      /* set up CCC table with uninitialized (all zero) values. */
      AttsCccInitTable(connId, NULL);
   23e0e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23e12:	2100      	movs	r1, #0
   23e14:	4618      	mov	r0, r3
   23e16:	f7f4 ffbb 	bl	18d90 <AttsCccInitTable>

      /* set CSF values to default */
      AttsCsfConnOpen(connId, TRUE, NULL);
   23e1a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23e1e:	2200      	movs	r2, #0
   23e20:	2101      	movs	r1, #1
   23e22:	4618      	mov	r0, r3
   23e24:	f7f5 f988 	bl	19138 <AttsCsfConnOpen>
    }

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   23e28:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23e2c:	4618      	mov	r0, r3
   23e2e:	f7ff ff88 	bl	23d42 <appServerSetSigningInfo>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
    }
  }
}
   23e32:	e084      	b.n	23f3e <AppServerConnCback+0x1a4>
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   23e34:	9b01      	ldr	r3, [sp, #4]
   23e36:	789b      	ldrb	r3, [r3, #2]
   23e38:	2b2a      	cmp	r3, #42	; 0x2a
   23e3a:	d164      	bne.n	23f06 <AppServerConnCback+0x16c>
    bonded = ((pDmEvt->pairCmpl.auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG);
   23e3c:	9b01      	ldr	r3, [sp, #4]
   23e3e:	791b      	ldrb	r3, [r3, #4]
   23e40:	f003 0301 	and.w	r3, r3, #1
   23e44:	2b00      	cmp	r3, #0
   23e46:	bf14      	ite	ne
   23e48:	2301      	movne	r3, #1
   23e4a:	2300      	moveq	r3, #0
   23e4c:	b2db      	uxtb	r3, r3
   23e4e:	f88d 3017 	strb.w	r3, [sp, #23]
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   23e52:	f89d 3017 	ldrb.w	r3, [sp, #23]
   23e56:	2b00      	cmp	r3, #0
   23e58:	d04f      	beq.n	23efa <AppServerConnCback+0x160>
   23e5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23e5e:	4618      	mov	r0, r3
   23e60:	f7ff fe14 	bl	23a8c <AppCheckBonded>
   23e64:	4603      	mov	r3, r0
   23e66:	2b00      	cmp	r3, #0
   23e68:	d147      	bne.n	23efa <AppServerConnCback+0x160>
        ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE))
   23e6a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23e6e:	4618      	mov	r0, r3
   23e70:	f7ff fee2 	bl	23c38 <AppDbGetHdl>
   23e74:	9006      	str	r0, [sp, #24]
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   23e76:	9b06      	ldr	r3, [sp, #24]
   23e78:	2b00      	cmp	r3, #0
   23e7a:	d03e      	beq.n	23efa <AppServerConnCback+0x160>
      tableLen = AttsGetCccTableLen();
   23e7c:	f7f5 f82a 	bl	18ed4 <AttsGetCccTableLen>
   23e80:	4603      	mov	r3, r0
   23e82:	f88d 3016 	strb.w	r3, [sp, #22]
      for (idx = 0; idx < tableLen; idx++)
   23e86:	2300      	movs	r3, #0
   23e88:	f88d 301f 	strb.w	r3, [sp, #31]
   23e8c:	e01c      	b.n	23ec8 <AppServerConnCback+0x12e>
        if ((cccValue = AttsCccGet(connId, idx)) != 0)
   23e8e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   23e92:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23e96:	4611      	mov	r1, r2
   23e98:	4618      	mov	r0, r3
   23e9a:	f7f4 ffcf 	bl	18e3c <AttsCccGet>
   23e9e:	4603      	mov	r3, r0
   23ea0:	f8ad 3014 	strh.w	r3, [sp, #20]
   23ea4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   23ea8:	2b00      	cmp	r3, #0
   23eaa:	d008      	beq.n	23ebe <AppServerConnCback+0x124>
          AppDbSetCccTblValue(dbHdl, idx, cccValue);
   23eac:	f89d 301f 	ldrb.w	r3, [sp, #31]
   23eb0:	b29b      	uxth	r3, r3
   23eb2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23eb6:	4619      	mov	r1, r3
   23eb8:	9806      	ldr	r0, [sp, #24]
   23eba:	f7e8 fd0e 	bl	c8da <AppDbSetCccTblValue>
      for (idx = 0; idx < tableLen; idx++)
   23ebe:	f89d 301f 	ldrb.w	r3, [sp, #31]
   23ec2:	3301      	adds	r3, #1
   23ec4:	f88d 301f 	strb.w	r3, [sp, #31]
   23ec8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   23ecc:	f89d 3016 	ldrb.w	r3, [sp, #22]
   23ed0:	429a      	cmp	r2, r3
   23ed2:	d3dc      	bcc.n	23e8e <AppServerConnCback+0xf4>
      AttsCsfGetFeatures(connId, csf, sizeof(csf));
   23ed4:	a902      	add	r1, sp, #8
   23ed6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23eda:	2201      	movs	r2, #1
   23edc:	4618      	mov	r0, r3
   23ede:	f7f5 f9a5 	bl	1922c <AttsCsfGetFeatures>
      AppDbSetCsfRecord(dbHdl, AttsCsfGetChangeAwareState(connId), csf);
   23ee2:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23ee6:	4618      	mov	r0, r3
   23ee8:	f7f5 f9c0 	bl	1926c <AttsCsfGetChangeAwareState>
   23eec:	4603      	mov	r3, r0
   23eee:	4619      	mov	r1, r3
   23ef0:	ab02      	add	r3, sp, #8
   23ef2:	461a      	mov	r2, r3
   23ef4:	9806      	ldr	r0, [sp, #24]
   23ef6:	f7e8 fd15 	bl	c924 <AppDbSetCsfRecord>
    appServerSetSigningInfo(connId);
   23efa:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23efe:	4618      	mov	r0, r3
   23f00:	f7ff ff1f 	bl	23d42 <appServerSetSigningInfo>
}
   23f04:	e01b      	b.n	23f3e <AppServerConnCback+0x1a4>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   23f06:	9b01      	ldr	r3, [sp, #4]
   23f08:	789b      	ldrb	r3, [r3, #2]
   23f0a:	2b28      	cmp	r3, #40	; 0x28
   23f0c:	d117      	bne.n	23f3e <AppServerConnCback+0x1a4>
    AttsCccClearTable(connId);
   23f0e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23f12:	4618      	mov	r0, r3
   23f14:	f7f4 ff84 	bl	18e20 <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   23f18:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23f1c:	4618      	mov	r0, r3
   23f1e:	f7ff fe8b 	bl	23c38 <AppDbGetHdl>
   23f22:	9006      	str	r0, [sp, #24]
   23f24:	9b06      	ldr	r3, [sp, #24]
   23f26:	2b00      	cmp	r3, #0
   23f28:	d009      	beq.n	23f3e <AppServerConnCback+0x1a4>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   23f2a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   23f2e:	4618      	mov	r0, r3
   23f30:	f7f7 fc80 	bl	1b834 <AttsGetSignCounter>
   23f34:	4603      	mov	r3, r0
   23f36:	4619      	mov	r1, r3
   23f38:	9806      	ldr	r0, [sp, #24]
   23f3a:	f7e8 fd5f 	bl	c9fc <AppDbSetPeerSignCounter>
}
   23f3e:	bf00      	nop
   23f40:	b009      	add	sp, #36	; 0x24
   23f42:	f85d fb04 	ldr.w	pc, [sp], #4

00023f46 <appServerHandleDbHashUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appServerHandleDbHashUpdate(attEvt_t *pMsg)
{
   23f46:	b500      	push	{lr}
   23f48:	b085      	sub	sp, #20
   23f4a:	9001      	str	r0, [sp, #4]
  uint8_t *pCurrentHash = AppDbGetDbHash();
   23f4c:	f7e8 fd2e 	bl	c9ac <AppDbGetDbHash>
   23f50:	9003      	str	r0, [sp, #12]

  /* Compare new hash with old. */
  if (pCurrentHash != NULL)
   23f52:	9b03      	ldr	r3, [sp, #12]
   23f54:	2b00      	cmp	r3, #0
   23f56:	d00b      	beq.n	23f70 <appServerHandleDbHashUpdate+0x2a>
  {
    if (memcmp(pMsg->pValue, pCurrentHash, ATT_DATABASE_HASH_LEN))
   23f58:	9b01      	ldr	r3, [sp, #4]
   23f5a:	685b      	ldr	r3, [r3, #4]
   23f5c:	2210      	movs	r2, #16
   23f5e:	9903      	ldr	r1, [sp, #12]
   23f60:	4618      	mov	r0, r3
   23f62:	f001 fb79 	bl	25658 <memcmp>
   23f66:	4603      	mov	r3, r0
   23f68:	2b00      	cmp	r3, #0
   23f6a:	d001      	beq.n	23f70 <appServerHandleDbHashUpdate+0x2a>
    {
      /* hash has changed, set to NULL. */
      pCurrentHash = NULL;
   23f6c:	2300      	movs	r3, #0
   23f6e:	9303      	str	r3, [sp, #12]
    }
  }

  if (pCurrentHash == NULL)
   23f70:	9b03      	ldr	r3, [sp, #12]
   23f72:	2b00      	cmp	r3, #0
   23f74:	d112      	bne.n	23f9c <appServerHandleDbHashUpdate+0x56>
  {
    /* Update App database. */
    AppDbSetDbHash(pMsg->pValue);
   23f76:	9b01      	ldr	r3, [sp, #4]
   23f78:	685b      	ldr	r3, [r3, #4]
   23f7a:	4618      	mov	r0, r3
   23f7c:	f7e8 fd1c 	bl	c9b8 <AppDbSetDbHash>

    /* Make all bonded clients change-unaware. */
    AppDbSetClientsChangeAwareState(APP_DB_HDL_NONE, ATTS_CLIENT_CHANGE_UNAWARE);
   23f80:	2103      	movs	r1, #3
   23f82:	2000      	movs	r0, #0
   23f84:	f7e8 fce8 	bl	c958 <AppDbSetClientsChangeAwareState>

    /* Make all active clients change-unaware. */
    AttsCsfSetClientsChangeAwarenessState(DM_CONN_ID_NONE, ATTS_CLIENT_CHANGE_UNAWARE);
   23f88:	2103      	movs	r1, #3
   23f8a:	2000      	movs	r0, #0
   23f8c:	f7f5 f894 	bl	190b8 <AttsCsfSetClientsChangeAwarenessState>

    APP_TRACE_INFO0("Database hash updated");

    /* Send all connect clients configured to receive Service Changed Indications one now. */
    GattSendServiceChangedInd(DM_CONN_ID_NONE, ATT_HANDLE_START, ATT_HANDLE_MAX);
   23f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23f94:	2101      	movs	r1, #1
   23f96:	2000      	movs	r0, #0
   23f98:	f7f3 f82c 	bl	16ff4 <GattSendServiceChangedInd>
  }
}
   23f9c:	bf00      	nop
   23f9e:	b005      	add	sp, #20
   23fa0:	f85d fb04 	ldr.w	pc, [sp], #4

00023fa4 <appServerHandleSvcChangeCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appServerHandleSvcChangeCnf(attEvt_t *pMsg)
{
   23fa4:	b500      	push	{lr}
   23fa6:	b085      	sub	sp, #20
   23fa8:	9001      	str	r0, [sp, #4]
  /* Check if this is a confirmation on the Service Changed Indication. */
  if (pMsg->handle == GATT_SC_HDL)
   23faa:	9b01      	ldr	r3, [sp, #4]
   23fac:	895b      	ldrh	r3, [r3, #10]
   23fae:	2b12      	cmp	r3, #18
   23fb0:	d116      	bne.n	23fe0 <appServerHandleSvcChangeCnf+0x3c>
  {
    appDbHdl_t  dbHdl;
    dmConnId_t  connId = (dmConnId_t)pMsg->hdr.param;
   23fb2:	9b01      	ldr	r3, [sp, #4]
   23fb4:	881b      	ldrh	r3, [r3, #0]
   23fb6:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   23fba:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23fbe:	4618      	mov	r0, r3
   23fc0:	f7ff fe3a 	bl	23c38 <AppDbGetHdl>
   23fc4:	9002      	str	r0, [sp, #8]
   23fc6:	9b02      	ldr	r3, [sp, #8]
   23fc8:	2b00      	cmp	r3, #0
   23fca:	d003      	beq.n	23fd4 <appServerHandleSvcChangeCnf+0x30>
    {
      /* store update in device database */
      AppDbSetClientsChangeAwareState(dbHdl, ATTS_CLIENT_CHANGE_AWARE);
   23fcc:	2100      	movs	r1, #0
   23fce:	9802      	ldr	r0, [sp, #8]
   23fd0:	f7e8 fcc2 	bl	c958 <AppDbSetClientsChangeAwareState>
    }

    /* Client is now change-aware. */
    AttsCsfSetClientsChangeAwarenessState(connId, ATTS_CLIENT_CHANGE_AWARE);
   23fd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23fd8:	2100      	movs	r1, #0
   23fda:	4618      	mov	r0, r3
   23fdc:	f7f5 f86c 	bl	190b8 <AttsCsfSetClientsChangeAwarenessState>
  }
}
   23fe0:	bf00      	nop
   23fe2:	b005      	add	sp, #20
   23fe4:	f85d fb04 	ldr.w	pc, [sp], #4

00023fe8 <appServerCsfWriteCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appServerCsfWriteCback(dmConnId_t connId, uint8_t changeAwareState, uint8_t *pCsf)
{
   23fe8:	b500      	push	{lr}
   23fea:	b085      	sub	sp, #20
   23fec:	4603      	mov	r3, r0
   23fee:	9200      	str	r2, [sp, #0]
   23ff0:	f88d 3007 	strb.w	r3, [sp, #7]
   23ff4:	460b      	mov	r3, r1
   23ff6:	f88d 3006 	strb.w	r3, [sp, #6]
  appDbHdl_t dbHdl;

  if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   23ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23ffe:	4618      	mov	r0, r3
   24000:	f7ff fe1a 	bl	23c38 <AppDbGetHdl>
   24004:	9003      	str	r0, [sp, #12]
   24006:	9b03      	ldr	r3, [sp, #12]
   24008:	2b00      	cmp	r3, #0
   2400a:	d006      	beq.n	2401a <appServerCsfWriteCback+0x32>
  {
    /* store update in device database */
    AppDbSetCsfRecord(dbHdl,  changeAwareState, pCsf);
   2400c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24010:	9a00      	ldr	r2, [sp, #0]
   24012:	4619      	mov	r1, r3
   24014:	9803      	ldr	r0, [sp, #12]
   24016:	f7e8 fc85 	bl	c924 <AppDbSetCsfRecord>
  }
}
   2401a:	bf00      	nop
   2401c:	b005      	add	sp, #20
   2401e:	f85d fb04 	ldr.w	pc, [sp], #4

00024022 <AppServerProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerProcAttMsg(wsfMsgHdr_t *pMsg)
{
   24022:	b500      	push	{lr}
   24024:	b083      	sub	sp, #12
   24026:	9001      	str	r0, [sp, #4]
  switch(pMsg->event)
   24028:	9b01      	ldr	r3, [sp, #4]
   2402a:	789b      	ldrb	r3, [r3, #2]
   2402c:	2b0f      	cmp	r3, #15
   2402e:	d005      	beq.n	2403c <AppServerProcAttMsg+0x1a>
   24030:	2b11      	cmp	r3, #17
   24032:	d107      	bne.n	24044 <AppServerProcAttMsg+0x22>
  {
    case ATTS_DB_HASH_CALC_CMPL_IND:
      appServerHandleDbHashUpdate((attEvt_t *)pMsg);
   24034:	9801      	ldr	r0, [sp, #4]
   24036:	f7ff ff86 	bl	23f46 <appServerHandleDbHashUpdate>
      break;
   2403a:	e004      	b.n	24046 <AppServerProcAttMsg+0x24>

    case ATTS_HANDLE_VALUE_CNF:
      appServerHandleSvcChangeCnf((attEvt_t *)pMsg);
   2403c:	9801      	ldr	r0, [sp, #4]
   2403e:	f7ff ffb1 	bl	23fa4 <appServerHandleSvcChangeCnf>
      break;
   24042:	e000      	b.n	24046 <AppServerProcAttMsg+0x24>

    default:
      break;
   24044:	bf00      	nop
  }
}
   24046:	bf00      	nop
   24048:	b003      	add	sp, #12
   2404a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00024050 <AppServerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerInit(void)
{
   24050:	b508      	push	{r3, lr}
  /* register callback with caching state machine */
  AttsCsfRegister(appServerCsfWriteCback);
   24052:	4802      	ldr	r0, [pc, #8]	; (2405c <AppServerInit+0xc>)
   24054:	f7f5 f8a0 	bl	19198 <AttsCsfRegister>
}
   24058:	bf00      	nop
   2405a:	bd08      	pop	{r3, pc}
   2405c:	00023fe9 	.word	0x00023fe9

00024060 <appSlaveAdvModeInit>:
 */
/*************************************************************************************************/
static void appSlaveAdvModeInit(void)
{
  /* initialize advertising callbacks */
  appSlaveCb.advStopCback = NULL;
   24060:	4b03      	ldr	r3, [pc, #12]	; (24070 <appSlaveAdvModeInit+0x10>)
   24062:	2200      	movs	r2, #0
   24064:	679a      	str	r2, [r3, #120]	; 0x78
  appSlaveCb.advRestartCback = NULL;
   24066:	4b02      	ldr	r3, [pc, #8]	; (24070 <appSlaveAdvModeInit+0x10>)
   24068:	2200      	movs	r2, #0
   2406a:	67da      	str	r2, [r3, #124]	; 0x7c
}
   2406c:	bf00      	nop
   2406e:	4770      	bx	lr
   24070:	100079c8 	.word	0x100079c8

00024074 <appSlaveConnectableAdv>:
 *
 *  \return TRUE if connectable advertising enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
   24074:	b084      	sub	sp, #16
   24076:	4603      	mov	r3, r0
   24078:	9100      	str	r1, [sp, #0]
   2407a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   2407e:	2300      	movs	r3, #0
   24080:	f88d 300f 	strb.w	r3, [sp, #15]
   24084:	e034      	b.n	240f0 <appSlaveConnectableAdv+0x7c>
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   24086:	2300      	movs	r3, #0
   24088:	f88d 300e 	strb.w	r3, [sp, #14]
   2408c:	e027      	b.n	240de <appSlaveConnectableAdv+0x6a>
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                                  &&
   2408e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24092:	9a00      	ldr	r2, [sp, #0]
   24094:	4413      	add	r3, r2
   24096:	781b      	ldrb	r3, [r3, #0]
   24098:	f89d 200e 	ldrb.w	r2, [sp, #14]
   2409c:	429a      	cmp	r2, r3
   2409e:	d119      	bne.n	240d4 <appSlaveConnectableAdv+0x60>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT)       ||
   240a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   240a4:	4a17      	ldr	r2, [pc, #92]	; (24104 <appSlaveConnectableAdv+0x90>)
   240a6:	4413      	add	r3, r2
   240a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
      if ((pAdvHandles[i] == j)                                  &&
   240ac:	2b00      	cmp	r3, #0
   240ae:	d00f      	beq.n	240d0 <appSlaveConnectableAdv+0x5c>
           (appSlaveCb.advType[j] == DM_ADV_CONN_DIRECT_LO_DUTY) ||
   240b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   240b4:	4a13      	ldr	r2, [pc, #76]	; (24104 <appSlaveConnectableAdv+0x90>)
   240b6:	4413      	add	r3, r2
   240b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT)       ||
   240bc:	2b04      	cmp	r3, #4
   240be:	d007      	beq.n	240d0 <appSlaveConnectableAdv+0x5c>
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
   240c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   240c4:	4a0f      	ldr	r2, [pc, #60]	; (24104 <appSlaveConnectableAdv+0x90>)
   240c6:	4413      	add	r3, r2
   240c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
           (appSlaveCb.advType[j] == DM_ADV_CONN_DIRECT_LO_DUTY) ||
   240cc:	2b05      	cmp	r3, #5
   240ce:	d101      	bne.n	240d4 <appSlaveConnectableAdv+0x60>
      {
        return TRUE;
   240d0:	2301      	movs	r3, #1
   240d2:	e014      	b.n	240fe <appSlaveConnectableAdv+0x8a>
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   240d4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   240d8:	3301      	adds	r3, #1
   240da:	f88d 300e 	strb.w	r3, [sp, #14]
   240de:	f89d 300e 	ldrb.w	r3, [sp, #14]
   240e2:	2b01      	cmp	r3, #1
   240e4:	d9d3      	bls.n	2408e <appSlaveConnectableAdv+0x1a>
  for (i = 0; i < numSets; i++)
   240e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   240ea:	3301      	adds	r3, #1
   240ec:	f88d 300f 	strb.w	r3, [sp, #15]
   240f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   240f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   240f8:	429a      	cmp	r2, r3
   240fa:	d3c4      	bcc.n	24086 <appSlaveConnectableAdv+0x12>
      }
    }
  }

  return FALSE;
   240fc:	2300      	movs	r3, #0
}
   240fe:	4618      	mov	r0, r3
   24100:	b004      	add	sp, #16
   24102:	4770      	bx	lr
   24104:	100079c8 	.word	0x100079c8

00024108 <appSlaveForceAdvDataSync>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveForceAdvDataSync(uint8_t advHandle, uint8_t mode)
{
   24108:	b084      	sub	sp, #16
   2410a:	4603      	mov	r3, r0
   2410c:	460a      	mov	r2, r1
   2410e:	f88d 3007 	strb.w	r3, [sp, #7]
   24112:	4613      	mov	r3, r2
   24114:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   24118:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2411c:	005b      	lsls	r3, r3, #1
   2411e:	f88d 300f 	strb.w	r3, [sp, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   24122:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24126:	005b      	lsls	r3, r3, #1
   24128:	b2db      	uxtb	r3, r3
   2412a:	3301      	adds	r3, #1
   2412c:	f88d 300e 	strb.w	r3, [sp, #14]

  /* force update of advertising data */
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   24130:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24134:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24138:	490d      	ldr	r1, [pc, #52]	; (24170 <appSlaveForceAdvDataSync+0x68>)
   2413a:	0092      	lsls	r2, r2, #2
   2413c:	4413      	add	r3, r2
   2413e:	3320      	adds	r3, #32
   24140:	2200      	movs	r2, #0
   24142:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   24146:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2414a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2414e:	4908      	ldr	r1, [pc, #32]	; (24170 <appSlaveForceAdvDataSync+0x68>)
   24150:	0092      	lsls	r2, r2, #2
   24152:	4413      	add	r3, r2
   24154:	3320      	adds	r3, #32
   24156:	2200      	movs	r2, #0
   24158:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   2415c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24160:	4a03      	ldr	r2, [pc, #12]	; (24170 <appSlaveForceAdvDataSync+0x68>)
   24162:	4413      	add	r3, r2
   24164:	2200      	movs	r2, #0
   24166:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
}
   2416a:	bf00      	nop
   2416c:	b004      	add	sp, #16
   2416e:	4770      	bx	lr
   24170:	100079c8 	.word	0x100079c8

00024174 <appSetAdvScanDataFrag>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanDataFrag(uint8_t advHandle, uint8_t location)
{
   24174:	b530      	push	{r4, r5, lr}
   24176:	b089      	sub	sp, #36	; 0x24
   24178:	4603      	mov	r3, r0
   2417a:	460a      	mov	r2, r1
   2417c:	f88d 300f 	strb.w	r3, [sp, #15]
   24180:	4613      	mov	r3, r2
   24182:	f88d 300e 	strb.w	r3, [sp, #14]
  uint8_t  op;
  uint16_t fragLen;
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;
   24186:	2301      	movs	r3, #1
   24188:	f88d 3019 	strb.w	r3, [sp, #25]

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   2418c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24190:	f89d 300e 	ldrb.w	r3, [sp, #14]
   24194:	494b      	ldr	r1, [pc, #300]	; (242c4 <appSetAdvScanDataFrag+0x150>)
   24196:	0092      	lsls	r2, r2, #2
   24198:	4413      	add	r3, r2
   2419a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   2419e:	9305      	str	r3, [sp, #20]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   241a0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   241a4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   241a8:	4946      	ldr	r1, [pc, #280]	; (242c4 <appSetAdvScanDataFrag+0x150>)
   241aa:	0092      	lsls	r2, r2, #2
   241ac:	4413      	add	r3, r2
   241ae:	3310      	adds	r3, #16
   241b0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   241b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
   241b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   241bc:	4841      	ldr	r0, [pc, #260]	; (242c4 <appSetAdvScanDataFrag+0x150>)
   241be:	0089      	lsls	r1, r1, #2
   241c0:	440b      	add	r3, r1
   241c2:	3320      	adds	r3, #32
   241c4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   241c8:	1ad3      	subs	r3, r2, r3
   241ca:	f8ad 301a 	strh.w	r3, [sp, #26]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   241ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
   241d2:	4a3c      	ldr	r2, [pc, #240]	; (242c4 <appSetAdvScanDataFrag+0x150>)
   241d4:	3328      	adds	r3, #40	; 0x28
   241d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   241da:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   241de:	429a      	cmp	r2, r3
   241e0:	d967      	bls.n	242b2 <appSetAdvScanDataFrag+0x13e>
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
   241e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   241e6:	4a37      	ldr	r2, [pc, #220]	; (242c4 <appSetAdvScanDataFrag+0x150>)
   241e8:	3328      	adds	r3, #40	; 0x28
   241ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   241ee:	f8ad 301a 	strh.w	r3, [sp, #26]
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   241f2:	e05e      	b.n	242b2 <appSetAdvScanDataFrag+0x13e>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   241f4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   241f8:	2bfb      	cmp	r3, #251	; 0xfb
   241fa:	d90c      	bls.n	24216 <appSetAdvScanDataFrag+0xa2>
    {
      /* data needs to be fragmented */
      fragLen = HCI_EXT_ADV_DATA_LEN;
   241fc:	23fb      	movs	r3, #251	; 0xfb
   241fe:	f8ad 301c 	strh.w	r3, [sp, #28]
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   24202:	f89d 3019 	ldrb.w	r3, [sp, #25]
   24206:	2b00      	cmp	r3, #0
   24208:	bf14      	ite	ne
   2420a:	2301      	movne	r3, #1
   2420c:	2300      	moveq	r3, #0
   2420e:	b2db      	uxtb	r3, r3
   24210:	f88d 301f 	strb.w	r3, [sp, #31]
   24214:	e00c      	b.n	24230 <appSetAdvScanDataFrag+0xbc>

    }
    else
    {
      /* no fragmentation needed */
      fragLen = remainLen;
   24216:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2421a:	f8ad 301c 	strh.w	r3, [sp, #28]
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   2421e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   24222:	2b00      	cmp	r3, #0
   24224:	d001      	beq.n	2422a <appSetAdvScanDataFrag+0xb6>
   24226:	2303      	movs	r3, #3
   24228:	e000      	b.n	2422c <appSetAdvScanDataFrag+0xb8>
   2422a:	2302      	movs	r3, #2
   2422c:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   24230:	f89d 300e 	ldrb.w	r3, [sp, #14]
   24234:	f003 0301 	and.w	r3, r3, #1
   24238:	b2dc      	uxtb	r4, r3
   2423a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2423e:	b2dd      	uxtb	r5, r3
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));
   24240:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24244:	f89d 300e 	ldrb.w	r3, [sp, #14]
   24248:	491e      	ldr	r1, [pc, #120]	; (242c4 <appSetAdvScanDataFrag+0x150>)
   2424a:	0092      	lsls	r2, r2, #2
   2424c:	4413      	add	r3, r2
   2424e:	3320      	adds	r3, #32
   24250:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   24254:	461a      	mov	r2, r3
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   24256:	9b05      	ldr	r3, [sp, #20]
   24258:	4413      	add	r3, r2
   2425a:	f89d 101f 	ldrb.w	r1, [sp, #31]
   2425e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   24262:	9300      	str	r3, [sp, #0]
   24264:	462b      	mov	r3, r5
   24266:	4622      	mov	r2, r4
   24268:	f7f0 f97a 	bl	14560 <DmAdvSetData>

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   2426c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24270:	f89d 300e 	ldrb.w	r3, [sp, #14]
   24274:	4913      	ldr	r1, [pc, #76]	; (242c4 <appSetAdvScanDataFrag+0x150>)
   24276:	0092      	lsls	r2, r2, #2
   24278:	4413      	add	r3, r2
   2427a:	3320      	adds	r3, #32
   2427c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
   24280:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24284:	f89d 300e 	ldrb.w	r3, [sp, #14]
   24288:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   2428c:	4401      	add	r1, r0
   2428e:	b288      	uxth	r0, r1
   24290:	490c      	ldr	r1, [pc, #48]	; (242c4 <appSetAdvScanDataFrag+0x150>)
   24292:	0092      	lsls	r2, r2, #2
   24294:	4413      	add	r3, r2
   24296:	3320      	adds	r3, #32
   24298:	4602      	mov	r2, r0
   2429a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   2429e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   242a2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   242a6:	1ad3      	subs	r3, r2, r3
   242a8:	f8ad 301a 	strh.w	r3, [sp, #26]
    firstFrag = FALSE;
   242ac:	2300      	movs	r3, #0
   242ae:	f88d 3019 	strb.w	r3, [sp, #25]
  while (remainLen > 0)
   242b2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   242b6:	2b00      	cmp	r3, #0
   242b8:	d19c      	bne.n	241f4 <appSetAdvScanDataFrag+0x80>
  }
}
   242ba:	bf00      	nop
   242bc:	bf00      	nop
   242be:	b009      	add	sp, #36	; 0x24
   242c0:	bd30      	pop	{r4, r5, pc}
   242c2:	bf00      	nop
   242c4:	100079c8 	.word	0x100079c8

000242c8 <appSetAdvScanData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanData(uint8_t advHandle, uint8_t mode)
{
   242c8:	b500      	push	{lr}
   242ca:	b085      	sub	sp, #20
   242cc:	4603      	mov	r3, r0
   242ce:	460a      	mov	r2, r1
   242d0:	f88d 3007 	strb.w	r3, [sp, #7]
   242d4:	4613      	mov	r3, r2
   242d6:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   242da:	f89d 3006 	ldrb.w	r3, [sp, #6]
   242de:	005b      	lsls	r3, r3, #1
   242e0:	f88d 300f 	strb.w	r3, [sp, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   242e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   242e8:	005b      	lsls	r3, r3, #1
   242ea:	b2db      	uxtb	r3, r3
   242ec:	3301      	adds	r3, #1
   242ee:	f88d 300e 	strb.w	r3, [sp, #14]

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   242f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   242f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   242fa:	4937      	ldr	r1, [pc, #220]	; (243d8 <appSetAdvScanData+0x110>)
   242fc:	0092      	lsls	r2, r2, #2
   242fe:	4413      	add	r3, r2
   24300:	3320      	adds	r3, #32
   24302:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   24306:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2430a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2430e:	4832      	ldr	r0, [pc, #200]	; (243d8 <appSetAdvScanData+0x110>)
   24310:	0089      	lsls	r1, r1, #2
   24312:	440b      	add	r3, r1
   24314:	3310      	adds	r3, #16
   24316:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   2431a:	429a      	cmp	r2, r3
   2431c:	d207      	bcs.n	2432e <appSetAdvScanData+0x66>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
   2431e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24322:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24326:	4611      	mov	r1, r2
   24328:	4618      	mov	r0, r3
   2432a:	f7ff ff23 	bl	24174 <appSetAdvScanDataFrag>
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   2432e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24332:	f89d 300e 	ldrb.w	r3, [sp, #14]
   24336:	4928      	ldr	r1, [pc, #160]	; (243d8 <appSetAdvScanData+0x110>)
   24338:	0092      	lsls	r2, r2, #2
   2433a:	4413      	add	r3, r2
   2433c:	3320      	adds	r3, #32
   2433e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   24342:	f89d 1007 	ldrb.w	r1, [sp, #7]
   24346:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2434a:	4823      	ldr	r0, [pc, #140]	; (243d8 <appSetAdvScanData+0x110>)
   2434c:	0089      	lsls	r1, r1, #2
   2434e:	440b      	add	r3, r1
   24350:	3310      	adds	r3, #16
   24352:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   24356:	429a      	cmp	r2, r3
   24358:	d207      	bcs.n	2436a <appSetAdvScanData+0xa2>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
   2435a:	f89d 200e 	ldrb.w	r2, [sp, #14]
   2435e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24362:	4611      	mov	r1, r2
   24364:	4618      	mov	r0, r3
   24366:	f7ff ff05 	bl	24174 <appSetAdvScanDataFrag>
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   2436a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2436e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24372:	4919      	ldr	r1, [pc, #100]	; (243d8 <appSetAdvScanData+0x110>)
   24374:	0092      	lsls	r2, r2, #2
   24376:	4413      	add	r3, r2
   24378:	3320      	adds	r3, #32
   2437a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   2437e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   24382:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24386:	4814      	ldr	r0, [pc, #80]	; (243d8 <appSetAdvScanData+0x110>)
   24388:	0089      	lsls	r1, r1, #2
   2438a:	440b      	add	r3, r1
   2438c:	3310      	adds	r3, #16
   2438e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   24392:	429a      	cmp	r2, r3
   24394:	d31c      	bcc.n	243d0 <appSetAdvScanData+0x108>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   24396:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2439a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2439e:	490e      	ldr	r1, [pc, #56]	; (243d8 <appSetAdvScanData+0x110>)
   243a0:	0092      	lsls	r2, r2, #2
   243a2:	4413      	add	r3, r2
   243a4:	3320      	adds	r3, #32
   243a6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   243aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
   243ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
   243b2:	4809      	ldr	r0, [pc, #36]	; (243d8 <appSetAdvScanData+0x110>)
   243b4:	0089      	lsls	r1, r1, #2
   243b6:	440b      	add	r3, r1
   243b8:	3310      	adds	r3, #16
   243ba:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   243be:	429a      	cmp	r2, r3
   243c0:	d306      	bcc.n	243d0 <appSetAdvScanData+0x108>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   243c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   243c6:	4a04      	ldr	r2, [pc, #16]	; (243d8 <appSetAdvScanData+0x110>)
   243c8:	4413      	add	r3, r2
   243ca:	2201      	movs	r2, #1
   243cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  }
}
   243d0:	bf00      	nop
   243d2:	b005      	add	sp, #20
   243d4:	f85d fb04 	ldr.w	pc, [sp], #4
   243d8:	100079c8 	.word	0x100079c8

000243dc <appConnUpdateTimerStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appConnUpdateTimerStart(dmConnId_t connId)
{
   243dc:	b500      	push	{lr}
   243de:	b085      	sub	sp, #20
   243e0:	4603      	mov	r3, r0
   243e2:	f88d 3007 	strb.w	r3, [sp, #7]
  /* look up app connection control block from DM connection ID */
  appConnCb_t *pCb = &appConnCb[connId - 1];
   243e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   243ea:	3b01      	subs	r3, #1
   243ec:	015b      	lsls	r3, r3, #5
   243ee:	4a0e      	ldr	r2, [pc, #56]	; (24428 <appConnUpdateTimerStart+0x4c>)
   243f0:	4413      	add	r3, r2
   243f2:	9303      	str	r3, [sp, #12]

  pCb->updateTimer.handlerId = appHandlerId;
   243f4:	4b0d      	ldr	r3, [pc, #52]	; (2442c <appConnUpdateTimerStart+0x50>)
   243f6:	781a      	ldrb	r2, [r3, #0]
   243f8:	9b03      	ldr	r3, [sp, #12]
   243fa:	771a      	strb	r2, [r3, #28]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   243fc:	9b03      	ldr	r3, [sp, #12]
   243fe:	2210      	movs	r2, #16
   24400:	769a      	strb	r2, [r3, #26]
  pCb->updateTimer.msg.param = connId;
   24402:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24406:	b29a      	uxth	r2, r3
   24408:	9b03      	ldr	r3, [sp, #12]
   2440a:	831a      	strh	r2, [r3, #24]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   2440c:	9b03      	ldr	r3, [sp, #12]
   2440e:	f103 0210 	add.w	r2, r3, #16
   24412:	4b07      	ldr	r3, [pc, #28]	; (24430 <appConnUpdateTimerStart+0x54>)
   24414:	681b      	ldr	r3, [r3, #0]
   24416:	681b      	ldr	r3, [r3, #0]
   24418:	4619      	mov	r1, r3
   2441a:	4610      	mov	r0, r2
   2441c:	f7fb fe16 	bl	2004c <WsfTimerStartMs>
}
   24420:	bf00      	nop
   24422:	b005      	add	sp, #20
   24424:	f85d fb04 	ldr.w	pc, [sp], #4
   24428:	1000795c 	.word	0x1000795c
   2442c:	100079bc 	.word	0x100079bc
   24430:	10007958 	.word	0x10007958

00024434 <appConnUpdateTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appConnUpdateTimerStop(appConnCb_t *pCb)
{
   24434:	b500      	push	{lr}
   24436:	b083      	sub	sp, #12
   24438:	9001      	str	r0, [sp, #4]
  /* stop connection update timer */
  if (pAppUpdateCfg->idlePeriod != 0)
   2443a:	4b07      	ldr	r3, [pc, #28]	; (24458 <appConnUpdateTimerStop+0x24>)
   2443c:	681b      	ldr	r3, [r3, #0]
   2443e:	681b      	ldr	r3, [r3, #0]
   24440:	2b00      	cmp	r3, #0
   24442:	d004      	beq.n	2444e <appConnUpdateTimerStop+0x1a>
  {
    WsfTimerStop(&pCb->updateTimer);
   24444:	9b01      	ldr	r3, [sp, #4]
   24446:	3310      	adds	r3, #16
   24448:	4618      	mov	r0, r3
   2444a:	f7fb fe13 	bl	20074 <WsfTimerStop>
  }
}
   2444e:	bf00      	nop
   24450:	b003      	add	sp, #12
   24452:	f85d fb04 	ldr.w	pc, [sp], #4
   24456:	bf00      	nop
   24458:	10007958 	.word	0x10007958

0002445c <appSlaveResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolveAddr(dmEvt_t *pMsg)
{
   2445c:	b500      	push	{lr}
   2445e:	b085      	sub	sp, #20
   24460:	9001      	str	r0, [sp, #4]
  appDbHdl_t hdl;
  dmSecKey_t *pPeerKey;

  /* if address resolution's in progress */
  if (appSlaveCb.inProgress)
   24462:	4b17      	ldr	r3, [pc, #92]	; (244c0 <appSlaveResolveAddr+0x64>)
   24464:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   24468:	2b00      	cmp	r3, #0
   2446a:	d124      	bne.n	244b6 <appSlaveResolveAddr+0x5a>
  {
    return;
  }

  /* get the first database record */
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   2446c:	2000      	movs	r0, #0
   2446e:	f7e8 f827 	bl	c4c0 <AppDbGetNextRecord>
   24472:	9003      	str	r0, [sp, #12]

  /* if we have any bond records */
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   24474:	9b03      	ldr	r3, [sp, #12]
   24476:	2b00      	cmp	r3, #0
   24478:	d01e      	beq.n	244b8 <appSlaveResolveAddr+0x5c>
   2447a:	2200      	movs	r2, #0
   2447c:	2104      	movs	r1, #4
   2447e:	9803      	ldr	r0, [sp, #12]
   24480:	f7e8 f95e 	bl	c740 <AppDbGetKey>
   24484:	9002      	str	r0, [sp, #8]
   24486:	9b02      	ldr	r3, [sp, #8]
   24488:	2b00      	cmp	r3, #0
   2448a:	d015      	beq.n	244b8 <appSlaveResolveAddr+0x5c>
  {
    /* resolve advertiser's RPA to see if we already have a bond with this device */
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   2448c:	9b01      	ldr	r3, [sp, #4]
   2448e:	f103 000a 	add.w	r0, r3, #10
   24492:	9902      	ldr	r1, [sp, #8]
   24494:	9b01      	ldr	r3, [sp, #4]
   24496:	881b      	ldrh	r3, [r3, #0]
   24498:	461a      	mov	r2, r3
   2449a:	f7f2 f881 	bl	165a0 <DmPrivResolveAddr>

    /* store database record handle for later */
    appSlaveCb.dbHdl = hdl;
   2449e:	4a08      	ldr	r2, [pc, #32]	; (244c0 <appSlaveResolveAddr+0x64>)
   244a0:	9b03      	ldr	r3, [sp, #12]
   244a2:	6713      	str	r3, [r2, #112]	; 0x70
    appSlaveCb.inProgress = TRUE;
   244a4:	4b06      	ldr	r3, [pc, #24]	; (244c0 <appSlaveResolveAddr+0x64>)
   244a6:	2201      	movs	r2, #1
   244a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    appSlaveCb.findLtk = FALSE;
   244ac:	4b04      	ldr	r3, [pc, #16]	; (244c0 <appSlaveResolveAddr+0x64>)
   244ae:	2200      	movs	r2, #0
   244b0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
   244b4:	e000      	b.n	244b8 <appSlaveResolveAddr+0x5c>
    return;
   244b6:	bf00      	nop
  }
}
   244b8:	b005      	add	sp, #20
   244ba:	f85d fb04 	ldr.w	pc, [sp], #4
   244be:	bf00      	nop
   244c0:	100079c8 	.word	0x100079c8

000244c4 <appSecRspLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecRspLtk(appConnCb_t *pCb)
{
   244c4:	b500      	push	{lr}
   244c6:	b085      	sub	sp, #20
   244c8:	9001      	str	r0, [sp, #4]
  dmSecKey_t  *pKey = NULL;
   244ca:	2300      	movs	r3, #0
   244cc:	9303      	str	r3, [sp, #12]
  uint8_t     secLevel;

  /* if there is a record */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   244ce:	9b01      	ldr	r3, [sp, #4]
   244d0:	681b      	ldr	r3, [r3, #0]
   244d2:	2b00      	cmp	r3, #0
   244d4:	d008      	beq.n	244e8 <appSecRspLtk+0x24>
  {
    /* get ltk */
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   244d6:	9b01      	ldr	r3, [sp, #4]
   244d8:	681b      	ldr	r3, [r3, #0]
   244da:	f10d 020b 	add.w	r2, sp, #11
   244de:	2101      	movs	r1, #1
   244e0:	4618      	mov	r0, r3
   244e2:	f7e8 f92d 	bl	c740 <AppDbGetKey>
   244e6:	9003      	str	r0, [sp, #12]
  }

  if (pKey != NULL)
   244e8:	9b03      	ldr	r3, [sp, #12]
   244ea:	2b00      	cmp	r3, #0
   244ec:	d012      	beq.n	24514 <appSecRspLtk+0x50>
  {
    /* if not bonded we need to update bonding state when encrypted */
    pCb->bondByLtk = !pCb->bonded;
   244ee:	9b01      	ldr	r3, [sp, #4]
   244f0:	795b      	ldrb	r3, [r3, #5]
   244f2:	2b00      	cmp	r3, #0
   244f4:	bf0c      	ite	eq
   244f6:	2301      	moveq	r3, #1
   244f8:	2300      	movne	r3, #0
   244fa:	b2db      	uxtb	r3, r3
   244fc:	461a      	mov	r2, r3
   244fe:	9b01      	ldr	r3, [sp, #4]
   24500:	719a      	strb	r2, [r3, #6]

    /* we found the key */
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   24502:	9b01      	ldr	r3, [sp, #4]
   24504:	7918      	ldrb	r0, [r3, #4]
   24506:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2450a:	9b03      	ldr	r3, [sp, #12]
   2450c:	2101      	movs	r1, #1
   2450e:	f7f2 fbbb 	bl	16c88 <DmSecLtkRsp>
    pCb->bondByLtk = FALSE;

    /* key not found */
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
  }
}
   24512:	e009      	b.n	24528 <appSecRspLtk+0x64>
    pCb->bondByLtk = FALSE;
   24514:	9b01      	ldr	r3, [sp, #4]
   24516:	2200      	movs	r2, #0
   24518:	719a      	strb	r2, [r3, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   2451a:	9b01      	ldr	r3, [sp, #4]
   2451c:	7918      	ldrb	r0, [r3, #4]
   2451e:	2300      	movs	r3, #0
   24520:	2200      	movs	r2, #0
   24522:	2100      	movs	r1, #0
   24524:	f7f2 fbb0 	bl	16c88 <DmSecLtkRsp>
}
   24528:	bf00      	nop
   2452a:	b005      	add	sp, #20
   2452c:	f85d fb04 	ldr.w	pc, [sp], #4

00024530 <appSlaveConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24530:	b500      	push	{lr}
   24532:	b083      	sub	sp, #12
   24534:	9001      	str	r0, [sp, #4]
   24536:	9100      	str	r1, [sp, #0]
  /* process connection open event */
  appSlaveProcConnOpen(pMsg, pCb);
   24538:	9900      	ldr	r1, [sp, #0]
   2453a:	9801      	ldr	r0, [sp, #4]
   2453c:	f000 f830 	bl	245a0 <appSlaveProcConnOpen>

  if (appSlaveCb.advRestartCback != NULL)
   24540:	4b08      	ldr	r3, [pc, #32]	; (24564 <appSlaveConnOpen+0x34>)
   24542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   24544:	2b00      	cmp	r3, #0
   24546:	d003      	beq.n	24550 <appSlaveConnOpen+0x20>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   24548:	4b06      	ldr	r3, [pc, #24]	; (24564 <appSlaveConnOpen+0x34>)
   2454a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   2454c:	9801      	ldr	r0, [sp, #4]
   2454e:	4798      	blx	r3
  }

  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   24550:	9b01      	ldr	r3, [sp, #4]
   24552:	881b      	ldrh	r3, [r3, #0]
   24554:	b2db      	uxtb	r3, r3
   24556:	4618      	mov	r0, r3
   24558:	f7f1 f86e 	bl	15638 <DmReadRemoteFeatures>
}
   2455c:	bf00      	nop
   2455e:	b003      	add	sp, #12
   24560:	f85d fb04 	ldr.w	pc, [sp], #4
   24564:	100079c8 	.word	0x100079c8

00024568 <appSlaveConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24568:	b500      	push	{lr}
   2456a:	b083      	sub	sp, #12
   2456c:	9001      	str	r0, [sp, #4]
   2456e:	9100      	str	r1, [sp, #0]
  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   24570:	9b00      	ldr	r3, [sp, #0]
   24572:	681b      	ldr	r3, [r3, #0]
   24574:	4618      	mov	r0, r3
   24576:	f7ff fbb9 	bl	23cec <AppUpdatePrivacyMode>

  /* process connection close event */
  appSlaveProcConnClose(pMsg, pCb);
   2457a:	9900      	ldr	r1, [sp, #0]
   2457c:	9801      	ldr	r0, [sp, #4]
   2457e:	f000 f84b 	bl	24618 <appSlaveProcConnClose>

  if (appSlaveCb.advRestartCback != NULL)
   24582:	4b06      	ldr	r3, [pc, #24]	; (2459c <appSlaveConnClose+0x34>)
   24584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   24586:	2b00      	cmp	r3, #0
   24588:	d003      	beq.n	24592 <appSlaveConnClose+0x2a>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   2458a:	4b04      	ldr	r3, [pc, #16]	; (2459c <appSlaveConnClose+0x34>)
   2458c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   2458e:	9801      	ldr	r0, [sp, #4]
   24590:	4798      	blx	r3
  }
}
   24592:	bf00      	nop
   24594:	b003      	add	sp, #12
   24596:	f85d fb04 	ldr.w	pc, [sp], #4
   2459a:	bf00      	nop
   2459c:	100079c8 	.word	0x100079c8

000245a0 <appSlaveProcConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   245a0:	b500      	push	{lr}
   245a2:	b083      	sub	sp, #12
   245a4:	9001      	str	r0, [sp, #4]
   245a6:	9100      	str	r1, [sp, #0]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   245a8:	9b01      	ldr	r3, [sp, #4]
   245aa:	881b      	ldrh	r3, [r3, #0]
   245ac:	b2da      	uxtb	r2, r3
   245ae:	9b00      	ldr	r3, [sp, #0]
   245b0:	711a      	strb	r2, [r3, #4]

  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   245b2:	4b18      	ldr	r3, [pc, #96]	; (24614 <appSlaveProcConnOpen+0x74>)
   245b4:	681b      	ldr	r3, [r3, #0]
   245b6:	681b      	ldr	r3, [r3, #0]
   245b8:	2b00      	cmp	r3, #0
   245ba:	d026      	beq.n	2460a <appSlaveProcConnOpen+0x6a>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   245bc:	9b01      	ldr	r3, [sp, #4]
   245be:	8a1a      	ldrh	r2, [r3, #16]
   245c0:	4b14      	ldr	r3, [pc, #80]	; (24614 <appSlaveProcConnOpen+0x74>)
   245c2:	681b      	ldr	r3, [r3, #0]
   245c4:	889b      	ldrh	r3, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   245c6:	429a      	cmp	r2, r3
   245c8:	d314      	bcc.n	245f4 <appSlaveProcConnOpen+0x54>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   245ca:	9b01      	ldr	r3, [sp, #4]
   245cc:	8a1a      	ldrh	r2, [r3, #16]
   245ce:	4b11      	ldr	r3, [pc, #68]	; (24614 <appSlaveProcConnOpen+0x74>)
   245d0:	681b      	ldr	r3, [r3, #0]
   245d2:	88db      	ldrh	r3, [r3, #6]
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   245d4:	429a      	cmp	r2, r3
   245d6:	d80d      	bhi.n	245f4 <appSlaveProcConnOpen+0x54>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   245d8:	9b01      	ldr	r3, [sp, #4]
   245da:	8a5a      	ldrh	r2, [r3, #18]
   245dc:	4b0d      	ldr	r3, [pc, #52]	; (24614 <appSlaveProcConnOpen+0x74>)
   245de:	681b      	ldr	r3, [r3, #0]
   245e0:	891b      	ldrh	r3, [r3, #8]
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   245e2:	429a      	cmp	r2, r3
   245e4:	d106      	bne.n	245f4 <appSlaveProcConnOpen+0x54>
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
   245e6:	9b01      	ldr	r3, [sp, #4]
   245e8:	8a9a      	ldrh	r2, [r3, #20]
   245ea:	4b0a      	ldr	r3, [pc, #40]	; (24614 <appSlaveProcConnOpen+0x74>)
   245ec:	681b      	ldr	r3, [r3, #0]
   245ee:	895b      	ldrh	r3, [r3, #10]
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   245f0:	429a      	cmp	r2, r3
   245f2:	d00a      	beq.n	2460a <appSlaveProcConnOpen+0x6a>
  {
    pCb->connWasIdle = FALSE;
   245f4:	9b00      	ldr	r3, [sp, #0]
   245f6:	2200      	movs	r2, #0
   245f8:	729a      	strb	r2, [r3, #10]
    pCb->attempts = 0;
   245fa:	9b00      	ldr	r3, [sp, #0]
   245fc:	2200      	movs	r2, #0
   245fe:	731a      	strb	r2, [r3, #12]
    appConnUpdateTimerStart(pCb->connId);
   24600:	9b00      	ldr	r3, [sp, #0]
   24602:	791b      	ldrb	r3, [r3, #4]
   24604:	4618      	mov	r0, r3
   24606:	f7ff fee9 	bl	243dc <appConnUpdateTimerStart>
  }
}
   2460a:	bf00      	nop
   2460c:	b003      	add	sp, #12
   2460e:	f85d fb04 	ldr.w	pc, [sp], #4
   24612:	bf00      	nop
   24614:	10007958 	.word	0x10007958

00024618 <appSlaveProcConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24618:	b500      	push	{lr}
   2461a:	b085      	sub	sp, #20
   2461c:	9001      	str	r0, [sp, #4]
   2461e:	9100      	str	r1, [sp, #0]
  uint8_t i;

  /* stop connection update timer */
  appConnUpdateTimerStop(pCb);
   24620:	9800      	ldr	r0, [sp, #0]
   24622:	f7ff ff07 	bl	24434 <appConnUpdateTimerStop>

  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   24626:	9b00      	ldr	r3, [sp, #0]
   24628:	2200      	movs	r2, #0
   2462a:	711a      	strb	r2, [r3, #4]

  /* clear update state */
  pCb->updateState = APP_CU_STATE_NONE;
   2462c:	9b00      	ldr	r3, [sp, #0]
   2462e:	2200      	movs	r2, #0
   24630:	735a      	strb	r2, [r3, #13]

  /* cancel any address resolution in progress */
  appSlaveCb.inProgress = FALSE;
   24632:	4b13      	ldr	r3, [pc, #76]	; (24680 <appSlaveProcConnClose+0x68>)
   24634:	2200      	movs	r2, #0
   24636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* if switching to connectable mode then set it up */
  if (pCb->setConnectable)
   2463a:	9b00      	ldr	r3, [sp, #0]
   2463c:	7a5b      	ldrb	r3, [r3, #9]
   2463e:	2b00      	cmp	r3, #0
   24640:	d019      	beq.n	24676 <appSlaveProcConnClose+0x5e>
  {
    pCb->setConnectable = FALSE;
   24642:	9b00      	ldr	r3, [sp, #0]
   24644:	2200      	movs	r2, #0
   24646:	725a      	strb	r2, [r3, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   24648:	4b0d      	ldr	r3, [pc, #52]	; (24680 <appSlaveProcConnClose+0x68>)
   2464a:	2200      	movs	r2, #0
   2464c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   24650:	2300      	movs	r3, #0
   24652:	f88d 300f 	strb.w	r3, [sp, #15]
   24656:	e00a      	b.n	2466e <appSlaveProcConnClose+0x56>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
   24658:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2465c:	2100      	movs	r1, #0
   2465e:	4618      	mov	r0, r3
   24660:	f7ff fd52 	bl	24108 <appSlaveForceAdvDataSync>
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   24664:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24668:	3301      	adds	r3, #1
   2466a:	f88d 300f 	strb.w	r3, [sp, #15]
   2466e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24672:	2b01      	cmp	r3, #1
   24674:	d9f0      	bls.n	24658 <appSlaveProcConnClose+0x40>
    }
  }
}
   24676:	bf00      	nop
   24678:	b005      	add	sp, #20
   2467a:	f85d fb04 	ldr.w	pc, [sp], #4
   2467e:	bf00      	nop
   24680:	100079c8 	.word	0x100079c8

00024684 <appSlaveConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdate(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24684:	b500      	push	{lr}
   24686:	b083      	sub	sp, #12
   24688:	9001      	str	r0, [sp, #4]
   2468a:	9100      	str	r1, [sp, #0]
  if (pAppUpdateCfg->idlePeriod != 0)
   2468c:	4b1a      	ldr	r3, [pc, #104]	; (246f8 <appSlaveConnUpdate+0x74>)
   2468e:	681b      	ldr	r3, [r3, #0]
   24690:	681b      	ldr	r3, [r3, #0]
   24692:	2b00      	cmp	r3, #0
   24694:	d02b      	beq.n	246ee <appSlaveConnUpdate+0x6a>
  {
    /* if successful */
    if (pMsg->hdr.status == HCI_SUCCESS)
   24696:	9b01      	ldr	r3, [sp, #4]
   24698:	78db      	ldrb	r3, [r3, #3]
   2469a:	2b00      	cmp	r3, #0
   2469c:	d117      	bne.n	246ce <appSlaveConnUpdate+0x4a>
      // so here we need to check if the connection parameter
      // meets slave's requirement, if not, we should not stop
      // the timer.

      // only check connection interval for now
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   2469e:	4b16      	ldr	r3, [pc, #88]	; (246f8 <appSlaveConnUpdate+0x74>)
   246a0:	681b      	ldr	r3, [r3, #0]
   246a2:	889a      	ldrh	r2, [r3, #4]
   246a4:	9b01      	ldr	r3, [sp, #4]
   246a6:	891b      	ldrh	r3, [r3, #8]
   246a8:	429a      	cmp	r2, r3
   246aa:	d80a      	bhi.n	246c2 <appSlaveConnUpdate+0x3e>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   246ac:	4b12      	ldr	r3, [pc, #72]	; (246f8 <appSlaveConnUpdate+0x74>)
   246ae:	681b      	ldr	r3, [r3, #0]
   246b0:	88da      	ldrh	r2, [r3, #6]
   246b2:	9b01      	ldr	r3, [sp, #4]
   246b4:	891b      	ldrh	r3, [r3, #8]
   246b6:	429a      	cmp	r2, r3
   246b8:	d303      	bcc.n	246c2 <appSlaveConnUpdate+0x3e>
      {
        appConnUpdateTimerStop(pCb);
   246ba:	9800      	ldr	r0, [sp, #0]
   246bc:	f7ff feba 	bl	24434 <appConnUpdateTimerStop>
    {
      /* start timer and try again */
      appConnUpdateTimerStart(pCb->connId);
    }
  }
}
   246c0:	e015      	b.n	246ee <appSlaveConnUpdate+0x6a>
        appConnUpdateTimerStart(pCb->connId);
   246c2:	9b00      	ldr	r3, [sp, #0]
   246c4:	791b      	ldrb	r3, [r3, #4]
   246c6:	4618      	mov	r0, r3
   246c8:	f7ff fe88 	bl	243dc <appConnUpdateTimerStart>
}
   246cc:	e00f      	b.n	246ee <appSlaveConnUpdate+0x6a>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   246ce:	9b01      	ldr	r3, [sp, #4]
   246d0:	78db      	ldrb	r3, [r3, #3]
   246d2:	2b0c      	cmp	r3, #12
   246d4:	d00b      	beq.n	246ee <appSlaveConnUpdate+0x6a>
   246d6:	9b00      	ldr	r3, [sp, #0]
   246d8:	7b1a      	ldrb	r2, [r3, #12]
   246da:	4b07      	ldr	r3, [pc, #28]	; (246f8 <appSlaveConnUpdate+0x74>)
   246dc:	681b      	ldr	r3, [r3, #0]
   246de:	7b1b      	ldrb	r3, [r3, #12]
   246e0:	429a      	cmp	r2, r3
   246e2:	d204      	bcs.n	246ee <appSlaveConnUpdate+0x6a>
      appConnUpdateTimerStart(pCb->connId);
   246e4:	9b00      	ldr	r3, [sp, #0]
   246e6:	791b      	ldrb	r3, [r3, #4]
   246e8:	4618      	mov	r0, r3
   246ea:	f7ff fe77 	bl	243dc <appConnUpdateTimerStart>
}
   246ee:	bf00      	nop
   246f0:	b003      	add	sp, #12
   246f2:	f85d fb04 	ldr.w	pc, [sp], #4
   246f6:	bf00      	nop
   246f8:	10007958 	.word	0x10007958

000246fc <appSlaveResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolvedAddrInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   246fc:	b500      	push	{lr}
   246fe:	b085      	sub	sp, #20
   24700:	9001      	str	r0, [sp, #4]
   24702:	9100      	str	r1, [sp, #0]
  dmSecKey_t *pPeerKey;

  /* if address resolution is not in progress */
  if (!appSlaveCb.inProgress)
   24704:	4b26      	ldr	r3, [pc, #152]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   24706:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   2470a:	2b00      	cmp	r3, #0
   2470c:	d044      	beq.n	24798 <appSlaveResolvedAddrInd+0x9c>
  {
    return;
  }

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   2470e:	9b01      	ldr	r3, [sp, #4]
   24710:	78db      	ldrb	r3, [r3, #3]
   24712:	2b00      	cmp	r3, #0
   24714:	d110      	bne.n	24738 <appSlaveResolvedAddrInd+0x3c>
  {
#ifdef AM_BLE_USE_NVM
    devFoundInDb = TRUE;
#endif
    /* record found */
    pCb->dbHdl = appSlaveCb.dbHdl;
   24716:	4b22      	ldr	r3, [pc, #136]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   24718:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2471a:	9b00      	ldr	r3, [sp, #0]
   2471c:	601a      	str	r2, [r3, #0]

    /* if LTK was requested while resolving master's address */
    if (appSlaveCb.findLtk)
   2471e:	4b20      	ldr	r3, [pc, #128]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   24720:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
   24724:	2b00      	cmp	r3, #0
   24726:	d032      	beq.n	2478e <appSlaveResolvedAddrInd+0x92>
    {
      /* respond to LTK request */
      appSecRspLtk(pCb);
   24728:	9800      	ldr	r0, [sp, #0]
   2472a:	f7ff fecb 	bl	244c4 <appSecRspLtk>

      appSlaveCb.findLtk = FALSE;
   2472e:	4b1c      	ldr	r3, [pc, #112]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   24730:	2200      	movs	r2, #0
   24732:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
   24736:	e02a      	b.n	2478e <appSlaveResolvedAddrInd+0x92>
    }
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   24738:	9b01      	ldr	r3, [sp, #4]
   2473a:	78db      	ldrb	r3, [r3, #3]
   2473c:	2b05      	cmp	r3, #5
   2473e:	d126      	bne.n	2478e <appSlaveResolvedAddrInd+0x92>
   24740:	4b17      	ldr	r3, [pc, #92]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   24742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   24744:	2b00      	cmp	r3, #0
   24746:	d022      	beq.n	2478e <appSlaveResolvedAddrInd+0x92>
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   24748:	4b15      	ldr	r3, [pc, #84]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   2474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   2474c:	4618      	mov	r0, r3
   2474e:	f7e7 feb7 	bl	c4c0 <AppDbGetNextRecord>
   24752:	4603      	mov	r3, r0
   24754:	4a12      	ldr	r2, [pc, #72]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   24756:	6713      	str	r3, [r2, #112]	; 0x70

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   24758:	4b11      	ldr	r3, [pc, #68]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   2475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   2475c:	2b00      	cmp	r3, #0
   2475e:	d016      	beq.n	2478e <appSlaveResolvedAddrInd+0x92>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   24760:	4b0f      	ldr	r3, [pc, #60]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   24762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   24764:	2200      	movs	r2, #0
   24766:	2104      	movs	r1, #4
   24768:	4618      	mov	r0, r3
   2476a:	f7e7 ffe9 	bl	c740 <AppDbGetKey>
   2476e:	9003      	str	r0, [sp, #12]
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   24770:	9b03      	ldr	r3, [sp, #12]
   24772:	2b00      	cmp	r3, #0
   24774:	d00b      	beq.n	2478e <appSlaveResolvedAddrInd+0x92>
    {
      /* resolve RPA using the next stored IRK */
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   24776:	9b00      	ldr	r3, [sp, #0]
   24778:	791b      	ldrb	r3, [r3, #4]
   2477a:	4618      	mov	r0, r3
   2477c:	f7f1 f8b8 	bl	158f0 <DmConnPeerAddr>
   24780:	9903      	ldr	r1, [sp, #12]
   24782:	9b01      	ldr	r3, [sp, #4]
   24784:	881b      	ldrh	r3, [r3, #0]
   24786:	461a      	mov	r2, r3
   24788:	f7f1 ff0a 	bl	165a0 <DmPrivResolveAddr>

      /* not done yet */
      return;
   2478c:	e005      	b.n	2479a <appSlaveResolvedAddrInd+0x9e>
    }
  }

  /* done with this address resolution */
  appSlaveCb.inProgress = FALSE;
   2478e:	4b04      	ldr	r3, [pc, #16]	; (247a0 <appSlaveResolvedAddrInd+0xa4>)
   24790:	2200      	movs	r2, #0
   24792:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   24796:	e000      	b.n	2479a <appSlaveResolvedAddrInd+0x9e>
    return;
   24798:	bf00      	nop
}
   2479a:	b005      	add	sp, #20
   2479c:	f85d fb04 	ldr.w	pc, [sp], #4
   247a0:	100079c8 	.word	0x100079c8

000247a4 <appSlaveRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   247a4:	b500      	push	{lr}
   247a6:	b087      	sub	sp, #28
   247a8:	9001      	str	r0, [sp, #4]
   247aa:	9100      	str	r1, [sp, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   247ac:	4b19      	ldr	r3, [pc, #100]	; (24814 <appSlaveRemoteConnParamReq+0x70>)
   247ae:	681b      	ldr	r3, [r3, #0]
   247b0:	781b      	ldrb	r3, [r3, #0]
   247b2:	2b00      	cmp	r3, #0
   247b4:	d11e      	bne.n	247f4 <appSlaveRemoteConnParamReq+0x50>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   247b6:	9b01      	ldr	r3, [sp, #4]
   247b8:	88db      	ldrh	r3, [r3, #6]
   247ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   247be:	9b01      	ldr	r3, [sp, #4]
   247c0:	891b      	ldrh	r3, [r3, #8]
   247c2:	f8ad 300e 	strh.w	r3, [sp, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   247c6:	9b01      	ldr	r3, [sp, #4]
   247c8:	895b      	ldrh	r3, [r3, #10]
   247ca:	f8ad 3010 	strh.w	r3, [sp, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   247ce:	9b01      	ldr	r3, [sp, #4]
   247d0:	899b      	ldrh	r3, [r3, #12]
   247d2:	f8ad 3012 	strh.w	r3, [sp, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   247d6:	2300      	movs	r3, #0
   247d8:	f8ad 3016 	strh.w	r3, [sp, #22]
   247dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   247e0:	f8ad 3014 	strh.w	r3, [sp, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   247e4:	9b00      	ldr	r3, [sp, #0]
   247e6:	791b      	ldrb	r3, [r3, #4]
   247e8:	aa03      	add	r2, sp, #12
   247ea:	4611      	mov	r1, r2
   247ec:	4618      	mov	r0, r3
   247ee:	f7f0 ffaf 	bl	15750 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   247f2:	e00a      	b.n	2480a <appSlaveRemoteConnParamReq+0x66>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   247f4:	4b07      	ldr	r3, [pc, #28]	; (24814 <appSlaveRemoteConnParamReq+0x70>)
   247f6:	681b      	ldr	r3, [r3, #0]
   247f8:	781b      	ldrb	r3, [r3, #0]
   247fa:	2b01      	cmp	r3, #1
   247fc:	d105      	bne.n	2480a <appSlaveRemoteConnParamReq+0x66>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   247fe:	9b00      	ldr	r3, [sp, #0]
   24800:	791b      	ldrb	r3, [r3, #4]
   24802:	2111      	movs	r1, #17
   24804:	4618      	mov	r0, r3
   24806:	f7f0 ffcb 	bl	157a0 <DmRemoteConnParamReqNegReply>
}
   2480a:	bf00      	nop
   2480c:	b007      	add	sp, #28
   2480e:	f85d fb04 	ldr.w	pc, [sp], #4
   24812:	bf00      	nop
   24814:	10002cd4 	.word	0x10002cd4

00024818 <appSlaveSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24818:	b500      	push	{lr}
   2481a:	b083      	sub	sp, #12
   2481c:	9001      	str	r0, [sp, #4]
   2481e:	9100      	str	r1, [sp, #0]
  /* initialize state variables */
  // don't reset bonded flag which will overwrite saved bonded status.
  // pCb->bonded = FALSE;
  pCb->bondByLtk = FALSE;
   24820:	9b00      	ldr	r3, [sp, #0]
   24822:	2200      	movs	r2, #0
   24824:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   24826:	9b00      	ldr	r3, [sp, #0]
   24828:	2200      	movs	r2, #0
   2482a:	71da      	strb	r2, [r3, #7]

  /* find record for peer device */
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   2482c:	9b01      	ldr	r3, [sp, #4]
   2482e:	7a5a      	ldrb	r2, [r3, #9]
   24830:	9b01      	ldr	r3, [sp, #4]
   24832:	330a      	adds	r3, #10
   24834:	4619      	mov	r1, r3
   24836:	4610      	mov	r0, r2
   24838:	f7e7 ff0e 	bl	c658 <AppDbFindByAddr>
   2483c:	4602      	mov	r2, r0
   2483e:	9b00      	ldr	r3, [sp, #0]
   24840:	601a      	str	r2, [r3, #0]

  /* if record not found and the peer device uses an RPA */
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   24842:	9b00      	ldr	r3, [sp, #0]
   24844:	681b      	ldr	r3, [r3, #0]
   24846:	2b00      	cmp	r3, #0
   24848:	d10c      	bne.n	24864 <appSlaveSecConnOpen+0x4c>
   2484a:	9b01      	ldr	r3, [sp, #4]
   2484c:	7a5b      	ldrb	r3, [r3, #9]
   2484e:	2b01      	cmp	r3, #1
   24850:	d108      	bne.n	24864 <appSlaveSecConnOpen+0x4c>
   24852:	9b01      	ldr	r3, [sp, #4]
   24854:	7bdb      	ldrb	r3, [r3, #15]
   24856:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2485a:	2b40      	cmp	r3, #64	; 0x40
   2485c:	d102      	bne.n	24864 <appSlaveSecConnOpen+0x4c>
  {
    /* resolve master's RPA to see if we already have a bond with this device */
    appSlaveResolveAddr(pMsg);
   2485e:	9801      	ldr	r0, [sp, #4]
   24860:	f7ff fdfc 	bl	2445c <appSlaveResolveAddr>
    devFoundInDb = TRUE;
  }
#endif
  
  /* send slave security request if configured to do so */
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   24864:	4b0b      	ldr	r3, [pc, #44]	; (24894 <appSlaveSecConnOpen+0x7c>)
   24866:	681b      	ldr	r3, [r3, #0]
   24868:	791b      	ldrb	r3, [r3, #4]
   2486a:	2b00      	cmp	r3, #0
   2486c:	d00e      	beq.n	2488c <appSlaveSecConnOpen+0x74>
   2486e:	f7e7 feaf 	bl	c5d0 <AppDbCheckBonded>
   24872:	4603      	mov	r3, r0
   24874:	2b00      	cmp	r3, #0
   24876:	d009      	beq.n	2488c <appSlaveSecConnOpen+0x74>
  {
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   24878:	9b01      	ldr	r3, [sp, #4]
   2487a:	881b      	ldrh	r3, [r3, #0]
   2487c:	b2da      	uxtb	r2, r3
   2487e:	4b05      	ldr	r3, [pc, #20]	; (24894 <appSlaveSecConnOpen+0x7c>)
   24880:	681b      	ldr	r3, [r3, #0]
   24882:	781b      	ldrb	r3, [r3, #0]
   24884:	4619      	mov	r1, r3
   24886:	4610      	mov	r0, r2
   24888:	f7f2 f9db 	bl	16c42 <DmSecSlaveReq>
  }
}
   2488c:	bf00      	nop
   2488e:	b003      	add	sp, #12
   24890:	f85d fb04 	ldr.w	pc, [sp], #4
   24894:	10007954 	.word	0x10007954

00024898 <appSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24898:	b500      	push	{lr}
   2489a:	b083      	sub	sp, #12
   2489c:	9001      	str	r0, [sp, #4]
   2489e:	9100      	str	r1, [sp, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   248a0:	9b00      	ldr	r3, [sp, #0]
   248a2:	681b      	ldr	r3, [r3, #0]
   248a4:	2b00      	cmp	r3, #0
   248a6:	d004      	beq.n	248b2 <appSecConnClose+0x1a>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   248a8:	9b00      	ldr	r3, [sp, #0]
   248aa:	681b      	ldr	r3, [r3, #0]
   248ac:	4618      	mov	r0, r3
   248ae:	f7e7 fe55 	bl	c55c <AppDbCheckValidRecord>
  }
#ifdef AM_BLE_USE_NVM
  devFoundInDb = FALSE;
#endif
}
   248b2:	bf00      	nop
   248b4:	b003      	add	sp, #12
   248b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000248bc <appSecPairInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   248bc:	b510      	push	{r4, lr}
   248be:	b086      	sub	sp, #24
   248c0:	9003      	str	r0, [sp, #12]
   248c2:	9102      	str	r1, [sp, #8]
  uint8_t rKeyDist;

  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   248c4:	4b44      	ldr	r3, [pc, #272]	; (249d8 <appSecPairInd+0x11c>)
   248c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   248ca:	2b00      	cmp	r3, #0
   248cc:	d111      	bne.n	248f2 <appSecPairInd+0x36>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   248ce:	9b03      	ldr	r3, [sp, #12]
   248d0:	791b      	ldrb	r3, [r3, #4]
   248d2:	f003 0301 	and.w	r3, r3, #1
  if (appSlaveCb.bondable ||
   248d6:	2b00      	cmp	r3, #0
   248d8:	d00b      	beq.n	248f2 <appSecPairInd+0x36>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   248da:	9b02      	ldr	r3, [sp, #8]
   248dc:	795b      	ldrb	r3, [r3, #5]
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   248de:	2b00      	cmp	r3, #0
   248e0:	d06f      	beq.n	249c2 <appSecPairInd+0x106>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   248e2:	9b02      	ldr	r3, [sp, #8]
   248e4:	791b      	ldrb	r3, [r3, #4]
   248e6:	4618      	mov	r0, r3
   248e8:	f7f1 f864 	bl	159b4 <DmConnSecLevel>
   248ec:	4603      	mov	r3, r0
   248ee:	2b00      	cmp	r3, #0
   248f0:	d167      	bne.n	249c2 <appSecPairInd+0x106>
  {
    /* store bonding state:  if peer is requesting bonding and we want bonding */
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   248f2:	9b03      	ldr	r3, [sp, #12]
   248f4:	791a      	ldrb	r2, [r3, #4]
   248f6:	4b39      	ldr	r3, [pc, #228]	; (249dc <appSecPairInd+0x120>)
   248f8:	681b      	ldr	r3, [r3, #0]
   248fa:	781b      	ldrb	r3, [r3, #0]
   248fc:	4013      	ands	r3, r2
   248fe:	b2db      	uxtb	r3, r3
   24900:	f003 0301 	and.w	r3, r3, #1
   24904:	2b00      	cmp	r3, #0
   24906:	bf14      	ite	ne
   24908:	2301      	movne	r3, #1
   2490a:	2300      	moveq	r3, #0
   2490c:	b2db      	uxtb	r3, r3
   2490e:	461a      	mov	r2, r3
   24910:	9b02      	ldr	r3, [sp, #8]
   24912:	71da      	strb	r2, [r3, #7]

    /* if bonding and no device record */
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   24914:	9b02      	ldr	r3, [sp, #8]
   24916:	79db      	ldrb	r3, [r3, #7]
   24918:	2b00      	cmp	r3, #0
   2491a:	d018      	beq.n	2494e <appSecPairInd+0x92>
   2491c:	9b02      	ldr	r3, [sp, #8]
   2491e:	681b      	ldr	r3, [r3, #0]
   24920:	2b00      	cmp	r3, #0
   24922:	d114      	bne.n	2494e <appSecPairInd+0x92>
    {
      /* create a device record if none exists */
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId), FALSE);
   24924:	9b02      	ldr	r3, [sp, #8]
   24926:	791b      	ldrb	r3, [r3, #4]
   24928:	4618      	mov	r0, r3
   2492a:	f7f0 ffcd 	bl	158c8 <DmConnPeerAddrType>
   2492e:	4603      	mov	r3, r0
   24930:	461c      	mov	r4, r3
   24932:	9b02      	ldr	r3, [sp, #8]
   24934:	791b      	ldrb	r3, [r3, #4]
   24936:	4618      	mov	r0, r3
   24938:	f7f0 ffda 	bl	158f0 <DmConnPeerAddr>
   2493c:	4603      	mov	r3, r0
   2493e:	2200      	movs	r2, #0
   24940:	4619      	mov	r1, r3
   24942:	4620      	mov	r0, r4
   24944:	f7e7 fd5c 	bl	c400 <AppDbNewRecord>
   24948:	4602      	mov	r2, r0
   2494a:	9b02      	ldr	r3, [sp, #8]
   2494c:	601a      	str	r2, [r3, #0]
    }

    /* initialize stored keys */
    pCb->rcvdKeys = 0;
   2494e:	9b02      	ldr	r3, [sp, #8]
   24950:	2200      	movs	r2, #0
   24952:	72da      	strb	r2, [r3, #11]

    /* initialize key distribution */
    rKeyDist = pAppSecCfg->rKeyDist;
   24954:	4b21      	ldr	r3, [pc, #132]	; (249dc <appSecPairInd+0x120>)
   24956:	681b      	ldr	r3, [r3, #0]
   24958:	789b      	ldrb	r3, [r3, #2]
   2495a:	f88d 3016 	strb.w	r3, [sp, #22]
    iKeyDist = pAppSecCfg->iKeyDist;
   2495e:	4b1f      	ldr	r3, [pc, #124]	; (249dc <appSecPairInd+0x120>)
   24960:	681b      	ldr	r3, [r3, #0]
   24962:	785b      	ldrb	r3, [r3, #1]
   24964:	f88d 3017 	strb.w	r3, [sp, #23]

    /* if peer is using random address request IRK */
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   24968:	9b02      	ldr	r3, [sp, #8]
   2496a:	791b      	ldrb	r3, [r3, #4]
   2496c:	4618      	mov	r0, r3
   2496e:	f7f0 ffab 	bl	158c8 <DmConnPeerAddrType>
   24972:	4603      	mov	r3, r0
   24974:	2b01      	cmp	r3, #1
   24976:	d105      	bne.n	24984 <appSecPairInd+0xc8>
    {
      iKeyDist |= DM_KEY_DIST_IRK;
   24978:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2497c:	f043 0302 	orr.w	r3, r3, #2
   24980:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    /* only distribute keys both sides have agreed to */
    rKeyDist &= pMsg->pairInd.rKeyDist;
   24984:	9b03      	ldr	r3, [sp, #12]
   24986:	79da      	ldrb	r2, [r3, #7]
   24988:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2498c:	4013      	ands	r3, r2
   2498e:	f88d 3016 	strb.w	r3, [sp, #22]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   24992:	9b03      	ldr	r3, [sp, #12]
   24994:	799a      	ldrb	r2, [r3, #6]
   24996:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2499a:	4013      	ands	r3, r2
   2499c:	f88d 3017 	strb.w	r3, [sp, #23]

    /* accept pairing request */
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   249a0:	9b02      	ldr	r3, [sp, #8]
   249a2:	7918      	ldrb	r0, [r3, #4]
   249a4:	4b0d      	ldr	r3, [pc, #52]	; (249dc <appSecPairInd+0x120>)
   249a6:	681b      	ldr	r3, [r3, #0]
   249a8:	78d9      	ldrb	r1, [r3, #3]
   249aa:	4b0c      	ldr	r3, [pc, #48]	; (249dc <appSecPairInd+0x120>)
   249ac:	681b      	ldr	r3, [r3, #0]
   249ae:	781a      	ldrb	r2, [r3, #0]
   249b0:	f89d 4017 	ldrb.w	r4, [sp, #23]
   249b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   249b8:	9300      	str	r3, [sp, #0]
   249ba:	4623      	mov	r3, r4
   249bc:	f7f2 f904 	bl	16bc8 <DmSecPairRsp>
   249c0:	e006      	b.n	249d0 <appSecPairInd+0x114>
  }
  /* otherwise reject pairing request */
  else
  {
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   249c2:	9b02      	ldr	r3, [sp, #8]
   249c4:	791b      	ldrb	r3, [r3, #4]
   249c6:	2105      	movs	r1, #5
   249c8:	4618      	mov	r0, r3
   249ca:	f7f1 ffc3 	bl	16954 <DmSecCancelReq>
  }
}
   249ce:	bf00      	nop
   249d0:	bf00      	nop
   249d2:	b006      	add	sp, #24
   249d4:	bd10      	pop	{r4, pc}
   249d6:	bf00      	nop
   249d8:	100079c8 	.word	0x100079c8
   249dc:	10007954 	.word	0x10007954

000249e0 <appSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   249e0:	b500      	push	{lr}
   249e2:	b083      	sub	sp, #12
   249e4:	9001      	str	r0, [sp, #4]
   249e6:	9100      	str	r1, [sp, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   249e8:	9b00      	ldr	r3, [sp, #0]
   249ea:	79db      	ldrb	r3, [r3, #7]
   249ec:	2b00      	cmp	r3, #0
   249ee:	d012      	beq.n	24a16 <appSecStoreKey+0x36>
   249f0:	9b00      	ldr	r3, [sp, #0]
   249f2:	681b      	ldr	r3, [r3, #0]
   249f4:	2b00      	cmp	r3, #0
   249f6:	d00e      	beq.n	24a16 <appSecStoreKey+0x36>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   249f8:	9b00      	ldr	r3, [sp, #0]
   249fa:	7ada      	ldrb	r2, [r3, #11]
   249fc:	9b01      	ldr	r3, [sp, #4]
   249fe:	7f9b      	ldrb	r3, [r3, #30]
   24a00:	4313      	orrs	r3, r2
   24a02:	b2da      	uxtb	r2, r3
   24a04:	9b00      	ldr	r3, [sp, #0]
   24a06:	72da      	strb	r2, [r3, #11]

    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   24a08:	9b00      	ldr	r3, [sp, #0]
   24a0a:	681b      	ldr	r3, [r3, #0]
   24a0c:	9a01      	ldr	r2, [sp, #4]
   24a0e:	4611      	mov	r1, r2
   24a10:	4618      	mov	r0, r3
   24a12:	f7e7 fee1 	bl	c7d8 <AppDbSetKey>
  }
}
   24a16:	bf00      	nop
   24a18:	b003      	add	sp, #12
   24a1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00024a20 <appSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24a20:	b500      	push	{lr}
   24a22:	b083      	sub	sp, #12
   24a24:	9001      	str	r0, [sp, #4]
   24a26:	9100      	str	r1, [sp, #0]
  /* if bonding */
  if (pCb->bondByPairing)
   24a28:	9b00      	ldr	r3, [sp, #0]
   24a2a:	79db      	ldrb	r3, [r3, #7]
   24a2c:	2b00      	cmp	r3, #0
   24a2e:	d023      	beq.n	24a78 <appSecPairCmpl+0x58>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   24a30:	9b00      	ldr	r3, [sp, #0]
   24a32:	2201      	movs	r2, #1
   24a34:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   24a36:	9b00      	ldr	r3, [sp, #0]
   24a38:	681b      	ldr	r3, [r3, #0]
   24a3a:	2b00      	cmp	r3, #0
   24a3c:	d007      	beq.n	24a4e <appSecPairCmpl+0x2e>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   24a3e:	9b00      	ldr	r3, [sp, #0]
   24a40:	681a      	ldr	r2, [r3, #0]
   24a42:	9b00      	ldr	r3, [sp, #0]
   24a44:	7adb      	ldrb	r3, [r3, #11]
   24a46:	4619      	mov	r1, r3
   24a48:	4610      	mov	r0, r2
   24a4a:	f7e7 fd76 	bl	c53a <AppDbValidateRecord>
    }

    /* if bonded clear bondable mode */
    AppSetBondable(FALSE);
   24a4e:	2000      	movs	r0, #0
   24a50:	f000 fc8e 	bl	25370 <AppSetBondable>

    /* if discoverable switch to connectable mode when connection closes */
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   24a54:	4b0a      	ldr	r3, [pc, #40]	; (24a80 <appSecPairCmpl+0x60>)
   24a56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   24a5a:	2b01      	cmp	r3, #1
   24a5c:	d102      	bne.n	24a64 <appSecPairCmpl+0x44>
    {
      pCb->setConnectable = TRUE;
   24a5e:	9b00      	ldr	r3, [sp, #0]
   24a60:	2201      	movs	r2, #1
   24a62:	725a      	strb	r2, [r3, #9]
    }

    /*  if bonded and device is using static or public address add device to white list */

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   24a64:	9b00      	ldr	r3, [sp, #0]
   24a66:	681b      	ldr	r3, [r3, #0]
   24a68:	2b00      	cmp	r3, #0
   24a6a:	d005      	beq.n	24a78 <appSecPairCmpl+0x58>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   24a6c:	9b00      	ldr	r3, [sp, #0]
   24a6e:	791b      	ldrb	r3, [r3, #4]
   24a70:	4619      	mov	r1, r3
   24a72:	9801      	ldr	r0, [sp, #4]
   24a74:	f7ff f8f0 	bl	23c58 <AppAddDevToResList>
    }
  }
}
   24a78:	bf00      	nop
   24a7a:	b003      	add	sp, #12
   24a7c:	f85d fb04 	ldr.w	pc, [sp], #4
   24a80:	100079c8 	.word	0x100079c8

00024a84 <appSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24a84:	b082      	sub	sp, #8
   24a86:	9001      	str	r0, [sp, #4]
   24a88:	9100      	str	r1, [sp, #0]
  return;
   24a8a:	bf00      	nop
}
   24a8c:	b002      	add	sp, #8
   24a8e:	4770      	bx	lr

00024a90 <appSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24a90:	b082      	sub	sp, #8
   24a92:	9001      	str	r0, [sp, #4]
   24a94:	9100      	str	r1, [sp, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   24a96:	9b00      	ldr	r3, [sp, #0]
   24a98:	799b      	ldrb	r3, [r3, #6]
   24a9a:	2b00      	cmp	r3, #0
   24a9c:	d009      	beq.n	24ab2 <appSecEncryptInd+0x22>
   24a9e:	9b01      	ldr	r3, [sp, #4]
   24aa0:	791b      	ldrb	r3, [r3, #4]
   24aa2:	2b00      	cmp	r3, #0
   24aa4:	d005      	beq.n	24ab2 <appSecEncryptInd+0x22>
  {
    pCb->bonded = TRUE;
   24aa6:	9b00      	ldr	r3, [sp, #0]
   24aa8:	2201      	movs	r2, #1
   24aaa:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   24aac:	9b00      	ldr	r3, [sp, #0]
   24aae:	2200      	movs	r2, #0
   24ab0:	719a      	strb	r2, [r3, #6]
            }
        }
    }
  }
#endif
}
   24ab2:	bf00      	nop
   24ab4:	b002      	add	sp, #8
   24ab6:	4770      	bx	lr

00024ab8 <appSecFindLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecFindLtk(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24ab8:	b500      	push	{lr}
   24aba:	b083      	sub	sp, #12
   24abc:	9001      	str	r0, [sp, #4]
   24abe:	9100      	str	r1, [sp, #0]
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   24ac0:	9b00      	ldr	r3, [sp, #0]
   24ac2:	681b      	ldr	r3, [r3, #0]
   24ac4:	2b00      	cmp	r3, #0
   24ac6:	d12b      	bne.n	24b20 <appSecFindLtk+0x68>
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   24ac8:	9b01      	ldr	r3, [sp, #4]
   24aca:	89db      	ldrh	r3, [r3, #14]
   24acc:	2b00      	cmp	r3, #0
   24ace:	d109      	bne.n	24ae4 <appSecFindLtk+0x2c>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   24ad0:	9b01      	ldr	r3, [sp, #4]
   24ad2:	3306      	adds	r3, #6
   24ad4:	2208      	movs	r2, #8
   24ad6:	4915      	ldr	r1, [pc, #84]	; (24b2c <appSecFindLtk+0x74>)
   24ad8:	4618      	mov	r0, r3
   24ada:	f000 fdbd 	bl	25658 <memcmp>
   24ade:	4603      	mov	r3, r0
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   24ae0:	2b00      	cmp	r3, #0
   24ae2:	d013      	beq.n	24b0c <appSecFindLtk+0x54>
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   24ae4:	9b01      	ldr	r3, [sp, #4]
   24ae6:	89da      	ldrh	r2, [r3, #14]
   24ae8:	9b01      	ldr	r3, [sp, #4]
   24aea:	3306      	adds	r3, #6
   24aec:	4619      	mov	r1, r3
   24aee:	4610      	mov	r0, r2
   24af0:	f7e7 fdee 	bl	c6d0 <AppDbFindByLtkReq>
   24af4:	4602      	mov	r2, r0
   24af6:	9b00      	ldr	r3, [sp, #0]
   24af8:	601a      	str	r2, [r3, #0]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   24afa:	9b00      	ldr	r3, [sp, #0]
   24afc:	681b      	ldr	r3, [r3, #0]
   24afe:	2b00      	cmp	r3, #0
   24b00:	d00e      	beq.n	24b20 <appSecFindLtk+0x68>
      {
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
   24b02:	4b0b      	ldr	r3, [pc, #44]	; (24b30 <appSecFindLtk+0x78>)
   24b04:	2200      	movs	r2, #0
   24b06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   24b0a:	e009      	b.n	24b20 <appSecFindLtk+0x68>
      }
    }
    /* if address resolution in progress */
    else if (appSlaveCb.inProgress)
   24b0c:	4b08      	ldr	r3, [pc, #32]	; (24b30 <appSecFindLtk+0x78>)
   24b0e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   24b12:	2b00      	cmp	r3, #0
   24b14:	d004      	beq.n	24b20 <appSecFindLtk+0x68>
    {
      /* postpone LTK look up till address resolution is completed */
      appSlaveCb.findLtk = TRUE;
   24b16:	4b06      	ldr	r3, [pc, #24]	; (24b30 <appSecFindLtk+0x78>)
   24b18:	2201      	movs	r2, #1
   24b1a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      return;
   24b1e:	e002      	b.n	24b26 <appSecFindLtk+0x6e>
    }
  }

  /* respond to LTK request */
  appSecRspLtk(pCb);
   24b20:	9800      	ldr	r0, [sp, #0]
   24b22:	f7ff fccf 	bl	244c4 <appSecRspLtk>
}
   24b26:	b003      	add	sp, #12
   24b28:	f85d fb04 	ldr.w	pc, [sp], #4
   24b2c:	00027d50 	.word	0x00027d50
   24b30:	100079c8 	.word	0x100079c8

00024b34 <appPrivSetAddrResEnableInd>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   24b34:	b500      	push	{lr}
   24b36:	b083      	sub	sp, #12
   24b38:	9001      	str	r0, [sp, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   24b3a:	9b01      	ldr	r3, [sp, #4]
   24b3c:	78db      	ldrb	r3, [r3, #3]
   24b3e:	2b00      	cmp	r3, #0
   24b40:	d105      	bne.n	24b4e <appPrivSetAddrResEnableInd+0x1a>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   24b42:	f7f1 fac1 	bl	160c8 <DmLlPrivEnabled>
   24b46:	4603      	mov	r3, r0
   24b48:	4618      	mov	r0, r3
   24b4a:	f7fe ff1f 	bl	2398c <SvcCoreGapCentAddrResUpdate>
  }
}
   24b4e:	bf00      	nop
   24b50:	b003      	add	sp, #12
   24b52:	f85d fb04 	ldr.w	pc, [sp], #4

00024b56 <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24b56:	b500      	push	{lr}
   24b58:	b083      	sub	sp, #12
   24b5a:	9001      	str	r0, [sp, #4]
   24b5c:	9100      	str	r1, [sp, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   24b5e:	9b01      	ldr	r3, [sp, #4]
   24b60:	78db      	ldrb	r3, [r3, #3]
   24b62:	2b00      	cmp	r3, #0
   24b64:	d109      	bne.n	24b7a <appPrivAddDevToResListInd+0x24>
   24b66:	9b00      	ldr	r3, [sp, #0]
   24b68:	681b      	ldr	r3, [r3, #0]
   24b6a:	2b00      	cmp	r3, #0
   24b6c:	d005      	beq.n	24b7a <appPrivAddDevToResListInd+0x24>
  {
    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   24b6e:	9b00      	ldr	r3, [sp, #0]
   24b70:	681b      	ldr	r3, [r3, #0]
   24b72:	2101      	movs	r1, #1
   24b74:	4618      	mov	r0, r3
   24b76:	f7e7 ff53 	bl	ca20 <AppDbSetPeerAddedToRl>
  }
}
   24b7a:	bf00      	nop
   24b7c:	b003      	add	sp, #12
   24b7e:	f85d fb04 	ldr.w	pc, [sp], #4

00024b82 <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   24b82:	b500      	push	{lr}
   24b84:	b083      	sub	sp, #12
   24b86:	9001      	str	r0, [sp, #4]
   24b88:	9100      	str	r1, [sp, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   24b8a:	9b01      	ldr	r3, [sp, #4]
   24b8c:	78db      	ldrb	r3, [r3, #3]
   24b8e:	2b00      	cmp	r3, #0
   24b90:	d109      	bne.n	24ba6 <appPrivRemDevFromResListInd+0x24>
   24b92:	9b00      	ldr	r3, [sp, #0]
   24b94:	681b      	ldr	r3, [r3, #0]
   24b96:	2b00      	cmp	r3, #0
   24b98:	d005      	beq.n	24ba6 <appPrivRemDevFromResListInd+0x24>
  {
    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   24b9a:	9b00      	ldr	r3, [sp, #0]
   24b9c:	681b      	ldr	r3, [r3, #0]
   24b9e:	2100      	movs	r1, #0
   24ba0:	4618      	mov	r0, r3
   24ba2:	f7e7 ff3d 	bl	ca20 <AppDbSetPeerAddedToRl>
  }
}
   24ba6:	bf00      	nop
   24ba8:	b003      	add	sp, #12
   24baa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00024bb0 <appSlaveConnUpdateTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdateTimeout(wsfMsgHdr_t *pMsg, appConnCb_t *pCb)
{
   24bb0:	b500      	push	{lr}
   24bb2:	b087      	sub	sp, #28
   24bb4:	9001      	str	r0, [sp, #4]
   24bb6:	9100      	str	r1, [sp, #0]
  hciConnSpec_t connSpec;
  bool_t        idle;

  /* Change state to updating */
  pCb->updateState = APP_CU_STATE_UPDATING;
   24bb8:	9b00      	ldr	r3, [sp, #0]
   24bba:	2202      	movs	r2, #2
   24bbc:	735a      	strb	r2, [r3, #13]

  /* check if connection is idle */
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   24bbe:	9b00      	ldr	r3, [sp, #0]
   24bc0:	791b      	ldrb	r3, [r3, #4]
   24bc2:	4618      	mov	r0, r3
   24bc4:	f7f0 ff66 	bl	15a94 <DmConnCheckIdle>
   24bc8:	4603      	mov	r3, r0
   24bca:	2b00      	cmp	r3, #0
   24bcc:	bf0c      	ite	eq
   24bce:	2301      	moveq	r3, #1
   24bd0:	2300      	movne	r3, #0
   24bd2:	b2db      	uxtb	r3, r3
   24bd4:	f88d 3017 	strb.w	r3, [sp, #23]

  /* if connection is idle and was also idle on last check */
  if (idle && pCb->connWasIdle)
   24bd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   24bdc:	2b00      	cmp	r3, #0
   24bde:	d02c      	beq.n	24c3a <appSlaveConnUpdateTimeout+0x8a>
   24be0:	9b00      	ldr	r3, [sp, #0]
   24be2:	7a9b      	ldrb	r3, [r3, #10]
   24be4:	2b00      	cmp	r3, #0
   24be6:	d028      	beq.n	24c3a <appSlaveConnUpdateTimeout+0x8a>
  {
    /* do update */
    pCb->attempts++;
   24be8:	9b00      	ldr	r3, [sp, #0]
   24bea:	7b1b      	ldrb	r3, [r3, #12]
   24bec:	3301      	adds	r3, #1
   24bee:	b2da      	uxtb	r2, r3
   24bf0:	9b00      	ldr	r3, [sp, #0]
   24bf2:	731a      	strb	r2, [r3, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   24bf4:	4b18      	ldr	r3, [pc, #96]	; (24c58 <appSlaveConnUpdateTimeout+0xa8>)
   24bf6:	681b      	ldr	r3, [r3, #0]
   24bf8:	889b      	ldrh	r3, [r3, #4]
   24bfa:	f8ad 3008 	strh.w	r3, [sp, #8]
    connSpec.connIntervalMax = pAppUpdateCfg->connIntervalMax;
   24bfe:	4b16      	ldr	r3, [pc, #88]	; (24c58 <appSlaveConnUpdateTimeout+0xa8>)
   24c00:	681b      	ldr	r3, [r3, #0]
   24c02:	88db      	ldrh	r3, [r3, #6]
   24c04:	f8ad 300a 	strh.w	r3, [sp, #10]
    connSpec.connLatency = pAppUpdateCfg->connLatency;
   24c08:	4b13      	ldr	r3, [pc, #76]	; (24c58 <appSlaveConnUpdateTimeout+0xa8>)
   24c0a:	681b      	ldr	r3, [r3, #0]
   24c0c:	891b      	ldrh	r3, [r3, #8]
   24c0e:	f8ad 300c 	strh.w	r3, [sp, #12]
    connSpec.supTimeout = pAppUpdateCfg->supTimeout;
   24c12:	4b11      	ldr	r3, [pc, #68]	; (24c58 <appSlaveConnUpdateTimeout+0xa8>)
   24c14:	681b      	ldr	r3, [r3, #0]
   24c16:	895b      	ldrh	r3, [r3, #10]
   24c18:	f8ad 300e 	strh.w	r3, [sp, #14]
    connSpec.minCeLen = 0;
   24c1c:	2300      	movs	r3, #0
   24c1e:	f8ad 3010 	strh.w	r3, [sp, #16]
    connSpec.maxCeLen = 0xffff;
   24c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24c26:	f8ad 3012 	strh.w	r3, [sp, #18]

    DmConnUpdate(pCb->connId, &connSpec);
   24c2a:	9b00      	ldr	r3, [sp, #0]
   24c2c:	791b      	ldrb	r3, [r3, #4]
   24c2e:	aa02      	add	r2, sp, #8
   24c30:	4611      	mov	r1, r2
   24c32:	4618      	mov	r0, r3
   24c34:	f7f0 fd5a 	bl	156ec <DmConnUpdate>
   24c38:	e009      	b.n	24c4e <appSlaveConnUpdateTimeout+0x9e>
  }
  else
  {
    pCb->connWasIdle = idle;
   24c3a:	9b00      	ldr	r3, [sp, #0]
   24c3c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   24c40:	729a      	strb	r2, [r3, #10]
    appConnUpdateTimerStart(pCb->connId);
   24c42:	9b00      	ldr	r3, [sp, #0]
   24c44:	791b      	ldrb	r3, [r3, #4]
   24c46:	4618      	mov	r0, r3
   24c48:	f7ff fbc8 	bl	243dc <appConnUpdateTimerStart>
  }
}
   24c4c:	bf00      	nop
   24c4e:	bf00      	nop
   24c50:	b007      	add	sp, #28
   24c52:	f85d fb04 	ldr.w	pc, [sp], #4
   24c56:	bf00      	nop
   24c58:	10007958 	.word	0x10007958

00024c5c <appSlaveProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveProcMsg(wsfMsgHdr_t *pMsg)
{
   24c5c:	b500      	push	{lr}
   24c5e:	b085      	sub	sp, #20
   24c60:	9001      	str	r0, [sp, #4]
  appConnCb_t *pCb;

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];
   24c62:	9b01      	ldr	r3, [sp, #4]
   24c64:	881b      	ldrh	r3, [r3, #0]
   24c66:	3b01      	subs	r3, #1
   24c68:	015b      	lsls	r3, r3, #5
   24c6a:	4a0c      	ldr	r2, [pc, #48]	; (24c9c <appSlaveProcMsg+0x40>)
   24c6c:	4413      	add	r3, r2
   24c6e:	9303      	str	r3, [sp, #12]

  switch(pMsg->event)
   24c70:	9b01      	ldr	r3, [sp, #4]
   24c72:	789b      	ldrb	r3, [r3, #2]
   24c74:	2b10      	cmp	r3, #16
   24c76:	d10c      	bne.n	24c92 <appSlaveProcMsg+0x36>
  {
    case APP_CONN_UPDATE_TIMEOUT_IND:
      /* Check state to determine if read remote features is needed */
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   24c78:	9b03      	ldr	r3, [sp, #12]
   24c7a:	7b5b      	ldrb	r3, [r3, #13]
   24c7c:	2b02      	cmp	r3, #2
   24c7e:	d104      	bne.n	24c8a <appSlaveProcMsg+0x2e>
      {
        appSlaveConnUpdateTimeout(pMsg, pCb);
   24c80:	9903      	ldr	r1, [sp, #12]
   24c82:	9801      	ldr	r0, [sp, #4]
   24c84:	f7ff ff94 	bl	24bb0 <appSlaveConnUpdateTimeout>
      }
      else
      {
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
      }
      break;
   24c88:	e004      	b.n	24c94 <appSlaveProcMsg+0x38>
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   24c8a:	9b03      	ldr	r3, [sp, #12]
   24c8c:	2201      	movs	r2, #1
   24c8e:	735a      	strb	r2, [r3, #13]
      break;
   24c90:	e000      	b.n	24c94 <appSlaveProcMsg+0x38>

    default:
      break;
   24c92:	bf00      	nop
  }
}
   24c94:	bf00      	nop
   24c96:	b005      	add	sp, #20
   24c98:	f85d fb04 	ldr.w	pc, [sp], #4
   24c9c:	1000795c 	.word	0x1000795c

00024ca0 <AppSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveInit(void)
{
   24ca0:	b500      	push	{lr}
   24ca2:	b083      	sub	sp, #12
  uint8_t i;

  /* for each advertising set */
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   24ca4:	2300      	movs	r3, #0
   24ca6:	f88d 3007 	strb.w	r3, [sp, #7]
   24caa:	e02f      	b.n	24d0c <AppSlaveInit+0x6c>
  {
    /* initialize advertising state */
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   24cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24cb0:	4a21      	ldr	r2, [pc, #132]	; (24d38 <AppSlaveInit+0x98>)
   24cb2:	4413      	add	r3, r2
   24cb4:	2203      	movs	r2, #3
   24cb6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    /* initialize advertising type */
    appSlaveCb.advType[i] = DM_ADV_CONN_UNDIRECT;
   24cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24cbe:	4a1e      	ldr	r2, [pc, #120]	; (24d38 <AppSlaveInit+0x98>)
   24cc0:	4413      	add	r3, r2
   24cc2:	2200      	movs	r2, #0
   24cc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
   24cc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24ccc:	4a1a      	ldr	r2, [pc, #104]	; (24d38 <AppSlaveInit+0x98>)
   24cce:	4413      	add	r3, r2
   24cd0:	2200      	movs	r2, #0
   24cd2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

    /* initialize peer address */
    appSlaveCb.peerAddrType[i] = HCI_ADDR_TYPE_PUBLIC;
   24cd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24cda:	4a17      	ldr	r2, [pc, #92]	; (24d38 <AppSlaveInit+0x98>)
   24cdc:	4413      	add	r3, r2
   24cde:	2200      	movs	r2, #0
   24ce0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   24ce4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24ce8:	4613      	mov	r3, r2
   24cea:	005b      	lsls	r3, r3, #1
   24cec:	4413      	add	r3, r2
   24cee:	005b      	lsls	r3, r3, #1
   24cf0:	3358      	adds	r3, #88	; 0x58
   24cf2:	4a11      	ldr	r2, [pc, #68]	; (24d38 <AppSlaveInit+0x98>)
   24cf4:	4413      	add	r3, r2
   24cf6:	3306      	adds	r3, #6
   24cf8:	2206      	movs	r2, #6
   24cfa:	2100      	movs	r1, #0
   24cfc:	4618      	mov	r0, r3
   24cfe:	f000 fcdd 	bl	256bc <memset>
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   24d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24d06:	3301      	adds	r3, #1
   24d08:	f88d 3007 	strb.w	r3, [sp, #7]
   24d0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24d10:	2b01      	cmp	r3, #1
   24d12:	d9cb      	bls.n	24cac <AppSlaveInit+0xc>
  }

  /* initialize discovery mode */
  appSlaveCb.discMode = APP_MODE_NONE;
   24d14:	4b08      	ldr	r3, [pc, #32]	; (24d38 <AppSlaveInit+0x98>)
   24d16:	22ff      	movs	r2, #255	; 0xff
   24d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* initialize advertising mode */
  appSlaveAdvModeInit();
   24d1c:	f7ff f9a0 	bl	24060 <appSlaveAdvModeInit>

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;
   24d20:	4b05      	ldr	r3, [pc, #20]	; (24d38 <AppSlaveInit+0x98>)
   24d22:	2200      	movs	r2, #0
   24d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   24d28:	4b04      	ldr	r3, [pc, #16]	; (24d3c <AppSlaveInit+0x9c>)
   24d2a:	4a05      	ldr	r2, [pc, #20]	; (24d40 <AppSlaveInit+0xa0>)
   24d2c:	601a      	str	r2, [r3, #0]
}
   24d2e:	bf00      	nop
   24d30:	b003      	add	sp, #12
   24d32:	f85d fb04 	ldr.w	pc, [sp], #4
   24d36:	bf00      	nop
   24d38:	100079c8 	.word	0x100079c8
   24d3c:	100079c0 	.word	0x100079c0
   24d40:	00024c5d 	.word	0x00024c5d

00024d44 <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   24d44:	b500      	push	{lr}
   24d46:	b087      	sub	sp, #28
   24d48:	9001      	str	r0, [sp, #4]
  appConnCb_t *pCb = NULL;
   24d4a:	2300      	movs	r3, #0
   24d4c:	9305      	str	r3, [sp, #20]

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   24d4e:	9b01      	ldr	r3, [sp, #4]
   24d50:	789b      	ldrb	r3, [r3, #2]
   24d52:	2b22      	cmp	r3, #34	; 0x22
   24d54:	d00a      	beq.n	24d6c <AppSlaveProcDmMsg+0x28>
      (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
   24d56:	9b01      	ldr	r3, [sp, #4]
   24d58:	789b      	ldrb	r3, [r3, #2]
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   24d5a:	2b48      	cmp	r3, #72	; 0x48
   24d5c:	d006      	beq.n	24d6c <AppSlaveProcDmMsg+0x28>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   24d5e:	9b01      	ldr	r3, [sp, #4]
   24d60:	881b      	ldrh	r3, [r3, #0]
   24d62:	3b01      	subs	r3, #1
   24d64:	015b      	lsls	r3, r3, #5
   24d66:	4a80      	ldr	r2, [pc, #512]	; (24f68 <AppSlaveProcDmMsg+0x224>)
   24d68:	4413      	add	r3, r2
   24d6a:	9305      	str	r3, [sp, #20]
  }

  switch (pMsg->hdr.event)
   24d6c:	9b01      	ldr	r3, [sp, #4]
   24d6e:	789b      	ldrb	r3, [r3, #2]
   24d70:	3b20      	subs	r3, #32
   24d72:	2b46      	cmp	r3, #70	; 0x46
   24d74:	f200 80ee 	bhi.w	24f54 <AppSlaveProcDmMsg+0x210>
   24d78:	a201      	add	r2, pc, #4	; (adr r2, 24d80 <AppSlaveProcDmMsg+0x3c>)
   24d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   24d7e:	bf00      	nop
   24d80:	00024e9d 	.word	0x00024e9d
   24d84:	00024f55 	.word	0x00024f55
   24d88:	00024ea3 	.word	0x00024ea3
   24d8c:	00024f55 	.word	0x00024f55
   24d90:	00024f55 	.word	0x00024f55
   24d94:	00024f55 	.word	0x00024f55
   24d98:	00024f55 	.word	0x00024f55
   24d9c:	00024eb5 	.word	0x00024eb5
   24da0:	00024ebf 	.word	0x00024ebf
   24da4:	00024ec9 	.word	0x00024ec9
   24da8:	00024f55 	.word	0x00024f55
   24dac:	00024f55 	.word	0x00024f55
   24db0:	00024f55 	.word	0x00024f55
   24db4:	00024f55 	.word	0x00024f55
   24db8:	00024f55 	.word	0x00024f55
   24dbc:	00024f55 	.word	0x00024f55
   24dc0:	00024f55 	.word	0x00024f55
   24dc4:	00024f55 	.word	0x00024f55
   24dc8:	00024f55 	.word	0x00024f55
   24dcc:	00024f55 	.word	0x00024f55
   24dd0:	00024f55 	.word	0x00024f55
   24dd4:	00024f55 	.word	0x00024f55
   24dd8:	00024f55 	.word	0x00024f55
   24ddc:	00024ed3 	.word	0x00024ed3
   24de0:	00024f55 	.word	0x00024f55
   24de4:	00024f55 	.word	0x00024f55
   24de8:	00024f55 	.word	0x00024f55
   24dec:	00024f55 	.word	0x00024f55
   24df0:	00024f55 	.word	0x00024f55
   24df4:	00024f55 	.word	0x00024f55
   24df8:	00024f55 	.word	0x00024f55
   24dfc:	00024f55 	.word	0x00024f55
   24e00:	00024edd 	.word	0x00024edd
   24e04:	00024f2b 	.word	0x00024f2b
   24e08:	00024f55 	.word	0x00024f55
   24e0c:	00024f55 	.word	0x00024f55
   24e10:	00024f55 	.word	0x00024f55
   24e14:	00024f55 	.word	0x00024f55
   24e18:	00024f55 	.word	0x00024f55
   24e1c:	00024f55 	.word	0x00024f55
   24e20:	00024ea3 	.word	0x00024ea3
   24e24:	00024f55 	.word	0x00024f55
   24e28:	00024f55 	.word	0x00024f55
   24e2c:	00024f55 	.word	0x00024f55
   24e30:	00024f55 	.word	0x00024f55
   24e34:	00024f55 	.word	0x00024f55
   24e38:	00024f55 	.word	0x00024f55
   24e3c:	00024f55 	.word	0x00024f55
   24e40:	00024f55 	.word	0x00024f55
   24e44:	00024f55 	.word	0x00024f55
   24e48:	00024f55 	.word	0x00024f55
   24e4c:	00024f55 	.word	0x00024f55
   24e50:	00024f55 	.word	0x00024f55
   24e54:	00024f55 	.word	0x00024f55
   24e58:	00024f55 	.word	0x00024f55
   24e5c:	00024ee7 	.word	0x00024ee7
   24e60:	00024f55 	.word	0x00024f55
   24e64:	00024f55 	.word	0x00024f55
   24e68:	00024f55 	.word	0x00024f55
   24e6c:	00024f55 	.word	0x00024f55
   24e70:	00024f55 	.word	0x00024f55
   24e74:	00024f55 	.word	0x00024f55
   24e78:	00024f55 	.word	0x00024f55
   24e7c:	00024f55 	.word	0x00024f55
   24e80:	00024f55 	.word	0x00024f55
   24e84:	00024f55 	.word	0x00024f55
   24e88:	00024f55 	.word	0x00024f55
   24e8c:	00024f55 	.word	0x00024f55
   24e90:	00024f55 	.word	0x00024f55
   24e94:	00024f55 	.word	0x00024f55
   24e98:	00024f49 	.word	0x00024f49
  {
    case DM_RESET_CMPL_IND:
      appSlaveAdvModeInit();
   24e9c:	f7ff f8e0 	bl	24060 <appSlaveAdvModeInit>
      break;
   24ea0:	e05d      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>

    case DM_ADV_SET_STOP_IND:
    case DM_ADV_STOP_IND:
      if (appSlaveCb.advStopCback != NULL)
   24ea2:	4b32      	ldr	r3, [pc, #200]	; (24f6c <AppSlaveProcDmMsg+0x228>)
   24ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   24ea6:	2b00      	cmp	r3, #0
   24ea8:	d056      	beq.n	24f58 <AppSlaveProcDmMsg+0x214>
      {
        (*appSlaveCb.advStopCback)(pMsg);
   24eaa:	4b30      	ldr	r3, [pc, #192]	; (24f6c <AppSlaveProcDmMsg+0x228>)
   24eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   24eae:	9801      	ldr	r0, [sp, #4]
   24eb0:	4798      	blx	r3
      }
      break;
   24eb2:	e051      	b.n	24f58 <AppSlaveProcDmMsg+0x214>

    case DM_CONN_OPEN_IND:
      appSlaveConnOpen(pMsg, pCb);
   24eb4:	9905      	ldr	r1, [sp, #20]
   24eb6:	9801      	ldr	r0, [sp, #4]
   24eb8:	f7ff fb3a 	bl	24530 <appSlaveConnOpen>
      break;
   24ebc:	e04f      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>

    case DM_CONN_CLOSE_IND:
      appSlaveConnClose(pMsg, pCb);
   24ebe:	9905      	ldr	r1, [sp, #20]
   24ec0:	9801      	ldr	r0, [sp, #4]
   24ec2:	f7ff fb51 	bl	24568 <appSlaveConnClose>
      break;
   24ec6:	e04a      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>

    case DM_CONN_UPDATE_IND:
      appSlaveConnUpdate(pMsg, pCb);
   24ec8:	9905      	ldr	r1, [sp, #20]
   24eca:	9801      	ldr	r0, [sp, #4]
   24ecc:	f7ff fbda 	bl	24684 <appSlaveConnUpdate>
      break;
   24ed0:	e045      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appSlaveResolvedAddrInd(pMsg, pCb);
   24ed2:	9905      	ldr	r1, [sp, #20]
   24ed4:	9801      	ldr	r0, [sp, #4]
   24ed6:	f7ff fc11 	bl	246fc <appSlaveResolvedAddrInd>
      break;
   24eda:	e040      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>

    case DM_REM_CONN_PARAM_REQ_IND:
      appSlaveRemoteConnParamReq(pMsg, pCb);
   24edc:	9905      	ldr	r1, [sp, #20]
   24ede:	9801      	ldr	r0, [sp, #4]
   24ee0:	f7ff fc60 	bl	247a4 <appSlaveRemoteConnParamReq>
      break;
   24ee4:	e03b      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>

    case DM_REMOTE_FEATURES_IND:
    {
        hciEvt_t *pEvent = (hciEvt_t *)pMsg;
   24ee6:	9b01      	ldr	r3, [sp, #4]
   24ee8:	9304      	str	r3, [sp, #16]
        uint8_t data_len_ext = pEvent->leReadRemoteFeatCmpl.features[0]&HCI_LE_SUP_FEAT_DATA_LEN_EXT;
   24eea:	9b04      	ldr	r3, [sp, #16]
   24eec:	7a1b      	ldrb	r3, [r3, #8]
   24eee:	f003 0320 	and.w	r3, r3, #32
   24ef2:	f88d 300f 	strb.w	r3, [sp, #15]
        APP_TRACE_INFO2("remote feature: 0x%x,  DLE:0x%x", pEvent->leReadRemoteFeatCmpl.features[0],data_len_ext);
		if(data_len_ext == HCI_LE_SUP_FEAT_DATA_LEN_EXT)
   24ef6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24efa:	2b20      	cmp	r3, #32
   24efc:	d108      	bne.n	24f10 <AppSlaveProcDmMsg+0x1cc>
		{
		    APP_TRACE_INFO0("Remote device support DLE");
			DmConnSetDataLen(pMsg->hdr.param, LE_MAX_TX_SIZE, LE_MAX_TX_TIME);
   24efe:	9b01      	ldr	r3, [sp, #4]
   24f00:	881b      	ldrh	r3, [r3, #0]
   24f02:	b2db      	uxtb	r3, r3
   24f04:	f640 0248 	movw	r2, #2120	; 0x848
   24f08:	21fb      	movs	r1, #251	; 0xfb
   24f0a:	4618      	mov	r0, r3
   24f0c:	f7f0 fc70 	bl	157f0 <DmConnSetDataLen>
		else
		{
		   APP_TRACE_INFO0("Remote device doesn't support DLE"); 
		}	  
  	  /* If conn update is waiting for features, perform the conn update timeout action */
	  if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   24f10:	9b05      	ldr	r3, [sp, #20]
   24f12:	7b5b      	ldrb	r3, [r3, #13]
   24f14:	2b01      	cmp	r3, #1
   24f16:	d104      	bne.n	24f22 <AppSlaveProcDmMsg+0x1de>
	  {
	    appSlaveConnUpdateTimeout((wsfMsgHdr_t*) pMsg, pCb);
   24f18:	9905      	ldr	r1, [sp, #20]
   24f1a:	9801      	ldr	r0, [sp, #4]
   24f1c:	f7ff fe48 	bl	24bb0 <appSlaveConnUpdateTimeout>
	  else
      {
        pCb->updateState = APP_CU_STATE_UPDATING;
      }
    }
    break;
   24f20:	e01d      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>
        pCb->updateState = APP_CU_STATE_UPDATING;
   24f22:	9b05      	ldr	r3, [sp, #20]
   24f24:	2202      	movs	r2, #2
   24f26:	735a      	strb	r2, [r3, #13]
    break;
   24f28:	e019      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>
      
    case DM_CONN_DATA_LEN_CHANGE_IND:
        APP_TRACE_INFO3("data length exchange, status= %d, maxRXLen= %d, maxTXlen= %d", pMsg->dataLenChange.hdr.status, pMsg->dataLenChange.maxRxOctets, pMsg->dataLenChange.maxTxOctets);

        if (AttGetMtu(pCb->connId) == ATT_DEFAULT_MTU)
   24f2a:	9b05      	ldr	r3, [sp, #20]
   24f2c:	791b      	ldrb	r3, [r3, #4]
   24f2e:	4618      	mov	r0, r3
   24f30:	f7f7 f9b0 	bl	1c294 <AttGetMtu>
   24f34:	4603      	mov	r3, r0
   24f36:	2b17      	cmp	r3, #23
   24f38:	d110      	bne.n	24f5c <AppSlaveProcDmMsg+0x218>
        { 		  
          AttcMtuReq(pCb->connId, MTU_REQ_SIZE);
   24f3a:	9b05      	ldr	r3, [sp, #20]
   24f3c:	791b      	ldrb	r3, [r3, #4]
   24f3e:	21f7      	movs	r1, #247	; 0xf7
   24f40:	4618      	mov	r0, r3
   24f42:	f7f3 fc3f 	bl	187c4 <AttcMtuReq>
        }   
		  
	  break;
   24f46:	e009      	b.n	24f5c <AppSlaveProcDmMsg+0x218>

    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   24f48:	2000      	movs	r0, #0
   24f4a:	f7fb fe73 	bl	20c34 <HciDrvRadioBoot>
      DmDevReset();
   24f4e:	f7f0 fffb 	bl	15f48 <DmDevReset>
	  break;
   24f52:	e004      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>
      
    default:
      break;
   24f54:	bf00      	nop
   24f56:	e002      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>
      break;
   24f58:	bf00      	nop
   24f5a:	e000      	b.n	24f5e <AppSlaveProcDmMsg+0x21a>
	  break;
   24f5c:	bf00      	nop
  }
}
   24f5e:	bf00      	nop
   24f60:	b007      	add	sp, #28
   24f62:	f85d fb04 	ldr.w	pc, [sp], #4
   24f66:	bf00      	nop
   24f68:	1000795c 	.word	0x1000795c
   24f6c:	100079c8 	.word	0x100079c8

00024f70 <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   24f70:	b500      	push	{lr}
   24f72:	b083      	sub	sp, #12
   24f74:	9300      	str	r3, [sp, #0]
   24f76:	4603      	mov	r3, r0
   24f78:	f88d 3007 	strb.w	r3, [sp, #7]
   24f7c:	460b      	mov	r3, r1
   24f7e:	f88d 3006 	strb.w	r3, [sp, #6]
   24f82:	4613      	mov	r3, r2
   24f84:	f8ad 3004 	strh.w	r3, [sp, #4]
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   24f88:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24f8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24f90:	4930      	ldr	r1, [pc, #192]	; (25054 <appAdvSetData+0xe4>)
   24f92:	0092      	lsls	r2, r2, #2
   24f94:	4413      	add	r3, r2
   24f96:	9a00      	ldr	r2, [sp, #0]
   24f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   24f9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24fa0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24fa4:	492b      	ldr	r1, [pc, #172]	; (25054 <appAdvSetData+0xe4>)
   24fa6:	0092      	lsls	r2, r2, #2
   24fa8:	4413      	add	r3, r2
   24faa:	3310      	adds	r3, #16
   24fac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   24fb0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set length of advertising data buffer maintained by Application */
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   24fb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24fb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24fbc:	4925      	ldr	r1, [pc, #148]	; (25054 <appAdvSetData+0xe4>)
   24fbe:	0092      	lsls	r2, r2, #2
   24fc0:	4413      	add	r3, r2
   24fc2:	3318      	adds	r3, #24
   24fc4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   24fc8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set maximum advertising data length supported by Controller */
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   24fcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24fd0:	4920      	ldr	r1, [pc, #128]	; (25054 <appAdvSetData+0xe4>)
   24fd2:	3328      	adds	r3, #40	; 0x28
   24fd4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   24fd8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   24fdc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24fe0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   24fe4:	491b      	ldr	r1, [pc, #108]	; (25054 <appAdvSetData+0xe4>)
   24fe6:	0092      	lsls	r2, r2, #2
   24fe8:	4413      	add	r3, r2
   24fea:	3320      	adds	r3, #32
   24fec:	2200      	movs	r2, #0
   24fee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   24ff2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24ff6:	4a17      	ldr	r2, [pc, #92]	; (25054 <appAdvSetData+0xe4>)
   24ff8:	4413      	add	r3, r2
   24ffa:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
   24ffe:	2b03      	cmp	r3, #3
   25000:	d01b      	beq.n	2503a <appAdvSetData+0xca>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   25002:	f89d 3006 	ldrb.w	r3, [sp, #6]
   25006:	085b      	lsrs	r3, r3, #1
   25008:	b2da      	uxtb	r2, r3
   2500a:	4b12      	ldr	r3, [pc, #72]	; (25054 <appAdvSetData+0xe4>)
   2500c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   25010:	429a      	cmp	r2, r3
   25012:	d112      	bne.n	2503a <appAdvSetData+0xca>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   25014:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   25018:	2bfb      	cmp	r3, #251	; 0xfb
   2501a:	d80e      	bhi.n	2503a <appAdvSetData+0xca>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   2501c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   25020:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   25024:	429a      	cmp	r2, r3
   25026:	d808      	bhi.n	2503a <appAdvSetData+0xca>
      (len <= maxLen))
  {
    appSetAdvScanDataFrag(advHandle, location);
   25028:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2502c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25030:	4611      	mov	r1, r2
   25032:	4618      	mov	r0, r3
   25034:	f7ff f89e 	bl	24174 <appSetAdvScanDataFrag>
   25038:	e007      	b.n	2504a <appAdvSetData+0xda>
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   2503a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2503e:	4a05      	ldr	r2, [pc, #20]	; (25054 <appAdvSetData+0xe4>)
   25040:	4413      	add	r3, r2
   25042:	2200      	movs	r2, #0
   25044:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  }
}
   25048:	bf00      	nop
   2504a:	bf00      	nop
   2504c:	b003      	add	sp, #12
   2504e:	f85d fb04 	ldr.w	pc, [sp], #4
   25052:	bf00      	nop
   25054:	100079c8 	.word	0x100079c8

00025058 <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   25058:	b510      	push	{r4, lr}
   2505a:	b086      	sub	sp, #24
   2505c:	9102      	str	r1, [sp, #8]
   2505e:	9201      	str	r2, [sp, #4]
   25060:	9300      	str	r3, [sp, #0]
   25062:	4603      	mov	r3, r0
   25064:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t i;

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   25068:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2506c:	9902      	ldr	r1, [sp, #8]
   2506e:	4618      	mov	r0, r3
   25070:	f7ff f800 	bl	24074 <appSlaveConnectableAdv>
   25074:	4603      	mov	r3, r0
   25076:	2b00      	cmp	r3, #0
   25078:	d009      	beq.n	2508e <appAdvStart+0x36>
      (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   2507a:	2001      	movs	r0, #1
   2507c:	f7fe fcd0 	bl	23a20 <appNumConns>
   25080:	4603      	mov	r3, r0
   25082:	461a      	mov	r2, r3
   25084:	4b48      	ldr	r3, [pc, #288]	; (251a8 <appAdvStart+0x150>)
   25086:	681b      	ldr	r3, [r3, #0]
   25088:	781b      	ldrb	r3, [r3, #0]
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   2508a:	429a      	cmp	r2, r3
   2508c:	d270      	bcs.n	25170 <appAdvStart+0x118>
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   2508e:	2300      	movs	r3, #0
   25090:	f88d 3017 	strb.w	r3, [sp, #23]
   25094:	e05e      	b.n	25154 <appAdvStart+0xfc>
    {
      /* if advertising parameters to be configured */
      if (cfgAdvParam)
   25096:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   2509a:	2b00      	cmp	r3, #0
   2509c:	d03d      	beq.n	2511a <appAdvStart+0xc2>
      {
        /* set min and max interval */
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   2509e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   250a2:	9a02      	ldr	r2, [sp, #8]
   250a4:	4413      	add	r3, r2
   250a6:	7818      	ldrb	r0, [r3, #0]
   250a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   250ac:	005b      	lsls	r3, r3, #1
   250ae:	9a01      	ldr	r2, [sp, #4]
   250b0:	4413      	add	r3, r2
   250b2:	8819      	ldrh	r1, [r3, #0]
   250b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   250b8:	005b      	lsls	r3, r3, #1
   250ba:	9a01      	ldr	r2, [sp, #4]
   250bc:	4413      	add	r3, r2
   250be:	881b      	ldrh	r3, [r3, #0]
   250c0:	461a      	mov	r2, r3
   250c2:	f7ef fae5 	bl	14690 <DmAdvSetInterval>

        /* set advertising parameters */
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   250c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   250ca:	9a02      	ldr	r2, [sp, #8]
   250cc:	4413      	add	r3, r2
   250ce:	7818      	ldrb	r0, [r3, #0]
   250d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   250d4:	9a02      	ldr	r2, [sp, #8]
   250d6:	4413      	add	r3, r2
   250d8:	781b      	ldrb	r3, [r3, #0]
   250da:	461a      	mov	r2, r3
   250dc:	4b33      	ldr	r3, [pc, #204]	; (251ac <appAdvStart+0x154>)
   250de:	4413      	add	r3, r2
   250e0:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   250e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   250e8:	9a02      	ldr	r2, [sp, #8]
   250ea:	4413      	add	r3, r2
   250ec:	781b      	ldrb	r3, [r3, #0]
   250ee:	461a      	mov	r2, r3
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   250f0:	4b2e      	ldr	r3, [pc, #184]	; (251ac <appAdvStart+0x154>)
   250f2:	4413      	add	r3, r2
   250f4:	f893 406a 	ldrb.w	r4, [r3, #106]	; 0x6a
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   250f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   250fc:	9a02      	ldr	r2, [sp, #8]
   250fe:	4413      	add	r3, r2
   25100:	781b      	ldrb	r3, [r3, #0]
   25102:	461a      	mov	r2, r3
   25104:	4613      	mov	r3, r2
   25106:	005b      	lsls	r3, r3, #1
   25108:	4413      	add	r3, r2
   2510a:	005b      	lsls	r3, r3, #1
   2510c:	3358      	adds	r3, #88	; 0x58
   2510e:	4a27      	ldr	r2, [pc, #156]	; (251ac <appAdvStart+0x154>)
   25110:	4413      	add	r3, r2
   25112:	3306      	adds	r3, #6
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   25114:	4622      	mov	r2, r4
   25116:	f7ef f9ef 	bl	144f8 <DmAdvConfig>
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   2511a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2511e:	9a02      	ldr	r2, [sp, #8]
   25120:	4413      	add	r3, r2
   25122:	781b      	ldrb	r3, [r3, #0]
   25124:	461a      	mov	r2, r3
   25126:	4b21      	ldr	r3, [pc, #132]	; (251ac <appAdvStart+0x154>)
   25128:	4413      	add	r3, r2
   2512a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
   2512e:	2b00      	cmp	r3, #0
   25130:	d10b      	bne.n	2514a <appAdvStart+0xf2>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   25132:	f89d 3017 	ldrb.w	r3, [sp, #23]
   25136:	9a02      	ldr	r2, [sp, #8]
   25138:	4413      	add	r3, r2
   2513a:	781b      	ldrb	r3, [r3, #0]
   2513c:	4a1b      	ldr	r2, [pc, #108]	; (251ac <appAdvStart+0x154>)
   2513e:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
   25142:	4611      	mov	r1, r2
   25144:	4618      	mov	r0, r3
   25146:	f7ff f8bf 	bl	242c8 <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   2514a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2514e:	3301      	adds	r3, #1
   25150:	f88d 3017 	strb.w	r3, [sp, #23]
   25154:	f89d 2017 	ldrb.w	r2, [sp, #23]
   25158:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2515c:	429a      	cmp	r2, r3
   2515e:	d39a      	bcc.n	25096 <appAdvStart+0x3e>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   25160:	f89d 000f 	ldrb.w	r0, [sp, #15]
   25164:	9b08      	ldr	r3, [sp, #32]
   25166:	9a00      	ldr	r2, [sp, #0]
   25168:	9902      	ldr	r1, [sp, #8]
   2516a:	f7ef fa3d 	bl	145e8 <DmAdvStart>

    return;
   2516e:	e019      	b.n	251a4 <appAdvStart+0x14c>
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   25170:	2300      	movs	r3, #0
   25172:	f88d 3017 	strb.w	r3, [sp, #23]
   25176:	e00f      	b.n	25198 <appAdvStart+0x140>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   25178:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2517c:	9a02      	ldr	r2, [sp, #8]
   2517e:	4413      	add	r3, r2
   25180:	781b      	ldrb	r3, [r3, #0]
   25182:	461a      	mov	r2, r3
   25184:	4b09      	ldr	r3, [pc, #36]	; (251ac <appAdvStart+0x154>)
   25186:	4413      	add	r3, r2
   25188:	2203      	movs	r2, #3
   2518a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
  for (i = 0; i < numSets; i++)
   2518e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   25192:	3301      	adds	r3, #1
   25194:	f88d 3017 	strb.w	r3, [sp, #23]
   25198:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2519c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   251a0:	429a      	cmp	r2, r3
   251a2:	d3e9      	bcc.n	25178 <appAdvStart+0x120>
  }
}
   251a4:	b006      	add	sp, #24
   251a6:	bd10      	pop	{r4, pc}
   251a8:	10007950 	.word	0x10007950
   251ac:	100079c8 	.word	0x100079c8

000251b0 <appSlaveAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                      uint8_t *pMaxEaEvents, bool_t cfgAdvParam, uint8_t mode)
{
   251b0:	b500      	push	{lr}
   251b2:	b089      	sub	sp, #36	; 0x24
   251b4:	9104      	str	r1, [sp, #16]
   251b6:	9203      	str	r2, [sp, #12]
   251b8:	9302      	str	r3, [sp, #8]
   251ba:	4603      	mov	r3, r0
   251bc:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t i;
  uint8_t prevMode = appSlaveCb.discMode;
   251c0:	4b29      	ldr	r3, [pc, #164]	; (25268 <appSlaveAdvStart+0xb8>)
   251c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   251c6:	f88d 301e 	strb.w	r3, [sp, #30]

  /* handle auto init mode */
  if (mode == APP_MODE_AUTO_INIT)
   251ca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   251ce:	2b02      	cmp	r3, #2
   251d0:	d114      	bne.n	251fc <appSlaveAdvStart+0x4c>
  {
    if (AppDbCheckBonded() == FALSE)
   251d2:	f7e7 f9fd 	bl	c5d0 <AppDbCheckBonded>
   251d6:	4603      	mov	r3, r0
   251d8:	2b00      	cmp	r3, #0
   251da:	d107      	bne.n	251ec <appSlaveAdvStart+0x3c>
    {
      AppSetBondable(TRUE);
   251dc:	2001      	movs	r0, #1
   251de:	f000 f8c7 	bl	25370 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   251e2:	4b21      	ldr	r3, [pc, #132]	; (25268 <appSlaveAdvStart+0xb8>)
   251e4:	2201      	movs	r2, #1
   251e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   251ea:	e00c      	b.n	25206 <appSlaveAdvStart+0x56>
    }
    else
    {
      AppSetBondable(FALSE);
   251ec:	2000      	movs	r0, #0
   251ee:	f000 f8bf 	bl	25370 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   251f2:	4b1d      	ldr	r3, [pc, #116]	; (25268 <appSlaveAdvStart+0xb8>)
   251f4:	2200      	movs	r2, #0
   251f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   251fa:	e004      	b.n	25206 <appSlaveAdvStart+0x56>
      /* init white list with bonded device addresses */
    }
  }
  else
  {
    appSlaveCb.discMode = mode;
   251fc:	4a1a      	ldr	r2, [pc, #104]	; (25268 <appSlaveAdvStart+0xb8>)
   251fe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   25202:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
   25206:	4b18      	ldr	r3, [pc, #96]	; (25268 <appSlaveAdvStart+0xb8>)
   25208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   2520c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   25210:	429a      	cmp	r2, r3
   25212:	d01a      	beq.n	2524a <appSlaveAdvStart+0x9a>
  {
    for (i = 0; i < numSets; i++)
   25214:	2300      	movs	r3, #0
   25216:	f88d 301f 	strb.w	r3, [sp, #31]
   2521a:	e010      	b.n	2523e <appSlaveAdvStart+0x8e>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
   2521c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   25220:	9a04      	ldr	r2, [sp, #16]
   25222:	4413      	add	r3, r2
   25224:	781b      	ldrb	r3, [r3, #0]
   25226:	4a10      	ldr	r2, [pc, #64]	; (25268 <appSlaveAdvStart+0xb8>)
   25228:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
   2522c:	4611      	mov	r1, r2
   2522e:	4618      	mov	r0, r3
   25230:	f7fe ff6a 	bl	24108 <appSlaveForceAdvDataSync>
    for (i = 0; i < numSets; i++)
   25234:	f89d 301f 	ldrb.w	r3, [sp, #31]
   25238:	3301      	adds	r3, #1
   2523a:	f88d 301f 	strb.w	r3, [sp, #31]
   2523e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   25242:	f89d 3017 	ldrb.w	r3, [sp, #23]
   25246:	429a      	cmp	r2, r3
   25248:	d3e8      	bcc.n	2521c <appSlaveAdvStart+0x6c>
    }
  }

  /* start advertising */
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   2524a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2524e:	2301      	movs	r3, #1
   25250:	9301      	str	r3, [sp, #4]
   25252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25254:	9300      	str	r3, [sp, #0]
   25256:	9b02      	ldr	r3, [sp, #8]
   25258:	9a03      	ldr	r2, [sp, #12]
   2525a:	9904      	ldr	r1, [sp, #16]
   2525c:	f7ff fefc 	bl	25058 <appAdvStart>
}
   25260:	bf00      	nop
   25262:	b009      	add	sp, #36	; 0x24
   25264:	f85d fb04 	ldr.w	pc, [sp], #4
   25268:	100079c8 	.word	0x100079c8

0002526c <AppSlaveSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecProcDmMsg(dmEvt_t *pMsg)
{
   2526c:	b500      	push	{lr}
   2526e:	b085      	sub	sp, #20
   25270:	9001      	str	r0, [sp, #4]
  appConnCb_t *pCb;

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   25272:	9b01      	ldr	r3, [sp, #4]
   25274:	881b      	ldrh	r3, [r3, #0]
   25276:	3b01      	subs	r3, #1
   25278:	015b      	lsls	r3, r3, #5
   2527a:	4a3c      	ldr	r2, [pc, #240]	; (2536c <AppSlaveSecProcDmMsg+0x100>)
   2527c:	4413      	add	r3, r2
   2527e:	9303      	str	r3, [sp, #12]

  switch(pMsg->hdr.event)
   25280:	9b01      	ldr	r3, [sp, #4]
   25282:	789b      	ldrb	r3, [r3, #2]
   25284:	3b27      	subs	r3, #39	; 0x27
   25286:	2b18      	cmp	r3, #24
   25288:	d86a      	bhi.n	25360 <AppSlaveSecProcDmMsg+0xf4>
   2528a:	a201      	add	r2, pc, #4	; (adr r2, 25290 <AppSlaveSecProcDmMsg+0x24>)
   2528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   25290:	000252f5 	.word	0x000252f5
   25294:	000252ff 	.word	0x000252ff
   25298:	00025361 	.word	0x00025361
   2529c:	00025309 	.word	0x00025309
   252a0:	00025313 	.word	0x00025313
   252a4:	0002531d 	.word	0x0002531d
   252a8:	00025361 	.word	0x00025361
   252ac:	00025361 	.word	0x00025361
   252b0:	00025327 	.word	0x00025327
   252b4:	0002533b 	.word	0x0002533b
   252b8:	00025331 	.word	0x00025331
   252bc:	00025361 	.word	0x00025361
   252c0:	00025361 	.word	0x00025361
   252c4:	00025361 	.word	0x00025361
   252c8:	00025361 	.word	0x00025361
   252cc:	00025361 	.word	0x00025361
   252d0:	00025361 	.word	0x00025361
   252d4:	00025361 	.word	0x00025361
   252d8:	00025361 	.word	0x00025361
   252dc:	0002534d 	.word	0x0002534d
   252e0:	00025357 	.word	0x00025357
   252e4:	00025361 	.word	0x00025361
   252e8:	00025361 	.word	0x00025361
   252ec:	00025361 	.word	0x00025361
   252f0:	00025345 	.word	0x00025345
  {
    case DM_CONN_OPEN_IND:
      appSlaveSecConnOpen(pMsg, pCb);
   252f4:	9903      	ldr	r1, [sp, #12]
   252f6:	9801      	ldr	r0, [sp, #4]
   252f8:	f7ff fa8e 	bl	24818 <appSlaveSecConnOpen>
      break;
   252fc:	e031      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_CONN_CLOSE_IND:
      appSecConnClose(pMsg, pCb);
   252fe:	9903      	ldr	r1, [sp, #12]
   25300:	9801      	ldr	r0, [sp, #4]
   25302:	f7ff fac9 	bl	24898 <appSecConnClose>
      break;
   25306:	e02c      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_CMPL_IND:
      appSecPairCmpl(pMsg, pCb);
   25308:	9903      	ldr	r1, [sp, #12]
   2530a:	9801      	ldr	r0, [sp, #4]
   2530c:	f7ff fb88 	bl	24a20 <appSecPairCmpl>
      break;
   25310:	e027      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_FAIL_IND:
      appSecPairFailed(pMsg, pCb);
   25312:	9903      	ldr	r1, [sp, #12]
   25314:	9801      	ldr	r0, [sp, #4]
   25316:	f7ff fbb5 	bl	24a84 <appSecPairFailed>
      break;
   2531a:	e022      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_IND:
      appSecEncryptInd(pMsg, pCb);
   2531c:	9903      	ldr	r1, [sp, #12]
   2531e:	9801      	ldr	r0, [sp, #4]
   25320:	f7ff fbb6 	bl	24a90 <appSecEncryptInd>
      break;
   25324:	e01d      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appSecStoreKey(pMsg, pCb);
   25326:	9903      	ldr	r1, [sp, #12]
   25328:	9801      	ldr	r0, [sp, #4]
   2532a:	f7ff fb59 	bl	249e0 <appSecStoreKey>
      break;
   2532e:	e018      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_IND:
      appSecPairInd(pMsg, pCb);
   25330:	9903      	ldr	r1, [sp, #12]
   25332:	9801      	ldr	r0, [sp, #4]
   25334:	f7ff fac2 	bl	248bc <appSecPairInd>
      break;
   25338:	e013      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_LTK_REQ_IND:
      appSecFindLtk(pMsg, pCb);
   2533a:	9903      	ldr	r1, [sp, #12]
   2533c:	9801      	ldr	r0, [sp, #4]
   2533e:	f7ff fbbb 	bl	24ab8 <appSecFindLtk>
      break;
   25342:	e00e      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   25344:	9801      	ldr	r0, [sp, #4]
   25346:	f7ff fbf5 	bl	24b34 <appPrivSetAddrResEnableInd>
      break;
   2534a:	e00a      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   2534c:	9903      	ldr	r1, [sp, #12]
   2534e:	9801      	ldr	r0, [sp, #4]
   25350:	f7ff fc01 	bl	24b56 <appPrivAddDevToResListInd>
      break;
   25354:	e005      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   25356:	9903      	ldr	r1, [sp, #12]
   25358:	9801      	ldr	r0, [sp, #4]
   2535a:	f7ff fc12 	bl	24b82 <appPrivRemDevFromResListInd>
      break;
   2535e:	e000      	b.n	25362 <AppSlaveSecProcDmMsg+0xf6>

    default:
      break;
   25360:	bf00      	nop
  }
}
   25362:	bf00      	nop
   25364:	b005      	add	sp, #20
   25366:	f85d fb04 	ldr.w	pc, [sp], #4
   2536a:	bf00      	nop
   2536c:	1000795c 	.word	0x1000795c

00025370 <AppSetBondable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetBondable(bool_t bondable)
{
   25370:	b082      	sub	sp, #8
   25372:	4603      	mov	r3, r0
   25374:	f88d 3007 	strb.w	r3, [sp, #7]
  appSlaveCb.bondable = bondable;
   25378:	4a03      	ldr	r2, [pc, #12]	; (25388 <AppSetBondable+0x18>)
   2537a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2537e:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
}
   25382:	bf00      	nop
   25384:	b002      	add	sp, #8
   25386:	4770      	bx	lr
   25388:	100079c8 	.word	0x100079c8

0002538c <AppSlaveClearAllBondingInfo>:
 *  \Note   This API should not be used when Advertising (other than periodic advertising) is
 *          enabled. Otherwise, clearing the resolving list in the Controller may fail.
 */
/*************************************************************************************************/
void AppSlaveClearAllBondingInfo(void)
{
   2538c:	b508      	push	{r3, lr}
  /* clear all bonding info */
  AppClearAllBondingInfo();
   2538e:	f7fe fc99 	bl	23cc4 <AppClearAllBondingInfo>

  /* make device bondable */
  AppSetBondable(TRUE);
   25392:	2001      	movs	r0, #1
   25394:	f7ff ffec 	bl	25370 <AppSetBondable>
}
   25398:	bf00      	nop
   2539a:	bd08      	pop	{r3, pc}

0002539c <appSlaveLegAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStart(void)
{
   2539c:	b500      	push	{lr}
   2539e:	b085      	sub	sp, #20
  uint8_t  advHandle;
  uint8_t  maxEaEvents;
  uint16_t interval;

  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   253a0:	4b17      	ldr	r3, [pc, #92]	; (25400 <appSlaveLegAdvStart+0x64>)
   253a2:	681a      	ldr	r2, [r3, #0]
   253a4:	4b17      	ldr	r3, [pc, #92]	; (25404 <appSlaveLegAdvStart+0x68>)
   253a6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
   253aa:	005b      	lsls	r3, r3, #1
   253ac:	4413      	add	r3, r2
   253ae:	88db      	ldrh	r3, [r3, #6]
   253b0:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* if this advertising state is being used */
  if (interval > 0)
   253b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   253b8:	2b00      	cmp	r3, #0
   253ba:	d019      	beq.n	253f0 <appSlaveLegAdvStart+0x54>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   253bc:	2300      	movs	r3, #0
   253be:	f88d 300f 	strb.w	r3, [sp, #15]
    maxEaEvents = 0;
   253c2:	2300      	movs	r3, #0
   253c4:	f88d 300e 	strb.w	r3, [sp, #14]

    appAdvStart(1, &advHandle, &interval,
                &(pAppAdvCfg->advDuration[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]]),
   253c8:	4b0d      	ldr	r3, [pc, #52]	; (25400 <appSlaveLegAdvStart+0x64>)
   253ca:	681a      	ldr	r2, [r3, #0]
   253cc:	4b0d      	ldr	r3, [pc, #52]	; (25404 <appSlaveLegAdvStart+0x68>)
   253ce:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
    appAdvStart(1, &advHandle, &interval,
   253d2:	005b      	lsls	r3, r3, #1
   253d4:	18d0      	adds	r0, r2, r3
   253d6:	aa03      	add	r2, sp, #12
   253d8:	f10d 010f 	add.w	r1, sp, #15
   253dc:	2301      	movs	r3, #1
   253de:	9301      	str	r3, [sp, #4]
   253e0:	f10d 030e 	add.w	r3, sp, #14
   253e4:	9300      	str	r3, [sp, #0]
   253e6:	4603      	mov	r3, r0
   253e8:	2001      	movs	r0, #1
   253ea:	f7ff fe35 	bl	25058 <appAdvStart>
  else
  {
    /* done with all advertising states */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }
}
   253ee:	e003      	b.n	253f8 <appSlaveLegAdvStart+0x5c>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   253f0:	4b04      	ldr	r3, [pc, #16]	; (25404 <appSlaveLegAdvStart+0x68>)
   253f2:	2203      	movs	r2, #3
   253f4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
   253f8:	bf00      	nop
   253fa:	b005      	add	sp, #20
   253fc:	f85d fb04 	ldr.w	pc, [sp], #4
   25400:	1000794c 	.word	0x1000794c
   25404:	100079c8 	.word	0x100079c8

00025408 <appSlaveLegAdvTypeChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvTypeChanged(dmEvt_t *pMsg)
{
   25408:	b500      	push	{lr}
   2540a:	b083      	sub	sp, #12
   2540c:	9001      	str	r0, [sp, #4]
  /* clear advertising type changed flag */
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   2540e:	4b07      	ldr	r3, [pc, #28]	; (2542c <appSlaveLegAdvTypeChanged+0x24>)
   25410:	2200      	movs	r2, #0
   25412:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

  /* set advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   25416:	4b05      	ldr	r3, [pc, #20]	; (2542c <appSlaveLegAdvTypeChanged+0x24>)
   25418:	2200      	movs	r2, #0
   2541a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

  /* start advertising */
  appSlaveLegAdvStart();
   2541e:	f7ff ffbd 	bl	2539c <appSlaveLegAdvStart>
}
   25422:	bf00      	nop
   25424:	b003      	add	sp, #12
   25426:	f85d fb04 	ldr.w	pc, [sp], #4
   2542a:	bf00      	nop
   2542c:	100079c8 	.word	0x100079c8

00025430 <appSlaveNextLegAdvState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveNextLegAdvState(dmEvt_t *pMsg)
{
   25430:	b500      	push	{lr}
   25432:	b083      	sub	sp, #12
   25434:	9001      	str	r0, [sp, #4]
  /* go to next advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   25436:	4b09      	ldr	r3, [pc, #36]	; (2545c <appSlaveNextLegAdvState+0x2c>)
   25438:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
   2543c:	3301      	adds	r3, #1
   2543e:	b2da      	uxtb	r2, r3
   25440:	4b06      	ldr	r3, [pc, #24]	; (2545c <appSlaveNextLegAdvState+0x2c>)
   25442:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

  /* if haven't reached stopped state then start advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   25446:	4b05      	ldr	r3, [pc, #20]	; (2545c <appSlaveNextLegAdvState+0x2c>)
   25448:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
   2544c:	2b02      	cmp	r3, #2
   2544e:	d801      	bhi.n	25454 <appSlaveNextLegAdvState+0x24>
  {
    appSlaveLegAdvStart();
   25450:	f7ff ffa4 	bl	2539c <appSlaveLegAdvStart>
  }
}
   25454:	bf00      	nop
   25456:	b003      	add	sp, #12
   25458:	f85d fb04 	ldr.w	pc, [sp], #4
   2545c:	100079c8 	.word	0x100079c8

00025460 <appSlaveLegAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
   25460:	b500      	push	{lr}
   25462:	b083      	sub	sp, #12
   25464:	9001      	str	r0, [sp, #4]
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   25466:	9b01      	ldr	r3, [sp, #4]
   25468:	789b      	ldrb	r3, [r3, #2]
   2546a:	2b48      	cmp	r3, #72	; 0x48
   2546c:	d103      	bne.n	25476 <appSlaveLegAdvStop+0x16>
  {
    /* if advertising successfully ended with connection being created */
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   2546e:	9b01      	ldr	r3, [sp, #4]
   25470:	791b      	ldrb	r3, [r3, #4]
   25472:	2b00      	cmp	r3, #0
   25474:	d00c      	beq.n	25490 <appSlaveLegAdvStop+0x30>
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   25476:	4b08      	ldr	r3, [pc, #32]	; (25498 <appSlaveLegAdvStop+0x38>)
   25478:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
   2547c:	2b00      	cmp	r3, #0
   2547e:	d003      	beq.n	25488 <appSlaveLegAdvStop+0x28>
  {
    appSlaveLegAdvTypeChanged(pMsg);
   25480:	9801      	ldr	r0, [sp, #4]
   25482:	f7ff ffc1 	bl	25408 <appSlaveLegAdvTypeChanged>
   25486:	e004      	b.n	25492 <appSlaveLegAdvStop+0x32>
  }
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
   25488:	9801      	ldr	r0, [sp, #4]
   2548a:	f7ff ffd1 	bl	25430 <appSlaveNextLegAdvState>
   2548e:	e000      	b.n	25492 <appSlaveLegAdvStop+0x32>
      return;
   25490:	bf00      	nop
  }
}
   25492:	b003      	add	sp, #12
   25494:	f85d fb04 	ldr.w	pc, [sp], #4
   25498:	100079c8 	.word	0x100079c8

0002549c <appSlaveLegAdvRestart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
   2549c:	b500      	push	{lr}
   2549e:	b083      	sub	sp, #12
   254a0:	9001      	str	r0, [sp, #4]
  /* if connection closed */
  if (pMsg->hdr.event == DM_CONN_CLOSE_IND)
   254a2:	9b01      	ldr	r3, [sp, #4]
   254a4:	789b      	ldrb	r3, [r3, #2]
   254a6:	2b28      	cmp	r3, #40	; 0x28
   254a8:	d109      	bne.n	254be <appSlaveLegAdvRestart+0x22>
  {
    /* if connectable directed advertising failed to establish connection or was cancelled */
    if (appSlaveCb.advDirected)
   254aa:	4b15      	ldr	r3, [pc, #84]	; (25500 <appSlaveLegAdvRestart+0x64>)
   254ac:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   254b0:	2b00      	cmp	r3, #0
   254b2:	d016      	beq.n	254e2 <appSlaveLegAdvRestart+0x46>
    {
      appSlaveCb.advDirected = FALSE;
   254b4:	4b12      	ldr	r3, [pc, #72]	; (25500 <appSlaveLegAdvRestart+0x64>)
   254b6:	2200      	movs	r2, #0
   254b8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
      return;
   254bc:	e01c      	b.n	254f8 <appSlaveLegAdvRestart+0x5c>
    }
  }
  /* else if connection opened */
  else if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   254be:	9b01      	ldr	r3, [sp, #4]
   254c0:	789b      	ldrb	r3, [r3, #2]
   254c2:	2b27      	cmp	r3, #39	; 0x27
   254c4:	d10d      	bne.n	254e2 <appSlaveLegAdvRestart+0x46>
  {
    /* if connectable directed advertising */
    if (appSlaveCb.advDirected)
   254c6:	4b0e      	ldr	r3, [pc, #56]	; (25500 <appSlaveLegAdvRestart+0x64>)
   254c8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   254cc:	2b00      	cmp	r3, #0
   254ce:	d004      	beq.n	254da <appSlaveLegAdvRestart+0x3e>
    {
      appSlaveCb.advDirected = FALSE;
   254d0:	4b0b      	ldr	r3, [pc, #44]	; (25500 <appSlaveLegAdvRestart+0x64>)
   254d2:	2200      	movs	r2, #0
   254d4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
      return;
   254d8:	e00e      	b.n	254f8 <appSlaveLegAdvRestart+0x5c>
    }

    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   254da:	4b09      	ldr	r3, [pc, #36]	; (25500 <appSlaveLegAdvRestart+0x64>)
   254dc:	2203      	movs	r2, #3
   254de:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   254e2:	4b07      	ldr	r3, [pc, #28]	; (25500 <appSlaveLegAdvRestart+0x64>)
   254e4:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
   254e8:	2b03      	cmp	r3, #3
   254ea:	d105      	bne.n	254f8 <appSlaveLegAdvRestart+0x5c>
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   254ec:	4b04      	ldr	r3, [pc, #16]	; (25500 <appSlaveLegAdvRestart+0x64>)
   254ee:	2200      	movs	r2, #0
   254f0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    /* start advertising */
    appSlaveLegAdvStart();
   254f4:	f7ff ff52 	bl	2539c <appSlaveLegAdvStart>
  }
}
   254f8:	b003      	add	sp, #12
   254fa:	f85d fb04 	ldr.w	pc, [sp], #4
   254fe:	bf00      	nop
   25500:	100079c8 	.word	0x100079c8

00025504 <appSlaveAdvMode>:
static bool_t appSlaveAdvMode(void)
{
  /* legacy app slave works with both DM legacy and extended advertising */

  /* if first time since last power-on or reset */
  if (appSlaveCb.advStopCback == NULL)
   25504:	4b0a      	ldr	r3, [pc, #40]	; (25530 <appSlaveAdvMode+0x2c>)
   25506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   25508:	2b00      	cmp	r3, #0
   2550a:	d107      	bne.n	2551c <appSlaveAdvMode+0x18>
  {
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   2550c:	4b08      	ldr	r3, [pc, #32]	; (25530 <appSlaveAdvMode+0x2c>)
   2550e:	4a09      	ldr	r2, [pc, #36]	; (25534 <appSlaveAdvMode+0x30>)
   25510:	679a      	str	r2, [r3, #120]	; 0x78
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   25512:	4b07      	ldr	r3, [pc, #28]	; (25530 <appSlaveAdvMode+0x2c>)
   25514:	4a08      	ldr	r2, [pc, #32]	; (25538 <appSlaveAdvMode+0x34>)
   25516:	67da      	str	r2, [r3, #124]	; 0x7c

    return TRUE;
   25518:	2301      	movs	r3, #1
   2551a:	e007      	b.n	2552c <appSlaveAdvMode+0x28>
  }

  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   2551c:	4b04      	ldr	r3, [pc, #16]	; (25530 <appSlaveAdvMode+0x2c>)
   2551e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   25520:	4a04      	ldr	r2, [pc, #16]	; (25534 <appSlaveAdvMode+0x30>)
   25522:	4293      	cmp	r3, r2
   25524:	d101      	bne.n	2552a <appSlaveAdvMode+0x26>
  {
    return TRUE;
   25526:	2301      	movs	r3, #1
   25528:	e000      	b.n	2552c <appSlaveAdvMode+0x28>
  }

  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");

  return FALSE;
   2552a:	2300      	movs	r3, #0
}
   2552c:	4618      	mov	r0, r3
   2552e:	4770      	bx	lr
   25530:	100079c8 	.word	0x100079c8
   25534:	00025461 	.word	0x00025461
   25538:	0002549d 	.word	0x0002549d

0002553c <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   2553c:	b500      	push	{lr}
   2553e:	b085      	sub	sp, #20
   25540:	4603      	mov	r3, r0
   25542:	9202      	str	r2, [sp, #8]
   25544:	f88d 300f 	strb.w	r3, [sp, #15]
   25548:	460b      	mov	r3, r1
   2554a:	f88d 300e 	strb.w	r3, [sp, #14]
  if (appSlaveAdvMode())
   2554e:	f7ff ffd9 	bl	25504 <appSlaveAdvMode>
   25552:	4603      	mov	r3, r0
   25554:	2b00      	cmp	r3, #0
   25556:	d013      	beq.n	25580 <AppAdvSetData+0x44>
  {
    /* legacy advertising data length cannot exceed 31 bytes */
    if (len > HCI_ADV_DATA_LEN)
   25558:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2555c:	2b1f      	cmp	r3, #31
   2555e:	d902      	bls.n	25566 <AppAdvSetData+0x2a>
    {
      len = HCI_ADV_DATA_LEN;
   25560:	231f      	movs	r3, #31
   25562:	f88d 300e 	strb.w	r3, [sp, #14]
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   25566:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2556a:	b29a      	uxth	r2, r3
   2556c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   25570:	231f      	movs	r3, #31
   25572:	9301      	str	r3, [sp, #4]
   25574:	231f      	movs	r3, #31
   25576:	9300      	str	r3, [sp, #0]
   25578:	9b02      	ldr	r3, [sp, #8]
   2557a:	2000      	movs	r0, #0
   2557c:	f7ff fcf8 	bl	24f70 <appAdvSetData>
  }
}
   25580:	bf00      	nop
   25582:	b005      	add	sp, #20
   25584:	f85d fb04 	ldr.w	pc, [sp], #4

00025588 <AppAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   25588:	b500      	push	{lr}
   2558a:	b089      	sub	sp, #36	; 0x24
   2558c:	4603      	mov	r3, r0
   2558e:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t advHandle;
  uint8_t maxEaEvents;

  if (appSlaveAdvMode())
   25592:	f7ff ffb7 	bl	25504 <appSlaveAdvMode>
   25596:	4603      	mov	r3, r0
   25598:	2b00      	cmp	r3, #0
   2559a:	d01d      	beq.n	255d8 <AppAdvStart+0x50>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   2559c:	2300      	movs	r3, #0
   2559e:	f88d 301f 	strb.w	r3, [sp, #31]
    maxEaEvents = 0;
   255a2:	2300      	movs	r3, #0
   255a4:	f88d 301e 	strb.w	r3, [sp, #30]

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   255a8:	4b0d      	ldr	r3, [pc, #52]	; (255e0 <AppAdvStart+0x58>)
   255aa:	2200      	movs	r2, #0
   255ac:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   255b0:	4b0c      	ldr	r3, [pc, #48]	; (255e4 <AppAdvStart+0x5c>)
   255b2:	681b      	ldr	r3, [r3, #0]
   255b4:	1d9a      	adds	r2, r3, #6
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
   255b6:	4b0b      	ldr	r3, [pc, #44]	; (255e4 <AppAdvStart+0x5c>)
   255b8:	681b      	ldr	r3, [r3, #0]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   255ba:	4618      	mov	r0, r3
   255bc:	f10d 011f 	add.w	r1, sp, #31
   255c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   255c4:	9302      	str	r3, [sp, #8]
   255c6:	2301      	movs	r3, #1
   255c8:	9301      	str	r3, [sp, #4]
   255ca:	f10d 031e 	add.w	r3, sp, #30
   255ce:	9300      	str	r3, [sp, #0]
   255d0:	4603      	mov	r3, r0
   255d2:	2001      	movs	r0, #1
   255d4:	f7ff fdec 	bl	251b0 <appSlaveAdvStart>
  }
}
   255d8:	bf00      	nop
   255da:	b009      	add	sp, #36	; 0x24
   255dc:	f85d fb04 	ldr.w	pc, [sp], #4
   255e0:	100079c8 	.word	0x100079c8
   255e4:	1000794c 	.word	0x1000794c

000255e8 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   255e8:	4811      	ldr	r0, [pc, #68]	; (25630 <zero_loop+0x12>)
   255ea:	4912      	ldr	r1, [pc, #72]	; (25634 <zero_loop+0x16>)
   255ec:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   255ee:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   255f2:	4811      	ldr	r0, [pc, #68]	; (25638 <zero_loop+0x1a>)
   255f4:	6801      	ldr	r1, [r0, #0]
   255f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   255fa:	6001      	str	r1, [r0, #0]
   255fc:	f3bf 8f4f 	dsb	sy
   25600:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   25604:	480d      	ldr	r0, [pc, #52]	; (2563c <zero_loop+0x1e>)
   25606:	490e      	ldr	r1, [pc, #56]	; (25640 <zero_loop+0x22>)
   25608:	4a0e      	ldr	r2, [pc, #56]	; (25644 <zero_loop+0x26>)

0002560a <copy_loop>:
   2560a:	f850 3b04 	ldr.w	r3, [r0], #4
   2560e:	f841 3b04 	str.w	r3, [r1], #4
   25612:	4291      	cmp	r1, r2
   25614:	dbf9      	blt.n	2560a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   25616:	480c      	ldr	r0, [pc, #48]	; (25648 <zero_loop+0x2a>)
   25618:	490c      	ldr	r1, [pc, #48]	; (2564c <zero_loop+0x2e>)
   2561a:	f04f 0200 	mov.w	r2, #0

0002561e <zero_loop>:
   2561e:	4288      	cmp	r0, r1
   25620:	bfb8      	it	lt
   25622:	f840 2b04 	strlt.w	r2, [r0], #4
   25626:	dbfa      	blt.n	2561e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   25628:	f7f1 fb68 	bl	16cfc <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   2562c:	be00      	bkpt	0x0000
}
   2562e:	bf00      	nop
   25630:	e000ed08 	.word	0xe000ed08
   25634:	0000c000 	.word	0x0000c000
   25638:	e000ed88 	.word	0xe000ed88
   2563c:	0002ad54 	.word	0x0002ad54
   25640:	10002b00 	.word	0x10002b00
   25644:	10003ed0 	.word	0x10003ed0
   25648:	10003ed0 	.word	0x10003ed0
   2564c:	10007b9c 	.word	0x10007b9c

00025650 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   25650:	e7fe      	b.n	25650 <NMI_Handler>

00025652 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   25652:	e7fe      	b.n	25652 <BusFault_Handler>

00025654 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   25654:	e7fe      	b.n	25654 <DebugMon_Handler>
	...

00025658 <memcmp>:
   25658:	2a03      	cmp	r2, #3
   2565a:	b570      	push	{r4, r5, r6, lr}
   2565c:	d915      	bls.n	2568a <memcmp+0x32>
   2565e:	ea40 0c01 	orr.w	ip, r0, r1
   25662:	f01c 0f03 	tst.w	ip, #3
   25666:	4604      	mov	r4, r0
   25668:	460b      	mov	r3, r1
   2566a:	d121      	bne.n	256b0 <memcmp+0x58>
   2566c:	4619      	mov	r1, r3
   2566e:	4620      	mov	r0, r4
   25670:	680e      	ldr	r6, [r1, #0]
   25672:	6805      	ldr	r5, [r0, #0]
   25674:	42b5      	cmp	r5, r6
   25676:	f104 0404 	add.w	r4, r4, #4
   2567a:	f103 0304 	add.w	r3, r3, #4
   2567e:	d117      	bne.n	256b0 <memcmp+0x58>
   25680:	3a04      	subs	r2, #4
   25682:	2a03      	cmp	r2, #3
   25684:	4620      	mov	r0, r4
   25686:	4619      	mov	r1, r3
   25688:	d8f0      	bhi.n	2566c <memcmp+0x14>
   2568a:	1e54      	subs	r4, r2, #1
   2568c:	b1a2      	cbz	r2, 256b8 <memcmp+0x60>
   2568e:	f100 3cff 	add.w	ip, r0, #4294967295
   25692:	3901      	subs	r1, #1
   25694:	e001      	b.n	2569a <memcmp+0x42>
   25696:	18c3      	adds	r3, r0, r3
   25698:	d00c      	beq.n	256b4 <memcmp+0x5c>
   2569a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   2569e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   256a2:	4596      	cmp	lr, r2
   256a4:	eba4 030c 	sub.w	r3, r4, ip
   256a8:	d0f5      	beq.n	25696 <memcmp+0x3e>
   256aa:	ebae 0002 	sub.w	r0, lr, r2
   256ae:	bd70      	pop	{r4, r5, r6, pc}
   256b0:	1e54      	subs	r4, r2, #1
   256b2:	e7ec      	b.n	2568e <memcmp+0x36>
   256b4:	4618      	mov	r0, r3
   256b6:	bd70      	pop	{r4, r5, r6, pc}
   256b8:	4610      	mov	r0, r2
   256ba:	bd70      	pop	{r4, r5, r6, pc}

000256bc <memset>:
   256bc:	0783      	lsls	r3, r0, #30
   256be:	b530      	push	{r4, r5, lr}
   256c0:	d048      	beq.n	25754 <memset+0x98>
   256c2:	1e54      	subs	r4, r2, #1
   256c4:	2a00      	cmp	r2, #0
   256c6:	d03f      	beq.n	25748 <memset+0x8c>
   256c8:	b2ca      	uxtb	r2, r1
   256ca:	4603      	mov	r3, r0
   256cc:	e001      	b.n	256d2 <memset+0x16>
   256ce:	3c01      	subs	r4, #1
   256d0:	d33a      	bcc.n	25748 <memset+0x8c>
   256d2:	f803 2b01 	strb.w	r2, [r3], #1
   256d6:	079d      	lsls	r5, r3, #30
   256d8:	d1f9      	bne.n	256ce <memset+0x12>
   256da:	2c03      	cmp	r4, #3
   256dc:	d92d      	bls.n	2573a <memset+0x7e>
   256de:	b2cd      	uxtb	r5, r1
   256e0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   256e4:	2c0f      	cmp	r4, #15
   256e6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   256ea:	d936      	bls.n	2575a <memset+0x9e>
   256ec:	f1a4 0210 	sub.w	r2, r4, #16
   256f0:	f022 0c0f 	bic.w	ip, r2, #15
   256f4:	f103 0e20 	add.w	lr, r3, #32
   256f8:	44e6      	add	lr, ip
   256fa:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   256fe:	f103 0210 	add.w	r2, r3, #16
   25702:	e942 5504 	strd	r5, r5, [r2, #-16]
   25706:	e942 5502 	strd	r5, r5, [r2, #-8]
   2570a:	3210      	adds	r2, #16
   2570c:	4572      	cmp	r2, lr
   2570e:	d1f8      	bne.n	25702 <memset+0x46>
   25710:	f10c 0201 	add.w	r2, ip, #1
   25714:	f014 0f0c 	tst.w	r4, #12
   25718:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   2571c:	f004 0c0f 	and.w	ip, r4, #15
   25720:	d013      	beq.n	2574a <memset+0x8e>
   25722:	f1ac 0304 	sub.w	r3, ip, #4
   25726:	f023 0303 	bic.w	r3, r3, #3
   2572a:	3304      	adds	r3, #4
   2572c:	4413      	add	r3, r2
   2572e:	f842 5b04 	str.w	r5, [r2], #4
   25732:	4293      	cmp	r3, r2
   25734:	d1fb      	bne.n	2572e <memset+0x72>
   25736:	f00c 0403 	and.w	r4, ip, #3
   2573a:	b12c      	cbz	r4, 25748 <memset+0x8c>
   2573c:	b2ca      	uxtb	r2, r1
   2573e:	441c      	add	r4, r3
   25740:	f803 2b01 	strb.w	r2, [r3], #1
   25744:	429c      	cmp	r4, r3
   25746:	d1fb      	bne.n	25740 <memset+0x84>
   25748:	bd30      	pop	{r4, r5, pc}
   2574a:	4664      	mov	r4, ip
   2574c:	4613      	mov	r3, r2
   2574e:	2c00      	cmp	r4, #0
   25750:	d1f4      	bne.n	2573c <memset+0x80>
   25752:	e7f9      	b.n	25748 <memset+0x8c>
   25754:	4603      	mov	r3, r0
   25756:	4614      	mov	r4, r2
   25758:	e7bf      	b.n	256da <memset+0x1e>
   2575a:	461a      	mov	r2, r3
   2575c:	46a4      	mov	ip, r4
   2575e:	e7e0      	b.n	25722 <memset+0x66>

00025760 <am_bsp_low_power_init>:
   25760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25762:	f002 f869 	bl	27838 <am_hal_pwrctrl_low_power_init>
   25766:	f002 f9cd 	bl	27b04 <am_hal_rtc_osc_disable>
   2576a:	4b0b      	ldr	r3, [pc, #44]	; (25798 <am_bsp_low_power_init+0x38>)
   2576c:	4f0b      	ldr	r7, [pc, #44]	; (2579c <am_bsp_low_power_init+0x3c>)
   2576e:	681e      	ldr	r6, [r3, #0]
   25770:	2400      	movs	r4, #0
   25772:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   25776:	4631      	mov	r1, r6
   25778:	4628      	mov	r0, r5
   2577a:	f001 fd9d 	bl	272b8 <am_hal_gpio_pinconfig>
   2577e:	2103      	movs	r1, #3
   25780:	4628      	mov	r0, r5
   25782:	f001 fecf 	bl	27524 <am_hal_gpio_state_write>
   25786:	3401      	adds	r4, #1
   25788:	2100      	movs	r1, #0
   2578a:	4628      	mov	r0, r5
   2578c:	f001 feca 	bl	27524 <am_hal_gpio_state_write>
   25790:	2c05      	cmp	r4, #5
   25792:	d1ee      	bne.n	25772 <am_bsp_low_power_init+0x12>
   25794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25796:	bf00      	nop
   25798:	0002a908 	.word	0x0002a908
   2579c:	10002cd8 	.word	0x10002cd8

000257a0 <am_hal_ble_blocking_transfer.part.0>:
   257a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257a4:	4dbc      	ldr	r5, [pc, #752]	; (25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   257a6:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   257aa:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   257ae:	f36f 13c7 	bfc	r3, #7, #1
   257b2:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   257b6:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   257ba:	f36f 2308 	bfc	r3, #8, #1
   257be:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   257c2:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   257c6:	f36f 0300 	bfc	r3, #0, #1
   257ca:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   257ce:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   257d2:	f36f 0341 	bfc	r3, #1, #1
   257d6:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   257da:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   257de:	f043 0301 	orr.w	r3, r3, #1
   257e2:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   257e6:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   257ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   257ee:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   257f2:	7a8b      	ldrb	r3, [r1, #10]
   257f4:	2b01      	cmp	r3, #1
   257f6:	b085      	sub	sp, #20
   257f8:	460e      	mov	r6, r1
   257fa:	4604      	mov	r4, r0
   257fc:	d03c      	beq.n	25878 <am_hal_ble_blocking_transfer.part.0+0xd8>
   257fe:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   25802:	061a      	lsls	r2, r3, #24
   25804:	d532      	bpl.n	2586c <am_hal_ble_blocking_transfer.part.0+0xcc>
   25806:	f001 fed1 	bl	275ac <am_hal_interrupt_master_disable>
   2580a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2580e:	9003      	str	r0, [sp, #12]
   25810:	9803      	ldr	r0, [sp, #12]
   25812:	2b00      	cmp	r3, #0
   25814:	d151      	bne.n	258ba <am_hal_ble_blocking_transfer.part.0+0x11a>
   25816:	2301      	movs	r3, #1
   25818:	6463      	str	r3, [r4, #68]	; 0x44
   2581a:	f001 fecb 	bl	275b4 <am_hal_interrupt_master_set>
   2581e:	7b33      	ldrb	r3, [r6, #12]
   25820:	b113      	cbz	r3, 25828 <am_hal_ble_blocking_transfer.part.0+0x88>
   25822:	2301      	movs	r3, #1
   25824:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   25828:	6833      	ldr	r3, [r6, #0]
   2582a:	6872      	ldr	r2, [r6, #4]
   2582c:	68b1      	ldr	r1, [r6, #8]
   2582e:	68f0      	ldr	r0, [r6, #12]
   25830:	61a0      	str	r0, [r4, #24]
   25832:	60e3      	str	r3, [r4, #12]
   25834:	6122      	str	r2, [r4, #16]
   25836:	6161      	str	r1, [r4, #20]
   25838:	6933      	ldr	r3, [r6, #16]
   2583a:	6972      	ldr	r2, [r6, #20]
   2583c:	6222      	str	r2, [r4, #32]
   2583e:	61e3      	str	r3, [r4, #28]
   25840:	f001 feb4 	bl	275ac <am_hal_interrupt_master_disable>
   25844:	6823      	ldr	r3, [r4, #0]
   25846:	4a95      	ldr	r2, [pc, #596]	; (25a9c <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   25848:	9001      	str	r0, [sp, #4]
   2584a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2584e:	4293      	cmp	r3, r2
   25850:	f104 070c 	add.w	r7, r4, #12
   25854:	f040 8156 	bne.w	25b04 <am_hal_ble_blocking_transfer.part.0+0x364>
   25858:	79f2      	ldrb	r2, [r6, #7]
   2585a:	2a03      	cmp	r2, #3
   2585c:	f200 8152 	bhi.w	25b04 <am_hal_ble_blocking_transfer.part.0+0x364>
   25860:	e8df f012 	tbh	[pc, r2, lsl #1]
   25864:	01040071 	.word	0x01040071
   25868:	010900ff 	.word	0x010900ff
   2586c:	488c      	ldr	r0, [pc, #560]	; (25aa0 <am_hal_ble_blocking_transfer.part.0+0x300>)
   2586e:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   25872:	b005      	add	sp, #20
   25874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25878:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   2587c:	b333      	cbz	r3, 258cc <am_hal_ble_blocking_transfer.part.0+0x12c>
   2587e:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
   25882:	2d00      	cmp	r5, #0
   25884:	f000 81c4 	beq.w	25c10 <am_hal_ble_blocking_transfer.part.0+0x470>
   25888:	2300      	movs	r3, #0
   2588a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
   2588e:	4f82      	ldr	r7, [pc, #520]	; (25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   25890:	f240 152d 	movw	r5, #301	; 0x12d
   25894:	f04f 0900 	mov.w	r9, #0
   25898:	e008      	b.n	258ac <am_hal_ble_blocking_transfer.part.0+0x10c>
   2589a:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   2589e:	071b      	lsls	r3, r3, #28
   258a0:	d518      	bpl.n	258d4 <am_hal_ble_blocking_transfer.part.0+0x134>
   258a2:	20a0      	movs	r0, #160	; 0xa0
   258a4:	f001 fcaa 	bl	271fc <am_hal_flash_delay>
   258a8:	3d01      	subs	r5, #1
   258aa:	d013      	beq.n	258d4 <am_hal_ble_blocking_transfer.part.0+0x134>
   258ac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   258b0:	2b00      	cmp	r3, #0
   258b2:	d0f2      	beq.n	2589a <am_hal_ble_blocking_transfer.part.0+0xfa>
   258b4:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   258b8:	e7f3      	b.n	258a2 <am_hal_ble_blocking_transfer.part.0+0x102>
   258ba:	f001 fe7b 	bl	275b4 <am_hal_interrupt_master_set>
   258be:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   258c2:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   258c6:	b005      	add	sp, #20
   258c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   258d0:	2b00      	cmp	r3, #0
   258d2:	d1dc      	bne.n	2588e <am_hal_ble_blocking_transfer.part.0+0xee>
   258d4:	4d70      	ldr	r5, [pc, #448]	; (25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   258d6:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   258da:	f043 0302 	orr.w	r3, r3, #2
   258de:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   258e2:	2050      	movs	r0, #80	; 0x50
   258e4:	f001 fc8a 	bl	271fc <am_hal_flash_delay>
   258e8:	6823      	ldr	r3, [r4, #0]
   258ea:	4a6c      	ldr	r2, [pc, #432]	; (25a9c <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   258ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   258f0:	4293      	cmp	r3, r2
   258f2:	d105      	bne.n	25900 <am_hal_ble_blocking_transfer.part.0+0x160>
   258f4:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   258f8:	f043 030c 	orr.w	r3, r3, #12
   258fc:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   25900:	2500      	movs	r5, #0
   25902:	4f65      	ldr	r7, [pc, #404]	; (25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   25904:	46a9      	mov	r9, r5
   25906:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   2590a:	2b00      	cmp	r3, #0
   2590c:	f040 80ba 	bne.w	25a84 <am_hal_ble_blocking_transfer.part.0+0x2e4>
   25910:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   25914:	0718      	lsls	r0, r3, #28
   25916:	f140 80c7 	bpl.w	25aa8 <am_hal_ble_blocking_transfer.part.0+0x308>
   2591a:	f001 fe47 	bl	275ac <am_hal_interrupt_master_disable>
   2591e:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
   25922:	9002      	str	r0, [sp, #8]
   25924:	9802      	ldr	r0, [sp, #8]
   25926:	f1ba 0f00 	cmp.w	sl, #0
   2592a:	f040 80ae 	bne.w	25a8a <am_hal_ble_blocking_transfer.part.0+0x2ea>
   2592e:	2301      	movs	r3, #1
   25930:	6463      	str	r3, [r4, #68]	; 0x44
   25932:	f001 fe3f 	bl	275b4 <am_hal_interrupt_master_set>
   25936:	4b58      	ldr	r3, [pc, #352]	; (25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   25938:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2593c:	f36a 0241 	bfi	r2, sl, #1, #1
   25940:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   25944:	e76b      	b.n	2581e <am_hal_ble_blocking_transfer.part.0+0x7e>
   25946:	2500      	movs	r5, #0
   25948:	46a9      	mov	r9, r5
   2594a:	f896 e00a 	ldrb.w	lr, [r6, #10]
   2594e:	f896 c00c 	ldrb.w	ip, [r6, #12]
   25952:	8930      	ldrh	r0, [r6, #8]
   25954:	4b53      	ldr	r3, [pc, #332]	; (25aa4 <am_hal_ble_blocking_transfer.part.0+0x304>)
   25956:	0151      	lsls	r1, r2, #5
   25958:	ea03 2a00 	and.w	sl, r3, r0, lsl #8
   2595c:	f001 0b60 	and.w	fp, r1, #96	; 0x60
   25960:	ea4e 13cc 	orr.w	r3, lr, ip, lsl #7
   25964:	ea43 030b 	orr.w	r3, r3, fp
   25968:	ea43 030a 	orr.w	r3, r3, sl
   2596c:	ea43 0309 	orr.w	r3, r3, r9
   25970:	f8df 9124 	ldr.w	r9, [pc, #292]	; 25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   25974:	f1be 0f01 	cmp.w	lr, #1
   25978:	f8c9 5214 	str.w	r5, [r9, #532]	; 0x214
   2597c:	f8c9 320c 	str.w	r3, [r9, #524]	; 0x20c
   25980:	f000 8131 	beq.w	25be6 <am_hal_ble_blocking_transfer.part.0+0x446>
   25984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   25986:	f8b4 c014 	ldrh.w	ip, [r4, #20]
   2598a:	f8df e110 	ldr.w	lr, [pc, #272]	; 25a9c <am_hal_ble_blocking_transfer.part.0+0x2fc>
   2598e:	4a42      	ldr	r2, [pc, #264]	; (25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   25990:	2500      	movs	r5, #0
   25992:	459c      	cmp	ip, r3
   25994:	d924      	bls.n	259e0 <am_hal_ble_blocking_transfer.part.0+0x240>
   25996:	6821      	ldr	r1, [r4, #0]
   25998:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
   2599c:	4571      	cmp	r1, lr
   2599e:	d1fd      	bne.n	2599c <am_hal_ble_blocking_transfer.part.0+0x1fc>
   259a0:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   259a4:	f3c1 4107 	ubfx	r1, r1, #16, #8
   259a8:	2903      	cmp	r1, #3
   259aa:	d9f2      	bls.n	25992 <am_hal_ble_blocking_transfer.part.0+0x1f2>
   259ac:	4561      	cmp	r1, ip
   259ae:	f080 80a3 	bcs.w	25af8 <am_hal_ble_blocking_transfer.part.0+0x358>
   259b2:	68e0      	ldr	r0, [r4, #12]
   259b4:	f021 0103 	bic.w	r1, r1, #3
   259b8:	f023 0303 	bic.w	r3, r3, #3
   259bc:	eb00 0903 	add.w	r9, r0, r3
   259c0:	464b      	mov	r3, r9
   259c2:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
   259c6:	f843 0b04 	str.w	r0, [r3], #4
   259ca:	eba3 0009 	sub.w	r0, r3, r9
   259ce:	4288      	cmp	r0, r1
   259d0:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
   259d4:	d3f5      	bcc.n	259c2 <am_hal_ble_blocking_transfer.part.0+0x222>
   259d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   259d8:	440b      	add	r3, r1
   259da:	459c      	cmp	ip, r3
   259dc:	63e3      	str	r3, [r4, #60]	; 0x3c
   259de:	d8da      	bhi.n	25996 <am_hal_ble_blocking_transfer.part.0+0x1f6>
   259e0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   259e4:	9801      	ldr	r0, [sp, #4]
   259e6:	f001 fde5 	bl	275b4 <am_hal_interrupt_master_set>
   259ea:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   259ee:	07da      	lsls	r2, r3, #31
   259f0:	bf58      	it	pl
   259f2:	f242 7510 	movwpl	r5, #10000	; 0x2710
   259f6:	d503      	bpl.n	25a00 <am_hal_ble_blocking_transfer.part.0+0x260>
   259f8:	e009      	b.n	25a0e <am_hal_ble_blocking_transfer.part.0+0x26e>
   259fa:	3d01      	subs	r5, #1
   259fc:	f000 80fc 	beq.w	25bf8 <am_hal_ble_blocking_transfer.part.0+0x458>
   25a00:	2010      	movs	r0, #16
   25a02:	f001 fbfb 	bl	271fc <am_hal_flash_delay>
   25a06:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   25a0a:	07db      	lsls	r3, r3, #31
   25a0c:	d5f5      	bpl.n	259fa <am_hal_ble_blocking_transfer.part.0+0x25a>
   25a0e:	4a22      	ldr	r2, [pc, #136]	; (25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   25a10:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   25a14:	f041 0101 	orr.w	r1, r1, #1
   25a18:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   25a1c:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   25a20:	2300      	movs	r3, #0
   25a22:	f041 0102 	orr.w	r1, r1, #2
   25a26:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   25a2a:	60e3      	str	r3, [r4, #12]
   25a2c:	607b      	str	r3, [r7, #4]
   25a2e:	60bb      	str	r3, [r7, #8]
   25a30:	60fb      	str	r3, [r7, #12]
   25a32:	613b      	str	r3, [r7, #16]
   25a34:	617b      	str	r3, [r7, #20]
   25a36:	63e3      	str	r3, [r4, #60]	; 0x3c
   25a38:	7ab1      	ldrb	r1, [r6, #10]
   25a3a:	2901      	cmp	r1, #1
   25a3c:	f000 80c2 	beq.w	25bc4 <am_hal_ble_blocking_transfer.part.0+0x424>
   25a40:	2902      	cmp	r1, #2
   25a42:	d104      	bne.n	25a4e <am_hal_ble_blocking_transfer.part.0+0x2ae>
   25a44:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   25a48:	b10a      	cbz	r2, 25a4e <am_hal_ble_blocking_transfer.part.0+0x2ae>
   25a4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   25a4e:	2300      	movs	r3, #0
   25a50:	4a11      	ldr	r2, [pc, #68]	; (25a98 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   25a52:	4618      	mov	r0, r3
   25a54:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   25a58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   25a5c:	b005      	add	sp, #20
   25a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a62:	7973      	ldrb	r3, [r6, #5]
   25a64:	7935      	ldrb	r5, [r6, #4]
   25a66:	ea4f 6903 	mov.w	r9, r3, lsl #24
   25a6a:	e76e      	b.n	2594a <am_hal_ble_blocking_transfer.part.0+0x1aa>
   25a6c:	7933      	ldrb	r3, [r6, #4]
   25a6e:	2500      	movs	r5, #0
   25a70:	ea4f 6903 	mov.w	r9, r3, lsl #24
   25a74:	e769      	b.n	2594a <am_hal_ble_blocking_transfer.part.0+0x1aa>
   25a76:	88b5      	ldrh	r5, [r6, #4]
   25a78:	79b3      	ldrb	r3, [r6, #6]
   25a7a:	ba6d      	rev16	r5, r5
   25a7c:	b2ad      	uxth	r5, r5
   25a7e:	ea4f 6903 	mov.w	r9, r3, lsl #24
   25a82:	e762      	b.n	2594a <am_hal_ble_blocking_transfer.part.0+0x1aa>
   25a84:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   25a88:	e747      	b.n	2591a <am_hal_ble_blocking_transfer.part.0+0x17a>
   25a8a:	f001 fd93 	bl	275b4 <am_hal_interrupt_master_set>
   25a8e:	20a0      	movs	r0, #160	; 0xa0
   25a90:	3501      	adds	r5, #1
   25a92:	f001 fbb3 	bl	271fc <am_hal_flash_delay>
   25a96:	e736      	b.n	25906 <am_hal_ble_blocking_transfer.part.0+0x166>
   25a98:	5000c000 	.word	0x5000c000
   25a9c:	01775230 	.word	0x01775230
   25aa0:	08000001 	.word	0x08000001
   25aa4:	000fff00 	.word	0x000fff00
   25aa8:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   25aac:	d203      	bcs.n	25ab6 <am_hal_ble_blocking_transfer.part.0+0x316>
   25aae:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   25ab2:	0619      	lsls	r1, r3, #24
   25ab4:	d5eb      	bpl.n	25a8e <am_hal_ble_blocking_transfer.part.0+0x2ee>
   25ab6:	6823      	ldr	r3, [r4, #0]
   25ab8:	4a6a      	ldr	r2, [pc, #424]	; (25c64 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   25aba:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25abe:	4293      	cmp	r3, r2
   25ac0:	4b69      	ldr	r3, [pc, #420]	; (25c68 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   25ac2:	f040 809b 	bne.w	25bfc <am_hal_ble_blocking_transfer.part.0+0x45c>
   25ac6:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   25aca:	4868      	ldr	r0, [pc, #416]	; (25c6c <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   25acc:	2102      	movs	r1, #2
   25ace:	f361 0283 	bfi	r2, r1, #2, #2
   25ad2:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   25ad6:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   25ada:	f36f 0241 	bfc	r2, #1, #1
   25ade:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   25ae2:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   25ae6:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   25aea:	f361 0283 	bfi	r2, r1, #2, #2
   25aee:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   25af2:	b005      	add	sp, #20
   25af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25af8:	ebac 0103 	sub.w	r1, ip, r3
   25afc:	68e0      	ldr	r0, [r4, #12]
   25afe:	f023 0303 	bic.w	r3, r3, #3
   25b02:	e75b      	b.n	259bc <am_hal_ble_blocking_transfer.part.0+0x21c>
   25b04:	7ab3      	ldrb	r3, [r6, #10]
   25b06:	2b01      	cmp	r3, #1
   25b08:	f47f af3c 	bne.w	25984 <am_hal_ble_blocking_transfer.part.0+0x1e4>
   25b0c:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   25b10:	68e5      	ldr	r5, [r4, #12]
   25b12:	f8df b154 	ldr.w	fp, [pc, #340]	; 25c68 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   25b16:	f1b9 0f00 	cmp.w	r9, #0
   25b1a:	d019      	beq.n	25b50 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   25b1c:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   25b20:	f3c3 2307 	ubfx	r3, r3, #8, #8
   25b24:	2b03      	cmp	r3, #3
   25b26:	d835      	bhi.n	25b94 <am_hal_ble_blocking_transfer.part.0+0x3f4>
   25b28:	f8df a14c 	ldr.w	sl, [pc, #332]	; 25c78 <am_hal_ble_blocking_transfer.part.0+0x4d8>
   25b2c:	e00a      	b.n	25b44 <am_hal_ble_blocking_transfer.part.0+0x3a4>
   25b2e:	f1ba 0a01 	subs.w	sl, sl, #1
   25b32:	d00d      	beq.n	25b50 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   25b34:	f001 fb62 	bl	271fc <am_hal_flash_delay>
   25b38:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   25b3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   25b40:	2b03      	cmp	r3, #3
   25b42:	d827      	bhi.n	25b94 <am_hal_ble_blocking_transfer.part.0+0x3f4>
   25b44:	f8db 3224 	ldr.w	r3, [fp, #548]	; 0x224
   25b48:	07db      	lsls	r3, r3, #31
   25b4a:	f04f 0010 	mov.w	r0, #16
   25b4e:	d5ee      	bpl.n	25b2e <am_hal_ble_blocking_transfer.part.0+0x38e>
   25b50:	f8df 9114 	ldr.w	r9, [pc, #276]	; 25c68 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   25b54:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   25b58:	07d8      	lsls	r0, r3, #31
   25b5a:	bf58      	it	pl
   25b5c:	f44f 65fa 	movpl.w	r5, #2000	; 0x7d0
   25b60:	d408      	bmi.n	25b74 <am_hal_ble_blocking_transfer.part.0+0x3d4>
   25b62:	2010      	movs	r0, #16
   25b64:	f001 fb4a 	bl	271fc <am_hal_flash_delay>
   25b68:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   25b6c:	07d9      	lsls	r1, r3, #31
   25b6e:	d401      	bmi.n	25b74 <am_hal_ble_blocking_transfer.part.0+0x3d4>
   25b70:	3d01      	subs	r5, #1
   25b72:	d1f6      	bne.n	25b62 <am_hal_ble_blocking_transfer.part.0+0x3c2>
   25b74:	6823      	ldr	r3, [r4, #0]
   25b76:	4a3b      	ldr	r2, [pc, #236]	; (25c64 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   25b78:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25b7c:	4293      	cmp	r3, r2
   25b7e:	f47f af2f 	bne.w	259e0 <am_hal_ble_blocking_transfer.part.0+0x240>
   25b82:	4b39      	ldr	r3, [pc, #228]	; (25c68 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   25b84:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   25b88:	2102      	movs	r1, #2
   25b8a:	f361 0283 	bfi	r2, r1, #2, #2
   25b8e:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   25b92:	e725      	b.n	259e0 <am_hal_ble_blocking_transfer.part.0+0x240>
   25b94:	f009 0003 	and.w	r0, r9, #3
   25b98:	462a      	mov	r2, r5
   25b9a:	f852 1b04 	ldr.w	r1, [r2], #4
   25b9e:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
   25ba2:	4581      	cmp	r9, r0
   25ba4:	eba5 0102 	sub.w	r1, r5, r2
   25ba8:	4419      	add	r1, r3
   25baa:	f1a9 0904 	sub.w	r9, r9, #4
   25bae:	d005      	beq.n	25bbc <am_hal_ble_blocking_transfer.part.0+0x41c>
   25bb0:	2903      	cmp	r1, #3
   25bb2:	d905      	bls.n	25bc0 <am_hal_ble_blocking_transfer.part.0+0x420>
   25bb4:	f1b9 0f00 	cmp.w	r9, #0
   25bb8:	d1ef      	bne.n	25b9a <am_hal_ble_blocking_transfer.part.0+0x3fa>
   25bba:	e7c9      	b.n	25b50 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   25bbc:	f04f 0900 	mov.w	r9, #0
   25bc0:	4615      	mov	r5, r2
   25bc2:	e7a8      	b.n	25b16 <am_hal_ble_blocking_transfer.part.0+0x376>
   25bc4:	6823      	ldr	r3, [r4, #0]
   25bc6:	4927      	ldr	r1, [pc, #156]	; (25c64 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   25bc8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25bcc:	428b      	cmp	r3, r1
   25bce:	d106      	bne.n	25bde <am_hal_ble_blocking_transfer.part.0+0x43e>
   25bd0:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   25bd4:	2102      	movs	r1, #2
   25bd6:	f361 0383 	bfi	r3, r1, #2, #2
   25bda:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   25bde:	2301      	movs	r3, #1
   25be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   25be4:	e733      	b.n	25a4e <am_hal_ble_blocking_transfer.part.0+0x2ae>
   25be6:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   25bea:	68e5      	ldr	r5, [r4, #12]
   25bec:	2a03      	cmp	r2, #3
   25bee:	d890      	bhi.n	25b12 <am_hal_ble_blocking_transfer.part.0+0x372>
   25bf0:	e8df f002 	tbb	[pc, r2]
   25bf4:	2a303417 	.word	0x2a303417
   25bf8:	481d      	ldr	r0, [pc, #116]	; (25c70 <am_hal_ble_blocking_transfer.part.0+0x4d0>)
   25bfa:	e63a      	b.n	25872 <am_hal_ble_blocking_transfer.part.0+0xd2>
   25bfc:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   25c00:	481a      	ldr	r0, [pc, #104]	; (25c6c <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   25c02:	f36f 0241 	bfc	r2, #1, #1
   25c06:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   25c0a:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   25c0e:	e630      	b.n	25872 <am_hal_ble_blocking_transfer.part.0+0xd2>
   25c10:	f64b 3080 	movw	r0, #48000	; 0xbb80
   25c14:	f001 faf2 	bl	271fc <am_hal_flash_delay>
   25c18:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   25c1c:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
   25c20:	e656      	b.n	258d0 <am_hal_ble_blocking_transfer.part.0+0x130>
   25c22:	2200      	movs	r2, #0
   25c24:	4613      	mov	r3, r2
   25c26:	f001 0160 	and.w	r1, r1, #96	; 0x60
   25c2a:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
   25c2e:	430b      	orrs	r3, r1
   25c30:	4910      	ldr	r1, [pc, #64]	; (25c74 <am_hal_ble_blocking_transfer.part.0+0x4d4>)
   25c32:	ea01 2000 	and.w	r0, r1, r0, lsl #8
   25c36:	4303      	orrs	r3, r0
   25c38:	490b      	ldr	r1, [pc, #44]	; (25c68 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   25c3a:	f043 0301 	orr.w	r3, r3, #1
   25c3e:	f8c1 2214 	str.w	r2, [r1, #532]	; 0x214
   25c42:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   25c46:	e764      	b.n	25b12 <am_hal_ble_blocking_transfer.part.0+0x372>
   25c48:	88b2      	ldrh	r2, [r6, #4]
   25c4a:	79b3      	ldrb	r3, [r6, #6]
   25c4c:	ba52      	rev16	r2, r2
   25c4e:	b292      	uxth	r2, r2
   25c50:	061b      	lsls	r3, r3, #24
   25c52:	e7e8      	b.n	25c26 <am_hal_ble_blocking_transfer.part.0+0x486>
   25c54:	7973      	ldrb	r3, [r6, #5]
   25c56:	7932      	ldrb	r2, [r6, #4]
   25c58:	061b      	lsls	r3, r3, #24
   25c5a:	e7e4      	b.n	25c26 <am_hal_ble_blocking_transfer.part.0+0x486>
   25c5c:	7933      	ldrb	r3, [r6, #4]
   25c5e:	2200      	movs	r2, #0
   25c60:	061b      	lsls	r3, r3, #24
   25c62:	e7e0      	b.n	25c26 <am_hal_ble_blocking_transfer.part.0+0x486>
   25c64:	01775230 	.word	0x01775230
   25c68:	5000c000 	.word	0x5000c000
   25c6c:	08000002 	.word	0x08000002
   25c70:	08000009 	.word	0x08000009
   25c74:	000fff00 	.word	0x000fff00
   25c78:	0007a121 	.word	0x0007a121

00025c7c <am_hal_ble_initialize>:
   25c7c:	bb58      	cbnz	r0, 25cd6 <am_hal_ble_initialize+0x5a>
   25c7e:	b361      	cbz	r1, 25cda <am_hal_ble_initialize+0x5e>
   25c80:	4b17      	ldr	r3, [pc, #92]	; (25ce0 <am_hal_ble_initialize+0x64>)
   25c82:	78d8      	ldrb	r0, [r3, #3]
   25c84:	b410      	push	{r4}
   25c86:	f3c0 0400 	ubfx	r4, r0, #0, #1
   25c8a:	f010 0001 	ands.w	r0, r0, #1
   25c8e:	d11e      	bne.n	25cce <am_hal_ble_initialize+0x52>
   25c90:	681a      	ldr	r2, [r3, #0]
   25c92:	f883 4047 	strb.w	r4, [r3, #71]	; 0x47
   25c96:	e9c3 0004 	strd	r0, r0, [r3, #16]
   25c9a:	e9c3 0006 	strd	r0, r0, [r3, #24]
   25c9e:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
   25ca2:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
   25ca6:	721c      	strb	r4, [r3, #8]
   25ca8:	4c0e      	ldr	r4, [pc, #56]	; (25ce4 <am_hal_ble_initialize+0x68>)
   25caa:	60d8      	str	r0, [r3, #12]
   25cac:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   25cb0:	6258      	str	r0, [r3, #36]	; 0x24
   25cb2:	6218      	str	r0, [r3, #32]
   25cb4:	4314      	orrs	r4, r2
   25cb6:	6398      	str	r0, [r3, #56]	; 0x38
   25cb8:	601c      	str	r4, [r3, #0]
   25cba:	63d8      	str	r0, [r3, #60]	; 0x3c
   25cbc:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
   25cc0:	f8c3 0043 	str.w	r0, [r3, #67]	; 0x43
   25cc4:	6058      	str	r0, [r3, #4]
   25cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
   25cca:	600b      	str	r3, [r1, #0]
   25ccc:	4770      	bx	lr
   25cce:	2007      	movs	r0, #7
   25cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
   25cd4:	4770      	bx	lr
   25cd6:	2005      	movs	r0, #5
   25cd8:	4770      	bx	lr
   25cda:	2006      	movs	r0, #6
   25cdc:	4770      	bx	lr
   25cde:	bf00      	nop
   25ce0:	10007acc 	.word	0x10007acc
   25ce4:	01775230 	.word	0x01775230

00025ce8 <am_hal_ble_deinitialize>:
   25ce8:	b128      	cbz	r0, 25cf6 <am_hal_ble_deinitialize+0xe>
   25cea:	6803      	ldr	r3, [r0, #0]
   25cec:	4a0d      	ldr	r2, [pc, #52]	; (25d24 <am_hal_ble_deinitialize+0x3c>)
   25cee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25cf2:	4293      	cmp	r3, r2
   25cf4:	d001      	beq.n	25cfa <am_hal_ble_deinitialize+0x12>
   25cf6:	2002      	movs	r0, #2
   25cf8:	4770      	bx	lr
   25cfa:	6802      	ldr	r2, [r0, #0]
   25cfc:	2300      	movs	r3, #0
   25cfe:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   25d02:	e9c0 2300 	strd	r2, r3, [r0]
   25d06:	60c3      	str	r3, [r0, #12]
   25d08:	6103      	str	r3, [r0, #16]
   25d0a:	6143      	str	r3, [r0, #20]
   25d0c:	6183      	str	r3, [r0, #24]
   25d0e:	61c3      	str	r3, [r0, #28]
   25d10:	6203      	str	r3, [r0, #32]
   25d12:	63c3      	str	r3, [r0, #60]	; 0x3c
   25d14:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
   25d18:	f8c0 3043 	str.w	r3, [r0, #67]	; 0x43
   25d1c:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   25d20:	4618      	mov	r0, r3
   25d22:	4770      	bx	lr
   25d24:	01775230 	.word	0x01775230

00025d28 <am_hal_ble_config>:
   25d28:	2800      	cmp	r0, #0
   25d2a:	d04e      	beq.n	25dca <am_hal_ble_config+0xa2>
   25d2c:	6803      	ldr	r3, [r0, #0]
   25d2e:	4a3e      	ldr	r2, [pc, #248]	; (25e28 <am_hal_ble_config+0x100>)
   25d30:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25d34:	4293      	cmp	r3, r2
   25d36:	d148      	bne.n	25dca <am_hal_ble_config+0xa2>
   25d38:	b470      	push	{r4, r5, r6}
   25d3a:	4b3c      	ldr	r3, [pc, #240]	; (25e2c <am_hal_ble_config+0x104>)
   25d3c:	6844      	ldr	r4, [r0, #4]
   25d3e:	2203      	movs	r2, #3
   25d40:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   25d44:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   25d48:	f36f 4251 	bfc	r2, #17, #1
   25d4c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   25d50:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   25d54:	f36f 4210 	bfc	r2, #16, #1
   25d58:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   25d5c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   25d60:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   25d64:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   25d68:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   25d6c:	6888      	ldr	r0, [r1, #8]
   25d6e:	f360 220d 	bfi	r2, r0, #8, #6
   25d72:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   25d76:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   25d7a:	6848      	ldr	r0, [r1, #4]
   25d7c:	f360 0205 	bfi	r2, r0, #0, #6
   25d80:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   25d84:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   25d88:	f042 0201 	orr.w	r2, r2, #1
   25d8c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   25d90:	680b      	ldr	r3, [r1, #0]
   25d92:	68c8      	ldr	r0, [r1, #12]
   25d94:	4a25      	ldr	r2, [pc, #148]	; (25e2c <am_hal_ble_config+0x104>)
   25d96:	021b      	lsls	r3, r3, #8
   25d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   25d9c:	2802      	cmp	r0, #2
   25d9e:	bf08      	it	eq
   25da0:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   25da4:	f043 0301 	orr.w	r3, r3, #1
   25da8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   25dac:	4b20      	ldr	r3, [pc, #128]	; (25e30 <am_hal_ble_config+0x108>)
   25dae:	68db      	ldr	r3, [r3, #12]
   25db0:	b2db      	uxtb	r3, r3
   25db2:	2b12      	cmp	r3, #18
   25db4:	d00b      	beq.n	25dce <am_hal_ble_config+0xa6>
   25db6:	4b1f      	ldr	r3, [pc, #124]	; (25e34 <am_hal_ble_config+0x10c>)
   25db8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   25dbc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   25dc0:	7e8b      	ldrb	r3, [r1, #26]
   25dc2:	7223      	strb	r3, [r4, #8]
   25dc4:	2000      	movs	r0, #0
   25dc6:	bc70      	pop	{r4, r5, r6}
   25dc8:	4770      	bx	lr
   25dca:	2002      	movs	r0, #2
   25dcc:	4770      	bx	lr
   25dce:	4e1a      	ldr	r6, [pc, #104]	; (25e38 <am_hal_ble_config+0x110>)
   25dd0:	68f2      	ldr	r2, [r6, #12]
   25dd2:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   25dd6:	690b      	ldr	r3, [r1, #16]
   25dd8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
   25ddc:	690b      	ldr	r3, [r1, #16]
   25dde:	0a1b      	lsrs	r3, r3, #8
   25de0:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
   25de4:	694b      	ldr	r3, [r1, #20]
   25de6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
   25dea:	694b      	ldr	r3, [r1, #20]
   25dec:	0a1b      	lsrs	r3, r3, #8
   25dee:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
   25df2:	7e4b      	ldrb	r3, [r1, #25]
   25df4:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
   25df8:	7e0b      	ldrb	r3, [r1, #24]
   25dfa:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
   25dfe:	6873      	ldr	r3, [r6, #4]
   25e00:	b183      	cbz	r3, 25e24 <am_hal_ble_config+0xfc>
   25e02:	3b01      	subs	r3, #1
   25e04:	4d0d      	ldr	r5, [pc, #52]	; (25e3c <am_hal_ble_config+0x114>)
   25e06:	eb02 0c03 	add.w	ip, r2, r3
   25e0a:	3a01      	subs	r2, #1
   25e0c:	2300      	movs	r3, #0
   25e0e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   25e12:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   25e16:	4562      	cmp	r2, ip
   25e18:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
   25e1c:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   25e20:	b29b      	uxth	r3, r3
   25e22:	d1f4      	bne.n	25e0e <am_hal_ble_config+0xe6>
   25e24:	60b3      	str	r3, [r6, #8]
   25e26:	e7c6      	b.n	25db6 <am_hal_ble_config+0x8e>
   25e28:	01775230 	.word	0x01775230
   25e2c:	5000c000 	.word	0x5000c000
   25e30:	40020000 	.word	0x40020000
   25e34:	10007acc 	.word	0x10007acc
   25e38:	10002dd0 	.word	0x10002dd0
   25e3c:	00028c94 	.word	0x00028c94

00025e40 <am_hal_ble_power_control>:
   25e40:	b538      	push	{r3, r4, r5, lr}
   25e42:	2800      	cmp	r0, #0
   25e44:	f000 8086 	beq.w	25f54 <am_hal_ble_power_control+0x114>
   25e48:	6803      	ldr	r3, [r0, #0]
   25e4a:	4a50      	ldr	r2, [pc, #320]	; (25f8c <am_hal_ble_power_control+0x14c>)
   25e4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25e50:	4293      	cmp	r3, r2
   25e52:	d17f      	bne.n	25f54 <am_hal_ble_power_control+0x114>
   25e54:	2900      	cmp	r1, #0
   25e56:	d154      	bne.n	25f02 <am_hal_ble_power_control+0xc2>
   25e58:	4b4d      	ldr	r3, [pc, #308]	; (25f90 <am_hal_ble_power_control+0x150>)
   25e5a:	699b      	ldr	r3, [r3, #24]
   25e5c:	05db      	lsls	r3, r3, #23
   25e5e:	d44d      	bmi.n	25efc <am_hal_ble_power_control+0xbc>
   25e60:	4d4c      	ldr	r5, [pc, #304]	; (25f94 <am_hal_ble_power_control+0x154>)
   25e62:	69ab      	ldr	r3, [r5, #24]
   25e64:	f043 0301 	orr.w	r3, r3, #1
   25e68:	61ab      	str	r3, [r5, #24]
   25e6a:	69ab      	ldr	r3, [r5, #24]
   25e6c:	f003 0307 	and.w	r3, r3, #7
   25e70:	2b07      	cmp	r3, #7
   25e72:	d00c      	beq.n	25e8e <am_hal_ble_power_control+0x4e>
   25e74:	4c48      	ldr	r4, [pc, #288]	; (25f98 <am_hal_ble_power_control+0x158>)
   25e76:	e002      	b.n	25e7e <am_hal_ble_power_control+0x3e>
   25e78:	3c01      	subs	r4, #1
   25e7a:	f000 8083 	beq.w	25f84 <am_hal_ble_power_control+0x144>
   25e7e:	2010      	movs	r0, #16
   25e80:	f001 f9bc 	bl	271fc <am_hal_flash_delay>
   25e84:	69ab      	ldr	r3, [r5, #24]
   25e86:	f003 0307 	and.w	r3, r3, #7
   25e8a:	2b07      	cmp	r3, #7
   25e8c:	d1f4      	bne.n	25e78 <am_hal_ble_power_control+0x38>
   25e8e:	200e      	movs	r0, #14
   25e90:	f001 fc30 	bl	276f4 <am_hal_pwrctrl_periph_enable>
   25e94:	2800      	cmp	r0, #0
   25e96:	d173      	bne.n	25f80 <am_hal_ble_power_control+0x140>
   25e98:	4b40      	ldr	r3, [pc, #256]	; (25f9c <am_hal_ble_power_control+0x15c>)
   25e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   25e9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   25ea2:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   25ea6:	4a3b      	ldr	r2, [pc, #236]	; (25f94 <am_hal_ble_power_control+0x154>)
   25ea8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   25eac:	f360 01df 	bfi	r1, r0, #3, #29
   25eb0:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   25eb4:	68d3      	ldr	r3, [r2, #12]
   25eb6:	b2db      	uxtb	r3, r3
   25eb8:	2b11      	cmp	r3, #17
   25eba:	d85a      	bhi.n	25f72 <am_hal_ble_power_control+0x132>
   25ebc:	2304      	movs	r3, #4
   25ebe:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   25ec2:	4d36      	ldr	r5, [pc, #216]	; (25f9c <am_hal_ble_power_control+0x15c>)
   25ec4:	4836      	ldr	r0, [pc, #216]	; (25fa0 <am_hal_ble_power_control+0x160>)
   25ec6:	f001 f999 	bl	271fc <am_hal_flash_delay>
   25eca:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   25ece:	f043 0301 	orr.w	r3, r3, #1
   25ed2:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   25ed6:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   25eda:	f3c3 2302 	ubfx	r3, r3, #8, #3
   25ede:	2b03      	cmp	r3, #3
   25ee0:	d00c      	beq.n	25efc <am_hal_ble_power_control+0xbc>
   25ee2:	4c30      	ldr	r4, [pc, #192]	; (25fa4 <am_hal_ble_power_control+0x164>)
   25ee4:	e001      	b.n	25eea <am_hal_ble_power_control+0xaa>
   25ee6:	3c01      	subs	r4, #1
   25ee8:	d04e      	beq.n	25f88 <am_hal_ble_power_control+0x148>
   25eea:	2010      	movs	r0, #16
   25eec:	f001 f986 	bl	271fc <am_hal_flash_delay>
   25ef0:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   25ef4:	f3c3 2302 	ubfx	r3, r3, #8, #3
   25ef8:	2b03      	cmp	r3, #3
   25efa:	d1f4      	bne.n	25ee6 <am_hal_ble_power_control+0xa6>
   25efc:	2400      	movs	r4, #0
   25efe:	4620      	mov	r0, r4
   25f00:	bd38      	pop	{r3, r4, r5, pc}
   25f02:	2901      	cmp	r1, #1
   25f04:	d129      	bne.n	25f5a <am_hal_ble_power_control+0x11a>
   25f06:	4b25      	ldr	r3, [pc, #148]	; (25f9c <am_hal_ble_power_control+0x15c>)
   25f08:	4a22      	ldr	r2, [pc, #136]	; (25f94 <am_hal_ble_power_control+0x154>)
   25f0a:	2100      	movs	r1, #0
   25f0c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   25f10:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   25f14:	f361 00df 	bfi	r0, r1, #3, #29
   25f18:	f8c3 0410 	str.w	r0, [r3, #1040]	; 0x410
   25f1c:	68d3      	ldr	r3, [r2, #12]
   25f1e:	b2db      	uxtb	r3, r3
   25f20:	2b11      	cmp	r3, #17
   25f22:	d91d      	bls.n	25f60 <am_hal_ble_power_control+0x120>
   25f24:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   25f28:	f361 1345 	bfi	r3, r1, #5, #1
   25f2c:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   25f30:	4b1a      	ldr	r3, [pc, #104]	; (25f9c <am_hal_ble_power_control+0x15c>)
   25f32:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   25f36:	f36f 0200 	bfc	r2, #0, #1
   25f3a:	200e      	movs	r0, #14
   25f3c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   25f40:	f001 fc02 	bl	27748 <am_hal_pwrctrl_periph_disable>
   25f44:	4604      	mov	r4, r0
   25f46:	b990      	cbnz	r0, 25f6e <am_hal_ble_power_control+0x12e>
   25f48:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   25f4c:	f001 f956 	bl	271fc <am_hal_flash_delay>
   25f50:	4620      	mov	r0, r4
   25f52:	bd38      	pop	{r3, r4, r5, pc}
   25f54:	2402      	movs	r4, #2
   25f56:	4620      	mov	r0, r4
   25f58:	bd38      	pop	{r3, r4, r5, pc}
   25f5a:	2407      	movs	r4, #7
   25f5c:	4620      	mov	r0, r4
   25f5e:	bd38      	pop	{r3, r4, r5, pc}
   25f60:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
   25f64:	f023 0304 	bic.w	r3, r3, #4
   25f68:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   25f6c:	e7e0      	b.n	25f30 <am_hal_ble_power_control+0xf0>
   25f6e:	4c0e      	ldr	r4, [pc, #56]	; (25fa8 <am_hal_ble_power_control+0x168>)
   25f70:	e7c5      	b.n	25efe <am_hal_ble_power_control+0xbe>
   25f72:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   25f76:	f043 0320 	orr.w	r3, r3, #32
   25f7a:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   25f7e:	e7a0      	b.n	25ec2 <am_hal_ble_power_control+0x82>
   25f80:	4c0a      	ldr	r4, [pc, #40]	; (25fac <am_hal_ble_power_control+0x16c>)
   25f82:	e7bc      	b.n	25efe <am_hal_ble_power_control+0xbe>
   25f84:	4c0a      	ldr	r4, [pc, #40]	; (25fb0 <am_hal_ble_power_control+0x170>)
   25f86:	e7ba      	b.n	25efe <am_hal_ble_power_control+0xbe>
   25f88:	4c0a      	ldr	r4, [pc, #40]	; (25fb4 <am_hal_ble_power_control+0x174>)
   25f8a:	e7b8      	b.n	25efe <am_hal_ble_power_control+0xbe>
   25f8c:	01775230 	.word	0x01775230
   25f90:	40021000 	.word	0x40021000
   25f94:	40020000 	.word	0x40020000
   25f98:	000186a0 	.word	0x000186a0
   25f9c:	5000c000 	.word	0x5000c000
   25fa0:	00013880 	.word	0x00013880
   25fa4:	000f4240 	.word	0x000f4240
   25fa8:	08000006 	.word	0x08000006
   25fac:	08000007 	.word	0x08000007
   25fb0:	08000005 	.word	0x08000005
   25fb4:	08000008 	.word	0x08000008

00025fb8 <am_hal_ble_patch_apply>:
   25fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25fbc:	b093      	sub	sp, #76	; 0x4c
   25fbe:	2800      	cmp	r0, #0
   25fc0:	d05c      	beq.n	2607c <am_hal_ble_patch_apply+0xc4>
   25fc2:	6803      	ldr	r3, [r0, #0]
   25fc4:	4ab7      	ldr	r2, [pc, #732]	; (262a4 <am_hal_ble_patch_apply+0x2ec>)
   25fc6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25fca:	4293      	cmp	r3, r2
   25fcc:	4605      	mov	r5, r0
   25fce:	d155      	bne.n	2607c <am_hal_ble_patch_apply+0xc4>
   25fd0:	4688      	mov	r8, r1
   25fd2:	6809      	ldr	r1, [r1, #0]
   25fd4:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   25fd8:	f88d 1009 	strb.w	r1, [sp, #9]
   25fdc:	2001      	movs	r0, #1
   25fde:	f240 21f1 	movw	r1, #753	; 0x2f1
   25fe2:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 262b8 <am_hal_ble_patch_apply+0x300>
   25fe6:	f88d 0008 	strb.w	r0, [sp, #8]
   25fea:	f8ad 100a 	strh.w	r1, [sp, #10]
   25fee:	f8ad 200c 	strh.w	r2, [sp, #12]
   25ff2:	f241 3788 	movw	r7, #5000	; 0x1388
   25ff6:	2400      	movs	r4, #0
   25ff8:	4699      	mov	r9, r3
   25ffa:	aa02      	add	r2, sp, #8
   25ffc:	454b      	cmp	r3, r9
   25ffe:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
   26002:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   26006:	a90c      	add	r1, sp, #48	; 0x30
   26008:	4628      	mov	r0, r5
   2600a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   2600e:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
   26012:	d014      	beq.n	2603e <am_hal_ble_patch_apply+0x86>
   26014:	4ba4      	ldr	r3, [pc, #656]	; (262a8 <am_hal_ble_patch_apply+0x2f0>)
   26016:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2601a:	061b      	lsls	r3, r3, #24
   2601c:	d41a      	bmi.n	26054 <am_hal_ble_patch_apply+0x9c>
   2601e:	4ea3      	ldr	r6, [pc, #652]	; (262ac <am_hal_ble_patch_apply+0x2f4>)
   26020:	4ca1      	ldr	r4, [pc, #644]	; (262a8 <am_hal_ble_patch_apply+0x2f0>)
   26022:	2010      	movs	r0, #16
   26024:	f001 f8ea 	bl	271fc <am_hal_flash_delay>
   26028:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   2602c:	061f      	lsls	r7, r3, #24
   2602e:	d411      	bmi.n	26054 <am_hal_ble_patch_apply+0x9c>
   26030:	3e01      	subs	r6, #1
   26032:	d1f6      	bne.n	26022 <am_hal_ble_patch_apply+0x6a>
   26034:	4e9e      	ldr	r6, [pc, #632]	; (262b0 <am_hal_ble_patch_apply+0x2f8>)
   26036:	4630      	mov	r0, r6
   26038:	b013      	add	sp, #76	; 0x4c
   2603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2603e:	f7ff fbaf 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26042:	4606      	mov	r6, r0
   26044:	2800      	cmp	r0, #0
   26046:	d0e5      	beq.n	26014 <am_hal_ble_patch_apply+0x5c>
   26048:	3f01      	subs	r7, #1
   2604a:	d0f4      	beq.n	26036 <am_hal_ble_patch_apply+0x7e>
   2604c:	682b      	ldr	r3, [r5, #0]
   2604e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   26052:	e7d2      	b.n	25ffa <am_hal_ble_patch_apply+0x42>
   26054:	2300      	movs	r3, #0
   26056:	e9cd 3307 	strd	r3, r3, [sp, #28]
   2605a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   2605e:	930b      	str	r3, [sp, #44]	; 0x2c
   26060:	2302      	movs	r3, #2
   26062:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   26066:	2305      	movs	r3, #5
   26068:	f8ad 3020 	strh.w	r3, [sp, #32]
   2606c:	682b      	ldr	r3, [r5, #0]
   2606e:	f023 4b7e 	bic.w	fp, r3, #4261412864	; 0xfe000000
   26072:	4b8c      	ldr	r3, [pc, #560]	; (262a4 <am_hal_ble_patch_apply+0x2ec>)
   26074:	aa02      	add	r2, sp, #8
   26076:	459b      	cmp	fp, r3
   26078:	9206      	str	r2, [sp, #24]
   2607a:	d004      	beq.n	26086 <am_hal_ble_patch_apply+0xce>
   2607c:	2602      	movs	r6, #2
   2607e:	4630      	mov	r0, r6
   26080:	b013      	add	sp, #76	; 0x4c
   26082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26086:	a906      	add	r1, sp, #24
   26088:	4628      	mov	r0, r5
   2608a:	f7ff fb89 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   2608e:	4606      	mov	r6, r0
   26090:	2800      	cmp	r0, #0
   26092:	d1d0      	bne.n	26036 <am_hal_ble_patch_apply+0x7e>
   26094:	f89d 1008 	ldrb.w	r1, [sp, #8]
   26098:	f8d8 3000 	ldr.w	r3, [r8]
   2609c:	2904      	cmp	r1, #4
   2609e:	b2da      	uxtb	r2, r3
   260a0:	f040 80fb 	bne.w	2629a <am_hal_ble_patch_apply+0x2e2>
   260a4:	f89d 1009 	ldrb.w	r1, [sp, #9]
   260a8:	4291      	cmp	r1, r2
   260aa:	f040 80f6 	bne.w	2629a <am_hal_ble_patch_apply+0x2e2>
   260ae:	f89d 100a 	ldrb.w	r1, [sp, #10]
   260b2:	29f1      	cmp	r1, #241	; 0xf1
   260b4:	f040 80f1 	bne.w	2629a <am_hal_ble_patch_apply+0x2e2>
   260b8:	f89d 100b 	ldrb.w	r1, [sp, #11]
   260bc:	2901      	cmp	r1, #1
   260be:	f040 80ec 	bne.w	2629a <am_hal_ble_patch_apply+0x2e2>
   260c2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   260c6:	2900      	cmp	r1, #0
   260c8:	f040 80e7 	bne.w	2629a <am_hal_ble_patch_apply+0x2e2>
   260cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   260d0:	9101      	str	r1, [sp, #4]
   260d2:	2900      	cmp	r1, #0
   260d4:	d07d      	beq.n	261d2 <am_hal_ble_patch_apply+0x21a>
   260d6:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 262bc <am_hal_ble_patch_apply+0x304>
   260da:	4f73      	ldr	r7, [pc, #460]	; (262a8 <am_hal_ble_patch_apply+0x2f0>)
   260dc:	f88a 3001 	strb.w	r3, [sl, #1]
   260e0:	9b01      	ldr	r3, [sp, #4]
   260e2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   260e6:	4873      	ldr	r0, [pc, #460]	; (262b4 <am_hal_ble_patch_apply+0x2fc>)
   260e8:	f8cd a018 	str.w	sl, [sp, #24]
   260ec:	2b80      	cmp	r3, #128	; 0x80
   260ee:	bf28      	it	cs
   260f0:	2380      	movcs	r3, #128	; 0x80
   260f2:	4699      	mov	r9, r3
   260f4:	f88a 3003 	strb.w	r3, [sl, #3]
   260f8:	f026 0303 	bic.w	r3, r6, #3
   260fc:	4419      	add	r1, r3
   260fe:	2300      	movs	r3, #0
   26100:	e9cd 3307 	strd	r3, r3, [sp, #28]
   26104:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   26108:	930b      	str	r3, [sp, #44]	; 0x2c
   2610a:	2301      	movs	r3, #1
   2610c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   26110:	f88a 3000 	strb.w	r3, [sl]
   26114:	f109 0304 	add.w	r3, r9, #4
   26118:	f8ad 3020 	strh.w	r3, [sp, #32]
   2611c:	23f2      	movs	r3, #242	; 0xf2
   2611e:	f88a 3002 	strb.w	r3, [sl, #2]
   26122:	464a      	mov	r2, r9
   26124:	f7e5 ffec 	bl	c100 <memcpy>
   26128:	682b      	ldr	r3, [r5, #0]
   2612a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2612e:	455b      	cmp	r3, fp
   26130:	d1a4      	bne.n	2607c <am_hal_ble_patch_apply+0xc4>
   26132:	a906      	add	r1, sp, #24
   26134:	4628      	mov	r0, r5
   26136:	f7ff fb33 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   2613a:	2800      	cmp	r0, #0
   2613c:	f040 80cc 	bne.w	262d8 <am_hal_ble_patch_apply+0x320>
   26140:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   26144:	061c      	lsls	r4, r3, #24
   26146:	d40b      	bmi.n	26160 <am_hal_ble_patch_apply+0x1a8>
   26148:	4c58      	ldr	r4, [pc, #352]	; (262ac <am_hal_ble_patch_apply+0x2f4>)
   2614a:	e002      	b.n	26152 <am_hal_ble_patch_apply+0x19a>
   2614c:	3c01      	subs	r4, #1
   2614e:	f43f af71 	beq.w	26034 <am_hal_ble_patch_apply+0x7c>
   26152:	2010      	movs	r0, #16
   26154:	f001 f852 	bl	271fc <am_hal_flash_delay>
   26158:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   2615c:	0618      	lsls	r0, r3, #24
   2615e:	d5f5      	bpl.n	2614c <am_hal_ble_patch_apply+0x194>
   26160:	ab02      	add	r3, sp, #8
   26162:	9306      	str	r3, [sp, #24]
   26164:	682b      	ldr	r3, [r5, #0]
   26166:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   2616a:	2300      	movs	r3, #0
   2616c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   26170:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   26174:	930b      	str	r3, [sp, #44]	; 0x2c
   26176:	2302      	movs	r3, #2
   26178:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   2617c:	455a      	cmp	r2, fp
   2617e:	f04f 0305 	mov.w	r3, #5
   26182:	f8ad 3020 	strh.w	r3, [sp, #32]
   26186:	f47f af79 	bne.w	2607c <am_hal_ble_patch_apply+0xc4>
   2618a:	a906      	add	r1, sp, #24
   2618c:	4628      	mov	r0, r5
   2618e:	f7ff fb07 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26192:	2800      	cmp	r0, #0
   26194:	f040 80a0 	bne.w	262d8 <am_hal_ble_patch_apply+0x320>
   26198:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2619c:	f8d8 3000 	ldr.w	r3, [r8]
   261a0:	2904      	cmp	r1, #4
   261a2:	b2da      	uxtb	r2, r3
   261a4:	d179      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   261a6:	f89d 1009 	ldrb.w	r1, [sp, #9]
   261aa:	4291      	cmp	r1, r2
   261ac:	d175      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   261ae:	f89d 100a 	ldrb.w	r1, [sp, #10]
   261b2:	29f2      	cmp	r1, #242	; 0xf2
   261b4:	d171      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   261b6:	f89d 100b 	ldrb.w	r1, [sp, #11]
   261ba:	2901      	cmp	r1, #1
   261bc:	d16d      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   261be:	f89d 100c 	ldrb.w	r1, [sp, #12]
   261c2:	2900      	cmp	r1, #0
   261c4:	d169      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   261c6:	9901      	ldr	r1, [sp, #4]
   261c8:	ebb1 0109 	subs.w	r1, r1, r9
   261cc:	444e      	add	r6, r9
   261ce:	9101      	str	r1, [sp, #4]
   261d0:	d184      	bne.n	260dc <am_hal_ble_patch_apply+0x124>
   261d2:	f88d 2009 	strb.w	r2, [sp, #9]
   261d6:	2200      	movs	r2, #0
   261d8:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   261dc:	920d      	str	r2, [sp, #52]	; 0x34
   261de:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   261e2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   261e6:	f8ad 200c 	strh.w	r2, [sp, #12]
   261ea:	ab02      	add	r3, sp, #8
   261ec:	4a32      	ldr	r2, [pc, #200]	; (262b8 <am_hal_ble_patch_apply+0x300>)
   261ee:	930c      	str	r3, [sp, #48]	; 0x30
   261f0:	920e      	str	r2, [sp, #56]	; 0x38
   261f2:	682b      	ldr	r3, [r5, #0]
   261f4:	492b      	ldr	r1, [pc, #172]	; (262a4 <am_hal_ble_patch_apply+0x2ec>)
   261f6:	2201      	movs	r2, #1
   261f8:	f88d 2008 	strb.w	r2, [sp, #8]
   261fc:	f240 22f3 	movw	r2, #755	; 0x2f3
   26200:	f8ad 200a 	strh.w	r2, [sp, #10]
   26204:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   26208:	428a      	cmp	r2, r1
   2620a:	d059      	beq.n	262c0 <am_hal_ble_patch_apply+0x308>
   2620c:	4a26      	ldr	r2, [pc, #152]	; (262a8 <am_hal_ble_patch_apply+0x2f0>)
   2620e:	f8d2 230c 	ldr.w	r2, [r2, #780]	; 0x30c
   26212:	0611      	lsls	r1, r2, #24
   26214:	d40d      	bmi.n	26232 <am_hal_ble_patch_apply+0x27a>
   26216:	4c25      	ldr	r4, [pc, #148]	; (262ac <am_hal_ble_patch_apply+0x2f4>)
   26218:	4e23      	ldr	r6, [pc, #140]	; (262a8 <am_hal_ble_patch_apply+0x2f0>)
   2621a:	e002      	b.n	26222 <am_hal_ble_patch_apply+0x26a>
   2621c:	3c01      	subs	r4, #1
   2621e:	f43f af09 	beq.w	26034 <am_hal_ble_patch_apply+0x7c>
   26222:	2010      	movs	r0, #16
   26224:	f000 ffea 	bl	271fc <am_hal_flash_delay>
   26228:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   2622c:	061b      	lsls	r3, r3, #24
   2622e:	d5f5      	bpl.n	2621c <am_hal_ble_patch_apply+0x264>
   26230:	682b      	ldr	r3, [r5, #0]
   26232:	491c      	ldr	r1, [pc, #112]	; (262a4 <am_hal_ble_patch_apply+0x2ec>)
   26234:	aa02      	add	r2, sp, #8
   26236:	9206      	str	r2, [sp, #24]
   26238:	2200      	movs	r2, #0
   2623a:	e9cd 2207 	strd	r2, r2, [sp, #28]
   2623e:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
   26242:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   26246:	920b      	str	r2, [sp, #44]	; 0x2c
   26248:	2202      	movs	r2, #2
   2624a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   2624e:	428b      	cmp	r3, r1
   26250:	f04f 0205 	mov.w	r2, #5
   26254:	f8ad 2020 	strh.w	r2, [sp, #32]
   26258:	f47f af10 	bne.w	2607c <am_hal_ble_patch_apply+0xc4>
   2625c:	a906      	add	r1, sp, #24
   2625e:	4628      	mov	r0, r5
   26260:	f7ff fa9e 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26264:	4606      	mov	r6, r0
   26266:	2800      	cmp	r0, #0
   26268:	f47f aee5 	bne.w	26036 <am_hal_ble_patch_apply+0x7e>
   2626c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   26270:	f898 3000 	ldrb.w	r3, [r8]
   26274:	2a04      	cmp	r2, #4
   26276:	d110      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   26278:	f89d 2009 	ldrb.w	r2, [sp, #9]
   2627c:	429a      	cmp	r2, r3
   2627e:	d10c      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   26280:	f89d 300a 	ldrb.w	r3, [sp, #10]
   26284:	2bf3      	cmp	r3, #243	; 0xf3
   26286:	d108      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   26288:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2628c:	2b01      	cmp	r3, #1
   2628e:	d104      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   26290:	f89d 300c 	ldrb.w	r3, [sp, #12]
   26294:	2b00      	cmp	r3, #0
   26296:	f43f aece 	beq.w	26036 <am_hal_ble_patch_apply+0x7e>
   2629a:	2601      	movs	r6, #1
   2629c:	4630      	mov	r0, r6
   2629e:	b013      	add	sp, #76	; 0x4c
   262a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262a4:	01775230 	.word	0x01775230
   262a8:	5000c000 	.word	0x5000c000
   262ac:	000f4240 	.word	0x000f4240
   262b0:	08000004 	.word	0x08000004
   262b4:	10007a4c 	.word	0x10007a4c
   262b8:	00010006 	.word	0x00010006
   262bc:	10007a48 	.word	0x10007a48
   262c0:	a90c      	add	r1, sp, #48	; 0x30
   262c2:	4628      	mov	r0, r5
   262c4:	f7ff fa6c 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   262c8:	2800      	cmp	r0, #0
   262ca:	d1e6      	bne.n	2629a <am_hal_ble_patch_apply+0x2e2>
   262cc:	4b03      	ldr	r3, [pc, #12]	; (262dc <am_hal_ble_patch_apply+0x324>)
   262ce:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   262d2:	061a      	lsls	r2, r3, #24
   262d4:	d59f      	bpl.n	26216 <am_hal_ble_patch_apply+0x25e>
   262d6:	e7ab      	b.n	26230 <am_hal_ble_patch_apply+0x278>
   262d8:	4606      	mov	r6, r0
   262da:	e6ac      	b.n	26036 <am_hal_ble_patch_apply+0x7e>
   262dc:	5000c000 	.word	0x5000c000

000262e0 <am_hal_ble_patch_copy_end_apply>:
   262e0:	2800      	cmp	r0, #0
   262e2:	d076      	beq.n	263d2 <am_hal_ble_patch_copy_end_apply+0xf2>
   262e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   262e8:	6803      	ldr	r3, [r0, #0]
   262ea:	4a3c      	ldr	r2, [pc, #240]	; (263dc <am_hal_ble_patch_copy_end_apply+0xfc>)
   262ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   262f0:	4293      	cmp	r3, r2
   262f2:	b08b      	sub	sp, #44	; 0x2c
   262f4:	4606      	mov	r6, r0
   262f6:	d168      	bne.n	263ca <am_hal_ble_patch_copy_end_apply+0xea>
   262f8:	4a39      	ldr	r2, [pc, #228]	; (263e0 <am_hal_ble_patch_copy_end_apply+0x100>)
   262fa:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 263f0 <am_hal_ble_patch_copy_end_apply+0x110>
   262fe:	9200      	str	r2, [sp, #0]
   26300:	2400      	movs	r4, #0
   26302:	f8ad 4004 	strh.w	r4, [sp, #4]
   26306:	f241 3588 	movw	r5, #5000	; 0x1388
   2630a:	4698      	mov	r8, r3
   2630c:	af04      	add	r7, sp, #16
   2630e:	4543      	cmp	r3, r8
   26310:	e9cd 4905 	strd	r4, r9, [sp, #20]
   26314:	e9cd 4408 	strd	r4, r4, [sp, #32]
   26318:	4639      	mov	r1, r7
   2631a:	4630      	mov	r0, r6
   2631c:	f8cd d010 	str.w	sp, [sp, #16]
   26320:	f88d 401c 	strb.w	r4, [sp, #28]
   26324:	d013      	beq.n	2634e <am_hal_ble_patch_copy_end_apply+0x6e>
   26326:	4b2f      	ldr	r3, [pc, #188]	; (263e4 <am_hal_ble_patch_copy_end_apply+0x104>)
   26328:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2632c:	061a      	lsls	r2, r3, #24
   2632e:	d419      	bmi.n	26364 <am_hal_ble_patch_copy_end_apply+0x84>
   26330:	4d2d      	ldr	r5, [pc, #180]	; (263e8 <am_hal_ble_patch_copy_end_apply+0x108>)
   26332:	4c2c      	ldr	r4, [pc, #176]	; (263e4 <am_hal_ble_patch_copy_end_apply+0x104>)
   26334:	2010      	movs	r0, #16
   26336:	f000 ff61 	bl	271fc <am_hal_flash_delay>
   2633a:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   2633e:	061b      	lsls	r3, r3, #24
   26340:	d40f      	bmi.n	26362 <am_hal_ble_patch_copy_end_apply+0x82>
   26342:	3d01      	subs	r5, #1
   26344:	d1f6      	bne.n	26334 <am_hal_ble_patch_copy_end_apply+0x54>
   26346:	4829      	ldr	r0, [pc, #164]	; (263ec <am_hal_ble_patch_copy_end_apply+0x10c>)
   26348:	b00b      	add	sp, #44	; 0x2c
   2634a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2634e:	f7ff fa27 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26352:	2800      	cmp	r0, #0
   26354:	d0e7      	beq.n	26326 <am_hal_ble_patch_copy_end_apply+0x46>
   26356:	3d01      	subs	r5, #1
   26358:	d0f6      	beq.n	26348 <am_hal_ble_patch_copy_end_apply+0x68>
   2635a:	6833      	ldr	r3, [r6, #0]
   2635c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   26360:	e7d4      	b.n	2630c <am_hal_ble_patch_copy_end_apply+0x2c>
   26362:	af04      	add	r7, sp, #16
   26364:	6832      	ldr	r2, [r6, #0]
   26366:	491d      	ldr	r1, [pc, #116]	; (263dc <am_hal_ble_patch_copy_end_apply+0xfc>)
   26368:	f8cd d010 	str.w	sp, [sp, #16]
   2636c:	2300      	movs	r3, #0
   2636e:	e9cd 3305 	strd	r3, r3, [sp, #20]
   26372:	e9cd 3307 	strd	r3, r3, [sp, #28]
   26376:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2637a:	9309      	str	r3, [sp, #36]	; 0x24
   2637c:	2302      	movs	r3, #2
   2637e:	f88d 301a 	strb.w	r3, [sp, #26]
   26382:	428a      	cmp	r2, r1
   26384:	f04f 0305 	mov.w	r3, #5
   26388:	f8ad 3018 	strh.w	r3, [sp, #24]
   2638c:	d11d      	bne.n	263ca <am_hal_ble_patch_copy_end_apply+0xea>
   2638e:	4639      	mov	r1, r7
   26390:	4630      	mov	r0, r6
   26392:	f7ff fa05 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26396:	2800      	cmp	r0, #0
   26398:	d1d6      	bne.n	26348 <am_hal_ble_patch_copy_end_apply+0x68>
   2639a:	f89d 3000 	ldrb.w	r3, [sp]
   2639e:	2b04      	cmp	r3, #4
   263a0:	d119      	bne.n	263d6 <am_hal_ble_patch_copy_end_apply+0xf6>
   263a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
   263a6:	2bee      	cmp	r3, #238	; 0xee
   263a8:	d115      	bne.n	263d6 <am_hal_ble_patch_copy_end_apply+0xf6>
   263aa:	f89d 3002 	ldrb.w	r3, [sp, #2]
   263ae:	2bf1      	cmp	r3, #241	; 0xf1
   263b0:	d111      	bne.n	263d6 <am_hal_ble_patch_copy_end_apply+0xf6>
   263b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   263b6:	2b01      	cmp	r3, #1
   263b8:	d10d      	bne.n	263d6 <am_hal_ble_patch_copy_end_apply+0xf6>
   263ba:	f89d 0004 	ldrb.w	r0, [sp, #4]
   263be:	3800      	subs	r0, #0
   263c0:	bf18      	it	ne
   263c2:	2001      	movne	r0, #1
   263c4:	b00b      	add	sp, #44	; 0x2c
   263c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   263ca:	2002      	movs	r0, #2
   263cc:	b00b      	add	sp, #44	; 0x2c
   263ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   263d2:	2002      	movs	r0, #2
   263d4:	4770      	bx	lr
   263d6:	2001      	movs	r0, #1
   263d8:	e7b6      	b.n	26348 <am_hal_ble_patch_copy_end_apply+0x68>
   263da:	bf00      	nop
   263dc:	01775230 	.word	0x01775230
   263e0:	02f1ee01 	.word	0x02f1ee01
   263e4:	5000c000 	.word	0x5000c000
   263e8:	000f4240 	.word	0x000f4240
   263ec:	08000004 	.word	0x08000004
   263f0:	00010006 	.word	0x00010006

000263f4 <am_hal_ble_default_patch_apply>:
   263f4:	4a1c      	ldr	r2, [pc, #112]	; (26468 <am_hal_ble_default_patch_apply+0x74>)
   263f6:	68d3      	ldr	r3, [r2, #12]
   263f8:	b2db      	uxtb	r3, r3
   263fa:	2b11      	cmp	r3, #17
   263fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26400:	4605      	mov	r5, r0
   26402:	d02c      	beq.n	2645e <am_hal_ble_default_patch_apply+0x6a>
   26404:	68d3      	ldr	r3, [r2, #12]
   26406:	b2db      	uxtb	r3, r3
   26408:	2b12      	cmp	r3, #18
   2640a:	d028      	beq.n	2645e <am_hal_ble_default_patch_apply+0x6a>
   2640c:	4a17      	ldr	r2, [pc, #92]	; (2646c <am_hal_ble_default_patch_apply+0x78>)
   2640e:	4b18      	ldr	r3, [pc, #96]	; (26470 <am_hal_ble_default_patch_apply+0x7c>)
   26410:	6816      	ldr	r6, [r2, #0]
   26412:	681b      	ldr	r3, [r3, #0]
   26414:	b306      	cbz	r6, 26458 <am_hal_ble_default_patch_apply+0x64>
   26416:	4c17      	ldr	r4, [pc, #92]	; (26474 <am_hal_ble_default_patch_apply+0x80>)
   26418:	f1a3 0804 	sub.w	r8, r3, #4
   2641c:	2700      	movs	r7, #0
   2641e:	f858 1f04 	ldr.w	r1, [r8, #4]!
   26422:	684b      	ldr	r3, [r1, #4]
   26424:	68ca      	ldr	r2, [r1, #12]
   26426:	b17b      	cbz	r3, 26448 <am_hal_ble_default_patch_apply+0x54>
   26428:	3b01      	subs	r3, #1
   2642a:	eb02 0c03 	add.w	ip, r2, r3
   2642e:	1e50      	subs	r0, r2, #1
   26430:	2300      	movs	r3, #0
   26432:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   26436:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   2643a:	4584      	cmp	ip, r0
   2643c:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
   26440:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   26444:	b29b      	uxth	r3, r3
   26446:	d1f4      	bne.n	26432 <am_hal_ble_default_patch_apply+0x3e>
   26448:	608b      	str	r3, [r1, #8]
   2644a:	4628      	mov	r0, r5
   2644c:	f7ff fdb4 	bl	25fb8 <am_hal_ble_patch_apply>
   26450:	b918      	cbnz	r0, 2645a <am_hal_ble_default_patch_apply+0x66>
   26452:	3701      	adds	r7, #1
   26454:	42be      	cmp	r6, r7
   26456:	d1e2      	bne.n	2641e <am_hal_ble_default_patch_apply+0x2a>
   26458:	2000      	movs	r0, #0
   2645a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2645e:	4a06      	ldr	r2, [pc, #24]	; (26478 <am_hal_ble_default_patch_apply+0x84>)
   26460:	4b06      	ldr	r3, [pc, #24]	; (2647c <am_hal_ble_default_patch_apply+0x88>)
   26462:	6816      	ldr	r6, [r2, #0]
   26464:	681b      	ldr	r3, [r3, #0]
   26466:	e7d5      	b.n	26414 <am_hal_ble_default_patch_apply+0x20>
   26468:	40020000 	.word	0x40020000
   2646c:	0002a8fc 	.word	0x0002a8fc
   26470:	10003ec0 	.word	0x10003ec0
   26474:	00028c94 	.word	0x00028c94
   26478:	0002a4e0 	.word	0x0002a4e0
   2647c:	10002f18 	.word	0x10002f18

00026480 <am_hal_ble_default_trim_set_ramcode>:
   26480:	4b0f      	ldr	r3, [pc, #60]	; (264c0 <am_hal_ble_default_trim_set_ramcode+0x40>)
   26482:	68db      	ldr	r3, [r3, #12]
   26484:	b2db      	uxtb	r3, r3
   26486:	2b21      	cmp	r3, #33	; 0x21
   26488:	bf0c      	ite	eq
   2648a:	4b0e      	ldreq	r3, [pc, #56]	; (264c4 <am_hal_ble_default_trim_set_ramcode+0x44>)
   2648c:	4b0e      	ldrne	r3, [pc, #56]	; (264c8 <am_hal_ble_default_trim_set_ramcode+0x48>)
   2648e:	68da      	ldr	r2, [r3, #12]
   26490:	4b0e      	ldr	r3, [pc, #56]	; (264cc <am_hal_ble_default_trim_set_ramcode+0x4c>)
   26492:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   26496:	ba19      	rev	r1, r3
   26498:	3301      	adds	r3, #1
   2649a:	4b0c      	ldr	r3, [pc, #48]	; (264cc <am_hal_ble_default_trim_set_ramcode+0x4c>)
   2649c:	bf18      	it	ne
   2649e:	6091      	strne	r1, [r2, #8]
   264a0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   264a4:	1c59      	adds	r1, r3, #1
   264a6:	d009      	beq.n	264bc <am_hal_ble_default_trim_set_ramcode+0x3c>
   264a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   264ac:	ba19      	rev	r1, r3
   264ae:	3301      	adds	r3, #1
   264b0:	d004      	beq.n	264bc <am_hal_ble_default_trim_set_ramcode+0x3c>
   264b2:	68d3      	ldr	r3, [r2, #12]
   264b4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
   264b8:	430b      	orrs	r3, r1
   264ba:	60d3      	str	r3, [r2, #12]
   264bc:	2000      	movs	r0, #0
   264be:	4770      	bx	lr
   264c0:	40020000 	.word	0x40020000
   264c4:	10003004 	.word	0x10003004
   264c8:	10002df0 	.word	0x10002df0
   264cc:	50023000 	.word	0x50023000

000264d0 <am_hal_ble_blocking_hci_write>:
   264d0:	b530      	push	{r4, r5, lr}
   264d2:	b087      	sub	sp, #28
   264d4:	2400      	movs	r4, #0
   264d6:	e9cd 4404 	strd	r4, r4, [sp, #16]
   264da:	b29b      	uxth	r3, r3
   264dc:	f88d 4005 	strb.w	r4, [sp, #5]
   264e0:	f8ad 4006 	strh.w	r4, [sp, #6]
   264e4:	f88d 400c 	strb.w	r4, [sp, #12]
   264e8:	2401      	movs	r4, #1
   264ea:	9200      	str	r2, [sp, #0]
   264ec:	f88d 1004 	strb.w	r1, [sp, #4]
   264f0:	f8ad 3008 	strh.w	r3, [sp, #8]
   264f4:	f8ad 400a 	strh.w	r4, [sp, #10]
   264f8:	b128      	cbz	r0, 26506 <am_hal_ble_blocking_hci_write+0x36>
   264fa:	6802      	ldr	r2, [r0, #0]
   264fc:	4d08      	ldr	r5, [pc, #32]	; (26520 <am_hal_ble_blocking_hci_write+0x50>)
   264fe:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   26502:	42aa      	cmp	r2, r5
   26504:	d002      	beq.n	2650c <am_hal_ble_blocking_hci_write+0x3c>
   26506:	2000      	movs	r0, #0
   26508:	b007      	add	sp, #28
   2650a:	bd30      	pop	{r4, r5, pc}
   2650c:	b109      	cbz	r1, 26512 <am_hal_ble_blocking_hci_write+0x42>
   2650e:	f88d 4007 	strb.w	r4, [sp, #7]
   26512:	2b00      	cmp	r3, #0
   26514:	d0f7      	beq.n	26506 <am_hal_ble_blocking_hci_write+0x36>
   26516:	4669      	mov	r1, sp
   26518:	f7ff f942 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   2651c:	b007      	add	sp, #28
   2651e:	bd30      	pop	{r4, r5, pc}
   26520:	01775230 	.word	0x01775230

00026524 <am_hal_ble_blocking_hci_read>:
   26524:	b5f0      	push	{r4, r5, r6, r7, lr}
   26526:	b089      	sub	sp, #36	; 0x24
   26528:	ab01      	add	r3, sp, #4
   2652a:	9302      	str	r3, [sp, #8]
   2652c:	4b26      	ldr	r3, [pc, #152]	; (265c8 <am_hal_ble_blocking_hci_read+0xa4>)
   2652e:	681b      	ldr	r3, [r3, #0]
   26530:	f8ad 300c 	strh.w	r3, [sp, #12]
   26534:	0c1b      	lsrs	r3, r3, #16
   26536:	f88d 300e 	strb.w	r3, [sp, #14]
   2653a:	2300      	movs	r3, #0
   2653c:	e9cd 3306 	strd	r3, r3, [sp, #24]
   26540:	f88d 300f 	strb.w	r3, [sp, #15]
   26544:	f88d 3014 	strb.w	r3, [sp, #20]
   26548:	f04f 1302 	mov.w	r3, #131074	; 0x20002
   2654c:	9304      	str	r3, [sp, #16]
   2654e:	b130      	cbz	r0, 2655e <am_hal_ble_blocking_hci_read+0x3a>
   26550:	6805      	ldr	r5, [r0, #0]
   26552:	4b1e      	ldr	r3, [pc, #120]	; (265cc <am_hal_ble_blocking_hci_read+0xa8>)
   26554:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   26558:	429d      	cmp	r5, r3
   2655a:	4604      	mov	r4, r0
   2655c:	d002      	beq.n	26564 <am_hal_ble_blocking_hci_read+0x40>
   2655e:	2000      	movs	r0, #0
   26560:	b009      	add	sp, #36	; 0x24
   26562:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26564:	4b1a      	ldr	r3, [pc, #104]	; (265d0 <am_hal_ble_blocking_hci_read+0xac>)
   26566:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2656a:	460e      	mov	r6, r1
   2656c:	f3c3 11c0 	ubfx	r1, r3, #7, #1
   26570:	061b      	lsls	r3, r3, #24
   26572:	4617      	mov	r7, r2
   26574:	d403      	bmi.n	2657e <am_hal_ble_blocking_hci_read+0x5a>
   26576:	2f00      	cmp	r7, #0
   26578:	d0f1      	beq.n	2655e <am_hal_ble_blocking_hci_read+0x3a>
   2657a:	6039      	str	r1, [r7, #0]
   2657c:	e7ef      	b.n	2655e <am_hal_ble_blocking_hci_read+0x3a>
   2657e:	a902      	add	r1, sp, #8
   26580:	f7ff f90e 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26584:	2800      	cmp	r0, #0
   26586:	d1eb      	bne.n	26560 <am_hal_ble_blocking_hci_read+0x3c>
   26588:	f89d 1005 	ldrb.w	r1, [sp, #5]
   2658c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   26590:	9602      	str	r6, [sp, #8]
   26592:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   26596:	b29b      	uxth	r3, r3
   26598:	f8ad 3010 	strh.w	r3, [sp, #16]
   2659c:	3b01      	subs	r3, #1
   2659e:	2bff      	cmp	r3, #255	; 0xff
   265a0:	d80f      	bhi.n	265c2 <am_hal_ble_blocking_hci_read+0x9e>
   265a2:	6823      	ldr	r3, [r4, #0]
   265a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   265a8:	42ab      	cmp	r3, r5
   265aa:	d108      	bne.n	265be <am_hal_ble_blocking_hci_read+0x9a>
   265ac:	a902      	add	r1, sp, #8
   265ae:	4620      	mov	r0, r4
   265b0:	f7ff f8f6 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   265b4:	2800      	cmp	r0, #0
   265b6:	d1d3      	bne.n	26560 <am_hal_ble_blocking_hci_read+0x3c>
   265b8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   265bc:	e7db      	b.n	26576 <am_hal_ble_blocking_hci_read+0x52>
   265be:	2002      	movs	r0, #2
   265c0:	e7ce      	b.n	26560 <am_hal_ble_blocking_hci_read+0x3c>
   265c2:	2005      	movs	r0, #5
   265c4:	e7cc      	b.n	26560 <am_hal_ble_blocking_hci_read+0x3c>
   265c6:	bf00      	nop
   265c8:	00027d4c 	.word	0x00027d4c
   265cc:	01775230 	.word	0x01775230
   265d0:	5000c000 	.word	0x5000c000

000265d4 <am_hal_ble_int_enable>:
   265d4:	b128      	cbz	r0, 265e2 <am_hal_ble_int_enable+0xe>
   265d6:	6803      	ldr	r3, [r0, #0]
   265d8:	4a0c      	ldr	r2, [pc, #48]	; (2660c <am_hal_ble_int_enable+0x38>)
   265da:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   265de:	4293      	cmp	r3, r2
   265e0:	d001      	beq.n	265e6 <am_hal_ble_int_enable+0x12>
   265e2:	2002      	movs	r0, #2
   265e4:	4770      	bx	lr
   265e6:	b510      	push	{r4, lr}
   265e8:	b082      	sub	sp, #8
   265ea:	460c      	mov	r4, r1
   265ec:	f000 ffde 	bl	275ac <am_hal_interrupt_master_disable>
   265f0:	4b07      	ldr	r3, [pc, #28]	; (26610 <am_hal_ble_int_enable+0x3c>)
   265f2:	9001      	str	r0, [sp, #4]
   265f4:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   265f8:	4321      	orrs	r1, r4
   265fa:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   265fe:	9801      	ldr	r0, [sp, #4]
   26600:	f000 ffd8 	bl	275b4 <am_hal_interrupt_master_set>
   26604:	2000      	movs	r0, #0
   26606:	b002      	add	sp, #8
   26608:	bd10      	pop	{r4, pc}
   2660a:	bf00      	nop
   2660c:	01775230 	.word	0x01775230
   26610:	5000c000 	.word	0x5000c000

00026614 <am_hal_ble_int_status>:
   26614:	4b05      	ldr	r3, [pc, #20]	; (2662c <am_hal_ble_int_status+0x18>)
   26616:	b129      	cbz	r1, 26624 <am_hal_ble_int_status+0x10>
   26618:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2661c:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   26620:	4010      	ands	r0, r2
   26622:	4770      	bx	lr
   26624:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   26628:	4770      	bx	lr
   2662a:	bf00      	nop
   2662c:	5000c000 	.word	0x5000c000

00026630 <am_hal_ble_int_clear>:
   26630:	b150      	cbz	r0, 26648 <am_hal_ble_int_clear+0x18>
   26632:	6803      	ldr	r3, [r0, #0]
   26634:	4a05      	ldr	r2, [pc, #20]	; (2664c <am_hal_ble_int_clear+0x1c>)
   26636:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2663a:	4293      	cmp	r3, r2
   2663c:	d104      	bne.n	26648 <am_hal_ble_int_clear+0x18>
   2663e:	4b04      	ldr	r3, [pc, #16]	; (26650 <am_hal_ble_int_clear+0x20>)
   26640:	2000      	movs	r0, #0
   26642:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   26646:	4770      	bx	lr
   26648:	2002      	movs	r0, #2
   2664a:	4770      	bx	lr
   2664c:	01775230 	.word	0x01775230
   26650:	5000c000 	.word	0x5000c000
   26654:	00000000 	.word	0x00000000

00026658 <am_hal_ble_plf_reg_read>:
   26658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2665c:	b092      	sub	sp, #72	; 0x48
   2665e:	0a0c      	lsrs	r4, r1, #8
   26660:	f88d 1004 	strb.w	r1, [sp, #4]
   26664:	0c0b      	lsrs	r3, r1, #16
   26666:	0e09      	lsrs	r1, r1, #24
   26668:	f88d 3006 	strb.w	r3, [sp, #6]
   2666c:	f88d 1007 	strb.w	r1, [sp, #7]
   26670:	f88d 4005 	strb.w	r4, [sp, #5]
   26674:	9c01      	ldr	r4, [sp, #4]
   26676:	4d2c      	ldr	r5, [pc, #176]	; (26728 <am_hal_ble_plf_reg_read+0xd0>)
   26678:	492c      	ldr	r1, [pc, #176]	; (2672c <am_hal_ble_plf_reg_read+0xd4>)
   2667a:	e9cd 5402 	strd	r5, r4, [sp, #8]
   2667e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 26720 <am_hal_ble_plf_reg_read+0xc8>
   26682:	4617      	mov	r7, r2
   26684:	4a2a      	ldr	r2, [pc, #168]	; (26730 <am_hal_ble_plf_reg_read+0xd8>)
   26686:	f8d1 8220 	ldr.w	r8, [r1, #544]	; 0x220
   2668a:	2300      	movs	r3, #0
   2668c:	ac02      	add	r4, sp, #8
   2668e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   26692:	930c      	str	r3, [sp, #48]	; 0x30
   26694:	4606      	mov	r6, r0
   26696:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   2669a:	e9cd 3205 	strd	r3, r2, [sp, #20]
   2669e:	e9cd 3308 	strd	r3, r3, [sp, #32]
   266a2:	9404      	str	r4, [sp, #16]
   266a4:	f88d 301c 	strb.w	r3, [sp, #28]
   266a8:	b128      	cbz	r0, 266b6 <am_hal_ble_plf_reg_read+0x5e>
   266aa:	6803      	ldr	r3, [r0, #0]
   266ac:	4a21      	ldr	r2, [pc, #132]	; (26734 <am_hal_ble_plf_reg_read+0xdc>)
   266ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   266b2:	4293      	cmp	r3, r2
   266b4:	d029      	beq.n	2670a <am_hal_ble_plf_reg_read+0xb2>
   266b6:	4d1d      	ldr	r5, [pc, #116]	; (2672c <am_hal_ble_plf_reg_read+0xd4>)
   266b8:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   266bc:	f043 0302 	orr.w	r3, r3, #2
   266c0:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   266c4:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   266c8:	061a      	lsls	r2, r3, #24
   266ca:	d40a      	bmi.n	266e2 <am_hal_ble_plf_reg_read+0x8a>
   266cc:	4c1a      	ldr	r4, [pc, #104]	; (26738 <am_hal_ble_plf_reg_read+0xe0>)
   266ce:	e001      	b.n	266d4 <am_hal_ble_plf_reg_read+0x7c>
   266d0:	3c01      	subs	r4, #1
   266d2:	d01e      	beq.n	26712 <am_hal_ble_plf_reg_read+0xba>
   266d4:	2010      	movs	r0, #16
   266d6:	f000 fd91 	bl	271fc <am_hal_flash_delay>
   266da:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   266de:	061b      	lsls	r3, r3, #24
   266e0:	d5f6      	bpl.n	266d0 <am_hal_ble_plf_reg_read+0x78>
   266e2:	a90a      	add	r1, sp, #40	; 0x28
   266e4:	2200      	movs	r2, #0
   266e6:	4630      	mov	r0, r6
   266e8:	f7ff ff1c 	bl	26524 <am_hal_ble_blocking_hci_read>
   266ec:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   266f0:	990c      	ldr	r1, [sp, #48]	; 0x30
   266f2:	4a0e      	ldr	r2, [pc, #56]	; (2672c <am_hal_ble_plf_reg_read+0xd4>)
   266f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   266f8:	2000      	movs	r0, #0
   266fa:	603b      	str	r3, [r7, #0]
   266fc:	f8c2 8228 	str.w	r8, [r2, #552]	; 0x228
   26700:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   26704:	b012      	add	sp, #72	; 0x48
   26706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2670a:	a904      	add	r1, sp, #16
   2670c:	f7ff f848 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26710:	e7d1      	b.n	266b6 <am_hal_ble_plf_reg_read+0x5e>
   26712:	480a      	ldr	r0, [pc, #40]	; (2673c <am_hal_ble_plf_reg_read+0xe4>)
   26714:	b012      	add	sp, #72	; 0x48
   26716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2671a:	bf00      	nop
   2671c:	f3af 8000 	nop.w
	...
   26728:	04fd0201 	.word	0x04fd0201
   2672c:	5000c000 	.word	0x5000c000
   26730:	00010008 	.word	0x00010008
   26734:	01775230 	.word	0x01775230
   26738:	0007a120 	.word	0x0007a120
   2673c:	08000004 	.word	0x08000004

00026740 <am_hal_ble_plf_reg_write>:
   26740:	b5f0      	push	{r4, r5, r6, r7, lr}
   26742:	b08d      	sub	sp, #52	; 0x34
   26744:	0a0c      	lsrs	r4, r1, #8
   26746:	0c0b      	lsrs	r3, r1, #16
   26748:	f88d 1004 	strb.w	r1, [sp, #4]
   2674c:	f88d 4005 	strb.w	r4, [sp, #5]
   26750:	f88d 3006 	strb.w	r3, [sp, #6]
   26754:	f88d 2008 	strb.w	r2, [sp, #8]
   26758:	0a14      	lsrs	r4, r2, #8
   2675a:	0c13      	lsrs	r3, r2, #16
   2675c:	0e09      	lsrs	r1, r1, #24
   2675e:	0e12      	lsrs	r2, r2, #24
   26760:	f88d 4009 	strb.w	r4, [sp, #9]
   26764:	f88d 300a 	strb.w	r3, [sp, #10]
   26768:	f88d 200b 	strb.w	r2, [sp, #11]
   2676c:	f88d 1007 	strb.w	r1, [sp, #7]
   26770:	ab01      	add	r3, sp, #4
   26772:	4606      	mov	r6, r0
   26774:	e893 0003 	ldmia.w	r3, {r0, r1}
   26778:	ab04      	add	r3, sp, #16
   2677a:	e883 0003 	stmia.w	r3, {r0, r1}
   2677e:	4a22      	ldr	r2, [pc, #136]	; (26808 <am_hal_ble_plf_reg_write+0xc8>)
   26780:	4c22      	ldr	r4, [pc, #136]	; (2680c <am_hal_ble_plf_reg_write+0xcc>)
   26782:	9403      	str	r4, [sp, #12]
   26784:	2300      	movs	r3, #0
   26786:	4922      	ldr	r1, [pc, #136]	; (26810 <am_hal_ble_plf_reg_write+0xd0>)
   26788:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   2678c:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   26790:	a803      	add	r0, sp, #12
   26792:	e9cd 0306 	strd	r0, r3, [sp, #24]
   26796:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2679a:	9108      	str	r1, [sp, #32]
   2679c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   267a0:	b12e      	cbz	r6, 267ae <am_hal_ble_plf_reg_write+0x6e>
   267a2:	6833      	ldr	r3, [r6, #0]
   267a4:	4a1b      	ldr	r2, [pc, #108]	; (26814 <am_hal_ble_plf_reg_write+0xd4>)
   267a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   267aa:	4293      	cmp	r3, r2
   267ac:	d024      	beq.n	267f8 <am_hal_ble_plf_reg_write+0xb8>
   267ae:	4d16      	ldr	r5, [pc, #88]	; (26808 <am_hal_ble_plf_reg_write+0xc8>)
   267b0:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   267b4:	f043 0302 	orr.w	r3, r3, #2
   267b8:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   267bc:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   267c0:	061a      	lsls	r2, r3, #24
   267c2:	bf58      	it	pl
   267c4:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   267c8:	d502      	bpl.n	267d0 <am_hal_ble_plf_reg_write+0x90>
   267ca:	e008      	b.n	267de <am_hal_ble_plf_reg_write+0x9e>
   267cc:	3c01      	subs	r4, #1
   267ce:	d018      	beq.n	26802 <am_hal_ble_plf_reg_write+0xc2>
   267d0:	2010      	movs	r0, #16
   267d2:	f000 fd13 	bl	271fc <am_hal_flash_delay>
   267d6:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   267da:	061b      	lsls	r3, r3, #24
   267dc:	d5f6      	bpl.n	267cc <am_hal_ble_plf_reg_write+0x8c>
   267de:	2200      	movs	r2, #0
   267e0:	a906      	add	r1, sp, #24
   267e2:	4630      	mov	r0, r6
   267e4:	f7ff fe9e 	bl	26524 <am_hal_ble_blocking_hci_read>
   267e8:	4b07      	ldr	r3, [pc, #28]	; (26808 <am_hal_ble_plf_reg_write+0xc8>)
   267ea:	2000      	movs	r0, #0
   267ec:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   267f0:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   267f4:	b00d      	add	sp, #52	; 0x34
   267f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   267f8:	a906      	add	r1, sp, #24
   267fa:	4630      	mov	r0, r6
   267fc:	f7fe ffd0 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26800:	e7d5      	b.n	267ae <am_hal_ble_plf_reg_write+0x6e>
   26802:	4805      	ldr	r0, [pc, #20]	; (26818 <am_hal_ble_plf_reg_write+0xd8>)
   26804:	b00d      	add	sp, #52	; 0x34
   26806:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26808:	5000c000 	.word	0x5000c000
   2680c:	08fd0301 	.word	0x08fd0301
   26810:	0001000c 	.word	0x0001000c
   26814:	01775230 	.word	0x01775230
   26818:	08000004 	.word	0x08000004

0002681c <am_hal_ble_transmitter_modex_set>:
   2681c:	b530      	push	{r4, r5, lr}
   2681e:	b085      	sub	sp, #20
   26820:	4604      	mov	r4, r0
   26822:	2300      	movs	r3, #0
   26824:	466a      	mov	r2, sp
   26826:	460d      	mov	r5, r1
   26828:	4927      	ldr	r1, [pc, #156]	; (268c8 <am_hal_ble_transmitter_modex_set+0xac>)
   2682a:	9303      	str	r3, [sp, #12]
   2682c:	f7ff ff14 	bl	26658 <am_hal_ble_plf_reg_read>
   26830:	4925      	ldr	r1, [pc, #148]	; (268c8 <am_hal_ble_transmitter_modex_set+0xac>)
   26832:	f04f 32ff 	mov.w	r2, #4294967295
   26836:	4620      	mov	r0, r4
   26838:	f7ff ff82 	bl	26740 <am_hal_ble_plf_reg_write>
   2683c:	aa03      	add	r2, sp, #12
   2683e:	4923      	ldr	r1, [pc, #140]	; (268cc <am_hal_ble_transmitter_modex_set+0xb0>)
   26840:	4620      	mov	r0, r4
   26842:	f7ff ff09 	bl	26658 <am_hal_ble_plf_reg_read>
   26846:	9b03      	ldr	r3, [sp, #12]
   26848:	aa02      	add	r2, sp, #8
   2684a:	f043 0308 	orr.w	r3, r3, #8
   2684e:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   26852:	4620      	mov	r0, r4
   26854:	9303      	str	r3, [sp, #12]
   26856:	f7ff feff 	bl	26658 <am_hal_ble_plf_reg_read>
   2685a:	9a02      	ldr	r2, [sp, #8]
   2685c:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   26860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   26864:	4620      	mov	r0, r4
   26866:	9202      	str	r2, [sp, #8]
   26868:	f7ff ff6a 	bl	26740 <am_hal_ble_plf_reg_write>
   2686c:	aa01      	add	r2, sp, #4
   2686e:	4918      	ldr	r1, [pc, #96]	; (268d0 <am_hal_ble_transmitter_modex_set+0xb4>)
   26870:	4620      	mov	r0, r4
   26872:	f7ff fef1 	bl	26658 <am_hal_ble_plf_reg_read>
   26876:	9a01      	ldr	r2, [sp, #4]
   26878:	4915      	ldr	r1, [pc, #84]	; (268d0 <am_hal_ble_transmitter_modex_set+0xb4>)
   2687a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2687e:	f042 0208 	orr.w	r2, r2, #8
   26882:	4620      	mov	r0, r4
   26884:	f7ff ff5c 	bl	26740 <am_hal_ble_plf_reg_write>
   26888:	006a      	lsls	r2, r5, #1
   2688a:	4912      	ldr	r1, [pc, #72]	; (268d4 <am_hal_ble_transmitter_modex_set+0xb8>)
   2688c:	f042 0201 	orr.w	r2, r2, #1
   26890:	4620      	mov	r0, r4
   26892:	f7ff ff55 	bl	26740 <am_hal_ble_plf_reg_write>
   26896:	490d      	ldr	r1, [pc, #52]	; (268cc <am_hal_ble_transmitter_modex_set+0xb0>)
   26898:	9a03      	ldr	r2, [sp, #12]
   2689a:	4620      	mov	r0, r4
   2689c:	f7ff ff50 	bl	26740 <am_hal_ble_plf_reg_write>
   268a0:	4b0d      	ldr	r3, [pc, #52]	; (268d8 <am_hal_ble_transmitter_modex_set+0xbc>)
   268a2:	68db      	ldr	r3, [r3, #12]
   268a4:	b2db      	uxtb	r3, r3
   268a6:	2b21      	cmp	r3, #33	; 0x21
   268a8:	bf0c      	ite	eq
   268aa:	490c      	ldreq	r1, [pc, #48]	; (268dc <am_hal_ble_transmitter_modex_set+0xc0>)
   268ac:	490c      	ldrne	r1, [pc, #48]	; (268e0 <am_hal_ble_transmitter_modex_set+0xc4>)
   268ae:	462a      	mov	r2, r5
   268b0:	4620      	mov	r0, r4
   268b2:	f7ff ff45 	bl	26740 <am_hal_ble_plf_reg_write>
   268b6:	9a00      	ldr	r2, [sp, #0]
   268b8:	4903      	ldr	r1, [pc, #12]	; (268c8 <am_hal_ble_transmitter_modex_set+0xac>)
   268ba:	4620      	mov	r0, r4
   268bc:	f7ff ff40 	bl	26740 <am_hal_ble_plf_reg_write>
   268c0:	2000      	movs	r0, #0
   268c2:	b005      	add	sp, #20
   268c4:	bd30      	pop	{r4, r5, pc}
   268c6:	bf00      	nop
   268c8:	43000004 	.word	0x43000004
   268cc:	52000008 	.word	0x52000008
   268d0:	45800070 	.word	0x45800070
   268d4:	52000014 	.word	0x52000014
   268d8:	40020000 	.word	0x40020000
   268dc:	20006874 	.word	0x20006874
   268e0:	20006070 	.word	0x20006070

000268e4 <am_hal_ble_patch_complete.part.0>:
   268e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268e8:	b08c      	sub	sp, #48	; 0x30
   268ea:	2300      	movs	r3, #0
   268ec:	2201      	movs	r2, #1
   268ee:	e9cd 3307 	strd	r3, r3, [sp, #28]
   268f2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   268f6:	930b      	str	r3, [sp, #44]	; 0x2c
   268f8:	f8ad 3004 	strh.w	r3, [sp, #4]
   268fc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   26900:	4b7e      	ldr	r3, [pc, #504]	; (26afc <am_hal_ble_patch_complete.part.0+0x218>)
   26902:	f8cd d018 	str.w	sp, [sp, #24]
   26906:	2206      	movs	r2, #6
   26908:	f8ad 2020 	strh.w	r2, [sp, #32]
   2690c:	9300      	str	r3, [sp, #0]
   2690e:	4604      	mov	r4, r0
   26910:	2800      	cmp	r0, #0
   26912:	f000 80ec 	beq.w	26aee <am_hal_ble_patch_complete.part.0+0x20a>
   26916:	4e7a      	ldr	r6, [pc, #488]	; (26b00 <am_hal_ble_patch_complete.part.0+0x21c>)
   26918:	f241 3588 	movw	r5, #5000	; 0x1388
   2691c:	6823      	ldr	r3, [r4, #0]
   2691e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   26922:	42b3      	cmp	r3, r6
   26924:	a906      	add	r1, sp, #24
   26926:	4620      	mov	r0, r4
   26928:	d107      	bne.n	2693a <am_hal_ble_patch_complete.part.0+0x56>
   2692a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2692e:	b123      	cbz	r3, 2693a <am_hal_ble_patch_complete.part.0+0x56>
   26930:	f7fe ff36 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26934:	b108      	cbz	r0, 2693a <am_hal_ble_patch_complete.part.0+0x56>
   26936:	3d01      	subs	r5, #1
   26938:	d1f0      	bne.n	2691c <am_hal_ble_patch_complete.part.0+0x38>
   2693a:	4b72      	ldr	r3, [pc, #456]	; (26b04 <am_hal_ble_patch_complete.part.0+0x220>)
   2693c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   26940:	061b      	lsls	r3, r3, #24
   26942:	d458      	bmi.n	269f6 <am_hal_ble_patch_complete.part.0+0x112>
   26944:	4d70      	ldr	r5, [pc, #448]	; (26b08 <am_hal_ble_patch_complete.part.0+0x224>)
   26946:	4e6f      	ldr	r6, [pc, #444]	; (26b04 <am_hal_ble_patch_complete.part.0+0x220>)
   26948:	2010      	movs	r0, #16
   2694a:	f000 fc57 	bl	271fc <am_hal_flash_delay>
   2694e:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   26952:	061f      	lsls	r7, r3, #24
   26954:	d406      	bmi.n	26964 <am_hal_ble_patch_complete.part.0+0x80>
   26956:	3d01      	subs	r5, #1
   26958:	d1f6      	bne.n	26948 <am_hal_ble_patch_complete.part.0+0x64>
   2695a:	4d6c      	ldr	r5, [pc, #432]	; (26b0c <am_hal_ble_patch_complete.part.0+0x228>)
   2695c:	4628      	mov	r0, r5
   2695e:	b00c      	add	sp, #48	; 0x30
   26960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26964:	2302      	movs	r3, #2
   26966:	f10d 080c 	add.w	r8, sp, #12
   2696a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   2696e:	f8cd 8018 	str.w	r8, [sp, #24]
   26972:	f8ad 3020 	strh.w	r3, [sp, #32]
   26976:	2c00      	cmp	r4, #0
   26978:	d038      	beq.n	269ec <am_hal_ble_patch_complete.part.0+0x108>
   2697a:	6826      	ldr	r6, [r4, #0]
   2697c:	4b60      	ldr	r3, [pc, #384]	; (26b00 <am_hal_ble_patch_complete.part.0+0x21c>)
   2697e:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   26982:	429e      	cmp	r6, r3
   26984:	d132      	bne.n	269ec <am_hal_ble_patch_complete.part.0+0x108>
   26986:	a906      	add	r1, sp, #24
   26988:	4620      	mov	r0, r4
   2698a:	f7fe ff09 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   2698e:	4605      	mov	r5, r0
   26990:	bb68      	cbnz	r0, 269ee <am_hal_ble_patch_complete.part.0+0x10a>
   26992:	f89d 200d 	ldrb.w	r2, [sp, #13]
   26996:	2aee      	cmp	r2, #238	; 0xee
   26998:	d037      	beq.n	26a0a <am_hal_ble_patch_complete.part.0+0x126>
   2699a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2699e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   269a2:	6822      	ldr	r2, [r4, #0]
   269a4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   269a8:	b29b      	uxth	r3, r3
   269aa:	42b2      	cmp	r2, r6
   269ac:	f8ad 3020 	strh.w	r3, [sp, #32]
   269b0:	d11c      	bne.n	269ec <am_hal_ble_patch_complete.part.0+0x108>
   269b2:	b133      	cbz	r3, 269c2 <am_hal_ble_patch_complete.part.0+0xde>
   269b4:	a906      	add	r1, sp, #24
   269b6:	4620      	mov	r0, r4
   269b8:	f7fe fef2 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   269bc:	2800      	cmp	r0, #0
   269be:	f040 8094 	bne.w	26aea <am_hal_ble_patch_complete.part.0+0x206>
   269c2:	2301      	movs	r3, #1
   269c4:	4628      	mov	r0, r5
   269c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   269ca:	b00c      	add	sp, #48	; 0x30
   269cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   269d0:	6826      	ldr	r6, [r4, #0]
   269d2:	4b4b      	ldr	r3, [pc, #300]	; (26b00 <am_hal_ble_patch_complete.part.0+0x21c>)
   269d4:	f8cd 8018 	str.w	r8, [sp, #24]
   269d8:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   269dc:	2702      	movs	r7, #2
   269de:	2209      	movs	r2, #9
   269e0:	429e      	cmp	r6, r3
   269e2:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   269e6:	f8ad 2020 	strh.w	r2, [sp, #32]
   269ea:	d054      	beq.n	26a96 <am_hal_ble_patch_complete.part.0+0x1b2>
   269ec:	2502      	movs	r5, #2
   269ee:	4628      	mov	r0, r5
   269f0:	b00c      	add	sp, #48	; 0x30
   269f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   269f6:	2302      	movs	r3, #2
   269f8:	f10d 080c 	add.w	r8, sp, #12
   269fc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   26a00:	f8cd 8018 	str.w	r8, [sp, #24]
   26a04:	f8ad 3020 	strh.w	r3, [sp, #32]
   26a08:	e7b7      	b.n	2697a <am_hal_ble_patch_complete.part.0+0x96>
   26a0a:	6827      	ldr	r7, [r4, #0]
   26a0c:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
   26a10:	2303      	movs	r3, #3
   26a12:	42b7      	cmp	r7, r6
   26a14:	f8ad 3020 	strh.w	r3, [sp, #32]
   26a18:	d1e8      	bne.n	269ec <am_hal_ble_patch_complete.part.0+0x108>
   26a1a:	a906      	add	r1, sp, #24
   26a1c:	4620      	mov	r0, r4
   26a1e:	f7fe febf 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26a22:	4605      	mov	r5, r0
   26a24:	2800      	cmp	r0, #0
   26a26:	d1e2      	bne.n	269ee <am_hal_ble_patch_complete.part.0+0x10a>
   26a28:	2301      	movs	r3, #1
   26a2a:	e9cd 0007 	strd	r0, r0, [sp, #28]
   26a2e:	f88d 3004 	strb.w	r3, [sp, #4]
   26a32:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   26a36:	f103 73fe 	add.w	r3, r3, #33292288	; 0x1fc0000
   26a3a:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
   26a3e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   26a42:	9300      	str	r3, [sp, #0]
   26a44:	2305      	movs	r3, #5
   26a46:	f8cd d018 	str.w	sp, [sp, #24]
   26a4a:	900b      	str	r0, [sp, #44]	; 0x2c
   26a4c:	f241 3688 	movw	r6, #5000	; 0x1388
   26a50:	f8ad 3020 	strh.w	r3, [sp, #32]
   26a54:	6823      	ldr	r3, [r4, #0]
   26a56:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   26a5a:	42bb      	cmp	r3, r7
   26a5c:	a906      	add	r1, sp, #24
   26a5e:	4620      	mov	r0, r4
   26a60:	d1c4      	bne.n	269ec <am_hal_ble_patch_complete.part.0+0x108>
   26a62:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26a66:	b133      	cbz	r3, 26a76 <am_hal_ble_patch_complete.part.0+0x192>
   26a68:	f7fe fe9a 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26a6c:	4605      	mov	r5, r0
   26a6e:	b110      	cbz	r0, 26a76 <am_hal_ble_patch_complete.part.0+0x192>
   26a70:	3e01      	subs	r6, #1
   26a72:	d1ef      	bne.n	26a54 <am_hal_ble_patch_complete.part.0+0x170>
   26a74:	e7bb      	b.n	269ee <am_hal_ble_patch_complete.part.0+0x10a>
   26a76:	4e23      	ldr	r6, [pc, #140]	; (26b04 <am_hal_ble_patch_complete.part.0+0x220>)
   26a78:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   26a7c:	0618      	lsls	r0, r3, #24
   26a7e:	d4a7      	bmi.n	269d0 <am_hal_ble_patch_complete.part.0+0xec>
   26a80:	4d21      	ldr	r5, [pc, #132]	; (26b08 <am_hal_ble_patch_complete.part.0+0x224>)
   26a82:	2010      	movs	r0, #16
   26a84:	f000 fbba 	bl	271fc <am_hal_flash_delay>
   26a88:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   26a8c:	0619      	lsls	r1, r3, #24
   26a8e:	d49f      	bmi.n	269d0 <am_hal_ble_patch_complete.part.0+0xec>
   26a90:	3d01      	subs	r5, #1
   26a92:	d1f6      	bne.n	26a82 <am_hal_ble_patch_complete.part.0+0x19e>
   26a94:	e761      	b.n	2695a <am_hal_ble_patch_complete.part.0+0x76>
   26a96:	a906      	add	r1, sp, #24
   26a98:	4620      	mov	r0, r4
   26a9a:	f7fe fe81 	bl	257a0 <am_hal_ble_blocking_transfer.part.0>
   26a9e:	4605      	mov	r5, r0
   26aa0:	2800      	cmp	r0, #0
   26aa2:	d1a4      	bne.n	269ee <am_hal_ble_patch_complete.part.0+0x10a>
   26aa4:	6823      	ldr	r3, [r4, #0]
   26aa6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   26aaa:	42b3      	cmp	r3, r6
   26aac:	d106      	bne.n	26abc <am_hal_ble_patch_complete.part.0+0x1d8>
   26aae:	4b15      	ldr	r3, [pc, #84]	; (26b04 <am_hal_ble_patch_complete.part.0+0x220>)
   26ab0:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   26ab4:	f367 0283 	bfi	r2, r7, #2, #2
   26ab8:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   26abc:	2301      	movs	r3, #1
   26abe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   26ac2:	4813      	ldr	r0, [pc, #76]	; (26b10 <am_hal_ble_patch_complete.part.0+0x22c>)
   26ac4:	f000 fb9a 	bl	271fc <am_hal_flash_delay>
   26ac8:	4b12      	ldr	r3, [pc, #72]	; (26b14 <am_hal_ble_patch_complete.part.0+0x230>)
   26aca:	4a13      	ldr	r2, [pc, #76]	; (26b18 <am_hal_ble_patch_complete.part.0+0x234>)
   26acc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
   26ad0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
   26ad4:	4291      	cmp	r1, r2
   26ad6:	d18a      	bne.n	269ee <am_hal_ble_patch_complete.part.0+0x10a>
   26ad8:	b2d9      	uxtb	r1, r3
   26ada:	f1a1 0320 	sub.w	r3, r1, #32
   26ade:	2b30      	cmp	r3, #48	; 0x30
   26ae0:	d885      	bhi.n	269ee <am_hal_ble_patch_complete.part.0+0x10a>
   26ae2:	4620      	mov	r0, r4
   26ae4:	f7ff fe9a 	bl	2681c <am_hal_ble_transmitter_modex_set>
   26ae8:	e781      	b.n	269ee <am_hal_ble_patch_complete.part.0+0x10a>
   26aea:	4605      	mov	r5, r0
   26aec:	e77f      	b.n	269ee <am_hal_ble_patch_complete.part.0+0x10a>
   26aee:	4b05      	ldr	r3, [pc, #20]	; (26b04 <am_hal_ble_patch_complete.part.0+0x220>)
   26af0:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   26af4:	061a      	lsls	r2, r3, #24
   26af6:	f57f af25 	bpl.w	26944 <am_hal_ble_patch_complete.part.0+0x60>
   26afa:	e777      	b.n	269ec <am_hal_ble_patch_complete.part.0+0x108>
   26afc:	02f1ee01 	.word	0x02f1ee01
   26b00:	01775230 	.word	0x01775230
   26b04:	5000c000 	.word	0x5000c000
   26b08:	000186a0 	.word	0x000186a0
   26b0c:	08000004 	.word	0x08000004
   26b10:	007a1200 	.word	0x007a1200
   26b14:	50023000 	.word	0x50023000
   26b18:	18240600 	.word	0x18240600

00026b1c <am_hal_ble_boot>:
   26b1c:	2800      	cmp	r0, #0
   26b1e:	d06c      	beq.n	26bfa <am_hal_ble_boot+0xde>
   26b20:	b530      	push	{r4, r5, lr}
   26b22:	6803      	ldr	r3, [r0, #0]
   26b24:	4a36      	ldr	r2, [pc, #216]	; (26c00 <am_hal_ble_boot+0xe4>)
   26b26:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   26b2a:	4293      	cmp	r3, r2
   26b2c:	b083      	sub	sp, #12
   26b2e:	4604      	mov	r4, r0
   26b30:	d137      	bne.n	26ba2 <am_hal_ble_boot+0x86>
   26b32:	7a03      	ldrb	r3, [r0, #8]
   26b34:	b1f3      	cbz	r3, 26b74 <am_hal_ble_boot+0x58>
   26b36:	4a33      	ldr	r2, [pc, #204]	; (26c04 <am_hal_ble_boot+0xe8>)
   26b38:	68d3      	ldr	r3, [r2, #12]
   26b3a:	b2db      	uxtb	r3, r3
   26b3c:	2b11      	cmp	r3, #17
   26b3e:	d039      	beq.n	26bb4 <am_hal_ble_boot+0x98>
   26b40:	68d3      	ldr	r3, [r2, #12]
   26b42:	b2db      	uxtb	r3, r3
   26b44:	2b12      	cmp	r3, #18
   26b46:	d035      	beq.n	26bb4 <am_hal_ble_boot+0x98>
   26b48:	4620      	mov	r0, r4
   26b4a:	f7ff fc99 	bl	26480 <am_hal_ble_default_trim_set_ramcode>
   26b4e:	b108      	cbz	r0, 26b54 <am_hal_ble_boot+0x38>
   26b50:	b003      	add	sp, #12
   26b52:	bd30      	pop	{r4, r5, pc}
   26b54:	4620      	mov	r0, r4
   26b56:	f7ff fc4d 	bl	263f4 <am_hal_ble_default_patch_apply>
   26b5a:	2800      	cmp	r0, #0
   26b5c:	d1f8      	bne.n	26b50 <am_hal_ble_boot+0x34>
   26b5e:	6823      	ldr	r3, [r4, #0]
   26b60:	4a27      	ldr	r2, [pc, #156]	; (26c00 <am_hal_ble_boot+0xe4>)
   26b62:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   26b66:	4293      	cmp	r3, r2
   26b68:	d11b      	bne.n	26ba2 <am_hal_ble_boot+0x86>
   26b6a:	4620      	mov	r0, r4
   26b6c:	f7ff feba 	bl	268e4 <am_hal_ble_patch_complete.part.0>
   26b70:	2800      	cmp	r0, #0
   26b72:	d1ed      	bne.n	26b50 <am_hal_ble_boot+0x34>
   26b74:	4b23      	ldr	r3, [pc, #140]	; (26c04 <am_hal_ble_boot+0xe8>)
   26b76:	f04f 32ff 	mov.w	r2, #4294967295
   26b7a:	9201      	str	r2, [sp, #4]
   26b7c:	68db      	ldr	r3, [r3, #12]
   26b7e:	b2db      	uxtb	r3, r3
   26b80:	2b21      	cmp	r3, #33	; 0x21
   26b82:	d011      	beq.n	26ba8 <am_hal_ble_boot+0x8c>
   26b84:	4920      	ldr	r1, [pc, #128]	; (26c08 <am_hal_ble_boot+0xec>)
   26b86:	aa01      	add	r2, sp, #4
   26b88:	4620      	mov	r0, r4
   26b8a:	f7ff fd65 	bl	26658 <am_hal_ble_plf_reg_read>
   26b8e:	9b01      	ldr	r3, [sp, #4]
   26b90:	481e      	ldr	r0, [pc, #120]	; (26c0c <am_hal_ble_boot+0xf0>)
   26b92:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   26b96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   26b9a:	bf98      	it	ls
   26b9c:	2000      	movls	r0, #0
   26b9e:	b003      	add	sp, #12
   26ba0:	bd30      	pop	{r4, r5, pc}
   26ba2:	2002      	movs	r0, #2
   26ba4:	b003      	add	sp, #12
   26ba6:	bd30      	pop	{r4, r5, pc}
   26ba8:	4919      	ldr	r1, [pc, #100]	; (26c10 <am_hal_ble_boot+0xf4>)
   26baa:	aa01      	add	r2, sp, #4
   26bac:	4620      	mov	r0, r4
   26bae:	f7ff fd53 	bl	26658 <am_hal_ble_plf_reg_read>
   26bb2:	e7ec      	b.n	26b8e <am_hal_ble_boot+0x72>
   26bb4:	4b17      	ldr	r3, [pc, #92]	; (26c14 <am_hal_ble_boot+0xf8>)
   26bb6:	681b      	ldr	r3, [r3, #0]
   26bb8:	6819      	ldr	r1, [r3, #0]
   26bba:	684b      	ldr	r3, [r1, #4]
   26bbc:	68ca      	ldr	r2, [r1, #12]
   26bbe:	b183      	cbz	r3, 26be2 <am_hal_ble_boot+0xc6>
   26bc0:	3b01      	subs	r3, #1
   26bc2:	4d15      	ldr	r5, [pc, #84]	; (26c18 <am_hal_ble_boot+0xfc>)
   26bc4:	eb02 0c03 	add.w	ip, r2, r3
   26bc8:	1e50      	subs	r0, r2, #1
   26bca:	2300      	movs	r3, #0
   26bcc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   26bd0:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   26bd4:	4560      	cmp	r0, ip
   26bd6:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   26bda:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   26bde:	b29b      	uxth	r3, r3
   26be0:	d1f4      	bne.n	26bcc <am_hal_ble_boot+0xb0>
   26be2:	608b      	str	r3, [r1, #8]
   26be4:	4620      	mov	r0, r4
   26be6:	f7ff f9e7 	bl	25fb8 <am_hal_ble_patch_apply>
   26bea:	2800      	cmp	r0, #0
   26bec:	d1b0      	bne.n	26b50 <am_hal_ble_boot+0x34>
   26bee:	4620      	mov	r0, r4
   26bf0:	f7ff fb76 	bl	262e0 <am_hal_ble_patch_copy_end_apply>
   26bf4:	2800      	cmp	r0, #0
   26bf6:	d0a7      	beq.n	26b48 <am_hal_ble_boot+0x2c>
   26bf8:	e7aa      	b.n	26b50 <am_hal_ble_boot+0x34>
   26bfa:	2002      	movs	r0, #2
   26bfc:	4770      	bx	lr
   26bfe:	bf00      	nop
   26c00:	01775230 	.word	0x01775230
   26c04:	40020000 	.word	0x40020000
   26c08:	20006054 	.word	0x20006054
   26c0c:	0800000b 	.word	0x0800000b
   26c10:	20006858 	.word	0x20006858
   26c14:	10002f08 	.word	0x10002f08
   26c18:	00028c94 	.word	0x00028c94

00026c1c <am_hal_ble_tx_power_set>:
   26c1c:	b530      	push	{r4, r5, lr}
   26c1e:	b083      	sub	sp, #12
   26c20:	4604      	mov	r4, r0
   26c22:	2300      	movs	r3, #0
   26c24:	460d      	mov	r5, r1
   26c26:	466a      	mov	r2, sp
   26c28:	491a      	ldr	r1, [pc, #104]	; (26c94 <am_hal_ble_tx_power_set+0x78>)
   26c2a:	9301      	str	r3, [sp, #4]
   26c2c:	f7ff fd14 	bl	26658 <am_hal_ble_plf_reg_read>
   26c30:	4918      	ldr	r1, [pc, #96]	; (26c94 <am_hal_ble_tx_power_set+0x78>)
   26c32:	f04f 32ff 	mov.w	r2, #4294967295
   26c36:	4620      	mov	r0, r4
   26c38:	f7ff fd82 	bl	26740 <am_hal_ble_plf_reg_write>
   26c3c:	042a      	lsls	r2, r5, #16
   26c3e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   26c42:	4915      	ldr	r1, [pc, #84]	; (26c98 <am_hal_ble_tx_power_set+0x7c>)
   26c44:	f042 0208 	orr.w	r2, r2, #8
   26c48:	4620      	mov	r0, r4
   26c4a:	f7ff fd79 	bl	26740 <am_hal_ble_plf_reg_write>
   26c4e:	4911      	ldr	r1, [pc, #68]	; (26c94 <am_hal_ble_tx_power_set+0x78>)
   26c50:	9a00      	ldr	r2, [sp, #0]
   26c52:	4620      	mov	r0, r4
   26c54:	f7ff fd74 	bl	26740 <am_hal_ble_plf_reg_write>
   26c58:	4b10      	ldr	r3, [pc, #64]	; (26c9c <am_hal_ble_tx_power_set+0x80>)
   26c5a:	68db      	ldr	r3, [r3, #12]
   26c5c:	b2db      	uxtb	r3, r3
   26c5e:	2b21      	cmp	r3, #33	; 0x21
   26c60:	bf0c      	ite	eq
   26c62:	490f      	ldreq	r1, [pc, #60]	; (26ca0 <am_hal_ble_tx_power_set+0x84>)
   26c64:	490f      	ldrne	r1, [pc, #60]	; (26ca4 <am_hal_ble_tx_power_set+0x88>)
   26c66:	aa01      	add	r2, sp, #4
   26c68:	4620      	mov	r0, r4
   26c6a:	f7ff fcf5 	bl	26658 <am_hal_ble_plf_reg_read>
   26c6e:	9b01      	ldr	r3, [sp, #4]
   26c70:	490a      	ldr	r1, [pc, #40]	; (26c9c <am_hal_ble_tx_power_set+0x80>)
   26c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26c76:	ea43 0205 	orr.w	r2, r3, r5
   26c7a:	9201      	str	r2, [sp, #4]
   26c7c:	68cb      	ldr	r3, [r1, #12]
   26c7e:	b2db      	uxtb	r3, r3
   26c80:	2b21      	cmp	r3, #33	; 0x21
   26c82:	bf0c      	ite	eq
   26c84:	4906      	ldreq	r1, [pc, #24]	; (26ca0 <am_hal_ble_tx_power_set+0x84>)
   26c86:	4907      	ldrne	r1, [pc, #28]	; (26ca4 <am_hal_ble_tx_power_set+0x88>)
   26c88:	4620      	mov	r0, r4
   26c8a:	f7ff fd59 	bl	26740 <am_hal_ble_plf_reg_write>
   26c8e:	2000      	movs	r0, #0
   26c90:	b003      	add	sp, #12
   26c92:	bd30      	pop	{r4, r5, pc}
   26c94:	43000004 	.word	0x43000004
   26c98:	52400018 	.word	0x52400018
   26c9c:	40020000 	.word	0x40020000
   26ca0:	20006838 	.word	0x20006838
   26ca4:	20006038 	.word	0x20006038

00026ca8 <am_hal_cachectrl_config>:
   26ca8:	b530      	push	{r4, r5, lr}
   26caa:	b083      	sub	sp, #12
   26cac:	4604      	mov	r4, r0
   26cae:	f000 fc7d 	bl	275ac <am_hal_interrupt_master_disable>
   26cb2:	4d0e      	ldr	r5, [pc, #56]	; (26cec <am_hal_cachectrl_config+0x44>)
   26cb4:	9001      	str	r0, [sp, #4]
   26cb6:	682b      	ldr	r3, [r5, #0]
   26cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   26cbc:	602b      	str	r3, [r5, #0]
   26cbe:	9801      	ldr	r0, [sp, #4]
   26cc0:	f000 fc78 	bl	275b4 <am_hal_interrupt_master_set>
   26cc4:	7863      	ldrb	r3, [r4, #1]
   26cc6:	7822      	ldrb	r2, [r4, #0]
   26cc8:	78a1      	ldrb	r1, [r4, #2]
   26cca:	021b      	lsls	r3, r3, #8
   26ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
   26cd0:	0112      	lsls	r2, r2, #4
   26cd2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   26cd6:	b2d2      	uxtb	r2, r2
   26cd8:	4313      	orrs	r3, r2
   26cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   26cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   26ce2:	2000      	movs	r0, #0
   26ce4:	602b      	str	r3, [r5, #0]
   26ce6:	b003      	add	sp, #12
   26ce8:	bd30      	pop	{r4, r5, pc}
   26cea:	bf00      	nop
   26cec:	40018000 	.word	0x40018000

00026cf0 <am_hal_cachectrl_enable>:
   26cf0:	4a03      	ldr	r2, [pc, #12]	; (26d00 <am_hal_cachectrl_enable+0x10>)
   26cf2:	6813      	ldr	r3, [r2, #0]
   26cf4:	f043 0301 	orr.w	r3, r3, #1
   26cf8:	2000      	movs	r0, #0
   26cfa:	6013      	str	r3, [r2, #0]
   26cfc:	4770      	bx	lr
   26cfe:	bf00      	nop
   26d00:	40018000 	.word	0x40018000

00026d04 <am_hal_cachectrl_control>:
   26d04:	b510      	push	{r4, lr}
   26d06:	3801      	subs	r0, #1
   26d08:	b08e      	sub	sp, #56	; 0x38
   26d0a:	2810      	cmp	r0, #16
   26d0c:	f200 815e 	bhi.w	26fcc <am_hal_cachectrl_control+0x2c8>
   26d10:	e8df f010 	tbh	[pc, r0, lsl #1]
   26d14:	00360018 	.word	0x00360018
   26d18:	0040003d 	.word	0x0040003d
   26d1c:	00450043 	.word	0x00450043
   26d20:	0011001a 	.word	0x0011001a
   26d24:	00540047 	.word	0x00540047
   26d28:	009a0061 	.word	0x009a0061
   26d2c:	010c00d3 	.word	0x010c00d3
   26d30:	013f0126 	.word	0x013f0126
   26d34:	001d      	.short	0x001d
   26d36:	f44f 7300 	mov.w	r3, #512	; 0x200
   26d3a:	4aac      	ldr	r2, [pc, #688]	; (26fec <am_hal_cachectrl_control+0x2e8>)
   26d3c:	2000      	movs	r0, #0
   26d3e:	6093      	str	r3, [r2, #8]
   26d40:	b00e      	add	sp, #56	; 0x38
   26d42:	bd10      	pop	{r4, pc}
   26d44:	2301      	movs	r3, #1
   26d46:	e7f8      	b.n	26d3a <am_hal_cachectrl_control+0x36>
   26d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26d4c:	e7f5      	b.n	26d3a <am_hal_cachectrl_control+0x36>
   26d4e:	2900      	cmp	r1, #0
   26d50:	f000 813c 	beq.w	26fcc <am_hal_cachectrl_control+0x2c8>
   26d54:	684a      	ldr	r2, [r1, #4]
   26d56:	48a6      	ldr	r0, [pc, #664]	; (26ff0 <am_hal_cachectrl_control+0x2ec>)
   26d58:	4202      	tst	r2, r0
   26d5a:	f040 8137 	bne.w	26fcc <am_hal_cachectrl_control+0x2c8>
   26d5e:	688b      	ldr	r3, [r1, #8]
   26d60:	4018      	ands	r0, r3
   26d62:	f040 8133 	bne.w	26fcc <am_hal_cachectrl_control+0x2c8>
   26d66:	780c      	ldrb	r4, [r1, #0]
   26d68:	2c00      	cmp	r4, #0
   26d6a:	f040 8133 	bne.w	26fd4 <am_hal_cachectrl_control+0x2d0>
   26d6e:	4c9f      	ldr	r4, [pc, #636]	; (26fec <am_hal_cachectrl_control+0x2e8>)
   26d70:	7849      	ldrb	r1, [r1, #1]
   26d72:	6122      	str	r2, [r4, #16]
   26d74:	6163      	str	r3, [r4, #20]
   26d76:	6823      	ldr	r3, [r4, #0]
   26d78:	f361 0382 	bfi	r3, r1, #2, #1
   26d7c:	6023      	str	r3, [r4, #0]
   26d7e:	e7df      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26d80:	4b9a      	ldr	r3, [pc, #616]	; (26fec <am_hal_cachectrl_control+0x2e8>)
   26d82:	681b      	ldr	r3, [r3, #0]
   26d84:	01db      	lsls	r3, r3, #7
   26d86:	f140 811f 	bpl.w	26fc8 <am_hal_cachectrl_control+0x2c4>
   26d8a:	2302      	movs	r3, #2
   26d8c:	e7d5      	b.n	26d3a <am_hal_cachectrl_control+0x36>
   26d8e:	f44f 6388 	mov.w	r3, #1088	; 0x440
   26d92:	e7d2      	b.n	26d3a <am_hal_cachectrl_control+0x36>
   26d94:	f44f 7308 	mov.w	r3, #544	; 0x220
   26d98:	e7cf      	b.n	26d3a <am_hal_cachectrl_control+0x36>
   26d9a:	2340      	movs	r3, #64	; 0x40
   26d9c:	e7cd      	b.n	26d3a <am_hal_cachectrl_control+0x36>
   26d9e:	2320      	movs	r3, #32
   26da0:	e7cb      	b.n	26d3a <am_hal_cachectrl_control+0x36>
   26da2:	f000 fc03 	bl	275ac <am_hal_interrupt_master_disable>
   26da6:	4a91      	ldr	r2, [pc, #580]	; (26fec <am_hal_cachectrl_control+0x2e8>)
   26da8:	9000      	str	r0, [sp, #0]
   26daa:	6813      	ldr	r3, [r2, #0]
   26dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   26db0:	6013      	str	r3, [r2, #0]
   26db2:	9800      	ldr	r0, [sp, #0]
   26db4:	f000 fbfe 	bl	275b4 <am_hal_interrupt_master_set>
   26db8:	2000      	movs	r0, #0
   26dba:	e7c1      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26dbc:	f000 fbf6 	bl	275ac <am_hal_interrupt_master_disable>
   26dc0:	4a8a      	ldr	r2, [pc, #552]	; (26fec <am_hal_cachectrl_control+0x2e8>)
   26dc2:	9001      	str	r0, [sp, #4]
   26dc4:	6813      	ldr	r3, [r2, #0]
   26dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   26dca:	6013      	str	r3, [r2, #0]
   26dcc:	9801      	ldr	r0, [sp, #4]
   26dce:	f000 fbf1 	bl	275b4 <am_hal_interrupt_master_set>
   26dd2:	2000      	movs	r0, #0
   26dd4:	e7b4      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26dd6:	f000 fbe9 	bl	275ac <am_hal_interrupt_master_disable>
   26dda:	4603      	mov	r3, r0
   26ddc:	4885      	ldr	r0, [pc, #532]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26dde:	9302      	str	r3, [sp, #8]
   26de0:	f000 fa52 	bl	27288 <am_hal_flash_load_ui32>
   26de4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   26de8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   26dec:	4881      	ldr	r0, [pc, #516]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26dee:	f000 fa4f 	bl	27290 <am_hal_flash_store_ui32>
   26df2:	9802      	ldr	r0, [sp, #8]
   26df4:	f000 fbde 	bl	275b4 <am_hal_interrupt_master_set>
   26df8:	f000 fbd8 	bl	275ac <am_hal_interrupt_master_disable>
   26dfc:	4603      	mov	r3, r0
   26dfe:	487d      	ldr	r0, [pc, #500]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26e00:	9303      	str	r3, [sp, #12]
   26e02:	f000 fa41 	bl	27288 <am_hal_flash_load_ui32>
   26e06:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   26e0a:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
   26e0e:	4879      	ldr	r0, [pc, #484]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26e10:	f000 fa3e 	bl	27290 <am_hal_flash_store_ui32>
   26e14:	9803      	ldr	r0, [sp, #12]
   26e16:	f000 fbcd 	bl	275b4 <am_hal_interrupt_master_set>
   26e1a:	f000 fbc7 	bl	275ac <am_hal_interrupt_master_disable>
   26e1e:	4603      	mov	r3, r0
   26e20:	4874      	ldr	r0, [pc, #464]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26e22:	9304      	str	r3, [sp, #16]
   26e24:	f000 fa30 	bl	27288 <am_hal_flash_load_ui32>
   26e28:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   26e2c:	f020 000f 	bic.w	r0, r0, #15
   26e30:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   26e34:	f041 0103 	orr.w	r1, r1, #3
   26e38:	486e      	ldr	r0, [pc, #440]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26e3a:	f000 fa29 	bl	27290 <am_hal_flash_store_ui32>
   26e3e:	9804      	ldr	r0, [sp, #16]
   26e40:	f000 fbb8 	bl	275b4 <am_hal_interrupt_master_set>
   26e44:	2000      	movs	r0, #0
   26e46:	e77b      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26e48:	f000 fbb0 	bl	275ac <am_hal_interrupt_master_disable>
   26e4c:	4603      	mov	r3, r0
   26e4e:	4869      	ldr	r0, [pc, #420]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26e50:	9305      	str	r3, [sp, #20]
   26e52:	f000 fa19 	bl	27288 <am_hal_flash_load_ui32>
   26e56:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   26e5a:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   26e5e:	4865      	ldr	r0, [pc, #404]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26e60:	f000 fa16 	bl	27290 <am_hal_flash_store_ui32>
   26e64:	9805      	ldr	r0, [sp, #20]
   26e66:	f000 fba5 	bl	275b4 <am_hal_interrupt_master_set>
   26e6a:	f000 fb9f 	bl	275ac <am_hal_interrupt_master_disable>
   26e6e:	4603      	mov	r3, r0
   26e70:	4860      	ldr	r0, [pc, #384]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26e72:	9306      	str	r3, [sp, #24]
   26e74:	f000 fa08 	bl	27288 <am_hal_flash_load_ui32>
   26e78:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   26e7c:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
   26e80:	485c      	ldr	r0, [pc, #368]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26e82:	f000 fa05 	bl	27290 <am_hal_flash_store_ui32>
   26e86:	9806      	ldr	r0, [sp, #24]
   26e88:	f000 fb94 	bl	275b4 <am_hal_interrupt_master_set>
   26e8c:	f000 fb8e 	bl	275ac <am_hal_interrupt_master_disable>
   26e90:	4603      	mov	r3, r0
   26e92:	4858      	ldr	r0, [pc, #352]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26e94:	9307      	str	r3, [sp, #28]
   26e96:	f000 f9f7 	bl	27288 <am_hal_flash_load_ui32>
   26e9a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   26e9e:	f020 000f 	bic.w	r0, r0, #15
   26ea2:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   26ea6:	f041 0101 	orr.w	r1, r1, #1
   26eaa:	4852      	ldr	r0, [pc, #328]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26eac:	f000 f9f0 	bl	27290 <am_hal_flash_store_ui32>
   26eb0:	9807      	ldr	r0, [sp, #28]
   26eb2:	f000 fb7f 	bl	275b4 <am_hal_interrupt_master_set>
   26eb6:	2000      	movs	r0, #0
   26eb8:	e742      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26eba:	f000 fb77 	bl	275ac <am_hal_interrupt_master_disable>
   26ebe:	4603      	mov	r3, r0
   26ec0:	484c      	ldr	r0, [pc, #304]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26ec2:	9308      	str	r3, [sp, #32]
   26ec4:	f000 f9e0 	bl	27288 <am_hal_flash_load_ui32>
   26ec8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   26ecc:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   26ed0:	4848      	ldr	r0, [pc, #288]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26ed2:	f000 f9dd 	bl	27290 <am_hal_flash_store_ui32>
   26ed6:	9808      	ldr	r0, [sp, #32]
   26ed8:	f000 fb6c 	bl	275b4 <am_hal_interrupt_master_set>
   26edc:	f000 fb66 	bl	275ac <am_hal_interrupt_master_disable>
   26ee0:	4603      	mov	r3, r0
   26ee2:	4844      	ldr	r0, [pc, #272]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26ee4:	9309      	str	r3, [sp, #36]	; 0x24
   26ee6:	f000 f9cf 	bl	27288 <am_hal_flash_load_ui32>
   26eea:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   26eee:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
   26ef2:	4840      	ldr	r0, [pc, #256]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26ef4:	f000 f9cc 	bl	27290 <am_hal_flash_store_ui32>
   26ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
   26efa:	f000 fb5b 	bl	275b4 <am_hal_interrupt_master_set>
   26efe:	f000 fb55 	bl	275ac <am_hal_interrupt_master_disable>
   26f02:	4603      	mov	r3, r0
   26f04:	483b      	ldr	r0, [pc, #236]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26f06:	930a      	str	r3, [sp, #40]	; 0x28
   26f08:	f000 f9be 	bl	27288 <am_hal_flash_load_ui32>
   26f0c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   26f10:	f020 000f 	bic.w	r0, r0, #15
   26f14:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   26f18:	f041 0101 	orr.w	r1, r1, #1
   26f1c:	4835      	ldr	r0, [pc, #212]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26f1e:	f000 f9b7 	bl	27290 <am_hal_flash_store_ui32>
   26f22:	980a      	ldr	r0, [sp, #40]	; 0x28
   26f24:	f000 fb46 	bl	275b4 <am_hal_interrupt_master_set>
   26f28:	2000      	movs	r0, #0
   26f2a:	e709      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26f2c:	2900      	cmp	r1, #0
   26f2e:	d04d      	beq.n	26fcc <am_hal_cachectrl_control+0x2c8>
   26f30:	680c      	ldr	r4, [r1, #0]
   26f32:	2c03      	cmp	r4, #3
   26f34:	d84c      	bhi.n	26fd0 <am_hal_cachectrl_control+0x2cc>
   26f36:	f000 fb39 	bl	275ac <am_hal_interrupt_master_disable>
   26f3a:	4603      	mov	r3, r0
   26f3c:	482d      	ldr	r0, [pc, #180]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26f3e:	930b      	str	r3, [sp, #44]	; 0x2c
   26f40:	f000 f9a2 	bl	27288 <am_hal_flash_load_ui32>
   26f44:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   26f48:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   26f4c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   26f50:	4828      	ldr	r0, [pc, #160]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26f52:	f000 f99d 	bl	27290 <am_hal_flash_store_ui32>
   26f56:	980b      	ldr	r0, [sp, #44]	; 0x2c
   26f58:	f000 fb2c 	bl	275b4 <am_hal_interrupt_master_set>
   26f5c:	2000      	movs	r0, #0
   26f5e:	e6ef      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26f60:	b3a1      	cbz	r1, 26fcc <am_hal_cachectrl_control+0x2c8>
   26f62:	680c      	ldr	r4, [r1, #0]
   26f64:	2c07      	cmp	r4, #7
   26f66:	d833      	bhi.n	26fd0 <am_hal_cachectrl_control+0x2cc>
   26f68:	f000 fb20 	bl	275ac <am_hal_interrupt_master_disable>
   26f6c:	4603      	mov	r3, r0
   26f6e:	4821      	ldr	r0, [pc, #132]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26f70:	930c      	str	r3, [sp, #48]	; 0x30
   26f72:	f000 f989 	bl	27288 <am_hal_flash_load_ui32>
   26f76:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   26f7a:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   26f7e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   26f82:	481c      	ldr	r0, [pc, #112]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26f84:	f000 f984 	bl	27290 <am_hal_flash_store_ui32>
   26f88:	980c      	ldr	r0, [sp, #48]	; 0x30
   26f8a:	f000 fb13 	bl	275b4 <am_hal_interrupt_master_set>
   26f8e:	2000      	movs	r0, #0
   26f90:	e6d6      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26f92:	b1d9      	cbz	r1, 26fcc <am_hal_cachectrl_control+0x2c8>
   26f94:	680c      	ldr	r4, [r1, #0]
   26f96:	2c0f      	cmp	r4, #15
   26f98:	d81a      	bhi.n	26fd0 <am_hal_cachectrl_control+0x2cc>
   26f9a:	f000 fb07 	bl	275ac <am_hal_interrupt_master_disable>
   26f9e:	4603      	mov	r3, r0
   26fa0:	4814      	ldr	r0, [pc, #80]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26fa2:	930d      	str	r3, [sp, #52]	; 0x34
   26fa4:	f000 f970 	bl	27288 <am_hal_flash_load_ui32>
   26fa8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   26fac:	f020 000f 	bic.w	r0, r0, #15
   26fb0:	ea40 0104 	orr.w	r1, r0, r4
   26fb4:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   26fb8:	480e      	ldr	r0, [pc, #56]	; (26ff4 <am_hal_cachectrl_control+0x2f0>)
   26fba:	f000 f969 	bl	27290 <am_hal_flash_store_ui32>
   26fbe:	980d      	ldr	r0, [sp, #52]	; 0x34
   26fc0:	f000 faf8 	bl	275b4 <am_hal_interrupt_master_set>
   26fc4:	2000      	movs	r0, #0
   26fc6:	e6bb      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26fc8:	2007      	movs	r0, #7
   26fca:	e6b9      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26fcc:	2006      	movs	r0, #6
   26fce:	e6b7      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26fd0:	2001      	movs	r0, #1
   26fd2:	e6b5      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26fd4:	2c01      	cmp	r4, #1
   26fd6:	d1f9      	bne.n	26fcc <am_hal_cachectrl_control+0x2c8>
   26fd8:	4c04      	ldr	r4, [pc, #16]	; (26fec <am_hal_cachectrl_control+0x2e8>)
   26fda:	7849      	ldrb	r1, [r1, #1]
   26fdc:	61a2      	str	r2, [r4, #24]
   26fde:	61e3      	str	r3, [r4, #28]
   26fe0:	6823      	ldr	r3, [r4, #0]
   26fe2:	f361 03c3 	bfi	r3, r1, #3, #1
   26fe6:	6023      	str	r3, [r4, #0]
   26fe8:	e6aa      	b.n	26d40 <am_hal_cachectrl_control+0x3c>
   26fea:	bf00      	nop
   26fec:	40018000 	.word	0x40018000
   26ff0:	f800000f 	.word	0xf800000f
   26ff4:	40018004 	.word	0x40018004

00026ff8 <am_hal_clkgen_control>:
   26ff8:	4b49      	ldr	r3, [pc, #292]	; (27120 <am_hal_clkgen_control+0x128>)
   26ffa:	681a      	ldr	r2, [r3, #0]
   26ffc:	b912      	cbnz	r2, 27004 <am_hal_clkgen_control+0xc>
   26ffe:	4a49      	ldr	r2, [pc, #292]	; (27124 <am_hal_clkgen_control+0x12c>)
   27000:	6812      	ldr	r2, [r2, #0]
   27002:	601a      	str	r2, [r3, #0]
   27004:	2809      	cmp	r0, #9
   27006:	f200 8089 	bhi.w	2711c <am_hal_clkgen_control+0x124>
   2700a:	e8df f000 	tbb	[pc, r0]
   2700e:	160d      	.short	0x160d
   27010:	423a261e 	.word	0x423a261e
   27014:	055c544c 	.word	0x055c544c
   27018:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2701c:	2000      	movs	r0, #0
   2701e:	6a1a      	ldr	r2, [r3, #32]
   27020:	f36f 0200 	bfc	r2, #0, #1
   27024:	621a      	str	r2, [r3, #32]
   27026:	4770      	bx	lr
   27028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2702c:	2200      	movs	r2, #0
   2702e:	2147      	movs	r1, #71	; 0x47
   27030:	6159      	str	r1, [r3, #20]
   27032:	4610      	mov	r0, r2
   27034:	619a      	str	r2, [r3, #24]
   27036:	615a      	str	r2, [r3, #20]
   27038:	4770      	bx	lr
   2703a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2703e:	2000      	movs	r0, #0
   27040:	899a      	ldrh	r2, [r3, #12]
   27042:	f36f 0200 	bfc	r2, #0, #1
   27046:	819a      	strh	r2, [r3, #12]
   27048:	4770      	bx	lr
   2704a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2704e:	2000      	movs	r0, #0
   27050:	899a      	ldrh	r2, [r3, #12]
   27052:	f36f 0241 	bfc	r2, #1, #1
   27056:	819a      	strh	r2, [r3, #12]
   27058:	4770      	bx	lr
   2705a:	4a33      	ldr	r2, [pc, #204]	; (27128 <am_hal_clkgen_control+0x130>)
   2705c:	68d3      	ldr	r3, [r2, #12]
   2705e:	b2db      	uxtb	r3, r3
   27060:	2b21      	cmp	r3, #33	; 0x21
   27062:	d106      	bne.n	27072 <am_hal_clkgen_control+0x7a>
   27064:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   27068:	2101      	movs	r1, #1
   2706a:	f361 2309 	bfi	r3, r1, #8, #2
   2706e:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   27072:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   27076:	2000      	movs	r0, #0
   27078:	8993      	ldrh	r3, [r2, #12]
   2707a:	f043 0301 	orr.w	r3, r3, #1
   2707e:	8193      	strh	r3, [r2, #12]
   27080:	4770      	bx	lr
   27082:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   27086:	2000      	movs	r0, #0
   27088:	8993      	ldrh	r3, [r2, #12]
   2708a:	f043 0302 	orr.w	r3, r3, #2
   2708e:	8193      	strh	r3, [r2, #12]
   27090:	4770      	bx	lr
   27092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   27096:	2200      	movs	r2, #0
   27098:	2047      	movs	r0, #71	; 0x47
   2709a:	2101      	movs	r1, #1
   2709c:	6158      	str	r0, [r3, #20]
   2709e:	6199      	str	r1, [r3, #24]
   270a0:	4610      	mov	r0, r2
   270a2:	615a      	str	r2, [r3, #20]
   270a4:	4770      	bx	lr
   270a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   270aa:	2000      	movs	r0, #0
   270ac:	899a      	ldrh	r2, [r3, #12]
   270ae:	f36f 12c7 	bfc	r2, #7, #1
   270b2:	819a      	strh	r2, [r3, #12]
   270b4:	4770      	bx	lr
   270b6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   270ba:	2000      	movs	r0, #0
   270bc:	8993      	ldrh	r3, [r2, #12]
   270be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   270c2:	8193      	strh	r3, [r2, #12]
   270c4:	4770      	bx	lr
   270c6:	4a18      	ldr	r2, [pc, #96]	; (27128 <am_hal_clkgen_control+0x130>)
   270c8:	68d3      	ldr	r3, [r2, #12]
   270ca:	b2db      	uxtb	r3, r3
   270cc:	2b21      	cmp	r3, #33	; 0x21
   270ce:	d00a      	beq.n	270e6 <am_hal_clkgen_control+0xee>
   270d0:	b139      	cbz	r1, 270e2 <am_hal_clkgen_control+0xea>
   270d2:	680b      	ldr	r3, [r1, #0]
   270d4:	f043 0301 	orr.w	r3, r3, #1
   270d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   270dc:	2000      	movs	r0, #0
   270de:	6213      	str	r3, [r2, #32]
   270e0:	4770      	bx	lr
   270e2:	4b12      	ldr	r3, [pc, #72]	; (2712c <am_hal_clkgen_control+0x134>)
   270e4:	e7f8      	b.n	270d8 <am_hal_clkgen_control+0xe0>
   270e6:	b500      	push	{lr}
   270e8:	b083      	sub	sp, #12
   270ea:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   270ee:	9101      	str	r1, [sp, #4]
   270f0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   270f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   270f8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   270fc:	f000 f87e 	bl	271fc <am_hal_flash_delay>
   27100:	9901      	ldr	r1, [sp, #4]
   27102:	b149      	cbz	r1, 27118 <am_hal_clkgen_control+0x120>
   27104:	680b      	ldr	r3, [r1, #0]
   27106:	f043 0301 	orr.w	r3, r3, #1
   2710a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2710e:	2000      	movs	r0, #0
   27110:	6213      	str	r3, [r2, #32]
   27112:	b003      	add	sp, #12
   27114:	f85d fb04 	ldr.w	pc, [sp], #4
   27118:	4b04      	ldr	r3, [pc, #16]	; (2712c <am_hal_clkgen_control+0x134>)
   2711a:	e7f6      	b.n	2710a <am_hal_clkgen_control+0x112>
   2711c:	2006      	movs	r0, #6
   2711e:	4770      	bx	lr
   27120:	10007b94 	.word	0x10007b94
   27124:	4ffff000 	.word	0x4ffff000
   27128:	40020000 	.word	0x40020000
   2712c:	0025b801 	.word	0x0025b801

00027130 <am_hal_clkgen_status_get>:
   27130:	b1b0      	cbz	r0, 27160 <am_hal_clkgen_status_get+0x30>
   27132:	b410      	push	{r4}
   27134:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
   27138:	4603      	mov	r3, r0
   2713a:	698c      	ldr	r4, [r1, #24]
   2713c:	4809      	ldr	r0, [pc, #36]	; (27164 <am_hal_clkgen_status_get+0x34>)
   2713e:	4a0a      	ldr	r2, [pc, #40]	; (27168 <am_hal_clkgen_status_get+0x38>)
   27140:	f014 0f01 	tst.w	r4, #1
   27144:	bf08      	it	eq
   27146:	4602      	moveq	r2, r0
   27148:	601a      	str	r2, [r3, #0]
   2714a:	69ca      	ldr	r2, [r1, #28]
   2714c:	f85d 4b04 	ldr.w	r4, [sp], #4
   27150:	f002 0101 	and.w	r1, r2, #1
   27154:	f3c2 0240 	ubfx	r2, r2, #1, #1
   27158:	2000      	movs	r0, #0
   2715a:	6059      	str	r1, [r3, #4]
   2715c:	721a      	strb	r2, [r3, #8]
   2715e:	4770      	bx	lr
   27160:	2006      	movs	r0, #6
   27162:	4770      	bx	lr
   27164:	02dc6c00 	.word	0x02dc6c00
   27168:	016e3600 	.word	0x016e3600

0002716c <am_hal_ctimer_int_service>:
   2716c:	b198      	cbz	r0, 27196 <am_hal_ctimer_int_service+0x2a>
   2716e:	b570      	push	{r4, r5, r6, lr}
   27170:	4e09      	ldr	r6, [pc, #36]	; (27198 <am_hal_ctimer_int_service+0x2c>)
   27172:	4604      	mov	r4, r0
   27174:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   27178:	fab4 f384 	clz	r3, r4
   2717c:	f1c3 021f 	rsb	r2, r3, #31
   27180:	fa25 f303 	lsr.w	r3, r5, r3
   27184:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   27188:	ea24 0403 	bic.w	r4, r4, r3
   2718c:	b102      	cbz	r2, 27190 <am_hal_ctimer_int_service+0x24>
   2718e:	4790      	blx	r2
   27190:	2c00      	cmp	r4, #0
   27192:	d1f1      	bne.n	27178 <am_hal_ctimer_int_service+0xc>
   27194:	bd70      	pop	{r4, r5, r6, pc}
   27196:	4770      	bx	lr
   27198:	10007b14 	.word	0x10007b14

0002719c <am_hal_ctimer_int_clear>:
   2719c:	b510      	push	{r4, lr}
   2719e:	b082      	sub	sp, #8
   271a0:	4604      	mov	r4, r0
   271a2:	f000 fa03 	bl	275ac <am_hal_interrupt_master_disable>
   271a6:	4b05      	ldr	r3, [pc, #20]	; (271bc <am_hal_ctimer_int_clear+0x20>)
   271a8:	9001      	str	r0, [sp, #4]
   271aa:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   271ae:	9801      	ldr	r0, [sp, #4]
   271b0:	b002      	add	sp, #8
   271b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   271b6:	f000 b9fd 	b.w	275b4 <am_hal_interrupt_master_set>
   271ba:	bf00      	nop
   271bc:	40008000 	.word	0x40008000

000271c0 <am_hal_ctimer_int_status_get>:
   271c0:	b510      	push	{r4, lr}
   271c2:	b082      	sub	sp, #8
   271c4:	4604      	mov	r4, r0
   271c6:	f000 f9f1 	bl	275ac <am_hal_interrupt_master_disable>
   271ca:	4b0b      	ldr	r3, [pc, #44]	; (271f8 <am_hal_ctimer_int_status_get+0x38>)
   271cc:	9001      	str	r0, [sp, #4]
   271ce:	b154      	cbz	r4, 271e6 <am_hal_ctimer_int_status_get+0x26>
   271d0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   271d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   271d8:	9801      	ldr	r0, [sp, #4]
   271da:	401c      	ands	r4, r3
   271dc:	f000 f9ea 	bl	275b4 <am_hal_interrupt_master_set>
   271e0:	4620      	mov	r0, r4
   271e2:	b002      	add	sp, #8
   271e4:	bd10      	pop	{r4, pc}
   271e6:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   271ea:	9801      	ldr	r0, [sp, #4]
   271ec:	f000 f9e2 	bl	275b4 <am_hal_interrupt_master_set>
   271f0:	4620      	mov	r0, r4
   271f2:	b002      	add	sp, #8
   271f4:	bd10      	pop	{r4, pc}
   271f6:	bf00      	nop
   271f8:	40008000 	.word	0x40008000

000271fc <am_hal_flash_delay>:
   271fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   27200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   27202:	075b      	lsls	r3, r3, #29
   27204:	bf46      	itte	mi
   27206:	0040      	lslmi	r0, r0, #1
   27208:	230e      	movmi	r3, #14
   2720a:	230b      	movpl	r3, #11
   2720c:	4298      	cmp	r0, r3
   2720e:	d902      	bls.n	27216 <am_hal_flash_delay+0x1a>
   27210:	4a01      	ldr	r2, [pc, #4]	; (27218 <am_hal_flash_delay+0x1c>)
   27212:	1ac0      	subs	r0, r0, r3
   27214:	4710      	bx	r2
   27216:	4770      	bx	lr
   27218:	0800009d 	.word	0x0800009d

0002721c <am_hal_flash_delay_status_check>:
   2721c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27220:	f89d c020 	ldrb.w	ip, [sp, #32]
   27224:	f8df 805c 	ldr.w	r8, [pc, #92]	; 27284 <am_hal_flash_delay_status_check+0x68>
   27228:	4604      	mov	r4, r0
   2722a:	460d      	mov	r5, r1
   2722c:	4616      	mov	r6, r2
   2722e:	461f      	mov	r7, r3
   27230:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   27234:	f1bc 0f00 	cmp.w	ip, #0
   27238:	d00a      	beq.n	27250 <am_hal_flash_delay_status_check+0x34>
   2723a:	e01a      	b.n	27272 <am_hal_flash_delay_status_check+0x56>
   2723c:	b1f4      	cbz	r4, 2727c <am_hal_flash_delay_status_check+0x60>
   2723e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   27242:	f013 0f04 	tst.w	r3, #4
   27246:	bf0c      	ite	eq
   27248:	2005      	moveq	r0, #5
   2724a:	2012      	movne	r0, #18
   2724c:	3c01      	subs	r4, #1
   2724e:	47c0      	blx	r8
   27250:	6828      	ldr	r0, [r5, #0]
   27252:	4030      	ands	r0, r6
   27254:	42b8      	cmp	r0, r7
   27256:	d0f1      	beq.n	2723c <am_hal_flash_delay_status_check+0x20>
   27258:	2000      	movs	r0, #0
   2725a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2725e:	b16c      	cbz	r4, 2727c <am_hal_flash_delay_status_check+0x60>
   27260:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   27264:	f013 0f04 	tst.w	r3, #4
   27268:	bf0c      	ite	eq
   2726a:	2005      	moveq	r0, #5
   2726c:	2012      	movne	r0, #18
   2726e:	3c01      	subs	r4, #1
   27270:	47c0      	blx	r8
   27272:	6828      	ldr	r0, [r5, #0]
   27274:	4030      	ands	r0, r6
   27276:	42b8      	cmp	r0, r7
   27278:	d1f1      	bne.n	2725e <am_hal_flash_delay_status_check+0x42>
   2727a:	e7ed      	b.n	27258 <am_hal_flash_delay_status_check+0x3c>
   2727c:	2004      	movs	r0, #4
   2727e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27282:	bf00      	nop
   27284:	0800009d 	.word	0x0800009d

00027288 <am_hal_flash_load_ui32>:
   27288:	4b00      	ldr	r3, [pc, #0]	; (2728c <am_hal_flash_load_ui32+0x4>)
   2728a:	4718      	bx	r3
   2728c:	08000075 	.word	0x08000075

00027290 <am_hal_flash_store_ui32>:
   27290:	4b01      	ldr	r3, [pc, #4]	; (27298 <am_hal_flash_store_ui32+0x8>)
   27292:	f043 0301 	orr.w	r3, r3, #1
   27296:	4718      	bx	r3
   27298:	10003ec4 	.word	0x10003ec4

0002729c <am_hal_triple_read>:
   2729c:	b412      	push	{r1, r4}
   2729e:	f3ef 8410 	mrs	r4, PRIMASK
   272a2:	b672      	cpsid	i
   272a4:	6801      	ldr	r1, [r0, #0]
   272a6:	6802      	ldr	r2, [r0, #0]
   272a8:	6803      	ldr	r3, [r0, #0]
   272aa:	f384 8810 	msr	PRIMASK, r4
   272ae:	bc11      	pop	{r0, r4}
   272b0:	6001      	str	r1, [r0, #0]
   272b2:	6042      	str	r2, [r0, #4]
   272b4:	6083      	str	r3, [r0, #8]
   272b6:	4770      	bx	lr

000272b8 <am_hal_gpio_pinconfig>:
   272b8:	2831      	cmp	r0, #49	; 0x31
   272ba:	f200 80c3 	bhi.w	27444 <am_hal_gpio_pinconfig+0x18c>
   272be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   272c2:	4604      	mov	r4, r0
   272c4:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
   272c8:	f001 0007 	and.w	r0, r1, #7
   272cc:	b085      	sub	sp, #20
   272ce:	f3c1 03c1 	ubfx	r3, r1, #3, #2
   272d2:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   272d6:	d00f      	beq.n	272f8 <am_hal_gpio_pinconfig+0x40>
   272d8:	f3c1 1642 	ubfx	r6, r1, #5, #3
   272dc:	1db5      	adds	r5, r6, #6
   272de:	f005 0507 	and.w	r5, r5, #7
   272e2:	2d03      	cmp	r5, #3
   272e4:	f042 0201 	orr.w	r2, r2, #1
   272e8:	f240 80ae 	bls.w	27448 <am_hal_gpio_pinconfig+0x190>
   272ec:	2fc0      	cmp	r7, #192	; 0xc0
   272ee:	f000 80e1 	beq.w	274b4 <am_hal_gpio_pinconfig+0x1fc>
   272f2:	2f20      	cmp	r7, #32
   272f4:	f000 80e3 	beq.w	274be <am_hal_gpio_pinconfig+0x206>
   272f8:	b163      	cbz	r3, 27314 <am_hal_gpio_pinconfig+0x5c>
   272fa:	2b01      	cmp	r3, #1
   272fc:	f000 80d3 	beq.w	274a6 <am_hal_gpio_pinconfig+0x1ee>
   27300:	2b02      	cmp	r3, #2
   27302:	f040 80c9 	bne.w	27498 <am_hal_gpio_pinconfig+0x1e0>
   27306:	4b79      	ldr	r3, [pc, #484]	; (274ec <am_hal_gpio_pinconfig+0x234>)
   27308:	5d1b      	ldrb	r3, [r3, r4]
   2730a:	075b      	lsls	r3, r3, #29
   2730c:	f140 80c4 	bpl.w	27498 <am_hal_gpio_pinconfig+0x1e0>
   27310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   27314:	4b76      	ldr	r3, [pc, #472]	; (274f0 <am_hal_gpio_pinconfig+0x238>)
   27316:	5d1b      	ldrb	r3, [r3, r4]
   27318:	4103      	asrs	r3, r0
   2731a:	005b      	lsls	r3, r3, #1
   2731c:	f003 0302 	and.w	r3, r3, #2
   27320:	4313      	orrs	r3, r2
   27322:	4a74      	ldr	r2, [pc, #464]	; (274f4 <am_hal_gpio_pinconfig+0x23c>)
   27324:	5d12      	ldrb	r2, [r2, r4]
   27326:	4282      	cmp	r2, r0
   27328:	f000 8099 	beq.w	2745e <am_hal_gpio_pinconfig+0x1a6>
   2732c:	f3c1 3000 	ubfx	r0, r1, #12, #1
   27330:	f3c1 2581 	ubfx	r5, r1, #10, #2
   27334:	f3c1 3280 	ubfx	r2, r1, #14, #1
   27338:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
   2733c:	0a88      	lsrs	r0, r1, #10
   2733e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   27342:	f000 0008 	and.w	r0, r0, #8
   27346:	4302      	orrs	r2, r0
   27348:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2734c:	f000 050c 	and.w	r5, r0, #12
   27350:	2d04      	cmp	r5, #4
   27352:	f000 80a5 	beq.w	274a0 <am_hal_gpio_pinconfig+0x1e8>
   27356:	4d68      	ldr	r5, [pc, #416]	; (274f8 <am_hal_gpio_pinconfig+0x240>)
   27358:	682d      	ldr	r5, [r5, #0]
   2735a:	eba1 0805 	sub.w	r8, r1, r5
   2735e:	fab8 f888 	clz	r8, r8
   27362:	ea4f 1858 	mov.w	r8, r8, lsr #5
   27366:	f010 0f60 	tst.w	r0, #96	; 0x60
   2736a:	bf04      	itt	eq
   2736c:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
   27370:	f360 0200 	bfieq	r2, r0, #0, #1
   27374:	00a0      	lsls	r0, r4, #2
   27376:	f3c1 2101 	ubfx	r1, r1, #8, #2
   2737a:	2902      	cmp	r1, #2
   2737c:	d05c      	beq.n	27438 <am_hal_gpio_pinconfig+0x180>
   2737e:	2903      	cmp	r1, #3
   27380:	d058      	beq.n	27434 <am_hal_gpio_pinconfig+0x17c>
   27382:	2901      	cmp	r1, #1
   27384:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   27388:	bf08      	it	eq
   2738a:	f043 0304 	orreq.w	r3, r3, #4
   2738e:	f001 0118 	and.w	r1, r1, #24
   27392:	2700      	movs	r7, #0
   27394:	f000 001c 	and.w	r0, r0, #28
   27398:	fa02 f600 	lsl.w	r6, r2, r0
   2739c:	220f      	movs	r2, #15
   2739e:	4082      	lsls	r2, r0
   273a0:	43d2      	mvns	r2, r2
   273a2:	f04f 09ff 	mov.w	r9, #255	; 0xff
   273a6:	fa03 f501 	lsl.w	r5, r3, r1
   273aa:	fa09 f901 	lsl.w	r9, r9, r1
   273ae:	9201      	str	r2, [sp, #4]
   273b0:	f000 f8fc 	bl	275ac <am_hal_interrupt_master_disable>
   273b4:	f024 0a03 	bic.w	sl, r4, #3
   273b8:	ea4f 0b54 	mov.w	fp, r4, lsr #1
   273bc:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
   273c0:	4b4e      	ldr	r3, [pc, #312]	; (274fc <am_hal_gpio_pinconfig+0x244>)
   273c2:	494f      	ldr	r1, [pc, #316]	; (27500 <am_hal_gpio_pinconfig+0x248>)
   273c4:	9a01      	ldr	r2, [sp, #4]
   273c6:	9003      	str	r0, [sp, #12]
   273c8:	ea6f 0909 	mvn.w	r9, r9
   273cc:	f02b 0b03 	bic.w	fp, fp, #3
   273d0:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
   273d4:	f1b8 0f00 	cmp.w	r8, #0
   273d8:	d00b      	beq.n	273f2 <am_hal_gpio_pinconfig+0x13a>
   273da:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   273de:	f004 081f 	and.w	r8, r4, #31
   273e2:	4848      	ldr	r0, [pc, #288]	; (27504 <am_hal_gpio_pinconfig+0x24c>)
   273e4:	f00e 0e04 	and.w	lr, lr, #4
   273e8:	2401      	movs	r4, #1
   273ea:	fa04 f408 	lsl.w	r4, r4, r8
   273ee:	f84e 4000 	str.w	r4, [lr, r0]
   273f2:	4845      	ldr	r0, [pc, #276]	; (27508 <am_hal_gpio_pinconfig+0x250>)
   273f4:	2473      	movs	r4, #115	; 0x73
   273f6:	6604      	str	r4, [r0, #96]	; 0x60
   273f8:	f8dc 4000 	ldr.w	r4, [ip]
   273fc:	ea04 0409 	and.w	r4, r4, r9
   27400:	4325      	orrs	r5, r4
   27402:	f8cc 5000 	str.w	r5, [ip]
   27406:	f85b 4003 	ldr.w	r4, [fp, r3]
   2740a:	4022      	ands	r2, r4
   2740c:	4332      	orrs	r2, r6
   2740e:	f84b 2003 	str.w	r2, [fp, r3]
   27412:	f85a 3001 	ldr.w	r3, [sl, r1]
   27416:	ea03 0909 	and.w	r9, r3, r9
   2741a:	2400      	movs	r4, #0
   2741c:	ea49 0707 	orr.w	r7, r9, r7
   27420:	f84a 7001 	str.w	r7, [sl, r1]
   27424:	6604      	str	r4, [r0, #96]	; 0x60
   27426:	9803      	ldr	r0, [sp, #12]
   27428:	f000 f8c4 	bl	275b4 <am_hal_interrupt_master_set>
   2742c:	4620      	mov	r0, r4
   2742e:	b005      	add	sp, #20
   27430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27434:	f043 0304 	orr.w	r3, r3, #4
   27438:	00e1      	lsls	r1, r4, #3
   2743a:	f001 0118 	and.w	r1, r1, #24
   2743e:	2701      	movs	r7, #1
   27440:	408f      	lsls	r7, r1
   27442:	e7a7      	b.n	27394 <am_hal_gpio_pinconfig+0xdc>
   27444:	2006      	movs	r0, #6
   27446:	4770      	bx	lr
   27448:	4d28      	ldr	r5, [pc, #160]	; (274ec <am_hal_gpio_pinconfig+0x234>)
   2744a:	5d2d      	ldrb	r5, [r5, r4]
   2744c:	3e02      	subs	r6, #2
   2744e:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   27452:	07ee      	lsls	r6, r5, #31
   27454:	d536      	bpl.n	274c4 <am_hal_gpio_pinconfig+0x20c>
   27456:	2b00      	cmp	r3, #0
   27458:	f43f af5c 	beq.w	27314 <am_hal_gpio_pinconfig+0x5c>
   2745c:	e74d      	b.n	272fa <am_hal_gpio_pinconfig+0x42>
   2745e:	f3c1 4202 	ubfx	r2, r1, #16, #3
   27462:	2a07      	cmp	r2, #7
   27464:	d030      	beq.n	274c8 <am_hal_gpio_pinconfig+0x210>
   27466:	4d29      	ldr	r5, [pc, #164]	; (2750c <am_hal_gpio_pinconfig+0x254>)
   27468:	f3c1 40c1 	ubfx	r0, r1, #19, #2
   2746c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   27470:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
   27474:	4290      	cmp	r0, r2
   27476:	d029      	beq.n	274cc <am_hal_gpio_pinconfig+0x214>
   27478:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   2747c:	00a0      	lsls	r0, r4, #2
   2747e:	786e      	ldrb	r6, [r5, #1]
   27480:	4296      	cmp	r6, r2
   27482:	d02d      	beq.n	274e0 <am_hal_gpio_pinconfig+0x228>
   27484:	78ae      	ldrb	r6, [r5, #2]
   27486:	4296      	cmp	r6, r2
   27488:	d02c      	beq.n	274e4 <am_hal_gpio_pinconfig+0x22c>
   2748a:	78ed      	ldrb	r5, [r5, #3]
   2748c:	4295      	cmp	r5, r2
   2748e:	d02b      	beq.n	274e8 <am_hal_gpio_pinconfig+0x230>
   27490:	481f      	ldr	r0, [pc, #124]	; (27510 <am_hal_gpio_pinconfig+0x258>)
   27492:	b005      	add	sp, #20
   27494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27498:	481e      	ldr	r0, [pc, #120]	; (27514 <am_hal_gpio_pinconfig+0x25c>)
   2749a:	b005      	add	sp, #20
   2749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274a0:	f04f 0801 	mov.w	r8, #1
   274a4:	e75f      	b.n	27366 <am_hal_gpio_pinconfig+0xae>
   274a6:	4b11      	ldr	r3, [pc, #68]	; (274ec <am_hal_gpio_pinconfig+0x234>)
   274a8:	5d1b      	ldrb	r3, [r3, r4]
   274aa:	079d      	lsls	r5, r3, #30
   274ac:	d5f4      	bpl.n	27498 <am_hal_gpio_pinconfig+0x1e0>
   274ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   274b2:	e72f      	b.n	27314 <am_hal_gpio_pinconfig+0x5c>
   274b4:	2c14      	cmp	r4, #20
   274b6:	f43f af1f 	beq.w	272f8 <am_hal_gpio_pinconfig+0x40>
   274ba:	4817      	ldr	r0, [pc, #92]	; (27518 <am_hal_gpio_pinconfig+0x260>)
   274bc:	e7b7      	b.n	2742e <am_hal_gpio_pinconfig+0x176>
   274be:	2c14      	cmp	r4, #20
   274c0:	f47f af1a 	bne.w	272f8 <am_hal_gpio_pinconfig+0x40>
   274c4:	4815      	ldr	r0, [pc, #84]	; (2751c <am_hal_gpio_pinconfig+0x264>)
   274c6:	e7b2      	b.n	2742e <am_hal_gpio_pinconfig+0x176>
   274c8:	4815      	ldr	r0, [pc, #84]	; (27520 <am_hal_gpio_pinconfig+0x268>)
   274ca:	e7b0      	b.n	2742e <am_hal_gpio_pinconfig+0x176>
   274cc:	2200      	movs	r2, #0
   274ce:	00a0      	lsls	r0, r4, #2
   274d0:	0052      	lsls	r2, r2, #1
   274d2:	f3c1 5540 	ubfx	r5, r1, #21, #1
   274d6:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
   274da:	f04f 0800 	mov.w	r8, #0
   274de:	e74a      	b.n	27376 <am_hal_gpio_pinconfig+0xbe>
   274e0:	2201      	movs	r2, #1
   274e2:	e7f5      	b.n	274d0 <am_hal_gpio_pinconfig+0x218>
   274e4:	2202      	movs	r2, #2
   274e6:	e7f3      	b.n	274d0 <am_hal_gpio_pinconfig+0x218>
   274e8:	2203      	movs	r2, #3
   274ea:	e7f1      	b.n	274d0 <am_hal_gpio_pinconfig+0x218>
   274ec:	0002a90c 	.word	0x0002a90c
   274f0:	0002a940 	.word	0x0002a940
   274f4:	0002aa3c 	.word	0x0002aa3c
   274f8:	0002a904 	.word	0x0002a904
   274fc:	40010040 	.word	0x40010040
   27500:	400100e0 	.word	0x400100e0
   27504:	400100b4 	.word	0x400100b4
   27508:	40010000 	.word	0x40010000
   2750c:	0002a974 	.word	0x0002a974
   27510:	08000104 	.word	0x08000104
   27514:	08000102 	.word	0x08000102
   27518:	08000101 	.word	0x08000101
   2751c:	08000100 	.word	0x08000100
   27520:	08000103 	.word	0x08000103

00027524 <am_hal_gpio_state_write>:
   27524:	2831      	cmp	r0, #49	; 0x31
   27526:	d81a      	bhi.n	2755e <am_hal_gpio_state_write+0x3a>
   27528:	b570      	push	{r4, r5, r6, lr}
   2752a:	2905      	cmp	r1, #5
   2752c:	b082      	sub	sp, #8
   2752e:	460d      	mov	r5, r1
   27530:	d812      	bhi.n	27558 <am_hal_gpio_state_write+0x34>
   27532:	f000 031f 	and.w	r3, r0, #31
   27536:	2201      	movs	r2, #1
   27538:	08c0      	lsrs	r0, r0, #3
   2753a:	fa02 f603 	lsl.w	r6, r2, r3
   2753e:	f000 0404 	and.w	r4, r0, #4
   27542:	f000 f833 	bl	275ac <am_hal_interrupt_master_disable>
   27546:	3d01      	subs	r5, #1
   27548:	9001      	str	r0, [sp, #4]
   2754a:	2d04      	cmp	r5, #4
   2754c:	d821      	bhi.n	27592 <am_hal_gpio_state_write+0x6e>
   2754e:	e8df f005 	tbb	[pc, r5]
   27552:	1512      	.short	0x1512
   27554:	1d1a      	.short	0x1d1a
   27556:	08          	.byte	0x08
   27557:	00          	.byte	0x00
   27558:	2006      	movs	r0, #6
   2755a:	b002      	add	sp, #8
   2755c:	bd70      	pop	{r4, r5, r6, pc}
   2755e:	2005      	movs	r0, #5
   27560:	4770      	bx	lr
   27562:	4a0d      	ldr	r2, [pc, #52]	; (27598 <am_hal_gpio_state_write+0x74>)
   27564:	58a3      	ldr	r3, [r4, r2]
   27566:	4073      	eors	r3, r6
   27568:	50a3      	str	r3, [r4, r2]
   2756a:	9801      	ldr	r0, [sp, #4]
   2756c:	f000 f822 	bl	275b4 <am_hal_interrupt_master_set>
   27570:	2000      	movs	r0, #0
   27572:	b002      	add	sp, #8
   27574:	bd70      	pop	{r4, r5, r6, pc}
   27576:	4b09      	ldr	r3, [pc, #36]	; (2759c <am_hal_gpio_state_write+0x78>)
   27578:	50e6      	str	r6, [r4, r3]
   2757a:	e7f6      	b.n	2756a <am_hal_gpio_state_write+0x46>
   2757c:	4a08      	ldr	r2, [pc, #32]	; (275a0 <am_hal_gpio_state_write+0x7c>)
   2757e:	58a3      	ldr	r3, [r4, r2]
   27580:	4073      	eors	r3, r6
   27582:	50a3      	str	r3, [r4, r2]
   27584:	e7f1      	b.n	2756a <am_hal_gpio_state_write+0x46>
   27586:	4b04      	ldr	r3, [pc, #16]	; (27598 <am_hal_gpio_state_write+0x74>)
   27588:	50e6      	str	r6, [r4, r3]
   2758a:	e7ee      	b.n	2756a <am_hal_gpio_state_write+0x46>
   2758c:	4b05      	ldr	r3, [pc, #20]	; (275a4 <am_hal_gpio_state_write+0x80>)
   2758e:	50e6      	str	r6, [r4, r3]
   27590:	e7eb      	b.n	2756a <am_hal_gpio_state_write+0x46>
   27592:	4b05      	ldr	r3, [pc, #20]	; (275a8 <am_hal_gpio_state_write+0x84>)
   27594:	50e6      	str	r6, [r4, r3]
   27596:	e7e8      	b.n	2756a <am_hal_gpio_state_write+0x46>
   27598:	400100b4 	.word	0x400100b4
   2759c:	40010090 	.word	0x40010090
   275a0:	40010088 	.word	0x40010088
   275a4:	400100a8 	.word	0x400100a8
   275a8:	40010098 	.word	0x40010098

000275ac <am_hal_interrupt_master_disable>:
   275ac:	f3ef 8010 	mrs	r0, PRIMASK
   275b0:	b672      	cpsid	i
   275b2:	4770      	bx	lr

000275b4 <am_hal_interrupt_master_set>:
   275b4:	f380 8810 	msr	PRIMASK, r0
   275b8:	4770      	bx	lr
   275ba:	bf00      	nop

000275bc <am_hal_mcuctrl_info_get>:
   275bc:	2900      	cmp	r1, #0
   275be:	f000 808f 	beq.w	276e0 <am_hal_mcuctrl_info_get+0x124>
   275c2:	2801      	cmp	r0, #1
   275c4:	b430      	push	{r4, r5}
   275c6:	d006      	beq.n	275d6 <am_hal_mcuctrl_info_get+0x1a>
   275c8:	2802      	cmp	r0, #2
   275ca:	d06d      	beq.n	276a8 <am_hal_mcuctrl_info_get+0xec>
   275cc:	2800      	cmp	r0, #0
   275ce:	d055      	beq.n	2767c <am_hal_mcuctrl_info_get+0xc0>
   275d0:	2006      	movs	r0, #6
   275d2:	bc30      	pop	{r4, r5}
   275d4:	4770      	bx	lr
   275d6:	4a43      	ldr	r2, [pc, #268]	; (276e4 <am_hal_mcuctrl_info_get+0x128>)
   275d8:	4843      	ldr	r0, [pc, #268]	; (276e8 <am_hal_mcuctrl_info_get+0x12c>)
   275da:	6813      	ldr	r3, [r2, #0]
   275dc:	600b      	str	r3, [r1, #0]
   275de:	6854      	ldr	r4, [r2, #4]
   275e0:	604c      	str	r4, [r1, #4]
   275e2:	6894      	ldr	r4, [r2, #8]
   275e4:	608c      	str	r4, [r1, #8]
   275e6:	68d4      	ldr	r4, [r2, #12]
   275e8:	60cc      	str	r4, [r1, #12]
   275ea:	f3c3 5503 	ubfx	r5, r3, #20, #4
   275ee:	6914      	ldr	r4, [r2, #16]
   275f0:	610c      	str	r4, [r1, #16]
   275f2:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   275f6:	4c3d      	ldr	r4, [pc, #244]	; (276ec <am_hal_mcuctrl_info_get+0x130>)
   275f8:	6950      	ldr	r0, [r2, #20]
   275fa:	6148      	str	r0, [r1, #20]
   275fc:	f003 0201 	and.w	r2, r3, #1
   27600:	f3c3 4303 	ubfx	r3, r3, #16, #4
   27604:	e9c1 2506 	strd	r2, r5, [r1, #24]
   27608:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   2760c:	4a38      	ldr	r2, [pc, #224]	; (276f0 <am_hal_mcuctrl_info_get+0x134>)
   2760e:	620b      	str	r3, [r1, #32]
   27610:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   27614:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
   27618:	b2db      	uxtb	r3, r3
   2761a:	f000 000f 	and.w	r0, r0, #15
   2761e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   27622:	624b      	str	r3, [r1, #36]	; 0x24
   27624:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   27628:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
   2762c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   27630:	f000 000f 	and.w	r0, r0, #15
   27634:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   27638:	628b      	str	r3, [r1, #40]	; 0x28
   2763a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   2763e:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
   27642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27646:	f3c0 1003 	ubfx	r0, r0, #4, #4
   2764a:	4303      	orrs	r3, r0
   2764c:	62cb      	str	r3, [r1, #44]	; 0x2c
   2764e:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
   27652:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
   27656:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
   2765a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   2765e:	b2db      	uxtb	r3, r3
   27660:	041b      	lsls	r3, r3, #16
   27662:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   27666:	fa5f fc82 	uxtb.w	ip, r2
   2766a:	ea43 030c 	orr.w	r3, r3, ip
   2766e:	b2c2      	uxtb	r2, r0
   27670:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   27674:	630b      	str	r3, [r1, #48]	; 0x30
   27676:	2000      	movs	r0, #0
   27678:	bc30      	pop	{r4, r5}
   2767a:	4770      	bx	lr
   2767c:	4a19      	ldr	r2, [pc, #100]	; (276e4 <am_hal_mcuctrl_info_get+0x128>)
   2767e:	6993      	ldr	r3, [r2, #24]
   27680:	f3c3 1480 	ubfx	r4, r3, #6, #1
   27684:	700c      	strb	r4, [r1, #0]
   27686:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
   2768a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2768e:	704b      	strb	r3, [r1, #1]
   27690:	f3c4 6381 	ubfx	r3, r4, #26, #2
   27694:	710b      	strb	r3, [r1, #4]
   27696:	6953      	ldr	r3, [r2, #20]
   27698:	f3c3 0240 	ubfx	r2, r3, #1, #1
   2769c:	f003 0301 	and.w	r3, r3, #1
   276a0:	bc30      	pop	{r4, r5}
   276a2:	708a      	strb	r2, [r1, #2]
   276a4:	70cb      	strb	r3, [r1, #3]
   276a6:	4770      	bx	lr
   276a8:	4a0e      	ldr	r2, [pc, #56]	; (276e4 <am_hal_mcuctrl_info_get+0x128>)
   276aa:	6848      	ldr	r0, [r1, #4]
   276ac:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   276b0:	f003 0401 	and.w	r4, r3, #1
   276b4:	700c      	strb	r4, [r1, #0]
   276b6:	f3c3 0440 	ubfx	r4, r3, #1, #1
   276ba:	720c      	strb	r4, [r1, #8]
   276bc:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
   276c0:	60cc      	str	r4, [r1, #12]
   276c2:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
   276c6:	4320      	orrs	r0, r4
   276c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
   276cc:	6048      	str	r0, [r1, #4]
   276ce:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   276d2:	740b      	strb	r3, [r1, #16]
   276d4:	694b      	ldr	r3, [r1, #20]
   276d6:	4313      	orrs	r3, r2
   276d8:	2000      	movs	r0, #0
   276da:	bc30      	pop	{r4, r5}
   276dc:	614b      	str	r3, [r1, #20]
   276de:	4770      	bx	lr
   276e0:	2006      	movs	r0, #6
   276e2:	4770      	bx	lr
   276e4:	40020000 	.word	0x40020000
   276e8:	0002aa70 	.word	0x0002aa70
   276ec:	0002aab0 	.word	0x0002aab0
   276f0:	f0000f00 	.word	0xf0000f00

000276f4 <am_hal_pwrctrl_periph_enable>:
   276f4:	b570      	push	{r4, r5, r6, lr}
   276f6:	b082      	sub	sp, #8
   276f8:	4604      	mov	r4, r0
   276fa:	f7ff ff57 	bl	275ac <am_hal_interrupt_master_disable>
   276fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   27702:	4e0f      	ldr	r6, [pc, #60]	; (27740 <am_hal_pwrctrl_periph_enable+0x4c>)
   27704:	4d0f      	ldr	r5, [pc, #60]	; (27744 <am_hal_pwrctrl_periph_enable+0x50>)
   27706:	9001      	str	r0, [sp, #4]
   27708:	00a4      	lsls	r4, r4, #2
   2770a:	68b3      	ldr	r3, [r6, #8]
   2770c:	592a      	ldr	r2, [r5, r4]
   2770e:	4313      	orrs	r3, r2
   27710:	60b3      	str	r3, [r6, #8]
   27712:	9801      	ldr	r0, [sp, #4]
   27714:	442c      	add	r4, r5
   27716:	f7ff ff4d 	bl	275b4 <am_hal_interrupt_master_set>
   2771a:	20a0      	movs	r0, #160	; 0xa0
   2771c:	f7ff fd6e 	bl	271fc <am_hal_flash_delay>
   27720:	69b3      	ldr	r3, [r6, #24]
   27722:	6864      	ldr	r4, [r4, #4]
   27724:	4223      	tst	r3, r4
   27726:	d103      	bne.n	27730 <am_hal_pwrctrl_periph_enable+0x3c>
   27728:	20a0      	movs	r0, #160	; 0xa0
   2772a:	f7ff fd67 	bl	271fc <am_hal_flash_delay>
   2772e:	69b3      	ldr	r3, [r6, #24]
   27730:	4b03      	ldr	r3, [pc, #12]	; (27740 <am_hal_pwrctrl_periph_enable+0x4c>)
   27732:	699b      	ldr	r3, [r3, #24]
   27734:	4223      	tst	r3, r4
   27736:	bf0c      	ite	eq
   27738:	2001      	moveq	r0, #1
   2773a:	2000      	movne	r0, #0
   2773c:	b002      	add	sp, #8
   2773e:	bd70      	pop	{r4, r5, r6, pc}
   27740:	40021000 	.word	0x40021000
   27744:	0002aca0 	.word	0x0002aca0

00027748 <am_hal_pwrctrl_periph_disable>:
   27748:	b570      	push	{r4, r5, r6, lr}
   2774a:	b082      	sub	sp, #8
   2774c:	4604      	mov	r4, r0
   2774e:	f7ff ff2d 	bl	275ac <am_hal_interrupt_master_disable>
   27752:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   27756:	4e10      	ldr	r6, [pc, #64]	; (27798 <am_hal_pwrctrl_periph_disable+0x50>)
   27758:	4d10      	ldr	r5, [pc, #64]	; (2779c <am_hal_pwrctrl_periph_disable+0x54>)
   2775a:	9001      	str	r0, [sp, #4]
   2775c:	00a4      	lsls	r4, r4, #2
   2775e:	68b3      	ldr	r3, [r6, #8]
   27760:	592a      	ldr	r2, [r5, r4]
   27762:	ea23 0302 	bic.w	r3, r3, r2
   27766:	60b3      	str	r3, [r6, #8]
   27768:	9801      	ldr	r0, [sp, #4]
   2776a:	442c      	add	r4, r5
   2776c:	f7ff ff22 	bl	275b4 <am_hal_interrupt_master_set>
   27770:	20a0      	movs	r0, #160	; 0xa0
   27772:	f7ff fd43 	bl	271fc <am_hal_flash_delay>
   27776:	69b3      	ldr	r3, [r6, #24]
   27778:	6864      	ldr	r4, [r4, #4]
   2777a:	4223      	tst	r3, r4
   2777c:	d003      	beq.n	27786 <am_hal_pwrctrl_periph_disable+0x3e>
   2777e:	20a0      	movs	r0, #160	; 0xa0
   27780:	f7ff fd3c 	bl	271fc <am_hal_flash_delay>
   27784:	69b3      	ldr	r3, [r6, #24]
   27786:	4b04      	ldr	r3, [pc, #16]	; (27798 <am_hal_pwrctrl_periph_disable+0x50>)
   27788:	699b      	ldr	r3, [r3, #24]
   2778a:	4223      	tst	r3, r4
   2778c:	bf14      	ite	ne
   2778e:	2001      	movne	r0, #1
   27790:	2000      	moveq	r0, #0
   27792:	b002      	add	sp, #8
   27794:	bd70      	pop	{r4, r5, r6, pc}
   27796:	bf00      	nop
   27798:	40021000 	.word	0x40021000
   2779c:	0002aca0 	.word	0x0002aca0

000277a0 <am_hal_pwrctrl_memory_enable>:
   277a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   277a4:	4d22      	ldr	r5, [pc, #136]	; (27830 <am_hal_pwrctrl_memory_enable+0x90>)
   277a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   277aa:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
   277ae:	f855 8033 	ldr.w	r8, [r5, r3, lsl #3]
   277b2:	f8d9 6010 	ldr.w	r6, [r9, #16]
   277b6:	f1b8 3fff 	cmp.w	r8, #4294967295
   277ba:	4604      	mov	r4, r0
   277bc:	ea4f 0740 	mov.w	r7, r0, lsl #1
   277c0:	d120      	bne.n	27804 <am_hal_pwrctrl_memory_enable+0x64>
   277c2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 27834 <am_hal_pwrctrl_memory_enable+0x94>
   277c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   277ca:	443c      	add	r4, r7
   277cc:	ea43 0308 	orr.w	r3, r3, r8
   277d0:	f8c9 3010 	str.w	r3, [r9, #16]
   277d4:	20a0      	movs	r0, #160	; 0xa0
   277d6:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   277da:	f7ff fd0f 	bl	271fc <am_hal_flash_delay>
   277de:	f8d9 3014 	ldr.w	r3, [r9, #20]
   277e2:	686c      	ldr	r4, [r5, #4]
   277e4:	4033      	ands	r3, r6
   277e6:	42a3      	cmp	r3, r4
   277e8:	d004      	beq.n	277f4 <am_hal_pwrctrl_memory_enable+0x54>
   277ea:	20a0      	movs	r0, #160	; 0xa0
   277ec:	f7ff fd06 	bl	271fc <am_hal_flash_delay>
   277f0:	f8d9 3014 	ldr.w	r3, [r9, #20]
   277f4:	4b0f      	ldr	r3, [pc, #60]	; (27834 <am_hal_pwrctrl_memory_enable+0x94>)
   277f6:	6958      	ldr	r0, [r3, #20]
   277f8:	4030      	ands	r0, r6
   277fa:	1b00      	subs	r0, r0, r4
   277fc:	bf18      	it	ne
   277fe:	2001      	movne	r0, #1
   27800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27804:	f8d9 300c 	ldr.w	r3, [r9, #12]
   27808:	4a0a      	ldr	r2, [pc, #40]	; (27834 <am_hal_pwrctrl_memory_enable+0x94>)
   2780a:	ea68 0303 	orn	r3, r8, r3
   2780e:	6911      	ldr	r1, [r2, #16]
   27810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   27814:	f043 0301 	orr.w	r3, r3, #1
   27818:	400b      	ands	r3, r1
   2781a:	2010      	movs	r0, #16
   2781c:	6113      	str	r3, [r2, #16]
   2781e:	f7ff fced 	bl	271fc <am_hal_flash_delay>
   27822:	f1b8 0f00 	cmp.w	r8, #0
   27826:	d1cc      	bne.n	277c2 <am_hal_pwrctrl_memory_enable+0x22>
   27828:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2782c:	e7e2      	b.n	277f4 <am_hal_pwrctrl_memory_enable+0x54>
   2782e:	bf00      	nop
   27830:	0002aaf0 	.word	0x0002aaf0
   27834:	40021000 	.word	0x40021000

00027838 <am_hal_pwrctrl_low_power_init>:
   27838:	b530      	push	{r4, r5, lr}
   2783a:	4b69      	ldr	r3, [pc, #420]	; (279e0 <am_hal_pwrctrl_low_power_init+0x1a8>)
   2783c:	681a      	ldr	r2, [r3, #0]
   2783e:	b085      	sub	sp, #20
   27840:	b912      	cbnz	r2, 27848 <am_hal_pwrctrl_low_power_init+0x10>
   27842:	4a68      	ldr	r2, [pc, #416]	; (279e4 <am_hal_pwrctrl_low_power_init+0x1ac>)
   27844:	6812      	ldr	r2, [r2, #0]
   27846:	601a      	str	r2, [r3, #0]
   27848:	4b67      	ldr	r3, [pc, #412]	; (279e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
   2784a:	68db      	ldr	r3, [r3, #12]
   2784c:	b2db      	uxtb	r3, r3
   2784e:	2b12      	cmp	r3, #18
   27850:	d104      	bne.n	2785c <am_hal_pwrctrl_low_power_init+0x24>
   27852:	4c66      	ldr	r4, [pc, #408]	; (279ec <am_hal_pwrctrl_low_power_init+0x1b4>)
   27854:	6863      	ldr	r3, [r4, #4]
   27856:	07d8      	lsls	r0, r3, #31
   27858:	f100 8088 	bmi.w	2796c <am_hal_pwrctrl_low_power_init+0x134>
   2785c:	4b62      	ldr	r3, [pc, #392]	; (279e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
   2785e:	68da      	ldr	r2, [r3, #12]
   27860:	b2d2      	uxtb	r2, r2
   27862:	2a20      	cmp	r2, #32
   27864:	d934      	bls.n	278d0 <am_hal_pwrctrl_low_power_init+0x98>
   27866:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   2786a:	2002      	movs	r0, #2
   2786c:	f360 4213 	bfi	r2, r0, #16, #4
   27870:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
   27874:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   27878:	2203      	movs	r2, #3
   2787a:	f362 5117 	bfi	r1, r2, #20, #4
   2787e:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   27882:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   27886:	2405      	movs	r4, #5
   27888:	f364 0103 	bfi	r1, r4, #0, #4
   2788c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   27890:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   27894:	f360 1107 	bfi	r1, r0, #4, #4
   27898:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2789c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   278a0:	2406      	movs	r4, #6
   278a2:	f364 210b 	bfi	r1, r4, #8, #4
   278a6:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   278aa:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   278ae:	2001      	movs	r0, #1
   278b0:	f360 310f 	bfi	r1, r0, #12, #4
   278b4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   278b8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   278bc:	f362 61de 	bfi	r1, r2, #27, #4
   278c0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   278c4:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   278c8:	f362 0103 	bfi	r1, r2, #0, #4
   278cc:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   278d0:	4a45      	ldr	r2, [pc, #276]	; (279e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
   278d2:	68d3      	ldr	r3, [r2, #12]
   278d4:	b2db      	uxtb	r3, r3
   278d6:	2b11      	cmp	r3, #17
   278d8:	d905      	bls.n	278e6 <am_hal_pwrctrl_low_power_init+0xae>
   278da:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
   278de:	f36f 6318 	bfc	r3, #24, #1
   278e2:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
   278e6:	2100      	movs	r1, #0
   278e8:	200c      	movs	r0, #12
   278ea:	f7ff fa0b 	bl	26d04 <am_hal_cachectrl_control>
   278ee:	4b3f      	ldr	r3, [pc, #252]	; (279ec <am_hal_pwrctrl_low_power_init+0x1b4>)
   278f0:	699b      	ldr	r3, [r3, #24]
   278f2:	f3c3 2500 	ubfx	r5, r3, #8, #1
   278f6:	05db      	lsls	r3, r3, #23
   278f8:	d420      	bmi.n	2793c <am_hal_pwrctrl_low_power_init+0x104>
   278fa:	4c3b      	ldr	r4, [pc, #236]	; (279e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
   278fc:	68e3      	ldr	r3, [r4, #12]
   278fe:	b2db      	uxtb	r3, r3
   27900:	2b11      	cmp	r3, #17
   27902:	d84e      	bhi.n	279a2 <am_hal_pwrctrl_low_power_init+0x16a>
   27904:	4c38      	ldr	r4, [pc, #224]	; (279e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
   27906:	493a      	ldr	r1, [pc, #232]	; (279f0 <am_hal_pwrctrl_low_power_init+0x1b8>)
   27908:	7e22      	ldrb	r2, [r4, #24]
   2790a:	2001      	movs	r0, #1
   2790c:	4302      	orrs	r2, r0
   2790e:	2307      	movs	r3, #7
   27910:	7622      	strb	r2, [r4, #24]
   27912:	9000      	str	r0, [sp, #0]
   27914:	461a      	mov	r2, r3
   27916:	f242 7010 	movw	r0, #10000	; 0x2710
   2791a:	f7ff fc7f 	bl	2721c <am_hal_flash_delay_status_check>
   2791e:	2800      	cmp	r0, #0
   27920:	d15a      	bne.n	279d8 <am_hal_pwrctrl_low_power_init+0x1a0>
   27922:	4b32      	ldr	r3, [pc, #200]	; (279ec <am_hal_pwrctrl_low_power_init+0x1b4>)
   27924:	681a      	ldr	r2, [r3, #0]
   27926:	f042 0201 	orr.w	r2, r2, #1
   2792a:	601a      	str	r2, [r3, #0]
   2792c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2792e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   27932:	625a      	str	r2, [r3, #36]	; 0x24
   27934:	68e3      	ldr	r3, [r4, #12]
   27936:	b2db      	uxtb	r3, r3
   27938:	2b11      	cmp	r3, #17
   2793a:	d002      	beq.n	27942 <am_hal_pwrctrl_low_power_init+0x10a>
   2793c:	2000      	movs	r0, #0
   2793e:	b005      	add	sp, #20
   27940:	bd30      	pop	{r4, r5, pc}
   27942:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
   27946:	f360 5356 	bfi	r3, r0, #21, #2
   2794a:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   2794e:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   27952:	220f      	movs	r2, #15
   27954:	f362 138b 	bfi	r3, r2, #6, #6
   27958:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   2795c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   27960:	f362 0305 	bfi	r3, r2, #0, #6
   27964:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   27968:	b005      	add	sp, #20
   2796a:	bd30      	pop	{r4, r5, pc}
   2796c:	f7ff fe1e 	bl	275ac <am_hal_interrupt_master_disable>
   27970:	9002      	str	r0, [sp, #8]
   27972:	68a3      	ldr	r3, [r4, #8]
   27974:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   27978:	60a3      	str	r3, [r4, #8]
   2797a:	9802      	ldr	r0, [sp, #8]
   2797c:	f7ff fe1a 	bl	275b4 <am_hal_interrupt_master_set>
   27980:	20a0      	movs	r0, #160	; 0xa0
   27982:	f7ff fc3b 	bl	271fc <am_hal_flash_delay>
   27986:	69a3      	ldr	r3, [r4, #24]
   27988:	0619      	lsls	r1, r3, #24
   2798a:	d403      	bmi.n	27994 <am_hal_pwrctrl_low_power_init+0x15c>
   2798c:	20a0      	movs	r0, #160	; 0xa0
   2798e:	f7ff fc35 	bl	271fc <am_hal_flash_delay>
   27992:	69a3      	ldr	r3, [r4, #24]
   27994:	4b15      	ldr	r3, [pc, #84]	; (279ec <am_hal_pwrctrl_low_power_init+0x1b4>)
   27996:	699b      	ldr	r3, [r3, #24]
   27998:	061a      	lsls	r2, r3, #24
   2799a:	f53f af5f 	bmi.w	2785c <am_hal_pwrctrl_low_power_init+0x24>
   2799e:	2001      	movs	r0, #1
   279a0:	e7cd      	b.n	2793e <am_hal_pwrctrl_low_power_init+0x106>
   279a2:	f7ff fe03 	bl	275ac <am_hal_interrupt_master_disable>
   279a6:	9003      	str	r0, [sp, #12]
   279a8:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   279ac:	2219      	movs	r2, #25
   279ae:	f362 138b 	bfi	r3, r2, #6, #6
   279b2:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   279b6:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
   279ba:	210c      	movs	r1, #12
   279bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   279c0:	f361 0205 	bfi	r2, r1, #0, #6
   279c4:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
   279c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   279ca:	f365 5296 	bfi	r2, r5, #22, #1
   279ce:	63da      	str	r2, [r3, #60]	; 0x3c
   279d0:	9803      	ldr	r0, [sp, #12]
   279d2:	f7ff fdef 	bl	275b4 <am_hal_interrupt_master_set>
   279d6:	e795      	b.n	27904 <am_hal_pwrctrl_low_power_init+0xcc>
   279d8:	2004      	movs	r0, #4
   279da:	b005      	add	sp, #20
   279dc:	bd30      	pop	{r4, r5, pc}
   279de:	bf00      	nop
   279e0:	10007b94 	.word	0x10007b94
   279e4:	4ffff000 	.word	0x4ffff000
   279e8:	40020000 	.word	0x40020000
   279ec:	40021000 	.word	0x40021000
   279f0:	40020018 	.word	0x40020018

000279f4 <am_hal_queue_init>:
   279f4:	b410      	push	{r4}
   279f6:	2400      	movs	r4, #0
   279f8:	e9c0 4400 	strd	r4, r4, [r0]
   279fc:	e9c0 4302 	strd	r4, r3, [r0, #8]
   27a00:	e9c0 2104 	strd	r2, r1, [r0, #16]
   27a04:	f85d 4b04 	ldr.w	r4, [sp], #4
   27a08:	4770      	bx	lr
   27a0a:	bf00      	nop

00027a0c <am_hal_queue_item_add>:
   27a0c:	b570      	push	{r4, r5, r6, lr}
   27a0e:	6905      	ldr	r5, [r0, #16]
   27a10:	b082      	sub	sp, #8
   27a12:	4604      	mov	r4, r0
   27a14:	fb02 f505 	mul.w	r5, r2, r5
   27a18:	460e      	mov	r6, r1
   27a1a:	f7ff fdc7 	bl	275ac <am_hal_interrupt_master_disable>
   27a1e:	68e2      	ldr	r2, [r4, #12]
   27a20:	9001      	str	r0, [sp, #4]
   27a22:	68a0      	ldr	r0, [r4, #8]
   27a24:	1a13      	subs	r3, r2, r0
   27a26:	42ab      	cmp	r3, r5
   27a28:	d31c      	bcc.n	27a64 <am_hal_queue_item_add+0x58>
   27a2a:	b195      	cbz	r5, 27a52 <am_hal_queue_item_add+0x46>
   27a2c:	6823      	ldr	r3, [r4, #0]
   27a2e:	b306      	cbz	r6, 27a72 <am_hal_queue_item_add+0x66>
   27a30:	1e71      	subs	r1, r6, #1
   27a32:	194e      	adds	r6, r1, r5
   27a34:	6962      	ldr	r2, [r4, #20]
   27a36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   27a3a:	54d0      	strb	r0, [r2, r3]
   27a3c:	6823      	ldr	r3, [r4, #0]
   27a3e:	68e0      	ldr	r0, [r4, #12]
   27a40:	3301      	adds	r3, #1
   27a42:	428e      	cmp	r6, r1
   27a44:	fbb3 f2f0 	udiv	r2, r3, r0
   27a48:	fb00 3312 	mls	r3, r0, r2, r3
   27a4c:	6023      	str	r3, [r4, #0]
   27a4e:	d1f1      	bne.n	27a34 <am_hal_queue_item_add+0x28>
   27a50:	68a0      	ldr	r0, [r4, #8]
   27a52:	4405      	add	r5, r0
   27a54:	60a5      	str	r5, [r4, #8]
   27a56:	9801      	ldr	r0, [sp, #4]
   27a58:	f7ff fdac 	bl	275b4 <am_hal_interrupt_master_set>
   27a5c:	2401      	movs	r4, #1
   27a5e:	4620      	mov	r0, r4
   27a60:	b002      	add	sp, #8
   27a62:	bd70      	pop	{r4, r5, r6, pc}
   27a64:	9801      	ldr	r0, [sp, #4]
   27a66:	f7ff fda5 	bl	275b4 <am_hal_interrupt_master_set>
   27a6a:	2400      	movs	r4, #0
   27a6c:	4620      	mov	r0, r4
   27a6e:	b002      	add	sp, #8
   27a70:	bd70      	pop	{r4, r5, r6, pc}
   27a72:	4631      	mov	r1, r6
   27a74:	3101      	adds	r1, #1
   27a76:	3301      	adds	r3, #1
   27a78:	428d      	cmp	r5, r1
   27a7a:	fbb3 f6f2 	udiv	r6, r3, r2
   27a7e:	fb02 3316 	mls	r3, r2, r6, r3
   27a82:	d1f7      	bne.n	27a74 <am_hal_queue_item_add+0x68>
   27a84:	6023      	str	r3, [r4, #0]
   27a86:	e7e4      	b.n	27a52 <am_hal_queue_item_add+0x46>

00027a88 <am_hal_queue_item_get>:
   27a88:	b570      	push	{r4, r5, r6, lr}
   27a8a:	6905      	ldr	r5, [r0, #16]
   27a8c:	4604      	mov	r4, r0
   27a8e:	b082      	sub	sp, #8
   27a90:	fb02 f505 	mul.w	r5, r2, r5
   27a94:	460e      	mov	r6, r1
   27a96:	f7ff fd89 	bl	275ac <am_hal_interrupt_master_disable>
   27a9a:	68a2      	ldr	r2, [r4, #8]
   27a9c:	9001      	str	r0, [sp, #4]
   27a9e:	42aa      	cmp	r2, r5
   27aa0:	d31c      	bcc.n	27adc <am_hal_queue_item_get+0x54>
   27aa2:	b195      	cbz	r5, 27aca <am_hal_queue_item_get+0x42>
   27aa4:	6863      	ldr	r3, [r4, #4]
   27aa6:	b306      	cbz	r6, 27aea <am_hal_queue_item_get+0x62>
   27aa8:	1e71      	subs	r1, r6, #1
   27aaa:	194e      	adds	r6, r1, r5
   27aac:	6962      	ldr	r2, [r4, #20]
   27aae:	5cd3      	ldrb	r3, [r2, r3]
   27ab0:	f801 3f01 	strb.w	r3, [r1, #1]!
   27ab4:	6863      	ldr	r3, [r4, #4]
   27ab6:	68e0      	ldr	r0, [r4, #12]
   27ab8:	3301      	adds	r3, #1
   27aba:	428e      	cmp	r6, r1
   27abc:	fbb3 f2f0 	udiv	r2, r3, r0
   27ac0:	fb00 3312 	mls	r3, r0, r2, r3
   27ac4:	6063      	str	r3, [r4, #4]
   27ac6:	d1f1      	bne.n	27aac <am_hal_queue_item_get+0x24>
   27ac8:	68a2      	ldr	r2, [r4, #8]
   27aca:	9801      	ldr	r0, [sp, #4]
   27acc:	1b52      	subs	r2, r2, r5
   27ace:	60a2      	str	r2, [r4, #8]
   27ad0:	f7ff fd70 	bl	275b4 <am_hal_interrupt_master_set>
   27ad4:	2401      	movs	r4, #1
   27ad6:	4620      	mov	r0, r4
   27ad8:	b002      	add	sp, #8
   27ada:	bd70      	pop	{r4, r5, r6, pc}
   27adc:	9801      	ldr	r0, [sp, #4]
   27ade:	f7ff fd69 	bl	275b4 <am_hal_interrupt_master_set>
   27ae2:	2400      	movs	r4, #0
   27ae4:	4620      	mov	r0, r4
   27ae6:	b002      	add	sp, #8
   27ae8:	bd70      	pop	{r4, r5, r6, pc}
   27aea:	68e0      	ldr	r0, [r4, #12]
   27aec:	4631      	mov	r1, r6
   27aee:	3101      	adds	r1, #1
   27af0:	3301      	adds	r3, #1
   27af2:	42a9      	cmp	r1, r5
   27af4:	fbb3 f6f0 	udiv	r6, r3, r0
   27af8:	fb00 3316 	mls	r3, r0, r6, r3
   27afc:	d1f7      	bne.n	27aee <am_hal_queue_item_get+0x66>
   27afe:	6063      	str	r3, [r4, #4]
   27b00:	e7e3      	b.n	27aca <am_hal_queue_item_get+0x42>
   27b02:	bf00      	nop

00027b04 <am_hal_rtc_osc_disable>:
   27b04:	4a03      	ldr	r2, [pc, #12]	; (27b14 <am_hal_rtc_osc_disable+0x10>)
   27b06:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   27b0a:	f043 0310 	orr.w	r3, r3, #16
   27b0e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   27b12:	4770      	bx	lr
   27b14:	40004200 	.word	0x40004200

00027b18 <am_hal_stimer_config>:
   27b18:	4a03      	ldr	r2, [pc, #12]	; (27b28 <am_hal_stimer_config+0x10>)
   27b1a:	4603      	mov	r3, r0
   27b1c:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   27b20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
   27b24:	4770      	bx	lr
   27b26:	bf00      	nop
   27b28:	40008000 	.word	0x40008000

00027b2c <am_hal_stimer_counter_get>:
   27b2c:	b500      	push	{lr}
   27b2e:	b085      	sub	sp, #20
   27b30:	4805      	ldr	r0, [pc, #20]	; (27b48 <am_hal_stimer_counter_get+0x1c>)
   27b32:	a901      	add	r1, sp, #4
   27b34:	f7ff fbb2 	bl	2729c <am_hal_triple_read>
   27b38:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   27b3c:	4283      	cmp	r3, r0
   27b3e:	bf18      	it	ne
   27b40:	9803      	ldrne	r0, [sp, #12]
   27b42:	b005      	add	sp, #20
   27b44:	f85d fb04 	ldr.w	pc, [sp], #4
   27b48:	40008144 	.word	0x40008144

00027b4c <am_hal_stimer_compare_delta_set>:
   27b4c:	2807      	cmp	r0, #7
   27b4e:	d900      	bls.n	27b52 <am_hal_stimer_compare_delta_set+0x6>
   27b50:	4770      	bx	lr
   27b52:	b530      	push	{r4, r5, lr}
   27b54:	b083      	sub	sp, #12
   27b56:	460c      	mov	r4, r1
   27b58:	4605      	mov	r5, r0
   27b5a:	f7ff fd27 	bl	275ac <am_hal_interrupt_master_disable>
   27b5e:	4a27      	ldr	r2, [pc, #156]	; (27bfc <am_hal_stimer_compare_delta_set+0xb0>)
   27b60:	9001      	str	r0, [sp, #4]
   27b62:	4b27      	ldr	r3, [pc, #156]	; (27c00 <am_hal_stimer_compare_delta_set+0xb4>)
   27b64:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
   27b68:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   27b6c:	f44f 7c80 	mov.w	ip, #256	; 0x100
   27b70:	442b      	add	r3, r5
   27b72:	fa0c f505 	lsl.w	r5, ip, r5
   27b76:	009b      	lsls	r3, r3, #2
   27b78:	ea20 0005 	bic.w	r0, r0, r5
   27b7c:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
   27b80:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   27b84:	601c      	str	r4, [r3, #0]
   27b86:	6818      	ldr	r0, [r3, #0]
   27b88:	4422      	add	r2, r4
   27b8a:	eba0 0c02 	sub.w	ip, r0, r2
   27b8e:	f1bc 0f00 	cmp.w	ip, #0
   27b92:	db03      	blt.n	27b9c <am_hal_stimer_compare_delta_set+0x50>
   27b94:	320a      	adds	r2, #10
   27b96:	1a82      	subs	r2, r0, r2
   27b98:	2a00      	cmp	r2, #0
   27b9a:	dd22      	ble.n	27be2 <am_hal_stimer_compare_delta_set+0x96>
   27b9c:	4a17      	ldr	r2, [pc, #92]	; (27bfc <am_hal_stimer_compare_delta_set+0xb0>)
   27b9e:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   27ba2:	601c      	str	r4, [r3, #0]
   27ba4:	6818      	ldr	r0, [r3, #0]
   27ba6:	4422      	add	r2, r4
   27ba8:	eba0 0c02 	sub.w	ip, r0, r2
   27bac:	f1bc 0f00 	cmp.w	ip, #0
   27bb0:	db03      	blt.n	27bba <am_hal_stimer_compare_delta_set+0x6e>
   27bb2:	320a      	adds	r2, #10
   27bb4:	1a82      	subs	r2, r0, r2
   27bb6:	2a00      	cmp	r2, #0
   27bb8:	dd13      	ble.n	27be2 <am_hal_stimer_compare_delta_set+0x96>
   27bba:	4a10      	ldr	r2, [pc, #64]	; (27bfc <am_hal_stimer_compare_delta_set+0xb0>)
   27bbc:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   27bc0:	601c      	str	r4, [r3, #0]
   27bc2:	6818      	ldr	r0, [r3, #0]
   27bc4:	4422      	add	r2, r4
   27bc6:	eba0 0c02 	sub.w	ip, r0, r2
   27bca:	f1bc 0f00 	cmp.w	ip, #0
   27bce:	db03      	blt.n	27bd8 <am_hal_stimer_compare_delta_set+0x8c>
   27bd0:	320a      	adds	r2, #10
   27bd2:	1a82      	subs	r2, r0, r2
   27bd4:	2a00      	cmp	r2, #0
   27bd6:	dd04      	ble.n	27be2 <am_hal_stimer_compare_delta_set+0x96>
   27bd8:	4a08      	ldr	r2, [pc, #32]	; (27bfc <am_hal_stimer_compare_delta_set+0xb0>)
   27bda:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   27bde:	601c      	str	r4, [r3, #0]
   27be0:	681b      	ldr	r3, [r3, #0]
   27be2:	4b06      	ldr	r3, [pc, #24]	; (27bfc <am_hal_stimer_compare_delta_set+0xb0>)
   27be4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   27be8:	400d      	ands	r5, r1
   27bea:	4315      	orrs	r5, r2
   27bec:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
   27bf0:	9801      	ldr	r0, [sp, #4]
   27bf2:	b003      	add	sp, #12
   27bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   27bf8:	f7ff bcdc 	b.w	275b4 <am_hal_interrupt_master_set>
   27bfc:	40008000 	.word	0x40008000
   27c00:	10002054 	.word	0x10002054

00027c04 <am_hal_stimer_int_enable>:
   27c04:	4a03      	ldr	r2, [pc, #12]	; (27c14 <am_hal_stimer_int_enable+0x10>)
   27c06:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   27c0a:	4318      	orrs	r0, r3
   27c0c:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   27c10:	4770      	bx	lr
   27c12:	bf00      	nop
   27c14:	40008000 	.word	0x40008000

00027c18 <am_hal_stimer_int_clear>:
   27c18:	4b01      	ldr	r3, [pc, #4]	; (27c20 <am_hal_stimer_int_clear+0x8>)
   27c1a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   27c1e:	4770      	bx	lr
   27c20:	40008000 	.word	0x40008000

00027c24 <am_hal_stimer_int_status_get>:
   27c24:	4a04      	ldr	r2, [pc, #16]	; (27c38 <am_hal_stimer_int_status_get+0x14>)
   27c26:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   27c2a:	b110      	cbz	r0, 27c32 <am_hal_stimer_int_status_get+0xe>
   27c2c:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   27c30:	4013      	ands	r3, r2
   27c32:	4618      	mov	r0, r3
   27c34:	4770      	bx	lr
   27c36:	bf00      	nop
   27c38:	40008000 	.word	0x40008000

00027c3c <am_hal_sysctrl_sleep>:
   27c3c:	b510      	push	{r4, lr}
   27c3e:	b082      	sub	sp, #8
   27c40:	4604      	mov	r4, r0
   27c42:	f7ff fcb3 	bl	275ac <am_hal_interrupt_master_disable>
   27c46:	9001      	str	r0, [sp, #4]
   27c48:	b124      	cbz	r4, 27c54 <am_hal_sysctrl_sleep+0x18>
   27c4a:	4b12      	ldr	r3, [pc, #72]	; (27c94 <am_hal_sysctrl_sleep+0x58>)
   27c4c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   27c50:	07db      	lsls	r3, r3, #31
   27c52:	d513      	bpl.n	27c7c <am_hal_sysctrl_sleep+0x40>
   27c54:	4a10      	ldr	r2, [pc, #64]	; (27c98 <am_hal_sysctrl_sleep+0x5c>)
   27c56:	6913      	ldr	r3, [r2, #16]
   27c58:	f023 0304 	bic.w	r3, r3, #4
   27c5c:	6113      	str	r3, [r2, #16]
   27c5e:	f3bf 8f4f 	dsb	sy
   27c62:	4a0e      	ldr	r2, [pc, #56]	; (27c9c <am_hal_sysctrl_sleep+0x60>)
   27c64:	4b0e      	ldr	r3, [pc, #56]	; (27ca0 <am_hal_sysctrl_sleep+0x64>)
   27c66:	6812      	ldr	r2, [r2, #0]
   27c68:	601a      	str	r2, [r3, #0]
   27c6a:	bf30      	wfi
   27c6c:	f3bf 8f6f 	isb	sy
   27c70:	9801      	ldr	r0, [sp, #4]
   27c72:	b002      	add	sp, #8
   27c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27c78:	f7ff bc9c 	b.w	275b4 <am_hal_interrupt_master_set>
   27c7c:	4b09      	ldr	r3, [pc, #36]	; (27ca4 <am_hal_sysctrl_sleep+0x68>)
   27c7e:	681a      	ldr	r2, [r3, #0]
   27c80:	b912      	cbnz	r2, 27c88 <am_hal_sysctrl_sleep+0x4c>
   27c82:	4a09      	ldr	r2, [pc, #36]	; (27ca8 <am_hal_sysctrl_sleep+0x6c>)
   27c84:	6812      	ldr	r2, [r2, #0]
   27c86:	601a      	str	r2, [r3, #0]
   27c88:	4a03      	ldr	r2, [pc, #12]	; (27c98 <am_hal_sysctrl_sleep+0x5c>)
   27c8a:	6913      	ldr	r3, [r2, #16]
   27c8c:	f043 0304 	orr.w	r3, r3, #4
   27c90:	6113      	str	r3, [r2, #16]
   27c92:	e7e4      	b.n	27c5e <am_hal_sysctrl_sleep+0x22>
   27c94:	40020000 	.word	0x40020000
   27c98:	e000ed00 	.word	0xe000ed00
   27c9c:	5fff0000 	.word	0x5fff0000
   27ca0:	10007b98 	.word	0x10007b98
   27ca4:	10007b94 	.word	0x10007b94
   27ca8:	4ffff000 	.word	0x4ffff000

00027cac <am_hal_sysctrl_fpu_enable>:
   27cac:	4b02      	ldr	r3, [pc, #8]	; (27cb8 <am_hal_sysctrl_fpu_enable+0xc>)
   27cae:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   27cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   27cb6:	4770      	bx	lr
   27cb8:	e000ed00 	.word	0xe000ed00

00027cbc <am_hal_sysctrl_fpu_stacking_enable>:
   27cbc:	b510      	push	{r4, lr}
   27cbe:	b082      	sub	sp, #8
   27cc0:	4604      	mov	r4, r0
   27cc2:	f7ff fc73 	bl	275ac <am_hal_interrupt_master_disable>
   27cc6:	4909      	ldr	r1, [pc, #36]	; (27cec <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   27cc8:	9001      	str	r0, [sp, #4]
   27cca:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   27ccc:	2c00      	cmp	r4, #0
   27cce:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
   27cd2:	bf14      	ite	ne
   27cd4:	f04f 4340 	movne.w	r3, #3221225472	; 0xc0000000
   27cd8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
   27cdc:	4313      	orrs	r3, r2
   27cde:	634b      	str	r3, [r1, #52]	; 0x34
   27ce0:	9801      	ldr	r0, [sp, #4]
   27ce2:	b002      	add	sp, #8
   27ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27ce8:	f7ff bc64 	b.w	275b4 <am_hal_interrupt_master_set>
   27cec:	e000ef00 	.word	0xe000ef00
   27cf0:	9183886c 	.word	0x9183886c
   27cf4:	38a5f5aa 	.word	0x38a5f5aa
   27cf8:	db0b3760 	.word	0xdb0b3760
   27cfc:	be83605a 	.word	0xbe83605a
   27d00:	69646152 	.word	0x69646152
   27d04:	7361546f 	.word	0x7361546f
   27d08:	0000006b 	.word	0x0000006b
   27d0c:	75746553 	.word	0x75746553
   27d10:	00000070 	.word	0x00000070
   27d14:	20465357 	.word	0x20465357
   27d18:	656d6954 	.word	0x656d6954
   27d1c:	00000072 	.word	0x00000072
   27d20:	00000004 	.word	0x00000004
   27d24:	00000020 	.word	0x00000020
   27d28:	00000020 	.word	0x00000020
   27d2c:	00000002 	.word	0x00000002
   27d30:	00000000 	.word	0x00000000
   27d34:	00000032 	.word	0x00000032
   27d38:	00010101 	.word	0x00010101
   27d3c:	454c4449 	.word	0x454c4449
   27d40:	00000000 	.word	0x00000000
   27d44:	20726d54 	.word	0x20726d54
   27d48:	00637653 	.word	0x00637653
   27d4c:	00000000 	.word	0x00000000

00027d50 <calc128Zeros>:
	...

00027d60 <hciEventMask>:
   27d60:	02008890 20008000                       ....... 

00027d68 <hciLeEventMask>:
   27d68:	007fffff 00000000                       ........

00027d70 <hciEventMaskPage2>:
   27d70:	00800000 00000000                       ........

00027d78 <hciEvtParseFcnTbl>:
   27d78:	00000000 0000e4ad 0000e5b1 0000e6bd     ................
   27d88:	0000e717 0000e7c5 00000000 0000e7eb     ................
   27d98:	0000e847 0000e8a7 0000e8f3 0000e98d     G...............
   27da8:	0000e9ed 0000ea3b 0000ea89 0000ead7     ....;...........
   27db8:	0000eb31 0000eba3 0000ebd5 0000ec2f     1.........../...
   27dc8:	0000ec55 0000ece3 0000ed09 0000ed2f     U.........../...
   27dd8:	0000ed55 0000ed91 0000edcd 0000ec73     U...........s...
   27de8:	0000ecab 0000edf3 0000ee41 0000ee8f     ........A.......
   27df8:	0000eef5 0000ef1b 0000ef69 0000f00f     ........i.......
   27e08:	0000f0c9 0000f183 0000f1bb 0000f1f3     ................
   27e18:	0000f241 0000f27b 0000f2e1 0000f307     A...{...........
   27e28:	00000000 0000f635 0000f647 0000f6ad     ....5...G.......
   27e38:	0000f6ed 00000000 0000fc49 00000000     ........I.......
   27e48:	0000f875 0000f875 0000f875 0000f875     u...u...u...u...
   27e58:	0000f875 00000000 00000000 00000000     u...............
	...
   27e74:	0000fb11 0000fb5f 0000fbad 0000fbfb     ...._...........

00027e84 <hciEvtCbackLen>:
   27e84:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   27e94:	06080610 06060606 16060c0c 0a08080e     ................
   27ea4:	0e0e0806 0826460e 0a060a06 0c0a0424     .....F&.....$...
   27eb4:	04061016 04040404 04040404 08041c04     ................
   27ec4:	00080808                                ....

00027ec8 <smprScActionTbl>:
   27ec8:	00011645 00013641 0001365f 0001367f     E...A6.._6...6..
   27ed8:	00011079 00011761 00010ffd 00011a2d     y...a.......-...
   27ee8:	00011a67 00011a89 00011ae9 00011b1f     g...............
   27ef8:	00011f73 00012043 0001200b 00011fc7     s...C ... ......
   27f08:	00011fe9 00011fb3 00010ad5 00010b1d     ................
   27f18:	00010be1 00010cd5 00011099 000110ed     ................
   27f28:	0001110b 0001113b 00013745 0001390b     ....;...E7...9..
   27f38:	00013979 0001116d 00011197 000111b7     y9..m...........
   27f48:	000111d7 0001122f 0001124d 000112a3     ..../...M.......
   27f58:	00011327 0001133d 000113e9 0001144f     '...=.......O...
   27f68:	00011481 000114b5 00013a81 00013af5     .........:...:..
   27f78:	00013bb1 00013c6d 00013d31 000114f1     .;..m<..1=......
   27f88:	00010d05 00010d41 00010dd1 00010e67     ....A.......g...
   27f98:	00010fb1 00010ed1                       ........

00027fa0 <smprScStateTblCommon>:
   27fa0:	0702000a 00030200 02270f03 00000000     ..........'.....

00027fb0 <smprScStateTblIdle>:
   27fb0:	0a120105 02060100 00000713 0f010003     ................
	...

00027fc8 <smprScStateTblApiPairReq>:
   27fc8:	0601000a 00071302 01000302 09010008     ................
   27fd8:	00000100 00000000                       ........

00027fe0 <smprScStateTblApiPairRsp>:
   27fe0:	00140302 00000000                       ........

00027fe8 <smprScStateTblModeSelect>:
   27fe8:	12000511 0000001c 00000000              ............

00027ff4 <smprScStateTblLescPin>:
   27ff4:	00060404 00000000                       ........

00027ffc <smprScStateTblPubKey>:
   27ffc:	00040606 00000000                       ........

00028004 <smprScStateTblAuthSelect>:
   28004:	14160713 14151a0c 00000024              ........$...

00028010 <smprScStateTblJwNcSetup>:
   28010:	0017081c 00000000                       ........

00028018 <smprScStateTblJwNcWaitRand>:
   28018:	00180906 00000000                       ........

00028020 <smprScStateTblJwNcCalcG2>:
   28020:	00190a1c 00000000                       ........

00028028 <smprScStateTblJwNcWaitUser>:
   28028:	06281516 260d270b 0000000c              ..(..'.&....

00028034 <smprScStateTblJwNcWaitUserDhCheckRcvd>:
   28034:	0d291616 00000c26 00000000              ..).&.......

00028040 <smprScStateTblPassKeyKeypress>:
   28040:	1e1b0c06 0c171d0d 060e041c 00000000     ................

00028050 <smprScStateTblPassWaitAuthRsp>:
   28050:	001f0f04 00000000                       ........

00028058 <smprScStateTblPasskeyWaitCnf>:
   28058:	001e0f06 00000000                       ........

00028060 <smprScStateTblPasskeyCalc>:
   28060:	0021101c 00000000                       ..!.....

00028068 <smprScStateTblPasskeyRand>:
   28068:	00221106 00000000                       ..".....

00028070 <smprScStateTblPasskeyCheck>:
   28070:	0023121c 00000000                       ..#.....

00028078 <smprScStateTblPasskeyRepeat>:
   28078:	1b000e1a 260d2815 0000000c              .....(.&....

00028084 <smprScStateTblOobWaitRand>:
   28084:	00251306 00000000                       ..%.....

0002808c <smprScStateTblOobSendRand>:
   2808c:	0026151c 00000000                       ..&.....

00028094 <smprScStateTblWaitDhCheck>:
   28094:	0d291606 00000c26 00000000              ..).&.......

000280a0 <smprScStateTblCalcDHKey>:
   280a0:	002a1719 00000000                       ..*.....

000280a8 <smprScStateTblCalcF5TKey>:
   280a8:	0d2b181c 00000c26 00000000              ..+.&.......

000280b4 <smprScStateTblCalcF5MacKey>:
   280b4:	002c191c 00000000                       ..,.....

000280bc <smprScStateTblCalcF5LTK>:
   280bc:	002d1a1c 00000000                       ..-.....

000280c4 <smprScStateTblDhCalcF6Ea>:
   280c4:	002e1b1c 00000000                       ........

000280cc <smprScStateTblDhCalcF6Eb>:
   280cc:	002f241c 00000000                       .$/.....

000280d4 <smprStateTblPinPair1>:
   280d4:	06051d04 0000151d 00000000              ............

000280e0 <smprStateTblPinPair2>:
   280e0:	06071e04 0000301e 00000000              .....0......

000280ec <smprStateTblCnfCalc1>:
   280ec:	00081f0b 00000000                       ........

000280f4 <smprStateTblCnfCalc2>:
   280f4:	0009200b 00000000                       . ......

000280fc <smprStateTblPairRand>:
   280fc:	000a2106 00000000                       .!......

00028104 <smprStateTblCnfVerCalc1>:
   28104:	000b220b 00000000                       ."......

0002810c <smprStateTblCnfVerCalc2>:
   2810c:	0031230b 00000000                       .#1.....

00028114 <smprScStateTblStkCalc>:
   28114:	0d32240b 00000c26 00000000              .$2.&.......

00028120 <smprScStateTblEncrypt>:
   28120:	09332508 24030200 03001d00 000c260d     .%3....$.....&..
   28130:	00000000                                ....

00028134 <smprScStateTblKeyDist>:
   28134:	0c342506 000e3525 0025030d 00000000     .%4.%5....%.....

00028144 <smprScStateTblAttempts>:
   28144:	0f0e0010 26060227 0f000511 0301000a     ....'..&........
   28154:	26070100 00000000                       ...&....

0002815c <smprScStateTblRspTo>:
   2815c:	0701000a 27030027 00270f00 00102705     ....'..'..'..'..
   2816c:	00000000                                ....

00028170 <smprScStateTbl>:
   28170:	00027fb0 00027fc8 00027fe0 00027fe8     ................
   28180:	00027ffc 00027ff4 00028004 00028010     ................
   28190:	00028018 00028020 00028028 00028034     .... ...(...4...
   281a0:	00028040 00028050 00028058 00028060     @...P...X...`...
   281b0:	00028068 00028070 00028078 0002808c     h...p...x.......
   281c0:	00028084 00028094 000280a0 000280a8     ................
   281d0:	000280b4 000280bc 000280c4 000280cc     ................
   281e0:	000280d4 000280e0 000280ec 000280f4     ................
   281f0:	000280fc 00028104 0002810c 00028114     ................
   28200:	00028120 00028134 00028144 0002815c      ...4...D...\...

00028210 <smprScSmIf>:
   28210:	00028170 00027ec8 00027fa0              p....~......

0002821c <smprActionTbl>:
   2821c:	00011645 000116af 0001170b 0001173d     E...........=...
   2822c:	00011761 00011a2d 00011a67 00011a89     a...-...g.......
   2823c:	00011ae9 00011b1f 00011f73 00011fb3     ........s.......
   2824c:	0001200b 00011fc7 00011fe9 00012043     . ..........C ..
   2825c:	00010ad5 00010b1d 00010be1 00010cd5     ................
   2826c:	00010d05 00010d41 00010dd1 00010e67     ....A.......g...
   2827c:	00010ed1 00010fb1                       ........

00028284 <smprStateTblCommon>:
   28284:	0702000a 00030200 020e0f03 00000000     ................

00028294 <smprStateTblIdle>:
   28294:	0a100105 02060100 00000711 0f010003     ................
	...

000282ac <smprStateTblApiPairReq>:
   282ac:	0601000a 00071102 01000302 09010008     ................
   282bc:	00000100 00000000                       ........

000282c4 <smprStateTblApiPairRsp>:
   282c4:	00120302 00000000                       ........

000282cc <smprStateTblPinPair1>:
   282cc:	06040404 00001304 00000000              ............

000282d8 <smprStateTblPinPair2>:
   282d8:	06050504 00001405 00000000              ............

000282e4 <smprStateTblCnfCalc1>:
   282e4:	0006060b 00000000                       ........

000282ec <smprStateTblCnfCalc2>:
   282ec:	0007070b 00000000                       ........

000282f4 <smprStateTblPairRand>:
   282f4:	00080806 00000000                       ........

000282fc <smprStateTblCnfVerCalc1>:
   282fc:	0009090b 00000000                       ........

00028304 <smprStateTblCnfVerCalc2>:
   28304:	00150a0b 00000000                       ........

0002830c <smprStateTblStkCalc>:
   2830c:	0d160b0b 00000a0d 00000000              ............

00028318 <smprStateTblEncrypt>:
   28318:	09170c08 0b030200 00000000              ............

00028324 <smprStateTblKeyDist>:
   28324:	06180c0c 000e190c 000c030f 00000000     ................

00028334 <smprStateTblAttempts>:
   28334:	0f0c0010 0d06020e 0d00050b 0301000a     ................
   28344:	0d070100 00000000                       ........

0002834c <smprStateTblRspTo>:
   2834c:	0701000a 0e03000e 000e0f00 000e0e05     ................
   2835c:	00000000                                ....

00028360 <smprStateTbl>:
   28360:	00028294 000282ac 000282c4 000282cc     ................
   28370:	000282d8 000282e4 000282ec 000282f4     ................
   28380:	000282fc 00028304 0002830c 00028318     ................
   28390:	00028324 00028334 0002834c              $...4...L...

0002839c <smprSmIf>:
   2839c:	00028360 0002821c 00028284              `...........

000283a8 <smpPktLenTbl>:
   283a8:	11070700 0b110211 02110811 00021141     ............A...

000283b8 <smpScF5Key>:
   283b8:	656c7462                                btle

000283bc <dmAdvAct>:
   283bc:	00014745 00014785 000147c9 00014809     EG...G...G...H..
   283cc:	00014841 0001484b 00014855 00014861     AH..KH..UH..aH..

000283dc <dmAdvFcnIf>:
   283dc:	00014889 000148d5 000149e9              .H...H...I..

000283e8 <dmConnSpecDefaults>:
   283e8:	00280018 07d00000 00000000              ..(.........

000283f4 <dmConnActSetMain>:
   283f4:	00014da5 00014db1 00014dd1 00014ec1     .M...M...M...N..
   28404:	00014f19 00014f65                       .O..eO..

0002840c <dmConnFcnIf>:
   2840c:	00014f89 0001508b 00015061              .O...P..aP..

00028418 <dmConn2FcnIf>:
   28418:	00015fd9 000151f9 0001512d              ._...Q..-Q..

00028424 <dmConnActSetSlave>:
   28424:	00015c69 00015c8d 00015b45 00015ca9     i\...\..E[...\..
   28434:	00015cc5 00015ba9                       .\...[..

0002843c <dmConnStateTbl>:
   2843c:	00001001 00002002 00000000 00000000     ..... ..........
   2844c:	00002303 00000000 00010000 00011104     .#..............
   2845c:	00010001 00010001 02030300 00010300     ................
   2846c:	00010001 21000002 00020002 00020002     .......!........
   2847c:	24000002 24002303 00020002 00030002     ...$.#.$........
   2848c:	00030104 22031203 25031303 00030003     ......."...%....
   2849c:	05030400 05030003 00040004 00040004     ................
   284ac:	00040004 04000004 04000104 00040004     ................
   284bc:	00000004                                ....

000284c0 <dmDevFcnIf>:
   284c0:	00015fd9 00015e4d 00015e91              ._..M^...^..

000284cc <dmHciToIdTbl>:
   284cc:	03030307 04020303 04040404 05050505     ................
   284dc:	07070705 06060607 05060606 07040405     ................
   284ec:	04070407 04050504 09090904 00000202     ................
   284fc:	070b0b0b 00020002 0c0b010a 0d0d0d0c     ................
   2850c:	0d0d0d0d 0d100f0f                       ........

00028514 <dmEvtCbackLen>:
   28514:	00040004 000c0004 00040004 0024001c     ..............$.
   28524:	000e000a 00040006 00040006 00220006     ..............".
   28534:	00080010 00240006 00140064 00040006     ......$.d.......
   28544:	000a000a 00060006 000c0006 0006000c     ................
   28554:	000e000e 00060008 0006000a 0008000a     ................
   28564:	000c000a 00040004 00060024 00160006     ........$.......
   28574:	00060016 001a001a 00080008 00100010     ................
   28584:	001c000e 0008001c 00080008 00080008     ................
   28594:	00080008 000a0008 00040008 00060006     ................

000285a4 <dmFcnDefault>:
   285a4:	00015fd9 00015fdd 00015fdd              ._..._..._..

000285b0 <dmPrivAct>:
   285b0:	00016199 00016221 00016275 000162b5     .a..!b..ub...b..
   285c0:	000162e5 000162f7 00016313 00016339     .b...b...c..9c..
   285d0:	000163c9                                .c..

000285d4 <dmPrivFcnIf>:
   285d4:	00016575 00016429 00016551              ue..)d..Qe..

000285e0 <dmSecFcnIf>:
   285e0:	00016a39 00016749 0001686d              9j..Ig..mh..

000285ec <dmSecLescFcnIf>:
   285ec:	00015fd9 00015fdd 00016a45              ._..._..Ej..

000285f8 <attcFcnIf>:
   285f8:	00017d07 00017d73 00017ed5 00017db1     .}..s}...~...}..

00028608 <attcSendReqTbl>:
   28608:	00000000 00017b05 000179fd 000179fd     .....{...y...y..
   28618:	000179fd 000179a9 000179fd 000179a9     .y...y...y...y..
   28628:	000179fd 000179a9 00017b4b 00017b8d     .y...y..K{...{..
   28638:	000179a9                                .y..

0002863c <attcProcRspTbl>:
   2863c:	000181c5 00018255 000182cd 000188a1     ....U...........
   2864c:	000182cd 00018475 000189b3 00018475     ....u.......u...
   2865c:	000182cd 00018489 00000000 000189f5     ................
   2866c:	00018489                                ....

00028670 <attsIndFcnIf>:
   28670:	0001c00f 0001963f 00019579 000194fd     ....?...y.......

00028680 <attsFcnIf>:
   28680:	00019971 00019b85 00019b25 00019ad9     q.......%.......

00028690 <attsMinPduLen>:
   28690:	07050300 05050305 05030305 01000002     ................
   286a0:	0000000f                                ....

000286a4 <attFcnDefault>:
   286a4:	0001c00f 0001bff9 0001bff9 0001c003     ................

000286b4 <attPrimSvcUuid>:
   286b4:	00002800                                .(..

000286b8 <attChUuid>:
   286b8:	00002803                                .(..

000286bc <attCliChCfgUuid>:
   286bc:	00002902                                .)..

000286c0 <attApChUuid>:
   286c0:	00002a01                                .*..

000286c4 <attScChUuid>:
   286c4:	00002a05                                .*..

000286c8 <attBlChUuid>:
   286c8:	00002a19                                .*..

000286cc <attCarChUuid>:
   286cc:	00002aa6                                .*..

000286d0 <attRsfChUuid>:
   286d0:	00002a54                                T*..

000286d4 <attRsmChUuid>:
   286d4:	00002a53                                S*..

000286d8 <attSlChUuid>:
   286d8:	00002a5d                                ]*..

000286dc <attRpaoChUuid>:
   286dc:	00002ac9                                .*..

000286e0 <attGattCsfChUuid>:
   286e0:	00002b29                                )+..

000286e4 <attGattDbhChUuid>:
   286e4:	00002b2a                                *+..

000286e8 <curve_p>:
   286e8:	ffffffff ffffffff ffffffff 00000000     ................
	...
   28700:	00000001 ffffffff                       ........

00028708 <curve_b>:
   28708:	27d2604b 3bce3c3e cc53b0f6 651d06b0     K`.'><.;..S....e
   28718:	769886bc b3ebbd55 aa3a93e7 5ac635d8     ...vU.....:..5.Z

00028728 <curve_G>:
   28728:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
   28738:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k
   28748:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
   28758:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O

00028768 <curve_n>:
   28768:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
   28778:	ffffffff ffffffff 00000000 ffffffff     ................

00028788 <attCfg>:
   28788:	0000000f 041e01e0                       ........

00028790 <smpCfg>:
   28790:	000001f4 01100703 00000000 0000fa00     ................
   287a0:	0000fa00 00000002                       ........

000287a8 <fitAdvCfg>:
   287a8:	00000000 03200000 00000000              ...... .....

000287b4 <fitSlaveCfg>:
   287b4:	00000001                                ....

000287b8 <fitSecCfg>:
   287b8:	00010009 00000000                       ........

000287c0 <fitUpdateCfg>:
   287c0:	00000bb8 003c0030 02580004 00000005     ....0.<...X.....

000287d0 <fitHrpsCfg>:
   287d0:	00000064                                d...

000287d4 <fitBasCfg>:
   287d4:	0000001e 00640001                       ......d.

000287dc <fitSmpCfg>:
   287dc:	00000bb8 03100703 00000000 0000fa00     ................
   287ec:	0000fa00 00000002                       ........

000287f4 <fitAdvDataDisc>:
   287f4:	02060102 0309000a 1814180d 180f180a     ................

00028804 <fitScanDataDisc>:
   28804:	69460904 00000074                       ..Fit...

0002880c <fitCccSet>:
   2880c:	00020013 00230000 00000001 00010063     ......#.....c...
   2881c:	04a50000 00000001                       ........

00028824 <battValSvc>:
   28824:	                                         ..

00028826 <battLenSvc>:
   28826:	                                         ..

00028828 <battValLvlCh>:
   28828:	19006212                                 .b..*.

0002882e <battLenLvlCh>:
   2882e:	                                         ..

00028830 <battLenLvl>:
   28830:	                                         ..

00028832 <battLenLvlChCcc>:
   28832:	                                         ..

00028834 <battList>:
   28834:	000286b4 00028824 00028826 01000002     ....$...&.......
   28844:	000286b8 00028828 0002882e 01000005     ....(...........
   28854:	000286c8 1000790c 00028830 01040001     .....y..0.......
   28864:	000286bc 10007910 00028832 11200002     .....y..2..... .

00028874 <gapValSvc>:
   28874:	                                         ..

00028876 <gapLenSvc>:
   28876:	                                         ..

00028878 <gapValApCh>:
   28878:	01000502                                 ....*.

0002887e <gapLenApCh>:
   2887e:	                                         ..

00028880 <gapLenAp>:
   28880:	00000002                                ....

00028884 <gapValCarCh>:
   28884:	a6000702                                 ....*.

0002888a <gapLenCarCh>:
   2888a:	                                         ..

0002888c <gapLenCar>:
   2888c:	00000001                                ....

00028890 <gapValRpaoCh>:
   28890:	c9000902                                 ....*.

00028896 <gapLenRpaoCh>:
   28896:	                                         ..

00028898 <gapLenRpao>:
   28898:	00000001                                ....

0002889c <gapList>:
   2889c:	000286b4 00028874 00028876 01000002     ....t...v.......
   288ac:	000286b8 00028878 0002887e 01000005     ....x...~.......
   288bc:	000286c0 10007914 00028880 01000002     .....y..........
   288cc:	000286b8 00028884 0002888a 01000005     ................
   288dc:	000286cc 10007918 0002888c 01000001     .....y..........
   288ec:	000286b8 00028890 00028896 01000005     ................
   288fc:	000286dc 1000791c 00028898 01000001     .....y..........

0002890c <gattValSvc>:
   2890c:	                                         ..

0002890e <gattLenSvc>:
   2890e:	                                         ..

00028910 <gattValScCh>:
   28910:	05001220                                  ...*.

00028916 <gattLenScCh>:
   28916:	                                         ..

00028918 <gattValSc>:
   28918:	ffff0001                                ....

0002891c <gattLenSc>:
   2891c:	                                         ..

0002891e <gattLenScChCcc>:
   2891e:	                                         ..

00028920 <gattValCsfCh>:
   28920:	29001502                                 ...)+.

00028926 <gattLenCsfCh>:
   28926:	                                         ..

00028928 <gattLenCsf>:
   28928:	00000001                                ....

0002892c <gattValDbhCh>:
   2892c:	2a001702                                 ...*+.

00028932 <gattLenDbhCh>:
   28932:	                                         ..

00028934 <gattLenDbh>:
   28934:	00000010                                ....

00028938 <gattList>:
   28938:	000286b4 0002890c 0002890e 01000002     ................
   28948:	000286b8 00028910 00028916 01000005     ................
   28958:	000286c4 00028918 0002891c 00000004     ................
   28968:	000286bc 10007920 0002891e 11200002     .... y........ .
   28978:	000286b8 00028920 00028926 01000005     .... ...&.......
   28988:	000286e0 10007924 00028928 11060001     ....$y..(.......
   28998:	000286b8 0002892c 00028932 01000005     ....,...2.......
   289a8:	000286e4 10007928 00028934 01040010     ....(y..4.......

000289b8 <disValSvc>:
   289b8:	                                         ..

000289ba <disLenSvc>:
   289ba:	                                         ..

000289bc <disValMfrCh>:
   289bc:	29003202                                 .2.)*.

000289c2 <disLenMfrCh>:
   289c2:	                                         ..

000289c4 <disUuMfr>:
   289c4:	00002a29                                )*..

000289c8 <disValSidCh>:
   289c8:	23003402                                 .4.#*.

000289ce <disLenSidCh>:
   289ce:	                                         ..

000289d0 <disUuSid>:
   289d0:	                                         #*

000289d2 <disLenSid>:
   289d2:	                                         ..

000289d4 <disValMnCh>:
   289d4:	24003602                                 .6.$*.

000289da <disLenMnCh>:
   289da:	                                         ..

000289dc <disUuMn>:
   289dc:	00002a24                                $*..

000289e0 <disValSnCh>:
   289e0:	25003802                                 .8.%*.

000289e6 <disLenSnCh>:
   289e6:	                                         ..

000289e8 <disUuSn>:
   289e8:	00002a25                                %*..

000289ec <disValFwrCh>:
   289ec:	26003a02                                 .:.&*.

000289f2 <disLenFwrCh>:
   289f2:	                                         ..

000289f4 <disUuFwr>:
   289f4:	00002a26                                &*..

000289f8 <disValHwrCh>:
   289f8:	27003c02                                 .<.'*.

000289fe <disLenHwrCh>:
   289fe:	                                         ..

00028a00 <disUuHwr>:
   28a00:	00002a27                                '*..

00028a04 <disValSwrCh>:
   28a04:	28003e02                                 .>.(*.

00028a0a <disLenSwrCh>:
   28a0a:	                                         ..

00028a0c <disUuSwr>:
   28a0c:	00002a28                                (*..

00028a10 <disValRcdCh>:
   28a10:	2a004002                                 .@.**.

00028a16 <disLenRcdCh>:
   28a16:	                                         ..

00028a18 <disUuRcd>:
   28a18:	                                         **

00028a1a <disLenRcd>:
   28a1a:	                                         ..

00028a1c <disList>:
   28a1c:	000286b4 000289b8 000289ba 01000002     ................
   28a2c:	000286b8 000289bc 000289c2 01000005     ................
   28a3c:	000289c4 10002c04 10002c18 01080014     .....,...,......
   28a4c:	000286b8 000289c8 000289ce 01000005     ................
   28a5c:	000289d0 10002c1c 000289d2 01000008     .....,..........
   28a6c:	000286b8 000289d4 000289da 01000005     ................
   28a7c:	000289dc 10002c24 10002c38 01080014     ....$,..8,......
   28a8c:	000286b8 000289e0 000289e6 01000005     ................
   28a9c:	000289e8 10002c3c 10002c50 01080014     ....<,..P,......
   28aac:	000286b8 000289ec 000289f2 01000005     ................
   28abc:	000289f4 10002c54 10002c64 01080010     ....T,..d,......
   28acc:	000286b8 000289f8 000289fe 01000005     ................
   28adc:	00028a00 10002c68 10002c78 01080010     ....h,..x,......
   28aec:	000286b8 00028a04 00028a0a 01000005     ................
   28afc:	00028a0c 10002c7c 10002c8c 01080010     ....|,...,......
   28b0c:	000286b8 00028a10 00028a16 01000005     ................
   28b1c:	00028a18 10007938 00028a1a 01000006     ....8y..........

00028b2c <svcHrmUuid>:
   28b2c:	00002a37                                7*..

00028b30 <svcSlUuid>:
   28b30:	00002a38                                8*..

00028b34 <svcCpUuid>:
   28b34:	00002a39                                9*..

00028b38 <hrsValSvc>:
   28b38:	                                         ..

00028b3a <hrsLenSvc>:
   28b3a:	                                         ..

00028b3c <hrsValHrmCh>:
   28b3c:	37002210                                 .".7*.

00028b42 <hrsLenHrmCh>:
   28b42:	                                         ..

00028b44 <hrsValHrm>:
	...

00028b46 <hrsLenHrm>:
   28b46:	                                         ..

00028b48 <hrsLenHrmChCcc>:
   28b48:	00000002                                ....

00028b4c <hrsValSlCh>:
   28b4c:	38002502                                 .%.8*.

00028b52 <hrsLenSlCh>:
   28b52:	                                         ..

00028b54 <hrsLenSl>:
   28b54:	00000001                                ....

00028b58 <hrsValCpCh>:
   28b58:	39002708                                 .'.9*.

00028b5e <hrsLenCpCh>:
   28b5e:	                                         ..

00028b60 <hrsValCp>:
	...

00028b62 <hrsLenCp>:
   28b62:	                                         ..

00028b64 <hrsList>:
   28b64:	000286b4 00028b38 00028b3a 01000002     ....8...:.......
   28b74:	000286b8 00028b3c 00028b42 01000005     ....<...B.......
   28b84:	00028b2c 00028b44 00028b46 00000001     ,...D...F.......
   28b94:	000286bc 10007940 00028b48 11200002     ....@y..H..... .
   28ba4:	000286b8 00028b4c 00028b52 01000005     ....L...R.......
   28bb4:	00028b30 10002ca4 00028b54 01000001     0....,..T.......
   28bc4:	000286b8 00028b58 00028b5e 01000005     ....X...^.......
   28bd4:	00028b34 00028b60 00028b62 10020001     4...`...b.......

00028be4 <rscsValSvc>:
   28be4:	                                         ..

00028be6 <rscsLenSvc>:
   28be6:	                                         ..

00028be8 <rscsValFeatureCh>:
   28be8:	5404a202                                 ...T*.

00028bee <rscsLenFeatureCh>:
   28bee:	                                         ..

00028bf0 <rscsLenFeature>:
   28bf0:	00000002                                ....

00028bf4 <rscsValMeasurementCh>:
   28bf4:	5304a410                                 ...S*.

00028bfa <rscsLenMeasurementCh>:
   28bfa:	                                         ..

00028bfc <rscsValMeasurement>:
	...

00028bfe <rscsLenMeasurement>:
   28bfe:	                                         ..

00028c00 <rscsLenMeasurementChCcc>:
   28c00:	00000002                                ....

00028c04 <rscsValLocationCh>:
   28c04:	5d04a702                                 ...]*.

00028c0a <rscsLenLocationCh>:
   28c0a:	                                         ..

00028c0c <rscsLenLocation>:
   28c0c:	00000001                                ....

00028c10 <rscsList>:
   28c10:	000286b4 00028be4 00028be6 01000002     ................
   28c20:	000286b8 00028be8 00028bee 01000005     ................
   28c30:	000286d0 10002cbc 00028bf0 09000002     .....,..........
   28c40:	000286b8 00028bf4 00028bfa 01000005     ................
   28c50:	000286d4 00028bfc 00028bfe 00000001     ................
   28c60:	000286bc 10007944 00028c00 91200002     ....Dy........ .
   28c70:	000286b8 00028c04 00028c0a 01000005     ................
   28c80:	000286d8 10007948 00028c0c 09000001     ....Hy..........

00028c90 <appReqActCfg>:
   28c90:	00000000                                ....

00028c94 <ccitt_table>:
   28c94:	80050000 000a800f 001e801b 80110014     ................
   28ca4:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   28cb4:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   28cc4:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   28cd4:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   28ce4:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   28cf4:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   28d04:	00968093 8099009c 808d0088 00828087     ................
   28d14:	01868183 8189018c 819d0198 01928197     ................
   28d24:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   28d34:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   28d44:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   28d54:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   28d64:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   28d74:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   28d84:	81150110 011a811f 010e810b 81010104     ................
   28d94:	03068303 8309030c 831d0318 03128317     ................
   28da4:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   28db4:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   28dc4:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   28dd4:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   28de4:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   28df4:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   28e04:	83950390 039a839f 038e838b 83810384     ................
   28e14:	82850280 028a828f 029e829b 82910294     ................
   28e24:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   28e34:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   28e44:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   28e54:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   28e64:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   28e74:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   28e84:	02168213 8219021c 820d0208 02028207     ................

00028e94 <am_ble_buffer_patch_data>:
   28e94:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   28ea4:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   28eb4:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   28ec4:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   28ed4:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   28f10:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   28f20:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   28f30:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   28f40:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   28f50:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   28f60:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   28f70:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   28f80:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   28f90:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   28fa0:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   28fb0:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   28fc0:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   28fd0:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   28fe0:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   28ff0:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   29000:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   29010:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   29020:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   29030:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   29040:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   29050:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   29060:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   29070:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   29080:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   29090:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   290a0:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   290b0:	8f809011 9812900e 900d3008 30309812     .........0....00
   290c0:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   290d0:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   290e0:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   290f0:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   29100:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   29110:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   29120:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   29130:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   29140:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   29150:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   29160:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   29170:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   29180:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   291a0:	00000021 00000000 00000001 00000000     !...............
   291b0:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   291c0:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   291d0:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   291e0:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   291f0:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   29200:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   29210:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   29220:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   29230:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   29240:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   29250:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   29260:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   29270:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   29280:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   29290:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   292a0:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   292b0:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   292c0:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   292d0:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   292e0:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   292f0:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   29300:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   29310:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   29320:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   29330:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   29340:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   29350:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   29360:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   29370:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   29380:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   29390:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   293a0:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   293b0:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   293c0:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   293d0:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   293e0:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   293f0:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   29400:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   29410:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   29420:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   29430:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   29440:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   29450:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   29460:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   29470:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   29480:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   29490:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   294a0:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   294b0:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   294c0:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   294d0:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   294e0:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   294f0:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   29500:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   29510:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   29520:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   29530:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   29540:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   29550:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   29560:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   29570:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   29580:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   29590:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   295a0:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   295b0:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   295c0:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   295d0:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   295e0:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   295f0:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   29600:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   29610:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   29620:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   29630:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   29640:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   29650:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   29660:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   29670:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   29680:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   29690:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   296a0:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   296b0:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   296c0:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   296d0:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   296e0:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   296f0:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   29700:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   29710:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   29720:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   29730:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   29740:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   29750:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   29760:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   29770:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   29780:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   29790:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   297a0:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   297b0:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   297c0:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   297d0:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   297e0:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   297f0:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   29800:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   29810:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   29820:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   29830:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   29840:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   29850:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   29860:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   29870:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   29880:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   29890:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   298a0:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   298b0:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   298c0:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   298d0:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   298e0:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   298f0:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   29900:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   29910:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   29920:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   29930:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   29940:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   29950:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   29960:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   29970:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   29980:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   29990:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   299a0:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   299b0:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   299c0:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   299d0:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   299e0:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   299f0:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   29a00:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   29a10:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   29a20:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   29a30:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   29a40:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   29a50:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   29a60:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   29a70:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   29a80:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   29a90:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   29aa0:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   29ab0:	00010341 50804000 000093a5 00000466     A....@.P....f...
   29ac0:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   29ad0:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   29ae0:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   29af0:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   29b00:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   29b10:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   29b20:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   29b30:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   29b40:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   29b50:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   29b60:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   29b70:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   29b80:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   29b90:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   29ba0:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   29bb0:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   29bc0:	00004770 20006780 20006054              pG...g. T`. 

00029bcc <am_ble_performance_copy_patch_data>:
   29bcc:	006e1100 00000400 00000000 01c50101     ..n.............
   29bdc:	00000039 00000000 00000000 00000000     9...............
   29bec:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   29bfc:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   29c0c:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   29c1c:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   29c2c:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   29c3c:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   29c4c:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   29c5c:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   29c6c:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   29c7c:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   29c8c:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   29c9c:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   29cac:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   29cbc:	f000e00a e007fb94 b2c09801 fac7f000     ................
   29ccc:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   29cdc:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   29cec:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   29cfc:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   29d0c:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   29d1c:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   29d2c:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   29d3c:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   29d4c:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   29d5c:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   29d6c:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   29d7c:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   29d8c:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   29d9c:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   29dac:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   29dbc:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   29dcc:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   29ddc:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   29dec:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   29dfc:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   29e0c:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   29e1c:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   29e2c:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   29e3c:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   29e4c:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   29e5c:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   29e6c:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   29e7c:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   29e8c:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   29e9c:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   29eac:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   29ebc:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   29ecc:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   29edc:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   29eec:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   29efc:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   29f0c:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   29f1c:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   29f2c:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   29f3c:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   29f4c:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   29f5c:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   29f6c:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   29f7c:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   29f8c:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   29f9c:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   29fac:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   29fbc:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   29fcc:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   29fdc:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   29fec:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   29ffc:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   2a00c:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   2a01c:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   2a02c:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   2a03c:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   2a04c:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   2a05c:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   2a06c:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   2a07c:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   2a08c:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   2a09c:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   2a0ac:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   2a0bc:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   2a0cc:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   2a0dc:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   2a0ec:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   2a0fc:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   2a10c:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   2a11c:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   2a12c:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   2a13c:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   2a14c:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   2a15c:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   2a16c:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   2a17c:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   2a18c:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   2a19c:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   2a1ac:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   2a1bc:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   2a1cc:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   2a1dc:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   2a1ec:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   2a1fc:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   2a20c:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   2a21c:	00400000 00804580 021e4580 00030000     ..@..E...E......
   2a22c:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   2a23c:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   2a24c:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   2a25c:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   2a26c:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   2a27c:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   2a28c:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   2a29c:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   2a2ac:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   2a2bc:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   2a2cc:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   2a2dc:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   2a2ec:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   2a2fc:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   2a30c:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   2a31c:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   2a32c:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   2a33c:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   2a34c:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   2a35c:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   2a36c:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   2a37c:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   2a38c:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   2a39c:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   2a3ac:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   2a3bc:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   2a3cc:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   2a3dc:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   2a3ec:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   2a3fc:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   2a40c:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   2a41c:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   2a42c:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   2a43c:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   2a44c:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   2a45c:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   2a46c:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   2a47c:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   2a48c:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   2a49c:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   2a4ac:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   2a4bc:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   2a4cc:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   2a4dc:	00000001                                ....

0002a4e0 <am_hal_ble_num_default_patches>:
   2a4e0:	00000003                                ....

0002a4e4 <am_ble_buffer_patch_data_b0>:
   2a4e4:	04182200 000003ff 00077584 00077d73     .".......u..s}..
   2a4f4:	00078575 00078b17 000795a9 00079b18     u...............
   2a504:	0007a32d 0007acc5 0007b2f4 0007b9ff     -...............
	...
   2a544:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   2a554:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   2a564:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   2a574:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   2a584:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   2a594:	20003e01 7cca4e23 6ac96875 d01d2a00     .>. #N.|uh.j.*..
   2a5a4:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   2a5b4:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   2a5c4:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   2a5d4:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   2a5e4:	2000682c 20006e0c 47084900 20003e31     ,h. .n. .I.G1>. 
   2a5f4:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   2a604:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   2a614:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   2a624:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   2a634:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   2a644:	00000021 00000000 00000001 00000000     !...............
   2a654:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   2a664:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   2a674:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   2a684:	30286928 8d013040 1a409800 b280492a     (i(0@0....@.*I..
   2a694:	bf00bf00 22054628 30631c71 fdacf7f3     ....(F."q.c0....
   2a6a4:	99006928 fbdff001 70602001 2003e001     (i....... `p... 
   2a6b4:	2f007060 7860d139 d2362806 44790001     `p./9.`x.(6...yD
   2a6c4:	bf00bf00 22568931 46315351 fe3ef001     ....1.V"QS1F..>.
   2a6d4:	70602001 2003e001 2f007060 7860d167     . `p... `p./g.`x
   2a6e4:	d2642806 44790001 18497909 185f448f     .(d...yD.yI..D_.
   2a6f4:	1207020c 98052128 fc54f7ff 213de057     ....(!....T.W.=!
   2a704:	20006878 20006dac 50800040 00002017     xh. .m. @..P. ..
   2a714:	00000801 5080407e 200068d8 47084900     ....~@.P.h. .I.G
   2a724:	20003e91 78c34311 021b7882 0412431a     .>. .C.x.x...C..
   2a734:	4c1a430a 79426062 02127901 79c34311     .C.Lb`By.y...C.y
   2a744:	d01b2e13 550e21a1 46692202 724e720a     .....!.U."iF.rNr
   2a754:	4308210f 46019001 f7fe4638 4669f909     .!.C...F8F....iF
   2a764:	b2e87a0a f7ffa902 3440ff55 8aa220ff     .z......U.@4. ..
   2a774:	30034639 bf00bf00 bdf0b003 21a12216     9F.0.........".!
   2a784:	00808820 30405838 07c07f00 2500d005      ...8X@0.......%
   2a794:	8820e02f fd22f008 4668e02b 20017a01     /. ...".+.hF.z. 
   2a7a4:	d0034388 28002000 e001d108 e7fa2001     .C... .(..... ..
   2a7b4:	43882004 2000d004 d0032800 e018253a     . .C... .(..:%..
   2a7c4:	6b114a08 4b086b52 d9014298 47702000     .J.kRk.K.B... pG
   2a7d4:	43424341 0c900989 49041808 d9f64288     ACBC.......I.B..
   2a7e4:	47702000 20007ec0 001e8480 03938700     . pG.~. ........
   2a7f4:	4913b410 4a136b89 d9024290 2000bc10     ...I.k.J.B..... 
   2a804:	4a114770 6813247d 02242214 42a34342     pG.J}$.h."$.BC.B
   2a814:	4341d903 18100c08 4341e002 1a100c08     ..AC......AC....
   2a824:	4288490a 2000d902 4770bc10 d0002800     .I.B... ..pG.(..
   2a834:	42a31e40 2800d2f8 bc10d0f6 47701e40     @..B...(....@.pG
   2a844:	20007ec0 000186a0 20006858 00030d40     .~. ....Xh. @...
   2a854:	f3efb4f0 b2cc8110 f3812101 78428810     .........!....Bx
   2a864:	02127801 78c34311 021b7882 0412431a     .x...C.x.x...C..
   2a874:	4d1d430a 7942606a 02127901 79c34311     .C.Mj`By.y...C.y
   2a884:	021b7982 0412431a 60aa430a 7a017a42     .y...C...C.`Bz.z
   2a894:	43110212 7a827ac3 431a021b 430a0412     ...C.z.z...C...C
   2a8a4:	7b4260ea 02127b01 7bc34311 021b7b82     .`B{.{...C.{.{..
   2a8b4:	0412431a 612a430a 23103010 21004a0b     .C...C*a.0.#.J.!
   2a8c4:	54565c46 b2891c49 d3f94299 6168206e     F\VTI....B..n ha
   2a8d4:	60282001 21014806 f3847401 bcf08810     . (`.H.!.t......
   2a8e4:	20104904 00004708 508000c0 5080406e     .I. .G.....Pn@.P
   2a8f4:	200068d8 000159a1                       .h. .Y..

0002a8fc <am_hal_ble_num_default_patches_b0>:
   2a8fc:	00000003                                ....

0002a900 <am_hal_cachectrl_defaults>:
   2a900:	00000308                                ....

0002a904 <g_AM_HAL_GPIO_DISABLE>:
   2a904:	00000003                                ....

0002a908 <g_AM_HAL_GPIO_OUTPUT>:
   2a908:	00000403                                ....

0002a90c <g_ui8Bit76Capabilities>:
   2a90c:	02800101 80010180 80800101 80808080     ................
   2a91c:	80808080 80808008 01800180 80808080     ................
   2a92c:	80808080 01800402 01010401 80808080     ................
   2a93c:	00000101                                ....

0002a940 <g_ui8Inpen>:
   2a940:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   2a950:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   2a960:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   2a970:	00003130                                01..

0002a974 <g_ui8NCEtable>:
   2a974:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   2a984:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   2a994:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   2a9a4:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   2a9b4:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   2a9c4:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   2a9d4:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   2a9e4:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   2a9f4:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   2aa04:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   2aa14:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   2aa24:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   2aa34:	32221202 43231303                       .."2..#C

0002aa3c <g_ui8nCEpins>:
   2aa3c:	02070707 00080802 01020202 01010101     ................
   2aa4c:	01010101 01010101 01010101 01010101     ................
   2aa5c:	01010101 08010101 01010008 01010101     ................
   2aa6c:	00000101                                ....

0002aa70 <g_am_hal_mcuctrl_flash_size>:
   2aa70:	00004000 00008000 00010000 00020000     .@..............
   2aa80:	00040000 00080000 00100000 00200000     .............. .
   2aa90:	00180000 00000000 00000000 00000000     ................
	...

0002aab0 <g_am_hal_mcuctrl_sram_size>:
   2aab0:	00004000 00008000 00010000 00020000     .@..............
   2aac0:	00040000 00080000 00100000 00060000     ................
   2aad0:	000c0000 00000000 00000000 00000000     ................
	...

0002aaf0 <am_hal_pwrctrl_memory_control>:
	...
   2ab08:	00000001 00000001 00000001 00001fff     ................
   2ab18:	00001fff 00000001 00000003 00000003     ................
   2ab28:	00000003 00001fff 00001fff 00000003     ................
   2ab38:	00000007 00000007 00000007 00001fff     ................
   2ab48:	00001fff 00000007 0000000f 0000000f     ................
   2ab58:	0000000f 00001fff 00001fff 0000000f     ................
   2ab68:	0000001f 0000001f 0000001f 00001fff     ................
   2ab78:	00001fff 0000001f 0000003f 0000003f     ........?...?...
   2ab88:	0000003f 00001fff 00001fff 0000003f     ?...........?...
   2ab98:	0000007f 0000007f 0000007f 00001fff     ................
   2aba8:	00001fff 0000007f 000000ff 000000ff     ................
   2abb8:	000000ff 00001fff 00001fff 000000ff     ................
   2abc8:	000001ff 000001ff 000001ff 00001fff     ................
   2abd8:	00001fff 000001ff 000003ff 000003ff     ................
   2abe8:	000003ff 00001fff 00001fff 000003ff     ................
   2abf8:	000007ff 000007ff 000007ff 00001fff     ................
   2ac08:	00001fff 000007ff 00000fff 00000fff     ................
   2ac18:	00000fff 00001fff 00001fff 00000fff     ................
   2ac28:	00001fff 00001fff 00001fff 00001fff     ................
   2ac38:	00001fff 00001fff 00002000 00002000     ......... ... ..
   2ac48:	00002000 00006000 00006000 00002000     . ...`...`... ..
   2ac58:	00006000 00006000 00006000 00006000     .`...`...`...`..
   2ac68:	00006000 00006000 c0000000 00000000     .`...`..........
   2ac78:	c0000000 c0000000 00000000 80000000     ................
   2ac88:	c0007fff 00007fff c0007fff c0007fff     ................
   2ac98:	00007fff 80007fff                       ........

0002aca0 <am_hal_pwrctrl_peripheral_control>:
	...
   2acac:	00000001 00000004 00000004 00000002     ................
   2acbc:	00000008 00000008 00000004 00000008     ................
   2accc:	00000008 00000008 00000008 00000008     ................
   2acdc:	00000010 00000010 00000010 00000020     ............ ...
   2acec:	00000010 00000010 00000040 00000010     ........@.......
   2acfc:	00000010 00000080 00000004 00000004     ................
   2ad0c:	00000100 00000004 00000004 00000200     ................
   2ad1c:	00000020 00000020 00000400 00000004      ... ...........
   2ad2c:	00000004 00000800 00000040 00000040     ........@...@...
   2ad3c:	00001000 00000080 00000080 00002000     ............. ..
   2ad4c:	00000100 00000100                       ........
