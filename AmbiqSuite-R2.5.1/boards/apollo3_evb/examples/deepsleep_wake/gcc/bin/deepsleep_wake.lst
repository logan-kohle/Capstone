
bin/deepsleep_wake.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 51 d4 00 00 b9 d4 00 00 85 c3 00 00     ....Q...........
    c010:	bb d4 00 00 bb d4 00 00 bb d4 00 00 00 00 00 00     ................
	...
    c02c:	bd d4 00 00 bd d4 00 00 00 00 00 00 bd d4 00 00     ................
    c03c:	bd d4 00 00 bd d4 00 00 bd d4 00 00 15 c2 00 00     ................
    c04c:	bd d4 00 00 bd d4 00 00 bd d4 00 00 bd d4 00 00     ................
    c05c:	bd d4 00 00 bd d4 00 00 bd d4 00 00 bd d4 00 00     ................
    c06c:	bd d4 00 00 bd d4 00 00 d5 c1 00 00 bd d4 00 00     ................
    c07c:	bd d4 00 00 bd d4 00 00 bd d4 00 00 bd d4 00 00     ................
    c08c:	bd d4 00 00 bd d4 00 00 bd d4 00 00 bd d4 00 00     ................
    c09c:	bd d4 00 00 bd d4 00 00 bd d4 00 00 bd d4 00 00     ................
    c0ac:	bd d4 00 00 bd d4 00 00 bd d4 00 00 bd d4 00 00     ................
    c0bc:	bd d4 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <am_gpio_isr>:
// GPIO ISR
//
//*****************************************************************************
void
am_gpio_isr(void)
{
    c1d4:	b500      	push	{lr}
    c1d6:	b083      	sub	sp, #12
    //
    // Delay for debounce.
    //
    am_util_delay_ms(200);
    c1d8:	20c8      	movs	r0, #200	; 0xc8
    c1da:	f000 f8b7 	bl	c34c <am_util_delay_ms>

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    c1de:	f04f 0200 	mov.w	r2, #0
    c1e2:	f04f 0300 	mov.w	r3, #0
    c1e6:	e9cd 2300 	strd	r2, r3, [sp]
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    c1ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c1ee:	f04f 0300 	mov.w	r3, #0
    c1f2:	e9cd 2300 	strd	r2, r3, [sp]
    c1f6:	e9dd 0100 	ldrd	r0, r1, [sp]
    c1fa:	f001 fe79 	bl	def0 <am_hal_gpio_interrupt_clear>

    //
    // Toggle LED 0.
    //
#ifdef AM_BSP_NUM_LEDS
    am_devices_led_toggle(am_bsp_psLEDs, 0);
    c1fe:	2100      	movs	r1, #0
    c200:	4803      	ldr	r0, [pc, #12]	; (c210 <am_gpio_isr+0x3c>)
    c202:	f001 f8d8 	bl	d3b6 <am_devices_led_toggle>
#endif
}
    c206:	bf00      	nop
    c208:	b003      	add	sp, #12
    c20a:	f85d fb04 	ldr.w	pc, [sp], #4
    c20e:	bf00      	nop
    c210:	10001000 	.word	0x10001000

0000c214 <am_rtc_isr>:
//*****************************************************************************
static uint32_t g_RTCseconds = 0;

void
am_rtc_isr(void)
{
    c214:	b508      	push	{r3, lr}
    //
    // Clear the RTC alarm interrupt.
    //
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_ALM);
    c216:	2001      	movs	r0, #1
    c218:	f002 f8fc 	bl	e414 <am_hal_rtc_int_clear>

    //
    // Check the desired number of seconds until LED is toggled.
    //
    if ( ++g_RTCseconds >= 5 )
    c21c:	4b08      	ldr	r3, [pc, #32]	; (c240 <am_rtc_isr+0x2c>)
    c21e:	681b      	ldr	r3, [r3, #0]
    c220:	3301      	adds	r3, #1
    c222:	4a07      	ldr	r2, [pc, #28]	; (c240 <am_rtc_isr+0x2c>)
    c224:	6013      	str	r3, [r2, #0]
    c226:	4b06      	ldr	r3, [pc, #24]	; (c240 <am_rtc_isr+0x2c>)
    c228:	681b      	ldr	r3, [r3, #0]
    c22a:	2b04      	cmp	r3, #4
    c22c:	d906      	bls.n	c23c <am_rtc_isr+0x28>
    {
        //
        // Reset the seconds counter.
        //
        g_RTCseconds = 0;
    c22e:	4b04      	ldr	r3, [pc, #16]	; (c240 <am_rtc_isr+0x2c>)
    c230:	2200      	movs	r2, #0
    c232:	601a      	str	r2, [r3, #0]

#ifdef AM_BSP_NUM_LEDS
        //
        // Toggle LED 1.
        //
        am_devices_led_toggle(am_bsp_psLEDs, 1);
    c234:	2101      	movs	r1, #1
    c236:	4803      	ldr	r0, [pc, #12]	; (c244 <am_rtc_isr+0x30>)
    c238:	f001 f8bd 	bl	d3b6 <am_devices_led_toggle>
#endif
    }
}
    c23c:	bf00      	nop
    c23e:	bd08      	pop	{r3, pc}
    c240:	10001034 	.word	0x10001034
    c244:	10001000 	.word	0x10001000

0000c248 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c248:	b500      	push	{lr}
    c24a:	b085      	sub	sp, #20
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c24c:	2100      	movs	r1, #0
    c24e:	2000      	movs	r0, #0
    c250:	f001 fb74 	bl	d93c <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c254:	4839      	ldr	r0, [pc, #228]	; (c33c <main+0xf4>)
    c256:	f001 f9c9 	bl	d5ec <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c25a:	f001 f9eb 	bl	d634 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c25e:	f001 f955 	bl	d50c <am_bsp_low_power_init>

    //
    // Enable the XT for the RTC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
    c262:	2100      	movs	r1, #0
    c264:	2001      	movs	r0, #1
    c266:	f001 fb69 	bl	d93c <am_hal_clkgen_control>

    //
    // Select XT for RTC clock source
    //
    am_hal_rtc_osc_select(AM_HAL_RTC_OSC_XT);
    c26a:	2000      	movs	r0, #0
    c26c:	f002 f8ac 	bl	e3c8 <am_hal_rtc_osc_select>

    //
    // Enable the RTC.
    //
    am_hal_rtc_osc_enable();
    c270:	f002 f8b2 	bl	e3d8 <am_hal_rtc_osc_enable>

    //
    // Initialize the printf interface for UART output.
    //
    am_bsp_uart_printf_enable();
    c274:	f001 f96a 	bl	d54c <am_bsp_uart_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c278:	f000 ffb2 	bl	d1e0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Deepsleep Wake Example\n");
    c27c:	4830      	ldr	r0, [pc, #192]	; (c340 <main+0xf8>)
    c27e:	f000 ff8f 	bl	d1a0 <am_util_stdio_printf>

    //
    // We are done printing.
    // Disable the UART and interrupts
    //
    am_bsp_uart_printf_disable();
    c282:	f001 f991 	bl	d5a8 <am_bsp_uart_printf_disable>

#if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    //
    // Turn OFF unneeded flash
    //
    if ( am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_MIN) )
    c286:	200e      	movs	r0, #14
    c288:	f001 ff4a 	bl	e120 <am_hal_pwrctrl_memory_enable>
    c28c:	4603      	mov	r3, r0
    c28e:	2b00      	cmp	r3, #0
    c290:	d000      	beq.n	c294 <main+0x4c>
    {
        while(1);
    c292:	e7fe      	b.n	c292 <main+0x4a>
    }

    //
    // For optimal Deep Sleep current, configure cache to be powered-down in deepsleep:
    //
    am_hal_pwrctrl_memory_deepsleep_powerdown(AM_HAL_PWRCTRL_MEM_CACHE);
    c294:	2010      	movs	r0, #16
    c296:	f001 ff8f 	bl	e1b8 <am_hal_pwrctrl_memory_deepsleep_powerdown>

    //
    // Power down SRAM, only 32K SRAM retained
    //
    am_hal_pwrctrl_memory_deepsleep_powerdown(AM_HAL_PWRCTRL_MEM_SRAM_MAX);
    c29a:	200d      	movs	r0, #13
    c29c:	f001 ff8c 	bl	e1b8 <am_hal_pwrctrl_memory_deepsleep_powerdown>
    am_hal_pwrctrl_memory_deepsleep_retain(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM);
    c2a0:	2002      	movs	r0, #2
    c2a2:	f001 ff9d 	bl	e1e0 <am_hal_pwrctrl_memory_deepsleep_retain>

#if defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)
    //
    // Configure the button pin.
    //
    am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_deepsleep_button0);
    c2a6:	4b27      	ldr	r3, [pc, #156]	; (c344 <main+0xfc>)
    c2a8:	6819      	ldr	r1, [r3, #0]
    c2aa:	2010      	movs	r0, #16
    c2ac:	f001 fc50 	bl	db50 <am_hal_gpio_pinconfig>

    //
    // Clear the GPIO Interrupt (write to clear).
    //
    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
    c2b0:	f04f 0200 	mov.w	r2, #0
    c2b4:	f04f 0300 	mov.w	r3, #0
    c2b8:	e9cd 2300 	strd	r2, r3, [sp]
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    c2bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c2c0:	f04f 0300 	mov.w	r3, #0
    c2c4:	e9cd 2300 	strd	r2, r3, [sp]
    c2c8:	e9dd 0100 	ldrd	r0, r1, [sp]
    c2cc:	f001 fe10 	bl	def0 <am_hal_gpio_interrupt_clear>

    //
    // Enable the GPIO/button interrupt.
    //
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask, AM_BSP_GPIO_BUTTON0));
    c2d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c2d4:	f04f 0300 	mov.w	r3, #0
    c2d8:	e9cd 2300 	strd	r2, r3, [sp]
    c2dc:	e9dd 0100 	ldrd	r0, r1, [sp]
    c2e0:	f001 fde6 	bl	deb0 <am_hal_gpio_interrupt_enable>

    //
    // Configure the LEDs.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    c2e4:	2105      	movs	r1, #5
    c2e6:	4818      	ldr	r0, [pc, #96]	; (c348 <main+0x100>)
    c2e8:	f000 ffce 	bl	d288 <am_devices_led_array_init>

    //
    // Turn the LEDs off, but initialize LED1 on so user will see something.
    //
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++)
    c2ec:	2300      	movs	r3, #0
    c2ee:	9303      	str	r3, [sp, #12]
    c2f0:	e007      	b.n	c302 <main+0xba>
    {
        am_devices_led_off(am_bsp_psLEDs, ix);
    c2f2:	9b03      	ldr	r3, [sp, #12]
    c2f4:	4619      	mov	r1, r3
    c2f6:	4814      	ldr	r0, [pc, #80]	; (c348 <main+0x100>)
    c2f8:	f001 f820 	bl	d33c <am_devices_led_off>
    for (int ix = 0; ix < AM_BSP_NUM_LEDS; ix++)
    c2fc:	9b03      	ldr	r3, [sp, #12]
    c2fe:	3301      	adds	r3, #1
    c300:	9303      	str	r3, [sp, #12]
    c302:	9b03      	ldr	r3, [sp, #12]
    c304:	2b04      	cmp	r3, #4
    c306:	ddf4      	ble.n	c2f2 <main+0xaa>
    }

    am_devices_led_on(am_bsp_psLEDs, 1);
    c308:	2101      	movs	r1, #1
    c30a:	480f      	ldr	r0, [pc, #60]	; (c348 <main+0x100>)
    c30c:	f000 ffdc 	bl	d2c8 <am_devices_led_on>
#endif // defined(AM_BSP_NUM_BUTTONS)  &&  defined(AM_BSP_NUM_LEDS)

    //
    // Set the alarm repeat interval to be every second.
    //
    am_hal_rtc_alarm_interval_set(AM_HAL_RTC_ALM_RPT_SEC);
    c310:	2007      	movs	r0, #7
    c312:	f002 f885 	bl	e420 <am_hal_rtc_alarm_interval_set>

    //
    // Clear the RTC alarm interrupt.
    //
    am_hal_rtc_int_clear(AM_HAL_RTC_INT_ALM);
    c316:	2001      	movs	r0, #1
    c318:	f002 f87c 	bl	e414 <am_hal_rtc_int_clear>

    //
    // Enable the RTC alarm interrupt.
    //
    am_hal_rtc_int_enable(AM_HAL_RTC_INT_ALM);
    c31c:	2001      	movs	r0, #1
    c31e:	f002 f86f 	bl	e400 <am_hal_rtc_int_enable>

    //
    // Enable GPIO interrupts to the NVIC.
    //
    NVIC_EnableIRQ(GPIO_IRQn);
    c322:	200d      	movs	r0, #13
    c324:	f7ff ff3c 	bl	c1a0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(RTC_IRQn);
    c328:	2002      	movs	r0, #2
    c32a:	f7ff ff39 	bl	c1a0 <__NVIC_EnableIRQ>

    //
    // Enable interrupts to the core.
    //
    am_hal_interrupt_master_enable();
    c32e:	f001 fdf9 	bl	df24 <am_hal_interrupt_master_enable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c332:	2001      	movs	r0, #1
    c334:	f002 f894 	bl	e460 <am_hal_sysctrl_sleep>
    c338:	e7fb      	b.n	c332 <main+0xea>
    c33a:	bf00      	nop
    c33c:	0000edf4 	.word	0x0000edf4
    c340:	0000ed94 	.word	0x0000ed94
    c344:	0000edc0 	.word	0x0000edc0
    c348:	10001000 	.word	0x10001000

0000c34c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c34c:	b500      	push	{lr}
    c34e:	b089      	sub	sp, #36	; 0x24
    c350:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c352:	ab03      	add	r3, sp, #12
    c354:	4618      	mov	r0, r3
    c356:	f001 fb8d 	bl	da74 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c35a:	9b03      	ldr	r3, [sp, #12]
    c35c:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c35e:	9b07      	ldr	r3, [sp, #28]
    c360:	4a07      	ldr	r2, [pc, #28]	; (c380 <am_util_delay_ms+0x34>)
    c362:	fba2 2303 	umull	r2, r3, r2, r3
    c366:	099a      	lsrs	r2, r3, #6
    c368:	9b01      	ldr	r3, [sp, #4]
    c36a:	fb02 f303 	mul.w	r3, r2, r3
    c36e:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c370:	9806      	ldr	r0, [sp, #24]
    c372:	f001 fb9d 	bl	dab0 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c376:	bf00      	nop
    c378:	b009      	add	sp, #36	; 0x24
    c37a:	f85d fb04 	ldr.w	pc, [sp], #4
    c37e:	bf00      	nop
    c380:	057619f1 	.word	0x057619f1

0000c384 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c384:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c386:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c38a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c38c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c390:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c394:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c398:	f000 f80a 	bl	c3b0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c39c:	bd01      	pop	{r0, pc}
}
    c39e:	bf00      	nop
    c3a0:	4618      	mov	r0, r3

0000c3a2 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c3a2:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c3a4:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c3a6:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c3a8:	4770      	bx	lr
}
    c3aa:	bf00      	nop
    c3ac:	4618      	mov	r0, r3
	...

0000c3b0 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c3b0:	b500      	push	{lr}
    c3b2:	b097      	sub	sp, #92	; 0x5c
    c3b4:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c3b6:	ab03      	add	r3, sp, #12
    c3b8:	2200      	movs	r2, #0
    c3ba:	601a      	str	r2, [r3, #0]
    c3bc:	605a      	str	r2, [r3, #4]
    c3be:	609a      	str	r2, [r3, #8]
    c3c0:	60da      	str	r2, [r3, #12]
    c3c2:	611a      	str	r2, [r3, #16]
    c3c4:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c3c6:	2300      	movs	r3, #0
    c3c8:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c3ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c3cc:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c3ce:	4b2e      	ldr	r3, [pc, #184]	; (c488 <am_util_faultisr_collect_data+0xd8>)
    c3d0:	681b      	ldr	r3, [r3, #0]
    c3d2:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c3d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3d6:	b2db      	uxtb	r3, r3
    c3d8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c3dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3de:	0a1b      	lsrs	r3, r3, #8
    c3e0:	b2db      	uxtb	r3, r3
    c3e2:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c3e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3e8:	0c1b      	lsrs	r3, r3, #16
    c3ea:	b29b      	uxth	r3, r3
    c3ec:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3f0:	4b26      	ldr	r3, [pc, #152]	; (c48c <am_util_faultisr_collect_data+0xdc>)
    c3f2:	681b      	ldr	r3, [r3, #0]
    c3f4:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3f6:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c3fa:	b2db      	uxtb	r3, r3
    c3fc:	f003 0302 	and.w	r3, r3, #2
    c400:	2b00      	cmp	r3, #0
    c402:	d005      	beq.n	c410 <am_util_faultisr_collect_data+0x60>
    c404:	9901      	ldr	r1, [sp, #4]
    c406:	2006      	movs	r0, #6
    c408:	f7ff ffcb 	bl	c3a2 <getStackedReg>
    c40c:	4603      	mov	r3, r0
    c40e:	e001      	b.n	c414 <am_util_faultisr_collect_data+0x64>
    c410:	f04f 33ff 	mov.w	r3, #4294967295
    c414:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c416:	9901      	ldr	r1, [sp, #4]
    c418:	2000      	movs	r0, #0
    c41a:	f7ff ffc2 	bl	c3a2 <getStackedReg>
    c41e:	4603      	mov	r3, r0
    c420:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c422:	9901      	ldr	r1, [sp, #4]
    c424:	2001      	movs	r0, #1
    c426:	f7ff ffbc 	bl	c3a2 <getStackedReg>
    c42a:	4603      	mov	r3, r0
    c42c:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c42e:	9901      	ldr	r1, [sp, #4]
    c430:	2002      	movs	r0, #2
    c432:	f7ff ffb6 	bl	c3a2 <getStackedReg>
    c436:	4603      	mov	r3, r0
    c438:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c43a:	9901      	ldr	r1, [sp, #4]
    c43c:	2003      	movs	r0, #3
    c43e:	f7ff ffb0 	bl	c3a2 <getStackedReg>
    c442:	4603      	mov	r3, r0
    c444:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c446:	9901      	ldr	r1, [sp, #4]
    c448:	2004      	movs	r0, #4
    c44a:	f7ff ffaa 	bl	c3a2 <getStackedReg>
    c44e:	4603      	mov	r3, r0
    c450:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c452:	9901      	ldr	r1, [sp, #4]
    c454:	2005      	movs	r0, #5
    c456:	f7ff ffa4 	bl	c3a2 <getStackedReg>
    c45a:	4603      	mov	r3, r0
    c45c:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c45e:	9901      	ldr	r1, [sp, #4]
    c460:	2006      	movs	r0, #6
    c462:	f7ff ff9e 	bl	c3a2 <getStackedReg>
    c466:	4603      	mov	r3, r0
    c468:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c46a:	9901      	ldr	r1, [sp, #4]
    c46c:	2007      	movs	r0, #7
    c46e:	f7ff ff98 	bl	c3a2 <getStackedReg>
    c472:	4603      	mov	r3, r0
    c474:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c476:	ab03      	add	r3, sp, #12
    c478:	4619      	mov	r1, r3
    c47a:	2002      	movs	r0, #2
    c47c:	f001 fd5e 	bl	df3c <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c480:	2300      	movs	r3, #0
    c482:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c484:	e7fe      	b.n	c484 <am_util_faultisr_collect_data+0xd4>
    c486:	bf00      	nop
    c488:	e000ed28 	.word	0xe000ed28
    c48c:	e000ed38 	.word	0xe000ed38

0000c490 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c490:	b082      	sub	sp, #8
    c492:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c494:	4a02      	ldr	r2, [pc, #8]	; (c4a0 <am_util_stdio_printf_init+0x10>)
    c496:	9b01      	ldr	r3, [sp, #4]
    c498:	6013      	str	r3, [r2, #0]
}
    c49a:	bf00      	nop
    c49c:	b002      	add	sp, #8
    c49e:	4770      	bx	lr
    c4a0:	10001038 	.word	0x10001038

0000c4a4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c4a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c4a8:	b098      	sub	sp, #96	; 0x60
    c4aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c4ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c4b2:	f04f 0000 	mov.w	r0, #0
    c4b6:	f04f 0100 	mov.w	r1, #0
    c4ba:	0018      	movs	r0, r3
    c4bc:	2100      	movs	r1, #0
    c4be:	ea50 0301 	orrs.w	r3, r0, r1
    c4c2:	f000 80b0 	beq.w	c626 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c4ca:	f04f 0400 	mov.w	r4, #0
    c4ce:	f04f 0500 	mov.w	r5, #0
    c4d2:	0854      	lsrs	r4, r2, #1
    c4d4:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c4d8:	085d      	lsrs	r5, r3, #1
    c4da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c4de:	f04f 0000 	mov.w	r0, #0
    c4e2:	f04f 0100 	mov.w	r1, #0
    c4e6:	0890      	lsrs	r0, r2, #2
    c4e8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c4ec:	0899      	lsrs	r1, r3, #2
    c4ee:	eb14 0a00 	adds.w	sl, r4, r0
    c4f2:	eb45 0b01 	adc.w	fp, r5, r1
    c4f6:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c4fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c4fe:	f04f 0000 	mov.w	r0, #0
    c502:	f04f 0100 	mov.w	r1, #0
    c506:	0910      	lsrs	r0, r2, #4
    c508:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c50c:	0919      	lsrs	r1, r3, #4
    c50e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c512:	1814      	adds	r4, r2, r0
    c514:	9402      	str	r4, [sp, #8]
    c516:	414b      	adcs	r3, r1
    c518:	9303      	str	r3, [sp, #12]
    c51a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c51e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c522:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c526:	f04f 0000 	mov.w	r0, #0
    c52a:	f04f 0100 	mov.w	r1, #0
    c52e:	0a10      	lsrs	r0, r2, #8
    c530:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c534:	0a19      	lsrs	r1, r3, #8
    c536:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c53a:	1814      	adds	r4, r2, r0
    c53c:	9404      	str	r4, [sp, #16]
    c53e:	414b      	adcs	r3, r1
    c540:	9305      	str	r3, [sp, #20]
    c542:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c546:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c54a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c54e:	f04f 0000 	mov.w	r0, #0
    c552:	f04f 0100 	mov.w	r1, #0
    c556:	0c10      	lsrs	r0, r2, #16
    c558:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c55c:	0c19      	lsrs	r1, r3, #16
    c55e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c562:	1814      	adds	r4, r2, r0
    c564:	9406      	str	r4, [sp, #24]
    c566:	414b      	adcs	r3, r1
    c568:	9307      	str	r3, [sp, #28]
    c56a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c56e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c572:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c576:	f04f 0000 	mov.w	r0, #0
    c57a:	f04f 0100 	mov.w	r1, #0
    c57e:	0018      	movs	r0, r3
    c580:	2100      	movs	r1, #0
    c582:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c586:	1814      	adds	r4, r2, r0
    c588:	9408      	str	r4, [sp, #32]
    c58a:	414b      	adcs	r3, r1
    c58c:	9309      	str	r3, [sp, #36]	; 0x24
    c58e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c592:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c596:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c59a:	f04f 0200 	mov.w	r2, #0
    c59e:	f04f 0300 	mov.w	r3, #0
    c5a2:	08c2      	lsrs	r2, r0, #3
    c5a4:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c5a8:	08cb      	lsrs	r3, r1, #3
    c5aa:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c5ae:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c5b2:	4622      	mov	r2, r4
    c5b4:	462b      	mov	r3, r5
    c5b6:	f04f 0000 	mov.w	r0, #0
    c5ba:	f04f 0100 	mov.w	r1, #0
    c5be:	0099      	lsls	r1, r3, #2
    c5c0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c5c4:	0090      	lsls	r0, r2, #2
    c5c6:	4602      	mov	r2, r0
    c5c8:	460b      	mov	r3, r1
    c5ca:	1916      	adds	r6, r2, r4
    c5cc:	eb43 0705 	adc.w	r7, r3, r5
    c5d0:	19b3      	adds	r3, r6, r6
    c5d2:	930a      	str	r3, [sp, #40]	; 0x28
    c5d4:	eb47 0307 	adc.w	r3, r7, r7
    c5d8:	930b      	str	r3, [sp, #44]	; 0x2c
    c5da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c5de:	4630      	mov	r0, r6
    c5e0:	4639      	mov	r1, r7
    c5e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5e6:	1a14      	subs	r4, r2, r0
    c5e8:	940c      	str	r4, [sp, #48]	; 0x30
    c5ea:	eb63 0301 	sbc.w	r3, r3, r1
    c5ee:	930d      	str	r3, [sp, #52]	; 0x34
    c5f0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c5f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c5f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c5fc:	f112 0806 	adds.w	r8, r2, #6
    c600:	f143 0900 	adc.w	r9, r3, #0
    c604:	f04f 0200 	mov.w	r2, #0
    c608:	f04f 0300 	mov.w	r3, #0
    c60c:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c610:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c614:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c618:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c61c:	1814      	adds	r4, r2, r0
    c61e:	9400      	str	r4, [sp, #0]
    c620:	414b      	adcs	r3, r1
    c622:	9301      	str	r3, [sp, #4]
    c624:	e02a      	b.n	c67c <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c628:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c62a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c62c:	085a      	lsrs	r2, r3, #1
    c62e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c630:	089b      	lsrs	r3, r3, #2
    c632:	4413      	add	r3, r2
    c634:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c636:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c638:	091b      	lsrs	r3, r3, #4
    c63a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c63c:	4413      	add	r3, r2
    c63e:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c640:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c642:	0a1b      	lsrs	r3, r3, #8
    c644:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c646:	4413      	add	r3, r2
    c648:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c64a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c64c:	0c1b      	lsrs	r3, r3, #16
    c64e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c650:	4413      	add	r3, r2
    c652:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c654:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c656:	08db      	lsrs	r3, r3, #3
    c658:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c65a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c65c:	4613      	mov	r3, r2
    c65e:	009b      	lsls	r3, r3, #2
    c660:	4413      	add	r3, r2
    c662:	005b      	lsls	r3, r3, #1
    c664:	461a      	mov	r2, r3
    c666:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c668:	1a9b      	subs	r3, r3, r2
    c66a:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c66c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c66e:	3306      	adds	r3, #6
    c670:	091a      	lsrs	r2, r3, #4
    c672:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c674:	4413      	add	r3, r2
    c676:	2200      	movs	r2, #0
    c678:	9300      	str	r3, [sp, #0]
    c67a:	9201      	str	r2, [sp, #4]
    }
}
    c67c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c680:	4610      	mov	r0, r2
    c682:	4619      	mov	r1, r3
    c684:	b018      	add	sp, #96	; 0x60
    c686:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c68a:	4770      	bx	lr

0000c68c <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c68c:	b500      	push	{lr}
    c68e:	b085      	sub	sp, #20
    c690:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c694:	9a00      	ldr	r2, [sp, #0]
    c696:	9b01      	ldr	r3, [sp, #4]
    c698:	4313      	orrs	r3, r2
    c69a:	2b00      	cmp	r3, #0
    c69c:	bf0c      	ite	eq
    c69e:	2301      	moveq	r3, #1
    c6a0:	2300      	movne	r3, #0
    c6a2:	b2db      	uxtb	r3, r3
    c6a4:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c6a6:	e008      	b.n	c6ba <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c6a8:	e9dd 0100 	ldrd	r0, r1, [sp]
    c6ac:	f7ff fefa 	bl	c4a4 <divu64_10>
    c6b0:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c6b4:	9b03      	ldr	r3, [sp, #12]
    c6b6:	3301      	adds	r3, #1
    c6b8:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c6ba:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6be:	4313      	orrs	r3, r2
    c6c0:	d1f2      	bne.n	c6a8 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c6c2:	9b03      	ldr	r3, [sp, #12]
}
    c6c4:	4618      	mov	r0, r3
    c6c6:	b005      	add	sp, #20
    c6c8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c6cc <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c6cc:	b530      	push	{r4, r5, lr}
    c6ce:	b083      	sub	sp, #12
    c6d0:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c6d4:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6d8:	2b00      	cmp	r3, #0
    c6da:	da07      	bge.n	c6ec <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c6dc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6e0:	2100      	movs	r1, #0
    c6e2:	4254      	negs	r4, r2
    c6e4:	eb61 0503 	sbc.w	r5, r1, r3
    c6e8:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c6ec:	e9dd 2300 	ldrd	r2, r3, [sp]
    c6f0:	4610      	mov	r0, r2
    c6f2:	4619      	mov	r1, r3
    c6f4:	f7ff ffca 	bl	c68c <ndigits_in_u64>
    c6f8:	4603      	mov	r3, r0
}
    c6fa:	4618      	mov	r0, r3
    c6fc:	b003      	add	sp, #12
    c6fe:	bd30      	pop	{r4, r5, pc}

0000c700 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c700:	b084      	sub	sp, #16
    c702:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c706:	9a00      	ldr	r2, [sp, #0]
    c708:	9b01      	ldr	r3, [sp, #4]
    c70a:	4313      	orrs	r3, r2
    c70c:	2b00      	cmp	r3, #0
    c70e:	bf0c      	ite	eq
    c710:	2301      	moveq	r3, #1
    c712:	2300      	movne	r3, #0
    c714:	b2db      	uxtb	r3, r3
    c716:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c718:	e00e      	b.n	c738 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c71a:	e9dd 0100 	ldrd	r0, r1, [sp]
    c71e:	f04f 0200 	mov.w	r2, #0
    c722:	f04f 0300 	mov.w	r3, #0
    c726:	0902      	lsrs	r2, r0, #4
    c728:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c72c:	090b      	lsrs	r3, r1, #4
    c72e:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c732:	9b03      	ldr	r3, [sp, #12]
    c734:	3301      	adds	r3, #1
    c736:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c738:	e9dd 2300 	ldrd	r2, r3, [sp]
    c73c:	4313      	orrs	r3, r2
    c73e:	d1ec      	bne.n	c71a <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c740:	9b03      	ldr	r3, [sp, #12]
}
    c742:	4618      	mov	r0, r3
    c744:	b004      	add	sp, #16
    c746:	4770      	bx	lr

0000c748 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c748:	b086      	sub	sp, #24
    c74a:	9001      	str	r0, [sp, #4]
    c74c:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c74e:	2300      	movs	r3, #0
    c750:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c754:	2300      	movs	r3, #0
    c756:	9304      	str	r3, [sp, #16]
    c758:	2300      	movs	r3, #0
    c75a:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c75c:	9b01      	ldr	r3, [sp, #4]
    c75e:	781b      	ldrb	r3, [r3, #0]
    c760:	2b2d      	cmp	r3, #45	; 0x2d
    c762:	d11c      	bne.n	c79e <decstr_to_int+0x56>
    {
        bNeg = true;
    c764:	2301      	movs	r3, #1
    c766:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c76a:	9b01      	ldr	r3, [sp, #4]
    c76c:	3301      	adds	r3, #1
    c76e:	9301      	str	r3, [sp, #4]
        uCnt++;
    c770:	9b03      	ldr	r3, [sp, #12]
    c772:	3301      	adds	r3, #1
    c774:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c776:	e012      	b.n	c79e <decstr_to_int+0x56>
    {
        ++uCnt;
    c778:	9b03      	ldr	r3, [sp, #12]
    c77a:	3301      	adds	r3, #1
    c77c:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c77e:	9a04      	ldr	r2, [sp, #16]
    c780:	4613      	mov	r3, r2
    c782:	009b      	lsls	r3, r3, #2
    c784:	4413      	add	r3, r2
    c786:	005b      	lsls	r3, r3, #1
    c788:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c78a:	9b01      	ldr	r3, [sp, #4]
    c78c:	781b      	ldrb	r3, [r3, #0]
    c78e:	461a      	mov	r2, r3
    c790:	9b04      	ldr	r3, [sp, #16]
    c792:	4413      	add	r3, r2
    c794:	3b30      	subs	r3, #48	; 0x30
    c796:	9304      	str	r3, [sp, #16]
        pcStr++;
    c798:	9b01      	ldr	r3, [sp, #4]
    c79a:	3301      	adds	r3, #1
    c79c:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c79e:	9b01      	ldr	r3, [sp, #4]
    c7a0:	781b      	ldrb	r3, [r3, #0]
    c7a2:	2b2f      	cmp	r3, #47	; 0x2f
    c7a4:	d903      	bls.n	c7ae <decstr_to_int+0x66>
    c7a6:	9b01      	ldr	r3, [sp, #4]
    c7a8:	781b      	ldrb	r3, [r3, #0]
    c7aa:	2b39      	cmp	r3, #57	; 0x39
    c7ac:	d9e4      	bls.n	c778 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c7ae:	9b00      	ldr	r3, [sp, #0]
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	d002      	beq.n	c7ba <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c7b4:	9b00      	ldr	r3, [sp, #0]
    c7b6:	9a03      	ldr	r2, [sp, #12]
    c7b8:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c7ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c7be:	2b00      	cmp	r3, #0
    c7c0:	d002      	beq.n	c7c8 <decstr_to_int+0x80>
    c7c2:	9b04      	ldr	r3, [sp, #16]
    c7c4:	425b      	negs	r3, r3
    c7c6:	e000      	b.n	c7ca <decstr_to_int+0x82>
    c7c8:	9b04      	ldr	r3, [sp, #16]
}
    c7ca:	4618      	mov	r0, r3
    c7cc:	b006      	add	sp, #24
    c7ce:	4770      	bx	lr

0000c7d0 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c7d0:	b500      	push	{lr}
    c7d2:	b091      	sub	sp, #68	; 0x44
    c7d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c7d8:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c7da:	2300      	movs	r3, #0
    c7dc:	930f      	str	r3, [sp, #60]	; 0x3c
    c7de:	2300      	movs	r3, #0
    c7e0:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c7e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c7e6:	f7ff fe5d 	bl	c4a4 <divu64_10>
    c7ea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c7ee:	9902      	ldr	r1, [sp, #8]
    c7f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c7f2:	4613      	mov	r3, r2
    c7f4:	009b      	lsls	r3, r3, #2
    c7f6:	4413      	add	r3, r2
    c7f8:	005b      	lsls	r3, r3, #1
    c7fa:	1acb      	subs	r3, r1, r3
    c7fc:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c7fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c800:	b2da      	uxtb	r2, r3
    c802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c804:	1c59      	adds	r1, r3, #1
    c806:	910f      	str	r1, [sp, #60]	; 0x3c
    c808:	3230      	adds	r2, #48	; 0x30
    c80a:	b2d2      	uxtb	r2, r2
    c80c:	3340      	adds	r3, #64	; 0x40
    c80e:	446b      	add	r3, sp
    c810:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c814:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c818:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c81c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c820:	4313      	orrs	r3, r2
    c822:	d1de      	bne.n	c7e2 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c826:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c828:	9b01      	ldr	r3, [sp, #4]
    c82a:	2b00      	cmp	r3, #0
    c82c:	d010      	beq.n	c850 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c82e:	e007      	b.n	c840 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c830:	9b01      	ldr	r3, [sp, #4]
    c832:	1c5a      	adds	r2, r3, #1
    c834:	9201      	str	r2, [sp, #4]
    c836:	a904      	add	r1, sp, #16
    c838:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c83a:	440a      	add	r2, r1
    c83c:	7812      	ldrb	r2, [r2, #0]
    c83e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c842:	1e5a      	subs	r2, r3, #1
    c844:	920f      	str	r2, [sp, #60]	; 0x3c
    c846:	2b00      	cmp	r3, #0
    c848:	d1f2      	bne.n	c830 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c84a:	9b01      	ldr	r3, [sp, #4]
    c84c:	2200      	movs	r2, #0
    c84e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c852:	4618      	mov	r0, r3
    c854:	b011      	add	sp, #68	; 0x44
    c856:	f85d fb04 	ldr.w	pc, [sp], #4

0000c85a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c85a:	b08c      	sub	sp, #48	; 0x30
    c85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c860:	9201      	str	r2, [sp, #4]
    c862:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c866:	2300      	movs	r3, #0
    c868:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c86a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c86e:	4313      	orrs	r3, r2
    c870:	d135      	bne.n	c8de <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c874:	1c5a      	adds	r2, r3, #1
    c876:	920b      	str	r2, [sp, #44]	; 0x2c
    c878:	3330      	adds	r3, #48	; 0x30
    c87a:	446b      	add	r3, sp
    c87c:	2230      	movs	r2, #48	; 0x30
    c87e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c882:	e02c      	b.n	c8de <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c884:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c888:	f003 030f 	and.w	r3, r3, #15
    c88c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c890:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c894:	2b09      	cmp	r3, #9
    c896:	d90b      	bls.n	c8b0 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c898:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c89c:	2b00      	cmp	r3, #0
    c89e:	d001      	beq.n	c8a4 <uint64_to_hexstr+0x4a>
    c8a0:	2227      	movs	r2, #39	; 0x27
    c8a2:	e000      	b.n	c8a6 <uint64_to_hexstr+0x4c>
    c8a4:	2207      	movs	r2, #7
    c8a6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c8aa:	4413      	add	r3, r2
    c8ac:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8b2:	1c5a      	adds	r2, r3, #1
    c8b4:	920b      	str	r2, [sp, #44]	; 0x2c
    c8b6:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c8ba:	3230      	adds	r2, #48	; 0x30
    c8bc:	b2d2      	uxtb	r2, r2
    c8be:	3330      	adds	r3, #48	; 0x30
    c8c0:	446b      	add	r3, sp
    c8c2:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c8ca:	f04f 0200 	mov.w	r2, #0
    c8ce:	f04f 0300 	mov.w	r3, #0
    c8d2:	0902      	lsrs	r2, r0, #4
    c8d4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c8d8:	090b      	lsrs	r3, r1, #4
    c8da:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c8de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c8e2:	4313      	orrs	r3, r2
    c8e4:	d1ce      	bne.n	c884 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c8e8:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c8ea:	9b01      	ldr	r3, [sp, #4]
    c8ec:	2b00      	cmp	r3, #0
    c8ee:	d010      	beq.n	c912 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    c8f0:	e007      	b.n	c902 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    c8f2:	9b01      	ldr	r3, [sp, #4]
    c8f4:	1c5a      	adds	r2, r3, #1
    c8f6:	9201      	str	r2, [sp, #4]
    c8f8:	a904      	add	r1, sp, #16
    c8fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c8fc:	440a      	add	r2, r1
    c8fe:	7812      	ldrb	r2, [r2, #0]
    c900:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c904:	1e5a      	subs	r2, r3, #1
    c906:	920b      	str	r2, [sp, #44]	; 0x2c
    c908:	2b00      	cmp	r3, #0
    c90a:	d1f2      	bne.n	c8f2 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c90c:	9b01      	ldr	r3, [sp, #4]
    c90e:	2200      	movs	r2, #0
    c910:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c912:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c914:	4618      	mov	r0, r3
    c916:	b00c      	add	sp, #48	; 0x30
    c918:	4770      	bx	lr

0000c91a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c91a:	b084      	sub	sp, #16
    c91c:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    c91e:	2300      	movs	r3, #0
    c920:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    c922:	9b01      	ldr	r3, [sp, #4]
    c924:	2b00      	cmp	r3, #0
    c926:	d104      	bne.n	c932 <simple_strlen+0x18>
    {
        return ui32RetVal;
    c928:	9b03      	ldr	r3, [sp, #12]
    c92a:	e009      	b.n	c940 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c92c:	9b03      	ldr	r3, [sp, #12]
    c92e:	3301      	adds	r3, #1
    c930:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    c932:	9b01      	ldr	r3, [sp, #4]
    c934:	1c5a      	adds	r2, r3, #1
    c936:	9201      	str	r2, [sp, #4]
    c938:	781b      	ldrb	r3, [r3, #0]
    c93a:	2b00      	cmp	r3, #0
    c93c:	d1f6      	bne.n	c92c <simple_strlen+0x12>
    }
    return ui32RetVal;
    c93e:	9b03      	ldr	r3, [sp, #12]
}
    c940:	4618      	mov	r0, r3
    c942:	b004      	add	sp, #16
    c944:	4770      	bx	lr

0000c946 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c946:	b086      	sub	sp, #24
    c948:	9003      	str	r0, [sp, #12]
    c94a:	460b      	mov	r3, r1
    c94c:	9201      	str	r2, [sp, #4]
    c94e:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    c952:	2300      	movs	r3, #0
    c954:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    c956:	9b01      	ldr	r3, [sp, #4]
    c958:	2b00      	cmp	r3, #0
    c95a:	dc0d      	bgt.n	c978 <padbuffer+0x32>
    {
        return i32Cnt;
    c95c:	9b05      	ldr	r3, [sp, #20]
    c95e:	e011      	b.n	c984 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c960:	9b03      	ldr	r3, [sp, #12]
    c962:	2b00      	cmp	r3, #0
    c964:	d005      	beq.n	c972 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c966:	9b03      	ldr	r3, [sp, #12]
    c968:	1c5a      	adds	r2, r3, #1
    c96a:	9203      	str	r2, [sp, #12]
    c96c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c970:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c972:	9b05      	ldr	r3, [sp, #20]
    c974:	3301      	adds	r3, #1
    c976:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    c978:	9b01      	ldr	r3, [sp, #4]
    c97a:	1e5a      	subs	r2, r3, #1
    c97c:	9201      	str	r2, [sp, #4]
    c97e:	2b00      	cmp	r3, #0
    c980:	d1ee      	bne.n	c960 <padbuffer+0x1a>
    }

    return i32Cnt;
    c982:	9b05      	ldr	r3, [sp, #20]
}
    c984:	4618      	mov	r0, r3
    c986:	b006      	add	sp, #24
    c988:	4770      	bx	lr
	...

0000c98c <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c98c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c98e:	b08f      	sub	sp, #60	; 0x3c
    c990:	ed8d 0a03 	vstr	s0, [sp, #12]
    c994:	9002      	str	r0, [sp, #8]
    c996:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c998:	9b02      	ldr	r3, [sp, #8]
    c99a:	681b      	ldr	r3, [r3, #0]
    c99c:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    c99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9a0:	2b03      	cmp	r3, #3
    c9a2:	dc02      	bgt.n	c9aa <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c9a4:	f06f 0302 	mvn.w	r3, #2
    c9a8:	e0e9      	b.n	cb7e <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    c9aa:	eddd 7a03 	vldr	s15, [sp, #12]
    c9ae:	eef5 7a40 	vcmp.f32	s15, #0.0
    c9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c9b6:	d104      	bne.n	c9c2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c9b8:	9b02      	ldr	r3, [sp, #8]
    c9ba:	4a72      	ldr	r2, [pc, #456]	; (cb84 <ftoa+0x1f8>)
    c9bc:	601a      	str	r2, [r3, #0]
        return 3;
    c9be:	2303      	movs	r3, #3
    c9c0:	e0dd      	b.n	cb7e <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    c9c2:	9b02      	ldr	r3, [sp, #8]
    c9c4:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    c9c6:	9b03      	ldr	r3, [sp, #12]
    c9c8:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c9ca:	9b04      	ldr	r3, [sp, #16]
    c9cc:	15db      	asrs	r3, r3, #23
    c9ce:	b2db      	uxtb	r3, r3
    c9d0:	3b7f      	subs	r3, #127	; 0x7f
    c9d2:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c9d4:	9b04      	ldr	r3, [sp, #16]
    c9d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c9da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c9de:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    c9e0:	2300      	movs	r3, #0
    c9e2:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    c9e4:	2300      	movs	r3, #0
    c9e6:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    c9e8:	9b07      	ldr	r3, [sp, #28]
    c9ea:	2b1e      	cmp	r3, #30
    c9ec:	dd02      	ble.n	c9f4 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c9ee:	f06f 0301 	mvn.w	r3, #1
    c9f2:	e0c4      	b.n	cb7e <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    c9f4:	9b07      	ldr	r3, [sp, #28]
    c9f6:	f113 0f17 	cmn.w	r3, #23
    c9fa:	da02      	bge.n	ca02 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c9fc:	f04f 33ff 	mov.w	r3, #4294967295
    ca00:	e0bd      	b.n	cb7e <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    ca02:	9b07      	ldr	r3, [sp, #28]
    ca04:	2b16      	cmp	r3, #22
    ca06:	dd06      	ble.n	ca16 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    ca08:	9b07      	ldr	r3, [sp, #28]
    ca0a:	3b17      	subs	r3, #23
    ca0c:	9a06      	ldr	r2, [sp, #24]
    ca0e:	fa02 f303 	lsl.w	r3, r2, r3
    ca12:	930d      	str	r3, [sp, #52]	; 0x34
    ca14:	e01a      	b.n	ca4c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    ca16:	9b07      	ldr	r3, [sp, #28]
    ca18:	2b00      	cmp	r3, #0
    ca1a:	db0f      	blt.n	ca3c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    ca1c:	9b07      	ldr	r3, [sp, #28]
    ca1e:	f1c3 0317 	rsb	r3, r3, #23
    ca22:	9a06      	ldr	r2, [sp, #24]
    ca24:	fa42 f303 	asr.w	r3, r2, r3
    ca28:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ca2a:	9b07      	ldr	r3, [sp, #28]
    ca2c:	3301      	adds	r3, #1
    ca2e:	9a06      	ldr	r2, [sp, #24]
    ca30:	fa02 f303 	lsl.w	r3, r2, r3
    ca34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ca38:	930c      	str	r3, [sp, #48]	; 0x30
    ca3a:	e007      	b.n	ca4c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ca3c:	9b06      	ldr	r3, [sp, #24]
    ca3e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ca42:	9b07      	ldr	r3, [sp, #28]
    ca44:	43db      	mvns	r3, r3
    ca46:	fa42 f303 	asr.w	r3, r2, r3
    ca4a:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    ca4c:	9b04      	ldr	r3, [sp, #16]
    ca4e:	2b00      	cmp	r3, #0
    ca50:	da04      	bge.n	ca5c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    ca52:	9b02      	ldr	r3, [sp, #8]
    ca54:	1c5a      	adds	r2, r3, #1
    ca56:	9202      	str	r2, [sp, #8]
    ca58:	222d      	movs	r2, #45	; 0x2d
    ca5a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ca5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d105      	bne.n	ca6e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    ca62:	9b02      	ldr	r3, [sp, #8]
    ca64:	1c5a      	adds	r2, r3, #1
    ca66:	9202      	str	r2, [sp, #8]
    ca68:	2230      	movs	r2, #48	; 0x30
    ca6a:	701a      	strb	r2, [r3, #0]
    ca6c:	e023      	b.n	cab6 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    ca6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca70:	2b00      	cmp	r3, #0
    ca72:	dd09      	ble.n	ca88 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ca74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca76:	17da      	asrs	r2, r3, #31
    ca78:	461e      	mov	r6, r3
    ca7a:	4617      	mov	r7, r2
    ca7c:	9a02      	ldr	r2, [sp, #8]
    ca7e:	4630      	mov	r0, r6
    ca80:	4639      	mov	r1, r7
    ca82:	f7ff fea5 	bl	c7d0 <uint64_to_str>
    ca86:	e012      	b.n	caae <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    ca88:	9b02      	ldr	r3, [sp, #8]
    ca8a:	1c5a      	adds	r2, r3, #1
    ca8c:	9202      	str	r2, [sp, #8]
    ca8e:	222d      	movs	r2, #45	; 0x2d
    ca90:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ca92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca94:	425b      	negs	r3, r3
    ca96:	17da      	asrs	r2, r3, #31
    ca98:	461c      	mov	r4, r3
    ca9a:	4615      	mov	r5, r2
    ca9c:	9a02      	ldr	r2, [sp, #8]
    ca9e:	4620      	mov	r0, r4
    caa0:	4629      	mov	r1, r5
    caa2:	f7ff fe95 	bl	c7d0 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    caa6:	e002      	b.n	caae <ftoa+0x122>
        {
            pcBuf++;
    caa8:	9b02      	ldr	r3, [sp, #8]
    caaa:	3301      	adds	r3, #1
    caac:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    caae:	9b02      	ldr	r3, [sp, #8]
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	2b00      	cmp	r3, #0
    cab4:	d1f8      	bne.n	caa8 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cab6:	9b02      	ldr	r3, [sp, #8]
    cab8:	1c5a      	adds	r2, r3, #1
    caba:	9202      	str	r2, [sp, #8]
    cabc:	222e      	movs	r2, #46	; 0x2e
    cabe:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cac2:	2b00      	cmp	r3, #0
    cac4:	d105      	bne.n	cad2 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cac6:	9b02      	ldr	r3, [sp, #8]
    cac8:	1c5a      	adds	r2, r3, #1
    caca:	9202      	str	r2, [sp, #8]
    cacc:	2230      	movs	r2, #48	; 0x30
    cace:	701a      	strb	r2, [r3, #0]
    cad0:	e04f      	b.n	cb72 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cad2:	9a02      	ldr	r2, [sp, #8]
    cad4:	9b08      	ldr	r3, [sp, #32]
    cad6:	1ad3      	subs	r3, r2, r3
    cad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cada:	1ad3      	subs	r3, r2, r3
    cadc:	3b01      	subs	r3, #1
    cade:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cae0:	9a05      	ldr	r2, [sp, #20]
    cae2:	9b01      	ldr	r3, [sp, #4]
    cae4:	4293      	cmp	r3, r2
    cae6:	bfa8      	it	ge
    cae8:	4613      	movge	r3, r2
    caea:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    caec:	2300      	movs	r3, #0
    caee:	930a      	str	r3, [sp, #40]	; 0x28
    caf0:	e015      	b.n	cb1e <ftoa+0x192>
        {
            i32FracPart *= 10;
    caf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    caf4:	4613      	mov	r3, r2
    caf6:	009b      	lsls	r3, r3, #2
    caf8:	4413      	add	r3, r2
    cafa:	005b      	lsls	r3, r3, #1
    cafc:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cafe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb00:	161b      	asrs	r3, r3, #24
    cb02:	b2da      	uxtb	r2, r3
    cb04:	9b02      	ldr	r3, [sp, #8]
    cb06:	1c59      	adds	r1, r3, #1
    cb08:	9102      	str	r1, [sp, #8]
    cb0a:	3230      	adds	r2, #48	; 0x30
    cb0c:	b2d2      	uxtb	r2, r2
    cb0e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cb10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb16:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cb18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb1a:	3301      	adds	r3, #1
    cb1c:	930a      	str	r3, [sp, #40]	; 0x28
    cb1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cb20:	9b05      	ldr	r3, [sp, #20]
    cb22:	429a      	cmp	r2, r3
    cb24:	dbe5      	blt.n	caf2 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cb26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cb28:	4613      	mov	r3, r2
    cb2a:	009b      	lsls	r3, r3, #2
    cb2c:	4413      	add	r3, r2
    cb2e:	005b      	lsls	r3, r3, #1
    cb30:	161b      	asrs	r3, r3, #24
    cb32:	2b04      	cmp	r3, #4
    cb34:	dd1d      	ble.n	cb72 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cb36:	9b02      	ldr	r3, [sp, #8]
    cb38:	3b01      	subs	r3, #1
    cb3a:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb3c:	e015      	b.n	cb6a <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cb3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb40:	781b      	ldrb	r3, [r3, #0]
    cb42:	2b2e      	cmp	r3, #46	; 0x2e
    cb44:	d00e      	beq.n	cb64 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cb46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb48:	781b      	ldrb	r3, [r3, #0]
    cb4a:	2b39      	cmp	r3, #57	; 0x39
    cb4c:	d103      	bne.n	cb56 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb50:	2230      	movs	r2, #48	; 0x30
    cb52:	701a      	strb	r2, [r3, #0]
    cb54:	e006      	b.n	cb64 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cb56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb58:	781b      	ldrb	r3, [r3, #0]
    cb5a:	3301      	adds	r3, #1
    cb5c:	b2da      	uxtb	r2, r3
    cb5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb60:	701a      	strb	r2, [r3, #0]
                    break;
    cb62:	e006      	b.n	cb72 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cb64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb66:	3b01      	subs	r3, #1
    cb68:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cb6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cb6c:	9b08      	ldr	r3, [sp, #32]
    cb6e:	429a      	cmp	r2, r3
    cb70:	d2e5      	bcs.n	cb3e <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cb72:	9b02      	ldr	r3, [sp, #8]
    cb74:	2200      	movs	r2, #0
    cb76:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cb78:	9a02      	ldr	r2, [sp, #8]
    cb7a:	9b08      	ldr	r3, [sp, #32]
    cb7c:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cb7e:	4618      	mov	r0, r3
    cb80:	b00f      	add	sp, #60	; 0x3c
    cb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb84:	00302e30 	.word	0x00302e30

0000cb88 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb8c:	b097      	sub	sp, #92	; 0x5c
    cb8e:	9003      	str	r0, [sp, #12]
    cb90:	9102      	str	r1, [sp, #8]
    cb92:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cb94:	2300      	movs	r3, #0
    cb96:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cb98:	2300      	movs	r3, #0
    cb9a:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cb9c:	e2e9      	b.n	d172 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cb9e:	2306      	movs	r3, #6
    cba0:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cba2:	9b02      	ldr	r3, [sp, #8]
    cba4:	781b      	ldrb	r3, [r3, #0]
    cba6:	2b25      	cmp	r3, #37	; 0x25
    cba8:	d01f      	beq.n	cbea <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cbaa:	9b03      	ldr	r3, [sp, #12]
    cbac:	2b00      	cmp	r3, #0
    cbae:	d015      	beq.n	cbdc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cbb0:	9b02      	ldr	r3, [sp, #8]
    cbb2:	781b      	ldrb	r3, [r3, #0]
    cbb4:	2b0a      	cmp	r3, #10
    cbb6:	d10b      	bne.n	cbd0 <am_util_stdio_vsprintf+0x48>
    cbb8:	4ba8      	ldr	r3, [pc, #672]	; (ce5c <am_util_stdio_vsprintf+0x2d4>)
    cbba:	781b      	ldrb	r3, [r3, #0]
    cbbc:	2b00      	cmp	r3, #0
    cbbe:	d007      	beq.n	cbd0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cbc0:	9b03      	ldr	r3, [sp, #12]
    cbc2:	1c5a      	adds	r2, r3, #1
    cbc4:	9203      	str	r2, [sp, #12]
    cbc6:	220d      	movs	r2, #13
    cbc8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cbca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cbcc:	3301      	adds	r3, #1
    cbce:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cbd0:	9b03      	ldr	r3, [sp, #12]
    cbd2:	1c5a      	adds	r2, r3, #1
    cbd4:	9203      	str	r2, [sp, #12]
    cbd6:	9a02      	ldr	r2, [sp, #8]
    cbd8:	7812      	ldrb	r2, [r2, #0]
    cbda:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cbdc:	9b02      	ldr	r3, [sp, #8]
    cbde:	3301      	adds	r3, #1
    cbe0:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cbe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cbe4:	3301      	adds	r3, #1
    cbe6:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cbe8:	e2c3      	b.n	d172 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cbea:	9b02      	ldr	r3, [sp, #8]
    cbec:	3301      	adds	r3, #1
    cbee:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cbf0:	2300      	movs	r3, #0
    cbf2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cbf6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cbfa:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cbfe:	2320      	movs	r3, #32
    cc00:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cc04:	9b02      	ldr	r3, [sp, #8]
    cc06:	781b      	ldrb	r3, [r3, #0]
    cc08:	2b30      	cmp	r3, #48	; 0x30
    cc0a:	d105      	bne.n	cc18 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cc0c:	2330      	movs	r3, #48	; 0x30
    cc0e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cc12:	9b02      	ldr	r3, [sp, #8]
    cc14:	3301      	adds	r3, #1
    cc16:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cc18:	ab05      	add	r3, sp, #20
    cc1a:	4619      	mov	r1, r3
    cc1c:	9802      	ldr	r0, [sp, #8]
    cc1e:	f7ff fd93 	bl	c748 <decstr_to_int>
    cc22:	4603      	mov	r3, r0
    cc24:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cc26:	9b05      	ldr	r3, [sp, #20]
    cc28:	9a02      	ldr	r2, [sp, #8]
    cc2a:	4413      	add	r3, r2
    cc2c:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cc2e:	9b02      	ldr	r3, [sp, #8]
    cc30:	781b      	ldrb	r3, [r3, #0]
    cc32:	2b73      	cmp	r3, #115	; 0x73
    cc34:	d005      	beq.n	cc42 <am_util_stdio_vsprintf+0xba>
    cc36:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc38:	2b00      	cmp	r3, #0
    cc3a:	da02      	bge.n	cc42 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cc3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc3e:	425b      	negs	r3, r3
    cc40:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cc42:	9b02      	ldr	r3, [sp, #8]
    cc44:	781b      	ldrb	r3, [r3, #0]
    cc46:	2b2e      	cmp	r3, #46	; 0x2e
    cc48:	d10d      	bne.n	cc66 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cc4a:	9b02      	ldr	r3, [sp, #8]
    cc4c:	3301      	adds	r3, #1
    cc4e:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cc50:	ab05      	add	r3, sp, #20
    cc52:	4619      	mov	r1, r3
    cc54:	9802      	ldr	r0, [sp, #8]
    cc56:	f7ff fd77 	bl	c748 <decstr_to_int>
    cc5a:	4603      	mov	r3, r0
    cc5c:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cc5e:	9b05      	ldr	r3, [sp, #20]
    cc60:	9a02      	ldr	r2, [sp, #8]
    cc62:	4413      	add	r3, r2
    cc64:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cc66:	9b02      	ldr	r3, [sp, #8]
    cc68:	781b      	ldrb	r3, [r3, #0]
    cc6a:	2b6c      	cmp	r3, #108	; 0x6c
    cc6c:	d10c      	bne.n	cc88 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cc6e:	9b02      	ldr	r3, [sp, #8]
    cc70:	3301      	adds	r3, #1
    cc72:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cc74:	9b02      	ldr	r3, [sp, #8]
    cc76:	781b      	ldrb	r3, [r3, #0]
    cc78:	2b6c      	cmp	r3, #108	; 0x6c
    cc7a:	d105      	bne.n	cc88 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cc7c:	9b02      	ldr	r3, [sp, #8]
    cc7e:	3301      	adds	r3, #1
    cc80:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cc82:	2301      	movs	r3, #1
    cc84:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cc88:	9b02      	ldr	r3, [sp, #8]
    cc8a:	781b      	ldrb	r3, [r3, #0]
    cc8c:	3b46      	subs	r3, #70	; 0x46
    cc8e:	2b32      	cmp	r3, #50	; 0x32
    cc90:	f200 825c 	bhi.w	d14c <am_util_stdio_vsprintf+0x5c4>
    cc94:	a201      	add	r2, pc, #4	; (adr r2, cc9c <am_util_stdio_vsprintf+0x114>)
    cc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc9a:	bf00      	nop
    cc9c:	0000d0d3 	.word	0x0000d0d3
    cca0:	0000d14d 	.word	0x0000d14d
    cca4:	0000d14d 	.word	0x0000d14d
    cca8:	0000d14d 	.word	0x0000d14d
    ccac:	0000d14d 	.word	0x0000d14d
    ccb0:	0000d14d 	.word	0x0000d14d
    ccb4:	0000d14d 	.word	0x0000d14d
    ccb8:	0000d14d 	.word	0x0000d14d
    ccbc:	0000d14d 	.word	0x0000d14d
    ccc0:	0000d14d 	.word	0x0000d14d
    ccc4:	0000d14d 	.word	0x0000d14d
    ccc8:	0000d14d 	.word	0x0000d14d
    cccc:	0000d14d 	.word	0x0000d14d
    ccd0:	0000d14d 	.word	0x0000d14d
    ccd4:	0000d14d 	.word	0x0000d14d
    ccd8:	0000d14d 	.word	0x0000d14d
    ccdc:	0000d14d 	.word	0x0000d14d
    cce0:	0000d14d 	.word	0x0000d14d
    cce4:	0000ce67 	.word	0x0000ce67
    cce8:	0000d14d 	.word	0x0000d14d
    ccec:	0000d14d 	.word	0x0000d14d
    ccf0:	0000d14d 	.word	0x0000d14d
    ccf4:	0000d14d 	.word	0x0000d14d
    ccf8:	0000d14d 	.word	0x0000d14d
    ccfc:	0000d14d 	.word	0x0000d14d
    cd00:	0000d14d 	.word	0x0000d14d
    cd04:	0000d14d 	.word	0x0000d14d
    cd08:	0000d14d 	.word	0x0000d14d
    cd0c:	0000d14d 	.word	0x0000d14d
    cd10:	0000cd69 	.word	0x0000cd69
    cd14:	0000cf97 	.word	0x0000cf97
    cd18:	0000d14d 	.word	0x0000d14d
    cd1c:	0000d0d3 	.word	0x0000d0d3
    cd20:	0000d14d 	.word	0x0000d14d
    cd24:	0000d14d 	.word	0x0000d14d
    cd28:	0000cf97 	.word	0x0000cf97
    cd2c:	0000d14d 	.word	0x0000d14d
    cd30:	0000d14d 	.word	0x0000d14d
    cd34:	0000d14d 	.word	0x0000d14d
    cd38:	0000d14d 	.word	0x0000d14d
    cd3c:	0000d14d 	.word	0x0000d14d
    cd40:	0000d14d 	.word	0x0000d14d
    cd44:	0000d14d 	.word	0x0000d14d
    cd48:	0000d14d 	.word	0x0000d14d
    cd4c:	0000d14d 	.word	0x0000d14d
    cd50:	0000cd8f 	.word	0x0000cd8f
    cd54:	0000d14d 	.word	0x0000d14d
    cd58:	0000cf01 	.word	0x0000cf01
    cd5c:	0000d14d 	.word	0x0000d14d
    cd60:	0000d14d 	.word	0x0000d14d
    cd64:	0000ce61 	.word	0x0000ce61
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cd68:	9b01      	ldr	r3, [sp, #4]
    cd6a:	1d1a      	adds	r2, r3, #4
    cd6c:	9201      	str	r2, [sp, #4]
    cd6e:	681b      	ldr	r3, [r3, #0]
    cd70:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cd74:	9b03      	ldr	r3, [sp, #12]
    cd76:	2b00      	cmp	r3, #0
    cd78:	d005      	beq.n	cd86 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cd7a:	9b03      	ldr	r3, [sp, #12]
    cd7c:	1c5a      	adds	r2, r3, #1
    cd7e:	9203      	str	r2, [sp, #12]
    cd80:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cd84:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cd86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd88:	3301      	adds	r3, #1
    cd8a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cd8c:	e1ee      	b.n	d16c <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cd8e:	9b01      	ldr	r3, [sp, #4]
    cd90:	1d1a      	adds	r2, r3, #4
    cd92:	9201      	str	r2, [sp, #4]
    cd94:	681b      	ldr	r3, [r3, #0]
    cd96:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cd98:	9815      	ldr	r0, [sp, #84]	; 0x54
    cd9a:	f7ff fdbe 	bl	c91a <simple_strlen>
    cd9e:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cda0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cda2:	2b00      	cmp	r3, #0
    cda4:	dd2e      	ble.n	ce04 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cda6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cda8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cdaa:	429a      	cmp	r2, r3
    cdac:	d22a      	bcs.n	ce04 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cdae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cdb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdb2:	1ad3      	subs	r3, r2, r3
    cdb4:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cdb6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cdba:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cdbc:	4619      	mov	r1, r3
    cdbe:	9803      	ldr	r0, [sp, #12]
    cdc0:	f7ff fdc1 	bl	c946 <padbuffer>
    cdc4:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cdc6:	9b03      	ldr	r3, [sp, #12]
    cdc8:	2b00      	cmp	r3, #0
    cdca:	d001      	beq.n	cdd0 <am_util_stdio_vsprintf+0x248>
    cdcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdce:	e000      	b.n	cdd2 <am_util_stdio_vsprintf+0x24a>
    cdd0:	2300      	movs	r3, #0
    cdd2:	9a03      	ldr	r2, [sp, #12]
    cdd4:	4413      	add	r3, r2
    cdd6:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cdd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdda:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cddc:	4413      	add	r3, r2
    cdde:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cde0:	2300      	movs	r3, #0
    cde2:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cde4:	e00e      	b.n	ce04 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cde6:	9b03      	ldr	r3, [sp, #12]
    cde8:	2b00      	cmp	r3, #0
    cdea:	d005      	beq.n	cdf8 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cdec:	9b03      	ldr	r3, [sp, #12]
    cdee:	1c5a      	adds	r2, r3, #1
    cdf0:	9203      	str	r2, [sp, #12]
    cdf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cdf4:	7812      	ldrb	r2, [r2, #0]
    cdf6:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cdf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cdfa:	3301      	adds	r3, #1
    cdfc:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cdfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce00:	3301      	adds	r3, #1
    ce02:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    ce04:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ce06:	781b      	ldrb	r3, [r3, #0]
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d1ec      	bne.n	cde6 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    ce0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce0e:	2b00      	cmp	r3, #0
    ce10:	f000 81a9 	beq.w	d166 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    ce14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce16:	425b      	negs	r3, r3
    ce18:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    ce1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ce1e:	429a      	cmp	r2, r3
    ce20:	f080 81a1 	bcs.w	d166 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    ce24:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce28:	1ad3      	subs	r3, r2, r3
    ce2a:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce2c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ce30:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce32:	4619      	mov	r1, r3
    ce34:	9803      	ldr	r0, [sp, #12]
    ce36:	f7ff fd86 	bl	c946 <padbuffer>
    ce3a:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    ce3c:	9b03      	ldr	r3, [sp, #12]
    ce3e:	2b00      	cmp	r3, #0
    ce40:	d001      	beq.n	ce46 <am_util_stdio_vsprintf+0x2be>
    ce42:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce44:	e000      	b.n	ce48 <am_util_stdio_vsprintf+0x2c0>
    ce46:	2300      	movs	r3, #0
    ce48:	9a03      	ldr	r2, [sp, #12]
    ce4a:	4413      	add	r3, r2
    ce4c:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    ce4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce50:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce52:	4413      	add	r3, r2
    ce54:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    ce56:	2300      	movs	r3, #0
    ce58:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    ce5a:	e184      	b.n	d166 <am_util_stdio_vsprintf+0x5de>
    ce5c:	1000113c 	.word	0x1000113c

            case 'x':
                bLower = true;
    ce60:	2301      	movs	r3, #1
    ce62:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce66:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce6a:	2b00      	cmp	r3, #0
    ce6c:	d009      	beq.n	ce82 <am_util_stdio_vsprintf+0x2fa>
    ce6e:	9b01      	ldr	r3, [sp, #4]
    ce70:	3307      	adds	r3, #7
    ce72:	f023 0307 	bic.w	r3, r3, #7
    ce76:	f103 0208 	add.w	r2, r3, #8
    ce7a:	9201      	str	r2, [sp, #4]
    ce7c:	e9d3 4500 	ldrd	r4, r5, [r3]
    ce80:	e006      	b.n	ce90 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    ce82:	9b01      	ldr	r3, [sp, #4]
    ce84:	1d1a      	adds	r2, r3, #4
    ce86:	9201      	str	r2, [sp, #4]
    ce88:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    ce8a:	2200      	movs	r2, #0
    ce8c:	461c      	mov	r4, r3
    ce8e:	4615      	mov	r5, r2
    ce90:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    ce94:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce96:	2b00      	cmp	r3, #0
    ce98:	d01e      	beq.n	ced8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    ce9a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce9e:	f7ff fc2f 	bl	c700 <ndigits_in_hex>
    cea2:	4602      	mov	r2, r0
    cea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cea6:	1a9b      	subs	r3, r3, r2
    cea8:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ceaa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ceae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ceb0:	4619      	mov	r1, r3
    ceb2:	9803      	ldr	r0, [sp, #12]
    ceb4:	f7ff fd47 	bl	c946 <padbuffer>
    ceb8:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ceba:	9b03      	ldr	r3, [sp, #12]
    cebc:	2b00      	cmp	r3, #0
    cebe:	d001      	beq.n	cec4 <am_util_stdio_vsprintf+0x33c>
    cec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cec2:	e000      	b.n	cec6 <am_util_stdio_vsprintf+0x33e>
    cec4:	2300      	movs	r3, #0
    cec6:	9a03      	ldr	r2, [sp, #12]
    cec8:	4413      	add	r3, r2
    ceca:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cece:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ced0:	4413      	add	r3, r2
    ced2:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    ced4:	2300      	movs	r3, #0
    ced6:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    ced8:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    cedc:	9a03      	ldr	r2, [sp, #12]
    cede:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cee2:	f7ff fcba 	bl	c85a <uint64_to_hexstr>
    cee6:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cee8:	9b03      	ldr	r3, [sp, #12]
    ceea:	2b00      	cmp	r3, #0
    ceec:	d003      	beq.n	cef6 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    ceee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cef0:	9a03      	ldr	r2, [sp, #12]
    cef2:	4413      	add	r3, r2
    cef4:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cef8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cefa:	4413      	add	r3, r2
    cefc:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cefe:	e135      	b.n	d16c <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf00:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cf04:	2b00      	cmp	r3, #0
    cf06:	d009      	beq.n	cf1c <am_util_stdio_vsprintf+0x394>
    cf08:	9b01      	ldr	r3, [sp, #4]
    cf0a:	3307      	adds	r3, #7
    cf0c:	f023 0307 	bic.w	r3, r3, #7
    cf10:	f103 0208 	add.w	r2, r3, #8
    cf14:	9201      	str	r2, [sp, #4]
    cf16:	e9d3 6700 	ldrd	r6, r7, [r3]
    cf1a:	e006      	b.n	cf2a <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    cf1c:	9b01      	ldr	r3, [sp, #4]
    cf1e:	1d1a      	adds	r2, r3, #4
    cf20:	9201      	str	r2, [sp, #4]
    cf22:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf24:	2200      	movs	r2, #0
    cf26:	461e      	mov	r6, r3
    cf28:	4617      	mov	r7, r2
    cf2a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    cf2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf30:	2b00      	cmp	r3, #0
    cf32:	d01e      	beq.n	cf72 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cf34:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf38:	f7ff fba8 	bl	c68c <ndigits_in_u64>
    cf3c:	4602      	mov	r2, r0
    cf3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf40:	1a9b      	subs	r3, r3, r2
    cf42:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf44:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf48:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf4a:	4619      	mov	r1, r3
    cf4c:	9803      	ldr	r0, [sp, #12]
    cf4e:	f7ff fcfa 	bl	c946 <padbuffer>
    cf52:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cf54:	9b03      	ldr	r3, [sp, #12]
    cf56:	2b00      	cmp	r3, #0
    cf58:	d001      	beq.n	cf5e <am_util_stdio_vsprintf+0x3d6>
    cf5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf5c:	e000      	b.n	cf60 <am_util_stdio_vsprintf+0x3d8>
    cf5e:	2300      	movs	r3, #0
    cf60:	9a03      	ldr	r2, [sp, #12]
    cf62:	4413      	add	r3, r2
    cf64:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cf66:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf68:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf6a:	4413      	add	r3, r2
    cf6c:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cf6e:	2300      	movs	r3, #0
    cf70:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf72:	9a03      	ldr	r2, [sp, #12]
    cf74:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf78:	f7ff fc2a 	bl	c7d0 <uint64_to_str>
    cf7c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cf7e:	9b03      	ldr	r3, [sp, #12]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d003      	beq.n	cf8c <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    cf84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf86:	9a03      	ldr	r2, [sp, #12]
    cf88:	4413      	add	r3, r2
    cf8a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cf8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf90:	4413      	add	r3, r2
    cf92:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cf94:	e0ea      	b.n	d16c <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cf96:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cf9a:	2b00      	cmp	r3, #0
    cf9c:	d009      	beq.n	cfb2 <am_util_stdio_vsprintf+0x42a>
    cf9e:	9b01      	ldr	r3, [sp, #4]
    cfa0:	3307      	adds	r3, #7
    cfa2:	f023 0307 	bic.w	r3, r3, #7
    cfa6:	f103 0208 	add.w	r2, r3, #8
    cfaa:	9201      	str	r2, [sp, #4]
    cfac:	e9d3 8900 	ldrd	r8, r9, [r3]
    cfb0:	e006      	b.n	cfc0 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    cfb2:	9b01      	ldr	r3, [sp, #4]
    cfb4:	1d1a      	adds	r2, r3, #4
    cfb6:	9201      	str	r2, [sp, #4]
    cfb8:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cfba:	17da      	asrs	r2, r3, #31
    cfbc:	4698      	mov	r8, r3
    cfbe:	4691      	mov	r9, r2
    cfc0:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    cfc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cfc8:	2b00      	cmp	r3, #0
    cfca:	da0c      	bge.n	cfe6 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    cfcc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cfd0:	2100      	movs	r1, #0
    cfd2:	f1d2 0a00 	rsbs	sl, r2, #0
    cfd6:	eb61 0b03 	sbc.w	fp, r1, r3
    cfda:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    cfde:	2301      	movs	r3, #1
    cfe0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    cfe4:	e006      	b.n	cff4 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    cfe6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    cfea:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    cfee:	2300      	movs	r3, #0
    cff0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    cff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cff6:	2b00      	cmp	r3, #0
    cff8:	d04a      	beq.n	d090 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cffa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cffe:	4610      	mov	r0, r2
    d000:	4619      	mov	r1, r3
    d002:	f7ff fb63 	bl	c6cc <ndigits_in_i64>
    d006:	4602      	mov	r2, r0
    d008:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d00a:	1a9b      	subs	r3, r3, r2
    d00c:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d00e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d012:	2b00      	cmp	r3, #0
    d014:	d011      	beq.n	d03a <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d016:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d018:	3b01      	subs	r3, #1
    d01a:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d01c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d020:	2b30      	cmp	r3, #48	; 0x30
    d022:	d10a      	bne.n	d03a <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d024:	9b03      	ldr	r3, [sp, #12]
    d026:	2b00      	cmp	r3, #0
    d028:	d004      	beq.n	d034 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d02a:	9b03      	ldr	r3, [sp, #12]
    d02c:	1c5a      	adds	r2, r3, #1
    d02e:	9203      	str	r2, [sp, #12]
    d030:	222d      	movs	r2, #45	; 0x2d
    d032:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d034:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d036:	3301      	adds	r3, #1
    d038:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d03a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d03e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d040:	4619      	mov	r1, r3
    d042:	9803      	ldr	r0, [sp, #12]
    d044:	f7ff fc7f 	bl	c946 <padbuffer>
    d048:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d04a:	9b03      	ldr	r3, [sp, #12]
    d04c:	2b00      	cmp	r3, #0
    d04e:	d001      	beq.n	d054 <am_util_stdio_vsprintf+0x4cc>
    d050:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d052:	e000      	b.n	d056 <am_util_stdio_vsprintf+0x4ce>
    d054:	2300      	movs	r3, #0
    d056:	9a03      	ldr	r2, [sp, #12]
    d058:	4413      	add	r3, r2
    d05a:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d05c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d05e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d060:	4413      	add	r3, r2
    d062:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d064:	2300      	movs	r3, #0
    d066:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d068:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d06c:	2b00      	cmp	r3, #0
    d06e:	d01e      	beq.n	d0ae <am_util_stdio_vsprintf+0x526>
    d070:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d074:	2b20      	cmp	r3, #32
    d076:	d11a      	bne.n	d0ae <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d078:	9b03      	ldr	r3, [sp, #12]
    d07a:	2b00      	cmp	r3, #0
    d07c:	d004      	beq.n	d088 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d07e:	9b03      	ldr	r3, [sp, #12]
    d080:	1c5a      	adds	r2, r3, #1
    d082:	9203      	str	r2, [sp, #12]
    d084:	222d      	movs	r2, #45	; 0x2d
    d086:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d088:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d08a:	3301      	adds	r3, #1
    d08c:	9311      	str	r3, [sp, #68]	; 0x44
    d08e:	e00e      	b.n	d0ae <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d090:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d094:	2b00      	cmp	r3, #0
    d096:	d00a      	beq.n	d0ae <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d098:	9b03      	ldr	r3, [sp, #12]
    d09a:	2b00      	cmp	r3, #0
    d09c:	d004      	beq.n	d0a8 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d09e:	9b03      	ldr	r3, [sp, #12]
    d0a0:	1c5a      	adds	r2, r3, #1
    d0a2:	9203      	str	r2, [sp, #12]
    d0a4:	222d      	movs	r2, #45	; 0x2d
    d0a6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d0a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d0aa:	3301      	adds	r3, #1
    d0ac:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d0ae:	9a03      	ldr	r2, [sp, #12]
    d0b0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0b4:	f7ff fb8c 	bl	c7d0 <uint64_to_str>
    d0b8:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d0ba:	9b03      	ldr	r3, [sp, #12]
    d0bc:	2b00      	cmp	r3, #0
    d0be:	d003      	beq.n	d0c8 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d0c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0c2:	9a03      	ldr	r2, [sp, #12]
    d0c4:	4413      	add	r3, r2
    d0c6:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d0c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0cc:	4413      	add	r3, r2
    d0ce:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d0d0:	e04c      	b.n	d16c <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d0d2:	9b03      	ldr	r3, [sp, #12]
    d0d4:	2b00      	cmp	r3, #0
    d0d6:	d048      	beq.n	d16a <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d0d8:	9b01      	ldr	r3, [sp, #4]
    d0da:	3307      	adds	r3, #7
    d0dc:	f023 0307 	bic.w	r3, r3, #7
    d0e0:	f103 0208 	add.w	r2, r3, #8
    d0e4:	9201      	str	r2, [sp, #4]
    d0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    d0ea:	4610      	mov	r0, r2
    d0ec:	4619      	mov	r1, r3
    d0ee:	f7ff f807 	bl	c100 <__aeabi_d2f>
    d0f2:	4603      	mov	r3, r0
    d0f4:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d0f6:	9b03      	ldr	r3, [sp, #12]
    d0f8:	2214      	movs	r2, #20
    d0fa:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d0fc:	990e      	ldr	r1, [sp, #56]	; 0x38
    d0fe:	9803      	ldr	r0, [sp, #12]
    d100:	ed9d 0a06 	vldr	s0, [sp, #24]
    d104:	f7ff fc42 	bl	c98c <ftoa>
    d108:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d10a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d10c:	2b00      	cmp	r3, #0
    d10e:	da14      	bge.n	d13a <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d112:	f1b3 3fff 	cmp.w	r3, #4294967295
    d116:	d102      	bne.n	d11e <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d118:	4b1e      	ldr	r3, [pc, #120]	; (d194 <am_util_stdio_vsprintf+0x60c>)
    d11a:	930c      	str	r3, [sp, #48]	; 0x30
    d11c:	e008      	b.n	d130 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d11e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d120:	f113 0f02 	cmn.w	r3, #2
    d124:	d102      	bne.n	d12c <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d126:	4b1c      	ldr	r3, [pc, #112]	; (d198 <am_util_stdio_vsprintf+0x610>)
    d128:	930c      	str	r3, [sp, #48]	; 0x30
    d12a:	e001      	b.n	d130 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d12c:	4b1b      	ldr	r3, [pc, #108]	; (d19c <am_util_stdio_vsprintf+0x614>)
    d12e:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d130:	9b03      	ldr	r3, [sp, #12]
    d132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d134:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d136:	2303      	movs	r3, #3
    d138:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d13a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d13c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d13e:	4413      	add	r3, r2
    d140:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d144:	9a03      	ldr	r2, [sp, #12]
    d146:	4413      	add	r3, r2
    d148:	9303      	str	r3, [sp, #12]
                }
                break;
    d14a:	e00e      	b.n	d16a <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d14c:	9b03      	ldr	r3, [sp, #12]
    d14e:	2b00      	cmp	r3, #0
    d150:	d005      	beq.n	d15e <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d152:	9b03      	ldr	r3, [sp, #12]
    d154:	1c5a      	adds	r2, r3, #1
    d156:	9203      	str	r2, [sp, #12]
    d158:	9a02      	ldr	r2, [sp, #8]
    d15a:	7812      	ldrb	r2, [r2, #0]
    d15c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d15e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d160:	3301      	adds	r3, #1
    d162:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d164:	e002      	b.n	d16c <am_util_stdio_vsprintf+0x5e4>
                break;
    d166:	bf00      	nop
    d168:	e000      	b.n	d16c <am_util_stdio_vsprintf+0x5e4>
                break;
    d16a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d16c:	9b02      	ldr	r3, [sp, #8]
    d16e:	3301      	adds	r3, #1
    d170:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d172:	9b02      	ldr	r3, [sp, #8]
    d174:	781b      	ldrb	r3, [r3, #0]
    d176:	2b00      	cmp	r3, #0
    d178:	f47f ad11 	bne.w	cb9e <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d17c:	9b03      	ldr	r3, [sp, #12]
    d17e:	2b00      	cmp	r3, #0
    d180:	d002      	beq.n	d188 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d182:	9b03      	ldr	r3, [sp, #12]
    d184:	2200      	movs	r2, #0
    d186:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d188:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d18a:	4618      	mov	r0, r3
    d18c:	b017      	add	sp, #92	; 0x5c
    d18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d192:	bf00      	nop
    d194:	00302e30 	.word	0x00302e30
    d198:	00232e23 	.word	0x00232e23
    d19c:	003f2e3f 	.word	0x003f2e3f

0000d1a0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d1a0:	b40f      	push	{r0, r1, r2, r3}
    d1a2:	b500      	push	{lr}
    d1a4:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d1a6:	4b0c      	ldr	r3, [pc, #48]	; (d1d8 <am_util_stdio_printf+0x38>)
    d1a8:	681b      	ldr	r3, [r3, #0]
    d1aa:	2b00      	cmp	r3, #0
    d1ac:	d101      	bne.n	d1b2 <am_util_stdio_printf+0x12>
    {
        return 0;
    d1ae:	2300      	movs	r3, #0
    d1b0:	e00c      	b.n	d1cc <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d1b2:	ab05      	add	r3, sp, #20
    d1b4:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d1b6:	9a00      	ldr	r2, [sp, #0]
    d1b8:	9904      	ldr	r1, [sp, #16]
    d1ba:	4808      	ldr	r0, [pc, #32]	; (d1dc <am_util_stdio_printf+0x3c>)
    d1bc:	f7ff fce4 	bl	cb88 <am_util_stdio_vsprintf>
    d1c0:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d1c2:	4b05      	ldr	r3, [pc, #20]	; (d1d8 <am_util_stdio_printf+0x38>)
    d1c4:	681b      	ldr	r3, [r3, #0]
    d1c6:	4805      	ldr	r0, [pc, #20]	; (d1dc <am_util_stdio_printf+0x3c>)
    d1c8:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d1ca:	9b01      	ldr	r3, [sp, #4]
}
    d1cc:	4618      	mov	r0, r3
    d1ce:	b003      	add	sp, #12
    d1d0:	f85d eb04 	ldr.w	lr, [sp], #4
    d1d4:	b004      	add	sp, #16
    d1d6:	4770      	bx	lr
    d1d8:	10001038 	.word	0x10001038
    d1dc:	1000103c 	.word	0x1000103c

0000d1e0 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d1e0:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d1e2:	4802      	ldr	r0, [pc, #8]	; (d1ec <am_util_stdio_terminal_clear+0xc>)
    d1e4:	f7ff ffdc 	bl	d1a0 <am_util_stdio_printf>
}
    d1e8:	bf00      	nop
    d1ea:	bd08      	pop	{r3, pc}
    d1ec:	0000edac 	.word	0x0000edac

0000d1f0 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    d1f0:	b500      	push	{lr}
    d1f2:	b083      	sub	sp, #12
    d1f4:	9001      	str	r0, [sp, #4]
    if ( (psLED == NULL)    ||
    d1f6:	9b01      	ldr	r3, [sp, #4]
    d1f8:	2b00      	cmp	r3, #0
    d1fa:	d03d      	beq.n	d278 <am_devices_led_init+0x88>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d1fc:	9b01      	ldr	r3, [sp, #4]
    d1fe:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    d200:	2b31      	cmp	r3, #49	; 0x31
    d202:	d839      	bhi.n	d278 <am_devices_led_init+0x88>
#else
#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    d204:	9b01      	ldr	r3, [sp, #4]
    d206:	685b      	ldr	r3, [r3, #4]
    d208:	f003 0302 	and.w	r3, r3, #2
    d20c:	2b00      	cmp	r3, #0
    d20e:	d019      	beq.n	d244 <am_devices_led_init+0x54>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    d210:	9b01      	ldr	r3, [sp, #4]
    d212:	681b      	ldr	r3, [r3, #0]
    d214:	4a1a      	ldr	r2, [pc, #104]	; (d280 <am_devices_led_init+0x90>)
    d216:	6811      	ldr	r1, [r2, #0]
    d218:	4618      	mov	r0, r3
    d21a:	f000 fc99 	bl	db50 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d21e:	9b01      	ldr	r3, [sp, #4]
    d220:	681b      	ldr	r3, [r3, #0]
    d222:	2103      	movs	r1, #3
    d224:	4618      	mov	r0, r3
    d226:	f000 fdff 	bl	de28 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d22a:	9b01      	ldr	r3, [sp, #4]
    d22c:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d22e:	9b01      	ldr	r3, [sp, #4]
    d230:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d232:	b2db      	uxtb	r3, r3
    d234:	f003 0301 	and.w	r3, r3, #1
    d238:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d23a:	4619      	mov	r1, r3
    d23c:	4610      	mov	r0, r2
    d23e:	f000 fdf3 	bl	de28 <am_hal_gpio_state_write>
    d242:	e01a      	b.n	d27a <am_devices_led_init+0x8a>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    d244:	9b01      	ldr	r3, [sp, #4]
    d246:	681b      	ldr	r3, [r3, #0]
    d248:	4a0e      	ldr	r2, [pc, #56]	; (d284 <am_devices_led_init+0x94>)
    d24a:	6811      	ldr	r1, [r2, #0]
    d24c:	4618      	mov	r0, r3
    d24e:	f000 fc7f 	bl	db50 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    d252:	9b01      	ldr	r3, [sp, #4]
    d254:	681b      	ldr	r3, [r3, #0]
    d256:	2103      	movs	r1, #3
    d258:	4618      	mov	r0, r3
    d25a:	f000 fde5 	bl	de28 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d25e:	9b01      	ldr	r3, [sp, #4]
    d260:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d262:	9b01      	ldr	r3, [sp, #4]
    d264:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d266:	b2db      	uxtb	r3, r3
    d268:	f003 0301 	and.w	r3, r3, #1
    d26c:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    d26e:	4619      	mov	r1, r3
    d270:	4610      	mov	r0, r2
    d272:	f000 fdd9 	bl	de28 <am_hal_gpio_state_write>
    d276:	e000      	b.n	d27a <am_devices_led_init+0x8a>
        return;
    d278:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    d27a:	b003      	add	sp, #12
    d27c:	f85d fb04 	ldr.w	pc, [sp], #4
    d280:	0000edfc 	.word	0x0000edfc
    d284:	0000ee00 	.word	0x0000ee00

0000d288 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    d288:	b500      	push	{lr}
    d28a:	b085      	sub	sp, #20
    d28c:	9001      	str	r0, [sp, #4]
    d28e:	9100      	str	r1, [sp, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    d290:	9b01      	ldr	r3, [sp, #4]
    d292:	2b00      	cmp	r3, #0
    d294:	d014      	beq.n	d2c0 <am_devices_led_array_init+0x38>
    d296:	9b00      	ldr	r3, [sp, #0]
    d298:	2b1f      	cmp	r3, #31
    d29a:	d811      	bhi.n	d2c0 <am_devices_led_array_init+0x38>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    d29c:	2300      	movs	r3, #0
    d29e:	9303      	str	r3, [sp, #12]
    d2a0:	e009      	b.n	d2b6 <am_devices_led_array_init+0x2e>
    {
        am_devices_led_init(psLEDs + i);
    d2a2:	9b03      	ldr	r3, [sp, #12]
    d2a4:	00db      	lsls	r3, r3, #3
    d2a6:	9a01      	ldr	r2, [sp, #4]
    d2a8:	4413      	add	r3, r2
    d2aa:	4618      	mov	r0, r3
    d2ac:	f7ff ffa0 	bl	d1f0 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    d2b0:	9b03      	ldr	r3, [sp, #12]
    d2b2:	3301      	adds	r3, #1
    d2b4:	9303      	str	r3, [sp, #12]
    d2b6:	9a03      	ldr	r2, [sp, #12]
    d2b8:	9b00      	ldr	r3, [sp, #0]
    d2ba:	429a      	cmp	r2, r3
    d2bc:	d3f1      	bcc.n	d2a2 <am_devices_led_array_init+0x1a>
    d2be:	e000      	b.n	d2c2 <am_devices_led_array_init+0x3a>
        return;
    d2c0:	bf00      	nop
    }
}
    d2c2:	b005      	add	sp, #20
    d2c4:	f85d fb04 	ldr.w	pc, [sp], #4

0000d2c8 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    d2c8:	b500      	push	{lr}
    d2ca:	b083      	sub	sp, #12
    d2cc:	9001      	str	r0, [sp, #4]
    d2ce:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    d2d0:	9b01      	ldr	r3, [sp, #4]
    d2d2:	2b00      	cmp	r3, #0
    d2d4:	d02e      	beq.n	d334 <am_devices_led_on+0x6c>
    d2d6:	9b00      	ldr	r3, [sp, #0]
    d2d8:	2b1e      	cmp	r3, #30
    d2da:	d82b      	bhi.n	d334 <am_devices_led_on+0x6c>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d2dc:	9b00      	ldr	r3, [sp, #0]
    d2de:	00db      	lsls	r3, r3, #3
    d2e0:	9a01      	ldr	r2, [sp, #4]
    d2e2:	4413      	add	r3, r2
    d2e4:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    d2e6:	2b31      	cmp	r3, #49	; 0x31
    d2e8:	d824      	bhi.n	d334 <am_devices_led_on+0x6c>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    d2ea:	9b00      	ldr	r3, [sp, #0]
    d2ec:	00db      	lsls	r3, r3, #3
    d2ee:	9a01      	ldr	r2, [sp, #4]
    d2f0:	4413      	add	r3, r2
    d2f2:	685b      	ldr	r3, [r3, #4]
    d2f4:	f003 0302 	and.w	r3, r3, #2
    d2f8:	2b00      	cmp	r3, #0
    d2fa:	d011      	beq.n	d320 <am_devices_led_on+0x58>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d2fc:	9b00      	ldr	r3, [sp, #0]
    d2fe:	00db      	lsls	r3, r3, #3
    d300:	9a01      	ldr	r2, [sp, #4]
    d302:	4413      	add	r3, r2
    d304:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d306:	9b00      	ldr	r3, [sp, #0]
    d308:	00db      	lsls	r3, r3, #3
    d30a:	9a01      	ldr	r2, [sp, #4]
    d30c:	4413      	add	r3, r2
    d30e:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    d310:	b2db      	uxtb	r3, r3
    d312:	f003 0301 	and.w	r3, r3, #1
    d316:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d318:	4619      	mov	r1, r3
    d31a:	f000 fd85 	bl	de28 <am_hal_gpio_state_write>
    d31e:	e00a      	b.n	d336 <am_devices_led_on+0x6e>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d320:	9b00      	ldr	r3, [sp, #0]
    d322:	00db      	lsls	r3, r3, #3
    d324:	9a01      	ldr	r2, [sp, #4]
    d326:	4413      	add	r3, r2
    d328:	681b      	ldr	r3, [r3, #0]
    d32a:	2104      	movs	r1, #4
    d32c:	4618      	mov	r0, r3
    d32e:	f000 fd7b 	bl	de28 <am_hal_gpio_state_write>
    d332:	e000      	b.n	d336 <am_devices_led_on+0x6e>
        return;
    d334:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    d336:	b003      	add	sp, #12
    d338:	f85d fb04 	ldr.w	pc, [sp], #4

0000d33c <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    d33c:	b500      	push	{lr}
    d33e:	b083      	sub	sp, #12
    d340:	9001      	str	r0, [sp, #4]
    d342:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    d344:	9b01      	ldr	r3, [sp, #4]
    d346:	2b00      	cmp	r3, #0
    d348:	d031      	beq.n	d3ae <am_devices_led_off+0x72>
    d34a:	9b00      	ldr	r3, [sp, #0]
    d34c:	2b1e      	cmp	r3, #30
    d34e:	d82e      	bhi.n	d3ae <am_devices_led_off+0x72>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d350:	9b00      	ldr	r3, [sp, #0]
    d352:	00db      	lsls	r3, r3, #3
    d354:	9a01      	ldr	r2, [sp, #4]
    d356:	4413      	add	r3, r2
    d358:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    d35a:	2b31      	cmp	r3, #49	; 0x31
    d35c:	d827      	bhi.n	d3ae <am_devices_led_off+0x72>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    d35e:	9b00      	ldr	r3, [sp, #0]
    d360:	00db      	lsls	r3, r3, #3
    d362:	9a01      	ldr	r2, [sp, #4]
    d364:	4413      	add	r3, r2
    d366:	685b      	ldr	r3, [r3, #4]
    d368:	f003 0302 	and.w	r3, r3, #2
    d36c:	2b00      	cmp	r3, #0
    d36e:	d014      	beq.n	d39a <am_devices_led_off+0x5e>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d370:	9b00      	ldr	r3, [sp, #0]
    d372:	00db      	lsls	r3, r3, #3
    d374:	9a01      	ldr	r2, [sp, #4]
    d376:	4413      	add	r3, r2
    d378:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    d37a:	9b00      	ldr	r3, [sp, #0]
    d37c:	00db      	lsls	r3, r3, #3
    d37e:	9a01      	ldr	r2, [sp, #4]
    d380:	4413      	add	r3, r2
    d382:	685b      	ldr	r3, [r3, #4]
    d384:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d388:	2b00      	cmp	r3, #0
    d38a:	bf0c      	ite	eq
    d38c:	2301      	moveq	r3, #1
    d38e:	2300      	movne	r3, #0
    d390:	b2db      	uxtb	r3, r3
    d392:	4619      	mov	r1, r3
    d394:	f000 fd48 	bl	de28 <am_hal_gpio_state_write>
    d398:	e00a      	b.n	d3b0 <am_devices_led_off+0x74>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d39a:	9b00      	ldr	r3, [sp, #0]
    d39c:	00db      	lsls	r3, r3, #3
    d39e:	9a01      	ldr	r2, [sp, #4]
    d3a0:	4413      	add	r3, r2
    d3a2:	681b      	ldr	r3, [r3, #0]
    d3a4:	2103      	movs	r1, #3
    d3a6:	4618      	mov	r0, r3
    d3a8:	f000 fd3e 	bl	de28 <am_hal_gpio_state_write>
    d3ac:	e000      	b.n	d3b0 <am_devices_led_off+0x74>
        return;
    d3ae:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    d3b0:	b003      	add	sp, #12
    d3b2:	f85d fb04 	ldr.w	pc, [sp], #4

0000d3b6 <am_devices_led_toggle>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    d3b6:	b500      	push	{lr}
    d3b8:	b085      	sub	sp, #20
    d3ba:	9001      	str	r0, [sp, #4]
    d3bc:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    d3be:	9b01      	ldr	r3, [sp, #4]
    d3c0:	2b00      	cmp	r3, #0
    d3c2:	d041      	beq.n	d448 <am_devices_led_toggle+0x92>
    d3c4:	9b00      	ldr	r3, [sp, #0]
    d3c6:	2b1e      	cmp	r3, #30
    d3c8:	d83e      	bhi.n	d448 <am_devices_led_toggle+0x92>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    d3ca:	9b00      	ldr	r3, [sp, #0]
    d3cc:	00db      	lsls	r3, r3, #3
    d3ce:	9a01      	ldr	r2, [sp, #4]
    d3d0:	4413      	add	r3, r2
    d3d2:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    d3d4:	2b31      	cmp	r3, #49	; 0x31
    d3d6:	d837      	bhi.n	d448 <am_devices_led_toggle+0x92>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    d3d8:	9b00      	ldr	r3, [sp, #0]
    d3da:	00db      	lsls	r3, r3, #3
    d3dc:	9a01      	ldr	r2, [sp, #4]
    d3de:	4413      	add	r3, r2
    d3e0:	685b      	ldr	r3, [r3, #4]
    d3e2:	f003 0302 	and.w	r3, r3, #2
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d009      	beq.n	d3fe <am_devices_led_toggle+0x48>
    {
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d3ea:	9b00      	ldr	r3, [sp, #0]
    d3ec:	00db      	lsls	r3, r3, #3
    d3ee:	9a01      	ldr	r2, [sp, #4]
    d3f0:	4413      	add	r3, r2
    d3f2:	681b      	ldr	r3, [r3, #0]
    d3f4:	2102      	movs	r1, #2
    d3f6:	4618      	mov	r0, r3
    d3f8:	f000 fd16 	bl	de28 <am_hal_gpio_state_write>
    d3fc:	e025      	b.n	d44a <am_devices_led_toggle+0x94>
        uint32_t ui32Ret, ui32Value;

        //
        // Check to see if the LED pin is enabled.
        //
        ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    d3fe:	9b00      	ldr	r3, [sp, #0]
    d400:	00db      	lsls	r3, r3, #3
    d402:	9a01      	ldr	r2, [sp, #4]
    d404:	4413      	add	r3, r2
    d406:	681b      	ldr	r3, [r3, #0]
    d408:	aa02      	add	r2, sp, #8
    d40a:	2102      	movs	r1, #2
    d40c:	4618      	mov	r0, r3
    d40e:	f000 fcd5 	bl	ddbc <am_hal_gpio_state_read>
    d412:	9003      	str	r0, [sp, #12]
                                         AM_HAL_GPIO_ENABLE_READ, &ui32Value);

        if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    d414:	9b03      	ldr	r3, [sp, #12]
    d416:	2b00      	cmp	r3, #0
    d418:	d117      	bne.n	d44a <am_devices_led_toggle+0x94>
        {
            if ( ui32Value )
    d41a:	9b02      	ldr	r3, [sp, #8]
    d41c:	2b00      	cmp	r3, #0
    d41e:	d009      	beq.n	d434 <am_devices_led_toggle+0x7e>
            {
                //
                // If it was enabled, turn if off.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d420:	9b00      	ldr	r3, [sp, #0]
    d422:	00db      	lsls	r3, r3, #3
    d424:	9a01      	ldr	r2, [sp, #4]
    d426:	4413      	add	r3, r2
    d428:	681b      	ldr	r3, [r3, #0]
    d42a:	2103      	movs	r1, #3
    d42c:	4618      	mov	r0, r3
    d42e:	f000 fcfb 	bl	de28 <am_hal_gpio_state_write>
    d432:	e00a      	b.n	d44a <am_devices_led_toggle+0x94>
            else
            {
                //
                // If it was not enabled, turn it on.
                //
                am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    d434:	9b00      	ldr	r3, [sp, #0]
    d436:	00db      	lsls	r3, r3, #3
    d438:	9a01      	ldr	r2, [sp, #4]
    d43a:	4413      	add	r3, r2
    d43c:	681b      	ldr	r3, [r3, #0]
    d43e:	2104      	movs	r1, #4
    d440:	4618      	mov	r0, r3
    d442:	f000 fcf1 	bl	de28 <am_hal_gpio_state_write>
    d446:	e000      	b.n	d44a <am_devices_led_toggle+0x94>
        return;
    d448:	bf00      	nop
            am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
        }
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    d44a:	b005      	add	sp, #20
    d44c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d450 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d450:	4811      	ldr	r0, [pc, #68]	; (d498 <zero_loop+0x12>)
    d452:	4912      	ldr	r1, [pc, #72]	; (d49c <zero_loop+0x16>)
    d454:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d456:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d45a:	4811      	ldr	r0, [pc, #68]	; (d4a0 <zero_loop+0x1a>)
    d45c:	6801      	ldr	r1, [r0, #0]
    d45e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d462:	6001      	str	r1, [r0, #0]
    d464:	f3bf 8f4f 	dsb	sy
    d468:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d46c:	480d      	ldr	r0, [pc, #52]	; (d4a4 <zero_loop+0x1e>)
    d46e:	490e      	ldr	r1, [pc, #56]	; (d4a8 <zero_loop+0x22>)
    d470:	4a0e      	ldr	r2, [pc, #56]	; (d4ac <zero_loop+0x26>)

0000d472 <copy_loop>:
    d472:	f850 3b04 	ldr.w	r3, [r0], #4
    d476:	f841 3b04 	str.w	r3, [r1], #4
    d47a:	4291      	cmp	r1, r2
    d47c:	dbf9      	blt.n	d472 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d47e:	480c      	ldr	r0, [pc, #48]	; (d4b0 <zero_loop+0x2a>)
    d480:	490c      	ldr	r1, [pc, #48]	; (d4b4 <zero_loop+0x2e>)
    d482:	f04f 0200 	mov.w	r2, #0

0000d486 <zero_loop>:
    d486:	4288      	cmp	r0, r1
    d488:	bfb8      	it	lt
    d48a:	f840 2b04 	strlt.w	r2, [r0], #4
    d48e:	dbfa      	blt.n	d486 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d490:	f7fe feda 	bl	c248 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d494:	be00      	bkpt	0x0000
}
    d496:	bf00      	nop
    d498:	e000ed08 	.word	0xe000ed08
    d49c:	0000c000 	.word	0x0000c000
    d4a0:	e000ed88 	.word	0xe000ed88
    d4a4:	0000f25c 	.word	0x0000f25c
    d4a8:	10001000 	.word	0x10001000
    d4ac:	10001034 	.word	0x10001034
    d4b0:	10001034 	.word	0x10001034
    d4b4:	10001218 	.word	0x10001218

0000d4b8 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d4b8:	e7fe      	b.n	d4b8 <NMI_Handler>

0000d4ba <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d4ba:	e7fe      	b.n	d4ba <BusFault_Handler>

0000d4bc <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d4bc:	e7fe      	b.n	d4bc <DebugMon_Handler>
	...

0000d4c0 <am_bsp_uart_string_print>:
    d4c0:	b530      	push	{r4, r5, lr}
    d4c2:	b087      	sub	sp, #28
    d4c4:	7804      	ldrb	r4, [r0, #0]
    d4c6:	2300      	movs	r3, #0
    d4c8:	4605      	mov	r5, r0
    d4ca:	9300      	str	r3, [sp, #0]
    d4cc:	b13c      	cbz	r4, d4de <am_bsp_uart_string_print+0x1e>
    d4ce:	4603      	mov	r3, r0
    d4d0:	f1c0 0101 	rsb	r1, r0, #1
    d4d4:	18cc      	adds	r4, r1, r3
    d4d6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d4da:	2a00      	cmp	r2, #0
    d4dc:	d1fa      	bne.n	d4d4 <am_bsp_uart_string_print+0x14>
    d4de:	4b0a      	ldr	r3, [pc, #40]	; (d508 <am_bsp_uart_string_print+0x48>)
    d4e0:	f8cd d014 	str.w	sp, [sp, #20]
    d4e4:	6818      	ldr	r0, [r3, #0]
    d4e6:	2200      	movs	r2, #0
    d4e8:	f04f 33ff 	mov.w	r3, #4294967295
    d4ec:	a901      	add	r1, sp, #4
    d4ee:	e9cd 4303 	strd	r4, r3, [sp, #12]
    d4f2:	e9cd 2501 	strd	r2, r5, [sp, #4]
    d4f6:	f001 f99d 	bl	e834 <am_hal_uart_transfer>
    d4fa:	9b00      	ldr	r3, [sp, #0]
    d4fc:	42a3      	cmp	r3, r4
    d4fe:	d000      	beq.n	d502 <am_bsp_uart_string_print+0x42>
    d500:	e7fe      	b.n	d500 <am_bsp_uart_string_print+0x40>
    d502:	b007      	add	sp, #28
    d504:	bd30      	pop	{r4, r5, pc}
    d506:	bf00      	nop
    d508:	10001140 	.word	0x10001140

0000d50c <am_bsp_low_power_init>:
    d50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d50e:	f000 fe7d 	bl	e20c <am_hal_pwrctrl_low_power_init>
    d512:	f000 ff6b 	bl	e3ec <am_hal_rtc_osc_disable>
    d516:	4b0b      	ldr	r3, [pc, #44]	; (d544 <am_bsp_low_power_init+0x38>)
    d518:	4f0b      	ldr	r7, [pc, #44]	; (d548 <am_bsp_low_power_init+0x3c>)
    d51a:	681e      	ldr	r6, [r3, #0]
    d51c:	2400      	movs	r4, #0
    d51e:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d522:	4631      	mov	r1, r6
    d524:	4628      	mov	r0, r5
    d526:	f000 fb13 	bl	db50 <am_hal_gpio_pinconfig>
    d52a:	2103      	movs	r1, #3
    d52c:	4628      	mov	r0, r5
    d52e:	f000 fc7b 	bl	de28 <am_hal_gpio_state_write>
    d532:	3401      	adds	r4, #1
    d534:	2100      	movs	r1, #0
    d536:	4628      	mov	r0, r5
    d538:	f000 fc76 	bl	de28 <am_hal_gpio_state_write>
    d53c:	2c05      	cmp	r4, #5
    d53e:	d1ee      	bne.n	d51e <am_bsp_low_power_init+0x12>
    d540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d542:	bf00      	nop
    d544:	0000edfc 	.word	0x0000edfc
    d548:	10001000 	.word	0x10001000

0000d54c <am_bsp_uart_printf_enable>:
    d54c:	b510      	push	{r4, lr}
    d54e:	4c10      	ldr	r4, [pc, #64]	; (d590 <am_bsp_uart_printf_enable+0x44>)
    d550:	4b10      	ldr	r3, [pc, #64]	; (d594 <am_bsp_uart_printf_enable+0x48>)
    d552:	4621      	mov	r1, r4
    d554:	2202      	movs	r2, #2
    d556:	2000      	movs	r0, #0
    d558:	601a      	str	r2, [r3, #0]
    d55a:	f000 ffb9 	bl	e4d0 <am_hal_uart_initialize>
    d55e:	2200      	movs	r2, #0
    d560:	4611      	mov	r1, r2
    d562:	6820      	ldr	r0, [r4, #0]
    d564:	f000 fff0 	bl	e548 <am_hal_uart_power_control>
    d568:	490b      	ldr	r1, [pc, #44]	; (d598 <am_bsp_uart_printf_enable+0x4c>)
    d56a:	6820      	ldr	r0, [r4, #0]
    d56c:	f001 f864 	bl	e638 <am_hal_uart_configure>
    d570:	4b0a      	ldr	r3, [pc, #40]	; (d59c <am_bsp_uart_printf_enable+0x50>)
    d572:	2016      	movs	r0, #22
    d574:	6819      	ldr	r1, [r3, #0]
    d576:	f000 faeb 	bl	db50 <am_hal_gpio_pinconfig>
    d57a:	4b09      	ldr	r3, [pc, #36]	; (d5a0 <am_bsp_uart_printf_enable+0x54>)
    d57c:	2017      	movs	r0, #23
    d57e:	6819      	ldr	r1, [r3, #0]
    d580:	f000 fae6 	bl	db50 <am_hal_gpio_pinconfig>
    d584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d588:	4806      	ldr	r0, [pc, #24]	; (d5a4 <am_bsp_uart_printf_enable+0x58>)
    d58a:	f7fe bf81 	b.w	c490 <am_util_stdio_printf_init>
    d58e:	bf00      	nop
    d590:	10001140 	.word	0x10001140
    d594:	10001144 	.word	0x10001144
    d598:	0000edc4 	.word	0x0000edc4
    d59c:	0000edf0 	.word	0x0000edf0
    d5a0:	0000edec 	.word	0x0000edec
    d5a4:	0000d4c1 	.word	0x0000d4c1

0000d5a8 <am_bsp_uart_printf_disable>:
    d5a8:	b510      	push	{r4, lr}
    d5aa:	4c0e      	ldr	r4, [pc, #56]	; (d5e4 <am_bsp_uart_printf_disable+0x3c>)
    d5ac:	b082      	sub	sp, #8
    d5ae:	6820      	ldr	r0, [r4, #0]
    d5b0:	f001 fb40 	bl	ec34 <am_hal_uart_tx_flush>
    d5b4:	2000      	movs	r0, #0
    d5b6:	f7fe ff6b 	bl	c490 <am_util_stdio_printf_init>
    d5ba:	2200      	movs	r2, #0
    d5bc:	2102      	movs	r1, #2
    d5be:	6820      	ldr	r0, [r4, #0]
    d5c0:	f000 ffc2 	bl	e548 <am_hal_uart_power_control>
    d5c4:	6820      	ldr	r0, [r4, #0]
    d5c6:	f000 ffab 	bl	e520 <am_hal_uart_deinitialize>
    d5ca:	4b07      	ldr	r3, [pc, #28]	; (d5e8 <am_bsp_uart_printf_disable+0x40>)
    d5cc:	2016      	movs	r0, #22
    d5ce:	6819      	ldr	r1, [r3, #0]
    d5d0:	9101      	str	r1, [sp, #4]
    d5d2:	f000 fabd 	bl	db50 <am_hal_gpio_pinconfig>
    d5d6:	9901      	ldr	r1, [sp, #4]
    d5d8:	2017      	movs	r0, #23
    d5da:	b002      	add	sp, #8
    d5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5e0:	f000 bab6 	b.w	db50 <am_hal_gpio_pinconfig>
    d5e4:	10001140 	.word	0x10001140
    d5e8:	0000edf8 	.word	0x0000edf8

0000d5ec <am_hal_cachectrl_config>:
    d5ec:	b530      	push	{r4, r5, lr}
    d5ee:	b083      	sub	sp, #12
    d5f0:	4604      	mov	r4, r0
    d5f2:	f000 fc9b 	bl	df2c <am_hal_interrupt_master_disable>
    d5f6:	4d0e      	ldr	r5, [pc, #56]	; (d630 <am_hal_cachectrl_config+0x44>)
    d5f8:	9001      	str	r0, [sp, #4]
    d5fa:	682b      	ldr	r3, [r5, #0]
    d5fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d600:	602b      	str	r3, [r5, #0]
    d602:	9801      	ldr	r0, [sp, #4]
    d604:	f000 fc96 	bl	df34 <am_hal_interrupt_master_set>
    d608:	7863      	ldrb	r3, [r4, #1]
    d60a:	7822      	ldrb	r2, [r4, #0]
    d60c:	78a1      	ldrb	r1, [r4, #2]
    d60e:	021b      	lsls	r3, r3, #8
    d610:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d614:	0112      	lsls	r2, r2, #4
    d616:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d61a:	b2d2      	uxtb	r2, r2
    d61c:	4313      	orrs	r3, r2
    d61e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d626:	2000      	movs	r0, #0
    d628:	602b      	str	r3, [r5, #0]
    d62a:	b003      	add	sp, #12
    d62c:	bd30      	pop	{r4, r5, pc}
    d62e:	bf00      	nop
    d630:	40018000 	.word	0x40018000

0000d634 <am_hal_cachectrl_enable>:
    d634:	4a03      	ldr	r2, [pc, #12]	; (d644 <am_hal_cachectrl_enable+0x10>)
    d636:	6813      	ldr	r3, [r2, #0]
    d638:	f043 0301 	orr.w	r3, r3, #1
    d63c:	2000      	movs	r0, #0
    d63e:	6013      	str	r3, [r2, #0]
    d640:	4770      	bx	lr
    d642:	bf00      	nop
    d644:	40018000 	.word	0x40018000

0000d648 <am_hal_cachectrl_control>:
    d648:	b510      	push	{r4, lr}
    d64a:	3801      	subs	r0, #1
    d64c:	b08e      	sub	sp, #56	; 0x38
    d64e:	2810      	cmp	r0, #16
    d650:	f200 815e 	bhi.w	d910 <am_hal_cachectrl_control+0x2c8>
    d654:	e8df f010 	tbh	[pc, r0, lsl #1]
    d658:	00360018 	.word	0x00360018
    d65c:	0040003d 	.word	0x0040003d
    d660:	00450043 	.word	0x00450043
    d664:	0011001a 	.word	0x0011001a
    d668:	00540047 	.word	0x00540047
    d66c:	009a0061 	.word	0x009a0061
    d670:	010c00d3 	.word	0x010c00d3
    d674:	013f0126 	.word	0x013f0126
    d678:	001d      	.short	0x001d
    d67a:	f44f 7300 	mov.w	r3, #512	; 0x200
    d67e:	4aac      	ldr	r2, [pc, #688]	; (d930 <am_hal_cachectrl_control+0x2e8>)
    d680:	2000      	movs	r0, #0
    d682:	6093      	str	r3, [r2, #8]
    d684:	b00e      	add	sp, #56	; 0x38
    d686:	bd10      	pop	{r4, pc}
    d688:	2301      	movs	r3, #1
    d68a:	e7f8      	b.n	d67e <am_hal_cachectrl_control+0x36>
    d68c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d690:	e7f5      	b.n	d67e <am_hal_cachectrl_control+0x36>
    d692:	2900      	cmp	r1, #0
    d694:	f000 813c 	beq.w	d910 <am_hal_cachectrl_control+0x2c8>
    d698:	684a      	ldr	r2, [r1, #4]
    d69a:	48a6      	ldr	r0, [pc, #664]	; (d934 <am_hal_cachectrl_control+0x2ec>)
    d69c:	4202      	tst	r2, r0
    d69e:	f040 8137 	bne.w	d910 <am_hal_cachectrl_control+0x2c8>
    d6a2:	688b      	ldr	r3, [r1, #8]
    d6a4:	4018      	ands	r0, r3
    d6a6:	f040 8133 	bne.w	d910 <am_hal_cachectrl_control+0x2c8>
    d6aa:	780c      	ldrb	r4, [r1, #0]
    d6ac:	2c00      	cmp	r4, #0
    d6ae:	f040 8133 	bne.w	d918 <am_hal_cachectrl_control+0x2d0>
    d6b2:	4c9f      	ldr	r4, [pc, #636]	; (d930 <am_hal_cachectrl_control+0x2e8>)
    d6b4:	7849      	ldrb	r1, [r1, #1]
    d6b6:	6122      	str	r2, [r4, #16]
    d6b8:	6163      	str	r3, [r4, #20]
    d6ba:	6823      	ldr	r3, [r4, #0]
    d6bc:	f361 0382 	bfi	r3, r1, #2, #1
    d6c0:	6023      	str	r3, [r4, #0]
    d6c2:	e7df      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d6c4:	4b9a      	ldr	r3, [pc, #616]	; (d930 <am_hal_cachectrl_control+0x2e8>)
    d6c6:	681b      	ldr	r3, [r3, #0]
    d6c8:	01db      	lsls	r3, r3, #7
    d6ca:	f140 811f 	bpl.w	d90c <am_hal_cachectrl_control+0x2c4>
    d6ce:	2302      	movs	r3, #2
    d6d0:	e7d5      	b.n	d67e <am_hal_cachectrl_control+0x36>
    d6d2:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d6d6:	e7d2      	b.n	d67e <am_hal_cachectrl_control+0x36>
    d6d8:	f44f 7308 	mov.w	r3, #544	; 0x220
    d6dc:	e7cf      	b.n	d67e <am_hal_cachectrl_control+0x36>
    d6de:	2340      	movs	r3, #64	; 0x40
    d6e0:	e7cd      	b.n	d67e <am_hal_cachectrl_control+0x36>
    d6e2:	2320      	movs	r3, #32
    d6e4:	e7cb      	b.n	d67e <am_hal_cachectrl_control+0x36>
    d6e6:	f000 fc21 	bl	df2c <am_hal_interrupt_master_disable>
    d6ea:	4a91      	ldr	r2, [pc, #580]	; (d930 <am_hal_cachectrl_control+0x2e8>)
    d6ec:	9000      	str	r0, [sp, #0]
    d6ee:	6813      	ldr	r3, [r2, #0]
    d6f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d6f4:	6013      	str	r3, [r2, #0]
    d6f6:	9800      	ldr	r0, [sp, #0]
    d6f8:	f000 fc1c 	bl	df34 <am_hal_interrupt_master_set>
    d6fc:	2000      	movs	r0, #0
    d6fe:	e7c1      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d700:	f000 fc14 	bl	df2c <am_hal_interrupt_master_disable>
    d704:	4a8a      	ldr	r2, [pc, #552]	; (d930 <am_hal_cachectrl_control+0x2e8>)
    d706:	9001      	str	r0, [sp, #4]
    d708:	6813      	ldr	r3, [r2, #0]
    d70a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d70e:	6013      	str	r3, [r2, #0]
    d710:	9801      	ldr	r0, [sp, #4]
    d712:	f000 fc0f 	bl	df34 <am_hal_interrupt_master_set>
    d716:	2000      	movs	r0, #0
    d718:	e7b4      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d71a:	f000 fc07 	bl	df2c <am_hal_interrupt_master_disable>
    d71e:	4603      	mov	r3, r0
    d720:	4885      	ldr	r0, [pc, #532]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d722:	9302      	str	r3, [sp, #8]
    d724:	f000 fa0a 	bl	db3c <am_hal_flash_load_ui32>
    d728:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d72c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d730:	4881      	ldr	r0, [pc, #516]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d732:	f000 fa07 	bl	db44 <am_hal_flash_store_ui32>
    d736:	9802      	ldr	r0, [sp, #8]
    d738:	f000 fbfc 	bl	df34 <am_hal_interrupt_master_set>
    d73c:	f000 fbf6 	bl	df2c <am_hal_interrupt_master_disable>
    d740:	4603      	mov	r3, r0
    d742:	487d      	ldr	r0, [pc, #500]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d744:	9303      	str	r3, [sp, #12]
    d746:	f000 f9f9 	bl	db3c <am_hal_flash_load_ui32>
    d74a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d74e:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d752:	4879      	ldr	r0, [pc, #484]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d754:	f000 f9f6 	bl	db44 <am_hal_flash_store_ui32>
    d758:	9803      	ldr	r0, [sp, #12]
    d75a:	f000 fbeb 	bl	df34 <am_hal_interrupt_master_set>
    d75e:	f000 fbe5 	bl	df2c <am_hal_interrupt_master_disable>
    d762:	4603      	mov	r3, r0
    d764:	4874      	ldr	r0, [pc, #464]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d766:	9304      	str	r3, [sp, #16]
    d768:	f000 f9e8 	bl	db3c <am_hal_flash_load_ui32>
    d76c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d770:	f020 000f 	bic.w	r0, r0, #15
    d774:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d778:	f041 0103 	orr.w	r1, r1, #3
    d77c:	486e      	ldr	r0, [pc, #440]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d77e:	f000 f9e1 	bl	db44 <am_hal_flash_store_ui32>
    d782:	9804      	ldr	r0, [sp, #16]
    d784:	f000 fbd6 	bl	df34 <am_hal_interrupt_master_set>
    d788:	2000      	movs	r0, #0
    d78a:	e77b      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d78c:	f000 fbce 	bl	df2c <am_hal_interrupt_master_disable>
    d790:	4603      	mov	r3, r0
    d792:	4869      	ldr	r0, [pc, #420]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d794:	9305      	str	r3, [sp, #20]
    d796:	f000 f9d1 	bl	db3c <am_hal_flash_load_ui32>
    d79a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d79e:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d7a2:	4865      	ldr	r0, [pc, #404]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d7a4:	f000 f9ce 	bl	db44 <am_hal_flash_store_ui32>
    d7a8:	9805      	ldr	r0, [sp, #20]
    d7aa:	f000 fbc3 	bl	df34 <am_hal_interrupt_master_set>
    d7ae:	f000 fbbd 	bl	df2c <am_hal_interrupt_master_disable>
    d7b2:	4603      	mov	r3, r0
    d7b4:	4860      	ldr	r0, [pc, #384]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d7b6:	9306      	str	r3, [sp, #24]
    d7b8:	f000 f9c0 	bl	db3c <am_hal_flash_load_ui32>
    d7bc:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d7c0:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d7c4:	485c      	ldr	r0, [pc, #368]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d7c6:	f000 f9bd 	bl	db44 <am_hal_flash_store_ui32>
    d7ca:	9806      	ldr	r0, [sp, #24]
    d7cc:	f000 fbb2 	bl	df34 <am_hal_interrupt_master_set>
    d7d0:	f000 fbac 	bl	df2c <am_hal_interrupt_master_disable>
    d7d4:	4603      	mov	r3, r0
    d7d6:	4858      	ldr	r0, [pc, #352]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d7d8:	9307      	str	r3, [sp, #28]
    d7da:	f000 f9af 	bl	db3c <am_hal_flash_load_ui32>
    d7de:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d7e2:	f020 000f 	bic.w	r0, r0, #15
    d7e6:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d7ea:	f041 0101 	orr.w	r1, r1, #1
    d7ee:	4852      	ldr	r0, [pc, #328]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d7f0:	f000 f9a8 	bl	db44 <am_hal_flash_store_ui32>
    d7f4:	9807      	ldr	r0, [sp, #28]
    d7f6:	f000 fb9d 	bl	df34 <am_hal_interrupt_master_set>
    d7fa:	2000      	movs	r0, #0
    d7fc:	e742      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d7fe:	f000 fb95 	bl	df2c <am_hal_interrupt_master_disable>
    d802:	4603      	mov	r3, r0
    d804:	484c      	ldr	r0, [pc, #304]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d806:	9308      	str	r3, [sp, #32]
    d808:	f000 f998 	bl	db3c <am_hal_flash_load_ui32>
    d80c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d810:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d814:	4848      	ldr	r0, [pc, #288]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d816:	f000 f995 	bl	db44 <am_hal_flash_store_ui32>
    d81a:	9808      	ldr	r0, [sp, #32]
    d81c:	f000 fb8a 	bl	df34 <am_hal_interrupt_master_set>
    d820:	f000 fb84 	bl	df2c <am_hal_interrupt_master_disable>
    d824:	4603      	mov	r3, r0
    d826:	4844      	ldr	r0, [pc, #272]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d828:	9309      	str	r3, [sp, #36]	; 0x24
    d82a:	f000 f987 	bl	db3c <am_hal_flash_load_ui32>
    d82e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d832:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d836:	4840      	ldr	r0, [pc, #256]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d838:	f000 f984 	bl	db44 <am_hal_flash_store_ui32>
    d83c:	9809      	ldr	r0, [sp, #36]	; 0x24
    d83e:	f000 fb79 	bl	df34 <am_hal_interrupt_master_set>
    d842:	f000 fb73 	bl	df2c <am_hal_interrupt_master_disable>
    d846:	4603      	mov	r3, r0
    d848:	483b      	ldr	r0, [pc, #236]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d84a:	930a      	str	r3, [sp, #40]	; 0x28
    d84c:	f000 f976 	bl	db3c <am_hal_flash_load_ui32>
    d850:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d854:	f020 000f 	bic.w	r0, r0, #15
    d858:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d85c:	f041 0101 	orr.w	r1, r1, #1
    d860:	4835      	ldr	r0, [pc, #212]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d862:	f000 f96f 	bl	db44 <am_hal_flash_store_ui32>
    d866:	980a      	ldr	r0, [sp, #40]	; 0x28
    d868:	f000 fb64 	bl	df34 <am_hal_interrupt_master_set>
    d86c:	2000      	movs	r0, #0
    d86e:	e709      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d870:	2900      	cmp	r1, #0
    d872:	d04d      	beq.n	d910 <am_hal_cachectrl_control+0x2c8>
    d874:	680c      	ldr	r4, [r1, #0]
    d876:	2c03      	cmp	r4, #3
    d878:	d84c      	bhi.n	d914 <am_hal_cachectrl_control+0x2cc>
    d87a:	f000 fb57 	bl	df2c <am_hal_interrupt_master_disable>
    d87e:	4603      	mov	r3, r0
    d880:	482d      	ldr	r0, [pc, #180]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d882:	930b      	str	r3, [sp, #44]	; 0x2c
    d884:	f000 f95a 	bl	db3c <am_hal_flash_load_ui32>
    d888:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d88c:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d890:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d894:	4828      	ldr	r0, [pc, #160]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d896:	f000 f955 	bl	db44 <am_hal_flash_store_ui32>
    d89a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d89c:	f000 fb4a 	bl	df34 <am_hal_interrupt_master_set>
    d8a0:	2000      	movs	r0, #0
    d8a2:	e6ef      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d8a4:	b3a1      	cbz	r1, d910 <am_hal_cachectrl_control+0x2c8>
    d8a6:	680c      	ldr	r4, [r1, #0]
    d8a8:	2c07      	cmp	r4, #7
    d8aa:	d833      	bhi.n	d914 <am_hal_cachectrl_control+0x2cc>
    d8ac:	f000 fb3e 	bl	df2c <am_hal_interrupt_master_disable>
    d8b0:	4603      	mov	r3, r0
    d8b2:	4821      	ldr	r0, [pc, #132]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d8b4:	930c      	str	r3, [sp, #48]	; 0x30
    d8b6:	f000 f941 	bl	db3c <am_hal_flash_load_ui32>
    d8ba:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d8be:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d8c2:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d8c6:	481c      	ldr	r0, [pc, #112]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d8c8:	f000 f93c 	bl	db44 <am_hal_flash_store_ui32>
    d8cc:	980c      	ldr	r0, [sp, #48]	; 0x30
    d8ce:	f000 fb31 	bl	df34 <am_hal_interrupt_master_set>
    d8d2:	2000      	movs	r0, #0
    d8d4:	e6d6      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d8d6:	b1d9      	cbz	r1, d910 <am_hal_cachectrl_control+0x2c8>
    d8d8:	680c      	ldr	r4, [r1, #0]
    d8da:	2c0f      	cmp	r4, #15
    d8dc:	d81a      	bhi.n	d914 <am_hal_cachectrl_control+0x2cc>
    d8de:	f000 fb25 	bl	df2c <am_hal_interrupt_master_disable>
    d8e2:	4603      	mov	r3, r0
    d8e4:	4814      	ldr	r0, [pc, #80]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d8e6:	930d      	str	r3, [sp, #52]	; 0x34
    d8e8:	f000 f928 	bl	db3c <am_hal_flash_load_ui32>
    d8ec:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d8f0:	f020 000f 	bic.w	r0, r0, #15
    d8f4:	ea40 0104 	orr.w	r1, r0, r4
    d8f8:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d8fc:	480e      	ldr	r0, [pc, #56]	; (d938 <am_hal_cachectrl_control+0x2f0>)
    d8fe:	f000 f921 	bl	db44 <am_hal_flash_store_ui32>
    d902:	980d      	ldr	r0, [sp, #52]	; 0x34
    d904:	f000 fb16 	bl	df34 <am_hal_interrupt_master_set>
    d908:	2000      	movs	r0, #0
    d90a:	e6bb      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d90c:	2007      	movs	r0, #7
    d90e:	e6b9      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d910:	2006      	movs	r0, #6
    d912:	e6b7      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d914:	2001      	movs	r0, #1
    d916:	e6b5      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d918:	2c01      	cmp	r4, #1
    d91a:	d1f9      	bne.n	d910 <am_hal_cachectrl_control+0x2c8>
    d91c:	4c04      	ldr	r4, [pc, #16]	; (d930 <am_hal_cachectrl_control+0x2e8>)
    d91e:	7849      	ldrb	r1, [r1, #1]
    d920:	61a2      	str	r2, [r4, #24]
    d922:	61e3      	str	r3, [r4, #28]
    d924:	6823      	ldr	r3, [r4, #0]
    d926:	f361 03c3 	bfi	r3, r1, #3, #1
    d92a:	6023      	str	r3, [r4, #0]
    d92c:	e6aa      	b.n	d684 <am_hal_cachectrl_control+0x3c>
    d92e:	bf00      	nop
    d930:	40018000 	.word	0x40018000
    d934:	f800000f 	.word	0xf800000f
    d938:	40018004 	.word	0x40018004

0000d93c <am_hal_clkgen_control>:
    d93c:	4b49      	ldr	r3, [pc, #292]	; (da64 <am_hal_clkgen_control+0x128>)
    d93e:	681a      	ldr	r2, [r3, #0]
    d940:	b912      	cbnz	r2, d948 <am_hal_clkgen_control+0xc>
    d942:	4a49      	ldr	r2, [pc, #292]	; (da68 <am_hal_clkgen_control+0x12c>)
    d944:	6812      	ldr	r2, [r2, #0]
    d946:	601a      	str	r2, [r3, #0]
    d948:	2809      	cmp	r0, #9
    d94a:	f200 8089 	bhi.w	da60 <am_hal_clkgen_control+0x124>
    d94e:	e8df f000 	tbb	[pc, r0]
    d952:	160d      	.short	0x160d
    d954:	423a261e 	.word	0x423a261e
    d958:	055c544c 	.word	0x055c544c
    d95c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d960:	2000      	movs	r0, #0
    d962:	6a1a      	ldr	r2, [r3, #32]
    d964:	f36f 0200 	bfc	r2, #0, #1
    d968:	621a      	str	r2, [r3, #32]
    d96a:	4770      	bx	lr
    d96c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d970:	2200      	movs	r2, #0
    d972:	2147      	movs	r1, #71	; 0x47
    d974:	6159      	str	r1, [r3, #20]
    d976:	4610      	mov	r0, r2
    d978:	619a      	str	r2, [r3, #24]
    d97a:	615a      	str	r2, [r3, #20]
    d97c:	4770      	bx	lr
    d97e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d982:	2000      	movs	r0, #0
    d984:	899a      	ldrh	r2, [r3, #12]
    d986:	f36f 0200 	bfc	r2, #0, #1
    d98a:	819a      	strh	r2, [r3, #12]
    d98c:	4770      	bx	lr
    d98e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d992:	2000      	movs	r0, #0
    d994:	899a      	ldrh	r2, [r3, #12]
    d996:	f36f 0241 	bfc	r2, #1, #1
    d99a:	819a      	strh	r2, [r3, #12]
    d99c:	4770      	bx	lr
    d99e:	4a33      	ldr	r2, [pc, #204]	; (da6c <am_hal_clkgen_control+0x130>)
    d9a0:	68d3      	ldr	r3, [r2, #12]
    d9a2:	b2db      	uxtb	r3, r3
    d9a4:	2b21      	cmp	r3, #33	; 0x21
    d9a6:	d106      	bne.n	d9b6 <am_hal_clkgen_control+0x7a>
    d9a8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d9ac:	2101      	movs	r1, #1
    d9ae:	f361 2309 	bfi	r3, r1, #8, #2
    d9b2:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d9b6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9ba:	2000      	movs	r0, #0
    d9bc:	8993      	ldrh	r3, [r2, #12]
    d9be:	f043 0301 	orr.w	r3, r3, #1
    d9c2:	8193      	strh	r3, [r2, #12]
    d9c4:	4770      	bx	lr
    d9c6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9ca:	2000      	movs	r0, #0
    d9cc:	8993      	ldrh	r3, [r2, #12]
    d9ce:	f043 0302 	orr.w	r3, r3, #2
    d9d2:	8193      	strh	r3, [r2, #12]
    d9d4:	4770      	bx	lr
    d9d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9da:	2200      	movs	r2, #0
    d9dc:	2047      	movs	r0, #71	; 0x47
    d9de:	2101      	movs	r1, #1
    d9e0:	6158      	str	r0, [r3, #20]
    d9e2:	6199      	str	r1, [r3, #24]
    d9e4:	4610      	mov	r0, r2
    d9e6:	615a      	str	r2, [r3, #20]
    d9e8:	4770      	bx	lr
    d9ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9ee:	2000      	movs	r0, #0
    d9f0:	899a      	ldrh	r2, [r3, #12]
    d9f2:	f36f 12c7 	bfc	r2, #7, #1
    d9f6:	819a      	strh	r2, [r3, #12]
    d9f8:	4770      	bx	lr
    d9fa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9fe:	2000      	movs	r0, #0
    da00:	8993      	ldrh	r3, [r2, #12]
    da02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da06:	8193      	strh	r3, [r2, #12]
    da08:	4770      	bx	lr
    da0a:	4a18      	ldr	r2, [pc, #96]	; (da6c <am_hal_clkgen_control+0x130>)
    da0c:	68d3      	ldr	r3, [r2, #12]
    da0e:	b2db      	uxtb	r3, r3
    da10:	2b21      	cmp	r3, #33	; 0x21
    da12:	d00a      	beq.n	da2a <am_hal_clkgen_control+0xee>
    da14:	b139      	cbz	r1, da26 <am_hal_clkgen_control+0xea>
    da16:	680b      	ldr	r3, [r1, #0]
    da18:	f043 0301 	orr.w	r3, r3, #1
    da1c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da20:	2000      	movs	r0, #0
    da22:	6213      	str	r3, [r2, #32]
    da24:	4770      	bx	lr
    da26:	4b12      	ldr	r3, [pc, #72]	; (da70 <am_hal_clkgen_control+0x134>)
    da28:	e7f8      	b.n	da1c <am_hal_clkgen_control+0xe0>
    da2a:	b500      	push	{lr}
    da2c:	b083      	sub	sp, #12
    da2e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    da32:	9101      	str	r1, [sp, #4]
    da34:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    da38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    da3c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    da40:	f000 f836 	bl	dab0 <am_hal_flash_delay>
    da44:	9901      	ldr	r1, [sp, #4]
    da46:	b149      	cbz	r1, da5c <am_hal_clkgen_control+0x120>
    da48:	680b      	ldr	r3, [r1, #0]
    da4a:	f043 0301 	orr.w	r3, r3, #1
    da4e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da52:	2000      	movs	r0, #0
    da54:	6213      	str	r3, [r2, #32]
    da56:	b003      	add	sp, #12
    da58:	f85d fb04 	ldr.w	pc, [sp], #4
    da5c:	4b04      	ldr	r3, [pc, #16]	; (da70 <am_hal_clkgen_control+0x134>)
    da5e:	e7f6      	b.n	da4e <am_hal_clkgen_control+0x112>
    da60:	2006      	movs	r0, #6
    da62:	4770      	bx	lr
    da64:	10001148 	.word	0x10001148
    da68:	4ffff000 	.word	0x4ffff000
    da6c:	40020000 	.word	0x40020000
    da70:	0025b801 	.word	0x0025b801

0000da74 <am_hal_clkgen_status_get>:
    da74:	b1b0      	cbz	r0, daa4 <am_hal_clkgen_status_get+0x30>
    da76:	b410      	push	{r4}
    da78:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    da7c:	4603      	mov	r3, r0
    da7e:	698c      	ldr	r4, [r1, #24]
    da80:	4809      	ldr	r0, [pc, #36]	; (daa8 <am_hal_clkgen_status_get+0x34>)
    da82:	4a0a      	ldr	r2, [pc, #40]	; (daac <am_hal_clkgen_status_get+0x38>)
    da84:	f014 0f01 	tst.w	r4, #1
    da88:	bf08      	it	eq
    da8a:	4602      	moveq	r2, r0
    da8c:	601a      	str	r2, [r3, #0]
    da8e:	69ca      	ldr	r2, [r1, #28]
    da90:	f85d 4b04 	ldr.w	r4, [sp], #4
    da94:	f002 0101 	and.w	r1, r2, #1
    da98:	f3c2 0240 	ubfx	r2, r2, #1, #1
    da9c:	2000      	movs	r0, #0
    da9e:	6059      	str	r1, [r3, #4]
    daa0:	721a      	strb	r2, [r3, #8]
    daa2:	4770      	bx	lr
    daa4:	2006      	movs	r0, #6
    daa6:	4770      	bx	lr
    daa8:	02dc6c00 	.word	0x02dc6c00
    daac:	016e3600 	.word	0x016e3600

0000dab0 <am_hal_flash_delay>:
    dab0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dab6:	075b      	lsls	r3, r3, #29
    dab8:	bf46      	itte	mi
    daba:	0040      	lslmi	r0, r0, #1
    dabc:	230e      	movmi	r3, #14
    dabe:	230b      	movpl	r3, #11
    dac0:	4298      	cmp	r0, r3
    dac2:	d902      	bls.n	daca <am_hal_flash_delay+0x1a>
    dac4:	4a01      	ldr	r2, [pc, #4]	; (dacc <am_hal_flash_delay+0x1c>)
    dac6:	1ac0      	subs	r0, r0, r3
    dac8:	4710      	bx	r2
    daca:	4770      	bx	lr
    dacc:	0800009d 	.word	0x0800009d

0000dad0 <am_hal_flash_delay_status_check>:
    dad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dad4:	f89d c020 	ldrb.w	ip, [sp, #32]
    dad8:	f8df 805c 	ldr.w	r8, [pc, #92]	; db38 <am_hal_flash_delay_status_check+0x68>
    dadc:	4604      	mov	r4, r0
    dade:	460d      	mov	r5, r1
    dae0:	4616      	mov	r6, r2
    dae2:	461f      	mov	r7, r3
    dae4:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dae8:	f1bc 0f00 	cmp.w	ip, #0
    daec:	d00a      	beq.n	db04 <am_hal_flash_delay_status_check+0x34>
    daee:	e01a      	b.n	db26 <am_hal_flash_delay_status_check+0x56>
    daf0:	b1f4      	cbz	r4, db30 <am_hal_flash_delay_status_check+0x60>
    daf2:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    daf6:	f013 0f04 	tst.w	r3, #4
    dafa:	bf0c      	ite	eq
    dafc:	2005      	moveq	r0, #5
    dafe:	2012      	movne	r0, #18
    db00:	3c01      	subs	r4, #1
    db02:	47c0      	blx	r8
    db04:	6828      	ldr	r0, [r5, #0]
    db06:	4030      	ands	r0, r6
    db08:	42b8      	cmp	r0, r7
    db0a:	d0f1      	beq.n	daf0 <am_hal_flash_delay_status_check+0x20>
    db0c:	2000      	movs	r0, #0
    db0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    db12:	b16c      	cbz	r4, db30 <am_hal_flash_delay_status_check+0x60>
    db14:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    db18:	f013 0f04 	tst.w	r3, #4
    db1c:	bf0c      	ite	eq
    db1e:	2005      	moveq	r0, #5
    db20:	2012      	movne	r0, #18
    db22:	3c01      	subs	r4, #1
    db24:	47c0      	blx	r8
    db26:	6828      	ldr	r0, [r5, #0]
    db28:	4030      	ands	r0, r6
    db2a:	42b8      	cmp	r0, r7
    db2c:	d1f1      	bne.n	db12 <am_hal_flash_delay_status_check+0x42>
    db2e:	e7ed      	b.n	db0c <am_hal_flash_delay_status_check+0x3c>
    db30:	2004      	movs	r0, #4
    db32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    db36:	bf00      	nop
    db38:	0800009d 	.word	0x0800009d

0000db3c <am_hal_flash_load_ui32>:
    db3c:	4b00      	ldr	r3, [pc, #0]	; (db40 <am_hal_flash_load_ui32+0x4>)
    db3e:	4718      	bx	r3
    db40:	08000075 	.word	0x08000075

0000db44 <am_hal_flash_store_ui32>:
    db44:	4b01      	ldr	r3, [pc, #4]	; (db4c <am_hal_flash_store_ui32+0x8>)
    db46:	f043 0301 	orr.w	r3, r3, #1
    db4a:	4718      	bx	r3
    db4c:	10001028 	.word	0x10001028

0000db50 <am_hal_gpio_pinconfig>:
    db50:	2831      	cmp	r0, #49	; 0x31
    db52:	f200 80c3 	bhi.w	dcdc <am_hal_gpio_pinconfig+0x18c>
    db56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db5a:	4604      	mov	r4, r0
    db5c:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    db60:	f001 0007 	and.w	r0, r1, #7
    db64:	b085      	sub	sp, #20
    db66:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    db6a:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    db6e:	d00f      	beq.n	db90 <am_hal_gpio_pinconfig+0x40>
    db70:	f3c1 1642 	ubfx	r6, r1, #5, #3
    db74:	1db5      	adds	r5, r6, #6
    db76:	f005 0507 	and.w	r5, r5, #7
    db7a:	2d03      	cmp	r5, #3
    db7c:	f042 0201 	orr.w	r2, r2, #1
    db80:	f240 80ae 	bls.w	dce0 <am_hal_gpio_pinconfig+0x190>
    db84:	2fc0      	cmp	r7, #192	; 0xc0
    db86:	f000 80e1 	beq.w	dd4c <am_hal_gpio_pinconfig+0x1fc>
    db8a:	2f20      	cmp	r7, #32
    db8c:	f000 80e3 	beq.w	dd56 <am_hal_gpio_pinconfig+0x206>
    db90:	b163      	cbz	r3, dbac <am_hal_gpio_pinconfig+0x5c>
    db92:	2b01      	cmp	r3, #1
    db94:	f000 80d3 	beq.w	dd3e <am_hal_gpio_pinconfig+0x1ee>
    db98:	2b02      	cmp	r3, #2
    db9a:	f040 80c9 	bne.w	dd30 <am_hal_gpio_pinconfig+0x1e0>
    db9e:	4b79      	ldr	r3, [pc, #484]	; (dd84 <am_hal_gpio_pinconfig+0x234>)
    dba0:	5d1b      	ldrb	r3, [r3, r4]
    dba2:	075b      	lsls	r3, r3, #29
    dba4:	f140 80c4 	bpl.w	dd30 <am_hal_gpio_pinconfig+0x1e0>
    dba8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dbac:	4b76      	ldr	r3, [pc, #472]	; (dd88 <am_hal_gpio_pinconfig+0x238>)
    dbae:	5d1b      	ldrb	r3, [r3, r4]
    dbb0:	4103      	asrs	r3, r0
    dbb2:	005b      	lsls	r3, r3, #1
    dbb4:	f003 0302 	and.w	r3, r3, #2
    dbb8:	4313      	orrs	r3, r2
    dbba:	4a74      	ldr	r2, [pc, #464]	; (dd8c <am_hal_gpio_pinconfig+0x23c>)
    dbbc:	5d12      	ldrb	r2, [r2, r4]
    dbbe:	4282      	cmp	r2, r0
    dbc0:	f000 8099 	beq.w	dcf6 <am_hal_gpio_pinconfig+0x1a6>
    dbc4:	f3c1 3000 	ubfx	r0, r1, #12, #1
    dbc8:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dbcc:	f3c1 3280 	ubfx	r2, r1, #14, #1
    dbd0:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dbd4:	0a88      	lsrs	r0, r1, #10
    dbd6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dbda:	f000 0008 	and.w	r0, r0, #8
    dbde:	4302      	orrs	r2, r0
    dbe0:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dbe4:	f000 050c 	and.w	r5, r0, #12
    dbe8:	2d04      	cmp	r5, #4
    dbea:	f000 80a5 	beq.w	dd38 <am_hal_gpio_pinconfig+0x1e8>
    dbee:	4d68      	ldr	r5, [pc, #416]	; (dd90 <am_hal_gpio_pinconfig+0x240>)
    dbf0:	682d      	ldr	r5, [r5, #0]
    dbf2:	eba1 0805 	sub.w	r8, r1, r5
    dbf6:	fab8 f888 	clz	r8, r8
    dbfa:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dbfe:	f010 0f60 	tst.w	r0, #96	; 0x60
    dc02:	bf04      	itt	eq
    dc04:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dc08:	f360 0200 	bfieq	r2, r0, #0, #1
    dc0c:	00a0      	lsls	r0, r4, #2
    dc0e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dc12:	2902      	cmp	r1, #2
    dc14:	d05c      	beq.n	dcd0 <am_hal_gpio_pinconfig+0x180>
    dc16:	2903      	cmp	r1, #3
    dc18:	d058      	beq.n	dccc <am_hal_gpio_pinconfig+0x17c>
    dc1a:	2901      	cmp	r1, #1
    dc1c:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dc20:	bf08      	it	eq
    dc22:	f043 0304 	orreq.w	r3, r3, #4
    dc26:	f001 0118 	and.w	r1, r1, #24
    dc2a:	2700      	movs	r7, #0
    dc2c:	f000 001c 	and.w	r0, r0, #28
    dc30:	fa02 f600 	lsl.w	r6, r2, r0
    dc34:	220f      	movs	r2, #15
    dc36:	4082      	lsls	r2, r0
    dc38:	43d2      	mvns	r2, r2
    dc3a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dc3e:	fa03 f501 	lsl.w	r5, r3, r1
    dc42:	fa09 f901 	lsl.w	r9, r9, r1
    dc46:	9201      	str	r2, [sp, #4]
    dc48:	f000 f970 	bl	df2c <am_hal_interrupt_master_disable>
    dc4c:	f024 0a03 	bic.w	sl, r4, #3
    dc50:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    dc54:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    dc58:	4b4e      	ldr	r3, [pc, #312]	; (dd94 <am_hal_gpio_pinconfig+0x244>)
    dc5a:	494f      	ldr	r1, [pc, #316]	; (dd98 <am_hal_gpio_pinconfig+0x248>)
    dc5c:	9a01      	ldr	r2, [sp, #4]
    dc5e:	9003      	str	r0, [sp, #12]
    dc60:	ea6f 0909 	mvn.w	r9, r9
    dc64:	f02b 0b03 	bic.w	fp, fp, #3
    dc68:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dc6c:	f1b8 0f00 	cmp.w	r8, #0
    dc70:	d00b      	beq.n	dc8a <am_hal_gpio_pinconfig+0x13a>
    dc72:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    dc76:	f004 081f 	and.w	r8, r4, #31
    dc7a:	4848      	ldr	r0, [pc, #288]	; (dd9c <am_hal_gpio_pinconfig+0x24c>)
    dc7c:	f00e 0e04 	and.w	lr, lr, #4
    dc80:	2401      	movs	r4, #1
    dc82:	fa04 f408 	lsl.w	r4, r4, r8
    dc86:	f84e 4000 	str.w	r4, [lr, r0]
    dc8a:	4845      	ldr	r0, [pc, #276]	; (dda0 <am_hal_gpio_pinconfig+0x250>)
    dc8c:	2473      	movs	r4, #115	; 0x73
    dc8e:	6604      	str	r4, [r0, #96]	; 0x60
    dc90:	f8dc 4000 	ldr.w	r4, [ip]
    dc94:	ea04 0409 	and.w	r4, r4, r9
    dc98:	4325      	orrs	r5, r4
    dc9a:	f8cc 5000 	str.w	r5, [ip]
    dc9e:	f85b 4003 	ldr.w	r4, [fp, r3]
    dca2:	4022      	ands	r2, r4
    dca4:	4332      	orrs	r2, r6
    dca6:	f84b 2003 	str.w	r2, [fp, r3]
    dcaa:	f85a 3001 	ldr.w	r3, [sl, r1]
    dcae:	ea03 0909 	and.w	r9, r3, r9
    dcb2:	2400      	movs	r4, #0
    dcb4:	ea49 0707 	orr.w	r7, r9, r7
    dcb8:	f84a 7001 	str.w	r7, [sl, r1]
    dcbc:	6604      	str	r4, [r0, #96]	; 0x60
    dcbe:	9803      	ldr	r0, [sp, #12]
    dcc0:	f000 f938 	bl	df34 <am_hal_interrupt_master_set>
    dcc4:	4620      	mov	r0, r4
    dcc6:	b005      	add	sp, #20
    dcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dccc:	f043 0304 	orr.w	r3, r3, #4
    dcd0:	00e1      	lsls	r1, r4, #3
    dcd2:	f001 0118 	and.w	r1, r1, #24
    dcd6:	2701      	movs	r7, #1
    dcd8:	408f      	lsls	r7, r1
    dcda:	e7a7      	b.n	dc2c <am_hal_gpio_pinconfig+0xdc>
    dcdc:	2006      	movs	r0, #6
    dcde:	4770      	bx	lr
    dce0:	4d28      	ldr	r5, [pc, #160]	; (dd84 <am_hal_gpio_pinconfig+0x234>)
    dce2:	5d2d      	ldrb	r5, [r5, r4]
    dce4:	3e02      	subs	r6, #2
    dce6:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dcea:	07ee      	lsls	r6, r5, #31
    dcec:	d536      	bpl.n	dd5c <am_hal_gpio_pinconfig+0x20c>
    dcee:	2b00      	cmp	r3, #0
    dcf0:	f43f af5c 	beq.w	dbac <am_hal_gpio_pinconfig+0x5c>
    dcf4:	e74d      	b.n	db92 <am_hal_gpio_pinconfig+0x42>
    dcf6:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dcfa:	2a07      	cmp	r2, #7
    dcfc:	d030      	beq.n	dd60 <am_hal_gpio_pinconfig+0x210>
    dcfe:	4d29      	ldr	r5, [pc, #164]	; (dda4 <am_hal_gpio_pinconfig+0x254>)
    dd00:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    dd04:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    dd08:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    dd0c:	4290      	cmp	r0, r2
    dd0e:	d029      	beq.n	dd64 <am_hal_gpio_pinconfig+0x214>
    dd10:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dd14:	00a0      	lsls	r0, r4, #2
    dd16:	786e      	ldrb	r6, [r5, #1]
    dd18:	4296      	cmp	r6, r2
    dd1a:	d02d      	beq.n	dd78 <am_hal_gpio_pinconfig+0x228>
    dd1c:	78ae      	ldrb	r6, [r5, #2]
    dd1e:	4296      	cmp	r6, r2
    dd20:	d02c      	beq.n	dd7c <am_hal_gpio_pinconfig+0x22c>
    dd22:	78ed      	ldrb	r5, [r5, #3]
    dd24:	4295      	cmp	r5, r2
    dd26:	d02b      	beq.n	dd80 <am_hal_gpio_pinconfig+0x230>
    dd28:	481f      	ldr	r0, [pc, #124]	; (dda8 <am_hal_gpio_pinconfig+0x258>)
    dd2a:	b005      	add	sp, #20
    dd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd30:	481e      	ldr	r0, [pc, #120]	; (ddac <am_hal_gpio_pinconfig+0x25c>)
    dd32:	b005      	add	sp, #20
    dd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd38:	f04f 0801 	mov.w	r8, #1
    dd3c:	e75f      	b.n	dbfe <am_hal_gpio_pinconfig+0xae>
    dd3e:	4b11      	ldr	r3, [pc, #68]	; (dd84 <am_hal_gpio_pinconfig+0x234>)
    dd40:	5d1b      	ldrb	r3, [r3, r4]
    dd42:	079d      	lsls	r5, r3, #30
    dd44:	d5f4      	bpl.n	dd30 <am_hal_gpio_pinconfig+0x1e0>
    dd46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dd4a:	e72f      	b.n	dbac <am_hal_gpio_pinconfig+0x5c>
    dd4c:	2c14      	cmp	r4, #20
    dd4e:	f43f af1f 	beq.w	db90 <am_hal_gpio_pinconfig+0x40>
    dd52:	4817      	ldr	r0, [pc, #92]	; (ddb0 <am_hal_gpio_pinconfig+0x260>)
    dd54:	e7b7      	b.n	dcc6 <am_hal_gpio_pinconfig+0x176>
    dd56:	2c14      	cmp	r4, #20
    dd58:	f47f af1a 	bne.w	db90 <am_hal_gpio_pinconfig+0x40>
    dd5c:	4815      	ldr	r0, [pc, #84]	; (ddb4 <am_hal_gpio_pinconfig+0x264>)
    dd5e:	e7b2      	b.n	dcc6 <am_hal_gpio_pinconfig+0x176>
    dd60:	4815      	ldr	r0, [pc, #84]	; (ddb8 <am_hal_gpio_pinconfig+0x268>)
    dd62:	e7b0      	b.n	dcc6 <am_hal_gpio_pinconfig+0x176>
    dd64:	2200      	movs	r2, #0
    dd66:	00a0      	lsls	r0, r4, #2
    dd68:	0052      	lsls	r2, r2, #1
    dd6a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dd6e:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    dd72:	f04f 0800 	mov.w	r8, #0
    dd76:	e74a      	b.n	dc0e <am_hal_gpio_pinconfig+0xbe>
    dd78:	2201      	movs	r2, #1
    dd7a:	e7f5      	b.n	dd68 <am_hal_gpio_pinconfig+0x218>
    dd7c:	2202      	movs	r2, #2
    dd7e:	e7f3      	b.n	dd68 <am_hal_gpio_pinconfig+0x218>
    dd80:	2203      	movs	r2, #3
    dd82:	e7f1      	b.n	dd68 <am_hal_gpio_pinconfig+0x218>
    dd84:	0000ee04 	.word	0x0000ee04
    dd88:	0000ee38 	.word	0x0000ee38
    dd8c:	0000ef34 	.word	0x0000ef34
    dd90:	0000edf8 	.word	0x0000edf8
    dd94:	40010040 	.word	0x40010040
    dd98:	400100e0 	.word	0x400100e0
    dd9c:	400100b4 	.word	0x400100b4
    dda0:	40010000 	.word	0x40010000
    dda4:	0000ee6c 	.word	0x0000ee6c
    dda8:	08000104 	.word	0x08000104
    ddac:	08000102 	.word	0x08000102
    ddb0:	08000101 	.word	0x08000101
    ddb4:	08000100 	.word	0x08000100
    ddb8:	08000103 	.word	0x08000103

0000ddbc <am_hal_gpio_state_read>:
    ddbc:	b15a      	cbz	r2, ddd6 <am_hal_gpio_state_read+0x1a>
    ddbe:	2831      	cmp	r0, #49	; 0x31
    ddc0:	d81d      	bhi.n	ddfe <am_hal_gpio_state_read+0x42>
    ddc2:	08c3      	lsrs	r3, r0, #3
    ddc4:	2901      	cmp	r1, #1
    ddc6:	f003 0304 	and.w	r3, r3, #4
    ddca:	f000 001f 	and.w	r0, r0, #31
    ddce:	d01b      	beq.n	de08 <am_hal_gpio_state_read+0x4c>
    ddd0:	2902      	cmp	r1, #2
    ddd2:	d00b      	beq.n	ddec <am_hal_gpio_state_read+0x30>
    ddd4:	b109      	cbz	r1, ddda <am_hal_gpio_state_read+0x1e>
    ddd6:	2006      	movs	r0, #6
    ddd8:	4770      	bx	lr
    ddda:	4910      	ldr	r1, [pc, #64]	; (de1c <am_hal_gpio_state_read+0x60>)
    dddc:	585b      	ldr	r3, [r3, r1]
    ddde:	fa23 f000 	lsr.w	r0, r3, r0
    dde2:	f000 0001 	and.w	r0, r0, #1
    dde6:	6010      	str	r0, [r2, #0]
    dde8:	2000      	movs	r0, #0
    ddea:	4770      	bx	lr
    ddec:	490c      	ldr	r1, [pc, #48]	; (de20 <am_hal_gpio_state_read+0x64>)
    ddee:	585b      	ldr	r3, [r3, r1]
    ddf0:	fa23 f000 	lsr.w	r0, r3, r0
    ddf4:	f000 0001 	and.w	r0, r0, #1
    ddf8:	6010      	str	r0, [r2, #0]
    ddfa:	2000      	movs	r0, #0
    ddfc:	4770      	bx	lr
    ddfe:	f04f 33ff 	mov.w	r3, #4294967295
    de02:	6013      	str	r3, [r2, #0]
    de04:	2005      	movs	r0, #5
    de06:	4770      	bx	lr
    de08:	4906      	ldr	r1, [pc, #24]	; (de24 <am_hal_gpio_state_read+0x68>)
    de0a:	585b      	ldr	r3, [r3, r1]
    de0c:	fa23 f000 	lsr.w	r0, r3, r0
    de10:	f000 0001 	and.w	r0, r0, #1
    de14:	6010      	str	r0, [r2, #0]
    de16:	2000      	movs	r0, #0
    de18:	4770      	bx	lr
    de1a:	bf00      	nop
    de1c:	40010080 	.word	0x40010080
    de20:	400100a0 	.word	0x400100a0
    de24:	40010088 	.word	0x40010088

0000de28 <am_hal_gpio_state_write>:
    de28:	2831      	cmp	r0, #49	; 0x31
    de2a:	d81a      	bhi.n	de62 <am_hal_gpio_state_write+0x3a>
    de2c:	b570      	push	{r4, r5, r6, lr}
    de2e:	2905      	cmp	r1, #5
    de30:	b082      	sub	sp, #8
    de32:	460d      	mov	r5, r1
    de34:	d812      	bhi.n	de5c <am_hal_gpio_state_write+0x34>
    de36:	f000 031f 	and.w	r3, r0, #31
    de3a:	2201      	movs	r2, #1
    de3c:	08c0      	lsrs	r0, r0, #3
    de3e:	fa02 f603 	lsl.w	r6, r2, r3
    de42:	f000 0404 	and.w	r4, r0, #4
    de46:	f000 f871 	bl	df2c <am_hal_interrupt_master_disable>
    de4a:	3d01      	subs	r5, #1
    de4c:	9001      	str	r0, [sp, #4]
    de4e:	2d04      	cmp	r5, #4
    de50:	d821      	bhi.n	de96 <am_hal_gpio_state_write+0x6e>
    de52:	e8df f005 	tbb	[pc, r5]
    de56:	1512      	.short	0x1512
    de58:	1d1a      	.short	0x1d1a
    de5a:	08          	.byte	0x08
    de5b:	00          	.byte	0x00
    de5c:	2006      	movs	r0, #6
    de5e:	b002      	add	sp, #8
    de60:	bd70      	pop	{r4, r5, r6, pc}
    de62:	2005      	movs	r0, #5
    de64:	4770      	bx	lr
    de66:	4a0d      	ldr	r2, [pc, #52]	; (de9c <am_hal_gpio_state_write+0x74>)
    de68:	58a3      	ldr	r3, [r4, r2]
    de6a:	4073      	eors	r3, r6
    de6c:	50a3      	str	r3, [r4, r2]
    de6e:	9801      	ldr	r0, [sp, #4]
    de70:	f000 f860 	bl	df34 <am_hal_interrupt_master_set>
    de74:	2000      	movs	r0, #0
    de76:	b002      	add	sp, #8
    de78:	bd70      	pop	{r4, r5, r6, pc}
    de7a:	4b09      	ldr	r3, [pc, #36]	; (dea0 <am_hal_gpio_state_write+0x78>)
    de7c:	50e6      	str	r6, [r4, r3]
    de7e:	e7f6      	b.n	de6e <am_hal_gpio_state_write+0x46>
    de80:	4a08      	ldr	r2, [pc, #32]	; (dea4 <am_hal_gpio_state_write+0x7c>)
    de82:	58a3      	ldr	r3, [r4, r2]
    de84:	4073      	eors	r3, r6
    de86:	50a3      	str	r3, [r4, r2]
    de88:	e7f1      	b.n	de6e <am_hal_gpio_state_write+0x46>
    de8a:	4b04      	ldr	r3, [pc, #16]	; (de9c <am_hal_gpio_state_write+0x74>)
    de8c:	50e6      	str	r6, [r4, r3]
    de8e:	e7ee      	b.n	de6e <am_hal_gpio_state_write+0x46>
    de90:	4b05      	ldr	r3, [pc, #20]	; (dea8 <am_hal_gpio_state_write+0x80>)
    de92:	50e6      	str	r6, [r4, r3]
    de94:	e7eb      	b.n	de6e <am_hal_gpio_state_write+0x46>
    de96:	4b05      	ldr	r3, [pc, #20]	; (deac <am_hal_gpio_state_write+0x84>)
    de98:	50e6      	str	r6, [r4, r3]
    de9a:	e7e8      	b.n	de6e <am_hal_gpio_state_write+0x46>
    de9c:	400100b4 	.word	0x400100b4
    dea0:	40010090 	.word	0x40010090
    dea4:	40010088 	.word	0x40010088
    dea8:	400100a8 	.word	0x400100a8
    deac:	40010098 	.word	0x40010098

0000deb0 <am_hal_gpio_interrupt_enable>:
    deb0:	b570      	push	{r4, r5, r6, lr}
    deb2:	0c8c      	lsrs	r4, r1, #18
    deb4:	04a4      	lsls	r4, r4, #18
    deb6:	b082      	sub	sp, #8
    deb8:	b9ac      	cbnz	r4, dee6 <am_hal_gpio_interrupt_enable+0x36>
    deba:	460d      	mov	r5, r1
    debc:	4606      	mov	r6, r0
    debe:	f000 f835 	bl	df2c <am_hal_interrupt_master_disable>
    dec2:	4b0a      	ldr	r3, [pc, #40]	; (deec <am_hal_gpio_interrupt_enable+0x3c>)
    dec4:	9001      	str	r0, [sp, #4]
    dec6:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
    deca:	4330      	orrs	r0, r6
    decc:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    ded0:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    ded4:	430d      	orrs	r5, r1
    ded6:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
    deda:	9801      	ldr	r0, [sp, #4]
    dedc:	f000 f82a 	bl	df34 <am_hal_interrupt_master_set>
    dee0:	4620      	mov	r0, r4
    dee2:	b002      	add	sp, #8
    dee4:	bd70      	pop	{r4, r5, r6, pc}
    dee6:	2005      	movs	r0, #5
    dee8:	b002      	add	sp, #8
    deea:	bd70      	pop	{r4, r5, r6, pc}
    deec:	40010000 	.word	0x40010000

0000def0 <am_hal_gpio_interrupt_clear>:
    def0:	b570      	push	{r4, r5, r6, lr}
    def2:	0c8c      	lsrs	r4, r1, #18
    def4:	04a4      	lsls	r4, r4, #18
    def6:	b082      	sub	sp, #8
    def8:	b97c      	cbnz	r4, df1a <am_hal_gpio_interrupt_clear+0x2a>
    defa:	460d      	mov	r5, r1
    defc:	4606      	mov	r6, r0
    defe:	f000 f815 	bl	df2c <am_hal_interrupt_master_disable>
    df02:	4b07      	ldr	r3, [pc, #28]	; (df20 <am_hal_gpio_interrupt_clear+0x30>)
    df04:	9001      	str	r0, [sp, #4]
    df06:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
    df0a:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
    df0e:	9801      	ldr	r0, [sp, #4]
    df10:	f000 f810 	bl	df34 <am_hal_interrupt_master_set>
    df14:	4620      	mov	r0, r4
    df16:	b002      	add	sp, #8
    df18:	bd70      	pop	{r4, r5, r6, pc}
    df1a:	2005      	movs	r0, #5
    df1c:	b002      	add	sp, #8
    df1e:	bd70      	pop	{r4, r5, r6, pc}
    df20:	40010000 	.word	0x40010000

0000df24 <am_hal_interrupt_master_enable>:
    df24:	f3ef 8010 	mrs	r0, PRIMASK
    df28:	b662      	cpsie	i
    df2a:	4770      	bx	lr

0000df2c <am_hal_interrupt_master_disable>:
    df2c:	f3ef 8010 	mrs	r0, PRIMASK
    df30:	b672      	cpsid	i
    df32:	4770      	bx	lr

0000df34 <am_hal_interrupt_master_set>:
    df34:	f380 8810 	msr	PRIMASK, r0
    df38:	4770      	bx	lr
    df3a:	bf00      	nop

0000df3c <am_hal_mcuctrl_info_get>:
    df3c:	2900      	cmp	r1, #0
    df3e:	f000 808f 	beq.w	e060 <am_hal_mcuctrl_info_get+0x124>
    df42:	2801      	cmp	r0, #1
    df44:	b430      	push	{r4, r5}
    df46:	d006      	beq.n	df56 <am_hal_mcuctrl_info_get+0x1a>
    df48:	2802      	cmp	r0, #2
    df4a:	d06d      	beq.n	e028 <am_hal_mcuctrl_info_get+0xec>
    df4c:	2800      	cmp	r0, #0
    df4e:	d055      	beq.n	dffc <am_hal_mcuctrl_info_get+0xc0>
    df50:	2006      	movs	r0, #6
    df52:	bc30      	pop	{r4, r5}
    df54:	4770      	bx	lr
    df56:	4a43      	ldr	r2, [pc, #268]	; (e064 <am_hal_mcuctrl_info_get+0x128>)
    df58:	4843      	ldr	r0, [pc, #268]	; (e068 <am_hal_mcuctrl_info_get+0x12c>)
    df5a:	6813      	ldr	r3, [r2, #0]
    df5c:	600b      	str	r3, [r1, #0]
    df5e:	6854      	ldr	r4, [r2, #4]
    df60:	604c      	str	r4, [r1, #4]
    df62:	6894      	ldr	r4, [r2, #8]
    df64:	608c      	str	r4, [r1, #8]
    df66:	68d4      	ldr	r4, [r2, #12]
    df68:	60cc      	str	r4, [r1, #12]
    df6a:	f3c3 5503 	ubfx	r5, r3, #20, #4
    df6e:	6914      	ldr	r4, [r2, #16]
    df70:	610c      	str	r4, [r1, #16]
    df72:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    df76:	4c3d      	ldr	r4, [pc, #244]	; (e06c <am_hal_mcuctrl_info_get+0x130>)
    df78:	6950      	ldr	r0, [r2, #20]
    df7a:	6148      	str	r0, [r1, #20]
    df7c:	f003 0201 	and.w	r2, r3, #1
    df80:	f3c3 4303 	ubfx	r3, r3, #16, #4
    df84:	e9c1 2506 	strd	r2, r5, [r1, #24]
    df88:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    df8c:	4a38      	ldr	r2, [pc, #224]	; (e070 <am_hal_mcuctrl_info_get+0x134>)
    df8e:	620b      	str	r3, [r1, #32]
    df90:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    df94:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    df98:	b2db      	uxtb	r3, r3
    df9a:	f000 000f 	and.w	r0, r0, #15
    df9e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    dfa2:	624b      	str	r3, [r1, #36]	; 0x24
    dfa4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    dfa8:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    dfac:	f3c3 1303 	ubfx	r3, r3, #4, #4
    dfb0:	f000 000f 	and.w	r0, r0, #15
    dfb4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    dfb8:	628b      	str	r3, [r1, #40]	; 0x28
    dfba:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    dfbe:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    dfc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    dfc6:	f3c0 1003 	ubfx	r0, r0, #4, #4
    dfca:	4303      	orrs	r3, r0
    dfcc:	62cb      	str	r3, [r1, #44]	; 0x2c
    dfce:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    dfd2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    dfd6:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    dfda:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    dfde:	b2db      	uxtb	r3, r3
    dfe0:	041b      	lsls	r3, r3, #16
    dfe2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    dfe6:	fa5f fc82 	uxtb.w	ip, r2
    dfea:	ea43 030c 	orr.w	r3, r3, ip
    dfee:	b2c2      	uxtb	r2, r0
    dff0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dff4:	630b      	str	r3, [r1, #48]	; 0x30
    dff6:	2000      	movs	r0, #0
    dff8:	bc30      	pop	{r4, r5}
    dffa:	4770      	bx	lr
    dffc:	4a19      	ldr	r2, [pc, #100]	; (e064 <am_hal_mcuctrl_info_get+0x128>)
    dffe:	6993      	ldr	r3, [r2, #24]
    e000:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e004:	700c      	strb	r4, [r1, #0]
    e006:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e00a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e00e:	704b      	strb	r3, [r1, #1]
    e010:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e014:	710b      	strb	r3, [r1, #4]
    e016:	6953      	ldr	r3, [r2, #20]
    e018:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e01c:	f003 0301 	and.w	r3, r3, #1
    e020:	bc30      	pop	{r4, r5}
    e022:	708a      	strb	r2, [r1, #2]
    e024:	70cb      	strb	r3, [r1, #3]
    e026:	4770      	bx	lr
    e028:	4a0e      	ldr	r2, [pc, #56]	; (e064 <am_hal_mcuctrl_info_get+0x128>)
    e02a:	6848      	ldr	r0, [r1, #4]
    e02c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e030:	f003 0401 	and.w	r4, r3, #1
    e034:	700c      	strb	r4, [r1, #0]
    e036:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e03a:	720c      	strb	r4, [r1, #8]
    e03c:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e040:	60cc      	str	r4, [r1, #12]
    e042:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e046:	4320      	orrs	r0, r4
    e048:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e04c:	6048      	str	r0, [r1, #4]
    e04e:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e052:	740b      	strb	r3, [r1, #16]
    e054:	694b      	ldr	r3, [r1, #20]
    e056:	4313      	orrs	r3, r2
    e058:	2000      	movs	r0, #0
    e05a:	bc30      	pop	{r4, r5}
    e05c:	614b      	str	r3, [r1, #20]
    e05e:	4770      	bx	lr
    e060:	2006      	movs	r0, #6
    e062:	4770      	bx	lr
    e064:	40020000 	.word	0x40020000
    e068:	0000ef68 	.word	0x0000ef68
    e06c:	0000efa8 	.word	0x0000efa8
    e070:	f0000f00 	.word	0xf0000f00

0000e074 <am_hal_pwrctrl_periph_enable>:
    e074:	b570      	push	{r4, r5, r6, lr}
    e076:	b082      	sub	sp, #8
    e078:	4604      	mov	r4, r0
    e07a:	f7ff ff57 	bl	df2c <am_hal_interrupt_master_disable>
    e07e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e082:	4e0f      	ldr	r6, [pc, #60]	; (e0c0 <am_hal_pwrctrl_periph_enable+0x4c>)
    e084:	4d0f      	ldr	r5, [pc, #60]	; (e0c4 <am_hal_pwrctrl_periph_enable+0x50>)
    e086:	9001      	str	r0, [sp, #4]
    e088:	00a4      	lsls	r4, r4, #2
    e08a:	68b3      	ldr	r3, [r6, #8]
    e08c:	592a      	ldr	r2, [r5, r4]
    e08e:	4313      	orrs	r3, r2
    e090:	60b3      	str	r3, [r6, #8]
    e092:	9801      	ldr	r0, [sp, #4]
    e094:	442c      	add	r4, r5
    e096:	f7ff ff4d 	bl	df34 <am_hal_interrupt_master_set>
    e09a:	20a0      	movs	r0, #160	; 0xa0
    e09c:	f7ff fd08 	bl	dab0 <am_hal_flash_delay>
    e0a0:	69b3      	ldr	r3, [r6, #24]
    e0a2:	6864      	ldr	r4, [r4, #4]
    e0a4:	4223      	tst	r3, r4
    e0a6:	d103      	bne.n	e0b0 <am_hal_pwrctrl_periph_enable+0x3c>
    e0a8:	20a0      	movs	r0, #160	; 0xa0
    e0aa:	f7ff fd01 	bl	dab0 <am_hal_flash_delay>
    e0ae:	69b3      	ldr	r3, [r6, #24]
    e0b0:	4b03      	ldr	r3, [pc, #12]	; (e0c0 <am_hal_pwrctrl_periph_enable+0x4c>)
    e0b2:	699b      	ldr	r3, [r3, #24]
    e0b4:	4223      	tst	r3, r4
    e0b6:	bf0c      	ite	eq
    e0b8:	2001      	moveq	r0, #1
    e0ba:	2000      	movne	r0, #0
    e0bc:	b002      	add	sp, #8
    e0be:	bd70      	pop	{r4, r5, r6, pc}
    e0c0:	40021000 	.word	0x40021000
    e0c4:	0000f198 	.word	0x0000f198

0000e0c8 <am_hal_pwrctrl_periph_disable>:
    e0c8:	b570      	push	{r4, r5, r6, lr}
    e0ca:	b082      	sub	sp, #8
    e0cc:	4604      	mov	r4, r0
    e0ce:	f7ff ff2d 	bl	df2c <am_hal_interrupt_master_disable>
    e0d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e0d6:	4e10      	ldr	r6, [pc, #64]	; (e118 <am_hal_pwrctrl_periph_disable+0x50>)
    e0d8:	4d10      	ldr	r5, [pc, #64]	; (e11c <am_hal_pwrctrl_periph_disable+0x54>)
    e0da:	9001      	str	r0, [sp, #4]
    e0dc:	00a4      	lsls	r4, r4, #2
    e0de:	68b3      	ldr	r3, [r6, #8]
    e0e0:	592a      	ldr	r2, [r5, r4]
    e0e2:	ea23 0302 	bic.w	r3, r3, r2
    e0e6:	60b3      	str	r3, [r6, #8]
    e0e8:	9801      	ldr	r0, [sp, #4]
    e0ea:	442c      	add	r4, r5
    e0ec:	f7ff ff22 	bl	df34 <am_hal_interrupt_master_set>
    e0f0:	20a0      	movs	r0, #160	; 0xa0
    e0f2:	f7ff fcdd 	bl	dab0 <am_hal_flash_delay>
    e0f6:	69b3      	ldr	r3, [r6, #24]
    e0f8:	6864      	ldr	r4, [r4, #4]
    e0fa:	4223      	tst	r3, r4
    e0fc:	d003      	beq.n	e106 <am_hal_pwrctrl_periph_disable+0x3e>
    e0fe:	20a0      	movs	r0, #160	; 0xa0
    e100:	f7ff fcd6 	bl	dab0 <am_hal_flash_delay>
    e104:	69b3      	ldr	r3, [r6, #24]
    e106:	4b04      	ldr	r3, [pc, #16]	; (e118 <am_hal_pwrctrl_periph_disable+0x50>)
    e108:	699b      	ldr	r3, [r3, #24]
    e10a:	4223      	tst	r3, r4
    e10c:	bf14      	ite	ne
    e10e:	2001      	movne	r0, #1
    e110:	2000      	moveq	r0, #0
    e112:	b002      	add	sp, #8
    e114:	bd70      	pop	{r4, r5, r6, pc}
    e116:	bf00      	nop
    e118:	40021000 	.word	0x40021000
    e11c:	0000f198 	.word	0x0000f198

0000e120 <am_hal_pwrctrl_memory_enable>:
    e120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e124:	4d22      	ldr	r5, [pc, #136]	; (e1b0 <am_hal_pwrctrl_memory_enable+0x90>)
    e126:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e12a:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
    e12e:	f855 8033 	ldr.w	r8, [r5, r3, lsl #3]
    e132:	f8d9 6010 	ldr.w	r6, [r9, #16]
    e136:	f1b8 3fff 	cmp.w	r8, #4294967295
    e13a:	4604      	mov	r4, r0
    e13c:	ea4f 0740 	mov.w	r7, r0, lsl #1
    e140:	d120      	bne.n	e184 <am_hal_pwrctrl_memory_enable+0x64>
    e142:	f8df 9070 	ldr.w	r9, [pc, #112]	; e1b4 <am_hal_pwrctrl_memory_enable+0x94>
    e146:	f8d9 3010 	ldr.w	r3, [r9, #16]
    e14a:	443c      	add	r4, r7
    e14c:	ea43 0308 	orr.w	r3, r3, r8
    e150:	f8c9 3010 	str.w	r3, [r9, #16]
    e154:	20a0      	movs	r0, #160	; 0xa0
    e156:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    e15a:	f7ff fca9 	bl	dab0 <am_hal_flash_delay>
    e15e:	f8d9 3014 	ldr.w	r3, [r9, #20]
    e162:	686c      	ldr	r4, [r5, #4]
    e164:	4033      	ands	r3, r6
    e166:	42a3      	cmp	r3, r4
    e168:	d004      	beq.n	e174 <am_hal_pwrctrl_memory_enable+0x54>
    e16a:	20a0      	movs	r0, #160	; 0xa0
    e16c:	f7ff fca0 	bl	dab0 <am_hal_flash_delay>
    e170:	f8d9 3014 	ldr.w	r3, [r9, #20]
    e174:	4b0f      	ldr	r3, [pc, #60]	; (e1b4 <am_hal_pwrctrl_memory_enable+0x94>)
    e176:	6958      	ldr	r0, [r3, #20]
    e178:	4030      	ands	r0, r6
    e17a:	1b00      	subs	r0, r0, r4
    e17c:	bf18      	it	ne
    e17e:	2001      	movne	r0, #1
    e180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e184:	f8d9 300c 	ldr.w	r3, [r9, #12]
    e188:	4a0a      	ldr	r2, [pc, #40]	; (e1b4 <am_hal_pwrctrl_memory_enable+0x94>)
    e18a:	ea68 0303 	orn	r3, r8, r3
    e18e:	6911      	ldr	r1, [r2, #16]
    e190:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e194:	f043 0301 	orr.w	r3, r3, #1
    e198:	400b      	ands	r3, r1
    e19a:	2010      	movs	r0, #16
    e19c:	6113      	str	r3, [r2, #16]
    e19e:	f7ff fc87 	bl	dab0 <am_hal_flash_delay>
    e1a2:	f1b8 0f00 	cmp.w	r8, #0
    e1a6:	d1cc      	bne.n	e142 <am_hal_pwrctrl_memory_enable+0x22>
    e1a8:	f8d9 4004 	ldr.w	r4, [r9, #4]
    e1ac:	e7e2      	b.n	e174 <am_hal_pwrctrl_memory_enable+0x54>
    e1ae:	bf00      	nop
    e1b0:	0000efe8 	.word	0x0000efe8
    e1b4:	40021000 	.word	0x40021000

0000e1b8 <am_hal_pwrctrl_memory_deepsleep_powerdown>:
    e1b8:	2811      	cmp	r0, #17
    e1ba:	d80b      	bhi.n	e1d4 <am_hal_pwrctrl_memory_deepsleep_powerdown+0x1c>
    e1bc:	4b06      	ldr	r3, [pc, #24]	; (e1d8 <am_hal_pwrctrl_memory_deepsleep_powerdown+0x20>)
    e1be:	4a07      	ldr	r2, [pc, #28]	; (e1dc <am_hal_pwrctrl_memory_deepsleep_powerdown+0x24>)
    e1c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e1c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    e1c8:	68d3      	ldr	r3, [r2, #12]
    e1ca:	6941      	ldr	r1, [r0, #20]
    e1cc:	430b      	orrs	r3, r1
    e1ce:	2000      	movs	r0, #0
    e1d0:	60d3      	str	r3, [r2, #12]
    e1d2:	4770      	bx	lr
    e1d4:	2001      	movs	r0, #1
    e1d6:	4770      	bx	lr
    e1d8:	0000efe8 	.word	0x0000efe8
    e1dc:	40021000 	.word	0x40021000

0000e1e0 <am_hal_pwrctrl_memory_deepsleep_retain>:
    e1e0:	2811      	cmp	r0, #17
    e1e2:	d80c      	bhi.n	e1fe <am_hal_pwrctrl_memory_deepsleep_retain+0x1e>
    e1e4:	4b07      	ldr	r3, [pc, #28]	; (e204 <am_hal_pwrctrl_memory_deepsleep_retain+0x24>)
    e1e6:	4a08      	ldr	r2, [pc, #32]	; (e208 <am_hal_pwrctrl_memory_deepsleep_retain+0x28>)
    e1e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    e1ec:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    e1f0:	68d3      	ldr	r3, [r2, #12]
    e1f2:	6941      	ldr	r1, [r0, #20]
    e1f4:	ea23 0301 	bic.w	r3, r3, r1
    e1f8:	2000      	movs	r0, #0
    e1fa:	60d3      	str	r3, [r2, #12]
    e1fc:	4770      	bx	lr
    e1fe:	2001      	movs	r0, #1
    e200:	4770      	bx	lr
    e202:	bf00      	nop
    e204:	0000efe8 	.word	0x0000efe8
    e208:	40021000 	.word	0x40021000

0000e20c <am_hal_pwrctrl_low_power_init>:
    e20c:	b530      	push	{r4, r5, lr}
    e20e:	4b69      	ldr	r3, [pc, #420]	; (e3b4 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e210:	681a      	ldr	r2, [r3, #0]
    e212:	b085      	sub	sp, #20
    e214:	b912      	cbnz	r2, e21c <am_hal_pwrctrl_low_power_init+0x10>
    e216:	4a68      	ldr	r2, [pc, #416]	; (e3b8 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e218:	6812      	ldr	r2, [r2, #0]
    e21a:	601a      	str	r2, [r3, #0]
    e21c:	4b67      	ldr	r3, [pc, #412]	; (e3bc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e21e:	68db      	ldr	r3, [r3, #12]
    e220:	b2db      	uxtb	r3, r3
    e222:	2b12      	cmp	r3, #18
    e224:	d104      	bne.n	e230 <am_hal_pwrctrl_low_power_init+0x24>
    e226:	4c66      	ldr	r4, [pc, #408]	; (e3c0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e228:	6863      	ldr	r3, [r4, #4]
    e22a:	07d8      	lsls	r0, r3, #31
    e22c:	f100 8088 	bmi.w	e340 <am_hal_pwrctrl_low_power_init+0x134>
    e230:	4b62      	ldr	r3, [pc, #392]	; (e3bc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e232:	68da      	ldr	r2, [r3, #12]
    e234:	b2d2      	uxtb	r2, r2
    e236:	2a20      	cmp	r2, #32
    e238:	d934      	bls.n	e2a4 <am_hal_pwrctrl_low_power_init+0x98>
    e23a:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e23e:	2002      	movs	r0, #2
    e240:	f360 4213 	bfi	r2, r0, #16, #4
    e244:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e248:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e24c:	2203      	movs	r2, #3
    e24e:	f362 5117 	bfi	r1, r2, #20, #4
    e252:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e256:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e25a:	2405      	movs	r4, #5
    e25c:	f364 0103 	bfi	r1, r4, #0, #4
    e260:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e264:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e268:	f360 1107 	bfi	r1, r0, #4, #4
    e26c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e270:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e274:	2406      	movs	r4, #6
    e276:	f364 210b 	bfi	r1, r4, #8, #4
    e27a:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e27e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e282:	2001      	movs	r0, #1
    e284:	f360 310f 	bfi	r1, r0, #12, #4
    e288:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e28c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e290:	f362 61de 	bfi	r1, r2, #27, #4
    e294:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e298:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e29c:	f362 0103 	bfi	r1, r2, #0, #4
    e2a0:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e2a4:	4a45      	ldr	r2, [pc, #276]	; (e3bc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e2a6:	68d3      	ldr	r3, [r2, #12]
    e2a8:	b2db      	uxtb	r3, r3
    e2aa:	2b11      	cmp	r3, #17
    e2ac:	d905      	bls.n	e2ba <am_hal_pwrctrl_low_power_init+0xae>
    e2ae:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e2b2:	f36f 6318 	bfc	r3, #24, #1
    e2b6:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e2ba:	2100      	movs	r1, #0
    e2bc:	200c      	movs	r0, #12
    e2be:	f7ff f9c3 	bl	d648 <am_hal_cachectrl_control>
    e2c2:	4b3f      	ldr	r3, [pc, #252]	; (e3c0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e2c4:	699b      	ldr	r3, [r3, #24]
    e2c6:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e2ca:	05db      	lsls	r3, r3, #23
    e2cc:	d420      	bmi.n	e310 <am_hal_pwrctrl_low_power_init+0x104>
    e2ce:	4c3b      	ldr	r4, [pc, #236]	; (e3bc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e2d0:	68e3      	ldr	r3, [r4, #12]
    e2d2:	b2db      	uxtb	r3, r3
    e2d4:	2b11      	cmp	r3, #17
    e2d6:	d84e      	bhi.n	e376 <am_hal_pwrctrl_low_power_init+0x16a>
    e2d8:	4c38      	ldr	r4, [pc, #224]	; (e3bc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e2da:	493a      	ldr	r1, [pc, #232]	; (e3c4 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e2dc:	7e22      	ldrb	r2, [r4, #24]
    e2de:	2001      	movs	r0, #1
    e2e0:	4302      	orrs	r2, r0
    e2e2:	2307      	movs	r3, #7
    e2e4:	7622      	strb	r2, [r4, #24]
    e2e6:	9000      	str	r0, [sp, #0]
    e2e8:	461a      	mov	r2, r3
    e2ea:	f242 7010 	movw	r0, #10000	; 0x2710
    e2ee:	f7ff fbef 	bl	dad0 <am_hal_flash_delay_status_check>
    e2f2:	2800      	cmp	r0, #0
    e2f4:	d15a      	bne.n	e3ac <am_hal_pwrctrl_low_power_init+0x1a0>
    e2f6:	4b32      	ldr	r3, [pc, #200]	; (e3c0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e2f8:	681a      	ldr	r2, [r3, #0]
    e2fa:	f042 0201 	orr.w	r2, r2, #1
    e2fe:	601a      	str	r2, [r3, #0]
    e300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e306:	625a      	str	r2, [r3, #36]	; 0x24
    e308:	68e3      	ldr	r3, [r4, #12]
    e30a:	b2db      	uxtb	r3, r3
    e30c:	2b11      	cmp	r3, #17
    e30e:	d002      	beq.n	e316 <am_hal_pwrctrl_low_power_init+0x10a>
    e310:	2000      	movs	r0, #0
    e312:	b005      	add	sp, #20
    e314:	bd30      	pop	{r4, r5, pc}
    e316:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e31a:	f360 5356 	bfi	r3, r0, #21, #2
    e31e:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e322:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e326:	220f      	movs	r2, #15
    e328:	f362 138b 	bfi	r3, r2, #6, #6
    e32c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e330:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e334:	f362 0305 	bfi	r3, r2, #0, #6
    e338:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e33c:	b005      	add	sp, #20
    e33e:	bd30      	pop	{r4, r5, pc}
    e340:	f7ff fdf4 	bl	df2c <am_hal_interrupt_master_disable>
    e344:	9002      	str	r0, [sp, #8]
    e346:	68a3      	ldr	r3, [r4, #8]
    e348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e34c:	60a3      	str	r3, [r4, #8]
    e34e:	9802      	ldr	r0, [sp, #8]
    e350:	f7ff fdf0 	bl	df34 <am_hal_interrupt_master_set>
    e354:	20a0      	movs	r0, #160	; 0xa0
    e356:	f7ff fbab 	bl	dab0 <am_hal_flash_delay>
    e35a:	69a3      	ldr	r3, [r4, #24]
    e35c:	0619      	lsls	r1, r3, #24
    e35e:	d403      	bmi.n	e368 <am_hal_pwrctrl_low_power_init+0x15c>
    e360:	20a0      	movs	r0, #160	; 0xa0
    e362:	f7ff fba5 	bl	dab0 <am_hal_flash_delay>
    e366:	69a3      	ldr	r3, [r4, #24]
    e368:	4b15      	ldr	r3, [pc, #84]	; (e3c0 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e36a:	699b      	ldr	r3, [r3, #24]
    e36c:	061a      	lsls	r2, r3, #24
    e36e:	f53f af5f 	bmi.w	e230 <am_hal_pwrctrl_low_power_init+0x24>
    e372:	2001      	movs	r0, #1
    e374:	e7cd      	b.n	e312 <am_hal_pwrctrl_low_power_init+0x106>
    e376:	f7ff fdd9 	bl	df2c <am_hal_interrupt_master_disable>
    e37a:	9003      	str	r0, [sp, #12]
    e37c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e380:	2219      	movs	r2, #25
    e382:	f362 138b 	bfi	r3, r2, #6, #6
    e386:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e38a:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e38e:	210c      	movs	r1, #12
    e390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e394:	f361 0205 	bfi	r2, r1, #0, #6
    e398:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e39c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e39e:	f365 5296 	bfi	r2, r5, #22, #1
    e3a2:	63da      	str	r2, [r3, #60]	; 0x3c
    e3a4:	9803      	ldr	r0, [sp, #12]
    e3a6:	f7ff fdc5 	bl	df34 <am_hal_interrupt_master_set>
    e3aa:	e795      	b.n	e2d8 <am_hal_pwrctrl_low_power_init+0xcc>
    e3ac:	2004      	movs	r0, #4
    e3ae:	b005      	add	sp, #20
    e3b0:	bd30      	pop	{r4, r5, pc}
    e3b2:	bf00      	nop
    e3b4:	10001148 	.word	0x10001148
    e3b8:	4ffff000 	.word	0x4ffff000
    e3bc:	40020000 	.word	0x40020000
    e3c0:	40021000 	.word	0x40021000
    e3c4:	40020018 	.word	0x40020018

0000e3c8 <am_hal_rtc_osc_select>:
    e3c8:	b928      	cbnz	r0, e3d6 <am_hal_rtc_osc_select+0xe>
    e3ca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e3ce:	68d3      	ldr	r3, [r2, #12]
    e3d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e3d4:	60d3      	str	r3, [r2, #12]
    e3d6:	4770      	bx	lr

0000e3d8 <am_hal_rtc_osc_enable>:
    e3d8:	4a03      	ldr	r2, [pc, #12]	; (e3e8 <am_hal_rtc_osc_enable+0x10>)
    e3da:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e3de:	f36f 1304 	bfc	r3, #4, #1
    e3e2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e3e6:	4770      	bx	lr
    e3e8:	40004200 	.word	0x40004200

0000e3ec <am_hal_rtc_osc_disable>:
    e3ec:	4a03      	ldr	r2, [pc, #12]	; (e3fc <am_hal_rtc_osc_disable+0x10>)
    e3ee:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e3f2:	f043 0310 	orr.w	r3, r3, #16
    e3f6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e3fa:	4770      	bx	lr
    e3fc:	40004200 	.word	0x40004200

0000e400 <am_hal_rtc_int_enable>:
    e400:	4a03      	ldr	r2, [pc, #12]	; (e410 <am_hal_rtc_int_enable+0x10>)
    e402:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    e406:	4318      	orrs	r0, r3
    e408:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
    e40c:	4770      	bx	lr
    e40e:	bf00      	nop
    e410:	40004200 	.word	0x40004200

0000e414 <am_hal_rtc_int_clear>:
    e414:	4b01      	ldr	r3, [pc, #4]	; (e41c <am_hal_rtc_int_clear+0x8>)
    e416:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    e41a:	4770      	bx	lr
    e41c:	40004200 	.word	0x40004200

0000e420 <am_hal_rtc_alarm_interval_set>:
    e420:	2808      	cmp	r0, #8
    e422:	d018      	beq.n	e456 <am_hal_rtc_alarm_interval_set+0x36>
    e424:	2809      	cmp	r0, #9
    e426:	d013      	beq.n	e450 <am_hal_rtc_alarm_interval_set+0x30>
    e428:	4b0c      	ldr	r3, [pc, #48]	; (e45c <am_hal_rtc_alarm_interval_set+0x3c>)
    e42a:	6c99      	ldr	r1, [r3, #72]	; 0x48
    e42c:	b2c9      	uxtb	r1, r1
    e42e:	29ef      	cmp	r1, #239	; 0xef
    e430:	f000 0007 	and.w	r0, r0, #7
    e434:	bf88      	it	hi
    e436:	2100      	movhi	r1, #0
    e438:	4b08      	ldr	r3, [pc, #32]	; (e45c <am_hal_rtc_alarm_interval_set+0x3c>)
    e43a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    e43e:	f360 0243 	bfi	r2, r0, #1, #3
    e442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    e446:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e448:	f361 0207 	bfi	r2, r1, #0, #8
    e44c:	649a      	str	r2, [r3, #72]	; 0x48
    e44e:	4770      	bx	lr
    e450:	21ff      	movs	r1, #255	; 0xff
    e452:	2007      	movs	r0, #7
    e454:	e7f0      	b.n	e438 <am_hal_rtc_alarm_interval_set+0x18>
    e456:	21f0      	movs	r1, #240	; 0xf0
    e458:	2007      	movs	r0, #7
    e45a:	e7ed      	b.n	e438 <am_hal_rtc_alarm_interval_set+0x18>
    e45c:	40004200 	.word	0x40004200

0000e460 <am_hal_sysctrl_sleep>:
    e460:	b510      	push	{r4, lr}
    e462:	b082      	sub	sp, #8
    e464:	4604      	mov	r4, r0
    e466:	f7ff fd61 	bl	df2c <am_hal_interrupt_master_disable>
    e46a:	9001      	str	r0, [sp, #4]
    e46c:	b124      	cbz	r4, e478 <am_hal_sysctrl_sleep+0x18>
    e46e:	4b12      	ldr	r3, [pc, #72]	; (e4b8 <am_hal_sysctrl_sleep+0x58>)
    e470:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e474:	07db      	lsls	r3, r3, #31
    e476:	d513      	bpl.n	e4a0 <am_hal_sysctrl_sleep+0x40>
    e478:	4a10      	ldr	r2, [pc, #64]	; (e4bc <am_hal_sysctrl_sleep+0x5c>)
    e47a:	6913      	ldr	r3, [r2, #16]
    e47c:	f023 0304 	bic.w	r3, r3, #4
    e480:	6113      	str	r3, [r2, #16]
    e482:	f3bf 8f4f 	dsb	sy
    e486:	4a0e      	ldr	r2, [pc, #56]	; (e4c0 <am_hal_sysctrl_sleep+0x60>)
    e488:	4b0e      	ldr	r3, [pc, #56]	; (e4c4 <am_hal_sysctrl_sleep+0x64>)
    e48a:	6812      	ldr	r2, [r2, #0]
    e48c:	601a      	str	r2, [r3, #0]
    e48e:	bf30      	wfi
    e490:	f3bf 8f6f 	isb	sy
    e494:	9801      	ldr	r0, [sp, #4]
    e496:	b002      	add	sp, #8
    e498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e49c:	f7ff bd4a 	b.w	df34 <am_hal_interrupt_master_set>
    e4a0:	4b09      	ldr	r3, [pc, #36]	; (e4c8 <am_hal_sysctrl_sleep+0x68>)
    e4a2:	681a      	ldr	r2, [r3, #0]
    e4a4:	b912      	cbnz	r2, e4ac <am_hal_sysctrl_sleep+0x4c>
    e4a6:	4a09      	ldr	r2, [pc, #36]	; (e4cc <am_hal_sysctrl_sleep+0x6c>)
    e4a8:	6812      	ldr	r2, [r2, #0]
    e4aa:	601a      	str	r2, [r3, #0]
    e4ac:	4a03      	ldr	r2, [pc, #12]	; (e4bc <am_hal_sysctrl_sleep+0x5c>)
    e4ae:	6913      	ldr	r3, [r2, #16]
    e4b0:	f043 0304 	orr.w	r3, r3, #4
    e4b4:	6113      	str	r3, [r2, #16]
    e4b6:	e7e4      	b.n	e482 <am_hal_sysctrl_sleep+0x22>
    e4b8:	40020000 	.word	0x40020000
    e4bc:	e000ed00 	.word	0xe000ed00
    e4c0:	5fff0000 	.word	0x5fff0000
    e4c4:	1000114c 	.word	0x1000114c
    e4c8:	10001148 	.word	0x10001148
    e4cc:	4ffff000 	.word	0x4ffff000

0000e4d0 <am_hal_uart_initialize>:
    e4d0:	2801      	cmp	r0, #1
    e4d2:	d81a      	bhi.n	e50a <am_hal_uart_initialize+0x3a>
    e4d4:	b1e9      	cbz	r1, e512 <am_hal_uart_initialize+0x42>
    e4d6:	b530      	push	{r4, r5, lr}
    e4d8:	2264      	movs	r2, #100	; 0x64
    e4da:	4d0f      	ldr	r5, [pc, #60]	; (e518 <am_hal_uart_initialize+0x48>)
    e4dc:	fb00 f202 	mul.w	r2, r0, r2
    e4e0:	18ac      	adds	r4, r5, r2
    e4e2:	78e3      	ldrb	r3, [r4, #3]
    e4e4:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    e4e8:	f013 0301 	ands.w	r3, r3, #1
    e4ec:	d10f      	bne.n	e50e <am_hal_uart_initialize+0x3e>
    e4ee:	6260      	str	r0, [r4, #36]	; 0x24
    e4f0:	58a8      	ldr	r0, [r5, r2]
    e4f2:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    e4f6:	4809      	ldr	r0, [pc, #36]	; (e51c <am_hal_uart_initialize+0x4c>)
    e4f8:	ea4c 0000 	orr.w	r0, ip, r0
    e4fc:	50a8      	str	r0, [r5, r2]
    e4fe:	f884 e004 	strb.w	lr, [r4, #4]
    e502:	6623      	str	r3, [r4, #96]	; 0x60
    e504:	4618      	mov	r0, r3
    e506:	600c      	str	r4, [r1, #0]
    e508:	bd30      	pop	{r4, r5, pc}
    e50a:	2005      	movs	r0, #5
    e50c:	4770      	bx	lr
    e50e:	2007      	movs	r0, #7
    e510:	bd30      	pop	{r4, r5, pc}
    e512:	2006      	movs	r0, #6
    e514:	4770      	bx	lr
    e516:	bf00      	nop
    e518:	10001150 	.word	0x10001150
    e51c:	01ea9e06 	.word	0x01ea9e06

0000e520 <am_hal_uart_deinitialize>:
    e520:	b170      	cbz	r0, e540 <am_hal_uart_deinitialize+0x20>
    e522:	6803      	ldr	r3, [r0, #0]
    e524:	4a07      	ldr	r2, [pc, #28]	; (e544 <am_hal_uart_deinitialize+0x24>)
    e526:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e52a:	4293      	cmp	r3, r2
    e52c:	d108      	bne.n	e540 <am_hal_uart_deinitialize+0x20>
    e52e:	78c2      	ldrb	r2, [r0, #3]
    e530:	2300      	movs	r3, #0
    e532:	f36f 0200 	bfc	r2, #0, #1
    e536:	70c2      	strb	r2, [r0, #3]
    e538:	6243      	str	r3, [r0, #36]	; 0x24
    e53a:	7103      	strb	r3, [r0, #4]
    e53c:	4618      	mov	r0, r3
    e53e:	4770      	bx	lr
    e540:	2002      	movs	r0, #2
    e542:	4770      	bx	lr
    e544:	01ea9e06 	.word	0x01ea9e06

0000e548 <am_hal_uart_power_control>:
    e548:	b5f0      	push	{r4, r5, r6, r7, lr}
    e54a:	4604      	mov	r4, r0
    e54c:	6800      	ldr	r0, [r0, #0]
    e54e:	4b39      	ldr	r3, [pc, #228]	; (e634 <am_hal_uart_power_control+0xec>)
    e550:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e554:	429e      	cmp	r6, r3
    e556:	b085      	sub	sp, #20
    e558:	d13f      	bne.n	e5da <am_hal_uart_power_control+0x92>
    e55a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e55c:	f105 0008 	add.w	r0, r5, #8
    e560:	b2c7      	uxtb	r7, r0
    e562:	b189      	cbz	r1, e588 <am_hal_uart_power_control+0x40>
    e564:	3901      	subs	r1, #1
    e566:	2901      	cmp	r1, #1
    e568:	d834      	bhi.n	e5d4 <am_hal_uart_power_control+0x8c>
    e56a:	2a00      	cmp	r2, #0
    e56c:	d138      	bne.n	e5e0 <am_hal_uart_power_control+0x98>
    e56e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e572:	351c      	adds	r5, #28
    e574:	032d      	lsls	r5, r5, #12
    e576:	f04f 33ff 	mov.w	r3, #4294967295
    e57a:	646b      	str	r3, [r5, #68]	; 0x44
    e57c:	4638      	mov	r0, r7
    e57e:	f7ff fda3 	bl	e0c8 <am_hal_pwrctrl_periph_disable>
    e582:	2000      	movs	r0, #0
    e584:	b005      	add	sp, #20
    e586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e588:	2a00      	cmp	r2, #0
    e58a:	d04a      	beq.n	e622 <am_hal_uart_power_control+0xda>
    e58c:	7923      	ldrb	r3, [r4, #4]
    e58e:	2b00      	cmp	r3, #0
    e590:	d04e      	beq.n	e630 <am_hal_uart_power_control+0xe8>
    e592:	4638      	mov	r0, r7
    e594:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e598:	9101      	str	r1, [sp, #4]
    e59a:	351c      	adds	r5, #28
    e59c:	f7ff fd6a 	bl	e074 <am_hal_pwrctrl_periph_enable>
    e5a0:	f7ff fcc4 	bl	df2c <am_hal_interrupt_master_disable>
    e5a4:	032d      	lsls	r5, r5, #12
    e5a6:	68a3      	ldr	r3, [r4, #8]
    e5a8:	9002      	str	r0, [sp, #8]
    e5aa:	622b      	str	r3, [r5, #32]
    e5ac:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e5b0:	626a      	str	r2, [r5, #36]	; 0x24
    e5b2:	62ab      	str	r3, [r5, #40]	; 0x28
    e5b4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e5b8:	62ea      	str	r2, [r5, #44]	; 0x2c
    e5ba:	632b      	str	r3, [r5, #48]	; 0x30
    e5bc:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e5c0:	9901      	ldr	r1, [sp, #4]
    e5c2:	636a      	str	r2, [r5, #52]	; 0x34
    e5c4:	63ab      	str	r3, [r5, #56]	; 0x38
    e5c6:	9802      	ldr	r0, [sp, #8]
    e5c8:	7121      	strb	r1, [r4, #4]
    e5ca:	f7ff fcb3 	bl	df34 <am_hal_interrupt_master_set>
    e5ce:	9901      	ldr	r1, [sp, #4]
    e5d0:	4608      	mov	r0, r1
    e5d2:	e000      	b.n	e5d6 <am_hal_uart_power_control+0x8e>
    e5d4:	2006      	movs	r0, #6
    e5d6:	b005      	add	sp, #20
    e5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5da:	2002      	movs	r0, #2
    e5dc:	b005      	add	sp, #20
    e5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5e0:	f7ff fca4 	bl	df2c <am_hal_interrupt_master_disable>
    e5e4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e5e8:	351c      	adds	r5, #28
    e5ea:	032d      	lsls	r5, r5, #12
    e5ec:	9003      	str	r0, [sp, #12]
    e5ee:	6a2b      	ldr	r3, [r5, #32]
    e5f0:	60a3      	str	r3, [r4, #8]
    e5f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e5f4:	60e3      	str	r3, [r4, #12]
    e5f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e5f8:	6123      	str	r3, [r4, #16]
    e5fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e5fc:	6163      	str	r3, [r4, #20]
    e5fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e600:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e602:	61a3      	str	r3, [r4, #24]
    e604:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e606:	61e2      	str	r2, [r4, #28]
    e608:	2201      	movs	r2, #1
    e60a:	6223      	str	r3, [r4, #32]
    e60c:	9803      	ldr	r0, [sp, #12]
    e60e:	7122      	strb	r2, [r4, #4]
    e610:	f7ff fc90 	bl	df34 <am_hal_interrupt_master_set>
    e614:	6823      	ldr	r3, [r4, #0]
    e616:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e61a:	42b3      	cmp	r3, r6
    e61c:	d1ae      	bne.n	e57c <am_hal_uart_power_control+0x34>
    e61e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e620:	e7a5      	b.n	e56e <am_hal_uart_power_control+0x26>
    e622:	4638      	mov	r0, r7
    e624:	9201      	str	r2, [sp, #4]
    e626:	f7ff fd25 	bl	e074 <am_hal_pwrctrl_periph_enable>
    e62a:	9a01      	ldr	r2, [sp, #4]
    e62c:	4610      	mov	r0, r2
    e62e:	e7d2      	b.n	e5d6 <am_hal_uart_power_control+0x8e>
    e630:	2007      	movs	r0, #7
    e632:	e7d0      	b.n	e5d6 <am_hal_uart_power_control+0x8e>
    e634:	01ea9e06 	.word	0x01ea9e06

0000e638 <am_hal_uart_configure>:
    e638:	6803      	ldr	r3, [r0, #0]
    e63a:	4a78      	ldr	r2, [pc, #480]	; (e81c <am_hal_uart_configure+0x1e4>)
    e63c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e640:	4293      	cmp	r3, r2
    e642:	d001      	beq.n	e648 <am_hal_uart_configure+0x10>
    e644:	2002      	movs	r0, #2
    e646:	4770      	bx	lr
    e648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e64c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e64e:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e652:	341c      	adds	r4, #28
    e654:	0324      	lsls	r4, r4, #12
    e656:	2700      	movs	r7, #0
    e658:	b084      	sub	sp, #16
    e65a:	6327      	str	r7, [r4, #48]	; 0x30
    e65c:	460e      	mov	r6, r1
    e65e:	4605      	mov	r5, r0
    e660:	f7ff fc64 	bl	df2c <am_hal_interrupt_master_disable>
    e664:	9001      	str	r0, [sp, #4]
    e666:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e668:	f043 0308 	orr.w	r3, r3, #8
    e66c:	8623      	strh	r3, [r4, #48]	; 0x30
    e66e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e670:	2201      	movs	r2, #1
    e672:	f362 1306 	bfi	r3, r2, #4, #3
    e676:	8623      	strh	r3, [r4, #48]	; 0x30
    e678:	9801      	ldr	r0, [sp, #4]
    e67a:	f7ff fc5b 	bl	df34 <am_hal_interrupt_master_set>
    e67e:	f7ff fc55 	bl	df2c <am_hal_interrupt_master_disable>
    e682:	9002      	str	r0, [sp, #8]
    e684:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e686:	f367 0300 	bfi	r3, r7, #0, #1
    e68a:	8623      	strh	r3, [r4, #48]	; 0x30
    e68c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e68e:	f367 2349 	bfi	r3, r7, #9, #1
    e692:	8623      	strh	r3, [r4, #48]	; 0x30
    e694:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e696:	f367 2308 	bfi	r3, r7, #8, #1
    e69a:	8623      	strh	r3, [r4, #48]	; 0x30
    e69c:	9802      	ldr	r0, [sp, #8]
    e69e:	f7ff fc49 	bl	df34 <am_hal_interrupt_master_set>
    e6a2:	4b5f      	ldr	r3, [pc, #380]	; (e820 <am_hal_uart_configure+0x1e8>)
    e6a4:	6832      	ldr	r2, [r6, #0]
    e6a6:	68db      	ldr	r3, [r3, #12]
    e6a8:	b2db      	uxtb	r3, r3
    e6aa:	2b12      	cmp	r3, #18
    e6ac:	d076      	beq.n	e79c <am_hal_uart_configure+0x164>
    e6ae:	4b5c      	ldr	r3, [pc, #368]	; (e820 <am_hal_uart_configure+0x1e8>)
    e6b0:	68db      	ldr	r3, [r3, #12]
    e6b2:	b2db      	uxtb	r3, r3
    e6b4:	2b20      	cmp	r3, #32
    e6b6:	d902      	bls.n	e6be <am_hal_uart_configure+0x86>
    e6b8:	4b5a      	ldr	r3, [pc, #360]	; (e824 <am_hal_uart_configure+0x1ec>)
    e6ba:	429a      	cmp	r2, r3
    e6bc:	d871      	bhi.n	e7a2 <am_hal_uart_configure+0x16a>
    e6be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e6c0:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e6c4:	3b01      	subs	r3, #1
    e6c6:	b2db      	uxtb	r3, r3
    e6c8:	2b03      	cmp	r3, #3
    e6ca:	d86c      	bhi.n	e7a6 <am_hal_uart_configure+0x16e>
    e6cc:	4956      	ldr	r1, [pc, #344]	; (e828 <am_hal_uart_configure+0x1f0>)
    e6ce:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e6d2:	0112      	lsls	r2, r2, #4
    e6d4:	4291      	cmp	r1, r2
    e6d6:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e6da:	fbb1 f0f2 	udiv	r0, r1, r2
    e6de:	fbb3 f3f2 	udiv	r3, r3, r2
    e6e2:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e6e6:	d364      	bcc.n	e7b2 <am_hal_uart_configure+0x17a>
    e6e8:	6260      	str	r0, [r4, #36]	; 0x24
    e6ea:	6260      	str	r0, [r4, #36]	; 0x24
    e6ec:	62a3      	str	r3, [r4, #40]	; 0x28
    e6ee:	089b      	lsrs	r3, r3, #2
    e6f0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    e6f4:	fbb1 f3f3 	udiv	r3, r1, r3
    e6f8:	662b      	str	r3, [r5, #96]	; 0x60
    e6fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e6fc:	f36f 338e 	bfc	r3, #14, #1
    e700:	8623      	strh	r3, [r4, #48]	; 0x30
    e702:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e704:	f36f 33cf 	bfc	r3, #15, #1
    e708:	8623      	strh	r3, [r4, #48]	; 0x30
    e70a:	6933      	ldr	r3, [r6, #16]
    e70c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e70e:	6971      	ldr	r1, [r6, #20]
    e710:	431a      	orrs	r2, r3
    e712:	6873      	ldr	r3, [r6, #4]
    e714:	6322      	str	r2, [r4, #48]	; 0x30
    e716:	68f2      	ldr	r2, [r6, #12]
    e718:	6361      	str	r1, [r4, #52]	; 0x34
    e71a:	4313      	orrs	r3, r2
    e71c:	68b2      	ldr	r2, [r6, #8]
    e71e:	4313      	orrs	r3, r2
    e720:	f043 0310 	orr.w	r3, r3, #16
    e724:	62e3      	str	r3, [r4, #44]	; 0x2c
    e726:	f7ff fc01 	bl	df2c <am_hal_interrupt_master_disable>
    e72a:	9003      	str	r0, [sp, #12]
    e72c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e72e:	f043 0301 	orr.w	r3, r3, #1
    e732:	8623      	strh	r3, [r4, #48]	; 0x30
    e734:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e73a:	8623      	strh	r3, [r4, #48]	; 0x30
    e73c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e73e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e742:	8623      	strh	r3, [r4, #48]	; 0x30
    e744:	9803      	ldr	r0, [sp, #12]
    e746:	f7ff fbf5 	bl	df34 <am_hal_interrupt_master_set>
    e74a:	682a      	ldr	r2, [r5, #0]
    e74c:	4b33      	ldr	r3, [pc, #204]	; (e81c <am_hal_uart_configure+0x1e4>)
    e74e:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e752:	4598      	cmp	r8, r3
    e754:	d11e      	bne.n	e794 <am_hal_uart_configure+0x15c>
    e756:	69b1      	ldr	r1, [r6, #24]
    e758:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    e75c:	b109      	cbz	r1, e762 <am_hal_uart_configure+0x12a>
    e75e:	69f3      	ldr	r3, [r6, #28]
    e760:	bb5b      	cbnz	r3, e7ba <am_hal_uart_configure+0x182>
    e762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e764:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e768:	331c      	adds	r3, #28
    e76a:	031b      	lsls	r3, r3, #12
    e76c:	2200      	movs	r2, #0
    e76e:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e774:	f022 0220 	bic.w	r2, r2, #32
    e778:	639a      	str	r2, [r3, #56]	; 0x38
    e77a:	b10c      	cbz	r4, e780 <am_hal_uart_configure+0x148>
    e77c:	2f00      	cmp	r7, #0
    e77e:	d132      	bne.n	e7e6 <am_hal_uart_configure+0x1ae>
    e780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e782:	2000      	movs	r0, #0
    e784:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e788:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e78c:	639a      	str	r2, [r3, #56]	; 0x38
    e78e:	b004      	add	sp, #16
    e790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e794:	2000      	movs	r0, #0
    e796:	b004      	add	sp, #16
    e798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e79c:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e7a0:	d985      	bls.n	e6ae <am_hal_uart_configure+0x76>
    e7a2:	4822      	ldr	r0, [pc, #136]	; (e82c <am_hal_uart_configure+0x1f4>)
    e7a4:	e7f3      	b.n	e78e <am_hal_uart_configure+0x156>
    e7a6:	4822      	ldr	r0, [pc, #136]	; (e830 <am_hal_uart_configure+0x1f8>)
    e7a8:	2300      	movs	r3, #0
    e7aa:	662b      	str	r3, [r5, #96]	; 0x60
    e7ac:	b004      	add	sp, #16
    e7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7b2:	2300      	movs	r3, #0
    e7b4:	481d      	ldr	r0, [pc, #116]	; (e82c <am_hal_uart_configure+0x1f4>)
    e7b6:	662b      	str	r3, [r5, #96]	; 0x60
    e7b8:	e7e9      	b.n	e78e <am_hal_uart_configure+0x156>
    e7ba:	2201      	movs	r2, #1
    e7bc:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e7c0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e7c4:	f000 fa5e 	bl	ec84 <am_hal_queue_init>
    e7c8:	682b      	ldr	r3, [r5, #0]
    e7ca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7ce:	4543      	cmp	r3, r8
    e7d0:	d1e0      	bne.n	e794 <am_hal_uart_configure+0x15c>
    e7d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e7d4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e7d8:	331c      	adds	r3, #28
    e7da:	031b      	lsls	r3, r3, #12
    e7dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e7de:	f042 0220 	orr.w	r2, r2, #32
    e7e2:	639a      	str	r2, [r3, #56]	; 0x38
    e7e4:	e7c9      	b.n	e77a <am_hal_uart_configure+0x142>
    e7e6:	2201      	movs	r2, #1
    e7e8:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    e7ec:	463b      	mov	r3, r7
    e7ee:	4621      	mov	r1, r4
    e7f0:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e7f4:	f000 fa46 	bl	ec84 <am_hal_queue_init>
    e7f8:	682b      	ldr	r3, [r5, #0]
    e7fa:	4a08      	ldr	r2, [pc, #32]	; (e81c <am_hal_uart_configure+0x1e4>)
    e7fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e800:	4293      	cmp	r3, r2
    e802:	d1c7      	bne.n	e794 <am_hal_uart_configure+0x15c>
    e804:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e806:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e80a:	331c      	adds	r3, #28
    e80c:	031b      	lsls	r3, r3, #12
    e80e:	2000      	movs	r0, #0
    e810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e812:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e816:	639a      	str	r2, [r3, #56]	; 0x38
    e818:	e7b9      	b.n	e78e <am_hal_uart_configure+0x156>
    e81a:	bf00      	nop
    e81c:	01ea9e06 	.word	0x01ea9e06
    e820:	40020000 	.word	0x40020000
    e824:	0016e360 	.word	0x0016e360
    e828:	0000f24c 	.word	0x0000f24c
    e82c:	08000003 	.word	0x08000003
    e830:	08000002 	.word	0x08000002

0000e834 <am_hal_uart_transfer>:
    e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e838:	ed2d 8b02 	vpush	{d8}
    e83c:	680d      	ldr	r5, [r1, #0]
    e83e:	b091      	sub	sp, #68	; 0x44
    e840:	4604      	mov	r4, r0
    e842:	b14d      	cbz	r5, e858 <am_hal_uart_transfer+0x24>
    e844:	2d01      	cmp	r5, #1
    e846:	f000 808f 	beq.w	e968 <am_hal_uart_transfer+0x134>
    e84a:	2507      	movs	r5, #7
    e84c:	4628      	mov	r0, r5
    e84e:	b011      	add	sp, #68	; 0x44
    e850:	ecbd 8b02 	vpop	{d8}
    e854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e858:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    e85c:	684b      	ldr	r3, [r1, #4]
    e85e:	690a      	ldr	r2, [r1, #16]
    e860:	9202      	str	r2, [sp, #8]
    e862:	4618      	mov	r0, r3
    e864:	f1b8 0f00 	cmp.w	r8, #0
    e868:	f000 8111 	beq.w	ea8e <am_hal_uart_transfer+0x25a>
    e86c:	f1bb 0f00 	cmp.w	fp, #0
    e870:	f000 8172 	beq.w	eb58 <am_hal_uart_transfer+0x324>
    e874:	2c00      	cmp	r4, #0
    e876:	f000 8165 	beq.w	eb44 <am_hal_uart_transfer+0x310>
    e87a:	46a9      	mov	r9, r5
    e87c:	462f      	mov	r7, r5
    e87e:	9501      	str	r5, [sp, #4]
    e880:	4625      	mov	r5, r4
    e882:	4619      	mov	r1, r3
    e884:	682a      	ldr	r2, [r5, #0]
    e886:	461c      	mov	r4, r3
    e888:	4bad      	ldr	r3, [pc, #692]	; (eb40 <am_hal_uart_transfer+0x30c>)
    e88a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e88e:	429a      	cmp	r2, r3
    e890:	465e      	mov	r6, fp
    e892:	d12d      	bne.n	e8f0 <am_hal_uart_transfer+0xbc>
    e894:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e898:	bb7a      	cbnz	r2, e8fa <am_hal_uart_transfer+0xc6>
    e89a:	1e48      	subs	r0, r1, #1
    e89c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e89e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e8a2:	311c      	adds	r1, #28
    e8a4:	0309      	lsls	r1, r1, #12
    e8a6:	698b      	ldr	r3, [r1, #24]
    e8a8:	069b      	lsls	r3, r3, #26
    e8aa:	d405      	bmi.n	e8b8 <am_hal_uart_transfer+0x84>
    e8ac:	3201      	adds	r2, #1
    e8ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    e8b2:	600b      	str	r3, [r1, #0]
    e8b4:	4296      	cmp	r6, r2
    e8b6:	d8f6      	bhi.n	e8a6 <am_hal_uart_transfer+0x72>
    e8b8:	4417      	add	r7, r2
    e8ba:	1ab6      	subs	r6, r6, r2
    e8bc:	b936      	cbnz	r6, e8cc <am_hal_uart_transfer+0x98>
    e8be:	9d01      	ldr	r5, [sp, #4]
    e8c0:	9b02      	ldr	r3, [sp, #8]
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	f000 808c 	beq.w	e9e0 <am_hal_uart_transfer+0x1ac>
    e8c8:	601f      	str	r7, [r3, #0]
    e8ca:	e7bf      	b.n	e84c <am_hal_uart_transfer+0x18>
    e8cc:	2010      	movs	r0, #16
    e8ce:	f7ff f8ef 	bl	dab0 <am_hal_flash_delay>
    e8d2:	f1b8 3fff 	cmp.w	r8, #4294967295
    e8d6:	bf18      	it	ne
    e8d8:	f109 0901 	addne.w	r9, r9, #1
    e8dc:	45c8      	cmp	r8, r9
    e8de:	d9ee      	bls.n	e8be <am_hal_uart_transfer+0x8a>
    e8e0:	682a      	ldr	r2, [r5, #0]
    e8e2:	4b97      	ldr	r3, [pc, #604]	; (eb40 <am_hal_uart_transfer+0x30c>)
    e8e4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e8e8:	429a      	cmp	r2, r3
    e8ea:	eb04 0107 	add.w	r1, r4, r7
    e8ee:	d0d1      	beq.n	e894 <am_hal_uart_transfer+0x60>
    e8f0:	9b02      	ldr	r3, [sp, #8]
    e8f2:	b103      	cbz	r3, e8f6 <am_hal_uart_transfer+0xc2>
    e8f4:	601f      	str	r7, [r3, #0]
    e8f6:	2502      	movs	r5, #2
    e8f8:	e7a8      	b.n	e84c <am_hal_uart_transfer+0x18>
    e8fa:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    e8fe:	1a12      	subs	r2, r2, r0
    e900:	42b2      	cmp	r2, r6
    e902:	4613      	mov	r3, r2
    e904:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    e908:	bf28      	it	cs
    e90a:	4633      	movcs	r3, r6
    e90c:	461a      	mov	r2, r3
    e90e:	4658      	mov	r0, fp
    e910:	9303      	str	r3, [sp, #12]
    e912:	f000 f9c3 	bl	ec9c <am_hal_queue_item_add>
    e916:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    e91a:	f7ff fb07 	bl	df2c <am_hal_interrupt_master_disable>
    e91e:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    e922:	f10a 0a1c 	add.w	sl, sl, #28
    e926:	9008      	str	r0, [sp, #32]
    e928:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    e92c:	e00d      	b.n	e94a <am_hal_uart_transfer+0x116>
    e92e:	f000 f9f3 	bl	ed18 <am_hal_queue_item_get>
    e932:	b190      	cbz	r0, e95a <am_hal_uart_transfer+0x126>
    e934:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e936:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e93a:	321c      	adds	r2, #28
    e93c:	0312      	lsls	r2, r2, #12
    e93e:	6993      	ldr	r3, [r2, #24]
    e940:	0699      	lsls	r1, r3, #26
    e942:	bf5c      	itt	pl
    e944:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    e948:	6013      	strpl	r3, [r2, #0]
    e94a:	f8da 3018 	ldr.w	r3, [sl, #24]
    e94e:	069b      	lsls	r3, r3, #26
    e950:	f04f 0201 	mov.w	r2, #1
    e954:	a907      	add	r1, sp, #28
    e956:	4658      	mov	r0, fp
    e958:	d5e9      	bpl.n	e92e <am_hal_uart_transfer+0xfa>
    e95a:	9b03      	ldr	r3, [sp, #12]
    e95c:	9808      	ldr	r0, [sp, #32]
    e95e:	441f      	add	r7, r3
    e960:	1af6      	subs	r6, r6, r3
    e962:	f7ff fae7 	bl	df34 <am_hal_interrupt_master_set>
    e966:	e7a9      	b.n	e8bc <am_hal_uart_transfer+0x88>
    e968:	68cd      	ldr	r5, [r1, #12]
    e96a:	690b      	ldr	r3, [r1, #16]
    e96c:	9301      	str	r3, [sp, #4]
    e96e:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    e972:	2d00      	cmp	r5, #0
    e974:	f000 80b5 	beq.w	eae2 <am_hal_uart_transfer+0x2ae>
    e978:	2f00      	cmp	r7, #0
    e97a:	f000 811e 	beq.w	ebba <am_hal_uart_transfer+0x386>
    e97e:	2800      	cmp	r0, #0
    e980:	f000 80e7 	beq.w	eb52 <am_hal_uart_transfer+0x31e>
    e984:	6822      	ldr	r2, [r4, #0]
    e986:	f8df a1b8 	ldr.w	sl, [pc, #440]	; eb40 <am_hal_uart_transfer+0x30c>
    e98a:	f100 0348 	add.w	r3, r0, #72	; 0x48
    e98e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e992:	ee08 3a10 	vmov	s16, r3
    e996:	f04f 0900 	mov.w	r9, #0
    e99a:	462b      	mov	r3, r5
    e99c:	4552      	cmp	r2, sl
    e99e:	46c8      	mov	r8, r9
    e9a0:	465d      	mov	r5, fp
    e9a2:	461e      	mov	r6, r3
    e9a4:	d133      	bne.n	ea0e <am_hal_uart_transfer+0x1da>
    e9a6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e9aa:	2a00      	cmp	r2, #0
    e9ac:	d137      	bne.n	ea1e <am_hal_uart_transfer+0x1ea>
    e9ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e9b0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e9b4:	311c      	adds	r1, #28
    e9b6:	1e68      	subs	r0, r5, #1
    e9b8:	0309      	lsls	r1, r1, #12
    e9ba:	698b      	ldr	r3, [r1, #24]
    e9bc:	06dd      	lsls	r5, r3, #27
    e9be:	d408      	bmi.n	e9d2 <am_hal_uart_transfer+0x19e>
    e9c0:	680b      	ldr	r3, [r1, #0]
    e9c2:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e9c6:	d15e      	bne.n	ea86 <am_hal_uart_transfer+0x252>
    e9c8:	3201      	adds	r2, #1
    e9ca:	4297      	cmp	r7, r2
    e9cc:	f800 3f01 	strb.w	r3, [r0, #1]!
    e9d0:	d8f3      	bhi.n	e9ba <am_hal_uart_transfer+0x186>
    e9d2:	4490      	add	r8, r2
    e9d4:	1abf      	subs	r7, r7, r2
    e9d6:	b957      	cbnz	r7, e9ee <am_hal_uart_transfer+0x1ba>
    e9d8:	9b01      	ldr	r3, [sp, #4]
    e9da:	b10b      	cbz	r3, e9e0 <am_hal_uart_transfer+0x1ac>
    e9dc:	f8c3 8000 	str.w	r8, [r3]
    e9e0:	2500      	movs	r5, #0
    e9e2:	4628      	mov	r0, r5
    e9e4:	b011      	add	sp, #68	; 0x44
    e9e6:	ecbd 8b02 	vpop	{d8}
    e9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9ee:	2010      	movs	r0, #16
    e9f0:	f7ff f85e 	bl	dab0 <am_hal_flash_delay>
    e9f4:	1c73      	adds	r3, r6, #1
    e9f6:	bf18      	it	ne
    e9f8:	f109 0901 	addne.w	r9, r9, #1
    e9fc:	454e      	cmp	r6, r9
    e9fe:	d9eb      	bls.n	e9d8 <am_hal_uart_transfer+0x1a4>
    ea00:	6822      	ldr	r2, [r4, #0]
    ea02:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ea06:	4552      	cmp	r2, sl
    ea08:	eb0b 0508 	add.w	r5, fp, r8
    ea0c:	d0cb      	beq.n	e9a6 <am_hal_uart_transfer+0x172>
    ea0e:	2502      	movs	r5, #2
    ea10:	9b01      	ldr	r3, [sp, #4]
    ea12:	2b00      	cmp	r3, #0
    ea14:	f43f af1a 	beq.w	e84c <am_hal_uart_transfer+0x18>
    ea18:	f8c3 8000 	str.w	r8, [r3]
    ea1c:	e716      	b.n	e84c <am_hal_uart_transfer+0x18>
    ea1e:	f7ff fa85 	bl	df2c <am_hal_interrupt_master_disable>
    ea22:	9007      	str	r0, [sp, #28]
    ea24:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ea26:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    ea2a:	301c      	adds	r0, #28
    ea2c:	0300      	lsls	r0, r0, #12
    ea2e:	f10d 0c20 	add.w	ip, sp, #32
    ea32:	2200      	movs	r2, #0
    ea34:	6983      	ldr	r3, [r0, #24]
    ea36:	06db      	lsls	r3, r3, #27
    ea38:	d409      	bmi.n	ea4e <am_hal_uart_transfer+0x21a>
    ea3a:	6803      	ldr	r3, [r0, #0]
    ea3c:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ea40:	f102 0201 	add.w	r2, r2, #1
    ea44:	d119      	bne.n	ea7a <am_hal_uart_transfer+0x246>
    ea46:	2a20      	cmp	r2, #32
    ea48:	f80c 3b01 	strb.w	r3, [ip], #1
    ea4c:	d1f2      	bne.n	ea34 <am_hal_uart_transfer+0x200>
    ea4e:	ee18 0a10 	vmov	r0, s16
    ea52:	a908      	add	r1, sp, #32
    ea54:	f000 f922 	bl	ec9c <am_hal_queue_item_add>
    ea58:	2800      	cmp	r0, #0
    ea5a:	d075      	beq.n	eb48 <am_hal_uart_transfer+0x314>
    ea5c:	9807      	ldr	r0, [sp, #28]
    ea5e:	f7ff fa69 	bl	df34 <am_hal_interrupt_master_set>
    ea62:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ea64:	42ba      	cmp	r2, r7
    ea66:	bf28      	it	cs
    ea68:	463a      	movcs	r2, r7
    ea6a:	ee18 0a10 	vmov	r0, s16
    ea6e:	4629      	mov	r1, r5
    ea70:	4490      	add	r8, r2
    ea72:	1abf      	subs	r7, r7, r2
    ea74:	f000 f950 	bl	ed18 <am_hal_queue_item_get>
    ea78:	e7ad      	b.n	e9d6 <am_hal_uart_transfer+0x1a2>
    ea7a:	9807      	ldr	r0, [sp, #28]
    ea7c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ea80:	f7ff fa58 	bl	df34 <am_hal_interrupt_master_set>
    ea84:	e7c4      	b.n	ea10 <am_hal_uart_transfer+0x1dc>
    ea86:	4490      	add	r8, r2
    ea88:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ea8c:	e7c0      	b.n	ea10 <am_hal_uart_transfer+0x1dc>
    ea8e:	2c00      	cmp	r4, #0
    ea90:	f43f af31 	beq.w	e8f6 <am_hal_uart_transfer+0xc2>
    ea94:	6822      	ldr	r2, [r4, #0]
    ea96:	492a      	ldr	r1, [pc, #168]	; (eb40 <am_hal_uart_transfer+0x30c>)
    ea98:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ea9c:	428a      	cmp	r2, r1
    ea9e:	f47f af2a 	bne.w	e8f6 <am_hal_uart_transfer+0xc2>
    eaa2:	9b02      	ldr	r3, [sp, #8]
    eaa4:	b10b      	cbz	r3, eaaa <am_hal_uart_transfer+0x276>
    eaa6:	f8c3 8000 	str.w	r8, [r3]
    eaaa:	f1bb 0f00 	cmp.w	fp, #0
    eaae:	d097      	beq.n	e9e0 <am_hal_uart_transfer+0x1ac>
    eab0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    eab4:	2d00      	cmp	r5, #0
    eab6:	d151      	bne.n	eb5c <am_hal_uart_transfer+0x328>
    eab8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eaba:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    eabe:	311c      	adds	r1, #28
    eac0:	1e42      	subs	r2, r0, #1
    eac2:	0309      	lsls	r1, r1, #12
    eac4:	698b      	ldr	r3, [r1, #24]
    eac6:	0698      	lsls	r0, r3, #26
    eac8:	d405      	bmi.n	ead6 <am_hal_uart_transfer+0x2a2>
    eaca:	3501      	adds	r5, #1
    eacc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    ead0:	600b      	str	r3, [r1, #0]
    ead2:	45ab      	cmp	fp, r5
    ead4:	d1f6      	bne.n	eac4 <am_hal_uart_transfer+0x290>
    ead6:	9b02      	ldr	r3, [sp, #8]
    ead8:	2b00      	cmp	r3, #0
    eada:	d081      	beq.n	e9e0 <am_hal_uart_transfer+0x1ac>
    eadc:	601d      	str	r5, [r3, #0]
    eade:	2500      	movs	r5, #0
    eae0:	e6b4      	b.n	e84c <am_hal_uart_transfer+0x18>
    eae2:	2800      	cmp	r0, #0
    eae4:	f43f af07 	beq.w	e8f6 <am_hal_uart_transfer+0xc2>
    eae8:	6802      	ldr	r2, [r0, #0]
    eaea:	4915      	ldr	r1, [pc, #84]	; (eb40 <am_hal_uart_transfer+0x30c>)
    eaec:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eaf0:	428a      	cmp	r2, r1
    eaf2:	f47f af00 	bne.w	e8f6 <am_hal_uart_transfer+0xc2>
    eaf6:	b103      	cbz	r3, eafa <am_hal_uart_transfer+0x2c6>
    eaf8:	601d      	str	r5, [r3, #0]
    eafa:	2f00      	cmp	r7, #0
    eafc:	f43f af70 	beq.w	e9e0 <am_hal_uart_transfer+0x1ac>
    eb00:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    eb04:	2a00      	cmp	r2, #0
    eb06:	d15a      	bne.n	ebbe <am_hal_uart_transfer+0x38a>
    eb08:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eb0a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    eb0e:	311c      	adds	r1, #28
    eb10:	f10b 33ff 	add.w	r3, fp, #4294967295
    eb14:	0309      	lsls	r1, r1, #12
    eb16:	4614      	mov	r4, r2
    eb18:	698a      	ldr	r2, [r1, #24]
    eb1a:	06d2      	lsls	r2, r2, #27
    eb1c:	d409      	bmi.n	eb32 <am_hal_uart_transfer+0x2fe>
    eb1e:	680a      	ldr	r2, [r1, #0]
    eb20:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    eb24:	d176      	bne.n	ec14 <am_hal_uart_transfer+0x3e0>
    eb26:	3401      	adds	r4, #1
    eb28:	42a7      	cmp	r7, r4
    eb2a:	f803 2f01 	strb.w	r2, [r3, #1]!
    eb2e:	d1f3      	bne.n	eb18 <am_hal_uart_transfer+0x2e4>
    eb30:	4605      	mov	r5, r0
    eb32:	9b01      	ldr	r3, [sp, #4]
    eb34:	2b00      	cmp	r3, #0
    eb36:	f43f ae89 	beq.w	e84c <am_hal_uart_transfer+0x18>
    eb3a:	601c      	str	r4, [r3, #0]
    eb3c:	e686      	b.n	e84c <am_hal_uart_transfer+0x18>
    eb3e:	bf00      	nop
    eb40:	01ea9e06 	.word	0x01ea9e06
    eb44:	4627      	mov	r7, r4
    eb46:	e6d3      	b.n	e8f0 <am_hal_uart_transfer+0xbc>
    eb48:	9807      	ldr	r0, [sp, #28]
    eb4a:	4d39      	ldr	r5, [pc, #228]	; (ec30 <am_hal_uart_transfer+0x3fc>)
    eb4c:	f7ff f9f2 	bl	df34 <am_hal_interrupt_master_set>
    eb50:	e75e      	b.n	ea10 <am_hal_uart_transfer+0x1dc>
    eb52:	2502      	movs	r5, #2
    eb54:	4680      	mov	r8, r0
    eb56:	e75b      	b.n	ea10 <am_hal_uart_transfer+0x1dc>
    eb58:	462f      	mov	r7, r5
    eb5a:	e6b1      	b.n	e8c0 <am_hal_uart_transfer+0x8c>
    eb5c:	6b65      	ldr	r5, [r4, #52]	; 0x34
    eb5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    eb60:	1b52      	subs	r2, r2, r5
    eb62:	455a      	cmp	r2, fp
    eb64:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    eb68:	4601      	mov	r1, r0
    eb6a:	bf28      	it	cs
    eb6c:	465a      	movcs	r2, fp
    eb6e:	4638      	mov	r0, r7
    eb70:	4615      	mov	r5, r2
    eb72:	f000 f893 	bl	ec9c <am_hal_queue_item_add>
    eb76:	6a66      	ldr	r6, [r4, #36]	; 0x24
    eb78:	f7ff f9d8 	bl	df2c <am_hal_interrupt_master_disable>
    eb7c:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    eb80:	361c      	adds	r6, #28
    eb82:	9005      	str	r0, [sp, #20]
    eb84:	0336      	lsls	r6, r6, #12
    eb86:	e00f      	b.n	eba8 <am_hal_uart_transfer+0x374>
    eb88:	a908      	add	r1, sp, #32
    eb8a:	4638      	mov	r0, r7
    eb8c:	f000 f8c4 	bl	ed18 <am_hal_queue_item_get>
    eb90:	b178      	cbz	r0, ebb2 <am_hal_uart_transfer+0x37e>
    eb92:	6a62      	ldr	r2, [r4, #36]	; 0x24
    eb94:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    eb98:	321c      	adds	r2, #28
    eb9a:	0312      	lsls	r2, r2, #12
    eb9c:	6993      	ldr	r3, [r2, #24]
    eb9e:	0699      	lsls	r1, r3, #26
    eba0:	bf5c      	itt	pl
    eba2:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    eba6:	6013      	strpl	r3, [r2, #0]
    eba8:	69b3      	ldr	r3, [r6, #24]
    ebaa:	069b      	lsls	r3, r3, #26
    ebac:	f04f 0201 	mov.w	r2, #1
    ebb0:	d5ea      	bpl.n	eb88 <am_hal_uart_transfer+0x354>
    ebb2:	9805      	ldr	r0, [sp, #20]
    ebb4:	f7ff f9be 	bl	df34 <am_hal_interrupt_master_set>
    ebb8:	e78d      	b.n	ead6 <am_hal_uart_transfer+0x2a2>
    ebba:	46b8      	mov	r8, r7
    ebbc:	e70c      	b.n	e9d8 <am_hal_uart_transfer+0x1a4>
    ebbe:	f7ff f9b5 	bl	df2c <am_hal_interrupt_master_disable>
    ebc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ebc4:	9006      	str	r0, [sp, #24]
    ebc6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ebca:	311c      	adds	r1, #28
    ebcc:	0309      	lsls	r1, r1, #12
    ebce:	ae08      	add	r6, sp, #32
    ebd0:	2200      	movs	r2, #0
    ebd2:	698b      	ldr	r3, [r1, #24]
    ebd4:	06d8      	lsls	r0, r3, #27
    ebd6:	d409      	bmi.n	ebec <am_hal_uart_transfer+0x3b8>
    ebd8:	680b      	ldr	r3, [r1, #0]
    ebda:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ebde:	f102 0201 	add.w	r2, r2, #1
    ebe2:	d11a      	bne.n	ec1a <am_hal_uart_transfer+0x3e6>
    ebe4:	2a20      	cmp	r2, #32
    ebe6:	f806 3b01 	strb.w	r3, [r6], #1
    ebea:	d1f2      	bne.n	ebd2 <am_hal_uart_transfer+0x39e>
    ebec:	f104 0648 	add.w	r6, r4, #72	; 0x48
    ebf0:	a908      	add	r1, sp, #32
    ebf2:	4630      	mov	r0, r6
    ebf4:	f000 f852 	bl	ec9c <am_hal_queue_item_add>
    ebf8:	b1a8      	cbz	r0, ec26 <am_hal_uart_transfer+0x3f2>
    ebfa:	9806      	ldr	r0, [sp, #24]
    ebfc:	f7ff f99a 	bl	df34 <am_hal_interrupt_master_set>
    ec00:	6d24      	ldr	r4, [r4, #80]	; 0x50
    ec02:	42bc      	cmp	r4, r7
    ec04:	bf28      	it	cs
    ec06:	463c      	movcs	r4, r7
    ec08:	4659      	mov	r1, fp
    ec0a:	4630      	mov	r0, r6
    ec0c:	4622      	mov	r2, r4
    ec0e:	f000 f883 	bl	ed18 <am_hal_queue_item_get>
    ec12:	e78e      	b.n	eb32 <am_hal_uart_transfer+0x2fe>
    ec14:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ec18:	e78b      	b.n	eb32 <am_hal_uart_transfer+0x2fe>
    ec1a:	9806      	ldr	r0, [sp, #24]
    ec1c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ec20:	f7ff f988 	bl	df34 <am_hal_interrupt_master_set>
    ec24:	e612      	b.n	e84c <am_hal_uart_transfer+0x18>
    ec26:	9806      	ldr	r0, [sp, #24]
    ec28:	4d01      	ldr	r5, [pc, #4]	; (ec30 <am_hal_uart_transfer+0x3fc>)
    ec2a:	f7ff f983 	bl	df34 <am_hal_interrupt_master_set>
    ec2e:	e60d      	b.n	e84c <am_hal_uart_transfer+0x18>
    ec30:	08000001 	.word	0x08000001

0000ec34 <am_hal_uart_tx_flush>:
    ec34:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ec38:	b570      	push	{r4, r5, r6, lr}
    ec3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ec3c:	4604      	mov	r4, r0
    ec3e:	b15b      	cbz	r3, ec58 <am_hal_uart_tx_flush+0x24>
    ec40:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ec42:	b14b      	cbz	r3, ec58 <am_hal_uart_tx_flush+0x24>
    ec44:	4e0e      	ldr	r6, [pc, #56]	; (ec80 <am_hal_uart_tx_flush+0x4c>)
    ec46:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ec48:	fbb6 f0f0 	udiv	r0, r6, r0
    ec4c:	0100      	lsls	r0, r0, #4
    ec4e:	f7fe ff2f 	bl	dab0 <am_hal_flash_delay>
    ec52:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ec54:	2b00      	cmp	r3, #0
    ec56:	d1f6      	bne.n	ec46 <am_hal_uart_tx_flush+0x12>
    ec58:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ec5c:	351c      	adds	r5, #28
    ec5e:	032d      	lsls	r5, r5, #12
    ec60:	69ab      	ldr	r3, [r5, #24]
    ec62:	071a      	lsls	r2, r3, #28
    ec64:	d509      	bpl.n	ec7a <am_hal_uart_tx_flush+0x46>
    ec66:	4e06      	ldr	r6, [pc, #24]	; (ec80 <am_hal_uart_tx_flush+0x4c>)
    ec68:	6e23      	ldr	r3, [r4, #96]	; 0x60
    ec6a:	fbb6 f3f3 	udiv	r3, r6, r3
    ec6e:	0118      	lsls	r0, r3, #4
    ec70:	f7fe ff1e 	bl	dab0 <am_hal_flash_delay>
    ec74:	69ab      	ldr	r3, [r5, #24]
    ec76:	071b      	lsls	r3, r3, #28
    ec78:	d4f6      	bmi.n	ec68 <am_hal_uart_tx_flush+0x34>
    ec7a:	2000      	movs	r0, #0
    ec7c:	bd70      	pop	{r4, r5, r6, pc}
    ec7e:	bf00      	nop
    ec80:	00b71b00 	.word	0x00b71b00

0000ec84 <am_hal_queue_init>:
    ec84:	b410      	push	{r4}
    ec86:	2400      	movs	r4, #0
    ec88:	e9c0 4400 	strd	r4, r4, [r0]
    ec8c:	e9c0 4302 	strd	r4, r3, [r0, #8]
    ec90:	e9c0 2104 	strd	r2, r1, [r0, #16]
    ec94:	f85d 4b04 	ldr.w	r4, [sp], #4
    ec98:	4770      	bx	lr
    ec9a:	bf00      	nop

0000ec9c <am_hal_queue_item_add>:
    ec9c:	b570      	push	{r4, r5, r6, lr}
    ec9e:	6905      	ldr	r5, [r0, #16]
    eca0:	b082      	sub	sp, #8
    eca2:	4604      	mov	r4, r0
    eca4:	fb02 f505 	mul.w	r5, r2, r5
    eca8:	460e      	mov	r6, r1
    ecaa:	f7ff f93f 	bl	df2c <am_hal_interrupt_master_disable>
    ecae:	68e2      	ldr	r2, [r4, #12]
    ecb0:	9001      	str	r0, [sp, #4]
    ecb2:	68a0      	ldr	r0, [r4, #8]
    ecb4:	1a13      	subs	r3, r2, r0
    ecb6:	42ab      	cmp	r3, r5
    ecb8:	d31c      	bcc.n	ecf4 <am_hal_queue_item_add+0x58>
    ecba:	b195      	cbz	r5, ece2 <am_hal_queue_item_add+0x46>
    ecbc:	6823      	ldr	r3, [r4, #0]
    ecbe:	b306      	cbz	r6, ed02 <am_hal_queue_item_add+0x66>
    ecc0:	1e71      	subs	r1, r6, #1
    ecc2:	194e      	adds	r6, r1, r5
    ecc4:	6962      	ldr	r2, [r4, #20]
    ecc6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ecca:	54d0      	strb	r0, [r2, r3]
    eccc:	6823      	ldr	r3, [r4, #0]
    ecce:	68e0      	ldr	r0, [r4, #12]
    ecd0:	3301      	adds	r3, #1
    ecd2:	428e      	cmp	r6, r1
    ecd4:	fbb3 f2f0 	udiv	r2, r3, r0
    ecd8:	fb00 3312 	mls	r3, r0, r2, r3
    ecdc:	6023      	str	r3, [r4, #0]
    ecde:	d1f1      	bne.n	ecc4 <am_hal_queue_item_add+0x28>
    ece0:	68a0      	ldr	r0, [r4, #8]
    ece2:	4405      	add	r5, r0
    ece4:	60a5      	str	r5, [r4, #8]
    ece6:	9801      	ldr	r0, [sp, #4]
    ece8:	f7ff f924 	bl	df34 <am_hal_interrupt_master_set>
    ecec:	2401      	movs	r4, #1
    ecee:	4620      	mov	r0, r4
    ecf0:	b002      	add	sp, #8
    ecf2:	bd70      	pop	{r4, r5, r6, pc}
    ecf4:	9801      	ldr	r0, [sp, #4]
    ecf6:	f7ff f91d 	bl	df34 <am_hal_interrupt_master_set>
    ecfa:	2400      	movs	r4, #0
    ecfc:	4620      	mov	r0, r4
    ecfe:	b002      	add	sp, #8
    ed00:	bd70      	pop	{r4, r5, r6, pc}
    ed02:	4631      	mov	r1, r6
    ed04:	3101      	adds	r1, #1
    ed06:	3301      	adds	r3, #1
    ed08:	428d      	cmp	r5, r1
    ed0a:	fbb3 f6f2 	udiv	r6, r3, r2
    ed0e:	fb02 3316 	mls	r3, r2, r6, r3
    ed12:	d1f7      	bne.n	ed04 <am_hal_queue_item_add+0x68>
    ed14:	6023      	str	r3, [r4, #0]
    ed16:	e7e4      	b.n	ece2 <am_hal_queue_item_add+0x46>

0000ed18 <am_hal_queue_item_get>:
    ed18:	b570      	push	{r4, r5, r6, lr}
    ed1a:	6905      	ldr	r5, [r0, #16]
    ed1c:	4604      	mov	r4, r0
    ed1e:	b082      	sub	sp, #8
    ed20:	fb02 f505 	mul.w	r5, r2, r5
    ed24:	460e      	mov	r6, r1
    ed26:	f7ff f901 	bl	df2c <am_hal_interrupt_master_disable>
    ed2a:	68a2      	ldr	r2, [r4, #8]
    ed2c:	9001      	str	r0, [sp, #4]
    ed2e:	42aa      	cmp	r2, r5
    ed30:	d31c      	bcc.n	ed6c <am_hal_queue_item_get+0x54>
    ed32:	b195      	cbz	r5, ed5a <am_hal_queue_item_get+0x42>
    ed34:	6863      	ldr	r3, [r4, #4]
    ed36:	b306      	cbz	r6, ed7a <am_hal_queue_item_get+0x62>
    ed38:	1e71      	subs	r1, r6, #1
    ed3a:	194e      	adds	r6, r1, r5
    ed3c:	6962      	ldr	r2, [r4, #20]
    ed3e:	5cd3      	ldrb	r3, [r2, r3]
    ed40:	f801 3f01 	strb.w	r3, [r1, #1]!
    ed44:	6863      	ldr	r3, [r4, #4]
    ed46:	68e0      	ldr	r0, [r4, #12]
    ed48:	3301      	adds	r3, #1
    ed4a:	428e      	cmp	r6, r1
    ed4c:	fbb3 f2f0 	udiv	r2, r3, r0
    ed50:	fb00 3312 	mls	r3, r0, r2, r3
    ed54:	6063      	str	r3, [r4, #4]
    ed56:	d1f1      	bne.n	ed3c <am_hal_queue_item_get+0x24>
    ed58:	68a2      	ldr	r2, [r4, #8]
    ed5a:	9801      	ldr	r0, [sp, #4]
    ed5c:	1b52      	subs	r2, r2, r5
    ed5e:	60a2      	str	r2, [r4, #8]
    ed60:	f7ff f8e8 	bl	df34 <am_hal_interrupt_master_set>
    ed64:	2401      	movs	r4, #1
    ed66:	4620      	mov	r0, r4
    ed68:	b002      	add	sp, #8
    ed6a:	bd70      	pop	{r4, r5, r6, pc}
    ed6c:	9801      	ldr	r0, [sp, #4]
    ed6e:	f7ff f8e1 	bl	df34 <am_hal_interrupt_master_set>
    ed72:	2400      	movs	r4, #0
    ed74:	4620      	mov	r0, r4
    ed76:	b002      	add	sp, #8
    ed78:	bd70      	pop	{r4, r5, r6, pc}
    ed7a:	68e0      	ldr	r0, [r4, #12]
    ed7c:	4631      	mov	r1, r6
    ed7e:	3101      	adds	r1, #1
    ed80:	3301      	adds	r3, #1
    ed82:	42a9      	cmp	r1, r5
    ed84:	fbb3 f6f0 	udiv	r6, r3, r0
    ed88:	fb00 3316 	mls	r3, r0, r6, r3
    ed8c:	d1f7      	bne.n	ed7e <am_hal_queue_item_get+0x66>
    ed8e:	6063      	str	r3, [r4, #4]
    ed90:	e7e3      	b.n	ed5a <am_hal_queue_item_get+0x42>
    ed92:	bf00      	nop
    ed94:	70656544 	.word	0x70656544
    ed98:	65656c73 	.word	0x65656c73
    ed9c:	61572070 	.word	0x61572070
    eda0:	4520656b 	.word	0x4520656b
    eda4:	706d6178 	.word	0x706d6178
    eda8:	000a656c 	.word	0x000a656c
    edac:	0a0a0a0a 	.word	0x0a0a0a0a
    edb0:	0a0a0a0a 	.word	0x0a0a0a0a
    edb4:	0a0a0a0a 	.word	0x0a0a0a0a
    edb8:	0a0a0a0a 	.word	0x0a0a0a0a
    edbc:	00000a0a 	.word	0x00000a0a

0000edc0 <g_deepsleep_button0>:
    edc0:	00001003                                ....

0000edc4 <g_sBspUartConfig>:
    edc4:	0001c200 00000060 00000000 00000000     ....`...........
    edd4:	00000000 00000012 00000000 00000000     ................
	...

0000edec <g_AM_BSP_GPIO_COM_UART_RX>:
    edec:	00000000                                ....

0000edf0 <g_AM_BSP_GPIO_COM_UART_TX>:
    edf0:	00000000                                ....

0000edf4 <am_hal_cachectrl_defaults>:
    edf4:	00000308                                ....

0000edf8 <g_AM_HAL_GPIO_DISABLE>:
    edf8:	00000003                                ....

0000edfc <g_AM_HAL_GPIO_OUTPUT>:
    edfc:	00000403                                ....

0000ee00 <g_AM_HAL_GPIO_TRISTATE>:
    ee00:	00000c03                                ....

0000ee04 <g_ui8Bit76Capabilities>:
    ee04:	02800101 80010180 80800101 80808080     ................
    ee14:	80808080 80808008 01800180 80808080     ................
    ee24:	80808080 01800402 01010401 80808080     ................
    ee34:	00000101                                ....

0000ee38 <g_ui8Inpen>:
    ee38:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    ee48:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    ee58:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    ee68:	00003130                                01..

0000ee6c <g_ui8NCEtable>:
    ee6c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ee7c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ee8c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ee9c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    eeac:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    eebc:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    eecc:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    eedc:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    eeec:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    eefc:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    ef0c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    ef1c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    ef2c:	32221202 43231303                       .."2..#C

0000ef34 <g_ui8nCEpins>:
    ef34:	02070707 00080802 01020202 01010101     ................
    ef44:	01010101 01010101 01010101 01010101     ................
    ef54:	01010101 08010101 01010008 01010101     ................
    ef64:	00000101                                ....

0000ef68 <g_am_hal_mcuctrl_flash_size>:
    ef68:	00004000 00008000 00010000 00020000     .@..............
    ef78:	00040000 00080000 00100000 00200000     .............. .
    ef88:	00180000 00000000 00000000 00000000     ................
	...

0000efa8 <g_am_hal_mcuctrl_sram_size>:
    efa8:	00004000 00008000 00010000 00020000     .@..............
    efb8:	00040000 00080000 00100000 00060000     ................
    efc8:	000c0000 00000000 00000000 00000000     ................
	...

0000efe8 <am_hal_pwrctrl_memory_control>:
	...
    f000:	00000001 00000001 00000001 00001fff     ................
    f010:	00001fff 00000001 00000003 00000003     ................
    f020:	00000003 00001fff 00001fff 00000003     ................
    f030:	00000007 00000007 00000007 00001fff     ................
    f040:	00001fff 00000007 0000000f 0000000f     ................
    f050:	0000000f 00001fff 00001fff 0000000f     ................
    f060:	0000001f 0000001f 0000001f 00001fff     ................
    f070:	00001fff 0000001f 0000003f 0000003f     ........?...?...
    f080:	0000003f 00001fff 00001fff 0000003f     ?...........?...
    f090:	0000007f 0000007f 0000007f 00001fff     ................
    f0a0:	00001fff 0000007f 000000ff 000000ff     ................
    f0b0:	000000ff 00001fff 00001fff 000000ff     ................
    f0c0:	000001ff 000001ff 000001ff 00001fff     ................
    f0d0:	00001fff 000001ff 000003ff 000003ff     ................
    f0e0:	000003ff 00001fff 00001fff 000003ff     ................
    f0f0:	000007ff 000007ff 000007ff 00001fff     ................
    f100:	00001fff 000007ff 00000fff 00000fff     ................
    f110:	00000fff 00001fff 00001fff 00000fff     ................
    f120:	00001fff 00001fff 00001fff 00001fff     ................
    f130:	00001fff 00001fff 00002000 00002000     ......... ... ..
    f140:	00002000 00006000 00006000 00002000     . ...`...`... ..
    f150:	00006000 00006000 00006000 00006000     .`...`...`...`..
    f160:	00006000 00006000 c0000000 00000000     .`...`..........
    f170:	c0000000 c0000000 00000000 80000000     ................
    f180:	c0007fff 00007fff c0007fff c0007fff     ................
    f190:	00007fff 80007fff                       ........

0000f198 <am_hal_pwrctrl_peripheral_control>:
	...
    f1a4:	00000001 00000004 00000004 00000002     ................
    f1b4:	00000008 00000008 00000004 00000008     ................
    f1c4:	00000008 00000008 00000008 00000008     ................
    f1d4:	00000010 00000010 00000010 00000020     ............ ...
    f1e4:	00000010 00000010 00000040 00000010     ........@.......
    f1f4:	00000010 00000080 00000004 00000004     ................
    f204:	00000100 00000004 00000004 00000200     ................
    f214:	00000020 00000020 00000400 00000004      ... ...........
    f224:	00000004 00000800 00000040 00000040     ........@...@...
    f234:	00001000 00000080 00000080 00002000     ............. ..
    f244:	00000100 00000100                       ........

0000f24c <CSWTCH.20>:
    f24c:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
