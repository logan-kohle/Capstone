
bin/watchdog.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 3d d3 00 00 a5 d3 00 00 d1 c4 00 00     ....=...........
    c010:	a7 d3 00 00 a7 d3 00 00 a7 d3 00 00 00 00 00 00     ................
	...
    c02c:	a9 d3 00 00 a9 d3 00 00 00 00 00 00 a9 d3 00 00     ................
    c03c:	a9 d3 00 00 a9 d3 00 00 d5 c1 00 00 a9 d3 00 00     ................
    c04c:	a9 d3 00 00 a9 d3 00 00 a9 d3 00 00 a9 d3 00 00     ................
    c05c:	a9 d3 00 00 a9 d3 00 00 a9 d3 00 00 a9 d3 00 00     ................
    c06c:	a9 d3 00 00 a9 d3 00 00 a9 d3 00 00 a9 d3 00 00     ................
    c07c:	a9 d3 00 00 a9 d3 00 00 a9 d3 00 00 a9 d3 00 00     ................
    c08c:	a9 d3 00 00 a9 d3 00 00 a9 d3 00 00 a9 d3 00 00     ................
    c09c:	a9 d3 00 00 a9 d3 00 00 a9 d3 00 00 a9 d3 00 00     ................
    c0ac:	a9 d3 00 00 a9 d3 00 00 a9 d3 00 00 a9 d3 00 00     ................
    c0bc:	a9 d3 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <am_watchdog_isr>:
// Interrupt handler for the watchdog.
//
//*****************************************************************************
void
am_watchdog_isr(void)
{
    c1d4:	b508      	push	{r3, lr}
    //
    // Clear the watchdog interrupt.
    //
    am_hal_wdt_int_clear();
    c1d6:	f002 fd9d 	bl	ed14 <am_hal_wdt_int_clear>

    //
    // Catch the first four watchdog interrupts, but let the fifth through
    // untouched.
    //
    if ( g_ui8NumWatchdogInterrupts < 4 )
    c1da:	4b0e      	ldr	r3, [pc, #56]	; (c214 <am_watchdog_isr+0x40>)
    c1dc:	781b      	ldrb	r3, [r3, #0]
    c1de:	2b03      	cmp	r3, #3
    c1e0:	d804      	bhi.n	c1ec <am_watchdog_isr+0x18>
    {
        //
        // Restart the watchdog.
        //
        am_hal_wdt_restart();
    c1e2:	4b0d      	ldr	r3, [pc, #52]	; (c218 <am_watchdog_isr+0x44>)
    c1e4:	22b2      	movs	r2, #178	; 0xb2
    c1e6:	605a      	str	r2, [r3, #4]
    c1e8:	4b0b      	ldr	r3, [pc, #44]	; (c218 <am_watchdog_isr+0x44>)
    c1ea:	685b      	ldr	r3, [r3, #4]
    }

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
    c1ec:	f001 f924 	bl	d438 <am_bsp_debug_printf_enable>

    //
    // Send a status message and give it some time to print.
    //
    am_util_stdio_printf("Interrupt #: %d\n", g_ui8NumWatchdogInterrupts);
    c1f0:	4b08      	ldr	r3, [pc, #32]	; (c214 <am_watchdog_isr+0x40>)
    c1f2:	781b      	ldrb	r3, [r3, #0]
    c1f4:	4619      	mov	r1, r3
    c1f6:	4809      	ldr	r0, [pc, #36]	; (c21c <am_watchdog_isr+0x48>)
    c1f8:	f001 f878 	bl	d2ec <am_util_stdio_printf>
    am_util_delay_ms(100);
    c1fc:	2064      	movs	r0, #100	; 0x64
    c1fe:	f000 f94b 	bl	c498 <am_util_delay_ms>

    //
    // Increment the number of watchdog interrupts.
    //
    g_ui8NumWatchdogInterrupts++;
    c202:	4b04      	ldr	r3, [pc, #16]	; (c214 <am_watchdog_isr+0x40>)
    c204:	781b      	ldrb	r3, [r3, #0]
    c206:	3301      	adds	r3, #1
    c208:	b2da      	uxtb	r2, r3
    c20a:	4b02      	ldr	r3, [pc, #8]	; (c214 <am_watchdog_isr+0x40>)
    c20c:	701a      	strb	r2, [r3, #0]

} // am_watchdog_isr()
    c20e:	bf00      	nop
    c210:	bd08      	pop	{r3, pc}
    c212:	bf00      	nop
    c214:	10001064 	.word	0x10001064
    c218:	40024000 	.word	0x40024000
    c21c:	0000ee34 	.word	0x0000ee34

0000c220 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c220:	b500      	push	{lr}
    c222:	b085      	sub	sp, #20
    am_hal_reset_status_t sStatus;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c224:	2100      	movs	r1, #0
    c226:	2000      	movs	r0, #0
    c228:	f001 fb78 	bl	d91c <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c22c:	4822      	ldr	r0, [pc, #136]	; (c2b8 <main+0x98>)
    c22e:	f001 f9cd 	bl	d5cc <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c232:	f001 f9ef 	bl	d614 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c236:	f001 f8df 	bl	d3f8 <am_bsp_low_power_init>

#ifdef AM_BSP_NUM_LEDS
    //
    // Initialize device drivers for the LEDs on the board.
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    c23a:	2105      	movs	r1, #5
    c23c:	481f      	ldr	r0, [pc, #124]	; (c2bc <main+0x9c>)
    c23e:	f000 f893 	bl	c368 <am_devices_led_array_init>
#endif

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c242:	f001 f9a3 	bl	d58c <am_bsp_itm_printf_enable>

    //
    // Clear the terminal screen, and print a quick message to show that we're
    // alive.
    //
    am_util_stdio_terminal_clear();
    c246:	f001 f871 	bl	d32c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Watchdog Example.\n");
    c24a:	481d      	ldr	r0, [pc, #116]	; (c2c0 <main+0xa0>)
    c24c:	f001 f84e 	bl	d2ec <am_util_stdio_printf>

    //
    // Print out reset status register upon entry.
    //
    am_hal_reset_status_get(&sStatus);
    c250:	466b      	mov	r3, sp
    c252:	4618      	mov	r0, r3
    c254:	f002 f878 	bl	e348 <am_hal_reset_status_get>
    g_ui32ResetStatus = sStatus.eStatus;
    c258:	f8bd 3000 	ldrh.w	r3, [sp]
    c25c:	461a      	mov	r2, r3
    c25e:	4b19      	ldr	r3, [pc, #100]	; (c2c4 <main+0xa4>)
    c260:	601a      	str	r2, [r3, #0]

    am_util_stdio_printf("Reset Status Register = 0x%x\n",
    c262:	4b18      	ldr	r3, [pc, #96]	; (c2c4 <main+0xa4>)
    c264:	681b      	ldr	r3, [r3, #0]
    c266:	4619      	mov	r1, r3
    c268:	4817      	ldr	r0, [pc, #92]	; (c2c8 <main+0xa8>)
    c26a:	f001 f83f 	bl	d2ec <am_util_stdio_printf>
                          g_ui32ResetStatus);

    //
    // Clear reset status register for next time we reset.
    //
    am_hal_reset_control(AM_HAL_RESET_CONTROL_STATUSCLEAR, 0);
    c26e:	2100      	movs	r1, #0
    c270:	2002      	movs	r0, #2
    c272:	f002 f849 	bl	e308 <am_hal_reset_control>

    //
    // LFRC has to be turned on for this example because the watchdog only
    // runs off of the LFRC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c276:	2100      	movs	r1, #0
    c278:	2002      	movs	r0, #2
    c27a:	f001 fb4f 	bl	d91c <am_hal_clkgen_control>

    //
    // Configure the watchdog.
    //
    am_hal_wdt_init(&g_sWatchdogConfig);
    c27e:	4813      	ldr	r0, [pc, #76]	; (c2cc <main+0xac>)
    c280:	f002 fd08 	bl	ec94 <am_hal_wdt_init>

    //
    // Enable the interrupt for the watchdog in the NVIC.
    //
    NVIC_EnableIRQ(WDT_IRQn);
    c284:	2001      	movs	r0, #1
    c286:	f7ff ff8b 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c28a:	f001 fdcb 	bl	de24 <am_hal_interrupt_master_enable>

    //
    // Enable the watchdog.
    //
    am_hal_wdt_start();
    c28e:	f002 fd37 	bl	ed00 <am_hal_wdt_start>
    while (1)
    {
        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
    c292:	f001 f945 	bl	d520 <am_bsp_debug_printf_disable>

        //
        // Disable interrupts.
        //
        am_hal_interrupt_master_disable();
    c296:	f001 fdc9 	bl	de2c <am_hal_interrupt_master_disable>

#ifdef AM_BSP_NUM_LEDS
        //
        // Turn OFF the indicator LED.
        //
        am_devices_led_off(am_bsp_psLEDs, 0);
    c29a:	2100      	movs	r1, #0
    c29c:	4807      	ldr	r0, [pc, #28]	; (c2bc <main+0x9c>)
    c29e:	f000 f8bd 	bl	c41c <am_devices_led_off>
#endif

        //
        // Go to deep sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c2a2:	2001      	movs	r0, #1
    c2a4:	f002 f894 	bl	e3d0 <am_hal_sysctrl_sleep>

#ifdef AM_BSP_NUM_LEDS
        //
        // Turn ON the indicator LED.
        //
        am_devices_led_on(am_bsp_psLEDs, 0);
    c2a8:	2100      	movs	r1, #0
    c2aa:	4804      	ldr	r0, [pc, #16]	; (c2bc <main+0x9c>)
    c2ac:	f000 f87c 	bl	c3a8 <am_devices_led_on>
#endif

        //
        // An interrupt woke us up so now enable them and take it.
        //
        am_hal_interrupt_master_enable();
    c2b0:	f001 fdb8 	bl	de24 <am_hal_interrupt_master_enable>
        am_bsp_debug_printf_disable();
    c2b4:	e7ed      	b.n	c292 <main+0x72>
    c2b6:	bf00      	nop
    c2b8:	0000eec4 	.word	0x0000eec4
    c2bc:	10001008 	.word	0x10001008
    c2c0:	0000ee48 	.word	0x0000ee48
    c2c4:	10001068 	.word	0x10001068
    c2c8:	0000ee5c 	.word	0x0000ee5c
    c2cc:	10001000 	.word	0x10001000

0000c2d0 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    c2d0:	b500      	push	{lr}
    c2d2:	b083      	sub	sp, #12
    c2d4:	9001      	str	r0, [sp, #4]
    if ( (psLED == NULL)    ||
    c2d6:	9b01      	ldr	r3, [sp, #4]
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d03d      	beq.n	c358 <am_devices_led_init+0x88>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c2dc:	9b01      	ldr	r3, [sp, #4]
    c2de:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    c2e0:	2b31      	cmp	r3, #49	; 0x31
    c2e2:	d839      	bhi.n	c358 <am_devices_led_init+0x88>
#else
#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    c2e4:	9b01      	ldr	r3, [sp, #4]
    c2e6:	685b      	ldr	r3, [r3, #4]
    c2e8:	f003 0302 	and.w	r3, r3, #2
    c2ec:	2b00      	cmp	r3, #0
    c2ee:	d019      	beq.n	c324 <am_devices_led_init+0x54>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    c2f0:	9b01      	ldr	r3, [sp, #4]
    c2f2:	681b      	ldr	r3, [r3, #0]
    c2f4:	4a1a      	ldr	r2, [pc, #104]	; (c360 <am_devices_led_init+0x90>)
    c2f6:	6811      	ldr	r1, [r2, #0]
    c2f8:	4618      	mov	r0, r3
    c2fa:	f001 fc19 	bl	db30 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    c2fe:	9b01      	ldr	r3, [sp, #4]
    c300:	681b      	ldr	r3, [r3, #0]
    c302:	2103      	movs	r1, #3
    c304:	4618      	mov	r0, r3
    c306:	f001 fd49 	bl	dd9c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c30a:	9b01      	ldr	r3, [sp, #4]
    c30c:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c30e:	9b01      	ldr	r3, [sp, #4]
    c310:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    c312:	b2db      	uxtb	r3, r3
    c314:	f003 0301 	and.w	r3, r3, #1
    c318:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c31a:	4619      	mov	r1, r3
    c31c:	4610      	mov	r0, r2
    c31e:	f001 fd3d 	bl	dd9c <am_hal_gpio_state_write>
    c322:	e01a      	b.n	c35a <am_devices_led_init+0x8a>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    c324:	9b01      	ldr	r3, [sp, #4]
    c326:	681b      	ldr	r3, [r3, #0]
    c328:	4a0e      	ldr	r2, [pc, #56]	; (c364 <am_devices_led_init+0x94>)
    c32a:	6811      	ldr	r1, [r2, #0]
    c32c:	4618      	mov	r0, r3
    c32e:	f001 fbff 	bl	db30 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    c332:	9b01      	ldr	r3, [sp, #4]
    c334:	681b      	ldr	r3, [r3, #0]
    c336:	2103      	movs	r1, #3
    c338:	4618      	mov	r0, r3
    c33a:	f001 fd2f 	bl	dd9c <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c33e:	9b01      	ldr	r3, [sp, #4]
    c340:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c342:	9b01      	ldr	r3, [sp, #4]
    c344:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    c346:	b2db      	uxtb	r3, r3
    c348:	f003 0301 	and.w	r3, r3, #1
    c34c:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c34e:	4619      	mov	r1, r3
    c350:	4610      	mov	r0, r2
    c352:	f001 fd23 	bl	dd9c <am_hal_gpio_state_write>
    c356:	e000      	b.n	c35a <am_devices_led_init+0x8a>
        return;
    c358:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    c35a:	b003      	add	sp, #12
    c35c:	f85d fb04 	ldr.w	pc, [sp], #4
    c360:	0000eecc 	.word	0x0000eecc
    c364:	0000eed0 	.word	0x0000eed0

0000c368 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    c368:	b500      	push	{lr}
    c36a:	b085      	sub	sp, #20
    c36c:	9001      	str	r0, [sp, #4]
    c36e:	9100      	str	r1, [sp, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    c370:	9b01      	ldr	r3, [sp, #4]
    c372:	2b00      	cmp	r3, #0
    c374:	d014      	beq.n	c3a0 <am_devices_led_array_init+0x38>
    c376:	9b00      	ldr	r3, [sp, #0]
    c378:	2b1f      	cmp	r3, #31
    c37a:	d811      	bhi.n	c3a0 <am_devices_led_array_init+0x38>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    c37c:	2300      	movs	r3, #0
    c37e:	9303      	str	r3, [sp, #12]
    c380:	e009      	b.n	c396 <am_devices_led_array_init+0x2e>
    {
        am_devices_led_init(psLEDs + i);
    c382:	9b03      	ldr	r3, [sp, #12]
    c384:	00db      	lsls	r3, r3, #3
    c386:	9a01      	ldr	r2, [sp, #4]
    c388:	4413      	add	r3, r2
    c38a:	4618      	mov	r0, r3
    c38c:	f7ff ffa0 	bl	c2d0 <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    c390:	9b03      	ldr	r3, [sp, #12]
    c392:	3301      	adds	r3, #1
    c394:	9303      	str	r3, [sp, #12]
    c396:	9a03      	ldr	r2, [sp, #12]
    c398:	9b00      	ldr	r3, [sp, #0]
    c39a:	429a      	cmp	r2, r3
    c39c:	d3f1      	bcc.n	c382 <am_devices_led_array_init+0x1a>
    c39e:	e000      	b.n	c3a2 <am_devices_led_array_init+0x3a>
        return;
    c3a0:	bf00      	nop
    }
}
    c3a2:	b005      	add	sp, #20
    c3a4:	f85d fb04 	ldr.w	pc, [sp], #4

0000c3a8 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    c3a8:	b500      	push	{lr}
    c3aa:	b083      	sub	sp, #12
    c3ac:	9001      	str	r0, [sp, #4]
    c3ae:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    c3b0:	9b01      	ldr	r3, [sp, #4]
    c3b2:	2b00      	cmp	r3, #0
    c3b4:	d02e      	beq.n	c414 <am_devices_led_on+0x6c>
    c3b6:	9b00      	ldr	r3, [sp, #0]
    c3b8:	2b1e      	cmp	r3, #30
    c3ba:	d82b      	bhi.n	c414 <am_devices_led_on+0x6c>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c3bc:	9b00      	ldr	r3, [sp, #0]
    c3be:	00db      	lsls	r3, r3, #3
    c3c0:	9a01      	ldr	r2, [sp, #4]
    c3c2:	4413      	add	r3, r2
    c3c4:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    c3c6:	2b31      	cmp	r3, #49	; 0x31
    c3c8:	d824      	bhi.n	c414 <am_devices_led_on+0x6c>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    c3ca:	9b00      	ldr	r3, [sp, #0]
    c3cc:	00db      	lsls	r3, r3, #3
    c3ce:	9a01      	ldr	r2, [sp, #4]
    c3d0:	4413      	add	r3, r2
    c3d2:	685b      	ldr	r3, [r3, #4]
    c3d4:	f003 0302 	and.w	r3, r3, #2
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d011      	beq.n	c400 <am_devices_led_on+0x58>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c3dc:	9b00      	ldr	r3, [sp, #0]
    c3de:	00db      	lsls	r3, r3, #3
    c3e0:	9a01      	ldr	r2, [sp, #4]
    c3e2:	4413      	add	r3, r2
    c3e4:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c3e6:	9b00      	ldr	r3, [sp, #0]
    c3e8:	00db      	lsls	r3, r3, #3
    c3ea:	9a01      	ldr	r2, [sp, #4]
    c3ec:	4413      	add	r3, r2
    c3ee:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    c3f0:	b2db      	uxtb	r3, r3
    c3f2:	f003 0301 	and.w	r3, r3, #1
    c3f6:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c3f8:	4619      	mov	r1, r3
    c3fa:	f001 fccf 	bl	dd9c <am_hal_gpio_state_write>
    c3fe:	e00a      	b.n	c416 <am_devices_led_on+0x6e>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c400:	9b00      	ldr	r3, [sp, #0]
    c402:	00db      	lsls	r3, r3, #3
    c404:	9a01      	ldr	r2, [sp, #4]
    c406:	4413      	add	r3, r2
    c408:	681b      	ldr	r3, [r3, #0]
    c40a:	2104      	movs	r1, #4
    c40c:	4618      	mov	r0, r3
    c40e:	f001 fcc5 	bl	dd9c <am_hal_gpio_state_write>
    c412:	e000      	b.n	c416 <am_devices_led_on+0x6e>
        return;
    c414:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    c416:	b003      	add	sp, #12
    c418:	f85d fb04 	ldr.w	pc, [sp], #4

0000c41c <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    c41c:	b500      	push	{lr}
    c41e:	b083      	sub	sp, #12
    c420:	9001      	str	r0, [sp, #4]
    c422:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    c424:	9b01      	ldr	r3, [sp, #4]
    c426:	2b00      	cmp	r3, #0
    c428:	d031      	beq.n	c48e <am_devices_led_off+0x72>
    c42a:	9b00      	ldr	r3, [sp, #0]
    c42c:	2b1e      	cmp	r3, #30
    c42e:	d82e      	bhi.n	c48e <am_devices_led_off+0x72>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c430:	9b00      	ldr	r3, [sp, #0]
    c432:	00db      	lsls	r3, r3, #3
    c434:	9a01      	ldr	r2, [sp, #4]
    c436:	4413      	add	r3, r2
    c438:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    c43a:	2b31      	cmp	r3, #49	; 0x31
    c43c:	d827      	bhi.n	c48e <am_devices_led_off+0x72>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    c43e:	9b00      	ldr	r3, [sp, #0]
    c440:	00db      	lsls	r3, r3, #3
    c442:	9a01      	ldr	r2, [sp, #4]
    c444:	4413      	add	r3, r2
    c446:	685b      	ldr	r3, [r3, #4]
    c448:	f003 0302 	and.w	r3, r3, #2
    c44c:	2b00      	cmp	r3, #0
    c44e:	d014      	beq.n	c47a <am_devices_led_off+0x5e>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c450:	9b00      	ldr	r3, [sp, #0]
    c452:	00db      	lsls	r3, r3, #3
    c454:	9a01      	ldr	r2, [sp, #4]
    c456:	4413      	add	r3, r2
    c458:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c45a:	9b00      	ldr	r3, [sp, #0]
    c45c:	00db      	lsls	r3, r3, #3
    c45e:	9a01      	ldr	r2, [sp, #4]
    c460:	4413      	add	r3, r2
    c462:	685b      	ldr	r3, [r3, #4]
    c464:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c468:	2b00      	cmp	r3, #0
    c46a:	bf0c      	ite	eq
    c46c:	2301      	moveq	r3, #1
    c46e:	2300      	movne	r3, #0
    c470:	b2db      	uxtb	r3, r3
    c472:	4619      	mov	r1, r3
    c474:	f001 fc92 	bl	dd9c <am_hal_gpio_state_write>
    c478:	e00a      	b.n	c490 <am_devices_led_off+0x74>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c47a:	9b00      	ldr	r3, [sp, #0]
    c47c:	00db      	lsls	r3, r3, #3
    c47e:	9a01      	ldr	r2, [sp, #4]
    c480:	4413      	add	r3, r2
    c482:	681b      	ldr	r3, [r3, #0]
    c484:	2103      	movs	r1, #3
    c486:	4618      	mov	r0, r3
    c488:	f001 fc88 	bl	dd9c <am_hal_gpio_state_write>
    c48c:	e000      	b.n	c490 <am_devices_led_off+0x74>
        return;
    c48e:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    c490:	b003      	add	sp, #12
    c492:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c498 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c498:	b500      	push	{lr}
    c49a:	b089      	sub	sp, #36	; 0x24
    c49c:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c49e:	ab03      	add	r3, sp, #12
    c4a0:	4618      	mov	r0, r3
    c4a2:	f001 fad7 	bl	da54 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c4a6:	9b03      	ldr	r3, [sp, #12]
    c4a8:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c4aa:	9b07      	ldr	r3, [sp, #28]
    c4ac:	4a07      	ldr	r2, [pc, #28]	; (c4cc <am_util_delay_ms+0x34>)
    c4ae:	fba2 2303 	umull	r2, r3, r2, r3
    c4b2:	099a      	lsrs	r2, r3, #6
    c4b4:	9b01      	ldr	r3, [sp, #4]
    c4b6:	fb02 f303 	mul.w	r3, r2, r3
    c4ba:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c4bc:	9806      	ldr	r0, [sp, #24]
    c4be:	f001 fae7 	bl	da90 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c4c2:	bf00      	nop
    c4c4:	b009      	add	sp, #36	; 0x24
    c4c6:	f85d fb04 	ldr.w	pc, [sp], #4
    c4ca:	bf00      	nop
    c4cc:	057619f1 	.word	0x057619f1

0000c4d0 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c4d0:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c4d2:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c4d6:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c4d8:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c4dc:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c4e0:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c4e4:	f000 f80a 	bl	c4fc <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c4e8:	bd01      	pop	{r0, pc}
}
    c4ea:	bf00      	nop
    c4ec:	4618      	mov	r0, r3

0000c4ee <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c4ee:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c4f0:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c4f2:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c4f4:	4770      	bx	lr
}
    c4f6:	bf00      	nop
    c4f8:	4618      	mov	r0, r3
	...

0000c4fc <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c4fc:	b500      	push	{lr}
    c4fe:	b097      	sub	sp, #92	; 0x5c
    c500:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c502:	ab03      	add	r3, sp, #12
    c504:	2200      	movs	r2, #0
    c506:	601a      	str	r2, [r3, #0]
    c508:	605a      	str	r2, [r3, #4]
    c50a:	609a      	str	r2, [r3, #8]
    c50c:	60da      	str	r2, [r3, #12]
    c50e:	611a      	str	r2, [r3, #16]
    c510:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c512:	2300      	movs	r3, #0
    c514:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c516:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c518:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c51a:	4b2e      	ldr	r3, [pc, #184]	; (c5d4 <am_util_faultisr_collect_data+0xd8>)
    c51c:	681b      	ldr	r3, [r3, #0]
    c51e:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c522:	b2db      	uxtb	r3, r3
    c524:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c528:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c52a:	0a1b      	lsrs	r3, r3, #8
    c52c:	b2db      	uxtb	r3, r3
    c52e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c532:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c534:	0c1b      	lsrs	r3, r3, #16
    c536:	b29b      	uxth	r3, r3
    c538:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c53c:	4b26      	ldr	r3, [pc, #152]	; (c5d8 <am_util_faultisr_collect_data+0xdc>)
    c53e:	681b      	ldr	r3, [r3, #0]
    c540:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c542:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c546:	b2db      	uxtb	r3, r3
    c548:	f003 0302 	and.w	r3, r3, #2
    c54c:	2b00      	cmp	r3, #0
    c54e:	d005      	beq.n	c55c <am_util_faultisr_collect_data+0x60>
    c550:	9901      	ldr	r1, [sp, #4]
    c552:	2006      	movs	r0, #6
    c554:	f7ff ffcb 	bl	c4ee <getStackedReg>
    c558:	4603      	mov	r3, r0
    c55a:	e001      	b.n	c560 <am_util_faultisr_collect_data+0x64>
    c55c:	f04f 33ff 	mov.w	r3, #4294967295
    c560:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c562:	9901      	ldr	r1, [sp, #4]
    c564:	2000      	movs	r0, #0
    c566:	f7ff ffc2 	bl	c4ee <getStackedReg>
    c56a:	4603      	mov	r3, r0
    c56c:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c56e:	9901      	ldr	r1, [sp, #4]
    c570:	2001      	movs	r0, #1
    c572:	f7ff ffbc 	bl	c4ee <getStackedReg>
    c576:	4603      	mov	r3, r0
    c578:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c57a:	9901      	ldr	r1, [sp, #4]
    c57c:	2002      	movs	r0, #2
    c57e:	f7ff ffb6 	bl	c4ee <getStackedReg>
    c582:	4603      	mov	r3, r0
    c584:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c586:	9901      	ldr	r1, [sp, #4]
    c588:	2003      	movs	r0, #3
    c58a:	f7ff ffb0 	bl	c4ee <getStackedReg>
    c58e:	4603      	mov	r3, r0
    c590:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c592:	9901      	ldr	r1, [sp, #4]
    c594:	2004      	movs	r0, #4
    c596:	f7ff ffaa 	bl	c4ee <getStackedReg>
    c59a:	4603      	mov	r3, r0
    c59c:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c59e:	9901      	ldr	r1, [sp, #4]
    c5a0:	2005      	movs	r0, #5
    c5a2:	f7ff ffa4 	bl	c4ee <getStackedReg>
    c5a6:	4603      	mov	r3, r0
    c5a8:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c5aa:	9901      	ldr	r1, [sp, #4]
    c5ac:	2006      	movs	r0, #6
    c5ae:	f7ff ff9e 	bl	c4ee <getStackedReg>
    c5b2:	4603      	mov	r3, r0
    c5b4:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c5b6:	9901      	ldr	r1, [sp, #4]
    c5b8:	2007      	movs	r0, #7
    c5ba:	f7ff ff98 	bl	c4ee <getStackedReg>
    c5be:	4603      	mov	r3, r0
    c5c0:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c5c2:	ab03      	add	r3, sp, #12
    c5c4:	4619      	mov	r1, r3
    c5c6:	2002      	movs	r0, #2
    c5c8:	f001 fcce 	bl	df68 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c5cc:	2300      	movs	r3, #0
    c5ce:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c5d0:	e7fe      	b.n	c5d0 <am_util_faultisr_collect_data+0xd4>
    c5d2:	bf00      	nop
    c5d4:	e000ed28 	.word	0xe000ed28
    c5d8:	e000ed38 	.word	0xe000ed38

0000c5dc <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c5dc:	b082      	sub	sp, #8
    c5de:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c5e0:	4a02      	ldr	r2, [pc, #8]	; (c5ec <am_util_stdio_printf_init+0x10>)
    c5e2:	9b01      	ldr	r3, [sp, #4]
    c5e4:	6013      	str	r3, [r2, #0]
}
    c5e6:	bf00      	nop
    c5e8:	b002      	add	sp, #8
    c5ea:	4770      	bx	lr
    c5ec:	1000106c 	.word	0x1000106c

0000c5f0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c5f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c5f4:	b098      	sub	sp, #96	; 0x60
    c5f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c5fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c5fe:	f04f 0000 	mov.w	r0, #0
    c602:	f04f 0100 	mov.w	r1, #0
    c606:	0018      	movs	r0, r3
    c608:	2100      	movs	r1, #0
    c60a:	ea50 0301 	orrs.w	r3, r0, r1
    c60e:	f000 80b0 	beq.w	c772 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c612:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c616:	f04f 0400 	mov.w	r4, #0
    c61a:	f04f 0500 	mov.w	r5, #0
    c61e:	0854      	lsrs	r4, r2, #1
    c620:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c624:	085d      	lsrs	r5, r3, #1
    c626:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c62a:	f04f 0000 	mov.w	r0, #0
    c62e:	f04f 0100 	mov.w	r1, #0
    c632:	0890      	lsrs	r0, r2, #2
    c634:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c638:	0899      	lsrs	r1, r3, #2
    c63a:	eb14 0a00 	adds.w	sl, r4, r0
    c63e:	eb45 0b01 	adc.w	fp, r5, r1
    c642:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c646:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c64a:	f04f 0000 	mov.w	r0, #0
    c64e:	f04f 0100 	mov.w	r1, #0
    c652:	0910      	lsrs	r0, r2, #4
    c654:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c658:	0919      	lsrs	r1, r3, #4
    c65a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c65e:	1814      	adds	r4, r2, r0
    c660:	9402      	str	r4, [sp, #8]
    c662:	414b      	adcs	r3, r1
    c664:	9303      	str	r3, [sp, #12]
    c666:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c66a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c66e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c672:	f04f 0000 	mov.w	r0, #0
    c676:	f04f 0100 	mov.w	r1, #0
    c67a:	0a10      	lsrs	r0, r2, #8
    c67c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c680:	0a19      	lsrs	r1, r3, #8
    c682:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c686:	1814      	adds	r4, r2, r0
    c688:	9404      	str	r4, [sp, #16]
    c68a:	414b      	adcs	r3, r1
    c68c:	9305      	str	r3, [sp, #20]
    c68e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c692:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c696:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c69a:	f04f 0000 	mov.w	r0, #0
    c69e:	f04f 0100 	mov.w	r1, #0
    c6a2:	0c10      	lsrs	r0, r2, #16
    c6a4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c6a8:	0c19      	lsrs	r1, r3, #16
    c6aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6ae:	1814      	adds	r4, r2, r0
    c6b0:	9406      	str	r4, [sp, #24]
    c6b2:	414b      	adcs	r3, r1
    c6b4:	9307      	str	r3, [sp, #28]
    c6b6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c6ba:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c6be:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6c2:	f04f 0000 	mov.w	r0, #0
    c6c6:	f04f 0100 	mov.w	r1, #0
    c6ca:	0018      	movs	r0, r3
    c6cc:	2100      	movs	r1, #0
    c6ce:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c6d2:	1814      	adds	r4, r2, r0
    c6d4:	9408      	str	r4, [sp, #32]
    c6d6:	414b      	adcs	r3, r1
    c6d8:	9309      	str	r3, [sp, #36]	; 0x24
    c6da:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c6de:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c6e2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c6e6:	f04f 0200 	mov.w	r2, #0
    c6ea:	f04f 0300 	mov.w	r3, #0
    c6ee:	08c2      	lsrs	r2, r0, #3
    c6f0:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c6f4:	08cb      	lsrs	r3, r1, #3
    c6f6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c6fa:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c6fe:	4622      	mov	r2, r4
    c700:	462b      	mov	r3, r5
    c702:	f04f 0000 	mov.w	r0, #0
    c706:	f04f 0100 	mov.w	r1, #0
    c70a:	0099      	lsls	r1, r3, #2
    c70c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c710:	0090      	lsls	r0, r2, #2
    c712:	4602      	mov	r2, r0
    c714:	460b      	mov	r3, r1
    c716:	1916      	adds	r6, r2, r4
    c718:	eb43 0705 	adc.w	r7, r3, r5
    c71c:	19b3      	adds	r3, r6, r6
    c71e:	930a      	str	r3, [sp, #40]	; 0x28
    c720:	eb47 0307 	adc.w	r3, r7, r7
    c724:	930b      	str	r3, [sp, #44]	; 0x2c
    c726:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c72a:	4630      	mov	r0, r6
    c72c:	4639      	mov	r1, r7
    c72e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c732:	1a14      	subs	r4, r2, r0
    c734:	940c      	str	r4, [sp, #48]	; 0x30
    c736:	eb63 0301 	sbc.w	r3, r3, r1
    c73a:	930d      	str	r3, [sp, #52]	; 0x34
    c73c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c740:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c744:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c748:	f112 0806 	adds.w	r8, r2, #6
    c74c:	f143 0900 	adc.w	r9, r3, #0
    c750:	f04f 0200 	mov.w	r2, #0
    c754:	f04f 0300 	mov.w	r3, #0
    c758:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c75c:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c760:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c764:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c768:	1814      	adds	r4, r2, r0
    c76a:	9400      	str	r4, [sp, #0]
    c76c:	414b      	adcs	r3, r1
    c76e:	9301      	str	r3, [sp, #4]
    c770:	e02a      	b.n	c7c8 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c774:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c778:	085a      	lsrs	r2, r3, #1
    c77a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c77c:	089b      	lsrs	r3, r3, #2
    c77e:	4413      	add	r3, r2
    c780:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c782:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c784:	091b      	lsrs	r3, r3, #4
    c786:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c788:	4413      	add	r3, r2
    c78a:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c78c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c78e:	0a1b      	lsrs	r3, r3, #8
    c790:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c792:	4413      	add	r3, r2
    c794:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c796:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c798:	0c1b      	lsrs	r3, r3, #16
    c79a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c79c:	4413      	add	r3, r2
    c79e:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c7a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7a2:	08db      	lsrs	r3, r3, #3
    c7a4:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c7a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c7a8:	4613      	mov	r3, r2
    c7aa:	009b      	lsls	r3, r3, #2
    c7ac:	4413      	add	r3, r2
    c7ae:	005b      	lsls	r3, r3, #1
    c7b0:	461a      	mov	r2, r3
    c7b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c7b4:	1a9b      	subs	r3, r3, r2
    c7b6:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c7b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c7ba:	3306      	adds	r3, #6
    c7bc:	091a      	lsrs	r2, r3, #4
    c7be:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c7c0:	4413      	add	r3, r2
    c7c2:	2200      	movs	r2, #0
    c7c4:	9300      	str	r3, [sp, #0]
    c7c6:	9201      	str	r2, [sp, #4]
    }
}
    c7c8:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7cc:	4610      	mov	r0, r2
    c7ce:	4619      	mov	r1, r3
    c7d0:	b018      	add	sp, #96	; 0x60
    c7d2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c7d6:	4770      	bx	lr

0000c7d8 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c7d8:	b500      	push	{lr}
    c7da:	b085      	sub	sp, #20
    c7dc:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c7e0:	9a00      	ldr	r2, [sp, #0]
    c7e2:	9b01      	ldr	r3, [sp, #4]
    c7e4:	4313      	orrs	r3, r2
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	bf0c      	ite	eq
    c7ea:	2301      	moveq	r3, #1
    c7ec:	2300      	movne	r3, #0
    c7ee:	b2db      	uxtb	r3, r3
    c7f0:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c7f2:	e008      	b.n	c806 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c7f4:	e9dd 0100 	ldrd	r0, r1, [sp]
    c7f8:	f7ff fefa 	bl	c5f0 <divu64_10>
    c7fc:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c800:	9b03      	ldr	r3, [sp, #12]
    c802:	3301      	adds	r3, #1
    c804:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c806:	e9dd 2300 	ldrd	r2, r3, [sp]
    c80a:	4313      	orrs	r3, r2
    c80c:	d1f2      	bne.n	c7f4 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c80e:	9b03      	ldr	r3, [sp, #12]
}
    c810:	4618      	mov	r0, r3
    c812:	b005      	add	sp, #20
    c814:	f85d fb04 	ldr.w	pc, [sp], #4

0000c818 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c818:	b530      	push	{r4, r5, lr}
    c81a:	b083      	sub	sp, #12
    c81c:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c820:	e9dd 2300 	ldrd	r2, r3, [sp]
    c824:	2b00      	cmp	r3, #0
    c826:	da07      	bge.n	c838 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c828:	e9dd 2300 	ldrd	r2, r3, [sp]
    c82c:	2100      	movs	r1, #0
    c82e:	4254      	negs	r4, r2
    c830:	eb61 0503 	sbc.w	r5, r1, r3
    c834:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c838:	e9dd 2300 	ldrd	r2, r3, [sp]
    c83c:	4610      	mov	r0, r2
    c83e:	4619      	mov	r1, r3
    c840:	f7ff ffca 	bl	c7d8 <ndigits_in_u64>
    c844:	4603      	mov	r3, r0
}
    c846:	4618      	mov	r0, r3
    c848:	b003      	add	sp, #12
    c84a:	bd30      	pop	{r4, r5, pc}

0000c84c <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c84c:	b084      	sub	sp, #16
    c84e:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c852:	9a00      	ldr	r2, [sp, #0]
    c854:	9b01      	ldr	r3, [sp, #4]
    c856:	4313      	orrs	r3, r2
    c858:	2b00      	cmp	r3, #0
    c85a:	bf0c      	ite	eq
    c85c:	2301      	moveq	r3, #1
    c85e:	2300      	movne	r3, #0
    c860:	b2db      	uxtb	r3, r3
    c862:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c864:	e00e      	b.n	c884 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c866:	e9dd 0100 	ldrd	r0, r1, [sp]
    c86a:	f04f 0200 	mov.w	r2, #0
    c86e:	f04f 0300 	mov.w	r3, #0
    c872:	0902      	lsrs	r2, r0, #4
    c874:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c878:	090b      	lsrs	r3, r1, #4
    c87a:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c87e:	9b03      	ldr	r3, [sp, #12]
    c880:	3301      	adds	r3, #1
    c882:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c884:	e9dd 2300 	ldrd	r2, r3, [sp]
    c888:	4313      	orrs	r3, r2
    c88a:	d1ec      	bne.n	c866 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c88c:	9b03      	ldr	r3, [sp, #12]
}
    c88e:	4618      	mov	r0, r3
    c890:	b004      	add	sp, #16
    c892:	4770      	bx	lr

0000c894 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c894:	b086      	sub	sp, #24
    c896:	9001      	str	r0, [sp, #4]
    c898:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c89a:	2300      	movs	r3, #0
    c89c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c8a0:	2300      	movs	r3, #0
    c8a2:	9304      	str	r3, [sp, #16]
    c8a4:	2300      	movs	r3, #0
    c8a6:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c8a8:	9b01      	ldr	r3, [sp, #4]
    c8aa:	781b      	ldrb	r3, [r3, #0]
    c8ac:	2b2d      	cmp	r3, #45	; 0x2d
    c8ae:	d11c      	bne.n	c8ea <decstr_to_int+0x56>
    {
        bNeg = true;
    c8b0:	2301      	movs	r3, #1
    c8b2:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c8b6:	9b01      	ldr	r3, [sp, #4]
    c8b8:	3301      	adds	r3, #1
    c8ba:	9301      	str	r3, [sp, #4]
        uCnt++;
    c8bc:	9b03      	ldr	r3, [sp, #12]
    c8be:	3301      	adds	r3, #1
    c8c0:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8c2:	e012      	b.n	c8ea <decstr_to_int+0x56>
    {
        ++uCnt;
    c8c4:	9b03      	ldr	r3, [sp, #12]
    c8c6:	3301      	adds	r3, #1
    c8c8:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c8ca:	9a04      	ldr	r2, [sp, #16]
    c8cc:	4613      	mov	r3, r2
    c8ce:	009b      	lsls	r3, r3, #2
    c8d0:	4413      	add	r3, r2
    c8d2:	005b      	lsls	r3, r3, #1
    c8d4:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c8d6:	9b01      	ldr	r3, [sp, #4]
    c8d8:	781b      	ldrb	r3, [r3, #0]
    c8da:	461a      	mov	r2, r3
    c8dc:	9b04      	ldr	r3, [sp, #16]
    c8de:	4413      	add	r3, r2
    c8e0:	3b30      	subs	r3, #48	; 0x30
    c8e2:	9304      	str	r3, [sp, #16]
        pcStr++;
    c8e4:	9b01      	ldr	r3, [sp, #4]
    c8e6:	3301      	adds	r3, #1
    c8e8:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8ea:	9b01      	ldr	r3, [sp, #4]
    c8ec:	781b      	ldrb	r3, [r3, #0]
    c8ee:	2b2f      	cmp	r3, #47	; 0x2f
    c8f0:	d903      	bls.n	c8fa <decstr_to_int+0x66>
    c8f2:	9b01      	ldr	r3, [sp, #4]
    c8f4:	781b      	ldrb	r3, [r3, #0]
    c8f6:	2b39      	cmp	r3, #57	; 0x39
    c8f8:	d9e4      	bls.n	c8c4 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c8fa:	9b00      	ldr	r3, [sp, #0]
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d002      	beq.n	c906 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c900:	9b00      	ldr	r3, [sp, #0]
    c902:	9a03      	ldr	r2, [sp, #12]
    c904:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c906:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c90a:	2b00      	cmp	r3, #0
    c90c:	d002      	beq.n	c914 <decstr_to_int+0x80>
    c90e:	9b04      	ldr	r3, [sp, #16]
    c910:	425b      	negs	r3, r3
    c912:	e000      	b.n	c916 <decstr_to_int+0x82>
    c914:	9b04      	ldr	r3, [sp, #16]
}
    c916:	4618      	mov	r0, r3
    c918:	b006      	add	sp, #24
    c91a:	4770      	bx	lr

0000c91c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c91c:	b500      	push	{lr}
    c91e:	b091      	sub	sp, #68	; 0x44
    c920:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c924:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c926:	2300      	movs	r3, #0
    c928:	930f      	str	r3, [sp, #60]	; 0x3c
    c92a:	2300      	movs	r3, #0
    c92c:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c92e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c932:	f7ff fe5d 	bl	c5f0 <divu64_10>
    c936:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c93a:	9902      	ldr	r1, [sp, #8]
    c93c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c93e:	4613      	mov	r3, r2
    c940:	009b      	lsls	r3, r3, #2
    c942:	4413      	add	r3, r2
    c944:	005b      	lsls	r3, r3, #1
    c946:	1acb      	subs	r3, r1, r3
    c948:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c94c:	b2da      	uxtb	r2, r3
    c94e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c950:	1c59      	adds	r1, r3, #1
    c952:	910f      	str	r1, [sp, #60]	; 0x3c
    c954:	3230      	adds	r2, #48	; 0x30
    c956:	b2d2      	uxtb	r2, r2
    c958:	3340      	adds	r3, #64	; 0x40
    c95a:	446b      	add	r3, sp
    c95c:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c960:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c964:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c96c:	4313      	orrs	r3, r2
    c96e:	d1de      	bne.n	c92e <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c972:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c974:	9b01      	ldr	r3, [sp, #4]
    c976:	2b00      	cmp	r3, #0
    c978:	d010      	beq.n	c99c <uint64_to_str+0x80>
    {
        while ( ix-- )
    c97a:	e007      	b.n	c98c <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c97c:	9b01      	ldr	r3, [sp, #4]
    c97e:	1c5a      	adds	r2, r3, #1
    c980:	9201      	str	r2, [sp, #4]
    c982:	a904      	add	r1, sp, #16
    c984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c986:	440a      	add	r2, r1
    c988:	7812      	ldrb	r2, [r2, #0]
    c98a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c98c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c98e:	1e5a      	subs	r2, r3, #1
    c990:	920f      	str	r2, [sp, #60]	; 0x3c
    c992:	2b00      	cmp	r3, #0
    c994:	d1f2      	bne.n	c97c <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c996:	9b01      	ldr	r3, [sp, #4]
    c998:	2200      	movs	r2, #0
    c99a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c99c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c99e:	4618      	mov	r0, r3
    c9a0:	b011      	add	sp, #68	; 0x44
    c9a2:	f85d fb04 	ldr.w	pc, [sp], #4

0000c9a6 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c9a6:	b08c      	sub	sp, #48	; 0x30
    c9a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c9ac:	9201      	str	r2, [sp, #4]
    c9ae:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c9b2:	2300      	movs	r3, #0
    c9b4:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c9b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c9ba:	4313      	orrs	r3, r2
    c9bc:	d135      	bne.n	ca2a <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c9be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9c0:	1c5a      	adds	r2, r3, #1
    c9c2:	920b      	str	r2, [sp, #44]	; 0x2c
    c9c4:	3330      	adds	r3, #48	; 0x30
    c9c6:	446b      	add	r3, sp
    c9c8:	2230      	movs	r2, #48	; 0x30
    c9ca:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c9ce:	e02c      	b.n	ca2a <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c9d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c9d4:	f003 030f 	and.w	r3, r3, #15
    c9d8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c9dc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c9e0:	2b09      	cmp	r3, #9
    c9e2:	d90b      	bls.n	c9fc <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c9e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d001      	beq.n	c9f0 <uint64_to_hexstr+0x4a>
    c9ec:	2227      	movs	r2, #39	; 0x27
    c9ee:	e000      	b.n	c9f2 <uint64_to_hexstr+0x4c>
    c9f0:	2207      	movs	r2, #7
    c9f2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c9f6:	4413      	add	r3, r2
    c9f8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c9fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9fe:	1c5a      	adds	r2, r3, #1
    ca00:	920b      	str	r2, [sp, #44]	; 0x2c
    ca02:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    ca06:	3230      	adds	r2, #48	; 0x30
    ca08:	b2d2      	uxtb	r2, r2
    ca0a:	3330      	adds	r3, #48	; 0x30
    ca0c:	446b      	add	r3, sp
    ca0e:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    ca12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ca16:	f04f 0200 	mov.w	r2, #0
    ca1a:	f04f 0300 	mov.w	r3, #0
    ca1e:	0902      	lsrs	r2, r0, #4
    ca20:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    ca24:	090b      	lsrs	r3, r1, #4
    ca26:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    ca2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca2e:	4313      	orrs	r3, r2
    ca30:	d1ce      	bne.n	c9d0 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca34:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    ca36:	9b01      	ldr	r3, [sp, #4]
    ca38:	2b00      	cmp	r3, #0
    ca3a:	d010      	beq.n	ca5e <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    ca3c:	e007      	b.n	ca4e <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    ca3e:	9b01      	ldr	r3, [sp, #4]
    ca40:	1c5a      	adds	r2, r3, #1
    ca42:	9201      	str	r2, [sp, #4]
    ca44:	a904      	add	r1, sp, #16
    ca46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca48:	440a      	add	r2, r1
    ca4a:	7812      	ldrb	r2, [r2, #0]
    ca4c:	701a      	strb	r2, [r3, #0]
        while (ix--)
    ca4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca50:	1e5a      	subs	r2, r3, #1
    ca52:	920b      	str	r2, [sp, #44]	; 0x2c
    ca54:	2b00      	cmp	r3, #0
    ca56:	d1f2      	bne.n	ca3e <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    ca58:	9b01      	ldr	r3, [sp, #4]
    ca5a:	2200      	movs	r2, #0
    ca5c:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    ca60:	4618      	mov	r0, r3
    ca62:	b00c      	add	sp, #48	; 0x30
    ca64:	4770      	bx	lr

0000ca66 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ca66:	b084      	sub	sp, #16
    ca68:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    ca6a:	2300      	movs	r3, #0
    ca6c:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    ca6e:	9b01      	ldr	r3, [sp, #4]
    ca70:	2b00      	cmp	r3, #0
    ca72:	d104      	bne.n	ca7e <simple_strlen+0x18>
    {
        return ui32RetVal;
    ca74:	9b03      	ldr	r3, [sp, #12]
    ca76:	e009      	b.n	ca8c <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    ca78:	9b03      	ldr	r3, [sp, #12]
    ca7a:	3301      	adds	r3, #1
    ca7c:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    ca7e:	9b01      	ldr	r3, [sp, #4]
    ca80:	1c5a      	adds	r2, r3, #1
    ca82:	9201      	str	r2, [sp, #4]
    ca84:	781b      	ldrb	r3, [r3, #0]
    ca86:	2b00      	cmp	r3, #0
    ca88:	d1f6      	bne.n	ca78 <simple_strlen+0x12>
    }
    return ui32RetVal;
    ca8a:	9b03      	ldr	r3, [sp, #12]
}
    ca8c:	4618      	mov	r0, r3
    ca8e:	b004      	add	sp, #16
    ca90:	4770      	bx	lr

0000ca92 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    ca92:	b086      	sub	sp, #24
    ca94:	9003      	str	r0, [sp, #12]
    ca96:	460b      	mov	r3, r1
    ca98:	9201      	str	r2, [sp, #4]
    ca9a:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    ca9e:	2300      	movs	r3, #0
    caa0:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    caa2:	9b01      	ldr	r3, [sp, #4]
    caa4:	2b00      	cmp	r3, #0
    caa6:	dc0d      	bgt.n	cac4 <padbuffer+0x32>
    {
        return i32Cnt;
    caa8:	9b05      	ldr	r3, [sp, #20]
    caaa:	e011      	b.n	cad0 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    caac:	9b03      	ldr	r3, [sp, #12]
    caae:	2b00      	cmp	r3, #0
    cab0:	d005      	beq.n	cabe <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cab2:	9b03      	ldr	r3, [sp, #12]
    cab4:	1c5a      	adds	r2, r3, #1
    cab6:	9203      	str	r2, [sp, #12]
    cab8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cabc:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cabe:	9b05      	ldr	r3, [sp, #20]
    cac0:	3301      	adds	r3, #1
    cac2:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cac4:	9b01      	ldr	r3, [sp, #4]
    cac6:	1e5a      	subs	r2, r3, #1
    cac8:	9201      	str	r2, [sp, #4]
    caca:	2b00      	cmp	r3, #0
    cacc:	d1ee      	bne.n	caac <padbuffer+0x1a>
    }

    return i32Cnt;
    cace:	9b05      	ldr	r3, [sp, #20]
}
    cad0:	4618      	mov	r0, r3
    cad2:	b006      	add	sp, #24
    cad4:	4770      	bx	lr
	...

0000cad8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cada:	b08f      	sub	sp, #60	; 0x3c
    cadc:	ed8d 0a03 	vstr	s0, [sp, #12]
    cae0:	9002      	str	r0, [sp, #8]
    cae2:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cae4:	9b02      	ldr	r3, [sp, #8]
    cae6:	681b      	ldr	r3, [r3, #0]
    cae8:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    caea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    caec:	2b03      	cmp	r3, #3
    caee:	dc02      	bgt.n	caf6 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    caf0:	f06f 0302 	mvn.w	r3, #2
    caf4:	e0e9      	b.n	ccca <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    caf6:	eddd 7a03 	vldr	s15, [sp, #12]
    cafa:	eef5 7a40 	vcmp.f32	s15, #0.0
    cafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb02:	d104      	bne.n	cb0e <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cb04:	9b02      	ldr	r3, [sp, #8]
    cb06:	4a72      	ldr	r2, [pc, #456]	; (ccd0 <ftoa+0x1f8>)
    cb08:	601a      	str	r2, [r3, #0]
        return 3;
    cb0a:	2303      	movs	r3, #3
    cb0c:	e0dd      	b.n	ccca <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cb0e:	9b02      	ldr	r3, [sp, #8]
    cb10:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cb12:	9b03      	ldr	r3, [sp, #12]
    cb14:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb16:	9b04      	ldr	r3, [sp, #16]
    cb18:	15db      	asrs	r3, r3, #23
    cb1a:	b2db      	uxtb	r3, r3
    cb1c:	3b7f      	subs	r3, #127	; 0x7f
    cb1e:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cb20:	9b04      	ldr	r3, [sp, #16]
    cb22:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cb26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cb2a:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cb2c:	2300      	movs	r3, #0
    cb2e:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cb30:	2300      	movs	r3, #0
    cb32:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cb34:	9b07      	ldr	r3, [sp, #28]
    cb36:	2b1e      	cmp	r3, #30
    cb38:	dd02      	ble.n	cb40 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cb3a:	f06f 0301 	mvn.w	r3, #1
    cb3e:	e0c4      	b.n	ccca <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cb40:	9b07      	ldr	r3, [sp, #28]
    cb42:	f113 0f17 	cmn.w	r3, #23
    cb46:	da02      	bge.n	cb4e <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cb48:	f04f 33ff 	mov.w	r3, #4294967295
    cb4c:	e0bd      	b.n	ccca <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cb4e:	9b07      	ldr	r3, [sp, #28]
    cb50:	2b16      	cmp	r3, #22
    cb52:	dd06      	ble.n	cb62 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cb54:	9b07      	ldr	r3, [sp, #28]
    cb56:	3b17      	subs	r3, #23
    cb58:	9a06      	ldr	r2, [sp, #24]
    cb5a:	fa02 f303 	lsl.w	r3, r2, r3
    cb5e:	930d      	str	r3, [sp, #52]	; 0x34
    cb60:	e01a      	b.n	cb98 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cb62:	9b07      	ldr	r3, [sp, #28]
    cb64:	2b00      	cmp	r3, #0
    cb66:	db0f      	blt.n	cb88 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cb68:	9b07      	ldr	r3, [sp, #28]
    cb6a:	f1c3 0317 	rsb	r3, r3, #23
    cb6e:	9a06      	ldr	r2, [sp, #24]
    cb70:	fa42 f303 	asr.w	r3, r2, r3
    cb74:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cb76:	9b07      	ldr	r3, [sp, #28]
    cb78:	3301      	adds	r3, #1
    cb7a:	9a06      	ldr	r2, [sp, #24]
    cb7c:	fa02 f303 	lsl.w	r3, r2, r3
    cb80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cb84:	930c      	str	r3, [sp, #48]	; 0x30
    cb86:	e007      	b.n	cb98 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cb88:	9b06      	ldr	r3, [sp, #24]
    cb8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cb8e:	9b07      	ldr	r3, [sp, #28]
    cb90:	43db      	mvns	r3, r3
    cb92:	fa42 f303 	asr.w	r3, r2, r3
    cb96:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cb98:	9b04      	ldr	r3, [sp, #16]
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	da04      	bge.n	cba8 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cb9e:	9b02      	ldr	r3, [sp, #8]
    cba0:	1c5a      	adds	r2, r3, #1
    cba2:	9202      	str	r2, [sp, #8]
    cba4:	222d      	movs	r2, #45	; 0x2d
    cba6:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbaa:	2b00      	cmp	r3, #0
    cbac:	d105      	bne.n	cbba <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cbae:	9b02      	ldr	r3, [sp, #8]
    cbb0:	1c5a      	adds	r2, r3, #1
    cbb2:	9202      	str	r2, [sp, #8]
    cbb4:	2230      	movs	r2, #48	; 0x30
    cbb6:	701a      	strb	r2, [r3, #0]
    cbb8:	e023      	b.n	cc02 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbbc:	2b00      	cmp	r3, #0
    cbbe:	dd09      	ble.n	cbd4 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cbc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbc2:	17da      	asrs	r2, r3, #31
    cbc4:	461e      	mov	r6, r3
    cbc6:	4617      	mov	r7, r2
    cbc8:	9a02      	ldr	r2, [sp, #8]
    cbca:	4630      	mov	r0, r6
    cbcc:	4639      	mov	r1, r7
    cbce:	f7ff fea5 	bl	c91c <uint64_to_str>
    cbd2:	e012      	b.n	cbfa <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cbd4:	9b02      	ldr	r3, [sp, #8]
    cbd6:	1c5a      	adds	r2, r3, #1
    cbd8:	9202      	str	r2, [sp, #8]
    cbda:	222d      	movs	r2, #45	; 0x2d
    cbdc:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cbde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbe0:	425b      	negs	r3, r3
    cbe2:	17da      	asrs	r2, r3, #31
    cbe4:	461c      	mov	r4, r3
    cbe6:	4615      	mov	r5, r2
    cbe8:	9a02      	ldr	r2, [sp, #8]
    cbea:	4620      	mov	r0, r4
    cbec:	4629      	mov	r1, r5
    cbee:	f7ff fe95 	bl	c91c <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cbf2:	e002      	b.n	cbfa <ftoa+0x122>
        {
            pcBuf++;
    cbf4:	9b02      	ldr	r3, [sp, #8]
    cbf6:	3301      	adds	r3, #1
    cbf8:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    cbfa:	9b02      	ldr	r3, [sp, #8]
    cbfc:	781b      	ldrb	r3, [r3, #0]
    cbfe:	2b00      	cmp	r3, #0
    cc00:	d1f8      	bne.n	cbf4 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cc02:	9b02      	ldr	r3, [sp, #8]
    cc04:	1c5a      	adds	r2, r3, #1
    cc06:	9202      	str	r2, [sp, #8]
    cc08:	222e      	movs	r2, #46	; 0x2e
    cc0a:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cc0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc0e:	2b00      	cmp	r3, #0
    cc10:	d105      	bne.n	cc1e <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cc12:	9b02      	ldr	r3, [sp, #8]
    cc14:	1c5a      	adds	r2, r3, #1
    cc16:	9202      	str	r2, [sp, #8]
    cc18:	2230      	movs	r2, #48	; 0x30
    cc1a:	701a      	strb	r2, [r3, #0]
    cc1c:	e04f      	b.n	ccbe <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cc1e:	9a02      	ldr	r2, [sp, #8]
    cc20:	9b08      	ldr	r3, [sp, #32]
    cc22:	1ad3      	subs	r3, r2, r3
    cc24:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cc26:	1ad3      	subs	r3, r2, r3
    cc28:	3b01      	subs	r3, #1
    cc2a:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cc2c:	9a05      	ldr	r2, [sp, #20]
    cc2e:	9b01      	ldr	r3, [sp, #4]
    cc30:	4293      	cmp	r3, r2
    cc32:	bfa8      	it	ge
    cc34:	4613      	movge	r3, r2
    cc36:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cc38:	2300      	movs	r3, #0
    cc3a:	930a      	str	r3, [sp, #40]	; 0x28
    cc3c:	e015      	b.n	cc6a <ftoa+0x192>
        {
            i32FracPart *= 10;
    cc3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc40:	4613      	mov	r3, r2
    cc42:	009b      	lsls	r3, r3, #2
    cc44:	4413      	add	r3, r2
    cc46:	005b      	lsls	r3, r3, #1
    cc48:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cc4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc4c:	161b      	asrs	r3, r3, #24
    cc4e:	b2da      	uxtb	r2, r3
    cc50:	9b02      	ldr	r3, [sp, #8]
    cc52:	1c59      	adds	r1, r3, #1
    cc54:	9102      	str	r1, [sp, #8]
    cc56:	3230      	adds	r2, #48	; 0x30
    cc58:	b2d2      	uxtb	r2, r2
    cc5a:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cc5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc62:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc66:	3301      	adds	r3, #1
    cc68:	930a      	str	r3, [sp, #40]	; 0x28
    cc6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc6c:	9b05      	ldr	r3, [sp, #20]
    cc6e:	429a      	cmp	r2, r3
    cc70:	dbe5      	blt.n	cc3e <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cc72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc74:	4613      	mov	r3, r2
    cc76:	009b      	lsls	r3, r3, #2
    cc78:	4413      	add	r3, r2
    cc7a:	005b      	lsls	r3, r3, #1
    cc7c:	161b      	asrs	r3, r3, #24
    cc7e:	2b04      	cmp	r3, #4
    cc80:	dd1d      	ble.n	ccbe <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cc82:	9b02      	ldr	r3, [sp, #8]
    cc84:	3b01      	subs	r3, #1
    cc86:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cc88:	e015      	b.n	ccb6 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc8c:	781b      	ldrb	r3, [r3, #0]
    cc8e:	2b2e      	cmp	r3, #46	; 0x2e
    cc90:	d00e      	beq.n	ccb0 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cc92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc94:	781b      	ldrb	r3, [r3, #0]
    cc96:	2b39      	cmp	r3, #57	; 0x39
    cc98:	d103      	bne.n	cca2 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc9c:	2230      	movs	r2, #48	; 0x30
    cc9e:	701a      	strb	r2, [r3, #0]
    cca0:	e006      	b.n	ccb0 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cca4:	781b      	ldrb	r3, [r3, #0]
    cca6:	3301      	adds	r3, #1
    cca8:	b2da      	uxtb	r2, r3
    ccaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccac:	701a      	strb	r2, [r3, #0]
                    break;
    ccae:	e006      	b.n	ccbe <ftoa+0x1e6>
                }
                pcBuftmp--;
    ccb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccb2:	3b01      	subs	r3, #1
    ccb4:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ccb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ccb8:	9b08      	ldr	r3, [sp, #32]
    ccba:	429a      	cmp	r2, r3
    ccbc:	d2e5      	bcs.n	cc8a <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    ccbe:	9b02      	ldr	r3, [sp, #8]
    ccc0:	2200      	movs	r2, #0
    ccc2:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    ccc4:	9a02      	ldr	r2, [sp, #8]
    ccc6:	9b08      	ldr	r3, [sp, #32]
    ccc8:	1ad3      	subs	r3, r2, r3
} // ftoa()
    ccca:	4618      	mov	r0, r3
    cccc:	b00f      	add	sp, #60	; 0x3c
    ccce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccd0:	00302e30 	.word	0x00302e30

0000ccd4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccd8:	b097      	sub	sp, #92	; 0x5c
    ccda:	9003      	str	r0, [sp, #12]
    ccdc:	9102      	str	r1, [sp, #8]
    ccde:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cce0:	2300      	movs	r3, #0
    cce2:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cce4:	2300      	movs	r3, #0
    cce6:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cce8:	e2e9      	b.n	d2be <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    ccea:	2306      	movs	r3, #6
    ccec:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    ccee:	9b02      	ldr	r3, [sp, #8]
    ccf0:	781b      	ldrb	r3, [r3, #0]
    ccf2:	2b25      	cmp	r3, #37	; 0x25
    ccf4:	d01f      	beq.n	cd36 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ccf6:	9b03      	ldr	r3, [sp, #12]
    ccf8:	2b00      	cmp	r3, #0
    ccfa:	d015      	beq.n	cd28 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ccfc:	9b02      	ldr	r3, [sp, #8]
    ccfe:	781b      	ldrb	r3, [r3, #0]
    cd00:	2b0a      	cmp	r3, #10
    cd02:	d10b      	bne.n	cd1c <am_util_stdio_vsprintf+0x48>
    cd04:	4ba8      	ldr	r3, [pc, #672]	; (cfa8 <am_util_stdio_vsprintf+0x2d4>)
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	2b00      	cmp	r3, #0
    cd0a:	d007      	beq.n	cd1c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cd0c:	9b03      	ldr	r3, [sp, #12]
    cd0e:	1c5a      	adds	r2, r3, #1
    cd10:	9203      	str	r2, [sp, #12]
    cd12:	220d      	movs	r2, #13
    cd14:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cd16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd18:	3301      	adds	r3, #1
    cd1a:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cd1c:	9b03      	ldr	r3, [sp, #12]
    cd1e:	1c5a      	adds	r2, r3, #1
    cd20:	9203      	str	r2, [sp, #12]
    cd22:	9a02      	ldr	r2, [sp, #8]
    cd24:	7812      	ldrb	r2, [r2, #0]
    cd26:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cd28:	9b02      	ldr	r3, [sp, #8]
    cd2a:	3301      	adds	r3, #1
    cd2c:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cd2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd30:	3301      	adds	r3, #1
    cd32:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    cd34:	e2c3      	b.n	d2be <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cd36:	9b02      	ldr	r3, [sp, #8]
    cd38:	3301      	adds	r3, #1
    cd3a:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cd3c:	2300      	movs	r3, #0
    cd3e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cd42:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cd46:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cd4a:	2320      	movs	r3, #32
    cd4c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cd50:	9b02      	ldr	r3, [sp, #8]
    cd52:	781b      	ldrb	r3, [r3, #0]
    cd54:	2b30      	cmp	r3, #48	; 0x30
    cd56:	d105      	bne.n	cd64 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cd58:	2330      	movs	r3, #48	; 0x30
    cd5a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cd5e:	9b02      	ldr	r3, [sp, #8]
    cd60:	3301      	adds	r3, #1
    cd62:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cd64:	ab05      	add	r3, sp, #20
    cd66:	4619      	mov	r1, r3
    cd68:	9802      	ldr	r0, [sp, #8]
    cd6a:	f7ff fd93 	bl	c894 <decstr_to_int>
    cd6e:	4603      	mov	r3, r0
    cd70:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cd72:	9b05      	ldr	r3, [sp, #20]
    cd74:	9a02      	ldr	r2, [sp, #8]
    cd76:	4413      	add	r3, r2
    cd78:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cd7a:	9b02      	ldr	r3, [sp, #8]
    cd7c:	781b      	ldrb	r3, [r3, #0]
    cd7e:	2b73      	cmp	r3, #115	; 0x73
    cd80:	d005      	beq.n	cd8e <am_util_stdio_vsprintf+0xba>
    cd82:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd84:	2b00      	cmp	r3, #0
    cd86:	da02      	bge.n	cd8e <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cd88:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd8a:	425b      	negs	r3, r3
    cd8c:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cd8e:	9b02      	ldr	r3, [sp, #8]
    cd90:	781b      	ldrb	r3, [r3, #0]
    cd92:	2b2e      	cmp	r3, #46	; 0x2e
    cd94:	d10d      	bne.n	cdb2 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cd96:	9b02      	ldr	r3, [sp, #8]
    cd98:	3301      	adds	r3, #1
    cd9a:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cd9c:	ab05      	add	r3, sp, #20
    cd9e:	4619      	mov	r1, r3
    cda0:	9802      	ldr	r0, [sp, #8]
    cda2:	f7ff fd77 	bl	c894 <decstr_to_int>
    cda6:	4603      	mov	r3, r0
    cda8:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cdaa:	9b05      	ldr	r3, [sp, #20]
    cdac:	9a02      	ldr	r2, [sp, #8]
    cdae:	4413      	add	r3, r2
    cdb0:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cdb2:	9b02      	ldr	r3, [sp, #8]
    cdb4:	781b      	ldrb	r3, [r3, #0]
    cdb6:	2b6c      	cmp	r3, #108	; 0x6c
    cdb8:	d10c      	bne.n	cdd4 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cdba:	9b02      	ldr	r3, [sp, #8]
    cdbc:	3301      	adds	r3, #1
    cdbe:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cdc0:	9b02      	ldr	r3, [sp, #8]
    cdc2:	781b      	ldrb	r3, [r3, #0]
    cdc4:	2b6c      	cmp	r3, #108	; 0x6c
    cdc6:	d105      	bne.n	cdd4 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cdc8:	9b02      	ldr	r3, [sp, #8]
    cdca:	3301      	adds	r3, #1
    cdcc:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cdce:	2301      	movs	r3, #1
    cdd0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cdd4:	9b02      	ldr	r3, [sp, #8]
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	3b46      	subs	r3, #70	; 0x46
    cdda:	2b32      	cmp	r3, #50	; 0x32
    cddc:	f200 825c 	bhi.w	d298 <am_util_stdio_vsprintf+0x5c4>
    cde0:	a201      	add	r2, pc, #4	; (adr r2, cde8 <am_util_stdio_vsprintf+0x114>)
    cde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cde6:	bf00      	nop
    cde8:	0000d21f 	.word	0x0000d21f
    cdec:	0000d299 	.word	0x0000d299
    cdf0:	0000d299 	.word	0x0000d299
    cdf4:	0000d299 	.word	0x0000d299
    cdf8:	0000d299 	.word	0x0000d299
    cdfc:	0000d299 	.word	0x0000d299
    ce00:	0000d299 	.word	0x0000d299
    ce04:	0000d299 	.word	0x0000d299
    ce08:	0000d299 	.word	0x0000d299
    ce0c:	0000d299 	.word	0x0000d299
    ce10:	0000d299 	.word	0x0000d299
    ce14:	0000d299 	.word	0x0000d299
    ce18:	0000d299 	.word	0x0000d299
    ce1c:	0000d299 	.word	0x0000d299
    ce20:	0000d299 	.word	0x0000d299
    ce24:	0000d299 	.word	0x0000d299
    ce28:	0000d299 	.word	0x0000d299
    ce2c:	0000d299 	.word	0x0000d299
    ce30:	0000cfb3 	.word	0x0000cfb3
    ce34:	0000d299 	.word	0x0000d299
    ce38:	0000d299 	.word	0x0000d299
    ce3c:	0000d299 	.word	0x0000d299
    ce40:	0000d299 	.word	0x0000d299
    ce44:	0000d299 	.word	0x0000d299
    ce48:	0000d299 	.word	0x0000d299
    ce4c:	0000d299 	.word	0x0000d299
    ce50:	0000d299 	.word	0x0000d299
    ce54:	0000d299 	.word	0x0000d299
    ce58:	0000d299 	.word	0x0000d299
    ce5c:	0000ceb5 	.word	0x0000ceb5
    ce60:	0000d0e3 	.word	0x0000d0e3
    ce64:	0000d299 	.word	0x0000d299
    ce68:	0000d21f 	.word	0x0000d21f
    ce6c:	0000d299 	.word	0x0000d299
    ce70:	0000d299 	.word	0x0000d299
    ce74:	0000d0e3 	.word	0x0000d0e3
    ce78:	0000d299 	.word	0x0000d299
    ce7c:	0000d299 	.word	0x0000d299
    ce80:	0000d299 	.word	0x0000d299
    ce84:	0000d299 	.word	0x0000d299
    ce88:	0000d299 	.word	0x0000d299
    ce8c:	0000d299 	.word	0x0000d299
    ce90:	0000d299 	.word	0x0000d299
    ce94:	0000d299 	.word	0x0000d299
    ce98:	0000d299 	.word	0x0000d299
    ce9c:	0000cedb 	.word	0x0000cedb
    cea0:	0000d299 	.word	0x0000d299
    cea4:	0000d04d 	.word	0x0000d04d
    cea8:	0000d299 	.word	0x0000d299
    ceac:	0000d299 	.word	0x0000d299
    ceb0:	0000cfad 	.word	0x0000cfad
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    ceb4:	9b01      	ldr	r3, [sp, #4]
    ceb6:	1d1a      	adds	r2, r3, #4
    ceb8:	9201      	str	r2, [sp, #4]
    ceba:	681b      	ldr	r3, [r3, #0]
    cebc:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cec0:	9b03      	ldr	r3, [sp, #12]
    cec2:	2b00      	cmp	r3, #0
    cec4:	d005      	beq.n	ced2 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cec6:	9b03      	ldr	r3, [sp, #12]
    cec8:	1c5a      	adds	r2, r3, #1
    ceca:	9203      	str	r2, [sp, #12]
    cecc:	f89d 201f 	ldrb.w	r2, [sp, #31]
    ced0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    ced2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ced4:	3301      	adds	r3, #1
    ced6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ced8:	e1ee      	b.n	d2b8 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    ceda:	9b01      	ldr	r3, [sp, #4]
    cedc:	1d1a      	adds	r2, r3, #4
    cede:	9201      	str	r2, [sp, #4]
    cee0:	681b      	ldr	r3, [r3, #0]
    cee2:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cee4:	9815      	ldr	r0, [sp, #84]	; 0x54
    cee6:	f7ff fdbe 	bl	ca66 <simple_strlen>
    ceea:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    ceec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ceee:	2b00      	cmp	r3, #0
    cef0:	dd2e      	ble.n	cf50 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cef6:	429a      	cmp	r2, r3
    cef8:	d22a      	bcs.n	cf50 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cefa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cefc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cefe:	1ad3      	subs	r3, r2, r3
    cf00:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf02:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf06:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf08:	4619      	mov	r1, r3
    cf0a:	9803      	ldr	r0, [sp, #12]
    cf0c:	f7ff fdc1 	bl	ca92 <padbuffer>
    cf10:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cf12:	9b03      	ldr	r3, [sp, #12]
    cf14:	2b00      	cmp	r3, #0
    cf16:	d001      	beq.n	cf1c <am_util_stdio_vsprintf+0x248>
    cf18:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf1a:	e000      	b.n	cf1e <am_util_stdio_vsprintf+0x24a>
    cf1c:	2300      	movs	r3, #0
    cf1e:	9a03      	ldr	r2, [sp, #12]
    cf20:	4413      	add	r3, r2
    cf22:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cf24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf26:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf28:	4413      	add	r3, r2
    cf2a:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cf2c:	2300      	movs	r3, #0
    cf2e:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cf30:	e00e      	b.n	cf50 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cf32:	9b03      	ldr	r3, [sp, #12]
    cf34:	2b00      	cmp	r3, #0
    cf36:	d005      	beq.n	cf44 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    cf38:	9b03      	ldr	r3, [sp, #12]
    cf3a:	1c5a      	adds	r2, r3, #1
    cf3c:	9203      	str	r2, [sp, #12]
    cf3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cf40:	7812      	ldrb	r2, [r2, #0]
    cf42:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cf44:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cf46:	3301      	adds	r3, #1
    cf48:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    cf4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf4c:	3301      	adds	r3, #1
    cf4e:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    cf50:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	2b00      	cmp	r3, #0
    cf56:	d1ec      	bne.n	cf32 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    cf58:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	f000 81a9 	beq.w	d2b2 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cf60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf62:	425b      	negs	r3, r3
    cf64:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cf66:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf6a:	429a      	cmp	r2, r3
    cf6c:	f080 81a1 	bcs.w	d2b2 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf70:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf74:	1ad3      	subs	r3, r2, r3
    cf76:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf78:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf7e:	4619      	mov	r1, r3
    cf80:	9803      	ldr	r0, [sp, #12]
    cf82:	f7ff fd86 	bl	ca92 <padbuffer>
    cf86:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cf88:	9b03      	ldr	r3, [sp, #12]
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d001      	beq.n	cf92 <am_util_stdio_vsprintf+0x2be>
    cf8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf90:	e000      	b.n	cf94 <am_util_stdio_vsprintf+0x2c0>
    cf92:	2300      	movs	r3, #0
    cf94:	9a03      	ldr	r2, [sp, #12]
    cf96:	4413      	add	r3, r2
    cf98:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cf9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf9e:	4413      	add	r3, r2
    cfa0:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cfa2:	2300      	movs	r3, #0
    cfa4:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    cfa6:	e184      	b.n	d2b2 <am_util_stdio_vsprintf+0x5de>
    cfa8:	10001170 	.word	0x10001170

            case 'x':
                bLower = true;
    cfac:	2301      	movs	r3, #1
    cfae:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfb2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d009      	beq.n	cfce <am_util_stdio_vsprintf+0x2fa>
    cfba:	9b01      	ldr	r3, [sp, #4]
    cfbc:	3307      	adds	r3, #7
    cfbe:	f023 0307 	bic.w	r3, r3, #7
    cfc2:	f103 0208 	add.w	r2, r3, #8
    cfc6:	9201      	str	r2, [sp, #4]
    cfc8:	e9d3 4500 	ldrd	r4, r5, [r3]
    cfcc:	e006      	b.n	cfdc <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    cfce:	9b01      	ldr	r3, [sp, #4]
    cfd0:	1d1a      	adds	r2, r3, #4
    cfd2:	9201      	str	r2, [sp, #4]
    cfd4:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfd6:	2200      	movs	r2, #0
    cfd8:	461c      	mov	r4, r3
    cfda:	4615      	mov	r5, r2
    cfdc:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    cfe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfe2:	2b00      	cmp	r3, #0
    cfe4:	d01e      	beq.n	d024 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cfe6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cfea:	f7ff fc2f 	bl	c84c <ndigits_in_hex>
    cfee:	4602      	mov	r2, r0
    cff0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cff2:	1a9b      	subs	r3, r3, r2
    cff4:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cff6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cffa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cffc:	4619      	mov	r1, r3
    cffe:	9803      	ldr	r0, [sp, #12]
    d000:	f7ff fd47 	bl	ca92 <padbuffer>
    d004:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d006:	9b03      	ldr	r3, [sp, #12]
    d008:	2b00      	cmp	r3, #0
    d00a:	d001      	beq.n	d010 <am_util_stdio_vsprintf+0x33c>
    d00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d00e:	e000      	b.n	d012 <am_util_stdio_vsprintf+0x33e>
    d010:	2300      	movs	r3, #0
    d012:	9a03      	ldr	r2, [sp, #12]
    d014:	4413      	add	r3, r2
    d016:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d018:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d01a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d01c:	4413      	add	r3, r2
    d01e:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d020:	2300      	movs	r3, #0
    d022:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d024:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d028:	9a03      	ldr	r2, [sp, #12]
    d02a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d02e:	f7ff fcba 	bl	c9a6 <uint64_to_hexstr>
    d032:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d034:	9b03      	ldr	r3, [sp, #12]
    d036:	2b00      	cmp	r3, #0
    d038:	d003      	beq.n	d042 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d03a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d03c:	9a03      	ldr	r2, [sp, #12]
    d03e:	4413      	add	r3, r2
    d040:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d044:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d046:	4413      	add	r3, r2
    d048:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d04a:	e135      	b.n	d2b8 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d04c:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d050:	2b00      	cmp	r3, #0
    d052:	d009      	beq.n	d068 <am_util_stdio_vsprintf+0x394>
    d054:	9b01      	ldr	r3, [sp, #4]
    d056:	3307      	adds	r3, #7
    d058:	f023 0307 	bic.w	r3, r3, #7
    d05c:	f103 0208 	add.w	r2, r3, #8
    d060:	9201      	str	r2, [sp, #4]
    d062:	e9d3 6700 	ldrd	r6, r7, [r3]
    d066:	e006      	b.n	d076 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d068:	9b01      	ldr	r3, [sp, #4]
    d06a:	1d1a      	adds	r2, r3, #4
    d06c:	9201      	str	r2, [sp, #4]
    d06e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d070:	2200      	movs	r2, #0
    d072:	461e      	mov	r6, r3
    d074:	4617      	mov	r7, r2
    d076:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d07a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d07c:	2b00      	cmp	r3, #0
    d07e:	d01e      	beq.n	d0be <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d080:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d084:	f7ff fba8 	bl	c7d8 <ndigits_in_u64>
    d088:	4602      	mov	r2, r0
    d08a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d08c:	1a9b      	subs	r3, r3, r2
    d08e:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d090:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d094:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d096:	4619      	mov	r1, r3
    d098:	9803      	ldr	r0, [sp, #12]
    d09a:	f7ff fcfa 	bl	ca92 <padbuffer>
    d09e:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d0a0:	9b03      	ldr	r3, [sp, #12]
    d0a2:	2b00      	cmp	r3, #0
    d0a4:	d001      	beq.n	d0aa <am_util_stdio_vsprintf+0x3d6>
    d0a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0a8:	e000      	b.n	d0ac <am_util_stdio_vsprintf+0x3d8>
    d0aa:	2300      	movs	r3, #0
    d0ac:	9a03      	ldr	r2, [sp, #12]
    d0ae:	4413      	add	r3, r2
    d0b0:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d0b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0b6:	4413      	add	r3, r2
    d0b8:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d0ba:	2300      	movs	r3, #0
    d0bc:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d0be:	9a03      	ldr	r2, [sp, #12]
    d0c0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0c4:	f7ff fc2a 	bl	c91c <uint64_to_str>
    d0c8:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d0ca:	9b03      	ldr	r3, [sp, #12]
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	d003      	beq.n	d0d8 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d0d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0d2:	9a03      	ldr	r2, [sp, #12]
    d0d4:	4413      	add	r3, r2
    d0d6:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d0d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d0da:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0dc:	4413      	add	r3, r2
    d0de:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d0e0:	e0ea      	b.n	d2b8 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d0e2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	d009      	beq.n	d0fe <am_util_stdio_vsprintf+0x42a>
    d0ea:	9b01      	ldr	r3, [sp, #4]
    d0ec:	3307      	adds	r3, #7
    d0ee:	f023 0307 	bic.w	r3, r3, #7
    d0f2:	f103 0208 	add.w	r2, r3, #8
    d0f6:	9201      	str	r2, [sp, #4]
    d0f8:	e9d3 8900 	ldrd	r8, r9, [r3]
    d0fc:	e006      	b.n	d10c <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d0fe:	9b01      	ldr	r3, [sp, #4]
    d100:	1d1a      	adds	r2, r3, #4
    d102:	9201      	str	r2, [sp, #4]
    d104:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d106:	17da      	asrs	r2, r3, #31
    d108:	4698      	mov	r8, r3
    d10a:	4691      	mov	r9, r2
    d10c:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d110:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d114:	2b00      	cmp	r3, #0
    d116:	da0c      	bge.n	d132 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d118:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d11c:	2100      	movs	r1, #0
    d11e:	f1d2 0a00 	rsbs	sl, r2, #0
    d122:	eb61 0b03 	sbc.w	fp, r1, r3
    d126:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d12a:	2301      	movs	r3, #1
    d12c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d130:	e006      	b.n	d140 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d132:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d136:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d13a:	2300      	movs	r3, #0
    d13c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d140:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d142:	2b00      	cmp	r3, #0
    d144:	d04a      	beq.n	d1dc <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d146:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d14a:	4610      	mov	r0, r2
    d14c:	4619      	mov	r1, r3
    d14e:	f7ff fb63 	bl	c818 <ndigits_in_i64>
    d152:	4602      	mov	r2, r0
    d154:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d156:	1a9b      	subs	r3, r3, r2
    d158:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d15a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d15e:	2b00      	cmp	r3, #0
    d160:	d011      	beq.n	d186 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d162:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d164:	3b01      	subs	r3, #1
    d166:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d168:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d16c:	2b30      	cmp	r3, #48	; 0x30
    d16e:	d10a      	bne.n	d186 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d170:	9b03      	ldr	r3, [sp, #12]
    d172:	2b00      	cmp	r3, #0
    d174:	d004      	beq.n	d180 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d176:	9b03      	ldr	r3, [sp, #12]
    d178:	1c5a      	adds	r2, r3, #1
    d17a:	9203      	str	r2, [sp, #12]
    d17c:	222d      	movs	r2, #45	; 0x2d
    d17e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d180:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d182:	3301      	adds	r3, #1
    d184:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d186:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d18a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d18c:	4619      	mov	r1, r3
    d18e:	9803      	ldr	r0, [sp, #12]
    d190:	f7ff fc7f 	bl	ca92 <padbuffer>
    d194:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d196:	9b03      	ldr	r3, [sp, #12]
    d198:	2b00      	cmp	r3, #0
    d19a:	d001      	beq.n	d1a0 <am_util_stdio_vsprintf+0x4cc>
    d19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d19e:	e000      	b.n	d1a2 <am_util_stdio_vsprintf+0x4ce>
    d1a0:	2300      	movs	r3, #0
    d1a2:	9a03      	ldr	r2, [sp, #12]
    d1a4:	4413      	add	r3, r2
    d1a6:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d1a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1ac:	4413      	add	r3, r2
    d1ae:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d1b0:	2300      	movs	r3, #0
    d1b2:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d1b4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d1b8:	2b00      	cmp	r3, #0
    d1ba:	d01e      	beq.n	d1fa <am_util_stdio_vsprintf+0x526>
    d1bc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d1c0:	2b20      	cmp	r3, #32
    d1c2:	d11a      	bne.n	d1fa <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d1c4:	9b03      	ldr	r3, [sp, #12]
    d1c6:	2b00      	cmp	r3, #0
    d1c8:	d004      	beq.n	d1d4 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d1ca:	9b03      	ldr	r3, [sp, #12]
    d1cc:	1c5a      	adds	r2, r3, #1
    d1ce:	9203      	str	r2, [sp, #12]
    d1d0:	222d      	movs	r2, #45	; 0x2d
    d1d2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d1d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1d6:	3301      	adds	r3, #1
    d1d8:	9311      	str	r3, [sp, #68]	; 0x44
    d1da:	e00e      	b.n	d1fa <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d1dc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	d00a      	beq.n	d1fa <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d1e4:	9b03      	ldr	r3, [sp, #12]
    d1e6:	2b00      	cmp	r3, #0
    d1e8:	d004      	beq.n	d1f4 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d1ea:	9b03      	ldr	r3, [sp, #12]
    d1ec:	1c5a      	adds	r2, r3, #1
    d1ee:	9203      	str	r2, [sp, #12]
    d1f0:	222d      	movs	r2, #45	; 0x2d
    d1f2:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d1f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1f6:	3301      	adds	r3, #1
    d1f8:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d1fa:	9a03      	ldr	r2, [sp, #12]
    d1fc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d200:	f7ff fb8c 	bl	c91c <uint64_to_str>
    d204:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d206:	9b03      	ldr	r3, [sp, #12]
    d208:	2b00      	cmp	r3, #0
    d20a:	d003      	beq.n	d214 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d20c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d20e:	9a03      	ldr	r2, [sp, #12]
    d210:	4413      	add	r3, r2
    d212:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d216:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d218:	4413      	add	r3, r2
    d21a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d21c:	e04c      	b.n	d2b8 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d21e:	9b03      	ldr	r3, [sp, #12]
    d220:	2b00      	cmp	r3, #0
    d222:	d048      	beq.n	d2b6 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d224:	9b01      	ldr	r3, [sp, #4]
    d226:	3307      	adds	r3, #7
    d228:	f023 0307 	bic.w	r3, r3, #7
    d22c:	f103 0208 	add.w	r2, r3, #8
    d230:	9201      	str	r2, [sp, #4]
    d232:	e9d3 2300 	ldrd	r2, r3, [r3]
    d236:	4610      	mov	r0, r2
    d238:	4619      	mov	r1, r3
    d23a:	f7fe ff61 	bl	c100 <__aeabi_d2f>
    d23e:	4603      	mov	r3, r0
    d240:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d242:	9b03      	ldr	r3, [sp, #12]
    d244:	2214      	movs	r2, #20
    d246:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d248:	990e      	ldr	r1, [sp, #56]	; 0x38
    d24a:	9803      	ldr	r0, [sp, #12]
    d24c:	ed9d 0a06 	vldr	s0, [sp, #24]
    d250:	f7ff fc42 	bl	cad8 <ftoa>
    d254:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d258:	2b00      	cmp	r3, #0
    d25a:	da14      	bge.n	d286 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d25e:	f1b3 3fff 	cmp.w	r3, #4294967295
    d262:	d102      	bne.n	d26a <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d264:	4b1e      	ldr	r3, [pc, #120]	; (d2e0 <am_util_stdio_vsprintf+0x60c>)
    d266:	930c      	str	r3, [sp, #48]	; 0x30
    d268:	e008      	b.n	d27c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d26a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d26c:	f113 0f02 	cmn.w	r3, #2
    d270:	d102      	bne.n	d278 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d272:	4b1c      	ldr	r3, [pc, #112]	; (d2e4 <am_util_stdio_vsprintf+0x610>)
    d274:	930c      	str	r3, [sp, #48]	; 0x30
    d276:	e001      	b.n	d27c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d278:	4b1b      	ldr	r3, [pc, #108]	; (d2e8 <am_util_stdio_vsprintf+0x614>)
    d27a:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d27c:	9b03      	ldr	r3, [sp, #12]
    d27e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d280:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d282:	2303      	movs	r3, #3
    d284:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d288:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d28a:	4413      	add	r3, r2
    d28c:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d28e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d290:	9a03      	ldr	r2, [sp, #12]
    d292:	4413      	add	r3, r2
    d294:	9303      	str	r3, [sp, #12]
                }
                break;
    d296:	e00e      	b.n	d2b6 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d298:	9b03      	ldr	r3, [sp, #12]
    d29a:	2b00      	cmp	r3, #0
    d29c:	d005      	beq.n	d2aa <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d29e:	9b03      	ldr	r3, [sp, #12]
    d2a0:	1c5a      	adds	r2, r3, #1
    d2a2:	9203      	str	r2, [sp, #12]
    d2a4:	9a02      	ldr	r2, [sp, #8]
    d2a6:	7812      	ldrb	r2, [r2, #0]
    d2a8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d2aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2ac:	3301      	adds	r3, #1
    d2ae:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d2b0:	e002      	b.n	d2b8 <am_util_stdio_vsprintf+0x5e4>
                break;
    d2b2:	bf00      	nop
    d2b4:	e000      	b.n	d2b8 <am_util_stdio_vsprintf+0x5e4>
                break;
    d2b6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d2b8:	9b02      	ldr	r3, [sp, #8]
    d2ba:	3301      	adds	r3, #1
    d2bc:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d2be:	9b02      	ldr	r3, [sp, #8]
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	2b00      	cmp	r3, #0
    d2c4:	f47f ad11 	bne.w	ccea <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d2c8:	9b03      	ldr	r3, [sp, #12]
    d2ca:	2b00      	cmp	r3, #0
    d2cc:	d002      	beq.n	d2d4 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d2ce:	9b03      	ldr	r3, [sp, #12]
    d2d0:	2200      	movs	r2, #0
    d2d2:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d2d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d2d6:	4618      	mov	r0, r3
    d2d8:	b017      	add	sp, #92	; 0x5c
    d2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2de:	bf00      	nop
    d2e0:	00302e30 	.word	0x00302e30
    d2e4:	00232e23 	.word	0x00232e23
    d2e8:	003f2e3f 	.word	0x003f2e3f

0000d2ec <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d2ec:	b40f      	push	{r0, r1, r2, r3}
    d2ee:	b500      	push	{lr}
    d2f0:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d2f2:	4b0c      	ldr	r3, [pc, #48]	; (d324 <am_util_stdio_printf+0x38>)
    d2f4:	681b      	ldr	r3, [r3, #0]
    d2f6:	2b00      	cmp	r3, #0
    d2f8:	d101      	bne.n	d2fe <am_util_stdio_printf+0x12>
    {
        return 0;
    d2fa:	2300      	movs	r3, #0
    d2fc:	e00c      	b.n	d318 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d2fe:	ab05      	add	r3, sp, #20
    d300:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d302:	9a00      	ldr	r2, [sp, #0]
    d304:	9904      	ldr	r1, [sp, #16]
    d306:	4808      	ldr	r0, [pc, #32]	; (d328 <am_util_stdio_printf+0x3c>)
    d308:	f7ff fce4 	bl	ccd4 <am_util_stdio_vsprintf>
    d30c:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d30e:	4b05      	ldr	r3, [pc, #20]	; (d324 <am_util_stdio_printf+0x38>)
    d310:	681b      	ldr	r3, [r3, #0]
    d312:	4805      	ldr	r0, [pc, #20]	; (d328 <am_util_stdio_printf+0x3c>)
    d314:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d316:	9b01      	ldr	r3, [sp, #4]
}
    d318:	4618      	mov	r0, r3
    d31a:	b003      	add	sp, #12
    d31c:	f85d eb04 	ldr.w	lr, [sp], #4
    d320:	b004      	add	sp, #16
    d322:	4770      	bx	lr
    d324:	1000106c 	.word	0x1000106c
    d328:	10001070 	.word	0x10001070

0000d32c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d32c:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d32e:	4802      	ldr	r0, [pc, #8]	; (d338 <am_util_stdio_terminal_clear+0xc>)
    d330:	f7ff ffdc 	bl	d2ec <am_util_stdio_printf>
}
    d334:	bf00      	nop
    d336:	bd08      	pop	{r3, pc}
    d338:	0000ee7c 	.word	0x0000ee7c

0000d33c <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d33c:	4811      	ldr	r0, [pc, #68]	; (d384 <zero_loop+0x12>)
    d33e:	4912      	ldr	r1, [pc, #72]	; (d388 <zero_loop+0x16>)
    d340:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d342:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d346:	4811      	ldr	r0, [pc, #68]	; (d38c <zero_loop+0x1a>)
    d348:	6801      	ldr	r1, [r0, #0]
    d34a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d34e:	6001      	str	r1, [r0, #0]
    d350:	f3bf 8f4f 	dsb	sy
    d354:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d358:	480d      	ldr	r0, [pc, #52]	; (d390 <zero_loop+0x1e>)
    d35a:	490e      	ldr	r1, [pc, #56]	; (d394 <zero_loop+0x22>)
    d35c:	4a0e      	ldr	r2, [pc, #56]	; (d398 <zero_loop+0x26>)

0000d35e <copy_loop>:
    d35e:	f850 3b04 	ldr.w	r3, [r0], #4
    d362:	f841 3b04 	str.w	r3, [r1], #4
    d366:	4291      	cmp	r1, r2
    d368:	dbf9      	blt.n	d35e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d36a:	480c      	ldr	r0, [pc, #48]	; (d39c <zero_loop+0x2a>)
    d36c:	490c      	ldr	r1, [pc, #48]	; (d3a0 <zero_loop+0x2e>)
    d36e:	f04f 0200 	mov.w	r2, #0

0000d372 <zero_loop>:
    d372:	4288      	cmp	r0, r1
    d374:	bfb8      	it	lt
    d376:	f840 2b04 	strlt.w	r2, [r0], #4
    d37a:	dbfa      	blt.n	d372 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d37c:	f7fe ff50 	bl	c220 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d380:	be00      	bkpt	0x0000
}
    d382:	bf00      	nop
    d384:	e000ed08 	.word	0xe000ed08
    d388:	0000c000 	.word	0x0000c000
    d38c:	e000ed88 	.word	0xe000ed88
    d390:	0000f17c 	.word	0x0000f17c
    d394:	10001000 	.word	0x10001000
    d398:	10001064 	.word	0x10001064
    d39c:	10001064 	.word	0x10001064
    d3a0:	10001a4c 	.word	0x10001a4c

0000d3a4 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d3a4:	e7fe      	b.n	d3a4 <NMI_Handler>

0000d3a6 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d3a6:	e7fe      	b.n	d3a6 <BusFault_Handler>

0000d3a8 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d3a8:	e7fe      	b.n	d3a8 <DebugMon_Handler>
	...

0000d3ac <am_bsp_uart_string_print>:
    d3ac:	b530      	push	{r4, r5, lr}
    d3ae:	b087      	sub	sp, #28
    d3b0:	7804      	ldrb	r4, [r0, #0]
    d3b2:	2300      	movs	r3, #0
    d3b4:	4605      	mov	r5, r0
    d3b6:	9300      	str	r3, [sp, #0]
    d3b8:	b13c      	cbz	r4, d3ca <am_bsp_uart_string_print+0x1e>
    d3ba:	4603      	mov	r3, r0
    d3bc:	f1c0 0101 	rsb	r1, r0, #1
    d3c0:	18cc      	adds	r4, r1, r3
    d3c2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d3c6:	2a00      	cmp	r2, #0
    d3c8:	d1fa      	bne.n	d3c0 <am_bsp_uart_string_print+0x14>
    d3ca:	4b0a      	ldr	r3, [pc, #40]	; (d3f4 <am_bsp_uart_string_print+0x48>)
    d3cc:	f8cd d014 	str.w	sp, [sp, #20]
    d3d0:	6818      	ldr	r0, [r3, #0]
    d3d2:	2200      	movs	r2, #0
    d3d4:	f04f 33ff 	mov.w	r3, #4294967295
    d3d8:	a901      	add	r1, sp, #4
    d3da:	e9cd 4303 	strd	r4, r3, [sp, #12]
    d3de:	e9cd 2501 	strd	r2, r5, [sp, #4]
    d3e2:	f001 fa2f 	bl	e844 <am_hal_uart_transfer>
    d3e6:	9b00      	ldr	r3, [sp, #0]
    d3e8:	42a3      	cmp	r3, r4
    d3ea:	d000      	beq.n	d3ee <am_bsp_uart_string_print+0x42>
    d3ec:	e7fe      	b.n	d3ec <am_bsp_uart_string_print+0x40>
    d3ee:	b007      	add	sp, #28
    d3f0:	bd30      	pop	{r4, r5, pc}
    d3f2:	bf00      	nop
    d3f4:	10001174 	.word	0x10001174

0000d3f8 <am_bsp_low_power_init>:
    d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3fa:	f000 fea7 	bl	e14c <am_hal_pwrctrl_low_power_init>
    d3fe:	f000 ffdd 	bl	e3bc <am_hal_rtc_osc_disable>
    d402:	4b0b      	ldr	r3, [pc, #44]	; (d430 <am_bsp_low_power_init+0x38>)
    d404:	4f0b      	ldr	r7, [pc, #44]	; (d434 <am_bsp_low_power_init+0x3c>)
    d406:	681e      	ldr	r6, [r3, #0]
    d408:	2400      	movs	r4, #0
    d40a:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d40e:	4631      	mov	r1, r6
    d410:	4628      	mov	r0, r5
    d412:	f000 fb8d 	bl	db30 <am_hal_gpio_pinconfig>
    d416:	2103      	movs	r1, #3
    d418:	4628      	mov	r0, r5
    d41a:	f000 fcbf 	bl	dd9c <am_hal_gpio_state_write>
    d41e:	3401      	adds	r4, #1
    d420:	2100      	movs	r1, #0
    d422:	4628      	mov	r0, r5
    d424:	f000 fcba 	bl	dd9c <am_hal_gpio_state_write>
    d428:	2c05      	cmp	r4, #5
    d42a:	d1ee      	bne.n	d40a <am_bsp_low_power_init+0x12>
    d42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d42e:	bf00      	nop
    d430:	0000eecc 	.word	0x0000eecc
    d434:	10001008 	.word	0x10001008

0000d438 <am_bsp_debug_printf_enable>:
    d438:	b510      	push	{r4, lr}
    d43a:	4a2e      	ldr	r2, [pc, #184]	; (d4f4 <am_bsp_debug_printf_enable+0xbc>)
    d43c:	6813      	ldr	r3, [r2, #0]
    d43e:	2b01      	cmp	r3, #1
    d440:	b086      	sub	sp, #24
    d442:	d005      	beq.n	d450 <am_bsp_debug_printf_enable+0x18>
    d444:	2b02      	cmp	r3, #2
    d446:	d014      	beq.n	d472 <am_bsp_debug_printf_enable+0x3a>
    d448:	2b03      	cmp	r3, #3
    d44a:	d030      	beq.n	d4ae <am_bsp_debug_printf_enable+0x76>
    d44c:	b006      	add	sp, #24
    d44e:	bd10      	pop	{r4, pc}
    d450:	f000 fcf4 	bl	de3c <am_hal_itm_enable>
    d454:	4b28      	ldr	r3, [pc, #160]	; (d4f8 <am_bsp_debug_printf_enable+0xc0>)
    d456:	9301      	str	r3, [sp, #4]
    d458:	a801      	add	r0, sp, #4
    d45a:	f000 fff1 	bl	e440 <am_hal_tpiu_enable>
    d45e:	4b27      	ldr	r3, [pc, #156]	; (d4fc <am_bsp_debug_printf_enable+0xc4>)
    d460:	2029      	movs	r0, #41	; 0x29
    d462:	6819      	ldr	r1, [r3, #0]
    d464:	f000 fb64 	bl	db30 <am_hal_gpio_pinconfig>
    d468:	4825      	ldr	r0, [pc, #148]	; (d500 <am_bsp_debug_printf_enable+0xc8>)
    d46a:	f7ff f8b7 	bl	c5dc <am_util_stdio_printf_init>
    d46e:	b006      	add	sp, #24
    d470:	bd10      	pop	{r4, pc}
    d472:	4c24      	ldr	r4, [pc, #144]	; (d504 <am_bsp_debug_printf_enable+0xcc>)
    d474:	2000      	movs	r0, #0
    d476:	4621      	mov	r1, r4
    d478:	f001 f832 	bl	e4e0 <am_hal_uart_initialize>
    d47c:	2200      	movs	r2, #0
    d47e:	4611      	mov	r1, r2
    d480:	6820      	ldr	r0, [r4, #0]
    d482:	f001 f869 	bl	e558 <am_hal_uart_power_control>
    d486:	4920      	ldr	r1, [pc, #128]	; (d508 <am_bsp_debug_printf_enable+0xd0>)
    d488:	6820      	ldr	r0, [r4, #0]
    d48a:	f001 f8dd 	bl	e648 <am_hal_uart_configure>
    d48e:	4b1f      	ldr	r3, [pc, #124]	; (d50c <am_bsp_debug_printf_enable+0xd4>)
    d490:	2016      	movs	r0, #22
    d492:	6819      	ldr	r1, [r3, #0]
    d494:	f000 fb4c 	bl	db30 <am_hal_gpio_pinconfig>
    d498:	4b1d      	ldr	r3, [pc, #116]	; (d510 <am_bsp_debug_printf_enable+0xd8>)
    d49a:	2017      	movs	r0, #23
    d49c:	6819      	ldr	r1, [r3, #0]
    d49e:	f000 fb47 	bl	db30 <am_hal_gpio_pinconfig>
    d4a2:	481c      	ldr	r0, [pc, #112]	; (d514 <am_bsp_debug_printf_enable+0xdc>)
    d4a4:	b006      	add	sp, #24
    d4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d4aa:	f7ff b897 	b.w	c5dc <am_util_stdio_printf_init>
    d4ae:	4c15      	ldr	r4, [pc, #84]	; (d504 <am_bsp_debug_printf_enable+0xcc>)
    d4b0:	2302      	movs	r3, #2
    d4b2:	4621      	mov	r1, r4
    d4b4:	2000      	movs	r0, #0
    d4b6:	6013      	str	r3, [r2, #0]
    d4b8:	f001 f812 	bl	e4e0 <am_hal_uart_initialize>
    d4bc:	2200      	movs	r2, #0
    d4be:	4611      	mov	r1, r2
    d4c0:	6820      	ldr	r0, [r4, #0]
    d4c2:	f001 f849 	bl	e558 <am_hal_uart_power_control>
    d4c6:	4914      	ldr	r1, [pc, #80]	; (d518 <am_bsp_debug_printf_enable+0xe0>)
    d4c8:	6820      	ldr	r0, [r4, #0]
    d4ca:	f001 f8bd 	bl	e648 <am_hal_uart_configure>
    d4ce:	4b0f      	ldr	r3, [pc, #60]	; (d50c <am_bsp_debug_printf_enable+0xd4>)
    d4d0:	2016      	movs	r0, #22
    d4d2:	6819      	ldr	r1, [r3, #0]
    d4d4:	f000 fb2c 	bl	db30 <am_hal_gpio_pinconfig>
    d4d8:	4b0d      	ldr	r3, [pc, #52]	; (d510 <am_bsp_debug_printf_enable+0xd8>)
    d4da:	2017      	movs	r0, #23
    d4dc:	6819      	ldr	r1, [r3, #0]
    d4de:	f000 fb27 	bl	db30 <am_hal_gpio_pinconfig>
    d4e2:	480c      	ldr	r0, [pc, #48]	; (d514 <am_bsp_debug_printf_enable+0xdc>)
    d4e4:	f7ff f87a 	bl	c5dc <am_util_stdio_printf_init>
    d4e8:	4b0c      	ldr	r3, [pc, #48]	; (d51c <am_bsp_debug_printf_enable+0xe4>)
    d4ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    d4ee:	601a      	str	r2, [r3, #0]
    d4f0:	b006      	add	sp, #24
    d4f2:	bd10      	pop	{r4, pc}
    d4f4:	10001178 	.word	0x10001178
    d4f8:	000f4240 	.word	0x000f4240
    d4fc:	0000eec0 	.word	0x0000eec0
    d500:	0000df39 	.word	0x0000df39
    d504:	10001174 	.word	0x10001174
    d508:	0000ee90 	.word	0x0000ee90
    d50c:	0000eebc 	.word	0x0000eebc
    d510:	0000eeb8 	.word	0x0000eeb8
    d514:	0000d3ad 	.word	0x0000d3ad
    d518:	10001030 	.word	0x10001030
    d51c:	e000e100 	.word	0xe000e100

0000d520 <am_bsp_debug_printf_disable>:
    d520:	b538      	push	{r3, r4, r5, lr}
    d522:	4b17      	ldr	r3, [pc, #92]	; (d580 <am_bsp_debug_printf_disable+0x60>)
    d524:	681c      	ldr	r4, [r3, #0]
    d526:	2c01      	cmp	r4, #1
    d528:	d002      	beq.n	d530 <am_bsp_debug_printf_disable+0x10>
    d52a:	2c02      	cmp	r4, #2
    d52c:	d00c      	beq.n	d548 <am_bsp_debug_printf_disable+0x28>
    d52e:	bd38      	pop	{r3, r4, r5, pc}
    d530:	f000 fca8 	bl	de84 <am_hal_itm_disable>
    d534:	2000      	movs	r0, #0
    d536:	f7ff f851 	bl	c5dc <am_util_stdio_printf_init>
    d53a:	4b12      	ldr	r3, [pc, #72]	; (d584 <am_bsp_debug_printf_disable+0x64>)
    d53c:	2029      	movs	r0, #41	; 0x29
    d53e:	6819      	ldr	r1, [r3, #0]
    d540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d544:	f000 baf4 	b.w	db30 <am_hal_gpio_pinconfig>
    d548:	4d0f      	ldr	r5, [pc, #60]	; (d588 <am_bsp_debug_printf_disable+0x68>)
    d54a:	6828      	ldr	r0, [r5, #0]
    d54c:	f001 fb7a 	bl	ec44 <am_hal_uart_tx_flush>
    d550:	2000      	movs	r0, #0
    d552:	f7ff f843 	bl	c5dc <am_util_stdio_printf_init>
    d556:	4621      	mov	r1, r4
    d558:	2200      	movs	r2, #0
    d55a:	6828      	ldr	r0, [r5, #0]
    d55c:	f000 fffc 	bl	e558 <am_hal_uart_power_control>
    d560:	6828      	ldr	r0, [r5, #0]
    d562:	f000 ffe5 	bl	e530 <am_hal_uart_deinitialize>
    d566:	4b07      	ldr	r3, [pc, #28]	; (d584 <am_bsp_debug_printf_disable+0x64>)
    d568:	681c      	ldr	r4, [r3, #0]
    d56a:	2016      	movs	r0, #22
    d56c:	4621      	mov	r1, r4
    d56e:	f000 fadf 	bl	db30 <am_hal_gpio_pinconfig>
    d572:	4621      	mov	r1, r4
    d574:	2017      	movs	r0, #23
    d576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d57a:	f000 bad9 	b.w	db30 <am_hal_gpio_pinconfig>
    d57e:	bf00      	nop
    d580:	10001178 	.word	0x10001178
    d584:	0000eec8 	.word	0x0000eec8
    d588:	10001174 	.word	0x10001174

0000d58c <am_bsp_itm_printf_enable>:
    d58c:	b500      	push	{lr}
    d58e:	4b0b      	ldr	r3, [pc, #44]	; (d5bc <am_bsp_itm_printf_enable+0x30>)
    d590:	b087      	sub	sp, #28
    d592:	2201      	movs	r2, #1
    d594:	601a      	str	r2, [r3, #0]
    d596:	f000 fc51 	bl	de3c <am_hal_itm_enable>
    d59a:	4b09      	ldr	r3, [pc, #36]	; (d5c0 <am_bsp_itm_printf_enable+0x34>)
    d59c:	9301      	str	r3, [sp, #4]
    d59e:	a801      	add	r0, sp, #4
    d5a0:	f000 ff4e 	bl	e440 <am_hal_tpiu_enable>
    d5a4:	4b07      	ldr	r3, [pc, #28]	; (d5c4 <am_bsp_itm_printf_enable+0x38>)
    d5a6:	2029      	movs	r0, #41	; 0x29
    d5a8:	6819      	ldr	r1, [r3, #0]
    d5aa:	f000 fac1 	bl	db30 <am_hal_gpio_pinconfig>
    d5ae:	4806      	ldr	r0, [pc, #24]	; (d5c8 <am_bsp_itm_printf_enable+0x3c>)
    d5b0:	f7ff f814 	bl	c5dc <am_util_stdio_printf_init>
    d5b4:	b007      	add	sp, #28
    d5b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ba:	bf00      	nop
    d5bc:	10001178 	.word	0x10001178
    d5c0:	000f4240 	.word	0x000f4240
    d5c4:	0000eec0 	.word	0x0000eec0
    d5c8:	0000df39 	.word	0x0000df39

0000d5cc <am_hal_cachectrl_config>:
    d5cc:	b530      	push	{r4, r5, lr}
    d5ce:	b083      	sub	sp, #12
    d5d0:	4604      	mov	r4, r0
    d5d2:	f000 fc2b 	bl	de2c <am_hal_interrupt_master_disable>
    d5d6:	4d0e      	ldr	r5, [pc, #56]	; (d610 <am_hal_cachectrl_config+0x44>)
    d5d8:	9001      	str	r0, [sp, #4]
    d5da:	682b      	ldr	r3, [r5, #0]
    d5dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d5e0:	602b      	str	r3, [r5, #0]
    d5e2:	9801      	ldr	r0, [sp, #4]
    d5e4:	f000 fc26 	bl	de34 <am_hal_interrupt_master_set>
    d5e8:	7863      	ldrb	r3, [r4, #1]
    d5ea:	7822      	ldrb	r2, [r4, #0]
    d5ec:	78a1      	ldrb	r1, [r4, #2]
    d5ee:	021b      	lsls	r3, r3, #8
    d5f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d5f4:	0112      	lsls	r2, r2, #4
    d5f6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d5fa:	b2d2      	uxtb	r2, r2
    d5fc:	4313      	orrs	r3, r2
    d5fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d606:	2000      	movs	r0, #0
    d608:	602b      	str	r3, [r5, #0]
    d60a:	b003      	add	sp, #12
    d60c:	bd30      	pop	{r4, r5, pc}
    d60e:	bf00      	nop
    d610:	40018000 	.word	0x40018000

0000d614 <am_hal_cachectrl_enable>:
    d614:	4a03      	ldr	r2, [pc, #12]	; (d624 <am_hal_cachectrl_enable+0x10>)
    d616:	6813      	ldr	r3, [r2, #0]
    d618:	f043 0301 	orr.w	r3, r3, #1
    d61c:	2000      	movs	r0, #0
    d61e:	6013      	str	r3, [r2, #0]
    d620:	4770      	bx	lr
    d622:	bf00      	nop
    d624:	40018000 	.word	0x40018000

0000d628 <am_hal_cachectrl_control>:
    d628:	b510      	push	{r4, lr}
    d62a:	3801      	subs	r0, #1
    d62c:	b08e      	sub	sp, #56	; 0x38
    d62e:	2810      	cmp	r0, #16
    d630:	f200 815e 	bhi.w	d8f0 <am_hal_cachectrl_control+0x2c8>
    d634:	e8df f010 	tbh	[pc, r0, lsl #1]
    d638:	00360018 	.word	0x00360018
    d63c:	0040003d 	.word	0x0040003d
    d640:	00450043 	.word	0x00450043
    d644:	0011001a 	.word	0x0011001a
    d648:	00540047 	.word	0x00540047
    d64c:	009a0061 	.word	0x009a0061
    d650:	010c00d3 	.word	0x010c00d3
    d654:	013f0126 	.word	0x013f0126
    d658:	001d      	.short	0x001d
    d65a:	f44f 7300 	mov.w	r3, #512	; 0x200
    d65e:	4aac      	ldr	r2, [pc, #688]	; (d910 <am_hal_cachectrl_control+0x2e8>)
    d660:	2000      	movs	r0, #0
    d662:	6093      	str	r3, [r2, #8]
    d664:	b00e      	add	sp, #56	; 0x38
    d666:	bd10      	pop	{r4, pc}
    d668:	2301      	movs	r3, #1
    d66a:	e7f8      	b.n	d65e <am_hal_cachectrl_control+0x36>
    d66c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d670:	e7f5      	b.n	d65e <am_hal_cachectrl_control+0x36>
    d672:	2900      	cmp	r1, #0
    d674:	f000 813c 	beq.w	d8f0 <am_hal_cachectrl_control+0x2c8>
    d678:	684a      	ldr	r2, [r1, #4]
    d67a:	48a6      	ldr	r0, [pc, #664]	; (d914 <am_hal_cachectrl_control+0x2ec>)
    d67c:	4202      	tst	r2, r0
    d67e:	f040 8137 	bne.w	d8f0 <am_hal_cachectrl_control+0x2c8>
    d682:	688b      	ldr	r3, [r1, #8]
    d684:	4018      	ands	r0, r3
    d686:	f040 8133 	bne.w	d8f0 <am_hal_cachectrl_control+0x2c8>
    d68a:	780c      	ldrb	r4, [r1, #0]
    d68c:	2c00      	cmp	r4, #0
    d68e:	f040 8133 	bne.w	d8f8 <am_hal_cachectrl_control+0x2d0>
    d692:	4c9f      	ldr	r4, [pc, #636]	; (d910 <am_hal_cachectrl_control+0x2e8>)
    d694:	7849      	ldrb	r1, [r1, #1]
    d696:	6122      	str	r2, [r4, #16]
    d698:	6163      	str	r3, [r4, #20]
    d69a:	6823      	ldr	r3, [r4, #0]
    d69c:	f361 0382 	bfi	r3, r1, #2, #1
    d6a0:	6023      	str	r3, [r4, #0]
    d6a2:	e7df      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d6a4:	4b9a      	ldr	r3, [pc, #616]	; (d910 <am_hal_cachectrl_control+0x2e8>)
    d6a6:	681b      	ldr	r3, [r3, #0]
    d6a8:	01db      	lsls	r3, r3, #7
    d6aa:	f140 811f 	bpl.w	d8ec <am_hal_cachectrl_control+0x2c4>
    d6ae:	2302      	movs	r3, #2
    d6b0:	e7d5      	b.n	d65e <am_hal_cachectrl_control+0x36>
    d6b2:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d6b6:	e7d2      	b.n	d65e <am_hal_cachectrl_control+0x36>
    d6b8:	f44f 7308 	mov.w	r3, #544	; 0x220
    d6bc:	e7cf      	b.n	d65e <am_hal_cachectrl_control+0x36>
    d6be:	2340      	movs	r3, #64	; 0x40
    d6c0:	e7cd      	b.n	d65e <am_hal_cachectrl_control+0x36>
    d6c2:	2320      	movs	r3, #32
    d6c4:	e7cb      	b.n	d65e <am_hal_cachectrl_control+0x36>
    d6c6:	f000 fbb1 	bl	de2c <am_hal_interrupt_master_disable>
    d6ca:	4a91      	ldr	r2, [pc, #580]	; (d910 <am_hal_cachectrl_control+0x2e8>)
    d6cc:	9000      	str	r0, [sp, #0]
    d6ce:	6813      	ldr	r3, [r2, #0]
    d6d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d6d4:	6013      	str	r3, [r2, #0]
    d6d6:	9800      	ldr	r0, [sp, #0]
    d6d8:	f000 fbac 	bl	de34 <am_hal_interrupt_master_set>
    d6dc:	2000      	movs	r0, #0
    d6de:	e7c1      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d6e0:	f000 fba4 	bl	de2c <am_hal_interrupt_master_disable>
    d6e4:	4a8a      	ldr	r2, [pc, #552]	; (d910 <am_hal_cachectrl_control+0x2e8>)
    d6e6:	9001      	str	r0, [sp, #4]
    d6e8:	6813      	ldr	r3, [r2, #0]
    d6ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d6ee:	6013      	str	r3, [r2, #0]
    d6f0:	9801      	ldr	r0, [sp, #4]
    d6f2:	f000 fb9f 	bl	de34 <am_hal_interrupt_master_set>
    d6f6:	2000      	movs	r0, #0
    d6f8:	e7b4      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d6fa:	f000 fb97 	bl	de2c <am_hal_interrupt_master_disable>
    d6fe:	4603      	mov	r3, r0
    d700:	4885      	ldr	r0, [pc, #532]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d702:	9302      	str	r3, [sp, #8]
    d704:	f000 fa0a 	bl	db1c <am_hal_flash_load_ui32>
    d708:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d70c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d710:	4881      	ldr	r0, [pc, #516]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d712:	f000 fa07 	bl	db24 <am_hal_flash_store_ui32>
    d716:	9802      	ldr	r0, [sp, #8]
    d718:	f000 fb8c 	bl	de34 <am_hal_interrupt_master_set>
    d71c:	f000 fb86 	bl	de2c <am_hal_interrupt_master_disable>
    d720:	4603      	mov	r3, r0
    d722:	487d      	ldr	r0, [pc, #500]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d724:	9303      	str	r3, [sp, #12]
    d726:	f000 f9f9 	bl	db1c <am_hal_flash_load_ui32>
    d72a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d72e:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d732:	4879      	ldr	r0, [pc, #484]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d734:	f000 f9f6 	bl	db24 <am_hal_flash_store_ui32>
    d738:	9803      	ldr	r0, [sp, #12]
    d73a:	f000 fb7b 	bl	de34 <am_hal_interrupt_master_set>
    d73e:	f000 fb75 	bl	de2c <am_hal_interrupt_master_disable>
    d742:	4603      	mov	r3, r0
    d744:	4874      	ldr	r0, [pc, #464]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d746:	9304      	str	r3, [sp, #16]
    d748:	f000 f9e8 	bl	db1c <am_hal_flash_load_ui32>
    d74c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d750:	f020 000f 	bic.w	r0, r0, #15
    d754:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d758:	f041 0103 	orr.w	r1, r1, #3
    d75c:	486e      	ldr	r0, [pc, #440]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d75e:	f000 f9e1 	bl	db24 <am_hal_flash_store_ui32>
    d762:	9804      	ldr	r0, [sp, #16]
    d764:	f000 fb66 	bl	de34 <am_hal_interrupt_master_set>
    d768:	2000      	movs	r0, #0
    d76a:	e77b      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d76c:	f000 fb5e 	bl	de2c <am_hal_interrupt_master_disable>
    d770:	4603      	mov	r3, r0
    d772:	4869      	ldr	r0, [pc, #420]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d774:	9305      	str	r3, [sp, #20]
    d776:	f000 f9d1 	bl	db1c <am_hal_flash_load_ui32>
    d77a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d77e:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d782:	4865      	ldr	r0, [pc, #404]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d784:	f000 f9ce 	bl	db24 <am_hal_flash_store_ui32>
    d788:	9805      	ldr	r0, [sp, #20]
    d78a:	f000 fb53 	bl	de34 <am_hal_interrupt_master_set>
    d78e:	f000 fb4d 	bl	de2c <am_hal_interrupt_master_disable>
    d792:	4603      	mov	r3, r0
    d794:	4860      	ldr	r0, [pc, #384]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d796:	9306      	str	r3, [sp, #24]
    d798:	f000 f9c0 	bl	db1c <am_hal_flash_load_ui32>
    d79c:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d7a0:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d7a4:	485c      	ldr	r0, [pc, #368]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d7a6:	f000 f9bd 	bl	db24 <am_hal_flash_store_ui32>
    d7aa:	9806      	ldr	r0, [sp, #24]
    d7ac:	f000 fb42 	bl	de34 <am_hal_interrupt_master_set>
    d7b0:	f000 fb3c 	bl	de2c <am_hal_interrupt_master_disable>
    d7b4:	4603      	mov	r3, r0
    d7b6:	4858      	ldr	r0, [pc, #352]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d7b8:	9307      	str	r3, [sp, #28]
    d7ba:	f000 f9af 	bl	db1c <am_hal_flash_load_ui32>
    d7be:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d7c2:	f020 000f 	bic.w	r0, r0, #15
    d7c6:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d7ca:	f041 0101 	orr.w	r1, r1, #1
    d7ce:	4852      	ldr	r0, [pc, #328]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d7d0:	f000 f9a8 	bl	db24 <am_hal_flash_store_ui32>
    d7d4:	9807      	ldr	r0, [sp, #28]
    d7d6:	f000 fb2d 	bl	de34 <am_hal_interrupt_master_set>
    d7da:	2000      	movs	r0, #0
    d7dc:	e742      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d7de:	f000 fb25 	bl	de2c <am_hal_interrupt_master_disable>
    d7e2:	4603      	mov	r3, r0
    d7e4:	484c      	ldr	r0, [pc, #304]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d7e6:	9308      	str	r3, [sp, #32]
    d7e8:	f000 f998 	bl	db1c <am_hal_flash_load_ui32>
    d7ec:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d7f0:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d7f4:	4848      	ldr	r0, [pc, #288]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d7f6:	f000 f995 	bl	db24 <am_hal_flash_store_ui32>
    d7fa:	9808      	ldr	r0, [sp, #32]
    d7fc:	f000 fb1a 	bl	de34 <am_hal_interrupt_master_set>
    d800:	f000 fb14 	bl	de2c <am_hal_interrupt_master_disable>
    d804:	4603      	mov	r3, r0
    d806:	4844      	ldr	r0, [pc, #272]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d808:	9309      	str	r3, [sp, #36]	; 0x24
    d80a:	f000 f987 	bl	db1c <am_hal_flash_load_ui32>
    d80e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d812:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d816:	4840      	ldr	r0, [pc, #256]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d818:	f000 f984 	bl	db24 <am_hal_flash_store_ui32>
    d81c:	9809      	ldr	r0, [sp, #36]	; 0x24
    d81e:	f000 fb09 	bl	de34 <am_hal_interrupt_master_set>
    d822:	f000 fb03 	bl	de2c <am_hal_interrupt_master_disable>
    d826:	4603      	mov	r3, r0
    d828:	483b      	ldr	r0, [pc, #236]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d82a:	930a      	str	r3, [sp, #40]	; 0x28
    d82c:	f000 f976 	bl	db1c <am_hal_flash_load_ui32>
    d830:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d834:	f020 000f 	bic.w	r0, r0, #15
    d838:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d83c:	f041 0101 	orr.w	r1, r1, #1
    d840:	4835      	ldr	r0, [pc, #212]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d842:	f000 f96f 	bl	db24 <am_hal_flash_store_ui32>
    d846:	980a      	ldr	r0, [sp, #40]	; 0x28
    d848:	f000 faf4 	bl	de34 <am_hal_interrupt_master_set>
    d84c:	2000      	movs	r0, #0
    d84e:	e709      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d850:	2900      	cmp	r1, #0
    d852:	d04d      	beq.n	d8f0 <am_hal_cachectrl_control+0x2c8>
    d854:	680c      	ldr	r4, [r1, #0]
    d856:	2c03      	cmp	r4, #3
    d858:	d84c      	bhi.n	d8f4 <am_hal_cachectrl_control+0x2cc>
    d85a:	f000 fae7 	bl	de2c <am_hal_interrupt_master_disable>
    d85e:	4603      	mov	r3, r0
    d860:	482d      	ldr	r0, [pc, #180]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d862:	930b      	str	r3, [sp, #44]	; 0x2c
    d864:	f000 f95a 	bl	db1c <am_hal_flash_load_ui32>
    d868:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d86c:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d870:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d874:	4828      	ldr	r0, [pc, #160]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d876:	f000 f955 	bl	db24 <am_hal_flash_store_ui32>
    d87a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d87c:	f000 fada 	bl	de34 <am_hal_interrupt_master_set>
    d880:	2000      	movs	r0, #0
    d882:	e6ef      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d884:	b3a1      	cbz	r1, d8f0 <am_hal_cachectrl_control+0x2c8>
    d886:	680c      	ldr	r4, [r1, #0]
    d888:	2c07      	cmp	r4, #7
    d88a:	d833      	bhi.n	d8f4 <am_hal_cachectrl_control+0x2cc>
    d88c:	f000 face 	bl	de2c <am_hal_interrupt_master_disable>
    d890:	4603      	mov	r3, r0
    d892:	4821      	ldr	r0, [pc, #132]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d894:	930c      	str	r3, [sp, #48]	; 0x30
    d896:	f000 f941 	bl	db1c <am_hal_flash_load_ui32>
    d89a:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d89e:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d8a2:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d8a6:	481c      	ldr	r0, [pc, #112]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d8a8:	f000 f93c 	bl	db24 <am_hal_flash_store_ui32>
    d8ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    d8ae:	f000 fac1 	bl	de34 <am_hal_interrupt_master_set>
    d8b2:	2000      	movs	r0, #0
    d8b4:	e6d6      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d8b6:	b1d9      	cbz	r1, d8f0 <am_hal_cachectrl_control+0x2c8>
    d8b8:	680c      	ldr	r4, [r1, #0]
    d8ba:	2c0f      	cmp	r4, #15
    d8bc:	d81a      	bhi.n	d8f4 <am_hal_cachectrl_control+0x2cc>
    d8be:	f000 fab5 	bl	de2c <am_hal_interrupt_master_disable>
    d8c2:	4603      	mov	r3, r0
    d8c4:	4814      	ldr	r0, [pc, #80]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d8c6:	930d      	str	r3, [sp, #52]	; 0x34
    d8c8:	f000 f928 	bl	db1c <am_hal_flash_load_ui32>
    d8cc:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d8d0:	f020 000f 	bic.w	r0, r0, #15
    d8d4:	ea40 0104 	orr.w	r1, r0, r4
    d8d8:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d8dc:	480e      	ldr	r0, [pc, #56]	; (d918 <am_hal_cachectrl_control+0x2f0>)
    d8de:	f000 f921 	bl	db24 <am_hal_flash_store_ui32>
    d8e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    d8e4:	f000 faa6 	bl	de34 <am_hal_interrupt_master_set>
    d8e8:	2000      	movs	r0, #0
    d8ea:	e6bb      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d8ec:	2007      	movs	r0, #7
    d8ee:	e6b9      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d8f0:	2006      	movs	r0, #6
    d8f2:	e6b7      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d8f4:	2001      	movs	r0, #1
    d8f6:	e6b5      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d8f8:	2c01      	cmp	r4, #1
    d8fa:	d1f9      	bne.n	d8f0 <am_hal_cachectrl_control+0x2c8>
    d8fc:	4c04      	ldr	r4, [pc, #16]	; (d910 <am_hal_cachectrl_control+0x2e8>)
    d8fe:	7849      	ldrb	r1, [r1, #1]
    d900:	61a2      	str	r2, [r4, #24]
    d902:	61e3      	str	r3, [r4, #28]
    d904:	6823      	ldr	r3, [r4, #0]
    d906:	f361 03c3 	bfi	r3, r1, #3, #1
    d90a:	6023      	str	r3, [r4, #0]
    d90c:	e6aa      	b.n	d664 <am_hal_cachectrl_control+0x3c>
    d90e:	bf00      	nop
    d910:	40018000 	.word	0x40018000
    d914:	f800000f 	.word	0xf800000f
    d918:	40018004 	.word	0x40018004

0000d91c <am_hal_clkgen_control>:
    d91c:	4b49      	ldr	r3, [pc, #292]	; (da44 <am_hal_clkgen_control+0x128>)
    d91e:	681a      	ldr	r2, [r3, #0]
    d920:	b912      	cbnz	r2, d928 <am_hal_clkgen_control+0xc>
    d922:	4a49      	ldr	r2, [pc, #292]	; (da48 <am_hal_clkgen_control+0x12c>)
    d924:	6812      	ldr	r2, [r2, #0]
    d926:	601a      	str	r2, [r3, #0]
    d928:	2809      	cmp	r0, #9
    d92a:	f200 8089 	bhi.w	da40 <am_hal_clkgen_control+0x124>
    d92e:	e8df f000 	tbb	[pc, r0]
    d932:	160d      	.short	0x160d
    d934:	423a261e 	.word	0x423a261e
    d938:	055c544c 	.word	0x055c544c
    d93c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d940:	2000      	movs	r0, #0
    d942:	6a1a      	ldr	r2, [r3, #32]
    d944:	f36f 0200 	bfc	r2, #0, #1
    d948:	621a      	str	r2, [r3, #32]
    d94a:	4770      	bx	lr
    d94c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d950:	2200      	movs	r2, #0
    d952:	2147      	movs	r1, #71	; 0x47
    d954:	6159      	str	r1, [r3, #20]
    d956:	4610      	mov	r0, r2
    d958:	619a      	str	r2, [r3, #24]
    d95a:	615a      	str	r2, [r3, #20]
    d95c:	4770      	bx	lr
    d95e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d962:	2000      	movs	r0, #0
    d964:	899a      	ldrh	r2, [r3, #12]
    d966:	f36f 0200 	bfc	r2, #0, #1
    d96a:	819a      	strh	r2, [r3, #12]
    d96c:	4770      	bx	lr
    d96e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d972:	2000      	movs	r0, #0
    d974:	899a      	ldrh	r2, [r3, #12]
    d976:	f36f 0241 	bfc	r2, #1, #1
    d97a:	819a      	strh	r2, [r3, #12]
    d97c:	4770      	bx	lr
    d97e:	4a33      	ldr	r2, [pc, #204]	; (da4c <am_hal_clkgen_control+0x130>)
    d980:	68d3      	ldr	r3, [r2, #12]
    d982:	b2db      	uxtb	r3, r3
    d984:	2b21      	cmp	r3, #33	; 0x21
    d986:	d106      	bne.n	d996 <am_hal_clkgen_control+0x7a>
    d988:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d98c:	2101      	movs	r1, #1
    d98e:	f361 2309 	bfi	r3, r1, #8, #2
    d992:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d996:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d99a:	2000      	movs	r0, #0
    d99c:	8993      	ldrh	r3, [r2, #12]
    d99e:	f043 0301 	orr.w	r3, r3, #1
    d9a2:	8193      	strh	r3, [r2, #12]
    d9a4:	4770      	bx	lr
    d9a6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9aa:	2000      	movs	r0, #0
    d9ac:	8993      	ldrh	r3, [r2, #12]
    d9ae:	f043 0302 	orr.w	r3, r3, #2
    d9b2:	8193      	strh	r3, [r2, #12]
    d9b4:	4770      	bx	lr
    d9b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9ba:	2200      	movs	r2, #0
    d9bc:	2047      	movs	r0, #71	; 0x47
    d9be:	2101      	movs	r1, #1
    d9c0:	6158      	str	r0, [r3, #20]
    d9c2:	6199      	str	r1, [r3, #24]
    d9c4:	4610      	mov	r0, r2
    d9c6:	615a      	str	r2, [r3, #20]
    d9c8:	4770      	bx	lr
    d9ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9ce:	2000      	movs	r0, #0
    d9d0:	899a      	ldrh	r2, [r3, #12]
    d9d2:	f36f 12c7 	bfc	r2, #7, #1
    d9d6:	819a      	strh	r2, [r3, #12]
    d9d8:	4770      	bx	lr
    d9da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9de:	2000      	movs	r0, #0
    d9e0:	8993      	ldrh	r3, [r2, #12]
    d9e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d9e6:	8193      	strh	r3, [r2, #12]
    d9e8:	4770      	bx	lr
    d9ea:	4a18      	ldr	r2, [pc, #96]	; (da4c <am_hal_clkgen_control+0x130>)
    d9ec:	68d3      	ldr	r3, [r2, #12]
    d9ee:	b2db      	uxtb	r3, r3
    d9f0:	2b21      	cmp	r3, #33	; 0x21
    d9f2:	d00a      	beq.n	da0a <am_hal_clkgen_control+0xee>
    d9f4:	b139      	cbz	r1, da06 <am_hal_clkgen_control+0xea>
    d9f6:	680b      	ldr	r3, [r1, #0]
    d9f8:	f043 0301 	orr.w	r3, r3, #1
    d9fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da00:	2000      	movs	r0, #0
    da02:	6213      	str	r3, [r2, #32]
    da04:	4770      	bx	lr
    da06:	4b12      	ldr	r3, [pc, #72]	; (da50 <am_hal_clkgen_control+0x134>)
    da08:	e7f8      	b.n	d9fc <am_hal_clkgen_control+0xe0>
    da0a:	b500      	push	{lr}
    da0c:	b083      	sub	sp, #12
    da0e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    da12:	9101      	str	r1, [sp, #4]
    da14:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    da18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    da1c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    da20:	f000 f836 	bl	da90 <am_hal_flash_delay>
    da24:	9901      	ldr	r1, [sp, #4]
    da26:	b149      	cbz	r1, da3c <am_hal_clkgen_control+0x120>
    da28:	680b      	ldr	r3, [r1, #0]
    da2a:	f043 0301 	orr.w	r3, r3, #1
    da2e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da32:	2000      	movs	r0, #0
    da34:	6213      	str	r3, [r2, #32]
    da36:	b003      	add	sp, #12
    da38:	f85d fb04 	ldr.w	pc, [sp], #4
    da3c:	4b04      	ldr	r3, [pc, #16]	; (da50 <am_hal_clkgen_control+0x134>)
    da3e:	e7f6      	b.n	da2e <am_hal_clkgen_control+0x112>
    da40:	2006      	movs	r0, #6
    da42:	4770      	bx	lr
    da44:	1000197c 	.word	0x1000197c
    da48:	4ffff000 	.word	0x4ffff000
    da4c:	40020000 	.word	0x40020000
    da50:	0025b801 	.word	0x0025b801

0000da54 <am_hal_clkgen_status_get>:
    da54:	b1b0      	cbz	r0, da84 <am_hal_clkgen_status_get+0x30>
    da56:	b410      	push	{r4}
    da58:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    da5c:	4603      	mov	r3, r0
    da5e:	698c      	ldr	r4, [r1, #24]
    da60:	4809      	ldr	r0, [pc, #36]	; (da88 <am_hal_clkgen_status_get+0x34>)
    da62:	4a0a      	ldr	r2, [pc, #40]	; (da8c <am_hal_clkgen_status_get+0x38>)
    da64:	f014 0f01 	tst.w	r4, #1
    da68:	bf08      	it	eq
    da6a:	4602      	moveq	r2, r0
    da6c:	601a      	str	r2, [r3, #0]
    da6e:	69ca      	ldr	r2, [r1, #28]
    da70:	f85d 4b04 	ldr.w	r4, [sp], #4
    da74:	f002 0101 	and.w	r1, r2, #1
    da78:	f3c2 0240 	ubfx	r2, r2, #1, #1
    da7c:	2000      	movs	r0, #0
    da7e:	6059      	str	r1, [r3, #4]
    da80:	721a      	strb	r2, [r3, #8]
    da82:	4770      	bx	lr
    da84:	2006      	movs	r0, #6
    da86:	4770      	bx	lr
    da88:	02dc6c00 	.word	0x02dc6c00
    da8c:	016e3600 	.word	0x016e3600

0000da90 <am_hal_flash_delay>:
    da90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    da96:	075b      	lsls	r3, r3, #29
    da98:	bf46      	itte	mi
    da9a:	0040      	lslmi	r0, r0, #1
    da9c:	230e      	movmi	r3, #14
    da9e:	230b      	movpl	r3, #11
    daa0:	4298      	cmp	r0, r3
    daa2:	d902      	bls.n	daaa <am_hal_flash_delay+0x1a>
    daa4:	4a01      	ldr	r2, [pc, #4]	; (daac <am_hal_flash_delay+0x1c>)
    daa6:	1ac0      	subs	r0, r0, r3
    daa8:	4710      	bx	r2
    daaa:	4770      	bx	lr
    daac:	0800009d 	.word	0x0800009d

0000dab0 <am_hal_flash_delay_status_check>:
    dab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dab4:	f89d c020 	ldrb.w	ip, [sp, #32]
    dab8:	f8df 805c 	ldr.w	r8, [pc, #92]	; db18 <am_hal_flash_delay_status_check+0x68>
    dabc:	4604      	mov	r4, r0
    dabe:	460d      	mov	r5, r1
    dac0:	4616      	mov	r6, r2
    dac2:	461f      	mov	r7, r3
    dac4:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dac8:	f1bc 0f00 	cmp.w	ip, #0
    dacc:	d00a      	beq.n	dae4 <am_hal_flash_delay_status_check+0x34>
    dace:	e01a      	b.n	db06 <am_hal_flash_delay_status_check+0x56>
    dad0:	b1f4      	cbz	r4, db10 <am_hal_flash_delay_status_check+0x60>
    dad2:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dad6:	f013 0f04 	tst.w	r3, #4
    dada:	bf0c      	ite	eq
    dadc:	2005      	moveq	r0, #5
    dade:	2012      	movne	r0, #18
    dae0:	3c01      	subs	r4, #1
    dae2:	47c0      	blx	r8
    dae4:	6828      	ldr	r0, [r5, #0]
    dae6:	4030      	ands	r0, r6
    dae8:	42b8      	cmp	r0, r7
    daea:	d0f1      	beq.n	dad0 <am_hal_flash_delay_status_check+0x20>
    daec:	2000      	movs	r0, #0
    daee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    daf2:	b16c      	cbz	r4, db10 <am_hal_flash_delay_status_check+0x60>
    daf4:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    daf8:	f013 0f04 	tst.w	r3, #4
    dafc:	bf0c      	ite	eq
    dafe:	2005      	moveq	r0, #5
    db00:	2012      	movne	r0, #18
    db02:	3c01      	subs	r4, #1
    db04:	47c0      	blx	r8
    db06:	6828      	ldr	r0, [r5, #0]
    db08:	4030      	ands	r0, r6
    db0a:	42b8      	cmp	r0, r7
    db0c:	d1f1      	bne.n	daf2 <am_hal_flash_delay_status_check+0x42>
    db0e:	e7ed      	b.n	daec <am_hal_flash_delay_status_check+0x3c>
    db10:	2004      	movs	r0, #4
    db12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    db16:	bf00      	nop
    db18:	0800009d 	.word	0x0800009d

0000db1c <am_hal_flash_load_ui32>:
    db1c:	4b00      	ldr	r3, [pc, #0]	; (db20 <am_hal_flash_load_ui32+0x4>)
    db1e:	4718      	bx	r3
    db20:	08000075 	.word	0x08000075

0000db24 <am_hal_flash_store_ui32>:
    db24:	4b01      	ldr	r3, [pc, #4]	; (db2c <am_hal_flash_store_ui32+0x8>)
    db26:	f043 0301 	orr.w	r3, r3, #1
    db2a:	4718      	bx	r3
    db2c:	10001058 	.word	0x10001058

0000db30 <am_hal_gpio_pinconfig>:
    db30:	2831      	cmp	r0, #49	; 0x31
    db32:	f200 80c3 	bhi.w	dcbc <am_hal_gpio_pinconfig+0x18c>
    db36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db3a:	4604      	mov	r4, r0
    db3c:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    db40:	f001 0007 	and.w	r0, r1, #7
    db44:	b085      	sub	sp, #20
    db46:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    db4a:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    db4e:	d00f      	beq.n	db70 <am_hal_gpio_pinconfig+0x40>
    db50:	f3c1 1642 	ubfx	r6, r1, #5, #3
    db54:	1db5      	adds	r5, r6, #6
    db56:	f005 0507 	and.w	r5, r5, #7
    db5a:	2d03      	cmp	r5, #3
    db5c:	f042 0201 	orr.w	r2, r2, #1
    db60:	f240 80ae 	bls.w	dcc0 <am_hal_gpio_pinconfig+0x190>
    db64:	2fc0      	cmp	r7, #192	; 0xc0
    db66:	f000 80e1 	beq.w	dd2c <am_hal_gpio_pinconfig+0x1fc>
    db6a:	2f20      	cmp	r7, #32
    db6c:	f000 80e3 	beq.w	dd36 <am_hal_gpio_pinconfig+0x206>
    db70:	b163      	cbz	r3, db8c <am_hal_gpio_pinconfig+0x5c>
    db72:	2b01      	cmp	r3, #1
    db74:	f000 80d3 	beq.w	dd1e <am_hal_gpio_pinconfig+0x1ee>
    db78:	2b02      	cmp	r3, #2
    db7a:	f040 80c9 	bne.w	dd10 <am_hal_gpio_pinconfig+0x1e0>
    db7e:	4b79      	ldr	r3, [pc, #484]	; (dd64 <am_hal_gpio_pinconfig+0x234>)
    db80:	5d1b      	ldrb	r3, [r3, r4]
    db82:	075b      	lsls	r3, r3, #29
    db84:	f140 80c4 	bpl.w	dd10 <am_hal_gpio_pinconfig+0x1e0>
    db88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    db8c:	4b76      	ldr	r3, [pc, #472]	; (dd68 <am_hal_gpio_pinconfig+0x238>)
    db8e:	5d1b      	ldrb	r3, [r3, r4]
    db90:	4103      	asrs	r3, r0
    db92:	005b      	lsls	r3, r3, #1
    db94:	f003 0302 	and.w	r3, r3, #2
    db98:	4313      	orrs	r3, r2
    db9a:	4a74      	ldr	r2, [pc, #464]	; (dd6c <am_hal_gpio_pinconfig+0x23c>)
    db9c:	5d12      	ldrb	r2, [r2, r4]
    db9e:	4282      	cmp	r2, r0
    dba0:	f000 8099 	beq.w	dcd6 <am_hal_gpio_pinconfig+0x1a6>
    dba4:	f3c1 3000 	ubfx	r0, r1, #12, #1
    dba8:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dbac:	f3c1 3280 	ubfx	r2, r1, #14, #1
    dbb0:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dbb4:	0a88      	lsrs	r0, r1, #10
    dbb6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dbba:	f000 0008 	and.w	r0, r0, #8
    dbbe:	4302      	orrs	r2, r0
    dbc0:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dbc4:	f000 050c 	and.w	r5, r0, #12
    dbc8:	2d04      	cmp	r5, #4
    dbca:	f000 80a5 	beq.w	dd18 <am_hal_gpio_pinconfig+0x1e8>
    dbce:	4d68      	ldr	r5, [pc, #416]	; (dd70 <am_hal_gpio_pinconfig+0x240>)
    dbd0:	682d      	ldr	r5, [r5, #0]
    dbd2:	eba1 0805 	sub.w	r8, r1, r5
    dbd6:	fab8 f888 	clz	r8, r8
    dbda:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dbde:	f010 0f60 	tst.w	r0, #96	; 0x60
    dbe2:	bf04      	itt	eq
    dbe4:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dbe8:	f360 0200 	bfieq	r2, r0, #0, #1
    dbec:	00a0      	lsls	r0, r4, #2
    dbee:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dbf2:	2902      	cmp	r1, #2
    dbf4:	d05c      	beq.n	dcb0 <am_hal_gpio_pinconfig+0x180>
    dbf6:	2903      	cmp	r1, #3
    dbf8:	d058      	beq.n	dcac <am_hal_gpio_pinconfig+0x17c>
    dbfa:	2901      	cmp	r1, #1
    dbfc:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dc00:	bf08      	it	eq
    dc02:	f043 0304 	orreq.w	r3, r3, #4
    dc06:	f001 0118 	and.w	r1, r1, #24
    dc0a:	2700      	movs	r7, #0
    dc0c:	f000 001c 	and.w	r0, r0, #28
    dc10:	fa02 f600 	lsl.w	r6, r2, r0
    dc14:	220f      	movs	r2, #15
    dc16:	4082      	lsls	r2, r0
    dc18:	43d2      	mvns	r2, r2
    dc1a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dc1e:	fa03 f501 	lsl.w	r5, r3, r1
    dc22:	fa09 f901 	lsl.w	r9, r9, r1
    dc26:	9201      	str	r2, [sp, #4]
    dc28:	f000 f900 	bl	de2c <am_hal_interrupt_master_disable>
    dc2c:	f024 0a03 	bic.w	sl, r4, #3
    dc30:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    dc34:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    dc38:	4b4e      	ldr	r3, [pc, #312]	; (dd74 <am_hal_gpio_pinconfig+0x244>)
    dc3a:	494f      	ldr	r1, [pc, #316]	; (dd78 <am_hal_gpio_pinconfig+0x248>)
    dc3c:	9a01      	ldr	r2, [sp, #4]
    dc3e:	9003      	str	r0, [sp, #12]
    dc40:	ea6f 0909 	mvn.w	r9, r9
    dc44:	f02b 0b03 	bic.w	fp, fp, #3
    dc48:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dc4c:	f1b8 0f00 	cmp.w	r8, #0
    dc50:	d00b      	beq.n	dc6a <am_hal_gpio_pinconfig+0x13a>
    dc52:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    dc56:	f004 081f 	and.w	r8, r4, #31
    dc5a:	4848      	ldr	r0, [pc, #288]	; (dd7c <am_hal_gpio_pinconfig+0x24c>)
    dc5c:	f00e 0e04 	and.w	lr, lr, #4
    dc60:	2401      	movs	r4, #1
    dc62:	fa04 f408 	lsl.w	r4, r4, r8
    dc66:	f84e 4000 	str.w	r4, [lr, r0]
    dc6a:	4845      	ldr	r0, [pc, #276]	; (dd80 <am_hal_gpio_pinconfig+0x250>)
    dc6c:	2473      	movs	r4, #115	; 0x73
    dc6e:	6604      	str	r4, [r0, #96]	; 0x60
    dc70:	f8dc 4000 	ldr.w	r4, [ip]
    dc74:	ea04 0409 	and.w	r4, r4, r9
    dc78:	4325      	orrs	r5, r4
    dc7a:	f8cc 5000 	str.w	r5, [ip]
    dc7e:	f85b 4003 	ldr.w	r4, [fp, r3]
    dc82:	4022      	ands	r2, r4
    dc84:	4332      	orrs	r2, r6
    dc86:	f84b 2003 	str.w	r2, [fp, r3]
    dc8a:	f85a 3001 	ldr.w	r3, [sl, r1]
    dc8e:	ea03 0909 	and.w	r9, r3, r9
    dc92:	2400      	movs	r4, #0
    dc94:	ea49 0707 	orr.w	r7, r9, r7
    dc98:	f84a 7001 	str.w	r7, [sl, r1]
    dc9c:	6604      	str	r4, [r0, #96]	; 0x60
    dc9e:	9803      	ldr	r0, [sp, #12]
    dca0:	f000 f8c8 	bl	de34 <am_hal_interrupt_master_set>
    dca4:	4620      	mov	r0, r4
    dca6:	b005      	add	sp, #20
    dca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcac:	f043 0304 	orr.w	r3, r3, #4
    dcb0:	00e1      	lsls	r1, r4, #3
    dcb2:	f001 0118 	and.w	r1, r1, #24
    dcb6:	2701      	movs	r7, #1
    dcb8:	408f      	lsls	r7, r1
    dcba:	e7a7      	b.n	dc0c <am_hal_gpio_pinconfig+0xdc>
    dcbc:	2006      	movs	r0, #6
    dcbe:	4770      	bx	lr
    dcc0:	4d28      	ldr	r5, [pc, #160]	; (dd64 <am_hal_gpio_pinconfig+0x234>)
    dcc2:	5d2d      	ldrb	r5, [r5, r4]
    dcc4:	3e02      	subs	r6, #2
    dcc6:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    dcca:	07ee      	lsls	r6, r5, #31
    dccc:	d536      	bpl.n	dd3c <am_hal_gpio_pinconfig+0x20c>
    dcce:	2b00      	cmp	r3, #0
    dcd0:	f43f af5c 	beq.w	db8c <am_hal_gpio_pinconfig+0x5c>
    dcd4:	e74d      	b.n	db72 <am_hal_gpio_pinconfig+0x42>
    dcd6:	f3c1 4202 	ubfx	r2, r1, #16, #3
    dcda:	2a07      	cmp	r2, #7
    dcdc:	d030      	beq.n	dd40 <am_hal_gpio_pinconfig+0x210>
    dcde:	4d29      	ldr	r5, [pc, #164]	; (dd84 <am_hal_gpio_pinconfig+0x254>)
    dce0:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    dce4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    dce8:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    dcec:	4290      	cmp	r0, r2
    dcee:	d029      	beq.n	dd44 <am_hal_gpio_pinconfig+0x214>
    dcf0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dcf4:	00a0      	lsls	r0, r4, #2
    dcf6:	786e      	ldrb	r6, [r5, #1]
    dcf8:	4296      	cmp	r6, r2
    dcfa:	d02d      	beq.n	dd58 <am_hal_gpio_pinconfig+0x228>
    dcfc:	78ae      	ldrb	r6, [r5, #2]
    dcfe:	4296      	cmp	r6, r2
    dd00:	d02c      	beq.n	dd5c <am_hal_gpio_pinconfig+0x22c>
    dd02:	78ed      	ldrb	r5, [r5, #3]
    dd04:	4295      	cmp	r5, r2
    dd06:	d02b      	beq.n	dd60 <am_hal_gpio_pinconfig+0x230>
    dd08:	481f      	ldr	r0, [pc, #124]	; (dd88 <am_hal_gpio_pinconfig+0x258>)
    dd0a:	b005      	add	sp, #20
    dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd10:	481e      	ldr	r0, [pc, #120]	; (dd8c <am_hal_gpio_pinconfig+0x25c>)
    dd12:	b005      	add	sp, #20
    dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd18:	f04f 0801 	mov.w	r8, #1
    dd1c:	e75f      	b.n	dbde <am_hal_gpio_pinconfig+0xae>
    dd1e:	4b11      	ldr	r3, [pc, #68]	; (dd64 <am_hal_gpio_pinconfig+0x234>)
    dd20:	5d1b      	ldrb	r3, [r3, r4]
    dd22:	079d      	lsls	r5, r3, #30
    dd24:	d5f4      	bpl.n	dd10 <am_hal_gpio_pinconfig+0x1e0>
    dd26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dd2a:	e72f      	b.n	db8c <am_hal_gpio_pinconfig+0x5c>
    dd2c:	2c14      	cmp	r4, #20
    dd2e:	f43f af1f 	beq.w	db70 <am_hal_gpio_pinconfig+0x40>
    dd32:	4817      	ldr	r0, [pc, #92]	; (dd90 <am_hal_gpio_pinconfig+0x260>)
    dd34:	e7b7      	b.n	dca6 <am_hal_gpio_pinconfig+0x176>
    dd36:	2c14      	cmp	r4, #20
    dd38:	f47f af1a 	bne.w	db70 <am_hal_gpio_pinconfig+0x40>
    dd3c:	4815      	ldr	r0, [pc, #84]	; (dd94 <am_hal_gpio_pinconfig+0x264>)
    dd3e:	e7b2      	b.n	dca6 <am_hal_gpio_pinconfig+0x176>
    dd40:	4815      	ldr	r0, [pc, #84]	; (dd98 <am_hal_gpio_pinconfig+0x268>)
    dd42:	e7b0      	b.n	dca6 <am_hal_gpio_pinconfig+0x176>
    dd44:	2200      	movs	r2, #0
    dd46:	00a0      	lsls	r0, r4, #2
    dd48:	0052      	lsls	r2, r2, #1
    dd4a:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dd4e:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    dd52:	f04f 0800 	mov.w	r8, #0
    dd56:	e74a      	b.n	dbee <am_hal_gpio_pinconfig+0xbe>
    dd58:	2201      	movs	r2, #1
    dd5a:	e7f5      	b.n	dd48 <am_hal_gpio_pinconfig+0x218>
    dd5c:	2202      	movs	r2, #2
    dd5e:	e7f3      	b.n	dd48 <am_hal_gpio_pinconfig+0x218>
    dd60:	2203      	movs	r2, #3
    dd62:	e7f1      	b.n	dd48 <am_hal_gpio_pinconfig+0x218>
    dd64:	0000eed4 	.word	0x0000eed4
    dd68:	0000ef08 	.word	0x0000ef08
    dd6c:	0000f004 	.word	0x0000f004
    dd70:	0000eec8 	.word	0x0000eec8
    dd74:	40010040 	.word	0x40010040
    dd78:	400100e0 	.word	0x400100e0
    dd7c:	400100b4 	.word	0x400100b4
    dd80:	40010000 	.word	0x40010000
    dd84:	0000ef3c 	.word	0x0000ef3c
    dd88:	08000104 	.word	0x08000104
    dd8c:	08000102 	.word	0x08000102
    dd90:	08000101 	.word	0x08000101
    dd94:	08000100 	.word	0x08000100
    dd98:	08000103 	.word	0x08000103

0000dd9c <am_hal_gpio_state_write>:
    dd9c:	2831      	cmp	r0, #49	; 0x31
    dd9e:	d81a      	bhi.n	ddd6 <am_hal_gpio_state_write+0x3a>
    dda0:	b570      	push	{r4, r5, r6, lr}
    dda2:	2905      	cmp	r1, #5
    dda4:	b082      	sub	sp, #8
    dda6:	460d      	mov	r5, r1
    dda8:	d812      	bhi.n	ddd0 <am_hal_gpio_state_write+0x34>
    ddaa:	f000 031f 	and.w	r3, r0, #31
    ddae:	2201      	movs	r2, #1
    ddb0:	08c0      	lsrs	r0, r0, #3
    ddb2:	fa02 f603 	lsl.w	r6, r2, r3
    ddb6:	f000 0404 	and.w	r4, r0, #4
    ddba:	f000 f837 	bl	de2c <am_hal_interrupt_master_disable>
    ddbe:	3d01      	subs	r5, #1
    ddc0:	9001      	str	r0, [sp, #4]
    ddc2:	2d04      	cmp	r5, #4
    ddc4:	d821      	bhi.n	de0a <am_hal_gpio_state_write+0x6e>
    ddc6:	e8df f005 	tbb	[pc, r5]
    ddca:	1512      	.short	0x1512
    ddcc:	1d1a      	.short	0x1d1a
    ddce:	08          	.byte	0x08
    ddcf:	00          	.byte	0x00
    ddd0:	2006      	movs	r0, #6
    ddd2:	b002      	add	sp, #8
    ddd4:	bd70      	pop	{r4, r5, r6, pc}
    ddd6:	2005      	movs	r0, #5
    ddd8:	4770      	bx	lr
    ddda:	4a0d      	ldr	r2, [pc, #52]	; (de10 <am_hal_gpio_state_write+0x74>)
    dddc:	58a3      	ldr	r3, [r4, r2]
    ddde:	4073      	eors	r3, r6
    dde0:	50a3      	str	r3, [r4, r2]
    dde2:	9801      	ldr	r0, [sp, #4]
    dde4:	f000 f826 	bl	de34 <am_hal_interrupt_master_set>
    dde8:	2000      	movs	r0, #0
    ddea:	b002      	add	sp, #8
    ddec:	bd70      	pop	{r4, r5, r6, pc}
    ddee:	4b09      	ldr	r3, [pc, #36]	; (de14 <am_hal_gpio_state_write+0x78>)
    ddf0:	50e6      	str	r6, [r4, r3]
    ddf2:	e7f6      	b.n	dde2 <am_hal_gpio_state_write+0x46>
    ddf4:	4a08      	ldr	r2, [pc, #32]	; (de18 <am_hal_gpio_state_write+0x7c>)
    ddf6:	58a3      	ldr	r3, [r4, r2]
    ddf8:	4073      	eors	r3, r6
    ddfa:	50a3      	str	r3, [r4, r2]
    ddfc:	e7f1      	b.n	dde2 <am_hal_gpio_state_write+0x46>
    ddfe:	4b04      	ldr	r3, [pc, #16]	; (de10 <am_hal_gpio_state_write+0x74>)
    de00:	50e6      	str	r6, [r4, r3]
    de02:	e7ee      	b.n	dde2 <am_hal_gpio_state_write+0x46>
    de04:	4b05      	ldr	r3, [pc, #20]	; (de1c <am_hal_gpio_state_write+0x80>)
    de06:	50e6      	str	r6, [r4, r3]
    de08:	e7eb      	b.n	dde2 <am_hal_gpio_state_write+0x46>
    de0a:	4b05      	ldr	r3, [pc, #20]	; (de20 <am_hal_gpio_state_write+0x84>)
    de0c:	50e6      	str	r6, [r4, r3]
    de0e:	e7e8      	b.n	dde2 <am_hal_gpio_state_write+0x46>
    de10:	400100b4 	.word	0x400100b4
    de14:	40010090 	.word	0x40010090
    de18:	40010088 	.word	0x40010088
    de1c:	400100a8 	.word	0x400100a8
    de20:	40010098 	.word	0x40010098

0000de24 <am_hal_interrupt_master_enable>:
    de24:	f3ef 8010 	mrs	r0, PRIMASK
    de28:	b662      	cpsie	i
    de2a:	4770      	bx	lr

0000de2c <am_hal_interrupt_master_disable>:
    de2c:	f3ef 8010 	mrs	r0, PRIMASK
    de30:	b672      	cpsid	i
    de32:	4770      	bx	lr

0000de34 <am_hal_interrupt_master_set>:
    de34:	f380 8810 	msr	PRIMASK, r0
    de38:	4770      	bx	lr
    de3a:	bf00      	nop

0000de3c <am_hal_itm_enable>:
    de3c:	4a0e      	ldr	r2, [pc, #56]	; (de78 <am_hal_itm_enable+0x3c>)
    de3e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    de42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    de46:	b410      	push	{r4}
    de48:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    de4c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    de50:	01db      	lsls	r3, r3, #7
    de52:	d5fb      	bpl.n	de4c <am_hal_itm_enable+0x10>
    de54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    de58:	4c08      	ldr	r4, [pc, #32]	; (de7c <am_hal_itm_enable+0x40>)
    de5a:	4a09      	ldr	r2, [pc, #36]	; (de80 <am_hal_itm_enable+0x44>)
    de5c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    de60:	200f      	movs	r0, #15
    de62:	f04f 31ff 	mov.w	r1, #4294967295
    de66:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    de6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    de6e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    de72:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    de76:	4770      	bx	lr
    de78:	e000ed00 	.word	0xe000ed00
    de7c:	c5acce55 	.word	0xc5acce55
    de80:	00150511 	.word	0x00150511

0000de84 <am_hal_itm_disable>:
    de84:	4b27      	ldr	r3, [pc, #156]	; (df24 <am_hal_itm_disable+0xa0>)
    de86:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    de8a:	b510      	push	{r4, lr}
    de8c:	b9cb      	cbnz	r3, dec2 <am_hal_itm_disable+0x3e>
    de8e:	4a26      	ldr	r2, [pc, #152]	; (df28 <am_hal_itm_disable+0xa4>)
    de90:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    de94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    de98:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    de9c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dea0:	01d9      	lsls	r1, r3, #7
    dea2:	d5fb      	bpl.n	de9c <am_hal_itm_disable+0x18>
    dea4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dea8:	4c20      	ldr	r4, [pc, #128]	; (df2c <am_hal_itm_disable+0xa8>)
    deaa:	4a21      	ldr	r2, [pc, #132]	; (df30 <am_hal_itm_disable+0xac>)
    deac:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    deb0:	200f      	movs	r0, #15
    deb2:	f04f 31ff 	mov.w	r1, #4294967295
    deb6:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    deba:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    debe:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dec2:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    dec6:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    deca:	021b      	lsls	r3, r3, #8
    decc:	d4fb      	bmi.n	dec6 <am_hal_itm_disable+0x42>
    dece:	f44f 7048 	mov.w	r0, #800	; 0x320
    ded2:	f7ff fddd 	bl	da90 <am_hal_flash_delay>
    ded6:	4b15      	ldr	r3, [pc, #84]	; (df2c <am_hal_itm_disable+0xa8>)
    ded8:	4916      	ldr	r1, [pc, #88]	; (df34 <am_hal_itm_disable+0xb0>)
    deda:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    dede:	2064      	movs	r0, #100	; 0x64
    dee0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    dee4:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    dee8:	f023 0301 	bic.w	r3, r3, #1
    deec:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    def0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    def4:	420b      	tst	r3, r1
    def6:	d1fb      	bne.n	def0 <am_hal_itm_disable+0x6c>
    def8:	3801      	subs	r0, #1
    defa:	d1f3      	bne.n	dee4 <am_hal_itm_disable+0x60>
    defc:	4a0a      	ldr	r2, [pc, #40]	; (df28 <am_hal_itm_disable+0xa4>)
    defe:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    df02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    df06:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    df0a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    df0e:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    df12:	d1fa      	bne.n	df0a <am_hal_itm_disable+0x86>
    df14:	4a03      	ldr	r2, [pc, #12]	; (df24 <am_hal_itm_disable+0xa0>)
    df16:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    df1a:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    df1e:	2b00      	cmp	r3, #0
    df20:	d1fb      	bne.n	df1a <am_hal_itm_disable+0x96>
    df22:	bd10      	pop	{r4, pc}
    df24:	40020000 	.word	0x40020000
    df28:	e000ed00 	.word	0xe000ed00
    df2c:	c5acce55 	.word	0xc5acce55
    df30:	00150511 	.word	0x00150511
    df34:	00800001 	.word	0x00800001

0000df38 <am_hal_itm_print>:
    df38:	7803      	ldrb	r3, [r0, #0]
    df3a:	b1a3      	cbz	r3, df66 <am_hal_itm_print+0x2e>
    df3c:	4603      	mov	r3, r0
    df3e:	f1c0 0c01 	rsb	ip, r0, #1
    df42:	eb0c 0103 	add.w	r1, ip, r3
    df46:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    df4a:	2a00      	cmp	r2, #0
    df4c:	d1f9      	bne.n	df42 <am_hal_itm_print+0xa>
    df4e:	4401      	add	r1, r0
    df50:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    df54:	f810 cb01 	ldrb.w	ip, [r0], #1
    df58:	6813      	ldr	r3, [r2, #0]
    df5a:	2b00      	cmp	r3, #0
    df5c:	d0fc      	beq.n	df58 <am_hal_itm_print+0x20>
    df5e:	4288      	cmp	r0, r1
    df60:	f882 c000 	strb.w	ip, [r2]
    df64:	d1f6      	bne.n	df54 <am_hal_itm_print+0x1c>
    df66:	4770      	bx	lr

0000df68 <am_hal_mcuctrl_info_get>:
    df68:	2900      	cmp	r1, #0
    df6a:	f000 808f 	beq.w	e08c <am_hal_mcuctrl_info_get+0x124>
    df6e:	2801      	cmp	r0, #1
    df70:	b430      	push	{r4, r5}
    df72:	d006      	beq.n	df82 <am_hal_mcuctrl_info_get+0x1a>
    df74:	2802      	cmp	r0, #2
    df76:	d06d      	beq.n	e054 <am_hal_mcuctrl_info_get+0xec>
    df78:	2800      	cmp	r0, #0
    df7a:	d055      	beq.n	e028 <am_hal_mcuctrl_info_get+0xc0>
    df7c:	2006      	movs	r0, #6
    df7e:	bc30      	pop	{r4, r5}
    df80:	4770      	bx	lr
    df82:	4a43      	ldr	r2, [pc, #268]	; (e090 <am_hal_mcuctrl_info_get+0x128>)
    df84:	4843      	ldr	r0, [pc, #268]	; (e094 <am_hal_mcuctrl_info_get+0x12c>)
    df86:	6813      	ldr	r3, [r2, #0]
    df88:	600b      	str	r3, [r1, #0]
    df8a:	6854      	ldr	r4, [r2, #4]
    df8c:	604c      	str	r4, [r1, #4]
    df8e:	6894      	ldr	r4, [r2, #8]
    df90:	608c      	str	r4, [r1, #8]
    df92:	68d4      	ldr	r4, [r2, #12]
    df94:	60cc      	str	r4, [r1, #12]
    df96:	f3c3 5503 	ubfx	r5, r3, #20, #4
    df9a:	6914      	ldr	r4, [r2, #16]
    df9c:	610c      	str	r4, [r1, #16]
    df9e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    dfa2:	4c3d      	ldr	r4, [pc, #244]	; (e098 <am_hal_mcuctrl_info_get+0x130>)
    dfa4:	6950      	ldr	r0, [r2, #20]
    dfa6:	6148      	str	r0, [r1, #20]
    dfa8:	f003 0201 	and.w	r2, r3, #1
    dfac:	f3c3 4303 	ubfx	r3, r3, #16, #4
    dfb0:	e9c1 2506 	strd	r2, r5, [r1, #24]
    dfb4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    dfb8:	4a38      	ldr	r2, [pc, #224]	; (e09c <am_hal_mcuctrl_info_get+0x134>)
    dfba:	620b      	str	r3, [r1, #32]
    dfbc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    dfc0:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    dfc4:	b2db      	uxtb	r3, r3
    dfc6:	f000 000f 	and.w	r0, r0, #15
    dfca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    dfce:	624b      	str	r3, [r1, #36]	; 0x24
    dfd0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    dfd4:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    dfd8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    dfdc:	f000 000f 	and.w	r0, r0, #15
    dfe0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    dfe4:	628b      	str	r3, [r1, #40]	; 0x28
    dfe6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    dfea:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    dfee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    dff2:	f3c0 1003 	ubfx	r0, r0, #4, #4
    dff6:	4303      	orrs	r3, r0
    dff8:	62cb      	str	r3, [r1, #44]	; 0x2c
    dffa:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    dffe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e002:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e006:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e00a:	b2db      	uxtb	r3, r3
    e00c:	041b      	lsls	r3, r3, #16
    e00e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e012:	fa5f fc82 	uxtb.w	ip, r2
    e016:	ea43 030c 	orr.w	r3, r3, ip
    e01a:	b2c2      	uxtb	r2, r0
    e01c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e020:	630b      	str	r3, [r1, #48]	; 0x30
    e022:	2000      	movs	r0, #0
    e024:	bc30      	pop	{r4, r5}
    e026:	4770      	bx	lr
    e028:	4a19      	ldr	r2, [pc, #100]	; (e090 <am_hal_mcuctrl_info_get+0x128>)
    e02a:	6993      	ldr	r3, [r2, #24]
    e02c:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e030:	700c      	strb	r4, [r1, #0]
    e032:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e036:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e03a:	704b      	strb	r3, [r1, #1]
    e03c:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e040:	710b      	strb	r3, [r1, #4]
    e042:	6953      	ldr	r3, [r2, #20]
    e044:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e048:	f003 0301 	and.w	r3, r3, #1
    e04c:	bc30      	pop	{r4, r5}
    e04e:	708a      	strb	r2, [r1, #2]
    e050:	70cb      	strb	r3, [r1, #3]
    e052:	4770      	bx	lr
    e054:	4a0e      	ldr	r2, [pc, #56]	; (e090 <am_hal_mcuctrl_info_get+0x128>)
    e056:	6848      	ldr	r0, [r1, #4]
    e058:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e05c:	f003 0401 	and.w	r4, r3, #1
    e060:	700c      	strb	r4, [r1, #0]
    e062:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e066:	720c      	strb	r4, [r1, #8]
    e068:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e06c:	60cc      	str	r4, [r1, #12]
    e06e:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e072:	4320      	orrs	r0, r4
    e074:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e078:	6048      	str	r0, [r1, #4]
    e07a:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e07e:	740b      	strb	r3, [r1, #16]
    e080:	694b      	ldr	r3, [r1, #20]
    e082:	4313      	orrs	r3, r2
    e084:	2000      	movs	r0, #0
    e086:	bc30      	pop	{r4, r5}
    e088:	614b      	str	r3, [r1, #20]
    e08a:	4770      	bx	lr
    e08c:	2006      	movs	r0, #6
    e08e:	4770      	bx	lr
    e090:	40020000 	.word	0x40020000
    e094:	0000f038 	.word	0x0000f038
    e098:	0000f078 	.word	0x0000f078
    e09c:	f0000f00 	.word	0xf0000f00

0000e0a0 <am_hal_pwrctrl_periph_enable>:
    e0a0:	b570      	push	{r4, r5, r6, lr}
    e0a2:	b082      	sub	sp, #8
    e0a4:	4604      	mov	r4, r0
    e0a6:	f7ff fec1 	bl	de2c <am_hal_interrupt_master_disable>
    e0aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e0ae:	4e0f      	ldr	r6, [pc, #60]	; (e0ec <am_hal_pwrctrl_periph_enable+0x4c>)
    e0b0:	4d0f      	ldr	r5, [pc, #60]	; (e0f0 <am_hal_pwrctrl_periph_enable+0x50>)
    e0b2:	9001      	str	r0, [sp, #4]
    e0b4:	00a4      	lsls	r4, r4, #2
    e0b6:	68b3      	ldr	r3, [r6, #8]
    e0b8:	592a      	ldr	r2, [r5, r4]
    e0ba:	4313      	orrs	r3, r2
    e0bc:	60b3      	str	r3, [r6, #8]
    e0be:	9801      	ldr	r0, [sp, #4]
    e0c0:	442c      	add	r4, r5
    e0c2:	f7ff feb7 	bl	de34 <am_hal_interrupt_master_set>
    e0c6:	20a0      	movs	r0, #160	; 0xa0
    e0c8:	f7ff fce2 	bl	da90 <am_hal_flash_delay>
    e0cc:	69b3      	ldr	r3, [r6, #24]
    e0ce:	6864      	ldr	r4, [r4, #4]
    e0d0:	4223      	tst	r3, r4
    e0d2:	d103      	bne.n	e0dc <am_hal_pwrctrl_periph_enable+0x3c>
    e0d4:	20a0      	movs	r0, #160	; 0xa0
    e0d6:	f7ff fcdb 	bl	da90 <am_hal_flash_delay>
    e0da:	69b3      	ldr	r3, [r6, #24]
    e0dc:	4b03      	ldr	r3, [pc, #12]	; (e0ec <am_hal_pwrctrl_periph_enable+0x4c>)
    e0de:	699b      	ldr	r3, [r3, #24]
    e0e0:	4223      	tst	r3, r4
    e0e2:	bf0c      	ite	eq
    e0e4:	2001      	moveq	r0, #1
    e0e6:	2000      	movne	r0, #0
    e0e8:	b002      	add	sp, #8
    e0ea:	bd70      	pop	{r4, r5, r6, pc}
    e0ec:	40021000 	.word	0x40021000
    e0f0:	0000f0b8 	.word	0x0000f0b8

0000e0f4 <am_hal_pwrctrl_periph_disable>:
    e0f4:	b570      	push	{r4, r5, r6, lr}
    e0f6:	b082      	sub	sp, #8
    e0f8:	4604      	mov	r4, r0
    e0fa:	f7ff fe97 	bl	de2c <am_hal_interrupt_master_disable>
    e0fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e102:	4e10      	ldr	r6, [pc, #64]	; (e144 <am_hal_pwrctrl_periph_disable+0x50>)
    e104:	4d10      	ldr	r5, [pc, #64]	; (e148 <am_hal_pwrctrl_periph_disable+0x54>)
    e106:	9001      	str	r0, [sp, #4]
    e108:	00a4      	lsls	r4, r4, #2
    e10a:	68b3      	ldr	r3, [r6, #8]
    e10c:	592a      	ldr	r2, [r5, r4]
    e10e:	ea23 0302 	bic.w	r3, r3, r2
    e112:	60b3      	str	r3, [r6, #8]
    e114:	9801      	ldr	r0, [sp, #4]
    e116:	442c      	add	r4, r5
    e118:	f7ff fe8c 	bl	de34 <am_hal_interrupt_master_set>
    e11c:	20a0      	movs	r0, #160	; 0xa0
    e11e:	f7ff fcb7 	bl	da90 <am_hal_flash_delay>
    e122:	69b3      	ldr	r3, [r6, #24]
    e124:	6864      	ldr	r4, [r4, #4]
    e126:	4223      	tst	r3, r4
    e128:	d003      	beq.n	e132 <am_hal_pwrctrl_periph_disable+0x3e>
    e12a:	20a0      	movs	r0, #160	; 0xa0
    e12c:	f7ff fcb0 	bl	da90 <am_hal_flash_delay>
    e130:	69b3      	ldr	r3, [r6, #24]
    e132:	4b04      	ldr	r3, [pc, #16]	; (e144 <am_hal_pwrctrl_periph_disable+0x50>)
    e134:	699b      	ldr	r3, [r3, #24]
    e136:	4223      	tst	r3, r4
    e138:	bf14      	ite	ne
    e13a:	2001      	movne	r0, #1
    e13c:	2000      	moveq	r0, #0
    e13e:	b002      	add	sp, #8
    e140:	bd70      	pop	{r4, r5, r6, pc}
    e142:	bf00      	nop
    e144:	40021000 	.word	0x40021000
    e148:	0000f0b8 	.word	0x0000f0b8

0000e14c <am_hal_pwrctrl_low_power_init>:
    e14c:	b530      	push	{r4, r5, lr}
    e14e:	4b69      	ldr	r3, [pc, #420]	; (e2f4 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e150:	681a      	ldr	r2, [r3, #0]
    e152:	b085      	sub	sp, #20
    e154:	b912      	cbnz	r2, e15c <am_hal_pwrctrl_low_power_init+0x10>
    e156:	4a68      	ldr	r2, [pc, #416]	; (e2f8 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e158:	6812      	ldr	r2, [r2, #0]
    e15a:	601a      	str	r2, [r3, #0]
    e15c:	4b67      	ldr	r3, [pc, #412]	; (e2fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e15e:	68db      	ldr	r3, [r3, #12]
    e160:	b2db      	uxtb	r3, r3
    e162:	2b12      	cmp	r3, #18
    e164:	d104      	bne.n	e170 <am_hal_pwrctrl_low_power_init+0x24>
    e166:	4c66      	ldr	r4, [pc, #408]	; (e300 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e168:	6863      	ldr	r3, [r4, #4]
    e16a:	07d8      	lsls	r0, r3, #31
    e16c:	f100 8088 	bmi.w	e280 <am_hal_pwrctrl_low_power_init+0x134>
    e170:	4b62      	ldr	r3, [pc, #392]	; (e2fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e172:	68da      	ldr	r2, [r3, #12]
    e174:	b2d2      	uxtb	r2, r2
    e176:	2a20      	cmp	r2, #32
    e178:	d934      	bls.n	e1e4 <am_hal_pwrctrl_low_power_init+0x98>
    e17a:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e17e:	2002      	movs	r0, #2
    e180:	f360 4213 	bfi	r2, r0, #16, #4
    e184:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e188:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e18c:	2203      	movs	r2, #3
    e18e:	f362 5117 	bfi	r1, r2, #20, #4
    e192:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e196:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e19a:	2405      	movs	r4, #5
    e19c:	f364 0103 	bfi	r1, r4, #0, #4
    e1a0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1a4:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e1a8:	f360 1107 	bfi	r1, r0, #4, #4
    e1ac:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1b0:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e1b4:	2406      	movs	r4, #6
    e1b6:	f364 210b 	bfi	r1, r4, #8, #4
    e1ba:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1be:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e1c2:	2001      	movs	r0, #1
    e1c4:	f360 310f 	bfi	r1, r0, #12, #4
    e1c8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1cc:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e1d0:	f362 61de 	bfi	r1, r2, #27, #4
    e1d4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e1d8:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e1dc:	f362 0103 	bfi	r1, r2, #0, #4
    e1e0:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e1e4:	4a45      	ldr	r2, [pc, #276]	; (e2fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e1e6:	68d3      	ldr	r3, [r2, #12]
    e1e8:	b2db      	uxtb	r3, r3
    e1ea:	2b11      	cmp	r3, #17
    e1ec:	d905      	bls.n	e1fa <am_hal_pwrctrl_low_power_init+0xae>
    e1ee:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e1f2:	f36f 6318 	bfc	r3, #24, #1
    e1f6:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e1fa:	2100      	movs	r1, #0
    e1fc:	200c      	movs	r0, #12
    e1fe:	f7ff fa13 	bl	d628 <am_hal_cachectrl_control>
    e202:	4b3f      	ldr	r3, [pc, #252]	; (e300 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e204:	699b      	ldr	r3, [r3, #24]
    e206:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e20a:	05db      	lsls	r3, r3, #23
    e20c:	d420      	bmi.n	e250 <am_hal_pwrctrl_low_power_init+0x104>
    e20e:	4c3b      	ldr	r4, [pc, #236]	; (e2fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e210:	68e3      	ldr	r3, [r4, #12]
    e212:	b2db      	uxtb	r3, r3
    e214:	2b11      	cmp	r3, #17
    e216:	d84e      	bhi.n	e2b6 <am_hal_pwrctrl_low_power_init+0x16a>
    e218:	4c38      	ldr	r4, [pc, #224]	; (e2fc <am_hal_pwrctrl_low_power_init+0x1b0>)
    e21a:	493a      	ldr	r1, [pc, #232]	; (e304 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e21c:	7e22      	ldrb	r2, [r4, #24]
    e21e:	2001      	movs	r0, #1
    e220:	4302      	orrs	r2, r0
    e222:	2307      	movs	r3, #7
    e224:	7622      	strb	r2, [r4, #24]
    e226:	9000      	str	r0, [sp, #0]
    e228:	461a      	mov	r2, r3
    e22a:	f242 7010 	movw	r0, #10000	; 0x2710
    e22e:	f7ff fc3f 	bl	dab0 <am_hal_flash_delay_status_check>
    e232:	2800      	cmp	r0, #0
    e234:	d15a      	bne.n	e2ec <am_hal_pwrctrl_low_power_init+0x1a0>
    e236:	4b32      	ldr	r3, [pc, #200]	; (e300 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e238:	681a      	ldr	r2, [r3, #0]
    e23a:	f042 0201 	orr.w	r2, r2, #1
    e23e:	601a      	str	r2, [r3, #0]
    e240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e246:	625a      	str	r2, [r3, #36]	; 0x24
    e248:	68e3      	ldr	r3, [r4, #12]
    e24a:	b2db      	uxtb	r3, r3
    e24c:	2b11      	cmp	r3, #17
    e24e:	d002      	beq.n	e256 <am_hal_pwrctrl_low_power_init+0x10a>
    e250:	2000      	movs	r0, #0
    e252:	b005      	add	sp, #20
    e254:	bd30      	pop	{r4, r5, pc}
    e256:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e25a:	f360 5356 	bfi	r3, r0, #21, #2
    e25e:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e262:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e266:	220f      	movs	r2, #15
    e268:	f362 138b 	bfi	r3, r2, #6, #6
    e26c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e270:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e274:	f362 0305 	bfi	r3, r2, #0, #6
    e278:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e27c:	b005      	add	sp, #20
    e27e:	bd30      	pop	{r4, r5, pc}
    e280:	f7ff fdd4 	bl	de2c <am_hal_interrupt_master_disable>
    e284:	9002      	str	r0, [sp, #8]
    e286:	68a3      	ldr	r3, [r4, #8]
    e288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e28c:	60a3      	str	r3, [r4, #8]
    e28e:	9802      	ldr	r0, [sp, #8]
    e290:	f7ff fdd0 	bl	de34 <am_hal_interrupt_master_set>
    e294:	20a0      	movs	r0, #160	; 0xa0
    e296:	f7ff fbfb 	bl	da90 <am_hal_flash_delay>
    e29a:	69a3      	ldr	r3, [r4, #24]
    e29c:	0619      	lsls	r1, r3, #24
    e29e:	d403      	bmi.n	e2a8 <am_hal_pwrctrl_low_power_init+0x15c>
    e2a0:	20a0      	movs	r0, #160	; 0xa0
    e2a2:	f7ff fbf5 	bl	da90 <am_hal_flash_delay>
    e2a6:	69a3      	ldr	r3, [r4, #24]
    e2a8:	4b15      	ldr	r3, [pc, #84]	; (e300 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e2aa:	699b      	ldr	r3, [r3, #24]
    e2ac:	061a      	lsls	r2, r3, #24
    e2ae:	f53f af5f 	bmi.w	e170 <am_hal_pwrctrl_low_power_init+0x24>
    e2b2:	2001      	movs	r0, #1
    e2b4:	e7cd      	b.n	e252 <am_hal_pwrctrl_low_power_init+0x106>
    e2b6:	f7ff fdb9 	bl	de2c <am_hal_interrupt_master_disable>
    e2ba:	9003      	str	r0, [sp, #12]
    e2bc:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e2c0:	2219      	movs	r2, #25
    e2c2:	f362 138b 	bfi	r3, r2, #6, #6
    e2c6:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e2ca:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e2ce:	210c      	movs	r1, #12
    e2d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e2d4:	f361 0205 	bfi	r2, r1, #0, #6
    e2d8:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e2dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e2de:	f365 5296 	bfi	r2, r5, #22, #1
    e2e2:	63da      	str	r2, [r3, #60]	; 0x3c
    e2e4:	9803      	ldr	r0, [sp, #12]
    e2e6:	f7ff fda5 	bl	de34 <am_hal_interrupt_master_set>
    e2ea:	e795      	b.n	e218 <am_hal_pwrctrl_low_power_init+0xcc>
    e2ec:	2004      	movs	r0, #4
    e2ee:	b005      	add	sp, #20
    e2f0:	bd30      	pop	{r4, r5, pc}
    e2f2:	bf00      	nop
    e2f4:	1000197c 	.word	0x1000197c
    e2f8:	4ffff000 	.word	0x4ffff000
    e2fc:	40020000 	.word	0x40020000
    e300:	40021000 	.word	0x40021000
    e304:	40020018 	.word	0x40020018

0000e308 <am_hal_reset_control>:
    e308:	2803      	cmp	r0, #3
    e30a:	d819      	bhi.n	e340 <am_hal_reset_control+0x38>
    e30c:	e8df f000 	tbb	[pc, r0]
    e310:	02080c12 	.word	0x02080c12
    e314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e318:	2201      	movs	r2, #1
    e31a:	615a      	str	r2, [r3, #20]
    e31c:	2000      	movs	r0, #0
    e31e:	4770      	bx	lr
    e320:	4b08      	ldr	r3, [pc, #32]	; (e344 <am_hal_reset_control+0x3c>)
    e322:	2000      	movs	r0, #0
    e324:	6018      	str	r0, [r3, #0]
    e326:	4770      	bx	lr
    e328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e32c:	221b      	movs	r2, #27
    e32e:	605a      	str	r2, [r3, #4]
    e330:	2000      	movs	r0, #0
    e332:	4770      	bx	lr
    e334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e338:	22d4      	movs	r2, #212	; 0xd4
    e33a:	609a      	str	r2, [r3, #8]
    e33c:	2000      	movs	r0, #0
    e33e:	4770      	bx	lr
    e340:	2006      	movs	r0, #6
    e342:	4770      	bx	lr
    e344:	4ffff000 	.word	0x4ffff000

0000e348 <am_hal_reset_status_get>:
    e348:	b390      	cbz	r0, e3b0 <am_hal_reset_status_get+0x68>
    e34a:	491a      	ldr	r1, [pc, #104]	; (e3b4 <am_hal_reset_status_get+0x6c>)
    e34c:	680b      	ldr	r3, [r1, #0]
    e34e:	b500      	push	{lr}
    e350:	4602      	mov	r2, r0
    e352:	b913      	cbnz	r3, e35a <am_hal_reset_status_get+0x12>
    e354:	4b18      	ldr	r3, [pc, #96]	; (e3b8 <am_hal_reset_status_get+0x70>)
    e356:	681b      	ldr	r3, [r3, #0]
    e358:	600b      	str	r3, [r1, #0]
    e35a:	f3c3 0140 	ubfx	r1, r3, #1, #1
    e35e:	70d1      	strb	r1, [r2, #3]
    e360:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    e364:	f003 0c01 	and.w	ip, r3, #1
    e368:	f3c3 0080 	ubfx	r0, r3, #2, #1
    e36c:	7151      	strb	r1, [r2, #5]
    e36e:	f3c3 1140 	ubfx	r1, r3, #5, #1
    e372:	f882 c002 	strb.w	ip, [r2, #2]
    e376:	7110      	strb	r0, [r2, #4]
    e378:	f3c3 1c00 	ubfx	ip, r3, #4, #1
    e37c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e380:	71d1      	strb	r1, [r2, #7]
    e382:	f3c3 11c0 	ubfx	r1, r3, #7, #1
    e386:	f882 c006 	strb.w	ip, [r2, #6]
    e38a:	f3c3 2e00 	ubfx	lr, r3, #8, #1
    e38e:	7210      	strb	r0, [r2, #8]
    e390:	7251      	strb	r1, [r2, #9]
    e392:	f3c3 2c40 	ubfx	ip, r3, #9, #1
    e396:	f3c3 2180 	ubfx	r1, r3, #10, #1
    e39a:	fab3 f083 	clz	r0, r3
    e39e:	8013      	strh	r3, [r2, #0]
    e3a0:	f882 e00a 	strb.w	lr, [r2, #10]
    e3a4:	f882 c00b 	strb.w	ip, [r2, #11]
    e3a8:	7311      	strb	r1, [r2, #12]
    e3aa:	0940      	lsrs	r0, r0, #5
    e3ac:	f85d fb04 	ldr.w	pc, [sp], #4
    e3b0:	2006      	movs	r0, #6
    e3b2:	4770      	bx	lr
    e3b4:	1000197c 	.word	0x1000197c
    e3b8:	4ffff000 	.word	0x4ffff000

0000e3bc <am_hal_rtc_osc_disable>:
    e3bc:	4a03      	ldr	r2, [pc, #12]	; (e3cc <am_hal_rtc_osc_disable+0x10>)
    e3be:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e3c2:	f043 0310 	orr.w	r3, r3, #16
    e3c6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e3ca:	4770      	bx	lr
    e3cc:	40004200 	.word	0x40004200

0000e3d0 <am_hal_sysctrl_sleep>:
    e3d0:	b510      	push	{r4, lr}
    e3d2:	b082      	sub	sp, #8
    e3d4:	4604      	mov	r4, r0
    e3d6:	f7ff fd29 	bl	de2c <am_hal_interrupt_master_disable>
    e3da:	9001      	str	r0, [sp, #4]
    e3dc:	b124      	cbz	r4, e3e8 <am_hal_sysctrl_sleep+0x18>
    e3de:	4b12      	ldr	r3, [pc, #72]	; (e428 <am_hal_sysctrl_sleep+0x58>)
    e3e0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e3e4:	07db      	lsls	r3, r3, #31
    e3e6:	d513      	bpl.n	e410 <am_hal_sysctrl_sleep+0x40>
    e3e8:	4a10      	ldr	r2, [pc, #64]	; (e42c <am_hal_sysctrl_sleep+0x5c>)
    e3ea:	6913      	ldr	r3, [r2, #16]
    e3ec:	f023 0304 	bic.w	r3, r3, #4
    e3f0:	6113      	str	r3, [r2, #16]
    e3f2:	f3bf 8f4f 	dsb	sy
    e3f6:	4a0e      	ldr	r2, [pc, #56]	; (e430 <am_hal_sysctrl_sleep+0x60>)
    e3f8:	4b0e      	ldr	r3, [pc, #56]	; (e434 <am_hal_sysctrl_sleep+0x64>)
    e3fa:	6812      	ldr	r2, [r2, #0]
    e3fc:	601a      	str	r2, [r3, #0]
    e3fe:	bf30      	wfi
    e400:	f3bf 8f6f 	isb	sy
    e404:	9801      	ldr	r0, [sp, #4]
    e406:	b002      	add	sp, #8
    e408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e40c:	f7ff bd12 	b.w	de34 <am_hal_interrupt_master_set>
    e410:	4b09      	ldr	r3, [pc, #36]	; (e438 <am_hal_sysctrl_sleep+0x68>)
    e412:	681a      	ldr	r2, [r3, #0]
    e414:	b912      	cbnz	r2, e41c <am_hal_sysctrl_sleep+0x4c>
    e416:	4a09      	ldr	r2, [pc, #36]	; (e43c <am_hal_sysctrl_sleep+0x6c>)
    e418:	6812      	ldr	r2, [r2, #0]
    e41a:	601a      	str	r2, [r3, #0]
    e41c:	4a03      	ldr	r2, [pc, #12]	; (e42c <am_hal_sysctrl_sleep+0x5c>)
    e41e:	6913      	ldr	r3, [r2, #16]
    e420:	f043 0304 	orr.w	r3, r3, #4
    e424:	6113      	str	r3, [r2, #16]
    e426:	e7e4      	b.n	e3f2 <am_hal_sysctrl_sleep+0x22>
    e428:	40020000 	.word	0x40020000
    e42c:	e000ed00 	.word	0xe000ed00
    e430:	5fff0000 	.word	0x5fff0000
    e434:	10001980 	.word	0x10001980
    e438:	1000197c 	.word	0x1000197c
    e43c:	4ffff000 	.word	0x4ffff000

0000e440 <am_hal_tpiu_enable>:
    e440:	b510      	push	{r4, lr}
    e442:	4b23      	ldr	r3, [pc, #140]	; (e4d0 <am_hal_tpiu_enable+0x90>)
    e444:	6804      	ldr	r4, [r0, #0]
    e446:	2200      	movs	r2, #0
    e448:	b084      	sub	sp, #16
    e44a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e44e:	b334      	cbz	r4, e49e <am_hal_tpiu_enable+0x5e>
    e450:	4a20      	ldr	r2, [pc, #128]	; (e4d4 <am_hal_tpiu_enable+0x94>)
    e452:	4921      	ldr	r1, [pc, #132]	; (e4d8 <am_hal_tpiu_enable+0x98>)
    e454:	2001      	movs	r0, #1
    e456:	6058      	str	r0, [r3, #4]
    e458:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e45c:	a801      	add	r0, sp, #4
    e45e:	428b      	cmp	r3, r1
    e460:	bf88      	it	hi
    e462:	4614      	movhi	r4, r2
    e464:	f7ff faf6 	bl	da54 <am_hal_clkgen_status_get>
    e468:	9b01      	ldr	r3, [sp, #4]
    e46a:	1c5a      	adds	r2, r3, #1
    e46c:	d02d      	beq.n	e4ca <am_hal_tpiu_enable+0x8a>
    e46e:	08db      	lsrs	r3, r3, #3
    e470:	fbb3 f4f4 	udiv	r4, r3, r4
    e474:	3c01      	subs	r4, #1
    e476:	b2a4      	uxth	r4, r4
    e478:	4b15      	ldr	r3, [pc, #84]	; (e4d0 <am_hal_tpiu_enable+0x90>)
    e47a:	4a18      	ldr	r2, [pc, #96]	; (e4dc <am_hal_tpiu_enable+0x9c>)
    e47c:	611c      	str	r4, [r3, #16]
    e47e:	2102      	movs	r1, #2
    e480:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e484:	2000      	movs	r0, #0
    e486:	f240 2101 	movw	r1, #513	; 0x201
    e48a:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e48e:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e492:	f44f 7048 	mov.w	r0, #800	; 0x320
    e496:	f7ff fafb 	bl	da90 <am_hal_flash_delay>
    e49a:	b004      	add	sp, #16
    e49c:	bd10      	pop	{r4, pc}
    e49e:	6902      	ldr	r2, [r0, #16]
    e4a0:	611a      	str	r2, [r3, #16]
    e4a2:	6882      	ldr	r2, [r0, #8]
    e4a4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e4a8:	68c1      	ldr	r1, [r0, #12]
    e4aa:	2201      	movs	r2, #1
    e4ac:	3901      	subs	r1, #1
    e4ae:	408a      	lsls	r2, r1
    e4b0:	605a      	str	r2, [r3, #4]
    e4b2:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e4b6:	4a09      	ldr	r2, [pc, #36]	; (e4dc <am_hal_tpiu_enable+0x9c>)
    e4b8:	6843      	ldr	r3, [r0, #4]
    e4ba:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e4be:	f44f 7048 	mov.w	r0, #800	; 0x320
    e4c2:	f7ff fae5 	bl	da90 <am_hal_flash_delay>
    e4c6:	b004      	add	sp, #16
    e4c8:	bd10      	pop	{r4, pc}
    e4ca:	2405      	movs	r4, #5
    e4cc:	e7d4      	b.n	e478 <am_hal_tpiu_enable+0x38>
    e4ce:	bf00      	nop
    e4d0:	e0040000 	.word	0xe0040000
    e4d4:	000f4240 	.word	0x000f4240
    e4d8:	001da380 	.word	0x001da380
    e4dc:	40020000 	.word	0x40020000

0000e4e0 <am_hal_uart_initialize>:
    e4e0:	2801      	cmp	r0, #1
    e4e2:	d81a      	bhi.n	e51a <am_hal_uart_initialize+0x3a>
    e4e4:	b1e9      	cbz	r1, e522 <am_hal_uart_initialize+0x42>
    e4e6:	b530      	push	{r4, r5, lr}
    e4e8:	2264      	movs	r2, #100	; 0x64
    e4ea:	4d0f      	ldr	r5, [pc, #60]	; (e528 <am_hal_uart_initialize+0x48>)
    e4ec:	fb00 f202 	mul.w	r2, r0, r2
    e4f0:	18ac      	adds	r4, r5, r2
    e4f2:	78e3      	ldrb	r3, [r4, #3]
    e4f4:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    e4f8:	f013 0301 	ands.w	r3, r3, #1
    e4fc:	d10f      	bne.n	e51e <am_hal_uart_initialize+0x3e>
    e4fe:	6260      	str	r0, [r4, #36]	; 0x24
    e500:	58a8      	ldr	r0, [r5, r2]
    e502:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    e506:	4809      	ldr	r0, [pc, #36]	; (e52c <am_hal_uart_initialize+0x4c>)
    e508:	ea4c 0000 	orr.w	r0, ip, r0
    e50c:	50a8      	str	r0, [r5, r2]
    e50e:	f884 e004 	strb.w	lr, [r4, #4]
    e512:	6623      	str	r3, [r4, #96]	; 0x60
    e514:	4618      	mov	r0, r3
    e516:	600c      	str	r4, [r1, #0]
    e518:	bd30      	pop	{r4, r5, pc}
    e51a:	2005      	movs	r0, #5
    e51c:	4770      	bx	lr
    e51e:	2007      	movs	r0, #7
    e520:	bd30      	pop	{r4, r5, pc}
    e522:	2006      	movs	r0, #6
    e524:	4770      	bx	lr
    e526:	bf00      	nop
    e528:	10001984 	.word	0x10001984
    e52c:	01ea9e06 	.word	0x01ea9e06

0000e530 <am_hal_uart_deinitialize>:
    e530:	b170      	cbz	r0, e550 <am_hal_uart_deinitialize+0x20>
    e532:	6803      	ldr	r3, [r0, #0]
    e534:	4a07      	ldr	r2, [pc, #28]	; (e554 <am_hal_uart_deinitialize+0x24>)
    e536:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e53a:	4293      	cmp	r3, r2
    e53c:	d108      	bne.n	e550 <am_hal_uart_deinitialize+0x20>
    e53e:	78c2      	ldrb	r2, [r0, #3]
    e540:	2300      	movs	r3, #0
    e542:	f36f 0200 	bfc	r2, #0, #1
    e546:	70c2      	strb	r2, [r0, #3]
    e548:	6243      	str	r3, [r0, #36]	; 0x24
    e54a:	7103      	strb	r3, [r0, #4]
    e54c:	4618      	mov	r0, r3
    e54e:	4770      	bx	lr
    e550:	2002      	movs	r0, #2
    e552:	4770      	bx	lr
    e554:	01ea9e06 	.word	0x01ea9e06

0000e558 <am_hal_uart_power_control>:
    e558:	b5f0      	push	{r4, r5, r6, r7, lr}
    e55a:	4604      	mov	r4, r0
    e55c:	6800      	ldr	r0, [r0, #0]
    e55e:	4b39      	ldr	r3, [pc, #228]	; (e644 <am_hal_uart_power_control+0xec>)
    e560:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e564:	429e      	cmp	r6, r3
    e566:	b085      	sub	sp, #20
    e568:	d13f      	bne.n	e5ea <am_hal_uart_power_control+0x92>
    e56a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e56c:	f105 0008 	add.w	r0, r5, #8
    e570:	b2c7      	uxtb	r7, r0
    e572:	b189      	cbz	r1, e598 <am_hal_uart_power_control+0x40>
    e574:	3901      	subs	r1, #1
    e576:	2901      	cmp	r1, #1
    e578:	d834      	bhi.n	e5e4 <am_hal_uart_power_control+0x8c>
    e57a:	2a00      	cmp	r2, #0
    e57c:	d138      	bne.n	e5f0 <am_hal_uart_power_control+0x98>
    e57e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e582:	351c      	adds	r5, #28
    e584:	032d      	lsls	r5, r5, #12
    e586:	f04f 33ff 	mov.w	r3, #4294967295
    e58a:	646b      	str	r3, [r5, #68]	; 0x44
    e58c:	4638      	mov	r0, r7
    e58e:	f7ff fdb1 	bl	e0f4 <am_hal_pwrctrl_periph_disable>
    e592:	2000      	movs	r0, #0
    e594:	b005      	add	sp, #20
    e596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e598:	2a00      	cmp	r2, #0
    e59a:	d04a      	beq.n	e632 <am_hal_uart_power_control+0xda>
    e59c:	7923      	ldrb	r3, [r4, #4]
    e59e:	2b00      	cmp	r3, #0
    e5a0:	d04e      	beq.n	e640 <am_hal_uart_power_control+0xe8>
    e5a2:	4638      	mov	r0, r7
    e5a4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e5a8:	9101      	str	r1, [sp, #4]
    e5aa:	351c      	adds	r5, #28
    e5ac:	f7ff fd78 	bl	e0a0 <am_hal_pwrctrl_periph_enable>
    e5b0:	f7ff fc3c 	bl	de2c <am_hal_interrupt_master_disable>
    e5b4:	032d      	lsls	r5, r5, #12
    e5b6:	68a3      	ldr	r3, [r4, #8]
    e5b8:	9002      	str	r0, [sp, #8]
    e5ba:	622b      	str	r3, [r5, #32]
    e5bc:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e5c0:	626a      	str	r2, [r5, #36]	; 0x24
    e5c2:	62ab      	str	r3, [r5, #40]	; 0x28
    e5c4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e5c8:	62ea      	str	r2, [r5, #44]	; 0x2c
    e5ca:	632b      	str	r3, [r5, #48]	; 0x30
    e5cc:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e5d0:	9901      	ldr	r1, [sp, #4]
    e5d2:	636a      	str	r2, [r5, #52]	; 0x34
    e5d4:	63ab      	str	r3, [r5, #56]	; 0x38
    e5d6:	9802      	ldr	r0, [sp, #8]
    e5d8:	7121      	strb	r1, [r4, #4]
    e5da:	f7ff fc2b 	bl	de34 <am_hal_interrupt_master_set>
    e5de:	9901      	ldr	r1, [sp, #4]
    e5e0:	4608      	mov	r0, r1
    e5e2:	e000      	b.n	e5e6 <am_hal_uart_power_control+0x8e>
    e5e4:	2006      	movs	r0, #6
    e5e6:	b005      	add	sp, #20
    e5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5ea:	2002      	movs	r0, #2
    e5ec:	b005      	add	sp, #20
    e5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5f0:	f7ff fc1c 	bl	de2c <am_hal_interrupt_master_disable>
    e5f4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e5f8:	351c      	adds	r5, #28
    e5fa:	032d      	lsls	r5, r5, #12
    e5fc:	9003      	str	r0, [sp, #12]
    e5fe:	6a2b      	ldr	r3, [r5, #32]
    e600:	60a3      	str	r3, [r4, #8]
    e602:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e604:	60e3      	str	r3, [r4, #12]
    e606:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e608:	6123      	str	r3, [r4, #16]
    e60a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e60c:	6163      	str	r3, [r4, #20]
    e60e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e610:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e612:	61a3      	str	r3, [r4, #24]
    e614:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e616:	61e2      	str	r2, [r4, #28]
    e618:	2201      	movs	r2, #1
    e61a:	6223      	str	r3, [r4, #32]
    e61c:	9803      	ldr	r0, [sp, #12]
    e61e:	7122      	strb	r2, [r4, #4]
    e620:	f7ff fc08 	bl	de34 <am_hal_interrupt_master_set>
    e624:	6823      	ldr	r3, [r4, #0]
    e626:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e62a:	42b3      	cmp	r3, r6
    e62c:	d1ae      	bne.n	e58c <am_hal_uart_power_control+0x34>
    e62e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e630:	e7a5      	b.n	e57e <am_hal_uart_power_control+0x26>
    e632:	4638      	mov	r0, r7
    e634:	9201      	str	r2, [sp, #4]
    e636:	f7ff fd33 	bl	e0a0 <am_hal_pwrctrl_periph_enable>
    e63a:	9a01      	ldr	r2, [sp, #4]
    e63c:	4610      	mov	r0, r2
    e63e:	e7d2      	b.n	e5e6 <am_hal_uart_power_control+0x8e>
    e640:	2007      	movs	r0, #7
    e642:	e7d0      	b.n	e5e6 <am_hal_uart_power_control+0x8e>
    e644:	01ea9e06 	.word	0x01ea9e06

0000e648 <am_hal_uart_configure>:
    e648:	6803      	ldr	r3, [r0, #0]
    e64a:	4a78      	ldr	r2, [pc, #480]	; (e82c <am_hal_uart_configure+0x1e4>)
    e64c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e650:	4293      	cmp	r3, r2
    e652:	d001      	beq.n	e658 <am_hal_uart_configure+0x10>
    e654:	2002      	movs	r0, #2
    e656:	4770      	bx	lr
    e658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e65c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e65e:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e662:	341c      	adds	r4, #28
    e664:	0324      	lsls	r4, r4, #12
    e666:	2700      	movs	r7, #0
    e668:	b084      	sub	sp, #16
    e66a:	6327      	str	r7, [r4, #48]	; 0x30
    e66c:	460e      	mov	r6, r1
    e66e:	4605      	mov	r5, r0
    e670:	f7ff fbdc 	bl	de2c <am_hal_interrupt_master_disable>
    e674:	9001      	str	r0, [sp, #4]
    e676:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e678:	f043 0308 	orr.w	r3, r3, #8
    e67c:	8623      	strh	r3, [r4, #48]	; 0x30
    e67e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e680:	2201      	movs	r2, #1
    e682:	f362 1306 	bfi	r3, r2, #4, #3
    e686:	8623      	strh	r3, [r4, #48]	; 0x30
    e688:	9801      	ldr	r0, [sp, #4]
    e68a:	f7ff fbd3 	bl	de34 <am_hal_interrupt_master_set>
    e68e:	f7ff fbcd 	bl	de2c <am_hal_interrupt_master_disable>
    e692:	9002      	str	r0, [sp, #8]
    e694:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e696:	f367 0300 	bfi	r3, r7, #0, #1
    e69a:	8623      	strh	r3, [r4, #48]	; 0x30
    e69c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e69e:	f367 2349 	bfi	r3, r7, #9, #1
    e6a2:	8623      	strh	r3, [r4, #48]	; 0x30
    e6a4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e6a6:	f367 2308 	bfi	r3, r7, #8, #1
    e6aa:	8623      	strh	r3, [r4, #48]	; 0x30
    e6ac:	9802      	ldr	r0, [sp, #8]
    e6ae:	f7ff fbc1 	bl	de34 <am_hal_interrupt_master_set>
    e6b2:	4b5f      	ldr	r3, [pc, #380]	; (e830 <am_hal_uart_configure+0x1e8>)
    e6b4:	6832      	ldr	r2, [r6, #0]
    e6b6:	68db      	ldr	r3, [r3, #12]
    e6b8:	b2db      	uxtb	r3, r3
    e6ba:	2b12      	cmp	r3, #18
    e6bc:	d076      	beq.n	e7ac <am_hal_uart_configure+0x164>
    e6be:	4b5c      	ldr	r3, [pc, #368]	; (e830 <am_hal_uart_configure+0x1e8>)
    e6c0:	68db      	ldr	r3, [r3, #12]
    e6c2:	b2db      	uxtb	r3, r3
    e6c4:	2b20      	cmp	r3, #32
    e6c6:	d902      	bls.n	e6ce <am_hal_uart_configure+0x86>
    e6c8:	4b5a      	ldr	r3, [pc, #360]	; (e834 <am_hal_uart_configure+0x1ec>)
    e6ca:	429a      	cmp	r2, r3
    e6cc:	d871      	bhi.n	e7b2 <am_hal_uart_configure+0x16a>
    e6ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e6d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e6d4:	3b01      	subs	r3, #1
    e6d6:	b2db      	uxtb	r3, r3
    e6d8:	2b03      	cmp	r3, #3
    e6da:	d86c      	bhi.n	e7b6 <am_hal_uart_configure+0x16e>
    e6dc:	4956      	ldr	r1, [pc, #344]	; (e838 <am_hal_uart_configure+0x1f0>)
    e6de:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e6e2:	0112      	lsls	r2, r2, #4
    e6e4:	4291      	cmp	r1, r2
    e6e6:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e6ea:	fbb1 f0f2 	udiv	r0, r1, r2
    e6ee:	fbb3 f3f2 	udiv	r3, r3, r2
    e6f2:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e6f6:	d364      	bcc.n	e7c2 <am_hal_uart_configure+0x17a>
    e6f8:	6260      	str	r0, [r4, #36]	; 0x24
    e6fa:	6260      	str	r0, [r4, #36]	; 0x24
    e6fc:	62a3      	str	r3, [r4, #40]	; 0x28
    e6fe:	089b      	lsrs	r3, r3, #2
    e700:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    e704:	fbb1 f3f3 	udiv	r3, r1, r3
    e708:	662b      	str	r3, [r5, #96]	; 0x60
    e70a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e70c:	f36f 338e 	bfc	r3, #14, #1
    e710:	8623      	strh	r3, [r4, #48]	; 0x30
    e712:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e714:	f36f 33cf 	bfc	r3, #15, #1
    e718:	8623      	strh	r3, [r4, #48]	; 0x30
    e71a:	6933      	ldr	r3, [r6, #16]
    e71c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e71e:	6971      	ldr	r1, [r6, #20]
    e720:	431a      	orrs	r2, r3
    e722:	6873      	ldr	r3, [r6, #4]
    e724:	6322      	str	r2, [r4, #48]	; 0x30
    e726:	68f2      	ldr	r2, [r6, #12]
    e728:	6361      	str	r1, [r4, #52]	; 0x34
    e72a:	4313      	orrs	r3, r2
    e72c:	68b2      	ldr	r2, [r6, #8]
    e72e:	4313      	orrs	r3, r2
    e730:	f043 0310 	orr.w	r3, r3, #16
    e734:	62e3      	str	r3, [r4, #44]	; 0x2c
    e736:	f7ff fb79 	bl	de2c <am_hal_interrupt_master_disable>
    e73a:	9003      	str	r0, [sp, #12]
    e73c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e73e:	f043 0301 	orr.w	r3, r3, #1
    e742:	8623      	strh	r3, [r4, #48]	; 0x30
    e744:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e74a:	8623      	strh	r3, [r4, #48]	; 0x30
    e74c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e74e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e752:	8623      	strh	r3, [r4, #48]	; 0x30
    e754:	9803      	ldr	r0, [sp, #12]
    e756:	f7ff fb6d 	bl	de34 <am_hal_interrupt_master_set>
    e75a:	682a      	ldr	r2, [r5, #0]
    e75c:	4b33      	ldr	r3, [pc, #204]	; (e82c <am_hal_uart_configure+0x1e4>)
    e75e:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e762:	4598      	cmp	r8, r3
    e764:	d11e      	bne.n	e7a4 <am_hal_uart_configure+0x15c>
    e766:	69b1      	ldr	r1, [r6, #24]
    e768:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    e76c:	b109      	cbz	r1, e772 <am_hal_uart_configure+0x12a>
    e76e:	69f3      	ldr	r3, [r6, #28]
    e770:	bb5b      	cbnz	r3, e7ca <am_hal_uart_configure+0x182>
    e772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e774:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e778:	331c      	adds	r3, #28
    e77a:	031b      	lsls	r3, r3, #12
    e77c:	2200      	movs	r2, #0
    e77e:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e784:	f022 0220 	bic.w	r2, r2, #32
    e788:	639a      	str	r2, [r3, #56]	; 0x38
    e78a:	b10c      	cbz	r4, e790 <am_hal_uart_configure+0x148>
    e78c:	2f00      	cmp	r7, #0
    e78e:	d132      	bne.n	e7f6 <am_hal_uart_configure+0x1ae>
    e790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e792:	2000      	movs	r0, #0
    e794:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e798:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e79c:	639a      	str	r2, [r3, #56]	; 0x38
    e79e:	b004      	add	sp, #16
    e7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7a4:	2000      	movs	r0, #0
    e7a6:	b004      	add	sp, #16
    e7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7ac:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e7b0:	d985      	bls.n	e6be <am_hal_uart_configure+0x76>
    e7b2:	4822      	ldr	r0, [pc, #136]	; (e83c <am_hal_uart_configure+0x1f4>)
    e7b4:	e7f3      	b.n	e79e <am_hal_uart_configure+0x156>
    e7b6:	4822      	ldr	r0, [pc, #136]	; (e840 <am_hal_uart_configure+0x1f8>)
    e7b8:	2300      	movs	r3, #0
    e7ba:	662b      	str	r3, [r5, #96]	; 0x60
    e7bc:	b004      	add	sp, #16
    e7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7c2:	2300      	movs	r3, #0
    e7c4:	481d      	ldr	r0, [pc, #116]	; (e83c <am_hal_uart_configure+0x1f4>)
    e7c6:	662b      	str	r3, [r5, #96]	; 0x60
    e7c8:	e7e9      	b.n	e79e <am_hal_uart_configure+0x156>
    e7ca:	2201      	movs	r2, #1
    e7cc:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e7d0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e7d4:	f000 faa6 	bl	ed24 <am_hal_queue_init>
    e7d8:	682b      	ldr	r3, [r5, #0]
    e7da:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7de:	4543      	cmp	r3, r8
    e7e0:	d1e0      	bne.n	e7a4 <am_hal_uart_configure+0x15c>
    e7e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e7e4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e7e8:	331c      	adds	r3, #28
    e7ea:	031b      	lsls	r3, r3, #12
    e7ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e7ee:	f042 0220 	orr.w	r2, r2, #32
    e7f2:	639a      	str	r2, [r3, #56]	; 0x38
    e7f4:	e7c9      	b.n	e78a <am_hal_uart_configure+0x142>
    e7f6:	2201      	movs	r2, #1
    e7f8:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    e7fc:	463b      	mov	r3, r7
    e7fe:	4621      	mov	r1, r4
    e800:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e804:	f000 fa8e 	bl	ed24 <am_hal_queue_init>
    e808:	682b      	ldr	r3, [r5, #0]
    e80a:	4a08      	ldr	r2, [pc, #32]	; (e82c <am_hal_uart_configure+0x1e4>)
    e80c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e810:	4293      	cmp	r3, r2
    e812:	d1c7      	bne.n	e7a4 <am_hal_uart_configure+0x15c>
    e814:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e816:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e81a:	331c      	adds	r3, #28
    e81c:	031b      	lsls	r3, r3, #12
    e81e:	2000      	movs	r0, #0
    e820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e822:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e826:	639a      	str	r2, [r3, #56]	; 0x38
    e828:	e7b9      	b.n	e79e <am_hal_uart_configure+0x156>
    e82a:	bf00      	nop
    e82c:	01ea9e06 	.word	0x01ea9e06
    e830:	40020000 	.word	0x40020000
    e834:	0016e360 	.word	0x0016e360
    e838:	0000f16c 	.word	0x0000f16c
    e83c:	08000003 	.word	0x08000003
    e840:	08000002 	.word	0x08000002

0000e844 <am_hal_uart_transfer>:
    e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e848:	ed2d 8b02 	vpush	{d8}
    e84c:	680d      	ldr	r5, [r1, #0]
    e84e:	b091      	sub	sp, #68	; 0x44
    e850:	4604      	mov	r4, r0
    e852:	b14d      	cbz	r5, e868 <am_hal_uart_transfer+0x24>
    e854:	2d01      	cmp	r5, #1
    e856:	f000 808f 	beq.w	e978 <am_hal_uart_transfer+0x134>
    e85a:	2507      	movs	r5, #7
    e85c:	4628      	mov	r0, r5
    e85e:	b011      	add	sp, #68	; 0x44
    e860:	ecbd 8b02 	vpop	{d8}
    e864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e868:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    e86c:	684b      	ldr	r3, [r1, #4]
    e86e:	690a      	ldr	r2, [r1, #16]
    e870:	9202      	str	r2, [sp, #8]
    e872:	4618      	mov	r0, r3
    e874:	f1b8 0f00 	cmp.w	r8, #0
    e878:	f000 8111 	beq.w	ea9e <am_hal_uart_transfer+0x25a>
    e87c:	f1bb 0f00 	cmp.w	fp, #0
    e880:	f000 8172 	beq.w	eb68 <am_hal_uart_transfer+0x324>
    e884:	2c00      	cmp	r4, #0
    e886:	f000 8165 	beq.w	eb54 <am_hal_uart_transfer+0x310>
    e88a:	46a9      	mov	r9, r5
    e88c:	462f      	mov	r7, r5
    e88e:	9501      	str	r5, [sp, #4]
    e890:	4625      	mov	r5, r4
    e892:	4619      	mov	r1, r3
    e894:	682a      	ldr	r2, [r5, #0]
    e896:	461c      	mov	r4, r3
    e898:	4bad      	ldr	r3, [pc, #692]	; (eb50 <am_hal_uart_transfer+0x30c>)
    e89a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e89e:	429a      	cmp	r2, r3
    e8a0:	465e      	mov	r6, fp
    e8a2:	d12d      	bne.n	e900 <am_hal_uart_transfer+0xbc>
    e8a4:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e8a8:	bb7a      	cbnz	r2, e90a <am_hal_uart_transfer+0xc6>
    e8aa:	1e48      	subs	r0, r1, #1
    e8ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e8ae:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e8b2:	311c      	adds	r1, #28
    e8b4:	0309      	lsls	r1, r1, #12
    e8b6:	698b      	ldr	r3, [r1, #24]
    e8b8:	069b      	lsls	r3, r3, #26
    e8ba:	d405      	bmi.n	e8c8 <am_hal_uart_transfer+0x84>
    e8bc:	3201      	adds	r2, #1
    e8be:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    e8c2:	600b      	str	r3, [r1, #0]
    e8c4:	4296      	cmp	r6, r2
    e8c6:	d8f6      	bhi.n	e8b6 <am_hal_uart_transfer+0x72>
    e8c8:	4417      	add	r7, r2
    e8ca:	1ab6      	subs	r6, r6, r2
    e8cc:	b936      	cbnz	r6, e8dc <am_hal_uart_transfer+0x98>
    e8ce:	9d01      	ldr	r5, [sp, #4]
    e8d0:	9b02      	ldr	r3, [sp, #8]
    e8d2:	2b00      	cmp	r3, #0
    e8d4:	f000 808c 	beq.w	e9f0 <am_hal_uart_transfer+0x1ac>
    e8d8:	601f      	str	r7, [r3, #0]
    e8da:	e7bf      	b.n	e85c <am_hal_uart_transfer+0x18>
    e8dc:	2010      	movs	r0, #16
    e8de:	f7ff f8d7 	bl	da90 <am_hal_flash_delay>
    e8e2:	f1b8 3fff 	cmp.w	r8, #4294967295
    e8e6:	bf18      	it	ne
    e8e8:	f109 0901 	addne.w	r9, r9, #1
    e8ec:	45c8      	cmp	r8, r9
    e8ee:	d9ee      	bls.n	e8ce <am_hal_uart_transfer+0x8a>
    e8f0:	682a      	ldr	r2, [r5, #0]
    e8f2:	4b97      	ldr	r3, [pc, #604]	; (eb50 <am_hal_uart_transfer+0x30c>)
    e8f4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e8f8:	429a      	cmp	r2, r3
    e8fa:	eb04 0107 	add.w	r1, r4, r7
    e8fe:	d0d1      	beq.n	e8a4 <am_hal_uart_transfer+0x60>
    e900:	9b02      	ldr	r3, [sp, #8]
    e902:	b103      	cbz	r3, e906 <am_hal_uart_transfer+0xc2>
    e904:	601f      	str	r7, [r3, #0]
    e906:	2502      	movs	r5, #2
    e908:	e7a8      	b.n	e85c <am_hal_uart_transfer+0x18>
    e90a:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    e90e:	1a12      	subs	r2, r2, r0
    e910:	42b2      	cmp	r2, r6
    e912:	4613      	mov	r3, r2
    e914:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    e918:	bf28      	it	cs
    e91a:	4633      	movcs	r3, r6
    e91c:	461a      	mov	r2, r3
    e91e:	4658      	mov	r0, fp
    e920:	9303      	str	r3, [sp, #12]
    e922:	f000 fa0b 	bl	ed3c <am_hal_queue_item_add>
    e926:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    e92a:	f7ff fa7f 	bl	de2c <am_hal_interrupt_master_disable>
    e92e:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    e932:	f10a 0a1c 	add.w	sl, sl, #28
    e936:	9008      	str	r0, [sp, #32]
    e938:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    e93c:	e00d      	b.n	e95a <am_hal_uart_transfer+0x116>
    e93e:	f000 fa3b 	bl	edb8 <am_hal_queue_item_get>
    e942:	b190      	cbz	r0, e96a <am_hal_uart_transfer+0x126>
    e944:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e946:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e94a:	321c      	adds	r2, #28
    e94c:	0312      	lsls	r2, r2, #12
    e94e:	6993      	ldr	r3, [r2, #24]
    e950:	0699      	lsls	r1, r3, #26
    e952:	bf5c      	itt	pl
    e954:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    e958:	6013      	strpl	r3, [r2, #0]
    e95a:	f8da 3018 	ldr.w	r3, [sl, #24]
    e95e:	069b      	lsls	r3, r3, #26
    e960:	f04f 0201 	mov.w	r2, #1
    e964:	a907      	add	r1, sp, #28
    e966:	4658      	mov	r0, fp
    e968:	d5e9      	bpl.n	e93e <am_hal_uart_transfer+0xfa>
    e96a:	9b03      	ldr	r3, [sp, #12]
    e96c:	9808      	ldr	r0, [sp, #32]
    e96e:	441f      	add	r7, r3
    e970:	1af6      	subs	r6, r6, r3
    e972:	f7ff fa5f 	bl	de34 <am_hal_interrupt_master_set>
    e976:	e7a9      	b.n	e8cc <am_hal_uart_transfer+0x88>
    e978:	68cd      	ldr	r5, [r1, #12]
    e97a:	690b      	ldr	r3, [r1, #16]
    e97c:	9301      	str	r3, [sp, #4]
    e97e:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    e982:	2d00      	cmp	r5, #0
    e984:	f000 80b5 	beq.w	eaf2 <am_hal_uart_transfer+0x2ae>
    e988:	2f00      	cmp	r7, #0
    e98a:	f000 811e 	beq.w	ebca <am_hal_uart_transfer+0x386>
    e98e:	2800      	cmp	r0, #0
    e990:	f000 80e7 	beq.w	eb62 <am_hal_uart_transfer+0x31e>
    e994:	6822      	ldr	r2, [r4, #0]
    e996:	f8df a1b8 	ldr.w	sl, [pc, #440]	; eb50 <am_hal_uart_transfer+0x30c>
    e99a:	f100 0348 	add.w	r3, r0, #72	; 0x48
    e99e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e9a2:	ee08 3a10 	vmov	s16, r3
    e9a6:	f04f 0900 	mov.w	r9, #0
    e9aa:	462b      	mov	r3, r5
    e9ac:	4552      	cmp	r2, sl
    e9ae:	46c8      	mov	r8, r9
    e9b0:	465d      	mov	r5, fp
    e9b2:	461e      	mov	r6, r3
    e9b4:	d133      	bne.n	ea1e <am_hal_uart_transfer+0x1da>
    e9b6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    e9ba:	2a00      	cmp	r2, #0
    e9bc:	d137      	bne.n	ea2e <am_hal_uart_transfer+0x1ea>
    e9be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e9c0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e9c4:	311c      	adds	r1, #28
    e9c6:	1e68      	subs	r0, r5, #1
    e9c8:	0309      	lsls	r1, r1, #12
    e9ca:	698b      	ldr	r3, [r1, #24]
    e9cc:	06dd      	lsls	r5, r3, #27
    e9ce:	d408      	bmi.n	e9e2 <am_hal_uart_transfer+0x19e>
    e9d0:	680b      	ldr	r3, [r1, #0]
    e9d2:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    e9d6:	d15e      	bne.n	ea96 <am_hal_uart_transfer+0x252>
    e9d8:	3201      	adds	r2, #1
    e9da:	4297      	cmp	r7, r2
    e9dc:	f800 3f01 	strb.w	r3, [r0, #1]!
    e9e0:	d8f3      	bhi.n	e9ca <am_hal_uart_transfer+0x186>
    e9e2:	4490      	add	r8, r2
    e9e4:	1abf      	subs	r7, r7, r2
    e9e6:	b957      	cbnz	r7, e9fe <am_hal_uart_transfer+0x1ba>
    e9e8:	9b01      	ldr	r3, [sp, #4]
    e9ea:	b10b      	cbz	r3, e9f0 <am_hal_uart_transfer+0x1ac>
    e9ec:	f8c3 8000 	str.w	r8, [r3]
    e9f0:	2500      	movs	r5, #0
    e9f2:	4628      	mov	r0, r5
    e9f4:	b011      	add	sp, #68	; 0x44
    e9f6:	ecbd 8b02 	vpop	{d8}
    e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9fe:	2010      	movs	r0, #16
    ea00:	f7ff f846 	bl	da90 <am_hal_flash_delay>
    ea04:	1c73      	adds	r3, r6, #1
    ea06:	bf18      	it	ne
    ea08:	f109 0901 	addne.w	r9, r9, #1
    ea0c:	454e      	cmp	r6, r9
    ea0e:	d9eb      	bls.n	e9e8 <am_hal_uart_transfer+0x1a4>
    ea10:	6822      	ldr	r2, [r4, #0]
    ea12:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ea16:	4552      	cmp	r2, sl
    ea18:	eb0b 0508 	add.w	r5, fp, r8
    ea1c:	d0cb      	beq.n	e9b6 <am_hal_uart_transfer+0x172>
    ea1e:	2502      	movs	r5, #2
    ea20:	9b01      	ldr	r3, [sp, #4]
    ea22:	2b00      	cmp	r3, #0
    ea24:	f43f af1a 	beq.w	e85c <am_hal_uart_transfer+0x18>
    ea28:	f8c3 8000 	str.w	r8, [r3]
    ea2c:	e716      	b.n	e85c <am_hal_uart_transfer+0x18>
    ea2e:	f7ff f9fd 	bl	de2c <am_hal_interrupt_master_disable>
    ea32:	9007      	str	r0, [sp, #28]
    ea34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ea36:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    ea3a:	301c      	adds	r0, #28
    ea3c:	0300      	lsls	r0, r0, #12
    ea3e:	f10d 0c20 	add.w	ip, sp, #32
    ea42:	2200      	movs	r2, #0
    ea44:	6983      	ldr	r3, [r0, #24]
    ea46:	06db      	lsls	r3, r3, #27
    ea48:	d409      	bmi.n	ea5e <am_hal_uart_transfer+0x21a>
    ea4a:	6803      	ldr	r3, [r0, #0]
    ea4c:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ea50:	f102 0201 	add.w	r2, r2, #1
    ea54:	d119      	bne.n	ea8a <am_hal_uart_transfer+0x246>
    ea56:	2a20      	cmp	r2, #32
    ea58:	f80c 3b01 	strb.w	r3, [ip], #1
    ea5c:	d1f2      	bne.n	ea44 <am_hal_uart_transfer+0x200>
    ea5e:	ee18 0a10 	vmov	r0, s16
    ea62:	a908      	add	r1, sp, #32
    ea64:	f000 f96a 	bl	ed3c <am_hal_queue_item_add>
    ea68:	2800      	cmp	r0, #0
    ea6a:	d075      	beq.n	eb58 <am_hal_uart_transfer+0x314>
    ea6c:	9807      	ldr	r0, [sp, #28]
    ea6e:	f7ff f9e1 	bl	de34 <am_hal_interrupt_master_set>
    ea72:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ea74:	42ba      	cmp	r2, r7
    ea76:	bf28      	it	cs
    ea78:	463a      	movcs	r2, r7
    ea7a:	ee18 0a10 	vmov	r0, s16
    ea7e:	4629      	mov	r1, r5
    ea80:	4490      	add	r8, r2
    ea82:	1abf      	subs	r7, r7, r2
    ea84:	f000 f998 	bl	edb8 <am_hal_queue_item_get>
    ea88:	e7ad      	b.n	e9e6 <am_hal_uart_transfer+0x1a2>
    ea8a:	9807      	ldr	r0, [sp, #28]
    ea8c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ea90:	f7ff f9d0 	bl	de34 <am_hal_interrupt_master_set>
    ea94:	e7c4      	b.n	ea20 <am_hal_uart_transfer+0x1dc>
    ea96:	4490      	add	r8, r2
    ea98:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ea9c:	e7c0      	b.n	ea20 <am_hal_uart_transfer+0x1dc>
    ea9e:	2c00      	cmp	r4, #0
    eaa0:	f43f af31 	beq.w	e906 <am_hal_uart_transfer+0xc2>
    eaa4:	6822      	ldr	r2, [r4, #0]
    eaa6:	492a      	ldr	r1, [pc, #168]	; (eb50 <am_hal_uart_transfer+0x30c>)
    eaa8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eaac:	428a      	cmp	r2, r1
    eaae:	f47f af2a 	bne.w	e906 <am_hal_uart_transfer+0xc2>
    eab2:	9b02      	ldr	r3, [sp, #8]
    eab4:	b10b      	cbz	r3, eaba <am_hal_uart_transfer+0x276>
    eab6:	f8c3 8000 	str.w	r8, [r3]
    eaba:	f1bb 0f00 	cmp.w	fp, #0
    eabe:	d097      	beq.n	e9f0 <am_hal_uart_transfer+0x1ac>
    eac0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    eac4:	2d00      	cmp	r5, #0
    eac6:	d151      	bne.n	eb6c <am_hal_uart_transfer+0x328>
    eac8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eaca:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    eace:	311c      	adds	r1, #28
    ead0:	1e42      	subs	r2, r0, #1
    ead2:	0309      	lsls	r1, r1, #12
    ead4:	698b      	ldr	r3, [r1, #24]
    ead6:	0698      	lsls	r0, r3, #26
    ead8:	d405      	bmi.n	eae6 <am_hal_uart_transfer+0x2a2>
    eada:	3501      	adds	r5, #1
    eadc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    eae0:	600b      	str	r3, [r1, #0]
    eae2:	45ab      	cmp	fp, r5
    eae4:	d1f6      	bne.n	ead4 <am_hal_uart_transfer+0x290>
    eae6:	9b02      	ldr	r3, [sp, #8]
    eae8:	2b00      	cmp	r3, #0
    eaea:	d081      	beq.n	e9f0 <am_hal_uart_transfer+0x1ac>
    eaec:	601d      	str	r5, [r3, #0]
    eaee:	2500      	movs	r5, #0
    eaf0:	e6b4      	b.n	e85c <am_hal_uart_transfer+0x18>
    eaf2:	2800      	cmp	r0, #0
    eaf4:	f43f af07 	beq.w	e906 <am_hal_uart_transfer+0xc2>
    eaf8:	6802      	ldr	r2, [r0, #0]
    eafa:	4915      	ldr	r1, [pc, #84]	; (eb50 <am_hal_uart_transfer+0x30c>)
    eafc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eb00:	428a      	cmp	r2, r1
    eb02:	f47f af00 	bne.w	e906 <am_hal_uart_transfer+0xc2>
    eb06:	b103      	cbz	r3, eb0a <am_hal_uart_transfer+0x2c6>
    eb08:	601d      	str	r5, [r3, #0]
    eb0a:	2f00      	cmp	r7, #0
    eb0c:	f43f af70 	beq.w	e9f0 <am_hal_uart_transfer+0x1ac>
    eb10:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    eb14:	2a00      	cmp	r2, #0
    eb16:	d15a      	bne.n	ebce <am_hal_uart_transfer+0x38a>
    eb18:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eb1a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    eb1e:	311c      	adds	r1, #28
    eb20:	f10b 33ff 	add.w	r3, fp, #4294967295
    eb24:	0309      	lsls	r1, r1, #12
    eb26:	4614      	mov	r4, r2
    eb28:	698a      	ldr	r2, [r1, #24]
    eb2a:	06d2      	lsls	r2, r2, #27
    eb2c:	d409      	bmi.n	eb42 <am_hal_uart_transfer+0x2fe>
    eb2e:	680a      	ldr	r2, [r1, #0]
    eb30:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    eb34:	d176      	bne.n	ec24 <am_hal_uart_transfer+0x3e0>
    eb36:	3401      	adds	r4, #1
    eb38:	42a7      	cmp	r7, r4
    eb3a:	f803 2f01 	strb.w	r2, [r3, #1]!
    eb3e:	d1f3      	bne.n	eb28 <am_hal_uart_transfer+0x2e4>
    eb40:	4605      	mov	r5, r0
    eb42:	9b01      	ldr	r3, [sp, #4]
    eb44:	2b00      	cmp	r3, #0
    eb46:	f43f ae89 	beq.w	e85c <am_hal_uart_transfer+0x18>
    eb4a:	601c      	str	r4, [r3, #0]
    eb4c:	e686      	b.n	e85c <am_hal_uart_transfer+0x18>
    eb4e:	bf00      	nop
    eb50:	01ea9e06 	.word	0x01ea9e06
    eb54:	4627      	mov	r7, r4
    eb56:	e6d3      	b.n	e900 <am_hal_uart_transfer+0xbc>
    eb58:	9807      	ldr	r0, [sp, #28]
    eb5a:	4d39      	ldr	r5, [pc, #228]	; (ec40 <am_hal_uart_transfer+0x3fc>)
    eb5c:	f7ff f96a 	bl	de34 <am_hal_interrupt_master_set>
    eb60:	e75e      	b.n	ea20 <am_hal_uart_transfer+0x1dc>
    eb62:	2502      	movs	r5, #2
    eb64:	4680      	mov	r8, r0
    eb66:	e75b      	b.n	ea20 <am_hal_uart_transfer+0x1dc>
    eb68:	462f      	mov	r7, r5
    eb6a:	e6b1      	b.n	e8d0 <am_hal_uart_transfer+0x8c>
    eb6c:	6b65      	ldr	r5, [r4, #52]	; 0x34
    eb6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    eb70:	1b52      	subs	r2, r2, r5
    eb72:	455a      	cmp	r2, fp
    eb74:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    eb78:	4601      	mov	r1, r0
    eb7a:	bf28      	it	cs
    eb7c:	465a      	movcs	r2, fp
    eb7e:	4638      	mov	r0, r7
    eb80:	4615      	mov	r5, r2
    eb82:	f000 f8db 	bl	ed3c <am_hal_queue_item_add>
    eb86:	6a66      	ldr	r6, [r4, #36]	; 0x24
    eb88:	f7ff f950 	bl	de2c <am_hal_interrupt_master_disable>
    eb8c:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    eb90:	361c      	adds	r6, #28
    eb92:	9005      	str	r0, [sp, #20]
    eb94:	0336      	lsls	r6, r6, #12
    eb96:	e00f      	b.n	ebb8 <am_hal_uart_transfer+0x374>
    eb98:	a908      	add	r1, sp, #32
    eb9a:	4638      	mov	r0, r7
    eb9c:	f000 f90c 	bl	edb8 <am_hal_queue_item_get>
    eba0:	b178      	cbz	r0, ebc2 <am_hal_uart_transfer+0x37e>
    eba2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    eba4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    eba8:	321c      	adds	r2, #28
    ebaa:	0312      	lsls	r2, r2, #12
    ebac:	6993      	ldr	r3, [r2, #24]
    ebae:	0699      	lsls	r1, r3, #26
    ebb0:	bf5c      	itt	pl
    ebb2:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    ebb6:	6013      	strpl	r3, [r2, #0]
    ebb8:	69b3      	ldr	r3, [r6, #24]
    ebba:	069b      	lsls	r3, r3, #26
    ebbc:	f04f 0201 	mov.w	r2, #1
    ebc0:	d5ea      	bpl.n	eb98 <am_hal_uart_transfer+0x354>
    ebc2:	9805      	ldr	r0, [sp, #20]
    ebc4:	f7ff f936 	bl	de34 <am_hal_interrupt_master_set>
    ebc8:	e78d      	b.n	eae6 <am_hal_uart_transfer+0x2a2>
    ebca:	46b8      	mov	r8, r7
    ebcc:	e70c      	b.n	e9e8 <am_hal_uart_transfer+0x1a4>
    ebce:	f7ff f92d 	bl	de2c <am_hal_interrupt_master_disable>
    ebd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ebd4:	9006      	str	r0, [sp, #24]
    ebd6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ebda:	311c      	adds	r1, #28
    ebdc:	0309      	lsls	r1, r1, #12
    ebde:	ae08      	add	r6, sp, #32
    ebe0:	2200      	movs	r2, #0
    ebe2:	698b      	ldr	r3, [r1, #24]
    ebe4:	06d8      	lsls	r0, r3, #27
    ebe6:	d409      	bmi.n	ebfc <am_hal_uart_transfer+0x3b8>
    ebe8:	680b      	ldr	r3, [r1, #0]
    ebea:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ebee:	f102 0201 	add.w	r2, r2, #1
    ebf2:	d11a      	bne.n	ec2a <am_hal_uart_transfer+0x3e6>
    ebf4:	2a20      	cmp	r2, #32
    ebf6:	f806 3b01 	strb.w	r3, [r6], #1
    ebfa:	d1f2      	bne.n	ebe2 <am_hal_uart_transfer+0x39e>
    ebfc:	f104 0648 	add.w	r6, r4, #72	; 0x48
    ec00:	a908      	add	r1, sp, #32
    ec02:	4630      	mov	r0, r6
    ec04:	f000 f89a 	bl	ed3c <am_hal_queue_item_add>
    ec08:	b1a8      	cbz	r0, ec36 <am_hal_uart_transfer+0x3f2>
    ec0a:	9806      	ldr	r0, [sp, #24]
    ec0c:	f7ff f912 	bl	de34 <am_hal_interrupt_master_set>
    ec10:	6d24      	ldr	r4, [r4, #80]	; 0x50
    ec12:	42bc      	cmp	r4, r7
    ec14:	bf28      	it	cs
    ec16:	463c      	movcs	r4, r7
    ec18:	4659      	mov	r1, fp
    ec1a:	4630      	mov	r0, r6
    ec1c:	4622      	mov	r2, r4
    ec1e:	f000 f8cb 	bl	edb8 <am_hal_queue_item_get>
    ec22:	e78e      	b.n	eb42 <am_hal_uart_transfer+0x2fe>
    ec24:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ec28:	e78b      	b.n	eb42 <am_hal_uart_transfer+0x2fe>
    ec2a:	9806      	ldr	r0, [sp, #24]
    ec2c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ec30:	f7ff f900 	bl	de34 <am_hal_interrupt_master_set>
    ec34:	e612      	b.n	e85c <am_hal_uart_transfer+0x18>
    ec36:	9806      	ldr	r0, [sp, #24]
    ec38:	4d01      	ldr	r5, [pc, #4]	; (ec40 <am_hal_uart_transfer+0x3fc>)
    ec3a:	f7ff f8fb 	bl	de34 <am_hal_interrupt_master_set>
    ec3e:	e60d      	b.n	e85c <am_hal_uart_transfer+0x18>
    ec40:	08000001 	.word	0x08000001

0000ec44 <am_hal_uart_tx_flush>:
    ec44:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ec48:	b570      	push	{r4, r5, r6, lr}
    ec4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    ec4c:	4604      	mov	r4, r0
    ec4e:	b15b      	cbz	r3, ec68 <am_hal_uart_tx_flush+0x24>
    ec50:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ec52:	b14b      	cbz	r3, ec68 <am_hal_uart_tx_flush+0x24>
    ec54:	4e0e      	ldr	r6, [pc, #56]	; (ec90 <am_hal_uart_tx_flush+0x4c>)
    ec56:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ec58:	fbb6 f0f0 	udiv	r0, r6, r0
    ec5c:	0100      	lsls	r0, r0, #4
    ec5e:	f7fe ff17 	bl	da90 <am_hal_flash_delay>
    ec62:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ec64:	2b00      	cmp	r3, #0
    ec66:	d1f6      	bne.n	ec56 <am_hal_uart_tx_flush+0x12>
    ec68:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ec6c:	351c      	adds	r5, #28
    ec6e:	032d      	lsls	r5, r5, #12
    ec70:	69ab      	ldr	r3, [r5, #24]
    ec72:	071a      	lsls	r2, r3, #28
    ec74:	d509      	bpl.n	ec8a <am_hal_uart_tx_flush+0x46>
    ec76:	4e06      	ldr	r6, [pc, #24]	; (ec90 <am_hal_uart_tx_flush+0x4c>)
    ec78:	6e23      	ldr	r3, [r4, #96]	; 0x60
    ec7a:	fbb6 f3f3 	udiv	r3, r6, r3
    ec7e:	0118      	lsls	r0, r3, #4
    ec80:	f7fe ff06 	bl	da90 <am_hal_flash_delay>
    ec84:	69ab      	ldr	r3, [r5, #24]
    ec86:	071b      	lsls	r3, r3, #28
    ec88:	d4f6      	bmi.n	ec78 <am_hal_uart_tx_flush+0x34>
    ec8a:	2000      	movs	r0, #0
    ec8c:	bd70      	pop	{r4, r5, r6, pc}
    ec8e:	bf00      	nop
    ec90:	00b71b00 	.word	0x00b71b00

0000ec94 <am_hal_wdt_init>:
    ec94:	8883      	ldrh	r3, [r0, #4]
    ec96:	88c2      	ldrh	r2, [r0, #6]
    ec98:	6801      	ldr	r1, [r0, #0]
    ec9a:	041b      	lsls	r3, r3, #16
    ec9c:	0212      	lsls	r2, r2, #8
    ec9e:	b410      	push	{r4}
    eca0:	b292      	uxth	r2, r2
    eca2:	4c16      	ldr	r4, [pc, #88]	; (ecfc <am_hal_wdt_init+0x68>)
    eca4:	f421 007f 	bic.w	r0, r1, #16711680	; 0xff0000
    eca8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    ecac:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
    ecb0:	4313      	orrs	r3, r2
    ecb2:	4303      	orrs	r3, r0
    ecb4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
    ecb8:	f011 0f02 	tst.w	r1, #2
    ecbc:	bf14      	ite	ne
    ecbe:	f040 0001 	orrne.w	r0, r0, #1
    ecc2:	f020 0001 	biceq.w	r0, r0, #1
    ecc6:	f001 0204 	and.w	r2, r1, #4
    ecca:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ecce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    ecd2:	b16a      	cbz	r2, ecf0 <am_hal_wdt_init+0x5c>
    ecd4:	6802      	ldr	r2, [r0, #0]
    ecd6:	f042 0202 	orr.w	r2, r2, #2
    ecda:	6002      	str	r2, [r0, #0]
    ecdc:	4a07      	ldr	r2, [pc, #28]	; (ecfc <am_hal_wdt_init+0x68>)
    ecde:	f85d 4b04 	ldr.w	r4, [sp], #4
    ece2:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    ece6:	bf08      	it	eq
    ece8:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
    ecec:	6013      	str	r3, [r2, #0]
    ecee:	4770      	bx	lr
    ecf0:	6802      	ldr	r2, [r0, #0]
    ecf2:	f022 0202 	bic.w	r2, r2, #2
    ecf6:	6002      	str	r2, [r0, #0]
    ecf8:	e7f0      	b.n	ecdc <am_hal_wdt_init+0x48>
    ecfa:	bf00      	nop
    ecfc:	40024000 	.word	0x40024000

0000ed00 <am_hal_wdt_start>:
    ed00:	4b03      	ldr	r3, [pc, #12]	; (ed10 <am_hal_wdt_start+0x10>)
    ed02:	681a      	ldr	r2, [r3, #0]
    ed04:	21b2      	movs	r1, #178	; 0xb2
    ed06:	f042 0201 	orr.w	r2, r2, #1
    ed0a:	601a      	str	r2, [r3, #0]
    ed0c:	6059      	str	r1, [r3, #4]
    ed0e:	4770      	bx	lr
    ed10:	40024000 	.word	0x40024000

0000ed14 <am_hal_wdt_int_clear>:
    ed14:	4b02      	ldr	r3, [pc, #8]	; (ed20 <am_hal_wdt_int_clear+0xc>)
    ed16:	2201      	movs	r2, #1
    ed18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    ed1c:	4770      	bx	lr
    ed1e:	bf00      	nop
    ed20:	40024000 	.word	0x40024000

0000ed24 <am_hal_queue_init>:
    ed24:	b410      	push	{r4}
    ed26:	2400      	movs	r4, #0
    ed28:	e9c0 4400 	strd	r4, r4, [r0]
    ed2c:	e9c0 4302 	strd	r4, r3, [r0, #8]
    ed30:	e9c0 2104 	strd	r2, r1, [r0, #16]
    ed34:	f85d 4b04 	ldr.w	r4, [sp], #4
    ed38:	4770      	bx	lr
    ed3a:	bf00      	nop

0000ed3c <am_hal_queue_item_add>:
    ed3c:	b570      	push	{r4, r5, r6, lr}
    ed3e:	6905      	ldr	r5, [r0, #16]
    ed40:	b082      	sub	sp, #8
    ed42:	4604      	mov	r4, r0
    ed44:	fb02 f505 	mul.w	r5, r2, r5
    ed48:	460e      	mov	r6, r1
    ed4a:	f7ff f86f 	bl	de2c <am_hal_interrupt_master_disable>
    ed4e:	68e2      	ldr	r2, [r4, #12]
    ed50:	9001      	str	r0, [sp, #4]
    ed52:	68a0      	ldr	r0, [r4, #8]
    ed54:	1a13      	subs	r3, r2, r0
    ed56:	42ab      	cmp	r3, r5
    ed58:	d31c      	bcc.n	ed94 <am_hal_queue_item_add+0x58>
    ed5a:	b195      	cbz	r5, ed82 <am_hal_queue_item_add+0x46>
    ed5c:	6823      	ldr	r3, [r4, #0]
    ed5e:	b306      	cbz	r6, eda2 <am_hal_queue_item_add+0x66>
    ed60:	1e71      	subs	r1, r6, #1
    ed62:	194e      	adds	r6, r1, r5
    ed64:	6962      	ldr	r2, [r4, #20]
    ed66:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ed6a:	54d0      	strb	r0, [r2, r3]
    ed6c:	6823      	ldr	r3, [r4, #0]
    ed6e:	68e0      	ldr	r0, [r4, #12]
    ed70:	3301      	adds	r3, #1
    ed72:	428e      	cmp	r6, r1
    ed74:	fbb3 f2f0 	udiv	r2, r3, r0
    ed78:	fb00 3312 	mls	r3, r0, r2, r3
    ed7c:	6023      	str	r3, [r4, #0]
    ed7e:	d1f1      	bne.n	ed64 <am_hal_queue_item_add+0x28>
    ed80:	68a0      	ldr	r0, [r4, #8]
    ed82:	4405      	add	r5, r0
    ed84:	60a5      	str	r5, [r4, #8]
    ed86:	9801      	ldr	r0, [sp, #4]
    ed88:	f7ff f854 	bl	de34 <am_hal_interrupt_master_set>
    ed8c:	2401      	movs	r4, #1
    ed8e:	4620      	mov	r0, r4
    ed90:	b002      	add	sp, #8
    ed92:	bd70      	pop	{r4, r5, r6, pc}
    ed94:	9801      	ldr	r0, [sp, #4]
    ed96:	f7ff f84d 	bl	de34 <am_hal_interrupt_master_set>
    ed9a:	2400      	movs	r4, #0
    ed9c:	4620      	mov	r0, r4
    ed9e:	b002      	add	sp, #8
    eda0:	bd70      	pop	{r4, r5, r6, pc}
    eda2:	4631      	mov	r1, r6
    eda4:	3101      	adds	r1, #1
    eda6:	3301      	adds	r3, #1
    eda8:	428d      	cmp	r5, r1
    edaa:	fbb3 f6f2 	udiv	r6, r3, r2
    edae:	fb02 3316 	mls	r3, r2, r6, r3
    edb2:	d1f7      	bne.n	eda4 <am_hal_queue_item_add+0x68>
    edb4:	6023      	str	r3, [r4, #0]
    edb6:	e7e4      	b.n	ed82 <am_hal_queue_item_add+0x46>

0000edb8 <am_hal_queue_item_get>:
    edb8:	b570      	push	{r4, r5, r6, lr}
    edba:	6905      	ldr	r5, [r0, #16]
    edbc:	4604      	mov	r4, r0
    edbe:	b082      	sub	sp, #8
    edc0:	fb02 f505 	mul.w	r5, r2, r5
    edc4:	460e      	mov	r6, r1
    edc6:	f7ff f831 	bl	de2c <am_hal_interrupt_master_disable>
    edca:	68a2      	ldr	r2, [r4, #8]
    edcc:	9001      	str	r0, [sp, #4]
    edce:	42aa      	cmp	r2, r5
    edd0:	d31c      	bcc.n	ee0c <am_hal_queue_item_get+0x54>
    edd2:	b195      	cbz	r5, edfa <am_hal_queue_item_get+0x42>
    edd4:	6863      	ldr	r3, [r4, #4]
    edd6:	b306      	cbz	r6, ee1a <am_hal_queue_item_get+0x62>
    edd8:	1e71      	subs	r1, r6, #1
    edda:	194e      	adds	r6, r1, r5
    eddc:	6962      	ldr	r2, [r4, #20]
    edde:	5cd3      	ldrb	r3, [r2, r3]
    ede0:	f801 3f01 	strb.w	r3, [r1, #1]!
    ede4:	6863      	ldr	r3, [r4, #4]
    ede6:	68e0      	ldr	r0, [r4, #12]
    ede8:	3301      	adds	r3, #1
    edea:	428e      	cmp	r6, r1
    edec:	fbb3 f2f0 	udiv	r2, r3, r0
    edf0:	fb00 3312 	mls	r3, r0, r2, r3
    edf4:	6063      	str	r3, [r4, #4]
    edf6:	d1f1      	bne.n	eddc <am_hal_queue_item_get+0x24>
    edf8:	68a2      	ldr	r2, [r4, #8]
    edfa:	9801      	ldr	r0, [sp, #4]
    edfc:	1b52      	subs	r2, r2, r5
    edfe:	60a2      	str	r2, [r4, #8]
    ee00:	f7ff f818 	bl	de34 <am_hal_interrupt_master_set>
    ee04:	2401      	movs	r4, #1
    ee06:	4620      	mov	r0, r4
    ee08:	b002      	add	sp, #8
    ee0a:	bd70      	pop	{r4, r5, r6, pc}
    ee0c:	9801      	ldr	r0, [sp, #4]
    ee0e:	f7ff f811 	bl	de34 <am_hal_interrupt_master_set>
    ee12:	2400      	movs	r4, #0
    ee14:	4620      	mov	r0, r4
    ee16:	b002      	add	sp, #8
    ee18:	bd70      	pop	{r4, r5, r6, pc}
    ee1a:	68e0      	ldr	r0, [r4, #12]
    ee1c:	4631      	mov	r1, r6
    ee1e:	3101      	adds	r1, #1
    ee20:	3301      	adds	r3, #1
    ee22:	42a9      	cmp	r1, r5
    ee24:	fbb3 f6f0 	udiv	r6, r3, r0
    ee28:	fb00 3316 	mls	r3, r0, r6, r3
    ee2c:	d1f7      	bne.n	ee1e <am_hal_queue_item_get+0x66>
    ee2e:	6063      	str	r3, [r4, #4]
    ee30:	e7e3      	b.n	edfa <am_hal_queue_item_get+0x42>
    ee32:	bf00      	nop
    ee34:	65746e49 	.word	0x65746e49
    ee38:	70757272 	.word	0x70757272
    ee3c:	3a232074 	.word	0x3a232074
    ee40:	0a642520 	.word	0x0a642520
    ee44:	00000000 	.word	0x00000000
    ee48:	63746157 	.word	0x63746157
    ee4c:	676f6468 	.word	0x676f6468
    ee50:	61784520 	.word	0x61784520
    ee54:	656c706d 	.word	0x656c706d
    ee58:	00000a2e 	.word	0x00000a2e
    ee5c:	65736552 	.word	0x65736552
    ee60:	74532074 	.word	0x74532074
    ee64:	73757461 	.word	0x73757461
    ee68:	67655220 	.word	0x67655220
    ee6c:	65747369 	.word	0x65747369
    ee70:	203d2072 	.word	0x203d2072
    ee74:	78257830 	.word	0x78257830
    ee78:	0000000a 	.word	0x0000000a
    ee7c:	0a0a0a0a 	.word	0x0a0a0a0a
    ee80:	0a0a0a0a 	.word	0x0a0a0a0a
    ee84:	0a0a0a0a 	.word	0x0a0a0a0a
    ee88:	0a0a0a0a 	.word	0x0a0a0a0a
    ee8c:	00000a0a 	.word	0x00000a0a

0000ee90 <g_sBspUartConfig>:
    ee90:	0001c200 00000060 00000000 00000000     ....`...........
    eea0:	00000000 00000012 00000000 00000000     ................
	...

0000eeb8 <g_AM_BSP_GPIO_COM_UART_RX>:
    eeb8:	00000000                                ....

0000eebc <g_AM_BSP_GPIO_COM_UART_TX>:
    eebc:	00000000                                ....

0000eec0 <g_AM_BSP_GPIO_ITM_SWO>:
    eec0:	00000002                                ....

0000eec4 <am_hal_cachectrl_defaults>:
    eec4:	00000308                                ....

0000eec8 <g_AM_HAL_GPIO_DISABLE>:
    eec8:	00000003                                ....

0000eecc <g_AM_HAL_GPIO_OUTPUT>:
    eecc:	00000403                                ....

0000eed0 <g_AM_HAL_GPIO_TRISTATE>:
    eed0:	00000c03                                ....

0000eed4 <g_ui8Bit76Capabilities>:
    eed4:	02800101 80010180 80800101 80808080     ................
    eee4:	80808080 80808008 01800180 80808080     ................
    eef4:	80808080 01800402 01010401 80808080     ................
    ef04:	00000101                                ....

0000ef08 <g_ui8Inpen>:
    ef08:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    ef18:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    ef28:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    ef38:	00003130                                01..

0000ef3c <g_ui8NCEtable>:
    ef3c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ef4c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ef5c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ef6c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ef7c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ef8c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ef9c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    efac:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    efbc:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    efcc:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    efdc:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    efec:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    effc:	32221202 43231303                       .."2..#C

0000f004 <g_ui8nCEpins>:
    f004:	02070707 00080802 01020202 01010101     ................
    f014:	01010101 01010101 01010101 01010101     ................
    f024:	01010101 08010101 01010008 01010101     ................
    f034:	00000101                                ....

0000f038 <g_am_hal_mcuctrl_flash_size>:
    f038:	00004000 00008000 00010000 00020000     .@..............
    f048:	00040000 00080000 00100000 00200000     .............. .
    f058:	00180000 00000000 00000000 00000000     ................
	...

0000f078 <g_am_hal_mcuctrl_sram_size>:
    f078:	00004000 00008000 00010000 00020000     .@..............
    f088:	00040000 00080000 00100000 00060000     ................
    f098:	000c0000 00000000 00000000 00000000     ................
	...

0000f0b8 <am_hal_pwrctrl_peripheral_control>:
	...
    f0c4:	00000001 00000004 00000004 00000002     ................
    f0d4:	00000008 00000008 00000004 00000008     ................
    f0e4:	00000008 00000008 00000008 00000008     ................
    f0f4:	00000010 00000010 00000010 00000020     ............ ...
    f104:	00000010 00000010 00000040 00000010     ........@.......
    f114:	00000010 00000080 00000004 00000004     ................
    f124:	00000100 00000004 00000004 00000200     ................
    f134:	00000020 00000020 00000400 00000004      ... ...........
    f144:	00000004 00000800 00000040 00000040     ........@...@...
    f154:	00001000 00000080 00000080 00002000     ............. ..
    f164:	00000100 00000100                       ........

0000f16c <CSWTCH.20>:
    f16c:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
