
bin/ios_fifo.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 31 d4 00 00 99 d4 00 00 9b d4 00 00     ....1...........
    c010:	9b d4 00 00 9b d4 00 00 9b d4 00 00 00 00 00 00     ................
	...
    c02c:	9d d4 00 00 9d d4 00 00 00 00 00 00 9d d4 00 00     ................
    c03c:	9d d4 00 00 9d d4 00 00 9d d4 00 00 9d d4 00 00     ................
    c04c:	9d d4 00 00 e9 c3 00 00 9d d4 00 00 9d d4 00 00     ................
    c05c:	9d d4 00 00 9d d4 00 00 9d d4 00 00 9d d4 00 00     ................
    c06c:	9d d4 00 00 9d d4 00 00 9d d4 00 00 d5 c1 00 00     ................
    c07c:	9d d4 00 00 9d d4 00 00 9d d4 00 00 9d d4 00 00     ................
    c08c:	9d d4 00 00 9d d4 00 00 9d d4 00 00 9d d4 00 00     ................
    c09c:	9d d4 00 00 9d d4 00 00 9d d4 00 00 9d d4 00 00     ................
    c0ac:	9d d4 00 00 9d d4 00 00 9d d4 00 00 9d d4 00 00     ................
    c0bc:	9d d4 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <am_ctimer_isr>:
    0,
};

// Timer Interrupt Service Routine (ISR)
void am_ctimer_isr(void)
{
    c1d4:	b500      	push	{lr}
    c1d6:	b083      	sub	sp, #12
    uint32_t ui32Status;

    ui32Status = am_hal_ctimer_int_status_get(false);
    c1d8:	2000      	movs	r0, #0
    c1da:	f001 fe33 	bl	de44 <am_hal_ctimer_int_status_get>
    c1de:	9001      	str	r0, [sp, #4]
    am_hal_ctimer_int_clear(ui32Status);
    c1e0:	9801      	ldr	r0, [sp, #4]
    c1e2:	f001 fe1d 	bl	de20 <am_hal_ctimer_int_clear>

    am_hal_ctimer_int_service(ui32Status);
    c1e6:	9801      	ldr	r0, [sp, #4]
    c1e8:	f001 fc30 	bl	da4c <am_hal_ctimer_int_service>
}
    c1ec:	bf00      	nop
    c1ee:	b003      	add	sp, #12
    c1f0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1f4 <timer0_handler>:
// Emulate Sensor0 New Data
void timer0_handler(void)
{

    // Inform main loop of sensor 0 Data availability
    g_bSensor0Data = true;
    c1f4:	4b02      	ldr	r3, [pc, #8]	; (c200 <timer0_handler+0xc>)
    c1f6:	2201      	movs	r2, #1
    c1f8:	701a      	strb	r2, [r3, #0]
}
    c1fa:	bf00      	nop
    c1fc:	4770      	bx	lr
    c1fe:	bf00      	nop
    c200:	10001090 	.word	0x10001090

0000c204 <timer1_handler>:

// Emulate Sensor1 New Data
void timer1_handler(void)
{
    // Inform main loop of sensor 1 Data availability
    g_bSensor1Data = true;
    c204:	4b02      	ldr	r3, [pc, #8]	; (c210 <timer1_handler+0xc>)
    c206:	2201      	movs	r2, #1
    c208:	701a      	strb	r2, [r3, #0]
}
    c20a:	bf00      	nop
    c20c:	4770      	bx	lr
    c20e:	bf00      	nop
    c210:	10001091 	.word	0x10001091

0000c214 <stop_sensors>:

void stop_sensors(void)
{
    c214:	b508      	push	{r3, lr}
    //
    // Stop timer A0
    //
    am_hal_ctimer_stop(0, AM_HAL_CTIMER_TIMERA);
    c216:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c21a:	2000      	movs	r0, #0
    c21c:	f001 fd66 	bl	dcec <am_hal_ctimer_stop>
    //
    // Stop timer A1
    //
    am_hal_ctimer_stop(1, AM_HAL_CTIMER_TIMERA);
    c220:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c224:	2001      	movs	r0, #1
    c226:	f001 fd61 	bl	dcec <am_hal_ctimer_stop>
}
    c22a:	bf00      	nop
    c22c:	bd08      	pop	{r3, pc}
	...

0000c230 <start_sensors>:

void start_sensors(void)
{
    c230:	b508      	push	{r3, lr}
    stop_sensors(); // Just in case host died without sending STOP last time
    c232:	f7ff ffef 	bl	c214 <stop_sensors>
    // Initialize Data Buffer Index
    g_sendIdx = 0;
    c236:	4b09      	ldr	r3, [pc, #36]	; (c25c <start_sensors+0x2c>)
    c238:	2200      	movs	r2, #0
    c23a:	601a      	str	r2, [r3, #0]
    //
    // Start timer A0
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    c23c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c240:	2000      	movs	r0, #0
    c242:	f001 fd25 	bl	dc90 <am_hal_ctimer_start>
    //
    // Start timer A1
    //
    am_hal_ctimer_start(1, AM_HAL_CTIMER_TIMERA);
    c246:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c24a:	2001      	movs	r0, #1
    c24c:	f001 fd20 	bl	dc90 <am_hal_ctimer_start>
    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
    c250:	4b03      	ldr	r3, [pc, #12]	; (c260 <start_sensors+0x30>)
    c252:	2200      	movs	r2, #0
    c254:	701a      	strb	r2, [r3, #0]
}
    c256:	bf00      	nop
    c258:	bd08      	pop	{r3, pc}
    c25a:	bf00      	nop
    c25c:	1000108c 	.word	0x1000108c
    c260:	10001088 	.word	0x10001088

0000c264 <init_sensors>:

void init_sensors(void)
{
    c264:	b500      	push	{lr}
    c266:	b083      	sub	sp, #12
    uint32_t ui32Period;

    //
    // Set up timer A0 & A1.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    c268:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c26c:	2000      	movs	r0, #0
    c26e:	f001 fd53 	bl	dd18 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer);
    c272:	4920      	ldr	r1, [pc, #128]	; (c2f4 <init_sensors+0x90>)
    c274:	2000      	movs	r0, #0
    c276:	f001 fccd 	bl	dc14 <am_hal_ctimer_config>
    am_hal_ctimer_clear(1, AM_HAL_CTIMER_TIMERA);
    c27a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c27e:	2001      	movs	r0, #1
    c280:	f001 fd4a 	bl	dd18 <am_hal_ctimer_clear>
    am_hal_ctimer_config(1, &g_sTimer);
    c284:	491b      	ldr	r1, [pc, #108]	; (c2f4 <init_sensors+0x90>)
    c286:	2001      	movs	r0, #1
    c288:	f001 fcc4 	bl	dc14 <am_hal_ctimer_config>

    //
    // Set up timerA0 for Sensor 0 Freq
    //
    ui32Period = 12000 / SENSOR0_FREQ ;
    c28c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c290:	9301      	str	r3, [sp, #4]
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    c292:	9b01      	ldr	r3, [sp, #4]
    c294:	085b      	lsrs	r3, r3, #1
    c296:	9a01      	ldr	r2, [sp, #4]
    c298:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c29c:	2000      	movs	r0, #0
    c29e:	f001 fd51 	bl	dd44 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));
    //
    // Set up timerA1 for Sensor 1 Freq
    //
    ui32Period = 12000 / SENSOR1_FREQ ;
    c2a2:	f240 63b2 	movw	r3, #1714	; 0x6b2
    c2a6:	9301      	str	r3, [sp, #4]
    am_hal_ctimer_period_set(1, AM_HAL_CTIMER_TIMERA, ui32Period,
    c2a8:	9b01      	ldr	r3, [sp, #4]
    c2aa:	085b      	lsrs	r3, r3, #1
    c2ac:	9a01      	ldr	r2, [sp, #4]
    c2ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c2b2:	2001      	movs	r0, #1
    c2b4:	f001 fd46 	bl	dd44 <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    c2b8:	2001      	movs	r0, #1
    c2ba:	f001 fdb1 	bl	de20 <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA1);
    c2be:	2004      	movs	r0, #4
    c2c0:	f001 fdae 	bl	de20 <am_hal_ctimer_int_clear>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA0,
    c2c4:	490c      	ldr	r1, [pc, #48]	; (c2f8 <init_sensors+0x94>)
    c2c6:	2001      	movs	r0, #1
    c2c8:	f001 fbd8 	bl	da7c <am_hal_ctimer_int_register>
                               timer0_handler);
    am_hal_ctimer_int_register(AM_HAL_CTIMER_INT_TIMERA1,
    c2cc:	490b      	ldr	r1, [pc, #44]	; (c2fc <init_sensors+0x98>)
    c2ce:	2004      	movs	r0, #4
    c2d0:	f001 fbd4 	bl	da7c <am_hal_ctimer_int_register>
                               timer1_handler);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    c2d4:	2001      	movs	r0, #1
    c2d6:	f001 fd8f 	bl	ddf8 <am_hal_ctimer_int_enable>
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA1);
    c2da:	2004      	movs	r0, #4
    c2dc:	f001 fd8c 	bl	ddf8 <am_hal_ctimer_int_enable>
    // Enable the timer interrupt in the NVIC.
    //
    //
    // Enable the timer interrupt in the NVIC.
    //
    NVIC_EnableIRQ(CTIMER_IRQn);
    c2e0:	200e      	movs	r0, #14
    c2e2:	f7ff ff5d 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c2e6:	f001 ff97 	bl	e218 <am_hal_interrupt_master_enable>
}
    c2ea:	bf00      	nop
    c2ec:	b003      	add	sp, #12
    c2ee:	f85d fb04 	ldr.w	pc, [sp], #4
    c2f2:	bf00      	nop
    c2f4:	10001038 	.word	0x10001038
    c2f8:	0000c1f5 	.word	0x0000c1f5
    c2fc:	0000c205 	.word	0x0000c205

0000c300 <ios_set_up>:
//
// Configure the SPI slave.
//
//*****************************************************************************
static void ios_set_up(bool bSpi)
{
    c300:	b500      	push	{lr}
    c302:	b083      	sub	sp, #12
    c304:	4603      	mov	r3, r0
    c306:	f88d 3007 	strb.w	r3, [sp, #7]
    if (bSpi)
    c30a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c30e:	2b00      	cmp	r3, #0
    c310:	d015      	beq.n	c33e <ios_set_up+0x3e>
    {
        // Configure SPI interface
        am_bsp_ios_pins_enable(0, AM_HAL_IOS_USE_SPI);
    c312:	2101      	movs	r1, #1
    c314:	2000      	movs	r0, #0
    c316:	f001 f903 	bl	d520 <am_bsp_ios_pins_enable>
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_initialize(0, &g_pIOSHandle);
    c31a:	4923      	ldr	r1, [pc, #140]	; (c3a8 <ios_set_up+0xa8>)
    c31c:	2000      	movs	r0, #0
    c31e:	f001 ffe5 	bl	e2ec <am_hal_ios_initialize>
        am_hal_ios_power_ctrl(g_pIOSHandle, AM_HAL_SYSCTRL_WAKE, false);
    c322:	4b21      	ldr	r3, [pc, #132]	; (c3a8 <ios_set_up+0xa8>)
    c324:	681b      	ldr	r3, [r3, #0]
    c326:	2200      	movs	r2, #0
    c328:	2100      	movs	r1, #0
    c32a:	4618      	mov	r0, r3
    c32c:	f001 ff80 	bl	e230 <am_hal_ios_power_ctrl>
        am_hal_ios_configure(g_pIOSHandle, &g_sIOSSpiConfig);
    c330:	4b1d      	ldr	r3, [pc, #116]	; (c3a8 <ios_set_up+0xa8>)
    c332:	681b      	ldr	r3, [r3, #0]
    c334:	491d      	ldr	r1, [pc, #116]	; (c3ac <ios_set_up+0xac>)
    c336:	4618      	mov	r0, r3
    c338:	f001 fff6 	bl	e328 <am_hal_ios_configure>
    c33c:	e014      	b.n	c368 <ios_set_up+0x68>
    }
    else
    {
        // Configure I2C interface
        am_bsp_ios_pins_enable(0, AM_HAL_IOS_USE_I2C);
    c33e:	2100      	movs	r1, #0
    c340:	2000      	movs	r0, #0
    c342:	f001 f8ed 	bl	d520 <am_bsp_ios_pins_enable>
        //
        // Configure the IOS interface and LRAM structure.
        //
        am_hal_ios_initialize(0, &g_pIOSHandle);
    c346:	4918      	ldr	r1, [pc, #96]	; (c3a8 <ios_set_up+0xa8>)
    c348:	2000      	movs	r0, #0
    c34a:	f001 ffcf 	bl	e2ec <am_hal_ios_initialize>
        am_hal_ios_power_ctrl(g_pIOSHandle, AM_HAL_SYSCTRL_WAKE, false);
    c34e:	4b16      	ldr	r3, [pc, #88]	; (c3a8 <ios_set_up+0xa8>)
    c350:	681b      	ldr	r3, [r3, #0]
    c352:	2200      	movs	r2, #0
    c354:	2100      	movs	r1, #0
    c356:	4618      	mov	r0, r3
    c358:	f001 ff6a 	bl	e230 <am_hal_ios_power_ctrl>
        am_hal_ios_configure(g_pIOSHandle, &g_sIOSI2cConfig);
    c35c:	4b12      	ldr	r3, [pc, #72]	; (c3a8 <ios_set_up+0xa8>)
    c35e:	681b      	ldr	r3, [r3, #0]
    c360:	4913      	ldr	r1, [pc, #76]	; (c3b0 <ios_set_up+0xb0>)
    c362:	4618      	mov	r0, r3
    c364:	f001 ffe0 	bl	e328 <am_hal_ios_configure>

    //
    // Clear out any IOS register-access interrupts that may be active, and
    // enable interrupts for the registers we're interested in.
    //
    am_hal_ios_interrupt_clear(g_pIOSHandle, AM_HAL_IOS_INT_ALL);
    c368:	4b0f      	ldr	r3, [pc, #60]	; (c3a8 <ios_set_up+0xa8>)
    c36a:	681b      	ldr	r3, [r3, #0]
    c36c:	f04f 31ff 	mov.w	r1, #4294967295
    c370:	4618      	mov	r0, r3
    c372:	f002 f8e5 	bl	e540 <am_hal_ios_interrupt_clear>
    am_hal_ios_interrupt_enable(g_pIOSHandle, AM_HAL_IOS_INT_ERR | AM_HAL_IOS_INT_FSIZE);
    c376:	4b0c      	ldr	r3, [pc, #48]	; (c3a8 <ios_set_up+0xa8>)
    c378:	681b      	ldr	r3, [r3, #0]
    c37a:	210f      	movs	r1, #15
    c37c:	4618      	mov	r0, r3
    c37e:	f002 f8cb 	bl	e518 <am_hal_ios_interrupt_enable>
#ifdef TEST_IOINTCTL
    am_hal_ios_interrupt_enable(g_pIOSHandle, AM_HAL_IOS_INT_IOINTW);
#endif
#ifdef TEST_IOS_XCMP_INT
    am_hal_ios_interrupt_enable(g_pIOSHandle, AM_HAL_IOS_XCMP_INT);
    c382:	4b09      	ldr	r3, [pc, #36]	; (c3a8 <ios_set_up+0xa8>)
    c384:	681b      	ldr	r3, [r3, #0]
    c386:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    c38a:	4618      	mov	r0, r3
    c38c:	f002 f8c4 	bl	e518 <am_hal_ios_interrupt_enable>
#endif

    //
    // Set the bit in the NVIC to accept access interrupts from the IO Slave.
    //
    NVIC_EnableIRQ(IOSLAVE_IRQn);
    c390:	2004      	movs	r0, #4
    c392:	f7ff ff05 	bl	c1a0 <__NVIC_EnableIRQ>

    // Set up the IOSINT interrupt pin
    am_hal_gpio_pinconfig(4, g_AM_BSP_GPIO_ENABLE);
    c396:	4b07      	ldr	r3, [pc, #28]	; (c3b4 <ios_set_up+0xb4>)
    c398:	6819      	ldr	r1, [r3, #0]
    c39a:	2004      	movs	r0, #4
    c39c:	f001 fdc2 	bl	df24 <am_hal_gpio_pinconfig>

}
    c3a0:	bf00      	nop
    c3a2:	b003      	add	sp, #12
    c3a4:	f85d fb04 	ldr.w	pc, [sp], #4
    c3a8:	10001094 	.word	0x10001094
    c3ac:	10001000 	.word	0x10001000
    c3b0:	1000101c 	.word	0x1000101c
    c3b4:	0000eec0 	.word	0x0000eec0

0000c3b8 <inform_host>:


// Inform host of new data available to read
void inform_host(void)
{
    c3b8:	b500      	push	{lr}
    c3ba:	b083      	sub	sp, #12
    uint32_t ui32Arg = AM_IOSTEST_IOSTOHOST_DATAAVAIL_INTMASK;
    c3bc:	2301      	movs	r3, #1
    c3be:	9301      	str	r3, [sp, #4]
    // Update FIFOCTR for host to read
    am_hal_ios_control(g_pIOSHandle, AM_HAL_IOS_REQ_FIFO_UPDATE_CTR, NULL);
    c3c0:	4b08      	ldr	r3, [pc, #32]	; (c3e4 <inform_host+0x2c>)
    c3c2:	681b      	ldr	r3, [r3, #0]
    c3c4:	2200      	movs	r2, #0
    c3c6:	2106      	movs	r1, #6
    c3c8:	4618      	mov	r0, r3
    c3ca:	f002 fa97 	bl	e8fc <am_hal_ios_control>
    // Interrupt the host
    am_hal_ios_control(g_pIOSHandle, AM_HAL_IOS_REQ_HOST_INTSET, &ui32Arg);
    c3ce:	4b05      	ldr	r3, [pc, #20]	; (c3e4 <inform_host+0x2c>)
    c3d0:	681b      	ldr	r3, [r3, #0]
    c3d2:	aa01      	add	r2, sp, #4
    c3d4:	2100      	movs	r1, #0
    c3d6:	4618      	mov	r0, r3
    c3d8:	f002 fa90 	bl	e8fc <am_hal_ios_control>
}
    c3dc:	bf00      	nop
    c3de:	b003      	add	sp, #12
    c3e0:	f85d fb04 	ldr.w	pc, [sp], #4
    c3e4:	10001094 	.word	0x10001094

0000c3e8 <am_ioslave_ios_isr>:
//
// IO Slave Main ISR.
//
//*****************************************************************************
void am_ioslave_ios_isr(void)
{
    c3e8:	b500      	push	{lr}
    c3ea:	b085      	sub	sp, #20
    uint32_t ui32Status;
    uint8_t  *pui8Packet;
    uint32_t ui32UsedSpace = 0;
    c3ec:	2300      	movs	r3, #0
    c3ee:	9301      	str	r3, [sp, #4]
    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //

    am_hal_ios_interrupt_status_get(g_pIOSHandle, false, &ui32Status);
    c3f0:	4b34      	ldr	r3, [pc, #208]	; (c4c4 <am_ioslave_ios_isr+0xdc>)
    c3f2:	681b      	ldr	r3, [r3, #0]
    c3f4:	aa02      	add	r2, sp, #8
    c3f6:	2100      	movs	r1, #0
    c3f8:	4618      	mov	r0, r3
    c3fa:	f002 f8b3 	bl	e564 <am_hal_ios_interrupt_status_get>

    am_hal_ios_interrupt_clear(g_pIOSHandle, ui32Status);
    c3fe:	4b31      	ldr	r3, [pc, #196]	; (c4c4 <am_ioslave_ios_isr+0xdc>)
    c400:	681b      	ldr	r3, [r3, #0]
    c402:	9a02      	ldr	r2, [sp, #8]
    c404:	4611      	mov	r1, r2
    c406:	4618      	mov	r0, r3
    c408:	f002 f89a 	bl	e540 <am_hal_ios_interrupt_clear>

    if (ui32Status & AM_HAL_IOS_INT_FUNDFL)
    c40c:	9b02      	ldr	r3, [sp, #8]
    c40e:	f003 0304 	and.w	r3, r3, #4
    c412:	2b00      	cmp	r3, #0
    c414:	d008      	beq.n	c428 <am_ioslave_ios_isr+0x40>
    {
        am_util_stdio_printf("Hitting underflow for the requested IOS FIFO transfer\n");
    c416:	482c      	ldr	r0, [pc, #176]	; (c4c8 <am_ioslave_ios_isr+0xe0>)
    c418:	f000 ffe2 	bl	d3e0 <am_util_stdio_printf>
        // We should never hit this case unless the threshold has beeen set
        // incorrect, or we are unable to handle the data rate
        // ERROR!
        am_hal_debug_assert_msg(0,
    c41c:	4a2b      	ldr	r2, [pc, #172]	; (c4cc <am_ioslave_ios_isr+0xe4>)
    c41e:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    c422:	482b      	ldr	r0, [pc, #172]	; (c4d0 <am_ioslave_ios_isr+0xe8>)
    c424:	f001 fd2c 	bl	de80 <am_hal_debug_error>
            "Hitting underflow for the requested IOS FIFO transfer.");
    }

    if (ui32Status & AM_HAL_IOS_INT_ERR)
    c428:	9b02      	ldr	r3, [sp, #8]
    c42a:	f003 030e 	and.w	r3, r3, #14
    c42e:	2b00      	cmp	r3, #0
    c430:	d005      	beq.n	c43e <am_ioslave_ios_isr+0x56>
    {
        // We should never hit this case
        // ERROR!
        am_hal_debug_assert_msg(0,
    c432:	4a28      	ldr	r2, [pc, #160]	; (c4d4 <am_ioslave_ios_isr+0xec>)
    c434:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    c438:	4825      	ldr	r0, [pc, #148]	; (c4d0 <am_ioslave_ios_isr+0xe8>)
    c43a:	f001 fd21 	bl	de80 <am_hal_debug_error>
            "Hitting ERROR case.");
    }

    if (ui32Status & AM_HAL_IOS_INT_FSIZE)
    c43e:	9b02      	ldr	r3, [sp, #8]
    c440:	f003 0301 	and.w	r3, r3, #1
    c444:	2b00      	cmp	r3, #0
    c446:	d006      	beq.n	c456 <am_ioslave_ios_isr+0x6e>
    {
        //
        // Service the I2C slave FIFO if necessary.
        //
        am_hal_ios_interrupt_service(g_pIOSHandle, ui32Status);
    c448:	4b1e      	ldr	r3, [pc, #120]	; (c4c4 <am_ioslave_ios_isr+0xdc>)
    c44a:	681b      	ldr	r3, [r3, #0]
    c44c:	9a02      	ldr	r2, [sp, #8]
    c44e:	4611      	mov	r1, r2
    c450:	4618      	mov	r0, r3
    c452:	f002 f8c9 	bl	e5e8 <am_hal_ios_interrupt_service>
    }

    if (ui32Status & AM_HAL_IOS_INT_XCMPWR)
    c456:	9b02      	ldr	r3, [sp, #8]
    c458:	f403 7300 	and.w	r3, r3, #512	; 0x200
    c45c:	2b00      	cmp	r3, #0
    c45e:	d02a      	beq.n	c4b6 <am_ioslave_ios_isr+0xce>
    {
        //
        // Set up a pointer for writing 32-bit aligned packets through the IO slave
        // interface.
        //
        pui8Packet = (uint8_t *) am_hal_ios_pui8LRAM;
    c460:	4b1d      	ldr	r3, [pc, #116]	; (c4d8 <am_ioslave_ios_isr+0xf0>)
    c462:	681b      	ldr	r3, [r3, #0]
    c464:	9303      	str	r3, [sp, #12]
        switch(pui8Packet[0])
    c466:	9b03      	ldr	r3, [sp, #12]
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	2b02      	cmp	r3, #2
    c46c:	d00f      	beq.n	c48e <am_ioslave_ios_isr+0xa6>
    c46e:	2b02      	cmp	r3, #2
    c470:	dc23      	bgt.n	c4ba <am_ioslave_ios_isr+0xd2>
    c472:	2b00      	cmp	r3, #0
    c474:	d002      	beq.n	c47c <am_ioslave_ios_isr+0x94>
    c476:	2b01      	cmp	r3, #1
    c478:	d003      	beq.n	c482 <am_ioslave_ios_isr+0x9a>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
                }
                break;

            default:
                break;
    c47a:	e01e      	b.n	c4ba <am_ioslave_ios_isr+0xd2>
                start_sensors();
    c47c:	f7ff fed8 	bl	c230 <start_sensors>
                break;
    c480:	e01c      	b.n	c4bc <am_ioslave_ios_isr+0xd4>
                stop_sensors();
    c482:	f7ff fec7 	bl	c214 <stop_sensors>
                g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
    c486:	4b15      	ldr	r3, [pc, #84]	; (c4dc <am_ioslave_ios_isr+0xf4>)
    c488:	2200      	movs	r2, #0
    c48a:	701a      	strb	r2, [r3, #0]
                break;
    c48c:	e016      	b.n	c4bc <am_ioslave_ios_isr+0xd4>
                am_hal_ios_fifo_space_used(g_pIOSHandle, &ui32UsedSpace);
    c48e:	4b0d      	ldr	r3, [pc, #52]	; (c4c4 <am_ioslave_ios_isr+0xdc>)
    c490:	681b      	ldr	r3, [r3, #0]
    c492:	aa01      	add	r2, sp, #4
    c494:	4611      	mov	r1, r2
    c496:	4618      	mov	r0, r3
    c498:	f002 f87e 	bl	e598 <am_hal_ios_fifo_space_used>
                if (ui32UsedSpace)
    c49c:	9b01      	ldr	r3, [sp, #4]
    c49e:	2b00      	cmp	r3, #0
    c4a0:	d005      	beq.n	c4ae <am_ioslave_ios_isr+0xc6>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_DATA;
    c4a2:	4b0e      	ldr	r3, [pc, #56]	; (c4dc <am_ioslave_ios_isr+0xf4>)
    c4a4:	2201      	movs	r2, #1
    c4a6:	701a      	strb	r2, [r3, #0]
                    inform_host();
    c4a8:	f7ff ff86 	bl	c3b8 <inform_host>
                break;
    c4ac:	e006      	b.n	c4bc <am_ioslave_ios_isr+0xd4>
                    g_iosState = AM_IOSTEST_SLAVE_STATE_NODATA;
    c4ae:	4b0b      	ldr	r3, [pc, #44]	; (c4dc <am_ioslave_ios_isr+0xf4>)
    c4b0:	2200      	movs	r2, #0
    c4b2:	701a      	strb	r2, [r3, #0]
                break;
    c4b4:	e002      	b.n	c4bc <am_ioslave_ios_isr+0xd4>
        }
    }
    c4b6:	bf00      	nop
    c4b8:	e000      	b.n	c4bc <am_ioslave_ios_isr+0xd4>
                break;
    c4ba:	bf00      	nop
}
    c4bc:	bf00      	nop
    c4be:	b005      	add	sp, #20
    c4c0:	f85d fb04 	ldr.w	pc, [sp], #4
    c4c4:	10001094 	.word	0x10001094
    c4c8:	0000ee00 	.word	0x0000ee00
    c4cc:	0000ee38 	.word	0x0000ee38
    c4d0:	0000ee70 	.word	0x0000ee70
    c4d4:	0000ee84 	.word	0x0000ee84
    c4d8:	0000f08c 	.word	0x0000f08c
    c4dc:	10001088 	.word	0x10001088

0000c4e0 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c4e0:	b500      	push	{lr}
    c4e2:	b087      	sub	sp, #28
    int i;

    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c4e4:	2100      	movs	r1, #0
    c4e6:	2000      	movs	r0, #0
    c4e8:	f001 f9f6 	bl	d8d8 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c4ec:	4870      	ldr	r0, [pc, #448]	; (c6b0 <main+0x1d0>)
    c4ee:	f001 f84b 	bl	d588 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c4f2:	f001 f86d 	bl	d5d0 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c4f6:	f000 ffd3 	bl	d4a0 <am_bsp_low_power_init>

    //
    // Enable the ITM print interface.
    //
    am_bsp_itm_printf_enable();
    c4fa:	f000 fff1 	bl	d4e0 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c4fe:	f000 ff8f 	bl	d420 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("IOS FIFO Example\n");
    c502:	486c      	ldr	r0, [pc, #432]	; (c6b4 <main+0x1d4>)
    c504:	f000 ff6c 	bl	d3e0 <am_util_stdio_printf>
    am_hal_gpio_out_bit_clear(43);
    am_hal_gpio_pin_config(43, AM_HAL_GPIO_OUTPUT);
#endif

    // Initialize Test Data
    for (i = 0; i < AM_TEST_REF_BUF_SIZE; i++)
    c508:	2300      	movs	r3, #0
    c50a:	9305      	str	r3, [sp, #20]
    c50c:	e009      	b.n	c522 <main+0x42>
    {
        g_pui8TestBuf[i] = (i & 0xFF) ^ XOR_BYTE;
    c50e:	9b05      	ldr	r3, [sp, #20]
    c510:	b2d9      	uxtb	r1, r3
    c512:	4a69      	ldr	r2, [pc, #420]	; (c6b8 <main+0x1d8>)
    c514:	9b05      	ldr	r3, [sp, #20]
    c516:	4413      	add	r3, r2
    c518:	460a      	mov	r2, r1
    c51a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < AM_TEST_REF_BUF_SIZE; i++)
    c51c:	9b05      	ldr	r3, [sp, #20]
    c51e:	3301      	adds	r3, #1
    c520:	9305      	str	r3, [sp, #20]
    c522:	9b05      	ldr	r3, [sp, #20]
    c524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c528:	dbf1      	blt.n	c50e <main+0x2e>
    }

    init_sensors();
    c52a:	f7ff fe9b 	bl	c264 <init_sensors>
    //
    // Enable the IOS. Choose the correct protocol based on USE_SPI
    //
    ios_set_up(USE_SPI);
    c52e:	2001      	movs	r0, #1
    c530:	f7ff fee6 	bl	c300 <ios_set_up>

    //
    // Enable interrupts so we can receive messages from the boot host.
    //
    am_hal_interrupt_master_enable();
    c534:	f001 fe70 	bl	e218 <am_hal_interrupt_master_enable>
    //
    // Loop forever.
    //
    while(1)
    {
        uint32_t numWritten = 0;
    c538:	2300      	movs	r3, #0
    c53a:	9302      	str	r3, [sp, #8]
        uint32_t numWritten1 = 0;
    c53c:	2300      	movs	r3, #0
    c53e:	9301      	str	r3, [sp, #4]
        uint32_t chunk1;
        uint32_t ui32UsedSpace = 0;
    c540:	2300      	movs	r3, #0
    c542:	9300      	str	r3, [sp, #0]
        uint32_t ui32IntStatus = am_hal_interrupt_master_disable();
    c544:	f001 fe6c 	bl	e220 <am_hal_interrupt_master_disable>
    c548:	9004      	str	r0, [sp, #16]
        if (g_bSensor0Data || g_bSensor1Data)
    c54a:	4b5c      	ldr	r3, [pc, #368]	; (c6bc <main+0x1dc>)
    c54c:	781b      	ldrb	r3, [r3, #0]
    c54e:	b2db      	uxtb	r3, r3
    c550:	2b00      	cmp	r3, #0
    c552:	d105      	bne.n	c560 <main+0x80>
    c554:	4b5a      	ldr	r3, [pc, #360]	; (c6c0 <main+0x1e0>)
    c556:	781b      	ldrb	r3, [r3, #0]
    c558:	b2db      	uxtb	r3, r3
    c55a:	2b00      	cmp	r3, #0
    c55c:	f000 809e 	beq.w	c69c <main+0x1bc>
        {
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
    c560:	9804      	ldr	r0, [sp, #16]
    c562:	f001 fe61 	bl	e228 <am_hal_interrupt_master_set>
            if (g_bSensor0Data)
    c566:	4b55      	ldr	r3, [pc, #340]	; (c6bc <main+0x1dc>)
    c568:	781b      	ldrb	r3, [r3, #0]
    c56a:	b2db      	uxtb	r3, r3
    c56c:	2b00      	cmp	r3, #0
    c56e:	d03c      	beq.n	c5ea <main+0x10a>
            {
                chunk1 = AM_TEST_REF_BUF_SIZE - g_sendIdx;
    c570:	4b54      	ldr	r3, [pc, #336]	; (c6c4 <main+0x1e4>)
    c572:	681b      	ldr	r3, [r3, #0]
    c574:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
    c578:	9303      	str	r3, [sp, #12]
                if (chunk1 > SENSOR0_DATA_SIZE)
    c57a:	9b03      	ldr	r3, [sp, #12]
    c57c:	2bc8      	cmp	r3, #200	; 0xc8
    c57e:	d90a      	bls.n	c596 <main+0xb6>
                {
                    am_hal_ios_fifo_write(g_pIOSHandle, &g_pui8TestBuf[g_sendIdx], SENSOR0_DATA_SIZE, &numWritten);
    c580:	4b51      	ldr	r3, [pc, #324]	; (c6c8 <main+0x1e8>)
    c582:	6818      	ldr	r0, [r3, #0]
    c584:	4b4f      	ldr	r3, [pc, #316]	; (c6c4 <main+0x1e4>)
    c586:	681b      	ldr	r3, [r3, #0]
    c588:	4a4b      	ldr	r2, [pc, #300]	; (c6b8 <main+0x1d8>)
    c58a:	1899      	adds	r1, r3, r2
    c58c:	ab02      	add	r3, sp, #8
    c58e:	22c8      	movs	r2, #200	; 0xc8
    c590:	f002 f8e6 	bl	e760 <am_hal_ios_fifo_write>
    c594:	e01a      	b.n	c5cc <main+0xec>
                }
                else
                {
                    am_hal_ios_fifo_write(g_pIOSHandle, &g_pui8TestBuf[g_sendIdx], chunk1, &numWritten);
    c596:	4b4c      	ldr	r3, [pc, #304]	; (c6c8 <main+0x1e8>)
    c598:	6818      	ldr	r0, [r3, #0]
    c59a:	4b4a      	ldr	r3, [pc, #296]	; (c6c4 <main+0x1e4>)
    c59c:	681b      	ldr	r3, [r3, #0]
    c59e:	4a46      	ldr	r2, [pc, #280]	; (c6b8 <main+0x1d8>)
    c5a0:	1899      	adds	r1, r3, r2
    c5a2:	ab02      	add	r3, sp, #8
    c5a4:	9a03      	ldr	r2, [sp, #12]
    c5a6:	f002 f8db 	bl	e760 <am_hal_ios_fifo_write>
                    if (numWritten == chunk1)
    c5aa:	9b02      	ldr	r3, [sp, #8]
    c5ac:	9a03      	ldr	r2, [sp, #12]
    c5ae:	429a      	cmp	r2, r3
    c5b0:	d10c      	bne.n	c5cc <main+0xec>
                    {
                        am_hal_ios_fifo_write(g_pIOSHandle, &g_pui8TestBuf[0], SENSOR0_DATA_SIZE - chunk1, &numWritten1);
    c5b2:	4b45      	ldr	r3, [pc, #276]	; (c6c8 <main+0x1e8>)
    c5b4:	6818      	ldr	r0, [r3, #0]
    c5b6:	9b03      	ldr	r3, [sp, #12]
    c5b8:	f1c3 02c8 	rsb	r2, r3, #200	; 0xc8
    c5bc:	ab01      	add	r3, sp, #4
    c5be:	493e      	ldr	r1, [pc, #248]	; (c6b8 <main+0x1d8>)
    c5c0:	f002 f8ce 	bl	e760 <am_hal_ios_fifo_write>
                        numWritten += numWritten1;
    c5c4:	9a02      	ldr	r2, [sp, #8]
    c5c6:	9b01      	ldr	r3, [sp, #4]
    c5c8:	4413      	add	r3, r2
    c5ca:	9302      	str	r3, [sp, #8]
                    }
                }

                g_sendIdx += numWritten;
    c5cc:	4b3d      	ldr	r3, [pc, #244]	; (c6c4 <main+0x1e4>)
    c5ce:	681a      	ldr	r2, [r3, #0]
    c5d0:	9b02      	ldr	r3, [sp, #8]
    c5d2:	4413      	add	r3, r2
    c5d4:	4a3b      	ldr	r2, [pc, #236]	; (c6c4 <main+0x1e4>)
    c5d6:	6013      	str	r3, [r2, #0]
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
    c5d8:	4b3a      	ldr	r3, [pc, #232]	; (c6c4 <main+0x1e4>)
    c5da:	681b      	ldr	r3, [r3, #0]
    c5dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    c5e0:	4a38      	ldr	r2, [pc, #224]	; (c6c4 <main+0x1e4>)
    c5e2:	6013      	str	r3, [r2, #0]
                g_bSensor0Data = false;
    c5e4:	4b35      	ldr	r3, [pc, #212]	; (c6bc <main+0x1dc>)
    c5e6:	2200      	movs	r2, #0
    c5e8:	701a      	strb	r2, [r3, #0]
            }
            if (g_bSensor1Data)
    c5ea:	4b35      	ldr	r3, [pc, #212]	; (c6c0 <main+0x1e0>)
    c5ec:	781b      	ldrb	r3, [r3, #0]
    c5ee:	b2db      	uxtb	r3, r3
    c5f0:	2b00      	cmp	r3, #0
    c5f2:	d03e      	beq.n	c672 <main+0x192>
            {
                chunk1 = AM_TEST_REF_BUF_SIZE - g_sendIdx;
    c5f4:	4b33      	ldr	r3, [pc, #204]	; (c6c4 <main+0x1e4>)
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
    c5fc:	9303      	str	r3, [sp, #12]
                if (chunk1 > SENSOR1_DATA_SIZE)
    c5fe:	9b03      	ldr	r3, [sp, #12]
    c600:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    c604:	d90b      	bls.n	c61e <main+0x13e>
                {
                    am_hal_ios_fifo_write(g_pIOSHandle, &g_pui8TestBuf[g_sendIdx], SENSOR1_DATA_SIZE, &numWritten);
    c606:	4b30      	ldr	r3, [pc, #192]	; (c6c8 <main+0x1e8>)
    c608:	6818      	ldr	r0, [r3, #0]
    c60a:	4b2e      	ldr	r3, [pc, #184]	; (c6c4 <main+0x1e4>)
    c60c:	681b      	ldr	r3, [r3, #0]
    c60e:	4a2a      	ldr	r2, [pc, #168]	; (c6b8 <main+0x1d8>)
    c610:	1899      	adds	r1, r3, r2
    c612:	ab02      	add	r3, sp, #8
    c614:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    c618:	f002 f8a2 	bl	e760 <am_hal_ios_fifo_write>
    c61c:	e01a      	b.n	c654 <main+0x174>
                }
                else
                {
                    am_hal_ios_fifo_write(g_pIOSHandle, &g_pui8TestBuf[g_sendIdx], chunk1, &numWritten);
    c61e:	4b2a      	ldr	r3, [pc, #168]	; (c6c8 <main+0x1e8>)
    c620:	6818      	ldr	r0, [r3, #0]
    c622:	4b28      	ldr	r3, [pc, #160]	; (c6c4 <main+0x1e4>)
    c624:	681b      	ldr	r3, [r3, #0]
    c626:	4a24      	ldr	r2, [pc, #144]	; (c6b8 <main+0x1d8>)
    c628:	1899      	adds	r1, r3, r2
    c62a:	ab02      	add	r3, sp, #8
    c62c:	9a03      	ldr	r2, [sp, #12]
    c62e:	f002 f897 	bl	e760 <am_hal_ios_fifo_write>
                    if (numWritten == chunk1)
    c632:	9b02      	ldr	r3, [sp, #8]
    c634:	9a03      	ldr	r2, [sp, #12]
    c636:	429a      	cmp	r2, r3
    c638:	d10c      	bne.n	c654 <main+0x174>
                    {
                        am_hal_ios_fifo_write(g_pIOSHandle, &g_pui8TestBuf[0], SENSOR1_DATA_SIZE - chunk1, &numWritten1);
    c63a:	4b23      	ldr	r3, [pc, #140]	; (c6c8 <main+0x1e8>)
    c63c:	6818      	ldr	r0, [r3, #0]
    c63e:	9b03      	ldr	r3, [sp, #12]
    c640:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
    c644:	ab01      	add	r3, sp, #4
    c646:	491c      	ldr	r1, [pc, #112]	; (c6b8 <main+0x1d8>)
    c648:	f002 f88a 	bl	e760 <am_hal_ios_fifo_write>
                        numWritten += numWritten1;
    c64c:	9a02      	ldr	r2, [sp, #8]
    c64e:	9b01      	ldr	r3, [sp, #4]
    c650:	4413      	add	r3, r2
    c652:	9302      	str	r3, [sp, #8]
                    }
                }

                g_sendIdx += numWritten;
    c654:	4b1b      	ldr	r3, [pc, #108]	; (c6c4 <main+0x1e4>)
    c656:	681a      	ldr	r2, [r3, #0]
    c658:	9b02      	ldr	r3, [sp, #8]
    c65a:	4413      	add	r3, r2
    c65c:	4a19      	ldr	r2, [pc, #100]	; (c6c4 <main+0x1e4>)
    c65e:	6013      	str	r3, [r2, #0]
                g_sendIdx %= AM_TEST_REF_BUF_SIZE;
    c660:	4b18      	ldr	r3, [pc, #96]	; (c6c4 <main+0x1e4>)
    c662:	681b      	ldr	r3, [r3, #0]
    c664:	f3c3 0308 	ubfx	r3, r3, #0, #9
    c668:	4a16      	ldr	r2, [pc, #88]	; (c6c4 <main+0x1e4>)
    c66a:	6013      	str	r3, [r2, #0]
                g_bSensor1Data = false;
    c66c:	4b14      	ldr	r3, [pc, #80]	; (c6c0 <main+0x1e0>)
    c66e:	2200      	movs	r2, #0
    c670:	701a      	strb	r2, [r3, #0]
            }
            // If we were Idle - need to inform Host if there is new data
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
    c672:	4b16      	ldr	r3, [pc, #88]	; (c6cc <main+0x1ec>)
    c674:	781b      	ldrb	r3, [r3, #0]
    c676:	b2db      	uxtb	r3, r3
    c678:	2b00      	cmp	r3, #0
    c67a:	d116      	bne.n	c6aa <main+0x1ca>
            {
                am_hal_ios_fifo_space_used(g_pIOSHandle, &ui32UsedSpace);
    c67c:	4b12      	ldr	r3, [pc, #72]	; (c6c8 <main+0x1e8>)
    c67e:	681b      	ldr	r3, [r3, #0]
    c680:	466a      	mov	r2, sp
    c682:	4611      	mov	r1, r2
    c684:	4618      	mov	r0, r3
    c686:	f001 ff87 	bl	e598 <am_hal_ios_fifo_space_used>
                if (ui32UsedSpace)
    c68a:	9b00      	ldr	r3, [sp, #0]
    c68c:	2b00      	cmp	r3, #0
    c68e:	d00c      	beq.n	c6aa <main+0x1ca>
                {
                    g_iosState = AM_IOSTEST_SLAVE_STATE_DATA;
    c690:	4b0e      	ldr	r3, [pc, #56]	; (c6cc <main+0x1ec>)
    c692:	2201      	movs	r2, #1
    c694:	701a      	strb	r2, [r3, #0]
                    inform_host();
    c696:	f7ff fe8f 	bl	c3b8 <inform_host>
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
    c69a:	e006      	b.n	c6aa <main+0x1ca>
        else
        {
            //
            // Go to Deep Sleep.
            //
            am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    c69c:	2000      	movs	r0, #0
    c69e:	f002 fb27 	bl	ecf0 <am_hal_sysctrl_sleep>
            // Enable the interrupts
            am_hal_interrupt_master_set(ui32IntStatus);
    c6a2:	9804      	ldr	r0, [sp, #16]
    c6a4:	f001 fdc0 	bl	e228 <am_hal_interrupt_master_set>
    c6a8:	e746      	b.n	c538 <main+0x58>
            if (g_iosState == AM_IOSTEST_SLAVE_STATE_NODATA)
    c6aa:	bf00      	nop
    {
    c6ac:	e744      	b.n	c538 <main+0x58>
    c6ae:	bf00      	nop
    c6b0:	0000eee0 	.word	0x0000eee0
    c6b4:	0000ee98 	.word	0x0000ee98
    c6b8:	10001098 	.word	0x10001098
    c6bc:	10001090 	.word	0x10001090
    c6c0:	10001091 	.word	0x10001091
    c6c4:	1000108c 	.word	0x1000108c
    c6c8:	10001094 	.word	0x10001094
    c6cc:	10001088 	.word	0x10001088

0000c6d0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c6d0:	b082      	sub	sp, #8
    c6d2:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c6d4:	4a02      	ldr	r2, [pc, #8]	; (c6e0 <am_util_stdio_printf_init+0x10>)
    c6d6:	9b01      	ldr	r3, [sp, #4]
    c6d8:	6013      	str	r3, [r2, #0]
}
    c6da:	bf00      	nop
    c6dc:	b002      	add	sp, #8
    c6de:	4770      	bx	lr
    c6e0:	10001698 	.word	0x10001698

0000c6e4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c6e4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c6e8:	b098      	sub	sp, #96	; 0x60
    c6ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c6ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6f2:	f04f 0000 	mov.w	r0, #0
    c6f6:	f04f 0100 	mov.w	r1, #0
    c6fa:	0018      	movs	r0, r3
    c6fc:	2100      	movs	r1, #0
    c6fe:	ea50 0301 	orrs.w	r3, r0, r1
    c702:	f000 80b0 	beq.w	c866 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c706:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c70a:	f04f 0400 	mov.w	r4, #0
    c70e:	f04f 0500 	mov.w	r5, #0
    c712:	0854      	lsrs	r4, r2, #1
    c714:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c718:	085d      	lsrs	r5, r3, #1
    c71a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c71e:	f04f 0000 	mov.w	r0, #0
    c722:	f04f 0100 	mov.w	r1, #0
    c726:	0890      	lsrs	r0, r2, #2
    c728:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c72c:	0899      	lsrs	r1, r3, #2
    c72e:	eb14 0a00 	adds.w	sl, r4, r0
    c732:	eb45 0b01 	adc.w	fp, r5, r1
    c736:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c73a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c73e:	f04f 0000 	mov.w	r0, #0
    c742:	f04f 0100 	mov.w	r1, #0
    c746:	0910      	lsrs	r0, r2, #4
    c748:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c74c:	0919      	lsrs	r1, r3, #4
    c74e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c752:	1814      	adds	r4, r2, r0
    c754:	9402      	str	r4, [sp, #8]
    c756:	414b      	adcs	r3, r1
    c758:	9303      	str	r3, [sp, #12]
    c75a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c75e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c762:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c766:	f04f 0000 	mov.w	r0, #0
    c76a:	f04f 0100 	mov.w	r1, #0
    c76e:	0a10      	lsrs	r0, r2, #8
    c770:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c774:	0a19      	lsrs	r1, r3, #8
    c776:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c77a:	1814      	adds	r4, r2, r0
    c77c:	9404      	str	r4, [sp, #16]
    c77e:	414b      	adcs	r3, r1
    c780:	9305      	str	r3, [sp, #20]
    c782:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c786:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c78a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c78e:	f04f 0000 	mov.w	r0, #0
    c792:	f04f 0100 	mov.w	r1, #0
    c796:	0c10      	lsrs	r0, r2, #16
    c798:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c79c:	0c19      	lsrs	r1, r3, #16
    c79e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7a2:	1814      	adds	r4, r2, r0
    c7a4:	9406      	str	r4, [sp, #24]
    c7a6:	414b      	adcs	r3, r1
    c7a8:	9307      	str	r3, [sp, #28]
    c7aa:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c7ae:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c7b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7b6:	f04f 0000 	mov.w	r0, #0
    c7ba:	f04f 0100 	mov.w	r1, #0
    c7be:	0018      	movs	r0, r3
    c7c0:	2100      	movs	r1, #0
    c7c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7c6:	1814      	adds	r4, r2, r0
    c7c8:	9408      	str	r4, [sp, #32]
    c7ca:	414b      	adcs	r3, r1
    c7cc:	9309      	str	r3, [sp, #36]	; 0x24
    c7ce:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c7d2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c7d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c7da:	f04f 0200 	mov.w	r2, #0
    c7de:	f04f 0300 	mov.w	r3, #0
    c7e2:	08c2      	lsrs	r2, r0, #3
    c7e4:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c7e8:	08cb      	lsrs	r3, r1, #3
    c7ea:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c7ee:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c7f2:	4622      	mov	r2, r4
    c7f4:	462b      	mov	r3, r5
    c7f6:	f04f 0000 	mov.w	r0, #0
    c7fa:	f04f 0100 	mov.w	r1, #0
    c7fe:	0099      	lsls	r1, r3, #2
    c800:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c804:	0090      	lsls	r0, r2, #2
    c806:	4602      	mov	r2, r0
    c808:	460b      	mov	r3, r1
    c80a:	1916      	adds	r6, r2, r4
    c80c:	eb43 0705 	adc.w	r7, r3, r5
    c810:	19b3      	adds	r3, r6, r6
    c812:	930a      	str	r3, [sp, #40]	; 0x28
    c814:	eb47 0307 	adc.w	r3, r7, r7
    c818:	930b      	str	r3, [sp, #44]	; 0x2c
    c81a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c81e:	4630      	mov	r0, r6
    c820:	4639      	mov	r1, r7
    c822:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c826:	1a14      	subs	r4, r2, r0
    c828:	940c      	str	r4, [sp, #48]	; 0x30
    c82a:	eb63 0301 	sbc.w	r3, r3, r1
    c82e:	930d      	str	r3, [sp, #52]	; 0x34
    c830:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c834:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c83c:	f112 0806 	adds.w	r8, r2, #6
    c840:	f143 0900 	adc.w	r9, r3, #0
    c844:	f04f 0200 	mov.w	r2, #0
    c848:	f04f 0300 	mov.w	r3, #0
    c84c:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c850:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c854:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c858:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c85c:	1814      	adds	r4, r2, r0
    c85e:	9400      	str	r4, [sp, #0]
    c860:	414b      	adcs	r3, r1
    c862:	9301      	str	r3, [sp, #4]
    c864:	e02a      	b.n	c8bc <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c868:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c86a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c86c:	085a      	lsrs	r2, r3, #1
    c86e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c870:	089b      	lsrs	r3, r3, #2
    c872:	4413      	add	r3, r2
    c874:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c876:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c878:	091b      	lsrs	r3, r3, #4
    c87a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c87c:	4413      	add	r3, r2
    c87e:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c880:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c882:	0a1b      	lsrs	r3, r3, #8
    c884:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c886:	4413      	add	r3, r2
    c888:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c88a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c88c:	0c1b      	lsrs	r3, r3, #16
    c88e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c890:	4413      	add	r3, r2
    c892:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c894:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c896:	08db      	lsrs	r3, r3, #3
    c898:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c89a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c89c:	4613      	mov	r3, r2
    c89e:	009b      	lsls	r3, r3, #2
    c8a0:	4413      	add	r3, r2
    c8a2:	005b      	lsls	r3, r3, #1
    c8a4:	461a      	mov	r2, r3
    c8a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c8a8:	1a9b      	subs	r3, r3, r2
    c8aa:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c8ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c8ae:	3306      	adds	r3, #6
    c8b0:	091a      	lsrs	r2, r3, #4
    c8b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c8b4:	4413      	add	r3, r2
    c8b6:	2200      	movs	r2, #0
    c8b8:	9300      	str	r3, [sp, #0]
    c8ba:	9201      	str	r2, [sp, #4]
    }
}
    c8bc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8c0:	4610      	mov	r0, r2
    c8c2:	4619      	mov	r1, r3
    c8c4:	b018      	add	sp, #96	; 0x60
    c8c6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c8ca:	4770      	bx	lr

0000c8cc <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c8cc:	b500      	push	{lr}
    c8ce:	b085      	sub	sp, #20
    c8d0:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c8d4:	9a00      	ldr	r2, [sp, #0]
    c8d6:	9b01      	ldr	r3, [sp, #4]
    c8d8:	4313      	orrs	r3, r2
    c8da:	2b00      	cmp	r3, #0
    c8dc:	bf0c      	ite	eq
    c8de:	2301      	moveq	r3, #1
    c8e0:	2300      	movne	r3, #0
    c8e2:	b2db      	uxtb	r3, r3
    c8e4:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c8e6:	e008      	b.n	c8fa <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
    c8ec:	f7ff fefa 	bl	c6e4 <divu64_10>
    c8f0:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c8f4:	9b03      	ldr	r3, [sp, #12]
    c8f6:	3301      	adds	r3, #1
    c8f8:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c8fa:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8fe:	4313      	orrs	r3, r2
    c900:	d1f2      	bne.n	c8e8 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c902:	9b03      	ldr	r3, [sp, #12]
}
    c904:	4618      	mov	r0, r3
    c906:	b005      	add	sp, #20
    c908:	f85d fb04 	ldr.w	pc, [sp], #4

0000c90c <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c90c:	b530      	push	{r4, r5, lr}
    c90e:	b083      	sub	sp, #12
    c910:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c914:	e9dd 2300 	ldrd	r2, r3, [sp]
    c918:	2b00      	cmp	r3, #0
    c91a:	da07      	bge.n	c92c <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c91c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c920:	2100      	movs	r1, #0
    c922:	4254      	negs	r4, r2
    c924:	eb61 0503 	sbc.w	r5, r1, r3
    c928:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c92c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c930:	4610      	mov	r0, r2
    c932:	4619      	mov	r1, r3
    c934:	f7ff ffca 	bl	c8cc <ndigits_in_u64>
    c938:	4603      	mov	r3, r0
}
    c93a:	4618      	mov	r0, r3
    c93c:	b003      	add	sp, #12
    c93e:	bd30      	pop	{r4, r5, pc}

0000c940 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c940:	b084      	sub	sp, #16
    c942:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c946:	9a00      	ldr	r2, [sp, #0]
    c948:	9b01      	ldr	r3, [sp, #4]
    c94a:	4313      	orrs	r3, r2
    c94c:	2b00      	cmp	r3, #0
    c94e:	bf0c      	ite	eq
    c950:	2301      	moveq	r3, #1
    c952:	2300      	movne	r3, #0
    c954:	b2db      	uxtb	r3, r3
    c956:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c958:	e00e      	b.n	c978 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c95a:	e9dd 0100 	ldrd	r0, r1, [sp]
    c95e:	f04f 0200 	mov.w	r2, #0
    c962:	f04f 0300 	mov.w	r3, #0
    c966:	0902      	lsrs	r2, r0, #4
    c968:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c96c:	090b      	lsrs	r3, r1, #4
    c96e:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c972:	9b03      	ldr	r3, [sp, #12]
    c974:	3301      	adds	r3, #1
    c976:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c978:	e9dd 2300 	ldrd	r2, r3, [sp]
    c97c:	4313      	orrs	r3, r2
    c97e:	d1ec      	bne.n	c95a <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c980:	9b03      	ldr	r3, [sp, #12]
}
    c982:	4618      	mov	r0, r3
    c984:	b004      	add	sp, #16
    c986:	4770      	bx	lr

0000c988 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c988:	b086      	sub	sp, #24
    c98a:	9001      	str	r0, [sp, #4]
    c98c:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c98e:	2300      	movs	r3, #0
    c990:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c994:	2300      	movs	r3, #0
    c996:	9304      	str	r3, [sp, #16]
    c998:	2300      	movs	r3, #0
    c99a:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c99c:	9b01      	ldr	r3, [sp, #4]
    c99e:	781b      	ldrb	r3, [r3, #0]
    c9a0:	2b2d      	cmp	r3, #45	; 0x2d
    c9a2:	d11c      	bne.n	c9de <decstr_to_int+0x56>
    {
        bNeg = true;
    c9a4:	2301      	movs	r3, #1
    c9a6:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c9aa:	9b01      	ldr	r3, [sp, #4]
    c9ac:	3301      	adds	r3, #1
    c9ae:	9301      	str	r3, [sp, #4]
        uCnt++;
    c9b0:	9b03      	ldr	r3, [sp, #12]
    c9b2:	3301      	adds	r3, #1
    c9b4:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9b6:	e012      	b.n	c9de <decstr_to_int+0x56>
    {
        ++uCnt;
    c9b8:	9b03      	ldr	r3, [sp, #12]
    c9ba:	3301      	adds	r3, #1
    c9bc:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c9be:	9a04      	ldr	r2, [sp, #16]
    c9c0:	4613      	mov	r3, r2
    c9c2:	009b      	lsls	r3, r3, #2
    c9c4:	4413      	add	r3, r2
    c9c6:	005b      	lsls	r3, r3, #1
    c9c8:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c9ca:	9b01      	ldr	r3, [sp, #4]
    c9cc:	781b      	ldrb	r3, [r3, #0]
    c9ce:	461a      	mov	r2, r3
    c9d0:	9b04      	ldr	r3, [sp, #16]
    c9d2:	4413      	add	r3, r2
    c9d4:	3b30      	subs	r3, #48	; 0x30
    c9d6:	9304      	str	r3, [sp, #16]
        pcStr++;
    c9d8:	9b01      	ldr	r3, [sp, #4]
    c9da:	3301      	adds	r3, #1
    c9dc:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9de:	9b01      	ldr	r3, [sp, #4]
    c9e0:	781b      	ldrb	r3, [r3, #0]
    c9e2:	2b2f      	cmp	r3, #47	; 0x2f
    c9e4:	d903      	bls.n	c9ee <decstr_to_int+0x66>
    c9e6:	9b01      	ldr	r3, [sp, #4]
    c9e8:	781b      	ldrb	r3, [r3, #0]
    c9ea:	2b39      	cmp	r3, #57	; 0x39
    c9ec:	d9e4      	bls.n	c9b8 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c9ee:	9b00      	ldr	r3, [sp, #0]
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d002      	beq.n	c9fa <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c9f4:	9b00      	ldr	r3, [sp, #0]
    c9f6:	9a03      	ldr	r2, [sp, #12]
    c9f8:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c9fa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c9fe:	2b00      	cmp	r3, #0
    ca00:	d002      	beq.n	ca08 <decstr_to_int+0x80>
    ca02:	9b04      	ldr	r3, [sp, #16]
    ca04:	425b      	negs	r3, r3
    ca06:	e000      	b.n	ca0a <decstr_to_int+0x82>
    ca08:	9b04      	ldr	r3, [sp, #16]
}
    ca0a:	4618      	mov	r0, r3
    ca0c:	b006      	add	sp, #24
    ca0e:	4770      	bx	lr

0000ca10 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    ca10:	b500      	push	{lr}
    ca12:	b091      	sub	sp, #68	; 0x44
    ca14:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ca18:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    ca1a:	2300      	movs	r3, #0
    ca1c:	930f      	str	r3, [sp, #60]	; 0x3c
    ca1e:	2300      	movs	r3, #0
    ca20:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    ca22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ca26:	f7ff fe5d 	bl	c6e4 <divu64_10>
    ca2a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    ca2e:	9902      	ldr	r1, [sp, #8]
    ca30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca32:	4613      	mov	r3, r2
    ca34:	009b      	lsls	r3, r3, #2
    ca36:	4413      	add	r3, r2
    ca38:	005b      	lsls	r3, r3, #1
    ca3a:	1acb      	subs	r3, r1, r3
    ca3c:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    ca3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca40:	b2da      	uxtb	r2, r3
    ca42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca44:	1c59      	adds	r1, r3, #1
    ca46:	910f      	str	r1, [sp, #60]	; 0x3c
    ca48:	3230      	adds	r2, #48	; 0x30
    ca4a:	b2d2      	uxtb	r2, r2
    ca4c:	3340      	adds	r3, #64	; 0x40
    ca4e:	446b      	add	r3, sp
    ca50:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    ca54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ca58:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    ca5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca60:	4313      	orrs	r3, r2
    ca62:	d1de      	bne.n	ca22 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca66:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    ca68:	9b01      	ldr	r3, [sp, #4]
    ca6a:	2b00      	cmp	r3, #0
    ca6c:	d010      	beq.n	ca90 <uint64_to_str+0x80>
    {
        while ( ix-- )
    ca6e:	e007      	b.n	ca80 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    ca70:	9b01      	ldr	r3, [sp, #4]
    ca72:	1c5a      	adds	r2, r3, #1
    ca74:	9201      	str	r2, [sp, #4]
    ca76:	a904      	add	r1, sp, #16
    ca78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ca7a:	440a      	add	r2, r1
    ca7c:	7812      	ldrb	r2, [r2, #0]
    ca7e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ca80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca82:	1e5a      	subs	r2, r3, #1
    ca84:	920f      	str	r2, [sp, #60]	; 0x3c
    ca86:	2b00      	cmp	r3, #0
    ca88:	d1f2      	bne.n	ca70 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ca8a:	9b01      	ldr	r3, [sp, #4]
    ca8c:	2200      	movs	r2, #0
    ca8e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    ca92:	4618      	mov	r0, r3
    ca94:	b011      	add	sp, #68	; 0x44
    ca96:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca9a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ca9a:	b08c      	sub	sp, #48	; 0x30
    ca9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    caa0:	9201      	str	r2, [sp, #4]
    caa2:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    caa6:	2300      	movs	r3, #0
    caa8:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    caaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    caae:	4313      	orrs	r3, r2
    cab0:	d135      	bne.n	cb1e <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cab4:	1c5a      	adds	r2, r3, #1
    cab6:	920b      	str	r2, [sp, #44]	; 0x2c
    cab8:	3330      	adds	r3, #48	; 0x30
    caba:	446b      	add	r3, sp
    cabc:	2230      	movs	r2, #48	; 0x30
    cabe:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cac2:	e02c      	b.n	cb1e <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    cac4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cac8:	f003 030f 	and.w	r3, r3, #15
    cacc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cad0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cad4:	2b09      	cmp	r3, #9
    cad6:	d90b      	bls.n	caf0 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cad8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cadc:	2b00      	cmp	r3, #0
    cade:	d001      	beq.n	cae4 <uint64_to_hexstr+0x4a>
    cae0:	2227      	movs	r2, #39	; 0x27
    cae2:	e000      	b.n	cae6 <uint64_to_hexstr+0x4c>
    cae4:	2207      	movs	r2, #7
    cae6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    caea:	4413      	add	r3, r2
    caec:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    caf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caf2:	1c5a      	adds	r2, r3, #1
    caf4:	920b      	str	r2, [sp, #44]	; 0x2c
    caf6:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    cafa:	3230      	adds	r2, #48	; 0x30
    cafc:	b2d2      	uxtb	r2, r2
    cafe:	3330      	adds	r3, #48	; 0x30
    cb00:	446b      	add	r3, sp
    cb02:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cb06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cb0a:	f04f 0200 	mov.w	r2, #0
    cb0e:	f04f 0300 	mov.w	r3, #0
    cb12:	0902      	lsrs	r2, r0, #4
    cb14:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cb18:	090b      	lsrs	r3, r1, #4
    cb1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    cb1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb22:	4313      	orrs	r3, r2
    cb24:	d1ce      	bne.n	cac4 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cb26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb28:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cb2a:	9b01      	ldr	r3, [sp, #4]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d010      	beq.n	cb52 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cb30:	e007      	b.n	cb42 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cb32:	9b01      	ldr	r3, [sp, #4]
    cb34:	1c5a      	adds	r2, r3, #1
    cb36:	9201      	str	r2, [sp, #4]
    cb38:	a904      	add	r1, sp, #16
    cb3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cb3c:	440a      	add	r2, r1
    cb3e:	7812      	ldrb	r2, [r2, #0]
    cb40:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cb42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb44:	1e5a      	subs	r2, r3, #1
    cb46:	920b      	str	r2, [sp, #44]	; 0x2c
    cb48:	2b00      	cmp	r3, #0
    cb4a:	d1f2      	bne.n	cb32 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cb4c:	9b01      	ldr	r3, [sp, #4]
    cb4e:	2200      	movs	r2, #0
    cb50:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cb54:	4618      	mov	r0, r3
    cb56:	b00c      	add	sp, #48	; 0x30
    cb58:	4770      	bx	lr

0000cb5a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cb5a:	b084      	sub	sp, #16
    cb5c:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    cb5e:	2300      	movs	r3, #0
    cb60:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    cb62:	9b01      	ldr	r3, [sp, #4]
    cb64:	2b00      	cmp	r3, #0
    cb66:	d104      	bne.n	cb72 <simple_strlen+0x18>
    {
        return ui32RetVal;
    cb68:	9b03      	ldr	r3, [sp, #12]
    cb6a:	e009      	b.n	cb80 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cb6c:	9b03      	ldr	r3, [sp, #12]
    cb6e:	3301      	adds	r3, #1
    cb70:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    cb72:	9b01      	ldr	r3, [sp, #4]
    cb74:	1c5a      	adds	r2, r3, #1
    cb76:	9201      	str	r2, [sp, #4]
    cb78:	781b      	ldrb	r3, [r3, #0]
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d1f6      	bne.n	cb6c <simple_strlen+0x12>
    }
    return ui32RetVal;
    cb7e:	9b03      	ldr	r3, [sp, #12]
}
    cb80:	4618      	mov	r0, r3
    cb82:	b004      	add	sp, #16
    cb84:	4770      	bx	lr

0000cb86 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cb86:	b086      	sub	sp, #24
    cb88:	9003      	str	r0, [sp, #12]
    cb8a:	460b      	mov	r3, r1
    cb8c:	9201      	str	r2, [sp, #4]
    cb8e:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cb92:	2300      	movs	r3, #0
    cb94:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cb96:	9b01      	ldr	r3, [sp, #4]
    cb98:	2b00      	cmp	r3, #0
    cb9a:	dc0d      	bgt.n	cbb8 <padbuffer+0x32>
    {
        return i32Cnt;
    cb9c:	9b05      	ldr	r3, [sp, #20]
    cb9e:	e011      	b.n	cbc4 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cba0:	9b03      	ldr	r3, [sp, #12]
    cba2:	2b00      	cmp	r3, #0
    cba4:	d005      	beq.n	cbb2 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cba6:	9b03      	ldr	r3, [sp, #12]
    cba8:	1c5a      	adds	r2, r3, #1
    cbaa:	9203      	str	r2, [sp, #12]
    cbac:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cbb0:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cbb2:	9b05      	ldr	r3, [sp, #20]
    cbb4:	3301      	adds	r3, #1
    cbb6:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cbb8:	9b01      	ldr	r3, [sp, #4]
    cbba:	1e5a      	subs	r2, r3, #1
    cbbc:	9201      	str	r2, [sp, #4]
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d1ee      	bne.n	cba0 <padbuffer+0x1a>
    }

    return i32Cnt;
    cbc2:	9b05      	ldr	r3, [sp, #20]
}
    cbc4:	4618      	mov	r0, r3
    cbc6:	b006      	add	sp, #24
    cbc8:	4770      	bx	lr
	...

0000cbcc <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbce:	b08f      	sub	sp, #60	; 0x3c
    cbd0:	ed8d 0a03 	vstr	s0, [sp, #12]
    cbd4:	9002      	str	r0, [sp, #8]
    cbd6:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cbd8:	9b02      	ldr	r3, [sp, #8]
    cbda:	681b      	ldr	r3, [r3, #0]
    cbdc:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbe0:	2b03      	cmp	r3, #3
    cbe2:	dc02      	bgt.n	cbea <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cbe4:	f06f 0302 	mvn.w	r3, #2
    cbe8:	e0e9      	b.n	cdbe <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cbea:	eddd 7a03 	vldr	s15, [sp, #12]
    cbee:	eef5 7a40 	vcmp.f32	s15, #0.0
    cbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cbf6:	d104      	bne.n	cc02 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cbf8:	9b02      	ldr	r3, [sp, #8]
    cbfa:	4a72      	ldr	r2, [pc, #456]	; (cdc4 <ftoa+0x1f8>)
    cbfc:	601a      	str	r2, [r3, #0]
        return 3;
    cbfe:	2303      	movs	r3, #3
    cc00:	e0dd      	b.n	cdbe <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cc02:	9b02      	ldr	r3, [sp, #8]
    cc04:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cc06:	9b03      	ldr	r3, [sp, #12]
    cc08:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cc0a:	9b04      	ldr	r3, [sp, #16]
    cc0c:	15db      	asrs	r3, r3, #23
    cc0e:	b2db      	uxtb	r3, r3
    cc10:	3b7f      	subs	r3, #127	; 0x7f
    cc12:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cc14:	9b04      	ldr	r3, [sp, #16]
    cc16:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cc1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cc1e:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cc20:	2300      	movs	r3, #0
    cc22:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cc24:	2300      	movs	r3, #0
    cc26:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cc28:	9b07      	ldr	r3, [sp, #28]
    cc2a:	2b1e      	cmp	r3, #30
    cc2c:	dd02      	ble.n	cc34 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cc2e:	f06f 0301 	mvn.w	r3, #1
    cc32:	e0c4      	b.n	cdbe <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cc34:	9b07      	ldr	r3, [sp, #28]
    cc36:	f113 0f17 	cmn.w	r3, #23
    cc3a:	da02      	bge.n	cc42 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cc3c:	f04f 33ff 	mov.w	r3, #4294967295
    cc40:	e0bd      	b.n	cdbe <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cc42:	9b07      	ldr	r3, [sp, #28]
    cc44:	2b16      	cmp	r3, #22
    cc46:	dd06      	ble.n	cc56 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cc48:	9b07      	ldr	r3, [sp, #28]
    cc4a:	3b17      	subs	r3, #23
    cc4c:	9a06      	ldr	r2, [sp, #24]
    cc4e:	fa02 f303 	lsl.w	r3, r2, r3
    cc52:	930d      	str	r3, [sp, #52]	; 0x34
    cc54:	e01a      	b.n	cc8c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cc56:	9b07      	ldr	r3, [sp, #28]
    cc58:	2b00      	cmp	r3, #0
    cc5a:	db0f      	blt.n	cc7c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cc5c:	9b07      	ldr	r3, [sp, #28]
    cc5e:	f1c3 0317 	rsb	r3, r3, #23
    cc62:	9a06      	ldr	r2, [sp, #24]
    cc64:	fa42 f303 	asr.w	r3, r2, r3
    cc68:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cc6a:	9b07      	ldr	r3, [sp, #28]
    cc6c:	3301      	adds	r3, #1
    cc6e:	9a06      	ldr	r2, [sp, #24]
    cc70:	fa02 f303 	lsl.w	r3, r2, r3
    cc74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc78:	930c      	str	r3, [sp, #48]	; 0x30
    cc7a:	e007      	b.n	cc8c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc7c:	9b06      	ldr	r3, [sp, #24]
    cc7e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cc82:	9b07      	ldr	r3, [sp, #28]
    cc84:	43db      	mvns	r3, r3
    cc86:	fa42 f303 	asr.w	r3, r2, r3
    cc8a:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cc8c:	9b04      	ldr	r3, [sp, #16]
    cc8e:	2b00      	cmp	r3, #0
    cc90:	da04      	bge.n	cc9c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cc92:	9b02      	ldr	r3, [sp, #8]
    cc94:	1c5a      	adds	r2, r3, #1
    cc96:	9202      	str	r2, [sp, #8]
    cc98:	222d      	movs	r2, #45	; 0x2d
    cc9a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cc9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc9e:	2b00      	cmp	r3, #0
    cca0:	d105      	bne.n	ccae <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cca2:	9b02      	ldr	r3, [sp, #8]
    cca4:	1c5a      	adds	r2, r3, #1
    cca6:	9202      	str	r2, [sp, #8]
    cca8:	2230      	movs	r2, #48	; 0x30
    ccaa:	701a      	strb	r2, [r3, #0]
    ccac:	e023      	b.n	ccf6 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    ccae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	dd09      	ble.n	ccc8 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    ccb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccb6:	17da      	asrs	r2, r3, #31
    ccb8:	461e      	mov	r6, r3
    ccba:	4617      	mov	r7, r2
    ccbc:	9a02      	ldr	r2, [sp, #8]
    ccbe:	4630      	mov	r0, r6
    ccc0:	4639      	mov	r1, r7
    ccc2:	f7ff fea5 	bl	ca10 <uint64_to_str>
    ccc6:	e012      	b.n	ccee <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    ccc8:	9b02      	ldr	r3, [sp, #8]
    ccca:	1c5a      	adds	r2, r3, #1
    cccc:	9202      	str	r2, [sp, #8]
    ccce:	222d      	movs	r2, #45	; 0x2d
    ccd0:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ccd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccd4:	425b      	negs	r3, r3
    ccd6:	17da      	asrs	r2, r3, #31
    ccd8:	461c      	mov	r4, r3
    ccda:	4615      	mov	r5, r2
    ccdc:	9a02      	ldr	r2, [sp, #8]
    ccde:	4620      	mov	r0, r4
    cce0:	4629      	mov	r1, r5
    cce2:	f7ff fe95 	bl	ca10 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cce6:	e002      	b.n	ccee <ftoa+0x122>
        {
            pcBuf++;
    cce8:	9b02      	ldr	r3, [sp, #8]
    ccea:	3301      	adds	r3, #1
    ccec:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    ccee:	9b02      	ldr	r3, [sp, #8]
    ccf0:	781b      	ldrb	r3, [r3, #0]
    ccf2:	2b00      	cmp	r3, #0
    ccf4:	d1f8      	bne.n	cce8 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ccf6:	9b02      	ldr	r3, [sp, #8]
    ccf8:	1c5a      	adds	r2, r3, #1
    ccfa:	9202      	str	r2, [sp, #8]
    ccfc:	222e      	movs	r2, #46	; 0x2e
    ccfe:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cd00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd02:	2b00      	cmp	r3, #0
    cd04:	d105      	bne.n	cd12 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cd06:	9b02      	ldr	r3, [sp, #8]
    cd08:	1c5a      	adds	r2, r3, #1
    cd0a:	9202      	str	r2, [sp, #8]
    cd0c:	2230      	movs	r2, #48	; 0x30
    cd0e:	701a      	strb	r2, [r3, #0]
    cd10:	e04f      	b.n	cdb2 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cd12:	9a02      	ldr	r2, [sp, #8]
    cd14:	9b08      	ldr	r3, [sp, #32]
    cd16:	1ad3      	subs	r3, r2, r3
    cd18:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cd1a:	1ad3      	subs	r3, r2, r3
    cd1c:	3b01      	subs	r3, #1
    cd1e:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cd20:	9a05      	ldr	r2, [sp, #20]
    cd22:	9b01      	ldr	r3, [sp, #4]
    cd24:	4293      	cmp	r3, r2
    cd26:	bfa8      	it	ge
    cd28:	4613      	movge	r3, r2
    cd2a:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cd2c:	2300      	movs	r3, #0
    cd2e:	930a      	str	r3, [sp, #40]	; 0x28
    cd30:	e015      	b.n	cd5e <ftoa+0x192>
        {
            i32FracPart *= 10;
    cd32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd34:	4613      	mov	r3, r2
    cd36:	009b      	lsls	r3, r3, #2
    cd38:	4413      	add	r3, r2
    cd3a:	005b      	lsls	r3, r3, #1
    cd3c:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cd3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd40:	161b      	asrs	r3, r3, #24
    cd42:	b2da      	uxtb	r2, r3
    cd44:	9b02      	ldr	r3, [sp, #8]
    cd46:	1c59      	adds	r1, r3, #1
    cd48:	9102      	str	r1, [sp, #8]
    cd4a:	3230      	adds	r2, #48	; 0x30
    cd4c:	b2d2      	uxtb	r2, r2
    cd4e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd56:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cd58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd5a:	3301      	adds	r3, #1
    cd5c:	930a      	str	r3, [sp, #40]	; 0x28
    cd5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cd60:	9b05      	ldr	r3, [sp, #20]
    cd62:	429a      	cmp	r2, r3
    cd64:	dbe5      	blt.n	cd32 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cd66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd68:	4613      	mov	r3, r2
    cd6a:	009b      	lsls	r3, r3, #2
    cd6c:	4413      	add	r3, r2
    cd6e:	005b      	lsls	r3, r3, #1
    cd70:	161b      	asrs	r3, r3, #24
    cd72:	2b04      	cmp	r3, #4
    cd74:	dd1d      	ble.n	cdb2 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cd76:	9b02      	ldr	r3, [sp, #8]
    cd78:	3b01      	subs	r3, #1
    cd7a:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd7c:	e015      	b.n	cdaa <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd80:	781b      	ldrb	r3, [r3, #0]
    cd82:	2b2e      	cmp	r3, #46	; 0x2e
    cd84:	d00e      	beq.n	cda4 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cd86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd88:	781b      	ldrb	r3, [r3, #0]
    cd8a:	2b39      	cmp	r3, #57	; 0x39
    cd8c:	d103      	bne.n	cd96 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cd8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd90:	2230      	movs	r2, #48	; 0x30
    cd92:	701a      	strb	r2, [r3, #0]
    cd94:	e006      	b.n	cda4 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cd96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd98:	781b      	ldrb	r3, [r3, #0]
    cd9a:	3301      	adds	r3, #1
    cd9c:	b2da      	uxtb	r2, r3
    cd9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cda0:	701a      	strb	r2, [r3, #0]
                    break;
    cda2:	e006      	b.n	cdb2 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cda4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cda6:	3b01      	subs	r3, #1
    cda8:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cdaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cdac:	9b08      	ldr	r3, [sp, #32]
    cdae:	429a      	cmp	r2, r3
    cdb0:	d2e5      	bcs.n	cd7e <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cdb2:	9b02      	ldr	r3, [sp, #8]
    cdb4:	2200      	movs	r2, #0
    cdb6:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cdb8:	9a02      	ldr	r2, [sp, #8]
    cdba:	9b08      	ldr	r3, [sp, #32]
    cdbc:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cdbe:	4618      	mov	r0, r3
    cdc0:	b00f      	add	sp, #60	; 0x3c
    cdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdc4:	00302e30 	.word	0x00302e30

0000cdc8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdcc:	b097      	sub	sp, #92	; 0x5c
    cdce:	9003      	str	r0, [sp, #12]
    cdd0:	9102      	str	r1, [sp, #8]
    cdd2:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cdd4:	2300      	movs	r3, #0
    cdd6:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cdd8:	2300      	movs	r3, #0
    cdda:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cddc:	e2e9      	b.n	d3b2 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cdde:	2306      	movs	r3, #6
    cde0:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cde2:	9b02      	ldr	r3, [sp, #8]
    cde4:	781b      	ldrb	r3, [r3, #0]
    cde6:	2b25      	cmp	r3, #37	; 0x25
    cde8:	d01f      	beq.n	ce2a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cdea:	9b03      	ldr	r3, [sp, #12]
    cdec:	2b00      	cmp	r3, #0
    cdee:	d015      	beq.n	ce1c <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cdf0:	9b02      	ldr	r3, [sp, #8]
    cdf2:	781b      	ldrb	r3, [r3, #0]
    cdf4:	2b0a      	cmp	r3, #10
    cdf6:	d10b      	bne.n	ce10 <am_util_stdio_vsprintf+0x48>
    cdf8:	4ba8      	ldr	r3, [pc, #672]	; (d09c <am_util_stdio_vsprintf+0x2d4>)
    cdfa:	781b      	ldrb	r3, [r3, #0]
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	d007      	beq.n	ce10 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    ce00:	9b03      	ldr	r3, [sp, #12]
    ce02:	1c5a      	adds	r2, r3, #1
    ce04:	9203      	str	r2, [sp, #12]
    ce06:	220d      	movs	r2, #13
    ce08:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    ce0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce0c:	3301      	adds	r3, #1
    ce0e:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    ce10:	9b03      	ldr	r3, [sp, #12]
    ce12:	1c5a      	adds	r2, r3, #1
    ce14:	9203      	str	r2, [sp, #12]
    ce16:	9a02      	ldr	r2, [sp, #8]
    ce18:	7812      	ldrb	r2, [r2, #0]
    ce1a:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    ce1c:	9b02      	ldr	r3, [sp, #8]
    ce1e:	3301      	adds	r3, #1
    ce20:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    ce22:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce24:	3301      	adds	r3, #1
    ce26:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    ce28:	e2c3      	b.n	d3b2 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    ce2a:	9b02      	ldr	r3, [sp, #8]
    ce2c:	3301      	adds	r3, #1
    ce2e:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    ce30:	2300      	movs	r3, #0
    ce32:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    ce36:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce3a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    ce3e:	2320      	movs	r3, #32
    ce40:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    ce44:	9b02      	ldr	r3, [sp, #8]
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	2b30      	cmp	r3, #48	; 0x30
    ce4a:	d105      	bne.n	ce58 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    ce4c:	2330      	movs	r3, #48	; 0x30
    ce4e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    ce52:	9b02      	ldr	r3, [sp, #8]
    ce54:	3301      	adds	r3, #1
    ce56:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ce58:	ab05      	add	r3, sp, #20
    ce5a:	4619      	mov	r1, r3
    ce5c:	9802      	ldr	r0, [sp, #8]
    ce5e:	f7ff fd93 	bl	c988 <decstr_to_int>
    ce62:	4603      	mov	r3, r0
    ce64:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    ce66:	9b05      	ldr	r3, [sp, #20]
    ce68:	9a02      	ldr	r2, [sp, #8]
    ce6a:	4413      	add	r3, r2
    ce6c:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ce6e:	9b02      	ldr	r3, [sp, #8]
    ce70:	781b      	ldrb	r3, [r3, #0]
    ce72:	2b73      	cmp	r3, #115	; 0x73
    ce74:	d005      	beq.n	ce82 <am_util_stdio_vsprintf+0xba>
    ce76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce78:	2b00      	cmp	r3, #0
    ce7a:	da02      	bge.n	ce82 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    ce7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce7e:	425b      	negs	r3, r3
    ce80:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ce82:	9b02      	ldr	r3, [sp, #8]
    ce84:	781b      	ldrb	r3, [r3, #0]
    ce86:	2b2e      	cmp	r3, #46	; 0x2e
    ce88:	d10d      	bne.n	cea6 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    ce8a:	9b02      	ldr	r3, [sp, #8]
    ce8c:	3301      	adds	r3, #1
    ce8e:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ce90:	ab05      	add	r3, sp, #20
    ce92:	4619      	mov	r1, r3
    ce94:	9802      	ldr	r0, [sp, #8]
    ce96:	f7ff fd77 	bl	c988 <decstr_to_int>
    ce9a:	4603      	mov	r3, r0
    ce9c:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    ce9e:	9b05      	ldr	r3, [sp, #20]
    cea0:	9a02      	ldr	r2, [sp, #8]
    cea2:	4413      	add	r3, r2
    cea4:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cea6:	9b02      	ldr	r3, [sp, #8]
    cea8:	781b      	ldrb	r3, [r3, #0]
    ceaa:	2b6c      	cmp	r3, #108	; 0x6c
    ceac:	d10c      	bne.n	cec8 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    ceae:	9b02      	ldr	r3, [sp, #8]
    ceb0:	3301      	adds	r3, #1
    ceb2:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ceb4:	9b02      	ldr	r3, [sp, #8]
    ceb6:	781b      	ldrb	r3, [r3, #0]
    ceb8:	2b6c      	cmp	r3, #108	; 0x6c
    ceba:	d105      	bne.n	cec8 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cebc:	9b02      	ldr	r3, [sp, #8]
    cebe:	3301      	adds	r3, #1
    cec0:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cec2:	2301      	movs	r3, #1
    cec4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cec8:	9b02      	ldr	r3, [sp, #8]
    ceca:	781b      	ldrb	r3, [r3, #0]
    cecc:	3b46      	subs	r3, #70	; 0x46
    cece:	2b32      	cmp	r3, #50	; 0x32
    ced0:	f200 825c 	bhi.w	d38c <am_util_stdio_vsprintf+0x5c4>
    ced4:	a201      	add	r2, pc, #4	; (adr r2, cedc <am_util_stdio_vsprintf+0x114>)
    ced6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ceda:	bf00      	nop
    cedc:	0000d313 	.word	0x0000d313
    cee0:	0000d38d 	.word	0x0000d38d
    cee4:	0000d38d 	.word	0x0000d38d
    cee8:	0000d38d 	.word	0x0000d38d
    ceec:	0000d38d 	.word	0x0000d38d
    cef0:	0000d38d 	.word	0x0000d38d
    cef4:	0000d38d 	.word	0x0000d38d
    cef8:	0000d38d 	.word	0x0000d38d
    cefc:	0000d38d 	.word	0x0000d38d
    cf00:	0000d38d 	.word	0x0000d38d
    cf04:	0000d38d 	.word	0x0000d38d
    cf08:	0000d38d 	.word	0x0000d38d
    cf0c:	0000d38d 	.word	0x0000d38d
    cf10:	0000d38d 	.word	0x0000d38d
    cf14:	0000d38d 	.word	0x0000d38d
    cf18:	0000d38d 	.word	0x0000d38d
    cf1c:	0000d38d 	.word	0x0000d38d
    cf20:	0000d38d 	.word	0x0000d38d
    cf24:	0000d0a7 	.word	0x0000d0a7
    cf28:	0000d38d 	.word	0x0000d38d
    cf2c:	0000d38d 	.word	0x0000d38d
    cf30:	0000d38d 	.word	0x0000d38d
    cf34:	0000d38d 	.word	0x0000d38d
    cf38:	0000d38d 	.word	0x0000d38d
    cf3c:	0000d38d 	.word	0x0000d38d
    cf40:	0000d38d 	.word	0x0000d38d
    cf44:	0000d38d 	.word	0x0000d38d
    cf48:	0000d38d 	.word	0x0000d38d
    cf4c:	0000d38d 	.word	0x0000d38d
    cf50:	0000cfa9 	.word	0x0000cfa9
    cf54:	0000d1d7 	.word	0x0000d1d7
    cf58:	0000d38d 	.word	0x0000d38d
    cf5c:	0000d313 	.word	0x0000d313
    cf60:	0000d38d 	.word	0x0000d38d
    cf64:	0000d38d 	.word	0x0000d38d
    cf68:	0000d1d7 	.word	0x0000d1d7
    cf6c:	0000d38d 	.word	0x0000d38d
    cf70:	0000d38d 	.word	0x0000d38d
    cf74:	0000d38d 	.word	0x0000d38d
    cf78:	0000d38d 	.word	0x0000d38d
    cf7c:	0000d38d 	.word	0x0000d38d
    cf80:	0000d38d 	.word	0x0000d38d
    cf84:	0000d38d 	.word	0x0000d38d
    cf88:	0000d38d 	.word	0x0000d38d
    cf8c:	0000d38d 	.word	0x0000d38d
    cf90:	0000cfcf 	.word	0x0000cfcf
    cf94:	0000d38d 	.word	0x0000d38d
    cf98:	0000d141 	.word	0x0000d141
    cf9c:	0000d38d 	.word	0x0000d38d
    cfa0:	0000d38d 	.word	0x0000d38d
    cfa4:	0000d0a1 	.word	0x0000d0a1
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cfa8:	9b01      	ldr	r3, [sp, #4]
    cfaa:	1d1a      	adds	r2, r3, #4
    cfac:	9201      	str	r2, [sp, #4]
    cfae:	681b      	ldr	r3, [r3, #0]
    cfb0:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cfb4:	9b03      	ldr	r3, [sp, #12]
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d005      	beq.n	cfc6 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cfba:	9b03      	ldr	r3, [sp, #12]
    cfbc:	1c5a      	adds	r2, r3, #1
    cfbe:	9203      	str	r2, [sp, #12]
    cfc0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cfc4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cfc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cfc8:	3301      	adds	r3, #1
    cfca:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cfcc:	e1ee      	b.n	d3ac <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cfce:	9b01      	ldr	r3, [sp, #4]
    cfd0:	1d1a      	adds	r2, r3, #4
    cfd2:	9201      	str	r2, [sp, #4]
    cfd4:	681b      	ldr	r3, [r3, #0]
    cfd6:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cfd8:	9815      	ldr	r0, [sp, #84]	; 0x54
    cfda:	f7ff fdbe 	bl	cb5a <simple_strlen>
    cfde:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cfe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfe2:	2b00      	cmp	r3, #0
    cfe4:	dd2e      	ble.n	d044 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cfe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cfea:	429a      	cmp	r2, r3
    cfec:	d22a      	bcs.n	d044 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cfee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cff2:	1ad3      	subs	r3, r2, r3
    cff4:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cff6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cffa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cffc:	4619      	mov	r1, r3
    cffe:	9803      	ldr	r0, [sp, #12]
    d000:	f7ff fdc1 	bl	cb86 <padbuffer>
    d004:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d006:	9b03      	ldr	r3, [sp, #12]
    d008:	2b00      	cmp	r3, #0
    d00a:	d001      	beq.n	d010 <am_util_stdio_vsprintf+0x248>
    d00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d00e:	e000      	b.n	d012 <am_util_stdio_vsprintf+0x24a>
    d010:	2300      	movs	r3, #0
    d012:	9a03      	ldr	r2, [sp, #12]
    d014:	4413      	add	r3, r2
    d016:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d018:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d01a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d01c:	4413      	add	r3, r2
    d01e:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d020:	2300      	movs	r3, #0
    d022:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d024:	e00e      	b.n	d044 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d026:	9b03      	ldr	r3, [sp, #12]
    d028:	2b00      	cmp	r3, #0
    d02a:	d005      	beq.n	d038 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d02c:	9b03      	ldr	r3, [sp, #12]
    d02e:	1c5a      	adds	r2, r3, #1
    d030:	9203      	str	r2, [sp, #12]
    d032:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d034:	7812      	ldrb	r2, [r2, #0]
    d036:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d038:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d03a:	3301      	adds	r3, #1
    d03c:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d03e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d040:	3301      	adds	r3, #1
    d042:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d044:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d046:	781b      	ldrb	r3, [r3, #0]
    d048:	2b00      	cmp	r3, #0
    d04a:	d1ec      	bne.n	d026 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d04e:	2b00      	cmp	r3, #0
    d050:	f000 81a9 	beq.w	d3a6 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d054:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d056:	425b      	negs	r3, r3
    d058:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d05a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d05c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d05e:	429a      	cmp	r2, r3
    d060:	f080 81a1 	bcs.w	d3a6 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d064:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d068:	1ad3      	subs	r3, r2, r3
    d06a:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d06c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d070:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d072:	4619      	mov	r1, r3
    d074:	9803      	ldr	r0, [sp, #12]
    d076:	f7ff fd86 	bl	cb86 <padbuffer>
    d07a:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d07c:	9b03      	ldr	r3, [sp, #12]
    d07e:	2b00      	cmp	r3, #0
    d080:	d001      	beq.n	d086 <am_util_stdio_vsprintf+0x2be>
    d082:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d084:	e000      	b.n	d088 <am_util_stdio_vsprintf+0x2c0>
    d086:	2300      	movs	r3, #0
    d088:	9a03      	ldr	r2, [sp, #12]
    d08a:	4413      	add	r3, r2
    d08c:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d08e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d090:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d092:	4413      	add	r3, r2
    d094:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d096:	2300      	movs	r3, #0
    d098:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d09a:	e184      	b.n	d3a6 <am_util_stdio_vsprintf+0x5de>
    d09c:	1000179c 	.word	0x1000179c

            case 'x':
                bLower = true;
    d0a0:	2301      	movs	r3, #1
    d0a2:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0a6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	d009      	beq.n	d0c2 <am_util_stdio_vsprintf+0x2fa>
    d0ae:	9b01      	ldr	r3, [sp, #4]
    d0b0:	3307      	adds	r3, #7
    d0b2:	f023 0307 	bic.w	r3, r3, #7
    d0b6:	f103 0208 	add.w	r2, r3, #8
    d0ba:	9201      	str	r2, [sp, #4]
    d0bc:	e9d3 4500 	ldrd	r4, r5, [r3]
    d0c0:	e006      	b.n	d0d0 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d0c2:	9b01      	ldr	r3, [sp, #4]
    d0c4:	1d1a      	adds	r2, r3, #4
    d0c6:	9201      	str	r2, [sp, #4]
    d0c8:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0ca:	2200      	movs	r2, #0
    d0cc:	461c      	mov	r4, r3
    d0ce:	4615      	mov	r5, r2
    d0d0:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d0d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	d01e      	beq.n	d118 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d0da:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0de:	f7ff fc2f 	bl	c940 <ndigits_in_hex>
    d0e2:	4602      	mov	r2, r0
    d0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0e6:	1a9b      	subs	r3, r3, r2
    d0e8:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0ea:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d0ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d0f0:	4619      	mov	r1, r3
    d0f2:	9803      	ldr	r0, [sp, #12]
    d0f4:	f7ff fd47 	bl	cb86 <padbuffer>
    d0f8:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d0fa:	9b03      	ldr	r3, [sp, #12]
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d001      	beq.n	d104 <am_util_stdio_vsprintf+0x33c>
    d100:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d102:	e000      	b.n	d106 <am_util_stdio_vsprintf+0x33e>
    d104:	2300      	movs	r3, #0
    d106:	9a03      	ldr	r2, [sp, #12]
    d108:	4413      	add	r3, r2
    d10a:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d10c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d10e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d110:	4413      	add	r3, r2
    d112:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d114:	2300      	movs	r3, #0
    d116:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d118:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d11c:	9a03      	ldr	r2, [sp, #12]
    d11e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d122:	f7ff fcba 	bl	ca9a <uint64_to_hexstr>
    d126:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d128:	9b03      	ldr	r3, [sp, #12]
    d12a:	2b00      	cmp	r3, #0
    d12c:	d003      	beq.n	d136 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d12e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d130:	9a03      	ldr	r2, [sp, #12]
    d132:	4413      	add	r3, r2
    d134:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d138:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d13a:	4413      	add	r3, r2
    d13c:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d13e:	e135      	b.n	d3ac <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d140:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d144:	2b00      	cmp	r3, #0
    d146:	d009      	beq.n	d15c <am_util_stdio_vsprintf+0x394>
    d148:	9b01      	ldr	r3, [sp, #4]
    d14a:	3307      	adds	r3, #7
    d14c:	f023 0307 	bic.w	r3, r3, #7
    d150:	f103 0208 	add.w	r2, r3, #8
    d154:	9201      	str	r2, [sp, #4]
    d156:	e9d3 6700 	ldrd	r6, r7, [r3]
    d15a:	e006      	b.n	d16a <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d15c:	9b01      	ldr	r3, [sp, #4]
    d15e:	1d1a      	adds	r2, r3, #4
    d160:	9201      	str	r2, [sp, #4]
    d162:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d164:	2200      	movs	r2, #0
    d166:	461e      	mov	r6, r3
    d168:	4617      	mov	r7, r2
    d16a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d16e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d170:	2b00      	cmp	r3, #0
    d172:	d01e      	beq.n	d1b2 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d174:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d178:	f7ff fba8 	bl	c8cc <ndigits_in_u64>
    d17c:	4602      	mov	r2, r0
    d17e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d180:	1a9b      	subs	r3, r3, r2
    d182:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d184:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d188:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d18a:	4619      	mov	r1, r3
    d18c:	9803      	ldr	r0, [sp, #12]
    d18e:	f7ff fcfa 	bl	cb86 <padbuffer>
    d192:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d194:	9b03      	ldr	r3, [sp, #12]
    d196:	2b00      	cmp	r3, #0
    d198:	d001      	beq.n	d19e <am_util_stdio_vsprintf+0x3d6>
    d19a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d19c:	e000      	b.n	d1a0 <am_util_stdio_vsprintf+0x3d8>
    d19e:	2300      	movs	r3, #0
    d1a0:	9a03      	ldr	r2, [sp, #12]
    d1a2:	4413      	add	r3, r2
    d1a4:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d1a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1aa:	4413      	add	r3, r2
    d1ac:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d1ae:	2300      	movs	r3, #0
    d1b0:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d1b2:	9a03      	ldr	r2, [sp, #12]
    d1b4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d1b8:	f7ff fc2a 	bl	ca10 <uint64_to_str>
    d1bc:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d1be:	9b03      	ldr	r3, [sp, #12]
    d1c0:	2b00      	cmp	r3, #0
    d1c2:	d003      	beq.n	d1cc <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1c6:	9a03      	ldr	r2, [sp, #12]
    d1c8:	4413      	add	r3, r2
    d1ca:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d1cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1d0:	4413      	add	r3, r2
    d1d2:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d1d4:	e0ea      	b.n	d3ac <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1d6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d1da:	2b00      	cmp	r3, #0
    d1dc:	d009      	beq.n	d1f2 <am_util_stdio_vsprintf+0x42a>
    d1de:	9b01      	ldr	r3, [sp, #4]
    d1e0:	3307      	adds	r3, #7
    d1e2:	f023 0307 	bic.w	r3, r3, #7
    d1e6:	f103 0208 	add.w	r2, r3, #8
    d1ea:	9201      	str	r2, [sp, #4]
    d1ec:	e9d3 8900 	ldrd	r8, r9, [r3]
    d1f0:	e006      	b.n	d200 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d1f2:	9b01      	ldr	r3, [sp, #4]
    d1f4:	1d1a      	adds	r2, r3, #4
    d1f6:	9201      	str	r2, [sp, #4]
    d1f8:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1fa:	17da      	asrs	r2, r3, #31
    d1fc:	4698      	mov	r8, r3
    d1fe:	4691      	mov	r9, r2
    d200:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d204:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d208:	2b00      	cmp	r3, #0
    d20a:	da0c      	bge.n	d226 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d20c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d210:	2100      	movs	r1, #0
    d212:	f1d2 0a00 	rsbs	sl, r2, #0
    d216:	eb61 0b03 	sbc.w	fp, r1, r3
    d21a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d21e:	2301      	movs	r3, #1
    d220:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d224:	e006      	b.n	d234 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d226:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d22a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d22e:	2300      	movs	r3, #0
    d230:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d234:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d236:	2b00      	cmp	r3, #0
    d238:	d04a      	beq.n	d2d0 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d23a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d23e:	4610      	mov	r0, r2
    d240:	4619      	mov	r1, r3
    d242:	f7ff fb63 	bl	c90c <ndigits_in_i64>
    d246:	4602      	mov	r2, r0
    d248:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d24a:	1a9b      	subs	r3, r3, r2
    d24c:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d24e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d252:	2b00      	cmp	r3, #0
    d254:	d011      	beq.n	d27a <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d256:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d258:	3b01      	subs	r3, #1
    d25a:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d25c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d260:	2b30      	cmp	r3, #48	; 0x30
    d262:	d10a      	bne.n	d27a <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d264:	9b03      	ldr	r3, [sp, #12]
    d266:	2b00      	cmp	r3, #0
    d268:	d004      	beq.n	d274 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d26a:	9b03      	ldr	r3, [sp, #12]
    d26c:	1c5a      	adds	r2, r3, #1
    d26e:	9203      	str	r2, [sp, #12]
    d270:	222d      	movs	r2, #45	; 0x2d
    d272:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d274:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d276:	3301      	adds	r3, #1
    d278:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d27a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d27e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d280:	4619      	mov	r1, r3
    d282:	9803      	ldr	r0, [sp, #12]
    d284:	f7ff fc7f 	bl	cb86 <padbuffer>
    d288:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d28a:	9b03      	ldr	r3, [sp, #12]
    d28c:	2b00      	cmp	r3, #0
    d28e:	d001      	beq.n	d294 <am_util_stdio_vsprintf+0x4cc>
    d290:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d292:	e000      	b.n	d296 <am_util_stdio_vsprintf+0x4ce>
    d294:	2300      	movs	r3, #0
    d296:	9a03      	ldr	r2, [sp, #12]
    d298:	4413      	add	r3, r2
    d29a:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d29e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d2a0:	4413      	add	r3, r2
    d2a2:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d2a4:	2300      	movs	r3, #0
    d2a6:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d2a8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d2ac:	2b00      	cmp	r3, #0
    d2ae:	d01e      	beq.n	d2ee <am_util_stdio_vsprintf+0x526>
    d2b0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d2b4:	2b20      	cmp	r3, #32
    d2b6:	d11a      	bne.n	d2ee <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d2b8:	9b03      	ldr	r3, [sp, #12]
    d2ba:	2b00      	cmp	r3, #0
    d2bc:	d004      	beq.n	d2c8 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d2be:	9b03      	ldr	r3, [sp, #12]
    d2c0:	1c5a      	adds	r2, r3, #1
    d2c2:	9203      	str	r2, [sp, #12]
    d2c4:	222d      	movs	r2, #45	; 0x2d
    d2c6:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d2c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2ca:	3301      	adds	r3, #1
    d2cc:	9311      	str	r3, [sp, #68]	; 0x44
    d2ce:	e00e      	b.n	d2ee <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d2d0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d00a      	beq.n	d2ee <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d2d8:	9b03      	ldr	r3, [sp, #12]
    d2da:	2b00      	cmp	r3, #0
    d2dc:	d004      	beq.n	d2e8 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d2de:	9b03      	ldr	r3, [sp, #12]
    d2e0:	1c5a      	adds	r2, r3, #1
    d2e2:	9203      	str	r2, [sp, #12]
    d2e4:	222d      	movs	r2, #45	; 0x2d
    d2e6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d2e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2ea:	3301      	adds	r3, #1
    d2ec:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d2ee:	9a03      	ldr	r2, [sp, #12]
    d2f0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d2f4:	f7ff fb8c 	bl	ca10 <uint64_to_str>
    d2f8:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d2fa:	9b03      	ldr	r3, [sp, #12]
    d2fc:	2b00      	cmp	r3, #0
    d2fe:	d003      	beq.n	d308 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d302:	9a03      	ldr	r2, [sp, #12]
    d304:	4413      	add	r3, r2
    d306:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d30a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d30c:	4413      	add	r3, r2
    d30e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d310:	e04c      	b.n	d3ac <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d312:	9b03      	ldr	r3, [sp, #12]
    d314:	2b00      	cmp	r3, #0
    d316:	d048      	beq.n	d3aa <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d318:	9b01      	ldr	r3, [sp, #4]
    d31a:	3307      	adds	r3, #7
    d31c:	f023 0307 	bic.w	r3, r3, #7
    d320:	f103 0208 	add.w	r2, r3, #8
    d324:	9201      	str	r2, [sp, #4]
    d326:	e9d3 2300 	ldrd	r2, r3, [r3]
    d32a:	4610      	mov	r0, r2
    d32c:	4619      	mov	r1, r3
    d32e:	f7fe fee7 	bl	c100 <__aeabi_d2f>
    d332:	4603      	mov	r3, r0
    d334:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d336:	9b03      	ldr	r3, [sp, #12]
    d338:	2214      	movs	r2, #20
    d33a:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d33c:	990e      	ldr	r1, [sp, #56]	; 0x38
    d33e:	9803      	ldr	r0, [sp, #12]
    d340:	ed9d 0a06 	vldr	s0, [sp, #24]
    d344:	f7ff fc42 	bl	cbcc <ftoa>
    d348:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d34a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d34c:	2b00      	cmp	r3, #0
    d34e:	da14      	bge.n	d37a <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d352:	f1b3 3fff 	cmp.w	r3, #4294967295
    d356:	d102      	bne.n	d35e <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d358:	4b1e      	ldr	r3, [pc, #120]	; (d3d4 <am_util_stdio_vsprintf+0x60c>)
    d35a:	930c      	str	r3, [sp, #48]	; 0x30
    d35c:	e008      	b.n	d370 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d35e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d360:	f113 0f02 	cmn.w	r3, #2
    d364:	d102      	bne.n	d36c <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d366:	4b1c      	ldr	r3, [pc, #112]	; (d3d8 <am_util_stdio_vsprintf+0x610>)
    d368:	930c      	str	r3, [sp, #48]	; 0x30
    d36a:	e001      	b.n	d370 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d36c:	4b1b      	ldr	r3, [pc, #108]	; (d3dc <am_util_stdio_vsprintf+0x614>)
    d36e:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d370:	9b03      	ldr	r3, [sp, #12]
    d372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d374:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d376:	2303      	movs	r3, #3
    d378:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d37a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d37c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d37e:	4413      	add	r3, r2
    d380:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d384:	9a03      	ldr	r2, [sp, #12]
    d386:	4413      	add	r3, r2
    d388:	9303      	str	r3, [sp, #12]
                }
                break;
    d38a:	e00e      	b.n	d3aa <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d38c:	9b03      	ldr	r3, [sp, #12]
    d38e:	2b00      	cmp	r3, #0
    d390:	d005      	beq.n	d39e <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d392:	9b03      	ldr	r3, [sp, #12]
    d394:	1c5a      	adds	r2, r3, #1
    d396:	9203      	str	r2, [sp, #12]
    d398:	9a02      	ldr	r2, [sp, #8]
    d39a:	7812      	ldrb	r2, [r2, #0]
    d39c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d39e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3a0:	3301      	adds	r3, #1
    d3a2:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d3a4:	e002      	b.n	d3ac <am_util_stdio_vsprintf+0x5e4>
                break;
    d3a6:	bf00      	nop
    d3a8:	e000      	b.n	d3ac <am_util_stdio_vsprintf+0x5e4>
                break;
    d3aa:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d3ac:	9b02      	ldr	r3, [sp, #8]
    d3ae:	3301      	adds	r3, #1
    d3b0:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d3b2:	9b02      	ldr	r3, [sp, #8]
    d3b4:	781b      	ldrb	r3, [r3, #0]
    d3b6:	2b00      	cmp	r3, #0
    d3b8:	f47f ad11 	bne.w	cdde <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d3bc:	9b03      	ldr	r3, [sp, #12]
    d3be:	2b00      	cmp	r3, #0
    d3c0:	d002      	beq.n	d3c8 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d3c2:	9b03      	ldr	r3, [sp, #12]
    d3c4:	2200      	movs	r2, #0
    d3c6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d3c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d3ca:	4618      	mov	r0, r3
    d3cc:	b017      	add	sp, #92	; 0x5c
    d3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3d2:	bf00      	nop
    d3d4:	00302e30 	.word	0x00302e30
    d3d8:	00232e23 	.word	0x00232e23
    d3dc:	003f2e3f 	.word	0x003f2e3f

0000d3e0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d3e0:	b40f      	push	{r0, r1, r2, r3}
    d3e2:	b500      	push	{lr}
    d3e4:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d3e6:	4b0c      	ldr	r3, [pc, #48]	; (d418 <am_util_stdio_printf+0x38>)
    d3e8:	681b      	ldr	r3, [r3, #0]
    d3ea:	2b00      	cmp	r3, #0
    d3ec:	d101      	bne.n	d3f2 <am_util_stdio_printf+0x12>
    {
        return 0;
    d3ee:	2300      	movs	r3, #0
    d3f0:	e00c      	b.n	d40c <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d3f2:	ab05      	add	r3, sp, #20
    d3f4:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3f6:	9a00      	ldr	r2, [sp, #0]
    d3f8:	9904      	ldr	r1, [sp, #16]
    d3fa:	4808      	ldr	r0, [pc, #32]	; (d41c <am_util_stdio_printf+0x3c>)
    d3fc:	f7ff fce4 	bl	cdc8 <am_util_stdio_vsprintf>
    d400:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d402:	4b05      	ldr	r3, [pc, #20]	; (d418 <am_util_stdio_printf+0x38>)
    d404:	681b      	ldr	r3, [r3, #0]
    d406:	4805      	ldr	r0, [pc, #20]	; (d41c <am_util_stdio_printf+0x3c>)
    d408:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d40a:	9b01      	ldr	r3, [sp, #4]
}
    d40c:	4618      	mov	r0, r3
    d40e:	b003      	add	sp, #12
    d410:	f85d eb04 	ldr.w	lr, [sp], #4
    d414:	b004      	add	sp, #16
    d416:	4770      	bx	lr
    d418:	10001698 	.word	0x10001698
    d41c:	1000169c 	.word	0x1000169c

0000d420 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d420:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d422:	4802      	ldr	r0, [pc, #8]	; (d42c <am_util_stdio_terminal_clear+0xc>)
    d424:	f7ff ffdc 	bl	d3e0 <am_util_stdio_printf>
}
    d428:	bf00      	nop
    d42a:	bd08      	pop	{r3, pc}
    d42c:	0000eeac 	.word	0x0000eeac

0000d430 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d430:	4811      	ldr	r0, [pc, #68]	; (d478 <zero_loop+0x12>)
    d432:	4912      	ldr	r1, [pc, #72]	; (d47c <zero_loop+0x16>)
    d434:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d436:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d43a:	4811      	ldr	r0, [pc, #68]	; (d480 <zero_loop+0x1a>)
    d43c:	6801      	ldr	r1, [r0, #0]
    d43e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d442:	6001      	str	r1, [r0, #0]
    d444:	f3bf 8f4f 	dsb	sy
    d448:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d44c:	480d      	ldr	r0, [pc, #52]	; (d484 <zero_loop+0x1e>)
    d44e:	490e      	ldr	r1, [pc, #56]	; (d488 <zero_loop+0x22>)
    d450:	4a0e      	ldr	r2, [pc, #56]	; (d48c <zero_loop+0x26>)

0000d452 <copy_loop>:
    d452:	f850 3b04 	ldr.w	r3, [r0], #4
    d456:	f841 3b04 	str.w	r3, [r1], #4
    d45a:	4291      	cmp	r1, r2
    d45c:	dbf9      	blt.n	d452 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d45e:	480c      	ldr	r0, [pc, #48]	; (d490 <zero_loop+0x2a>)
    d460:	490c      	ldr	r1, [pc, #48]	; (d494 <zero_loop+0x2e>)
    d462:	f04f 0200 	mov.w	r2, #0

0000d466 <zero_loop>:
    d466:	4288      	cmp	r0, r1
    d468:	bfb8      	it	lt
    d46a:	f840 2b04 	strlt.w	r2, [r0], #4
    d46e:	dbfa      	blt.n	d466 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d470:	f7ff f836 	bl	c4e0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d474:	be00      	bkpt	0x0000
}
    d476:	bf00      	nop
    d478:	e000ed08 	.word	0xe000ed08
    d47c:	0000c000 	.word	0x0000c000
    d480:	e000ed88 	.word	0xe000ed88
    d484:	0000f144 	.word	0x0000f144
    d488:	10001000 	.word	0x10001000
    d48c:	10001088 	.word	0x10001088
    d490:	10001088 	.word	0x10001088
    d494:	10001874 	.word	0x10001874

0000d498 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d498:	e7fe      	b.n	d498 <NMI_Handler>

0000d49a <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d49a:	e7fe      	b.n	d49a <BusFault_Handler>

0000d49c <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d49c:	e7fe      	b.n	d49c <DebugMon_Handler>
	...

0000d4a0 <am_bsp_low_power_init>:
    d4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4a2:	f001 fb3d 	bl	eb20 <am_hal_pwrctrl_low_power_init>
    d4a6:	f001 fc19 	bl	ecdc <am_hal_rtc_osc_disable>
    d4aa:	4b0b      	ldr	r3, [pc, #44]	; (d4d8 <am_bsp_low_power_init+0x38>)
    d4ac:	4f0b      	ldr	r7, [pc, #44]	; (d4dc <am_bsp_low_power_init+0x3c>)
    d4ae:	681e      	ldr	r6, [r3, #0]
    d4b0:	2400      	movs	r4, #0
    d4b2:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d4b6:	4631      	mov	r1, r6
    d4b8:	4628      	mov	r0, r5
    d4ba:	f000 fd33 	bl	df24 <am_hal_gpio_pinconfig>
    d4be:	2103      	movs	r1, #3
    d4c0:	4628      	mov	r0, r5
    d4c2:	f000 fe65 	bl	e190 <am_hal_gpio_state_write>
    d4c6:	3401      	adds	r4, #1
    d4c8:	2100      	movs	r1, #0
    d4ca:	4628      	mov	r0, r5
    d4cc:	f000 fe60 	bl	e190 <am_hal_gpio_state_write>
    d4d0:	2c05      	cmp	r4, #5
    d4d2:	d1ee      	bne.n	d4b2 <am_bsp_low_power_init+0x12>
    d4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4d6:	bf00      	nop
    d4d8:	0000ef24 	.word	0x0000ef24
    d4dc:	10001044 	.word	0x10001044

0000d4e0 <am_bsp_itm_printf_enable>:
    d4e0:	b500      	push	{lr}
    d4e2:	4b0b      	ldr	r3, [pc, #44]	; (d510 <am_bsp_itm_printf_enable+0x30>)
    d4e4:	b087      	sub	sp, #28
    d4e6:	2201      	movs	r2, #1
    d4e8:	601a      	str	r2, [r3, #0]
    d4ea:	f001 fa87 	bl	e9fc <am_hal_itm_enable>
    d4ee:	4b09      	ldr	r3, [pc, #36]	; (d514 <am_bsp_itm_printf_enable+0x34>)
    d4f0:	9301      	str	r3, [sp, #4]
    d4f2:	a801      	add	r0, sp, #4
    d4f4:	f001 fc34 	bl	ed60 <am_hal_tpiu_enable>
    d4f8:	4b07      	ldr	r3, [pc, #28]	; (d518 <am_bsp_itm_printf_enable+0x38>)
    d4fa:	2029      	movs	r0, #41	; 0x29
    d4fc:	6819      	ldr	r1, [r3, #0]
    d4fe:	f000 fd11 	bl	df24 <am_hal_gpio_pinconfig>
    d502:	4806      	ldr	r0, [pc, #24]	; (d51c <am_bsp_itm_printf_enable+0x3c>)
    d504:	f7ff f8e4 	bl	c6d0 <am_util_stdio_printf_init>
    d508:	b007      	add	sp, #28
    d50a:	f85d fb04 	ldr.w	pc, [sp], #4
    d50e:	bf00      	nop
    d510:	100017a0 	.word	0x100017a0
    d514:	000f4240 	.word	0x000f4240
    d518:	0000eedc 	.word	0x0000eedc
    d51c:	0000ea45 	.word	0x0000ea45

0000d520 <am_bsp_ios_pins_enable>:
    d520:	bb28      	cbnz	r0, d56e <am_bsp_ios_pins_enable+0x4e>
    d522:	b510      	push	{r4, lr}
    d524:	460c      	mov	r4, r1
    d526:	b1b9      	cbz	r1, d558 <am_bsp_ios_pins_enable+0x38>
    d528:	2901      	cmp	r1, #1
    d52a:	d000      	beq.n	d52e <am_bsp_ios_pins_enable+0xe>
    d52c:	bd10      	pop	{r4, pc}
    d52e:	4b10      	ldr	r3, [pc, #64]	; (d570 <am_bsp_ios_pins_enable+0x50>)
    d530:	6819      	ldr	r1, [r3, #0]
    d532:	f000 fcf7 	bl	df24 <am_hal_gpio_pinconfig>
    d536:	4b0f      	ldr	r3, [pc, #60]	; (d574 <am_bsp_ios_pins_enable+0x54>)
    d538:	2002      	movs	r0, #2
    d53a:	6819      	ldr	r1, [r3, #0]
    d53c:	f000 fcf2 	bl	df24 <am_hal_gpio_pinconfig>
    d540:	4b0d      	ldr	r3, [pc, #52]	; (d578 <am_bsp_ios_pins_enable+0x58>)
    d542:	4620      	mov	r0, r4
    d544:	6819      	ldr	r1, [r3, #0]
    d546:	f000 fced 	bl	df24 <am_hal_gpio_pinconfig>
    d54a:	4b0c      	ldr	r3, [pc, #48]	; (d57c <am_bsp_ios_pins_enable+0x5c>)
    d54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d550:	6819      	ldr	r1, [r3, #0]
    d552:	2003      	movs	r0, #3
    d554:	f000 bce6 	b.w	df24 <am_hal_gpio_pinconfig>
    d558:	4b09      	ldr	r3, [pc, #36]	; (d580 <am_bsp_ios_pins_enable+0x60>)
    d55a:	6819      	ldr	r1, [r3, #0]
    d55c:	f000 fce2 	bl	df24 <am_hal_gpio_pinconfig>
    d560:	4b08      	ldr	r3, [pc, #32]	; (d584 <am_bsp_ios_pins_enable+0x64>)
    d562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d566:	6819      	ldr	r1, [r3, #0]
    d568:	2001      	movs	r0, #1
    d56a:	f000 bcdb 	b.w	df24 <am_hal_gpio_pinconfig>
    d56e:	4770      	bx	lr
    d570:	0000eed0 	.word	0x0000eed0
    d574:	0000eec8 	.word	0x0000eec8
    d578:	0000eecc 	.word	0x0000eecc
    d57c:	0000eec4 	.word	0x0000eec4
    d580:	0000eed4 	.word	0x0000eed4
    d584:	0000eed8 	.word	0x0000eed8

0000d588 <am_hal_cachectrl_config>:
    d588:	b530      	push	{r4, r5, lr}
    d58a:	b083      	sub	sp, #12
    d58c:	4604      	mov	r4, r0
    d58e:	f000 fe47 	bl	e220 <am_hal_interrupt_master_disable>
    d592:	4d0e      	ldr	r5, [pc, #56]	; (d5cc <am_hal_cachectrl_config+0x44>)
    d594:	9001      	str	r0, [sp, #4]
    d596:	682b      	ldr	r3, [r5, #0]
    d598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d59c:	602b      	str	r3, [r5, #0]
    d59e:	9801      	ldr	r0, [sp, #4]
    d5a0:	f000 fe42 	bl	e228 <am_hal_interrupt_master_set>
    d5a4:	7863      	ldrb	r3, [r4, #1]
    d5a6:	7822      	ldrb	r2, [r4, #0]
    d5a8:	78a1      	ldrb	r1, [r4, #2]
    d5aa:	021b      	lsls	r3, r3, #8
    d5ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d5b0:	0112      	lsls	r2, r2, #4
    d5b2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d5b6:	b2d2      	uxtb	r2, r2
    d5b8:	4313      	orrs	r3, r2
    d5ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d5be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d5c2:	2000      	movs	r0, #0
    d5c4:	602b      	str	r3, [r5, #0]
    d5c6:	b003      	add	sp, #12
    d5c8:	bd30      	pop	{r4, r5, pc}
    d5ca:	bf00      	nop
    d5cc:	40018000 	.word	0x40018000

0000d5d0 <am_hal_cachectrl_enable>:
    d5d0:	4a03      	ldr	r2, [pc, #12]	; (d5e0 <am_hal_cachectrl_enable+0x10>)
    d5d2:	6813      	ldr	r3, [r2, #0]
    d5d4:	f043 0301 	orr.w	r3, r3, #1
    d5d8:	2000      	movs	r0, #0
    d5da:	6013      	str	r3, [r2, #0]
    d5dc:	4770      	bx	lr
    d5de:	bf00      	nop
    d5e0:	40018000 	.word	0x40018000

0000d5e4 <am_hal_cachectrl_control>:
    d5e4:	b510      	push	{r4, lr}
    d5e6:	3801      	subs	r0, #1
    d5e8:	b08e      	sub	sp, #56	; 0x38
    d5ea:	2810      	cmp	r0, #16
    d5ec:	f200 815e 	bhi.w	d8ac <am_hal_cachectrl_control+0x2c8>
    d5f0:	e8df f010 	tbh	[pc, r0, lsl #1]
    d5f4:	00360018 	.word	0x00360018
    d5f8:	0040003d 	.word	0x0040003d
    d5fc:	00450043 	.word	0x00450043
    d600:	0011001a 	.word	0x0011001a
    d604:	00540047 	.word	0x00540047
    d608:	009a0061 	.word	0x009a0061
    d60c:	010c00d3 	.word	0x010c00d3
    d610:	013f0126 	.word	0x013f0126
    d614:	001d      	.short	0x001d
    d616:	f44f 7300 	mov.w	r3, #512	; 0x200
    d61a:	4aac      	ldr	r2, [pc, #688]	; (d8cc <am_hal_cachectrl_control+0x2e8>)
    d61c:	2000      	movs	r0, #0
    d61e:	6093      	str	r3, [r2, #8]
    d620:	b00e      	add	sp, #56	; 0x38
    d622:	bd10      	pop	{r4, pc}
    d624:	2301      	movs	r3, #1
    d626:	e7f8      	b.n	d61a <am_hal_cachectrl_control+0x36>
    d628:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d62c:	e7f5      	b.n	d61a <am_hal_cachectrl_control+0x36>
    d62e:	2900      	cmp	r1, #0
    d630:	f000 813c 	beq.w	d8ac <am_hal_cachectrl_control+0x2c8>
    d634:	684a      	ldr	r2, [r1, #4]
    d636:	48a6      	ldr	r0, [pc, #664]	; (d8d0 <am_hal_cachectrl_control+0x2ec>)
    d638:	4202      	tst	r2, r0
    d63a:	f040 8137 	bne.w	d8ac <am_hal_cachectrl_control+0x2c8>
    d63e:	688b      	ldr	r3, [r1, #8]
    d640:	4018      	ands	r0, r3
    d642:	f040 8133 	bne.w	d8ac <am_hal_cachectrl_control+0x2c8>
    d646:	780c      	ldrb	r4, [r1, #0]
    d648:	2c00      	cmp	r4, #0
    d64a:	f040 8133 	bne.w	d8b4 <am_hal_cachectrl_control+0x2d0>
    d64e:	4c9f      	ldr	r4, [pc, #636]	; (d8cc <am_hal_cachectrl_control+0x2e8>)
    d650:	7849      	ldrb	r1, [r1, #1]
    d652:	6122      	str	r2, [r4, #16]
    d654:	6163      	str	r3, [r4, #20]
    d656:	6823      	ldr	r3, [r4, #0]
    d658:	f361 0382 	bfi	r3, r1, #2, #1
    d65c:	6023      	str	r3, [r4, #0]
    d65e:	e7df      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d660:	4b9a      	ldr	r3, [pc, #616]	; (d8cc <am_hal_cachectrl_control+0x2e8>)
    d662:	681b      	ldr	r3, [r3, #0]
    d664:	01db      	lsls	r3, r3, #7
    d666:	f140 811f 	bpl.w	d8a8 <am_hal_cachectrl_control+0x2c4>
    d66a:	2302      	movs	r3, #2
    d66c:	e7d5      	b.n	d61a <am_hal_cachectrl_control+0x36>
    d66e:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d672:	e7d2      	b.n	d61a <am_hal_cachectrl_control+0x36>
    d674:	f44f 7308 	mov.w	r3, #544	; 0x220
    d678:	e7cf      	b.n	d61a <am_hal_cachectrl_control+0x36>
    d67a:	2340      	movs	r3, #64	; 0x40
    d67c:	e7cd      	b.n	d61a <am_hal_cachectrl_control+0x36>
    d67e:	2320      	movs	r3, #32
    d680:	e7cb      	b.n	d61a <am_hal_cachectrl_control+0x36>
    d682:	f000 fdcd 	bl	e220 <am_hal_interrupt_master_disable>
    d686:	4a91      	ldr	r2, [pc, #580]	; (d8cc <am_hal_cachectrl_control+0x2e8>)
    d688:	9000      	str	r0, [sp, #0]
    d68a:	6813      	ldr	r3, [r2, #0]
    d68c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d690:	6013      	str	r3, [r2, #0]
    d692:	9800      	ldr	r0, [sp, #0]
    d694:	f000 fdc8 	bl	e228 <am_hal_interrupt_master_set>
    d698:	2000      	movs	r0, #0
    d69a:	e7c1      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d69c:	f000 fdc0 	bl	e220 <am_hal_interrupt_master_disable>
    d6a0:	4a8a      	ldr	r2, [pc, #552]	; (d8cc <am_hal_cachectrl_control+0x2e8>)
    d6a2:	9001      	str	r0, [sp, #4]
    d6a4:	6813      	ldr	r3, [r2, #0]
    d6a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d6aa:	6013      	str	r3, [r2, #0]
    d6ac:	9801      	ldr	r0, [sp, #4]
    d6ae:	f000 fdbb 	bl	e228 <am_hal_interrupt_master_set>
    d6b2:	2000      	movs	r0, #0
    d6b4:	e7b4      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d6b6:	f000 fdb3 	bl	e220 <am_hal_interrupt_master_disable>
    d6ba:	4603      	mov	r3, r0
    d6bc:	4885      	ldr	r0, [pc, #532]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d6be:	9302      	str	r3, [sp, #8]
    d6c0:	f000 fc26 	bl	df10 <am_hal_flash_load_ui32>
    d6c4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d6c8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d6cc:	4881      	ldr	r0, [pc, #516]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d6ce:	f000 fc23 	bl	df18 <am_hal_flash_store_ui32>
    d6d2:	9802      	ldr	r0, [sp, #8]
    d6d4:	f000 fda8 	bl	e228 <am_hal_interrupt_master_set>
    d6d8:	f000 fda2 	bl	e220 <am_hal_interrupt_master_disable>
    d6dc:	4603      	mov	r3, r0
    d6de:	487d      	ldr	r0, [pc, #500]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d6e0:	9303      	str	r3, [sp, #12]
    d6e2:	f000 fc15 	bl	df10 <am_hal_flash_load_ui32>
    d6e6:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d6ea:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d6ee:	4879      	ldr	r0, [pc, #484]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d6f0:	f000 fc12 	bl	df18 <am_hal_flash_store_ui32>
    d6f4:	9803      	ldr	r0, [sp, #12]
    d6f6:	f000 fd97 	bl	e228 <am_hal_interrupt_master_set>
    d6fa:	f000 fd91 	bl	e220 <am_hal_interrupt_master_disable>
    d6fe:	4603      	mov	r3, r0
    d700:	4874      	ldr	r0, [pc, #464]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d702:	9304      	str	r3, [sp, #16]
    d704:	f000 fc04 	bl	df10 <am_hal_flash_load_ui32>
    d708:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d70c:	f020 000f 	bic.w	r0, r0, #15
    d710:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d714:	f041 0103 	orr.w	r1, r1, #3
    d718:	486e      	ldr	r0, [pc, #440]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d71a:	f000 fbfd 	bl	df18 <am_hal_flash_store_ui32>
    d71e:	9804      	ldr	r0, [sp, #16]
    d720:	f000 fd82 	bl	e228 <am_hal_interrupt_master_set>
    d724:	2000      	movs	r0, #0
    d726:	e77b      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d728:	f000 fd7a 	bl	e220 <am_hal_interrupt_master_disable>
    d72c:	4603      	mov	r3, r0
    d72e:	4869      	ldr	r0, [pc, #420]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d730:	9305      	str	r3, [sp, #20]
    d732:	f000 fbed 	bl	df10 <am_hal_flash_load_ui32>
    d736:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d73a:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d73e:	4865      	ldr	r0, [pc, #404]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d740:	f000 fbea 	bl	df18 <am_hal_flash_store_ui32>
    d744:	9805      	ldr	r0, [sp, #20]
    d746:	f000 fd6f 	bl	e228 <am_hal_interrupt_master_set>
    d74a:	f000 fd69 	bl	e220 <am_hal_interrupt_master_disable>
    d74e:	4603      	mov	r3, r0
    d750:	4860      	ldr	r0, [pc, #384]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d752:	9306      	str	r3, [sp, #24]
    d754:	f000 fbdc 	bl	df10 <am_hal_flash_load_ui32>
    d758:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d75c:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d760:	485c      	ldr	r0, [pc, #368]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d762:	f000 fbd9 	bl	df18 <am_hal_flash_store_ui32>
    d766:	9806      	ldr	r0, [sp, #24]
    d768:	f000 fd5e 	bl	e228 <am_hal_interrupt_master_set>
    d76c:	f000 fd58 	bl	e220 <am_hal_interrupt_master_disable>
    d770:	4603      	mov	r3, r0
    d772:	4858      	ldr	r0, [pc, #352]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d774:	9307      	str	r3, [sp, #28]
    d776:	f000 fbcb 	bl	df10 <am_hal_flash_load_ui32>
    d77a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d77e:	f020 000f 	bic.w	r0, r0, #15
    d782:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d786:	f041 0101 	orr.w	r1, r1, #1
    d78a:	4852      	ldr	r0, [pc, #328]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d78c:	f000 fbc4 	bl	df18 <am_hal_flash_store_ui32>
    d790:	9807      	ldr	r0, [sp, #28]
    d792:	f000 fd49 	bl	e228 <am_hal_interrupt_master_set>
    d796:	2000      	movs	r0, #0
    d798:	e742      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d79a:	f000 fd41 	bl	e220 <am_hal_interrupt_master_disable>
    d79e:	4603      	mov	r3, r0
    d7a0:	484c      	ldr	r0, [pc, #304]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d7a2:	9308      	str	r3, [sp, #32]
    d7a4:	f000 fbb4 	bl	df10 <am_hal_flash_load_ui32>
    d7a8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d7ac:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d7b0:	4848      	ldr	r0, [pc, #288]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d7b2:	f000 fbb1 	bl	df18 <am_hal_flash_store_ui32>
    d7b6:	9808      	ldr	r0, [sp, #32]
    d7b8:	f000 fd36 	bl	e228 <am_hal_interrupt_master_set>
    d7bc:	f000 fd30 	bl	e220 <am_hal_interrupt_master_disable>
    d7c0:	4603      	mov	r3, r0
    d7c2:	4844      	ldr	r0, [pc, #272]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d7c4:	9309      	str	r3, [sp, #36]	; 0x24
    d7c6:	f000 fba3 	bl	df10 <am_hal_flash_load_ui32>
    d7ca:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d7ce:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d7d2:	4840      	ldr	r0, [pc, #256]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d7d4:	f000 fba0 	bl	df18 <am_hal_flash_store_ui32>
    d7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
    d7da:	f000 fd25 	bl	e228 <am_hal_interrupt_master_set>
    d7de:	f000 fd1f 	bl	e220 <am_hal_interrupt_master_disable>
    d7e2:	4603      	mov	r3, r0
    d7e4:	483b      	ldr	r0, [pc, #236]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d7e6:	930a      	str	r3, [sp, #40]	; 0x28
    d7e8:	f000 fb92 	bl	df10 <am_hal_flash_load_ui32>
    d7ec:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d7f0:	f020 000f 	bic.w	r0, r0, #15
    d7f4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d7f8:	f041 0101 	orr.w	r1, r1, #1
    d7fc:	4835      	ldr	r0, [pc, #212]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d7fe:	f000 fb8b 	bl	df18 <am_hal_flash_store_ui32>
    d802:	980a      	ldr	r0, [sp, #40]	; 0x28
    d804:	f000 fd10 	bl	e228 <am_hal_interrupt_master_set>
    d808:	2000      	movs	r0, #0
    d80a:	e709      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d80c:	2900      	cmp	r1, #0
    d80e:	d04d      	beq.n	d8ac <am_hal_cachectrl_control+0x2c8>
    d810:	680c      	ldr	r4, [r1, #0]
    d812:	2c03      	cmp	r4, #3
    d814:	d84c      	bhi.n	d8b0 <am_hal_cachectrl_control+0x2cc>
    d816:	f000 fd03 	bl	e220 <am_hal_interrupt_master_disable>
    d81a:	4603      	mov	r3, r0
    d81c:	482d      	ldr	r0, [pc, #180]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d81e:	930b      	str	r3, [sp, #44]	; 0x2c
    d820:	f000 fb76 	bl	df10 <am_hal_flash_load_ui32>
    d824:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d828:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d82c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d830:	4828      	ldr	r0, [pc, #160]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d832:	f000 fb71 	bl	df18 <am_hal_flash_store_ui32>
    d836:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d838:	f000 fcf6 	bl	e228 <am_hal_interrupt_master_set>
    d83c:	2000      	movs	r0, #0
    d83e:	e6ef      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d840:	b3a1      	cbz	r1, d8ac <am_hal_cachectrl_control+0x2c8>
    d842:	680c      	ldr	r4, [r1, #0]
    d844:	2c07      	cmp	r4, #7
    d846:	d833      	bhi.n	d8b0 <am_hal_cachectrl_control+0x2cc>
    d848:	f000 fcea 	bl	e220 <am_hal_interrupt_master_disable>
    d84c:	4603      	mov	r3, r0
    d84e:	4821      	ldr	r0, [pc, #132]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d850:	930c      	str	r3, [sp, #48]	; 0x30
    d852:	f000 fb5d 	bl	df10 <am_hal_flash_load_ui32>
    d856:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d85a:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d85e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d862:	481c      	ldr	r0, [pc, #112]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d864:	f000 fb58 	bl	df18 <am_hal_flash_store_ui32>
    d868:	980c      	ldr	r0, [sp, #48]	; 0x30
    d86a:	f000 fcdd 	bl	e228 <am_hal_interrupt_master_set>
    d86e:	2000      	movs	r0, #0
    d870:	e6d6      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d872:	b1d9      	cbz	r1, d8ac <am_hal_cachectrl_control+0x2c8>
    d874:	680c      	ldr	r4, [r1, #0]
    d876:	2c0f      	cmp	r4, #15
    d878:	d81a      	bhi.n	d8b0 <am_hal_cachectrl_control+0x2cc>
    d87a:	f000 fcd1 	bl	e220 <am_hal_interrupt_master_disable>
    d87e:	4603      	mov	r3, r0
    d880:	4814      	ldr	r0, [pc, #80]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d882:	930d      	str	r3, [sp, #52]	; 0x34
    d884:	f000 fb44 	bl	df10 <am_hal_flash_load_ui32>
    d888:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d88c:	f020 000f 	bic.w	r0, r0, #15
    d890:	ea40 0104 	orr.w	r1, r0, r4
    d894:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d898:	480e      	ldr	r0, [pc, #56]	; (d8d4 <am_hal_cachectrl_control+0x2f0>)
    d89a:	f000 fb3d 	bl	df18 <am_hal_flash_store_ui32>
    d89e:	980d      	ldr	r0, [sp, #52]	; 0x34
    d8a0:	f000 fcc2 	bl	e228 <am_hal_interrupt_master_set>
    d8a4:	2000      	movs	r0, #0
    d8a6:	e6bb      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d8a8:	2007      	movs	r0, #7
    d8aa:	e6b9      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d8ac:	2006      	movs	r0, #6
    d8ae:	e6b7      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d8b0:	2001      	movs	r0, #1
    d8b2:	e6b5      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d8b4:	2c01      	cmp	r4, #1
    d8b6:	d1f9      	bne.n	d8ac <am_hal_cachectrl_control+0x2c8>
    d8b8:	4c04      	ldr	r4, [pc, #16]	; (d8cc <am_hal_cachectrl_control+0x2e8>)
    d8ba:	7849      	ldrb	r1, [r1, #1]
    d8bc:	61a2      	str	r2, [r4, #24]
    d8be:	61e3      	str	r3, [r4, #28]
    d8c0:	6823      	ldr	r3, [r4, #0]
    d8c2:	f361 03c3 	bfi	r3, r1, #3, #1
    d8c6:	6023      	str	r3, [r4, #0]
    d8c8:	e6aa      	b.n	d620 <am_hal_cachectrl_control+0x3c>
    d8ca:	bf00      	nop
    d8cc:	40018000 	.word	0x40018000
    d8d0:	f800000f 	.word	0xf800000f
    d8d4:	40018004 	.word	0x40018004

0000d8d8 <am_hal_clkgen_control>:
    d8d8:	4b49      	ldr	r3, [pc, #292]	; (da00 <am_hal_clkgen_control+0x128>)
    d8da:	681a      	ldr	r2, [r3, #0]
    d8dc:	b912      	cbnz	r2, d8e4 <am_hal_clkgen_control+0xc>
    d8de:	4a49      	ldr	r2, [pc, #292]	; (da04 <am_hal_clkgen_control+0x12c>)
    d8e0:	6812      	ldr	r2, [r2, #0]
    d8e2:	601a      	str	r2, [r3, #0]
    d8e4:	2809      	cmp	r0, #9
    d8e6:	f200 8089 	bhi.w	d9fc <am_hal_clkgen_control+0x124>
    d8ea:	e8df f000 	tbb	[pc, r0]
    d8ee:	160d      	.short	0x160d
    d8f0:	423a261e 	.word	0x423a261e
    d8f4:	055c544c 	.word	0x055c544c
    d8f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8fc:	2000      	movs	r0, #0
    d8fe:	6a1a      	ldr	r2, [r3, #32]
    d900:	f36f 0200 	bfc	r2, #0, #1
    d904:	621a      	str	r2, [r3, #32]
    d906:	4770      	bx	lr
    d908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d90c:	2200      	movs	r2, #0
    d90e:	2147      	movs	r1, #71	; 0x47
    d910:	6159      	str	r1, [r3, #20]
    d912:	4610      	mov	r0, r2
    d914:	619a      	str	r2, [r3, #24]
    d916:	615a      	str	r2, [r3, #20]
    d918:	4770      	bx	lr
    d91a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d91e:	2000      	movs	r0, #0
    d920:	899a      	ldrh	r2, [r3, #12]
    d922:	f36f 0200 	bfc	r2, #0, #1
    d926:	819a      	strh	r2, [r3, #12]
    d928:	4770      	bx	lr
    d92a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d92e:	2000      	movs	r0, #0
    d930:	899a      	ldrh	r2, [r3, #12]
    d932:	f36f 0241 	bfc	r2, #1, #1
    d936:	819a      	strh	r2, [r3, #12]
    d938:	4770      	bx	lr
    d93a:	4a33      	ldr	r2, [pc, #204]	; (da08 <am_hal_clkgen_control+0x130>)
    d93c:	68d3      	ldr	r3, [r2, #12]
    d93e:	b2db      	uxtb	r3, r3
    d940:	2b21      	cmp	r3, #33	; 0x21
    d942:	d106      	bne.n	d952 <am_hal_clkgen_control+0x7a>
    d944:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d948:	2101      	movs	r1, #1
    d94a:	f361 2309 	bfi	r3, r1, #8, #2
    d94e:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d952:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d956:	2000      	movs	r0, #0
    d958:	8993      	ldrh	r3, [r2, #12]
    d95a:	f043 0301 	orr.w	r3, r3, #1
    d95e:	8193      	strh	r3, [r2, #12]
    d960:	4770      	bx	lr
    d962:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d966:	2000      	movs	r0, #0
    d968:	8993      	ldrh	r3, [r2, #12]
    d96a:	f043 0302 	orr.w	r3, r3, #2
    d96e:	8193      	strh	r3, [r2, #12]
    d970:	4770      	bx	lr
    d972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d976:	2200      	movs	r2, #0
    d978:	2047      	movs	r0, #71	; 0x47
    d97a:	2101      	movs	r1, #1
    d97c:	6158      	str	r0, [r3, #20]
    d97e:	6199      	str	r1, [r3, #24]
    d980:	4610      	mov	r0, r2
    d982:	615a      	str	r2, [r3, #20]
    d984:	4770      	bx	lr
    d986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d98a:	2000      	movs	r0, #0
    d98c:	899a      	ldrh	r2, [r3, #12]
    d98e:	f36f 12c7 	bfc	r2, #7, #1
    d992:	819a      	strh	r2, [r3, #12]
    d994:	4770      	bx	lr
    d996:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d99a:	2000      	movs	r0, #0
    d99c:	8993      	ldrh	r3, [r2, #12]
    d99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d9a2:	8193      	strh	r3, [r2, #12]
    d9a4:	4770      	bx	lr
    d9a6:	4a18      	ldr	r2, [pc, #96]	; (da08 <am_hal_clkgen_control+0x130>)
    d9a8:	68d3      	ldr	r3, [r2, #12]
    d9aa:	b2db      	uxtb	r3, r3
    d9ac:	2b21      	cmp	r3, #33	; 0x21
    d9ae:	d00a      	beq.n	d9c6 <am_hal_clkgen_control+0xee>
    d9b0:	b139      	cbz	r1, d9c2 <am_hal_clkgen_control+0xea>
    d9b2:	680b      	ldr	r3, [r1, #0]
    d9b4:	f043 0301 	orr.w	r3, r3, #1
    d9b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9bc:	2000      	movs	r0, #0
    d9be:	6213      	str	r3, [r2, #32]
    d9c0:	4770      	bx	lr
    d9c2:	4b12      	ldr	r3, [pc, #72]	; (da0c <am_hal_clkgen_control+0x134>)
    d9c4:	e7f8      	b.n	d9b8 <am_hal_clkgen_control+0xe0>
    d9c6:	b500      	push	{lr}
    d9c8:	b083      	sub	sp, #12
    d9ca:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d9ce:	9101      	str	r1, [sp, #4]
    d9d0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d9d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d9d8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d9dc:	f000 fa52 	bl	de84 <am_hal_flash_delay>
    d9e0:	9901      	ldr	r1, [sp, #4]
    d9e2:	b149      	cbz	r1, d9f8 <am_hal_clkgen_control+0x120>
    d9e4:	680b      	ldr	r3, [r1, #0]
    d9e6:	f043 0301 	orr.w	r3, r3, #1
    d9ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9ee:	2000      	movs	r0, #0
    d9f0:	6213      	str	r3, [r2, #32]
    d9f2:	b003      	add	sp, #12
    d9f4:	f85d fb04 	ldr.w	pc, [sp], #4
    d9f8:	4b04      	ldr	r3, [pc, #16]	; (da0c <am_hal_clkgen_control+0x134>)
    d9fa:	e7f6      	b.n	d9ea <am_hal_clkgen_control+0x112>
    d9fc:	2006      	movs	r0, #6
    d9fe:	4770      	bx	lr
    da00:	1000186c 	.word	0x1000186c
    da04:	4ffff000 	.word	0x4ffff000
    da08:	40020000 	.word	0x40020000
    da0c:	0025b801 	.word	0x0025b801

0000da10 <am_hal_clkgen_status_get>:
    da10:	b1b0      	cbz	r0, da40 <am_hal_clkgen_status_get+0x30>
    da12:	b410      	push	{r4}
    da14:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    da18:	4603      	mov	r3, r0
    da1a:	698c      	ldr	r4, [r1, #24]
    da1c:	4809      	ldr	r0, [pc, #36]	; (da44 <am_hal_clkgen_status_get+0x34>)
    da1e:	4a0a      	ldr	r2, [pc, #40]	; (da48 <am_hal_clkgen_status_get+0x38>)
    da20:	f014 0f01 	tst.w	r4, #1
    da24:	bf08      	it	eq
    da26:	4602      	moveq	r2, r0
    da28:	601a      	str	r2, [r3, #0]
    da2a:	69ca      	ldr	r2, [r1, #28]
    da2c:	f85d 4b04 	ldr.w	r4, [sp], #4
    da30:	f002 0101 	and.w	r1, r2, #1
    da34:	f3c2 0240 	ubfx	r2, r2, #1, #1
    da38:	2000      	movs	r0, #0
    da3a:	6059      	str	r1, [r3, #4]
    da3c:	721a      	strb	r2, [r3, #8]
    da3e:	4770      	bx	lr
    da40:	2006      	movs	r0, #6
    da42:	4770      	bx	lr
    da44:	02dc6c00 	.word	0x02dc6c00
    da48:	016e3600 	.word	0x016e3600

0000da4c <am_hal_ctimer_int_service>:
    da4c:	b198      	cbz	r0, da76 <am_hal_ctimer_int_service+0x2a>
    da4e:	b570      	push	{r4, r5, r6, lr}
    da50:	4e09      	ldr	r6, [pc, #36]	; (da78 <am_hal_ctimer_int_service+0x2c>)
    da52:	4604      	mov	r4, r0
    da54:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    da58:	fab4 f384 	clz	r3, r4
    da5c:	f1c3 021f 	rsb	r2, r3, #31
    da60:	fa25 f303 	lsr.w	r3, r5, r3
    da64:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
    da68:	ea24 0403 	bic.w	r4, r4, r3
    da6c:	b102      	cbz	r2, da70 <am_hal_ctimer_int_service+0x24>
    da6e:	4790      	blx	r2
    da70:	2c00      	cmp	r4, #0
    da72:	d1f1      	bne.n	da58 <am_hal_ctimer_int_service+0xc>
    da74:	bd70      	pop	{r4, r5, r6, pc}
    da76:	4770      	bx	lr
    da78:	100017a4 	.word	0x100017a4

0000da7c <am_hal_ctimer_int_register>:
    da7c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    da80:	b510      	push	{r4, lr}
    da82:	460c      	mov	r4, r1
    da84:	f000 80bd 	beq.w	dc02 <am_hal_ctimer_int_register+0x186>
    da88:	d81c      	bhi.n	dac4 <am_hal_ctimer_int_register+0x48>
    da8a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    da8e:	f000 80ac 	beq.w	dbea <am_hal_ctimer_int_register+0x16e>
    da92:	d83b      	bhi.n	db0c <am_hal_ctimer_int_register+0x90>
    da94:	2820      	cmp	r0, #32
    da96:	d82b      	bhi.n	daf0 <am_hal_ctimer_int_register+0x74>
    da98:	b380      	cbz	r0, dafc <am_hal_ctimer_int_register+0x80>
    da9a:	3801      	subs	r0, #1
    da9c:	281f      	cmp	r0, #31
    da9e:	d82d      	bhi.n	dafc <am_hal_ctimer_int_register+0x80>
    daa0:	e8df f000 	tbb	[pc, r0]
    daa4:	a72ca599 	.word	0xa72ca599
    daa8:	ad2c2c2c 	.word	0xad2c2c2c
    daac:	2c2c2c2c 	.word	0x2c2c2c2c
    dab0:	ab2c2c2c 	.word	0xab2c2c2c
    dab4:	2c2c2c2c 	.word	0x2c2c2c2c
    dab8:	2c2c2c2c 	.word	0x2c2c2c2c
    dabc:	2c2c2c2c 	.word	0x2c2c2c2c
    dac0:	a92c2c2c 	.word	0xa92c2c2c
    dac4:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    dac8:	f000 808d 	beq.w	dbe6 <am_hal_ctimer_int_register+0x16a>
    dacc:	d955      	bls.n	db7a <am_hal_ctimer_int_register+0xfe>
    dace:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
    dad2:	f000 8086 	beq.w	dbe2 <am_hal_ctimer_int_register+0x166>
    dad6:	d942      	bls.n	db5e <am_hal_ctimer_int_register+0xe2>
    dad8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    dadc:	d071      	beq.n	dbc2 <am_hal_ctimer_int_register+0x146>
    dade:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    dae2:	bf08      	it	eq
    dae4:	231f      	moveq	r3, #31
    dae6:	d126      	bne.n	db36 <am_hal_ctimer_int_register+0xba>
    dae8:	4a47      	ldr	r2, [pc, #284]	; (dc08 <am_hal_ctimer_int_register+0x18c>)
    daea:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    daee:	bd10      	pop	{r4, pc}
    daf0:	2840      	cmp	r0, #64	; 0x40
    daf2:	d062      	beq.n	dbba <am_hal_ctimer_int_register+0x13e>
    daf4:	2880      	cmp	r0, #128	; 0x80
    daf6:	bf08      	it	eq
    daf8:	2307      	moveq	r3, #7
    dafa:	d0f5      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dafc:	4a43      	ldr	r2, [pc, #268]	; (dc0c <am_hal_ctimer_int_register+0x190>)
    dafe:	4844      	ldr	r0, [pc, #272]	; (dc10 <am_hal_ctimer_int_register+0x194>)
    db00:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    db04:	f000 f9bc 	bl	de80 <am_hal_debug_error>
    db08:	2300      	movs	r3, #0
    db0a:	e7ed      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    db0c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    db10:	d065      	beq.n	dbde <am_hal_ctimer_int_register+0x162>
    db12:	d916      	bls.n	db42 <am_hal_ctimer_int_register+0xc6>
    db14:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    db18:	d055      	beq.n	dbc6 <am_hal_ctimer_int_register+0x14a>
    db1a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    db1e:	bf08      	it	eq
    db20:	230f      	moveq	r3, #15
    db22:	d0e1      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    db24:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    db28:	bf08      	it	eq
    db2a:	230d      	moveq	r3, #13
    db2c:	d1e6      	bne.n	dafc <am_hal_ctimer_int_register+0x80>
    db2e:	4a36      	ldr	r2, [pc, #216]	; (dc08 <am_hal_ctimer_int_register+0x18c>)
    db30:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
    db34:	bd10      	pop	{r4, pc}
    db36:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    db3a:	bf08      	it	eq
    db3c:	231d      	moveq	r3, #29
    db3e:	d0d3      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    db40:	e7dc      	b.n	dafc <am_hal_ctimer_int_register+0x80>
    db42:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    db46:	d044      	beq.n	dbd2 <am_hal_ctimer_int_register+0x156>
    db48:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    db4c:	bf08      	it	eq
    db4e:	230b      	moveq	r3, #11
    db50:	d0ca      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    db52:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    db56:	bf08      	it	eq
    db58:	2309      	moveq	r3, #9
    db5a:	d0c5      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    db5c:	e7ce      	b.n	dafc <am_hal_ctimer_int_register+0x80>
    db5e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    db62:	d034      	beq.n	dbce <am_hal_ctimer_int_register+0x152>
    db64:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    db68:	bf08      	it	eq
    db6a:	231b      	moveq	r3, #27
    db6c:	d0bc      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    db6e:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
    db72:	bf08      	it	eq
    db74:	2319      	moveq	r3, #25
    db76:	d0b7      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    db78:	e7c0      	b.n	dafc <am_hal_ctimer_int_register+0x80>
    db7a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    db7e:	d02c      	beq.n	dbda <am_hal_ctimer_int_register+0x15e>
    db80:	d90d      	bls.n	db9e <am_hal_ctimer_int_register+0x122>
    db82:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    db86:	d020      	beq.n	dbca <am_hal_ctimer_int_register+0x14e>
    db88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    db8c:	bf08      	it	eq
    db8e:	2317      	moveq	r3, #23
    db90:	d0aa      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    db92:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
    db96:	bf08      	it	eq
    db98:	2315      	moveq	r3, #21
    db9a:	d0a5      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    db9c:	e7ae      	b.n	dafc <am_hal_ctimer_int_register+0x80>
    db9e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    dba2:	d00c      	beq.n	dbbe <am_hal_ctimer_int_register+0x142>
    dba4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
    dba8:	bf08      	it	eq
    dbaa:	2313      	moveq	r3, #19
    dbac:	d09c      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbae:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
    dbb2:	bf08      	it	eq
    dbb4:	2311      	moveq	r3, #17
    dbb6:	d097      	beq.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbb8:	e7a0      	b.n	dafc <am_hal_ctimer_int_register+0x80>
    dbba:	2306      	movs	r3, #6
    dbbc:	e794      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbbe:	2312      	movs	r3, #18
    dbc0:	e792      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbc2:	231e      	movs	r3, #30
    dbc4:	e790      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbc6:	230e      	movs	r3, #14
    dbc8:	e78e      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbca:	2316      	movs	r3, #22
    dbcc:	e78c      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbce:	231a      	movs	r3, #26
    dbd0:	e78a      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbd2:	230a      	movs	r3, #10
    dbd4:	e788      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbd6:	2300      	movs	r3, #0
    dbd8:	e786      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbda:	2314      	movs	r3, #20
    dbdc:	e784      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbde:	230c      	movs	r3, #12
    dbe0:	e782      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbe2:	231c      	movs	r3, #28
    dbe4:	e780      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbe6:	2318      	movs	r3, #24
    dbe8:	e77e      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbea:	2308      	movs	r3, #8
    dbec:	e77c      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbee:	2301      	movs	r3, #1
    dbf0:	e77a      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbf2:	2302      	movs	r3, #2
    dbf4:	e778      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbf6:	2305      	movs	r3, #5
    dbf8:	e776      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbfa:	2304      	movs	r3, #4
    dbfc:	e774      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dbfe:	2303      	movs	r3, #3
    dc00:	e772      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dc02:	2310      	movs	r3, #16
    dc04:	e770      	b.n	dae8 <am_hal_ctimer_int_register+0x6c>
    dc06:	bf00      	nop
    dc08:	100017a4 	.word	0x100017a4
    dc0c:	0000eee4 	.word	0x0000eee4
    dc10:	0000ef0c 	.word	0x0000ef0c

0000dc14 <am_hal_ctimer_config>:
    dc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc18:	b082      	sub	sp, #8
    dc1a:	460c      	mov	r4, r1
    dc1c:	4606      	mov	r6, r0
    dc1e:	f000 faff 	bl	e220 <am_hal_interrupt_master_disable>
    dc22:	4f19      	ldr	r7, [pc, #100]	; (dc88 <am_hal_ctimer_config+0x74>)
    dc24:	9001      	str	r0, [sp, #4]
    dc26:	ea4f 1846 	mov.w	r8, r6, lsl #5
    dc2a:	f858 3007 	ldr.w	r3, [r8, r7]
    dc2e:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
    dc32:	f848 3007 	str.w	r3, [r8, r7]
    dc36:	9801      	ldr	r0, [sp, #4]
    dc38:	f000 faf6 	bl	e228 <am_hal_interrupt_master_set>
    dc3c:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
    dc40:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    dc44:	6823      	ldr	r3, [r4, #0]
    dc46:	b10b      	cbz	r3, dc4c <am_hal_ctimer_config+0x38>
    dc48:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    dc4c:	f000 fae8 	bl	e220 <am_hal_interrupt_master_disable>
    dc50:	9000      	str	r0, [sp, #0]
    dc52:	f848 5007 	str.w	r5, [r8, r7]
    dc56:	9800      	ldr	r0, [sp, #0]
    dc58:	f000 fae6 	bl	e228 <am_hal_interrupt_master_set>
    dc5c:	6863      	ldr	r3, [r4, #4]
    dc5e:	b90b      	cbnz	r3, dc64 <am_hal_ctimer_config+0x50>
    dc60:	6822      	ldr	r2, [r4, #0]
    dc62:	b14a      	cbz	r2, dc78 <am_hal_ctimer_config+0x64>
    dc64:	f3c3 0344 	ubfx	r3, r3, #1, #5
    dc68:	2200      	movs	r2, #0
    dc6a:	4808      	ldr	r0, [pc, #32]	; (dc8c <am_hal_ctimer_config+0x78>)
    dc6c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
    dc70:	54b3      	strb	r3, [r6, r2]
    dc72:	b002      	add	sp, #8
    dc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc78:	68a3      	ldr	r3, [r4, #8]
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	d0f9      	beq.n	dc72 <am_hal_ctimer_config+0x5e>
    dc7e:	f3c3 0344 	ubfx	r3, r3, #1, #5
    dc82:	2201      	movs	r2, #1
    dc84:	e7f1      	b.n	dc6a <am_hal_ctimer_config+0x56>
    dc86:	bf00      	nop
    dc88:	4000800c 	.word	0x4000800c
    dc8c:	1000106c 	.word	0x1000106c

0000dc90 <am_hal_ctimer_start>:
    dc90:	b530      	push	{r4, r5, lr}
    dc92:	b083      	sub	sp, #12
    dc94:	460c      	mov	r4, r1
    dc96:	4605      	mov	r5, r0
    dc98:	f000 fac2 	bl	e220 <am_hal_interrupt_master_disable>
    dc9c:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    dca0:	4910      	ldr	r1, [pc, #64]	; (dce4 <am_hal_ctimer_start+0x54>)
    dca2:	9001      	str	r0, [sp, #4]
    dca4:	f85c 3001 	ldr.w	r3, [ip, r1]
    dca8:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    dcac:	ea23 0202 	bic.w	r2, r3, r2
    dcb0:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    dcb4:	4313      	orrs	r3, r2
    dcb6:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    dcba:	f84c 3001 	str.w	r3, [ip, r1]
    dcbe:	bf0c      	ite	eq
    dcc0:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    dcc4:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    dcc8:	4b07      	ldr	r3, [pc, #28]	; (dce8 <am_hal_ctimer_start+0x58>)
    dcca:	9801      	ldr	r0, [sp, #4]
    dccc:	bf0c      	ite	eq
    dcce:	2201      	moveq	r2, #1
    dcd0:	2200      	movne	r2, #0
    dcd2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    dcd6:	54ac      	strb	r4, [r5, r2]
    dcd8:	b003      	add	sp, #12
    dcda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    dcde:	f000 baa3 	b.w	e228 <am_hal_interrupt_master_set>
    dce2:	bf00      	nop
    dce4:	4000800c 	.word	0x4000800c
    dce8:	1000106c 	.word	0x1000106c

0000dcec <am_hal_ctimer_stop>:
    dcec:	b530      	push	{r4, r5, lr}
    dcee:	b083      	sub	sp, #12
    dcf0:	0145      	lsls	r5, r0, #5
    dcf2:	460c      	mov	r4, r1
    dcf4:	f000 fa94 	bl	e220 <am_hal_interrupt_master_disable>
    dcf8:	4b06      	ldr	r3, [pc, #24]	; (dd14 <am_hal_ctimer_stop+0x28>)
    dcfa:	9001      	str	r0, [sp, #4]
    dcfc:	58e9      	ldr	r1, [r5, r3]
    dcfe:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
    dd02:	ea21 0404 	bic.w	r4, r1, r4
    dd06:	50ec      	str	r4, [r5, r3]
    dd08:	9801      	ldr	r0, [sp, #4]
    dd0a:	b003      	add	sp, #12
    dd0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    dd10:	f000 ba8a 	b.w	e228 <am_hal_interrupt_master_set>
    dd14:	4000800c 	.word	0x4000800c

0000dd18 <am_hal_ctimer_clear>:
    dd18:	b530      	push	{r4, r5, lr}
    dd1a:	b083      	sub	sp, #12
    dd1c:	0145      	lsls	r5, r0, #5
    dd1e:	460c      	mov	r4, r1
    dd20:	f000 fa7e 	bl	e220 <am_hal_interrupt_master_disable>
    dd24:	4b06      	ldr	r3, [pc, #24]	; (dd40 <am_hal_ctimer_clear+0x28>)
    dd26:	9001      	str	r0, [sp, #4]
    dd28:	58e9      	ldr	r1, [r5, r3]
    dd2a:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    dd2e:	430c      	orrs	r4, r1
    dd30:	50ec      	str	r4, [r5, r3]
    dd32:	9801      	ldr	r0, [sp, #4]
    dd34:	b003      	add	sp, #12
    dd36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    dd3a:	f000 ba75 	b.w	e228 <am_hal_interrupt_master_set>
    dd3e:	bf00      	nop
    dd40:	4000800c 	.word	0x4000800c

0000dd44 <am_hal_ctimer_period_set>:
    dd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd48:	b082      	sub	sp, #8
    dd4a:	0145      	lsls	r5, r0, #5
    dd4c:	460e      	mov	r6, r1
    dd4e:	4614      	mov	r4, r2
    dd50:	461f      	mov	r7, r3
    dd52:	f000 fa65 	bl	e220 <am_hal_interrupt_master_disable>
    dd56:	f8df 809c 	ldr.w	r8, [pc, #156]	; ddf4 <am_hal_ctimer_period_set+0xb0>
    dd5a:	9001      	str	r0, [sp, #4]
    dd5c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dd60:	f855 2008 	ldr.w	r2, [r5, r8]
    dd64:	4821      	ldr	r0, [pc, #132]	; (ddec <am_hal_ctimer_period_set+0xa8>)
    dd66:	d02f      	beq.n	ddc8 <am_hal_ctimer_period_set+0x84>
    dd68:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    dd6c:	2a80      	cmp	r2, #128	; 0x80
    dd6e:	d019      	beq.n	dda4 <am_hal_ctimer_period_set+0x60>
    dd70:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd74:	2100      	movs	r1, #0
    dd76:	4296      	cmp	r6, r2
    dd78:	460b      	mov	r3, r1
    dd7a:	d01c      	beq.n	ddb6 <am_hal_ctimer_period_set+0x72>
    dd7c:	4a1c      	ldr	r2, [pc, #112]	; (ddf0 <am_hal_ctimer_period_set+0xac>)
    dd7e:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dd82:	eb05 0702 	add.w	r7, r5, r2
    dd86:	d027      	beq.n	ddd8 <am_hal_ctimer_period_set+0x94>
    dd88:	0c1b      	lsrs	r3, r3, #16
    dd8a:	041b      	lsls	r3, r3, #16
    dd8c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    dd90:	b2a4      	uxth	r4, r4
    dd92:	4321      	orrs	r1, r4
    dd94:	5029      	str	r1, [r5, r0]
    dd96:	50ab      	str	r3, [r5, r2]
    dd98:	9801      	ldr	r0, [sp, #4]
    dd9a:	b002      	add	sp, #8
    dd9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dda0:	f000 ba42 	b.w	e228 <am_hal_interrupt_master_set>
    dda4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dda8:	4296      	cmp	r6, r2
    ddaa:	ea4f 4104 	mov.w	r1, r4, lsl #16
    ddae:	4623      	mov	r3, r4
    ddb0:	eba4 0407 	sub.w	r4, r4, r7
    ddb4:	d1e2      	bne.n	dd7c <am_hal_ctimer_period_set+0x38>
    ddb6:	b2a4      	uxth	r4, r4
    ddb8:	4321      	orrs	r1, r4
    ddba:	5029      	str	r1, [r5, r0]
    ddbc:	9801      	ldr	r0, [sp, #4]
    ddbe:	b002      	add	sp, #8
    ddc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ddc4:	f000 ba30 	b.w	e228 <am_hal_interrupt_master_set>
    ddc8:	0c12      	lsrs	r2, r2, #16
    ddca:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    ddce:	2a80      	cmp	r2, #128	; 0x80
    ddd0:	d0e8      	beq.n	dda4 <am_hal_ctimer_period_set+0x60>
    ddd2:	4f07      	ldr	r7, [pc, #28]	; (ddf0 <am_hal_ctimer_period_set+0xac>)
    ddd4:	2100      	movs	r1, #0
    ddd6:	442f      	add	r7, r5
    ddd8:	b2a4      	uxth	r4, r4
    ddda:	4321      	orrs	r1, r4
    dddc:	6039      	str	r1, [r7, #0]
    ddde:	9801      	ldr	r0, [sp, #4]
    dde0:	b002      	add	sp, #8
    dde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dde6:	f000 ba1f 	b.w	e228 <am_hal_interrupt_master_set>
    ddea:	bf00      	nop
    ddec:	40008004 	.word	0x40008004
    ddf0:	40008008 	.word	0x40008008
    ddf4:	4000800c 	.word	0x4000800c

0000ddf8 <am_hal_ctimer_int_enable>:
    ddf8:	b510      	push	{r4, lr}
    ddfa:	b082      	sub	sp, #8
    ddfc:	4604      	mov	r4, r0
    ddfe:	f000 fa0f 	bl	e220 <am_hal_interrupt_master_disable>
    de02:	4a06      	ldr	r2, [pc, #24]	; (de1c <am_hal_ctimer_int_enable+0x24>)
    de04:	9001      	str	r0, [sp, #4]
    de06:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    de0a:	4323      	orrs	r3, r4
    de0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    de10:	9801      	ldr	r0, [sp, #4]
    de12:	b002      	add	sp, #8
    de14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de18:	f000 ba06 	b.w	e228 <am_hal_interrupt_master_set>
    de1c:	40008000 	.word	0x40008000

0000de20 <am_hal_ctimer_int_clear>:
    de20:	b510      	push	{r4, lr}
    de22:	b082      	sub	sp, #8
    de24:	4604      	mov	r4, r0
    de26:	f000 f9fb 	bl	e220 <am_hal_interrupt_master_disable>
    de2a:	4b05      	ldr	r3, [pc, #20]	; (de40 <am_hal_ctimer_int_clear+0x20>)
    de2c:	9001      	str	r0, [sp, #4]
    de2e:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    de32:	9801      	ldr	r0, [sp, #4]
    de34:	b002      	add	sp, #8
    de36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de3a:	f000 b9f5 	b.w	e228 <am_hal_interrupt_master_set>
    de3e:	bf00      	nop
    de40:	40008000 	.word	0x40008000

0000de44 <am_hal_ctimer_int_status_get>:
    de44:	b510      	push	{r4, lr}
    de46:	b082      	sub	sp, #8
    de48:	4604      	mov	r4, r0
    de4a:	f000 f9e9 	bl	e220 <am_hal_interrupt_master_disable>
    de4e:	4b0b      	ldr	r3, [pc, #44]	; (de7c <am_hal_ctimer_int_status_get+0x38>)
    de50:	9001      	str	r0, [sp, #4]
    de52:	b154      	cbz	r4, de6a <am_hal_ctimer_int_status_get+0x26>
    de54:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
    de58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    de5c:	9801      	ldr	r0, [sp, #4]
    de5e:	401c      	ands	r4, r3
    de60:	f000 f9e2 	bl	e228 <am_hal_interrupt_master_set>
    de64:	4620      	mov	r0, r4
    de66:	b002      	add	sp, #8
    de68:	bd10      	pop	{r4, pc}
    de6a:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
    de6e:	9801      	ldr	r0, [sp, #4]
    de70:	f000 f9da 	bl	e228 <am_hal_interrupt_master_set>
    de74:	4620      	mov	r0, r4
    de76:	b002      	add	sp, #8
    de78:	bd10      	pop	{r4, pc}
    de7a:	bf00      	nop
    de7c:	40008000 	.word	0x40008000

0000de80 <am_hal_debug_error>:
    de80:	e7fe      	b.n	de80 <am_hal_debug_error>
    de82:	bf00      	nop

0000de84 <am_hal_flash_delay>:
    de84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    de88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    de8a:	075b      	lsls	r3, r3, #29
    de8c:	bf46      	itte	mi
    de8e:	0040      	lslmi	r0, r0, #1
    de90:	230e      	movmi	r3, #14
    de92:	230b      	movpl	r3, #11
    de94:	4298      	cmp	r0, r3
    de96:	d902      	bls.n	de9e <am_hal_flash_delay+0x1a>
    de98:	4a01      	ldr	r2, [pc, #4]	; (dea0 <am_hal_flash_delay+0x1c>)
    de9a:	1ac0      	subs	r0, r0, r3
    de9c:	4710      	bx	r2
    de9e:	4770      	bx	lr
    dea0:	0800009d 	.word	0x0800009d

0000dea4 <am_hal_flash_delay_status_check>:
    dea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dea8:	f89d c020 	ldrb.w	ip, [sp, #32]
    deac:	f8df 805c 	ldr.w	r8, [pc, #92]	; df0c <am_hal_flash_delay_status_check+0x68>
    deb0:	4604      	mov	r4, r0
    deb2:	460d      	mov	r5, r1
    deb4:	4616      	mov	r6, r2
    deb6:	461f      	mov	r7, r3
    deb8:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    debc:	f1bc 0f00 	cmp.w	ip, #0
    dec0:	d00a      	beq.n	ded8 <am_hal_flash_delay_status_check+0x34>
    dec2:	e01a      	b.n	defa <am_hal_flash_delay_status_check+0x56>
    dec4:	b1f4      	cbz	r4, df04 <am_hal_flash_delay_status_check+0x60>
    dec6:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    deca:	f013 0f04 	tst.w	r3, #4
    dece:	bf0c      	ite	eq
    ded0:	2005      	moveq	r0, #5
    ded2:	2012      	movne	r0, #18
    ded4:	3c01      	subs	r4, #1
    ded6:	47c0      	blx	r8
    ded8:	6828      	ldr	r0, [r5, #0]
    deda:	4030      	ands	r0, r6
    dedc:	42b8      	cmp	r0, r7
    dede:	d0f1      	beq.n	dec4 <am_hal_flash_delay_status_check+0x20>
    dee0:	2000      	movs	r0, #0
    dee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dee6:	b16c      	cbz	r4, df04 <am_hal_flash_delay_status_check+0x60>
    dee8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    deec:	f013 0f04 	tst.w	r3, #4
    def0:	bf0c      	ite	eq
    def2:	2005      	moveq	r0, #5
    def4:	2012      	movne	r0, #18
    def6:	3c01      	subs	r4, #1
    def8:	47c0      	blx	r8
    defa:	6828      	ldr	r0, [r5, #0]
    defc:	4030      	ands	r0, r6
    defe:	42b8      	cmp	r0, r7
    df00:	d1f1      	bne.n	dee6 <am_hal_flash_delay_status_check+0x42>
    df02:	e7ed      	b.n	dee0 <am_hal_flash_delay_status_check+0x3c>
    df04:	2004      	movs	r0, #4
    df06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df0a:	bf00      	nop
    df0c:	0800009d 	.word	0x0800009d

0000df10 <am_hal_flash_load_ui32>:
    df10:	4b00      	ldr	r3, [pc, #0]	; (df14 <am_hal_flash_load_ui32+0x4>)
    df12:	4718      	bx	r3
    df14:	08000075 	.word	0x08000075

0000df18 <am_hal_flash_store_ui32>:
    df18:	4b01      	ldr	r3, [pc, #4]	; (df20 <am_hal_flash_store_ui32+0x8>)
    df1a:	f043 0301 	orr.w	r3, r3, #1
    df1e:	4718      	bx	r3
    df20:	1000107c 	.word	0x1000107c

0000df24 <am_hal_gpio_pinconfig>:
    df24:	2831      	cmp	r0, #49	; 0x31
    df26:	f200 80c3 	bhi.w	e0b0 <am_hal_gpio_pinconfig+0x18c>
    df2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df2e:	4604      	mov	r4, r0
    df30:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    df34:	f001 0007 	and.w	r0, r1, #7
    df38:	b085      	sub	sp, #20
    df3a:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    df3e:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    df42:	d00f      	beq.n	df64 <am_hal_gpio_pinconfig+0x40>
    df44:	f3c1 1642 	ubfx	r6, r1, #5, #3
    df48:	1db5      	adds	r5, r6, #6
    df4a:	f005 0507 	and.w	r5, r5, #7
    df4e:	2d03      	cmp	r5, #3
    df50:	f042 0201 	orr.w	r2, r2, #1
    df54:	f240 80ae 	bls.w	e0b4 <am_hal_gpio_pinconfig+0x190>
    df58:	2fc0      	cmp	r7, #192	; 0xc0
    df5a:	f000 80e1 	beq.w	e120 <am_hal_gpio_pinconfig+0x1fc>
    df5e:	2f20      	cmp	r7, #32
    df60:	f000 80e3 	beq.w	e12a <am_hal_gpio_pinconfig+0x206>
    df64:	b163      	cbz	r3, df80 <am_hal_gpio_pinconfig+0x5c>
    df66:	2b01      	cmp	r3, #1
    df68:	f000 80d3 	beq.w	e112 <am_hal_gpio_pinconfig+0x1ee>
    df6c:	2b02      	cmp	r3, #2
    df6e:	f040 80c9 	bne.w	e104 <am_hal_gpio_pinconfig+0x1e0>
    df72:	4b79      	ldr	r3, [pc, #484]	; (e158 <am_hal_gpio_pinconfig+0x234>)
    df74:	5d1b      	ldrb	r3, [r3, r4]
    df76:	075b      	lsls	r3, r3, #29
    df78:	f140 80c4 	bpl.w	e104 <am_hal_gpio_pinconfig+0x1e0>
    df7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    df80:	4b76      	ldr	r3, [pc, #472]	; (e15c <am_hal_gpio_pinconfig+0x238>)
    df82:	5d1b      	ldrb	r3, [r3, r4]
    df84:	4103      	asrs	r3, r0
    df86:	005b      	lsls	r3, r3, #1
    df88:	f003 0302 	and.w	r3, r3, #2
    df8c:	4313      	orrs	r3, r2
    df8e:	4a74      	ldr	r2, [pc, #464]	; (e160 <am_hal_gpio_pinconfig+0x23c>)
    df90:	5d12      	ldrb	r2, [r2, r4]
    df92:	4282      	cmp	r2, r0
    df94:	f000 8099 	beq.w	e0ca <am_hal_gpio_pinconfig+0x1a6>
    df98:	f3c1 3000 	ubfx	r0, r1, #12, #1
    df9c:	f3c1 2581 	ubfx	r5, r1, #10, #2
    dfa0:	f3c1 3280 	ubfx	r2, r1, #14, #1
    dfa4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    dfa8:	0a88      	lsrs	r0, r1, #10
    dfaa:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dfae:	f000 0008 	and.w	r0, r0, #8
    dfb2:	4302      	orrs	r2, r0
    dfb4:	f3c1 2007 	ubfx	r0, r1, #8, #8
    dfb8:	f000 050c 	and.w	r5, r0, #12
    dfbc:	2d04      	cmp	r5, #4
    dfbe:	f000 80a5 	beq.w	e10c <am_hal_gpio_pinconfig+0x1e8>
    dfc2:	4d68      	ldr	r5, [pc, #416]	; (e164 <am_hal_gpio_pinconfig+0x240>)
    dfc4:	682d      	ldr	r5, [r5, #0]
    dfc6:	eba1 0805 	sub.w	r8, r1, r5
    dfca:	fab8 f888 	clz	r8, r8
    dfce:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dfd2:	f010 0f60 	tst.w	r0, #96	; 0x60
    dfd6:	bf04      	itt	eq
    dfd8:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    dfdc:	f360 0200 	bfieq	r2, r0, #0, #1
    dfe0:	00a0      	lsls	r0, r4, #2
    dfe2:	f3c1 2101 	ubfx	r1, r1, #8, #2
    dfe6:	2902      	cmp	r1, #2
    dfe8:	d05c      	beq.n	e0a4 <am_hal_gpio_pinconfig+0x180>
    dfea:	2903      	cmp	r1, #3
    dfec:	d058      	beq.n	e0a0 <am_hal_gpio_pinconfig+0x17c>
    dfee:	2901      	cmp	r1, #1
    dff0:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dff4:	bf08      	it	eq
    dff6:	f043 0304 	orreq.w	r3, r3, #4
    dffa:	f001 0118 	and.w	r1, r1, #24
    dffe:	2700      	movs	r7, #0
    e000:	f000 001c 	and.w	r0, r0, #28
    e004:	fa02 f600 	lsl.w	r6, r2, r0
    e008:	220f      	movs	r2, #15
    e00a:	4082      	lsls	r2, r0
    e00c:	43d2      	mvns	r2, r2
    e00e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e012:	fa03 f501 	lsl.w	r5, r3, r1
    e016:	fa09 f901 	lsl.w	r9, r9, r1
    e01a:	9201      	str	r2, [sp, #4]
    e01c:	f000 f900 	bl	e220 <am_hal_interrupt_master_disable>
    e020:	f024 0a03 	bic.w	sl, r4, #3
    e024:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    e028:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    e02c:	4b4e      	ldr	r3, [pc, #312]	; (e168 <am_hal_gpio_pinconfig+0x244>)
    e02e:	494f      	ldr	r1, [pc, #316]	; (e16c <am_hal_gpio_pinconfig+0x248>)
    e030:	9a01      	ldr	r2, [sp, #4]
    e032:	9003      	str	r0, [sp, #12]
    e034:	ea6f 0909 	mvn.w	r9, r9
    e038:	f02b 0b03 	bic.w	fp, fp, #3
    e03c:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    e040:	f1b8 0f00 	cmp.w	r8, #0
    e044:	d00b      	beq.n	e05e <am_hal_gpio_pinconfig+0x13a>
    e046:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    e04a:	f004 081f 	and.w	r8, r4, #31
    e04e:	4848      	ldr	r0, [pc, #288]	; (e170 <am_hal_gpio_pinconfig+0x24c>)
    e050:	f00e 0e04 	and.w	lr, lr, #4
    e054:	2401      	movs	r4, #1
    e056:	fa04 f408 	lsl.w	r4, r4, r8
    e05a:	f84e 4000 	str.w	r4, [lr, r0]
    e05e:	4845      	ldr	r0, [pc, #276]	; (e174 <am_hal_gpio_pinconfig+0x250>)
    e060:	2473      	movs	r4, #115	; 0x73
    e062:	6604      	str	r4, [r0, #96]	; 0x60
    e064:	f8dc 4000 	ldr.w	r4, [ip]
    e068:	ea04 0409 	and.w	r4, r4, r9
    e06c:	4325      	orrs	r5, r4
    e06e:	f8cc 5000 	str.w	r5, [ip]
    e072:	f85b 4003 	ldr.w	r4, [fp, r3]
    e076:	4022      	ands	r2, r4
    e078:	4332      	orrs	r2, r6
    e07a:	f84b 2003 	str.w	r2, [fp, r3]
    e07e:	f85a 3001 	ldr.w	r3, [sl, r1]
    e082:	ea03 0909 	and.w	r9, r3, r9
    e086:	2400      	movs	r4, #0
    e088:	ea49 0707 	orr.w	r7, r9, r7
    e08c:	f84a 7001 	str.w	r7, [sl, r1]
    e090:	6604      	str	r4, [r0, #96]	; 0x60
    e092:	9803      	ldr	r0, [sp, #12]
    e094:	f000 f8c8 	bl	e228 <am_hal_interrupt_master_set>
    e098:	4620      	mov	r0, r4
    e09a:	b005      	add	sp, #20
    e09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0a0:	f043 0304 	orr.w	r3, r3, #4
    e0a4:	00e1      	lsls	r1, r4, #3
    e0a6:	f001 0118 	and.w	r1, r1, #24
    e0aa:	2701      	movs	r7, #1
    e0ac:	408f      	lsls	r7, r1
    e0ae:	e7a7      	b.n	e000 <am_hal_gpio_pinconfig+0xdc>
    e0b0:	2006      	movs	r0, #6
    e0b2:	4770      	bx	lr
    e0b4:	4d28      	ldr	r5, [pc, #160]	; (e158 <am_hal_gpio_pinconfig+0x234>)
    e0b6:	5d2d      	ldrb	r5, [r5, r4]
    e0b8:	3e02      	subs	r6, #2
    e0ba:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e0be:	07ee      	lsls	r6, r5, #31
    e0c0:	d536      	bpl.n	e130 <am_hal_gpio_pinconfig+0x20c>
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	f43f af5c 	beq.w	df80 <am_hal_gpio_pinconfig+0x5c>
    e0c8:	e74d      	b.n	df66 <am_hal_gpio_pinconfig+0x42>
    e0ca:	f3c1 4202 	ubfx	r2, r1, #16, #3
    e0ce:	2a07      	cmp	r2, #7
    e0d0:	d030      	beq.n	e134 <am_hal_gpio_pinconfig+0x210>
    e0d2:	4d29      	ldr	r5, [pc, #164]	; (e178 <am_hal_gpio_pinconfig+0x254>)
    e0d4:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    e0d8:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e0dc:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    e0e0:	4290      	cmp	r0, r2
    e0e2:	d029      	beq.n	e138 <am_hal_gpio_pinconfig+0x214>
    e0e4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e0e8:	00a0      	lsls	r0, r4, #2
    e0ea:	786e      	ldrb	r6, [r5, #1]
    e0ec:	4296      	cmp	r6, r2
    e0ee:	d02d      	beq.n	e14c <am_hal_gpio_pinconfig+0x228>
    e0f0:	78ae      	ldrb	r6, [r5, #2]
    e0f2:	4296      	cmp	r6, r2
    e0f4:	d02c      	beq.n	e150 <am_hal_gpio_pinconfig+0x22c>
    e0f6:	78ed      	ldrb	r5, [r5, #3]
    e0f8:	4295      	cmp	r5, r2
    e0fa:	d02b      	beq.n	e154 <am_hal_gpio_pinconfig+0x230>
    e0fc:	481f      	ldr	r0, [pc, #124]	; (e17c <am_hal_gpio_pinconfig+0x258>)
    e0fe:	b005      	add	sp, #20
    e100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e104:	481e      	ldr	r0, [pc, #120]	; (e180 <am_hal_gpio_pinconfig+0x25c>)
    e106:	b005      	add	sp, #20
    e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e10c:	f04f 0801 	mov.w	r8, #1
    e110:	e75f      	b.n	dfd2 <am_hal_gpio_pinconfig+0xae>
    e112:	4b11      	ldr	r3, [pc, #68]	; (e158 <am_hal_gpio_pinconfig+0x234>)
    e114:	5d1b      	ldrb	r3, [r3, r4]
    e116:	079d      	lsls	r5, r3, #30
    e118:	d5f4      	bpl.n	e104 <am_hal_gpio_pinconfig+0x1e0>
    e11a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e11e:	e72f      	b.n	df80 <am_hal_gpio_pinconfig+0x5c>
    e120:	2c14      	cmp	r4, #20
    e122:	f43f af1f 	beq.w	df64 <am_hal_gpio_pinconfig+0x40>
    e126:	4817      	ldr	r0, [pc, #92]	; (e184 <am_hal_gpio_pinconfig+0x260>)
    e128:	e7b7      	b.n	e09a <am_hal_gpio_pinconfig+0x176>
    e12a:	2c14      	cmp	r4, #20
    e12c:	f47f af1a 	bne.w	df64 <am_hal_gpio_pinconfig+0x40>
    e130:	4815      	ldr	r0, [pc, #84]	; (e188 <am_hal_gpio_pinconfig+0x264>)
    e132:	e7b2      	b.n	e09a <am_hal_gpio_pinconfig+0x176>
    e134:	4815      	ldr	r0, [pc, #84]	; (e18c <am_hal_gpio_pinconfig+0x268>)
    e136:	e7b0      	b.n	e09a <am_hal_gpio_pinconfig+0x176>
    e138:	2200      	movs	r2, #0
    e13a:	00a0      	lsls	r0, r4, #2
    e13c:	0052      	lsls	r2, r2, #1
    e13e:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e142:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    e146:	f04f 0800 	mov.w	r8, #0
    e14a:	e74a      	b.n	dfe2 <am_hal_gpio_pinconfig+0xbe>
    e14c:	2201      	movs	r2, #1
    e14e:	e7f5      	b.n	e13c <am_hal_gpio_pinconfig+0x218>
    e150:	2202      	movs	r2, #2
    e152:	e7f3      	b.n	e13c <am_hal_gpio_pinconfig+0x218>
    e154:	2203      	movs	r2, #3
    e156:	e7f1      	b.n	e13c <am_hal_gpio_pinconfig+0x218>
    e158:	0000ef28 	.word	0x0000ef28
    e15c:	0000ef5c 	.word	0x0000ef5c
    e160:	0000f058 	.word	0x0000f058
    e164:	0000ef20 	.word	0x0000ef20
    e168:	40010040 	.word	0x40010040
    e16c:	400100e0 	.word	0x400100e0
    e170:	400100b4 	.word	0x400100b4
    e174:	40010000 	.word	0x40010000
    e178:	0000ef90 	.word	0x0000ef90
    e17c:	08000104 	.word	0x08000104
    e180:	08000102 	.word	0x08000102
    e184:	08000101 	.word	0x08000101
    e188:	08000100 	.word	0x08000100
    e18c:	08000103 	.word	0x08000103

0000e190 <am_hal_gpio_state_write>:
    e190:	2831      	cmp	r0, #49	; 0x31
    e192:	d81a      	bhi.n	e1ca <am_hal_gpio_state_write+0x3a>
    e194:	b570      	push	{r4, r5, r6, lr}
    e196:	2905      	cmp	r1, #5
    e198:	b082      	sub	sp, #8
    e19a:	460d      	mov	r5, r1
    e19c:	d812      	bhi.n	e1c4 <am_hal_gpio_state_write+0x34>
    e19e:	f000 031f 	and.w	r3, r0, #31
    e1a2:	2201      	movs	r2, #1
    e1a4:	08c0      	lsrs	r0, r0, #3
    e1a6:	fa02 f603 	lsl.w	r6, r2, r3
    e1aa:	f000 0404 	and.w	r4, r0, #4
    e1ae:	f000 f837 	bl	e220 <am_hal_interrupt_master_disable>
    e1b2:	3d01      	subs	r5, #1
    e1b4:	9001      	str	r0, [sp, #4]
    e1b6:	2d04      	cmp	r5, #4
    e1b8:	d821      	bhi.n	e1fe <am_hal_gpio_state_write+0x6e>
    e1ba:	e8df f005 	tbb	[pc, r5]
    e1be:	1512      	.short	0x1512
    e1c0:	1d1a      	.short	0x1d1a
    e1c2:	08          	.byte	0x08
    e1c3:	00          	.byte	0x00
    e1c4:	2006      	movs	r0, #6
    e1c6:	b002      	add	sp, #8
    e1c8:	bd70      	pop	{r4, r5, r6, pc}
    e1ca:	2005      	movs	r0, #5
    e1cc:	4770      	bx	lr
    e1ce:	4a0d      	ldr	r2, [pc, #52]	; (e204 <am_hal_gpio_state_write+0x74>)
    e1d0:	58a3      	ldr	r3, [r4, r2]
    e1d2:	4073      	eors	r3, r6
    e1d4:	50a3      	str	r3, [r4, r2]
    e1d6:	9801      	ldr	r0, [sp, #4]
    e1d8:	f000 f826 	bl	e228 <am_hal_interrupt_master_set>
    e1dc:	2000      	movs	r0, #0
    e1de:	b002      	add	sp, #8
    e1e0:	bd70      	pop	{r4, r5, r6, pc}
    e1e2:	4b09      	ldr	r3, [pc, #36]	; (e208 <am_hal_gpio_state_write+0x78>)
    e1e4:	50e6      	str	r6, [r4, r3]
    e1e6:	e7f6      	b.n	e1d6 <am_hal_gpio_state_write+0x46>
    e1e8:	4a08      	ldr	r2, [pc, #32]	; (e20c <am_hal_gpio_state_write+0x7c>)
    e1ea:	58a3      	ldr	r3, [r4, r2]
    e1ec:	4073      	eors	r3, r6
    e1ee:	50a3      	str	r3, [r4, r2]
    e1f0:	e7f1      	b.n	e1d6 <am_hal_gpio_state_write+0x46>
    e1f2:	4b04      	ldr	r3, [pc, #16]	; (e204 <am_hal_gpio_state_write+0x74>)
    e1f4:	50e6      	str	r6, [r4, r3]
    e1f6:	e7ee      	b.n	e1d6 <am_hal_gpio_state_write+0x46>
    e1f8:	4b05      	ldr	r3, [pc, #20]	; (e210 <am_hal_gpio_state_write+0x80>)
    e1fa:	50e6      	str	r6, [r4, r3]
    e1fc:	e7eb      	b.n	e1d6 <am_hal_gpio_state_write+0x46>
    e1fe:	4b05      	ldr	r3, [pc, #20]	; (e214 <am_hal_gpio_state_write+0x84>)
    e200:	50e6      	str	r6, [r4, r3]
    e202:	e7e8      	b.n	e1d6 <am_hal_gpio_state_write+0x46>
    e204:	400100b4 	.word	0x400100b4
    e208:	40010090 	.word	0x40010090
    e20c:	40010088 	.word	0x40010088
    e210:	400100a8 	.word	0x400100a8
    e214:	40010098 	.word	0x40010098

0000e218 <am_hal_interrupt_master_enable>:
    e218:	f3ef 8010 	mrs	r0, PRIMASK
    e21c:	b662      	cpsie	i
    e21e:	4770      	bx	lr

0000e220 <am_hal_interrupt_master_disable>:
    e220:	f3ef 8010 	mrs	r0, PRIMASK
    e224:	b672      	cpsid	i
    e226:	4770      	bx	lr

0000e228 <am_hal_interrupt_master_set>:
    e228:	f380 8810 	msr	PRIMASK, r0
    e22c:	4770      	bx	lr
    e22e:	bf00      	nop

0000e230 <am_hal_ios_power_ctrl>:
    e230:	2800      	cmp	r0, #0
    e232:	d04c      	beq.n	e2ce <am_hal_ios_power_ctrl+0x9e>
    e234:	b510      	push	{r4, lr}
    e236:	6803      	ldr	r3, [r0, #0]
    e238:	4604      	mov	r4, r0
    e23a:	482b      	ldr	r0, [pc, #172]	; (e2e8 <am_hal_ios_power_ctrl+0xb8>)
    e23c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e240:	4283      	cmp	r3, r0
    e242:	b082      	sub	sp, #8
    e244:	d11f      	bne.n	e286 <am_hal_ios_power_ctrl+0x56>
    e246:	b321      	cbz	r1, e292 <am_hal_ios_power_ctrl+0x62>
    e248:	3901      	subs	r1, #1
    e24a:	2901      	cmp	r1, #1
    e24c:	d81e      	bhi.n	e28c <am_hal_ios_power_ctrl+0x5c>
    e24e:	b192      	cbz	r2, e276 <am_hal_ios_power_ctrl+0x46>
    e250:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e254:	2201      	movs	r2, #1
    e256:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    e25a:	60e1      	str	r1, [r4, #12]
    e25c:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
    e260:	6121      	str	r1, [r4, #16]
    e262:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
    e266:	6161      	str	r1, [r4, #20]
    e268:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    e26c:	61a1      	str	r1, [r4, #24]
    e26e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    e272:	61e3      	str	r3, [r4, #28]
    e274:	7222      	strb	r2, [r4, #8]
    e276:	6860      	ldr	r0, [r4, #4]
    e278:	3001      	adds	r0, #1
    e27a:	b2c0      	uxtb	r0, r0
    e27c:	f000 fc24 	bl	eac8 <am_hal_pwrctrl_periph_disable>
    e280:	2000      	movs	r0, #0
    e282:	b002      	add	sp, #8
    e284:	bd10      	pop	{r4, pc}
    e286:	2002      	movs	r0, #2
    e288:	b002      	add	sp, #8
    e28a:	bd10      	pop	{r4, pc}
    e28c:	2006      	movs	r0, #6
    e28e:	b002      	add	sp, #8
    e290:	bd10      	pop	{r4, pc}
    e292:	b1f2      	cbz	r2, e2d2 <am_hal_ios_power_ctrl+0xa2>
    e294:	7a23      	ldrb	r3, [r4, #8]
    e296:	b32b      	cbz	r3, e2e4 <am_hal_ios_power_ctrl+0xb4>
    e298:	6860      	ldr	r0, [r4, #4]
    e29a:	9101      	str	r1, [sp, #4]
    e29c:	3001      	adds	r0, #1
    e29e:	b2c0      	uxtb	r0, r0
    e2a0:	f000 fbe8 	bl	ea74 <am_hal_pwrctrl_periph_enable>
    e2a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e2a8:	68e2      	ldr	r2, [r4, #12]
    e2aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e2ae:	6922      	ldr	r2, [r4, #16]
    e2b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    e2b4:	6962      	ldr	r2, [r4, #20]
    e2b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    e2ba:	69a2      	ldr	r2, [r4, #24]
    e2bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    e2c0:	9901      	ldr	r1, [sp, #4]
    e2c2:	69e2      	ldr	r2, [r4, #28]
    e2c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    e2c8:	4608      	mov	r0, r1
    e2ca:	7221      	strb	r1, [r4, #8]
    e2cc:	e7dc      	b.n	e288 <am_hal_ios_power_ctrl+0x58>
    e2ce:	2002      	movs	r0, #2
    e2d0:	4770      	bx	lr
    e2d2:	6860      	ldr	r0, [r4, #4]
    e2d4:	9201      	str	r2, [sp, #4]
    e2d6:	3001      	adds	r0, #1
    e2d8:	b2c0      	uxtb	r0, r0
    e2da:	f000 fbcb 	bl	ea74 <am_hal_pwrctrl_periph_enable>
    e2de:	9a01      	ldr	r2, [sp, #4]
    e2e0:	4610      	mov	r0, r2
    e2e2:	e7d1      	b.n	e288 <am_hal_ios_power_ctrl+0x58>
    e2e4:	2007      	movs	r0, #7
    e2e6:	e7cf      	b.n	e288 <am_hal_ios_power_ctrl+0x58>
    e2e8:	01123456 	.word	0x01123456

0000e2ec <am_hal_ios_initialize>:
    e2ec:	b990      	cbnz	r0, e314 <am_hal_ios_initialize+0x28>
    e2ee:	b1a9      	cbz	r1, e31c <am_hal_ios_initialize+0x30>
    e2f0:	4b0b      	ldr	r3, [pc, #44]	; (e320 <am_hal_ios_initialize+0x34>)
    e2f2:	78d8      	ldrb	r0, [r3, #3]
    e2f4:	f010 0001 	ands.w	r0, r0, #1
    e2f8:	d10e      	bne.n	e318 <am_hal_ios_initialize+0x2c>
    e2fa:	b410      	push	{r4}
    e2fc:	681c      	ldr	r4, [r3, #0]
    e2fe:	4a09      	ldr	r2, [pc, #36]	; (e324 <am_hal_ios_initialize+0x38>)
    e300:	f004 4c7c 	and.w	ip, r4, #4227858432	; 0xfc000000
    e304:	ea4c 0202 	orr.w	r2, ip, r2
    e308:	e9c3 2000 	strd	r2, r0, [r3]
    e30c:	f85d 4b04 	ldr.w	r4, [sp], #4
    e310:	600b      	str	r3, [r1, #0]
    e312:	4770      	bx	lr
    e314:	2005      	movs	r0, #5
    e316:	4770      	bx	lr
    e318:	2007      	movs	r0, #7
    e31a:	4770      	bx	lr
    e31c:	2006      	movs	r0, #6
    e31e:	4770      	bx	lr
    e320:	10001824 	.word	0x10001824
    e324:	01123456 	.word	0x01123456

0000e328 <am_hal_ios_configure>:
    e328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e32c:	b083      	sub	sp, #12
    e32e:	2800      	cmp	r0, #0
    e330:	f000 80b8 	beq.w	e4a4 <am_hal_ios_configure+0x17c>
    e334:	6803      	ldr	r3, [r0, #0]
    e336:	4a76      	ldr	r2, [pc, #472]	; (e510 <am_hal_ios_configure+0x1e8>)
    e338:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e33c:	4293      	cmp	r3, r2
    e33e:	4604      	mov	r4, r0
    e340:	f040 80b0 	bne.w	e4a4 <am_hal_ios_configure+0x17c>
    e344:	460d      	mov	r5, r1
    e346:	2900      	cmp	r1, #0
    e348:	f000 80b1 	beq.w	e4ae <am_hal_ios_configure+0x186>
    e34c:	6846      	ldr	r6, [r0, #4]
    e34e:	2e00      	cmp	r6, #0
    e350:	f040 80ad 	bne.w	e4ae <am_hal_ios_configure+0x186>
    e354:	78c3      	ldrb	r3, [r0, #3]
    e356:	0799      	lsls	r1, r3, #30
    e358:	f100 80c2 	bmi.w	e4e0 <am_hal_ios_configure+0x1b8>
    e35c:	2001      	movs	r0, #1
    e35e:	f000 fb89 	bl	ea74 <am_hal_pwrctrl_periph_enable>
    e362:	68af      	ldr	r7, [r5, #8]
    e364:	68ea      	ldr	r2, [r5, #12]
    e366:	6327      	str	r7, [r4, #48]	; 0x30
    e368:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    e36c:	f107 48a0 	add.w	r8, r7, #1342177280	; 0x50000000
    e370:	6263      	str	r3, [r4, #36]	; 0x24
    e372:	eba3 0308 	sub.w	r3, r3, r8
    e376:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    e37a:	69a9      	ldr	r1, [r5, #24]
    e37c:	f8c4 8020 	str.w	r8, [r4, #32]
    e380:	b2db      	uxtb	r3, r3
    e382:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
    e386:	4299      	cmp	r1, r3
    e388:	bf84      	itt	hi
    e38a:	4619      	movhi	r1, r3
    e38c:	61ab      	strhi	r3, [r5, #24]
    e38e:	686b      	ldr	r3, [r5, #4]
    e390:	4860      	ldr	r0, [pc, #384]	; (e514 <am_hal_ios_configure+0x1ec>)
    e392:	f8df e17c 	ldr.w	lr, [pc, #380]	; e510 <am_hal_ios_configure+0x1e8>
    e396:	0152      	lsls	r2, r2, #5
    e398:	055b      	lsls	r3, r3, #21
    e39a:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    e39e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
    e3a2:	4313      	orrs	r3, r2
    e3a4:	6822      	ldr	r2, [r4, #0]
    e3a6:	6101      	str	r1, [r0, #16]
    e3a8:	f022 4c7e 	bic.w	ip, r2, #4261412864	; 0xfe000000
    e3ac:	6969      	ldr	r1, [r5, #20]
    e3ae:	6001      	str	r1, [r0, #0]
    e3b0:	2200      	movs	r2, #0
    e3b2:	f3c7 01c4 	ubfx	r1, r7, #3, #5
    e3b6:	45f4      	cmp	ip, lr
    e3b8:	6042      	str	r2, [r0, #4]
    e3ba:	ea43 0301 	orr.w	r3, r3, r1
    e3be:	6082      	str	r2, [r0, #8]
    e3c0:	60c2      	str	r2, [r0, #12]
    e3c2:	d179      	bne.n	e4b8 <am_hal_ios_configure+0x190>
    e3c4:	78e1      	ldrb	r1, [r4, #3]
    e3c6:	f011 0102 	ands.w	r1, r1, #2
    e3ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    e3ce:	f000 808c 	beq.w	e4ea <am_hal_ios_configure+0x1c2>
    e3d2:	f8d0 1118 	ldr.w	r1, [r0, #280]	; 0x118
    e3d6:	f894 e003 	ldrb.w	lr, [r4, #3]
    e3da:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    e3de:	f362 0e41 	bfi	lr, r2, #1, #1
    e3e2:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    e3e6:	f884 e003 	strb.w	lr, [r4, #3]
    e3ea:	6829      	ldr	r1, [r5, #0]
    e3ec:	f8d4 e000 	ldr.w	lr, [r4]
    e3f0:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    e3f4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    e3f8:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    e3fc:	f362 0109 	bfi	r1, r2, #0, #10
    e400:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
    e404:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    e408:	f02e 437e 	bic.w	r3, lr, #4261412864	; 0xfe000000
    e40c:	f362 210f 	bfi	r1, r2, #8, #8
    e410:	4563      	cmp	r3, ip
    e412:	f8a0 1100 	strh.w	r1, [r0, #256]	; 0x100
    e416:	d13c      	bne.n	e492 <am_hal_ios_configure+0x16a>
    e418:	f7ff ff02 	bl	e220 <am_hal_interrupt_master_disable>
    e41c:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
    e420:	2301      	movs	r3, #1
    e422:	9000      	str	r0, [sp, #0]
    e424:	f8c9 310c 	str.w	r3, [r9, #268]	; 0x10c
    e428:	2300      	movs	r3, #0
    e42a:	f8c9 7100 	str.w	r7, [r9, #256]	; 0x100
    e42e:	f8c9 310c 	str.w	r3, [r9, #268]	; 0x10c
    e432:	9800      	ldr	r0, [sp, #0]
    e434:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
    e438:	f7ff fef6 	bl	e228 <am_hal_interrupt_master_set>
    e43c:	6823      	ldr	r3, [r4, #0]
    e43e:	4a34      	ldr	r2, [pc, #208]	; (e510 <am_hal_ios_configure+0x1e8>)
    e440:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e444:	4293      	cmp	r3, r2
    e446:	d124      	bne.n	e492 <am_hal_ios_configure+0x16a>
    e448:	78e2      	ldrb	r2, [r4, #3]
    e44a:	0792      	lsls	r2, r2, #30
    e44c:	d40e      	bmi.n	e46c <am_hal_ios_configure+0x144>
    e44e:	f8d9 2118 	ldr.w	r2, [r9, #280]	; 0x118
    e452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    e456:	f8c9 2118 	str.w	r2, [r9, #280]	; 0x118
    e45a:	78e2      	ldrb	r2, [r4, #3]
    e45c:	f042 0202 	orr.w	r2, r2, #2
    e460:	70e2      	strb	r2, [r4, #3]
    e462:	6822      	ldr	r2, [r4, #0]
    e464:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e468:	429a      	cmp	r2, r3
    e46a:	d112      	bne.n	e492 <am_hal_ios_configure+0x16a>
    e46c:	68af      	ldr	r7, [r5, #8]
    e46e:	f7ff fed7 	bl	e220 <am_hal_interrupt_master_disable>
    e472:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e476:	2201      	movs	r2, #1
    e478:	9001      	str	r0, [sp, #4]
    e47a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    e47e:	2200      	movs	r2, #0
    e480:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
    e484:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    e488:	441f      	add	r7, r3
    e48a:	9801      	ldr	r0, [sp, #4]
    e48c:	62a7      	str	r7, [r4, #40]	; 0x28
    e48e:	f7ff fecb 	bl	e228 <am_hal_interrupt_master_set>
    e492:	692a      	ldr	r2, [r5, #16]
    e494:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e498:	4630      	mov	r0, r6
    e49a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    e49e:	b003      	add	sp, #12
    e4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e4a4:	2602      	movs	r6, #2
    e4a6:	4630      	mov	r0, r6
    e4a8:	b003      	add	sp, #12
    e4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e4ae:	2606      	movs	r6, #6
    e4b0:	4630      	mov	r0, r6
    e4b2:	b003      	add	sp, #12
    e4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e4b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    e4bc:	6828      	ldr	r0, [r5, #0]
    e4be:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
    e4c2:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
    e4c6:	f8b1 3110 	ldrh.w	r3, [r1, #272]	; 0x110
    e4ca:	f362 0309 	bfi	r3, r2, #0, #10
    e4ce:	f8a1 3110 	strh.w	r3, [r1, #272]	; 0x110
    e4d2:	f8b1 3100 	ldrh.w	r3, [r1, #256]	; 0x100
    e4d6:	f362 230f 	bfi	r3, r2, #8, #8
    e4da:	f8a1 3100 	strh.w	r3, [r1, #256]	; 0x100
    e4de:	e7d8      	b.n	e492 <am_hal_ios_configure+0x16a>
    e4e0:	2607      	movs	r6, #7
    e4e2:	4630      	mov	r0, r6
    e4e4:	b003      	add	sp, #12
    e4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e4ea:	682a      	ldr	r2, [r5, #0]
    e4ec:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
    e4f0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    e4f4:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
    e4f8:	f361 0309 	bfi	r3, r1, #0, #10
    e4fc:	f8a0 3110 	strh.w	r3, [r0, #272]	; 0x110
    e500:	f8b0 3100 	ldrh.w	r3, [r0, #256]	; 0x100
    e504:	f361 230f 	bfi	r3, r1, #8, #8
    e508:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
    e50c:	e784      	b.n	e418 <am_hal_ios_configure+0xf0>
    e50e:	bf00      	nop
    e510:	01123456 	.word	0x01123456
    e514:	10001858 	.word	0x10001858

0000e518 <am_hal_ios_interrupt_enable>:
    e518:	b170      	cbz	r0, e538 <am_hal_ios_interrupt_enable+0x20>
    e51a:	6803      	ldr	r3, [r0, #0]
    e51c:	4a07      	ldr	r2, [pc, #28]	; (e53c <am_hal_ios_interrupt_enable+0x24>)
    e51e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e522:	4293      	cmp	r3, r2
    e524:	d108      	bne.n	e538 <am_hal_ios_interrupt_enable+0x20>
    e526:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    e52a:	2000      	movs	r0, #0
    e52c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    e530:	4319      	orrs	r1, r3
    e532:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    e536:	4770      	bx	lr
    e538:	2002      	movs	r0, #2
    e53a:	4770      	bx	lr
    e53c:	01123456 	.word	0x01123456

0000e540 <am_hal_ios_interrupt_clear>:
    e540:	b158      	cbz	r0, e55a <am_hal_ios_interrupt_clear+0x1a>
    e542:	6803      	ldr	r3, [r0, #0]
    e544:	4a06      	ldr	r2, [pc, #24]	; (e560 <am_hal_ios_interrupt_clear+0x20>)
    e546:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e54a:	4293      	cmp	r3, r2
    e54c:	d105      	bne.n	e55a <am_hal_ios_interrupt_clear+0x1a>
    e54e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e552:	2000      	movs	r0, #0
    e554:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    e558:	4770      	bx	lr
    e55a:	2002      	movs	r0, #2
    e55c:	4770      	bx	lr
    e55e:	bf00      	nop
    e560:	01123456 	.word	0x01123456

0000e564 <am_hal_ios_interrupt_status_get>:
    e564:	b188      	cbz	r0, e58a <am_hal_ios_interrupt_status_get+0x26>
    e566:	6803      	ldr	r3, [r0, #0]
    e568:	480a      	ldr	r0, [pc, #40]	; (e594 <am_hal_ios_interrupt_status_get+0x30>)
    e56a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e56e:	4283      	cmp	r3, r0
    e570:	d10b      	bne.n	e58a <am_hal_ios_interrupt_status_get+0x26>
    e572:	b162      	cbz	r2, e58e <am_hal_ios_interrupt_status_get+0x2a>
    e574:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    e578:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    e57c:	b111      	cbz	r1, e584 <am_hal_ios_interrupt_status_get+0x20>
    e57e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    e582:	400b      	ands	r3, r1
    e584:	6013      	str	r3, [r2, #0]
    e586:	2000      	movs	r0, #0
    e588:	4770      	bx	lr
    e58a:	2002      	movs	r0, #2
    e58c:	4770      	bx	lr
    e58e:	2006      	movs	r0, #6
    e590:	4770      	bx	lr
    e592:	bf00      	nop
    e594:	01123456 	.word	0x01123456

0000e598 <am_hal_ios_fifo_space_used>:
    e598:	b1e0      	cbz	r0, e5d4 <am_hal_ios_fifo_space_used+0x3c>
    e59a:	6803      	ldr	r3, [r0, #0]
    e59c:	4a10      	ldr	r2, [pc, #64]	; (e5e0 <am_hal_ios_fifo_space_used+0x48>)
    e59e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e5a2:	4293      	cmp	r3, r2
    e5a4:	d116      	bne.n	e5d4 <am_hal_ios_fifo_space_used+0x3c>
    e5a6:	b530      	push	{r4, r5, lr}
    e5a8:	460c      	mov	r4, r1
    e5aa:	b083      	sub	sp, #12
    e5ac:	b1a1      	cbz	r1, e5d8 <am_hal_ios_fifo_space_used+0x40>
    e5ae:	f7ff fe37 	bl	e220 <am_hal_interrupt_master_disable>
    e5b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    e5b6:	4b0b      	ldr	r3, [pc, #44]	; (e5e4 <am_hal_ios_fifo_space_used+0x4c>)
    e5b8:	9001      	str	r0, [sp, #4]
    e5ba:	68db      	ldr	r3, [r3, #12]
    e5bc:	f8d2 5100 	ldr.w	r5, [r2, #256]	; 0x100
    e5c0:	9801      	ldr	r0, [sp, #4]
    e5c2:	f3c5 2507 	ubfx	r5, r5, #8, #8
    e5c6:	441d      	add	r5, r3
    e5c8:	f7ff fe2e 	bl	e228 <am_hal_interrupt_master_set>
    e5cc:	2000      	movs	r0, #0
    e5ce:	6025      	str	r5, [r4, #0]
    e5d0:	b003      	add	sp, #12
    e5d2:	bd30      	pop	{r4, r5, pc}
    e5d4:	2002      	movs	r0, #2
    e5d6:	4770      	bx	lr
    e5d8:	2006      	movs	r0, #6
    e5da:	b003      	add	sp, #12
    e5dc:	bd30      	pop	{r4, r5, pc}
    e5de:	bf00      	nop
    e5e0:	01123456 	.word	0x01123456
    e5e4:	10001858 	.word	0x10001858

0000e5e8 <am_hal_ios_interrupt_service>:
    e5e8:	2800      	cmp	r0, #0
    e5ea:	f000 8092 	beq.w	e712 <am_hal_ios_interrupt_service+0x12a>
    e5ee:	6803      	ldr	r3, [r0, #0]
    e5f0:	4a59      	ldr	r2, [pc, #356]	; (e758 <am_hal_ios_interrupt_service+0x170>)
    e5f2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e5f6:	4293      	cmp	r3, r2
    e5f8:	f040 808b 	bne.w	e712 <am_hal_ios_interrupt_service+0x12a>
    e5fc:	07cb      	lsls	r3, r1, #31
    e5fe:	d543      	bpl.n	e688 <am_hal_ios_interrupt_service+0xa0>
    e600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e604:	4955      	ldr	r1, [pc, #340]	; (e75c <am_hal_ios_interrupt_service+0x174>)
    e606:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    e60a:	f8dc 2108 	ldr.w	r2, [ip, #264]	; 0x108
    e60e:	68cb      	ldr	r3, [r1, #12]
    e610:	fa5f fe82 	uxtb.w	lr, r2
    e614:	2b00      	cmp	r3, #0
    e616:	d034      	beq.n	e682 <am_hal_ios_interrupt_service+0x9a>
    e618:	f8dc 3100 	ldr.w	r3, [ip, #256]	; 0x100
    e61c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e620:	459e      	cmp	lr, r3
    e622:	d32e      	bcc.n	e682 <am_hal_ios_interrupt_service+0x9a>
    e624:	684c      	ldr	r4, [r1, #4]
    e626:	688a      	ldr	r2, [r1, #8]
    e628:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
    e62c:	42a2      	cmp	r2, r4
    e62e:	bf28      	it	cs
    e630:	690c      	ldrcs	r4, [r1, #16]
    e632:	688a      	ldr	r2, [r1, #8]
    e634:	f8d1 800c 	ldr.w	r8, [r1, #12]
    e638:	43db      	mvns	r3, r3
    e63a:	1aa4      	subs	r4, r4, r2
    e63c:	441d      	add	r5, r3
    e63e:	680a      	ldr	r2, [r1, #0]
    e640:	688b      	ldr	r3, [r1, #8]
    e642:	42ac      	cmp	r4, r5
    e644:	441a      	add	r2, r3
    e646:	6a83      	ldr	r3, [r0, #40]	; 0x28
    e648:	d924      	bls.n	e694 <am_hal_ios_interrupt_service+0xac>
    e64a:	e9d0 8608 	ldrd	r8, r6, [r0, #32]
    e64e:	b145      	cbz	r5, e662 <am_hal_ios_interrupt_service+0x7a>
    e650:	1957      	adds	r7, r2, r5
    e652:	f812 4b01 	ldrb.w	r4, [r2], #1
    e656:	f803 4b01 	strb.w	r4, [r3], #1
    e65a:	429e      	cmp	r6, r3
    e65c:	d016      	beq.n	e68c <am_hal_ios_interrupt_service+0xa4>
    e65e:	42ba      	cmp	r2, r7
    e660:	d1f7      	bne.n	e652 <am_hal_ios_interrupt_service+0x6a>
    e662:	688a      	ldr	r2, [r1, #8]
    e664:	6283      	str	r3, [r0, #40]	; 0x28
    e666:	442a      	add	r2, r5
    e668:	608a      	str	r2, [r1, #8]
    e66a:	68cb      	ldr	r3, [r1, #12]
    e66c:	1b5d      	subs	r5, r3, r5
    e66e:	60cd      	str	r5, [r1, #12]
    e670:	f8bc 3208 	ldrh.w	r3, [ip, #520]	; 0x208
    e674:	f043 0301 	orr.w	r3, r3, #1
    e678:	f8ac 3208 	strh.w	r3, [ip, #520]	; 0x208
    e67c:	68cb      	ldr	r3, [r1, #12]
    e67e:	2b00      	cmp	r3, #0
    e680:	d1ca      	bne.n	e618 <am_hal_ios_interrupt_service+0x30>
    e682:	2000      	movs	r0, #0
    e684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e688:	2000      	movs	r0, #0
    e68a:	4770      	bx	lr
    e68c:	42ba      	cmp	r2, r7
    e68e:	4643      	mov	r3, r8
    e690:	d1df      	bne.n	e652 <am_hal_ios_interrupt_service+0x6a>
    e692:	e7e6      	b.n	e662 <am_hal_ios_interrupt_service+0x7a>
    e694:	e9d0 a708 	ldrd	sl, r7, [r0, #32]
    e698:	b14c      	cbz	r4, e6ae <am_hal_ios_interrupt_service+0xc6>
    e69a:	eb02 0904 	add.w	r9, r2, r4
    e69e:	f812 6b01 	ldrb.w	r6, [r2], #1
    e6a2:	f803 6b01 	strb.w	r6, [r3], #1
    e6a6:	429f      	cmp	r7, r3
    e6a8:	d02f      	beq.n	e70a <am_hal_ios_interrupt_service+0x122>
    e6aa:	4591      	cmp	r9, r2
    e6ac:	d1f7      	bne.n	e69e <am_hal_ios_interrupt_service+0xb6>
    e6ae:	688a      	ldr	r2, [r1, #8]
    e6b0:	690e      	ldr	r6, [r1, #16]
    e6b2:	6283      	str	r3, [r0, #40]	; 0x28
    e6b4:	4422      	add	r2, r4
    e6b6:	608a      	str	r2, [r1, #8]
    e6b8:	688a      	ldr	r2, [r1, #8]
    e6ba:	fbb2 f7f6 	udiv	r7, r2, r6
    e6be:	fb06 2217 	mls	r2, r6, r7, r2
    e6c2:	608a      	str	r2, [r1, #8]
    e6c4:	68ca      	ldr	r2, [r1, #12]
    e6c6:	1b2f      	subs	r7, r5, r4
    e6c8:	eba2 0204 	sub.w	r2, r2, r4
    e6cc:	60ca      	str	r2, [r1, #12]
    e6ce:	d0cf      	beq.n	e670 <am_hal_ios_interrupt_service+0x88>
    e6d0:	ebb8 0604 	subs.w	r6, r8, r4
    e6d4:	d0cc      	beq.n	e670 <am_hal_ios_interrupt_service+0x88>
    e6d6:	42be      	cmp	r6, r7
    e6d8:	d91d      	bls.n	e716 <am_hal_ios_interrupt_service+0x12e>
    e6da:	688e      	ldr	r6, [r1, #8]
    e6dc:	680a      	ldr	r2, [r1, #0]
    e6de:	e9d0 a808 	ldrd	sl, r8, [r0, #32]
    e6e2:	4432      	add	r2, r6
    e6e4:	eb02 0907 	add.w	r9, r2, r7
    e6e8:	f812 6b01 	ldrb.w	r6, [r2], #1
    e6ec:	f803 6b01 	strb.w	r6, [r3], #1
    e6f0:	4598      	cmp	r8, r3
    e6f2:	d029      	beq.n	e748 <am_hal_ios_interrupt_service+0x160>
    e6f4:	4591      	cmp	r9, r2
    e6f6:	d1f7      	bne.n	e6e8 <am_hal_ios_interrupt_service+0x100>
    e6f8:	6283      	str	r3, [r0, #40]	; 0x28
    e6fa:	688b      	ldr	r3, [r1, #8]
    e6fc:	441f      	add	r7, r3
    e6fe:	608f      	str	r7, [r1, #8]
    e700:	68cb      	ldr	r3, [r1, #12]
    e702:	1b5d      	subs	r5, r3, r5
    e704:	442c      	add	r4, r5
    e706:	60cc      	str	r4, [r1, #12]
    e708:	e7b2      	b.n	e670 <am_hal_ios_interrupt_service+0x88>
    e70a:	4591      	cmp	r9, r2
    e70c:	4653      	mov	r3, sl
    e70e:	d1c6      	bne.n	e69e <am_hal_ios_interrupt_service+0xb6>
    e710:	e7cd      	b.n	e6ae <am_hal_ios_interrupt_service+0xc6>
    e712:	2002      	movs	r0, #2
    e714:	4770      	bx	lr
    e716:	688d      	ldr	r5, [r1, #8]
    e718:	680a      	ldr	r2, [r1, #0]
    e71a:	e9d0 a708 	ldrd	sl, r7, [r0, #32]
    e71e:	442a      	add	r2, r5
    e720:	eb02 0906 	add.w	r9, r2, r6
    e724:	f812 5b01 	ldrb.w	r5, [r2], #1
    e728:	f803 5b01 	strb.w	r5, [r3], #1
    e72c:	429f      	cmp	r7, r3
    e72e:	d00f      	beq.n	e750 <am_hal_ios_interrupt_service+0x168>
    e730:	454a      	cmp	r2, r9
    e732:	d1f7      	bne.n	e724 <am_hal_ios_interrupt_service+0x13c>
    e734:	6283      	str	r3, [r0, #40]	; 0x28
    e736:	688b      	ldr	r3, [r1, #8]
    e738:	441e      	add	r6, r3
    e73a:	608e      	str	r6, [r1, #8]
    e73c:	68cb      	ldr	r3, [r1, #12]
    e73e:	eba3 0808 	sub.w	r8, r3, r8
    e742:	4444      	add	r4, r8
    e744:	60cc      	str	r4, [r1, #12]
    e746:	e793      	b.n	e670 <am_hal_ios_interrupt_service+0x88>
    e748:	4591      	cmp	r9, r2
    e74a:	4653      	mov	r3, sl
    e74c:	d1cc      	bne.n	e6e8 <am_hal_ios_interrupt_service+0x100>
    e74e:	e7d3      	b.n	e6f8 <am_hal_ios_interrupt_service+0x110>
    e750:	454a      	cmp	r2, r9
    e752:	4653      	mov	r3, sl
    e754:	d1e6      	bne.n	e724 <am_hal_ios_interrupt_service+0x13c>
    e756:	e7ed      	b.n	e734 <am_hal_ios_interrupt_service+0x14c>
    e758:	01123456 	.word	0x01123456
    e75c:	10001858 	.word	0x10001858

0000e760 <am_hal_ios_fifo_write>:
    e760:	2800      	cmp	r0, #0
    e762:	d056      	beq.n	e812 <am_hal_ios_fifo_write+0xb2>
    e764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e768:	461f      	mov	r7, r3
    e76a:	6803      	ldr	r3, [r0, #0]
    e76c:	4615      	mov	r5, r2
    e76e:	4a60      	ldr	r2, [pc, #384]	; (e8f0 <am_hal_ios_fifo_write+0x190>)
    e770:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e774:	4293      	cmp	r3, r2
    e776:	b083      	sub	sp, #12
    e778:	4606      	mov	r6, r0
    e77a:	d10f      	bne.n	e79c <am_hal_ios_fifo_write+0x3c>
    e77c:	460c      	mov	r4, r1
    e77e:	2900      	cmp	r1, #0
    e780:	d043      	beq.n	e80a <am_hal_ios_fifo_write+0xaa>
    e782:	2f00      	cmp	r7, #0
    e784:	d041      	beq.n	e80a <am_hal_ios_fifo_write+0xaa>
    e786:	f8df 8170 	ldr.w	r8, [pc, #368]	; e8f8 <am_hal_ios_fifo_write+0x198>
    e78a:	f8d8 2000 	ldr.w	r2, [r8]
    e78e:	b14a      	cbz	r2, e7a4 <am_hal_ios_fifo_write+0x44>
    e790:	b97d      	cbnz	r5, e7b2 <am_hal_ios_fifo_write+0x52>
    e792:	2000      	movs	r0, #0
    e794:	603d      	str	r5, [r7, #0]
    e796:	b003      	add	sp, #12
    e798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e79c:	2002      	movs	r0, #2
    e79e:	b003      	add	sp, #12
    e7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7a4:	4853      	ldr	r0, [pc, #332]	; (e8f4 <am_hal_ios_fifo_write+0x194>)
    e7a6:	f240 317b 	movw	r1, #891	; 0x37b
    e7aa:	f7ff fb69 	bl	de80 <am_hal_debug_error>
    e7ae:	2d00      	cmp	r5, #0
    e7b0:	d0ef      	beq.n	e792 <am_hal_ios_fifo_write+0x32>
    e7b2:	f7ff fd35 	bl	e220 <am_hal_interrupt_master_disable>
    e7b6:	9000      	str	r0, [sp, #0]
    e7b8:	f8d8 a00c 	ldr.w	sl, [r8, #12]
    e7bc:	9800      	ldr	r0, [sp, #0]
    e7be:	f7ff fd33 	bl	e228 <am_hal_interrupt_master_set>
    e7c2:	f1ba 0f00 	cmp.w	sl, #0
    e7c6:	d126      	bne.n	e816 <am_hal_ios_fifo_write+0xb6>
    e7c8:	6833      	ldr	r3, [r6, #0]
    e7ca:	4a49      	ldr	r2, [pc, #292]	; (e8f0 <am_hal_ios_fifo_write+0x190>)
    e7cc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7d0:	4293      	cmp	r3, r2
    e7d2:	d16c      	bne.n	e8ae <am_hal_ios_fifo_write+0x14e>
    e7d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e7d8:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    e7dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    e7e0:	f8d6 c020 	ldr.w	ip, [r6, #32]
    e7e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e7e8:	43db      	mvns	r3, r3
    e7ea:	4499      	add	r9, r3
    e7ec:	454d      	cmp	r5, r9
    e7ee:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    e7f0:	d865      	bhi.n	e8be <am_hal_ios_fifo_write+0x15e>
    e7f2:	6a71      	ldr	r1, [r6, #36]	; 0x24
    e7f4:	1960      	adds	r0, r4, r5
    e7f6:	f814 2b01 	ldrb.w	r2, [r4], #1
    e7fa:	f803 2b01 	strb.w	r2, [r3], #1
    e7fe:	4299      	cmp	r1, r3
    e800:	d059      	beq.n	e8b6 <am_hal_ios_fifo_write+0x156>
    e802:	42a0      	cmp	r0, r4
    e804:	d1f7      	bne.n	e7f6 <am_hal_ios_fifo_write+0x96>
    e806:	62b3      	str	r3, [r6, #40]	; 0x28
    e808:	e7c3      	b.n	e792 <am_hal_ios_fifo_write+0x32>
    e80a:	2006      	movs	r0, #6
    e80c:	b003      	add	sp, #12
    e80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e812:	2002      	movs	r0, #2
    e814:	4770      	bx	lr
    e816:	46a9      	mov	r9, r5
    e818:	f8d8 6010 	ldr.w	r6, [r8, #16]
    e81c:	f8d8 b004 	ldr.w	fp, [r8, #4]
    e820:	eba6 0a0a 	sub.w	sl, r6, sl
    e824:	45ca      	cmp	sl, r9
    e826:	bf28      	it	cs
    e828:	46ca      	movcs	sl, r9
    e82a:	f1ba 0f00 	cmp.w	sl, #0
    e82e:	d016      	beq.n	e85e <am_hal_ios_fifo_write+0xfe>
    e830:	eb04 000a 	add.w	r0, r4, sl
    e834:	f10b 0101 	add.w	r1, fp, #1
    e838:	1b09      	subs	r1, r1, r4
    e83a:	3801      	subs	r0, #1
    e83c:	3c01      	subs	r4, #1
    e83e:	190b      	adds	r3, r1, r4
    e840:	f814 cf01 	ldrb.w	ip, [r4, #1]!
    e844:	f8d8 2000 	ldr.w	r2, [r8]
    e848:	fbb3 fef6 	udiv	lr, r3, r6
    e84c:	fb06 331e 	mls	r3, r6, lr, r3
    e850:	4284      	cmp	r4, r0
    e852:	f802 c003 	strb.w	ip, [r2, r3]
    e856:	d1f2      	bne.n	e83e <am_hal_ios_fifo_write+0xde>
    e858:	44d3      	add	fp, sl
    e85a:	eba9 090a 	sub.w	r9, r9, sl
    e85e:	f7ff fcdf 	bl	e220 <am_hal_interrupt_master_disable>
    e862:	fbbb f3f6 	udiv	r3, fp, r6
    e866:	fb06 b613 	mls	r6, r6, r3, fp
    e86a:	9001      	str	r0, [sp, #4]
    e86c:	f8c8 6004 	str.w	r6, [r8, #4]
    e870:	f8d8 300c 	ldr.w	r3, [r8, #12]
    e874:	4453      	add	r3, sl
    e876:	f8c8 300c 	str.w	r3, [r8, #12]
    e87a:	9801      	ldr	r0, [sp, #4]
    e87c:	f7ff fcd4 	bl	e228 <am_hal_interrupt_master_set>
    e880:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    e884:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    e888:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
    e88c:	f3c2 2207 	ubfx	r2, r2, #8, #8
    e890:	b2db      	uxtb	r3, r3
    e892:	429a      	cmp	r2, r3
    e894:	d808      	bhi.n	e8a8 <am_hal_ios_fifo_write+0x148>
    e896:	f8b1 320c 	ldrh.w	r3, [r1, #524]	; 0x20c
    e89a:	f043 0301 	orr.w	r3, r3, #1
    e89e:	eba5 0509 	sub.w	r5, r5, r9
    e8a2:	f8a1 320c 	strh.w	r3, [r1, #524]	; 0x20c
    e8a6:	e774      	b.n	e792 <am_hal_ios_fifo_write+0x32>
    e8a8:	eba5 0509 	sub.w	r5, r5, r9
    e8ac:	e771      	b.n	e792 <am_hal_ios_fifo_write+0x32>
    e8ae:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    e8b0:	46a9      	mov	r9, r5
    e8b2:	62b3      	str	r3, [r6, #40]	; 0x28
    e8b4:	e7b0      	b.n	e818 <am_hal_ios_fifo_write+0xb8>
    e8b6:	42a0      	cmp	r0, r4
    e8b8:	4663      	mov	r3, ip
    e8ba:	d19c      	bne.n	e7f6 <am_hal_ios_fifo_write+0x96>
    e8bc:	e7a3      	b.n	e806 <am_hal_ios_fifo_write+0xa6>
    e8be:	6a70      	ldr	r0, [r6, #36]	; 0x24
    e8c0:	f1b9 0f00 	cmp.w	r9, #0
    e8c4:	d011      	beq.n	e8ea <am_hal_ios_fifo_write+0x18a>
    e8c6:	eb04 0109 	add.w	r1, r4, r9
    e8ca:	f814 2b01 	ldrb.w	r2, [r4], #1
    e8ce:	f803 2b01 	strb.w	r2, [r3], #1
    e8d2:	4283      	cmp	r3, r0
    e8d4:	d005      	beq.n	e8e2 <am_hal_ios_fifo_write+0x182>
    e8d6:	42a1      	cmp	r1, r4
    e8d8:	d1f7      	bne.n	e8ca <am_hal_ios_fifo_write+0x16a>
    e8da:	eba5 0909 	sub.w	r9, r5, r9
    e8de:	460c      	mov	r4, r1
    e8e0:	e7e7      	b.n	e8b2 <am_hal_ios_fifo_write+0x152>
    e8e2:	42a1      	cmp	r1, r4
    e8e4:	4663      	mov	r3, ip
    e8e6:	d1f0      	bne.n	e8ca <am_hal_ios_fifo_write+0x16a>
    e8e8:	e7f7      	b.n	e8da <am_hal_ios_fifo_write+0x17a>
    e8ea:	46a9      	mov	r9, r5
    e8ec:	e7e1      	b.n	e8b2 <am_hal_ios_fifo_write+0x152>
    e8ee:	bf00      	nop
    e8f0:	01123456 	.word	0x01123456
    e8f4:	0000ef0c 	.word	0x0000ef0c
    e8f8:	10001858 	.word	0x10001858

0000e8fc <am_hal_ios_control>:
    e8fc:	b188      	cbz	r0, e922 <am_hal_ios_control+0x26>
    e8fe:	6803      	ldr	r3, [r0, #0]
    e900:	483c      	ldr	r0, [pc, #240]	; (e9f4 <am_hal_ios_control+0xf8>)
    e902:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e906:	4283      	cmp	r3, r0
    e908:	d10b      	bne.n	e922 <am_hal_ios_control+0x26>
    e90a:	2904      	cmp	r1, #4
    e90c:	d800      	bhi.n	e910 <am_hal_ios_control+0x14>
    e90e:	b152      	cbz	r2, e926 <am_hal_ios_control+0x2a>
    e910:	2908      	cmp	r1, #8
    e912:	d832      	bhi.n	e97a <am_hal_ios_control+0x7e>
    e914:	e8df f001 	tbb	[pc, r1]
    e918:	463d332b 	.word	0x463d332b
    e91c:	5611094e 	.word	0x5611094e
    e920:	07          	.byte	0x07
    e921:	00          	.byte	0x00
    e922:	2002      	movs	r0, #2
    e924:	4770      	bx	lr
    e926:	2006      	movs	r0, #6
    e928:	4770      	bx	lr
    e92a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e92e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    e932:	f010 0002 	ands.w	r0, r0, #2
    e936:	d1fa      	bne.n	e92e <am_hal_ios_control+0x32>
    e938:	4770      	bx	lr
    e93a:	b530      	push	{r4, r5, lr}
    e93c:	b083      	sub	sp, #12
    e93e:	f7ff fc6f 	bl	e220 <am_hal_interrupt_master_disable>
    e942:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    e946:	4b2c      	ldr	r3, [pc, #176]	; (e9f8 <am_hal_ios_control+0xfc>)
    e948:	9001      	str	r0, [sp, #4]
    e94a:	68db      	ldr	r3, [r3, #12]
    e94c:	f8d5 4100 	ldr.w	r4, [r5, #256]	; 0x100
    e950:	9801      	ldr	r0, [sp, #4]
    e952:	f3c4 2407 	ubfx	r4, r4, #8, #8
    e956:	441c      	add	r4, r3
    e958:	f7ff fc66 	bl	e228 <am_hal_interrupt_master_set>
    e95c:	f8b5 3110 	ldrh.w	r3, [r5, #272]	; 0x110
    e960:	2000      	movs	r0, #0
    e962:	f364 0309 	bfi	r3, r4, #0, #10
    e966:	f8a5 3110 	strh.w	r3, [r5, #272]	; 0x110
    e96a:	b003      	add	sp, #12
    e96c:	bd30      	pop	{r4, r5, pc}
    e96e:	6813      	ldr	r3, [r2, #0]
    e970:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    e974:	061b      	lsls	r3, r3, #24
    e976:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    e97a:	2000      	movs	r0, #0
    e97c:	4770      	bx	lr
    e97e:	6813      	ldr	r3, [r2, #0]
    e980:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    e984:	041b      	lsls	r3, r3, #16
    e986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    e98a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    e98e:	2000      	movs	r0, #0
    e990:	4770      	bx	lr
    e992:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e996:	2000      	movs	r0, #0
    e998:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    e99c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e9a0:	6013      	str	r3, [r2, #0]
    e9a2:	4770      	bx	lr
    e9a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e9a8:	2000      	movs	r0, #0
    e9aa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    e9ae:	b2db      	uxtb	r3, r3
    e9b0:	6013      	str	r3, [r2, #0]
    e9b2:	4770      	bx	lr
    e9b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    e9b8:	2000      	movs	r0, #0
    e9ba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    e9be:	b2db      	uxtb	r3, r3
    e9c0:	6013      	str	r3, [r2, #0]
    e9c2:	4770      	bx	lr
    e9c4:	4a0c      	ldr	r2, [pc, #48]	; (e9f8 <am_hal_ios_control+0xfc>)
    e9c6:	2300      	movs	r3, #0
    e9c8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    e9cc:	6053      	str	r3, [r2, #4]
    e9ce:	6093      	str	r3, [r2, #8]
    e9d0:	60d3      	str	r3, [r2, #12]
    e9d2:	f8b1 0110 	ldrh.w	r0, [r1, #272]	; 0x110
    e9d6:	6013      	str	r3, [r2, #0]
    e9d8:	f363 0009 	bfi	r0, r3, #0, #10
    e9dc:	6113      	str	r3, [r2, #16]
    e9de:	f8a1 0110 	strh.w	r0, [r1, #272]	; 0x110
    e9e2:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    e9e6:	f363 220f 	bfi	r2, r3, #8, #8
    e9ea:	4618      	mov	r0, r3
    e9ec:	f8a1 2100 	strh.w	r2, [r1, #256]	; 0x100
    e9f0:	4770      	bx	lr
    e9f2:	bf00      	nop
    e9f4:	01123456 	.word	0x01123456
    e9f8:	10001858 	.word	0x10001858

0000e9fc <am_hal_itm_enable>:
    e9fc:	4a0e      	ldr	r2, [pc, #56]	; (ea38 <am_hal_itm_enable+0x3c>)
    e9fe:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ea02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ea06:	b410      	push	{r4}
    ea08:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    ea0c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    ea10:	01db      	lsls	r3, r3, #7
    ea12:	d5fb      	bpl.n	ea0c <am_hal_itm_enable+0x10>
    ea14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ea18:	4c08      	ldr	r4, [pc, #32]	; (ea3c <am_hal_itm_enable+0x40>)
    ea1a:	4a09      	ldr	r2, [pc, #36]	; (ea40 <am_hal_itm_enable+0x44>)
    ea1c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    ea20:	200f      	movs	r0, #15
    ea22:	f04f 31ff 	mov.w	r1, #4294967295
    ea26:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ea2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea2e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ea32:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ea36:	4770      	bx	lr
    ea38:	e000ed00 	.word	0xe000ed00
    ea3c:	c5acce55 	.word	0xc5acce55
    ea40:	00150511 	.word	0x00150511

0000ea44 <am_hal_itm_print>:
    ea44:	7803      	ldrb	r3, [r0, #0]
    ea46:	b1a3      	cbz	r3, ea72 <am_hal_itm_print+0x2e>
    ea48:	4603      	mov	r3, r0
    ea4a:	f1c0 0c01 	rsb	ip, r0, #1
    ea4e:	eb0c 0103 	add.w	r1, ip, r3
    ea52:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ea56:	2a00      	cmp	r2, #0
    ea58:	d1f9      	bne.n	ea4e <am_hal_itm_print+0xa>
    ea5a:	4401      	add	r1, r0
    ea5c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ea60:	f810 cb01 	ldrb.w	ip, [r0], #1
    ea64:	6813      	ldr	r3, [r2, #0]
    ea66:	2b00      	cmp	r3, #0
    ea68:	d0fc      	beq.n	ea64 <am_hal_itm_print+0x20>
    ea6a:	4288      	cmp	r0, r1
    ea6c:	f882 c000 	strb.w	ip, [r2]
    ea70:	d1f6      	bne.n	ea60 <am_hal_itm_print+0x1c>
    ea72:	4770      	bx	lr

0000ea74 <am_hal_pwrctrl_periph_enable>:
    ea74:	b570      	push	{r4, r5, r6, lr}
    ea76:	b082      	sub	sp, #8
    ea78:	4604      	mov	r4, r0
    ea7a:	f7ff fbd1 	bl	e220 <am_hal_interrupt_master_disable>
    ea7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ea82:	4e0f      	ldr	r6, [pc, #60]	; (eac0 <am_hal_pwrctrl_periph_enable+0x4c>)
    ea84:	4d0f      	ldr	r5, [pc, #60]	; (eac4 <am_hal_pwrctrl_periph_enable+0x50>)
    ea86:	9001      	str	r0, [sp, #4]
    ea88:	00a4      	lsls	r4, r4, #2
    ea8a:	68b3      	ldr	r3, [r6, #8]
    ea8c:	592a      	ldr	r2, [r5, r4]
    ea8e:	4313      	orrs	r3, r2
    ea90:	60b3      	str	r3, [r6, #8]
    ea92:	9801      	ldr	r0, [sp, #4]
    ea94:	442c      	add	r4, r5
    ea96:	f7ff fbc7 	bl	e228 <am_hal_interrupt_master_set>
    ea9a:	20a0      	movs	r0, #160	; 0xa0
    ea9c:	f7ff f9f2 	bl	de84 <am_hal_flash_delay>
    eaa0:	69b3      	ldr	r3, [r6, #24]
    eaa2:	6864      	ldr	r4, [r4, #4]
    eaa4:	4223      	tst	r3, r4
    eaa6:	d103      	bne.n	eab0 <am_hal_pwrctrl_periph_enable+0x3c>
    eaa8:	20a0      	movs	r0, #160	; 0xa0
    eaaa:	f7ff f9eb 	bl	de84 <am_hal_flash_delay>
    eaae:	69b3      	ldr	r3, [r6, #24]
    eab0:	4b03      	ldr	r3, [pc, #12]	; (eac0 <am_hal_pwrctrl_periph_enable+0x4c>)
    eab2:	699b      	ldr	r3, [r3, #24]
    eab4:	4223      	tst	r3, r4
    eab6:	bf0c      	ite	eq
    eab8:	2001      	moveq	r0, #1
    eaba:	2000      	movne	r0, #0
    eabc:	b002      	add	sp, #8
    eabe:	bd70      	pop	{r4, r5, r6, pc}
    eac0:	40021000 	.word	0x40021000
    eac4:	0000f090 	.word	0x0000f090

0000eac8 <am_hal_pwrctrl_periph_disable>:
    eac8:	b570      	push	{r4, r5, r6, lr}
    eaca:	b082      	sub	sp, #8
    eacc:	4604      	mov	r4, r0
    eace:	f7ff fba7 	bl	e220 <am_hal_interrupt_master_disable>
    ead2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ead6:	4e10      	ldr	r6, [pc, #64]	; (eb18 <am_hal_pwrctrl_periph_disable+0x50>)
    ead8:	4d10      	ldr	r5, [pc, #64]	; (eb1c <am_hal_pwrctrl_periph_disable+0x54>)
    eada:	9001      	str	r0, [sp, #4]
    eadc:	00a4      	lsls	r4, r4, #2
    eade:	68b3      	ldr	r3, [r6, #8]
    eae0:	592a      	ldr	r2, [r5, r4]
    eae2:	ea23 0302 	bic.w	r3, r3, r2
    eae6:	60b3      	str	r3, [r6, #8]
    eae8:	9801      	ldr	r0, [sp, #4]
    eaea:	442c      	add	r4, r5
    eaec:	f7ff fb9c 	bl	e228 <am_hal_interrupt_master_set>
    eaf0:	20a0      	movs	r0, #160	; 0xa0
    eaf2:	f7ff f9c7 	bl	de84 <am_hal_flash_delay>
    eaf6:	69b3      	ldr	r3, [r6, #24]
    eaf8:	6864      	ldr	r4, [r4, #4]
    eafa:	4223      	tst	r3, r4
    eafc:	d003      	beq.n	eb06 <am_hal_pwrctrl_periph_disable+0x3e>
    eafe:	20a0      	movs	r0, #160	; 0xa0
    eb00:	f7ff f9c0 	bl	de84 <am_hal_flash_delay>
    eb04:	69b3      	ldr	r3, [r6, #24]
    eb06:	4b04      	ldr	r3, [pc, #16]	; (eb18 <am_hal_pwrctrl_periph_disable+0x50>)
    eb08:	699b      	ldr	r3, [r3, #24]
    eb0a:	4223      	tst	r3, r4
    eb0c:	bf14      	ite	ne
    eb0e:	2001      	movne	r0, #1
    eb10:	2000      	moveq	r0, #0
    eb12:	b002      	add	sp, #8
    eb14:	bd70      	pop	{r4, r5, r6, pc}
    eb16:	bf00      	nop
    eb18:	40021000 	.word	0x40021000
    eb1c:	0000f090 	.word	0x0000f090

0000eb20 <am_hal_pwrctrl_low_power_init>:
    eb20:	b530      	push	{r4, r5, lr}
    eb22:	4b69      	ldr	r3, [pc, #420]	; (ecc8 <am_hal_pwrctrl_low_power_init+0x1a8>)
    eb24:	681a      	ldr	r2, [r3, #0]
    eb26:	b085      	sub	sp, #20
    eb28:	b912      	cbnz	r2, eb30 <am_hal_pwrctrl_low_power_init+0x10>
    eb2a:	4a68      	ldr	r2, [pc, #416]	; (eccc <am_hal_pwrctrl_low_power_init+0x1ac>)
    eb2c:	6812      	ldr	r2, [r2, #0]
    eb2e:	601a      	str	r2, [r3, #0]
    eb30:	4b67      	ldr	r3, [pc, #412]	; (ecd0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    eb32:	68db      	ldr	r3, [r3, #12]
    eb34:	b2db      	uxtb	r3, r3
    eb36:	2b12      	cmp	r3, #18
    eb38:	d104      	bne.n	eb44 <am_hal_pwrctrl_low_power_init+0x24>
    eb3a:	4c66      	ldr	r4, [pc, #408]	; (ecd4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    eb3c:	6863      	ldr	r3, [r4, #4]
    eb3e:	07d8      	lsls	r0, r3, #31
    eb40:	f100 8088 	bmi.w	ec54 <am_hal_pwrctrl_low_power_init+0x134>
    eb44:	4b62      	ldr	r3, [pc, #392]	; (ecd0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    eb46:	68da      	ldr	r2, [r3, #12]
    eb48:	b2d2      	uxtb	r2, r2
    eb4a:	2a20      	cmp	r2, #32
    eb4c:	d934      	bls.n	ebb8 <am_hal_pwrctrl_low_power_init+0x98>
    eb4e:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    eb52:	2002      	movs	r0, #2
    eb54:	f360 4213 	bfi	r2, r0, #16, #4
    eb58:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    eb5c:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    eb60:	2203      	movs	r2, #3
    eb62:	f362 5117 	bfi	r1, r2, #20, #4
    eb66:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    eb6a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    eb6e:	2405      	movs	r4, #5
    eb70:	f364 0103 	bfi	r1, r4, #0, #4
    eb74:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    eb78:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    eb7c:	f360 1107 	bfi	r1, r0, #4, #4
    eb80:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    eb84:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    eb88:	2406      	movs	r4, #6
    eb8a:	f364 210b 	bfi	r1, r4, #8, #4
    eb8e:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    eb92:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    eb96:	2001      	movs	r0, #1
    eb98:	f360 310f 	bfi	r1, r0, #12, #4
    eb9c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    eba0:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    eba4:	f362 61de 	bfi	r1, r2, #27, #4
    eba8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ebac:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    ebb0:	f362 0103 	bfi	r1, r2, #0, #4
    ebb4:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    ebb8:	4a45      	ldr	r2, [pc, #276]	; (ecd0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ebba:	68d3      	ldr	r3, [r2, #12]
    ebbc:	b2db      	uxtb	r3, r3
    ebbe:	2b11      	cmp	r3, #17
    ebc0:	d905      	bls.n	ebce <am_hal_pwrctrl_low_power_init+0xae>
    ebc2:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    ebc6:	f36f 6318 	bfc	r3, #24, #1
    ebca:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    ebce:	2100      	movs	r1, #0
    ebd0:	200c      	movs	r0, #12
    ebd2:	f7fe fd07 	bl	d5e4 <am_hal_cachectrl_control>
    ebd6:	4b3f      	ldr	r3, [pc, #252]	; (ecd4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ebd8:	699b      	ldr	r3, [r3, #24]
    ebda:	f3c3 2500 	ubfx	r5, r3, #8, #1
    ebde:	05db      	lsls	r3, r3, #23
    ebe0:	d420      	bmi.n	ec24 <am_hal_pwrctrl_low_power_init+0x104>
    ebe2:	4c3b      	ldr	r4, [pc, #236]	; (ecd0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ebe4:	68e3      	ldr	r3, [r4, #12]
    ebe6:	b2db      	uxtb	r3, r3
    ebe8:	2b11      	cmp	r3, #17
    ebea:	d84e      	bhi.n	ec8a <am_hal_pwrctrl_low_power_init+0x16a>
    ebec:	4c38      	ldr	r4, [pc, #224]	; (ecd0 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ebee:	493a      	ldr	r1, [pc, #232]	; (ecd8 <am_hal_pwrctrl_low_power_init+0x1b8>)
    ebf0:	7e22      	ldrb	r2, [r4, #24]
    ebf2:	2001      	movs	r0, #1
    ebf4:	4302      	orrs	r2, r0
    ebf6:	2307      	movs	r3, #7
    ebf8:	7622      	strb	r2, [r4, #24]
    ebfa:	9000      	str	r0, [sp, #0]
    ebfc:	461a      	mov	r2, r3
    ebfe:	f242 7010 	movw	r0, #10000	; 0x2710
    ec02:	f7ff f94f 	bl	dea4 <am_hal_flash_delay_status_check>
    ec06:	2800      	cmp	r0, #0
    ec08:	d15a      	bne.n	ecc0 <am_hal_pwrctrl_low_power_init+0x1a0>
    ec0a:	4b32      	ldr	r3, [pc, #200]	; (ecd4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ec0c:	681a      	ldr	r2, [r3, #0]
    ec0e:	f042 0201 	orr.w	r2, r2, #1
    ec12:	601a      	str	r2, [r3, #0]
    ec14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ec16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ec1a:	625a      	str	r2, [r3, #36]	; 0x24
    ec1c:	68e3      	ldr	r3, [r4, #12]
    ec1e:	b2db      	uxtb	r3, r3
    ec20:	2b11      	cmp	r3, #17
    ec22:	d002      	beq.n	ec2a <am_hal_pwrctrl_low_power_init+0x10a>
    ec24:	2000      	movs	r0, #0
    ec26:	b005      	add	sp, #20
    ec28:	bd30      	pop	{r4, r5, pc}
    ec2a:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    ec2e:	f360 5356 	bfi	r3, r0, #21, #2
    ec32:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    ec36:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    ec3a:	220f      	movs	r2, #15
    ec3c:	f362 138b 	bfi	r3, r2, #6, #6
    ec40:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    ec44:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    ec48:	f362 0305 	bfi	r3, r2, #0, #6
    ec4c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    ec50:	b005      	add	sp, #20
    ec52:	bd30      	pop	{r4, r5, pc}
    ec54:	f7ff fae4 	bl	e220 <am_hal_interrupt_master_disable>
    ec58:	9002      	str	r0, [sp, #8]
    ec5a:	68a3      	ldr	r3, [r4, #8]
    ec5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ec60:	60a3      	str	r3, [r4, #8]
    ec62:	9802      	ldr	r0, [sp, #8]
    ec64:	f7ff fae0 	bl	e228 <am_hal_interrupt_master_set>
    ec68:	20a0      	movs	r0, #160	; 0xa0
    ec6a:	f7ff f90b 	bl	de84 <am_hal_flash_delay>
    ec6e:	69a3      	ldr	r3, [r4, #24]
    ec70:	0619      	lsls	r1, r3, #24
    ec72:	d403      	bmi.n	ec7c <am_hal_pwrctrl_low_power_init+0x15c>
    ec74:	20a0      	movs	r0, #160	; 0xa0
    ec76:	f7ff f905 	bl	de84 <am_hal_flash_delay>
    ec7a:	69a3      	ldr	r3, [r4, #24]
    ec7c:	4b15      	ldr	r3, [pc, #84]	; (ecd4 <am_hal_pwrctrl_low_power_init+0x1b4>)
    ec7e:	699b      	ldr	r3, [r3, #24]
    ec80:	061a      	lsls	r2, r3, #24
    ec82:	f53f af5f 	bmi.w	eb44 <am_hal_pwrctrl_low_power_init+0x24>
    ec86:	2001      	movs	r0, #1
    ec88:	e7cd      	b.n	ec26 <am_hal_pwrctrl_low_power_init+0x106>
    ec8a:	f7ff fac9 	bl	e220 <am_hal_interrupt_master_disable>
    ec8e:	9003      	str	r0, [sp, #12]
    ec90:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    ec94:	2219      	movs	r2, #25
    ec96:	f362 138b 	bfi	r3, r2, #6, #6
    ec9a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    ec9e:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    eca2:	210c      	movs	r1, #12
    eca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    eca8:	f361 0205 	bfi	r2, r1, #0, #6
    ecac:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    ecb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    ecb2:	f365 5296 	bfi	r2, r5, #22, #1
    ecb6:	63da      	str	r2, [r3, #60]	; 0x3c
    ecb8:	9803      	ldr	r0, [sp, #12]
    ecba:	f7ff fab5 	bl	e228 <am_hal_interrupt_master_set>
    ecbe:	e795      	b.n	ebec <am_hal_pwrctrl_low_power_init+0xcc>
    ecc0:	2004      	movs	r0, #4
    ecc2:	b005      	add	sp, #20
    ecc4:	bd30      	pop	{r4, r5, pc}
    ecc6:	bf00      	nop
    ecc8:	1000186c 	.word	0x1000186c
    eccc:	4ffff000 	.word	0x4ffff000
    ecd0:	40020000 	.word	0x40020000
    ecd4:	40021000 	.word	0x40021000
    ecd8:	40020018 	.word	0x40020018

0000ecdc <am_hal_rtc_osc_disable>:
    ecdc:	4a03      	ldr	r2, [pc, #12]	; (ecec <am_hal_rtc_osc_disable+0x10>)
    ecde:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    ece2:	f043 0310 	orr.w	r3, r3, #16
    ece6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    ecea:	4770      	bx	lr
    ecec:	40004200 	.word	0x40004200

0000ecf0 <am_hal_sysctrl_sleep>:
    ecf0:	b510      	push	{r4, lr}
    ecf2:	b082      	sub	sp, #8
    ecf4:	4604      	mov	r4, r0
    ecf6:	f7ff fa93 	bl	e220 <am_hal_interrupt_master_disable>
    ecfa:	9001      	str	r0, [sp, #4]
    ecfc:	b124      	cbz	r4, ed08 <am_hal_sysctrl_sleep+0x18>
    ecfe:	4b12      	ldr	r3, [pc, #72]	; (ed48 <am_hal_sysctrl_sleep+0x58>)
    ed00:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    ed04:	07db      	lsls	r3, r3, #31
    ed06:	d513      	bpl.n	ed30 <am_hal_sysctrl_sleep+0x40>
    ed08:	4a10      	ldr	r2, [pc, #64]	; (ed4c <am_hal_sysctrl_sleep+0x5c>)
    ed0a:	6913      	ldr	r3, [r2, #16]
    ed0c:	f023 0304 	bic.w	r3, r3, #4
    ed10:	6113      	str	r3, [r2, #16]
    ed12:	f3bf 8f4f 	dsb	sy
    ed16:	4a0e      	ldr	r2, [pc, #56]	; (ed50 <am_hal_sysctrl_sleep+0x60>)
    ed18:	4b0e      	ldr	r3, [pc, #56]	; (ed54 <am_hal_sysctrl_sleep+0x64>)
    ed1a:	6812      	ldr	r2, [r2, #0]
    ed1c:	601a      	str	r2, [r3, #0]
    ed1e:	bf30      	wfi
    ed20:	f3bf 8f6f 	isb	sy
    ed24:	9801      	ldr	r0, [sp, #4]
    ed26:	b002      	add	sp, #8
    ed28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed2c:	f7ff ba7c 	b.w	e228 <am_hal_interrupt_master_set>
    ed30:	4b09      	ldr	r3, [pc, #36]	; (ed58 <am_hal_sysctrl_sleep+0x68>)
    ed32:	681a      	ldr	r2, [r3, #0]
    ed34:	b912      	cbnz	r2, ed3c <am_hal_sysctrl_sleep+0x4c>
    ed36:	4a09      	ldr	r2, [pc, #36]	; (ed5c <am_hal_sysctrl_sleep+0x6c>)
    ed38:	6812      	ldr	r2, [r2, #0]
    ed3a:	601a      	str	r2, [r3, #0]
    ed3c:	4a03      	ldr	r2, [pc, #12]	; (ed4c <am_hal_sysctrl_sleep+0x5c>)
    ed3e:	6913      	ldr	r3, [r2, #16]
    ed40:	f043 0304 	orr.w	r3, r3, #4
    ed44:	6113      	str	r3, [r2, #16]
    ed46:	e7e4      	b.n	ed12 <am_hal_sysctrl_sleep+0x22>
    ed48:	40020000 	.word	0x40020000
    ed4c:	e000ed00 	.word	0xe000ed00
    ed50:	5fff0000 	.word	0x5fff0000
    ed54:	10001870 	.word	0x10001870
    ed58:	1000186c 	.word	0x1000186c
    ed5c:	4ffff000 	.word	0x4ffff000

0000ed60 <am_hal_tpiu_enable>:
    ed60:	b510      	push	{r4, lr}
    ed62:	4b23      	ldr	r3, [pc, #140]	; (edf0 <am_hal_tpiu_enable+0x90>)
    ed64:	6804      	ldr	r4, [r0, #0]
    ed66:	2200      	movs	r2, #0
    ed68:	b084      	sub	sp, #16
    ed6a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    ed6e:	b334      	cbz	r4, edbe <am_hal_tpiu_enable+0x5e>
    ed70:	4a20      	ldr	r2, [pc, #128]	; (edf4 <am_hal_tpiu_enable+0x94>)
    ed72:	4921      	ldr	r1, [pc, #132]	; (edf8 <am_hal_tpiu_enable+0x98>)
    ed74:	2001      	movs	r0, #1
    ed76:	6058      	str	r0, [r3, #4]
    ed78:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    ed7c:	a801      	add	r0, sp, #4
    ed7e:	428b      	cmp	r3, r1
    ed80:	bf88      	it	hi
    ed82:	4614      	movhi	r4, r2
    ed84:	f7fe fe44 	bl	da10 <am_hal_clkgen_status_get>
    ed88:	9b01      	ldr	r3, [sp, #4]
    ed8a:	1c5a      	adds	r2, r3, #1
    ed8c:	d02d      	beq.n	edea <am_hal_tpiu_enable+0x8a>
    ed8e:	08db      	lsrs	r3, r3, #3
    ed90:	fbb3 f4f4 	udiv	r4, r3, r4
    ed94:	3c01      	subs	r4, #1
    ed96:	b2a4      	uxth	r4, r4
    ed98:	4b15      	ldr	r3, [pc, #84]	; (edf0 <am_hal_tpiu_enable+0x90>)
    ed9a:	4a18      	ldr	r2, [pc, #96]	; (edfc <am_hal_tpiu_enable+0x9c>)
    ed9c:	611c      	str	r4, [r3, #16]
    ed9e:	2102      	movs	r1, #2
    eda0:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    eda4:	2000      	movs	r0, #0
    eda6:	f240 2101 	movw	r1, #513	; 0x201
    edaa:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    edae:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    edb2:	f44f 7048 	mov.w	r0, #800	; 0x320
    edb6:	f7ff f865 	bl	de84 <am_hal_flash_delay>
    edba:	b004      	add	sp, #16
    edbc:	bd10      	pop	{r4, pc}
    edbe:	6902      	ldr	r2, [r0, #16]
    edc0:	611a      	str	r2, [r3, #16]
    edc2:	6882      	ldr	r2, [r0, #8]
    edc4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    edc8:	68c1      	ldr	r1, [r0, #12]
    edca:	2201      	movs	r2, #1
    edcc:	3901      	subs	r1, #1
    edce:	408a      	lsls	r2, r1
    edd0:	605a      	str	r2, [r3, #4]
    edd2:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    edd6:	4a09      	ldr	r2, [pc, #36]	; (edfc <am_hal_tpiu_enable+0x9c>)
    edd8:	6843      	ldr	r3, [r0, #4]
    edda:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    edde:	f44f 7048 	mov.w	r0, #800	; 0x320
    ede2:	f7ff f84f 	bl	de84 <am_hal_flash_delay>
    ede6:	b004      	add	sp, #16
    ede8:	bd10      	pop	{r4, pc}
    edea:	2405      	movs	r4, #5
    edec:	e7d4      	b.n	ed98 <am_hal_tpiu_enable+0x38>
    edee:	bf00      	nop
    edf0:	e0040000 	.word	0xe0040000
    edf4:	000f4240 	.word	0x000f4240
    edf8:	001da380 	.word	0x001da380
    edfc:	40020000 	.word	0x40020000
    ee00:	74746948 	.word	0x74746948
    ee04:	20676e69 	.word	0x20676e69
    ee08:	65646e75 	.word	0x65646e75
    ee0c:	6f6c6672 	.word	0x6f6c6672
    ee10:	6f662077 	.word	0x6f662077
    ee14:	68742072 	.word	0x68742072
    ee18:	65722065 	.word	0x65722065
    ee1c:	73657571 	.word	0x73657571
    ee20:	20646574 	.word	0x20646574
    ee24:	20534f49 	.word	0x20534f49
    ee28:	4f464946 	.word	0x4f464946
    ee2c:	61727420 	.word	0x61727420
    ee30:	6566736e 	.word	0x6566736e
    ee34:	00000a72 	.word	0x00000a72
    ee38:	74746948 	.word	0x74746948
    ee3c:	20676e69 	.word	0x20676e69
    ee40:	65646e75 	.word	0x65646e75
    ee44:	6f6c6672 	.word	0x6f6c6672
    ee48:	6f662077 	.word	0x6f662077
    ee4c:	68742072 	.word	0x68742072
    ee50:	65722065 	.word	0x65722065
    ee54:	73657571 	.word	0x73657571
    ee58:	20646574 	.word	0x20646574
    ee5c:	20534f49 	.word	0x20534f49
    ee60:	4f464946 	.word	0x4f464946
    ee64:	61727420 	.word	0x61727420
    ee68:	6566736e 	.word	0x6566736e
    ee6c:	00002e72 	.word	0x00002e72
    ee70:	75626564 	.word	0x75626564
    ee74:	69665f67 	.word	0x69665f67
    ee78:	616e656c 	.word	0x616e656c
    ee7c:	652e656d 	.word	0x652e656d
    ee80:	00007478 	.word	0x00007478
    ee84:	74746948 	.word	0x74746948
    ee88:	20676e69 	.word	0x20676e69
    ee8c:	4f525245 	.word	0x4f525245
    ee90:	61632052 	.word	0x61632052
    ee94:	002e6573 	.word	0x002e6573
    ee98:	20534f49 	.word	0x20534f49
    ee9c:	4f464946 	.word	0x4f464946
    eea0:	61784520 	.word	0x61784520
    eea4:	656c706d 	.word	0x656c706d
    eea8:	0000000a 	.word	0x0000000a
    eeac:	0a0a0a0a 	.word	0x0a0a0a0a
    eeb0:	0a0a0a0a 	.word	0x0a0a0a0a
    eeb4:	0a0a0a0a 	.word	0x0a0a0a0a
    eeb8:	0a0a0a0a 	.word	0x0a0a0a0a
    eebc:	00000a0a 	.word	0x00000a0a

0000eec0 <g_AM_BSP_GPIO_ENABLE>:
    eec0:	00200801                                .. .

0000eec4 <g_AM_BSP_GPIO_IOS_CE>:
    eec4:	00001001                                ....

0000eec8 <g_AM_BSP_GPIO_IOS_MISO>:
    eec8:	00000301                                ....

0000eecc <g_AM_BSP_GPIO_IOS_MOSI>:
    eecc:	00001001                                ....

0000eed0 <g_AM_BSP_GPIO_IOS_SCK>:
    eed0:	00001001                                ....

0000eed4 <g_AM_BSP_GPIO_IOS_SCL>:
    eed4:	00001000                                ....

0000eed8 <g_AM_BSP_GPIO_IOS_SDA>:
    eed8:	00000840                                @...

0000eedc <g_AM_BSP_GPIO_ITM_SWO>:
    eedc:	00000002                                ....

0000eee0 <am_hal_cachectrl_defaults>:
    eee0:	00000308 6d695443 69207265 7265746e     ....CTimer inter
    eef0:	74707572 6d756e20 20726562 2074756f     rupt number out 
    ef00:	7220666f 65676e61 0000002e 75626564     of range....debu
    ef10:	69665f67 616e656c 652e656d 00007478     g_filename.ext..

0000ef20 <g_AM_HAL_GPIO_DISABLE>:
    ef20:	00000003                                ....

0000ef24 <g_AM_HAL_GPIO_OUTPUT>:
    ef24:	00000403                                ....

0000ef28 <g_ui8Bit76Capabilities>:
    ef28:	02800101 80010180 80800101 80808080     ................
    ef38:	80808080 80808008 01800180 80808080     ................
    ef48:	80808080 01800402 01010401 80808080     ................
    ef58:	00000101                                ....

0000ef5c <g_ui8Inpen>:
    ef5c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    ef6c:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    ef7c:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    ef8c:	00003130                                01..

0000ef90 <g_ui8NCEtable>:
    ef90:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    efa0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    efb0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    efc0:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    efd0:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    efe0:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    eff0:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f000:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f010:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f020:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f030:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f040:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f050:	32221202 43231303                       .."2..#C

0000f058 <g_ui8nCEpins>:
    f058:	02070707 00080802 01020202 01010101     ................
    f068:	01010101 01010101 01010101 01010101     ................
    f078:	01010101 08010101 01010008 01010101     ................
    f088:	00000101                                ....

0000f08c <am_hal_ios_pui8LRAM>:
    f08c:	50000000                                ...P

0000f090 <am_hal_pwrctrl_peripheral_control>:
	...
    f09c:	00000001 00000004 00000004 00000002     ................
    f0ac:	00000008 00000008 00000004 00000008     ................
    f0bc:	00000008 00000008 00000008 00000008     ................
    f0cc:	00000010 00000010 00000010 00000020     ............ ...
    f0dc:	00000010 00000010 00000040 00000010     ........@.......
    f0ec:	00000010 00000080 00000004 00000004     ................
    f0fc:	00000100 00000004 00000004 00000200     ................
    f10c:	00000020 00000020 00000400 00000004      ... ...........
    f11c:	00000004 00000800 00000040 00000040     ........@...@...
    f12c:	00001000 00000080 00000080 00002000     ............. ..
    f13c:	00000100 00000100                       ........
