
bin/ble_freertos_watch.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 71 32 02 00 65 32 02 00 f1 08 02 00     .+..q2..e2......
    c010:	69 32 02 00 69 32 02 00 69 32 02 00 00 00 00 00     i2..i2..i2......
	...
    c02c:	b1 d9 01 00 6d 32 02 00 00 00 00 00 21 da 01 00     ....m2......!...
    c03c:	85 da 01 00 6d 32 02 00 6d 32 02 00 6d 32 02 00     ....m2..m2..m2..
    c04c:	6d 32 02 00 6d 32 02 00 6d 32 02 00 6d 32 02 00     m2..m2..m2..m2..
    c05c:	6d 32 02 00 6d 32 02 00 6d 32 02 00 6d 32 02 00     m2..m2..m2..m2..
    c06c:	6d 32 02 00 79 5c 01 00 6d 32 02 00 f9 5c 01 00     m2..y\..m2...\..
    c07c:	6d 5c 01 00 6d 32 02 00 6d 32 02 00 6d 32 02 00     m\..m2..m2..m2..
    c08c:	6d 32 02 00 6d 32 02 00 6d 32 02 00 6d 32 02 00     m2..m2..m2..m2..
    c09c:	2d dc 01 00 4d dc 01 00 6d 32 02 00 6d 32 02 00     -...M...m2..m2..
    c0ac:	6d 32 02 00 6d 32 02 00 6d 32 02 00 6d 32 02 00     m2..m2..m2..m2..
    c0bc:	6d 32 02 00                                         m2..

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <dmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvInit(void)
{
    c2d4:	b410      	push	{r4}
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
    c2d6:	4b09      	ldr	r3, [pc, #36]	; (c2fc <dmAdvInit+0x28>)
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
    c2d8:	4a09      	ldr	r2, [pc, #36]	; (c300 <dmAdvInit+0x2c>)
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
    c2da:	4c0a      	ldr	r4, [pc, #40]	; (c304 <dmAdvInit+0x30>)
    c2dc:	480a      	ldr	r0, [pc, #40]	; (c308 <dmAdvInit+0x34>)
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
    c2de:	2100      	movs	r1, #0
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
    c2e0:	e9c3 4004 	strd	r4, r0, [r3, #16]
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
    c2e4:	4c09      	ldr	r4, [pc, #36]	; (c30c <dmAdvInit+0x38>)
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
  {
    dmAdvCbInit(i);
  }

  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
    c2e6:	7b10      	ldrb	r0, [r2, #12]
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
    c2e8:	619c      	str	r4, [r3, #24]
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
    c2ea:	f8a2 1011 	strh.w	r1, [r2, #17]
  dmAdvCb.advState[advHandle] = DM_ADV_STATE_IDLE;
    c2ee:	f8a3 101d 	strh.w	r1, [r3, #29]
  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
    c2f2:	7318      	strb	r0, [r3, #12]
  dmCb.advAddrType = DM_ADDR_PUBLIC;
    c2f4:	7391      	strb	r1, [r2, #14]
}
    c2f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    c2fa:	4770      	bx	lr
    c2fc:	10003e98 	.word	0x10003e98
    c300:	10003fa4 	.word	0x10003fa4
    c304:	06400640 	.word	0x06400640
    c308:	07800780 	.word	0x07800780
    c30c:	0707ffff 	.word	0x0707ffff

0000c310 <dmAdvGenConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvGenConnCmpl(uint8_t advHandle, uint8_t status)
{
    c310:	b530      	push	{r4, r5, lr}
    c312:	b08b      	sub	sp, #44	; 0x2c
    c314:	460d      	mov	r5, r1
    c316:	4604      	mov	r4, r0
  hciLeConnCmplEvt_t  leConnCmpl;

  /* generate enhanced connection complete event */
  memset(&leConnCmpl, 0, sizeof(leConnCmpl));
    c318:	2224      	movs	r2, #36	; 0x24
    c31a:	2100      	movs	r1, #0
    c31c:	a801      	add	r0, sp, #4
    c31e:	f017 f80d 	bl	2333c <memset>

  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
  leConnCmpl.hdr.status = leConnCmpl.status = status;
  leConnCmpl.role = DM_ROLE_SLAVE;
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
    c322:	4b0e      	ldr	r3, [pc, #56]	; (c35c <dmAdvGenConnCmpl+0x4c>)
  leConnCmpl.hdr.status = leConnCmpl.status = status;
    c324:	f88d 5008 	strb.w	r5, [sp, #8]
  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
    c328:	2202      	movs	r2, #2
    c32a:	f88d 2006 	strb.w	r2, [sp, #6]
  leConnCmpl.role = DM_ROLE_SLAVE;
    c32e:	2201      	movs	r2, #1
    c330:	f88d 200c 	strb.w	r2, [sp, #12]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
    c334:	2106      	movs	r1, #6
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
    c336:	191a      	adds	r2, r3, r4
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
    c338:	fb01 3104 	mla	r1, r1, r4, r3
    c33c:	3125      	adds	r1, #37	; 0x25
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
    c33e:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
    c342:	f88d 300d 	strb.w	r3, [sp, #13]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
    c346:	f10d 000e 	add.w	r0, sp, #14
  leConnCmpl.hdr.status = leConnCmpl.status = status;
    c34a:	f88d 5007 	strb.w	r5, [sp, #7]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
    c34e:	f009 fab5 	bl	158bc <BdaCpy>

  /* pass connection complete event to DM connection management module */
  dmDevPassHciEvtToConn((hciEvt_t *) &leConnCmpl);
    c352:	a801      	add	r0, sp, #4
    c354:	f001 faa6 	bl	d8a4 <dmDevPassHciEvtToConn>
}
    c358:	b00b      	add	sp, #44	; 0x2c
    c35a:	bd30      	pop	{r4, r5, pc}
    c35c:	10003e98 	.word	0x10003e98

0000c360 <DmAdvConfig>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvConfig(uint8_t advHandle, uint8_t advType, uint8_t peerAddrType, uint8_t *pPeerAddr)
{
    c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c364:	4606      	mov	r6, r0
  dmAdvApiConfig_t *pMsg;

  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiConfig_t))) != NULL)
    c366:	200e      	movs	r0, #14
{
    c368:	4688      	mov	r8, r1
    c36a:	4615      	mov	r5, r2
    c36c:	461f      	mov	r7, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiConfig_t))) != NULL)
    c36e:	f011 fe13 	bl	1df98 <WsfMsgAlloc>
    c372:	b188      	cbz	r0, c398 <DmAdvConfig+0x38>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_CONFIG;
    c374:	4604      	mov	r4, r0
    c376:	2300      	movs	r3, #0
    pMsg->advType = advType;
    c378:	f880 8005 	strb.w	r8, [r0, #5]
    pMsg->advHandle = advHandle;
    pMsg->peerAddrType = peerAddrType;
    BdaCpy(pMsg->peerAddr, pPeerAddr);
    c37c:	4639      	mov	r1, r7
    pMsg->hdr.event = DM_ADV_MSG_API_CONFIG;
    c37e:	70a3      	strb	r3, [r4, #2]
    BdaCpy(pMsg->peerAddr, pPeerAddr);
    c380:	3007      	adds	r0, #7
    pMsg->advHandle = advHandle;
    c382:	7126      	strb	r6, [r4, #4]
    pMsg->peerAddrType = peerAddrType;
    c384:	71a5      	strb	r5, [r4, #6]
    BdaCpy(pMsg->peerAddr, pPeerAddr);
    c386:	f009 fa99 	bl	158bc <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
    c38a:	4b04      	ldr	r3, [pc, #16]	; (c39c <DmAdvConfig+0x3c>)
    c38c:	4621      	mov	r1, r4
    c38e:	7b18      	ldrb	r0, [r3, #12]
  }
}
    c390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    c394:	f011 be0c 	b.w	1dfb0 <WsfMsgSend>
}
    c398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c39c:	10003fa4 	.word	0x10003fa4

0000c3a0 <DmAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetData(uint8_t advHandle, uint8_t op, uint8_t location, uint8_t len, uint8_t *pData)
{
    c3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c3a4:	4607      	mov	r7, r0
  dmAdvApiSetData_t *pMsg;

  WSF_ASSERT((location == DM_DATA_LOC_SCAN) || (location == DM_DATA_LOC_ADV));
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiSetData_t) + len)) != NULL)
    c3a6:	f103 0008 	add.w	r0, r3, #8
{
    c3aa:	f8dd 9020 	ldr.w	r9, [sp, #32]
    c3ae:	461d      	mov	r5, r3
    c3b0:	4688      	mov	r8, r1
    c3b2:	4616      	mov	r6, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiSetData_t) + len)) != NULL)
    c3b4:	f011 fdf0 	bl	1df98 <WsfMsgAlloc>
    c3b8:	b1c0      	cbz	r0, c3ec <DmAdvSetData+0x4c>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_SET_DATA;
    pMsg->advHandle = advHandle;
    c3ba:	2300      	movs	r3, #0
    c3bc:	f367 0307 	bfi	r3, r7, #0, #8
    c3c0:	f368 230f 	bfi	r3, r8, #8, #8
    c3c4:	f366 4317 	bfi	r3, r6, #16, #8
    c3c8:	4604      	mov	r4, r0
    c3ca:	f365 631f 	bfi	r3, r5, #24, #8
    c3ce:	6043      	str	r3, [r0, #4]
    pMsg->hdr.event = DM_ADV_MSG_API_SET_DATA;
    c3d0:	2301      	movs	r3, #1
    pMsg->op = op;
    pMsg->location = location;
    pMsg->len = len;
    memcpy(pMsg->pData, pData, len);
    c3d2:	4649      	mov	r1, r9
    pMsg->hdr.event = DM_ADV_MSG_API_SET_DATA;
    c3d4:	70a3      	strb	r3, [r4, #2]
    memcpy(pMsg->pData, pData, len);
    c3d6:	462a      	mov	r2, r5
    c3d8:	3008      	adds	r0, #8
    c3da:	f7ff fe91 	bl	c100 <memcpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
    c3de:	4b04      	ldr	r3, [pc, #16]	; (c3f0 <DmAdvSetData+0x50>)
    c3e0:	4621      	mov	r1, r4
    c3e2:	7b18      	ldrb	r0, [r3, #12]
  }
}
    c3e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    c3e8:	f011 bde2 	b.w	1dfb0 <WsfMsgSend>
}
    c3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c3f0:	10003fa4 	.word	0x10003fa4

0000c3f4 <DmAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pDuration, uint8_t *pMaxEaEvents)
{
    c3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3f6:	4604      	mov	r4, r0
  uint8_t i;
  dmAdvApiStart_t *pMsg;

  WSF_ASSERT(numSets <= DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStart_t))) != NULL)
    c3f8:	200e      	movs	r0, #14
{
    c3fa:	460f      	mov	r7, r1
    c3fc:	4616      	mov	r6, r2
    c3fe:	461d      	mov	r5, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStart_t))) != NULL)
    c400:	f011 fdca 	bl	1df98 <WsfMsgAlloc>
    c404:	b1c0      	cbz	r0, c438 <DmAdvStart+0x44>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_START;
    c406:	2302      	movs	r3, #2
    c408:	4601      	mov	r1, r0
    pMsg->numSets = numSets;
    c40a:	7104      	strb	r4, [r0, #4]
    pMsg->hdr.event = DM_ADV_MSG_API_START;
    c40c:	7083      	strb	r3, [r0, #2]

    for (i = 0; i < numSets; i++)
    c40e:	b16c      	cbz	r4, c42c <DmAdvStart+0x38>
    {
      pMsg->advHandle[i] = pAdvHandles[i];
    c410:	783b      	ldrb	r3, [r7, #0]
    c412:	7143      	strb	r3, [r0, #5]
      pMsg->duration[i] = pDuration[i];
    c414:	8833      	ldrh	r3, [r6, #0]
    c416:	8103      	strh	r3, [r0, #8]
      pMsg->maxEaEvents[i] = pMaxEaEvents[i];
    c418:	782b      	ldrb	r3, [r5, #0]
    c41a:	7303      	strb	r3, [r0, #12]
    for (i = 0; i < numSets; i++)
    c41c:	2c01      	cmp	r4, #1
    c41e:	d005      	beq.n	c42c <DmAdvStart+0x38>
      pMsg->advHandle[i] = pAdvHandles[i];
    c420:	787b      	ldrb	r3, [r7, #1]
    c422:	7183      	strb	r3, [r0, #6]
      pMsg->duration[i] = pDuration[i];
    c424:	8873      	ldrh	r3, [r6, #2]
    c426:	8143      	strh	r3, [r0, #10]
      pMsg->maxEaEvents[i] = pMaxEaEvents[i];
    c428:	786b      	ldrb	r3, [r5, #1]
    c42a:	7343      	strb	r3, [r0, #13]
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
    c42c:	4b03      	ldr	r3, [pc, #12]	; (c43c <DmAdvStart+0x48>)
    c42e:	7b18      	ldrb	r0, [r3, #12]
  }
}
    c430:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    c434:	f011 bdbc 	b.w	1dfb0 <WsfMsgSend>
}
    c438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c43a:	bf00      	nop
    c43c:	10003fa4 	.word	0x10003fa4

0000c440 <DmAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvStop(uint8_t numSets, uint8_t *pAdvHandles)
{
    c440:	b538      	push	{r3, r4, r5, lr}
    c442:	4604      	mov	r4, r0
  uint8_t i;
  dmAdvApiStop_t *pMsg;

  WSF_ASSERT(numSets <= DM_NUM_ADV_SETS);

  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStop_t))) != NULL)
    c444:	2008      	movs	r0, #8
{
    c446:	460d      	mov	r5, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmAdvApiStop_t))) != NULL)
    c448:	f011 fda6 	bl	1df98 <WsfMsgAlloc>
    c44c:	b310      	cbz	r0, c494 <DmAdvStop+0x54>
  {
    pMsg->hdr.event = DM_ADV_MSG_API_STOP;
    c44e:	2303      	movs	r3, #3
    c450:	7083      	strb	r3, [r0, #2]
    pMsg->numSets = numSets;
    c452:	7104      	strb	r4, [r0, #4]

    for (i = 0; i < numSets; i++)
    c454:	b1bc      	cbz	r4, c486 <DmAdvStop+0x46>
    {
      pMsg->advHandle[i] = pAdvHandles[i];
    c456:	782a      	ldrb	r2, [r5, #0]
    c458:	7142      	strb	r2, [r0, #5]
    for (i = 0; i < numSets; i++)
    c45a:	2c01      	cmp	r4, #1
    c45c:	d013      	beq.n	c486 <DmAdvStop+0x46>
      pMsg->advHandle[i] = pAdvHandles[i];
    c45e:	786a      	ldrb	r2, [r5, #1]
    c460:	7182      	strb	r2, [r0, #6]
    for (i = 0; i < numSets; i++)
    c462:	2c02      	cmp	r4, #2
    c464:	d00f      	beq.n	c486 <DmAdvStop+0x46>
      pMsg->advHandle[i] = pAdvHandles[i];
    c466:	78a9      	ldrb	r1, [r5, #2]
    c468:	71c1      	strb	r1, [r0, #7]
    for (i = 0; i < numSets; i++)
    c46a:	429c      	cmp	r4, r3
      pMsg->advHandle[i] = pAdvHandles[i];
    c46c:	f105 0202 	add.w	r2, r5, #2
    for (i = 0; i < numSets; i++)
    c470:	d009      	beq.n	c486 <DmAdvStop+0x46>
    c472:	f100 0108 	add.w	r1, r0, #8
    c476:	3301      	adds	r3, #1
    c478:	b2db      	uxtb	r3, r3
      pMsg->advHandle[i] = pAdvHandles[i];
    c47a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
    c47e:	f801 5b01 	strb.w	r5, [r1], #1
    for (i = 0; i < numSets; i++)
    c482:	429c      	cmp	r4, r3
    c484:	d1f7      	bne.n	c476 <DmAdvStop+0x36>
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
    c486:	4b04      	ldr	r3, [pc, #16]	; (c498 <DmAdvStop+0x58>)
    c488:	4601      	mov	r1, r0
    c48a:	7b18      	ldrb	r0, [r3, #12]
  }
}
    c48c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    c490:	f011 bd8e 	b.w	1dfb0 <WsfMsgSend>
}
    c494:	bd38      	pop	{r3, r4, r5, pc}
    c496:	bf00      	nop
    c498:	10003fa4 	.word	0x10003fa4

0000c49c <DmAdvSetInterval>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvSetInterval(uint8_t advHandle, uint16_t intervalMin, uint16_t intervalMax)
{
    c49c:	b570      	push	{r4, r5, r6, lr}
    c49e:	4615      	mov	r5, r2
    c4a0:	4604      	mov	r4, r0
    c4a2:	460e      	mov	r6, r1
  WSF_ASSERT(advHandle < DM_NUM_ADV_SETS);

  WsfTaskLock();
    c4a4:	f011 fdba 	bl	1e01c <WsfTaskLock>
  dmAdvCb.intervalMin[advHandle] = intervalMin;
    c4a8:	4b05      	ldr	r3, [pc, #20]	; (c4c0 <DmAdvSetInterval+0x24>)
    c4aa:	f104 0008 	add.w	r0, r4, #8
  dmAdvCb.intervalMax[advHandle] = intervalMax;
    c4ae:	eb03 0240 	add.w	r2, r3, r0, lsl #1
  dmAdvCb.intervalMin[advHandle] = intervalMin;
    c4b2:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
  dmAdvCb.intervalMax[advHandle] = intervalMax;
    c4b6:	8095      	strh	r5, [r2, #4]
  WsfTaskUnlock();
}
    c4b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WsfTaskUnlock();
    c4bc:	f011 bdb8 	b.w	1e030 <WsfTaskUnlock>
    c4c0:	10003e98 	.word	0x10003e98

0000c4c4 <dmAdvActRemoveSet>:
 */
/*************************************************************************************************/
void dmAdvActRemoveSet(dmAdvMsg_t *pMsg)
{
  /* empty */
}
    c4c4:	4770      	bx	lr
    c4c6:	bf00      	nop

0000c4c8 <dmAdvMsgHandler>:
 */
/*************************************************************************************************/
void dmAdvMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmAdvAct[DM_MSG_MASK(pMsg->event)])((dmAdvMsg_t *)pMsg);
    c4c8:	7883      	ldrb	r3, [r0, #2]
    c4ca:	4a03      	ldr	r2, [pc, #12]	; (c4d8 <dmAdvMsgHandler+0x10>)
    c4cc:	f003 030f 	and.w	r3, r3, #15
    c4d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4d4:	4718      	bx	r3
    c4d6:	bf00      	nop
    c4d8:	00025c68 	.word	0x00025c68

0000c4dc <dmAdvReset>:
{
    c4dc:	b500      	push	{lr}
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
    c4de:	4a0f      	ldr	r2, [pc, #60]	; (c51c <dmAdvReset+0x40>)
    c4e0:	7f53      	ldrb	r3, [r2, #29]
    c4e2:	2b05      	cmp	r3, #5
{
    c4e4:	b083      	sub	sp, #12
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
    c4e6:	d009      	beq.n	c4fc <dmAdvReset+0x20>
    c4e8:	2b01      	cmp	r3, #1
    c4ea:	d004      	beq.n	c4f6 <dmAdvReset+0x1a>
  dmAdvInit();
    c4ec:	f7ff fef2 	bl	c2d4 <dmAdvInit>
}
    c4f0:	b003      	add	sp, #12
    c4f2:	f85d fb04 	ldr.w	pc, [sp], #4
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
    c4f6:	7e13      	ldrb	r3, [r2, #24]
    c4f8:	2b01      	cmp	r3, #1
    c4fa:	d0f7      	beq.n	c4ec <dmAdvReset+0x10>
    WsfTimerStop(&dmAdvCb.advTimer);
    c4fc:	4807      	ldr	r0, [pc, #28]	; (c51c <dmAdvReset+0x40>)
    c4fe:	f012 f82b 	bl	1e558 <WsfTimerStop>
    (*dmCb.cback)((dmEvt_t *) &advStop);
    c502:	4b07      	ldr	r3, [pc, #28]	; (c520 <dmAdvReset+0x44>)
    advStop.event = DM_ADV_STOP_IND;
    c504:	2222      	movs	r2, #34	; 0x22
    (*dmCb.cback)((dmEvt_t *) &advStop);
    c506:	689b      	ldr	r3, [r3, #8]
    advStop.event = DM_ADV_STOP_IND;
    c508:	f8ad 2006 	strh.w	r2, [sp, #6]
    (*dmCb.cback)((dmEvt_t *) &advStop);
    c50c:	a801      	add	r0, sp, #4
    c50e:	4798      	blx	r3
  dmAdvInit();
    c510:	f7ff fee0 	bl	c2d4 <dmAdvInit>
}
    c514:	b003      	add	sp, #12
    c516:	f85d fb04 	ldr.w	pc, [sp], #4
    c51a:	bf00      	nop
    c51c:	10003e98 	.word	0x10003e98
    c520:	10003fa4 	.word	0x10003fa4

0000c524 <dmAdvActConfig>:
{
    c524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c528:	4c18      	ldr	r4, [pc, #96]	; (c58c <dmAdvActConfig+0x68>)
{
    c52a:	b087      	sub	sp, #28
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c52c:	7f61      	ldrb	r1, [r4, #29]
{
    c52e:	4605      	mov	r5, r0
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c530:	4817      	ldr	r0, [pc, #92]	; (c590 <dmAdvActConfig+0x6c>)
    c532:	f012 f8b1 	bl	1e698 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
    c536:	7f63      	ldrb	r3, [r4, #29]
    c538:	b9fb      	cbnz	r3, c57a <dmAdvActConfig+0x56>
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
    c53a:	7e23      	ldrb	r3, [r4, #24]
    c53c:	2b01      	cmp	r3, #1
    c53e:	d01f      	beq.n	c580 <dmAdvActConfig+0x5c>
    c540:	2b04      	cmp	r3, #4
    c542:	d01d      	beq.n	c580 <dmAdvActConfig+0x5c>
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
    c544:	4f13      	ldr	r7, [pc, #76]	; (c594 <dmAdvActConfig+0x70>)
    c546:	8aa1      	ldrh	r1, [r4, #20]
    c548:	7bb8      	ldrb	r0, [r7, #14]
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
    c54a:	796e      	ldrb	r6, [r5, #5]
    c54c:	f895 9006 	ldrb.w	r9, [r5, #6]
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
    c550:	f8b4 8010 	ldrh.w	r8, [r4, #16]
    c554:	9105      	str	r1, [sp, #20]
    c556:	f001 fa0f 	bl	d978 <DmLlAddrType>
    c55a:	7c7a      	ldrb	r2, [r7, #17]
    c55c:	9203      	str	r2, [sp, #12]
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
    c55e:	3507      	adds	r5, #7
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
    c560:	7ea2      	ldrb	r2, [r4, #26]
    c562:	9202      	str	r2, [sp, #8]
    c564:	4603      	mov	r3, r0
    c566:	9905      	ldr	r1, [sp, #20]
    c568:	f8cd 9000 	str.w	r9, [sp]
    c56c:	9501      	str	r5, [sp, #4]
    c56e:	4632      	mov	r2, r6
    c570:	4640      	mov	r0, r8
    c572:	f00a f931 	bl	167d8 <HciLeSetAdvParamCmd>
  dmLegAdvCb.advType = advType;
    c576:	4b08      	ldr	r3, [pc, #32]	; (c598 <dmAdvActConfig+0x74>)
    c578:	701e      	strb	r6, [r3, #0]
}
    c57a:	b007      	add	sp, #28
    c57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
    c580:	4806      	ldr	r0, [pc, #24]	; (c59c <dmAdvActConfig+0x78>)
}
    c582:	b007      	add	sp, #28
    c584:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
    c588:	f012 b886 	b.w	1e698 <WsfTrace>
    c58c:	10003e98 	.word	0x10003e98
    c590:	00025abc 	.word	0x00025abc
    c594:	10003fa4 	.word	0x10003fa4
    c598:	10003ecc 	.word	0x10003ecc
    c59c:	00025ad8 	.word	0x00025ad8

0000c5a0 <dmAdvActSetData>:
{
    c5a0:	b538      	push	{r3, r4, r5, lr}
  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c5a2:	4d0b      	ldr	r5, [pc, #44]	; (c5d0 <dmAdvActSetData+0x30>)
{
    c5a4:	4604      	mov	r4, r0
  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c5a6:	7f69      	ldrb	r1, [r5, #29]
    c5a8:	480a      	ldr	r0, [pc, #40]	; (c5d4 <dmAdvActSetData+0x34>)
    c5aa:	f012 f875 	bl	1e698 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
    c5ae:	7f6b      	ldrb	r3, [r5, #29]
    c5b0:	b943      	cbnz	r3, c5c4 <dmAdvActSetData+0x24>
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
    c5b2:	79a3      	ldrb	r3, [r4, #6]
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
    c5b4:	79e0      	ldrb	r0, [r4, #7]
    c5b6:	f104 0108 	add.w	r1, r4, #8
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
    c5ba:	b923      	cbnz	r3, c5c6 <dmAdvActSetData+0x26>
}
    c5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
    c5c0:	f00a b8c8 	b.w	16754 <HciLeSetAdvDataCmd>
}
    c5c4:	bd38      	pop	{r3, r4, r5, pc}
    c5c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
    c5ca:	f00a ba11 	b.w	169f0 <HciLeSetScanRespDataCmd>
    c5ce:	bf00      	nop
    c5d0:	10003e98 	.word	0x10003e98
    c5d4:	00025b04 	.word	0x00025b04

0000c5d8 <dmAdvActStart>:
{
    c5d8:	b538      	push	{r3, r4, r5, lr}
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c5da:	4c0e      	ldr	r4, [pc, #56]	; (c614 <dmAdvActStart+0x3c>)
{
    c5dc:	4605      	mov	r5, r0
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c5de:	7f61      	ldrb	r1, [r4, #29]
    c5e0:	480d      	ldr	r0, [pc, #52]	; (c618 <dmAdvActStart+0x40>)
    c5e2:	f012 f859 	bl	1e698 <WsfTrace>
   if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
    c5e6:	7f63      	ldrb	r3, [r4, #29]
    c5e8:	b96b      	cbnz	r3, c606 <dmAdvActStart+0x2e>
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
    c5ea:	7e23      	ldrb	r3, [r4, #24]
    c5ec:	2b01      	cmp	r3, #1
    c5ee:	d00b      	beq.n	c608 <dmAdvActStart+0x30>
    c5f0:	2b04      	cmp	r3, #4
    c5f2:	d009      	beq.n	c608 <dmAdvActStart+0x30>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STARTING;
    c5f4:	2303      	movs	r3, #3
    c5f6:	7763      	strb	r3, [r4, #29]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = pMsg->apiStart.duration[DM_ADV_HANDLE_DEFAULT];
    c5f8:	892b      	ldrh	r3, [r5, #8]
    c5fa:	8423      	strh	r3, [r4, #32]
    HciLeSetAdvEnableCmd(TRUE);
    c5fc:	2001      	movs	r0, #1
}
    c5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HciLeSetAdvEnableCmd(TRUE);
    c602:	f00a b873 	b.w	166ec <HciLeSetAdvEnableCmd>
}
    c606:	bd38      	pop	{r3, r4, r5, pc}
    c608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      DM_TRACE_WARN0("dmAdvActStart during directed advertising!");
    c60c:	4803      	ldr	r0, [pc, #12]	; (c61c <dmAdvActStart+0x44>)
    c60e:	f012 b843 	b.w	1e698 <WsfTrace>
    c612:	bf00      	nop
    c614:	10003e98 	.word	0x10003e98
    c618:	00025b20 	.word	0x00025b20
    c61c:	00025b3c 	.word	0x00025b3c

0000c620 <dmAdvActStop>:
{
    c620:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvActStop: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c622:	4c0d      	ldr	r4, [pc, #52]	; (c658 <dmAdvActStop+0x38>)
    c624:	480d      	ldr	r0, [pc, #52]	; (c65c <dmAdvActStop+0x3c>)
    c626:	7f61      	ldrb	r1, [r4, #29]
    c628:	f012 f836 	bl	1e698 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
    c62c:	7f63      	ldrb	r3, [r4, #29]
    c62e:	2b01      	cmp	r3, #1
    c630:	d000      	beq.n	c634 <dmAdvActStop+0x14>
}
    c632:	bd10      	pop	{r4, pc}
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
    c634:	7e23      	ldrb	r3, [r4, #24]
    c636:	2b01      	cmp	r3, #1
    c638:	d008      	beq.n	c64c <dmAdvActStop+0x2c>
    c63a:	2b04      	cmp	r3, #4
    c63c:	d006      	beq.n	c64c <dmAdvActStop+0x2c>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
    c63e:	2305      	movs	r3, #5
    c640:	7763      	strb	r3, [r4, #29]
    HciLeSetAdvEnableCmd(FALSE);
    c642:	2000      	movs	r0, #0
}
    c644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HciLeSetAdvEnableCmd(FALSE);
    c648:	f00a b850 	b.w	166ec <HciLeSetAdvEnableCmd>
}
    c64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      DM_TRACE_WARN0("DmAdvStop during directed advertising!");
    c650:	4803      	ldr	r0, [pc, #12]	; (c660 <dmAdvActStop+0x40>)
    c652:	f012 b821 	b.w	1e698 <WsfTrace>
    c656:	bf00      	nop
    c658:	10003e98 	.word	0x10003e98
    c65c:	00025b68 	.word	0x00025b68
    c660:	00025b80 	.word	0x00025b80

0000c664 <dmAdvHciHandler>:
  if (pEvent->hdr.event == HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT)
    c664:	7883      	ldrb	r3, [r0, #2]
    c666:	2b35      	cmp	r3, #53	; 0x35
    c668:	d000      	beq.n	c66c <dmAdvHciHandler+0x8>
    c66a:	4770      	bx	lr
{
    c66c:	b570      	push	{r4, r5, r6, lr}
    DM_TRACE_INFO1("HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c66e:	4d38      	ldr	r5, [pc, #224]	; (c750 <dmAdvHciHandler+0xec>)
    c670:	4604      	mov	r4, r0
    c672:	7f69      	ldrb	r1, [r5, #29]
    c674:	4837      	ldr	r0, [pc, #220]	; (c754 <dmAdvHciHandler+0xf0>)
    c676:	f012 f80f 	bl	1e698 <WsfTrace>
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
    c67a:	7f69      	ldrb	r1, [r5, #29]
    c67c:	2903      	cmp	r1, #3
    c67e:	d910      	bls.n	c6a2 <dmAdvHciHandler+0x3e>
    c680:	1f0b      	subs	r3, r1, #4
    c682:	2b01      	cmp	r3, #1
    c684:	d80c      	bhi.n	c6a0 <dmAdvHciHandler+0x3c>
      if (pEvent->hdr.status == HCI_SUCCESS)
    c686:	78e6      	ldrb	r6, [r4, #3]
    c688:	bb06      	cbnz	r6, c6cc <dmAdvHciHandler+0x68>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)
    c68a:	2905      	cmp	r1, #5
    c68c:	d039      	beq.n	c702 <dmAdvHciHandler+0x9e>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
    c68e:	4633      	mov	r3, r6
    c690:	4632      	mov	r2, r6
    c692:	2122      	movs	r1, #34	; 0x22
    c694:	2015      	movs	r0, #21
    c696:	f001 f8a3 	bl	d7e0 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
    c69a:	23ff      	movs	r3, #255	; 0xff
    c69c:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
    c69e:	776e      	strb	r6, [r5, #29]
}
    c6a0:	bd70      	pop	{r4, r5, r6, pc}
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
    c6a2:	2901      	cmp	r1, #1
    c6a4:	d9fc      	bls.n	c6a0 <dmAdvHciHandler+0x3c>
      if (pEvent->hdr.status == HCI_SUCCESS)
    c6a6:	78e3      	ldrb	r3, [r4, #3]
    c6a8:	b96b      	cbnz	r3, c6c6 <dmAdvHciHandler+0x62>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)
    c6aa:	2903      	cmp	r1, #3
    c6ac:	d011      	beq.n	c6d2 <dmAdvHciHandler+0x6e>
    c6ae:	4e2a      	ldr	r6, [pc, #168]	; (c758 <dmAdvHciHandler+0xf4>)
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
    c6b0:	2300      	movs	r3, #0
    c6b2:	461a      	mov	r2, r3
    c6b4:	2121      	movs	r1, #33	; 0x21
    c6b6:	2014      	movs	r0, #20
    c6b8:	f001 f892 	bl	d7e0 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
    c6bc:	7832      	ldrb	r2, [r6, #0]
    c6be:	762a      	strb	r2, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
    c6c0:	2301      	movs	r3, #1
    c6c2:	776b      	strb	r3, [r5, #29]
}
    c6c4:	bd70      	pop	{r4, r5, r6, pc}
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
    c6c6:	2300      	movs	r3, #0
    c6c8:	776b      	strb	r3, [r5, #29]
}
    c6ca:	bd70      	pop	{r4, r5, r6, pc}
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
    c6cc:	2301      	movs	r3, #1
    c6ce:	776b      	strb	r3, [r5, #29]
}
    c6d0:	bd70      	pop	{r4, r5, r6, pc}
          if (dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] > 0)
    c6d2:	8c29      	ldrh	r1, [r5, #32]
    c6d4:	bbb1      	cbnz	r1, c744 <dmAdvHciHandler+0xe0>
          if (dmLegAdvCb.advType != DM_ADV_CONN_DIRECT_LO_DUTY)
    c6d6:	4e20      	ldr	r6, [pc, #128]	; (c758 <dmAdvHciHandler+0xf4>)
    c6d8:	7833      	ldrb	r3, [r6, #0]
    c6da:	2b04      	cmp	r3, #4
    c6dc:	d0e8      	beq.n	c6b0 <dmAdvHciHandler+0x4c>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
    c6de:	2300      	movs	r3, #0
    c6e0:	461a      	mov	r2, r3
    c6e2:	2121      	movs	r1, #33	; 0x21
    c6e4:	2014      	movs	r0, #20
    c6e6:	f001 f87b 	bl	d7e0 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
    c6ea:	7832      	ldrb	r2, [r6, #0]
    c6ec:	762a      	strb	r2, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
    c6ee:	2301      	movs	r3, #1
    c6f0:	776b      	strb	r3, [r5, #29]
            cbackEvent = DM_ADV_START_IND;
    c6f2:	2221      	movs	r2, #33	; 0x21
      (*dmCb.cback)((dmEvt_t *) pEvent);
    c6f4:	4b19      	ldr	r3, [pc, #100]	; (c75c <dmAdvHciHandler+0xf8>)
      pEvent->hdr.event = cbackEvent;
    c6f6:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
    c6f8:	4620      	mov	r0, r4
    c6fa:	689b      	ldr	r3, [r3, #8]
}
    c6fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      (*dmCb.cback)((dmEvt_t *) pEvent);
    c700:	4718      	bx	r3
          WsfTimerStop(&dmAdvCb.advTimer);
    c702:	4628      	mov	r0, r5
    c704:	f011 ff28 	bl	1e558 <WsfTimerStop>
          if (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT_LO_DUTY)
    c708:	4b13      	ldr	r3, [pc, #76]	; (c758 <dmAdvHciHandler+0xf4>)
    c70a:	781b      	ldrb	r3, [r3, #0]
    c70c:	2b04      	cmp	r3, #4
    c70e:	d00a      	beq.n	c726 <dmAdvHciHandler+0xc2>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
    c710:	4633      	mov	r3, r6
    c712:	4632      	mov	r2, r6
    c714:	2122      	movs	r1, #34	; 0x22
    c716:	2015      	movs	r0, #21
    c718:	f001 f862 	bl	d7e0 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
    c71c:	23ff      	movs	r3, #255	; 0xff
    c71e:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
    c720:	776e      	strb	r6, [r5, #29]
            cbackEvent = DM_ADV_STOP_IND;
    c722:	2222      	movs	r2, #34	; 0x22
    c724:	e7e6      	b.n	c6f4 <dmAdvHciHandler+0x90>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
    c726:	4633      	mov	r3, r6
    c728:	2122      	movs	r1, #34	; 0x22
    c72a:	2015      	movs	r0, #21
    c72c:	4632      	mov	r2, r6
    c72e:	f001 f857 	bl	d7e0 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
    c732:	23ff      	movs	r3, #255	; 0xff
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
    c734:	4630      	mov	r0, r6
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
    c736:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
    c738:	776e      	strb	r6, [r5, #29]
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
    c73a:	213c      	movs	r1, #60	; 0x3c
}
    c73c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
    c740:	f7ff bde6 	b.w	c310 <dmAdvGenConnCmpl>
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
    c744:	2307      	movs	r3, #7
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
    c746:	4628      	mov	r0, r5
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
    c748:	72ab      	strb	r3, [r5, #10]
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
    c74a:	f011 fec1 	bl	1e4d0 <WsfTimerStartMs>
    c74e:	e7c2      	b.n	c6d6 <dmAdvHciHandler+0x72>
    c750:	10003e98 	.word	0x10003e98
    c754:	00025ba8 	.word	0x00025ba8
    c758:	10003ecc 	.word	0x10003ecc
    c75c:	10003fa4 	.word	0x10003fa4

0000c760 <dmAdvActClearSets>:
    c760:	4770      	bx	lr
    c762:	bf00      	nop

0000c764 <dmAdvActSetRandAddr>:
    c764:	4770      	bx	lr
    c766:	bf00      	nop

0000c768 <dmAdvActTimeout>:
{
    c768:	b508      	push	{r3, lr}
  DM_TRACE_INFO0("dmAdvActTimeout!");
    c76a:	4807      	ldr	r0, [pc, #28]	; (c788 <dmAdvActTimeout+0x20>)
    c76c:	f011 ff94 	bl	1e698 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
    c770:	4b06      	ldr	r3, [pc, #24]	; (c78c <dmAdvActTimeout+0x24>)
    c772:	7f5a      	ldrb	r2, [r3, #29]
    c774:	2a01      	cmp	r2, #1
    c776:	d000      	beq.n	c77a <dmAdvActTimeout+0x12>
}
    c778:	bd08      	pop	{r3, pc}
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
    c77a:	2205      	movs	r2, #5
    c77c:	775a      	strb	r2, [r3, #29]
}
    c77e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HciLeSetAdvEnableCmd(FALSE);
    c782:	2000      	movs	r0, #0
    c784:	f009 bfb2 	b.w	166ec <HciLeSetAdvEnableCmd>
    c788:	00025bd8 	.word	0x00025bd8
    c78c:	10003e98 	.word	0x10003e98

0000c790 <dmAdvStartDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStartDirected(uint8_t advType, uint16_t duration, uint8_t addrType, uint8_t *pAddr)
{
    c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c794:	4c0f      	ldr	r4, [pc, #60]	; (c7d4 <dmAdvStartDirected+0x44>)
{
    c796:	4607      	mov	r7, r0
    c798:	4688      	mov	r8, r1
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c79a:	480f      	ldr	r0, [pc, #60]	; (c7d8 <dmAdvStartDirected+0x48>)
    c79c:	7f61      	ldrb	r1, [r4, #29]
{
    c79e:	461e      	mov	r6, r3
    c7a0:	4615      	mov	r5, r2
  DM_TRACE_INFO1("dmAdvStartDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c7a2:	f011 ff79 	bl	1e698 <WsfTrace>

  /* if not advertising */
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
    c7a6:	7f63      	ldrb	r3, [r4, #29]
    c7a8:	b10b      	cbz	r3, c7ae <dmAdvStartDirected+0x1e>

    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = duration;
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
    dmAdvCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = addrType;
  }
}
    c7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HciLeSetAdvEnableCmd(TRUE);
    c7ae:	2001      	movs	r0, #1
    c7b0:	f009 ff9c 	bl	166ec <HciLeSetAdvEnableCmd>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (advType == DM_ADV_CONN_DIRECT) ? \
    c7b4:	2f01      	cmp	r7, #1
    c7b6:	bf0c      	ite	eq
    c7b8:	2302      	moveq	r3, #2
    c7ba:	2303      	movne	r3, #3
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
    c7bc:	4631      	mov	r1, r6
    c7be:	f104 0025 	add.w	r0, r4, #37	; 0x25
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (advType == DM_ADV_CONN_DIRECT) ? \
    c7c2:	7763      	strb	r3, [r4, #29]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = duration;
    c7c4:	f8a4 8020 	strh.w	r8, [r4, #32]
    BdaCpy(dmAdvCb.peerAddr[DM_ADV_HANDLE_DEFAULT], pAddr);
    c7c8:	f009 f878 	bl	158bc <BdaCpy>
    dmAdvCb.peerAddrType[DM_ADV_HANDLE_DEFAULT] = addrType;
    c7cc:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
}
    c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7d4:	10003e98 	.word	0x10003e98
    c7d8:	00025bec 	.word	0x00025bec

0000c7dc <dmAdvStopDirected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvStopDirected(void)
{
    c7dc:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvStopDirected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c7de:	4c0b      	ldr	r4, [pc, #44]	; (c80c <dmAdvStopDirected+0x30>)
    c7e0:	480b      	ldr	r0, [pc, #44]	; (c810 <dmAdvStopDirected+0x34>)
    c7e2:	7f61      	ldrb	r1, [r4, #29]
    c7e4:	f011 ff58 	bl	1e698 <WsfTrace>

  /* if advertising or starting advertising */
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) ||
    c7e8:	7f63      	ldrb	r3, [r4, #29]
    c7ea:	3b01      	subs	r3, #1
    c7ec:	2b02      	cmp	r3, #2
    c7ee:	d900      	bls.n	c7f2 <dmAdvStopDirected+0x16>
    /* disable advertising */
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT) ? \
                                              DM_ADV_STATE_STOPPING_DIRECTED : DM_ADV_STATE_STOPPING;
    HciLeSetAdvEnableCmd(FALSE);
  }
}
    c7f0:	bd10      	pop	{r4, pc}
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT) ? \
    c7f2:	4b08      	ldr	r3, [pc, #32]	; (c814 <dmAdvStopDirected+0x38>)
    c7f4:	781b      	ldrb	r3, [r3, #0]
    c7f6:	2b01      	cmp	r3, #1
    c7f8:	bf0c      	ite	eq
    c7fa:	2304      	moveq	r3, #4
    c7fc:	2305      	movne	r3, #5
    c7fe:	7763      	strb	r3, [r4, #29]
    HciLeSetAdvEnableCmd(FALSE);
    c800:	2000      	movs	r0, #0
}
    c802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HciLeSetAdvEnableCmd(FALSE);
    c806:	f009 bf71 	b.w	166ec <HciLeSetAdvEnableCmd>
    c80a:	bf00      	nop
    c80c:	10003e98 	.word	0x10003e98
    c810:	00025c0c 	.word	0x00025c0c
    c814:	10003ecc 	.word	0x10003ecc

0000c818 <dmAdvConnected>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnected(void)
{
    c818:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvConnected: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c81a:	4c09      	ldr	r4, [pc, #36]	; (c840 <dmAdvConnected+0x28>)
    c81c:	4809      	ldr	r0, [pc, #36]	; (c844 <dmAdvConnected+0x2c>)
    c81e:	7f61      	ldrb	r1, [r4, #29]
    c820:	f011 ff3a 	bl	1e698 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
    c824:	4620      	mov	r0, r4
    c826:	f011 fe97 	bl	1e558 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
    c82a:	2300      	movs	r3, #0
    c82c:	461a      	mov	r2, r3
    c82e:	2122      	movs	r1, #34	; 0x22
    c830:	2015      	movs	r0, #21
    c832:	f000 ffd5 	bl	d7e0 <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
    c836:	22ff      	movs	r2, #255	; 0xff
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
    c838:	2300      	movs	r3, #0
  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
    c83a:	7622      	strb	r2, [r4, #24]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
    c83c:	7763      	strb	r3, [r4, #29]
}
    c83e:	bd10      	pop	{r4, pc}
    c840:	10003e98 	.word	0x10003e98
    c844:	00025c2c 	.word	0x00025c2c

0000c848 <dmAdvConnectFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvConnectFailed(void)
{
    c848:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvConnectFailed: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
    c84a:	4c09      	ldr	r4, [pc, #36]	; (c870 <dmAdvConnectFailed+0x28>)
    c84c:	4809      	ldr	r0, [pc, #36]	; (c874 <dmAdvConnectFailed+0x2c>)
    c84e:	7f61      	ldrb	r1, [r4, #29]
    c850:	f011 ff22 	bl	1e698 <WsfTrace>

  WsfTimerStop(&dmAdvCb.advTimer);
    c854:	4620      	mov	r0, r4
    c856:	f011 fe7f 	bl	1e558 <WsfTimerStop>

  /* pass advertising stop event to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
    c85a:	2300      	movs	r3, #0
    c85c:	461a      	mov	r2, r3
    c85e:	2122      	movs	r1, #34	; 0x22
    c860:	2015      	movs	r0, #21
    c862:	f000 ffbd 	bl	d7e0 <dmDevPassEvtToDevPriv>

  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
    c866:	22ff      	movs	r2, #255	; 0xff
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
    c868:	2300      	movs	r3, #0
  dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
    c86a:	7622      	strb	r2, [r4, #24]
  dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
    c86c:	7763      	strb	r3, [r4, #29]
}
    c86e:	bd10      	pop	{r4, pc}
    c870:	10003e98 	.word	0x10003e98
    c874:	00025c48 	.word	0x00025c48

0000c878 <DmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvInit(void)
{
    c878:	b508      	push	{r3, lr}
  WsfTaskLock();
    c87a:	f011 fbcf 	bl	1e01c <WsfTaskLock>

  /* set function interface table */
  dmFcnIfTbl[DM_ID_ADV] = (dmFcnIf_t *) &dmAdvFcnIf;
    c87e:	4b07      	ldr	r3, [pc, #28]	; (c89c <DmAdvInit+0x24>)
    c880:	4a07      	ldr	r2, [pc, #28]	; (c8a0 <DmAdvInit+0x28>)
    c882:	601a      	str	r2, [r3, #0]

  /* initialize legacy adv module */
  dmAdvInit();
    c884:	f7ff fd26 	bl	c2d4 <dmAdvInit>

  /* clear set advertising set random address callback */
  dmDevCb.advSetRandAddrCback = NULL;
    c888:	4b06      	ldr	r3, [pc, #24]	; (c8a4 <DmAdvInit+0x2c>)
    c88a:	2000      	movs	r0, #0
    c88c:	6018      	str	r0, [r3, #0]

  /* initialize HCI VS module */
  HciVsInit(0);
    c88e:	f00c ffd3 	bl	19838 <HciVsInit>

  WsfTaskUnlock();
}
    c892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WsfTaskUnlock();
    c896:	f011 bbcb 	b.w	1e030 <WsfTaskUnlock>
    c89a:	bf00      	nop
    c89c:	10002b00 	.word	0x10002b00
    c8a0:	00025c88 	.word	0x00025c88
    c8a4:	10003fa0 	.word	0x10003fa0

0000c8a8 <dmConnSmActNone>:
 */
/*************************************************************************************************/
void dmConnSmActNone(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  return;
}
    c8a8:	4770      	bx	lr
    c8aa:	bf00      	nop

0000c8ac <dmConnSmActHciUpdated>:
/*************************************************************************************************/
void dmConnSmActHciUpdated(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  /* call callback */
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
    c8ac:	4b03      	ldr	r3, [pc, #12]	; (c8bc <dmConnSmActHciUpdated+0x10>)
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
    c8ae:	2229      	movs	r2, #41	; 0x29
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
    c8b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
    c8b4:	708a      	strb	r2, [r1, #2]
{
    c8b6:	4608      	mov	r0, r1
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
    c8b8:	4718      	bx	r3
    c8ba:	bf00      	nop
    c8bc:	10003ed0 	.word	0x10003ed0

0000c8c0 <dmConnSmActClose>:
  HciDisconnectCmd(pCcb->handle, pMsg->apiClose.reason);
    c8c0:	8980      	ldrh	r0, [r0, #12]
    c8c2:	7909      	ldrb	r1, [r1, #4]
    c8c4:	f009 bac0 	b.w	15e48 <HciDisconnectCmd>

0000c8c8 <dmConnSmActConnFailed>:
{
    c8c8:	b570      	push	{r4, r5, r6, lr}
    c8ca:	4604      	mov	r4, r0
    c8cc:	460d      	mov	r5, r1
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
    c8ce:	4817      	ldr	r0, [pc, #92]	; (c92c <dmConnSmActConnFailed+0x64>)
    c8d0:	7c21      	ldrb	r1, [r4, #16]
    c8d2:	f011 fee1 	bl	1e698 <WsfTrace>
  if (pCcb->role == DM_ROLE_MASTER)
    c8d6:	7e63      	ldrb	r3, [r4, #25]
  pCcb->inUse = FALSE;
    c8d8:	2200      	movs	r2, #0
    c8da:	75a2      	strb	r2, [r4, #22]
  if (pCcb->role == DM_ROLE_MASTER)
    c8dc:	b17b      	cbz	r3, c8fe <dmConnSmActConnFailed+0x36>
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
    c8de:	4c14      	ldr	r4, [pc, #80]	; (c930 <dmConnSmActConnFailed+0x68>)
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
    c8e0:	2300      	movs	r3, #0
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
    c8e2:	2228      	movs	r2, #40	; 0x28
    c8e4:	70aa      	strb	r2, [r5, #2]
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
    c8e6:	722b      	strb	r3, [r5, #8]
    c8e8:	80eb      	strh	r3, [r5, #6]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
    c8ea:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
    c8ee:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
    c8f2:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
    c8f4:	b103      	cbz	r3, c8f8 <dmConnSmActConnFailed+0x30>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
    c8f6:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
    c8f8:	42a6      	cmp	r6, r4
    c8fa:	d1f8      	bne.n	c8ee <dmConnSmActConnFailed+0x26>
}
    c8fc:	bd70      	pop	{r4, r5, r6, pc}
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
    c8fe:	461a      	mov	r2, r3
    c900:	2101      	movs	r1, #1
    c902:	2016      	movs	r0, #22
    c904:	f000 ff6c 	bl	d7e0 <dmDevPassEvtToDevPriv>
    if (pCcb->inUse)
    c908:	4b0a      	ldr	r3, [pc, #40]	; (c934 <dmConnSmActConnFailed+0x6c>)
    c90a:	7d9a      	ldrb	r2, [r3, #22]
    c90c:	2a00      	cmp	r2, #0
    c90e:	d1e6      	bne.n	c8de <dmConnSmActConnFailed+0x16>
    c910:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    c914:	2a00      	cmp	r2, #0
    c916:	d1e2      	bne.n	c8de <dmConnSmActConnFailed+0x16>
    c918:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    c91c:	2b00      	cmp	r3, #0
    c91e:	d1de      	bne.n	c8de <dmConnSmActConnFailed+0x16>
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0 , 0);
    c920:	461a      	mov	r2, r3
    c922:	2128      	movs	r1, #40	; 0x28
    c924:	2015      	movs	r0, #21
    c926:	f000 ff5b 	bl	d7e0 <dmDevPassEvtToDevPriv>
    c92a:	e7d8      	b.n	c8de <dmConnSmActConnFailed+0x16>
    c92c:	00025c94 	.word	0x00025c94
    c930:	10003f60 	.word	0x10003f60
    c934:	10003ed0 	.word	0x10003ed0

0000c938 <dmConnSmActConnOpened>:
{
    c938:	b570      	push	{r4, r5, r6, lr}
    c93a:	460d      	mov	r5, r1
    c93c:	4604      	mov	r4, r0
  BdaCpy(pCcb->peerAddr, pMsg->hciLeConnCmpl.peerAddr);
    c93e:	310a      	adds	r1, #10
    c940:	f008 ffbc 	bl	158bc <BdaCpy>
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
    c944:	88eb      	ldrh	r3, [r5, #6]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
    c946:	7a68      	ldrb	r0, [r5, #9]
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
    c948:	81a3      	strh	r3, [r4, #12]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
    c94a:	f001 f821 	bl	d990 <DmHostAddrType>
    c94e:	74e0      	strb	r0, [r4, #19]
  pCcb->role = pMsg->hciLeConnCmpl.role;
    c950:	7a2b      	ldrb	r3, [r5, #8]
    c952:	7663      	strb	r3, [r4, #25]
  if (pCcb->role == DM_ROLE_MASTER)
    c954:	bb7b      	cbnz	r3, c9b6 <dmConnSmActConnOpened+0x7e>
    pCcb->localAddrType = dmCb.connAddrType;
    c956:	4b29      	ldr	r3, [pc, #164]	; (c9fc <dmConnSmActConnOpened+0xc4>)
    c958:	7b5b      	ldrb	r3, [r3, #13]
    c95a:	7523      	strb	r3, [r4, #20]
  if (pCcb->localAddrType == DM_ADDR_PUBLIC)
    c95c:	bb33      	cbnz	r3, c9ac <dmConnSmActConnOpened+0x74>
    BdaCpy(pCcb->localAddr, HciGetBdAddr());
    c95e:	f00b f81d 	bl	1799c <HciGetBdAddr>
    c962:	4601      	mov	r1, r0
    c964:	1da0      	adds	r0, r4, #6
    c966:	f008 ffa9 	bl	158bc <BdaCpy>
  BdaCpy(pCcb->localRpa, pMsg->hciLeConnCmpl.localRpa);
    c96a:	f105 0117 	add.w	r1, r5, #23
    c96e:	f104 001a 	add.w	r0, r4, #26
    c972:	f008 ffa3 	bl	158bc <BdaCpy>
  BdaCpy(pCcb->peerRpa, pMsg->hciLeConnCmpl.peerRpa);
    c976:	f105 011d 	add.w	r1, r5, #29
    c97a:	f104 0020 	add.w	r0, r4, #32
    c97e:	f008 ff9d 	bl	158bc <BdaCpy>
  if (pCcb->role == DM_ROLE_MASTER)
    c982:	7e63      	ldrb	r3, [r4, #25]
  pCcb->idleMask = 0;
    c984:	2200      	movs	r2, #0
    c986:	81e2      	strh	r2, [r4, #14]
  if (pCcb->role == DM_ROLE_MASTER)
    c988:	b1c3      	cbz	r3, c9bc <dmConnSmActConnOpened+0x84>
  dmDevPassEvtToConnCte(DM_CONN_OPEN_IND, pCcb->connId);
    c98a:	7c21      	ldrb	r1, [r4, #16]
    c98c:	4c1c      	ldr	r4, [pc, #112]	; (ca00 <dmConnSmActConnOpened+0xc8>)
    c98e:	2027      	movs	r0, #39	; 0x27
    c990:	f000 ff46 	bl	d820 <dmDevPassEvtToConnCte>
  pMsg->hdr.event = DM_CONN_OPEN_IND;
    c994:	2327      	movs	r3, #39	; 0x27
    c996:	70ab      	strb	r3, [r5, #2]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
    c998:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
    c99c:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
    c9a0:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
    c9a2:	b103      	cbz	r3, c9a6 <dmConnSmActConnOpened+0x6e>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
    c9a4:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
    c9a6:	42a6      	cmp	r6, r4
    c9a8:	d1f8      	bne.n	c99c <dmConnSmActConnOpened+0x64>
}
    c9aa:	bd70      	pop	{r4, r5, r6, pc}
    BdaCpy(pCcb->localAddr, dmCb.localAddr);
    c9ac:	4913      	ldr	r1, [pc, #76]	; (c9fc <dmConnSmActConnOpened+0xc4>)
    c9ae:	1da0      	adds	r0, r4, #6
    c9b0:	f008 ff84 	bl	158bc <BdaCpy>
    c9b4:	e7d9      	b.n	c96a <dmConnSmActConnOpened+0x32>
    pCcb->localAddrType = dmCb.advAddrType;
    c9b6:	4b11      	ldr	r3, [pc, #68]	; (c9fc <dmConnSmActConnOpened+0xc4>)
    c9b8:	7b9b      	ldrb	r3, [r3, #14]
    c9ba:	e7ce      	b.n	c95a <dmConnSmActConnOpened+0x22>
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0 , 0);
    c9bc:	461a      	mov	r2, r3
    c9be:	2101      	movs	r1, #1
    c9c0:	2016      	movs	r0, #22
    c9c2:	f000 ff0d 	bl	d7e0 <dmDevPassEvtToDevPriv>
    if (pCcb->inUse)
    c9c6:	4b0f      	ldr	r3, [pc, #60]	; (ca04 <dmConnSmActConnOpened+0xcc>)
    c9c8:	7d9a      	ldrb	r2, [r3, #22]
    c9ca:	b172      	cbz	r2, c9ea <dmConnSmActConnOpened+0xb2>
    c9cc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    c9d0:	2a00      	cmp	r2, #0
    c9d2:	d1da      	bne.n	c98a <dmConnSmActConnOpened+0x52>
    c9d4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d1d6      	bne.n	c98a <dmConnSmActConnOpened+0x52>
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_CONN_OPEN_IND, 0, 0);
    c9dc:	2300      	movs	r3, #0
    c9de:	461a      	mov	r2, r3
    c9e0:	2127      	movs	r1, #39	; 0x27
    c9e2:	2014      	movs	r0, #20
    c9e4:	f000 fefc 	bl	d7e0 <dmDevPassEvtToDevPriv>
    c9e8:	e7cf      	b.n	c98a <dmConnSmActConnOpened+0x52>
    if (pCcb->inUse)
    c9ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    c9ee:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    c9f2:	2a00      	cmp	r2, #0
    c9f4:	d1f0      	bne.n	c9d8 <dmConnSmActConnOpened+0xa0>
    c9f6:	2b00      	cmp	r3, #0
    c9f8:	d1f0      	bne.n	c9dc <dmConnSmActConnOpened+0xa4>
    c9fa:	e7c6      	b.n	c98a <dmConnSmActConnOpened+0x52>
    c9fc:	10003fa4 	.word	0x10003fa4
    ca00:	10003f60 	.word	0x10003f60
    ca04:	10003ed0 	.word	0x10003ed0

0000ca08 <dmConnSmActConnClosed>:
{
    ca08:	b570      	push	{r4, r5, r6, lr}
    ca0a:	4604      	mov	r4, r0
    ca0c:	460d      	mov	r5, r1
  dmDevPassEvtToConnCte(DM_CONN_CLOSE_IND, pCcb->connId);
    ca0e:	2028      	movs	r0, #40	; 0x28
    ca10:	7c21      	ldrb	r1, [r4, #16]
    ca12:	f000 ff05 	bl	d820 <dmDevPassEvtToConnCte>
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
    ca16:	7c21      	ldrb	r1, [r4, #16]
    ca18:	4812      	ldr	r0, [pc, #72]	; (ca64 <dmConnSmActConnClosed+0x5c>)
    ca1a:	f011 fe3d 	bl	1e698 <WsfTrace>
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
    ca1e:	7e63      	ldrb	r3, [r4, #25]
  pCcb->inUse = FALSE;
    ca20:	2200      	movs	r2, #0
    ca22:	75a2      	strb	r2, [r4, #22]
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
    ca24:	b913      	cbnz	r3, ca2c <dmConnSmActConnClosed+0x24>
    if (pCcb->inUse)
    ca26:	4b10      	ldr	r3, [pc, #64]	; (ca68 <dmConnSmActConnClosed+0x60>)
    ca28:	7d9a      	ldrb	r2, [r3, #22]
    ca2a:	b162      	cbz	r2, ca46 <dmConnSmActConnClosed+0x3e>
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
    ca2c:	4c0f      	ldr	r4, [pc, #60]	; (ca6c <dmConnSmActConnClosed+0x64>)
    ca2e:	2328      	movs	r3, #40	; 0x28
    ca30:	70ab      	strb	r3, [r5, #2]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
    ca32:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
    ca36:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
    ca3a:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
    ca3c:	b103      	cbz	r3, ca40 <dmConnSmActConnClosed+0x38>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
    ca3e:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
    ca40:	42b4      	cmp	r4, r6
    ca42:	d1f8      	bne.n	ca36 <dmConnSmActConnClosed+0x2e>
}
    ca44:	bd70      	pop	{r4, r5, r6, pc}
    if (pCcb->inUse)
    ca46:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    ca4a:	2a00      	cmp	r2, #0
    ca4c:	d1ee      	bne.n	ca2c <dmConnSmActConnClosed+0x24>
    ca4e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    ca52:	2b00      	cmp	r3, #0
    ca54:	d1ea      	bne.n	ca2c <dmConnSmActConnClosed+0x24>
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0, 0);
    ca56:	461a      	mov	r2, r3
    ca58:	2128      	movs	r1, #40	; 0x28
    ca5a:	2015      	movs	r0, #21
    ca5c:	f000 fec0 	bl	d7e0 <dmDevPassEvtToDevPriv>
    ca60:	e7e4      	b.n	ca2c <dmConnSmActConnClosed+0x24>
    ca62:	bf00      	nop
    ca64:	00025c94 	.word	0x00025c94
    ca68:	10003ed0 	.word	0x10003ed0
    ca6c:	10003f60 	.word	0x10003f60

0000ca70 <dmConnMsgHandler>:
void dmConnMsgHandler(wsfMsgHdr_t *pMsg)
{
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
    ca70:	8803      	ldrh	r3, [r0, #0]
{
    ca72:	b410      	push	{r4}
  connId--;
    ca74:	3b01      	subs	r3, #1
  if (dmConnCb.ccb[connId].inUse)
    ca76:	4c0a      	ldr	r4, [pc, #40]	; (caa0 <dmConnMsgHandler+0x30>)
  connId--;
    ca78:	b2db      	uxtb	r3, r3
  if (dmConnCb.ccb[connId].inUse)
    ca7a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    ca7e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
    ca82:	7d92      	ldrb	r2, [r2, #22]
    ca84:	b142      	cbz	r2, ca98 <dmConnMsgHandler+0x28>
    return &dmConnCb.ccb[connId];
    ca86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ca8a:	4601      	mov	r1, r0
  {
    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
    ca8c:	eb04 1003 	add.w	r0, r4, r3, lsl #4
  }
}
    ca90:	f85d 4b04 	ldr.w	r4, [sp], #4
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
    ca94:	f000 be3c 	b.w	d710 <dmConnSmExecute>
}
    ca98:	f85d 4b04 	ldr.w	r4, [sp], #4
    ca9c:	4770      	bx	lr
    ca9e:	bf00      	nop
    caa0:	10003ed0 	.word	0x10003ed0

0000caa4 <dmConn2MsgHandler>:
void dmConn2MsgHandler(wsfMsgHdr_t *pMsg)
{
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
    caa4:	8803      	ldrh	r3, [r0, #0]
{
    caa6:	b530      	push	{r4, r5, lr}
  connId--;
    caa8:	3b01      	subs	r3, #1
  if (dmConnCb.ccb[connId].inUse)
    caaa:	4c26      	ldr	r4, [pc, #152]	; (cb44 <dmConn2MsgHandler+0xa0>)
    caac:	b2db      	uxtb	r3, r3
    caae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    cab2:	eb04 1202 	add.w	r2, r4, r2, lsl #4
{
    cab6:	b085      	sub	sp, #20
  if (dmConnCb.ccb[connId].inUse)
    cab8:	7d92      	ldrb	r2, [r2, #22]
    caba:	b1ca      	cbz	r2, caf0 <dmConn2MsgHandler+0x4c>
    cabc:	4601      	mov	r1, r0
    cabe:	0058      	lsls	r0, r3, #1
  {
    dmConn2Msg_t *pConn2Msg = (dmConn2Msg_t *) pMsg;

    /* handle incoming message */
    switch (pMsg->event)
    cac0:	788a      	ldrb	r2, [r1, #2]
    cac2:	3a41      	subs	r2, #65	; 0x41
    cac4:	2a04      	cmp	r2, #4
    cac6:	d813      	bhi.n	caf0 <dmConn2MsgHandler+0x4c>
    cac8:	e8df f002 	tbb	[pc, r2]
    cacc:	3127031e 	.word	0x3127031e
    cad0:	14          	.byte	0x14
    cad1:	00          	.byte	0x00

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY:
        {
          hciConnSpec_t *pConnSpec = &pConn2Msg->apiRemConnParamReqReply.connSpec;

          HciLeRemoteConnParamReqReply(pCcb->handle, pConnSpec->connIntervalMin,
    cad2:	4403      	add	r3, r0
    cad4:	898a      	ldrh	r2, [r1, #12]
    cad6:	89cd      	ldrh	r5, [r1, #14]
    cad8:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    cadc:	894c      	ldrh	r4, [r1, #10]
    cade:	8998      	ldrh	r0, [r3, #12]
    cae0:	e9cd 2501 	strd	r2, r5, [sp, #4]
    cae4:	890b      	ldrh	r3, [r1, #8]
    cae6:	88ca      	ldrh	r2, [r1, #6]
    cae8:	8889      	ldrh	r1, [r1, #4]
    caea:	9400      	str	r4, [sp, #0]
    caec:	f009 fad6 	bl	1609c <HciLeRemoteConnParamReqReply>
      default:
        /* should never get here */
        break;
    }
  }
}
    caf0:	b005      	add	sp, #20
    caf2:	bd30      	pop	{r4, r5, pc}
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
    caf4:	4418      	add	r0, r3
    caf6:	eb04 1300 	add.w	r3, r4, r0, lsl #4
    cafa:	8889      	ldrh	r1, [r1, #4]
    cafc:	8998      	ldrh	r0, [r3, #12]
}
    cafe:	b005      	add	sp, #20
    cb00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
    cb04:	f00a b952 	b.w	16dac <HciWriteAuthPayloadTimeout>
        HciReadRssiCmd(pCcb->handle);
    cb08:	4403      	add	r3, r0
    cb0a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    cb0e:	8998      	ldrh	r0, [r3, #12]
}
    cb10:	b005      	add	sp, #20
    cb12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciReadRssiCmd(pCcb->handle);
    cb16:	f00a b85b 	b.w	16bd0 <HciReadRssiCmd>
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
    cb1a:	4403      	add	r3, r0
    cb1c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    cb20:	7909      	ldrb	r1, [r1, #4]
    cb22:	8998      	ldrh	r0, [r3, #12]
}
    cb24:	b005      	add	sp, #20
    cb26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
    cb2a:	f009 bb13 	b.w	16154 <HciLeRemoteConnParamReqNegReply>
          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
    cb2e:	4403      	add	r3, r0
    cb30:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    cb34:	88ca      	ldrh	r2, [r1, #6]
    cb36:	8998      	ldrh	r0, [r3, #12]
    cb38:	8889      	ldrh	r1, [r1, #4]
}
    cb3a:	b005      	add	sp, #20
    cb3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
    cb40:	f009 bb40 	b.w	161c4 <HciLeSetDataLen>
    cb44:	10003ed0 	.word	0x10003ed0

0000cb48 <dmConn2HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2HciHandler(hciEvt_t *pEvent)
{
    cb48:	b510      	push	{r4, lr}
    if (pCcb->inUse && (pCcb->handle == handle))
    cb4a:	4c66      	ldr	r4, [pc, #408]	; (cce4 <dmConn2HciHandler+0x19c>)
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
    cb4c:	8801      	ldrh	r1, [r0, #0]
    if (pCcb->inUse && (pCcb->handle == handle))
    cb4e:	7da2      	ldrb	r2, [r4, #22]
{
    cb50:	b084      	sub	sp, #16
    cb52:	4603      	mov	r3, r0
    if (pCcb->inUse && (pCcb->handle == handle))
    cb54:	b112      	cbz	r2, cb5c <dmConn2HciHandler+0x14>
    cb56:	89a0      	ldrh	r0, [r4, #12]
    cb58:	4281      	cmp	r1, r0
    cb5a:	d014      	beq.n	cb86 <dmConn2HciHandler+0x3e>
    cb5c:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
    cb60:	b11a      	cbz	r2, cb6a <dmConn2HciHandler+0x22>
    cb62:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    cb64:	4281      	cmp	r1, r0
    cb66:	f000 80b9 	beq.w	ccdc <dmConn2HciHandler+0x194>
    cb6a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
    cb6e:	b122      	cbz	r2, cb7a <dmConn2HciHandler+0x32>
    cb70:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    cb74:	4281      	cmp	r1, r0
    cb76:	f000 80b3 	beq.w	cce0 <dmConn2HciHandler+0x198>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
    cb7a:	485b      	ldr	r0, [pc, #364]	; (cce8 <dmConn2HciHandler+0x1a0>)
      default:
        /* should never get here */
        break;
    }
  }
}
    cb7c:	b004      	add	sp, #16
    cb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
    cb82:	f011 bd89 	b.w	1e698 <WsfTrace>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
    cb86:	4621      	mov	r1, r4
    switch (pEvent->hdr.event)
    cb88:	789a      	ldrb	r2, [r3, #2]
    cb8a:	3a07      	subs	r2, #7
    cb8c:	2a21      	cmp	r2, #33	; 0x21
    cb8e:	d82b      	bhi.n	cbe8 <dmConn2HciHandler+0xa0>
    cb90:	e8df f002 	tbb	[pc, r2]
    cb94:	752a2a8e 	.word	0x752a2a8e
    cb98:	2a2a2a51 	.word	0x2a2a2a51
    cb9c:	2a2a2a2a 	.word	0x2a2a2a2a
    cba0:	2a2a2a2a 	.word	0x2a2a2a2a
    cba4:	2a2a2a2a 	.word	0x2a2a2a2a
    cba8:	2a2a2a2a 	.word	0x2a2a2a2a
    cbac:	2a2a2a2a 	.word	0x2a2a2a2a
    cbb0:	2a2a114c 	.word	0x2a2a114c
    cbb4:	2c3a      	.short	0x2c3a
{
  hciLeDataLenChangeEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
  evt.hdr.param = pCcb->connId;
    cbb6:	7c09      	ldrb	r1, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;
  evt.handle = pCcb->handle;
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
    cbb8:	f8b3 c006 	ldrh.w	ip, [r3, #6]
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
    cbbc:	2241      	movs	r2, #65	; 0x41
    cbbe:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.hdr.param = pCcb->connId;
    cbc2:	f8ad 1000 	strh.w	r1, [sp]
  evt.handle = pCcb->handle;
    cbc6:	f8ad 0004 	strh.w	r0, [sp, #4]
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
    cbca:	8918      	ldrh	r0, [r3, #8]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
    cbcc:	8959      	ldrh	r1, [r3, #10]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
    cbce:	899b      	ldrh	r3, [r3, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    cbd0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
    cbd4:	f8ad 0008 	strh.w	r0, [sp, #8]
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
    cbd8:	f8ad c006 	strh.w	ip, [sp, #6]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
    cbdc:	f8ad 100a 	strh.w	r1, [sp, #10]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
    cbe0:	f8ad 300c 	strh.w	r3, [sp, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    cbe4:	4668      	mov	r0, sp
    cbe6:	4790      	blx	r2
}
    cbe8:	b004      	add	sp, #16
    cbea:	bd10      	pop	{r4, pc}
{
  hciAuthPayloadToExpiredEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
  evt.hdr.param = pCcb->connId;
    cbec:	7c08      	ldrb	r0, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;
  evt.handle = pEvent->authPayloadToExpired.handle;
    cbee:	889a      	ldrh	r2, [r3, #4]
  evt.hdr.param = pCcb->connId;
    cbf0:	f8ad 0000 	strh.w	r0, [sp]
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
    cbf4:	2143      	movs	r1, #67	; 0x43

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    cbf6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
    cbfa:	f8ad 1002 	strh.w	r1, [sp, #2]
  evt.handle = pEvent->authPayloadToExpired.handle;
    cbfe:	f8ad 2004 	strh.w	r2, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    cc02:	4668      	mov	r0, sp
    cc04:	4798      	blx	r3
}
    cc06:	e7ef      	b.n	cbe8 <dmConn2HciHandler+0xa0>
  evt.hdr.param = pCcb->connId;
    cc08:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
    cc0c:	791a      	ldrb	r2, [r3, #4]
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
    cc0e:	88d9      	ldrh	r1, [r3, #6]
  evt.hdr.param = pCcb->connId;
    cc10:	f8ad c000 	strh.w	ip, [sp]
  evt.hdr.event = DM_CONN_WRITE_AUTH_TO_IND;
    cc14:	2042      	movs	r0, #66	; 0x42
    cc16:	f8ad 0002 	strh.w	r0, [sp, #2]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    cc1a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
    cc1e:	f8ad 1006 	strh.w	r1, [sp, #6]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
    cc22:	f88d 2004 	strb.w	r2, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    cc26:	4668      	mov	r0, sp
    cc28:	4798      	blx	r3
}
    cc2a:	e7dd      	b.n	cbe8 <dmConn2HciHandler+0xa0>
  evt.hdr.param = pCcb->connId;
    cc2c:	7c09      	ldrb	r1, [r1, #16]
  evt.intervalMin = pEvent->leRemConnParamReq.intervalMin;
    cc2e:	f8b3 c006 	ldrh.w	ip, [r3, #6]
  evt.hdr.event = DM_REM_CONN_PARAM_REQ_IND;
    cc32:	2240      	movs	r2, #64	; 0x40
    cc34:	e7c3      	b.n	cbbe <dmConn2HciHandler+0x76>
static void dmConn2ActReadRemoteFeaturesCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
  hciLeReadRemoteFeatCmplEvt_t evt;

  /* Save the features */
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
    cc36:	7a9a      	ldrb	r2, [r3, #10]
    cc38:	7a58      	ldrb	r0, [r3, #9]
    cc3a:	0412      	lsls	r2, r2, #16
    cc3c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    cc40:	7a18      	ldrb	r0, [r3, #8]
    cc42:	4402      	add	r2, r0
    cc44:	7ad8      	ldrb	r0, [r3, #11]
    cc46:	eb02 6200 	add.w	r2, r2, r0, lsl #24
  pCcb->featuresPresent = TRUE;
    cc4a:	2001      	movs	r0, #1
    cc4c:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
    cc50:	628a      	str	r2, [r1, #40]	; 0x28

  /* call callback */
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
  evt.hdr.param = pCcb->connId;
    cc52:	7c0a      	ldrb	r2, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;

  evt.status = pEvent->leReadRemoteFeatCmpl.status;
    cc54:	f893 c004 	ldrb.w	ip, [r3, #4]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
    cc58:	6898      	ldr	r0, [r3, #8]
    cc5a:	68d9      	ldr	r1, [r3, #12]
  evt.hdr.param = pCcb->connId;
    cc5c:	f8ad 2000 	strh.w	r2, [sp]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
    cc60:	88da      	ldrh	r2, [r3, #6]
    cc62:	f8ad 2006 	strh.w	r2, [sp, #6]
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
    cc66:	2357      	movs	r3, #87	; 0x57
    cc68:	f8ad 3002 	strh.w	r3, [sp, #2]
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
    cc6c:	ab02      	add	r3, sp, #8
  evt.status = pEvent->leReadRemoteFeatCmpl.status;
    cc6e:	f88d c004 	strb.w	ip, [sp, #4]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    cc72:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
    cc76:	c303      	stmia	r3!, {r0, r1}
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    cc78:	4668      	mov	r0, sp
    cc7a:	4790      	blx	r2
}
    cc7c:	e7b4      	b.n	cbe8 <dmConn2HciHandler+0xa0>
{
  hciReadRemoteVerInfoCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
  evt.hdr.param = pCcb->connId;
    cc7e:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;

  evt.status = pEvent->readRemoteVerInfoCmpl.status;
    cc82:	7919      	ldrb	r1, [r3, #4]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
    cc84:	88d8      	ldrh	r0, [r3, #6]
  evt.status = pEvent->readRemoteVerInfoCmpl.status;
    cc86:	f88d 1004 	strb.w	r1, [sp, #4]
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
    cc8a:	2258      	movs	r2, #88	; 0x58
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
    cc8c:	7a19      	ldrb	r1, [r3, #8]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
    cc8e:	f8d3 300a 	ldr.w	r3, [r3, #10]
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
    cc92:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
    cc96:	f8ad 0006 	strh.w	r0, [sp, #6]
  evt.subversion = pEvent->readRemoteVerInfoCmpl.subversion;

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    cc9a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
    cc9e:	f8ad c000 	strh.w	ip, [sp]
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
    cca2:	f88d 1008 	strb.w	r1, [sp, #8]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
    cca6:	f8cd 300a 	str.w	r3, [sp, #10]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    ccaa:	4668      	mov	r0, sp
    ccac:	4790      	blx	r2
}
    ccae:	e79b      	b.n	cbe8 <dmConn2HciHandler+0xa0>
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
    ccb0:	2239      	movs	r2, #57	; 0x39
  evt.hdr.param = pCcb->connId;
    ccb2:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
    ccb6:	f88d 2002 	strb.w	r2, [sp, #2]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
    ccba:	791a      	ldrb	r2, [r3, #4]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
    ccbc:	7a1b      	ldrb	r3, [r3, #8]
  evt.handle = pCcb->handle;
    ccbe:	f8ad 0006 	strh.w	r0, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    ccc2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
    ccc6:	f8ad c000 	strh.w	ip, [sp]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
    ccca:	f88d 2003 	strb.w	r2, [sp, #3]
    ccce:	f88d 2004 	strb.w	r2, [sp, #4]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
    ccd2:	f88d 3008 	strb.w	r3, [sp, #8]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    ccd6:	4668      	mov	r0, sp
    ccd8:	4788      	blx	r1
}
    ccda:	e785      	b.n	cbe8 <dmConn2HciHandler+0xa0>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    ccdc:	4903      	ldr	r1, [pc, #12]	; (ccec <dmConn2HciHandler+0x1a4>)
    ccde:	e753      	b.n	cb88 <dmConn2HciHandler+0x40>
    cce0:	4903      	ldr	r1, [pc, #12]	; (ccf0 <dmConn2HciHandler+0x1a8>)
    cce2:	e751      	b.n	cb88 <dmConn2HciHandler+0x40>
    cce4:	10003ed0 	.word	0x10003ed0
    cce8:	00025ca8 	.word	0x00025ca8
    ccec:	10003f00 	.word	0x10003f00
    ccf0:	10003f30 	.word	0x10003f30

0000ccf4 <dmConnHciHandler>:
{
    ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
    ccf6:	7883      	ldrb	r3, [r0, #2]
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    ccf8:	4d63      	ldr	r5, [pc, #396]	; (ce88 <dmConnHciHandler+0x194>)
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
    ccfa:	1e5a      	subs	r2, r3, #1
    ccfc:	2a01      	cmp	r2, #1
{
    ccfe:	4604      	mov	r4, r0
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
    cd00:	d919      	bls.n	cd36 <dmConnHciHandler+0x42>
    if (pCcb->inUse && (pCcb->handle == handle))
    cd02:	7daa      	ldrb	r2, [r5, #22]
    pCcb = dmConnCcbByHandle(pEvent->hdr.param);
    cd04:	8801      	ldrh	r1, [r0, #0]
    if (pCcb->inUse && (pCcb->handle == handle))
    cd06:	b112      	cbz	r2, cd0e <dmConnHciHandler+0x1a>
    cd08:	89aa      	ldrh	r2, [r5, #12]
    cd0a:	428a      	cmp	r2, r1
    cd0c:	d077      	beq.n	cdfe <dmConnHciHandler+0x10a>
    cd0e:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
    cd12:	b112      	cbz	r2, cd1a <dmConnHciHandler+0x26>
    cd14:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
    cd16:	428a      	cmp	r2, r1
    cd18:	d070      	beq.n	cdfc <dmConnHciHandler+0x108>
    cd1a:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    cd1e:	b11a      	cbz	r2, cd28 <dmConnHciHandler+0x34>
    cd20:	f8b5 206c 	ldrh.w	r2, [r5, #108]	; 0x6c
    cd24:	428a      	cmp	r2, r1
    cd26:	d06d      	beq.n	ce04 <dmConnHciHandler+0x110>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
    cd28:	4858      	ldr	r0, [pc, #352]	; (ce8c <dmConnHciHandler+0x198>)
    cd2a:	f011 fcb5 	bl	1e698 <WsfTrace>
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
    cd2e:	78a3      	ldrb	r3, [r4, #2]
    cd30:	3336      	adds	r3, #54	; 0x36
    cd32:	70a3      	strb	r3, [r4, #2]
}
    cd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    cd36:	7dab      	ldrb	r3, [r5, #22]
    if ((pCcb = dmConnCcbByBdAddr(pEvent->leConnCmpl.peerAddr)) == NULL)
    cd38:	f100 060a 	add.w	r6, r0, #10
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    cd3c:	2b00      	cmp	r3, #0
    cd3e:	d143      	bne.n	cdc8 <dmConnHciHandler+0xd4>
    cd40:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
    cd44:	2b00      	cmp	r3, #0
    cd46:	d149      	bne.n	cddc <dmConnHciHandler+0xe8>
    cd48:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    cd4c:	2b00      	cmp	r3, #0
    cd4e:	d14d      	bne.n	cdec <dmConnHciHandler+0xf8>
  DM_TRACE_INFO0("dmConnIdByBdAddr not found");
    cd50:	484f      	ldr	r0, [pc, #316]	; (ce90 <dmConnHciHandler+0x19c>)
    cd52:	f011 fca1 	bl	1e698 <WsfTrace>
    if (pCcb->inUse &&
    cd56:	7dab      	ldrb	r3, [r5, #22]
    cd58:	b9d3      	cbnz	r3, cd90 <dmConnHciHandler+0x9c>
    cd5a:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
    cd5e:	b129      	cbz	r1, cd6c <dmConnHciHandler+0x78>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
    cd60:	f895 2045 	ldrb.w	r2, [r5, #69]	; 0x45
    if (pCcb->inUse &&
    cd64:	2a02      	cmp	r2, #2
    cd66:	d06d      	beq.n	ce44 <dmConnHciHandler+0x150>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
    cd68:	2a04      	cmp	r2, #4
    cd6a:	d066      	beq.n	ce3a <dmConnHciHandler+0x146>
    if (pCcb->inUse &&
    cd6c:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    cd70:	b12a      	cbz	r2, cd7e <dmConnHciHandler+0x8a>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
    cd72:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    if (pCcb->inUse &&
    cd76:	2802      	cmp	r0, #2
    cd78:	d05d      	beq.n	ce36 <dmConnHciHandler+0x142>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
    cd7a:	2804      	cmp	r0, #4
    cd7c:	d055      	beq.n	ce2a <dmConnHciHandler+0x136>
        if ((pEvent->hdr.status == HCI_SUCCESS) && (pEvent->leConnCmpl.role == HCI_ROLE_SLAVE))
    cd7e:	78e0      	ldrb	r0, [r4, #3]
    cd80:	2800      	cmp	r0, #0
    cd82:	d14c      	bne.n	ce1e <dmConnHciHandler+0x12a>
    cd84:	7a27      	ldrb	r7, [r4, #8]
    cd86:	2f01      	cmp	r7, #1
    cd88:	d03e      	beq.n	ce08 <dmConnHciHandler+0x114>
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
    cd8a:	2338      	movs	r3, #56	; 0x38
    cd8c:	70a3      	strb	r3, [r4, #2]
}
    cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
    cd90:	7d6a      	ldrb	r2, [r5, #21]
    if (pCcb->inUse &&
    cd92:	2a02      	cmp	r2, #2
    cd94:	d006      	beq.n	cda4 <dmConnHciHandler+0xb0>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
    cd96:	2a04      	cmp	r2, #4
    cd98:	d1df      	bne.n	cd5a <dmConnHciHandler+0x66>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
    cd9a:	89a9      	ldrh	r1, [r5, #12]
    cd9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cda0:	4291      	cmp	r1, r2
    cda2:	d1da      	bne.n	cd5a <dmConnHciHandler+0x66>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
    cda4:	4d38      	ldr	r5, [pc, #224]	; (ce88 <dmConnHciHandler+0x194>)
      DM_TRACE_INFO1("dmConnCmplStates %d", pCcb->connId);
    cda6:	7c29      	ldrb	r1, [r5, #16]
    cda8:	483a      	ldr	r0, [pc, #232]	; (ce94 <dmConnHciHandler+0x1a0>)
    cdaa:	f011 fc75 	bl	1e698 <WsfTrace>
    if (pEvent->hdr.status == HCI_SUCCESS)
    cdae:	78e3      	ldrb	r3, [r4, #3]
    cdb0:	2b00      	cmp	r3, #0
    cdb2:	d137      	bne.n	ce24 <dmConnHciHandler+0x130>
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
    cdb4:	2338      	movs	r3, #56	; 0x38
    cdb6:	70a3      	strb	r3, [r4, #2]
    pEvent->hdr.param = pCcb->connId;
    cdb8:	7c2b      	ldrb	r3, [r5, #16]
    cdba:	8023      	strh	r3, [r4, #0]
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
    cdbc:	4621      	mov	r1, r4
    cdbe:	4628      	mov	r0, r5
}
    cdc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
    cdc4:	f000 bca4 	b.w	d710 <dmConnSmExecute>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    cdc8:	4631      	mov	r1, r6
    cdca:	4628      	mov	r0, r5
    cdcc:	f008 fd7c 	bl	158c8 <BdaCmp>
    cdd0:	2800      	cmp	r0, #0
    cdd2:	d1ec      	bne.n	cdae <dmConnHciHandler+0xba>
    cdd4:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
    cdd8:	2b00      	cmp	r3, #0
    cdda:	d0b5      	beq.n	cd48 <dmConnHciHandler+0x54>
    cddc:	482e      	ldr	r0, [pc, #184]	; (ce98 <dmConnHciHandler+0x1a4>)
    cdde:	4631      	mov	r1, r6
    cde0:	f008 fd72 	bl	158c8 <BdaCmp>
    cde4:	2800      	cmp	r0, #0
    cde6:	d0af      	beq.n	cd48 <dmConnHciHandler+0x54>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    cde8:	4d2b      	ldr	r5, [pc, #172]	; (ce98 <dmConnHciHandler+0x1a4>)
    cdea:	e7e0      	b.n	cdae <dmConnHciHandler+0xba>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    cdec:	482b      	ldr	r0, [pc, #172]	; (ce9c <dmConnHciHandler+0x1a8>)
    cdee:	4631      	mov	r1, r6
    cdf0:	f008 fd6a 	bl	158c8 <BdaCmp>
    cdf4:	2800      	cmp	r0, #0
    cdf6:	d0ab      	beq.n	cd50 <dmConnHciHandler+0x5c>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    cdf8:	4d28      	ldr	r5, [pc, #160]	; (ce9c <dmConnHciHandler+0x1a8>)
    cdfa:	e7d8      	b.n	cdae <dmConnHciHandler+0xba>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    cdfc:	4d26      	ldr	r5, [pc, #152]	; (ce98 <dmConnHciHandler+0x1a4>)
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
    cdfe:	3336      	adds	r3, #54	; 0x36
    ce00:	70a3      	strb	r3, [r4, #2]
    ce02:	e7d9      	b.n	cdb8 <dmConnHciHandler+0xc4>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    ce04:	4d25      	ldr	r5, [pc, #148]	; (ce9c <dmConnHciHandler+0x1a8>)
    ce06:	e7fa      	b.n	cdfe <dmConnHciHandler+0x10a>
    if (pCcb->inUse == FALSE)
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d037      	beq.n	ce7c <dmConnHciHandler+0x188>
    ce0c:	b1e1      	cbz	r1, ce48 <dmConnHciHandler+0x154>
    ce0e:	2a00      	cmp	r2, #0
    ce10:	d037      	beq.n	ce82 <dmConnHciHandler+0x18e>
  DM_TRACE_ERR0("dmConnCcbAlloc failed");
    ce12:	4823      	ldr	r0, [pc, #140]	; (cea0 <dmConnHciHandler+0x1ac>)
    ce14:	f011 fc40 	bl	1e698 <WsfTrace>
    if (pEvent->hdr.status == HCI_SUCCESS)
    ce18:	78e3      	ldrb	r3, [r4, #3]
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	d0b5      	beq.n	cd8a <dmConnHciHandler+0x96>
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
    ce1e:	2337      	movs	r3, #55	; 0x37
    ce20:	70a3      	strb	r3, [r4, #2]
}
    ce22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
    ce24:	2337      	movs	r3, #55	; 0x37
    ce26:	70a3      	strb	r3, [r4, #2]
    ce28:	e7c6      	b.n	cdb8 <dmConnHciHandler+0xc4>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
    ce2a:	f8b5 506c 	ldrh.w	r5, [r5, #108]	; 0x6c
    ce2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ce32:	4285      	cmp	r5, r0
    ce34:	d1a3      	bne.n	cd7e <dmConnHciHandler+0x8a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    ce36:	4d19      	ldr	r5, [pc, #100]	; (ce9c <dmConnHciHandler+0x1a8>)
    ce38:	e7b5      	b.n	cda6 <dmConnHciHandler+0xb2>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
    ce3a:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    ce3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ce40:	4290      	cmp	r0, r2
    ce42:	d193      	bne.n	cd6c <dmConnHciHandler+0x78>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    ce44:	4d14      	ldr	r5, [pc, #80]	; (ce98 <dmConnHciHandler+0x1a4>)
    ce46:	e7ae      	b.n	cda6 <dmConnHciHandler+0xb2>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
    ce48:	4d13      	ldr	r5, [pc, #76]	; (ce98 <dmConnHciHandler+0x1a4>)
      memset(pCcb, 0, sizeof(dmConnCcb_t));
    ce4a:	2230      	movs	r2, #48	; 0x30
    ce4c:	4628      	mov	r0, r5
    ce4e:	2100      	movs	r1, #0
    ce50:	f016 fa74 	bl	2333c <memset>
      BdaCpy(pCcb->peerAddr, pAddr);
    ce54:	4631      	mov	r1, r6
    ce56:	4628      	mov	r0, r5
    ce58:	f008 fd30 	bl	158bc <BdaCpy>
      pCcb->updating = FALSE;
    ce5c:	2300      	movs	r3, #0
      pCcb->connId = i + 1;
    ce5e:	1c79      	adds	r1, r7, #1
    ce60:	b2c9      	uxtb	r1, r1
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
    ce62:	f64f 72ff 	movw	r2, #65535	; 0xffff
      pCcb->updating = FALSE;
    ce66:	746b      	strb	r3, [r5, #17]
      pCcb->featuresPresent = FALSE;
    ce68:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      pCcb->inUse = TRUE;
    ce6c:	2301      	movs	r3, #1
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
    ce6e:	480d      	ldr	r0, [pc, #52]	; (cea4 <dmConnHciHandler+0x1b0>)
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
    ce70:	81aa      	strh	r2, [r5, #12]
      pCcb->connId = i + 1;
    ce72:	7429      	strb	r1, [r5, #16]
      pCcb->inUse = TRUE;
    ce74:	75ab      	strb	r3, [r5, #22]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
    ce76:	f011 fc0f 	bl	1e698 <WsfTrace>
      return pCcb;
    ce7a:	e798      	b.n	cdae <dmConnHciHandler+0xba>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
    ce7c:	4d02      	ldr	r5, [pc, #8]	; (ce88 <dmConnHciHandler+0x194>)
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
    ce7e:	461f      	mov	r7, r3
    ce80:	e7e3      	b.n	ce4a <dmConnHciHandler+0x156>
    ce82:	4d06      	ldr	r5, [pc, #24]	; (ce9c <dmConnHciHandler+0x1a8>)
    ce84:	2702      	movs	r7, #2
    ce86:	e7e0      	b.n	ce4a <dmConnHciHandler+0x156>
    ce88:	10003ed0 	.word	0x10003ed0
    ce8c:	00025ca8 	.word	0x00025ca8
    ce90:	00025ccc 	.word	0x00025ccc
    ce94:	00025ce8 	.word	0x00025ce8
    ce98:	10003f00 	.word	0x10003f00
    ce9c:	10003f30 	.word	0x10003f30
    cea0:	00025d10 	.word	0x00025d10
    cea4:	00025cfc 	.word	0x00025cfc

0000cea8 <dmConnReset>:
{
    cea8:	b530      	push	{r4, r5, lr}
    if (pCcb->inUse)
    ceaa:	4d25      	ldr	r5, [pc, #148]	; (cf40 <dmConnReset+0x98>)
{
    ceac:	b085      	sub	sp, #20
    if (pCcb->inUse)
    ceae:	7dab      	ldrb	r3, [r5, #22]
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
    ceb0:	2000      	movs	r0, #0
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
    ceb2:	2103      	movs	r1, #3
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
    ceb4:	2216      	movs	r2, #22
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
    ceb6:	f88d 0008 	strb.w	r0, [sp, #8]
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
    ceba:	f8ad 1006 	strh.w	r1, [sp, #6]
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
    cebe:	f88d 200c 	strb.w	r2, [sp, #12]
    if (pCcb->inUse)
    cec2:	b9d3      	cbnz	r3, cefa <dmConnReset+0x52>
    cec4:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
    cec8:	bb1b      	cbnz	r3, cf12 <dmConnReset+0x6a>
    ceca:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    cece:	bb63      	cbnz	r3, cf2a <dmConnReset+0x82>
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
    ced0:	4c1c      	ldr	r4, [pc, #112]	; (cf44 <dmConnReset+0x9c>)
    ced2:	4b1d      	ldr	r3, [pc, #116]	; (cf48 <dmConnReset+0xa0>)
    ced4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    ced8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    dmConnCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
    cedc:	f04f 1230 	mov.w	r2, #3145776	; 0x300030
    dmConnCb.scanWindow[i] = DM_GAP_SCAN_FAST_WINDOW;
    cee0:	e9c5 222f 	strd	r2, r2, [r5, #188]	; 0xbc
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
    cee4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    cee8:	330c      	adds	r3, #12
  dmCb.initFiltPolicy = HCI_FILT_NONE;
    ceea:	4c18      	ldr	r4, [pc, #96]	; (cf4c <dmConnReset+0xa4>)
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
    ceec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  dmCb.initFiltPolicy = HCI_FILT_NONE;
    cef0:	2300      	movs	r3, #0
    cef2:	7523      	strb	r3, [r4, #20]
  dmCb.connAddrType = DM_ADDR_PUBLIC;
    cef4:	7363      	strb	r3, [r4, #13]
}
    cef6:	b005      	add	sp, #20
    cef8:	bd30      	pop	{r4, r5, pc}
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
    cefa:	89ab      	ldrh	r3, [r5, #12]
    cefc:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
    cf00:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
    cf02:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
    cf06:	f7ff fef5 	bl	ccf4 <dmConnHciHandler>
    if (pCcb->inUse)
    cf0a:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
    cf0e:	2b00      	cmp	r3, #0
    cf10:	d0db      	beq.n	ceca <dmConnReset+0x22>
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
    cf12:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
    cf14:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
    cf18:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
    cf1a:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
    cf1e:	f7ff fee9 	bl	ccf4 <dmConnHciHandler>
    if (pCcb->inUse)
    cf22:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    cf26:	2b00      	cmp	r3, #0
    cf28:	d0d2      	beq.n	ced0 <dmConnReset+0x28>
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
    cf2a:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
    cf2e:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
    cf32:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
    cf34:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
    cf38:	f7ff fedc 	bl	ccf4 <dmConnHciHandler>
    cf3c:	e7c8      	b.n	ced0 <dmConnReset+0x28>
    cf3e:	bf00      	nop
    cf40:	10003ed0 	.word	0x10003ed0
    cf44:	00025d74 	.word	0x00025d74
    cf48:	10003f74 	.word	0x10003f74
    cf4c:	10003fa4 	.word	0x10003fa4

0000cf50 <dmConnCcbByHandle>:
{
    cf50:	b508      	push	{r3, lr}
    if (pCcb->inUse && (pCcb->handle == handle))
    cf52:	4b0f      	ldr	r3, [pc, #60]	; (cf90 <dmConnCcbByHandle+0x40>)
    cf54:	7d9a      	ldrb	r2, [r3, #22]
{
    cf56:	4601      	mov	r1, r0
    if (pCcb->inUse && (pCcb->handle == handle))
    cf58:	b112      	cbz	r2, cf60 <dmConnCcbByHandle+0x10>
    cf5a:	899a      	ldrh	r2, [r3, #12]
    cf5c:	4282      	cmp	r2, r0
    cf5e:	d011      	beq.n	cf84 <dmConnCcbByHandle+0x34>
    cf60:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    cf64:	b112      	cbz	r2, cf6c <dmConnCcbByHandle+0x1c>
    cf66:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    cf68:	428a      	cmp	r2, r1
    cf6a:	d00d      	beq.n	cf88 <dmConnCcbByHandle+0x38>
    cf6c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
    cf70:	b11a      	cbz	r2, cf7a <dmConnCcbByHandle+0x2a>
    cf72:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    cf76:	428b      	cmp	r3, r1
    cf78:	d008      	beq.n	cf8c <dmConnCcbByHandle+0x3c>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
    cf7a:	4806      	ldr	r0, [pc, #24]	; (cf94 <dmConnCcbByHandle+0x44>)
    cf7c:	f011 fb8c 	bl	1e698 <WsfTrace>
  return NULL;
    cf80:	2000      	movs	r0, #0
}
    cf82:	bd08      	pop	{r3, pc}
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
    cf84:	4618      	mov	r0, r3
}
    cf86:	bd08      	pop	{r3, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    cf88:	4803      	ldr	r0, [pc, #12]	; (cf98 <dmConnCcbByHandle+0x48>)
}
    cf8a:	bd08      	pop	{r3, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    cf8c:	4803      	ldr	r0, [pc, #12]	; (cf9c <dmConnCcbByHandle+0x4c>)
}
    cf8e:	bd08      	pop	{r3, pc}
    cf90:	10003ed0 	.word	0x10003ed0
    cf94:	00025ca8 	.word	0x00025ca8
    cf98:	10003f00 	.word	0x10003f00
    cf9c:	10003f30 	.word	0x10003f30

0000cfa0 <dmConnCcbById>:
  connId--;
    cfa0:	3801      	subs	r0, #1
    cfa2:	b2c3      	uxtb	r3, r0
  if (dmConnCb.ccb[connId].inUse)
    cfa4:	4904      	ldr	r1, [pc, #16]	; (cfb8 <dmConnCcbById+0x18>)
    cfa6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    cfaa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    cfae:	7d90      	ldrb	r0, [r2, #22]
    cfb0:	b100      	cbz	r0, cfb4 <dmConnCcbById+0x14>
    return &dmConnCb.ccb[connId];
    cfb2:	4610      	mov	r0, r2
}
    cfb4:	4770      	bx	lr
    cfb6:	bf00      	nop
    cfb8:	10003ed0 	.word	0x10003ed0

0000cfbc <dmConnOpenAccept>:
{
    cfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    cfc0:	4c52      	ldr	r4, [pc, #328]	; (d10c <dmConnOpenAccept+0x150>)
{
    cfc2:	b085      	sub	sp, #20
    cfc4:	461e      	mov	r6, r3
    cfc6:	e9cd 0101 	strd	r0, r1, [sp, #4]
    cfca:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
    cfce:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
    cfd2:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    cfd6:	9f11      	ldr	r7, [sp, #68]	; 0x44
    cfd8:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    cfdc:	9203      	str	r2, [sp, #12]
  WsfTaskLock();
    cfde:	f011 f81d 	bl	1e01c <WsfTaskLock>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    cfe2:	7da3      	ldrb	r3, [r4, #22]
    cfe4:	b9f3      	cbnz	r3, d024 <dmConnOpenAccept+0x68>
    cfe6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    cfea:	2b00      	cmp	r3, #0
    cfec:	d151      	bne.n	d092 <dmConnOpenAccept+0xd6>
    cfee:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    cff2:	2b00      	cmp	r3, #0
    cff4:	d155      	bne.n	d0a2 <dmConnOpenAccept+0xe6>
  DM_TRACE_INFO0("dmConnIdByBdAddr not found");
    cff6:	4846      	ldr	r0, [pc, #280]	; (d110 <dmConnOpenAccept+0x154>)
    cff8:	f011 fb4e 	bl	1e698 <WsfTrace>
    if (pCcb->inUse == FALSE)
    cffc:	7da5      	ldrb	r5, [r4, #22]
    cffe:	2d00      	cmp	r5, #0
    d000:	d064      	beq.n	d0cc <dmConnOpenAccept+0x110>
    d002:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    d006:	2b00      	cmp	r3, #0
    d008:	d07a      	beq.n	d100 <dmConnOpenAccept+0x144>
    d00a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    d00e:	2b00      	cmp	r3, #0
    d010:	d079      	beq.n	d106 <dmConnOpenAccept+0x14a>
  DM_TRACE_ERR0("dmConnCcbAlloc failed");
    d012:	4840      	ldr	r0, [pc, #256]	; (d114 <dmConnOpenAccept+0x158>)
    d014:	f011 fb40 	bl	1e698 <WsfTrace>
  WsfTaskUnlock();
    d018:	f011 f80a 	bl	1e030 <WsfTaskUnlock>
  return DM_CONN_ID_NONE;
    d01c:	2000      	movs	r0, #0
}
    d01e:	b005      	add	sp, #20
    d020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    d024:	4639      	mov	r1, r7
    d026:	4620      	mov	r0, r4
    d028:	f008 fc4e 	bl	158c8 <BdaCmp>
    d02c:	2800      	cmp	r0, #0
    d02e:	d0da      	beq.n	cfe6 <dmConnOpenAccept+0x2a>
  WsfTaskUnlock();
    d030:	f010 fffe 	bl	1e030 <WsfTaskUnlock>
    if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiOpen_t))) != NULL)
    d034:	2014      	movs	r0, #20
    d036:	f010 ffaf 	bl	1df98 <WsfMsgAlloc>
    d03a:	4605      	mov	r5, r0
    d03c:	2800      	cmp	r0, #0
    d03e:	d038      	beq.n	d0b2 <dmConnOpenAccept+0xf6>
      pMsg->hdr.param = pCcb->connId;
    d040:	7c22      	ldrb	r2, [r4, #16]
      pMsg->initPhys = initPhys;
    d042:	9b02      	ldr	r3, [sp, #8]
      pMsg->hdr.param = pCcb->connId;
    d044:	802a      	strh	r2, [r5, #0]
      pMsg->hdr.event = (role == DM_ROLE_MASTER) ?
    d046:	f1b8 0f00 	cmp.w	r8, #0
    d04a:	bf0c      	ite	eq
    d04c:	2230      	moveq	r2, #48	; 0x30
    d04e:	2232      	movne	r2, #50	; 0x32
      pMsg->initPhys = initPhys;
    d050:	712b      	strb	r3, [r5, #4]
      pMsg->advHandle = advHandle;
    d052:	9b03      	ldr	r3, [sp, #12]
    d054:	716b      	strb	r3, [r5, #5]
      BdaCpy(pMsg->peerAddr, pAddr);
    d056:	4639      	mov	r1, r7
      pMsg->hdr.event = (role == DM_ROLE_MASTER) ?
    d058:	70aa      	strb	r2, [r5, #2]
      BdaCpy(pMsg->peerAddr, pAddr);
    d05a:	f105 000b 	add.w	r0, r5, #11
      pMsg->advType = advType;
    d05e:	71ae      	strb	r6, [r5, #6]
      pMsg->duration = duration;
    d060:	f8a5 9008 	strh.w	r9, [r5, #8]
      pMsg->maxEaEvents = maxEaEvents;
    d064:	f885 a00a 	strb.w	sl, [r5, #10]
      BdaCpy(pMsg->peerAddr, pAddr);
    d068:	f008 fc28 	bl	158bc <BdaCpy>
      WsfMsgSend(dmCb.handlerId, pMsg);
    d06c:	4a2a      	ldr	r2, [pc, #168]	; (d118 <dmConnOpenAccept+0x15c>)
      pMsg->clientId = clientId;
    d06e:	9b01      	ldr	r3, [sp, #4]
      WsfMsgSend(dmCb.handlerId, pMsg);
    d070:	7b10      	ldrb	r0, [r2, #12]
      pMsg->clientId = clientId;
    d072:	74ab      	strb	r3, [r5, #18]
      WsfMsgSend(dmCb.handlerId, pMsg);
    d074:	4629      	mov	r1, r5
      pMsg->addrType = addrType;
    d076:	f885 b011 	strb.w	fp, [r5, #17]
      WsfMsgSend(dmCb.handlerId, pMsg);
    d07a:	f010 ff99 	bl	1dfb0 <WsfMsgSend>
      WsfTaskLock();
    d07e:	f010 ffcd 	bl	1e01c <WsfTaskLock>
      pCcb->role = role;
    d082:	f884 8019 	strb.w	r8, [r4, #25]
      WsfTaskUnlock();
    d086:	f010 ffd3 	bl	1e030 <WsfTaskUnlock>
      return pCcb->connId;
    d08a:	7c20      	ldrb	r0, [r4, #16]
}
    d08c:	b005      	add	sp, #20
    d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    d092:	4822      	ldr	r0, [pc, #136]	; (d11c <dmConnOpenAccept+0x160>)
    d094:	4639      	mov	r1, r7
    d096:	f008 fc17 	bl	158c8 <BdaCmp>
    d09a:	2800      	cmp	r0, #0
    d09c:	d0a7      	beq.n	cfee <dmConnOpenAccept+0x32>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    d09e:	4c1f      	ldr	r4, [pc, #124]	; (d11c <dmConnOpenAccept+0x160>)
    d0a0:	e7c6      	b.n	d030 <dmConnOpenAccept+0x74>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
    d0a2:	481f      	ldr	r0, [pc, #124]	; (d120 <dmConnOpenAccept+0x164>)
    d0a4:	4639      	mov	r1, r7
    d0a6:	f008 fc0f 	bl	158c8 <BdaCmp>
    d0aa:	2800      	cmp	r0, #0
    d0ac:	d0a3      	beq.n	cff6 <dmConnOpenAccept+0x3a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    d0ae:	4c1c      	ldr	r4, [pc, #112]	; (d120 <dmConnOpenAccept+0x164>)
    d0b0:	e7be      	b.n	d030 <dmConnOpenAccept+0x74>
      WsfTaskLock();
    d0b2:	f010 ffb3 	bl	1e01c <WsfTaskLock>
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
    d0b6:	7c21      	ldrb	r1, [r4, #16]
    d0b8:	481a      	ldr	r0, [pc, #104]	; (d124 <dmConnOpenAccept+0x168>)
    d0ba:	f011 faed 	bl	1e698 <WsfTrace>
  pCcb->inUse = FALSE;
    d0be:	75a5      	strb	r5, [r4, #22]
      WsfTaskUnlock();
    d0c0:	f010 ffb6 	bl	1e030 <WsfTaskUnlock>
  return DM_CONN_ID_NONE;
    d0c4:	4628      	mov	r0, r5
}
    d0c6:	b005      	add	sp, #20
    d0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
    d0cc:	4c0f      	ldr	r4, [pc, #60]	; (d10c <dmConnOpenAccept+0x150>)
      memset(pCcb, 0, sizeof(dmConnCcb_t));
    d0ce:	2230      	movs	r2, #48	; 0x30
    d0d0:	4620      	mov	r0, r4
    d0d2:	2100      	movs	r1, #0
    d0d4:	f016 f932 	bl	2333c <memset>
      BdaCpy(pCcb->peerAddr, pAddr);
    d0d8:	4639      	mov	r1, r7
    d0da:	4620      	mov	r0, r4
    d0dc:	f008 fbee 	bl	158bc <BdaCpy>
      pCcb->connId = i + 1;
    d0e0:	1c6b      	adds	r3, r5, #1
    d0e2:	b2d9      	uxtb	r1, r3
      pCcb->updating = FALSE;
    d0e4:	2300      	movs	r3, #0
    d0e6:	7463      	strb	r3, [r4, #17]
      pCcb->featuresPresent = FALSE;
    d0e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
    d0ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d0f0:	81a3      	strh	r3, [r4, #12]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
    d0f2:	480d      	ldr	r0, [pc, #52]	; (d128 <dmConnOpenAccept+0x16c>)
      pCcb->connId = i + 1;
    d0f4:	7421      	strb	r1, [r4, #16]
      pCcb->inUse = TRUE;
    d0f6:	2301      	movs	r3, #1
    d0f8:	75a3      	strb	r3, [r4, #22]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
    d0fa:	f011 facd 	bl	1e698 <WsfTrace>
      return pCcb;
    d0fe:	e797      	b.n	d030 <dmConnOpenAccept+0x74>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
    d100:	4c06      	ldr	r4, [pc, #24]	; (d11c <dmConnOpenAccept+0x160>)
    d102:	2501      	movs	r5, #1
    d104:	e7e3      	b.n	d0ce <dmConnOpenAccept+0x112>
    d106:	4c06      	ldr	r4, [pc, #24]	; (d120 <dmConnOpenAccept+0x164>)
    d108:	2502      	movs	r5, #2
    d10a:	e7e0      	b.n	d0ce <dmConnOpenAccept+0x112>
    d10c:	10003ed0 	.word	0x10003ed0
    d110:	00025ccc 	.word	0x00025ccc
    d114:	00025d10 	.word	0x00025d10
    d118:	10003fa4 	.word	0x10003fa4
    d11c:	10003f00 	.word	0x10003f00
    d120:	10003f30 	.word	0x10003f30
    d124:	00025c94 	.word	0x00025c94
    d128:	00025cfc 	.word	0x00025cfc

0000d12c <DmConnInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnInit(void)
{
    d12c:	b410      	push	{r4}
  dmFcnIfTbl[DM_ID_CONN] = (dmFcnIf_t *) &dmConnFcnIf;
    d12e:	4b05      	ldr	r3, [pc, #20]	; (d144 <DmConnInit+0x18>)
    d130:	4c05      	ldr	r4, [pc, #20]	; (d148 <DmConnInit+0x1c>)
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
    d132:	4a06      	ldr	r2, [pc, #24]	; (d14c <DmConnInit+0x20>)
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
    d134:	4806      	ldr	r0, [pc, #24]	; (d150 <DmConnInit+0x24>)
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
    d136:	4907      	ldr	r1, [pc, #28]	; (d154 <DmConnInit+0x28>)
    d138:	6011      	str	r1, [r2, #0]
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
    d13a:	e9c3 4003 	strd	r4, r0, [r3, #12]
}
    d13e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d142:	4770      	bx	lr
    d144:	10002b00 	.word	0x10002b00
    d148:	00025d68 	.word	0x00025d68
    d14c:	10003f94 	.word	0x10003f94
    d150:	00025d44 	.word	0x00025d44
    d154:	00025d50 	.word	0x00025d50

0000d158 <DmConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnRegister(uint8_t clientId, dmCback_t cback)
{
    d158:	b538      	push	{r3, r4, r5, lr}
    d15a:	4604      	mov	r4, r0
    d15c:	460d      	mov	r5, r1
  WSF_ASSERT(clientId < DM_CLIENT_ID_MAX);

  /* store callback */
  WsfTaskLock();
  dmConnCb.connCback[clientId] = cback;
    d15e:	3424      	adds	r4, #36	; 0x24
  WsfTaskLock();
    d160:	f010 ff5c 	bl	1e01c <WsfTaskLock>
  dmConnCb.connCback[clientId] = cback;
    d164:	4b03      	ldr	r3, [pc, #12]	; (d174 <DmConnRegister+0x1c>)
    d166:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
  WsfTaskUnlock();
}
    d16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskUnlock();
    d16e:	f010 bf5f 	b.w	1e030 <WsfTaskUnlock>
    d172:	bf00      	nop
    d174:	10003ed0 	.word	0x10003ed0

0000d178 <DmConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnClose(uint8_t clientId, dmConnId_t connId, uint8_t reason)
{
    d178:	b570      	push	{r4, r5, r6, lr}
    d17a:	4606      	mov	r6, r0
  dmConnApiClose_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiClose_t))) != NULL)
    d17c:	2006      	movs	r0, #6
{
    d17e:	460d      	mov	r5, r1
    d180:	4614      	mov	r4, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiClose_t))) != NULL)
    d182:	f010 ff09 	bl	1df98 <WsfMsgAlloc>
    d186:	b160      	cbz	r0, d1a2 <DmConnClose+0x2a>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_CLOSE;
    d188:	2231      	movs	r2, #49	; 0x31
    d18a:	7082      	strb	r2, [r0, #2]
    pMsg->hdr.param = connId;
    pMsg->hdr.status = pMsg->reason = reason;
    pMsg->clientId = clientId;

    WsfMsgSend(dmCb.handlerId, pMsg);
    d18c:	4a05      	ldr	r2, [pc, #20]	; (d1a4 <DmConnClose+0x2c>)
    pMsg->hdr.param = connId;
    d18e:	8005      	strh	r5, [r0, #0]
    pMsg->hdr.status = pMsg->reason = reason;
    d190:	7104      	strb	r4, [r0, #4]
    d192:	70c4      	strb	r4, [r0, #3]
    pMsg->clientId = clientId;
    d194:	7146      	strb	r6, [r0, #5]
    WsfMsgSend(dmCb.handlerId, pMsg);
    d196:	4601      	mov	r1, r0
  }
}
    d198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    d19c:	7b10      	ldrb	r0, [r2, #12]
    d19e:	f010 bf07 	b.w	1dfb0 <WsfMsgSend>
}
    d1a2:	bd70      	pop	{r4, r5, r6, pc}
    d1a4:	10003fa4 	.word	0x10003fa4

0000d1a8 <DmReadRemoteFeatures>:
  connId--;
    d1a8:	3801      	subs	r0, #1
  if (dmConnCb.ccb[connId].inUse)
    d1aa:	4a18      	ldr	r2, [pc, #96]	; (d20c <DmReadRemoteFeatures+0x64>)
    d1ac:	b2c3      	uxtb	r3, r0
    d1ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d1b2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    d1b6:	7d99      	ldrb	r1, [r3, #22]
    d1b8:	b319      	cbz	r1, d202 <DmReadRemoteFeatures+0x5a>
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbById(connId)) != NULL)
  {
    if (pCcb->featuresPresent)
    d1ba:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
    d1be:	b309      	cbz	r1, d204 <DmReadRemoteFeatures+0x5c>
{
    d1c0:	b500      	push	{lr}
      evt.hdr.param = pCcb->connId;
      evt.hdr.status = HCI_SUCCESS;

      evt.status = HCI_SUCCESS;
      evt.handle = pCcb->handle;
      UINT32_TO_BSTREAM(p, pCcb->features);
    d1c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    d1c4:	f8b3 c028 	ldrh.w	ip, [r3, #40]	; 0x28
      evt.hdr.param = pCcb->connId;
    d1c8:	f893 e010 	ldrb.w	lr, [r3, #16]
      evt.handle = pCcb->handle;
    d1cc:	8998      	ldrh	r0, [r3, #12]
{
    d1ce:	b085      	sub	sp, #20
      evt.hdr.event = DM_REMOTE_FEATURES_IND;
    d1d0:	2357      	movs	r3, #87	; 0x57
    d1d2:	f8ad 3002 	strh.w	r3, [sp, #2]
      evt.handle = pCcb->handle;
    d1d6:	f8ad 0006 	strh.w	r0, [sp, #6]

      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    d1da:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
      evt.hdr.param = pCcb->connId;
    d1de:	f8ad e000 	strh.w	lr, [sp]
      UINT32_TO_BSTREAM(p, pCcb->features);
    d1e2:	0c08      	lsrs	r0, r1, #16
      evt.status = HCI_SUCCESS;
    d1e4:	2200      	movs	r2, #0
      UINT32_TO_BSTREAM(p, pCcb->features);
    d1e6:	0e09      	lsrs	r1, r1, #24
    d1e8:	f88d 000a 	strb.w	r0, [sp, #10]
    d1ec:	f8ad c008 	strh.w	ip, [sp, #8]
    d1f0:	f88d 100b 	strb.w	r1, [sp, #11]
      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    d1f4:	4668      	mov	r0, sp
      evt.status = HCI_SUCCESS;
    d1f6:	f88d 2004 	strb.w	r2, [sp, #4]
      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    d1fa:	4798      	blx	r3
    {
      /* Request the remote features from the peer */
      HciLeReadRemoteFeatCmd(pCcb->handle);
    }
  }
}
    d1fc:	b005      	add	sp, #20
    d1fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d202:	4770      	bx	lr
      HciLeReadRemoteFeatCmd(pCcb->handle);
    d204:	8998      	ldrh	r0, [r3, #12]
    d206:	f009 b9db 	b.w	165c0 <HciLeReadRemoteFeatCmd>
    d20a:	bf00      	nop
    d20c:	10003ed0 	.word	0x10003ed0

0000d210 <DmConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnUpdate(dmConnId_t connId, hciConnSpec_t *pConnSpec)
{
    d210:	b570      	push	{r4, r5, r6, lr}
    d212:	4606      	mov	r6, r0
  dmConnApiUpdate_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiUpdate_t))) != NULL)
    d214:	2010      	movs	r0, #16
{
    d216:	460d      	mov	r5, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiUpdate_t))) != NULL)
    d218:	f010 febe 	bl	1df98 <WsfMsgAlloc>
    d21c:	b1e8      	cbz	r0, d25a <DmConnUpdate+0x4a>
/*************************************************************************************************/
uint8_t DmConnRole(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].role;
    d21e:	4c0f      	ldr	r4, [pc, #60]	; (d25c <DmConnUpdate+0x4c>)
    d220:	1e72      	subs	r2, r6, #1
    d222:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    d226:	eb04 1c02 	add.w	ip, r4, r2, lsl #4
    pMsg->hdr.param = connId;
    d22a:	4602      	mov	r2, r0
    pMsg->hdr.event = (DmConnRole(connId) == DM_ROLE_MASTER) ?
    d22c:	f89c 1019 	ldrb.w	r1, [ip, #25]
    d230:	2900      	cmp	r1, #0
    d232:	bf0c      	ite	eq
    d234:	2133      	moveq	r1, #51	; 0x33
    d236:	2134      	movne	r1, #52	; 0x34
    d238:	7081      	strb	r1, [r0, #2]
    pMsg->hdr.param = connId;
    d23a:	f822 6b04 	strh.w	r6, [r2], #4
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
    d23e:	4603      	mov	r3, r0
    d240:	6829      	ldr	r1, [r5, #0]
    d242:	68a8      	ldr	r0, [r5, #8]
    d244:	686c      	ldr	r4, [r5, #4]
    d246:	6059      	str	r1, [r3, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
    d248:	4905      	ldr	r1, [pc, #20]	; (d260 <DmConnUpdate+0x50>)
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
    d24a:	6054      	str	r4, [r2, #4]
    d24c:	6090      	str	r0, [r2, #8]
    WsfMsgSend(dmCb.handlerId, pMsg);
    d24e:	7b08      	ldrb	r0, [r1, #12]
}
    d250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    d254:	4619      	mov	r1, r3
    d256:	f010 beab 	b.w	1dfb0 <WsfMsgSend>
}
    d25a:	bd70      	pop	{r4, r5, r6, pc}
    d25c:	10003ed0 	.word	0x10003ed0
    d260:	10003fa4 	.word	0x10003fa4

0000d264 <DmConnSetConnSpec>:
{
    d264:	b510      	push	{r4, lr}
    d266:	4604      	mov	r4, r0
  WsfTaskLock();
    d268:	f010 fed8 	bl	1e01c <WsfTaskLock>
  dmConnCb.connSpec[DmInitPhyToIdx(initPhy)] = *pConnSpec;
    d26c:	2001      	movs	r0, #1
    d26e:	f000 fbad 	bl	d9cc <DmInitPhyToIdx>
    d272:	4b07      	ldr	r3, [pc, #28]	; (d290 <DmConnSetConnSpec+0x2c>)
    d274:	6861      	ldr	r1, [r4, #4]
    d276:	68a2      	ldr	r2, [r4, #8]
    d278:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    d27c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d280:	6820      	ldr	r0, [r4, #0]
    d282:	33a4      	adds	r3, #164	; 0xa4
}
    d284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dmConnCb.connSpec[DmInitPhyToIdx(initPhy)] = *pConnSpec;
    d288:	c307      	stmia	r3!, {r0, r1, r2}
  WsfTaskUnlock();
    d28a:	f010 bed1 	b.w	1e030 <WsfTaskUnlock>
    d28e:	bf00      	nop
    d290:	10003ed0 	.word	0x10003ed0

0000d294 <DmRemoteConnParamReqReply>:
{
    d294:	b538      	push	{r3, r4, r5, lr}
    d296:	4605      	mov	r5, r0
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqReply_t))) != NULL)
    d298:	2010      	movs	r0, #16
{
    d29a:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqReply_t))) != NULL)
    d29c:	f010 fe7c 	bl	1df98 <WsfMsgAlloc>
    d2a0:	b190      	cbz	r0, d2c8 <DmRemoteConnParamReqReply+0x34>
    pMsg->hdr.param = connId;
    d2a2:	4602      	mov	r2, r0
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY;
    d2a4:	2142      	movs	r1, #66	; 0x42
    d2a6:	7081      	strb	r1, [r0, #2]
    pMsg->hdr.param = connId;
    d2a8:	f822 5b04 	strh.w	r5, [r2], #4
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
    d2ac:	4603      	mov	r3, r0
    d2ae:	6821      	ldr	r1, [r4, #0]
    d2b0:	68a0      	ldr	r0, [r4, #8]
    d2b2:	6865      	ldr	r5, [r4, #4]
    d2b4:	6059      	str	r1, [r3, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
    d2b6:	4905      	ldr	r1, [pc, #20]	; (d2cc <DmRemoteConnParamReqReply+0x38>)
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
    d2b8:	6055      	str	r5, [r2, #4]
    d2ba:	6090      	str	r0, [r2, #8]
    WsfMsgSend(dmCb.handlerId, pMsg);
    d2bc:	7b08      	ldrb	r0, [r1, #12]
    d2be:	4619      	mov	r1, r3
}
    d2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    d2c4:	f010 be74 	b.w	1dfb0 <WsfMsgSend>
}
    d2c8:	bd38      	pop	{r3, r4, r5, pc}
    d2ca:	bf00      	nop
    d2cc:	10003fa4 	.word	0x10003fa4

0000d2d0 <DmRemoteConnParamReqNegReply>:
{
    d2d0:	b538      	push	{r3, r4, r5, lr}
    d2d2:	4605      	mov	r5, r0
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqNegReply_t))) != NULL)
    d2d4:	2006      	movs	r0, #6
{
    d2d6:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqNegReply_t))) != NULL)
    d2d8:	f010 fe5e 	bl	1df98 <WsfMsgAlloc>
    d2dc:	b158      	cbz	r0, d2f6 <DmRemoteConnParamReqNegReply+0x26>
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY;
    d2de:	2143      	movs	r1, #67	; 0x43
    WsfMsgSend(dmCb.handlerId, pMsg);
    d2e0:	4a05      	ldr	r2, [pc, #20]	; (d2f8 <DmRemoteConnParamReqNegReply+0x28>)
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY;
    d2e2:	7081      	strb	r1, [r0, #2]
    pMsg->hdr.param = connId;
    d2e4:	4603      	mov	r3, r0
    d2e6:	8005      	strh	r5, [r0, #0]
    pMsg->reason = reason;
    d2e8:	7104      	strb	r4, [r0, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
    d2ea:	4619      	mov	r1, r3
    d2ec:	7b10      	ldrb	r0, [r2, #12]
}
    d2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    d2f2:	f010 be5d 	b.w	1dfb0 <WsfMsgSend>
}
    d2f6:	bd38      	pop	{r3, r4, r5, pc}
    d2f8:	10003fa4 	.word	0x10003fa4

0000d2fc <DmConnSetDataLen>:
{
    d2fc:	b570      	push	{r4, r5, r6, lr}
    d2fe:	4606      	mov	r6, r0
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiSetDataLen_t))) != NULL)
    d300:	2008      	movs	r0, #8
{
    d302:	460d      	mov	r5, r1
    d304:	4614      	mov	r4, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiSetDataLen_t))) != NULL)
    d306:	f010 fe47 	bl	1df98 <WsfMsgAlloc>
    d30a:	b158      	cbz	r0, d324 <DmConnSetDataLen+0x28>
    pMsg->hdr.event = DM_CONN_MSG_API_SET_DATA_LEN;
    d30c:	2244      	movs	r2, #68	; 0x44
    d30e:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
    d310:	4a05      	ldr	r2, [pc, #20]	; (d328 <DmConnSetDataLen+0x2c>)
    pMsg->hdr.param = connId;
    d312:	8006      	strh	r6, [r0, #0]
    pMsg->txOctets = txOctets;
    d314:	8085      	strh	r5, [r0, #4]
    pMsg->txTime = txTime;
    d316:	80c4      	strh	r4, [r0, #6]
    WsfMsgSend(dmCb.handlerId, pMsg);
    d318:	4601      	mov	r1, r0
}
    d31a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    d31e:	7b10      	ldrb	r0, [r2, #12]
    d320:	f010 be46 	b.w	1dfb0 <WsfMsgSend>
}
    d324:	bd70      	pop	{r4, r5, r6, pc}
    d326:	bf00      	nop
    d328:	10003fa4 	.word	0x10003fa4

0000d32c <DmConnIdByHandle>:
    if (pCcb->inUse && (pCcb->handle == handle))
    d32c:	4b0d      	ldr	r3, [pc, #52]	; (d364 <DmConnIdByHandle+0x38>)
    d32e:	7d9a      	ldrb	r2, [r3, #22]
    d330:	b112      	cbz	r2, d338 <DmConnIdByHandle+0xc>
    d332:	899a      	ldrh	r2, [r3, #12]
    d334:	4282      	cmp	r2, r0
    d336:	d011      	beq.n	d35c <DmConnIdByHandle+0x30>
    d338:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    d33c:	b112      	cbz	r2, d344 <DmConnIdByHandle+0x18>
    d33e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    d340:	4282      	cmp	r2, r0
    d342:	d00a      	beq.n	d35a <DmConnIdByHandle+0x2e>
    d344:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
    d348:	b12a      	cbz	r2, d356 <DmConnIdByHandle+0x2a>
    d34a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    d34e:	4283      	cmp	r3, r0
  return DM_CONN_ID_NONE;
    d350:	bf18      	it	ne
    d352:	2200      	movne	r2, #0
    if (pCcb->inUse && (pCcb->handle == handle))
    d354:	d004      	beq.n	d360 <DmConnIdByHandle+0x34>
}
    d356:	4610      	mov	r0, r2
    d358:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    d35a:	4b03      	ldr	r3, [pc, #12]	; (d368 <DmConnIdByHandle+0x3c>)
      return pCcb->connId;
    d35c:	7c1a      	ldrb	r2, [r3, #16]
    d35e:	e7fa      	b.n	d356 <DmConnIdByHandle+0x2a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
    d360:	4b02      	ldr	r3, [pc, #8]	; (d36c <DmConnIdByHandle+0x40>)
    d362:	e7fb      	b.n	d35c <DmConnIdByHandle+0x30>
    d364:	10003ed0 	.word	0x10003ed0
    d368:	10003f00 	.word	0x10003f00
    d36c:	10003f30 	.word	0x10003f30

0000d370 <DmConnInUse>:
  return dmConnCb.ccb[connId-1].inUse;
    d370:	4b03      	ldr	r3, [pc, #12]	; (d380 <DmConnInUse+0x10>)
    d372:	3801      	subs	r0, #1
    d374:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d378:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    d37c:	7d80      	ldrb	r0, [r0, #22]
    d37e:	4770      	bx	lr
    d380:	10003ed0 	.word	0x10003ed0

0000d384 <DmConnPeerAddrType>:
  return dmConnCb.ccb[connId-1].peerAddrType;
    d384:	4b03      	ldr	r3, [pc, #12]	; (d394 <DmConnPeerAddrType+0x10>)
    d386:	3801      	subs	r0, #1
    d388:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d38c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    d390:	7cc0      	ldrb	r0, [r0, #19]
    d392:	4770      	bx	lr
    d394:	10003ed0 	.word	0x10003ed0

0000d398 <DmConnPeerAddr>:
  return dmConnCb.ccb[connId-1].peerAddr;
    d398:	4b03      	ldr	r3, [pc, #12]	; (d3a8 <DmConnPeerAddr+0x10>)
    d39a:	3801      	subs	r0, #1
    d39c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    d3a0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d3a4:	4770      	bx	lr
    d3a6:	bf00      	nop
    d3a8:	10003ed0 	.word	0x10003ed0

0000d3ac <DmConnLocalAddrType>:
  return dmConnCb.ccb[connId-1].localAddrType;
    d3ac:	4b03      	ldr	r3, [pc, #12]	; (d3bc <DmConnLocalAddrType+0x10>)
    d3ae:	3801      	subs	r0, #1
    d3b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d3b4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    d3b8:	7d00      	ldrb	r0, [r0, #20]
    d3ba:	4770      	bx	lr
    d3bc:	10003ed0 	.word	0x10003ed0

0000d3c0 <DmConnLocalAddr>:
  return dmConnCb.ccb[connId-1].localAddr;
    d3c0:	4b03      	ldr	r3, [pc, #12]	; (d3d0 <DmConnLocalAddr+0x10>)
    d3c2:	3801      	subs	r0, #1
    d3c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d3c8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    d3cc:	3006      	adds	r0, #6
    d3ce:	4770      	bx	lr
    d3d0:	10003ed0 	.word	0x10003ed0

0000d3d4 <DmConnPeerRpa>:
  return dmConnCb.ccb[connId - 1].peerRpa;
    d3d4:	4b03      	ldr	r3, [pc, #12]	; (d3e4 <DmConnPeerRpa+0x10>)
    d3d6:	3801      	subs	r0, #1
    d3d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d3dc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    d3e0:	3020      	adds	r0, #32
    d3e2:	4770      	bx	lr
    d3e4:	10003ed0 	.word	0x10003ed0

0000d3e8 <DmConnLocalRpa>:
  return dmConnCb.ccb[connId - 1].localRpa;
    d3e8:	4b03      	ldr	r3, [pc, #12]	; (d3f8 <DmConnLocalRpa+0x10>)
    d3ea:	3801      	subs	r0, #1
    d3ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d3f0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    d3f4:	301a      	adds	r0, #26
    d3f6:	4770      	bx	lr
    d3f8:	10003ed0 	.word	0x10003ed0

0000d3fc <DmConnSecLevel>:
  return dmConnCb.ccb[connId-1].secLevel;
    d3fc:	4b03      	ldr	r3, [pc, #12]	; (d40c <DmConnSecLevel+0x10>)
    d3fe:	3801      	subs	r0, #1
    d400:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d404:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    d408:	7dc0      	ldrb	r0, [r0, #23]
    d40a:	4770      	bx	lr
    d40c:	10003ed0 	.word	0x10003ed0

0000d410 <DmConnSetIdle>:
{
    d410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return dmConnCb.ccb[connId-1].inUse;
    d414:	1e46      	subs	r6, r0, #1
    d416:	4d13      	ldr	r5, [pc, #76]	; (d464 <DmConnSetIdle+0x54>)
{
    d418:	4691      	mov	r9, r2
    d41a:	4604      	mov	r4, r0
    d41c:	4688      	mov	r8, r1
  WsfTaskLock();
    d41e:	f010 fdfd 	bl	1e01c <WsfTaskLock>
  return dmConnCb.ccb[connId-1].inUse;
    d422:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    d426:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    d42a:	0077      	lsls	r7, r6, #1
  if (DmConnInUse(connId))
    d42c:	7d9a      	ldrb	r2, [r3, #22]
    d42e:	b13a      	cbz	r2, d440 <DmConnSetIdle+0x30>
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
    d430:	89d9      	ldrh	r1, [r3, #14]
    if (idle == DM_CONN_IDLE)
    d432:	f1b9 0f00 	cmp.w	r9, #0
    d436:	d10f      	bne.n	d458 <DmConnSetIdle+0x48>
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
    d438:	ea21 0808 	bic.w	r8, r1, r8
    d43c:	f8a3 800e 	strh.w	r8, [r3, #14]
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
    d440:	443e      	add	r6, r7
    d442:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  WsfTaskUnlock();
    d446:	f010 fdf3 	bl	1e030 <WsfTaskUnlock>
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
    d44a:	89ea      	ldrh	r2, [r5, #14]
    d44c:	4806      	ldr	r0, [pc, #24]	; (d468 <DmConnSetIdle+0x58>)
    d44e:	4621      	mov	r1, r4
}
    d450:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
    d454:	f011 b920 	b.w	1e698 <WsfTrace>
      dmConnCb.ccb[connId-1].idleMask |= idleMask;
    d458:	ea48 0801 	orr.w	r8, r8, r1
    d45c:	f8a3 800e 	strh.w	r8, [r3, #14]
    d460:	e7ee      	b.n	d440 <DmConnSetIdle+0x30>
    d462:	bf00      	nop
    d464:	10003ed0 	.word	0x10003ed0
    d468:	00025d28 	.word	0x00025d28

0000d46c <DmConnCheckIdle>:
{
    d46c:	b510      	push	{r4, lr}
    d46e:	4604      	mov	r4, r0
    d470:	b082      	sub	sp, #8
  WsfTaskLock();
    d472:	f010 fdd3 	bl	1e01c <WsfTaskLock>
  idleMask = dmConnCb.ccb[connId-1].idleMask;
    d476:	4b06      	ldr	r3, [pc, #24]	; (d490 <DmConnCheckIdle+0x24>)
    d478:	1e60      	subs	r0, r4, #1
    d47a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d47e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d482:	89c0      	ldrh	r0, [r0, #14]
    d484:	9001      	str	r0, [sp, #4]
  WsfTaskUnlock();
    d486:	f010 fdd3 	bl	1e030 <WsfTaskUnlock>
}
    d48a:	9801      	ldr	r0, [sp, #4]
    d48c:	b002      	add	sp, #8
    d48e:	bd10      	pop	{r4, pc}
    d490:	10003ed0 	.word	0x10003ed0

0000d494 <DmConnRole>:
  return dmConnCb.ccb[connId-1].role;
    d494:	4b03      	ldr	r3, [pc, #12]	; (d4a4 <DmConnRole+0x10>)
    d496:	3801      	subs	r0, #1
    d498:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d49c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    d4a0:	7e40      	ldrb	r0, [r0, #25]
    d4a2:	4770      	bx	lr
    d4a4:	10003ed0 	.word	0x10003ed0

0000d4a8 <dmConnSmActCancelOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActCancelOpen(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
    d4a8:	b510      	push	{r4, lr}
  /* cancel create connection */
  HciLeCreateConnCancelCmd();
    d4aa:	f008 fdc7 	bl	1603c <HciLeCreateConnCancelCmd>

  /* pass connection initiation stopped to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
    d4ae:	2300      	movs	r3, #0
}
    d4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
    d4b4:	461a      	mov	r2, r3
    d4b6:	2101      	movs	r1, #1
    d4b8:	2016      	movs	r0, #22
    d4ba:	f000 b991 	b.w	d7e0 <dmDevPassEvtToDevPriv>
    d4be:	bf00      	nop

0000d4c0 <dmConnSmActUpdateMaster>:
 */
/*************************************************************************************************/
void dmConnSmActUpdateMaster(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  /* send HCI command */
  HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
    d4c0:	8980      	ldrh	r0, [r0, #12]
    d4c2:	3104      	adds	r1, #4
    d4c4:	f008 bcf8 	b.w	15eb8 <HciLeConnUpdateCmd>

0000d4c8 <dmConnSmActL2cUpdateInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActL2cUpdateInd(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
    d4c8:	b538      	push	{r3, r4, r5, lr}
    d4ca:	460d      	mov	r5, r1
    d4cc:	4604      	mov	r4, r0
  /* always send back response */
  L2cDmConnUpdateRsp(pMsg->l2cUpdateInd.identifier, pCcb->handle, L2C_CONN_PARAM_ACCEPTED);
    d4ce:	8981      	ldrh	r1, [r0, #12]
    d4d0:	7a28      	ldrb	r0, [r5, #8]
    d4d2:	2200      	movs	r2, #0
    d4d4:	f00c fb5c 	bl	19b90 <L2cDmConnUpdateRsp>

  /* send HCI command */
  HciLeConnUpdateCmd(pCcb->handle, pMsg->l2cUpdateInd.pConnSpec);
    d4d8:	6869      	ldr	r1, [r5, #4]
    d4da:	89a0      	ldrh	r0, [r4, #12]
}
    d4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HciLeConnUpdateCmd(pCcb->handle, pMsg->l2cUpdateInd.pConnSpec);
    d4e0:	f008 bcea 	b.w	15eb8 <HciLeConnUpdateCmd>

0000d4e4 <DmL2cConnUpdateInd>:
 *  \param  pConnSpec   Connection spec parameters.
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cConnUpdateInd(uint8_t identifier, uint16_t handle, hciConnSpec_t *pConnSpec)
{
    d4e4:	b530      	push	{r4, r5, lr}
    d4e6:	4604      	mov	r4, r0
    d4e8:	b085      	sub	sp, #20
  dmConnL2cUpdateInd_t  updateInd;
  dmConnCcb_t           *pCcb;

  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
    d4ea:	4608      	mov	r0, r1
{
    d4ec:	4615      	mov	r5, r2
  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
    d4ee:	f7ff fd2f 	bl	cf50 <dmConnCcbByHandle>
    d4f2:	b140      	cbz	r0, d506 <DmL2cConnUpdateInd+0x22>
  {
    updateInd.hdr.event = DM_CONN_MSG_L2C_UPDATE_IND;
    d4f4:	2335      	movs	r3, #53	; 0x35
    updateInd.pConnSpec = pConnSpec;
    updateInd.identifier = identifier;

    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateInd);
    d4f6:	a901      	add	r1, sp, #4
    updateInd.hdr.event = DM_CONN_MSG_L2C_UPDATE_IND;
    d4f8:	f88d 3006 	strb.w	r3, [sp, #6]
    updateInd.pConnSpec = pConnSpec;
    d4fc:	9502      	str	r5, [sp, #8]
    updateInd.identifier = identifier;
    d4fe:	f88d 400c 	strb.w	r4, [sp, #12]
    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateInd);
    d502:	f000 f905 	bl	d710 <dmConnSmExecute>
  }
}
    d506:	b005      	add	sp, #20
    d508:	bd30      	pop	{r4, r5, pc}
    d50a:	bf00      	nop

0000d50c <DmConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t DmConnOpen(uint8_t clientId, uint8_t initPhys, uint8_t addrType, uint8_t *pAddr)
{
    d50c:	b510      	push	{r4, lr}
    d50e:	b086      	sub	sp, #24
  return dmConnOpenAccept(clientId, initPhys, 0, 0, 0, 0, addrType, pAddr, DM_ROLE_MASTER);
    d510:	2400      	movs	r4, #0
    d512:	e9cd 3403 	strd	r3, r4, [sp, #12]
    d516:	e9cd 4201 	strd	r4, r2, [sp, #4]
    d51a:	9400      	str	r4, [sp, #0]
    d51c:	4623      	mov	r3, r4
    d51e:	4622      	mov	r2, r4
    d520:	f7ff fd4c 	bl	cfbc <dmConnOpenAccept>
}
    d524:	b006      	add	sp, #24
    d526:	bd10      	pop	{r4, pc}

0000d528 <dmConnSmActOpen>:
 *
 *  \return None.
*/
/*************************************************************************************************/
void dmConnSmActOpen(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
    d528:	e92d 41d0 	stmdb	sp!, {r4, r6, r7, r8, lr}
    d52c:	b089      	sub	sp, #36	; 0x24
  dmConnOpen(pMsg->apiOpen.initPhys, pMsg->apiOpen.addrType, pMsg->apiOpen.peerAddr);
    d52e:	7c4b      	ldrb	r3, [r1, #17]
    d530:	9307      	str	r3, [sp, #28]
  uint8_t phyIdx = DmScanPhyToIdx(HCI_SCAN_PHY_LE_1M_BIT);
    d532:	2001      	movs	r0, #1
{
    d534:	460c      	mov	r4, r1
  uint8_t phyIdx = DmScanPhyToIdx(HCI_SCAN_PHY_LE_1M_BIT);
    d536:	f000 fa45 	bl	d9c4 <DmScanPhyToIdx>
  HciLeCreateConnCmd(dmConnCb.scanInterval[phyIdx], dmConnCb.scanWindow[phyIdx], dmCb.initFiltPolicy,
    d53a:	4f15      	ldr	r7, [pc, #84]	; (d590 <dmConnSmActOpen+0x68>)
    d53c:	eb07 0240 	add.w	r2, r7, r0, lsl #1
    d540:	f100 0160 	add.w	r1, r0, #96	; 0x60
    d544:	f8b2 80bc 	ldrh.w	r8, [r2, #188]	; 0xbc
    d548:	4a12      	ldr	r2, [pc, #72]	; (d594 <dmConnSmActOpen+0x6c>)
    d54a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    d54e:	9106      	str	r1, [sp, #24]
  uint8_t phyIdx = DmScanPhyToIdx(HCI_SCAN_PHY_LE_1M_BIT);
    d550:	4606      	mov	r6, r0
  dmConnOpen(pMsg->apiOpen.initPhys, pMsg->apiOpen.addrType, pMsg->apiOpen.peerAddr);
    d552:	340b      	adds	r4, #11
  HciLeCreateConnCmd(dmConnCb.scanInterval[phyIdx], dmConnCb.scanWindow[phyIdx], dmCb.initFiltPolicy,
    d554:	7b50      	ldrb	r0, [r2, #13]
    d556:	7d12      	ldrb	r2, [r2, #20]
    d558:	9205      	str	r2, [sp, #20]
    d55a:	f000 fa0d 	bl	d978 <DmLlAddrType>
    d55e:	9400      	str	r4, [sp, #0]
    d560:	f04f 0c0c 	mov.w	ip, #12
    d564:	24a4      	movs	r4, #164	; 0xa4
    d566:	fb1c 4406 	smlabb	r4, ip, r6, r4
    d56a:	443c      	add	r4, r7
    d56c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    d570:	9b07      	ldr	r3, [sp, #28]
    d572:	9001      	str	r0, [sp, #4]
    d574:	9402      	str	r4, [sp, #8]
    d576:	4640      	mov	r0, r8
    d578:	f008 fcf4 	bl	15f64 <HciLeCreateConnCmd>
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_START, 0, 0);
    d57c:	2300      	movs	r3, #0
    d57e:	461a      	mov	r2, r3
    d580:	4619      	mov	r1, r3
    d582:	2016      	movs	r0, #22
}
    d584:	b009      	add	sp, #36	; 0x24
    d586:	e8bd 41d0 	ldmia.w	sp!, {r4, r6, r7, r8, lr}
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_START, 0, 0);
    d58a:	f000 b929 	b.w	d7e0 <dmDevPassEvtToDevPriv>
    d58e:	bf00      	nop
    d590:	10003ed0 	.word	0x10003ed0
    d594:	10003fa4 	.word	0x10003fa4

0000d598 <DmConnMasterInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnMasterInit(void)
{
  dmConnActSet[DM_CONN_ACT_SET_MASTER] = (dmConnAct_t *) dmConnActSetMaster;
    d598:	4b01      	ldr	r3, [pc, #4]	; (d5a0 <DmConnMasterInit+0x8>)
    d59a:	4a02      	ldr	r2, [pc, #8]	; (d5a4 <DmConnMasterInit+0xc>)
    d59c:	605a      	str	r2, [r3, #4]
}
    d59e:	4770      	bx	lr
    d5a0:	10003f94 	.word	0x10003f94
    d5a4:	00025d80 	.word	0x00025d80

0000d5a8 <dmConnSmActUpdateSlave>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActUpdateSlave(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
    d5a8:	b530      	push	{r4, r5, lr}
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
    d5aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
    d5ac:	079a      	lsls	r2, r3, #30
{
    d5ae:	b085      	sub	sp, #20
    d5b0:	4604      	mov	r4, r0
    d5b2:	460d      	mov	r5, r1
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
    d5b4:	d415      	bmi.n	d5e2 <dmConnSmActUpdateSlave+0x3a>
      (HciGetLeSupFeat() & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC))
  {
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
  }
  /* else if L2CAP connection update not already in progress */
  else if (!pCcb->updating)
    d5b6:	7c63      	ldrb	r3, [r4, #17]
    d5b8:	b1f3      	cbz	r3, d5f8 <dmConnSmActUpdateSlave+0x50>
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    d5ba:	4b14      	ldr	r3, [pc, #80]	; (d60c <dmConnSmActUpdateSlave+0x64>)
  evt.hdr.param = pCcb->connId;
    d5bc:	7c25      	ldrb	r5, [r4, #16]
  evt.handle = pCcb->handle;
    d5be:	89a2      	ldrh	r2, [r4, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    d5c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
    d5c4:	f8ad 5000 	strh.w	r5, [sp]
  evt.status = evt.hdr.status = status;
    d5c8:	210c      	movs	r1, #12
  evt.hdr.event = DM_CONN_UPDATE_IND;
    d5ca:	f640 4029 	movw	r0, #3113	; 0xc29
    d5ce:	f8ad 0002 	strh.w	r0, [sp, #2]
  evt.status = evt.hdr.status = status;
    d5d2:	f88d 1004 	strb.w	r1, [sp, #4]
  evt.handle = pCcb->handle;
    d5d6:	f8ad 2006 	strh.w	r2, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    d5da:	4668      	mov	r0, sp
    d5dc:	4798      	blx	r3
  else
  {
    /* call callback */
    dmConnUpdateCback(pCcb, (uint8_t) HCI_ERR_CMD_DISALLOWED);
  }
}
    d5de:	b005      	add	sp, #20
    d5e0:	bd30      	pop	{r4, r5, pc}
      (HciGetLeSupFeat() & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC))
    d5e2:	f00a f9e5 	bl	179b0 <HciGetLeSupFeat>
  if ((pCcb->features & HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC) &&
    d5e6:	0783      	lsls	r3, r0, #30
    d5e8:	d5e5      	bpl.n	d5b6 <dmConnSmActUpdateSlave+0xe>
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
    d5ea:	89a0      	ldrh	r0, [r4, #12]
    d5ec:	1d29      	adds	r1, r5, #4
}
    d5ee:	b005      	add	sp, #20
    d5f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
    d5f4:	f008 bc60 	b.w	15eb8 <HciLeConnUpdateCmd>
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
    d5f8:	89a0      	ldrh	r0, [r4, #12]
    pCcb->updating = TRUE;
    d5fa:	2301      	movs	r3, #1
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
    d5fc:	1d29      	adds	r1, r5, #4
    pCcb->updating = TRUE;
    d5fe:	7463      	strb	r3, [r4, #17]
}
    d600:	b005      	add	sp, #20
    d602:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    L2cDmConnUpdateReq(pCcb->handle, &pMsg->apiUpdate.connSpec);
    d606:	f00c bb4b 	b.w	19ca0 <L2cDmConnUpdateReq>
    d60a:	bf00      	nop
    d60c:	10003ed0 	.word	0x10003ed0

0000d610 <dmConnSmActL2cUpdateCnf>:
 */
/*************************************************************************************************/
void dmConnSmActL2cUpdateCnf(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  /* if connection update in progress */
  if (pCcb->updating)
    d610:	7c43      	ldrb	r3, [r0, #17]
    d612:	b1e3      	cbz	r3, d64e <dmConnSmActL2cUpdateCnf+0x3e>
  {
    pCcb->updating = FALSE;
    d614:	2300      	movs	r3, #0
    d616:	7443      	strb	r3, [r0, #17]

    /* if reason indicates failure */
    if (pMsg->l2cUpdateCnf.result != L2C_CONN_PARAM_ACCEPTED)
    d618:	888b      	ldrh	r3, [r1, #4]
    d61a:	b1c3      	cbz	r3, d64e <dmConnSmActL2cUpdateCnf+0x3e>
{
    d61c:	b500      	push	{lr}
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    d61e:	4a0c      	ldr	r2, [pc, #48]	; (d650 <dmConnSmActL2cUpdateCnf+0x40>)
  evt.hdr.param = pCcb->connId;
    d620:	f890 c010 	ldrb.w	ip, [r0, #16]
  evt.handle = pCcb->handle;
    d624:	8981      	ldrh	r1, [r0, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    d626:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
{
    d62a:	b085      	sub	sp, #20
    {
      /* call callback */
      dmConnUpdateCback(pCcb, (uint8_t) pMsg->l2cUpdateCnf.result);
    d62c:	b2db      	uxtb	r3, r3
  evt.hdr.event = DM_CONN_UPDATE_IND;
    d62e:	2029      	movs	r0, #41	; 0x29
    d630:	f88d 0002 	strb.w	r0, [sp, #2]
  evt.hdr.param = pCcb->connId;
    d634:	f8ad c000 	strh.w	ip, [sp]
  evt.status = evt.hdr.status = status;
    d638:	f88d 3003 	strb.w	r3, [sp, #3]
    d63c:	f88d 3004 	strb.w	r3, [sp, #4]
  evt.handle = pCcb->handle;
    d640:	f8ad 1006 	strh.w	r1, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
    d644:	4668      	mov	r0, sp
    d646:	4790      	blx	r2
    }
  }
}
    d648:	b005      	add	sp, #20
    d64a:	f85d fb04 	ldr.w	pc, [sp], #4
    d64e:	4770      	bx	lr
    d650:	10003ed0 	.word	0x10003ed0

0000d654 <DmL2cConnUpdateCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cConnUpdateCnf(uint16_t handle, uint16_t result)
{
    d654:	b510      	push	{r4, lr}
    d656:	b082      	sub	sp, #8
    d658:	460c      	mov	r4, r1
  dmConnL2cUpdateCnf_t  updateCnf;
  dmConnCcb_t           *pCcb;

  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
    d65a:	f7ff fc79 	bl	cf50 <dmConnCcbByHandle>
    d65e:	b138      	cbz	r0, d670 <DmL2cConnUpdateCnf+0x1c>
  {
    updateCnf.hdr.event = DM_CONN_MSG_L2C_UPDATE_CNF;
    d660:	2336      	movs	r3, #54	; 0x36
    updateCnf.result = result;

    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateCnf);
    d662:	4669      	mov	r1, sp
    updateCnf.hdr.event = DM_CONN_MSG_L2C_UPDATE_CNF;
    d664:	f88d 3002 	strb.w	r3, [sp, #2]
    updateCnf.result = result;
    d668:	f8ad 4004 	strh.w	r4, [sp, #4]
    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateCnf);
    d66c:	f000 f850 	bl	d710 <dmConnSmExecute>
  }
}
    d670:	b002      	add	sp, #8
    d672:	bd10      	pop	{r4, pc}

0000d674 <DmL2cCmdRejInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cCmdRejInd(uint16_t handle, uint16_t result)
{
    d674:	b500      	push	{lr}
  /* call callback */
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
  evt.hdr.status = HCI_SUCCESS;
  evt.reason = result;
  evt.handle = handle;
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
    d676:	4b08      	ldr	r3, [pc, #32]	; (d698 <DmL2cCmdRejInd+0x24>)
{
    d678:	b083      	sub	sp, #12
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
    d67a:	2264      	movs	r2, #100	; 0x64
  evt.handle = handle;
    d67c:	f8ad 0006 	strh.w	r0, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
    d680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  evt.hdr.event = DM_L2C_CMD_REJ_IND;
    d684:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.reason = result;
    d688:	f8ad 1004 	strh.w	r1, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *)&evt);
    d68c:	4668      	mov	r0, sp
    d68e:	4798      	blx	r3
}
    d690:	b003      	add	sp, #12
    d692:	f85d fb04 	ldr.w	pc, [sp], #4
    d696:	bf00      	nop
    d698:	10003ed0 	.word	0x10003ed0

0000d69c <dmConnSmActAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
    d69c:	4608      	mov	r0, r1
  dmAdvStartDirected(pMsg->apiOpen.advType, pMsg->apiOpen.duration, pMsg->apiOpen.addrType,
    d69e:	7c4a      	ldrb	r2, [r1, #17]
    d6a0:	7980      	ldrb	r0, [r0, #6]
    d6a2:	f101 030b 	add.w	r3, r1, #11
    d6a6:	8909      	ldrh	r1, [r1, #8]
    d6a8:	f7ff b872 	b.w	c790 <dmAdvStartDirected>

0000d6ac <dmConnSmActCancelAccept>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActCancelAccept(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
    d6ac:	b500      	push	{lr}
    d6ae:	b083      	sub	sp, #12
    d6b0:	e9cd 1000 	strd	r1, r0, [sp]
  dmAdvStopDirected();
    d6b4:	f7ff f892 	bl	c7dc <dmAdvStopDirected>

  dmConnSmActConnFailed(pCcb, pMsg);
    d6b8:	e9dd 1000 	ldrd	r1, r0, [sp]
}
    d6bc:	b003      	add	sp, #12
    d6be:	f85d eb04 	ldr.w	lr, [sp], #4
  dmConnSmActConnFailed(pCcb, pMsg);
    d6c2:	f7ff b901 	b.w	c8c8 <dmConnSmActConnFailed>
    d6c6:	bf00      	nop

0000d6c8 <dmConnSmActConnAccepted>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActConnAccepted(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
    d6c8:	b500      	push	{lr}
    d6ca:	b083      	sub	sp, #12
    d6cc:	e9cd 1000 	strd	r1, r0, [sp]
  dmAdvConnected();
    d6d0:	f7ff f8a2 	bl	c818 <dmAdvConnected>

  dmConnSmActConnOpened(pCcb, pMsg);
    d6d4:	e9dd 1000 	ldrd	r1, r0, [sp]
}
    d6d8:	b003      	add	sp, #12
    d6da:	f85d eb04 	ldr.w	lr, [sp], #4
  dmConnSmActConnOpened(pCcb, pMsg);
    d6de:	f7ff b92b 	b.w	c938 <dmConnSmActConnOpened>
    d6e2:	bf00      	nop

0000d6e4 <dmConnSmActAcceptFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActAcceptFailed(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
    d6e4:	b500      	push	{lr}
    d6e6:	b083      	sub	sp, #12
    d6e8:	e9cd 1000 	strd	r1, r0, [sp]
  dmAdvConnectFailed();
    d6ec:	f7ff f8ac 	bl	c848 <dmAdvConnectFailed>

  dmConnSmActConnFailed(pCcb, pMsg);
    d6f0:	e9dd 1000 	ldrd	r1, r0, [sp]
}
    d6f4:	b003      	add	sp, #12
    d6f6:	f85d eb04 	ldr.w	lr, [sp], #4
  dmConnSmActConnFailed(pCcb, pMsg);
    d6fa:	f7ff b8e5 	b.w	c8c8 <dmConnSmActConnFailed>
    d6fe:	bf00      	nop

0000d700 <DmConnSlaveInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSlaveInit(void)
{
  dmConnActSet[DM_CONN_ACT_SET_SLAVE] = (dmConnAct_t *) dmConnActSetSlave;
    d700:	4b01      	ldr	r3, [pc, #4]	; (d708 <DmConnSlaveInit+0x8>)
    d702:	4a02      	ldr	r2, [pc, #8]	; (d70c <DmConnSlaveInit+0xc>)
    d704:	609a      	str	r2, [r3, #8]
}
    d706:	4770      	bx	lr
    d708:	10003f94 	.word	0x10003f94
    d70c:	00025d90 	.word	0x00025d90

0000d710 <dmConnSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmExecute(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
    d710:	b570      	push	{r4, r5, r6, lr}
    d712:	4604      	mov	r4, r0
  dmConnAct_t       *actSet;
  uint8_t           action;
  uint8_t           event;

  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
    d714:	7d42      	ldrb	r2, [r0, #21]
    d716:	4814      	ldr	r0, [pc, #80]	; (d768 <dmConnSmExecute+0x58>)
{
    d718:	460d      	mov	r5, r1
  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
    d71a:	7889      	ldrb	r1, [r1, #2]
    d71c:	f010 ffbc 	bl	1e698 <WsfTrace>

  /* get the event */
  event = DM_MSG_MASK(pMsg->hdr.event);

  /* get action */
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
    d720:	7d63      	ldrb	r3, [r4, #21]
  event = DM_MSG_MASK(pMsg->hdr.event);
    d722:	78aa      	ldrb	r2, [r5, #2]
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
    d724:	4911      	ldr	r1, [pc, #68]	; (d76c <dmConnSmExecute+0x5c>)
    d726:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    d72a:	f002 020f 	and.w	r2, r2, #15
    d72e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    d732:	4413      	add	r3, r2
    d734:	eb01 0243 	add.w	r2, r1, r3, lsl #1

  /* set next state */
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
    d738:	f811 1013 	ldrb.w	r1, [r1, r3, lsl #1]
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
    d73c:	7853      	ldrb	r3, [r2, #1]
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
    d73e:	7561      	strb	r1, [r4, #21]

  /* look up action set */
  actSet = dmConnActSet[DM_CONN_ACT_SET_ID(action)];
    d740:	4a0b      	ldr	r2, [pc, #44]	; (d770 <dmConnSmExecute+0x60>)
    d742:	0919      	lsrs	r1, r3, #4
    d744:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]

  /* if action set present */
  if (actSet != NULL)
    d748:	b142      	cbz	r2, d75c <dmConnSmExecute+0x4c>
  {
    /* execute action function in action set */
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
    d74a:	f003 030f 	and.w	r3, r3, #15
    d74e:	4629      	mov	r1, r5
    d750:	4620      	mov	r0, r4
    d752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  else
  {
     /* no action */
     dmConnSmActNone(pCcb, pMsg);
  }
}
    d756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
    d75a:	4718      	bx	r3
     dmConnSmActNone(pCcb, pMsg);
    d75c:	4629      	mov	r1, r5
    d75e:	4620      	mov	r0, r4
}
    d760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     dmConnSmActNone(pCcb, pMsg);
    d764:	f7ff b8a0 	b.w	c8a8 <dmConnSmActNone>
    d768:	00025da8 	.word	0x00025da8
    d76c:	00025dcc 	.word	0x00025dcc
    d770:	10003f94 	.word	0x10003f94

0000d774 <dmDevHciHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void dmDevHciHandler(hciEvt_t *pEvent)
{
  switch (pEvent->hdr.event)
    d774:	7883      	ldrb	r3, [r0, #2]
    d776:	2b13      	cmp	r3, #19
    d778:	d80a      	bhi.n	d790 <dmDevHciHandler+0x1c>
    d77a:	2b11      	cmp	r3, #17
    d77c:	d811      	bhi.n	d7a2 <dmDevHciHandler+0x2e>
    d77e:	b973      	cbnz	r3, d79e <dmDevHciHandler+0x2a>
  dmCb.resetting = FALSE;
    d780:	490a      	ldr	r1, [pc, #40]	; (d7ac <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_RESET_CMPL_IND;
    d782:	f04f 0c20 	mov.w	ip, #32
  dmCb.resetting = FALSE;
    d786:	740b      	strb	r3, [r1, #16]
  (*dmCb.cback)((dmEvt_t *) pEvent);
    d788:	688b      	ldr	r3, [r1, #8]
  pEvent->hdr.event = DM_RESET_CMPL_IND;
    d78a:	f880 c002 	strb.w	ip, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
    d78e:	4718      	bx	r3
  switch (pEvent->hdr.event)
    d790:	2b14      	cmp	r3, #20
    d792:	d105      	bne.n	d7a0 <dmDevHciHandler+0x2c>
  (*dmCb.cback)((dmEvt_t *) pEvent);
    d794:	4b05      	ldr	r3, [pc, #20]	; (d7ac <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_HW_ERROR_IND;
    d796:	2166      	movs	r1, #102	; 0x66
  (*dmCb.cback)((dmEvt_t *) pEvent);
    d798:	689b      	ldr	r3, [r3, #8]
  pEvent->hdr.event = DM_HW_ERROR_IND;
    d79a:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
    d79c:	4718      	bx	r3
    d79e:	4770      	bx	lr
    d7a0:	4770      	bx	lr
  (*dmCb.cback)((dmEvt_t *) pEvent);
    d7a2:	4b02      	ldr	r3, [pc, #8]	; (d7ac <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
    d7a4:	2167      	movs	r1, #103	; 0x67
  (*dmCb.cback)((dmEvt_t *) pEvent);
    d7a6:	689b      	ldr	r3, [r3, #8]
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
    d7a8:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
    d7aa:	4718      	bx	r3
    d7ac:	10003fa4 	.word	0x10003fa4

0000d7b0 <dmDevMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevMsgHandler(wsfMsgHdr_t *pMsg)
{
    d7b0:	b538      	push	{r3, r4, r5, lr}
  if (!dmCb.resetting)
    d7b2:	4b09      	ldr	r3, [pc, #36]	; (d7d8 <dmDevMsgHandler+0x28>)
    d7b4:	7c1a      	ldrb	r2, [r3, #16]
    d7b6:	b972      	cbnz	r2, d7d6 <dmDevMsgHandler+0x26>
    dmCb.resetting = TRUE;
    d7b8:	4c08      	ldr	r4, [pc, #32]	; (d7dc <dmDevMsgHandler+0x2c>)
    d7ba:	2201      	movs	r2, #1
    d7bc:	741a      	strb	r2, [r3, #16]
    for (i = 0; i < DM_NUM_IDS; i++)
    d7be:	f104 0538 	add.w	r5, r4, #56	; 0x38
      (*(dmFcnIfTbl[i]->reset))();
    d7c2:	f854 3f04 	ldr.w	r3, [r4, #4]!
    d7c6:	681b      	ldr	r3, [r3, #0]
    d7c8:	4798      	blx	r3
    for (i = 0; i < DM_NUM_IDS; i++)
    d7ca:	42ac      	cmp	r4, r5
    d7cc:	d1f9      	bne.n	d7c2 <dmDevMsgHandler+0x12>
  /* execute action function */
  (*dmDevAct[DM_MSG_MASK(pMsg->event)])(pMsg);
}
    d7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HciResetSequence();
    d7d2:	f009 bfaf 	b.w	17734 <HciResetSequence>
}
    d7d6:	bd38      	pop	{r3, r4, r5, pc}
    d7d8:	10003fa4 	.word	0x10003fa4
    d7dc:	10002afc 	.word	0x10002afc

0000d7e0 <dmDevPassEvtToDevPriv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToDevPriv(uint8_t event, uint8_t param, uint8_t advHandle, bool_t connectable)
{
    d7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7e2:	4606      	mov	r6, r0
    d7e4:	b083      	sub	sp, #12
    d7e6:	460d      	mov	r5, r1
    d7e8:	4614      	mov	r4, r2
    d7ea:	461f      	mov	r7, r3
  dmDevPrivMsg_t evt;

  DM_TRACE_INFO3("dmDevPassEvtToDevPriv: event: %d, param: %d, advHandle: %d", event, param, advHandle);
    d7ec:	480a      	ldr	r0, [pc, #40]	; (d818 <dmDevPassEvtToDevPriv+0x38>)
    d7ee:	4613      	mov	r3, r2
    d7f0:	460a      	mov	r2, r1
    d7f2:	4631      	mov	r1, r6
    d7f4:	f010 ff50 	bl	1e698 <WsfTrace>
  evt.hdr.param = param;
  evt.privCtrl.advHandle = advHandle;
  evt.privCtrl.connectable = connectable;

  /* pass event to device privacy */
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
    d7f8:	4b08      	ldr	r3, [pc, #32]	; (d81c <dmDevPassEvtToDevPriv+0x3c>)
  evt.hdr.event = event;
    d7fa:	f88d 6002 	strb.w	r6, [sp, #2]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
    d7fe:	685b      	ldr	r3, [r3, #4]
  evt.hdr.param = param;
    d800:	f8ad 5000 	strh.w	r5, [sp]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
    d804:	689b      	ldr	r3, [r3, #8]
  evt.privCtrl.advHandle = advHandle;
    d806:	f88d 4004 	strb.w	r4, [sp, #4]
  evt.privCtrl.connectable = connectable;
    d80a:	f88d 7005 	strb.w	r7, [sp, #5]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
    d80e:	4668      	mov	r0, sp
    d810:	4798      	blx	r3
}
    d812:	b003      	add	sp, #12
    d814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d816:	bf00      	nop
    d818:	00025e50 	.word	0x00025e50
    d81c:	10002b00 	.word	0x10002b00

0000d820 <dmDevPassEvtToConnCte>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToConnCte(uint8_t state, dmConnId_t connId)
{
    d820:	b500      	push	{lr}
  evt.event = DM_CONN_CTE_MSG_STATE;
  evt.status = state;
  evt.param = connId;

  /* pass event to Connection CTE */
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
    d822:	4b08      	ldr	r3, [pc, #32]	; (d844 <dmDevPassEvtToConnCte+0x24>)
{
    d824:	b083      	sub	sp, #12
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
    d826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  evt.status = state;
    d828:	f88d 0007 	strb.w	r0, [sp, #7]
  evt.event = DM_CONN_CTE_MSG_STATE;
    d82c:	22d7      	movs	r2, #215	; 0xd7
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
    d82e:	689b      	ldr	r3, [r3, #8]
  evt.event = DM_CONN_CTE_MSG_STATE;
    d830:	f88d 2006 	strb.w	r2, [sp, #6]
  evt.param = connId;
    d834:	f8ad 1004 	strh.w	r1, [sp, #4]
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
    d838:	a801      	add	r0, sp, #4
    d83a:	4798      	blx	r3
}
    d83c:	b003      	add	sp, #12
    d83e:	f85d fb04 	ldr.w	pc, [sp], #4
    d842:	bf00      	nop
    d844:	10002b00 	.word	0x10002b00

0000d848 <DmDevReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevReset(void)
{
    d848:	b508      	push	{r3, lr}
  wsfMsgHdr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
    d84a:	2004      	movs	r0, #4
    d84c:	f010 fba4 	bl	1df98 <WsfMsgAlloc>
    d850:	b140      	cbz	r0, d864 <DmDevReset+0x1c>
  {
    pMsg->event = DM_DEV_MSG_API_RESET;

    WsfMsgSend(dmCb.handlerId, pMsg);
    d852:	4b05      	ldr	r3, [pc, #20]	; (d868 <DmDevReset+0x20>)
    pMsg->event = DM_DEV_MSG_API_RESET;
    d854:	2270      	movs	r2, #112	; 0x70
    d856:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
    d858:	4601      	mov	r1, r0
    d85a:	7b18      	ldrb	r0, [r3, #12]
  }
}
    d85c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    d860:	f010 bba6 	b.w	1dfb0 <WsfMsgSend>
}
    d864:	bd08      	pop	{r3, pc}
    d866:	bf00      	nop
    d868:	10003fa4 	.word	0x10003fa4

0000d86c <DmDevVsInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmDevVsInit(uint8_t param)
{
  HciVsInit(param);
    d86c:	f00b bfe4 	b.w	19838 <HciVsInit>

0000d870 <dmHciEvtCback>:
static void dmHciEvtCback(hciEvt_t *pEvent)
{
  WSF_ASSERT(pEvent->hdr.event <= HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT);

  /* if DM not resetting or resetting but incoming event is HCI reset sequence complete event */
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
    d870:	4b07      	ldr	r3, [pc, #28]	; (d890 <dmHciEvtCback+0x20>)
    d872:	7c1b      	ldrb	r3, [r3, #16]
    d874:	b93b      	cbnz	r3, d886 <dmHciEvtCback+0x16>
    d876:	7883      	ldrb	r3, [r0, #2]
  {
    /* route event to DM component handling function */
    (*(dmFcnIfTbl[dmHciToIdTbl[pEvent->hdr.event]]->hciHandler))(pEvent);
    d878:	4906      	ldr	r1, [pc, #24]	; (d894 <dmHciEvtCback+0x24>)
    d87a:	4a07      	ldr	r2, [pc, #28]	; (d898 <dmHciEvtCback+0x28>)
    d87c:	5ccb      	ldrb	r3, [r1, r3]
    d87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d882:	685b      	ldr	r3, [r3, #4]
    d884:	4718      	bx	r3
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
    d886:	7883      	ldrb	r3, [r0, #2]
    d888:	2b00      	cmp	r3, #0
    d88a:	d0f5      	beq.n	d878 <dmHciEvtCback+0x8>
  }
}
    d88c:	4770      	bx	lr
    d88e:	bf00      	nop
    d890:	10003fa4 	.word	0x10003fa4
    d894:	00025f34 	.word	0x00025f34
    d898:	10002b00 	.word	0x10002b00

0000d89c <dmEmptyReset>:
 */
/*************************************************************************************************/
void dmEmptyReset(void)
{
  /* empty */
}
    d89c:	4770      	bx	lr
    d89e:	bf00      	nop

0000d8a0 <dmEmptyHandler>:
 */
/*************************************************************************************************/
void dmEmptyHandler(wsfMsgHdr_t *pMsg)
{
  return;
}
    d8a0:	4770      	bx	lr
    d8a2:	bf00      	nop

0000d8a4 <dmDevPassHciEvtToConn>:
 */
/*************************************************************************************************/
void dmDevPassHciEvtToConn(hciEvt_t *pEvent)
{
  /* pass event to DM connection management module */
  (*(dmFcnIfTbl[DM_ID_CONN]->hciHandler))(pEvent);
    d8a4:	4b01      	ldr	r3, [pc, #4]	; (d8ac <dmDevPassHciEvtToConn+0x8>)
    d8a6:	68db      	ldr	r3, [r3, #12]
    d8a8:	685b      	ldr	r3, [r3, #4]
    d8aa:	4718      	bx	r3
    d8ac:	10002b00 	.word	0x10002b00

0000d8b0 <DmRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmRegister(dmCback_t cback)
{
    d8b0:	b510      	push	{r4, lr}
  dmCb.cback = cback;

  /* if LESC is enabled */
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
    d8b2:	4a09      	ldr	r2, [pc, #36]	; (d8d8 <DmRegister+0x28>)
    d8b4:	4b09      	ldr	r3, [pc, #36]	; (d8dc <DmRegister+0x2c>)
    d8b6:	6a12      	ldr	r2, [r2, #32]
  dmCb.cback = cback;
    d8b8:	4c09      	ldr	r4, [pc, #36]	; (d8e0 <DmRegister+0x30>)
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
    d8ba:	429a      	cmp	r2, r3
{
    d8bc:	b09a      	sub	sp, #104	; 0x68
  dmCb.cback = cback;
    d8be:	60a0      	str	r0, [r4, #8]
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
    d8c0:	d008      	beq.n	d8d4 <DmRegister+0x24>
  {
    /* if largest LESC key length is larger than maximum RX PDU length */
    if (SMP_PUB_KEY_MSG_LEN > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
    d8c2:	f00a f87d 	bl	179c0 <HciGetMaxRxAclLen>
    d8c6:	2844      	cmp	r0, #68	; 0x44
    d8c8:	d804      	bhi.n	d8d4 <DmRegister+0x24>
    {
      dmEvt_t evt;

      evt.hdr.param = 0;
    d8ca:	4a06      	ldr	r2, [pc, #24]	; (d8e4 <DmRegister+0x34>)
      evt.hdr.event = DM_ERROR_IND;
      evt.hdr.status = DM_ERR_SMP_RX_PDU_LEN_EXCEEDED;

      (*dmCb.cback)(&evt);
    d8cc:	68a3      	ldr	r3, [r4, #8]
      evt.hdr.param = 0;
    d8ce:	9201      	str	r2, [sp, #4]
      (*dmCb.cback)(&evt);
    d8d0:	a801      	add	r0, sp, #4
    d8d2:	4798      	blx	r3
    }
  }
}
    d8d4:	b01a      	add	sp, #104	; 0x68
    d8d6:	bd10      	pop	{r4, pc}
    d8d8:	10002b00 	.word	0x10002b00
    d8dc:	00025f28 	.word	0x00025f28
    d8e0:	10003fa4 	.word	0x10003fa4
    d8e4:	01650000 	.word	0x01650000

0000d8e8 <DmFindAdType>:
{
  /* while not at end of data and
   * data element length is not zero and
   * data element length is not erroneously more than the data length
   */
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
    d8e8:	b1e9      	cbz	r1, d926 <DmFindAdType+0x3e>
{
    d8ea:	b410      	push	{r4}
    d8ec:	e007      	b.n	d8fe <DmFindAdType+0x16>
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
    d8ee:	428c      	cmp	r4, r1
    {
      return pData;
    }

    /* else go to next element */
    dataLen = dataLen - pData[DM_AD_LEN_IDX] - 1;
    d8f0:	b299      	uxth	r1, r3
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
    d8f2:	d210      	bcs.n	d916 <DmFindAdType+0x2e>
    if (pData[DM_AD_TYPE_IDX] == adType)
    d8f4:	7853      	ldrb	r3, [r2, #1]
    d8f6:	4283      	cmp	r3, r0
    d8f8:	d011      	beq.n	d91e <DmFindAdType+0x36>
    pData = pData + pData[DM_AD_LEN_IDX] + 1;
    d8fa:	4462      	add	r2, ip
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
    d8fc:	b159      	cbz	r1, d916 <DmFindAdType+0x2e>
    d8fe:	7814      	ldrb	r4, [r2, #0]
    d900:	b2a3      	uxth	r3, r4
    dataLen = dataLen - pData[DM_AD_LEN_IDX] - 1;
    d902:	43db      	mvns	r3, r3
    d904:	440b      	add	r3, r1
    pData = pData + pData[DM_AD_LEN_IDX] + 1;
    d906:	f104 0c01 	add.w	ip, r4, #1
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
    d90a:	2c00      	cmp	r4, #0
    d90c:	d1ef      	bne.n	d8ee <DmFindAdType+0x6>
  }

  /* not found */
  return NULL;
    d90e:	4620      	mov	r0, r4
}
    d910:	f85d 4b04 	ldr.w	r4, [sp], #4
    d914:	4770      	bx	lr
  return NULL;
    d916:	2000      	movs	r0, #0
}
    d918:	f85d 4b04 	ldr.w	r4, [sp], #4
    d91c:	4770      	bx	lr
    d91e:	4610      	mov	r0, r2
    d920:	f85d 4b04 	ldr.w	r4, [sp], #4
    d924:	4770      	bx	lr
  return NULL;
    d926:	4608      	mov	r0, r1
}
    d928:	4770      	bx	lr
    d92a:	bf00      	nop

0000d92c <DmHandlerInit>:
 */
/*************************************************************************************************/
void DmHandlerInit(wsfHandlerId_t handlerId)
{
  /* store handler ID */
  dmCb.handlerId = handlerId;
    d92c:	4b04      	ldr	r3, [pc, #16]	; (d940 <DmHandlerInit+0x14>)
{
    d92e:	4601      	mov	r1, r0

  dmCb.llPrivEnabled = FALSE;
    d930:	2200      	movs	r2, #0
  dmCb.resetting = FALSE;

  /* register with the HCI event interface */
  HciEvtRegister(dmHciEvtCback);
    d932:	4804      	ldr	r0, [pc, #16]	; (d944 <DmHandlerInit+0x18>)
  dmCb.handlerId = handlerId;
    d934:	7319      	strb	r1, [r3, #12]
  dmCb.llPrivEnabled = FALSE;
    d936:	759a      	strb	r2, [r3, #22]
  dmCb.resetting = FALSE;
    d938:	741a      	strb	r2, [r3, #16]
  HciEvtRegister(dmHciEvtCback);
    d93a:	f008 b87f 	b.w	15a3c <HciEvtRegister>
    d93e:	bf00      	nop
    d940:	10003fa4 	.word	0x10003fa4
    d944:	0000d871 	.word	0x0000d871

0000d948 <DmHandler>:
 */
/*************************************************************************************************/
void DmHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
    d948:	b151      	cbz	r1, d960 <DmHandler+0x18>
  {
    WSF_ASSERT(DM_ID_FROM_MSG(pMsg->event) < DM_NUM_IDS);

    /* if DM not resetting */
    if (!dmCb.resetting)
    d94a:	4b06      	ldr	r3, [pc, #24]	; (d964 <DmHandler+0x1c>)
    d94c:	7c1b      	ldrb	r3, [r3, #16]
    d94e:	b93b      	cbnz	r3, d960 <DmHandler+0x18>
    {
      /* route message to DM component handling function */
      (*(dmFcnIfTbl[DM_ID_FROM_MSG(pMsg->event)]->msgHandler))(pMsg);
    d950:	788b      	ldrb	r3, [r1, #2]
    d952:	4a05      	ldr	r2, [pc, #20]	; (d968 <DmHandler+0x20>)
    d954:	091b      	lsrs	r3, r3, #4
    d956:	4608      	mov	r0, r1
    d958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d95c:	689b      	ldr	r3, [r3, #8]
    d95e:	4718      	bx	r3
  /* Handle events */
  else if (event)
  {

  }
}
    d960:	4770      	bx	lr
    d962:	bf00      	nop
    d964:	10003fa4 	.word	0x10003fa4
    d968:	10002b00 	.word	0x10002b00

0000d96c <DmLlPrivEnabled>:
 *  \return TRUE if LL Privacy is enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmLlPrivEnabled(void)
{
  return dmCb.llPrivEnabled;
    d96c:	4b01      	ldr	r3, [pc, #4]	; (d974 <DmLlPrivEnabled+0x8>)
}
    d96e:	7d98      	ldrb	r0, [r3, #22]
    d970:	4770      	bx	lr
    d972:	bf00      	nop
    d974:	10003fa4 	.word	0x10003fa4

0000d978 <DmLlAddrType>:
uint8_t DmLlAddrType(uint8_t addrType)
{
  uint8_t llAddrType = addrType;

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
    d978:	4b04      	ldr	r3, [pc, #16]	; (d98c <DmLlAddrType+0x14>)
    d97a:	7d9b      	ldrb	r3, [r3, #22]
    d97c:	b12b      	cbz	r3, d98a <DmLlAddrType+0x12>
  {
    if (addrType == DM_ADDR_PUBLIC)
    d97e:	b118      	cbz	r0, d988 <DmLlAddrType+0x10>
    {
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
    }
    else if (addrType == DM_ADDR_RANDOM)
    {
      llAddrType = DM_ADDR_RANDOM_IDENTITY;
    d980:	2801      	cmp	r0, #1
    d982:	bf08      	it	eq
    d984:	2003      	moveq	r0, #3
    d986:	4770      	bx	lr
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
    d988:	2002      	movs	r0, #2
    }
  }

  return llAddrType;
}
    d98a:	4770      	bx	lr
    d98c:	10003fa4 	.word	0x10003fa4

0000d990 <DmHostAddrType>:
uint8_t DmHostAddrType(uint8_t addrType)
{
  uint8_t hostAddrType = addrType;

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
    d990:	4b05      	ldr	r3, [pc, #20]	; (d9a8 <DmHostAddrType+0x18>)
    d992:	7d9b      	ldrb	r3, [r3, #22]
    d994:	b133      	cbz	r3, d9a4 <DmHostAddrType+0x14>
  {
    if (addrType == DM_ADDR_PUBLIC_IDENTITY)
    d996:	2802      	cmp	r0, #2
    d998:	d003      	beq.n	d9a2 <DmHostAddrType+0x12>
    {
      hostAddrType = DM_ADDR_PUBLIC;
    }
    else if (addrType == DM_ADDR_RANDOM_IDENTITY)
    {
      hostAddrType = DM_ADDR_RANDOM;
    d99a:	2803      	cmp	r0, #3
    d99c:	bf08      	it	eq
    d99e:	2001      	moveq	r0, #1
    d9a0:	4770      	bx	lr
      hostAddrType = DM_ADDR_PUBLIC;
    d9a2:	2000      	movs	r0, #0
    }
  }

  return hostAddrType;
}
    d9a4:	4770      	bx	lr
    d9a6:	bf00      	nop
    d9a8:	10003fa4 	.word	0x10003fa4

0000d9ac <DmSizeOfEvt>:
uint16_t DmSizeOfEvt(dmEvt_t *pDmEvt)
{
  uint16_t len;

  /* if a valid DM event ID */
  if ((pDmEvt->hdr.event >= DM_CBACK_START) && (pDmEvt->hdr.event <= DM_CBACK_END))
    d9ac:	7883      	ldrb	r3, [r0, #2]
    d9ae:	3b20      	subs	r3, #32
    d9b0:	b2da      	uxtb	r2, r3
    d9b2:	2a48      	cmp	r2, #72	; 0x48
  {
    len = dmEvtCbackLen[pDmEvt->hdr.event - DM_CBACK_START];
    d9b4:	bf9a      	itte	ls
    d9b6:	4a02      	ldrls	r2, [pc, #8]	; (d9c0 <DmSizeOfEvt+0x14>)
    d9b8:	f832 0013 	ldrhls.w	r0, [r2, r3, lsl #1]
  }
  else
  {
    len = sizeof(wsfMsgHdr_t);
    d9bc:	2004      	movhi	r0, #4
  }

  return len;
}
    d9be:	4770      	bx	lr
    d9c0:	00025e98 	.word	0x00025e98

0000d9c4 <DmScanPhyToIdx>:
 */
/*************************************************************************************************/
uint8_t DmScanPhyToIdx(uint8_t scanPhy)
{
  return dmScanPhyToIdx(DM_NUM_PHYS, scanPhy);
}
    d9c4:	3801      	subs	r0, #1
    d9c6:	bf18      	it	ne
    d9c8:	2001      	movne	r0, #1
    d9ca:	4770      	bx	lr

0000d9cc <DmInitPhyToIdx>:
    d9cc:	3801      	subs	r0, #1
    d9ce:	bf18      	it	ne
    d9d0:	2001      	movne	r0, #1
    d9d2:	4770      	bx	lr

0000d9d4 <dmPrivMsgHandler>:
 */
/*************************************************************************************************/
void dmPrivMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmPrivAct[DM_MSG_MASK(pMsg->event)])((dmPrivMsg_t *) pMsg);
    d9d4:	7883      	ldrb	r3, [r0, #2]
    d9d6:	4a03      	ldr	r2, [pc, #12]	; (d9e4 <dmPrivMsgHandler+0x10>)
    d9d8:	f003 030f 	and.w	r3, r3, #15
    d9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e0:	4718      	bx	r3
    d9e2:	bf00      	nop
    d9e4:	00025f7c 	.word	0x00025f7c

0000d9e8 <dmPrivReset>:
 */
/*************************************************************************************************/
void dmPrivReset(void)
{
  /* initialize control block */
  dmPrivCb.inProgress = 0;
    d9e8:	4902      	ldr	r1, [pc, #8]	; (d9f4 <dmPrivReset+0xc>)
  dmCb.llPrivEnabled = FALSE;
    d9ea:	4a03      	ldr	r2, [pc, #12]	; (d9f8 <dmPrivReset+0x10>)
  dmPrivCb.inProgress = 0;
    d9ec:	2300      	movs	r3, #0
    d9ee:	70cb      	strb	r3, [r1, #3]
  dmCb.llPrivEnabled = FALSE;
    d9f0:	7593      	strb	r3, [r2, #22]
}
    d9f2:	4770      	bx	lr
    d9f4:	10003fbc 	.word	0x10003fbc
    d9f8:	10003fa4 	.word	0x10003fa4

0000d9fc <dmPrivActGenAddrAesCmpl>:
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
    d9fc:	6842      	ldr	r2, [r0, #4]
    d9fe:	8811      	ldrh	r1, [r2, #0]
    da00:	7892      	ldrb	r2, [r2, #2]
    da02:	7182      	strb	r2, [r0, #6]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
    da04:	4a08      	ldr	r2, [pc, #32]	; (da28 <dmPrivActGenAddrAesCmpl+0x2c>)
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
    da06:	8081      	strh	r1, [r0, #4]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
    da08:	7b11      	ldrb	r1, [r2, #12]
    da0a:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
    da0e:	7241      	strb	r1, [r0, #9]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
    da10:	78d1      	ldrb	r1, [r2, #3]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
    da12:	f8a0 c007 	strh.w	ip, [r0, #7]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
    da16:	f021 0102 	bic.w	r1, r1, #2
    da1a:	70d1      	strb	r1, [r2, #3]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
    da1c:	4a03      	ldr	r2, [pc, #12]	; (da2c <dmPrivActGenAddrAesCmpl+0x30>)
  pAddrEvt->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
    da1e:	2138      	movs	r1, #56	; 0x38
    da20:	8041      	strh	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
    da22:	6893      	ldr	r3, [r2, #8]
    da24:	4718      	bx	r3
    da26:	bf00      	nop
    da28:	10003fbc 	.word	0x10003fbc
    da2c:	10003fa4 	.word	0x10003fa4

0000da30 <dmPrivActResAddrAesCmpl>:
{
    da30:	b410      	push	{r4}
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
    da32:	4b0f      	ldr	r3, [pc, #60]	; (da70 <dmPrivActResAddrAesCmpl+0x40>)
    da34:	6842      	ldr	r2, [r0, #4]
    da36:	781c      	ldrb	r4, [r3, #0]
    da38:	7811      	ldrb	r1, [r2, #0]
    da3a:	428c      	cmp	r4, r1
    da3c:	d00c      	beq.n	da58 <dmPrivActResAddrAesCmpl+0x28>
    pMsg->hdr.status = HCI_ERR_AUTH_FAILURE;
    da3e:	2205      	movs	r2, #5
    da40:	70c2      	strb	r2, [r0, #3]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
    da42:	78da      	ldrb	r2, [r3, #3]
  (*dmCb.cback)((dmEvt_t *) pMsg);
    da44:	4c0b      	ldr	r4, [pc, #44]	; (da74 <dmPrivActResAddrAesCmpl+0x44>)
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
    da46:	f022 0201 	bic.w	r2, r2, #1
    da4a:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
    da4c:	2137      	movs	r1, #55	; 0x37
  (*dmCb.cback)((dmEvt_t *) pMsg);
    da4e:	68a3      	ldr	r3, [r4, #8]
}
    da50:	f85d 4b04 	ldr.w	r4, [sp], #4
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
    da54:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pMsg);
    da56:	4718      	bx	r3
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
    da58:	7851      	ldrb	r1, [r2, #1]
    da5a:	785c      	ldrb	r4, [r3, #1]
    da5c:	428c      	cmp	r4, r1
    da5e:	f102 0201 	add.w	r2, r2, #1
    da62:	d1ec      	bne.n	da3e <dmPrivActResAddrAesCmpl+0xe>
    da64:	7899      	ldrb	r1, [r3, #2]
    da66:	7852      	ldrb	r2, [r2, #1]
    da68:	4291      	cmp	r1, r2
    da6a:	d1e8      	bne.n	da3e <dmPrivActResAddrAesCmpl+0xe>
    pMsg->hdr.status = HCI_SUCCESS;
    da6c:	2200      	movs	r2, #0
    da6e:	e7e7      	b.n	da40 <dmPrivActResAddrAesCmpl+0x10>
    da70:	10003fbc 	.word	0x10003fbc
    da74:	10003fa4 	.word	0x10003fa4

0000da78 <dmPrivActAddDevToResList>:
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
    da78:	4a07      	ldr	r2, [pc, #28]	; (da98 <dmPrivActAddDevToResList+0x20>)
{
    da7a:	4601      	mov	r1, r0
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
    da7c:	4603      	mov	r3, r0
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
    da7e:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    da82:	7210      	strb	r0, [r2, #8]
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
    da84:	f833 0b1b 	ldrh.w	r0, [r3], #27
    da88:	8090      	strh	r0, [r2, #4]
  HciLeAddDeviceToResolvingListCmd(pDev->addrType, pDev->peerAddr, pDev->peerIrk, pDev->localIrk);
    da8a:	7908      	ldrb	r0, [r1, #4]
    da8c:	f101 020b 	add.w	r2, r1, #11
    da90:	3105      	adds	r1, #5
    da92:	f009 b9c5 	b.w	16e20 <HciLeAddDeviceToResolvingListCmd>
    da96:	bf00      	nop
    da98:	10003fbc 	.word	0x10003fbc

0000da9c <dmPrivActRemDevFromResList>:
  dmPrivCb.remDevFromResListParam = pMsg->hdr.param;
    da9c:	4601      	mov	r1, r0
    da9e:	4b03      	ldr	r3, [pc, #12]	; (daac <dmPrivActRemDevFromResList+0x10>)
    daa0:	f831 2b05 	ldrh.w	r2, [r1], #5
    daa4:	80da      	strh	r2, [r3, #6]
  HciLeRemoveDeviceFromResolvingList(pDev->addrType, pDev->peerAddr);
    daa6:	7900      	ldrb	r0, [r0, #4]
    daa8:	f009 ba10 	b.w	16ecc <HciLeRemoveDeviceFromResolvingList>
    daac:	10003fbc 	.word	0x10003fbc

0000dab0 <dmPrivActClearResList>:
  HciLeClearResolvingList();
    dab0:	f009 ba46 	b.w	16f40 <HciLeClearResolvingList>

0000dab4 <dmPrivActSetAddrResEnable>:
  dmPrivCb.addrResEnable = enable;
    dab4:	4b02      	ldr	r3, [pc, #8]	; (dac0 <dmPrivActSetAddrResEnable+0xc>)
  dmPrivSetAddrResEnable(pAddrRes->enable);
    dab6:	7900      	ldrb	r0, [r0, #4]
  dmPrivCb.addrResEnable = enable;
    dab8:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
    daba:	f009 baa1 	b.w	17000 <HciLeSetAddrResolutionEnable>
    dabe:	bf00      	nop
    dac0:	10003fbc 	.word	0x10003fbc

0000dac4 <dmPrivActSetPrivacyMode>:
  HciLeSetPrivacyModeCmd(pPrivacyMode->addrType, pPrivacyMode->peerAddr, pPrivacyMode->mode);
    dac4:	7ac2      	ldrb	r2, [r0, #11]
    dac6:	1d41      	adds	r1, r0, #5
    dac8:	7900      	ldrb	r0, [r0, #4]
    daca:	f009 bacd 	b.w	17068 <HciLeSetPrivacyModeCmd>
    dace:	bf00      	nop

0000dad0 <dmPrivHciHandler>:
  switch (pEvent->hdr.event)
    dad0:	7883      	ldrb	r3, [r0, #2]
    dad2:	3b15      	subs	r3, #21
{
    dad4:	b570      	push	{r4, r5, r6, lr}
    dad6:	4604      	mov	r4, r0
  switch (pEvent->hdr.event)
    dad8:	2b05      	cmp	r3, #5
    dada:	d858      	bhi.n	db8e <dmPrivHciHandler+0xbe>
    dadc:	e8df f003 	tbb	[pc, r3]
    dae0:	392b200e 	.word	0x392b200e
    dae4:	0341      	.short	0x0341
      if (pEvent->hdr.status == HCI_SUCCESS)
    dae6:	78c3      	ldrb	r3, [r0, #3]
      pEvent->hdr.event = DM_PRIV_SET_ADDR_RES_ENABLE_IND;
    dae8:	223f      	movs	r2, #63	; 0x3f
    daea:	7082      	strb	r2, [r0, #2]
      if (pEvent->hdr.status == HCI_SUCCESS)
    daec:	2b00      	cmp	r3, #0
    daee:	d040      	beq.n	db72 <dmPrivHciHandler+0xa2>
    daf0:	4d27      	ldr	r5, [pc, #156]	; (db90 <dmPrivHciHandler+0xc0>)
  (*dmCb.cback)((dmEvt_t *)pEvent);
    daf2:	68ab      	ldr	r3, [r5, #8]
    daf4:	4620      	mov	r0, r4
}
    daf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
    dafa:	4718      	bx	r3
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
    dafc:	4b25      	ldr	r3, [pc, #148]	; (db94 <dmPrivHciHandler+0xc4>)
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
    dafe:	4d24      	ldr	r5, [pc, #144]	; (db90 <dmPrivHciHandler+0xc0>)
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
    db00:	889a      	ldrh	r2, [r3, #4]
    db02:	8002      	strh	r2, [r0, #0]
      pEvent->hdr.event = DM_PRIV_ADD_DEV_TO_RES_LIST_IND;
    db04:	213a      	movs	r1, #58	; 0x3a
    db06:	7081      	strb	r1, [r0, #2]
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
    db08:	7a1a      	ldrb	r2, [r3, #8]
    db0a:	2a00      	cmp	r2, #0
    db0c:	d0f1      	beq.n	daf2 <dmPrivHciHandler+0x22>
    db0e:	78c1      	ldrb	r1, [r0, #3]
    db10:	7daa      	ldrb	r2, [r5, #22]
    db12:	430a      	orrs	r2, r1
    db14:	d1ed      	bne.n	daf2 <dmPrivHciHandler+0x22>
  dmPrivCb.addrResEnable = enable;
    db16:	2001      	movs	r0, #1
    db18:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
    db1a:	f009 fa71 	bl	17000 <HciLeSetAddrResolutionEnable>
}
    db1e:	e7e8      	b.n	daf2 <dmPrivHciHandler+0x22>
      pEvent->hdr.param = dmPrivCb.remDevFromResListParam;
    db20:	4b1c      	ldr	r3, [pc, #112]	; (db94 <dmPrivHciHandler+0xc4>)
    db22:	4d1b      	ldr	r5, [pc, #108]	; (db90 <dmPrivHciHandler+0xc0>)
    db24:	88db      	ldrh	r3, [r3, #6]
    db26:	8003      	strh	r3, [r0, #0]
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
    db28:	223b      	movs	r2, #59	; 0x3b
  (*dmCb.cback)((dmEvt_t *)pEvent);
    db2a:	68ab      	ldr	r3, [r5, #8]
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
    db2c:	7082      	strb	r2, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
    db2e:	4620      	mov	r0, r4
}
    db30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
    db34:	4718      	bx	r3
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
    db36:	78c0      	ldrb	r0, [r0, #3]
    db38:	4d15      	ldr	r5, [pc, #84]	; (db90 <dmPrivHciHandler+0xc0>)
      pEvent->hdr.event = DM_PRIV_CLEAR_RES_LIST_IND;
    db3a:	233c      	movs	r3, #60	; 0x3c
    db3c:	70a3      	strb	r3, [r4, #2]
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
    db3e:	2800      	cmp	r0, #0
    db40:	d1d7      	bne.n	daf2 <dmPrivHciHandler+0x22>
    db42:	7dab      	ldrb	r3, [r5, #22]
    db44:	2b00      	cmp	r3, #0
    db46:	d0d4      	beq.n	daf2 <dmPrivHciHandler+0x22>
  dmPrivCb.addrResEnable = enable;
    db48:	4b12      	ldr	r3, [pc, #72]	; (db94 <dmPrivHciHandler+0xc4>)
    db4a:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
    db4c:	f009 fa58 	bl	17000 <HciLeSetAddrResolutionEnable>
}
    db50:	e7cf      	b.n	daf2 <dmPrivHciHandler+0x22>
      pEvent->hdr.event = DM_PRIV_READ_PEER_RES_ADDR_IND;
    db52:	4d0f      	ldr	r5, [pc, #60]	; (db90 <dmPrivHciHandler+0xc0>)
    db54:	233d      	movs	r3, #61	; 0x3d
    db56:	7083      	strb	r3, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
    db58:	68ab      	ldr	r3, [r5, #8]
    db5a:	4620      	mov	r0, r4
}
    db5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
    db60:	4718      	bx	r3
      pEvent->hdr.event = DM_PRIV_READ_LOCAL_RES_ADDR_IND;
    db62:	4d0b      	ldr	r5, [pc, #44]	; (db90 <dmPrivHciHandler+0xc0>)
    db64:	233e      	movs	r3, #62	; 0x3e
    db66:	7083      	strb	r3, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
    db68:	68ab      	ldr	r3, [r5, #8]
    db6a:	4620      	mov	r0, r4
}
    db6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
    db70:	4718      	bx	r3
        dmCb.llPrivEnabled = dmPrivCb.addrResEnable;
    db72:	4a08      	ldr	r2, [pc, #32]	; (db94 <dmPrivHciHandler+0xc4>)
    db74:	4d06      	ldr	r5, [pc, #24]	; (db90 <dmPrivHciHandler+0xc0>)
    db76:	7a51      	ldrb	r1, [r2, #9]
    db78:	75a9      	strb	r1, [r5, #22]
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
    db7a:	2900      	cmp	r1, #0
    db7c:	461a      	mov	r2, r3
    db7e:	bf15      	itete	ne
    db80:	2101      	movne	r1, #1
    db82:	2100      	moveq	r1, #0
    db84:	2015      	movne	r0, #21
    db86:	2014      	moveq	r0, #20
    db88:	f7ff fe2a 	bl	d7e0 <dmDevPassEvtToDevPriv>
    db8c:	e7b1      	b.n	daf2 <dmPrivHciHandler+0x22>
}
    db8e:	bd70      	pop	{r4, r5, r6, pc}
    db90:	10003fa4 	.word	0x10003fa4
    db94:	10003fbc 	.word	0x10003fbc

0000db98 <dmPrivActResolveAddr>:
{
    db98:	b510      	push	{r4, lr}
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
    db9a:	4c18      	ldr	r4, [pc, #96]	; (dbfc <dmPrivActResolveAddr+0x64>)
    db9c:	78e3      	ldrb	r3, [r4, #3]
    db9e:	f013 0c01 	ands.w	ip, r3, #1
{
    dba2:	b086      	sub	sp, #24
    dba4:	4601      	mov	r1, r0
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
    dba6:	d008      	beq.n	dbba <dmPrivActResolveAddr+0x22>
    (*dmCb.cback)((dmEvt_t *) pMsg);
    dba8:	4b15      	ldr	r3, [pc, #84]	; (dc00 <dmPrivActResolveAddr+0x68>)
    dbaa:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
    dbac:	f240 7237 	movw	r2, #1847	; 0x737
    dbb0:	8042      	strh	r2, [r0, #2]
}
    dbb2:	b006      	add	sp, #24
    dbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
    dbb8:	4718      	bx	r3
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_RES_ADDR;
    dbba:	f043 0301 	orr.w	r3, r3, #1
    dbbe:	70e3      	strb	r3, [r4, #3]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
    dbc0:	4b0f      	ldr	r3, [pc, #60]	; (dc00 <dmPrivActResolveAddr+0x68>)
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
    dbc2:	8a82      	ldrh	r2, [r0, #20]
    dbc4:	8022      	strh	r2, [r4, #0]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
    dbc6:	7b1a      	ldrb	r2, [r3, #12]
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
    dbc8:	7d83      	ldrb	r3, [r0, #22]
    dbca:	70a3      	strb	r3, [r4, #2]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
    dbcc:	2461      	movs	r4, #97	; 0x61
    dbce:	f830 3b04 	ldrh.w	r3, [r0], #4
    dbd2:	9400      	str	r4, [sp, #0]
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
    dbd4:	f8b1 4017 	ldrh.w	r4, [r1, #23]
    dbd8:	7e49      	ldrb	r1, [r1, #25]
    dbda:	f88d 100a 	strb.w	r1, [sp, #10]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
    dbde:	a902      	add	r1, sp, #8
    memset(buf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
    dbe0:	f8cd c00b 	str.w	ip, [sp, #11]
    dbe4:	f8cd c00f 	str.w	ip, [sp, #15]
    dbe8:	f8cd c013 	str.w	ip, [sp, #19]
    dbec:	f88d c017 	strb.w	ip, [sp, #23]
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
    dbf0:	f8ad 4008 	strh.w	r4, [sp, #8]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
    dbf4:	f003 feb4 	bl	11960 <SecAes>
}
    dbf8:	b006      	add	sp, #24
    dbfa:	bd10      	pop	{r4, pc}
    dbfc:	10003fbc 	.word	0x10003fbc
    dc00:	10003fa4 	.word	0x10003fa4

0000dc04 <dmPrivActGenAddr>:
{
    dc04:	b570      	push	{r4, r5, r6, lr}
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
    dc06:	4c1a      	ldr	r4, [pc, #104]	; (dc70 <dmPrivActGenAddr+0x6c>)
    dc08:	78e3      	ldrb	r3, [r4, #3]
    dc0a:	f013 0602 	ands.w	r6, r3, #2
{
    dc0e:	b082      	sub	sp, #8
    dc10:	4605      	mov	r5, r0
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
    dc12:	d008      	beq.n	dc26 <dmPrivActGenAddr+0x22>
    (*dmCb.cback)((dmEvt_t *) pMsg);
    dc14:	4b17      	ldr	r3, [pc, #92]	; (dc74 <dmPrivActGenAddr+0x70>)
    dc16:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
    dc18:	f44f 62e7 	mov.w	r2, #1848	; 0x738
    dc1c:	8042      	strh	r2, [r0, #2]
}
    dc1e:	b002      	add	sp, #8
    dc20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
    dc24:	4718      	bx	r3
    SecRand(dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
    dc26:	f104 000a 	add.w	r0, r4, #10
    dc2a:	2103      	movs	r1, #3
    dc2c:	f004 f8fc 	bl	11e28 <SecRand>
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
    dc30:	7b23      	ldrb	r3, [r4, #12]
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
    dc32:	78e2      	ldrb	r2, [r4, #3]
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
    dc34:	f8c4 600d 	str.w	r6, [r4, #13]
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
    dc38:	f042 0202 	orr.w	r2, r2, #2
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
    dc3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
    dc40:	70e2      	strb	r2, [r4, #3]
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
    dc42:	4628      	mov	r0, r5
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
    dc44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
    dc48:	4a0a      	ldr	r2, [pc, #40]	; (dc74 <dmPrivActGenAddr+0x70>)
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
    dc4a:	f8c4 6011 	str.w	r6, [r4, #17]
    dc4e:	f8c4 6015 	str.w	r6, [r4, #21]
    dc52:	7666      	strb	r6, [r4, #25]
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
    dc54:	7323      	strb	r3, [r4, #12]
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
    dc56:	f104 010d 	add.w	r1, r4, #13
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
    dc5a:	2468      	movs	r4, #104	; 0x68
    dc5c:	f830 3b04 	ldrh.w	r3, [r0], #4
    dc60:	7b12      	ldrb	r2, [r2, #12]
    dc62:	9400      	str	r4, [sp, #0]
    dc64:	3903      	subs	r1, #3
    dc66:	f003 fe7b 	bl	11960 <SecAes>
}
    dc6a:	b002      	add	sp, #8
    dc6c:	bd70      	pop	{r4, r5, r6, pc}
    dc6e:	bf00      	nop
    dc70:	10003fbc 	.word	0x10003fbc
    dc74:	10003fa4 	.word	0x10003fa4

0000dc78 <DmPrivInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivInit(void)
{
  dmFcnIfTbl[DM_ID_PRIV] = (dmFcnIf_t *) &dmPrivFcnIf;
    dc78:	4b01      	ldr	r3, [pc, #4]	; (dc80 <DmPrivInit+0x8>)
    dc7a:	4a02      	ldr	r2, [pc, #8]	; (dc84 <DmPrivInit+0xc>)
    dc7c:	619a      	str	r2, [r3, #24]
}
    dc7e:	4770      	bx	lr
    dc80:	10002b00 	.word	0x10002b00
    dc84:	00025fa0 	.word	0x00025fa0

0000dc88 <DmPrivResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivResolveAddr(uint8_t *pAddr, uint8_t *pIrk, uint16_t param)
{
    dc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc8a:	4607      	mov	r7, r0
  dmPrivApiResolveAddr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiResolveAddr_t))) != NULL)
    dc8c:	201a      	movs	r0, #26
{
    dc8e:	460e      	mov	r6, r1
    dc90:	4615      	mov	r5, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiResolveAddr_t))) != NULL)
    dc92:	f010 f981 	bl	1df98 <WsfMsgAlloc>
    dc96:	b198      	cbz	r0, dcc0 <DmPrivResolveAddr+0x38>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_RESOLVE_ADDR;
    dc98:	2360      	movs	r3, #96	; 0x60
    dc9a:	4604      	mov	r4, r0
    dc9c:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = param;
    Calc128Cpy(pMsg->irk, pIrk);
    dc9e:	4631      	mov	r1, r6
    pMsg->hdr.param = param;
    dca0:	f820 5b04 	strh.w	r5, [r0], #4
    Calc128Cpy(pMsg->irk, pIrk);
    dca4:	f007 fe2e 	bl	15904 <Calc128Cpy>
    BdaCpy(pMsg->addr, pAddr);
    dca8:	4639      	mov	r1, r7
    dcaa:	f104 0014 	add.w	r0, r4, #20
    dcae:	f007 fe05 	bl	158bc <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
    dcb2:	4b04      	ldr	r3, [pc, #16]	; (dcc4 <DmPrivResolveAddr+0x3c>)
    dcb4:	4621      	mov	r1, r4
    dcb6:	7b18      	ldrb	r0, [r3, #12]
  }
}
    dcb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    dcbc:	f010 b978 	b.w	1dfb0 <WsfMsgSend>
}
    dcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dcc2:	bf00      	nop
    dcc4:	10003fa4 	.word	0x10003fa4

0000dcc8 <DmPrivAddDevToResList>:
 *          to resolving list to enable address resolution in the Controller.
 */
/*************************************************************************************************/
void DmPrivAddDevToResList(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t *pPeerIrk,
                           uint8_t *pLocalIrk, bool_t enableLlPriv, uint16_t param)
{
    dcc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dccc:	4607      	mov	r7, r0
  dmPrivApiAddDevToResList_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiAddDevToResList_t))) != NULL)
    dcce:	202c      	movs	r0, #44	; 0x2c
{
    dcd0:	f89d 8020 	ldrb.w	r8, [sp, #32]
    dcd4:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
    dcd8:	4689      	mov	r9, r1
    dcda:	4616      	mov	r6, r2
    dcdc:	461d      	mov	r5, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiAddDevToResList_t))) != NULL)
    dcde:	f010 f95b 	bl	1df98 <WsfMsgAlloc>
    dce2:	b1e0      	cbz	r0, dd1e <DmPrivAddDevToResList+0x56>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_ADD_DEV_TO_RES_LIST;
    dce4:	2362      	movs	r3, #98	; 0x62
    dce6:	4604      	mov	r4, r0
    dce8:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = param;
    dcea:	f8a0 a000 	strh.w	sl, [r0]
    pMsg->addrType = addrType;
    dcee:	7107      	strb	r7, [r0, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
    dcf0:	4649      	mov	r1, r9
    dcf2:	3005      	adds	r0, #5
    dcf4:	f007 fde2 	bl	158bc <BdaCpy>
    Calc128Cpy(pMsg->peerIrk, pPeerIrk);
    dcf8:	4631      	mov	r1, r6
    dcfa:	f104 000b 	add.w	r0, r4, #11
    dcfe:	f007 fe01 	bl	15904 <Calc128Cpy>
    Calc128Cpy(pMsg->localIrk, pLocalIrk);
    dd02:	4629      	mov	r1, r5
    dd04:	f104 001b 	add.w	r0, r4, #27
    dd08:	f007 fdfc 	bl	15904 <Calc128Cpy>
    pMsg->enableLlPriv = enableLlPriv;
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd0c:	4b05      	ldr	r3, [pc, #20]	; (dd24 <DmPrivAddDevToResList+0x5c>)
    pMsg->enableLlPriv = enableLlPriv;
    dd0e:	f884 802b 	strb.w	r8, [r4, #43]	; 0x2b
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd12:	4621      	mov	r1, r4
    dd14:	7b18      	ldrb	r0, [r3, #12]
  }
}
    dd16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd1a:	f010 b949 	b.w	1dfb0 <WsfMsgSend>
}
    dd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dd22:	bf00      	nop
    dd24:	10003fa4 	.word	0x10003fa4

0000dd28 <DmPrivClearResList>:
 *  \Note   Address resolution in the Controller will be disabled when resolving list's cleared
 *          successfully.
 */
/*************************************************************************************************/
void DmPrivClearResList(void)
{
    dd28:	b508      	push	{r3, lr}
  dmPrivMsg_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivMsg_t))) != NULL)
    dd2a:	202c      	movs	r0, #44	; 0x2c
    dd2c:	f010 f934 	bl	1df98 <WsfMsgAlloc>
    dd30:	b140      	cbz	r0, dd44 <DmPrivClearResList+0x1c>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_CLEAR_RES_LIST;
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd32:	4b05      	ldr	r3, [pc, #20]	; (dd48 <DmPrivClearResList+0x20>)
    pMsg->hdr.event = DM_PRIV_MSG_API_CLEAR_RES_LIST;
    dd34:	2264      	movs	r2, #100	; 0x64
    dd36:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd38:	4601      	mov	r1, r0
    dd3a:	7b18      	ldrb	r0, [r3, #12]
  }
}
    dd3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd40:	f010 b936 	b.w	1dfb0 <WsfMsgSend>
}
    dd44:	bd08      	pop	{r3, pc}
    dd46:	bf00      	nop
    dd48:	10003fa4 	.word	0x10003fa4

0000dd4c <DmPrivSetAddrResEnable>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetAddrResEnable(bool_t enable)
{
    dd4c:	b510      	push	{r4, lr}
    dd4e:	4604      	mov	r4, r0
  dmPrivApiSetAddrResEnable_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivMsg_t))) != NULL)
    dd50:	202c      	movs	r0, #44	; 0x2c
    dd52:	f010 f921 	bl	1df98 <WsfMsgAlloc>
    dd56:	b158      	cbz	r0, dd70 <DmPrivSetAddrResEnable+0x24>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_ADDR_RES_ENABLE;
    dd58:	4601      	mov	r1, r0
    pMsg->hdr.param = 0;
    pMsg->enable = enable;
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd5a:	4b06      	ldr	r3, [pc, #24]	; (dd74 <DmPrivSetAddrResEnable+0x28>)
    pMsg->enable = enable;
    dd5c:	710c      	strb	r4, [r1, #4]
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_ADDR_RES_ENABLE;
    dd5e:	2065      	movs	r0, #101	; 0x65
    pMsg->hdr.param = 0;
    dd60:	2200      	movs	r2, #0
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_ADDR_RES_ENABLE;
    dd62:	7088      	strb	r0, [r1, #2]
    pMsg->hdr.param = 0;
    dd64:	800a      	strh	r2, [r1, #0]
  }
}
    dd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd6a:	7b18      	ldrb	r0, [r3, #12]
    dd6c:	f010 b920 	b.w	1dfb0 <WsfMsgSend>
}
    dd70:	bd10      	pop	{r4, pc}
    dd72:	bf00      	nop
    dd74:	10003fa4 	.word	0x10003fa4

0000dd78 <DmPrivSetPrivacyMode>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetPrivacyMode(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t mode)
{
    dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd7a:	4606      	mov	r6, r0
  dmPrivApiSetPrivacyMode_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiSetPrivacyMode_t))) != NULL)
    dd7c:	200c      	movs	r0, #12
{
    dd7e:	460f      	mov	r7, r1
    dd80:	4615      	mov	r5, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiSetPrivacyMode_t))) != NULL)
    dd82:	f010 f909 	bl	1df98 <WsfMsgAlloc>
    dd86:	b178      	cbz	r0, dda8 <DmPrivSetPrivacyMode+0x30>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_PRIVACY_MODE;
    dd88:	4604      	mov	r4, r0
    dd8a:	2366      	movs	r3, #102	; 0x66
    dd8c:	7083      	strb	r3, [r0, #2]
    pMsg->addrType = addrType;
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
    dd8e:	4639      	mov	r1, r7
    dd90:	3005      	adds	r0, #5
    pMsg->addrType = addrType;
    dd92:	7126      	strb	r6, [r4, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
    dd94:	f007 fd92 	bl	158bc <BdaCpy>
    pMsg->mode = mode;
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd98:	4b04      	ldr	r3, [pc, #16]	; (ddac <DmPrivSetPrivacyMode+0x34>)
    pMsg->mode = mode;
    dd9a:	72e5      	strb	r5, [r4, #11]
    WsfMsgSend(dmCb.handlerId, pMsg);
    dd9c:	7b18      	ldrb	r0, [r3, #12]
    dd9e:	4621      	mov	r1, r4
  }
}
    dda0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    dda4:	f010 b904 	b.w	1dfb0 <WsfMsgSend>
}
    dda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddaa:	bf00      	nop
    ddac:	10003fa4 	.word	0x10003fa4

0000ddb0 <dmScanInit>:
  {
    dmScanCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
    dmScanCb.scanWindow[i] = DM_GAP_SCAN_FAST_WINDOW;
  }

  dmCb.scanFiltPolicy = HCI_FILT_NONE;
    ddb0:	4a07      	ldr	r2, [pc, #28]	; (ddd0 <dmScanInit+0x20>)
    dmScanCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
    ddb2:	4b08      	ldr	r3, [pc, #32]	; (ddd4 <dmScanInit+0x24>)
  dmScanCb.scanTimer.handlerId = dmCb.handlerId;
    ddb4:	f892 c00c 	ldrb.w	ip, [r2, #12]
    ddb8:	f883 c00c 	strb.w	ip, [r3, #12]
  dmCb.scanFiltPolicy = HCI_FILT_NONE;
    ddbc:	2100      	movs	r1, #0
    dmScanCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
    ddbe:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
    ddc2:	e9c3 0004 	strd	r0, r0, [r3, #16]
  dmCb.scanFiltPolicy = HCI_FILT_NONE;
    ddc6:	74d1      	strb	r1, [r2, #19]
  dmScanCb.scanState = DM_SCAN_STATE_IDLE;
    ddc8:	7619      	strb	r1, [r3, #24]
  dmCb.scanAddrType = DM_ADDR_PUBLIC;
    ddca:	73d1      	strb	r1, [r2, #15]
}
    ddcc:	4770      	bx	lr
    ddce:	bf00      	nop
    ddd0:	10003fa4 	.word	0x10003fa4
    ddd4:	10003fd8 	.word	0x10003fd8

0000ddd8 <DmScanStart>:
 *  \return None.
 */
/*************************************************************************************************/
void DmScanStart(uint8_t scanPhys, uint8_t mode, const uint8_t *pScanType, bool_t filterDup,
                 uint16_t duration, uint16_t period)
{
    ddd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dddc:	4605      	mov	r5, r0
  uint8_t i;              /* scanPhy bit position */
  uint8_t idx;            /* param array index */
  dmScanApiStart_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmScanApiStart_t))) != NULL)
    ddde:	200e      	movs	r0, #14
{
    dde0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    dde4:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    dde8:	460e      	mov	r6, r1
    ddea:	4692      	mov	sl, r2
    ddec:	461f      	mov	r7, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmScanApiStart_t))) != NULL)
    ddee:	f010 f8d3 	bl	1df98 <WsfMsgAlloc>
    ddf2:	2800      	cmp	r0, #0
    ddf4:	d056      	beq.n	dea4 <DmScanStart+0xcc>
  {
    pMsg->hdr.event = DM_SCAN_MSG_API_START;
    ddf6:	2320      	movs	r3, #32
    pMsg->scanPhys = scanPhys;

    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    {
      if (scanPhys & (1 << i))
    ddf8:	f015 0401 	ands.w	r4, r5, #1
    ddfc:	4601      	mov	r1, r0
    pMsg->scanPhys = scanPhys;
    ddfe:	7105      	strb	r5, [r0, #4]
    pMsg->hdr.event = DM_SCAN_MSG_API_START;
    de00:	7083      	strb	r3, [r0, #2]
      if (scanPhys & (1 << i))
    de02:	d02d      	beq.n	de60 <DmScanStart+0x88>
      {
        /* scan type for this PHY */
        pMsg->scanType[idx] = pScanType[idx];
    de04:	f89a 3000 	ldrb.w	r3, [sl]
    de08:	7143      	strb	r3, [r0, #5]
      if (scanPhys & (1 << i))
    de0a:	07ac      	lsls	r4, r5, #30
    de0c:	d446      	bmi.n	de9c <DmScanStart+0xc4>
    de0e:	076b      	lsls	r3, r5, #29
    de10:	d444      	bmi.n	de9c <DmScanStart+0xc4>
    de12:	2401      	movs	r4, #1
    de14:	0728      	lsls	r0, r5, #28
    de16:	d52d      	bpl.n	de74 <DmScanStart+0x9c>
        pMsg->scanType[idx] = pScanType[idx];
    de18:	190b      	adds	r3, r1, r4
    de1a:	f81a 2004 	ldrb.w	r2, [sl, r4]
    de1e:	715a      	strb	r2, [r3, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    de20:	b994      	cbnz	r4, de48 <DmScanStart+0x70>
      if (scanPhys & (1 << i))
    de22:	06e8      	lsls	r0, r5, #27
    de24:	d43a      	bmi.n	de9c <DmScanStart+0xc4>
    de26:	2401      	movs	r4, #1
    de28:	06aa      	lsls	r2, r5, #26
    de2a:	d52e      	bpl.n	de8a <DmScanStart+0xb2>
        pMsg->scanType[idx] = pScanType[idx];
    de2c:	190b      	adds	r3, r1, r4
    de2e:	f81a 2004 	ldrb.w	r2, [sl, r4]
    de32:	715a      	strb	r2, [r3, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    de34:	b944      	cbnz	r4, de48 <DmScanStart+0x70>
      if (scanPhys & (1 << i))
    de36:	066b      	lsls	r3, r5, #25
    de38:	d430      	bmi.n	de9c <DmScanStart+0xc4>
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    de3a:	2401      	movs	r4, #1
      if (scanPhys & (1 << i))
    de3c:	09eb      	lsrs	r3, r5, #7
    de3e:	d003      	beq.n	de48 <DmScanStart+0x70>
        pMsg->scanType[idx] = pScanType[idx];
    de40:	f81a 3004 	ldrb.w	r3, [sl, r4]
    de44:	440c      	add	r4, r1
    de46:	7163      	strb	r3, [r4, #5]

    pMsg->mode = mode;
    pMsg->duration = duration;
    pMsg->period = period;
    pMsg->filterDup = filterDup;
    WsfMsgSend(dmCb.handlerId, pMsg);
    de48:	4b19      	ldr	r3, [pc, #100]	; (deb0 <DmScanStart+0xd8>)
    pMsg->mode = mode;
    de4a:	71ce      	strb	r6, [r1, #7]
    pMsg->duration = duration;
    de4c:	f8a1 8008 	strh.w	r8, [r1, #8]
    pMsg->period = period;
    de50:	f8a1 900a 	strh.w	r9, [r1, #10]
    pMsg->filterDup = filterDup;
    de54:	730f      	strb	r7, [r1, #12]
  }
}
    de56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    de5a:	7b18      	ldrb	r0, [r3, #12]
    de5c:	f010 b8a8 	b.w	1dfb0 <WsfMsgSend>
      if (scanPhys & (1 << i))
    de60:	07ab      	lsls	r3, r5, #30
    de62:	d421      	bmi.n	dea8 <DmScanStart+0xd0>
    de64:	076a      	lsls	r2, r5, #29
    de66:	d5d5      	bpl.n	de14 <DmScanStart+0x3c>
        pMsg->scanType[idx] = pScanType[idx];
    de68:	f89a 3000 	ldrb.w	r3, [sl]
    de6c:	7143      	strb	r3, [r0, #5]
      if (scanPhys & (1 << i))
    de6e:	072a      	lsls	r2, r5, #28
    de70:	d414      	bmi.n	de9c <DmScanStart+0xc4>
    de72:	2401      	movs	r4, #1
    de74:	06eb      	lsls	r3, r5, #27
    de76:	d5d7      	bpl.n	de28 <DmScanStart+0x50>
        pMsg->scanType[idx] = pScanType[idx];
    de78:	190b      	adds	r3, r1, r4
    de7a:	f81a 2004 	ldrb.w	r2, [sl, r4]
    de7e:	715a      	strb	r2, [r3, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    de80:	2c00      	cmp	r4, #0
    de82:	d1e1      	bne.n	de48 <DmScanStart+0x70>
      if (scanPhys & (1 << i))
    de84:	06ac      	lsls	r4, r5, #26
    de86:	d409      	bmi.n	de9c <DmScanStart+0xc4>
    de88:	2401      	movs	r4, #1
    de8a:	0668      	lsls	r0, r5, #25
    de8c:	d5d6      	bpl.n	de3c <DmScanStart+0x64>
        pMsg->scanType[idx] = pScanType[idx];
    de8e:	190b      	adds	r3, r1, r4
    de90:	f81a 2004 	ldrb.w	r2, [sl, r4]
    de94:	715a      	strb	r2, [r3, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    de96:	2c00      	cmp	r4, #0
    de98:	d0cf      	beq.n	de3a <DmScanStart+0x62>
    de9a:	e7d5      	b.n	de48 <DmScanStart+0x70>
        pMsg->scanType[idx] = pScanType[idx];
    de9c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    dea0:	718b      	strb	r3, [r1, #6]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    dea2:	e7d1      	b.n	de48 <DmScanStart+0x70>
}
    dea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        pMsg->scanType[idx] = pScanType[idx];
    dea8:	f89a 3000 	ldrb.w	r3, [sl]
    deac:	7143      	strb	r3, [r0, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    deae:	e7ae      	b.n	de0e <DmScanStart+0x36>
    deb0:	10003fa4 	.word	0x10003fa4

0000deb4 <DmScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmScanStop(void)
{
    deb4:	b508      	push	{r3, lr}
  wsfMsgHdr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
    deb6:	2004      	movs	r0, #4
    deb8:	f010 f86e 	bl	1df98 <WsfMsgAlloc>
    debc:	b140      	cbz	r0, ded0 <DmScanStop+0x1c>
  {
    pMsg->event = DM_SCAN_MSG_API_STOP;
    WsfMsgSend(dmCb.handlerId, pMsg);
    debe:	4b05      	ldr	r3, [pc, #20]	; (ded4 <DmScanStop+0x20>)
    pMsg->event = DM_SCAN_MSG_API_STOP;
    dec0:	2221      	movs	r2, #33	; 0x21
    dec2:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
    dec4:	4601      	mov	r1, r0
    dec6:	7b18      	ldrb	r0, [r3, #12]
  }
}
    dec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    decc:	f010 b870 	b.w	1dfb0 <WsfMsgSend>
}
    ded0:	bd08      	pop	{r3, pc}
    ded2:	bf00      	nop
    ded4:	10003fa4 	.word	0x10003fa4

0000ded8 <DmScanSetInterval>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmScanSetInterval(uint8_t scanPhys, uint16_t *pScanInterval, uint16_t *pScanWindow)
{
    ded8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t i;   /* scanPhy bit position */
  uint8_t idx; /* param array index */

  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
  {
    if (scanPhys & (1 << i))
    dedc:	f010 0501 	ands.w	r5, r0, #1
{
    dee0:	4604      	mov	r4, r0
    dee2:	460e      	mov	r6, r1
    dee4:	4617      	mov	r7, r2
    if (scanPhys & (1 << i))
    dee6:	f040 80a1 	bne.w	e02c <DmScanSetInterval+0x154>
    deea:	0783      	lsls	r3, r0, #30
    deec:	d40e      	bmi.n	df0c <DmScanSetInterval+0x34>
    deee:	0742      	lsls	r2, r0, #29
    def0:	f100 80ce 	bmi.w	e090 <DmScanSetInterval+0x1b8>
    def4:	0722      	lsls	r2, r4, #28
    def6:	d421      	bmi.n	df3c <DmScanSetInterval+0x64>
    def8:	06e3      	lsls	r3, r4, #27
    defa:	d438      	bmi.n	df6e <DmScanSetInterval+0x96>
    defc:	06a0      	lsls	r0, r4, #26
    defe:	d44f      	bmi.n	dfa0 <DmScanSetInterval+0xc8>
    df00:	0661      	lsls	r1, r4, #25
    df02:	d466      	bmi.n	dfd2 <DmScanSetInterval+0xfa>
    df04:	09e3      	lsrs	r3, r4, #7
    df06:	d17d      	bne.n	e004 <DmScanSetInterval+0x12c>
    {
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
      idx++;
    }
  }
}
    df08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
    df0c:	f8b1 9000 	ldrh.w	r9, [r1]
    df10:	8815      	ldrh	r5, [r2, #0]
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    df12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; e0b8 <DmScanSetInterval+0x1e0>
  WsfTaskLock();
    df16:	f010 f881 	bl	1e01c <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
    df1a:	2002      	movs	r0, #2
    df1c:	f7ff fd52 	bl	d9c4 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    df20:	3008      	adds	r0, #8
    df22:	f828 9010 	strh.w	r9, [r8, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    df26:	eb08 0040 	add.w	r0, r8, r0, lsl #1
    df2a:	8085      	strh	r5, [r0, #4]
  WsfTaskUnlock();
    df2c:	f010 f880 	bl	1e030 <WsfTaskUnlock>
    if (scanPhys & (1 << i))
    df30:	0763      	lsls	r3, r4, #29
    df32:	f100 80ab 	bmi.w	e08c <DmScanSetInterval+0x1b4>
      idx++;
    df36:	2501      	movs	r5, #1
    if (scanPhys & (1 << i))
    df38:	0722      	lsls	r2, r4, #28
    df3a:	d5dd      	bpl.n	def8 <DmScanSetInterval+0x20>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
    df3c:	f836 9015 	ldrh.w	r9, [r6, r5, lsl #1]
    df40:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
  WsfTaskLock();
    df44:	f010 f86a 	bl	1e01c <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
    df48:	2008      	movs	r0, #8
    df4a:	f7ff fd3b 	bl	d9c4 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    df4e:	4b5a      	ldr	r3, [pc, #360]	; (e0b8 <DmScanSetInterval+0x1e0>)
    df50:	3008      	adds	r0, #8
    df52:	f823 9010 	strh.w	r9, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    df56:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    df5a:	f8a3 8004 	strh.w	r8, [r3, #4]
  WsfTaskUnlock();
    df5e:	f010 f867 	bl	1e030 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    df62:	2d00      	cmp	r5, #0
    df64:	d1d0      	bne.n	df08 <DmScanSetInterval+0x30>
    if (scanPhys & (1 << i))
    df66:	06e3      	lsls	r3, r4, #27
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    df68:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
    df6c:	d5c6      	bpl.n	defc <DmScanSetInterval+0x24>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
    df6e:	f836 9015 	ldrh.w	r9, [r6, r5, lsl #1]
    df72:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
  WsfTaskLock();
    df76:	f010 f851 	bl	1e01c <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
    df7a:	2010      	movs	r0, #16
    df7c:	f7ff fd22 	bl	d9c4 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    df80:	4b4d      	ldr	r3, [pc, #308]	; (e0b8 <DmScanSetInterval+0x1e0>)
    df82:	3008      	adds	r0, #8
    df84:	f823 9010 	strh.w	r9, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    df88:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    df8c:	f8a3 8004 	strh.w	r8, [r3, #4]
  WsfTaskUnlock();
    df90:	f010 f84e 	bl	1e030 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    df94:	2d00      	cmp	r5, #0
    df96:	d1b7      	bne.n	df08 <DmScanSetInterval+0x30>
    if (scanPhys & (1 << i))
    df98:	06a0      	lsls	r0, r4, #26
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    df9a:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
    df9e:	d5af      	bpl.n	df00 <DmScanSetInterval+0x28>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
    dfa0:	f836 9015 	ldrh.w	r9, [r6, r5, lsl #1]
    dfa4:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
  WsfTaskLock();
    dfa8:	f010 f838 	bl	1e01c <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
    dfac:	2020      	movs	r0, #32
    dfae:	f7ff fd09 	bl	d9c4 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    dfb2:	4b41      	ldr	r3, [pc, #260]	; (e0b8 <DmScanSetInterval+0x1e0>)
    dfb4:	3008      	adds	r0, #8
    dfb6:	f823 9010 	strh.w	r9, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    dfba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    dfbe:	f8a3 8004 	strh.w	r8, [r3, #4]
  WsfTaskUnlock();
    dfc2:	f010 f835 	bl	1e030 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    dfc6:	2d00      	cmp	r5, #0
    dfc8:	d19e      	bne.n	df08 <DmScanSetInterval+0x30>
    if (scanPhys & (1 << i))
    dfca:	0661      	lsls	r1, r4, #25
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    dfcc:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
    dfd0:	d598      	bpl.n	df04 <DmScanSetInterval+0x2c>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
    dfd2:	f836 9015 	ldrh.w	r9, [r6, r5, lsl #1]
    dfd6:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
  WsfTaskLock();
    dfda:	f010 f81f 	bl	1e01c <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
    dfde:	2040      	movs	r0, #64	; 0x40
    dfe0:	f7ff fcf0 	bl	d9c4 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    dfe4:	4b34      	ldr	r3, [pc, #208]	; (e0b8 <DmScanSetInterval+0x1e0>)
    dfe6:	3008      	adds	r0, #8
    dfe8:	f823 9010 	strh.w	r9, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    dfec:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    dff0:	f8a3 8004 	strh.w	r8, [r3, #4]
  WsfTaskUnlock();
    dff4:	f010 f81c 	bl	1e030 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    dff8:	2d00      	cmp	r5, #0
    dffa:	d185      	bne.n	df08 <DmScanSetInterval+0x30>
    if (scanPhys & (1 << i))
    dffc:	09e3      	lsrs	r3, r4, #7
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    dffe:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
    e002:	d081      	beq.n	df08 <DmScanSetInterval+0x30>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
    e004:	f836 6015 	ldrh.w	r6, [r6, r5, lsl #1]
    e008:	f837 4015 	ldrh.w	r4, [r7, r5, lsl #1]
  WsfTaskLock();
    e00c:	f010 f806 	bl	1e01c <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
    e010:	2080      	movs	r0, #128	; 0x80
    e012:	f7ff fcd7 	bl	d9c4 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    e016:	4b28      	ldr	r3, [pc, #160]	; (e0b8 <DmScanSetInterval+0x1e0>)
    e018:	3008      	adds	r0, #8
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    e01a:	eb03 0240 	add.w	r2, r3, r0, lsl #1
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    e01e:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    e022:	8094      	strh	r4, [r2, #4]
}
    e024:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  WsfTaskUnlock();
    e028:	f010 b802 	b.w	1e030 <WsfTaskUnlock>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
    e02c:	f8b1 9000 	ldrh.w	r9, [r1]
    e030:	8815      	ldrh	r5, [r2, #0]
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    e032:	f8df 8084 	ldr.w	r8, [pc, #132]	; e0b8 <DmScanSetInterval+0x1e0>
  WsfTaskLock();
    e036:	f00f fff1 	bl	1e01c <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
    e03a:	2001      	movs	r0, #1
    e03c:	f7ff fcc2 	bl	d9c4 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    e040:	3008      	adds	r0, #8
    e042:	f828 9010 	strh.w	r9, [r8, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    e046:	eb08 0040 	add.w	r0, r8, r0, lsl #1
    e04a:	8085      	strh	r5, [r0, #4]
  WsfTaskUnlock();
    e04c:	f00f fff0 	bl	1e030 <WsfTaskUnlock>
    if (scanPhys & (1 << i))
    e050:	07a0      	lsls	r0, r4, #30
    e052:	d420      	bmi.n	e096 <DmScanSetInterval+0x1be>
    e054:	0761      	lsls	r1, r4, #29
      idx++;
    e056:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
    e05a:	f57f af4b 	bpl.w	def4 <DmScanSetInterval+0x1c>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
    e05e:	f836 a015 	ldrh.w	sl, [r6, r5, lsl #1]
    e062:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
  WsfTaskLock();
    e066:	f00f ffd9 	bl	1e01c <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
    e06a:	2004      	movs	r0, #4
    e06c:	f7ff fcaa 	bl	d9c4 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    e070:	3008      	adds	r0, #8
    e072:	f828 a010 	strh.w	sl, [r8, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    e076:	eb08 0040 	add.w	r0, r8, r0, lsl #1
    e07a:	f8a0 9004 	strh.w	r9, [r0, #4]
  WsfTaskUnlock();
    e07e:	f00f ffd7 	bl	1e030 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e082:	2d00      	cmp	r5, #0
    e084:	f47f af40 	bne.w	df08 <DmScanSetInterval+0x30>
      idx++;
    e088:	2501      	movs	r5, #1
    e08a:	e755      	b.n	df38 <DmScanSetInterval+0x60>
    e08c:	2501      	movs	r5, #1
    e08e:	e7e6      	b.n	e05e <DmScanSetInterval+0x186>
    e090:	f8df 8024 	ldr.w	r8, [pc, #36]	; e0b8 <DmScanSetInterval+0x1e0>
    e094:	e7e3      	b.n	e05e <DmScanSetInterval+0x186>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
    e096:	8875      	ldrh	r5, [r6, #2]
    e098:	887c      	ldrh	r4, [r7, #2]
  WsfTaskLock();
    e09a:	f00f ffbf 	bl	1e01c <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
    e09e:	2002      	movs	r0, #2
    e0a0:	f7ff fc90 	bl	d9c4 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    e0a4:	3008      	adds	r0, #8
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    e0a6:	eb08 0340 	add.w	r3, r8, r0, lsl #1
  dmScanCb.scanInterval[phyIdx] = scanInterval;
    e0aa:	f828 5010 	strh.w	r5, [r8, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
    e0ae:	809c      	strh	r4, [r3, #4]
}
    e0b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  WsfTaskUnlock();
    e0b4:	f00f bfbc 	b.w	1e030 <WsfTaskUnlock>
    e0b8:	10003fd8 	.word	0x10003fd8

0000e0bc <dmExtScanActTimeout>:
 */
/*************************************************************************************************/
void dmExtScanActTimeout(dmScanMsg_t *pMsg)
{
  /* empty */
}
    e0bc:	4770      	bx	lr
    e0be:	bf00      	nop

0000e0c0 <dmExtScanMsgHandler>:
 */
/*************************************************************************************************/
void dmExtScanMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmScanAct[DM_MSG_MASK(pMsg->event)])((dmScanMsg_t *)pMsg);
    e0c0:	7883      	ldrb	r3, [r0, #2]
    e0c2:	4a03      	ldr	r2, [pc, #12]	; (e0d0 <dmExtScanMsgHandler+0x10>)
    e0c4:	f003 030f 	and.w	r3, r3, #15
    e0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0cc:	4718      	bx	r3
    e0ce:	bf00      	nop
    e0d0:	00025fd8 	.word	0x00025fd8

0000e0d4 <dmExtScanActStart>:
{
    e0d4:	b570      	push	{r4, r5, r6, lr}
  if (dmScanCb.scanState == DM_SCAN_STATE_IDLE)
    e0d6:	4d92      	ldr	r5, [pc, #584]	; (e320 <dmExtScanActStart+0x24c>)
    e0d8:	7e2b      	ldrb	r3, [r5, #24]
{
    e0da:	b084      	sub	sp, #16
  if (dmScanCb.scanState == DM_SCAN_STATE_IDLE)
    e0dc:	2b00      	cmp	r3, #0
    e0de:	d134      	bne.n	e14a <dmExtScanActStart+0x76>
      if (pMsg->apiStart.scanPhys & (1 << i))
    e0e0:	7903      	ldrb	r3, [r0, #4]
    e0e2:	f013 0601 	ands.w	r6, r3, #1
    e0e6:	4604      	mov	r4, r0
    e0e8:	d131      	bne.n	e14e <dmExtScanActStart+0x7a>
    e0ea:	0798      	lsls	r0, r3, #30
    e0ec:	f100 80bc 	bmi.w	e268 <dmExtScanActStart+0x194>
    e0f0:	0759      	lsls	r1, r3, #29
    e0f2:	d444      	bmi.n	e17e <dmExtScanActStart+0xaa>
    e0f4:	0718      	lsls	r0, r3, #28
    e0f6:	d45f      	bmi.n	e1b8 <dmExtScanActStart+0xe4>
    e0f8:	06d9      	lsls	r1, r3, #27
    e0fa:	d47a      	bmi.n	e1f2 <dmExtScanActStart+0x11e>
    e0fc:	069a      	lsls	r2, r3, #26
    e0fe:	f100 8097 	bmi.w	e230 <dmExtScanActStart+0x15c>
    e102:	0658      	lsls	r0, r3, #25
    e104:	f100 80c5 	bmi.w	e292 <dmExtScanActStart+0x1be>
    e108:	09db      	lsrs	r3, r3, #7
    e10a:	f040 80e1 	bne.w	e2d0 <dmExtScanActStart+0x1fc>
    HciLeSetExtScanParamCmd(DmLlAddrType(dmCb.scanAddrType), dmCb.scanFiltPolicy,
    e10e:	4e85      	ldr	r6, [pc, #532]	; (e324 <dmExtScanActStart+0x250>)
    e110:	7bf0      	ldrb	r0, [r6, #15]
    e112:	f7ff fc31 	bl	d978 <DmLlAddrType>
    e116:	ab01      	add	r3, sp, #4
    e118:	7cf1      	ldrb	r1, [r6, #19]
    e11a:	7922      	ldrb	r2, [r4, #4]
    e11c:	f009 f81a 	bl	17154 <HciLeSetExtScanParamCmd>
    if (pMsg->apiStart.mode == DM_DISC_MODE_LIMITED)
    e120:	79e3      	ldrb	r3, [r4, #7]
    e122:	2b01      	cmp	r3, #1
    e124:	d003      	beq.n	e12e <dmExtScanActStart+0x5a>
    else if (pMsg->apiStart.mode == DM_DISC_MODE_GENERAL)
    e126:	2b02      	cmp	r3, #2
    e128:	f000 80cf 	beq.w	e2ca <dmExtScanActStart+0x1f6>
      dmScanCb.discFilter = 0;
    e12c:	2300      	movs	r3, #0
    e12e:	776b      	strb	r3, [r5, #29]
    dmScanCb.filterNextScanRsp = FALSE;
    e130:	2300      	movs	r3, #0
    dmScanCb.scanState = DM_SCAN_STATE_STARTING;
    e132:	2001      	movs	r0, #1
    dmScanCb.filterNextScanRsp = FALSE;
    e134:	772b      	strb	r3, [r5, #28]
    dmScanCb.scanState = DM_SCAN_STATE_STARTING;
    e136:	7628      	strb	r0, [r5, #24]
    HciLeExtScanEnableCmd(TRUE, pMsg->apiStart.filterDup, (pMsg->apiStart.duration / 10), pMsg->apiStart.period);
    e138:	497b      	ldr	r1, [pc, #492]	; (e328 <dmExtScanActStart+0x254>)
    e13a:	8922      	ldrh	r2, [r4, #8]
    e13c:	8963      	ldrh	r3, [r4, #10]
    e13e:	fba1 1202 	umull	r1, r2, r1, r2
    e142:	08d2      	lsrs	r2, r2, #3
    e144:	7b21      	ldrb	r1, [r4, #12]
    e146:	f009 f891 	bl	1726c <HciLeExtScanEnableCmd>
}
    e14a:	b004      	add	sp, #16
    e14c:	bd70      	pop	{r4, r5, r6, pc}
        phyIdx = DmScanPhyToIdx(1 << i);
    e14e:	2001      	movs	r0, #1
    e150:	f7ff fc38 	bl	d9c4 <DmScanPhyToIdx>
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e154:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e156:	7961      	ldrb	r1, [r4, #5]
      if (pMsg->apiStart.scanPhys & (1 << i))
    e158:	7923      	ldrb	r3, [r4, #4]
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e15a:	f88d 1008 	strb.w	r1, [sp, #8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e15e:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e162:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e166:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e168:	f8ad 1004 	strh.w	r1, [sp, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
    e16c:	0799      	lsls	r1, r3, #30
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e16e:	f8ad 2006 	strh.w	r2, [sp, #6]
      if (pMsg->apiStart.scanPhys & (1 << i))
    e172:	f100 80c4 	bmi.w	e2fe <dmExtScanActStart+0x22a>
    e176:	075a      	lsls	r2, r3, #29
        idx++;
    e178:	f04f 0601 	mov.w	r6, #1
      if (pMsg->apiStart.scanPhys & (1 << i))
    e17c:	d5ba      	bpl.n	e0f4 <dmExtScanActStart+0x20>
        phyIdx = DmScanPhyToIdx(1 << i);
    e17e:	2004      	movs	r0, #4
    e180:	f7ff fc20 	bl	d9c4 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e184:	aa04      	add	r2, sp, #16
    e186:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    e18a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e18e:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e190:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e192:	7952      	ldrb	r2, [r2, #5]
    e194:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e198:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e19c:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e1a0:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e1a2:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e1a6:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e1aa:	2e00      	cmp	r6, #0
    e1ac:	d1af      	bne.n	e10e <dmExtScanActStart+0x3a>
    e1ae:	7923      	ldrb	r3, [r4, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
    e1b0:	0718      	lsls	r0, r3, #28
        idx++;
    e1b2:	f04f 0601 	mov.w	r6, #1
      if (pMsg->apiStart.scanPhys & (1 << i))
    e1b6:	d59f      	bpl.n	e0f8 <dmExtScanActStart+0x24>
        phyIdx = DmScanPhyToIdx(1 << i);
    e1b8:	2008      	movs	r0, #8
    e1ba:	f7ff fc03 	bl	d9c4 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e1be:	aa04      	add	r2, sp, #16
    e1c0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    e1c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e1c8:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e1ca:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e1cc:	7952      	ldrb	r2, [r2, #5]
    e1ce:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e1d2:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e1d6:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e1da:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e1dc:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e1e0:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e1e4:	2e00      	cmp	r6, #0
    e1e6:	d192      	bne.n	e10e <dmExtScanActStart+0x3a>
    e1e8:	7923      	ldrb	r3, [r4, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
    e1ea:	06d9      	lsls	r1, r3, #27
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e1ec:	f04f 0601 	mov.w	r6, #1
      if (pMsg->apiStart.scanPhys & (1 << i))
    e1f0:	d584      	bpl.n	e0fc <dmExtScanActStart+0x28>
        phyIdx = DmScanPhyToIdx(1 << i);
    e1f2:	2010      	movs	r0, #16
    e1f4:	f7ff fbe6 	bl	d9c4 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e1f8:	aa04      	add	r2, sp, #16
    e1fa:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    e1fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e202:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e204:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e206:	7952      	ldrb	r2, [r2, #5]
    e208:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e20c:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e210:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e214:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e216:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e21a:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e21e:	2e00      	cmp	r6, #0
    e220:	f47f af75 	bne.w	e10e <dmExtScanActStart+0x3a>
    e224:	7923      	ldrb	r3, [r4, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
    e226:	069a      	lsls	r2, r3, #26
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e228:	f04f 0601 	mov.w	r6, #1
      if (pMsg->apiStart.scanPhys & (1 << i))
    e22c:	f57f af69 	bpl.w	e102 <dmExtScanActStart+0x2e>
        phyIdx = DmScanPhyToIdx(1 << i);
    e230:	2020      	movs	r0, #32
    e232:	f7ff fbc7 	bl	d9c4 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e236:	aa04      	add	r2, sp, #16
    e238:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    e23c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e240:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e242:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e244:	7952      	ldrb	r2, [r2, #5]
    e246:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e24a:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e24e:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e252:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e254:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e258:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e25c:	2e00      	cmp	r6, #0
    e25e:	f47f af56 	bne.w	e10e <dmExtScanActStart+0x3a>
    e262:	7923      	ldrb	r3, [r4, #4]
    e264:	2601      	movs	r6, #1
    e266:	e74c      	b.n	e102 <dmExtScanActStart+0x2e>
        phyIdx = DmScanPhyToIdx(1 << i);
    e268:	2002      	movs	r0, #2
    e26a:	f7ff fbab 	bl	d9c4 <DmScanPhyToIdx>
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e26e:	3008      	adds	r0, #8
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e270:	eb05 0240 	add.w	r2, r5, r0, lsl #1
      if (pMsg->apiStart.scanPhys & (1 << i))
    e274:	7923      	ldrb	r3, [r4, #4]
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e276:	7961      	ldrb	r1, [r4, #5]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e278:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e27a:	f88d 1008 	strb.w	r1, [sp, #8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e27e:	f8ad 2006 	strh.w	r2, [sp, #6]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e282:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
    e286:	f8ad 1004 	strh.w	r1, [sp, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
    e28a:	075a      	lsls	r2, r3, #29
    e28c:	d590      	bpl.n	e1b0 <dmExtScanActStart+0xdc>
        idx++;
    e28e:	2601      	movs	r6, #1
    e290:	e775      	b.n	e17e <dmExtScanActStart+0xaa>
        phyIdx = DmScanPhyToIdx(1 << i);
    e292:	2040      	movs	r0, #64	; 0x40
    e294:	f7ff fb96 	bl	d9c4 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e298:	aa04      	add	r2, sp, #16
    e29a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    e29e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e2a2:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e2a4:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e2a6:	7952      	ldrb	r2, [r2, #5]
    e2a8:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e2ac:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e2b0:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e2b4:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e2b6:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e2ba:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e2be:	2e00      	cmp	r6, #0
    e2c0:	f47f af25 	bne.w	e10e <dmExtScanActStart+0x3a>
    e2c4:	7923      	ldrb	r3, [r4, #4]
    e2c6:	2601      	movs	r6, #1
    e2c8:	e71e      	b.n	e108 <dmExtScanActStart+0x34>
      dmScanCb.discFilter = DM_FLAG_LE_LIMITED_DISC | DM_FLAG_LE_GENERAL_DISC;
    e2ca:	2303      	movs	r3, #3
    e2cc:	776b      	strb	r3, [r5, #29]
    e2ce:	e72f      	b.n	e130 <dmExtScanActStart+0x5c>
        phyIdx = DmScanPhyToIdx(1 << i);
    e2d0:	2080      	movs	r0, #128	; 0x80
    e2d2:	f7ff fb77 	bl	d9c4 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e2d6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    e2da:	aa04      	add	r2, sp, #16
    e2dc:	4426      	add	r6, r4
    e2de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e2e2:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e2e4:	7972      	ldrb	r2, [r6, #5]
    e2e6:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e2ea:	f835 2010 	ldrh.w	r2, [r5, r0, lsl #1]
    e2ee:	f823 2c0c 	strh.w	r2, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e2f2:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    e2f6:	8882      	ldrh	r2, [r0, #4]
    e2f8:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e2fc:	e707      	b.n	e10e <dmExtScanActStart+0x3a>
        phyIdx = DmScanPhyToIdx(1 << i);
    e2fe:	2002      	movs	r0, #2
    e300:	f7ff fb60 	bl	d9c4 <DmScanPhyToIdx>
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e304:	3008      	adds	r0, #8
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e306:	eb05 0340 	add.w	r3, r5, r0, lsl #1
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e30a:	79a1      	ldrb	r1, [r4, #6]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e30c:	f835 2010 	ldrh.w	r2, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e310:	889b      	ldrh	r3, [r3, #4]
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
    e312:	f88d 100e 	strb.w	r1, [sp, #14]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
    e316:	f8ad 200a 	strh.w	r2, [sp, #10]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
    e31a:	f8ad 300c 	strh.w	r3, [sp, #12]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    e31e:	e6f6      	b.n	e10e <dmExtScanActStart+0x3a>
    e320:	10003fd8 	.word	0x10003fd8
    e324:	10003fa4 	.word	0x10003fa4
    e328:	cccccccd 	.word	0xcccccccd

0000e32c <dmExtScanActStop>:
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
    e32c:	4807      	ldr	r0, [pc, #28]	; (e34c <dmExtScanActStop+0x20>)
    e32e:	7e03      	ldrb	r3, [r0, #24]
    e330:	2b02      	cmp	r3, #2
    e332:	d000      	beq.n	e336 <dmExtScanActStop+0xa>
}
    e334:	4770      	bx	lr
    HciLeExtScanEnableCmd(FALSE, 0, 0, 0);
    e336:	2300      	movs	r3, #0
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
    e338:	f04f 0c03 	mov.w	ip, #3
    e33c:	f880 c018 	strb.w	ip, [r0, #24]
    HciLeExtScanEnableCmd(FALSE, 0, 0, 0);
    e340:	461a      	mov	r2, r3
    e342:	4619      	mov	r1, r3
    e344:	4618      	mov	r0, r3
    e346:	f008 bf91 	b.w	1726c <HciLeExtScanEnableCmd>
    e34a:	bf00      	nop
    e34c:	10003fd8 	.word	0x10003fd8

0000e350 <dmExtScanHciHandler>:
{
    e350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DM_TRACE_INFO2("dmExtScanHciHandler: event: %d state: %d", pEvent->hdr.event, dmScanCb.scanState);
    e354:	4d49      	ldr	r5, [pc, #292]	; (e47c <dmExtScanHciHandler+0x12c>)
    e356:	7881      	ldrb	r1, [r0, #2]
    e358:	7e2a      	ldrb	r2, [r5, #24]
{
    e35a:	4604      	mov	r4, r0
  DM_TRACE_INFO2("dmExtScanHciHandler: event: %d state: %d", pEvent->hdr.event, dmScanCb.scanState);
    e35c:	4848      	ldr	r0, [pc, #288]	; (e480 <dmExtScanHciHandler+0x130>)
    e35e:	f010 f99b 	bl	1e698 <WsfTrace>
  if (pEvent->hdr.event == HCI_LE_EXT_ADV_REPORT_CBACK_EVT)
    e362:	78a1      	ldrb	r1, [r4, #2]
    e364:	292c      	cmp	r1, #44	; 0x2c
    e366:	d015      	beq.n	e394 <dmExtScanHciHandler+0x44>
  else if (pEvent->hdr.event == HCI_LE_SCAN_TIMEOUT_CBACK_EVT)
    e368:	292d      	cmp	r1, #45	; 0x2d
    e36a:	d04b      	beq.n	e404 <dmExtScanHciHandler+0xb4>
  else if (pEvent->hdr.event == HCI_LE_EXT_SCAN_ENABLE_CMD_CMPL_CBACK_EVT)
    e36c:	2936      	cmp	r1, #54	; 0x36
    e36e:	d001      	beq.n	e374 <dmExtScanHciHandler+0x24>
}
    e370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (dmScanCb.scanState)
    e374:	7e2b      	ldrb	r3, [r5, #24]
    e376:	2b01      	cmp	r3, #1
    e378:	d039      	beq.n	e3ee <dmExtScanHciHandler+0x9e>
    e37a:	2b03      	cmp	r3, #3
    e37c:	d02e      	beq.n	e3dc <dmExtScanHciHandler+0x8c>
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_EXT_SCAN_START_IND) ? \
    e37e:	2015      	movs	r0, #21
    e380:	2300      	movs	r3, #0
    e382:	461a      	mov	r2, r3
    e384:	f7ff fa2c 	bl	d7e0 <dmDevPassEvtToDevPriv>
    (*dmCb.cback)((dmEvt_t *)pEvent);
    e388:	4b3e      	ldr	r3, [pc, #248]	; (e484 <dmExtScanHciHandler+0x134>)
    e38a:	4620      	mov	r0, r4
    e38c:	689b      	ldr	r3, [r3, #8]
}
    e38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*dmCb.cback)((dmEvt_t *)pEvent);
    e392:	4718      	bx	r3
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
    e394:	7e2b      	ldrb	r3, [r5, #24]
    e396:	2b02      	cmp	r3, #2
    e398:	d1ea      	bne.n	e370 <dmExtScanHciHandler+0x20>
    if ((dmScanCb.discFilter != 0) && firstFrag)
    e39a:	7f6b      	ldrb	r3, [r5, #29]
    e39c:	2b00      	cmp	r3, #0
    e39e:	d040      	beq.n	e422 <dmExtScanHciHandler+0xd2>
    e3a0:	4f39      	ldr	r7, [pc, #228]	; (e488 <dmExtScanHciHandler+0x138>)
    e3a2:	783b      	ldrb	r3, [r7, #0]
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	d054      	beq.n	e452 <dmExtScanHciHandler+0x102>
      if (DM_ADV_RPT_SCAN_RSP(pEvent->leExtAdvReport.eventType))
    e3a8:	88a3      	ldrh	r3, [r4, #4]
    e3aa:	f1a3 021a 	sub.w	r2, r3, #26
    e3ae:	2a01      	cmp	r2, #1
    e3b0:	d954      	bls.n	e45c <dmExtScanHciHandler+0x10c>
    e3b2:	f003 0318 	and.w	r3, r3, #24
    e3b6:	2b08      	cmp	r3, #8
    e3b8:	d050      	beq.n	e45c <dmExtScanHciHandler+0x10c>
        p = DmFindAdType(DM_ADV_TYPE_FLAGS, pEvent->leExtAdvReport.len, pEvent->leExtAdvReport.pData);
    e3ba:	6a22      	ldr	r2, [r4, #32]
    e3bc:	8ba1      	ldrh	r1, [r4, #28]
          filtered = TRUE;
    e3be:	4e33      	ldr	r6, [pc, #204]	; (e48c <dmExtScanHciHandler+0x13c>)
        p = DmFindAdType(DM_ADV_TYPE_FLAGS, pEvent->leExtAdvReport.len, pEvent->leExtAdvReport.pData);
    e3c0:	2001      	movs	r0, #1
    e3c2:	f7ff fa91 	bl	d8e8 <DmFindAdType>
        if (p == NULL)
    e3c6:	b118      	cbz	r0, e3d0 <dmExtScanHciHandler+0x80>
        else if ((p[DM_AD_DATA_IDX] & dmScanCb.discFilter) == 0)
    e3c8:	7882      	ldrb	r2, [r0, #2]
    e3ca:	7f6b      	ldrb	r3, [r5, #29]
    e3cc:	421a      	tst	r2, r3
    e3ce:	d14e      	bne.n	e46e <dmExtScanHciHandler+0x11e>
          filtered = TRUE;
    e3d0:	2301      	movs	r3, #1
    e3d2:	7033      	strb	r3, [r6, #0]
          dmScanCb.filterNextScanRsp = TRUE;
    e3d4:	772b      	strb	r3, [r5, #28]
      firstFrag = FALSE;
    e3d6:	2300      	movs	r3, #0
    e3d8:	703b      	strb	r3, [r7, #0]
    if (!filtered)
    e3da:	e02c      	b.n	e436 <dmExtScanHciHandler+0xe6>
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_IDLE : DM_SCAN_STATE_SCANNING;
    e3dc:	78e3      	ldrb	r3, [r4, #3]
    e3de:	2b00      	cmp	r3, #0
      pEvent->hdr.event = DM_EXT_SCAN_STOP_IND;
    e3e0:	f04f 014b 	mov.w	r1, #75	; 0x4b
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_IDLE : DM_SCAN_STATE_SCANNING;
    e3e4:	bf18      	it	ne
    e3e6:	2302      	movne	r3, #2
      pEvent->hdr.event = DM_EXT_SCAN_STOP_IND;
    e3e8:	70a1      	strb	r1, [r4, #2]
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_IDLE : DM_SCAN_STATE_SCANNING;
    e3ea:	762b      	strb	r3, [r5, #24]
    e3ec:	e7c7      	b.n	e37e <dmExtScanHciHandler+0x2e>
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_SCANNING : DM_SCAN_STATE_IDLE;
    e3ee:	78e3      	ldrb	r3, [r4, #3]
    e3f0:	2b00      	cmp	r3, #0
      pEvent->hdr.event = DM_EXT_SCAN_START_IND;
    e3f2:	f04f 014a 	mov.w	r1, #74	; 0x4a
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_SCANNING : DM_SCAN_STATE_IDLE;
    e3f6:	bf0c      	ite	eq
    e3f8:	2302      	moveq	r3, #2
    e3fa:	2300      	movne	r3, #0
      pEvent->hdr.event = DM_EXT_SCAN_START_IND;
    e3fc:	70a1      	strb	r1, [r4, #2]
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_EXT_SCAN_START_IND) ? \
    e3fe:	2014      	movs	r0, #20
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_SCANNING : DM_SCAN_STATE_IDLE;
    e400:	762b      	strb	r3, [r5, #24]
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_EXT_SCAN_START_IND) ? \
    e402:	e7bd      	b.n	e380 <dmExtScanHciHandler+0x30>
    dmScanCb.scanState = DM_SCAN_STATE_IDLE;
    e404:	2300      	movs	r3, #0
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_EXT_SCAN_STOP_IND, 0, 0);
    e406:	461a      	mov	r2, r3
    e408:	2015      	movs	r0, #21
    e40a:	214b      	movs	r1, #75	; 0x4b
    dmScanCb.scanState = DM_SCAN_STATE_IDLE;
    e40c:	762b      	strb	r3, [r5, #24]
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_EXT_SCAN_STOP_IND, 0, 0);
    e40e:	f7ff f9e7 	bl	d7e0 <dmDevPassEvtToDevPriv>
    (*dmCb.cback)((dmEvt_t *) pEvent);
    e412:	4b1c      	ldr	r3, [pc, #112]	; (e484 <dmExtScanHciHandler+0x134>)
    pEvent->hdr.event = DM_EXT_SCAN_STOP_IND;
    e414:	224b      	movs	r2, #75	; 0x4b
    (*dmCb.cback)((dmEvt_t *) pEvent);
    e416:	689b      	ldr	r3, [r3, #8]
    pEvent->hdr.event = DM_EXT_SCAN_STOP_IND;
    e418:	70a2      	strb	r2, [r4, #2]
    (*dmCb.cback)((dmEvt_t *) pEvent);
    e41a:	4620      	mov	r0, r4
}
    e41c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*dmCb.cback)((dmEvt_t *) pEvent);
    e420:	4718      	bx	r3
    if (!filtered)
    e422:	4e1a      	ldr	r6, [pc, #104]	; (e48c <dmExtScanHciHandler+0x13c>)
    e424:	7833      	ldrb	r3, [r6, #0]
    e426:	2b00      	cmp	r3, #0
    e428:	d1a2      	bne.n	e370 <dmExtScanHciHandler+0x20>
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e42a:	4b16      	ldr	r3, [pc, #88]	; (e484 <dmExtScanHciHandler+0x134>)
      pEvent->hdr.event = DM_EXT_SCAN_REPORT_IND;
    e42c:	224c      	movs	r2, #76	; 0x4c
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e42e:	689b      	ldr	r3, [r3, #8]
      pEvent->hdr.event = DM_EXT_SCAN_REPORT_IND;
    e430:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e432:	4620      	mov	r0, r4
    e434:	4798      	blx	r3
    if ((dmScanCb.discFilter != 0) &&
    e436:	7f6b      	ldrb	r3, [r5, #29]
    e438:	2b00      	cmp	r3, #0
    e43a:	d099      	beq.n	e370 <dmExtScanHciHandler+0x20>
        (DM_ADV_RPT_DATA_STATUS(pEvent->leExtAdvReport.eventType) != HCI_ADV_RPT_DATA_INCMPL_MORE))
    e43c:	88a3      	ldrh	r3, [r4, #4]
    e43e:	f3c3 1341 	ubfx	r3, r3, #5, #2
    if ((dmScanCb.discFilter != 0) &&
    e442:	2b01      	cmp	r3, #1
    e444:	d094      	beq.n	e370 <dmExtScanHciHandler+0x20>
      firstFrag = TRUE;
    e446:	4b10      	ldr	r3, [pc, #64]	; (e488 <dmExtScanHciHandler+0x138>)
      filtered = FALSE;
    e448:	2100      	movs	r1, #0
      firstFrag = TRUE;
    e44a:	2201      	movs	r2, #1
      filtered = FALSE;
    e44c:	7031      	strb	r1, [r6, #0]
      firstFrag = TRUE;
    e44e:	701a      	strb	r2, [r3, #0]
    e450:	e78e      	b.n	e370 <dmExtScanHciHandler+0x20>
    if (!filtered)
    e452:	4e0e      	ldr	r6, [pc, #56]	; (e48c <dmExtScanHciHandler+0x13c>)
    e454:	7833      	ldrb	r3, [r6, #0]
    e456:	2b00      	cmp	r3, #0
    e458:	d0e7      	beq.n	e42a <dmExtScanHciHandler+0xda>
    e45a:	e7ef      	b.n	e43c <dmExtScanHciHandler+0xec>
        if (dmScanCb.filterNextScanRsp)
    e45c:	7f2b      	ldrb	r3, [r5, #28]
          filtered = TRUE;
    e45e:	4e0b      	ldr	r6, [pc, #44]	; (e48c <dmExtScanHciHandler+0x13c>)
        if (dmScanCb.filterNextScanRsp)
    e460:	b12b      	cbz	r3, e46e <dmExtScanHciHandler+0x11e>
          filtered = TRUE;
    e462:	2301      	movs	r3, #1
    e464:	7033      	strb	r3, [r6, #0]
          dmScanCb.filterNextScanRsp = FALSE;
    e466:	2300      	movs	r3, #0
    e468:	772b      	strb	r3, [r5, #28]
      firstFrag = FALSE;
    e46a:	703b      	strb	r3, [r7, #0]
    if ((dmScanCb.discFilter != 0) &&
    e46c:	e7e6      	b.n	e43c <dmExtScanHciHandler+0xec>
    if (!filtered)
    e46e:	7833      	ldrb	r3, [r6, #0]
      firstFrag = FALSE;
    e470:	2200      	movs	r2, #0
    e472:	703a      	strb	r2, [r7, #0]
    if (!filtered)
    e474:	2b00      	cmp	r3, #0
    e476:	d0d8      	beq.n	e42a <dmExtScanHciHandler+0xda>
    e478:	e7dd      	b.n	e436 <dmExtScanHciHandler+0xe6>
    e47a:	bf00      	nop
    e47c:	10003fd8 	.word	0x10003fd8
    e480:	00025fac 	.word	0x00025fac
    e484:	10003fa4 	.word	0x10003fa4
    e488:	10002b38 	.word	0x10002b38
    e48c:	10003ff8 	.word	0x10003ff8

0000e490 <dmExtScanReset>:
{
    e490:	b500      	push	{lr}
  if ((dmScanCb.scanState == DM_SCAN_STATE_STOPPING) ||
    e492:	4b0b      	ldr	r3, [pc, #44]	; (e4c0 <dmExtScanReset+0x30>)
    e494:	7e1b      	ldrb	r3, [r3, #24]
    e496:	3b02      	subs	r3, #2
    e498:	2b01      	cmp	r3, #1
{
    e49a:	b083      	sub	sp, #12
  if ((dmScanCb.scanState == DM_SCAN_STATE_STOPPING) ||
    e49c:	d904      	bls.n	e4a8 <dmExtScanReset+0x18>
  dmScanInit();
    e49e:	f7ff fc87 	bl	ddb0 <dmScanInit>
}
    e4a2:	b003      	add	sp, #12
    e4a4:	f85d fb04 	ldr.w	pc, [sp], #4
    scanTimeout.hdr.event = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
    e4a8:	232d      	movs	r3, #45	; 0x2d
    dmExtScanHciHandler((hciEvt_t *) &scanTimeout);
    e4aa:	a801      	add	r0, sp, #4
    scanTimeout.hdr.event = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
    e4ac:	f8ad 3006 	strh.w	r3, [sp, #6]
    dmExtScanHciHandler((hciEvt_t *) &scanTimeout);
    e4b0:	f7ff ff4e 	bl	e350 <dmExtScanHciHandler>
  dmScanInit();
    e4b4:	f7ff fc7c 	bl	ddb0 <dmScanInit>
}
    e4b8:	b003      	add	sp, #12
    e4ba:	f85d fb04 	ldr.w	pc, [sp], #4
    e4be:	bf00      	nop
    e4c0:	10003fd8 	.word	0x10003fd8

0000e4c4 <DmScanModeExt>:
 *  \return TRUE if DM scanning is in extended mode. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmScanModeExt(void)
{
  return (dmFcnIfTbl[DM_ID_SCAN] == (dmFcnIf_t *) &dmScanFcnIf) ? TRUE : FALSE;
    e4c4:	4a03      	ldr	r2, [pc, #12]	; (e4d4 <DmScanModeExt+0x10>)
    e4c6:	4b04      	ldr	r3, [pc, #16]	; (e4d8 <DmScanModeExt+0x14>)
    e4c8:	6890      	ldr	r0, [r2, #8]
}
    e4ca:	1ac0      	subs	r0, r0, r3
    e4cc:	fab0 f080 	clz	r0, r0
    e4d0:	0940      	lsrs	r0, r0, #5
    e4d2:	4770      	bx	lr
    e4d4:	10002b00 	.word	0x10002b00
    e4d8:	00025fe4 	.word	0x00025fe4

0000e4dc <dmScanMsgHandler>:
 */
/*************************************************************************************************/
void dmScanMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmScanAct[DM_MSG_MASK(pMsg->event)])((dmScanMsg_t *)pMsg);
    e4dc:	7883      	ldrb	r3, [r0, #2]
    e4de:	4a03      	ldr	r2, [pc, #12]	; (e4ec <dmScanMsgHandler+0x10>)
    e4e0:	f003 030f 	and.w	r3, r3, #15
    e4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4e8:	4718      	bx	r3
    e4ea:	bf00      	nop
    e4ec:	00025ff0 	.word	0x00025ff0

0000e4f0 <dmScanReset>:
{
    e4f0:	b510      	push	{r4, lr}
  if ((dmScanCb.scanState == DM_SCAN_STATE_STOPPING) ||
    e4f2:	4c0d      	ldr	r4, [pc, #52]	; (e528 <dmScanReset+0x38>)
    e4f4:	7e23      	ldrb	r3, [r4, #24]
    e4f6:	3b02      	subs	r3, #2
    e4f8:	2b01      	cmp	r3, #1
{
    e4fa:	b082      	sub	sp, #8
  if ((dmScanCb.scanState == DM_SCAN_STATE_STOPPING) ||
    e4fc:	d903      	bls.n	e506 <dmScanReset+0x16>
  dmScanInit();
    e4fe:	f7ff fc57 	bl	ddb0 <dmScanInit>
}
    e502:	b002      	add	sp, #8
    e504:	bd10      	pop	{r4, pc}
    WsfTimerStop(&dmScanCb.scanTimer);
    e506:	4620      	mov	r0, r4
    e508:	f010 f826 	bl	1e558 <WsfTimerStop>
    (*dmCb.cback)((dmEvt_t *) &scanStop);
    e50c:	4b07      	ldr	r3, [pc, #28]	; (e52c <dmScanReset+0x3c>)
    scanStop.event = DM_SCAN_STOP_IND;
    e50e:	2225      	movs	r2, #37	; 0x25
    e510:	f8ad 2006 	strh.w	r2, [sp, #6]
    (*dmCb.cback)((dmEvt_t *) &scanStop);
    e514:	a801      	add	r0, sp, #4
    e516:	689b      	ldr	r3, [r3, #8]
    e518:	4798      	blx	r3
    dmScanCb.scanState = DM_SCAN_STATE_IDLE;
    e51a:	2300      	movs	r3, #0
    e51c:	7623      	strb	r3, [r4, #24]
  dmScanInit();
    e51e:	f7ff fc47 	bl	ddb0 <dmScanInit>
}
    e522:	b002      	add	sp, #8
    e524:	bd10      	pop	{r4, pc}
    e526:	bf00      	nop
    e528:	10003fd8 	.word	0x10003fd8
    e52c:	10003fa4 	.word	0x10003fa4

0000e530 <dmScanActStop>:
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
    e530:	4b05      	ldr	r3, [pc, #20]	; (e548 <dmScanActStop+0x18>)
    e532:	7e1a      	ldrb	r2, [r3, #24]
    e534:	2a02      	cmp	r2, #2
    e536:	d000      	beq.n	e53a <dmScanActStop+0xa>
}
    e538:	4770      	bx	lr
    HciLeSetScanEnableCmd(FALSE, 0);
    e53a:	2100      	movs	r1, #0
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
    e53c:	2203      	movs	r2, #3
    HciLeSetScanEnableCmd(FALSE, 0);
    e53e:	4608      	mov	r0, r1
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
    e540:	761a      	strb	r2, [r3, #24]
    HciLeSetScanEnableCmd(FALSE, 0);
    e542:	f008 b9db 	b.w	168fc <HciLeSetScanEnableCmd>
    e546:	bf00      	nop
    e548:	10003fd8 	.word	0x10003fd8

0000e54c <dmScanHciHandler>:
  if (pEvent->hdr.event == HCI_LE_ADV_REPORT_CBACK_EVT)
    e54c:	7881      	ldrb	r1, [r0, #2]
    e54e:	2906      	cmp	r1, #6
{
    e550:	b570      	push	{r4, r5, r6, lr}
    e552:	4604      	mov	r4, r0
  if (pEvent->hdr.event == HCI_LE_ADV_REPORT_CBACK_EVT)
    e554:	d019      	beq.n	e58a <dmScanHciHandler+0x3e>
  else if (pEvent->hdr.event == HCI_LE_SCAN_ENABLE_CMD_CMPL_CBACK_EVT)
    e556:	2934      	cmp	r1, #52	; 0x34
    e558:	d000      	beq.n	e55c <dmScanHciHandler+0x10>
}
    e55a:	bd70      	pop	{r4, r5, r6, pc}
    switch (dmScanCb.scanState)
    e55c:	4d28      	ldr	r5, [pc, #160]	; (e600 <dmScanHciHandler+0xb4>)
    e55e:	7e2b      	ldrb	r3, [r5, #24]
    e560:	2b01      	cmp	r3, #1
    e562:	d020      	beq.n	e5a6 <dmScanHciHandler+0x5a>
    e564:	2b03      	cmp	r3, #3
    e566:	d105      	bne.n	e574 <dmScanHciHandler+0x28>
      if (pEvent->hdr.status == HCI_SUCCESS)
    e568:	78c6      	ldrb	r6, [r0, #3]
    e56a:	b38e      	cbz	r6, e5d0 <dmScanHciHandler+0x84>
        dmScanCb.scanState = DM_SCAN_STATE_SCANNING;
    e56c:	2302      	movs	r3, #2
    e56e:	762b      	strb	r3, [r5, #24]
      pEvent->hdr.event = DM_SCAN_STOP_IND;
    e570:	2125      	movs	r1, #37	; 0x25
    e572:	70a1      	strb	r1, [r4, #2]
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_SCAN_START_IND) ? \
    e574:	2015      	movs	r0, #21
    e576:	2300      	movs	r3, #0
    e578:	461a      	mov	r2, r3
    e57a:	f7ff f931 	bl	d7e0 <dmDevPassEvtToDevPriv>
    (*dmCb.cback)((dmEvt_t *) pEvent);
    e57e:	4b21      	ldr	r3, [pc, #132]	; (e604 <dmScanHciHandler+0xb8>)
    e580:	4620      	mov	r0, r4
    e582:	689b      	ldr	r3, [r3, #8]
}
    e584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*dmCb.cback)((dmEvt_t *) pEvent);
    e588:	4718      	bx	r3
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
    e58a:	4d1d      	ldr	r5, [pc, #116]	; (e600 <dmScanHciHandler+0xb4>)
    e58c:	7e2b      	ldrb	r3, [r5, #24]
    e58e:	2b02      	cmp	r3, #2
    e590:	d1e3      	bne.n	e55a <dmScanHciHandler+0xe>
    if (dmScanCb.discFilter != 0)
    e592:	7f6b      	ldrb	r3, [r5, #29]
    e594:	b1a3      	cbz	r3, e5c0 <dmScanHciHandler+0x74>
      if (pEvent->leAdvReport.eventType == DM_RPT_SCAN_RESPONSE)
    e596:	7a83      	ldrb	r3, [r0, #10]
    e598:	2b04      	cmp	r3, #4
    e59a:	d11e      	bne.n	e5da <dmScanHciHandler+0x8e>
        if (dmScanCb.filterNextScanRsp)
    e59c:	7f2b      	ldrb	r3, [r5, #28]
    e59e:	b17b      	cbz	r3, e5c0 <dmScanHciHandler+0x74>
          dmScanCb.filterNextScanRsp = FALSE;
    e5a0:	2300      	movs	r3, #0
    e5a2:	772b      	strb	r3, [r5, #28]
}
    e5a4:	bd70      	pop	{r4, r5, r6, pc}
      if (pEvent->hdr.status == HCI_SUCCESS)
    e5a6:	78c3      	ldrb	r3, [r0, #3]
    e5a8:	b923      	cbnz	r3, e5b4 <dmScanHciHandler+0x68>
        if (dmScanCb.scanDuration > 0)
    e5aa:	8b69      	ldrh	r1, [r5, #26]
    e5ac:	bb11      	cbnz	r1, e5f4 <dmScanHciHandler+0xa8>
        dmScanCb.scanState = DM_SCAN_STATE_SCANNING;
    e5ae:	2302      	movs	r3, #2
    e5b0:	762b      	strb	r3, [r5, #24]
    e5b2:	e001      	b.n	e5b8 <dmScanHciHandler+0x6c>
        dmScanCb.scanState = DM_SCAN_STATE_IDLE;
    e5b4:	2300      	movs	r3, #0
    e5b6:	762b      	strb	r3, [r5, #24]
      pEvent->hdr.event = DM_SCAN_START_IND;
    e5b8:	2124      	movs	r1, #36	; 0x24
    e5ba:	70a1      	strb	r1, [r4, #2]
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_SCAN_START_IND) ? \
    e5bc:	2014      	movs	r0, #20
    e5be:	e7da      	b.n	e576 <dmScanHciHandler+0x2a>
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e5c0:	4b10      	ldr	r3, [pc, #64]	; (e604 <dmScanHciHandler+0xb8>)
      pEvent->hdr.event = DM_SCAN_REPORT_IND;
    e5c2:	2226      	movs	r2, #38	; 0x26
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e5c4:	689b      	ldr	r3, [r3, #8]
      pEvent->hdr.event = DM_SCAN_REPORT_IND;
    e5c6:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e5c8:	4620      	mov	r0, r4
}
    e5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e5ce:	4718      	bx	r3
        WsfTimerStop(&dmScanCb.scanTimer);
    e5d0:	4628      	mov	r0, r5
    e5d2:	f00f ffc1 	bl	1e558 <WsfTimerStop>
        dmScanCb.scanState = DM_SCAN_STATE_IDLE;
    e5d6:	762e      	strb	r6, [r5, #24]
    e5d8:	e7ca      	b.n	e570 <dmScanHciHandler+0x24>
        p = DmFindAdType(DM_ADV_TYPE_FLAGS, pEvent->leAdvReport.len, pEvent->leAdvReport.pData);
    e5da:	6842      	ldr	r2, [r0, #4]
    e5dc:	7a01      	ldrb	r1, [r0, #8]
    e5de:	2001      	movs	r0, #1
    e5e0:	f7ff f982 	bl	d8e8 <DmFindAdType>
        if (p == NULL)
    e5e4:	b118      	cbz	r0, e5ee <dmScanHciHandler+0xa2>
        else if ((p[DM_AD_DATA_IDX] & dmScanCb.discFilter) == 0)
    e5e6:	7882      	ldrb	r2, [r0, #2]
    e5e8:	7f6b      	ldrb	r3, [r5, #29]
    e5ea:	421a      	tst	r2, r3
    e5ec:	d1e8      	bne.n	e5c0 <dmScanHciHandler+0x74>
          dmScanCb.filterNextScanRsp = TRUE;
    e5ee:	2301      	movs	r3, #1
    e5f0:	772b      	strb	r3, [r5, #28]
}
    e5f2:	bd70      	pop	{r4, r5, r6, pc}
          dmScanCb.scanTimer.msg.event = DM_SCAN_MSG_TIMEOUT;
    e5f4:	2322      	movs	r3, #34	; 0x22
          WsfTimerStartMs(&dmScanCb.scanTimer, dmScanCb.scanDuration);
    e5f6:	4628      	mov	r0, r5
          dmScanCb.scanTimer.msg.event = DM_SCAN_MSG_TIMEOUT;
    e5f8:	72ab      	strb	r3, [r5, #10]
          WsfTimerStartMs(&dmScanCb.scanTimer, dmScanCb.scanDuration);
    e5fa:	f00f ff69 	bl	1e4d0 <WsfTimerStartMs>
    e5fe:	e7d6      	b.n	e5ae <dmScanHciHandler+0x62>
    e600:	10003fd8 	.word	0x10003fd8
    e604:	10003fa4 	.word	0x10003fa4

0000e608 <dmScanActStart>:
{
    e608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (dmScanCb.scanState == DM_SCAN_STATE_IDLE)
    e60c:	4e1b      	ldr	r6, [pc, #108]	; (e67c <dmScanActStart+0x74>)
{
    e60e:	b084      	sub	sp, #16
    e610:	4604      	mov	r4, r0
  uint8_t phyIdx = DmScanPhyToIdx(HCI_SCAN_PHY_LE_1M_BIT);
    e612:	2001      	movs	r0, #1
    e614:	f7ff f9d6 	bl	d9c4 <DmScanPhyToIdx>
  if (dmScanCb.scanState == DM_SCAN_STATE_IDLE)
    e618:	7e35      	ldrb	r5, [r6, #24]
    e61a:	b115      	cbz	r5, e622 <dmScanActStart+0x1a>
}
    e61c:	b004      	add	sp, #16
    e61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HciLeSetScanParamCmd(pMsg->apiStart.scanType[phyIdx], dmScanCb.scanInterval[phyIdx],
    e622:	1822      	adds	r2, r4, r0
    e624:	4603      	mov	r3, r0
    e626:	3308      	adds	r3, #8
    e628:	f892 8005 	ldrb.w	r8, [r2, #5]
    e62c:	4f14      	ldr	r7, [pc, #80]	; (e680 <dmScanActStart+0x78>)
    e62e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    e632:	7bf8      	ldrb	r0, [r7, #15]
    e634:	9103      	str	r1, [sp, #12]
    e636:	eb06 0243 	add.w	r2, r6, r3, lsl #1
    e63a:	8892      	ldrh	r2, [r2, #4]
    e63c:	9202      	str	r2, [sp, #8]
    e63e:	f7ff f99b 	bl	d978 <DmLlAddrType>
    e642:	4603      	mov	r3, r0
    e644:	7cf8      	ldrb	r0, [r7, #19]
    e646:	9000      	str	r0, [sp, #0]
    e648:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    e64c:	4640      	mov	r0, r8
    e64e:	f008 f98b 	bl	16968 <HciLeSetScanParamCmd>
    if (pMsg->apiStart.mode == DM_DISC_MODE_LIMITED)
    e652:	79e3      	ldrb	r3, [r4, #7]
    e654:	2b01      	cmp	r3, #1
    e656:	d00f      	beq.n	e678 <dmScanActStart+0x70>
    else if (pMsg->apiStart.mode == DM_DISC_MODE_GENERAL)
    e658:	2b02      	cmp	r3, #2
    e65a:	d00c      	beq.n	e676 <dmScanActStart+0x6e>
      dmScanCb.discFilter = 0;
    e65c:	7775      	strb	r5, [r6, #29]
    e65e:	7b21      	ldrb	r1, [r4, #12]
    dmScanCb.filterNextScanRsp = FALSE;
    e660:	8923      	ldrh	r3, [r4, #8]
    dmScanCb.scanDuration = pMsg->apiStart.duration;
    e662:	8373      	strh	r3, [r6, #26]
    dmScanCb.scanState = DM_SCAN_STATE_STARTING;
    e664:	2001      	movs	r0, #1
    dmScanCb.filterNextScanRsp = FALSE;
    e666:	2200      	movs	r2, #0
    e668:	7732      	strb	r2, [r6, #28]
    dmScanCb.scanState = DM_SCAN_STATE_STARTING;
    e66a:	7630      	strb	r0, [r6, #24]
}
    e66c:	b004      	add	sp, #16
    e66e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HciLeSetScanEnableCmd(TRUE, pMsg->apiStart.filterDup);
    e672:	f008 b943 	b.w	168fc <HciLeSetScanEnableCmd>
      dmScanCb.discFilter = DM_FLAG_LE_LIMITED_DISC | DM_FLAG_LE_GENERAL_DISC;
    e676:	2303      	movs	r3, #3
    e678:	7773      	strb	r3, [r6, #29]
    e67a:	e7f0      	b.n	e65e <dmScanActStart+0x56>
    e67c:	10003fd8 	.word	0x10003fd8
    e680:	10003fa4 	.word	0x10003fa4

0000e684 <dmScanActTimeout>:
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
    e684:	4b05      	ldr	r3, [pc, #20]	; (e69c <dmScanActTimeout+0x18>)
    e686:	7e1a      	ldrb	r2, [r3, #24]
    e688:	2a02      	cmp	r2, #2
    e68a:	d000      	beq.n	e68e <dmScanActTimeout+0xa>
}
    e68c:	4770      	bx	lr
    HciLeSetScanEnableCmd(FALSE, 0);
    e68e:	2100      	movs	r1, #0
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
    e690:	2203      	movs	r2, #3
    HciLeSetScanEnableCmd(FALSE, 0);
    e692:	4608      	mov	r0, r1
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
    e694:	761a      	strb	r2, [r3, #24]
    HciLeSetScanEnableCmd(FALSE, 0);
    e696:	f008 b931 	b.w	168fc <HciLeSetScanEnableCmd>
    e69a:	bf00      	nop
    e69c:	10003fd8 	.word	0x10003fd8

0000e6a0 <DmScanInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmScanInit(void)
{
    e6a0:	b508      	push	{r3, lr}
  WsfTaskLock();
    e6a2:	f00f fcbb 	bl	1e01c <WsfTaskLock>

  /* set function interface table */
  dmFcnIfTbl[DM_ID_SCAN] = (dmFcnIf_t *) &dmScanFcnIf;
    e6a6:	4b04      	ldr	r3, [pc, #16]	; (e6b8 <DmScanInit+0x18>)
    e6a8:	4a04      	ldr	r2, [pc, #16]	; (e6bc <DmScanInit+0x1c>)
    e6aa:	609a      	str	r2, [r3, #8]

  /* initialize scan module */
  dmScanInit();
    e6ac:	f7ff fb80 	bl	ddb0 <dmScanInit>

  WsfTaskUnlock();
}
    e6b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WsfTaskUnlock();
    e6b4:	f00f bcbc 	b.w	1e030 <WsfTaskUnlock>
    e6b8:	10002b00 	.word	0x10002b00
    e6bc:	00025ffc 	.word	0x00025ffc

0000e6c0 <DmScanModeLeg>:
 *  \return TRUE if DM scanning is in legacy mode. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmScanModeLeg(void)
{
  return (dmFcnIfTbl[DM_ID_SCAN] == (dmFcnIf_t *) &dmScanFcnIf) ? TRUE : FALSE;
    e6c0:	4a03      	ldr	r2, [pc, #12]	; (e6d0 <DmScanModeLeg+0x10>)
    e6c2:	4b04      	ldr	r3, [pc, #16]	; (e6d4 <DmScanModeLeg+0x14>)
    e6c4:	6890      	ldr	r0, [r2, #8]
}
    e6c6:	1ac0      	subs	r0, r0, r3
    e6c8:	fab0 f080 	clz	r0, r0
    e6cc:	0940      	lsrs	r0, r0, #5
    e6ce:	4770      	bx	lr
    e6d0:	10002b00 	.word	0x10002b00
    e6d4:	00025ffc 	.word	0x00025ffc

0000e6d8 <dmSecMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecMsgHandler(dmSecMsg_t *pMsg)
{
    e6d8:	b570      	push	{r4, r5, r6, lr}
    e6da:	4604      	mov	r4, r0
  dmConnCcb_t *pCcb;

  /* look up ccb */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->hdr.param)) != NULL)
    e6dc:	7800      	ldrb	r0, [r0, #0]
    e6de:	f7fe fc5f 	bl	cfa0 <dmConnCcbById>
    e6e2:	b128      	cbz	r0, e6f0 <dmSecMsgHandler+0x18>
  {
    /* process API encrypt req */
    switch (pMsg->hdr.event)
    e6e4:	78a3      	ldrb	r3, [r4, #2]
    e6e6:	2b50      	cmp	r3, #80	; 0x50
    e6e8:	4605      	mov	r5, r0
    e6ea:	d00c      	beq.n	e706 <dmSecMsgHandler+0x2e>
    e6ec:	2b51      	cmp	r3, #81	; 0x51
    e6ee:	d000      	beq.n	e6f2 <dmSecMsgHandler+0x1a>

    default:
      break;
    }
  }
}
    e6f0:	bd70      	pop	{r4, r5, r6, pc}
      if (pMsg->ltkRsp.keyFound)
    e6f2:	7d22      	ldrb	r2, [r4, #20]
    e6f4:	b1ca      	cbz	r2, e72a <dmSecMsgHandler+0x52>
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
    e6f6:	7d63      	ldrb	r3, [r4, #21]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
    e6f8:	8980      	ldrh	r0, [r0, #12]
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
    e6fa:	762b      	strb	r3, [r5, #24]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
    e6fc:	1d21      	adds	r1, r4, #4
}
    e6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
    e702:	f007 be89 	b.w	16418 <HciLeLtkReqReplCmd>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
    e706:	7c00      	ldrb	r0, [r0, #16]
    e708:	2201      	movs	r2, #1
    e70a:	2102      	movs	r1, #2
    e70c:	f7fe fe80 	bl	d410 <DmConnSetIdle>
      pCcb->tmpSecLevel = pMsg->encryptReq.secLevel;
    e710:	7fa2      	ldrb	r2, [r4, #30]
    e712:	762a      	strb	r2, [r5, #24]
      pCcb->usingLtk = TRUE;
    e714:	2301      	movs	r3, #1
    e716:	74ab      	strb	r3, [r5, #18]
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
    e718:	8ba2      	ldrh	r2, [r4, #28]
    e71a:	89a8      	ldrh	r0, [r5, #12]
    e71c:	1d23      	adds	r3, r4, #4
    e71e:	f104 0114 	add.w	r1, r4, #20
}
    e722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
    e726:	f008 b9a5 	b.w	16a74 <HciLeStartEncryptionCmd>
        DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
    e72a:	7c00      	ldrb	r0, [r0, #16]
    e72c:	2102      	movs	r1, #2
    e72e:	f7fe fe6f 	bl	d410 <DmConnSetIdle>
        HciLeLtkReqNegReplCmd(pCcb->handle);
    e732:	89a8      	ldrh	r0, [r5, #12]
}
    e734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HciLeLtkReqNegReplCmd(pCcb->handle);
    e738:	f007 be38 	b.w	163ac <HciLeLtkReqNegReplCmd>

0000e73c <dmSecReset>:
 */
/*************************************************************************************************/
void dmSecReset(void)
{
  /* initialize smp database */
  SmpDbInit();
    e73c:	f00d b83e 	b.w	1b7bc <SmpDbInit>

0000e740 <dmSecHciHandler>:
{
    e740:	b570      	push	{r4, r5, r6, lr}
    e742:	4604      	mov	r4, r0
    e744:	b084      	sub	sp, #16
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
    e746:	8800      	ldrh	r0, [r0, #0]
    e748:	f7fe fc02 	bl	cf50 <dmConnCcbByHandle>
    e74c:	b130      	cbz	r0, e75c <dmSecHciHandler+0x1c>
    if (pEvent->hdr.event == HCI_LE_LTK_REQ_CBACK_EVT)
    e74e:	78a3      	ldrb	r3, [r4, #2]
    e750:	2b10      	cmp	r3, #16
    e752:	4605      	mov	r5, r0
    e754:	d004      	beq.n	e760 <dmSecHciHandler+0x20>
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
    e756:	3b0e      	subs	r3, #14
    e758:	2b01      	cmp	r3, #1
    e75a:	d922      	bls.n	e7a2 <dmSecHciHandler+0x62>
}
    e75c:	b004      	add	sp, #16
    e75e:	bd70      	pop	{r4, r5, r6, pc}
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
    e760:	89e3      	ldrh	r3, [r4, #14]
    e762:	b96b      	cbnz	r3, e780 <dmSecHciHandler+0x40>
          (memcmp(pEvent->leLtkReq.randNum, calc128Zeros, HCI_RAND_LEN) == 0))
    e764:	492b      	ldr	r1, [pc, #172]	; (e814 <dmSecHciHandler+0xd4>)
    e766:	2208      	movs	r2, #8
    e768:	1da0      	adds	r0, r4, #6
    e76a:	f014 fdb5 	bl	232d8 <memcmp>
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
    e76e:	4606      	mov	r6, r0
    e770:	b930      	cbnz	r0, e780 <dmSecHciHandler+0x40>
        if ((pKey = SmpDmGetStk(pCcb->connId, &secLevel)) != NULL)
    e772:	a902      	add	r1, sp, #8
    e774:	7c28      	ldrb	r0, [r5, #16]
    e776:	f00d fd15 	bl	1c1a4 <SmpDmGetStk>
    e77a:	4601      	mov	r1, r0
    e77c:	2800      	cmp	r0, #0
    e77e:	d141      	bne.n	e804 <dmSecHciHandler+0xc4>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
    e780:	7c28      	ldrb	r0, [r5, #16]
    e782:	2201      	movs	r2, #1
    e784:	2102      	movs	r1, #2
    e786:	f7fe fe43 	bl	d410 <DmConnSetIdle>
      pCcb->usingLtk = TRUE;
    e78a:	2201      	movs	r2, #1
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e78c:	4b22      	ldr	r3, [pc, #136]	; (e818 <dmSecHciHandler+0xd8>)
      pCcb->usingLtk = TRUE;
    e78e:	74aa      	strb	r2, [r5, #18]
      pEvent->hdr.param = pCcb->connId;
    e790:	7c29      	ldrb	r1, [r5, #16]
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e792:	689b      	ldr	r3, [r3, #8]
      pEvent->hdr.param = pCcb->connId;
    e794:	8021      	strh	r1, [r4, #0]
      pEvent->hdr.event = DM_SEC_LTK_REQ_IND;
    e796:	2230      	movs	r2, #48	; 0x30
    e798:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
    e79a:	4620      	mov	r0, r4
    e79c:	4798      	blx	r3
}
    e79e:	b004      	add	sp, #16
    e7a0:	bd70      	pop	{r4, r5, r6, pc}
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
    e7a2:	2200      	movs	r2, #0
    e7a4:	7c00      	ldrb	r0, [r0, #16]
    e7a6:	2102      	movs	r1, #2
    e7a8:	f7fe fe32 	bl	d410 <DmConnSetIdle>
      encryptInd.hdr.status = pEvent->hdr.status;
    e7ac:	78e3      	ldrb	r3, [r4, #3]
      encryptInd.hdr.param = pCcb->connId;
    e7ae:	7c2a      	ldrb	r2, [r5, #16]
    e7b0:	f8ad 2008 	strh.w	r2, [sp, #8]
      encryptInd.hdr.status = pEvent->hdr.status;
    e7b4:	f88d 300b 	strb.w	r3, [sp, #11]
      if (encryptInd.hdr.status == HCI_SUCCESS)
    e7b8:	b193      	cbz	r3, e7e0 <dmSecHciHandler+0xa0>
    e7ba:	232d      	movs	r3, #45	; 0x2d
    e7bc:	f88d 300a 	strb.w	r3, [sp, #10]
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
    e7c0:	a802      	add	r0, sp, #8
  (*dmCb.cback)(pDmEvt);
    e7c2:	4b15      	ldr	r3, [pc, #84]	; (e818 <dmSecHciHandler+0xd8>)
    e7c4:	9001      	str	r0, [sp, #4]
    e7c6:	689b      	ldr	r3, [r3, #8]
    e7c8:	4798      	blx	r3
      encryptInd.hdr.param = pCcb->connId;
    e7ca:	7c2a      	ldrb	r2, [r5, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
    e7cc:	78e3      	ldrb	r3, [r4, #3]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
    e7ce:	9801      	ldr	r0, [sp, #4]
      encryptInd.hdr.param = pCcb->connId;
    e7d0:	f8ad 2008 	strh.w	r2, [sp, #8]
      encryptInd.hdr.status = pEvent->hdr.status;
    e7d4:	f88d 300b 	strb.w	r3, [sp, #11]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
    e7d8:	f00d fcba 	bl	1c150 <SmpDmEncryptInd>
}
    e7dc:	b004      	add	sp, #16
    e7de:	bd70      	pop	{r4, r5, r6, pc}
        pCcb->secLevel = pCcb->tmpSecLevel;
    e7e0:	7e2a      	ldrb	r2, [r5, #24]
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
    e7e2:	4b0e      	ldr	r3, [pc, #56]	; (e81c <dmSecHciHandler+0xdc>)
        pCcb->secLevel = pCcb->tmpSecLevel;
    e7e4:	75ea      	strb	r2, [r5, #23]
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
    e7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
        encryptInd.usingLtk = pCcb->usingLtk;
    e7ea:	7ca9      	ldrb	r1, [r5, #18]
    e7ec:	f88d 100c 	strb.w	r1, [sp, #12]
    e7f0:	222c      	movs	r2, #44	; 0x2c
    e7f2:	f88d 200a 	strb.w	r2, [sp, #10]
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
    e7f6:	a802      	add	r0, sp, #8
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	d0e2      	beq.n	e7c2 <dmSecHciHandler+0x82>
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
    e7fc:	9001      	str	r0, [sp, #4]
    e7fe:	4798      	blx	r3
    e800:	9801      	ldr	r0, [sp, #4]
    e802:	e7de      	b.n	e7c2 <dmSecHciHandler+0x82>
          pCcb->tmpSecLevel = secLevel;
    e804:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e808:	762b      	strb	r3, [r5, #24]
          pCcb->usingLtk = FALSE;
    e80a:	74ae      	strb	r6, [r5, #18]
          HciLeLtkReqReplCmd(pEvent->hdr.param, pKey);
    e80c:	8820      	ldrh	r0, [r4, #0]
    e80e:	f007 fe03 	bl	16418 <HciLeLtkReqReplCmd>
          return;
    e812:	e7a3      	b.n	e75c <dmSecHciHandler+0x1c>
    e814:	0002689c 	.word	0x0002689c
    e818:	10003fa4 	.word	0x10003fa4
    e81c:	10003ed0 	.word	0x10003ed0

0000e820 <DmSmpCbackExec>:
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
    e820:	7883      	ldrb	r3, [r0, #2]
    e822:	2b2a      	cmp	r3, #42	; 0x2a
{
    e824:	b510      	push	{r4, lr}
    e826:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
    e828:	d007      	beq.n	e83a <DmSmpCbackExec+0x1a>
    e82a:	2b2c      	cmp	r3, #44	; 0x2c
    e82c:	d005      	beq.n	e83a <DmSmpCbackExec+0x1a>
  (*dmCb.cback)(pDmEvt);
    e82e:	4b07      	ldr	r3, [pc, #28]	; (e84c <DmSmpCbackExec+0x2c>)
    e830:	4620      	mov	r0, r4
    e832:	689b      	ldr	r3, [r3, #8]
}
    e834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (*dmCb.cback)(pDmEvt);
    e838:	4718      	bx	r3
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
    e83a:	4b05      	ldr	r3, [pc, #20]	; (e850 <DmSmpCbackExec+0x30>)
    e83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e840:	2b00      	cmp	r3, #0
    e842:	d0f4      	beq.n	e82e <DmSmpCbackExec+0xe>
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
    e844:	4620      	mov	r0, r4
    e846:	4798      	blx	r3
    e848:	e7f1      	b.n	e82e <DmSmpCbackExec+0xe>
    e84a:	bf00      	nop
    e84c:	10003fa4 	.word	0x10003fa4
    e850:	10003ed0 	.word	0x10003ed0

0000e854 <DmSecCancelReq>:
{
    e854:	b538      	push	{r3, r4, r5, lr}
    e856:	4605      	mov	r5, r0
  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
    e858:	2004      	movs	r0, #4
{
    e85a:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
    e85c:	f00f fb9c 	bl	1df98 <WsfMsgAlloc>
    e860:	b138      	cbz	r0, e872 <DmSecCancelReq+0x1e>
    pMsg->event = SMP_MSG_API_CANCEL_REQ;
    e862:	2203      	movs	r2, #3
    e864:	7082      	strb	r2, [r0, #2]
    pMsg->status = reason;
    e866:	70c4      	strb	r4, [r0, #3]
    pMsg->param = connId;
    e868:	8005      	strh	r5, [r0, #0]
}
    e86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
    e86e:	f00d bc67 	b.w	1c140 <SmpDmMsgSend>
}
    e872:	bd38      	pop	{r3, r4, r5, pc}

0000e874 <DmSecAuthRsp>:
{
    e874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e876:	4607      	mov	r7, r0
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
    e878:	2016      	movs	r0, #22
{
    e87a:	460e      	mov	r6, r1
    e87c:	4615      	mov	r5, r2
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
    e87e:	f00f fb8b 	bl	1df98 <WsfMsgAlloc>
    e882:	b178      	cbz	r0, e8a4 <DmSecAuthRsp+0x30>
    pMsg->hdr.event = SMP_MSG_API_AUTH_RSP;
    e884:	2304      	movs	r3, #4
    e886:	4604      	mov	r4, r0
    e888:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = connId;
    e88a:	8007      	strh	r7, [r0, #0]
    pMsg->authDataLen = authDataLen;
    e88c:	7506      	strb	r6, [r0, #20]
    if (pAuthData != NULL)
    e88e:	b125      	cbz	r5, e89a <DmSecAuthRsp+0x26>
      memcpy(pMsg->authData, pAuthData, authDataLen);
    e890:	4632      	mov	r2, r6
    e892:	4629      	mov	r1, r5
    e894:	4418      	add	r0, r3
    e896:	f7fd fc33 	bl	c100 <memcpy>
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
    e89a:	4620      	mov	r0, r4
}
    e89c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
    e8a0:	f00d bc4e 	b.w	1c140 <SmpDmMsgSend>
}
    e8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e8a6:	bf00      	nop

0000e8a8 <DmSecInit>:
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
    e8a8:	4b03      	ldr	r3, [pc, #12]	; (e8b8 <DmSecInit+0x10>)
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
    e8aa:	4904      	ldr	r1, [pc, #16]	; (e8bc <DmSecInit+0x14>)
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
    e8ac:	4a04      	ldr	r2, [pc, #16]	; (e8c0 <DmSecInit+0x18>)
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
    e8ae:	4805      	ldr	r0, [pc, #20]	; (e8c4 <DmSecInit+0x1c>)
    e8b0:	6148      	str	r0, [r1, #20]
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
    e8b2:	e9c3 2200 	strd	r2, r2, [r3]
}
    e8b6:	4770      	bx	lr
    e8b8:	10003ffc 	.word	0x10003ffc
    e8bc:	10002b00 	.word	0x10002b00
    e8c0:	0002689c 	.word	0x0002689c
    e8c4:	00026008 	.word	0x00026008

0000e8c8 <DmSecGetLocalCsrk>:
  return dmSecCb.pCsrk;
    e8c8:	4b01      	ldr	r3, [pc, #4]	; (e8d0 <DmSecGetLocalCsrk+0x8>)
}
    e8ca:	6858      	ldr	r0, [r3, #4]
    e8cc:	4770      	bx	lr
    e8ce:	bf00      	nop
    e8d0:	10003ffc 	.word	0x10003ffc

0000e8d4 <DmSecGetLocalIrk>:
  return dmSecCb.pIrk;
    e8d4:	4b01      	ldr	r3, [pc, #4]	; (e8dc <DmSecGetLocalIrk+0x8>)
}
    e8d6:	6818      	ldr	r0, [r3, #0]
    e8d8:	4770      	bx	lr
    e8da:	bf00      	nop
    e8dc:	10003ffc 	.word	0x10003ffc

0000e8e0 <dmSecLescMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecLescMsgHandler(dmSecMsg_t *pMsg)
{
    e8e0:	b530      	push	{r4, r5, lr}
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
    e8e2:	7883      	ldrb	r3, [r0, #2]
    e8e4:	2b81      	cmp	r3, #129	; 0x81
{
    e8e6:	b08b      	sub	sp, #44	; 0x2c
    e8e8:	4604      	mov	r4, r0
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
    e8ea:	d003      	beq.n	e8f4 <dmSecLescMsgHandler+0x14>
  {
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
  else if (pMsg->hdr.event == DM_SEC_MSG_CALC_OOB_CNF)
    e8ec:	2b80      	cmp	r3, #128	; 0x80
    e8ee:	d009      	beq.n	e904 <dmSecLescMsgHandler+0x24>

    WsfBufFree(dmSecOobRand);

    (*dmCb.cback)((dmEvt_t *) &oobEvt);
  }
}
    e8f0:	b00b      	add	sp, #44	; 0x2c
    e8f2:	bd30      	pop	{r4, r5, pc}
    (*dmCb.cback)((dmEvt_t *) pMsg);
    e8f4:	4b0f      	ldr	r3, [pc, #60]	; (e934 <dmSecLescMsgHandler+0x54>)
    e8f6:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
    e8f8:	2234      	movs	r2, #52	; 0x34
    e8fa:	7082      	strb	r2, [r0, #2]
}
    e8fc:	b00b      	add	sp, #44	; 0x2c
    e8fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
    e902:	4718      	bx	r3
    Calc128Cpy(oobEvt.random, dmSecOobRand);
    e904:	4d0c      	ldr	r5, [pc, #48]	; (e938 <dmSecLescMsgHandler+0x58>)
    WsfBufFree(pCmacMsg->pPlainText);
    e906:	6880      	ldr	r0, [r0, #8]
    e908:	f00f fb16 	bl	1df38 <WsfBufFree>
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
    e90c:	2333      	movs	r3, #51	; 0x33
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
    e90e:	6861      	ldr	r1, [r4, #4]
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
    e910:	f8ad 3006 	strh.w	r3, [sp, #6]
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
    e914:	a802      	add	r0, sp, #8
    e916:	f006 fff5 	bl	15904 <Calc128Cpy>
    Calc128Cpy(oobEvt.random, dmSecOobRand);
    e91a:	6829      	ldr	r1, [r5, #0]
    e91c:	a806      	add	r0, sp, #24
    e91e:	f006 fff1 	bl	15904 <Calc128Cpy>
    WsfBufFree(dmSecOobRand);
    e922:	6828      	ldr	r0, [r5, #0]
    e924:	f00f fb08 	bl	1df38 <WsfBufFree>
    (*dmCb.cback)((dmEvt_t *) &oobEvt);
    e928:	4b02      	ldr	r3, [pc, #8]	; (e934 <dmSecLescMsgHandler+0x54>)
    e92a:	a801      	add	r0, sp, #4
    e92c:	689b      	ldr	r3, [r3, #8]
    e92e:	4798      	blx	r3
}
    e930:	b00b      	add	sp, #44	; 0x2c
    e932:	bd30      	pop	{r4, r5, pc}
    e934:	10003fa4 	.word	0x10003fa4
    e938:	10004004 	.word	0x10004004

0000e93c <DmSecGenerateEccKeyReq>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecGenerateEccKeyReq()
{
  SecEccGenKey(dmCb.handlerId, 0, DM_SEC_MSG_ECC_KEY_CNF);
    e93c:	4b02      	ldr	r3, [pc, #8]	; (e948 <DmSecGenerateEccKeyReq+0xc>)
    e93e:	2281      	movs	r2, #129	; 0x81
    e940:	7b18      	ldrb	r0, [r3, #12]
    e942:	2100      	movs	r1, #0
    e944:	f000 b8c2 	b.w	eacc <SecEccGenKey>
    e948:	10003fa4 	.word	0x10003fa4

0000e94c <DmSecGetEccKey>:
 */
/*************************************************************************************************/
secEccKey_t *DmSecGetEccKey(void)
{
  return &localEccKey;
}
    e94c:	4800      	ldr	r0, [pc, #0]	; (e950 <DmSecGetEccKey+0x4>)
    e94e:	4770      	bx	lr
    e950:	10004008 	.word	0x10004008

0000e954 <DmSecLescInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLescInit(void)
{
  dmFcnIfTbl[DM_ID_LESC] = (dmFcnIf_t *) &dmSecLescFcnIf;
    e954:	4b01      	ldr	r3, [pc, #4]	; (e95c <DmSecLescInit+0x8>)
    e956:	4a02      	ldr	r2, [pc, #8]	; (e960 <DmSecLescInit+0xc>)
    e958:	621a      	str	r2, [r3, #32]
}
    e95a:	4770      	bx	lr
    e95c:	10002b00 	.word	0x10002b00
    e960:	00026014 	.word	0x00026014

0000e964 <DmSmpEncryptReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSmpEncryptReq(dmConnId_t connId, uint8_t secLevel, uint8_t *pKey)
{
    e964:	b570      	push	{r4, r5, r6, lr}
    e966:	460d      	mov	r5, r1
    e968:	4614      	mov	r4, r2
  dmConnCcb_t *pCcb;

  if ((pCcb = dmConnCcbById(connId)) != NULL)
    e96a:	f7fe fb19 	bl	cfa0 <dmConnCcbById>
    e96e:	b148      	cbz	r0, e984 <DmSmpEncryptReq+0x20>
  {
    /* store security level */
    pCcb->tmpSecLevel = secLevel;

    /* not using LTK */
    pCcb->usingLtk = FALSE;
    e970:	2200      	movs	r2, #0
    pCcb->tmpSecLevel = secLevel;
    e972:	7605      	strb	r5, [r0, #24]
    pCcb->usingLtk = FALSE;
    e974:	7482      	strb	r2, [r0, #18]

    /* start encryption; note EDIV and RAND are zero */
    HciLeStartEncryptionCmd(pCcb->handle, (uint8_t *) calc128Zeros, 0, pKey);
    e976:	4623      	mov	r3, r4
    e978:	8980      	ldrh	r0, [r0, #12]
    e97a:	4903      	ldr	r1, [pc, #12]	; (e988 <DmSmpEncryptReq+0x24>)
  }
}
    e97c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HciLeStartEncryptionCmd(pCcb->handle, (uint8_t *) calc128Zeros, 0, pKey);
    e980:	f008 b878 	b.w	16a74 <HciLeStartEncryptionCmd>
}
    e984:	bd70      	pop	{r4, r5, r6, pc}
    e986:	bf00      	nop
    e988:	0002689c 	.word	0x0002689c

0000e98c <DmSecPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecPairReq(dmConnId_t connId, uint8_t oob, uint8_t auth, uint8_t iKeyDist, uint8_t rKeyDist)
{
    e98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e990:	4680      	mov	r8, r0
  smpDmPair_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
    e992:	2008      	movs	r0, #8
{
    e994:	f89d 7018 	ldrb.w	r7, [sp, #24]
    e998:	460e      	mov	r6, r1
    e99a:	4615      	mov	r5, r2
    e99c:	461c      	mov	r4, r3
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
    e99e:	f00f fafb 	bl	1df98 <WsfMsgAlloc>
    e9a2:	b178      	cbz	r0, e9c4 <DmSecPairReq+0x38>
    pMsg->hdr.param = connId;
    pMsg->oob = oob;
    pMsg->auth = auth;

    /* clear any erroneous key dist bits set by app */
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
    e9a4:	f004 0307 	and.w	r3, r4, #7
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
    e9a8:	f007 0707 	and.w	r7, r7, #7
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
    e9ac:	7183      	strb	r3, [r0, #6]
    pMsg->hdr.event = SMP_MSG_API_PAIR_REQ;
    e9ae:	2301      	movs	r3, #1
    pMsg->oob = oob;
    e9b0:	7106      	strb	r6, [r0, #4]
    pMsg->auth = auth;
    e9b2:	7145      	strb	r5, [r0, #5]
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
    e9b4:	71c7      	strb	r7, [r0, #7]
    pMsg->hdr.event = SMP_MSG_API_PAIR_REQ;
    e9b6:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = connId;
    e9b8:	f8a0 8000 	strh.w	r8, [r0]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
  }
}
    e9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
    e9c0:	f00d bbbe 	b.w	1c140 <SmpDmMsgSend>
}
    e9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e9c8 <DmSecEncryptReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecEncryptReq(dmConnId_t connId, uint8_t secLevel, dmSecLtk_t *pLtk)
{
    e9c8:	b570      	push	{r4, r5, r6, lr}
    e9ca:	4606      	mov	r6, r0
  dmSecApiEncryptReq_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiEncryptReq_t))) != NULL)
    e9cc:	2020      	movs	r0, #32
{
    e9ce:	460d      	mov	r5, r1
    e9d0:	4614      	mov	r4, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiEncryptReq_t))) != NULL)
    e9d2:	f00f fae1 	bl	1df98 <WsfMsgAlloc>
    e9d6:	b1f8      	cbz	r0, ea18 <DmSecEncryptReq+0x50>
  {
    pMsg->hdr.event = DM_SEC_MSG_API_ENCRYPT_REQ;
    e9d8:	2250      	movs	r2, #80	; 0x50
    e9da:	7082      	strb	r2, [r0, #2]
    pMsg->hdr.param = connId;
    e9dc:	4602      	mov	r2, r0
    e9de:	4603      	mov	r3, r0
    e9e0:	f822 6b04 	strh.w	r6, [r2], #4
    memcpy(&pMsg->ltk, pLtk, sizeof(dmSecLtk_t));
    e9e4:	6820      	ldr	r0, [r4, #0]
    e9e6:	f8d4 c004 	ldr.w	ip, [r4, #4]
    e9ea:	68e1      	ldr	r1, [r4, #12]
    e9ec:	68a6      	ldr	r6, [r4, #8]
    e9ee:	6058      	str	r0, [r3, #4]
    e9f0:	f8c2 c004 	str.w	ip, [r2, #4]
    e9f4:	6096      	str	r6, [r2, #8]
    e9f6:	60d1      	str	r1, [r2, #12]
    e9f8:	6920      	ldr	r0, [r4, #16]
    e9fa:	f8d4 c014 	ldr.w	ip, [r4, #20]
    e9fe:	f8c2 c014 	str.w	ip, [r2, #20]
    ea02:	6110      	str	r0, [r2, #16]
    ea04:	8b20      	ldrh	r0, [r4, #24]
    pMsg->secLevel = secLevel;

    WsfMsgSend(dmCb.handlerId, pMsg);
    ea06:	4905      	ldr	r1, [pc, #20]	; (ea1c <DmSecEncryptReq+0x54>)
    memcpy(&pMsg->ltk, pLtk, sizeof(dmSecLtk_t));
    ea08:	8310      	strh	r0, [r2, #24]
    pMsg->secLevel = secLevel;
    ea0a:	779d      	strb	r5, [r3, #30]
    WsfMsgSend(dmCb.handlerId, pMsg);
    ea0c:	7b08      	ldrb	r0, [r1, #12]
  }
}
    ea0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    ea12:	4619      	mov	r1, r3
    ea14:	f00f bacc 	b.w	1dfb0 <WsfMsgSend>
}
    ea18:	bd70      	pop	{r4, r5, r6, pc}
    ea1a:	bf00      	nop
    ea1c:	10003fa4 	.word	0x10003fa4

0000ea20 <DmSecPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecPairRsp(dmConnId_t connId, uint8_t oob, uint8_t auth, uint8_t iKeyDist, uint8_t rKeyDist)
{
    ea20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea24:	4680      	mov	r8, r0
  smpDmPair_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
    ea26:	2008      	movs	r0, #8
{
    ea28:	f89d 7018 	ldrb.w	r7, [sp, #24]
    ea2c:	460e      	mov	r6, r1
    ea2e:	4615      	mov	r5, r2
    ea30:	461c      	mov	r4, r3
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
    ea32:	f00f fab1 	bl	1df98 <WsfMsgAlloc>
    ea36:	b178      	cbz	r0, ea58 <DmSecPairRsp+0x38>
    pMsg->hdr.param = connId;
    pMsg->oob = oob;
    pMsg->auth = auth;

    /* clear any erroneous key dist bits set by app */
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
    ea38:	f004 0307 	and.w	r3, r4, #7
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
    ea3c:	f007 0707 	and.w	r7, r7, #7
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
    ea40:	7183      	strb	r3, [r0, #6]
    pMsg->hdr.event = SMP_MSG_API_PAIR_RSP;
    ea42:	2302      	movs	r3, #2
    pMsg->oob = oob;
    ea44:	7106      	strb	r6, [r0, #4]
    pMsg->auth = auth;
    ea46:	7145      	strb	r5, [r0, #5]
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
    ea48:	71c7      	strb	r7, [r0, #7]
    pMsg->hdr.event = SMP_MSG_API_PAIR_RSP;
    ea4a:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = connId;
    ea4c:	f8a0 8000 	strh.w	r8, [r0]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
  }
}
    ea50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
    ea54:	f00d bb74 	b.w	1c140 <SmpDmMsgSend>
}
    ea58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ea5c <DmSecSlaveReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSlaveReq(dmConnId_t connId, uint8_t auth)
{
    ea5c:	b538      	push	{r3, r4, r5, lr}
    ea5e:	4605      	mov	r5, r0
  smpDmSecurityReq_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmSecurityReq_t))) != NULL)
    ea60:	2006      	movs	r0, #6
{
    ea62:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmSecurityReq_t))) != NULL)
    ea64:	f00f fa98 	bl	1df98 <WsfMsgAlloc>
    ea68:	b138      	cbz	r0, ea7a <DmSecSlaveReq+0x1e>
  {
    pMsg->hdr.event = SMP_MSG_API_SECURITY_REQ;
    ea6a:	2205      	movs	r2, #5
    ea6c:	7082      	strb	r2, [r0, #2]
    pMsg->hdr.param = connId;
    pMsg->auth = auth;
    ea6e:	7104      	strb	r4, [r0, #4]
    pMsg->hdr.param = connId;
    ea70:	8005      	strh	r5, [r0, #0]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
  }
}
    ea72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
    ea76:	f00d bb63 	b.w	1c140 <SmpDmMsgSend>
}
    ea7a:	bd38      	pop	{r3, r4, r5, pc}

0000ea7c <DmSecLtkRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLtkRsp(dmConnId_t connId, bool_t keyFound, uint8_t secLevel, uint8_t *pKey)
{
    ea7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea80:	4607      	mov	r7, r0
  dmSecApiLtkRsp_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiLtkRsp_t))) != NULL)
    ea82:	2016      	movs	r0, #22
{
    ea84:	460d      	mov	r5, r1
    ea86:	4616      	mov	r6, r2
    ea88:	4698      	mov	r8, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiLtkRsp_t))) != NULL)
    ea8a:	f00f fa85 	bl	1df98 <WsfMsgAlloc>
    ea8e:	b190      	cbz	r0, eab6 <DmSecLtkRsp+0x3a>
  {
    pMsg->hdr.event = DM_SEC_MSG_API_LTK_RSP;
    ea90:	2351      	movs	r3, #81	; 0x51
    ea92:	4604      	mov	r4, r0
    pMsg->hdr.param = connId;
    ea94:	8007      	strh	r7, [r0, #0]
    pMsg->keyFound = keyFound;
    ea96:	7505      	strb	r5, [r0, #20]
    pMsg->secLevel = secLevel;
    ea98:	7546      	strb	r6, [r0, #21]
    pMsg->hdr.event = DM_SEC_MSG_API_LTK_RSP;
    ea9a:	7083      	strb	r3, [r0, #2]
    if (keyFound)
    ea9c:	b935      	cbnz	r5, eaac <DmSecLtkRsp+0x30>
    {
      Calc128Cpy(pMsg->key, pKey);
    }

    WsfMsgSend(dmCb.handlerId, pMsg);
    ea9e:	4b07      	ldr	r3, [pc, #28]	; (eabc <DmSecLtkRsp+0x40>)
    eaa0:	4621      	mov	r1, r4
    eaa2:	7b18      	ldrb	r0, [r3, #12]
  }
}
    eaa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
    eaa8:	f00f ba82 	b.w	1dfb0 <WsfMsgSend>
      Calc128Cpy(pMsg->key, pKey);
    eaac:	4641      	mov	r1, r8
    eaae:	3004      	adds	r0, #4
    eab0:	f006 ff28 	bl	15904 <Calc128Cpy>
    eab4:	e7f3      	b.n	ea9e <DmSecLtkRsp+0x22>
}
    eab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eaba:	bf00      	nop
    eabc:	10003fa4 	.word	0x10003fa4

0000eac0 <secEccRng>:
 *
 *  \return TRUE if successful.
 */
/*************************************************************************************************/
static int secEccRng(uint8_t *p_dest, unsigned p_size)
{
    eac0:	b508      	push	{r3, lr}
  SecRand(p_dest, p_size);
    eac2:	b2c9      	uxtb	r1, r1
    eac4:	f003 f9b0 	bl	11e28 <SecRand>
  return TRUE;
}
    eac8:	2001      	movs	r0, #1
    eaca:	bd08      	pop	{r3, pc}

0000eacc <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
    eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eace:	4605      	mov	r5, r0
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
    ead0:	2064      	movs	r0, #100	; 0x64
{
    ead2:	460e      	mov	r6, r1
    ead4:	4617      	mov	r7, r2
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
    ead6:	f00f fa5f 	bl	1df98 <WsfMsgAlloc>

  if (pMsg)
    eada:	4604      	mov	r4, r0
    eadc:	b900      	cbnz	r0, eae0 <SecEccGenKey+0x14>

    return TRUE;
  }

  return FALSE;
}
    eade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uECC_make_key(pMsg->data.key.pubKey_x, pMsg->data.key.privKey);
    eae0:	f100 0144 	add.w	r1, r0, #68	; 0x44
    eae4:	3004      	adds	r0, #4
    eae6:	f002 fbf5 	bl	112d4 <uECC_make_key>
    pMsg->hdr.status = HCI_SUCCESS;
    eaea:	2300      	movs	r3, #0
    WsfMsgSend(handlerId, pMsg);
    eaec:	4628      	mov	r0, r5
    pMsg->hdr.event = event;
    eaee:	70a7      	strb	r7, [r4, #2]
    pMsg->hdr.param = param;
    eaf0:	8026      	strh	r6, [r4, #0]
    pMsg->hdr.status = HCI_SUCCESS;
    eaf2:	70e3      	strb	r3, [r4, #3]
    WsfMsgSend(handlerId, pMsg);
    eaf4:	4621      	mov	r1, r4
    eaf6:	f00f fa5b 	bl	1dfb0 <WsfMsgSend>
    return TRUE;
    eafa:	2001      	movs	r0, #1
}
    eafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eafe:	bf00      	nop

0000eb00 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
    eb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb04:	4605      	mov	r5, r0
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
    eb06:	2064      	movs	r0, #100	; 0x64
{
    eb08:	4688      	mov	r8, r1
    eb0a:	4617      	mov	r7, r2
    eb0c:	461e      	mov	r6, r3
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
    eb0e:	f00f fa43 	bl	1df98 <WsfMsgAlloc>

  if (pMsg)
    eb12:	4604      	mov	r4, r0
    eb14:	b908      	cbnz	r0, eb1a <SecEccGenSharedSecret+0x1a>

    return TRUE;
  }

  return FALSE;
}
    eb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool_t keyValid = uECC_valid_public_key(pKey->pubKey_x);
    eb1a:	4628      	mov	r0, r5
    eb1c:	f002 fde0 	bl	116e0 <uECC_valid_public_key>
    if (keyValid)
    eb20:	b2c0      	uxtb	r0, r0
    eb22:	b978      	cbnz	r0, eb44 <SecEccGenSharedSecret+0x44>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
    eb24:	2220      	movs	r2, #32
    eb26:	21ff      	movs	r1, #255	; 0xff
    eb28:	1d20      	adds	r0, r4, #4
    eb2a:	f014 fc07 	bl	2333c <memset>
    pMsg->hdr.event = event;
    eb2e:	70a6      	strb	r6, [r4, #2]
    pMsg->hdr.param = param;
    eb30:	8027      	strh	r7, [r4, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
    eb32:	2312      	movs	r3, #18
    WsfMsgSend(handlerId, pMsg);
    eb34:	4640      	mov	r0, r8
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
    eb36:	70e3      	strb	r3, [r4, #3]
    WsfMsgSend(handlerId, pMsg);
    eb38:	4621      	mov	r1, r4
    eb3a:	f00f fa39 	bl	1dfb0 <WsfMsgSend>
    return TRUE;
    eb3e:	2001      	movs	r0, #1
}
    eb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uECC_shared_secret(pKey->pubKey_x, pKey->privKey, pMsg->data.sharedSecret.secret);
    eb44:	1d22      	adds	r2, r4, #4
    eb46:	f105 0140 	add.w	r1, r5, #64	; 0x40
    eb4a:	4628      	mov	r0, r5
    eb4c:	f002 fcc8 	bl	114e0 <uECC_shared_secret>
    pMsg->hdr.event = event;
    eb50:	70a6      	strb	r6, [r4, #2]
    pMsg->hdr.param = param;
    eb52:	8027      	strh	r7, [r4, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
    eb54:	2300      	movs	r3, #0
    eb56:	e7ed      	b.n	eb34 <SecEccGenSharedSecret+0x34>

0000eb58 <SecEccInit>:
 */
/*************************************************************************************************/
void SecEccInit()
{
  //srand((unsigned int)time(NULL));
  uECC_set_rng(secEccRng);
    eb58:	4801      	ldr	r0, [pc, #4]	; (eb60 <SecEccInit+0x8>)
    eb5a:	f002 bbb5 	b.w	112c8 <uECC_set_rng>
    eb5e:	bf00      	nop
    eb60:	0000eac1 	.word	0x0000eac1

0000eb64 <PaspcPassDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void PaspcPassDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
    eb64:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attPassSvcUuid,
    eb66:	4b06      	ldr	r3, [pc, #24]	; (eb80 <PaspcPassDiscover+0x1c>)
    eb68:	4a06      	ldr	r2, [pc, #24]	; (eb84 <PaspcPassDiscover+0x20>)
{
    eb6a:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attPassSvcUuid,
    eb6c:	e9cd 3100 	strd	r3, r1, [sp]
    eb70:	2305      	movs	r3, #5
    eb72:	2102      	movs	r1, #2
    eb74:	f010 f8b4 	bl	1ece0 <AppDiscFindService>
                     PASPC_PASS_HDL_LIST_LEN, (attcDiscChar_t **) paspcPassDiscCharList, pHdlList);
}
    eb78:	b003      	add	sp, #12
    eb7a:	f85d fb04 	ldr.w	pc, [sp], #4
    eb7e:	bf00      	nop
    eb80:	10002b3c 	.word	0x10002b3c
    eb84:	00026850 	.word	0x00026850

0000eb88 <PaspcPassControl>:
/*************************************************************************************************/
void PaspcPassControl(dmConnId_t connId, uint16_t handle, uint8_t command)
{
  uint8_t buf[1];

  if (handle != ATT_HANDLE_NONE)
    eb88:	b901      	cbnz	r1, eb8c <PaspcPassControl+0x4>
    eb8a:	4770      	bx	lr
{
    eb8c:	b500      	push	{lr}
    eb8e:	b083      	sub	sp, #12
    eb90:	4694      	mov	ip, r2
  {
    buf[0] = command;
    AttcWriteCmd(connId, handle, sizeof(buf), buf);
    eb92:	ab01      	add	r3, sp, #4
    eb94:	2201      	movs	r2, #1
    buf[0] = command;
    eb96:	f88d c004 	strb.w	ip, [sp, #4]
    AttcWriteCmd(connId, handle, sizeof(buf), buf);
    eb9a:	f004 fcad 	bl	134f8 <AttcWriteCmd>
  }
}
    eb9e:	b003      	add	sp, #12
    eba0:	f85d fb04 	ldr.w	pc, [sp], #4

0000eba4 <PaspcPassValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t PaspcPassValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
    eba4:	b508      	push	{r3, lr}
  uint8_t status = ATT_SUCCESS;

  /* alert status */
  if (pMsg->handle == pHdlList[PASPC_PASS_AS_HDL_IDX])
    eba6:	8802      	ldrh	r2, [r0, #0]
    eba8:	894b      	ldrh	r3, [r1, #10]
    ebaa:	429a      	cmp	r2, r3
    ebac:	d00b      	beq.n	ebc6 <PaspcPassValueUpdate+0x22>
  {
    APP_TRACE_INFO1("Phone alert status: 0x%02x", *pMsg->pValue);
  }
  /* ringer setting */
  else if (pMsg->handle == pHdlList[PASPC_PASS_RS_HDL_IDX])
    ebae:	8882      	ldrh	r2, [r0, #4]
    ebb0:	429a      	cmp	r2, r3
    ebb2:	d001      	beq.n	ebb8 <PaspcPassValueUpdate+0x14>
    APP_TRACE_INFO1("Ringer setting: 0x%02x", *pMsg->pValue);
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
    ebb4:	200a      	movs	r0, #10
  }

  return status;
}
    ebb6:	bd08      	pop	{r3, pc}
    APP_TRACE_INFO1("Ringer setting: 0x%02x", *pMsg->pValue);
    ebb8:	684b      	ldr	r3, [r1, #4]
    ebba:	4806      	ldr	r0, [pc, #24]	; (ebd4 <PaspcPassValueUpdate+0x30>)
    ebbc:	7819      	ldrb	r1, [r3, #0]
    ebbe:	f00f fd6b 	bl	1e698 <WsfTrace>
  uint8_t status = ATT_SUCCESS;
    ebc2:	2000      	movs	r0, #0
}
    ebc4:	bd08      	pop	{r3, pc}
    APP_TRACE_INFO1("Phone alert status: 0x%02x", *pMsg->pValue);
    ebc6:	684b      	ldr	r3, [r1, #4]
    ebc8:	4803      	ldr	r0, [pc, #12]	; (ebd8 <PaspcPassValueUpdate+0x34>)
    ebca:	7819      	ldrb	r1, [r3, #0]
    ebcc:	f00f fd64 	bl	1e698 <WsfTrace>
  uint8_t status = ATT_SUCCESS;
    ebd0:	2000      	movs	r0, #0
}
    ebd2:	bd08      	pop	{r3, pc}
    ebd4:	0002603c 	.word	0x0002603c
    ebd8:	00026020 	.word	0x00026020

0000ebdc <watchDiscCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void watchDiscCback(dmConnId_t connId, uint8_t status)
{
    ebdc:	b530      	push	{r4, r5, lr}
    ebde:	4604      	mov	r4, r0
    ebe0:	b083      	sub	sp, #12
  switch(status)
    ebe2:	2908      	cmp	r1, #8
    ebe4:	d80b      	bhi.n	ebfe <watchDiscCback+0x22>
    ebe6:	e8df f001 	tbb	[pc, r1]
    ebea:	453a      	.short	0x453a
    ebec:	0c0c534a 	.word	0x0c0c534a
    ebf0:	0525      	.short	0x0525
    ebf2:	34          	.byte	0x34
    ebf3:	00          	.byte	0x00
    case APP_DISC_CFG_CMPL:
      AppDiscComplete(connId, status);
      break;

    case APP_DISC_CFG_CONN_START:
      if (DmConnRole(connId) == DM_ROLE_SLAVE)
    ebf4:	f7fe fc4e 	bl	d494 <DmConnRole>
    ebf8:	2801      	cmp	r0, #1
    ebfa:	f000 8081 	beq.w	ed00 <watchDiscCback+0x124>
      break;

    default:
      break;
  }
}
    ebfe:	b003      	add	sp, #12
    ec00:	bd30      	pop	{r4, r5, pc}
      watchCb.discState++;
    ec02:	4d58      	ldr	r5, [pc, #352]	; (ed64 <watchDiscCback+0x188>)
    ec04:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
    ec08:	3301      	adds	r3, #1
    ec0a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
      if (DmConnRole(connId) == DM_ROLE_MASTER)
    ec0e:	f7fe fc41 	bl	d494 <DmConnRole>
        if (watchCb.discState == WATCH_DISC_MASTER_DIS_SVC)
    ec12:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
      if (DmConnRole(connId) == DM_ROLE_MASTER)
    ec16:	2800      	cmp	r0, #0
    ec18:	d147      	bne.n	ecaa <watchDiscCback+0xce>
        if (watchCb.discState == WATCH_DISC_MASTER_DIS_SVC)
    ec1a:	2b01      	cmp	r3, #1
    ec1c:	d07a      	beq.n	ed14 <watchDiscCback+0x138>
        else if (watchCb.discState == WATCH_DISC_MASTER_HRS_SVC)
    ec1e:	2b02      	cmp	r3, #2
    ec20:	f000 8087 	beq.w	ed32 <watchDiscCback+0x156>
          AppDiscComplete(connId, APP_DISC_CMPL);
    ec24:	4620      	mov	r0, r4
    ec26:	2104      	movs	r1, #4
    ec28:	f00f fffe 	bl	1ec28 <AppDiscComplete>
          AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_MASTER_CFG_LIST_LEN,
    ec2c:	4b4e      	ldr	r3, [pc, #312]	; (ed68 <watchDiscCback+0x18c>)
    ec2e:	9501      	str	r5, [sp, #4]
    ec30:	220e      	movs	r2, #14
    ec32:	e007      	b.n	ec44 <watchDiscCback+0x68>
      if (DmConnRole(connId) == DM_ROLE_MASTER)
    ec34:	f7fe fc2e 	bl	d494 <DmConnRole>
    ec38:	2800      	cmp	r0, #0
    ec3a:	d14e      	bne.n	ecda <watchDiscCback+0xfe>
        AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_MASTER_CFG_LIST_LEN,
    ec3c:	4949      	ldr	r1, [pc, #292]	; (ed64 <watchDiscCback+0x188>)
    ec3e:	4b4a      	ldr	r3, [pc, #296]	; (ed68 <watchDiscCback+0x18c>)
    ec40:	9101      	str	r1, [sp, #4]
    ec42:	220e      	movs	r2, #14
    ec44:	9200      	str	r2, [sp, #0]
    ec46:	2106      	movs	r1, #6
    ec48:	220b      	movs	r2, #11
    ec4a:	4620      	mov	r0, r4
    ec4c:	f010 f878 	bl	1ed40 <AppDiscConfigure>
    ec50:	e7d5      	b.n	ebfe <watchDiscCback+0x22>
      AppDiscComplete(connId, status);
    ec52:	2108      	movs	r1, #8
}
    ec54:	b003      	add	sp, #12
    ec56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppDiscComplete(connId, status);
    ec5a:	f00f bfe5 	b.w	1ec28 <AppDiscComplete>
      if (DmConnRole(connId) == DM_ROLE_MASTER)
    ec5e:	f7fe fc19 	bl	d494 <DmConnRole>
    ec62:	bb88      	cbnz	r0, ecc8 <watchDiscCback+0xec>
        AppDiscSetHdlList(connId, WATCH_DISC_MASTER_HDL_LIST_LEN, watchCb.hdlMasterList);
    ec64:	4a3f      	ldr	r2, [pc, #252]	; (ed64 <watchDiscCback+0x188>)
    ec66:	210e      	movs	r1, #14
        AppDiscSetHdlList(connId, WATCH_DISC_SLAVE_HDL_LIST_LEN, watchCb.hdlSlaveList);
    ec68:	4620      	mov	r0, r4
}
    ec6a:	b003      	add	sp, #12
    ec6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        AppDiscSetHdlList(connId, WATCH_DISC_SLAVE_HDL_LIST_LEN, watchCb.hdlSlaveList);
    ec70:	f00f bfd0 	b.w	1ec14 <AppDiscSetHdlList>
}
    ec74:	b003      	add	sp, #12
    ec76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppDiscReadDatabaseHash(connId);
    ec7a:	f010 b8db 	b.w	1ee34 <AppDiscReadDatabaseHash>
      if (DmConnRole(connId) == DM_ROLE_MASTER)
    ec7e:	f7fe fc09 	bl	d494 <DmConnRole>
    ec82:	bb20      	cbnz	r0, ecce <watchDiscCback+0xf2>
        AppMasterSecurityReq(connId);
    ec84:	4620      	mov	r0, r4
}
    ec86:	b003      	add	sp, #12
    ec88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        AppMasterSecurityReq(connId);
    ec8c:	f010 bc8e 	b.w	1f5ac <AppMasterSecurityReq>
      if (DmConnRole(connId) == DM_ROLE_MASTER)
    ec90:	f7fe fc00 	bl	d494 <DmConnRole>
    ec94:	4603      	mov	r3, r0
    ec96:	bb58      	cbnz	r0, ecf0 <watchDiscCback+0x114>
        watchCb.discState = WATCH_DISC_MASTER_GATT_SVC;
    ec98:	4932      	ldr	r1, [pc, #200]	; (ed64 <watchDiscCback+0x188>)
        GattDiscover(connId, pWatchMstGattHdlList);
    ec9a:	4620      	mov	r0, r4
        watchCb.discState = WATCH_DISC_MASTER_GATT_SVC;
    ec9c:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
}
    eca0:	b003      	add	sp, #12
    eca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        GattDiscover(connId, pWatchSlvGattHdlList);
    eca6:	f006 bdb9 	b.w	1581c <GattDiscover>
        if (watchCb.discState == WATCH_DISC_SLAVE_CTS_SVC)
    ecaa:	2b01      	cmp	r3, #1
    ecac:	d039      	beq.n	ed22 <watchDiscCback+0x146>
        else if (watchCb.discState == WATCH_DISC_SLAVE_ANS_SVC)
    ecae:	2b02      	cmp	r3, #2
    ecb0:	d04f      	beq.n	ed52 <watchDiscCback+0x176>
        else if (watchCb.discState == WATCH_DISC_SLAVE_PASS_SVC)
    ecb2:	2b03      	cmp	r3, #3
    ecb4:	d045      	beq.n	ed42 <watchDiscCback+0x166>
          AppDiscComplete(connId, APP_DISC_CMPL);
    ecb6:	4620      	mov	r0, r4
    ecb8:	2104      	movs	r1, #4
          AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_SLAVE_CFG_LIST_LEN,
    ecba:	352a      	adds	r5, #42	; 0x2a
          AppDiscComplete(connId, APP_DISC_CMPL);
    ecbc:	f00f ffb4 	bl	1ec28 <AppDiscComplete>
          AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_SLAVE_CFG_LIST_LEN,
    ecc0:	4b2a      	ldr	r3, [pc, #168]	; (ed6c <watchDiscCback+0x190>)
    ecc2:	9501      	str	r5, [sp, #4]
    ecc4:	2213      	movs	r2, #19
    ecc6:	e00c      	b.n	ece2 <watchDiscCback+0x106>
        AppDiscSetHdlList(connId, WATCH_DISC_SLAVE_HDL_LIST_LEN, watchCb.hdlSlaveList);
    ecc8:	4a29      	ldr	r2, [pc, #164]	; (ed70 <watchDiscCback+0x194>)
    ecca:	2113      	movs	r1, #19
    eccc:	e7cc      	b.n	ec68 <watchDiscCback+0x8c>
        AppSlaveSecurityReq(connId);
    ecce:	4620      	mov	r0, r4
}
    ecd0:	b003      	add	sp, #12
    ecd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        AppSlaveSecurityReq(connId);
    ecd6:	f011 bcb5 	b.w	20644 <AppSlaveSecurityReq>
        AppDiscConfigure(connId, APP_DISC_CFG_START, WATCH_DISC_SLAVE_CFG_LIST_LEN,
    ecda:	4925      	ldr	r1, [pc, #148]	; (ed70 <watchDiscCback+0x194>)
    ecdc:	4b23      	ldr	r3, [pc, #140]	; (ed6c <watchDiscCback+0x190>)
    ecde:	9101      	str	r1, [sp, #4]
    ece0:	2213      	movs	r2, #19
    ece2:	9200      	str	r2, [sp, #0]
    ece4:	2106      	movs	r1, #6
    ece6:	2212      	movs	r2, #18
    ece8:	4620      	mov	r0, r4
    ecea:	f010 f829 	bl	1ed40 <AppDiscConfigure>
    ecee:	e786      	b.n	ebfe <watchDiscCback+0x22>
        watchCb.discState = WATCH_DISC_SLAVE_GATT_SVC;
    ecf0:	4b1c      	ldr	r3, [pc, #112]	; (ed64 <watchDiscCback+0x188>)
    ecf2:	2200      	movs	r2, #0
        GattDiscover(connId, pWatchSlvGattHdlList);
    ecf4:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    ecf8:	4620      	mov	r0, r4
        watchCb.discState = WATCH_DISC_SLAVE_GATT_SVC;
    ecfa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    ecfe:	e7cf      	b.n	eca0 <watchDiscCback+0xc4>
        AppDiscConfigure(connId, APP_DISC_CFG_CONN_START, WATCH_DISC_CONN_CFG_LIST_LEN,
    ed00:	491b      	ldr	r1, [pc, #108]	; (ed70 <watchDiscCback+0x194>)
    ed02:	4b1c      	ldr	r3, [pc, #112]	; (ed74 <watchDiscCback+0x198>)
    ed04:	2207      	movs	r2, #7
    ed06:	e9cd 2100 	strd	r2, r1, [sp]
    ed0a:	4620      	mov	r0, r4
    ed0c:	4611      	mov	r1, r2
    ed0e:	f010 f817 	bl	1ed40 <AppDiscConfigure>
}
    ed12:	e774      	b.n	ebfe <watchDiscCback+0x22>
          DisDiscover(connId, pWatchDisHdlList);
    ed14:	1da9      	adds	r1, r5, #6
    ed16:	4620      	mov	r0, r4
}
    ed18:	b003      	add	sp, #12
    ed1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          DisDiscover(connId, pWatchDisHdlList);
    ed1e:	f009 bfc7 	b.w	18cb0 <DisDiscover>
          TipcCtsDiscover(connId, pWatchCtsHdlList);
    ed22:	f105 0130 	add.w	r1, r5, #48	; 0x30
    ed26:	4620      	mov	r0, r4
}
    ed28:	b003      	add	sp, #12
    ed2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          TipcCtsDiscover(connId, pWatchCtsHdlList);
    ed2e:	f000 bbdf 	b.w	f4f0 <TipcCtsDiscover>
          HrpcHrsDiscover(connId, pWatchHrsHdlList);
    ed32:	f105 0114 	add.w	r1, r5, #20
    ed36:	4620      	mov	r0, r4
}
    ed38:	b003      	add	sp, #12
    ed3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HrpcHrsDiscover(connId, pWatchHrsHdlList);
    ed3e:	f00a b8db 	b.w	18ef8 <HrpcHrsDiscover>
          PaspcPassDiscover(connId, pWatchPassHdlList);
    ed42:	f105 0146 	add.w	r1, r5, #70	; 0x46
    ed46:	4620      	mov	r0, r4
}
    ed48:	b003      	add	sp, #12
    ed4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          PaspcPassDiscover(connId, pWatchPassHdlList);
    ed4e:	f7ff bf09 	b.w	eb64 <PaspcPassDiscover>
          AnpcAnsDiscover(connId, pWatchAnsHdlList);
    ed52:	f105 0138 	add.w	r1, r5, #56	; 0x38
    ed56:	4620      	mov	r0, r4
}
    ed58:	b003      	add	sp, #12
    ed5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          AnpcAnsDiscover(connId, pWatchAnsHdlList);
    ed5e:	f003 b8bd 	b.w	11edc <AnpcAnsDiscover>
    ed62:	bf00      	nop
    ed64:	10004068 	.word	0x10004068
    ed68:	000261d4 	.word	0x000261d4
    ed6c:	0002622c 	.word	0x0002622c
    ed70:	10004092 	.word	0x10004092
    ed74:	0002619c 	.word	0x0002619c

0000ed78 <watchCccCback>:
{
    ed78:	b538      	push	{r3, r4, r5, lr}
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
    ed7a:	8883      	ldrh	r3, [r0, #4]
{
    ed7c:	4604      	mov	r4, r0
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
    ed7e:	b993      	cbnz	r3, eda6 <watchCccCback+0x2e>
  if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
    ed80:	200a      	movs	r0, #10
    ed82:	f00f f909 	bl	1df98 <WsfMsgAlloc>
    ed86:	4601      	mov	r1, r0
    ed88:	b160      	cbz	r0, eda4 <watchCccCback+0x2c>
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
    ed8a:	6823      	ldr	r3, [r4, #0]
    ed8c:	6862      	ldr	r2, [r4, #4]
    ed8e:	6042      	str	r2, [r0, #4]
    ed90:	6003      	str	r3, [r0, #0]
    ed92:	8922      	ldrh	r2, [r4, #8]
    WsfMsgSend(watchCb.handlerId, pMsg);
    ed94:	4b0c      	ldr	r3, [pc, #48]	; (edc8 <watchCccCback+0x50>)
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
    ed96:	8102      	strh	r2, [r0, #8]
    WsfMsgSend(watchCb.handlerId, pMsg);
    ed98:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
}
    ed9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(watchCb.handlerId, pMsg);
    eda0:	f00f b906 	b.w	1dfb0 <WsfMsgSend>
}
    eda4:	bd38      	pop	{r3, r4, r5, pc}
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE) &&
    eda6:	7800      	ldrb	r0, [r0, #0]
    eda8:	f010 f912 	bl	1efd0 <AppDbGetHdl>
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
    edac:	4605      	mov	r5, r0
    edae:	2800      	cmp	r0, #0
    edb0:	d0e6      	beq.n	ed80 <watchCccCback+0x8>
      AppCheckBonded((dmConnId_t)pEvt->hdr.param))
    edb2:	7820      	ldrb	r0, [r4, #0]
    edb4:	f010 f884 	bl	1eec0 <AppCheckBonded>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE) &&
    edb8:	2800      	cmp	r0, #0
    edba:	d0e1      	beq.n	ed80 <watchCccCback+0x8>
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
    edbc:	88e2      	ldrh	r2, [r4, #6]
    edbe:	7a21      	ldrb	r1, [r4, #8]
    edc0:	4628      	mov	r0, r5
    edc2:	f00e fc5f 	bl	1d684 <AppDbSetCccTblValue>
    edc6:	e7db      	b.n	ed80 <watchCccCback+0x8>
    edc8:	10004068 	.word	0x10004068

0000edcc <watchAttCback>:
{
    edcc:	b538      	push	{r3, r4, r5, lr}
    edce:	4605      	mov	r5, r0
  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
    edd0:	8900      	ldrh	r0, [r0, #8]
    edd2:	3010      	adds	r0, #16
    edd4:	b280      	uxth	r0, r0
    edd6:	f00f f8df 	bl	1df98 <WsfMsgAlloc>
    edda:	b1a0      	cbz	r0, ee06 <watchAttCback+0x3a>
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
    eddc:	68e9      	ldr	r1, [r5, #12]
    edde:	682a      	ldr	r2, [r5, #0]
    ede0:	68ab      	ldr	r3, [r5, #8]
    ede2:	60c1      	str	r1, [r0, #12]
    pMsg->pValue = (uint8_t *) (pMsg + 1);
    ede4:	4604      	mov	r4, r0
    ede6:	3010      	adds	r0, #16
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
    ede8:	60a3      	str	r3, [r4, #8]
    edea:	6022      	str	r2, [r4, #0]
    pMsg->pValue = (uint8_t *) (pMsg + 1);
    edec:	6060      	str	r0, [r4, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
    edee:	6869      	ldr	r1, [r5, #4]
    edf0:	892a      	ldrh	r2, [r5, #8]
    edf2:	f7fd f985 	bl	c100 <memcpy>
    WsfMsgSend(watchCb.handlerId, pMsg);
    edf6:	4b04      	ldr	r3, [pc, #16]	; (ee08 <watchAttCback+0x3c>)
    edf8:	4621      	mov	r1, r4
    edfa:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
}
    edfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(watchCb.handlerId, pMsg);
    ee02:	f00f b8d5 	b.w	1dfb0 <WsfMsgSend>
}
    ee06:	bd38      	pop	{r3, r4, r5, pc}
    ee08:	10004068 	.word	0x10004068

0000ee0c <watchDmCback>:
{
    ee0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee0e:	4604      	mov	r4, r0
  len = DmSizeOfEvt(pDmEvt);
    ee10:	f7fe fdcc 	bl	d9ac <DmSizeOfEvt>
  if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
    ee14:	78a3      	ldrb	r3, [r4, #2]
    ee16:	2b26      	cmp	r3, #38	; 0x26
  len = DmSizeOfEvt(pDmEvt);
    ee18:	4605      	mov	r5, r0
  if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
    ee1a:	d014      	beq.n	ee46 <watchDmCback+0x3a>
    reportLen = 0;
    ee1c:	2700      	movs	r7, #0
  if ((pMsg = WsfMsgAlloc(len + reportLen)) != NULL)
    ee1e:	f00f f8bb 	bl	1df98 <WsfMsgAlloc>
    ee22:	4606      	mov	r6, r0
    ee24:	b170      	cbz	r0, ee44 <watchDmCback+0x38>
    memcpy(pMsg, pDmEvt, len);
    ee26:	462a      	mov	r2, r5
    ee28:	4621      	mov	r1, r4
    ee2a:	f7fd f969 	bl	c100 <memcpy>
    if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
    ee2e:	78a3      	ldrb	r3, [r4, #2]
    ee30:	2b26      	cmp	r3, #38	; 0x26
    ee32:	d00c      	beq.n	ee4e <watchDmCback+0x42>
    WsfMsgSend(watchCb.handlerId, pMsg);
    ee34:	4b09      	ldr	r3, [pc, #36]	; (ee5c <watchDmCback+0x50>)
    ee36:	4631      	mov	r1, r6
    ee38:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
}
    ee3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgSend(watchCb.handlerId, pMsg);
    ee40:	f00f b8b6 	b.w	1dfb0 <WsfMsgSend>
}
    ee44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    reportLen = pDmEvt->scanReport.len;
    ee46:	7a27      	ldrb	r7, [r4, #8]
  if ((pMsg = WsfMsgAlloc(len + reportLen)) != NULL)
    ee48:	4438      	add	r0, r7
    ee4a:	b280      	uxth	r0, r0
    ee4c:	e7e7      	b.n	ee1e <watchDmCback+0x12>
      pMsg->scanReport.pData = (uint8_t *) ((uint8_t *) pMsg + len);
    ee4e:	1970      	adds	r0, r6, r5
    ee50:	6070      	str	r0, [r6, #4]
      memcpy(pMsg->scanReport.pData, pDmEvt->scanReport.pData, reportLen);
    ee52:	6861      	ldr	r1, [r4, #4]
    ee54:	463a      	mov	r2, r7
    ee56:	f7fd f953 	bl	c100 <memcpy>
    ee5a:	e7eb      	b.n	ee34 <watchDmCback+0x28>
    ee5c:	10004068 	.word	0x10004068

0000ee60 <watchBtnCback>:
{
    ee60:	b570      	push	{r4, r5, r6, lr}
    ee62:	b082      	sub	sp, #8
    ee64:	4604      	mov	r4, r0
  AppConnOpenList(connIdList);
    ee66:	a801      	add	r0, sp, #4
    ee68:	f010 f898 	bl	1ef9c <AppConnOpenList>
    if (pConnIdList[i] != DM_CONN_ID_NONE)
    ee6c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ee70:	2800      	cmp	r0, #0
    ee72:	d14d      	bne.n	ef10 <watchBtnCback+0xb0>
    ee74:	f89d 0005 	ldrb.w	r0, [sp, #5]
    ee78:	2800      	cmp	r0, #0
    ee7a:	d158      	bne.n	ef2e <watchBtnCback+0xce>
    ee7c:	f89d 0006 	ldrb.w	r0, [sp, #6]
    ee80:	2800      	cmp	r0, #0
    ee82:	d162      	bne.n	ef4a <watchBtnCback+0xea>
  for (i = 0; i < DM_CONN_MAX; i++)
    ee84:	2500      	movs	r5, #0
  return DM_CONN_ID_NONE;
    ee86:	462e      	mov	r6, r5
    if (pConnIdList[i] != DM_CONN_ID_NONE)
    ee88:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ee8c:	2800      	cmp	r0, #0
    ee8e:	d138      	bne.n	ef02 <watchBtnCback+0xa2>
    ee90:	f89d 0005 	ldrb.w	r0, [sp, #5]
    ee94:	2800      	cmp	r0, #0
    ee96:	d143      	bne.n	ef20 <watchBtnCback+0xc0>
    ee98:	f89d 0006 	ldrb.w	r0, [sp, #6]
    ee9c:	2800      	cmp	r0, #0
    ee9e:	d14d      	bne.n	ef3c <watchBtnCback+0xdc>
  for (i = 0; i < DM_CONN_MAX; i++)
    eea0:	2200      	movs	r2, #0
  APP_TRACE_INFO3("btn: %d - master conn id: %d - slave conn id: %d", btn, masterConnId, slaveConnId);
    eea2:	4848      	ldr	r0, [pc, #288]	; (efc4 <watchBtnCback+0x164>)
    eea4:	462b      	mov	r3, r5
    eea6:	4621      	mov	r1, r4
    eea8:	f00f fbf6 	bl	1e698 <WsfTrace>
    switch (btn)
    eeac:	2c02      	cmp	r4, #2
    eeae:	d00e      	beq.n	eece <watchBtnCback+0x6e>
    eeb0:	2c04      	cmp	r4, #4
    eeb2:	d022      	beq.n	eefa <watchBtnCback+0x9a>
  if (slaveConnId == DM_CONN_ID_NONE)
    eeb4:	2e00      	cmp	r6, #0
    eeb6:	d150      	bne.n	ef5a <watchBtnCback+0xfa>
    switch (btn)
    eeb8:	2c08      	cmp	r4, #8
    eeba:	d066      	beq.n	ef8a <watchBtnCback+0x12a>
    eebc:	2c09      	cmp	r4, #9
    eebe:	d07e      	beq.n	efbe <watchBtnCback+0x15e>
    eec0:	2c07      	cmp	r4, #7
    eec2:	d102      	bne.n	eeca <watchBtnCback+0x6a>
        AppAdvStart(APP_MODE_AUTO_INIT);
    eec4:	2002      	movs	r0, #2
    eec6:	f011 fc99 	bl	207fc <AppAdvStart>
}
    eeca:	b002      	add	sp, #8
    eecc:	bd70      	pop	{r4, r5, r6, pc}
        if(watchCb.scan_state!=WATCH_SCAN_NONE)
    eece:	4b3e      	ldr	r3, [pc, #248]	; (efc8 <watchBtnCback+0x168>)
    eed0:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    eed4:	2a00      	cmp	r2, #0
    eed6:	d14e      	bne.n	ef76 <watchBtnCback+0x116>
        else if (!watchCb.autoConnect)
    eed8:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
    eedc:	2a00      	cmp	r2, #0
    eede:	d1f4      	bne.n	eeca <watchBtnCback+0x6a>
          watchConnInfo.doConnect = FALSE;
    eee0:	483a      	ldr	r0, [pc, #232]	; (efcc <watchBtnCback+0x16c>)
          watchCb.scan_state = WATCH_SCAN_START;
    eee2:	f240 1101 	movw	r1, #257	; 0x101
    eee6:	f8a3 1056 	strh.w	r1, [r3, #86]	; 0x56
          watchConnInfo.doConnect = FALSE;
    eeea:	72c2      	strb	r2, [r0, #11]
          if (AppSlaveIsAdvertising())
    eeec:	f011 fbba 	bl	20664 <AppSlaveIsAdvertising>
    eef0:	2800      	cmp	r0, #0
    eef2:	d044      	beq.n	ef7e <watchBtnCback+0x11e>
              AppAdvStop();
    eef4:	f011 fcb2 	bl	2085c <AppAdvStop>
    eef8:	e7e7      	b.n	eeca <watchBtnCback+0x6a>
        AppClearAllBondingInfo();
    eefa:	f010 f899 	bl	1f030 <AppClearAllBondingInfo>
}
    eefe:	b002      	add	sp, #8
    ef00:	bd70      	pop	{r4, r5, r6, pc}
      if (DmConnRole(pConnIdList[i]) == role)
    ef02:	f7fe fac7 	bl	d494 <DmConnRole>
    ef06:	2800      	cmp	r0, #0
    ef08:	d1c2      	bne.n	ee90 <watchBtnCback+0x30>
    if (pConnIdList[i] != DM_CONN_ID_NONE)
    ef0a:	ab01      	add	r3, sp, #4
  APP_TRACE_INFO3("btn: %d - master conn id: %d - slave conn id: %d", btn, masterConnId, slaveConnId);
    ef0c:	781a      	ldrb	r2, [r3, #0]
        return pConnIdList[i];
    ef0e:	e7c8      	b.n	eea2 <watchBtnCback+0x42>
      if (DmConnRole(pConnIdList[i]) == role)
    ef10:	f7fe fac0 	bl	d494 <DmConnRole>
    ef14:	2801      	cmp	r0, #1
    ef16:	d1ad      	bne.n	ee74 <watchBtnCback+0x14>
    if (pConnIdList[i] != DM_CONN_ID_NONE)
    ef18:	ab01      	add	r3, sp, #4
        return pConnIdList[i];
    ef1a:	781e      	ldrb	r6, [r3, #0]
  APP_TRACE_INFO3("btn: %d - master conn id: %d - slave conn id: %d", btn, masterConnId, slaveConnId);
    ef1c:	4635      	mov	r5, r6
        return pConnIdList[i];
    ef1e:	e7b3      	b.n	ee88 <watchBtnCback+0x28>
      if (DmConnRole(pConnIdList[i]) == role)
    ef20:	f7fe fab8 	bl	d494 <DmConnRole>
    ef24:	2800      	cmp	r0, #0
    ef26:	d1b7      	bne.n	ee98 <watchBtnCback+0x38>
    if (pConnIdList[i] != DM_CONN_ID_NONE)
    ef28:	f10d 0305 	add.w	r3, sp, #5
    ef2c:	e7ee      	b.n	ef0c <watchBtnCback+0xac>
      if (DmConnRole(pConnIdList[i]) == role)
    ef2e:	f7fe fab1 	bl	d494 <DmConnRole>
    ef32:	2801      	cmp	r0, #1
    ef34:	d1a2      	bne.n	ee7c <watchBtnCback+0x1c>
    if (pConnIdList[i] != DM_CONN_ID_NONE)
    ef36:	f10d 0305 	add.w	r3, sp, #5
    ef3a:	e7ee      	b.n	ef1a <watchBtnCback+0xba>
      if (DmConnRole(pConnIdList[i]) == role)
    ef3c:	f7fe faaa 	bl	d494 <DmConnRole>
    if (pConnIdList[i] != DM_CONN_ID_NONE)
    ef40:	f10d 0306 	add.w	r3, sp, #6
      if (DmConnRole(pConnIdList[i]) == role)
    ef44:	2800      	cmp	r0, #0
    ef46:	d1ab      	bne.n	eea0 <watchBtnCback+0x40>
    ef48:	e7e0      	b.n	ef0c <watchBtnCback+0xac>
    ef4a:	f7fe faa3 	bl	d494 <DmConnRole>
    ef4e:	2801      	cmp	r0, #1
    if (pConnIdList[i] != DM_CONN_ID_NONE)
    ef50:	bf08      	it	eq
    ef52:	f10d 0306 	addeq.w	r3, sp, #6
      if (DmConnRole(pConnIdList[i]) == role)
    ef56:	d195      	bne.n	ee84 <watchBtnCback+0x24>
    ef58:	e7df      	b.n	ef1a <watchBtnCback+0xba>
    switch (btn)
    ef5a:	2c08      	cmp	r4, #8
    ef5c:	d01c      	beq.n	ef98 <watchBtnCback+0x138>
    ef5e:	2c09      	cmp	r4, #9
    ef60:	d029      	beq.n	efb6 <watchBtnCback+0x156>
    ef62:	2c07      	cmp	r4, #7
    ef64:	d1b1      	bne.n	eeca <watchBtnCback+0x6a>
        PaspcPassControl(slaveConnId, pWatchPassHdlList[PASPC_PASS_RCP_HDL_IDX], CH_RCP_MUTE_ONCE);
    ef66:	4b18      	ldr	r3, [pc, #96]	; (efc8 <watchBtnCback+0x168>)
    ef68:	2202      	movs	r2, #2
    ef6a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
    ef6e:	4630      	mov	r0, r6
    ef70:	f7ff fe0a 	bl	eb88 <PaspcPassControl>
        return;
    ef74:	e7a9      	b.n	eeca <watchBtnCback+0x6a>
          AppScanStop();
    ef76:	f010 fc21 	bl	1f7bc <AppScanStop>
}
    ef7a:	b002      	add	sp, #8
    ef7c:	bd70      	pop	{r4, r5, r6, pc}
              AppScanStart(watchMasterCfg.discMode, watchMasterCfg.scanType,
    ef7e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    ef82:	2101      	movs	r1, #1
    ef84:	f010 fbec 	bl	1f760 <AppScanStart>
    ef88:	e79f      	b.n	eeca <watchBtnCback+0x6a>
        AppSetBondable(TRUE);
    ef8a:	2001      	movs	r0, #1
    ef8c:	f011 fb54 	bl	20638 <AppSetBondable>
        AppAdvStart(APP_MODE_DISCOVERABLE);
    ef90:	2001      	movs	r0, #1
    ef92:	f011 fc33 	bl	207fc <AppAdvStart>
        return;
    ef96:	e798      	b.n	eeca <watchBtnCback+0x6a>
        PaspcPassControl(slaveConnId, pWatchPassHdlList[PASPC_PASS_RCP_HDL_IDX], ringer);
    ef98:	4c0d      	ldr	r4, [pc, #52]	; (efd0 <watchBtnCback+0x170>)
    ef9a:	4b0b      	ldr	r3, [pc, #44]	; (efc8 <watchBtnCback+0x168>)
    ef9c:	7822      	ldrb	r2, [r4, #0]
    ef9e:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
    efa2:	4630      	mov	r0, r6
    efa4:	f7ff fdf0 	bl	eb88 <PaspcPassControl>
        ringer = (ringer == CH_RCP_SILENT) ? CH_RCP_CANCEL_SILENT : CH_RCP_SILENT;
    efa8:	7823      	ldrb	r3, [r4, #0]
    efaa:	2b01      	cmp	r3, #1
    efac:	bf0c      	ite	eq
    efae:	2303      	moveq	r3, #3
    efb0:	2301      	movne	r3, #1
    efb2:	7023      	strb	r3, [r4, #0]
        return;
    efb4:	e789      	b.n	eeca <watchBtnCback+0x6a>
        AppConnClose(slaveConnId);
    efb6:	4630      	mov	r0, r6
    efb8:	f00f ffea 	bl	1ef90 <AppConnClose>
        break;
    efbc:	e785      	b.n	eeca <watchBtnCback+0x6a>
        AppSlaveClearAllBondingInfo();
    efbe:	f011 fb61 	bl	20684 <AppSlaveClearAllBondingInfo>
    efc2:	e77f      	b.n	eec4 <watchBtnCback+0x64>
    efc4:	0002607c 	.word	0x0002607c
    efc8:	10004068 	.word	0x10004068
    efcc:	100040c0 	.word	0x100040c0
    efd0:	10002b50 	.word	0x10002b50

0000efd4 <WatchHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WatchHandlerInit(wsfHandlerId_t handlerId)
{
    efd4:	b538      	push	{r3, r4, r5, lr}
    efd6:	4604      	mov	r4, r0
  APP_TRACE_INFO0("WatchHandlerInit");
    efd8:	4812      	ldr	r0, [pc, #72]	; (f024 <WatchHandlerInit+0x50>)
  watchCb.handlerId = handlerId;

  /* Set configuration pointers */
  pAppMasterCfg = (appMasterCfg_t *) &watchMasterCfg;
  pAppSlaveCfg = (appSlaveCfg_t *) &watchSlaveCfg;
  pAppAdvCfg = (appAdvCfg_t *) &watchAdvCfg;
    efda:	4d13      	ldr	r5, [pc, #76]	; (f028 <WatchHandlerInit+0x54>)
  APP_TRACE_INFO0("WatchHandlerInit");
    efdc:	f00f fb5c 	bl	1e698 <WsfTrace>
  pAppMasterCfg = (appMasterCfg_t *) &watchMasterCfg;
    efe0:	4a12      	ldr	r2, [pc, #72]	; (f02c <WatchHandlerInit+0x58>)
  watchCb.handlerId = handlerId;
    efe2:	4913      	ldr	r1, [pc, #76]	; (f030 <WatchHandlerInit+0x5c>)
  pAppSlaveCfg = (appSlaveCfg_t *) &watchSlaveCfg;
    efe4:	4b13      	ldr	r3, [pc, #76]	; (f034 <WatchHandlerInit+0x60>)
  pAppMasterCfg = (appMasterCfg_t *) &watchMasterCfg;
    efe6:	4814      	ldr	r0, [pc, #80]	; (f038 <WatchHandlerInit+0x64>)
    efe8:	6010      	str	r0, [r2, #0]
  pAppSlaveCfg = (appSlaveCfg_t *) &watchSlaveCfg;
    efea:	4a14      	ldr	r2, [pc, #80]	; (f03c <WatchHandlerInit+0x68>)
    efec:	601a      	str	r2, [r3, #0]
  watchCb.handlerId = handlerId;
    efee:	f881 4054 	strb.w	r4, [r1, #84]	; 0x54
  pAppSecCfg = (appSecCfg_t *) &watchSecCfg;
    eff2:	4b13      	ldr	r3, [pc, #76]	; (f040 <WatchHandlerInit+0x6c>)
  pAppAdvCfg = (appAdvCfg_t *) &watchAdvCfg;
    eff4:	4c13      	ldr	r4, [pc, #76]	; (f044 <WatchHandlerInit+0x70>)
    eff6:	602c      	str	r4, [r5, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &watchUpdateCfg;
    eff8:	4813      	ldr	r0, [pc, #76]	; (f048 <WatchHandlerInit+0x74>)
  pAppSecCfg = (appSecCfg_t *) &watchSecCfg;
    effa:	4c14      	ldr	r4, [pc, #80]	; (f04c <WatchHandlerInit+0x78>)
    effc:	601c      	str	r4, [r3, #0]
  pAppDiscCfg = (appDiscCfg_t *) &watchDiscCfg;
    effe:	4a14      	ldr	r2, [pc, #80]	; (f050 <WatchHandlerInit+0x7c>)
  pAppUpdateCfg = (appUpdateCfg_t *) &watchUpdateCfg;
    f000:	4c14      	ldr	r4, [pc, #80]	; (f054 <WatchHandlerInit+0x80>)
  pAppCfg = (appCfg_t *) &watchAppCfg;

  /* Set stack configuration pointers */
  pSmpCfg = (smpCfg_t *) &watchSmpCfg;
    f002:	4b15      	ldr	r3, [pc, #84]	; (f058 <WatchHandlerInit+0x84>)
  pAppCfg = (appCfg_t *) &watchAppCfg;
    f004:	4915      	ldr	r1, [pc, #84]	; (f05c <WatchHandlerInit+0x88>)
  pAppUpdateCfg = (appUpdateCfg_t *) &watchUpdateCfg;
    f006:	6004      	str	r4, [r0, #0]
  pAppDiscCfg = (appDiscCfg_t *) &watchDiscCfg;
    f008:	4c15      	ldr	r4, [pc, #84]	; (f060 <WatchHandlerInit+0x8c>)
  pAppCfg = (appCfg_t *) &watchAppCfg;
    f00a:	4816      	ldr	r0, [pc, #88]	; (f064 <WatchHandlerInit+0x90>)
  pAppDiscCfg = (appDiscCfg_t *) &watchDiscCfg;
    f00c:	6014      	str	r4, [r2, #0]
  pSmpCfg = (smpCfg_t *) &watchSmpCfg;
    f00e:	4a16      	ldr	r2, [pc, #88]	; (f068 <WatchHandlerInit+0x94>)
    f010:	601a      	str	r2, [r3, #0]
  pAppCfg = (appCfg_t *) &watchAppCfg;
    f012:	6008      	str	r0, [r1, #0]

  /* Initialize application framework */
  AppMasterInit();
    f014:	f010 f896 	bl	1f144 <AppMasterInit>
  AppSlaveInit();
    f018:	f010 fe1c 	bl	1fc54 <AppSlaveInit>
  AppDiscInit();
}
    f01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AppDiscInit();
    f020:	f00f bde6 	b.w	1ebf0 <AppDiscInit>
    f024:	000260b0 	.word	0x000260b0
    f028:	10005ee0 	.word	0x10005ee0
    f02c:	10005eec 	.word	0x10005eec
    f030:	10004068 	.word	0x10004068
    f034:	10005ef4 	.word	0x10005ef4
    f038:	000262c0 	.word	0x000262c0
    f03c:	000262d8 	.word	0x000262d8
    f040:	10005ef0 	.word	0x10005ef0
    f044:	00026144 	.word	0x00026144
    f048:	10005ef8 	.word	0x10005ef8
    f04c:	000262d0 	.word	0x000262d0
    f050:	10005ee8 	.word	0x10005ee8
    f054:	000262f4 	.word	0x000262f4
    f058:	10002c30 	.word	0x10002c30
    f05c:	10005ee4 	.word	0x10005ee4
    f060:	00026198 	.word	0x00026198
    f064:	00026174 	.word	0x00026174
    f068:	000262dc 	.word	0x000262dc

0000f06c <WatchHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void WatchHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  if (pMsg != NULL)
    f06c:	2900      	cmp	r1, #0
    f06e:	f000 80bb 	beq.w	f1e8 <WatchHandler+0x17c>
{
    f072:	b5f0      	push	{r4, r5, r6, r7, lr}
    f074:	460c      	mov	r4, r1
  {
    APP_TRACE_INFO1("Watch got evt %d", pMsg->event);
    f076:	48ae      	ldr	r0, [pc, #696]	; (f330 <WatchHandler+0x2c4>)
    f078:	7889      	ldrb	r1, [r1, #2]
{
    f07a:	b08f      	sub	sp, #60	; 0x3c
    APP_TRACE_INFO1("Watch got evt %d", pMsg->event);
    f07c:	f00f fb0c 	bl	1e698 <WsfTrace>

    /* process ATT messages */
    if (pMsg->event <= ATT_CBACK_END)
    f080:	78a3      	ldrb	r3, [r4, #2]
    f082:	2b12      	cmp	r3, #18
    f084:	f240 80b1 	bls.w	f1ea <WatchHandler+0x17e>

      /* process server-related ATT messages */
      AppServerProcAttMsg(pMsg);
    }
    /* process DM messages */
    else if (pMsg->event <= DM_CBACK_END)
    f088:	2b68      	cmp	r3, #104	; 0x68
    f08a:	d817      	bhi.n	f0bc <WatchHandler+0x50>
    {
      if (pMsg->param == DM_CONN_ID_NONE || DmConnRole((dmConnId_t) pMsg->param) == DM_ROLE_MASTER)
    f08c:	8820      	ldrh	r0, [r4, #0]
    f08e:	2800      	cmp	r0, #0
    f090:	f000 80b3 	beq.w	f1fa <WatchHandler+0x18e>
    f094:	b2c0      	uxtb	r0, r0
    f096:	f7fe f9fd 	bl	d494 <DmConnRole>
    f09a:	2800      	cmp	r0, #0
    f09c:	f000 80ad 	beq.w	f1fa <WatchHandler+0x18e>

        /* process security-related messages */
        AppMasterSecProcDmMsg((dmEvt_t *) pMsg);
      }

      if (pMsg->param == DM_CONN_ID_NONE || DmConnRole((dmConnId_t) pMsg->param) == DM_ROLE_SLAVE)
    f0a0:	8820      	ldrh	r0, [r4, #0]
    f0a2:	2800      	cmp	r0, #0
    f0a4:	f000 80b0 	beq.w	f208 <WatchHandler+0x19c>
    f0a8:	b2c0      	uxtb	r0, r0
    f0aa:	f7fe f9f3 	bl	d494 <DmConnRole>
    f0ae:	2801      	cmp	r0, #1
    f0b0:	f000 80aa 	beq.w	f208 <WatchHandler+0x19c>
        /* process security-related messages */
        AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
      }

      /* process discovery-related messages */
      AppDiscProcDmMsg((dmEvt_t *) pMsg);
    f0b4:	4620      	mov	r0, r4
    f0b6:	f00f fbc9 	bl	1e84c <AppDiscProcDmMsg>
  switch(pMsg->hdr.event)
    f0ba:	78a3      	ldrb	r3, [r4, #2]
    f0bc:	3b05      	subs	r3, #5
    f0be:	2b37      	cmp	r3, #55	; 0x37
    f0c0:	f200 8090 	bhi.w	f1e4 <WatchHandler+0x178>
    f0c4:	e8df f013 	tbh	[pc, r3, lsl #1]
    f0c8:	008e00a7 	.word	0x008e00a7
    f0cc:	008e008e 	.word	0x008e008e
    f0d0:	008e008e 	.word	0x008e008e
    f0d4:	008e008e 	.word	0x008e008e
    f0d8:	00a700a7 	.word	0x00a700a7
    f0dc:	008e008e 	.word	0x008e008e
    f0e0:	0148008e 	.word	0x0148008e
    f0e4:	008e008e 	.word	0x008e008e
    f0e8:	008e008e 	.word	0x008e008e
    f0ec:	008e008e 	.word	0x008e008e
    f0f0:	008e008e 	.word	0x008e008e
    f0f4:	008e008e 	.word	0x008e008e
    f0f8:	008e008e 	.word	0x008e008e
    f0fc:	0115008e 	.word	0x0115008e
    f100:	00ed014b 	.word	0x00ed014b
    f104:	00f7008e 	.word	0x00f7008e
    f108:	00380103 	.word	0x00380103
    f10c:	00d000c3 	.word	0x00d000c3
    f110:	00da008e 	.word	0x00da008e
    f114:	00de00d6 	.word	0x00de00d6
    f118:	00e0014d 	.word	0x00e0014d
    f11c:	008e008e 	.word	0x008e008e
    f120:	008e008e 	.word	0x008e008e
    f124:	008e008e 	.word	0x008e008e
    f128:	008e008e 	.word	0x008e008e
    f12c:	008e008e 	.word	0x008e008e
    f130:	008e008e 	.word	0x008e008e
    f134:	00e6008e 	.word	0x00e6008e
  if((watchCb.scan_state == WATCH_SCAN_NONE) || !watchCb.autoConnect)
    f138:	4a7e      	ldr	r2, [pc, #504]	; (f334 <WatchHandler+0x2c8>)
    f13a:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
  uint8_t  device_name[32] = {0};
    f13e:	2300      	movs	r3, #0
    f140:	e9cd 3306 	strd	r3, r3, [sp, #24]
    f144:	e9cd 3308 	strd	r3, r3, [sp, #32]
    f148:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    f14c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if((watchCb.scan_state == WATCH_SCAN_NONE) || !watchCb.autoConnect)
    f150:	2900      	cmp	r1, #0
    f152:	d047      	beq.n	f1e4 <WatchHandler+0x178>
    f154:	f892 3057 	ldrb.w	r3, [r2, #87]	; 0x57
    f158:	2b00      	cmp	r3, #0
    f15a:	d043      	beq.n	f1e4 <WatchHandler+0x178>
  if ((pData = DmFindAdType(DM_ADV_TYPE_LOCAL_NAME, pMsg->scanReport.len,
    f15c:	6862      	ldr	r2, [r4, #4]
    f15e:	7a21      	ldrb	r1, [r4, #8]
    f160:	2009      	movs	r0, #9
    f162:	f7fe fbc1 	bl	d8e8 <DmFindAdType>
    f166:	2800      	cmp	r0, #0
    f168:	f000 8162 	beq.w	f430 <WatchHandler+0x3c4>
    name_length = *pData;
    f16c:	4601      	mov	r1, r0
    memcpy(device_name, pData + 2, name_length);
    f16e:	ab06      	add	r3, sp, #24
    name_length = *pData;
    f170:	f811 2b02 	ldrb.w	r2, [r1], #2
    memcpy(device_name, pData + 2, name_length);
    f174:	4618      	mov	r0, r3
    f176:	3a01      	subs	r2, #1
    f178:	f7fc ffc2 	bl	c100 <memcpy>
    f17c:	4603      	mov	r3, r0
  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
    f17e:	f994 0009 	ldrsb.w	r0, [r4, #9]
    f182:	7b21      	ldrb	r1, [r4, #12]
    f184:	7b62      	ldrb	r2, [r4, #13]
    f186:	e9cd 0303 	strd	r0, r3, [sp, #12]
    f18a:	7ba0      	ldrb	r0, [r4, #14]
    f18c:	7be3      	ldrb	r3, [r4, #15]
    f18e:	e9cd 2101 	strd	r2, r1, [sp, #4]
  if ((dbHdl = AppDbFindByAddr(pMsg->scanReport.addrType, pMsg->scanReport.addr)) != APP_DB_HDL_NONE)
    f192:	f104 070c 	add.w	r7, r4, #12
  WsfTrace("Found: 0x%02x:%02x:%02x:%02x:%02x:%02x rssi: %d %s",
    f196:	7c22      	ldrb	r2, [r4, #16]
    f198:	7c61      	ldrb	r1, [r4, #17]
    f19a:	9000      	str	r0, [sp, #0]
    f19c:	4866      	ldr	r0, [pc, #408]	; (f338 <WatchHandler+0x2cc>)
    f19e:	f00f fa7b 	bl	1e698 <WsfTrace>
  if ((dbHdl = AppDbFindByAddr(pMsg->scanReport.addrType, pMsg->scanReport.addr)) != APP_DB_HDL_NONE)
    f1a2:	7ae0      	ldrb	r0, [r4, #11]
    f1a4:	4639      	mov	r1, r7
    f1a6:	f00e f949 	bl	1d43c <AppDbFindByAddr>
    f1aa:	4605      	mov	r5, r0
    f1ac:	2800      	cmp	r0, #0
    f1ae:	f000 8117 	beq.w	f3e0 <WatchHandler+0x374>
    if (DM_RAND_ADDR_RPA(pMsg->scanReport.directAddr, pMsg->scanReport.directAddrType))
    f1b2:	7ca2      	ldrb	r2, [r4, #18]
    f1b4:	2a01      	cmp	r2, #1
    f1b6:	f000 8145 	beq.w	f444 <WatchHandler+0x3d8>
    if (pMsg->scanReport.rssi > watchConnInfo.rssi)
    f1ba:	4e60      	ldr	r6, [pc, #384]	; (f33c <WatchHandler+0x2d0>)
    f1bc:	f994 3009 	ldrsb.w	r3, [r4, #9]
    f1c0:	f996 200c 	ldrsb.w	r2, [r6, #12]
    f1c4:	429a      	cmp	r2, r3
    f1c6:	da0d      	bge.n	f1e4 <WatchHandler+0x178>
      watchConnInfo.rssi = pMsg->scanReport.rssi;
    f1c8:	7333      	strb	r3, [r6, #12]
      watchConnInfo.addrType = DmHostAddrType(pMsg->scanReport.addrType);
    f1ca:	7ae0      	ldrb	r0, [r4, #11]
    f1cc:	f7fe fbe0 	bl	d990 <DmHostAddrType>
      memcpy(watchConnInfo.addr, pMsg->scanReport.addr, sizeof(bdAddr_t));
    f1d0:	68e1      	ldr	r1, [r4, #12]
    f1d2:	88ba      	ldrh	r2, [r7, #4]
      watchConnInfo.addrType = DmHostAddrType(pMsg->scanReport.addrType);
    f1d4:	7130      	strb	r0, [r6, #4]
      watchConnInfo.doConnect = TRUE;
    f1d6:	2301      	movs	r3, #1
      memcpy(watchConnInfo.addr, pMsg->scanReport.addr, sizeof(bdAddr_t));
    f1d8:	f8c6 1005 	str.w	r1, [r6, #5]
    f1dc:	f8a6 2009 	strh.w	r2, [r6, #9]
      watchConnInfo.dbHdl = dbHdl;
    f1e0:	6035      	str	r5, [r6, #0]
      watchConnInfo.doConnect = TRUE;
    f1e2:	72f3      	strb	r3, [r6, #11]
    }

    /* perform profile and user interface-related operations */
    watchProcMsg((dmEvt_t *) pMsg);
  }
}
    f1e4:	b00f      	add	sp, #60	; 0x3c
    f1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1e8:	4770      	bx	lr
      AppDiscProcAttMsg((attEvt_t *) pMsg);
    f1ea:	4620      	mov	r0, r4
    f1ec:	f00f fc0c 	bl	1ea08 <AppDiscProcAttMsg>
      AppServerProcAttMsg(pMsg);
    f1f0:	4620      	mov	r0, r4
    f1f2:	f010 fbb9 	bl	1f968 <AppServerProcAttMsg>
  switch(pMsg->hdr.event)
    f1f6:	78a3      	ldrb	r3, [r4, #2]
    f1f8:	e760      	b.n	f0bc <WatchHandler+0x50>
        AppMasterProcDmMsg((dmEvt_t *) pMsg);
    f1fa:	4620      	mov	r0, r4
    f1fc:	f00f ffb2 	bl	1f164 <AppMasterProcDmMsg>
        AppMasterSecProcDmMsg((dmEvt_t *) pMsg);
    f200:	4620      	mov	r0, r4
    f202:	f010 f8ef 	bl	1f3e4 <AppMasterSecProcDmMsg>
    f206:	e74b      	b.n	f0a0 <WatchHandler+0x34>
        AppSlaveProcDmMsg((dmEvt_t *) pMsg);
    f208:	4620      	mov	r0, r4
    f20a:	f010 fd45 	bl	1fc98 <AppSlaveProcDmMsg>
        AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
    f20e:	4620      	mov	r0, r4
    f210:	f011 f8c4 	bl	2039c <AppSlaveSecProcDmMsg>
    f214:	e74e      	b.n	f0b4 <WatchHandler+0x48>
      if (DmConnRole((dmConnId_t) pMsg->hdr.param) == DM_ROLE_MASTER)
    f216:	7820      	ldrb	r0, [r4, #0]
    f218:	f7fe f93c 	bl	d494 <DmConnRole>
  if (pMsg->hdr.status == ATT_SUCCESS)
    f21c:	78e3      	ldrb	r3, [r4, #3]
      if (DmConnRole((dmConnId_t) pMsg->hdr.param) == DM_ROLE_MASTER)
    f21e:	2800      	cmp	r0, #0
    f220:	f040 80a5 	bne.w	f36e <WatchHandler+0x302>
  if (pMsg->hdr.status == ATT_SUCCESS)
    f224:	2b00      	cmp	r3, #0
    f226:	d1dd      	bne.n	f1e4 <WatchHandler+0x178>
    if (HrpcHrsValueUpdate(pWatchHrsHdlList, pMsg) == ATT_SUCCESS)
    f228:	4845      	ldr	r0, [pc, #276]	; (f340 <WatchHandler+0x2d4>)
    f22a:	4621      	mov	r1, r4
    f22c:	f009 fe76 	bl	18f1c <HrpcHrsValueUpdate>
    f230:	2800      	cmp	r0, #0
    f232:	d0d7      	beq.n	f1e4 <WatchHandler+0x178>
    if (DisValueUpdate(pWatchDisHdlList, pMsg) == ATT_SUCCESS)
    f234:	4843      	ldr	r0, [pc, #268]	; (f344 <WatchHandler+0x2d8>)
    f236:	4621      	mov	r1, r4
    f238:	f009 fd4c 	bl	18cd4 <DisValueUpdate>
    f23c:	2800      	cmp	r0, #0
    f23e:	d0d1      	beq.n	f1e4 <WatchHandler+0x178>
    if (GattValueUpdate(pWatchMstGattHdlList, pMsg) == ATT_SUCCESS)
    f240:	483c      	ldr	r0, [pc, #240]	; (f334 <WatchHandler+0x2c8>)
    if (GattValueUpdate(pWatchSlvGattHdlList, pMsg) == ATT_SUCCESS)
    f242:	4621      	mov	r1, r4
}
    f244:	b00f      	add	sp, #60	; 0x3c
    f246:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if (GattValueUpdate(pWatchSlvGattHdlList, pMsg) == ATT_SUCCESS)
    f24a:	f006 baf9 	b.w	15840 <GattValueUpdate>
  if (pMsg->connOpen.role == DM_ROLE_SLAVE)
    f24e:	7a23      	ldrb	r3, [r4, #8]
    f250:	2b01      	cmp	r3, #1
    f252:	f000 80a6 	beq.w	f3a2 <WatchHandler+0x336>
    AppAdvStart(APP_MODE_AUTO_INIT);
    f256:	2002      	movs	r0, #2
    f258:	f011 fad0 	bl	207fc <AppAdvStart>
      uiEvent = APP_UI_CONN_OPEN;
    f25c:	2008      	movs	r0, #8
}
    f25e:	b00f      	add	sp, #60	; 0x3c
    f260:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AppUiAction(uiEvent);
    f264:	f00e ba80 	b.w	1d768 <AppUiAction>
      if (pMsg->connOpen.role == DM_ROLE_SLAVE)
    f268:	7a23      	ldrb	r3, [r4, #8]
    f26a:	2b01      	cmp	r3, #1
    f26c:	f000 80ab 	beq.w	f3c6 <WatchHandler+0x35a>
      uiEvent = APP_UI_CONN_CLOSE;
    f270:	2009      	movs	r0, #9
    f272:	e7f4      	b.n	f25e <WatchHandler+0x1f2>
      DmSecGenerateEccKeyReq();
    f274:	f7ff fb62 	bl	e93c <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_SEC_PAIR_FAIL;
    f278:	200b      	movs	r0, #11
    f27a:	e7f0      	b.n	f25e <WatchHandler+0x1f2>
      DmSecGenerateEccKeyReq();
    f27c:	f7ff fb5e 	bl	e93c <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_SEC_PAIR_CMPL;
    f280:	200a      	movs	r0, #10
    f282:	e7ec      	b.n	f25e <WatchHandler+0x1f2>
      uiEvent = APP_UI_SEC_ENCRYPT;
    f284:	200c      	movs	r0, #12
    f286:	e7ea      	b.n	f25e <WatchHandler+0x1f2>
      AppHandlePasskey(&pMsg->authReq);
    f288:	4620      	mov	r0, r4
}
    f28a:	b00f      	add	sp, #60	; 0x3c
    f28c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      AppHandlePasskey(&pMsg->authReq);
    f290:	f00f be52 	b.w	1ef38 <AppHandlePasskey>
      APP_TRACE_INFO1("Clear resolving list status 0x%02x", pMsg->hdr.status);
    f294:	78e1      	ldrb	r1, [r4, #3]
    f296:	482c      	ldr	r0, [pc, #176]	; (f348 <WatchHandler+0x2dc>)
}
    f298:	b00f      	add	sp, #60	; 0x3c
    f29a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      APP_TRACE_INFO1("Clear resolving list status 0x%02x", pMsg->hdr.status);
    f29e:	f00f b9fb 	b.w	1e698 <WsfTrace>
      if(watchCb.scan_state == WATCH_SCAN_START)
    f2a2:	4b24      	ldr	r3, [pc, #144]	; (f334 <WatchHandler+0x2c8>)
    f2a4:	f893 1056 	ldrb.w	r1, [r3, #86]	; 0x56
    f2a8:	2901      	cmp	r1, #1
    f2aa:	d07f      	beq.n	f3ac <WatchHandler+0x340>
          AppAdvStart(APP_MODE_AUTO_INIT);
    f2ac:	2002      	movs	r0, #2
    f2ae:	f011 faa5 	bl	207fc <AppAdvStart>
          uiEvent = APP_UI_ADV_STOP;
    f2b2:	2004      	movs	r0, #4
    f2b4:	e7d3      	b.n	f25e <WatchHandler+0x1f2>
  if (pMsg->hdr.status == HCI_SUCCESS)
    f2b6:	78e3      	ldrb	r3, [r4, #3]
    f2b8:	2b00      	cmp	r3, #0
    f2ba:	d154      	bne.n	f366 <WatchHandler+0x2fa>
    watchCb.scan_state = WATCH_SCANNING;
    f2bc:	491d      	ldr	r1, [pc, #116]	; (f334 <WatchHandler+0x2c8>)
    watchConnInfo.rssi = -128;
    f2be:	4b1f      	ldr	r3, [pc, #124]	; (f33c <WatchHandler+0x2d0>)
    watchCb.scan_state = WATCH_SCANNING;
    f2c0:	2002      	movs	r0, #2
    watchConnInfo.rssi = -128;
    f2c2:	2280      	movs	r2, #128	; 0x80
    watchCb.scan_state = WATCH_SCANNING;
    f2c4:	f881 0056 	strb.w	r0, [r1, #86]	; 0x56
    watchConnInfo.rssi = -128;
    f2c8:	731a      	strb	r2, [r3, #12]
      uiEvent = APP_UI_SCAN_START;
    f2ca:	2005      	movs	r0, #5
    f2cc:	e7c7      	b.n	f25e <WatchHandler+0x1f2>
  if (pMsg->hdr.status == HCI_SUCCESS)
    f2ce:	78e4      	ldrb	r4, [r4, #3]
    f2d0:	2c00      	cmp	r4, #0
    f2d2:	d14a      	bne.n	f36a <WatchHandler+0x2fe>
    if (watchConnInfo.doConnect)
    f2d4:	4d19      	ldr	r5, [pc, #100]	; (f33c <WatchHandler+0x2d0>)
    watchCb.scan_state = WATCH_SCAN_NONE;
    f2d6:	4a17      	ldr	r2, [pc, #92]	; (f334 <WatchHandler+0x2c8>)
    if (watchConnInfo.doConnect)
    f2d8:	7aeb      	ldrb	r3, [r5, #11]
    watchCb.scan_state = WATCH_SCAN_NONE;
    f2da:	f8a2 4056 	strh.w	r4, [r2, #86]	; 0x56
    if (watchConnInfo.doConnect)
    f2de:	2b00      	cmp	r3, #0
    f2e0:	d06c      	beq.n	f3bc <WatchHandler+0x350>
      AppConnOpen(watchConnInfo.addrType, watchConnInfo.addr, watchConnInfo.dbHdl);
    f2e2:	682a      	ldr	r2, [r5, #0]
    f2e4:	7928      	ldrb	r0, [r5, #4]
    f2e6:	1d69      	adds	r1, r5, #5
    f2e8:	f010 fa82 	bl	1f7f0 <AppConnOpen>
      watchConnInfo.doConnect = FALSE;
    f2ec:	72ec      	strb	r4, [r5, #11]
      uiEvent = APP_UI_SCAN_STOP;
    f2ee:	2006      	movs	r0, #6
    f2f0:	e7b5      	b.n	f25e <WatchHandler+0x1f2>
      AttsCalculateDbHash();
    f2f2:	f004 ff13 	bl	1411c <AttsCalculateDbHash>
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(watchAdvDataDisc), (uint8_t *) watchAdvDataDisc);
    f2f6:	4a15      	ldr	r2, [pc, #84]	; (f34c <WatchHandler+0x2e0>)
    f2f8:	2112      	movs	r1, #18
    f2fa:	2002      	movs	r0, #2
    f2fc:	f011 fa54 	bl	207a8 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(watchScanDataDisc), (uint8_t *) watchScanDataDisc);
    f300:	4a13      	ldr	r2, [pc, #76]	; (f350 <WatchHandler+0x2e4>)
    f302:	2107      	movs	r1, #7
    f304:	2003      	movs	r0, #3
    f306:	f011 fa4f 	bl	207a8 <AppAdvSetData>
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, 0, NULL);
    f30a:	2200      	movs	r2, #0
    f30c:	4611      	mov	r1, r2
    f30e:	4610      	mov	r0, r2
    f310:	f011 fa4a 	bl	207a8 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, 0, NULL);
    f314:	2200      	movs	r2, #0
    f316:	4611      	mov	r1, r2
    f318:	2001      	movs	r0, #1
    f31a:	f011 fa45 	bl	207a8 <AppAdvSetData>
  AppAdvStart(APP_MODE_AUTO_INIT);
    f31e:	2002      	movs	r0, #2
    f320:	f011 fa6c 	bl	207fc <AppAdvStart>
  DmConnSetConnSpec((hciConnSpec_t *) &watchConnCfg);
    f324:	480b      	ldr	r0, [pc, #44]	; (f354 <WatchHandler+0x2e8>)
    f326:	f7fd ff9d 	bl	d264 <DmConnSetConnSpec>
      uiEvent = APP_UI_RESET_CMPL;
    f32a:	2001      	movs	r0, #1
}
    f32c:	e797      	b.n	f25e <WatchHandler+0x1f2>
    f32e:	bf00      	nop
    f330:	000260c4 	.word	0x000260c4
    f334:	10004068 	.word	0x10004068
    f338:	000260ec 	.word	0x000260ec
    f33c:	100040c0 	.word	0x100040c0
    f340:	1000407c 	.word	0x1000407c
    f344:	1000406e 	.word	0x1000406e
    f348:	00026120 	.word	0x00026120
    f34c:	00026150 	.word	0x00026150
    f350:	000262c8 	.word	0x000262c8
    f354:	00026188 	.word	0x00026188
      APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
    f358:	89e1      	ldrh	r1, [r4, #14]
    f35a:	4848      	ldr	r0, [pc, #288]	; (f47c <WatchHandler+0x410>)
    f35c:	e79c      	b.n	f298 <WatchHandler+0x22c>
      uiEvent = APP_UI_ADV_START;
    f35e:	2003      	movs	r0, #3
    f360:	e77d      	b.n	f25e <WatchHandler+0x1f2>
  switch(pMsg->hdr.event)
    f362:	200d      	movs	r0, #13
    f364:	e77b      	b.n	f25e <WatchHandler+0x1f2>
      uiEvent = APP_UI_SCAN_START;
    f366:	2005      	movs	r0, #5
    f368:	e779      	b.n	f25e <WatchHandler+0x1f2>
      uiEvent = APP_UI_SCAN_STOP;
    f36a:	2006      	movs	r0, #6
    f36c:	e777      	b.n	f25e <WatchHandler+0x1f2>
  if (pMsg->hdr.status == ATT_SUCCESS)
    f36e:	2b00      	cmp	r3, #0
    f370:	f47f af38 	bne.w	f1e4 <WatchHandler+0x178>
    if (AnpcAnsValueUpdate(pWatchAnsHdlList, pMsg) == ATT_SUCCESS)
    f374:	4842      	ldr	r0, [pc, #264]	; (f480 <WatchHandler+0x414>)
    f376:	4621      	mov	r1, r4
    f378:	f002 fdc2 	bl	11f00 <AnpcAnsValueUpdate>
    f37c:	2800      	cmp	r0, #0
    f37e:	f43f af31 	beq.w	f1e4 <WatchHandler+0x178>
    if (PaspcPassValueUpdate(pWatchPassHdlList, pMsg) == ATT_SUCCESS)
    f382:	4840      	ldr	r0, [pc, #256]	; (f484 <WatchHandler+0x418>)
    f384:	4621      	mov	r1, r4
    f386:	f7ff fc0d 	bl	eba4 <PaspcPassValueUpdate>
    f38a:	2800      	cmp	r0, #0
    f38c:	f43f af2a 	beq.w	f1e4 <WatchHandler+0x178>
    if (TipcCtsValueUpdate(pWatchCtsHdlList, pMsg) == ATT_SUCCESS)
    f390:	483d      	ldr	r0, [pc, #244]	; (f488 <WatchHandler+0x41c>)
    f392:	4621      	mov	r1, r4
    f394:	f000 f8be 	bl	f514 <TipcCtsValueUpdate>
    f398:	2800      	cmp	r0, #0
    f39a:	f43f af23 	beq.w	f1e4 <WatchHandler+0x178>
    if (GattValueUpdate(pWatchSlvGattHdlList, pMsg) == ATT_SUCCESS)
    f39e:	483b      	ldr	r0, [pc, #236]	; (f48c <WatchHandler+0x420>)
    f3a0:	e74f      	b.n	f242 <WatchHandler+0x1d6>
    if (AppDbCheckBonded() == FALSE)
    f3a2:	f00e f825 	bl	1d3f0 <AppDbCheckBonded>
    f3a6:	b198      	cbz	r0, f3d0 <WatchHandler+0x364>
      uiEvent = APP_UI_CONN_OPEN;
    f3a8:	2008      	movs	r0, #8
    f3aa:	e758      	b.n	f25e <WatchHandler+0x1f2>
          AppScanStart(watchMasterCfg.discMode, watchMasterCfg.scanType,
    f3ac:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    f3b0:	2000      	movs	r0, #0
}
    f3b2:	b00f      	add	sp, #60	; 0x3c
    f3b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          AppScanStart(watchMasterCfg.discMode, watchMasterCfg.scanType,
    f3b8:	f010 b9d2 	b.w	1f760 <AppScanStart>
        AppAdvStart(APP_MODE_AUTO_INIT);
    f3bc:	2002      	movs	r0, #2
    f3be:	f011 fa1d 	bl	207fc <AppAdvStart>
      uiEvent = APP_UI_SCAN_STOP;
    f3c2:	2006      	movs	r0, #6
    f3c4:	e74b      	b.n	f25e <WatchHandler+0x1f2>
        AppAdvStart(APP_MODE_AUTO_INIT);
    f3c6:	2002      	movs	r0, #2
    f3c8:	f011 fa18 	bl	207fc <AppAdvStart>
      uiEvent = APP_UI_CONN_CLOSE;
    f3cc:	2009      	movs	r0, #9
    f3ce:	e746      	b.n	f25e <WatchHandler+0x1f2>
      DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
    f3d0:	4b2f      	ldr	r3, [pc, #188]	; (f490 <WatchHandler+0x424>)
    f3d2:	7820      	ldrb	r0, [r4, #0]
    f3d4:	681b      	ldr	r3, [r3, #0]
    f3d6:	7819      	ldrb	r1, [r3, #0]
    f3d8:	f7ff fb40 	bl	ea5c <DmSecSlaveReq>
      uiEvent = APP_UI_CONN_OPEN;
    f3dc:	2008      	movs	r0, #8
    f3de:	e73e      	b.n	f25e <WatchHandler+0x1f2>
  else if (DM_RAND_ADDR_RPA(pMsg->scanReport.addr, pMsg->scanReport.addrType))
    f3e0:	7ae3      	ldrb	r3, [r4, #11]
    f3e2:	2b01      	cmp	r3, #1
    f3e4:	d104      	bne.n	f3f0 <WatchHandler+0x384>
    f3e6:	7c63      	ldrb	r3, [r4, #17]
    f3e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f3ec:	2b40      	cmp	r3, #64	; 0x40
    f3ee:	d03e      	beq.n	f46e <WatchHandler+0x402>
    if ((pData = DmFindAdType(DM_ADV_TYPE_16_UUID, pMsg->scanReport.len,
    f3f0:	6862      	ldr	r2, [r4, #4]
    f3f2:	7a21      	ldrb	r1, [r4, #8]
    f3f4:	2003      	movs	r0, #3
    f3f6:	f7fe fa77 	bl	d8e8 <DmFindAdType>
    f3fa:	4603      	mov	r3, r0
    f3fc:	b368      	cbz	r0, f45a <WatchHandler+0x3ee>
    if (pData != NULL && pData[DM_AD_LEN_IDX] >= (ATT_16_UUID_LEN + 1))
    f3fe:	781a      	ldrb	r2, [r3, #0]
    f400:	2a02      	cmp	r2, #2
    f402:	f67f aeef 	bls.w	f1e4 <WatchHandler+0x178>
      while ((!connect) && (len >= ATT_16_UUID_LEN))
    f406:	3a03      	subs	r2, #3
    f408:	1d99      	adds	r1, r3, #6
    f40a:	f3c2 0246 	ubfx	r2, r2, #1, #7
    f40e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    f412:	3304      	adds	r3, #4
    f414:	e003      	b.n	f41e <WatchHandler+0x3b2>
    f416:	3302      	adds	r3, #2
    f418:	428b      	cmp	r3, r1
    f41a:	f43f aee3 	beq.w	f1e4 <WatchHandler+0x178>
        if (BYTES_UINT16_CMP(pData, ATT_UUID_HEART_RATE_SERVICE))
    f41e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    f422:	2a18      	cmp	r2, #24
    f424:	d1f7      	bne.n	f416 <WatchHandler+0x3aa>
    f426:	f813 2c02 	ldrb.w	r2, [r3, #-2]
    f42a:	2a0d      	cmp	r2, #13
    f42c:	d1f3      	bne.n	f416 <WatchHandler+0x3aa>
    f42e:	e6c4      	b.n	f1ba <WatchHandler+0x14e>
  else if ((pData = DmFindAdType(DM_ADV_TYPE_SHORT_NAME, pMsg->scanReport.len,
    f430:	6862      	ldr	r2, [r4, #4]
    f432:	7a21      	ldrb	r1, [r4, #8]
    f434:	2008      	movs	r0, #8
    f436:	f7fe fa57 	bl	d8e8 <DmFindAdType>
    f43a:	2800      	cmp	r0, #0
    f43c:	f47f ae96 	bne.w	f16c <WatchHandler+0x100>
    f440:	ab06      	add	r3, sp, #24
    f442:	e69c      	b.n	f17e <WatchHandler+0x112>
    if (DM_RAND_ADDR_RPA(pMsg->scanReport.directAddr, pMsg->scanReport.directAddrType))
    f444:	7e23      	ldrb	r3, [r4, #24]
    f446:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f44a:	2b40      	cmp	r3, #64	; 0x40
    f44c:	f47f aeb5 	bne.w	f1ba <WatchHandler+0x14e>
      AppMasterResolveAddr(pMsg, dbHdl, APP_RESOLVE_DIRECT_RPA);
    f450:	4601      	mov	r1, r0
    f452:	4620      	mov	r0, r4
    f454:	f010 f8c6 	bl	1f5e4 <AppMasterResolveAddr>
  if (connect)
    f458:	e6c4      	b.n	f1e4 <WatchHandler+0x178>
      pData = DmFindAdType(DM_ADV_TYPE_16_UUID_PART, pMsg->scanReport.len,
    f45a:	6862      	ldr	r2, [r4, #4]
    f45c:	7a21      	ldrb	r1, [r4, #8]
    f45e:	2002      	movs	r0, #2
    f460:	f7fe fa42 	bl	d8e8 <DmFindAdType>
    if (pData != NULL && pData[DM_AD_LEN_IDX] >= (ATT_16_UUID_LEN + 1))
    f464:	4603      	mov	r3, r0
    f466:	2800      	cmp	r0, #0
    f468:	f43f aebc 	beq.w	f1e4 <WatchHandler+0x178>
    f46c:	e7c7      	b.n	f3fe <WatchHandler+0x392>
    AppMasterResolveAddr(pMsg, APP_DB_HDL_NONE, APP_RESOLVE_ADV_RPA);
    f46e:	4602      	mov	r2, r0
    f470:	4601      	mov	r1, r0
    f472:	4620      	mov	r0, r4
    f474:	f010 f8b6 	bl	1f5e4 <AppMasterResolveAddr>
  if (connect)
    f478:	e6b4      	b.n	f1e4 <WatchHandler+0x178>
    f47a:	bf00      	nop
    f47c:	000260d8 	.word	0x000260d8
    f480:	100040a0 	.word	0x100040a0
    f484:	100040ae 	.word	0x100040ae
    f488:	10004098 	.word	0x10004098
    f48c:	10004092 	.word	0x10004092
    f490:	10005ef0 	.word	0x10005ef0

0000f494 <WatchStart>:
 */
/*************************************************************************************************/
void WatchStart(void)
{
  /* Register for stack callbacks */
  DmRegister(watchDmCback);
    f494:	490f      	ldr	r1, [pc, #60]	; (f4d4 <WatchStart+0x40>)
{
    f496:	b508      	push	{r3, lr}
  DmRegister(watchDmCback);
    f498:	4608      	mov	r0, r1
    f49a:	f7fe fa09 	bl	d8b0 <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, watchDmCback);
    f49e:	490d      	ldr	r1, [pc, #52]	; (f4d4 <WatchStart+0x40>)
    f4a0:	2003      	movs	r0, #3
    f4a2:	f7fd fe59 	bl	d158 <DmConnRegister>
  AttRegister(watchAttCback);
    f4a6:	480c      	ldr	r0, [pc, #48]	; (f4d8 <WatchStart+0x44>)
    f4a8:	f006 f988 	bl	157bc <AttRegister>
  AttConnRegister(AppServerConnCback);
    f4ac:	480b      	ldr	r0, [pc, #44]	; (f4dc <WatchStart+0x48>)
    f4ae:	f006 f9a5 	bl	157fc <AttConnRegister>
  AttsCccRegister(WATCH_NUM_CCC_IDX, (attsCccSet_t *) watchCccSet, watchCccCback);
    f4b2:	4a0b      	ldr	r2, [pc, #44]	; (f4e0 <WatchStart+0x4c>)
    f4b4:	490b      	ldr	r1, [pc, #44]	; (f4e4 <WatchStart+0x50>)
    f4b6:	2001      	movs	r0, #1
    f4b8:	f004 f8c8 	bl	1364c <AttsCccRegister>

  /* Register for app framework button callbacks */
  AppUiBtnRegister(watchBtnCback);
    f4bc:	480a      	ldr	r0, [pc, #40]	; (f4e8 <WatchStart+0x54>)
    f4be:	f00e fa19 	bl	1d8f4 <AppUiBtnRegister>

  /* Register for app framework discovery callbacks */
  AppDiscRegister(watchDiscCback);
    f4c2:	480a      	ldr	r0, [pc, #40]	; (f4ec <WatchStart+0x58>)
    f4c4:	f00f fba0 	bl	1ec08 <AppDiscRegister>

  /* Initialize attribute server database */
  SvcCoreAddGroup();
    f4c8:	f00f f906 	bl	1e6d8 <SvcCoreAddGroup>

  /* Reset the device */
  DmDevReset();
}
    f4cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DmDevReset();
    f4d0:	f7fe b9ba 	b.w	d848 <DmDevReset>
    f4d4:	0000ee0d 	.word	0x0000ee0d
    f4d8:	0000edcd 	.word	0x0000edcd
    f4dc:	0001f835 	.word	0x0001f835
    f4e0:	0000ed79 	.word	0x0000ed79
    f4e4:	00026180 	.word	0x00026180
    f4e8:	0000ee61 	.word	0x0000ee61
    f4ec:	0000ebdd 	.word	0x0000ebdd

0000f4f0 <TipcCtsDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void TipcCtsDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
    f4f0:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attCtsSvcUuid,
    f4f2:	4b06      	ldr	r3, [pc, #24]	; (f50c <TipcCtsDiscover+0x1c>)
    f4f4:	4a06      	ldr	r2, [pc, #24]	; (f510 <TipcCtsDiscover+0x20>)
{
    f4f6:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attCtsSvcUuid,
    f4f8:	e9cd 3100 	strd	r3, r1, [sp]
    f4fc:	2304      	movs	r3, #4
    f4fe:	2102      	movs	r1, #2
    f500:	f00f fbee 	bl	1ece0 <AppDiscFindService>
                     TIPC_CTS_HDL_LIST_LEN, (attcDiscChar_t **) tipcCtsDiscCharList, pHdlList);
}
    f504:	b003      	add	sp, #12
    f506:	f85d fb04 	ldr.w	pc, [sp], #4
    f50a:	bf00      	nop
    f50c:	10002b54 	.word	0x10002b54
    f510:	00026818 	.word	0x00026818

0000f514 <TipcCtsValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t TipcCtsValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
    f514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Suppress unused variable compile warning */
  (void)month; (void)day; (void)hour; (void)min; (void)sec; (void)dayOfWeek; (void)adjustReason;
  (void)year; (void)sec256; (void)dstOffset; (void)accuracy; (void)timeZone; (void)source;

  /* current time */
  if (pMsg->handle == pHdlList[TIPC_CTS_CT_HDL_IDX])
    f518:	8802      	ldrh	r2, [r0, #0]
    f51a:	894b      	ldrh	r3, [r1, #10]
    f51c:	429a      	cmp	r2, r3
    f51e:	d018      	beq.n	f552 <TipcCtsValueUpdate+0x3e>
    APP_TRACE_INFO3("Date: %d/%d/%d", month, day, year);
    APP_TRACE_INFO3("Time: %02d:%02d:%02d", hour, min, sec);
    APP_TRACE_INFO3("dayOfWeek:%d sec256:%d adjustReason:%d",  dayOfWeek, sec256, adjustReason);
  }
  /* local time information */
  else if (pMsg->handle == pHdlList[TIPC_CTS_LTI_HDL_IDX])
    f520:	8882      	ldrh	r2, [r0, #4]
    f522:	429a      	cmp	r2, r3
    f524:	d037      	beq.n	f596 <TipcCtsValueUpdate+0x82>
    BSTREAM_TO_UINT8(dstOffset, p);

    APP_TRACE_INFO2("timeZone:%d dstOffset:%d", timeZone, dstOffset);
  }
  /* reference time information */
  else if (pMsg->handle == pHdlList[TIPC_CTS_RTI_HDL_IDX])
    f526:	88c2      	ldrh	r2, [r0, #6]
    f528:	429a      	cmp	r2, r3
    f52a:	d002      	beq.n	f532 <TipcCtsValueUpdate+0x1e>
    APP_TRACE_INFO2("Last update days:%d hours:%d", day, hour);
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
    f52c:	200a      	movs	r0, #10
  }

  return status;
}
    f52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p = pMsg->pValue;
    f532:	684b      	ldr	r3, [r1, #4]
    APP_TRACE_INFO2("Ref. time source:%d accuracy:%d", source, accuracy);
    f534:	481d      	ldr	r0, [pc, #116]	; (f5ac <TipcCtsValueUpdate+0x98>)
    BSTREAM_TO_UINT8(day, p);
    f536:	789c      	ldrb	r4, [r3, #2]
    BSTREAM_TO_UINT8(hour, p);
    f538:	78dd      	ldrb	r5, [r3, #3]
    APP_TRACE_INFO2("Ref. time source:%d accuracy:%d", source, accuracy);
    f53a:	785a      	ldrb	r2, [r3, #1]
    f53c:	7819      	ldrb	r1, [r3, #0]
    f53e:	f00f f8ab 	bl	1e698 <WsfTrace>
    APP_TRACE_INFO2("Last update days:%d hours:%d", day, hour);
    f542:	481b      	ldr	r0, [pc, #108]	; (f5b0 <TipcCtsValueUpdate+0x9c>)
    f544:	462a      	mov	r2, r5
    f546:	4621      	mov	r1, r4
    f548:	f00f f8a6 	bl	1e698 <WsfTrace>
  uint8_t   status = ATT_SUCCESS;
    f54c:	2000      	movs	r0, #0
}
    f54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p = pMsg->pValue;
    f552:	684c      	ldr	r4, [r1, #4]
    APP_TRACE_INFO3("Date: %d/%d/%d", month, day, year);
    f554:	4817      	ldr	r0, [pc, #92]	; (f5b4 <TipcCtsValueUpdate+0xa0>)
    BSTREAM_TO_UINT16(year, p);
    f556:	7862      	ldrb	r2, [r4, #1]
    f558:	7823      	ldrb	r3, [r4, #0]
    BSTREAM_TO_UINT8(hour, p);
    f55a:	7927      	ldrb	r7, [r4, #4]
    BSTREAM_TO_UINT8(min, p);
    f55c:	f894 8005 	ldrb.w	r8, [r4, #5]
    BSTREAM_TO_UINT8(sec, p);
    f560:	f894 9006 	ldrb.w	r9, [r4, #6]
    BSTREAM_TO_UINT8(dayOfWeek, p);
    f564:	79e5      	ldrb	r5, [r4, #7]
    BSTREAM_TO_UINT8(sec256, p);
    f566:	7a26      	ldrb	r6, [r4, #8]
    APP_TRACE_INFO3("Date: %d/%d/%d", month, day, year);
    f568:	78a1      	ldrb	r1, [r4, #2]
    BSTREAM_TO_UINT16(year, p);
    f56a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    APP_TRACE_INFO3("Date: %d/%d/%d", month, day, year);
    f56e:	b29b      	uxth	r3, r3
    f570:	78e2      	ldrb	r2, [r4, #3]
    BSTREAM_TO_UINT8(adjustReason, p);
    f572:	7a64      	ldrb	r4, [r4, #9]
    APP_TRACE_INFO3("Date: %d/%d/%d", month, day, year);
    f574:	f00f f890 	bl	1e698 <WsfTrace>
    APP_TRACE_INFO3("Time: %02d:%02d:%02d", hour, min, sec);
    f578:	464b      	mov	r3, r9
    f57a:	4642      	mov	r2, r8
    f57c:	4639      	mov	r1, r7
    f57e:	480e      	ldr	r0, [pc, #56]	; (f5b8 <TipcCtsValueUpdate+0xa4>)
    f580:	f00f f88a 	bl	1e698 <WsfTrace>
    APP_TRACE_INFO3("dayOfWeek:%d sec256:%d adjustReason:%d",  dayOfWeek, sec256, adjustReason);
    f584:	480d      	ldr	r0, [pc, #52]	; (f5bc <TipcCtsValueUpdate+0xa8>)
    f586:	4623      	mov	r3, r4
    f588:	4632      	mov	r2, r6
    f58a:	4629      	mov	r1, r5
    f58c:	f00f f884 	bl	1e698 <WsfTrace>
  uint8_t   status = ATT_SUCCESS;
    f590:	2000      	movs	r0, #0
}
    f592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p = pMsg->pValue;
    f596:	684b      	ldr	r3, [r1, #4]
    APP_TRACE_INFO2("timeZone:%d dstOffset:%d", timeZone, dstOffset);
    f598:	4809      	ldr	r0, [pc, #36]	; (f5c0 <TipcCtsValueUpdate+0xac>)
    f59a:	785a      	ldrb	r2, [r3, #1]
    f59c:	f993 1000 	ldrsb.w	r1, [r3]
    f5a0:	f00f f87a 	bl	1e698 <WsfTrace>
  uint8_t   status = ATT_SUCCESS;
    f5a4:	2000      	movs	r0, #0
}
    f5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f5aa:	bf00      	nop
    f5ac:	00026370 	.word	0x00026370
    f5b0:	00026390 	.word	0x00026390
    f5b4:	00026304 	.word	0x00026304
    f5b8:	00026314 	.word	0x00026314
    f5bc:	0002632c 	.word	0x0002632c
    f5c0:	00026354 	.word	0x00026354

0000f5c4 <default_RNG>:

#else /* Some other platform */

static int default_RNG(uint8_t *dest, unsigned size) {
    return 0;
}
    f5c4:	2000      	movs	r0, #0
    f5c6:	4770      	bx	lr

0000f5c8 <vli_add>:
static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
    uint32_t carry = 0;
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
    f5c8:	2300      	movs	r3, #0
static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
    f5ca:	b500      	push	{lr}
    __asm__ volatile (
    f5cc:	4684      	mov	ip, r0
    f5ce:	4618      	mov	r0, r3
    f5d0:	c908      	ldmia	r1!, {r3}
    f5d2:	f852 eb04 	ldr.w	lr, [r2], #4
    f5d6:	eb13 030e 	adds.w	r3, r3, lr
    f5da:	f84c 3b04 	str.w	r3, [ip], #4
    f5de:	c908      	ldmia	r1!, {r3}
    f5e0:	f852 eb04 	ldr.w	lr, [r2], #4
    f5e4:	eb53 030e 	adcs.w	r3, r3, lr
    f5e8:	f84c 3b04 	str.w	r3, [ip], #4
    f5ec:	c908      	ldmia	r1!, {r3}
    f5ee:	f852 eb04 	ldr.w	lr, [r2], #4
    f5f2:	eb53 030e 	adcs.w	r3, r3, lr
    f5f6:	f84c 3b04 	str.w	r3, [ip], #4
    f5fa:	c908      	ldmia	r1!, {r3}
    f5fc:	f852 eb04 	ldr.w	lr, [r2], #4
    f600:	eb53 030e 	adcs.w	r3, r3, lr
    f604:	f84c 3b04 	str.w	r3, [ip], #4
    f608:	c908      	ldmia	r1!, {r3}
    f60a:	f852 eb04 	ldr.w	lr, [r2], #4
    f60e:	eb53 030e 	adcs.w	r3, r3, lr
    f612:	f84c 3b04 	str.w	r3, [ip], #4
    f616:	c908      	ldmia	r1!, {r3}
    f618:	f852 eb04 	ldr.w	lr, [r2], #4
    f61c:	eb53 030e 	adcs.w	r3, r3, lr
    f620:	f84c 3b04 	str.w	r3, [ip], #4
    f624:	c908      	ldmia	r1!, {r3}
    f626:	f852 eb04 	ldr.w	lr, [r2], #4
    f62a:	eb53 030e 	adcs.w	r3, r3, lr
    f62e:	f84c 3b04 	str.w	r3, [ip], #4
    f632:	c908      	ldmia	r1!, {r3}
    f634:	f852 eb04 	ldr.w	lr, [r2], #4
    f638:	eb53 030e 	adcs.w	r3, r3, lr
    f63c:	f84c 3b04 	str.w	r3, [ip], #4
    f640:	4140      	adcs	r0, r0
    #endif
        :
        : "cc", "memory"
    );
    return carry;
}
    f642:	f85d fb04 	ldr.w	pc, [sp], #4
    f646:	bf00      	nop

0000f648 <vli_sub>:
#define asm_add 1

static uint32_t vli_sub(uint32_t *result, const uint32_t *left, const uint32_t *right) {
    f648:	b500      	push	{lr}
    uint32_t carry = 0;
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
    f64a:	2300      	movs	r3, #0
    f64c:	f851 cb04 	ldr.w	ip, [r1], #4
    f650:	f852 eb04 	ldr.w	lr, [r2], #4
    f654:	ebbc 0c0e 	subs.w	ip, ip, lr
    f658:	f840 cb04 	str.w	ip, [r0], #4
    f65c:	f851 cb04 	ldr.w	ip, [r1], #4
    f660:	f852 eb04 	ldr.w	lr, [r2], #4
    f664:	eb7c 0c0e 	sbcs.w	ip, ip, lr
    f668:	f840 cb04 	str.w	ip, [r0], #4
    f66c:	f851 cb04 	ldr.w	ip, [r1], #4
    f670:	f852 eb04 	ldr.w	lr, [r2], #4
    f674:	eb7c 0c0e 	sbcs.w	ip, ip, lr
    f678:	f840 cb04 	str.w	ip, [r0], #4
    f67c:	f851 cb04 	ldr.w	ip, [r1], #4
    f680:	f852 eb04 	ldr.w	lr, [r2], #4
    f684:	eb7c 0c0e 	sbcs.w	ip, ip, lr
    f688:	f840 cb04 	str.w	ip, [r0], #4
    f68c:	f851 cb04 	ldr.w	ip, [r1], #4
    f690:	f852 eb04 	ldr.w	lr, [r2], #4
    f694:	eb7c 0c0e 	sbcs.w	ip, ip, lr
    f698:	f840 cb04 	str.w	ip, [r0], #4
    f69c:	f851 cb04 	ldr.w	ip, [r1], #4
    f6a0:	f852 eb04 	ldr.w	lr, [r2], #4
    f6a4:	eb7c 0c0e 	sbcs.w	ip, ip, lr
    f6a8:	f840 cb04 	str.w	ip, [r0], #4
    f6ac:	f851 cb04 	ldr.w	ip, [r1], #4
    f6b0:	f852 eb04 	ldr.w	lr, [r2], #4
    f6b4:	eb7c 0c0e 	sbcs.w	ip, ip, lr
    f6b8:	f840 cb04 	str.w	ip, [r0], #4
    f6bc:	f851 cb04 	ldr.w	ip, [r1], #4
    f6c0:	f852 eb04 	ldr.w	lr, [r2], #4
    f6c4:	eb7c 0c0e 	sbcs.w	ip, ip, lr
    f6c8:	f840 cb04 	str.w	ip, [r0], #4
    f6cc:	415b      	adcs	r3, r3
        :
        : "cc", "memory"
    );
    return !carry; // note that on ARM, carry flag set means "no borrow" when subtracting
                   // (for some reason...)
}
    f6ce:	fab3 f083 	clz	r0, r3
    f6d2:	0940      	lsrs	r0, r0, #5
    f6d4:	f85d fb04 	ldr.w	pc, [sp], #4

0000f6d8 <vli_mult>:
}
#define asm_mult 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_mult(uint32_t *result, const uint32_t *left, const uint32_t *right) {
    f6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    register uint32_t *r0 __asm__("r0") = result;
    register const uint32_t *r1 __asm__("r1") = left;
    register const uint32_t *r2 __asm__("r2") = right;

    __asm__ volatile (
    f6dc:	f100 0018 	add.w	r0, r0, #24
    f6e0:	f102 0218 	add.w	r2, r2, #24
    f6e4:	c918      	ldmia	r1!, {r3, r4}
    f6e6:	cac0      	ldmia	r2!, {r6, r7}
    f6e8:	fba3 bc06 	umull	fp, ip, r3, r6
    f6ec:	f840 bb04 	str.w	fp, [r0], #4
    f6f0:	f04f 0a00 	mov.w	sl, #0
    f6f4:	fba3 b907 	umull	fp, r9, r3, r7
    f6f8:	eb1c 0c0b 	adds.w	ip, ip, fp
    f6fc:	f149 0900 	adc.w	r9, r9, #0
    f700:	fba4 be06 	umull	fp, lr, r4, r6
    f704:	eb1c 0c0b 	adds.w	ip, ip, fp
    f708:	eb59 090e 	adcs.w	r9, r9, lr
    f70c:	f14a 0a00 	adc.w	sl, sl, #0
    f710:	f840 cb04 	str.w	ip, [r0], #4
    f714:	fba4 ce07 	umull	ip, lr, r4, r7
    f718:	eb19 090c 	adds.w	r9, r9, ip
    f71c:	eb4a 0a0e 	adc.w	sl, sl, lr
    f720:	e8a0 0600 	stmia.w	r0!, {r9, sl}
    f724:	f1a0 001c 	sub.w	r0, r0, #28
    f728:	f1a2 0214 	sub.w	r2, r2, #20
    f72c:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
    f730:	c920      	ldmia	r1!, {r5}
    f732:	fba3 bc06 	umull	fp, ip, r3, r6
    f736:	f840 bb04 	str.w	fp, [r0], #4
    f73a:	f04f 0a00 	mov.w	sl, #0
    f73e:	fba3 b907 	umull	fp, r9, r3, r7
    f742:	eb1c 0c0b 	adds.w	ip, ip, fp
    f746:	f149 0900 	adc.w	r9, r9, #0
    f74a:	fba4 be06 	umull	fp, lr, r4, r6
    f74e:	eb1c 0c0b 	adds.w	ip, ip, fp
    f752:	eb59 090e 	adcs.w	r9, r9, lr
    f756:	f14a 0a00 	adc.w	sl, sl, #0
    f75a:	f840 cb04 	str.w	ip, [r0], #4
    f75e:	f04f 0b00 	mov.w	fp, #0
    f762:	fba3 ce08 	umull	ip, lr, r3, r8
    f766:	eb19 090c 	adds.w	r9, r9, ip
    f76a:	eb5a 0a0e 	adcs.w	sl, sl, lr
    f76e:	f14b 0b00 	adc.w	fp, fp, #0
    f772:	fba4 ce07 	umull	ip, lr, r4, r7
    f776:	eb19 090c 	adds.w	r9, r9, ip
    f77a:	eb5a 0a0e 	adcs.w	sl, sl, lr
    f77e:	f14b 0b00 	adc.w	fp, fp, #0
    f782:	fba5 ce06 	umull	ip, lr, r5, r6
    f786:	eb19 090c 	adds.w	r9, r9, ip
    f78a:	eb5a 0a0e 	adcs.w	sl, sl, lr
    f78e:	f14b 0b00 	adc.w	fp, fp, #0
    f792:	f840 9b04 	str.w	r9, [r0], #4
    f796:	c908      	ldmia	r1!, {r3}
    f798:	f04f 0c00 	mov.w	ip, #0
    f79c:	fba4 e908 	umull	lr, r9, r4, r8
    f7a0:	eb1a 0a0e 	adds.w	sl, sl, lr
    f7a4:	eb5b 0b09 	adcs.w	fp, fp, r9
    f7a8:	f14c 0c00 	adc.w	ip, ip, #0
    f7ac:	fba5 e907 	umull	lr, r9, r5, r7
    f7b0:	eb1a 0a0e 	adds.w	sl, sl, lr
    f7b4:	eb5b 0b09 	adcs.w	fp, fp, r9
    f7b8:	f14c 0c00 	adc.w	ip, ip, #0
    f7bc:	fba3 e906 	umull	lr, r9, r3, r6
    f7c0:	eb1a 0a0e 	adds.w	sl, sl, lr
    f7c4:	eb5b 0b09 	adcs.w	fp, fp, r9
    f7c8:	f14c 0c00 	adc.w	ip, ip, #0
    f7cc:	f8d0 e000 	ldr.w	lr, [r0]
    f7d0:	eb1a 0a0e 	adds.w	sl, sl, lr
    f7d4:	f15b 0b00 	adcs.w	fp, fp, #0
    f7d8:	f14c 0c00 	adc.w	ip, ip, #0
    f7dc:	f840 ab04 	str.w	sl, [r0], #4
    f7e0:	c910      	ldmia	r1!, {r4}
    f7e2:	f04f 0e00 	mov.w	lr, #0
    f7e6:	fba5 9a08 	umull	r9, sl, r5, r8
    f7ea:	eb1b 0b09 	adds.w	fp, fp, r9
    f7ee:	eb5c 0c0a 	adcs.w	ip, ip, sl
    f7f2:	f14e 0e00 	adc.w	lr, lr, #0
    f7f6:	fba3 9a07 	umull	r9, sl, r3, r7
    f7fa:	eb1b 0b09 	adds.w	fp, fp, r9
    f7fe:	eb5c 0c0a 	adcs.w	ip, ip, sl
    f802:	f14e 0e00 	adc.w	lr, lr, #0
    f806:	fba4 9a06 	umull	r9, sl, r4, r6
    f80a:	eb1b 0b09 	adds.w	fp, fp, r9
    f80e:	eb5c 0c0a 	adcs.w	ip, ip, sl
    f812:	f14e 0e00 	adc.w	lr, lr, #0
    f816:	f8d0 9000 	ldr.w	r9, [r0]
    f81a:	eb1b 0b09 	adds.w	fp, fp, r9
    f81e:	f15c 0c00 	adcs.w	ip, ip, #0
    f822:	f14e 0e00 	adc.w	lr, lr, #0
    f826:	f840 bb04 	str.w	fp, [r0], #4
    f82a:	ca40      	ldmia	r2!, {r6}
    f82c:	f04f 0900 	mov.w	r9, #0
    f830:	fba5 ab06 	umull	sl, fp, r5, r6
    f834:	eb1c 0c0a 	adds.w	ip, ip, sl
    f838:	eb5e 0e0b 	adcs.w	lr, lr, fp
    f83c:	f149 0900 	adc.w	r9, r9, #0
    f840:	fba3 ab08 	umull	sl, fp, r3, r8
    f844:	eb1c 0c0a 	adds.w	ip, ip, sl
    f848:	eb5e 0e0b 	adcs.w	lr, lr, fp
    f84c:	f149 0900 	adc.w	r9, r9, #0
    f850:	fba4 ab07 	umull	sl, fp, r4, r7
    f854:	eb1c 0c0a 	adds.w	ip, ip, sl
    f858:	eb5e 0e0b 	adcs.w	lr, lr, fp
    f85c:	f149 0900 	adc.w	r9, r9, #0
    f860:	f8d0 a000 	ldr.w	sl, [r0]
    f864:	eb1c 0c0a 	adds.w	ip, ip, sl
    f868:	f15e 0e00 	adcs.w	lr, lr, #0
    f86c:	f149 0900 	adc.w	r9, r9, #0
    f870:	f840 cb04 	str.w	ip, [r0], #4
    f874:	ca80      	ldmia	r2!, {r7}
    f876:	f04f 0a00 	mov.w	sl, #0
    f87a:	fba5 bc07 	umull	fp, ip, r5, r7
    f87e:	eb1e 0e0b 	adds.w	lr, lr, fp
    f882:	eb59 090c 	adcs.w	r9, r9, ip
    f886:	f14a 0a00 	adc.w	sl, sl, #0
    f88a:	fba3 bc06 	umull	fp, ip, r3, r6
    f88e:	eb1e 0e0b 	adds.w	lr, lr, fp
    f892:	eb59 090c 	adcs.w	r9, r9, ip
    f896:	f14a 0a00 	adc.w	sl, sl, #0
    f89a:	fba4 bc08 	umull	fp, ip, r4, r8
    f89e:	eb1e 0e0b 	adds.w	lr, lr, fp
    f8a2:	eb59 090c 	adcs.w	r9, r9, ip
    f8a6:	f14a 0a00 	adc.w	sl, sl, #0
    f8aa:	f8d0 b000 	ldr.w	fp, [r0]
    f8ae:	eb1e 0e0b 	adds.w	lr, lr, fp
    f8b2:	f159 0900 	adcs.w	r9, r9, #0
    f8b6:	f14a 0a00 	adc.w	sl, sl, #0
    f8ba:	f840 eb04 	str.w	lr, [r0], #4
    f8be:	f04f 0b00 	mov.w	fp, #0
    f8c2:	fba3 ce07 	umull	ip, lr, r3, r7
    f8c6:	eb19 090c 	adds.w	r9, r9, ip
    f8ca:	eb5a 0a0e 	adcs.w	sl, sl, lr
    f8ce:	f14b 0b00 	adc.w	fp, fp, #0
    f8d2:	fba4 ce06 	umull	ip, lr, r4, r6
    f8d6:	eb19 090c 	adds.w	r9, r9, ip
    f8da:	eb5a 0a0e 	adcs.w	sl, sl, lr
    f8de:	f14b 0b00 	adc.w	fp, fp, #0
    f8e2:	f840 9b04 	str.w	r9, [r0], #4
    f8e6:	fba4 e907 	umull	lr, r9, r4, r7
    f8ea:	eb1a 0a0e 	adds.w	sl, sl, lr
    f8ee:	eb4b 0b09 	adc.w	fp, fp, r9
    f8f2:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
    f8f6:	f1a0 0034 	sub.w	r0, r0, #52	; 0x34
    f8fa:	f1a1 0114 	sub.w	r1, r1, #20
    f8fe:	f1a2 0220 	sub.w	r2, r2, #32
    f902:	c938      	ldmia	r1!, {r3, r4, r5}
    f904:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
    f908:	fba3 bc06 	umull	fp, ip, r3, r6
    f90c:	f840 bb04 	str.w	fp, [r0], #4
    f910:	f04f 0a00 	mov.w	sl, #0
    f914:	fba3 b907 	umull	fp, r9, r3, r7
    f918:	eb1c 0c0b 	adds.w	ip, ip, fp
    f91c:	f149 0900 	adc.w	r9, r9, #0
    f920:	fba4 be06 	umull	fp, lr, r4, r6
    f924:	eb1c 0c0b 	adds.w	ip, ip, fp
    f928:	eb59 090e 	adcs.w	r9, r9, lr
    f92c:	f14a 0a00 	adc.w	sl, sl, #0
    f930:	f840 cb04 	str.w	ip, [r0], #4
    f934:	f04f 0b00 	mov.w	fp, #0
    f938:	fba3 ce08 	umull	ip, lr, r3, r8
    f93c:	eb19 090c 	adds.w	r9, r9, ip
    f940:	eb5a 0a0e 	adcs.w	sl, sl, lr
    f944:	f14b 0b00 	adc.w	fp, fp, #0
    f948:	fba4 ce07 	umull	ip, lr, r4, r7
    f94c:	eb19 090c 	adds.w	r9, r9, ip
    f950:	eb5a 0a0e 	adcs.w	sl, sl, lr
    f954:	f14b 0b00 	adc.w	fp, fp, #0
    f958:	fba5 ce06 	umull	ip, lr, r5, r6
    f95c:	eb19 090c 	adds.w	r9, r9, ip
    f960:	eb5a 0a0e 	adcs.w	sl, sl, lr
    f964:	f14b 0b00 	adc.w	fp, fp, #0
    f968:	f840 9b04 	str.w	r9, [r0], #4
    f96c:	c908      	ldmia	r1!, {r3}
    f96e:	f04f 0c00 	mov.w	ip, #0
    f972:	fba4 e908 	umull	lr, r9, r4, r8
    f976:	eb1a 0a0e 	adds.w	sl, sl, lr
    f97a:	eb5b 0b09 	adcs.w	fp, fp, r9
    f97e:	f14c 0c00 	adc.w	ip, ip, #0
    f982:	fba5 e907 	umull	lr, r9, r5, r7
    f986:	eb1a 0a0e 	adds.w	sl, sl, lr
    f98a:	eb5b 0b09 	adcs.w	fp, fp, r9
    f98e:	f14c 0c00 	adc.w	ip, ip, #0
    f992:	fba3 e906 	umull	lr, r9, r3, r6
    f996:	eb1a 0a0e 	adds.w	sl, sl, lr
    f99a:	eb5b 0b09 	adcs.w	fp, fp, r9
    f99e:	f14c 0c00 	adc.w	ip, ip, #0
    f9a2:	f8d0 e000 	ldr.w	lr, [r0]
    f9a6:	eb1a 0a0e 	adds.w	sl, sl, lr
    f9aa:	f15b 0b00 	adcs.w	fp, fp, #0
    f9ae:	f14c 0c00 	adc.w	ip, ip, #0
    f9b2:	f840 ab04 	str.w	sl, [r0], #4
    f9b6:	c910      	ldmia	r1!, {r4}
    f9b8:	f04f 0e00 	mov.w	lr, #0
    f9bc:	fba5 9a08 	umull	r9, sl, r5, r8
    f9c0:	eb1b 0b09 	adds.w	fp, fp, r9
    f9c4:	eb5c 0c0a 	adcs.w	ip, ip, sl
    f9c8:	f14e 0e00 	adc.w	lr, lr, #0
    f9cc:	fba3 9a07 	umull	r9, sl, r3, r7
    f9d0:	eb1b 0b09 	adds.w	fp, fp, r9
    f9d4:	eb5c 0c0a 	adcs.w	ip, ip, sl
    f9d8:	f14e 0e00 	adc.w	lr, lr, #0
    f9dc:	fba4 9a06 	umull	r9, sl, r4, r6
    f9e0:	eb1b 0b09 	adds.w	fp, fp, r9
    f9e4:	eb5c 0c0a 	adcs.w	ip, ip, sl
    f9e8:	f14e 0e00 	adc.w	lr, lr, #0
    f9ec:	f8d0 9000 	ldr.w	r9, [r0]
    f9f0:	eb1b 0b09 	adds.w	fp, fp, r9
    f9f4:	f15c 0c00 	adcs.w	ip, ip, #0
    f9f8:	f14e 0e00 	adc.w	lr, lr, #0
    f9fc:	f840 bb04 	str.w	fp, [r0], #4
    fa00:	c920      	ldmia	r1!, {r5}
    fa02:	f04f 0900 	mov.w	r9, #0
    fa06:	fba3 ab08 	umull	sl, fp, r3, r8
    fa0a:	eb1c 0c0a 	adds.w	ip, ip, sl
    fa0e:	eb5e 0e0b 	adcs.w	lr, lr, fp
    fa12:	f149 0900 	adc.w	r9, r9, #0
    fa16:	fba4 ab07 	umull	sl, fp, r4, r7
    fa1a:	eb1c 0c0a 	adds.w	ip, ip, sl
    fa1e:	eb5e 0e0b 	adcs.w	lr, lr, fp
    fa22:	f149 0900 	adc.w	r9, r9, #0
    fa26:	fba5 ab06 	umull	sl, fp, r5, r6
    fa2a:	eb1c 0c0a 	adds.w	ip, ip, sl
    fa2e:	eb5e 0e0b 	adcs.w	lr, lr, fp
    fa32:	f149 0900 	adc.w	r9, r9, #0
    fa36:	f8d0 a000 	ldr.w	sl, [r0]
    fa3a:	eb1c 0c0a 	adds.w	ip, ip, sl
    fa3e:	f15e 0e00 	adcs.w	lr, lr, #0
    fa42:	f149 0900 	adc.w	r9, r9, #0
    fa46:	f840 cb04 	str.w	ip, [r0], #4
    fa4a:	c908      	ldmia	r1!, {r3}
    fa4c:	f04f 0a00 	mov.w	sl, #0
    fa50:	fba4 bc08 	umull	fp, ip, r4, r8
    fa54:	eb1e 0e0b 	adds.w	lr, lr, fp
    fa58:	eb59 090c 	adcs.w	r9, r9, ip
    fa5c:	f14a 0a00 	adc.w	sl, sl, #0
    fa60:	fba5 bc07 	umull	fp, ip, r5, r7
    fa64:	eb1e 0e0b 	adds.w	lr, lr, fp
    fa68:	eb59 090c 	adcs.w	r9, r9, ip
    fa6c:	f14a 0a00 	adc.w	sl, sl, #0
    fa70:	fba3 bc06 	umull	fp, ip, r3, r6
    fa74:	eb1e 0e0b 	adds.w	lr, lr, fp
    fa78:	eb59 090c 	adcs.w	r9, r9, ip
    fa7c:	f14a 0a00 	adc.w	sl, sl, #0
    fa80:	f8d0 b000 	ldr.w	fp, [r0]
    fa84:	eb1e 0e0b 	adds.w	lr, lr, fp
    fa88:	f159 0900 	adcs.w	r9, r9, #0
    fa8c:	f14a 0a00 	adc.w	sl, sl, #0
    fa90:	f840 eb04 	str.w	lr, [r0], #4
    fa94:	c910      	ldmia	r1!, {r4}
    fa96:	f04f 0b00 	mov.w	fp, #0
    fa9a:	fba5 ce08 	umull	ip, lr, r5, r8
    fa9e:	eb19 090c 	adds.w	r9, r9, ip
    faa2:	eb5a 0a0e 	adcs.w	sl, sl, lr
    faa6:	f14b 0b00 	adc.w	fp, fp, #0
    faaa:	fba3 ce07 	umull	ip, lr, r3, r7
    faae:	eb19 090c 	adds.w	r9, r9, ip
    fab2:	eb5a 0a0e 	adcs.w	sl, sl, lr
    fab6:	f14b 0b00 	adc.w	fp, fp, #0
    faba:	fba4 ce06 	umull	ip, lr, r4, r6
    fabe:	eb19 090c 	adds.w	r9, r9, ip
    fac2:	eb5a 0a0e 	adcs.w	sl, sl, lr
    fac6:	f14b 0b00 	adc.w	fp, fp, #0
    faca:	f8d0 c000 	ldr.w	ip, [r0]
    face:	eb19 090c 	adds.w	r9, r9, ip
    fad2:	f15a 0a00 	adcs.w	sl, sl, #0
    fad6:	f14b 0b00 	adc.w	fp, fp, #0
    fada:	f840 9b04 	str.w	r9, [r0], #4
    fade:	ca40      	ldmia	r2!, {r6}
    fae0:	f04f 0c00 	mov.w	ip, #0
    fae4:	fba5 e906 	umull	lr, r9, r5, r6
    fae8:	eb1a 0a0e 	adds.w	sl, sl, lr
    faec:	eb5b 0b09 	adcs.w	fp, fp, r9
    faf0:	f14c 0c00 	adc.w	ip, ip, #0
    faf4:	fba3 e908 	umull	lr, r9, r3, r8
    faf8:	eb1a 0a0e 	adds.w	sl, sl, lr
    fafc:	eb5b 0b09 	adcs.w	fp, fp, r9
    fb00:	f14c 0c00 	adc.w	ip, ip, #0
    fb04:	fba4 e907 	umull	lr, r9, r4, r7
    fb08:	eb1a 0a0e 	adds.w	sl, sl, lr
    fb0c:	eb5b 0b09 	adcs.w	fp, fp, r9
    fb10:	f14c 0c00 	adc.w	ip, ip, #0
    fb14:	f8d0 e000 	ldr.w	lr, [r0]
    fb18:	eb1a 0a0e 	adds.w	sl, sl, lr
    fb1c:	f15b 0b00 	adcs.w	fp, fp, #0
    fb20:	f14c 0c00 	adc.w	ip, ip, #0
    fb24:	f840 ab04 	str.w	sl, [r0], #4
    fb28:	ca80      	ldmia	r2!, {r7}
    fb2a:	f04f 0e00 	mov.w	lr, #0
    fb2e:	fba5 9a07 	umull	r9, sl, r5, r7
    fb32:	eb1b 0b09 	adds.w	fp, fp, r9
    fb36:	eb5c 0c0a 	adcs.w	ip, ip, sl
    fb3a:	f14e 0e00 	adc.w	lr, lr, #0
    fb3e:	fba3 9a06 	umull	r9, sl, r3, r6
    fb42:	eb1b 0b09 	adds.w	fp, fp, r9
    fb46:	eb5c 0c0a 	adcs.w	ip, ip, sl
    fb4a:	f14e 0e00 	adc.w	lr, lr, #0
    fb4e:	fba4 9a08 	umull	r9, sl, r4, r8
    fb52:	eb1b 0b09 	adds.w	fp, fp, r9
    fb56:	eb5c 0c0a 	adcs.w	ip, ip, sl
    fb5a:	f14e 0e00 	adc.w	lr, lr, #0
    fb5e:	f8d0 9000 	ldr.w	r9, [r0]
    fb62:	eb1b 0b09 	adds.w	fp, fp, r9
    fb66:	f15c 0c00 	adcs.w	ip, ip, #0
    fb6a:	f14e 0e00 	adc.w	lr, lr, #0
    fb6e:	f840 bb04 	str.w	fp, [r0], #4
    fb72:	f852 8b04 	ldr.w	r8, [r2], #4
    fb76:	f04f 0900 	mov.w	r9, #0
    fb7a:	fba5 ab08 	umull	sl, fp, r5, r8
    fb7e:	eb1c 0c0a 	adds.w	ip, ip, sl
    fb82:	eb5e 0e0b 	adcs.w	lr, lr, fp
    fb86:	f149 0900 	adc.w	r9, r9, #0
    fb8a:	fba3 ab07 	umull	sl, fp, r3, r7
    fb8e:	eb1c 0c0a 	adds.w	ip, ip, sl
    fb92:	eb5e 0e0b 	adcs.w	lr, lr, fp
    fb96:	f149 0900 	adc.w	r9, r9, #0
    fb9a:	fba4 ab06 	umull	sl, fp, r4, r6
    fb9e:	eb1c 0c0a 	adds.w	ip, ip, sl
    fba2:	eb5e 0e0b 	adcs.w	lr, lr, fp
    fba6:	f149 0900 	adc.w	r9, r9, #0
    fbaa:	f8d0 a000 	ldr.w	sl, [r0]
    fbae:	eb1c 0c0a 	adds.w	ip, ip, sl
    fbb2:	f15e 0e00 	adcs.w	lr, lr, #0
    fbb6:	f149 0900 	adc.w	r9, r9, #0
    fbba:	f840 cb04 	str.w	ip, [r0], #4
    fbbe:	ca40      	ldmia	r2!, {r6}
    fbc0:	f04f 0a00 	mov.w	sl, #0
    fbc4:	fba5 bc06 	umull	fp, ip, r5, r6
    fbc8:	eb1e 0e0b 	adds.w	lr, lr, fp
    fbcc:	eb59 090c 	adcs.w	r9, r9, ip
    fbd0:	f14a 0a00 	adc.w	sl, sl, #0
    fbd4:	fba3 bc08 	umull	fp, ip, r3, r8
    fbd8:	eb1e 0e0b 	adds.w	lr, lr, fp
    fbdc:	eb59 090c 	adcs.w	r9, r9, ip
    fbe0:	f14a 0a00 	adc.w	sl, sl, #0
    fbe4:	fba4 bc07 	umull	fp, ip, r4, r7
    fbe8:	eb1e 0e0b 	adds.w	lr, lr, fp
    fbec:	eb59 090c 	adcs.w	r9, r9, ip
    fbf0:	f14a 0a00 	adc.w	sl, sl, #0
    fbf4:	f8d0 b000 	ldr.w	fp, [r0]
    fbf8:	eb1e 0e0b 	adds.w	lr, lr, fp
    fbfc:	f159 0900 	adcs.w	r9, r9, #0
    fc00:	f14a 0a00 	adc.w	sl, sl, #0
    fc04:	f840 eb04 	str.w	lr, [r0], #4
    fc08:	ca80      	ldmia	r2!, {r7}
    fc0a:	f04f 0b00 	mov.w	fp, #0
    fc0e:	fba5 ce07 	umull	ip, lr, r5, r7
    fc12:	eb19 090c 	adds.w	r9, r9, ip
    fc16:	eb5a 0a0e 	adcs.w	sl, sl, lr
    fc1a:	f14b 0b00 	adc.w	fp, fp, #0
    fc1e:	fba3 ce06 	umull	ip, lr, r3, r6
    fc22:	eb19 090c 	adds.w	r9, r9, ip
    fc26:	eb5a 0a0e 	adcs.w	sl, sl, lr
    fc2a:	f14b 0b00 	adc.w	fp, fp, #0
    fc2e:	fba4 ce08 	umull	ip, lr, r4, r8
    fc32:	eb19 090c 	adds.w	r9, r9, ip
    fc36:	eb5a 0a0e 	adcs.w	sl, sl, lr
    fc3a:	f14b 0b00 	adc.w	fp, fp, #0
    fc3e:	f8d0 c000 	ldr.w	ip, [r0]
    fc42:	eb19 090c 	adds.w	r9, r9, ip
    fc46:	f15a 0a00 	adcs.w	sl, sl, #0
    fc4a:	f14b 0b00 	adc.w	fp, fp, #0
    fc4e:	f840 9b04 	str.w	r9, [r0], #4
    fc52:	f04f 0c00 	mov.w	ip, #0
    fc56:	fba3 e907 	umull	lr, r9, r3, r7
    fc5a:	eb1a 0a0e 	adds.w	sl, sl, lr
    fc5e:	eb5b 0b09 	adcs.w	fp, fp, r9
    fc62:	f14c 0c00 	adc.w	ip, ip, #0
    fc66:	fba4 e906 	umull	lr, r9, r4, r6
    fc6a:	eb1a 0a0e 	adds.w	sl, sl, lr
    fc6e:	eb5b 0b09 	adcs.w	fp, fp, r9
    fc72:	f14c 0c00 	adc.w	ip, ip, #0
    fc76:	f840 ab04 	str.w	sl, [r0], #4
    fc7a:	fba4 9a07 	umull	r9, sl, r4, r7
    fc7e:	eb1b 0b09 	adds.w	fp, fp, r9
    fc82:	eb4c 0c0a 	adc.w	ip, ip, sl
    fc86:	e8a0 1800 	stmia.w	r0!, {fp, ip}
    #endif
        : "+r" (r0), "+r" (r1), "+r" (r2)
        :
        : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
    fc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc8e:	bf00      	nop

0000fc90 <vli_square>:
}
#define asm_square 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_square(uint32_t *result, const uint32_t *left) {
    fc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    register uint32_t *r0 __asm__("r0") = result;
    register const uint32_t *r1 __asm__("r1") = left;

    __asm__ volatile (
    fc94:	c90c      	ldmia	r1!, {r2, r3}
    fc96:	f101 0110 	add.w	r1, r1, #16
    fc9a:	c960      	ldmia	r1!, {r5, r6}
    fc9c:	f100 0018 	add.w	r0, r0, #24
    fca0:	fba2 8905 	umull	r8, r9, r2, r5
    fca4:	f840 8b04 	str.w	r8, [r0], #4
    fca8:	fba2 ca06 	umull	ip, sl, r2, r6
    fcac:	eb19 090c 	adds.w	r9, r9, ip
    fcb0:	f14a 0a00 	adc.w	sl, sl, #0
    fcb4:	f840 9b04 	str.w	r9, [r0], #4
    fcb8:	fba3 8906 	umull	r8, r9, r3, r6
    fcbc:	eb1a 0a08 	adds.w	sl, sl, r8
    fcc0:	f149 0b00 	adc.w	fp, r9, #0
    fcc4:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
    fcc8:	f1a0 0028 	sub.w	r0, r0, #40	; 0x28
    fccc:	f1a1 0120 	sub.w	r1, r1, #32
    fcd0:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
    fcd2:	fba2 bc02 	umull	fp, ip, r2, r2
    fcd6:	f840 bb04 	str.w	fp, [r0], #4
    fcda:	f04f 0900 	mov.w	r9, #0
    fcde:	fba2 ab03 	umull	sl, fp, r2, r3
    fce2:	eb1c 0c0a 	adds.w	ip, ip, sl
    fce6:	f15b 0800 	adcs.w	r8, fp, #0
    fcea:	f149 0900 	adc.w	r9, r9, #0
    fcee:	eb1c 0c0a 	adds.w	ip, ip, sl
    fcf2:	eb58 080b 	adcs.w	r8, r8, fp
    fcf6:	f149 0900 	adc.w	r9, r9, #0
    fcfa:	f840 cb04 	str.w	ip, [r0], #4
    fcfe:	f04f 0a00 	mov.w	sl, #0
    fd02:	fba2 bc04 	umull	fp, ip, r2, r4
    fd06:	eb1b 0b0b 	adds.w	fp, fp, fp
    fd0a:	eb5c 0c0c 	adcs.w	ip, ip, ip
    fd0e:	f14a 0a00 	adc.w	sl, sl, #0
    fd12:	eb18 080b 	adds.w	r8, r8, fp
    fd16:	eb59 090c 	adcs.w	r9, r9, ip
    fd1a:	f14a 0a00 	adc.w	sl, sl, #0
    fd1e:	fba3 bc03 	umull	fp, ip, r3, r3
    fd22:	eb18 080b 	adds.w	r8, r8, fp
    fd26:	eb59 090c 	adcs.w	r9, r9, ip
    fd2a:	f14a 0a00 	adc.w	sl, sl, #0
    fd2e:	f840 8b04 	str.w	r8, [r0], #4
    fd32:	f04f 0c00 	mov.w	ip, #0
    fd36:	fba2 8b05 	umull	r8, fp, r2, r5
    fd3a:	46de      	mov	lr, fp
    fd3c:	fbe3 8b04 	umlal	r8, fp, r3, r4
    fd40:	45de      	cmp	lr, fp
    fd42:	bf88      	it	hi
    fd44:	f14c 0c00 	adchi.w	ip, ip, #0
    fd48:	eb18 0808 	adds.w	r8, r8, r8
    fd4c:	eb5b 0b0b 	adcs.w	fp, fp, fp
    fd50:	eb4c 0c0c 	adc.w	ip, ip, ip
    fd54:	eb18 0809 	adds.w	r8, r8, r9
    fd58:	eb5b 0b0a 	adcs.w	fp, fp, sl
    fd5c:	f14c 0c00 	adc.w	ip, ip, #0
    fd60:	f840 8b04 	str.w	r8, [r0], #4
    fd64:	f04f 0a00 	mov.w	sl, #0
    fd68:	fba2 8906 	umull	r8, r9, r2, r6
    fd6c:	46ce      	mov	lr, r9
    fd6e:	fbe3 8905 	umlal	r8, r9, r3, r5
    fd72:	45ce      	cmp	lr, r9
    fd74:	bf88      	it	hi
    fd76:	f14a 0a00 	adchi.w	sl, sl, #0
    fd7a:	eb18 0808 	adds.w	r8, r8, r8
    fd7e:	eb59 0909 	adcs.w	r9, r9, r9
    fd82:	eb4a 0a0a 	adc.w	sl, sl, sl
    fd86:	46ce      	mov	lr, r9
    fd88:	fbe4 8904 	umlal	r8, r9, r4, r4
    fd8c:	45ce      	cmp	lr, r9
    fd8e:	bf88      	it	hi
    fd90:	f14a 0a00 	adchi.w	sl, sl, #0
    fd94:	eb18 080b 	adds.w	r8, r8, fp
    fd98:	eb59 090c 	adcs.w	r9, r9, ip
    fd9c:	f14a 0a00 	adc.w	sl, sl, #0
    fda0:	f840 8b04 	str.w	r8, [r0], #4
    fda4:	f04f 0c00 	mov.w	ip, #0
    fda8:	fba2 8b07 	umull	r8, fp, r2, r7
    fdac:	46de      	mov	lr, fp
    fdae:	fbe3 8b06 	umlal	r8, fp, r3, r6
    fdb2:	45de      	cmp	lr, fp
    fdb4:	bf88      	it	hi
    fdb6:	f14c 0c00 	adchi.w	ip, ip, #0
    fdba:	46de      	mov	lr, fp
    fdbc:	fbe4 8b05 	umlal	r8, fp, r4, r5
    fdc0:	45de      	cmp	lr, fp
    fdc2:	bf88      	it	hi
    fdc4:	f14c 0c00 	adchi.w	ip, ip, #0
    fdc8:	eb18 0808 	adds.w	r8, r8, r8
    fdcc:	eb5b 0b0b 	adcs.w	fp, fp, fp
    fdd0:	eb4c 0c0c 	adc.w	ip, ip, ip
    fdd4:	eb18 0809 	adds.w	r8, r8, r9
    fdd8:	eb5b 0b0a 	adcs.w	fp, fp, sl
    fddc:	f14c 0c00 	adc.w	ip, ip, #0
    fde0:	f840 8b04 	str.w	r8, [r0], #4
    fde4:	c904      	ldmia	r1!, {r2}
    fde6:	f04f 0a00 	mov.w	sl, #0
    fdea:	fba3 8907 	umull	r8, r9, r3, r7
    fdee:	46ce      	mov	lr, r9
    fdf0:	fbe4 8906 	umlal	r8, r9, r4, r6
    fdf4:	45ce      	cmp	lr, r9
    fdf6:	bf88      	it	hi
    fdf8:	f14a 0a00 	adchi.w	sl, sl, #0
    fdfc:	f8d0 e000 	ldr.w	lr, [r0]
    fe00:	eb18 080e 	adds.w	r8, r8, lr
    fe04:	f159 0900 	adcs.w	r9, r9, #0
    fe08:	f14a 0a00 	adc.w	sl, sl, #0
    fe0c:	eb18 0808 	adds.w	r8, r8, r8
    fe10:	eb59 0909 	adcs.w	r9, r9, r9
    fe14:	eb4a 0a0a 	adc.w	sl, sl, sl
    fe18:	46ce      	mov	lr, r9
    fe1a:	fbe5 8905 	umlal	r8, r9, r5, r5
    fe1e:	45ce      	cmp	lr, r9
    fe20:	bf88      	it	hi
    fe22:	f14a 0a00 	adchi.w	sl, sl, #0
    fe26:	eb18 080b 	adds.w	r8, r8, fp
    fe2a:	eb59 090c 	adcs.w	r9, r9, ip
    fe2e:	f14a 0a00 	adc.w	sl, sl, #0
    fe32:	f840 8b04 	str.w	r8, [r0], #4
    fe36:	f04f 0c00 	mov.w	ip, #0
    fe3a:	fba3 8b02 	umull	r8, fp, r3, r2
    fe3e:	46de      	mov	lr, fp
    fe40:	fbe4 8b07 	umlal	r8, fp, r4, r7
    fe44:	45de      	cmp	lr, fp
    fe46:	bf88      	it	hi
    fe48:	f14c 0c00 	adchi.w	ip, ip, #0
    fe4c:	46de      	mov	lr, fp
    fe4e:	fbe5 8b06 	umlal	r8, fp, r5, r6
    fe52:	45de      	cmp	lr, fp
    fe54:	bf88      	it	hi
    fe56:	f14c 0c00 	adchi.w	ip, ip, #0
    fe5a:	f8d0 e000 	ldr.w	lr, [r0]
    fe5e:	eb18 080e 	adds.w	r8, r8, lr
    fe62:	f15b 0b00 	adcs.w	fp, fp, #0
    fe66:	f14c 0c00 	adc.w	ip, ip, #0
    fe6a:	eb18 0808 	adds.w	r8, r8, r8
    fe6e:	eb5b 0b0b 	adcs.w	fp, fp, fp
    fe72:	eb4c 0c0c 	adc.w	ip, ip, ip
    fe76:	eb18 0809 	adds.w	r8, r8, r9
    fe7a:	eb5b 0b0a 	adcs.w	fp, fp, sl
    fe7e:	f14c 0c00 	adc.w	ip, ip, #0
    fe82:	f840 8b04 	str.w	r8, [r0], #4
    fe86:	c908      	ldmia	r1!, {r3}
    fe88:	f04f 0a00 	mov.w	sl, #0
    fe8c:	fba4 8902 	umull	r8, r9, r4, r2
    fe90:	46ce      	mov	lr, r9
    fe92:	fbe5 8907 	umlal	r8, r9, r5, r7
    fe96:	45ce      	cmp	lr, r9
    fe98:	bf88      	it	hi
    fe9a:	f14a 0a00 	adchi.w	sl, sl, #0
    fe9e:	f8d0 e000 	ldr.w	lr, [r0]
    fea2:	eb18 080e 	adds.w	r8, r8, lr
    fea6:	f159 0900 	adcs.w	r9, r9, #0
    feaa:	f14a 0a00 	adc.w	sl, sl, #0
    feae:	eb18 0808 	adds.w	r8, r8, r8
    feb2:	eb59 0909 	adcs.w	r9, r9, r9
    feb6:	eb4a 0a0a 	adc.w	sl, sl, sl
    feba:	46ce      	mov	lr, r9
    febc:	fbe6 8906 	umlal	r8, r9, r6, r6
    fec0:	45ce      	cmp	lr, r9
    fec2:	bf88      	it	hi
    fec4:	f14a 0a00 	adchi.w	sl, sl, #0
    fec8:	eb18 080b 	adds.w	r8, r8, fp
    fecc:	eb59 090c 	adcs.w	r9, r9, ip
    fed0:	f14a 0a00 	adc.w	sl, sl, #0
    fed4:	f840 8b04 	str.w	r8, [r0], #4
    fed8:	f04f 0c00 	mov.w	ip, #0
    fedc:	fba4 8b03 	umull	r8, fp, r4, r3
    fee0:	46de      	mov	lr, fp
    fee2:	fbe5 8b02 	umlal	r8, fp, r5, r2
    fee6:	45de      	cmp	lr, fp
    fee8:	bf88      	it	hi
    feea:	f14c 0c00 	adchi.w	ip, ip, #0
    feee:	46de      	mov	lr, fp
    fef0:	fbe6 8b07 	umlal	r8, fp, r6, r7
    fef4:	45de      	cmp	lr, fp
    fef6:	bf88      	it	hi
    fef8:	f14c 0c00 	adchi.w	ip, ip, #0
    fefc:	f8d0 e000 	ldr.w	lr, [r0]
    ff00:	eb18 080e 	adds.w	r8, r8, lr
    ff04:	f15b 0b00 	adcs.w	fp, fp, #0
    ff08:	f14c 0c00 	adc.w	ip, ip, #0
    ff0c:	eb18 0808 	adds.w	r8, r8, r8
    ff10:	eb5b 0b0b 	adcs.w	fp, fp, fp
    ff14:	eb4c 0c0c 	adc.w	ip, ip, ip
    ff18:	eb18 0809 	adds.w	r8, r8, r9
    ff1c:	eb5b 0b0a 	adcs.w	fp, fp, sl
    ff20:	f14c 0c00 	adc.w	ip, ip, #0
    ff24:	f840 8b04 	str.w	r8, [r0], #4
    ff28:	f04f 0a00 	mov.w	sl, #0
    ff2c:	fba5 8903 	umull	r8, r9, r5, r3
    ff30:	46ce      	mov	lr, r9
    ff32:	fbe6 8902 	umlal	r8, r9, r6, r2
    ff36:	45ce      	cmp	lr, r9
    ff38:	bf88      	it	hi
    ff3a:	f14a 0a00 	adchi.w	sl, sl, #0
    ff3e:	eb18 0808 	adds.w	r8, r8, r8
    ff42:	eb59 0909 	adcs.w	r9, r9, r9
    ff46:	eb4a 0a0a 	adc.w	sl, sl, sl
    ff4a:	46ce      	mov	lr, r9
    ff4c:	fbe7 8907 	umlal	r8, r9, r7, r7
    ff50:	45ce      	cmp	lr, r9
    ff52:	bf88      	it	hi
    ff54:	f14a 0a00 	adchi.w	sl, sl, #0
    ff58:	eb18 080b 	adds.w	r8, r8, fp
    ff5c:	eb59 090c 	adcs.w	r9, r9, ip
    ff60:	f14a 0a00 	adc.w	sl, sl, #0
    ff64:	f840 8b04 	str.w	r8, [r0], #4
    ff68:	f04f 0c00 	mov.w	ip, #0
    ff6c:	fba6 8b03 	umull	r8, fp, r6, r3
    ff70:	46de      	mov	lr, fp
    ff72:	fbe7 8b02 	umlal	r8, fp, r7, r2
    ff76:	45de      	cmp	lr, fp
    ff78:	bf88      	it	hi
    ff7a:	f14c 0c00 	adchi.w	ip, ip, #0
    ff7e:	eb18 0808 	adds.w	r8, r8, r8
    ff82:	eb5b 0b0b 	adcs.w	fp, fp, fp
    ff86:	eb4c 0c0c 	adc.w	ip, ip, ip
    ff8a:	eb18 0809 	adds.w	r8, r8, r9
    ff8e:	eb5b 0b0a 	adcs.w	fp, fp, sl
    ff92:	f14c 0c00 	adc.w	ip, ip, #0
    ff96:	f840 8b04 	str.w	r8, [r0], #4
    ff9a:	f04f 0800 	mov.w	r8, #0
    ff9e:	fba7 1a03 	umull	r1, sl, r7, r3
    ffa2:	1849      	adds	r1, r1, r1
    ffa4:	eb5a 0a0a 	adcs.w	sl, sl, sl
    ffa8:	f148 0800 	adc.w	r8, r8, #0
    ffac:	eb1b 0b01 	adds.w	fp, fp, r1
    ffb0:	eb5c 0c0a 	adcs.w	ip, ip, sl
    ffb4:	f148 0800 	adc.w	r8, r8, #0
    ffb8:	fba2 1a02 	umull	r1, sl, r2, r2
    ffbc:	eb1b 0b01 	adds.w	fp, fp, r1
    ffc0:	eb5c 0c0a 	adcs.w	ip, ip, sl
    ffc4:	f148 0800 	adc.w	r8, r8, #0
    ffc8:	f840 bb04 	str.w	fp, [r0], #4
    ffcc:	f04f 0b00 	mov.w	fp, #0
    ffd0:	fba2 1a03 	umull	r1, sl, r2, r3
    ffd4:	1849      	adds	r1, r1, r1
    ffd6:	eb5a 0a0a 	adcs.w	sl, sl, sl
    ffda:	f14b 0b00 	adc.w	fp, fp, #0
    ffde:	eb1c 0c01 	adds.w	ip, ip, r1
    ffe2:	eb58 080a 	adcs.w	r8, r8, sl
    ffe6:	f14b 0b00 	adc.w	fp, fp, #0
    ffea:	f840 cb04 	str.w	ip, [r0], #4
    ffee:	fba3 1a03 	umull	r1, sl, r3, r3
    fff2:	eb18 0801 	adds.w	r8, r8, r1
    fff6:	eb5b 0b0a 	adcs.w	fp, fp, sl
    fffa:	e8a0 0900 	stmia.w	r0!, {r8, fp}
    #endif
        : "+r" (r0), "+r" (r1)
        :
        : "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
    fffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10002:	bf00      	nop
   10004:	0000      	movs	r0, r0
	...

00010008 <vli_mmod_fast>:
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   10008:	b5f0      	push	{r4, r5, r6, r7, lr}
   1000a:	b089      	sub	sp, #36	; 0x24
    /* t */
    vli_set(result, product);

    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
    tmp[3] = product[11];
   1000c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   1000e:	9303      	str	r3, [sp, #12]
    tmp[4] = product[12];
   10010:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   10012:	9304      	str	r3, [sp, #16]
    tmp[5] = product[13];
   10014:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   10016:	9305      	str	r3, [sp, #20]
    tmp[6] = product[14];
   10018:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   1001a:	9306      	str	r3, [sp, #24]
        dest[i] = src[i];
   1001c:	468c      	mov	ip, r1
    tmp[7] = product[15];
   1001e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   10020:	9307      	str	r3, [sp, #28]
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   10022:	460e      	mov	r6, r1
   10024:	4604      	mov	r4, r0
        dest[i] = src[i];
   10026:	4605      	mov	r5, r0
   10028:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1002c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1002e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    tmp[0] = tmp[1] = tmp[2] = 0;
   10032:	ed9f 7b65 	vldr	d7, [pc, #404]	; 101c8 <vli_mmod_fast+0x1c0>
        dest[i] = src[i];
   10036:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    tmp[0] = tmp[1] = tmp[2] = 0;
   1003a:	2700      	movs	r7, #0
    carry = vli_add(tmp, tmp, tmp);
   1003c:	466a      	mov	r2, sp
   1003e:	4669      	mov	r1, sp
   10040:	4668      	mov	r0, sp
    tmp[0] = tmp[1] = tmp[2] = 0;
   10042:	ed8d 7b00 	vstr	d7, [sp]
   10046:	9702      	str	r7, [sp, #8]
    carry = vli_add(tmp, tmp, tmp);
   10048:	f7ff fabe 	bl	f5c8 <vli_add>
    carry += vli_add(result, result, tmp);
   1004c:	466a      	mov	r2, sp
    carry = vli_add(tmp, tmp, tmp);
   1004e:	4605      	mov	r5, r0
    carry += vli_add(result, result, tmp);
   10050:	4621      	mov	r1, r4
   10052:	4620      	mov	r0, r4
   10054:	f7ff fab8 	bl	f5c8 <vli_add>

    /* s2 */
    tmp[3] = product[12];
   10058:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1005a:	9303      	str	r3, [sp, #12]
    tmp[4] = product[13];
   1005c:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1005e:	9304      	str	r3, [sp, #16]
    tmp[5] = product[14];
   10060:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   10062:	9305      	str	r3, [sp, #20]
    carry += vli_add(result, result, tmp);
   10064:	4405      	add	r5, r0
    tmp[6] = product[15];
   10066:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10068:	9306      	str	r3, [sp, #24]
    tmp[7] = 0;
    carry += vli_add(tmp, tmp, tmp);
   1006a:	466a      	mov	r2, sp
   1006c:	4669      	mov	r1, sp
   1006e:	4668      	mov	r0, sp
    tmp[7] = 0;
   10070:	9707      	str	r7, [sp, #28]
    carry += vli_add(tmp, tmp, tmp);
   10072:	f7ff faa9 	bl	f5c8 <vli_add>
    carry += vli_add(result, result, tmp);
   10076:	466a      	mov	r2, sp
    carry += vli_add(tmp, tmp, tmp);
   10078:	4405      	add	r5, r0
    carry += vli_add(result, result, tmp);
   1007a:	4621      	mov	r1, r4
   1007c:	4620      	mov	r0, r4
   1007e:	f7ff faa3 	bl	f5c8 <vli_add>

    /* s3 */
    tmp[0] = product[8];
   10082:	6a33      	ldr	r3, [r6, #32]
   10084:	9300      	str	r3, [sp, #0]
    tmp[1] = product[9];
   10086:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10088:	9301      	str	r3, [sp, #4]
    tmp[2] = product[10];
   1008a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1008c:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[14];
   1008e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   10090:	9306      	str	r3, [sp, #24]
    carry += vli_add(result, result, tmp);
   10092:	4405      	add	r5, r0
    tmp[7] = product[15];
   10094:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10096:	9307      	str	r3, [sp, #28]
    carry += vli_add(result, result, tmp);
   10098:	466a      	mov	r2, sp
   1009a:	4621      	mov	r1, r4
   1009c:	4620      	mov	r0, r4
    tmp[3] = tmp[4] = tmp[5] = 0;
   1009e:	ed8d 7b04 	vstr	d7, [sp, #16]
   100a2:	9703      	str	r7, [sp, #12]
    carry += vli_add(result, result, tmp);
   100a4:	f7ff fa90 	bl	f5c8 <vli_add>
   100a8:	6b73      	ldr	r3, [r6, #52]	; 0x34

    /* s4 */
    tmp[0] = product[9];
   100aa:	9303      	str	r3, [sp, #12]
   100ac:	9306      	str	r3, [sp, #24]
   100ae:	6a33      	ldr	r3, [r6, #32]
   100b0:	9307      	str	r3, [sp, #28]
   100b2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   100b4:	9301      	str	r3, [sp, #4]
   100b6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   100b8:	9302      	str	r3, [sp, #8]
   100ba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   100bc:	9304      	str	r3, [sp, #16]
   100be:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   100c0:	9305      	str	r3, [sp, #20]
    carry += vli_add(result, result, tmp);
   100c2:	4405      	add	r5, r0
    tmp[0] = product[9];
   100c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
   100c6:	9300      	str	r3, [sp, #0]
    tmp[3] = product[13];
    tmp[4] = product[14];
    tmp[5] = product[15];
    tmp[6] = product[13];
    tmp[7] = product[8];
    carry += vli_add(result, result, tmp);
   100c8:	466a      	mov	r2, sp
   100ca:	4621      	mov	r1, r4
   100cc:	4620      	mov	r0, r4
   100ce:	f7ff fa7b 	bl	f5c8 <vli_add>

    /* d1 */
    tmp[0] = product[11];
   100d2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   100d4:	9300      	str	r3, [sp, #0]
    tmp[1] = product[12];
   100d6:	6b33      	ldr	r3, [r6, #48]	; 0x30
   100d8:	9301      	str	r3, [sp, #4]
    tmp[2] = product[13];
   100da:	6b73      	ldr	r3, [r6, #52]	; 0x34
   100dc:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[8];
   100de:	6a33      	ldr	r3, [r6, #32]
   100e0:	9306      	str	r3, [sp, #24]
    carry += vli_add(result, result, tmp);
   100e2:	4405      	add	r5, r0
    tmp[7] = product[10];
   100e4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   100e6:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   100e8:	466a      	mov	r2, sp
   100ea:	4621      	mov	r1, r4
   100ec:	4620      	mov	r0, r4
    tmp[3] = tmp[4] = tmp[5] = 0;
   100ee:	ed8d 7b04 	vstr	d7, [sp, #16]
   100f2:	9703      	str	r7, [sp, #12]
    carry -= vli_sub(result, result, tmp);
   100f4:	f7ff faa8 	bl	f648 <vli_sub>

    /* d2 */
    tmp[0] = product[12];
   100f8:	6b33      	ldr	r3, [r6, #48]	; 0x30
   100fa:	9300      	str	r3, [sp, #0]
    tmp[1] = product[13];
   100fc:	6b73      	ldr	r3, [r6, #52]	; 0x34
   100fe:	9301      	str	r3, [sp, #4]
    tmp[2] = product[14];
   10100:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   10102:	9302      	str	r3, [sp, #8]
    tmp[3] = product[15];
   10104:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10106:	9303      	str	r3, [sp, #12]
    tmp[4] = tmp[5] = 0;
    tmp[6] = product[9];
   10108:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1010a:	9306      	str	r3, [sp, #24]
    carry -= vli_sub(result, result, tmp);
   1010c:	1a2d      	subs	r5, r5, r0
    tmp[7] = product[11];
   1010e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   10110:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   10112:	466a      	mov	r2, sp
   10114:	4621      	mov	r1, r4
   10116:	4620      	mov	r0, r4
    tmp[4] = tmp[5] = 0;
   10118:	ed8d 7b04 	vstr	d7, [sp, #16]
    carry -= vli_sub(result, result, tmp);
   1011c:	f7ff fa94 	bl	f648 <vli_sub>

    /* d3 */
    tmp[0] = product[13];
   10120:	6b73      	ldr	r3, [r6, #52]	; 0x34
   10122:	9300      	str	r3, [sp, #0]
    tmp[1] = product[14];
   10124:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   10126:	9301      	str	r3, [sp, #4]
    tmp[2] = product[15];
   10128:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1012a:	9302      	str	r3, [sp, #8]
    tmp[3] = product[8];
   1012c:	6a33      	ldr	r3, [r6, #32]
   1012e:	9303      	str	r3, [sp, #12]
    tmp[4] = product[9];
   10130:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10132:	9304      	str	r3, [sp, #16]
    tmp[5] = product[10];
   10134:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   10136:	9305      	str	r3, [sp, #20]
    carry -= vli_sub(result, result, tmp);
   10138:	1a2d      	subs	r5, r5, r0
    tmp[6] = 0;
    tmp[7] = product[12];
   1013a:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1013c:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   1013e:	466a      	mov	r2, sp
   10140:	4621      	mov	r1, r4
   10142:	4620      	mov	r0, r4
    tmp[6] = 0;
   10144:	9706      	str	r7, [sp, #24]
    carry -= vli_sub(result, result, tmp);
   10146:	f7ff fa7f 	bl	f648 <vli_sub>
    tmp[2] = 0;
    tmp[3] = product[9];
    tmp[4] = product[10];
    tmp[5] = product[11];
    tmp[6] = 0;
    tmp[7] = product[13];
   1014a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1014c:	9307      	str	r3, [sp, #28]
    tmp[0] = product[14];
   1014e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   10150:	9300      	str	r3, [sp, #0]
    tmp[1] = product[15];
   10152:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   10154:	9301      	str	r3, [sp, #4]
    tmp[3] = product[9];
   10156:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10158:	9303      	str	r3, [sp, #12]
    tmp[4] = product[10];
   1015a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1015c:	9304      	str	r3, [sp, #16]
    carry -= vli_sub(result, result, tmp);
   1015e:	1a2d      	subs	r5, r5, r0
    tmp[5] = product[11];
   10160:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    tmp[2] = 0;
   10162:	9702      	str	r7, [sp, #8]
    carry -= vli_sub(result, result, tmp);
   10164:	466a      	mov	r2, sp
   10166:	4621      	mov	r1, r4
   10168:	4620      	mov	r0, r4
    tmp[6] = 0;
   1016a:	9706      	str	r7, [sp, #24]
    tmp[5] = product[11];
   1016c:	9305      	str	r3, [sp, #20]
    carry -= vli_sub(result, result, tmp);
   1016e:	f7ff fa6b 	bl	f648 <vli_sub>

    if (carry < 0) {
   10172:	1a2d      	subs	r5, r5, r0
        do {
            carry += vli_add(result, result, curve_p);
   10174:	4e16      	ldr	r6, [pc, #88]	; (101d0 <vli_mmod_fast+0x1c8>)
    if (carry < 0) {
   10176:	d41d      	bmi.n	101b4 <vli_mmod_fast+0x1ac>
        } while (carry < 0);
    } else {
        while (carry || vli_cmp(curve_p, result) != 1) {
   10178:	b9ad      	cbnz	r5, 101a6 <vli_mmod_fast+0x19e>
        if (left[i] > right[i]) {
   1017a:	69e3      	ldr	r3, [r4, #28]
   1017c:	3301      	adds	r3, #1
   1017e:	d120      	bne.n	101c2 <vli_mmod_fast+0x1ba>
   10180:	69a3      	ldr	r3, [r4, #24]
   10182:	b1f3      	cbz	r3, 101c2 <vli_mmod_fast+0x1ba>
        } else if (left[i] < right[i]) {
   10184:	2b01      	cmp	r3, #1
   10186:	d10e      	bne.n	101a6 <vli_mmod_fast+0x19e>
   10188:	6963      	ldr	r3, [r4, #20]
   1018a:	b963      	cbnz	r3, 101a6 <vli_mmod_fast+0x19e>
   1018c:	6923      	ldr	r3, [r4, #16]
   1018e:	b953      	cbnz	r3, 101a6 <vli_mmod_fast+0x19e>
   10190:	68e3      	ldr	r3, [r4, #12]
   10192:	b943      	cbnz	r3, 101a6 <vli_mmod_fast+0x19e>
        if (left[i] > right[i]) {
   10194:	68a3      	ldr	r3, [r4, #8]
   10196:	3301      	adds	r3, #1
   10198:	d113      	bne.n	101c2 <vli_mmod_fast+0x1ba>
   1019a:	6863      	ldr	r3, [r4, #4]
   1019c:	3301      	adds	r3, #1
   1019e:	d110      	bne.n	101c2 <vli_mmod_fast+0x1ba>
   101a0:	6823      	ldr	r3, [r4, #0]
   101a2:	3301      	adds	r3, #1
   101a4:	d10d      	bne.n	101c2 <vli_mmod_fast+0x1ba>
            carry -= vli_sub(result, result, curve_p);
   101a6:	4632      	mov	r2, r6
   101a8:	4621      	mov	r1, r4
   101aa:	4620      	mov	r0, r4
   101ac:	f7ff fa4c 	bl	f648 <vli_sub>
   101b0:	1a2d      	subs	r5, r5, r0
   101b2:	e7e1      	b.n	10178 <vli_mmod_fast+0x170>
            carry += vli_add(result, result, curve_p);
   101b4:	4632      	mov	r2, r6
   101b6:	4621      	mov	r1, r4
   101b8:	4620      	mov	r0, r4
   101ba:	f7ff fa05 	bl	f5c8 <vli_add>
        } while (carry < 0);
   101be:	182d      	adds	r5, r5, r0
   101c0:	d4f8      	bmi.n	101b4 <vli_mmod_fast+0x1ac>
        }
    }
}
   101c2:	b009      	add	sp, #36	; 0x24
   101c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101c6:	bf00      	nop
	...
   101d0:	00026450 	.word	0x00026450

000101d4 <vli_modInv.part.0>:
#define EVEN(vli) (!(vli[0] & 1))
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide"
   https://labs.oracle.com/techrep/2001/smli_tr-2001-95.pdf */
#if !defined(asm_modInv) || !asm_modInv
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   101d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101d8:	ed2d 8b02 	vpush	{d8}
   101dc:	b0a5      	sub	sp, #148	; 0x94
        dest[i] = src[i];
   101de:	460c      	mov	r4, r1
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   101e0:	9003      	str	r0, [sp, #12]
        dest[i] = src[i];
   101e2:	4616      	mov	r6, r2
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   101e4:	ee08 2a10 	vmov	s16, r2
        dest[i] = src[i];
   101e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   101ea:	af04      	add	r7, sp, #16
   101ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   101ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   101f2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   101f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   101f8:	ad0c      	add	r5, sp, #48	; 0x30
   101fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   101fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
        vli[i] = 0;
   10200:	f04f 0c00 	mov.w	ip, #0
        dest[i] = src[i];
   10204:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    }

    vli_set(a, input);
    vli_set(b, mod);
    vli_clear(u);
    u[0] = 1;
   10208:	f04f 0e01 	mov.w	lr, #1
        vli[i] = 0;
   1020c:	4661      	mov	r1, ip
   1020e:	2220      	movs	r2, #32
   10210:	a81c      	add	r0, sp, #112	; 0x70
    u[0] = 1;
   10212:	e9cd ec14 	strd	lr, ip, [sp, #80]	; 0x50
        vli[i] = 0;
   10216:	e9cd cc16 	strd	ip, ip, [sp, #88]	; 0x58
   1021a:	e9cd cc18 	strd	ip, ip, [sp, #96]	; 0x60
   1021e:	e9cd cc1a 	strd	ip, ip, [sp, #104]	; 0x68
   10222:	f013 f88b 	bl	2333c <memset>
        if (left[i] > right[i]) {
   10226:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1022a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    vli_clear(v);
    while ((cmpResult = vli_cmp(a, b)) != 0) {
        carry = 0;
        if (EVEN(a)) {
   1022e:	9c04      	ldr	r4, [sp, #16]
        if (left[i] > right[i]) {
   10230:	45da      	cmp	sl, fp
   10232:	d844      	bhi.n	102be <vli_modInv.part.0+0xea>
        } else if (left[i] < right[i]) {
   10234:	f0c0 80e6 	bcc.w	10404 <vli_modInv.part.0+0x230>
        if (left[i] > right[i]) {
   10238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1023a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1023c:	42b3      	cmp	r3, r6
   1023e:	f200 8187 	bhi.w	10550 <vli_modInv.part.0+0x37c>
        } else if (left[i] < right[i]) {
   10242:	f0c0 81ef 	bcc.w	10624 <vli_modInv.part.0+0x450>
        if (left[i] > right[i]) {
   10246:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10248:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1024c:	4562      	cmp	r2, ip
   1024e:	f200 81fa 	bhi.w	10646 <vli_modInv.part.0+0x472>
        } else if (left[i] < right[i]) {
   10252:	f0c0 8273 	bcc.w	1073c <vli_modInv.part.0+0x568>
        if (left[i] > right[i]) {
   10256:	9908      	ldr	r1, [sp, #32]
   10258:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1025c:	4571      	cmp	r1, lr
   1025e:	f200 8276 	bhi.w	1074e <vli_modInv.part.0+0x57a>
        } else if (left[i] < right[i]) {
   10262:	f0c0 827d 	bcc.w	10760 <vli_modInv.part.0+0x58c>
        if (left[i] > right[i]) {
   10266:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   10268:	9807      	ldr	r0, [sp, #28]
   1026a:	9501      	str	r5, [sp, #4]
   1026c:	42a8      	cmp	r0, r5
   1026e:	f200 8280 	bhi.w	10772 <vli_modInv.part.0+0x59e>
        } else if (left[i] < right[i]) {
   10272:	f0c0 8287 	bcc.w	10784 <vli_modInv.part.0+0x5b0>
        if (left[i] > right[i]) {
   10276:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10278:	9d06      	ldr	r5, [sp, #24]
   1027a:	9702      	str	r7, [sp, #8]
   1027c:	42bd      	cmp	r5, r7
   1027e:	f200 828b 	bhi.w	10798 <vli_modInv.part.0+0x5c4>
        } else if (left[i] < right[i]) {
   10282:	f0c0 8297 	bcc.w	107b4 <vli_modInv.part.0+0x5e0>
        if (left[i] > right[i]) {
   10286:	9f05      	ldr	r7, [sp, #20]
   10288:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   1028c:	454f      	cmp	r7, r9
   1028e:	f200 829c 	bhi.w	107ca <vli_modInv.part.0+0x5f6>
        } else if (left[i] < right[i]) {
   10292:	f0c0 82a6 	bcc.w	107e2 <vli_modInv.part.0+0x60e>
        if (left[i] > right[i]) {
   10296:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1029a:	4544      	cmp	r4, r8
   1029c:	f200 82ac 	bhi.w	107f8 <vli_modInv.part.0+0x624>
        } else if (left[i] < right[i]) {
   102a0:	f0c0 82b3 	bcc.w	1080a <vli_modInv.part.0+0x636>
        dest[i] = src[i];
   102a4:	ac14      	add	r4, sp, #80	; 0x50
   102a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   102a8:	9d03      	ldr	r5, [sp, #12]
   102aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   102ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   102b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
            }
        }
    }
    vli_set(result, u);
}
   102b4:	b025      	add	sp, #148	; 0x94
   102b6:	ecbd 8b02 	vpop	{d8}
   102ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (EVEN(a)) {
   102be:	07e5      	lsls	r5, r4, #31
   102c0:	f140 81d7 	bpl.w	10672 <vli_modInv.part.0+0x49e>
        } else if (EVEN(b)) {
   102c4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   102c8:	f018 0f01 	tst.w	r8, #1
   102cc:	f000 82a6 	beq.w	1081c <vli_modInv.part.0+0x648>
            vli_sub(a, a, b);
   102d0:	a904      	add	r1, sp, #16
   102d2:	aa0c      	add	r2, sp, #48	; 0x30
   102d4:	4608      	mov	r0, r1
   102d6:	f7ff f9b7 	bl	f648 <vli_sub>
        uECC_word_t temp = *vli;
   102da:	e9dd 0509 	ldrd	r0, r5, [sp, #36]	; 0x24
   102de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   102e0:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
        *vli = (temp >> 1) | carry;
   102e4:	0873      	lsrs	r3, r6, #1
   102e6:	086f      	lsrs	r7, r5, #1
   102e8:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   102ec:	930b      	str	r3, [sp, #44]	; 0x2c
   102ee:	0846      	lsrs	r6, r0, #1
        uECC_word_t temp = *vli;
   102f0:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
        *vli = (temp >> 1) | carry;
   102f4:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   102f8:	084d      	lsrs	r5, r1, #1
   102fa:	ea45 75c0 	orr.w	r5, r5, r0, lsl #31
   102fe:	0850      	lsrs	r0, r2, #1
   10300:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   10304:	0861      	lsrs	r1, r4, #1
   10306:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   1030a:	085a      	lsrs	r2, r3, #1
   1030c:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
   10310:	9205      	str	r2, [sp, #20]
   10312:	9a04      	ldr	r2, [sp, #16]
   10314:	970a      	str	r7, [sp, #40]	; 0x28
        carry = temp << (uECC_WORD_BITS - 1);
   10316:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   10318:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1031c:	9304      	str	r3, [sp, #16]
        if (left[i] > right[i]) {
   1031e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10320:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   10322:	9609      	str	r6, [sp, #36]	; 0x24
        if (left[i] > right[i]) {
   10324:	429a      	cmp	r2, r3
        *vli = (temp >> 1) | carry;
   10326:	9508      	str	r5, [sp, #32]
   10328:	9007      	str	r0, [sp, #28]
   1032a:	9106      	str	r1, [sp, #24]
        if (left[i] > right[i]) {
   1032c:	d82a      	bhi.n	10384 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   1032e:	f0c0 8183 	bcc.w	10638 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   10332:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   10334:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10336:	429a      	cmp	r2, r3
   10338:	d824      	bhi.n	10384 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   1033a:	f0c0 817d 	bcc.w	10638 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   1033e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   10340:	9b21      	ldr	r3, [sp, #132]	; 0x84
   10342:	429a      	cmp	r2, r3
   10344:	d81e      	bhi.n	10384 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   10346:	f0c0 8177 	bcc.w	10638 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   1034a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1034c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1034e:	429a      	cmp	r2, r3
   10350:	d818      	bhi.n	10384 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   10352:	f0c0 8171 	bcc.w	10638 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   10356:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10358:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1035a:	429a      	cmp	r2, r3
   1035c:	d812      	bhi.n	10384 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   1035e:	f0c0 816b 	bcc.w	10638 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   10362:	9a16      	ldr	r2, [sp, #88]	; 0x58
   10364:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10366:	429a      	cmp	r2, r3
   10368:	d80c      	bhi.n	10384 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   1036a:	f0c0 8165 	bcc.w	10638 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   1036e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10370:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10372:	429a      	cmp	r2, r3
   10374:	d806      	bhi.n	10384 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   10376:	f0c0 815f 	bcc.w	10638 <vli_modInv.part.0+0x464>
   1037a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1037c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1037e:	429a      	cmp	r2, r3
   10380:	f0c0 815a 	bcc.w	10638 <vli_modInv.part.0+0x464>
            vli_sub(u, u, v);
   10384:	a914      	add	r1, sp, #80	; 0x50
   10386:	aa1c      	add	r2, sp, #112	; 0x70
   10388:	4608      	mov	r0, r1
   1038a:	f7ff f95d 	bl	f648 <vli_sub>
            if (!EVEN(u)) {
   1038e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10390:	f013 0001 	ands.w	r0, r3, #1
   10394:	d12e      	bne.n	103f4 <vli_modInv.part.0+0x220>
        uECC_word_t temp = *vli;
   10396:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   1039a:	e9dd 5417 	ldrd	r5, r4, [sp, #92]	; 0x5c
        *vli = (temp >> 1) | carry;
   1039e:	085b      	lsrs	r3, r3, #1
   103a0:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
   103a4:	087f      	lsrs	r7, r7, #1
        uECC_word_t temp = *vli;
   103a6:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
        *vli = (temp >> 1) | carry;
   103aa:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   103ae:	0876      	lsrs	r6, r6, #1
   103b0:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   103b4:	086d      	lsrs	r5, r5, #1
   103b6:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
   103ba:	0864      	lsrs	r4, r4, #1
   103bc:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
   103c0:	9314      	str	r3, [sp, #80]	; 0x50
   103c2:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   103c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   103c6:	9715      	str	r7, [sp, #84]	; 0x54
   103c8:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   103cc:	0852      	lsrs	r2, r2, #1
   103ce:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   103d2:	085b      	lsrs	r3, r3, #1
   103d4:	9616      	str	r6, [sp, #88]	; 0x58
   103d6:	9517      	str	r5, [sp, #92]	; 0x5c
   103d8:	9418      	str	r4, [sp, #96]	; 0x60
   103da:	9119      	str	r1, [sp, #100]	; 0x64
   103dc:	921a      	str	r2, [sp, #104]	; 0x68
   103de:	931b      	str	r3, [sp, #108]	; 0x6c
            if (carry) {
   103e0:	b110      	cbz	r0, 103e8 <vli_modInv.part.0+0x214>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   103e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   103e6:	931b      	str	r3, [sp, #108]	; 0x6c
        if (left[i] > right[i]) {
   103e8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   103ec:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   103f0:	9c04      	ldr	r4, [sp, #16]
   103f2:	e71d      	b.n	10230 <vli_modInv.part.0+0x5c>
                carry = vli_add(u, u, mod);
   103f4:	a914      	add	r1, sp, #80	; 0x50
   103f6:	ee18 2a10 	vmov	r2, s16
   103fa:	4608      	mov	r0, r1
   103fc:	f7ff f8e4 	bl	f5c8 <vli_add>
        uECC_word_t temp = *vli;
   10400:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10402:	e7c8      	b.n	10396 <vli_modInv.part.0+0x1c2>
        if (EVEN(a)) {
   10404:	07e3      	lsls	r3, r4, #31
   10406:	f140 8134 	bpl.w	10672 <vli_modInv.part.0+0x49e>
        } else if (EVEN(b)) {
   1040a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1040e:	f018 0f01 	tst.w	r8, #1
   10412:	f000 8203 	beq.w	1081c <vli_modInv.part.0+0x648>
            vli_sub(b, b, a);
   10416:	a90c      	add	r1, sp, #48	; 0x30
   10418:	aa04      	add	r2, sp, #16
   1041a:	4608      	mov	r0, r1
   1041c:	f7ff f914 	bl	f648 <vli_sub>
        uECC_word_t temp = *vli;
   10420:	e9dd 4511 	ldrd	r4, r5, [sp, #68]	; 0x44
   10424:	e9dd 0e0f 	ldrd	r0, lr, [sp, #60]	; 0x3c
   10428:	e9dd 370d 	ldrd	r3, r7, [sp, #52]	; 0x34
   1042c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        *vli = (temp >> 1) | carry;
   1042e:	0869      	lsrs	r1, r5, #1
   10430:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   10434:	0866      	lsrs	r6, r4, #1
   10436:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   1043a:	9112      	str	r1, [sp, #72]	; 0x48
   1043c:	ea4f 055e 	mov.w	r5, lr, lsr #1
   10440:	0879      	lsrs	r1, r7, #1
   10442:	0852      	lsrs	r2, r2, #1
   10444:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
   10448:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   1044c:	0844      	lsrs	r4, r0, #1
   1044e:	980c      	ldr	r0, [sp, #48]	; 0x30
   10450:	9213      	str	r2, [sp, #76]	; 0x4c
   10452:	085a      	lsrs	r2, r3, #1
        carry = temp << (uECC_WORD_BITS - 1);
   10454:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   10456:	ea44 74ce 	orr.w	r4, r4, lr, lsl #31
   1045a:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
   1045e:	940f      	str	r4, [sp, #60]	; 0x3c
   10460:	930c      	str	r3, [sp, #48]	; 0x30
        if (left[i] > right[i]) {
   10462:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   10464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   10466:	9611      	str	r6, [sp, #68]	; 0x44
   10468:	ea42 72c7 	orr.w	r2, r2, r7, lsl #31
        if (left[i] > right[i]) {
   1046c:	429c      	cmp	r4, r3
        *vli = (temp >> 1) | carry;
   1046e:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
   10472:	9510      	str	r5, [sp, #64]	; 0x40
        if (left[i] > right[i]) {
   10474:	d822      	bhi.n	104bc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   10476:	d364      	bcc.n	10542 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   10478:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1047a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1047c:	429a      	cmp	r2, r3
   1047e:	d81d      	bhi.n	104bc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   10480:	d35f      	bcc.n	10542 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   10482:	9a21      	ldr	r2, [sp, #132]	; 0x84
   10484:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10486:	429a      	cmp	r2, r3
   10488:	d818      	bhi.n	104bc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   1048a:	d35a      	bcc.n	10542 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   1048c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1048e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10490:	429a      	cmp	r2, r3
   10492:	d813      	bhi.n	104bc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   10494:	d355      	bcc.n	10542 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   10496:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   10498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1049a:	429a      	cmp	r2, r3
   1049c:	d80e      	bhi.n	104bc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   1049e:	d350      	bcc.n	10542 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   104a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   104a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   104a4:	429a      	cmp	r2, r3
   104a6:	d809      	bhi.n	104bc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   104a8:	d34b      	bcc.n	10542 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   104aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   104ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   104ae:	429a      	cmp	r2, r3
   104b0:	d804      	bhi.n	104bc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   104b2:	d346      	bcc.n	10542 <vli_modInv.part.0+0x36e>
   104b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   104b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   104b8:	429a      	cmp	r2, r3
   104ba:	d342      	bcc.n	10542 <vli_modInv.part.0+0x36e>
            vli_sub(v, v, u);
   104bc:	a91c      	add	r1, sp, #112	; 0x70
   104be:	aa14      	add	r2, sp, #80	; 0x50
   104c0:	4608      	mov	r0, r1
   104c2:	f7ff f8c1 	bl	f648 <vli_sub>
            if (!EVEN(v)) {
   104c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   104c8:	f013 0001 	ands.w	r0, r3, #1
   104cc:	d131      	bne.n	10532 <vli_modInv.part.0+0x35e>
        uECC_word_t temp = *vli;
   104ce:	e9dd c71d 	ldrd	ip, r7, [sp, #116]	; 0x74
   104d2:	e9dd 641f 	ldrd	r6, r4, [sp, #124]	; 0x7c
        *vli = (temp >> 1) | carry;
   104d6:	085b      	lsrs	r3, r3, #1
   104d8:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   104dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   104e0:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
        *vli = (temp >> 1) | carry;
   104e4:	931c      	str	r3, [sp, #112]	; 0x70
   104e6:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   104ea:	087f      	lsrs	r7, r7, #1
   104ec:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   104f0:	0876      	lsrs	r6, r6, #1
   104f2:	ea46 76c4 	orr.w	r6, r6, r4, lsl #31
   104f6:	0864      	lsrs	r4, r4, #1
        uECC_word_t temp = *vli;
   104f8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   104fa:	931d      	str	r3, [sp, #116]	; 0x74
   104fc:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
   10500:	0849      	lsrs	r1, r1, #1
   10502:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   10506:	0852      	lsrs	r2, r2, #1
   10508:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1050c:	086d      	lsrs	r5, r5, #1
   1050e:	971e      	str	r7, [sp, #120]	; 0x78
   10510:	961f      	str	r6, [sp, #124]	; 0x7c
   10512:	9420      	str	r4, [sp, #128]	; 0x80
   10514:	9121      	str	r1, [sp, #132]	; 0x84
   10516:	9222      	str	r2, [sp, #136]	; 0x88
   10518:	9523      	str	r5, [sp, #140]	; 0x8c
            if (carry) {
   1051a:	2800      	cmp	r0, #0
   1051c:	f43f af64 	beq.w	103e8 <vli_modInv.part.0+0x214>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   10520:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
        if (left[i] > right[i]) {
   10524:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   10528:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   1052c:	9c04      	ldr	r4, [sp, #16]
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1052e:	9523      	str	r5, [sp, #140]	; 0x8c
   10530:	e67e      	b.n	10230 <vli_modInv.part.0+0x5c>
                carry = vli_add(v, v, mod);
   10532:	a91c      	add	r1, sp, #112	; 0x70
   10534:	ee18 2a10 	vmov	r2, s16
   10538:	4608      	mov	r0, r1
   1053a:	f7ff f845 	bl	f5c8 <vli_add>
        uECC_word_t temp = *vli;
   1053e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   10540:	e7c5      	b.n	104ce <vli_modInv.part.0+0x2fa>
                vli_add(v, v, mod);
   10542:	a91c      	add	r1, sp, #112	; 0x70
   10544:	ee18 2a10 	vmov	r2, s16
   10548:	4608      	mov	r0, r1
   1054a:	f7ff f83d 	bl	f5c8 <vli_add>
   1054e:	e7b5      	b.n	104bc <vli_modInv.part.0+0x2e8>
        if (EVEN(a)) {
   10550:	07e2      	lsls	r2, r4, #31
   10552:	f140 8166 	bpl.w	10822 <vli_modInv.part.0+0x64e>
        } else if (EVEN(b)) {
   10556:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1055a:	f018 0f01 	tst.w	r8, #1
   1055e:	f47f aeb7 	bne.w	102d0 <vli_modInv.part.0+0xfc>
   10562:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   10566:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1056a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1056c:	9301      	str	r3, [sp, #4]
   1056e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10570:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   10574:	9302      	str	r3, [sp, #8]
   10576:	461a      	mov	r2, r3
        *vli = (temp >> 1) | carry;
   10578:	ea4f 0858 	mov.w	r8, r8, lsr #1
   1057c:	ea48 73c9 	orr.w	r3, r8, r9, lsl #31
   10580:	ea4f 0959 	mov.w	r9, r9, lsr #1
   10584:	930c      	str	r3, [sp, #48]	; 0x30
   10586:	ea49 73c2 	orr.w	r3, r9, r2, lsl #31
   1058a:	930d      	str	r3, [sp, #52]	; 0x34
   1058c:	0853      	lsrs	r3, r2, #1
   1058e:	9a01      	ldr	r2, [sp, #4]
   10590:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   10594:	930e      	str	r3, [sp, #56]	; 0x38
   10596:	0853      	lsrs	r3, r2, #1
   10598:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   1059c:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
   105a0:	930f      	str	r3, [sp, #60]	; 0x3c
   105a2:	ea4e 73cc 	orr.w	r3, lr, ip, lsl #31
   105a6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   105aa:	9310      	str	r3, [sp, #64]	; 0x40
   105ac:	ea4c 73c6 	orr.w	r3, ip, r6, lsl #31
   105b0:	9311      	str	r3, [sp, #68]	; 0x44
            if (!EVEN(v)) {
   105b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        *vli = (temp >> 1) | carry;
   105b4:	0876      	lsrs	r6, r6, #1
   105b6:	ea46 76cb 	orr.w	r6, r6, fp, lsl #31
   105ba:	ea4f 025b 	mov.w	r2, fp, lsr #1
            if (!EVEN(v)) {
   105be:	f013 0001 	ands.w	r0, r3, #1
        *vli = (temp >> 1) | carry;
   105c2:	9612      	str	r6, [sp, #72]	; 0x48
   105c4:	9213      	str	r2, [sp, #76]	; 0x4c
            if (!EVEN(v)) {
   105c6:	d147      	bne.n	10658 <vli_modInv.part.0+0x484>
   105c8:	4693      	mov	fp, r2
        uECC_word_t temp = *vli;
   105ca:	e9dd c71d 	ldrd	ip, r7, [sp, #116]	; 0x74
   105ce:	e9dd 651f 	ldrd	r6, r5, [sp, #124]	; 0x7c
        *vli = (temp >> 1) | carry;
   105d2:	085b      	lsrs	r3, r3, #1
   105d4:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   105d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   105dc:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
        *vli = (temp >> 1) | carry;
   105e0:	931c      	str	r3, [sp, #112]	; 0x70
   105e2:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   105e6:	087f      	lsrs	r7, r7, #1
   105e8:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   105ec:	0876      	lsrs	r6, r6, #1
   105ee:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   105f2:	086d      	lsrs	r5, r5, #1
   105f4:	ea45 75c1 	orr.w	r5, r5, r1, lsl #31
   105f8:	931d      	str	r3, [sp, #116]	; 0x74
   105fa:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   105fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   105fe:	971e      	str	r7, [sp, #120]	; 0x78
   10600:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   10604:	0852      	lsrs	r2, r2, #1
   10606:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   1060a:	085b      	lsrs	r3, r3, #1
   1060c:	961f      	str	r6, [sp, #124]	; 0x7c
   1060e:	9520      	str	r5, [sp, #128]	; 0x80
   10610:	9121      	str	r1, [sp, #132]	; 0x84
   10612:	9222      	str	r2, [sp, #136]	; 0x88
   10614:	9323      	str	r3, [sp, #140]	; 0x8c
            if (carry) {
   10616:	2800      	cmp	r0, #0
   10618:	f43f ae0a 	beq.w	10230 <vli_modInv.part.0+0x5c>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1061c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10620:	9323      	str	r3, [sp, #140]	; 0x8c
   10622:	e605      	b.n	10230 <vli_modInv.part.0+0x5c>
        if (EVEN(a)) {
   10624:	07e0      	lsls	r0, r4, #31
   10626:	f140 80fc 	bpl.w	10822 <vli_modInv.part.0+0x64e>
        } else if (EVEN(b)) {
   1062a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1062e:	f018 0f01 	tst.w	r8, #1
   10632:	f47f aef0 	bne.w	10416 <vli_modInv.part.0+0x242>
   10636:	e794      	b.n	10562 <vli_modInv.part.0+0x38e>
                vli_add(u, u, mod);
   10638:	a914      	add	r1, sp, #80	; 0x50
   1063a:	ee18 2a10 	vmov	r2, s16
   1063e:	4608      	mov	r0, r1
   10640:	f7fe ffc2 	bl	f5c8 <vli_add>
   10644:	e69e      	b.n	10384 <vli_modInv.part.0+0x1b0>
        if (EVEN(a)) {
   10646:	07e1      	lsls	r1, r4, #31
   10648:	d515      	bpl.n	10676 <vli_modInv.part.0+0x4a2>
        } else if (EVEN(b)) {
   1064a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1064e:	f018 0f01 	tst.w	r8, #1
   10652:	f47f ae3d 	bne.w	102d0 <vli_modInv.part.0+0xfc>
   10656:	e786      	b.n	10566 <vli_modInv.part.0+0x392>
                carry = vli_add(v, v, mod);
   10658:	a91c      	add	r1, sp, #112	; 0x70
   1065a:	ee18 2a10 	vmov	r2, s16
   1065e:	4608      	mov	r0, r1
   10660:	f7fe ffb2 	bl	f5c8 <vli_add>
        uECC_word_t temp = *vli;
   10664:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        if (left[i] > right[i]) {
   10666:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1066a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   1066e:	9c04      	ldr	r4, [sp, #16]
   10670:	e7ab      	b.n	105ca <vli_modInv.part.0+0x3f6>
   10672:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10676:	9908      	ldr	r1, [sp, #32]
   10678:	9807      	ldr	r0, [sp, #28]
   1067a:	9d06      	ldr	r5, [sp, #24]
   1067c:	9e05      	ldr	r6, [sp, #20]
   1067e:	4637      	mov	r7, r6
        *vli = (temp >> 1) | carry;
   10680:	0864      	lsrs	r4, r4, #1
   10682:	ea44 74c7 	orr.w	r4, r4, r7, lsl #31
   10686:	087f      	lsrs	r7, r7, #1
   10688:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   1068c:	086d      	lsrs	r5, r5, #1
   1068e:	ea45 75c0 	orr.w	r5, r5, r0, lsl #31
   10692:	0840      	lsrs	r0, r0, #1
   10694:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   10698:	0849      	lsrs	r1, r1, #1
   1069a:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   1069e:	0852      	lsrs	r2, r2, #1
   106a0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   106a4:	085b      	lsrs	r3, r3, #1
   106a6:	ea43 73ca 	orr.w	r3, r3, sl, lsl #31
   106aa:	930a      	str	r3, [sp, #40]	; 0x28
            if (!EVEN(u)) {
   106ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
        *vli = (temp >> 1) | carry;
   106ae:	9007      	str	r0, [sp, #28]
   106b0:	9209      	str	r2, [sp, #36]	; 0x24
            if (!EVEN(u)) {
   106b2:	f013 0001 	ands.w	r0, r3, #1
        *vli = (temp >> 1) | carry;
   106b6:	ea4f 025a 	mov.w	r2, sl, lsr #1
   106ba:	9705      	str	r7, [sp, #20]
   106bc:	9506      	str	r5, [sp, #24]
   106be:	9108      	str	r1, [sp, #32]
   106c0:	920b      	str	r2, [sp, #44]	; 0x2c
   106c2:	9404      	str	r4, [sp, #16]
            if (!EVEN(u)) {
   106c4:	d12d      	bne.n	10722 <vli_modInv.part.0+0x54e>
   106c6:	4692      	mov	sl, r2
        uECC_word_t temp = *vli;
   106c8:	e9dd c715 	ldrd	ip, r7, [sp, #84]	; 0x54
   106cc:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
        *vli = (temp >> 1) | carry;
   106d0:	085b      	lsrs	r3, r3, #1
   106d2:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   106d6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   106da:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
        *vli = (temp >> 1) | carry;
   106de:	9314      	str	r3, [sp, #80]	; 0x50
   106e0:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   106e4:	087f      	lsrs	r7, r7, #1
   106e6:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   106ea:	0876      	lsrs	r6, r6, #1
   106ec:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   106f0:	086d      	lsrs	r5, r5, #1
   106f2:	ea45 75c1 	orr.w	r5, r5, r1, lsl #31
   106f6:	9315      	str	r3, [sp, #84]	; 0x54
   106f8:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   106fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   106fc:	9716      	str	r7, [sp, #88]	; 0x58
   106fe:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   10702:	0852      	lsrs	r2, r2, #1
   10704:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   10708:	085b      	lsrs	r3, r3, #1
   1070a:	9617      	str	r6, [sp, #92]	; 0x5c
   1070c:	9518      	str	r5, [sp, #96]	; 0x60
   1070e:	9119      	str	r1, [sp, #100]	; 0x64
   10710:	921a      	str	r2, [sp, #104]	; 0x68
   10712:	931b      	str	r3, [sp, #108]	; 0x6c
            if (carry) {
   10714:	2800      	cmp	r0, #0
   10716:	f43f ad8b 	beq.w	10230 <vli_modInv.part.0+0x5c>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1071a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1071e:	931b      	str	r3, [sp, #108]	; 0x6c
   10720:	e586      	b.n	10230 <vli_modInv.part.0+0x5c>
                carry = vli_add(u, u, mod);
   10722:	a914      	add	r1, sp, #80	; 0x50
   10724:	ee18 2a10 	vmov	r2, s16
   10728:	4608      	mov	r0, r1
   1072a:	f7fe ff4d 	bl	f5c8 <vli_add>
        uECC_word_t temp = *vli;
   1072e:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (left[i] > right[i]) {
   10730:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   10734:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   10738:	9c04      	ldr	r4, [sp, #16]
   1073a:	e7c5      	b.n	106c8 <vli_modInv.part.0+0x4f4>
   1073c:	07e1      	lsls	r1, r4, #31
   1073e:	d59a      	bpl.n	10676 <vli_modInv.part.0+0x4a2>
        } else if (EVEN(b)) {
   10740:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   10744:	f018 0f01 	tst.w	r8, #1
   10748:	f47f ae65 	bne.w	10416 <vli_modInv.part.0+0x242>
   1074c:	e70b      	b.n	10566 <vli_modInv.part.0+0x392>
        if (EVEN(a)) {
   1074e:	07e7      	lsls	r7, r4, #31
   10750:	d592      	bpl.n	10678 <vli_modInv.part.0+0x4a4>
        } else if (EVEN(b)) {
   10752:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   10756:	f018 0f01 	tst.w	r8, #1
   1075a:	f47f adb9 	bne.w	102d0 <vli_modInv.part.0+0xfc>
   1075e:	e704      	b.n	1056a <vli_modInv.part.0+0x396>
        if (EVEN(a)) {
   10760:	07e7      	lsls	r7, r4, #31
   10762:	d589      	bpl.n	10678 <vli_modInv.part.0+0x4a4>
        } else if (EVEN(b)) {
   10764:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   10768:	f018 0f01 	tst.w	r8, #1
   1076c:	f47f ae53 	bne.w	10416 <vli_modInv.part.0+0x242>
   10770:	e6fb      	b.n	1056a <vli_modInv.part.0+0x396>
        if (EVEN(a)) {
   10772:	07e5      	lsls	r5, r4, #31
   10774:	d581      	bpl.n	1067a <vli_modInv.part.0+0x4a6>
        } else if (EVEN(b)) {
   10776:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1077a:	f018 0f01 	tst.w	r8, #1
   1077e:	f47f ada7 	bne.w	102d0 <vli_modInv.part.0+0xfc>
   10782:	e6f4      	b.n	1056e <vli_modInv.part.0+0x39a>
        if (EVEN(a)) {
   10784:	07e5      	lsls	r5, r4, #31
   10786:	f57f af78 	bpl.w	1067a <vli_modInv.part.0+0x4a6>
        } else if (EVEN(b)) {
   1078a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1078e:	f018 0f01 	tst.w	r8, #1
   10792:	f47f ae40 	bne.w	10416 <vli_modInv.part.0+0x242>
   10796:	e6ea      	b.n	1056e <vli_modInv.part.0+0x39a>
        if (EVEN(a)) {
   10798:	f014 0f01 	tst.w	r4, #1
   1079c:	f43f af6e 	beq.w	1067c <vli_modInv.part.0+0x4a8>
        } else if (EVEN(b)) {
   107a0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   107a4:	f018 0f01 	tst.w	r8, #1
   107a8:	f47f ad92 	bne.w	102d0 <vli_modInv.part.0+0xfc>
   107ac:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   107b0:	463a      	mov	r2, r7
   107b2:	e6e1      	b.n	10578 <vli_modInv.part.0+0x3a4>
        if (EVEN(a)) {
   107b4:	f014 0f01 	tst.w	r4, #1
   107b8:	f43f af60 	beq.w	1067c <vli_modInv.part.0+0x4a8>
        } else if (EVEN(b)) {
   107bc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   107c0:	f018 0f01 	tst.w	r8, #1
   107c4:	f47f ae27 	bne.w	10416 <vli_modInv.part.0+0x242>
   107c8:	e7f0      	b.n	107ac <vli_modInv.part.0+0x5d8>
        if (EVEN(a)) {
   107ca:	f014 0f01 	tst.w	r4, #1
   107ce:	f43f af57 	beq.w	10680 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   107d2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   107d6:	f018 0f01 	tst.w	r8, #1
   107da:	f47f ad79 	bne.w	102d0 <vli_modInv.part.0+0xfc>
   107de:	9a02      	ldr	r2, [sp, #8]
   107e0:	e6ca      	b.n	10578 <vli_modInv.part.0+0x3a4>
        if (EVEN(a)) {
   107e2:	f014 0f01 	tst.w	r4, #1
   107e6:	f43f af4b 	beq.w	10680 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   107ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   107ee:	f018 0f01 	tst.w	r8, #1
   107f2:	f47f ae10 	bne.w	10416 <vli_modInv.part.0+0x242>
   107f6:	e7f2      	b.n	107de <vli_modInv.part.0+0x60a>
        if (EVEN(a)) {
   107f8:	f014 0f01 	tst.w	r4, #1
   107fc:	f43f af40 	beq.w	10680 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   10800:	f018 0f01 	tst.w	r8, #1
   10804:	f47f ad64 	bne.w	102d0 <vli_modInv.part.0+0xfc>
   10808:	e7e9      	b.n	107de <vli_modInv.part.0+0x60a>
        if (EVEN(a)) {
   1080a:	f014 0f01 	tst.w	r4, #1
   1080e:	f43f af37 	beq.w	10680 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   10812:	f018 0f01 	tst.w	r8, #1
   10816:	f47f adfe 	bne.w	10416 <vli_modInv.part.0+0x242>
   1081a:	e7e0      	b.n	107de <vli_modInv.part.0+0x60a>
   1081c:	e9dd c611 	ldrd	ip, r6, [sp, #68]	; 0x44
   10820:	e6a1      	b.n	10566 <vli_modInv.part.0+0x392>
   10822:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10824:	e727      	b.n	10676 <vli_modInv.part.0+0x4a2>
   10826:	bf00      	nop

00010828 <XYcZ_add>:
   or P => P', Q => P + Q
*/
static void XYcZ_add(uECC_word_t * RESTRICT X1,
                     uECC_word_t * RESTRICT Y1,
                     uECC_word_t * RESTRICT X2,
                     uECC_word_t * RESTRICT Y2) {
   10828:	b5f0      	push	{r4, r5, r6, r7, lr}
   1082a:	4614      	mov	r4, r2
   1082c:	b099      	sub	sp, #100	; 0x64
   1082e:	4606      	mov	r6, r0
   10830:	460f      	mov	r7, r1
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10832:	4602      	mov	r2, r0
   10834:	4621      	mov	r1, r4
   10836:	4668      	mov	r0, sp
                     uECC_word_t * RESTRICT Y2) {
   10838:	461d      	mov	r5, r3
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1083a:	f7fe ff05 	bl	f648 <vli_sub>
    if (l_borrow) {
   1083e:	2800      	cmp	r0, #0
   10840:	d165      	bne.n	1090e <XYcZ_add+0xe6>
    vli_square(product, left);
   10842:	4669      	mov	r1, sp
   10844:	a808      	add	r0, sp, #32
   10846:	f7ff fa23 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   1084a:	a908      	add	r1, sp, #32
   1084c:	4668      	mov	r0, sp
   1084e:	f7ff fbdb 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10852:	466a      	mov	r2, sp
   10854:	4631      	mov	r1, r6
   10856:	a808      	add	r0, sp, #32
   10858:	f7fe ff3e 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   1085c:	a908      	add	r1, sp, #32
   1085e:	4630      	mov	r0, r6
   10860:	f7ff fbd2 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10864:	466a      	mov	r2, sp
   10866:	4621      	mov	r1, r4
   10868:	a808      	add	r0, sp, #32
   1086a:	f7fe ff35 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   1086e:	a908      	add	r1, sp, #32
   10870:	4620      	mov	r0, r4
   10872:	f7ff fbc9 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10876:	463a      	mov	r2, r7
   10878:	4629      	mov	r1, r5
   1087a:	4628      	mov	r0, r5
   1087c:	f7fe fee4 	bl	f648 <vli_sub>
    if (l_borrow) {
   10880:	2800      	cmp	r0, #0
   10882:	d168      	bne.n	10956 <XYcZ_add+0x12e>
    vli_square(product, left);
   10884:	4629      	mov	r1, r5
   10886:	a808      	add	r0, sp, #32
   10888:	f7ff fa02 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   1088c:	a908      	add	r1, sp, #32
   1088e:	4668      	mov	r0, sp
   10890:	f7ff fbba 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10894:	4632      	mov	r2, r6
   10896:	4669      	mov	r1, sp
   10898:	4668      	mov	r0, sp
   1089a:	f7fe fed5 	bl	f648 <vli_sub>
    if (l_borrow) {
   1089e:	2800      	cmp	r0, #0
   108a0:	d153      	bne.n	1094a <XYcZ_add+0x122>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   108a2:	4622      	mov	r2, r4
   108a4:	4669      	mov	r1, sp
   108a6:	4668      	mov	r0, sp
   108a8:	f7fe fece 	bl	f648 <vli_sub>
    if (l_borrow) {
   108ac:	2800      	cmp	r0, #0
   108ae:	d146      	bne.n	1093e <XYcZ_add+0x116>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   108b0:	4632      	mov	r2, r6
   108b2:	4621      	mov	r1, r4
   108b4:	4620      	mov	r0, r4
   108b6:	f7fe fec7 	bl	f648 <vli_sub>
    if (l_borrow) {
   108ba:	2800      	cmp	r0, #0
   108bc:	d139      	bne.n	10932 <XYcZ_add+0x10a>
    vli_mult(product, left, right);
   108be:	4622      	mov	r2, r4
   108c0:	4639      	mov	r1, r7
   108c2:	a808      	add	r0, sp, #32
   108c4:	f7fe ff08 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   108c8:	a908      	add	r1, sp, #32
   108ca:	4638      	mov	r0, r7
   108cc:	f7ff fb9c 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   108d0:	466a      	mov	r2, sp
   108d2:	4631      	mov	r1, r6
   108d4:	4620      	mov	r0, r4
   108d6:	f7fe feb7 	bl	f648 <vli_sub>
    if (l_borrow) {
   108da:	bb20      	cbnz	r0, 10926 <XYcZ_add+0xfe>
    vli_mult(product, left, right);
   108dc:	4622      	mov	r2, r4
   108de:	4629      	mov	r1, r5
   108e0:	a808      	add	r0, sp, #32
   108e2:	f7fe fef9 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   108e6:	a908      	add	r1, sp, #32
   108e8:	4628      	mov	r0, r5
   108ea:	f7ff fb8d 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   108ee:	463a      	mov	r2, r7
   108f0:	4629      	mov	r1, r5
   108f2:	4628      	mov	r0, r5
   108f4:	f7fe fea8 	bl	f648 <vli_sub>
    if (l_borrow) {
   108f8:	b978      	cbnz	r0, 1091a <XYcZ_add+0xf2>
        dest[i] = src[i];
   108fa:	46ec      	mov	ip, sp
   108fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10902:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   10906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_modSub_fast(X2, X1, t5);  /* t3 = B - x3 */
    vli_modMult_fast(Y2, Y2, X2); /* t4 = (y2 - y1)*(B - x3) */
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y3 */

    vli_set(X2, t5);
}
   1090a:	b019      	add	sp, #100	; 0x64
   1090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli_add(result, result, mod);
   1090e:	4a15      	ldr	r2, [pc, #84]	; (10964 <XYcZ_add+0x13c>)
   10910:	4669      	mov	r1, sp
   10912:	4668      	mov	r0, sp
   10914:	f7fe fe58 	bl	f5c8 <vli_add>
   10918:	e793      	b.n	10842 <XYcZ_add+0x1a>
   1091a:	4a12      	ldr	r2, [pc, #72]	; (10964 <XYcZ_add+0x13c>)
   1091c:	4629      	mov	r1, r5
   1091e:	4628      	mov	r0, r5
   10920:	f7fe fe52 	bl	f5c8 <vli_add>
   10924:	e7e9      	b.n	108fa <XYcZ_add+0xd2>
   10926:	4a0f      	ldr	r2, [pc, #60]	; (10964 <XYcZ_add+0x13c>)
   10928:	4621      	mov	r1, r4
   1092a:	4620      	mov	r0, r4
   1092c:	f7fe fe4c 	bl	f5c8 <vli_add>
   10930:	e7d4      	b.n	108dc <XYcZ_add+0xb4>
   10932:	4a0c      	ldr	r2, [pc, #48]	; (10964 <XYcZ_add+0x13c>)
   10934:	4621      	mov	r1, r4
   10936:	4620      	mov	r0, r4
   10938:	f7fe fe46 	bl	f5c8 <vli_add>
   1093c:	e7bf      	b.n	108be <XYcZ_add+0x96>
   1093e:	4a09      	ldr	r2, [pc, #36]	; (10964 <XYcZ_add+0x13c>)
   10940:	4669      	mov	r1, sp
   10942:	4668      	mov	r0, sp
   10944:	f7fe fe40 	bl	f5c8 <vli_add>
   10948:	e7b2      	b.n	108b0 <XYcZ_add+0x88>
   1094a:	4a06      	ldr	r2, [pc, #24]	; (10964 <XYcZ_add+0x13c>)
   1094c:	4669      	mov	r1, sp
   1094e:	4668      	mov	r0, sp
   10950:	f7fe fe3a 	bl	f5c8 <vli_add>
   10954:	e7a5      	b.n	108a2 <XYcZ_add+0x7a>
   10956:	4a03      	ldr	r2, [pc, #12]	; (10964 <XYcZ_add+0x13c>)
   10958:	4629      	mov	r1, r5
   1095a:	4628      	mov	r0, r5
   1095c:	f7fe fe34 	bl	f5c8 <vli_add>
   10960:	e790      	b.n	10884 <XYcZ_add+0x5c>
   10962:	bf00      	nop
   10964:	00026450 	.word	0x00026450

00010968 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(uECC_word_t * RESTRICT X1,
                      uECC_word_t * RESTRICT Y1,
                      uECC_word_t * RESTRICT X2,
                      uECC_word_t * RESTRICT Y2) {
   10968:	b5f0      	push	{r4, r5, r6, r7, lr}
   1096a:	4614      	mov	r4, r2
   1096c:	b0a9      	sub	sp, #164	; 0xa4
   1096e:	4606      	mov	r6, r0
   10970:	460f      	mov	r7, r1
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10972:	4602      	mov	r2, r0
   10974:	4621      	mov	r1, r4
   10976:	4668      	mov	r0, sp
                      uECC_word_t * RESTRICT Y2) {
   10978:	461d      	mov	r5, r3
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1097a:	f7fe fe65 	bl	f648 <vli_sub>
    if (l_borrow) {
   1097e:	2800      	cmp	r0, #0
   10980:	f040 80cb 	bne.w	10b1a <XYcZ_addC+0x1b2>
    vli_square(product, left);
   10984:	4669      	mov	r1, sp
   10986:	a818      	add	r0, sp, #96	; 0x60
   10988:	f7ff f982 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   1098c:	a918      	add	r1, sp, #96	; 0x60
   1098e:	4668      	mov	r0, sp
   10990:	f7ff fb3a 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10994:	466a      	mov	r2, sp
   10996:	4631      	mov	r1, r6
   10998:	a818      	add	r0, sp, #96	; 0x60
   1099a:	f7fe fe9d 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   1099e:	a918      	add	r1, sp, #96	; 0x60
   109a0:	4630      	mov	r0, r6
   109a2:	f7ff fb31 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   109a6:	466a      	mov	r2, sp
   109a8:	4621      	mov	r1, r4
   109aa:	a818      	add	r0, sp, #96	; 0x60
   109ac:	f7fe fe94 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   109b0:	a918      	add	r1, sp, #96	; 0x60
   109b2:	4620      	mov	r0, r4
   109b4:	f7ff fb28 	bl	10008 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   109b8:	463a      	mov	r2, r7
   109ba:	4629      	mov	r1, r5
   109bc:	4668      	mov	r0, sp
   109be:	f7fe fe03 	bl	f5c8 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   109c2:	b9a8      	cbnz	r0, 109f0 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   109c4:	9b07      	ldr	r3, [sp, #28]
   109c6:	3301      	adds	r3, #1
   109c8:	d117      	bne.n	109fa <XYcZ_addC+0x92>
        if (left[i] > right[i]) {
   109ca:	9b06      	ldr	r3, [sp, #24]
   109cc:	2b01      	cmp	r3, #1
   109ce:	d80f      	bhi.n	109f0 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   109d0:	b19b      	cbz	r3, 109fa <XYcZ_addC+0x92>
        if (left[i] > right[i]) {
   109d2:	9b05      	ldr	r3, [sp, #20]
   109d4:	b963      	cbnz	r3, 109f0 <XYcZ_addC+0x88>
   109d6:	9b04      	ldr	r3, [sp, #16]
   109d8:	b953      	cbnz	r3, 109f0 <XYcZ_addC+0x88>
   109da:	9b03      	ldr	r3, [sp, #12]
   109dc:	b943      	cbnz	r3, 109f0 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   109de:	9b02      	ldr	r3, [sp, #8]
   109e0:	3301      	adds	r3, #1
   109e2:	d10a      	bne.n	109fa <XYcZ_addC+0x92>
   109e4:	9b01      	ldr	r3, [sp, #4]
   109e6:	3301      	adds	r3, #1
   109e8:	d107      	bne.n	109fa <XYcZ_addC+0x92>
   109ea:	9b00      	ldr	r3, [sp, #0]
   109ec:	3301      	adds	r3, #1
   109ee:	d104      	bne.n	109fa <XYcZ_addC+0x92>
        vli_sub(result, result, mod);
   109f0:	4a65      	ldr	r2, [pc, #404]	; (10b88 <XYcZ_addC+0x220>)
   109f2:	4669      	mov	r1, sp
   109f4:	4668      	mov	r0, sp
   109f6:	f7fe fe27 	bl	f648 <vli_sub>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   109fa:	463a      	mov	r2, r7
   109fc:	4629      	mov	r1, r5
   109fe:	4628      	mov	r0, r5
   10a00:	f7fe fe22 	bl	f648 <vli_sub>
    if (l_borrow) {
   10a04:	2800      	cmp	r0, #0
   10a06:	f040 8094 	bne.w	10b32 <XYcZ_addC+0x1ca>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10a0a:	4632      	mov	r2, r6
   10a0c:	4621      	mov	r1, r4
   10a0e:	a808      	add	r0, sp, #32
   10a10:	f7fe fe1a 	bl	f648 <vli_sub>
    if (l_borrow) {
   10a14:	2800      	cmp	r0, #0
   10a16:	f040 8086 	bne.w	10b26 <XYcZ_addC+0x1be>
    vli_mult(product, left, right);
   10a1a:	aa08      	add	r2, sp, #32
   10a1c:	4639      	mov	r1, r7
   10a1e:	a818      	add	r0, sp, #96	; 0x60
   10a20:	f7fe fe5a 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10a24:	a918      	add	r1, sp, #96	; 0x60
   10a26:	4638      	mov	r0, r7
   10a28:	f7ff faee 	bl	10008 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   10a2c:	4622      	mov	r2, r4
   10a2e:	4631      	mov	r1, r6
   10a30:	a808      	add	r0, sp, #32
   10a32:	f7fe fdc9 	bl	f5c8 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   10a36:	b9a8      	cbnz	r0, 10a64 <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   10a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10a3a:	3301      	adds	r3, #1
   10a3c:	d117      	bne.n	10a6e <XYcZ_addC+0x106>
        if (left[i] > right[i]) {
   10a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a40:	2b01      	cmp	r3, #1
   10a42:	d80f      	bhi.n	10a64 <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   10a44:	b19b      	cbz	r3, 10a6e <XYcZ_addC+0x106>
        if (left[i] > right[i]) {
   10a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a48:	b963      	cbnz	r3, 10a64 <XYcZ_addC+0xfc>
   10a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10a4c:	b953      	cbnz	r3, 10a64 <XYcZ_addC+0xfc>
   10a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a50:	b943      	cbnz	r3, 10a64 <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   10a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a54:	3301      	adds	r3, #1
   10a56:	d10a      	bne.n	10a6e <XYcZ_addC+0x106>
   10a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a5a:	3301      	adds	r3, #1
   10a5c:	d107      	bne.n	10a6e <XYcZ_addC+0x106>
   10a5e:	9b08      	ldr	r3, [sp, #32]
   10a60:	3301      	adds	r3, #1
   10a62:	d104      	bne.n	10a6e <XYcZ_addC+0x106>
        vli_sub(result, result, mod);
   10a64:	a908      	add	r1, sp, #32
   10a66:	4a48      	ldr	r2, [pc, #288]	; (10b88 <XYcZ_addC+0x220>)
   10a68:	4608      	mov	r0, r1
   10a6a:	f7fe fded 	bl	f648 <vli_sub>
    vli_square(product, left);
   10a6e:	4629      	mov	r1, r5
   10a70:	a818      	add	r0, sp, #96	; 0x60
   10a72:	f7ff f90d 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   10a76:	a918      	add	r1, sp, #96	; 0x60
   10a78:	4620      	mov	r0, r4
   10a7a:	f7ff fac5 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10a7e:	aa08      	add	r2, sp, #32
   10a80:	4621      	mov	r1, r4
   10a82:	4620      	mov	r0, r4
   10a84:	f7fe fde0 	bl	f648 <vli_sub>
    if (l_borrow) {
   10a88:	2800      	cmp	r0, #0
   10a8a:	d176      	bne.n	10b7a <XYcZ_addC+0x212>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10a8c:	4622      	mov	r2, r4
   10a8e:	4631      	mov	r1, r6
   10a90:	a810      	add	r0, sp, #64	; 0x40
   10a92:	f7fe fdd9 	bl	f648 <vli_sub>
    if (l_borrow) {
   10a96:	2800      	cmp	r0, #0
   10a98:	d169      	bne.n	10b6e <XYcZ_addC+0x206>
    vli_mult(product, left, right);
   10a9a:	aa10      	add	r2, sp, #64	; 0x40
   10a9c:	4629      	mov	r1, r5
   10a9e:	a818      	add	r0, sp, #96	; 0x60
   10aa0:	f7fe fe1a 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10aa4:	a918      	add	r1, sp, #96	; 0x60
   10aa6:	4628      	mov	r0, r5
   10aa8:	f7ff faae 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10aac:	463a      	mov	r2, r7
   10aae:	4629      	mov	r1, r5
   10ab0:	4628      	mov	r0, r5
   10ab2:	f7fe fdc9 	bl	f648 <vli_sub>
    if (l_borrow) {
   10ab6:	2800      	cmp	r0, #0
   10ab8:	d153      	bne.n	10b62 <XYcZ_addC+0x1fa>
    vli_square(product, left);
   10aba:	4669      	mov	r1, sp
   10abc:	a818      	add	r0, sp, #96	; 0x60
   10abe:	f7ff f8e7 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   10ac2:	a918      	add	r1, sp, #96	; 0x60
   10ac4:	a810      	add	r0, sp, #64	; 0x40
   10ac6:	f7ff fa9f 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10aca:	a910      	add	r1, sp, #64	; 0x40
   10acc:	aa08      	add	r2, sp, #32
   10ace:	4608      	mov	r0, r1
   10ad0:	f7fe fdba 	bl	f648 <vli_sub>
    if (l_borrow) {
   10ad4:	2800      	cmp	r0, #0
   10ad6:	d13e      	bne.n	10b56 <XYcZ_addC+0x1ee>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10ad8:	4632      	mov	r2, r6
   10ada:	a910      	add	r1, sp, #64	; 0x40
   10adc:	a808      	add	r0, sp, #32
   10ade:	f7fe fdb3 	bl	f648 <vli_sub>
    if (l_borrow) {
   10ae2:	bb90      	cbnz	r0, 10b4a <XYcZ_addC+0x1e2>
    vli_mult(product, left, right);
   10ae4:	466a      	mov	r2, sp
   10ae6:	a908      	add	r1, sp, #32
   10ae8:	a818      	add	r0, sp, #96	; 0x60
   10aea:	f7fe fdf5 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10aee:	a918      	add	r1, sp, #96	; 0x60
   10af0:	a808      	add	r0, sp, #32
   10af2:	f7ff fa89 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10af6:	463a      	mov	r2, r7
   10af8:	a908      	add	r1, sp, #32
   10afa:	4638      	mov	r0, r7
   10afc:	f7fe fda4 	bl	f648 <vli_sub>
    if (l_borrow) {
   10b00:	b9e8      	cbnz	r0, 10b3e <XYcZ_addC+0x1d6>
        dest[i] = src[i];
   10b02:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   10b06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10b0a:	4634      	mov	r4, r6
   10b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10b0e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   10b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_modSub_fast(t6, t7, X1);  /* t6 = x3' - B */
    vli_modMult_fast(t6, t6, t5); /* t6 = (y2 + y1)*(x3' - B) */
    vli_modSub_fast(Y1, t6, Y1);  /* t2 = (y2 + y1)*(x3' - B) - E = y3' */

    vli_set(X1, t7);
}
   10b16:	b029      	add	sp, #164	; 0xa4
   10b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli_add(result, result, mod);
   10b1a:	4a1b      	ldr	r2, [pc, #108]	; (10b88 <XYcZ_addC+0x220>)
   10b1c:	4669      	mov	r1, sp
   10b1e:	4668      	mov	r0, sp
   10b20:	f7fe fd52 	bl	f5c8 <vli_add>
   10b24:	e72e      	b.n	10984 <XYcZ_addC+0x1c>
   10b26:	a908      	add	r1, sp, #32
   10b28:	4a17      	ldr	r2, [pc, #92]	; (10b88 <XYcZ_addC+0x220>)
   10b2a:	4608      	mov	r0, r1
   10b2c:	f7fe fd4c 	bl	f5c8 <vli_add>
   10b30:	e773      	b.n	10a1a <XYcZ_addC+0xb2>
   10b32:	4a15      	ldr	r2, [pc, #84]	; (10b88 <XYcZ_addC+0x220>)
   10b34:	4629      	mov	r1, r5
   10b36:	4628      	mov	r0, r5
   10b38:	f7fe fd46 	bl	f5c8 <vli_add>
   10b3c:	e765      	b.n	10a0a <XYcZ_addC+0xa2>
   10b3e:	4a12      	ldr	r2, [pc, #72]	; (10b88 <XYcZ_addC+0x220>)
   10b40:	4639      	mov	r1, r7
   10b42:	4638      	mov	r0, r7
   10b44:	f7fe fd40 	bl	f5c8 <vli_add>
   10b48:	e7db      	b.n	10b02 <XYcZ_addC+0x19a>
   10b4a:	a908      	add	r1, sp, #32
   10b4c:	4a0e      	ldr	r2, [pc, #56]	; (10b88 <XYcZ_addC+0x220>)
   10b4e:	4608      	mov	r0, r1
   10b50:	f7fe fd3a 	bl	f5c8 <vli_add>
   10b54:	e7c6      	b.n	10ae4 <XYcZ_addC+0x17c>
   10b56:	a910      	add	r1, sp, #64	; 0x40
   10b58:	4a0b      	ldr	r2, [pc, #44]	; (10b88 <XYcZ_addC+0x220>)
   10b5a:	4608      	mov	r0, r1
   10b5c:	f7fe fd34 	bl	f5c8 <vli_add>
   10b60:	e7ba      	b.n	10ad8 <XYcZ_addC+0x170>
   10b62:	4a09      	ldr	r2, [pc, #36]	; (10b88 <XYcZ_addC+0x220>)
   10b64:	4629      	mov	r1, r5
   10b66:	4628      	mov	r0, r5
   10b68:	f7fe fd2e 	bl	f5c8 <vli_add>
   10b6c:	e7a5      	b.n	10aba <XYcZ_addC+0x152>
   10b6e:	a910      	add	r1, sp, #64	; 0x40
   10b70:	4a05      	ldr	r2, [pc, #20]	; (10b88 <XYcZ_addC+0x220>)
   10b72:	4608      	mov	r0, r1
   10b74:	f7fe fd28 	bl	f5c8 <vli_add>
   10b78:	e78f      	b.n	10a9a <XYcZ_addC+0x132>
   10b7a:	4a03      	ldr	r2, [pc, #12]	; (10b88 <XYcZ_addC+0x220>)
   10b7c:	4621      	mov	r1, r4
   10b7e:	4620      	mov	r0, r4
   10b80:	f7fe fd22 	bl	f5c8 <vli_add>
   10b84:	e782      	b.n	10a8c <XYcZ_addC+0x124>
   10b86:	bf00      	nop
   10b88:	00026450 	.word	0x00026450

00010b8c <EccPoint_double_jacobian.part.0>:
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
   10b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10b90:	b0a1      	sub	sp, #132	; 0x84
   10b92:	4604      	mov	r4, r0
    vli_square(product, left);
   10b94:	a810      	add	r0, sp, #64	; 0x40
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
   10b96:	4615      	mov	r5, r2
   10b98:	460e      	mov	r6, r1
    vli_square(product, left);
   10b9a:	f7ff f879 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   10b9e:	a910      	add	r1, sp, #64	; 0x40
   10ba0:	4668      	mov	r0, sp
   10ba2:	f7ff fa31 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10ba6:	466a      	mov	r2, sp
   10ba8:	4621      	mov	r1, r4
   10baa:	a810      	add	r0, sp, #64	; 0x40
   10bac:	f7fe fd94 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10bb0:	a910      	add	r1, sp, #64	; 0x40
   10bb2:	a808      	add	r0, sp, #32
   10bb4:	f7ff fa28 	bl	10008 <vli_mmod_fast>
    vli_square(product, left);
   10bb8:	4669      	mov	r1, sp
   10bba:	a810      	add	r0, sp, #64	; 0x40
   10bbc:	f7ff f868 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   10bc0:	a910      	add	r1, sp, #64	; 0x40
   10bc2:	4668      	mov	r0, sp
   10bc4:	f7ff fa20 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10bc8:	462a      	mov	r2, r5
   10bca:	4631      	mov	r1, r6
   10bcc:	a810      	add	r0, sp, #64	; 0x40
   10bce:	f7fe fd83 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10bd2:	a910      	add	r1, sp, #64	; 0x40
   10bd4:	4630      	mov	r0, r6
   10bd6:	f7ff fa17 	bl	10008 <vli_mmod_fast>
    vli_square(product, left);
   10bda:	4629      	mov	r1, r5
   10bdc:	a810      	add	r0, sp, #64	; 0x40
   10bde:	f7ff f857 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   10be2:	a910      	add	r1, sp, #64	; 0x40
   10be4:	4628      	mov	r0, r5
   10be6:	f7ff fa0f 	bl	10008 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   10bea:	462a      	mov	r2, r5
   10bec:	4621      	mov	r1, r4
   10bee:	4620      	mov	r0, r4
   10bf0:	f7fe fcea 	bl	f5c8 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   10bf4:	b9a8      	cbnz	r0, 10c22 <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   10bf6:	69e3      	ldr	r3, [r4, #28]
   10bf8:	3301      	adds	r3, #1
   10bfa:	d117      	bne.n	10c2c <EccPoint_double_jacobian.part.0+0xa0>
        if (left[i] > right[i]) {
   10bfc:	69a3      	ldr	r3, [r4, #24]
   10bfe:	2b01      	cmp	r3, #1
   10c00:	d80f      	bhi.n	10c22 <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   10c02:	b19b      	cbz	r3, 10c2c <EccPoint_double_jacobian.part.0+0xa0>
        if (left[i] > right[i]) {
   10c04:	6963      	ldr	r3, [r4, #20]
   10c06:	b963      	cbnz	r3, 10c22 <EccPoint_double_jacobian.part.0+0x96>
   10c08:	6923      	ldr	r3, [r4, #16]
   10c0a:	b953      	cbnz	r3, 10c22 <EccPoint_double_jacobian.part.0+0x96>
   10c0c:	68e3      	ldr	r3, [r4, #12]
   10c0e:	b943      	cbnz	r3, 10c22 <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   10c10:	68a3      	ldr	r3, [r4, #8]
   10c12:	3301      	adds	r3, #1
   10c14:	d10a      	bne.n	10c2c <EccPoint_double_jacobian.part.0+0xa0>
   10c16:	6863      	ldr	r3, [r4, #4]
   10c18:	3301      	adds	r3, #1
   10c1a:	d107      	bne.n	10c2c <EccPoint_double_jacobian.part.0+0xa0>
   10c1c:	6823      	ldr	r3, [r4, #0]
   10c1e:	3301      	adds	r3, #1
   10c20:	d104      	bne.n	10c2c <EccPoint_double_jacobian.part.0+0xa0>
        vli_sub(result, result, mod);
   10c22:	4a9d      	ldr	r2, [pc, #628]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10c24:	4621      	mov	r1, r4
   10c26:	4620      	mov	r0, r4
   10c28:	f7fe fd0e 	bl	f648 <vli_sub>
    uECC_word_t carry = vli_add(result, left, right);
   10c2c:	462a      	mov	r2, r5
   10c2e:	4629      	mov	r1, r5
   10c30:	4628      	mov	r0, r5
   10c32:	f7fe fcc9 	bl	f5c8 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   10c36:	b9a8      	cbnz	r0, 10c64 <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   10c38:	69eb      	ldr	r3, [r5, #28]
   10c3a:	3301      	adds	r3, #1
   10c3c:	d117      	bne.n	10c6e <EccPoint_double_jacobian.part.0+0xe2>
        if (left[i] > right[i]) {
   10c3e:	69ab      	ldr	r3, [r5, #24]
   10c40:	2b01      	cmp	r3, #1
   10c42:	d80f      	bhi.n	10c64 <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   10c44:	b19b      	cbz	r3, 10c6e <EccPoint_double_jacobian.part.0+0xe2>
        if (left[i] > right[i]) {
   10c46:	696b      	ldr	r3, [r5, #20]
   10c48:	b963      	cbnz	r3, 10c64 <EccPoint_double_jacobian.part.0+0xd8>
   10c4a:	692b      	ldr	r3, [r5, #16]
   10c4c:	b953      	cbnz	r3, 10c64 <EccPoint_double_jacobian.part.0+0xd8>
   10c4e:	68eb      	ldr	r3, [r5, #12]
   10c50:	b943      	cbnz	r3, 10c64 <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   10c52:	68ab      	ldr	r3, [r5, #8]
   10c54:	3301      	adds	r3, #1
   10c56:	d10a      	bne.n	10c6e <EccPoint_double_jacobian.part.0+0xe2>
   10c58:	686b      	ldr	r3, [r5, #4]
   10c5a:	3301      	adds	r3, #1
   10c5c:	d107      	bne.n	10c6e <EccPoint_double_jacobian.part.0+0xe2>
   10c5e:	682b      	ldr	r3, [r5, #0]
   10c60:	3301      	adds	r3, #1
   10c62:	d104      	bne.n	10c6e <EccPoint_double_jacobian.part.0+0xe2>
        vli_sub(result, result, mod);
   10c64:	4a8c      	ldr	r2, [pc, #560]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10c66:	4629      	mov	r1, r5
   10c68:	4628      	mov	r0, r5
   10c6a:	f7fe fced 	bl	f648 <vli_sub>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10c6e:	462a      	mov	r2, r5
   10c70:	4621      	mov	r1, r4
   10c72:	4628      	mov	r0, r5
   10c74:	f7fe fce8 	bl	f648 <vli_sub>
    if (l_borrow) {
   10c78:	2800      	cmp	r0, #0
   10c7a:	f040 80bd 	bne.w	10df8 <EccPoint_double_jacobian.part.0+0x26c>
    vli_mult(product, left, right);
   10c7e:	462a      	mov	r2, r5
   10c80:	4621      	mov	r1, r4
   10c82:	a810      	add	r0, sp, #64	; 0x40
   10c84:	f7fe fd28 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10c88:	a910      	add	r1, sp, #64	; 0x40
   10c8a:	4620      	mov	r0, r4
   10c8c:	f7ff f9bc 	bl	10008 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   10c90:	4622      	mov	r2, r4
   10c92:	4621      	mov	r1, r4
   10c94:	4628      	mov	r0, r5
   10c96:	f7fe fc97 	bl	f5c8 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   10c9a:	b9a8      	cbnz	r0, 10cc8 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   10c9c:	69eb      	ldr	r3, [r5, #28]
   10c9e:	3301      	adds	r3, #1
   10ca0:	d117      	bne.n	10cd2 <EccPoint_double_jacobian.part.0+0x146>
        if (left[i] > right[i]) {
   10ca2:	69ab      	ldr	r3, [r5, #24]
   10ca4:	2b01      	cmp	r3, #1
   10ca6:	d80f      	bhi.n	10cc8 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   10ca8:	b19b      	cbz	r3, 10cd2 <EccPoint_double_jacobian.part.0+0x146>
        if (left[i] > right[i]) {
   10caa:	696b      	ldr	r3, [r5, #20]
   10cac:	b963      	cbnz	r3, 10cc8 <EccPoint_double_jacobian.part.0+0x13c>
   10cae:	692b      	ldr	r3, [r5, #16]
   10cb0:	b953      	cbnz	r3, 10cc8 <EccPoint_double_jacobian.part.0+0x13c>
   10cb2:	68eb      	ldr	r3, [r5, #12]
   10cb4:	b943      	cbnz	r3, 10cc8 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   10cb6:	68ab      	ldr	r3, [r5, #8]
   10cb8:	3301      	adds	r3, #1
   10cba:	d10a      	bne.n	10cd2 <EccPoint_double_jacobian.part.0+0x146>
   10cbc:	686b      	ldr	r3, [r5, #4]
   10cbe:	3301      	adds	r3, #1
   10cc0:	d107      	bne.n	10cd2 <EccPoint_double_jacobian.part.0+0x146>
   10cc2:	682b      	ldr	r3, [r5, #0]
   10cc4:	3301      	adds	r3, #1
   10cc6:	d104      	bne.n	10cd2 <EccPoint_double_jacobian.part.0+0x146>
        vli_sub(result, result, mod);
   10cc8:	4a73      	ldr	r2, [pc, #460]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10cca:	4629      	mov	r1, r5
   10ccc:	4628      	mov	r0, r5
   10cce:	f7fe fcbb 	bl	f648 <vli_sub>
    uECC_word_t carry = vli_add(result, left, right);
   10cd2:	462a      	mov	r2, r5
   10cd4:	4621      	mov	r1, r4
   10cd6:	4620      	mov	r0, r4
   10cd8:	f7fe fc76 	bl	f5c8 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   10cdc:	b9a8      	cbnz	r0, 10d0a <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   10cde:	69e3      	ldr	r3, [r4, #28]
   10ce0:	3301      	adds	r3, #1
   10ce2:	d117      	bne.n	10d14 <EccPoint_double_jacobian.part.0+0x188>
        if (left[i] > right[i]) {
   10ce4:	69a3      	ldr	r3, [r4, #24]
   10ce6:	2b01      	cmp	r3, #1
   10ce8:	d80f      	bhi.n	10d0a <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   10cea:	b19b      	cbz	r3, 10d14 <EccPoint_double_jacobian.part.0+0x188>
        if (left[i] > right[i]) {
   10cec:	6963      	ldr	r3, [r4, #20]
   10cee:	b963      	cbnz	r3, 10d0a <EccPoint_double_jacobian.part.0+0x17e>
   10cf0:	6923      	ldr	r3, [r4, #16]
   10cf2:	b953      	cbnz	r3, 10d0a <EccPoint_double_jacobian.part.0+0x17e>
   10cf4:	68e3      	ldr	r3, [r4, #12]
   10cf6:	b943      	cbnz	r3, 10d0a <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   10cf8:	68a3      	ldr	r3, [r4, #8]
   10cfa:	3301      	adds	r3, #1
   10cfc:	d10a      	bne.n	10d14 <EccPoint_double_jacobian.part.0+0x188>
   10cfe:	6863      	ldr	r3, [r4, #4]
   10d00:	3301      	adds	r3, #1
   10d02:	d107      	bne.n	10d14 <EccPoint_double_jacobian.part.0+0x188>
   10d04:	6823      	ldr	r3, [r4, #0]
   10d06:	3301      	adds	r3, #1
   10d08:	d104      	bne.n	10d14 <EccPoint_double_jacobian.part.0+0x188>
        vli_sub(result, result, mod);
   10d0a:	4a63      	ldr	r2, [pc, #396]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10d0c:	4621      	mov	r1, r4
   10d0e:	4620      	mov	r0, r4
   10d10:	f7fe fc9a 	bl	f648 <vli_sub>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   10d14:	6821      	ldr	r1, [r4, #0]
    if (vli_testBit(X1, 0)) {
   10d16:	07cb      	lsls	r3, r1, #31
   10d18:	f100 808c 	bmi.w	10e34 <EccPoint_double_jacobian.part.0+0x2a8>
        uECC_word_t temp = *vli;
   10d1c:	e9d4 7905 	ldrd	r7, r9, [r4, #20]
   10d20:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
   10d24:	69e2      	ldr	r2, [r4, #28]
        *vli = (temp >> 1) | carry;
   10d26:	ea4f 0059 	mov.w	r0, r9, lsr #1
        uECC_word_t temp = *vli;
   10d2a:	e9d4 3c01 	ldrd	r3, ip, [r4, #4]
        *vli = (temp >> 1) | carry;
   10d2e:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
   10d32:	0852      	lsrs	r2, r2, #1
   10d34:	61a0      	str	r0, [r4, #24]
   10d36:	61e2      	str	r2, [r4, #28]
   10d38:	0878      	lsrs	r0, r7, #1
   10d3a:	ea4f 0258 	mov.w	r2, r8, lsr #1
   10d3e:	ea42 72c7 	orr.w	r2, r2, r7, lsl #31
   10d42:	ea40 70c9 	orr.w	r0, r0, r9, lsl #31
   10d46:	6160      	str	r0, [r4, #20]
   10d48:	6122      	str	r2, [r4, #16]
   10d4a:	ea4f 075e 	mov.w	r7, lr, lsr #1
   10d4e:	085a      	lsrs	r2, r3, #1
   10d50:	ea4f 005c 	mov.w	r0, ip, lsr #1
        carry = temp << (uECC_WORD_BITS - 1);
   10d54:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   10d56:	ea47 77c8 	orr.w	r7, r7, r8, lsl #31
   10d5a:	ea40 70ce 	orr.w	r0, r0, lr, lsl #31
   10d5e:	ea42 72cc 	orr.w	r2, r2, ip, lsl #31
   10d62:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   10d66:	60e7      	str	r7, [r4, #12]
   10d68:	60a0      	str	r0, [r4, #8]
   10d6a:	6062      	str	r2, [r4, #4]
   10d6c:	6023      	str	r3, [r4, #0]
    vli_square(product, left);
   10d6e:	4621      	mov	r1, r4
   10d70:	a810      	add	r0, sp, #64	; 0x40
   10d72:	f7fe ff8d 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   10d76:	a910      	add	r1, sp, #64	; 0x40
   10d78:	4628      	mov	r0, r5
   10d7a:	f7ff f945 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10d7e:	aa08      	add	r2, sp, #32
   10d80:	4629      	mov	r1, r5
   10d82:	4628      	mov	r0, r5
   10d84:	f7fe fc60 	bl	f648 <vli_sub>
    if (l_borrow) {
   10d88:	2800      	cmp	r0, #0
   10d8a:	d14d      	bne.n	10e28 <EccPoint_double_jacobian.part.0+0x29c>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10d8c:	aa08      	add	r2, sp, #32
   10d8e:	4629      	mov	r1, r5
   10d90:	4628      	mov	r0, r5
   10d92:	f7fe fc59 	bl	f648 <vli_sub>
    if (l_borrow) {
   10d96:	2800      	cmp	r0, #0
   10d98:	d140      	bne.n	10e1c <EccPoint_double_jacobian.part.0+0x290>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10d9a:	a908      	add	r1, sp, #32
   10d9c:	462a      	mov	r2, r5
   10d9e:	4608      	mov	r0, r1
   10da0:	f7fe fc52 	bl	f648 <vli_sub>
    if (l_borrow) {
   10da4:	bba0      	cbnz	r0, 10e10 <EccPoint_double_jacobian.part.0+0x284>
    vli_mult(product, left, right);
   10da6:	aa08      	add	r2, sp, #32
   10da8:	4621      	mov	r1, r4
   10daa:	a810      	add	r0, sp, #64	; 0x40
   10dac:	f7fe fc94 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10db0:	a910      	add	r1, sp, #64	; 0x40
   10db2:	4620      	mov	r0, r4
   10db4:	f7ff f928 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   10db8:	466a      	mov	r2, sp
   10dba:	4621      	mov	r1, r4
   10dbc:	4668      	mov	r0, sp
   10dbe:	f7fe fc43 	bl	f648 <vli_sub>
    if (l_borrow) {
   10dc2:	b9f8      	cbnz	r0, 10e04 <EccPoint_double_jacobian.part.0+0x278>
        dest[i] = src[i];
   10dc4:	462f      	mov	r7, r5
   10dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10dca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   10dce:	46b4      	mov	ip, r6
   10dd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   10dd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10dd8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   10dda:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   10dde:	46ee      	mov	lr, sp
   10de0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   10de4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   10de8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   10dea:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   10dee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   10df2:	b021      	add	sp, #132	; 0x84
   10df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        vli_add(result, result, mod);
   10df8:	4a27      	ldr	r2, [pc, #156]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10dfa:	4629      	mov	r1, r5
   10dfc:	4628      	mov	r0, r5
   10dfe:	f7fe fbe3 	bl	f5c8 <vli_add>
   10e02:	e73c      	b.n	10c7e <EccPoint_double_jacobian.part.0+0xf2>
   10e04:	4a24      	ldr	r2, [pc, #144]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10e06:	4669      	mov	r1, sp
   10e08:	4668      	mov	r0, sp
   10e0a:	f7fe fbdd 	bl	f5c8 <vli_add>
   10e0e:	e7d9      	b.n	10dc4 <EccPoint_double_jacobian.part.0+0x238>
   10e10:	a908      	add	r1, sp, #32
   10e12:	4a21      	ldr	r2, [pc, #132]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10e14:	4608      	mov	r0, r1
   10e16:	f7fe fbd7 	bl	f5c8 <vli_add>
   10e1a:	e7c4      	b.n	10da6 <EccPoint_double_jacobian.part.0+0x21a>
   10e1c:	4a1e      	ldr	r2, [pc, #120]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10e1e:	4629      	mov	r1, r5
   10e20:	4628      	mov	r0, r5
   10e22:	f7fe fbd1 	bl	f5c8 <vli_add>
   10e26:	e7b8      	b.n	10d9a <EccPoint_double_jacobian.part.0+0x20e>
   10e28:	4a1b      	ldr	r2, [pc, #108]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10e2a:	4629      	mov	r1, r5
   10e2c:	4628      	mov	r0, r5
   10e2e:	f7fe fbcb 	bl	f5c8 <vli_add>
   10e32:	e7ab      	b.n	10d8c <EccPoint_double_jacobian.part.0+0x200>
        uECC_word_t l_carry = vli_add(X1, X1, curve_p);
   10e34:	4a18      	ldr	r2, [pc, #96]	; (10e98 <EccPoint_double_jacobian.part.0+0x30c>)
   10e36:	4621      	mov	r1, r4
   10e38:	4620      	mov	r0, r4
   10e3a:	f7fe fbc5 	bl	f5c8 <vli_add>
        uECC_word_t temp = *vli;
   10e3e:	e9d4 2705 	ldrd	r2, r7, [r4, #20]
   10e42:	f8d4 901c 	ldr.w	r9, [r4, #28]
   10e46:	6863      	ldr	r3, [r4, #4]
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   10e48:	07c1      	lsls	r1, r0, #31
   10e4a:	ea41 0159 	orr.w	r1, r1, r9, lsr #1
        uECC_word_t temp = *vli;
   10e4e:	e9d4 0c02 	ldrd	r0, ip, [r4, #8]
        *vli = (temp >> 1) | carry;
   10e52:	ea4f 0857 	mov.w	r8, r7, lsr #1
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   10e56:	61e1      	str	r1, [r4, #28]
        carry = temp << (uECC_WORD_BITS - 1);
   10e58:	07ff      	lsls	r7, r7, #31
        uECC_word_t temp = *vli;
   10e5a:	6921      	ldr	r1, [r4, #16]
        *vli = (temp >> 1) | carry;
   10e5c:	ea47 0752 	orr.w	r7, r7, r2, lsr #1
        carry = temp << (uECC_WORD_BITS - 1);
   10e60:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
   10e62:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
   10e66:	6122      	str	r2, [r4, #16]
   10e68:	ea4f 025c 	mov.w	r2, ip, lsr #1
   10e6c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   10e70:	60e2      	str	r2, [r4, #12]
   10e72:	0842      	lsrs	r2, r0, #1
   10e74:	ea42 72cc 	orr.w	r2, r2, ip, lsl #31
   10e78:	60a2      	str	r2, [r4, #8]
   10e7a:	085a      	lsrs	r2, r3, #1
   10e7c:	ea42 70c0 	orr.w	r0, r2, r0, lsl #31
   10e80:	6822      	ldr	r2, [r4, #0]
   10e82:	6167      	str	r7, [r4, #20]
        carry = temp << (uECC_WORD_BITS - 1);
   10e84:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   10e86:	ea48 78c9 	orr.w	r8, r8, r9, lsl #31
   10e8a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   10e8e:	f8c4 8018 	str.w	r8, [r4, #24]
   10e92:	6060      	str	r0, [r4, #4]
   10e94:	6023      	str	r3, [r4, #0]
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   10e96:	e76a      	b.n	10d6e <EccPoint_double_jacobian.part.0+0x1e2>
   10e98:	00026450 	.word	0x00026450

00010e9c <EccPoint_mult.constprop.0>:

static void EccPoint_mult(EccPoint * RESTRICT result,
   10e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ea0:	b0c5      	sub	sp, #276	; 0x114
   10ea2:	4690      	mov	r8, r2
        dest[i] = src[i];
   10ea4:	468c      	mov	ip, r1
    uECC_word_t z[uECC_WORDS];
    bitcount_t i;
    uECC_word_t nb;

    vli_set(Rx[1], point->x);
    vli_set(Ry[1], point->y);
   10ea6:	f101 0220 	add.w	r2, r1, #32
static void EccPoint_mult(EccPoint * RESTRICT result,
   10eaa:	9002      	str	r0, [sp, #8]
    vli_set(Ry[1], point->y);
   10eac:	9201      	str	r2, [sp, #4]
        dest[i] = src[i];
   10eae:	4616      	mov	r6, r2
static void EccPoint_mult(EccPoint * RESTRICT result,
   10eb0:	468a      	mov	sl, r1
    if (initial_Z) {
   10eb2:	461c      	mov	r4, r3
        dest[i] = src[i];
   10eb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10eb8:	af1c      	add	r7, sp, #112	; 0x70
   10eba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   10ebc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   10ec0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   10ec4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10ec6:	ad2c      	add	r5, sp, #176	; 0xb0
   10ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10eca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   10ece:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (initial_Z) {
   10ed2:	2c00      	cmp	r4, #0
   10ed4:	f000 815c 	beq.w	11190 <EccPoint_mult.constprop.0+0x2f4>
        dest[i] = src[i];
   10ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   10eda:	ae04      	add	r6, sp, #16
   10edc:	4635      	mov	r5, r6
   10ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10ee0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   10ee4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   10ee8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   10eec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10ef0:	af14      	add	r7, sp, #80	; 0x50
   10ef2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   10ef4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   10ef8:	ad2c      	add	r5, sp, #176	; 0xb0
   10efa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   10efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10f00:	ac24      	add	r4, sp, #144	; 0x90
   10f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10f04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   10f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_square(product, left);
   10f0c:	4631      	mov	r1, r6
   10f0e:	a834      	add	r0, sp, #208	; 0xd0
   10f10:	f7fe febe 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   10f14:	a934      	add	r1, sp, #208	; 0xd0
   10f16:	a80c      	add	r0, sp, #48	; 0x30
   10f18:	f7ff f876 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10f1c:	aa0c      	add	r2, sp, #48	; 0x30
   10f1e:	a91c      	add	r1, sp, #112	; 0x70
   10f20:	a834      	add	r0, sp, #208	; 0xd0
   10f22:	f7fe fbd9 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10f26:	a934      	add	r1, sp, #208	; 0xd0
   10f28:	a81c      	add	r0, sp, #112	; 0x70
   10f2a:	f7ff f86d 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10f2e:	4632      	mov	r2, r6
   10f30:	a90c      	add	r1, sp, #48	; 0x30
   10f32:	a834      	add	r0, sp, #208	; 0xd0
   10f34:	f7fe fbd0 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10f38:	a934      	add	r1, sp, #208	; 0xd0
   10f3a:	a80c      	add	r0, sp, #48	; 0x30
   10f3c:	f7ff f864 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10f40:	aa0c      	add	r2, sp, #48	; 0x30
   10f42:	a92c      	add	r1, sp, #176	; 0xb0
   10f44:	a834      	add	r0, sp, #208	; 0xd0
   10f46:	f7fe fbc7 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10f4a:	a934      	add	r1, sp, #208	; 0xd0
   10f4c:	a82c      	add	r0, sp, #176	; 0xb0
   10f4e:	f7ff f85b 	bl	10008 <vli_mmod_fast>
        if (vli[i]) {
   10f52:	6833      	ldr	r3, [r6, #0]
   10f54:	2b00      	cmp	r3, #0
   10f56:	f040 810f 	bne.w	11178 <EccPoint_mult.constprop.0+0x2dc>
   10f5a:	6873      	ldr	r3, [r6, #4]
   10f5c:	2b00      	cmp	r3, #0
   10f5e:	f040 810b 	bne.w	11178 <EccPoint_mult.constprop.0+0x2dc>
   10f62:	68b3      	ldr	r3, [r6, #8]
   10f64:	2b00      	cmp	r3, #0
   10f66:	f040 8107 	bne.w	11178 <EccPoint_mult.constprop.0+0x2dc>
   10f6a:	68f3      	ldr	r3, [r6, #12]
   10f6c:	2b00      	cmp	r3, #0
   10f6e:	f040 8103 	bne.w	11178 <EccPoint_mult.constprop.0+0x2dc>
   10f72:	6933      	ldr	r3, [r6, #16]
   10f74:	2b00      	cmp	r3, #0
   10f76:	f040 80ff 	bne.w	11178 <EccPoint_mult.constprop.0+0x2dc>
   10f7a:	6973      	ldr	r3, [r6, #20]
   10f7c:	2b00      	cmp	r3, #0
   10f7e:	f040 80fb 	bne.w	11178 <EccPoint_mult.constprop.0+0x2dc>
   10f82:	69b3      	ldr	r3, [r6, #24]
   10f84:	2b00      	cmp	r3, #0
   10f86:	f040 80f7 	bne.w	11178 <EccPoint_mult.constprop.0+0x2dc>
   10f8a:	69f3      	ldr	r3, [r6, #28]
   10f8c:	2b00      	cmp	r3, #0
   10f8e:	f040 80f3 	bne.w	11178 <EccPoint_mult.constprop.0+0x2dc>
    vli_square(product, left);
   10f92:	4631      	mov	r1, r6
   10f94:	a834      	add	r0, sp, #208	; 0xd0
   10f96:	f7fe fe7b 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   10f9a:	a934      	add	r1, sp, #208	; 0xd0
   10f9c:	a80c      	add	r0, sp, #48	; 0x30
   10f9e:	f7ff f833 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10fa2:	aa0c      	add	r2, sp, #48	; 0x30
   10fa4:	a914      	add	r1, sp, #80	; 0x50
   10fa6:	a834      	add	r0, sp, #208	; 0xd0
   10fa8:	f7fe fb96 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10fac:	a934      	add	r1, sp, #208	; 0xd0
   10fae:	a814      	add	r0, sp, #80	; 0x50
   10fb0:	f7ff f82a 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10fb4:	4632      	mov	r2, r6
   10fb6:	a90c      	add	r1, sp, #48	; 0x30
   10fb8:	a834      	add	r0, sp, #208	; 0xd0
   10fba:	f7fe fb8d 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10fbe:	a934      	add	r1, sp, #208	; 0xd0
   10fc0:	a80c      	add	r0, sp, #48	; 0x30
   10fc2:	f7ff f821 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   10fc6:	aa0c      	add	r2, sp, #48	; 0x30
   10fc8:	a924      	add	r1, sp, #144	; 0x90
   10fca:	a834      	add	r0, sp, #208	; 0xd0
   10fcc:	f7fe fb84 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   10fd0:	a934      	add	r1, sp, #208	; 0xd0
   10fd2:	a824      	add	r0, sp, #144	; 0x90
   10fd4:	f7ff f818 	bl	10008 <vli_mmod_fast>

    XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initialZ);

    for (i = numBits - 2; i > 0; --i) {
   10fd8:	25ff      	movs	r5, #255	; 0xff
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   10fda:	f04f 0901 	mov.w	r9, #1
   10fde:	9603      	str	r6, [sp, #12]
   10fe0:	116b      	asrs	r3, r5, #5
   10fe2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   10fe6:	f005 031f 	and.w	r3, r5, #31
   10fea:	fa09 f303 	lsl.w	r3, r9, r3
        nb = !vli_testBit(scalar, i);
   10fee:	4213      	tst	r3, r2
   10ff0:	bf0c      	ite	eq
   10ff2:	2401      	moveq	r4, #1
   10ff4:	2400      	movne	r4, #0
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   10ff6:	f1c4 0701 	rsb	r7, r4, #1
   10ffa:	ab14      	add	r3, sp, #80	; 0x50
   10ffc:	eb03 1647 	add.w	r6, r3, r7, lsl #5
   11000:	ab24      	add	r3, sp, #144	; 0x90
   11002:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   11006:	ab14      	add	r3, sp, #80	; 0x50
   11008:	eb03 1b44 	add.w	fp, r3, r4, lsl #5
   1100c:	ab24      	add	r3, sp, #144	; 0x90
   1100e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   11012:	4623      	mov	r3, r4
   11014:	465a      	mov	r2, fp
   11016:	4639      	mov	r1, r7
   11018:	4630      	mov	r0, r6
   1101a:	f7ff fca5 	bl	10968 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   1101e:	463b      	mov	r3, r7
   11020:	4632      	mov	r2, r6
   11022:	4621      	mov	r1, r4
   11024:	4658      	mov	r0, fp
   11026:	f7ff fbff 	bl	10828 <XYcZ_add>
    for (i = numBits - 2; i > 0; --i) {
   1102a:	3d01      	subs	r5, #1
   1102c:	d1d8      	bne.n	10fe0 <EccPoint_mult.constprop.0+0x144>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1102e:	f8d8 4000 	ldr.w	r4, [r8]
   11032:	9e03      	ldr	r6, [sp, #12]
   11034:	43e5      	mvns	r5, r4
    }

    nb = !vli_testBit(scalar, 0);
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   11036:	ab14      	add	r3, sp, #80	; 0x50
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   11038:	f004 0401 	and.w	r4, r4, #1
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   1103c:	eb03 1744 	add.w	r7, r3, r4, lsl #5
   11040:	ab24      	add	r3, sp, #144	; 0x90
   11042:	f005 0501 	and.w	r5, r5, #1
   11046:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   1104a:	ab14      	add	r3, sp, #80	; 0x50
   1104c:	eb03 1845 	add.w	r8, r3, r5, lsl #5
   11050:	ab24      	add	r3, sp, #144	; 0x90
   11052:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   11056:	4642      	mov	r2, r8
   11058:	4621      	mov	r1, r4
   1105a:	4638      	mov	r0, r7
   1105c:	462b      	mov	r3, r5
   1105e:	f7ff fc83 	bl	10968 <XYcZ_addC>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   11062:	aa14      	add	r2, sp, #80	; 0x50
   11064:	a91c      	add	r1, sp, #112	; 0x70
   11066:	4630      	mov	r0, r6
   11068:	f7fe faee 	bl	f648 <vli_sub>
    if (l_borrow) {
   1106c:	2800      	cmp	r0, #0
   1106e:	f040 8089 	bne.w	11184 <EccPoint_mult.constprop.0+0x2e8>
    vli_mult(product, left, right);
   11072:	4622      	mov	r2, r4
   11074:	4631      	mov	r1, r6
   11076:	a834      	add	r0, sp, #208	; 0xd0
   11078:	f7fe fb2e 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   1107c:	a934      	add	r1, sp, #208	; 0xd0
   1107e:	4630      	mov	r0, r6
   11080:	f7fe ffc2 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   11084:	4652      	mov	r2, sl
   11086:	4631      	mov	r1, r6
   11088:	a834      	add	r0, sp, #208	; 0xd0
   1108a:	f7fe fb25 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   1108e:	a934      	add	r1, sp, #208	; 0xd0
   11090:	4630      	mov	r0, r6
   11092:	f7fe ffb9 	bl	10008 <vli_mmod_fast>
        if (vli[i]) {
   11096:	6833      	ldr	r3, [r6, #0]
   11098:	2b00      	cmp	r3, #0
   1109a:	d167      	bne.n	1116c <EccPoint_mult.constprop.0+0x2d0>
   1109c:	6873      	ldr	r3, [r6, #4]
   1109e:	2b00      	cmp	r3, #0
   110a0:	d164      	bne.n	1116c <EccPoint_mult.constprop.0+0x2d0>
   110a2:	68b3      	ldr	r3, [r6, #8]
   110a4:	2b00      	cmp	r3, #0
   110a6:	d161      	bne.n	1116c <EccPoint_mult.constprop.0+0x2d0>
   110a8:	68f3      	ldr	r3, [r6, #12]
   110aa:	2b00      	cmp	r3, #0
   110ac:	d15e      	bne.n	1116c <EccPoint_mult.constprop.0+0x2d0>
   110ae:	6933      	ldr	r3, [r6, #16]
   110b0:	2b00      	cmp	r3, #0
   110b2:	d15b      	bne.n	1116c <EccPoint_mult.constprop.0+0x2d0>
   110b4:	6973      	ldr	r3, [r6, #20]
   110b6:	2b00      	cmp	r3, #0
   110b8:	d158      	bne.n	1116c <EccPoint_mult.constprop.0+0x2d0>
   110ba:	69b3      	ldr	r3, [r6, #24]
   110bc:	2b00      	cmp	r3, #0
   110be:	d155      	bne.n	1116c <EccPoint_mult.constprop.0+0x2d0>
   110c0:	69f1      	ldr	r1, [r6, #28]
   110c2:	2900      	cmp	r1, #0
   110c4:	d152      	bne.n	1116c <EccPoint_mult.constprop.0+0x2d0>
        vli[i] = 0;
   110c6:	2220      	movs	r2, #32
   110c8:	4630      	mov	r0, r6
   110ca:	f012 f937 	bl	2333c <memset>
    vli_mult(product, left, right);
   110ce:	9a01      	ldr	r2, [sp, #4]
   110d0:	4631      	mov	r1, r6
   110d2:	a834      	add	r0, sp, #208	; 0xd0
   110d4:	f7fe fb00 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   110d8:	a934      	add	r1, sp, #208	; 0xd0
   110da:	4630      	mov	r0, r6
   110dc:	f7fe ff94 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   110e0:	463a      	mov	r2, r7
   110e2:	4631      	mov	r1, r6
   110e4:	a834      	add	r0, sp, #208	; 0xd0
   110e6:	f7fe faf7 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   110ea:	a934      	add	r1, sp, #208	; 0xd0
   110ec:	4630      	mov	r0, r6
   110ee:	f7fe ff8b 	bl	10008 <vli_mmod_fast>
    vli_modInv(z, z, curve_p);          /* 1 / (xP * Yb * (X1 - X0)) */
    vli_modMult_fast(z, z, point->y); /* yP / (xP * Yb * (X1 - X0)) */
    vli_modMult_fast(z, z, Rx[1 - nb]); /* Xb * yP / (xP * Yb * (X1 - X0)) */
    /* End 1/Z calculation */

    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   110f2:	4623      	mov	r3, r4
   110f4:	463a      	mov	r2, r7
   110f6:	4629      	mov	r1, r5
   110f8:	4640      	mov	r0, r8
   110fa:	f7ff fb95 	bl	10828 <XYcZ_add>
    vli_square(product, left);
   110fe:	4631      	mov	r1, r6
   11100:	a834      	add	r0, sp, #208	; 0xd0
   11102:	f7fe fdc5 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   11106:	a934      	add	r1, sp, #208	; 0xd0
   11108:	a80c      	add	r0, sp, #48	; 0x30
   1110a:	f7fe ff7d 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   1110e:	aa0c      	add	r2, sp, #48	; 0x30
   11110:	a914      	add	r1, sp, #80	; 0x50
   11112:	a834      	add	r0, sp, #208	; 0xd0
   11114:	f7fe fae0 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   11118:	a934      	add	r1, sp, #208	; 0xd0
   1111a:	a814      	add	r0, sp, #80	; 0x50
   1111c:	f7fe ff74 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   11120:	4632      	mov	r2, r6
   11122:	a90c      	add	r1, sp, #48	; 0x30
   11124:	a834      	add	r0, sp, #208	; 0xd0
   11126:	f7fe fad7 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   1112a:	a934      	add	r1, sp, #208	; 0xd0
   1112c:	a80c      	add	r0, sp, #48	; 0x30
   1112e:	f7fe ff6b 	bl	10008 <vli_mmod_fast>
    vli_mult(product, left, right);
   11132:	aa0c      	add	r2, sp, #48	; 0x30
   11134:	a924      	add	r1, sp, #144	; 0x90
   11136:	a834      	add	r0, sp, #208	; 0xd0
   11138:	f7fe face 	bl	f6d8 <vli_mult>
        dest[i] = src[i];
   1113c:	af14      	add	r7, sp, #80	; 0x50
    vli_mmod_fast(result, product);
   1113e:	a934      	add	r1, sp, #208	; 0xd0
   11140:	a824      	add	r0, sp, #144	; 0x90
   11142:	f7fe ff61 	bl	10008 <vli_mmod_fast>
        dest[i] = src[i];
   11146:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   11148:	9c02      	ldr	r4, [sp, #8]
   1114a:	f104 0520 	add.w	r5, r4, #32
   1114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11150:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   11154:	ae24      	add	r6, sp, #144	; 0x90
   11156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1115a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1115c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1115e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   11162:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    apply_z(Rx[0], Ry[0], z);

    vli_set(result->x, Rx[0]);
    vli_set(result->y, Ry[0]);
}
   11166:	b045      	add	sp, #276	; 0x114
   11168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1116c:	4a0e      	ldr	r2, [pc, #56]	; (111a8 <EccPoint_mult.constprop.0+0x30c>)
   1116e:	4631      	mov	r1, r6
   11170:	4630      	mov	r0, r6
   11172:	f7ff f82f 	bl	101d4 <vli_modInv.part.0>
   11176:	e7aa      	b.n	110ce <EccPoint_mult.constprop.0+0x232>
   11178:	a92c      	add	r1, sp, #176	; 0xb0
   1117a:	4632      	mov	r2, r6
   1117c:	a81c      	add	r0, sp, #112	; 0x70
   1117e:	f7ff fd05 	bl	10b8c <EccPoint_double_jacobian.part.0>
   11182:	e706      	b.n	10f92 <EccPoint_mult.constprop.0+0xf6>
        vli_add(result, result, mod);
   11184:	4a08      	ldr	r2, [pc, #32]	; (111a8 <EccPoint_mult.constprop.0+0x30c>)
   11186:	4631      	mov	r1, r6
   11188:	4630      	mov	r0, r6
   1118a:	f7fe fa1d 	bl	f5c8 <vli_add>
   1118e:	e770      	b.n	11072 <EccPoint_mult.constprop.0+0x1d6>
        vli[i] = 0;
   11190:	ae04      	add	r6, sp, #16
        z[0] = 1;
   11192:	2301      	movs	r3, #1
        vli[i] = 0;
   11194:	e9cd 4405 	strd	r4, r4, [sp, #20]
   11198:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1119c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   111a0:	940b      	str	r4, [sp, #44]	; 0x2c
        z[0] = 1;
   111a2:	6033      	str	r3, [r6, #0]
   111a4:	e6a0      	b.n	10ee8 <EccPoint_mult.constprop.0+0x4c>
   111a6:	bf00      	nop
   111a8:	00026450 	.word	0x00026450

000111ac <EccPoint_compute_public_key>:

static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   111ac:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (vli[i]) {
   111ae:	680b      	ldr	r3, [r1, #0]
static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   111b0:	b093      	sub	sp, #76	; 0x4c
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp1[uECC_WORDS];
    uECC_word_t tmp2[uECC_WORDS];
    uECC_word_t *p2[2] = {tmp1, tmp2};
   111b2:	ae02      	add	r6, sp, #8
   111b4:	af0a      	add	r7, sp, #40	; 0x28
   111b6:	e9cd 6700 	strd	r6, r7, [sp]
static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   111ba:	4605      	mov	r5, r0
        if (vli[i]) {
   111bc:	b98b      	cbnz	r3, 111e2 <EccPoint_compute_public_key+0x36>
   111be:	684a      	ldr	r2, [r1, #4]
   111c0:	b97a      	cbnz	r2, 111e2 <EccPoint_compute_public_key+0x36>
   111c2:	688a      	ldr	r2, [r1, #8]
   111c4:	b96a      	cbnz	r2, 111e2 <EccPoint_compute_public_key+0x36>
   111c6:	68ca      	ldr	r2, [r1, #12]
   111c8:	b95a      	cbnz	r2, 111e2 <EccPoint_compute_public_key+0x36>
   111ca:	690a      	ldr	r2, [r1, #16]
   111cc:	b94a      	cbnz	r2, 111e2 <EccPoint_compute_public_key+0x36>
   111ce:	694a      	ldr	r2, [r1, #20]
   111d0:	b93a      	cbnz	r2, 111e2 <EccPoint_compute_public_key+0x36>
   111d2:	698b      	ldr	r3, [r1, #24]
   111d4:	2b00      	cmp	r3, #0
   111d6:	d168      	bne.n	112aa <EccPoint_compute_public_key+0xfe>
   111d8:	69cb      	ldr	r3, [r1, #28]
   111da:	bb5b      	cbnz	r3, 11234 <EccPoint_compute_public_key+0x88>
    uECC_word_t carry;
#endif

    /* Make sure the private key is in the range [1, n-1]. */
    if (vli_isZero(private)) {
        return 0;
   111dc:	2000      	movs	r0, #0

    if (EccPoint_isZero(result)) {
        return 0;
    }
    return 1;
}
   111de:	b013      	add	sp, #76	; 0x4c
   111e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (left[i] > right[i]) {
   111e2:	69ca      	ldr	r2, [r1, #28]
   111e4:	3201      	adds	r2, #1
   111e6:	d125      	bne.n	11234 <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   111e8:	698a      	ldr	r2, [r1, #24]
   111ea:	2a00      	cmp	r2, #0
   111ec:	d1f6      	bne.n	111dc <EccPoint_compute_public_key+0x30>
   111ee:	694a      	ldr	r2, [r1, #20]
        if (left[i] > right[i]) {
   111f0:	3201      	adds	r2, #1
   111f2:	d11f      	bne.n	11234 <EccPoint_compute_public_key+0x88>
   111f4:	690a      	ldr	r2, [r1, #16]
   111f6:	3201      	adds	r2, #1
   111f8:	d11c      	bne.n	11234 <EccPoint_compute_public_key+0x88>
   111fa:	68ca      	ldr	r2, [r1, #12]
   111fc:	482d      	ldr	r0, [pc, #180]	; (112b4 <EccPoint_compute_public_key+0x108>)
   111fe:	4282      	cmp	r2, r0
   11200:	d918      	bls.n	11234 <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   11202:	3001      	adds	r0, #1
   11204:	4282      	cmp	r2, r0
   11206:	d1e9      	bne.n	111dc <EccPoint_compute_public_key+0x30>
        if (left[i] > right[i]) {
   11208:	f1a0 50ae 	sub.w	r0, r0, #364904448	; 0x15c00000
   1120c:	688a      	ldr	r2, [r1, #8]
   1120e:	f5a0 2075 	sub.w	r0, r0, #1003520	; 0xf5000
   11212:	f6a0 402a 	subw	r0, r0, #3114	; 0xc2a
   11216:	4282      	cmp	r2, r0
   11218:	d90c      	bls.n	11234 <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   1121a:	3001      	adds	r0, #1
   1121c:	4282      	cmp	r2, r0
   1121e:	d1dd      	bne.n	111dc <EccPoint_compute_public_key+0x30>
        if (left[i] > right[i]) {
   11220:	684a      	ldr	r2, [r1, #4]
   11222:	4825      	ldr	r0, [pc, #148]	; (112b8 <EccPoint_compute_public_key+0x10c>)
   11224:	4282      	cmp	r2, r0
   11226:	d905      	bls.n	11234 <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   11228:	3001      	adds	r0, #1
   1122a:	4282      	cmp	r2, r0
   1122c:	d1d6      	bne.n	111dc <EccPoint_compute_public_key+0x30>
        if (left[i] > right[i]) {
   1122e:	4a23      	ldr	r2, [pc, #140]	; (112bc <EccPoint_compute_public_key+0x110>)
   11230:	4293      	cmp	r3, r2
   11232:	d8d3      	bhi.n	111dc <EccPoint_compute_public_key+0x30>
    carry = vli_add(tmp1, private, curve_n);
   11234:	4a22      	ldr	r2, [pc, #136]	; (112c0 <EccPoint_compute_public_key+0x114>)
   11236:	4630      	mov	r0, r6
   11238:	f7fe f9c6 	bl	f5c8 <vli_add>
    vli_add(tmp2, tmp1, curve_n);
   1123c:	4a20      	ldr	r2, [pc, #128]	; (112c0 <EccPoint_compute_public_key+0x114>)
    carry = vli_add(tmp1, private, curve_n);
   1123e:	4604      	mov	r4, r0
    vli_add(tmp2, tmp1, curve_n);
   11240:	4631      	mov	r1, r6
   11242:	4638      	mov	r0, r7
   11244:	f7fe f9c0 	bl	f5c8 <vli_add>
    EccPoint_mult(result, &curve_G, p2[!carry], 0, (uECC_BYTES * 8) + 1);
   11248:	fab4 f384 	clz	r3, r4
   1124c:	aa12      	add	r2, sp, #72	; 0x48
   1124e:	095b      	lsrs	r3, r3, #5
   11250:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11254:	491b      	ldr	r1, [pc, #108]	; (112c4 <EccPoint_compute_public_key+0x118>)
   11256:	f853 2c48 	ldr.w	r2, [r3, #-72]
   1125a:	4628      	mov	r0, r5
   1125c:	2300      	movs	r3, #0
   1125e:	f7ff fe1d 	bl	10e9c <EccPoint_mult.constprop.0>
        if (vli[i]) {
   11262:	682b      	ldr	r3, [r5, #0]
   11264:	b9f3      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   11266:	686b      	ldr	r3, [r5, #4]
   11268:	b9e3      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   1126a:	68ab      	ldr	r3, [r5, #8]
   1126c:	b9d3      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   1126e:	68eb      	ldr	r3, [r5, #12]
   11270:	b9c3      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   11272:	692b      	ldr	r3, [r5, #16]
   11274:	b9b3      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   11276:	696b      	ldr	r3, [r5, #20]
   11278:	b9a3      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   1127a:	69ab      	ldr	r3, [r5, #24]
   1127c:	b993      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   1127e:	69eb      	ldr	r3, [r5, #28]
   11280:	b983      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   11282:	6a2b      	ldr	r3, [r5, #32]
   11284:	b973      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   11286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11288:	b963      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   1128a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1128c:	b953      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   1128e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   11290:	b943      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   11292:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   11294:	b933      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   11296:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   11298:	b923      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   1129a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1129c:	b913      	cbnz	r3, 112a4 <EccPoint_compute_public_key+0xf8>
   1129e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   112a0:	2b00      	cmp	r3, #0
   112a2:	d09b      	beq.n	111dc <EccPoint_compute_public_key+0x30>
    return 1;
   112a4:	2001      	movs	r0, #1
}
   112a6:	b013      	add	sp, #76	; 0x4c
   112a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (left[i] > right[i]) {
   112aa:	69cb      	ldr	r3, [r1, #28]
   112ac:	3301      	adds	r3, #1
   112ae:	d1c1      	bne.n	11234 <EccPoint_compute_public_key+0x88>
   112b0:	e794      	b.n	111dc <EccPoint_compute_public_key+0x30>
   112b2:	bf00      	nop
   112b4:	bce6faac 	.word	0xbce6faac
   112b8:	f3b9cac1 	.word	0xf3b9cac1
   112bc:	fc632550 	.word	0xfc632550
   112c0:	00026430 	.word	0x00026430
   112c4:	000263d0 	.word	0x000263d0

000112c8 <uECC_set_rng>:
    g_rng_function = rng_function;
   112c8:	4b01      	ldr	r3, [pc, #4]	; (112d0 <uECC_set_rng+0x8>)
   112ca:	6018      	str	r0, [r3, #0]
}
   112cc:	4770      	bx	lr
   112ce:	bf00      	nop
   112d0:	10002b64 	.word	0x10002b64

000112d4 <uECC_make_key>:
    }
}

#endif /* uECC_WORD_SIZE */

int uECC_make_key(uint8_t public_key[uECC_BYTES*2], uint8_t private_key[uECC_BYTES]) {
   112d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   112d6:	4e81      	ldr	r6, [pc, #516]	; (114dc <uECC_make_key+0x208>)
   112d8:	b099      	sub	sp, #100	; 0x64
   112da:	4605      	mov	r5, r0
   112dc:	460f      	mov	r7, r1
   112de:	2440      	movs	r4, #64	; 0x40
   112e0:	e002      	b.n	112e8 <uECC_make_key+0x14>
    uECC_word_t private[uECC_WORDS];
    EccPoint public;
    uECC_word_t tries;
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   112e2:	3c01      	subs	r4, #1
   112e4:	f000 80f6 	beq.w	114d4 <uECC_make_key+0x200>
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   112e8:	6833      	ldr	r3, [r6, #0]
   112ea:	2120      	movs	r1, #32
   112ec:	4668      	mov	r0, sp
   112ee:	4798      	blx	r3
   112f0:	2800      	cmp	r0, #0
   112f2:	d0f6      	beq.n	112e2 <uECC_make_key+0xe>
                EccPoint_compute_public_key(&public, private)) {
   112f4:	4669      	mov	r1, sp
   112f6:	a808      	add	r0, sp, #32
   112f8:	f7ff ff58 	bl	111ac <EccPoint_compute_public_key>
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   112fc:	2800      	cmp	r0, #0
   112fe:	d0f0      	beq.n	112e2 <uECC_make_key+0xe>
        digit[0] = (uint8_t)(native[i] >> 24);
   11300:	e9dd 3400 	ldrd	r3, r4, [sp]
   11304:	0e1a      	lsrs	r2, r3, #24
   11306:	773a      	strb	r2, [r7, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   11308:	0c1a      	lsrs	r2, r3, #16
        digit[0] = (uint8_t)(native[i] >> 24);
   1130a:	9802      	ldr	r0, [sp, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   1130c:	777a      	strb	r2, [r7, #29]
        digit[2] = (uint8_t)(native[i] >> 8);
   1130e:	0a1a      	lsrs	r2, r3, #8
   11310:	77ba      	strb	r2, [r7, #30]
        digit[3] = (uint8_t)(native[i]);
   11312:	76fc      	strb	r4, [r7, #27]
        digit[0] = (uint8_t)(native[i] >> 24);
   11314:	0e22      	lsrs	r2, r4, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   11316:	0c26      	lsrs	r6, r4, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   11318:	0a24      	lsrs	r4, r4, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1131a:	9903      	ldr	r1, [sp, #12]
        digit[2] = (uint8_t)(native[i] >> 8);
   1131c:	76bc      	strb	r4, [r7, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   1131e:	0e04      	lsrs	r4, r0, #24
        digit[3] = (uint8_t)(native[i]);
   11320:	75f8      	strb	r0, [r7, #23]
        digit[0] = (uint8_t)(native[i] >> 24);
   11322:	753c      	strb	r4, [r7, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   11324:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   11326:	0a00      	lsrs	r0, r0, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   11328:	763a      	strb	r2, [r7, #24]
        digit[2] = (uint8_t)(native[i] >> 8);
   1132a:	75b8      	strb	r0, [r7, #22]
        digit[0] = (uint8_t)(native[i] >> 24);
   1132c:	9a04      	ldr	r2, [sp, #16]
        digit[3] = (uint8_t)(native[i]);
   1132e:	74f9      	strb	r1, [r7, #19]
        digit[0] = (uint8_t)(native[i] >> 24);
   11330:	0e08      	lsrs	r0, r1, #24
   11332:	7438      	strb	r0, [r7, #16]
        digit[1] = (uint8_t)(native[i] >> 16);
   11334:	0c08      	lsrs	r0, r1, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   11336:	0a09      	lsrs	r1, r1, #8
        digit[3] = (uint8_t)(native[i]);
   11338:	77fb      	strb	r3, [r7, #31]
        digit[2] = (uint8_t)(native[i] >> 8);
   1133a:	74b9      	strb	r1, [r7, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   1133c:	9b05      	ldr	r3, [sp, #20]
        digit[3] = (uint8_t)(native[i]);
   1133e:	73fa      	strb	r2, [r7, #15]
        digit[0] = (uint8_t)(native[i] >> 24);
   11340:	0e11      	lsrs	r1, r2, #24
   11342:	7339      	strb	r1, [r7, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   11344:	0c11      	lsrs	r1, r2, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   11346:	0a12      	lsrs	r2, r2, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   11348:	f8dd c018 	ldr.w	ip, [sp, #24]
        digit[2] = (uint8_t)(native[i] >> 8);
   1134c:	73ba      	strb	r2, [r7, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   1134e:	0e1a      	lsrs	r2, r3, #24
        digit[3] = (uint8_t)(native[i]);
   11350:	72fb      	strb	r3, [r7, #11]
        digit[0] = (uint8_t)(native[i] >> 24);
   11352:	723a      	strb	r2, [r7, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   11354:	0c1a      	lsrs	r2, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   11356:	0a1b      	lsrs	r3, r3, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   11358:	727a      	strb	r2, [r7, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   1135a:	72bb      	strb	r3, [r7, #10]
        digit[0] = (uint8_t)(native[i] >> 24);
   1135c:	ea4f 621c 	mov.w	r2, ip, lsr #24
        digit[1] = (uint8_t)(native[i] >> 16);
   11360:	ea4f 431c 	mov.w	r3, ip, lsr #16
   11364:	767e      	strb	r6, [r7, #25]
   11366:	757c      	strb	r4, [r7, #21]
   11368:	7478      	strb	r0, [r7, #17]
   1136a:	7379      	strb	r1, [r7, #13]
        digit[0] = (uint8_t)(native[i] >> 24);
   1136c:	713a      	strb	r2, [r7, #4]
        digit[1] = (uint8_t)(native[i] >> 16);
   1136e:	717b      	strb	r3, [r7, #5]
        digit[0] = (uint8_t)(native[i] >> 24);
   11370:	9e07      	ldr	r6, [sp, #28]
   11372:	9c08      	ldr	r4, [sp, #32]
        digit[3] = (uint8_t)(native[i]);
   11374:	f887 c007 	strb.w	ip, [r7, #7]
        digit[2] = (uint8_t)(native[i] >> 8);
   11378:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1137c:	71bb      	strb	r3, [r7, #6]
        digit[3] = (uint8_t)(native[i]);
   1137e:	70fe      	strb	r6, [r7, #3]
        digit[0] = (uint8_t)(native[i] >> 24);
   11380:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
   11384:	0e33      	lsrs	r3, r6, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   11386:	ea4f 4c16 	mov.w	ip, r6, lsr #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1138a:	0a36      	lsrs	r6, r6, #8
   1138c:	70be      	strb	r6, [r7, #2]
        digit[0] = (uint8_t)(native[i] >> 24);
   1138e:	0e26      	lsrs	r6, r4, #24
   11390:	703b      	strb	r3, [r7, #0]
        digit[1] = (uint8_t)(native[i] >> 16);
   11392:	f887 c001 	strb.w	ip, [r7, #1]
        digit[3] = (uint8_t)(native[i]);
   11396:	77ec      	strb	r4, [r5, #31]
        digit[0] = (uint8_t)(native[i] >> 24);
   11398:	772e      	strb	r6, [r5, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   1139a:	0c26      	lsrs	r6, r4, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1139c:	0a24      	lsrs	r4, r4, #8
   1139e:	77ac      	strb	r4, [r5, #30]
        digit[0] = (uint8_t)(native[i] >> 24);
   113a0:	0e04      	lsrs	r4, r0, #24
   113a2:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
        digit[3] = (uint8_t)(native[i]);
   113a6:	76e8      	strb	r0, [r5, #27]
        digit[0] = (uint8_t)(native[i] >> 24);
   113a8:	762c      	strb	r4, [r5, #24]
        digit[1] = (uint8_t)(native[i] >> 16);
   113aa:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   113ac:	0a00      	lsrs	r0, r0, #8
   113ae:	76a8      	strb	r0, [r5, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   113b0:	0e08      	lsrs	r0, r1, #24
   113b2:	7528      	strb	r0, [r5, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   113b4:	0c08      	lsrs	r0, r1, #16
   113b6:	7568      	strb	r0, [r5, #21]
        digit[0] = (uint8_t)(native[i] >> 24);
   113b8:	0e10      	lsrs	r0, r2, #24
        digit[3] = (uint8_t)(native[i]);
   113ba:	75e9      	strb	r1, [r5, #23]
   113bc:	74ea      	strb	r2, [r5, #19]
        digit[0] = (uint8_t)(native[i] >> 24);
   113be:	7428      	strb	r0, [r5, #16]
        digit[2] = (uint8_t)(native[i] >> 8);
   113c0:	0a09      	lsrs	r1, r1, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   113c2:	0c10      	lsrs	r0, r2, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   113c4:	0a12      	lsrs	r2, r2, #8
        digit[3] = (uint8_t)(native[i]);
   113c6:	73eb      	strb	r3, [r5, #15]
        digit[2] = (uint8_t)(native[i] >> 8);
   113c8:	75a9      	strb	r1, [r5, #22]
   113ca:	74aa      	strb	r2, [r5, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   113cc:	0e19      	lsrs	r1, r3, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   113ce:	0c1a      	lsrs	r2, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   113d0:	0a1b      	lsrs	r3, r3, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   113d2:	776e      	strb	r6, [r5, #29]
   113d4:	7468      	strb	r0, [r5, #17]
        digit[0] = (uint8_t)(native[i] >> 24);
   113d6:	7329      	strb	r1, [r5, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   113d8:	736a      	strb	r2, [r5, #13]
   113da:	766c      	strb	r4, [r5, #25]
        digit[2] = (uint8_t)(native[i] >> 8);
   113dc:	73ab      	strb	r3, [r5, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   113de:	e9dd 340d 	ldrd	r3, r4, [sp, #52]	; 0x34
   113e2:	0e1a      	lsrs	r2, r3, #24
   113e4:	722a      	strb	r2, [r5, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   113e6:	0c1a      	lsrs	r2, r3, #16
        digit[0] = (uint8_t)(native[i] >> 24);
   113e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
        digit[1] = (uint8_t)(native[i] >> 16);
   113ea:	726a      	strb	r2, [r5, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   113ec:	0a1a      	lsrs	r2, r3, #8
   113ee:	72aa      	strb	r2, [r5, #10]
        digit[3] = (uint8_t)(native[i]);
   113f0:	71ec      	strb	r4, [r5, #7]
        digit[0] = (uint8_t)(native[i] >> 24);
   113f2:	0e22      	lsrs	r2, r4, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   113f4:	0c27      	lsrs	r7, r4, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   113f6:	0a24      	lsrs	r4, r4, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   113f8:	9910      	ldr	r1, [sp, #64]	; 0x40
        digit[2] = (uint8_t)(native[i] >> 8);
   113fa:	71ac      	strb	r4, [r5, #6]
        digit[0] = (uint8_t)(native[i] >> 24);
   113fc:	0e04      	lsrs	r4, r0, #24
        digit[3] = (uint8_t)(native[i]);
   113fe:	70e8      	strb	r0, [r5, #3]
        digit[0] = (uint8_t)(native[i] >> 24);
   11400:	702c      	strb	r4, [r5, #0]
        digit[1] = (uint8_t)(native[i] >> 16);
   11402:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   11404:	0a00      	lsrs	r0, r0, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   11406:	712a      	strb	r2, [r5, #4]
        digit[2] = (uint8_t)(native[i] >> 8);
   11408:	70a8      	strb	r0, [r5, #2]
        digit[0] = (uint8_t)(native[i] >> 24);
   1140a:	9a11      	ldr	r2, [sp, #68]	; 0x44
        digit[3] = (uint8_t)(native[i]);
   1140c:	f885 103f 	strb.w	r1, [r5, #63]	; 0x3f
        digit[0] = (uint8_t)(native[i] >> 24);
   11410:	0e08      	lsrs	r0, r1, #24
   11412:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        digit[1] = (uint8_t)(native[i] >> 16);
   11416:	0c08      	lsrs	r0, r1, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   11418:	0a09      	lsrs	r1, r1, #8
        digit[3] = (uint8_t)(native[i]);
   1141a:	72eb      	strb	r3, [r5, #11]
        digit[2] = (uint8_t)(native[i] >> 8);
   1141c:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
        digit[0] = (uint8_t)(native[i] >> 24);
   11420:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11422:	9e13      	ldr	r6, [sp, #76]	; 0x4c
        digit[3] = (uint8_t)(native[i]);
   11424:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
        digit[0] = (uint8_t)(native[i] >> 24);
   11428:	0e11      	lsrs	r1, r2, #24
   1142a:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
        digit[1] = (uint8_t)(native[i] >> 16);
   1142e:	0c11      	lsrs	r1, r2, #16
   11430:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
        digit[0] = (uint8_t)(native[i] >> 24);
   11434:	0e19      	lsrs	r1, r3, #24
        digit[3] = (uint8_t)(native[i]);
   11436:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        digit[0] = (uint8_t)(native[i] >> 24);
   1143a:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
        digit[2] = (uint8_t)(native[i] >> 8);
   1143e:	0a12      	lsrs	r2, r2, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   11440:	0c19      	lsrs	r1, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   11442:	0a1b      	lsrs	r3, r3, #8
   11444:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
   11448:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
        digit[0] = (uint8_t)(native[i] >> 24);
   1144c:	0e32      	lsrs	r2, r6, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   1144e:	0c33      	lsrs	r3, r6, #16
   11450:	706c      	strb	r4, [r5, #1]
   11452:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
   11456:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
        digit[0] = (uint8_t)(native[i] >> 24);
   1145a:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
        digit[1] = (uint8_t)(native[i] >> 16);
   1145e:	716f      	strb	r7, [r5, #5]
   11460:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
        digit[0] = (uint8_t)(native[i] >> 24);
   11464:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
        digit[2] = (uint8_t)(native[i] >> 8);
   11468:	0a33      	lsrs	r3, r6, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   1146a:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1146c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
        digit[3] = (uint8_t)(native[i]);
   11470:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
        digit[0] = (uint8_t)(native[i] >> 24);
   11474:	0e03      	lsrs	r3, r0, #24
        digit[2] = (uint8_t)(native[i] >> 8);
   11476:	0a00      	lsrs	r0, r0, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   11478:	9a16      	ldr	r2, [sp, #88]	; 0x58
        digit[2] = (uint8_t)(native[i] >> 8);
   1147a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        digit[0] = (uint8_t)(native[i] >> 24);
   1147e:	0e08      	lsrs	r0, r1, #24
   11480:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
        digit[1] = (uint8_t)(native[i] >> 16);
   11484:	0c08      	lsrs	r0, r1, #16
        digit[0] = (uint8_t)(native[i] >> 24);
   11486:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
        digit[1] = (uint8_t)(native[i] >> 16);
   1148a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
        digit[0] = (uint8_t)(native[i] >> 24);
   1148e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        digit[3] = (uint8_t)(native[i]);
   11490:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
        digit[0] = (uint8_t)(native[i] >> 24);
   11494:	0e10      	lsrs	r0, r2, #24
        digit[3] = (uint8_t)(native[i]);
   11496:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
        digit[2] = (uint8_t)(native[i] >> 8);
   1149a:	0a09      	lsrs	r1, r1, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1149c:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        digit[1] = (uint8_t)(native[i] >> 16);
   114a0:	0c10      	lsrs	r0, r2, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   114a2:	0a12      	lsrs	r2, r2, #8
        digit[3] = (uint8_t)(native[i]);
   114a4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
        digit[2] = (uint8_t)(native[i] >> 8);
   114a8:	f885 102a 	strb.w	r1, [r5, #42]	; 0x2a
        digit[1] = (uint8_t)(native[i] >> 16);
   114ac:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        digit[0] = (uint8_t)(native[i] >> 24);
   114b0:	0e19      	lsrs	r1, r3, #24
        digit[2] = (uint8_t)(native[i] >> 8);
   114b2:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
            vli_nativeToBytes(private_key, private);
            vli_nativeToBytes(public_key, public.x);
            vli_nativeToBytes(public_key + uECC_BYTES, public.y);
            return 1;
   114b6:	2001      	movs	r0, #1
        digit[1] = (uint8_t)(native[i] >> 16);
   114b8:	0c1a      	lsrs	r2, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   114ba:	0a1b      	lsrs	r3, r3, #8
        digit[3] = (uint8_t)(native[i]);
   114bc:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
        digit[1] = (uint8_t)(native[i] >> 16);
   114c0:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
        digit[0] = (uint8_t)(native[i] >> 24);
   114c4:	f885 1020 	strb.w	r1, [r5, #32]
        digit[1] = (uint8_t)(native[i] >> 16);
   114c8:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
        digit[2] = (uint8_t)(native[i] >> 8);
   114cc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
        }
    }
    return 0;
}
   114d0:	b019      	add	sp, #100	; 0x64
   114d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
   114d4:	4620      	mov	r0, r4
}
   114d6:	b019      	add	sp, #100	; 0x64
   114d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114da:	bf00      	nop
   114dc:	10002b64 	.word	0x10002b64

000114e0 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t public_key[uECC_BYTES*2],
                       const uint8_t private_key[uECC_BYTES],
                       uint8_t secret[uECC_BYTES]) {
   114e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   114e4:	b0bc      	sub	sp, #240	; 0xf0
    uECC_word_t random[uECC_WORDS];
    uECC_word_t *initial_Z = 0;
    uECC_word_t tries;
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp[uECC_WORDS];
    uECC_word_t *p2[2] = {private, tmp};
   114e6:	f10d 0810 	add.w	r8, sp, #16
   114ea:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   114ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
#endif

    // Try to get a random initial Z value to improve protection against side-channel
    // attacks. If the RNG fails every time (eg it was not defined), we continue so that
    // uECC_shared_secret() can still work without an RNG defined.
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   114f2:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 116dc <uECC_shared_secret+0x1fc>
                       uint8_t secret[uECC_BYTES]) {
   114f6:	4606      	mov	r6, r0
   114f8:	460f      	mov	r7, r1
   114fa:	4615      	mov	r5, r2
    uECC_word_t *p2[2] = {private, tmp};
   114fc:	2440      	movs	r4, #64	; 0x40
   114fe:	e001      	b.n	11504 <uECC_shared_secret+0x24>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   11500:	3c01      	subs	r4, #1
   11502:	d018      	beq.n	11536 <uECC_shared_secret+0x56>
        if (g_rng_function((uint8_t *)random, sizeof(random)) && !vli_isZero(random)) {
   11504:	f8da 3000 	ldr.w	r3, [sl]
   11508:	2120      	movs	r1, #32
   1150a:	a80c      	add	r0, sp, #48	; 0x30
   1150c:	4798      	blx	r3
   1150e:	2800      	cmp	r0, #0
   11510:	d0f6      	beq.n	11500 <uECC_shared_secret+0x20>
        if (vli[i]) {
   11512:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
   11516:	980c      	ldr	r0, [sp, #48]	; 0x30
   11518:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1151a:	4303      	orrs	r3, r0
   1151c:	431a      	orrs	r2, r3
   1151e:	9810      	ldr	r0, [sp, #64]	; 0x40
   11520:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11522:	4311      	orrs	r1, r2
   11524:	4308      	orrs	r0, r1
   11526:	4318      	orrs	r0, r3
   11528:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1152c:	4310      	orrs	r0, r2
   1152e:	4303      	orrs	r3, r0
   11530:	d0e6      	beq.n	11500 <uECC_shared_secret+0x20>
            initial_Z = random;
   11532:	ab0c      	add	r3, sp, #48	; 0x30
   11534:	e000      	b.n	11538 <uECC_shared_secret+0x58>
    uECC_word_t *initial_Z = 0;
   11536:	4623      	mov	r3, r4
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   11538:	69fa      	ldr	r2, [r7, #28]
   1153a:	6879      	ldr	r1, [r7, #4]
   1153c:	9301      	str	r3, [sp, #4]
   1153e:	ba12      	rev	r2, r2
   11540:	9204      	str	r2, [sp, #16]
   11542:	69ba      	ldr	r2, [r7, #24]
   11544:	ba12      	rev	r2, r2
   11546:	9205      	str	r2, [sp, #20]
   11548:	697a      	ldr	r2, [r7, #20]
   1154a:	ba12      	rev	r2, r2
   1154c:	9206      	str	r2, [sp, #24]
   1154e:	693a      	ldr	r2, [r7, #16]
   11550:	ba12      	rev	r2, r2
   11552:	9207      	str	r2, [sp, #28]
   11554:	68fa      	ldr	r2, [r7, #12]
   11556:	ba12      	rev	r2, r2
   11558:	9208      	str	r2, [sp, #32]
   1155a:	68ba      	ldr	r2, [r7, #8]
   1155c:	ba12      	rev	r2, r2
   1155e:	9209      	str	r2, [sp, #36]	; 0x24
   11560:	683a      	ldr	r2, [r7, #0]
   11562:	ba12      	rev	r2, r2
   11564:	920b      	str	r2, [sp, #44]	; 0x2c
   11566:	69f2      	ldr	r2, [r6, #28]
   11568:	ba12      	rev	r2, r2
   1156a:	921c      	str	r2, [sp, #112]	; 0x70
   1156c:	69b2      	ldr	r2, [r6, #24]
   1156e:	ba12      	rev	r2, r2
   11570:	921d      	str	r2, [sp, #116]	; 0x74
   11572:	6972      	ldr	r2, [r6, #20]
   11574:	ba12      	rev	r2, r2
   11576:	921e      	str	r2, [sp, #120]	; 0x78
   11578:	6932      	ldr	r2, [r6, #16]
   1157a:	ba12      	rev	r2, r2
   1157c:	921f      	str	r2, [sp, #124]	; 0x7c
   1157e:	68f2      	ldr	r2, [r6, #12]
   11580:	ba12      	rev	r2, r2
   11582:	9220      	str	r2, [sp, #128]	; 0x80
   11584:	68b2      	ldr	r2, [r6, #8]
   11586:	ba12      	rev	r2, r2
   11588:	9221      	str	r2, [sp, #132]	; 0x84
   1158a:	6872      	ldr	r2, [r6, #4]
   1158c:	ba12      	rev	r2, r2
   1158e:	9222      	str	r2, [sp, #136]	; 0x88
   11590:	6832      	ldr	r2, [r6, #0]
   11592:	ba09      	rev	r1, r1
   11594:	ba12      	rev	r2, r2
   11596:	910a      	str	r1, [sp, #40]	; 0x28
   11598:	9223      	str	r2, [sp, #140]	; 0x8c
   1159a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
   1159c:	6a71      	ldr	r1, [r6, #36]	; 0x24
   1159e:	ba12      	rev	r2, r2
   115a0:	9224      	str	r2, [sp, #144]	; 0x90
   115a2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   115a4:	ba12      	rev	r2, r2
   115a6:	9225      	str	r2, [sp, #148]	; 0x94
   115a8:	6b72      	ldr	r2, [r6, #52]	; 0x34
   115aa:	ba12      	rev	r2, r2
   115ac:	9226      	str	r2, [sp, #152]	; 0x98
   115ae:	6b32      	ldr	r2, [r6, #48]	; 0x30
   115b0:	ba12      	rev	r2, r2
   115b2:	9227      	str	r2, [sp, #156]	; 0x9c
   115b4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   115b6:	ba12      	rev	r2, r2
   115b8:	9228      	str	r2, [sp, #160]	; 0xa0
   115ba:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   115bc:	ba12      	rev	r2, r2
   115be:	9229      	str	r2, [sp, #164]	; 0xa4
   115c0:	6a32      	ldr	r2, [r6, #32]
   115c2:	ba09      	rev	r1, r1
   115c4:	ba12      	rev	r2, r2
   115c6:	912a      	str	r1, [sp, #168]	; 0xa8
   115c8:	922b      	str	r2, [sp, #172]	; 0xac
    // Don't regularize the bitcount for secp160r1.
    EccPoint_mult(&product, &public, private, initial_Z, vli_numBits(private, uECC_WORDS));
#else
    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(private, private, curve_n);
   115ca:	4641      	mov	r1, r8
   115cc:	4a42      	ldr	r2, [pc, #264]	; (116d8 <uECC_shared_secret+0x1f8>)
   115ce:	4640      	mov	r0, r8
   115d0:	f7fd fffa 	bl	f5c8 <vli_add>
    vli_add(tmp, private, curve_n);
   115d4:	4a40      	ldr	r2, [pc, #256]	; (116d8 <uECC_shared_secret+0x1f8>)
    carry = vli_add(private, private, curve_n);
   115d6:	4604      	mov	r4, r0
    vli_add(tmp, private, curve_n);
   115d8:	4641      	mov	r1, r8
   115da:	4648      	mov	r0, r9
   115dc:	f7fd fff4 	bl	f5c8 <vli_add>
    EccPoint_mult(&product, &public, p2[!carry], initial_Z, (uECC_BYTES * 8) + 1);
   115e0:	fab4 f284 	clz	r2, r4
   115e4:	ab3c      	add	r3, sp, #240	; 0xf0
   115e6:	0952      	lsrs	r2, r2, #5
   115e8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   115ec:	a91c      	add	r1, sp, #112	; 0x70
   115ee:	9b01      	ldr	r3, [sp, #4]
   115f0:	f852 2ce8 	ldr.w	r2, [r2, #-232]
   115f4:	a82c      	add	r0, sp, #176	; 0xb0
   115f6:	f7ff fc51 	bl	10e9c <EccPoint_mult.constprop.0>
        digit[0] = (uint8_t)(native[i] >> 24);
   115fa:	e9dd 322c 	ldrd	r3, r2, [sp, #176]	; 0xb0
   115fe:	0e18      	lsrs	r0, r3, #24
   11600:	7728      	strb	r0, [r5, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   11602:	0c18      	lsrs	r0, r3, #16
   11604:	7768      	strb	r0, [r5, #29]
        digit[2] = (uint8_t)(native[i] >> 8);
   11606:	0a18      	lsrs	r0, r3, #8
   11608:	77a8      	strb	r0, [r5, #30]
        digit[0] = (uint8_t)(native[i] >> 24);
   1160a:	0e10      	lsrs	r0, r2, #24
   1160c:	992e      	ldr	r1, [sp, #184]	; 0xb8
   1160e:	7628      	strb	r0, [r5, #24]
        digit[1] = (uint8_t)(native[i] >> 16);
   11610:	0c10      	lsrs	r0, r2, #16
   11612:	7668      	strb	r0, [r5, #25]
        digit[2] = (uint8_t)(native[i] >> 8);
   11614:	0a10      	lsrs	r0, r2, #8
   11616:	76a8      	strb	r0, [r5, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   11618:	0e08      	lsrs	r0, r1, #24
   1161a:	7528      	strb	r0, [r5, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   1161c:	0c08      	lsrs	r0, r1, #16
   1161e:	7568      	strb	r0, [r5, #21]
        digit[2] = (uint8_t)(native[i] >> 8);
   11620:	0a08      	lsrs	r0, r1, #8
   11622:	75a8      	strb	r0, [r5, #22]
        digit[0] = (uint8_t)(native[i] >> 24);
   11624:	982f      	ldr	r0, [sp, #188]	; 0xbc
   11626:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   11628:	9e31      	ldr	r6, [sp, #196]	; 0xc4
   1162a:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
        digit[3] = (uint8_t)(native[i]);
   1162e:	77eb      	strb	r3, [r5, #31]
        digit[0] = (uint8_t)(native[i] >> 24);
   11630:	0e07      	lsrs	r7, r0, #24
   11632:	742f      	strb	r7, [r5, #16]
        digit[1] = (uint8_t)(native[i] >> 16);
   11634:	0c07      	lsrs	r7, r0, #16
   11636:	746f      	strb	r7, [r5, #17]
        digit[2] = (uint8_t)(native[i] >> 8);
   11638:	0a07      	lsrs	r7, r0, #8
   1163a:	74af      	strb	r7, [r5, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   1163c:	0e27      	lsrs	r7, r4, #24
   1163e:	732f      	strb	r7, [r5, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   11640:	0c27      	lsrs	r7, r4, #16
   11642:	736f      	strb	r7, [r5, #13]
        digit[2] = (uint8_t)(native[i] >> 8);
   11644:	0a27      	lsrs	r7, r4, #8
   11646:	73af      	strb	r7, [r5, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   11648:	0e37      	lsrs	r7, r6, #24
   1164a:	722f      	strb	r7, [r5, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   1164c:	0c37      	lsrs	r7, r6, #16
   1164e:	726f      	strb	r7, [r5, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   11650:	0a37      	lsrs	r7, r6, #8
   11652:	72af      	strb	r7, [r5, #10]
        digit[0] = (uint8_t)(native[i] >> 24);
   11654:	ea4f 671c 	mov.w	r7, ip, lsr #24
   11658:	712f      	strb	r7, [r5, #4]
        digit[1] = (uint8_t)(native[i] >> 16);
   1165a:	ea4f 471c 	mov.w	r7, ip, lsr #16
        digit[3] = (uint8_t)(native[i]);
   1165e:	76ea      	strb	r2, [r5, #27]
   11660:	75e9      	strb	r1, [r5, #23]
   11662:	74e8      	strb	r0, [r5, #19]
   11664:	73ec      	strb	r4, [r5, #15]
   11666:	72ee      	strb	r6, [r5, #11]
        digit[1] = (uint8_t)(native[i] >> 16);
   11668:	716f      	strb	r7, [r5, #5]
        digit[0] = (uint8_t)(native[i] >> 24);
   1166a:	9f33      	ldr	r7, [sp, #204]	; 0xcc
        digit[3] = (uint8_t)(native[i]);
   1166c:	f885 c007 	strb.w	ip, [r5, #7]
        digit[2] = (uint8_t)(native[i] >> 8);
   11670:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
   11674:	f885 e006 	strb.w	lr, [r5, #6]
        digit[0] = (uint8_t)(native[i] >> 24);
   11678:	ea4f 6e17 	mov.w	lr, r7, lsr #24
   1167c:	f885 e000 	strb.w	lr, [r5]
        digit[1] = (uint8_t)(native[i] >> 16);
   11680:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   11684:	f885 e001 	strb.w	lr, [r5, #1]
        digit[2] = (uint8_t)(native[i] >> 8);
   11688:	ea4f 2e17 	mov.w	lr, r7, lsr #8
        digit[3] = (uint8_t)(native[i]);
   1168c:	70ef      	strb	r7, [r5, #3]
        digit[2] = (uint8_t)(native[i] >> 8);
   1168e:	f885 e002 	strb.w	lr, [r5, #2]
        if (vli[i]) {
   11692:	b9eb      	cbnz	r3, 116d0 <uECC_shared_secret+0x1f0>
   11694:	b9e2      	cbnz	r2, 116d0 <uECC_shared_secret+0x1f0>
   11696:	b9d9      	cbnz	r1, 116d0 <uECC_shared_secret+0x1f0>
   11698:	b9d0      	cbnz	r0, 116d0 <uECC_shared_secret+0x1f0>
   1169a:	b9cc      	cbnz	r4, 116d0 <uECC_shared_secret+0x1f0>
   1169c:	b9c6      	cbnz	r6, 116d0 <uECC_shared_secret+0x1f0>
   1169e:	f1bc 0f00 	cmp.w	ip, #0
   116a2:	d115      	bne.n	116d0 <uECC_shared_secret+0x1f0>
   116a4:	b9a7      	cbnz	r7, 116d0 <uECC_shared_secret+0x1f0>
   116a6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   116a8:	b993      	cbnz	r3, 116d0 <uECC_shared_secret+0x1f0>
   116aa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   116ac:	b983      	cbnz	r3, 116d0 <uECC_shared_secret+0x1f0>
   116ae:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   116b0:	b973      	cbnz	r3, 116d0 <uECC_shared_secret+0x1f0>
   116b2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   116b4:	b963      	cbnz	r3, 116d0 <uECC_shared_secret+0x1f0>
   116b6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   116b8:	b953      	cbnz	r3, 116d0 <uECC_shared_secret+0x1f0>
   116ba:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   116bc:	b943      	cbnz	r3, 116d0 <uECC_shared_secret+0x1f0>
   116be:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   116c0:	b933      	cbnz	r3, 116d0 <uECC_shared_secret+0x1f0>
   116c2:	983b      	ldr	r0, [sp, #236]	; 0xec
   116c4:	3800      	subs	r0, #0
   116c6:	bf18      	it	ne
   116c8:	2001      	movne	r0, #1
#endif

    vli_nativeToBytes(secret, product.x);
    return !EccPoint_isZero(&product);
}
   116ca:	b03c      	add	sp, #240	; 0xf0
   116cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   116d0:	2001      	movs	r0, #1
   116d2:	b03c      	add	sp, #240	; 0xf0
   116d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   116d8:	00026430 	.word	0x00026430
   116dc:	10002b64 	.word	0x10002b64

000116e0 <uECC_valid_public_key>:

    vli_nativeToBytes(public_key, point.x);
    vli_nativeToBytes(public_key + uECC_BYTES, point.y);
}

int uECC_valid_public_key(const uint8_t public_key[uECC_BYTES*2]) {
   116e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e4:	6887      	ldr	r7, [r0, #8]
   116e6:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
   116ea:	69c1      	ldr	r1, [r0, #28]
   116ec:	6984      	ldr	r4, [r0, #24]
   116ee:	6945      	ldr	r5, [r0, #20]
   116f0:	6903      	ldr	r3, [r0, #16]
   116f2:	68c6      	ldr	r6, [r0, #12]
   116f4:	6842      	ldr	r2, [r0, #4]
   116f6:	f8d0 c000 	ldr.w	ip, [r0]
   116fa:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
   116fe:	f8d0 9038 	ldr.w	r9, [r0, #56]	; 0x38
   11702:	f8d0 a02c 	ldr.w	sl, [r0, #44]	; 0x2c
   11706:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
   1170a:	b0bd      	sub	sp, #244	; 0xf4
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1170c:	ba3f      	rev	r7, r7
   1170e:	9701      	str	r7, [sp, #4]
   11710:	9721      	str	r7, [sp, #132]	; 0x84
   11712:	fa98 f788 	rev.w	r7, r8
   11716:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
   1171a:	9702      	str	r7, [sp, #8]
   1171c:	fa9a fa8a 	rev.w	sl, sl
   11720:	ba09      	rev	r1, r1
   11722:	ba24      	rev	r4, r4
   11724:	ba2d      	rev	r5, r5
   11726:	ba1b      	rev	r3, r3
   11728:	ba36      	rev	r6, r6
   1172a:	ba12      	rev	r2, r2
   1172c:	fa9c fc8c 	rev.w	ip, ip
   11730:	fa9e fe8e 	rev.w	lr, lr
   11734:	fa99 f989 	rev.w	r9, r9
   11738:	fa98 f888 	rev.w	r8, r8
   1173c:	fa9b fb8b 	rev.w	fp, fp
   11740:	e9cd 141c 	strd	r1, r4, [sp, #112]	; 0x70
   11744:	e9cd 531e 	strd	r5, r3, [sp, #120]	; 0x78
   11748:	9620      	str	r6, [sp, #128]	; 0x80
   1174a:	9222      	str	r2, [sp, #136]	; 0x88
   1174c:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
   11750:	f8cd e090 	str.w	lr, [sp, #144]	; 0x90
   11754:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   11758:	9726      	str	r7, [sp, #152]	; 0x98
   1175a:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
   1175e:	f8cd a00c 	str.w	sl, [sp, #12]
   11762:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
   11766:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
   1176a:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
   1176e:	6a00      	ldr	r0, [r0, #32]
   11770:	fa9a fa8a 	rev.w	sl, sl
   11774:	ba00      	rev	r0, r0
   11776:	e9cd a02a 	strd	sl, r0, [sp, #168]	; 0xa8
        if (vli[i]) {
   1177a:	bb19      	cbnz	r1, 117c4 <uECC_valid_public_key+0xe4>
   1177c:	bb14      	cbnz	r4, 117c4 <uECC_valid_public_key+0xe4>
   1177e:	bb0d      	cbnz	r5, 117c4 <uECC_valid_public_key+0xe4>
   11780:	bb03      	cbnz	r3, 117c4 <uECC_valid_public_key+0xe4>
   11782:	b9fe      	cbnz	r6, 117c4 <uECC_valid_public_key+0xe4>
   11784:	9f01      	ldr	r7, [sp, #4]
   11786:	b9ef      	cbnz	r7, 117c4 <uECC_valid_public_key+0xe4>
   11788:	2a00      	cmp	r2, #0
   1178a:	f040 80c6 	bne.w	1191a <uECC_valid_public_key+0x23a>
   1178e:	f1bc 0f00 	cmp.w	ip, #0
   11792:	d12d      	bne.n	117f0 <uECC_valid_public_key+0x110>
   11794:	f1be 0f00 	cmp.w	lr, #0
   11798:	d12a      	bne.n	117f0 <uECC_valid_public_key+0x110>
   1179a:	f1b9 0f00 	cmp.w	r9, #0
   1179e:	d127      	bne.n	117f0 <uECC_valid_public_key+0x110>
   117a0:	9f02      	ldr	r7, [sp, #8]
   117a2:	bb2f      	cbnz	r7, 117f0 <uECC_valid_public_key+0x110>
   117a4:	f1b8 0f00 	cmp.w	r8, #0
   117a8:	d122      	bne.n	117f0 <uECC_valid_public_key+0x110>
   117aa:	9f03      	ldr	r7, [sp, #12]
   117ac:	bb07      	cbnz	r7, 117f0 <uECC_valid_public_key+0x110>
   117ae:	f1bb 0f00 	cmp.w	fp, #0
   117b2:	d11d      	bne.n	117f0 <uECC_valid_public_key+0x110>
   117b4:	f1ba 0f00 	cmp.w	sl, #0
   117b8:	d137      	bne.n	1182a <uECC_valid_public_key+0x14a>
   117ba:	2800      	cmp	r0, #0
   117bc:	d137      	bne.n	1182e <uECC_valid_public_key+0x14e>
    vli_modSquare_fast(tmp1, public.y); /* tmp1 = y^2 */
    curve_x_side(tmp2, public.x); /* tmp2 = x^3 + ax + b */

    /* Make sure that y^2 == x^3 + ax + b */
    return (vli_cmp(tmp1, tmp2) == 0);
}
   117be:	b03d      	add	sp, #244	; 0xf4
   117c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   117c4:	f1bc 3fff 	cmp.w	ip, #4294967295
   117c8:	d112      	bne.n	117f0 <uECC_valid_public_key+0x110>
   117ca:	b18a      	cbz	r2, 117f0 <uECC_valid_public_key+0x110>
        } else if (left[i] < right[i]) {
   117cc:	2a01      	cmp	r2, #1
   117ce:	d828      	bhi.n	11822 <uECC_valid_public_key+0x142>
   117d0:	9a01      	ldr	r2, [sp, #4]
   117d2:	bb32      	cbnz	r2, 11822 <uECC_valid_public_key+0x142>
   117d4:	2e00      	cmp	r6, #0
   117d6:	f040 80af 	bne.w	11938 <uECC_valid_public_key+0x258>
   117da:	bb13      	cbnz	r3, 11822 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   117dc:	3501      	adds	r5, #1
   117de:	d107      	bne.n	117f0 <uECC_valid_public_key+0x110>
   117e0:	3401      	adds	r4, #1
   117e2:	d105      	bne.n	117f0 <uECC_valid_public_key+0x110>
   117e4:	3101      	adds	r1, #1
   117e6:	d103      	bne.n	117f0 <uECC_valid_public_key+0x110>
   117e8:	4618      	mov	r0, r3
}
   117ea:	b03d      	add	sp, #244	; 0xf4
   117ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   117f0:	3001      	adds	r0, #1
   117f2:	d11c      	bne.n	1182e <uECC_valid_public_key+0x14e>
   117f4:	f1ba 0f00 	cmp.w	sl, #0
   117f8:	d019      	beq.n	1182e <uECC_valid_public_key+0x14e>
        } else if (left[i] < right[i]) {
   117fa:	f1ba 0f01 	cmp.w	sl, #1
   117fe:	d110      	bne.n	11822 <uECC_valid_public_key+0x142>
   11800:	f1bb 0f00 	cmp.w	fp, #0
   11804:	d10d      	bne.n	11822 <uECC_valid_public_key+0x142>
   11806:	9b03      	ldr	r3, [sp, #12]
   11808:	b95b      	cbnz	r3, 11822 <uECC_valid_public_key+0x142>
   1180a:	f1b8 0f00 	cmp.w	r8, #0
   1180e:	d1eb      	bne.n	117e8 <uECC_valid_public_key+0x108>
        if (left[i] > right[i]) {
   11810:	9b02      	ldr	r3, [sp, #8]
   11812:	3301      	adds	r3, #1
   11814:	d10b      	bne.n	1182e <uECC_valid_public_key+0x14e>
   11816:	f1b9 3fff 	cmp.w	r9, #4294967295
   1181a:	d108      	bne.n	1182e <uECC_valid_public_key+0x14e>
   1181c:	f1be 3fff 	cmp.w	lr, #4294967295
   11820:	d105      	bne.n	1182e <uECC_valid_public_key+0x14e>
        return 0;
   11822:	2000      	movs	r0, #0
}
   11824:	b03d      	add	sp, #244	; 0xf4
   11826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   1182a:	3001      	adds	r0, #1
   1182c:	d0e5      	beq.n	117fa <uECC_valid_public_key+0x11a>
    vli_square(product, left);
   1182e:	a82c      	add	r0, sp, #176	; 0xb0
   11830:	a924      	add	r1, sp, #144	; 0x90
   11832:	f7fe fa2d 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   11836:	a92c      	add	r1, sp, #176	; 0xb0
   11838:	a804      	add	r0, sp, #16
   1183a:	f7fe fbe5 	bl	10008 <vli_mmod_fast>
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   1183e:	2300      	movs	r3, #0
   11840:	2203      	movs	r2, #3
    vli_square(product, left);
   11842:	a91c      	add	r1, sp, #112	; 0x70
   11844:	a82c      	add	r0, sp, #176	; 0xb0
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   11846:	9214      	str	r2, [sp, #80]	; 0x50
   11848:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   1184c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
   11850:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   11854:	931b      	str	r3, [sp, #108]	; 0x6c
    vli_square(product, left);
   11856:	f7fe fa1b 	bl	fc90 <vli_square>
    vli_mmod_fast(result, product);
   1185a:	a92c      	add	r1, sp, #176	; 0xb0
   1185c:	a80c      	add	r0, sp, #48	; 0x30
   1185e:	f7fe fbd3 	bl	10008 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   11862:	a90c      	add	r1, sp, #48	; 0x30
   11864:	aa14      	add	r2, sp, #80	; 0x50
   11866:	4608      	mov	r0, r1
   11868:	f7fd feee 	bl	f648 <vli_sub>
    if (l_borrow) {
   1186c:	2800      	cmp	r0, #0
   1186e:	d15d      	bne.n	1192c <uECC_valid_public_key+0x24c>
    vli_mult(product, left, right);
   11870:	aa1c      	add	r2, sp, #112	; 0x70
   11872:	a90c      	add	r1, sp, #48	; 0x30
   11874:	a82c      	add	r0, sp, #176	; 0xb0
   11876:	f7fd ff2f 	bl	f6d8 <vli_mult>
    vli_mmod_fast(result, product);
   1187a:	a92c      	add	r1, sp, #176	; 0xb0
   1187c:	a80c      	add	r0, sp, #48	; 0x30
   1187e:	f7fe fbc3 	bl	10008 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   11882:	a90c      	add	r1, sp, #48	; 0x30
   11884:	4a2d      	ldr	r2, [pc, #180]	; (1193c <uECC_valid_public_key+0x25c>)
   11886:	4608      	mov	r0, r1
   11888:	f7fd fe9e 	bl	f5c8 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   1188c:	b9a8      	cbnz	r0, 118ba <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   1188e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11890:	1c5a      	adds	r2, r3, #1
   11892:	d118      	bne.n	118c6 <uECC_valid_public_key+0x1e6>
        if (left[i] > right[i]) {
   11894:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11896:	2a01      	cmp	r2, #1
   11898:	d80f      	bhi.n	118ba <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   1189a:	b1a2      	cbz	r2, 118c6 <uECC_valid_public_key+0x1e6>
        if (left[i] > right[i]) {
   1189c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1189e:	b962      	cbnz	r2, 118ba <uECC_valid_public_key+0x1da>
   118a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   118a2:	b952      	cbnz	r2, 118ba <uECC_valid_public_key+0x1da>
   118a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   118a6:	b942      	cbnz	r2, 118ba <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   118a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   118aa:	3201      	adds	r2, #1
   118ac:	d10b      	bne.n	118c6 <uECC_valid_public_key+0x1e6>
   118ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   118b0:	3201      	adds	r2, #1
   118b2:	d108      	bne.n	118c6 <uECC_valid_public_key+0x1e6>
   118b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   118b6:	3201      	adds	r2, #1
   118b8:	d105      	bne.n	118c6 <uECC_valid_public_key+0x1e6>
        vli_sub(result, result, mod);
   118ba:	a90c      	add	r1, sp, #48	; 0x30
   118bc:	4a20      	ldr	r2, [pc, #128]	; (11940 <uECC_valid_public_key+0x260>)
   118be:	4608      	mov	r0, r1
   118c0:	f7fd fec2 	bl	f648 <vli_sub>
   118c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        if (left[i] > right[i]) {
   118c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   118c8:	429a      	cmp	r2, r3
   118ca:	d8aa      	bhi.n	11822 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   118cc:	d3a9      	bcc.n	11822 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   118ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   118d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   118d2:	429a      	cmp	r2, r3
   118d4:	d3a5      	bcc.n	11822 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   118d6:	d8a4      	bhi.n	11822 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   118d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   118da:	9a11      	ldr	r2, [sp, #68]	; 0x44
   118dc:	429a      	cmp	r2, r3
   118de:	d3a0      	bcc.n	11822 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   118e0:	d89f      	bhi.n	11822 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   118e2:	9b08      	ldr	r3, [sp, #32]
   118e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   118e6:	429a      	cmp	r2, r3
   118e8:	d39b      	bcc.n	11822 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   118ea:	d89a      	bhi.n	11822 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   118ec:	9b07      	ldr	r3, [sp, #28]
   118ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   118f0:	429a      	cmp	r2, r3
   118f2:	d396      	bcc.n	11822 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   118f4:	d895      	bhi.n	11822 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   118f6:	9b06      	ldr	r3, [sp, #24]
   118f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   118fa:	429a      	cmp	r2, r3
   118fc:	d391      	bcc.n	11822 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   118fe:	d890      	bhi.n	11822 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   11900:	9b05      	ldr	r3, [sp, #20]
   11902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11904:	429a      	cmp	r2, r3
   11906:	d38c      	bcc.n	11822 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   11908:	d88b      	bhi.n	11822 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   1190a:	9a04      	ldr	r2, [sp, #16]
   1190c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1190e:	429a      	cmp	r2, r3
   11910:	d887      	bhi.n	11822 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   11912:	bf2c      	ite	cs
   11914:	2001      	movcs	r0, #1
   11916:	2000      	movcc	r0, #0
   11918:	e751      	b.n	117be <uECC_valid_public_key+0xde>
        if (left[i] > right[i]) {
   1191a:	f1bc 3fff 	cmp.w	ip, #4294967295
   1191e:	f47f af67 	bne.w	117f0 <uECC_valid_public_key+0x110>
        } else if (left[i] < right[i]) {
   11922:	2a01      	cmp	r2, #1
   11924:	f67f af64 	bls.w	117f0 <uECC_valid_public_key+0x110>
   11928:	4638      	mov	r0, r7
   1192a:	e748      	b.n	117be <uECC_valid_public_key+0xde>
        vli_add(result, result, mod);
   1192c:	a90c      	add	r1, sp, #48	; 0x30
   1192e:	4a04      	ldr	r2, [pc, #16]	; (11940 <uECC_valid_public_key+0x260>)
   11930:	4608      	mov	r0, r1
   11932:	f7fd fe49 	bl	f5c8 <vli_add>
   11936:	e79b      	b.n	11870 <uECC_valid_public_key+0x190>
   11938:	4610      	mov	r0, r2
   1193a:	e740      	b.n	117be <uECC_valid_public_key+0xde>
   1193c:	00026410 	.word	0x00026410
   11940:	00026450 	.word	0x00026450

00011944 <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   11944:	b538      	push	{r3, r4, r5, lr}
   11946:	4604      	mov	r4, r0
  secAes_t *pAes = (secAes_t *) &pBuf->msg;

  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   11948:	3010      	adds	r0, #16
{
   1194a:	4615      	mov	r5, r2
  pAes->pCiphertext = pBuf->ciphertext;
   1194c:	6060      	str	r0, [r4, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   1194e:	3105      	adds	r1, #5
   11950:	f003 ffd8 	bl	15904 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   11954:	4621      	mov	r1, r4
   11956:	4628      	mov	r0, r5
}
   11958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgSend(handlerId, pAes);
   1195c:	f00c bb28 	b.w	1dfb0 <WsfMsgSend>

00011960 <SecAes>:
{
   11960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11964:	4606      	mov	r6, r0
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   11966:	2038      	movs	r0, #56	; 0x38
{
   11968:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1196c:	460f      	mov	r7, r1
   1196e:	4692      	mov	sl, r2
   11970:	4699      	mov	r9, r3
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   11972:	f00c fb11 	bl	1df98 <WsfMsgAlloc>
   11976:	b328      	cbz	r0, 119c4 <SecAes+0x64>
  uint8_t token = secCb.token++;
   11978:	4d14      	ldr	r5, [pc, #80]	; (119cc <SecAes+0x6c>)
   1197a:	f895 c038 	ldrb.w	ip, [r5, #56]	; 0x38
  if (token == SEC_TOKEN_INVALID)
   1197e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   11982:	4604      	mov	r4, r0
   11984:	d018      	beq.n	119b8 <SecAes+0x58>
  uint8_t token = secCb.token++;
   11986:	f10c 0301 	add.w	r3, ip, #1
   1198a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    pBuf->type = SEC_TYPE_AES;
   1198e:	2300      	movs	r3, #0
    pBuf->msg.hdr.status = getNextToken();
   11990:	f884 c003 	strb.w	ip, [r4, #3]
    pBuf->type = SEC_TYPE_AES;
   11994:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   11998:	4622      	mov	r2, r4
   1199a:	4651      	mov	r1, sl
   1199c:	480c      	ldr	r0, [pc, #48]	; (119d0 <SecAes+0x70>)
    pBuf->msg.hdr.param = param;
   1199e:	f8a4 9000 	strh.w	r9, [r4]
    pBuf->msg.hdr.event = event;
   119a2:	f884 8002 	strb.w	r8, [r4, #2]
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   119a6:	f00c fb15 	bl	1dfd4 <WsfMsgEnq>
    HciLeEncryptCmd(pKey, pPlaintext);
   119aa:	4630      	mov	r0, r6
   119ac:	4639      	mov	r1, r7
   119ae:	f004 fcb1 	bl	16314 <HciLeEncryptCmd>
    return pBuf->msg.hdr.status;
   119b2:	78e0      	ldrb	r0, [r4, #3]
}
   119b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    token = secCb.token++;
   119b8:	2301      	movs	r3, #1
   119ba:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
   119be:	f04f 0c00 	mov.w	ip, #0
   119c2:	e7e4      	b.n	1198e <SecAes+0x2e>
  return SEC_TOKEN_INVALID;
   119c4:	20ff      	movs	r0, #255	; 0xff
}
   119c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   119ca:	bf00      	nop
   119cc:	100040d0 	.word	0x100040d0
   119d0:	100040f0 	.word	0x100040f0

000119d4 <SecAesInit>:
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   119d4:	4b01      	ldr	r3, [pc, #4]	; (119dc <SecAesInit+0x8>)
   119d6:	4a02      	ldr	r2, [pc, #8]	; (119e0 <SecAesInit+0xc>)
   119d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
   119da:	4770      	bx	lr
   119dc:	100040d0 	.word	0x100040d0
   119e0:	00011945 	.word	0x00011945

000119e4 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   119e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   119e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
  uint8_t text[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   119e8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
   119ea:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   119ec:	6821      	ldr	r1, [r4, #0]
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
   119ee:	1aed      	subs	r5, r5, r3
   119f0:	b22d      	sxth	r5, r5
{
   119f2:	b085      	sub	sp, #20

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   119f4:	2d10      	cmp	r5, #16
{
   119f6:	4606      	mov	r6, r0
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   119f8:	4419      	add	r1, r3
  {
    memcpy(text, pMn, remaining);
   119fa:	466f      	mov	r7, sp
  if (remaining <= SEC_BLOCK_LEN)
   119fc:	dc1a      	bgt.n	11a34 <secCmacProcessBlock+0x50>
    memcpy(text, pMn, remaining);
   119fe:	462a      	mov	r2, r5
   11a00:	4638      	mov	r0, r7
   11a02:	f7fa fb7d 	bl	c100 <memcpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   11a06:	2d10      	cmp	r5, #16
   11a08:	d121      	bne.n	11a4e <secCmacProcessBlock+0x6a>
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
      text[remaining] = 0x80;
    }

    /* XOr the subkey */
    Calc128Xor(text, pCmac->subkey);
   11a0a:	f104 0114 	add.w	r1, r4, #20
   11a0e:	4638      	mov	r0, r7
   11a10:	f003 ff8a 	bl	15928 <Calc128Xor>
  {
    /* Copy the block to the buffer */
    Calc128Cpy(text, pMn);
  }

  if (pCmac->position != 0)
   11a14:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   11a16:	2302      	movs	r3, #2
   11a18:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  if (pCmac->position != 0)
   11a1c:	b982      	cbnz	r2, 11a40 <secCmacProcessBlock+0x5c>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(text, pBuf->ciphertext);
  }

  pCmac->position += SEC_BLOCK_LEN;
   11a1e:	3210      	adds	r2, #16
   11a20:	84a2      	strh	r2, [r4, #36]	; 0x24

  SecLeEncryptCmd(pCmac->key, text, pBuf, pCmac->handlerId);
   11a22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11a26:	4632      	mov	r2, r6
   11a28:	4639      	mov	r1, r7
   11a2a:	1d20      	adds	r0, r4, #4
   11a2c:	f000 fa3a 	bl	11ea4 <SecLeEncryptCmd>
}
   11a30:	b005      	add	sp, #20
   11a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Calc128Cpy(text, pMn);
   11a34:	4638      	mov	r0, r7
   11a36:	f003 ff65 	bl	15904 <Calc128Cpy>
  if (pCmac->position != 0)
   11a3a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   11a3c:	2a00      	cmp	r2, #0
   11a3e:	d0ee      	beq.n	11a1e <secCmacProcessBlock+0x3a>
    Calc128Xor(text, pBuf->ciphertext);
   11a40:	f106 0110 	add.w	r1, r6, #16
   11a44:	4638      	mov	r0, r7
   11a46:	f003 ff6f 	bl	15928 <Calc128Xor>
  pCmac->position += SEC_BLOCK_LEN;
   11a4a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   11a4c:	e7e7      	b.n	11a1e <secCmacProcessBlock+0x3a>
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
   11a4e:	f1c5 0210 	rsb	r2, r5, #16
   11a52:	1978      	adds	r0, r7, r5
   11a54:	2100      	movs	r1, #0
   11a56:	f011 fc71 	bl	2333c <memset>
      text[remaining] = 0x80;
   11a5a:	f105 0310 	add.w	r3, r5, #16
   11a5e:	eb0d 0503 	add.w	r5, sp, r3
   11a62:	2380      	movs	r3, #128	; 0x80
   11a64:	f805 3c10 	strb.w	r3, [r5, #-16]
   11a68:	e7cf      	b.n	11a0a <secCmacProcessBlock+0x26>
   11a6a:	bf00      	nop

00011a6c <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   11a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   11a70:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   11a72:	b089      	sub	sp, #36	; 0x24

  if (pCmac)
   11a74:	b17c      	cbz	r4, 11a96 <SecCmacHciCback+0x2a>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   11a76:	f100 0610 	add.w	r6, r0, #16
   11a7a:	4605      	mov	r5, r0
   11a7c:	3105      	adds	r1, #5
   11a7e:	4630      	mov	r0, r6
   11a80:	f003 ff40 	bl	15904 <Calc128Cpy>

    switch (pCmac->state)
   11a84:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11a88:	2b01      	cmp	r3, #1
   11a8a:	f000 8100 	beq.w	11c8e <SecCmacHciCback+0x222>
   11a8e:	2b02      	cmp	r3, #2
   11a90:	f000 8103 	beq.w	11c9a <SecCmacHciCback+0x22e>
   11a94:	b113      	cbz	r3, 11a9c <SecCmacHciCback+0x30>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   11a96:	b009      	add	sp, #36	; 0x24
   11a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   11a9c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   11a9e:	4631      	mov	r1, r6
   11aa0:	f104 0014 	add.w	r0, r4, #20
   11aa4:	f003 ff2e 	bl	15904 <Calc128Cpy>
      overflow = pBuf[i+1] >> (8 - shift);
   11aa8:	f894 b015 	ldrb.w	fp, [r4, #21]
   11aac:	7fe2      	ldrb	r2, [r4, #31]
  uint8_t finalOverflow = pBuf[0] >> (8 - shift);
   11aae:	7d23      	ldrb	r3, [r4, #20]
      overflow = pBuf[i+1] >> (8 - shift);
   11ab0:	9206      	str	r2, [sp, #24]
   11ab2:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   11ab6:	f894 a016 	ldrb.w	sl, [r4, #22]
   11aba:	9202      	str	r2, [sp, #8]
   11abc:	ea4f 12eb 	mov.w	r2, fp, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11ac0:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11ac4:	f894 9017 	ldrb.w	r9, [r4, #23]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11ac8:	9301      	str	r3, [sp, #4]
   11aca:	b2d3      	uxtb	r3, r2
      overflow = pBuf[i+1] >> (8 - shift);
   11acc:	ea4f 12ea 	mov.w	r2, sl, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11ad0:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11ad4:	f894 8018 	ldrb.w	r8, [r4, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11ad8:	7562      	strb	r2, [r4, #21]
      overflow = pBuf[i+1] >> (8 - shift);
   11ada:	ea4f 12e9 	mov.w	r2, r9, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11ade:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11ae2:	7e67      	ldrb	r7, [r4, #25]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11ae4:	75a2      	strb	r2, [r4, #22]
      overflow = pBuf[i+1] >> (8 - shift);
   11ae6:	ea4f 12e8 	mov.w	r2, r8, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11aea:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11aee:	7ea6      	ldrb	r6, [r4, #26]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11af0:	75e2      	strb	r2, [r4, #23]
      overflow = pBuf[i+1] >> (8 - shift);
   11af2:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11af4:	ea42 0248 	orr.w	r2, r2, r8, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11af8:	f894 e01b 	ldrb.w	lr, [r4, #27]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11afc:	7622      	strb	r2, [r4, #24]
      overflow = pBuf[i+1] >> (8 - shift);
   11afe:	11f2      	asrs	r2, r6, #7
   11b00:	7f61      	ldrb	r1, [r4, #29]
   11b02:	f894 c01c 	ldrb.w	ip, [r4, #28]
   11b06:	9104      	str	r1, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b08:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
   11b0c:	7662      	strb	r2, [r4, #25]
      overflow = pBuf[i+1] >> (8 - shift);
   11b0e:	ea4f 12ee 	mov.w	r2, lr, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b12:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11b16:	9e04      	ldr	r6, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b18:	76a2      	strb	r2, [r4, #26]
      overflow = pBuf[i+1] >> (8 - shift);
   11b1a:	ea4f 12ec 	mov.w	r2, ip, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b1e:	ea42 0e4e 	orr.w	lr, r2, lr, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11b22:	11f2      	asrs	r2, r6, #7
   11b24:	7fa0      	ldrb	r0, [r4, #30]
   11b26:	f894 1020 	ldrb.w	r1, [r4, #32]
   11b2a:	9005      	str	r0, [sp, #20]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b2c:	ea42 0c4c 	orr.w	ip, r2, ip, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11b30:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   11b34:	9107      	str	r1, [sp, #28]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b36:	9303      	str	r3, [sp, #12]
      overflow = pBuf[i+1] >> (8 - shift);
   11b38:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b3c:	7523      	strb	r3, [r4, #20]
   11b3e:	f884 e01b 	strb.w	lr, [r4, #27]
   11b42:	f884 c01c 	strb.w	ip, [r4, #28]
      overflow = pBuf[i+1] >> (8 - shift);
   11b46:	9f05      	ldr	r7, [sp, #20]
   11b48:	9b02      	ldr	r3, [sp, #8]
   11b4a:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b4c:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11b50:	9e06      	ldr	r6, [sp, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b52:	7762      	strb	r2, [r4, #29]
      overflow = pBuf[i+1] >> (8 - shift);
   11b54:	11f2      	asrs	r2, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b56:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11b5a:	9f07      	ldr	r7, [sp, #28]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b5c:	77a2      	strb	r2, [r4, #30]
      overflow = pBuf[i+1] >> (8 - shift);
   11b5e:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b60:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
   11b64:	77e2      	strb	r2, [r4, #31]
      overflow = pBuf[i+1] >> (8 - shift);
   11b66:	11c2      	asrs	r2, r0, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b68:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
   11b6c:	f884 2020 	strb.w	r2, [r4, #32]
      overflow = pBuf[i+1] >> (8 - shift);
   11b70:	11ca      	asrs	r2, r1, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b72:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11b76:	11da      	asrs	r2, r3, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b78:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
  if (overflow)
   11b7c:	9a01      	ldr	r2, [sp, #4]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b7e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   11b82:	005b      	lsls	r3, r3, #1
   11b84:	b2db      	uxtb	r3, r3
  if (overflow)
   11b86:	09d2      	lsrs	r2, r2, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b88:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   11b8c:	bf1c      	itt	ne
   11b8e:	f083 0387 	eorne.w	r3, r3, #135	; 0x87
   11b92:	f884 3023 	strbne.w	r3, [r4, #35]	; 0x23
  if (pCmac->len % SEC_BLOCK_LEN != 0)
   11b96:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11b98:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  if (pCmac->len % SEC_BLOCK_LEN != 0)
   11b9c:	071b      	lsls	r3, r3, #28
   11b9e:	d073      	beq.n	11c88 <SecCmacHciCback+0x21c>
      overflow = pBuf[i+1] >> (8 - shift);
   11ba0:	f894 a016 	ldrb.w	sl, [r4, #22]
   11ba4:	f894 b015 	ldrb.w	fp, [r4, #21]
   11ba8:	7fa1      	ldrb	r1, [r4, #30]
   11baa:	f894 9017 	ldrb.w	r9, [r4, #23]
   11bae:	9102      	str	r1, [sp, #8]
   11bb0:	ea4f 11ea 	mov.w	r1, sl, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11bb4:	ea41 014b 	orr.w	r1, r1, fp, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11bb8:	f894 8018 	ldrb.w	r8, [r4, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11bbc:	7561      	strb	r1, [r4, #21]
      overflow = pBuf[i+1] >> (8 - shift);
   11bbe:	ea4f 11e9 	mov.w	r1, r9, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11bc2:	ea41 014a 	orr.w	r1, r1, sl, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11bc6:	f894 e019 	ldrb.w	lr, [r4, #25]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11bca:	75a1      	strb	r1, [r4, #22]
      overflow = pBuf[i+1] >> (8 - shift);
   11bcc:	ea4f 11e8 	mov.w	r1, r8, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11bd0:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11bd4:	f894 c01a 	ldrb.w	ip, [r4, #26]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11bd8:	75e1      	strb	r1, [r4, #23]
      overflow = pBuf[i+1] >> (8 - shift);
   11bda:	ea4f 11ee 	mov.w	r1, lr, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11bde:	ea41 0148 	orr.w	r1, r1, r8, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11be2:	7ee7      	ldrb	r7, [r4, #27]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11be4:	9a03      	ldr	r2, [sp, #12]
   11be6:	7621      	strb	r1, [r4, #24]
      overflow = pBuf[i+1] >> (8 - shift);
   11be8:	ea4f 11ec 	mov.w	r1, ip, asr #7
   11bec:	7f26      	ldrb	r6, [r4, #28]
   11bee:	7fe0      	ldrb	r0, [r4, #31]
   11bf0:	9004      	str	r0, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11bf2:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11bf6:	ea4f 13eb 	mov.w	r3, fp, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11bfa:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   11bfe:	7661      	strb	r1, [r4, #25]
      overflow = pBuf[i+1] >> (8 - shift);
   11c00:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c02:	7523      	strb	r3, [r4, #20]
   11c04:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11c08:	7f63      	ldrb	r3, [r4, #29]
   11c0a:	9301      	str	r3, [sp, #4]
   11c0c:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c0e:	ea41 0747 	orr.w	r7, r1, r7, lsl #1
   11c12:	76e7      	strb	r7, [r4, #27]
      overflow = pBuf[i+1] >> (8 - shift);
   11c14:	9f01      	ldr	r7, [sp, #4]
   11c16:	f894 3020 	ldrb.w	r3, [r4, #32]
   11c1a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   11c1e:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
   11c22:	9305      	str	r3, [sp, #20]
   11c24:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c26:	ea41 0646 	orr.w	r6, r1, r6, lsl #1
   11c2a:	7726      	strb	r6, [r4, #28]
      overflow = pBuf[i+1] >> (8 - shift);
   11c2c:	9e02      	ldr	r6, [sp, #8]
   11c2e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c32:	f884 c01a 	strb.w	ip, [r4, #26]
      overflow = pBuf[i+1] >> (8 - shift);
   11c36:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c38:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
   11c3c:	7761      	strb	r1, [r4, #29]
      overflow = pBuf[i+1] >> (8 - shift);
   11c3e:	9f04      	ldr	r7, [sp, #16]
   11c40:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c42:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   11c46:	9e05      	ldr	r6, [sp, #20]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c48:	77a1      	strb	r1, [r4, #30]
      overflow = pBuf[i+1] >> (8 - shift);
   11c4a:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c4c:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
   11c50:	77e1      	strb	r1, [r4, #31]
   11c52:	0071      	lsls	r1, r6, #1
   11c54:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
   11c58:	0052      	lsls	r2, r2, #1
   11c5a:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
   11c5e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
      overflow = pBuf[i+1] >> (8 - shift);
   11c62:	11da      	asrs	r2, r3, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c64:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (overflow)
   11c68:	9a03      	ldr	r2, [sp, #12]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c6a:	f884 1020 	strb.w	r1, [r4, #32]
   11c6e:	005b      	lsls	r3, r3, #1
   11c70:	b2db      	uxtb	r3, r3
    if (overflow)
   11c72:	09d2      	lsrs	r2, r2, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c74:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   11c78:	bf18      	it	ne
   11c7a:	f083 0387 	eorne.w	r3, r3, #135	; 0x87
    pBuf[i] = (pBuf[i] << shift) | overflow;
   11c7e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   11c82:	bf18      	it	ne
   11c84:	f884 3023 	strbne.w	r3, [r4, #35]	; 0x23
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   11c88:	2301      	movs	r3, #1
   11c8a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
      secCmacProcessBlock(pBuf);
   11c8e:	4628      	mov	r0, r5
}
   11c90:	b009      	add	sp, #36	; 0x24
   11c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      secCmacProcessBlock(pBuf);
   11c96:	f7ff bea5 	b.w	119e4 <secCmacProcessBlock>
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   11c9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  pMsg->pCiphertext = pBuf->ciphertext;
   11c9c:	606e      	str	r6, [r5, #4]
  pMsg->pPlainText = pCmac->pPlainText;
   11c9e:	681a      	ldr	r2, [r3, #0]
   11ca0:	60aa      	str	r2, [r5, #8]
  WsfMsgSend(pCmac->handlerId, pMsg);
   11ca2:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
   11ca6:	4629      	mov	r1, r5
}
   11ca8:	b009      	add	sp, #36	; 0x24
   11caa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  WsfMsgSend(pCmac->handlerId, pMsg);
   11cae:	f00c b97f 	b.w	1dfb0 <WsfMsgSend>
   11cb2:	bf00      	nop

00011cb4 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint16_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   11cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11cb8:	b084      	sub	sp, #16
   11cba:	4606      	mov	r6, r0
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   11cbc:	2064      	movs	r0, #100	; 0x64
{
   11cbe:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   11cc2:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   11cc6:	460d      	mov	r5, r1
   11cc8:	4690      	mov	r8, r2
   11cca:	461f      	mov	r7, r3
  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   11ccc:	f00c f964 	bl	1df98 <WsfMsgAlloc>
   11cd0:	4604      	mov	r4, r0
   11cd2:	b360      	cbz	r0, 11d2e <SecCmac+0x7a>

    pCmacCb->pPlainText = pPlainText;

    pCmacCb->len = textLen;
    pCmacCb->position = 0;
    pCmacCb->handlerId = handlerId;
   11cd4:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
    pBuf->msg.hdr.status = secCb.token++;
   11cd8:	4a16      	ldr	r2, [pc, #88]	; (11d34 <SecCmac+0x80>)
    pCmacCb->len = textLen;
   11cda:	f8a0 805e 	strh.w	r8, [r0, #94]	; 0x5e
    pBuf->type = SEC_TYPE_CMAC;
   11cde:	2701      	movs	r7, #1
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   11ce0:	f100 0338 	add.w	r3, r0, #56	; 0x38
    pBuf->type = SEC_TYPE_CMAC;
   11ce4:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    pBuf->pCb = pCmacCb;
   11ce8:	6303      	str	r3, [r0, #48]	; 0x30
    pBuf->msg.hdr.status = secCb.token++;
   11cea:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;

    /* Copy key */
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   11cee:	4631      	mov	r1, r6
    pCmacCb->position = 0;
   11cf0:	2600      	movs	r6, #0
   11cf2:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   11cf6:	f880 6061 	strb.w	r6, [r0, #97]	; 0x61
    pBuf->msg.hdr.status = secCb.token++;
   11cfa:	19d8      	adds	r0, r3, r7
   11cfc:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
   11d00:	70e3      	strb	r3, [r4, #3]
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   11d02:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    pBuf->msg.hdr.param = param;
   11d06:	f8a4 9000 	strh.w	r9, [r4]
    pBuf->msg.hdr.event = event;
   11d0a:	f884 a002 	strb.w	sl, [r4, #2]
    pCmacCb->pPlainText = pPlainText;
   11d0e:	63a5      	str	r5, [r4, #56]	; 0x38
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   11d10:	f003 fdf8 	bl	15904 <Calc128Cpy>
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   11d14:	6b20      	ldr	r0, [r4, #48]	; 0x30
  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
   11d16:	4622      	mov	r2, r4
   11d18:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   11d1c:	4669      	mov	r1, sp
   11d1e:	3004      	adds	r0, #4
  memset(buf, 0, SEC_BLOCK_LEN);
   11d20:	e9cd 6600 	strd	r6, r6, [sp]
   11d24:	e9cd 6602 	strd	r6, r6, [sp, #8]
  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
   11d28:	f000 f8bc 	bl	11ea4 <SecLeEncryptCmd>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);

    return TRUE;
   11d2c:	4638      	mov	r0, r7
  }

  return FALSE;
}
   11d2e:	b004      	add	sp, #16
   11d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11d34:	100040d0 	.word	0x100040d0

00011d38 <SecCmacInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   11d38:	4b01      	ldr	r3, [pc, #4]	; (11d40 <SecCmacInit+0x8>)
   11d3a:	4a02      	ldr	r2, [pc, #8]	; (11d44 <SecCmacInit+0xc>)
   11d3c:	641a      	str	r2, [r3, #64]	; 0x40
}
   11d3e:	4770      	bx	lr
   11d40:	100040d0 	.word	0x100040d0
   11d44:	00011a6d 	.word	0x00011a6d

00011d48 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   11d48:	b530      	push	{r4, r5, lr}
  secQueueBuf_t *pBuf = NULL;
  wsfHandlerId_t handlerId = 0;

  /* Handle random number event. */
  switch (pEvent->hdr.event)
   11d4a:	7883      	ldrb	r3, [r0, #2]
{
   11d4c:	b083      	sub	sp, #12
  wsfHandlerId_t handlerId = 0;
   11d4e:	2200      	movs	r2, #0
  switch (pEvent->hdr.event)
   11d50:	3b1b      	subs	r3, #27
{
   11d52:	4604      	mov	r4, r0
  wsfHandlerId_t handlerId = 0;
   11d54:	f88d 2007 	strb.w	r2, [sp, #7]
  switch (pEvent->hdr.event)
   11d58:	2b0b      	cmp	r3, #11
   11d5a:	d819      	bhi.n	11d90 <secHciCback+0x48>
   11d5c:	e8df f003 	tbb	[pc, r3]
   11d60:	18182136 	.word	0x18182136
   11d64:	18181818 	.word	0x18181818
   11d68:	061a1818 	.word	0x061a1818
  case HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
    break;

  case HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.dhKeyQueue, &handlerId);
   11d6c:	4821      	ldr	r0, [pc, #132]	; (11df4 <secHciCback+0xac>)
   11d6e:	f10d 0107 	add.w	r1, sp, #7
   11d72:	f00c f935 	bl	1dfe0 <WsfMsgDeq>
   11d76:	4605      	mov	r5, r0

  default:
    break;
  }

  if (pBuf)
   11d78:	b155      	cbz	r5, 11d90 <secHciCback+0x48>
  {
    WSF_ASSERT(secCb.hciCbackTbl[pBuf->type]);
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   11d7a:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   11d7e:	4b1e      	ldr	r3, [pc, #120]	; (11df8 <secHciCback+0xb0>)
   11d80:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11d84:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11d88:	4628      	mov	r0, r5
   11d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   11d8c:	4621      	mov	r1, r4
   11d8e:	4798      	blx	r3
  }
}
   11d90:	b003      	add	sp, #12
   11d92:	bd30      	pop	{r4, r5, pc}
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
   11d94:	4819      	ldr	r0, [pc, #100]	; (11dfc <secHciCback+0xb4>)
   11d96:	f10d 0107 	add.w	r1, sp, #7
   11d9a:	f00c f921 	bl	1dfe0 <WsfMsgDeq>
   11d9e:	4605      	mov	r5, r0
    break;
   11da0:	e7ea      	b.n	11d78 <secHciCback+0x30>
    memcpy(&secCb.rand[HCI_RAND_LEN * secCb.randTop], pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   11da2:	4a15      	ldr	r2, [pc, #84]	; (11df8 <secHciCback+0xb0>)
   11da4:	f8d0 0005 	ldr.w	r0, [r0, #5]
   11da8:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   11dac:	f8d4 1009 	ldr.w	r1, [r4, #9]
   11db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11db4:	c303      	stmia	r3!, {r0, r1}
    secCb.randTop = (secCb.randTop >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randTop + 1;
   11db6:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   11dba:	2b02      	cmp	r3, #2
   11dbc:	bf9a      	itte	ls
   11dbe:	3301      	addls	r3, #1
   11dc0:	b2db      	uxtbls	r3, r3
   11dc2:	2300      	movhi	r3, #0
   11dc4:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
}
   11dc8:	b003      	add	sp, #12
   11dca:	bd30      	pop	{r4, r5, pc}
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   11dcc:	f10d 0107 	add.w	r1, sp, #7
   11dd0:	480b      	ldr	r0, [pc, #44]	; (11e00 <secHciCback+0xb8>)
   11dd2:	f00c f905 	bl	1dfe0 <WsfMsgDeq>
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   11dd6:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   11dda:	1ecb      	subs	r3, r1, #3
   11ddc:	2b01      	cmp	r3, #1
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   11dde:	4605      	mov	r5, r0
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   11de0:	d901      	bls.n	11de6 <secHciCback+0x9e>
   11de2:	2901      	cmp	r1, #1
   11de4:	d1cb      	bne.n	11d7e <secHciCback+0x36>
      WStrReverse(pEvent->leEncryptCmdCmpl.data, HCI_ENCRYPT_DATA_LEN);
   11de6:	2110      	movs	r1, #16
   11de8:	1d60      	adds	r0, r4, #5
   11dea:	f003 fe17 	bl	15a1c <WStrReverse>
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   11dee:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   11df2:	e7c4      	b.n	11d7e <secHciCback+0x36>
   11df4:	10004100 	.word	0x10004100
   11df8:	100040d0 	.word	0x100040d0
   11dfc:	100040f8 	.word	0x100040f8
   11e00:	100040f0 	.word	0x100040f0

00011e04 <SecInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   11e04:	4b06      	ldr	r3, [pc, #24]	; (11e20 <SecInit+0x1c>)
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);

  secCb.token = 0;

  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   11e06:	4807      	ldr	r0, [pc, #28]	; (11e24 <SecInit+0x20>)
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   11e08:	2200      	movs	r2, #0
   11e0a:	e9c3 2208 	strd	r2, r2, [r3, #32]
  WSF_QUEUE_INIT(&secCb.pubKeyQueue);
   11e0e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);
   11e12:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  secCb.token = 0;
   11e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  HciSecRegister(secHciCback);
   11e1a:	f003 be15 	b.w	15a48 <HciSecRegister>
   11e1e:	bf00      	nop
   11e20:	100040d0 	.word	0x100040d0
   11e24:	00011d49 	.word	0x00011d49

00011e28 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   11e28:	b570      	push	{r4, r5, r6, lr}
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   11e2a:	4d1d      	ldr	r5, [pc, #116]	; (11ea0 <SecRand+0x78>)
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   11e2c:	1dce      	adds	r6, r1, #7
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   11e2e:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   11e32:	10f6      	asrs	r6, r6, #3

  WSF_ASSERT(randLen <= SEC_RAND_DATA_LEN);

  /* Copy from circular buffer of random data. */
  while (randLen--)
   11e34:	b1d1      	cbz	r1, 11e6c <SecRand+0x44>
   11e36:	00db      	lsls	r3, r3, #3
   11e38:	b2db      	uxtb	r3, r3
   11e3a:	4401      	add	r1, r0
   11e3c:	e009      	b.n	11e52 <SecRand+0x2a>
   11e3e:	4291      	cmp	r1, r2
   11e40:	d014      	beq.n	11e6c <SecRand+0x44>
  {
    *pRand++ = secCb.rand[index];
   11e42:	782b      	ldrb	r3, [r5, #0]
   11e44:	f800 3c01 	strb.w	r3, [r0, #-1]
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   11e48:	2300      	movs	r3, #0
   11e4a:	3301      	adds	r3, #1
  while (randLen--)
   11e4c:	4281      	cmp	r1, r0
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   11e4e:	b2db      	uxtb	r3, r3
  while (randLen--)
   11e50:	d00c      	beq.n	11e6c <SecRand+0x44>
    *pRand++ = secCb.rand[index];
   11e52:	4602      	mov	r2, r0
   11e54:	5cec      	ldrb	r4, [r5, r3]
   11e56:	f802 4b01 	strb.w	r4, [r2], #1
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   11e5a:	2b1f      	cmp	r3, #31
    *pRand++ = secCb.rand[index];
   11e5c:	f100 0002 	add.w	r0, r0, #2
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   11e60:	d0ed      	beq.n	11e3e <SecRand+0x16>
   11e62:	4610      	mov	r0, r2
   11e64:	3301      	adds	r3, #1
  while (randLen--)
   11e66:	4281      	cmp	r1, r0
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   11e68:	b2db      	uxtb	r3, r3
  while (randLen--)
   11e6a:	d1f2      	bne.n	11e52 <SecRand+0x2a>
  }

  while (count--)
   11e6c:	b2f4      	uxtb	r4, r6
   11e6e:	b17e      	cbz	r6, 11e90 <SecRand+0x68>
  {
    /* Request more random data. */
    HciLeRandCmd();

    /* Update copy index. */
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   11e70:	2600      	movs	r6, #0
    HciLeRandCmd();
   11e72:	f004 fb15 	bl	164a0 <HciLeRandCmd>
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   11e76:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   11e7a:	2b02      	cmp	r3, #2
  while (count--)
   11e7c:	f104 32ff 	add.w	r2, r4, #4294967295
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   11e80:	f103 0101 	add.w	r1, r3, #1
   11e84:	d805      	bhi.n	11e92 <SecRand+0x6a>
  while (count--)
   11e86:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   11e8a:	f885 103a 	strb.w	r1, [r5, #58]	; 0x3a
  while (count--)
   11e8e:	d1f0      	bne.n	11e72 <SecRand+0x4a>
  }
}
   11e90:	bd70      	pop	{r4, r5, r6, pc}
  while (count--)
   11e92:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   11e96:	f885 603a 	strb.w	r6, [r5, #58]	; 0x3a
  while (count--)
   11e9a:	d1ea      	bne.n	11e72 <SecRand+0x4a>
}
   11e9c:	bd70      	pop	{r4, r5, r6, pc}
   11e9e:	bf00      	nop
   11ea0:	100040d0 	.word	0x100040d0

00011ea4 <SecLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecLeEncryptCmd(uint8_t *pKey, uint8_t *pText, void *pBuf, wsfHandlerId_t handlerId)
{
   11ea4:	b570      	push	{r4, r5, r6, lr}
   11ea6:	b088      	sub	sp, #32
   11ea8:	460e      	mov	r6, r1
   11eaa:	4615      	mov	r5, r2
  uint8_t revKey[HCI_KEY_LEN];
  uint8_t revText[HCI_ENCRYPT_DATA_LEN];

  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   11eac:	4601      	mov	r1, r0
   11eae:	2210      	movs	r2, #16
   11eb0:	4668      	mov	r0, sp
{
   11eb2:	461c      	mov	r4, r3
  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   11eb4:	f003 fda0 	bl	159f8 <WStrReverseCpy>
  WStrReverseCpy(revText, pText, HCI_ENCRYPT_DATA_LEN);
   11eb8:	4631      	mov	r1, r6
   11eba:	a804      	add	r0, sp, #16
   11ebc:	2210      	movs	r2, #16
   11ebe:	f003 fd9b 	bl	159f8 <WStrReverseCpy>

  WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   11ec2:	462a      	mov	r2, r5
   11ec4:	4621      	mov	r1, r4
   11ec6:	4804      	ldr	r0, [pc, #16]	; (11ed8 <SecLeEncryptCmd+0x34>)
   11ec8:	f00c f884 	bl	1dfd4 <WsfMsgEnq>
  HciLeEncryptCmd(revKey, revText);
   11ecc:	a904      	add	r1, sp, #16
   11ece:	4668      	mov	r0, sp
   11ed0:	f004 fa20 	bl	16314 <HciLeEncryptCmd>
}
   11ed4:	b008      	add	sp, #32
   11ed6:	bd70      	pop	{r4, r5, r6, pc}
   11ed8:	100040f0 	.word	0x100040f0

00011edc <AnpcAnsDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AnpcAnsDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   11edc:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attAnsSvcUuid,
   11ede:	4b06      	ldr	r3, [pc, #24]	; (11ef8 <AnpcAnsDiscover+0x1c>)
   11ee0:	4a06      	ldr	r2, [pc, #24]	; (11efc <AnpcAnsDiscover+0x20>)
{
   11ee2:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attAnsSvcUuid,
   11ee4:	e9cd 3100 	strd	r3, r1, [sp]
   11ee8:	2307      	movs	r3, #7
   11eea:	2102      	movs	r1, #2
   11eec:	f00c fef8 	bl	1ece0 <AppDiscFindService>
                     ANPC_ANS_HDL_LIST_LEN, (attcDiscChar_t **) anpcAnsDiscCharList, pHdlList);
}
   11ef0:	b003      	add	sp, #12
   11ef2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ef6:	bf00      	nop
   11ef8:	10002b68 	.word	0x10002b68
   11efc:	000267f8 	.word	0x000267f8

00011f00 <AnpcAnsValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t AnpcAnsValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   11f00:	b570      	push	{r4, r5, r6, lr}

  /* Suppress unused variable compile warning */
  (void)catIdMask; (void)catId; (void)numAlert;

  /* new alert */
  if (pMsg->handle == pHdlList[ANPC_ANS_NA_HDL_IDX])
   11f02:	8842      	ldrh	r2, [r0, #2]
   11f04:	894b      	ldrh	r3, [r1, #10]
   11f06:	429a      	cmp	r2, r3
{
   11f08:	b086      	sub	sp, #24
  if (pMsg->handle == pHdlList[ANPC_ANS_NA_HDL_IDX])
   11f0a:	d029      	beq.n	11f60 <AnpcAnsValueUpdate+0x60>

    APP_TRACE_INFO2("New alert cat:%d num:%d", catId, numAlert);
    APP_TRACE_INFO1("Msg:%s", buf);
  }
  /* unread alert status */
  else if (pMsg->handle == pHdlList[ANPC_ANS_UAS_HDL_IDX])
   11f0c:	8902      	ldrh	r2, [r0, #8]
   11f0e:	429a      	cmp	r2, r3
   11f10:	d046      	beq.n	11fa0 <AnpcAnsValueUpdate+0xa0>
    BSTREAM_TO_UINT8(numAlert, p);

    APP_TRACE_INFO2("Unread alert status cat:%d num:%d", catId, numAlert);
  }
  /* supported new alert category */
  else if (pMsg->handle == pHdlList[ANPC_ANS_SNAC_HDL_IDX])
   11f12:	8802      	ldrh	r2, [r0, #0]
   11f14:	429a      	cmp	r2, r3
   11f16:	d011      	beq.n	11f3c <AnpcAnsValueUpdate+0x3c>
    }

    APP_TRACE_INFO1("Supported new alert category: 0x%04x", catIdMask);
  }
  /* supported unread alert category */
  else if (pMsg->handle == pHdlList[ANPC_ANS_SUAC_HDL_IDX])
   11f18:	88c2      	ldrh	r2, [r0, #6]
   11f1a:	429a      	cmp	r2, r3
   11f1c:	d11d      	bne.n	11f5a <AnpcAnsValueUpdate+0x5a>
  {
    /* parse value */
    p = pMsg->pValue;
    if (pMsg->valueLen == 1)
   11f1e:	890a      	ldrh	r2, [r1, #8]
    p = pMsg->pValue;
   11f20:	684b      	ldr	r3, [r1, #4]
    if (pMsg->valueLen == 1)
   11f22:	2a01      	cmp	r2, #1
   11f24:	d03a      	beq.n	11f9c <AnpcAnsValueUpdate+0x9c>
    {
      BSTREAM_TO_UINT8(catIdMask, p);
    }
    else
    {
      BSTREAM_TO_UINT16(catIdMask, p);
   11f26:	785a      	ldrb	r2, [r3, #1]
   11f28:	7819      	ldrb	r1, [r3, #0]
   11f2a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
   11f2e:	b289      	uxth	r1, r1
    }

    APP_TRACE_INFO1("Supported unread alert category: 0x%04x", catIdMask);
   11f30:	4820      	ldr	r0, [pc, #128]	; (11fb4 <AnpcAnsValueUpdate+0xb4>)
   11f32:	f00c fbb1 	bl	1e698 <WsfTrace>
  uint8_t   status = ATT_SUCCESS;
   11f36:	2000      	movs	r0, #0
  {
    status = ATT_ERR_NOT_FOUND;
  }

  return status;
}
   11f38:	b006      	add	sp, #24
   11f3a:	bd70      	pop	{r4, r5, r6, pc}
    if (pMsg->valueLen == 1)
   11f3c:	890a      	ldrh	r2, [r1, #8]
    p = pMsg->pValue;
   11f3e:	684b      	ldr	r3, [r1, #4]
    if (pMsg->valueLen == 1)
   11f40:	2a01      	cmp	r2, #1
   11f42:	d029      	beq.n	11f98 <AnpcAnsValueUpdate+0x98>
      BSTREAM_TO_UINT16(catIdMask, p);
   11f44:	785a      	ldrb	r2, [r3, #1]
   11f46:	7819      	ldrb	r1, [r3, #0]
   11f48:	eb01 2102 	add.w	r1, r1, r2, lsl #8
   11f4c:	b289      	uxth	r1, r1
    APP_TRACE_INFO1("Supported new alert category: 0x%04x", catIdMask);
   11f4e:	481a      	ldr	r0, [pc, #104]	; (11fb8 <AnpcAnsValueUpdate+0xb8>)
   11f50:	f00c fba2 	bl	1e698 <WsfTrace>
  uint8_t   status = ATT_SUCCESS;
   11f54:	2000      	movs	r0, #0
}
   11f56:	b006      	add	sp, #24
   11f58:	bd70      	pop	{r4, r5, r6, pc}
    status = ATT_ERR_NOT_FOUND;
   11f5a:	200a      	movs	r0, #10
}
   11f5c:	b006      	add	sp, #24
   11f5e:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(buf, p, pMsg->valueLen - 2);
   11f60:	890c      	ldrh	r4, [r1, #8]
    p = pMsg->pValue;
   11f62:	6849      	ldr	r1, [r1, #4]
    memcpy(buf, p, pMsg->valueLen - 2);
   11f64:	3c02      	subs	r4, #2
    BSTREAM_TO_UINT8(numAlert, p);
   11f66:	784e      	ldrb	r6, [r1, #1]
    BSTREAM_TO_UINT8(catId, p);
   11f68:	780d      	ldrb	r5, [r1, #0]
    memcpy(buf, p, pMsg->valueLen - 2);
   11f6a:	4622      	mov	r2, r4
   11f6c:	3102      	adds	r1, #2
   11f6e:	a801      	add	r0, sp, #4
   11f70:	f7fa f8c6 	bl	c100 <memcpy>
    buf[pMsg->valueLen - 2] = '\0';
   11f74:	f104 0318 	add.w	r3, r4, #24
   11f78:	446b      	add	r3, sp
   11f7a:	2400      	movs	r4, #0
    APP_TRACE_INFO2("New alert cat:%d num:%d", catId, numAlert);
   11f7c:	4632      	mov	r2, r6
   11f7e:	4629      	mov	r1, r5
    buf[pMsg->valueLen - 2] = '\0';
   11f80:	f803 4c14 	strb.w	r4, [r3, #-20]
    APP_TRACE_INFO2("New alert cat:%d num:%d", catId, numAlert);
   11f84:	480d      	ldr	r0, [pc, #52]	; (11fbc <AnpcAnsValueUpdate+0xbc>)
   11f86:	f00c fb87 	bl	1e698 <WsfTrace>
    APP_TRACE_INFO1("Msg:%s", buf);
   11f8a:	480d      	ldr	r0, [pc, #52]	; (11fc0 <AnpcAnsValueUpdate+0xc0>)
   11f8c:	a901      	add	r1, sp, #4
   11f8e:	f00c fb83 	bl	1e698 <WsfTrace>
  uint8_t   status = ATT_SUCCESS;
   11f92:	4620      	mov	r0, r4
}
   11f94:	b006      	add	sp, #24
   11f96:	bd70      	pop	{r4, r5, r6, pc}
      BSTREAM_TO_UINT8(catIdMask, p);
   11f98:	7819      	ldrb	r1, [r3, #0]
   11f9a:	e7d8      	b.n	11f4e <AnpcAnsValueUpdate+0x4e>
      BSTREAM_TO_UINT8(catIdMask, p);
   11f9c:	7819      	ldrb	r1, [r3, #0]
   11f9e:	e7c7      	b.n	11f30 <AnpcAnsValueUpdate+0x30>
    p = pMsg->pValue;
   11fa0:	684b      	ldr	r3, [r1, #4]
    APP_TRACE_INFO2("Unread alert status cat:%d num:%d", catId, numAlert);
   11fa2:	4808      	ldr	r0, [pc, #32]	; (11fc4 <AnpcAnsValueUpdate+0xc4>)
   11fa4:	785a      	ldrb	r2, [r3, #1]
   11fa6:	7819      	ldrb	r1, [r3, #0]
   11fa8:	f00c fb76 	bl	1e698 <WsfTrace>
  uint8_t   status = ATT_SUCCESS;
   11fac:	2000      	movs	r0, #0
}
   11fae:	b006      	add	sp, #24
   11fb0:	bd70      	pop	{r4, r5, r6, pc}
   11fb2:	bf00      	nop
   11fb4:	000264dc 	.word	0x000264dc
   11fb8:	000264b4 	.word	0x000264b4
   11fbc:	00026470 	.word	0x00026470
   11fc0:	00026488 	.word	0x00026488
   11fc4:	00026490 	.word	0x00026490

00011fc8 <attcDiscDescriptors>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
static uint8_t attcDiscDescriptors(dmConnId_t connId, attcDiscCb_t *pCb)
{
   11fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  attcDiscChar_t  **pChar;
  uint16_t        startHdl = ATT_HANDLE_NONE;
  uint16_t        endHdl = ATT_HANDLE_NONE;

  /* find next descriptor in list */
  pChar = pCb->pCharList + pCb->charListIdx;
   11fcc:	7c8b      	ldrb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->charListLen)
   11fce:	7b0d      	ldrb	r5, [r1, #12]
  pChar = pCb->pCharList + pCb->charListIdx;
   11fd0:	680e      	ldr	r6, [r1, #0]
{
   11fd2:	b083      	sub	sp, #12
  uint16_t        endHdl = ATT_HANDLE_NONE;
   11fd4:	2200      	movs	r2, #0
  while (pCb->charListIdx < pCb->charListLen)
   11fd6:	42ab      	cmp	r3, r5
{
   11fd8:	9001      	str	r0, [sp, #4]
  pChar = pCb->pCharList + pCb->charListIdx;
   11fda:	eb06 0c83 	add.w	ip, r6, r3, lsl #2
  uint16_t        startHdl = ATT_HANDLE_NONE;
   11fde:	4614      	mov	r4, r2
  while (pCb->charListIdx < pCb->charListLen)
   11fe0:	d23f      	bcs.n	12062 <attcDiscDescriptors+0x9a>
    {
      /* start handle is one greater than characteristic value handle,
       * which is stored in the previous entry in the list;
       * end handle is stored at current entry in the list
       */
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
   11fe2:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
      endHdl = pCb->pHdlList[pCb->charListIdx];

      /* clear temp end handle */
      pCb->pHdlList[pCb->charListIdx] = ATT_HANDLE_NONE;
   11fe6:	4617      	mov	r7, r2
      {
        /* we are looking for descriptors for this characteristic but
         * there aren't any;
         * skip over any other descriptors that follow in our list
         */
        while (++pCb->charListIdx < pCb->charListLen)
   11fe8:	f105 3aff 	add.w	sl, r5, #4294967295
        {
          pChar++;
   11fec:	f1a5 0902 	sub.w	r9, r5, #2
   11ff0:	e006      	b.n	12000 <attcDiscDescriptors+0x38>
    }
    else
    {
      /* go to next in list */
      pChar++;
      pCb->charListIdx++;
   11ff2:	fa5f f38e 	uxtb.w	r3, lr
  while (pCb->charListIdx < pCb->charListLen)
   11ff6:	429d      	cmp	r5, r3
      pCb->charListIdx++;
   11ff8:	748b      	strb	r3, [r1, #18]
      pChar++;
   11ffa:	f10c 0c04 	add.w	ip, ip, #4
  while (pCb->charListIdx < pCb->charListLen)
   11ffe:	d930      	bls.n	12062 <attcDiscDescriptors+0x9a>
    if (((*pChar)->settings & ATTC_SET_DESCRIPTOR) != 0)
   12000:	f8dc 0000 	ldr.w	r0, [ip]
   12004:	f890 b004 	ldrb.w	fp, [r0, #4]
   12008:	f01b 0f04 	tst.w	fp, #4
      pCb->charListIdx++;
   1200c:	f103 0e01 	add.w	lr, r3, #1
    if (((*pChar)->settings & ATTC_SET_DESCRIPTOR) != 0)
   12010:	d0ef      	beq.n	11ff2 <attcDiscDescriptors+0x2a>
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
   12012:	f8d1 e004 	ldr.w	lr, [r1, #4]
   12016:	4443      	add	r3, r8
   12018:	005a      	lsls	r2, r3, #1
   1201a:	f83e 4013 	ldrh.w	r4, [lr, r3, lsl #1]
      endHdl = pCb->pHdlList[pCb->charListIdx];
   1201e:	1c93      	adds	r3, r2, #2
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
   12020:	3401      	adds	r4, #1
      endHdl = pCb->pHdlList[pCb->charListIdx];
   12022:	f83e 2003 	ldrh.w	r2, [lr, r3]
      pCb->pHdlList[pCb->charListIdx] = ATT_HANDLE_NONE;
   12026:	f82e 7003 	strh.w	r7, [lr, r3]
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
   1202a:	b2a4      	uxth	r4, r4
      if (startHdl <= endHdl)
   1202c:	4294      	cmp	r4, r2
   1202e:	d932      	bls.n	12096 <attcDiscDescriptors+0xce>
        while (++pCb->charListIdx < pCb->charListLen)
   12030:	f891 b012 	ldrb.w	fp, [r1, #18]
   12034:	f10b 0301 	add.w	r3, fp, #1
   12038:	b2db      	uxtb	r3, r3
   1203a:	eb03 0e0a 	add.w	lr, r3, sl
   1203e:	ebae 0e0b 	sub.w	lr, lr, fp
          pChar++;
   12042:	eba9 0b0b 	sub.w	fp, r9, fp
   12046:	fa5f fb8b 	uxtb.w	fp, fp
   1204a:	f10b 0b01 	add.w	fp, fp, #1
        while (++pCb->charListIdx < pCb->charListLen)
   1204e:	42ab      	cmp	r3, r5
   12050:	748b      	strb	r3, [r1, #18]
          pChar++;
   12052:	eb0c 0c8b 	add.w	ip, ip, fp, lsl #2
        while (++pCb->charListIdx < pCb->charListLen)
   12056:	d204      	bcs.n	12062 <attcDiscDescriptors+0x9a>
   12058:	fa5f f38e 	uxtb.w	r3, lr
  while (pCb->charListIdx < pCb->charListLen)
   1205c:	429d      	cmp	r5, r3
   1205e:	748b      	strb	r3, [r1, #18]
   12060:	d8ce      	bhi.n	12000 <attcDiscDescriptors+0x38>
    }
  }

  /* if no more descriptors to be discovered */
  if (pCb->charListIdx == pCb->charListLen)
   12062:	42ab      	cmp	r3, r5
   12064:	d117      	bne.n	12096 <attcDiscDescriptors+0xce>
  for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
   12066:	b193      	cbz	r3, 1208e <attcDiscDescriptors+0xc6>
   12068:	3b01      	subs	r3, #1
   1206a:	b2db      	uxtb	r3, r3
   1206c:	1f32      	subs	r2, r6, #4
   1206e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   12072:	2000      	movs	r0, #0
    if (((*pChar)->settings & ATTC_SET_REQUIRED) != 0)
   12074:	f852 4f04 	ldr.w	r4, [r2, #4]!
   12078:	7924      	ldrb	r4, [r4, #4]
   1207a:	07a4      	lsls	r4, r4, #30
   1207c:	d502      	bpl.n	12084 <attcDiscDescriptors+0xbc>
      if (pCb->pHdlList[i] == ATT_HANDLE_NONE)
   1207e:	684c      	ldr	r4, [r1, #4]
   12080:	5a24      	ldrh	r4, [r4, r0]
   12082:	b194      	cbz	r4, 120aa <attcDiscDescriptors+0xe2>
  for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
   12084:	4293      	cmp	r3, r2
   12086:	f100 0002 	add.w	r0, r0, #2
   1208a:	d1f3      	bne.n	12074 <attcDiscDescriptors+0xac>
  return ATT_SUCCESS;
   1208c:	2500      	movs	r5, #0
  else
  {
    AttcFindInfoReq(connId, startHdl, endHdl, TRUE);
    return ATT_CONTINUING;
  }
}
   1208e:	4628      	mov	r0, r5
   12090:	b003      	add	sp, #12
   12092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    AttcFindInfoReq(connId, startHdl, endHdl, TRUE);
   12096:	9801      	ldr	r0, [sp, #4]
   12098:	2301      	movs	r3, #1
   1209a:	4621      	mov	r1, r4
   1209c:	f001 f832 	bl	13104 <AttcFindInfoReq>
    return ATT_CONTINUING;
   120a0:	2578      	movs	r5, #120	; 0x78
}
   120a2:	4628      	mov	r0, r5
   120a4:	b003      	add	sp, #12
   120a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ATT_ERR_REQ_NOT_FOUND;
   120aa:	2576      	movs	r5, #118	; 0x76
}
   120ac:	4628      	mov	r0, r5
   120ae:	b003      	add	sp, #12
   120b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000120b4 <AttcDiscService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcDiscService(dmConnId_t connId, attcDiscCb_t *pCb, uint8_t uuidLen, uint8_t *pUuid)
{
   120b4:	b500      	push	{lr}
   120b6:	b085      	sub	sp, #20
  AttcFindByTypeValueReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_UUID_PRIMARY_SERVICE,
   120b8:	2100      	movs	r1, #0
   120ba:	e9cd 3101 	strd	r3, r1, [sp, #4]
   120be:	9200      	str	r2, [sp, #0]
   120c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   120c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   120c8:	2101      	movs	r1, #1
   120ca:	f001 f9a9 	bl	13420 <AttcFindByTypeValueReq>
                         uuidLen, pUuid, FALSE);
}
   120ce:	b005      	add	sp, #20
   120d0:	f85d fb04 	ldr.w	pc, [sp], #4

000120d4 <AttcDiscServiceCmpl>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
uint8_t AttcDiscServiceCmpl(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
   120d4:	b510      	push	{r4, lr}
  uint8_t *p;

  /* verify callback event */
  if (pMsg->hdr.event != ATTC_FIND_BY_TYPE_VALUE_RSP)
   120d6:	788b      	ldrb	r3, [r1, #2]
   120d8:	2b03      	cmp	r3, #3
   120da:	d117      	bne.n	1210c <AttcDiscServiceCmpl+0x38>
  {
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
    return ATT_ERR_UNDEFINED;
  }
  /* verify status */
  else if (pMsg->hdr.status != ATT_SUCCESS)
   120dc:	78cc      	ldrb	r4, [r1, #3]
   120de:	b99c      	cbnz	r4, 12108 <AttcDiscServiceCmpl+0x34>
  {
    return pMsg->hdr.status;
  }
  /* verify result was found */
  else if (pMsg->valueLen == 0)
   120e0:	890b      	ldrh	r3, [r1, #8]
   120e2:	b1d3      	cbz	r3, 1211a <AttcDiscServiceCmpl+0x46>
  {
    return ATT_ERR_NOT_FOUND;
  }

  /* get handles of first returned service only; ATT has already performed error checking */
  p = pMsg->pValue;
   120e4:	684b      	ldr	r3, [r1, #4]
  BSTREAM_TO_UINT16(pCb->svcStartHdl, p);
   120e6:	785a      	ldrb	r2, [r3, #1]
   120e8:	7819      	ldrb	r1, [r3, #0]
   120ea:	eb01 2102 	add.w	r1, r1, r2, lsl #8
   120ee:	b289      	uxth	r1, r1
   120f0:	81c1      	strh	r1, [r0, #14]
  BSTREAM_TO_UINT16(pCb->svcEndHdl, p);
   120f2:	789a      	ldrb	r2, [r3, #2]
   120f4:	4684      	mov	ip, r0
   120f6:	78d8      	ldrb	r0, [r3, #3]
   120f8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   120fc:	b292      	uxth	r2, r2

  ATT_TRACE_INFO2("found service startHdl=0x%x endHdl=0x%x", pCb->svcStartHdl, pCb->svcEndHdl);
   120fe:	4808      	ldr	r0, [pc, #32]	; (12120 <AttcDiscServiceCmpl+0x4c>)
  BSTREAM_TO_UINT16(pCb->svcEndHdl, p);
   12100:	f8ac 2010 	strh.w	r2, [ip, #16]
  ATT_TRACE_INFO2("found service startHdl=0x%x endHdl=0x%x", pCb->svcStartHdl, pCb->svcEndHdl);
   12104:	f00c fac8 	bl	1e698 <WsfTrace>

  return ATT_SUCCESS;
}
   12108:	4620      	mov	r0, r4
   1210a:	bd10      	pop	{r4, pc}
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
   1210c:	4805      	ldr	r0, [pc, #20]	; (12124 <AttcDiscServiceCmpl+0x50>)
   1210e:	4619      	mov	r1, r3
    return ATT_ERR_UNDEFINED;
   12110:	2475      	movs	r4, #117	; 0x75
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
   12112:	f00c fac1 	bl	1e698 <WsfTrace>
}
   12116:	4620      	mov	r0, r4
   12118:	bd10      	pop	{r4, pc}
    return ATT_ERR_NOT_FOUND;
   1211a:	240a      	movs	r4, #10
}
   1211c:	4620      	mov	r0, r4
   1211e:	bd10      	pop	{r4, pc}
   12120:	0002655c 	.word	0x0002655c
   12124:	0002653c 	.word	0x0002653c

00012128 <AttcDiscCharStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcDiscCharStart(dmConnId_t connId, attcDiscCb_t *pCb)
{
   12128:	b500      	push	{lr}
   1212a:	b083      	sub	sp, #12
  /* initialize control block */
  pCb->charListIdx = 0;
   1212c:	f44f 4c7f 	mov.w	ip, #65280	; 0xff00
  pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;

  AttcReadByTypeReq(connId, pCb->svcStartHdl, pCb->svcEndHdl, ATT_16_UUID_LEN,
   12130:	2201      	movs	r2, #1
  pCb->charListIdx = 0;
   12132:	f8a1 c012 	strh.w	ip, [r1, #18]
  AttcReadByTypeReq(connId, pCb->svcStartHdl, pCb->svcEndHdl, ATT_16_UUID_LEN,
   12136:	4b05      	ldr	r3, [pc, #20]	; (1214c <AttcDiscCharStart+0x24>)
   12138:	9201      	str	r2, [sp, #4]
   1213a:	8a0a      	ldrh	r2, [r1, #16]
   1213c:	89c9      	ldrh	r1, [r1, #14]
   1213e:	9300      	str	r3, [sp, #0]
   12140:	2302      	movs	r3, #2
   12142:	f001 f99f 	bl	13484 <AttcReadByTypeReq>
                    (uint8_t *) attChUuid, TRUE);
}
   12146:	b003      	add	sp, #12
   12148:	f85d fb04 	ldr.w	pc, [sp], #4
   1214c:	0002680c 	.word	0x0002680c

00012150 <AttcDiscCharCmpl>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
uint8_t AttcDiscCharCmpl(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
   12150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12154:	468b      	mov	fp, r1
  uint8_t status;

  /* verify callback event */
  if (pMsg->hdr.event != ATTC_READ_BY_TYPE_RSP &&
   12156:	7889      	ldrb	r1, [r1, #2]
   12158:	2904      	cmp	r1, #4
{
   1215a:	b087      	sub	sp, #28
   1215c:	4607      	mov	r7, r0
  if (pMsg->hdr.event != ATTC_READ_BY_TYPE_RSP &&
   1215e:	f000 8099 	beq.w	12294 <AttcDiscCharCmpl+0x144>
   12162:	2902      	cmp	r1, #2
   12164:	f040 819b 	bne.w	1249e <AttcDiscCharCmpl+0x34e>
  if (pMsg->hdr.status == ATT_SUCCESS)
   12168:	f89b 3003 	ldrb.w	r3, [fp, #3]
   1216c:	9300      	str	r3, [sp, #0]
   1216e:	b32b      	cbz	r3, 121bc <AttcDiscCharCmpl+0x6c>
    pChar = &pCb->pCharList[pCb->charListIdx];
   12170:	7cba      	ldrb	r2, [r7, #18]
   12172:	6839      	ldr	r1, [r7, #0]
      if (pCb->charListIdx == pCb->charListLen)
   12174:	7b3c      	ldrb	r4, [r7, #12]
    pChar = &pCb->pCharList[pCb->charListIdx];
   12176:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1217a:	3201      	adds	r2, #1
   1217c:	b2d2      	uxtb	r2, r2
   1217e:	e005      	b.n	1218c <AttcDiscCharCmpl+0x3c>
    } while ((*pChar)->settings & ATTC_SET_DESCRIPTOR);
   12180:	f851 0f04 	ldr.w	r0, [r1, #4]!
   12184:	7900      	ldrb	r0, [r0, #4]
   12186:	0740      	lsls	r0, r0, #29
   12188:	d504      	bpl.n	12194 <AttcDiscCharCmpl+0x44>
   1218a:	461a      	mov	r2, r3
   1218c:	1c53      	adds	r3, r2, #1
      if (pCb->charListIdx == pCb->charListLen)
   1218e:	42a2      	cmp	r2, r4
    } while ((*pChar)->settings & ATTC_SET_DESCRIPTOR);
   12190:	b2db      	uxtb	r3, r3
      if (pCb->charListIdx == pCb->charListLen)
   12192:	d1f5      	bne.n	12180 <AttcDiscCharCmpl+0x30>
    return attcDiscDescriptors((dmConnId_t) pMsg->hdr.param, pCb);
   12194:	74ba      	strb	r2, [r7, #18]
   12196:	f89b 0000 	ldrb.w	r0, [fp]
   1219a:	4639      	mov	r1, r7
   1219c:	f7ff ff14 	bl	11fc8 <attcDiscDescriptors>
   121a0:	4604      	mov	r4, r0
  {
    status = attcDiscProcDesc(pCb, pMsg);
  }

  /* if characteristic discovery failed clear any handles */
  if (status != ATT_SUCCESS && status != ATT_CONTINUING)
   121a2:	b13c      	cbz	r4, 121b4 <AttcDiscCharCmpl+0x64>
   121a4:	2c78      	cmp	r4, #120	; 0x78
   121a6:	d070      	beq.n	1228a <AttcDiscCharCmpl+0x13a>
  {
    memset(pCb->pHdlList, 0, (pCb->charListLen * sizeof(uint16_t)));
   121a8:	7b3a      	ldrb	r2, [r7, #12]
   121aa:	6878      	ldr	r0, [r7, #4]
   121ac:	0052      	lsls	r2, r2, #1
   121ae:	2100      	movs	r1, #0
   121b0:	f011 f8c4 	bl	2333c <memset>
  }

  return status;
}
   121b4:	4620      	mov	r0, r4
   121b6:	b007      	add	sp, #28
   121b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p = pMsg->pValue;
   121bc:	f8db 3004 	ldr.w	r3, [fp, #4]
    pEnd = pMsg->pValue + pMsg->valueLen;
   121c0:	f8bb 2008 	ldrh.w	r2, [fp, #8]
    BSTREAM_TO_UINT8(format, p);
   121c4:	4698      	mov	r8, r3
    pEnd = pMsg->pValue + pMsg->valueLen;
   121c6:	eb03 0a02 	add.w	sl, r3, r2
    BSTREAM_TO_UINT8(format, p);
   121ca:	f818 3b01 	ldrb.w	r3, [r8], #1
    if (format == ATT_FIND_HANDLE_16_UUID)
   121ce:	2b01      	cmp	r3, #1
   121d0:	f000 810d 	beq.w	123ee <AttcDiscCharCmpl+0x29e>
    else if (format == ATT_FIND_HANDLE_128_UUID)
   121d4:	2b02      	cmp	r3, #2
   121d6:	f040 816a 	bne.w	124ae <AttcDiscCharCmpl+0x35e>
   121da:	2312      	movs	r3, #18
   121dc:	9303      	str	r3, [sp, #12]
      settings = ATTC_SET_UUID_128;
   121de:	2301      	movs	r3, #1
   121e0:	9300      	str	r3, [sp, #0]
    while (p < pEnd)
   121e2:	45c2      	cmp	sl, r8
   121e4:	d94c      	bls.n	12280 <AttcDiscCharCmpl+0x130>
   121e6:	f897 900c 	ldrb.w	r9, [r7, #12]
   121ea:	f8cd b014 	str.w	fp, [sp, #20]
   121ee:	46d3      	mov	fp, sl
  pDesc = &pCb->pCharList[pCb->charListIdx];
   121f0:	7cbc      	ldrb	r4, [r7, #18]
  BSTREAM_TO_UINT16(hdl, pPair);
   121f2:	f898 3000 	ldrb.w	r3, [r8]
  pDesc = &pCb->pCharList[pCb->charListIdx];
   121f6:	683e      	ldr	r6, [r7, #0]
  BSTREAM_TO_UINT16(hdl, pPair);
   121f8:	9301      	str	r3, [sp, #4]
  for (i = pCb->charListIdx;
   121fa:	454c      	cmp	r4, r9
  BSTREAM_TO_UINT16(hdl, pPair);
   121fc:	f898 3001 	ldrb.w	r3, [r8, #1]
   12200:	9302      	str	r3, [sp, #8]
  pDesc = &pCb->pCharList[pCb->charListIdx];
   12202:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   12206:	f108 0a02 	add.w	sl, r8, #2
   1220a:	b222      	sxth	r2, r4
  for (i = pCb->charListIdx;
   1220c:	f080 8151 	bcs.w	124b2 <AttcDiscCharCmpl+0x362>
   12210:	9b00      	ldr	r3, [sp, #0]
   12212:	2b01      	cmp	r3, #1
   12214:	f040 80ee 	bne.w	123f4 <AttcDiscCharCmpl+0x2a4>
   12218:	3e04      	subs	r6, #4
   1221a:	e003      	b.n	12224 <AttcDiscCharCmpl+0xd4>
       i++, pDesc++)
   1221c:	3401      	adds	r4, #1
   1221e:	b2e4      	uxtb	r4, r4
  for (i = pCb->charListIdx;
   12220:	454c      	cmp	r4, r9
   12222:	d222      	bcs.n	1226a <AttcDiscCharCmpl+0x11a>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
   12224:	f856 0f04 	ldr.w	r0, [r6, #4]!
   12228:	f890 c004 	ldrb.w	ip, [r0, #4]
   1222c:	f01c 0f04 	tst.w	ip, #4
    if (pCb->pHdlList[i] == 0)
   12230:	ea4f 0244 	mov.w	r2, r4, lsl #1
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
   12234:	d019      	beq.n	1226a <AttcDiscCharCmpl+0x11a>
    if (pCb->pHdlList[i] == 0)
   12236:	687d      	ldr	r5, [r7, #4]
   12238:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
   1223c:	eb05 0544 	add.w	r5, r5, r4, lsl #1
   12240:	2900      	cmp	r1, #0
   12242:	d1eb      	bne.n	1221c <AttcDiscCharCmpl+0xcc>
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
   12244:	f01c 0f01 	tst.w	ip, #1
   12248:	6800      	ldr	r0, [r0, #0]
    return attUuidCmp16to128(pChar->pUuid, pUuid);
   1224a:	4651      	mov	r1, sl
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
   1224c:	f040 810c 	bne.w	12468 <AttcDiscCharCmpl+0x318>
   12250:	9204      	str	r2, [sp, #16]
    return attUuidCmp16to128(pChar->pUuid, pUuid);
   12252:	f003 fa33 	bl	156bc <attUuidCmp16to128>
      if (attcUuidCmp(*pDesc, pPair, settings))
   12256:	9a04      	ldr	r2, [sp, #16]
   12258:	2800      	cmp	r0, #0
   1225a:	f040 811d 	bne.w	12498 <AttcDiscCharCmpl+0x348>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
   1225e:	f897 900c 	ldrb.w	r9, [r7, #12]
       i++, pDesc++)
   12262:	3401      	adds	r4, #1
   12264:	b2e4      	uxtb	r4, r4
  for (i = pCb->charListIdx;
   12266:	454c      	cmp	r4, r9
   12268:	d3dc      	bcc.n	12224 <AttcDiscCharCmpl+0xd4>
      p += pairLen;
   1226a:	9b03      	ldr	r3, [sp, #12]
   1226c:	4498      	add	r8, r3
    while (p < pEnd)
   1226e:	45c3      	cmp	fp, r8
   12270:	d8be      	bhi.n	121f0 <AttcDiscCharCmpl+0xa0>
   12272:	f8dd b014 	ldr.w	fp, [sp, #20]
  if (pMsg->hdr.status != ATT_SUCCESS || pMsg->continuing == FALSE)
   12276:	f89b 3003 	ldrb.w	r3, [fp, #3]
   1227a:	2b00      	cmp	r3, #0
   1227c:	f47f af78 	bne.w	12170 <AttcDiscCharCmpl+0x20>
   12280:	f89b 300c 	ldrb.w	r3, [fp, #12]
   12284:	2b00      	cmp	r3, #0
   12286:	f43f af73 	beq.w	12170 <AttcDiscCharCmpl+0x20>
    return ATT_CONTINUING;
   1228a:	2478      	movs	r4, #120	; 0x78
}
   1228c:	4620      	mov	r0, r4
   1228e:	b007      	add	sp, #28
   12290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pMsg->hdr.status == ATT_SUCCESS)
   12294:	f89b 3003 	ldrb.w	r3, [fp, #3]
   12298:	4618      	mov	r0, r3
   1229a:	2b00      	cmp	r3, #0
   1229c:	f040 8097 	bne.w	123ce <AttcDiscCharCmpl+0x27e>
    p = pMsg->pValue;
   122a0:	f8db 3004 	ldr.w	r3, [fp, #4]
    pEnd = pMsg->pValue + pMsg->valueLen;
   122a4:	f8bb 2008 	ldrh.w	r2, [fp, #8]
   122a8:	189a      	adds	r2, r3, r2
   122aa:	9200      	str	r2, [sp, #0]
    BSTREAM_TO_UINT8(pairLen, p);
   122ac:	461a      	mov	r2, r3
   122ae:	f812 1b01 	ldrb.w	r1, [r2], #1
   122b2:	9101      	str	r1, [sp, #4]
    if (pairLen == ATT_READ_RSP_LEN_UUID16)
   122b4:	2907      	cmp	r1, #7
   122b6:	d004      	beq.n	122c2 <AttcDiscCharCmpl+0x172>
    else if (pairLen == ATT_READ_RSP_LEN_UUID128)
   122b8:	2915      	cmp	r1, #21
   122ba:	f040 80f8 	bne.w	124ae <AttcDiscCharCmpl+0x35e>
      settings = ATTC_SET_UUID_128;
   122be:	2101      	movs	r1, #1
   122c0:	4608      	mov	r0, r1
    while (p < pEnd)
   122c2:	9900      	ldr	r1, [sp, #0]
   122c4:	4291      	cmp	r1, r2
   122c6:	d97d      	bls.n	123c4 <AttcDiscCharCmpl+0x274>
    pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;
   122c8:	f8cd b010 	str.w	fp, [sp, #16]
   122cc:	f103 0906 	add.w	r9, r3, #6
   122d0:	4683      	mov	fp, r0
  BSTREAM_TO_UINT16(declHdl, pDecl);
   122d2:	f819 2c04 	ldrb.w	r2, [r9, #-4]
   122d6:	f819 3c05 	ldrb.w	r3, [r9, #-5]
  BSTREAM_TO_UINT16(hdl, pDecl);
   122da:	f819 8c02 	ldrb.w	r8, [r9, #-2]
  BSTREAM_TO_UINT16(declHdl, pDecl);
   122de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  BSTREAM_TO_UINT16(hdl, pDecl);
   122e2:	f819 2c01 	ldrb.w	r2, [r9, #-1]
   122e6:	eb08 2802 	add.w	r8, r8, r2, lsl #8
  if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
   122ea:	7cfa      	ldrb	r2, [r7, #19]
   122ec:	2aff      	cmp	r2, #255	; 0xff
  BSTREAM_TO_UINT16(declHdl, pDecl);
   122ee:	b29b      	uxth	r3, r3
  BSTREAM_TO_UINT16(hdl, pDecl);
   122f0:	fa1f f888 	uxth.w	r8, r8
  if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
   122f4:	d006      	beq.n	12304 <AttcDiscCharCmpl+0x1b4>
    pCb->pHdlList[pCb->endHdlIdx] = declHdl - 1;
   122f6:	6879      	ldr	r1, [r7, #4]
   122f8:	1e58      	subs	r0, r3, #1
   122fa:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
    pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;
   122fe:	f04f 32ff 	mov.w	r2, #4294967295
   12302:	74fa      	strb	r2, [r7, #19]
  if (hdl > declHdl && hdl <= pCb->svcEndHdl)
   12304:	4543      	cmp	r3, r8
   12306:	f080 80b6 	bcs.w	12476 <AttcDiscCharCmpl+0x326>
   1230a:	8a3b      	ldrh	r3, [r7, #16]
   1230c:	4543      	cmp	r3, r8
   1230e:	f0c0 80b2 	bcc.w	12476 <AttcDiscCharCmpl+0x326>
    for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
   12312:	7b3b      	ldrb	r3, [r7, #12]
   12314:	f8d7 a000 	ldr.w	sl, [r7]
   12318:	2b00      	cmp	r3, #0
   1231a:	d047      	beq.n	123ac <AttcDiscCharCmpl+0x25c>
   1231c:	f8cd 9008 	str.w	r9, [sp, #8]
   12320:	2601      	movs	r6, #1
   12322:	46c1      	mov	r9, r8
   12324:	4698      	mov	r8, r3
   12326:	e006      	b.n	12336 <AttcDiscCharCmpl+0x1e6>
   12328:	1c72      	adds	r2, r6, #1
   1232a:	45b0      	cmp	r8, r6
   1232c:	f10a 0a04 	add.w	sl, sl, #4
   12330:	b2d2      	uxtb	r2, r2
   12332:	d939      	bls.n	123a8 <AttcDiscCharCmpl+0x258>
   12334:	4616      	mov	r6, r2
   12336:	1e75      	subs	r5, r6, #1
      if (pCb->pHdlList[i] == 0)
   12338:	b2e9      	uxtb	r1, r5
   1233a:	687c      	ldr	r4, [r7, #4]
   1233c:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
   12340:	460d      	mov	r5, r1
   12342:	004a      	lsls	r2, r1, #1
   12344:	eb04 0441 	add.w	r4, r4, r1, lsl #1
   12348:	2800      	cmp	r0, #0
   1234a:	d1ed      	bne.n	12328 <AttcDiscCharCmpl+0x1d8>
        if (attcUuidCmp(*pChar, pDecl, settings))
   1234c:	f8da 0000 	ldr.w	r0, [sl]
   12350:	7901      	ldrb	r1, [r0, #4]
   12352:	6800      	ldr	r0, [r0, #0]
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
   12354:	f001 0101 	and.w	r1, r1, #1
   12358:	458b      	cmp	fp, r1
   1235a:	f000 8091 	beq.w	12480 <AttcDiscCharCmpl+0x330>
  else if ((settings == ATTC_SET_UUID_128) && ((pChar->settings & ATTC_SET_UUID_128) == 0))
   1235e:	f1bb 0f01 	cmp.w	fp, #1
   12362:	d1e1      	bne.n	12328 <AttcDiscCharCmpl+0x1d8>
   12364:	2900      	cmp	r1, #0
   12366:	d1df      	bne.n	12328 <AttcDiscCharCmpl+0x1d8>
    return attUuidCmp16to128(pChar->pUuid, pUuid);
   12368:	9902      	ldr	r1, [sp, #8]
   1236a:	9203      	str	r2, [sp, #12]
   1236c:	f003 f9a6 	bl	156bc <attUuidCmp16to128>
        if (attcUuidCmp(*pChar, pDecl, settings))
   12370:	9a03      	ldr	r2, [sp, #12]
   12372:	b188      	cbz	r0, 12398 <AttcDiscCharCmpl+0x248>
          pCb->pHdlList[i] = hdl;
   12374:	687c      	ldr	r4, [r7, #4]
   12376:	4414      	add	r4, r2
   12378:	f8a4 9000 	strh.w	r9, [r4]
          if (i < (pCb->charListLen - 1) &&
   1237c:	7b3a      	ldrb	r2, [r7, #12]
   1237e:	3a01      	subs	r2, #1
   12380:	4295      	cmp	r5, r2
   12382:	da05      	bge.n	12390 <AttcDiscCharCmpl+0x240>
              ((*(pChar + 1))->settings & ATTC_SET_DESCRIPTOR) == ATTC_SET_DESCRIPTOR)
   12384:	f8da 2004 	ldr.w	r2, [sl, #4]
          if (i < (pCb->charListLen - 1) &&
   12388:	7912      	ldrb	r2, [r2, #4]
   1238a:	0752      	lsls	r2, r2, #29
            pCb->endHdlIdx = i + 1;
   1238c:	bf48      	it	mi
   1238e:	74fe      	strbmi	r6, [r7, #19]
          ATT_TRACE_INFO1("characteristic found handle:0x%x", hdl);
   12390:	4850      	ldr	r0, [pc, #320]	; (124d4 <AttcDiscCharCmpl+0x384>)
   12392:	4649      	mov	r1, r9
   12394:	f00c f980 	bl	1e698 <WsfTrace>
   12398:	f897 800c 	ldrb.w	r8, [r7, #12]
    for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
   1239c:	1c72      	adds	r2, r6, #1
   1239e:	45b0      	cmp	r8, r6
   123a0:	f10a 0a04 	add.w	sl, sl, #4
   123a4:	b2d2      	uxtb	r2, r2
   123a6:	d8c5      	bhi.n	12334 <AttcDiscCharCmpl+0x1e4>
   123a8:	f8dd 9008 	ldr.w	r9, [sp, #8]
    while (p < pEnd)
   123ac:	9b01      	ldr	r3, [sp, #4]
   123ae:	9a00      	ldr	r2, [sp, #0]
   123b0:	4499      	add	r9, r3
   123b2:	f1a9 0305 	sub.w	r3, r9, #5
   123b6:	429a      	cmp	r2, r3
   123b8:	d88b      	bhi.n	122d2 <AttcDiscCharCmpl+0x182>
  if (pMsg->hdr.status != ATT_SUCCESS || pMsg->continuing == FALSE)
   123ba:	f8dd b010 	ldr.w	fp, [sp, #16]
   123be:	f89b 3003 	ldrb.w	r3, [fp, #3]
   123c2:	b923      	cbnz	r3, 123ce <AttcDiscCharCmpl+0x27e>
   123c4:	f89b 300c 	ldrb.w	r3, [fp, #12]
   123c8:	2b00      	cmp	r3, #0
   123ca:	f47f af5e 	bne.w	1228a <AttcDiscCharCmpl+0x13a>
    if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
   123ce:	7cfb      	ldrb	r3, [r7, #19]
   123d0:	2bff      	cmp	r3, #255	; 0xff
   123d2:	d003      	beq.n	123dc <AttcDiscCharCmpl+0x28c>
      pCb->pHdlList[pCb->endHdlIdx] = pCb->svcEndHdl;
   123d4:	687a      	ldr	r2, [r7, #4]
   123d6:	8a39      	ldrh	r1, [r7, #16]
   123d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    pCb->charListIdx = 0;
   123dc:	2300      	movs	r3, #0
   123de:	74bb      	strb	r3, [r7, #18]
    return attcDiscDescriptors((dmConnId_t) pMsg->hdr.param, pCb);
   123e0:	f89b 0000 	ldrb.w	r0, [fp]
   123e4:	4639      	mov	r1, r7
   123e6:	f7ff fdef 	bl	11fc8 <attcDiscDescriptors>
   123ea:	4604      	mov	r4, r0
   123ec:	e6d9      	b.n	121a2 <AttcDiscCharCmpl+0x52>
   123ee:	2304      	movs	r3, #4
   123f0:	9303      	str	r3, [sp, #12]
   123f2:	e6f6      	b.n	121e2 <AttcDiscCharCmpl+0x92>
   123f4:	f109 3cff 	add.w	ip, r9, #4294967295
   123f8:	ebac 0c04 	sub.w	ip, ip, r4
   123fc:	fa5f fc8c 	uxtb.w	ip, ip
   12400:	2304      	movs	r3, #4
   12402:	fb13 6c0c 	smlabb	ip, r3, ip, r6
   12406:	0052      	lsls	r2, r2, #1
   12408:	3e04      	subs	r6, #4
   1240a:	e002      	b.n	12412 <AttcDiscCharCmpl+0x2c2>
  for (i = pCb->charListIdx;
   1240c:	45b4      	cmp	ip, r6
   1240e:	f43f af2c 	beq.w	1226a <AttcDiscCharCmpl+0x11a>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
   12412:	f856 0f04 	ldr.w	r0, [r6, #4]!
   12416:	7901      	ldrb	r1, [r0, #4]
   12418:	074b      	lsls	r3, r1, #29
   1241a:	f57f af26 	bpl.w	1226a <AttcDiscCharCmpl+0x11a>
    if (pCb->pHdlList[i] == 0)
   1241e:	687b      	ldr	r3, [r7, #4]
   12420:	5a9c      	ldrh	r4, [r3, r2]
   12422:	4413      	add	r3, r2
  for (i = pCb->charListIdx;
   12424:	3202      	adds	r2, #2
    if (pCb->pHdlList[i] == 0)
   12426:	2c00      	cmp	r4, #0
   12428:	d1f0      	bne.n	1240c <AttcDiscCharCmpl+0x2bc>
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
   1242a:	07cd      	lsls	r5, r1, #31
   1242c:	6800      	ldr	r0, [r0, #0]
   1242e:	d4ed      	bmi.n	1240c <AttcDiscCharCmpl+0x2bc>
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
   12430:	7804      	ldrb	r4, [r0, #0]
   12432:	f89a 1000 	ldrb.w	r1, [sl]
   12436:	428c      	cmp	r4, r1
   12438:	d1e8      	bne.n	1240c <AttcDiscCharCmpl+0x2bc>
   1243a:	7840      	ldrb	r0, [r0, #1]
   1243c:	f89a 1001 	ldrb.w	r1, [sl, #1]
   12440:	4288      	cmp	r0, r1
   12442:	d1e3      	bne.n	1240c <AttcDiscCharCmpl+0x2bc>
   12444:	461d      	mov	r5, r3
  BSTREAM_TO_UINT16(hdl, pPair);
   12446:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   1244a:	eb03 2102 	add.w	r1, r3, r2, lsl #8
      p += pairLen;
   1244e:	9b03      	ldr	r3, [sp, #12]
        ATT_TRACE_INFO1("descriptor found handle:0x%x", hdl);
   12450:	4821      	ldr	r0, [pc, #132]	; (124d8 <AttcDiscCharCmpl+0x388>)
  BSTREAM_TO_UINT16(hdl, pPair);
   12452:	b289      	uxth	r1, r1
      p += pairLen;
   12454:	4498      	add	r8, r3
        pCb->pHdlList[i] = hdl;
   12456:	8029      	strh	r1, [r5, #0]
        ATT_TRACE_INFO1("descriptor found handle:0x%x", hdl);
   12458:	f00c f91e 	bl	1e698 <WsfTrace>
    while (p < pEnd)
   1245c:	45c3      	cmp	fp, r8
   1245e:	f67f af08 	bls.w	12272 <AttcDiscCharCmpl+0x122>
   12462:	f897 900c 	ldrb.w	r9, [r7, #12]
   12466:	e6c3      	b.n	121f0 <AttcDiscCharCmpl+0xa0>
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
   12468:	2210      	movs	r2, #16
   1246a:	f010 ff35 	bl	232d8 <memcmp>
      if (attcUuidCmp(*pDesc, pPair, settings))
   1246e:	2800      	cmp	r0, #0
   12470:	f47f aed4 	bne.w	1221c <AttcDiscCharCmpl+0xcc>
   12474:	e7e7      	b.n	12446 <AttcDiscCharCmpl+0x2f6>
    ATT_TRACE_WARN1("invalid handle:0x%x", hdl);
   12476:	4819      	ldr	r0, [pc, #100]	; (124dc <AttcDiscCharCmpl+0x38c>)
   12478:	4641      	mov	r1, r8
   1247a:	f00c f90d 	bl	1e698 <WsfTrace>
   1247e:	e795      	b.n	123ac <AttcDiscCharCmpl+0x25c>
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
   12480:	f1bb 0f00 	cmp.w	fp, #0
   12484:	bf0c      	ite	eq
   12486:	2202      	moveq	r2, #2
   12488:	2210      	movne	r2, #16
   1248a:	9902      	ldr	r1, [sp, #8]
   1248c:	f010 ff24 	bl	232d8 <memcmp>
        if (attcUuidCmp(*pChar, pDecl, settings))
   12490:	2800      	cmp	r0, #0
   12492:	f43f af71 	beq.w	12378 <AttcDiscCharCmpl+0x228>
   12496:	e747      	b.n	12328 <AttcDiscCharCmpl+0x1d8>
        pCb->pHdlList[i] = hdl;
   12498:	687d      	ldr	r5, [r7, #4]
   1249a:	4415      	add	r5, r2
   1249c:	e7d3      	b.n	12446 <AttcDiscCharCmpl+0x2f6>
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
   1249e:	4810      	ldr	r0, [pc, #64]	; (124e0 <AttcDiscCharCmpl+0x390>)
   124a0:	f00c f8fa 	bl	1e698 <WsfTrace>
    return ATT_ERR_UNDEFINED;
   124a4:	2475      	movs	r4, #117	; 0x75
}
   124a6:	4620      	mov	r0, r4
   124a8:	b007      	add	sp, #28
   124aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124ae:	2473      	movs	r4, #115	; 0x73
   124b0:	e67a      	b.n	121a8 <AttcDiscCharCmpl+0x58>
      p += pairLen;
   124b2:	9b03      	ldr	r3, [sp, #12]
   124b4:	46da      	mov	sl, fp
   124b6:	4498      	add	r8, r3
    while (p < pEnd)
   124b8:	45c2      	cmp	sl, r8
      p += pairLen;
   124ba:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (p < pEnd)
   124be:	f67f aeda 	bls.w	12276 <AttcDiscCharCmpl+0x126>
      p += pairLen;
   124c2:	4498      	add	r8, r3
    while (p < pEnd)
   124c4:	45c2      	cmp	sl, r8
   124c6:	f67f aed6 	bls.w	12276 <AttcDiscCharCmpl+0x126>
      p += pairLen;
   124ca:	4498      	add	r8, r3
    while (p < pEnd)
   124cc:	45c2      	cmp	sl, r8
   124ce:	d8f8      	bhi.n	124c2 <AttcDiscCharCmpl+0x372>
   124d0:	e6d1      	b.n	12276 <AttcDiscCharCmpl+0x126>
   124d2:	bf00      	nop
   124d4:	00026584 	.word	0x00026584
   124d8:	000265bc 	.word	0x000265bc
   124dc:	000265a8 	.word	0x000265a8
   124e0:	0002653c 	.word	0x0002653c

000124e4 <AttcDiscConfigStart>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if nothing to configure.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigStart(dmConnId_t connId, attcDiscCb_t *pCb)
{
   124e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (pCb->charListIdx < pCb->cfgListLen)
   124e6:	7b4e      	ldrb	r6, [r1, #13]
  pCfg = pCb->pCfgList + pCb->charListIdx;
   124e8:	688c      	ldr	r4, [r1, #8]
  /* use char list index to iterate over config list */
  pCb->charListIdx = 0;
   124ea:	2300      	movs	r3, #0
   124ec:	748b      	strb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->cfgListLen)
   124ee:	b1ae      	cbz	r6, 1251c <AttcDiscConfigStart+0x38>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   124f0:	684f      	ldr	r7, [r1, #4]
   124f2:	e004      	b.n	124fe <AttcDiscConfigStart+0x1a>
  while (pCb->charListIdx < pCb->cfgListLen)
   124f4:	429e      	cmp	r6, r3
    pCb->charListIdx++;
   124f6:	748b      	strb	r3, [r1, #18]
    pCfg++;
   124f8:	f104 0408 	add.w	r4, r4, #8
  while (pCb->charListIdx < pCb->cfgListLen)
   124fc:	d00e      	beq.n	1251c <AttcDiscConfigStart+0x38>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   124fe:	7962      	ldrb	r2, [r4, #5]
   12500:	f837 5012 	ldrh.w	r5, [r7, r2, lsl #1]
    pCb->charListIdx++;
   12504:	3301      	adds	r3, #1
   12506:	b2db      	uxtb	r3, r3
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   12508:	2d00      	cmp	r5, #0
   1250a:	d0f3      	beq.n	124f4 <AttcDiscConfigStart+0x10>
      if (pCfg->valueLen != 0)
   1250c:	7922      	ldrb	r2, [r4, #4]
   1250e:	b13a      	cbz	r2, 12520 <AttcDiscConfigStart+0x3c>
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
   12510:	6823      	ldr	r3, [r4, #0]
   12512:	4629      	mov	r1, r5
   12514:	f000 fe9e 	bl	13254 <AttcWriteReq>
      return ATT_CONTINUING;
   12518:	2078      	movs	r0, #120	; 0x78

  return attcDiscConfigNext(connId, pCb);
}
   1251a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ATT_SUCCESS;
   1251c:	2000      	movs	r0, #0
}
   1251e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
   12520:	4629      	mov	r1, r5
   12522:	f000 fe45 	bl	131b0 <AttcReadReq>
      return ATT_CONTINUING;
   12526:	2078      	movs	r0, #120	; 0x78
}
   12528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1252a:	bf00      	nop

0001252c <AttcDiscConfigCmpl>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if configuration procedure completed successfully.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigCmpl(dmConnId_t connId, attcDiscCb_t *pCb)
{
   1252c:	b538      	push	{r3, r4, r5, lr}
  /* go to next in list */
  pCb->charListIdx++;
   1252e:	7c8b      	ldrb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->cfgListLen)
   12530:	f891 e00d 	ldrb.w	lr, [r1, #13]
  pCfg = pCb->pCfgList + pCb->charListIdx;
   12534:	688a      	ldr	r2, [r1, #8]
  pCb->charListIdx++;
   12536:	3301      	adds	r3, #1
   12538:	b2db      	uxtb	r3, r3
  while (pCb->charListIdx < pCb->cfgListLen)
   1253a:	4573      	cmp	r3, lr
  pCb->charListIdx++;
   1253c:	748b      	strb	r3, [r1, #18]
  pCfg = pCb->pCfgList + pCb->charListIdx;
   1253e:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
  while (pCb->charListIdx < pCb->cfgListLen)
   12542:	d218      	bcs.n	12576 <AttcDiscConfigCmpl+0x4a>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   12544:	684d      	ldr	r5, [r1, #4]
   12546:	e004      	b.n	12552 <AttcDiscConfigCmpl+0x26>
  while (pCb->charListIdx < pCb->cfgListLen)
   12548:	4573      	cmp	r3, lr
    pCb->charListIdx++;
   1254a:	748b      	strb	r3, [r1, #18]
    pCfg++;
   1254c:	f10c 0c08 	add.w	ip, ip, #8
  while (pCb->charListIdx < pCb->cfgListLen)
   12550:	d211      	bcs.n	12576 <AttcDiscConfigCmpl+0x4a>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   12552:	f89c 2005 	ldrb.w	r2, [ip, #5]
   12556:	f835 4012 	ldrh.w	r4, [r5, r2, lsl #1]
    pCb->charListIdx++;
   1255a:	3301      	adds	r3, #1
   1255c:	b2db      	uxtb	r3, r3
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   1255e:	2c00      	cmp	r4, #0
   12560:	d0f2      	beq.n	12548 <AttcDiscConfigCmpl+0x1c>
      if (pCfg->valueLen != 0)
   12562:	f89c 2004 	ldrb.w	r2, [ip, #4]
   12566:	b142      	cbz	r2, 1257a <AttcDiscConfigCmpl+0x4e>
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
   12568:	f8dc 3000 	ldr.w	r3, [ip]
   1256c:	4621      	mov	r1, r4
   1256e:	f000 fe71 	bl	13254 <AttcWriteReq>
      return ATT_CONTINUING;
   12572:	2078      	movs	r0, #120	; 0x78

  return attcDiscConfigNext(connId, pCb);
}
   12574:	bd38      	pop	{r3, r4, r5, pc}
  return ATT_SUCCESS;
   12576:	2000      	movs	r0, #0
}
   12578:	bd38      	pop	{r3, r4, r5, pc}
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
   1257a:	4621      	mov	r1, r4
   1257c:	f000 fe18 	bl	131b0 <AttcReadReq>
      return ATT_CONTINUING;
   12580:	2078      	movs	r0, #120	; 0x78
}
   12582:	bd38      	pop	{r3, r4, r5, pc}

00012584 <AttcDiscConfigResume>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if configuration procedure completed successfully.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigResume(dmConnId_t connId, attcDiscCb_t *pCb)
{
   12584:	b538      	push	{r3, r4, r5, lr}
  pCfg = pCb->pCfgList + pCb->charListIdx;
   12586:	7c8b      	ldrb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->cfgListLen)
   12588:	f891 e00d 	ldrb.w	lr, [r1, #13]
  pCfg = pCb->pCfgList + pCb->charListIdx;
   1258c:	688a      	ldr	r2, [r1, #8]
  while (pCb->charListIdx < pCb->cfgListLen)
   1258e:	4573      	cmp	r3, lr
  pCfg = pCb->pCfgList + pCb->charListIdx;
   12590:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
  while (pCb->charListIdx < pCb->cfgListLen)
   12594:	d218      	bcs.n	125c8 <AttcDiscConfigResume+0x44>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   12596:	684d      	ldr	r5, [r1, #4]
   12598:	e004      	b.n	125a4 <AttcDiscConfigResume+0x20>
  while (pCb->charListIdx < pCb->cfgListLen)
   1259a:	4573      	cmp	r3, lr
    pCb->charListIdx++;
   1259c:	748b      	strb	r3, [r1, #18]
    pCfg++;
   1259e:	f10c 0c08 	add.w	ip, ip, #8
  while (pCb->charListIdx < pCb->cfgListLen)
   125a2:	d011      	beq.n	125c8 <AttcDiscConfigResume+0x44>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   125a4:	f89c 2005 	ldrb.w	r2, [ip, #5]
   125a8:	f835 4012 	ldrh.w	r4, [r5, r2, lsl #1]
    pCb->charListIdx++;
   125ac:	3301      	adds	r3, #1
   125ae:	b2db      	uxtb	r3, r3
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   125b0:	2c00      	cmp	r4, #0
   125b2:	d0f2      	beq.n	1259a <AttcDiscConfigResume+0x16>
      if (pCfg->valueLen != 0)
   125b4:	f89c 2004 	ldrb.w	r2, [ip, #4]
   125b8:	b142      	cbz	r2, 125cc <AttcDiscConfigResume+0x48>
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
   125ba:	f8dc 3000 	ldr.w	r3, [ip]
   125be:	4621      	mov	r1, r4
   125c0:	f000 fe48 	bl	13254 <AttcWriteReq>
      return ATT_CONTINUING;
   125c4:	2078      	movs	r0, #120	; 0x78
  return attcDiscConfigNext(connId, pCb);
}
   125c6:	bd38      	pop	{r3, r4, r5, pc}
  return ATT_SUCCESS;
   125c8:	2000      	movs	r0, #0
}
   125ca:	bd38      	pop	{r3, r4, r5, pc}
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
   125cc:	4621      	mov	r1, r4
   125ce:	f000 fdef 	bl	131b0 <AttcReadReq>
      return ATT_CONTINUING;
   125d2:	2078      	movs	r0, #120	; 0x78
}
   125d4:	bd38      	pop	{r3, r4, r5, pc}
   125d6:	bf00      	nop

000125d8 <attcSendSimpleReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendSimpleReq(attcCcb_t *pCcb)
{
   125d8:	b570      	push	{r4, r5, r6, lr}

  /* clear stored packet pointer */
  pCcb->outReq.pPkt = NULL;

  /* start request timer (except for write command) */
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   125da:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   125dc:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
   125de:	2200      	movs	r2, #0
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   125e0:	2b0a      	cmp	r3, #10
{
   125e2:	4604      	mov	r4, r0
  pCcb->outReq.pPkt = NULL;
   125e4:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   125e6:	d008      	beq.n	125fa <attcSendSimpleReq+0x22>
  {
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   125e8:	4b08      	ldr	r3, [pc, #32]	; (1260c <attcSendSimpleReq+0x34>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   125ea:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   125ec:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   125ee:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   125f2:	7999      	ldrb	r1, [r3, #6]
   125f4:	3024      	adds	r0, #36	; 0x24
   125f6:	f00b ff29 	bl	1e44c <WsfTimerStartSec>
  }

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   125fa:	6823      	ldr	r3, [r4, #0]
   125fc:	882a      	ldrh	r2, [r5, #0]
   125fe:	8b19      	ldrh	r1, [r3, #24]
   12600:	2004      	movs	r0, #4
   12602:	462b      	mov	r3, r5
}
   12604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   12608:	f007 ba26 	b.w	19a58 <L2cDataReq>
   1260c:	10002c2c 	.word	0x10002c2c

00012610 <attcDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   12610:	b538      	push	{r3, r4, r5, lr}
   12612:	460d      	mov	r5, r1
   12614:	4614      	mov	r4, r2
/*************************************************************************************************/
attcCcb_t *attcCcbByHandle(uint16_t handle)
{
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   12616:	f7fa fe89 	bl	d32c <DmConnIdByHandle>
   1261a:	b190      	cbz	r0, 12642 <attcDataCback+0x32>
  opcode = *(pPacket + L2C_PAYLOAD_START);
   1261c:	7a21      	ldrb	r1, [r4, #8]
  {
    return &attcCb.ccb[connId - 1];
   1261e:	4b0f      	ldr	r3, [pc, #60]	; (1265c <attcDataCback+0x4c>)
   12620:	3801      	subs	r0, #1
   12622:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
   12626:	2919      	cmp	r1, #25
    return &attcCb.ccb[connId - 1];
   12628:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
   1262c:	d90a      	bls.n	12644 <attcDataCback+0x34>
  else if ((opcode == ATT_PDU_VALUE_NTF) || (opcode == ATT_PDU_VALUE_IND))
   1262e:	291b      	cmp	r1, #27
   12630:	d001      	beq.n	12636 <attcDataCback+0x26>
   12632:	291d      	cmp	r1, #29
   12634:	d10c      	bne.n	12650 <attcDataCback+0x40>
    attcProcInd(pCcb, len, pPacket);
   12636:	4622      	mov	r2, r4
   12638:	4629      	mov	r1, r5
}
   1263a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    attcProcInd(pCcb, len, pPacket);
   1263e:	f000 bcb9 	b.w	12fb4 <attcProcInd>
}
   12642:	bd38      	pop	{r3, r4, r5, pc}
    attcProcRsp(pCcb, len, pPacket);
   12644:	4622      	mov	r2, r4
   12646:	4629      	mov	r1, r5
}
   12648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    attcProcRsp(pCcb, len, pPacket);
   1264c:	f000 bc54 	b.w	12ef8 <attcProcRsp>
}
   12650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ATT_TRACE_WARN1("attc unknown opcode 0x%02x", opcode);
   12654:	4802      	ldr	r0, [pc, #8]	; (12660 <attcDataCback+0x50>)
   12656:	f00c b81f 	b.w	1e698 <WsfTrace>
   1265a:	bf00      	nop
   1265c:	10004120 	.word	0x10004120
   12660:	000265dc 	.word	0x000265dc

00012664 <attcCtrlCback>:
{
   12664:	b530      	push	{r4, r5, lr}
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   12666:	7804      	ldrb	r4, [r0, #0]
{
   12668:	b083      	sub	sp, #12
   1266a:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
   1266c:	4620      	mov	r0, r4
   1266e:	f7fa fe7f 	bl	d370 <DmConnInUse>
   12672:	b1a0      	cbz	r0, 1269e <attcCtrlCback+0x3a>
    AttcIndConfirm((dmConnId_t) pMsg->param);
   12674:	7828      	ldrb	r0, [r5, #0]
   12676:	f000 fe63 	bl	13340 <AttcIndConfirm>
    return &attcCb.ccb[connId - 1];
   1267a:	3c01      	subs	r4, #1
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   1267c:	490b      	ldr	r1, [pc, #44]	; (126ac <attcCtrlCback+0x48>)
    attcWriteCmdCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   1267e:	7828      	ldrb	r0, [r5, #0]
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   12680:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   12684:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   12688:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   1268a:	b132      	cbz	r2, 1269a <attcCtrlCback+0x36>
/*************************************************************************************************/
void attcExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status)
{
  if (event != ATT_METHOD_MTU)
  {
    attExecCallback(connId, event, handle, status, 0);
   1268c:	2500      	movs	r5, #0
   1268e:	9500      	str	r5, [sp, #0]
   12690:	462b      	mov	r3, r5
   12692:	210a      	movs	r1, #10
   12694:	f003 f846 	bl	15724 <attExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
   12698:	86e5      	strh	r5, [r4, #54]	; 0x36
}
   1269a:	b003      	add	sp, #12
   1269c:	bd30      	pop	{r4, r5, pc}
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   1269e:	4804      	ldr	r0, [pc, #16]	; (126b0 <attcCtrlCback+0x4c>)
   126a0:	4621      	mov	r1, r4
}
   126a2:	b003      	add	sp, #12
   126a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   126a8:	f00b bff6 	b.w	1e698 <WsfTrace>
   126ac:	10004120 	.word	0x10004120
   126b0:	000265f8 	.word	0x000265f8

000126b4 <attcSendWriteCmd>:
{
   126b4:	b530      	push	{r4, r5, lr}
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   126b6:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   126b8:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
   126ba:	2200      	movs	r2, #0
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   126bc:	2b0a      	cmp	r3, #10
{
   126be:	b083      	sub	sp, #12
   126c0:	4604      	mov	r4, r0
  pCcb->outReq.pPkt = NULL;
   126c2:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   126c4:	d008      	beq.n	126d8 <attcSendWriteCmd+0x24>
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   126c6:	4b13      	ldr	r3, [pc, #76]	; (12714 <attcSendWriteCmd+0x60>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   126c8:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   126ca:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   126cc:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   126d0:	7999      	ldrb	r1, [r3, #6]
   126d2:	3024      	adds	r0, #36	; 0x24
   126d4:	f00b feba 	bl	1e44c <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   126d8:	6823      	ldr	r3, [r4, #0]
   126da:	882a      	ldrh	r2, [r5, #0]
   126dc:	8b19      	ldrh	r1, [r3, #24]
   126de:	2004      	movs	r0, #4
   126e0:	462b      	mov	r3, r5
   126e2:	f007 f9b9 	bl	19a58 <L2cDataReq>
  if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   126e6:	6822      	ldr	r2, [r4, #0]
   126e8:	7f53      	ldrb	r3, [r2, #29]
   126ea:	f013 0302 	ands.w	r3, r3, #2
   126ee:	d007      	beq.n	12700 <attcSendWriteCmd+0x4c>
    if (pCcb->pendWriteCmdHandle[i] == ATT_HANDLE_NONE)
   126f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   126f2:	b90b      	cbnz	r3, 126f8 <attcSendWriteCmd+0x44>
      pCcb->pendWriteCmdHandle[i] = pCcb->outReq.handle;
   126f4:	8b23      	ldrh	r3, [r4, #24]
   126f6:	86e3      	strh	r3, [r4, #54]	; 0x36
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   126f8:	2300      	movs	r3, #0
   126fa:	74a3      	strb	r3, [r4, #18]
}
   126fc:	b003      	add	sp, #12
   126fe:	bd30      	pop	{r4, r5, pc}
    attExecCallback(connId, event, handle, status, 0);
   12700:	7f10      	ldrb	r0, [r2, #28]
   12702:	8b22      	ldrh	r2, [r4, #24]
   12704:	9300      	str	r3, [sp, #0]
   12706:	210a      	movs	r1, #10
   12708:	f003 f80c 	bl	15724 <attExecCallback>
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   1270c:	2300      	movs	r3, #0
   1270e:	74a3      	strb	r3, [r4, #18]
}
   12710:	b003      	add	sp, #12
   12712:	bd30      	pop	{r4, r5, pc}
   12714:	10002c2c 	.word	0x10002c2c

00012718 <attcSendMtuReq>:
{
   12718:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
   1271a:	6801      	ldr	r1, [r0, #0]
   1271c:	7f4b      	ldrb	r3, [r1, #29]
   1271e:	f013 0201 	ands.w	r2, r3, #1
{
   12722:	4604      	mov	r4, r0
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
   12724:	d00c      	beq.n	12740 <attcSendMtuReq+0x28>
  if (pMsg->pPkt != NULL)
   12726:	6940      	ldr	r0, [r0, #20]
   12728:	b118      	cbz	r0, 12732 <attcSendMtuReq+0x1a>
    WsfMsgFree(pMsg->pPkt);
   1272a:	f00b fc3d 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   1272e:	2300      	movs	r3, #0
   12730:	6163      	str	r3, [r4, #20]
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   12732:	2300      	movs	r3, #0
   12734:	74a3      	strb	r3, [r4, #18]
}
   12736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ATT_TRACE_WARN0("MTU req discarded");
   1273a:	480f      	ldr	r0, [pc, #60]	; (12778 <attcSendMtuReq+0x60>)
   1273c:	f00b bfac 	b.w	1e698 <WsfTrace>
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;
   12740:	f043 0301 	orr.w	r3, r3, #1
   12744:	774b      	strb	r3, [r1, #29]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   12746:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   12748:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
   1274a:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   1274c:	2b0a      	cmp	r3, #10
   1274e:	d107      	bne.n	12760 <attcSendMtuReq+0x48>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   12750:	882a      	ldrh	r2, [r5, #0]
   12752:	8b09      	ldrh	r1, [r1, #24]
   12754:	462b      	mov	r3, r5
   12756:	2004      	movs	r0, #4
}
   12758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   1275c:	f007 b97c 	b.w	19a58 <L2cDataReq>
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   12760:	4b06      	ldr	r3, [pc, #24]	; (1277c <attcSendMtuReq+0x64>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   12762:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   12764:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   12766:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1276a:	7999      	ldrb	r1, [r3, #6]
   1276c:	3024      	adds	r0, #36	; 0x24
   1276e:	f00b fe6d 	bl	1e44c <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   12772:	6821      	ldr	r1, [r4, #0]
   12774:	e7ec      	b.n	12750 <attcSendMtuReq+0x38>
   12776:	bf00      	nop
   12778:	00026610 	.word	0x00026610
   1277c:	10002c2c 	.word	0x10002c2c

00012780 <attcConnCback>:
{
   12780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   12784:	788b      	ldrb	r3, [r1, #2]
   12786:	2b27      	cmp	r3, #39	; 0x27
{
   12788:	b085      	sub	sp, #20
   1278a:	4606      	mov	r6, r0
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1278c:	d03e      	beq.n	1280c <attcConnCback+0x8c>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1278e:	2b28      	cmp	r3, #40	; 0x28
   12790:	d002      	beq.n	12798 <attcConnCback+0x18>
}
   12792:	b005      	add	sp, #20
   12794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   12798:	78cb      	ldrb	r3, [r1, #3]
   1279a:	2b00      	cmp	r3, #0
   1279c:	d04d      	beq.n	1283a <attcConnCback+0xba>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   1279e:	3320      	adds	r3, #32
   127a0:	b2db      	uxtb	r3, r3
    pClient = &attcCb.ccb[pCcb->connId - 1];
   127a2:	7f35      	ldrb	r5, [r6, #28]
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
   127a4:	4c51      	ldr	r4, [pc, #324]	; (128ec <attcConnCback+0x16c>)
    pClient = &attcCb.ccb[pCcb->connId - 1];
   127a6:	3d01      	subs	r5, #1
   127a8:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
   127ac:	eb04 09c2 	add.w	r9, r4, r2, lsl #3
   127b0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
   127b4:	f899 2012 	ldrb.w	r2, [r9, #18]
   127b8:	00ef      	lsls	r7, r5, #3
   127ba:	2a00      	cmp	r2, #0
   127bc:	d155      	bne.n	1286a <attcConnCback+0xea>
    if (pClient->onDeck.hdr.event != ATTC_MSG_API_NONE)
   127be:	eba7 0905 	sub.w	r9, r7, r5
   127c2:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
   127c6:	f899 1006 	ldrb.w	r1, [r9, #6]
   127ca:	2900      	cmp	r1, #0
   127cc:	d139      	bne.n	12842 <attcConnCback+0xc2>
    pClient->flowDisabled = FALSE;
   127ce:	1b7a      	subs	r2, r7, r5
    if (attcCb.pSign != NULL)
   127d0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    pClient->flowDisabled = FALSE;
   127d4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   127d8:	2000      	movs	r0, #0
   127da:	8690      	strh	r0, [r2, #52]	; 0x34
    if (attcCb.pSign != NULL)
   127dc:	b131      	cbz	r1, 127ec <attcConnCback+0x6c>
      (*attcCb.pSign->closeCback)(pClient, status);
   127de:	684a      	ldr	r2, [r1, #4]
   127e0:	9303      	str	r3, [sp, #12]
   127e2:	4619      	mov	r1, r3
   127e4:	eb04 0008 	add.w	r0, r4, r8
   127e8:	4790      	blx	r2
   127ea:	9b03      	ldr	r3, [sp, #12]
    attcWriteCmdCallback(pCcb->connId, pClient, status);
   127ec:	7f30      	ldrb	r0, [r6, #28]
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   127ee:	1b7d      	subs	r5, r7, r5
   127f0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   127f4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   127f6:	2a00      	cmp	r2, #0
   127f8:	d0cb      	beq.n	12792 <attcConnCback+0x12>
    attExecCallback(connId, event, handle, status, 0);
   127fa:	2500      	movs	r5, #0
   127fc:	9500      	str	r5, [sp, #0]
   127fe:	210a      	movs	r1, #10
   12800:	f002 ff90 	bl	15724 <attExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
   12804:	86e5      	strh	r5, [r4, #54]	; 0x36
}
   12806:	b005      	add	sp, #20
   12808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   1280c:	7f00      	ldrb	r0, [r0, #28]
   1280e:	f7fa fe41 	bl	d494 <DmConnRole>
   12812:	2800      	cmp	r0, #0
   12814:	d1bd      	bne.n	12792 <attcConnCback+0x12>
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   12816:	4c36      	ldr	r4, [pc, #216]	; (128f0 <attcConnCback+0x170>)
   12818:	6823      	ldr	r3, [r4, #0]
   1281a:	889d      	ldrh	r5, [r3, #4]
   1281c:	f005 f8d0 	bl	179c0 <HciGetMaxRxAclLen>
   12820:	3804      	subs	r0, #4
   12822:	4285      	cmp	r5, r0
   12824:	da5d      	bge.n	128e2 <attcConnCback+0x162>
   12826:	6823      	ldr	r3, [r4, #0]
   12828:	8899      	ldrh	r1, [r3, #4]
      if (localMtu != ATT_DEFAULT_MTU)
   1282a:	2917      	cmp	r1, #23
   1282c:	d0b1      	beq.n	12792 <attcConnCback+0x12>
        AttcMtuReq(pCcb->connId, localMtu);
   1282e:	7f30      	ldrb	r0, [r6, #28]
}
   12830:	b005      	add	sp, #20
   12832:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        AttcMtuReq(pCcb->connId, localMtu);
   12836:	f000 bd33 	b.w	132a0 <AttcMtuReq>
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   1283a:	7a0b      	ldrb	r3, [r1, #8]
   1283c:	3320      	adds	r3, #32
   1283e:	b2db      	uxtb	r3, r3
   12840:	e7af      	b.n	127a2 <attcConnCback+0x22>
  if (pMsg->pPkt != NULL)
   12842:	f8d9 0008 	ldr.w	r0, [r9, #8]
   12846:	b140      	cbz	r0, 1285a <attcConnCback+0xda>
   12848:	9303      	str	r3, [sp, #12]
    WsfMsgFree(pMsg->pPkt);
   1284a:	f00b fbad 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   1284e:	2200      	movs	r2, #0
 */
/*************************************************************************************************/
void attcReqClear(attcCcb_t *pCcb, attcApiMsg_t *pMsg, uint8_t status)
{
  attcFreePkt(pMsg);
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12850:	f899 1006 	ldrb.w	r1, [r9, #6]
   12854:	9b03      	ldr	r3, [sp, #12]
    pMsg->pPkt = NULL;
   12856:	f8c9 2008 	str.w	r2, [r9, #8]
  if (event != ATT_METHOD_MTU)
   1285a:	2901      	cmp	r1, #1
   1285c:	d130      	bne.n	128c0 <attcConnCback+0x140>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   1285e:	1b7a      	subs	r2, r7, r5
   12860:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   12864:	2100      	movs	r1, #0
   12866:	7191      	strb	r1, [r2, #6]
}
   12868:	e7b1      	b.n	127ce <attcConnCback+0x4e>
      WsfTimerStop(&pClient->outReqTimer);
   1286a:	f108 0024 	add.w	r0, r8, #36	; 0x24
   1286e:	4420      	add	r0, r4
   12870:	9303      	str	r3, [sp, #12]
   12872:	f00b fe71 	bl	1e558 <WsfTimerStop>
  if (pMsg->pPkt != NULL)
   12876:	f8d9 0014 	ldr.w	r0, [r9, #20]
   1287a:	9b03      	ldr	r3, [sp, #12]
   1287c:	b128      	cbz	r0, 1288a <attcConnCback+0x10a>
    WsfMsgFree(pMsg->pPkt);
   1287e:	f00b fb93 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   12882:	2200      	movs	r2, #0
   12884:	9b03      	ldr	r3, [sp, #12]
   12886:	f8c9 2014 	str.w	r2, [r9, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1288a:	1b7a      	subs	r2, r7, r5
   1288c:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
   12890:	00d2      	lsls	r2, r2, #3
   12892:	7c81      	ldrb	r1, [r0, #18]
  if (event != ATT_METHOD_MTU)
   12894:	2901      	cmp	r1, #1
   12896:	d105      	bne.n	128a4 <attcConnCback+0x124>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   12898:	1b7a      	subs	r2, r7, r5
   1289a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   1289e:	2100      	movs	r1, #0
   128a0:	7491      	strb	r1, [r2, #18]
}
   128a2:	e78c      	b.n	127be <attcConnCback+0x3e>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   128a4:	f854 c002 	ldr.w	ip, [r4, r2]
    attExecCallback(connId, event, handle, status, 0);
   128a8:	8b02      	ldrh	r2, [r0, #24]
   128aa:	f89c 001c 	ldrb.w	r0, [ip, #28]
   128ae:	9303      	str	r3, [sp, #12]
   128b0:	f04f 0c00 	mov.w	ip, #0
   128b4:	f8cd c000 	str.w	ip, [sp]
   128b8:	f002 ff34 	bl	15724 <attExecCallback>
   128bc:	9b03      	ldr	r3, [sp, #12]
   128be:	e7eb      	b.n	12898 <attcConnCback+0x118>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   128c0:	1b7a      	subs	r2, r7, r5
   128c2:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
   128c6:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   128ca:	f8bc 200c 	ldrh.w	r2, [ip, #12]
   128ce:	7f00      	ldrb	r0, [r0, #28]
   128d0:	9303      	str	r3, [sp, #12]
   128d2:	f04f 0c00 	mov.w	ip, #0
   128d6:	f8cd c000 	str.w	ip, [sp]
   128da:	f002 ff23 	bl	15724 <attExecCallback>
   128de:	9b03      	ldr	r3, [sp, #12]
   128e0:	e7bd      	b.n	1285e <attcConnCback+0xde>
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   128e2:	f005 f86d 	bl	179c0 <HciGetMaxRxAclLen>
   128e6:	3804      	subs	r0, #4
   128e8:	b281      	uxth	r1, r0
   128ea:	e79e      	b.n	1282a <attcConnCback+0xaa>
   128ec:	10004120 	.word	0x10004120
   128f0:	10002c2c 	.word	0x10002c2c

000128f4 <attcSendPrepWriteReq>:
{
   128f4:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   128f6:	7cc3      	ldrb	r3, [r0, #19]
   128f8:	2b01      	cmp	r3, #1
{
   128fa:	b082      	sub	sp, #8
   128fc:	4604      	mov	r4, r0
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   128fe:	d020      	beq.n	12942 <attcSendPrepWriteReq+0x4e>
    pCcb->outReq.pPkt = NULL;
   12900:	2300      	movs	r3, #0
    dataLen = pCcb->outReqParams.w.len;
   12902:	8b85      	ldrh	r5, [r0, #28]
    pPkt = pCcb->outReq.pPkt;
   12904:	6946      	ldr	r6, [r0, #20]
    pCcb->outReq.pPkt = NULL;
   12906:	6143      	str	r3, [r0, #20]
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
   12908:	8be3      	ldrh	r3, [r4, #30]
   1290a:	72f3      	strb	r3, [r6, #11]
   1290c:	8be3      	ldrh	r3, [r4, #30]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1290e:	4a29      	ldr	r2, [pc, #164]	; (129b4 <attcSendPrepWriteReq+0xc0>)
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
   12910:	0a1b      	lsrs	r3, r3, #8
   12912:	7333      	strb	r3, [r6, #12]
  pCcb->outReqParams.w.offset += dataLen;
   12914:	8be3      	ldrh	r3, [r4, #30]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   12916:	6812      	ldr	r2, [r2, #0]
  pCcb->outReqParams.w.offset += dataLen;
   12918:	442b      	add	r3, r5
   1291a:	83e3      	strh	r3, [r4, #30]
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   1291c:	2310      	movs	r3, #16
   1291e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   12922:	7991      	ldrb	r1, [r2, #6]
   12924:	f104 0024 	add.w	r0, r4, #36	; 0x24
   12928:	f00b fd90 	bl	1e44c <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
   1292c:	6823      	ldr	r3, [r4, #0]
   1292e:	1d6a      	adds	r2, r5, #5
   12930:	8b19      	ldrh	r1, [r3, #24]
   12932:	b292      	uxth	r2, r2
   12934:	4633      	mov	r3, r6
   12936:	2004      	movs	r0, #4
}
   12938:	b002      	add	sp, #8
   1293a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
   1293e:	f007 b88b 	b.w	19a58 <L2cDataReq>
    if (pCcb->outReqParams.w.len < (pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN))
   12942:	6803      	ldr	r3, [r0, #0]
   12944:	8b85      	ldrh	r5, [r0, #28]
   12946:	8b5b      	ldrh	r3, [r3, #26]
   12948:	3b05      	subs	r3, #5
   1294a:	429d      	cmp	r5, r3
      dataLen = pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN;
   1294c:	bfa8      	it	ge
   1294e:	b29d      	uxthge	r5, r3
    if ((pPkt = attMsgAlloc(dataLen + ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   12950:	f105 000d 	add.w	r0, r5, #13
   12954:	b280      	uxth	r0, r0
   12956:	f002 ff01 	bl	1575c <attMsgAlloc>
   1295a:	4606      	mov	r6, r0
   1295c:	b1a8      	cbz	r0, 1298a <attcSendPrepWriteReq+0x96>
      memcpy(pPkt, pCcb->outReq.pPkt, ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START);
   1295e:	6963      	ldr	r3, [r4, #20]
   12960:	6819      	ldr	r1, [r3, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	6898      	ldr	r0, [r3, #8]
   12966:	60b0      	str	r0, [r6, #8]
   12968:	6072      	str	r2, [r6, #4]
   1296a:	6031      	str	r1, [r6, #0]
   1296c:	7b1b      	ldrb	r3, [r3, #12]
   1296e:	7333      	strb	r3, [r6, #12]
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
   12970:	462a      	mov	r2, r5
   12972:	6a21      	ldr	r1, [r4, #32]
   12974:	f106 000d 	add.w	r0, r6, #13
   12978:	f7f9 fbc2 	bl	c100 <memcpy>
      pCcb->outReqParams.w.pValue += dataLen;
   1297c:	6a22      	ldr	r2, [r4, #32]
      pCcb->outReqParams.w.len -= dataLen;
   1297e:	8ba3      	ldrh	r3, [r4, #28]
      pCcb->outReqParams.w.pValue += dataLen;
   12980:	442a      	add	r2, r5
      pCcb->outReqParams.w.len -= dataLen;
   12982:	1b5b      	subs	r3, r3, r5
      pCcb->outReqParams.w.pValue += dataLen;
   12984:	6222      	str	r2, [r4, #32]
      pCcb->outReqParams.w.len -= dataLen;
   12986:	83a3      	strh	r3, [r4, #28]
   12988:	e7be      	b.n	12908 <attcSendPrepWriteReq+0x14>
  if (pMsg->pPkt != NULL)
   1298a:	6960      	ldr	r0, [r4, #20]
   1298c:	b110      	cbz	r0, 12994 <attcSendPrepWriteReq+0xa0>
    WsfMsgFree(pMsg->pPkt);
   1298e:	f00b fb0b 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   12992:	6166      	str	r6, [r4, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12994:	7ca1      	ldrb	r1, [r4, #18]
  if (event != ATT_METHOD_MTU)
   12996:	2901      	cmp	r1, #1
   12998:	d103      	bne.n	129a2 <attcSendPrepWriteReq+0xae>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   1299a:	2300      	movs	r3, #0
   1299c:	74a3      	strb	r3, [r4, #18]
}
   1299e:	b002      	add	sp, #8
   129a0:	bd70      	pop	{r4, r5, r6, pc}
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   129a2:	6822      	ldr	r2, [r4, #0]
    attExecCallback(connId, event, handle, status, 0);
   129a4:	2300      	movs	r3, #0
   129a6:	7f10      	ldrb	r0, [r2, #28]
   129a8:	8b22      	ldrh	r2, [r4, #24]
   129aa:	9300      	str	r3, [sp, #0]
   129ac:	2370      	movs	r3, #112	; 0x70
   129ae:	f002 feb9 	bl	15724 <attExecCallback>
   129b2:	e7f2      	b.n	1299a <attcSendPrepWriteReq+0xa6>
   129b4:	10002c2c 	.word	0x10002c2c

000129b8 <attcSendContinuingReq>:
{
   129b8:	b530      	push	{r4, r5, lr}
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   129ba:	7cc3      	ldrb	r3, [r0, #19]
   129bc:	2b01      	cmp	r3, #1
{
   129be:	b083      	sub	sp, #12
   129c0:	4604      	mov	r4, r0
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   129c2:	d028      	beq.n	12a16 <attcSendContinuingReq+0x5e>
    pCcb->outReq.pPkt = NULL;
   129c4:	2300      	movs	r3, #0
    pPkt = pCcb->outReq.pPkt;
   129c6:	6945      	ldr	r5, [r0, #20]
    pCcb->outReq.pPkt = NULL;
   129c8:	6143      	str	r3, [r0, #20]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
   129ca:	7ca3      	ldrb	r3, [r4, #18]
   129cc:	2b06      	cmp	r3, #6
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
   129ce:	8be3      	ldrh	r3, [r4, #30]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
   129d0:	d01c      	beq.n	12a0c <attcSendContinuingReq+0x54>
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.startHandle);
   129d2:	726b      	strb	r3, [r5, #9]
   129d4:	8be3      	ldrh	r3, [r4, #30]
   129d6:	0a1b      	lsrs	r3, r3, #8
   129d8:	72ab      	strb	r3, [r5, #10]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.endHandle);
   129da:	8c23      	ldrh	r3, [r4, #32]
   129dc:	72eb      	strb	r3, [r5, #11]
   129de:	8c23      	ldrh	r3, [r4, #32]
   129e0:	0a1b      	lsrs	r3, r3, #8
   129e2:	732b      	strb	r3, [r5, #12]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   129e4:	4b1d      	ldr	r3, [pc, #116]	; (12a5c <attcSendContinuingReq+0xa4>)
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   129e6:	2210      	movs	r2, #16
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   129e8:	681b      	ldr	r3, [r3, #0]
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   129ea:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   129ee:	7999      	ldrb	r1, [r3, #6]
   129f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   129f4:	f00b fd2a 	bl	1e44c <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   129f8:	6823      	ldr	r3, [r4, #0]
   129fa:	882a      	ldrh	r2, [r5, #0]
   129fc:	8b19      	ldrh	r1, [r3, #24]
   129fe:	2004      	movs	r0, #4
   12a00:	462b      	mov	r3, r5
}
   12a02:	b003      	add	sp, #12
   12a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   12a08:	f007 b826 	b.w	19a58 <L2cDataReq>
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
   12a0c:	72eb      	strb	r3, [r5, #11]
   12a0e:	8be3      	ldrh	r3, [r4, #30]
   12a10:	0a1b      	lsrs	r3, r3, #8
   12a12:	732b      	strb	r3, [r5, #12]
   12a14:	e7e6      	b.n	129e4 <attcSendContinuingReq+0x2c>
    if ((pPkt = attMsgAlloc(pCcb->outReq.pPkt->len + L2C_PAYLOAD_START)) != NULL)
   12a16:	6943      	ldr	r3, [r0, #20]
   12a18:	8818      	ldrh	r0, [r3, #0]
   12a1a:	3008      	adds	r0, #8
   12a1c:	b280      	uxth	r0, r0
   12a1e:	f002 fe9d 	bl	1575c <attMsgAlloc>
   12a22:	4605      	mov	r5, r0
   12a24:	b128      	cbz	r0, 12a32 <attcSendContinuingReq+0x7a>
      memcpy(pPkt, pCcb->outReq.pPkt, pCcb->outReq.pPkt->len + L2C_PAYLOAD_START);
   12a26:	6961      	ldr	r1, [r4, #20]
   12a28:	880a      	ldrh	r2, [r1, #0]
   12a2a:	3208      	adds	r2, #8
   12a2c:	f7f9 fb68 	bl	c100 <memcpy>
   12a30:	e7cb      	b.n	129ca <attcSendContinuingReq+0x12>
  if (pMsg->pPkt != NULL)
   12a32:	6960      	ldr	r0, [r4, #20]
   12a34:	b110      	cbz	r0, 12a3c <attcSendContinuingReq+0x84>
    WsfMsgFree(pMsg->pPkt);
   12a36:	f00b fab7 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   12a3a:	6165      	str	r5, [r4, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12a3c:	7ca1      	ldrb	r1, [r4, #18]
  if (event != ATT_METHOD_MTU)
   12a3e:	2901      	cmp	r1, #1
   12a40:	d007      	beq.n	12a52 <attcSendContinuingReq+0x9a>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12a42:	6822      	ldr	r2, [r4, #0]
    attExecCallback(connId, event, handle, status, 0);
   12a44:	2300      	movs	r3, #0
   12a46:	7f10      	ldrb	r0, [r2, #28]
   12a48:	8b22      	ldrh	r2, [r4, #24]
   12a4a:	9300      	str	r3, [sp, #0]
   12a4c:	2370      	movs	r3, #112	; 0x70
   12a4e:	f002 fe69 	bl	15724 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   12a52:	2300      	movs	r3, #0
   12a54:	74a3      	strb	r3, [r4, #18]
}
   12a56:	b003      	add	sp, #12
   12a58:	bd30      	pop	{r4, r5, pc}
   12a5a:	bf00      	nop
   12a5c:	10002c2c 	.word	0x10002c2c

00012a60 <attcMsgCback>:
{
   12a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   12a64:	7804      	ldrb	r4, [r0, #0]
{
   12a66:	b082      	sub	sp, #8
   12a68:	4606      	mov	r6, r0
  if (DmConnInUse(connId))
   12a6a:	4620      	mov	r0, r4
   12a6c:	f7fa fc80 	bl	d370 <DmConnInUse>
   12a70:	2800      	cmp	r0, #0
   12a72:	d068      	beq.n	12b46 <attcMsgCback+0xe6>
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   12a74:	78b1      	ldrb	r1, [r6, #2]
    return &attcCb.ccb[connId - 1];
   12a76:	4f71      	ldr	r7, [pc, #452]	; (12c3c <attcMsgCback+0x1dc>)
   12a78:	3c01      	subs	r4, #1
   12a7a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   12a7e:	290c      	cmp	r1, #12
   12a80:	ea4f 08c4 	mov.w	r8, r4, lsl #3
   12a84:	ea4f 03c0 	mov.w	r3, r0, lsl #3
    return &attcCb.ccb[connId - 1];
   12a88:	eb07 05c0 	add.w	r5, r7, r0, lsl #3
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   12a8c:	d825      	bhi.n	12ada <attcMsgCback+0x7a>
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   12a8e:	79aa      	ldrb	r2, [r5, #6]
   12a90:	bb72      	cbnz	r2, 12af0 <attcMsgCback+0x90>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   12a92:	7caa      	ldrb	r2, [r5, #18]
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   12a94:	2a01      	cmp	r2, #1
   12a96:	d82b      	bhi.n	12af0 <attcMsgCback+0x90>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   12a98:	290a      	cmp	r1, #10
   12a9a:	d06f      	beq.n	12b7c <attcMsgCback+0x11c>
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_MTU || pCcb->flowDisabled)
   12a9c:	2a01      	cmp	r2, #1
   12a9e:	d077      	beq.n	12b90 <attcMsgCback+0x130>
   12aa0:	eba8 0304 	sub.w	r3, r8, r4
   12aa4:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   12aa8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   12aac:	2a00      	cmp	r2, #0
   12aae:	d16f      	bne.n	12b90 <attcMsgCback+0x130>
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   12ab0:	4a63      	ldr	r2, [pc, #396]	; (12c40 <attcMsgCback+0x1e0>)
   12ab2:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
  pCcb->outReq = *pMsg;
   12ab6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12aba:	f103 0410 	add.w	r4, r3, #16
   12abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pCcb->outReqParams = *(pMsg->pPkt);
   12ac2:	6872      	ldr	r2, [r6, #4]
   12ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
   12ac8:	331c      	adds	r3, #28
   12aca:	e883 0003 	stmia.w	r3, {r0, r1}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   12ace:	4628      	mov	r0, r5
   12ad0:	463b      	mov	r3, r7
}
   12ad2:	b002      	add	sp, #8
   12ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   12ad8:	4718      	bx	r3
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
   12ada:	f1a1 020d 	sub.w	r2, r1, #13
   12ade:	2a01      	cmp	r2, #1
   12ae0:	d941      	bls.n	12b66 <attcMsgCback+0x106>
  else if (pMsg->hdr.event == ATTC_MSG_API_CANCEL)
   12ae2:	290f      	cmp	r1, #15
   12ae4:	d012      	beq.n	12b0c <attcMsgCback+0xac>
  else if (pMsg->hdr.event == ATTC_MSG_REQ_TIMEOUT)
   12ae6:	2910      	cmp	r1, #16
   12ae8:	d06a      	beq.n	12bc0 <attcMsgCback+0x160>
}
   12aea:	b002      	add	sp, #8
   12aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pMsg->pPkt != NULL)
   12af0:	6870      	ldr	r0, [r6, #4]
   12af2:	b120      	cbz	r0, 12afe <attcMsgCback+0x9e>
    WsfMsgFree(pMsg->pPkt);
   12af4:	f00b fa58 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   12af8:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12afa:	78b1      	ldrb	r1, [r6, #2]
    pMsg->pPkt = NULL;
   12afc:	6073      	str	r3, [r6, #4]
  if (event != ATT_METHOD_MTU)
   12afe:	2901      	cmp	r1, #1
   12b00:	d152      	bne.n	12ba8 <attcMsgCback+0x148>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   12b02:	2300      	movs	r3, #0
   12b04:	70b3      	strb	r3, [r6, #2]
}
   12b06:	b002      	add	sp, #8
   12b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
   12b0c:	7caa      	ldrb	r2, [r5, #18]
   12b0e:	2a01      	cmp	r2, #1
   12b10:	d878      	bhi.n	12c04 <attcMsgCback+0x1a4>
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   12b12:	79ab      	ldrb	r3, [r5, #6]
   12b14:	2b00      	cmp	r3, #0
   12b16:	d0e8      	beq.n	12aea <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
   12b18:	68a8      	ldr	r0, [r5, #8]
   12b1a:	b118      	cbz	r0, 12b24 <attcMsgCback+0xc4>
    WsfMsgFree(pMsg->pPkt);
   12b1c:	f00b fa44 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   12b20:	2300      	movs	r3, #0
   12b22:	60ab      	str	r3, [r5, #8]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12b24:	79a9      	ldrb	r1, [r5, #6]
  if (event != ATT_METHOD_MTU)
   12b26:	2901      	cmp	r1, #1
   12b28:	d00a      	beq.n	12b40 <attcMsgCback+0xe0>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12b2a:	eba8 0404 	sub.w	r4, r8, r4
    attExecCallback(connId, event, handle, status, 0);
   12b2e:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12b30:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   12b34:	7f10      	ldrb	r0, [r2, #28]
   12b36:	9300      	str	r3, [sp, #0]
   12b38:	89aa      	ldrh	r2, [r5, #12]
   12b3a:	2374      	movs	r3, #116	; 0x74
   12b3c:	f002 fdf2 	bl	15724 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   12b40:	2300      	movs	r3, #0
   12b42:	71ab      	strb	r3, [r5, #6]
}
   12b44:	e7d1      	b.n	12aea <attcMsgCback+0x8a>
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   12b46:	4605      	mov	r5, r0
   12b48:	4621      	mov	r1, r4
   12b4a:	483e      	ldr	r0, [pc, #248]	; (12c44 <attcMsgCback+0x1e4>)
   12b4c:	f00b fda4 	bl	1e698 <WsfTrace>
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
   12b50:	78b3      	ldrb	r3, [r6, #2]
   12b52:	3b01      	subs	r3, #1
   12b54:	2b0c      	cmp	r3, #12
   12b56:	d8c8      	bhi.n	12aea <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
   12b58:	6870      	ldr	r0, [r6, #4]
   12b5a:	2800      	cmp	r0, #0
   12b5c:	d0c5      	beq.n	12aea <attcMsgCback+0x8a>
    WsfMsgFree(pMsg->pPkt);
   12b5e:	f00b fa23 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   12b62:	6075      	str	r5, [r6, #4]
   12b64:	e7c1      	b.n	12aea <attcMsgCback+0x8a>
    if (attcCb.pSign != NULL)
   12b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   12b6a:	2b00      	cmp	r3, #0
   12b6c:	d0bd      	beq.n	12aea <attcMsgCback+0x8a>
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
   12b6e:	681b      	ldr	r3, [r3, #0]
   12b70:	4631      	mov	r1, r6
   12b72:	4628      	mov	r0, r5
}
   12b74:	b002      	add	sp, #8
   12b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
   12b7a:	4718      	bx	r3
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   12b7c:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
   12b7e:	2800      	cmp	r0, #0
   12b80:	d08c      	beq.n	12a9c <attcMsgCback+0x3c>
  if (pMsg->pPkt != NULL)
   12b82:	6870      	ldr	r0, [r6, #4]
   12b84:	2800      	cmp	r0, #0
   12b86:	d1b5      	bne.n	12af4 <attcMsgCback+0x94>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12b88:	58fb      	ldr	r3, [r7, r3]
      if (pCcb->pendWriteCmdHandle[i] == pMsg->handle)
   12b8a:	8932      	ldrh	r2, [r6, #8]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12b8c:	7f18      	ldrb	r0, [r3, #28]
  if (event != ATT_METHOD_MTU)
   12b8e:	e011      	b.n	12bb4 <attcMsgCback+0x154>
      pCcb->onDeck = *pMsg;
   12b90:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12b94:	eba8 0404 	sub.w	r4, r8, r4
   12b98:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
   12b9c:	3704      	adds	r7, #4
   12b9e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
}
   12ba2:	b002      	add	sp, #8
   12ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12ba8:	eba8 0404 	sub.w	r4, r8, r4
   12bac:	8932      	ldrh	r2, [r6, #8]
   12bae:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   12bb2:	7f18      	ldrb	r0, [r3, #28]
    attExecCallback(connId, event, handle, status, 0);
   12bb4:	2300      	movs	r3, #0
   12bb6:	9300      	str	r3, [sp, #0]
   12bb8:	2372      	movs	r3, #114	; 0x72
   12bba:	f002 fdb3 	bl	15724 <attExecCallback>
   12bbe:	e7a0      	b.n	12b02 <attcMsgCback+0xa2>
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE)
   12bc0:	7cab      	ldrb	r3, [r5, #18]
   12bc2:	2b00      	cmp	r3, #0
   12bc4:	d091      	beq.n	12aea <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
   12bc6:	6968      	ldr	r0, [r5, #20]
   12bc8:	b118      	cbz	r0, 12bd2 <attcMsgCback+0x172>
    WsfMsgFree(pMsg->pPkt);
   12bca:	f00b f9ed 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   12bce:	2300      	movs	r3, #0
   12bd0:	616b      	str	r3, [r5, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12bd2:	7ca9      	ldrb	r1, [r5, #18]
  if (event != ATT_METHOD_MTU)
   12bd4:	2901      	cmp	r1, #1
   12bd6:	d00a      	beq.n	12bee <attcMsgCback+0x18e>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12bd8:	eba8 0304 	sub.w	r3, r8, r4
   12bdc:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   12be0:	7f18      	ldrb	r0, [r3, #28]
   12be2:	2300      	movs	r3, #0
   12be4:	9300      	str	r3, [sp, #0]
   12be6:	8b2a      	ldrh	r2, [r5, #24]
   12be8:	2371      	movs	r3, #113	; 0x71
   12bea:	f002 fd9b 	bl	15724 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   12bee:	2300      	movs	r3, #0
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   12bf0:	eba8 0404 	sub.w	r4, r8, r4
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   12bf4:	74ab      	strb	r3, [r5, #18]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   12bf6:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
   12bfa:	7f53      	ldrb	r3, [r2, #29]
   12bfc:	f043 0304 	orr.w	r3, r3, #4
   12c00:	7753      	strb	r3, [r2, #29]
   12c02:	e772      	b.n	12aea <attcMsgCback+0x8a>
      WsfTimerStop(&pCcb->outReqTimer);
   12c04:	f103 0024 	add.w	r0, r3, #36	; 0x24
   12c08:	4438      	add	r0, r7
   12c0a:	f00b fca5 	bl	1e558 <WsfTimerStop>
  if (pMsg->pPkt != NULL)
   12c0e:	6968      	ldr	r0, [r5, #20]
   12c10:	b118      	cbz	r0, 12c1a <attcMsgCback+0x1ba>
    WsfMsgFree(pMsg->pPkt);
   12c12:	f00b f9c9 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   12c16:	2300      	movs	r3, #0
   12c18:	616b      	str	r3, [r5, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12c1a:	7ca9      	ldrb	r1, [r5, #18]
  if (event != ATT_METHOD_MTU)
   12c1c:	2901      	cmp	r1, #1
   12c1e:	d00a      	beq.n	12c36 <attcMsgCback+0x1d6>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12c20:	eba8 0404 	sub.w	r4, r8, r4
    attExecCallback(connId, event, handle, status, 0);
   12c24:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   12c26:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   12c2a:	7f10      	ldrb	r0, [r2, #28]
   12c2c:	9300      	str	r3, [sp, #0]
   12c2e:	8b2a      	ldrh	r2, [r5, #24]
   12c30:	2374      	movs	r3, #116	; 0x74
   12c32:	f002 fd77 	bl	15724 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   12c36:	2300      	movs	r3, #0
   12c38:	74ab      	strb	r3, [r5, #18]
}
   12c3a:	e756      	b.n	12aea <attcMsgCback+0x8a>
   12c3c:	10004120 	.word	0x10004120
   12c40:	00026634 	.word	0x00026634
   12c44:	000265f8 	.word	0x000265f8

00012c48 <attcSendReq>:
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   12c48:	4b02      	ldr	r3, [pc, #8]	; (12c54 <attcSendReq+0xc>)
   12c4a:	7c82      	ldrb	r2, [r0, #18]
   12c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12c50:	4718      	bx	r3
   12c52:	bf00      	nop
   12c54:	00026634 	.word	0x00026634

00012c58 <attcSetupReq>:
{
   12c58:	b510      	push	{r4, lr}
   12c5a:	4603      	mov	r3, r0
  pCcb->outReq = *pMsg;
   12c5c:	f100 0e10 	add.w	lr, r0, #16
{
   12c60:	468c      	mov	ip, r1
  pCcb->outReq = *pMsg;
   12c62:	c907      	ldmia	r1, {r0, r1, r2}
   12c64:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  pCcb->outReqParams = *(pMsg->pPkt);
   12c68:	f8dc 1004 	ldr.w	r1, [ip, #4]
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   12c6c:	4c06      	ldr	r4, [pc, #24]	; (12c88 <attcSetupReq+0x30>)
  pCcb->outReqParams = *(pMsg->pPkt);
   12c6e:	c903      	ldmia	r1, {r0, r1}
   12c70:	f103 021c 	add.w	r2, r3, #28
   12c74:	e882 0003 	stmia.w	r2, {r0, r1}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   12c78:	4618      	mov	r0, r3
   12c7a:	7c9b      	ldrb	r3, [r3, #18]
   12c7c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
}
   12c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   12c84:	4718      	bx	r3
   12c86:	bf00      	nop
   12c88:	00026634 	.word	0x00026634

00012c8c <attcCcbByConnId>:
{
   12c8c:	b538      	push	{r3, r4, r5, lr}
   12c8e:	4604      	mov	r4, r0
  if (DmConnInUse(connId))
   12c90:	f7fa fb6e 	bl	d370 <DmConnInUse>
   12c94:	b130      	cbz	r0, 12ca4 <attcCcbByConnId+0x18>
    return &attcCb.ccb[connId - 1];
   12c96:	4d07      	ldr	r5, [pc, #28]	; (12cb4 <attcCcbByConnId+0x28>)
   12c98:	1e60      	subs	r0, r4, #1
   12c9a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   12c9e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
}
   12ca2:	bd38      	pop	{r3, r4, r5, pc}
   12ca4:	4605      	mov	r5, r0
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   12ca6:	4621      	mov	r1, r4
   12ca8:	4803      	ldr	r0, [pc, #12]	; (12cb8 <attcCcbByConnId+0x2c>)
   12caa:	f00b fcf5 	bl	1e698 <WsfTrace>
    return NULL;
   12cae:	4628      	mov	r0, r5
}
   12cb0:	bd38      	pop	{r3, r4, r5, pc}
   12cb2:	bf00      	nop
   12cb4:	10004120 	.word	0x10004120
   12cb8:	000265f8 	.word	0x000265f8

00012cbc <attcCcbByHandle>:
{
   12cbc:	b508      	push	{r3, lr}
  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   12cbe:	f7fa fb35 	bl	d32c <DmConnIdByHandle>
   12cc2:	b128      	cbz	r0, 12cd0 <attcCcbByHandle+0x14>
    return &attcCb.ccb[connId - 1];
   12cc4:	4b03      	ldr	r3, [pc, #12]	; (12cd4 <attcCcbByHandle+0x18>)
   12cc6:	3801      	subs	r0, #1
   12cc8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   12ccc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
   12cd0:	bd08      	pop	{r3, pc}
   12cd2:	bf00      	nop
   12cd4:	10004120 	.word	0x10004120

00012cd8 <attcFreePkt>:
{
   12cd8:	b510      	push	{r4, lr}
   12cda:	4604      	mov	r4, r0
  if (pMsg->pPkt != NULL)
   12cdc:	6840      	ldr	r0, [r0, #4]
   12cde:	b118      	cbz	r0, 12ce8 <attcFreePkt+0x10>
    WsfMsgFree(pMsg->pPkt);
   12ce0:	f00b f962 	bl	1dfa8 <WsfMsgFree>
    pMsg->pPkt = NULL;
   12ce4:	2300      	movs	r3, #0
   12ce6:	6063      	str	r3, [r4, #4]
}
   12ce8:	bd10      	pop	{r4, pc}
   12cea:	bf00      	nop

00012cec <attcExecCallback>:
  if (event != ATT_METHOD_MTU)
   12cec:	2901      	cmp	r1, #1
   12cee:	d100      	bne.n	12cf2 <attcExecCallback+0x6>
   12cf0:	4770      	bx	lr
{
   12cf2:	b510      	push	{r4, lr}
   12cf4:	b082      	sub	sp, #8
    attExecCallback(connId, event, handle, status, 0);
   12cf6:	2400      	movs	r4, #0
   12cf8:	9400      	str	r4, [sp, #0]
   12cfa:	f002 fd13 	bl	15724 <attExecCallback>
}
   12cfe:	b002      	add	sp, #8
   12d00:	bd10      	pop	{r4, pc}
   12d02:	bf00      	nop

00012d04 <AttcInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcInit(void)
{
   12d04:	b410      	push	{r4}
  uint8_t     i;
  attcCcb_t   *pCcb;

  /* Initialize control block */
  attcCb.pSign = NULL;
   12d06:	4b12      	ldr	r3, [pc, #72]	; (12d50 <AttcInit+0x4c>)
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];

    /* initialize timer */
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   12d08:	4a12      	ldr	r2, [pc, #72]	; (12d54 <AttcInit+0x50>)
    pCcb->pMainCcb = &attCb.ccb[i];
   12d0a:	601a      	str	r2, [r3, #0]
  attcCb.pSign = NULL;
   12d0c:	2400      	movs	r4, #0
   12d0e:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    pCcb->pMainCcb = &attCb.ccb[i];
   12d12:	f102 0424 	add.w	r4, r2, #36	; 0x24
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   12d16:	f892 107c 	ldrb.w	r1, [r2, #124]	; 0x7c
    pCcb->pMainCcb = &attCb.ccb[i];
   12d1a:	639c      	str	r4, [r3, #56]	; 0x38
  attcCb.autoCnf = TRUE;
   12d1c:	2001      	movs	r0, #1
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   12d1e:	2402      	movs	r4, #2
  attcCb.autoCnf = TRUE;
   12d20:	f883 00ac 	strb.w	r0, [r3, #172]	; 0xac
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   12d24:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   12d28:	8598      	strh	r0, [r3, #44]	; 0x2c
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   12d2a:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
  }

  /* set up callback interface */
  attCb.pClient = &attcFcnIf;
   12d2e:	480a      	ldr	r0, [pc, #40]	; (12d58 <AttcInit+0x54>)
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   12d30:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
   12d34:	f04f 0c03 	mov.w	ip, #3
    pCcb->pMainCcb = &attCb.ccb[i];
   12d38:	f102 0448 	add.w	r4, r2, #72	; 0x48
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   12d3c:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
    pCcb->pMainCcb = &attCb.ccb[i];
   12d40:	671c      	str	r4, [r3, #112]	; 0x70
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   12d42:	f8a3 c09c 	strh.w	ip, [r3, #156]	; 0x9c
}
   12d46:	f85d 4b04 	ldr.w	r4, [sp], #4
  attCb.pClient = &attcFcnIf;
   12d4a:	66d0      	str	r0, [r2, #108]	; 0x6c
}
   12d4c:	4770      	bx	lr
   12d4e:	bf00      	nop
   12d50:	10004120 	.word	0x10004120
   12d54:	100042a0 	.word	0x100042a0
   12d58:	00026624 	.word	0x00026624

00012d5c <attcProcErrRsp>:
  uint8_t *p;

  p =  pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* set callback event from stored method */
  pEvt->hdr.event = pCcb->outReq.hdr.event;
   12d5c:	7c81      	ldrb	r1, [r0, #18]
   12d5e:	7099      	strb	r1, [r3, #2]

  /* ignore request opcode in the error response */
  p++;

  /* if request was a read or write with a specific handle */
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
   12d60:	1f48      	subs	r0, r1, #5
   12d62:	2801      	cmp	r0, #1
   12d64:	d90a      	bls.n	12d7c <attcProcErrRsp+0x20>
   12d66:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
   12d6a:	2909      	cmp	r1, #9
   12d6c:	d006      	beq.n	12d7c <attcProcErrRsp+0x20>
    p += 2;
  }
  else
  {
    /* set handle from packet */
    BSTREAM_TO_UINT16(pEvt->handle, p);
   12d6e:	7ad0      	ldrb	r0, [r2, #11]
   12d70:	7a91      	ldrb	r1, [r2, #10]
   12d72:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   12d76:	320c      	adds	r2, #12
   12d78:	8159      	strh	r1, [r3, #10]
   12d7a:	e000      	b.n	12d7e <attcProcErrRsp+0x22>
    p += 2;
   12d7c:	320c      	adds	r2, #12
  }

  /* set status from error code in packet, but verify it's not 'success' */
  BSTREAM_TO_UINT8(pEvt->hdr.status, p);
   12d7e:	7812      	ldrb	r2, [r2, #0]
  if (pEvt->hdr.status == ATT_SUCCESS)
   12d80:	b902      	cbnz	r2, 12d84 <attcProcErrRsp+0x28>
  {
    pEvt->hdr.status = ATT_ERR_UNDEFINED;
   12d82:	2275      	movs	r2, #117	; 0x75
   12d84:	70da      	strb	r2, [r3, #3]
  }

  /* no parameters so clear length */
  pEvt->valueLen = 0;
   12d86:	2200      	movs	r2, #0
   12d88:	811a      	strh	r2, [r3, #8]
}
   12d8a:	4770      	bx	lr

00012d8c <attcProcFindOrReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindOrReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   12d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  pEnd = pPacket + L2C_PAYLOAD_START + len;

  /* parameter length depends on packet type */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   12d90:	7c87      	ldrb	r7, [r0, #18]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   12d92:	3108      	adds	r1, #8
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   12d94:	2f02      	cmp	r7, #2
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   12d96:	eb02 0c01 	add.w	ip, r2, r1
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   12d9a:	d065      	beq.n	12e68 <attcProcFindOrReadRsp+0xdc>
    else
    {
      paramLen = ATT_128_UUID_LEN;
    }
  }
  else if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_TYPE)
   12d9c:	2f04      	cmp	r7, #4
   12d9e:	d03d      	beq.n	12e1c <attcProcFindOrReadRsp+0x90>
    paramLen = *p++ - sizeof(uint16_t);
  }
  else
  {
    /* length in read by group type response is two handles plus parameter length */
    paramLen = *p++ - (2 * sizeof(uint16_t));
   12da0:	f892 e009 	ldrb.w	lr, [r2, #9]
  }

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   12da4:	8bc4      	ldrh	r4, [r0, #30]
    paramLen = *p++ - (2 * sizeof(uint16_t));
   12da6:	f1ae 0e04 	sub.w	lr, lr, #4
   12daa:	2f08      	cmp	r7, #8
   12dac:	f102 010a 	add.w	r1, r2, #10
   12db0:	fa5f fe8e 	uxtb.w	lr, lr
  while (p < pEnd)
   12db4:	d16b      	bne.n	12e8e <attcProcFindOrReadRsp+0x102>
   12db6:	f10e 0e04 	add.w	lr, lr, #4
        break;
      }
    }

    /* set next expected handle, with special case for max handle */
    if (handle == ATT_HANDLE_MAX)
   12dba:	f64f 76ff 	movw	r6, #65535	; 0xffff
   12dbe:	e024      	b.n	12e0a <attcProcFindOrReadRsp+0x7e>
    BSTREAM_TO_UINT16(handle, p);
   12dc0:	784d      	ldrb	r5, [r1, #1]
   12dc2:	780a      	ldrb	r2, [r1, #0]
   12dc4:	eb02 2205 	add.w	r2, r2, r5, lsl #8
   12dc8:	b292      	uxth	r2, r2
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   12dca:	2a00      	cmp	r2, #0
   12dcc:	d048      	beq.n	12e60 <attcProcFindOrReadRsp+0xd4>
   12dce:	2c00      	cmp	r4, #0
   12dd0:	d046      	beq.n	12e60 <attcProcFindOrReadRsp+0xd4>
   12dd2:	4294      	cmp	r4, r2
   12dd4:	d844      	bhi.n	12e60 <attcProcFindOrReadRsp+0xd4>
        handle > pCcb->outReqParams.h.endHandle)
   12dd6:	8c07      	ldrh	r7, [r0, #32]
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   12dd8:	4297      	cmp	r7, r2
   12dda:	d341      	bcc.n	12e60 <attcProcFindOrReadRsp+0xd4>
      BSTREAM_TO_UINT16(handle, p);
   12ddc:	f891 8003 	ldrb.w	r8, [r1, #3]
   12de0:	788d      	ldrb	r5, [r1, #2]
   12de2:	eb05 2508 	add.w	r5, r5, r8, lsl #8
   12de6:	b2ad      	uxth	r5, r5
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
   12de8:	2d00      	cmp	r5, #0
   12dea:	d039      	beq.n	12e60 <attcProcFindOrReadRsp+0xd4>
   12dec:	42aa      	cmp	r2, r5
   12dee:	d837      	bhi.n	12e60 <attcProcFindOrReadRsp+0xd4>
   12df0:	42ac      	cmp	r4, r5
   12df2:	d835      	bhi.n	12e60 <attcProcFindOrReadRsp+0xd4>
   12df4:	42af      	cmp	r7, r5
   12df6:	d333      	bcc.n	12e60 <attcProcFindOrReadRsp+0xd4>
    if (handle == ATT_HANDLE_MAX)
   12df8:	42b5      	cmp	r5, r6
    {
      nextHandle = 0;
    }
    else
    {
      nextHandle = handle + 1;
   12dfa:	bf18      	it	ne
   12dfc:	1c6c      	addne	r4, r5, #1
   12dfe:	4471      	add	r1, lr
   12e00:	bf14      	ite	ne
   12e02:	b2a4      	uxthne	r4, r4
      nextHandle = 0;
   12e04:	2400      	moveq	r4, #0

    /* skip over parameter */
    p += paramLen;

    /* check for truncated response */
    if (p > pEnd)
   12e06:	458c      	cmp	ip, r1
   12e08:	d32a      	bcc.n	12e60 <attcProcFindOrReadRsp+0xd4>
  while (p < pEnd)
   12e0a:	4561      	cmp	r1, ip
   12e0c:	d3d8      	bcc.n	12dc0 <attcProcFindOrReadRsp+0x34>
      break;
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   12e0e:	78db      	ldrb	r3, [r3, #3]
   12e10:	b913      	cbnz	r3, 12e18 <attcProcFindOrReadRsp+0x8c>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   12e12:	7cc3      	ldrb	r3, [r0, #19]
   12e14:	2b01      	cmp	r3, #1
   12e16:	d02e      	beq.n	12e76 <attcProcFindOrReadRsp+0xea>
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   12e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    paramLen = *p++ - sizeof(uint16_t);
   12e1c:	7a57      	ldrb	r7, [r2, #9]
   12e1e:	3f02      	subs	r7, #2
   12e20:	f102 010a 	add.w	r1, r2, #10
   12e24:	b2ff      	uxtb	r7, r7
  nextHandle = pCcb->outReqParams.h.startHandle;
   12e26:	8bc4      	ldrh	r4, [r0, #30]
  while (p < pEnd)
   12e28:	3702      	adds	r7, #2
    if (handle == ATT_HANDLE_MAX)
   12e2a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   12e2e:	e014      	b.n	12e5a <attcProcFindOrReadRsp+0xce>
    BSTREAM_TO_UINT16(handle, p);
   12e30:	784d      	ldrb	r5, [r1, #1]
   12e32:	780a      	ldrb	r2, [r1, #0]
   12e34:	eb02 2205 	add.w	r2, r2, r5, lsl #8
   12e38:	b292      	uxth	r2, r2
      nextHandle = handle + 1;
   12e3a:	1c55      	adds	r5, r2, #1
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   12e3c:	b182      	cbz	r2, 12e60 <attcProcFindOrReadRsp+0xd4>
   12e3e:	b17c      	cbz	r4, 12e60 <attcProcFindOrReadRsp+0xd4>
   12e40:	42a2      	cmp	r2, r4
   12e42:	d30d      	bcc.n	12e60 <attcProcFindOrReadRsp+0xd4>
   12e44:	f8b0 e020 	ldrh.w	lr, [r0, #32]
   12e48:	4596      	cmp	lr, r2
      nextHandle = handle + 1;
   12e4a:	b2ac      	uxth	r4, r5
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   12e4c:	d308      	bcc.n	12e60 <attcProcFindOrReadRsp+0xd4>
    if (handle == ATT_HANDLE_MAX)
   12e4e:	42b2      	cmp	r2, r6
   12e50:	4439      	add	r1, r7
      nextHandle = 0;
   12e52:	bf08      	it	eq
   12e54:	2400      	moveq	r4, #0
    if (p > pEnd)
   12e56:	4561      	cmp	r1, ip
   12e58:	d802      	bhi.n	12e60 <attcProcFindOrReadRsp+0xd4>
  while (p < pEnd)
   12e5a:	458c      	cmp	ip, r1
   12e5c:	d8e8      	bhi.n	12e30 <attcProcFindOrReadRsp+0xa4>
   12e5e:	e7d6      	b.n	12e0e <attcProcFindOrReadRsp+0x82>
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   12e60:	2273      	movs	r2, #115	; 0x73
   12e62:	70da      	strb	r2, [r3, #3]
}
   12e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
   12e68:	7a51      	ldrb	r1, [r2, #9]
      paramLen = ATT_128_UUID_LEN;
   12e6a:	2901      	cmp	r1, #1
   12e6c:	bf18      	it	ne
   12e6e:	2710      	movne	r7, #16
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
   12e70:	f102 010a 	add.w	r1, r2, #10
   12e74:	e7d7      	b.n	12e26 <attcProcFindOrReadRsp+0x9a>
      if (nextHandle == 0 || nextHandle == (pCcb->outReqParams.h.endHandle + 1))
   12e76:	b134      	cbz	r4, 12e86 <attcProcFindOrReadRsp+0xfa>
   12e78:	8c03      	ldrh	r3, [r0, #32]
   12e7a:	3301      	adds	r3, #1
   12e7c:	429c      	cmp	r4, r3
   12e7e:	d002      	beq.n	12e86 <attcProcFindOrReadRsp+0xfa>
        pCcb->outReqParams.h.startHandle = nextHandle;
   12e80:	83c4      	strh	r4, [r0, #30]
        pCcb->outReq.handle = nextHandle;
   12e82:	8304      	strh	r4, [r0, #24]
}
   12e84:	e7c8      	b.n	12e18 <attcProcFindOrReadRsp+0x8c>
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   12e86:	2300      	movs	r3, #0
   12e88:	74c3      	strb	r3, [r0, #19]
}
   12e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    paramLen = *p++ - (2 * sizeof(uint16_t));
   12e8e:	4677      	mov	r7, lr
   12e90:	e7ca      	b.n	12e28 <attcProcFindOrReadRsp+0x9c>
   12e92:	bf00      	nop

00012e94 <attcProcReadRsp>:
 */
/*************************************************************************************************/
void attcProcReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* nothing to process */
}
   12e94:	4770      	bx	lr
   12e96:	bf00      	nop

00012e98 <attcProcWriteRsp>:
 */
/*************************************************************************************************/
void attcProcWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* no parameters so clear length */
  pEvt->valueLen = 0;
   12e98:	2200      	movs	r2, #0
   12e9a:	811a      	strh	r2, [r3, #8]
}
   12e9c:	4770      	bx	lr
   12e9e:	bf00      	nop

00012ea0 <attcProcMtuRsp>:
{
   12ea0:	b570      	push	{r4, r5, r6, lr}
  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   12ea2:	7a93      	ldrb	r3, [r2, #10]
   12ea4:	7a51      	ldrb	r1, [r2, #9]
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   12ea6:	4c13      	ldr	r4, [pc, #76]	; (12ef4 <attcProcMtuRsp+0x54>)
   12ea8:	6805      	ldr	r5, [r0, #0]
  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   12eaa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   12eae:	b289      	uxth	r1, r1
  if (mtu < ATT_DEFAULT_MTU)
   12eb0:	2917      	cmp	r1, #23
{
   12eb2:	b082      	sub	sp, #8
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   12eb4:	6823      	ldr	r3, [r4, #0]
   12eb6:	bf38      	it	cc
   12eb8:	2117      	movcc	r1, #23
   12eba:	889e      	ldrh	r6, [r3, #4]
   12ebc:	9101      	str	r1, [sp, #4]
   12ebe:	f004 fd7f 	bl	179c0 <HciGetMaxRxAclLen>
   12ec2:	3804      	subs	r0, #4
   12ec4:	4286      	cmp	r6, r0
   12ec6:	9901      	ldr	r1, [sp, #4]
   12ec8:	da07      	bge.n	12eda <attcProcMtuRsp+0x3a>
   12eca:	6823      	ldr	r3, [r4, #0]
   12ecc:	889a      	ldrh	r2, [r3, #4]
   12ece:	4628      	mov	r0, r5
}
   12ed0:	b002      	add	sp, #8
   12ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   12ed6:	f002 bc03 	b.w	156e0 <attSetMtu>
   12eda:	9101      	str	r1, [sp, #4]
   12edc:	f004 fd70 	bl	179c0 <HciGetMaxRxAclLen>
   12ee0:	9901      	ldr	r1, [sp, #4]
   12ee2:	3804      	subs	r0, #4
   12ee4:	b282      	uxth	r2, r0
   12ee6:	4628      	mov	r0, r5
}
   12ee8:	b002      	add	sp, #8
   12eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   12eee:	f002 bbf7 	b.w	156e0 <attSetMtu>
   12ef2:	bf00      	nop
   12ef4:	10002c2c 	.word	0x10002c2c

00012ef8 <attcProcRsp>:
void attcProcRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
  attEvt_t    evt;

  /* if no request in progress ignore response */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_NONE)
   12ef8:	7c83      	ldrb	r3, [r0, #18]
   12efa:	2b00      	cmp	r3, #0
   12efc:	d04b      	beq.n	12f96 <attcProcRsp+0x9e>
{
   12efe:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f00:	4615      	mov	r5, r2
  {
    return;
  }

  /* get method */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   12f02:	7a12      	ldrb	r2, [r2, #8]
{
   12f04:	b085      	sub	sp, #20
   12f06:	460e      	mov	r6, r1
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   12f08:	0851      	lsrs	r1, r2, #1

  /* if response method is not error and does not match stored method ignore response */
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
   12f0a:	0852      	lsrs	r2, r2, #1
   12f0c:	4604      	mov	r4, r0
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   12f0e:	f88d 1002 	strb.w	r1, [sp, #2]
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
   12f12:	d001      	beq.n	12f18 <attcProcRsp+0x20>
   12f14:	428b      	cmp	r3, r1
   12f16:	d135      	bne.n	12f84 <attcProcRsp+0x8c>
  {
    return;
  }

  /* stop request timer */
  WsfTimerStop(&pCcb->outReqTimer);
   12f18:	f104 0024 	add.w	r0, r4, #36	; 0x24
   12f1c:	f00b fb1c 	bl	1e558 <WsfTimerStop>

  /* initialize event structure then process response */
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  evt.valueLen = len - ATT_HDR_LEN;
  evt.handle = pCcb->outReq.handle;
   12f20:	8b23      	ldrh	r3, [r4, #24]
   12f22:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   12f26:	f105 0309 	add.w	r3, r5, #9
  evt.hdr.status = ATT_SUCCESS;
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   12f2a:	f89d 1002 	ldrb.w	r1, [sp, #2]
   12f2e:	4a1f      	ldr	r2, [pc, #124]	; (12fac <attcProcRsp+0xb4>)
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   12f30:	9301      	str	r3, [sp, #4]
  evt.valueLen = len - ATT_HDR_LEN;
   12f32:	1e73      	subs	r3, r6, #1
   12f34:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = ATT_SUCCESS;
   12f38:	2300      	movs	r3, #0
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   12f3a:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
  evt.hdr.status = ATT_SUCCESS;
   12f3e:	f88d 3003 	strb.w	r3, [sp, #3]
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   12f42:	462a      	mov	r2, r5
   12f44:	466b      	mov	r3, sp
   12f46:	4631      	mov	r1, r6
   12f48:	4620      	mov	r0, r4
   12f4a:	47b8      	blx	r7

  /* if not continuing or status is not success */
  if ((pCcb->outReq.hdr.status == ATTC_NOT_CONTINUING) || (evt.hdr.status != ATT_SUCCESS))
   12f4c:	7ce3      	ldrb	r3, [r4, #19]
   12f4e:	b1db      	cbz	r3, 12f88 <attcProcRsp+0x90>
   12f50:	f89d 3003 	ldrb.w	r3, [sp, #3]
   12f54:	b9c3      	cbnz	r3, 12f88 <attcProcRsp+0x90>
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    attcFreePkt(&pCcb->outReq);
  }

  /* call callback (if not mtu rsp) */
  if ((evt.hdr.event != ATT_METHOD_MTU) && attCb.cback)
   12f56:	f89d 3002 	ldrb.w	r3, [sp, #2]
   12f5a:	2b01      	cmp	r3, #1
   12f5c:	d00a      	beq.n	12f74 <attcProcRsp+0x7c>
   12f5e:	4b14      	ldr	r3, [pc, #80]	; (12fb0 <attcProcRsp+0xb8>)
   12f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   12f62:	b13b      	cbz	r3, 12f74 <attcProcRsp+0x7c>
  {
    /* set additional parameters and call callback */
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
   12f64:	7ce1      	ldrb	r1, [r4, #19]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
   12f66:	8a22      	ldrh	r2, [r4, #16]
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
   12f68:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
   12f6c:	f8ad 2000 	strh.w	r2, [sp]
    (*attCb.cback)(&evt);
   12f70:	4668      	mov	r0, sp
   12f72:	4798      	blx	r3
  }

  /* if no flow control */
  if (!pCcb->flowDisabled)
   12f74:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   12f78:	b923      	cbnz	r3, 12f84 <attcProcRsp+0x8c>
  {
    /* if out req ready */
    if (pCcb->outReq.pPkt != NULL)
   12f7a:	6965      	ldr	r5, [r4, #20]
   12f7c:	b165      	cbz	r5, 12f98 <attcProcRsp+0xa0>
    {
      /* build and send request */
      attcSendReq(pCcb);
   12f7e:	4620      	mov	r0, r4
   12f80:	f7ff fe62 	bl	12c48 <attcSendReq>

      /* clear on deck */
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
    }
  }
}
   12f84:	b005      	add	sp, #20
   12f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   12f88:	2300      	movs	r3, #0
   12f8a:	74a3      	strb	r3, [r4, #18]
    attcFreePkt(&pCcb->outReq);
   12f8c:	f104 0010 	add.w	r0, r4, #16
   12f90:	f7ff fea2 	bl	12cd8 <attcFreePkt>
   12f94:	e7df      	b.n	12f56 <attcProcRsp+0x5e>
   12f96:	4770      	bx	lr
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   12f98:	79a3      	ldrb	r3, [r4, #6]
   12f9a:	2b00      	cmp	r3, #0
   12f9c:	d0f2      	beq.n	12f84 <attcProcRsp+0x8c>
      attcSetupReq(pCcb, &pCcb->onDeck);
   12f9e:	1d21      	adds	r1, r4, #4
   12fa0:	4620      	mov	r0, r4
   12fa2:	f7ff fe59 	bl	12c58 <attcSetupReq>
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
   12fa6:	71a5      	strb	r5, [r4, #6]
   12fa8:	e7ec      	b.n	12f84 <attcProcRsp+0x8c>
   12faa:	bf00      	nop
   12fac:	00026668 	.word	0x00026668
   12fb0:	100042a0 	.word	0x100042a0

00012fb4 <attcProcInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcInd(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   12fb4:	b510      	push	{r4, lr}
   12fb6:	4604      	mov	r4, r0
  uint8_t     *pPkt;

  p = pPacket + L2C_PAYLOAD_START;

  /* parse packet and set callback event struct */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
   12fb8:	7a10      	ldrb	r0, [r2, #8]
  BSTREAM_TO_UINT16(evt.handle, p);
   12fba:	f892 c00a 	ldrb.w	ip, [r2, #10]
   12fbe:	7a53      	ldrb	r3, [r2, #9]
{
   12fc0:	b084      	sub	sp, #16
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
   12fc2:	1040      	asrs	r0, r0, #1
   12fc4:	f88d 0002 	strb.w	r0, [sp, #2]
  evt.pValue = p;
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
  evt.hdr.param = pCcb->pMainCcb->connId;
   12fc8:	6820      	ldr	r0, [r4, #0]
  BSTREAM_TO_UINT16(evt.handle, p);
   12fca:	320b      	adds	r2, #11
   12fcc:	eb03 230c 	add.w	r3, r3, ip, lsl #8
  evt.hdr.param = pCcb->pMainCcb->connId;
   12fd0:	7f00      	ldrb	r0, [r0, #28]
  evt.pValue = p;
   12fd2:	9201      	str	r2, [sp, #4]
  BSTREAM_TO_UINT16(evt.handle, p);
   12fd4:	b29b      	uxth	r3, r3
  evt.hdr.status = ATT_SUCCESS;
   12fd6:	2200      	movs	r2, #0
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
   12fd8:	3903      	subs	r1, #3
  BSTREAM_TO_UINT16(evt.handle, p);
   12fda:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
   12fde:	f8ad 1008 	strh.w	r1, [sp, #8]
  evt.hdr.param = pCcb->pMainCcb->connId;
   12fe2:	f8ad 0000 	strh.w	r0, [sp]
  evt.hdr.status = ATT_SUCCESS;
   12fe6:	f88d 2003 	strb.w	r2, [sp, #3]
  evt.continuing = FALSE;
   12fea:	f88d 200c 	strb.w	r2, [sp, #12]

  /* verify handle and call callback */
  if ((evt.handle != 0) && attCb.cback)
   12fee:	b123      	cbz	r3, 12ffa <attcProcInd+0x46>
   12ff0:	4b12      	ldr	r3, [pc, #72]	; (1303c <attcProcInd+0x88>)
   12ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   12ff4:	b10b      	cbz	r3, 12ffa <attcProcInd+0x46>
  {
    (*attCb.cback)(&evt);
   12ff6:	4668      	mov	r0, sp
   12ff8:	4798      	blx	r3
  }

  /* if indication send confirm */
  if (attcCb.autoCnf && (evt.hdr.event == ATT_METHOD_VALUE_IND))
   12ffa:	4b11      	ldr	r3, [pc, #68]	; (13040 <attcProcInd+0x8c>)
   12ffc:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
   13000:	b11b      	cbz	r3, 1300a <attcProcInd+0x56>
   13002:	f89d 3002 	ldrb.w	r3, [sp, #2]
   13006:	2b0e      	cmp	r3, #14
   13008:	d004      	beq.n	13014 <attcProcInd+0x60>

    return;
  }

  /* mark confirm as pending; will be sent when flow enabled or application sends it. */
  pCcb->cnfPending = TRUE;
   1300a:	2301      	movs	r3, #1
   1300c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   13010:	b004      	add	sp, #16
   13012:	bd10      	pop	{r4, pc}
    if (!pCcb->flowDisabled)
   13014:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   13018:	2b00      	cmp	r3, #0
   1301a:	d1f9      	bne.n	13010 <attcProcInd+0x5c>
      if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1301c:	2009      	movs	r0, #9
   1301e:	f002 fb9d 	bl	1575c <attMsgAlloc>
   13022:	2800      	cmp	r0, #0
   13024:	d0f4      	beq.n	13010 <attcProcInd+0x5c>
        *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   13026:	231e      	movs	r3, #30
   13028:	7203      	strb	r3, [r0, #8]
        L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   1302a:	6822      	ldr	r2, [r4, #0]
   1302c:	4603      	mov	r3, r0
   1302e:	8b11      	ldrh	r1, [r2, #24]
   13030:	2004      	movs	r0, #4
   13032:	2201      	movs	r2, #1
   13034:	f006 fd10 	bl	19a58 <L2cDataReq>
    return;
   13038:	e7ea      	b.n	13010 <attcProcInd+0x5c>
   1303a:	bf00      	nop
   1303c:	100042a0 	.word	0x100042a0
   13040:	10004120 	.word	0x10004120

00013044 <attcSendMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSendMsg(dmConnId_t connId, uint16_t handle, uint8_t msgId, attcPktParam_t *pPkt, bool_t continuing)
{
   13044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13048:	4605      	mov	r5, r0
   1304a:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1304e:	460f      	mov	r7, r1
   13050:	4616      	mov	r6, r2
   13052:	461c      	mov	r4, r3
  attcCcb_t   *pCcb;
  uint16_t    mtu;
  bool_t      transTimedOut;

  WsfTaskLock();
   13054:	f00a ffe2 	bl	1e01c <WsfTaskLock>

  /* get CCB and verify connection still in use */
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   13058:	4628      	mov	r0, r5
   1305a:	f7ff fe17 	bl	12c8c <attcCcbByConnId>
   1305e:	b1f0      	cbz	r0, 1309e <attcSendMsg+0x5a>
  {
    /* get MTU size */
    mtu = pCcb->pMainCcb->mtu;
   13060:	6803      	ldr	r3, [r0, #0]
   13062:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   13066:	f893 a01d 	ldrb.w	sl, [r3, #29]
    /* MTU size unknown */
    mtu = 0;
    transTimedOut = FALSE;
  }

  WsfTaskUnlock();
   1306a:	f00a ffe1 	bl	1e030 <WsfTaskUnlock>

  /* if MTU size known for connection */
  if (mtu > 0)
   1306e:	f1b9 0f00 	cmp.w	r9, #0
   13072:	d016      	beq.n	130a2 <attcSendMsg+0x5e>
  {
    /* if no transaction's timed out */
    if (!transTimedOut)
   13074:	f01a 0f04 	tst.w	sl, #4
   13078:	d117      	bne.n	130aa <attcSendMsg+0x66>
    {
      uint16_t dataLen = 0;

      /* if packet is not null then find out its length */
      if (pPkt != NULL)
   1307a:	2c00      	cmp	r4, #0
   1307c:	d038      	beq.n	130f0 <attcSendMsg+0xac>
      {
        /* if not prepare write request */
        if (msgId != ATTC_MSG_API_PREP_WRITE)
   1307e:	2e0b      	cmp	r6, #11
   13080:	d01c      	beq.n	130bc <attcSendMsg+0x78>
        {
          dataLen = pPkt->len;
   13082:	8823      	ldrh	r3, [r4, #0]
          /* else will be sent as multiple prepare write requests */
        }
      }

      /* if packet length is less than or equal to negotiated MTU */
      if (dataLen <= mtu)
   13084:	454b      	cmp	r3, r9
   13086:	d920      	bls.n	130ca <attcSendMsg+0x86>
      }
      /* else packet length exceeds MTU size */
      else
      {
        /* call callback with failure status */
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   13088:	2377      	movs	r3, #119	; 0x77
   1308a:	463a      	mov	r2, r7
   1308c:	4631      	mov	r1, r6
   1308e:	4628      	mov	r0, r5
   13090:	f7ff fe2c 	bl	12cec <attcExecCallback>
  }

  /* alloc failed, transaction's timed out or packet length exceeded MTU size; free packet buffer */
  if (pPkt != NULL)
  {
    WsfMsgFree(pPkt);
   13094:	4620      	mov	r0, r4
  }
}
   13096:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    WsfMsgFree(pPkt);
   1309a:	f00a bf85 	b.w	1dfa8 <WsfMsgFree>
  WsfTaskUnlock();
   1309e:	f00a ffc7 	bl	1e030 <WsfTaskUnlock>
  if (pPkt != NULL)
   130a2:	2c00      	cmp	r4, #0
   130a4:	d1f6      	bne.n	13094 <attcSendMsg+0x50>
}
   130a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   130aa:	2371      	movs	r3, #113	; 0x71
   130ac:	463a      	mov	r2, r7
   130ae:	4631      	mov	r1, r6
   130b0:	4628      	mov	r0, r5
   130b2:	f7ff fe1b 	bl	12cec <attcExecCallback>
  if (pPkt != NULL)
   130b6:	2c00      	cmp	r4, #0
   130b8:	d0f5      	beq.n	130a6 <attcSendMsg+0x62>
   130ba:	e7eb      	b.n	13094 <attcSendMsg+0x50>
          if (!continuing)
   130bc:	f1b8 0f00 	cmp.w	r8, #0
   130c0:	d103      	bne.n	130ca <attcSendMsg+0x86>
            dataLen = ATT_PREP_WRITE_REQ_LEN + pPkt->w.len;
   130c2:	8823      	ldrh	r3, [r4, #0]
   130c4:	3305      	adds	r3, #5
   130c6:	b29b      	uxth	r3, r3
   130c8:	e7dc      	b.n	13084 <attcSendMsg+0x40>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   130ca:	200c      	movs	r0, #12
   130cc:	f00a ff64 	bl	1df98 <WsfMsgAlloc>
   130d0:	4601      	mov	r1, r0
   130d2:	2800      	cmp	r0, #0
   130d4:	d0de      	beq.n	13094 <attcSendMsg+0x50>
          WsfMsgSend(attCb.handlerId, pMsg);
   130d6:	4b0a      	ldr	r3, [pc, #40]	; (13100 <attcSendMsg+0xbc>)
          pMsg->hdr.param = connId;
   130d8:	800d      	strh	r5, [r1, #0]
          pMsg->hdr.status = continuing;
   130da:	f881 8003 	strb.w	r8, [r1, #3]
          pMsg->hdr.event = msgId;
   130de:	708e      	strb	r6, [r1, #2]
          pMsg->pPkt = pPkt;
   130e0:	604c      	str	r4, [r1, #4]
          pMsg->handle = handle;
   130e2:	810f      	strh	r7, [r1, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
   130e4:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   130e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
   130ec:	f00a bf60 	b.w	1dfb0 <WsfMsgSend>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   130f0:	200c      	movs	r0, #12
   130f2:	f00a ff51 	bl	1df98 <WsfMsgAlloc>
   130f6:	4601      	mov	r1, r0
   130f8:	2800      	cmp	r0, #0
   130fa:	d0d4      	beq.n	130a6 <attcSendMsg+0x62>
   130fc:	e7eb      	b.n	130d6 <attcSendMsg+0x92>
   130fe:	bf00      	nop
   13100:	100042a0 	.word	0x100042a0

00013104 <AttcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcFindInfoReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle, bool_t continuing)
{
   13104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13108:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_FIND_INFO_REQ_BUF_LEN)) != NULL)
   1310a:	200d      	movs	r0, #13
{
   1310c:	460f      	mov	r7, r1
   1310e:	4615      	mov	r5, r2
   13110:	4698      	mov	r8, r3
  if ((pPkt = attMsgAlloc(ATT_FIND_INFO_REQ_BUF_LEN)) != NULL)
   13112:	f002 fb23 	bl	1575c <attMsgAlloc>
   13116:	b318      	cbz	r0, 13160 <AttcFindInfoReq+0x5c>
    pPkt->h.startHandle = startHandle;
    pPkt->h.endHandle = endHandle;

    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_REQ);
   13118:	2304      	movs	r3, #4
   1311a:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_FIND_INFO_REQ_LEN;
   1311c:	2305      	movs	r3, #5
    pPkt->h.endHandle = endHandle;
   1311e:	8085      	strh	r5, [r0, #4]
    pPkt->h.startHandle = startHandle;
   13120:	8047      	strh	r7, [r0, #2]
    pPkt->len = ATT_FIND_INFO_REQ_LEN;
   13122:	8003      	strh	r3, [r0, #0]
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
   13124:	4604      	mov	r4, r0
  WsfTaskLock();
   13126:	f00a ff79 	bl	1e01c <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   1312a:	4630      	mov	r0, r6
   1312c:	f7ff fdae 	bl	12c8c <attcCcbByConnId>
   13130:	b1c0      	cbz	r0, 13164 <AttcFindInfoReq+0x60>
    mtu = pCcb->pMainCcb->mtu;
   13132:	6803      	ldr	r3, [r0, #0]
   13134:	8b5d      	ldrh	r5, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   13136:	f893 901d 	ldrb.w	r9, [r3, #29]
  WsfTaskUnlock();
   1313a:	f00a ff79 	bl	1e030 <WsfTaskUnlock>
  if (mtu > 0)
   1313e:	b155      	cbz	r5, 13156 <AttcFindInfoReq+0x52>
    if (!transTimedOut)
   13140:	f019 0f04 	tst.w	r9, #4
   13144:	d115      	bne.n	13172 <AttcFindInfoReq+0x6e>
      if (dataLen <= mtu)
   13146:	8823      	ldrh	r3, [r4, #0]
   13148:	42ab      	cmp	r3, r5
   1314a:	d819      	bhi.n	13180 <AttcFindInfoReq+0x7c>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   1314c:	200c      	movs	r0, #12
   1314e:	f00a ff23 	bl	1df98 <WsfMsgAlloc>
   13152:	4601      	mov	r1, r0
   13154:	b9d8      	cbnz	r0, 1318e <AttcFindInfoReq+0x8a>
    WsfMsgFree(pPkt);
   13156:	4620      	mov	r0, r4

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_INFO, pPkt, continuing);
  }
}
   13158:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    WsfMsgFree(pPkt);
   1315c:	f00a bf24 	b.w	1dfa8 <WsfMsgFree>
}
   13160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  WsfTaskUnlock();
   13164:	f00a ff64 	bl	1e030 <WsfTaskUnlock>
    WsfMsgFree(pPkt);
   13168:	4620      	mov	r0, r4
}
   1316a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    WsfMsgFree(pPkt);
   1316e:	f00a bf1b 	b.w	1dfa8 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   13172:	2371      	movs	r3, #113	; 0x71
   13174:	463a      	mov	r2, r7
   13176:	2102      	movs	r1, #2
   13178:	4630      	mov	r0, r6
   1317a:	f7ff fdb7 	bl	12cec <attcExecCallback>
   1317e:	e7ea      	b.n	13156 <AttcFindInfoReq+0x52>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   13180:	2377      	movs	r3, #119	; 0x77
   13182:	463a      	mov	r2, r7
   13184:	2102      	movs	r1, #2
   13186:	4630      	mov	r0, r6
   13188:	f7ff fdb0 	bl	12cec <attcExecCallback>
   1318c:	e7e3      	b.n	13156 <AttcFindInfoReq+0x52>
          WsfMsgSend(attCb.handlerId, pMsg);
   1318e:	4b07      	ldr	r3, [pc, #28]	; (131ac <AttcFindInfoReq+0xa8>)
          pMsg->hdr.param = connId;
   13190:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
   13192:	2202      	movs	r2, #2
   13194:	7082      	strb	r2, [r0, #2]
          pMsg->hdr.status = continuing;
   13196:	f880 8003 	strb.w	r8, [r0, #3]
          pMsg->pPkt = pPkt;
   1319a:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
   1319c:	8107      	strh	r7, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
   1319e:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   131a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
   131a6:	f00a bf03 	b.w	1dfb0 <WsfMsgSend>
   131aa:	bf00      	nop
   131ac:	100042a0 	.word	0x100042a0

000131b0 <AttcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcReadReq(dmConnId_t connId, uint16_t handle)
{
   131b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   131b4:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_READ_REQ_BUF_LEN)) != NULL)
   131b6:	200b      	movs	r0, #11
{
   131b8:	460d      	mov	r5, r1
  if ((pPkt = attMsgAlloc(ATT_READ_REQ_BUF_LEN)) != NULL)
   131ba:	f002 facf 	bl	1575c <attMsgAlloc>
   131be:	b320      	cbz	r0, 1320a <AttcReadReq+0x5a>
    /* set length */
    pPkt->len = ATT_READ_REQ_LEN;

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_REQ);
   131c0:	230a      	movs	r3, #10
   131c2:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_READ_REQ_LEN;
   131c4:	2203      	movs	r2, #3
    UINT16_TO_BSTREAM(p, handle);
   131c6:	0a2b      	lsrs	r3, r5, #8
    pPkt->len = ATT_READ_REQ_LEN;
   131c8:	8002      	strh	r2, [r0, #0]
    UINT16_TO_BSTREAM(p, handle);
   131ca:	7245      	strb	r5, [r0, #9]
   131cc:	7283      	strb	r3, [r0, #10]

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_READ, pPkt, FALSE);
   131ce:	4604      	mov	r4, r0
  WsfTaskLock();
   131d0:	f00a ff24 	bl	1e01c <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   131d4:	4630      	mov	r0, r6
   131d6:	f7ff fd59 	bl	12c8c <attcCcbByConnId>
   131da:	b1c0      	cbz	r0, 1320e <AttcReadReq+0x5e>
    mtu = pCcb->pMainCcb->mtu;
   131dc:	6803      	ldr	r3, [r0, #0]
   131de:	8b5f      	ldrh	r7, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   131e0:	f893 801d 	ldrb.w	r8, [r3, #29]
  WsfTaskUnlock();
   131e4:	f00a ff24 	bl	1e030 <WsfTaskUnlock>
  if (mtu > 0)
   131e8:	b157      	cbz	r7, 13200 <AttcReadReq+0x50>
    if (!transTimedOut)
   131ea:	f018 0f04 	tst.w	r8, #4
   131ee:	d115      	bne.n	1321c <AttcReadReq+0x6c>
      if (dataLen <= mtu)
   131f0:	8823      	ldrh	r3, [r4, #0]
   131f2:	42bb      	cmp	r3, r7
   131f4:	d819      	bhi.n	1322a <AttcReadReq+0x7a>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   131f6:	200c      	movs	r0, #12
   131f8:	f00a fece 	bl	1df98 <WsfMsgAlloc>
   131fc:	4601      	mov	r1, r0
   131fe:	b9d8      	cbnz	r0, 13238 <AttcReadReq+0x88>
    WsfMsgFree(pPkt);
   13200:	4620      	mov	r0, r4
  }
}
   13202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pPkt);
   13206:	f00a becf 	b.w	1dfa8 <WsfMsgFree>
}
   1320a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  WsfTaskUnlock();
   1320e:	f00a ff0f 	bl	1e030 <WsfTaskUnlock>
    WsfMsgFree(pPkt);
   13212:	4620      	mov	r0, r4
}
   13214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pPkt);
   13218:	f00a bec6 	b.w	1dfa8 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   1321c:	2371      	movs	r3, #113	; 0x71
   1321e:	462a      	mov	r2, r5
   13220:	2105      	movs	r1, #5
   13222:	4630      	mov	r0, r6
   13224:	f7ff fd62 	bl	12cec <attcExecCallback>
   13228:	e7ea      	b.n	13200 <AttcReadReq+0x50>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   1322a:	2377      	movs	r3, #119	; 0x77
   1322c:	462a      	mov	r2, r5
   1322e:	2105      	movs	r1, #5
   13230:	4630      	mov	r0, r6
   13232:	f7ff fd5b 	bl	12cec <attcExecCallback>
   13236:	e7e3      	b.n	13200 <AttcReadReq+0x50>
          WsfMsgSend(attCb.handlerId, pMsg);
   13238:	4b05      	ldr	r3, [pc, #20]	; (13250 <AttcReadReq+0xa0>)
          pMsg->hdr.param = connId;
   1323a:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
   1323c:	2205      	movs	r2, #5
   1323e:	8042      	strh	r2, [r0, #2]
          pMsg->pPkt = pPkt;
   13240:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
   13242:	8105      	strh	r5, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
   13244:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   13248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
   1324c:	f00a beb0 	b.w	1dfb0 <WsfMsgSend>
   13250:	100042a0 	.word	0x100042a0

00013254 <AttcWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcWriteReq(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   13254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
   13258:	f102 040b 	add.w	r4, r2, #11
{
   1325c:	b082      	sub	sp, #8
   1325e:	4680      	mov	r8, r0
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
   13260:	b2a0      	uxth	r0, r4
{
   13262:	4615      	mov	r5, r2
   13264:	460e      	mov	r6, r1
   13266:	461f      	mov	r7, r3
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
   13268:	f002 fa78 	bl	1575c <attMsgAlloc>
   1326c:	b1a0      	cbz	r0, 13298 <AttcWriteReq+0x44>
  {
    /* set length */
    pPkt->len = ATT_WRITE_REQ_LEN + valueLen;
   1326e:	1ceb      	adds	r3, r5, #3
   13270:	8003      	strh	r3, [r0, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_REQ);
   13272:	2312      	movs	r3, #18
   13274:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, handle);
   13276:	0a33      	lsrs	r3, r6, #8
   13278:	7283      	strb	r3, [r0, #10]
    memcpy(p, pValue, valueLen);
   1327a:	4604      	mov	r4, r0
   1327c:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, handle);
   1327e:	7246      	strb	r6, [r0, #9]
    memcpy(p, pValue, valueLen);
   13280:	462a      	mov	r2, r5
   13282:	300b      	adds	r0, #11
   13284:	f7f8 ff3c 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_WRITE, pPkt, FALSE);
   13288:	2300      	movs	r3, #0
   1328a:	9300      	str	r3, [sp, #0]
   1328c:	2209      	movs	r2, #9
   1328e:	4623      	mov	r3, r4
   13290:	4631      	mov	r1, r6
   13292:	4640      	mov	r0, r8
   13294:	f7ff fed6 	bl	13044 <attcSendMsg>
  }
}
   13298:	b002      	add	sp, #8
   1329a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1329e:	bf00      	nop

000132a0 <AttcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcMtuReq(dmConnId_t connId, uint16_t mtu)
{
   132a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132a2:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
   132a4:	200b      	movs	r0, #11
{
   132a6:	460d      	mov	r5, r1
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
   132a8:	f002 fa58 	bl	1575c <attMsgAlloc>
   132ac:	b318      	cbz	r0, 132f6 <AttcMtuReq+0x56>
    /* set length */
    pPkt->len = ATT_MTU_REQ_LEN;

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_REQ);
   132ae:	2302      	movs	r3, #2
   132b0:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_MTU_REQ_LEN;
   132b2:	2203      	movs	r2, #3
    UINT16_TO_BSTREAM(p, mtu);
   132b4:	0a2b      	lsrs	r3, r5, #8
    pPkt->len = ATT_MTU_REQ_LEN;
   132b6:	8002      	strh	r2, [r0, #0]
    UINT16_TO_BSTREAM(p, mtu);
   132b8:	7245      	strb	r5, [r0, #9]
   132ba:	7283      	strb	r3, [r0, #10]

    /* send message */
    attcSendMsg(connId, 0, ATTC_MSG_API_MTU, pPkt, FALSE);
   132bc:	4604      	mov	r4, r0
  WsfTaskLock();
   132be:	f00a fead 	bl	1e01c <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   132c2:	4630      	mov	r0, r6
   132c4:	f7ff fce2 	bl	12c8c <attcCcbByConnId>
   132c8:	b1b0      	cbz	r0, 132f8 <AttcMtuReq+0x58>
    mtu = pCcb->pMainCcb->mtu;
   132ca:	6803      	ldr	r3, [r0, #0]
   132cc:	8b5f      	ldrh	r7, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   132ce:	7f5d      	ldrb	r5, [r3, #29]
  WsfTaskUnlock();
   132d0:	f00a feae 	bl	1e030 <WsfTaskUnlock>
  if (mtu > 0)
   132d4:	b157      	cbz	r7, 132ec <AttcMtuReq+0x4c>
    if (!transTimedOut)
   132d6:	f015 0504 	ands.w	r5, r5, #4
   132da:	d114      	bne.n	13306 <AttcMtuReq+0x66>
      if (dataLen <= mtu)
   132dc:	8823      	ldrh	r3, [r4, #0]
   132de:	42bb      	cmp	r3, r7
   132e0:	d818      	bhi.n	13314 <AttcMtuReq+0x74>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   132e2:	200c      	movs	r0, #12
   132e4:	f00a fe58 	bl	1df98 <WsfMsgAlloc>
   132e8:	4601      	mov	r1, r0
   132ea:	b9d0      	cbnz	r0, 13322 <AttcMtuReq+0x82>
    WsfMsgFree(pPkt);
   132ec:	4620      	mov	r0, r4
  }
}
   132ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgFree(pPkt);
   132f2:	f00a be59 	b.w	1dfa8 <WsfMsgFree>
}
   132f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  WsfTaskUnlock();
   132f8:	f00a fe9a 	bl	1e030 <WsfTaskUnlock>
    WsfMsgFree(pPkt);
   132fc:	4620      	mov	r0, r4
}
   132fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgFree(pPkt);
   13302:	f00a be51 	b.w	1dfa8 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   13306:	2371      	movs	r3, #113	; 0x71
   13308:	2200      	movs	r2, #0
   1330a:	2101      	movs	r1, #1
   1330c:	4630      	mov	r0, r6
   1330e:	f7ff fced 	bl	12cec <attcExecCallback>
   13312:	e7eb      	b.n	132ec <AttcMtuReq+0x4c>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   13314:	2377      	movs	r3, #119	; 0x77
   13316:	462a      	mov	r2, r5
   13318:	2101      	movs	r1, #1
   1331a:	4630      	mov	r0, r6
   1331c:	f7ff fce6 	bl	12cec <attcExecCallback>
   13320:	e7e4      	b.n	132ec <AttcMtuReq+0x4c>
          WsfMsgSend(attCb.handlerId, pMsg);
   13322:	4b06      	ldr	r3, [pc, #24]	; (1333c <AttcMtuReq+0x9c>)
          pMsg->hdr.param = connId;
   13324:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
   13326:	2201      	movs	r2, #1
   13328:	8042      	strh	r2, [r0, #2]
          pMsg->pPkt = pPkt;
   1332a:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
   1332c:	8105      	strh	r5, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
   1332e:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   13332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
   13336:	f00a be3b 	b.w	1dfb0 <WsfMsgSend>
   1333a:	bf00      	nop
   1333c:	100042a0 	.word	0x100042a0

00013340 <AttcIndConfirm>:
void AttcIndConfirm(dmConnId_t connId)
{
  attcCcb_t   *pCcb;
  uint8_t     *pPkt;

  pCcb = attcCcbByHandle(connId - 1);
   13340:	3801      	subs	r0, #1
{
   13342:	b570      	push	{r4, r5, r6, lr}
  pCcb = attcCcbByHandle(connId - 1);
   13344:	b280      	uxth	r0, r0
   13346:	f7ff fcb9 	bl	12cbc <attcCcbByHandle>

  /* If confirmation is pending */
  if (pCcb && pCcb->cnfPending && !pCcb->flowDisabled)
   1334a:	b130      	cbz	r0, 1335a <AttcIndConfirm+0x1a>
   1334c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   13350:	4604      	mov	r4, r0
   13352:	b113      	cbz	r3, 1335a <AttcIndConfirm+0x1a>
   13354:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
   13358:	b105      	cbz	r5, 1335c <AttcIndConfirm+0x1c>

      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
    }
  }
}
   1335a:	bd70      	pop	{r4, r5, r6, pc}
    if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1335c:	2009      	movs	r0, #9
   1335e:	f002 f9fd 	bl	1575c <attMsgAlloc>
   13362:	2800      	cmp	r0, #0
   13364:	d0f9      	beq.n	1335a <AttcIndConfirm+0x1a>
      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   13366:	231e      	movs	r3, #30
      pCcb->cnfPending = FALSE;
   13368:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   1336c:	7203      	strb	r3, [r0, #8]
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   1336e:	6822      	ldr	r2, [r4, #0]
   13370:	4603      	mov	r3, r0
   13372:	8b11      	ldrh	r1, [r2, #24]
}
   13374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   13378:	2201      	movs	r2, #1
   1337a:	2004      	movs	r0, #4
   1337c:	f006 bb6c 	b.w	19a58 <L2cDataReq>

00013380 <attcProcFindByTypeRsp>:
  uint16_t  startHandle;
  uint16_t  endHandle;
  uint16_t  nextHandle;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   13380:	3108      	adds	r1, #8
{
   13382:	b5f0      	push	{r4, r5, r6, r7, lr}
  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   13384:	f102 0c09 	add.w	ip, r2, #9

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   13388:	8bc4      	ldrh	r4, [r0, #30]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   1338a:	eb02 0e01 	add.w	lr, r2, r1
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
      break;
    }

    /* set next expected handle, with special case for max handle */
    if (endHandle == ATT_HANDLE_MAX)
   1338e:	f64f 77ff 	movw	r7, #65535	; 0xffff
  while (p < pEnd)
   13392:	e01f      	b.n	133d4 <attcProcFindByTypeRsp+0x54>
    BSTREAM_TO_UINT16(startHandle, p);
   13394:	f89c 6001 	ldrb.w	r6, [ip, #1]
   13398:	f89c 2000 	ldrb.w	r2, [ip]
    BSTREAM_TO_UINT16(endHandle, p);
   1339c:	f89c 5003 	ldrb.w	r5, [ip, #3]
   133a0:	f89c 1002 	ldrb.w	r1, [ip, #2]
    BSTREAM_TO_UINT16(startHandle, p);
   133a4:	eb02 2206 	add.w	r2, r2, r6, lsl #8
    BSTREAM_TO_UINT16(endHandle, p);
   133a8:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   133ac:	b289      	uxth	r1, r1
    BSTREAM_TO_UINT16(startHandle, p);
   133ae:	b292      	uxth	r2, r2
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   133b0:	428a      	cmp	r2, r1
   133b2:	f10c 0c04 	add.w	ip, ip, #4
    {
      nextHandle = 0;
    }
    else
    {
      nextHandle = endHandle + 1;
   133b6:	f101 0601 	add.w	r6, r1, #1
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   133ba:	d813      	bhi.n	133e4 <attcProcFindByTypeRsp+0x64>
   133bc:	4294      	cmp	r4, r2
   133be:	d811      	bhi.n	133e4 <attcProcFindByTypeRsp+0x64>
   133c0:	8c05      	ldrh	r5, [r0, #32]
   133c2:	4295      	cmp	r5, r2
   133c4:	d30e      	bcc.n	133e4 <attcProcFindByTypeRsp+0x64>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
   133c6:	b16c      	cbz	r4, 133e4 <attcProcFindByTypeRsp+0x64>
    if (endHandle == ATT_HANDLE_MAX)
   133c8:	42b9      	cmp	r1, r7
      nextHandle = endHandle + 1;
   133ca:	bf14      	ite	ne
   133cc:	b2b4      	uxthne	r4, r6
      nextHandle = 0;
   133ce:	2400      	moveq	r4, #0
    }

    /* check for truncated response */
    if (p > pEnd)
   133d0:	45e6      	cmp	lr, ip
   133d2:	d307      	bcc.n	133e4 <attcProcFindByTypeRsp+0x64>
  while (p < pEnd)
   133d4:	45f4      	cmp	ip, lr
   133d6:	d3dd      	bcc.n	13394 <attcProcFindByTypeRsp+0x14>
      break;
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   133d8:	78db      	ldrb	r3, [r3, #3]
   133da:	b913      	cbnz	r3, 133e2 <attcProcFindByTypeRsp+0x62>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   133dc:	7cc3      	ldrb	r3, [r0, #19]
   133de:	2b01      	cmp	r3, #1
   133e0:	d003      	beq.n	133ea <attcProcFindByTypeRsp+0x6a>
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   133e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   133e4:	2273      	movs	r2, #115	; 0x73
   133e6:	70da      	strb	r2, [r3, #3]
}
   133e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (nextHandle == 0 || nextHandle > pCcb->outReqParams.h.endHandle)
   133ea:	b114      	cbz	r4, 133f2 <attcProcFindByTypeRsp+0x72>
   133ec:	8c03      	ldrh	r3, [r0, #32]
   133ee:	42a3      	cmp	r3, r4
   133f0:	d202      	bcs.n	133f8 <attcProcFindByTypeRsp+0x78>
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   133f2:	2300      	movs	r3, #0
   133f4:	74c3      	strb	r3, [r0, #19]
}
   133f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pCcb->outReqParams.h.startHandle = nextHandle;
   133f8:	83c4      	strh	r4, [r0, #30]
        pCcb->outReq.handle = nextHandle;
   133fa:	8304      	strh	r4, [r0, #24]
}
   133fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   133fe:	bf00      	nop

00013400 <attcProcReadLongRsp>:
 */
/*************************************************************************************************/
void attcProcReadLongRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   13400:	7cc2      	ldrb	r2, [r0, #19]
   13402:	2a01      	cmp	r2, #1
   13404:	d000      	beq.n	13408 <attcProcReadLongRsp+0x8>
    else
    {
      pCcb->outReqParams.o.offset += pEvt->valueLen;
    }
  }
}
   13406:	4770      	bx	lr
    if (len < pCcb->pMainCcb->mtu)
   13408:	6802      	ldr	r2, [r0, #0]
   1340a:	8b52      	ldrh	r2, [r2, #26]
   1340c:	428a      	cmp	r2, r1
   1340e:	d902      	bls.n	13416 <attcProcReadLongRsp+0x16>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   13410:	2300      	movs	r3, #0
   13412:	74c3      	strb	r3, [r0, #19]
   13414:	4770      	bx	lr
      pCcb->outReqParams.o.offset += pEvt->valueLen;
   13416:	8bc2      	ldrh	r2, [r0, #30]
   13418:	891b      	ldrh	r3, [r3, #8]
   1341a:	4413      	add	r3, r2
   1341c:	83c3      	strh	r3, [r0, #30]
}
   1341e:	4770      	bx	lr

00013420 <AttcFindByTypeValueReq>:
 *  \return None.
 */
/*************************************************************************************************/
void AttcFindByTypeValueReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle,
                            uint16_t uuid16, uint16_t valueLen, uint8_t *pValue, bool_t continuing)
{
   13420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13424:	b081      	sub	sp, #4
   13426:	4607      	mov	r7, r0
   13428:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   1342c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   13430:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_FIND_TYPE_REQ_BUF_LEN + valueLen)) != NULL)
   13434:	f109 000f 	add.w	r0, r9, #15
   13438:	b280      	uxth	r0, r0
{
   1343a:	460e      	mov	r6, r1
   1343c:	4690      	mov	r8, r2
   1343e:	461d      	mov	r5, r3
  if ((pPkt = attMsgAlloc(ATT_FIND_TYPE_REQ_BUF_LEN + valueLen)) != NULL)
   13440:	f002 f98c 	bl	1575c <attMsgAlloc>
   13444:	b1d8      	cbz	r0, 1347e <AttcFindByTypeValueReq+0x5e>
  {
    /* set parameters */
    pPkt->len = ATT_FIND_TYPE_REQ_LEN + valueLen;
   13446:	f109 0307 	add.w	r3, r9, #7
    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
    /* skip start and end handle fields */
    p += (2 * sizeof(uint16_t));
    UINT16_TO_BSTREAM(p, uuid16);
   1344a:	7345      	strb	r5, [r0, #13]
    pPkt->len = ATT_FIND_TYPE_REQ_LEN + valueLen;
   1344c:	8003      	strh	r3, [r0, #0]
    UINT16_TO_BSTREAM(p, uuid16);
   1344e:	0a2d      	lsrs	r5, r5, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
   13450:	2306      	movs	r3, #6
   13452:	4604      	mov	r4, r0
    pPkt->h.endHandle = endHandle;
   13454:	f8a0 8004 	strh.w	r8, [r0, #4]
    memcpy(p, pValue, valueLen);
   13458:	4659      	mov	r1, fp
    pPkt->h.startHandle = startHandle;
   1345a:	8046      	strh	r6, [r0, #2]
    UINT16_TO_BSTREAM(p, uuid16);
   1345c:	7385      	strb	r5, [r0, #14]
    memcpy(p, pValue, valueLen);
   1345e:	464a      	mov	r2, r9
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
   13460:	7203      	strb	r3, [r0, #8]
    memcpy(p, pValue, valueLen);
   13462:	300f      	adds	r0, #15
   13464:	f7f8 fe4c 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_BY_TYPE_VALUE, pPkt, continuing);
   13468:	4623      	mov	r3, r4
   1346a:	2203      	movs	r2, #3
   1346c:	4631      	mov	r1, r6
   1346e:	4638      	mov	r0, r7
   13470:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  }
}
   13474:	b001      	add	sp, #4
   13476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_BY_TYPE_VALUE, pPkt, continuing);
   1347a:	f7ff bde3 	b.w	13044 <attcSendMsg>
}
   1347e:	b001      	add	sp, #4
   13480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013484 <AttcReadByTypeReq>:
 *  \return None.
 */
/*************************************************************************************************/
void AttcReadByTypeReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle,
                       uint8_t uuidLen, uint8_t *pUuid, bool_t continuing)
{
   13484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13488:	4607      	mov	r7, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_READ_TYPE_REQ_BUF_LEN + uuidLen)) != NULL)
   1348a:	f103 000d 	add.w	r0, r3, #13
{
   1348e:	f8dd a020 	ldr.w	sl, [sp, #32]
   13492:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
   13496:	461d      	mov	r5, r3
   13498:	460e      	mov	r6, r1
   1349a:	4690      	mov	r8, r2
  if ((pPkt = attMsgAlloc(ATT_READ_TYPE_REQ_BUF_LEN + uuidLen)) != NULL)
   1349c:	f002 f95e 	bl	1575c <attMsgAlloc>
   134a0:	b1b8      	cbz	r0, 134d2 <AttcReadByTypeReq+0x4e>
  {
    /* set parameters */
    pPkt->len = ATT_READ_TYPE_REQ_LEN + uuidLen;
   134a2:	b2ab      	uxth	r3, r5
   134a4:	3305      	adds	r3, #5
   134a6:	8003      	strh	r3, [r0, #0]
    pPkt->h.startHandle = startHandle;
    pPkt->h.endHandle = endHandle;

    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_REQ);
   134a8:	2308      	movs	r3, #8
   134aa:	4604      	mov	r4, r0
    pPkt->h.endHandle = endHandle;
   134ac:	f8a0 8004 	strh.w	r8, [r0, #4]
    /* skip start and end handle fields */
    p += (2 * sizeof(uint16_t));
    memcpy(p, pUuid, uuidLen);
   134b0:	462a      	mov	r2, r5
   134b2:	4651      	mov	r1, sl
    pPkt->h.startHandle = startHandle;
   134b4:	8046      	strh	r6, [r0, #2]
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_REQ);
   134b6:	7203      	strb	r3, [r0, #8]
    memcpy(p, pUuid, uuidLen);
   134b8:	300d      	adds	r0, #13
   134ba:	f7f8 fe21 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_READ_BY_TYPE, pPkt, continuing);
   134be:	f8cd 9020 	str.w	r9, [sp, #32]
   134c2:	4623      	mov	r3, r4
   134c4:	4631      	mov	r1, r6
   134c6:	4638      	mov	r0, r7
   134c8:	2204      	movs	r2, #4
  }
}
   134ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attcSendMsg(connId, startHandle, ATTC_MSG_API_READ_BY_TYPE, pPkt, continuing);
   134ce:	f7ff bdb9 	b.w	13044 <attcSendMsg>
}
   134d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   134d6:	bf00      	nop

000134d8 <attcProcPrepWriteRsp>:
 */
/*************************************************************************************************/
void attcProcPrepWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   134d8:	7cc2      	ldrb	r2, [r0, #19]
   134da:	2a01      	cmp	r2, #1
   134dc:	d006      	beq.n	134ec <attcProcPrepWriteRsp+0x14>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    }
  }

  /* adjust attribute value and its length (adjusted by ATT header length already) */
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   134de:	6859      	ldr	r1, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   134e0:	891a      	ldrh	r2, [r3, #8]
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   134e2:	3104      	adds	r1, #4
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   134e4:	3a04      	subs	r2, #4
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   134e6:	6059      	str	r1, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   134e8:	811a      	strh	r2, [r3, #8]
}
   134ea:	4770      	bx	lr
    if (pCcb->outReqParams.w.len == 0)
   134ec:	8b82      	ldrh	r2, [r0, #28]
   134ee:	2a00      	cmp	r2, #0
   134f0:	d1f5      	bne.n	134de <attcProcPrepWriteRsp+0x6>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   134f2:	74c2      	strb	r2, [r0, #19]
   134f4:	e7f3      	b.n	134de <attcProcPrepWriteRsp+0x6>
   134f6:	bf00      	nop

000134f8 <AttcWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcWriteCmd(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   134f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
   134fc:	f102 040b 	add.w	r4, r2, #11
{
   13500:	b082      	sub	sp, #8
   13502:	4680      	mov	r8, r0
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
   13504:	b2a0      	uxth	r0, r4
{
   13506:	4615      	mov	r5, r2
   13508:	460e      	mov	r6, r1
   1350a:	461f      	mov	r7, r3
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
   1350c:	f002 f926 	bl	1575c <attMsgAlloc>
   13510:	b1a0      	cbz	r0, 1353c <AttcWriteCmd+0x44>
  {
    /* set length */
    pPkt->len = ATT_WRITE_CMD_LEN + valueLen;
   13512:	1ceb      	adds	r3, r5, #3
   13514:	8003      	strh	r3, [r0, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_CMD);
   13516:	2352      	movs	r3, #82	; 0x52
   13518:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, handle);
   1351a:	0a33      	lsrs	r3, r6, #8
   1351c:	7283      	strb	r3, [r0, #10]
    memcpy(p, pValue, valueLen);
   1351e:	4604      	mov	r4, r0
   13520:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, handle);
   13522:	7246      	strb	r6, [r0, #9]
    memcpy(p, pValue, valueLen);
   13524:	462a      	mov	r2, r5
   13526:	300b      	adds	r0, #11
   13528:	f7f8 fdea 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_WRITE_CMD, pPkt, FALSE);
   1352c:	2300      	movs	r3, #0
   1352e:	9300      	str	r3, [sp, #0]
   13530:	220a      	movs	r2, #10
   13532:	4623      	mov	r3, r4
   13534:	4631      	mov	r1, r6
   13536:	4640      	mov	r0, r8
   13538:	f7ff fd84 	bl	13044 <attcSendMsg>
  }
}
   1353c:	b002      	add	sp, #8
   1353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13542:	bf00      	nop

00013544 <attsCccMainCback>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
static uint8_t attsCccMainCback(dmConnId_t connId, uint8_t method, uint16_t handle, uint8_t *pValue)
{
   13544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13548:	4606      	mov	r6, r0
   1354a:	460c      	mov	r4, r1
  ATT_TRACE_INFO2("attsCccMainCback connId=%d handle=%d", connId, handle);
   1354c:	483d      	ldr	r0, [pc, #244]	; (13644 <attsCccMainCback+0x100>)
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   1354e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 13648 <attsCccMainCback+0x104>
{
   13552:	b084      	sub	sp, #16
  ATT_TRACE_INFO2("attsCccMainCback connId=%d handle=%d", connId, handle);
   13554:	4631      	mov	r1, r6
{
   13556:	4615      	mov	r5, r2
   13558:	461f      	mov	r7, r3
  ATT_TRACE_INFO2("attsCccMainCback connId=%d handle=%d", connId, handle);
   1355a:	f00b f89d 	bl	1e698 <WsfTrace>

  if (method == ATT_METHOD_READ)
   1355e:	2c05      	cmp	r4, #5
   13560:	d040      	beq.n	135e4 <attsCccMainCback+0xa0>
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   13562:	f898 3014 	ldrb.w	r3, [r8, #20]
   13566:	f8d8 400c 	ldr.w	r4, [r8, #12]
   1356a:	2b00      	cmp	r3, #0
   1356c:	d036      	beq.n	135dc <attsCccMainCback+0x98>
   1356e:	f04f 0c00 	mov.w	ip, #0
   13572:	e005      	b.n	13580 <attsCccMainCback+0x3c>
   13574:	fa5f fc8e 	uxtb.w	ip, lr
   13578:	459c      	cmp	ip, r3
   1357a:	f104 0406 	add.w	r4, r4, #6
   1357e:	d02d      	beq.n	135dc <attsCccMainCback+0x98>
    if (pSet->handle == handle)
   13580:	8822      	ldrh	r2, [r4, #0]
   13582:	42aa      	cmp	r2, r5
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   13584:	f10c 0e01 	add.w	lr, ip, #1
    if (pSet->handle == handle)
   13588:	d1f4      	bne.n	13574 <attsCccMainCback+0x30>
  BYTES_TO_UINT16(value, pValue);
   1358a:	787a      	ldrb	r2, [r7, #1]
   1358c:	783b      	ldrb	r3, [r7, #0]
   1358e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   13592:	b29b      	uxth	r3, r3
  if (((value != 0) && (value != ATT_CLIENT_CFG_NOTIFY) && (value != ATT_CLIENT_CFG_INDICATE)) ||
   13594:	2b02      	cmp	r3, #2
   13596:	d849      	bhi.n	1362c <attsCccMainCback+0xe8>
   13598:	b113      	cbz	r3, 135a0 <attsCccMainCback+0x5c>
      ((value != 0) && ((value & pSet->valueRange) == 0)))
   1359a:	8862      	ldrh	r2, [r4, #2]
   1359c:	4213      	tst	r3, r2
   1359e:	d045      	beq.n	1362c <attsCccMainCback+0xe8>
  return attsCccCb.pCccTbl[connId - 1];
   135a0:	1e72      	subs	r2, r6, #1
   135a2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   135a6:	2a00      	cmp	r2, #0
   135a8:	d044      	beq.n	13634 <attsCccMainCback+0xf0>
    prevValue = pTbl[i];
   135aa:	f832 101c 	ldrh.w	r1, [r2, ip, lsl #1]
    pTbl[i] = value;
   135ae:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
    if (prevValue != value)
   135b2:	428b      	cmp	r3, r1
   135b4:	d042      	beq.n	1363c <attsCccMainCback+0xf8>
  evt.value = value;
   135b6:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.hdr.event = ATTS_CCC_STATE_IND;
   135ba:	2310      	movs	r3, #16
  (*attsCccCb.cback)(&evt);
   135bc:	a801      	add	r0, sp, #4
   135be:	f8d8 2010 	ldr.w	r2, [r8, #16]
  evt.hdr.param = connId;
   135c2:	f8ad 6004 	strh.w	r6, [sp, #4]
  evt.idx = idx;
   135c6:	f88d c00c 	strb.w	ip, [sp, #12]
  evt.handle = handle;
   135ca:	f8ad 5008 	strh.w	r5, [sp, #8]
  evt.hdr.event = ATTS_CCC_STATE_IND;
   135ce:	f88d 3006 	strb.w	r3, [sp, #6]
  (*attsCccCb.cback)(&evt);
   135d2:	4790      	blx	r2
    return ATT_SUCCESS;
   135d4:	2000      	movs	r0, #0
  }
  else
  {
    return attsCccWriteValue(connId, handle, pValue);
  }
}
   135d6:	b004      	add	sp, #16
   135d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ATT_ERR_NOT_FOUND;
   135dc:	200a      	movs	r0, #10
}
   135de:	b004      	add	sp, #16
   135e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   135e4:	f898 4014 	ldrb.w	r4, [r8, #20]
   135e8:	f8d8 200c 	ldr.w	r2, [r8, #12]
   135ec:	2c00      	cmp	r4, #0
   135ee:	d0f5      	beq.n	135dc <attsCccMainCback+0x98>
   135f0:	3206      	adds	r2, #6
   135f2:	2300      	movs	r3, #0
   135f4:	e002      	b.n	135fc <attsCccMainCback+0xb8>
   135f6:	b2c3      	uxtb	r3, r0
   135f8:	42a3      	cmp	r3, r4
   135fa:	d0ef      	beq.n	135dc <attsCccMainCback+0x98>
    if (pSet->handle == handle)
   135fc:	f832 1c06 	ldrh.w	r1, [r2, #-6]
   13600:	42a9      	cmp	r1, r5
  for (pSet = attsCccCb.pSet, i = 0; i < attsCccCb.setLen; i++, pSet++)
   13602:	f103 0001 	add.w	r0, r3, #1
   13606:	f102 0206 	add.w	r2, r2, #6
    if (pSet->handle == handle)
   1360a:	d1f4      	bne.n	135f6 <attsCccMainCback+0xb2>
  return attsCccCb.pCccTbl[connId - 1];
   1360c:	3e01      	subs	r6, #1
   1360e:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   13612:	b17a      	cbz	r2, 13634 <attsCccMainCback+0xf0>
    UINT16_TO_BSTREAM(pValue, pTbl[i]);
   13614:	b21b      	sxth	r3, r3
    return ATT_SUCCESS;
   13616:	2000      	movs	r0, #0
    UINT16_TO_BSTREAM(pValue, pTbl[i]);
   13618:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   1361c:	7039      	strb	r1, [r7, #0]
   1361e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   13622:	0a1b      	lsrs	r3, r3, #8
   13624:	707b      	strb	r3, [r7, #1]
}
   13626:	b004      	add	sp, #16
   13628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ATT_ERR_VALUE_RANGE;
   1362c:	2080      	movs	r0, #128	; 0x80
}
   1362e:	b004      	add	sp, #16
   13630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ATT_ERR_RESOURCES;
   13634:	2011      	movs	r0, #17
}
   13636:	b004      	add	sp, #16
   13638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ATT_SUCCESS;
   1363c:	2000      	movs	r0, #0
}
   1363e:	b004      	add	sp, #16
   13640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13644:	0002669c 	.word	0x0002669c
   13648:	100041d0 	.word	0x100041d0

0001364c <AttsCccRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccRegister(uint8_t setLen, attsCccSet_t *pSet, attsCccCback_t cback)
{
  attsCccCb.setLen = setLen;
   1364c:	4b05      	ldr	r3, [pc, #20]	; (13664 <AttsCccRegister+0x18>)
{
   1364e:	b410      	push	{r4}
  attsCccCb.pSet = pSet;
  attsCccCb.cback = cback;

  attsCb.cccCback = attsCccMainCback;
   13650:	4c05      	ldr	r4, [pc, #20]	; (13668 <AttsCccRegister+0x1c>)
  attsCccCb.setLen = setLen;
   13652:	7518      	strb	r0, [r3, #20]
  attsCccCb.pSet = pSet;
   13654:	60d9      	str	r1, [r3, #12]
  attsCb.cccCback = attsCccMainCback;
   13656:	4905      	ldr	r1, [pc, #20]	; (1366c <AttsCccRegister+0x20>)
   13658:	6161      	str	r1, [r4, #20]
  attsCccCb.cback = cback;
   1365a:	611a      	str	r2, [r3, #16]
}
   1365c:	f85d 4b04 	ldr.w	r4, [sp], #4
   13660:	4770      	bx	lr
   13662:	bf00      	nop
   13664:	100041d0 	.word	0x100041d0
   13668:	1000424c 	.word	0x1000424c
   1366c:	00013545 	.word	0x00013545

00013670 <AttsCccInitTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccInitTable(dmConnId_t connId, uint16_t *pCccTbl)
{
   13670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13674:	4607      	mov	r7, r0
  if (attsCccCb.pCccTbl[connId - 1] == NULL)
   13676:	1e44      	subs	r4, r0, #1
   13678:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 1371c <AttsCccInitTable+0xac>
  uint8_t   i;
  uint16_t  *pTbl;

  ATT_TRACE_INFO1("AttsCccInitTable connId=%d", connId);
   1367c:	4826      	ldr	r0, [pc, #152]	; (13718 <AttsCccInitTable+0xa8>)
{
   1367e:	b084      	sub	sp, #16
   13680:	460d      	mov	r5, r1
  ATT_TRACE_INFO1("AttsCccInitTable connId=%d", connId);
   13682:	4639      	mov	r1, r7
   13684:	f00b f808 	bl	1e698 <WsfTrace>
  if (attsCccCb.pCccTbl[connId - 1] == NULL)
   13688:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   1368c:	b370      	cbz	r0, 136ec <AttsCccInitTable+0x7c>

  if ((pTbl = attsCccAllocTbl(connId)) != NULL)
  {
    /* if initializer table is passed in */
    if (pCccTbl != NULL)
   1368e:	2d00      	cmp	r5, #0
   13690:	d038      	beq.n	13704 <AttsCccInitTable+0x94>
    {
      /* initialize table */
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
   13692:	f89a 1014 	ldrb.w	r1, [sl, #20]
   13696:	b1f9      	cbz	r1, 136d8 <AttsCccInitTable+0x68>
   13698:	2400      	movs	r4, #0
   1369a:	3d02      	subs	r5, #2
   1369c:	1e86      	subs	r6, r0, #2
   1369e:	4622      	mov	r2, r4
  evt.hdr.event = ATTS_CCC_STATE_IND;
   136a0:	f04f 0910 	mov.w	r9, #16
  evt.handle = handle;
   136a4:	46a0      	mov	r8, r4
      {
        /* copy value */
        *pTbl = *pCccTbl;
   136a6:	f835 3f02 	ldrh.w	r3, [r5, #2]!
   136aa:	f826 3f02 	strh.w	r3, [r6, #2]!
  (*attsCccCb.cback)(&evt);
   136ae:	a801      	add	r0, sp, #4

        /* execute callback for each nonzero entry in table */
        if (*pCccTbl != 0)
   136b0:	b1ab      	cbz	r3, 136de <AttsCccInitTable+0x6e>
  evt.idx = idx;
   136b2:	f88d 200c 	strb.w	r2, [sp, #12]
  evt.hdr.event = ATTS_CCC_STATE_IND;
   136b6:	f88d 9006 	strb.w	r9, [sp, #6]
  (*attsCccCb.cback)(&evt);
   136ba:	f8da 2010 	ldr.w	r2, [sl, #16]
  evt.hdr.param = connId;
   136be:	f8ad 7004 	strh.w	r7, [sp, #4]
  evt.handle = handle;
   136c2:	f8ad 8008 	strh.w	r8, [sp, #8]
  evt.value = value;
   136c6:	f8ad 300a 	strh.w	r3, [sp, #10]
  (*attsCccCb.cback)(&evt);
   136ca:	4790      	blx	r2
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
   136cc:	3401      	adds	r4, #1
   136ce:	f89a 1014 	ldrb.w	r1, [sl, #20]
   136d2:	b2e2      	uxtb	r2, r4
   136d4:	4291      	cmp	r1, r2
   136d6:	d8e6      	bhi.n	136a6 <AttsCccInitTable+0x36>
    {
      /* initialize table to zero */
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
    }
  }
}
   136d8:	b004      	add	sp, #16
   136da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      for (i = 0; i < attsCccCb.setLen; i++, pCccTbl++, pTbl++)
   136de:	3401      	adds	r4, #1
   136e0:	b2e2      	uxtb	r2, r4
   136e2:	4291      	cmp	r1, r2
   136e4:	d8df      	bhi.n	136a6 <AttsCccInitTable+0x36>
}
   136e6:	b004      	add	sp, #16
   136e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    attsCccCb.pCccTbl[connId - 1] = WsfBufAlloc(attsCccCb.setLen * sizeof(uint16_t));
   136ec:	f89a 0014 	ldrb.w	r0, [sl, #20]
   136f0:	0040      	lsls	r0, r0, #1
   136f2:	f00a fbf1 	bl	1ded8 <WsfBufAlloc>
   136f6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
  if ((pTbl = attsCccAllocTbl(connId)) != NULL)
   136fa:	2800      	cmp	r0, #0
   136fc:	d1c7      	bne.n	1368e <AttsCccInitTable+0x1e>
}
   136fe:	b004      	add	sp, #16
   13700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
   13704:	f89a 2014 	ldrb.w	r2, [sl, #20]
   13708:	4629      	mov	r1, r5
   1370a:	0052      	lsls	r2, r2, #1
}
   1370c:	b004      	add	sp, #16
   1370e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      memset(pTbl, 0, (sizeof(uint16_t) * attsCccCb.setLen));
   13712:	f00f be13 	b.w	2333c <memset>
   13716:	bf00      	nop
   13718:	000266c4 	.word	0x000266c4
   1371c:	100041d0 	.word	0x100041d0

00013720 <AttsCccClearTable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsCccClearTable(dmConnId_t connId)
{
   13720:	b538      	push	{r3, r4, r5, lr}
  if (attsCccCb.pCccTbl[connId - 1] != NULL)
   13722:	1e45      	subs	r5, r0, #1
   13724:	4c06      	ldr	r4, [pc, #24]	; (13740 <AttsCccClearTable+0x20>)
{
   13726:	4601      	mov	r1, r0
  ATT_TRACE_INFO1("AttsCccClearTable connId=%d", connId);
   13728:	4806      	ldr	r0, [pc, #24]	; (13744 <AttsCccClearTable+0x24>)
   1372a:	f00a ffb5 	bl	1e698 <WsfTrace>
  if (attsCccCb.pCccTbl[connId - 1] != NULL)
   1372e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   13732:	b120      	cbz	r0, 1373e <AttsCccClearTable+0x1e>
    WsfBufFree(attsCccCb.pCccTbl[connId - 1]);
   13734:	f00a fc00 	bl	1df38 <WsfBufFree>
    attsCccCb.pCccTbl[connId - 1] = NULL;
   13738:	2300      	movs	r3, #0
   1373a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

  attsCccFreeTbl(connId);
}
   1373e:	bd38      	pop	{r3, r4, r5, pc}
   13740:	100041d0 	.word	0x100041d0
   13744:	000266e0 	.word	0x000266e0

00013748 <AttsCccGet>:
  return attsCccCb.pCccTbl[connId - 1];
   13748:	4b03      	ldr	r3, [pc, #12]	; (13758 <AttsCccGet+0x10>)
   1374a:	3801      	subs	r0, #1
   1374c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
{
  uint16_t      *pTbl;

  WSF_ASSERT(idx < attsCccCb.setLen);

  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   13750:	b108      	cbz	r0, 13756 <AttsCccGet+0xe>
  {
    /* return value from table */
    return pTbl[idx];
   13752:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
  }
  else
  {
    return 0;
  }
}
   13756:	4770      	bx	lr
   13758:	100041d0 	.word	0x100041d0

0001375c <AttsCccEnabled>:
 *
 *  \return Value of the descriptor if security level is met, otherwise zero.
 */
/*************************************************************************************************/
uint16_t AttsCccEnabled(dmConnId_t connId, uint8_t idx)
{
   1375c:	b538      	push	{r3, r4, r5, lr}
   1375e:	460c      	mov	r4, r1
   13760:	4605      	mov	r5, r0
  WSF_ASSERT(idx < attsCccCb.setLen);

  /* check security level */
  if (DmConnSecLevel(connId) < attsCccCb.pSet[idx].secLevel)
   13762:	f7f9 fe4b 	bl	d3fc <DmConnSecLevel>
   13766:	4b0a      	ldr	r3, [pc, #40]	; (13790 <AttsCccEnabled+0x34>)
   13768:	68d9      	ldr	r1, [r3, #12]
   1376a:	fa0f fc84 	sxth.w	ip, r4
   1376e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   13772:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   13776:	7922      	ldrb	r2, [r4, #4]
   13778:	4282      	cmp	r2, r0
   1377a:	d806      	bhi.n	1378a <AttsCccEnabled+0x2e>
  return attsCccCb.pCccTbl[connId - 1];
   1377c:	1e68      	subs	r0, r5, #1
   1377e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  if ((pTbl = attsCccGetTbl(connId)) != NULL)
   13782:	b108      	cbz	r0, 13788 <AttsCccEnabled+0x2c>
    return pTbl[idx];
   13784:	f830 001c 	ldrh.w	r0, [r0, ip, lsl #1]
    return 0;
  }

  /* get value */
  return AttsCccGet(connId, idx);
}
   13788:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   1378a:	2000      	movs	r0, #0
}
   1378c:	bd38      	pop	{r3, r4, r5, pc}
   1378e:	bf00      	nop
   13790:	100041d0 	.word	0x100041d0

00013794 <AttsGetCccTableLen>:
 *  \return  Number of CCC entries in table.
 */
/*************************************************************************************************/
uint8_t AttsGetCccTableLen(void)
{
  return attsCccCb.setLen;
   13794:	4b01      	ldr	r3, [pc, #4]	; (1379c <AttsGetCccTableLen+0x8>)
}
   13796:	7d18      	ldrb	r0, [r3, #20]
   13798:	4770      	bx	lr
   1379a:	bf00      	nop
   1379c:	100041d0 	.word	0x100041d0

000137a0 <attsCsfSetHashUpdateStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCsfSetHashUpdateStatus(bool_t isUpdating)
{
   137a0:	b510      	push	{r4, lr}
  if (attsCsfCb.isHashUpdating == isUpdating)
   137a2:	4c10      	ldr	r4, [pc, #64]	; (137e4 <attsCsfSetHashUpdateStatus+0x44>)
   137a4:	7b23      	ldrb	r3, [r4, #12]
   137a6:	4283      	cmp	r3, r0
   137a8:	d01a      	beq.n	137e0 <attsCsfSetHashUpdateStatus+0x40>
    return;
  }
  else
  {
    /* Update state. */
    attsCsfCb.isHashUpdating = isUpdating;
   137aa:	7320      	strb	r0, [r4, #12]
  }

  /* Update complete.
   * Check if clients were pending on the hash value and fulfill their requests.
   */
  if (isUpdating == FALSE)
   137ac:	b930      	cbnz	r0, 137bc <attsCsfSetHashUpdateStatus+0x1c>
  {
    ATT_TRACE_INFO0("Database hash calculation complete");
   137ae:	480e      	ldr	r0, [pc, #56]	; (137e8 <attsCsfSetHashUpdateStatus+0x48>)
   137b0:	f00a ff72 	bl	1e698 <WsfTrace>
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
      }
    }
  }
}
   137b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    attsCheckPendDbHashReadRsp();
   137b8:	f000 bc1e 	b.w	13ff8 <attsCheckPendDbHashReadRsp>
    ATT_TRACE_INFO0("Calculating database hash");
   137bc:	480b      	ldr	r0, [pc, #44]	; (137ec <attsCsfSetHashUpdateStatus+0x4c>)
   137be:	f00a ff6b 	bl	1e698 <WsfTrace>
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   137c2:	7863      	ldrb	r3, [r4, #1]
   137c4:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   137c6:	bf04      	itt	eq
   137c8:	2301      	moveq	r3, #1
   137ca:	7063      	strbeq	r3, [r4, #1]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   137cc:	78e3      	ldrb	r3, [r4, #3]
   137ce:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   137d0:	bf04      	itt	eq
   137d2:	2301      	moveq	r3, #1
   137d4:	70e3      	strbeq	r3, [r4, #3]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   137d6:	7963      	ldrb	r3, [r4, #5]
   137d8:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   137da:	bf04      	itt	eq
   137dc:	2301      	moveq	r3, #1
   137de:	7163      	strbeq	r3, [r4, #5]
}
   137e0:	bd10      	pop	{r4, pc}
   137e2:	bf00      	nop
   137e4:	100041e8 	.word	0x100041e8
   137e8:	000266fc 	.word	0x000266fc
   137ec:	00026720 	.word	0x00026720

000137f0 <attsCsfGetHashUpdateStatus>:
*  \return \ref TRUE if update in progress, \ref FALSE otherwise.
*/
/*************************************************************************************************/
uint8_t attsCsfGetHashUpdateStatus(void)
{
  return attsCsfCb.isHashUpdating;
   137f0:	4b01      	ldr	r3, [pc, #4]	; (137f8 <attsCsfGetHashUpdateStatus+0x8>)
}
   137f2:	7b18      	ldrb	r0, [r3, #12]
   137f4:	4770      	bx	lr
   137f6:	bf00      	nop
   137f8:	100041e8 	.word	0x100041e8

000137fc <attsCsfIsClientChangeAware>:
 *  \return \ref TRUE if client is aware, otherwise \ref FALSE.
 */
/*************************************************************************************************/
uint8_t attsCsfIsClientChangeAware(dmConnId_t connId, uint16_t handle)
{
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
   137fc:	1e42      	subs	r2, r0, #1
{
   137fe:	b410      	push	{r4}
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
   13800:	4c0c      	ldr	r4, [pc, #48]	; (13834 <attsCsfIsClientChangeAware+0x38>)
   13802:	f814 3012 	ldrb.w	r3, [r4, r2, lsl #1]
   13806:	f013 0001 	ands.w	r0, r3, #1
   1380a:	d007      	beq.n	1381c <attsCsfIsClientChangeAware+0x20>
      (attsCsfCb.attsCsfTable[connId - 1].changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE) &&
   1380c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
  if ((attsCsfCb.attsCsfTable[connId - 1].csf & ATTS_CSF_ROBUST_CACHING) &&
   13810:	7853      	ldrb	r3, [r2, #1]
   13812:	2b03      	cmp	r3, #3
   13814:	d006      	beq.n	13824 <attsCsfIsClientChangeAware+0x28>
  {
    return FALSE;
  }

  return TRUE;
}
   13816:	f85d 4b04 	ldr.w	r4, [sp], #4
   1381a:	4770      	bx	lr
  return TRUE;
   1381c:	2001      	movs	r0, #1
}
   1381e:	f85d 4b04 	ldr.w	r4, [sp], #4
   13822:	4770      	bx	lr
    return FALSE;
   13824:	f1a1 0012 	sub.w	r0, r1, #18
   13828:	fab0 f080 	clz	r0, r0
   1382c:	0940      	lsrs	r0, r0, #5
}
   1382e:	f85d 4b04 	ldr.w	r4, [sp], #4
   13832:	4770      	bx	lr
   13834:	100041e8 	.word	0x100041e8

00013838 <attsCsfActClientState>:
{
  uint8_t err = ATT_SUCCESS;
  attsCsfRec_t *pRec;

  /* PDU which do not operate on att handles are handled agnostically of the client's state. */
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
   13838:	2902      	cmp	r1, #2
   1383a:	d04a      	beq.n	138d2 <attsCsfActClientState+0x9a>
   1383c:	291e      	cmp	r1, #30
{
   1383e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13842:	460c      	mov	r4, r1
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
   13844:	d00e      	beq.n	13864 <attsCsfActClientState+0x2c>
  }

  pRec = &attsCsfCb.attsCsfTable[handle];

  /* If the client is change-unaware */
  if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   13846:	4f2e      	ldr	r7, [pc, #184]	; (13900 <attsCsfActClientState+0xc8>)
   13848:	eb07 0840 	add.w	r8, r7, r0, lsl #1
   1384c:	4605      	mov	r5, r0
   1384e:	f898 3001 	ldrb.w	r3, [r8, #1]
   13852:	2b03      	cmp	r3, #3
   13854:	4616      	mov	r6, r2
   13856:	ea4f 0940 	mov.w	r9, r0, lsl #1
   1385a:	d006      	beq.n	1386a <attsCsfActClientState+0x32>
    {
      /* return a database out of sync error */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    }
  }
  else if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_PENDING_AWARE)
   1385c:	2b01      	cmp	r3, #1
   1385e:	d03a      	beq.n	138d6 <attsCsfActClientState+0x9e>
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    }
  }

  /* If this is Read by Type request */
  if (opcode == ATT_PDU_READ_TYPE_REQ)
   13860:	2c08      	cmp	r4, #8
   13862:	d016      	beq.n	13892 <attsCsfActClientState+0x5a>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));

    /* If this is a Read By Type Request of the Database Hash characteristic value */
    if (uuid == ATT_UUID_DATABASE_HASH)
    {
      err = ATT_SUCCESS;
   13864:	2000      	movs	r0, #0
  {
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
  }

  return err;
}
   13866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   1386a:	064a      	lsls	r2, r1, #25
   1386c:	d525      	bpl.n	138ba <attsCsfActClientState+0x82>
  if (opcode == ATT_PDU_READ_TYPE_REQ)
   1386e:	2c08      	cmp	r4, #8
   13870:	d108      	bne.n	13884 <attsCsfActClientState+0x4c>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
   13872:	7bb2      	ldrb	r2, [r6, #14]
   13874:	7b73      	ldrb	r3, [r6, #13]
   13876:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if (uuid == ATT_UUID_DATABASE_HASH)
   1387a:	b29b      	uxth	r3, r3
   1387c:	f642 322a 	movw	r2, #11050	; 0x2b2a
   13880:	4293      	cmp	r3, r2
   13882:	d00f      	beq.n	138a4 <attsCsfActClientState+0x6c>
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
   13884:	481f      	ldr	r0, [pc, #124]	; (13904 <attsCsfActClientState+0xcc>)
   13886:	4622      	mov	r2, r4
   13888:	1c69      	adds	r1, r5, #1
   1388a:	f00a ff05 	bl	1e698 <WsfTrace>
   1388e:	2012      	movs	r0, #18
   13890:	e7e9      	b.n	13866 <attsCsfActClientState+0x2e>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
   13892:	7bb2      	ldrb	r2, [r6, #14]
   13894:	7b73      	ldrb	r3, [r6, #13]
   13896:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if (uuid == ATT_UUID_DATABASE_HASH)
   1389a:	b29b      	uxth	r3, r3
   1389c:	f642 322a 	movw	r2, #11050	; 0x2b2a
   138a0:	4293      	cmp	r3, r2
   138a2:	d1df      	bne.n	13864 <attsCsfActClientState+0x2c>
      if (attsCsfCb.isHashUpdating)
   138a4:	7b3b      	ldrb	r3, [r7, #12]
   138a6:	2b00      	cmp	r3, #0
   138a8:	d0dc      	beq.n	13864 <attsCsfActClientState+0x2c>
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
   138aa:	444f      	add	r7, r9
   138ac:	2202      	movs	r2, #2
        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   138ae:	4816      	ldr	r0, [pc, #88]	; (13908 <attsCsfActClientState+0xd0>)
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
   138b0:	707a      	strb	r2, [r7, #1]
        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   138b2:	1c69      	adds	r1, r5, #1
   138b4:	f00a fef0 	bl	1e698 <WsfTrace>
   138b8:	e7d4      	b.n	13864 <attsCsfActClientState+0x2c>
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   138ba:	2201      	movs	r2, #1
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   138bc:	4812      	ldr	r0, [pc, #72]	; (13908 <attsCsfActClientState+0xd0>)
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   138be:	f888 2001 	strb.w	r2, [r8, #1]
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   138c2:	18a9      	adds	r1, r5, r2
   138c4:	f00a fee8 	bl	1e698 <WsfTrace>
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
   138c8:	f817 3015 	ldrb.w	r3, [r7, r5, lsl #1]
   138cc:	07db      	lsls	r3, r3, #31
   138ce:	d4ce      	bmi.n	1386e <attsCsfActClientState+0x36>
   138d0:	e7c6      	b.n	13860 <attsCsfActClientState+0x28>
    return err;
   138d2:	2000      	movs	r0, #0
}
   138d4:	4770      	bx	lr
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   138d6:	f011 0240 	ands.w	r2, r1, #64	; 0x40
   138da:	d1c8      	bne.n	1386e <attsCsfActClientState+0x36>
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
   138dc:	f100 0a01 	add.w	sl, r0, #1
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE;
   138e0:	f888 2001 	strb.w	r2, [r8, #1]
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
   138e4:	4808      	ldr	r0, [pc, #32]	; (13908 <attsCsfActClientState+0xd0>)
   138e6:	4651      	mov	r1, sl
   138e8:	f00a fed6 	bl	1e698 <WsfTrace>
      if (attsCsfCb.writeCback != NULL)
   138ec:	68bb      	ldr	r3, [r7, #8]
   138ee:	2b00      	cmp	r3, #0
   138f0:	d0b6      	beq.n	13860 <attsCsfActClientState+0x28>
        attsCsfCb.writeCback(handle + 1, pRec->changeAwareState, &pRec->csf);
   138f2:	f898 1001 	ldrb.w	r1, [r8, #1]
   138f6:	fa5f f08a 	uxtb.w	r0, sl
   138fa:	4642      	mov	r2, r8
   138fc:	4798      	blx	r3
   138fe:	e7af      	b.n	13860 <attsCsfActClientState+0x28>
   13900:	100041e8 	.word	0x100041e8
   13904:	00026760 	.word	0x00026760
   13908:	0002673c 	.word	0x0002673c

0001390c <AttsCsfSetClientsChangeAwarenessState>:
 *  \note A callback to application is not needed as it is expected the caller (i.e. the
 *        application) will have updated all persistent records prior to calling this function.
 */
/*************************************************************************************************/
void AttsCsfSetClientsChangeAwarenessState(dmConnId_t connId, uint8_t state)
{
   1390c:	460a      	mov	r2, r1
  if (connId == DM_CONN_ID_NONE)
  {
    for (uint8_t i = 0; i < DM_CONN_MAX; i++)
    {
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   1390e:	4b0f      	ldr	r3, [pc, #60]	; (1394c <AttsCsfSetClientsChangeAwarenessState+0x40>)
  if (connId == DM_CONN_ID_NONE)
   13910:	4601      	mov	r1, r0
   13912:	b998      	cbnz	r0, 1393c <AttsCsfSetClientsChangeAwarenessState+0x30>
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   13914:	7858      	ldrb	r0, [r3, #1]
   13916:	78d9      	ldrb	r1, [r3, #3]
   13918:	f893 c005 	ldrb.w	ip, [r3, #5]
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   1391c:	2802      	cmp	r0, #2
   1391e:	bf14      	ite	ne
   13920:	4610      	movne	r0, r2
   13922:	2001      	moveq	r0, #1
   13924:	2902      	cmp	r1, #2
   13926:	bf14      	ite	ne
   13928:	4611      	movne	r1, r2
   1392a:	2101      	moveq	r1, #1
   1392c:	f1bc 0f02 	cmp.w	ip, #2
   13930:	bf08      	it	eq
   13932:	2201      	moveq	r2, #1
   13934:	7058      	strb	r0, [r3, #1]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   13936:	70d9      	strb	r1, [r3, #3]
   13938:	715a      	strb	r2, [r3, #5]
  {
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;

    ATT_TRACE_INFO2("ConnId %d change aware state is %d", connId, state);
  }
}
   1393a:	4770      	bx	lr
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;
   1393c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    ATT_TRACE_INFO2("ConnId %d change aware state is %d", connId, state);
   13940:	4803      	ldr	r0, [pc, #12]	; (13950 <AttsCsfSetClientsChangeAwarenessState+0x44>)
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = state;
   13942:	f803 2c01 	strb.w	r2, [r3, #-1]
    ATT_TRACE_INFO2("ConnId %d change aware state is %d", connId, state);
   13946:	f00a bea7 	b.w	1e698 <WsfTrace>
   1394a:	bf00      	nop
   1394c:	100041e8 	.word	0x100041e8
   13950:	0002673c 	.word	0x0002673c

00013954 <AttsCsfConnOpen>:
/*************************************************************************************************/
void AttsCsfConnOpen(dmConnId_t connId, uint8_t changeAwareState, uint8_t *pCsf)
{
  if (pCsf != NULL)
  {
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = changeAwareState;
   13954:	4b06      	ldr	r3, [pc, #24]	; (13970 <AttsCsfConnOpen+0x1c>)
   13956:	3801      	subs	r0, #1
  if (pCsf != NULL)
   13958:	b13a      	cbz	r2, 1396a <AttsCsfConnOpen+0x16>
    attsCsfCb.attsCsfTable[connId - 1].changeAwareState = changeAwareState;
   1395a:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
   1395e:	f88c 1001 	strb.w	r1, [ip, #1]
    memcpy(&attsCsfCb.attsCsfTable[connId - 1].csf, pCsf, ATT_CSF_LEN);
   13962:	7812      	ldrb	r2, [r2, #0]
   13964:	f803 2010 	strb.w	r2, [r3, r0, lsl #1]
   13968:	4770      	bx	lr
  }
  else
  {
    /* Note: this set client to the change-aware state. */
    memset(&attsCsfCb.attsCsfTable[connId - 1], 0, sizeof(attsCsfRec_t));
   1396a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
  }
}
   1396e:	4770      	bx	lr
   13970:	100041e8 	.word	0x100041e8

00013974 <AttsCsfGetFeatures>:
 *  \return None.
 */
/*************************************************************************************************/
void AttsCsfGetFeatures(dmConnId_t connId, uint8_t *pCsfOut, uint8_t pCsfOutLen)
{
  if (pCsfOutLen <= ATT_CSF_LEN)
   13974:	2a01      	cmp	r2, #1
{
   13976:	468c      	mov	ip, r1
  if (pCsfOutLen <= ATT_CSF_LEN)
   13978:	d900      	bls.n	1397c <AttsCsfGetFeatures+0x8>
  {
    memcpy(pCsfOut, &attsCsfCb.attsCsfTable[connId - 1].csf, pCsfOutLen);
  }
}
   1397a:	4770      	bx	lr
    memcpy(pCsfOut, &attsCsfCb.attsCsfTable[connId - 1].csf, pCsfOutLen);
   1397c:	4903      	ldr	r1, [pc, #12]	; (1398c <AttsCsfGetFeatures+0x18>)
   1397e:	3801      	subs	r0, #1
   13980:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   13984:	4660      	mov	r0, ip
   13986:	f7f8 bbbb 	b.w	c100 <memcpy>
   1398a:	bf00      	nop
   1398c:	100041e8 	.word	0x100041e8

00013990 <AttsCsfGetChangeAwareState>:
 *  \return Client's change-aware state.
 */
/*************************************************************************************************/
uint8_t AttsCsfGetChangeAwareState(dmConnId_t connId)
{
  return attsCsfCb.attsCsfTable[connId - 1].changeAwareState;
   13990:	4b02      	ldr	r3, [pc, #8]	; (1399c <AttsCsfGetChangeAwareState+0xc>)
   13992:	eb03 0040 	add.w	r0, r3, r0, lsl #1
}
   13996:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   1399a:	4770      	bx	lr
   1399c:	100041e8 	.word	0x100041e8

000139a0 <attsIndMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndMsgCback(attsApiMsg_t *pMsg)
{
   139a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attsIndCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   139a4:	7804      	ldrb	r4, [r0, #0]
{
   139a6:	b082      	sub	sp, #8
   139a8:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
   139aa:	4620      	mov	r0, r4
   139ac:	f7f9 fce0 	bl	d370 <DmConnInUse>
   139b0:	2800      	cmp	r0, #0
   139b2:	d03b      	beq.n	13a2c <attsIndMsgCback+0x8c>
    /* ignore if connection not in use */
    return;
  }

  /* if an API message to send packet */
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   139b4:	78ab      	ldrb	r3, [r5, #2]
   139b6:	2b21      	cmp	r3, #33	; 0x21
    return &attsIndCb.ccb[connId - 1];
   139b8:	f104 34ff 	add.w	r4, r4, #4294967295
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   139bc:	d004      	beq.n	139c8 <attsIndMsgCback+0x28>
    {
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
    }
  }
  /* else if indication timeout */
  else if (pMsg->hdr.event == ATTS_MSG_IND_TIMEOUT)
   139be:	2b22      	cmp	r3, #34	; 0x22
   139c0:	d01c      	beq.n	139fc <attsIndMsgCback+0x5c>
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pCcb->pendIndHandle, ATT_ERR_TIMEOUT);
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
    }
  }
}
   139c2:	b002      	add	sp, #8
   139c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
   139c8:	686b      	ldr	r3, [r5, #4]
  if (opcode == ATT_PDU_VALUE_IND)
   139ca:	7a1a      	ldrb	r2, [r3, #8]
   139cc:	2a1d      	cmp	r2, #29
   139ce:	d049      	beq.n	13a64 <attsIndMsgCback+0xc4>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   139d0:	4939      	ldr	r1, [pc, #228]	; (13ab8 <attsIndMsgCback+0x118>)
   139d2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   139d6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   139da:	8b22      	ldrh	r2, [r4, #24]
   139dc:	2a00      	cmp	r2, #0
   139de:	d02f      	beq.n	13a40 <attsIndMsgCback+0xa0>
  handle = pPkt->handle;
   139e0:	885a      	ldrh	r2, [r3, #2]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   139e2:	7828      	ldrb	r0, [r5, #0]
   139e4:	2300      	movs	r3, #0
   139e6:	9300      	str	r3, [sp, #0]
   139e8:	210f      	movs	r1, #15
   139ea:	2372      	movs	r3, #114	; 0x72
   139ec:	f001 fe9a 	bl	15724 <attExecCallback>
      WsfMsgFree(pMsg->pPkt);
   139f0:	6868      	ldr	r0, [r5, #4]
}
   139f2:	b002      	add	sp, #8
   139f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      WsfMsgFree(pMsg->pPkt);
   139f8:	f00a bad6 	b.w	1dfa8 <WsfMsgFree>
    if (pCcb->outIndHandle != ATT_HANDLE_NONE)
   139fc:	4b2e      	ldr	r3, [pc, #184]	; (13ab8 <attsIndMsgCback+0x118>)
   139fe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13a02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   13a06:	8aa3      	ldrh	r3, [r4, #20]
   13a08:	2b00      	cmp	r3, #0
   13a0a:	d0da      	beq.n	139c2 <attsIndMsgCback+0x22>
      pCcb->outIndHandle = ATT_HANDLE_NONE;
   13a0c:	2600      	movs	r6, #0
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13a0e:	8ae2      	ldrh	r2, [r4, #22]
   13a10:	7828      	ldrb	r0, [r5, #0]
   13a12:	9600      	str	r6, [sp, #0]
   13a14:	2371      	movs	r3, #113	; 0x71
      pCcb->outIndHandle = ATT_HANDLE_NONE;
   13a16:	82a6      	strh	r6, [r4, #20]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13a18:	210f      	movs	r1, #15
   13a1a:	f001 fe83 	bl	15724 <attExecCallback>
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   13a1e:	6922      	ldr	r2, [r4, #16]
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
   13a20:	82e6      	strh	r6, [r4, #22]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   13a22:	7f53      	ldrb	r3, [r2, #29]
   13a24:	f043 0304 	orr.w	r3, r3, #4
   13a28:	7753      	strb	r3, [r2, #29]
   13a2a:	e7ca      	b.n	139c2 <attsIndMsgCback+0x22>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   13a2c:	4823      	ldr	r0, [pc, #140]	; (13abc <attsIndMsgCback+0x11c>)
   13a2e:	4621      	mov	r1, r4
   13a30:	f00a fe32 	bl	1e698 <WsfTrace>
    if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   13a34:	78ab      	ldrb	r3, [r5, #2]
   13a36:	2b21      	cmp	r3, #33	; 0x21
   13a38:	d0da      	beq.n	139f0 <attsIndMsgCback+0x50>
}
   13a3a:	b002      	add	sp, #8
   13a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   13a40:	6922      	ldr	r2, [r4, #16]
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
   13a42:	882e      	ldrh	r6, [r5, #0]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   13a44:	8b11      	ldrh	r1, [r2, #24]
   13a46:	881a      	ldrh	r2, [r3, #0]
  handle = pPkt->handle;
   13a48:	885d      	ldrh	r5, [r3, #2]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   13a4a:	2004      	movs	r0, #4
   13a4c:	f006 f804 	bl	19a58 <L2cDataReq>
  else if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   13a50:	6923      	ldr	r3, [r4, #16]
   13a52:	7f5b      	ldrb	r3, [r3, #29]
   13a54:	f013 0302 	ands.w	r3, r3, #2
   13a58:	d026      	beq.n	13aa8 <attsIndMsgCback+0x108>
    if (pCcb->pendNtfHandle[i] == ATT_HANDLE_NONE)
   13a5a:	8b23      	ldrh	r3, [r4, #24]
   13a5c:	2b00      	cmp	r3, #0
   13a5e:	d1b0      	bne.n	139c2 <attsIndMsgCback+0x22>
      pCcb->pendNtfHandle[i] = handle;
   13a60:	8325      	strh	r5, [r4, #24]
      break;
   13a62:	e7ae      	b.n	139c2 <attsIndMsgCback+0x22>
    return (pCcb->pendIndHandle == ATT_HANDLE_NONE) ? FALSE : TRUE;
   13a64:	4f14      	ldr	r7, [pc, #80]	; (13ab8 <attsIndMsgCback+0x118>)
   13a66:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13a6a:	ea4f 0884 	mov.w	r8, r4, lsl #2
   13a6e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
   13a72:	8ae6      	ldrh	r6, [r4, #22]
   13a74:	2e00      	cmp	r6, #0
   13a76:	d1b3      	bne.n	139e0 <attsIndMsgCback+0x40>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   13a78:	6922      	ldr	r2, [r4, #16]
  handle = pPkt->handle;
   13a7a:	885d      	ldrh	r5, [r3, #2]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   13a7c:	8b11      	ldrh	r1, [r2, #24]
   13a7e:	881a      	ldrh	r2, [r3, #0]
   13a80:	2004      	movs	r0, #4
   13a82:	f005 ffe9 	bl	19a58 <L2cDataReq>
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   13a86:	4b0e      	ldr	r3, [pc, #56]	; (13ac0 <attsIndMsgCback+0x120>)
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   13a88:	4447      	add	r7, r8
   13a8a:	f365 060f 	bfi	r6, r5, #0, #16
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   13a8e:	681b      	ldr	r3, [r3, #0]
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   13a90:	f365 461f 	bfi	r6, r5, #16, #16
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
   13a94:	2222      	movs	r2, #34	; 0x22
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   13a96:	617e      	str	r6, [r7, #20]
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
   13a98:	72a2      	strb	r2, [r4, #10]
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   13a9a:	7999      	ldrb	r1, [r3, #6]
   13a9c:	4620      	mov	r0, r4
}
   13a9e:	b002      	add	sp, #8
   13aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   13aa4:	f00a bcd2 	b.w	1e44c <WsfTimerStartSec>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13aa8:	9300      	str	r3, [sp, #0]
   13aaa:	462a      	mov	r2, r5
   13aac:	210f      	movs	r1, #15
   13aae:	b2f0      	uxtb	r0, r6
   13ab0:	f001 fe38 	bl	15724 <attExecCallback>
}
   13ab4:	e785      	b.n	139c2 <attsIndMsgCback+0x22>
   13ab6:	bf00      	nop
   13ab8:	100041f8 	.word	0x100041f8
   13abc:	00026798 	.word	0x00026798
   13ac0:	10002c2c 	.word	0x10002c2c

00013ac4 <attsIndConnCback>:
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   13ac4:	788b      	ldrb	r3, [r1, #2]
   13ac6:	2b28      	cmp	r3, #40	; 0x28
   13ac8:	d000      	beq.n	13acc <attsIndConnCback+0x8>
   13aca:	4770      	bx	lr
{
   13acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   13ad0:	78cb      	ldrb	r3, [r1, #3]
{
   13ad2:	b084      	sub	sp, #16
   13ad4:	4604      	mov	r4, r0
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   13ad6:	b1fb      	cbz	r3, 13b18 <attsIndConnCback+0x54>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   13ad8:	3320      	adds	r3, #32
   13ada:	b2db      	uxtb	r3, r3
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
   13adc:	7f20      	ldrb	r0, [r4, #28]
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   13ade:	4d1c      	ldr	r5, [pc, #112]	; (13b50 <attsIndConnCback+0x8c>)
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
   13ae0:	1e46      	subs	r6, r0, #1
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   13ae2:	ebc6 08c6 	rsb	r8, r6, r6, lsl #3
   13ae6:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   13aea:	00f7      	lsls	r7, r6, #3
   13aec:	f8b8 2014 	ldrh.w	r2, [r8, #20]
   13af0:	bb22      	cbnz	r2, 13b3c <attsIndConnCback+0x78>
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   13af2:	1bbc      	subs	r4, r7, r6
   13af4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   13af8:	8ae2      	ldrh	r2, [r4, #22]
   13afa:	b98a      	cbnz	r2, 13b20 <attsIndConnCback+0x5c>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   13afc:	1bbe      	subs	r6, r7, r6
   13afe:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   13b02:	8b2a      	ldrh	r2, [r5, #24]
   13b04:	b12a      	cbz	r2, 13b12 <attsIndConnCback+0x4e>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13b06:	2400      	movs	r4, #0
   13b08:	9400      	str	r4, [sp, #0]
   13b0a:	210f      	movs	r1, #15
   13b0c:	f001 fe0a 	bl	15724 <attExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
   13b10:	832c      	strh	r4, [r5, #24]
}
   13b12:	b004      	add	sp, #16
   13b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   13b18:	7a0b      	ldrb	r3, [r1, #8]
   13b1a:	3320      	adds	r3, #32
   13b1c:	b2db      	uxtb	r3, r3
   13b1e:	e7dd      	b.n	13adc <attsIndConnCback+0x18>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13b20:	f04f 0800 	mov.w	r8, #0
   13b24:	f8cd 8000 	str.w	r8, [sp]
   13b28:	210f      	movs	r1, #15
   13b2a:	9303      	str	r3, [sp, #12]
   13b2c:	9002      	str	r0, [sp, #8]
   13b2e:	f001 fdf9 	bl	15724 <attExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
   13b32:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   13b36:	f8a4 8016 	strh.w	r8, [r4, #22]
   13b3a:	e7df      	b.n	13afc <attsIndConnCback+0x38>
      WsfTimerStop(&pIndCcb->outIndTimer);
   13b3c:	4640      	mov	r0, r8
   13b3e:	9302      	str	r3, [sp, #8]
   13b40:	f00a fd0a 	bl	1e558 <WsfTimerStop>
      pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   13b44:	2200      	movs	r2, #0
   13b46:	f8a8 2014 	strh.w	r2, [r8, #20]
    attsIndNtfCallback(pCcb->connId, pIndCcb, status);
   13b4a:	7f20      	ldrb	r0, [r4, #28]
   13b4c:	9b02      	ldr	r3, [sp, #8]
   13b4e:	e7d0      	b.n	13af2 <attsIndConnCback+0x2e>
   13b50:	100041f8 	.word	0x100041f8

00013b54 <attsIndCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndCtrlCback(wsfMsgHdr_t *pMsg)
{
   13b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attsIndCcb_t   *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   13b58:	7804      	ldrb	r4, [r0, #0]
{
   13b5a:	b084      	sub	sp, #16
   13b5c:	4606      	mov	r6, r0
  if (DmConnInUse(connId))
   13b5e:	4620      	mov	r0, r4
   13b60:	f7f9 fc06 	bl	d370 <DmConnInUse>
   13b64:	b328      	cbz	r0, 13bb2 <attsIndCtrlCback+0x5e>
    return &attsIndCb.ccb[connId - 1];
   13b66:	3c01      	subs	r4, #1
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   13b68:	4d15      	ldr	r5, [pc, #84]	; (13bc0 <attsIndCtrlCback+0x6c>)
  {
    /* call pending indication and notification callback */
    attsIndNtfCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   13b6a:	7830      	ldrb	r0, [r6, #0]
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   13b6c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   13b70:	eb05 0787 	add.w	r7, r5, r7, lsl #2
   13b74:	00e6      	lsls	r6, r4, #3
   13b76:	8afa      	ldrh	r2, [r7, #22]
   13b78:	b972      	cbnz	r2, 13b98 <attsIndCtrlCback+0x44>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   13b7a:	1b34      	subs	r4, r6, r4
   13b7c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   13b80:	8b2a      	ldrh	r2, [r5, #24]
   13b82:	b132      	cbz	r2, 13b92 <attsIndCtrlCback+0x3e>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13b84:	2400      	movs	r4, #0
   13b86:	9400      	str	r4, [sp, #0]
   13b88:	4623      	mov	r3, r4
   13b8a:	210f      	movs	r1, #15
   13b8c:	f001 fdca 	bl	15724 <attExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
   13b90:	832c      	strh	r4, [r5, #24]
  }
}
   13b92:	b004      	add	sp, #16
   13b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13b98:	f04f 0800 	mov.w	r8, #0
   13b9c:	f8cd 8000 	str.w	r8, [sp]
   13ba0:	4643      	mov	r3, r8
   13ba2:	210f      	movs	r1, #15
   13ba4:	9003      	str	r0, [sp, #12]
   13ba6:	f001 fdbd 	bl	15724 <attExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
   13baa:	9803      	ldr	r0, [sp, #12]
   13bac:	f8a7 8016 	strh.w	r8, [r7, #22]
   13bb0:	e7e3      	b.n	13b7a <attsIndCtrlCback+0x26>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   13bb2:	4804      	ldr	r0, [pc, #16]	; (13bc4 <attsIndCtrlCback+0x70>)
   13bb4:	4621      	mov	r1, r4
}
   13bb6:	b004      	add	sp, #16
   13bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   13bbc:	f00a bd6c 	b.w	1e698 <WsfTrace>
   13bc0:	100041f8 	.word	0x100041f8
   13bc4:	00026798 	.word	0x00026798

00013bc8 <attsProcValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcValueCnf(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   13bc8:	b570      	push	{r4, r5, r6, lr}
  attsIndCcb_t    *pIndCcb;

  /* get server indication CCB */
  if ((pIndCcb = attsIndCcbByConnId(pCcb->connId)) == NULL)
   13bca:	7f04      	ldrb	r4, [r0, #28]
{
   13bcc:	b082      	sub	sp, #8
   13bce:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
   13bd0:	4620      	mov	r0, r4
   13bd2:	f7f9 fbcd 	bl	d370 <DmConnInUse>
   13bd6:	b1d8      	cbz	r0, 13c10 <attsProcValueCnf+0x48>
  {
    return;
  }

  /* if an outstanding indication */
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   13bd8:	4911      	ldr	r1, [pc, #68]	; (13c20 <attsProcValueCnf+0x58>)
    return &attsIndCb.ccb[connId - 1];
   13bda:	3c01      	subs	r4, #1
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   13bdc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13be0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   13be4:	8aa3      	ldrh	r3, [r4, #20]
   13be6:	b90b      	cbnz	r3, 13bec <attsProcValueCnf+0x24>
    {
      attsExecCallback(pCcb->connId, pIndCcb->pendIndHandle, ATT_SUCCESS);
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
    }
  }
}
   13be8:	b002      	add	sp, #8
   13bea:	bd70      	pop	{r4, r5, r6, pc}
    pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   13bec:	2300      	movs	r3, #0
   13bee:	82a3      	strh	r3, [r4, #20]
    WsfTimerStop(&pIndCcb->outIndTimer);
   13bf0:	4620      	mov	r0, r4
   13bf2:	f00a fcb1 	bl	1e558 <WsfTimerStop>
    if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   13bf6:	7f6b      	ldrb	r3, [r5, #29]
   13bf8:	f013 0602 	ands.w	r6, r3, #2
   13bfc:	d1f4      	bne.n	13be8 <attsProcValueCnf+0x20>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13bfe:	8ae2      	ldrh	r2, [r4, #22]
   13c00:	7f28      	ldrb	r0, [r5, #28]
   13c02:	9600      	str	r6, [sp, #0]
   13c04:	4633      	mov	r3, r6
   13c06:	210f      	movs	r1, #15
   13c08:	f001 fd8c 	bl	15724 <attExecCallback>
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
   13c0c:	82e6      	strh	r6, [r4, #22]
   13c0e:	e7eb      	b.n	13be8 <attsProcValueCnf+0x20>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   13c10:	4804      	ldr	r0, [pc, #16]	; (13c24 <attsProcValueCnf+0x5c>)
   13c12:	4621      	mov	r1, r4
}
   13c14:	b002      	add	sp, #8
   13c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   13c1a:	f00a bd3d 	b.w	1e698 <WsfTrace>
   13c1e:	bf00      	nop
   13c20:	100041f8 	.word	0x100041f8
   13c24:	00026798 	.word	0x00026798

00013c28 <AttsIndInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsIndInit(void)
{
   13c28:	b410      	push	{r4}

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
   13c2a:	4b0e      	ldr	r3, [pc, #56]	; (13c64 <AttsIndInit+0x3c>)

    /* initialize timer */
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   13c2c:	4a0e      	ldr	r2, [pc, #56]	; (13c68 <AttsIndInit+0x40>)
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
  }

  /* set up callback interface */
  attsCb.pInd = &attsIndFcnIf;
   13c2e:	480f      	ldr	r0, [pc, #60]	; (13c6c <AttsIndInit+0x44>)
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   13c30:	f892 107c 	ldrb.w	r1, [r2, #124]	; 0x7c
    pCcb->pMainCcb = &attCb.ccb[i];
   13c34:	611a      	str	r2, [r3, #16]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   13c36:	2401      	movs	r4, #1
   13c38:	811c      	strh	r4, [r3, #8]
    pCcb->pMainCcb = &attCb.ccb[i];
   13c3a:	f102 0424 	add.w	r4, r2, #36	; 0x24
   13c3e:	62dc      	str	r4, [r3, #44]	; 0x2c
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   13c40:	2402      	movs	r4, #2
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   13c42:	7319      	strb	r1, [r3, #12]
    pCcb->pMainCcb = &attCb.ccb[i];
   13c44:	3248      	adds	r2, #72	; 0x48
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   13c46:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   13c4a:	849c      	strh	r4, [r3, #36]	; 0x24
   13c4c:	f04f 0c03 	mov.w	ip, #3
  attsCb.pInd = &attsIndFcnIf;
   13c50:	4c07      	ldr	r4, [pc, #28]	; (13c70 <AttsIndInit+0x48>)
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   13c52:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
  attsCb.pInd = &attsIndFcnIf;
   13c56:	6084      	str	r4, [r0, #8]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   13c58:	f8a3 c040 	strh.w	ip, [r3, #64]	; 0x40
}
   13c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pCcb->pMainCcb = &attCb.ccb[i];
   13c60:	649a      	str	r2, [r3, #72]	; 0x48
}
   13c62:	4770      	bx	lr
   13c64:	100041f8 	.word	0x100041f8
   13c68:	100042a0 	.word	0x100042a0
   13c6c:	1000424c 	.word	0x1000424c
   13c70:	000267b0 	.word	0x000267b0

00013c74 <AttsHandleValueInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsHandleValueInd(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   13c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13c78:	4604      	mov	r4, r0
   13c7a:	b083      	sub	sp, #12
   13c7c:	460d      	mov	r5, r1
   13c7e:	4616      	mov	r6, r2
   13c80:	461f      	mov	r7, r3
  WsfTaskLock();
   13c82:	f00a f9cb 	bl	1e01c <WsfTaskLock>
  if (DmConnInUse(connId))
   13c86:	4620      	mov	r0, r4
   13c88:	f7f9 fb72 	bl	d370 <DmConnInUse>
   13c8c:	2800      	cmp	r0, #0
   13c8e:	d04f      	beq.n	13d30 <AttsHandleValueInd+0xbc>
    mtu = pCcb->pMainCcb->mtu;
   13c90:	4933      	ldr	r1, [pc, #204]	; (13d60 <AttsHandleValueInd+0xec>)
   13c92:	1e60      	subs	r0, r4, #1
   13c94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13c98:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   13c9c:	6903      	ldr	r3, [r0, #16]
   13c9e:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   13ca2:	f893 801d 	ldrb.w	r8, [r3, #29]
  WsfTaskUnlock();
   13ca6:	f00a f9c3 	bl	1e030 <WsfTaskUnlock>
  if (mtu > 0)
   13caa:	f1b9 0f00 	cmp.w	r9, #0
   13cae:	d00a      	beq.n	13cc6 <AttsHandleValueInd+0x52>
    if (!transTimedOut)
   13cb0:	f018 0804 	ands.w	r8, r8, #4
   13cb4:	d00a      	beq.n	13ccc <AttsHandleValueInd+0x58>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13cb6:	2300      	movs	r3, #0
   13cb8:	9300      	str	r3, [sp, #0]
   13cba:	462a      	mov	r2, r5
   13cbc:	2371      	movs	r3, #113	; 0x71
   13cbe:	210f      	movs	r1, #15
   13cc0:	4620      	mov	r0, r4
   13cc2:	f001 fd2f 	bl	15724 <attExecCallback>
  attsHandleValueIndNtf(connId, handle, valueLen, pValue, ATT_PDU_VALUE_IND, FALSE);
}
   13cc6:	b003      	add	sp, #12
   13cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (attsCsfIsClientChangeAware(connId, handle))
   13ccc:	4629      	mov	r1, r5
   13cce:	4620      	mov	r0, r4
   13cd0:	f7ff fd94 	bl	137fc <attsCsfIsClientChangeAware>
   13cd4:	2800      	cmp	r0, #0
   13cd6:	d0f6      	beq.n	13cc6 <AttsHandleValueInd+0x52>
        if ((valueLen + ATT_VALUE_NTF_LEN) <= mtu)
   13cd8:	1cb3      	adds	r3, r6, #2
   13cda:	454b      	cmp	r3, r9
   13cdc:	da31      	bge.n	13d42 <AttsHandleValueInd+0xce>
          if ((pMsg = WsfMsgAlloc(sizeof(attsApiMsg_t))) != NULL)
   13cde:	2008      	movs	r0, #8
   13ce0:	f00a f95a 	bl	1df98 <WsfMsgAlloc>
   13ce4:	4680      	mov	r8, r0
   13ce6:	2800      	cmp	r0, #0
   13ce8:	d0ed      	beq.n	13cc6 <AttsHandleValueInd+0x52>
            pMsg->hdr.event = ATTS_MSG_API_VALUE_IND_NTF;
   13cea:	2321      	movs	r3, #33	; 0x21
   13cec:	7083      	strb	r3, [r0, #2]
            pMsg->hdr.param = connId;
   13cee:	8004      	strh	r4, [r0, #0]
              pMsg->pPkt = attMsgAlloc(ATT_VALUE_IND_NTF_BUF_LEN + valueLen);
   13cf0:	f106 000b 	add.w	r0, r6, #11
   13cf4:	b280      	uxth	r0, r0
   13cf6:	f001 fd31 	bl	1575c <attMsgAlloc>
   13cfa:	4603      	mov	r3, r0
   13cfc:	f8c8 0004 	str.w	r0, [r8, #4]
            if (pMsg->pPkt != NULL)
   13d00:	b340      	cbz	r0, 13d54 <AttsHandleValueInd+0xe0>
              pMsg->pPkt->handle = handle;
   13d02:	8045      	strh	r5, [r0, #2]
              UINT16_TO_BSTREAM(p, handle);
   13d04:	7245      	strb	r5, [r0, #9]
                memcpy(p, pValue, valueLen);
   13d06:	4632      	mov	r2, r6
              UINT16_TO_BSTREAM(p, handle);
   13d08:	0a2d      	lsrs	r5, r5, #8
              pMsg->pPkt->len = ATT_VALUE_IND_LEN + valueLen;
   13d0a:	3603      	adds	r6, #3
              UINT16_TO_BSTREAM(p, handle);
   13d0c:	7285      	strb	r5, [r0, #10]
              pMsg->pPkt->len = ATT_VALUE_IND_LEN + valueLen;
   13d0e:	8006      	strh	r6, [r0, #0]
              UINT8_TO_BSTREAM(p, opcode);
   13d10:	201d      	movs	r0, #29
                memcpy(p, pValue, valueLen);
   13d12:	4639      	mov	r1, r7
              UINT8_TO_BSTREAM(p, opcode);
   13d14:	7218      	strb	r0, [r3, #8]
                memcpy(p, pValue, valueLen);
   13d16:	f103 000b 	add.w	r0, r3, #11
   13d1a:	f7f8 f9f1 	bl	c100 <memcpy>
              WsfMsgSend(attCb.handlerId, pMsg);
   13d1e:	4b11      	ldr	r3, [pc, #68]	; (13d64 <AttsHandleValueInd+0xf0>)
   13d20:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
   13d24:	4641      	mov	r1, r8
}
   13d26:	b003      	add	sp, #12
   13d28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
              WsfMsgSend(attCb.handlerId, pMsg);
   13d2c:	f00a b940 	b.w	1dfb0 <WsfMsgSend>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   13d30:	480d      	ldr	r0, [pc, #52]	; (13d68 <AttsHandleValueInd+0xf4>)
   13d32:	4621      	mov	r1, r4
   13d34:	f00a fcb0 	bl	1e698 <WsfTrace>
}
   13d38:	b003      	add	sp, #12
   13d3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  WsfTaskUnlock();
   13d3e:	f00a b977 	b.w	1e030 <WsfTaskUnlock>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   13d42:	f8cd 8000 	str.w	r8, [sp]
   13d46:	2377      	movs	r3, #119	; 0x77
   13d48:	462a      	mov	r2, r5
   13d4a:	210f      	movs	r1, #15
   13d4c:	4620      	mov	r0, r4
   13d4e:	f001 fce9 	bl	15724 <attExecCallback>
  if (!pktSent && zeroCpy)
   13d52:	e7b8      	b.n	13cc6 <AttsHandleValueInd+0x52>
              WsfMsgFree(pMsg);
   13d54:	4640      	mov	r0, r8
}
   13d56:	b003      	add	sp, #12
   13d58:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
              WsfMsgFree(pMsg);
   13d5c:	f00a b924 	b.w	1dfa8 <WsfMsgFree>
   13d60:	100041f8 	.word	0x100041f8
   13d64:	100042a0 	.word	0x100042a0
   13d68:	00026798 	.word	0x00026798

00013d6c <attsL2cCtrlCback>:
 */
/*************************************************************************************************/
static void attsL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
  /* pass event to indication interface */
  (*attsCb.pInd->ctrlCback)(pMsg);
   13d6c:	4b01      	ldr	r3, [pc, #4]	; (13d74 <attsL2cCtrlCback+0x8>)
   13d6e:	689b      	ldr	r3, [r3, #8]
   13d70:	685b      	ldr	r3, [r3, #4]
   13d72:	4718      	bx	r3
   13d74:	1000424c 	.word	0x1000424c

00013d78 <attsConnCback>:
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   13d78:	788b      	ldrb	r3, [r1, #2]
   13d7a:	2b28      	cmp	r3, #40	; 0x28
{
   13d7c:	b570      	push	{r4, r5, r6, lr}
   13d7e:	460d      	mov	r5, r1
   13d80:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   13d82:	d009      	beq.n	13d98 <attsConnCback+0x20>
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
   13d84:	4b0c      	ldr	r3, [pc, #48]	; (13db8 <attsConnCback+0x40>)
   13d86:	689b      	ldr	r3, [r3, #8]
   13d88:	4629      	mov	r1, r5
   13d8a:	4620      	mov	r0, r4
   13d8c:	68db      	ldr	r3, [r3, #12]
}
   13d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
   13d92:	4718      	bx	r3
{
  void *pBuf;

  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
  {
    WsfBufFree(pBuf);
   13d94:	f00a f8d0 	bl	1df38 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   13d98:	4620      	mov	r0, r4
   13d9a:	f00a fab3 	bl	1e304 <WsfQueueDeq>
   13d9e:	2800      	cmp	r0, #0
   13da0:	d1f8      	bne.n	13d94 <attsConnCback+0x1c>
    if (DmConnCheckIdle(pCcb->connId) & DM_IDLE_ATTS_DISC)
   13da2:	7f20      	ldrb	r0, [r4, #28]
   13da4:	f7f9 fb62 	bl	d46c <DmConnCheckIdle>
   13da8:	0743      	lsls	r3, r0, #29
   13daa:	d5eb      	bpl.n	13d84 <attsConnCback+0xc>
      WsfTimerStop(&pCcb->idleTimer);
   13dac:	f104 0008 	add.w	r0, r4, #8
   13db0:	f00a fbd2 	bl	1e558 <WsfTimerStop>
   13db4:	e7e6      	b.n	13d84 <attsConnCback+0xc>
   13db6:	bf00      	nop
   13db8:	1000424c 	.word	0x1000424c

00013dbc <attsDataCback>:
{
   13dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13dc0:	4680      	mov	r8, r0
   13dc2:	4689      	mov	r9, r1
   13dc4:	4614      	mov	r4, r2
  if ((pCcb = attCcbByHandle(handle)) == NULL)
   13dc6:	f001 fc6b 	bl	156a0 <attCcbByHandle>
   13dca:	b180      	cbz	r0, 13dee <attsDataCback+0x32>
  opcode = *(pPacket + L2C_PAYLOAD_START);
   13dcc:	7a27      	ldrb	r7, [r4, #8]
  if ((opcode <= ATT_PDU_WRITE_REQ) ||
   13dce:	2f12      	cmp	r7, #18
   13dd0:	4605      	mov	r5, r0
   13dd2:	d90e      	bls.n	13df2 <attsDataCback+0x36>
   13dd4:	f1a7 0316 	sub.w	r3, r7, #22
   13dd8:	2b08      	cmp	r3, #8
   13dda:	d90a      	bls.n	13df2 <attsDataCback+0x36>
  else if (opcode == ATT_PDU_WRITE_CMD)
   13ddc:	2f52      	cmp	r7, #82	; 0x52
   13dde:	d048      	beq.n	13e72 <attsDataCback+0xb6>
  else if (opcode == ATT_PDU_SIGNED_WRITE_CMD)
   13de0:	2fd2      	cmp	r7, #210	; 0xd2
   13de2:	d04f      	beq.n	13e84 <attsDataCback+0xc8>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   13de4:	f890 a01d 	ldrb.w	sl, [r0, #29]
   13de8:	f01a 0a08 	ands.w	sl, sl, #8
   13dec:	d009      	beq.n	13e02 <attsDataCback+0x46>
}
   13dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   13df2:	7f6b      	ldrb	r3, [r5, #29]
   13df4:	0718      	lsls	r0, r3, #28
    method = ATT_OPCODE_2_METHOD(opcode);
   13df6:	ea4f 0a67 	mov.w	sl, r7, asr #1
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   13dfa:	d502      	bpl.n	13e02 <attsDataCback+0x46>
    if (method != ATT_METHOD_VALUE_CNF)
   13dfc:	f1ba 0f0f 	cmp.w	sl, #15
   13e00:	d1f5      	bne.n	13dee <attsDataCback+0x32>
  err = attsCsfActClientState(handle, opcode, pPacket);
   13e02:	4622      	mov	r2, r4
   13e04:	4639      	mov	r1, r7
   13e06:	4640      	mov	r0, r8
   13e08:	f7ff fd16 	bl	13838 <attsCsfActClientState>
  if (err)
   13e0c:	4606      	mov	r6, r0
   13e0e:	b1f0      	cbz	r0, 13e4e <attsDataCback+0x92>
    BYTES_TO_UINT16(attHandle, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   13e10:	7aa2      	ldrb	r2, [r4, #10]
   13e12:	7a63      	ldrb	r3, [r4, #9]
   13e14:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   13e18:	b29c      	uxth	r4, r3
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
   13e1a:	2f02      	cmp	r7, #2
   13e1c:	d0e7      	beq.n	13dee <attsDataCback+0x32>
   13e1e:	2f1e      	cmp	r7, #30
   13e20:	d0e5      	beq.n	13dee <attsDataCback+0x32>
   13e22:	067b      	lsls	r3, r7, #25
   13e24:	d4e3      	bmi.n	13dee <attsDataCback+0x32>
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   13e26:	200d      	movs	r0, #13
   13e28:	f001 fc98 	bl	1575c <attMsgAlloc>
   13e2c:	4603      	mov	r3, r0
   13e2e:	2800      	cmp	r0, #0
   13e30:	d0dd      	beq.n	13dee <attsDataCback+0x32>
    UINT16_TO_BSTREAM(p, attHandle);
   13e32:	7284      	strb	r4, [r0, #10]
   13e34:	0a22      	lsrs	r2, r4, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   13e36:	2401      	movs	r4, #1
    UINT16_TO_BSTREAM(p, attHandle);
   13e38:	72c2      	strb	r2, [r0, #11]
    UINT8_TO_BSTREAM(p, opcode);
   13e3a:	7247      	strb	r7, [r0, #9]
    UINT8_TO_BSTREAM(p, reason);
   13e3c:	7306      	strb	r6, [r0, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   13e3e:	721c      	strb	r4, [r3, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   13e40:	4641      	mov	r1, r8
   13e42:	2205      	movs	r2, #5
}
   13e44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   13e48:	2004      	movs	r0, #4
   13e4a:	f005 be05 	b.w	19a58 <L2cDataReq>
    procFcn = attsProcFcnTbl[method];
   13e4e:	4b10      	ldr	r3, [pc, #64]	; (13e90 <attsDataCback+0xd4>)
   13e50:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    if (procFcn != NULL)
   13e54:	b153      	cbz	r3, 13e6c <attsDataCback+0xb0>
      if (len >= attsMinPduLen[method])
   13e56:	4a0f      	ldr	r2, [pc, #60]	; (13e94 <attsDataCback+0xd8>)
   13e58:	f812 200a 	ldrb.w	r2, [r2, sl]
   13e5c:	454a      	cmp	r2, r9
   13e5e:	d80e      	bhi.n	13e7e <attsDataCback+0xc2>
        (*procFcn)(pCcb, len, pPacket);
   13e60:	4622      	mov	r2, r4
   13e62:	4649      	mov	r1, r9
   13e64:	4628      	mov	r0, r5
}
   13e66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        (*procFcn)(pCcb, len, pPacket);
   13e6a:	4718      	bx	r3
    attHandle = ATT_HANDLE_NONE;
   13e6c:	4604      	mov	r4, r0
      err = ATT_ERR_NOT_SUP;
   13e6e:	2606      	movs	r6, #6
   13e70:	e7d3      	b.n	13e1a <attsDataCback+0x5e>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   13e72:	7f43      	ldrb	r3, [r0, #29]
   13e74:	0719      	lsls	r1, r3, #28
   13e76:	d4ba      	bmi.n	13dee <attsDataCback+0x32>
   13e78:	f04f 0a0a 	mov.w	sl, #10
   13e7c:	e7c1      	b.n	13e02 <attsDataCback+0x46>
    attHandle = ATT_HANDLE_NONE;
   13e7e:	4634      	mov	r4, r6
        err = ATT_ERR_INVALID_PDU;
   13e80:	2604      	movs	r6, #4
   13e82:	e7ca      	b.n	13e1a <attsDataCback+0x5e>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   13e84:	7f43      	ldrb	r3, [r0, #29]
   13e86:	071a      	lsls	r2, r3, #28
   13e88:	d4b1      	bmi.n	13dee <attsDataCback+0x32>
   13e8a:	f04f 0a10 	mov.w	sl, #16
   13e8e:	e7b8      	b.n	13e02 <attsDataCback+0x46>
   13e90:	10002b84 	.word	0x10002b84
   13e94:	000267d0 	.word	0x000267d0

00013e98 <attsErrRsp>:
{
   13e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e9c:	4607      	mov	r7, r0
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   13e9e:	200d      	movs	r0, #13
{
   13ea0:	460e      	mov	r6, r1
   13ea2:	4614      	mov	r4, r2
   13ea4:	461d      	mov	r5, r3
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   13ea6:	f001 fc59 	bl	1575c <attMsgAlloc>
   13eaa:	b180      	cbz	r0, 13ece <attsErrRsp+0x36>
   13eac:	4684      	mov	ip, r0
    UINT16_TO_BSTREAM(p, attHandle);
   13eae:	7284      	strb	r4, [r0, #10]
   13eb0:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   13eb2:	2401      	movs	r4, #1
    UINT16_TO_BSTREAM(p, attHandle);
   13eb4:	72c3      	strb	r3, [r0, #11]
    UINT8_TO_BSTREAM(p, opcode);
   13eb6:	7246      	strb	r6, [r0, #9]
    UINT8_TO_BSTREAM(p, reason);
   13eb8:	7305      	strb	r5, [r0, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   13eba:	f88c 4008 	strb.w	r4, [ip, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   13ebe:	4603      	mov	r3, r0
   13ec0:	4639      	mov	r1, r7
   13ec2:	2205      	movs	r2, #5
}
   13ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   13ec8:	2004      	movs	r0, #4
   13eca:	f005 bdc5 	b.w	19a58 <L2cDataReq>
}
   13ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ed2:	bf00      	nop

00013ed4 <attsClearPrepWrites>:
{
   13ed4:	b510      	push	{r4, lr}
   13ed6:	4604      	mov	r4, r0
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   13ed8:	e001      	b.n	13ede <attsClearPrepWrites+0xa>
    WsfBufFree(pBuf);
   13eda:	f00a f82d 	bl	1df38 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   13ede:	4620      	mov	r0, r4
   13ee0:	f00a fa10 	bl	1e304 <WsfQueueDeq>
   13ee4:	2800      	cmp	r0, #0
   13ee6:	d1f8      	bne.n	13eda <attsClearPrepWrites+0x6>
  }
}
   13ee8:	bd10      	pop	{r4, pc}
   13eea:	bf00      	nop

00013eec <attsDiscBusy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsDiscBusy(attCcb_t *pCcb)
{
   13eec:	b538      	push	{r3, r4, r5, lr}
  if (pAttCfg->discIdleTimeout > 0)
   13eee:	4d0d      	ldr	r5, [pc, #52]	; (13f24 <attsDiscBusy+0x38>)
   13ef0:	682b      	ldr	r3, [r5, #0]
   13ef2:	681b      	ldr	r3, [r3, #0]
   13ef4:	b903      	cbnz	r3, 13ef8 <attsDiscBusy+0xc>
    pCcb->idleTimer.handlerId = attCb.handlerId;
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
    pCcb->idleTimer.msg.param = pCcb->connId;
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
  }
}
   13ef6:	bd38      	pop	{r3, r4, r5, pc}
    DmConnSetIdle(pCcb->connId, DM_IDLE_ATTS_DISC, DM_CONN_BUSY);
   13ef8:	4604      	mov	r4, r0
   13efa:	2104      	movs	r1, #4
   13efc:	7f00      	ldrb	r0, [r0, #28]
   13efe:	2201      	movs	r2, #1
   13f00:	f7f9 fa86 	bl	d410 <DmConnSetIdle>
    pCcb->idleTimer.handlerId = attCb.handlerId;
   13f04:	4b08      	ldr	r3, [pc, #32]	; (13f28 <attsDiscBusy+0x3c>)
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   13f06:	682a      	ldr	r2, [r5, #0]
    pCcb->idleTimer.handlerId = attCb.handlerId;
   13f08:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
   13f0c:	7520      	strb	r0, [r4, #20]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
   13f0e:	2120      	movs	r1, #32
    pCcb->idleTimer.msg.param = pCcb->connId;
   13f10:	7f23      	ldrb	r3, [r4, #28]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
   13f12:	74a1      	strb	r1, [r4, #18]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   13f14:	6811      	ldr	r1, [r2, #0]
    pCcb->idleTimer.msg.param = pCcb->connId;
   13f16:	8223      	strh	r3, [r4, #16]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   13f18:	f104 0008 	add.w	r0, r4, #8
}
   13f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   13f20:	f00a ba94 	b.w	1e44c <WsfTimerStartSec>
   13f24:	10002c2c 	.word	0x10002c2c
   13f28:	100042a0 	.word	0x100042a0

00013f2c <attsProcessDatabaseHashUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcessDatabaseHashUpdate(secCmacMsg_t *pMsg)
{
   13f2c:	b530      	push	{r4, r5, lr}
   13f2e:	4604      	mov	r4, r0
   13f30:	b08b      	sub	sp, #44	; 0x2c
  evt.handle = ATT_HANDLE_NONE;
  evt.continuing = FALSE;
  evt.mtu = 0;

  /* free plain text buffer */
  if (pMsg->pPlainText != NULL)
   13f32:	6880      	ldr	r0, [r0, #8]
  evt.continuing = FALSE;
   13f34:	2500      	movs	r5, #0
  evt.hdr.param = DM_CONN_ID_NONE;
   13f36:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
  evt.valueLen = ATT_DATABASE_HASH_LEN;
   13f3a:	2310      	movs	r3, #16
  evt.hdr.param = DM_CONN_ID_NONE;
   13f3c:	9206      	str	r2, [sp, #24]
  evt.valueLen = ATT_DATABASE_HASH_LEN;
   13f3e:	9308      	str	r3, [sp, #32]
  evt.continuing = FALSE;
   13f40:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  evt.mtu = 0;
   13f44:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
  if (pMsg->pPlainText != NULL)
   13f48:	b110      	cbz	r0, 13f50 <attsProcessDatabaseHashUpdate+0x24>
  {
    WsfBufFree(pMsg->pPlainText);
   13f4a:	f009 fff5 	bl	1df38 <WsfBufFree>
    pMsg->pPlainText = NULL;
   13f4e:	60a5      	str	r5, [r4, #8]

  /* copy in little endian */
  evt.pValue = pMsg->pCiphertext;

  /* find GATT database handle */
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   13f50:	a904      	add	r1, sp, #16
   13f52:	aa03      	add	r2, sp, #12
  evt.pValue = pMsg->pCiphertext;
   13f54:	6864      	ldr	r4, [r4, #4]
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   13f56:	4b19      	ldr	r3, [pc, #100]	; (13fbc <attsProcessDatabaseHashUpdate+0x90>)
  evt.pValue = pMsg->pCiphertext;
   13f58:	9407      	str	r4, [sp, #28]
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   13f5a:	e9cd 2100 	strd	r2, r1, [sp]
   13f5e:	2001      	movs	r0, #1
   13f60:	2202      	movs	r2, #2
   13f62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13f66:	f000 fc05 	bl	14774 <attsFindUuidInRange>
                                      (uint8_t *) attGattDbhChUuid, &pAttr, &pGroup);

  if (dbhCharHandle != ATT_HANDLE_NONE)
   13f6a:	4604      	mov	r4, r0
   13f6c:	b940      	cbnz	r0, 13f80 <attsProcessDatabaseHashUpdate+0x54>
    /* Set hash in service. */
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
  }

  /* set hash update complete */
  attsCsfSetHashUpdateStatus(FALSE);
   13f6e:	2000      	movs	r0, #0
   13f70:	f7ff fc16 	bl	137a0 <attsCsfSetHashUpdateStatus>

  attCb.cback(&evt);
   13f74:	4b12      	ldr	r3, [pc, #72]	; (13fc0 <attsProcessDatabaseHashUpdate+0x94>)
   13f76:	a806      	add	r0, sp, #24
   13f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   13f7a:	4798      	blx	r3
}
   13f7c:	b00b      	add	sp, #44	; 0x2c
   13f7e:	bd30      	pop	{r4, r5, pc}
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
   13f80:	9d07      	ldr	r5, [sp, #28]
{
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;

  WsfTaskLock();
   13f82:	f00a f84b 	bl	1e01c <WsfTaskLock>

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   13f86:	a905      	add	r1, sp, #20
   13f88:	4620      	mov	r0, r4
   13f8a:	f000 fa35 	bl	143f8 <attsFindByHandle>
   13f8e:	b110      	cbz	r0, 13f96 <attsProcessDatabaseHashUpdate+0x6a>
  {
    /* verify write length */
    if (valueLen > pAttr->maxLen)
   13f90:	8983      	ldrh	r3, [r0, #12]
   13f92:	2b0f      	cmp	r3, #15
   13f94:	d802      	bhi.n	13f9c <attsProcessDatabaseHashUpdate+0x70>
  else
  {
    err = ATT_ERR_NOT_FOUND;
  }

  WsfTaskUnlock();
   13f96:	f00a f84b 	bl	1e030 <WsfTaskUnlock>

  return err;
   13f9a:	e7e8      	b.n	13f6e <attsProcessDatabaseHashUpdate+0x42>
      memcpy(pAttr->pValue, pValue, valueLen);
   13f9c:	6843      	ldr	r3, [r0, #4]
   13f9e:	682c      	ldr	r4, [r5, #0]
   13fa0:	6869      	ldr	r1, [r5, #4]
   13fa2:	68aa      	ldr	r2, [r5, #8]
   13fa4:	68ed      	ldr	r5, [r5, #12]
   13fa6:	60dd      	str	r5, [r3, #12]
   13fa8:	601c      	str	r4, [r3, #0]
   13faa:	6059      	str	r1, [r3, #4]
   13fac:	609a      	str	r2, [r3, #8]
      if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   13fae:	7b83      	ldrb	r3, [r0, #14]
   13fb0:	071b      	lsls	r3, r3, #28
   13fb2:	d5f0      	bpl.n	13f96 <attsProcessDatabaseHashUpdate+0x6a>
        *(pAttr->pLen) = valueLen;
   13fb4:	6883      	ldr	r3, [r0, #8]
   13fb6:	2210      	movs	r2, #16
   13fb8:	801a      	strh	r2, [r3, #0]
   13fba:	e7ec      	b.n	13f96 <attsProcessDatabaseHashUpdate+0x6a>
   13fbc:	00026828 	.word	0x00026828
   13fc0:	100042a0 	.word	0x100042a0

00013fc4 <attsMsgCback>:
  if (pMsg->event == ATTS_MSG_IDLE_TIMEOUT)
   13fc4:	7882      	ldrb	r2, [r0, #2]
   13fc6:	2a20      	cmp	r2, #32
   13fc8:	d00a      	beq.n	13fe0 <attsMsgCback+0x1c>
  else if (pMsg->event <= ATTS_MSG_IND_TIMEOUT)
   13fca:	2a22      	cmp	r2, #34	; 0x22
   13fcc:	d904      	bls.n	13fd8 <attsMsgCback+0x14>
  else if (pMsg->event == ATTS_MSG_SIGN_CMAC_CMPL)
   13fce:	2a23      	cmp	r2, #35	; 0x23
   13fd0:	d00b      	beq.n	13fea <attsMsgCback+0x26>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
   13fd2:	2a24      	cmp	r2, #36	; 0x24
   13fd4:	d00c      	beq.n	13ff0 <attsMsgCback+0x2c>
}
   13fd6:	4770      	bx	lr
    (*attsCb.pInd->msgCback)(pMsg);
   13fd8:	4b06      	ldr	r3, [pc, #24]	; (13ff4 <attsMsgCback+0x30>)
   13fda:	689b      	ldr	r3, [r3, #8]
   13fdc:	689b      	ldr	r3, [r3, #8]
   13fde:	4718      	bx	r3
    DmConnSetIdle((dmConnId_t) pMsg->param, DM_IDLE_ATTS_DISC, DM_CONN_IDLE);
   13fe0:	7800      	ldrb	r0, [r0, #0]
   13fe2:	2200      	movs	r2, #0
   13fe4:	2104      	movs	r1, #4
   13fe6:	f7f9 ba13 	b.w	d410 <DmConnSetIdle>
    (*attsCb.signMsgCback)(pMsg);
   13fea:	4b02      	ldr	r3, [pc, #8]	; (13ff4 <attsMsgCback+0x30>)
   13fec:	68db      	ldr	r3, [r3, #12]
   13fee:	4718      	bx	r3
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
   13ff0:	f7ff bf9c 	b.w	13f2c <attsProcessDatabaseHashUpdate>
   13ff4:	1000424c 	.word	0x1000424c

00013ff8 <attsCheckPendDbHashReadRsp>:
{
   13ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ffc:	4c39      	ldr	r4, [pc, #228]	; (140e4 <attsCheckPendDbHashReadRsp+0xec>)
   13ffe:	b084      	sub	sp, #16
      pCcb->pPendDbHashRsp = NULL;
   14000:	f04f 0900 	mov.w	r9, #0
   14004:	f104 086c 	add.w	r8, r4, #108	; 0x6c
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   14008:	f04f 0a01 	mov.w	sl, #1
    if (pCcb->pPendDbHashRsp)
   1400c:	6a23      	ldr	r3, [r4, #32]
   1400e:	2b00      	cmp	r3, #0
   14010:	d032      	beq.n	14078 <attsCheckPendDbHashReadRsp+0x80>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   14012:	8b60      	ldrh	r0, [r4, #26]
   14014:	3008      	adds	r0, #8
   14016:	b280      	uxth	r0, r0
   14018:	f001 fba0 	bl	1575c <attMsgAlloc>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   1401c:	2209      	movs	r2, #9
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
   1401e:	2312      	movs	r3, #18
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   14020:	a903      	add	r1, sp, #12
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   14022:	4605      	mov	r5, r0
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
   14024:	f100 070c 	add.w	r7, r0, #12
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   14028:	b360      	cbz	r0, 14084 <attsCheckPendDbHashReadRsp+0x8c>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   1402a:	7202      	strb	r2, [r0, #8]
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
   1402c:	7243      	strb	r3, [r0, #9]
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
   1402e:	6a23      	ldr	r3, [r4, #32]
   14030:	885b      	ldrh	r3, [r3, #2]
   14032:	7283      	strb	r3, [r0, #10]
   14034:	6a23      	ldr	r3, [r4, #32]
   14036:	885b      	ldrh	r3, [r3, #2]
   14038:	0a1b      	lsrs	r3, r3, #8
   1403a:	72c3      	strb	r3, [r0, #11]
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   1403c:	6a23      	ldr	r3, [r4, #32]
   1403e:	8858      	ldrh	r0, [r3, #2]
   14040:	f000 f9da 	bl	143f8 <attsFindByHandle>
   14044:	4606      	mov	r6, r0
          memcpy(p, pAttr->pValue, *pAttr->pLen);
   14046:	4638      	mov	r0, r7
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   14048:	2e00      	cmp	r6, #0
   1404a:	d037      	beq.n	140bc <attsCheckPendDbHashReadRsp+0xc4>
          memcpy(p, pAttr->pValue, *pAttr->pLen);
   1404c:	68b3      	ldr	r3, [r6, #8]
   1404e:	6871      	ldr	r1, [r6, #4]
   14050:	881a      	ldrh	r2, [r3, #0]
   14052:	f7f8 f855 	bl	c100 <memcpy>
          p += *pAttr->pLen;
   14056:	68b3      	ldr	r3, [r6, #8]
          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
   14058:	8b21      	ldrh	r1, [r4, #24]
          p += *pAttr->pLen;
   1405a:	881a      	ldrh	r2, [r3, #0]
   1405c:	4417      	add	r7, r2
        p = pBuf + L2C_PAYLOAD_START;
   1405e:	f105 0208 	add.w	r2, r5, #8
          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
   14062:	1aba      	subs	r2, r7, r2
   14064:	462b      	mov	r3, r5
   14066:	b292      	uxth	r2, r2
   14068:	2004      	movs	r0, #4
   1406a:	f005 fcf5 	bl	19a58 <L2cDataReq>
      WsfBufFree(pCcb->pPendDbHashRsp);
   1406e:	6a20      	ldr	r0, [r4, #32]
   14070:	f009 ff62 	bl	1df38 <WsfBufFree>
      pCcb->pPendDbHashRsp = NULL;
   14074:	f8c4 9020 	str.w	r9, [r4, #32]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   14078:	3424      	adds	r4, #36	; 0x24
   1407a:	4544      	cmp	r4, r8
   1407c:	d1c6      	bne.n	1400c <attsCheckPendDbHashReadRsp+0x14>
}
   1407e:	b004      	add	sp, #16
   14080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_RESOURCES);
   14084:	6a23      	ldr	r3, [r4, #32]
   14086:	7f21      	ldrb	r1, [r4, #28]
   14088:	881d      	ldrh	r5, [r3, #0]
   1408a:	9101      	str	r1, [sp, #4]
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   1408c:	200d      	movs	r0, #13
   1408e:	f001 fb65 	bl	1575c <attMsgAlloc>
    UINT8_TO_BSTREAM(p, opcode);
   14092:	f04f 0c08 	mov.w	ip, #8
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   14096:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   14098:	9901      	ldr	r1, [sp, #4]
    UINT16_TO_BSTREAM(p, attHandle);
   1409a:	fa25 f70c 	lsr.w	r7, r5, ip
    UINT8_TO_BSTREAM(p, reason);
   1409e:	2611      	movs	r6, #17
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   140a0:	2205      	movs	r2, #5
   140a2:	2004      	movs	r0, #4
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   140a4:	2b00      	cmp	r3, #0
   140a6:	d0e2      	beq.n	1406e <attsCheckPendDbHashReadRsp+0x76>
    UINT8_TO_BSTREAM(p, opcode);
   140a8:	f883 c009 	strb.w	ip, [r3, #9]
    UINT16_TO_BSTREAM(p, attHandle);
   140ac:	729d      	strb	r5, [r3, #10]
   140ae:	72df      	strb	r7, [r3, #11]
    UINT8_TO_BSTREAM(p, reason);
   140b0:	731e      	strb	r6, [r3, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   140b2:	f883 a008 	strb.w	sl, [r3, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   140b6:	f005 fccf 	bl	19a58 <L2cDataReq>
   140ba:	e7d8      	b.n	1406e <attsCheckPendDbHashReadRsp+0x76>
          attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_NOT_FOUND);
   140bc:	6a23      	ldr	r3, [r4, #32]
   140be:	7f21      	ldrb	r1, [r4, #28]
   140c0:	881d      	ldrh	r5, [r3, #0]
   140c2:	9101      	str	r1, [sp, #4]
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   140c4:	200d      	movs	r0, #13
   140c6:	f001 fb49 	bl	1575c <attMsgAlloc>
    UINT8_TO_BSTREAM(p, opcode);
   140ca:	f04f 0c08 	mov.w	ip, #8
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   140ce:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   140d0:	9901      	ldr	r1, [sp, #4]
    UINT16_TO_BSTREAM(p, attHandle);
   140d2:	fa25 f70c 	lsr.w	r7, r5, ip
    UINT8_TO_BSTREAM(p, reason);
   140d6:	260a      	movs	r6, #10
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   140d8:	2205      	movs	r2, #5
   140da:	2004      	movs	r0, #4
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   140dc:	2b00      	cmp	r3, #0
   140de:	d1e3      	bne.n	140a8 <attsCheckPendDbHashReadRsp+0xb0>
   140e0:	e7c5      	b.n	1406e <attsCheckPendDbHashReadRsp+0x76>
   140e2:	bf00      	nop
   140e4:	100042a0 	.word	0x100042a0

000140e8 <AttsInit>:
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   140e8:	4b07      	ldr	r3, [pc, #28]	; (14108 <AttsInit+0x20>)
  attCb.pServer = &attsFcnIf;
   140ea:	4908      	ldr	r1, [pc, #32]	; (1410c <AttsInit+0x24>)
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
   140ec:	4808      	ldr	r0, [pc, #32]	; (14110 <AttsInit+0x28>)
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   140ee:	2200      	movs	r2, #0
{
   140f0:	b410      	push	{r4}
  attsCb.pInd = &attFcnDefault;
   140f2:	4c08      	ldr	r4, [pc, #32]	; (14114 <AttsInit+0x2c>)
   140f4:	609c      	str	r4, [r3, #8]
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   140f6:	e9c3 2200 	strd	r2, r2, [r3]
  attCb.pServer = &attsFcnIf;
   140fa:	4a07      	ldr	r2, [pc, #28]	; (14118 <AttsInit+0x30>)
}
   140fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
   14100:	60d8      	str	r0, [r3, #12]
  attCb.pServer = &attsFcnIf;
   14102:	670a      	str	r2, [r1, #112]	; 0x70
}
   14104:	4770      	bx	lr
   14106:	bf00      	nop
   14108:	1000424c 	.word	0x1000424c
   1410c:	100042a0 	.word	0x100042a0
   14110:	000155bd 	.word	0x000155bd
   14114:	000267e4 	.word	0x000267e4
   14118:	000267c0 	.word	0x000267c0

0001411c <AttsCalculateDbHash>:
{
   1411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  attsGroup_t *pGroup = (attsGroup_t *) attsCb.groupQueue.pHead;
   14120:	4f86      	ldr	r7, [pc, #536]	; (1433c <AttsCalculateDbHash+0x220>)
   14122:	683d      	ldr	r5, [r7, #0]
{
   14124:	b087      	sub	sp, #28
  while (pGroup != NULL)
   14126:	2d00      	cmp	r5, #0
   14128:	f000 8106 	beq.w	14338 <AttsCalculateDbHash+0x21c>
   1412c:	f8df a210 	ldr.w	sl, [pc, #528]	; 14340 <AttsCalculateDbHash+0x224>
   14130:	2000      	movs	r0, #0
   14132:	f89a 1000 	ldrb.w	r1, [sl]
  uint16_t msgLen = 0;
   14136:	4604      	mov	r4, r0
  switch (uuid)
   14138:	f642 1903 	movw	r9, #10499	; 0x2903
    uint8_t numAttrs = (pGroup->endHandle - pGroup->startHandle) + 1;
   1413c:	8a6b      	ldrh	r3, [r5, #18]
   1413e:	8a2a      	ldrh	r2, [r5, #16]
   14140:	3301      	adds	r3, #1
   14142:	1a9b      	subs	r3, r3, r2
    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
   14144:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   14148:	686a      	ldr	r2, [r5, #4]
   1414a:	d034      	beq.n	141b6 <AttsCalculateDbHash+0x9a>
   1414c:	3b01      	subs	r3, #1
   1414e:	f102 0c20 	add.w	ip, r2, #32
   14152:	b2db      	uxtb	r3, r3
   14154:	3210      	adds	r2, #16
   14156:	eb0c 1c03 	add.w	ip, ip, r3, lsl #4
  switch (uuid)
   1415a:	f642 1805 	movw	r8, #10501	; 0x2905
   1415e:	f642 0602 	movw	r6, #10242	; 0x2802
   14162:	f642 0e03 	movw	lr, #10243	; 0x2803
  if (isAttrCharVal)
   14166:	2900      	cmp	r1, #0
   14168:	f040 80b6 	bne.w	142d8 <AttsCalculateDbHash+0x1bc>
  BYTES_TO_UINT16(uuid, pAttr->pUuid);
   1416c:	f852 3c10 	ldr.w	r3, [r2, #-16]
   14170:	f893 b001 	ldrb.w	fp, [r3, #1]
   14174:	781b      	ldrb	r3, [r3, #0]
   14176:	eb03 230b 	add.w	r3, r3, fp, lsl #8
   1417a:	b29b      	uxth	r3, r3
  switch (uuid)
   1417c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   14180:	d008      	beq.n	14194 <AttsCalculateDbHash+0x78>
   14182:	f200 80a2 	bhi.w	142ca <AttsCalculateDbHash+0x1ae>
   14186:	42b3      	cmp	r3, r6
   14188:	f240 809a 	bls.w	142c0 <AttsCalculateDbHash+0x1a4>
   1418c:	4573      	cmp	r3, lr
   1418e:	d10f      	bne.n	141b0 <AttsCalculateDbHash+0x94>
   14190:	2001      	movs	r0, #1
   14192:	4601      	mov	r1, r0
      length += *pAttr->pLen;
   14194:	f852 3c08 	ldr.w	r3, [r2, #-8]
   14198:	881b      	ldrh	r3, [r3, #0]
   1419a:	3302      	adds	r3, #2
   1419c:	b29b      	uxth	r3, r3
      if (pAttr->settings & ATTS_SET_UUID_128)
   1419e:	f812 bc02 	ldrb.w	fp, [r2, #-2]
   141a2:	f01b 0f01 	tst.w	fp, #1
      msgLen += attsIsHashableAttr(pAttr);
   141a6:	bf14      	ite	ne
   141a8:	3410      	addne	r4, #16
   141aa:	3402      	addeq	r4, #2
   141ac:	441c      	add	r4, r3
   141ae:	b2a4      	uxth	r4, r4
    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
   141b0:	3210      	adds	r2, #16
   141b2:	4594      	cmp	ip, r2
   141b4:	d1d7      	bne.n	14166 <AttsCalculateDbHash+0x4a>
    pGroup = pGroup->pNext;
   141b6:	682d      	ldr	r5, [r5, #0]
  while (pGroup != NULL)
   141b8:	2d00      	cmp	r5, #0
   141ba:	d1bf      	bne.n	1413c <AttsCalculateDbHash+0x20>
   141bc:	b108      	cbz	r0, 141c2 <AttsCalculateDbHash+0xa6>
   141be:	f88a 1000 	strb.w	r1, [sl]
  if ((pMsg = WsfBufAlloc(msgLen)) != NULL)
   141c2:	4620      	mov	r0, r4
   141c4:	f009 fe88 	bl	1ded8 <WsfBufAlloc>
   141c8:	4680      	mov	r8, r0
   141ca:	2800      	cmp	r0, #0
   141cc:	d075      	beq.n	142ba <AttsCalculateDbHash+0x19e>
    pGroup = (attsGroup_t *)attsCb.groupQueue.pHead;
   141ce:	f8d7 9000 	ldr.w	r9, [r7]
    uint8_t hashingKey[16] = { 0, };
   141d2:	2300      	movs	r3, #0
   141d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   141d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
    while (pGroup)
   141dc:	f1b9 0f00 	cmp.w	r9, #0
   141e0:	d05f      	beq.n	142a2 <AttsCalculateDbHash+0x186>
   141e2:	4f57      	ldr	r7, [pc, #348]	; (14340 <AttsCalculateDbHash+0x224>)
   141e4:	4602      	mov	r2, r0
      uint16_t attHandle = pGroup->startHandle;
   141e6:	f8b9 5010 	ldrh.w	r5, [r9, #16]
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   141ea:	f8b9 1012 	ldrh.w	r1, [r9, #18]
   141ee:	f8d9 6004 	ldr.w	r6, [r9, #4]
   141f2:	428d      	cmp	r5, r1
   141f4:	d850      	bhi.n	14298 <AttsCalculateDbHash+0x17c>
   141f6:	3610      	adds	r6, #16
  switch (uuid)
   141f8:	f642 1a03 	movw	sl, #10499	; 0x2903
   141fc:	e041      	b.n	14282 <AttsCalculateDbHash+0x166>
  BYTES_TO_UINT16(uuid, pAttr->pUuid);
   141fe:	f856 0c10 	ldr.w	r0, [r6, #-16]
   14202:	f890 c001 	ldrb.w	ip, [r0, #1]
   14206:	7803      	ldrb	r3, [r0, #0]
   14208:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1420c:	b29b      	uxth	r3, r3
  switch (uuid)
   1420e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   14212:	d00a      	beq.n	1422a <AttsCalculateDbHash+0x10e>
   14214:	d867      	bhi.n	142e6 <AttsCalculateDbHash+0x1ca>
   14216:	f642 0002 	movw	r0, #10242	; 0x2802
   1421a:	4283      	cmp	r3, r0
   1421c:	d95f      	bls.n	142de <AttsCalculateDbHash+0x1c2>
   1421e:	f642 0003 	movw	r0, #10243	; 0x2803
   14222:	4283      	cmp	r3, r0
   14224:	d127      	bne.n	14276 <AttsCalculateDbHash+0x15a>
      isAttrCharVal = TRUE;
   14226:	2301      	movs	r3, #1
   14228:	703b      	strb	r3, [r7, #0]
      length += *pAttr->pLen;
   1422a:	f856 3c08 	ldr.w	r3, [r6, #-8]
   1422e:	881b      	ldrh	r3, [r3, #0]
   14230:	3302      	adds	r3, #2
   14232:	b29b      	uxth	r3, r3
      if (pAttr->settings & ATTS_SET_UUID_128)
   14234:	f816 0c02 	ldrb.w	r0, [r6, #-2]
   14238:	07c0      	lsls	r0, r0, #31
        length += 16;
   1423a:	bf4c      	ite	mi
   1423c:	3310      	addmi	r3, #16
        length += 2;
   1423e:	3302      	addpl	r3, #2
   14240:	b298      	uxth	r0, r3
        if (valLen)
   14242:	b1c0      	cbz	r0, 14276 <AttsCalculateDbHash+0x15a>
          UINT16_TO_BSTREAM(p, attHandle);
   14244:	0a2b      	lsrs	r3, r5, #8
   14246:	7015      	strb	r5, [r2, #0]
   14248:	7053      	strb	r3, [r2, #1]
          if (pAttr->settings & ATTS_SET_UUID_128)
   1424a:	f816 3c02 	ldrb.w	r3, [r6, #-2]
   1424e:	07db      	lsls	r3, r3, #31
   14250:	d45e      	bmi.n	14310 <AttsCalculateDbHash+0x1f4>
            BYTES_TO_UINT16(uuid, pAttr->pUuid);
   14252:	f856 1c10 	ldr.w	r1, [r6, #-16]
   14256:	f891 c001 	ldrb.w	ip, [r1, #1]
   1425a:	780b      	ldrb	r3, [r1, #0]
   1425c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   14260:	b29b      	uxth	r3, r3
            UINT16_TO_BSTREAM(p,uuid);
   14262:	0a19      	lsrs	r1, r3, #8
   14264:	7093      	strb	r3, [r2, #2]
   14266:	70d1      	strb	r1, [r2, #3]
   14268:	1d13      	adds	r3, r2, #4
   1426a:	2204      	movs	r2, #4
          if (valLen - (uuidLen + 2))
   1426c:	4290      	cmp	r0, r2
   1426e:	d142      	bne.n	142f6 <AttsCalculateDbHash+0x1da>
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   14270:	f8b9 1012 	ldrh.w	r1, [r9, #18]
   14274:	461a      	mov	r2, r3
   14276:	3501      	adds	r5, #1
   14278:	b2ad      	uxth	r5, r5
   1427a:	428d      	cmp	r5, r1
   1427c:	f106 0610 	add.w	r6, r6, #16
   14280:	d80a      	bhi.n	14298 <AttsCalculateDbHash+0x17c>
  if (isAttrCharVal)
   14282:	783b      	ldrb	r3, [r7, #0]
   14284:	2b00      	cmp	r3, #0
   14286:	d0ba      	beq.n	141fe <AttsCalculateDbHash+0xe2>
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   14288:	3501      	adds	r5, #1
   1428a:	b2ad      	uxth	r5, r5
    isAttrCharVal = FALSE;
   1428c:	2300      	movs	r3, #0
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   1428e:	428d      	cmp	r5, r1
    isAttrCharVal = FALSE;
   14290:	703b      	strb	r3, [r7, #0]
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   14292:	f106 0610 	add.w	r6, r6, #16
   14296:	d9f4      	bls.n	14282 <AttsCalculateDbHash+0x166>
      pGroup = pGroup->pNext;
   14298:	f8d9 9000 	ldr.w	r9, [r9]
    while (pGroup)
   1429c:	f1b9 0f00 	cmp.w	r9, #0
   142a0:	d1a1      	bne.n	141e6 <AttsCalculateDbHash+0xca>
  return SecCmac(pKey, pMsg, msgLen, attCb.handlerId, 0, ATTS_MSG_DBH_CMAC_CMPL);
   142a2:	4b28      	ldr	r3, [pc, #160]	; (14344 <AttsCalculateDbHash+0x228>)
   142a4:	2124      	movs	r1, #36	; 0x24
   142a6:	2200      	movs	r2, #0
   142a8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   142ac:	a802      	add	r0, sp, #8
   142ae:	e9cd 2100 	strd	r2, r1, [sp]
   142b2:	4622      	mov	r2, r4
   142b4:	4641      	mov	r1, r8
   142b6:	f7fd fcfd 	bl	11cb4 <SecCmac>
}
   142ba:	b007      	add	sp, #28
   142bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (uuid)
   142c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
   142c4:	f4ff af74 	bcc.w	141b0 <AttsCalculateDbHash+0x94>
   142c8:	e764      	b.n	14194 <AttsCalculateDbHash+0x78>
   142ca:	454b      	cmp	r3, r9
   142cc:	d902      	bls.n	142d4 <AttsCalculateDbHash+0x1b8>
   142ce:	4543      	cmp	r3, r8
   142d0:	f47f af6e 	bne.w	141b0 <AttsCalculateDbHash+0x94>
   142d4:	2302      	movs	r3, #2
   142d6:	e762      	b.n	1419e <AttsCalculateDbHash+0x82>
   142d8:	2001      	movs	r0, #1
    isAttrCharVal = FALSE;
   142da:	2100      	movs	r1, #0
   142dc:	e768      	b.n	141b0 <AttsCalculateDbHash+0x94>
  switch (uuid)
   142de:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
   142e2:	d3c8      	bcc.n	14276 <AttsCalculateDbHash+0x15a>
   142e4:	e7a1      	b.n	1422a <AttsCalculateDbHash+0x10e>
   142e6:	4553      	cmp	r3, sl
   142e8:	d903      	bls.n	142f2 <AttsCalculateDbHash+0x1d6>
   142ea:	f642 1005 	movw	r0, #10501	; 0x2905
   142ee:	4283      	cmp	r3, r0
   142f0:	d1c1      	bne.n	14276 <AttsCalculateDbHash+0x15a>
   142f2:	2302      	movs	r3, #2
   142f4:	e79e      	b.n	14234 <AttsCalculateDbHash+0x118>
            memcpy(p, pAttr->pValue, *pAttr->pLen);
   142f6:	e956 1203 	ldrd	r1, r2, [r6, #-12]
   142fa:	4618      	mov	r0, r3
   142fc:	8812      	ldrh	r2, [r2, #0]
   142fe:	f7f7 feff 	bl	c100 <memcpy>
            p += *pAttr->pLen;
   14302:	f856 2c08 	ldr.w	r2, [r6, #-8]
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   14306:	f8b9 1012 	ldrh.w	r1, [r9, #18]
            p += *pAttr->pLen;
   1430a:	8812      	ldrh	r2, [r2, #0]
   1430c:	4402      	add	r2, r0
   1430e:	e7b2      	b.n	14276 <AttsCalculateDbHash+0x15a>
            memcpy(p, pAttr->pUuid, 16);
   14310:	f856 3c10 	ldr.w	r3, [r6, #-16]
   14314:	f8d3 e000 	ldr.w	lr, [r3]
   14318:	f8d3 c004 	ldr.w	ip, [r3, #4]
   1431c:	6899      	ldr	r1, [r3, #8]
   1431e:	68db      	ldr	r3, [r3, #12]
   14320:	f8c2 300e 	str.w	r3, [r2, #14]
   14324:	f8c2 e002 	str.w	lr, [r2, #2]
   14328:	f8c2 c006 	str.w	ip, [r2, #6]
   1432c:	f8c2 100a 	str.w	r1, [r2, #10]
            p += 16;
   14330:	f102 0312 	add.w	r3, r2, #18
            uuidLen = 16;
   14334:	2212      	movs	r2, #18
   14336:	e799      	b.n	1426c <AttsCalculateDbHash+0x150>
  uint16_t msgLen = 0;
   14338:	462c      	mov	r4, r5
   1433a:	e742      	b.n	141c2 <AttsCalculateDbHash+0xa6>
   1433c:	1000424c 	.word	0x1000424c
   14340:	10004264 	.word	0x10004264
   14344:	100042a0 	.word	0x100042a0

00014348 <AttsAddGroup>:
{
   14348:	b538      	push	{r3, r4, r5, lr}
   1434a:	4605      	mov	r5, r0
  WsfTaskLock();
   1434c:	f009 fe66 	bl	1e01c <WsfTaskLock>
  pElem = (attsGroup_t *) attsCb.groupQueue.pHead;
   14350:	4b0d      	ldr	r3, [pc, #52]	; (14388 <AttsAddGroup+0x40>)
   14352:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
   14354:	b1ab      	cbz	r3, 14382 <AttsAddGroup+0x3a>
    if (pGroup->startHandle < pElem->startHandle)
   14356:	f8b5 c010 	ldrh.w	ip, [r5, #16]
  attsGroup_t   *pPrev = NULL;
   1435a:	2200      	movs	r2, #0
   1435c:	e003      	b.n	14366 <AttsAddGroup+0x1e>
    pElem = pElem->pNext;
   1435e:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
   14360:	461a      	mov	r2, r3
   14362:	b11c      	cbz	r4, 1436c <AttsAddGroup+0x24>
   14364:	4623      	mov	r3, r4
    if (pGroup->startHandle < pElem->startHandle)
   14366:	8a1c      	ldrh	r4, [r3, #16]
   14368:	4564      	cmp	r4, ip
   1436a:	d9f8      	bls.n	1435e <AttsAddGroup+0x16>
  WsfQueueInsert(&attsCb.groupQueue, pGroup, pPrev);
   1436c:	4629      	mov	r1, r5
   1436e:	4806      	ldr	r0, [pc, #24]	; (14388 <AttsAddGroup+0x40>)
   14370:	f009 ffda 	bl	1e328 <WsfQueueInsert>
  attsCsfSetHashUpdateStatus(TRUE);
   14374:	2001      	movs	r0, #1
   14376:	f7ff fa13 	bl	137a0 <attsCsfSetHashUpdateStatus>
}
   1437a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskUnlock();
   1437e:	f009 be57 	b.w	1e030 <WsfTaskUnlock>
  attsGroup_t   *pPrev = NULL;
   14382:	461a      	mov	r2, r3
   14384:	e7f2      	b.n	1436c <AttsAddGroup+0x24>
   14386:	bf00      	nop
   14388:	1000424c 	.word	0x1000424c

0001438c <attsUuidCmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuidCmp(attsAttr_t *pAttr, uint8_t uuidLen, uint8_t *pUuid)
{
   1438c:	b508      	push	{r3, lr}
  /* if both uuids are the same length */
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   1438e:	f890 c00e 	ldrb.w	ip, [r0, #14]
   14392:	f01c 0f01 	tst.w	ip, #1
{
   14396:	4613      	mov	r3, r2
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   14398:	d007      	beq.n	143aa <attsUuidCmp+0x1e>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
   1439a:	2910      	cmp	r1, #16
   1439c:	d00f      	beq.n	143be <attsUuidCmp+0x32>
  {
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
  }
  else
  {
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
   1439e:	6801      	ldr	r1, [r0, #0]
   143a0:	4618      	mov	r0, r3
  }
}
   143a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
   143a6:	f001 b989 	b.w	156bc <attUuidCmp16to128>
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   143aa:	2902      	cmp	r1, #2
   143ac:	d007      	beq.n	143be <attsUuidCmp+0x32>
  else if (((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_128_UUID_LEN))
   143ae:	2910      	cmp	r1, #16
   143b0:	d1f5      	bne.n	1439e <attsUuidCmp+0x12>
}
   143b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
   143b6:	6800      	ldr	r0, [r0, #0]
   143b8:	4611      	mov	r1, r2
   143ba:	f001 b97f 	b.w	156bc <attUuidCmp16to128>
    return (memcmp(pAttr->pUuid, pUuid, uuidLen) == 0);
   143be:	460a      	mov	r2, r1
   143c0:	6800      	ldr	r0, [r0, #0]
   143c2:	4619      	mov	r1, r3
   143c4:	f00e ff88 	bl	232d8 <memcmp>
   143c8:	fab0 f080 	clz	r0, r0
   143cc:	0940      	lsrs	r0, r0, #5
}
   143ce:	bd08      	pop	{r3, pc}

000143d0 <attsUuid16Cmp>:
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuid16Cmp(uint8_t *pUuid16, uint8_t uuidLen, uint8_t *pUuid)
{
  if (uuidLen == ATT_16_UUID_LEN)
   143d0:	2902      	cmp	r1, #2
{
   143d2:	4603      	mov	r3, r0
  if (uuidLen == ATT_16_UUID_LEN)
   143d4:	d105      	bne.n	143e2 <attsUuid16Cmp+0x12>
  {
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
   143d6:	7800      	ldrb	r0, [r0, #0]
   143d8:	7811      	ldrb	r1, [r2, #0]
   143da:	4288      	cmp	r0, r1
   143dc:	d004      	beq.n	143e8 <attsUuid16Cmp+0x18>
   143de:	2000      	movs	r0, #0
  }
  else
  {
    return attUuidCmp16to128(pUuid16, pUuid);
  }
}
   143e0:	4770      	bx	lr
    return attUuidCmp16to128(pUuid16, pUuid);
   143e2:	4611      	mov	r1, r2
   143e4:	f001 b96a 	b.w	156bc <attUuidCmp16to128>
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
   143e8:	7858      	ldrb	r0, [r3, #1]
   143ea:	7853      	ldrb	r3, [r2, #1]
   143ec:	1ac0      	subs	r0, r0, r3
   143ee:	fab0 f080 	clz	r0, r0
   143f2:	0940      	lsrs	r0, r0, #5
   143f4:	4770      	bx	lr
   143f6:	bf00      	nop

000143f8 <attsFindByHandle>:
attsAttr_t *attsFindByHandle(uint16_t handle, attsGroup_t **pAttrGroup)
{
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   143f8:	4b0a      	ldr	r3, [pc, #40]	; (14424 <attsFindByHandle+0x2c>)
   143fa:	681b      	ldr	r3, [r3, #0]
   143fc:	b183      	cbz	r3, 14420 <attsFindByHandle+0x28>
  {
    /*  if start handle within handle range of group */
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
   143fe:	8a1a      	ldrh	r2, [r3, #16]
   14400:	4282      	cmp	r2, r0
   14402:	d8fa      	bhi.n	143fa <attsFindByHandle+0x2>
   14404:	f8b3 c012 	ldrh.w	ip, [r3, #18]
   14408:	4584      	cmp	ip, r0
   1440a:	d3f6      	bcc.n	143fa <attsFindByHandle+0x2>
{
   1440c:	b410      	push	{r4}
    {
      /* index by handle into attribute array to return attribute */
      *pAttrGroup = pGroup;
      return &pGroup->pAttr[handle - pGroup->startHandle];
   1440e:	685c      	ldr	r4, [r3, #4]
      *pAttrGroup = pGroup;
   14410:	600b      	str	r3, [r1, #0]
      return &pGroup->pAttr[handle - pGroup->startHandle];
   14412:	1a80      	subs	r0, r0, r2
   14414:	eb04 1300 	add.w	r3, r4, r0, lsl #4
    }
  }

  /* handle not found */
  return NULL;
}
   14418:	4618      	mov	r0, r3
   1441a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1441e:	4770      	bx	lr
   14420:	4618      	mov	r0, r3
   14422:	4770      	bx	lr
   14424:	1000424c 	.word	0x1000424c

00014428 <attsPermissions>:
uint8_t attsPermissions(dmConnId_t connId, uint8_t permit, uint16_t handle, uint8_t permissions)
{
  uint8_t secLevel;

  /* verify read or write permissions */
  if (!(permissions & permit))
   14428:	420b      	tst	r3, r1
{
   1442a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1442e:	460d      	mov	r5, r1
  if (!(permissions & permit))
   14430:	d01f      	beq.n	14472 <attsPermissions+0x4a>
  {
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
  }

  /* convert write permissions to read permissions for easier masking */
  if (permit == ATTS_PERMIT_WRITE)
   14432:	2910      	cmp	r1, #16
   14434:	461c      	mov	r4, r3
  {
    permissions >>= 4;
   14436:	bf08      	it	eq
   14438:	091c      	lsreq	r4, r3, #4
  }

  /* if no security requirements return quickly */
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
   1443a:	f014 0f0e 	tst.w	r4, #14
   1443e:	4607      	mov	r7, r0
   14440:	4616      	mov	r6, r2
   14442:	d102      	bne.n	1444a <attsPermissions+0x22>
  {
    return ATT_SUCCESS;
   14444:	2000      	movs	r0, #0
  }
  else
  {
    return ATT_SUCCESS;
  }
}
   14446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  secLevel = DmConnSecLevel(connId);
   1444a:	f7f8 ffd7 	bl	d3fc <DmConnSecLevel>
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
   1444e:	0722      	lsls	r2, r4, #28
   14450:	d500      	bpl.n	14454 <attsPermissions+0x2c>
   14452:	b1b0      	cbz	r0, 14482 <attsPermissions+0x5a>
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
   14454:	f004 030a 	and.w	r3, r4, #10
   14458:	2b0a      	cmp	r3, #10
   1445a:	d010      	beq.n	1447e <attsPermissions+0x56>
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
   1445c:	0763      	lsls	r3, r4, #29
   1445e:	d5f1      	bpl.n	14444 <attsPermissions+0x1c>
    if (attsCb.authorCback == NULL)
   14460:	4b0a      	ldr	r3, [pc, #40]	; (1448c <attsPermissions+0x64>)
   14462:	691b      	ldr	r3, [r3, #16]
   14464:	b17b      	cbz	r3, 14486 <attsPermissions+0x5e>
      return (*attsCb.authorCback)(connId, permit, handle);
   14466:	4632      	mov	r2, r6
   14468:	4629      	mov	r1, r5
   1446a:	4638      	mov	r0, r7
}
   1446c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return (*attsCb.authorCback)(connId, permit, handle);
   14470:	4718      	bx	r3
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
   14472:	2901      	cmp	r1, #1
   14474:	bf0c      	ite	eq
   14476:	2002      	moveq	r0, #2
   14478:	2003      	movne	r0, #3
}
   1447a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
   1447e:	2801      	cmp	r0, #1
   14480:	d8ec      	bhi.n	1445c <attsPermissions+0x34>
    return ATT_ERR_AUTH;
   14482:	2005      	movs	r0, #5
   14484:	e7df      	b.n	14446 <attsPermissions+0x1e>
      return ATT_ERR_AUTHOR;
   14486:	2008      	movs	r0, #8
   14488:	e7dd      	b.n	14446 <attsPermissions+0x1e>
   1448a:	bf00      	nop
   1448c:	1000424c 	.word	0x1000424c

00014490 <attsProcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcMtuReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   14490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t   *pRsp;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* parse mtu */
  BYTES_TO_UINT16(mtu, p);
   14492:	7a93      	ldrb	r3, [r2, #10]
   14494:	7a54      	ldrb	r4, [r2, #9]
  {
    mtu = ATT_DEFAULT_MTU;
  }

  /* get desired MTU */
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   14496:	4e15      	ldr	r6, [pc, #84]	; (144ec <attsProcMtuReq+0x5c>)
  BYTES_TO_UINT16(mtu, p);
   14498:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   1449c:	b2a4      	uxth	r4, r4
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   1449e:	6833      	ldr	r3, [r6, #0]
   144a0:	2c17      	cmp	r4, #23
   144a2:	889f      	ldrh	r7, [r3, #4]
   144a4:	bf38      	it	cc
   144a6:	2417      	movcc	r4, #23
{
   144a8:	4605      	mov	r5, r0
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   144aa:	f003 fa89 	bl	179c0 <HciGetMaxRxAclLen>
   144ae:	3804      	subs	r0, #4
   144b0:	4287      	cmp	r7, r0
   144b2:	da16      	bge.n	144e2 <attsProcMtuReq+0x52>
   144b4:	6833      	ldr	r3, [r6, #0]
   144b6:	889e      	ldrh	r6, [r3, #4]

  /* send response */
  if ((pRsp = attMsgAlloc(L2C_PAYLOAD_START + ATT_MTU_RSP_LEN)) != NULL)
   144b8:	200b      	movs	r0, #11
   144ba:	f001 f94f 	bl	1575c <attMsgAlloc>
   144be:	4603      	mov	r3, r0
   144c0:	b140      	cbz	r0, 144d4 <attsProcMtuReq+0x44>
  {
    p = pRsp + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
    UINT16_TO_BSTREAM(p, localMtu);
   144c2:	0a31      	lsrs	r1, r6, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
   144c4:	2203      	movs	r2, #3
   144c6:	7202      	strb	r2, [r0, #8]
    UINT16_TO_BSTREAM(p, localMtu);
   144c8:	7246      	strb	r6, [r0, #9]
   144ca:	7281      	strb	r1, [r0, #10]

    L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_MTU_RSP_LEN, pRsp);
   144cc:	8b29      	ldrh	r1, [r5, #24]
   144ce:	2004      	movs	r0, #4
   144d0:	f005 fac2 	bl	19a58 <L2cDataReq>
  }

  /* set mtu for the connection */
  attSetMtu(pCcb, mtu, localMtu);
   144d4:	4632      	mov	r2, r6
   144d6:	4621      	mov	r1, r4
   144d8:	4628      	mov	r0, r5
}
   144da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  attSetMtu(pCcb, mtu, localMtu);
   144de:	f001 b8ff 	b.w	156e0 <attSetMtu>
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   144e2:	f003 fa6d 	bl	179c0 <HciGetMaxRxAclLen>
   144e6:	3804      	subs	r0, #4
   144e8:	b286      	uxth	r6, r0
   144ea:	e7e5      	b.n	144b8 <attsProcMtuReq+0x28>
   144ec:	10002c2c 	.word	0x10002c2c

000144f0 <attsProcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindInfoReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   144f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t    handle;
  uint8_t     err = ATT_SUCCESS;

  /* parse handles */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
   144f4:	7a93      	ldrb	r3, [r2, #10]
   144f6:	7a56      	ldrb	r6, [r2, #9]
   144f8:	eb06 2603 	add.w	r6, r6, r3, lsl #8
   144fc:	b2b6      	uxth	r6, r6
{
   144fe:	4607      	mov	r7, r0
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   14500:	b136      	cbz	r6, 14510 <attsProcFindInfoReq+0x20>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   14502:	7b13      	ldrb	r3, [r2, #12]
   14504:	7ad5      	ldrb	r5, [r2, #11]
   14506:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   1450a:	b2ad      	uxth	r5, r5
  if ((startHandle == 0) || (startHandle > endHandle))
   1450c:	42ae      	cmp	r6, r5
   1450e:	d90a      	bls.n	14526 <attsProcFindInfoReq+0x36>
      err = ATT_ERR_RESOURCES;
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   14510:	4638      	mov	r0, r7
   14512:	f7ff fceb 	bl	13eec <attsDiscBusy>
    err = ATT_ERR_HANDLE;
   14516:	2301      	movs	r3, #1
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
   14518:	8b38      	ldrh	r0, [r7, #24]
   1451a:	4632      	mov	r2, r6
   1451c:	2104      	movs	r1, #4
  }
}
   1451e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
   14522:	f7ff bcb9 	b.w	13e98 <attsErrRsp>
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   14526:	8b40      	ldrh	r0, [r0, #26]
   14528:	3008      	adds	r0, #8
   1452a:	b280      	uxth	r0, r0
   1452c:	f001 f916 	bl	1575c <attMsgAlloc>
   14530:	4680      	mov	r8, r0
   14532:	2800      	cmp	r0, #0
   14534:	d05a      	beq.n	145ec <attsProcFindInfoReq+0xfc>
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_RSP);
   14536:	f240 1305 	movw	r3, #261	; 0x105
   1453a:	8103      	strh	r3, [r0, #8]
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   1453c:	f100 030e 	add.w	r3, r0, #14
   14540:	4842      	ldr	r0, [pc, #264]	; (1464c <attsProcFindInfoReq+0x15c>)
   14542:	4634      	mov	r4, r6
        if (handle == ATT_HANDLE_MAX)
   14544:	f64f 7eff 	movw	lr, #65535	; 0xffff
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14548:	6801      	ldr	r1, [r0, #0]
   1454a:	f1a3 0904 	sub.w	r9, r3, #4
   1454e:	b161      	cbz	r1, 1456a <attsProcFindInfoReq+0x7a>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   14550:	f8b1 c010 	ldrh.w	ip, [r1, #16]
   14554:	45a4      	cmp	ip, r4
   14556:	d902      	bls.n	1455e <attsProcFindInfoReq+0x6e>
   14558:	4565      	cmp	r5, ip
   1455a:	d303      	bcc.n	14564 <attsProcFindInfoReq+0x74>
   1455c:	4664      	mov	r4, ip
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   1455e:	8a4a      	ldrh	r2, [r1, #18]
   14560:	42a2      	cmp	r2, r4
   14562:	d215      	bcs.n	14590 <attsProcFindInfoReq+0xa0>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14564:	6809      	ldr	r1, [r1, #0]
   14566:	2900      	cmp	r1, #0
   14568:	d1f2      	bne.n	14550 <attsProcFindInfoReq+0x60>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   1456a:	f108 020a 	add.w	r2, r8, #10
   1456e:	4591      	cmp	r9, r2
   14570:	d063      	beq.n	1463a <attsProcFindInfoReq+0x14a>
  attsDiscBusy(pCcb);
   14572:	4638      	mov	r0, r7
   14574:	f7ff fcba 	bl	13eec <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   14578:	f108 0208 	add.w	r2, r8, #8
   1457c:	eba9 0202 	sub.w	r2, r9, r2
   14580:	8b39      	ldrh	r1, [r7, #24]
   14582:	4643      	mov	r3, r8
   14584:	b292      	uxth	r2, r2
}
   14586:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1458a:	2004      	movs	r0, #4
   1458c:	f005 ba64 	b.w	19a58 <L2cDataReq>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14590:	6849      	ldr	r1, [r1, #4]
   14592:	eba4 0c0c 	sub.w	ip, r4, ip
   14596:	ea4f 1a0c 	mov.w	sl, ip, lsl #4
   1459a:	eb01 1c0c 	add.w	ip, r1, ip, lsl #4
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   1459e:	2c00      	cmp	r4, #0
   145a0:	d0e3      	beq.n	1456a <attsProcFindInfoReq+0x7a>
        if (pAttr->settings & ATTS_SET_UUID_128)
   145a2:	f89c 200e 	ldrb.w	r2, [ip, #14]
   145a6:	07d2      	lsls	r2, r2, #31
   145a8:	d429      	bmi.n	145fe <attsProcFindInfoReq+0x10e>
              (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   145aa:	8b7a      	ldrh	r2, [r7, #26]
   145ac:	3208      	adds	r2, #8
   145ae:	4442      	add	r2, r8
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
   145b0:	4293      	cmp	r3, r2
   145b2:	469c      	mov	ip, r3
   145b4:	d8d9      	bhi.n	1456a <attsProcFindInfoReq+0x7a>
            UINT16_TO_BSTREAM(p, handle);
   145b6:	0a22      	lsrs	r2, r4, #8
   145b8:	f803 4c04 	strb.w	r4, [r3, #-4]
   145bc:	f803 2c03 	strb.w	r2, [r3, #-3]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[0]);
   145c0:	f851 200a 	ldr.w	r2, [r1, sl]
   145c4:	7812      	ldrb	r2, [r2, #0]
   145c6:	f803 2c02 	strb.w	r2, [r3, #-2]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
   145ca:	f851 200a 	ldr.w	r2, [r1, sl]
        if (handle == ATT_HANDLE_MAX)
   145ce:	4574      	cmp	r4, lr
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
   145d0:	7852      	ldrb	r2, [r2, #1]
   145d2:	f803 2c01 	strb.w	r2, [r3, #-1]
        if (handle == ATT_HANDLE_MAX)
   145d6:	d00e      	beq.n	145f6 <attsProcFindInfoReq+0x106>
        if (++handle > endHandle)
   145d8:	3401      	adds	r4, #1
   145da:	b2a4      	uxth	r4, r4
   145dc:	42a5      	cmp	r5, r4
   145de:	f103 0304 	add.w	r3, r3, #4
   145e2:	d2b1      	bcs.n	14548 <attsProcFindInfoReq+0x58>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   145e4:	f108 020a 	add.w	r2, r8, #10
   145e8:	46e1      	mov	r9, ip
   145ea:	e7c0      	b.n	1456e <attsProcFindInfoReq+0x7e>
  attsDiscBusy(pCcb);
   145ec:	4638      	mov	r0, r7
   145ee:	f7ff fc7d 	bl	13eec <attsDiscBusy>
      err = ATT_ERR_RESOURCES;
   145f2:	2311      	movs	r3, #17
   145f4:	e790      	b.n	14518 <attsProcFindInfoReq+0x28>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   145f6:	f108 020a 	add.w	r2, r8, #10
   145fa:	4699      	mov	r9, r3
   145fc:	e7b7      	b.n	1456e <attsProcFindInfoReq+0x7e>
          if (p == (pBuf + L2C_PAYLOAD_START + 2))
   145fe:	f108 030a 	add.w	r3, r8, #10
   14602:	4599      	cmp	r9, r3
   14604:	d1b5      	bne.n	14572 <attsProcFindInfoReq+0x82>
            UINT16_TO_BSTREAM(p, handle);
   14606:	f889 4000 	strb.w	r4, [r9]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
   1460a:	2302      	movs	r3, #2
            UINT16_TO_BSTREAM(p, handle);
   1460c:	0a24      	lsrs	r4, r4, #8
   1460e:	f889 4001 	strb.w	r4, [r9, #1]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
   14612:	f809 3c01 	strb.w	r3, [r9, #-1]
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
   14616:	f8dc 3000 	ldr.w	r3, [ip]
   1461a:	681c      	ldr	r4, [r3, #0]
   1461c:	6858      	ldr	r0, [r3, #4]
   1461e:	6899      	ldr	r1, [r3, #8]
   14620:	68db      	ldr	r3, [r3, #12]
   14622:	f8c8 3018 	str.w	r3, [r8, #24]
            p += ATT_128_UUID_LEN;
   14626:	464a      	mov	r2, r9
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
   14628:	f8c8 400c 	str.w	r4, [r8, #12]
   1462c:	f8c8 0010 	str.w	r0, [r8, #16]
   14630:	f8c8 1014 	str.w	r1, [r8, #20]
            p += ATT_128_UUID_LEN;
   14634:	f108 091c 	add.w	r9, r8, #28
   14638:	e799      	b.n	1456e <attsProcFindInfoReq+0x7e>
        WsfMsgFree(pBuf);
   1463a:	4640      	mov	r0, r8
   1463c:	f009 fcb4 	bl	1dfa8 <WsfMsgFree>
  attsDiscBusy(pCcb);
   14640:	4638      	mov	r0, r7
   14642:	f7ff fc53 	bl	13eec <attsDiscBusy>
        err = ATT_ERR_NOT_FOUND;
   14646:	230a      	movs	r3, #10
   14648:	e766      	b.n	14518 <attsProcFindInfoReq+0x28>
   1464a:	bf00      	nop
   1464c:	1000424c 	.word	0x1000424c

00014650 <attsProcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   14650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14654:	4f46      	ldr	r7, [pc, #280]	; (14770 <attsProcReadReq+0x120>)
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;

  /* parse handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
   14656:	7a93      	ldrb	r3, [r2, #10]
   14658:	7a55      	ldrb	r5, [r2, #9]
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1465a:	683c      	ldr	r4, [r7, #0]
  BSTREAM_TO_UINT16(handle, pPacket);
   1465c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
{
   14660:	b082      	sub	sp, #8
   14662:	4680      	mov	r8, r0
  BSTREAM_TO_UINT16(handle, pPacket);
   14664:	b2ad      	uxth	r5, r5
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14666:	b144      	cbz	r4, 1467a <attsProcReadReq+0x2a>
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
   14668:	8a23      	ldrh	r3, [r4, #16]
   1466a:	429d      	cmp	r5, r3
   1466c:	d302      	bcc.n	14674 <attsProcReadReq+0x24>
   1466e:	8a62      	ldrh	r2, [r4, #18]
   14670:	42aa      	cmp	r2, r5
   14672:	d20c      	bcs.n	1468e <attsProcReadReq+0x3e>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14674:	6824      	ldr	r4, [r4, #0]
   14676:	2c00      	cmp	r4, #0
   14678:	d1f6      	bne.n	14668 <attsProcReadReq+0x18>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
   1467a:	2301      	movs	r3, #1
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
   1467c:	f8b8 0018 	ldrh.w	r0, [r8, #24]
   14680:	462a      	mov	r2, r5
   14682:	210a      	movs	r1, #10
  }
}
   14684:	b002      	add	sp, #8
   14686:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
   1468a:	f7ff bc05 	b.w	13e98 <attsErrRsp>
      return &pGroup->pAttr[handle - pGroup->startHandle];
   1468e:	6866      	ldr	r6, [r4, #4]
   14690:	1aeb      	subs	r3, r5, r3
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   14692:	eb16 1603 	adds.w	r6, r6, r3, lsl #4
   14696:	d0f0      	beq.n	1467a <attsProcReadReq+0x2a>
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   14698:	f896 900f 	ldrb.w	r9, [r6, #15]
  if (!(permissions & permit))
   1469c:	f019 0f01 	tst.w	r9, #1
   146a0:	d04e      	beq.n	14740 <attsProcReadReq+0xf0>
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
   146a2:	f019 0f0e 	tst.w	r9, #14
   146a6:	d01a      	beq.n	146de <attsProcReadReq+0x8e>
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   146a8:	f898 a01c 	ldrb.w	sl, [r8, #28]
  secLevel = DmConnSecLevel(connId);
   146ac:	4650      	mov	r0, sl
   146ae:	f7f8 fea5 	bl	d3fc <DmConnSecLevel>
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
   146b2:	f019 0f08 	tst.w	r9, #8
   146b6:	d001      	beq.n	146bc <attsProcReadReq+0x6c>
   146b8:	2800      	cmp	r0, #0
   146ba:	d052      	beq.n	14762 <attsProcReadReq+0x112>
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
   146bc:	f009 030a 	and.w	r3, r9, #10
   146c0:	2b0a      	cmp	r3, #10
   146c2:	d04c      	beq.n	1475e <attsProcReadReq+0x10e>
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
   146c4:	f019 0f04 	tst.w	r9, #4
   146c8:	d009      	beq.n	146de <attsProcReadReq+0x8e>
    if (attsCb.authorCback == NULL)
   146ca:	693b      	ldr	r3, [r7, #16]
   146cc:	2b00      	cmp	r3, #0
   146ce:	d04d      	beq.n	1476c <attsProcReadReq+0x11c>
      return (*attsCb.authorCback)(connId, permit, handle);
   146d0:	4650      	mov	r0, sl
   146d2:	462a      	mov	r2, r5
   146d4:	2101      	movs	r1, #1
   146d6:	4798      	blx	r3
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   146d8:	4603      	mov	r3, r0
   146da:	2800      	cmp	r0, #0
   146dc:	d1ce      	bne.n	1467c <attsProcReadReq+0x2c>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   146de:	7bb3      	ldrb	r3, [r6, #14]
   146e0:	075a      	lsls	r2, r3, #29
   146e2:	d52f      	bpl.n	14744 <attsProcReadReq+0xf4>
          (pGroup->readCback != NULL))
   146e4:	68a4      	ldr	r4, [r4, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   146e6:	b36c      	cbz	r4, 14744 <attsProcReadReq+0xf4>
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_REQ, 0, pAttr);
   146e8:	9600      	str	r6, [sp, #0]
   146ea:	2300      	movs	r3, #0
   146ec:	f898 001c 	ldrb.w	r0, [r8, #28]
   146f0:	220a      	movs	r2, #10
   146f2:	4629      	mov	r1, r5
   146f4:	47a0      	blx	r4
   146f6:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
   146f8:	2b00      	cmp	r3, #0
   146fa:	d1bf      	bne.n	1467c <attsProcReadReq+0x2c>
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   146fc:	68b2      	ldr	r2, [r6, #8]
   146fe:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   14702:	8812      	ldrh	r2, [r2, #0]
   14704:	1e5c      	subs	r4, r3, #1
                   *pAttr->pLen : (pCcb->mtu - ATT_READ_RSP_LEN);
   14706:	4294      	cmp	r4, r2
   14708:	bfa8      	it	ge
   1470a:	4614      	movge	r4, r2
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   1470c:	b2a7      	uxth	r7, r4
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_RSP_LEN + readLen)) != NULL)
   1470e:	f107 0009 	add.w	r0, r7, #9
   14712:	b280      	uxth	r0, r0
   14714:	f001 f822 	bl	1575c <attMsgAlloc>
   14718:	4605      	mov	r5, r0
   1471a:	b320      	cbz	r0, 14766 <attsProcReadReq+0x116>
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_RSP);
   1471c:	230b      	movs	r3, #11
   1471e:	7203      	strb	r3, [r0, #8]
          memcpy(p, pAttr->pValue, readLen);
   14720:	6871      	ldr	r1, [r6, #4]
   14722:	b2a2      	uxth	r2, r4
   14724:	3009      	adds	r0, #9
   14726:	f7f7 fceb 	bl	c100 <memcpy>
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
   1472a:	1c7a      	adds	r2, r7, #1
   1472c:	f8b8 1018 	ldrh.w	r1, [r8, #24]
   14730:	462b      	mov	r3, r5
   14732:	b292      	uxth	r2, r2
   14734:	2004      	movs	r0, #4
}
   14736:	b002      	add	sp, #8
   14738:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
   1473c:	f005 b98c 	b.w	19a58 <L2cDataReq>
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
   14740:	2302      	movs	r3, #2
   14742:	e79b      	b.n	1467c <attsProcReadReq+0x2c>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   14744:	069b      	lsls	r3, r3, #26
   14746:	d5d9      	bpl.n	146fc <attsProcReadReq+0xac>
   14748:	697c      	ldr	r4, [r7, #20]
   1474a:	2c00      	cmp	r4, #0
   1474c:	d0d6      	beq.n	146fc <attsProcReadReq+0xac>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   1474e:	6873      	ldr	r3, [r6, #4]
   14750:	f898 001c 	ldrb.w	r0, [r8, #28]
   14754:	462a      	mov	r2, r5
   14756:	2105      	movs	r1, #5
   14758:	47a0      	blx	r4
   1475a:	4603      	mov	r3, r0
   1475c:	e7cc      	b.n	146f8 <attsProcReadReq+0xa8>
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
   1475e:	2801      	cmp	r0, #1
   14760:	d8b0      	bhi.n	146c4 <attsProcReadReq+0x74>
    return ATT_ERR_AUTH;
   14762:	2305      	movs	r3, #5
   14764:	e78a      	b.n	1467c <attsProcReadReq+0x2c>
}
   14766:	b002      	add	sp, #8
   14768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return ATT_ERR_AUTHOR;
   1476c:	2308      	movs	r3, #8
   1476e:	e785      	b.n	1467c <attsProcReadReq+0x2c>
   14770:	1000424c 	.word	0x1000424c

00014774 <attsFindUuidInRange>:
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindUuidInRange(uint16_t startHandle, uint16_t endHandle, uint8_t uuidLen,
                             uint8_t *pUuid, attsAttr_t **pAttr, attsGroup_t **pAttrGroup)
{
   14774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14778:	469a      	mov	sl, r3
  attsGroup_t *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1477a:	4b1e      	ldr	r3, [pc, #120]	; (147f4 <attsFindUuidInRange+0x80>)
{
   1477c:	9e08      	ldr	r6, [sp, #32]
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1477e:	681d      	ldr	r5, [r3, #0]
   14780:	2d00      	cmp	r5, #0
   14782:	d033      	beq.n	147ec <attsFindUuidInRange+0x78>
   14784:	4604      	mov	r4, r0
   14786:	460f      	mov	r7, r1
   14788:	4690      	mov	r8, r2
          *pAttrGroup = pGroup;
          return startHandle;
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
   1478a:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1478e:	e004      	b.n	1479a <attsFindUuidInRange+0x26>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14790:	8a6b      	ldrh	r3, [r5, #18]
   14792:	42a3      	cmp	r3, r4
   14794:	d224      	bcs.n	147e0 <attsFindUuidInRange+0x6c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14796:	682d      	ldr	r5, [r5, #0]
   14798:	b345      	cbz	r5, 147ec <attsFindUuidInRange+0x78>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   1479a:	8a28      	ldrh	r0, [r5, #16]
   1479c:	42a0      	cmp	r0, r4
   1479e:	d9f7      	bls.n	14790 <attsFindUuidInRange+0x1c>
   147a0:	42b8      	cmp	r0, r7
   147a2:	d8f8      	bhi.n	14796 <attsFindUuidInRange+0x22>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   147a4:	8a6b      	ldrh	r3, [r5, #18]
   147a6:	4283      	cmp	r3, r0
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   147a8:	4604      	mov	r4, r0
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   147aa:	d3f4      	bcc.n	14796 <attsFindUuidInRange+0x22>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   147ac:	6868      	ldr	r0, [r5, #4]
   147ae:	6030      	str	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   147b0:	e00a      	b.n	147c8 <attsFindUuidInRange+0x54>
        if (startHandle == ATT_HANDLE_MAX)
   147b2:	454c      	cmp	r4, r9
   147b4:	d0ef      	beq.n	14796 <attsFindUuidInRange+0x22>
        {
          break;
        }

        startHandle++;
        (*pAttr)++;
   147b6:	6830      	ldr	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   147b8:	8a6a      	ldrh	r2, [r5, #18]
        startHandle++;
   147ba:	b29c      	uxth	r4, r3
        (*pAttr)++;
   147bc:	3010      	adds	r0, #16
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   147be:	42a2      	cmp	r2, r4
        (*pAttr)++;
   147c0:	6030      	str	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   147c2:	d3e8      	bcc.n	14796 <attsFindUuidInRange+0x22>
   147c4:	42a7      	cmp	r7, r4
   147c6:	d3e6      	bcc.n	14796 <attsFindUuidInRange+0x22>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   147c8:	4652      	mov	r2, sl
   147ca:	4641      	mov	r1, r8
   147cc:	f7ff fdde 	bl	1438c <attsUuidCmp>
        startHandle++;
   147d0:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   147d2:	2800      	cmp	r0, #0
   147d4:	d0ed      	beq.n	147b2 <attsFindUuidInRange+0x3e>
          *pAttrGroup = pGroup;
   147d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
          return startHandle;
   147d8:	4620      	mov	r0, r4
          *pAttrGroup = pGroup;
   147da:	601d      	str	r5, [r3, #0]
    }
  }

  /* no match found */
  return ATT_HANDLE_NONE;
}
   147dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   147e0:	1a23      	subs	r3, r4, r0
   147e2:	6868      	ldr	r0, [r5, #4]
   147e4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   147e8:	6030      	str	r0, [r6, #0]
   147ea:	e7eb      	b.n	147c4 <attsFindUuidInRange+0x50>
  return ATT_HANDLE_NONE;
   147ec:	2000      	movs	r0, #0
}
   147ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   147f2:	bf00      	nop
   147f4:	1000424c 	.word	0x1000424c

000147f8 <attsFindServiceGroupEnd>:
 *
 *  \return Service group end handle.
 */
/*************************************************************************************************/
uint16_t attsFindServiceGroupEnd(uint16_t startHandle)
{
   147f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t      prevHandle;
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};

  /* special case for max handle */
  if (startHandle == ATT_HANDLE_MAX)
   147fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   14800:	b082      	sub	sp, #8
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   14802:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
   14806:	f642 0201 	movw	r2, #10241	; 0x2801
  if (startHandle == ATT_HANDLE_MAX)
   1480a:	4298      	cmp	r0, r3
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   1480c:	f8ad 1000 	strh.w	r1, [sp]
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
   14810:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (startHandle == ATT_HANDLE_MAX)
   14814:	d010      	beq.n	14838 <attsFindServiceGroupEnd+0x40>

  prevHandle = startHandle;
  startHandle++;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14816:	4b1d      	ldr	r3, [pc, #116]	; (1488c <attsFindServiceGroupEnd+0x94>)
   14818:	681e      	ldr	r6, [r3, #0]
  startHandle++;
   1481a:	1c44      	adds	r4, r0, #1
   1481c:	4607      	mov	r7, r0
   1481e:	b2a4      	uxth	r4, r4
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14820:	b156      	cbz	r6, 14838 <attsFindServiceGroupEnd+0x40>
  {
    /* if start handle is less than group start handle */
    if (startHandle < pGroup->startHandle)
   14822:	8a35      	ldrh	r5, [r6, #16]
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
    }

    /*  if start handle within handle range of group */
    if (startHandle <= pGroup->endHandle)
   14824:	8a73      	ldrh	r3, [r6, #18]
   14826:	42ac      	cmp	r4, r5
   14828:	bf38      	it	cc
   1482a:	462c      	movcc	r4, r5
   1482c:	b2a4      	uxth	r4, r4
   1482e:	42a3      	cmp	r3, r4
   14830:	d208      	bcs.n	14844 <attsFindServiceGroupEnd+0x4c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14832:	6836      	ldr	r6, [r6, #0]
   14834:	2e00      	cmp	r6, #0
   14836:	d1f4      	bne.n	14822 <attsFindServiceGroupEnd+0x2a>
    return ATT_HANDLE_MAX;
   14838:	f64f 77ff 	movw	r7, #65535	; 0xffff
    }
  }

  /* next service not found; return 0xFFFF as the last handle in the database */
  return ATT_HANDLE_MAX;
}
   1483c:	4638      	mov	r0, r7
   1483e:	b002      	add	sp, #8
   14840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14844:	6873      	ldr	r3, [r6, #4]
   14846:	1b65      	subs	r5, r4, r5
   14848:	eb03 1505 	add.w	r5, r3, r5, lsl #4
        if (startHandle == ATT_HANDLE_MAX)
   1484c:	f64f 78ff 	movw	r8, #65535	; 0xffff
   14850:	e00c      	b.n	1486c <attsFindServiceGroupEnd+0x74>
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
   14852:	f7ff fd9b 	bl	1438c <attsUuidCmp>
        startHandle++;
   14856:	1c63      	adds	r3, r4, #1
   14858:	b29b      	uxth	r3, r3
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   1485a:	2800      	cmp	r0, #0
   1485c:	d1ee      	bne.n	1483c <attsFindServiceGroupEnd+0x44>
        if (startHandle == ATT_HANDLE_MAX)
   1485e:	4544      	cmp	r4, r8
   14860:	4627      	mov	r7, r4
   14862:	d0e9      	beq.n	14838 <attsFindServiceGroupEnd+0x40>
      while (startHandle <= pGroup->endHandle)
   14864:	8a72      	ldrh	r2, [r6, #18]
   14866:	429a      	cmp	r2, r3
   14868:	461c      	mov	r4, r3
   1486a:	d3e2      	bcc.n	14832 <attsFindServiceGroupEnd+0x3a>
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   1486c:	466a      	mov	r2, sp
   1486e:	2102      	movs	r1, #2
   14870:	4628      	mov	r0, r5
   14872:	f7ff fd8b 	bl	1438c <attsUuidCmp>
   14876:	4603      	mov	r3, r0
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
   14878:	aa01      	add	r2, sp, #4
   1487a:	4628      	mov	r0, r5
   1487c:	2102      	movs	r1, #2
        pAttr++;
   1487e:	3510      	adds	r5, #16
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   14880:	2b00      	cmp	r3, #0
   14882:	d0e6      	beq.n	14852 <attsFindServiceGroupEnd+0x5a>
}
   14884:	4638      	mov	r0, r7
   14886:	b002      	add	sp, #8
   14888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1488c:	1000424c 	.word	0x1000424c

00014890 <attsProcReadBlobReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadBlobReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   14890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;

  /* parse handle and offset */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
   14894:	7a93      	ldrb	r3, [r2, #10]
   14896:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(offset, pPacket);
   14898:	7ad7      	ldrb	r7, [r2, #11]
   1489a:	f892 800c 	ldrb.w	r8, [r2, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   1489e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
   148a2:	b085      	sub	sp, #20
  BSTREAM_TO_UINT16(handle, pPacket);
   148a4:	b2a4      	uxth	r4, r4
{
   148a6:	4606      	mov	r6, r0

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   148a8:	a903      	add	r1, sp, #12
   148aa:	4620      	mov	r0, r4
   148ac:	f7ff fda4 	bl	143f8 <attsFindByHandle>
   148b0:	2800      	cmp	r0, #0
   148b2:	d04c      	beq.n	1494e <attsProcReadBlobReq+0xbe>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   148b4:	7bc3      	ldrb	r3, [r0, #15]
   148b6:	4605      	mov	r5, r0
   148b8:	4622      	mov	r2, r4
   148ba:	7f30      	ldrb	r0, [r6, #28]
   148bc:	2101      	movs	r1, #1
   148be:	f7ff fdb3 	bl	14428 <attsPermissions>
   148c2:	4603      	mov	r3, r0
   148c4:	b138      	cbz	r0, 148d6 <attsProcReadBlobReq+0x46>
    err = ATT_ERR_HANDLE;
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_BLOB_REQ, handle, err);
   148c6:	8b30      	ldrh	r0, [r6, #24]
   148c8:	4622      	mov	r2, r4
   148ca:	210c      	movs	r1, #12
   148cc:	f7ff fae4 	bl	13e98 <attsErrRsp>
  }
}
   148d0:	b005      	add	sp, #20
   148d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (offset > *pAttr->pLen)
   148d6:	68ab      	ldr	r3, [r5, #8]
  BSTREAM_TO_UINT16(offset, pPacket);
   148d8:	eb07 2708 	add.w	r7, r7, r8, lsl #8
    else if (offset > *pAttr->pLen)
   148dc:	881b      	ldrh	r3, [r3, #0]
  BSTREAM_TO_UINT16(offset, pPacket);
   148de:	b2bf      	uxth	r7, r7
    else if (offset > *pAttr->pLen)
   148e0:	42bb      	cmp	r3, r7
   148e2:	d336      	bcc.n	14952 <attsProcReadBlobReq+0xc2>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   148e4:	7baa      	ldrb	r2, [r5, #14]
   148e6:	0751      	lsls	r1, r2, #29
   148e8:	d535      	bpl.n	14956 <attsProcReadBlobReq+0xc6>
          (pGroup->readCback != NULL))
   148ea:	9903      	ldr	r1, [sp, #12]
   148ec:	f8d1 8008 	ldr.w	r8, [r1, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   148f0:	f1b8 0f00 	cmp.w	r8, #0
   148f4:	d02f      	beq.n	14956 <attsProcReadBlobReq+0xc6>
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_BLOB_REQ, offset, pAttr);
   148f6:	9500      	str	r5, [sp, #0]
   148f8:	463b      	mov	r3, r7
   148fa:	7f30      	ldrb	r0, [r6, #28]
   148fc:	220c      	movs	r2, #12
   148fe:	4621      	mov	r1, r4
   14900:	47c0      	blx	r8
   14902:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
   14904:	2b00      	cmp	r3, #0
   14906:	d1de      	bne.n	148c6 <attsProcReadBlobReq+0x36>
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   14908:	68ab      	ldr	r3, [r5, #8]
   1490a:	881b      	ldrh	r3, [r3, #0]
   1490c:	8b74      	ldrh	r4, [r6, #26]
   1490e:	1bda      	subs	r2, r3, r7
   14910:	3c01      	subs	r4, #1
                   (*pAttr->pLen - offset) : (pCcb->mtu - ATT_READ_BLOB_RSP_LEN);
   14912:	4294      	cmp	r4, r2
   14914:	bfa8      	it	ge
   14916:	4614      	movge	r4, r2
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   14918:	fa1f f984 	uxth.w	r9, r4
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_BLOB_RSP_LEN + readLen)) != NULL)
   1491c:	f109 0009 	add.w	r0, r9, #9
   14920:	b280      	uxth	r0, r0
   14922:	f000 ff1b 	bl	1575c <attMsgAlloc>
   14926:	4680      	mov	r8, r0
   14928:	2800      	cmp	r0, #0
   1492a:	d0d1      	beq.n	148d0 <attsProcReadBlobReq+0x40>
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_BLOB_RSP);
   1492c:	230d      	movs	r3, #13
   1492e:	7203      	strb	r3, [r0, #8]
          memcpy(p, (pAttr->pValue + offset), readLen);
   14930:	6869      	ldr	r1, [r5, #4]
   14932:	464a      	mov	r2, r9
   14934:	4439      	add	r1, r7
   14936:	3009      	adds	r0, #9
   14938:	f7f7 fbe2 	bl	c100 <memcpy>
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_BLOB_RSP_LEN + readLen), pBuf);
   1493c:	f109 0201 	add.w	r2, r9, #1
   14940:	8b31      	ldrh	r1, [r6, #24]
   14942:	4643      	mov	r3, r8
   14944:	b292      	uxth	r2, r2
   14946:	2004      	movs	r0, #4
   14948:	f005 f886 	bl	19a58 <L2cDataReq>
  if (err)
   1494c:	e7c0      	b.n	148d0 <attsProcReadBlobReq+0x40>
    err = ATT_ERR_HANDLE;
   1494e:	2301      	movs	r3, #1
   14950:	e7b9      	b.n	148c6 <attsProcReadBlobReq+0x36>
      err = ATT_ERR_OFFSET;
   14952:	2307      	movs	r3, #7
   14954:	e7b7      	b.n	148c6 <attsProcReadBlobReq+0x36>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   14956:	0692      	lsls	r2, r2, #26
   14958:	d5d8      	bpl.n	1490c <attsProcReadBlobReq+0x7c>
   1495a:	4a07      	ldr	r2, [pc, #28]	; (14978 <attsProcReadBlobReq+0xe8>)
   1495c:	f8d2 8014 	ldr.w	r8, [r2, #20]
   14960:	f1b8 0f00 	cmp.w	r8, #0
   14964:	d0d2      	beq.n	1490c <attsProcReadBlobReq+0x7c>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   14966:	686b      	ldr	r3, [r5, #4]
   14968:	7f30      	ldrb	r0, [r6, #28]
   1496a:	4622      	mov	r2, r4
   1496c:	2105      	movs	r1, #5
   1496e:	47c0      	blx	r8
   14970:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
   14972:	2b00      	cmp	r3, #0
   14974:	d1a7      	bne.n	148c6 <attsProcReadBlobReq+0x36>
   14976:	e7c7      	b.n	14908 <attsProcReadBlobReq+0x78>
   14978:	1000424c 	.word	0x1000424c

0001497c <attsProcFindTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14980:	ed2d 8b02 	vpush	{d8}
  uint16_t    nextHandle;
  uint8_t     err = ATT_SUCCESS;

  /* parse handles and uuid; pPacket then points to the value in the request */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
   14984:	7a93      	ldrb	r3, [r2, #10]
   14986:	f892 9009 	ldrb.w	r9, [r2, #9]
{
   1498a:	b087      	sub	sp, #28
  BSTREAM_TO_UINT16(startHandle, pPacket);
   1498c:	eb09 2903 	add.w	r9, r9, r3, lsl #8
   14990:	fa1f f389 	uxth.w	r3, r9
   14994:	9301      	str	r3, [sp, #4]
{
   14996:	4683      	mov	fp, r0

  /* set len to the value length */
  len -= ATT_FIND_TYPE_REQ_LEN;

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   14998:	b143      	cbz	r3, 149ac <attsProcFindTypeReq+0x30>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   1499a:	7b13      	ldrb	r3, [r2, #12]
   1499c:	7ad6      	ldrb	r6, [r2, #11]
   1499e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  if ((startHandle == 0) || (startHandle > endHandle))
   149a2:	9b01      	ldr	r3, [sp, #4]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   149a4:	b2b6      	uxth	r6, r6
  if ((startHandle == 0) || (startHandle > endHandle))
   149a6:	42b3      	cmp	r3, r6
   149a8:	4692      	mov	sl, r2
   149aa:	d90e      	bls.n	149ca <attsProcFindTypeReq+0x4e>
      err = ATT_ERR_RESOURCES;
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   149ac:	4658      	mov	r0, fp
   149ae:	f7ff fa9d 	bl	13eec <attsDiscBusy>
    err = ATT_ERR_HANDLE;
   149b2:	2301      	movs	r3, #1
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
   149b4:	f8bb 0018 	ldrh.w	r0, [fp, #24]
   149b8:	9a01      	ldr	r2, [sp, #4]
   149ba:	2106      	movs	r1, #6
  }
}
   149bc:	b007      	add	sp, #28
   149be:	ecbd 8b02 	vpop	{d8}
   149c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
   149c6:	f7ff ba67 	b.w	13e98 <attsErrRsp>
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   149ca:	8b40      	ldrh	r0, [r0, #26]
   149cc:	3008      	adds	r0, #8
   149ce:	b280      	uxth	r0, r0
   149d0:	460c      	mov	r4, r1
   149d2:	f000 fec3 	bl	1575c <attMsgAlloc>
   149d6:	9002      	str	r0, [sp, #8]
   149d8:	2800      	cmp	r0, #0
   149da:	f000 8091 	beq.w	14b00 <attsProcFindTypeReq+0x184>
  len -= ATT_FIND_TYPE_REQ_LEN;
   149de:	1fe1      	subs	r1, r4, #7
   149e0:	b28b      	uxth	r3, r1
   149e2:	9303      	str	r3, [sp, #12]
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   149e4:	2307      	movs	r3, #7
   149e6:	7203      	strb	r3, [r0, #8]
  pPacket += ATT_16_UUID_LEN;
   149e8:	f10a 030f 	add.w	r3, sl, #15
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   149ec:	f100 0109 	add.w	r1, r0, #9
  pPacket += ATT_16_UUID_LEN;
   149f0:	ee08 3a10 	vmov	s16, r3
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   149f4:	9c01      	ldr	r4, [sp, #4]
   149f6:	f8cd a010 	str.w	sl, [sp, #16]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   149fa:	f10a 070d 	add.w	r7, sl, #13
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   149fe:	9105      	str	r1, [sp, #20]
        if (startHandle == ATT_HANDLE_MAX)
   14a00:	f64f 78ff 	movw	r8, #65535	; 0xffff
   14a04:	468a      	mov	sl, r1
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14a06:	4b46      	ldr	r3, [pc, #280]	; (14b20 <attsProcFindTypeReq+0x1a4>)
   14a08:	681d      	ldr	r5, [r3, #0]
   14a0a:	b92d      	cbnz	r5, 14a18 <attsProcFindTypeReq+0x9c>
   14a0c:	e03a      	b.n	14a84 <attsProcFindTypeReq+0x108>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14a0e:	8a6b      	ldrh	r3, [r5, #18]
   14a10:	42a3      	cmp	r3, r4
   14a12:	d231      	bcs.n	14a78 <attsProcFindTypeReq+0xfc>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14a14:	682d      	ldr	r5, [r5, #0]
   14a16:	b3ad      	cbz	r5, 14a84 <attsProcFindTypeReq+0x108>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   14a18:	f8b5 9010 	ldrh.w	r9, [r5, #16]
   14a1c:	454c      	cmp	r4, r9
   14a1e:	d2f6      	bcs.n	14a0e <attsProcFindTypeReq+0x92>
   14a20:	454e      	cmp	r6, r9
   14a22:	d3f7      	bcc.n	14a14 <attsProcFindTypeReq+0x98>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14a24:	8a6b      	ldrh	r3, [r5, #18]
   14a26:	454b      	cmp	r3, r9
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14a28:	464c      	mov	r4, r9
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14a2a:	d3f3      	bcc.n	14a14 <attsProcFindTypeReq+0x98>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14a2c:	f8d5 9004 	ldr.w	r9, [r5, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   14a30:	e009      	b.n	14a46 <attsProcFindTypeReq+0xca>
        if (startHandle == ATT_HANDLE_MAX)
   14a32:	4544      	cmp	r4, r8
        (*pAttr)++;
   14a34:	f109 0910 	add.w	r9, r9, #16
        if (startHandle == ATT_HANDLE_MAX)
   14a38:	d0ec      	beq.n	14a14 <attsProcFindTypeReq+0x98>
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   14a3a:	8a6a      	ldrh	r2, [r5, #18]
        startHandle++;
   14a3c:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   14a3e:	42a2      	cmp	r2, r4
   14a40:	d3e8      	bcc.n	14a14 <attsProcFindTypeReq+0x98>
   14a42:	42a6      	cmp	r6, r4
   14a44:	d3e6      	bcc.n	14a14 <attsProcFindTypeReq+0x98>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   14a46:	4648      	mov	r0, r9
   14a48:	463a      	mov	r2, r7
   14a4a:	2102      	movs	r1, #2
   14a4c:	f7ff fc9e 	bl	1438c <attsUuidCmp>
        startHandle++;
   14a50:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   14a52:	2800      	cmp	r0, #0
   14a54:	d0ed      	beq.n	14a32 <attsProcFindTypeReq+0xb6>
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   14a56:	b1ac      	cbz	r4, 14a84 <attsProcFindTypeReq+0x108>
        if ((pAttr->permissions & ATTS_PERMIT_READ) &&
   14a58:	f899 200f 	ldrb.w	r2, [r9, #15]
   14a5c:	07d3      	lsls	r3, r2, #31
   14a5e:	d506      	bpl.n	14a6e <attsProcFindTypeReq+0xf2>
   14a60:	9b03      	ldr	r3, [sp, #12]
   14a62:	b373      	cbz	r3, 14ac2 <attsProcFindTypeReq+0x146>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   14a64:	f8d9 2008 	ldr.w	r2, [r9, #8]
            ((len == 0) ||
   14a68:	8812      	ldrh	r2, [r2, #0]
   14a6a:	429a      	cmp	r2, r3
   14a6c:	d020      	beq.n	14ab0 <attsProcFindTypeReq+0x134>
        if ((nextHandle >= endHandle) || (nextHandle == ATT_HANDLE_MAX))
   14a6e:	42b4      	cmp	r4, r6
   14a70:	d208      	bcs.n	14a84 <attsProcFindTypeReq+0x108>
        handle = nextHandle + 1;
   14a72:	3401      	adds	r4, #1
   14a74:	b2a4      	uxth	r4, r4
   14a76:	e7c6      	b.n	14a06 <attsProcFindTypeReq+0x8a>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14a78:	686b      	ldr	r3, [r5, #4]
   14a7a:	eba4 0909 	sub.w	r9, r4, r9
   14a7e:	eb03 1909 	add.w	r9, r3, r9, lsl #4
   14a82:	e7de      	b.n	14a42 <attsProcFindTypeReq+0xc6>
      if (p == (pBuf + L2C_PAYLOAD_START + 1))
   14a84:	9b05      	ldr	r3, [sp, #20]
   14a86:	459a      	cmp	sl, r3
   14a88:	4654      	mov	r4, sl
   14a8a:	d041      	beq.n	14b10 <attsProcFindTypeReq+0x194>
  attsDiscBusy(pCcb);
   14a8c:	4658      	mov	r0, fp
   14a8e:	f7ff fa2d 	bl	13eec <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   14a92:	9b02      	ldr	r3, [sp, #8]
   14a94:	f8bb 1018 	ldrh.w	r1, [fp, #24]
   14a98:	f103 0208 	add.w	r2, r3, #8
   14a9c:	1aa2      	subs	r2, r4, r2
   14a9e:	b292      	uxth	r2, r2
   14aa0:	2004      	movs	r0, #4
}
   14aa2:	b007      	add	sp, #28
   14aa4:	ecbd 8b02 	vpop	{d8}
   14aa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   14aac:	f004 bfd4 	b.w	19a58 <L2cDataReq>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   14ab0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   14ab4:	ee18 0a10 	vmov	r0, s16
   14ab8:	461a      	mov	r2, r3
   14aba:	f00e fc0d 	bl	232d8 <memcmp>
   14abe:	2800      	cmp	r0, #0
   14ac0:	d1d5      	bne.n	14a6e <attsProcFindTypeReq+0xf2>
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   14ac2:	9a04      	ldr	r2, [sp, #16]
   14ac4:	7b53      	ldrb	r3, [r2, #13]
   14ac6:	b9cb      	cbnz	r3, 14afc <attsProcFindTypeReq+0x180>
   14ac8:	7b93      	ldrb	r3, [r2, #14]
   14aca:	2b28      	cmp	r3, #40	; 0x28
            nextHandle = attsFindServiceGroupEnd(handle);
   14acc:	4620      	mov	r0, r4
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   14ace:	d01c      	beq.n	14b0a <attsProcFindTypeReq+0x18e>
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   14ad0:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   14ad4:	9a02      	ldr	r2, [sp, #8]
   14ad6:	3308      	adds	r3, #8
   14ad8:	4413      	add	r3, r2
   14ada:	f10a 0204 	add.w	r2, sl, #4
   14ade:	429a      	cmp	r2, r3
   14ae0:	d8d0      	bhi.n	14a84 <attsProcFindTypeReq+0x108>
            UINT16_TO_BSTREAM(p, handle);
   14ae2:	f88a 4000 	strb.w	r4, [sl]
            UINT16_TO_BSTREAM(p, nextHandle);
   14ae6:	0a03      	lsrs	r3, r0, #8
            UINT16_TO_BSTREAM(p, handle);
   14ae8:	0a24      	lsrs	r4, r4, #8
   14aea:	f88a 4001 	strb.w	r4, [sl, #1]
            UINT16_TO_BSTREAM(p, nextHandle);
   14aee:	f88a 0002 	strb.w	r0, [sl, #2]
   14af2:	f88a 3003 	strb.w	r3, [sl, #3]
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   14af6:	4604      	mov	r4, r0
            UINT16_TO_BSTREAM(p, nextHandle);
   14af8:	4692      	mov	sl, r2
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   14afa:	e7b8      	b.n	14a6e <attsProcFindTypeReq+0xf2>
   14afc:	4620      	mov	r0, r4
   14afe:	e7e7      	b.n	14ad0 <attsProcFindTypeReq+0x154>
  attsDiscBusy(pCcb);
   14b00:	4658      	mov	r0, fp
   14b02:	f7ff f9f3 	bl	13eec <attsDiscBusy>
      err = ATT_ERR_RESOURCES;
   14b06:	2311      	movs	r3, #17
   14b08:	e754      	b.n	149b4 <attsProcFindTypeReq+0x38>
            nextHandle = attsFindServiceGroupEnd(handle);
   14b0a:	f7ff fe75 	bl	147f8 <attsFindServiceGroupEnd>
   14b0e:	e7df      	b.n	14ad0 <attsProcFindTypeReq+0x154>
        WsfMsgFree(pBuf);
   14b10:	9802      	ldr	r0, [sp, #8]
   14b12:	f009 fa49 	bl	1dfa8 <WsfMsgFree>
  attsDiscBusy(pCcb);
   14b16:	4658      	mov	r0, fp
   14b18:	f7ff f9e8 	bl	13eec <attsDiscBusy>
        err = ATT_ERR_NOT_FOUND;
   14b1c:	230a      	movs	r3, #10
   14b1e:	e749      	b.n	149b4 <attsProcFindTypeReq+0x38>
   14b20:	1000424c 	.word	0x1000424c

00014b24 <attsProcReadTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   14b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
   14b28:	3905      	subs	r1, #5
  BSTREAM_TO_UINT16(startHandle, pPacket);
   14b2a:	7a93      	ldrb	r3, [r2, #10]
   14b2c:	7a54      	ldrb	r4, [r2, #9]
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
   14b2e:	b2cd      	uxtb	r5, r1
  BSTREAM_TO_UINT16(startHandle, pPacket);
   14b30:	eb04 2403 	add.w	r4, r4, r3, lsl #8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   14b34:	2d02      	cmp	r5, #2
{
   14b36:	b087      	sub	sp, #28
   14b38:	4617      	mov	r7, r2
   14b3a:	4683      	mov	fp, r0
  BSTREAM_TO_UINT16(startHandle, pPacket);
   14b3c:	b2a4      	uxth	r4, r4
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   14b3e:	d00b      	beq.n	14b58 <attsProcReadTypeReq+0x34>
   14b40:	2d10      	cmp	r5, #16
   14b42:	d009      	beq.n	14b58 <attsProcReadTypeReq+0x34>
  {
    err = ATT_ERR_INVALID_PDU;
   14b44:	2304      	movs	r3, #4
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
   14b46:	f8bb 0018 	ldrh.w	r0, [fp, #24]
   14b4a:	4622      	mov	r2, r4
   14b4c:	2108      	movs	r1, #8
  }
}
   14b4e:	b007      	add	sp, #28
   14b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
   14b54:	f7ff b9a0 	b.w	13e98 <attsErrRsp>
  else if ((startHandle == 0) || (startHandle > endHandle))
   14b58:	b90c      	cbnz	r4, 14b5e <attsProcReadTypeReq+0x3a>
    err = ATT_ERR_HANDLE;
   14b5a:	2301      	movs	r3, #1
   14b5c:	e7f3      	b.n	14b46 <attsProcReadTypeReq+0x22>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   14b5e:	7b3b      	ldrb	r3, [r7, #12]
   14b60:	f897 800b 	ldrb.w	r8, [r7, #11]
   14b64:	eb08 2803 	add.w	r8, r8, r3, lsl #8
   14b68:	fa1f f888 	uxth.w	r8, r8
  else if ((startHandle == 0) || (startHandle > endHandle))
   14b6c:	4544      	cmp	r4, r8
   14b6e:	d8f4      	bhi.n	14b5a <attsProcReadTypeReq+0x36>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14b70:	4baf      	ldr	r3, [pc, #700]	; (14e30 <attsProcReadTypeReq+0x30c>)
   14b72:	681e      	ldr	r6, [r3, #0]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   14b74:	f107 0a0d 	add.w	sl, r7, #13
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14b78:	b946      	cbnz	r6, 14b8c <attsProcReadTypeReq+0x68>
   14b7a:	e109      	b.n	14d90 <attsProcReadTypeReq+0x26c>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14b7c:	8a73      	ldrh	r3, [r6, #18]
   14b7e:	42a3      	cmp	r3, r4
   14b80:	f080 80fd 	bcs.w	14d7e <attsProcReadTypeReq+0x25a>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14b84:	6836      	ldr	r6, [r6, #0]
   14b86:	2e00      	cmp	r6, #0
   14b88:	f000 8102 	beq.w	14d90 <attsProcReadTypeReq+0x26c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   14b8c:	f8b6 9010 	ldrh.w	r9, [r6, #16]
   14b90:	454c      	cmp	r4, r9
   14b92:	d2f3      	bcs.n	14b7c <attsProcReadTypeReq+0x58>
   14b94:	45c8      	cmp	r8, r9
   14b96:	d3f5      	bcc.n	14b84 <attsProcReadTypeReq+0x60>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14b98:	8a73      	ldrh	r3, [r6, #18]
   14b9a:	454b      	cmp	r3, r9
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14b9c:	464c      	mov	r4, r9
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14b9e:	d3f1      	bcc.n	14b84 <attsProcReadTypeReq+0x60>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14ba0:	f8d6 9004 	ldr.w	r9, [r6, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   14ba4:	e00b      	b.n	14bbe <attsProcReadTypeReq+0x9a>
        if (startHandle == ATT_HANDLE_MAX)
   14ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14baa:	4294      	cmp	r4, r2
        (*pAttr)++;
   14bac:	f109 0910 	add.w	r9, r9, #16
        if (startHandle == ATT_HANDLE_MAX)
   14bb0:	d0e8      	beq.n	14b84 <attsProcReadTypeReq+0x60>
        startHandle++;
   14bb2:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   14bb4:	8a73      	ldrh	r3, [r6, #18]
   14bb6:	42a3      	cmp	r3, r4
   14bb8:	d3e4      	bcc.n	14b84 <attsProcReadTypeReq+0x60>
   14bba:	45a0      	cmp	r8, r4
   14bbc:	d3e2      	bcc.n	14b84 <attsProcReadTypeReq+0x60>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   14bbe:	4648      	mov	r0, r9
   14bc0:	4652      	mov	r2, sl
   14bc2:	4629      	mov	r1, r5
   14bc4:	f7ff fbe2 	bl	1438c <attsUuidCmp>
        startHandle++;
   14bc8:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   14bca:	2800      	cmp	r0, #0
   14bcc:	d0eb      	beq.n	14ba6 <attsProcReadTypeReq+0x82>
    if (handle == ATT_HANDLE_NONE)
   14bce:	2c00      	cmp	r4, #0
   14bd0:	f000 80de 	beq.w	14d90 <attsProcReadTypeReq+0x26c>
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   14bd4:	f899 300f 	ldrb.w	r3, [r9, #15]
   14bd8:	f89b 001c 	ldrb.w	r0, [fp, #28]
   14bdc:	4622      	mov	r2, r4
   14bde:	2101      	movs	r1, #1
   14be0:	f7ff fc22 	bl	14428 <attsPermissions>
   14be4:	4603      	mov	r3, r0
   14be6:	2800      	cmp	r0, #0
   14be8:	d1ad      	bne.n	14b46 <attsProcReadTypeReq+0x22>
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   14bea:	f899 200e 	ldrb.w	r2, [r9, #14]
   14bee:	0750      	lsls	r0, r2, #29
   14bf0:	f140 80e8 	bpl.w	14dc4 <attsProcReadTypeReq+0x2a0>
             (pGroup->readCback != NULL))
   14bf4:	68b6      	ldr	r6, [r6, #8]
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   14bf6:	2e00      	cmp	r6, #0
   14bf8:	f000 80e4 	beq.w	14dc4 <attsProcReadTypeReq+0x2a0>
      err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   14bfc:	f8cd 9000 	str.w	r9, [sp]
   14c00:	f89b 001c 	ldrb.w	r0, [fp, #28]
   14c04:	2208      	movs	r2, #8
   14c06:	4621      	mov	r1, r4
   14c08:	47b0      	blx	r6
   14c0a:	4603      	mov	r3, r0
    if (err == ATT_SUCCESS)
   14c0c:	2b00      	cmp	r3, #0
   14c0e:	d19a      	bne.n	14b46 <attsProcReadTypeReq+0x22>
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
   14c10:	4b88      	ldr	r3, [pc, #544]	; (14e34 <attsProcReadTypeReq+0x310>)
   14c12:	7b79      	ldrb	r1, [r7, #13]
   14c14:	781a      	ldrb	r2, [r3, #0]
   14c16:	4291      	cmp	r1, r2
   14c18:	f000 80e7 	beq.w	14dea <attsProcReadTypeReq+0x2c6>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   14c1c:	f8bb 001a 	ldrh.w	r0, [fp, #26]
   14c20:	3008      	adds	r0, #8
   14c22:	b280      	uxth	r0, r0
   14c24:	f000 fd9a 	bl	1575c <attMsgAlloc>
   14c28:	4606      	mov	r6, r0
   14c2a:	2800      	cmp	r0, #0
   14c2c:	f000 80db 	beq.w	14de6 <attsProcReadTypeReq+0x2c2>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   14c30:	2309      	movs	r3, #9
   14c32:	7203      	strb	r3, [r0, #8]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   14c34:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14c38:	881a      	ldrh	r2, [r3, #0]
   14c3a:	f8bb 301a 	ldrh.w	r3, [fp, #26]
        UINT16_TO_BSTREAM(p, handle);
   14c3e:	7284      	strb	r4, [r0, #10]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   14c40:	3b04      	subs	r3, #4
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t));
   14c42:	4293      	cmp	r3, r2
   14c44:	bf28      	it	cs
   14c46:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   14c48:	b2da      	uxtb	r2, r3
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   14c4a:	1c97      	adds	r7, r2, #2
        UINT16_TO_BSTREAM(p, handle);
   14c4c:	0a23      	lsrs	r3, r4, #8
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   14c4e:	7247      	strb	r7, [r0, #9]
        UINT16_TO_BSTREAM(p, handle);
   14c50:	72c3      	strb	r3, [r0, #11]
   14c52:	f100 030c 	add.w	r3, r0, #12
        memcpy(p, pAttr->pValue, attLen);
   14c56:	f8d9 1004 	ldr.w	r1, [r9, #4]
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   14c5a:	9705      	str	r7, [sp, #20]
        memcpy(p, pAttr->pValue, attLen);
   14c5c:	4618      	mov	r0, r3
   14c5e:	4691      	mov	r9, r2
   14c60:	f7f7 fa4e 	bl	c100 <memcpy>
        handle++;
   14c64:	3401      	adds	r4, #1
   14c66:	e9cd b603 	strd	fp, r6, [sp, #12]
   14c6a:	b2a4      	uxth	r4, r4
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   14c6c:	19c7      	adds	r7, r0, r7
   14c6e:	46cb      	mov	fp, r9
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14c70:	4b6f      	ldr	r3, [pc, #444]	; (14e30 <attsProcReadTypeReq+0x30c>)
   14c72:	f8d3 9000 	ldr.w	r9, [r3]
   14c76:	1ebb      	subs	r3, r7, #2
   14c78:	9302      	str	r3, [sp, #8]
   14c7a:	f1b9 0f00 	cmp.w	r9, #0
   14c7e:	f000 808f 	beq.w	14da0 <attsProcReadTypeReq+0x27c>
   14c82:	464b      	mov	r3, r9
   14c84:	46a9      	mov	r9, r5
   14c86:	461d      	mov	r5, r3
   14c88:	e007      	b.n	14c9a <attsProcReadTypeReq+0x176>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14c8a:	8a6b      	ldrh	r3, [r5, #18]
   14c8c:	42a3      	cmp	r3, r4
   14c8e:	f080 8082 	bcs.w	14d96 <attsProcReadTypeReq+0x272>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14c92:	682d      	ldr	r5, [r5, #0]
   14c94:	2d00      	cmp	r5, #0
   14c96:	f000 8083 	beq.w	14da0 <attsProcReadTypeReq+0x27c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   14c9a:	8a2e      	ldrh	r6, [r5, #16]
   14c9c:	42b4      	cmp	r4, r6
   14c9e:	d2f4      	bcs.n	14c8a <attsProcReadTypeReq+0x166>
   14ca0:	45b0      	cmp	r8, r6
   14ca2:	d3f6      	bcc.n	14c92 <attsProcReadTypeReq+0x16e>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14ca4:	8a6b      	ldrh	r3, [r5, #18]
   14ca6:	42b3      	cmp	r3, r6
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14ca8:	4634      	mov	r4, r6
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14caa:	d3f2      	bcc.n	14c92 <attsProcReadTypeReq+0x16e>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14cac:	686e      	ldr	r6, [r5, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   14cae:	e00d      	b.n	14ccc <attsProcReadTypeReq+0x1a8>
        if (startHandle == ATT_HANDLE_MAX)
   14cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14cb4:	429c      	cmp	r4, r3
        (*pAttr)++;
   14cb6:	f106 0610 	add.w	r6, r6, #16
        startHandle++;
   14cba:	f104 0301 	add.w	r3, r4, #1
        if (startHandle == ATT_HANDLE_MAX)
   14cbe:	d0e8      	beq.n	14c92 <attsProcReadTypeReq+0x16e>
        startHandle++;
   14cc0:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   14cc2:	8a6b      	ldrh	r3, [r5, #18]
   14cc4:	42a3      	cmp	r3, r4
   14cc6:	d3e4      	bcc.n	14c92 <attsProcReadTypeReq+0x16e>
   14cc8:	45a0      	cmp	r8, r4
   14cca:	d3e2      	bcc.n	14c92 <attsProcReadTypeReq+0x16e>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   14ccc:	4630      	mov	r0, r6
   14cce:	4652      	mov	r2, sl
   14cd0:	4649      	mov	r1, r9
   14cd2:	f7ff fb5b 	bl	1438c <attsUuidCmp>
   14cd6:	2800      	cmp	r0, #0
   14cd8:	d0ea      	beq.n	14cb0 <attsProcReadTypeReq+0x18c>
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   14cda:	462b      	mov	r3, r5
   14cdc:	464d      	mov	r5, r9
   14cde:	4699      	mov	r9, r3
   14ce0:	2c00      	cmp	r4, #0
   14ce2:	d05d      	beq.n	14da0 <attsProcReadTypeReq+0x27c>
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   14ce4:	7bb3      	ldrb	r3, [r6, #14]
   14ce6:	075a      	lsls	r2, r3, #29
   14ce8:	d55d      	bpl.n	14da6 <attsProcReadTypeReq+0x282>
              (pGroup->readCback != NULL))
   14cea:	f8d9 9008 	ldr.w	r9, [r9, #8]
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   14cee:	f1b9 0f00 	cmp.w	r9, #0
   14cf2:	d058      	beq.n	14da6 <attsProcReadTypeReq+0x282>
            cbackErr = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   14cf4:	9b03      	ldr	r3, [sp, #12]
   14cf6:	9600      	str	r6, [sp, #0]
   14cf8:	7f18      	ldrb	r0, [r3, #28]
   14cfa:	2208      	movs	r2, #8
   14cfc:	2300      	movs	r3, #0
   14cfe:	4621      	mov	r1, r4
   14d00:	47c8      	blx	r9
          if ((cbackErr == ATT_SUCCESS) &&
   14d02:	2800      	cmp	r0, #0
   14d04:	d14c      	bne.n	14da0 <attsProcReadTypeReq+0x27c>
              (*pAttr->pLen == attLen) &&
   14d06:	68b3      	ldr	r3, [r6, #8]
          if ((cbackErr == ATT_SUCCESS) &&
   14d08:	881b      	ldrh	r3, [r3, #0]
   14d0a:	455b      	cmp	r3, fp
   14d0c:	d148      	bne.n	14da0 <attsProcReadTypeReq+0x27c>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   14d0e:	9a03      	ldr	r2, [sp, #12]
   14d10:	7bf3      	ldrb	r3, [r6, #15]
   14d12:	7f10      	ldrb	r0, [r2, #28]
   14d14:	2101      	movs	r1, #1
   14d16:	4622      	mov	r2, r4
   14d18:	f7ff fb86 	bl	14428 <attsPermissions>
              (*pAttr->pLen == attLen) &&
   14d1c:	2800      	cmp	r0, #0
   14d1e:	d13f      	bne.n	14da0 <attsProcReadTypeReq+0x27c>
            if ((p + attLen + sizeof(uint16_t)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   14d20:	9a03      	ldr	r2, [sp, #12]
   14d22:	8b53      	ldrh	r3, [r2, #26]
   14d24:	9a04      	ldr	r2, [sp, #16]
   14d26:	3308      	adds	r3, #8
   14d28:	4413      	add	r3, r2
   14d2a:	eb0b 0907 	add.w	r9, fp, r7
   14d2e:	4599      	cmp	r9, r3
   14d30:	d875      	bhi.n	14e1e <attsProcReadTypeReq+0x2fa>
              UINT16_TO_BSTREAM(p, handle);
   14d32:	0a23      	lsrs	r3, r4, #8
   14d34:	f807 3c01 	strb.w	r3, [r7, #-1]
   14d38:	f807 4c02 	strb.w	r4, [r7, #-2]
              memcpy(p, pAttr->pValue, attLen);
   14d3c:	6871      	ldr	r1, [r6, #4]
   14d3e:	465a      	mov	r2, fp
   14d40:	4638      	mov	r0, r7
   14d42:	f7f7 f9dd 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
   14d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14d4a:	429c      	cmp	r4, r3
   14d4c:	d005      	beq.n	14d5a <attsProcReadTypeReq+0x236>
          if (++handle > endHandle)
   14d4e:	3401      	adds	r4, #1
   14d50:	9b05      	ldr	r3, [sp, #20]
   14d52:	b2a4      	uxth	r4, r4
   14d54:	45a0      	cmp	r8, r4
   14d56:	441f      	add	r7, r3
   14d58:	d28a      	bcs.n	14c70 <attsProcReadTypeReq+0x14c>
   14d5a:	e9dd b603 	ldrd	fp, r6, [sp, #12]
   14d5e:	f8cd 9008 	str.w	r9, [sp, #8]
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   14d62:	9b02      	ldr	r3, [sp, #8]
   14d64:	f8bb 1018 	ldrh.w	r1, [fp, #24]
   14d68:	f106 0208 	add.w	r2, r6, #8
   14d6c:	1a9a      	subs	r2, r3, r2
   14d6e:	b292      	uxth	r2, r2
   14d70:	4633      	mov	r3, r6
   14d72:	2004      	movs	r0, #4
}
   14d74:	b007      	add	sp, #28
   14d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   14d7a:	f004 be6d 	b.w	19a58 <L2cDataReq>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14d7e:	6873      	ldr	r3, [r6, #4]
   14d80:	eba4 0909 	sub.w	r9, r4, r9
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   14d84:	4544      	cmp	r4, r8
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14d86:	eb03 1909 	add.w	r9, r3, r9, lsl #4
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   14d8a:	f67f af18 	bls.w	14bbe <attsProcReadTypeReq+0x9a>
   14d8e:	e6f9      	b.n	14b84 <attsProcReadTypeReq+0x60>
      err = ATT_ERR_NOT_FOUND;
   14d90:	230a      	movs	r3, #10
    startHandle = handle;
   14d92:	2400      	movs	r4, #0
   14d94:	e6d7      	b.n	14b46 <attsProcReadTypeReq+0x22>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   14d96:	686b      	ldr	r3, [r5, #4]
   14d98:	1ba6      	subs	r6, r4, r6
   14d9a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   14d9e:	e793      	b.n	14cc8 <attsProcReadTypeReq+0x1a4>
   14da0:	e9dd b603 	ldrd	fp, r6, [sp, #12]
   14da4:	e7dd      	b.n	14d62 <attsProcReadTypeReq+0x23e>
          else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   14da6:	069b      	lsls	r3, r3, #26
   14da8:	d5ad      	bpl.n	14d06 <attsProcReadTypeReq+0x1e2>
   14daa:	4b21      	ldr	r3, [pc, #132]	; (14e30 <attsProcReadTypeReq+0x30c>)
   14dac:	f8d3 9014 	ldr.w	r9, [r3, #20]
   14db0:	f1b9 0f00 	cmp.w	r9, #0
   14db4:	d0a7      	beq.n	14d06 <attsProcReadTypeReq+0x1e2>
            cbackErr = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   14db6:	9a03      	ldr	r2, [sp, #12]
   14db8:	6873      	ldr	r3, [r6, #4]
   14dba:	7f10      	ldrb	r0, [r2, #28]
   14dbc:	2105      	movs	r1, #5
   14dbe:	4622      	mov	r2, r4
   14dc0:	47c8      	blx	r9
   14dc2:	e79e      	b.n	14d02 <attsProcReadTypeReq+0x1de>
    else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   14dc4:	0691      	lsls	r1, r2, #26
   14dc6:	f57f af23 	bpl.w	14c10 <attsProcReadTypeReq+0xec>
   14dca:	4b19      	ldr	r3, [pc, #100]	; (14e30 <attsProcReadTypeReq+0x30c>)
   14dcc:	695e      	ldr	r6, [r3, #20]
   14dce:	2e00      	cmp	r6, #0
   14dd0:	f43f af1e 	beq.w	14c10 <attsProcReadTypeReq+0xec>
      err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   14dd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   14dd8:	f89b 001c 	ldrb.w	r0, [fp, #28]
   14ddc:	4622      	mov	r2, r4
   14dde:	2105      	movs	r1, #5
   14de0:	47b0      	blx	r6
   14de2:	4603      	mov	r3, r0
   14de4:	e712      	b.n	14c0c <attsProcReadTypeReq+0xe8>
        err = ATT_ERR_RESOURCES;
   14de6:	2311      	movs	r3, #17
   14de8:	e6ad      	b.n	14b46 <attsProcReadTypeReq+0x22>
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
   14dea:	785b      	ldrb	r3, [r3, #1]
   14dec:	f89a 2001 	ldrb.w	r2, [sl, #1]
   14df0:	429a      	cmp	r2, r3
   14df2:	f47f af13 	bne.w	14c1c <attsProcReadTypeReq+0xf8>
   14df6:	f7fe fcfb 	bl	137f0 <attsCsfGetHashUpdateStatus>
   14dfa:	2800      	cmp	r0, #0
   14dfc:	f43f af0e 	beq.w	14c1c <attsProcReadTypeReq+0xf8>
        pCcb->pPendDbHashRsp = WsfBufAlloc(sizeof(attPendDbHashRsp_t));
   14e00:	2004      	movs	r0, #4
   14e02:	f009 f869 	bl	1ded8 <WsfBufAlloc>
   14e06:	f8cb 0020 	str.w	r0, [fp, #32]
        if (pCcb->pPendDbHashRsp)
   14e0a:	b160      	cbz	r0, 14e26 <attsProcReadTypeReq+0x302>
          pCcb->pPendDbHashRsp->startHandle = startHandle;
   14e0c:	2300      	movs	r3, #0
   14e0e:	f364 030f 	bfi	r3, r4, #0, #16
   14e12:	f364 431f 	bfi	r3, r4, #16, #16
   14e16:	6003      	str	r3, [r0, #0]
}
   14e18:	b007      	add	sp, #28
   14e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e1e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   14e22:	4616      	mov	r6, r2
   14e24:	e79d      	b.n	14d62 <attsProcReadTypeReq+0x23e>
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
   14e26:	f8bb 0018 	ldrh.w	r0, [fp, #24]
   14e2a:	2311      	movs	r3, #17
   14e2c:	e68d      	b.n	14b4a <attsProcReadTypeReq+0x26>
   14e2e:	bf00      	nop
   14e30:	1000424c 	.word	0x1000424c
   14e34:	00026828 	.word	0x00026828

00014e38 <attsProcReadMultReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadMultReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   14e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e3c:	4607      	mov	r7, r0

  /* points to first handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* allocate max size buffer for response */
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   14e3e:	8b40      	ldrh	r0, [r0, #26]
   14e40:	3008      	adds	r0, #8
{
   14e42:	b087      	sub	sp, #28
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   14e44:	b280      	uxth	r0, r0
{
   14e46:	460c      	mov	r4, r1
   14e48:	4616      	mov	r6, r2
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   14e4a:	f000 fc87 	bl	1575c <attMsgAlloc>
   14e4e:	4682      	mov	sl, r0
   14e50:	2800      	cmp	r0, #0
   14e52:	d07d      	beq.n	14f50 <attsProcReadMultReq+0x118>
  {
    p = pBuf + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   14e54:	220f      	movs	r2, #15
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   14e56:	f104 0108 	add.w	r1, r4, #8
   14e5a:	1873      	adds	r3, r6, r1
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   14e5c:	7202      	strb	r2, [r0, #8]
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   14e5e:	f106 0209 	add.w	r2, r6, #9

    /* while there are handles remaining and there is space in response buffer */
    while (pPacket < pEnd)
   14e62:	4293      	cmp	r3, r2
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   14e64:	f100 0809 	add.w	r8, r0, #9
    while (pPacket < pEnd)
   14e68:	d965      	bls.n	14f36 <attsProcReadMultReq+0xfe>
   14e6a:	eba3 0906 	sub.w	r9, r3, r6
   14e6e:	f1a9 090a 	sub.w	r9, r9, #10
   14e72:	f106 030d 	add.w	r3, r6, #13
   14e76:	f029 0901 	bic.w	r9, r9, #1
   14e7a:	4499      	add	r9, r3
   14e7c:	360b      	adds	r6, #11
   14e7e:	e014      	b.n	14eaa <attsProcReadMultReq+0x72>
        break;
      }

      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
          (pGroup->readCback != NULL))
   14e80:	9a05      	ldr	r2, [sp, #20]
   14e82:	f8d2 b008 	ldr.w	fp, [r2, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   14e86:	f1bb 0f00 	cmp.w	fp, #0
   14e8a:	d026      	beq.n	14eda <attsProcReadMultReq+0xa2>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_MULT_REQ, 0, pAttr);
   14e8c:	9500      	str	r5, [sp, #0]
   14e8e:	4603      	mov	r3, r0
   14e90:	220e      	movs	r2, #14
   14e92:	7f38      	ldrb	r0, [r7, #28]
   14e94:	4621      	mov	r1, r4
   14e96:	47d8      	blx	fp
        if (err != ATT_SUCCESS)
   14e98:	bb70      	cbnz	r0, 14ef8 <attsProcReadMultReq+0xc0>
        {
          break;
        }
      }

      if (p < (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   14e9a:	8b7a      	ldrh	r2, [r7, #26]
   14e9c:	3208      	adds	r2, #8
   14e9e:	4452      	add	r2, sl
   14ea0:	4542      	cmp	r2, r8
   14ea2:	d837      	bhi.n	14f14 <attsProcReadMultReq+0xdc>
    while (pPacket < pEnd)
   14ea4:	3602      	adds	r6, #2
   14ea6:	45b1      	cmp	r9, r6
   14ea8:	d045      	beq.n	14f36 <attsProcReadMultReq+0xfe>
      BSTREAM_TO_UINT16(handle, pPacket);
   14eaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   14eae:	f816 4c02 	ldrb.w	r4, [r6, #-2]
   14eb2:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   14eb6:	b2a4      	uxth	r4, r4
      if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   14eb8:	a905      	add	r1, sp, #20
   14eba:	4620      	mov	r0, r4
   14ebc:	f7ff fa9c 	bl	143f8 <attsFindByHandle>
   14ec0:	4605      	mov	r5, r0
   14ec2:	2800      	cmp	r0, #0
   14ec4:	d047      	beq.n	14f56 <attsProcReadMultReq+0x11e>
      if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   14ec6:	7bc3      	ldrb	r3, [r0, #15]
   14ec8:	7f38      	ldrb	r0, [r7, #28]
   14eca:	4622      	mov	r2, r4
   14ecc:	2101      	movs	r1, #1
   14ece:	f7ff faab 	bl	14428 <attsPermissions>
   14ed2:	b988      	cbnz	r0, 14ef8 <attsProcReadMultReq+0xc0>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   14ed4:	7bab      	ldrb	r3, [r5, #14]
   14ed6:	075a      	lsls	r2, r3, #29
   14ed8:	d4d2      	bmi.n	14e80 <attsProcReadMultReq+0x48>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   14eda:	069b      	lsls	r3, r3, #26
   14edc:	d5dd      	bpl.n	14e9a <attsProcReadMultReq+0x62>
   14ede:	4b1f      	ldr	r3, [pc, #124]	; (14f5c <attsProcReadMultReq+0x124>)
   14ee0:	f8d3 b014 	ldr.w	fp, [r3, #20]
   14ee4:	f1bb 0f00 	cmp.w	fp, #0
   14ee8:	d0d7      	beq.n	14e9a <attsProcReadMultReq+0x62>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   14eea:	686b      	ldr	r3, [r5, #4]
   14eec:	7f38      	ldrb	r0, [r7, #28]
   14eee:	4622      	mov	r2, r4
   14ef0:	2105      	movs	r1, #5
   14ef2:	47d8      	blx	fp
        if (err != ATT_SUCCESS)
   14ef4:	2800      	cmp	r0, #0
   14ef6:	d0d0      	beq.n	14e9a <attsProcReadMultReq+0x62>
   14ef8:	4603      	mov	r3, r0
  else
  {
    /* discard response buffer */
    if (pBuf != NULL)
    {
      WsfMsgFree(pBuf);
   14efa:	4650      	mov	r0, sl
   14efc:	9303      	str	r3, [sp, #12]
   14efe:	f009 f853 	bl	1dfa8 <WsfMsgFree>
   14f02:	9b03      	ldr	r3, [sp, #12]
    }

    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
   14f04:	8b38      	ldrh	r0, [r7, #24]
   14f06:	4622      	mov	r2, r4
   14f08:	210e      	movs	r1, #14
   14f0a:	f7fe ffc5 	bl	13e98 <attsErrRsp>
  }
}
   14f0e:	b007      	add	sp, #28
   14f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
   14f14:	68ab      	ldr	r3, [r5, #8]
        memcpy(p, pAttr->pValue, readLen);
   14f16:	6869      	ldr	r1, [r5, #4]
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
   14f18:	881c      	ldrh	r4, [r3, #0]
        readLen = (pBuf + pCcb->mtu + L2C_PAYLOAD_START) - p;
   14f1a:	eba2 0208 	sub.w	r2, r2, r8
   14f1e:	b292      	uxth	r2, r2
        memcpy(p, pAttr->pValue, readLen);
   14f20:	4294      	cmp	r4, r2
   14f22:	bf28      	it	cs
   14f24:	4614      	movcs	r4, r2
   14f26:	4640      	mov	r0, r8
   14f28:	4622      	mov	r2, r4
    while (pPacket < pEnd)
   14f2a:	3602      	adds	r6, #2
        memcpy(p, pAttr->pValue, readLen);
   14f2c:	f7f7 f8e8 	bl	c100 <memcpy>
    while (pPacket < pEnd)
   14f30:	45b1      	cmp	r9, r6
        p += readLen;
   14f32:	44a0      	add	r8, r4
    while (pPacket < pEnd)
   14f34:	d1b9      	bne.n	14eaa <attsProcReadMultReq+0x72>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   14f36:	f10a 0208 	add.w	r2, sl, #8
   14f3a:	eba8 0202 	sub.w	r2, r8, r2
   14f3e:	8b39      	ldrh	r1, [r7, #24]
   14f40:	4653      	mov	r3, sl
   14f42:	b292      	uxth	r2, r2
   14f44:	2004      	movs	r0, #4
   14f46:	f004 fd87 	bl	19a58 <L2cDataReq>
}
   14f4a:	b007      	add	sp, #28
   14f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ATT_ERR_RESOURCES;
   14f50:	2311      	movs	r3, #17
  uint16_t    handle = ATT_HANDLE_NONE;
   14f52:	4604      	mov	r4, r0
   14f54:	e7d6      	b.n	14f04 <attsProcReadMultReq+0xcc>
        err = ATT_ERR_HANDLE;
   14f56:	2301      	movs	r3, #1
   14f58:	e7cf      	b.n	14efa <attsProcReadMultReq+0xc2>
   14f5a:	bf00      	nop
   14f5c:	1000424c 	.word	0x1000424c

00014f60 <attsProcReadGroupTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadGroupTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   14f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f64:	b089      	sub	sp, #36	; 0x24
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     err = ATT_SUCCESS;
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   14f66:	f44f 5320 	mov.w	r3, #10240	; 0x2800

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
   14f6a:	f892 8009 	ldrb.w	r8, [r2, #9]
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   14f6e:	f8ad 301c 	strh.w	r3, [sp, #28]
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
   14f72:	3905      	subs	r1, #5
  BSTREAM_TO_UINT16(startHandle, pPacket);
   14f74:	7a93      	ldrb	r3, [r2, #10]
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
   14f76:	b2cc      	uxtb	r4, r1
  BSTREAM_TO_UINT16(startHandle, pPacket);
   14f78:	eb08 2803 	add.w	r8, r8, r3, lsl #8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   14f7c:	2c02      	cmp	r4, #2
{
   14f7e:	4606      	mov	r6, r0
  BSTREAM_TO_UINT16(startHandle, pPacket);
   14f80:	fa1f f888 	uxth.w	r8, r8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   14f84:	d00c      	beq.n	14fa0 <attsProcReadGroupTypeReq+0x40>
   14f86:	2c10      	cmp	r4, #16
   14f88:	d00a      	beq.n	14fa0 <attsProcReadGroupTypeReq+0x40>
      }
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   14f8a:	f7fe ffaf 	bl	13eec <attsDiscBusy>
    err = ATT_ERR_INVALID_PDU;
   14f8e:	2304      	movs	r3, #4
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
   14f90:	8b30      	ldrh	r0, [r6, #24]
   14f92:	4642      	mov	r2, r8
   14f94:	2110      	movs	r1, #16
   14f96:	f7fe ff7f 	bl	13e98 <attsErrRsp>
  }
}
   14f9a:	b009      	add	sp, #36	; 0x24
   14f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((startHandle == 0) || (startHandle > endHandle))
   14fa0:	f1b8 0f00 	cmp.w	r8, #0
   14fa4:	d104      	bne.n	14fb0 <attsProcReadGroupTypeReq+0x50>
  attsDiscBusy(pCcb);
   14fa6:	4630      	mov	r0, r6
   14fa8:	f7fe ffa0 	bl	13eec <attsDiscBusy>
    err = ATT_ERR_HANDLE;
   14fac:	2301      	movs	r3, #1
   14fae:	e7ef      	b.n	14f90 <attsProcReadGroupTypeReq+0x30>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   14fb0:	7b13      	ldrb	r3, [r2, #12]
   14fb2:	7ad7      	ldrb	r7, [r2, #11]
   14fb4:	eb07 2703 	add.w	r7, r7, r3, lsl #8
   14fb8:	b2bf      	uxth	r7, r7
  else if ((startHandle == 0) || (startHandle > endHandle))
   14fba:	45b8      	cmp	r8, r7
   14fbc:	d8f3      	bhi.n	14fa6 <attsProcReadGroupTypeReq+0x46>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   14fbe:	f102 050d 	add.w	r5, r2, #13
  else if (!attsUuid16Cmp(primSvcUuid, uuidLen, pPacket))
   14fc2:	462a      	mov	r2, r5
   14fc4:	4621      	mov	r1, r4
   14fc6:	a807      	add	r0, sp, #28
   14fc8:	f7ff fa02 	bl	143d0 <attsUuid16Cmp>
   14fcc:	b920      	cbnz	r0, 14fd8 <attsProcReadGroupTypeReq+0x78>
  attsDiscBusy(pCcb);
   14fce:	4630      	mov	r0, r6
   14fd0:	f7fe ff8c 	bl	13eec <attsDiscBusy>
    err = ATT_ERR_GROUP_TYPE;
   14fd4:	2310      	movs	r3, #16
   14fd6:	e7db      	b.n	14f90 <attsProcReadGroupTypeReq+0x30>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14fd8:	4b8d      	ldr	r3, [pc, #564]	; (15210 <attsProcReadGroupTypeReq+0x2b0>)
   14fda:	f8d3 a000 	ldr.w	sl, [r3]
   14fde:	f1ba 0f00 	cmp.w	sl, #0
   14fe2:	d046      	beq.n	15072 <attsProcReadGroupTypeReq+0x112>
        if (startHandle == ATT_HANDLE_MAX)
   14fe4:	4653      	mov	r3, sl
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14fe6:	46c1      	mov	r9, r8
        if (startHandle == ATT_HANDLE_MAX)
   14fe8:	46a2      	mov	sl, r4
   14fea:	461c      	mov	r4, r3
   14fec:	e005      	b.n	14ffa <attsProcReadGroupTypeReq+0x9a>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   14fee:	8a63      	ldrh	r3, [r4, #18]
   14ff0:	454b      	cmp	r3, r9
   14ff2:	d238      	bcs.n	15066 <attsProcReadGroupTypeReq+0x106>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   14ff4:	6824      	ldr	r4, [r4, #0]
   14ff6:	2c00      	cmp	r4, #0
   14ff8:	d03b      	beq.n	15072 <attsProcReadGroupTypeReq+0x112>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   14ffa:	f8b4 b010 	ldrh.w	fp, [r4, #16]
   14ffe:	45cb      	cmp	fp, r9
   15000:	d9f5      	bls.n	14fee <attsProcReadGroupTypeReq+0x8e>
   15002:	455f      	cmp	r7, fp
   15004:	d3f6      	bcc.n	14ff4 <attsProcReadGroupTypeReq+0x94>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   15006:	8a63      	ldrh	r3, [r4, #18]
   15008:	455b      	cmp	r3, fp
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1500a:	46d9      	mov	r9, fp
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   1500c:	d3f2      	bcc.n	14ff4 <attsProcReadGroupTypeReq+0x94>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1500e:	f8d4 b004 	ldr.w	fp, [r4, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   15012:	e00e      	b.n	15032 <attsProcReadGroupTypeReq+0xd2>
        if (startHandle == ATT_HANDLE_MAX)
   15014:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15018:	4599      	cmp	r9, r3
        (*pAttr)++;
   1501a:	f10b 0b10 	add.w	fp, fp, #16
        startHandle++;
   1501e:	f109 0301 	add.w	r3, r9, #1
        if (startHandle == ATT_HANDLE_MAX)
   15022:	d0e7      	beq.n	14ff4 <attsProcReadGroupTypeReq+0x94>
        startHandle++;
   15024:	fa1f f983 	uxth.w	r9, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   15028:	8a63      	ldrh	r3, [r4, #18]
   1502a:	454b      	cmp	r3, r9
   1502c:	d3e2      	bcc.n	14ff4 <attsProcReadGroupTypeReq+0x94>
   1502e:	454f      	cmp	r7, r9
   15030:	d3e0      	bcc.n	14ff4 <attsProcReadGroupTypeReq+0x94>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   15032:	4658      	mov	r0, fp
   15034:	462a      	mov	r2, r5
   15036:	4651      	mov	r1, sl
   15038:	f7ff f9a8 	bl	1438c <attsUuidCmp>
   1503c:	2800      	cmp	r0, #0
   1503e:	d0e9      	beq.n	15014 <attsProcReadGroupTypeReq+0xb4>
    if (handle == ATT_HANDLE_NONE)
   15040:	4654      	mov	r4, sl
   15042:	f1b9 0f00 	cmp.w	r9, #0
   15046:	d014      	beq.n	15072 <attsProcReadGroupTypeReq+0x112>
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   15048:	f89b 300f 	ldrb.w	r3, [fp, #15]
   1504c:	7f30      	ldrb	r0, [r6, #28]
   1504e:	464a      	mov	r2, r9
   15050:	2101      	movs	r1, #1
   15052:	f7ff f9e9 	bl	14428 <attsPermissions>
   15056:	b188      	cbz	r0, 1507c <attsProcReadGroupTypeReq+0x11c>
   15058:	9001      	str	r0, [sp, #4]
  attsDiscBusy(pCcb);
   1505a:	4630      	mov	r0, r6
   1505c:	f7fe ff46 	bl	13eec <attsDiscBusy>
   15060:	46c8      	mov	r8, r9
   15062:	9b01      	ldr	r3, [sp, #4]
   15064:	e794      	b.n	14f90 <attsProcReadGroupTypeReq+0x30>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   15066:	6863      	ldr	r3, [r4, #4]
   15068:	eba9 0b0b 	sub.w	fp, r9, fp
   1506c:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
   15070:	e7dd      	b.n	1502e <attsProcReadGroupTypeReq+0xce>
  attsDiscBusy(pCcb);
   15072:	4630      	mov	r0, r6
   15074:	f7fe ff3a 	bl	13eec <attsDiscBusy>
      err = ATT_ERR_NOT_FOUND;
   15078:	230a      	movs	r3, #10
   1507a:	e789      	b.n	14f90 <attsProcReadGroupTypeReq+0x30>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1507c:	8b70      	ldrh	r0, [r6, #26]
   1507e:	3008      	adds	r0, #8
   15080:	b280      	uxth	r0, r0
   15082:	f000 fb6b 	bl	1575c <attMsgAlloc>
   15086:	4682      	mov	sl, r0
   15088:	2800      	cmp	r0, #0
   1508a:	f000 80bc 	beq.w	15206 <attsProcReadGroupTypeReq+0x2a6>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_GROUP_TYPE_RSP);
   1508e:	2311      	movs	r3, #17
   15090:	7203      	strb	r3, [r0, #8]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   15092:	f8db 3008 	ldr.w	r3, [fp, #8]
   15096:	881a      	ldrh	r2, [r3, #0]
   15098:	8b73      	ldrh	r3, [r6, #26]
        UINT16_TO_BSTREAM(p, handle);
   1509a:	f880 900a 	strb.w	r9, [r0, #10]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   1509e:	3b06      	subs	r3, #6
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)));
   150a0:	4293      	cmp	r3, r2
   150a2:	bf28      	it	cs
   150a4:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   150a6:	b2db      	uxtb	r3, r3
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   150a8:	1d1a      	adds	r2, r3, #4
   150aa:	9301      	str	r3, [sp, #4]
        UINT16_TO_BSTREAM(p, handle);
   150ac:	ea4f 2319 	mov.w	r3, r9, lsr #8
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   150b0:	7242      	strb	r2, [r0, #9]
        UINT16_TO_BSTREAM(p, handle);
   150b2:	72c3      	strb	r3, [r0, #11]
        handle = attsFindServiceGroupEnd(handle);
   150b4:	4648      	mov	r0, r9
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   150b6:	9205      	str	r2, [sp, #20]
        handle = attsFindServiceGroupEnd(handle);
   150b8:	f7ff fb9e 	bl	147f8 <attsFindServiceGroupEnd>
        UINT16_TO_BSTREAM(p, handle);
   150bc:	0a03      	lsrs	r3, r0, #8
   150be:	f88a 000c 	strb.w	r0, [sl, #12]
   150c2:	f88a 300d 	strb.w	r3, [sl, #13]
        memcpy(p, pAttr->pValue, attLen);
   150c6:	f8db 1004 	ldr.w	r1, [fp, #4]
   150ca:	f8dd b004 	ldr.w	fp, [sp, #4]
        UINT16_TO_BSTREAM(p, handle);
   150ce:	f10a 080e 	add.w	r8, sl, #14
        handle = attsFindServiceGroupEnd(handle);
   150d2:	4681      	mov	r9, r0
        memcpy(p, pAttr->pValue, attLen);
   150d4:	465a      	mov	r2, fp
   150d6:	4640      	mov	r0, r8
   150d8:	f7f7 f812 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
   150dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   150e0:	4591      	cmp	r9, r2
        p += attLen;
   150e2:	44d8      	add	r8, fp
          if (handle == ATT_HANDLE_MAX)
   150e4:	d075      	beq.n	151d2 <attsProcReadGroupTypeReq+0x272>
          if (++handle > endHandle)
   150e6:	f109 0901 	add.w	r9, r9, #1
   150ea:	fa1f f989 	uxth.w	r9, r9
   150ee:	454f      	cmp	r7, r9
   150f0:	d36f      	bcc.n	151d2 <attsProcReadGroupTypeReq+0x272>
   150f2:	f108 0204 	add.w	r2, r8, #4
   150f6:	464b      	mov	r3, r9
   150f8:	f8cd a004 	str.w	sl, [sp, #4]
   150fc:	46a1      	mov	r9, r4
   150fe:	46b8      	mov	r8, r7
   15100:	4692      	mov	sl, r2
   15102:	9602      	str	r6, [sp, #8]
   15104:	461c      	mov	r4, r3
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   15106:	4b42      	ldr	r3, [pc, #264]	; (15210 <attsProcReadGroupTypeReq+0x2b0>)
   15108:	681e      	ldr	r6, [r3, #0]
   1510a:	f1aa 0304 	sub.w	r3, sl, #4
   1510e:	9303      	str	r3, [sp, #12]
   15110:	b936      	cbnz	r6, 15120 <attsProcReadGroupTypeReq+0x1c0>
   15112:	e073      	b.n	151fc <attsProcReadGroupTypeReq+0x29c>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   15114:	8a72      	ldrh	r2, [r6, #18]
   15116:	42a2      	cmp	r2, r4
   15118:	d26b      	bcs.n	151f2 <attsProcReadGroupTypeReq+0x292>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1511a:	6836      	ldr	r6, [r6, #0]
   1511c:	2e00      	cmp	r6, #0
   1511e:	d06d      	beq.n	151fc <attsProcReadGroupTypeReq+0x29c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   15120:	8a33      	ldrh	r3, [r6, #16]
   15122:	42a3      	cmp	r3, r4
   15124:	d9f6      	bls.n	15114 <attsProcReadGroupTypeReq+0x1b4>
   15126:	4598      	cmp	r8, r3
   15128:	d3f7      	bcc.n	1511a <attsProcReadGroupTypeReq+0x1ba>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   1512a:	8a72      	ldrh	r2, [r6, #18]
   1512c:	429a      	cmp	r2, r3
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1512e:	461c      	mov	r4, r3
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   15130:	d3f3      	bcc.n	1511a <attsProcReadGroupTypeReq+0x1ba>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   15132:	6877      	ldr	r7, [r6, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   15134:	e00d      	b.n	15152 <attsProcReadGroupTypeReq+0x1f2>
        if (startHandle == ATT_HANDLE_MAX)
   15136:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1513a:	429c      	cmp	r4, r3
        (*pAttr)++;
   1513c:	f107 0710 	add.w	r7, r7, #16
        startHandle++;
   15140:	f104 0301 	add.w	r3, r4, #1
        if (startHandle == ATT_HANDLE_MAX)
   15144:	d0e9      	beq.n	1511a <attsProcReadGroupTypeReq+0x1ba>
        startHandle++;
   15146:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   15148:	8a73      	ldrh	r3, [r6, #18]
   1514a:	42a3      	cmp	r3, r4
   1514c:	d3e5      	bcc.n	1511a <attsProcReadGroupTypeReq+0x1ba>
   1514e:	45a0      	cmp	r8, r4
   15150:	d3e3      	bcc.n	1511a <attsProcReadGroupTypeReq+0x1ba>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   15152:	4638      	mov	r0, r7
   15154:	462a      	mov	r2, r5
   15156:	4649      	mov	r1, r9
   15158:	f7ff f918 	bl	1438c <attsUuidCmp>
   1515c:	2800      	cmp	r0, #0
   1515e:	d0ea      	beq.n	15136 <attsProcReadGroupTypeReq+0x1d6>
          if ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   15160:	2c00      	cmp	r4, #0
   15162:	d04b      	beq.n	151fc <attsProcReadGroupTypeReq+0x29c>
          if ((*pAttr->pLen == attLen) &&
   15164:	68bb      	ldr	r3, [r7, #8]
   15166:	881b      	ldrh	r3, [r3, #0]
   15168:	455b      	cmp	r3, fp
   1516a:	d147      	bne.n	151fc <attsProcReadGroupTypeReq+0x29c>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   1516c:	9e02      	ldr	r6, [sp, #8]
   1516e:	7bfb      	ldrb	r3, [r7, #15]
   15170:	7f30      	ldrb	r0, [r6, #28]
   15172:	4622      	mov	r2, r4
   15174:	2101      	movs	r1, #1
   15176:	f7ff f957 	bl	14428 <attsPermissions>
          if ((*pAttr->pLen == attLen) &&
   1517a:	2800      	cmp	r0, #0
   1517c:	d13e      	bne.n	151fc <attsProcReadGroupTypeReq+0x29c>
                (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   1517e:	8b72      	ldrh	r2, [r6, #26]
   15180:	9b01      	ldr	r3, [sp, #4]
   15182:	3208      	adds	r2, #8
   15184:	441a      	add	r2, r3
   15186:	eb0b 030a 	add.w	r3, fp, sl
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
   1518a:	4293      	cmp	r3, r2
   1518c:	9304      	str	r3, [sp, #16]
   1518e:	d835      	bhi.n	151fc <attsProcReadGroupTypeReq+0x29c>
              UINT16_TO_BSTREAM(p, handle);
   15190:	0a22      	lsrs	r2, r4, #8
   15192:	f80a 4c04 	strb.w	r4, [sl, #-4]
   15196:	f80a 2c03 	strb.w	r2, [sl, #-3]
              handle = attsFindServiceGroupEnd(handle);
   1519a:	4620      	mov	r0, r4
   1519c:	f7ff fb2c 	bl	147f8 <attsFindServiceGroupEnd>
              UINT16_TO_BSTREAM(p, handle);
   151a0:	0a02      	lsrs	r2, r0, #8
   151a2:	f80a 0c02 	strb.w	r0, [sl, #-2]
   151a6:	f80a 2c01 	strb.w	r2, [sl, #-1]
              handle = attsFindServiceGroupEnd(handle);
   151aa:	4604      	mov	r4, r0
              memcpy(p, pAttr->pValue, attLen);
   151ac:	6879      	ldr	r1, [r7, #4]
   151ae:	465a      	mov	r2, fp
   151b0:	4650      	mov	r0, sl
   151b2:	f7f6 ffa5 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
   151b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   151ba:	429c      	cmp	r4, r3
   151bc:	9b04      	ldr	r3, [sp, #16]
   151be:	d005      	beq.n	151cc <attsProcReadGroupTypeReq+0x26c>
          if (++handle > endHandle)
   151c0:	3401      	adds	r4, #1
   151c2:	9a05      	ldr	r2, [sp, #20]
   151c4:	b2a4      	uxth	r4, r4
   151c6:	45a0      	cmp	r8, r4
   151c8:	4492      	add	sl, r2
   151ca:	d29c      	bcs.n	15106 <attsProcReadGroupTypeReq+0x1a6>
   151cc:	e9dd a601 	ldrd	sl, r6, [sp, #4]
   151d0:	4698      	mov	r8, r3
  attsDiscBusy(pCcb);
   151d2:	4630      	mov	r0, r6
   151d4:	f7fe fe8a 	bl	13eec <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   151d8:	f10a 0208 	add.w	r2, sl, #8
   151dc:	eba8 0202 	sub.w	r2, r8, r2
   151e0:	8b31      	ldrh	r1, [r6, #24]
   151e2:	4653      	mov	r3, sl
   151e4:	b292      	uxth	r2, r2
   151e6:	2004      	movs	r0, #4
   151e8:	f004 fc36 	bl	19a58 <L2cDataReq>
}
   151ec:	b009      	add	sp, #36	; 0x24
   151ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   151f2:	6872      	ldr	r2, [r6, #4]
   151f4:	1ae3      	subs	r3, r4, r3
   151f6:	eb02 1703 	add.w	r7, r2, r3, lsl #4
   151fa:	e7a8      	b.n	1514e <attsProcReadGroupTypeReq+0x1ee>
   151fc:	e9dd 6802 	ldrd	r6, r8, [sp, #8]
   15200:	f8dd a004 	ldr.w	sl, [sp, #4]
   15204:	e7e5      	b.n	151d2 <attsProcReadGroupTypeReq+0x272>
  attsDiscBusy(pCcb);
   15206:	4630      	mov	r0, r6
   15208:	f7fe fe70 	bl	13eec <attsDiscBusy>
        err = ATT_ERR_RESOURCES;
   1520c:	2311      	movs	r3, #17
   1520e:	e6bf      	b.n	14f90 <attsProcReadGroupTypeReq+0x30>
   15210:	1000424c 	.word	0x1000424c

00015214 <AttsSetCsrk>:
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetCsrk(dmConnId_t connId, uint8_t *pCsrk, bool_t authenticated)
{
  attsSignCcbByConnId(connId)->pCsrk = pCsrk;
   15214:	4b03      	ldr	r3, [pc, #12]	; (15224 <AttsSetCsrk+0x10>)
  return &attsSignCb.ccb[connId - 1];
   15216:	3801      	subs	r0, #1
  attsSignCcbByConnId(connId)->pCsrk = pCsrk;
   15218:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1521c:	6041      	str	r1, [r0, #4]
  attsSignCcbByConnId(connId)->authenticated = authenticated;
   1521e:	7302      	strb	r2, [r0, #12]
}
   15220:	4770      	bx	lr
   15222:	bf00      	nop
   15224:	10004268 	.word	0x10004268

00015228 <AttsSetSignCounter>:
 *  \return None.
 */
/*************************************************************************************************/
void AttsSetSignCounter(dmConnId_t connId, uint32_t signCounter)
{
  attsSignCcbByConnId(connId)->signCounter = signCounter;
   15228:	4b02      	ldr	r3, [pc, #8]	; (15234 <AttsSetSignCounter+0xc>)
   1522a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1522e:	f840 1c10 	str.w	r1, [r0, #-16]
}
   15232:	4770      	bx	lr
   15234:	10004268 	.word	0x10004268

00015238 <AttsGetSignCounter>:
 *  \return Sign counter.
 */
/*************************************************************************************************/
uint32_t AttsGetSignCounter(dmConnId_t connId)
{
  return attsSignCcbByConnId(connId)->signCounter;
   15238:	4b02      	ldr	r3, [pc, #8]	; (15244 <AttsGetSignCounter+0xc>)
   1523a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1523e:	f850 0c10 	ldr.w	r0, [r0, #-16]
   15242:	4770      	bx	lr
   15244:	10004268 	.word	0x10004268

00015248 <attsProcWrite>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcWrite(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   15248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t     err = ATT_SUCCESS;

  /* parse opcode handle, calculate write length */
  pPacket += L2C_PAYLOAD_START;
  BSTREAM_TO_UINT8(opcode, pPacket);
  BSTREAM_TO_UINT16(handle, pPacket);
   1524c:	7a93      	ldrb	r3, [r2, #10]
   1524e:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT8(opcode, pPacket);
   15250:	f892 9008 	ldrb.w	r9, [r2, #8]
  BSTREAM_TO_UINT16(handle, pPacket);
   15254:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
   15258:	b087      	sub	sp, #28
  BSTREAM_TO_UINT16(handle, pPacket);
   1525a:	b2a4      	uxth	r4, r4
{
   1525c:	460d      	mov	r5, r1
   1525e:	4606      	mov	r6, r0
  writeLen = len - ATT_WRITE_REQ_LEN;

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   15260:	a905      	add	r1, sp, #20
   15262:	4620      	mov	r0, r4
{
   15264:	4617      	mov	r7, r2
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   15266:	f7ff f8c7 	bl	143f8 <attsFindByHandle>
   1526a:	b350      	cbz	r0, 152c2 <attsProcWrite+0x7a>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   1526c:	7bc3      	ldrb	r3, [r0, #15]
   1526e:	4680      	mov	r8, r0
   15270:	4622      	mov	r2, r4
   15272:	7f30      	ldrb	r0, [r6, #28]
   15274:	2110      	movs	r1, #16
   15276:	f7ff f8d7 	bl	14428 <attsPermissions>
   1527a:	4603      	mov	r3, r0
   1527c:	b158      	cbz	r0, 15296 <attsProcWrite+0x4e>
  {
    err = ATT_ERR_HANDLE;
  }

  /* send error response for write req only */
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   1527e:	f1b9 0f12 	cmp.w	r9, #18
   15282:	d121      	bne.n	152c8 <attsProcWrite+0x80>
  {
    if (err == ATT_RSP_PENDING)
   15284:	2b79      	cmp	r3, #121	; 0x79
   15286:	d114      	bne.n	152b2 <attsProcWrite+0x6a>
    {
      /* set response pending */
      pCcb->control |= ATT_CCB_STATUS_RSP_PENDING;
   15288:	7f73      	ldrb	r3, [r6, #29]
   1528a:	f043 0308 	orr.w	r3, r3, #8
   1528e:	7773      	strb	r3, [r6, #29]
    else
    {
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    }
  }
}
   15290:	b007      	add	sp, #28
   15292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   15296:	f898 300e 	ldrb.w	r3, [r8, #14]
   1529a:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  writeLen = len - ATT_WRITE_REQ_LEN;
   1529e:	3d03      	subs	r5, #3
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   152a0:	0719      	lsls	r1, r3, #28
  writeLen = len - ATT_WRITE_REQ_LEN;
   152a2:	b2ad      	uxth	r5, r5
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   152a4:	d413      	bmi.n	152ce <attsProcWrite+0x86>
   152a6:	42aa      	cmp	r2, r5
   152a8:	d013      	beq.n	152d2 <attsProcWrite+0x8a>
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   152aa:	f1b9 0f12 	cmp.w	r9, #18
   152ae:	d10b      	bne.n	152c8 <attsProcWrite+0x80>
      err = ATT_ERR_LENGTH;
   152b0:	230d      	movs	r3, #13
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   152b2:	8b30      	ldrh	r0, [r6, #24]
   152b4:	4622      	mov	r2, r4
   152b6:	2112      	movs	r1, #18
   152b8:	f7fe fdee 	bl	13e98 <attsErrRsp>
}
   152bc:	b007      	add	sp, #28
   152be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   152c2:	f1b9 0f12 	cmp.w	r9, #18
   152c6:	d033      	beq.n	15330 <attsProcWrite+0xe8>
}
   152c8:	b007      	add	sp, #28
   152ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
   152ce:	42aa      	cmp	r2, r5
   152d0:	d3eb      	bcc.n	152aa <attsProcWrite+0x62>
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   152d2:	0798      	lsls	r0, r3, #30
  BSTREAM_TO_UINT16(handle, pPacket);
   152d4:	f107 010b 	add.w	r1, r7, #11
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   152d8:	d51e      	bpl.n	15318 <attsProcWrite+0xd0>
          (pGroup->writeCback != NULL))
   152da:	9a05      	ldr	r2, [sp, #20]
   152dc:	68d7      	ldr	r7, [r2, #12]
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   152de:	b1df      	cbz	r7, 15318 <attsProcWrite+0xd0>
        err = (*pGroup->writeCback)(pCcb->connId, handle, opcode, 0, writeLen,
   152e0:	e9cd 1801 	strd	r1, r8, [sp, #4]
   152e4:	9500      	str	r5, [sp, #0]
   152e6:	2300      	movs	r3, #0
   152e8:	7f30      	ldrb	r0, [r6, #28]
   152ea:	464a      	mov	r2, r9
   152ec:	4621      	mov	r1, r4
   152ee:	47b8      	blx	r7
   152f0:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
   152f2:	2b00      	cmp	r3, #0
   152f4:	d1c3      	bne.n	1527e <attsProcWrite+0x36>
   152f6:	f1b9 0f12 	cmp.w	r9, #18
   152fa:	d1e5      	bne.n	152c8 <attsProcWrite+0x80>
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_WRITE_RSP_LEN)) != NULL)
   152fc:	2009      	movs	r0, #9
   152fe:	f000 fa2d 	bl	1575c <attMsgAlloc>
   15302:	2800      	cmp	r0, #0
   15304:	d0e0      	beq.n	152c8 <attsProcWrite+0x80>
          UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_RSP);
   15306:	2313      	movs	r3, #19
   15308:	7203      	strb	r3, [r0, #8]
          L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_WRITE_RSP_LEN, pBuf);
   1530a:	8b31      	ldrh	r1, [r6, #24]
   1530c:	4603      	mov	r3, r0
   1530e:	2201      	movs	r2, #1
   15310:	2004      	movs	r0, #4
   15312:	f004 fba1 	bl	19a58 <L2cDataReq>
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   15316:	e7d7      	b.n	152c8 <attsProcWrite+0x80>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   15318:	069a      	lsls	r2, r3, #26
   1531a:	d510      	bpl.n	1533e <attsProcWrite+0xf6>
   1531c:	4b0e      	ldr	r3, [pc, #56]	; (15358 <attsProcWrite+0x110>)
   1531e:	695f      	ldr	r7, [r3, #20]
   15320:	b16f      	cbz	r7, 1533e <attsProcWrite+0xf6>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, handle, pPacket);
   15322:	460b      	mov	r3, r1
   15324:	7f30      	ldrb	r0, [r6, #28]
   15326:	4622      	mov	r2, r4
   15328:	2109      	movs	r1, #9
   1532a:	47b8      	blx	r7
   1532c:	4603      	mov	r3, r0
   1532e:	e7e0      	b.n	152f2 <attsProcWrite+0xaa>
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   15330:	8b30      	ldrh	r0, [r6, #24]
    err = ATT_ERR_HANDLE;
   15332:	2301      	movs	r3, #1
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   15334:	4622      	mov	r2, r4
   15336:	2112      	movs	r1, #18
   15338:	f7fe fdae 	bl	13e98 <attsErrRsp>
   1533c:	e7be      	b.n	152bc <attsProcWrite+0x74>
        memcpy(pAttr->pValue, pPacket, writeLen);
   1533e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   15342:	462a      	mov	r2, r5
   15344:	f7f6 fedc 	bl	c100 <memcpy>
        if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   15348:	f898 300e 	ldrb.w	r3, [r8, #14]
   1534c:	071b      	lsls	r3, r3, #28
   1534e:	d5d2      	bpl.n	152f6 <attsProcWrite+0xae>
          *(pAttr->pLen) = writeLen;
   15350:	f8d8 3008 	ldr.w	r3, [r8, #8]
   15354:	801d      	strh	r5, [r3, #0]
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
   15356:	e7ce      	b.n	152f6 <attsProcWrite+0xae>
   15358:	1000424c 	.word	0x1000424c

0001535c <attsProcPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcPrepWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t        writeLen;
  uint8_t         err = ATT_SUCCESS;

  /* parse handle and offset, calculate write length */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
   15360:	7a93      	ldrb	r3, [r2, #10]
   15362:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(offset, pPacket);
   15364:	f892 800b 	ldrb.w	r8, [r2, #11]
   15368:	f892 900c 	ldrb.w	r9, [r2, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   1536c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
   15370:	b089      	sub	sp, #36	; 0x24
  BSTREAM_TO_UINT16(handle, pPacket);
   15372:	b2a4      	uxth	r4, r4
{
   15374:	4606      	mov	r6, r0
   15376:	460f      	mov	r7, r1
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   15378:	4620      	mov	r0, r4
   1537a:	a907      	add	r1, sp, #28
{
   1537c:	4693      	mov	fp, r2
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   1537e:	f7ff f83b 	bl	143f8 <attsFindByHandle>
   15382:	b338      	cbz	r0, 153d4 <attsProcPrepWriteReq+0x78>
  {
    /* attribute not found */
    err = ATT_ERR_HANDLE;
  }
  /* verify permissions */
  else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   15384:	7bc3      	ldrb	r3, [r0, #15]
   15386:	4605      	mov	r5, r0
   15388:	4622      	mov	r2, r4
   1538a:	7f30      	ldrb	r0, [r6, #28]
   1538c:	2110      	movs	r1, #16
   1538e:	f7ff f84b 	bl	14428 <attsPermissions>
   15392:	4603      	mov	r3, r0
   15394:	b138      	cbz	r0, 153a6 <attsProcPrepWriteReq+0x4a>
    }
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_PREP_WRITE_REQ, handle, err);
   15396:	8b30      	ldrh	r0, [r6, #24]
   15398:	4622      	mov	r2, r4
   1539a:	2116      	movs	r1, #22
   1539c:	f7fe fd7c 	bl	13e98 <attsErrRsp>
  }
}
   153a0:	b009      	add	sp, #36	; 0x24
   153a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BSTREAM_TO_UINT16(offset, pPacket);
   153a6:	eb08 2809 	add.w	r8, r8, r9, lsl #8
   153aa:	fa1f f888 	uxth.w	r8, r8
  else if ((offset != 0) && ((pAttr->settings & ATTS_SET_ALLOW_OFFSET) == 0))
   153ae:	7bab      	ldrb	r3, [r5, #14]
   153b0:	f1b8 0f00 	cmp.w	r8, #0
   153b4:	d003      	beq.n	153be <attsProcPrepWriteReq+0x62>
   153b6:	06d9      	lsls	r1, r3, #27
   153b8:	d401      	bmi.n	153be <attsProcPrepWriteReq+0x62>
    err = ATT_ERR_NOT_LONG;
   153ba:	230b      	movs	r3, #11
   153bc:	e7eb      	b.n	15396 <attsProcPrepWriteReq+0x3a>
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
   153be:	f1a7 0905 	sub.w	r9, r7, #5
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   153c2:	071a      	lsls	r2, r3, #28
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
   153c4:	fa1f f989 	uxth.w	r9, r9
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   153c8:	d406      	bmi.n	153d8 <attsProcPrepWriteReq+0x7c>
   153ca:	89ab      	ldrh	r3, [r5, #12]
   153cc:	454b      	cmp	r3, r9
   153ce:	d003      	beq.n	153d8 <attsProcPrepWriteReq+0x7c>
    err = ATT_ERR_LENGTH;
   153d0:	230d      	movs	r3, #13
   153d2:	e7e0      	b.n	15396 <attsProcPrepWriteReq+0x3a>
    err = ATT_ERR_HANDLE;
   153d4:	2301      	movs	r3, #1
   153d6:	e7de      	b.n	15396 <attsProcPrepWriteReq+0x3a>
  else if (WsfQueueCount(&pCcb->prepWriteQueue) >= pAttCfg->numPrepWrites)
   153d8:	4630      	mov	r0, r6
   153da:	f008 ffeb 	bl	1e3b4 <WsfQueueCount>
   153de:	4b2a      	ldr	r3, [pc, #168]	; (15488 <attsProcPrepWriteReq+0x12c>)
   153e0:	681b      	ldr	r3, [r3, #0]
   153e2:	79db      	ldrb	r3, [r3, #7]
   153e4:	4283      	cmp	r3, r0
   153e6:	d801      	bhi.n	153ec <attsProcPrepWriteReq+0x90>
    err = ATT_ERR_QUEUE_FULL;
   153e8:	2309      	movs	r3, #9
   153ea:	e7d4      	b.n	15396 <attsProcPrepWriteReq+0x3a>
  else if ((pPrep = WsfBufAlloc(sizeof(attsPrepWrite_t) - 1 + writeLen)) == NULL)
   153ec:	1db8      	adds	r0, r7, #6
   153ee:	b280      	uxth	r0, r0
   153f0:	f008 fd72 	bl	1ded8 <WsfBufAlloc>
   153f4:	4682      	mov	sl, r0
   153f6:	2800      	cmp	r0, #0
   153f8:	d044      	beq.n	15484 <attsProcPrepWriteReq+0x128>
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   153fa:	7bab      	ldrb	r3, [r5, #14]
   153fc:	079b      	lsls	r3, r3, #30
  BSTREAM_TO_UINT16(offset, pPacket);
   153fe:	f10b 0b0d 	add.w	fp, fp, #13
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   15402:	d510      	bpl.n	15426 <attsProcPrepWriteReq+0xca>
          (pGroup->writeCback != NULL))
   15404:	9b07      	ldr	r3, [sp, #28]
   15406:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   15408:	9305      	str	r3, [sp, #20]
   1540a:	b163      	cbz	r3, 15426 <attsProcPrepWriteReq+0xca>
    err = (*pGroup->writeCback)(pCcb->connId, handle, ATT_PDU_PREP_WRITE_REQ, 0, writeLen,
   1540c:	e9cd b501 	strd	fp, r5, [sp, #4]
   15410:	f8cd 9000 	str.w	r9, [sp]
   15414:	2300      	movs	r3, #0
   15416:	7f30      	ldrb	r0, [r6, #28]
   15418:	9d05      	ldr	r5, [sp, #20]
   1541a:	2216      	movs	r2, #22
   1541c:	4621      	mov	r1, r4
   1541e:	47a8      	blx	r5
  if (err == ATT_SUCCESS)
   15420:	4603      	mov	r3, r0
   15422:	2800      	cmp	r0, #0
   15424:	d1b7      	bne.n	15396 <attsProcPrepWriteReq+0x3a>
    memcpy(pPrep->packet, pPacket, writeLen);
   15426:	464a      	mov	r2, r9
   15428:	4659      	mov	r1, fp
    pPrep->writeLen = writeLen;
   1542a:	f8aa 9004 	strh.w	r9, [sl, #4]
    pPrep->handle = handle;
   1542e:	f8aa 4006 	strh.w	r4, [sl, #6]
    pPrep->offset = offset;
   15432:	f8aa 8008 	strh.w	r8, [sl, #8]
    memcpy(pPrep->packet, pPacket, writeLen);
   15436:	f10a 000a 	add.w	r0, sl, #10
   1543a:	f7f6 fe61 	bl	c100 <memcpy>
    WsfQueueEnq(&pCcb->prepWriteQueue, pPrep);
   1543e:	4651      	mov	r1, sl
   15440:	4630      	mov	r0, r6
   15442:	f008 ff49 	bl	1e2d8 <WsfQueueEnq>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_PREP_WRITE_RSP_LEN + writeLen)) != NULL)
   15446:	f107 0008 	add.w	r0, r7, #8
   1544a:	b280      	uxth	r0, r0
   1544c:	f000 f986 	bl	1575c <attMsgAlloc>
   15450:	4605      	mov	r5, r0
   15452:	2800      	cmp	r0, #0
   15454:	d0a4      	beq.n	153a0 <attsProcPrepWriteReq+0x44>
      UINT16_TO_BSTREAM(p, handle);
   15456:	7244      	strb	r4, [r0, #9]
      UINT16_TO_BSTREAM(p, offset);
   15458:	f880 800b 	strb.w	r8, [r0, #11]
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
   1545c:	2317      	movs	r3, #23
      UINT16_TO_BSTREAM(p, handle);
   1545e:	0a24      	lsrs	r4, r4, #8
      UINT16_TO_BSTREAM(p, offset);
   15460:	ea4f 2818 	mov.w	r8, r8, lsr #8
      memcpy(p, pPacket, writeLen);
   15464:	4659      	mov	r1, fp
      UINT16_TO_BSTREAM(p, handle);
   15466:	7284      	strb	r4, [r0, #10]
      UINT16_TO_BSTREAM(p, offset);
   15468:	f880 800c 	strb.w	r8, [r0, #12]
      memcpy(p, pPacket, writeLen);
   1546c:	464a      	mov	r2, r9
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
   1546e:	7203      	strb	r3, [r0, #8]
      memcpy(p, pPacket, writeLen);
   15470:	300d      	adds	r0, #13
   15472:	f7f6 fe45 	bl	c100 <memcpy>
      L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_PREP_WRITE_RSP_LEN + writeLen), pBuf);
   15476:	8b31      	ldrh	r1, [r6, #24]
   15478:	462b      	mov	r3, r5
   1547a:	463a      	mov	r2, r7
   1547c:	2004      	movs	r0, #4
   1547e:	f004 faeb 	bl	19a58 <L2cDataReq>
  if (err)
   15482:	e78d      	b.n	153a0 <attsProcPrepWriteReq+0x44>
    err = ATT_ERR_RESOURCES;
   15484:	2311      	movs	r3, #17
   15486:	e786      	b.n	15396 <attsProcPrepWriteReq+0x3a>
   15488:	10002c2c 	.word	0x10002c2c

0001548c <attsProcExecWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcExecWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1548c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t         err = ATT_SUCCESS;

  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* if cancelling all prepared writes */
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
   15490:	7a53      	ldrb	r3, [r2, #9]
{
   15492:	b086      	sub	sp, #24
   15494:	4606      	mov	r6, r0
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
   15496:	2b00      	cmp	r3, #0
   15498:	d04d      	beq.n	15536 <attsProcExecWriteReq+0xaa>
  {
    /* free all queued buffers */
    attsClearPrepWrites(pCcb);
  }
  /* else writing all prepared writes */
  else if (*pPacket == ATT_EXEC_WRITE_ALL)
   1549a:	2b01      	cmp	r3, #1
   1549c:	d141      	bne.n	15522 <attsProcExecWriteReq+0x96>
  {
    /* iterate over prepare write queue and verify offset and length */
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   1549e:	6804      	ldr	r4, [r0, #0]
   154a0:	b17c      	cbz	r4, 154c2 <attsProcExecWriteReq+0x36>
    {
      /* find attribute */
      if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) != NULL)
   154a2:	88e0      	ldrh	r0, [r4, #6]
   154a4:	a904      	add	r1, sp, #16
   154a6:	f7fe ffa7 	bl	143f8 <attsFindByHandle>
   154aa:	b138      	cbz	r0, 154bc <attsProcExecWriteReq+0x30>
      {
        /* verify offset */
        if (pPrep->offset > pAttr->maxLen)
   154ac:	8921      	ldrh	r1, [r4, #8]
   154ae:	8982      	ldrh	r2, [r0, #12]
   154b0:	4291      	cmp	r1, r2
   154b2:	d87a      	bhi.n	155aa <attsProcExecWriteReq+0x11e>
        {
          err = ATT_ERR_OFFSET;
        }
        /* verify write length with offset */
        else if ((pPrep->writeLen + pPrep->offset) > pAttr->maxLen)
   154b4:	88a3      	ldrh	r3, [r4, #4]
   154b6:	440b      	add	r3, r1
   154b8:	4293      	cmp	r3, r2
   154ba:	dc7b      	bgt.n	155b4 <attsProcExecWriteReq+0x128>
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   154bc:	6824      	ldr	r4, [r4, #0]
   154be:	2c00      	cmp	r4, #0
   154c0:	d1ef      	bne.n	154a2 <attsProcExecWriteReq+0x16>

    /* if length and offset checks ok then write all buffers in queue */
    if (err == ATT_SUCCESS)
    {
      /* for each buffer */
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   154c2:	4630      	mov	r0, r6
   154c4:	f008 ff1e 	bl	1e304 <WsfQueueDeq>
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   154c8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 155b8 <attsProcExecWriteReq+0x12c>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   154cc:	2700      	movs	r7, #0
   154ce:	4604      	mov	r4, r0
   154d0:	b328      	cbz	r0, 1551e <attsProcExecWriteReq+0x92>
  if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) == NULL)
   154d2:	88e0      	ldrh	r0, [r4, #6]
   154d4:	a905      	add	r1, sp, #20
   154d6:	f7fe ff8f 	bl	143f8 <attsFindByHandle>
   154da:	4605      	mov	r5, r0
   154dc:	2800      	cmp	r0, #0
   154de:	d04d      	beq.n	1557c <attsProcExecWriteReq+0xf0>
  else if (!(pAttr->permissions & ATTS_PERMIT_WRITE))
   154e0:	7bc3      	ldrb	r3, [r0, #15]
   154e2:	06d8      	lsls	r0, r3, #27
   154e4:	d545      	bpl.n	15572 <attsProcExecWriteReq+0xe6>
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   154e6:	7bab      	ldrb	r3, [r5, #14]
   154e8:	0799      	lsls	r1, r3, #30
  p = pPrep->packet;
   154ea:	f104 020a 	add.w	r2, r4, #10
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   154ee:	d534      	bpl.n	1555a <attsProcExecWriteReq+0xce>
           (pGroup->writeCback != NULL))
   154f0:	9905      	ldr	r1, [sp, #20]
   154f2:	68cf      	ldr	r7, [r1, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   154f4:	b38f      	cbz	r7, 1555a <attsProcExecWriteReq+0xce>
    err = (*pGroup->writeCback)(pCcb->connId, pPrep->handle, ATT_PDU_EXEC_WRITE_REQ,
   154f6:	8923      	ldrh	r3, [r4, #8]
   154f8:	88e1      	ldrh	r1, [r4, #6]
   154fa:	e9cd 2501 	strd	r2, r5, [sp, #4]
   154fe:	88a2      	ldrh	r2, [r4, #4]
   15500:	9200      	str	r2, [sp, #0]
   15502:	7f30      	ldrb	r0, [r6, #28]
   15504:	2218      	movs	r2, #24
   15506:	47b8      	blx	r7
   15508:	4607      	mov	r7, r0
      {
        /* write buffer */
        if ((err = attsExecPrepWrite(pCcb, pPrep)) != ATT_SUCCESS)
   1550a:	bb9f      	cbnz	r7, 15574 <attsProcExecWriteReq+0xe8>
          /* write failed; discard remaining prepared writes */
          attsClearPrepWrites(pCcb);
        }

        /* free buffer */
        WsfBufFree(pPrep);
   1550c:	4620      	mov	r0, r4
   1550e:	f008 fd13 	bl	1df38 <WsfBufFree>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   15512:	4630      	mov	r0, r6
   15514:	f008 fef6 	bl	1e304 <WsfQueueDeq>
   15518:	4604      	mov	r4, r0
   1551a:	2800      	cmp	r0, #0
   1551c:	d1d9      	bne.n	154d2 <attsProcExecWriteReq+0x46>
  {
    err = ATT_ERR_INVALID_PDU;
  }

  /* send response or error response */
  if (err)
   1551e:	b167      	cbz	r7, 1553a <attsProcExecWriteReq+0xae>
   15520:	e000      	b.n	15524 <attsProcExecWriteReq+0x98>
    err = ATT_ERR_INVALID_PDU;
   15522:	2704      	movs	r7, #4
  {
    attsErrRsp(pCcb->handle, ATT_PDU_EXEC_WRITE_REQ, 0, err);
   15524:	8b30      	ldrh	r0, [r6, #24]
   15526:	463b      	mov	r3, r7
   15528:	2200      	movs	r2, #0
   1552a:	2118      	movs	r1, #24
   1552c:	f7fe fcb4 	bl	13e98 <attsErrRsp>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);

      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
    }
  }
}
   15530:	b006      	add	sp, #24
   15532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    attsClearPrepWrites(pCcb);
   15536:	f7fe fccd 	bl	13ed4 <attsClearPrepWrites>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_EXEC_WRITE_RSP_LEN)) != NULL)
   1553a:	2009      	movs	r0, #9
   1553c:	f000 f90e 	bl	1575c <attMsgAlloc>
   15540:	2800      	cmp	r0, #0
   15542:	d0f5      	beq.n	15530 <attsProcExecWriteReq+0xa4>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);
   15544:	2319      	movs	r3, #25
   15546:	7203      	strb	r3, [r0, #8]
      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
   15548:	8b31      	ldrh	r1, [r6, #24]
   1554a:	4603      	mov	r3, r0
   1554c:	2201      	movs	r2, #1
   1554e:	2004      	movs	r0, #4
   15550:	f004 fa82 	bl	19a58 <L2cDataReq>
}
   15554:	b006      	add	sp, #24
   15556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1555a:	069b      	lsls	r3, r3, #26
   1555c:	d513      	bpl.n	15586 <attsProcExecWriteReq+0xfa>
   1555e:	f8d8 7014 	ldr.w	r7, [r8, #20]
   15562:	b187      	cbz	r7, 15586 <attsProcExecWriteReq+0xfa>
    err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, pPrep->handle, p);
   15564:	4613      	mov	r3, r2
   15566:	7f30      	ldrb	r0, [r6, #28]
   15568:	88e2      	ldrh	r2, [r4, #6]
   1556a:	2109      	movs	r1, #9
   1556c:	47b8      	blx	r7
   1556e:	4607      	mov	r7, r0
   15570:	e7cb      	b.n	1550a <attsProcExecWriteReq+0x7e>
    err = ATT_ERR_WRITE;
   15572:	2703      	movs	r7, #3
          attsClearPrepWrites(pCcb);
   15574:	4630      	mov	r0, r6
   15576:	f7fe fcad 	bl	13ed4 <attsClearPrepWrites>
   1557a:	e7c7      	b.n	1550c <attsProcExecWriteReq+0x80>
   1557c:	4630      	mov	r0, r6
    err = ATT_ERR_UNLIKELY;
   1557e:	270e      	movs	r7, #14
          attsClearPrepWrites(pCcb);
   15580:	f7fe fca8 	bl	13ed4 <attsClearPrepWrites>
   15584:	e7c2      	b.n	1550c <attsProcExecWriteReq+0x80>
    memcpy((pAttr->pValue + pPrep->offset), p, pPrep->writeLen);
   15586:	8923      	ldrh	r3, [r4, #8]
   15588:	6868      	ldr	r0, [r5, #4]
   1558a:	4611      	mov	r1, r2
   1558c:	4418      	add	r0, r3
   1558e:	88a2      	ldrh	r2, [r4, #4]
   15590:	f7f6 fdb6 	bl	c100 <memcpy>
    if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   15594:	7baf      	ldrb	r7, [r5, #14]
   15596:	f017 0708 	ands.w	r7, r7, #8
   1559a:	d0b7      	beq.n	1550c <attsProcExecWriteReq+0x80>
      *(pAttr->pLen) = pPrep->writeLen + pPrep->offset;
   1559c:	88a3      	ldrh	r3, [r4, #4]
   1559e:	8921      	ldrh	r1, [r4, #8]
   155a0:	68aa      	ldr	r2, [r5, #8]
   155a2:	440b      	add	r3, r1
   155a4:	8013      	strh	r3, [r2, #0]
  uint8_t     err = ATT_SUCCESS;
   155a6:	2700      	movs	r7, #0
   155a8:	e7b0      	b.n	1550c <attsProcExecWriteReq+0x80>
          err = ATT_ERR_OFFSET;
   155aa:	2707      	movs	r7, #7
          attsClearPrepWrites(pCcb);
   155ac:	4630      	mov	r0, r6
   155ae:	f7fe fc91 	bl	13ed4 <attsClearPrepWrites>
  if (err)
   155b2:	e7b7      	b.n	15524 <attsProcExecWriteReq+0x98>
          err = ATT_ERR_LENGTH;
   155b4:	270d      	movs	r7, #13
   155b6:	e7f9      	b.n	155ac <attsProcExecWriteReq+0x120>
   155b8:	1000424c 	.word	0x1000424c

000155bc <attEmptyHandler>:
 */
/*************************************************************************************************/
void attEmptyHandler(wsfMsgHdr_t *pMsg)
{
  return;
}
   155bc:	4770      	bx	lr
   155be:	bf00      	nop

000155c0 <attEmptyConnCback>:
 */
/*************************************************************************************************/
void attEmptyConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
  return;
}
   155c0:	4770      	bx	lr
   155c2:	bf00      	nop

000155c4 <attEmptyDataCback>:
 */
/*************************************************************************************************/
void attEmptyDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
  return;
}
   155c4:	4770      	bx	lr
   155c6:	bf00      	nop

000155c8 <attDmConnCback>:
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   155c8:	7883      	ldrb	r3, [r0, #2]
  pCcb = attCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   155ca:	7802      	ldrb	r2, [r0, #0]
{
   155cc:	b570      	push	{r4, r5, r6, lr}
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   155ce:	2b27      	cmp	r3, #39	; 0x27
{
   155d0:	4604      	mov	r4, r0
/*************************************************************************************************/
attCcb_t *attCcbByConnId(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attCb.ccb[connId - 1];
   155d2:	f102 30ff 	add.w	r0, r2, #4294967295
    pCcb->handle = pDmEvt->connOpen.handle;
   155d6:	4e18      	ldr	r6, [pc, #96]	; (15638 <attDmConnCback+0x70>)
   155d8:	ea4f 05c0 	mov.w	r5, r0, lsl #3
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   155dc:	d10b      	bne.n	155f6 <attDmConnCback+0x2e>
    pCcb->handle = pDmEvt->connOpen.handle;
   155de:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   155e2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   155e6:	88e1      	ldrh	r1, [r4, #6]
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   155e8:	771a      	strb	r2, [r3, #28]
    pCcb->control = 0;
   155ea:	2200      	movs	r2, #0
   155ec:	775a      	strb	r2, [r3, #29]
    pCcb->pPendDbHashRsp = NULL;
   155ee:	621a      	str	r2, [r3, #32]
    pCcb->mtu = ATT_DEFAULT_MTU;
   155f0:	2217      	movs	r2, #23
    pCcb->handle = pDmEvt->connOpen.handle;
   155f2:	8319      	strh	r1, [r3, #24]
    pCcb->mtu = ATT_DEFAULT_MTU;
   155f4:	835a      	strh	r2, [r3, #26]
  if (pCcb->connId != DM_CONN_ID_NONE)
   155f6:	4405      	add	r5, r0
   155f8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   155fc:	7f2b      	ldrb	r3, [r5, #28]
   155fe:	b163      	cbz	r3, 1561a <attDmConnCback+0x52>
    (*attCb.pServer->connCback)(pCcb, pDmEvt);
   15600:	6f33      	ldr	r3, [r6, #112]	; 0x70
   15602:	4621      	mov	r1, r4
   15604:	68db      	ldr	r3, [r3, #12]
   15606:	4628      	mov	r0, r5
   15608:	4798      	blx	r3
    (*attCb.pClient->connCback)(pCcb, pDmEvt);
   1560a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   1560c:	4621      	mov	r1, r4
   1560e:	68db      	ldr	r3, [r3, #12]
   15610:	4628      	mov	r0, r5
   15612:	4798      	blx	r3
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   15614:	78a3      	ldrb	r3, [r4, #2]
   15616:	2b28      	cmp	r3, #40	; 0x28
   15618:	d006      	beq.n	15628 <attDmConnCback+0x60>
  if (attCb.connCback != NULL)
   1561a:	6fb3      	ldr	r3, [r6, #120]	; 0x78
   1561c:	b11b      	cbz	r3, 15626 <attDmConnCback+0x5e>
    (*attCb.connCback)(pDmEvt);
   1561e:	4620      	mov	r0, r4
}
   15620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*attCb.connCback)(pDmEvt);
   15624:	4718      	bx	r3
}
   15626:	bd70      	pop	{r4, r5, r6, pc}
      if (pCcb->pPendDbHashRsp)
   15628:	6a28      	ldr	r0, [r5, #32]
      pCcb->connId = DM_CONN_ID_NONE;
   1562a:	2300      	movs	r3, #0
   1562c:	772b      	strb	r3, [r5, #28]
      if (pCcb->pPendDbHashRsp)
   1562e:	2800      	cmp	r0, #0
   15630:	d0f3      	beq.n	1561a <attDmConnCback+0x52>
        WsfBufFree(pCcb->pPendDbHashRsp);
   15632:	f008 fc81 	bl	1df38 <WsfBufFree>
   15636:	e7f0      	b.n	1561a <attDmConnCback+0x52>
   15638:	100042a0 	.word	0x100042a0

0001563c <attL2cDataCback>:
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
   1563c:	7a13      	ldrb	r3, [r2, #8]
   1563e:	f013 0f01 	tst.w	r3, #1
    (*attCb.pClient->dataCback)(handle, len, pPacket);
   15642:	4b04      	ldr	r3, [pc, #16]	; (15654 <attL2cDataCback+0x18>)
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
   15644:	d002      	beq.n	1564c <attL2cDataCback+0x10>
    (*attCb.pClient->dataCback)(handle, len, pPacket);
   15646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   15648:	681b      	ldr	r3, [r3, #0]
   1564a:	4718      	bx	r3
    (*attCb.pServer->dataCback)(handle, len, pPacket);
   1564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1564e:	681b      	ldr	r3, [r3, #0]
   15650:	4718      	bx	r3
   15652:	bf00      	nop
   15654:	100042a0 	.word	0x100042a0

00015658 <attL2cCtrlCback>:
{
   15658:	b570      	push	{r4, r5, r6, lr}
  return &attCb.ccb[connId - 1];
   1565a:	7804      	ldrb	r4, [r0, #0]
  if (pCcb->connId != DM_CONN_ID_NONE)
   1565c:	4e0f      	ldr	r6, [pc, #60]	; (1569c <attL2cCtrlCback+0x44>)
  return &attCb.ccb[connId - 1];
   1565e:	3c01      	subs	r4, #1
  if (pCcb->connId != DM_CONN_ID_NONE)
   15660:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   15664:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   15668:	7f23      	ldrb	r3, [r4, #28]
   1566a:	b1b3      	cbz	r3, 1569a <attL2cCtrlCback+0x42>
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
   1566c:	7883      	ldrb	r3, [r0, #2]
   1566e:	2b01      	cmp	r3, #1
   15670:	4605      	mov	r5, r0
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
   15672:	7f63      	ldrb	r3, [r4, #29]
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
   15674:	d00e      	beq.n	15694 <attL2cCtrlCback+0x3c>
      pCcb->control &= ~ATT_CCB_STATUS_FLOW_DISABLED;
   15676:	f023 0302 	bic.w	r3, r3, #2
   1567a:	7763      	strb	r3, [r4, #29]
      (*attCb.pServer->ctrlCback)(pMsg);
   1567c:	6f33      	ldr	r3, [r6, #112]	; 0x70
   1567e:	685b      	ldr	r3, [r3, #4]
   15680:	4798      	blx	r3
      if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   15682:	7f63      	ldrb	r3, [r4, #29]
   15684:	079b      	lsls	r3, r3, #30
   15686:	d408      	bmi.n	1569a <attL2cCtrlCback+0x42>
        (*attCb.pClient->ctrlCback)(pMsg);
   15688:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   1568a:	4628      	mov	r0, r5
   1568c:	685b      	ldr	r3, [r3, #4]
}
   1568e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*attCb.pClient->ctrlCback)(pMsg);
   15692:	4718      	bx	r3
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
   15694:	f043 0302 	orr.w	r3, r3, #2
   15698:	7763      	strb	r3, [r4, #29]
}
   1569a:	bd70      	pop	{r4, r5, r6, pc}
   1569c:	100042a0 	.word	0x100042a0

000156a0 <attCcbByHandle>:
{
   156a0:	b508      	push	{r3, lr}
  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   156a2:	f7f7 fe43 	bl	d32c <DmConnIdByHandle>
   156a6:	b128      	cbz	r0, 156b4 <attCcbByHandle+0x14>
    return &attCb.ccb[connId - 1];
   156a8:	4b03      	ldr	r3, [pc, #12]	; (156b8 <attCcbByHandle+0x18>)
   156aa:	3801      	subs	r0, #1
   156ac:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   156b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
   156b4:	bd08      	pop	{r3, pc}
   156b6:	bf00      	nop
   156b8:	100042a0 	.word	0x100042a0

000156bc <attUuidCmp16to128>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attUuidCmp16to128(const uint8_t *pUuid16, const uint8_t *pUuid128)
{
   156bc:	b508      	push	{r3, lr}
  attBaseUuid[ATT_BASE_UUID_POS_0] = pUuid16[0];
   156be:	4b07      	ldr	r3, [pc, #28]	; (156dc <attUuidCmp16to128+0x20>)
   156c0:	7802      	ldrb	r2, [r0, #0]
   156c2:	731a      	strb	r2, [r3, #12]
  attBaseUuid[ATT_BASE_UUID_POS_1] = pUuid16[1];
   156c4:	f890 c001 	ldrb.w	ip, [r0, #1]
   156c8:	f883 c00d 	strb.w	ip, [r3, #13]

  return (memcmp(attBaseUuid, pUuid128, ATT_128_UUID_LEN) == 0);
   156cc:	2210      	movs	r2, #16
   156ce:	4618      	mov	r0, r3
   156d0:	f00d fe02 	bl	232d8 <memcmp>
}
   156d4:	fab0 f080 	clz	r0, r0
   156d8:	0940      	lsrs	r0, r0, #5
   156da:	bd08      	pop	{r3, pc}
   156dc:	10002bc8 	.word	0x10002bc8

000156e0 <attSetMtu>:
void attSetMtu(attCcb_t *pCcb, uint16_t peerMtu, uint16_t localMtu)
{
  uint16_t  mtu;

  /* set negotiated mtu for the connection to the lesser of ours and theirs */
  mtu = WSF_MIN(peerMtu, localMtu);
   156e0:	428a      	cmp	r2, r1

  /* if current mtu is not the same as the negotiated value */
  if (pCcb->mtu != mtu)
   156e2:	8b43      	ldrh	r3, [r0, #26]
  mtu = WSF_MIN(peerMtu, localMtu);
   156e4:	bf28      	it	cs
   156e6:	460a      	movcs	r2, r1
  if (pCcb->mtu != mtu)
   156e8:	4293      	cmp	r3, r2
   156ea:	d017      	beq.n	1571c <attSetMtu+0x3c>
 *  \return None.
 */
/*************************************************************************************************/
void attExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status, uint16_t mtu)
{
  if (attCb.cback)
   156ec:	4b0c      	ldr	r3, [pc, #48]	; (15720 <attSetMtu+0x40>)
    pCcb->mtu = mtu;
   156ee:	8342      	strh	r2, [r0, #26]
  if (attCb.cback)
   156f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   156f2:	b19b      	cbz	r3, 1571c <attSetMtu+0x3c>
{
   156f4:	b500      	push	{lr}
   156f6:	b085      	sub	sp, #20
  {
    attEvt_t evt;

    evt.hdr.param = connId;
   156f8:	f890 c01c 	ldrb.w	ip, [r0, #28]
   156fc:	f8ad c000 	strh.w	ip, [sp]
    evt.hdr.event = event;
    evt.hdr.status = status;
    evt.valueLen = 0;
   15700:	2100      	movs	r1, #0
    evt.hdr.event = event;
   15702:	2012      	movs	r0, #18
   15704:	f8ad 0002 	strh.w	r0, [sp, #2]
    evt.valueLen = 0;
   15708:	9102      	str	r1, [sp, #8]
    evt.handle = handle;
    evt.continuing = 0;
   1570a:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.mtu = mtu;
   1570e:	f8ad 200e 	strh.w	r2, [sp, #14]

    (*attCb.cback)(&evt);
   15712:	4668      	mov	r0, sp
   15714:	4798      	blx	r3
}
   15716:	b005      	add	sp, #20
   15718:	f85d fb04 	ldr.w	pc, [sp], #4
   1571c:	4770      	bx	lr
   1571e:	bf00      	nop
   15720:	100042a0 	.word	0x100042a0

00015724 <attExecCallback>:
{
   15724:	b510      	push	{r4, lr}
  if (attCb.cback)
   15726:	4c0c      	ldr	r4, [pc, #48]	; (15758 <attExecCallback+0x34>)
{
   15728:	b084      	sub	sp, #16
  if (attCb.cback)
   1572a:	6f64      	ldr	r4, [r4, #116]	; 0x74
{
   1572c:	f8bd c018 	ldrh.w	ip, [sp, #24]
  if (attCb.cback)
   15730:	b184      	cbz	r4, 15754 <attExecCallback+0x30>
    evt.hdr.event = event;
   15732:	f88d 1002 	strb.w	r1, [sp, #2]
    evt.valueLen = 0;
   15736:	2100      	movs	r1, #0
    evt.hdr.param = connId;
   15738:	f8ad 0000 	strh.w	r0, [sp]
    evt.hdr.status = status;
   1573c:	f88d 3003 	strb.w	r3, [sp, #3]
    evt.valueLen = 0;
   15740:	f8ad 1008 	strh.w	r1, [sp, #8]
    evt.handle = handle;
   15744:	f8ad 200a 	strh.w	r2, [sp, #10]
    evt.continuing = 0;
   15748:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.mtu = mtu;
   1574c:	f8ad c00e 	strh.w	ip, [sp, #14]
    (*attCb.cback)(&evt);
   15750:	4668      	mov	r0, sp
   15752:	47a0      	blx	r4
  }
}
   15754:	b004      	add	sp, #16
   15756:	bd10      	pop	{r4, pc}
   15758:	100042a0 	.word	0x100042a0

0001575c <attMsgAlloc>:
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *attMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1575c:	2100      	movs	r1, #0
   1575e:	f008 bc11 	b.w	1df84 <WsfMsgDataAlloc>
   15762:	bf00      	nop

00015764 <AttHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandlerInit(wsfHandlerId_t handlerId)
{
   15764:	b510      	push	{r4, lr}
  /* store handler ID */
  attCb.handlerId = handlerId;
   15766:	4b08      	ldr	r3, [pc, #32]	; (15788 <AttHandlerInit+0x24>)

  /* initialize control block */
  attCb.pClient = &attFcnDefault;
   15768:	4c08      	ldr	r4, [pc, #32]	; (1578c <AttHandlerInit+0x28>)
  attCb.pServer = &attFcnDefault;

  /* Register with L2C */
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   1576a:	4909      	ldr	r1, [pc, #36]	; (15790 <AttHandlerInit+0x2c>)
  attCb.handlerId = handlerId;
   1576c:	f883 007c 	strb.w	r0, [r3, #124]	; 0x7c
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   15770:	4a08      	ldr	r2, [pc, #32]	; (15794 <AttHandlerInit+0x30>)
   15772:	2004      	movs	r0, #4
  attCb.pServer = &attFcnDefault;
   15774:	e9c3 441b 	strd	r4, r4, [r3, #108]	; 0x6c
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   15778:	f004 f964 	bl	19a44 <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);

}
   1577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);
   15780:	4905      	ldr	r1, [pc, #20]	; (15798 <AttHandlerInit+0x34>)
   15782:	2000      	movs	r0, #0
   15784:	f7f7 bce8 	b.w	d158 <DmConnRegister>
   15788:	100042a0 	.word	0x100042a0
   1578c:	000267e4 	.word	0x000267e4
   15790:	0001563d 	.word	0x0001563d
   15794:	00015659 	.word	0x00015659
   15798:	000155c9 	.word	0x000155c9

0001579c <AttHandler>:
 */
/*************************************************************************************************/
void AttHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
   1579c:	4608      	mov	r0, r1
   1579e:	b149      	cbz	r1, 157b4 <AttHandler+0x18>
  {
    if (pMsg->event >= ATTS_MSG_START)
   157a0:	788b      	ldrb	r3, [r1, #2]
   157a2:	2b1f      	cmp	r3, #31
    {
      /* pass event to server */
      (*attCb.pServer->msgCback)(pMsg);
   157a4:	4b04      	ldr	r3, [pc, #16]	; (157b8 <AttHandler+0x1c>)
    if (pMsg->event >= ATTS_MSG_START)
   157a6:	d902      	bls.n	157ae <AttHandler+0x12>
      (*attCb.pServer->msgCback)(pMsg);
   157a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   157aa:	689b      	ldr	r3, [r3, #8]
   157ac:	4718      	bx	r3
    }
    else
    {
      /* pass event to client */
      (*attCb.pClient->msgCback)(pMsg);
   157ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   157b0:	689b      	ldr	r3, [r3, #8]
   157b2:	4718      	bx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   157b4:	4770      	bx	lr
   157b6:	bf00      	nop
   157b8:	100042a0 	.word	0x100042a0

000157bc <AttRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttRegister(attCback_t cback)
{
   157bc:	b510      	push	{r4, lr}
  attCb.cback = cback;
   157be:	4c0c      	ldr	r4, [pc, #48]	; (157f0 <AttRegister+0x34>)
{
   157c0:	b084      	sub	sp, #16
  attCb.cback = cback;
   157c2:	6760      	str	r0, [r4, #116]	; 0x74

  /* if configured MTU size is larger than maximum RX PDU length */
  if (pAttCfg->mtu > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   157c4:	f002 f8fc 	bl	179c0 <HciGetMaxRxAclLen>
   157c8:	4b0a      	ldr	r3, [pc, #40]	; (157f4 <AttRegister+0x38>)
   157ca:	681b      	ldr	r3, [r3, #0]
   157cc:	889b      	ldrh	r3, [r3, #4]
   157ce:	3803      	subs	r0, #3
   157d0:	4298      	cmp	r0, r3
   157d2:	dc0b      	bgt.n	157ec <AttRegister+0x30>
  if (attCb.cback)
   157d4:	6f62      	ldr	r2, [r4, #116]	; 0x74
   157d6:	b14a      	cbz	r2, 157ec <AttRegister+0x30>
    evt.valueLen = 0;
   157d8:	2300      	movs	r3, #0
    evt.hdr.param = connId;
   157da:	4907      	ldr	r1, [pc, #28]	; (157f8 <AttRegister+0x3c>)
   157dc:	9100      	str	r1, [sp, #0]
    evt.valueLen = 0;
   157de:	9302      	str	r3, [sp, #8]
    evt.continuing = 0;
   157e0:	f88d 300c 	strb.w	r3, [sp, #12]
    evt.mtu = mtu;
   157e4:	f8ad 300e 	strh.w	r3, [sp, #14]
    (*attCb.cback)(&evt);
   157e8:	4668      	mov	r0, sp
   157ea:	4790      	blx	r2
  {
    /* notify app about MTU misconfiguration */
    attExecCallback(0, DM_ERROR_IND, 0, DM_ERR_ATT_RX_PDU_LEN_EXCEEDED, 0);
  }
}
   157ec:	b004      	add	sp, #16
   157ee:	bd10      	pop	{r4, pc}
   157f0:	100042a0 	.word	0x100042a0
   157f4:	10002c2c 	.word	0x10002c2c
   157f8:	02650000 	.word	0x02650000

000157fc <AttConnRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void AttConnRegister(dmCback_t cback)
{
  attCb.connCback = cback;
   157fc:	4b01      	ldr	r3, [pc, #4]	; (15804 <AttConnRegister+0x8>)
   157fe:	6798      	str	r0, [r3, #120]	; 0x78
}
   15800:	4770      	bx	lr
   15802:	bf00      	nop
   15804:	100042a0 	.word	0x100042a0

00015808 <AttGetMtu>:
 *  \return MTU of the connection.
 */
/*************************************************************************************************/
uint16_t AttGetMtu(dmConnId_t connId)
{
  return (attCcbByConnId(connId)->mtu);
   15808:	4b03      	ldr	r3, [pc, #12]	; (15818 <AttGetMtu+0x10>)
   1580a:	3801      	subs	r0, #1
   1580c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   15810:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
   15814:	8b40      	ldrh	r0, [r0, #26]
   15816:	4770      	bx	lr
   15818:	100042a0 	.word	0x100042a0

0001581c <GattDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   1581c:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   1581e:	4b06      	ldr	r3, [pc, #24]	; (15838 <GattDiscover+0x1c>)
   15820:	4a06      	ldr	r2, [pc, #24]	; (1583c <GattDiscover+0x20>)
{
   15822:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   15824:	e9cd 3100 	strd	r3, r1, [sp]
   15828:	2303      	movs	r3, #3
   1582a:	2102      	movs	r1, #2
   1582c:	f009 fa58 	bl	1ece0 <AppDiscFindService>
                     GATT_HDL_LIST_LEN, (attcDiscChar_t **) gattDiscCharList, pHdlList);
}
   15830:	b003      	add	sp, #12
   15832:	f85d fb04 	ldr.w	pc, [sp], #4
   15836:	bf00      	nop
   15838:	10002bd8 	.word	0x10002bd8
   1583c:	0002682c 	.word	0x0002682c

00015840 <GattValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t GattValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   15840:	b508      	push	{r3, lr}
  uint8_t status = ATT_SUCCESS;

  /* service changed */
  if (pMsg->handle == pHdlList[GATT_SC_HDL_IDX])
   15842:	894a      	ldrh	r2, [r1, #10]
   15844:	8803      	ldrh	r3, [r0, #0]
   15846:	429a      	cmp	r2, r3
   15848:	d001      	beq.n	1584e <GattValueUpdate+0xe>
    AppDiscServiceChanged(pMsg);
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   1584a:	200a      	movs	r0, #10
  }

  return status;
}
   1584c:	bd08      	pop	{r3, pc}
    AppDiscServiceChanged(pMsg);
   1584e:	4608      	mov	r0, r1
   15850:	f009 fab4 	bl	1edbc <AppDiscServiceChanged>
  uint8_t status = ATT_SUCCESS;
   15854:	2000      	movs	r0, #0
}
   15856:	bd08      	pop	{r3, pc}

00015858 <GattSendServiceChangedInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattSendServiceChangedInd(dmConnId_t connId, uint16_t start, uint16_t end)
{
   15858:	b530      	push	{r4, r5, lr}
  uint8_t svcChangedValues[4];
  uint8_t *p;

  if (!gattServCb.svcChangedCccdIdxSet)
   1585a:	4d17      	ldr	r5, [pc, #92]	; (158b8 <GattSendServiceChangedInd+0x60>)
   1585c:	782b      	ldrb	r3, [r5, #0]
{
   1585e:	b083      	sub	sp, #12
  if (!gattServCb.svcChangedCccdIdxSet)
   15860:	b1ab      	cbz	r3, 1588e <GattSendServiceChangedInd+0x36>
  {
    return;
  }

  p = svcChangedValues;
  UINT16_TO_BSTREAM(p, start);
   15862:	f88d 1004 	strb.w	r1, [sp, #4]
  UINT16_TO_BSTREAM(p, end);
   15866:	0a13      	lsrs	r3, r2, #8
  UINT16_TO_BSTREAM(p, start);
   15868:	0a09      	lsrs	r1, r1, #8
   1586a:	4604      	mov	r4, r0
   1586c:	f88d 1005 	strb.w	r1, [sp, #5]
  UINT16_TO_BSTREAM(p, end);
   15870:	f88d 2006 	strb.w	r2, [sp, #6]
   15874:	f88d 3007 	strb.w	r3, [sp, #7]

  /* If connection is not specified */
  if (connId == DM_CONN_ID_NONE)
   15878:	b958      	cbnz	r0, 15892 <GattSendServiceChangedInd+0x3a>
  {
    /* Send to all. */
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   1587a:	2401      	movs	r4, #1
    {
      if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   1587c:	7869      	ldrb	r1, [r5, #1]
   1587e:	4620      	mov	r0, r4
   15880:	f7fd ff6c 	bl	1375c <AttsCccEnabled>
   15884:	b988      	cbnz	r0, 158aa <GattSendServiceChangedInd+0x52>
    for (connId = 1; connId <= DM_CONN_MAX; connId++)
   15886:	3401      	adds	r4, #1
   15888:	b2e4      	uxtb	r4, r4
   1588a:	2c04      	cmp	r4, #4
   1588c:	d1f6      	bne.n	1587c <GattSendServiceChangedInd+0x24>
    if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
    {
      AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
    }
  }
}
   1588e:	b003      	add	sp, #12
   15890:	bd30      	pop	{r4, r5, pc}
    if (AttsCccEnabled(connId, gattServCb.svcChangedCccdIdx))
   15892:	7869      	ldrb	r1, [r5, #1]
   15894:	f7fd ff62 	bl	1375c <AttsCccEnabled>
   15898:	2800      	cmp	r0, #0
   1589a:	d0f8      	beq.n	1588e <GattSendServiceChangedInd+0x36>
      AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   1589c:	ab01      	add	r3, sp, #4
   1589e:	2204      	movs	r2, #4
   158a0:	2112      	movs	r1, #18
   158a2:	4620      	mov	r0, r4
   158a4:	f7fe f9e6 	bl	13c74 <AttsHandleValueInd>
   158a8:	e7f1      	b.n	1588e <GattSendServiceChangedInd+0x36>
        AttsHandleValueInd(connId, GATT_SC_HDL, sizeof(svcChangedValues), svcChangedValues);
   158aa:	ab01      	add	r3, sp, #4
   158ac:	2204      	movs	r2, #4
   158ae:	2112      	movs	r1, #18
   158b0:	4620      	mov	r0, r4
   158b2:	f7fe f9df 	bl	13c74 <AttsHandleValueInd>
   158b6:	e7e6      	b.n	15886 <GattSendServiceChangedInd+0x2e>
   158b8:	10004320 	.word	0x10004320

000158bc <BdaCpy>:
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   158bc:	680b      	ldr	r3, [r1, #0]
   158be:	6003      	str	r3, [r0, #0]
   158c0:	888b      	ldrh	r3, [r1, #4]
   158c2:	8083      	strh	r3, [r0, #4]
}
   158c4:	4770      	bx	lr
   158c6:	bf00      	nop

000158c8 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   158c8:	b508      	push	{r3, lr}
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   158ca:	2206      	movs	r2, #6
   158cc:	f00d fd04 	bl	232d8 <memcmp>
}
   158d0:	fab0 f080 	clz	r0, r0
   158d4:	0940      	lsrs	r0, r0, #5
   158d6:	bd08      	pop	{r3, pc}

000158d8 <BdaClr>:
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
  memset(pDst, 0, BDA_ADDR_LEN);
   158d8:	2300      	movs	r3, #0
   158da:	6003      	str	r3, [r0, #0]
   158dc:	8083      	strh	r3, [r0, #4]

  return (pDst + BDA_ADDR_LEN);
}
   158de:	3006      	adds	r0, #6
   158e0:	4770      	bx	lr
   158e2:	bf00      	nop

000158e4 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   158e4:	b500      	push	{lr}
   158e6:	b083      	sub	sp, #12
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   158e8:	2300      	movs	r3, #0

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   158ea:	2206      	movs	r2, #6
   158ec:	4669      	mov	r1, sp
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   158ee:	9300      	str	r3, [sp, #0]
   158f0:	f8ad 3004 	strh.w	r3, [sp, #4]
  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   158f4:	f00d fcf0 	bl	232d8 <memcmp>
}
   158f8:	fab0 f080 	clz	r0, r0
   158fc:	0940      	lsrs	r0, r0, #5
   158fe:	b003      	add	sp, #12
   15900:	f85d fb04 	ldr.w	pc, [sp], #4

00015904 <Calc128Cpy>:
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
  memcpy(pDst, pSrc, CALC128_LEN);
   15904:	f8d1 c000 	ldr.w	ip, [r1]
   15908:	684a      	ldr	r2, [r1, #4]
   1590a:	688b      	ldr	r3, [r1, #8]
   1590c:	68c9      	ldr	r1, [r1, #12]
   1590e:	60c1      	str	r1, [r0, #12]
   15910:	f8c0 c000 	str.w	ip, [r0]
   15914:	6042      	str	r2, [r0, #4]
   15916:	6083      	str	r3, [r0, #8]
}
   15918:	4770      	bx	lr
   1591a:	bf00      	nop

0001591c <Calc128Cpy64>:
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
  memcpy(pDst, pSrc, CALC128_LEN/2);
   1591c:	680b      	ldr	r3, [r1, #0]
   1591e:	684a      	ldr	r2, [r1, #4]
   15920:	6042      	str	r2, [r0, #4]
   15922:	6003      	str	r3, [r0, #0]
}
   15924:	4770      	bx	lr
   15926:	bf00      	nop

00015928 <Calc128Xor>:
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   15928:	1c4b      	adds	r3, r1, #1
   1592a:	1ac3      	subs	r3, r0, r3
   1592c:	2b02      	cmp	r3, #2
   1592e:	d914      	bls.n	1595a <Calc128Xor+0x32>
  {
    *pDst++ ^= *pSrc++;
   15930:	680b      	ldr	r3, [r1, #0]
   15932:	f8d0 c000 	ldr.w	ip, [r0]
   15936:	6842      	ldr	r2, [r0, #4]
   15938:	ea83 030c 	eor.w	r3, r3, ip
   1593c:	6003      	str	r3, [r0, #0]
   1593e:	684b      	ldr	r3, [r1, #4]
   15940:	f8d0 c008 	ldr.w	ip, [r0, #8]
   15944:	405a      	eors	r2, r3
   15946:	6042      	str	r2, [r0, #4]
   15948:	688b      	ldr	r3, [r1, #8]
   1594a:	68c2      	ldr	r2, [r0, #12]
   1594c:	ea83 030c 	eor.w	r3, r3, ip
   15950:	6083      	str	r3, [r0, #8]
   15952:	68cb      	ldr	r3, [r1, #12]
   15954:	4053      	eors	r3, r2
   15956:	60c3      	str	r3, [r0, #12]
  for (i = CALC128_LEN; i > 0; i--)
   15958:	4770      	bx	lr
    *pDst++ ^= *pSrc++;
   1595a:	f891 c000 	ldrb.w	ip, [r1]
   1595e:	7803      	ldrb	r3, [r0, #0]
   15960:	7842      	ldrb	r2, [r0, #1]
   15962:	ea83 030c 	eor.w	r3, r3, ip
   15966:	7003      	strb	r3, [r0, #0]
   15968:	784b      	ldrb	r3, [r1, #1]
   1596a:	f890 c002 	ldrb.w	ip, [r0, #2]
   1596e:	4053      	eors	r3, r2
   15970:	7043      	strb	r3, [r0, #1]
   15972:	788b      	ldrb	r3, [r1, #2]
   15974:	78c2      	ldrb	r2, [r0, #3]
   15976:	ea83 030c 	eor.w	r3, r3, ip
   1597a:	7083      	strb	r3, [r0, #2]
   1597c:	78cb      	ldrb	r3, [r1, #3]
   1597e:	f890 c004 	ldrb.w	ip, [r0, #4]
   15982:	4053      	eors	r3, r2
   15984:	70c3      	strb	r3, [r0, #3]
   15986:	790b      	ldrb	r3, [r1, #4]
   15988:	7942      	ldrb	r2, [r0, #5]
   1598a:	ea83 030c 	eor.w	r3, r3, ip
   1598e:	7103      	strb	r3, [r0, #4]
   15990:	794b      	ldrb	r3, [r1, #5]
   15992:	f890 c006 	ldrb.w	ip, [r0, #6]
   15996:	4053      	eors	r3, r2
   15998:	7143      	strb	r3, [r0, #5]
   1599a:	798b      	ldrb	r3, [r1, #6]
   1599c:	79c2      	ldrb	r2, [r0, #7]
   1599e:	ea83 030c 	eor.w	r3, r3, ip
   159a2:	7183      	strb	r3, [r0, #6]
   159a4:	79cb      	ldrb	r3, [r1, #7]
   159a6:	f890 c008 	ldrb.w	ip, [r0, #8]
   159aa:	4053      	eors	r3, r2
   159ac:	71c3      	strb	r3, [r0, #7]
   159ae:	7a0b      	ldrb	r3, [r1, #8]
   159b0:	7a42      	ldrb	r2, [r0, #9]
   159b2:	ea83 030c 	eor.w	r3, r3, ip
   159b6:	7203      	strb	r3, [r0, #8]
   159b8:	7a4b      	ldrb	r3, [r1, #9]
   159ba:	4053      	eors	r3, r2
   159bc:	7243      	strb	r3, [r0, #9]
   159be:	7a82      	ldrb	r2, [r0, #10]
   159c0:	7a8b      	ldrb	r3, [r1, #10]
   159c2:	4053      	eors	r3, r2
   159c4:	7283      	strb	r3, [r0, #10]
   159c6:	7acb      	ldrb	r3, [r1, #11]
   159c8:	f890 c00b 	ldrb.w	ip, [r0, #11]
   159cc:	7b02      	ldrb	r2, [r0, #12]
   159ce:	ea83 030c 	eor.w	r3, r3, ip
   159d2:	72c3      	strb	r3, [r0, #11]
   159d4:	7b0b      	ldrb	r3, [r1, #12]
   159d6:	f890 c00d 	ldrb.w	ip, [r0, #13]
   159da:	4053      	eors	r3, r2
   159dc:	7303      	strb	r3, [r0, #12]
   159de:	7b4b      	ldrb	r3, [r1, #13]
   159e0:	7b82      	ldrb	r2, [r0, #14]
   159e2:	ea83 030c 	eor.w	r3, r3, ip
   159e6:	7343      	strb	r3, [r0, #13]
   159e8:	7b8b      	ldrb	r3, [r1, #14]
   159ea:	4053      	eors	r3, r2
   159ec:	7383      	strb	r3, [r0, #14]
   159ee:	7bcb      	ldrb	r3, [r1, #15]
   159f0:	7bc2      	ldrb	r2, [r0, #15]
   159f2:	4053      	eors	r3, r2
   159f4:	73c3      	strb	r3, [r0, #15]
  }
}
   159f6:	4770      	bx	lr

000159f8 <WStrReverseCpy>:
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
  int16_t i;

  for (i=0; i<len; i++)
   159f8:	b17a      	cbz	r2, 15a1a <WStrReverseCpy+0x22>
   159fa:	2300      	movs	r3, #0
{
   159fc:	b530      	push	{r4, r5, lr}
  for (i=0; i<len; i++)
   159fe:	469c      	mov	ip, r3
  {
    pBuf1[len-1-i] = pBuf2[i];
   15a00:	1e55      	subs	r5, r2, #1
   15a02:	1c5c      	adds	r4, r3, #1
   15a04:	f811 e003 	ldrb.w	lr, [r1, r3]
   15a08:	eba5 0c0c 	sub.w	ip, r5, ip
   15a0c:	b223      	sxth	r3, r4
  for (i=0; i<len; i++)
   15a0e:	4293      	cmp	r3, r2
    pBuf1[len-1-i] = pBuf2[i];
   15a10:	f800 e00c 	strb.w	lr, [r0, ip]
  for (i=0; i<len; i++)
   15a14:	469c      	mov	ip, r3
   15a16:	dbf4      	blt.n	15a02 <WStrReverseCpy+0xa>
  }
}
   15a18:	bd30      	pop	{r4, r5, pc}
   15a1a:	4770      	bx	lr

00015a1c <WStrReverse>:
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   15a1c:	084b      	lsrs	r3, r1, #1
   15a1e:	d00c      	beq.n	15a3a <WStrReverse+0x1e>
   15a20:	1e5a      	subs	r2, r3, #1
   15a22:	4401      	add	r1, r0
   15a24:	1e43      	subs	r3, r0, #1
   15a26:	fa50 fc82 	uxtab	ip, r0, r2
  {
    temp = pBuf[len-i-1];
    pBuf[len-i-1] = pBuf[i];
   15a2a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    temp = pBuf[len-i-1];
   15a2e:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    pBuf[len-i-1] = pBuf[i];
   15a32:	7008      	strb	r0, [r1, #0]
  for (i=0; i<len/2; i++)
   15a34:	4563      	cmp	r3, ip
    pBuf[i] = temp;
   15a36:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   15a38:	d1f7      	bne.n	15a2a <WStrReverse+0xe>
  }
}
   15a3a:	4770      	bx	lr

00015a3c <HciEvtRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
  hciCb.evtCback = evtCback;
   15a3c:	4b01      	ldr	r3, [pc, #4]	; (15a44 <HciEvtRegister+0x8>)
   15a3e:	6098      	str	r0, [r3, #8]
}
   15a40:	4770      	bx	lr
   15a42:	bf00      	nop
   15a44:	10004324 	.word	0x10004324

00015a48 <HciSecRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
  hciCb.secCback = secCback;
   15a48:	4b01      	ldr	r3, [pc, #4]	; (15a50 <HciSecRegister+0x8>)
   15a4a:	60d8      	str	r0, [r3, #12]
}
   15a4c:	4770      	bx	lr
   15a4e:	bf00      	nop
   15a50:	10004324 	.word	0x10004324

00015a54 <HciAclRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
  hciCb.aclCback = aclCback;
   15a54:	4b01      	ldr	r3, [pc, #4]	; (15a5c <HciAclRegister+0x8>)
  hciCb.flowCback = flowCback;
   15a56:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
   15a5a:	4770      	bx	lr
   15a5c:	10004324 	.word	0x10004324

00015a60 <HciHandlerInit>:
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
  /* store handler ID */
  hciCb.handlerId = handlerId;
   15a60:	4b03      	ldr	r3, [pc, #12]	; (15a70 <HciHandlerInit+0x10>)

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   15a62:	2200      	movs	r2, #0
   15a64:	e9c3 2200 	strd	r2, r2, [r3]
  hciCb.handlerId = handlerId;
   15a68:	7618      	strb	r0, [r3, #24]

  /* perform other hci initialization */
  HciCoreInit();
   15a6a:	f001 be3d 	b.w	176e8 <HciCoreInit>
   15a6e:	bf00      	nop
   15a70:	10004324 	.word	0x10004324

00015a74 <HciHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  HciCoreHandler(event, pMsg);
   15a74:	f001 bf5c 	b.w	17930 <HciCoreHandler>

00015a78 <main>:
main(void)
{
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   15a78:	2100      	movs	r1, #0
{
   15a7a:	b508      	push	{r3, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   15a7c:	4608      	mov	r0, r1
   15a7e:	f00f f91b 	bl	24cb8 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   15a82:	480a      	ldr	r0, [pc, #40]	; (15aac <main+0x34>)
   15a84:	f00e ff70 	bl	24968 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   15a88:	f00e ff92 	bl	249b0 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   15a8c:	f00f ff94 	bl	259b8 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   15a90:	2001      	movs	r0, #1
   15a92:	f00f ff99 	bl	259c8 <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   15a96:	f00d fca3 	bl	233e0 <am_bsp_low_power_init>
    am_bsp_itm_printf_enable();
   15a9a:	f00d fcc1 	bl	23420 <am_bsp_itm_printf_enable>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS Watch Example\n");
   15a9e:	4804      	ldr	r0, [pc, #16]	; (15ab0 <main+0x38>)
   15aa0:	f00b fcfa 	bl	21498 <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
   15aa4:	f000 f940 	bl	15d28 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   15aa8:	e7fe      	b.n	15aa8 <main+0x30>
   15aaa:	bf00      	nop
   15aac:	00029ee8 	.word	0x00029ee8
   15ab0:	000268ac 	.word	0x000268ac

00015ab4 <button_handler>:
// Poll the buttons.
//
//*****************************************************************************
void
button_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   15ab4:	b510      	push	{r4, lr}
    WsfTimerStartMs(&ButtonTimer, 10);

    //
    // Every time we get a button timer tick, check all of our buttons.
    //
    am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   15ab6:	4c15      	ldr	r4, [pc, #84]	; (15b0c <button_handler+0x58>)
    WsfTimerStartMs(&ButtonTimer, 10);
   15ab8:	4815      	ldr	r0, [pc, #84]	; (15b10 <button_handler+0x5c>)
   15aba:	210a      	movs	r1, #10
   15abc:	f008 fd08 	bl	1e4d0 <WsfTimerStartMs>
    am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   15ac0:	2103      	movs	r1, #3
   15ac2:	4620      	mov	r0, r4
   15ac4:	f00d fb90 	bl	231e8 <am_devices_button_array_tick>

    //
    // If we got a a press, do something with it.
    //
    if ( am_devices_button_released(am_bsp_psButtons[0]) )
   15ac8:	7b23      	ldrb	r3, [r4, #12]
   15aca:	b90b      	cbnz	r3, 15ad0 <button_handler+0x1c>
   15acc:	7b63      	ldrb	r3, [r4, #13]
   15ace:	b97b      	cbnz	r3, 15af0 <button_handler+0x3c>
    {
        am_util_debug_printf("Got Button 0 Press\n");
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
    }

    if ( am_devices_button_released(am_bsp_psButtons[1]) )
   15ad0:	7f23      	ldrb	r3, [r4, #28]
   15ad2:	b90b      	cbnz	r3, 15ad8 <button_handler+0x24>
   15ad4:	7f63      	ldrb	r3, [r4, #29]
   15ad6:	b993      	cbnz	r3, 15afe <button_handler+0x4a>
    {
        am_util_debug_printf("Got Button 1 Press\n");
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
    }

    if ( am_devices_button_released(am_bsp_psButtons[2]) )
   15ad8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   15adc:	b913      	cbnz	r3, 15ae4 <button_handler+0x30>
   15ade:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   15ae2:	b903      	cbnz	r3, 15ae6 <button_handler+0x32>
    {
        am_util_debug_printf("Got Button 2 Press\n");
    }
}
   15ae4:	bd10      	pop	{r4, pc}
   15ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        am_util_debug_printf("Got Button 2 Press\n");
   15aea:	480a      	ldr	r0, [pc, #40]	; (15b14 <button_handler+0x60>)
   15aec:	f00b bcd4 	b.w	21498 <am_util_stdio_printf>
        am_util_debug_printf("Got Button 0 Press\n");
   15af0:	4809      	ldr	r0, [pc, #36]	; (15b18 <button_handler+0x64>)
   15af2:	f00b fcd1 	bl	21498 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
   15af6:	2002      	movs	r0, #2
   15af8:	f007 ff02 	bl	1d900 <AppUiBtnTest>
   15afc:	e7e8      	b.n	15ad0 <button_handler+0x1c>
        am_util_debug_printf("Got Button 1 Press\n");
   15afe:	4807      	ldr	r0, [pc, #28]	; (15b1c <button_handler+0x68>)
   15b00:	f00b fcca 	bl	21498 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
   15b04:	2002      	movs	r0, #2
   15b06:	f007 fefb 	bl	1d900 <AppUiBtnTest>
   15b0a:	e7e5      	b.n	15ad8 <button_handler+0x24>
   15b0c:	10002c6c 	.word	0x10002c6c
   15b10:	10004344 	.word	0x10004344
   15b14:	000268ec 	.word	0x000268ec
   15b18:	000268c4 	.word	0x000268c4
   15b1c:	000268d8 	.word	0x000268d8

00015b20 <setup_buttons>:
// Sets up a button interface.
//
//*****************************************************************************
void
setup_buttons(void)
{
   15b20:	b508      	push	{r3, lr}
    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   15b22:	4806      	ldr	r0, [pc, #24]	; (15b3c <setup_buttons+0x1c>)
   15b24:	2103      	movs	r1, #3
   15b26:	f00d fb43 	bl	231b0 <am_devices_button_array_init>

    //
    // Start a timer.
    //
    ButtonTimer.handlerId = ButtonHandlerId;
   15b2a:	4b05      	ldr	r3, [pc, #20]	; (15b40 <setup_buttons+0x20>)
   15b2c:	4805      	ldr	r0, [pc, #20]	; (15b44 <setup_buttons+0x24>)
   15b2e:	781b      	ldrb	r3, [r3, #0]
   15b30:	7303      	strb	r3, [r0, #12]
    WsfTimerStartSec(&ButtonTimer, 2);
}
   15b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfTimerStartSec(&ButtonTimer, 2);
   15b36:	2102      	movs	r1, #2
   15b38:	f008 bc88 	b.w	1e44c <WsfTimerStartSec>
   15b3c:	10002c6c 	.word	0x10002c6c
   15b40:	10004340 	.word	0x10004340
   15b44:	10004344 	.word	0x10004344

00015b48 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   15b48:	b510      	push	{r4, lr}
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    WsfOsInit();
   15b4a:	f008 fb29 	bl	1e1a0 <WsfOsInit>
    WsfTimerInit();
   15b4e:	f008 fc57 	bl	1e400 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   15b52:	4b39      	ldr	r3, [pc, #228]	; (15c38 <exactle_stack_init+0xf0>)
   15b54:	4939      	ldr	r1, [pc, #228]	; (15c3c <exactle_stack_init+0xf4>)
   15b56:	2204      	movs	r2, #4
   15b58:	f44f 6038 	mov.w	r0, #2944	; 0xb80
   15b5c:	f008 f950 	bl	1de00 <WsfBufInit>
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
   15b60:	f5b0 6f38 	cmp.w	r0, #2944	; 0xb80
   15b64:	d861      	bhi.n	15c2a <exactle_stack_init+0xe2>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   15b66:	f7fc f94d 	bl	11e04 <SecInit>
    SecAesInit();
   15b6a:	f7fb ff33 	bl	119d4 <SecAesInit>
    SecCmacInit();
   15b6e:	f7fc f8e3 	bl	11d38 <SecCmacInit>
    SecEccInit();
   15b72:	f7f8 fff1 	bl	eb58 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   15b76:	4832      	ldr	r0, [pc, #200]	; (15c40 <exactle_stack_init+0xf8>)
   15b78:	f008 fb06 	bl	1e188 <WsfOsSetNextHandler>
    HciHandlerInit(handlerId);
   15b7c:	f7ff ff70 	bl	15a60 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   15b80:	4830      	ldr	r0, [pc, #192]	; (15c44 <exactle_stack_init+0xfc>)
   15b82:	f008 fb01 	bl	1e188 <WsfOsSetNextHandler>
   15b86:	4604      	mov	r4, r0
    DmDevVsInit(0);
   15b88:	2000      	movs	r0, #0
   15b8a:	f7f7 fe6f 	bl	d86c <DmDevVsInit>
    DmAdvInit();
   15b8e:	f7f6 fe73 	bl	c878 <DmAdvInit>
    DmScanInit();
   15b92:	f7f8 fd85 	bl	e6a0 <DmScanInit>
    DmConnInit();
   15b96:	f7f7 fac9 	bl	d12c <DmConnInit>
    DmConnMasterInit();
   15b9a:	f7f7 fcfd 	bl	d598 <DmConnMasterInit>
    DmConnSlaveInit();
   15b9e:	f7f7 fdaf 	bl	d700 <DmConnSlaveInit>
    DmSecInit();
   15ba2:	f7f8 fe81 	bl	e8a8 <DmSecInit>
    DmSecLescInit();
   15ba6:	f7f8 fed5 	bl	e954 <DmSecLescInit>
    DmPrivInit();
   15baa:	f7f8 f865 	bl	dc78 <DmPrivInit>
    DmHandlerInit(handlerId);
   15bae:	4620      	mov	r0, r4
   15bb0:	f7f7 febc 	bl	d92c <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   15bb4:	4824      	ldr	r0, [pc, #144]	; (15c48 <exactle_stack_init+0x100>)
   15bb6:	f008 fae7 	bl	1e188 <WsfOsSetNextHandler>
    L2cSlaveHandlerInit(handlerId);
   15bba:	f004 f8b9 	bl	19d30 <L2cSlaveHandlerInit>
    L2cInit();
   15bbe:	f003 ff1b 	bl	199f8 <L2cInit>
    L2cSlaveInit();
   15bc2:	f004 f85f 	bl	19c84 <L2cSlaveInit>
    L2cMasterInit();
   15bc6:	f003 ffdb 	bl	19b80 <L2cMasterInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   15bca:	4820      	ldr	r0, [pc, #128]	; (15c4c <exactle_stack_init+0x104>)
   15bcc:	f008 fadc 	bl	1e188 <WsfOsSetNextHandler>
    AttHandlerInit(handlerId);
   15bd0:	f7ff fdc8 	bl	15764 <AttHandlerInit>
    AttsInit();
   15bd4:	f7fe fa88 	bl	140e8 <AttsInit>
    AttsIndInit();
   15bd8:	f7fe f826 	bl	13c28 <AttsIndInit>
    AttcInit();
   15bdc:	f7fd f892 	bl	12d04 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   15be0:	481b      	ldr	r0, [pc, #108]	; (15c50 <exactle_stack_init+0x108>)
   15be2:	f008 fad1 	bl	1e188 <WsfOsSetNextHandler>
    SmpHandlerInit(handlerId);
   15be6:	f006 fb1f 	bl	1c228 <SmpHandlerInit>
    SmpiInit();
   15bea:	f004 fc7d 	bl	1a4e8 <SmpiInit>
    SmpiScInit();
   15bee:	f004 fc71 	bl	1a4d4 <SmpiScInit>
    SmprInit();
   15bf2:	f005 f94d 	bl	1ae90 <SmprInit>
    SmprScInit();
   15bf6:	f005 f941 	bl	1ae7c <SmprScInit>
    HciSetMaxRxAclLen(251);
   15bfa:	20fb      	movs	r0, #251	; 0xfb
   15bfc:	f001 fddc 	bl	177b8 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   15c00:	4814      	ldr	r0, [pc, #80]	; (15c54 <exactle_stack_init+0x10c>)
   15c02:	f008 fac1 	bl	1e188 <WsfOsSetNextHandler>
    AppHandlerInit(handlerId);
   15c06:	f009 f963 	bl	1eed0 <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(WatchHandler);
   15c0a:	4813      	ldr	r0, [pc, #76]	; (15c58 <exactle_stack_init+0x110>)
   15c0c:	f008 fabc 	bl	1e188 <WsfOsSetNextHandler>
    WatchHandlerInit(handlerId);
   15c10:	f7f9 f9e0 	bl	efd4 <WatchHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   15c14:	4811      	ldr	r0, [pc, #68]	; (15c5c <exactle_stack_init+0x114>)
   15c16:	f008 fab7 	bl	1e188 <WsfOsSetNextHandler>
    HciDrvHandlerInit(handlerId);
   15c1a:	f003 fb2b 	bl	19274 <HciDrvHandlerInit>

    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
   15c1e:	4810      	ldr	r0, [pc, #64]	; (15c60 <exactle_stack_init+0x118>)
   15c20:	f008 fab2 	bl	1e188 <WsfOsSetNextHandler>
   15c24:	4b0f      	ldr	r3, [pc, #60]	; (15c64 <exactle_stack_init+0x11c>)
   15c26:	7018      	strb	r0, [r3, #0]

}
   15c28:	bd10      	pop	{r4, pc}
        am_util_debug_printf("Memory pool is too small by %d\r\n",
   15c2a:	4601      	mov	r1, r0
   15c2c:	f5a1 6138 	sub.w	r1, r1, #2944	; 0xb80
   15c30:	480d      	ldr	r0, [pc, #52]	; (15c68 <exactle_stack_init+0x120>)
   15c32:	f00b fc31 	bl	21498 <am_util_stdio_printf>
   15c36:	e796      	b.n	15b66 <exactle_stack_init+0x1e>
   15c38:	10002be4 	.word	0x10002be4
   15c3c:	10004354 	.word	0x10004354
   15c40:	00015a75 	.word	0x00015a75
   15c44:	0000d949 	.word	0x0000d949
   15c48:	00019d41 	.word	0x00019d41
   15c4c:	0001579d 	.word	0x0001579d
   15c50:	0001c28d 	.word	0x0001c28d
   15c54:	0001eedd 	.word	0x0001eedd
   15c58:	0000f06d 	.word	0x0000f06d
   15c5c:	000192d5 	.word	0x000192d5
   15c60:	00015ab5 	.word	0x00015ab5
   15c64:	10004340 	.word	0x10004340
   15c68:	00026900 	.word	0x00026900

00015c6c <am_uart_isr>:
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
   15c6c:	4b01      	ldr	r3, [pc, #4]	; (15c74 <am_uart_isr+0x8>)
   15c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    UARTn(0)->IEC = ui32Status;
   15c70:	645a      	str	r2, [r3, #68]	; 0x44

}
   15c72:	4770      	bx	lr
   15c74:	4001c000 	.word	0x4001c000

00015c78 <am_ble_isr>:
//*****************************************************************************
void
am_ble_isr(void)
{

    HciDrvIntService();
   15c78:	f003 bb10 	b.w	1929c <HciDrvIntService>

00015c7c <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   15c7c:	b508      	push	{r3, lr}
    am_util_debug_printf("RadioTask: setup\r\n");
   15c7e:	4804      	ldr	r0, [pc, #16]	; (15c90 <RadioTaskSetup+0x14>)
   15c80:	f00b fc0a 	bl	21498 <am_util_stdio_printf>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15c84:	4b03      	ldr	r3, [pc, #12]	; (15c94 <RadioTaskSetup+0x18>)
   15c86:	2280      	movs	r2, #128	; 0x80
   15c88:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c


    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);

}
   15c8c:	bd08      	pop	{r3, pc}
   15c8e:	bf00      	nop
   15c90:	00026924 	.word	0x00026924
   15c94:	e000e100 	.word	0xe000e100

00015c98 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   15c98:	b508      	push	{r3, lr}
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
   15c9a:	4807      	ldr	r0, [pc, #28]	; (15cb8 <RadioTask+0x20>)
   15c9c:	f00b fbfc 	bl	21498 <am_util_stdio_printf>
#endif
    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   15ca0:	2001      	movs	r0, #1
   15ca2:	f003 f959 	bl	18f58 <HciDrvRadioBoot>

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   15ca6:	f7ff ff4f 	bl	15b48 <exactle_stack_init>

    //
    // Prep the buttons for use
    //

    setup_buttons();
   15caa:	f7ff ff39 	bl	15b20 <setup_buttons>

    //
    // Start the "Ancs" profile.
    //
    WatchStart();
   15cae:	f7f9 fbf1 	bl	f494 <WatchStart>

        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        wsfOsDispatcher();
   15cb2:	f008 fa87 	bl	1e1c4 <wsfOsDispatcher>
    while (1)
   15cb6:	e7fc      	b.n	15cb2 <RadioTask+0x1a>
   15cb8:	00026938 	.word	0x00026938

00015cbc <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   15cbc:	b500      	push	{lr}
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
   15cbe:	480a      	ldr	r0, [pc, #40]	; (15ce8 <setup_task+0x2c>)
{
   15cc0:	b083      	sub	sp, #12
    am_util_debug_printf("Running setup tasks...\r\n");
   15cc2:	f00b fbe9 	bl	21498 <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   15cc6:	f7ff ffd9 	bl	15c7c <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   15cca:	4a08      	ldr	r2, [pc, #32]	; (15cec <setup_task+0x30>)
   15ccc:	4908      	ldr	r1, [pc, #32]	; (15cf0 <setup_task+0x34>)
   15cce:	4809      	ldr	r0, [pc, #36]	; (15cf4 <setup_task+0x38>)
   15cd0:	2303      	movs	r3, #3
   15cd2:	e9cd 3200 	strd	r3, r2, [sp]
   15cd6:	2300      	movs	r3, #0
   15cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
   15cdc:	f00c fa30 	bl	22140 <xTaskCreate>

    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   15ce0:	2000      	movs	r0, #0
   15ce2:	f00c fb5d 	bl	223a0 <vTaskSuspend>

    while (1);
   15ce6:	e7fe      	b.n	15ce6 <setup_task+0x2a>
   15ce8:	00026954 	.word	0x00026954
   15cec:	10004ed4 	.word	0x10004ed4
   15cf0:	00026970 	.word	0x00026970
   15cf4:	00015c99 	.word	0x00015c99

00015cf8 <am_ctimer_isr>:
{
   15cf8:	b510      	push	{r4, lr}
    ui32Status = am_hal_ctimer_int_status_get(false);
   15cfa:	2000      	movs	r0, #0
   15cfc:	f00f f8c0 	bl	24e80 <am_hal_ctimer_int_status_get>
   15d00:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(ui32Status);
   15d02:	f00f f8ab 	bl	24e5c <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_service(ui32Status);
   15d06:	4620      	mov	r0, r4
}
   15d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_ctimer_int_service(ui32Status);
   15d0c:	f00f b88e 	b.w	24e2c <am_hal_ctimer_int_service>

00015d10 <am_freertos_sleep>:
{
   15d10:	b508      	push	{r3, lr}
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   15d12:	2001      	movs	r0, #1
   15d14:	f00f fe18 	bl	25948 <am_hal_sysctrl_sleep>
}
   15d18:	2000      	movs	r0, #0
   15d1a:	bd08      	pop	{r3, pc}

00015d1c <am_freertos_wakeup>:
}
   15d1c:	4770      	bx	lr
   15d1e:	bf00      	nop

00015d20 <vApplicationMallocFailedHook>:
    while (1);
   15d20:	e7fe      	b.n	15d20 <vApplicationMallocFailedHook>
   15d22:	bf00      	nop

00015d24 <vApplicationStackOverflowHook>:
        __asm("BKPT #0\n") ; // Break into the debugger
   15d24:	be00      	bkpt	0x0000
    while (1)
   15d26:	e7fd      	b.n	15d24 <vApplicationStackOverflowHook>

00015d28 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   15d28:	b500      	push	{lr}
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   15d2a:	4a08      	ldr	r2, [pc, #32]	; (15d4c <run_tasks+0x24>)
   15d2c:	4908      	ldr	r1, [pc, #32]	; (15d50 <run_tasks+0x28>)
   15d2e:	4809      	ldr	r0, [pc, #36]	; (15d54 <run_tasks+0x2c>)
{
   15d30:	b083      	sub	sp, #12
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   15d32:	2303      	movs	r3, #3
   15d34:	e9cd 3200 	strd	r3, r2, [sp]
   15d38:	2300      	movs	r3, #0
   15d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
   15d3e:	f00c f9ff 	bl	22140 <xTaskCreate>

    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
}
   15d42:	b003      	add	sp, #12
   15d44:	f85d eb04 	ldr.w	lr, [sp], #4
    vTaskStartScheduler();
   15d48:	f00c bb9a 	b.w	22480 <vTaskStartScheduler>
   15d4c:	10004ed8 	.word	0x10004ed8
   15d50:	0002697c 	.word	0x0002697c
   15d54:	00015cbd 	.word	0x00015cbd

00015d58 <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   15d58:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15d5a:	1ccb      	adds	r3, r1, #3
{
   15d5c:	4605      	mov	r5, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15d5e:	b298      	uxth	r0, r3
{
   15d60:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15d62:	f008 f919 	bl	1df98 <WsfMsgAlloc>
   15d66:	b118      	cbz	r0, 15d70 <hciCmdAlloc+0x18>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   15d68:	0a2b      	lsrs	r3, r5, #8
   15d6a:	7005      	strb	r5, [r0, #0]
   15d6c:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   15d6e:	7084      	strb	r4, [r0, #2]
    p -= HCI_CMD_HDR_LEN;
  }

  return p;
}
   15d70:	bd38      	pop	{r3, r4, r5, pc}
   15d72:	bf00      	nop

00015d74 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   15d74:	b530      	push	{r4, r5, lr}
   15d76:	b083      	sub	sp, #12
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   15d78:	b120      	cbz	r0, 15d84 <hciCmdSend+0x10>
   15d7a:	4602      	mov	r2, r0
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   15d7c:	2100      	movs	r1, #0
   15d7e:	4811      	ldr	r0, [pc, #68]	; (15dc4 <hciCmdSend+0x50>)
   15d80:	f008 f928 	bl	1dfd4 <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   15d84:	4c10      	ldr	r4, [pc, #64]	; (15dc8 <hciCmdSend+0x54>)
   15d86:	7ea3      	ldrb	r3, [r4, #26]
   15d88:	b90b      	cbnz	r3, 15d8e <hciCmdSend+0x1a>

      /* send command to transport */
      hciTrSendCmd(p);
    }
  }
}
   15d8a:	b003      	add	sp, #12
   15d8c:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15d8e:	f10d 0107 	add.w	r1, sp, #7
   15d92:	f104 0010 	add.w	r0, r4, #16
   15d96:	f008 f923 	bl	1dfe0 <WsfMsgDeq>
   15d9a:	4605      	mov	r5, r0
   15d9c:	2800      	cmp	r0, #0
   15d9e:	d0f4      	beq.n	15d8a <hciCmdSend+0x16>
      hciCmdCb.numCmdPkts--;
   15da0:	7ea3      	ldrb	r3, [r4, #26]
   15da2:	3b01      	subs	r3, #1
   15da4:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15da6:	7842      	ldrb	r2, [r0, #1]
   15da8:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15daa:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15dac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15db0:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15db2:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15db4:	f008 fb4a 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   15db8:	4628      	mov	r0, r5
   15dba:	f002 fe93 	bl	18ae4 <hciTrSendCmd>
}
   15dbe:	b003      	add	sp, #12
   15dc0:	bd30      	pop	{r4, r5, pc}
   15dc2:	bf00      	nop
   15dc4:	10004eec 	.word	0x10004eec
   15dc8:	10004edc 	.word	0x10004edc

00015dcc <hciCmdInit>:
  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   15dcc:	4805      	ldr	r0, [pc, #20]	; (15de4 <hciCmdInit+0x18>)
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   15dce:	4b06      	ldr	r3, [pc, #24]	; (15de8 <hciCmdInit+0x1c>)
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   15dd0:	7e00      	ldrb	r0, [r0, #24]
   15dd2:	7318      	strb	r0, [r3, #12]
  hciCmdCb.numCmdPkts = 1;
   15dd4:	2201      	movs	r2, #1
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   15dd6:	2100      	movs	r1, #0
   15dd8:	e9c3 1104 	strd	r1, r1, [r3, #16]
  hciCmdCb.numCmdPkts = 1;
   15ddc:	769a      	strb	r2, [r3, #26]
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   15dde:	729a      	strb	r2, [r3, #10]
}
   15de0:	4770      	bx	lr
   15de2:	bf00      	nop
   15de4:	10004324 	.word	0x10004324
   15de8:	10004edc 	.word	0x10004edc

00015dec <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   15dec:	b508      	push	{r3, lr}
  HCI_TRACE_INFO1("hciCmdTimeout, opcode=0x%x", hciCmdCb.cmdOpcode);
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   15dee:	f003 f9a7 	bl	19140 <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   15df2:	2000      	movs	r0, #0
   15df4:	f003 f8b0 	bl	18f58 <HciDrvRadioBoot>
  DmDevReset();
}
   15df8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DmDevReset();
   15dfc:	f7f7 bd24 	b.w	d848 <DmDevReset>

00015e00 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   15e00:	b530      	push	{r4, r5, lr}
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   15e02:	4c10      	ldr	r4, [pc, #64]	; (15e44 <hciCmdRecvCmpl+0x44>)
{
   15e04:	b083      	sub	sp, #12
  WsfTimerStop(&hciCmdCb.cmdTimer);
   15e06:	4620      	mov	r0, r4
   15e08:	f008 fba6 	bl	1e558 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   15e0c:	2301      	movs	r3, #1
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15e0e:	f10d 0107 	add.w	r1, sp, #7
   15e12:	f104 0010 	add.w	r0, r4, #16
  hciCmdCb.numCmdPkts = 1;
   15e16:	76a3      	strb	r3, [r4, #26]
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15e18:	f008 f8e2 	bl	1dfe0 <WsfMsgDeq>
   15e1c:	b178      	cbz	r0, 15e3e <hciCmdRecvCmpl+0x3e>
      hciCmdCb.numCmdPkts--;
   15e1e:	7ea3      	ldrb	r3, [r4, #26]
   15e20:	3b01      	subs	r3, #1
   15e22:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15e24:	7842      	ldrb	r2, [r0, #1]
   15e26:	7803      	ldrb	r3, [r0, #0]
   15e28:	4605      	mov	r5, r0
   15e2a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15e2e:	4620      	mov	r0, r4
   15e30:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15e32:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15e34:	f008 fb0a 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   15e38:	4628      	mov	r0, r5
   15e3a:	f002 fe53 	bl	18ae4 <hciTrSendCmd>

  /* send the next queued command */
  hciCmdSend(NULL);
}
   15e3e:	b003      	add	sp, #12
   15e40:	bd30      	pop	{r4, r5, pc}
   15e42:	bf00      	nop
   15e44:	10004edc 	.word	0x10004edc

00015e48 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   15e48:	b570      	push	{r4, r5, r6, lr}
   15e4a:	4604      	mov	r4, r0
   15e4c:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15e4e:	2006      	movs	r0, #6
{
   15e50:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15e52:	f008 f8a1 	bl	1df98 <WsfMsgAlloc>
   15e56:	b190      	cbz	r0, 15e7e <HciDisconnectCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   15e58:	2306      	movs	r3, #6
   15e5a:	7003      	strb	r3, [r0, #0]
   15e5c:	2304      	movs	r3, #4
   15e5e:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   15e60:	4d14      	ldr	r5, [pc, #80]	; (15eb4 <HciDisconnectCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   15e62:	70c4      	strb	r4, [r0, #3]
    UINT8_TO_BSTREAM(p, len);
   15e64:	2303      	movs	r3, #3
   15e66:	7083      	strb	r3, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   15e68:	0a23      	lsrs	r3, r4, #8
   15e6a:	7103      	strb	r3, [r0, #4]
    UINT8_TO_BSTREAM(p, reason);
   15e6c:	4602      	mov	r2, r0
   15e6e:	7146      	strb	r6, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   15e70:	2100      	movs	r1, #0
   15e72:	f105 0010 	add.w	r0, r5, #16
   15e76:	f008 f8ad 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   15e7a:	7eab      	ldrb	r3, [r5, #26]
   15e7c:	b90b      	cbnz	r3, 15e82 <HciDisconnectCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   15e7e:	b002      	add	sp, #8
   15e80:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15e82:	f10d 0107 	add.w	r1, sp, #7
   15e86:	f105 0010 	add.w	r0, r5, #16
   15e8a:	f008 f8a9 	bl	1dfe0 <WsfMsgDeq>
   15e8e:	4604      	mov	r4, r0
   15e90:	2800      	cmp	r0, #0
   15e92:	d0f4      	beq.n	15e7e <HciDisconnectCmd+0x36>
      hciCmdCb.numCmdPkts--;
   15e94:	7eab      	ldrb	r3, [r5, #26]
   15e96:	3b01      	subs	r3, #1
   15e98:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15e9a:	7842      	ldrb	r2, [r0, #1]
   15e9c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15e9e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15ea0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15ea4:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15ea6:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15ea8:	f008 fad0 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   15eac:	4620      	mov	r0, r4
   15eae:	f002 fe19 	bl	18ae4 <hciTrSendCmd>
}
   15eb2:	e7e4      	b.n	15e7e <HciDisconnectCmd+0x36>
   15eb4:	10004edc 	.word	0x10004edc

00015eb8 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   15eb8:	b530      	push	{r4, r5, lr}
   15eba:	4605      	mov	r5, r0
   15ebc:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15ebe:	2011      	movs	r0, #17
{
   15ec0:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15ec2:	f008 f869 	bl	1df98 <WsfMsgAlloc>
   15ec6:	b378      	cbz	r0, 15f28 <HciLeConnUpdateCmd+0x70>
    UINT16_TO_BSTREAM(p, opcode);
   15ec8:	2113      	movs	r1, #19
   15eca:	2320      	movs	r3, #32
   15ecc:	7001      	strb	r1, [r0, #0]
   15ece:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   15ed0:	210e      	movs	r1, #14
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   15ed2:	0a2b      	lsrs	r3, r5, #8
    UINT8_TO_BSTREAM(p, len);
   15ed4:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   15ed6:	70c5      	strb	r5, [r0, #3]
   15ed8:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   15eda:	8823      	ldrh	r3, [r4, #0]
   15edc:	7143      	strb	r3, [r0, #5]
   15ede:	8823      	ldrh	r3, [r4, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   15ee0:	4d1f      	ldr	r5, [pc, #124]	; (15f60 <HciLeConnUpdateCmd+0xa8>)
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   15ee2:	0a1b      	lsrs	r3, r3, #8
   15ee4:	7183      	strb	r3, [r0, #6]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   15ee6:	8863      	ldrh	r3, [r4, #2]
   15ee8:	71c3      	strb	r3, [r0, #7]
   15eea:	8863      	ldrh	r3, [r4, #2]
   15eec:	0a1b      	lsrs	r3, r3, #8
   15eee:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   15ef0:	88a3      	ldrh	r3, [r4, #4]
   15ef2:	7243      	strb	r3, [r0, #9]
   15ef4:	88a3      	ldrh	r3, [r4, #4]
   15ef6:	0a1b      	lsrs	r3, r3, #8
   15ef8:	7283      	strb	r3, [r0, #10]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   15efa:	88e3      	ldrh	r3, [r4, #6]
   15efc:	72c3      	strb	r3, [r0, #11]
   15efe:	88e3      	ldrh	r3, [r4, #6]
   15f00:	0a1b      	lsrs	r3, r3, #8
   15f02:	7303      	strb	r3, [r0, #12]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   15f04:	8923      	ldrh	r3, [r4, #8]
   15f06:	7343      	strb	r3, [r0, #13]
   15f08:	8923      	ldrh	r3, [r4, #8]
   15f0a:	0a1b      	lsrs	r3, r3, #8
   15f0c:	7383      	strb	r3, [r0, #14]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   15f0e:	8963      	ldrh	r3, [r4, #10]
   15f10:	73c3      	strb	r3, [r0, #15]
   15f12:	8963      	ldrh	r3, [r4, #10]
   15f14:	0a1b      	lsrs	r3, r3, #8
   15f16:	7403      	strb	r3, [r0, #16]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   15f18:	4602      	mov	r2, r0
   15f1a:	2100      	movs	r1, #0
   15f1c:	f105 0010 	add.w	r0, r5, #16
   15f20:	f008 f858 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   15f24:	7eab      	ldrb	r3, [r5, #26]
   15f26:	b90b      	cbnz	r3, 15f2c <HciLeConnUpdateCmd+0x74>
    hciCmdSend(pBuf);
  }
}
   15f28:	b003      	add	sp, #12
   15f2a:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15f2c:	f10d 0107 	add.w	r1, sp, #7
   15f30:	f105 0010 	add.w	r0, r5, #16
   15f34:	f008 f854 	bl	1dfe0 <WsfMsgDeq>
   15f38:	4604      	mov	r4, r0
   15f3a:	2800      	cmp	r0, #0
   15f3c:	d0f4      	beq.n	15f28 <HciLeConnUpdateCmd+0x70>
      hciCmdCb.numCmdPkts--;
   15f3e:	7eab      	ldrb	r3, [r5, #26]
   15f40:	3b01      	subs	r3, #1
   15f42:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15f44:	7842      	ldrb	r2, [r0, #1]
   15f46:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15f48:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15f4a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15f4e:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15f50:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   15f52:	f008 fa7b 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   15f56:	4620      	mov	r0, r4
   15f58:	f002 fdc4 	bl	18ae4 <hciTrSendCmd>
}
   15f5c:	e7e4      	b.n	15f28 <HciLeConnUpdateCmd+0x70>
   15f5e:	bf00      	nop
   15f60:	10004edc 	.word	0x10004edc

00015f64 <HciLeCreateConnCmd>:
 */
/*************************************************************************************************/
void HciLeCreateConnCmd(uint16_t scanInterval, uint16_t scanWindow, uint8_t filterPolicy,
                        uint8_t peerAddrType, uint8_t *pPeerAddr, uint8_t ownAddrType,
                        hciConnSpec_t *pConnSpec)
{
   15f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15f68:	b082      	sub	sp, #8
   15f6a:	4606      	mov	r6, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15f6c:	201c      	movs	r0, #28
{
   15f6e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   15f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15f74:	460f      	mov	r7, r1
   15f76:	4692      	mov	sl, r2
   15f78:	4699      	mov	r9, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   15f7a:	f008 f80d 	bl	1df98 <WsfMsgAlloc>
   15f7e:	2800      	cmp	r0, #0
   15f80:	d03d      	beq.n	15ffe <HciLeCreateConnCmd+0x9a>
    UINT16_TO_BSTREAM(p, opcode);
   15f82:	4604      	mov	r4, r0

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CREATE_CONN, HCI_LEN_LE_CREATE_CONN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, scanInterval);
    UINT16_TO_BSTREAM(p, scanWindow);
   15f84:	0a3b      	lsrs	r3, r7, #8
    UINT16_TO_BSTREAM(p, scanInterval);
   15f86:	70c6      	strb	r6, [r0, #3]
    UINT16_TO_BSTREAM(p, scanWindow);
   15f88:	7183      	strb	r3, [r0, #6]
    UINT16_TO_BSTREAM(p, scanInterval);
   15f8a:	0a36      	lsrs	r6, r6, #8
    UINT16_TO_BSTREAM(p, opcode);
   15f8c:	230d      	movs	r3, #13
    UINT16_TO_BSTREAM(p, scanInterval);
   15f8e:	7106      	strb	r6, [r0, #4]
    UINT8_TO_BSTREAM(p, filterPolicy);
   15f90:	f880 a007 	strb.w	sl, [r0, #7]
    UINT8_TO_BSTREAM(p, peerAddrType);
   15f94:	f880 9008 	strb.w	r9, [r0, #8]
    UINT16_TO_BSTREAM(p, scanWindow);
   15f98:	7147      	strb	r7, [r0, #5]
    UINT16_TO_BSTREAM(p, opcode);
   15f9a:	7023      	strb	r3, [r4, #0]
   15f9c:	2320      	movs	r3, #32
   15f9e:	7063      	strb	r3, [r4, #1]
    UINT8_TO_BSTREAM(p, len);
   15fa0:	2319      	movs	r3, #25
    BDA_TO_BSTREAM(p, pPeerAddr);
   15fa2:	990a      	ldr	r1, [sp, #40]	; 0x28
    UINT8_TO_BSTREAM(p, len);
   15fa4:	70a3      	strb	r3, [r4, #2]
    BDA_TO_BSTREAM(p, pPeerAddr);
   15fa6:	3009      	adds	r0, #9
   15fa8:	f7ff fc88 	bl	158bc <BdaCpy>
    UINT8_TO_BSTREAM(p, ownAddrType);
   15fac:	f884 800f 	strb.w	r8, [r4, #15]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   15fb0:	882b      	ldrh	r3, [r5, #0]
   15fb2:	7423      	strb	r3, [r4, #16]
   15fb4:	882b      	ldrh	r3, [r5, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   15fb6:	4e20      	ldr	r6, [pc, #128]	; (16038 <HciLeCreateConnCmd+0xd4>)
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   15fb8:	0a1b      	lsrs	r3, r3, #8
   15fba:	7463      	strb	r3, [r4, #17]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   15fbc:	886b      	ldrh	r3, [r5, #2]
   15fbe:	74a3      	strb	r3, [r4, #18]
   15fc0:	886b      	ldrh	r3, [r5, #2]
   15fc2:	0a1b      	lsrs	r3, r3, #8
   15fc4:	74e3      	strb	r3, [r4, #19]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   15fc6:	88ab      	ldrh	r3, [r5, #4]
   15fc8:	7523      	strb	r3, [r4, #20]
   15fca:	88ab      	ldrh	r3, [r5, #4]
   15fcc:	0a1b      	lsrs	r3, r3, #8
   15fce:	7563      	strb	r3, [r4, #21]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   15fd0:	88eb      	ldrh	r3, [r5, #6]
   15fd2:	75a3      	strb	r3, [r4, #22]
   15fd4:	88eb      	ldrh	r3, [r5, #6]
   15fd6:	0a1b      	lsrs	r3, r3, #8
   15fd8:	75e3      	strb	r3, [r4, #23]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   15fda:	892b      	ldrh	r3, [r5, #8]
   15fdc:	7623      	strb	r3, [r4, #24]
   15fde:	892b      	ldrh	r3, [r5, #8]
   15fe0:	0a1b      	lsrs	r3, r3, #8
   15fe2:	7663      	strb	r3, [r4, #25]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   15fe4:	896b      	ldrh	r3, [r5, #10]
   15fe6:	76a3      	strb	r3, [r4, #26]
   15fe8:	896b      	ldrh	r3, [r5, #10]
   15fea:	0a1b      	lsrs	r3, r3, #8
   15fec:	76e3      	strb	r3, [r4, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   15fee:	4622      	mov	r2, r4
   15ff0:	2100      	movs	r1, #0
   15ff2:	f106 0010 	add.w	r0, r6, #16
   15ff6:	f007 ffed 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   15ffa:	7eb3      	ldrb	r3, [r6, #26]
   15ffc:	b913      	cbnz	r3, 16004 <HciLeCreateConnCmd+0xa0>
    hciCmdSend(pBuf);
  }
}
   15ffe:	b002      	add	sp, #8
   16000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16004:	f10d 0107 	add.w	r1, sp, #7
   16008:	f106 0010 	add.w	r0, r6, #16
   1600c:	f007 ffe8 	bl	1dfe0 <WsfMsgDeq>
   16010:	4604      	mov	r4, r0
   16012:	2800      	cmp	r0, #0
   16014:	d0f3      	beq.n	15ffe <HciLeCreateConnCmd+0x9a>
      hciCmdCb.numCmdPkts--;
   16016:	7eb3      	ldrb	r3, [r6, #26]
   16018:	3b01      	subs	r3, #1
   1601a:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1601c:	7842      	ldrb	r2, [r0, #1]
   1601e:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16020:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16022:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16026:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16028:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1602a:	f008 fa0f 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   1602e:	4620      	mov	r0, r4
   16030:	f002 fd58 	bl	18ae4 <hciTrSendCmd>
}
   16034:	e7e3      	b.n	15ffe <HciLeCreateConnCmd+0x9a>
   16036:	bf00      	nop
   16038:	10004edc 	.word	0x10004edc

0001603c <HciLeCreateConnCancelCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeCreateConnCancelCmd(void)
{
   1603c:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1603e:	2003      	movs	r0, #3
{
   16040:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16042:	f007 ffa9 	bl	1df98 <WsfMsgAlloc>
   16046:	b160      	cbz	r0, 16062 <HciLeCreateConnCancelCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16048:	4c13      	ldr	r4, [pc, #76]	; (16098 <HciLeCreateConnCancelCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1604a:	f242 030e 	movw	r3, #8206	; 0x200e
    UINT8_TO_BSTREAM(p, len);
   1604e:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   16050:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16052:	4602      	mov	r2, r0
   16054:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16056:	f104 0010 	add.w	r0, r4, #16
   1605a:	f007 ffbb 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1605e:	7ea3      	ldrb	r3, [r4, #26]
   16060:	b90b      	cbnz	r3, 16066 <HciLeCreateConnCancelCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CREATE_CONN_CANCEL, HCI_LEN_LE_CREATE_CONN_CANCEL)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   16062:	b003      	add	sp, #12
   16064:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16066:	f10d 0107 	add.w	r1, sp, #7
   1606a:	f104 0010 	add.w	r0, r4, #16
   1606e:	f007 ffb7 	bl	1dfe0 <WsfMsgDeq>
   16072:	4605      	mov	r5, r0
   16074:	2800      	cmp	r0, #0
   16076:	d0f4      	beq.n	16062 <HciLeCreateConnCancelCmd+0x26>
      hciCmdCb.numCmdPkts--;
   16078:	7ea3      	ldrb	r3, [r4, #26]
   1607a:	3b01      	subs	r3, #1
   1607c:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1607e:	7842      	ldrb	r2, [r0, #1]
   16080:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16082:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16084:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16088:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1608a:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1608c:	f008 f9de 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16090:	4628      	mov	r0, r5
   16092:	f002 fd27 	bl	18ae4 <hciTrSendCmd>
}
   16096:	e7e4      	b.n	16062 <HciLeCreateConnCancelCmd+0x26>
   16098:	10004edc 	.word	0x10004edc

0001609c <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   1609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   160a0:	b082      	sub	sp, #8
   160a2:	4607      	mov	r7, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   160a4:	2011      	movs	r0, #17
{
   160a6:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
   160aa:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   160ae:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   160b2:	460e      	mov	r6, r1
   160b4:	4615      	mov	r5, r2
   160b6:	461c      	mov	r4, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   160b8:	f007 ff6e 	bl	1df98 <WsfMsgAlloc>
   160bc:	b360      	cbz	r0, 16118 <HciLeRemoteConnParamReqReply+0x7c>
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    UINT16_TO_BSTREAM(p, intervalMin);
    UINT16_TO_BSTREAM(p, intervalMax);
    UINT16_TO_BSTREAM(p, latency);
    UINT16_TO_BSTREAM(p, timeout);
   160be:	ea4f 231a 	mov.w	r3, sl, lsr #8
    UINT16_TO_BSTREAM(p, latency);
   160c2:	7244      	strb	r4, [r0, #9]
    UINT16_TO_BSTREAM(p, timeout);
   160c4:	7303      	strb	r3, [r0, #12]
   160c6:	4684      	mov	ip, r0
    UINT16_TO_BSTREAM(p, latency);
   160c8:	0a24      	lsrs	r4, r4, #8
    UINT16_TO_BSTREAM(p, minCeLen);
    UINT16_TO_BSTREAM(p, maxCeLen);
   160ca:	ea4f 2318 	mov.w	r3, r8, lsr #8
    UINT16_TO_BSTREAM(p, handle);
   160ce:	70c7      	strb	r7, [r0, #3]
    UINT16_TO_BSTREAM(p, intervalMin);
   160d0:	7146      	strb	r6, [r0, #5]
    UINT16_TO_BSTREAM(p, intervalMax);
   160d2:	71c5      	strb	r5, [r0, #7]
    UINT16_TO_BSTREAM(p, latency);
   160d4:	7284      	strb	r4, [r0, #10]
    UINT16_TO_BSTREAM(p, maxCeLen);
   160d6:	7403      	strb	r3, [r0, #16]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   160d8:	4c1d      	ldr	r4, [pc, #116]	; (16150 <HciLeRemoteConnParamReqReply+0xb4>)
    UINT16_TO_BSTREAM(p, timeout);
   160da:	f880 a00b 	strb.w	sl, [r0, #11]
    UINT16_TO_BSTREAM(p, opcode);
   160de:	2320      	movs	r3, #32
    UINT16_TO_BSTREAM(p, minCeLen);
   160e0:	ea4f 2219 	mov.w	r2, r9, lsr #8
    UINT16_TO_BSTREAM(p, handle);
   160e4:	0a3f      	lsrs	r7, r7, #8
    UINT16_TO_BSTREAM(p, intervalMin);
   160e6:	0a36      	lsrs	r6, r6, #8
    UINT16_TO_BSTREAM(p, intervalMax);
   160e8:	0a2d      	lsrs	r5, r5, #8
    UINT16_TO_BSTREAM(p, minCeLen);
   160ea:	7382      	strb	r2, [r0, #14]
    UINT16_TO_BSTREAM(p, handle);
   160ec:	7107      	strb	r7, [r0, #4]
    UINT16_TO_BSTREAM(p, intervalMin);
   160ee:	7186      	strb	r6, [r0, #6]
    UINT16_TO_BSTREAM(p, intervalMax);
   160f0:	7205      	strb	r5, [r0, #8]
    UINT16_TO_BSTREAM(p, minCeLen);
   160f2:	f880 900d 	strb.w	r9, [r0, #13]
    UINT16_TO_BSTREAM(p, maxCeLen);
   160f6:	f880 800f 	strb.w	r8, [r0, #15]
    UINT16_TO_BSTREAM(p, opcode);
   160fa:	f88c 3000 	strb.w	r3, [ip]
   160fe:	f88c 3001 	strb.w	r3, [ip, #1]
    UINT8_TO_BSTREAM(p, len);
   16102:	230e      	movs	r3, #14
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16104:	4602      	mov	r2, r0
    UINT8_TO_BSTREAM(p, len);
   16106:	f88c 3002 	strb.w	r3, [ip, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1610a:	2100      	movs	r1, #0
   1610c:	f104 0010 	add.w	r0, r4, #16
   16110:	f007 ff60 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16114:	7ea3      	ldrb	r3, [r4, #26]
   16116:	b913      	cbnz	r3, 1611e <HciLeRemoteConnParamReqReply+0x82>
    hciCmdSend(pBuf);
  }
}
   16118:	b002      	add	sp, #8
   1611a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1611e:	f10d 0107 	add.w	r1, sp, #7
   16122:	f104 0010 	add.w	r0, r4, #16
   16126:	f007 ff5b 	bl	1dfe0 <WsfMsgDeq>
   1612a:	4605      	mov	r5, r0
   1612c:	2800      	cmp	r0, #0
   1612e:	d0f3      	beq.n	16118 <HciLeRemoteConnParamReqReply+0x7c>
      hciCmdCb.numCmdPkts--;
   16130:	7ea3      	ldrb	r3, [r4, #26]
   16132:	3b01      	subs	r3, #1
   16134:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16136:	7842      	ldrb	r2, [r0, #1]
   16138:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1613a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1613c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16140:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16142:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16144:	f008 f982 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16148:	4628      	mov	r0, r5
   1614a:	f002 fccb 	bl	18ae4 <hciTrSendCmd>
}
   1614e:	e7e3      	b.n	16118 <HciLeRemoteConnParamReqReply+0x7c>
   16150:	10004edc 	.word	0x10004edc

00016154 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   16154:	b570      	push	{r4, r5, r6, lr}
   16156:	4604      	mov	r4, r0
   16158:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1615a:	2006      	movs	r0, #6
{
   1615c:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1615e:	f007 ff1b 	bl	1df98 <WsfMsgAlloc>
   16162:	b190      	cbz	r0, 1618a <HciLeRemoteConnParamReqNegReply+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   16164:	2321      	movs	r3, #33	; 0x21
   16166:	7003      	strb	r3, [r0, #0]
   16168:	2320      	movs	r3, #32
   1616a:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1616c:	4d14      	ldr	r5, [pc, #80]	; (161c0 <HciLeRemoteConnParamReqNegReply+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   1616e:	70c4      	strb	r4, [r0, #3]
    UINT8_TO_BSTREAM(p, len);
   16170:	2303      	movs	r3, #3
   16172:	7083      	strb	r3, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   16174:	0a23      	lsrs	r3, r4, #8
   16176:	7103      	strb	r3, [r0, #4]
    UINT8_TO_BSTREAM(p, reason);
   16178:	4602      	mov	r2, r0
   1617a:	7146      	strb	r6, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1617c:	2100      	movs	r1, #0
   1617e:	f105 0010 	add.w	r0, r5, #16
   16182:	f007 ff27 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16186:	7eab      	ldrb	r3, [r5, #26]
   16188:	b90b      	cbnz	r3, 1618e <HciLeRemoteConnParamReqNegReply+0x3a>
    hciCmdSend(pBuf);
  }
}
   1618a:	b002      	add	sp, #8
   1618c:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1618e:	f10d 0107 	add.w	r1, sp, #7
   16192:	f105 0010 	add.w	r0, r5, #16
   16196:	f007 ff23 	bl	1dfe0 <WsfMsgDeq>
   1619a:	4604      	mov	r4, r0
   1619c:	2800      	cmp	r0, #0
   1619e:	d0f4      	beq.n	1618a <HciLeRemoteConnParamReqNegReply+0x36>
      hciCmdCb.numCmdPkts--;
   161a0:	7eab      	ldrb	r3, [r5, #26]
   161a2:	3b01      	subs	r3, #1
   161a4:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   161a6:	7842      	ldrb	r2, [r0, #1]
   161a8:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   161aa:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   161ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   161b0:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   161b2:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   161b4:	f008 f94a 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   161b8:	4620      	mov	r0, r4
   161ba:	f002 fc93 	bl	18ae4 <hciTrSendCmd>
}
   161be:	e7e4      	b.n	1618a <HciLeRemoteConnParamReqNegReply+0x36>
   161c0:	10004edc 	.word	0x10004edc

000161c4 <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   161c4:	b570      	push	{r4, r5, r6, lr}
   161c6:	4605      	mov	r5, r0
   161c8:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   161ca:	2009      	movs	r0, #9
{
   161cc:	460e      	mov	r6, r1
   161ce:	4614      	mov	r4, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   161d0:	f007 fee2 	bl	1df98 <WsfMsgAlloc>
   161d4:	b1b8      	cbz	r0, 16206 <HciLeSetDataLen+0x42>
    UINT16_TO_BSTREAM(p, opcode);
   161d6:	2322      	movs	r3, #34	; 0x22
   161d8:	7003      	strb	r3, [r0, #0]
   161da:	2320      	movs	r3, #32
   161dc:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   161de:	2306      	movs	r3, #6
   161e0:	7083      	strb	r3, [r0, #2]
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   161e2:	70c5      	strb	r5, [r0, #3]
   161e4:	0a2b      	lsrs	r3, r5, #8
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   161e6:	4d15      	ldr	r5, [pc, #84]	; (1623c <HciLeSetDataLen+0x78>)
    UINT16_TO_BSTREAM(p, handle);
   161e8:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, txOctets);
   161ea:	0a32      	lsrs	r2, r6, #8
    UINT16_TO_BSTREAM(p, txTime);
   161ec:	0a23      	lsrs	r3, r4, #8
    UINT16_TO_BSTREAM(p, txOctets);
   161ee:	7182      	strb	r2, [r0, #6]
    UINT16_TO_BSTREAM(p, txTime);
   161f0:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, txOctets);
   161f2:	7146      	strb	r6, [r0, #5]
    UINT16_TO_BSTREAM(p, txTime);
   161f4:	71c4      	strb	r4, [r0, #7]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   161f6:	4602      	mov	r2, r0
   161f8:	2100      	movs	r1, #0
   161fa:	f105 0010 	add.w	r0, r5, #16
   161fe:	f007 fee9 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16202:	7eab      	ldrb	r3, [r5, #26]
   16204:	b90b      	cbnz	r3, 1620a <HciLeSetDataLen+0x46>
    hciCmdSend(pBuf);
  }
}
   16206:	b002      	add	sp, #8
   16208:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1620a:	f10d 0107 	add.w	r1, sp, #7
   1620e:	f105 0010 	add.w	r0, r5, #16
   16212:	f007 fee5 	bl	1dfe0 <WsfMsgDeq>
   16216:	4604      	mov	r4, r0
   16218:	2800      	cmp	r0, #0
   1621a:	d0f4      	beq.n	16206 <HciLeSetDataLen+0x42>
      hciCmdCb.numCmdPkts--;
   1621c:	7eab      	ldrb	r3, [r5, #26]
   1621e:	3b01      	subs	r3, #1
   16220:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16222:	7842      	ldrb	r2, [r0, #1]
   16224:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16226:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16228:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1622c:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1622e:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16230:	f008 f90c 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16234:	4620      	mov	r0, r4
   16236:	f002 fc55 	bl	18ae4 <hciTrSendCmd>
}
   1623a:	e7e4      	b.n	16206 <HciLeSetDataLen+0x42>
   1623c:	10004edc 	.word	0x10004edc

00016240 <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   16240:	b570      	push	{r4, r5, r6, lr}
   16242:	4605      	mov	r5, r0
   16244:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16246:	2007      	movs	r0, #7
{
   16248:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1624a:	f007 fea5 	bl	1df98 <WsfMsgAlloc>
   1624e:	b1a0      	cbz	r0, 1627a <HciLeWriteDefDataLen+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   16250:	2324      	movs	r3, #36	; 0x24
   16252:	7003      	strb	r3, [r0, #0]
   16254:	2320      	movs	r3, #32
   16256:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   16258:	2304      	movs	r3, #4
   1625a:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1625c:	4e14      	ldr	r6, [pc, #80]	; (162b0 <HciLeWriteDefDataLen+0x70>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   1625e:	70c5      	strb	r5, [r0, #3]
   16260:	0a2b      	lsrs	r3, r5, #8
   16262:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   16264:	0a23      	lsrs	r3, r4, #8
   16266:	7183      	strb	r3, [r0, #6]
   16268:	4602      	mov	r2, r0
   1626a:	7144      	strb	r4, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1626c:	2100      	movs	r1, #0
   1626e:	f106 0010 	add.w	r0, r6, #16
   16272:	f007 feaf 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16276:	7eb3      	ldrb	r3, [r6, #26]
   16278:	b90b      	cbnz	r3, 1627e <HciLeWriteDefDataLen+0x3e>
    hciCmdSend(pBuf);
  }
}
   1627a:	b002      	add	sp, #8
   1627c:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1627e:	f10d 0107 	add.w	r1, sp, #7
   16282:	f106 0010 	add.w	r0, r6, #16
   16286:	f007 feab 	bl	1dfe0 <WsfMsgDeq>
   1628a:	4604      	mov	r4, r0
   1628c:	2800      	cmp	r0, #0
   1628e:	d0f4      	beq.n	1627a <HciLeWriteDefDataLen+0x3a>
      hciCmdCb.numCmdPkts--;
   16290:	7eb3      	ldrb	r3, [r6, #26]
   16292:	3b01      	subs	r3, #1
   16294:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16296:	7842      	ldrb	r2, [r0, #1]
   16298:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1629a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1629c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   162a0:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   162a2:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   162a4:	f008 f8d2 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   162a8:	4620      	mov	r0, r4
   162aa:	f002 fc1b 	bl	18ae4 <hciTrSendCmd>
}
   162ae:	e7e4      	b.n	1627a <HciLeWriteDefDataLen+0x3a>
   162b0:	10004edc 	.word	0x10004edc

000162b4 <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   162b4:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   162b6:	2003      	movs	r0, #3
{
   162b8:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   162ba:	f007 fe6d 	bl	1df98 <WsfMsgAlloc>
   162be:	b160      	cbz	r0, 162da <HciLeReadMaxDataLen+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   162c0:	4c13      	ldr	r4, [pc, #76]	; (16310 <HciLeReadMaxDataLen+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   162c2:	f242 032f 	movw	r3, #8239	; 0x202f
    UINT8_TO_BSTREAM(p, len);
   162c6:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   162c8:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   162ca:	4602      	mov	r2, r0
   162cc:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   162ce:	f104 0010 	add.w	r0, r4, #16
   162d2:	f007 fe7f 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   162d6:	7ea3      	ldrb	r3, [r4, #26]
   162d8:	b90b      	cbnz	r3, 162de <HciLeReadMaxDataLen+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   162da:	b003      	add	sp, #12
   162dc:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   162de:	f10d 0107 	add.w	r1, sp, #7
   162e2:	f104 0010 	add.w	r0, r4, #16
   162e6:	f007 fe7b 	bl	1dfe0 <WsfMsgDeq>
   162ea:	4605      	mov	r5, r0
   162ec:	2800      	cmp	r0, #0
   162ee:	d0f4      	beq.n	162da <HciLeReadMaxDataLen+0x26>
      hciCmdCb.numCmdPkts--;
   162f0:	7ea3      	ldrb	r3, [r4, #26]
   162f2:	3b01      	subs	r3, #1
   162f4:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   162f6:	7842      	ldrb	r2, [r0, #1]
   162f8:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   162fa:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   162fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16300:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16302:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16304:	f008 f8a2 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16308:	4628      	mov	r0, r5
   1630a:	f002 fbeb 	bl	18ae4 <hciTrSendCmd>
}
   1630e:	e7e4      	b.n	162da <HciLeReadMaxDataLen+0x26>
   16310:	10004edc 	.word	0x10004edc

00016314 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   16314:	b530      	push	{r4, r5, lr}
   16316:	4605      	mov	r5, r0
   16318:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1631a:	2023      	movs	r0, #35	; 0x23
{
   1631c:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1631e:	f007 fe3b 	bl	1df98 <WsfMsgAlloc>
   16322:	b328      	cbz	r0, 16370 <HciLeEncryptCmd+0x5c>
    UINT16_TO_BSTREAM(p, opcode);
   16324:	f242 0117 	movw	r1, #8215	; 0x2017
    UINT8_TO_BSTREAM(p, len);
   16328:	2320      	movs	r3, #32
    UINT16_TO_BSTREAM(p, opcode);
   1632a:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   1632c:	7083      	strb	r3, [r0, #2]
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pKey, HCI_KEY_LEN);
   1632e:	4602      	mov	r2, r0
   16330:	6869      	ldr	r1, [r5, #4]
   16332:	6828      	ldr	r0, [r5, #0]
   16334:	68ab      	ldr	r3, [r5, #8]
   16336:	68ed      	ldr	r5, [r5, #12]
   16338:	f8c2 500f 	str.w	r5, [r2, #15]
   1633c:	f8c2 0003 	str.w	r0, [r2, #3]
   16340:	f8c2 1007 	str.w	r1, [r2, #7]
   16344:	f8c2 300b 	str.w	r3, [r2, #11]
    p += HCI_KEY_LEN;
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   16348:	6820      	ldr	r0, [r4, #0]
   1634a:	6861      	ldr	r1, [r4, #4]
   1634c:	68a3      	ldr	r3, [r4, #8]
   1634e:	68e4      	ldr	r4, [r4, #12]
   16350:	f8c2 401f 	str.w	r4, [r2, #31]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16354:	4c14      	ldr	r4, [pc, #80]	; (163a8 <HciLeEncryptCmd+0x94>)
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   16356:	f8c2 0013 	str.w	r0, [r2, #19]
   1635a:	f8c2 1017 	str.w	r1, [r2, #23]
   1635e:	f8c2 301b 	str.w	r3, [r2, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16362:	2100      	movs	r1, #0
   16364:	f104 0010 	add.w	r0, r4, #16
   16368:	f007 fe34 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1636c:	7ea3      	ldrb	r3, [r4, #26]
   1636e:	b90b      	cbnz	r3, 16374 <HciLeEncryptCmd+0x60>
    hciCmdSend(pBuf);
  }
}
   16370:	b003      	add	sp, #12
   16372:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16374:	f10d 0107 	add.w	r1, sp, #7
   16378:	f104 0010 	add.w	r0, r4, #16
   1637c:	f007 fe30 	bl	1dfe0 <WsfMsgDeq>
   16380:	4605      	mov	r5, r0
   16382:	2800      	cmp	r0, #0
   16384:	d0f4      	beq.n	16370 <HciLeEncryptCmd+0x5c>
      hciCmdCb.numCmdPkts--;
   16386:	7ea3      	ldrb	r3, [r4, #26]
   16388:	3b01      	subs	r3, #1
   1638a:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1638c:	7842      	ldrb	r2, [r0, #1]
   1638e:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16390:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16392:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16396:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16398:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1639a:	f008 f857 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   1639e:	4628      	mov	r0, r5
   163a0:	f002 fba0 	bl	18ae4 <hciTrSendCmd>
}
   163a4:	e7e4      	b.n	16370 <HciLeEncryptCmd+0x5c>
   163a6:	bf00      	nop
   163a8:	10004edc 	.word	0x10004edc

000163ac <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   163ac:	b530      	push	{r4, r5, lr}
   163ae:	4604      	mov	r4, r0
   163b0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   163b2:	2005      	movs	r0, #5
   163b4:	f007 fdf0 	bl	1df98 <WsfMsgAlloc>
   163b8:	b188      	cbz	r0, 163de <HciLeLtkReqNegReplCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   163ba:	4d16      	ldr	r5, [pc, #88]	; (16414 <HciLeLtkReqNegReplCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   163bc:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   163be:	211b      	movs	r1, #27
   163c0:	2320      	movs	r3, #32
   163c2:	7001      	strb	r1, [r0, #0]
   163c4:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   163c6:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
   163c8:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
   163ca:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   163cc:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   163ce:	4602      	mov	r2, r0
   163d0:	2100      	movs	r1, #0
   163d2:	f105 0010 	add.w	r0, r5, #16
   163d6:	f007 fdfd 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   163da:	7eab      	ldrb	r3, [r5, #26]
   163dc:	b90b      	cbnz	r3, 163e2 <HciLeLtkReqNegReplCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   163de:	b003      	add	sp, #12
   163e0:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   163e2:	f10d 0107 	add.w	r1, sp, #7
   163e6:	f105 0010 	add.w	r0, r5, #16
   163ea:	f007 fdf9 	bl	1dfe0 <WsfMsgDeq>
   163ee:	4604      	mov	r4, r0
   163f0:	2800      	cmp	r0, #0
   163f2:	d0f4      	beq.n	163de <HciLeLtkReqNegReplCmd+0x32>
      hciCmdCb.numCmdPkts--;
   163f4:	7eab      	ldrb	r3, [r5, #26]
   163f6:	3b01      	subs	r3, #1
   163f8:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   163fa:	7842      	ldrb	r2, [r0, #1]
   163fc:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   163fe:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16400:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16404:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16406:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16408:	f008 f820 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   1640c:	4620      	mov	r0, r4
   1640e:	f002 fb69 	bl	18ae4 <hciTrSendCmd>
}
   16412:	e7e4      	b.n	163de <HciLeLtkReqNegReplCmd+0x32>
   16414:	10004edc 	.word	0x10004edc

00016418 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   16418:	b530      	push	{r4, r5, lr}
   1641a:	4605      	mov	r5, r0
   1641c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1641e:	2015      	movs	r0, #21
{
   16420:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16422:	f007 fdb9 	bl	1df98 <WsfMsgAlloc>
   16426:	b1e8      	cbz	r0, 16464 <HciLeLtkReqReplCmd+0x4c>
    UINT16_TO_BSTREAM(p, opcode);
   16428:	211a      	movs	r1, #26
   1642a:	2320      	movs	r3, #32
   1642c:	7001      	strb	r1, [r0, #0]
   1642e:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   16430:	2112      	movs	r1, #18
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   16432:	0a2b      	lsrs	r3, r5, #8
    UINT8_TO_BSTREAM(p, len);
   16434:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   16436:	70c5      	strb	r5, [r0, #3]
   16438:	7103      	strb	r3, [r0, #4]
    memcpy(p, pKey, HCI_KEY_LEN);
   1643a:	4602      	mov	r2, r0
   1643c:	6861      	ldr	r1, [r4, #4]
   1643e:	6820      	ldr	r0, [r4, #0]
   16440:	68a3      	ldr	r3, [r4, #8]
   16442:	68e4      	ldr	r4, [r4, #12]
   16444:	f8c2 4011 	str.w	r4, [r2, #17]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16448:	4c14      	ldr	r4, [pc, #80]	; (1649c <HciLeLtkReqReplCmd+0x84>)
    memcpy(p, pKey, HCI_KEY_LEN);
   1644a:	f8c2 0005 	str.w	r0, [r2, #5]
   1644e:	f8c2 1009 	str.w	r1, [r2, #9]
   16452:	f8c2 300d 	str.w	r3, [r2, #13]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16456:	2100      	movs	r1, #0
   16458:	f104 0010 	add.w	r0, r4, #16
   1645c:	f007 fdba 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16460:	7ea3      	ldrb	r3, [r4, #26]
   16462:	b90b      	cbnz	r3, 16468 <HciLeLtkReqReplCmd+0x50>
    hciCmdSend(pBuf);
  }
}
   16464:	b003      	add	sp, #12
   16466:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16468:	f10d 0107 	add.w	r1, sp, #7
   1646c:	f104 0010 	add.w	r0, r4, #16
   16470:	f007 fdb6 	bl	1dfe0 <WsfMsgDeq>
   16474:	4605      	mov	r5, r0
   16476:	2800      	cmp	r0, #0
   16478:	d0f4      	beq.n	16464 <HciLeLtkReqReplCmd+0x4c>
      hciCmdCb.numCmdPkts--;
   1647a:	7ea3      	ldrb	r3, [r4, #26]
   1647c:	3b01      	subs	r3, #1
   1647e:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16480:	7842      	ldrb	r2, [r0, #1]
   16482:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16484:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16486:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1648a:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1648c:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1648e:	f007 ffdd 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16492:	4628      	mov	r0, r5
   16494:	f002 fb26 	bl	18ae4 <hciTrSendCmd>
}
   16498:	e7e4      	b.n	16464 <HciLeLtkReqReplCmd+0x4c>
   1649a:	bf00      	nop
   1649c:	10004edc 	.word	0x10004edc

000164a0 <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   164a0:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   164a2:	2003      	movs	r0, #3
{
   164a4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   164a6:	f007 fd77 	bl	1df98 <WsfMsgAlloc>
   164aa:	b160      	cbz	r0, 164c6 <HciLeRandCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   164ac:	4c13      	ldr	r4, [pc, #76]	; (164fc <HciLeRandCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   164ae:	f242 0318 	movw	r3, #8216	; 0x2018
    UINT8_TO_BSTREAM(p, len);
   164b2:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   164b4:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   164b6:	4602      	mov	r2, r0
   164b8:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   164ba:	f104 0010 	add.w	r0, r4, #16
   164be:	f007 fd89 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   164c2:	7ea3      	ldrb	r3, [r4, #26]
   164c4:	b90b      	cbnz	r3, 164ca <HciLeRandCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   164c6:	b003      	add	sp, #12
   164c8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   164ca:	f10d 0107 	add.w	r1, sp, #7
   164ce:	f104 0010 	add.w	r0, r4, #16
   164d2:	f007 fd85 	bl	1dfe0 <WsfMsgDeq>
   164d6:	4605      	mov	r5, r0
   164d8:	2800      	cmp	r0, #0
   164da:	d0f4      	beq.n	164c6 <HciLeRandCmd+0x26>
      hciCmdCb.numCmdPkts--;
   164dc:	7ea3      	ldrb	r3, [r4, #26]
   164de:	3b01      	subs	r3, #1
   164e0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   164e2:	7842      	ldrb	r2, [r0, #1]
   164e4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   164e6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   164e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   164ec:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   164ee:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   164f0:	f007 ffac 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   164f4:	4628      	mov	r0, r5
   164f6:	f002 faf5 	bl	18ae4 <hciTrSendCmd>
}
   164fa:	e7e4      	b.n	164c6 <HciLeRandCmd+0x26>
   164fc:	10004edc 	.word	0x10004edc

00016500 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   16500:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16502:	2003      	movs	r0, #3
{
   16504:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16506:	f007 fd47 	bl	1df98 <WsfMsgAlloc>
   1650a:	b160      	cbz	r0, 16526 <HciLeReadBufSizeCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1650c:	4c13      	ldr	r4, [pc, #76]	; (1655c <HciLeReadBufSizeCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1650e:	f242 0302 	movw	r3, #8194	; 0x2002
    UINT8_TO_BSTREAM(p, len);
   16512:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   16514:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16516:	4602      	mov	r2, r0
   16518:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1651a:	f104 0010 	add.w	r0, r4, #16
   1651e:	f007 fd59 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16522:	7ea3      	ldrb	r3, [r4, #26]
   16524:	b90b      	cbnz	r3, 1652a <HciLeReadBufSizeCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   16526:	b003      	add	sp, #12
   16528:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1652a:	f10d 0107 	add.w	r1, sp, #7
   1652e:	f104 0010 	add.w	r0, r4, #16
   16532:	f007 fd55 	bl	1dfe0 <WsfMsgDeq>
   16536:	4605      	mov	r5, r0
   16538:	2800      	cmp	r0, #0
   1653a:	d0f4      	beq.n	16526 <HciLeReadBufSizeCmd+0x26>
      hciCmdCb.numCmdPkts--;
   1653c:	7ea3      	ldrb	r3, [r4, #26]
   1653e:	3b01      	subs	r3, #1
   16540:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16542:	7842      	ldrb	r2, [r0, #1]
   16544:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16546:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16548:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1654c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1654e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16550:	f007 ff7c 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16554:	4628      	mov	r0, r5
   16556:	f002 fac5 	bl	18ae4 <hciTrSendCmd>
}
   1655a:	e7e4      	b.n	16526 <HciLeReadBufSizeCmd+0x26>
   1655c:	10004edc 	.word	0x10004edc

00016560 <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   16560:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16562:	2003      	movs	r0, #3
{
   16564:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16566:	f007 fd17 	bl	1df98 <WsfMsgAlloc>
   1656a:	b160      	cbz	r0, 16586 <HciLeReadLocalSupFeatCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1656c:	4c13      	ldr	r4, [pc, #76]	; (165bc <HciLeReadLocalSupFeatCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1656e:	f242 0303 	movw	r3, #8195	; 0x2003
    UINT8_TO_BSTREAM(p, len);
   16572:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   16574:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16576:	4602      	mov	r2, r0
   16578:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1657a:	f104 0010 	add.w	r0, r4, #16
   1657e:	f007 fd29 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16582:	7ea3      	ldrb	r3, [r4, #26]
   16584:	b90b      	cbnz	r3, 1658a <HciLeReadLocalSupFeatCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   16586:	b003      	add	sp, #12
   16588:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1658a:	f10d 0107 	add.w	r1, sp, #7
   1658e:	f104 0010 	add.w	r0, r4, #16
   16592:	f007 fd25 	bl	1dfe0 <WsfMsgDeq>
   16596:	4605      	mov	r5, r0
   16598:	2800      	cmp	r0, #0
   1659a:	d0f4      	beq.n	16586 <HciLeReadLocalSupFeatCmd+0x26>
      hciCmdCb.numCmdPkts--;
   1659c:	7ea3      	ldrb	r3, [r4, #26]
   1659e:	3b01      	subs	r3, #1
   165a0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   165a2:	7842      	ldrb	r2, [r0, #1]
   165a4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   165a6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   165a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   165ac:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   165ae:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   165b0:	f007 ff4c 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   165b4:	4628      	mov	r0, r5
   165b6:	f002 fa95 	bl	18ae4 <hciTrSendCmd>
}
   165ba:	e7e4      	b.n	16586 <HciLeReadLocalSupFeatCmd+0x26>
   165bc:	10004edc 	.word	0x10004edc

000165c0 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   165c0:	b530      	push	{r4, r5, lr}
   165c2:	4604      	mov	r4, r0
   165c4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   165c6:	2005      	movs	r0, #5
   165c8:	f007 fce6 	bl	1df98 <WsfMsgAlloc>
   165cc:	b188      	cbz	r0, 165f2 <HciLeReadRemoteFeatCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   165ce:	4d16      	ldr	r5, [pc, #88]	; (16628 <HciLeReadRemoteFeatCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   165d0:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   165d2:	2116      	movs	r1, #22
   165d4:	2320      	movs	r3, #32
   165d6:	7001      	strb	r1, [r0, #0]
   165d8:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   165da:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
   165dc:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
   165de:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   165e0:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   165e2:	4602      	mov	r2, r0
   165e4:	2100      	movs	r1, #0
   165e6:	f105 0010 	add.w	r0, r5, #16
   165ea:	f007 fcf3 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   165ee:	7eab      	ldrb	r3, [r5, #26]
   165f0:	b90b      	cbnz	r3, 165f6 <HciLeReadRemoteFeatCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   165f2:	b003      	add	sp, #12
   165f4:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   165f6:	f10d 0107 	add.w	r1, sp, #7
   165fa:	f105 0010 	add.w	r0, r5, #16
   165fe:	f007 fcef 	bl	1dfe0 <WsfMsgDeq>
   16602:	4604      	mov	r4, r0
   16604:	2800      	cmp	r0, #0
   16606:	d0f4      	beq.n	165f2 <HciLeReadRemoteFeatCmd+0x32>
      hciCmdCb.numCmdPkts--;
   16608:	7eab      	ldrb	r3, [r5, #26]
   1660a:	3b01      	subs	r3, #1
   1660c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1660e:	7842      	ldrb	r2, [r0, #1]
   16610:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16612:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16614:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16618:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1661a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1661c:	f007 ff16 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16620:	4620      	mov	r0, r4
   16622:	f002 fa5f 	bl	18ae4 <hciTrSendCmd>
}
   16626:	e7e4      	b.n	165f2 <HciLeReadRemoteFeatCmd+0x32>
   16628:	10004edc 	.word	0x10004edc

0001662c <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   1662c:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1662e:	2003      	movs	r0, #3
{
   16630:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16632:	f007 fcb1 	bl	1df98 <WsfMsgAlloc>
   16636:	b160      	cbz	r0, 16652 <HciLeReadSupStatesCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16638:	4c13      	ldr	r4, [pc, #76]	; (16688 <HciLeReadSupStatesCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1663a:	f242 031c 	movw	r3, #8220	; 0x201c
    UINT8_TO_BSTREAM(p, len);
   1663e:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   16640:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16642:	4602      	mov	r2, r0
   16644:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16646:	f104 0010 	add.w	r0, r4, #16
   1664a:	f007 fcc3 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1664e:	7ea3      	ldrb	r3, [r4, #26]
   16650:	b90b      	cbnz	r3, 16656 <HciLeReadSupStatesCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   16652:	b003      	add	sp, #12
   16654:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16656:	f10d 0107 	add.w	r1, sp, #7
   1665a:	f104 0010 	add.w	r0, r4, #16
   1665e:	f007 fcbf 	bl	1dfe0 <WsfMsgDeq>
   16662:	4605      	mov	r5, r0
   16664:	2800      	cmp	r0, #0
   16666:	d0f4      	beq.n	16652 <HciLeReadSupStatesCmd+0x26>
      hciCmdCb.numCmdPkts--;
   16668:	7ea3      	ldrb	r3, [r4, #26]
   1666a:	3b01      	subs	r3, #1
   1666c:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1666e:	7842      	ldrb	r2, [r0, #1]
   16670:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16672:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16674:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16678:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1667a:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1667c:	f007 fee6 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16680:	4628      	mov	r0, r5
   16682:	f002 fa2f 	bl	18ae4 <hciTrSendCmd>
}
   16686:	e7e4      	b.n	16652 <HciLeReadSupStatesCmd+0x26>
   16688:	10004edc 	.word	0x10004edc

0001668c <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   1668c:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1668e:	2003      	movs	r0, #3
{
   16690:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16692:	f007 fc81 	bl	1df98 <WsfMsgAlloc>
   16696:	b160      	cbz	r0, 166b2 <HciLeReadWhiteListSizeCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16698:	4c13      	ldr	r4, [pc, #76]	; (166e8 <HciLeReadWhiteListSizeCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1669a:	f242 030f 	movw	r3, #8207	; 0x200f
    UINT8_TO_BSTREAM(p, len);
   1669e:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   166a0:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   166a2:	4602      	mov	r2, r0
   166a4:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   166a6:	f104 0010 	add.w	r0, r4, #16
   166aa:	f007 fc93 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   166ae:	7ea3      	ldrb	r3, [r4, #26]
   166b0:	b90b      	cbnz	r3, 166b6 <HciLeReadWhiteListSizeCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   166b2:	b003      	add	sp, #12
   166b4:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   166b6:	f10d 0107 	add.w	r1, sp, #7
   166ba:	f104 0010 	add.w	r0, r4, #16
   166be:	f007 fc8f 	bl	1dfe0 <WsfMsgDeq>
   166c2:	4605      	mov	r5, r0
   166c4:	2800      	cmp	r0, #0
   166c6:	d0f4      	beq.n	166b2 <HciLeReadWhiteListSizeCmd+0x26>
      hciCmdCb.numCmdPkts--;
   166c8:	7ea3      	ldrb	r3, [r4, #26]
   166ca:	3b01      	subs	r3, #1
   166cc:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   166ce:	7842      	ldrb	r2, [r0, #1]
   166d0:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   166d2:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   166d4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   166d8:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   166da:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   166dc:	f007 feb6 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   166e0:	4628      	mov	r0, r5
   166e2:	f002 f9ff 	bl	18ae4 <hciTrSendCmd>
}
   166e6:	e7e4      	b.n	166b2 <HciLeReadWhiteListSizeCmd+0x26>
   166e8:	10004edc 	.word	0x10004edc

000166ec <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   166ec:	b570      	push	{r4, r5, r6, lr}
   166ee:	4604      	mov	r4, r0
   166f0:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   166f2:	2004      	movs	r0, #4
   166f4:	f007 fc50 	bl	1df98 <WsfMsgAlloc>
   166f8:	b178      	cbz	r0, 1671a <HciLeSetAdvEnableCmd+0x2e>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   166fa:	4d15      	ldr	r5, [pc, #84]	; (16750 <HciLeSetAdvEnableCmd+0x64>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
   166fc:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   166fe:	2320      	movs	r3, #32
   16700:	7043      	strb	r3, [r0, #1]
   16702:	260a      	movs	r6, #10
    UINT8_TO_BSTREAM(p, len);
   16704:	2301      	movs	r3, #1
   16706:	7083      	strb	r3, [r0, #2]
   16708:	4602      	mov	r2, r0
    UINT16_TO_BSTREAM(p, opcode);
   1670a:	7006      	strb	r6, [r0, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1670c:	2100      	movs	r1, #0
   1670e:	f105 0010 	add.w	r0, r5, #16
   16712:	f007 fc5f 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16716:	7eab      	ldrb	r3, [r5, #26]
   16718:	b90b      	cbnz	r3, 1671e <HciLeSetAdvEnableCmd+0x32>
    hciCmdSend(pBuf);
  }
}
   1671a:	b002      	add	sp, #8
   1671c:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1671e:	f10d 0107 	add.w	r1, sp, #7
   16722:	f105 0010 	add.w	r0, r5, #16
   16726:	f007 fc5b 	bl	1dfe0 <WsfMsgDeq>
   1672a:	4604      	mov	r4, r0
   1672c:	2800      	cmp	r0, #0
   1672e:	d0f4      	beq.n	1671a <HciLeSetAdvEnableCmd+0x2e>
      hciCmdCb.numCmdPkts--;
   16730:	7eab      	ldrb	r3, [r5, #26]
   16732:	3b01      	subs	r3, #1
   16734:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16736:	7842      	ldrb	r2, [r0, #1]
   16738:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1673a:	4631      	mov	r1, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1673c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16740:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16742:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16744:	f007 fe82 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16748:	4620      	mov	r0, r4
   1674a:	f002 f9cb 	bl	18ae4 <hciTrSendCmd>
}
   1674e:	e7e4      	b.n	1671a <HciLeSetAdvEnableCmd+0x2e>
   16750:	10004edc 	.word	0x10004edc

00016754 <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   16754:	b570      	push	{r4, r5, r6, lr}
   16756:	4605      	mov	r5, r0
   16758:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1675a:	2023      	movs	r0, #35	; 0x23
{
   1675c:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1675e:	f007 fc1b 	bl	1df98 <WsfMsgAlloc>
   16762:	b1d8      	cbz	r0, 1679c <HciLeSetAdvDataCmd+0x48>
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, len);
   16764:	1d03      	adds	r3, r0, #4
    UINT16_TO_BSTREAM(p, opcode);
   16766:	2220      	movs	r2, #32
   16768:	2108      	movs	r1, #8
   1676a:	7001      	strb	r1, [r0, #0]
   1676c:	7042      	strb	r2, [r0, #1]
    memcpy(p, pData, len);
   1676e:	4631      	mov	r1, r6
    UINT8_TO_BSTREAM(p, len);
   16770:	7082      	strb	r2, [r0, #2]
    UINT8_TO_BSTREAM(p, len);
   16772:	4604      	mov	r4, r0
    memcpy(p, pData, len);
   16774:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
   16776:	70c5      	strb	r5, [r0, #3]
    memcpy(p, pData, len);
   16778:	4618      	mov	r0, r3
   1677a:	f7f5 fcc1 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1677e:	4e15      	ldr	r6, [pc, #84]	; (167d4 <HciLeSetAdvDataCmd+0x80>)
    p += len;
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   16780:	f1c5 021f 	rsb	r2, r5, #31
   16784:	2100      	movs	r1, #0
   16786:	4428      	add	r0, r5
   16788:	f00c fdd8 	bl	2333c <memset>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1678c:	4622      	mov	r2, r4
   1678e:	2100      	movs	r1, #0
   16790:	f106 0010 	add.w	r0, r6, #16
   16794:	f007 fc1e 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16798:	7eb3      	ldrb	r3, [r6, #26]
   1679a:	b90b      	cbnz	r3, 167a0 <HciLeSetAdvDataCmd+0x4c>
    hciCmdSend(pBuf);
  }
}
   1679c:	b002      	add	sp, #8
   1679e:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   167a0:	f10d 0107 	add.w	r1, sp, #7
   167a4:	f106 0010 	add.w	r0, r6, #16
   167a8:	f007 fc1a 	bl	1dfe0 <WsfMsgDeq>
   167ac:	4604      	mov	r4, r0
   167ae:	2800      	cmp	r0, #0
   167b0:	d0f4      	beq.n	1679c <HciLeSetAdvDataCmd+0x48>
      hciCmdCb.numCmdPkts--;
   167b2:	7eb3      	ldrb	r3, [r6, #26]
   167b4:	3b01      	subs	r3, #1
   167b6:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   167b8:	7842      	ldrb	r2, [r0, #1]
   167ba:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   167bc:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   167be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   167c2:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   167c4:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   167c6:	f007 fe41 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   167ca:	4620      	mov	r0, r4
   167cc:	f002 f98a 	bl	18ae4 <hciTrSendCmd>
}
   167d0:	e7e4      	b.n	1679c <HciLeSetAdvDataCmd+0x48>
   167d2:	bf00      	nop
   167d4:	10004edc 	.word	0x10004edc

000167d8 <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   167d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167dc:	b083      	sub	sp, #12
   167de:	4680      	mov	r8, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   167e0:	2012      	movs	r0, #18
{
   167e2:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
   167e6:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   167ea:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
   167ee:	460d      	mov	r5, r1
   167f0:	4617      	mov	r7, r2
   167f2:	461e      	mov	r6, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   167f4:	f007 fbd0 	bl	1df98 <WsfMsgAlloc>
   167f8:	2800      	cmp	r0, #0
   167fa:	d03f      	beq.n	1687c <HciLeSetAdvParamCmd+0xa4>
    UINT16_TO_BSTREAM(p, opcode);
   167fc:	4604      	mov	r4, r0
   167fe:	2306      	movs	r3, #6
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, advIntervalMin);
    UINT16_TO_BSTREAM(p, advIntervalMax);
    UINT8_TO_BSTREAM(p, advType);
   16800:	71c7      	strb	r7, [r0, #7]
    UINT8_TO_BSTREAM(p, ownAddrType);
   16802:	7206      	strb	r6, [r0, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   16804:	f880 b009 	strb.w	fp, [r0, #9]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   16808:	f880 8003 	strb.w	r8, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   1680c:	7023      	strb	r3, [r4, #0]
   1680e:	2320      	movs	r3, #32
   16810:	7063      	strb	r3, [r4, #1]
    UINT8_TO_BSTREAM(p, len);
   16812:	230f      	movs	r3, #15
   16814:	70a3      	strb	r3, [r4, #2]
    if (pPeerAddr != NULL)
   16816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    UINT16_TO_BSTREAM(p, advIntervalMax);
   16818:	7165      	strb	r5, [r4, #5]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   1681a:	ea4f 2018 	mov.w	r0, r8, lsr #8
    UINT16_TO_BSTREAM(p, advIntervalMax);
   1681e:	0a2d      	lsrs	r5, r5, #8
    UINT16_TO_BSTREAM(p, advIntervalMin);
   16820:	7120      	strb	r0, [r4, #4]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   16822:	71a5      	strb	r5, [r4, #6]
    UINT8_TO_BSTREAM(p, peerAddrType);
   16824:	f104 000a 	add.w	r0, r4, #10
    if (pPeerAddr != NULL)
   16828:	b35b      	cbz	r3, 16882 <HciLeSetAdvParamCmd+0xaa>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   1682a:	4619      	mov	r1, r3
   1682c:	f7ff f846 	bl	158bc <BdaCpy>
   16830:	f104 0010 	add.w	r0, r4, #16
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16834:	4d14      	ldr	r5, [pc, #80]	; (16888 <HciLeSetAdvParamCmd+0xb0>)
    }
    else
    {
      p = BdaClr(p);
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   16836:	f880 a000 	strb.w	sl, [r0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   1683a:	f880 9001 	strb.w	r9, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1683e:	4622      	mov	r2, r4
   16840:	2100      	movs	r1, #0
   16842:	f105 0010 	add.w	r0, r5, #16
   16846:	f007 fbc5 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1684a:	7eab      	ldrb	r3, [r5, #26]
   1684c:	b1b3      	cbz	r3, 1687c <HciLeSetAdvParamCmd+0xa4>
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1684e:	f10d 0107 	add.w	r1, sp, #7
   16852:	f105 0010 	add.w	r0, r5, #16
   16856:	f007 fbc3 	bl	1dfe0 <WsfMsgDeq>
   1685a:	4604      	mov	r4, r0
   1685c:	b170      	cbz	r0, 1687c <HciLeSetAdvParamCmd+0xa4>
      hciCmdCb.numCmdPkts--;
   1685e:	7eab      	ldrb	r3, [r5, #26]
   16860:	3b01      	subs	r3, #1
   16862:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16864:	7842      	ldrb	r2, [r0, #1]
   16866:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16868:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1686a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1686e:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16870:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16872:	f007 fdeb 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16876:	4620      	mov	r0, r4
   16878:	f002 f934 	bl	18ae4 <hciTrSendCmd>
    hciCmdSend(pBuf);
  }
}
   1687c:	b003      	add	sp, #12
   1687e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = BdaClr(p);
   16882:	f7ff f829 	bl	158d8 <BdaClr>
   16886:	e7d5      	b.n	16834 <HciLeSetAdvParamCmd+0x5c>
   16888:	10004edc 	.word	0x10004edc

0001688c <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   1688c:	b530      	push	{r4, r5, lr}
   1688e:	4604      	mov	r4, r0
   16890:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16892:	200b      	movs	r0, #11
   16894:	f007 fb80 	bl	1df98 <WsfMsgAlloc>
   16898:	b198      	cbz	r0, 168c2 <HciLeSetEventMaskCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   1689a:	f242 0101 	movw	r1, #8193	; 0x2001
    UINT8_TO_BSTREAM(p, len);
   1689e:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
   168a0:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   168a2:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   168a4:	4d14      	ldr	r5, [pc, #80]	; (168f8 <HciLeSetEventMaskCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   168a6:	6823      	ldr	r3, [r4, #0]
   168a8:	6861      	ldr	r1, [r4, #4]
   168aa:	f8c0 1007 	str.w	r1, [r0, #7]
   168ae:	f8c0 3003 	str.w	r3, [r0, #3]
   168b2:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   168b4:	2100      	movs	r1, #0
   168b6:	f105 0010 	add.w	r0, r5, #16
   168ba:	f007 fb8b 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   168be:	7eab      	ldrb	r3, [r5, #26]
   168c0:	b90b      	cbnz	r3, 168c6 <HciLeSetEventMaskCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   168c2:	b003      	add	sp, #12
   168c4:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   168c6:	f10d 0107 	add.w	r1, sp, #7
   168ca:	f105 0010 	add.w	r0, r5, #16
   168ce:	f007 fb87 	bl	1dfe0 <WsfMsgDeq>
   168d2:	4604      	mov	r4, r0
   168d4:	2800      	cmp	r0, #0
   168d6:	d0f4      	beq.n	168c2 <HciLeSetEventMaskCmd+0x36>
      hciCmdCb.numCmdPkts--;
   168d8:	7eab      	ldrb	r3, [r5, #26]
   168da:	3b01      	subs	r3, #1
   168dc:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   168de:	7842      	ldrb	r2, [r0, #1]
   168e0:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   168e2:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   168e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   168e8:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   168ea:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   168ec:	f007 fdae 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   168f0:	4620      	mov	r0, r4
   168f2:	f002 f8f7 	bl	18ae4 <hciTrSendCmd>
}
   168f6:	e7e4      	b.n	168c2 <HciLeSetEventMaskCmd+0x36>
   168f8:	10004edc 	.word	0x10004edc

000168fc <HciLeSetScanEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanEnableCmd(uint8_t enable, uint8_t filterDup)
{
   168fc:	b570      	push	{r4, r5, r6, lr}
   168fe:	4606      	mov	r6, r0
   16900:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16902:	2005      	movs	r0, #5
{
   16904:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16906:	f007 fb47 	bl	1df98 <WsfMsgAlloc>
   1690a:	b180      	cbz	r0, 1692e <HciLeSetScanEnableCmd+0x32>
    UINT16_TO_BSTREAM(p, opcode);
   1690c:	230c      	movs	r3, #12
   1690e:	7003      	strb	r3, [r0, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16910:	4d14      	ldr	r5, [pc, #80]	; (16964 <HciLeSetScanEnableCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_ENABLE, HCI_LEN_LE_SET_SCAN_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
   16912:	70c6      	strb	r6, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   16914:	2320      	movs	r3, #32
   16916:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   16918:	2302      	movs	r3, #2
   1691a:	7083      	strb	r3, [r0, #2]
    UINT8_TO_BSTREAM(p, filterDup);
   1691c:	4602      	mov	r2, r0
   1691e:	7104      	strb	r4, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16920:	2100      	movs	r1, #0
   16922:	f105 0010 	add.w	r0, r5, #16
   16926:	f007 fb55 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1692a:	7eab      	ldrb	r3, [r5, #26]
   1692c:	b90b      	cbnz	r3, 16932 <HciLeSetScanEnableCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   1692e:	b002      	add	sp, #8
   16930:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16932:	f10d 0107 	add.w	r1, sp, #7
   16936:	f105 0010 	add.w	r0, r5, #16
   1693a:	f007 fb51 	bl	1dfe0 <WsfMsgDeq>
   1693e:	4604      	mov	r4, r0
   16940:	2800      	cmp	r0, #0
   16942:	d0f4      	beq.n	1692e <HciLeSetScanEnableCmd+0x32>
      hciCmdCb.numCmdPkts--;
   16944:	7eab      	ldrb	r3, [r5, #26]
   16946:	3b01      	subs	r3, #1
   16948:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1694a:	7842      	ldrb	r2, [r0, #1]
   1694c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1694e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16950:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16954:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16956:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16958:	f007 fd78 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   1695c:	4620      	mov	r0, r4
   1695e:	f002 f8c1 	bl	18ae4 <hciTrSendCmd>
}
   16962:	e7e4      	b.n	1692e <HciLeSetScanEnableCmd+0x32>
   16964:	10004edc 	.word	0x10004edc

00016968 <HciLeSetScanParamCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanParamCmd(uint8_t scanType, uint16_t scanInterval, uint16_t scanWindow,
                          uint8_t ownAddrType, uint8_t scanFiltPolicy)
{
   16968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1696c:	b082      	sub	sp, #8
   1696e:	4607      	mov	r7, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16970:	200a      	movs	r0, #10
{
   16972:	f89d 6020 	ldrb.w	r6, [sp, #32]
   16976:	460c      	mov	r4, r1
   16978:	4615      	mov	r5, r2
   1697a:	4698      	mov	r8, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1697c:	f007 fb0c 	bl	1df98 <WsfMsgAlloc>
   16980:	b1c0      	cbz	r0, 169b4 <HciLeSetScanParamCmd+0x4c>
    UINT16_TO_BSTREAM(p, opcode);
   16982:	4602      	mov	r2, r0
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_PARAM, HCI_LEN_LE_SET_SCAN_PARAM)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, scanType);
    UINT16_TO_BSTREAM(p, scanInterval);
    UINT16_TO_BSTREAM(p, scanWindow);
   16984:	0a2b      	lsrs	r3, r5, #8
    UINT16_TO_BSTREAM(p, scanInterval);
   16986:	7104      	strb	r4, [r0, #4]
    UINT16_TO_BSTREAM(p, scanWindow);
   16988:	71c3      	strb	r3, [r0, #7]
    UINT16_TO_BSTREAM(p, scanInterval);
   1698a:	0a24      	lsrs	r4, r4, #8
    UINT16_TO_BSTREAM(p, opcode);
   1698c:	230b      	movs	r3, #11
    UINT8_TO_BSTREAM(p, scanType);
   1698e:	70c7      	strb	r7, [r0, #3]
    UINT8_TO_BSTREAM(p, ownAddrType);
   16990:	f880 8008 	strb.w	r8, [r0, #8]
    UINT16_TO_BSTREAM(p, scanInterval);
   16994:	7144      	strb	r4, [r0, #5]
    UINT16_TO_BSTREAM(p, scanWindow);
   16996:	7185      	strb	r5, [r0, #6]
    UINT8_TO_BSTREAM(p, scanFiltPolicy);
   16998:	7246      	strb	r6, [r0, #9]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1699a:	4f14      	ldr	r7, [pc, #80]	; (169ec <HciLeSetScanParamCmd+0x84>)
    UINT16_TO_BSTREAM(p, opcode);
   1699c:	7013      	strb	r3, [r2, #0]
   1699e:	2320      	movs	r3, #32
   169a0:	7053      	strb	r3, [r2, #1]
    UINT8_TO_BSTREAM(p, len);
   169a2:	2307      	movs	r3, #7
   169a4:	7093      	strb	r3, [r2, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   169a6:	2100      	movs	r1, #0
   169a8:	f107 0010 	add.w	r0, r7, #16
   169ac:	f007 fb12 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   169b0:	7ebb      	ldrb	r3, [r7, #26]
   169b2:	b913      	cbnz	r3, 169ba <HciLeSetScanParamCmd+0x52>
    hciCmdSend(pBuf);
  }
}
   169b4:	b002      	add	sp, #8
   169b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   169ba:	f10d 0107 	add.w	r1, sp, #7
   169be:	f107 0010 	add.w	r0, r7, #16
   169c2:	f007 fb0d 	bl	1dfe0 <WsfMsgDeq>
   169c6:	4604      	mov	r4, r0
   169c8:	2800      	cmp	r0, #0
   169ca:	d0f3      	beq.n	169b4 <HciLeSetScanParamCmd+0x4c>
      hciCmdCb.numCmdPkts--;
   169cc:	7ebb      	ldrb	r3, [r7, #26]
   169ce:	3b01      	subs	r3, #1
   169d0:	76bb      	strb	r3, [r7, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   169d2:	7842      	ldrb	r2, [r0, #1]
   169d4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   169d6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   169d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   169dc:	4638      	mov	r0, r7
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   169de:	833b      	strh	r3, [r7, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   169e0:	f007 fd34 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   169e4:	4620      	mov	r0, r4
   169e6:	f002 f87d 	bl	18ae4 <hciTrSendCmd>
}
   169ea:	e7e3      	b.n	169b4 <HciLeSetScanParamCmd+0x4c>
   169ec:	10004edc 	.word	0x10004edc

000169f0 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   169f0:	b570      	push	{r4, r5, r6, lr}
   169f2:	4605      	mov	r5, r0
   169f4:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   169f6:	2023      	movs	r0, #35	; 0x23
{
   169f8:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   169fa:	f007 facd 	bl	1df98 <WsfMsgAlloc>
   169fe:	b1d8      	cbz	r0, 16a38 <HciLeSetScanRespDataCmd+0x48>
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, len);
   16a00:	1d03      	adds	r3, r0, #4
    UINT16_TO_BSTREAM(p, opcode);
   16a02:	2220      	movs	r2, #32
   16a04:	2109      	movs	r1, #9
   16a06:	7001      	strb	r1, [r0, #0]
   16a08:	7042      	strb	r2, [r0, #1]
    memcpy(p, pData, len);
   16a0a:	4631      	mov	r1, r6
    UINT8_TO_BSTREAM(p, len);
   16a0c:	7082      	strb	r2, [r0, #2]
    UINT8_TO_BSTREAM(p, len);
   16a0e:	4604      	mov	r4, r0
    memcpy(p, pData, len);
   16a10:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
   16a12:	70c5      	strb	r5, [r0, #3]
    memcpy(p, pData, len);
   16a14:	4618      	mov	r0, r3
   16a16:	f7f5 fb73 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16a1a:	4e15      	ldr	r6, [pc, #84]	; (16a70 <HciLeSetScanRespDataCmd+0x80>)
    p += len;
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   16a1c:	f1c5 021f 	rsb	r2, r5, #31
   16a20:	2100      	movs	r1, #0
   16a22:	4428      	add	r0, r5
   16a24:	f00c fc8a 	bl	2333c <memset>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16a28:	4622      	mov	r2, r4
   16a2a:	2100      	movs	r1, #0
   16a2c:	f106 0010 	add.w	r0, r6, #16
   16a30:	f007 fad0 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16a34:	7eb3      	ldrb	r3, [r6, #26]
   16a36:	b90b      	cbnz	r3, 16a3c <HciLeSetScanRespDataCmd+0x4c>
    hciCmdSend(pBuf);
  }
}
   16a38:	b002      	add	sp, #8
   16a3a:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16a3c:	f10d 0107 	add.w	r1, sp, #7
   16a40:	f106 0010 	add.w	r0, r6, #16
   16a44:	f007 facc 	bl	1dfe0 <WsfMsgDeq>
   16a48:	4604      	mov	r4, r0
   16a4a:	2800      	cmp	r0, #0
   16a4c:	d0f4      	beq.n	16a38 <HciLeSetScanRespDataCmd+0x48>
      hciCmdCb.numCmdPkts--;
   16a4e:	7eb3      	ldrb	r3, [r6, #26]
   16a50:	3b01      	subs	r3, #1
   16a52:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16a54:	7842      	ldrb	r2, [r0, #1]
   16a56:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16a58:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16a5a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16a5e:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16a60:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16a62:	f007 fcf3 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16a66:	4620      	mov	r0, r4
   16a68:	f002 f83c 	bl	18ae4 <hciTrSendCmd>
}
   16a6c:	e7e4      	b.n	16a38 <HciLeSetScanRespDataCmd+0x48>
   16a6e:	bf00      	nop
   16a70:	10004edc 	.word	0x10004edc

00016a74 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   16a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a76:	4604      	mov	r4, r0
   16a78:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16a7a:	201f      	movs	r0, #31
{
   16a7c:	460d      	mov	r5, r1
   16a7e:	4617      	mov	r7, r2
   16a80:	461e      	mov	r6, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16a82:	f007 fa89 	bl	1df98 <WsfMsgAlloc>
   16a86:	b330      	cbz	r0, 16ad6 <HciLeStartEncryptionCmd+0x62>
    UINT16_TO_BSTREAM(p, opcode);
   16a88:	2319      	movs	r3, #25
   16a8a:	7003      	strb	r3, [r0, #0]
   16a8c:	2320      	movs	r3, #32
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   16a8e:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   16a90:	7043      	strb	r3, [r0, #1]
    UINT16_TO_BSTREAM(p, handle);
   16a92:	0a24      	lsrs	r4, r4, #8
    UINT8_TO_BSTREAM(p, len);
   16a94:	231c      	movs	r3, #28
    UINT16_TO_BSTREAM(p, handle);
   16a96:	7104      	strb	r4, [r0, #4]
    UINT8_TO_BSTREAM(p, len);
   16a98:	7083      	strb	r3, [r0, #2]
    memcpy(p, pRand, HCI_RAND_LEN);
   16a9a:	682b      	ldr	r3, [r5, #0]
   16a9c:	686a      	ldr	r2, [r5, #4]
   16a9e:	f8c0 3005 	str.w	r3, [r0, #5]
    p += HCI_RAND_LEN;
    UINT16_TO_BSTREAM(p, diversifier);
   16aa2:	0a3b      	lsrs	r3, r7, #8
    memcpy(p, pRand, HCI_RAND_LEN);
   16aa4:	f8c0 2009 	str.w	r2, [r0, #9]
    UINT16_TO_BSTREAM(p, diversifier);
   16aa8:	7347      	strb	r7, [r0, #13]
   16aaa:	7383      	strb	r3, [r0, #14]
    memcpy(p, pKey, HCI_KEY_LEN);
   16aac:	68f4      	ldr	r4, [r6, #12]
   16aae:	6831      	ldr	r1, [r6, #0]
   16ab0:	6872      	ldr	r2, [r6, #4]
   16ab2:	68b3      	ldr	r3, [r6, #8]
   16ab4:	f8c0 401b 	str.w	r4, [r0, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16ab8:	4c14      	ldr	r4, [pc, #80]	; (16b0c <HciLeStartEncryptionCmd+0x98>)
    memcpy(p, pKey, HCI_KEY_LEN);
   16aba:	f8c0 100f 	str.w	r1, [r0, #15]
   16abe:	f8c0 2013 	str.w	r2, [r0, #19]
   16ac2:	f8c0 3017 	str.w	r3, [r0, #23]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16ac6:	4602      	mov	r2, r0
   16ac8:	2100      	movs	r1, #0
   16aca:	f104 0010 	add.w	r0, r4, #16
   16ace:	f007 fa81 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16ad2:	7ea3      	ldrb	r3, [r4, #26]
   16ad4:	b90b      	cbnz	r3, 16ada <HciLeStartEncryptionCmd+0x66>
    hciCmdSend(pBuf);
  }
}
   16ad6:	b003      	add	sp, #12
   16ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16ada:	f10d 0107 	add.w	r1, sp, #7
   16ade:	f104 0010 	add.w	r0, r4, #16
   16ae2:	f007 fa7d 	bl	1dfe0 <WsfMsgDeq>
   16ae6:	4605      	mov	r5, r0
   16ae8:	2800      	cmp	r0, #0
   16aea:	d0f4      	beq.n	16ad6 <HciLeStartEncryptionCmd+0x62>
      hciCmdCb.numCmdPkts--;
   16aec:	7ea3      	ldrb	r3, [r4, #26]
   16aee:	3b01      	subs	r3, #1
   16af0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16af2:	7842      	ldrb	r2, [r0, #1]
   16af4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16af6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16af8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16afc:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16afe:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16b00:	f007 fca4 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16b04:	4628      	mov	r0, r5
   16b06:	f001 ffed 	bl	18ae4 <hciTrSendCmd>
}
   16b0a:	e7e4      	b.n	16ad6 <HciLeStartEncryptionCmd+0x62>
   16b0c:	10004edc 	.word	0x10004edc

00016b10 <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   16b10:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16b12:	2003      	movs	r0, #3
{
   16b14:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16b16:	f007 fa3f 	bl	1df98 <WsfMsgAlloc>
   16b1a:	b160      	cbz	r0, 16b36 <HciReadBdAddrCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16b1c:	4c13      	ldr	r4, [pc, #76]	; (16b6c <HciReadBdAddrCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   16b1e:	f241 0309 	movw	r3, #4105	; 0x1009
    UINT8_TO_BSTREAM(p, len);
   16b22:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   16b24:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16b26:	4602      	mov	r2, r0
   16b28:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16b2a:	f104 0010 	add.w	r0, r4, #16
   16b2e:	f007 fa51 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16b32:	7ea3      	ldrb	r3, [r4, #26]
   16b34:	b90b      	cbnz	r3, 16b3a <HciReadBdAddrCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   16b36:	b003      	add	sp, #12
   16b38:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16b3a:	f10d 0107 	add.w	r1, sp, #7
   16b3e:	f104 0010 	add.w	r0, r4, #16
   16b42:	f007 fa4d 	bl	1dfe0 <WsfMsgDeq>
   16b46:	4605      	mov	r5, r0
   16b48:	2800      	cmp	r0, #0
   16b4a:	d0f4      	beq.n	16b36 <HciReadBdAddrCmd+0x26>
      hciCmdCb.numCmdPkts--;
   16b4c:	7ea3      	ldrb	r3, [r4, #26]
   16b4e:	3b01      	subs	r3, #1
   16b50:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16b52:	7842      	ldrb	r2, [r0, #1]
   16b54:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16b56:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16b58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16b5c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16b5e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16b60:	f007 fc74 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16b64:	4628      	mov	r0, r5
   16b66:	f001 ffbd 	bl	18ae4 <hciTrSendCmd>
}
   16b6a:	e7e4      	b.n	16b36 <HciReadBdAddrCmd+0x26>
   16b6c:	10004edc 	.word	0x10004edc

00016b70 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   16b70:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16b72:	2003      	movs	r0, #3
{
   16b74:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16b76:	f007 fa0f 	bl	1df98 <WsfMsgAlloc>
   16b7a:	b160      	cbz	r0, 16b96 <HciReadLocalVerInfoCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16b7c:	4c13      	ldr	r4, [pc, #76]	; (16bcc <HciReadLocalVerInfoCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   16b7e:	f241 0301 	movw	r3, #4097	; 0x1001
    UINT8_TO_BSTREAM(p, len);
   16b82:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   16b84:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16b86:	4602      	mov	r2, r0
   16b88:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16b8a:	f104 0010 	add.w	r0, r4, #16
   16b8e:	f007 fa21 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16b92:	7ea3      	ldrb	r3, [r4, #26]
   16b94:	b90b      	cbnz	r3, 16b9a <HciReadLocalVerInfoCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   16b96:	b003      	add	sp, #12
   16b98:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16b9a:	f10d 0107 	add.w	r1, sp, #7
   16b9e:	f104 0010 	add.w	r0, r4, #16
   16ba2:	f007 fa1d 	bl	1dfe0 <WsfMsgDeq>
   16ba6:	4605      	mov	r5, r0
   16ba8:	2800      	cmp	r0, #0
   16baa:	d0f4      	beq.n	16b96 <HciReadLocalVerInfoCmd+0x26>
      hciCmdCb.numCmdPkts--;
   16bac:	7ea3      	ldrb	r3, [r4, #26]
   16bae:	3b01      	subs	r3, #1
   16bb0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16bb2:	7842      	ldrb	r2, [r0, #1]
   16bb4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16bb6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16bb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16bbc:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16bbe:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16bc0:	f007 fc44 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16bc4:	4628      	mov	r0, r5
   16bc6:	f001 ff8d 	bl	18ae4 <hciTrSendCmd>
}
   16bca:	e7e4      	b.n	16b96 <HciReadLocalVerInfoCmd+0x26>
   16bcc:	10004edc 	.word	0x10004edc

00016bd0 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   16bd0:	b530      	push	{r4, r5, lr}
   16bd2:	4604      	mov	r4, r0
   16bd4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16bd6:	2005      	movs	r0, #5
   16bd8:	f007 f9de 	bl	1df98 <WsfMsgAlloc>
   16bdc:	b188      	cbz	r0, 16c02 <HciReadRssiCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16bde:	4d16      	ldr	r5, [pc, #88]	; (16c38 <HciReadRssiCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   16be0:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   16be2:	2105      	movs	r1, #5
   16be4:	2314      	movs	r3, #20
   16be6:	7001      	strb	r1, [r0, #0]
   16be8:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   16bea:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
   16bec:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
   16bee:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   16bf0:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16bf2:	4602      	mov	r2, r0
   16bf4:	2100      	movs	r1, #0
   16bf6:	f105 0010 	add.w	r0, r5, #16
   16bfa:	f007 f9eb 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16bfe:	7eab      	ldrb	r3, [r5, #26]
   16c00:	b90b      	cbnz	r3, 16c06 <HciReadRssiCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   16c02:	b003      	add	sp, #12
   16c04:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16c06:	f10d 0107 	add.w	r1, sp, #7
   16c0a:	f105 0010 	add.w	r0, r5, #16
   16c0e:	f007 f9e7 	bl	1dfe0 <WsfMsgDeq>
   16c12:	4604      	mov	r4, r0
   16c14:	2800      	cmp	r0, #0
   16c16:	d0f4      	beq.n	16c02 <HciReadRssiCmd+0x32>
      hciCmdCb.numCmdPkts--;
   16c18:	7eab      	ldrb	r3, [r5, #26]
   16c1a:	3b01      	subs	r3, #1
   16c1c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16c1e:	7842      	ldrb	r2, [r0, #1]
   16c20:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16c22:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16c24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16c28:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16c2a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16c2c:	f007 fc0e 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16c30:	4620      	mov	r0, r4
   16c32:	f001 ff57 	bl	18ae4 <hciTrSendCmd>
}
   16c36:	e7e4      	b.n	16c02 <HciReadRssiCmd+0x32>
   16c38:	10004edc 	.word	0x10004edc

00016c3c <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   16c3c:	b570      	push	{r4, r5, r6, lr}
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;

  hciCb.secCback((hciEvt_t *)&evt);
   16c3e:	4b20      	ldr	r3, [pc, #128]	; (16cc0 <HciResetCmd+0x84>)
   16c40:	4e20      	ldr	r6, [pc, #128]	; (16cc4 <HciResetCmd+0x88>)
   16c42:	68db      	ldr	r3, [r3, #12]
{
   16c44:	b084      	sub	sp, #16
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   16c46:	2214      	movs	r2, #20
   16c48:	f88d 200a 	strb.w	r2, [sp, #10]
  hciCb.secCback((hciEvt_t *)&evt);
   16c4c:	a802      	add	r0, sp, #8
   16c4e:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16c50:	f106 0510 	add.w	r5, r6, #16
   16c54:	e001      	b.n	16c5a <HciResetCmd+0x1e>
  {
    WsfMsgFree(pBuf);
   16c56:	f007 f9a7 	bl	1dfa8 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16c5a:	f10d 0106 	add.w	r1, sp, #6
   16c5e:	4628      	mov	r0, r5
   16c60:	f007 f9be 	bl	1dfe0 <WsfMsgDeq>
   16c64:	4604      	mov	r4, r0
   16c66:	2800      	cmp	r0, #0
   16c68:	d1f5      	bne.n	16c56 <HciResetCmd+0x1a>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   16c6a:	2301      	movs	r3, #1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16c6c:	2003      	movs	r0, #3
  hciCmdCb.numCmdPkts = 1;
   16c6e:	76b3      	strb	r3, [r6, #26]
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16c70:	f007 f992 	bl	1df98 <WsfMsgAlloc>
   16c74:	4602      	mov	r2, r0
   16c76:	b148      	cbz	r0, 16c8c <HciResetCmd+0x50>
    UINT16_TO_BSTREAM(p, opcode);
   16c78:	f640 4303 	movw	r3, #3075	; 0xc03
   16c7c:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16c7e:	7084      	strb	r4, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16c80:	4621      	mov	r1, r4
   16c82:	4811      	ldr	r0, [pc, #68]	; (16cc8 <HciResetCmd+0x8c>)
   16c84:	f007 f9a6 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16c88:	7eb3      	ldrb	r3, [r6, #26]
   16c8a:	b90b      	cbnz	r3, 16c90 <HciResetCmd+0x54>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   16c8c:	b004      	add	sp, #16
   16c8e:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16c90:	480d      	ldr	r0, [pc, #52]	; (16cc8 <HciResetCmd+0x8c>)
   16c92:	f10d 0107 	add.w	r1, sp, #7
   16c96:	f007 f9a3 	bl	1dfe0 <WsfMsgDeq>
   16c9a:	4604      	mov	r4, r0
   16c9c:	2800      	cmp	r0, #0
   16c9e:	d0f5      	beq.n	16c8c <HciResetCmd+0x50>
      hciCmdCb.numCmdPkts--;
   16ca0:	7eb3      	ldrb	r3, [r6, #26]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16ca2:	4808      	ldr	r0, [pc, #32]	; (16cc4 <HciResetCmd+0x88>)
      hciCmdCb.numCmdPkts--;
   16ca4:	3b01      	subs	r3, #1
   16ca6:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16ca8:	7862      	ldrb	r2, [r4, #1]
   16caa:	7823      	ldrb	r3, [r4, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16cac:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16cae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   16cb2:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16cb4:	f007 fbca 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16cb8:	4620      	mov	r0, r4
   16cba:	f001 ff13 	bl	18ae4 <hciTrSendCmd>
}
   16cbe:	e7e5      	b.n	16c8c <HciResetCmd+0x50>
   16cc0:	10004324 	.word	0x10004324
   16cc4:	10004edc 	.word	0x10004edc
   16cc8:	10004eec 	.word	0x10004eec

00016ccc <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   16ccc:	b530      	push	{r4, r5, lr}
   16cce:	4604      	mov	r4, r0
   16cd0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16cd2:	200b      	movs	r0, #11
   16cd4:	f007 f960 	bl	1df98 <WsfMsgAlloc>
   16cd8:	b198      	cbz	r0, 16d02 <HciSetEventMaskCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   16cda:	f640 4101 	movw	r1, #3073	; 0xc01
    UINT8_TO_BSTREAM(p, len);
   16cde:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
   16ce0:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16ce2:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16ce4:	4d14      	ldr	r5, [pc, #80]	; (16d38 <HciSetEventMaskCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   16ce6:	6823      	ldr	r3, [r4, #0]
   16ce8:	6861      	ldr	r1, [r4, #4]
   16cea:	f8c0 1007 	str.w	r1, [r0, #7]
   16cee:	f8c0 3003 	str.w	r3, [r0, #3]
   16cf2:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16cf4:	2100      	movs	r1, #0
   16cf6:	f105 0010 	add.w	r0, r5, #16
   16cfa:	f007 f96b 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16cfe:	7eab      	ldrb	r3, [r5, #26]
   16d00:	b90b      	cbnz	r3, 16d06 <HciSetEventMaskCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   16d02:	b003      	add	sp, #12
   16d04:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16d06:	f10d 0107 	add.w	r1, sp, #7
   16d0a:	f105 0010 	add.w	r0, r5, #16
   16d0e:	f007 f967 	bl	1dfe0 <WsfMsgDeq>
   16d12:	4604      	mov	r4, r0
   16d14:	2800      	cmp	r0, #0
   16d16:	d0f4      	beq.n	16d02 <HciSetEventMaskCmd+0x36>
      hciCmdCb.numCmdPkts--;
   16d18:	7eab      	ldrb	r3, [r5, #26]
   16d1a:	3b01      	subs	r3, #1
   16d1c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16d1e:	7842      	ldrb	r2, [r0, #1]
   16d20:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16d22:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16d24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16d28:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16d2a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16d2c:	f007 fb8e 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16d30:	4620      	mov	r0, r4
   16d32:	f001 fed7 	bl	18ae4 <hciTrSendCmd>
}
   16d36:	e7e4      	b.n	16d02 <HciSetEventMaskCmd+0x36>
   16d38:	10004edc 	.word	0x10004edc

00016d3c <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   16d3c:	b530      	push	{r4, r5, lr}
   16d3e:	4604      	mov	r4, r0
   16d40:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16d42:	200b      	movs	r0, #11
   16d44:	f007 f928 	bl	1df98 <WsfMsgAlloc>
   16d48:	b198      	cbz	r0, 16d72 <HciSetEventMaskPage2Cmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   16d4a:	f640 4163 	movw	r1, #3171	; 0xc63
    UINT8_TO_BSTREAM(p, len);
   16d4e:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
   16d50:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16d52:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16d54:	4d14      	ldr	r5, [pc, #80]	; (16da8 <HciSetEventMaskPage2Cmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   16d56:	6823      	ldr	r3, [r4, #0]
   16d58:	6861      	ldr	r1, [r4, #4]
   16d5a:	f8c0 1007 	str.w	r1, [r0, #7]
   16d5e:	f8c0 3003 	str.w	r3, [r0, #3]
   16d62:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16d64:	2100      	movs	r1, #0
   16d66:	f105 0010 	add.w	r0, r5, #16
   16d6a:	f007 f933 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16d6e:	7eab      	ldrb	r3, [r5, #26]
   16d70:	b90b      	cbnz	r3, 16d76 <HciSetEventMaskPage2Cmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   16d72:	b003      	add	sp, #12
   16d74:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16d76:	f10d 0107 	add.w	r1, sp, #7
   16d7a:	f105 0010 	add.w	r0, r5, #16
   16d7e:	f007 f92f 	bl	1dfe0 <WsfMsgDeq>
   16d82:	4604      	mov	r4, r0
   16d84:	2800      	cmp	r0, #0
   16d86:	d0f4      	beq.n	16d72 <HciSetEventMaskPage2Cmd+0x36>
      hciCmdCb.numCmdPkts--;
   16d88:	7eab      	ldrb	r3, [r5, #26]
   16d8a:	3b01      	subs	r3, #1
   16d8c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16d8e:	7842      	ldrb	r2, [r0, #1]
   16d90:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16d92:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16d94:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16d98:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16d9a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16d9c:	f007 fb56 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16da0:	4620      	mov	r0, r4
   16da2:	f001 fe9f 	bl	18ae4 <hciTrSendCmd>
}
   16da6:	e7e4      	b.n	16d72 <HciSetEventMaskPage2Cmd+0x36>
   16da8:	10004edc 	.word	0x10004edc

00016dac <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   16dac:	b570      	push	{r4, r5, r6, lr}
   16dae:	4605      	mov	r5, r0
   16db0:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16db2:	2007      	movs	r0, #7
{
   16db4:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16db6:	f007 f8ef 	bl	1df98 <WsfMsgAlloc>
   16dba:	b1a0      	cbz	r0, 16de6 <HciWriteAuthPayloadTimeout+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   16dbc:	237c      	movs	r3, #124	; 0x7c
   16dbe:	7003      	strb	r3, [r0, #0]
   16dc0:	230c      	movs	r3, #12
   16dc2:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   16dc4:	2304      	movs	r3, #4
   16dc6:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16dc8:	4e14      	ldr	r6, [pc, #80]	; (16e1c <HciWriteAuthPayloadTimeout+0x70>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   16dca:	70c5      	strb	r5, [r0, #3]
   16dcc:	0a2b      	lsrs	r3, r5, #8
   16dce:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, timeout);
   16dd0:	0a23      	lsrs	r3, r4, #8
   16dd2:	7183      	strb	r3, [r0, #6]
   16dd4:	4602      	mov	r2, r0
   16dd6:	7144      	strb	r4, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16dd8:	2100      	movs	r1, #0
   16dda:	f106 0010 	add.w	r0, r6, #16
   16dde:	f007 f8f9 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16de2:	7eb3      	ldrb	r3, [r6, #26]
   16de4:	b90b      	cbnz	r3, 16dea <HciWriteAuthPayloadTimeout+0x3e>
    hciCmdSend(pBuf);
  }
}
   16de6:	b002      	add	sp, #8
   16de8:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16dea:	f10d 0107 	add.w	r1, sp, #7
   16dee:	f106 0010 	add.w	r0, r6, #16
   16df2:	f007 f8f5 	bl	1dfe0 <WsfMsgDeq>
   16df6:	4604      	mov	r4, r0
   16df8:	2800      	cmp	r0, #0
   16dfa:	d0f4      	beq.n	16de6 <HciWriteAuthPayloadTimeout+0x3a>
      hciCmdCb.numCmdPkts--;
   16dfc:	7eb3      	ldrb	r3, [r6, #26]
   16dfe:	3b01      	subs	r3, #1
   16e00:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16e02:	7842      	ldrb	r2, [r0, #1]
   16e04:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16e06:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16e08:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16e0c:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16e0e:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16e10:	f007 fb1c 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16e14:	4620      	mov	r0, r4
   16e16:	f001 fe65 	bl	18ae4 <hciTrSendCmd>
}
   16e1a:	e7e4      	b.n	16de6 <HciWriteAuthPayloadTimeout+0x3a>
   16e1c:	10004edc 	.word	0x10004edc

00016e20 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   16e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e24:	4680      	mov	r8, r0
   16e26:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16e28:	202a      	movs	r0, #42	; 0x2a
{
   16e2a:	460f      	mov	r7, r1
   16e2c:	4616      	mov	r6, r2
   16e2e:	461d      	mov	r5, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16e30:	f007 f8b2 	bl	1df98 <WsfMsgAlloc>
   16e34:	b360      	cbz	r0, 16e90 <HciLeAddDeviceToResolvingListCmd+0x70>
    UINT16_TO_BSTREAM(p, opcode);
   16e36:	4604      	mov	r4, r0
   16e38:	2327      	movs	r3, #39	; 0x27
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, peerAddrType);
   16e3a:	f880 8003 	strb.w	r8, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   16e3e:	7023      	strb	r3, [r4, #0]
    UINT8_TO_BSTREAM(p, len);
   16e40:	70a3      	strb	r3, [r4, #2]
    UINT16_TO_BSTREAM(p, opcode);
   16e42:	2320      	movs	r3, #32
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   16e44:	4639      	mov	r1, r7
   16e46:	3004      	adds	r0, #4
    UINT16_TO_BSTREAM(p, opcode);
   16e48:	7063      	strb	r3, [r4, #1]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   16e4a:	f7fe fd37 	bl	158bc <BdaCpy>
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   16e4e:	6831      	ldr	r1, [r6, #0]
   16e50:	6872      	ldr	r2, [r6, #4]
   16e52:	68b3      	ldr	r3, [r6, #8]
   16e54:	68f0      	ldr	r0, [r6, #12]
   16e56:	f8c4 0016 	str.w	r0, [r4, #22]
   16e5a:	f8c4 100a 	str.w	r1, [r4, #10]
   16e5e:	f8c4 200e 	str.w	r2, [r4, #14]
   16e62:	f8c4 3012 	str.w	r3, [r4, #18]
    p += HCI_KEY_LEN;
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   16e66:	6829      	ldr	r1, [r5, #0]
   16e68:	686a      	ldr	r2, [r5, #4]
   16e6a:	68ab      	ldr	r3, [r5, #8]
   16e6c:	68e8      	ldr	r0, [r5, #12]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16e6e:	4d16      	ldr	r5, [pc, #88]	; (16ec8 <HciLeAddDeviceToResolvingListCmd+0xa8>)
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   16e70:	f8c4 0026 	str.w	r0, [r4, #38]	; 0x26
   16e74:	f8c4 101a 	str.w	r1, [r4, #26]
   16e78:	f8c4 201e 	str.w	r2, [r4, #30]
   16e7c:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16e80:	4622      	mov	r2, r4
   16e82:	2100      	movs	r1, #0
   16e84:	f105 0010 	add.w	r0, r5, #16
   16e88:	f007 f8a4 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16e8c:	7eab      	ldrb	r3, [r5, #26]
   16e8e:	b913      	cbnz	r3, 16e96 <HciLeAddDeviceToResolvingListCmd+0x76>
    hciCmdSend(pBuf);
  }
}
   16e90:	b002      	add	sp, #8
   16e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16e96:	f10d 0107 	add.w	r1, sp, #7
   16e9a:	f105 0010 	add.w	r0, r5, #16
   16e9e:	f007 f89f 	bl	1dfe0 <WsfMsgDeq>
   16ea2:	4604      	mov	r4, r0
   16ea4:	2800      	cmp	r0, #0
   16ea6:	d0f3      	beq.n	16e90 <HciLeAddDeviceToResolvingListCmd+0x70>
      hciCmdCb.numCmdPkts--;
   16ea8:	7eab      	ldrb	r3, [r5, #26]
   16eaa:	3b01      	subs	r3, #1
   16eac:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16eae:	7842      	ldrb	r2, [r0, #1]
   16eb0:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16eb2:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16eb4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16eb8:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16eba:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16ebc:	f007 fac6 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16ec0:	4620      	mov	r0, r4
   16ec2:	f001 fe0f 	bl	18ae4 <hciTrSendCmd>
}
   16ec6:	e7e3      	b.n	16e90 <HciLeAddDeviceToResolvingListCmd+0x70>
   16ec8:	10004edc 	.word	0x10004edc

00016ecc <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   16ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ece:	4607      	mov	r7, r0
   16ed0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16ed2:	200a      	movs	r0, #10
{
   16ed4:	460d      	mov	r5, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16ed6:	f007 f85f 	bl	1df98 <WsfMsgAlloc>
   16eda:	b1a0      	cbz	r0, 16f06 <HciLeRemoveDeviceFromResolvingList+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   16edc:	2328      	movs	r3, #40	; 0x28
   16ede:	7003      	strb	r3, [r0, #0]
   16ee0:	4604      	mov	r4, r0
   16ee2:	2320      	movs	r3, #32
   16ee4:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16ee6:	4e15      	ldr	r6, [pc, #84]	; (16f3c <HciLeRemoveDeviceFromResolvingList+0x70>)
    UINT8_TO_BSTREAM(p, len);
   16ee8:	2307      	movs	r3, #7
   16eea:	7083      	strb	r3, [r0, #2]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, peerAddrType);
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   16eec:	4629      	mov	r1, r5
   16eee:	3004      	adds	r0, #4
    UINT8_TO_BSTREAM(p, peerAddrType);
   16ef0:	70e7      	strb	r7, [r4, #3]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   16ef2:	f7fe fce3 	bl	158bc <BdaCpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16ef6:	4622      	mov	r2, r4
   16ef8:	2100      	movs	r1, #0
   16efa:	f106 0010 	add.w	r0, r6, #16
   16efe:	f007 f869 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16f02:	7eb3      	ldrb	r3, [r6, #26]
   16f04:	b90b      	cbnz	r3, 16f0a <HciLeRemoveDeviceFromResolvingList+0x3e>
    hciCmdSend(pBuf);
  }
}
   16f06:	b003      	add	sp, #12
   16f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16f0a:	f10d 0107 	add.w	r1, sp, #7
   16f0e:	f106 0010 	add.w	r0, r6, #16
   16f12:	f007 f865 	bl	1dfe0 <WsfMsgDeq>
   16f16:	4604      	mov	r4, r0
   16f18:	2800      	cmp	r0, #0
   16f1a:	d0f4      	beq.n	16f06 <HciLeRemoveDeviceFromResolvingList+0x3a>
      hciCmdCb.numCmdPkts--;
   16f1c:	7eb3      	ldrb	r3, [r6, #26]
   16f1e:	3b01      	subs	r3, #1
   16f20:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16f22:	7842      	ldrb	r2, [r0, #1]
   16f24:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16f26:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16f28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16f2c:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16f2e:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16f30:	f007 fa8c 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16f34:	4620      	mov	r0, r4
   16f36:	f001 fdd5 	bl	18ae4 <hciTrSendCmd>
}
   16f3a:	e7e4      	b.n	16f06 <HciLeRemoveDeviceFromResolvingList+0x3a>
   16f3c:	10004edc 	.word	0x10004edc

00016f40 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   16f40:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16f42:	2003      	movs	r0, #3
{
   16f44:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16f46:	f007 f827 	bl	1df98 <WsfMsgAlloc>
   16f4a:	b160      	cbz	r0, 16f66 <HciLeClearResolvingList+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16f4c:	4c13      	ldr	r4, [pc, #76]	; (16f9c <HciLeClearResolvingList+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   16f4e:	f242 0329 	movw	r3, #8233	; 0x2029
    UINT8_TO_BSTREAM(p, len);
   16f52:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   16f54:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16f56:	4602      	mov	r2, r0
   16f58:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16f5a:	f104 0010 	add.w	r0, r4, #16
   16f5e:	f007 f839 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16f62:	7ea3      	ldrb	r3, [r4, #26]
   16f64:	b90b      	cbnz	r3, 16f6a <HciLeClearResolvingList+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   16f66:	b003      	add	sp, #12
   16f68:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16f6a:	f10d 0107 	add.w	r1, sp, #7
   16f6e:	f104 0010 	add.w	r0, r4, #16
   16f72:	f007 f835 	bl	1dfe0 <WsfMsgDeq>
   16f76:	4605      	mov	r5, r0
   16f78:	2800      	cmp	r0, #0
   16f7a:	d0f4      	beq.n	16f66 <HciLeClearResolvingList+0x26>
      hciCmdCb.numCmdPkts--;
   16f7c:	7ea3      	ldrb	r3, [r4, #26]
   16f7e:	3b01      	subs	r3, #1
   16f80:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16f82:	7842      	ldrb	r2, [r0, #1]
   16f84:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16f86:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16f88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16f8c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16f8e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16f90:	f007 fa5c 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16f94:	4628      	mov	r0, r5
   16f96:	f001 fda5 	bl	18ae4 <hciTrSendCmd>
}
   16f9a:	e7e4      	b.n	16f66 <HciLeClearResolvingList+0x26>
   16f9c:	10004edc 	.word	0x10004edc

00016fa0 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   16fa0:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16fa2:	2003      	movs	r0, #3
{
   16fa4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   16fa6:	f006 fff7 	bl	1df98 <WsfMsgAlloc>
   16faa:	b160      	cbz	r0, 16fc6 <HciLeReadResolvingListSize+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16fac:	4c13      	ldr	r4, [pc, #76]	; (16ffc <HciLeReadResolvingListSize+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   16fae:	f242 032a 	movw	r3, #8234	; 0x202a
    UINT8_TO_BSTREAM(p, len);
   16fb2:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   16fb4:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   16fb6:	4602      	mov	r2, r0
   16fb8:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   16fba:	f104 0010 	add.w	r0, r4, #16
   16fbe:	f007 f809 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   16fc2:	7ea3      	ldrb	r3, [r4, #26]
   16fc4:	b90b      	cbnz	r3, 16fca <HciLeReadResolvingListSize+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   16fc6:	b003      	add	sp, #12
   16fc8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   16fca:	f10d 0107 	add.w	r1, sp, #7
   16fce:	f104 0010 	add.w	r0, r4, #16
   16fd2:	f007 f805 	bl	1dfe0 <WsfMsgDeq>
   16fd6:	4605      	mov	r5, r0
   16fd8:	2800      	cmp	r0, #0
   16fda:	d0f4      	beq.n	16fc6 <HciLeReadResolvingListSize+0x26>
      hciCmdCb.numCmdPkts--;
   16fdc:	7ea3      	ldrb	r3, [r4, #26]
   16fde:	3b01      	subs	r3, #1
   16fe0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16fe2:	7842      	ldrb	r2, [r0, #1]
   16fe4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16fe6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16fe8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16fec:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   16fee:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   16ff0:	f007 fa2c 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   16ff4:	4628      	mov	r0, r5
   16ff6:	f001 fd75 	bl	18ae4 <hciTrSendCmd>
}
   16ffa:	e7e4      	b.n	16fc6 <HciLeReadResolvingListSize+0x26>
   16ffc:	10004edc 	.word	0x10004edc

00017000 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   17000:	b530      	push	{r4, r5, lr}
   17002:	4604      	mov	r4, r0
   17004:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   17006:	2004      	movs	r0, #4
   17008:	f006 ffc6 	bl	1df98 <WsfMsgAlloc>
   1700c:	b178      	cbz	r0, 1702e <HciLeSetAddrResolutionEnable+0x2e>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1700e:	4d15      	ldr	r5, [pc, #84]	; (17064 <HciLeSetAddrResolutionEnable+0x64>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
   17010:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   17012:	2320      	movs	r3, #32
   17014:	7043      	strb	r3, [r0, #1]
   17016:	212d      	movs	r1, #45	; 0x2d
    UINT8_TO_BSTREAM(p, len);
   17018:	2301      	movs	r3, #1
    UINT16_TO_BSTREAM(p, opcode);
   1701a:	7001      	strb	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   1701c:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1701e:	4602      	mov	r2, r0
   17020:	2100      	movs	r1, #0
   17022:	f105 0010 	add.w	r0, r5, #16
   17026:	f006 ffd5 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1702a:	7eab      	ldrb	r3, [r5, #26]
   1702c:	b90b      	cbnz	r3, 17032 <HciLeSetAddrResolutionEnable+0x32>
    hciCmdSend(pBuf);
  }
}
   1702e:	b003      	add	sp, #12
   17030:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   17032:	f10d 0107 	add.w	r1, sp, #7
   17036:	f105 0010 	add.w	r0, r5, #16
   1703a:	f006 ffd1 	bl	1dfe0 <WsfMsgDeq>
   1703e:	4604      	mov	r4, r0
   17040:	2800      	cmp	r0, #0
   17042:	d0f4      	beq.n	1702e <HciLeSetAddrResolutionEnable+0x2e>
      hciCmdCb.numCmdPkts--;
   17044:	7eab      	ldrb	r3, [r5, #26]
   17046:	3b01      	subs	r3, #1
   17048:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1704a:	7842      	ldrb	r2, [r0, #1]
   1704c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1704e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   17050:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   17054:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   17056:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   17058:	f007 f9f8 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   1705c:	4620      	mov	r0, r4
   1705e:	f001 fd41 	bl	18ae4 <hciTrSendCmd>
}
   17062:	e7e4      	b.n	1702e <HciLeSetAddrResolutionEnable+0x2e>
   17064:	10004edc 	.word	0x10004edc

00017068 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   17068:	b5f0      	push	{r4, r5, r6, r7, lr}
   1706a:	4607      	mov	r7, r0
   1706c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1706e:	200b      	movs	r0, #11
{
   17070:	460d      	mov	r5, r1
   17072:	4616      	mov	r6, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   17074:	f006 ff90 	bl	1df98 <WsfMsgAlloc>
   17078:	b1a8      	cbz	r0, 170a6 <HciLeSetPrivacyModeCmd+0x3e>
    UINT16_TO_BSTREAM(p, opcode);
   1707a:	234e      	movs	r3, #78	; 0x4e
   1707c:	7003      	strb	r3, [r0, #0]
   1707e:	4604      	mov	r4, r0
   17080:	2320      	movs	r3, #32
   17082:	7043      	strb	r3, [r0, #1]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, addrType);
    BDA_TO_BSTREAM(p, pAddr);
   17084:	4629      	mov	r1, r5
    UINT8_TO_BSTREAM(p, len);
   17086:	2308      	movs	r3, #8
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   17088:	4d14      	ldr	r5, [pc, #80]	; (170dc <HciLeSetPrivacyModeCmd+0x74>)
    UINT8_TO_BSTREAM(p, len);
   1708a:	7083      	strb	r3, [r0, #2]
    BDA_TO_BSTREAM(p, pAddr);
   1708c:	3004      	adds	r0, #4
    UINT8_TO_BSTREAM(p, addrType);
   1708e:	70e7      	strb	r7, [r4, #3]
    BDA_TO_BSTREAM(p, pAddr);
   17090:	f7fe fc14 	bl	158bc <BdaCpy>
    UINT8_TO_BSTREAM(p, mode);
   17094:	72a6      	strb	r6, [r4, #10]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   17096:	4622      	mov	r2, r4
   17098:	2100      	movs	r1, #0
   1709a:	f105 0010 	add.w	r0, r5, #16
   1709e:	f006 ff99 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   170a2:	7eab      	ldrb	r3, [r5, #26]
   170a4:	b90b      	cbnz	r3, 170aa <HciLeSetPrivacyModeCmd+0x42>
    hciCmdSend(pBuf);
  }
}
   170a6:	b003      	add	sp, #12
   170a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   170aa:	f10d 0107 	add.w	r1, sp, #7
   170ae:	f105 0010 	add.w	r0, r5, #16
   170b2:	f006 ff95 	bl	1dfe0 <WsfMsgDeq>
   170b6:	4604      	mov	r4, r0
   170b8:	2800      	cmp	r0, #0
   170ba:	d0f4      	beq.n	170a6 <HciLeSetPrivacyModeCmd+0x3e>
      hciCmdCb.numCmdPkts--;
   170bc:	7eab      	ldrb	r3, [r5, #26]
   170be:	3b01      	subs	r3, #1
   170c0:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   170c2:	7842      	ldrb	r2, [r0, #1]
   170c4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   170c6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   170c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   170cc:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   170ce:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   170d0:	f007 f9bc 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   170d4:	4620      	mov	r0, r4
   170d6:	f001 fd05 	bl	18ae4 <hciTrSendCmd>
}
   170da:	e7e4      	b.n	170a6 <HciLeSetPrivacyModeCmd+0x3e>
   170dc:	10004edc 	.word	0x10004edc

000170e0 <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   170e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   170e2:	4606      	mov	r6, r0
   170e4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   170e6:	1cc8      	adds	r0, r1, #3
{
   170e8:	460d      	mov	r5, r1
   170ea:	4617      	mov	r7, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   170ec:	f006 ff54 	bl	1df98 <WsfMsgAlloc>
   170f0:	b190      	cbz	r0, 17118 <HciVendorSpecificCmd+0x38>
    UINT16_TO_BSTREAM(p, opcode);
   170f2:	0a33      	lsrs	r3, r6, #8
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pData, len);
   170f4:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
   170f6:	7085      	strb	r5, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   170f8:	4d15      	ldr	r5, [pc, #84]	; (17150 <HciVendorSpecificCmd+0x70>)
    UINT16_TO_BSTREAM(p, opcode);
   170fa:	7043      	strb	r3, [r0, #1]
   170fc:	4604      	mov	r4, r0
    memcpy(p, pData, len);
   170fe:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, opcode);
   17100:	7006      	strb	r6, [r0, #0]
    memcpy(p, pData, len);
   17102:	3003      	adds	r0, #3
   17104:	f7f4 fffc 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   17108:	4622      	mov	r2, r4
   1710a:	2100      	movs	r1, #0
   1710c:	f105 0010 	add.w	r0, r5, #16
   17110:	f006 ff60 	bl	1dfd4 <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   17114:	7eab      	ldrb	r3, [r5, #26]
   17116:	b90b      	cbnz	r3, 1711c <HciVendorSpecificCmd+0x3c>
    hciCmdSend(pBuf);
  }
}
   17118:	b003      	add	sp, #12
   1711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1711c:	f10d 0107 	add.w	r1, sp, #7
   17120:	f105 0010 	add.w	r0, r5, #16
   17124:	f006 ff5c 	bl	1dfe0 <WsfMsgDeq>
   17128:	4604      	mov	r4, r0
   1712a:	2800      	cmp	r0, #0
   1712c:	d0f4      	beq.n	17118 <HciVendorSpecificCmd+0x38>
      hciCmdCb.numCmdPkts--;
   1712e:	7eab      	ldrb	r3, [r5, #26]
   17130:	3b01      	subs	r3, #1
   17132:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   17134:	7842      	ldrb	r2, [r0, #1]
   17136:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   17138:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1713a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1713e:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   17140:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   17142:	f007 f983 	bl	1e44c <WsfTimerStartSec>
      hciTrSendCmd(p);
   17146:	4620      	mov	r0, r4
   17148:	f001 fccc 	bl	18ae4 <hciTrSendCmd>
}
   1714c:	e7e4      	b.n	17118 <HciVendorSpecificCmd+0x38>
   1714e:	bf00      	nop
   17150:	10004edc 	.word	0x10004edc

00017154 <HciLeSetExtScanParamCmd>:
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetExtScanParamCmd(uint8_t ownAddrType, uint8_t scanFiltPolicy, uint8_t scanPhys,
                             hciExtScanParam_t *pScanParam)
{
   17154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t numPhys;

  /* find out number of scanning PHYs */
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
  {
    if (scanPhys & (1 << i))
   17158:	f012 0401 	ands.w	r4, r2, #1
{
   1715c:	4616      	mov	r6, r2
    {
      numPhys++;
   1715e:	bf18      	it	ne
   17160:	2401      	movne	r4, #1
    if (scanPhys & (1 << i))
   17162:	07b2      	lsls	r2, r6, #30
      numPhys++;
   17164:	bf44      	itt	mi
   17166:	3401      	addmi	r4, #1
   17168:	b2e4      	uxtbmi	r4, r4
{
   1716a:	461d      	mov	r5, r3
    if (scanPhys & (1 << i))
   1716c:	0773      	lsls	r3, r6, #29
      numPhys++;
   1716e:	bf48      	it	mi
   17170:	3401      	addmi	r4, #1
{
   17172:	4680      	mov	r8, r0
      numPhys++;
   17174:	bf48      	it	mi
   17176:	b2e4      	uxtbmi	r4, r4
    if (scanPhys & (1 << i))
   17178:	0730      	lsls	r0, r6, #28
{
   1717a:	460f      	mov	r7, r1
    if (scanPhys & (1 << i))
   1717c:	d503      	bpl.n	17186 <HciLeSetExtScanParamCmd+0x32>
      numPhys++;
   1717e:	3401      	adds	r4, #1
   17180:	b2e4      	uxtb	r4, r4
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
   17182:	2c04      	cmp	r4, #4
   17184:	d064      	beq.n	17250 <HciLeSetExtScanParamCmd+0xfc>
    if (scanPhys & (1 << i))
   17186:	06f1      	lsls	r1, r6, #27
   17188:	d503      	bpl.n	17192 <HciLeSetExtScanParamCmd+0x3e>
      numPhys++;
   1718a:	3401      	adds	r4, #1
   1718c:	b2e4      	uxtb	r4, r4
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
   1718e:	2c04      	cmp	r4, #4
   17190:	d05e      	beq.n	17250 <HciLeSetExtScanParamCmd+0xfc>
    if (scanPhys & (1 << i))
   17192:	06b2      	lsls	r2, r6, #26
   17194:	d503      	bpl.n	1719e <HciLeSetExtScanParamCmd+0x4a>
      numPhys++;
   17196:	3401      	adds	r4, #1
   17198:	b2e4      	uxtb	r4, r4
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
   1719a:	2c04      	cmp	r4, #4
   1719c:	d058      	beq.n	17250 <HciLeSetExtScanParamCmd+0xfc>
    if (scanPhys & (1 << i))
   1719e:	0673      	lsls	r3, r6, #25
   171a0:	d503      	bpl.n	171aa <HciLeSetExtScanParamCmd+0x56>
      numPhys++;
   171a2:	3401      	adds	r4, #1
   171a4:	b2e4      	uxtb	r4, r4
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
   171a6:	2c04      	cmp	r4, #4
   171a8:	d052      	beq.n	17250 <HciLeSetExtScanParamCmd+0xfc>
    if (scanPhys & (1 << i))
   171aa:	09f3      	lsrs	r3, r6, #7
      numPhys++;
   171ac:	bf1c      	itt	ne
   171ae:	3401      	addne	r4, #1
   171b0:	b2e4      	uxtbne	r4, r4
    }
  }

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EXT_SCAN_PARAM, HCI_LEN_LE_SET_EXT_SCAN_PARAM(numPhys))) != NULL)
   171b2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   171b6:	3103      	adds	r1, #3
   171b8:	f242 0041 	movw	r0, #8257	; 0x2041
   171bc:	f7fe fdcc 	bl	15d58 <hciCmdAlloc>
   171c0:	2800      	cmp	r0, #0
   171c2:	d043      	beq.n	1724c <HciLeSetExtScanParamCmd+0xf8>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, ownAddrType);
   171c4:	f880 8003 	strb.w	r8, [r0, #3]
    UINT8_TO_BSTREAM(p, scanFiltPolicy);
   171c8:	7107      	strb	r7, [r0, #4]
    UINT8_TO_BSTREAM(p, scanPhys);
   171ca:	1d82      	adds	r2, r0, #6
   171cc:	7146      	strb	r6, [r0, #5]

    for (i = 0; i < numPhys; i++)
   171ce:	2c00      	cmp	r4, #0
   171d0:	d038      	beq.n	17244 <HciLeSetExtScanParamCmd+0xf0>
    {
      UINT8_TO_BSTREAM(p, pScanParam[i].scanType);
   171d2:	792b      	ldrb	r3, [r5, #4]
   171d4:	7013      	strb	r3, [r2, #0]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanInterval);
   171d6:	882b      	ldrh	r3, [r5, #0]
   171d8:	7053      	strb	r3, [r2, #1]
   171da:	882b      	ldrh	r3, [r5, #0]
   171dc:	0a1b      	lsrs	r3, r3, #8
   171de:	7093      	strb	r3, [r2, #2]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   171e0:	886b      	ldrh	r3, [r5, #2]
   171e2:	70d3      	strb	r3, [r2, #3]
   171e4:	886b      	ldrh	r3, [r5, #2]
    for (i = 0; i < numPhys; i++)
   171e6:	2c01      	cmp	r4, #1
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   171e8:	ea4f 2313 	mov.w	r3, r3, lsr #8
   171ec:	7113      	strb	r3, [r2, #4]
    for (i = 0; i < numPhys; i++)
   171ee:	d029      	beq.n	17244 <HciLeSetExtScanParamCmd+0xf0>
      UINT8_TO_BSTREAM(p, pScanParam[i].scanType);
   171f0:	7aab      	ldrb	r3, [r5, #10]
   171f2:	7153      	strb	r3, [r2, #5]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanInterval);
   171f4:	88eb      	ldrh	r3, [r5, #6]
   171f6:	7193      	strb	r3, [r2, #6]
   171f8:	88eb      	ldrh	r3, [r5, #6]
   171fa:	0a1b      	lsrs	r3, r3, #8
   171fc:	71d3      	strb	r3, [r2, #7]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   171fe:	892b      	ldrh	r3, [r5, #8]
   17200:	7213      	strb	r3, [r2, #8]
   17202:	892b      	ldrh	r3, [r5, #8]
    for (i = 0; i < numPhys; i++)
   17204:	2c02      	cmp	r4, #2
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   17206:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1720a:	7253      	strb	r3, [r2, #9]
    for (i = 0; i < numPhys; i++)
   1720c:	d01a      	beq.n	17244 <HciLeSetExtScanParamCmd+0xf0>
      UINT8_TO_BSTREAM(p, pScanParam[i].scanType);
   1720e:	7c2b      	ldrb	r3, [r5, #16]
   17210:	7293      	strb	r3, [r2, #10]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanInterval);
   17212:	89ab      	ldrh	r3, [r5, #12]
   17214:	72d3      	strb	r3, [r2, #11]
   17216:	89ab      	ldrh	r3, [r5, #12]
   17218:	0a1b      	lsrs	r3, r3, #8
   1721a:	7313      	strb	r3, [r2, #12]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   1721c:	89eb      	ldrh	r3, [r5, #14]
   1721e:	7353      	strb	r3, [r2, #13]
   17220:	89eb      	ldrh	r3, [r5, #14]
    for (i = 0; i < numPhys; i++)
   17222:	2c04      	cmp	r4, #4
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   17224:	ea4f 2313 	mov.w	r3, r3, lsr #8
   17228:	7393      	strb	r3, [r2, #14]
    for (i = 0; i < numPhys; i++)
   1722a:	d10b      	bne.n	17244 <HciLeSetExtScanParamCmd+0xf0>
      UINT8_TO_BSTREAM(p, pScanParam[i].scanType);
   1722c:	7dab      	ldrb	r3, [r5, #22]
   1722e:	73d3      	strb	r3, [r2, #15]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanInterval);
   17230:	8a6b      	ldrh	r3, [r5, #18]
   17232:	7413      	strb	r3, [r2, #16]
   17234:	8a6b      	ldrh	r3, [r5, #18]
   17236:	0a1b      	lsrs	r3, r3, #8
   17238:	7453      	strb	r3, [r2, #17]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   1723a:	8aab      	ldrh	r3, [r5, #20]
   1723c:	7493      	strb	r3, [r2, #18]
   1723e:	8aab      	ldrh	r3, [r5, #20]
   17240:	0a1b      	lsrs	r3, r3, #8
   17242:	74d3      	strb	r3, [r2, #19]
    }

    hciCmdSend(pBuf);
  }
}
   17244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hciCmdSend(pBuf);
   17248:	f7fe bd94 	b.w	15d74 <hciCmdSend>
}
   1724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EXT_SCAN_PARAM, HCI_LEN_LE_SET_EXT_SCAN_PARAM(numPhys))) != NULL)
   17250:	2117      	movs	r1, #23
   17252:	f242 0041 	movw	r0, #8257	; 0x2041
   17256:	f7fe fd7f 	bl	15d58 <hciCmdAlloc>
   1725a:	2800      	cmp	r0, #0
   1725c:	d0f6      	beq.n	1724c <HciLeSetExtScanParamCmd+0xf8>
    UINT8_TO_BSTREAM(p, ownAddrType);
   1725e:	f880 8003 	strb.w	r8, [r0, #3]
    UINT8_TO_BSTREAM(p, scanFiltPolicy);
   17262:	7107      	strb	r7, [r0, #4]
    UINT8_TO_BSTREAM(p, scanPhys);
   17264:	1d82      	adds	r2, r0, #6
   17266:	7146      	strb	r6, [r0, #5]
   17268:	2404      	movs	r4, #4
   1726a:	e7b2      	b.n	171d2 <HciLeSetExtScanParamCmd+0x7e>

0001726c <HciLeExtScanEnableCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeExtScanEnableCmd(uint8_t enable, uint8_t filterDup, uint16_t duration, uint16_t period)
{
   1726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1726e:	460f      	mov	r7, r1
   17270:	4606      	mov	r6, r0
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE, HCI_LEN_LE_SET_EXT_SCAN_ENABLE)) != NULL)
   17272:	2106      	movs	r1, #6
   17274:	f242 0042 	movw	r0, #8258	; 0x2042
{
   17278:	4615      	mov	r5, r2
   1727a:	461c      	mov	r4, r3
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE, HCI_LEN_LE_SET_EXT_SCAN_ENABLE)) != NULL)
   1727c:	f7fe fd6c 	bl	15d58 <hciCmdAlloc>
   17280:	b158      	cbz	r0, 1729a <HciLeExtScanEnableCmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
    UINT8_TO_BSTREAM(p, filterDup);
    UINT16_TO_BSTREAM(p, duration);
   17282:	0a2b      	lsrs	r3, r5, #8
   17284:	7183      	strb	r3, [r0, #6]
    UINT16_TO_BSTREAM(p, period);
   17286:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, enable);
   17288:	70c6      	strb	r6, [r0, #3]
    UINT8_TO_BSTREAM(p, filterDup);
   1728a:	7107      	strb	r7, [r0, #4]
    UINT16_TO_BSTREAM(p, duration);
   1728c:	7145      	strb	r5, [r0, #5]
    UINT16_TO_BSTREAM(p, period);
   1728e:	71c4      	strb	r4, [r0, #7]
   17290:	7203      	strb	r3, [r0, #8]
    hciCmdSend(pBuf);
  }
}
   17292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    hciCmdSend(pBuf);
   17296:	f7fe bd6d 	b.w	15d74 <hciCmdSend>
}
   1729a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001729c <hciCoreConnByHandle>:
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
  {
    if (pConn->handle == handle)
   1729c:	4b09      	ldr	r3, [pc, #36]	; (172c4 <hciCoreConnByHandle+0x28>)
   1729e:	8a19      	ldrh	r1, [r3, #16]
   172a0:	4281      	cmp	r1, r0
   172a2:	d00a      	beq.n	172ba <hciCoreConnByHandle+0x1e>
   172a4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
   172a6:	4281      	cmp	r1, r0
   172a8:	d009      	beq.n	172be <hciCoreConnByHandle+0x22>
   172aa:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   172ae:	3338      	adds	r3, #56	; 0x38
   172b0:	4281      	cmp	r1, r0
   172b2:	bf0c      	ite	eq
   172b4:	4618      	moveq	r0, r3
   172b6:	2000      	movne	r0, #0
   172b8:	4770      	bx	lr
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   172ba:	4618      	mov	r0, r3
   172bc:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   172be:	f103 001c 	add.w	r0, r3, #28
      return pConn;
    }
  }

  return NULL;
}
   172c2:	4770      	bx	lr
   172c4:	10004ef8 	.word	0x10004ef8

000172c8 <hciCoreConnOpen>:
    if (pConn->handle == HCI_HANDLE_NONE)
   172c8:	4b0b      	ldr	r3, [pc, #44]	; (172f8 <hciCoreConnOpen+0x30>)
   172ca:	8a19      	ldrh	r1, [r3, #16]
   172cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   172d0:	4291      	cmp	r1, r2
   172d2:	d00a      	beq.n	172ea <hciCoreConnOpen+0x22>
   172d4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
   172d6:	4291      	cmp	r1, r2
   172d8:	d006      	beq.n	172e8 <hciCoreConnOpen+0x20>
   172da:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
   172de:	4291      	cmp	r1, r2
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   172e0:	bf08      	it	eq
   172e2:	3338      	addeq	r3, #56	; 0x38
    if (pConn->handle == HCI_HANDLE_NONE)
   172e4:	d001      	beq.n	172ea <hciCoreConnOpen+0x22>
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
}
   172e6:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   172e8:	331c      	adds	r3, #28
      pConn->outBufs = 0;
   172ea:	2200      	movs	r2, #0
      pConn->handle = handle;
   172ec:	8218      	strh	r0, [r3, #16]
      pConn->outBufs = 0;
   172ee:	765a      	strb	r2, [r3, #25]
      pConn->flowDisabled = FALSE;
   172f0:	f8a3 2017 	strh.w	r2, [r3, #23]
}
   172f4:	4770      	bx	lr
   172f6:	bf00      	nop
   172f8:	10004ef8 	.word	0x10004ef8

000172fc <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   172fc:	b570      	push	{r4, r5, r6, lr}
   172fe:	460e      	mov	r6, r1
   17300:	4604      	mov	r4, r0
   17302:	4615      	mov	r5, r2
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   17304:	f000 fb4e 	bl	179a4 <HciGetBufSize>

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   17308:	42b0      	cmp	r0, r6
   1730a:	d24b      	bcs.n	173a4 <hciCoreTxAclStart+0xa8>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   1730c:	182b      	adds	r3, r5, r0
   1730e:	6063      	str	r3, [r4, #4]
    pConn->txAclRemLen = len - hciLen;
   17310:	1a36      	subs	r6, r6, r0
    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
    pConn->fragmenting = TRUE;

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   17312:	0a03      	lsrs	r3, r0, #8
    pConn->fragmenting = TRUE;
   17314:	2201      	movs	r2, #1
    pConn->txAclRemLen = len - hciLen;
   17316:	8266      	strh	r6, [r4, #18]
    pConn->pTxAclPkt = pData;
   17318:	6025      	str	r5, [r4, #0]
    pConn->fragmenting = TRUE;
   1731a:	75a2      	strb	r2, [r4, #22]
    UINT16_TO_BUF(&pData[2], hciLen);
   1731c:	70a8      	strb	r0, [r5, #2]
   1731e:	70eb      	strb	r3, [r5, #3]
  pConn->outBufs++;
   17320:	7e63      	ldrb	r3, [r4, #25]
  if (hciCoreCb.availBufs > 0)
   17322:	4e2f      	ldr	r6, [pc, #188]	; (173e0 <hciCoreTxAclStart+0xe4>)
  pConn->outBufs++;
   17324:	4413      	add	r3, r2
   17326:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   17328:	4629      	mov	r1, r5
   1732a:	4620      	mov	r0, r4
   1732c:	f001 fbc2 	bl	18ab4 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   17330:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   17334:	2b00      	cmp	r3, #0
   17336:	d040      	beq.n	173ba <hciCoreTxAclStart+0xbe>
    hciCoreCb.availBufs--;
   17338:	3b01      	subs	r3, #1
   1733a:	b2db      	uxtb	r3, r3
   1733c:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76

    /* send the packet */
    hciCoreSendAclData(pConn, pData);

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   17340:	2b00      	cmp	r3, #0
   17342:	d03a      	beq.n	173ba <hciCoreTxAclStart+0xbe>
  }

  if (pConn != NULL)
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   17344:	8a65      	ldrh	r5, [r4, #18]
   17346:	f000 fb2d 	bl	179a4 <HciGetBufSize>
   1734a:	4285      	cmp	r5, r0
   1734c:	d23a      	bcs.n	173c4 <hciCoreTxAclStart+0xc8>
   1734e:	8a65      	ldrh	r5, [r4, #18]

    if (aclLen > 0)
   17350:	2d00      	cmp	r5, #0
   17352:	d032      	beq.n	173ba <hciCoreTxAclStart+0xbe>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   17354:	8a63      	ldrh	r3, [r4, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   17356:	6862      	ldr	r2, [r4, #4]
      pConn->txAclRemLen -= aclLen;
   17358:	1b5b      	subs	r3, r3, r5
   1735a:	8263      	strh	r3, [r4, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   1735c:	8a23      	ldrh	r3, [r4, #16]
   1735e:	7013      	strb	r3, [r2, #0]
   17360:	8a23      	ldrh	r3, [r4, #16]
   17362:	6862      	ldr	r2, [r4, #4]
   17364:	0a1b      	lsrs	r3, r3, #8
   17366:	f043 0310 	orr.w	r3, r3, #16
   1736a:	7053      	strb	r3, [r2, #1]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   1736c:	6862      	ldr	r2, [r4, #4]
   1736e:	7095      	strb	r5, [r2, #2]
   17370:	6862      	ldr	r2, [r4, #4]
   17372:	0a2b      	lsrs	r3, r5, #8
   17374:	70d3      	strb	r3, [r2, #3]
  pConn->outBufs++;
   17376:	7e63      	ldrb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   17378:	6861      	ldr	r1, [r4, #4]
  pConn->outBufs++;
   1737a:	3301      	adds	r3, #1
   1737c:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   1737e:	4620      	mov	r0, r4
   17380:	f001 fb98 	bl	18ab4 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   17384:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   17388:	b303      	cbz	r3, 173cc <hciCoreTxAclStart+0xd0>
    hciCoreCb.availBufs--;
   1738a:	3b01      	subs	r3, #1
   1738c:	b2db      	uxtb	r3, r3
   1738e:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   17392:	8a62      	ldrh	r2, [r4, #18]
   17394:	2a00      	cmp	r2, #0
   17396:	d0d3      	beq.n	17340 <hciCoreTxAclStart+0x44>
      {
        pConn->pNextTxFrag += aclLen;
   17398:	6863      	ldr	r3, [r4, #4]
   1739a:	442b      	add	r3, r5
   1739c:	6063      	str	r3, [r4, #4]
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   1739e:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   173a2:	e7cd      	b.n	17340 <hciCoreTxAclStart+0x44>
  pConn->outBufs++;
   173a4:	7e63      	ldrb	r3, [r4, #25]
   173a6:	3301      	adds	r3, #1
   173a8:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   173aa:	4629      	mov	r1, r5
   173ac:	4620      	mov	r0, r4
   173ae:	f001 fb81 	bl	18ab4 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   173b2:	4a0b      	ldr	r2, [pc, #44]	; (173e0 <hciCoreTxAclStart+0xe4>)
   173b4:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   173b8:	b903      	cbnz	r3, 173bc <hciCoreTxAclStart+0xc0>
}
   173ba:	bd70      	pop	{r4, r5, r6, pc}
    hciCoreCb.availBufs--;
   173bc:	3b01      	subs	r3, #1
   173be:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
}
   173c2:	bd70      	pop	{r4, r5, r6, pc}
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   173c4:	f000 faee 	bl	179a4 <HciGetBufSize>
   173c8:	4605      	mov	r5, r0
   173ca:	e7c1      	b.n	17350 <hciCoreTxAclStart+0x54>
      if (pConn->txAclRemLen > 0)
   173cc:	8a63      	ldrh	r3, [r4, #18]
   173ce:	2b00      	cmp	r3, #0
   173d0:	d0f3      	beq.n	173ba <hciCoreTxAclStart+0xbe>
        pConn->pNextTxFrag += aclLen;
   173d2:	6863      	ldr	r3, [r4, #4]
   173d4:	442b      	add	r3, r5
   173d6:	6063      	str	r3, [r4, #4]
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   173d8:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   173dc:	e7b0      	b.n	17340 <hciCoreTxAclStart+0x44>
   173de:	bf00      	nop
   173e0:	10004ef8 	.word	0x10004ef8

000173e4 <hciCoreTxReady>:
{
   173e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hciCoreCb.availBufs += bufs;
   173e8:	4c50      	ldr	r4, [pc, #320]	; (1752c <hciCoreTxReady+0x148>)
{
   173ea:	b082      	sub	sp, #8
    hciCoreCb.availBufs += bufs;
   173ec:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
  if (bufs > 0)
   173f0:	b150      	cbz	r0, 17408 <hciCoreTxReady+0x24>
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   173f2:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
    hciCoreCb.availBufs += bufs;
   173f6:	4403      	add	r3, r0
   173f8:	b2db      	uxtb	r3, r3
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   173fa:	4293      	cmp	r3, r2
    hciCoreCb.availBufs += bufs;
   173fc:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   17400:	bf84      	itt	hi
   17402:	f884 2076 	strbhi.w	r2, [r4, #118]	; 0x76
   17406:	4613      	movhi	r3, r2
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17408:	4e49      	ldr	r6, [pc, #292]	; (17530 <hciCoreTxReady+0x14c>)
   1740a:	f1a6 081c 	sub.w	r8, r6, #28
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1740e:	f1a6 0a38 	sub.w	sl, r6, #56	; 0x38
  while (hciCoreCb.availBufs > 0)
   17412:	2b00      	cmp	r3, #0
   17414:	d035      	beq.n	17482 <hciCoreTxReady+0x9e>
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   17416:	8a22      	ldrh	r2, [r4, #16]
   17418:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1741c:	429a      	cmp	r2, r3
   1741e:	d001      	beq.n	17424 <hciCoreTxReady+0x40>
   17420:	7da3      	ldrb	r3, [r4, #22]
   17422:	bb8b      	cbnz	r3, 17488 <hciCoreTxReady+0xa4>
   17424:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   17426:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1742a:	429a      	cmp	r2, r3
   1742c:	d003      	beq.n	17436 <hciCoreTxReady+0x52>
   1742e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   17432:	2b00      	cmp	r3, #0
   17434:	d169      	bne.n	1750a <hciCoreTxReady+0x126>
   17436:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   1743a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1743e:	429a      	cmp	r2, r3
   17440:	d003      	beq.n	1744a <hciCoreTxReady+0x66>
   17442:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   17446:	2b00      	cmp	r3, #0
   17448:	d161      	bne.n	1750e <hciCoreTxReady+0x12a>
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   1744a:	483a      	ldr	r0, [pc, #232]	; (17534 <hciCoreTxReady+0x150>)
   1744c:	f10d 0107 	add.w	r1, sp, #7
   17450:	f006 fdc6 	bl	1dfe0 <WsfMsgDeq>
   17454:	4602      	mov	r2, r0
   17456:	b1a0      	cbz	r0, 17482 <hciCoreTxReady+0x9e>
        BYTES_TO_UINT16(handle, pData);
   17458:	7841      	ldrb	r1, [r0, #1]
   1745a:	7803      	ldrb	r3, [r0, #0]
   1745c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    if (pConn->handle == handle)
   17460:	8a21      	ldrh	r1, [r4, #16]
        BYTES_TO_UINT16(handle, pData);
   17462:	b29b      	uxth	r3, r3
    if (pConn->handle == handle)
   17464:	4299      	cmp	r1, r3
   17466:	d054      	beq.n	17512 <hciCoreTxReady+0x12e>
   17468:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1746a:	4299      	cmp	r1, r3
   1746c:	d05a      	beq.n	17524 <hciCoreTxReady+0x140>
   1746e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   17472:	4299      	cmp	r1, r3
   17474:	d058      	beq.n	17528 <hciCoreTxReady+0x144>
          WsfMsgFree(pData);
   17476:	f006 fd97 	bl	1dfa8 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   1747a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   1747e:	2b00      	cmp	r3, #0
   17480:	d1c9      	bne.n	17416 <hciCoreTxReady+0x32>
}
   17482:	b002      	add	sp, #8
   17484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   17488:	4655      	mov	r5, sl
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   1748a:	f8b5 9012 	ldrh.w	r9, [r5, #18]
   1748e:	f000 fa89 	bl	179a4 <HciGetBufSize>
   17492:	4581      	cmp	r9, r0
   17494:	d22a      	bcs.n	174ec <hciCoreTxReady+0x108>
   17496:	8a6f      	ldrh	r7, [r5, #18]
    if (aclLen > 0)
   17498:	2f00      	cmp	r7, #0
   1749a:	d0d6      	beq.n	1744a <hciCoreTxReady+0x66>
      pConn->txAclRemLen -= aclLen;
   1749c:	8a6b      	ldrh	r3, [r5, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   1749e:	686a      	ldr	r2, [r5, #4]
   174a0:	8a29      	ldrh	r1, [r5, #16]
      pConn->txAclRemLen -= aclLen;
   174a2:	1bdb      	subs	r3, r3, r7
   174a4:	826b      	strh	r3, [r5, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   174a6:	7011      	strb	r1, [r2, #0]
   174a8:	8a2b      	ldrh	r3, [r5, #16]
   174aa:	686a      	ldr	r2, [r5, #4]
   174ac:	0a1b      	lsrs	r3, r3, #8
   174ae:	f043 0310 	orr.w	r3, r3, #16
   174b2:	7053      	strb	r3, [r2, #1]
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   174b4:	686b      	ldr	r3, [r5, #4]
   174b6:	709f      	strb	r7, [r3, #2]
   174b8:	686b      	ldr	r3, [r5, #4]
   174ba:	0a3a      	lsrs	r2, r7, #8
   174bc:	70da      	strb	r2, [r3, #3]
  pConn->outBufs++;
   174be:	7e6b      	ldrb	r3, [r5, #25]
  hciTrSendAclData(pConn, pData);
   174c0:	6869      	ldr	r1, [r5, #4]
  pConn->outBufs++;
   174c2:	3301      	adds	r3, #1
   174c4:	766b      	strb	r3, [r5, #25]
  hciTrSendAclData(pConn, pData);
   174c6:	4628      	mov	r0, r5
   174c8:	f001 faf4 	bl	18ab4 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   174cc:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   174d0:	b193      	cbz	r3, 174f8 <hciCoreTxReady+0x114>
    hciCoreCb.availBufs--;
   174d2:	3b01      	subs	r3, #1
   174d4:	b2db      	uxtb	r3, r3
   174d6:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
      if (pConn->txAclRemLen > 0)
   174da:	8a6a      	ldrh	r2, [r5, #18]
   174dc:	2a00      	cmp	r2, #0
   174de:	d098      	beq.n	17412 <hciCoreTxReady+0x2e>
        pConn->pNextTxFrag += aclLen;
   174e0:	686b      	ldr	r3, [r5, #4]
   174e2:	443b      	add	r3, r7
   174e4:	606b      	str	r3, [r5, #4]
  while (hciCoreCb.availBufs > 0)
   174e6:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   174ea:	e792      	b.n	17412 <hciCoreTxReady+0x2e>
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   174ec:	f000 fa5a 	bl	179a4 <HciGetBufSize>
   174f0:	4607      	mov	r7, r0
    if (aclLen > 0)
   174f2:	2f00      	cmp	r7, #0
   174f4:	d0a9      	beq.n	1744a <hciCoreTxReady+0x66>
   174f6:	e7d1      	b.n	1749c <hciCoreTxReady+0xb8>
      if (pConn->txAclRemLen > 0)
   174f8:	8a6b      	ldrh	r3, [r5, #18]
   174fa:	2b00      	cmp	r3, #0
   174fc:	d0c1      	beq.n	17482 <hciCoreTxReady+0x9e>
        pConn->pNextTxFrag += aclLen;
   174fe:	686b      	ldr	r3, [r5, #4]
   17500:	443b      	add	r3, r7
   17502:	606b      	str	r3, [r5, #4]
  while (hciCoreCb.availBufs > 0)
   17504:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   17508:	e783      	b.n	17412 <hciCoreTxReady+0x2e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1750a:	4645      	mov	r5, r8
   1750c:	e7bd      	b.n	1748a <hciCoreTxReady+0xa6>
   1750e:	4635      	mov	r5, r6
   17510:	e7bb      	b.n	1748a <hciCoreTxReady+0xa6>
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   17512:	4650      	mov	r0, sl
        BYTES_TO_UINT16(len, &pData[2]);
   17514:	78d3      	ldrb	r3, [r2, #3]
   17516:	7891      	ldrb	r1, [r2, #2]
   17518:	eb01 2103 	add.w	r1, r1, r3, lsl #8
          hciCoreTxAclStart(pConn, len, pData);
   1751c:	b289      	uxth	r1, r1
   1751e:	f7ff feed 	bl	172fc <hciCoreTxAclStart>
   17522:	e7aa      	b.n	1747a <hciCoreTxReady+0x96>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17524:	4640      	mov	r0, r8
   17526:	e7f5      	b.n	17514 <hciCoreTxReady+0x130>
   17528:	4630      	mov	r0, r6
   1752a:	e7f3      	b.n	17514 <hciCoreTxReady+0x130>
   1752c:	10004ef8 	.word	0x10004ef8
   17530:	10004f30 	.word	0x10004f30
   17534:	10004f5c 	.word	0x10004f5c

00017538 <hciCoreConnClose>:
{
   17538:	b538      	push	{r3, r4, r5, lr}
    if (pConn->handle == handle)
   1753a:	4c12      	ldr	r4, [pc, #72]	; (17584 <hciCoreConnClose+0x4c>)
   1753c:	8a22      	ldrh	r2, [r4, #16]
   1753e:	4282      	cmp	r2, r0
   17540:	d00a      	beq.n	17558 <hciCoreConnClose+0x20>
   17542:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   17544:	4282      	cmp	r2, r0
   17546:	d006      	beq.n	17556 <hciCoreConnClose+0x1e>
   17548:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   1754c:	4282      	cmp	r2, r0
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1754e:	bf08      	it	eq
   17550:	3438      	addeq	r4, #56	; 0x38
    if (pConn->handle == handle)
   17552:	d001      	beq.n	17558 <hciCoreConnClose+0x20>
}
   17554:	bd38      	pop	{r3, r4, r5, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17556:	341c      	adds	r4, #28
      if (pConn->pTxAclPkt != NULL)
   17558:	6820      	ldr	r0, [r4, #0]
   1755a:	b118      	cbz	r0, 17564 <hciCoreConnClose+0x2c>
        WsfMsgFree(pConn->pTxAclPkt);
   1755c:	f006 fd24 	bl	1dfa8 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   17560:	2300      	movs	r3, #0
   17562:	6023      	str	r3, [r4, #0]
      if (pConn->pRxAclPkt != NULL)
   17564:	68a0      	ldr	r0, [r4, #8]
      pConn->fragmenting = FALSE;
   17566:	2500      	movs	r5, #0
   17568:	75a5      	strb	r5, [r4, #22]
      if (pConn->pRxAclPkt != NULL)
   1756a:	b110      	cbz	r0, 17572 <hciCoreConnClose+0x3a>
        WsfMsgFree(pConn->pRxAclPkt);
   1756c:	f006 fd1c 	bl	1dfa8 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   17570:	60a5      	str	r5, [r4, #8]
      pConn->handle = HCI_HANDLE_NONE;
   17572:	f64f 73ff 	movw	r3, #65535	; 0xffff
      hciCoreTxReady(pConn->outBufs);
   17576:	7e60      	ldrb	r0, [r4, #25]
      pConn->handle = HCI_HANDLE_NONE;
   17578:	8223      	strh	r3, [r4, #16]
}
   1757a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      hciCoreTxReady(pConn->outBufs);
   1757e:	f7ff bf31 	b.w	173e4 <hciCoreTxReady>
   17582:	bf00      	nop
   17584:	10004ef8 	.word	0x10004ef8

00017588 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   17588:	b538      	push	{r3, r4, r5, lr}
  /* if fragmenting */
  if (pConn->fragmenting)
   1758a:	7d83      	ldrb	r3, [r0, #22]
   1758c:	b11b      	cbz	r3, 17596 <hciCoreTxAclComplete+0xe>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   1758e:	8a45      	ldrh	r5, [r0, #18]
   17590:	4604      	mov	r4, r0
   17592:	b13d      	cbz	r5, 175a4 <hciCoreTxAclComplete+0x1c>
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   17594:	bd38      	pop	{r3, r4, r5, pc}
  else if (pData != NULL)
   17596:	2900      	cmp	r1, #0
   17598:	d0fc      	beq.n	17594 <hciCoreTxAclComplete+0xc>
}
   1759a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgFree(pData);
   1759e:	4608      	mov	r0, r1
   175a0:	f006 bd02 	b.w	1dfa8 <WsfMsgFree>
      WsfMsgFree(pConn->pTxAclPkt);
   175a4:	6800      	ldr	r0, [r0, #0]
   175a6:	f006 fcff 	bl	1dfa8 <WsfMsgFree>
      pConn->fragmenting = FALSE;
   175aa:	75a5      	strb	r5, [r4, #22]
      pConn->pTxAclPkt = NULL;
   175ac:	6025      	str	r5, [r4, #0]
}
   175ae:	bd38      	pop	{r3, r4, r5, pc}

000175b0 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   175b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pConn->handle == handle)
   175b4:	4e4b      	ldr	r6, [pc, #300]	; (176e4 <hciCoreAclReassembly+0x134>)
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;

  BYTES_TO_UINT16(handle, pData);
   175b6:	7841      	ldrb	r1, [r0, #1]
   175b8:	7804      	ldrb	r4, [r0, #0]
  pbf = handle & HCI_PB_FLAG_MASK;
  handle &= HCI_HANDLE_MASK;
  BYTES_TO_UINT16(aclLen, &pData[2]);
   175ba:	78c3      	ldrb	r3, [r0, #3]
   175bc:	7882      	ldrb	r2, [r0, #2]
  BYTES_TO_UINT16(handle, pData);
   175be:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    if (pConn->handle == handle)
   175c2:	8a31      	ldrh	r1, [r6, #16]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   175c4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  pbf = handle & HCI_PB_FLAG_MASK;
   175c8:	f404 5340 	and.w	r3, r4, #12288	; 0x3000
  handle &= HCI_HANDLE_MASK;
   175cc:	f3c4 040b 	ubfx	r4, r4, #0, #12
    if (pConn->handle == handle)
   175d0:	42a1      	cmp	r1, r4
{
   175d2:	4605      	mov	r5, r0
  BYTES_TO_UINT16(aclLen, &pData[2]);
   175d4:	b297      	uxth	r7, r2
    if (pConn->handle == handle)
   175d6:	d00d      	beq.n	175f4 <hciCoreAclReassembly+0x44>
   175d8:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
   175da:	42a2      	cmp	r2, r4
   175dc:	d049      	beq.n	17672 <hciCoreAclReassembly+0xc2>
   175de:	f8b6 2048 	ldrh.w	r2, [r6, #72]	; 0x48
   175e2:	42a2      	cmp	r2, r4
   175e4:	d07a      	beq.n	176dc <hciCoreAclReassembly+0x12c>
  uint8_t       *pDataRtn = NULL;
   175e6:	2400      	movs	r4, #0
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
  {
    WsfMsgFree(pData);
   175e8:	4628      	mov	r0, r5
   175ea:	f006 fcdd 	bl	1dfa8 <WsfMsgFree>
  }

  return pDataRtn;
}
   175ee:	4620      	mov	r0, r4
   175f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   175f4:	46b0      	mov	r8, r6
    if (pbf == HCI_PB_START_C2H)
   175f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   175fa:	d022      	beq.n	17642 <hciCoreAclReassembly+0x92>
    else if (pbf == HCI_PB_CONTINUE)
   175fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   17600:	d1f1      	bne.n	175e6 <hciCoreAclReassembly+0x36>
      if (pConn->pRxAclPkt != NULL)
   17602:	f8d8 3008 	ldr.w	r3, [r8, #8]
   17606:	2b00      	cmp	r3, #0
   17608:	d0ed      	beq.n	175e6 <hciCoreAclReassembly+0x36>
        if (aclLen <= pConn->rxAclRemLen)
   1760a:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   1760e:	42bb      	cmp	r3, r7
   17610:	d3e9      	bcc.n	175e6 <hciCoreAclReassembly+0x36>
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   17612:	463a      	mov	r2, r7
   17614:	f8d8 000c 	ldr.w	r0, [r8, #12]
   17618:	1d29      	adds	r1, r5, #4
   1761a:	f7f4 fd71 	bl	c100 <memcpy>
          pConn->rxAclRemLen -= aclLen;
   1761e:	f8b8 3014 	ldrh.w	r3, [r8, #20]
          pConn->pNextRxFrag += aclLen;
   17622:	f8d8 200c 	ldr.w	r2, [r8, #12]
          pConn->rxAclRemLen -= aclLen;
   17626:	1bdb      	subs	r3, r3, r7
          pConn->pNextRxFrag += aclLen;
   17628:	443a      	add	r2, r7
          pConn->rxAclRemLen -= aclLen;
   1762a:	b29b      	uxth	r3, r3
          pConn->pNextRxFrag += aclLen;
   1762c:	f8c8 200c 	str.w	r2, [r8, #12]
          pConn->rxAclRemLen -= aclLen;
   17630:	f8a8 3014 	strh.w	r3, [r8, #20]
          if (pConn->rxAclRemLen == 0)
   17634:	2b00      	cmp	r3, #0
   17636:	d1d6      	bne.n	175e6 <hciCoreAclReassembly+0x36>
            pDataRtn = pConn->pRxAclPkt;
   17638:	f8d8 4008 	ldr.w	r4, [r8, #8]
            pConn->pRxAclPkt = NULL;
   1763c:	f8c8 3008 	str.w	r3, [r8, #8]
  if (freeData)
   17640:	e7d2      	b.n	175e8 <hciCoreAclReassembly+0x38>
      if (pConn->pRxAclPkt != NULL)
   17642:	f8d8 0008 	ldr.w	r0, [r8, #8]
   17646:	b120      	cbz	r0, 17652 <hciCoreAclReassembly+0xa2>
        WsfMsgFree(pConn->pRxAclPkt);
   17648:	f006 fcae 	bl	1dfa8 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   1764c:	2300      	movs	r3, #0
   1764e:	f8c8 3008 	str.w	r3, [r8, #8]
      if (aclLen >= L2C_HDR_LEN)
   17652:	2f03      	cmp	r7, #3
   17654:	d9c7      	bls.n	175e6 <hciCoreAclReassembly+0x36>
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   17656:	f8b6 2070 	ldrh.w	r2, [r6, #112]	; 0x70
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   1765a:	796b      	ldrb	r3, [r5, #5]
   1765c:	792e      	ldrb	r6, [r5, #4]
   1765e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
   17662:	b2b6      	uxth	r6, r6
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   17664:	1cf3      	adds	r3, r6, #3
   17666:	4293      	cmp	r3, r2
   17668:	dabd      	bge.n	175e6 <hciCoreAclReassembly+0x36>
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   1766a:	42bb      	cmp	r3, r7
   1766c:	da04      	bge.n	17678 <hciCoreAclReassembly+0xc8>
   1766e:	462c      	mov	r4, r5
  return pDataRtn;
   17670:	e7bd      	b.n	175ee <hciCoreAclReassembly+0x3e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17672:	f106 081c 	add.w	r8, r6, #28
   17676:	e7be      	b.n	175f6 <hciCoreAclReassembly+0x46>
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   17678:	f106 0008 	add.w	r0, r6, #8
   1767c:	b280      	uxth	r0, r0
   1767e:	2100      	movs	r1, #0
   17680:	f006 fc80 	bl	1df84 <WsfMsgDataAlloc>
   17684:	f8c8 0008 	str.w	r0, [r8, #8]
   17688:	2800      	cmp	r0, #0
   1768a:	d0ac      	beq.n	175e6 <hciCoreAclReassembly+0x36>
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   1768c:	1c43      	adds	r3, r0, #1
   1768e:	f8c8 300c 	str.w	r3, [r8, #12]
   17692:	7004      	strb	r4, [r0, #0]
   17694:	f8d8 300c 	ldr.w	r3, [r8, #12]
   17698:	0a24      	lsrs	r4, r4, #8
   1769a:	1c5a      	adds	r2, r3, #1
   1769c:	f8c8 200c 	str.w	r2, [r8, #12]
   176a0:	701c      	strb	r4, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   176a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   176a6:	3604      	adds	r6, #4
   176a8:	1c59      	adds	r1, r3, #1
   176aa:	f8c8 100c 	str.w	r1, [r8, #12]
   176ae:	701e      	strb	r6, [r3, #0]
   176b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   176b4:	1230      	asrs	r0, r6, #8
   176b6:	1c5c      	adds	r4, r3, #1
   176b8:	f8c8 400c 	str.w	r4, [r8, #12]
   176bc:	7018      	strb	r0, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   176be:	f8d8 000c 	ldr.w	r0, [r8, #12]
   176c2:	463a      	mov	r2, r7
   176c4:	1d29      	adds	r1, r5, #4
   176c6:	f7f4 fd1b 	bl	c100 <memcpy>
            pConn->pNextRxFrag += aclLen;
   176ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   176ce:	1bf6      	subs	r6, r6, r7
            pConn->pNextRxFrag += aclLen;
   176d0:	443b      	add	r3, r7
   176d2:	f8c8 300c 	str.w	r3, [r8, #12]
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   176d6:	f8a8 6014 	strh.w	r6, [r8, #20]
   176da:	e784      	b.n	175e6 <hciCoreAclReassembly+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   176dc:	f106 0838 	add.w	r8, r6, #56	; 0x38
   176e0:	e789      	b.n	175f6 <hciCoreAclReassembly+0x46>
   176e2:	bf00      	nop
   176e4:	10004ef8 	.word	0x10004ef8

000176e8 <HciCoreInit>:
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;

  #if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    if (APOLLO3_GE_B0)
   176e8:	4a10      	ldr	r2, [pc, #64]	; (1772c <HciCoreInit+0x44>)
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   176ea:	4b11      	ldr	r3, [pc, #68]	; (17730 <HciCoreInit+0x48>)
    if (APOLLO3_GE_B0)
   176ec:	68d2      	ldr	r2, [r2, #12]
   176ee:	b2d2      	uxtb	r2, r2
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   176f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    if (APOLLO3_GE_B0)
   176f4:	2a20      	cmp	r2, #32
    {
      // B0 has only less internal ACL buffers
      hciCoreCb.aclQueueHi--;
   176f6:	bf88      	it	hi
   176f8:	f44f 7201 	movhi.w	r2, #516	; 0x204
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   176fc:	8219      	strh	r1, [r3, #16]
   176fe:	8599      	strh	r1, [r3, #44]	; 0x2c
   17700:	f8a3 1048 	strh.w	r1, [r3, #72]	; 0x48
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   17704:	f240 3105 	movw	r1, #773	; 0x305
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   17708:	f04f 0000 	mov.w	r0, #0
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   1770c:	f04f 0c1b 	mov.w	ip, #27
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   17710:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
      hciCoreCb.aclQueueHi--;
   17714:	bf88      	it	hi
   17716:	f8a3 2074 	strhhi.w	r2, [r3, #116]	; 0x74
      hciCoreCb.aclQueueLo--;
    }
  #endif
  hciCoreCb.extResetSeq = NULL;
   1771a:	2200      	movs	r2, #0
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   1771c:	e9c3 0019 	strd	r0, r0, [r3, #100]	; 0x64
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   17720:	f8a3 c070 	strh.w	ip, [r3, #112]	; 0x70
  hciCoreCb.extResetSeq = NULL;
   17724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  hciCoreInit();
   17728:	f000 b8a4 	b.w	17874 <hciCoreInit>
   1772c:	40020000 	.word	0x40020000
   17730:	10004ef8 	.word	0x10004ef8

00017734 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   17734:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   17736:	4d1e      	ldr	r5, [pc, #120]	; (177b0 <HciResetSequence+0x7c>)
{
   17738:	b083      	sub	sp, #12
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1773a:	e001      	b.n	17740 <HciResetSequence+0xc>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   1773c:	f006 fc34 	bl	1dfa8 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   17740:	f10d 0107 	add.w	r1, sp, #7
   17744:	4628      	mov	r0, r5
   17746:	f006 fc4b 	bl	1dfe0 <WsfMsgDeq>
   1774a:	4604      	mov	r4, r0
   1774c:	2800      	cmp	r0, #0
   1774e:	d1f5      	bne.n	1773c <HciResetSequence+0x8>
   17750:	4d18      	ldr	r5, [pc, #96]	; (177b4 <HciResetSequence+0x80>)
      WsfMsgFree(pConn->pRxAclPkt);
      pConn->pRxAclPkt = NULL;
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   17752:	f64f 77ff 	movw	r7, #65535	; 0xffff
   17756:	f105 0654 	add.w	r6, r5, #84	; 0x54
    if (pConn->pTxAclPkt != NULL)
   1775a:	f855 0c1c 	ldr.w	r0, [r5, #-28]
   1775e:	b118      	cbz	r0, 17768 <HciResetSequence+0x34>
      WsfMsgFree(pConn->pTxAclPkt);
   17760:	f006 fc22 	bl	1dfa8 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   17764:	f845 4c1c 	str.w	r4, [r5, #-28]
    if (pConn->pRxAclPkt != NULL)
   17768:	f855 0c14 	ldr.w	r0, [r5, #-20]
    pConn->fragmenting = FALSE;
   1776c:	f805 4c06 	strb.w	r4, [r5, #-6]
    if (pConn->pRxAclPkt != NULL)
   17770:	b198      	cbz	r0, 1779a <HciResetSequence+0x66>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17772:	351c      	adds	r5, #28
      WsfMsgFree(pConn->pRxAclPkt);
   17774:	f006 fc18 	bl	1dfa8 <WsfMsgFree>

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   17778:	f815 0c1f 	ldrb.w	r0, [r5, #-31]
      pConn->pRxAclPkt = NULL;
   1777c:	f845 4c30 	str.w	r4, [r5, #-48]
    pConn->handle = HCI_HANDLE_NONE;
   17780:	f825 7c28 	strh.w	r7, [r5, #-40]
    hciCoreTxReady(pConn->outBufs);
   17784:	f7ff fe2e 	bl	173e4 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   17788:	42ae      	cmp	r6, r5
   1778a:	d1e6      	bne.n	1775a <HciResetSequence+0x26>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   1778c:	4b08      	ldr	r3, [pc, #32]	; (177b0 <HciResetSequence+0x7c>)
   1778e:	2201      	movs	r2, #1
   17790:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   17792:	f001 ff01 	bl	19598 <hciCoreResetStart>
}
   17796:	b003      	add	sp, #12
   17798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hciCoreTxReady(pConn->outBufs);
   1779a:	f815 0c03 	ldrb.w	r0, [r5, #-3]
    pConn->handle = HCI_HANDLE_NONE;
   1779e:	f825 7c0c 	strh.w	r7, [r5, #-12]
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   177a2:	351c      	adds	r5, #28
    hciCoreTxReady(pConn->outBufs);
   177a4:	f7ff fe1e 	bl	173e4 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   177a8:	42b5      	cmp	r5, r6
   177aa:	d1d6      	bne.n	1775a <HciResetSequence+0x26>
   177ac:	e7ee      	b.n	1778c <HciResetSequence+0x58>
   177ae:	bf00      	nop
   177b0:	10004324 	.word	0x10004324
   177b4:	10004f14 	.word	0x10004f14

000177b8 <HciSetMaxRxAclLen>:
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
  hciCoreCb.maxRxAclLen = len;
   177b8:	4b01      	ldr	r3, [pc, #4]	; (177c0 <HciSetMaxRxAclLen+0x8>)
   177ba:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
}
   177be:	4770      	bx	lr
   177c0:	10004ef8 	.word	0x10004ef8

000177c4 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   177c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pConn->handle == handle)
   177c8:	4f27      	ldr	r7, [pc, #156]	; (17868 <HciSendAclData+0xa4>)
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   177ca:	7843      	ldrb	r3, [r0, #1]
   177cc:	7805      	ldrb	r5, [r0, #0]
   177ce:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    if (pConn->handle == handle)
   177d2:	8a3b      	ldrh	r3, [r7, #16]
  BYTES_TO_UINT16(handle, pData);
   177d4:	b2ad      	uxth	r5, r5
    if (pConn->handle == handle)
   177d6:	42ab      	cmp	r3, r5
{
   177d8:	4680      	mov	r8, r0
    if (pConn->handle == handle)
   177da:	d00a      	beq.n	177f2 <HciSendAclData+0x2e>
   177dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   177de:	42ab      	cmp	r3, r5
   177e0:	d03c      	beq.n	1785c <HciSendAclData+0x98>
   177e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
   177e6:	42ab      	cmp	r3, r5
   177e8:	d03b      	beq.n	17862 <HciSendAclData+0x9e>
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   177ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pData);
   177ee:	f006 bbdb 	b.w	1dfa8 <WsfMsgFree>
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   177f2:	463e      	mov	r6, r7
  BYTES_TO_UINT16(len, &pData[2]);
   177f4:	f898 3003 	ldrb.w	r3, [r8, #3]
   177f8:	f898 4002 	ldrb.w	r4, [r8, #2]
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   177fc:	481b      	ldr	r0, [pc, #108]	; (1786c <HciSendAclData+0xa8>)
  BYTES_TO_UINT16(len, &pData[2]);
   177fe:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   17802:	b2a4      	uxth	r4, r4
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   17804:	f006 fdec 	bl	1e3e0 <WsfQueueEmpty>
   17808:	b110      	cbz	r0, 17810 <HciSendAclData+0x4c>
   1780a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
   1780e:	b9fb      	cbnz	r3, 17850 <HciSendAclData+0x8c>
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   17810:	4816      	ldr	r0, [pc, #88]	; (1786c <HciSendAclData+0xa8>)
   17812:	4642      	mov	r2, r8
   17814:	2100      	movs	r1, #0
   17816:	f006 fbdd 	bl	1dfd4 <WsfMsgEnq>
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   1781a:	f000 f8c3 	bl	179a4 <HciGetBufSize>
   1781e:	7e32      	ldrb	r2, [r6, #24]
   17820:	3c01      	subs	r4, #1
   17822:	fb94 f4f0 	sdiv	r4, r4, r0
   17826:	1c63      	adds	r3, r4, #1
   17828:	4413      	add	r3, r2
   1782a:	b2db      	uxtb	r3, r3
   1782c:	7633      	strb	r3, [r6, #24]
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   1782e:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
   17832:	429a      	cmp	r2, r3
   17834:	d901      	bls.n	1783a <HciSendAclData+0x76>
}
   17836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   1783a:	7df3      	ldrb	r3, [r6, #23]
   1783c:	2b00      	cmp	r3, #0
   1783e:	d1fa      	bne.n	17836 <HciSendAclData+0x72>
      (*hciCb.flowCback)(handle, TRUE);
   17840:	4b0b      	ldr	r3, [pc, #44]	; (17870 <HciSendAclData+0xac>)
      pConn->flowDisabled = TRUE;
   17842:	2101      	movs	r1, #1
   17844:	75f1      	strb	r1, [r6, #23]
      (*hciCb.flowCback)(handle, TRUE);
   17846:	4628      	mov	r0, r5
   17848:	695b      	ldr	r3, [r3, #20]
}
   1784a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*hciCb.flowCback)(handle, TRUE);
   1784e:	4718      	bx	r3
      hciCoreTxAclStart(pConn, len, pData);
   17850:	4642      	mov	r2, r8
   17852:	4621      	mov	r1, r4
   17854:	4630      	mov	r0, r6
   17856:	f7ff fd51 	bl	172fc <hciCoreTxAclStart>
   1785a:	e7de      	b.n	1781a <HciSendAclData+0x56>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1785c:	f107 061c 	add.w	r6, r7, #28
   17860:	e7c8      	b.n	177f4 <HciSendAclData+0x30>
   17862:	f107 0638 	add.w	r6, r7, #56	; 0x38
   17866:	e7c5      	b.n	177f4 <HciSendAclData+0x30>
   17868:	10004ef8 	.word	0x10004ef8
   1786c:	10004f5c 	.word	0x10004f5c
   17870:	10004324 	.word	0x10004324

00017874 <hciCoreInit>:
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
  hciCmdInit();
   17874:	f7fe baaa 	b.w	15dcc <hciCmdInit>

00017878 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   17878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t        handle;
  uint8_t         availBufs = 0;
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   1787c:	f890 a000 	ldrb.w	sl, [r0]

  /* for each handle in event */
  while (numHandles-- > 0)
   17880:	f1ba 0f00 	cmp.w	sl, #0
   17884:	d03b      	beq.n	178fe <hciCoreNumCmplPkts+0x86>
   17886:	f10a 36ff 	add.w	r6, sl, #4294967295
   1788a:	b2f6      	uxtb	r6, r6
   1788c:	f100 0309 	add.w	r3, r0, #9
  uint8_t         availBufs = 0;
   17890:	f04f 0a00 	mov.w	sl, #0

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   17894:	4f1c      	ldr	r7, [pc, #112]	; (17908 <hciCoreNumCmplPkts+0x90>)
      {
        pConn->flowDisabled = FALSE;
        (*hciCb.flowCback)(handle, FALSE);
   17896:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1790c <hciCoreNumCmplPkts+0x94>
   1789a:	1d44      	adds	r4, r0, #5
   1789c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        pConn->flowDisabled = FALSE;
   178a0:	46d0      	mov	r8, sl
    BSTREAM_TO_UINT16(handle, pMsg);
   178a2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   178a6:	f814 5c04 	ldrb.w	r5, [r4, #-4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   178aa:	f814 bc02 	ldrb.w	fp, [r4, #-2]
    BSTREAM_TO_UINT16(handle, pMsg);
   178ae:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   178b2:	b2ad      	uxth	r5, r5
    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   178b4:	4628      	mov	r0, r5
   178b6:	f7ff fcf1 	bl	1729c <hciCoreConnByHandle>
  while (numHandles-- > 0)
   178ba:	3404      	adds	r4, #4
      pConn->outBufs -= (uint8_t) bufs;
   178bc:	465a      	mov	r2, fp
      availBufs += (uint8_t) bufs;
   178be:	eb0b 0c0a 	add.w	ip, fp, sl
    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   178c2:	4603      	mov	r3, r0
   178c4:	b1c8      	cbz	r0, 178fa <hciCoreNumCmplPkts+0x82>
      pConn->queuedBufs -= (uint8_t) bufs;
   178c6:	7e00      	ldrb	r0, [r0, #24]
      pConn->outBufs -= (uint8_t) bufs;
   178c8:	7e59      	ldrb	r1, [r3, #25]
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   178ca:	f893 e017 	ldrb.w	lr, [r3, #23]
      pConn->queuedBufs -= (uint8_t) bufs;
   178ce:	1a80      	subs	r0, r0, r2
   178d0:	b2c0      	uxtb	r0, r0
      pConn->outBufs -= (uint8_t) bufs;
   178d2:	1a8a      	subs	r2, r1, r2
   178d4:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs -= (uint8_t) bufs;
   178d6:	7618      	strb	r0, [r3, #24]
      availBufs += (uint8_t) bufs;
   178d8:	fa5f fa8c 	uxtb.w	sl, ip
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   178dc:	f1be 0f00 	cmp.w	lr, #0
   178e0:	d00b      	beq.n	178fa <hciCoreNumCmplPkts+0x82>
   178e2:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
   178e6:	4282      	cmp	r2, r0
        (*hciCb.flowCback)(handle, FALSE);
   178e8:	f04f 0100 	mov.w	r1, #0
   178ec:	4628      	mov	r0, r5
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   178ee:	d304      	bcc.n	178fa <hciCoreNumCmplPkts+0x82>
        pConn->flowDisabled = FALSE;
   178f0:	f883 8017 	strb.w	r8, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   178f4:	f8d9 3014 	ldr.w	r3, [r9, #20]
   178f8:	4798      	blx	r3
  while (numHandles-- > 0)
   178fa:	42a6      	cmp	r6, r4
   178fc:	d1d1      	bne.n	178a2 <hciCoreNumCmplPkts+0x2a>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   178fe:	4650      	mov	r0, sl
}
   17900:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciCoreTxReady(availBufs);
   17904:	f7ff bd6e 	b.w	173e4 <hciCoreTxReady>
   17908:	10004ef8 	.word	0x10004ef8
   1790c:	10004324 	.word	0x10004324

00017910 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   17910:	b510      	push	{r4, lr}
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   17912:	4c06      	ldr	r4, [pc, #24]	; (1792c <hciCoreRecv+0x1c>)
{
   17914:	4603      	mov	r3, r0
   17916:	460a      	mov	r2, r1
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   17918:	4620      	mov	r0, r4
   1791a:	4619      	mov	r1, r3
   1791c:	f006 fb5a 	bl	1dfd4 <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   17920:	7e20      	ldrb	r0, [r4, #24]
   17922:	2101      	movs	r1, #1
}
   17924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   17928:	f006 bb8c 	b.w	1e044 <WsfSetEvent>
   1792c:	10004324 	.word	0x10004324

00017930 <HciCoreHandler>:
{
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   17930:	b119      	cbz	r1, 1793a <HciCoreHandler+0xa>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   17932:	788b      	ldrb	r3, [r1, #2]
   17934:	2b01      	cmp	r3, #1
   17936:	d028      	beq.n	1798a <HciCoreHandler+0x5a>
   17938:	4770      	bx	lr
    {
      hciCmdTimeout(pMsg);
    }
  }
  /* Handle events */
  else if (event & HCI_EVT_RX)
   1793a:	07c3      	lsls	r3, r0, #31
   1793c:	d5fc      	bpl.n	17938 <HciCoreHandler+0x8>
{
   1793e:	b530      	push	{r4, r5, lr}
   17940:	4d15      	ldr	r5, [pc, #84]	; (17998 <HciCoreHandler+0x68>)
   17942:	b083      	sub	sp, #12
  {
    /* Process rx queue */
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   17944:	f10d 0107 	add.w	r1, sp, #7
   17948:	4628      	mov	r0, r5
   1794a:	f006 fb49 	bl	1dfe0 <WsfMsgDeq>
   1794e:	4604      	mov	r4, r0
   17950:	b188      	cbz	r0, 17976 <HciCoreHandler+0x46>
    {
      /* Handle incoming HCI events */
      if (handlerId == HCI_EVT_TYPE)
   17952:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17956:	2b04      	cmp	r3, #4
   17958:	d00f      	beq.n	1797a <HciCoreHandler+0x4a>
      }
      /* Handle ACL data */
      else
      {
        /* Reassemble */
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   1795a:	f7ff fe29 	bl	175b0 <hciCoreAclReassembly>
   1795e:	2800      	cmp	r0, #0
   17960:	d0f0      	beq.n	17944 <HciCoreHandler+0x14>
        {
          /* Call ACL callback; client will free buffer */
          hciCb.aclCback(pBuf);
   17962:	692b      	ldr	r3, [r5, #16]
   17964:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   17966:	f10d 0107 	add.w	r1, sp, #7
   1796a:	4628      	mov	r0, r5
   1796c:	f006 fb38 	bl	1dfe0 <WsfMsgDeq>
   17970:	4604      	mov	r4, r0
   17972:	2800      	cmp	r0, #0
   17974:	d1ed      	bne.n	17952 <HciCoreHandler+0x22>
        }
      }
    }
  }
}
   17976:	b003      	add	sp, #12
   17978:	bd30      	pop	{r4, r5, pc}
        hciEvtProcessMsg(pBuf);
   1797a:	f000 fccb 	bl	18314 <hciEvtProcessMsg>
        if (hciCb.resetting)
   1797e:	7e6b      	ldrb	r3, [r5, #25]
   17980:	b933      	cbnz	r3, 17990 <HciCoreHandler+0x60>
        WsfMsgFree(pBuf);
   17982:	4620      	mov	r0, r4
   17984:	f006 fb10 	bl	1dfa8 <WsfMsgFree>
   17988:	e7dc      	b.n	17944 <HciCoreHandler+0x14>
      hciCmdTimeout(pMsg);
   1798a:	4608      	mov	r0, r1
   1798c:	f7fe ba2e 	b.w	15dec <hciCmdTimeout>
          hciCoreResetSequence(pBuf);
   17990:	4620      	mov	r0, r4
   17992:	f001 fe09 	bl	195a8 <hciCoreResetSequence>
   17996:	e7f4      	b.n	17982 <HciCoreHandler+0x52>
   17998:	10004324 	.word	0x10004324

0001799c <HciGetBdAddr>:
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
  return hciCoreCb.bdAddr;
}
   1799c:	4800      	ldr	r0, [pc, #0]	; (179a0 <HciGetBdAddr+0x4>)
   1799e:	4770      	bx	lr
   179a0:	10004f54 	.word	0x10004f54

000179a4 <HciGetBufSize>:
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
  return hciCoreCb.bufSize;
   179a4:	4b01      	ldr	r3, [pc, #4]	; (179ac <HciGetBufSize+0x8>)
}
   179a6:	f8b3 0072 	ldrh.w	r0, [r3, #114]	; 0x72
   179aa:	4770      	bx	lr
   179ac:	10004ef8 	.word	0x10004ef8

000179b0 <HciGetLeSupFeat>:
/*************************************************************************************************/
uint32_t HciGetLeSupFeat(void)
{
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   179b0:	4b02      	ldr	r3, [pc, #8]	; (179bc <HciGetLeSupFeat+0xc>)
   179b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
}
   179b4:	f020 0002 	bic.w	r0, r0, #2
   179b8:	4770      	bx	lr
   179ba:	bf00      	nop
   179bc:	10004ef8 	.word	0x10004ef8

000179c0 <HciGetMaxRxAclLen>:
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
  return hciCoreCb.maxRxAclLen;
   179c0:	4b01      	ldr	r3, [pc, #4]	; (179c8 <HciGetMaxRxAclLen+0x8>)
}
   179c2:	f8b3 0070 	ldrh.w	r0, [r3, #112]	; 0x70
   179c6:	4770      	bx	lr
   179c8:	10004ef8 	.word	0x10004ef8

000179cc <HciLlPrivacySupported>:
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   179cc:	4b03      	ldr	r3, [pc, #12]	; (179dc <HciLlPrivacySupported+0x10>)
   179ce:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
}
   179d2:	3800      	subs	r0, #0
   179d4:	bf18      	it	ne
   179d6:	2001      	movne	r0, #1
   179d8:	4770      	bx	lr
   179da:	bf00      	nop
   179dc:	10004ef8 	.word	0x10004ef8

000179e0 <hciEvtParseDisconnectCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   179e0:	780a      	ldrb	r2, [r1, #0]
   179e2:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   179e4:	f891 c002 	ldrb.w	ip, [r1, #2]
   179e8:	784b      	ldrb	r3, [r1, #1]
   179ea:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   179ee:	b29b      	uxth	r3, r3
   179f0:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   179f2:	78c9      	ldrb	r1, [r1, #3]
   179f4:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   179f6:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   179f8:	70c2      	strb	r2, [r0, #3]
}
   179fa:	4770      	bx	lr

000179fc <hciEvtParseLeConnUpdateCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   179fc:	f891 c000 	ldrb.w	ip, [r1]
   17a00:	f880 c004 	strb.w	ip, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   17a04:	788a      	ldrb	r2, [r1, #2]
   17a06:	784b      	ldrb	r3, [r1, #1]
   17a08:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17a0c:	b29b      	uxth	r3, r3
   17a0e:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   17a10:	78ca      	ldrb	r2, [r1, #3]
{
   17a12:	b500      	push	{lr}
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   17a14:	f891 e004 	ldrb.w	lr, [r1, #4]
   17a18:	eb02 220e 	add.w	r2, r2, lr, lsl #8
   17a1c:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   17a1e:	f891 e006 	ldrb.w	lr, [r1, #6]
   17a22:	794a      	ldrb	r2, [r1, #5]
   17a24:	eb02 220e 	add.w	r2, r2, lr, lsl #8
   17a28:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   17a2a:	f891 e008 	ldrb.w	lr, [r1, #8]
   17a2e:	79ca      	ldrb	r2, [r1, #7]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   17a30:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   17a32:	eb02 230e 	add.w	r3, r2, lr, lsl #8
   17a36:	8183      	strh	r3, [r0, #12]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   17a38:	f880 c003 	strb.w	ip, [r0, #3]
}
   17a3c:	f85d fb04 	ldr.w	pc, [sp], #4

00017a40 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   17a40:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   17a42:	f04f 0300 	mov.w	r3, #0
   17a46:	f362 0307 	bfi	r3, r2, #0, #8
   17a4a:	f362 230f 	bfi	r3, r2, #8, #8
   17a4e:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   17a52:	4770      	bx	lr

00017a54 <hciEvtParseReadRssiCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   17a54:	780a      	ldrb	r2, [r1, #0]
   17a56:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   17a58:	f891 c002 	ldrb.w	ip, [r1, #2]
   17a5c:	784b      	ldrb	r3, [r1, #1]
   17a5e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17a62:	b29b      	uxth	r3, r3
   17a64:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   17a66:	78c9      	ldrb	r1, [r1, #3]
   17a68:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   17a6a:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   17a6c:	70c2      	strb	r2, [r0, #3]
}
   17a6e:	4770      	bx	lr

00017a70 <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   17a70:	780b      	ldrb	r3, [r1, #0]
   17a72:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   17a74:	784a      	ldrb	r2, [r1, #1]
   17a76:	7142      	strb	r2, [r0, #5]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   17a78:	78c9      	ldrb	r1, [r1, #3]
   17a7a:	7181      	strb	r1, [r0, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   17a7c:	8002      	strh	r2, [r0, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   17a7e:	70c3      	strb	r3, [r0, #3]
}
   17a80:	4770      	bx	lr
   17a82:	bf00      	nop

00017a84 <hciEvtParseReadRemoteVerInfoCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   17a84:	f891 c000 	ldrb.w	ip, [r1]
   17a88:	f880 c004 	strb.w	ip, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   17a8c:	788a      	ldrb	r2, [r1, #2]
   17a8e:	784b      	ldrb	r3, [r1, #1]
   17a90:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17a94:	b29b      	uxth	r3, r3
   17a96:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   17a98:	78ca      	ldrb	r2, [r1, #3]
   17a9a:	7202      	strb	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   17a9c:	790a      	ldrb	r2, [r1, #4]
{
   17a9e:	b500      	push	{lr}
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   17aa0:	f891 e005 	ldrb.w	lr, [r1, #5]
   17aa4:	eb02 220e 	add.w	r2, r2, lr, lsl #8
   17aa8:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   17aaa:	f891 e007 	ldrb.w	lr, [r1, #7]
   17aae:	798a      	ldrb	r2, [r1, #6]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   17ab0:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   17ab2:	eb02 230e 	add.w	r3, r2, lr, lsl #8
   17ab6:	8183      	strh	r3, [r0, #12]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   17ab8:	f880 c003 	strb.w	ip, [r0, #3]
}
   17abc:	f85d fb04 	ldr.w	pc, [sp], #4

00017ac0 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   17ac0:	780a      	ldrb	r2, [r1, #0]
   17ac2:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   17ac4:	f891 c002 	ldrb.w	ip, [r1, #2]
   17ac8:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   17aca:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   17acc:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17ad0:	b29b      	uxth	r3, r3
   17ad2:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   17ad4:	8003      	strh	r3, [r0, #0]
}
   17ad6:	4770      	bx	lr

00017ad8 <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   17ad8:	780a      	ldrb	r2, [r1, #0]
   17ada:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   17adc:	f891 c002 	ldrb.w	ip, [r1, #2]
   17ae0:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   17ae2:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   17ae4:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17ae8:	b29b      	uxth	r3, r3
   17aea:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   17aec:	8003      	strh	r3, [r0, #0]
}
   17aee:	4770      	bx	lr

00017af0 <hciEvtParseEncKeyRefreshCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   17af0:	780a      	ldrb	r2, [r1, #0]
   17af2:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   17af4:	f891 c002 	ldrb.w	ip, [r1, #2]
   17af8:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   17afa:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   17afc:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17b00:	b29b      	uxth	r3, r3
   17b02:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   17b04:	8003      	strh	r3, [r0, #0]
}
   17b06:	4770      	bx	lr

00017b08 <hciEvtParseEncChange>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   17b08:	780a      	ldrb	r2, [r1, #0]
   17b0a:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   17b0c:	f891 c002 	ldrb.w	ip, [r1, #2]
   17b10:	784b      	ldrb	r3, [r1, #1]
   17b12:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17b16:	b29b      	uxth	r3, r3
   17b18:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   17b1a:	78c9      	ldrb	r1, [r1, #3]
   17b1c:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   17b1e:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   17b20:	70c2      	strb	r2, [r0, #3]
}
   17b22:	4770      	bx	lr

00017b24 <hciEvtParseVendorSpecCmdStatus>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   17b24:	784a      	ldrb	r2, [r1, #1]
   17b26:	780b      	ldrb	r3, [r1, #0]
   17b28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17b2c:	8083      	strh	r3, [r0, #4]
}
   17b2e:	4770      	bx	lr

00017b30 <hciEvtParseHwError>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   17b30:	780b      	ldrb	r3, [r1, #0]
   17b32:	7103      	strb	r3, [r0, #4]
}
   17b34:	4770      	bx	lr
   17b36:	bf00      	nop

00017b38 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   17b38:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   17b3a:	f04f 0300 	mov.w	r3, #0
   17b3e:	f362 0307 	bfi	r3, r2, #0, #8
   17b42:	f362 230f 	bfi	r3, r2, #8, #8
   17b46:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   17b4a:	4770      	bx	lr

00017b4c <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   17b4c:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   17b4e:	f04f 0300 	mov.w	r3, #0
   17b52:	f362 0307 	bfi	r3, r2, #0, #8
   17b56:	f362 230f 	bfi	r3, r2, #8, #8
   17b5a:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   17b5e:	4770      	bx	lr

00017b60 <hciEvtParseLeClearResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   17b60:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   17b62:	f04f 0300 	mov.w	r3, #0
   17b66:	f362 0307 	bfi	r3, r2, #0, #8
   17b6a:	f362 230f 	bfi	r3, r2, #8, #8
   17b6e:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   17b72:	4770      	bx	lr

00017b74 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   17b74:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   17b76:	f04f 0300 	mov.w	r3, #0
   17b7a:	f362 0307 	bfi	r3, r2, #0, #8
   17b7e:	f362 230f 	bfi	r3, r2, #8, #8
   17b82:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   17b86:	4770      	bx	lr

00017b88 <hciEvtParseRemConnParamRepCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   17b88:	780a      	ldrb	r2, [r1, #0]
   17b8a:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   17b8c:	f891 c002 	ldrb.w	ip, [r1, #2]
   17b90:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   17b92:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   17b94:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17b98:	b29b      	uxth	r3, r3
   17b9a:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   17b9c:	8003      	strh	r3, [r0, #0]
}
   17b9e:	4770      	bx	lr

00017ba0 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   17ba0:	780a      	ldrb	r2, [r1, #0]
   17ba2:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   17ba4:	f891 c002 	ldrb.w	ip, [r1, #2]
   17ba8:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   17baa:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   17bac:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17bb0:	b29b      	uxth	r3, r3
   17bb2:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   17bb4:	8003      	strh	r3, [r0, #0]
}
   17bb6:	4770      	bx	lr

00017bb8 <hciEvtParseReadDefDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   17bb8:	780a      	ldrb	r2, [r1, #0]
   17bba:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   17bbc:	f891 c002 	ldrb.w	ip, [r1, #2]
   17bc0:	784b      	ldrb	r3, [r1, #1]
   17bc2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17bc6:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   17bc8:	f891 c004 	ldrb.w	ip, [r1, #4]
   17bcc:	78cb      	ldrb	r3, [r1, #3]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   17bce:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   17bd0:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17bd4:	8103      	strh	r3, [r0, #8]
}
   17bd6:	4770      	bx	lr

00017bd8 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   17bd8:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   17bda:	f04f 0300 	mov.w	r3, #0
   17bde:	f362 0307 	bfi	r3, r2, #0, #8
   17be2:	f362 230f 	bfi	r3, r2, #8, #8
   17be6:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   17bea:	4770      	bx	lr

00017bec <hciEvtParseSetDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   17bec:	780a      	ldrb	r2, [r1, #0]
   17bee:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   17bf0:	f891 c002 	ldrb.w	ip, [r1, #2]
   17bf4:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   17bf6:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   17bf8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17bfc:	b29b      	uxth	r3, r3
   17bfe:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   17c00:	8003      	strh	r3, [r0, #0]
}
   17c02:	4770      	bx	lr

00017c04 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   17c04:	780a      	ldrb	r2, [r1, #0]
   17c06:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   17c08:	f891 c002 	ldrb.w	ip, [r1, #2]
   17c0c:	784b      	ldrb	r3, [r1, #1]
   17c0e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17c12:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   17c14:	f891 c004 	ldrb.w	ip, [r1, #4]
   17c18:	78cb      	ldrb	r3, [r1, #3]
   17c1a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17c1e:	8103      	strh	r3, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   17c20:	f891 c006 	ldrb.w	ip, [r1, #6]
   17c24:	794b      	ldrb	r3, [r1, #5]
   17c26:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17c2a:	8143      	strh	r3, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   17c2c:	f891 c008 	ldrb.w	ip, [r1, #8]
   17c30:	79cb      	ldrb	r3, [r1, #7]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   17c32:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   17c34:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17c38:	8183      	strh	r3, [r0, #12]
}
   17c3a:	4770      	bx	lr

00017c3c <hciEvtParseRemConnParamReq>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   17c3c:	784a      	ldrb	r2, [r1, #1]
   17c3e:	780b      	ldrb	r3, [r1, #0]
   17c40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17c44:	b29b      	uxth	r3, r3
   17c46:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   17c48:	f891 c003 	ldrb.w	ip, [r1, #3]
   17c4c:	788a      	ldrb	r2, [r1, #2]
   17c4e:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   17c52:	80c2      	strh	r2, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   17c54:	f891 c005 	ldrb.w	ip, [r1, #5]
   17c58:	790a      	ldrb	r2, [r1, #4]
   17c5a:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   17c5e:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   17c60:	f891 c007 	ldrb.w	ip, [r1, #7]
   17c64:	798a      	ldrb	r2, [r1, #6]
   17c66:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   17c6a:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   17c6c:	f891 c009 	ldrb.w	ip, [r1, #9]
   17c70:	7a0a      	ldrb	r2, [r1, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   17c72:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   17c74:	eb02 230c 	add.w	r3, r2, ip, lsl #8
   17c78:	8183      	strh	r3, [r0, #12]
}
   17c7a:	4770      	bx	lr

00017c7c <hciEvtParseDataLenChange>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   17c7c:	784a      	ldrb	r2, [r1, #1]
   17c7e:	780b      	ldrb	r3, [r1, #0]
   17c80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17c84:	b29b      	uxth	r3, r3
   17c86:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   17c88:	f891 c003 	ldrb.w	ip, [r1, #3]
   17c8c:	788a      	ldrb	r2, [r1, #2]
   17c8e:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   17c92:	80c2      	strh	r2, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   17c94:	f891 c005 	ldrb.w	ip, [r1, #5]
   17c98:	790a      	ldrb	r2, [r1, #4]
   17c9a:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   17c9e:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   17ca0:	f891 c007 	ldrb.w	ip, [r1, #7]
   17ca4:	798a      	ldrb	r2, [r1, #6]
   17ca6:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   17caa:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   17cac:	f891 c009 	ldrb.w	ip, [r1, #9]
   17cb0:	7a0a      	ldrb	r2, [r1, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   17cb2:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   17cb4:	eb02 230c 	add.w	r3, r2, ip, lsl #8
   17cb8:	8183      	strh	r3, [r0, #12]
}
   17cba:	4770      	bx	lr

00017cbc <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   17cbc:	780a      	ldrb	r2, [r1, #0]
   17cbe:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   17cc0:	f891 c002 	ldrb.w	ip, [r1, #2]
   17cc4:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   17cc6:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   17cc8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17ccc:	b29b      	uxth	r3, r3
   17cce:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   17cd0:	8003      	strh	r3, [r0, #0]
}
   17cd2:	4770      	bx	lr

00017cd4 <hciEvtParseAuthTimeoutExpiredEvt>:
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   17cd4:	784a      	ldrb	r2, [r1, #1]
   17cd6:	780b      	ldrb	r3, [r1, #0]
   17cd8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17cdc:	b29b      	uxth	r3, r3
   17cde:	8083      	strh	r3, [r0, #4]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   17ce0:	8003      	strh	r3, [r0, #0]
}
   17ce2:	4770      	bx	lr

00017ce4 <hciEvtParseReadPhyCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   17ce4:	780a      	ldrb	r2, [r1, #0]
   17ce6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   17ce8:	f891 c002 	ldrb.w	ip, [r1, #2]
   17cec:	784b      	ldrb	r3, [r1, #1]
   17cee:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17cf2:	b29b      	uxth	r3, r3
   17cf4:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   17cf6:	f891 c003 	ldrb.w	ip, [r1, #3]
   17cfa:	f880 c008 	strb.w	ip, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   17cfe:	7909      	ldrb	r1, [r1, #4]
   17d00:	7241      	strb	r1, [r0, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   17d02:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   17d04:	8003      	strh	r3, [r0, #0]
}
   17d06:	4770      	bx	lr

00017d08 <hciEvtParseSetDefPhyCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   17d08:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   17d0a:	f04f 0300 	mov.w	r3, #0
   17d0e:	f362 0307 	bfi	r3, r2, #0, #8
   17d12:	f362 230f 	bfi	r3, r2, #8, #8
   17d16:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   17d1a:	4770      	bx	lr

00017d1c <hciEvtParsePhyUpdateCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   17d1c:	780a      	ldrb	r2, [r1, #0]
   17d1e:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   17d20:	f891 c002 	ldrb.w	ip, [r1, #2]
   17d24:	784b      	ldrb	r3, [r1, #1]
   17d26:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17d2a:	b29b      	uxth	r3, r3
   17d2c:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   17d2e:	f891 c003 	ldrb.w	ip, [r1, #3]
   17d32:	f880 c008 	strb.w	ip, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   17d36:	7909      	ldrb	r1, [r1, #4]
   17d38:	7241      	strb	r1, [r0, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   17d3a:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   17d3c:	8003      	strh	r3, [r0, #0]
}
   17d3e:	4770      	bx	lr

00017d40 <hciEvtParseLeScanTimeout>:
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  /* empty */
}
   17d40:	4770      	bx	lr
   17d42:	bf00      	nop

00017d44 <hciEvtParseLeAdvSetTerm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   17d44:	780a      	ldrb	r2, [r1, #0]
   17d46:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   17d48:	784b      	ldrb	r3, [r1, #1]
   17d4a:	7143      	strb	r3, [r0, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   17d4c:	f891 c003 	ldrb.w	ip, [r1, #3]
   17d50:	788b      	ldrb	r3, [r1, #2]
   17d52:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17d56:	b29b      	uxth	r3, r3
   17d58:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   17d5a:	7909      	ldrb	r1, [r1, #4]
   17d5c:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   17d5e:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   17d60:	8003      	strh	r3, [r0, #0]
}
   17d62:	4770      	bx	lr

00017d64 <hciEvtParseLeCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   17d64:	780b      	ldrb	r3, [r1, #0]
   17d66:	70c3      	strb	r3, [r0, #3]
}
   17d68:	4770      	bx	lr
   17d6a:	bf00      	nop

00017d6c <hciEvtParseLeSetConnCteRcvParm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteRcvParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leSetConnCteRxParamsCmdCmpl.status, p);
   17d6c:	780a      	ldrb	r2, [r1, #0]
   17d6e:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteRxParamsCmdCmpl.handle, p);
   17d70:	f891 c002 	ldrb.w	ip, [r1, #2]
   17d74:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leSetConnCteRxParamsCmdCmpl.status;
   17d76:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteRxParamsCmdCmpl.handle, p);
   17d78:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17d7c:	b29b      	uxth	r3, r3
   17d7e:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leSetConnCteRxParamsCmdCmpl.handle;
   17d80:	8003      	strh	r3, [r0, #0]
}
   17d82:	4770      	bx	lr

00017d84 <hciEvtParseLeSetConnCteTxParm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteTxParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leSetConnCteTxParamsCmdCmpl.status, p);
   17d84:	780a      	ldrb	r2, [r1, #0]
   17d86:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteTxParamsCmdCmpl.handle, p);
   17d88:	f891 c002 	ldrb.w	ip, [r1, #2]
   17d8c:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leSetConnCteTxParamsCmdCmpl.status;
   17d8e:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteTxParamsCmdCmpl.handle, p);
   17d90:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17d94:	b29b      	uxth	r3, r3
   17d96:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leSetConnCteTxParamsCmdCmpl.handle;
   17d98:	8003      	strh	r3, [r0, #0]
}
   17d9a:	4770      	bx	lr

00017d9c <hciEvtParseLeConnCteReqEn>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteReqEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leConnCteReqEnableCmdCmpl.status, p);
   17d9c:	780a      	ldrb	r2, [r1, #0]
   17d9e:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteReqEnableCmdCmpl.handle, p);
   17da0:	f891 c002 	ldrb.w	ip, [r1, #2]
   17da4:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leConnCteReqEnableCmdCmpl.status;
   17da6:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leConnCteReqEnableCmdCmpl.handle, p);
   17da8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17dac:	b29b      	uxth	r3, r3
   17dae:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leConnCteReqEnableCmdCmpl.handle;
   17db0:	8003      	strh	r3, [r0, #0]
}
   17db2:	4770      	bx	lr

00017db4 <hciEvtParseLeConnCteRspEn>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteRspEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leConnCteRspEnableCmdCmpl.status, p);
   17db4:	780a      	ldrb	r2, [r1, #0]
   17db6:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteRspEnableCmdCmpl.handle, p);
   17db8:	f891 c002 	ldrb.w	ip, [r1, #2]
   17dbc:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leConnCteRspEnableCmdCmpl.status;
   17dbe:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leConnCteRspEnableCmdCmpl.handle, p);
   17dc0:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17dc4:	b29b      	uxth	r3, r3
   17dc6:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leConnCteRspEnableCmdCmpl.handle;
   17dc8:	8003      	strh	r3, [r0, #0]
}
   17dca:	4770      	bx	lr

00017dcc <hciEvtParseLePerAdvSyncLost>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   17dcc:	784a      	ldrb	r2, [r1, #1]
   17dce:	780b      	ldrb	r3, [r1, #0]
   17dd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17dd4:	8083      	strh	r3, [r0, #4]
}
   17dd6:	4770      	bx	lr

00017dd8 <hciEvtParseLePerAdvSyncEst>:
{
   17dd8:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   17dda:	780b      	ldrb	r3, [r1, #0]
   17ddc:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   17dde:	788a      	ldrb	r2, [r1, #2]
   17de0:	784b      	ldrb	r3, [r1, #1]
{
   17de2:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   17de4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17de8:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   17dea:	78eb      	ldrb	r3, [r5, #3]
   17dec:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   17dee:	792b      	ldrb	r3, [r5, #4]
   17df0:	7243      	strb	r3, [r0, #9]
{
   17df2:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   17df4:	3105      	adds	r1, #5
   17df6:	300a      	adds	r0, #10
   17df8:	f7fd fd60 	bl	158bc <BdaCpy>
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   17dfc:	7aeb      	ldrb	r3, [r5, #11]
   17dfe:	7423      	strb	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   17e00:	7b69      	ldrb	r1, [r5, #13]
   17e02:	7b2b      	ldrb	r3, [r5, #12]
  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   17e04:	7922      	ldrb	r2, [r4, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   17e06:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   17e0a:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   17e0c:	7bab      	ldrb	r3, [r5, #14]
   17e0e:	7523      	strb	r3, [r4, #20]
  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   17e10:	70e2      	strb	r2, [r4, #3]
}
   17e12:	bd38      	pop	{r3, r4, r5, pc}

00017e14 <hciEvtParseLeScanReqRcvd>:
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   17e14:	780b      	ldrb	r3, [r1, #0]
   17e16:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   17e18:	784b      	ldrb	r3, [r1, #1]
   17e1a:	7143      	strb	r3, [r0, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   17e1c:	3102      	adds	r1, #2
   17e1e:	3006      	adds	r0, #6
   17e20:	f7fd bd4c 	b.w	158bc <BdaCpy>

00017e24 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
{
   17e24:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   17e26:	f811 3b01 	ldrb.w	r3, [r1], #1
   17e2a:	7103      	strb	r3, [r0, #4]
{
   17e2c:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   17e2e:	3005      	adds	r0, #5
   17e30:	f7fd fd44 	bl	158bc <BdaCpy>
  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   17e34:	7923      	ldrb	r3, [r4, #4]
   17e36:	70e3      	strb	r3, [r4, #3]
}
   17e38:	bd10      	pop	{r4, pc}
   17e3a:	bf00      	nop

00017e3c <hciEvtParseLeReadPeerResAddrCmdCmpl>:
{
   17e3c:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   17e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
   17e42:	7103      	strb	r3, [r0, #4]
{
   17e44:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   17e46:	3005      	adds	r0, #5
   17e48:	f7fd fd38 	bl	158bc <BdaCpy>
  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   17e4c:	7923      	ldrb	r3, [r4, #4]
   17e4e:	70e3      	strb	r3, [r4, #3]
}
   17e50:	bd10      	pop	{r4, pc}
   17e52:	bf00      	nop

00017e54 <hciEvtParseLeEnhancedConnCmpl>:
{
   17e54:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   17e56:	780b      	ldrb	r3, [r1, #0]
   17e58:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   17e5a:	788a      	ldrb	r2, [r1, #2]
   17e5c:	784b      	ldrb	r3, [r1, #1]
{
   17e5e:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   17e60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   17e64:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   17e66:	78eb      	ldrb	r3, [r5, #3]
   17e68:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   17e6a:	792b      	ldrb	r3, [r5, #4]
   17e6c:	7243      	strb	r3, [r0, #9]
{
   17e6e:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   17e70:	3105      	adds	r1, #5
   17e72:	300a      	adds	r0, #10
   17e74:	f7fd fd22 	bl	158bc <BdaCpy>
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   17e78:	f105 010b 	add.w	r1, r5, #11
   17e7c:	f104 0017 	add.w	r0, r4, #23
   17e80:	f7fd fd1c 	bl	158bc <BdaCpy>
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   17e84:	f105 0111 	add.w	r1, r5, #17
   17e88:	f104 001d 	add.w	r0, r4, #29
   17e8c:	f7fd fd16 	bl	158bc <BdaCpy>
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   17e90:	7e29      	ldrb	r1, [r5, #24]
   17e92:	7deb      	ldrb	r3, [r5, #23]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   17e94:	88e2      	ldrh	r2, [r4, #6]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   17e96:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   17e9a:	8223      	strh	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   17e9c:	7ea9      	ldrb	r1, [r5, #26]
   17e9e:	7e6b      	ldrb	r3, [r5, #25]
   17ea0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   17ea4:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   17ea6:	7f29      	ldrb	r1, [r5, #28]
   17ea8:	7eeb      	ldrb	r3, [r5, #27]
   17eaa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   17eae:	82a3      	strh	r3, [r4, #20]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   17eb0:	7f69      	ldrb	r1, [r5, #29]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   17eb2:	7923      	ldrb	r3, [r4, #4]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   17eb4:	75a1      	strb	r1, [r4, #22]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   17eb6:	8022      	strh	r2, [r4, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   17eb8:	70e3      	strb	r3, [r4, #3]
}
   17eba:	bd38      	pop	{r3, r4, r5, pc}

00017ebc <hciEvtParseGenDhKeyCmdCmpl>:
{
   17ebc:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   17ebe:	460b      	mov	r3, r1
   17ec0:	f813 4b01 	ldrb.w	r4, [r3], #1
   17ec4:	7104      	strb	r4, [r0, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   17ec6:	f8d1 c001 	ldr.w	ip, [r1, #1]
   17eca:	689a      	ldr	r2, [r3, #8]
   17ecc:	6859      	ldr	r1, [r3, #4]
   17ece:	f8d3 e00c 	ldr.w	lr, [r3, #12]
   17ed2:	f8c0 e011 	str.w	lr, [r0, #17]
   17ed6:	f8c0 c005 	str.w	ip, [r0, #5]
   17eda:	f8c0 1009 	str.w	r1, [r0, #9]
   17ede:	f8c0 200d 	str.w	r2, [r0, #13]
   17ee2:	f8d3 c010 	ldr.w	ip, [r3, #16]
   17ee6:	6959      	ldr	r1, [r3, #20]
   17ee8:	699a      	ldr	r2, [r3, #24]
   17eea:	f8d3 e01c 	ldr.w	lr, [r3, #28]
   17eee:	f8c0 e021 	str.w	lr, [r0, #33]	; 0x21
   17ef2:	f8c0 c015 	str.w	ip, [r0, #21]
   17ef6:	f8c0 1019 	str.w	r1, [r0, #25]
   17efa:	f8c0 201d 	str.w	r2, [r0, #29]
  pMsg->hdr.status = pMsg->leGenDHKey.status;
   17efe:	70c4      	strb	r4, [r0, #3]
}
   17f00:	bd10      	pop	{r4, pc}
   17f02:	bf00      	nop

00017f04 <hciEvtParseReadPubKeyCmdCmpl>:
{
   17f04:	b570      	push	{r4, r5, r6, lr}
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   17f06:	460b      	mov	r3, r1
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   17f08:	1d42      	adds	r2, r0, #5
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   17f0a:	f813 cb01 	ldrb.w	ip, [r3], #1
   17f0e:	f880 c004 	strb.w	ip, [r0, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   17f12:	3141      	adds	r1, #65	; 0x41
   17f14:	681d      	ldr	r5, [r3, #0]
   17f16:	685c      	ldr	r4, [r3, #4]
   17f18:	f8d3 e008 	ldr.w	lr, [r3, #8]
   17f1c:	68de      	ldr	r6, [r3, #12]
   17f1e:	60d6      	str	r6, [r2, #12]
   17f20:	3310      	adds	r3, #16
   17f22:	428b      	cmp	r3, r1
   17f24:	6015      	str	r5, [r2, #0]
   17f26:	6054      	str	r4, [r2, #4]
   17f28:	f8c2 e008 	str.w	lr, [r2, #8]
   17f2c:	f102 0210 	add.w	r2, r2, #16
   17f30:	d1f0      	bne.n	17f14 <hciEvtParseReadPubKeyCmdCmpl+0x10>
  pMsg->hdr.status = pMsg->leP256.status;
   17f32:	f880 c003 	strb.w	ip, [r0, #3]
}
   17f36:	bd70      	pop	{r4, r5, r6, pc}

00017f38 <hciEvtParseLeRandCmdCmpl>:
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   17f38:	460b      	mov	r3, r1
   17f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   17f3e:	7102      	strb	r2, [r0, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   17f40:	f8d1 1001 	ldr.w	r1, [r1, #1]
   17f44:	685b      	ldr	r3, [r3, #4]
   17f46:	f8c0 3009 	str.w	r3, [r0, #9]
   17f4a:	f8c0 1005 	str.w	r1, [r0, #5]
  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   17f4e:	70c2      	strb	r2, [r0, #3]
}
   17f50:	4770      	bx	lr
   17f52:	bf00      	nop

00017f54 <hciEvtParseLeEncryptCmdCmpl>:
{
   17f54:	b500      	push	{lr}
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   17f56:	460b      	mov	r3, r1
   17f58:	f813 2b01 	ldrb.w	r2, [r3], #1
   17f5c:	7102      	strb	r2, [r0, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   17f5e:	f8d1 e001 	ldr.w	lr, [r1, #1]
   17f62:	f8d3 c004 	ldr.w	ip, [r3, #4]
   17f66:	6899      	ldr	r1, [r3, #8]
   17f68:	68db      	ldr	r3, [r3, #12]
   17f6a:	f8c0 3011 	str.w	r3, [r0, #17]
   17f6e:	f8c0 e005 	str.w	lr, [r0, #5]
   17f72:	f8c0 c009 	str.w	ip, [r0, #9]
   17f76:	f8c0 100d 	str.w	r1, [r0, #13]
  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   17f7a:	70c2      	strb	r2, [r0, #3]
}
   17f7c:	f85d fb04 	ldr.w	pc, [sp], #4

00017f80 <hciEvtParseVendorSpec>:
  memcpy(pMsg->vendorSpec.param, p, len);
   17f80:	3004      	adds	r0, #4
   17f82:	f7f4 b8bd 	b.w	c100 <memcpy>
   17f86:	bf00      	nop

00017f88 <hciEvtParseVendorSpecCmdCmpl>:
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   17f88:	f811 cc01 	ldrb.w	ip, [r1, #-1]
   17f8c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   17f90:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17f94:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   17f96:	f811 3b01 	ldrb.w	r3, [r1], #1
   17f9a:	70c3      	strb	r3, [r0, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   17f9c:	3a04      	subs	r2, #4
   17f9e:	3006      	adds	r0, #6
   17fa0:	f7f4 b8ae 	b.w	c100 <memcpy>

00017fa4 <hciEvtParseLeLtkReq>:
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   17fa4:	460a      	mov	r2, r1
   17fa6:	f891 c001 	ldrb.w	ip, [r1, #1]
   17faa:	f812 3b02 	ldrb.w	r3, [r2], #2
   17fae:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17fb2:	b29b      	uxth	r3, r3
   17fb4:	8083      	strh	r3, [r0, #4]
  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   17fb6:	f8d1 c002 	ldr.w	ip, [r1, #2]
   17fba:	6852      	ldr	r2, [r2, #4]
   17fbc:	f8c0 200a 	str.w	r2, [r0, #10]
   17fc0:	f8c0 c006 	str.w	ip, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   17fc4:	f891 c00b 	ldrb.w	ip, [r1, #11]
   17fc8:	7a8a      	ldrb	r2, [r1, #10]
  pMsg->hdr.param = pMsg->leLtkReq.handle;
   17fca:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   17fcc:	eb02 230c 	add.w	r3, r2, ip, lsl #8
   17fd0:	81c3      	strh	r3, [r0, #14]
}
   17fd2:	4770      	bx	lr

00017fd4 <hciEvtParseReadLeRemoteFeatCmpl>:
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   17fd4:	780a      	ldrb	r2, [r1, #0]
   17fd6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   17fd8:	f891 c002 	ldrb.w	ip, [r1, #2]
   17fdc:	784b      	ldrb	r3, [r1, #1]
   17fde:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   17fe2:	b29b      	uxth	r3, r3
   17fe4:	80c3      	strh	r3, [r0, #6]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   17fe6:	f8d1 c003 	ldr.w	ip, [r1, #3]
   17fea:	f8d1 1007 	ldr.w	r1, [r1, #7]
   17fee:	60c1      	str	r1, [r0, #12]
   17ff0:	f8c0 c008 	str.w	ip, [r0, #8]
  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   17ff4:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   17ff6:	70c2      	strb	r2, [r0, #3]
}
   17ff8:	4770      	bx	lr
   17ffa:	bf00      	nop

00017ffc <hciEvtParseReadChanMapCmdCmpl>:
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   17ffc:	780a      	ldrb	r2, [r1, #0]
   17ffe:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   18000:	f891 c002 	ldrb.w	ip, [r1, #2]
   18004:	784b      	ldrb	r3, [r1, #1]
   18006:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1800a:	b29b      	uxth	r3, r3
   1800c:	80c3      	strh	r3, [r0, #6]
  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   1800e:	f8d1 c003 	ldr.w	ip, [r1, #3]
   18012:	f8c0 c008 	str.w	ip, [r0, #8]
   18016:	79c9      	ldrb	r1, [r1, #7]
   18018:	7301      	strb	r1, [r0, #12]
  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   1801a:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   1801c:	70c2      	strb	r2, [r0, #3]
}
   1801e:	4770      	bx	lr

00018020 <hciEvtParseLeConnCmpl>:
{
   18020:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   18022:	780b      	ldrb	r3, [r1, #0]
   18024:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   18026:	788a      	ldrb	r2, [r1, #2]
   18028:	784b      	ldrb	r3, [r1, #1]
{
   1802a:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1802c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   18030:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   18032:	78eb      	ldrb	r3, [r5, #3]
   18034:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   18036:	792b      	ldrb	r3, [r5, #4]
   18038:	7243      	strb	r3, [r0, #9]
{
   1803a:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   1803c:	3105      	adds	r1, #5
   1803e:	300a      	adds	r0, #10
   18040:	f7fd fc3c 	bl	158bc <BdaCpy>
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   18044:	7b2a      	ldrb	r2, [r5, #12]
   18046:	7aeb      	ldrb	r3, [r5, #11]
   18048:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1804c:	8223      	strh	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   1804e:	7baa      	ldrb	r2, [r5, #14]
   18050:	7b6b      	ldrb	r3, [r5, #13]
   18052:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   18056:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   18058:	7c2a      	ldrb	r2, [r5, #16]
   1805a:	7beb      	ldrb	r3, [r5, #15]
   1805c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   18060:	82a3      	strh	r3, [r4, #20]
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   18062:	2300      	movs	r3, #0
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   18064:	7c68      	ldrb	r0, [r5, #17]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   18066:	88e2      	ldrh	r2, [r4, #6]
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   18068:	f8c4 3017 	str.w	r3, [r4, #23]
   1806c:	f8a4 301b 	strh.w	r3, [r4, #27]
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   18070:	f8c4 301d 	str.w	r3, [r4, #29]
   18074:	f8a4 3021 	strh.w	r3, [r4, #33]	; 0x21
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   18078:	7923      	ldrb	r3, [r4, #4]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   1807a:	75a0      	strb	r0, [r4, #22]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   1807c:	8022      	strh	r2, [r4, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   1807e:	70e3      	strb	r3, [r4, #3]
}
   18080:	bd38      	pop	{r3, r4, r5, pc}
   18082:	bf00      	nop

00018084 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   18084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18088:	4688      	mov	r8, r1
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
  hciEvtCback_t cback = hciCb.evtCback;

  BSTREAM_TO_UINT8(numPkts, p);
  BSTREAM_TO_UINT16(opcode, p);
   1808a:	7843      	ldrb	r3, [r0, #1]
   1808c:	7881      	ldrb	r1, [r0, #2]
  hciEvtCback_t cback = hciCb.evtCback;
   1808e:	4a9e      	ldr	r2, [pc, #632]	; (18308 <hciEvtProcessCmdCmpl+0x284>)
  BSTREAM_TO_UINT8(numPkts, p);
   18090:	7806      	ldrb	r6, [r0, #0]
  hciEvtCback_t cback = hciCb.evtCback;
   18092:	6897      	ldr	r7, [r2, #8]
  BSTREAM_TO_UINT16(opcode, p);
   18094:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   18098:	b29b      	uxth	r3, r3

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   1809a:	f242 0157 	movw	r1, #8279	; 0x2057
   1809e:	428b      	cmp	r3, r1
  BSTREAM_TO_UINT16(opcode, p);
   180a0:	f100 0503 	add.w	r5, r0, #3
  switch (opcode)
   180a4:	f200 808d 	bhi.w	181c2 <hciEvtProcessCmdCmpl+0x13e>
   180a8:	f242 0109 	movw	r1, #8201	; 0x2009
   180ac:	428b      	cmp	r3, r1
   180ae:	d955      	bls.n	1815c <hciEvtProcessCmdCmpl+0xd8>
   180b0:	f5a3 5000 	sub.w	r0, r3, #8192	; 0x2000
   180b4:	380a      	subs	r0, #10
   180b6:	284d      	cmp	r0, #77	; 0x4d
   180b8:	f200 8083 	bhi.w	181c2 <hciEvtProcessCmdCmpl+0x13e>
   180bc:	e8df f010 	tbh	[pc, r0, lsl #1]
   180c0:	00810114 	.word	0x00810114
   180c4:	0081010f 	.word	0x0081010f
   180c8:	0081011e 	.word	0x0081011e
   180cc:	00810081 	.word	0x00810081
   180d0:	00810081 	.word	0x00810081
   180d4:	010a0081 	.word	0x010a0081
   180d8:	01040081 	.word	0x01040081
   180dc:	008100fe 	.word	0x008100fe
   180e0:	00f400f9 	.word	0x00f400f9
   180e4:	00810081 	.word	0x00810081
   180e8:	00810081 	.word	0x00810081
   180ec:	00ea00ef 	.word	0x00ea00ef
   180f0:	00e000e5 	.word	0x00e000e5
   180f4:	008100db 	.word	0x008100db
   180f8:	00d60081 	.word	0x00d60081
   180fc:	00cc00d1 	.word	0x00cc00d1
   18100:	00c70081 	.word	0x00c70081
   18104:	00bd00c2 	.word	0x00bd00c2
   18108:	00b80081 	.word	0x00b80081
   1810c:	00ae00b3 	.word	0x00ae00b3
   18110:	00810081 	.word	0x00810081
   18114:	00810081 	.word	0x00810081
   18118:	00810081 	.word	0x00810081
   1811c:	00a90081 	.word	0x00a90081
   18120:	00810081 	.word	0x00810081
   18124:	00810081 	.word	0x00810081
   18128:	00810081 	.word	0x00810081
   1812c:	008100a4 	.word	0x008100a4
   18130:	0081009f 	.word	0x0081009f
   18134:	00810081 	.word	0x00810081
   18138:	00810081 	.word	0x00810081
   1813c:	00810081 	.word	0x00810081
   18140:	00810081 	.word	0x00810081
   18144:	00810081 	.word	0x00810081
   18148:	00810081 	.word	0x00810081
   1814c:	00810081 	.word	0x00810081
   18150:	00810081 	.word	0x00810081
   18154:	0095009a 	.word	0x0095009a
   18158:	01190090 	.word	0x01190090
   1815c:	f640 427c 	movw	r2, #3196	; 0xc7c
   18160:	4293      	cmp	r3, r2
   18162:	d029      	beq.n	181b8 <hciEvtProcessCmdCmpl+0x134>
   18164:	f241 4205 	movw	r2, #5125	; 0x1405
   18168:	4293      	cmp	r3, r2
   1816a:	d11c      	bne.n	181a6 <hciEvtProcessCmdCmpl+0x122>
   1816c:	f04f 0a07 	mov.w	sl, #7
   18170:	200a      	movs	r0, #10
  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
    break;

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   18172:	46d1      	mov	r9, sl

  /* if callback is executed for this event */
  if (cbackEvt != 0)
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   18174:	f005 feb0 	bl	1ded8 <WsfBufAlloc>
   18178:	4604      	mov	r4, r0
   1817a:	b178      	cbz	r0, 1819c <hciEvtProcessCmdCmpl+0x118>
      pMsg->hdr.param = 0;
      pMsg->hdr.event = cbackEvt;
      pMsg->hdr.status = 0;

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   1817c:	4b63      	ldr	r3, [pc, #396]	; (1830c <hciEvtProcessCmdCmpl+0x288>)
      pMsg->hdr.event = cbackEvt;
   1817e:	f880 9002 	strb.w	r9, [r0, #2]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   18182:	4629      	mov	r1, r5
   18184:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
      pMsg->hdr.param = 0;
   18188:	2300      	movs	r3, #0
   1818a:	8003      	strh	r3, [r0, #0]
      pMsg->hdr.status = 0;
   1818c:	70c3      	strb	r3, [r0, #3]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   1818e:	4642      	mov	r2, r8
   18190:	47a8      	blx	r5

      /* execute callback */
      (*cback)(pMsg);
   18192:	4620      	mov	r0, r4
   18194:	47b8      	blx	r7

      /* free buffer */
      WsfBufFree(pMsg);
   18196:	4620      	mov	r0, r4
   18198:	f005 fece 	bl	1df38 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   1819c:	4630      	mov	r0, r6
}
   1819e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hciCmdRecvCmpl(numPkts);
   181a2:	f7fd be2d 	b.w	15e00 <hciCmdRecvCmpl>
  switch (opcode)
   181a6:	f640 422d 	movw	r2, #3117	; 0xc2d
   181aa:	4293      	cmp	r3, r2
   181ac:	d1f6      	bne.n	1819c <hciEvtProcessCmdCmpl+0x118>
   181ae:	f04f 0a09 	mov.w	sl, #9
   181b2:	2008      	movs	r0, #8
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   181b4:	46d1      	mov	r9, sl
   181b6:	e7dd      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   181b8:	f04f 0a27 	mov.w	sl, #39	; 0x27
   181bc:	2008      	movs	r0, #8
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   181be:	46d1      	mov	r9, sl
   181c0:	e7d8      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   181c2:	0a9a      	lsrs	r2, r3, #10
   181c4:	2a3f      	cmp	r2, #63	; 0x3f
   181c6:	d1e9      	bne.n	1819c <hciEvtProcessCmdCmpl+0x118>
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   181c8:	4618      	mov	r0, r3
   181ca:	4642      	mov	r2, r8
   181cc:	4629      	mov	r1, r5
   181ce:	f001 fb31 	bl	19834 <hciCoreVsCmdCmplRcvd>
  if (cbackEvt != 0)
   181d2:	4681      	mov	r9, r0
   181d4:	2800      	cmp	r0, #0
   181d6:	d0e1      	beq.n	1819c <hciEvtProcessCmdCmpl+0x118>
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   181d8:	4b4d      	ldr	r3, [pc, #308]	; (18310 <hciEvtProcessCmdCmpl+0x28c>)
   181da:	46ca      	mov	sl, r9
   181dc:	5c18      	ldrb	r0, [r3, r0]
   181de:	e7c9      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   181e0:	f04f 0a41 	mov.w	sl, #65	; 0x41
   181e4:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_CONN_CTE_REQ_ENABLE_CMD_CMPL_CBACK_EVT;
   181e6:	46d1      	mov	r9, sl
   181e8:	e7c4      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   181ea:	f04f 0a40 	mov.w	sl, #64	; 0x40
   181ee:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_CONN_CTE_TX_PARAMS_CMD_CMPL_CBACK_EVT;
   181f0:	46d1      	mov	r9, sl
   181f2:	e7bf      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   181f4:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
   181f8:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_CONN_CTE_RX_PARAMS_CMD_CMPL_CBACK_EVT;
   181fa:	46d1      	mov	r9, sl
   181fc:	e7ba      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   181fe:	f04f 0a36 	mov.w	sl, #54	; 0x36
   18202:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   18204:	46d1      	mov	r9, sl
   18206:	e7b5      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18208:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1820c:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   1820e:	46d1      	mov	r9, sl
   18210:	e7b0      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18212:	f04f 0a37 	mov.w	sl, #55	; 0x37
   18216:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   18218:	46d1      	mov	r9, sl
   1821a:	e7ab      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1821c:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
   18220:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   18222:	46d1      	mov	r9, sl
   18224:	e7a6      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18226:	f04f 0a29 	mov.w	sl, #41	; 0x29
   1822a:	200a      	movs	r0, #10
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   1822c:	46d1      	mov	r9, sl
   1822e:	e7a1      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18230:	f04f 0a22 	mov.w	sl, #34	; 0x22
   18234:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   18236:	46d1      	mov	r9, sl
   18238:	e79c      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1823a:	f04f 0a1a 	mov.w	sl, #26
   1823e:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   18240:	46d1      	mov	r9, sl
   18242:	e797      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18244:	f04f 0a19 	mov.w	sl, #25
   18248:	200c      	movs	r0, #12
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   1824a:	46d1      	mov	r9, sl
   1824c:	e792      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1824e:	f04f 0a18 	mov.w	sl, #24
   18252:	200c      	movs	r0, #12
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   18254:	46d1      	mov	r9, sl
   18256:	e78d      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18258:	f04f 0a17 	mov.w	sl, #23
   1825c:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   1825e:	46d1      	mov	r9, sl
   18260:	e788      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18262:	f04f 0a16 	mov.w	sl, #22
   18266:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   18268:	46d1      	mov	r9, sl
   1826a:	e783      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1826c:	f04f 0a15 	mov.w	sl, #21
   18270:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   18272:	46d1      	mov	r9, sl
   18274:	e77e      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18276:	f04f 0a20 	mov.w	sl, #32
   1827a:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   1827c:	46d1      	mov	r9, sl
   1827e:	e779      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18280:	f04f 0a1f 	mov.w	sl, #31
   18284:	200a      	movs	r0, #10
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   18286:	46d1      	mov	r9, sl
   18288:	e774      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1828a:	f04f 0a21 	mov.w	sl, #33	; 0x21
   1828e:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   18290:	46d1      	mov	r9, sl
   18292:	e76f      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   18294:	f04f 0a1e 	mov.w	sl, #30
   18298:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   1829a:	46d1      	mov	r9, sl
   1829c:	e76a      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1829e:	f04f 0a1d 	mov.w	sl, #29
   182a2:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   182a4:	46d1      	mov	r9, sl
   182a6:	e765      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   182a8:	f04f 0a0d 	mov.w	sl, #13
   182ac:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   182ae:	46d1      	mov	r9, sl
   182b0:	e760      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   182b2:	f04f 0a0c 	mov.w	sl, #12
   182b6:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   182b8:	46d1      	mov	r9, sl
   182ba:	e75b      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
    cback = hciCb.secCback;
   182bc:	f04f 0a1c 	mov.w	sl, #28
   182c0:	68d7      	ldr	r7, [r2, #12]
   182c2:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   182c4:	46d1      	mov	r9, sl
   182c6:	e755      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
    cback = hciCb.secCback;
   182c8:	f04f 0a1b 	mov.w	sl, #27
   182cc:	68d7      	ldr	r7, [r2, #12]
   182ce:	2016      	movs	r0, #22
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   182d0:	46d1      	mov	r9, sl
   182d2:	e74f      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   182d4:	f04f 0a08 	mov.w	sl, #8
   182d8:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   182da:	46d1      	mov	r9, sl
   182dc:	e74a      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   182de:	f04f 0a34 	mov.w	sl, #52	; 0x34
   182e2:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   182e4:	46d1      	mov	r9, sl
   182e6:	e745      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   182e8:	f04f 0a35 	mov.w	sl, #53	; 0x35
   182ec:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   182ee:	46d1      	mov	r9, sl
   182f0:	e740      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   182f2:	f04f 0a42 	mov.w	sl, #66	; 0x42
   182f6:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_CONN_CTE_RSP_ENABLE_CMD_CMPL_CBACK_EVT;
   182f8:	46d1      	mov	r9, sl
   182fa:	e73b      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   182fc:	f04f 0a05 	mov.w	sl, #5
   18300:	2006      	movs	r0, #6
   18302:	46d1      	mov	r9, sl
   18304:	e736      	b.n	18174 <hciEvtProcessCmdCmpl+0xf0>
   18306:	bf00      	nop
   18308:	10004324 	.word	0x10004324
   1830c:	00026a64 	.word	0x00026a64
   18310:	00026a20 	.word	0x00026a20

00018314 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   18314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   18318:	4605      	mov	r5, r0
  hciEvtCback_t cback = hciCb.evtCback;
   1831a:	4e89      	ldr	r6, [pc, #548]	; (18540 <hciEvtProcessMsg+0x22c>)
  BSTREAM_TO_UINT8(evt, pEvt);
   1831c:	f815 3b02 	ldrb.w	r3, [r5], #2
  hciEvtCback_t cback = hciCb.evtCback;
   18320:	68b7      	ldr	r7, [r6, #8]
  BSTREAM_TO_UINT8(len, pEvt);
   18322:	f890 8001 	ldrb.w	r8, [r0, #1]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   18326:	2b57      	cmp	r3, #87	; 0x57
   18328:	d831      	bhi.n	1838e <hciEvtProcessMsg+0x7a>
   1832a:	2b04      	cmp	r3, #4
   1832c:	d94d      	bls.n	183ca <hciEvtProcessMsg+0xb6>
   1832e:	3b05      	subs	r3, #5
   18330:	4604      	mov	r4, r0
   18332:	2b52      	cmp	r3, #82	; 0x52
   18334:	d849      	bhi.n	183ca <hciEvtProcessMsg+0xb6>
   18336:	e8df f003 	tbb	[pc, r3]
   1833a:	4853      	.short	0x4853
   1833c:	48487048 	.word	0x48487048
   18340:	82487948 	.word	0x82487948
   18344:	4848958c 	.word	0x4848958c
   18348:	4848489e 	.word	0x4848489e
   1834c:	a6484848 	.word	0xa6484848
   18350:	48484848 	.word	0x48484848
   18354:	48484848 	.word	0x48484848
   18358:	48484848 	.word	0x48484848
   1835c:	48484848 	.word	0x48484848
   18360:	48484848 	.word	0x48484848
   18364:	4848ab48 	.word	0x4848ab48
   18368:	48484848 	.word	0x48484848
   1836c:	48484848 	.word	0x48484848
   18370:	b4484848 	.word	0xb4484848
   18374:	48484848 	.word	0x48484848
   18378:	48484848 	.word	0x48484848
   1837c:	48484848 	.word	0x48484848
   18380:	48484848 	.word	0x48484848
   18384:	48484848 	.word	0x48484848
   18388:	48484848 	.word	0x48484848
   1838c:	4a          	.byte	0x4a
   1838d:	00          	.byte	0x00
   1838e:	2bff      	cmp	r3, #255	; 0xff
   18390:	d11b      	bne.n	183ca <hciEvtProcessMsg+0xb6>
      /* for nonstandard controllers that send a vendor-specific event instead
       * of a command complete event
       */
      hciCmdRecvCmpl(1);
#endif
      hciEvtStats.numVendorSpecEvt++;
   18392:	4a6c      	ldr	r2, [pc, #432]	; (18544 <hciEvtProcessMsg+0x230>)
   18394:	4e6c      	ldr	r6, [pc, #432]	; (18548 <hciEvtProcessMsg+0x234>)
   18396:	8a93      	ldrh	r3, [r2, #20]
   18398:	3301      	adds	r3, #1
   1839a:	8293      	strh	r3, [r2, #20]
   1839c:	2006      	movs	r0, #6
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   1839e:	f04f 0913 	mov.w	r9, #19

  /* if callback is executed for this event */
  if (cbackEvt != 0)
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   183a2:	f005 fd99 	bl	1ded8 <WsfBufAlloc>
   183a6:	4604      	mov	r4, r0
   183a8:	b178      	cbz	r0, 183ca <hciEvtProcessMsg+0xb6>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   183aa:	2300      	movs	r3, #0
      pMsg->hdr.event = cbackEvt;
      pMsg->hdr.status = 0;

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   183ac:	4642      	mov	r2, r8
      pMsg->hdr.param = 0;
   183ae:	8023      	strh	r3, [r4, #0]
      pMsg->hdr.status = 0;
   183b0:	70e3      	strb	r3, [r4, #3]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   183b2:	4629      	mov	r1, r5
      pMsg->hdr.event = cbackEvt;
   183b4:	f884 9002 	strb.w	r9, [r4, #2]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   183b8:	47b0      	blx	r6

      /* execute callback */
      (*cback)(pMsg);
   183ba:	4620      	mov	r0, r4
   183bc:	47b8      	blx	r7

      /* free buffer */
      WsfBufFree(pMsg);
   183be:	4620      	mov	r0, r4
   183c0:	f005 fdba 	bl	1df38 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   183c4:	f1b9 0f03 	cmp.w	r9, #3
   183c8:	d01e      	beq.n	18408 <hciEvtProcessMsg+0xf4>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
      hciCoreConnClose(handle);
    }
  }
}
   183ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hciEvtStats.numAuthToEvt++;
   183ce:	4a5d      	ldr	r2, [pc, #372]	; (18544 <hciEvtProcessMsg+0x230>)
   183d0:	4e5e      	ldr	r6, [pc, #376]	; (1854c <hciEvtProcessMsg+0x238>)
   183d2:	8ad3      	ldrh	r3, [r2, #22]
   183d4:	3301      	adds	r3, #1
   183d6:	82d3      	strh	r3, [r2, #22]
   183d8:	2006      	movs	r0, #6
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   183da:	f04f 0928 	mov.w	r9, #40	; 0x28
   183de:	e7e0      	b.n	183a2 <hciEvtProcessMsg+0x8e>
      hciEvtStats.numDiscCmplEvt++;
   183e0:	4a58      	ldr	r2, [pc, #352]	; (18544 <hciEvtProcessMsg+0x230>)
   183e2:	8813      	ldrh	r3, [r2, #0]
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   183e4:	200a      	movs	r0, #10
      hciEvtStats.numDiscCmplEvt++;
   183e6:	3301      	adds	r3, #1
   183e8:	8013      	strh	r3, [r2, #0]
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   183ea:	f005 fd75 	bl	1ded8 <WsfBufAlloc>
   183ee:	4604      	mov	r4, r0
   183f0:	b150      	cbz	r0, 18408 <hciEvtProcessMsg+0xf4>
      pMsg->hdr.param = 0;
   183f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
   183f6:	6003      	str	r3, [r0, #0]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   183f8:	4642      	mov	r2, r8
   183fa:	4629      	mov	r1, r5
   183fc:	f7ff faf0 	bl	179e0 <hciEvtParseDisconnectCmpl>
      (*cback)(pMsg);
   18400:	47b8      	blx	r7
      WsfBufFree(pMsg);
   18402:	4620      	mov	r0, r4
   18404:	f005 fd98 	bl	1df38 <WsfBufFree>
      BYTES_TO_UINT16(handle, (pEvt + 1));
   18408:	78ab      	ldrb	r3, [r5, #2]
   1840a:	7868      	ldrb	r0, [r5, #1]
   1840c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      hciCoreConnClose(handle);
   18410:	b280      	uxth	r0, r0
}
   18412:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      hciCoreConnClose(handle);
   18416:	f7ff b88f 	b.w	17538 <hciCoreConnClose>
      hciEvtStats.numEncChangeEvt++;
   1841a:	4a4a      	ldr	r2, [pc, #296]	; (18544 <hciEvtProcessMsg+0x230>)
   1841c:	4e4c      	ldr	r6, [pc, #304]	; (18550 <hciEvtProcessMsg+0x23c>)
   1841e:	8853      	ldrh	r3, [r2, #2]
   18420:	3301      	adds	r3, #1
   18422:	8053      	strh	r3, [r2, #2]
   18424:	200a      	movs	r0, #10
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   18426:	f04f 090f 	mov.w	r9, #15
   1842a:	e7ba      	b.n	183a2 <hciEvtProcessMsg+0x8e>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   1842c:	4a45      	ldr	r2, [pc, #276]	; (18544 <hciEvtProcessMsg+0x230>)
   1842e:	4e49      	ldr	r6, [pc, #292]	; (18554 <hciEvtProcessMsg+0x240>)
   18430:	8893      	ldrh	r3, [r2, #4]
   18432:	3301      	adds	r3, #1
   18434:	8093      	strh	r3, [r2, #4]
   18436:	200e      	movs	r0, #14
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   18438:	f04f 090a 	mov.w	r9, #10
   1843c:	e7b1      	b.n	183a2 <hciEvtProcessMsg+0x8e>
      hciEvtStats.numCmdCmplEvt++;
   1843e:	4a41      	ldr	r2, [pc, #260]	; (18544 <hciEvtProcessMsg+0x230>)
   18440:	88d3      	ldrh	r3, [r2, #6]
   18442:	3301      	adds	r3, #1
      hciEvtProcessCmdCmpl(pEvt, len);
   18444:	4641      	mov	r1, r8
   18446:	4628      	mov	r0, r5
      hciEvtStats.numCmdCmplEvt++;
   18448:	80d3      	strh	r3, [r2, #6]
}
   1844a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      hciEvtProcessCmdCmpl(pEvt, len);
   1844e:	f7ff be19 	b.w	18084 <hciEvtProcessCmdCmpl>
      hciEvtStats.numCmdStatusEvt++;
   18452:	4a3c      	ldr	r2, [pc, #240]	; (18544 <hciEvtProcessMsg+0x230>)
   18454:	8913      	ldrh	r3, [r2, #8]
   18456:	3301      	adds	r3, #1
   18458:	8113      	strh	r3, [r2, #8]
  hciCmdRecvCmpl(numPkts);
   1845a:	78c0      	ldrb	r0, [r0, #3]
}
   1845c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciCmdRecvCmpl(numPkts);
   18460:	f7fd bcce 	b.w	15e00 <hciCmdRecvCmpl>
      hciEvtStats.numHwErrorEvt++;
   18464:	4a37      	ldr	r2, [pc, #220]	; (18544 <hciEvtProcessMsg+0x230>)
   18466:	4e3c      	ldr	r6, [pc, #240]	; (18558 <hciEvtProcessMsg+0x244>)
   18468:	8953      	ldrh	r3, [r2, #10]
   1846a:	3301      	adds	r3, #1
   1846c:	8153      	strh	r3, [r2, #10]
   1846e:	2006      	movs	r0, #6
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   18470:	f04f 0914 	mov.w	r9, #20
   18474:	e795      	b.n	183a2 <hciEvtProcessMsg+0x8e>
      hciCoreNumCmplPkts(pEvt);
   18476:	4628      	mov	r0, r5
   18478:	f7ff f9fe 	bl	17878 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   1847c:	4a31      	ldr	r2, [pc, #196]	; (18544 <hciEvtProcessMsg+0x230>)
   1847e:	8993      	ldrh	r3, [r2, #12]
   18480:	3301      	adds	r3, #1
   18482:	8193      	strh	r3, [r2, #12]
  if (cbackEvt != 0)
   18484:	e7a1      	b.n	183ca <hciEvtProcessMsg+0xb6>
      hciEvtStats.numDataBufOverflowEvt++;
   18486:	4a2f      	ldr	r2, [pc, #188]	; (18544 <hciEvtProcessMsg+0x230>)
   18488:	89d3      	ldrh	r3, [r2, #14]
   1848a:	3301      	adds	r3, #1
   1848c:	81d3      	strh	r3, [r2, #14]
  if (cbackEvt != 0)
   1848e:	e79c      	b.n	183ca <hciEvtProcessMsg+0xb6>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   18490:	4a2c      	ldr	r2, [pc, #176]	; (18544 <hciEvtProcessMsg+0x230>)
   18492:	4e32      	ldr	r6, [pc, #200]	; (1855c <hciEvtProcessMsg+0x248>)
   18494:	8a13      	ldrh	r3, [r2, #16]
   18496:	3301      	adds	r3, #1
   18498:	8213      	strh	r3, [r2, #16]
   1849a:	2008      	movs	r0, #8
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   1849c:	f04f 090e 	mov.w	r9, #14
   184a0:	e77f      	b.n	183a2 <hciEvtProcessMsg+0x8e>
      hciEvtStats.numLeMetaEvt++;
   184a2:	4a28      	ldr	r2, [pc, #160]	; (18544 <hciEvtProcessMsg+0x230>)
      BSTREAM_TO_UINT8(subEvt, pEvt);
   184a4:	f890 9002 	ldrb.w	r9, [r0, #2]
      hciEvtStats.numLeMetaEvt++;
   184a8:	8a53      	ldrh	r3, [r2, #18]
      BSTREAM_TO_UINT8(subEvt, pEvt);
   184aa:	1cc5      	adds	r5, r0, #3
      hciEvtStats.numLeMetaEvt++;
   184ac:	3301      	adds	r3, #1
      APP_TRACE_INFO1("LE meta sub event = 0x%x", subEvt);
   184ae:	482c      	ldr	r0, [pc, #176]	; (18560 <hciEvtProcessMsg+0x24c>)
      hciEvtStats.numLeMetaEvt++;
   184b0:	8253      	strh	r3, [r2, #18]
      APP_TRACE_INFO1("LE meta sub event = 0x%x", subEvt);
   184b2:	4649      	mov	r1, r9
   184b4:	f006 f8f0 	bl	1e698 <WsfTrace>
      switch (subEvt)
   184b8:	f109 33ff 	add.w	r3, r9, #4294967295
   184bc:	2b16      	cmp	r3, #22
   184be:	d884      	bhi.n	183ca <hciEvtProcessMsg+0xb6>
   184c0:	a201      	add	r2, pc, #4	; (adr r2, 184c8 <hciEvtProcessMsg+0x1b4>)
   184c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   184c6:	bf00      	nop
   184c8:	00018609 	.word	0x00018609
   184cc:	00018571 	.word	0x00018571
   184d0:	00018a41 	.word	0x00018a41
   184d4:	00018537 	.word	0x00018537
   184d8:	0001852f 	.word	0x0001852f
   184dc:	00018525 	.word	0x00018525
   184e0:	000189c5 	.word	0x000189c5
   184e4:	000189b9 	.word	0x000189b9
   184e8:	000189af 	.word	0x000189af
   184ec:	0001899f 	.word	0x0001899f
   184f0:	000189cf 	.word	0x000189cf
   184f4:	000187dd 	.word	0x000187dd
   184f8:	0001862b 	.word	0x0001862b
   184fc:	00018621 	.word	0x00018621
   18500:	00018805 	.word	0x00018805
   18504:	000187fb 	.word	0x000187fb
   18508:	000187f1 	.word	0x000187f1
   1850c:	000187e7 	.word	0x000187e7
   18510:	000188e3 	.word	0x000188e3
   18514:	000183cb 	.word	0x000183cb
   18518:	0001885f 	.word	0x0001885f
   1851c:	00018911 	.word	0x00018911
   18520:	00018617 	.word	0x00018617
   18524:	4e0f      	ldr	r6, [pc, #60]	; (18564 <hciEvtProcessMsg+0x250>)
   18526:	200e      	movs	r0, #14
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   18528:	f04f 0923 	mov.w	r9, #35	; 0x23
   1852c:	e739      	b.n	183a2 <hciEvtProcessMsg+0x8e>
   1852e:	2010      	movs	r0, #16
   18530:	4e0d      	ldr	r6, [pc, #52]	; (18568 <hciEvtProcessMsg+0x254>)
   18532:	4681      	mov	r9, r0
   18534:	e735      	b.n	183a2 <hciEvtProcessMsg+0x8e>
   18536:	4e0d      	ldr	r6, [pc, #52]	; (1856c <hciEvtProcessMsg+0x258>)
   18538:	2010      	movs	r0, #16
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   1853a:	f04f 090b 	mov.w	r9, #11
   1853e:	e730      	b.n	183a2 <hciEvtProcessMsg+0x8e>
   18540:	10004324 	.word	0x10004324
   18544:	10004f8c 	.word	0x10004f8c
   18548:	00017f81 	.word	0x00017f81
   1854c:	00017cd5 	.word	0x00017cd5
   18550:	00017b09 	.word	0x00017b09
   18554:	00017a85 	.word	0x00017a85
   18558:	00017b31 	.word	0x00017b31
   1855c:	00017af1 	.word	0x00017af1
   18560:	0002699c 	.word	0x0002699c
   18564:	00017c3d 	.word	0x00017c3d
   18568:	00017fa5 	.word	0x00017fa5
   1856c:	00017fd5 	.word	0x00017fd5
  BSTREAM_TO_UINT8(i, p);
   18570:	f894 8003 	ldrb.w	r8, [r4, #3]
  if (i > HCI_MAX_REPORTS)
   18574:	f1b8 0f0f 	cmp.w	r8, #15
   18578:	f63f af27 	bhi.w	183ca <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   1857c:	203b      	movs	r0, #59	; 0x3b
   1857e:	f005 fcab 	bl	1ded8 <WsfBufAlloc>
   18582:	4605      	mov	r5, r0
   18584:	2800      	cmp	r0, #0
   18586:	f43f af20 	beq.w	183ca <hciEvtProcessMsg+0xb6>
    while (i-- > 0)
   1858a:	f108 37ff 	add.w	r7, r8, #4294967295
   1858e:	b2ff      	uxtb	r7, r7
   18590:	f1b8 0f00 	cmp.w	r8, #0
   18594:	f000 815e 	beq.w	18854 <hciEvtProcessMsg+0x540>
  BSTREAM_TO_UINT8(i, p);
   18598:	3404      	adds	r4, #4
      BSTREAM_TO_BDA(pMsg->addr, p);
   1859a:	f100 0a0c 	add.w	sl, r0, #12
      pMsg->pData = (uint8_t *) (pMsg + 1);
   1859e:	f100 091c 	add.w	r9, r0, #28
      pMsg->directAddrType = 0;
   185a2:	f04f 0800 	mov.w	r8, #0
   185a6:	e01c      	b.n	185e2 <hciEvtProcessMsg+0x2ce>
      memcpy(pMsg->pData, p, pMsg->len);
   185a8:	4621      	mov	r1, r4
   185aa:	465a      	mov	r2, fp
      pMsg->pData = (uint8_t *) (pMsg + 1);
   185ac:	f8c5 9004 	str.w	r9, [r5, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   185b0:	f7f3 fda6 	bl	c100 <memcpy>
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   185b4:	f814 100b 	ldrb.w	r1, [r4, fp]
   185b8:	7269      	strb	r1, [r5, #9]
      pMsg->hdr.param = 0;
   185ba:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
   185be:	602b      	str	r3, [r5, #0]
    while (i-- > 0)
   185c0:	3f01      	subs	r7, #1
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   185c2:	68b3      	ldr	r3, [r6, #8]
      pMsg->directAddrType = 0;
   185c4:	f885 8012 	strb.w	r8, [r5, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   185c8:	f8c5 8013 	str.w	r8, [r5, #19]
   185cc:	f8a5 8017 	strh.w	r8, [r5, #23]
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   185d0:	4628      	mov	r0, r5
    while (i-- > 0)
   185d2:	b2ff      	uxtb	r7, r7
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   185d4:	4798      	blx	r3
      p += pMsg->len;
   185d6:	445c      	add	r4, fp
    while (i-- > 0)
   185d8:	2fff      	cmp	r7, #255	; 0xff
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   185da:	f104 0401 	add.w	r4, r4, #1
    while (i-- > 0)
   185de:	f000 8139 	beq.w	18854 <hciEvtProcessMsg+0x540>
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   185e2:	7823      	ldrb	r3, [r4, #0]
   185e4:	72ab      	strb	r3, [r5, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   185e6:	7863      	ldrb	r3, [r4, #1]
   185e8:	72eb      	strb	r3, [r5, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   185ea:	1ca1      	adds	r1, r4, #2
   185ec:	4650      	mov	r0, sl
   185ee:	f7fd f965 	bl	158bc <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->len, p);
   185f2:	f894 b008 	ldrb.w	fp, [r4, #8]
   185f6:	f885 b008 	strb.w	fp, [r5, #8]
      if (pMsg->len > HCI_ADV_DATA_LEN)
   185fa:	f1bb 0f1f 	cmp.w	fp, #31
      memcpy(pMsg->pData, p, pMsg->len);
   185fe:	4648      	mov	r0, r9
      BSTREAM_TO_UINT8(pMsg->len, p);
   18600:	f104 0409 	add.w	r4, r4, #9
      if (pMsg->len > HCI_ADV_DATA_LEN)
   18604:	d9d0      	bls.n	185a8 <hciEvtProcessMsg+0x294>
   18606:	e125      	b.n	18854 <hciEvtProcessMsg+0x540>
          if (*pEvt == HCI_SUCCESS)
   18608:	78e3      	ldrb	r3, [r4, #3]
   1860a:	2b00      	cmp	r3, #0
   1860c:	f000 8238 	beq.w	18a80 <hciEvtProcessMsg+0x76c>
   18610:	4eb6      	ldr	r6, [pc, #728]	; (188ec <hciEvtProcessMsg+0x5d8>)
   18612:	2024      	movs	r0, #36	; 0x24
   18614:	e6c5      	b.n	183a2 <hciEvtProcessMsg+0x8e>
}
   18616:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        APP_TRACE_INFO0("cte req failed....");
   1861a:	48b5      	ldr	r0, [pc, #724]	; (188f0 <hciEvtProcessMsg+0x5dc>)
   1861c:	f006 b83c 	b.w	1e698 <WsfTrace>
  if (cbackEvt != 0)
   18620:	4eb4      	ldr	r6, [pc, #720]	; (188f4 <hciEvtProcessMsg+0x5e0>)
   18622:	2016      	movs	r0, #22
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   18624:	f04f 0930 	mov.w	r9, #48	; 0x30
   18628:	e6bb      	b.n	183a2 <hciEvtProcessMsg+0x8e>
  i = *p;
   1862a:	78e2      	ldrb	r2, [r4, #3]
  if (i > HCI_MAX_REPORTS)
   1862c:	2a0f      	cmp	r2, #15
   1862e:	f63f aecc 	bhi.w	183ca <hciEvtProcessMsg+0xb6>
  ptr = p + 1;
   18632:	1d25      	adds	r5, r4, #4
  while (i-- > 0)
   18634:	2a00      	cmp	r2, #0
   18636:	f000 822d 	beq.w	18a94 <hciEvtProcessMsg+0x780>
    BSTREAM_TO_UINT8(dataLen, ptr);
   1863a:	7ee0      	ldrb	r0, [r4, #27]
   1863c:	f104 031c 	add.w	r3, r4, #28
  while (i-- > 0)
   18640:	2a01      	cmp	r2, #1
    ptr += dataLen;
   18642:	4403      	add	r3, r0
  while (i-- > 0)
   18644:	d078      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   18646:	7dd9      	ldrb	r1, [r3, #23]
   18648:	4288      	cmp	r0, r1
   1864a:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   1864e:	bf38      	it	cc
   18650:	4608      	movcc	r0, r1
  while (i-- > 0)
   18652:	2a02      	cmp	r2, #2
    ptr += dataLen;
   18654:	440b      	add	r3, r1
  while (i-- > 0)
   18656:	d06f      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   18658:	7dd9      	ldrb	r1, [r3, #23]
   1865a:	4288      	cmp	r0, r1
   1865c:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   18660:	bf38      	it	cc
   18662:	4608      	movcc	r0, r1
  while (i-- > 0)
   18664:	2a03      	cmp	r2, #3
    ptr += dataLen;
   18666:	440b      	add	r3, r1
  while (i-- > 0)
   18668:	d066      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   1866a:	7dd9      	ldrb	r1, [r3, #23]
   1866c:	4288      	cmp	r0, r1
   1866e:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   18672:	bf38      	it	cc
   18674:	4608      	movcc	r0, r1
  while (i-- > 0)
   18676:	2a04      	cmp	r2, #4
    ptr += dataLen;
   18678:	440b      	add	r3, r1
  while (i-- > 0)
   1867a:	d05d      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   1867c:	7dd9      	ldrb	r1, [r3, #23]
   1867e:	4288      	cmp	r0, r1
   18680:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   18684:	bf38      	it	cc
   18686:	4608      	movcc	r0, r1
  while (i-- > 0)
   18688:	2a05      	cmp	r2, #5
    ptr += dataLen;
   1868a:	440b      	add	r3, r1
  while (i-- > 0)
   1868c:	d054      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   1868e:	7dd9      	ldrb	r1, [r3, #23]
   18690:	4288      	cmp	r0, r1
   18692:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   18696:	bf38      	it	cc
   18698:	4608      	movcc	r0, r1
  while (i-- > 0)
   1869a:	2a06      	cmp	r2, #6
    ptr += dataLen;
   1869c:	440b      	add	r3, r1
  while (i-- > 0)
   1869e:	d04b      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   186a0:	7dd9      	ldrb	r1, [r3, #23]
   186a2:	4288      	cmp	r0, r1
   186a4:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   186a8:	bf38      	it	cc
   186aa:	4608      	movcc	r0, r1
  while (i-- > 0)
   186ac:	2a07      	cmp	r2, #7
    ptr += dataLen;
   186ae:	440b      	add	r3, r1
  while (i-- > 0)
   186b0:	d042      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   186b2:	7dd9      	ldrb	r1, [r3, #23]
   186b4:	4288      	cmp	r0, r1
   186b6:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   186ba:	bf38      	it	cc
   186bc:	4608      	movcc	r0, r1
  while (i-- > 0)
   186be:	2a08      	cmp	r2, #8
    ptr += dataLen;
   186c0:	440b      	add	r3, r1
  while (i-- > 0)
   186c2:	d039      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   186c4:	7dd9      	ldrb	r1, [r3, #23]
   186c6:	4288      	cmp	r0, r1
   186c8:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   186cc:	bf38      	it	cc
   186ce:	4608      	movcc	r0, r1
  while (i-- > 0)
   186d0:	2a09      	cmp	r2, #9
    ptr += dataLen;
   186d2:	440b      	add	r3, r1
  while (i-- > 0)
   186d4:	d030      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   186d6:	7dd9      	ldrb	r1, [r3, #23]
   186d8:	4288      	cmp	r0, r1
   186da:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   186de:	bf38      	it	cc
   186e0:	4608      	movcc	r0, r1
  while (i-- > 0)
   186e2:	2a0a      	cmp	r2, #10
    ptr += dataLen;
   186e4:	440b      	add	r3, r1
  while (i-- > 0)
   186e6:	d027      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   186e8:	7dd9      	ldrb	r1, [r3, #23]
   186ea:	4288      	cmp	r0, r1
   186ec:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   186f0:	bf38      	it	cc
   186f2:	4608      	movcc	r0, r1
  while (i-- > 0)
   186f4:	2a0b      	cmp	r2, #11
    ptr += dataLen;
   186f6:	440b      	add	r3, r1
  while (i-- > 0)
   186f8:	d01e      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   186fa:	7dd9      	ldrb	r1, [r3, #23]
   186fc:	4288      	cmp	r0, r1
   186fe:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   18702:	bf38      	it	cc
   18704:	4608      	movcc	r0, r1
  while (i-- > 0)
   18706:	2a0c      	cmp	r2, #12
    ptr += dataLen;
   18708:	440b      	add	r3, r1
  while (i-- > 0)
   1870a:	d015      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   1870c:	7dd9      	ldrb	r1, [r3, #23]
   1870e:	4288      	cmp	r0, r1
   18710:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   18714:	bf38      	it	cc
   18716:	4608      	movcc	r0, r1
  while (i-- > 0)
   18718:	2a0d      	cmp	r2, #13
    ptr += dataLen;
   1871a:	440b      	add	r3, r1
  while (i-- > 0)
   1871c:	d00c      	beq.n	18738 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   1871e:	7dd9      	ldrb	r1, [r3, #23]
   18720:	4288      	cmp	r0, r1
   18722:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   18726:	bf38      	it	cc
   18728:	4608      	movcc	r0, r1
  while (i-- > 0)
   1872a:	2a0e      	cmp	r2, #14
    ptr += dataLen;
   1872c:	440b      	add	r3, r1
  while (i-- > 0)
   1872e:	d003      	beq.n	18738 <hciEvtProcessMsg+0x424>
    if (dataLen > maxLen)
   18730:	7ddb      	ldrb	r3, [r3, #23]
   18732:	4298      	cmp	r0, r3
   18734:	bf38      	it	cc
   18736:	4618      	movcc	r0, r3
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   18738:	3024      	adds	r0, #36	; 0x24
   1873a:	f005 fbcd 	bl	1ded8 <WsfBufAlloc>
   1873e:	4607      	mov	r7, r0
   18740:	2800      	cmp	r0, #0
   18742:	f43f ae42 	beq.w	183ca <hciEvtProcessMsg+0xb6>
    BSTREAM_TO_UINT8(i, p);
   18746:	78e3      	ldrb	r3, [r4, #3]
    while (i-- > 0)
   18748:	1e5c      	subs	r4, r3, #1
   1874a:	b2e4      	uxtb	r4, r4
   1874c:	2b00      	cmp	r3, #0
   1874e:	d040      	beq.n	187d2 <hciEvtProcessMsg+0x4be>
      BSTREAM_TO_BDA(pMsg->addr, p);
   18750:	f100 0a07 	add.w	sl, r0, #7
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   18754:	f100 0915 	add.w	r9, r0, #21
      pMsg->pData = (uint8_t *)(pMsg + 1);
   18758:	f100 0824 	add.w	r8, r0, #36	; 0x24
      pMsg->hdr.param = 0;
   1875c:	f44f 1b30 	mov.w	fp, #2883584	; 0x2c0000
   18760:	e00c      	b.n	1877c <hciEvtProcessMsg+0x468>
      pMsg->pData = (uint8_t *)(pMsg + 1);
   18762:	f8c7 8020 	str.w	r8, [r7, #32]
      memcpy(pMsg->pData, p, pMsg->len);
   18766:	f7f3 fccb 	bl	c100 <memcpy>
    while (i-- > 0)
   1876a:	3c01      	subs	r4, #1
      pMsg->hdr.param = 0;
   1876c:	f8c7 b000 	str.w	fp, [r7]
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   18770:	68b3      	ldr	r3, [r6, #8]
   18772:	4638      	mov	r0, r7
    while (i-- > 0)
   18774:	b2e4      	uxtb	r4, r4
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   18776:	4798      	blx	r3
    while (i-- > 0)
   18778:	2cff      	cmp	r4, #255	; 0xff
   1877a:	d02a      	beq.n	187d2 <hciEvtProcessMsg+0x4be>
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   1877c:	786a      	ldrb	r2, [r5, #1]
   1877e:	782b      	ldrb	r3, [r5, #0]
   18780:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   18784:	80bb      	strh	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   18786:	78ab      	ldrb	r3, [r5, #2]
   18788:	71bb      	strb	r3, [r7, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   1878a:	1ce9      	adds	r1, r5, #3
   1878c:	4650      	mov	r0, sl
   1878e:	f7fd f895 	bl	158bc <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   18792:	7a6b      	ldrb	r3, [r5, #9]
   18794:	737b      	strb	r3, [r7, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   18796:	7aab      	ldrb	r3, [r5, #10]
   18798:	73bb      	strb	r3, [r7, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   1879a:	7aeb      	ldrb	r3, [r5, #11]
   1879c:	73fb      	strb	r3, [r7, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   1879e:	7b2b      	ldrb	r3, [r5, #12]
   187a0:	743b      	strb	r3, [r7, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   187a2:	7b6b      	ldrb	r3, [r5, #13]
   187a4:	747b      	strb	r3, [r7, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   187a6:	7bea      	ldrb	r2, [r5, #15]
   187a8:	7bab      	ldrb	r3, [r5, #14]
   187aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   187ae:	827b      	strh	r3, [r7, #18]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   187b0:	7c2b      	ldrb	r3, [r5, #16]
   187b2:	753b      	strb	r3, [r7, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   187b4:	f105 0111 	add.w	r1, r5, #17
   187b8:	4648      	mov	r0, r9
   187ba:	f7fd f87f 	bl	158bc <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->len, p);
   187be:	7dea      	ldrb	r2, [r5, #23]
   187c0:	b293      	uxth	r3, r2
   187c2:	f105 0118 	add.w	r1, r5, #24
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   187c6:	2be5      	cmp	r3, #229	; 0xe5
      memcpy(pMsg->pData, p, pMsg->len);
   187c8:	4640      	mov	r0, r8
      p += pMsg->len;
   187ca:	eb01 0502 	add.w	r5, r1, r2
      BSTREAM_TO_UINT8(pMsg->len, p);
   187ce:	83bb      	strh	r3, [r7, #28]
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   187d0:	d9c7      	bls.n	18762 <hciEvtProcessMsg+0x44e>
    WsfBufFree(pMsg);
   187d2:	4638      	mov	r0, r7
}
   187d4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    WsfBufFree(pMsg);
   187d8:	f005 bbae 	b.w	1df38 <WsfBufFree>
  if (cbackEvt != 0)
   187dc:	4e46      	ldr	r6, [pc, #280]	; (188f8 <hciEvtProcessMsg+0x5e4>)
   187de:	200a      	movs	r0, #10
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   187e0:	f04f 092b 	mov.w	r9, #43	; 0x2b
   187e4:	e5dd      	b.n	183a2 <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   187e6:	4e45      	ldr	r6, [pc, #276]	; (188fc <hciEvtProcessMsg+0x5e8>)
   187e8:	200a      	movs	r0, #10
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   187ea:	f04f 092e 	mov.w	r9, #46	; 0x2e
   187ee:	e5d8      	b.n	183a2 <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   187f0:	4e43      	ldr	r6, [pc, #268]	; (18900 <hciEvtProcessMsg+0x5ec>)
   187f2:	2004      	movs	r0, #4
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   187f4:	f04f 092d 	mov.w	r9, #45	; 0x2d
   187f8:	e5d3      	b.n	183a2 <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   187fa:	4e42      	ldr	r6, [pc, #264]	; (18904 <hciEvtProcessMsg+0x5f0>)
   187fc:	2006      	movs	r0, #6
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   187fe:	f04f 0932 	mov.w	r9, #50	; 0x32
   18802:	e5ce      	b.n	183a2 <hciEvtProcessMsg+0x8e>
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   18804:	7a60      	ldrb	r0, [r4, #9]
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   18806:	28f7      	cmp	r0, #247	; 0xf7
   18808:	f63f addf 	bhi.w	183ca <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   1880c:	3010      	adds	r0, #16
   1880e:	f005 fb63 	bl	1ded8 <WsfBufAlloc>
   18812:	4605      	mov	r5, r0
   18814:	2800      	cmp	r0, #0
   18816:	f43f add8 	beq.w	183ca <hciEvtProcessMsg+0xb6>
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   1881a:	7922      	ldrb	r2, [r4, #4]
   1881c:	78e3      	ldrb	r3, [r4, #3]
   1881e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   18822:	8083      	strh	r3, [r0, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   18824:	7963      	ldrb	r3, [r4, #5]
   18826:	7183      	strb	r3, [r0, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   18828:	79a3      	ldrb	r3, [r4, #6]
   1882a:	71c3      	strb	r3, [r0, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   1882c:	79e3      	ldrb	r3, [r4, #7]
   1882e:	7203      	strb	r3, [r0, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   18830:	7a27      	ldrb	r7, [r4, #8]
   18832:	7247      	strb	r7, [r0, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   18834:	7a62      	ldrb	r2, [r4, #9]
   18836:	8142      	strh	r2, [r0, #10]
    pMsg->pData = (uint8_t *)(pMsg + 1);
   18838:	3010      	adds	r0, #16
    memcpy(pMsg->pData, p, pMsg->len);
   1883a:	f104 010a 	add.w	r1, r4, #10
    pMsg->pData = (uint8_t *)(pMsg + 1);
   1883e:	60e8      	str	r0, [r5, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   18840:	f7f3 fc5e 	bl	c100 <memcpy>
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   18844:	2331      	movs	r3, #49	; 0x31
   18846:	70ab      	strb	r3, [r5, #2]
    pMsg->hdr.status = pMsg->status;
   18848:	70ef      	strb	r7, [r5, #3]
    pMsg->hdr.param = 0;
   1884a:	2200      	movs	r2, #0
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   1884c:	68b3      	ldr	r3, [r6, #8]
    pMsg->hdr.param = 0;
   1884e:	802a      	strh	r2, [r5, #0]
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   18850:	4628      	mov	r0, r5
   18852:	4798      	blx	r3
    WsfBufFree(pMsg);
   18854:	4628      	mov	r0, r5
}
   18856:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    WsfBufFree(pMsg);
   1885a:	f005 bb6d 	b.w	1df38 <WsfBufFree>
    if ((pMsg = WsfBufAlloc(sizeof(hciLeConlessIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
   1885e:	20c0      	movs	r0, #192	; 0xc0
   18860:	f005 fb3a 	bl	1ded8 <WsfBufAlloc>
   18864:	4605      	mov	r5, r0
   18866:	2800      	cmp	r0, #0
   18868:	f43f adaf 	beq.w	183ca <hciEvtProcessMsg+0xb6>
        APP_TRACE_INFO0("rcv Le Conntless IQ Report...");
   1886c:	4826      	ldr	r0, [pc, #152]	; (18908 <hciEvtProcessMsg+0x5f4>)
   1886e:	f005 ff13 	bl	1e698 <WsfTrace>
        BSTREAM_TO_UINT16(pMsg->synHdl, p);
   18872:	7923      	ldrb	r3, [r4, #4]
   18874:	78e7      	ldrb	r7, [r4, #3]
   18876:	eb07 2703 	add.w	r7, r7, r3, lsl #8
   1887a:	b2bf      	uxth	r7, r7
   1887c:	80af      	strh	r7, [r5, #4]
        BSTREAM_TO_UINT8(pMsg->chIdx, p);
   1887e:	7963      	ldrb	r3, [r4, #5]
   18880:	71ab      	strb	r3, [r5, #6]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
   18882:	79e2      	ldrb	r2, [r4, #7]
   18884:	79a3      	ldrb	r3, [r4, #6]
   18886:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1888a:	812b      	strh	r3, [r5, #8]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
   1888c:	7a23      	ldrb	r3, [r4, #8]
   1888e:	72ab      	strb	r3, [r5, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
   18890:	7a63      	ldrb	r3, [r4, #9]
   18892:	72eb      	strb	r3, [r5, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
   18894:	7aa3      	ldrb	r3, [r4, #10]
   18896:	732b      	strb	r3, [r5, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
   18898:	f894 900b 	ldrb.w	r9, [r4, #11]
   1889c:	f885 900d 	strb.w	r9, [r5, #13]
        BSTREAM_TO_UINT16(pMsg->paEvtCnt, p);
   188a0:	7b62      	ldrb	r2, [r4, #13]
   188a2:	7b23      	ldrb	r3, [r4, #12]
   188a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   188a8:	81eb      	strh	r3, [r5, #14]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   188aa:	f894 800e 	ldrb.w	r8, [r4, #14]
   188ae:	f885 8010 	strb.w	r8, [r5, #16]
        pMsg->pISample = (int8_t *) (pMsg + 1);
   188b2:	f105 031c 	add.w	r3, r5, #28
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   188b6:	340f      	adds	r4, #15
        pMsg->pISample = (int8_t *) (pMsg + 1);
   188b8:	616b      	str	r3, [r5, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   188ba:	4642      	mov	r2, r8
   188bc:	4621      	mov	r1, r4
   188be:	4618      	mov	r0, r3
   188c0:	f7f3 fc1e 	bl	c100 <memcpy>
        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
   188c4:	f105 036e 	add.w	r3, r5, #110	; 0x6e
   188c8:	61ab      	str	r3, [r5, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   188ca:	eb04 0108 	add.w	r1, r4, r8
   188ce:	4642      	mov	r2, r8
   188d0:	f7f3 fc16 	bl	c100 <memcpy>
        pMsg->hdr.event = HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT;
   188d4:	2347      	movs	r3, #71	; 0x47
        pMsg->hdr.status = pMsg->pktStatus;
   188d6:	f885 9003 	strb.w	r9, [r5, #3]
        pMsg->hdr.event = HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT;
   188da:	70ab      	strb	r3, [r5, #2]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   188dc:	68b3      	ldr	r3, [r6, #8]
        pMsg->hdr.param = pMsg->synHdl;
   188de:	802f      	strh	r7, [r5, #0]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   188e0:	e7b6      	b.n	18850 <hciEvtProcessMsg+0x53c>
  if (cbackEvt != 0)
   188e2:	4e0a      	ldr	r6, [pc, #40]	; (1890c <hciEvtProcessMsg+0x5f8>)
   188e4:	200c      	movs	r0, #12
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   188e6:	f04f 092f 	mov.w	r9, #47	; 0x2f
   188ea:	e55a      	b.n	183a2 <hciEvtProcessMsg+0x8e>
   188ec:	00018021 	.word	0x00018021
   188f0:	000269ec 	.word	0x000269ec
   188f4:	00017dd9 	.word	0x00017dd9
   188f8:	00017d1d 	.word	0x00017d1d
   188fc:	00017d45 	.word	0x00017d45
   18900:	00017d41 	.word	0x00017d41
   18904:	00017dcd 	.word	0x00017dcd
   18908:	00026a00 	.word	0x00026a00
   1890c:	00017e15 	.word	0x00017e15
    APP_TRACE_INFO0("hciEvtProcessLeConnIQReport");
   18910:	4861      	ldr	r0, [pc, #388]	; (18a98 <hciEvtProcessMsg+0x784>)
   18912:	f005 fec1 	bl	1e698 <WsfTrace>
    if ((pMsg = WsfBufAlloc(sizeof(hciLeConnIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
   18916:	20c0      	movs	r0, #192	; 0xc0
   18918:	f005 fade 	bl	1ded8 <WsfBufAlloc>
   1891c:	4605      	mov	r5, r0
   1891e:	2800      	cmp	r0, #0
   18920:	f43f ad53 	beq.w	183ca <hciEvtProcessMsg+0xb6>
        APP_TRACE_INFO0("rcv Le ConnIQ Report...");
   18924:	485d      	ldr	r0, [pc, #372]	; (18a9c <hciEvtProcessMsg+0x788>)
   18926:	f005 feb7 	bl	1e698 <WsfTrace>
        BSTREAM_TO_UINT16(pMsg->handle, p);
   1892a:	7923      	ldrb	r3, [r4, #4]
   1892c:	78e7      	ldrb	r7, [r4, #3]
   1892e:	eb07 2703 	add.w	r7, r7, r3, lsl #8
   18932:	b2bf      	uxth	r7, r7
   18934:	80af      	strh	r7, [r5, #4]
        BSTREAM_TO_UINT8(pMsg->rxPhy, p);
   18936:	7963      	ldrb	r3, [r4, #5]
   18938:	71ab      	strb	r3, [r5, #6]
        BSTREAM_TO_UINT8(pMsg->dataChIdx, p);
   1893a:	79a3      	ldrb	r3, [r4, #6]
   1893c:	71eb      	strb	r3, [r5, #7]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
   1893e:	7a22      	ldrb	r2, [r4, #8]
   18940:	79e3      	ldrb	r3, [r4, #7]
   18942:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   18946:	812b      	strh	r3, [r5, #8]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
   18948:	7a63      	ldrb	r3, [r4, #9]
   1894a:	72ab      	strb	r3, [r5, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
   1894c:	7aa3      	ldrb	r3, [r4, #10]
   1894e:	72eb      	strb	r3, [r5, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
   18950:	7ae3      	ldrb	r3, [r4, #11]
   18952:	732b      	strb	r3, [r5, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
   18954:	f894 900c 	ldrb.w	r9, [r4, #12]
   18958:	f885 900d 	strb.w	r9, [r5, #13]
        BSTREAM_TO_UINT16(pMsg->connEvtCnt, p);
   1895c:	7ba2      	ldrb	r2, [r4, #14]
   1895e:	7b63      	ldrb	r3, [r4, #13]
   18960:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   18964:	81eb      	strh	r3, [r5, #14]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   18966:	f894 800f 	ldrb.w	r8, [r4, #15]
   1896a:	f885 8010 	strb.w	r8, [r5, #16]
        pMsg->pISample = (int8_t *) (pMsg + 1);
   1896e:	f105 031c 	add.w	r3, r5, #28
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   18972:	3410      	adds	r4, #16
        pMsg->pISample = (int8_t *) (pMsg + 1);
   18974:	616b      	str	r3, [r5, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   18976:	4642      	mov	r2, r8
   18978:	4621      	mov	r1, r4
   1897a:	4618      	mov	r0, r3
   1897c:	f7f3 fbc0 	bl	c100 <memcpy>
        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
   18980:	f105 036e 	add.w	r3, r5, #110	; 0x6e
   18984:	61ab      	str	r3, [r5, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   18986:	eb04 0108 	add.w	r1, r4, r8
   1898a:	4642      	mov	r2, r8
   1898c:	f7f3 fbb8 	bl	c100 <memcpy>
        pMsg->hdr.event = HCI_LE_CONN_IQ_REPORT_CBACK_EVT;
   18990:	233d      	movs	r3, #61	; 0x3d
        pMsg->hdr.status = pMsg->pktStatus;
   18992:	f885 9003 	strb.w	r9, [r5, #3]
        pMsg->hdr.event = HCI_LE_CONN_IQ_REPORT_CBACK_EVT;
   18996:	70ab      	strb	r3, [r5, #2]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   18998:	68b3      	ldr	r3, [r6, #8]
        pMsg->hdr.param = pMsg->handle;
   1899a:	802f      	strh	r7, [r5, #0]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   1899c:	e758      	b.n	18850 <hciEvtProcessMsg+0x53c>
          if (*pEvt == HCI_SUCCESS)
   1899e:	78e3      	ldrb	r3, [r4, #3]
   189a0:	2b00      	cmp	r3, #0
   189a2:	d061      	beq.n	18a68 <hciEvtProcessMsg+0x754>
   189a4:	4e3e      	ldr	r6, [pc, #248]	; (18aa0 <hciEvtProcessMsg+0x78c>)
   189a6:	2024      	movs	r0, #36	; 0x24
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   189a8:	f04f 0902 	mov.w	r9, #2
   189ac:	e4f9      	b.n	183a2 <hciEvtProcessMsg+0x8e>
          cback = hciCb.secCback;
   189ae:	2026      	movs	r0, #38	; 0x26
   189b0:	68f7      	ldr	r7, [r6, #12]
   189b2:	4e3c      	ldr	r6, [pc, #240]	; (18aa4 <hciEvtProcessMsg+0x790>)
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   189b4:	4681      	mov	r9, r0
   189b6:	e4f4      	b.n	183a2 <hciEvtProcessMsg+0x8e>
          cback = hciCb.secCback;
   189b8:	68f7      	ldr	r7, [r6, #12]
   189ba:	4e3b      	ldr	r6, [pc, #236]	; (18aa8 <hciEvtProcessMsg+0x794>)
   189bc:	2046      	movs	r0, #70	; 0x46
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   189be:	f04f 0925 	mov.w	r9, #37	; 0x25
   189c2:	e4ee      	b.n	183a2 <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   189c4:	4e39      	ldr	r6, [pc, #228]	; (18aac <hciEvtProcessMsg+0x798>)
   189c6:	200e      	movs	r0, #14
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   189c8:	f04f 0924 	mov.w	r9, #36	; 0x24
   189cc:	e4e9      	b.n	183a2 <hciEvtProcessMsg+0x8e>
  BSTREAM_TO_UINT8(i, p);
   189ce:	78e7      	ldrb	r7, [r4, #3]
  if (i > HCI_MAX_REPORTS)
   189d0:	2f0f      	cmp	r7, #15
   189d2:	f63f acfa 	bhi.w	183ca <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   189d6:	201c      	movs	r0, #28
   189d8:	f005 fa7e 	bl	1ded8 <WsfBufAlloc>
   189dc:	4605      	mov	r5, r0
   189de:	2800      	cmp	r0, #0
   189e0:	f43f acf3 	beq.w	183ca <hciEvtProcessMsg+0xb6>
    while (i-- > 0)
   189e4:	1e7b      	subs	r3, r7, #1
   189e6:	b2db      	uxtb	r3, r3
   189e8:	2f00      	cmp	r7, #0
   189ea:	f43f af33 	beq.w	18854 <hciEvtProcessMsg+0x540>
   189ee:	f104 0816 	add.w	r8, r4, #22
      BSTREAM_TO_BDA(pMsg->addr, p);
   189f2:	f100 0a0c 	add.w	sl, r0, #12
   189f6:	eb08 1803 	add.w	r8, r8, r3, lsl #4
   189fa:	3406      	adds	r4, #6
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   189fc:	f100 0b13 	add.w	fp, r0, #19
      pMsg->hdr.param = 0;
   18a00:	f44f 29c0 	mov.w	r9, #393216	; 0x60000
      pMsg->pData = NULL;
   18a04:	2700      	movs	r7, #0
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   18a06:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   18a0a:	72ab      	strb	r3, [r5, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   18a0c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   18a10:	72eb      	strb	r3, [r5, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   18a12:	4621      	mov	r1, r4
   18a14:	4650      	mov	r0, sl
   18a16:	f7fc ff51 	bl	158bc <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   18a1a:	79a3      	ldrb	r3, [r4, #6]
   18a1c:	74ab      	strb	r3, [r5, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   18a1e:	1de1      	adds	r1, r4, #7
   18a20:	4658      	mov	r0, fp
   18a22:	f7fc ff4b 	bl	158bc <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   18a26:	7b63      	ldrb	r3, [r4, #13]
   18a28:	726b      	strb	r3, [r5, #9]
      pMsg->hdr.param = 0;
   18a2a:	f8c5 9000 	str.w	r9, [r5]
      pMsg->len = 0;
   18a2e:	722f      	strb	r7, [r5, #8]
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   18a30:	68b3      	ldr	r3, [r6, #8]
      pMsg->pData = NULL;
   18a32:	606f      	str	r7, [r5, #4]
    while (i-- > 0)
   18a34:	3410      	adds	r4, #16
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   18a36:	4628      	mov	r0, r5
   18a38:	4798      	blx	r3
    while (i-- > 0)
   18a3a:	4544      	cmp	r4, r8
   18a3c:	d1e3      	bne.n	18a06 <hciEvtProcessMsg+0x6f2>
   18a3e:	e709      	b.n	18854 <hciEvtProcessMsg+0x540>
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   18a40:	200e      	movs	r0, #14
   18a42:	f005 fa49 	bl	1ded8 <WsfBufAlloc>
   18a46:	4604      	mov	r4, r0
   18a48:	2800      	cmp	r0, #0
   18a4a:	f43f acbe 	beq.w	183ca <hciEvtProcessMsg+0xb6>
      pMsg->hdr.param = 0;
   18a4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18a52:	6003      	str	r3, [r0, #0]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   18a54:	4642      	mov	r2, r8
   18a56:	4629      	mov	r1, r5
   18a58:	f7fe ffd0 	bl	179fc <hciEvtParseLeConnUpdateCmpl>
      (*cback)(pMsg);
   18a5c:	47b8      	blx	r7
      WsfBufFree(pMsg);
   18a5e:	4620      	mov	r0, r4
}
   18a60:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      WsfBufFree(pMsg);
   18a64:	f005 ba68 	b.w	1df38 <WsfBufFree>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   18a68:	7963      	ldrb	r3, [r4, #5]
   18a6a:	7920      	ldrb	r0, [r4, #4]
            hciCoreConnOpen(handle);
   18a6c:	4e0c      	ldr	r6, [pc, #48]	; (18aa0 <hciEvtProcessMsg+0x78c>)
            BYTES_TO_UINT16(handle, (pEvt + 1));
   18a6e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
            hciCoreConnOpen(handle);
   18a72:	b280      	uxth	r0, r0
   18a74:	f7fe fc28 	bl	172c8 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   18a78:	f04f 0902 	mov.w	r9, #2
            hciCoreConnOpen(handle);
   18a7c:	2024      	movs	r0, #36	; 0x24
   18a7e:	e490      	b.n	183a2 <hciEvtProcessMsg+0x8e>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   18a80:	7963      	ldrb	r3, [r4, #5]
   18a82:	7920      	ldrb	r0, [r4, #4]
            hciCoreConnOpen(handle);
   18a84:	4e0a      	ldr	r6, [pc, #40]	; (18ab0 <hciEvtProcessMsg+0x79c>)
            BYTES_TO_UINT16(handle, (pEvt + 1));
   18a86:	eb00 2003 	add.w	r0, r0, r3, lsl #8
            hciCoreConnOpen(handle);
   18a8a:	b280      	uxth	r0, r0
   18a8c:	f7fe fc1c 	bl	172c8 <hciCoreConnOpen>
   18a90:	2024      	movs	r0, #36	; 0x24
   18a92:	e486      	b.n	183a2 <hciEvtProcessMsg+0x8e>
  maxLen = 0;
   18a94:	4610      	mov	r0, r2
   18a96:	e64f      	b.n	18738 <hciEvtProcessMsg+0x424>
   18a98:	000269b8 	.word	0x000269b8
   18a9c:	000269d4 	.word	0x000269d4
   18aa0:	00017e55 	.word	0x00017e55
   18aa4:	00017ebd 	.word	0x00017ebd
   18aa8:	00017f05 	.word	0x00017f05
   18aac:	00017c7d 	.word	0x00017c7d
   18ab0:	00018021 	.word	0x00018021

00018ab4 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   18ab4:	b570      	push	{r4, r5, r6, lr}
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   18ab6:	788c      	ldrb	r4, [r1, #2]
{
   18ab8:	460d      	mov	r5, r1
  BYTES_TO_UINT16(len, &pData[2]);
   18aba:	78c9      	ldrb	r1, [r1, #3]
  len += HCI_ACL_HDR_LEN;
   18abc:	3404      	adds	r4, #4
   18abe:	eb04 2401 	add.w	r4, r4, r1, lsl #8
   18ac2:	b2a4      	uxth	r4, r4

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   18ac4:	462a      	mov	r2, r5
   18ac6:	4621      	mov	r1, r4
{
   18ac8:	4606      	mov	r6, r0
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   18aca:	2002      	movs	r0, #2
   18acc:	f000 fb70 	bl	191b0 <hciDrvWrite>
   18ad0:	42a0      	cmp	r0, r4
   18ad2:	d000      	beq.n	18ad6 <hciTrSendAclData+0x22>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
  }
}
   18ad4:	bd70      	pop	{r4, r5, r6, pc}
    hciCoreTxAclComplete(pContext, pData);
   18ad6:	4629      	mov	r1, r5
   18ad8:	4630      	mov	r0, r6
}
   18ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hciCoreTxAclComplete(pContext, pData);
   18ade:	f7fe bd53 	b.w	17588 <hciCoreTxAclComplete>
   18ae2:	bf00      	nop

00018ae4 <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   18ae4:	b538      	push	{r3, r4, r5, lr}
  uint16_t   len;  // in case like LE set periodic advertising data, the maximum HCI command parameter length is 255

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   18ae6:	7885      	ldrb	r5, [r0, #2]
   18ae8:	3503      	adds	r5, #3

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   18aea:	4602      	mov	r2, r0
{
   18aec:	4604      	mov	r4, r0
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   18aee:	4629      	mov	r1, r5
   18af0:	2001      	movs	r0, #1
   18af2:	f000 fb5d 	bl	191b0 <hciDrvWrite>
   18af6:	42a8      	cmp	r0, r5
   18af8:	d000      	beq.n	18afc <hciTrSendCmd+0x18>
  {
    /* free buffer */
    WsfMsgFree(pData);
  }
}
   18afa:	bd38      	pop	{r3, r4, r5, pc}
    WsfMsgFree(pData);
   18afc:	4620      	mov	r0, r4
}
   18afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgFree(pData);
   18b02:	f005 ba51 	b.w	1dfa8 <WsfMsgFree>
   18b06:	bf00      	nop

00018b08 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   18b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   18b0c:	460c      	mov	r4, r1
{
   18b0e:	b083      	sub	sp, #12
  while (len)
   18b10:	2900      	cmp	r1, #0
   18b12:	f000 80b9 	beq.w	18c88 <hciTrSerialRxIncoming+0x180>
   18b16:	f890 c000 	ldrb.w	ip, [r0]
   18b1a:	4f5e      	ldr	r7, [pc, #376]	; (18c94 <hciTrSerialRxIncoming+0x18c>)
    if (stateRx == HCI_RX_STATE_COMPLETE)
    {
      g_bHCIReceivingPacket = FALSE;

      /* deliver data */
      if (pPktRx != NULL)
   18b1c:	f8df a184 	ldr.w	sl, [pc, #388]	; 18ca4 <hciTrSerialRxIncoming+0x19c>
      g_bHCIReceivingPacket = FALSE;
   18b20:	f8df 9184 	ldr.w	r9, [pc, #388]	; 18ca8 <hciTrSerialRxIncoming+0x1a0>
   18b24:	f8df 8184 	ldr.w	r8, [pc, #388]	; 18cac <hciTrSerialRxIncoming+0x1a4>
   18b28:	4606      	mov	r6, r0
  consumed_bytes = 0;
   18b2a:	2500      	movs	r5, #0
    if (stateRx == HCI_RX_STATE_IDLE)
   18b2c:	783b      	ldrb	r3, [r7, #0]
   18b2e:	b993      	cbnz	r3, 18b56 <hciTrSerialRxIncoming+0x4e>
      stateRx  = HCI_RX_STATE_HEADER;
   18b30:	2201      	movs	r2, #1
      iRx      = 0;
   18b32:	4959      	ldr	r1, [pc, #356]	; (18c98 <hciTrSerialRxIncoming+0x190>)
      pktIndRx = dataByte;
   18b34:	f888 c000 	strb.w	ip, [r8]
      consumed_bytes++;
   18b38:	4415      	add	r5, r2
      len--;
   18b3a:	3c01      	subs	r4, #1
      iRx      = 0;
   18b3c:	800b      	strh	r3, [r1, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   18b3e:	703a      	strb	r2, [r7, #0]
      g_bHCIReceivingPacket = TRUE;
   18b40:	f889 2000 	strb.w	r2, [r9]
      pBuf++;
   18b44:	4416      	add	r6, r2
      consumed_bytes++;
   18b46:	b2ad      	uxth	r5, r5
      len--;
   18b48:	b2a4      	uxth	r4, r4
  while (len)
   18b4a:	b1cc      	cbz	r4, 18b80 <hciTrSerialRxIncoming+0x78>
    if (stateRx == HCI_RX_STATE_IDLE)
   18b4c:	783b      	ldrb	r3, [r7, #0]
   18b4e:	f896 c000 	ldrb.w	ip, [r6]
   18b52:	2b00      	cmp	r3, #0
   18b54:	d0ec      	beq.n	18b30 <hciTrSerialRxIncoming+0x28>
    else if (stateRx == HCI_RX_STATE_HEADER)
   18b56:	2b01      	cmp	r3, #1
   18b58:	d016      	beq.n	18b88 <hciTrSerialRxIncoming+0x80>
    else if (stateRx == HCI_RX_STATE_DATA)
   18b5a:	2b02      	cmp	r3, #2
   18b5c:	d054      	beq.n	18c08 <hciTrSerialRxIncoming+0x100>
    if (stateRx == HCI_RX_STATE_COMPLETE)
   18b5e:	2b03      	cmp	r3, #3
   18b60:	d1e4      	bne.n	18b2c <hciTrSerialRxIncoming+0x24>
      if (pPktRx != NULL)
   18b62:	f8da 3000 	ldr.w	r3, [sl]
      g_bHCIReceivingPacket = FALSE;
   18b66:	2200      	movs	r2, #0
   18b68:	f889 2000 	strb.w	r2, [r9]
      if (pPktRx != NULL)
   18b6c:	b123      	cbz	r3, 18b78 <hciTrSerialRxIncoming+0x70>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   18b6e:	f898 0000 	ldrb.w	r0, [r8]
   18b72:	4619      	mov	r1, r3
   18b74:	f7fe fecc 	bl	17910 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   18b78:	2300      	movs	r3, #0
   18b7a:	703b      	strb	r3, [r7, #0]
  while (len)
   18b7c:	2c00      	cmp	r4, #0
   18b7e:	d1e5      	bne.n	18b4c <hciTrSerialRxIncoming+0x44>
    }
  }
  return consumed_bytes;
}
   18b80:	4628      	mov	r0, r5
   18b82:	b003      	add	sp, #12
   18b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (pktIndRx == HCI_EVT_TYPE)
   18b88:	f898 1000 	ldrb.w	r1, [r8]
   18b8c:	2904      	cmp	r1, #4
   18b8e:	d050      	beq.n	18c32 <hciTrSerialRxIncoming+0x12a>
      else if (pktIndRx == HCI_ACL_TYPE)
   18b90:	2902      	cmp	r1, #2
   18b92:	d1f5      	bne.n	18b80 <hciTrSerialRxIncoming+0x78>
      if (iRx != hdrLen) {
   18b94:	f8df b100 	ldr.w	fp, [pc, #256]	; 18c98 <hciTrSerialRxIncoming+0x190>
   18b98:	f8bb 3000 	ldrh.w	r3, [fp]
   18b9c:	2b04      	cmp	r3, #4
   18b9e:	d05d      	beq.n	18c5c <hciTrSerialRxIncoming+0x154>
        hdrLen = HCI_ACL_HDR_LEN;
   18ba0:	2204      	movs	r2, #4
      if (iRx != hdrLen) {
   18ba2:	4610      	mov	r0, r2
        hdrRx[iRx++] = dataByte;
   18ba4:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 18c9c <hciTrSerialRxIncoming+0x194>
   18ba8:	f80e c003 	strb.w	ip, [lr, r3]
   18bac:	3301      	adds	r3, #1
   18bae:	b29b      	uxth	r3, r3
        consumed_bytes++;
   18bb0:	3501      	adds	r5, #1
        len--;
   18bb2:	3c01      	subs	r4, #1
      if (iRx == hdrLen)
   18bb4:	4283      	cmp	r3, r0
        pBuf++;
   18bb6:	f106 0601 	add.w	r6, r6, #1
        consumed_bytes++;
   18bba:	b2ad      	uxth	r5, r5
        len--;
   18bbc:	b2a4      	uxth	r4, r4
        hdrRx[iRx++] = dataByte;
   18bbe:	f8ab 3000 	strh.w	r3, [fp]
      if (iRx == hdrLen)
   18bc2:	d1c2      	bne.n	18b4a <hciTrSerialRxIncoming+0x42>
        if (pktIndRx == HCI_EVT_TYPE)
   18bc4:	2904      	cmp	r1, #4
   18bc6:	d061      	beq.n	18c8c <hciTrSerialRxIncoming+0x184>
        else if (pktIndRx == HCI_ACL_TYPE)
   18bc8:	2902      	cmp	r1, #2
   18bca:	d061      	beq.n	18c90 <hciTrSerialRxIncoming+0x188>
      uint16_t dataLen = 0;
   18bcc:	2300      	movs	r3, #0
   18bce:	9300      	str	r3, [sp, #0]
   18bd0:	9201      	str	r2, [sp, #4]
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   18bd2:	f005 f9e1 	bl	1df98 <WsfMsgAlloc>
   18bd6:	9a01      	ldr	r2, [sp, #4]
   18bd8:	f8ca 0000 	str.w	r0, [sl]
   18bdc:	4603      	mov	r3, r0
        if (pPktRx != NULL)
   18bde:	2b00      	cmp	r3, #0
   18be0:	d0ce      	beq.n	18b80 <hciTrSerialRxIncoming+0x78>
              *pDataRx++ = hdrRx[i];
   18be2:	492e      	ldr	r1, [pc, #184]	; (18c9c <hciTrSerialRxIncoming+0x194>)
   18be4:	9201      	str	r2, [sp, #4]
   18be6:	4618      	mov	r0, r3
   18be8:	f7f3 fa8a 	bl	c100 <memcpy>
   18bec:	9a01      	ldr	r2, [sp, #4]
   18bee:	492c      	ldr	r1, [pc, #176]	; (18ca0 <hciTrSerialRxIncoming+0x198>)
   18bf0:	4603      	mov	r3, r0
          iRx = dataLen;
   18bf2:	9800      	ldr	r0, [sp, #0]
   18bf4:	f8ab 0000 	strh.w	r0, [fp]
              *pDataRx++ = hdrRx[i];
   18bf8:	441a      	add	r2, r3
   18bfa:	600a      	str	r2, [r1, #0]
          if (iRx == 0)
   18bfc:	bb10      	cbnz	r0, 18c44 <hciTrSerialRxIncoming+0x13c>
            stateRx = HCI_RX_STATE_COMPLETE;
   18bfe:	2203      	movs	r2, #3
      g_bHCIReceivingPacket = FALSE;
   18c00:	f889 0000 	strb.w	r0, [r9]
            stateRx = HCI_RX_STATE_COMPLETE;
   18c04:	703a      	strb	r2, [r7, #0]
      if (pPktRx != NULL)
   18c06:	e7b2      	b.n	18b6e <hciTrSerialRxIncoming+0x66>
      *pDataRx++ = dataByte;
   18c08:	4925      	ldr	r1, [pc, #148]	; (18ca0 <hciTrSerialRxIncoming+0x198>)
      iRx--;
   18c0a:	4a23      	ldr	r2, [pc, #140]	; (18c98 <hciTrSerialRxIncoming+0x190>)
      *pDataRx++ = dataByte;
   18c0c:	680b      	ldr	r3, [r1, #0]
   18c0e:	f883 c000 	strb.w	ip, [r3]
   18c12:	3301      	adds	r3, #1
   18c14:	600b      	str	r3, [r1, #0]
      iRx--;
   18c16:	8813      	ldrh	r3, [r2, #0]
   18c18:	3b01      	subs	r3, #1
   18c1a:	b29b      	uxth	r3, r3
      consumed_bytes++;
   18c1c:	3501      	adds	r5, #1
      len--;
   18c1e:	3c01      	subs	r4, #1
      iRx--;
   18c20:	8013      	strh	r3, [r2, #0]
      pBuf++;
   18c22:	3601      	adds	r6, #1
      consumed_bytes++;
   18c24:	b2ad      	uxth	r5, r5
      len--;
   18c26:	b2a4      	uxth	r4, r4
      if (iRx == 0)
   18c28:	2b00      	cmp	r3, #0
   18c2a:	d18e      	bne.n	18b4a <hciTrSerialRxIncoming+0x42>
        stateRx = HCI_RX_STATE_COMPLETE;
   18c2c:	2303      	movs	r3, #3
   18c2e:	703b      	strb	r3, [r7, #0]
    if (stateRx == HCI_RX_STATE_COMPLETE)
   18c30:	e797      	b.n	18b62 <hciTrSerialRxIncoming+0x5a>
      if (iRx != hdrLen) {
   18c32:	f8df b064 	ldr.w	fp, [pc, #100]	; 18c98 <hciTrSerialRxIncoming+0x190>
   18c36:	f8bb 3000 	ldrh.w	r3, [fp]
   18c3a:	2b02      	cmp	r3, #2
   18c3c:	d005      	beq.n	18c4a <hciTrSerialRxIncoming+0x142>
        hdrLen = HCI_EVT_HDR_LEN;
   18c3e:	2202      	movs	r2, #2
      if (iRx != hdrLen) {
   18c40:	4610      	mov	r0, r2
   18c42:	e7af      	b.n	18ba4 <hciTrSerialRxIncoming+0x9c>
            stateRx = HCI_RX_STATE_DATA;
   18c44:	2302      	movs	r3, #2
   18c46:	703b      	strb	r3, [r7, #0]
   18c48:	e77f      	b.n	18b4a <hciTrSerialRxIncoming+0x42>
   18c4a:	f8df e050 	ldr.w	lr, [pc, #80]	; 18c9c <hciTrSerialRxIncoming+0x194>
        hdrLen = HCI_EVT_HDR_LEN;
   18c4e:	461a      	mov	r2, r3
          dataLen = hdrRx[1];
   18c50:	f89e 1001 	ldrb.w	r1, [lr, #1]
   18c54:	9100      	str	r1, [sp, #0]
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   18c56:	440b      	add	r3, r1
   18c58:	b298      	uxth	r0, r3
   18c5a:	e7b9      	b.n	18bd0 <hciTrSerialRxIncoming+0xc8>
   18c5c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 18c9c <hciTrSerialRxIncoming+0x194>
        hdrLen = HCI_ACL_HDR_LEN;
   18c60:	461a      	mov	r2, r3
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   18c62:	f89e 0003 	ldrb.w	r0, [lr, #3]
   18c66:	f89e 1002 	ldrb.w	r1, [lr, #2]
   18c6a:	9201      	str	r2, [sp, #4]
   18c6c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   18c70:	b28a      	uxth	r2, r1
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   18c72:	4413      	add	r3, r2
   18c74:	b298      	uxth	r0, r3
   18c76:	2100      	movs	r1, #0
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   18c78:	9200      	str	r2, [sp, #0]
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   18c7a:	f005 f983 	bl	1df84 <WsfMsgDataAlloc>
   18c7e:	9a01      	ldr	r2, [sp, #4]
   18c80:	f8ca 0000 	str.w	r0, [sl]
   18c84:	4603      	mov	r3, r0
   18c86:	e7aa      	b.n	18bde <hciTrSerialRxIncoming+0xd6>
  consumed_bytes = 0;
   18c88:	460d      	mov	r5, r1
   18c8a:	e779      	b.n	18b80 <hciTrSerialRxIncoming+0x78>
   18c8c:	4603      	mov	r3, r0
   18c8e:	e7df      	b.n	18c50 <hciTrSerialRxIncoming+0x148>
   18c90:	4603      	mov	r3, r0
   18c92:	e7e6      	b.n	18c62 <hciTrSerialRxIncoming+0x15a>
   18c94:	10004fb9 	.word	0x10004fb9
   18c98:	10004fac 	.word	0x10004fac
   18c9c:	10004fa8 	.word	0x10004fa8
   18ca0:	10004fb0 	.word	0x10004fb0
   18ca4:	10004fb4 	.word	0x10004fb4
   18ca8:	10004fa4 	.word	0x10004fa4
   18cac:	10004fb8 	.word	0x10004fb8

00018cb0 <DisDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DisDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   18cb0:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attDisSvcUuid,
   18cb2:	4b06      	ldr	r3, [pc, #24]	; (18ccc <DisDiscover+0x1c>)
   18cb4:	4a06      	ldr	r2, [pc, #24]	; (18cd0 <DisDiscover+0x20>)
{
   18cb6:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attDisSvcUuid,
   18cb8:	e9cd 3100 	strd	r3, r1, [sp]
   18cbc:	2307      	movs	r3, #7
   18cbe:	2102      	movs	r1, #2
   18cc0:	f006 f80e 	bl	1ece0 <AppDiscFindService>
                     DIS_HDL_LIST_LEN, (attcDiscChar_t **) disDiscCharList, pHdlList);
}
   18cc4:	b003      	add	sp, #12
   18cc6:	f85d fb04 	ldr.w	pc, [sp], #4
   18cca:	bf00      	nop
   18ccc:	10002bf8 	.word	0x10002bf8
   18cd0:	0002681c 	.word	0x0002681c

00018cd4 <DisValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t DisValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   18cd4:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = ATT_SUCCESS;

  /* manufacturer name string */
  if (pMsg->handle == pHdlList[DIS_MFNS_HDL_IDX])
   18cd6:	8802      	ldrh	r2, [r0, #0]
   18cd8:	894b      	ldrh	r3, [r1, #10]
   18cda:	429a      	cmp	r2, r3
   18cdc:	d013      	beq.n	18d06 <DisValueUpdate+0x32>
  {
    APP_TRACE_INFO1("Mfgr: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
  }
  /* model number string */
  else if (pMsg->handle == pHdlList[DIS_MNS_HDL_IDX])
   18cde:	8842      	ldrh	r2, [r0, #2]
   18ce0:	429a      	cmp	r2, r3
   18ce2:	d03b      	beq.n	18d5c <DisValueUpdate+0x88>
  {
    APP_TRACE_INFO1("Model num: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
  }
  /* serial number string */
  else if (pMsg->handle == pHdlList[DIS_SNS_HDL_IDX])
   18ce4:	8882      	ldrh	r2, [r0, #4]
   18ce6:	429a      	cmp	r2, r3
   18ce8:	d04b      	beq.n	18d82 <DisValueUpdate+0xae>
  {
    APP_TRACE_INFO1("Serial num: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
  }
  /* hardware revision string */
  else if (pMsg->handle == pHdlList[DIS_HRS_HDL_IDX])
   18cea:	88c2      	ldrh	r2, [r0, #6]
   18cec:	429a      	cmp	r2, r3
   18cee:	d022      	beq.n	18d36 <DisValueUpdate+0x62>
  {
    APP_TRACE_INFO1("Hardware rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
  }
  /* firmware revision string */
  else if (pMsg->handle == pHdlList[DIS_FRS_HDL_IDX])
   18cf0:	8902      	ldrh	r2, [r0, #8]
   18cf2:	429a      	cmp	r2, r3
   18cf4:	d058      	beq.n	18da8 <DisValueUpdate+0xd4>
  {
    APP_TRACE_INFO1("Firmware rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
  }
  /* software revision string */
  else if (pMsg->handle == pHdlList[DIS_SRS_HDL_IDX])
   18cf6:	8942      	ldrh	r2, [r0, #10]
   18cf8:	429a      	cmp	r2, r3
   18cfa:	d068      	beq.n	18dce <DisValueUpdate+0xfa>
  {
    APP_TRACE_INFO1("Software rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
  }
  /* system id */
  else if (pMsg->handle == pHdlList[DIS_SID_HDL_IDX])
   18cfc:	8982      	ldrh	r2, [r0, #12]
   18cfe:	429a      	cmp	r2, r3
   18d00:	d014      	beq.n	18d2c <DisValueUpdate+0x58>
    }
  }
  /* handle not found in list */
  else
  {
    status = ATT_ERR_NOT_FOUND;
   18d02:	200a      	movs	r0, #10
  }

  return status;
}
   18d04:	bd38      	pop	{r3, r4, r5, pc}
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18d06:	890d      	ldrh	r5, [r1, #8]
  memcpy(buf, pValue, len);
   18d08:	4b3d      	ldr	r3, [pc, #244]	; (18e00 <DisValueUpdate+0x12c>)
   18d0a:	6849      	ldr	r1, [r1, #4]
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18d0c:	2d14      	cmp	r5, #20
   18d0e:	bf28      	it	cs
   18d10:	2514      	movcs	r5, #20
  memcpy(buf, pValue, len);
   18d12:	462a      	mov	r2, r5
   18d14:	4618      	mov	r0, r3
   18d16:	f7f3 f9f3 	bl	c100 <memcpy>
   18d1a:	4603      	mov	r3, r0
  buf[len] = '\0';
   18d1c:	2400      	movs	r4, #0
    APP_TRACE_INFO1("Mfgr: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18d1e:	4839      	ldr	r0, [pc, #228]	; (18e04 <DisValueUpdate+0x130>)
  buf[len] = '\0';
   18d20:	555c      	strb	r4, [r3, r5]
    APP_TRACE_INFO1("Mfgr: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18d22:	4619      	mov	r1, r3
   18d24:	f005 fcb8 	bl	1e698 <WsfTrace>
  uint8_t status = ATT_SUCCESS;
   18d28:	4620      	mov	r0, r4
}
   18d2a:	bd38      	pop	{r3, r4, r5, pc}
    if (pMsg->valueLen == CH_SYSTEM_ID_LEN)
   18d2c:	890b      	ldrh	r3, [r1, #8]
   18d2e:	2b08      	cmp	r3, #8
   18d30:	d060      	beq.n	18df4 <DisValueUpdate+0x120>
  uint8_t status = ATT_SUCCESS;
   18d32:	2000      	movs	r0, #0
}
   18d34:	bd38      	pop	{r3, r4, r5, pc}
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18d36:	890d      	ldrh	r5, [r1, #8]
  memcpy(buf, pValue, len);
   18d38:	4b31      	ldr	r3, [pc, #196]	; (18e00 <DisValueUpdate+0x12c>)
   18d3a:	6849      	ldr	r1, [r1, #4]
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18d3c:	2d14      	cmp	r5, #20
   18d3e:	bf28      	it	cs
   18d40:	2514      	movcs	r5, #20
  memcpy(buf, pValue, len);
   18d42:	462a      	mov	r2, r5
   18d44:	4618      	mov	r0, r3
   18d46:	f7f3 f9db 	bl	c100 <memcpy>
   18d4a:	4603      	mov	r3, r0
  buf[len] = '\0';
   18d4c:	2400      	movs	r4, #0
    APP_TRACE_INFO1("Hardware rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18d4e:	482e      	ldr	r0, [pc, #184]	; (18e08 <DisValueUpdate+0x134>)
  buf[len] = '\0';
   18d50:	555c      	strb	r4, [r3, r5]
    APP_TRACE_INFO1("Hardware rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18d52:	4619      	mov	r1, r3
   18d54:	f005 fca0 	bl	1e698 <WsfTrace>
  uint8_t status = ATT_SUCCESS;
   18d58:	4620      	mov	r0, r4
}
   18d5a:	bd38      	pop	{r3, r4, r5, pc}
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18d5c:	890d      	ldrh	r5, [r1, #8]
  memcpy(buf, pValue, len);
   18d5e:	4b28      	ldr	r3, [pc, #160]	; (18e00 <DisValueUpdate+0x12c>)
   18d60:	6849      	ldr	r1, [r1, #4]
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18d62:	2d14      	cmp	r5, #20
   18d64:	bf28      	it	cs
   18d66:	2514      	movcs	r5, #20
  memcpy(buf, pValue, len);
   18d68:	462a      	mov	r2, r5
   18d6a:	4618      	mov	r0, r3
   18d6c:	f7f3 f9c8 	bl	c100 <memcpy>
   18d70:	4603      	mov	r3, r0
  buf[len] = '\0';
   18d72:	2400      	movs	r4, #0
    APP_TRACE_INFO1("Model num: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18d74:	4825      	ldr	r0, [pc, #148]	; (18e0c <DisValueUpdate+0x138>)
  buf[len] = '\0';
   18d76:	555c      	strb	r4, [r3, r5]
    APP_TRACE_INFO1("Model num: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18d78:	4619      	mov	r1, r3
   18d7a:	f005 fc8d 	bl	1e698 <WsfTrace>
  uint8_t status = ATT_SUCCESS;
   18d7e:	4620      	mov	r0, r4
}
   18d80:	bd38      	pop	{r3, r4, r5, pc}
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18d82:	890d      	ldrh	r5, [r1, #8]
  memcpy(buf, pValue, len);
   18d84:	4b1e      	ldr	r3, [pc, #120]	; (18e00 <DisValueUpdate+0x12c>)
   18d86:	6849      	ldr	r1, [r1, #4]
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18d88:	2d14      	cmp	r5, #20
   18d8a:	bf28      	it	cs
   18d8c:	2514      	movcs	r5, #20
  memcpy(buf, pValue, len);
   18d8e:	462a      	mov	r2, r5
   18d90:	4618      	mov	r0, r3
   18d92:	f7f3 f9b5 	bl	c100 <memcpy>
   18d96:	4603      	mov	r3, r0
  buf[len] = '\0';
   18d98:	2400      	movs	r4, #0
    APP_TRACE_INFO1("Serial num: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18d9a:	481d      	ldr	r0, [pc, #116]	; (18e10 <DisValueUpdate+0x13c>)
  buf[len] = '\0';
   18d9c:	555c      	strb	r4, [r3, r5]
    APP_TRACE_INFO1("Serial num: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18d9e:	4619      	mov	r1, r3
   18da0:	f005 fc7a 	bl	1e698 <WsfTrace>
  uint8_t status = ATT_SUCCESS;
   18da4:	4620      	mov	r0, r4
}
   18da6:	bd38      	pop	{r3, r4, r5, pc}
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18da8:	890d      	ldrh	r5, [r1, #8]
  memcpy(buf, pValue, len);
   18daa:	4b15      	ldr	r3, [pc, #84]	; (18e00 <DisValueUpdate+0x12c>)
   18dac:	6849      	ldr	r1, [r1, #4]
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18dae:	2d14      	cmp	r5, #20
   18db0:	bf28      	it	cs
   18db2:	2514      	movcs	r5, #20
  memcpy(buf, pValue, len);
   18db4:	462a      	mov	r2, r5
   18db6:	4618      	mov	r0, r3
   18db8:	f7f3 f9a2 	bl	c100 <memcpy>
   18dbc:	4603      	mov	r3, r0
  buf[len] = '\0';
   18dbe:	2400      	movs	r4, #0
    APP_TRACE_INFO1("Firmware rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18dc0:	4814      	ldr	r0, [pc, #80]	; (18e14 <DisValueUpdate+0x140>)
  buf[len] = '\0';
   18dc2:	555c      	strb	r4, [r3, r5]
    APP_TRACE_INFO1("Firmware rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18dc4:	4619      	mov	r1, r3
   18dc6:	f005 fc67 	bl	1e698 <WsfTrace>
  uint8_t status = ATT_SUCCESS;
   18dca:	4620      	mov	r0, r4
}
   18dcc:	bd38      	pop	{r3, r4, r5, pc}
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18dce:	890d      	ldrh	r5, [r1, #8]
  memcpy(buf, pValue, len);
   18dd0:	4b0b      	ldr	r3, [pc, #44]	; (18e00 <DisValueUpdate+0x12c>)
   18dd2:	6849      	ldr	r1, [r1, #4]
  len = (len < (sizeof(buf) - 1)) ? len : (sizeof(buf) - 1);
   18dd4:	2d14      	cmp	r5, #20
   18dd6:	bf28      	it	cs
   18dd8:	2514      	movcs	r5, #20
  memcpy(buf, pValue, len);
   18dda:	462a      	mov	r2, r5
   18ddc:	4618      	mov	r0, r3
   18dde:	f7f3 f98f 	bl	c100 <memcpy>
   18de2:	4603      	mov	r3, r0
  buf[len] = '\0';
   18de4:	2400      	movs	r4, #0
    APP_TRACE_INFO1("Software rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18de6:	480c      	ldr	r0, [pc, #48]	; (18e18 <DisValueUpdate+0x144>)
  buf[len] = '\0';
   18de8:	555c      	strb	r4, [r3, r5]
    APP_TRACE_INFO1("Software rev: %s", disFmtString(pMsg->pValue, pMsg->valueLen));
   18dea:	4619      	mov	r1, r3
   18dec:	f005 fc54 	bl	1e698 <WsfTrace>
  uint8_t status = ATT_SUCCESS;
   18df0:	4620      	mov	r0, r4
}
   18df2:	bd38      	pop	{r3, r4, r5, pc}
      APP_TRACE_INFO0("System ID read ok");
   18df4:	4809      	ldr	r0, [pc, #36]	; (18e1c <DisValueUpdate+0x148>)
   18df6:	f005 fc4f 	bl	1e698 <WsfTrace>
  uint8_t status = ATT_SUCCESS;
   18dfa:	2000      	movs	r0, #0
}
   18dfc:	bd38      	pop	{r3, r4, r5, pc}
   18dfe:	bf00      	nop
   18e00:	10004fbc 	.word	0x10004fbc
   18e04:	00026b70 	.word	0x00026b70
   18e08:	00026b9c 	.word	0x00026b9c
   18e0c:	00026b7c 	.word	0x00026b7c
   18e10:	00026b8c 	.word	0x00026b8c
   18e14:	00026bb0 	.word	0x00026bb0
   18e18:	00026bc4 	.word	0x00026bc4
   18e1c:	00026bd8 	.word	0x00026bd8

00018e20 <hrcpHrsParseHrm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hrcpHrsParseHrm(uint8_t *pValue, uint16_t len)
{
   18e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  rrInterval;

  /* Suppress unused variable compile warning */
  (void)heartRate; (void)energyExp; (void)rrInterval;

  if (len > 0)
   18e24:	460d      	mov	r5, r1
   18e26:	2900      	cmp	r1, #0
   18e28:	d03e      	beq.n	18ea8 <hrcpHrsParseHrm+0x88>
  {
    /* get flags */
    BSTREAM_TO_UINT8(flags, pValue);
   18e2a:	7806      	ldrb	r6, [r0, #0]

    /* determine expected minimum length based on flags */
    if (flags & CH_HRM_FLAGS_VALUE_16BIT)
   18e2c:	f006 0201 	and.w	r2, r6, #1
    {
      minLen++;
    }
    if (flags & CH_HRM_FLAGS_ENERGY_EXP)
   18e30:	f016 0908 	ands.w	r9, r6, #8
   18e34:	bf14      	ite	ne
   18e36:	1d13      	addne	r3, r2, #4
   18e38:	1c93      	addeq	r3, r2, #2
    {
      minLen += CH_HRM_LEN_ENERGY_EXP;
    }
    if (flags & CH_HRM_FLAGS_RR_INTERVAL)
   18e3a:	f016 0810 	ands.w	r8, r6, #16
    {
      minLen += CH_HRM_LEN_RR_INTERVAL;
   18e3e:	bf1c      	itt	ne
   18e40:	3302      	addne	r3, #2
   18e42:	b2db      	uxtbne	r3, r3
   18e44:	b29f      	uxth	r7, r3
    }
  }

  /* verify length */
  if (len < minLen)
   18e46:	428b      	cmp	r3, r1
  {
    APP_TRACE_INFO2("Heart Rate meas len:%d minLen:%d", len, minLen);
   18e48:	bf88      	it	hi
   18e4a:	463a      	movhi	r2, r7
  if (len < minLen)
   18e4c:	d82d      	bhi.n	18eaa <hrcpHrsParseHrm+0x8a>
    return;
  }

  /* heart rate */
  if (flags & CH_HRM_FLAGS_VALUE_16BIT)
   18e4e:	2a00      	cmp	r2, #0
   18e50:	d131      	bne.n	18eb6 <hrcpHrsParseHrm+0x96>
  {
    BSTREAM_TO_UINT16(heartRate, pValue);
  }
  else
  {
    BSTREAM_TO_UINT8(heartRate, pValue);
   18e52:	7841      	ldrb	r1, [r0, #1]
   18e54:	1c84      	adds	r4, r0, #2
  }
  APP_TRACE_INFO1("  Heart rate:   %d", heartRate);
   18e56:	4823      	ldr	r0, [pc, #140]	; (18ee4 <hrcpHrsParseHrm+0xc4>)
   18e58:	f005 fc1e 	bl	1e698 <WsfTrace>

  /* energy expended */
  if (flags & CH_HRM_FLAGS_ENERGY_EXP)
   18e5c:	f1b9 0f00 	cmp.w	r9, #0
   18e60:	d135      	bne.n	18ece <hrcpHrsParseHrm+0xae>
    BSTREAM_TO_UINT16(energyExp, pValue);
    APP_TRACE_INFO1("  Energy Exp:   %d", energyExp);
  }

  /* r-r interval */
  if (flags & CH_HRM_FLAGS_RR_INTERVAL)
   18e62:	f1b8 0f00 	cmp.w	r8, #0
   18e66:	d019      	beq.n	18e9c <hrcpHrsParseHrm+0x7c>
  {
    /* get length of r-r interval bytes */
    len = len + CH_HRM_LEN_RR_INTERVAL - minLen;
   18e68:	1bed      	subs	r5, r5, r7
   18e6a:	b2ad      	uxth	r5, r5
   18e6c:	1caa      	adds	r2, r5, #2
   18e6e:	b293      	uxth	r3, r2

    /* if len is somehow missing a byte (len is odd) reduce by 1 */
    if (len & 1)
   18e70:	07d2      	lsls	r2, r2, #31
    {
      len--;
   18e72:	bf44      	itt	mi
   18e74:	3501      	addmi	r5, #1
   18e76:	b2ab      	uxthmi	r3, r5
   18e78:	3402      	adds	r4, #2
   18e7a:	18e5      	adds	r5, r4, r3

    /* parse r-r intervals */
    do
    {
      BSTREAM_TO_UINT16(rrInterval, pValue);
      APP_TRACE_INFO1("  r-r Interval: %d", rrInterval);
   18e7c:	4f1a      	ldr	r7, [pc, #104]	; (18ee8 <hrcpHrsParseHrm+0xc8>)
      len -= 2;
    } while (len > 0);
   18e7e:	b2ad      	uxth	r5, r5
      BSTREAM_TO_UINT16(rrInterval, pValue);
   18e80:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   18e84:	f814 1c02 	ldrb.w	r1, [r4, #-2]
   18e88:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      APP_TRACE_INFO1("  r-r Interval: %d", rrInterval);
   18e8c:	4638      	mov	r0, r7
   18e8e:	b289      	uxth	r1, r1
    } while (len > 0);
   18e90:	3402      	adds	r4, #2
      APP_TRACE_INFO1("  r-r Interval: %d", rrInterval);
   18e92:	f005 fc01 	bl	1e698 <WsfTrace>
    } while (len > 0);
   18e96:	b2a3      	uxth	r3, r4
   18e98:	42ab      	cmp	r3, r5
   18e9a:	d1f1      	bne.n	18e80 <hrcpHrsParseHrm+0x60>
  }

  APP_TRACE_INFO1("  Flags:0x%02x", flags);
   18e9c:	4631      	mov	r1, r6
   18e9e:	4813      	ldr	r0, [pc, #76]	; (18eec <hrcpHrsParseHrm+0xcc>)
}
   18ea0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  APP_TRACE_INFO1("  Flags:0x%02x", flags);
   18ea4:	f005 bbf8 	b.w	1e698 <WsfTrace>
   18ea8:	2202      	movs	r2, #2
    APP_TRACE_INFO2("Heart Rate meas len:%d minLen:%d", len, minLen);
   18eaa:	4629      	mov	r1, r5
   18eac:	4810      	ldr	r0, [pc, #64]	; (18ef0 <hrcpHrsParseHrm+0xd0>)
}
   18eae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    APP_TRACE_INFO2("Heart Rate meas len:%d minLen:%d", len, minLen);
   18eb2:	f005 bbf1 	b.w	1e698 <WsfTrace>
    BSTREAM_TO_UINT16(heartRate, pValue);
   18eb6:	7883      	ldrb	r3, [r0, #2]
   18eb8:	7841      	ldrb	r1, [r0, #1]
   18eba:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   18ebe:	1cc4      	adds	r4, r0, #3
   18ec0:	b289      	uxth	r1, r1
  APP_TRACE_INFO1("  Heart rate:   %d", heartRate);
   18ec2:	4808      	ldr	r0, [pc, #32]	; (18ee4 <hrcpHrsParseHrm+0xc4>)
   18ec4:	f005 fbe8 	bl	1e698 <WsfTrace>
  if (flags & CH_HRM_FLAGS_ENERGY_EXP)
   18ec8:	f1b9 0f00 	cmp.w	r9, #0
   18ecc:	d0c9      	beq.n	18e62 <hrcpHrsParseHrm+0x42>
    BSTREAM_TO_UINT16(energyExp, pValue);
   18ece:	7863      	ldrb	r3, [r4, #1]
   18ed0:	f814 1b02 	ldrb.w	r1, [r4], #2
    APP_TRACE_INFO1("  Energy Exp:   %d", energyExp);
   18ed4:	4807      	ldr	r0, [pc, #28]	; (18ef4 <hrcpHrsParseHrm+0xd4>)
    BSTREAM_TO_UINT16(energyExp, pValue);
   18ed6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
    APP_TRACE_INFO1("  Energy Exp:   %d", energyExp);
   18eda:	b289      	uxth	r1, r1
   18edc:	f005 fbdc 	bl	1e698 <WsfTrace>
   18ee0:	e7bf      	b.n	18e62 <hrcpHrsParseHrm+0x42>
   18ee2:	bf00      	nop
   18ee4:	00026c48 	.word	0x00026c48
   18ee8:	00026c80 	.word	0x00026c80
   18eec:	00026c70 	.word	0x00026c70
   18ef0:	00026c24 	.word	0x00026c24
   18ef4:	00026c5c 	.word	0x00026c5c

00018ef8 <HrpcHrsDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpcHrsDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   18ef8:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attHrsSvcUuid,
   18efa:	4b06      	ldr	r3, [pc, #24]	; (18f14 <HrpcHrsDiscover+0x1c>)
   18efc:	4a06      	ldr	r2, [pc, #24]	; (18f18 <HrpcHrsDiscover+0x20>)
{
   18efe:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attHrsSvcUuid,
   18f00:	e9cd 3100 	strd	r3, r1, [sp]
   18f04:	2304      	movs	r3, #4
   18f06:	2102      	movs	r1, #2
   18f08:	f005 feea 	bl	1ece0 <AppDiscFindService>
                     HRPC_HRS_HDL_LIST_LEN, (attcDiscChar_t **) hrpcHrsDiscCharList, pHdlList);
}
   18f0c:	b003      	add	sp, #12
   18f0e:	f85d fb04 	ldr.w	pc, [sp], #4
   18f12:	bf00      	nop
   18f14:	10002c14 	.word	0x10002c14
   18f18:	0002683c 	.word	0x0002683c

00018f1c <HrpcHrsValueUpdate>:
 *
 *  \return ATT_SUCCESS if handle is found, ATT_ERR_NOT_FOUND otherwise.
 */
/*************************************************************************************************/
uint8_t HrpcHrsValueUpdate(uint16_t *pHdlList, attEvt_t *pMsg)
{
   18f1c:	b508      	push	{r3, lr}
   18f1e:	460b      	mov	r3, r1
  uint8_t   *p;
  uint8_t   sensorLoc;
  uint8_t   status = ATT_SUCCESS;

  /* heart rate measurement */
  if (pMsg->handle == pHdlList[HRPC_HRS_HRM_HDL_IDX])
   18f20:	8801      	ldrh	r1, [r0, #0]
   18f22:	895a      	ldrh	r2, [r3, #10]
   18f24:	4291      	cmp	r1, r2
   18f26:	d00a      	beq.n	18f3e <HrpcHrsValueUpdate+0x22>
  {
    /* parse value */
    hrcpHrsParseHrm(pMsg->pValue, pMsg->valueLen);
  }
  /* body sensor location */
  else if (pMsg->handle == pHdlList[HRPC_HRS_BSL_HDL_IDX])
   18f28:	8881      	ldrh	r1, [r0, #4]
   18f2a:	4291      	cmp	r1, r2
   18f2c:	d001      	beq.n	18f32 <HrpcHrsValueUpdate+0x16>
      APP_TRACE_INFO1("Body sensor location:%d", sensorLoc);
    }
  }
  else
  {
    status = ATT_ERR_NOT_FOUND;
   18f2e:	200a      	movs	r0, #10
  }

  return status;
}
   18f30:	bd08      	pop	{r3, pc}
    BSTREAM_TO_UINT8(sensorLoc, p);
   18f32:	685b      	ldr	r3, [r3, #4]
   18f34:	7819      	ldrb	r1, [r3, #0]
    if (sensorLoc <= CH_BSENSOR_LOC_FOOT)
   18f36:	2906      	cmp	r1, #6
   18f38:	d907      	bls.n	18f4a <HrpcHrsValueUpdate+0x2e>
  uint8_t   status = ATT_SUCCESS;
   18f3a:	2000      	movs	r0, #0
}
   18f3c:	bd08      	pop	{r3, pc}
    hrcpHrsParseHrm(pMsg->pValue, pMsg->valueLen);
   18f3e:	6858      	ldr	r0, [r3, #4]
   18f40:	8919      	ldrh	r1, [r3, #8]
   18f42:	f7ff ff6d 	bl	18e20 <hrcpHrsParseHrm>
  uint8_t   status = ATT_SUCCESS;
   18f46:	2000      	movs	r0, #0
}
   18f48:	bd08      	pop	{r3, pc}
      APP_TRACE_INFO1("Body sensor location:%d", sensorLoc);
   18f4a:	4802      	ldr	r0, [pc, #8]	; (18f54 <HrpcHrsValueUpdate+0x38>)
   18f4c:	f005 fba4 	bl	1e698 <WsfTrace>
  uint8_t   status = ATT_SUCCESS;
   18f50:	2000      	movs	r0, #0
}
   18f52:	bd08      	pop	{r3, pc}
   18f54:	00026c94 	.word	0x00026c94

00018f58 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
uint32_t
HciDrvRadioBoot(bool bColdBoot)
{
   18f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32NumXtalRetries = 0;


    g_ui32NumBytes     = 0;
   18f5c:	4968      	ldr	r1, [pc, #416]	; (19100 <HciDrvRadioBoot+0x1a8>)
   18f5e:	4d69      	ldr	r5, [pc, #420]	; (19104 <HciDrvRadioBoot+0x1ac>)
    g_consumed_bytes   = 0;
   18f60:	4a69      	ldr	r2, [pc, #420]	; (19108 <HciDrvRadioBoot+0x1b0>)
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   18f62:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 1913c <HciDrvRadioBoot+0x1e4>
    g_ui32NumBytes     = 0;
   18f66:	2300      	movs	r3, #0
   18f68:	600b      	str	r3, [r1, #0]
{
   18f6a:	b090      	sub	sp, #64	; 0x40
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   18f6c:	4629      	mov	r1, r5
{
   18f6e:	4607      	mov	r7, r0
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   18f70:	2000      	movs	r0, #0
    g_consumed_bytes   = 0;
   18f72:	6013      	str	r3, [r2, #0]
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   18f74:	f00a fce2 	bl	2393c <am_hal_ble_initialize>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   18f78:	260b      	movs	r6, #11
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   18f7a:	4601      	mov	r1, r0
   18f7c:	2800      	cmp	r0, #0
   18f7e:	d13b      	bne.n	18ff8 <HciDrvRadioBoot+0xa0>
        ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   18f80:	6828      	ldr	r0, [r5, #0]
   18f82:	f00a fdbd 	bl	23b00 <am_hal_ble_power_control>
   18f86:	4604      	mov	r4, r0
   18f88:	2800      	cmp	r0, #0
   18f8a:	d174      	bne.n	19076 <HciDrvRadioBoot+0x11e>
        am_hal_ble_config_t sBleConfig =
   18f8c:	4c5f      	ldr	r4, [pc, #380]	; (1910c <HciDrvRadioBoot+0x1b4>)
   18f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18f90:	f10d 0c0c 	add.w	ip, sp, #12
   18f94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   18f98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   18f9c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        ERROR_CHECK(am_hal_ble_config(BLE, &sBleConfig));
   18fa0:	6828      	ldr	r0, [r5, #0]
   18fa2:	a903      	add	r1, sp, #12
   18fa4:	f00a fd20 	bl	239e8 <am_hal_ble_config>
   18fa8:	4604      	mov	r4, r0
   18faa:	2800      	cmp	r0, #0
   18fac:	d16d      	bne.n	1908a <HciDrvRadioBoot+0x132>
        if ( bColdBoot )
   18fae:	2f00      	cmp	r7, #0
   18fb0:	d131      	bne.n	19016 <HciDrvRadioBoot+0xbe>
        ui32Status = am_hal_ble_boot(BLE);
   18fb2:	6828      	ldr	r0, [r5, #0]
   18fb4:	f00b fc12 	bl	247dc <am_hal_ble_boot>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   18fb8:	4604      	mov	r4, r0
   18fba:	2800      	cmp	r0, #0
   18fbc:	d030      	beq.n	19020 <HciDrvRadioBoot+0xc8>
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   18fbe:	4544      	cmp	r4, r8
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   18fc0:	6828      	ldr	r0, [r5, #0]
   18fc2:	f04f 0101 	mov.w	r1, #1
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   18fc6:	d168      	bne.n	1909a <HciDrvRadioBoot+0x142>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   18fc8:	f00a fd9a 	bl	23b00 <am_hal_ble_power_control>
   18fcc:	4604      	mov	r4, r0
   18fce:	2800      	cmp	r0, #0
   18fd0:	d176      	bne.n	190c0 <HciDrvRadioBoot+0x168>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
   18fd2:	6828      	ldr	r0, [r5, #0]
   18fd4:	f00a fce8 	bl	239a8 <am_hal_ble_deinitialize>
   18fd8:	4604      	mov	r4, r0
   18fda:	2800      	cmp	r0, #0
   18fdc:	d178      	bne.n	190d0 <HciDrvRadioBoot+0x178>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   18fde:	3e01      	subs	r6, #1
   18fe0:	d014      	beq.n	1900c <HciDrvRadioBoot+0xb4>
            {
                am_util_delay_ms(1000);
   18fe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18fe6:	f007 fc5b 	bl	208a0 <am_util_delay_ms>
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   18fea:	4629      	mov	r1, r5
   18fec:	2000      	movs	r0, #0
   18fee:	f00a fca5 	bl	2393c <am_hal_ble_initialize>
   18ff2:	4601      	mov	r1, r0
   18ff4:	2800      	cmp	r0, #0
   18ff6:	d0c3      	beq.n	18f80 <HciDrvRadioBoot+0x28>
   18ff8:	4845      	ldr	r0, [pc, #276]	; (19110 <HciDrvRadioBoot+0x1b8>)
   18ffa:	9101      	str	r1, [sp, #4]
   18ffc:	f008 fa4c 	bl	21498 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   19000:	4b44      	ldr	r3, [pc, #272]	; (19114 <HciDrvRadioBoot+0x1bc>)
   19002:	681b      	ldr	r3, [r3, #0]
   19004:	b113      	cbz	r3, 1900c <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   19006:	9901      	ldr	r1, [sp, #4]
   19008:	4608      	mov	r0, r1
   1900a:	4798      	blx	r3
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
   1900c:	2401      	movs	r4, #1
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
    }

    return AM_HAL_STATUS_SUCCESS;
}
   1900e:	4620      	mov	r0, r4
   19010:	b010      	add	sp, #64	; 0x40
   19012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            am_util_delay_ms(1000);
   19016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1901a:	f007 fc41 	bl	208a0 <am_util_delay_ms>
   1901e:	e7c8      	b.n	18fb2 <HciDrvRadioBoot+0x5a>
    am_hal_ble_tx_power_set(BLE, 0x8);
   19020:	6828      	ldr	r0, [r5, #0]
   19022:	2108      	movs	r1, #8
   19024:	f00b fc5a 	bl	248dc <am_hal_ble_tx_power_set>
    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   19028:	6828      	ldr	r0, [r5, #0]
   1902a:	f240 2181 	movw	r1, #641	; 0x281
   1902e:	f00b f95f 	bl	242f0 <am_hal_ble_int_clear>
    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   19032:	6828      	ldr	r0, [r5, #0]
   19034:	f240 2181 	movw	r1, #641	; 0x281
   19038:	f00b f92c 	bl	24294 <am_hal_ble_int_enable>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1903c:	4b36      	ldr	r3, [pc, #216]	; (19118 <HciDrvRadioBoot+0x1c0>)
   1903e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19042:	601a      	str	r2, [r3, #0]
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   19044:	f44f 6302 	mov.w	r3, #2080	; 0x820
   19048:	4934      	ldr	r1, [pc, #208]	; (1911c <HciDrvRadioBoot+0x1c4>)
   1904a:	4835      	ldr	r0, [pc, #212]	; (19120 <HciDrvRadioBoot+0x1c8>)
   1904c:	f44f 7282 	mov.w	r2, #260	; 0x104
   19050:	f00c fb56 	bl	25700 <am_hal_queue_init>
    g_ui32InterruptsSeen = 0;
   19054:	4b33      	ldr	r3, [pc, #204]	; (19124 <HciDrvRadioBoot+0x1cc>)
   19056:	601c      	str	r4, [r3, #0]
    if (bColdBoot)
   19058:	2f00      	cmp	r7, #0
   1905a:	d0d8      	beq.n	1900e <HciDrvRadioBoot+0xb6>
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   1905c:	a903      	add	r1, sp, #12
   1905e:	2001      	movs	r0, #1
   19060:	f00c f97e 	bl	25360 <am_hal_mcuctrl_info_get>
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
   19064:	9b04      	ldr	r3, [sp, #16]
        memcpy(g_BLEMacAddress, &sDevice.ui32ChipID1, sizeof(sDevice.ui32ChipID1));
   19066:	4a30      	ldr	r2, [pc, #192]	; (19128 <HciDrvRadioBoot+0x1d0>)
   19068:	9805      	ldr	r0, [sp, #20]
   1906a:	6010      	str	r0, [r2, #0]
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
   1906c:	0a19      	lsrs	r1, r3, #8
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
   1906e:	0c1b      	lsrs	r3, r3, #16
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
   19070:	7111      	strb	r1, [r2, #4]
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
   19072:	7153      	strb	r3, [r2, #5]
   19074:	e7cb      	b.n	1900e <HciDrvRadioBoot+0xb6>
        ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   19076:	482d      	ldr	r0, [pc, #180]	; (1912c <HciDrvRadioBoot+0x1d4>)
   19078:	f008 fa0e 	bl	21498 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   1907c:	4b25      	ldr	r3, [pc, #148]	; (19114 <HciDrvRadioBoot+0x1bc>)
   1907e:	681b      	ldr	r3, [r3, #0]
   19080:	2b00      	cmp	r3, #0
   19082:	d0c3      	beq.n	1900c <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   19084:	4620      	mov	r0, r4
   19086:	4798      	blx	r3
   19088:	e7c0      	b.n	1900c <HciDrvRadioBoot+0xb4>
        ERROR_CHECK(am_hal_ble_config(BLE, &sBleConfig));
   1908a:	4829      	ldr	r0, [pc, #164]	; (19130 <HciDrvRadioBoot+0x1d8>)
   1908c:	f008 fa04 	bl	21498 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   19090:	4b20      	ldr	r3, [pc, #128]	; (19114 <HciDrvRadioBoot+0x1bc>)
   19092:	681b      	ldr	r3, [r3, #0]
   19094:	2b00      	cmp	r3, #0
   19096:	d1f5      	bne.n	19084 <HciDrvRadioBoot+0x12c>
   19098:	e7b8      	b.n	1900c <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   1909a:	f00a fd31 	bl	23b00 <am_hal_ble_power_control>
   1909e:	4606      	mov	r6, r0
   190a0:	bb18      	cbnz	r0, 190ea <HciDrvRadioBoot+0x192>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
   190a2:	6828      	ldr	r0, [r5, #0]
   190a4:	f00a fc80 	bl	239a8 <am_hal_ble_deinitialize>
   190a8:	4605      	mov	r5, r0
   190aa:	b1c8      	cbz	r0, 190e0 <HciDrvRadioBoot+0x188>
   190ac:	4821      	ldr	r0, [pc, #132]	; (19134 <HciDrvRadioBoot+0x1dc>)
   190ae:	f008 f9f3 	bl	21498 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   190b2:	4b18      	ldr	r3, [pc, #96]	; (19114 <HciDrvRadioBoot+0x1bc>)
   190b4:	681b      	ldr	r3, [r3, #0]
   190b6:	2b00      	cmp	r3, #0
   190b8:	d0a8      	beq.n	1900c <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   190ba:	4628      	mov	r0, r5
   190bc:	4798      	blx	r3
   190be:	e7a5      	b.n	1900c <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   190c0:	481d      	ldr	r0, [pc, #116]	; (19138 <HciDrvRadioBoot+0x1e0>)
   190c2:	f008 f9e9 	bl	21498 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   190c6:	4b13      	ldr	r3, [pc, #76]	; (19114 <HciDrvRadioBoot+0x1bc>)
   190c8:	681b      	ldr	r3, [r3, #0]
   190ca:	2b00      	cmp	r3, #0
   190cc:	d1da      	bne.n	19084 <HciDrvRadioBoot+0x12c>
   190ce:	e79d      	b.n	1900c <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
   190d0:	4818      	ldr	r0, [pc, #96]	; (19134 <HciDrvRadioBoot+0x1dc>)
   190d2:	f008 f9e1 	bl	21498 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   190d6:	4b0f      	ldr	r3, [pc, #60]	; (19114 <HciDrvRadioBoot+0x1bc>)
   190d8:	681b      	ldr	r3, [r3, #0]
   190da:	2b00      	cmp	r3, #0
   190dc:	d1d2      	bne.n	19084 <HciDrvRadioBoot+0x12c>
   190de:	e795      	b.n	1900c <HciDrvRadioBoot+0xb4>
   190e0:	4b0c      	ldr	r3, [pc, #48]	; (19114 <HciDrvRadioBoot+0x1bc>)
   190e2:	681b      	ldr	r3, [r3, #0]
   190e4:	2b00      	cmp	r3, #0
   190e6:	d1cd      	bne.n	19084 <HciDrvRadioBoot+0x12c>
   190e8:	e790      	b.n	1900c <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   190ea:	4813      	ldr	r0, [pc, #76]	; (19138 <HciDrvRadioBoot+0x1e0>)
   190ec:	f008 f9d4 	bl	21498 <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
   190f0:	4b08      	ldr	r3, [pc, #32]	; (19114 <HciDrvRadioBoot+0x1bc>)
   190f2:	681b      	ldr	r3, [r3, #0]
   190f4:	2b00      	cmp	r3, #0
   190f6:	d089      	beq.n	1900c <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   190f8:	4630      	mov	r0, r6
   190fa:	4798      	blx	r3
   190fc:	e786      	b.n	1900c <HciDrvRadioBoot+0xb4>
   190fe:	bf00      	nop
   19100:	10005944 	.word	0x10005944
   19104:	10004fd4 	.word	0x10004fd4
   19108:	10005000 	.word	0x10005000
   1910c:	00025a9c 	.word	0x00025a9c
   19110:	00026ccc 	.word	0x00026ccc
   19114:	10005004 	.word	0x10005004
   19118:	e000e100 	.word	0xe000e100
   1911c:	10005008 	.word	0x10005008
   19120:	10005928 	.word	0x10005928
   19124:	10005940 	.word	0x10005940
   19128:	10004fd8 	.word	0x10004fd8
   1912c:	00026cf8 	.word	0x00026cf8
   19130:	00026d3c 	.word	0x00026d3c
   19134:	00026db4 	.word	0x00026db4
   19138:	00026d70 	.word	0x00026d70
   1913c:	0800000b 	.word	0x0800000b

00019140 <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   19140:	b570      	push	{r4, r5, r6, lr}
    BLE_HEARTBEAT_STOP();
   19142:	4814      	ldr	r0, [pc, #80]	; (19194 <HciDrvRadioShutdown+0x54>)
   19144:	f005 fa08 	bl	1e558 <WsfTimerStop>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19148:	4b13      	ldr	r3, [pc, #76]	; (19198 <HciDrvRadioShutdown+0x58>)
   1914a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1914e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   19152:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19156:	f3bf 8f6f 	isb	sy

    NVIC_DisableIRQ(BLE_IRQn);

    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   1915a:	4e10      	ldr	r6, [pc, #64]	; (1919c <HciDrvRadioShutdown+0x5c>)

    // wait for 1s at max
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   1915c:	4d10      	ldr	r5, [pc, #64]	; (191a0 <HciDrvRadioShutdown+0x60>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   1915e:	6830      	ldr	r0, [r6, #0]
   19160:	2101      	movs	r1, #1
   19162:	f00a fccd 	bl	23b00 <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   19166:	68ab      	ldr	r3, [r5, #8]
   19168:	049a      	lsls	r2, r3, #18
   1916a:	d509      	bpl.n	19180 <HciDrvRadioShutdown+0x40>
   1916c:	4c0d      	ldr	r4, [pc, #52]	; (191a4 <HciDrvRadioShutdown+0x64>)
   1916e:	e001      	b.n	19174 <HciDrvRadioShutdown+0x34>
   19170:	3c01      	subs	r4, #1
   19172:	d005      	beq.n	19180 <HciDrvRadioShutdown+0x40>
   19174:	2010      	movs	r0, #16
   19176:	f00b fea1 	bl	24ebc <am_hal_flash_delay>
   1917a:	68ab      	ldr	r3, [r5, #8]
   1917c:	049b      	lsls	r3, r3, #18
   1917e:	d4f7      	bmi.n	19170 <HciDrvRadioShutdown+0x30>

    am_hal_ble_deinitialize(BLE);
   19180:	6830      	ldr	r0, [r6, #0]
   19182:	f00a fc11 	bl	239a8 <am_hal_ble_deinitialize>

    g_ui32NumBytes   = 0;
   19186:	4908      	ldr	r1, [pc, #32]	; (191a8 <HciDrvRadioShutdown+0x68>)
    g_consumed_bytes = 0;
   19188:	4a08      	ldr	r2, [pc, #32]	; (191ac <HciDrvRadioShutdown+0x6c>)
    g_ui32NumBytes   = 0;
   1918a:	2300      	movs	r3, #0
   1918c:	600b      	str	r3, [r1, #0]
    g_consumed_bytes = 0;
   1918e:	6013      	str	r3, [r2, #0]
}
   19190:	bd70      	pop	{r4, r5, r6, pc}
   19192:	bf00      	nop
   19194:	10004fe0 	.word	0x10004fe0
   19198:	e000e100 	.word	0xe000e100
   1919c:	10004fd4 	.word	0x10004fd4
   191a0:	40021000 	.word	0x40021000
   191a4:	000f4240 	.word	0x000f4240
   191a8:	10005944 	.word	0x10005944
   191ac:	10005000 	.word	0x10005000

000191b0 <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   191b0:	b538      	push	{r3, r4, r5, lr}


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   191b2:	4d2c      	ldr	r5, [pc, #176]	; (19264 <hciDrvWrite+0xb4>)
{
   191b4:	460c      	mov	r4, r1
    if (am_hal_queue_full(&g_sWriteQueue))
   191b6:	68ab      	ldr	r3, [r5, #8]
   191b8:	68e9      	ldr	r1, [r5, #12]
   191ba:	428b      	cmp	r3, r1
   191bc:	d04a      	beq.n	19254 <hciDrvWrite+0xa4>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   191be:	2cff      	cmp	r4, #255	; 0xff
   191c0:	d837      	bhi.n	19232 <hciDrvWrite+0x82>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   191c2:	696b      	ldr	r3, [r5, #20]
   191c4:	682d      	ldr	r5, [r5, #0]

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   191c6:	1c61      	adds	r1, r4, #1
   191c8:	b289      	uxth	r1, r1
   191ca:	5159      	str	r1, [r3, r5]
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   191cc:	442b      	add	r3, r5

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;

    *pui8Wptr++ = type;
   191ce:	1d5d      	adds	r5, r3, #5
   191d0:	7118      	strb	r0, [r3, #4]

    for (uint32_t i = 0; i < len; i++)
   191d2:	b314      	cbz	r4, 1921a <hciDrvWrite+0x6a>
   191d4:	1c51      	adds	r1, r2, #1
   191d6:	1a69      	subs	r1, r5, r1
   191d8:	2902      	cmp	r1, #2
   191da:	d932      	bls.n	19242 <hciDrvWrite+0x92>
   191dc:	1e61      	subs	r1, r4, #1
   191de:	2907      	cmp	r1, #7
   191e0:	d92f      	bls.n	19242 <hciDrvWrite+0x92>
   191e2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   191e6:	4613      	mov	r3, r2
   191e8:	4629      	mov	r1, r5
   191ea:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
    {
        pui8Wptr[i] = pData[i];
   191ee:	f853 0b04 	ldr.w	r0, [r3], #4
   191f2:	f841 0b04 	str.w	r0, [r1], #4
    for (uint32_t i = 0; i < len; i++)
   191f6:	4563      	cmp	r3, ip
   191f8:	d1f9      	bne.n	191ee <hciDrvWrite+0x3e>
   191fa:	f024 0303 	bic.w	r3, r4, #3
   191fe:	429c      	cmp	r4, r3
   19200:	d00b      	beq.n	1921a <hciDrvWrite+0x6a>
        pui8Wptr[i] = pData[i];
   19202:	5cd1      	ldrb	r1, [r2, r3]
   19204:	54e9      	strb	r1, [r5, r3]
    for (uint32_t i = 0; i < len; i++)
   19206:	1c59      	adds	r1, r3, #1
   19208:	428c      	cmp	r4, r1
   1920a:	d906      	bls.n	1921a <hciDrvWrite+0x6a>
   1920c:	3302      	adds	r3, #2
        pui8Wptr[i] = pData[i];
   1920e:	5c50      	ldrb	r0, [r2, r1]
   19210:	5468      	strb	r0, [r5, r1]
    for (uint32_t i = 0; i < len; i++)
   19212:	429c      	cmp	r4, r3
   19214:	d901      	bls.n	1921a <hciDrvWrite+0x6a>
        pui8Wptr[i] = pData[i];
   19216:	5cd2      	ldrb	r2, [r2, r3]
   19218:	54ea      	strb	r2, [r5, r3]
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   1921a:	2100      	movs	r1, #0
   1921c:	4811      	ldr	r0, [pc, #68]	; (19264 <hciDrvWrite+0xb4>)
   1921e:	2201      	movs	r2, #1
   19220:	f00c fa7a 	bl	25718 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19224:	4b10      	ldr	r3, [pc, #64]	; (19268 <hciDrvWrite+0xb8>)
   19226:	2101      	movs	r1, #1
   19228:	7818      	ldrb	r0, [r3, #0]
   1922a:	f004 ff0b 	bl	1e044 <WsfSetEvent>
#endif
    return len;
}
   1922e:	4620      	mov	r0, r4
   19230:	bd38      	pop	{r3, r4, r5, pc}
        if (g_hciDrvErrorHandler)
   19232:	4b0e      	ldr	r3, [pc, #56]	; (1926c <hciDrvWrite+0xbc>)
   19234:	681b      	ldr	r3, [r3, #0]
   19236:	2b00      	cmp	r3, #0
   19238:	d0f9      	beq.n	1922e <hciDrvWrite+0x7e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   1923a:	480d      	ldr	r0, [pc, #52]	; (19270 <hciDrvWrite+0xc0>)
   1923c:	4798      	blx	r3
}
   1923e:	4620      	mov	r0, r4
   19240:	bd38      	pop	{r3, r4, r5, pc}
   19242:	3304      	adds	r3, #4
   19244:	1910      	adds	r0, r2, r4
        pui8Wptr[i] = pData[i];
   19246:	f812 1b01 	ldrb.w	r1, [r2], #1
   1924a:	f803 1f01 	strb.w	r1, [r3, #1]!
    for (uint32_t i = 0; i < len; i++)
   1924e:	4282      	cmp	r2, r0
   19250:	d1f9      	bne.n	19246 <hciDrvWrite+0x96>
   19252:	e7e2      	b.n	1921a <hciDrvWrite+0x6a>
        if (g_hciDrvErrorHandler)
   19254:	4b05      	ldr	r3, [pc, #20]	; (1926c <hciDrvWrite+0xbc>)
   19256:	681b      	ldr	r3, [r3, #0]
   19258:	2b00      	cmp	r3, #0
   1925a:	d0e8      	beq.n	1922e <hciDrvWrite+0x7e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   1925c:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   19260:	4798      	blx	r3
   19262:	e7e4      	b.n	1922e <hciDrvWrite+0x7e>
   19264:	10005928 	.word	0x10005928
   19268:	10004fde 	.word	0x10004fde
   1926c:	10005004 	.word	0x10005004
   19270:	09000001 	.word	0x09000001

00019274 <HciDrvHandlerInit>:
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
    g_HciDrvHandleID = handlerId;

    g_HeartBeatTimer.handlerId = handlerId;
   19274:	4a06      	ldr	r2, [pc, #24]	; (19290 <HciDrvHandlerInit+0x1c>)
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;

    g_WakeTimer.handlerId = handlerId;
   19276:	4b07      	ldr	r3, [pc, #28]	; (19294 <HciDrvHandlerInit+0x20>)
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   19278:	2102      	movs	r1, #2
{
   1927a:	b410      	push	{r4}
    g_HciDrvHandleID = handlerId;
   1927c:	4c06      	ldr	r4, [pc, #24]	; (19298 <HciDrvHandlerInit+0x24>)
    g_HeartBeatTimer.handlerId = handlerId;
   1927e:	7310      	strb	r0, [r2, #12]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   19280:	7291      	strb	r1, [r2, #10]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   19282:	2203      	movs	r2, #3
    g_WakeTimer.handlerId = handlerId;
   19284:	7318      	strb	r0, [r3, #12]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   19286:	729a      	strb	r2, [r3, #10]
    g_HciDrvHandleID = handlerId;
   19288:	7020      	strb	r0, [r4, #0]
}
   1928a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1928e:	4770      	bx	lr
   19290:	10004fe0 	.word	0x10004fe0
   19294:	10004ff0 	.word	0x10004ff0
   19298:	10004fde 	.word	0x10004fde

0001929c <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   1929c:	b510      	push	{r4, lr}
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   1929e:	4c0a      	ldr	r4, [pc, #40]	; (192c8 <HciDrvIntService+0x2c>)
   192a0:	2101      	movs	r1, #1
   192a2:	6820      	ldr	r0, [r4, #0]
   192a4:	f00b f816 	bl	242d4 <am_hal_ble_int_status>
   192a8:	4601      	mov	r1, r0
    am_hal_ble_int_clear(BLE, ui32Status);
   192aa:	6820      	ldr	r0, [r4, #0]
   192ac:	f00b f820 	bl	242f0 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   192b0:	4a06      	ldr	r2, [pc, #24]	; (192cc <HciDrvIntService+0x30>)

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   192b2:	4907      	ldr	r1, [pc, #28]	; (192d0 <HciDrvIntService+0x34>)
    g_ui32InterruptsSeen++;
   192b4:	6813      	ldr	r3, [r2, #0]
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   192b6:	7808      	ldrb	r0, [r1, #0]
    g_ui32InterruptsSeen++;
   192b8:	3301      	adds	r3, #1

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   192ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   192be:	2101      	movs	r1, #1
    g_ui32InterruptsSeen++;
   192c0:	6013      	str	r3, [r2, #0]
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   192c2:	f004 bebf 	b.w	1e044 <WsfSetEvent>
   192c6:	bf00      	nop
   192c8:	10004fd4 	.word	0x10004fd4
   192cc:	10005940 	.word	0x10005940
   192d0:	10004fde 	.word	0x10004fde

000192d4 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   192d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   192d8:	788b      	ldrb	r3, [r1, #2]
   192da:	2b02      	cmp	r3, #2
{
   192dc:	b083      	sub	sp, #12
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   192de:	f000 80c3 	beq.w	19468 <HciDrvHandler+0x194>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   192e2:	4b98      	ldr	r3, [pc, #608]	; (19544 <HciDrvHandler+0x270>)
   192e4:	4a98      	ldr	r2, [pc, #608]	; (19548 <HciDrvHandler+0x274>)
   192e6:	681b      	ldr	r3, [r3, #0]
   192e8:	6812      	ldr	r2, [r2, #0]
   192ea:	4293      	cmp	r3, r2
   192ec:	f200 809f 	bhi.w	1942e <HciDrvHandler+0x15a>
   192f0:	2300      	movs	r3, #0
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   192f2:	4c96      	ldr	r4, [pc, #600]	; (1954c <HciDrvHandler+0x278>)
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   192f4:	f8df 928c 	ldr.w	r9, [pc, #652]	; 19584 <HciDrvHandler+0x2b0>
   192f8:	9300      	str	r3, [sp, #0]
   192fa:	2601      	movs	r6, #1
   192fc:	461d      	mov	r5, r3
   192fe:	e00a      	b.n	19316 <HciDrvHandler+0x42>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   19300:	3501      	adds	r5, #1

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   19302:	f242 7310 	movw	r3, #10000	; 0x2710
   19306:	429d      	cmp	r5, r3
   19308:	d87a      	bhi.n	19400 <HciDrvHandler+0x12c>
   1930a:	46b2      	mov	sl, r6
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   1930c:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
   19310:	f106 0601 	add.w	r6, r6, #1
   19314:	d279      	bcs.n	1940a <HciDrvHandler+0x136>
        if ( BLE_IRQ_CHECK() )
   19316:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1931a:	0619      	lsls	r1, r3, #24
   1931c:	f100 8084 	bmi.w	19428 <HciDrvHandler+0x154>
   19320:	4f8b      	ldr	r7, [pc, #556]	; (19550 <HciDrvHandler+0x27c>)
                    BLE_HEARTBEAT_RESTART();
   19322:	f8df 8234 	ldr.w	r8, [pc, #564]	; 19558 <HciDrvHandler+0x284>
            if (am_hal_queue_empty(&g_sWriteQueue))
   19326:	68bb      	ldr	r3, [r7, #8]
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   19328:	2100      	movs	r1, #0
            if (am_hal_queue_empty(&g_sWriteQueue))
   1932a:	2b00      	cmp	r3, #0
   1932c:	d06d      	beq.n	1940a <HciDrvHandler+0x136>
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   1932e:	697a      	ldr	r2, [r7, #20]
   19330:	687b      	ldr	r3, [r7, #4]
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   19332:	f8d9 0000 	ldr.w	r0, [r9]
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   19336:	eb02 0c03 	add.w	ip, r2, r3
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   1933a:	58d3      	ldr	r3, [r2, r3]
   1933c:	f10c 0204 	add.w	r2, ip, #4
   19340:	f00a ff26 	bl	24190 <am_hal_ble_blocking_hci_write>
   19344:	46cb      	mov	fp, r9
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   19346:	4682      	mov	sl, r0
   19348:	2800      	cmp	r0, #0
   1934a:	d1d9      	bne.n	19300 <HciDrvHandler+0x2c>
                    BLE_HEARTBEAT_RESTART();
   1934c:	4640      	mov	r0, r8
   1934e:	f005 f903 	bl	1e558 <WsfTimerStop>
   19352:	4640      	mov	r0, r8
   19354:	f242 7110 	movw	r1, #10000	; 0x2710
   19358:	f005 f8ba 	bl	1e4d0 <WsfTimerStartMs>
                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   1935c:	2201      	movs	r2, #1
   1935e:	4651      	mov	r1, sl
   19360:	4638      	mov	r0, r7
   19362:	f00c fa17 	bl	25794 <am_hal_queue_item_get>
        if ( BLE_IRQ_CHECK() )
   19366:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1936a:	0618      	lsls	r0, r3, #24
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   1936c:	f04f 0601 	mov.w	r6, #1
        if ( BLE_IRQ_CHECK() )
   19370:	f3c3 15c0 	ubfx	r5, r3, #7, #1
   19374:	d5d7      	bpl.n	19326 <HciDrvHandler+0x52>
                    ui32TxRetries = 0;
   19376:	4655      	mov	r5, sl
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   19378:	46b2      	mov	sl, r6
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   1937a:	4b76      	ldr	r3, [pc, #472]	; (19554 <HciDrvHandler+0x280>)
            BLE_HEARTBEAT_RESTART();
   1937c:	4876      	ldr	r0, [pc, #472]	; (19558 <HciDrvHandler+0x284>)
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   1937e:	f8d3 8000 	ldr.w	r8, [r3]
            BLE_HEARTBEAT_RESTART();
   19382:	f005 f8e9 	bl	1e558 <WsfTimerStop>
   19386:	4874      	ldr	r0, [pc, #464]	; (19558 <HciDrvHandler+0x284>)
   19388:	f242 7110 	movw	r1, #10000	; 0x2710
   1938c:	f005 f8a0 	bl	1e4d0 <WsfTimerStartMs>
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   19390:	4a6c      	ldr	r2, [pc, #432]	; (19544 <HciDrvHandler+0x270>)
   19392:	4972      	ldr	r1, [pc, #456]	; (1955c <HciDrvHandler+0x288>)
   19394:	f8db 0000 	ldr.w	r0, [fp]
            g_ui32NumBytes = 0;
   19398:	4617      	mov	r7, r2
   1939a:	2300      	movs	r3, #0
   1939c:	6013      	str	r3, [r2, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   1939e:	f00a ff21 	bl	241e4 <am_hal_ble_blocking_hci_read>
            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   193a2:	683a      	ldr	r2, [r7, #0]
   193a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   193a8:	4603      	mov	r3, r0
            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   193aa:	d834      	bhi.n	19416 <HciDrvHandler+0x142>
            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   193ac:	2b00      	cmp	r3, #0
   193ae:	f040 80a3 	bne.w	194f8 <HciDrvHandler+0x224>
   193b2:	f44f 6bfa 	mov.w	fp, #2000	; 0x7d0
   193b6:	e008      	b.n	193ca <HciDrvHandler+0xf6>
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   193b8:	4b66      	ldr	r3, [pc, #408]	; (19554 <HciDrvHandler+0x280>)
   193ba:	681b      	ldr	r3, [r3, #0]
   193bc:	4543      	cmp	r3, r8
   193be:	d10a      	bne.n	193d6 <HciDrvHandler+0x102>
                    am_util_delay_us(1);
   193c0:	f007 fa82 	bl	208c8 <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   193c4:	f1bb 0b01 	subs.w	fp, fp, #1
   193c8:	d005      	beq.n	193d6 <HciDrvHandler+0x102>
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   193ca:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   193ce:	061b      	lsls	r3, r3, #24
                    am_util_delay_us(1);
   193d0:	f04f 0001 	mov.w	r0, #1
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   193d4:	d4f0      	bmi.n	193b8 <HciDrvHandler+0xe4>
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   193d6:	4b62      	ldr	r3, [pc, #392]	; (19560 <HciDrvHandler+0x28c>)
   193d8:	4f5a      	ldr	r7, [pc, #360]	; (19544 <HciDrvHandler+0x270>)
   193da:	6818      	ldr	r0, [r3, #0]
   193dc:	8839      	ldrh	r1, [r7, #0]
   193de:	f7ff fb93 	bl	18b08 <hciTrSerialRxIncoming>
                if (g_consumed_bytes != g_ui32NumBytes)
   193e2:	683b      	ldr	r3, [r7, #0]
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   193e4:	4a58      	ldr	r2, [pc, #352]	; (19548 <HciDrvHandler+0x274>)
                if (g_consumed_bytes != g_ui32NumBytes)
   193e6:	4298      	cmp	r0, r3
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   193e8:	6010      	str	r0, [r2, #0]
                if (g_consumed_bytes != g_ui32NumBytes)
   193ea:	d109      	bne.n	19400 <HciDrvHandler+0x12c>
                read_hci_packet_count++;
   193ec:	9a00      	ldr	r2, [sp, #0]
                g_ui32NumBytes   = 0;
   193ee:	4955      	ldr	r1, [pc, #340]	; (19544 <HciDrvHandler+0x270>)
   193f0:	2300      	movs	r3, #0
                read_hci_packet_count++;
   193f2:	3201      	adds	r2, #1
                g_ui32NumBytes   = 0;
   193f4:	600b      	str	r3, [r1, #0]
                g_consumed_bytes = 0;
   193f6:	4954      	ldr	r1, [pc, #336]	; (19548 <HciDrvHandler+0x274>)
                read_hci_packet_count++;
   193f8:	9200      	str	r2, [sp, #0]
            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   193fa:	2a03      	cmp	r2, #3
                g_consumed_bytes = 0;
   193fc:	600b      	str	r3, [r1, #0]
            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   193fe:	d985      	bls.n	1930c <HciDrvHandler+0x38>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19400:	4b58      	ldr	r3, [pc, #352]	; (19564 <HciDrvHandler+0x290>)
   19402:	2101      	movs	r1, #1
   19404:	7818      	ldrb	r0, [r3, #0]
   19406:	f004 fe1d 	bl	1e044 <WsfSetEvent>

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   1940a:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   1940e:	d035      	beq.n	1947c <HciDrvHandler+0x1a8>
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   19410:	b003      	add	sp, #12
   19412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (g_hciDrvErrorHandler)
   19416:	4a54      	ldr	r2, [pc, #336]	; (19568 <HciDrvHandler+0x294>)
   19418:	6812      	ldr	r2, [r2, #0]
   1941a:	2a00      	cmp	r2, #0
   1941c:	d0c6      	beq.n	193ac <HciDrvHandler+0xd8>
   1941e:	9001      	str	r0, [sp, #4]
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   19420:	4852      	ldr	r0, [pc, #328]	; (1956c <HciDrvHandler+0x298>)
   19422:	4790      	blx	r2
   19424:	9b01      	ldr	r3, [sp, #4]
   19426:	e7c1      	b.n	193ac <HciDrvHandler+0xd8>
        if ( BLE_IRQ_CHECK() )
   19428:	46b2      	mov	sl, r6
   1942a:	46cb      	mov	fp, r9
   1942c:	e7a5      	b.n	1937a <HciDrvHandler+0xa6>
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   1942e:	494c      	ldr	r1, [pc, #304]	; (19560 <HciDrvHandler+0x28c>)
   19430:	6808      	ldr	r0, [r1, #0]
   19432:	1a9b      	subs	r3, r3, r2
   19434:	b299      	uxth	r1, r3
   19436:	4410      	add	r0, r2
   19438:	f7ff fb66 	bl	18b08 <hciTrSerialRxIncoming>
   1943c:	4942      	ldr	r1, [pc, #264]	; (19548 <HciDrvHandler+0x274>)
        if (g_consumed_bytes != g_ui32NumBytes)
   1943e:	4b41      	ldr	r3, [pc, #260]	; (19544 <HciDrvHandler+0x270>)
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   19440:	680a      	ldr	r2, [r1, #0]
        if (g_consumed_bytes != g_ui32NumBytes)
   19442:	681b      	ldr	r3, [r3, #0]
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   19444:	4410      	add	r0, r2
        if (g_consumed_bytes != g_ui32NumBytes)
   19446:	4298      	cmp	r0, r3
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   19448:	6008      	str	r0, [r1, #0]
        if (g_consumed_bytes != g_ui32NumBytes)
   1944a:	d105      	bne.n	19458 <HciDrvHandler+0x184>
            g_ui32NumBytes   = 0;
   1944c:	4a3d      	ldr	r2, [pc, #244]	; (19544 <HciDrvHandler+0x270>)
   1944e:	2300      	movs	r3, #0
   19450:	6013      	str	r3, [r2, #0]
            g_consumed_bytes = 0;
   19452:	4a3d      	ldr	r2, [pc, #244]	; (19548 <HciDrvHandler+0x274>)
   19454:	6013      	str	r3, [r2, #0]
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   19456:	e74b      	b.n	192f0 <HciDrvHandler+0x1c>
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19458:	4b42      	ldr	r3, [pc, #264]	; (19564 <HciDrvHandler+0x290>)
   1945a:	7818      	ldrb	r0, [r3, #0]
   1945c:	2101      	movs	r1, #1
}
   1945e:	b003      	add	sp, #12
   19460:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19464:	f004 bdee 	b.w	1e044 <WsfSetEvent>
        HciReadLocalVerInfoCmd();
   19468:	f7fd fb82 	bl	16b70 <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   1946c:	483a      	ldr	r0, [pc, #232]	; (19558 <HciDrvHandler+0x284>)
   1946e:	f242 7110 	movw	r1, #10000	; 0x2710
}
   19472:	b003      	add	sp, #12
   19474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        BLE_HEARTBEAT_START();
   19478:	f005 b82a 	b.w	1e4d0 <WsfTimerStartMs>
        if (g_hciDrvErrorHandler)
   1947c:	4b3a      	ldr	r3, [pc, #232]	; (19568 <HciDrvHandler+0x294>)
   1947e:	681b      	ldr	r3, [r3, #0]
   19480:	b10b      	cbz	r3, 19486 <HciDrvHandler+0x1b2>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   19482:	483b      	ldr	r0, [pc, #236]	; (19570 <HciDrvHandler+0x29c>)
   19484:	4798      	blx	r3
    BLE_HEARTBEAT_STOP();
   19486:	4834      	ldr	r0, [pc, #208]	; (19558 <HciDrvHandler+0x284>)
   19488:	f005 f866 	bl	1e558 <WsfTimerStop>
   1948c:	4b39      	ldr	r3, [pc, #228]	; (19574 <HciDrvHandler+0x2a0>)
   1948e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   19496:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1949a:	f3bf 8f6f 	isb	sy
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   1949e:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 19584 <HciDrvHandler+0x2b0>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   194a2:	4d35      	ldr	r5, [pc, #212]	; (19578 <HciDrvHandler+0x2a4>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   194a4:	f8db 0000 	ldr.w	r0, [fp]
   194a8:	2101      	movs	r1, #1
   194aa:	f00a fb29 	bl	23b00 <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   194ae:	68ab      	ldr	r3, [r5, #8]
   194b0:	049a      	lsls	r2, r3, #18
   194b2:	d509      	bpl.n	194c8 <HciDrvHandler+0x1f4>
   194b4:	4c31      	ldr	r4, [pc, #196]	; (1957c <HciDrvHandler+0x2a8>)
   194b6:	e001      	b.n	194bc <HciDrvHandler+0x1e8>
   194b8:	3c01      	subs	r4, #1
   194ba:	d005      	beq.n	194c8 <HciDrvHandler+0x1f4>
   194bc:	2010      	movs	r0, #16
   194be:	f00b fcfd 	bl	24ebc <am_hal_flash_delay>
   194c2:	68ab      	ldr	r3, [r5, #8]
   194c4:	049b      	lsls	r3, r3, #18
   194c6:	d4f7      	bmi.n	194b8 <HciDrvHandler+0x1e4>
    am_hal_ble_deinitialize(BLE);
   194c8:	f8db 0000 	ldr.w	r0, [fp]
   194cc:	f00a fa6c 	bl	239a8 <am_hal_ble_deinitialize>
    g_ui32NumBytes   = 0;
   194d0:	4b1c      	ldr	r3, [pc, #112]	; (19544 <HciDrvHandler+0x270>)
   194d2:	2000      	movs	r0, #0
   194d4:	6018      	str	r0, [r3, #0]
    g_consumed_bytes = 0;
   194d6:	4b1c      	ldr	r3, [pc, #112]	; (19548 <HciDrvHandler+0x274>)
   194d8:	6018      	str	r0, [r3, #0]
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   194da:	f7ff fd3d 	bl	18f58 <HciDrvRadioBoot>
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   194de:	4928      	ldr	r1, [pc, #160]	; (19580 <HciDrvHandler+0x2ac>)
   194e0:	481b      	ldr	r0, [pc, #108]	; (19550 <HciDrvHandler+0x27c>)
   194e2:	f44f 6302 	mov.w	r3, #2080	; 0x820
   194e6:	f44f 7282 	mov.w	r2, #260	; 0x104
   194ea:	f00c f909 	bl	25700 <am_hal_queue_init>
}
   194ee:	b003      	add	sp, #12
   194f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   194f4:	f7f4 b9a8 	b.w	d848 <DmDevReset>
        if (g_hciDrvErrorHandler)
   194f8:	4a1b      	ldr	r2, [pc, #108]	; (19568 <HciDrvHandler+0x294>)
   194fa:	6812      	ldr	r2, [r2, #0]
   194fc:	b10a      	cbz	r2, 19502 <HciDrvHandler+0x22e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   194fe:	4618      	mov	r0, r3
   19500:	4790      	blx	r2
    BLE_HEARTBEAT_STOP();
   19502:	4815      	ldr	r0, [pc, #84]	; (19558 <HciDrvHandler+0x284>)
   19504:	f005 f828 	bl	1e558 <WsfTimerStop>
   19508:	4b1a      	ldr	r3, [pc, #104]	; (19574 <HciDrvHandler+0x2a0>)
   1950a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1950e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   19512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19516:	f3bf 8f6f 	isb	sy
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   1951a:	4d17      	ldr	r5, [pc, #92]	; (19578 <HciDrvHandler+0x2a4>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   1951c:	f8db 0000 	ldr.w	r0, [fp]
   19520:	2101      	movs	r1, #1
   19522:	f00a faed 	bl	23b00 <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   19526:	68ab      	ldr	r3, [r5, #8]
   19528:	049f      	lsls	r7, r3, #18
   1952a:	d5cd      	bpl.n	194c8 <HciDrvHandler+0x1f4>
   1952c:	4c13      	ldr	r4, [pc, #76]	; (1957c <HciDrvHandler+0x2a8>)
   1952e:	e001      	b.n	19534 <HciDrvHandler+0x260>
   19530:	3c01      	subs	r4, #1
   19532:	d0c9      	beq.n	194c8 <HciDrvHandler+0x1f4>
   19534:	2010      	movs	r0, #16
   19536:	f00b fcc1 	bl	24ebc <am_hal_flash_delay>
   1953a:	68ab      	ldr	r3, [r5, #8]
   1953c:	049e      	lsls	r6, r3, #18
   1953e:	d4f7      	bmi.n	19530 <HciDrvHandler+0x25c>
   19540:	e7c2      	b.n	194c8 <HciDrvHandler+0x1f4>
   19542:	bf00      	nop
   19544:	10005944 	.word	0x10005944
   19548:	10005000 	.word	0x10005000
   1954c:	5000c000 	.word	0x5000c000
   19550:	10005928 	.word	0x10005928
   19554:	10005940 	.word	0x10005940
   19558:	10004fe0 	.word	0x10004fe0
   1955c:	10005828 	.word	0x10005828
   19560:	10002c24 	.word	0x10002c24
   19564:	10004fde 	.word	0x10004fde
   19568:	10005004 	.word	0x10005004
   1956c:	09000002 	.word	0x09000002
   19570:	09000006 	.word	0x09000006
   19574:	e000e100 	.word	0xe000e100
   19578:	40021000 	.word	0x40021000
   1957c:	000f4240 	.word	0x000f4240
   19580:	10005008 	.word	0x10005008
   19584:	10004fd4 	.word	0x10004fd4

00019588 <HciVscUpdateBDAddress>:
    HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   19588:	4a02      	ldr	r2, [pc, #8]	; (19594 <HciVscUpdateBDAddress+0xc>)
   1958a:	2106      	movs	r1, #6
   1958c:	f64f 4032 	movw	r0, #64562	; 0xfc32
   19590:	f7fd bda6 	b.w	170e0 <HciVendorSpecificCmd>
   19594:	10004fd8 	.word	0x10004fd8

00019598 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   19598:	b508      	push	{r3, lr}
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   1959a:	f7fd fb4f 	bl	16c3c <HciResetCmd>

  // update Bluetooth Address to controller
  HciVscUpdateBDAddress();        

}
   1959e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HciVscUpdateBDAddress();        
   195a2:	f7ff bff1 	b.w	19588 <HciVscUpdateBDAddress>
   195a6:	bf00      	nop

000195a8 <hciCoreResetSequence>:
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   195a8:	7803      	ldrb	r3, [r0, #0]
   195aa:	2b0e      	cmp	r3, #14
   195ac:	d000      	beq.n	195b0 <hciCoreResetSequence+0x8>
   195ae:	4770      	bx	lr
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
    pMsg++;                   /* skip num packets */
    BSTREAM_TO_UINT16(opcode, pMsg);
   195b0:	7902      	ldrb	r2, [r0, #4]
   195b2:	78c1      	ldrb	r1, [r0, #3]
   195b4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
    pMsg++;                   /* skip status */

    /* decode opcode */
    switch (opcode)
   195b8:	f242 034a 	movw	r3, #8266	; 0x204a
    BSTREAM_TO_UINT16(opcode, pMsg);
   195bc:	b289      	uxth	r1, r1
    switch (opcode)
   195be:	4299      	cmp	r1, r3
    pMsg++;                   /* skip status */
   195c0:	f100 0206 	add.w	r2, r0, #6
    switch (opcode)
   195c4:	d8f3      	bhi.n	195ae <hciCoreResetSequence+0x6>
{
   195c6:	b500      	push	{lr}
    switch (opcode)
   195c8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
{
   195cc:	b083      	sub	sp, #12
    switch (opcode)
   195ce:	d962      	bls.n	19696 <hciCoreResetSequence+0xee>
   195d0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   195d4:	3b01      	subs	r3, #1
   195d6:	2b49      	cmp	r3, #73	; 0x49
   195d8:	d85a      	bhi.n	19690 <hciCoreResetSequence+0xe8>
   195da:	e8df f013 	tbh	[pc, r3, lsl #1]
   195de:	0094      	.short	0x0094
   195e0:	00db009a 	.word	0x00db009a
   195e4:	00590059 	.word	0x00590059
   195e8:	00590059 	.word	0x00590059
   195ec:	00590059 	.word	0x00590059
   195f0:	00590059 	.word	0x00590059
   195f4:	00590059 	.word	0x00590059
   195f8:	00ed0059 	.word	0x00ed0059
   195fc:	00590059 	.word	0x00590059
   19600:	00590059 	.word	0x00590059
   19604:	00590059 	.word	0x00590059
   19608:	00590059 	.word	0x00590059
   1960c:	0059004a 	.word	0x0059004a
   19610:	00590059 	.word	0x00590059
   19614:	005900f6 	.word	0x005900f6
   19618:	00590059 	.word	0x00590059
   1961c:	00590059 	.word	0x00590059
   19620:	00590059 	.word	0x00590059
   19624:	005900c3 	.word	0x005900c3
   19628:	00590059 	.word	0x00590059
   1962c:	00590059 	.word	0x00590059
   19630:	005900cb 	.word	0x005900cb
   19634:	00590059 	.word	0x00590059
   19638:	00b40059 	.word	0x00b40059
   1963c:	00590059 	.word	0x00590059
   19640:	00590059 	.word	0x00590059
   19644:	00590059 	.word	0x00590059
   19648:	00590059 	.word	0x00590059
   1964c:	00590059 	.word	0x00590059
   19650:	008a008a 	.word	0x008a008a
   19654:	00590059 	.word	0x00590059
   19658:	00590059 	.word	0x00590059
   1965c:	00590059 	.word	0x00590059
   19660:	00590059 	.word	0x00590059
   19664:	00590059 	.word	0x00590059
   19668:	00590059 	.word	0x00590059
   1966c:	00590059 	.word	0x00590059
   19670:	008a      	.short	0x008a
        }
        break;

      case HCI_OPCODE_LE_RAND:
        /* check if need to send second rand command */
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   19672:	4a66      	ldr	r2, [pc, #408]	; (1980c <hciCoreResetSequence+0x264>)
   19674:	7813      	ldrb	r3, [r2, #0]
   19676:	2b02      	cmp	r3, #2
   19678:	f240 80bb 	bls.w	197f2 <hciCoreResetSequence+0x24a>
          HciLeRandCmd();
        }
        else
        {
          /* last command in sequence; set resetting state and call callback */
          hciCb.resetting = FALSE;
   1967c:	4a64      	ldr	r2, [pc, #400]	; (19810 <hciCoreResetSequence+0x268>)
   1967e:	2300      	movs	r3, #0
          hdr.param = 0;
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   19680:	6891      	ldr	r1, [r2, #8]
          hciCb.resetting = FALSE;
   19682:	7653      	strb	r3, [r2, #25]
          hdr.param = 0;
   19684:	f8ad 3004 	strh.w	r3, [sp, #4]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   19688:	f88d 3006 	strb.w	r3, [sp, #6]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   1968c:	a801      	add	r0, sp, #4
   1968e:	4788      	blx	r1

      default:
        break;
    }
  }
}
   19690:	b003      	add	sp, #12
   19692:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (opcode)
   19696:	f640 4363 	movw	r3, #3171	; 0xc63
   1969a:	4299      	cmp	r1, r3
   1969c:	f000 809f 	beq.w	197de <hciCoreResetSequence+0x236>
   196a0:	d910      	bls.n	196c4 <hciCoreResetSequence+0x11c>
   196a2:	f241 0301 	movw	r3, #4097	; 0x1001
   196a6:	4299      	cmp	r1, r3
   196a8:	d023      	beq.n	196f2 <hciCoreResetSequence+0x14a>
   196aa:	f241 0309 	movw	r3, #4105	; 0x1009
   196ae:	4299      	cmp	r1, r3
   196b0:	d1ee      	bne.n	19690 <hciCoreResetSequence+0xe8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   196b2:	4858      	ldr	r0, [pc, #352]	; (19814 <hciCoreResetSequence+0x26c>)
   196b4:	4611      	mov	r1, r2
   196b6:	f7fc f901 	bl	158bc <BdaCpy>
}
   196ba:	b003      	add	sp, #12
   196bc:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadBufSizeCmd();
   196c0:	f7fc bf1e 	b.w	16500 <HciLeReadBufSizeCmd>
    switch (opcode)
   196c4:	f640 4301 	movw	r3, #3073	; 0xc01
   196c8:	4299      	cmp	r1, r3
   196ca:	d00c      	beq.n	196e6 <hciCoreResetSequence+0x13e>
   196cc:	f640 4303 	movw	r3, #3075	; 0xc03
   196d0:	4299      	cmp	r1, r3
   196d2:	d1dd      	bne.n	19690 <hciCoreResetSequence+0xe8>
        randCnt = 0;
   196d4:	4b4d      	ldr	r3, [pc, #308]	; (1980c <hciCoreResetSequence+0x264>)
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   196d6:	4850      	ldr	r0, [pc, #320]	; (19818 <hciCoreResetSequence+0x270>)
        randCnt = 0;
   196d8:	2200      	movs	r2, #0
   196da:	701a      	strb	r2, [r3, #0]
}
   196dc:	b003      	add	sp, #12
   196de:	f85d eb04 	ldr.w	lr, [sp], #4
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   196e2:	f7fd baf3 	b.w	16ccc <HciSetEventMaskCmd>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   196e6:	484d      	ldr	r0, [pc, #308]	; (1981c <hciCoreResetSequence+0x274>)
}
   196e8:	b003      	add	sp, #12
   196ea:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   196ee:	f7fd b8cd 	b.w	1688c <HciLeSetEventMaskCmd>
        if (hciCoreCb.extResetSeq)
   196f2:	4b4b      	ldr	r3, [pc, #300]	; (19820 <hciCoreResetSequence+0x278>)
   196f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   196f8:	2b00      	cmp	r3, #0
   196fa:	d0c9      	beq.n	19690 <hciCoreResetSequence+0xe8>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   196fc:	4610      	mov	r0, r2
}
   196fe:	b003      	add	sp, #12
   19700:	f85d eb04 	ldr.w	lr, [sp], #4
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   19704:	4718      	bx	r3
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   19706:	4847      	ldr	r0, [pc, #284]	; (19824 <hciCoreResetSequence+0x27c>)
}
   19708:	b003      	add	sp, #12
   1970a:	f85d eb04 	ldr.w	lr, [sp], #4
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   1970e:	f7fd bb15 	b.w	16d3c <HciSetEventMaskPage2Cmd>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   19712:	79c1      	ldrb	r1, [r0, #7]
   19714:	7982      	ldrb	r2, [r0, #6]
   19716:	4b42      	ldr	r3, [pc, #264]	; (19820 <hciCoreResetSequence+0x278>)
   19718:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   1971c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   19720:	7a02      	ldrb	r2, [r0, #8]
        if (!APOLLO3_GE_B0)
   19722:	4941      	ldr	r1, [pc, #260]	; (19828 <hciCoreResetSequence+0x280>)
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   19724:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        if (!APOLLO3_GE_B0)
   19728:	68c9      	ldr	r1, [r1, #12]
   1972a:	b2c9      	uxtb	r1, r1
   1972c:	2920      	cmp	r1, #32
   1972e:	d803      	bhi.n	19738 <hciCoreResetSequence+0x190>
          hciCoreCb.numBufs--;
   19730:	3a01      	subs	r2, #1
   19732:	b2d2      	uxtb	r2, r2
   19734:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   19738:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
   1973c:	b003      	add	sp, #12
   1973e:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadSupStatesCmd();
   19742:	f7fc bf73 	b.w	1662c <HciLeReadSupStatesCmd>
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   19746:	7a42      	ldrb	r2, [r0, #9]
   19748:	7a01      	ldrb	r1, [r0, #8]
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   1974a:	79c3      	ldrb	r3, [r0, #7]
   1974c:	7980      	ldrb	r0, [r0, #6]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   1974e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   19752:	eb00 2003 	add.w	r0, r0, r3, lsl #8
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   19756:	b289      	uxth	r1, r1
   19758:	b280      	uxth	r0, r0
}
   1975a:	b003      	add	sp, #12
   1975c:	f85d eb04 	ldr.w	lr, [sp], #4
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   19760:	f7fc bd6e 	b.w	16240 <HciLeWriteDefDataLen>
        if (hciCoreCb.extResetSeq)
   19764:	492e      	ldr	r1, [pc, #184]	; (19820 <hciCoreResetSequence+0x278>)
   19766:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   1976a:	2b00      	cmp	r3, #0
   1976c:	d049      	beq.n	19802 <hciCoreResetSequence+0x25a>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   1976e:	f242 0124 	movw	r1, #8228	; 0x2024
   19772:	e7c3      	b.n	196fc <hciCoreResetSequence+0x154>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   19774:	4b2a      	ldr	r3, [pc, #168]	; (19820 <hciCoreResetSequence+0x278>)
   19776:	7981      	ldrb	r1, [r0, #6]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   19778:	6fda      	ldr	r2, [r3, #124]	; 0x7c
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   1977a:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   1977e:	0693      	lsls	r3, r2, #26
   19780:	d503      	bpl.n	1978a <hciCoreResetSequence+0x1e2>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   19782:	4b2a      	ldr	r3, [pc, #168]	; (1982c <hciCoreResetSequence+0x284>)
   19784:	681b      	ldr	r3, [r3, #0]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   19786:	069a      	lsls	r2, r3, #26
   19788:	d42e      	bmi.n	197e8 <hciCoreResetSequence+0x240>
}
   1978a:	b003      	add	sp, #12
   1978c:	f85d eb04 	ldr.w	lr, [sp], #4
          HciLeRandCmd();
   19790:	f7fc be86 	b.w	164a0 <HciLeRandCmd>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   19794:	79c1      	ldrb	r1, [r0, #7]
   19796:	7982      	ldrb	r2, [r0, #6]
   19798:	4b21      	ldr	r3, [pc, #132]	; (19820 <hciCoreResetSequence+0x278>)
   1979a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   1979e:	0651      	lsls	r1, r2, #25
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   197a0:	67da      	str	r2, [r3, #124]	; 0x7c
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   197a2:	d503      	bpl.n	197ac <hciCoreResetSequence+0x204>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   197a4:	4921      	ldr	r1, [pc, #132]	; (1982c <hciCoreResetSequence+0x284>)
   197a6:	6809      	ldr	r1, [r1, #0]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   197a8:	0648      	lsls	r0, r1, #25
   197aa:	d425      	bmi.n	197f8 <hciCoreResetSequence+0x250>
    hciCoreCb.resListSize = 0;
   197ac:	2100      	movs	r1, #0
   197ae:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   197b2:	0691      	lsls	r1, r2, #26
   197b4:	d5e9      	bpl.n	1978a <hciCoreResetSequence+0x1e2>
   197b6:	e7e4      	b.n	19782 <hciCoreResetSequence+0x1da>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   197b8:	4b19      	ldr	r3, [pc, #100]	; (19820 <hciCoreResetSequence+0x278>)
   197ba:	7982      	ldrb	r2, [r0, #6]
   197bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
   197c0:	b003      	add	sp, #12
   197c2:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadLocalSupFeatCmd();
   197c6:	f7fc becb 	b.w	16560 <HciLeReadLocalSupFeatCmd>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   197ca:	f8d0 0006 	ldr.w	r0, [r0, #6]
   197ce:	6851      	ldr	r1, [r2, #4]
   197d0:	4b17      	ldr	r3, [pc, #92]	; (19830 <hciCoreResetSequence+0x288>)
   197d2:	c303      	stmia	r3!, {r0, r1}
}
   197d4:	b003      	add	sp, #12
   197d6:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadWhiteListSizeCmd();
   197da:	f7fc bf57 	b.w	1668c <HciLeReadWhiteListSizeCmd>
}
   197de:	b003      	add	sp, #12
   197e0:	f85d eb04 	ldr.w	lr, [sp], #4
        HciReadBdAddrCmd();
   197e4:	f7fd b994 	b.w	16b10 <HciReadBdAddrCmd>
}
   197e8:	b003      	add	sp, #12
   197ea:	f85d eb04 	ldr.w	lr, [sp], #4
    HciLeReadMaxDataLen();
   197ee:	f7fc bd61 	b.w	162b4 <HciLeReadMaxDataLen>
          randCnt++;
   197f2:	3301      	adds	r3, #1
   197f4:	7013      	strb	r3, [r2, #0]
   197f6:	e7c8      	b.n	1978a <hciCoreResetSequence+0x1e2>
}
   197f8:	b003      	add	sp, #12
   197fa:	f85d eb04 	ldr.w	lr, [sp], #4
    HciLeReadResolvingListSize();
   197fe:	f7fd bbcf 	b.w	16fa0 <HciLeReadResolvingListSize>
          hciCoreCb.maxAdvDataLen = 0;
   19802:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
          hciCoreCb.numSupAdvSets = 0;
   19806:	f8a1 3084 	strh.w	r3, [r1, #132]	; 0x84
          HciLeRandCmd();
   1980a:	e7be      	b.n	1978a <hciCoreResetSequence+0x1e2>
   1980c:	10005948 	.word	0x10005948
   19810:	10004324 	.word	0x10004324
   19814:	10004f54 	.word	0x10004f54
   19818:	00026984 	.word	0x00026984
   1981c:	00026994 	.word	0x00026994
   19820:	10004ef8 	.word	0x10004ef8
   19824:	0002698c 	.word	0x0002698c
   19828:	40020000 	.word	0x40020000
   1982c:	10002bf4 	.word	0x10002bf4
   19830:	10004f4c 	.word	0x10004f4c

00019834 <hciCoreVsCmdCmplRcvd>:
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
}
   19834:	2012      	movs	r0, #18
   19836:	4770      	bx	lr

00019838 <HciVsInit>:
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{

}
   19838:	4770      	bx	lr
   1983a:	bf00      	nop

0001983c <l2cDefaultCtrlCback>:
 */
/*************************************************************************************************/
static void l2cDefaultCtrlCback(wsfMsgHdr_t *pMsg)
{
  return;
}
   1983c:	4770      	bx	lr
   1983e:	bf00      	nop

00019840 <l2cHciFlowCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciFlowCback(uint16_t handle, bool_t flowDisabled)
{
   19840:	b530      	push	{r4, r5, lr}
   19842:	b083      	sub	sp, #12
   19844:	460c      	mov	r4, r1
  wsfMsgHdr_t hdr;

  /* get conn ID for handle */
  if ((hdr.param = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   19846:	f7f3 fd71 	bl	d32c <DmConnIdByHandle>
   1984a:	b280      	uxth	r0, r0
   1984c:	f8ad 0004 	strh.w	r0, [sp, #4]
   19850:	b178      	cbz	r0, 19872 <l2cHciFlowCback+0x32>
  {
    /* execute higher layer flow control callbacks */
    hdr.event = flowDisabled;
    (*l2cCb.attCtrlCback)(&hdr);
   19852:	4d09      	ldr	r5, [pc, #36]	; (19878 <l2cHciFlowCback+0x38>)
    hdr.event = flowDisabled;
   19854:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.attCtrlCback)(&hdr);
   19858:	68eb      	ldr	r3, [r5, #12]
   1985a:	a801      	add	r0, sp, #4
   1985c:	4798      	blx	r3
    hdr.event = flowDisabled;
    (*l2cCb.smpCtrlCback)(&hdr);
   1985e:	692b      	ldr	r3, [r5, #16]
    hdr.event = flowDisabled;
   19860:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.smpCtrlCback)(&hdr);
   19864:	a801      	add	r0, sp, #4
   19866:	4798      	blx	r3

    /* execute connection oriented channel flow control callback */
    hdr.event = flowDisabled;
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   19868:	696b      	ldr	r3, [r5, #20]
    hdr.event = flowDisabled;
   1986a:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   1986e:	a801      	add	r0, sp, #4
   19870:	4798      	blx	r3
  }
}
   19872:	b003      	add	sp, #12
   19874:	bd30      	pop	{r4, r5, pc}
   19876:	bf00      	nop
   19878:	1000594c 	.word	0x1000594c

0001987c <l2cRxSignalingPkt>:
{
   1987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19880:	4606      	mov	r6, r0
   19882:	460d      	mov	r5, r1
   19884:	4614      	mov	r4, r2
  if ((connId = DmConnIdByHandle(handle)) == DM_CONN_ID_NONE)
   19886:	f7f3 fd51 	bl	d32c <DmConnIdByHandle>
   1988a:	b908      	cbnz	r0, 19890 <l2cRxSignalingPkt+0x14>
}
   1988c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  role = DmConnRole(connId);
   19890:	f7f3 fe00 	bl	d494 <DmConnRole>
  if ((role == DM_ROLE_MASTER) && (l2cCb.masterRxSignalingPkt != NULL))
   19894:	4601      	mov	r1, r0
   19896:	b948      	cbnz	r0, 198ac <l2cRxSignalingPkt+0x30>
   19898:	4a0d      	ldr	r2, [pc, #52]	; (198d0 <l2cRxSignalingPkt+0x54>)
   1989a:	6997      	ldr	r7, [r2, #24]
   1989c:	b147      	cbz	r7, 198b0 <l2cRxSignalingPkt+0x34>
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1989e:	4622      	mov	r2, r4
   198a0:	4629      	mov	r1, r5
   198a2:	4630      	mov	r0, r6
   198a4:	463b      	mov	r3, r7
}
   198a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   198aa:	4718      	bx	r3
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   198ac:	2801      	cmp	r0, #1
   198ae:	d004      	beq.n	198ba <l2cRxSignalingPkt+0x3e>
}
   198b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2C_TRACE_ERR1("Invalid role configuration: role=%d", role);
   198b4:	4807      	ldr	r0, [pc, #28]	; (198d4 <l2cRxSignalingPkt+0x58>)
   198b6:	f004 beef 	b.w	1e698 <WsfTrace>
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   198ba:	4a05      	ldr	r2, [pc, #20]	; (198d0 <l2cRxSignalingPkt+0x54>)
   198bc:	69d7      	ldr	r7, [r2, #28]
   198be:	2f00      	cmp	r7, #0
   198c0:	d0f6      	beq.n	198b0 <l2cRxSignalingPkt+0x34>
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   198c2:	4622      	mov	r2, r4
   198c4:	4629      	mov	r1, r5
   198c6:	4630      	mov	r0, r6
   198c8:	463b      	mov	r3, r7
}
   198ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   198ce:	4718      	bx	r3
   198d0:	1000594c 	.word	0x1000594c
   198d4:	00026de0 	.word	0x00026de0

000198d8 <l2cDefaultDataCidCback>:
  L2C_TRACE_WARN1("unknown cid=0x%04x", cid);
   198d8:	4801      	ldr	r0, [pc, #4]	; (198e0 <l2cDefaultDataCidCback+0x8>)
   198da:	f004 bedd 	b.w	1e698 <WsfTrace>
   198de:	bf00      	nop
   198e0:	00026e04 	.word	0x00026e04

000198e4 <l2cDefaultDataCback>:
  L2C_TRACE_WARN0("rcvd data on uregistered cid");
   198e4:	4801      	ldr	r0, [pc, #4]	; (198ec <l2cDefaultDataCback+0x8>)
   198e6:	f004 bed7 	b.w	1e698 <WsfTrace>
   198ea:	bf00      	nop
   198ec:	00026e18 	.word	0x00026e18

000198f0 <l2cHciAclCback>:
{
   198f0:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT16(hciLen, p);
   198f2:	78c3      	ldrb	r3, [r0, #3]
   198f4:	7882      	ldrb	r2, [r0, #2]
   198f6:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   198fa:	b292      	uxth	r2, r2
  if (hciLen >= L2C_HDR_LEN)
   198fc:	2a03      	cmp	r2, #3
{
   198fe:	4604      	mov	r4, r0
  if (hciLen >= L2C_HDR_LEN)
   19900:	d808      	bhi.n	19914 <l2cHciAclCback+0x24>
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   19902:	2100      	movs	r1, #0
    L2C_TRACE_WARN2("length mismatch: l2c=%u hci=%u", l2cLen, hciLen);
   19904:	4826      	ldr	r0, [pc, #152]	; (199a0 <l2cHciAclCback+0xb0>)
   19906:	f004 fec7 	bl	1e698 <WsfTrace>
  WsfMsgFree(pPacket);
   1990a:	4620      	mov	r0, r4
}
   1990c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   19910:	f004 bb4a 	b.w	1dfa8 <WsfMsgFree>
    BSTREAM_TO_UINT16(l2cLen, p);
   19914:	7941      	ldrb	r1, [r0, #5]
   19916:	f890 c004 	ldrb.w	ip, [r0, #4]
   1991a:	eb0c 2c01 	add.w	ip, ip, r1, lsl #8
   1991e:	fa1f fc8c 	uxth.w	ip, ip
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   19922:	f10c 0304 	add.w	r3, ip, #4
   19926:	429a      	cmp	r2, r3
   19928:	4661      	mov	r1, ip
   1992a:	d1eb      	bne.n	19904 <l2cHciAclCback+0x14>
    BSTREAM_TO_UINT16(cid, p);
   1992c:	79c1      	ldrb	r1, [r0, #7]
   1992e:	7983      	ldrb	r3, [r0, #6]
  BSTREAM_TO_UINT16(handle, p);
   19930:	7842      	ldrb	r2, [r0, #1]
   19932:	7800      	ldrb	r0, [r0, #0]
    BSTREAM_TO_UINT16(cid, p);
   19934:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   19938:	b29b      	uxth	r3, r3
  BSTREAM_TO_UINT16(handle, p);
   1993a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    switch (cid)
   1993e:	2b05      	cmp	r3, #5
  handle &= HCI_HANDLE_MASK;
   19940:	f3c0 000b 	ubfx	r0, r0, #0, #12
    switch (cid)
   19944:	d022      	beq.n	1998c <l2cHciAclCback+0x9c>
   19946:	2b06      	cmp	r3, #6
   19948:	d016      	beq.n	19978 <l2cHciAclCback+0x88>
   1994a:	2b04      	cmp	r3, #4
   1994c:	d00a      	beq.n	19964 <l2cHciAclCback+0x74>
        (*l2cCb.l2cDataCidCback)(handle, cid, l2cLen, pPacket);
   1994e:	4915      	ldr	r1, [pc, #84]	; (199a4 <l2cHciAclCback+0xb4>)
   19950:	4662      	mov	r2, ip
   19952:	6a0d      	ldr	r5, [r1, #32]
   19954:	4619      	mov	r1, r3
   19956:	4623      	mov	r3, r4
   19958:	47a8      	blx	r5
  WsfMsgFree(pPacket);
   1995a:	4620      	mov	r0, r4
}
   1995c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   19960:	f004 bb22 	b.w	1dfa8 <WsfMsgFree>
        (*l2cCb.attDataCback)(handle, l2cLen, pPacket);
   19964:	4b0f      	ldr	r3, [pc, #60]	; (199a4 <l2cHciAclCback+0xb4>)
   19966:	4622      	mov	r2, r4
   19968:	681b      	ldr	r3, [r3, #0]
   1996a:	4661      	mov	r1, ip
   1996c:	4798      	blx	r3
  WsfMsgFree(pPacket);
   1996e:	4620      	mov	r0, r4
}
   19970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   19974:	f004 bb18 	b.w	1dfa8 <WsfMsgFree>
        (*l2cCb.smpDataCback)(handle, l2cLen, pPacket);
   19978:	4b0a      	ldr	r3, [pc, #40]	; (199a4 <l2cHciAclCback+0xb4>)
   1997a:	4622      	mov	r2, r4
   1997c:	685b      	ldr	r3, [r3, #4]
   1997e:	4661      	mov	r1, ip
   19980:	4798      	blx	r3
  WsfMsgFree(pPacket);
   19982:	4620      	mov	r0, r4
}
   19984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   19988:	f004 bb0e 	b.w	1dfa8 <WsfMsgFree>
        (*l2cCb.l2cSignalingCback)(handle, l2cLen, pPacket);
   1998c:	4b05      	ldr	r3, [pc, #20]	; (199a4 <l2cHciAclCback+0xb4>)
   1998e:	4622      	mov	r2, r4
   19990:	689b      	ldr	r3, [r3, #8]
   19992:	4661      	mov	r1, ip
   19994:	4798      	blx	r3
  WsfMsgFree(pPacket);
   19996:	4620      	mov	r0, r4
}
   19998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   1999c:	f004 bb04 	b.w	1dfa8 <WsfMsgFree>
   199a0:	00026e38 	.word	0x00026e38
   199a4:	1000594c 	.word	0x1000594c

000199a8 <l2cSendCmdReject>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cSendCmdReject(uint16_t handle, uint8_t identifier, uint16_t reason)
{
   199a8:	b570      	push	{r4, r5, r6, lr}
   199aa:	4605      	mov	r5, r0
   199ac:	460e      	mov	r6, r1
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *l2cMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   199ae:	200e      	movs	r0, #14
   199b0:	2100      	movs	r1, #0
{
   199b2:	4614      	mov	r4, r2
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   199b4:	f004 fae6 	bl	1df84 <WsfMsgDataAlloc>
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CMD_REJ_LEN)) != NULL)
   199b8:	b1c8      	cbz	r0, 199ee <l2cSendCmdReject+0x46>
void L2cDataReq(uint16_t cid, uint16_t handle, uint16_t len, uint8_t *pPacket)
{
  uint8_t *p = pPacket;

  /* Set HCI header */
  UINT16_TO_BSTREAM(p, handle);
   199ba:	0a29      	lsrs	r1, r5, #8
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   199bc:	2202      	movs	r2, #2
   199be:	7282      	strb	r2, [r0, #10]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   199c0:	7304      	strb	r4, [r0, #12]
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   199c2:	2200      	movs	r2, #0
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   199c4:	0a24      	lsrs	r4, r4, #8
  UINT16_TO_BSTREAM(p, handle);
   199c6:	7041      	strb	r1, [r0, #1]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));

  /* Set L2CAP header */
  UINT16_TO_BSTREAM(p, len);
   199c8:	2106      	movs	r1, #6
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   199ca:	72c2      	strb	r2, [r0, #11]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   199cc:	7344      	strb	r4, [r0, #13]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   199ce:	70c2      	strb	r2, [r0, #3]
   199d0:	240a      	movs	r4, #10
  UINT16_TO_BSTREAM(p, len);
   199d2:	7101      	strb	r1, [r0, #4]
   199d4:	7142      	strb	r2, [r0, #5]
  UINT16_TO_BSTREAM(p, cid);
   199d6:	71c2      	strb	r2, [r0, #7]
   199d8:	2105      	movs	r1, #5
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   199da:	2201      	movs	r2, #1
    UINT8_TO_BSTREAM(p, identifier);              /* identifier */
   199dc:	7246      	strb	r6, [r0, #9]
  UINT16_TO_BSTREAM(p, handle);
   199de:	7005      	strb	r5, [r0, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   199e0:	7084      	strb	r4, [r0, #2]
  UINT16_TO_BSTREAM(p, cid);
   199e2:	7181      	strb	r1, [r0, #6]
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   199e4:	7202      	strb	r2, [r0, #8]
}
   199e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Send to HCI */
  HciSendAclData(pPacket);
   199ea:	f7fd beeb 	b.w	177c4 <HciSendAclData>
}
   199ee:	bd70      	pop	{r4, r5, r6, pc}

000199f0 <l2cMsgAlloc>:
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   199f0:	2100      	movs	r1, #0
   199f2:	f004 bac7 	b.w	1df84 <WsfMsgDataAlloc>
   199f6:	bf00      	nop

000199f8 <L2cInit>:
  l2cCb.attDataCback = l2cDefaultDataCback;
   199f8:	4b0b      	ldr	r3, [pc, #44]	; (19a28 <L2cInit+0x30>)
   199fa:	490c      	ldr	r1, [pc, #48]	; (19a2c <L2cInit+0x34>)
  l2cCb.attCtrlCback = l2cDefaultCtrlCback;
   199fc:	4a0c      	ldr	r2, [pc, #48]	; (19a30 <L2cInit+0x38>)
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   199fe:	480d      	ldr	r0, [pc, #52]	; (19a34 <L2cInit+0x3c>)
  l2cCb.identifier = 1;
   19a00:	f04f 0c01 	mov.w	ip, #1
{
   19a04:	b410      	push	{r4}
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   19a06:	4c0c      	ldr	r4, [pc, #48]	; (19a38 <L2cInit+0x40>)
  l2cCb.identifier = 1;
   19a08:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
  l2cCb.smpDataCback = l2cDefaultDataCback;
   19a0c:	e9c3 1100 	strd	r1, r1, [r3]
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   19a10:	609c      	str	r4, [r3, #8]
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   19a12:	6218      	str	r0, [r3, #32]
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   19a14:	4909      	ldr	r1, [pc, #36]	; (19a3c <L2cInit+0x44>)
   19a16:	480a      	ldr	r0, [pc, #40]	; (19a40 <L2cInit+0x48>)
}
   19a18:	f85d 4b04 	ldr.w	r4, [sp], #4
  l2cCb.l2cCocCtrlCback = l2cDefaultCtrlCback;
   19a1c:	615a      	str	r2, [r3, #20]
  l2cCb.smpCtrlCback = l2cDefaultCtrlCback;
   19a1e:	e9c3 2203 	strd	r2, r2, [r3, #12]
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   19a22:	f7fc b817 	b.w	15a54 <HciAclRegister>
   19a26:	bf00      	nop
   19a28:	1000594c 	.word	0x1000594c
   19a2c:	000198e5 	.word	0x000198e5
   19a30:	0001983d 	.word	0x0001983d
   19a34:	000198d9 	.word	0x000198d9
   19a38:	0001987d 	.word	0x0001987d
   19a3c:	00019841 	.word	0x00019841
   19a40:	000198f1 	.word	0x000198f1

00019a44 <L2cRegister>:
    l2cCb.attDataCback = dataCback;
   19a44:	4b03      	ldr	r3, [pc, #12]	; (19a54 <L2cRegister+0x10>)
  if (cid == L2C_CID_ATT)
   19a46:	2804      	cmp	r0, #4
    l2cCb.attDataCback = dataCback;
   19a48:	bf07      	ittee	eq
   19a4a:	6019      	streq	r1, [r3, #0]
    l2cCb.attCtrlCback = ctrlCback;
   19a4c:	60da      	streq	r2, [r3, #12]
    l2cCb.smpDataCback = dataCback;
   19a4e:	6059      	strne	r1, [r3, #4]
    l2cCb.smpCtrlCback = ctrlCback;
   19a50:	611a      	strne	r2, [r3, #16]
}
   19a52:	4770      	bx	lr
   19a54:	1000594c 	.word	0x1000594c

00019a58 <L2cDataReq>:
  UINT16_TO_BSTREAM(p, handle);
   19a58:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   19a5c:	f883 c001 	strb.w	ip, [r3, #1]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   19a60:	fa5f fc82 	uxtb.w	ip, r2
  UINT16_TO_BSTREAM(p, handle);
   19a64:	7019      	strb	r1, [r3, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   19a66:	f10c 0104 	add.w	r1, ip, #4
   19a6a:	7099      	strb	r1, [r3, #2]
   19a6c:	1d11      	adds	r1, r2, #4
   19a6e:	1209      	asrs	r1, r1, #8
  UINT16_TO_BSTREAM(p, len);
   19a70:	0a12      	lsrs	r2, r2, #8
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   19a72:	70d9      	strb	r1, [r3, #3]
  UINT16_TO_BSTREAM(p, cid);
   19a74:	0a01      	lsrs	r1, r0, #8
   19a76:	7198      	strb	r0, [r3, #6]
  UINT16_TO_BSTREAM(p, len);
   19a78:	f883 c004 	strb.w	ip, [r3, #4]
   19a7c:	715a      	strb	r2, [r3, #5]
  UINT16_TO_BSTREAM(p, cid);
   19a7e:	71d9      	strb	r1, [r3, #7]
  HciSendAclData(pPacket);
   19a80:	4618      	mov	r0, r3
   19a82:	f7fd be9f 	b.w	177c4 <HciSendAclData>
   19a86:	bf00      	nop

00019a88 <l2cMasterRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cMasterRxSignalingPkt(uint16_t handle, uint16_t l2cLen, uint8_t *pPacket)
{
   19a88:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a8a:	460b      	mov	r3, r1

  /* parse code, len, and identifier */
  pPacket += L2C_PAYLOAD_START;
  BSTREAM_TO_UINT8(code, pPacket);
  BSTREAM_TO_UINT8(id, pPacket);
  BSTREAM_TO_UINT16(len, pPacket);
   19a8c:	f892 c00a 	ldrb.w	ip, [r2, #10]
   19a90:	7ad1      	ldrb	r1, [r2, #11]
  BSTREAM_TO_UINT8(code, pPacket);
   19a92:	7a15      	ldrb	r5, [r2, #8]
  BSTREAM_TO_UINT8(id, pPacket);
   19a94:	7a56      	ldrb	r6, [r2, #9]
  BSTREAM_TO_UINT16(len, pPacket);
   19a96:	eb0c 2c01 	add.w	ip, ip, r1, lsl #8
   19a9a:	fa1f fc8c 	uxth.w	ip, ip

  /* verify signaling length vs. l2c length
   * verify this is a conn param update rsp
   * verify parameter length
   */
  if ((l2cLen != (len + L2C_SIG_HDR_LEN)) ||
   19a9e:	f10c 0104 	add.w	r1, ip, #4
   19aa2:	428b      	cmp	r3, r1
{
   19aa4:	b085      	sub	sp, #20
   19aa6:	4604      	mov	r4, r0
  if ((l2cLen != (len + L2C_SIG_HDR_LEN)) ||
   19aa8:	d101      	bne.n	19aae <l2cMasterRxSignalingPkt+0x26>
   19aaa:	2d12      	cmp	r5, #18
   19aac:	d008      	beq.n	19ac0 <l2cMasterRxSignalingPkt+0x38>
      (code != L2C_SIG_CONN_UPDATE_REQ) ||
      (len != L2C_SIG_CONN_UPDATE_REQ_LEN))
  {
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   19aae:	4833      	ldr	r0, [pc, #204]	; (19b7c <l2cMasterRxSignalingPkt+0xf4>)
   19ab0:	4662      	mov	r2, ip
   19ab2:	4629      	mov	r1, r5
   19ab4:	f004 fdf0 	bl	1e698 <WsfTrace>

    /* reject all unknown or invalid commands except command reject. */
    if (code != L2C_SIG_CMD_REJ)
   19ab8:	2d01      	cmp	r5, #1
   19aba:	d141      	bne.n	19b40 <l2cMasterRxSignalingPkt+0xb8>
    L2cDmConnUpdateRsp(id, handle, L2C_CONN_PARAM_REJECTED);
    return;
  }

  DmL2cConnUpdateInd(id, handle, &connSpec);
}
   19abc:	b005      	add	sp, #20
   19abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (code != L2C_SIG_CONN_UPDATE_REQ) ||
   19ac0:	f1bc 0f08 	cmp.w	ip, #8
   19ac4:	d137      	bne.n	19b36 <l2cMasterRxSignalingPkt+0xae>
  BSTREAM_TO_UINT16(connSpec.connIntervalMin, pPacket);
   19ac6:	7b51      	ldrb	r1, [r2, #13]
   19ac8:	7b13      	ldrb	r3, [r2, #12]
  BSTREAM_TO_UINT16(connSpec.connIntervalMax, pPacket);
   19aca:	7bd0      	ldrb	r0, [r2, #15]
  BSTREAM_TO_UINT16(connSpec.connLatency, pPacket);
   19acc:	7c55      	ldrb	r5, [r2, #17]
  BSTREAM_TO_UINT16(connSpec.connIntervalMin, pPacket);
   19ace:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  BSTREAM_TO_UINT16(connSpec.connIntervalMax, pPacket);
   19ad2:	7b91      	ldrb	r1, [r2, #14]
   19ad4:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  BSTREAM_TO_UINT16(connSpec.connLatency, pPacket);
   19ad8:	7c10      	ldrb	r0, [r2, #16]
   19ada:	eb00 2005 	add.w	r0, r0, r5, lsl #8
  BSTREAM_TO_UINT16(connSpec.supTimeout, pPacket);
   19ade:	7cd5      	ldrb	r5, [r2, #19]
   19ae0:	7c92      	ldrb	r2, [r2, #18]
  BSTREAM_TO_UINT16(connSpec.connIntervalMin, pPacket);
   19ae2:	b29b      	uxth	r3, r3
  BSTREAM_TO_UINT16(connSpec.supTimeout, pPacket);
   19ae4:	eb02 2205 	add.w	r2, r2, r5, lsl #8
  if ((connSpec.connIntervalMin < HCI_CONN_INTERVAL_MIN) ||
   19ae8:	1f9d      	subs	r5, r3, #6
   19aea:	b2ad      	uxth	r5, r5
   19aec:	f640 4c7a 	movw	ip, #3194	; 0xc7a
  BSTREAM_TO_UINT16(connSpec.connIntervalMax, pPacket);
   19af0:	b289      	uxth	r1, r1
  BSTREAM_TO_UINT16(connSpec.connLatency, pPacket);
   19af2:	b280      	uxth	r0, r0
  BSTREAM_TO_UINT16(connSpec.supTimeout, pPacket);
   19af4:	b292      	uxth	r2, r2
  connSpec.minCeLen = 0;
   19af6:	2700      	movs	r7, #0
  if ((connSpec.connIntervalMin < HCI_CONN_INTERVAL_MIN) ||
   19af8:	4565      	cmp	r5, ip
  BSTREAM_TO_UINT16(connSpec.connIntervalMin, pPacket);
   19afa:	f8ad 3004 	strh.w	r3, [sp, #4]
  BSTREAM_TO_UINT16(connSpec.connIntervalMax, pPacket);
   19afe:	f8ad 1006 	strh.w	r1, [sp, #6]
  BSTREAM_TO_UINT16(connSpec.connLatency, pPacket);
   19b02:	f8ad 0008 	strh.w	r0, [sp, #8]
  BSTREAM_TO_UINT16(connSpec.supTimeout, pPacket);
   19b06:	f8ad 200a 	strh.w	r2, [sp, #10]
  connSpec.minCeLen = 0;
   19b0a:	9703      	str	r7, [sp, #12]
  if ((connSpec.connIntervalMin < HCI_CONN_INTERVAL_MIN) ||
   19b0c:	d820      	bhi.n	19b50 <l2cMasterRxSignalingPkt+0xc8>
      (connSpec.connIntervalMin > HCI_CONN_INTERVAL_MAX) ||
   19b0e:	428b      	cmp	r3, r1
   19b10:	d81e      	bhi.n	19b50 <l2cMasterRxSignalingPkt+0xc8>
      (connSpec.connIntervalMax < HCI_CONN_INTERVAL_MIN) ||
   19b12:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   19b16:	d81b      	bhi.n	19b50 <l2cMasterRxSignalingPkt+0xc8>
      (connSpec.connIntervalMax > HCI_CONN_INTERVAL_MAX) ||
   19b18:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   19b1c:	d218      	bcs.n	19b50 <l2cMasterRxSignalingPkt+0xc8>
      (connSpec.connLatency > HCI_CONN_LATENCY_MAX) ||
   19b1e:	3a0a      	subs	r2, #10
   19b20:	b292      	uxth	r2, r2
   19b22:	f640 4376 	movw	r3, #3190	; 0xc76
   19b26:	429a      	cmp	r2, r3
   19b28:	d812      	bhi.n	19b50 <l2cMasterRxSignalingPkt+0xc8>
  DmL2cConnUpdateInd(id, handle, &connSpec);
   19b2a:	aa01      	add	r2, sp, #4
   19b2c:	4621      	mov	r1, r4
   19b2e:	4630      	mov	r0, r6
   19b30:	f7f3 fcd8 	bl	d4e4 <DmL2cConnUpdateInd>
   19b34:	e7c2      	b.n	19abc <l2cMasterRxSignalingPkt+0x34>
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   19b36:	4811      	ldr	r0, [pc, #68]	; (19b7c <l2cMasterRxSignalingPkt+0xf4>)
   19b38:	4662      	mov	r2, ip
   19b3a:	4629      	mov	r1, r5
   19b3c:	f004 fdac 	bl	1e698 <WsfTrace>
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   19b40:	2200      	movs	r2, #0
   19b42:	4631      	mov	r1, r6
   19b44:	4620      	mov	r0, r4
}
   19b46:	b005      	add	sp, #20
   19b48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   19b4c:	f7ff bf2c 	b.w	199a8 <l2cSendCmdReject>
{
  uint8_t *pPacket;
  uint8_t *p;

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN)) != NULL)
   19b50:	200e      	movs	r0, #14
   19b52:	f7ff ff4d 	bl	199f0 <l2cMsgAlloc>
   19b56:	2800      	cmp	r0, #0
   19b58:	d0b0      	beq.n	19abc <l2cMasterRxSignalingPkt+0x34>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP);       /* command code */
   19b5a:	2213      	movs	r2, #19
   19b5c:	7202      	strb	r2, [r0, #8]
    UINT8_TO_BSTREAM(p, identifier);                    /* identifier */
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP_LEN);  /* parameter length */
   19b5e:	2202      	movs	r2, #2
   19b60:	2300      	movs	r3, #0
   19b62:	7282      	strb	r2, [r0, #10]
    UINT16_TO_BSTREAM(p, result);                       /* result */
   19b64:	2201      	movs	r2, #1
    UINT8_TO_BSTREAM(p, identifier);                    /* identifier */
   19b66:	7246      	strb	r6, [r0, #9]
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP_LEN);  /* parameter length */
   19b68:	72c3      	strb	r3, [r0, #11]
    UINT16_TO_BSTREAM(p, result);                       /* result */
   19b6a:	7302      	strb	r2, [r0, #12]
   19b6c:	7343      	strb	r3, [r0, #13]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN), pPacket);
   19b6e:	2206      	movs	r2, #6
   19b70:	4603      	mov	r3, r0
   19b72:	4621      	mov	r1, r4
   19b74:	2005      	movs	r0, #5
   19b76:	f7ff ff6f 	bl	19a58 <L2cDataReq>
   19b7a:	e79f      	b.n	19abc <l2cMasterRxSignalingPkt+0x34>
   19b7c:	00026e58 	.word	0x00026e58

00019b80 <L2cMasterInit>:
  l2cCb.masterRxSignalingPkt = l2cMasterRxSignalingPkt;
   19b80:	4b01      	ldr	r3, [pc, #4]	; (19b88 <L2cMasterInit+0x8>)
   19b82:	4a02      	ldr	r2, [pc, #8]	; (19b8c <L2cMasterInit+0xc>)
   19b84:	619a      	str	r2, [r3, #24]
}
   19b86:	4770      	bx	lr
   19b88:	1000594c 	.word	0x1000594c
   19b8c:	00019a89 	.word	0x00019a89

00019b90 <L2cDmConnUpdateRsp>:
{
   19b90:	b570      	push	{r4, r5, r6, lr}
   19b92:	4606      	mov	r6, r0
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN)) != NULL)
   19b94:	200e      	movs	r0, #14
{
   19b96:	460d      	mov	r5, r1
   19b98:	4614      	mov	r4, r2
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN)) != NULL)
   19b9a:	f7ff ff29 	bl	199f0 <l2cMsgAlloc>
   19b9e:	b188      	cbz	r0, 19bc4 <L2cDmConnUpdateRsp+0x34>
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP);       /* command code */
   19ba0:	2213      	movs	r2, #19
   19ba2:	7202      	strb	r2, [r0, #8]
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP_LEN);  /* parameter length */
   19ba4:	2202      	movs	r2, #2
   19ba6:	7282      	strb	r2, [r0, #10]
   19ba8:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, result);                       /* result */
   19baa:	0a22      	lsrs	r2, r4, #8
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP_LEN);  /* parameter length */
   19bac:	72c1      	strb	r1, [r0, #11]
    UINT16_TO_BSTREAM(p, result);                       /* result */
   19bae:	7342      	strb	r2, [r0, #13]
    UINT8_TO_BSTREAM(p, identifier);                    /* identifier */
   19bb0:	7246      	strb	r6, [r0, #9]
    UINT16_TO_BSTREAM(p, result);                       /* result */
   19bb2:	7304      	strb	r4, [r0, #12]
   19bb4:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN), pPacket);
   19bb6:	4629      	mov	r1, r5
   19bb8:	2206      	movs	r2, #6
  }
}
   19bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN), pPacket);
   19bbe:	2005      	movs	r0, #5
   19bc0:	f7ff bf4a 	b.w	19a58 <L2cDataReq>
}
   19bc4:	bd70      	pop	{r4, r5, r6, pc}
   19bc6:	bf00      	nop

00019bc8 <l2cSlaveRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cSlaveRxSignalingPkt(uint16_t handle, uint16_t l2cLen, uint8_t *pPacket)
{
   19bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t  result;

  /* parse code, len, and identifier */
  pPacket += L2C_PAYLOAD_START;
  BSTREAM_TO_UINT8(code, pPacket);
  BSTREAM_TO_UINT8(id, pPacket);
   19bca:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(len, pPacket);

  /* verify signal identifier is valid */
  if (id == L2C_SIGNAL_ID_INVALID)
   19bcc:	b38c      	cbz	r4, 19c32 <l2cSlaveRxSignalingPkt+0x6a>
   19bce:	4605      	mov	r5, r0
  /* verify signal identifier is expected
   * verify signaling length vs. l2c length
   * verify this is a conn param update rsp or command reject
   * verify parameter length
   */
  if ((id == l2cSlaveCb.signId[handle])   &&
   19bd0:	482a      	ldr	r0, [pc, #168]	; (19c7c <l2cSlaveRxSignalingPkt+0xb4>)
  BSTREAM_TO_UINT16(len, pPacket);
   19bd2:	f892 e00b 	ldrb.w	lr, [r2, #11]
   19bd6:	f892 c00a 	ldrb.w	ip, [r2, #10]
  BSTREAM_TO_UINT8(code, pPacket);
   19bda:	7a16      	ldrb	r6, [r2, #8]
   19bdc:	460b      	mov	r3, r1
  if ((id == l2cSlaveCb.signId[handle])   &&
   19bde:	1941      	adds	r1, r0, r5
  BSTREAM_TO_UINT16(len, pPacket);
   19be0:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
  if ((id == l2cSlaveCb.signId[handle])   &&
   19be4:	f891 e014 	ldrb.w	lr, [r1, #20]
   19be8:	45a6      	cmp	lr, r4
  BSTREAM_TO_UINT16(len, pPacket);
   19bea:	fa1f fc8c 	uxth.w	ip, ip
  if ((id == l2cSlaveCb.signId[handle])   &&
   19bee:	d119      	bne.n	19c24 <l2cSlaveRxSignalingPkt+0x5c>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   19bf0:	f10c 0e04 	add.w	lr, ip, #4
  if ((id == l2cSlaveCb.signId[handle])   &&
   19bf4:	4573      	cmp	r3, lr
   19bf6:	d115      	bne.n	19c24 <l2cSlaveRxSignalingPkt+0x5c>
      (l2cLen == (len + L2C_SIG_HDR_LEN)) &&
   19bf8:	2e13      	cmp	r6, #19
   19bfa:	d01b      	beq.n	19c34 <l2cSlaveRxSignalingPkt+0x6c>
      (((code == L2C_SIG_CONN_UPDATE_RSP) && (len == L2C_SIG_CONN_UPDATE_RSP_LEN)) ||
   19bfc:	2e01      	cmp	r6, #1
   19bfe:	d11c      	bne.n	19c3a <l2cSlaveRxSignalingPkt+0x72>
  {
    /* get last sent code */
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];

    /* clear pending signal id */
    l2cSlaveCb.signId[handle] = L2C_SIGNAL_ID_INVALID;
   19c00:	2300      	movs	r3, #0
   19c02:	750b      	strb	r3, [r1, #20]
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];
   19c04:	7c4f      	ldrb	r7, [r1, #17]

    /* parse result parameter */
    BSTREAM_TO_UINT16(result, pPacket);
   19c06:	7b14      	ldrb	r4, [r2, #12]
   19c08:	7b51      	ldrb	r1, [r2, #13]
   19c0a:	eb04 2401 	add.w	r4, r4, r1, lsl #8

    /* stop req timer */
    WsfTimerStop(&l2cSlaveCb.reqTimer);
   19c0e:	f004 fca3 	bl	1e558 <WsfTimerStop>

    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   19c12:	2f12      	cmp	r7, #18
    BSTREAM_TO_UINT16(result, pPacket);
   19c14:	b2a4      	uxth	r4, r4
    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   19c16:	d02f      	beq.n	19c78 <l2cSlaveRxSignalingPkt+0xb0>
      DmL2cConnUpdateCnf(handle, result);
    }
    else
    {
      /* send to DM */
      DmL2cCmdRejInd(handle, result);
   19c18:	4621      	mov	r1, r4
   19c1a:	4628      	mov	r0, r5
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
    }

    return;
  }
}
   19c1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      DmL2cCmdRejInd(handle, result);
   19c20:	f7f3 bd28 	b.w	d674 <DmL2cCmdRejInd>
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   19c24:	4816      	ldr	r0, [pc, #88]	; (19c80 <l2cSlaveRxSignalingPkt+0xb8>)
   19c26:	4662      	mov	r2, ip
   19c28:	4631      	mov	r1, r6
   19c2a:	f004 fd35 	bl	1e698 <WsfTrace>
    if (code != L2C_SIG_CMD_REJ)
   19c2e:	2e01      	cmp	r6, #1
   19c30:	d109      	bne.n	19c46 <l2cSlaveRxSignalingPkt+0x7e>
}
   19c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (((code == L2C_SIG_CONN_UPDATE_RSP) && (len == L2C_SIG_CONN_UPDATE_RSP_LEN)) ||
   19c34:	f1bc 0f02 	cmp.w	ip, #2
   19c38:	d00c      	beq.n	19c54 <l2cSlaveRxSignalingPkt+0x8c>
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   19c3a:	4811      	ldr	r0, [pc, #68]	; (19c80 <l2cSlaveRxSignalingPkt+0xb8>)
   19c3c:	4673      	mov	r3, lr
   19c3e:	4662      	mov	r2, ip
   19c40:	4631      	mov	r1, r6
   19c42:	f004 fd29 	bl	1e698 <WsfTrace>
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   19c46:	4621      	mov	r1, r4
   19c48:	4628      	mov	r0, r5
   19c4a:	2200      	movs	r2, #0
}
   19c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   19c50:	f7ff beaa 	b.w	199a8 <l2cSendCmdReject>
    l2cSlaveCb.signId[handle] = L2C_SIGNAL_ID_INVALID;
   19c54:	2300      	movs	r3, #0
   19c56:	750b      	strb	r3, [r1, #20]
    uint8_t lastCode = l2cSlaveCb.lastCode[handle];
   19c58:	7c4e      	ldrb	r6, [r1, #17]
    BSTREAM_TO_UINT16(result, pPacket);
   19c5a:	7b14      	ldrb	r4, [r2, #12]
   19c5c:	7b51      	ldrb	r1, [r2, #13]
   19c5e:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    WsfTimerStop(&l2cSlaveCb.reqTimer);
   19c62:	f004 fc79 	bl	1e558 <WsfTimerStop>
    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   19c66:	2e12      	cmp	r6, #18
    BSTREAM_TO_UINT16(result, pPacket);
   19c68:	b2a4      	uxth	r4, r4
    if (lastCode == L2C_SIG_CONN_UPDATE_REQ)
   19c6a:	d1d5      	bne.n	19c18 <l2cSlaveRxSignalingPkt+0x50>
      DmL2cConnUpdateCnf(handle, result);
   19c6c:	4621      	mov	r1, r4
   19c6e:	4628      	mov	r0, r5
}
   19c70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      DmL2cConnUpdateCnf(handle, result);
   19c74:	f7f3 bcee 	b.w	d654 <DmL2cConnUpdateCnf>
        result = L2C_CONN_PARAM_REJECTED;
   19c78:	4634      	mov	r4, r6
   19c7a:	e7f7      	b.n	19c6c <l2cSlaveRxSignalingPkt+0xa4>
   19c7c:	10005974 	.word	0x10005974
   19c80:	00026e58 	.word	0x00026e58

00019c84 <L2cSlaveInit>:
{
  l2cCb.slaveRxSignalingPkt = l2cSlaveRxSignalingPkt;

  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
  {
    l2cSlaveCb.signId[i] = L2C_SIGNAL_ID_INVALID;
   19c84:	4b03      	ldr	r3, [pc, #12]	; (19c94 <L2cSlaveInit+0x10>)
  l2cCb.slaveRxSignalingPkt = l2cSlaveRxSignalingPkt;
   19c86:	4904      	ldr	r1, [pc, #16]	; (19c98 <L2cSlaveInit+0x14>)
   19c88:	4804      	ldr	r0, [pc, #16]	; (19c9c <L2cSlaveInit+0x18>)
   19c8a:	61c8      	str	r0, [r1, #28]
    l2cSlaveCb.signId[i] = L2C_SIGNAL_ID_INVALID;
   19c8c:	2200      	movs	r2, #0
   19c8e:	829a      	strh	r2, [r3, #20]
   19c90:	759a      	strb	r2, [r3, #22]
  }
}
   19c92:	4770      	bx	lr
   19c94:	10005974 	.word	0x10005974
   19c98:	1000594c 	.word	0x1000594c
   19c9c:	00019bc9 	.word	0x00019bc9

00019ca0 <L2cDmConnUpdateReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void L2cDmConnUpdateReq(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   19ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t *pPacket;
  uint8_t *p;

  /* record code */
  l2cSlaveCb.lastCode[handle] = L2C_SIG_CONN_UPDATE_REQ;
   19ca4:	4e20      	ldr	r6, [pc, #128]	; (19d28 <L2cDmConnUpdateReq+0x88>)
   19ca6:	1837      	adds	r7, r6, r0
   19ca8:	f04f 0812 	mov.w	r8, #18
{
   19cac:	4605      	mov	r5, r0
   19cae:	460c      	mov	r4, r1

  /* Start signaling request timer and store handle */
  WsfTimerStartSec(&l2cSlaveCb.reqTimer, L2C_SIG_REQ_TIMEOUT);
   19cb0:	4630      	mov	r0, r6
  l2cSlaveCb.lastCode[handle] = L2C_SIG_CONN_UPDATE_REQ;
   19cb2:	f887 8011 	strb.w	r8, [r7, #17]
  WsfTimerStartSec(&l2cSlaveCb.reqTimer, L2C_SIG_REQ_TIMEOUT);
   19cb6:	211e      	movs	r1, #30
   19cb8:	f004 fbc8 	bl	1e44c <WsfTimerStartSec>
  l2cSlaveCb.reqTimer.msg.param = handle;

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN)) != NULL)
   19cbc:	2014      	movs	r0, #20
  l2cSlaveCb.reqTimer.msg.param = handle;
   19cbe:	8135      	strh	r5, [r6, #8]
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN)) != NULL)
   19cc0:	f7ff fe96 	bl	199f0 <l2cMsgAlloc>
   19cc4:	b368      	cbz	r0, 19d22 <L2cDmConnUpdateReq+0x82>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ);       /* command code */
    UINT8_TO_BSTREAM(p, l2cCb.identifier);              /* identifier */
   19cc6:	4919      	ldr	r1, [pc, #100]	; (19d2c <L2cDmConnUpdateReq+0x8c>)
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ);       /* command code */
   19cc8:	f880 8008 	strb.w	r8, [r0, #8]
    UINT8_TO_BSTREAM(p, l2cCb.identifier);              /* identifier */
   19ccc:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   19cd0:	7242      	strb	r2, [r0, #9]
    l2cSlaveCb.signId[handle] = l2cCb.identifier;
    l2cCb.identifier = L2C_NEXT_ID(l2cCb.identifier);
   19cd2:	2aff      	cmp	r2, #255	; 0xff
    l2cSlaveCb.signId[handle] = l2cCb.identifier;
   19cd4:	753a      	strb	r2, [r7, #20]
    l2cCb.identifier = L2C_NEXT_ID(l2cCb.identifier);
   19cd6:	bf1a      	itte	ne
   19cd8:	3201      	addne	r2, #1
   19cda:	b2d2      	uxtbne	r2, r2
   19cdc:	2201      	moveq	r2, #1
   19cde:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_REQ_LEN);  /* parameter length */
   19ce2:	2108      	movs	r1, #8
   19ce4:	2200      	movs	r2, #0
   19ce6:	7281      	strb	r1, [r0, #10]
   19ce8:	72c2      	strb	r2, [r0, #11]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);   /* interval min */
   19cea:	8822      	ldrh	r2, [r4, #0]
   19cec:	7302      	strb	r2, [r0, #12]
   19cee:	8822      	ldrh	r2, [r4, #0]
   19cf0:	40ca      	lsrs	r2, r1
   19cf2:	7342      	strb	r2, [r0, #13]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);   /* interval max */
   19cf4:	8862      	ldrh	r2, [r4, #2]
   19cf6:	7382      	strb	r2, [r0, #14]
   19cf8:	8862      	ldrh	r2, [r4, #2]
   19cfa:	0a12      	lsrs	r2, r2, #8
   19cfc:	73c2      	strb	r2, [r0, #15]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);       /* slave latency */
   19cfe:	88a2      	ldrh	r2, [r4, #4]
   19d00:	7402      	strb	r2, [r0, #16]
   19d02:	88a2      	ldrh	r2, [r4, #4]
   19d04:	0a12      	lsrs	r2, r2, #8
   19d06:	7442      	strb	r2, [r0, #17]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);        /* timeout multiplier */
   19d08:	88e2      	ldrh	r2, [r4, #6]
   19d0a:	7482      	strb	r2, [r0, #18]
   19d0c:	4603      	mov	r3, r0
   19d0e:	88e0      	ldrh	r0, [r4, #6]
   19d10:	0a00      	lsrs	r0, r0, #8
   19d12:	74d8      	strb	r0, [r3, #19]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN), pPacket);
   19d14:	4629      	mov	r1, r5
   19d16:	220c      	movs	r2, #12
  }
}
   19d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_REQ_LEN), pPacket);
   19d1c:	2005      	movs	r0, #5
   19d1e:	f7ff be9b 	b.w	19a58 <L2cDataReq>
}
   19d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d26:	bf00      	nop
   19d28:	10005974 	.word	0x10005974
   19d2c:	1000594c 	.word	0x1000594c

00019d30 <L2cSlaveHandlerInit>:
 *  \return None.
 */
/*************************************************************************************************/
void L2cSlaveHandlerInit(wsfHandlerId_t handlerId)
{
  l2cSlaveCb.reqTimer.msg.event = L2C_MSG_REQ_TIMEOUT;
   19d30:	4b02      	ldr	r3, [pc, #8]	; (19d3c <L2cSlaveHandlerInit+0xc>)
   19d32:	2201      	movs	r2, #1
   19d34:	729a      	strb	r2, [r3, #10]
  l2cSlaveCb.reqTimer.handlerId = handlerId;
   19d36:	7318      	strb	r0, [r3, #12]
  l2cSlaveCb.handlerId = handlerId;
   19d38:	7418      	strb	r0, [r3, #16]
}
   19d3a:	4770      	bx	lr
   19d3c:	10005974 	.word	0x10005974

00019d40 <L2cSlaveHandler>:
 */
/*************************************************************************************************/
void L2cSlaveHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
   19d40:	b129      	cbz	r1, 19d4e <L2cSlaveHandler+0xe>
{
   19d42:	b538      	push	{r3, r4, r5, lr}
  {
    WSF_ASSERT(pMsg->event > 0 && pMsg->event <= L2C_MSG_TYPE_MAX);

    /* handle slave signaling request timeout */
    if (pMsg->event == L2C_MSG_REQ_TIMEOUT)
   19d44:	788d      	ldrb	r5, [r1, #2]
   19d46:	2d01      	cmp	r5, #1
   19d48:	460c      	mov	r4, r1
   19d4a:	d001      	beq.n	19d50 <L2cSlaveHandler+0x10>
  /* Handle events */
  else if (event)
  {

  }
}
   19d4c:	bd38      	pop	{r3, r4, r5, pc}
   19d4e:	4770      	bx	lr
  L2C_TRACE_WARN0("conn update req timeout");
   19d50:	4804      	ldr	r0, [pc, #16]	; (19d64 <L2cSlaveHandler+0x24>)
   19d52:	f004 fca1 	bl	1e698 <WsfTrace>
  DmL2cConnUpdateCnf(pMsg->param, L2C_CONN_PARAM_REJECTED);
   19d56:	8820      	ldrh	r0, [r4, #0]
   19d58:	4629      	mov	r1, r5
}
   19d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DmL2cConnUpdateCnf(pMsg->param, L2C_CONN_PARAM_REJECTED);
   19d5e:	f7f3 bc79 	b.w	d654 <DmL2cConnUpdateCnf>
   19d62:	bf00      	nop
   19d64:	00026e80 	.word	0x00026e80

00019d68 <smpiActPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActPairReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19d68:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   19d6a:	2201      	movs	r2, #1
{
   19d6c:	4604      	mov	r4, r0
   19d6e:	460d      	mov	r5, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   19d70:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   19d74:	4611      	mov	r1, r2
   19d76:	f7f3 fb4b 	bl	d410 <DmConnSetIdle>

  /* set next expected packet */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RSP;
   19d7a:	2302      	movs	r3, #2

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   19d7c:	4620      	mov	r0, r4
  pCcb->nextCmdCode = SMP_CMD_PAIR_RSP;
   19d7e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  smpStartRspTimer(pCcb);
   19d82:	f001 f897 	bl	1aeb4 <smpStartRspTimer>

  /* allocate scratch buffer */
  pCcb->pScr = WsfBufAlloc(sizeof(smpScratch_t));
   19d86:	2040      	movs	r0, #64	; 0x40
   19d88:	f004 f8a6 	bl	1ded8 <WsfBufAlloc>
   19d8c:	6320      	str	r0, [r4, #48]	; 0x30
  /* handle alloc failure */

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   19d8e:	200f      	movs	r0, #15
   19d90:	f002 f9d2 	bl	1c138 <smpMsgAlloc>
   19d94:	b1e0      	cbz	r0, 19dd0 <smpiActPairReq+0x68>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_REQ);
    UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   19d96:	4b0f      	ldr	r3, [pc, #60]	; (19dd4 <smpiActPairReq+0x6c>)
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_REQ);
   19d98:	2201      	movs	r2, #1
    UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   19d9a:	681b      	ldr	r3, [r3, #0]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_REQ);
   19d9c:	7202      	strb	r2, [r0, #8]
    UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   19d9e:	791a      	ldrb	r2, [r3, #4]
   19da0:	7242      	strb	r2, [r0, #9]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.oob);
   19da2:	792a      	ldrb	r2, [r5, #4]
   19da4:	7282      	strb	r2, [r0, #10]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.auth);
   19da6:	796a      	ldrb	r2, [r5, #5]
   19da8:	72c2      	strb	r2, [r0, #11]
    UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
   19daa:	799b      	ldrb	r3, [r3, #6]
   19dac:	7303      	strb	r3, [r0, #12]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
   19dae:	79ab      	ldrb	r3, [r5, #6]
   19db0:	7343      	strb	r3, [r0, #13]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
   19db2:	79ea      	ldrb	r2, [r5, #7]

    /* store pair req data */
    memcpy(pCcb->pairReq, pPkt + L2C_PAYLOAD_START, SMP_PAIR_REQ_LEN);
   19db4:	6883      	ldr	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
   19db6:	7382      	strb	r2, [r0, #14]
    memcpy(pCcb->pairReq, pPkt + L2C_PAYLOAD_START, SMP_PAIR_REQ_LEN);
   19db8:	6223      	str	r3, [r4, #32]
   19dba:	8983      	ldrh	r3, [r0, #12]
   19dbc:	7b82      	ldrb	r2, [r0, #14]
   19dbe:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   19dc2:	84a3      	strh	r3, [r4, #36]	; 0x24
   19dc4:	4601      	mov	r1, r0

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   19dc6:	4620      	mov	r0, r4
  }
}
   19dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   19dcc:	f002 b994 	b.w	1c0f8 <smpSendPkt>
}
   19dd0:	bd38      	pop	{r3, r4, r5, pc}
   19dd2:	bf00      	nop
   19dd4:	10002c30 	.word	0x10002c30

00019dd8 <smpiActCheckSecurityReq>:
 */
/*************************************************************************************************/
void smpiActCheckSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* if security req received send pairing failed */
  if (pCcb->secReq)
   19dd8:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
   19ddc:	b902      	cbnz	r2, 19de0 <smpiActCheckSecurityReq+0x8>
  {
    pCcb->secReq = FALSE;
    smpSendPairingFailed(pCcb, pMsg->hdr.status);
  }
}
   19dde:	4770      	bx	lr
    pCcb->secReq = FALSE;
   19de0:	2200      	movs	r2, #0
   19de2:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
    smpSendPairingFailed(pCcb, pMsg->hdr.status);
   19de6:	78c9      	ldrb	r1, [r1, #3]
   19de8:	f001 b88a 	b.w	1af00 <smpSendPairingFailed>

00019dec <smpiActProcSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActProcSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19dec:	b500      	push	{lr}
  dmSecSlaveIndEvt_t  slaveInd;

  pCcb->secReq = TRUE;
   19dee:	2301      	movs	r3, #1
   19df0:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b

  /* parse packet */
  slaveInd.auth = *(pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
   19df4:	684b      	ldr	r3, [r1, #4]

  /* pass to DM */
  slaveInd.hdr.param = pCcb->connId;
   19df6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  slaveInd.auth = *(pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
   19dfa:	7a59      	ldrb	r1, [r3, #9]
{
   19dfc:	b083      	sub	sp, #12
  slaveInd.hdr.event = DM_SEC_SLAVE_REQ_IND;
   19dfe:	2332      	movs	r3, #50	; 0x32
  DmSmpCbackExec((dmEvt_t *) &slaveInd);
   19e00:	4668      	mov	r0, sp
  slaveInd.auth = *(pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
   19e02:	f88d 1004 	strb.w	r1, [sp, #4]
  slaveInd.hdr.param = pCcb->connId;
   19e06:	f8ad 2000 	strh.w	r2, [sp]
  slaveInd.hdr.event = DM_SEC_SLAVE_REQ_IND;
   19e0a:	f88d 3002 	strb.w	r3, [sp, #2]
  DmSmpCbackExec((dmEvt_t *) &slaveInd);
   19e0e:	f7f4 fd07 	bl	e820 <DmSmpCbackExec>
}
   19e12:	b003      	add	sp, #12
   19e14:	f85d fb04 	ldr.w	pc, [sp], #4

00019e18 <smpiActProcPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActProcPairRsp(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19e18:	b530      	push	{r4, r5, lr}
  uint8_t         *p;
  uint8_t         oob;
  uint8_t         display;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START;
   19e1a:	684b      	ldr	r3, [r1, #4]

  /* store packet parameters */
  memcpy(pCcb->pairRsp, p, SMP_PAIR_RSP_LEN);
   19e1c:	689a      	ldr	r2, [r3, #8]
   19e1e:	f8c0 2027 	str.w	r2, [r0, #39]	; 0x27
   19e22:	899a      	ldrh	r2, [r3, #12]
   19e24:	f893 c00e 	ldrb.w	ip, [r3, #14]
   19e28:	f880 c02d 	strb.w	ip, [r0, #45]	; 0x2d
   19e2c:	f8a0 202b 	strh.w	r2, [r0, #43]	; 0x2b

  /* verify no new key distribution bits are set */
  if (((~(pCcb->pairReq[SMP_IKEYDIST_POS]) & p[SMP_IKEYDIST_POS]) != 0) ||
   19e30:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
   19e34:	7b5a      	ldrb	r2, [r3, #13]
   19e36:	ea32 020c 	bics.w	r2, r2, ip
{
   19e3a:	b083      	sub	sp, #12
   19e3c:	4604      	mov	r4, r0
  if (((~(pCcb->pairReq[SMP_IKEYDIST_POS]) & p[SMP_IKEYDIST_POS]) != 0) ||
   19e3e:	d104      	bne.n	19e4a <smpiActProcPairRsp+0x32>
      ((~(pCcb->pairReq[SMP_RKEYDIST_POS]) & p[SMP_RKEYDIST_POS]) != 0))
   19e40:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
   19e44:	7b9b      	ldrb	r3, [r3, #14]
  if (((~(pCcb->pairReq[SMP_IKEYDIST_POS]) & p[SMP_IKEYDIST_POS]) != 0) ||
   19e46:	4393      	bics	r3, r2
   19e48:	d008      	beq.n	19e5c <smpiActProcPairRsp+0x44>
  {
    /* invalid parameters; cancel pairing */
    pMsg->hdr.status = SMP_ERR_INVALID_PARAM;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   19e4a:	f640 2303 	movw	r3, #2563	; 0xa03
    smpSmExecute(pCcb, pMsg);
   19e4e:	4620      	mov	r0, r4
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   19e50:	804b      	strh	r3, [r1, #2]
    if (smpCb.procPairing(pCcb, &oob, &display))
    {
      smpCb.procAuthReq(pCcb, oob, display);
    }
  }
}
   19e52:	b003      	add	sp, #12
   19e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    smpSmExecute(pCcb, pMsg);
   19e58:	f001 bb56 	b.w	1b508 <smpSmExecute>
    if (smpCb.procPairing(pCcb, &oob, &display))
   19e5c:	4d09      	ldr	r5, [pc, #36]	; (19e84 <smpiActProcPairRsp+0x6c>)
   19e5e:	f10d 0207 	add.w	r2, sp, #7
   19e62:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   19e66:	f10d 0106 	add.w	r1, sp, #6
   19e6a:	4798      	blx	r3
   19e6c:	b138      	cbz	r0, 19e7e <smpiActProcPairRsp+0x66>
      smpCb.procAuthReq(pCcb, oob, display);
   19e6e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
   19e72:	f89d 2007 	ldrb.w	r2, [sp, #7]
   19e76:	f89d 1006 	ldrb.w	r1, [sp, #6]
   19e7a:	4620      	mov	r0, r4
   19e7c:	4798      	blx	r3
}
   19e7e:	b003      	add	sp, #12
   19e80:	bd30      	pop	{r4, r5, pc}
   19e82:	bf00      	nop
   19e84:	100059e4 	.word	0x100059e4

00019e88 <smpiActProcPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActProcPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19e88:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   19e8a:	684a      	ldr	r2, [r1, #4]

  /* store confirm value */
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   19e8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   19e8e:	f8d2 500d 	ldr.w	r5, [r2, #13]
   19e92:	f8d2 c009 	ldr.w	ip, [r2, #9]
   19e96:	f8d2 1011 	ldr.w	r1, [r2, #17]
   19e9a:	f8d2 2015 	ldr.w	r2, [r2, #21]
   19e9e:	625d      	str	r5, [r3, #36]	; 0x24

  /* set next expected packet */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   19ea0:	2504      	movs	r5, #4
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   19ea2:	62da      	str	r2, [r3, #44]	; 0x2c
   19ea4:	f8c3 c020 	str.w	ip, [r3, #32]
   19ea8:	6299      	str	r1, [r3, #40]	; 0x28
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   19eaa:	f880 503f 	strb.w	r5, [r0, #63]	; 0x3f
{
   19eae:	4604      	mov	r4, r0

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   19eb0:	f001 f800 	bl	1aeb4 <smpStartRspTimer>

  /* allocate packet buffer and send pairing random packet */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   19eb4:	2019      	movs	r0, #25
   19eb6:	f002 f93f 	bl	1c138 <smpMsgAlloc>
   19eba:	b198      	cbz	r0, 19ee4 <smpiActProcPairCnf+0x5c>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   19ebc:	7205      	strb	r5, [r0, #8]
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   19ebe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19ec0:	4601      	mov	r1, r0
   19ec2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   19ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   19ec6:	4620      	mov	r0, r4
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   19ec8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   19eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19ecc:	f8c1 3015 	str.w	r3, [r1, #21]
   19ed0:	f8c1 5009 	str.w	r5, [r1, #9]
   19ed4:	f8c1 400d 	str.w	r4, [r1, #13]
   19ed8:	f8c1 2011 	str.w	r2, [r1, #17]
  }
}
   19edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   19ee0:	f002 b90a 	b.w	1c0f8 <smpSendPkt>
}
   19ee4:	bd38      	pop	{r3, r4, r5, pc}
   19ee6:	bf00      	nop

00019ee8 <smpiActCnfVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActCnfVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19ee8:	b570      	push	{r4, r5, r6, lr}
  /* compare calculated confirm value with value received earlier */
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   19eea:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
   19eec:	460d      	mov	r5, r1
   19eee:	4604      	mov	r4, r0
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   19ef0:	2210      	movs	r2, #16
   19ef2:	6868      	ldr	r0, [r5, #4]
   19ef4:	f106 0120 	add.w	r1, r6, #32
   19ef8:	f009 f9ee 	bl	232d8 <memcmp>
   19efc:	b948      	cbnz	r0, 19f12 <smpiActCnfVerify+0x2a>
    smpSmExecute(pCcb, pMsg);
    return;
  }

  /* do STK calculation: key, responder rand, initiator rand */
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b2, pCcb->pScr->buf.b4);
   19efe:	f106 0330 	add.w	r3, r6, #48	; 0x30
   19f02:	f106 0210 	add.w	r2, r6, #16
   19f06:	4631      	mov	r1, r6
   19f08:	4620      	mov	r0, r4
}
   19f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b2, pCcb->pScr->buf.b4);
   19f0e:	f002 b899 	b.w	1c044 <smpCalcS1>
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
   19f12:	2304      	movs	r3, #4
   19f14:	70eb      	strb	r3, [r5, #3]
    pCcb->attempts++;
   19f16:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   19f1a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    pCcb->attempts++;
   19f1e:	3301      	adds	r3, #1
   19f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   19f24:	f001 fcda 	bl	1b8dc <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   19f28:	4a07      	ldr	r2, [pc, #28]	; (19f48 <smpiActCnfVerify+0x60>)
   19f2a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   19f2e:	6812      	ldr	r2, [r2, #0]
   19f30:	79d2      	ldrb	r2, [r2, #7]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   19f32:	4293      	cmp	r3, r2
   19f34:	bf0c      	ite	eq
   19f36:	230d      	moveq	r3, #13
   19f38:	2303      	movne	r3, #3
    smpSmExecute(pCcb, pMsg);
   19f3a:	4629      	mov	r1, r5
   19f3c:	4620      	mov	r0, r4
   19f3e:	70ab      	strb	r3, [r5, #2]
}
   19f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   19f44:	f001 bae0 	b.w	1b508 <smpSmExecute>
   19f48:	10002c30 	.word	0x10002c30

00019f4c <smpiActStkEncrypt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActStkEncrypt(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19f4c:	b530      	push	{r4, r5, lr}
  uint8_t buf[SMP_KEY_LEN];
  uint8_t encKeyLen;
  uint8_t secLevel;

  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   19f4e:	f890 502b 	ldrb.w	r5, [r0, #43]	; 0x2b
   19f52:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
               pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

  /* adjust key based on max key length */
  memcpy(buf, pMsg->aes.pCiphertext, encKeyLen);
   19f56:	6849      	ldr	r1, [r1, #4]
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   19f58:	429d      	cmp	r5, r3
{
   19f5a:	b085      	sub	sp, #20
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   19f5c:	bf28      	it	cs
   19f5e:	461d      	movcs	r5, r3
{
   19f60:	4604      	mov	r4, r0
  memcpy(buf, pMsg->aes.pCiphertext, encKeyLen);
   19f62:	462a      	mov	r2, r5
   19f64:	4668      	mov	r0, sp
   19f66:	f7f2 f8cb 	bl	c100 <memcpy>
  memset((buf + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   19f6a:	2100      	movs	r1, #0
   19f6c:	f1c5 0210 	rsb	r2, r5, #16
   19f70:	eb0d 0005 	add.w	r0, sp, r5
   19f74:	f009 f9e2 	bl	2333c <memset>

  secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   19f78:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  DmSmpEncryptReq(pCcb->connId, secLevel, buf);
   19f7c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   19f80:	f013 0f04 	tst.w	r3, #4
  DmSmpEncryptReq(pCcb->connId, secLevel, buf);
   19f84:	466a      	mov	r2, sp
   19f86:	bf14      	ite	ne
   19f88:	2102      	movne	r1, #2
   19f8a:	2101      	moveq	r1, #1
   19f8c:	f7f4 fcea 	bl	e964 <DmSmpEncryptReq>
}
   19f90:	b005      	add	sp, #20
   19f92:	bd30      	pop	{r4, r5, pc}

00019f94 <smpiActSetupKeyDist>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActSetupKeyDist(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   19f94:	b538      	push	{r3, r4, r5, lr}
   19f96:	4604      	mov	r4, r0
   19f98:	460d      	mov	r5, r1
  uint8_t   rKeyDist;

  /* start smp response timer once for entire key distribution phase */
  smpStartRspTimer(pCcb);
   19f9a:	f000 ff8b 	bl	1aeb4 <smpStartRspTimer>

  /* initialize parameters in key ind struct */
  pCcb->pScr->keyInd.hdr.param = pCcb->connId;
   19f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19fa0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   19fa4:	801a      	strh	r2, [r3, #0]
  pCcb->pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ?
   19fa6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   19faa:	f012 0f04 	tst.w	r2, #4
   19fae:	bf14      	ite	ne
   19fb0:	2202      	movne	r2, #2
   19fb2:	2201      	moveq	r2, #1
   19fb4:	77da      	strb	r2, [r3, #31]
                                DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
  pCcb->pScr->keyInd.encKeyLen =
    (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
     pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
   19fb6:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   19fba:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   19fbe:	428a      	cmp	r2, r1
   19fc0:	bf28      	it	cs
   19fc2:	460a      	movcs	r2, r1
  pCcb->pScr->keyInd.encKeyLen =
   19fc4:	f883 2020 	strb.w	r2, [r3, #32]

  pCcb->nextCmdCode = 0;

  /* get negotiated responder key distribution */
  rKeyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   19fc8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   19fcc:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   19fd0:	400b      	ands	r3, r1
  pCcb->nextCmdCode = 0;
   19fd2:	2200      	movs	r2, #0

  /* set up to receive first key distribution packet */
  if (rKeyDist & SMP_KEY_DIST_ENC)
   19fd4:	07d8      	lsls	r0, r3, #31
  pCcb->nextCmdCode = 0;
   19fd6:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  if (rKeyDist & SMP_KEY_DIST_ENC)
   19fda:	d50c      	bpl.n	19ff6 <smpiActSetupKeyDist+0x62>
  {
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
   19fdc:	4a10      	ldr	r2, [pc, #64]	; (1a020 <smpiActSetupKeyDist+0x8c>)
   19fde:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
   19fe2:	b182      	cbz	r2, 1a006 <smpiActSetupKeyDist+0x72>
   19fe4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   19fe6:	7812      	ldrb	r2, [r2, #0]
   19fe8:	b16a      	cbz	r2, 1a006 <smpiActSetupKeyDist+0x72>
      {
        if (rKeyDist & SMP_KEY_DIST_ID)
   19fea:	0799      	lsls	r1, r3, #30
   19fec:	d50f      	bpl.n	1a00e <smpiActSetupKeyDist+0x7a>
        {
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   19fee:	2308      	movs	r3, #8
   19ff0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  {
    /* no responder keys to be distributed; start sending keys */
    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
    smpSmExecute(pCcb, pMsg);
  }
}
   19ff4:	bd38      	pop	{r3, r4, r5, pc}
  else if (rKeyDist & SMP_KEY_DIST_ID)
   19ff6:	079a      	lsls	r2, r3, #30
   19ff8:	d4f9      	bmi.n	19fee <smpiActSetupKeyDist+0x5a>
  else if (rKeyDist & SMP_KEY_DIST_SIGN)
   19ffa:	075b      	lsls	r3, r3, #29
   19ffc:	d507      	bpl.n	1a00e <smpiActSetupKeyDist+0x7a>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   19ffe:	230a      	movs	r3, #10
   1a000:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1a004:	bd38      	pop	{r3, r4, r5, pc}
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
   1a006:	2306      	movs	r3, #6
   1a008:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1a00c:	bd38      	pop	{r3, r4, r5, pc}
    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
   1a00e:	230c      	movs	r3, #12
   1a010:	70ab      	strb	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
   1a012:	4629      	mov	r1, r5
   1a014:	4620      	mov	r0, r4
}
   1a016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSmExecute(pCcb, pMsg);
   1a01a:	f001 ba75 	b.w	1b508 <smpSmExecute>
   1a01e:	bf00      	nop
   1a020:	100059e4 	.word	0x100059e4

0001a024 <smpiActRcvKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActRcvKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a024:	b538      	push	{r3, r4, r5, lr}
  uint8_t   keyDist;

  /* get responder key distribution */
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   1a026:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
   1a02a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
{
   1a02e:	460d      	mov	r5, r1

  /* process received key */
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   1a030:	4013      	ands	r3, r2
   1a032:	684a      	ldr	r2, [r1, #4]
   1a034:	6b01      	ldr	r1, [r0, #48]	; 0x30
{
   1a036:	4604      	mov	r4, r0
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   1a038:	f001 f938 	bl	1b2ac <smpProcRcvKey>
   1a03c:	b900      	cbnz	r0, 1a040 <smpiActRcvKey+0x1c>
    pCcb->nextCmdCode = 0;

    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
    smpSmExecute(pCcb, pMsg);
  }
}
   1a03e:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->nextCmdCode = 0;
   1a040:	2200      	movs	r2, #0
    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
   1a042:	230c      	movs	r3, #12
    pCcb->nextCmdCode = 0;
   1a044:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
    smpSmExecute(pCcb, pMsg);
   1a048:	4629      	mov	r1, r5
    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
   1a04a:	70ab      	strb	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
   1a04c:	4620      	mov	r0, r4
}
   1a04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSmExecute(pCcb, pMsg);
   1a052:	f001 ba59 	b.w	1b508 <smpSmExecute>
   1a056:	bf00      	nop

0001a058 <smpiActSendKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActSendKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a058:	b538      	push	{r3, r4, r5, lr}

  /* get initiator key distribution */
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];

  /* send next key */
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   1a05a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   1a05e:	b103      	cbz	r3, 1a062 <smpiActSendKey+0xa>
      /* done sending keys; send ourselves pairing complete msg */
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
      smpSmExecute(pCcb, pMsg);
      return;
  }
}
   1a060:	bd38      	pop	{r3, r4, r5, pc}
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1a062:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1a066:	460d      	mov	r5, r1
   1a068:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   1a06c:	4019      	ands	r1, r3
   1a06e:	4604      	mov	r4, r0
   1a070:	f001 f83e 	bl	1b0f0 <smpSendKey>
   1a074:	2800      	cmp	r0, #0
   1a076:	d0f3      	beq.n	1a060 <smpiActSendKey+0x8>
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   1a078:	230e      	movs	r3, #14
   1a07a:	70ab      	strb	r3, [r5, #2]
      smpSmExecute(pCcb, pMsg);
   1a07c:	4629      	mov	r1, r5
   1a07e:	4620      	mov	r0, r4
}
   1a080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSmExecute(pCcb, pMsg);
   1a084:	f001 ba40 	b.w	1b508 <smpSmExecute>

0001a088 <smpiScActAuthSelect>:
 */
/*************************************************************************************************/
void smpiScActAuthSelect(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Execute Common Auth Select actions */
  smpScActAuthSelect(pCcb, pMsg);
   1a088:	f002 bb8c 	b.w	1c7a4 <smpScActAuthSelect>

0001a08c <smpiScActSendPubKey>:
 */
/*************************************************************************************************/
void smpiScActSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Next command is the Public Key from the responder */
  pCcb->nextCmdCode = SMP_CMD_PUBLIC_KEY;
   1a08c:	230c      	movs	r3, #12
   1a08e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f

  /* Send the public key */
  smpScSendPubKey(pCcb, pMsg);
   1a092:	f002 bf97 	b.w	1cfc4 <smpScSendPubKey>
   1a096:	bf00      	nop

0001a098 <smpiScActJwncSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActJwncSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a098:	b538      	push	{r3, r4, r5, lr}
  /* Select Random Na (128-bits) */
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
   1a09a:	6c43      	ldr	r3, [r0, #68]	; 0x44

  SMP_TRACE_128("Rand Na", pCcb->pScCcb->pScratch->Na_Ea);

  /* Set Ra and Rb to sero */
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
   1a09c:	4d0d      	ldr	r5, [pc, #52]	; (1a0d4 <smpiScActJwncSetup+0x3c>)
{
   1a09e:	4604      	mov	r4, r0
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
   1a0a0:	2110      	movs	r1, #16
   1a0a2:	6958      	ldr	r0, [r3, #20]
   1a0a4:	f7f7 fec0 	bl	11e28 <SecRand>
  SMP_TRACE_128("Rand Na", pCcb->pScCcb->pScratch->Na_Ea);
   1a0a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a0aa:	480b      	ldr	r0, [pc, #44]	; (1a0d8 <smpiScActJwncSetup+0x40>)
   1a0ac:	6959      	ldr	r1, [r3, #20]
   1a0ae:	2210      	movs	r2, #16
   1a0b0:	f003 f898 	bl	1d1e4 <smpLogByteArray>
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
   1a0b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a0b6:	6958      	ldr	r0, [r3, #20]
   1a0b8:	4629      	mov	r1, r5
   1a0ba:	3020      	adds	r0, #32
   1a0bc:	f7fb fc22 	bl	15904 <Calc128Cpy>
  Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   1a0c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a0c2:	6958      	ldr	r0, [r3, #20]
   1a0c4:	4629      	mov	r1, r5
   1a0c6:	3030      	adds	r0, #48	; 0x30
   1a0c8:	f7fb fc1c 	bl	15904 <Calc128Cpy>

  /* Next command is a Pair Confirm from Responder */
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1a0cc:	2303      	movs	r3, #3
   1a0ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1a0d2:	bd38      	pop	{r3, r4, r5, pc}
   1a0d4:	0002689c 	.word	0x0002689c
   1a0d8:	00026e98 	.word	0x00026e98

0001a0dc <smpiScActJwncSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActJwncSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a0dc:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pCb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Cb from responder is in Confirm from rsponder */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
   1a0de:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1a0e0:	4604      	mov	r4, r0
   1a0e2:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
   1a0e4:	6958      	ldr	r0, [r3, #20]
  uint8_t *pCb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a0e6:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
   1a0e8:	2210      	movs	r2, #16
   1a0ea:	3109      	adds	r1, #9
   1a0ec:	3040      	adds	r0, #64	; 0x40
   1a0ee:	f7fb fc83 	bl	159f8 <WStrReverseCpy>

  SMP_TRACE_128("Peer Cb", pCcb->pScCcb->pScratch->PeerCb);
   1a0f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a0f4:	4808      	ldr	r0, [pc, #32]	; (1a118 <smpiScActJwncSendRand+0x3c>)
   1a0f6:	6959      	ldr	r1, [r3, #20]
   1a0f8:	2210      	movs	r2, #16
   1a0fa:	3140      	adds	r1, #64	; 0x40
   1a0fc:	f003 f872 	bl	1d1e4 <smpLogByteArray>

  /* Next command is a Pair Random from Responder */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;

  /* Send the Pair Rand */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a100:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1a102:	2204      	movs	r2, #4
   1a104:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a108:	695a      	ldr	r2, [r3, #20]
   1a10a:	4629      	mov	r1, r5
   1a10c:	4620      	mov	r0, r4
}
   1a10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a112:	f002 bfaf 	b.w	1d074 <smpScSendRand>
   1a116:	bf00      	nop
   1a118:	00026ea0 	.word	0x00026ea0

0001a11c <smpiScActJwncCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActJwncCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a11c:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Nb from responder is in pPacket */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a11e:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1a120:	4604      	mov	r4, r0
   1a122:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a124:	6958      	ldr	r0, [r3, #20]
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a126:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a128:	3010      	adds	r0, #16
   1a12a:	3109      	adds	r1, #9
   1a12c:	2210      	movs	r2, #16
   1a12e:	f7fb fc63 	bl	159f8 <WStrReverseCpy>

  smpScActJwncCalcF4(pCcb, pMsg);
   1a132:	4629      	mov	r1, r5
   1a134:	4620      	mov	r0, r4
}
   1a136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncCalcF4(pCcb, pMsg);
   1a13a:	f002 bb8d 	b.w	1c858 <smpScActJwncCalcF4>
   1a13e:	bf00      	nop

0001a140 <smpiScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a140:	b538      	push	{r3, r4, r5, lr}
   1a142:	4605      	mov	r5, r0
   1a144:	460c      	mov	r4, r1
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;

  SMP_TRACE_128("Local Cb", pCmac->pCiphertext);
   1a146:	480c      	ldr	r0, [pc, #48]	; (1a178 <smpiScActJwncCalcG2+0x38>)
   1a148:	6849      	ldr	r1, [r1, #4]
   1a14a:	2210      	movs	r2, #16
   1a14c:	f003 f84a 	bl	1d1e4 <smpLogByteArray>

  /* Check the result of the F4 confirm calculation */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCb, pCmac->pCiphertext, SMP_CONFIRM_LEN))
   1a150:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   1a152:	6861      	ldr	r1, [r4, #4]
   1a154:	6958      	ldr	r0, [r3, #20]
   1a156:	2210      	movs	r2, #16
   1a158:	3040      	adds	r0, #64	; 0x40
   1a15a:	f009 f8bd 	bl	232d8 <memcmp>
   1a15e:	b120      	cbz	r0, 1a16a <smpiScActJwncCalcG2+0x2a>
  {
    smpScFailWithReattempt(pCcb);
   1a160:	4628      	mov	r0, r5
  }
  else
  {
    smpScActJwncCalcG2(pCcb, pMsg);
  }
}
   1a162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpScFailWithReattempt(pCcb);
   1a166:	f003 b80d 	b.w	1d184 <smpScFailWithReattempt>
    smpScActJwncCalcG2(pCcb, pMsg);
   1a16a:	4621      	mov	r1, r4
   1a16c:	4628      	mov	r0, r5
}
   1a16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpScActJwncCalcG2(pCcb, pMsg);
   1a172:	f002 bbbf 	b.w	1c8f4 <smpScActJwncCalcG2>
   1a176:	bf00      	nop
   1a178:	00026ea8 	.word	0x00026ea8

0001a17c <smpiScActPkCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a17c:	b570      	push	{r4, r5, r6, lr}
  /* Record the passkey on the first confirm */
  if (pCcb->pScCcb->pkPos == 0)
   1a17e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a180:	78da      	ldrb	r2, [r3, #3]
{
   1a182:	b084      	sub	sp, #16
   1a184:	4604      	mov	r4, r0
   1a186:	460d      	mov	r5, r1
  if (pCcb->pScCcb->pkPos == 0)
   1a188:	b1f2      	cbz	r2, 1a1c8 <smpiScActPkCalcCa+0x4c>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    }
  }

  /* Get random Nai */
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
   1a18a:	6958      	ldr	r0, [r3, #20]
   1a18c:	2110      	movs	r1, #16
   1a18e:	f7f7 fe4b 	bl	11e28 <SecRand>

  SMP_TRACE_128("Rand Na", pCcb->pScCcb->pScratch->Na_Ea);
   1a192:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a194:	481b      	ldr	r0, [pc, #108]	; (1a204 <smpiScActPkCalcCa+0x88>)
   1a196:	6959      	ldr	r1, [r3, #20]
   1a198:	2210      	movs	r2, #16
   1a19a:	f003 f823 	bl	1d1e4 <smpLogByteArray>

  /* Ca = f4(PKax, PKbx, Nai, Rai) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1a19e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   1a1a0:	4620      	mov	r0, r4
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1a1a2:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a1a4:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1a1a6:	9203      	str	r2, [sp, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a1a8:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   1a1aa:	f002 ffb3 	bl	1d114 <smpGetPkBit>
   1a1ae:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Na_Ea);
   1a1b0:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   1a1b2:	4606      	mov	r6, r0
   1a1b4:	4620      	mov	r0, r4
   1a1b6:	696c      	ldr	r4, [r5, #20]
   1a1b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1a1bc:	e9cd 6400 	strd	r6, r4, [sp]
   1a1c0:	f002 fe7a 	bl	1ceb8 <SmpScCalcF4>
}
   1a1c4:	b004      	add	sp, #16
   1a1c6:	bd70      	pop	{r4, r5, r6, pc}
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   1a1c8:	6958      	ldr	r0, [r3, #20]
   1a1ca:	490f      	ldr	r1, [pc, #60]	; (1a208 <smpiScActPkCalcCa+0x8c>)
   1a1cc:	3020      	adds	r0, #32
   1a1ce:	f7fb fb99 	bl	15904 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
   1a1d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a1d4:	490c      	ldr	r1, [pc, #48]	; (1a208 <smpiScActPkCalcCa+0x8c>)
   1a1d6:	6958      	ldr	r0, [r3, #20]
   1a1d8:	3030      	adds	r0, #48	; 0x30
   1a1da:	f7fb fb93 	bl	15904 <Calc128Cpy>
    if (pMsg->dm.authRsp.authDataLen <= 3)
   1a1de:	7d2a      	ldrb	r2, [r5, #20]
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a1e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    if (pMsg->dm.authRsp.authDataLen <= 3)
   1a1e2:	2a03      	cmp	r2, #3
   1a1e4:	d8d1      	bhi.n	1a18a <smpiScActPkCalcCa+0xe>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a1e6:	6958      	ldr	r0, [r3, #20]
   1a1e8:	1d29      	adds	r1, r5, #4
   1a1ea:	302d      	adds	r0, #45	; 0x2d
   1a1ec:	9102      	str	r1, [sp, #8]
   1a1ee:	f7fb fc03 	bl	159f8 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a1f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a1f4:	7d2a      	ldrb	r2, [r5, #20]
   1a1f6:	6958      	ldr	r0, [r3, #20]
   1a1f8:	9902      	ldr	r1, [sp, #8]
   1a1fa:	303d      	adds	r0, #61	; 0x3d
   1a1fc:	f7fb fbfc 	bl	159f8 <WStrReverseCpy>
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
   1a200:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a202:	e7c2      	b.n	1a18a <smpiScActPkCalcCa+0xe>
   1a204:	00026e98 	.word	0x00026e98
   1a208:	0002689c 	.word	0x0002689c

0001a20c <smpiScActPkCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a20c:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Record the Nbi */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a20e:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1a210:	4604      	mov	r4, r0
   1a212:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a214:	6958      	ldr	r0, [r3, #20]
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a216:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a218:	2210      	movs	r2, #16
{
   1a21a:	b084      	sub	sp, #16
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a21c:	3109      	adds	r1, #9
   1a21e:	4410      	add	r0, r2
   1a220:	f7fb fbea 	bl	159f8 <WStrReverseCpy>

  /* Cb = f4(PKbx, PKax, Nbi, Rai) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a224:	6c63      	ldr	r3, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   1a226:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a228:	689a      	ldr	r2, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1a22a:	68db      	ldr	r3, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a22c:	9203      	str	r2, [sp, #12]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1a22e:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   1a230:	f002 ff70 	bl	1d114 <smpGetPkBit>
   1a234:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1a236:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   1a238:	4606      	mov	r6, r0
   1a23a:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1a23c:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   1a23e:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1a240:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   1a242:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1a246:	9401      	str	r4, [sp, #4]
   1a248:	f002 fe36 	bl	1ceb8 <SmpScCalcF4>
}
   1a24c:	b004      	add	sp, #16
   1a24e:	bd70      	pop	{r4, r5, r6, pc}

0001a250 <smpiScActPkSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a250:	b538      	push	{r3, r4, r5, lr}
   1a252:	460c      	mov	r4, r1
   1a254:	4605      	mov	r5, r0
  SMP_TRACE_128("Cai", pMsg->aes.pCiphertext);
   1a256:	6849      	ldr	r1, [r1, #4]
   1a258:	4805      	ldr	r0, [pc, #20]	; (1a270 <smpiScActPkSendCnf+0x20>)
   1a25a:	2210      	movs	r2, #16
   1a25c:	f002 ffc2 	bl	1d1e4 <smpLogByteArray>

  /* Send the Cai to the peer */
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   1a260:	6862      	ldr	r2, [r4, #4]
   1a262:	4621      	mov	r1, r4
   1a264:	4628      	mov	r0, r5
}
   1a266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   1a26a:	f002 bf2b 	b.w	1d0c4 <smpScSendPairCnf>
   1a26e:	bf00      	nop
   1a270:	00026eb4 	.word	0x00026eb4

0001a274 <smpiScActPkSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a274:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pCb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Record the Cbi from the responder */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
   1a276:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1a278:	4604      	mov	r4, r0
   1a27a:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
   1a27c:	6958      	ldr	r0, [r3, #20]
  uint8_t *pCb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a27e:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
   1a280:	2210      	movs	r2, #16
   1a282:	3109      	adds	r1, #9
   1a284:	3040      	adds	r0, #64	; 0x40
   1a286:	f7fb fbb7 	bl	159f8 <WStrReverseCpy>

  /* Next command is the Pair Random */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;

  /* Send the Nai */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a28a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1a28c:	2204      	movs	r2, #4
   1a28e:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a292:	695a      	ldr	r2, [r3, #20]
   1a294:	4629      	mov	r1, r5
   1a296:	4620      	mov	r0, r4
}
   1a298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a29c:	f002 beea 	b.w	1d074 <smpScSendRand>

0001a2a0 <smpiScActPkCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a2a0:	b570      	push	{r4, r5, r6, lr}
   1a2a2:	4604      	mov	r4, r0
   1a2a4:	b082      	sub	sp, #8
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);
   1a2a6:	4816      	ldr	r0, [pc, #88]	; (1a300 <smpiScActPkCheck+0x60>)
{
   1a2a8:	460d      	mov	r5, r1
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);
   1a2aa:	2210      	movs	r2, #16
   1a2ac:	6849      	ldr	r1, [r1, #4]
   1a2ae:	f002 ff99 	bl	1d1e4 <smpLogByteArray>

  /* Verify the Calculated Cbi to previously received Cbi */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCb, pMsg->aes.pCiphertext, SMP_RAND_LEN))
   1a2b2:	6c66      	ldr	r6, [r4, #68]	; 0x44
   1a2b4:	6869      	ldr	r1, [r5, #4]
   1a2b6:	6970      	ldr	r0, [r6, #20]
   1a2b8:	2210      	movs	r2, #16
   1a2ba:	3040      	adds	r0, #64	; 0x40
   1a2bc:	f009 f80c 	bl	232d8 <memcmp>
   1a2c0:	b9b8      	cbnz	r0, 1a2f2 <smpiScActPkCheck+0x52>
  else
  {
     wsfMsgHdr_t hdr;

     /* Increment the bit position */
    if (++pCcb->pScCcb->pkPos >= SMP_PK_BIT_COUNT)
   1a2c2:	78f3      	ldrb	r3, [r6, #3]
   1a2c4:	3301      	adds	r3, #1
   1a2c6:	b2db      	uxtb	r3, r3
   1a2c8:	2b13      	cmp	r3, #19
   1a2ca:	70f3      	strb	r3, [r6, #3]
      hdr.event = SMP_MSG_INT_PK_CMPL;
    }
    else
    {
      /* Next command is the Pair Confirm */
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1a2cc:	bf9e      	ittt	ls
   1a2ce:	2303      	movls	r3, #3
   1a2d0:	f884 303f 	strbls.w	r3, [r4, #63]	; 0x3f

      hdr.event = SMP_MSG_INT_PK_NEXT;
   1a2d4:	221a      	movls	r2, #26
    }

    /* Post an event to move to the next passkey confirm or complete the process */
    hdr.param = pCcb->connId;
   1a2d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1a2da:	f8ad 3004 	strh.w	r3, [sp, #4]
      hdr.event = SMP_MSG_INT_PK_CMPL;
   1a2de:	bf88      	it	hi
   1a2e0:	221b      	movhi	r2, #27
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1a2e2:	a901      	add	r1, sp, #4
   1a2e4:	4620      	mov	r0, r4
   1a2e6:	f88d 2006 	strb.w	r2, [sp, #6]
   1a2ea:	f001 f90d 	bl	1b508 <smpSmExecute>
  }
}
   1a2ee:	b002      	add	sp, #8
   1a2f0:	bd70      	pop	{r4, r5, r6, pc}
    smpScFailWithReattempt(pCcb);
   1a2f2:	4620      	mov	r0, r4
}
   1a2f4:	b002      	add	sp, #8
   1a2f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpScFailWithReattempt(pCcb);
   1a2fa:	f002 bf43 	b.w	1d184 <smpScFailWithReattempt>
   1a2fe:	bf00      	nop
   1a300:	00026eb8 	.word	0x00026eb8

0001a304 <smpiScActOobCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActOobCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a304:	b530      	push	{r4, r5, lr}
  /* If the peer device's OOB data flag does not indicate remote OOB data has been received,
     clear Ra. */
  if (pCcb->pairRsp[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
   1a306:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1a30a:	2b01      	cmp	r3, #1
{
   1a30c:	b087      	sub	sp, #28
   1a30e:	4604      	mov	r4, r0
   1a310:	460d      	mov	r5, r1
  if (pCcb->pairRsp[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
   1a312:	d005      	beq.n	1a320 <smpiScActOobCalcCb+0x1c>
  {
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
   1a314:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a316:	4915      	ldr	r1, [pc, #84]	; (1a36c <smpiScActOobCalcCb+0x68>)
   1a318:	6958      	ldr	r0, [r3, #20]
   1a31a:	3020      	adds	r0, #32
   1a31c:	f7fb faf2 	bl	15904 <Calc128Cpy>
  }

  /* If we indicated the presence of remote OOB data has been received, calculate Cb. */
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1a320:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1a324:	2b01      	cmp	r3, #1
  {
    /* Calculate Cb using Toolkit function F4 */
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a326:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1a328:	d013      	beq.n	1a352 <smpiScActOobCalcCb+0x4e>
  else
  {
    /* Simulate the cb calculation is complete and clear rb */
    secCmacMsg_t msg;

    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*)calc128Zeros);
   1a32a:	6958      	ldr	r0, [r3, #20]
   1a32c:	490f      	ldr	r1, [pc, #60]	; (1a36c <smpiScActOobCalcCb+0x68>)
   1a32e:	3030      	adds	r0, #48	; 0x30
   1a330:	f7fb fae8 	bl	15904 <Calc128Cpy>

    msg.hdr.param = pCcb->connId;
   1a334:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
   1a338:	f8ad 500c 	strh.w	r5, [sp, #12]
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   1a33c:	221c      	movs	r2, #28
    msg.pPlainText = NULL;
   1a33e:	2300      	movs	r3, #0

    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   1a340:	a903      	add	r1, sp, #12
   1a342:	4620      	mov	r0, r4
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   1a344:	f88d 200e 	strb.w	r2, [sp, #14]
    msg.pPlainText = NULL;
   1a348:	9305      	str	r3, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   1a34a:	f001 f8dd 	bl	1b508 <smpSmExecute>
  }
}
   1a34e:	b007      	add	sp, #28
   1a350:	bd30      	pop	{r4, r5, pc}
                0, pCcb->pScCcb->pScratch->Rb);
   1a352:	695a      	ldr	r2, [r3, #20]
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1a354:	689b      	ldr	r3, [r3, #8]
                0, pCcb->pScCcb->pScratch->Rb);
   1a356:	3230      	adds	r2, #48	; 0x30
    SmpScCalcF4(pCcb, pMsg,
   1a358:	2000      	movs	r0, #0
   1a35a:	e9cd 0200 	strd	r0, r2, [sp]
   1a35e:	4629      	mov	r1, r5
   1a360:	461a      	mov	r2, r3
   1a362:	4620      	mov	r0, r4
   1a364:	f002 fda8 	bl	1ceb8 <SmpScCalcF4>
}
   1a368:	b007      	add	sp, #28
   1a36a:	bd30      	pop	{r4, r5, pc}
   1a36c:	0002689c 	.word	0x0002689c

0001a370 <smpiScActOobSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActOobSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a370:	b570      	push	{r4, r5, r6, lr}
  /* Only compare Cb if we indicated that we received OOB data. */
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1a372:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1a376:	2b01      	cmp	r3, #1
{
   1a378:	4604      	mov	r4, r0
   1a37a:	460d      	mov	r5, r1
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1a37c:	d016      	beq.n	1a3ac <smpiScActOobSendRand+0x3c>

  /* Next command is a Pair Rand from Responder */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;

  /* Calculate a the Na */
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
   1a37e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a380:	695e      	ldr	r6, [r3, #20]
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1a382:	2304      	movs	r3, #4
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
   1a384:	4630      	mov	r0, r6
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1a386:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
   1a38a:	2110      	movs	r1, #16
   1a38c:	f7f7 fd4c 	bl	11e28 <SecRand>

  SMP_TRACE_128("Rand Na", pCcb->pScCcb->pScratch->Na_Ea);
   1a390:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a392:	4810      	ldr	r0, [pc, #64]	; (1a3d4 <smpiScActOobSendRand+0x64>)
   1a394:	6959      	ldr	r1, [r3, #20]
   1a396:	2210      	movs	r2, #16
   1a398:	f002 ff24 	bl	1d1e4 <smpLogByteArray>

  /* Send the Na to the responder */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a39c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a39e:	4629      	mov	r1, r5
   1a3a0:	4620      	mov	r0, r4
   1a3a2:	695a      	ldr	r2, [r3, #20]
}
   1a3a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a3a8:	f002 be64 	b.w	1d074 <smpScSendRand>
    SMP_TRACE_128("Initiator Cb", pMsg->aes.pCiphertext);
   1a3ac:	6849      	ldr	r1, [r1, #4]
   1a3ae:	480a      	ldr	r0, [pc, #40]	; (1a3d8 <smpiScActOobSendRand+0x68>)
   1a3b0:	2210      	movs	r2, #16
   1a3b2:	f002 ff17 	bl	1d1e4 <smpLogByteArray>
    if (memcmp(pCcb->pScCcb->pScratch->PeerCb, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN))
   1a3b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a3b8:	6869      	ldr	r1, [r5, #4]
   1a3ba:	695e      	ldr	r6, [r3, #20]
   1a3bc:	2210      	movs	r2, #16
   1a3be:	f106 0040 	add.w	r0, r6, #64	; 0x40
   1a3c2:	f008 ff89 	bl	232d8 <memcmp>
   1a3c6:	2800      	cmp	r0, #0
   1a3c8:	d0db      	beq.n	1a382 <smpiScActOobSendRand+0x12>
      smpScFailWithReattempt(pCcb);
   1a3ca:	4620      	mov	r0, r4
}
   1a3cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpScFailWithReattempt(pCcb);
   1a3d0:	f002 bed8 	b.w	1d184 <smpScFailWithReattempt>
   1a3d4:	00026e98 	.word	0x00026e98
   1a3d8:	00026ebc 	.word	0x00026ebc

0001a3dc <smpiScActOobProcRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActOobProcRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a3dc:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Copy the Nb from the responder */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a3de:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1a3e0:	4604      	mov	r4, r0
   1a3e2:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a3e4:	6958      	ldr	r0, [r3, #20]
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a3e6:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
   1a3e8:	3010      	adds	r0, #16
   1a3ea:	3109      	adds	r1, #9
   1a3ec:	2210      	movs	r2, #16
   1a3ee:	f7fb fb03 	bl	159f8 <WStrReverseCpy>

  /* Initiate the DH Check */
  smpScActCalcSharedSecret(pCcb, pMsg);
   1a3f2:	4629      	mov	r1, r5
   1a3f4:	4620      	mov	r0, r4
}
   1a3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActCalcSharedSecret(pCcb, pMsg);
   1a3fa:	f002 bb1d 	b.w	1ca38 <smpScActCalcSharedSecret>
   1a3fe:	bf00      	nop

0001a400 <smpiScActDHKeyCheckSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActDHKeyCheckSend(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a400:	b538      	push	{r3, r4, r5, lr}
   1a402:	4604      	mov	r4, r0
   1a404:	460d      	mov	r5, r1
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
   1a406:	480b      	ldr	r0, [pc, #44]	; (1a434 <smpiScActDHKeyCheckSend+0x34>)
   1a408:	6849      	ldr	r1, [r1, #4]
   1a40a:	2210      	movs	r2, #16
   1a40c:	f002 feea 	bl	1d1e4 <smpLogByteArray>

  /* Copy Eb from the smpScActDHKeyCalcF6Eb in LSB first format (as it will be received from peer) */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pMsg->aes.pCiphertext, SMP_RAND_LEN);
   1a410:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a412:	6869      	ldr	r1, [r5, #4]
   1a414:	6958      	ldr	r0, [r3, #20]
   1a416:	2210      	movs	r2, #16
   1a418:	4410      	add	r0, r2
   1a41a:	f7fb faed 	bl	159f8 <WStrReverseCpy>

  /* Next cmd message is the DH Key Check from the responder */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;

  /* Send the DH Key check with Ea to the responder */
  smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a41e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1a420:	220d      	movs	r2, #13
   1a422:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a426:	695a      	ldr	r2, [r3, #20]
   1a428:	4629      	mov	r1, r5
   1a42a:	4620      	mov	r0, r4
}
   1a42c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
   1a430:	f002 bdf8 	b.w	1d024 <smpScSendDHKeyCheck>
   1a434:	00026ecc 	.word	0x00026ecc

0001a438 <smpiScActDHKeyCheckVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActDHKeyCheckVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a438:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *pEbPeer = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;;

  /* Verify the DH Key Check Eb with the value received from the responder */
  if (memcmp(pEbPeer, pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN) == 0)
   1a43a:	6c47      	ldr	r7, [r0, #68]	; 0x44
{
   1a43c:	4604      	mov	r4, r0
  uint8_t *pEbPeer = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;;
   1a43e:	6848      	ldr	r0, [r1, #4]
  if (memcmp(pEbPeer, pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN) == 0)
   1a440:	6979      	ldr	r1, [r7, #20]
   1a442:	2210      	movs	r2, #16
{
   1a444:	b085      	sub	sp, #20
  if (memcmp(pEbPeer, pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN) == 0)
   1a446:	4411      	add	r1, r2
   1a448:	3009      	adds	r0, #9
   1a44a:	f008 ff45 	bl	232d8 <memcmp>
   1a44e:	bb00      	cbnz	r0, 1a492 <smpiScActDHKeyCheckVerify+0x5a>
  {
    uint8_t buf[SMP_KEY_LEN];
    uint8_t encKeyLen;

    encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1a450:	f894 602b 	ldrb.w	r6, [r4, #43]	; 0x2b
   1a454:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
                 pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

    /* Adjust key based on max key length */
    memcpy(buf, pCcb->pScCcb->pLtk->ltk_t, encKeyLen);
   1a458:	69b9      	ldr	r1, [r7, #24]
    encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1a45a:	429e      	cmp	r6, r3
   1a45c:	bf28      	it	cs
   1a45e:	461e      	movcs	r6, r3
    memcpy(buf, pCcb->pScCcb->pLtk->ltk_t, encKeyLen);
   1a460:	4605      	mov	r5, r0
   1a462:	4632      	mov	r2, r6
   1a464:	3110      	adds	r1, #16
   1a466:	4668      	mov	r0, sp
   1a468:	f7f1 fe4a 	bl	c100 <memcpy>
    memset((buf + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   1a46c:	f1c6 0210 	rsb	r2, r6, #16
   1a470:	4629      	mov	r1, r5
   1a472:	eb0d 0006 	add.w	r0, sp, r6
   1a476:	f008 ff61 	bl	2333c <memset>

    /* Initiate encryption */
    DmSmpEncryptReq(pCcb->connId, smpGetScSecLevel(pCcb), buf);
   1a47a:	4620      	mov	r0, r4
   1a47c:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
   1a480:	f001 fe7e 	bl	1c180 <smpGetScSecLevel>
   1a484:	466a      	mov	r2, sp
   1a486:	4601      	mov	r1, r0
   1a488:	4628      	mov	r0, r5
   1a48a:	f7f4 fa6b 	bl	e964 <DmSmpEncryptReq>
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   1a48e:	b005      	add	sp, #20
   1a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCcb->attempts++;
   1a492:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    hdr.param = pCcb->connId;
   1a496:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1a49a:	f8ad 0000 	strh.w	r0, [sp]
    pCcb->attempts++;
   1a49e:	3301      	adds	r3, #1
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   1a4a0:	220b      	movs	r2, #11
    pCcb->attempts++;
   1a4a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   1a4a6:	f88d 2003 	strb.w	r2, [sp, #3]
    SmpDbPairingFailed(pCcb->connId);
   1a4aa:	f001 fa17 	bl	1b8dc <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   1a4ae:	4a08      	ldr	r2, [pc, #32]	; (1a4d0 <smpiScActDHKeyCheckVerify+0x98>)
   1a4b0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1a4b4:	6812      	ldr	r2, [r2, #0]
   1a4b6:	79d2      	ldrb	r2, [r2, #7]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1a4b8:	4669      	mov	r1, sp
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
   1a4ba:	4293      	cmp	r3, r2
   1a4bc:	bf0c      	ite	eq
   1a4be:	230d      	moveq	r3, #13
   1a4c0:	231d      	movne	r3, #29
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1a4c2:	4620      	mov	r0, r4
   1a4c4:	f88d 3002 	strb.w	r3, [sp, #2]
   1a4c8:	f001 f81e 	bl	1b508 <smpSmExecute>
}
   1a4cc:	b005      	add	sp, #20
   1a4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a4d0:	10002c30 	.word	0x10002c30

0001a4d4 <SmpiScInit>:
 */
/*************************************************************************************************/
void SmpiScInit(void)
{
  /* set up callback interface */
  smpCb.pMaster = &smpiScSmIf;
   1a4d4:	4b02      	ldr	r3, [pc, #8]	; (1a4e0 <SmpiScInit+0xc>)
   1a4d6:	4a03      	ldr	r2, [pc, #12]	; (1a4e4 <SmpiScInit+0x10>)
   1a4d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /* General SMP LESC Initialization */
  SmpScInit();
   1a4dc:	f002 bd44 	b.w	1cf68 <SmpScInit>
   1a4e0:	100059e4 	.word	0x100059e4
   1a4e4:	00026fa4 	.word	0x00026fa4

0001a4e8 <SmpiInit>:
 */
/*************************************************************************************************/
void SmpiInit(void)
{
  /* set up callback interface */
  smpCb.pMaster = &smpiSmIf;
   1a4e8:	4b04      	ldr	r3, [pc, #16]	; (1a4fc <SmpiInit+0x14>)
  smpCb.procPairing = smpProcPairing;
   1a4ea:	4905      	ldr	r1, [pc, #20]	; (1a500 <SmpiInit+0x18>)
  smpCb.procAuthReq = smpAuthReq;
   1a4ec:	4a05      	ldr	r2, [pc, #20]	; (1a504 <SmpiInit+0x1c>)
  smpCb.pMaster = &smpiSmIf;
   1a4ee:	4806      	ldr	r0, [pc, #24]	; (1a508 <SmpiInit+0x20>)
   1a4f0:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  smpCb.procAuthReq = smpAuthReq;
   1a4f4:	e9c3 1239 	strd	r1, r2, [r3, #228]	; 0xe4
}
   1a4f8:	4770      	bx	lr
   1a4fa:	bf00      	nop
   1a4fc:	100059e4 	.word	0x100059e4
   1a500:	0001b57d 	.word	0x0001b57d
   1a504:	0001b699 	.word	0x0001b699
   1a508:	00027250 	.word	0x00027250

0001a50c <smprActSendSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a50c:	b538      	push	{r3, r4, r5, lr}
   1a50e:	4604      	mov	r4, r0
   1a510:	460d      	mov	r5, r1
  uint8_t   *pPkt;
  uint8_t   *p;

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1a512:	f000 fccf 	bl	1aeb4 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_SECURITY_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   1a516:	200a      	movs	r0, #10
   1a518:	f001 fe0e 	bl	1c138 <smpMsgAlloc>
   1a51c:	b148      	cbz	r0, 1a532 <smprActSendSecurityReq+0x26>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_SECURITY_REQ);
   1a51e:	230b      	movs	r3, #11
   1a520:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, pMsg->dm.securityReq.auth);
   1a522:	792b      	ldrb	r3, [r5, #4]
   1a524:	7243      	strb	r3, [r0, #9]
   1a526:	4601      	mov	r1, r0

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1a528:	4620      	mov	r0, r4
  }
}
   1a52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   1a52e:	f001 bde3 	b.w	1c0f8 <smpSendPkt>
}
   1a532:	bd38      	pop	{r3, r4, r5, pc}

0001a534 <smprActProcPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a534:	b530      	push	{r4, r5, lr}
  dmSecPairIndEvt_t   pairInd;
  uint8_t             *p;

  /* allocate scratch buffer */
  if (pCcb->pScr == NULL)
   1a536:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
   1a538:	b083      	sub	sp, #12
   1a53a:	4604      	mov	r4, r0
   1a53c:	460d      	mov	r5, r1
  if (pCcb->pScr == NULL)
   1a53e:	b343      	cbz	r3, 1a592 <smprActProcPairReq+0x5e>
    }
  }
  else
  {
    /* should not happen */
    SMP_TRACE_ERR0("pScr already allocated");
   1a540:	481c      	ldr	r0, [pc, #112]	; (1a5b4 <smprActProcPairReq+0x80>)
   1a542:	f004 f8a9 	bl	1e698 <WsfTrace>
  }

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1a546:	2201      	movs	r2, #1
   1a548:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1a54c:	4611      	mov	r1, r2
   1a54e:	f7f2 ff5f 	bl	d410 <DmConnSetIdle>

  p = pMsg->data.pPacket + L2C_PAYLOAD_START;
   1a552:	686b      	ldr	r3, [r5, #4]
  p++;    /* skip max key len */
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);

  /* call app callback */
  pairInd.hdr.param = pCcb->connId;
   1a554:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  memcpy(pCcb->pairReq, p, SMP_PAIR_REQ_LEN);
   1a558:	6899      	ldr	r1, [r3, #8]
   1a55a:	6221      	str	r1, [r4, #32]
   1a55c:	8999      	ldrh	r1, [r3, #12]
   1a55e:	7b98      	ldrb	r0, [r3, #14]
   1a560:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   1a564:	84a1      	strh	r1, [r4, #36]	; 0x24
  BSTREAM_TO_UINT8(pairInd.auth, p);
   1a566:	7ad8      	ldrb	r0, [r3, #11]
  BSTREAM_TO_UINT8(pairInd.oob, p);
   1a568:	7a9d      	ldrb	r5, [r3, #10]
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
   1a56a:	7b5c      	ldrb	r4, [r3, #13]
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);
   1a56c:	7b99      	ldrb	r1, [r3, #14]
  BSTREAM_TO_UINT8(pairInd.auth, p);
   1a56e:	f88d 0004 	strb.w	r0, [sp, #4]
  pairInd.hdr.event = DM_SEC_PAIR_IND;
   1a572:	2331      	movs	r3, #49	; 0x31
  DmSmpCbackExec((dmEvt_t *) &pairInd);
   1a574:	4668      	mov	r0, sp
  BSTREAM_TO_UINT8(pairInd.oob, p);
   1a576:	f88d 5005 	strb.w	r5, [sp, #5]
  BSTREAM_TO_UINT8(pairInd.iKeyDist, p);
   1a57a:	f88d 4006 	strb.w	r4, [sp, #6]
  BSTREAM_TO_UINT8(pairInd.rKeyDist, p);
   1a57e:	f88d 1007 	strb.w	r1, [sp, #7]
  pairInd.hdr.param = pCcb->connId;
   1a582:	f8ad 2000 	strh.w	r2, [sp]
  pairInd.hdr.event = DM_SEC_PAIR_IND;
   1a586:	f88d 3002 	strb.w	r3, [sp, #2]
  DmSmpCbackExec((dmEvt_t *) &pairInd);
   1a58a:	f7f4 f949 	bl	e820 <DmSmpCbackExec>
}
   1a58e:	b003      	add	sp, #12
   1a590:	bd30      	pop	{r4, r5, pc}
    if ((pCcb->pScr = WsfBufAlloc(sizeof(smpScratch_t))) == NULL)
   1a592:	2040      	movs	r0, #64	; 0x40
   1a594:	f003 fca0 	bl	1ded8 <WsfBufAlloc>
   1a598:	6320      	str	r0, [r4, #48]	; 0x30
   1a59a:	2800      	cmp	r0, #0
   1a59c:	d1d3      	bne.n	1a546 <smprActProcPairReq+0x12>
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1a59e:	f640 0303 	movw	r3, #2051	; 0x803
      smpSmExecute(pCcb, pMsg);
   1a5a2:	4629      	mov	r1, r5
   1a5a4:	4620      	mov	r0, r4
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1a5a6:	806b      	strh	r3, [r5, #2]
}
   1a5a8:	b003      	add	sp, #12
   1a5aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      smpSmExecute(pCcb, pMsg);
   1a5ae:	f000 bfab 	b.w	1b508 <smpSmExecute>
   1a5b2:	bf00      	nop
   1a5b4:	00027350 	.word	0x00027350

0001a5b8 <smprActSendPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRsp(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a5b8:	b570      	push	{r4, r5, r6, lr}
  uint8_t   display;

  /* build packet to pairing response buffer in ccb */
  p = pCcb->pairRsp;
  UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RSP);
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   1a5ba:	4b26      	ldr	r3, [pc, #152]	; (1a654 <smprActSendPairRsp+0x9c>)
  UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);

  /* process pairing request and response data */
  if (smpCb.procPairing(pCcb, &oob, &display))
   1a5bc:	4e26      	ldr	r6, [pc, #152]	; (1a658 <smprActSendPairRsp+0xa0>)
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   1a5be:	681b      	ldr	r3, [r3, #0]
  UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RSP);
   1a5c0:	2202      	movs	r2, #2
   1a5c2:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
  UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
   1a5c6:	791a      	ldrb	r2, [r3, #4]
   1a5c8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.oob);
   1a5cc:	790a      	ldrb	r2, [r1, #4]
   1a5ce:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.auth);
   1a5d2:	794a      	ldrb	r2, [r1, #5]
   1a5d4:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
  UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
   1a5d8:	799b      	ldrb	r3, [r3, #6]
   1a5da:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
   1a5de:	798b      	ldrb	r3, [r1, #6]
   1a5e0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
   1a5e4:	79cb      	ldrb	r3, [r1, #7]
   1a5e6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
{
   1a5ea:	b082      	sub	sp, #8
   1a5ec:	460d      	mov	r5, r1
  if (smpCb.procPairing(pCcb, &oob, &display))
   1a5ee:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
   1a5f2:	f10d 0207 	add.w	r2, sp, #7
   1a5f6:	f10d 0106 	add.w	r1, sp, #6
{
   1a5fa:	4604      	mov	r4, r0
  if (smpCb.procPairing(pCcb, &oob, &display))
   1a5fc:	4798      	blx	r3
   1a5fe:	b330      	cbz	r0, 1a64e <smprActSendPairRsp+0x96>
  {
    /* set next expected packet */
    if ((pCcb->pairReq[SMP_AUTHREQ_POS] & pMsg->dm.pair.auth & SMP_AUTH_SC_FLAG) == SMP_AUTH_SC_FLAG)
   1a600:	796a      	ldrb	r2, [r5, #5]
   1a602:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1a606:	4013      	ands	r3, r2
    {
      pCcb->nextCmdCode = SMP_CMD_PUBLIC_KEY;
    }
    else
    {
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1a608:	f013 0f08 	tst.w	r3, #8
   1a60c:	bf14      	ite	ne
   1a60e:	230c      	movne	r3, #12
   1a610:	2303      	moveq	r3, #3
    }

    /* start smp response timer */
    smpStartRspTimer(pCcb);
   1a612:	4620      	mov	r0, r4
   1a614:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   1a618:	f000 fc4c 	bl	1aeb4 <smpStartRspTimer>

    /* send pairing response; allocate packet buffer */
    if ((pPkt = smpMsgAlloc(SMP_PAIR_RSP_LEN + L2C_PAYLOAD_START)) != NULL)
   1a61c:	200f      	movs	r0, #15
   1a61e:	f001 fd8b 	bl	1c138 <smpMsgAlloc>
   1a622:	4601      	mov	r1, r0
   1a624:	b158      	cbz	r0, 1a63e <smprActSendPairRsp+0x86>
    {
      /* build packet from pairing response buffer */
      memcpy(pPkt + L2C_PAYLOAD_START, pCcb->pairRsp, SMP_PAIR_RSP_LEN);
   1a626:	f8d4 3027 	ldr.w	r3, [r4, #39]	; 0x27
   1a62a:	6083      	str	r3, [r0, #8]
   1a62c:	f8b4 302b 	ldrh.w	r3, [r4, #43]	; 0x2b
   1a630:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1a634:	7382      	strb	r2, [r0, #14]
   1a636:	8183      	strh	r3, [r0, #12]

      /* send packet */
      smpSendPkt(pCcb, pPkt);
   1a638:	4620      	mov	r0, r4
   1a63a:	f001 fd5d 	bl	1c0f8 <smpSendPkt>
    }

    /* request authentication data */
    smpCb.procAuthReq(pCcb, oob, display);
   1a63e:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
   1a642:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1a646:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1a64a:	4620      	mov	r0, r4
   1a64c:	4798      	blx	r3
  }
}
   1a64e:	b002      	add	sp, #8
   1a650:	bd70      	pop	{r4, r5, r6, pc}
   1a652:	bf00      	nop
   1a654:	10002c30 	.word	0x10002c30
   1a658:	100059e4 	.word	0x100059e4

0001a65c <smprActProcPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a65c:	b500      	push	{lr}
  uint8_t   *p;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a65e:	684a      	ldr	r2, [r1, #4]

  /* store confirm value */
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   1a660:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1a662:	f8d2 e009 	ldr.w	lr, [r2, #9]
   1a666:	f8d2 c00d 	ldr.w	ip, [r2, #13]
   1a66a:	f8d2 1011 	ldr.w	r1, [r2, #17]
   1a66e:	f8d2 2015 	ldr.w	r2, [r2, #21]
   1a672:	62da      	str	r2, [r3, #44]	; 0x2c
   1a674:	f8c3 e020 	str.w	lr, [r3, #32]

  /* discard any packets received erroneously at this point */
  pCcb->nextCmdCode = 0;
   1a678:	2200      	movs	r2, #0
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   1a67a:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
   1a67e:	6299      	str	r1, [r3, #40]	; 0x28
  pCcb->nextCmdCode = 0;
   1a680:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
}
   1a684:	f85d fb04 	ldr.w	pc, [sp], #4

0001a688 <smprActProcPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActProcPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a688:	b510      	push	{r4, lr}
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a68a:	684a      	ldr	r2, [r1, #4]
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   1a68c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1a68e:	f8d2 1011 	ldr.w	r1, [r2, #17]
   1a692:	f8d2 c009 	ldr.w	ip, [r2, #9]
{
   1a696:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
   1a698:	f8d2 000d 	ldr.w	r0, [r2, #13]
   1a69c:	f8d2 2015 	ldr.w	r2, [r2, #21]
   1a6a0:	62da      	str	r2, [r3, #44]	; 0x2c
   1a6a2:	6299      	str	r1, [r3, #40]	; 0x28
   1a6a4:	f8c3 c020 	str.w	ip, [r3, #32]
   1a6a8:	6258      	str	r0, [r3, #36]	; 0x24
  smprActProcPairCnf(pCcb, pMsg);

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1a6aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
  pCcb->nextCmdCode = 0;
   1a6ac:	2300      	movs	r3, #0
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1a6ae:	2110      	movs	r1, #16
   1a6b0:	3030      	adds	r0, #48	; 0x30
  pCcb->nextCmdCode = 0;
   1a6b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1a6b6:	f7f7 fbb7 	bl	11e28 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1a6ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a6bc:	4620      	mov	r0, r4
   1a6be:	f101 0230 	add.w	r2, r1, #48	; 0x30
}
   1a6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1a6c6:	f001 bb2b 	b.w	1bd20 <smpCalcC1Part1>
   1a6ca:	bf00      	nop

0001a6cc <smprActCnfVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActCnfVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a6cc:	b570      	push	{r4, r5, r6, lr}
  /* compare calculated confirm value with value received earlier */
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   1a6ce:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
   1a6d0:	460d      	mov	r5, r1
   1a6d2:	4604      	mov	r4, r0
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
   1a6d4:	2210      	movs	r2, #16
   1a6d6:	6868      	ldr	r0, [r5, #4]
   1a6d8:	f106 0120 	add.w	r1, r6, #32
   1a6dc:	f008 fdfc 	bl	232d8 <memcmp>
   1a6e0:	b948      	cbnz	r0, 1a6f6 <smprActCnfVerify+0x2a>
    smpSmExecute(pCcb, pMsg);
    return;
  }

  /* do STK calculation: key, responder rand, initiator rand */
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4, pCcb->pScr->buf.b2);
   1a6e2:	f106 0310 	add.w	r3, r6, #16
   1a6e6:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1a6ea:	4631      	mov	r1, r6
   1a6ec:	4620      	mov	r0, r4
}
   1a6ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4, pCcb->pScr->buf.b2);
   1a6f2:	f001 bca7 	b.w	1c044 <smpCalcS1>
    pCcb->attempts++;
   1a6f6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   1a6fa:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    pCcb->attempts++;
   1a6fe:	3301      	adds	r3, #1
   1a700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
   1a704:	f001 f8ea 	bl	1b8dc <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   1a708:	4a08      	ldr	r2, [pc, #32]	; (1a72c <smprActCnfVerify+0x60>)
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
   1a70a:	2304      	movs	r3, #4
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   1a70c:	6812      	ldr	r2, [r2, #0]
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
   1a70e:	70eb      	strb	r3, [r5, #3]
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   1a710:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1a714:	79d2      	ldrb	r2, [r2, #7]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1a716:	4293      	cmp	r3, r2
   1a718:	bf0c      	ite	eq
   1a71a:	230d      	moveq	r3, #13
   1a71c:	2303      	movne	r3, #3
    smpSmExecute(pCcb, pMsg);
   1a71e:	4629      	mov	r1, r5
   1a720:	70ab      	strb	r3, [r5, #2]
   1a722:	4620      	mov	r0, r4
}
   1a724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   1a728:	f000 beee 	b.w	1b508 <smpSmExecute>
   1a72c:	10002c30 	.word	0x10002c30

0001a730 <smprActSendPairRandom>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSendPairRandom(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a730:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;
  uint8_t   encKeyLen;

  /* get max STK length */
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1a732:	f890 502b 	ldrb.w	r5, [r0, #43]	; 0x2b
   1a736:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
               pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

  /* store STK and adjust based on max key length */
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   1a73a:	6849      	ldr	r1, [r1, #4]
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1a73c:	429d      	cmp	r5, r3
{
   1a73e:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   1a740:	6b00      	ldr	r0, [r0, #48]	; 0x30
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1a742:	bf28      	it	cs
   1a744:	461d      	movcs	r5, r3
  memcpy(pCcb->pScr->buf.b3, pMsg->aes.pCiphertext, encKeyLen);
   1a746:	462a      	mov	r2, r5
   1a748:	3020      	adds	r0, #32
   1a74a:	f7f1 fcd9 	bl	c100 <memcpy>
  memset((pCcb->pScr->buf.b3 + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   1a74e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1a750:	3020      	adds	r0, #32
   1a752:	f1c5 0210 	rsb	r2, r5, #16
   1a756:	2100      	movs	r1, #0
   1a758:	4428      	add	r0, r5
   1a75a:	f008 fdef 	bl	2333c <memset>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1a75e:	4620      	mov	r0, r4
   1a760:	f000 fba8 	bl	1aeb4 <smpStartRspTimer>

  /* allocate packet buffer and send pairing random packet */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   1a764:	2019      	movs	r0, #25
   1a766:	f001 fce7 	bl	1c138 <smpMsgAlloc>
   1a76a:	b1a0      	cbz	r0, 1a796 <smprActSendPairRandom+0x66>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   1a76c:	2304      	movs	r3, #4
   1a76e:	7203      	strb	r3, [r0, #8]
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1a770:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a772:	4601      	mov	r1, r0
   1a774:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   1a776:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1a778:	4620      	mov	r0, r4
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1a77a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   1a77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a77e:	f8c1 3015 	str.w	r3, [r1, #21]
   1a782:	f8c1 5009 	str.w	r5, [r1, #9]
   1a786:	f8c1 400d 	str.w	r4, [r1, #13]
   1a78a:	f8c1 2011 	str.w	r2, [r1, #17]
  }
}
   1a78e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   1a792:	f001 bcb1 	b.w	1c0f8 <smpSendPkt>
}
   1a796:	bd38      	pop	{r3, r4, r5, pc}

0001a798 <smprActSetupKeyDist>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActSetupKeyDist(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a798:	b570      	push	{r4, r5, r6, lr}
  /* don't receive anything yet */
  pCcb->nextCmdCode = 0;
   1a79a:	2300      	movs	r3, #0
{
   1a79c:	4604      	mov	r4, r0
  pCcb->nextCmdCode = 0;
   1a79e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
{
   1a7a2:	460d      	mov	r5, r1

  /* start smp response timer once for entire key distribution phase */
  smpStartRspTimer(pCcb);
   1a7a4:	f000 fb86 	bl	1aeb4 <smpStartRspTimer>

  /* initialize parameters in key ind struct */
  pCcb->pScr->keyInd.hdr.param = pCcb->connId;
   1a7a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a7aa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   1a7ae:	801a      	strh	r2, [r3, #0]
  pCcb->pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ?
   1a7b0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1a7b4:	f012 0f04 	tst.w	r2, #4
   1a7b8:	bf14      	ite	ne
   1a7ba:	2202      	movne	r2, #2
   1a7bc:	2201      	moveq	r2, #1
   1a7be:	77da      	strb	r2, [r3, #31]
                                DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
  pCcb->pScr->keyInd.encKeyLen =
    (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
     pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
   1a7c0:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   1a7c4:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   1a7c8:	428a      	cmp	r2, r1
   1a7ca:	bf28      	it	cs
   1a7cc:	460a      	movcs	r2, r1
  pCcb->pScr->keyInd.encKeyLen =
   1a7ce:	f883 2020 	strb.w	r2, [r3, #32]

  /* get responder key distribution */
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];

  /* send next key; if done sending keys set up to receive keys */
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   1a7d2:	f894 603f 	ldrb.w	r6, [r4, #63]	; 0x3f
   1a7d6:	b106      	cbz	r6, 1a7da <smprActSetupKeyDist+0x42>
}
   1a7d8:	bd70      	pop	{r4, r5, r6, pc}
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   1a7da:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   1a7de:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   1a7e2:	4620      	mov	r0, r4
   1a7e4:	4019      	ands	r1, r3
   1a7e6:	f000 fc83 	bl	1b0f0 <smpSendKey>
   1a7ea:	2800      	cmp	r0, #0
   1a7ec:	d0f4      	beq.n	1a7d8 <smprActSetupKeyDist+0x40>
  {
    pCcb->nextCmdCode = 0;

    /* get initiator key distribution */
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1a7ee:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1a7f2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    pCcb->nextCmdCode = 0;
   1a7f6:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1a7fa:	4013      	ands	r3, r2

    /* set up to receive first key distribution packet */
    if (keyDist & SMP_KEY_DIST_ENC)
   1a7fc:	07d8      	lsls	r0, r3, #31
   1a7fe:	d514      	bpl.n	1a82a <smprActSetupKeyDist+0x92>
    {
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
   1a800:	4a10      	ldr	r2, [pc, #64]	; (1a844 <smprActSetupKeyDist+0xac>)
   1a802:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
   1a806:	b162      	cbz	r2, 1a822 <smprActSetupKeyDist+0x8a>
   1a808:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a80a:	7812      	ldrb	r2, [r2, #0]
   1a80c:	b14a      	cbz	r2, 1a822 <smprActSetupKeyDist+0x8a>
      {
        if (keyDist & SMP_KEY_DIST_ID)
   1a80e:	0799      	lsls	r1, r3, #30
   1a810:	d413      	bmi.n	1a83a <smprActSetupKeyDist+0xa2>
    }

    if (pCcb->nextCmdCode == 0)
    {
      /* no keys to receive; send ourselves pairing complete msg */
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   1a812:	230e      	movs	r3, #14
   1a814:	70ab      	strb	r3, [r5, #2]
      smpSmExecute(pCcb, pMsg);
   1a816:	4629      	mov	r1, r5
   1a818:	4620      	mov	r0, r4
}
   1a81a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpSmExecute(pCcb, pMsg);
   1a81e:	f000 be73 	b.w	1b508 <smpSmExecute>
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
   1a822:	2306      	movs	r3, #6
   1a824:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1a828:	bd70      	pop	{r4, r5, r6, pc}
    else if (keyDist & SMP_KEY_DIST_ID)
   1a82a:	079a      	lsls	r2, r3, #30
   1a82c:	d405      	bmi.n	1a83a <smprActSetupKeyDist+0xa2>
    else if (keyDist & SMP_KEY_DIST_SIGN)
   1a82e:	075b      	lsls	r3, r3, #29
   1a830:	d5ef      	bpl.n	1a812 <smprActSetupKeyDist+0x7a>
      pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   1a832:	230a      	movs	r3, #10
   1a834:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1a838:	bd70      	pop	{r4, r5, r6, pc}
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1a83a:	2308      	movs	r3, #8
   1a83c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1a840:	bd70      	pop	{r4, r5, r6, pc}
   1a842:	bf00      	nop
   1a844:	100059e4 	.word	0x100059e4

0001a848 <smprActSendKey>:
{
   1a848:	b570      	push	{r4, r5, r6, lr}
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   1a84a:	f890 503f 	ldrb.w	r5, [r0, #63]	; 0x3f
   1a84e:	b105      	cbz	r5, 1a852 <smprActSendKey+0xa>
    }
  }
}
   1a850:	bd70      	pop	{r4, r5, r6, pc}
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
   1a852:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1a856:	460e      	mov	r6, r1
   1a858:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
   1a85c:	4019      	ands	r1, r3
   1a85e:	4604      	mov	r4, r0
   1a860:	f000 fc46 	bl	1b0f0 <smpSendKey>
   1a864:	2800      	cmp	r0, #0
   1a866:	d0f3      	beq.n	1a850 <smprActSendKey+0x8>
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1a868:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1a86c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    pCcb->nextCmdCode = 0;
   1a870:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1a874:	4013      	ands	r3, r2
    if (keyDist & SMP_KEY_DIST_ENC)
   1a876:	07d8      	lsls	r0, r3, #31
   1a878:	d514      	bpl.n	1a8a4 <smprActSendKey+0x5c>
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
   1a87a:	4a10      	ldr	r2, [pc, #64]	; (1a8bc <smprActSendKey+0x74>)
   1a87c:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
   1a880:	b162      	cbz	r2, 1a89c <smprActSendKey+0x54>
   1a882:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a884:	7812      	ldrb	r2, [r2, #0]
   1a886:	b14a      	cbz	r2, 1a89c <smprActSendKey+0x54>
        if (keyDist & SMP_KEY_DIST_ID)
   1a888:	0799      	lsls	r1, r3, #30
   1a88a:	d413      	bmi.n	1a8b4 <smprActSendKey+0x6c>
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   1a88c:	230e      	movs	r3, #14
   1a88e:	70b3      	strb	r3, [r6, #2]
      smpSmExecute(pCcb, pMsg);
   1a890:	4631      	mov	r1, r6
   1a892:	4620      	mov	r0, r4
}
   1a894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpSmExecute(pCcb, pMsg);
   1a898:	f000 be36 	b.w	1b508 <smpSmExecute>
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
   1a89c:	2306      	movs	r3, #6
   1a89e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1a8a2:	bd70      	pop	{r4, r5, r6, pc}
    else if (keyDist & SMP_KEY_DIST_ID)
   1a8a4:	079a      	lsls	r2, r3, #30
   1a8a6:	d405      	bmi.n	1a8b4 <smprActSendKey+0x6c>
    else if (keyDist & SMP_KEY_DIST_SIGN)
   1a8a8:	075b      	lsls	r3, r3, #29
   1a8aa:	d5ef      	bpl.n	1a88c <smprActSendKey+0x44>
      pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   1a8ac:	230a      	movs	r3, #10
   1a8ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1a8b2:	bd70      	pop	{r4, r5, r6, pc}
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1a8b4:	2308      	movs	r3, #8
   1a8b6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
   1a8ba:	bd70      	pop	{r4, r5, r6, pc}
   1a8bc:	100059e4 	.word	0x100059e4

0001a8c0 <smprActRcvKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprActRcvKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a8c0:	b538      	push	{r3, r4, r5, lr}
  uint8_t   keyDist;

  /* get initiator key distribution */
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
   1a8c2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   1a8c6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
   1a8ca:	460d      	mov	r5, r1

  /* process received key */
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   1a8cc:	4013      	ands	r3, r2
   1a8ce:	684a      	ldr	r2, [r1, #4]
   1a8d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
{
   1a8d2:	4604      	mov	r4, r0
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
   1a8d4:	f000 fcea 	bl	1b2ac <smpProcRcvKey>
   1a8d8:	b900      	cbnz	r0, 1a8dc <smprActRcvKey+0x1c>
  {
    /* no more keys to receive; send ourselves pairing complete msg */
    pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
    smpSmExecute(pCcb, pMsg);
  }
}
   1a8da:	bd38      	pop	{r3, r4, r5, pc}
    pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
   1a8dc:	230e      	movs	r3, #14
   1a8de:	70ab      	strb	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
   1a8e0:	4629      	mov	r1, r5
   1a8e2:	4620      	mov	r0, r4
}
   1a8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSmExecute(pCcb, pMsg);
   1a8e8:	f000 be0e 	b.w	1b508 <smpSmExecute>

0001a8ec <smprScActStoreLescPin>:
 *  \return None.
 */
/*************************************************************************************************/
void smprScActStoreLescPin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   1a8ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a8ee:	785a      	ldrb	r2, [r3, #1]
   1a8f0:	2a03      	cmp	r2, #3
   1a8f2:	d000      	beq.n	1a8f6 <smprScActStoreLescPin+0xa>
   1a8f4:	4770      	bx	lr
{
   1a8f6:	b530      	push	{r4, r5, lr}
   1a8f8:	4604      	mov	r4, r0
  {
    /* Store the pin */
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   1a8fa:	6958      	ldr	r0, [r3, #20]
{
   1a8fc:	b083      	sub	sp, #12
   1a8fe:	460d      	mov	r5, r1
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   1a900:	3020      	adds	r0, #32
   1a902:	490f      	ldr	r1, [pc, #60]	; (1a940 <smprScActStoreLescPin+0x54>)
   1a904:	f7fa fffe 	bl	15904 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
   1a908:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a90a:	490d      	ldr	r1, [pc, #52]	; (1a940 <smprScActStoreLescPin+0x54>)
   1a90c:	6958      	ldr	r0, [r3, #20]
   1a90e:	3030      	adds	r0, #48	; 0x30
   1a910:	f7fa fff8 	bl	15904 <Calc128Cpy>

    if (pMsg->dm.authRsp.authDataLen <= 3)
   1a914:	7d2a      	ldrb	r2, [r5, #20]
   1a916:	2a03      	cmp	r2, #3
   1a918:	d901      	bls.n	1a91e <smprScActStoreLescPin+0x32>
    {
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    }
  }
}
   1a91a:	b003      	add	sp, #12
   1a91c:	bd30      	pop	{r4, r5, pc}
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a91e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a920:	6958      	ldr	r0, [r3, #20]
   1a922:	1d29      	adds	r1, r5, #4
   1a924:	302d      	adds	r0, #45	; 0x2d
   1a926:	9101      	str	r1, [sp, #4]
   1a928:	f7fb f866 	bl	159f8 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a92c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a92e:	7d2a      	ldrb	r2, [r5, #20]
   1a930:	6958      	ldr	r0, [r3, #20]
   1a932:	9901      	ldr	r1, [sp, #4]
   1a934:	303d      	adds	r0, #61	; 0x3d
}
   1a936:	b003      	add	sp, #12
   1a938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1a93c:	f7fb b85c 	b.w	159f8 <WStrReverseCpy>
   1a940:	0002689c 	.word	0x0002689c

0001a944 <smprScActSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a944:	b538      	push	{r3, r4, r5, lr}
   1a946:	4604      	mov	r4, r0
   1a948:	460d      	mov	r5, r1
  /* Execute Common Auth Select actions */
  smpScActAuthSelect(pCcb, pMsg);
   1a94a:	f001 ff2b 	bl	1c7a4 <smpScActAuthSelect>

  /* Send our public key */
  smpScSendPubKey(pCcb, pMsg);
   1a94e:	4629      	mov	r1, r5
   1a950:	4620      	mov	r0, r4
}
   1a952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPubKey(pCcb, pMsg);
   1a956:	f002 bb35 	b.w	1cfc4 <smpScSendPubKey>
   1a95a:	bf00      	nop

0001a95c <smprScActJwncSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a95c:	b538      	push	{r3, r4, r5, lr}
  /* Select Random Na (128-bits) */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1a95e:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1a960:	4604      	mov	r4, r0
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1a962:	6958      	ldr	r0, [r3, #20]
{
   1a964:	460d      	mov	r5, r1
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1a966:	2110      	movs	r1, #16
   1a968:	4408      	add	r0, r1
   1a96a:	f7f7 fa5d 	bl	11e28 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1a96e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a970:	480d      	ldr	r0, [pc, #52]	; (1a9a8 <smprScActJwncSetup+0x4c>)
   1a972:	6959      	ldr	r1, [r3, #20]
   1a974:	2210      	movs	r2, #16
   1a976:	4411      	add	r1, r2
   1a978:	f002 fc34 	bl	1d1e4 <smpLogByteArray>

  /* Set Ra and Rb to zero */
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
   1a97c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a97e:	490b      	ldr	r1, [pc, #44]	; (1a9ac <smprScActJwncSetup+0x50>)
   1a980:	6958      	ldr	r0, [r3, #20]
   1a982:	3020      	adds	r0, #32
   1a984:	f7fa ffbe 	bl	15904 <Calc128Cpy>
  Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   1a988:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a98a:	4908      	ldr	r1, [pc, #32]	; (1a9ac <smprScActJwncSetup+0x50>)
   1a98c:	6958      	ldr	r0, [r3, #20]
   1a98e:	3030      	adds	r0, #48	; 0x30
   1a990:	f7fa ffb8 	bl	15904 <Calc128Cpy>

  /* Next command is a Pair Rand from Initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1a994:	2304      	movs	r3, #4
   1a996:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  /* Perform F4 Calculation of Cb */
  smpScActJwncCalcF4(pCcb, pMsg);
   1a99a:	4629      	mov	r1, r5
   1a99c:	4620      	mov	r0, r4
}
   1a99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncCalcF4(pCcb, pMsg);
   1a9a2:	f001 bf59 	b.w	1c858 <smpScActJwncCalcF4>
   1a9a6:	bf00      	nop
   1a9a8:	00027368 	.word	0x00027368
   1a9ac:	0002689c 	.word	0x0002689c

0001a9b0 <smprScActJwncSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a9b0:	b538      	push	{r3, r4, r5, lr}
   1a9b2:	460c      	mov	r4, r1
   1a9b4:	4605      	mov	r5, r0
  SMP_TRACE_128("JWNC Confirm", pMsg->aes.pCiphertext);
   1a9b6:	6849      	ldr	r1, [r1, #4]
   1a9b8:	4805      	ldr	r0, [pc, #20]	; (1a9d0 <smprScActJwncSendCnf+0x20>)
   1a9ba:	2210      	movs	r2, #16
   1a9bc:	f002 fc12 	bl	1d1e4 <smpLogByteArray>

  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   1a9c0:	6862      	ldr	r2, [r4, #4]
   1a9c2:	4621      	mov	r1, r4
   1a9c4:	4628      	mov	r0, r5
}
   1a9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   1a9ca:	f002 bb7b 	b.w	1d0c4 <smpScSendPairCnf>
   1a9ce:	bf00      	nop
   1a9d0:	00027370 	.word	0x00027370

0001a9d4 <smprScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a9d4:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Na from initiator is in Random Cmd from initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   1a9d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1a9d8:	460d      	mov	r5, r1
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1a9da:	6849      	ldr	r1, [r1, #4]
{
   1a9dc:	4604      	mov	r4, r0
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   1a9de:	3109      	adds	r1, #9
   1a9e0:	6958      	ldr	r0, [r3, #20]
   1a9e2:	2210      	movs	r2, #16
   1a9e4:	f7fb f808 	bl	159f8 <WStrReverseCpy>

  /* Calculate Vb using G2 */
  smpScActJwncCalcG2(pCcb, pMsg);
   1a9e8:	4629      	mov	r1, r5
   1a9ea:	4620      	mov	r0, r4
}
   1a9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncCalcG2(pCcb, pMsg);
   1a9f0:	f001 bf80 	b.w	1c8f4 <smpScActJwncCalcG2>

0001a9f4 <smprScActJwncDisplay>:
*
*  \return None.
*/
/*************************************************************************************************/
void smprScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1a9f4:	b538      	push	{r3, r4, r5, lr}
  /* Next command is a DH Key Check  */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1a9f6:	220d      	movs	r2, #13

  /* Send Pair Rand Nb to the Initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1a9f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1a9fa:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1a9fe:	695a      	ldr	r2, [r3, #20]
{
   1aa00:	4604      	mov	r4, r0
   1aa02:	460d      	mov	r5, r1
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1aa04:	3210      	adds	r2, #16
   1aa06:	f002 fb35 	bl	1d074 <smpScSendRand>

  /* Send Numeric Comparison to application, if applicable */
  smpScActJwncDisplay(pCcb, pMsg);
   1aa0a:	4629      	mov	r1, r5
   1aa0c:	4620      	mov	r0, r4
}
   1aa0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncDisplay(pCcb, pMsg);
   1aa12:	f001 bfa1 	b.w	1c958 <smpScActJwncDisplay>
   1aa16:	bf00      	nop

0001aa18 <smprScActPkStoreCnf>:
void smprScActPkStoreCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Store the Cai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   1aa18:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1aa1a:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   1aa1c:	6958      	ldr	r0, [r3, #20]
   1aa1e:	2210      	movs	r2, #16
   1aa20:	3109      	adds	r1, #9
   1aa22:	3050      	adds	r0, #80	; 0x50
   1aa24:	f7fa bfe8 	b.w	159f8 <WStrReverseCpy>

0001aa28 <smprScActPkStoreCnfAndCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkStoreCnfAndCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1aa28:	b570      	push	{r4, r5, r6, lr}
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   1aa2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1aa2c:	4604      	mov	r4, r0
   1aa2e:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   1aa30:	6958      	ldr	r0, [r3, #20]
  uint8_t *pCa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1aa32:	6849      	ldr	r1, [r1, #4]
{
   1aa34:	b084      	sub	sp, #16
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pCa, SMP_CONFIRM_LEN);
   1aa36:	2210      	movs	r2, #16
   1aa38:	3109      	adds	r1, #9
   1aa3a:	3050      	adds	r0, #80	; 0x50
   1aa3c:	f7fa ffdc 	bl	159f8 <WStrReverseCpy>
 */
/*************************************************************************************************/
void smprScActPkCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Get random Nbi */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1aa40:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1aa42:	6958      	ldr	r0, [r3, #20]
   1aa44:	2110      	movs	r1, #16
   1aa46:	4408      	add	r0, r1
   1aa48:	f7f7 f9ee 	bl	11e28 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1aa4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1aa4e:	480f      	ldr	r0, [pc, #60]	; (1aa8c <smprScActPkStoreCnfAndCalcCb+0x64>)
   1aa50:	6959      	ldr	r1, [r3, #20]
   1aa52:	2210      	movs	r2, #16
   1aa54:	4411      	add	r1, r2
   1aa56:	f002 fbc5 	bl	1d1e4 <smpLogByteArray>
  /* Next command is the Pair Random */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;

  /* Cb = f4(PKbx, PKax, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1aa5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1aa5c:	2204      	movs	r2, #4
   1aa5e:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1aa62:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1aa64:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1aa66:	9203      	str	r2, [sp, #12]
  SmpScCalcF4(pCcb, pMsg,
   1aa68:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1aa6a:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   1aa6c:	f002 fb52 	bl	1d114 <smpGetPkBit>
   1aa70:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1aa72:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   1aa74:	4606      	mov	r6, r0
   1aa76:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1aa78:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   1aa7a:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1aa7c:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   1aa7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1aa82:	9401      	str	r4, [sp, #4]
   1aa84:	f002 fa18 	bl	1ceb8 <SmpScCalcF4>
}
   1aa88:	b004      	add	sp, #16
   1aa8a:	bd70      	pop	{r4, r5, r6, pc}
   1aa8c:	00027368 	.word	0x00027368

0001aa90 <smprScActPkStorePinAndCalcCb>:
{
   1aa90:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   1aa92:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1aa94:	785a      	ldrb	r2, [r3, #1]
   1aa96:	2a03      	cmp	r2, #3
{
   1aa98:	b084      	sub	sp, #16
   1aa9a:	4604      	mov	r4, r0
   1aa9c:	460d      	mov	r5, r1
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   1aa9e:	d024      	beq.n	1aaea <smprScActPkStorePinAndCalcCb+0x5a>
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1aaa0:	6958      	ldr	r0, [r3, #20]
   1aaa2:	2110      	movs	r1, #16
   1aaa4:	4408      	add	r0, r1
   1aaa6:	f7f7 f9bf 	bl	11e28 <SecRand>
  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1aaaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1aaac:	481e      	ldr	r0, [pc, #120]	; (1ab28 <smprScActPkStorePinAndCalcCb+0x98>)
   1aaae:	6959      	ldr	r1, [r3, #20]
   1aab0:	2210      	movs	r2, #16
   1aab2:	4411      	add	r1, r2
   1aab4:	f002 fb96 	bl	1d1e4 <smpLogByteArray>
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1aab8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1aaba:	2204      	movs	r2, #4
   1aabc:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1aac0:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1aac2:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1aac4:	9203      	str	r2, [sp, #12]
  SmpScCalcF4(pCcb, pMsg,
   1aac6:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1aac8:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   1aaca:	f002 fb23 	bl	1d114 <smpGetPkBit>
   1aace:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1aad0:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   1aad2:	4606      	mov	r6, r0
   1aad4:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1aad6:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   1aad8:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1aada:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   1aadc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1aae0:	9401      	str	r4, [sp, #4]
   1aae2:	f002 f9e9 	bl	1ceb8 <SmpScCalcF4>
}
   1aae6:	b004      	add	sp, #16
   1aae8:	bd70      	pop	{r4, r5, r6, pc}
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
   1aaea:	6958      	ldr	r0, [r3, #20]
   1aaec:	490f      	ldr	r1, [pc, #60]	; (1ab2c <smprScActPkStorePinAndCalcCb+0x9c>)
   1aaee:	3020      	adds	r0, #32
   1aaf0:	f7fa ff08 	bl	15904 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
   1aaf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1aaf6:	490d      	ldr	r1, [pc, #52]	; (1ab2c <smprScActPkStorePinAndCalcCb+0x9c>)
   1aaf8:	6958      	ldr	r0, [r3, #20]
   1aafa:	3030      	adds	r0, #48	; 0x30
   1aafc:	f7fa ff02 	bl	15904 <Calc128Cpy>
    if (pMsg->dm.authRsp.authDataLen <= 3)
   1ab00:	7d2a      	ldrb	r2, [r5, #20]
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1ab02:	6c63      	ldr	r3, [r4, #68]	; 0x44
    if (pMsg->dm.authRsp.authDataLen <= 3)
   1ab04:	2a03      	cmp	r2, #3
   1ab06:	d8cb      	bhi.n	1aaa0 <smprScActPkStorePinAndCalcCb+0x10>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1ab08:	6958      	ldr	r0, [r3, #20]
   1ab0a:	1d29      	adds	r1, r5, #4
   1ab0c:	302d      	adds	r0, #45	; 0x2d
   1ab0e:	9102      	str	r1, [sp, #8]
   1ab10:	f7fa ff72 	bl	159f8 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1ab14:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ab16:	7d2a      	ldrb	r2, [r5, #20]
   1ab18:	6958      	ldr	r0, [r3, #20]
   1ab1a:	9902      	ldr	r1, [sp, #8]
   1ab1c:	303d      	adds	r0, #61	; 0x3d
   1ab1e:	f7fa ff6b 	bl	159f8 <WStrReverseCpy>
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1ab22:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ab24:	e7bc      	b.n	1aaa0 <smprScActPkStorePinAndCalcCb+0x10>
   1ab26:	bf00      	nop
   1ab28:	00027368 	.word	0x00027368
   1ab2c:	0002689c 	.word	0x0002689c

0001ab30 <smprScActPkCalcCb>:
{
   1ab30:	b570      	push	{r4, r5, r6, lr}
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1ab32:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1ab34:	4604      	mov	r4, r0
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1ab36:	6958      	ldr	r0, [r3, #20]
{
   1ab38:	460d      	mov	r5, r1
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1ab3a:	2110      	movs	r1, #16
{
   1ab3c:	b084      	sub	sp, #16
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1ab3e:	4408      	add	r0, r1
   1ab40:	f7f7 f972 	bl	11e28 <SecRand>
  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1ab44:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ab46:	480f      	ldr	r0, [pc, #60]	; (1ab84 <smprScActPkCalcCb+0x54>)
   1ab48:	6959      	ldr	r1, [r3, #20]
   1ab4a:	2210      	movs	r2, #16
   1ab4c:	4411      	add	r1, r2
   1ab4e:	f002 fb49 	bl	1d1e4 <smpLogByteArray>
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1ab52:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1ab54:	2204      	movs	r2, #4
   1ab56:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1ab5a:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1ab5c:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1ab5e:	9203      	str	r2, [sp, #12]
  SmpScCalcF4(pCcb, pMsg,
   1ab60:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1ab62:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   1ab64:	f002 fad6 	bl	1d114 <smpGetPkBit>
   1ab68:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1ab6a:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   1ab6c:	4606      	mov	r6, r0
   1ab6e:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1ab70:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
   1ab72:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
   1ab74:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
   1ab76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1ab7a:	9401      	str	r4, [sp, #4]
   1ab7c:	f002 f99c 	bl	1ceb8 <SmpScCalcF4>
}
   1ab80:	b004      	add	sp, #16
   1ab82:	bd70      	pop	{r4, r5, r6, pc}
   1ab84:	00027368 	.word	0x00027368

0001ab88 <smprScActPkSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ab88:	b538      	push	{r3, r4, r5, lr}
   1ab8a:	460c      	mov	r4, r1
   1ab8c:	4605      	mov	r5, r0
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);
   1ab8e:	6849      	ldr	r1, [r1, #4]
   1ab90:	4805      	ldr	r0, [pc, #20]	; (1aba8 <smprScActPkSendCnf+0x20>)
   1ab92:	2210      	movs	r2, #16
   1ab94:	f002 fb26 	bl	1d1e4 <smpLogByteArray>

  /* Send the Cbi to the peer */
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   1ab98:	6862      	ldr	r2, [r4, #4]
   1ab9a:	4621      	mov	r1, r4
   1ab9c:	4628      	mov	r0, r5
}
   1ab9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
   1aba2:	f002 ba8f 	b.w	1d0c4 <smpScSendPairCnf>
   1aba6:	bf00      	nop
   1aba8:	00026eb8 	.word	0x00026eb8

0001abac <smprScActPkCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1abac:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Copy the Nai from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   1abae:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1abb0:	460d      	mov	r5, r1
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1abb2:	6849      	ldr	r1, [r1, #4]
{
   1abb4:	4604      	mov	r4, r0
   1abb6:	b084      	sub	sp, #16
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_RAND_LEN);
   1abb8:	6958      	ldr	r0, [r3, #20]
   1abba:	3109      	adds	r1, #9
   1abbc:	2210      	movs	r2, #16
   1abbe:	f7fa ff1b 	bl	159f8 <WStrReverseCpy>

  /* Cai = f4(PKax, PKbx, Nbi, Rbi) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1abc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   1abc4:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1abc6:	689a      	ldr	r2, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1abc8:	68db      	ldr	r3, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1abca:	9203      	str	r2, [sp, #12]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1abcc:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
   1abce:	f002 faa1 	bl	1d114 <smpGetPkBit>
   1abd2:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Na_Ea);
   1abd4:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
   1abd6:	4606      	mov	r6, r0
   1abd8:	4620      	mov	r0, r4
   1abda:	696c      	ldr	r4, [r5, #20]
   1abdc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1abe0:	e9cd 6400 	strd	r6, r4, [sp]
   1abe4:	f002 f968 	bl	1ceb8 <SmpScCalcF4>
}
   1abe8:	b004      	add	sp, #16
   1abea:	bd70      	pop	{r4, r5, r6, pc}

0001abec <smprScActPkSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActPkSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1abec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1abee:	4604      	mov	r4, r0
   1abf0:	b083      	sub	sp, #12
  SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   1abf2:	481e      	ldr	r0, [pc, #120]	; (1ac6c <smprScActPkSendRand+0x80>)
{
   1abf4:	460d      	mov	r5, r1
  SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   1abf6:	2210      	movs	r2, #16
   1abf8:	6849      	ldr	r1, [r1, #4]
   1abfa:	f002 faf3 	bl	1d1e4 <smpLogByteArray>
  SMP_TRACE_128("Ca Peer", pCcb->pScCcb->pScratch->PeerCa_Ea);
   1abfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ac00:	481b      	ldr	r0, [pc, #108]	; (1ac70 <smprScActPkSendRand+0x84>)
   1ac02:	6959      	ldr	r1, [r3, #20]
   1ac04:	2210      	movs	r2, #16
   1ac06:	3150      	adds	r1, #80	; 0x50
   1ac08:	f002 faec 	bl	1d1e4 <smpLogByteArray>

  /* Verify the Calculated Cai to previously received Cai */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_RAND_LEN))
   1ac0c:	6c66      	ldr	r6, [r4, #68]	; 0x44
   1ac0e:	6869      	ldr	r1, [r5, #4]
   1ac10:	6977      	ldr	r7, [r6, #20]
   1ac12:	2210      	movs	r2, #16
   1ac14:	f107 0050 	add.w	r0, r7, #80	; 0x50
   1ac18:	f008 fb5e 	bl	232d8 <memcmp>
   1ac1c:	b9f8      	cbnz	r0, 1ac5e <smprScActPkSendRand+0x72>
  else
  {
     wsfMsgHdr_t hdr;

    /* Increment the bit position */
    if (++pCcb->pScCcb->pkPos >= SMP_PK_BIT_COUNT)
   1ac1e:	78f3      	ldrb	r3, [r6, #3]
   1ac20:	3301      	adds	r3, #1
   1ac22:	b2db      	uxtb	r3, r3
   1ac24:	2b13      	cmp	r3, #19
   1ac26:	70f3      	strb	r3, [r6, #3]
   1ac28:	d90c      	bls.n	1ac44 <smprScActPkSendRand+0x58>
    {
      hdr.event = SMP_MSG_INT_PK_CMPL;
   1ac2a:	231b      	movs	r3, #27
   1ac2c:	f88d 3006 	strb.w	r3, [sp, #6]
      /* Send the Nbi */
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
    }

    /* Post an event to move to the next passkey confirm or complete the process */
    hdr.param = pCcb->connId;
   1ac30:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1ac34:	f8ad 3004 	strh.w	r3, [sp, #4]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ac38:	a901      	add	r1, sp, #4
   1ac3a:	4620      	mov	r0, r4
   1ac3c:	f000 fc64 	bl	1b508 <smpSmExecute>
  }
}
   1ac40:	b003      	add	sp, #12
   1ac42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1ac44:	2203      	movs	r2, #3
      hdr.event = SMP_MSG_INT_PK_NEXT;
   1ac46:	231a      	movs	r3, #26
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1ac48:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1ac4c:	4629      	mov	r1, r5
   1ac4e:	f107 0210 	add.w	r2, r7, #16
   1ac52:	4620      	mov	r0, r4
      hdr.event = SMP_MSG_INT_PK_NEXT;
   1ac54:	f88d 3006 	strb.w	r3, [sp, #6]
      smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1ac58:	f002 fa0c 	bl	1d074 <smpScSendRand>
   1ac5c:	e7e8      	b.n	1ac30 <smprScActPkSendRand+0x44>
    smpScFailWithReattempt(pCcb);
   1ac5e:	4620      	mov	r0, r4
}
   1ac60:	b003      	add	sp, #12
   1ac62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    smpScFailWithReattempt(pCcb);
   1ac66:	f002 ba8d 	b.w	1d184 <smpScFailWithReattempt>
   1ac6a:	bf00      	nop
   1ac6c:	00027380 	.word	0x00027380
   1ac70:	00027384 	.word	0x00027384

0001ac74 <smprScActOobSetup>:
 */
/*************************************************************************************************/
void smprScActOobSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* The next command is the Pair Rand from the initiator */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
   1ac74:	2304      	movs	r3, #4
   1ac76:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
   1ac7a:	4770      	bx	lr

0001ac7c <smprScActOobCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ac7c:	b530      	push	{r4, r5, lr}
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Copy the Na from the initiator */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_CONFIRM_LEN);
   1ac7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1ac80:	460d      	mov	r5, r1
  uint8_t *pNa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1ac82:	6849      	ldr	r1, [r1, #4]
{
   1ac84:	4604      	mov	r4, r0
   1ac86:	b087      	sub	sp, #28
  WStrReverseCpy(pCcb->pScCcb->pScratch->Na_Ea, pNa, SMP_CONFIRM_LEN);
   1ac88:	6958      	ldr	r0, [r3, #20]
   1ac8a:	2210      	movs	r2, #16
   1ac8c:	3109      	adds	r1, #9
   1ac8e:	f7fa feb3 	bl	159f8 <WStrReverseCpy>

  /* If the peer device's OOB data flag does not indicate remote OOB data has been received,
     clear Rb. */
  if (pCcb->pairReq[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
   1ac92:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1ac96:	2b01      	cmp	r3, #1
   1ac98:	d005      	beq.n	1aca6 <smprScActOobCalcCa+0x2a>
  {
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
   1ac9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ac9c:	4915      	ldr	r1, [pc, #84]	; (1acf4 <smprScActOobCalcCa+0x78>)
   1ac9e:	6958      	ldr	r0, [r3, #20]
   1aca0:	3030      	adds	r0, #48	; 0x30
   1aca2:	f7fa fe2f 	bl	15904 <Calc128Cpy>
  }

  /* If we indicated the presence of remote OOB data has been received, calculate Ca. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1aca6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1acaa:	2b01      	cmp	r3, #1
  {
    /* Calculate Ca using Toolkit function F4 */
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1acac:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1acae:	d013      	beq.n	1acd8 <smprScActOobCalcCa+0x5c>
  else
  {
    /* Simulate the ca calculation is complete and clear ra */
    secCmacMsg_t msg;

    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*)calc128Zeros);
   1acb0:	6958      	ldr	r0, [r3, #20]
   1acb2:	4910      	ldr	r1, [pc, #64]	; (1acf4 <smprScActOobCalcCa+0x78>)
   1acb4:	3020      	adds	r0, #32
   1acb6:	f7fa fe25 	bl	15904 <Calc128Cpy>

    msg.hdr.param = pCcb->connId;
   1acba:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
   1acbe:	f8ad 500c 	strh.w	r5, [sp, #12]
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   1acc2:	221c      	movs	r2, #28
    msg.pPlainText = NULL;
   1acc4:	2300      	movs	r3, #0

    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   1acc6:	a903      	add	r1, sp, #12
   1acc8:	4620      	mov	r0, r4
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
   1acca:	f88d 200e 	strb.w	r2, [sp, #14]
    msg.pPlainText = NULL;
   1acce:	9305      	str	r3, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &msg);
   1acd0:	f000 fc1a 	bl	1b508 <smpSmExecute>
  }
}
   1acd4:	b007      	add	sp, #28
   1acd6:	bd30      	pop	{r4, r5, pc}
                0, pCcb->pScCcb->pScratch->Ra);
   1acd8:	695a      	ldr	r2, [r3, #20]
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1acda:	689b      	ldr	r3, [r3, #8]
                0, pCcb->pScCcb->pScratch->Ra);
   1acdc:	3220      	adds	r2, #32
    SmpScCalcF4(pCcb, pMsg,
   1acde:	2000      	movs	r0, #0
   1ace0:	e9cd 0200 	strd	r0, r2, [sp]
   1ace4:	4629      	mov	r1, r5
   1ace6:	461a      	mov	r2, r3
   1ace8:	4620      	mov	r0, r4
   1acea:	f002 f8e5 	bl	1ceb8 <SmpScCalcF4>
}
   1acee:	b007      	add	sp, #28
   1acf0:	bd30      	pop	{r4, r5, pc}
   1acf2:	bf00      	nop
   1acf4:	0002689c 	.word	0x0002689c

0001acf8 <smprScActOobSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActOobSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1acf8:	b570      	push	{r4, r5, r6, lr}
  /* Only compare Ca if we indicated that we received OOB data. */
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1acfa:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1acfe:	2b01      	cmp	r3, #1
{
   1ad00:	4604      	mov	r4, r0
   1ad02:	460d      	mov	r5, r1
  if (pCcb->pairRsp[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
   1ad04:	d018      	beq.n	1ad38 <smprScActOobSendRand+0x40>

  /* Next command is a DK Key Check from initiator */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;

  /* Get a random Nb */
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1ad06:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1ad08:	695e      	ldr	r6, [r3, #20]
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1ad0a:	230d      	movs	r3, #13
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1ad0c:	2110      	movs	r1, #16
   1ad0e:	1870      	adds	r0, r6, r1
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1ad10:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  SecRand(pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN);
   1ad14:	f7f7 f888 	bl	11e28 <SecRand>

  SMP_TRACE_128("Rand Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1ad18:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ad1a:	4811      	ldr	r0, [pc, #68]	; (1ad60 <smprScActOobSendRand+0x68>)
   1ad1c:	6959      	ldr	r1, [r3, #20]
   1ad1e:	2210      	movs	r2, #16
   1ad20:	4411      	add	r1, r2
   1ad22:	f002 fa5f 	bl	1d1e4 <smpLogByteArray>

  /* Send the rand Nb to the initiator */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1ad26:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ad28:	695a      	ldr	r2, [r3, #20]
   1ad2a:	4629      	mov	r1, r5
   1ad2c:	4620      	mov	r0, r4
   1ad2e:	3210      	adds	r2, #16
}
   1ad30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1ad34:	f002 b99e 	b.w	1d074 <smpScSendRand>
    SMP_TRACE_128("Ca", pMsg->aes.pCiphertext);
   1ad38:	6849      	ldr	r1, [r1, #4]
   1ad3a:	480a      	ldr	r0, [pc, #40]	; (1ad64 <smprScActOobSendRand+0x6c>)
   1ad3c:	2210      	movs	r2, #16
   1ad3e:	f002 fa51 	bl	1d1e4 <smpLogByteArray>
    if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN))
   1ad42:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ad44:	6869      	ldr	r1, [r5, #4]
   1ad46:	695e      	ldr	r6, [r3, #20]
   1ad48:	2210      	movs	r2, #16
   1ad4a:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1ad4e:	f008 fac3 	bl	232d8 <memcmp>
   1ad52:	2800      	cmp	r0, #0
   1ad54:	d0d9      	beq.n	1ad0a <smprScActOobSendRand+0x12>
      smpScFailWithReattempt(pCcb);
   1ad56:	4620      	mov	r0, r4
}
   1ad58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpScFailWithReattempt(pCcb);
   1ad5c:	f002 ba12 	b.w	1d184 <smpScFailWithReattempt>
   1ad60:	00027368 	.word	0x00027368
   1ad64:	00027380 	.word	0x00027380

0001ad68 <smprScActStoreDhCheck>:
void smprScActStoreDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Signal that not further commands are expected until Key Distribution phase (if applicable) */
  pCcb->nextCmdCode = SMP_CMD_MAX;
   1ad68:	220f      	movs	r2, #15

  /* The Ea from the peer is in the cmd message (copy as MSB First) */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   1ad6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1ad6c:	6849      	ldr	r1, [r1, #4]
  pCcb->nextCmdCode = SMP_CMD_MAX;
   1ad6e:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   1ad72:	6958      	ldr	r0, [r3, #20]
   1ad74:	2210      	movs	r2, #16
   1ad76:	3109      	adds	r1, #9
   1ad78:	3050      	adds	r0, #80	; 0x50
   1ad7a:	f7fa be3d 	b.w	159f8 <WStrReverseCpy>
   1ad7e:	bf00      	nop

0001ad80 <smprScActWaitDhCheck>:
void smprScActWaitDhCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Next command is a DH Key Check */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;

  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   1ad80:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
   1ad82:	f04f 0c0d 	mov.w	ip, #13
   1ad86:	f880 c03f 	strb.w	ip, [r0, #63]	; 0x3f
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_PASSKEY)
   1ad8a:	7853      	ldrb	r3, [r2, #1]
   1ad8c:	2b03      	cmp	r3, #3
   1ad8e:	d000      	beq.n	1ad92 <smprScActWaitDhCheck+0x12>
  {
    /* Send the Pair Rand Nb */
    smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
   1ad90:	4770      	bx	lr
    smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1ad92:	6952      	ldr	r2, [r2, #20]
   1ad94:	3210      	adds	r2, #16
   1ad96:	f002 b96d 	b.w	1d074 <smpScSendRand>
   1ad9a:	bf00      	nop

0001ad9c <smprScActCalcDHKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActCalcDHKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ad9c:	b538      	push	{r3, r4, r5, lr}
  if (pCcb->nextCmdCode == SMP_CMD_DHKEY_CHECK)
   1ad9e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   1ada2:	2b0d      	cmp	r3, #13
{
   1ada4:	4604      	mov	r4, r0
   1ada6:	460d      	mov	r5, r1
  if (pCcb->nextCmdCode == SMP_CMD_DHKEY_CHECK)
   1ada8:	d005      	beq.n	1adb6 <smprScActCalcDHKey+0x1a>
    /* The Ea from the peer is in the cmd message (copy as MSB First) */
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
  }

  /* Complete the calculation */
  smpScActCalcSharedSecret(pCcb, pMsg);
   1adaa:	4629      	mov	r1, r5
   1adac:	4620      	mov	r0, r4
}
   1adae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActCalcSharedSecret(pCcb, pMsg);
   1adb2:	f001 be41 	b.w	1ca38 <smpScActCalcSharedSecret>
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   1adb6:	6c43      	ldr	r3, [r0, #68]	; 0x44
    uint8_t *pEa = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1adb8:	6849      	ldr	r1, [r1, #4]
    WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pEa, SMP_CONFIRM_LEN);
   1adba:	6958      	ldr	r0, [r3, #20]
   1adbc:	3109      	adds	r1, #9
   1adbe:	3050      	adds	r0, #80	; 0x50
   1adc0:	2210      	movs	r2, #16
   1adc2:	f7fa fe19 	bl	159f8 <WStrReverseCpy>
  smpScActCalcSharedSecret(pCcb, pMsg);
   1adc6:	4629      	mov	r1, r5
   1adc8:	4620      	mov	r0, r4
}
   1adca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActCalcSharedSecret(pCcb, pMsg);
   1adce:	f001 be33 	b.w	1ca38 <smpScActCalcSharedSecret>
   1add2:	bf00      	nop

0001add4 <smprScActDHKeyCheckSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smprScActDHKeyCheckSend(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1add4:	b570      	push	{r4, r5, r6, lr}
   1add6:	4604      	mov	r4, r0
   1add8:	b082      	sub	sp, #8
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
   1adda:	2210      	movs	r2, #16
   1addc:	4825      	ldr	r0, [pc, #148]	; (1ae74 <smprScActDHKeyCheckSend+0xa0>)
{
   1adde:	460d      	mov	r5, r1
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
   1ade0:	6849      	ldr	r1, [r1, #4]
   1ade2:	f002 f9ff 	bl	1d1e4 <smpLogByteArray>

  /* The Eb from the CMAC calculation */
  Calc128Cpy(pCcb->pScCcb->pScratch->Nb_Eb, pMsg->aes.pCiphertext);
   1ade6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ade8:	6869      	ldr	r1, [r5, #4]
   1adea:	6958      	ldr	r0, [r3, #20]
   1adec:	3010      	adds	r0, #16
   1adee:	f7fa fd89 	bl	15904 <Calc128Cpy>

  /* Verify the DH Key Check Ea with the value received from the initiator */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCa_Ea, pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN) == 0)
   1adf2:	6c66      	ldr	r6, [r4, #68]	; 0x44
   1adf4:	6971      	ldr	r1, [r6, #20]
   1adf6:	2210      	movs	r2, #16
   1adf8:	f101 0050 	add.w	r0, r1, #80	; 0x50
   1adfc:	f008 fa6c 	bl	232d8 <memcmp>
   1ae00:	b9c8      	cbnz	r0, 1ae36 <smprScActDHKeyCheckSend+0x62>
  {
    /* Adjust key based on max key length */
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
                          pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   1ae02:	69b3      	ldr	r3, [r6, #24]
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1ae04:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   1ae08:	4601      	mov	r1, r0
   1ae0a:	f103 0010 	add.w	r0, r3, #16
    uint8_t  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
   1ae0e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1ae12:	429a      	cmp	r2, r3
   1ae14:	bf28      	it	cs
   1ae16:	461a      	movcs	r2, r3
    memset((pCcb->pScCcb->pLtk->ltk_t + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
   1ae18:	4410      	add	r0, r2
   1ae1a:	f1c2 0210 	rsb	r2, r2, #16
   1ae1e:	f008 fa8d 	bl	2333c <memset>

    /* Send the DH Key check Eb to the initiator */
    smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1ae22:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ae24:	695a      	ldr	r2, [r3, #20]
   1ae26:	4629      	mov	r1, r5
   1ae28:	4620      	mov	r0, r4
   1ae2a:	3210      	adds	r2, #16
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
   1ae2c:	b002      	add	sp, #8
   1ae2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Nb_Eb);
   1ae32:	f002 b8f7 	b.w	1d024 <smpScSendDHKeyCheck>
    pCcb->attempts++;
   1ae36:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    hdr.param = pCcb->connId;
   1ae3a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1ae3e:	f8ad 0004 	strh.w	r0, [sp, #4]
    pCcb->attempts++;
   1ae42:	3301      	adds	r3, #1
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   1ae44:	220b      	movs	r2, #11
    pCcb->attempts++;
   1ae46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hdr.status = SMP_ERR_DH_KEY_CHECK;
   1ae4a:	f88d 2007 	strb.w	r2, [sp, #7]
    SmpDbPairingFailed(pCcb->connId);
   1ae4e:	f000 fd45 	bl	1b8dc <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
   1ae52:	4a09      	ldr	r2, [pc, #36]	; (1ae78 <smprScActDHKeyCheckSend+0xa4>)
   1ae54:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1ae58:	6812      	ldr	r2, [r2, #0]
   1ae5a:	79d2      	ldrb	r2, [r2, #7]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ae5c:	a901      	add	r1, sp, #4
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
   1ae5e:	4293      	cmp	r3, r2
   1ae60:	bf0c      	ite	eq
   1ae62:	230d      	moveq	r3, #13
   1ae64:	231d      	movne	r3, #29
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1ae66:	4620      	mov	r0, r4
   1ae68:	f88d 3006 	strb.w	r3, [sp, #6]
   1ae6c:	f000 fb4c 	bl	1b508 <smpSmExecute>
}
   1ae70:	b002      	add	sp, #8
   1ae72:	bd70      	pop	{r4, r5, r6, pc}
   1ae74:	00026ecc 	.word	0x00026ecc
   1ae78:	10002c30 	.word	0x10002c30

0001ae7c <SmprScInit>:
 */
/*************************************************************************************************/
void SmprScInit(void)
{
  /* set up callback interface */
  smpCb.pSlave = &smprScSmIf;
   1ae7c:	4b02      	ldr	r3, [pc, #8]	; (1ae88 <SmprScInit+0xc>)
   1ae7e:	4a03      	ldr	r2, [pc, #12]	; (1ae8c <SmprScInit+0x10>)
   1ae80:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* General SMP LESC Initialization */
  SmpScInit();
   1ae84:	f002 b870 	b.w	1cf68 <SmpScInit>
   1ae88:	100059e4 	.word	0x100059e4
   1ae8c:	00027464 	.word	0x00027464

0001ae90 <SmprInit>:
 */
/*************************************************************************************************/
void SmprInit(void)
{
  /* set up state machine interface */
  smpCb.pSlave = &smprSmIf;
   1ae90:	4b04      	ldr	r3, [pc, #16]	; (1aea4 <SmprInit+0x14>)
  smpCb.procPairing = smpProcPairing;
   1ae92:	4905      	ldr	r1, [pc, #20]	; (1aea8 <SmprInit+0x18>)
  smpCb.procAuthReq = smpAuthReq;
   1ae94:	4a05      	ldr	r2, [pc, #20]	; (1aeac <SmprInit+0x1c>)
  smpCb.pSlave = &smprSmIf;
   1ae96:	4806      	ldr	r0, [pc, #24]	; (1aeb0 <SmprInit+0x20>)
   1ae98:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
  smpCb.procAuthReq = smpAuthReq;
   1ae9c:	e9c3 1239 	strd	r1, r2, [r3, #228]	; 0xe4
}
   1aea0:	4770      	bx	lr
   1aea2:	bf00      	nop
   1aea4:	100059e4 	.word	0x100059e4
   1aea8:	0001b57d 	.word	0x0001b57d
   1aeac:	0001b699 	.word	0x0001b699
   1aeb0:	00027748 	.word	0x00027748

0001aeb4 <smpStartRspTimer>:
 */
/*************************************************************************************************/
void smpStartRspTimer(smpCcb_t *pCcb)
{
  /* start smp response timer */
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   1aeb4:	f24e 130f 	movw	r3, #57615	; 0xe10f
   1aeb8:	8143      	strh	r3, [r0, #10]
  pCcb->rspTimer.msg.status = SMP_ERR_TIMEOUT;
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   1aeba:	211e      	movs	r1, #30
   1aebc:	f003 bac6 	b.w	1e44c <WsfTimerStartSec>

0001aec0 <smpActNone>:
 */
/*************************************************************************************************/
void smpActNone(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  return;
}
   1aec0:	4770      	bx	lr
   1aec2:	bf00      	nop

0001aec4 <smpActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1aec4:	b510      	push	{r4, lr}
   1aec6:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
   1aec8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   1aeca:	b118      	cbz	r0, 1aed4 <smpActCleanup+0x10>
    WsfBufFree(pCcb->pScr);
   1aecc:	f003 f834 	bl	1df38 <WsfBufFree>
    pCcb->pScr = NULL;
   1aed0:	2300      	movs	r3, #0
   1aed2:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1aed4:	4620      	mov	r0, r4
   1aed6:	f003 fb3f 	bl	1e558 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1aeda:	f104 0010 	add.w	r0, r4, #16
   1aede:	f003 fb3b 	bl	1e558 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1aee2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
  pCcb->secReq = FALSE;
   1aee6:	2300      	movs	r3, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1aee8:	429a      	cmp	r2, r3
   1aeea:	bf14      	ite	ne
   1aeec:	220b      	movne	r2, #11
   1aeee:	2201      	moveq	r2, #1
  pCcb->secReq = FALSE;
   1aef0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1aef4:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   1aef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  smpCleanup(pCcb);
}
   1aefc:	bd10      	pop	{r4, pc}
   1aefe:	bf00      	nop

0001af00 <smpSendPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPairingFailed(smpCcb_t *pCcb, uint8_t reason)
{
   1af00:	b538      	push	{r3, r4, r5, lr}
   1af02:	4604      	mov	r4, r0
  uint8_t *pPacket;
  uint8_t *p;

  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1af04:	200a      	movs	r0, #10
{
   1af06:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1af08:	f001 f916 	bl	1c138 <smpMsgAlloc>
   1af0c:	b140      	cbz	r0, 1af20 <smpSendPairingFailed+0x20>
  {
    p = pPacket + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   1af0e:	2305      	movs	r3, #5
   1af10:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
   1af12:	7245      	strb	r5, [r0, #9]
   1af14:	4601      	mov	r1, r0

    smpSendPkt(pCcb, pPacket);
   1af16:	4620      	mov	r0, r4
  }
}
   1af18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPacket);
   1af1c:	f001 b8ec 	b.w	1c0f8 <smpSendPkt>
}
   1af20:	bd38      	pop	{r3, r4, r5, pc}
   1af22:	bf00      	nop

0001af24 <smpActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1af24:	b538      	push	{r3, r4, r5, lr}
   1af26:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
   1af28:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
   1af2a:	460d      	mov	r5, r1
  if (pCcb->pScr != NULL)
   1af2c:	b118      	cbz	r0, 1af36 <smpActPairingFailed+0x12>
    WsfBufFree(pCcb->pScr);
   1af2e:	f003 f803 	bl	1df38 <WsfBufFree>
    pCcb->pScr = NULL;
   1af32:	2300      	movs	r3, #0
   1af34:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1af36:	4620      	mov	r0, r4
   1af38:	f003 fb0e 	bl	1e558 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1af3c:	f104 0010 	add.w	r0, r4, #16
   1af40:	f003 fb0a 	bl	1e558 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1af44:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  /* clean up */
  smpCleanup(pCcb);

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1af48:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   1af4c:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1af4e:	4293      	cmp	r3, r2
   1af50:	bf14      	ite	ne
   1af52:	230b      	movne	r3, #11
   1af54:	2301      	moveq	r3, #1
   1af56:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
   1af5a:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
   1af5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1af62:	2101      	movs	r1, #1
   1af64:	f7f2 fa54 	bl	d410 <DmConnSetIdle>

  /* notify DM of pairing failure */
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1af68:	232b      	movs	r3, #43	; 0x2b
   1af6a:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1af6c:	4628      	mov	r0, r5
}
   1af6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1af72:	f7f3 bc55 	b.w	e820 <DmSmpCbackExec>
   1af76:	bf00      	nop

0001af78 <smpActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1af78:	b570      	push	{r4, r5, r6, lr}
   1af7a:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1af7c:	200a      	movs	r0, #10
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   1af7e:	78ce      	ldrb	r6, [r1, #3]
{
   1af80:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1af82:	f001 f8d9 	bl	1c138 <smpMsgAlloc>
   1af86:	b130      	cbz	r0, 1af96 <smpActPairingCancel+0x1e>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   1af88:	2305      	movs	r3, #5
   1af8a:	4601      	mov	r1, r0
   1af8c:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
   1af8e:	7246      	strb	r6, [r0, #9]
    smpSendPkt(pCcb, pPacket);
   1af90:	4620      	mov	r0, r4
   1af92:	f001 f8b1 	bl	1c0f8 <smpSendPkt>
  if (pCcb->pScr != NULL)
   1af96:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1af98:	b118      	cbz	r0, 1afa2 <smpActPairingCancel+0x2a>
    WsfBufFree(pCcb->pScr);
   1af9a:	f002 ffcd 	bl	1df38 <WsfBufFree>
    pCcb->pScr = NULL;
   1af9e:	2300      	movs	r3, #0
   1afa0:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1afa2:	4620      	mov	r0, r4
   1afa4:	f003 fad8 	bl	1e558 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1afa8:	f104 0010 	add.w	r0, r4, #16
   1afac:	f003 fad4 	bl	1e558 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1afb0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1afb4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   1afb8:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1afba:	4293      	cmp	r3, r2
   1afbc:	bf14      	ite	ne
   1afbe:	230b      	movne	r3, #11
   1afc0:	2301      	moveq	r3, #1
   1afc2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
   1afc6:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
   1afca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1afce:	2101      	movs	r1, #1
   1afd0:	f7f2 fa1e 	bl	d410 <DmConnSetIdle>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1afd4:	232b      	movs	r3, #43	; 0x2b
   1afd6:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1afd8:	4628      	mov	r0, r5

  smpActPairingFailed(pCcb, pMsg);
}
   1afda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1afde:	f7f3 bc1f 	b.w	e820 <DmSmpCbackExec>
   1afe2:	bf00      	nop

0001afe4 <smpActStorePin>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActStorePin(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1afe4:	b538      	push	{r3, r4, r5, lr}
   1afe6:	460c      	mov	r4, r1
  /* copy authentication data to scratchpad */
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1afe8:	7d0a      	ldrb	r2, [r1, #20]
{
   1afea:	4605      	mov	r5, r0
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1afec:	3104      	adds	r1, #4
   1afee:	6b00      	ldr	r0, [r0, #48]	; 0x30
   1aff0:	f7f1 f886 	bl	c100 <memcpy>

  /* zero out unused pin data */
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
   1aff4:	7d23      	ldrb	r3, [r4, #20]
   1aff6:	2b03      	cmp	r3, #3
   1aff8:	d000      	beq.n	1affc <smpActStorePin+0x18>
  {
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
  }
}
   1affa:	bd38      	pop	{r3, r4, r5, pc}
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
   1affc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1affe:	2300      	movs	r3, #0
   1b000:	f8c2 3003 	str.w	r3, [r2, #3]
   1b004:	f8c2 3007 	str.w	r3, [r2, #7]
   1b008:	f8c2 300b 	str.w	r3, [r2, #11]
   1b00c:	73d3      	strb	r3, [r2, #15]
}
   1b00e:	bd38      	pop	{r3, r4, r5, pc}

0001b010 <smpActPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b010:	b538      	push	{r3, r4, r5, lr}
   1b012:	460d      	mov	r5, r1
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1b014:	7d0a      	ldrb	r2, [r1, #20]
{
   1b016:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
   1b018:	3104      	adds	r1, #4
   1b01a:	6b00      	ldr	r0, [r0, #48]	; 0x30
   1b01c:	f7f1 f870 	bl	c100 <memcpy>
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
   1b020:	7d2b      	ldrb	r3, [r5, #20]
   1b022:	2b03      	cmp	r3, #3
   1b024:	d00c      	beq.n	1b040 <smpActPairCnfCalc1+0x30>
  /* store authentication data */
  smpActStorePin(pCcb, pMsg);

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
   1b026:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1b028:	2110      	movs	r1, #16
   1b02a:	3030      	adds	r0, #48	; 0x30
   1b02c:	f7f6 fefc 	bl	11e28 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1b030:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1b032:	4620      	mov	r0, r4
   1b034:	f101 0230 	add.w	r2, r1, #48	; 0x30
}
   1b038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
   1b03c:	f000 be70 	b.w	1bd20 <smpCalcC1Part1>
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
   1b040:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1b042:	2300      	movs	r3, #0
   1b044:	f8c2 3003 	str.w	r3, [r2, #3]
   1b048:	f8c2 3007 	str.w	r3, [r2, #7]
   1b04c:	f8c2 300b 	str.w	r3, [r2, #11]
   1b050:	73d3      	strb	r3, [r2, #15]
   1b052:	e7e8      	b.n	1b026 <smpActPairCnfCalc1+0x16>

0001b054 <smpActPairCnfCalc2>:
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
   1b054:	684a      	ldr	r2, [r1, #4]
   1b056:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1b058:	f000 bf06 	b.w	1be68 <smpCalcC1Part2>

0001b05c <smpActSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b05c:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set next expected packet */
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
   1b05e:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
   1b062:	2d00      	cmp	r5, #0
{
   1b064:	460b      	mov	r3, r1
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   1b066:	f24e 120f 	movw	r2, #57615	; 0xe10f
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
   1b06a:	bf14      	ite	ne
   1b06c:	2103      	movne	r1, #3
   1b06e:	2104      	moveq	r1, #4
   1b070:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
   1b074:	8142      	strh	r2, [r0, #10]
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   1b076:	211e      	movs	r1, #30
{
   1b078:	4604      	mov	r4, r0
   1b07a:	461d      	mov	r5, r3
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
   1b07c:	f003 f9e6 	bl	1e44c <WsfTimerStartSec>

  /* start smp response timer */
  smpStartRspTimer(pCcb);

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1b080:	2019      	movs	r0, #25
   1b082:	f001 f859 	bl	1c138 <smpMsgAlloc>
   1b086:	b1a8      	cbz	r0, 1b0b4 <smpActSendPairCnf+0x58>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   1b088:	2203      	movs	r2, #3
   1b08a:	7202      	strb	r2, [r0, #8]
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
   1b08c:	686a      	ldr	r2, [r5, #4]
   1b08e:	4603      	mov	r3, r0
   1b090:	6815      	ldr	r5, [r2, #0]
   1b092:	6891      	ldr	r1, [r2, #8]

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1b094:	4620      	mov	r0, r4
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
   1b096:	6854      	ldr	r4, [r2, #4]
   1b098:	68d2      	ldr	r2, [r2, #12]
   1b09a:	f8c3 2015 	str.w	r2, [r3, #21]
   1b09e:	f8c3 1011 	str.w	r1, [r3, #17]
   1b0a2:	f8c3 5009 	str.w	r5, [r3, #9]
   1b0a6:	f8c3 400d 	str.w	r4, [r3, #13]
    smpSendPkt(pCcb, pPkt);
   1b0aa:	4619      	mov	r1, r3
  }
}
   1b0ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
   1b0b0:	f001 b822 	b.w	1c0f8 <smpSendPkt>
}
   1b0b4:	bd38      	pop	{r3, r4, r5, pc}
   1b0b6:	bf00      	nop

0001b0b8 <smpActPairCnfVerCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b0b8:	b530      	push	{r4, r5, lr}
  uint8_t   *p;

  /* go to start of received pairing random packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
   1b0ba:	684a      	ldr	r2, [r1, #4]

  /* store random value */
  memcpy(pCcb->pScr->buf.b2, p, SMP_RAND_LEN);
   1b0bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1b0be:	f8d2 4009 	ldr.w	r4, [r2, #9]
   1b0c2:	f8d2 e00d 	ldr.w	lr, [r2, #13]
   1b0c6:	f8d2 5015 	ldr.w	r5, [r2, #21]
   1b0ca:	f8d2 c011 	ldr.w	ip, [r2, #17]
   1b0ce:	f8c1 c018 	str.w	ip, [r1, #24]
   1b0d2:	61cd      	str	r5, [r1, #28]
   1b0d4:	610c      	str	r4, [r1, #16]
   1b0d6:	f8c1 e014 	str.w	lr, [r1, #20]

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
}
   1b0da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
   1b0de:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1b0e0:	3209      	adds	r2, #9
   1b0e2:	f000 be1d 	b.w	1bd20 <smpCalcC1Part1>
   1b0e6:	bf00      	nop

0001b0e8 <smpActPairCnfVerCalc2>:
   1b0e8:	684a      	ldr	r2, [r1, #4]
   1b0ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1b0ec:	f000 bebc 	b.w	1be68 <smpCalcC1Part2>

0001b0f0 <smpSendKey>:
 *
 *  \return TRUE if done sending keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpSendKey(smpCcb_t *pCcb, uint8_t keyDist)
{
   1b0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t     *pPkt;
  uint8_t     *p;
  wsfMsgHdr_t *pHdr;

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   1b0f2:	4e6c      	ldr	r6, [pc, #432]	; (1b2a4 <smpSendKey+0x1b4>)
   1b0f4:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
{
   1b0f8:	b08b      	sub	sp, #44	; 0x2c
   1b0fa:	4605      	mov	r5, r0
   1b0fc:	460c      	mov	r4, r1
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   1b0fe:	b11b      	cbz	r3, 1b108 <smpSendKey+0x18>
   1b100:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b102:	781b      	ldrb	r3, [r3, #0]
   1b104:	2b00      	cmp	r3, #0
   1b106:	d156      	bne.n	1b1b6 <smpSendKey+0xc6>

    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
  }

  /* check if we're done sending keys */
  if ((keyDist == 0) ||
   1b108:	2c00      	cmp	r4, #0
   1b10a:	d050      	beq.n	1b1ae <smpSendKey+0xbe>
   1b10c:	2c01      	cmp	r4, #1
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   1b10e:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
  if ((keyDist == 0) ||
   1b112:	d048      	beq.n	1b1a6 <smpSendKey+0xb6>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   1b114:	2c03      	cmp	r4, #3
   1b116:	d948      	bls.n	1b1aa <smpSendKey+0xba>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   1b118:	2b0a      	cmp	r3, #10
   1b11a:	d048      	beq.n	1b1ae <smpSendKey+0xbe>
  {
      return TRUE;
  }

  /* if flow disabled return */
  if (pCcb->flowDisabled)
   1b11c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1b120:	2b00      	cmp	r3, #0
   1b122:	d173      	bne.n	1b20c <smpSendKey+0x11c>
  {
    return FALSE;
  }

  /* allocate packet buffer for largest packet size */
  if ((pPkt = smpMsgAlloc(SMP_ENC_INFO_LEN + L2C_PAYLOAD_START)) != NULL)
   1b124:	2019      	movs	r0, #25
   1b126:	f001 f807 	bl	1c138 <smpMsgAlloc>
   1b12a:	4607      	mov	r7, r0
   1b12c:	2800      	cmp	r0, #0
   1b12e:	d06d      	beq.n	1b20c <smpSendKey+0x11c>
  {
    p = pPkt + L2C_PAYLOAD_START;

    /* determine next key to send */
    if (pCcb->lastSentKey == 0 && (keyDist & SMP_KEY_DIST_ENC))
   1b130:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
   1b134:	2b00      	cmp	r3, #0
   1b136:	d16d      	bne.n	1b214 <smpSendKey+0x124>
   1b138:	07e1      	lsls	r1, r4, #31
   1b13a:	f100 808f 	bmi.w	1b25c <smpSendKey+0x16c>
      /* send second part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
    }
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   1b13e:	07a2      	lsls	r2, r4, #30
   1b140:	f100 8099 	bmi.w	1b276 <smpSendKey+0x186>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
      UINT8_TO_BSTREAM(p, DM_ADDR_PUBLIC);
      BDA_TO_BSTREAM(p, HciGetBdAddr());

    }
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1b144:	0762      	lsls	r2, r4, #29
   1b146:	f140 80a1 	bpl.w	1b28c <smpSendKey+0x19c>
   1b14a:	2b09      	cmp	r3, #9
   1b14c:	f200 809e 	bhi.w	1b28c <smpSendKey+0x19c>
   1b150:	f240 2281 	movw	r2, #641	; 0x281
   1b154:	fa22 f303 	lsr.w	r3, r2, r3
   1b158:	07d8      	lsls	r0, r3, #31
   1b15a:	f140 8097 	bpl.w	1b28c <smpSendKey+0x19c>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
              pCcb->lastSentKey == SMP_CMD_MASTER_ID))
    {
      /* send SRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_SIGN_INFO);
   1b15e:	230a      	movs	r3, #10
   1b160:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalCsrk());
   1b162:	f7f3 fbb1 	bl	e8c8 <DmSecGetLocalCsrk>
   1b166:	4601      	mov	r1, r0
   1b168:	f107 0009 	add.w	r0, r7, #9
   1b16c:	f7fa fbca 	bl	15904 <Calc128Cpy>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
      return TRUE;
    }

    /* set last sent key to command code */
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   1b170:	7a3b      	ldrb	r3, [r7, #8]
   1b172:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43

    /* send command packet */
    smpSendPkt(pCcb, pPkt);
   1b176:	4639      	mov	r1, r7
   1b178:	4628      	mov	r0, r5
   1b17a:	f000 ffbd 	bl	1c0f8 <smpSendPkt>

    /* if flow not disabled set up to send next key */
    if (!pCcb->flowDisabled)
   1b17e:	f895 403c 	ldrb.w	r4, [r5, #60]	; 0x3c
   1b182:	2c00      	cmp	r4, #0
   1b184:	d142      	bne.n	1b20c <smpSendKey+0x11c>
    {
      if ((pHdr = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   1b186:	2004      	movs	r0, #4
   1b188:	f002 ff06 	bl	1df98 <WsfMsgAlloc>
   1b18c:	4601      	mov	r1, r0
   1b18e:	2800      	cmp	r0, #0
   1b190:	d03c      	beq.n	1b20c <smpSendKey+0x11c>
      {
        pHdr->event = SMP_MSG_INT_SEND_NEXT_KEY;
   1b192:	230c      	movs	r3, #12
   1b194:	7083      	strb	r3, [r0, #2]
        pHdr->param = pCcb->connId;
   1b196:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1b19a:	8003      	strh	r3, [r0, #0]
        WsfMsgSend(smpCb.handlerId, pHdr);
   1b19c:	f896 00e0 	ldrb.w	r0, [r6, #224]	; 0xe0
   1b1a0:	f002 ff06 	bl	1dfb0 <WsfMsgSend>
   1b1a4:	e004      	b.n	1b1b0 <smpSendKey+0xc0>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
   1b1a6:	2b07      	cmp	r3, #7
   1b1a8:	d002      	beq.n	1b1b0 <smpSendKey+0xc0>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
   1b1aa:	2b09      	cmp	r3, #9
   1b1ac:	d1b4      	bne.n	1b118 <smpSendKey+0x28>
      return TRUE;
   1b1ae:	2401      	movs	r4, #1
      }
    }
  }

  return FALSE;
}
   1b1b0:	4620      	mov	r0, r4
   1b1b2:	b00b      	add	sp, #44	; 0x2c
   1b1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
   1b1b6:	f890 7043 	ldrb.w	r7, [r0, #67]	; 0x43
   1b1ba:	2f00      	cmp	r7, #0
   1b1bc:	d1a4      	bne.n	1b108 <smpSendKey+0x18>
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   1b1be:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1b1c2:	f7f2 f967 	bl	d494 <DmConnRole>
      keyInd.type = DM_KEY_LOCAL_LTK;
   1b1c6:	2800      	cmp	r0, #0
   1b1c8:	bf0c      	ite	eq
   1b1ca:	2302      	moveq	r3, #2
   1b1cc:	2301      	movne	r3, #1
   1b1ce:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    keyInd.hdr.event = DM_SEC_KEY_IND;
   1b1d2:	232f      	movs	r3, #47	; 0x2f
   1b1d4:	f88d 3006 	strb.w	r3, [sp, #6]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   1b1d8:	4628      	mov	r0, r5
    keyInd.hdr.param = pCcb->connId;
   1b1da:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1b1de:	f8ad 3004 	strh.w	r3, [sp, #4]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   1b1e2:	f000 ffcd 	bl	1c180 <smpGetScSecLevel>
    memset(keyInd.keyData.ltk.rand, 0, SMP_RAND8_LEN);
   1b1e6:	e9cd 7706 	strd	r7, r7, [sp, #24]
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   1b1ea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    keyInd.secLevel = smpGetScSecLevel(pCcb);
   1b1ec:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   1b1f0:	6999      	ldr	r1, [r3, #24]
    keyInd.keyData.ltk.ediv = 0;
   1b1f2:	f8ad 7020 	strh.w	r7, [sp, #32]
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
   1b1f6:	3110      	adds	r1, #16
   1b1f8:	a802      	add	r0, sp, #8
   1b1fa:	f7fa fb83 	bl	15904 <Calc128Cpy>
    DmSmpCbackExec((dmEvt_t *)&keyInd);
   1b1fe:	a801      	add	r0, sp, #4
   1b200:	f7f3 fb0e 	bl	e820 <DmSmpCbackExec>
    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
   1b204:	2307      	movs	r3, #7
   1b206:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
   1b20a:	e77d      	b.n	1b108 <smpSendKey+0x18>
    return FALSE;
   1b20c:	2400      	movs	r4, #0
}
   1b20e:	4620      	mov	r0, r4
   1b210:	b00b      	add	sp, #44	; 0x2c
   1b212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pCcb->lastSentKey == SMP_CMD_ENC_INFO)
   1b214:	2b06      	cmp	r3, #6
   1b216:	d010      	beq.n	1b23a <smpSendKey+0x14a>
    else if ((keyDist & SMP_KEY_DIST_ID) &&
   1b218:	07a1      	lsls	r1, r4, #30
   1b21a:	d501      	bpl.n	1b220 <smpSendKey+0x130>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
   1b21c:	2b07      	cmp	r3, #7
   1b21e:	d02a      	beq.n	1b276 <smpSendKey+0x186>
    else if (pCcb->lastSentKey == SMP_CMD_ID_INFO)
   1b220:	2b08      	cmp	r3, #8
   1b222:	d18f      	bne.n	1b144 <smpSendKey+0x54>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
   1b224:	2309      	movs	r3, #9
   1b226:	813b      	strh	r3, [r7, #8]
      BDA_TO_BSTREAM(p, HciGetBdAddr());
   1b228:	f7fc fbb8 	bl	1799c <HciGetBdAddr>
   1b22c:	4601      	mov	r1, r0
   1b22e:	f107 000a 	add.w	r0, r7, #10
   1b232:	f7fa fb43 	bl	158bc <BdaCpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   1b236:	7a3b      	ldrb	r3, [r7, #8]
   1b238:	e79b      	b.n	1b172 <smpSendKey+0x82>
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
   1b23a:	2307      	movs	r3, #7
   1b23c:	7203      	strb	r3, [r0, #8]
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
   1b23e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1b240:	8b92      	ldrh	r2, [r2, #28]
   1b242:	7242      	strb	r2, [r0, #9]
   1b244:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1b246:	8b92      	ldrh	r2, [r2, #28]
   1b248:	0a12      	lsrs	r2, r2, #8
   1b24a:	7282      	strb	r2, [r0, #10]
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
   1b24c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1b24e:	6951      	ldr	r1, [r2, #20]
   1b250:	6992      	ldr	r2, [r2, #24]
   1b252:	f8c0 200f 	str.w	r2, [r0, #15]
   1b256:	f8c0 100b 	str.w	r1, [r0, #11]
   1b25a:	e78a      	b.n	1b172 <smpSendKey+0x82>
      smpGenerateLtk(pCcb);
   1b25c:	4628      	mov	r0, r5
   1b25e:	f000 ff1b 	bl	1c098 <smpGenerateLtk>
      UINT8_TO_BSTREAM(p, SMP_CMD_ENC_INFO);
   1b262:	2306      	movs	r3, #6
   1b264:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
   1b266:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1b268:	f107 0009 	add.w	r0, r7, #9
   1b26c:	3104      	adds	r1, #4
   1b26e:	f7fa fb49 	bl	15904 <Calc128Cpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   1b272:	7a3b      	ldrb	r3, [r7, #8]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
   1b274:	e77d      	b.n	1b172 <smpSendKey+0x82>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_INFO);
   1b276:	2308      	movs	r3, #8
   1b278:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalIrk());
   1b27a:	f7f3 fb2b 	bl	e8d4 <DmSecGetLocalIrk>
   1b27e:	4601      	mov	r1, r0
   1b280:	f107 0009 	add.w	r0, r7, #9
   1b284:	f7fa fb3e 	bl	15904 <Calc128Cpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
   1b288:	7a3b      	ldrb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalIrk());
   1b28a:	e772      	b.n	1b172 <smpSendKey+0x82>
      WsfMsgFree(pPkt);
   1b28c:	4638      	mov	r0, r7
   1b28e:	f002 fe8b 	bl	1dfa8 <WsfMsgFree>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
   1b292:	4621      	mov	r1, r4
   1b294:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
   1b298:	4803      	ldr	r0, [pc, #12]	; (1b2a8 <smpSendKey+0x1b8>)
   1b29a:	f003 f9fd 	bl	1e698 <WsfTrace>
      return TRUE;
   1b29e:	2401      	movs	r4, #1
   1b2a0:	e786      	b.n	1b1b0 <smpSendKey+0xc0>
   1b2a2:	bf00      	nop
   1b2a4:	100059e4 	.word	0x100059e4
   1b2a8:	0002786c 	.word	0x0002786c

0001b2ac <smpProcRcvKey>:
 *
 *  \return TRUE if done receiving keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcRcvKey(smpCcb_t *pCcb, dmSecKeyIndEvt_t *pKeyInd, uint8_t *pBuf, uint8_t keyDist)
{
   1b2ac:	b570      	push	{r4, r5, r6, lr}
  bool_t    done = FALSE;
  uint8_t   cmdCode;

  /* go to start of packet */
  pBuf += L2C_PAYLOAD_START;
  cmdCode = *pBuf++;
   1b2ae:	f892 c008 	ldrb.w	ip, [r2, #8]

  if (cmdCode == SMP_CMD_ENC_INFO)
   1b2b2:	f1bc 0f06 	cmp.w	ip, #6
{
   1b2b6:	460c      	mov	r4, r1
   1b2b8:	4605      	mov	r5, r0
   1b2ba:	461e      	mov	r6, r3
  cmdCode = *pBuf++;
   1b2bc:	f102 0109 	add.w	r1, r2, #9
  if (cmdCode == SMP_CMD_ENC_INFO)
   1b2c0:	d02b      	beq.n	1b31a <smpProcRcvKey+0x6e>
  {
    /* parse encryption information packet */
    Calc128Cpy(pKeyInd->keyData.ltk.key, pBuf);
  }
  else if (cmdCode == SMP_CMD_MASTER_ID)
   1b2c2:	f1bc 0f07 	cmp.w	ip, #7
   1b2c6:	d047      	beq.n	1b358 <smpProcRcvKey+0xac>
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    pKeyInd->type = DM_KEY_PEER_LTK;
    keyIndReady = TRUE;
  }
  else if (cmdCode == SMP_CMD_ID_INFO)
   1b2c8:	f1bc 0f08 	cmp.w	ip, #8
   1b2cc:	d025      	beq.n	1b31a <smpProcRcvKey+0x6e>
  {
    /* parse identity information packet */
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
  }
  else if (cmdCode == SMP_CMD_ID_ADDR_INFO)
   1b2ce:	f1bc 0f09 	cmp.w	ip, #9
   1b2d2:	d030      	beq.n	1b336 <smpProcRcvKey+0x8a>
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
    pKeyInd->type = DM_KEY_IRK;
    keyIndReady = TRUE;
  }
  else if (cmdCode == SMP_CMD_SIGN_INFO)
   1b2d4:	f1bc 0f0a 	cmp.w	ip, #10
   1b2d8:	d055      	beq.n	1b386 <smpProcRcvKey+0xda>
  bool_t    keyIndReady = FALSE;
   1b2da:	2300      	movs	r3, #0
  }

  /* set up to receive next key */

  /* if just got first part of LTK or IRK */
  if (pCcb->nextCmdCode == SMP_CMD_ENC_INFO || pCcb->nextCmdCode == SMP_CMD_ID_INFO)
   1b2dc:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   1b2e0:	2a06      	cmp	r2, #6
   1b2e2:	d00d      	beq.n	1b300 <smpProcRcvKey+0x54>
   1b2e4:	2a08      	cmp	r2, #8
   1b2e6:	d00b      	beq.n	1b300 <smpProcRcvKey+0x54>
  {
    /* wait for second part of LTK or IRK info */
    pCcb->nextCmdCode++;
  }
  /* else if got LTK and need IRK */
  else if ((keyDist & SMP_KEY_DIST_ID) && (pCcb->nextCmdCode == SMP_CMD_MASTER_ID))
   1b2e8:	07b1      	lsls	r1, r6, #30
   1b2ea:	d51b      	bpl.n	1b324 <smpProcRcvKey+0x78>
   1b2ec:	2a07      	cmp	r2, #7
   1b2ee:	d02e      	beq.n	1b34e <smpProcRcvKey+0xa2>
  {
    /* wait for first part of IRK */
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
  }
  /* else if got LTK or IRK and need SRK */
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1b2f0:	0771      	lsls	r1, r6, #29
   1b2f2:	d501      	bpl.n	1b2f8 <smpProcRcvKey+0x4c>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
   1b2f4:	2a09      	cmp	r2, #9
   1b2f6:	d019      	beq.n	1b32c <smpProcRcvKey+0x80>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
  }
  else
  {
    /* done receiving keys */
    done = TRUE;
   1b2f8:	2501      	movs	r5, #1
  }

  /* call callback if key ready */
  if (keyIndReady)
   1b2fa:	b93b      	cbnz	r3, 1b30c <smpProcRcvKey+0x60>
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
  }

  return done;
}
   1b2fc:	4628      	mov	r0, r5
   1b2fe:	bd70      	pop	{r4, r5, r6, pc}
    pCcb->nextCmdCode++;
   1b300:	3201      	adds	r2, #1
   1b302:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
   1b306:	2500      	movs	r5, #0
  if (keyIndReady)
   1b308:	2b00      	cmp	r3, #0
   1b30a:	d0f7      	beq.n	1b2fc <smpProcRcvKey+0x50>
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
   1b30c:	232f      	movs	r3, #47	; 0x2f
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
   1b30e:	4620      	mov	r0, r4
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
   1b310:	70a3      	strb	r3, [r4, #2]
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
   1b312:	f7f3 fa85 	bl	e820 <DmSmpCbackExec>
}
   1b316:	4628      	mov	r0, r5
   1b318:	bd70      	pop	{r4, r5, r6, pc}
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
   1b31a:	1d20      	adds	r0, r4, #4
   1b31c:	f7fa faf2 	bl	15904 <Calc128Cpy>
  bool_t    keyIndReady = FALSE;
   1b320:	2300      	movs	r3, #0
   1b322:	e7db      	b.n	1b2dc <smpProcRcvKey+0x30>
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
   1b324:	0770      	lsls	r0, r6, #29
   1b326:	d5e7      	bpl.n	1b2f8 <smpProcRcvKey+0x4c>
   1b328:	2a07      	cmp	r2, #7
   1b32a:	d1e3      	bne.n	1b2f4 <smpProcRcvKey+0x48>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   1b32c:	220a      	movs	r2, #10
   1b32e:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
   1b332:	2500      	movs	r5, #0
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
   1b334:	e7e1      	b.n	1b2fa <smpProcRcvKey+0x4e>
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
   1b336:	7a53      	ldrb	r3, [r2, #9]
   1b338:	76a3      	strb	r3, [r4, #26]
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
   1b33a:	f102 010a 	add.w	r1, r2, #10
   1b33e:	f104 0014 	add.w	r0, r4, #20
   1b342:	f7fa fabb 	bl	158bc <BdaCpy>
    pKeyInd->type = DM_KEY_IRK;
   1b346:	2304      	movs	r3, #4
   1b348:	77a3      	strb	r3, [r4, #30]
    keyIndReady = TRUE;
   1b34a:	2301      	movs	r3, #1
   1b34c:	e7c6      	b.n	1b2dc <smpProcRcvKey+0x30>
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1b34e:	2208      	movs	r2, #8
   1b350:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
   1b354:	2500      	movs	r5, #0
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
   1b356:	e7d0      	b.n	1b2fa <smpProcRcvKey+0x4e>
    BSTREAM_TO_UINT16(pKeyInd->keyData.ltk.ediv, pBuf);
   1b358:	7a91      	ldrb	r1, [r2, #10]
   1b35a:	7a53      	ldrb	r3, [r2, #9]
   1b35c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1b360:	83a3      	strh	r3, [r4, #28]
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
   1b362:	f8d2 300b 	ldr.w	r3, [r2, #11]
   1b366:	f8d2 200f 	ldr.w	r2, [r2, #15]
   1b36a:	61a2      	str	r2, [r4, #24]
   1b36c:	6163      	str	r3, [r4, #20]
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1b36e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    pKeyInd->type = DM_KEY_PEER_LTK;
   1b372:	2302      	movs	r3, #2
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1b374:	f012 0f04 	tst.w	r2, #4
   1b378:	bf14      	ite	ne
   1b37a:	461a      	movne	r2, r3
   1b37c:	2201      	moveq	r2, #1
    pKeyInd->type = DM_KEY_PEER_LTK;
   1b37e:	77a3      	strb	r3, [r4, #30]
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1b380:	77e2      	strb	r2, [r4, #31]
    keyIndReady = TRUE;
   1b382:	2301      	movs	r3, #1
   1b384:	e7aa      	b.n	1b2dc <smpProcRcvKey+0x30>
    Calc128Cpy(pKeyInd->keyData.csrk.key, pBuf);
   1b386:	1d20      	adds	r0, r4, #4
   1b388:	f7fa fabc 	bl	15904 <Calc128Cpy>
    pKeyInd->type = DM_KEY_CSRK;
   1b38c:	2308      	movs	r3, #8
   1b38e:	77a3      	strb	r3, [r4, #30]
    keyIndReady = TRUE;
   1b390:	2301      	movs	r3, #1
   1b392:	e7a3      	b.n	1b2dc <smpProcRcvKey+0x30>

0001b394 <smpActMaxAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActMaxAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b396:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1b398:	200a      	movs	r0, #10
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   1b39a:	78ce      	ldrb	r6, [r1, #3]
{
   1b39c:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1b39e:	f000 fecb 	bl	1c138 <smpMsgAlloc>
   1b3a2:	b130      	cbz	r0, 1b3b2 <smpActMaxAttempts+0x1e>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   1b3a4:	2305      	movs	r3, #5
   1b3a6:	4601      	mov	r1, r0
   1b3a8:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
   1b3aa:	7246      	strb	r6, [r0, #9]
    smpSendPkt(pCcb, pPacket);
   1b3ac:	4620      	mov	r0, r4
   1b3ae:	f000 fea3 	bl	1c0f8 <smpSendPkt>
  if (pCcb->pScr != NULL)
   1b3b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1b3b4:	b118      	cbz	r0, 1b3be <smpActMaxAttempts+0x2a>
    WsfBufFree(pCcb->pScr);
   1b3b6:	f002 fdbf 	bl	1df38 <WsfBufFree>
    pCcb->pScr = NULL;
   1b3ba:	2300      	movs	r3, #0
   1b3bc:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1b3be:	4620      	mov	r0, r4
  WsfTimerStop(&pCcb->waitTimer);
   1b3c0:	f104 0710 	add.w	r7, r4, #16
  WsfTimerStop(&pCcb->rspTimer);
   1b3c4:	f003 f8c8 	bl	1e558 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1b3c8:	4638      	mov	r0, r7
   1b3ca:	f003 f8c5 	bl	1e558 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1b3ce:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1b3d2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   1b3d6:	2600      	movs	r6, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1b3d8:	42b3      	cmp	r3, r6
   1b3da:	bf14      	ite	ne
   1b3dc:	230b      	movne	r3, #11
   1b3de:	2301      	moveq	r3, #1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1b3e0:	4632      	mov	r2, r6
   1b3e2:	2101      	movs	r1, #1
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1b3e4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
   1b3e8:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
   1b3ec:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1b3f0:	f7f2 f80e 	bl	d410 <DmConnSetIdle>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1b3f4:	232b      	movs	r3, #43	; 0x2b
   1b3f6:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1b3f8:	4628      	mov	r0, r5
   1b3fa:	f7f3 fa11 	bl	e820 <DmSmpCbackExec>

  /* send paring failed packet; note this stops the timer so call this first */
  smpActPairingCancel(pCcb, pMsg);

  /* Check SMP device DB to determine time to wait before pairing can happen again */
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
   1b3fe:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1b402:	f000 fa33 	bl	1b86c <SmpDbMaxAttemptReached>

  /* start wait interval timer */
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1b406:	2310      	movs	r3, #16
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
   1b408:	4601      	mov	r1, r0
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1b40a:	76a3      	strb	r3, [r4, #26]
  WsfTimerStartMs(&pCcb->waitTimer, timeout);
   1b40c:	4638      	mov	r0, r7
   1b40e:	f003 f85f 	bl	1e4d0 <WsfTimerStartMs>

  /* clear attempts count */
  pCcb->attempts = 0;
   1b412:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
}
   1b416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b418 <smpActAttemptRcvd>:
 */
/*************************************************************************************************/
void smpActAttemptRcvd(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* set that attempt was received */
  pCcb->attempts = 1;
   1b418:	2301      	movs	r3, #1
   1b41a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
}
   1b41e:	4770      	bx	lr

0001b420 <smpActNotifyDmAttemptsFailure>:
/*************************************************************************************************/
void smpActNotifyDmAttemptsFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_ATTEMPTS;
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1b420:	f640 132b 	movw	r3, #2347	; 0x92b
{
   1b424:	4608      	mov	r0, r1
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1b426:	804b      	strh	r3, [r1, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1b428:	f7f3 b9fa 	b.w	e820 <DmSmpCbackExec>

0001b42c <smpActNotifyDmRspToFailure>:
/*************************************************************************************************/
void smpActNotifyDmRspToFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_TIMEOUT;
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1b42c:	f24e 132b 	movw	r3, #57643	; 0xe12b
{
   1b430:	4608      	mov	r0, r1
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1b432:	804b      	strh	r3, [r1, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1b434:	f7f3 b9f4 	b.w	e820 <DmSmpCbackExec>

0001b438 <smpActCheckAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCheckAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b438:	b538      	push	{r3, r4, r5, lr}
  /* check if attempt was received */
  if (pCcb->attempts)
   1b43a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1b43e:	b903      	cbnz	r3, 1b442 <smpActCheckAttempts+0xa>
    /* notify DM of pairing failure */
    smpActNotifyDmAttemptsFailure(pCcb, pMsg);

    smpCleanup(pCcb);
  }
}
   1b440:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->attempts = 0;
   1b442:	2300      	movs	r3, #0
   1b444:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    smpSendPairingFailed(pCcb, SMP_ERR_ATTEMPTS);
   1b448:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
   1b44a:	200a      	movs	r0, #10
   1b44c:	460d      	mov	r5, r1
   1b44e:	f000 fe73 	bl	1c138 <smpMsgAlloc>
   1b452:	4601      	mov	r1, r0
   1b454:	b128      	cbz	r0, 1b462 <smpActCheckAttempts+0x2a>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
   1b456:	f640 1305 	movw	r3, #2309	; 0x905
   1b45a:	8103      	strh	r3, [r0, #8]
    smpSendPkt(pCcb, pPacket);
   1b45c:	4620      	mov	r0, r4
   1b45e:	f000 fe4b 	bl	1c0f8 <smpSendPkt>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1b462:	f640 132b 	movw	r3, #2347	; 0x92b
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1b466:	4628      	mov	r0, r5
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
   1b468:	806b      	strh	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
   1b46a:	f7f3 f9d9 	bl	e820 <DmSmpCbackExec>
  if (pCcb->pScr != NULL)
   1b46e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1b470:	b118      	cbz	r0, 1b47a <smpActCheckAttempts+0x42>
    WsfBufFree(pCcb->pScr);
   1b472:	f002 fd61 	bl	1df38 <WsfBufFree>
    pCcb->pScr = NULL;
   1b476:	2300      	movs	r3, #0
   1b478:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1b47a:	4620      	mov	r0, r4
   1b47c:	f003 f86c 	bl	1e558 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1b480:	f104 0010 	add.w	r0, r4, #16
   1b484:	f003 f868 	bl	1e558 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1b488:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
  pCcb->secReq = FALSE;
   1b48c:	2300      	movs	r3, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1b48e:	429a      	cmp	r2, r3
   1b490:	bf14      	ite	ne
   1b492:	220b      	movne	r2, #11
   1b494:	2201      	moveq	r2, #1
  pCcb->secReq = FALSE;
   1b496:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1b49a:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   1b49e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
}
   1b4a2:	bd38      	pop	{r3, r4, r5, pc}

0001b4a4 <smpActPairingCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCmpl(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b4a4:	b510      	push	{r4, lr}
   1b4a6:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
   1b4a8:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
   1b4aa:	b082      	sub	sp, #8
  if (pCcb->pScr != NULL)
   1b4ac:	b118      	cbz	r0, 1b4b6 <smpActPairingCmpl+0x12>
    WsfBufFree(pCcb->pScr);
   1b4ae:	f002 fd43 	bl	1df38 <WsfBufFree>
    pCcb->pScr = NULL;
   1b4b2:	2300      	movs	r3, #0
   1b4b4:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
   1b4b6:	4620      	mov	r0, r4
   1b4b8:	f003 f84e 	bl	1e558 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
   1b4bc:	f104 0010 	add.w	r0, r4, #16
   1b4c0:	f003 f84a 	bl	1e558 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1b4c4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  dmSecPairCmplIndEvt_t pairCmpl;

  smpCleanup(pCcb);

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1b4c8:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
   1b4cc:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1b4ce:	4293      	cmp	r3, r2
   1b4d0:	bf14      	ite	ne
   1b4d2:	230b      	movne	r3, #11
   1b4d4:	2301      	moveq	r3, #1
  pCcb->secReq = FALSE;
   1b4d6:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
   1b4da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
   1b4de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
   1b4e2:	2101      	movs	r1, #1
   1b4e4:	f7f1 ff94 	bl	d410 <DmConnSetIdle>

  pairCmpl.auth = pCcb->auth;
   1b4e8:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  pairCmpl.hdr.param = pCcb->connId;
   1b4ec:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  pairCmpl.auth = pCcb->auth;
   1b4f0:	f88d 1004 	strb.w	r1, [sp, #4]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
   1b4f4:	232a      	movs	r3, #42	; 0x2a
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
   1b4f6:	4668      	mov	r0, sp
  pairCmpl.hdr.param = pCcb->connId;
   1b4f8:	f8ad 2000 	strh.w	r2, [sp]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
   1b4fc:	f88d 3002 	strb.w	r3, [sp, #2]
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
   1b500:	f7f3 f98e 	bl	e820 <DmSmpCbackExec>
}
   1b504:	b002      	add	sp, #8
   1b506:	bd10      	pop	{r4, pc}

0001b508 <smpSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSmExecute(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1b508:	b570      	push	{r4, r5, r6, lr}
   1b50a:	4604      	mov	r4, r0
#if SMP_EXTRA_TRACE == TRUE
  if (smpCb.lescSupported)
    SMP_TRACE_INFO2("SMP Exe: evt=%s st=%s", smpEventStr(pMsg->hdr.event), smpStateStr(pCcb->state));
  else
#endif
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   1b50c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
   1b510:	4818      	ldr	r0, [pc, #96]	; (1b574 <smpSmExecute+0x6c>)
{
   1b512:	460d      	mov	r5, r1
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   1b514:	7889      	ldrb	r1, [r1, #2]
   1b516:	f003 f8bf 	bl	1e698 <WsfTrace>

  /* look up state table for state */
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
   1b51a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1b51e:	f7f1 ffb9 	bl	d494 <DmConnRole>
   1b522:	4b15      	ldr	r3, [pc, #84]	; (1b578 <smpSmExecute+0x70>)
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
   1b524:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  {
    /* look for event match and execute action */
    do
    {
      /* if match */
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
   1b528:	f895 c002 	ldrb.w	ip, [r5, #2]
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
   1b52c:	e9d3 1336 	ldrd	r1, r3, [r3, #216]	; 0xd8
   1b530:	2801      	cmp	r0, #1
   1b532:	bf18      	it	ne
   1b534:	4619      	movne	r1, r3
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
   1b536:	680b      	ldr	r3, [r1, #0]
   1b538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b53c:	e002      	b.n	1b544 <smpSmExecute+0x3c>

      /* next entry */
      pTblEntry++;

      /* while not at end */
    } while ((*pTblEntry)[SMP_SM_POS_EVENT] != 0);
   1b53e:	f813 2f03 	ldrb.w	r2, [r3, #3]!
   1b542:	b172      	cbz	r2, 1b562 <smpSmExecute+0x5a>
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
   1b544:	781a      	ldrb	r2, [r3, #0]
   1b546:	4562      	cmp	r2, ip
   1b548:	d1f9      	bne.n	1b53e <smpSmExecute+0x36>
        pCcb->state = (*pTblEntry)[SMP_SM_POS_NEXT_STATE];
   1b54a:	785a      	ldrb	r2, [r3, #1]
   1b54c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
   1b550:	789a      	ldrb	r2, [r3, #2]
   1b552:	684b      	ldr	r3, [r1, #4]
   1b554:	4620      	mov	r0, r4
   1b556:	4629      	mov	r1, r5
   1b558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    {
      /* set it up */
      pTblEntry = pSmIf->pCommonTbl;
    }
  }
}
   1b55c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
   1b560:	4718      	bx	r3
    if (pTblEntry == (pSmIf->pCommonTbl + SMP_STATE_TBL_COMMON_MAX - 1))
   1b562:	688a      	ldr	r2, [r1, #8]
   1b564:	f102 000c 	add.w	r0, r2, #12
   1b568:	4283      	cmp	r3, r0
   1b56a:	d001      	beq.n	1b570 <smpSmExecute+0x68>
      pTblEntry = pSmIf->pCommonTbl;
   1b56c:	4613      	mov	r3, r2
   1b56e:	e7e9      	b.n	1b544 <smpSmExecute+0x3c>
}
   1b570:	bd70      	pop	{r4, r5, r6, pc}
   1b572:	bf00      	nop
   1b574:	000278a4 	.word	0x000278a4
   1b578:	100059e4 	.word	0x100059e4

0001b57c <smpProcPairing>:
{
   1b57c:	b500      	push	{lr}
  *pDisplay = FALSE;
   1b57e:	2300      	movs	r3, #0
   1b580:	7013      	strb	r3, [r2, #0]
  *pOob = FALSE;
   1b582:	700b      	strb	r3, [r1, #0]
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   1b584:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1b588:	2b01      	cmp	r3, #1
{
   1b58a:	b083      	sub	sp, #12
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   1b58c:	d064      	beq.n	1b658 <smpProcPairing+0xdc>
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1b58e:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
   1b592:	074b      	lsls	r3, r1, #29
   1b594:	d423      	bmi.n	1b5de <smpProcPairing+0x62>
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
   1b596:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1b59a:	f013 0f04 	tst.w	r3, #4
   1b59e:	d11e      	bne.n	1b5de <smpProcPairing+0x62>
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1b5a0:	ea01 0c03 	and.w	ip, r1, r3
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1b5a4:	4a3b      	ldr	r2, [pc, #236]	; (1b694 <smpProcPairing+0x118>)
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1b5a6:	f02c 0c04 	bic.w	ip, ip, #4
   1b5aa:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1b5ae:	6812      	ldr	r2, [r2, #0]
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   1b5b0:	f890 c03a 	ldrb.w	ip, [r0, #58]	; 0x3a
   1b5b4:	f1bc 0f00 	cmp.w	ip, #0
   1b5b8:	bf18      	it	ne
   1b5ba:	460b      	movne	r3, r1
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1b5bc:	7a11      	ldrb	r1, [r2, #8]
   1b5be:	400b      	ands	r3, r1
   1b5c0:	075b      	lsls	r3, r3, #29
   1b5c2:	d455      	bmi.n	1b670 <smpProcPairing+0xf4>
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1b5c4:	7953      	ldrb	r3, [r2, #5]
   1b5c6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1b5ca:	429a      	cmp	r2, r3
   1b5cc:	d332      	bcc.n	1b634 <smpProcPairing+0xb8>
   1b5ce:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   1b5d2:	429a      	cmp	r2, r3
   1b5d4:	d32e      	bcc.n	1b634 <smpProcPairing+0xb8>
  return TRUE;
   1b5d6:	2001      	movs	r0, #1
}
   1b5d8:	b003      	add	sp, #12
   1b5da:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1b5de:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   1b5e2:	2b03      	cmp	r3, #3
   1b5e4:	d035      	beq.n	1b652 <smpProcPairing+0xd6>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1b5e6:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1b5ea:	f1bc 0f03 	cmp.w	ip, #3
   1b5ee:	d030      	beq.n	1b652 <smpProcPairing+0xd6>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1b5f0:	2b01      	cmp	r3, #1
   1b5f2:	d937      	bls.n	1b664 <smpProcPairing+0xe8>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1b5f4:	2b04      	cmp	r3, #4
   1b5f6:	d045      	beq.n	1b684 <smpProcPairing+0x108>
   1b5f8:	2300      	movs	r3, #0
   1b5fa:	4619      	mov	r1, r3
      *pDisplay =
   1b5fc:	7011      	strb	r1, [r2, #0]
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1b5fe:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
   1b602:	2902      	cmp	r1, #2
   1b604:	d039      	beq.n	1b67a <smpProcPairing+0xfe>
        *pDisplay ^= !pCcb->initiator;
   1b606:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
   1b60a:	2900      	cmp	r1, #0
   1b60c:	bf08      	it	eq
   1b60e:	f083 0301 	eoreq.w	r3, r3, #1
   1b612:	7013      	strb	r3, [r2, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1b614:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   1b618:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1b61c:	4a1d      	ldr	r2, [pc, #116]	; (1b694 <smpProcPairing+0x118>)
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1b61e:	400b      	ands	r3, r1
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1b620:	6812      	ldr	r2, [r2, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1b622:	f043 0304 	orr.w	r3, r3, #4
   1b626:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1b62a:	7953      	ldrb	r3, [r2, #5]
   1b62c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   1b630:	429a      	cmp	r2, r3
   1b632:	d2cc      	bcs.n	1b5ce <smpProcPairing+0x52>
    hdr.param = pCcb->connId;
   1b634:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b638:	f240 6303 	movw	r3, #1539	; 0x603
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b63c:	a901      	add	r1, sp, #4
    hdr.param = pCcb->connId;
   1b63e:	f8ad 2004 	strh.w	r2, [sp, #4]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b642:	f8ad 3006 	strh.w	r3, [sp, #6]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1b646:	f7ff ff5f 	bl	1b508 <smpSmExecute>
    return FALSE;
   1b64a:	2000      	movs	r0, #0
}
   1b64c:	b003      	add	sp, #12
   1b64e:	f85d fb04 	ldr.w	pc, [sp], #4
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
   1b652:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   1b656:	e7a3      	b.n	1b5a0 <smpProcPairing+0x24>
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
   1b658:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1b65c:	2b01      	cmp	r3, #1
   1b65e:	d196      	bne.n	1b58e <smpProcPairing+0x12>
    *pOob = SMP_OOB_DATA_PRESENT;
   1b660:	700b      	strb	r3, [r1, #0]
  if (!justWorks)
   1b662:	e7d7      	b.n	1b614 <smpProcPairing+0x98>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1b664:	f1bc 0f01 	cmp.w	ip, #1
   1b668:	d9f3      	bls.n	1b652 <smpProcPairing+0xd6>
   1b66a:	2301      	movs	r3, #1
   1b66c:	4619      	mov	r1, r3
   1b66e:	e7c5      	b.n	1b5fc <smpProcPairing+0x80>
    hdr.param = pCcb->connId;
   1b670:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1b674:	f240 3303 	movw	r3, #771	; 0x303
   1b678:	e7e0      	b.n	1b63c <smpProcPairing+0xc0>
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1b67a:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   1b67e:	2902      	cmp	r1, #2
   1b680:	d1c1      	bne.n	1b606 <smpProcPairing+0x8a>
   1b682:	e7c7      	b.n	1b614 <smpProcPairing+0x98>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1b684:	f1bc 0f02 	cmp.w	ip, #2
   1b688:	d0ef      	beq.n	1b66a <smpProcPairing+0xee>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1b68a:	f1bc 0f04 	cmp.w	ip, #4
   1b68e:	d1b3      	bne.n	1b5f8 <smpProcPairing+0x7c>
   1b690:	e7eb      	b.n	1b66a <smpProcPairing+0xee>
   1b692:	bf00      	nop
   1b694:	10002c30 	.word	0x10002c30

0001b698 <smpAuthReq>:
{
   1b698:	b500      	push	{lr}
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1b69a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    buf.authReq.hdr.param = pCcb->connId;
   1b69e:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1b6a2:	f013 0304 	ands.w	r3, r3, #4
{
   1b6a6:	b087      	sub	sp, #28
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1b6a8:	d00e      	beq.n	1b6c8 <smpAuthReq+0x30>
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1b6aa:	232e      	movs	r3, #46	; 0x2e
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1b6ac:	4668      	mov	r0, sp
    buf.authReq.hdr.param = pCcb->connId;
   1b6ae:	f8ad c000 	strh.w	ip, [sp]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1b6b2:	f88d 3002 	strb.w	r3, [sp, #2]
    buf.authReq.oob = oob;
   1b6b6:	f88d 1004 	strb.w	r1, [sp, #4]
    buf.authReq.display = display;
   1b6ba:	f88d 2005 	strb.w	r2, [sp, #5]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1b6be:	f7f3 f8af 	bl	e820 <DmSmpCbackExec>
}
   1b6c2:	b007      	add	sp, #28
   1b6c4:	f85d fb04 	ldr.w	pc, [sp], #4
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1b6c8:	2104      	movs	r1, #4
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1b6ca:	2203      	movs	r2, #3
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1b6cc:	f88d 1002 	strb.w	r1, [sp, #2]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1b6d0:	4669      	mov	r1, sp
    buf.authRsp.hdr.param = pCcb->connId;
   1b6d2:	f8ad c000 	strh.w	ip, [sp]
    buf.authRsp.authData[0] = 0;
   1b6d6:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.authRsp.authData[2] = 0;
   1b6da:	f88d 3006 	strb.w	r3, [sp, #6]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1b6de:	f88d 2014 	strb.w	r2, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1b6e2:	f7ff ff11 	bl	1b508 <smpSmExecute>
}
   1b6e6:	b007      	add	sp, #28
   1b6e8:	f85d fb04 	ldr.w	pc, [sp], #4

0001b6ec <smpDbGetRecord>:
 *
 *  \return Pointer to the record associated with the connection or the common record.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbGetRecord(dmConnId_t connId)
{
   1b6ec:	b570      	push	{r4, r5, r6, lr}
   1b6ee:	4604      	mov	r4, r0
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
  uint8_t addrType = DmHostAddrType(DmConnPeerAddrType(connId));
   1b6f0:	f7f1 fe48 	bl	d384 <DmConnPeerAddrType>
   1b6f4:	f7f2 f94c 	bl	d990 <DmHostAddrType>
   1b6f8:	4605      	mov	r5, r0
  uint8_t *pAddr = DmConnPeerAddr(connId);
   1b6fa:	4620      	mov	r0, r4
   1b6fc:	f7f1 fe4c 	bl	d398 <DmConnPeerAddr>
  uint8_t i;

  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   1b700:	4621      	mov	r1, r4
  if (pRec->failCount > 0)
   1b702:	4c28      	ldr	r4, [pc, #160]	; (1b7a4 <smpDbGetRecord+0xb8>)
  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   1b704:	462a      	mov	r2, r5
  uint8_t *pAddr = DmConnPeerAddr(connId);
   1b706:	4606      	mov	r6, r0
  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
   1b708:	4827      	ldr	r0, [pc, #156]	; (1b7a8 <smpDbGetRecord+0xbc>)
   1b70a:	f002 ffc5 	bl	1e698 <WsfTrace>
  if (pRec->failCount > 0)
   1b70e:	7fe3      	ldrb	r3, [r4, #31]
   1b710:	b91b      	cbnz	r3, 1b71a <smpDbGetRecord+0x2e>
  if (pRec->lockMs > 0)
   1b712:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b714:	b90b      	cbnz	r3, 1b71a <smpDbGetRecord+0x2e>
  if (pRec->attemptMult > 0)
   1b716:	8c23      	ldrh	r3, [r4, #32]
   1b718:	b113      	cbz	r3, 1b720 <smpDbGetRecord+0x34>

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
  {
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1b71a:	7fa3      	ldrb	r3, [r4, #30]
   1b71c:	42ab      	cmp	r3, r5
   1b71e:	d031      	beq.n	1b784 <smpDbGetRecord+0x98>
  if (pRec->failCount > 0)
   1b720:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1b724:	b91b      	cbnz	r3, 1b72e <smpDbGetRecord+0x42>
  if (pRec->lockMs > 0)
   1b726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b728:	b90b      	cbnz	r3, 1b72e <smpDbGetRecord+0x42>
  if (pRec->attemptMult > 0)
   1b72a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1b72c:	b11b      	cbz	r3, 1b736 <smpDbGetRecord+0x4a>
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1b72e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1b732:	42ab      	cmp	r3, r5
   1b734:	d02e      	beq.n	1b794 <smpDbGetRecord+0xa8>
  SMP_TRACE_INFO0("smpDbAddDevice");
   1b736:	481d      	ldr	r0, [pc, #116]	; (1b7ac <smpDbGetRecord+0xc0>)
   1b738:	f002 ffae 	bl	1e698 <WsfTrace>
  if (pRec->failCount > 0)
   1b73c:	7fe3      	ldrb	r3, [r4, #31]
   1b73e:	b993      	cbnz	r3, 1b766 <smpDbGetRecord+0x7a>
  if (pRec->lockMs > 0)
   1b740:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b742:	b983      	cbnz	r3, 1b766 <smpDbGetRecord+0x7a>
  if (pRec->attemptMult > 0)
   1b744:	8c23      	ldrh	r3, [r4, #32]
   1b746:	b973      	cbnz	r3, 1b766 <smpDbGetRecord+0x7a>
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   1b748:	4c19      	ldr	r4, [pc, #100]	; (1b7b0 <smpDbGetRecord+0xc4>)
      memset(pRec, 0, sizeof(smpDbDevice_t));
   1b74a:	2300      	movs	r3, #0
   1b74c:	e9c4 3300 	strd	r3, r3, [r4]
      BdaCpy(pRec->peerAddr, pAddr);
   1b750:	4620      	mov	r0, r4
      memset(pRec, 0, sizeof(smpDbDevice_t));
   1b752:	e9c4 3302 	strd	r3, r3, [r4, #8]
   1b756:	e9c4 3304 	strd	r3, r3, [r4, #16]
      BdaCpy(pRec->peerAddr, pAddr);
   1b75a:	4631      	mov	r1, r6
      pRec->addrType = addrType;
   1b75c:	71a5      	strb	r5, [r4, #6]
      BdaCpy(pRec->peerAddr, pAddr);
   1b75e:	f7fa f8ad 	bl	158bc <BdaCpy>
    /* Database is full, use the common record. */
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
  }

  return pRec;
}
   1b762:	4620      	mov	r0, r4
   1b764:	bd70      	pop	{r4, r5, r6, pc}
  if (pRec->failCount > 0)
   1b766:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1b76a:	b92b      	cbnz	r3, 1b778 <smpDbGetRecord+0x8c>
  if (pRec->lockMs > 0)
   1b76c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b76e:	b91b      	cbnz	r3, 1b778 <smpDbGetRecord+0x8c>
  if (pRec->attemptMult > 0)
   1b770:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1b772:	b90b      	cbnz	r3, 1b778 <smpDbGetRecord+0x8c>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1b774:	4c0f      	ldr	r4, [pc, #60]	; (1b7b4 <smpDbGetRecord+0xc8>)
   1b776:	e7e8      	b.n	1b74a <smpDbGetRecord+0x5e>
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
   1b778:	480f      	ldr	r0, [pc, #60]	; (1b7b8 <smpDbGetRecord+0xcc>)
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
   1b77a:	4c0a      	ldr	r4, [pc, #40]	; (1b7a4 <smpDbGetRecord+0xb8>)
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
   1b77c:	f002 ff8c 	bl	1e698 <WsfTrace>
}
   1b780:	4620      	mov	r0, r4
   1b782:	bd70      	pop	{r4, r5, r6, pc}
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1b784:	480a      	ldr	r0, [pc, #40]	; (1b7b0 <smpDbGetRecord+0xc4>)
   1b786:	4631      	mov	r1, r6
   1b788:	f7fa f89e 	bl	158c8 <BdaCmp>
   1b78c:	2800      	cmp	r0, #0
   1b78e:	d0c7      	beq.n	1b720 <smpDbGetRecord+0x34>
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
   1b790:	4c07      	ldr	r4, [pc, #28]	; (1b7b0 <smpDbGetRecord+0xc4>)
   1b792:	e7f5      	b.n	1b780 <smpDbGetRecord+0x94>
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
   1b794:	4807      	ldr	r0, [pc, #28]	; (1b7b4 <smpDbGetRecord+0xc8>)
   1b796:	4631      	mov	r1, r6
   1b798:	f7fa f896 	bl	158c8 <BdaCmp>
   1b79c:	2800      	cmp	r0, #0
   1b79e:	d0ca      	beq.n	1b736 <smpDbGetRecord+0x4a>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
   1b7a0:	4c04      	ldr	r4, [pc, #16]	; (1b7b4 <smpDbGetRecord+0xc8>)
   1b7a2:	e7ed      	b.n	1b780 <smpDbGetRecord+0x94>
   1b7a4:	1000598c 	.word	0x1000598c
   1b7a8:	000278c4 	.word	0x000278c4
   1b7ac:	000278e8 	.word	0x000278e8
   1b7b0:	100059a4 	.word	0x100059a4
   1b7b4:	100059bc 	.word	0x100059bc
   1b7b8:	000278f8 	.word	0x000278f8

0001b7bc <SmpDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbInit(void)
{
   1b7bc:	b510      	push	{r4, lr}
  /* Stop active service timer. */
  if (smpDbCb.serviceTimer.isStarted == TRUE)
   1b7be:	4c0c      	ldr	r4, [pc, #48]	; (1b7f0 <SmpDbInit+0x34>)
   1b7c0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1b7c4:	2b01      	cmp	r3, #1
   1b7c6:	d00d      	beq.n	1b7e4 <SmpDbInit+0x28>
  {
    WsfTimerStop(&smpDbCb.serviceTimer);
  }

  /* Reset control block. */
  memset(&smpDbCb, 0, sizeof(smpDbCb));
   1b7c8:	2258      	movs	r2, #88	; 0x58
   1b7ca:	4809      	ldr	r0, [pc, #36]	; (1b7f0 <SmpDbInit+0x34>)
   1b7cc:	2100      	movs	r1, #0
   1b7ce:	f007 fdb5 	bl	2333c <memset>

  /* Setup service timer. */
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
   1b7d2:	4a08      	ldr	r2, [pc, #32]	; (1b7f4 <SmpDbInit+0x38>)
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
   1b7d4:	231f      	movs	r3, #31
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
   1b7d6:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
   1b7da:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
   1b7de:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
}
   1b7e2:	bd10      	pop	{r4, pc}
    WsfTimerStop(&smpDbCb.serviceTimer);
   1b7e4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1b7e8:	f002 feb6 	bl	1e558 <WsfTimerStop>
   1b7ec:	e7ec      	b.n	1b7c8 <SmpDbInit+0xc>
   1b7ee:	bf00      	nop
   1b7f0:	1000598c 	.word	0x1000598c
   1b7f4:	100059e4 	.word	0x100059e4

0001b7f8 <SmpDbGetPairingDisabledTime>:
 *
 *  \return Time pairing is disabled (msec), or zero if pairing isn't disabled.
 */
/*************************************************************************************************/
uint32_t SmpDbGetPairingDisabledTime(dmConnId_t connId)
{
   1b7f8:	b510      	push	{r4, lr}
   1b7fa:	b082      	sub	sp, #8
   1b7fc:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b7fe:	f7ff ff75 	bl	1b6ec <smpDbGetRecord>
   1b802:	4604      	mov	r4, r0

  SMP_TRACE_INFO3("SmpDbGetPairingDisabledTime: connId: %d period: %d attemptMult: %d",
   1b804:	9901      	ldr	r1, [sp, #4]
   1b806:	4804      	ldr	r0, [pc, #16]	; (1b818 <SmpDbGetPairingDisabledTime+0x20>)
   1b808:	8923      	ldrh	r3, [r4, #8]
   1b80a:	68e2      	ldr	r2, [r4, #12]
   1b80c:	f002 ff44 	bl	1e698 <WsfTrace>
                  connId, pRec->lockMs, pRec->attemptMult);

  return pRec->lockMs;
}
   1b810:	68e0      	ldr	r0, [r4, #12]
   1b812:	b002      	add	sp, #8
   1b814:	bd10      	pop	{r4, pc}
   1b816:	bf00      	nop
   1b818:	00027918 	.word	0x00027918

0001b81c <SmpDbSetFailureCount>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbSetFailureCount(dmConnId_t connId, uint8_t count)
{
   1b81c:	b530      	push	{r4, r5, lr}
   1b81e:	b083      	sub	sp, #12
   1b820:	460c      	mov	r4, r1
   1b822:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b824:	f7ff ff62 	bl	1b6ec <smpDbGetRecord>
   1b828:	4605      	mov	r5, r0

  SMP_TRACE_INFO2("SmpDbSetFailureCount: connId: %d count: %d", connId, count);
   1b82a:	9901      	ldr	r1, [sp, #4]
   1b82c:	4805      	ldr	r0, [pc, #20]	; (1b844 <SmpDbSetFailureCount+0x28>)
   1b82e:	4622      	mov	r2, r4
   1b830:	f002 ff32 	bl	1e698 <WsfTrace>

  pRec->failCount = count;
   1b834:	71ec      	strb	r4, [r5, #7]

  if (count != 0)
   1b836:	b11c      	cbz	r4, 1b840 <SmpDbSetFailureCount+0x24>
  {
    pRec->failCountToMs = pSmpCfg->maxAttemptTimeout;
   1b838:	4b03      	ldr	r3, [pc, #12]	; (1b848 <SmpDbSetFailureCount+0x2c>)
   1b83a:	681b      	ldr	r3, [r3, #0]
   1b83c:	68db      	ldr	r3, [r3, #12]
   1b83e:	616b      	str	r3, [r5, #20]
  }
}
   1b840:	b003      	add	sp, #12
   1b842:	bd30      	pop	{r4, r5, pc}
   1b844:	0002795c 	.word	0x0002795c
   1b848:	10002c30 	.word	0x10002c30

0001b84c <SmpDbGetFailureCount>:
 *
 *  \return The failure count.
 */
/*************************************************************************************************/
uint8_t SmpDbGetFailureCount(dmConnId_t connId)
{
   1b84c:	b510      	push	{r4, lr}
   1b84e:	b082      	sub	sp, #8
   1b850:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b852:	f7ff ff4b 	bl	1b6ec <smpDbGetRecord>
   1b856:	4604      	mov	r4, r0

  SMP_TRACE_INFO2("SmpDbGetFailureCount: connId: %d count: %d", connId, pRec->failCount);
   1b858:	9901      	ldr	r1, [sp, #4]
   1b85a:	4803      	ldr	r0, [pc, #12]	; (1b868 <SmpDbGetFailureCount+0x1c>)
   1b85c:	79e2      	ldrb	r2, [r4, #7]
   1b85e:	f002 ff1b 	bl	1e698 <WsfTrace>

  return pRec->failCount;
}
   1b862:	79e0      	ldrb	r0, [r4, #7]
   1b864:	b002      	add	sp, #8
   1b866:	bd10      	pop	{r4, pc}
   1b868:	00027988 	.word	0x00027988

0001b86c <SmpDbMaxAttemptReached>:
 *
 *  \return Time until device can retry pairing.
 */
/*************************************************************************************************/
uint32_t SmpDbMaxAttemptReached(dmConnId_t connId)
{
   1b86c:	b510      	push	{r4, lr}
   1b86e:	b082      	sub	sp, #8
   1b870:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b872:	f7ff ff3b 	bl	1b6ec <smpDbGetRecord>
   1b876:	4604      	mov	r4, r0
  uint16_t multiplier;

  SMP_TRACE_INFO1("SmpDbMaxAttemptReached: connId: %d", connId);
   1b878:	9901      	ldr	r1, [sp, #4]
   1b87a:	4815      	ldr	r0, [pc, #84]	; (1b8d0 <SmpDbMaxAttemptReached+0x64>)
   1b87c:	f002 ff0c 	bl	1e698 <WsfTrace>

  if (pRec->attemptMult == 0)
   1b880:	8923      	ldrh	r3, [r4, #8]
    /* Due to a disconnection, a record exists but the attempt multipier hasn't been set. */
    multiplier = 1;
  }
  else
  {
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   1b882:	4a14      	ldr	r2, [pc, #80]	; (1b8d4 <SmpDbMaxAttemptReached+0x68>)
  if (pRec->attemptMult == 0)
   1b884:	b9a3      	cbnz	r3, 1b8b0 <SmpDbMaxAttemptReached+0x44>
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   1b886:	2301      	movs	r3, #1
   1b888:	6812      	ldr	r2, [r2, #0]
    multiplier = 1;
   1b88a:	4619      	mov	r1, r3
  }

  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   1b88c:	6810      	ldr	r0, [r2, #0]
   1b88e:	fb00 f303 	mul.w	r3, r0, r3
   1b892:	68d0      	ldr	r0, [r2, #12]
  {
    /* Exponential increase is greater than max timeout. */
    pRec->lockMs = pSmpCfg->maxAttemptTimeout;
  }

  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   1b894:	6912      	ldr	r2, [r2, #16]
  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   1b896:	4283      	cmp	r3, r0
    pRec->attemptMult = multiplier;
   1b898:	bf98      	it	ls
   1b89a:	4618      	movls	r0, r3
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   1b89c:	e9c4 0203 	strd	r0, r2, [r4, #12]
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1b8a0:	4b0d      	ldr	r3, [pc, #52]	; (1b8d8 <SmpDbMaxAttemptReached+0x6c>)
    pRec->attemptMult = multiplier;
   1b8a2:	bf98      	it	ls
   1b8a4:	8121      	strhls	r1, [r4, #8]
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1b8a6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
   1b8aa:	b142      	cbz	r2, 1b8be <SmpDbMaxAttemptReached+0x52>

  /* Ensure the service timer is running. */
  smpDbStartServiceTimer();

  return pRec->lockMs;
}
   1b8ac:	b002      	add	sp, #8
   1b8ae:	bd10      	pop	{r4, pc}
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
   1b8b0:	6812      	ldr	r2, [r2, #0]
   1b8b2:	8a91      	ldrh	r1, [r2, #20]
   1b8b4:	fb11 f103 	smulbb	r1, r1, r3
   1b8b8:	b289      	uxth	r1, r1
  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
   1b8ba:	460b      	mov	r3, r1
   1b8bc:	e7e6      	b.n	1b88c <SmpDbMaxAttemptReached+0x20>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1b8be:	f103 0048 	add.w	r0, r3, #72	; 0x48
   1b8c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b8c6:	f002 fe03 	bl	1e4d0 <WsfTimerStartMs>
  return pRec->lockMs;
   1b8ca:	68e0      	ldr	r0, [r4, #12]
}
   1b8cc:	b002      	add	sp, #8
   1b8ce:	bd10      	pop	{r4, pc}
   1b8d0:	000279b4 	.word	0x000279b4
   1b8d4:	10002c30 	.word	0x10002c30
   1b8d8:	1000598c 	.word	0x1000598c

0001b8dc <SmpDbPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbPairingFailed(dmConnId_t connId)
{
   1b8dc:	b510      	push	{r4, lr}
   1b8de:	b082      	sub	sp, #8
   1b8e0:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b8e2:	f7ff ff03 	bl	1b6ec <smpDbGetRecord>

  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
   1b8e6:	9901      	ldr	r1, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
   1b8e8:	4604      	mov	r4, r0
  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
   1b8ea:	4804      	ldr	r0, [pc, #16]	; (1b8fc <SmpDbPairingFailed+0x20>)
   1b8ec:	f002 fed4 	bl	1e698 <WsfTrace>

  /* Reset exponent decrement timer. */
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
   1b8f0:	4b03      	ldr	r3, [pc, #12]	; (1b900 <SmpDbPairingFailed+0x24>)
   1b8f2:	681b      	ldr	r3, [r3, #0]
   1b8f4:	691b      	ldr	r3, [r3, #16]
   1b8f6:	6123      	str	r3, [r4, #16]
}
   1b8f8:	b002      	add	sp, #8
   1b8fa:	bd10      	pop	{r4, pc}
   1b8fc:	000279d8 	.word	0x000279d8
   1b900:	10002c30 	.word	0x10002c30

0001b904 <SmpDbService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbService(void)
{
   1b904:	b538      	push	{r3, r4, r5, lr}
  if (pRec->failCount > 0)
   1b906:	4c75      	ldr	r4, [pc, #468]	; (1badc <SmpDbService+0x1d8>)
   1b908:	79e0      	ldrb	r0, [r4, #7]
   1b90a:	b9b8      	cbnz	r0, 1b93c <SmpDbService+0x38>
   1b90c:	68e3      	ldr	r3, [r4, #12]
  if (pRec->lockMs > 0)
   1b90e:	b9b3      	cbnz	r3, 1b93e <SmpDbService+0x3a>
  if (pRec->attemptMult > 0)
   1b910:	8922      	ldrh	r2, [r4, #8]
   1b912:	b9a2      	cbnz	r2, 1b93e <SmpDbService+0x3a>
  if (pRec->failCount > 0)
   1b914:	7fe0      	ldrb	r0, [r4, #31]
   1b916:	2800      	cmp	r0, #0
   1b918:	d14b      	bne.n	1b9b2 <SmpDbService+0xae>
   1b91a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (pRec->lockMs > 0)
   1b91c:	2b00      	cmp	r3, #0
   1b91e:	d149      	bne.n	1b9b4 <SmpDbService+0xb0>
  if (pRec->attemptMult > 0)
   1b920:	8c22      	ldrh	r2, [r4, #32]
   1b922:	2a00      	cmp	r2, #0
   1b924:	d146      	bne.n	1b9b4 <SmpDbService+0xb0>
  if (pRec->failCount > 0)
   1b926:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   1b92a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b92c:	2800      	cmp	r0, #0
   1b92e:	d17c      	bne.n	1ba2a <SmpDbService+0x126>
  if (pRec->lockMs > 0)
   1b930:	2b00      	cmp	r3, #0
   1b932:	d17a      	bne.n	1ba2a <SmpDbService+0x126>
  if (pRec->attemptMult > 0)
   1b934:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   1b936:	2a00      	cmp	r2, #0
   1b938:	d177      	bne.n	1ba2a <SmpDbService+0x126>
      {
        smpDbStartServiceTimer();
      }
    }
  }
}
   1b93a:	bd38      	pop	{r3, r4, r5, pc}
   1b93c:	68e3      	ldr	r3, [r4, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1b93e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1b942:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   1b946:	bf38      	it	cc
   1b948:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1b94c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1b950:	bf38      	it	cc
   1b952:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1b956:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1b95a:	bf38      	it	cc
   1b95c:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1b960:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1b964:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1b968:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1b96c:	e9c4 3103 	strd	r3, r1, [r4, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1b970:	6162      	str	r2, [r4, #20]
      if (pRec->expDecrementMs == 0)
   1b972:	b961      	cbnz	r1, 1b98e <SmpDbService+0x8a>
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1b974:	495a      	ldr	r1, [pc, #360]	; (1bae0 <SmpDbService+0x1dc>)
   1b976:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   1b97a:	680d      	ldr	r5, [r1, #0]
   1b97c:	8aa9      	ldrh	r1, [r5, #20]
   1b97e:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
   1b982:	458c      	cmp	ip, r1
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1b984:	f8a4 e008 	strh.w	lr, [r4, #8]
        if (pRec->attemptMult)
   1b988:	d301      	bcc.n	1b98e <SmpDbService+0x8a>
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1b98a:	6929      	ldr	r1, [r5, #16]
   1b98c:	6121      	str	r1, [r4, #16]
      if (pRec->failCountToMs == 0)
   1b98e:	2a00      	cmp	r2, #0
   1b990:	f000 8088 	beq.w	1baa4 <SmpDbService+0x1a0>
  if (pRec->failCount > 0)
   1b994:	2800      	cmp	r0, #0
   1b996:	f000 8086 	beq.w	1baa6 <SmpDbService+0x1a2>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1b99a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1b99e:	2b00      	cmp	r3, #0
   1b9a0:	d1b8      	bne.n	1b914 <SmpDbService+0x10>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1b9a2:	4850      	ldr	r0, [pc, #320]	; (1bae4 <SmpDbService+0x1e0>)
   1b9a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b9a8:	f002 fd92 	bl	1e4d0 <WsfTimerStartMs>
  if (pRec->failCount > 0)
   1b9ac:	7fe0      	ldrb	r0, [r4, #31]
   1b9ae:	2800      	cmp	r0, #0
   1b9b0:	d0b3      	beq.n	1b91a <SmpDbService+0x16>
   1b9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1b9b4:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1b9b8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   1b9bc:	bf38      	it	cc
   1b9be:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1b9c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1b9c6:	bf38      	it	cc
   1b9c8:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1b9cc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1b9d0:	bf38      	it	cc
   1b9d2:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1b9d6:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1b9da:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1b9de:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1b9e2:	e9c4 3109 	strd	r3, r1, [r4, #36]	; 0x24
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1b9e6:	62e2      	str	r2, [r4, #44]	; 0x2c
      if (pRec->expDecrementMs == 0)
   1b9e8:	b951      	cbnz	r1, 1ba00 <SmpDbService+0xfc>
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1b9ea:	493d      	ldr	r1, [pc, #244]	; (1bae0 <SmpDbService+0x1dc>)
   1b9ec:	f8b4 c020 	ldrh.w	ip, [r4, #32]
   1b9f0:	680d      	ldr	r5, [r1, #0]
   1b9f2:	8aa9      	ldrh	r1, [r5, #20]
   1b9f4:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
   1b9f8:	458c      	cmp	ip, r1
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1b9fa:	f8a4 e020 	strh.w	lr, [r4, #32]
        if (pRec->attemptMult)
   1b9fe:	d26a      	bcs.n	1bad6 <SmpDbService+0x1d2>
      if (pRec->failCountToMs == 0)
   1ba00:	2a00      	cmp	r2, #0
   1ba02:	d158      	bne.n	1bab6 <SmpDbService+0x1b2>
        pRec->failCount = 0;
   1ba04:	77e2      	strb	r2, [r4, #31]
  if (pRec->lockMs > 0)
   1ba06:	b913      	cbnz	r3, 1ba0e <SmpDbService+0x10a>
  if (pRec->attemptMult > 0)
   1ba08:	8c23      	ldrh	r3, [r4, #32]
   1ba0a:	2b00      	cmp	r3, #0
   1ba0c:	d08b      	beq.n	1b926 <SmpDbService+0x22>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1ba0e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1ba12:	2b00      	cmp	r3, #0
   1ba14:	d187      	bne.n	1b926 <SmpDbService+0x22>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1ba16:	4833      	ldr	r0, [pc, #204]	; (1bae4 <SmpDbService+0x1e0>)
   1ba18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1ba1c:	f002 fd58 	bl	1e4d0 <WsfTimerStartMs>
  if (pRec->failCount > 0)
   1ba20:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
   1ba24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1ba26:	2800      	cmp	r0, #0
   1ba28:	d082      	beq.n	1b930 <SmpDbService+0x2c>
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1ba2a:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1ba2e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
   1ba32:	bf38      	it	cc
   1ba34:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1ba38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1ba3c:	bf38      	it	cc
   1ba3e:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1ba42:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1ba46:	bf38      	it	cc
   1ba48:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
   1ba4c:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1ba50:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1ba54:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
   1ba58:	e9c4 310f 	strd	r3, r1, [r4, #60]	; 0x3c
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
   1ba5c:	6462      	str	r2, [r4, #68]	; 0x44
      if (pRec->expDecrementMs == 0)
   1ba5e:	b969      	cbnz	r1, 1ba7c <SmpDbService+0x178>
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1ba60:	491f      	ldr	r1, [pc, #124]	; (1bae0 <SmpDbService+0x1dc>)
   1ba62:	f8b4 c038 	ldrh.w	ip, [r4, #56]	; 0x38
   1ba66:	680d      	ldr	r5, [r1, #0]
   1ba68:	8aa9      	ldrh	r1, [r5, #20]
   1ba6a:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
   1ba6e:	458c      	cmp	ip, r1
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1ba70:	bf28      	it	cs
   1ba72:	6929      	ldrcs	r1, [r5, #16]
        pRec->attemptMult /= pSmpCfg->attemptExp;
   1ba74:	f8a4 e038 	strh.w	lr, [r4, #56]	; 0x38
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1ba78:	bf28      	it	cs
   1ba7a:	6421      	strcs	r1, [r4, #64]	; 0x40
      if (pRec->failCountToMs == 0)
   1ba7c:	bb1a      	cbnz	r2, 1bac6 <SmpDbService+0x1c2>
        pRec->failCount = 0;
   1ba7e:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
  if (pRec->lockMs > 0)
   1ba82:	b91b      	cbnz	r3, 1ba8c <SmpDbService+0x188>
  if (pRec->attemptMult > 0)
   1ba84:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1ba86:	2b00      	cmp	r3, #0
   1ba88:	f43f af57 	beq.w	1b93a <SmpDbService+0x36>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1ba8c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1ba90:	2b00      	cmp	r3, #0
   1ba92:	f47f af52 	bne.w	1b93a <SmpDbService+0x36>
}
   1ba96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
   1ba9a:	4812      	ldr	r0, [pc, #72]	; (1bae4 <SmpDbService+0x1e0>)
   1ba9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1baa0:	f002 bd16 	b.w	1e4d0 <WsfTimerStartMs>
        pRec->failCount = 0;
   1baa4:	71e2      	strb	r2, [r4, #7]
  if (pRec->lockMs > 0)
   1baa6:	2b00      	cmp	r3, #0
   1baa8:	f47f af77 	bne.w	1b99a <SmpDbService+0x96>
  if (pRec->attemptMult > 0)
   1baac:	8923      	ldrh	r3, [r4, #8]
   1baae:	2b00      	cmp	r3, #0
   1bab0:	f43f af30 	beq.w	1b914 <SmpDbService+0x10>
   1bab4:	e771      	b.n	1b99a <SmpDbService+0x96>
  if (pRec->failCount > 0)
   1bab6:	2800      	cmp	r0, #0
   1bab8:	d0a5      	beq.n	1ba06 <SmpDbService+0x102>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1baba:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1babe:	2b00      	cmp	r3, #0
   1bac0:	f47f af31 	bne.w	1b926 <SmpDbService+0x22>
   1bac4:	e7a7      	b.n	1ba16 <SmpDbService+0x112>
  if (pRec->failCount > 0)
   1bac6:	2800      	cmp	r0, #0
   1bac8:	d0db      	beq.n	1ba82 <SmpDbService+0x17e>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
   1baca:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   1bace:	2b00      	cmp	r3, #0
   1bad0:	f47f af33 	bne.w	1b93a <SmpDbService+0x36>
   1bad4:	e7df      	b.n	1ba96 <SmpDbService+0x192>
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
   1bad6:	6929      	ldr	r1, [r5, #16]
   1bad8:	62a1      	str	r1, [r4, #40]	; 0x28
   1bada:	e791      	b.n	1ba00 <SmpDbService+0xfc>
   1badc:	1000598c 	.word	0x1000598c
   1bae0:	10002c30 	.word	0x10002c30
   1bae4:	100059d4 	.word	0x100059d4

0001bae8 <smpL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   1bae8:	b530      	push	{r4, r5, lr}
   1baea:	b087      	sub	sp, #28
   1baec:	460d      	mov	r5, r1
   1baee:	4614      	mov	r4, r2
/*************************************************************************************************/
smpCcb_t *smpCcbByHandle(uint16_t handle)
{
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   1baf0:	f7f1 fc1c 	bl	d32c <DmConnIdByHandle>
   1baf4:	2800      	cmp	r0, #0
   1baf6:	d039      	beq.n	1bb6c <smpL2cDataCback+0x84>
  cmdCode = *(pPacket + L2C_PAYLOAD_START);
   1baf8:	f894 c008 	ldrb.w	ip, [r4, #8]
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   1bafc:	f10c 33ff 	add.w	r3, ip, #4294967295
   1bb00:	2b0d      	cmp	r3, #13
  {
    return &smpCb.ccb[connId - 1];
   1bb02:	f100 30ff 	add.w	r0, r0, #4294967295
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   1bb06:	d804      	bhi.n	1bb12 <smpL2cDataCback+0x2a>
      (len == smpPktLenTbl[cmdCode]) &&
   1bb08:	4b1c      	ldr	r3, [pc, #112]	; (1bb7c <smpL2cDataCback+0x94>)
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
   1bb0a:	f813 300c 	ldrb.w	r3, [r3, ip]
   1bb0e:	42ab      	cmp	r3, r5
   1bb10:	d00e      	beq.n	1bb30 <smpL2cDataCback+0x48>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   1bb12:	4b1b      	ldr	r3, [pc, #108]	; (1bb80 <smpL2cDataCback+0x98>)
   1bb14:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1bb18:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1bb1c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
   1bb20:	4818      	ldr	r0, [pc, #96]	; (1bb84 <smpL2cDataCback+0x9c>)
   1bb22:	462a      	mov	r2, r5
   1bb24:	4661      	mov	r1, ip
}
   1bb26:	b007      	add	sp, #28
   1bb28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
   1bb2c:	f002 bdb4 	b.w	1e698 <WsfTrace>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   1bb30:	4a13      	ldr	r2, [pc, #76]	; (1bb80 <smpL2cDataCback+0x98>)
   1bb32:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   1bb36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1bb3a:	00c1      	lsls	r1, r0, #3
   1bb3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
      (len == smpPktLenTbl[cmdCode]) &&
   1bb40:	4563      	cmp	r3, ip
   1bb42:	d015      	beq.n	1bb70 <smpL2cDataCback+0x88>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
   1bb44:	f1bc 0f05 	cmp.w	ip, #5
   1bb48:	d1ea      	bne.n	1bb20 <smpL2cDataCback+0x38>
      msg.hdr.status = *(pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
   1bb4a:	7a63      	ldrb	r3, [r4, #9]
   1bb4c:	f88d 3003 	strb.w	r3, [sp, #3]
      msg.hdr.event = SMP_MSG_CMD_PAIRING_FAILED;
   1bb50:	2507      	movs	r5, #7
    msg.hdr.param = pCcb->connId;
   1bb52:	4408      	add	r0, r1
   1bb54:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    smpSmExecute(pCcb, &msg);
   1bb58:	4669      	mov	r1, sp
    msg.hdr.param = pCcb->connId;
   1bb5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   1bb5e:	f88d 5002 	strb.w	r5, [sp, #2]
   1bb62:	f8ad 3000 	strh.w	r3, [sp]
    msg.data.pPacket = pPacket;
   1bb66:	9401      	str	r4, [sp, #4]
    smpSmExecute(pCcb, &msg);
   1bb68:	f7ff fcce 	bl	1b508 <smpSmExecute>
}
   1bb6c:	b007      	add	sp, #28
   1bb6e:	bd30      	pop	{r4, r5, pc}
    if (cmdCode == SMP_CMD_PAIR_FAIL)
   1bb70:	2b05      	cmp	r3, #5
      msg.hdr.event = SMP_MSG_CMD_PKT;
   1bb72:	bf18      	it	ne
   1bb74:	2506      	movne	r5, #6
    if (cmdCode == SMP_CMD_PAIR_FAIL)
   1bb76:	d1ec      	bne.n	1bb52 <smpL2cDataCback+0x6a>
   1bb78:	e7e7      	b.n	1bb4a <smpL2cDataCback+0x62>
   1bb7a:	bf00      	nop
   1bb7c:	00027a68 	.word	0x00027a68
   1bb80:	100059e4 	.word	0x100059e4
   1bb84:	000279f8 	.word	0x000279f8

0001bb88 <smpDmConnCback>:
{
   1bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb8a:	4605      	mov	r5, r0
  pCcb = smpCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   1bb8c:	7800      	ldrb	r0, [r0, #0]
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1bb8e:	78ab      	ldrb	r3, [r5, #2]
   1bb90:	2b27      	cmp	r3, #39	; 0x27
{
   1bb92:	b083      	sub	sp, #12
/*************************************************************************************************/
smpCcb_t *smpCcbByConnId(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &smpCb.ccb[connId - 1];
   1bb94:	f100 34ff 	add.w	r4, r0, #4294967295
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1bb98:	d00b      	beq.n	1bbb2 <smpDmConnCback+0x2a>
  else if (pCcb->connId != DM_CONN_ID_NONE)
   1bb9a:	4a40      	ldr	r2, [pc, #256]	; (1bc9c <smpDmConnCback+0x114>)
   1bb9c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1bba0:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   1bba4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   1bba8:	b10a      	cbz	r2, 1bbae <smpDmConnCback+0x26>
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1bbaa:	2b28      	cmp	r3, #40	; 0x28
   1bbac:	d04c      	beq.n	1bc48 <smpDmConnCback+0xc0>
}
   1bbae:	b003      	add	sp, #12
   1bbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (DmConnRole((dmConnId_t) pDmEvt->hdr.param) == DM_ROLE_MASTER)
   1bbb2:	f7f1 fc6f 	bl	d494 <DmConnRole>
   1bbb6:	4f39      	ldr	r7, [pc, #228]	; (1bc9c <smpDmConnCback+0x114>)
    pCcb->handle = pDmEvt->connOpen.handle;
   1bbb8:	88eb      	ldrh	r3, [r5, #6]
   1bbba:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1bbbe:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
   1bbc2:	2800      	cmp	r0, #0
    pCcb->secReq = FALSE;
   1bbc4:	f04f 0600 	mov.w	r6, #0
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   1bbc8:	7828      	ldrb	r0, [r5, #0]
    pCcb->handle = pDmEvt->connOpen.handle;
   1bbca:	8723      	strh	r3, [r4, #56]	; 0x38
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
   1bbcc:	bf0b      	itete	eq
   1bbce:	220b      	moveq	r2, #11
   1bbd0:	2201      	movne	r2, #1
   1bbd2:	2301      	moveq	r3, #1
   1bbd4:	4633      	movne	r3, r6
   1bbd6:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
   1bbda:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   1bbde:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    pCcb->secReq = FALSE;
   1bbe2:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
    pCcb->flowDisabled = FALSE;
   1bbe6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
   1bbea:	f7ff fe2f 	bl	1b84c <SmpDbGetFailureCount>
    smpResumeAttemptsState((dmConnId_t) pDmEvt->hdr.param);
   1bbee:	782d      	ldrb	r5, [r5, #0]
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
   1bbf0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    pCcb->lastSentKey = 0;
   1bbf4:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
    pCcb->state = 0;
   1bbf8:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  uint32_t timeMs = SmpDbGetPairingDisabledTime(connId);
   1bbfc:	4628      	mov	r0, r5
   1bbfe:	f7ff fdfb 	bl	1b7f8 <SmpDbGetPairingDisabledTime>
  if (timeMs)
   1bc02:	4604      	mov	r4, r0
   1bc04:	2800      	cmp	r0, #0
   1bc06:	d0d2      	beq.n	1bbae <smpDmConnCback+0x26>
    if (smpCb.lescSupported)
   1bc08:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
  return &smpCb.ccb[connId - 1];
   1bc0c:	1e6e      	subs	r6, r5, #1
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
   1bc0e:	4628      	mov	r0, r5
    if (smpCb.lescSupported)
   1bc10:	2b00      	cmp	r3, #0
   1bc12:	d035      	beq.n	1bc80 <smpDmConnCback+0xf8>
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
   1bc14:	f7f1 fc3e 	bl	d494 <DmConnRole>
   1bc18:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   1bc1c:	2801      	cmp	r0, #1
   1bc1e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1bc22:	bf0c      	ite	eq
   1bc24:	2226      	moveq	r2, #38	; 0x26
   1bc26:	2224      	movne	r2, #36	; 0x24
   1bc28:	00f0      	lsls	r0, r6, #3
   1bc2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1bc2e:	4430      	add	r0, r6
   1bc30:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   1bc34:	2210      	movs	r2, #16
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
   1bc36:	4618      	mov	r0, r3
   1bc38:	4621      	mov	r1, r4
   1bc3a:	4410      	add	r0, r2
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
   1bc3c:	769a      	strb	r2, [r3, #26]
}
   1bc3e:	b003      	add	sp, #12
   1bc40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
   1bc44:	f002 bc44 	b.w	1e4d0 <WsfTimerStartMs>
      SmpDbSetFailureCount((dmConnId_t) pDmEvt->hdr.param, pCcb->attempts);
   1bc48:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   1bc4c:	f7ff fde6 	bl	1b81c <SmpDbSetFailureCount>
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   1bc50:	7a2b      	ldrb	r3, [r5, #8]
      hdr.param = pDmEvt->hdr.param;
   1bc52:	8828      	ldrh	r0, [r5, #0]
   1bc54:	f8ad 0004 	strh.w	r0, [sp, #4]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   1bc58:	3320      	adds	r3, #32
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
   1bc5a:	220a      	movs	r2, #10
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1bc5c:	4620      	mov	r0, r4
   1bc5e:	a901      	add	r1, sp, #4
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
   1bc60:	f88d 2006 	strb.w	r2, [sp, #6]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
   1bc64:	f88d 3007 	strb.w	r3, [sp, #7]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1bc68:	f7ff fc4e 	bl	1b508 <smpSmExecute>
      if (pCcb->pQueued != NULL)
   1bc6c:	6b60      	ldr	r0, [r4, #52]	; 0x34
      pCcb->connId = DM_CONN_ID_NONE;
   1bc6e:	2500      	movs	r5, #0
   1bc70:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      if (pCcb->pQueued != NULL)
   1bc74:	2800      	cmp	r0, #0
   1bc76:	d09a      	beq.n	1bbae <smpDmConnCback+0x26>
        WsfMsgFree(pCcb->pQueued);
   1bc78:	f002 f996 	bl	1dfa8 <WsfMsgFree>
        pCcb->pQueued = NULL;
   1bc7c:	6365      	str	r5, [r4, #52]	; 0x34
}
   1bc7e:	e796      	b.n	1bbae <smpDmConnCback+0x26>
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SM_ST_ATTEMPTS : SMPI_SM_ST_ATTEMPTS;
   1bc80:	f7f1 fc08 	bl	d494 <DmConnRole>
   1bc84:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   1bc88:	2801      	cmp	r0, #1
   1bc8a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1bc8e:	bf0c      	ite	eq
   1bc90:	220d      	moveq	r2, #13
   1bc92:	220c      	movne	r2, #12
   1bc94:	00f0      	lsls	r0, r6, #3
   1bc96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   1bc9a:	e7c8      	b.n	1bc2e <smpDmConnCback+0xa6>
   1bc9c:	100059e4 	.word	0x100059e4

0001bca0 <smpL2cCtrlCback>:
{
   1bca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return &smpCb.ccb[connId - 1];
   1bca4:	7804      	ldrb	r4, [r0, #0]
  if (pCcb->connId != DM_CONN_ID_NONE)
   1bca6:	4f17      	ldr	r7, [pc, #92]	; (1bd04 <smpL2cCtrlCback+0x64>)
  return &smpCb.ccb[connId - 1];
   1bca8:	3c01      	subs	r4, #1
  if (pCcb->connId != DM_CONN_ID_NONE)
   1bcaa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1bcae:	eb07 05c3 	add.w	r5, r7, r3, lsl #3
   1bcb2:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   1bcb6:	b1db      	cbz	r3, 1bcf0 <smpL2cCtrlCback+0x50>
    pCcb->flowDisabled = (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND);
   1bcb8:	7883      	ldrb	r3, [r0, #2]
   1bcba:	2b01      	cmp	r3, #1
   1bcbc:	bf0c      	ite	eq
   1bcbe:	2301      	moveq	r3, #1
   1bcc0:	2300      	movne	r3, #0
   1bcc2:	4606      	mov	r6, r0
   1bcc4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if (!pCcb->flowDisabled)
   1bcc8:	d012      	beq.n	1bcf0 <smpL2cCtrlCback+0x50>
      if (pCcb->pQueued != NULL)
   1bcca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1bccc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
   1bcd0:	b143      	cbz	r3, 1bce4 <smpL2cCtrlCback+0x44>
        pCcb->pQueued = NULL;
   1bcd2:	2200      	movs	r2, #0
   1bcd4:	636a      	str	r2, [r5, #52]	; 0x34
    pCcb->pQueued = pPkt;
  }
  /* else send it to L2CAP */
  else
  {
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   1bcd6:	490c      	ldr	r1, [pc, #48]	; (1bd08 <smpL2cCtrlCback+0x68>)
   1bcd8:	7a1a      	ldrb	r2, [r3, #8]
   1bcda:	2006      	movs	r0, #6
   1bcdc:	5c8a      	ldrb	r2, [r1, r2]
   1bcde:	8f29      	ldrh	r1, [r5, #56]	; 0x38
   1bce0:	f7fd feba 	bl	19a58 <L2cDataReq>
 *  \return TRUE if in idle state, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpStateIdle(smpCcb_t *pCcb)
{
  return (pCcb->state == 0);
   1bce4:	4444      	add	r4, r8
   1bce6:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
      if (!smpStateIdle(pCcb))
   1bcea:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   1bcee:	b90b      	cbnz	r3, 1bcf4 <smpL2cCtrlCback+0x54>
}
   1bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pMsg->event = SMP_MSG_INT_SEND_NEXT_KEY;
   1bcf4:	230c      	movs	r3, #12
   1bcf6:	70b3      	strb	r3, [r6, #2]
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1bcf8:	4631      	mov	r1, r6
   1bcfa:	4628      	mov	r0, r5
}
   1bcfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1bd00:	f7ff bc02 	b.w	1b508 <smpSmExecute>
   1bd04:	100059e4 	.word	0x100059e4
   1bd08:	00027a68 	.word	0x00027a68

0001bd0c <smpCcbByConnId>:
  return &smpCb.ccb[connId - 1];
   1bd0c:	4b03      	ldr	r3, [pc, #12]	; (1bd1c <smpCcbByConnId+0x10>)
   1bd0e:	3801      	subs	r0, #1
   1bd10:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1bd14:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1bd18:	4770      	bx	lr
   1bd1a:	bf00      	nop
   1bd1c:	100059e4 	.word	0x100059e4

0001bd20 <smpCalcC1Part1>:
{
   1bd20:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pCcb->initiator)
   1bd22:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
   1bd26:	4604      	mov	r4, r0
   1bd28:	b089      	sub	sp, #36	; 0x24
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1bd2a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   1bd2e:	460e      	mov	r6, r1
   1bd30:	4615      	mov	r5, r2
  if (pCcb->initiator)
   1bd32:	b1a3      	cbz	r3, 1bd5e <smpCalcC1Part1+0x3e>
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1bd34:	f7f1 fb58 	bl	d3e8 <DmConnLocalRpa>
   1bd38:	f7f9 fdd4 	bl	158e4 <BdaIsZeros>
   1bd3c:	2800      	cmp	r0, #0
   1bd3e:	f040 808a 	bne.w	1be56 <smpCalcC1Part1+0x136>
      iAddrType = DM_ADDR_RANDOM;
   1bd42:	2701      	movs	r7, #1
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   1bd44:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1bd48:	f7f1 fb44 	bl	d3d4 <DmConnPeerRpa>
   1bd4c:	f7f9 fdca 	bl	158e4 <BdaIsZeros>
   1bd50:	b1a0      	cbz	r0, 1bd7c <smpCalcC1Part1+0x5c>
      rAddrType = DmConnPeerAddrType(pCcb->connId);
   1bd52:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1bd56:	f7f1 fb15 	bl	d384 <DmConnPeerAddrType>
   1bd5a:	4686      	mov	lr, r0
   1bd5c:	e010      	b.n	1bd80 <smpCalcC1Part1+0x60>
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
   1bd5e:	f7f1 fb39 	bl	d3d4 <DmConnPeerRpa>
   1bd62:	f7f9 fdbf 	bl	158e4 <BdaIsZeros>
   1bd66:	2800      	cmp	r0, #0
   1bd68:	d162      	bne.n	1be30 <smpCalcC1Part1+0x110>
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1bd6a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
      iAddrType = DM_ADDR_RANDOM;
   1bd6e:	2701      	movs	r7, #1
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1bd70:	f7f1 fb3a 	bl	d3e8 <DmConnLocalRpa>
   1bd74:	f7f9 fdb6 	bl	158e4 <BdaIsZeros>
   1bd78:	2800      	cmp	r0, #0
   1bd7a:	d166      	bne.n	1be4a <smpCalcC1Part1+0x12a>
      rAddrType = DM_ADDR_RANDOM;
   1bd7c:	f04f 0e01 	mov.w	lr, #1
  *p++ = iAddrType ^ *pRand++;
   1bd80:	7829      	ldrb	r1, [r5, #0]
  *p++ = rAddrType ^ *pRand++;
   1bd82:	786b      	ldrb	r3, [r5, #1]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bd84:	f8d5 c002 	ldr.w	ip, [r5, #2]
   1bd88:	6a22      	ldr	r2, [r4, #32]
  *p++ = iAddrType ^ *pRand++;
   1bd8a:	404f      	eors	r7, r1
  *p++ = rAddrType ^ *pRand++;
   1bd8c:	ea8e 0e03 	eor.w	lr, lr, r3
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bd90:	79a9      	ldrb	r1, [r5, #6]
   1bd92:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  *p++ = iAddrType ^ *pRand++;
   1bd96:	f88d 7010 	strb.w	r7, [sp, #16]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bd9a:	ea8c 0c02 	eor.w	ip, ip, r2
   1bd9e:	404b      	eors	r3, r1
   1bda0:	79ea      	ldrb	r2, [r5, #7]
   1bda2:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   1bda6:	f88d 3016 	strb.w	r3, [sp, #22]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1bdaa:	4630      	mov	r0, r6
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1bdac:	f8d5 3009 	ldr.w	r3, [r5, #9]
   1bdb0:	f8d4 6027 	ldr.w	r6, [r4, #39]	; 0x27
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bdb4:	7a2f      	ldrb	r7, [r5, #8]
  *p++ = rAddrType ^ *pRand++;
   1bdb6:	f88d e011 	strb.w	lr, [sp, #17]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bdba:	4051      	eors	r1, r2
   1bdbc:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1bdc0:	f894 e02b 	ldrb.w	lr, [r4, #43]	; 0x2b
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bdc4:	f8cd c012 	str.w	ip, [sp, #18]
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1bdc8:	4073      	eors	r3, r6
   1bdca:	7b6e      	ldrb	r6, [r5, #13]
   1bdcc:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
   1bdd0:	f8cd 3019 	str.w	r3, [sp, #25]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bdd4:	407a      	eors	r2, r7
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1bdd6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bdda:	f88d 2018 	strb.w	r2, [sp, #24]
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1bdde:	ea8e 0e06 	eor.w	lr, lr, r6
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1bde2:	4a20      	ldr	r2, [pc, #128]	; (1be64 <smpCalcC1Part1+0x144>)
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1bde4:	7bae      	ldrb	r6, [r5, #14]
   1bde6:	7bed      	ldrb	r5, [r5, #15]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
   1bde8:	f88d 1017 	strb.w	r1, [sp, #23]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1bdec:	210b      	movs	r1, #11
   1bdee:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1bdf2:	f88d e01d 	strb.w	lr, [sp, #29]
   1bdf6:	ea8c 0c06 	eor.w	ip, ip, r6
   1bdfa:	405d      	eors	r5, r3
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1bdfc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1be00:	9100      	str	r1, [sp, #0]
   1be02:	a904      	add	r1, sp, #16
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
   1be04:	f88d c01e 	strb.w	ip, [sp, #30]
   1be08:	f88d 501f 	strb.w	r5, [sp, #31]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1be0c:	f7f5 fda8 	bl	11960 <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
   1be10:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1be12:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
   1be16:	d001      	beq.n	1be1c <smpCalcC1Part1+0xfc>
}
   1be18:	b009      	add	sp, #36	; 0x24
   1be1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1be1c:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1be20:	a903      	add	r1, sp, #12
   1be22:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1be24:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1be28:	f7ff fb6e 	bl	1b508 <smpSmExecute>
}
   1be2c:	b009      	add	sp, #36	; 0x24
   1be2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      iAddrType = DmConnPeerAddrType(pCcb->connId);
   1be30:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1be34:	f7f1 faa6 	bl	d384 <DmConnPeerAddrType>
   1be38:	4607      	mov	r7, r0
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
   1be3a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1be3e:	f7f1 fad3 	bl	d3e8 <DmConnLocalRpa>
   1be42:	f7f9 fd4f 	bl	158e4 <BdaIsZeros>
   1be46:	2800      	cmp	r0, #0
   1be48:	d098      	beq.n	1bd7c <smpCalcC1Part1+0x5c>
      rAddrType = DmConnLocalAddrType(pCcb->connId);
   1be4a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1be4e:	f7f1 faad 	bl	d3ac <DmConnLocalAddrType>
   1be52:	4686      	mov	lr, r0
   1be54:	e794      	b.n	1bd80 <smpCalcC1Part1+0x60>
      iAddrType = DmConnLocalAddrType(pCcb->connId);
   1be56:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
   1be5a:	f7f1 faa7 	bl	d3ac <DmConnLocalAddrType>
   1be5e:	4607      	mov	r7, r0
   1be60:	e770      	b.n	1bd44 <smpCalcC1Part1+0x24>
   1be62:	bf00      	nop
   1be64:	100059e4 	.word	0x100059e4

0001be68 <smpCalcC1Part2>:
{
   1be68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (pCcb->initiator)
   1be6c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
   1be70:	4607      	mov	r7, r0
   1be72:	b089      	sub	sp, #36	; 0x24
    pIaddr = DmConnLocalRpa(pCcb->connId);
   1be74:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   1be78:	4688      	mov	r8, r1
   1be7a:	4614      	mov	r4, r2
  if (pCcb->initiator)
   1be7c:	2b00      	cmp	r3, #0
   1be7e:	d04c      	beq.n	1bf1a <smpCalcC1Part2+0xb2>
    pIaddr = DmConnLocalRpa(pCcb->connId);
   1be80:	f7f1 fab2 	bl	d3e8 <DmConnLocalRpa>
   1be84:	4605      	mov	r5, r0
    if (BdaIsZeros(pIaddr))
   1be86:	f7f9 fd2d 	bl	158e4 <BdaIsZeros>
   1be8a:	2800      	cmp	r0, #0
   1be8c:	f040 80b2 	bne.w	1bff4 <smpCalcC1Part2+0x18c>
    pRaddr = DmConnPeerRpa(pCcb->connId);
   1be90:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1be94:	f7f1 fa9e 	bl	d3d4 <DmConnPeerRpa>
   1be98:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   1be9a:	f7f9 fd23 	bl	158e4 <BdaIsZeros>
   1be9e:	2800      	cmp	r0, #0
   1bea0:	f040 80b7 	bne.w	1c012 <smpCalcC1Part2+0x1aa>
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1bea4:	a904      	add	r1, sp, #16
   1bea6:	1c73      	adds	r3, r6, #1
   1bea8:	1acb      	subs	r3, r1, r3
   1beaa:	2b02      	cmp	r3, #2
   1beac:	d94f      	bls.n	1bf4e <smpCalcC1Part2+0xe6>
    *p++ = *pRaddr++ ^ *pPart1++;
   1beae:	6830      	ldr	r0, [r6, #0]
   1beb0:	6823      	ldr	r3, [r4, #0]
   1beb2:	7932      	ldrb	r2, [r6, #4]
   1beb4:	4058      	eors	r0, r3
   1beb6:	9004      	str	r0, [sp, #16]
   1beb8:	7920      	ldrb	r0, [r4, #4]
   1beba:	7973      	ldrb	r3, [r6, #5]
   1bebc:	4042      	eors	r2, r0
   1bebe:	7960      	ldrb	r0, [r4, #5]
   1bec0:	f88d 2014 	strb.w	r2, [sp, #20]
   1bec4:	4043      	eors	r3, r0
   1bec6:	f88d 3015 	strb.w	r3, [sp, #21]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1beca:	ab08      	add	r3, sp, #32
   1becc:	1b5b      	subs	r3, r3, r5
   1bece:	3b0b      	subs	r3, #11
   1bed0:	2b02      	cmp	r3, #2
   1bed2:	d965      	bls.n	1bfa0 <smpCalcC1Part2+0x138>
    *p++ = *pIaddr++ ^ *pPart1++;
   1bed4:	682b      	ldr	r3, [r5, #0]
   1bed6:	f8d4 2006 	ldr.w	r2, [r4, #6]
   1beda:	7aa0      	ldrb	r0, [r4, #10]
   1bedc:	405a      	eors	r2, r3
   1bede:	f8cd 2016 	str.w	r2, [sp, #22]
   1bee2:	792b      	ldrb	r3, [r5, #4]
   1bee4:	7ae2      	ldrb	r2, [r4, #11]
   1bee6:	4043      	eors	r3, r0
   1bee8:	f88d 301a 	strb.w	r3, [sp, #26]
   1beec:	796b      	ldrb	r3, [r5, #5]
   1beee:	4053      	eors	r3, r2
   1bef0:	f88d 301b 	strb.w	r3, [sp, #27]
  *p++ = *pPart1++;
   1bef4:	68e3      	ldr	r3, [r4, #12]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1bef6:	4a52      	ldr	r2, [pc, #328]	; (1c040 <smpCalcC1Part2+0x1d8>)
  *p++ = *pPart1++;
   1bef8:	9307      	str	r3, [sp, #28]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1befa:	230b      	movs	r3, #11
   1befc:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
   1bf00:	9300      	str	r3, [sp, #0]
   1bf02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   1bf06:	4640      	mov	r0, r8
   1bf08:	f7f5 fd2a 	bl	11960 <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
   1bf0c:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1bf0e:	f887 0041 	strb.w	r0, [r7, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
   1bf12:	d064      	beq.n	1bfde <smpCalcC1Part2+0x176>
}
   1bf14:	b009      	add	sp, #36	; 0x24
   1bf16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pIaddr = DmConnPeerRpa(pCcb->connId);
   1bf1a:	f7f1 fa5b 	bl	d3d4 <DmConnPeerRpa>
   1bf1e:	4605      	mov	r5, r0
    if (BdaIsZeros(pIaddr))
   1bf20:	f7f9 fce0 	bl	158e4 <BdaIsZeros>
   1bf24:	2800      	cmp	r0, #0
   1bf26:	d17a      	bne.n	1c01e <smpCalcC1Part2+0x1b6>
    pRaddr = DmConnLocalRpa(pCcb->connId);
   1bf28:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1bf2c:	f7f1 fa5c 	bl	d3e8 <DmConnLocalRpa>
   1bf30:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   1bf32:	f7f9 fcd7 	bl	158e4 <BdaIsZeros>
   1bf36:	2800      	cmp	r0, #0
   1bf38:	d0b4      	beq.n	1bea4 <smpCalcC1Part2+0x3c>
      pRaddr = DmConnLocalAddr(pCcb->connId);
   1bf3a:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1bf3e:	f7f1 fa3f 	bl	d3c0 <DmConnLocalAddr>
   1bf42:	4606      	mov	r6, r0
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1bf44:	a904      	add	r1, sp, #16
   1bf46:	1c73      	adds	r3, r6, #1
   1bf48:	1acb      	subs	r3, r1, r3
   1bf4a:	2b02      	cmp	r3, #2
   1bf4c:	d8af      	bhi.n	1beae <smpCalcC1Part2+0x46>
    *p++ = *pRaddr++ ^ *pPart1++;
   1bf4e:	f896 9000 	ldrb.w	r9, [r6]
   1bf52:	f896 e001 	ldrb.w	lr, [r6, #1]
   1bf56:	f896 c002 	ldrb.w	ip, [r6, #2]
   1bf5a:	78f0      	ldrb	r0, [r6, #3]
   1bf5c:	7932      	ldrb	r2, [r6, #4]
   1bf5e:	7973      	ldrb	r3, [r6, #5]
   1bf60:	7826      	ldrb	r6, [r4, #0]
   1bf62:	ea89 0606 	eor.w	r6, r9, r6
   1bf66:	f88d 6010 	strb.w	r6, [sp, #16]
   1bf6a:	7866      	ldrb	r6, [r4, #1]
   1bf6c:	ea8e 0606 	eor.w	r6, lr, r6
   1bf70:	f88d 6011 	strb.w	r6, [sp, #17]
   1bf74:	78a6      	ldrb	r6, [r4, #2]
   1bf76:	ea8c 0606 	eor.w	r6, ip, r6
   1bf7a:	f88d 6012 	strb.w	r6, [sp, #18]
   1bf7e:	78e6      	ldrb	r6, [r4, #3]
   1bf80:	4070      	eors	r0, r6
   1bf82:	f88d 0013 	strb.w	r0, [sp, #19]
   1bf86:	7920      	ldrb	r0, [r4, #4]
   1bf88:	4042      	eors	r2, r0
   1bf8a:	f88d 2014 	strb.w	r2, [sp, #20]
   1bf8e:	7962      	ldrb	r2, [r4, #5]
   1bf90:	4053      	eors	r3, r2
   1bf92:	f88d 3015 	strb.w	r3, [sp, #21]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1bf96:	ab08      	add	r3, sp, #32
   1bf98:	1b5b      	subs	r3, r3, r5
   1bf9a:	3b0b      	subs	r3, #11
   1bf9c:	2b02      	cmp	r3, #2
   1bf9e:	d899      	bhi.n	1bed4 <smpCalcC1Part2+0x6c>
    *p++ = *pIaddr++ ^ *pPart1++;
   1bfa0:	782b      	ldrb	r3, [r5, #0]
   1bfa2:	79a2      	ldrb	r2, [r4, #6]
   1bfa4:	4053      	eors	r3, r2
   1bfa6:	f88d 3016 	strb.w	r3, [sp, #22]
   1bfaa:	786a      	ldrb	r2, [r5, #1]
   1bfac:	79e3      	ldrb	r3, [r4, #7]
   1bfae:	4053      	eors	r3, r2
   1bfb0:	f88d 3017 	strb.w	r3, [sp, #23]
   1bfb4:	78aa      	ldrb	r2, [r5, #2]
   1bfb6:	7a23      	ldrb	r3, [r4, #8]
   1bfb8:	4053      	eors	r3, r2
   1bfba:	f88d 3018 	strb.w	r3, [sp, #24]
   1bfbe:	78eb      	ldrb	r3, [r5, #3]
   1bfc0:	7a62      	ldrb	r2, [r4, #9]
   1bfc2:	4053      	eors	r3, r2
   1bfc4:	f88d 3019 	strb.w	r3, [sp, #25]
   1bfc8:	792b      	ldrb	r3, [r5, #4]
   1bfca:	7aa2      	ldrb	r2, [r4, #10]
   1bfcc:	4053      	eors	r3, r2
   1bfce:	f88d 301a 	strb.w	r3, [sp, #26]
   1bfd2:	796a      	ldrb	r2, [r5, #5]
   1bfd4:	7ae3      	ldrb	r3, [r4, #11]
   1bfd6:	4053      	eors	r3, r2
   1bfd8:	f88d 301b 	strb.w	r3, [sp, #27]
  for (i = BDA_ADDR_LEN; i > 0; i--)
   1bfdc:	e78a      	b.n	1bef4 <smpCalcC1Part2+0x8c>
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bfde:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1bfe2:	a903      	add	r1, sp, #12
   1bfe4:	4638      	mov	r0, r7
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1bfe6:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1bfea:	f7ff fa8d 	bl	1b508 <smpSmExecute>
}
   1bfee:	b009      	add	sp, #36	; 0x24
   1bff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pIaddr = DmConnLocalAddr(pCcb->connId);
   1bff4:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1bff8:	f7f1 f9e2 	bl	d3c0 <DmConnLocalAddr>
   1bffc:	4605      	mov	r5, r0
    pRaddr = DmConnPeerRpa(pCcb->connId);
   1bffe:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1c002:	f7f1 f9e7 	bl	d3d4 <DmConnPeerRpa>
   1c006:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   1c008:	f7f9 fc6c 	bl	158e4 <BdaIsZeros>
   1c00c:	2800      	cmp	r0, #0
   1c00e:	f43f af49 	beq.w	1bea4 <smpCalcC1Part2+0x3c>
      pRaddr = DmConnPeerAddr(pCcb->connId);
   1c012:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1c016:	f7f1 f9bf 	bl	d398 <DmConnPeerAddr>
   1c01a:	4606      	mov	r6, r0
   1c01c:	e742      	b.n	1bea4 <smpCalcC1Part2+0x3c>
      pIaddr = DmConnPeerAddr(pCcb->connId);
   1c01e:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1c022:	f7f1 f9b9 	bl	d398 <DmConnPeerAddr>
   1c026:	4605      	mov	r5, r0
    pRaddr = DmConnLocalRpa(pCcb->connId);
   1c028:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
   1c02c:	f7f1 f9dc 	bl	d3e8 <DmConnLocalRpa>
   1c030:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
   1c032:	f7f9 fc57 	bl	158e4 <BdaIsZeros>
   1c036:	2800      	cmp	r0, #0
   1c038:	f43f af34 	beq.w	1bea4 <smpCalcC1Part2+0x3c>
   1c03c:	e77d      	b.n	1bf3a <smpCalcC1Part2+0xd2>
   1c03e:	bf00      	nop
   1c040:	100059e4 	.word	0x100059e4

0001c044 <smpCalcS1>:
{
   1c044:	b570      	push	{r4, r5, r6, lr}
   1c046:	b088      	sub	sp, #32
   1c048:	4616      	mov	r6, r2
   1c04a:	4604      	mov	r4, r0
   1c04c:	460d      	mov	r5, r1
  Calc128Cpy64(buf, pRand2);
   1c04e:	a804      	add	r0, sp, #16
   1c050:	4619      	mov	r1, r3
   1c052:	f7f9 fc63 	bl	1591c <Calc128Cpy64>
  Calc128Cpy64(&buf[SMP_RAND8_LEN], pRand1);
   1c056:	4631      	mov	r1, r6
   1c058:	a806      	add	r0, sp, #24
   1c05a:	f7f9 fc5f 	bl	1591c <Calc128Cpy64>
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1c05e:	4a0d      	ldr	r2, [pc, #52]	; (1c094 <smpCalcS1+0x50>)
   1c060:	230b      	movs	r3, #11
   1c062:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
   1c066:	9300      	str	r3, [sp, #0]
   1c068:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1c06c:	a904      	add	r1, sp, #16
   1c06e:	4628      	mov	r0, r5
   1c070:	f7f5 fc76 	bl	11960 <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
   1c074:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
   1c076:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
   1c07a:	d001      	beq.n	1c080 <smpCalcS1+0x3c>
}
   1c07c:	b008      	add	sp, #32
   1c07e:	bd70      	pop	{r4, r5, r6, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c080:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c084:	a903      	add	r1, sp, #12
   1c086:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c088:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c08c:	f7ff fa3c 	bl	1b508 <smpSmExecute>
}
   1c090:	b008      	add	sp, #32
   1c092:	bd70      	pop	{r4, r5, r6, pc}
   1c094:	100059e4 	.word	0x100059e4

0001c098 <smpGenerateLtk>:
{
   1c098:	b570      	push	{r4, r5, r6, lr}
  smpScratch_t *pScr = pCcb->pScr;
   1c09a:	6b04      	ldr	r4, [r0, #48]	; 0x30
  p = pScr->keyInd.keyData.ltk.key;
   1c09c:	1d26      	adds	r6, r4, #4
  SecRand(p, pScr->keyInd.encKeyLen);
   1c09e:	f894 1020 	ldrb.w	r1, [r4, #32]
{
   1c0a2:	4605      	mov	r5, r0
  SecRand(p, pScr->keyInd.encKeyLen);
   1c0a4:	4630      	mov	r0, r6
   1c0a6:	f7f5 febf 	bl	11e28 <SecRand>
  p += pScr->keyInd.encKeyLen;
   1c0aa:	f894 0020 	ldrb.w	r0, [r4, #32]
  memset(p, 0, (SMP_KEY_LEN - pScr->keyInd.encKeyLen));
   1c0ae:	2100      	movs	r1, #0
   1c0b0:	f1c0 0210 	rsb	r2, r0, #16
   1c0b4:	4430      	add	r0, r6
   1c0b6:	f007 f941 	bl	2333c <memset>
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   1c0ba:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   1c0be:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   1c0c2:	f8d4 1032 	ldr.w	r1, [r4, #50]	; 0x32
   1c0c6:	6161      	str	r1, [r4, #20]
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   1c0c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   1c0cc:	f8d4 1036 	ldr.w	r1, [r4, #54]	; 0x36
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
   1c0d0:	83a3      	strh	r3, [r4, #28]
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
   1c0d2:	2201      	movs	r2, #1
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
   1c0d4:	61a1      	str	r1, [r4, #24]
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
   1c0d6:	77a2      	strb	r2, [r4, #30]
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1c0d8:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   1c0dc:	f012 0f04 	tst.w	r2, #4
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
   1c0e0:	f04f 032f 	mov.w	r3, #47	; 0x2f
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1c0e4:	bf14      	ite	ne
   1c0e6:	2202      	movne	r2, #2
   1c0e8:	2201      	moveq	r2, #1
   1c0ea:	77e2      	strb	r2, [r4, #31]
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
   1c0ec:	70a3      	strb	r3, [r4, #2]
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
   1c0ee:	4620      	mov	r0, r4
}
   1c0f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
   1c0f4:	f7f2 bb94 	b.w	e820 <DmSmpCbackExec>

0001c0f8 <smpSendPkt>:
{
   1c0f8:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->flowDisabled)
   1c0fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
   1c0fe:	4604      	mov	r4, r0
   1c100:	460d      	mov	r5, r1
  if (pCcb->flowDisabled)
   1c102:	b153      	cbz	r3, 1c11a <smpSendPkt+0x22>
    if (pCcb->pQueued != NULL)
   1c104:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1c106:	b133      	cbz	r3, 1c116 <smpSendPkt+0x1e>
      SMP_TRACE_WARN1("smpSendPkt packet discarded cmd:%d", pCcb->pQueued[L2C_PAYLOAD_START]);
   1c108:	4809      	ldr	r0, [pc, #36]	; (1c130 <smpSendPkt+0x38>)
   1c10a:	7a19      	ldrb	r1, [r3, #8]
   1c10c:	f002 fac4 	bl	1e698 <WsfTrace>
      WsfMsgFree(pCcb->pQueued);
   1c110:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1c112:	f001 ff49 	bl	1dfa8 <WsfMsgFree>
    pCcb->pQueued = pPkt;
   1c116:	6365      	str	r5, [r4, #52]	; 0x34
}
   1c118:	bd70      	pop	{r4, r5, r6, pc}
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   1c11a:	7a0b      	ldrb	r3, [r1, #8]
   1c11c:	4a05      	ldr	r2, [pc, #20]	; (1c134 <smpSendPkt+0x3c>)
   1c11e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
   1c120:	5cd2      	ldrb	r2, [r2, r3]
   1c122:	2006      	movs	r0, #6
   1c124:	462b      	mov	r3, r5
}
   1c126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
   1c12a:	f7fd bc95 	b.w	19a58 <L2cDataReq>
   1c12e:	bf00      	nop
   1c130:	00027a28 	.word	0x00027a28
   1c134:	00027a68 	.word	0x00027a68

0001c138 <smpMsgAlloc>:
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *smpMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1c138:	2100      	movs	r1, #0
   1c13a:	f001 bf23 	b.w	1df84 <WsfMsgDataAlloc>
   1c13e:	bf00      	nop

0001c140 <SmpDmMsgSend>:
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmMsgSend(smpDmMsg_t *pMsg)
{
  WsfMsgSend(smpCb.handlerId, pMsg);
   1c140:	4b02      	ldr	r3, [pc, #8]	; (1c14c <SmpDmMsgSend+0xc>)
{
   1c142:	4601      	mov	r1, r0
  WsfMsgSend(smpCb.handlerId, pMsg);
   1c144:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   1c148:	f001 bf32 	b.w	1dfb0 <WsfMsgSend>
   1c14c:	100059e4 	.word	0x100059e4

0001c150 <SmpDmEncryptInd>:
  return &smpCb.ccb[connId - 1];
   1c150:	7803      	ldrb	r3, [r0, #0]
 */
/*************************************************************************************************/
void SmpDmEncryptInd(wsfMsgHdr_t *pMsg)
{
  /* set event to SMP event type */
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   1c152:	78c1      	ldrb	r1, [r0, #3]

      /* get connection control block */
      pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);

      /* verify connection is open */
      if (pCcb->connId != DM_CONN_ID_NONE)
   1c154:	4a09      	ldr	r2, [pc, #36]	; (1c17c <SmpDmEncryptInd+0x2c>)
  return &smpCb.ccb[connId - 1];
   1c156:	3b01      	subs	r3, #1
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   1c158:	2900      	cmp	r1, #0
      if (pCcb->connId != DM_CONN_ID_NONE)
   1c15a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   1c15e:	bf0c      	ite	eq
   1c160:	2108      	moveq	r1, #8
   1c162:	2109      	movne	r1, #9
      if (pCcb->connId != DM_CONN_ID_NONE)
   1c164:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
   1c168:	7081      	strb	r1, [r0, #2]
      if (pCcb->connId != DM_CONN_ID_NONE)
   1c16a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
   1c16e:	b11a      	cbz	r2, 1c178 <SmpDmEncryptInd+0x28>
            }
        }
        else
        {
          /* send to state machine */
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1c170:	4601      	mov	r1, r0
   1c172:	4618      	mov	r0, r3
   1c174:	f7ff b9c8 	b.w	1b508 <smpSmExecute>
}
   1c178:	4770      	bx	lr
   1c17a:	bf00      	nop
   1c17c:	100059e4 	.word	0x100059e4

0001c180 <smpGetScSecLevel>:
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1c180:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1c184:	075b      	lsls	r3, r3, #29
   1c186:	d50b      	bpl.n	1c1a0 <smpGetScSecLevel+0x20>
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
   1c188:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1c18c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   1c190:	4293      	cmp	r3, r2
   1c192:	bf28      	it	cs
   1c194:	4613      	movcs	r3, r2
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
   1c196:	2b10      	cmp	r3, #16
   1c198:	bf0c      	ite	eq
   1c19a:	2003      	moveq	r0, #3
   1c19c:	2002      	movne	r0, #2
   1c19e:	4770      	bx	lr
    secLevel = DM_SEC_LEVEL_ENC;
   1c1a0:	2001      	movs	r0, #1
}
   1c1a2:	4770      	bx	lr

0001c1a4 <SmpDmGetStk>:
{
   1c1a4:	b430      	push	{r4, r5}
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   1c1a6:	4b1f      	ldr	r3, [pc, #124]	; (1c224 <SmpDmGetStk+0x80>)
   1c1a8:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
  return &smpCb.ccb[connId - 1];
   1c1ac:	3801      	subs	r0, #1
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   1c1ae:	b98a      	cbnz	r2, 1c1d4 <SmpDmGetStk+0x30>
   1c1b0:	00c2      	lsls	r2, r0, #3
  else if (pCcb->pScr != NULL)
   1c1b2:	4410      	add	r0, r2
   1c1b4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1c1b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c1ba:	b148      	cbz	r0, 1c1d0 <SmpDmGetStk+0x2c>
    *pSecLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
   1c1bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1c1c0:	f012 0f04 	tst.w	r2, #4
   1c1c4:	bf14      	ite	ne
   1c1c6:	2202      	movne	r2, #2
   1c1c8:	2201      	moveq	r2, #1
   1c1ca:	700a      	strb	r2, [r1, #0]
    return pCcb->pScr->buf.b3;
   1c1cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c1ce:	3020      	adds	r0, #32
}
   1c1d0:	bc30      	pop	{r4, r5}
   1c1d2:	4770      	bx	lr
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
   1c1d4:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
   1c1d8:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
   1c1dc:	00c2      	lsls	r2, r0, #3
   1c1de:	f8dc 4044 	ldr.w	r4, [ip, #68]	; 0x44
   1c1e2:	7825      	ldrb	r5, [r4, #0]
   1c1e4:	2d00      	cmp	r5, #0
   1c1e6:	d0e4      	beq.n	1c1b2 <SmpDmGetStk+0xe>
   1c1e8:	69a4      	ldr	r4, [r4, #24]
   1c1ea:	2c00      	cmp	r4, #0
   1c1ec:	d0e1      	beq.n	1c1b2 <SmpDmGetStk+0xe>
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
   1c1ee:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
   1c1f2:	0764      	lsls	r4, r4, #29
   1c1f4:	d513      	bpl.n	1c21e <SmpDmGetStk+0x7a>
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
   1c1f6:	f89c 4024 	ldrb.w	r4, [ip, #36]	; 0x24
   1c1fa:	f89c 502b 	ldrb.w	r5, [ip, #43]	; 0x2b
   1c1fe:	42ac      	cmp	r4, r5
   1c200:	bf28      	it	cs
   1c202:	462c      	movcs	r4, r5
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
   1c204:	2c10      	cmp	r4, #16
   1c206:	bf0c      	ite	eq
   1c208:	2403      	moveq	r4, #3
   1c20a:	2402      	movne	r4, #2
    return pCcb->pScCcb->pLtk->ltk_t;
   1c20c:	4410      	add	r0, r2
   1c20e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    *pSecLevel = smpGetScSecLevel(pCcb);
   1c212:	700c      	strb	r4, [r1, #0]
    return pCcb->pScCcb->pLtk->ltk_t;
   1c214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c216:	6998      	ldr	r0, [r3, #24]
}
   1c218:	bc30      	pop	{r4, r5}
    return pCcb->pScCcb->pLtk->ltk_t;
   1c21a:	3010      	adds	r0, #16
}
   1c21c:	4770      	bx	lr
    secLevel = DM_SEC_LEVEL_ENC;
   1c21e:	2401      	movs	r4, #1
   1c220:	e7f4      	b.n	1c20c <SmpDmGetStk+0x68>
   1c222:	bf00      	nop
   1c224:	100059e4 	.word	0x100059e4

0001c228 <SmpHandlerInit>:
{
   1c228:	b570      	push	{r4, r5, r6, lr}
  smpCb.handlerId = handlerId;
   1c22a:	4c14      	ldr	r4, [pc, #80]	; (1c27c <SmpHandlerInit+0x54>)
{
   1c22c:	4605      	mov	r5, r0
  smpCb.handlerId = handlerId;
   1c22e:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
  SmpDbInit();
   1c232:	f7ff fac3 	bl	1b7bc <SmpDbInit>
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   1c236:	2202      	movs	r2, #2
   1c238:	2601      	movs	r6, #1
   1c23a:	2303      	movs	r3, #3
   1c23c:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   1c240:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   1c244:	490e      	ldr	r1, [pc, #56]	; (1c280 <SmpHandlerInit+0x58>)
   1c246:	4a0f      	ldr	r2, [pc, #60]	; (1c284 <SmpHandlerInit+0x5c>)
    pCcb->rspTimer.handlerId = handlerId;
   1c248:	7325      	strb	r5, [r4, #12]
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   1c24a:	2006      	movs	r0, #6
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   1c24c:	8126      	strh	r6, [r4, #8]
    pCcb->waitTimer.handlerId = handlerId;
   1c24e:	7725      	strb	r5, [r4, #28]
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   1c250:	8326      	strh	r6, [r4, #24]
    pCcb->rspTimer.handlerId = handlerId;
   1c252:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
    pCcb->waitTimer.handlerId = handlerId;
   1c256:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    pCcb->rspTimer.handlerId = handlerId;
   1c25a:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
   1c25e:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    pCcb->waitTimer.handlerId = handlerId;
   1c262:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
   1c266:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
   1c26a:	f7fd fbeb 	bl	19a44 <L2cRegister>
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
   1c26e:	4630      	mov	r0, r6
   1c270:	4905      	ldr	r1, [pc, #20]	; (1c288 <SmpHandlerInit+0x60>)
}
   1c272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
   1c276:	f7f0 bf6f 	b.w	d158 <DmConnRegister>
   1c27a:	bf00      	nop
   1c27c:	100059e4 	.word	0x100059e4
   1c280:	0001bae9 	.word	0x0001bae9
   1c284:	0001bca1 	.word	0x0001bca1
   1c288:	0001bb89 	.word	0x0001bb89

0001c28c <SmpHandler>:
  if (pMsg != NULL)
   1c28c:	2900      	cmp	r1, #0
   1c28e:	d046      	beq.n	1c31e <SmpHandler+0x92>
    if (pMsg->event == SMP_DB_SERVICE_IND)
   1c290:	788b      	ldrb	r3, [r1, #2]
   1c292:	2b1f      	cmp	r3, #31
   1c294:	d041      	beq.n	1c31a <SmpHandler+0x8e>
{
   1c296:	b510      	push	{r4, lr}
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
   1c298:	2b1c      	cmp	r3, #28
{
   1c29a:	b084      	sub	sp, #16
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
   1c29c:	d035      	beq.n	1c30a <SmpHandler+0x7e>
  return &smpCb.ccb[connId - 1];
   1c29e:	7808      	ldrb	r0, [r1, #0]
   1c2a0:	4b1f      	ldr	r3, [pc, #124]	; (1c320 <SmpHandler+0x94>)
   1c2a2:	3801      	subs	r0, #1
   1c2a4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   1c2a8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (pCcb->connId != DM_CONN_ID_NONE)
   1c2ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   1c2b0:	b1cb      	cbz	r3, 1c2e6 <SmpHandler+0x5a>
        if (pMsg->event == SMP_MSG_WSF_AES_CMPL && pCcb->token != pMsg->status)
   1c2b2:	788b      	ldrb	r3, [r1, #2]
   1c2b4:	2b0b      	cmp	r3, #11
   1c2b6:	d123      	bne.n	1c300 <SmpHandler+0x74>
   1c2b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   1c2bc:	78ca      	ldrb	r2, [r1, #3]
   1c2be:	4293      	cmp	r3, r2
   1c2c0:	d01e      	beq.n	1c300 <SmpHandler+0x74>
            wsfHandlerId_t  handlerId = 0;
   1c2c2:	2400      	movs	r4, #0
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   1c2c4:	4817      	ldr	r0, [pc, #92]	; (1c324 <SmpHandler+0x98>)
            wsfHandlerId_t  handlerId = 0;
   1c2c6:	f88d 400f 	strb.w	r4, [sp, #15]
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   1c2ca:	4619      	mov	r1, r3
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   1c2cc:	4c16      	ldr	r4, [pc, #88]	; (1c328 <SmpHandler+0x9c>)
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
   1c2ce:	f002 f9e3 	bl	1e698 <WsfTrace>
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   1c2d2:	e001      	b.n	1c2d8 <SmpHandler+0x4c>
                WsfMsgFree(pBuf);
   1c2d4:	f001 fe68 	bl	1dfa8 <WsfMsgFree>
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
   1c2d8:	f10d 010f 	add.w	r1, sp, #15
   1c2dc:	4620      	mov	r0, r4
   1c2de:	f001 fe7f 	bl	1dfe0 <WsfMsgDeq>
   1c2e2:	2800      	cmp	r0, #0
   1c2e4:	d1f6      	bne.n	1c2d4 <SmpHandler+0x48>
  /* Handle events */
  else if (event)
  {

  }
}
   1c2e6:	b004      	add	sp, #16
   1c2e8:	bd10      	pop	{r4, pc}
  return &smpCb.ccb[connId - 1];
   1c2ea:	780b      	ldrb	r3, [r1, #0]
      if (pCcb->connId != DM_CONN_ID_NONE)
   1c2ec:	480c      	ldr	r0, [pc, #48]	; (1c320 <SmpHandler+0x94>)
  return &smpCb.ccb[connId - 1];
   1c2ee:	3b01      	subs	r3, #1
      if (pCcb->connId != DM_CONN_ID_NONE)
   1c2f0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1c2f4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1c2f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   1c2fc:	2b00      	cmp	r3, #0
   1c2fe:	d0f2      	beq.n	1c2e6 <SmpHandler+0x5a>
}
   1c300:	b004      	add	sp, #16
   1c302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
   1c306:	f7ff b8ff 	b.w	1b508 <smpSmExecute>
        if (pCmac->pPlainText)
   1c30a:	6888      	ldr	r0, [r1, #8]
   1c30c:	2800      	cmp	r0, #0
   1c30e:	d0ec      	beq.n	1c2ea <SmpHandler+0x5e>
   1c310:	9101      	str	r1, [sp, #4]
          WsfBufFree(pCmac->pPlainText);
   1c312:	f001 fe11 	bl	1df38 <WsfBufFree>
   1c316:	9901      	ldr	r1, [sp, #4]
   1c318:	e7c1      	b.n	1c29e <SmpHandler+0x12>
      SmpDbService();
   1c31a:	f7ff baf3 	b.w	1b904 <SmpDbService>
   1c31e:	4770      	bx	lr
   1c320:	100059e4 	.word	0x100059e4
   1c324:	00027a4c 	.word	0x00027a4c
   1c328:	100040f0 	.word	0x100040f0

0001c32c <smpScCatInitiatorBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatInitiatorBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   1c32c:	b570      	push	{r4, r5, r6, lr}
   1c32e:	4606      	mov	r6, r0
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1c330:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   1c334:	460c      	mov	r4, r1
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1c336:	f7f0 fe33 	bl	cfa0 <dmConnCcbById>

  if (pDmCcb)
   1c33a:	b318      	cbz	r0, 1c384 <smpScCatInitiatorBdAddr+0x58>
  {
    if (pCcb->initiator)
   1c33c:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   1c340:	4605      	mov	r5, r0
   1c342:	b17b      	cbz	r3, 1c364 <smpScCatInitiatorBdAddr+0x38>
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
   1c344:	f100 061a 	add.w	r6, r0, #26
   1c348:	4630      	mov	r0, r6
   1c34a:	f7f9 facb 	bl	158e4 <BdaIsZeros>
   1c34e:	b9d8      	cbnz	r0, 1c388 <smpScCatInitiatorBdAddr+0x5c>
    else
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
      {
        *pBuf++ = DM_ADDR_RANDOM;
   1c350:	2301      	movs	r3, #1
   1c352:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
   1c356:	2206      	movs	r2, #6
   1c358:	4631      	mov	r1, r6
   1c35a:	4620      	mov	r0, r4
   1c35c:	f7f9 fb4c 	bl	159f8 <WStrReverseCpy>
        *pBuf++ = pDmCcb->peerAddrType;
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
      }
    }

    pBuf += BDA_ADDR_LEN;
   1c360:	1da0      	adds	r0, r4, #6
  }

  return pBuf;
}
   1c362:	bd70      	pop	{r4, r5, r6, pc}
      if (!BdaIsZeros(pDmCcb->peerRpa))
   1c364:	f100 0620 	add.w	r6, r0, #32
   1c368:	4630      	mov	r0, r6
   1c36a:	f7f9 fabb 	bl	158e4 <BdaIsZeros>
   1c36e:	2800      	cmp	r0, #0
   1c370:	d0ee      	beq.n	1c350 <smpScCatInitiatorBdAddr+0x24>
        *pBuf++ = pDmCcb->peerAddrType;
   1c372:	7ceb      	ldrb	r3, [r5, #19]
   1c374:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   1c378:	2206      	movs	r2, #6
   1c37a:	4629      	mov	r1, r5
   1c37c:	4620      	mov	r0, r4
   1c37e:	f7f9 fb3b 	bl	159f8 <WStrReverseCpy>
   1c382:	e7ed      	b.n	1c360 <smpScCatInitiatorBdAddr+0x34>
   1c384:	4620      	mov	r0, r4
}
   1c386:	bd70      	pop	{r4, r5, r6, pc}
        *pBuf++ = pDmCcb->localAddrType;
   1c388:	7d2b      	ldrb	r3, [r5, #20]
   1c38a:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   1c38e:	2206      	movs	r2, #6
   1c390:	18a9      	adds	r1, r5, r2
   1c392:	4620      	mov	r0, r4
   1c394:	f7f9 fb30 	bl	159f8 <WStrReverseCpy>
   1c398:	e7e2      	b.n	1c360 <smpScCatInitiatorBdAddr+0x34>
   1c39a:	bf00      	nop

0001c39c <smpScCatResponderBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatResponderBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
   1c39c:	b570      	push	{r4, r5, r6, lr}
   1c39e:	4606      	mov	r6, r0
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1c3a0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
   1c3a4:	460c      	mov	r4, r1
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
   1c3a6:	f7f0 fdfb 	bl	cfa0 <dmConnCcbById>

  if (pDmCcb)
   1c3aa:	b318      	cbz	r0, 1c3f4 <smpScCatResponderBdAddr+0x58>
  {
    if (pCcb->initiator)
   1c3ac:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   1c3b0:	4605      	mov	r5, r0
   1c3b2:	b17b      	cbz	r3, 1c3d4 <smpScCatResponderBdAddr+0x38>
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
   1c3b4:	f100 0620 	add.w	r6, r0, #32
   1c3b8:	4630      	mov	r0, r6
   1c3ba:	f7f9 fa93 	bl	158e4 <BdaIsZeros>
   1c3be:	b9d8      	cbnz	r0, 1c3f8 <smpScCatResponderBdAddr+0x5c>
    else
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
      {
        *pBuf++ = DM_ADDR_RANDOM;
   1c3c0:	2301      	movs	r3, #1
   1c3c2:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
   1c3c6:	2206      	movs	r2, #6
   1c3c8:	4631      	mov	r1, r6
   1c3ca:	4620      	mov	r0, r4
   1c3cc:	f7f9 fb14 	bl	159f8 <WStrReverseCpy>
        *pBuf++ = pDmCcb->localAddrType;
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
      }
    }

    pBuf += BDA_ADDR_LEN;
   1c3d0:	1da0      	adds	r0, r4, #6
  }

  return pBuf;
}
   1c3d2:	bd70      	pop	{r4, r5, r6, pc}
      if (!BdaIsZeros(pDmCcb->localRpa))
   1c3d4:	f100 061a 	add.w	r6, r0, #26
   1c3d8:	4630      	mov	r0, r6
   1c3da:	f7f9 fa83 	bl	158e4 <BdaIsZeros>
   1c3de:	2800      	cmp	r0, #0
   1c3e0:	d0ee      	beq.n	1c3c0 <smpScCatResponderBdAddr+0x24>
        *pBuf++ = pDmCcb->localAddrType;
   1c3e2:	7d2b      	ldrb	r3, [r5, #20]
   1c3e4:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
   1c3e8:	2206      	movs	r2, #6
   1c3ea:	18a9      	adds	r1, r5, r2
   1c3ec:	4620      	mov	r0, r4
   1c3ee:	f7f9 fb03 	bl	159f8 <WStrReverseCpy>
   1c3f2:	e7ed      	b.n	1c3d0 <smpScCatResponderBdAddr+0x34>
   1c3f4:	4620      	mov	r0, r4
}
   1c3f6:	bd70      	pop	{r4, r5, r6, pc}
        *pBuf++ = pDmCcb->peerAddrType;
   1c3f8:	7ceb      	ldrb	r3, [r5, #19]
   1c3fa:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
   1c3fe:	2206      	movs	r2, #6
   1c400:	4629      	mov	r1, r5
   1c402:	4620      	mov	r0, r4
   1c404:	f7f9 faf8 	bl	159f8 <WStrReverseCpy>
   1c408:	e7e2      	b.n	1c3d0 <smpScCatResponderBdAddr+0x34>
   1c40a:	bf00      	nop

0001c40c <smpScProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpScProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
   1c40c:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool_t          justWorks = TRUE;
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
   1c40e:	2300      	movs	r3, #0
   1c410:	7013      	strb	r3, [r2, #0]
  *pOob = SMP_OOB_DATA_NONE;
   1c412:	700b      	strb	r3, [r1, #0]

  /* check for LE Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c414:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
{
   1c418:	4604      	mov	r4, r0
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c41a:	f013 0008 	ands.w	r0, r3, #8
{
   1c41e:	b085      	sub	sp, #20
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c420:	d076      	beq.n	1c510 <smpScProcPairing+0x104>
   1c422:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
   1c426:	072d      	lsls	r5, r5, #28
   1c428:	d572      	bpl.n	1c510 <smpScProcPairing+0x104>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
  {
    /* if one or both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
   1c42a:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
   1c42e:	2d01      	cmp	r5, #1
   1c430:	f000 80ab 	beq.w	1c58a <smpScProcPairing+0x17e>
   1c434:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
   1c438:	2d01      	cmp	r5, #1
   1c43a:	f000 80a6 	beq.w	1c58a <smpScProcPairing+0x17e>
      justWorks = FALSE;
    }
  }

  /* if OOB authentication data not present and either device has set MITM option */
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   1c43e:	075d      	lsls	r5, r3, #29
   1c440:	d56c      	bpl.n	1c51c <smpScProcPairing+0x110>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
       (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG)))
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1c442:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
   1c446:	2d03      	cmp	r5, #3
   1c448:	d06c      	beq.n	1c524 <smpScProcPairing+0x118>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1c44a:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
   1c44e:	2e03      	cmp	r6, #3
   1c450:	d068      	beq.n	1c524 <smpScProcPairing+0x118>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
   1c452:	2d01      	cmp	r5, #1
   1c454:	f240 80c7 	bls.w	1c5e6 <smpScProcPairing+0x1da>
      justWorks = FALSE;

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
   1c458:	2d04      	cmp	r5, #4
   1c45a:	f000 8128 	beq.w	1c6ae <smpScProcPairing+0x2a2>
   1c45e:	2300      	movs	r3, #0
   1c460:	4618      	mov	r0, r3
      *pDisplay =
   1c462:	7010      	strb	r0, [r2, #0]
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1c464:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   1c468:	2802      	cmp	r0, #2
   1c46a:	f000 811a 	beq.w	1c6a2 <smpScProcPairing+0x296>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
      {
        *pDisplay ^= !pCcb->initiator;
   1c46e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1c472:	2800      	cmp	r0, #0
   1c474:	bf08      	it	eq
   1c476:	f083 0301 	eoreq.w	r3, r3, #1
   1c47a:	7013      	strb	r3, [r2, #0]
      }
    }
  }

  /* Check for Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c47c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
      justWorks = FALSE;
   1c480:	2500      	movs	r5, #0
   1c482:	f003 0008 	and.w	r0, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c486:	2800      	cmp	r0, #0
   1c488:	d04f      	beq.n	1c52a <smpScProcPairing+0x11e>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
   1c48a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c48e:	0706      	lsls	r6, r0, #28
   1c490:	d54b      	bpl.n	1c52a <smpScProcPairing+0x11e>
  {
    if (smpCb.lescSupported == FALSE)
   1c492:	4e94      	ldr	r6, [pc, #592]	; (1c6e4 <smpScProcPairing+0x2d8>)
   1c494:	f896 60ec 	ldrb.w	r6, [r6, #236]	; 0xec
   1c498:	2e00      	cmp	r6, #0
   1c49a:	d07e      	beq.n	1c59a <smpScProcPairing+0x18e>
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
      return FALSE;
    }
    else
    {
      pCcb->pScCcb->lescEnabled = TRUE;
   1c49c:	6c66      	ldr	r6, [r4, #68]	; 0x44
   1c49e:	f240 1c01 	movw	ip, #257	; 0x101
   1c4a2:	f8a6 c000 	strh.w	ip, [r6]
      pCcb->pScCcb->authType = SMP_AUTH_TYPE_JUST_WORKS;
      pCcb->pScCcb->display = *pDisplay;
   1c4a6:	7812      	ldrb	r2, [r2, #0]
   1c4a8:	7132      	strb	r2, [r6, #4]

      if (*pOob)
   1c4aa:	780a      	ldrb	r2, [r1, #0]
   1c4ac:	2a00      	cmp	r2, #0
   1c4ae:	f000 8088 	beq.w	1c5c2 <smpScProcPairing+0x1b6>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_OOB;
   1c4b2:	2302      	movs	r3, #2
   1c4b4:	7073      	strb	r3, [r6, #1]
        }

      }
    }

    hdr.param = pCcb->connId;
   1c4b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1c4ba:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Allocate a scratch pad for Peer Key and CMAC calculations */
    if (SmpScAllocScratchBuffers(pCcb))
   1c4be:	4620      	mov	r0, r4
   1c4c0:	f000 fc5e 	bl	1cd80 <SmpScAllocScratchBuffers>
   1c4c4:	2800      	cmp	r0, #0
   1c4c6:	f040 8093 	bne.w	1c5f0 <smpScProcPairing+0x1e4>
      hdr.event = SMP_MSG_INT_LESC;
    }
    else
    {
      hdr.status = SMP_ERR_UNSPECIFIED;
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c4ca:	f640 0303 	movw	r3, #2051	; 0x803
   1c4ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c4d2:	a903      	add	r1, sp, #12
   1c4d4:	4620      	mov	r0, r4
   1c4d6:	9101      	str	r1, [sp, #4]
   1c4d8:	4e83      	ldr	r6, [pc, #524]	; (1c6e8 <smpScProcPairing+0x2dc>)
   1c4da:	f7ff f815 	bl	1b508 <smpSmExecute>
   1c4de:	9901      	ldr	r1, [sp, #4]
    hdr.param = pCcb->connId;
    hdr.event = SMP_MSG_INT_LEGACY;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }

  if (!justWorks)
   1c4e0:	2d00      	cmp	r5, #0
   1c4e2:	d139      	bne.n	1c558 <smpScProcPairing+0x14c>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1c4e4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1c4e8:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1c4ec:	6832      	ldr	r2, [r6, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
   1c4ee:	4003      	ands	r3, r0
   1c4f0:	f043 0304 	orr.w	r3, r3, #4
   1c4f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    return FALSE;
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
   1c4f8:	7953      	ldrb	r3, [r2, #5]
   1c4fa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1c4fe:	429a      	cmp	r2, r3
   1c500:	d35a      	bcc.n	1c5b8 <smpScProcPairing+0x1ac>
   1c502:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   1c506:	429a      	cmp	r2, r3
   1c508:	d356      	bcc.n	1c5b8 <smpScProcPairing+0x1ac>
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    return FALSE;
  }

  return TRUE;
   1c50a:	2001      	movs	r0, #1
}
   1c50c:	b005      	add	sp, #20
   1c50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
   1c510:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
   1c514:	2d01      	cmp	r5, #1
   1c516:	d08d      	beq.n	1c434 <smpScProcPairing+0x28>
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
   1c518:	075d      	lsls	r5, r3, #29
   1c51a:	d492      	bmi.n	1c442 <smpScProcPairing+0x36>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
   1c51c:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
   1c520:	076f      	lsls	r7, r5, #29
   1c522:	d48e      	bmi.n	1c442 <smpScProcPairing+0x36>
   1c524:	2501      	movs	r5, #1
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c526:	2800      	cmp	r0, #0
   1c528:	d1af      	bne.n	1c48a <smpScProcPairing+0x7e>
  else if ((pSmpCfg->auth & SMP_AUTH_SC_FLAG) != 0)
   1c52a:	4e6f      	ldr	r6, [pc, #444]	; (1c6e8 <smpScProcPairing+0x2dc>)
   1c52c:	6833      	ldr	r3, [r6, #0]
   1c52e:	7a1b      	ldrb	r3, [r3, #8]
   1c530:	f013 0308 	ands.w	r3, r3, #8
   1c534:	d131      	bne.n	1c59a <smpScProcPairing+0x18e>
    pCcb->pScCcb->lescEnabled = FALSE;
   1c536:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1c538:	7013      	strb	r3, [r2, #0]
    hdr.param = pCcb->connId;
   1c53a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   1c53e:	f8ad 300c 	strh.w	r3, [sp, #12]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c542:	a903      	add	r1, sp, #12
    hdr.event = SMP_MSG_INT_LEGACY;
   1c544:	2312      	movs	r3, #18
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c546:	4620      	mov	r0, r4
   1c548:	9101      	str	r1, [sp, #4]
    hdr.event = SMP_MSG_INT_LEGACY;
   1c54a:	f88d 300e 	strb.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c54e:	f7fe ffdb 	bl	1b508 <smpSmExecute>
   1c552:	9901      	ldr	r1, [sp, #4]
  if (!justWorks)
   1c554:	2d00      	cmp	r5, #0
   1c556:	d0c5      	beq.n	1c4e4 <smpScProcPairing+0xd8>
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1c558:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
   1c55c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1c560:	6832      	ldr	r2, [r6, #0]
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
   1c562:	ea05 0003 	and.w	r0, r5, r3
   1c566:	f020 0004 	bic.w	r0, r0, #4
   1c56a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
   1c56e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1c572:	2800      	cmp	r0, #0
   1c574:	bf18      	it	ne
   1c576:	462b      	movne	r3, r5
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
   1c578:	7a10      	ldrb	r0, [r2, #8]
   1c57a:	4003      	ands	r3, r0
   1c57c:	075e      	lsls	r6, r3, #29
   1c57e:	d5bb      	bpl.n	1c4f8 <smpScProcPairing+0xec>
    hdr.param = pCcb->connId;
   1c580:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c584:	f240 3303 	movw	r3, #771	; 0x303
   1c588:	e00c      	b.n	1c5a4 <smpScProcPairing+0x198>
      *pOob = SMP_OOB_DATA_PRESENT;
   1c58a:	2301      	movs	r3, #1
   1c58c:	700b      	strb	r3, [r1, #0]
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
   1c58e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1c592:	2500      	movs	r5, #0
   1c594:	f003 0008 	and.w	r0, r3, #8
   1c598:	e775      	b.n	1c486 <smpScProcPairing+0x7a>
      hdr.param = pCcb->connId;
   1c59a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
      hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c59e:	f240 3303 	movw	r3, #771	; 0x303
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c5a2:	a903      	add	r1, sp, #12
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c5a4:	4620      	mov	r0, r4
    hdr.param = pCcb->connId;
   1c5a6:	f8ad 200c 	strh.w	r2, [sp, #12]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c5aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c5ae:	f7fe ffab 	bl	1b508 <smpSmExecute>
    return FALSE;
   1c5b2:	2000      	movs	r0, #0
}
   1c5b4:	b005      	add	sp, #20
   1c5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr.param = pCcb->connId;
   1c5b8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c5bc:	f240 6303 	movw	r3, #1539	; 0x603
   1c5c0:	e7f0      	b.n	1c5a4 <smpScProcPairing+0x198>
      else if (justWorks == FALSE)
   1c5c2:	2d00      	cmp	r5, #0
   1c5c4:	d160      	bne.n	1c688 <smpScProcPairing+0x27c>
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_PASSKEY;
   1c5c6:	2203      	movs	r2, #3
   1c5c8:	7072      	strb	r2, [r6, #1]
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1c5ca:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1c5ce:	2a04      	cmp	r2, #4
   1c5d0:	d07b      	beq.n	1c6ca <smpScProcPairing+0x2be>
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
   1c5d2:	2a01      	cmp	r2, #1
   1c5d4:	f000 8082 	beq.w	1c6dc <smpScProcPairing+0x2d0>
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
   1c5d8:	06db      	lsls	r3, r3, #27
   1c5da:	d560      	bpl.n	1c69e <smpScProcPairing+0x292>
   1c5dc:	06c7      	lsls	r7, r0, #27
   1c5de:	d55e      	bpl.n	1c69e <smpScProcPairing+0x292>
          pCcb->pScCcb->kpNotify = TRUE;
   1c5e0:	2301      	movs	r3, #1
   1c5e2:	70b3      	strb	r3, [r6, #2]
   1c5e4:	e767      	b.n	1c4b6 <smpScProcPairing+0xaa>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
   1c5e6:	2e01      	cmp	r6, #1
   1c5e8:	d99c      	bls.n	1c524 <smpScProcPairing+0x118>
   1c5ea:	2301      	movs	r3, #1
   1c5ec:	4618      	mov	r0, r3
   1c5ee:	e738      	b.n	1c462 <smpScProcPairing+0x56>
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyX, DmSecGetEccKey()->pubKey_x, SMP_PUB_KEY_LEN);
   1c5f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c5f2:	68de      	ldr	r6, [r3, #12]
   1c5f4:	f7f2 f9aa 	bl	e94c <DmSecGetEccKey>
   1c5f8:	6801      	ldr	r1, [r0, #0]
   1c5fa:	6842      	ldr	r2, [r0, #4]
   1c5fc:	6883      	ldr	r3, [r0, #8]
   1c5fe:	f8d0 c00c 	ldr.w	ip, [r0, #12]
   1c602:	f8c6 c00c 	str.w	ip, [r6, #12]
   1c606:	6031      	str	r1, [r6, #0]
   1c608:	6072      	str	r2, [r6, #4]
   1c60a:	60b3      	str	r3, [r6, #8]
   1c60c:	6901      	ldr	r1, [r0, #16]
   1c60e:	6942      	ldr	r2, [r0, #20]
   1c610:	6983      	ldr	r3, [r0, #24]
   1c612:	f8d0 c01c 	ldr.w	ip, [r0, #28]
   1c616:	f8c6 c01c 	str.w	ip, [r6, #28]
   1c61a:	6131      	str	r1, [r6, #16]
   1c61c:	6172      	str	r2, [r6, #20]
   1c61e:	61b3      	str	r3, [r6, #24]
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyY, DmSecGetEccKey()->pubKey_y, SMP_PUB_KEY_LEN);
   1c620:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c622:	68df      	ldr	r7, [r3, #12]
   1c624:	f7f2 f992 	bl	e94c <DmSecGetEccKey>
   1c628:	6a06      	ldr	r6, [r0, #32]
   1c62a:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1c62c:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1c62e:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
   1c632:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c
   1c636:	623e      	str	r6, [r7, #32]
   1c638:	6279      	str	r1, [r7, #36]	; 0x24
   1c63a:	62ba      	str	r2, [r7, #40]	; 0x28
   1c63c:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1c63e:	6b41      	ldr	r1, [r0, #52]	; 0x34
   1c640:	6b82      	ldr	r2, [r0, #56]	; 0x38
   1c642:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
   1c646:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
   1c64a:	6379      	str	r1, [r7, #52]	; 0x34
   1c64c:	63ba      	str	r2, [r7, #56]	; 0x38
   1c64e:	633e      	str	r6, [r7, #48]	; 0x30
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
   1c650:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c652:	691e      	ldr	r6, [r3, #16]
   1c654:	f7f2 f97a 	bl	e94c <DmSecGetEccKey>
   1c658:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1c65a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c65c:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1c65e:	f8d0 c04c 	ldr.w	ip, [r0, #76]	; 0x4c
   1c662:	f8c6 c00c 	str.w	ip, [r6, #12]
   1c666:	6031      	str	r1, [r6, #0]
   1c668:	6072      	str	r2, [r6, #4]
   1c66a:	60b3      	str	r3, [r6, #8]
   1c66c:	6d42      	ldr	r2, [r0, #84]	; 0x54
   1c66e:	6d01      	ldr	r1, [r0, #80]	; 0x50
   1c670:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1c672:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
   1c676:	6172      	str	r2, [r6, #20]
      hdr.event = SMP_MSG_INT_LESC;
   1c678:	2211      	movs	r2, #17
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
   1c67a:	f8c6 c01c 	str.w	ip, [r6, #28]
   1c67e:	6131      	str	r1, [r6, #16]
   1c680:	61b3      	str	r3, [r6, #24]
      hdr.event = SMP_MSG_INT_LESC;
   1c682:	f88d 200e 	strb.w	r2, [sp, #14]
   1c686:	e724      	b.n	1c4d2 <smpScProcPairing+0xc6>
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1c688:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1c68c:	2b01      	cmp	r3, #1
   1c68e:	d014      	beq.n	1c6ba <smpScProcPairing+0x2ae>
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
   1c690:	2b03      	cmp	r3, #3
   1c692:	d004      	beq.n	1c69e <smpScProcPairing+0x292>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   1c694:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
   1c698:	2b03      	cmp	r3, #3
   1c69a:	f47f af0c 	bne.w	1c4b6 <smpScProcPairing+0xaa>
          justWorks = FALSE;
   1c69e:	2500      	movs	r5, #0
   1c6a0:	e709      	b.n	1c4b6 <smpScProcPairing+0xaa>
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
   1c6a2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   1c6a6:	2802      	cmp	r0, #2
   1c6a8:	f47f aee1 	bne.w	1c46e <smpScProcPairing+0x62>
   1c6ac:	e6e6      	b.n	1c47c <smpScProcPairing+0x70>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
   1c6ae:	2e02      	cmp	r6, #2
   1c6b0:	d09b      	beq.n	1c5ea <smpScProcPairing+0x1de>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
   1c6b2:	2e04      	cmp	r6, #4
   1c6b4:	f47f aed3 	bne.w	1c45e <smpScProcPairing+0x52>
   1c6b8:	e797      	b.n	1c5ea <smpScProcPairing+0x1de>
            (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO))
   1c6ba:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1c6be:	2b01      	cmp	r3, #1
   1c6c0:	d1ea      	bne.n	1c698 <smpScProcPairing+0x28c>
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   1c6c2:	2304      	movs	r3, #4
   1c6c4:	7073      	strb	r3, [r6, #1]
          justWorks = FALSE;
   1c6c6:	4615      	mov	r5, r2
   1c6c8:	e6f5      	b.n	1c4b6 <smpScProcPairing+0xaa>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
   1c6ca:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
   1c6ce:	2a01      	cmp	r2, #1
   1c6d0:	d001      	beq.n	1c6d6 <smpScProcPairing+0x2ca>
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1c6d2:	2a04      	cmp	r2, #4
   1c6d4:	d180      	bne.n	1c5d8 <smpScProcPairing+0x1cc>
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
   1c6d6:	2304      	movs	r3, #4
   1c6d8:	7073      	strb	r3, [r6, #1]
   1c6da:	e6ec      	b.n	1c4b6 <smpScProcPairing+0xaa>
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
   1c6dc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1c6e0:	e7f7      	b.n	1c6d2 <smpScProcPairing+0x2c6>
   1c6e2:	bf00      	nop
   1c6e4:	100059e4 	.word	0x100059e4
   1c6e8:	10002c30 	.word	0x10002c30

0001c6ec <smpScAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
   1c6ec:	b510      	push	{r4, lr}
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   1c6ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1c6f0:	781c      	ldrb	r4, [r3, #0]
{
   1c6f2:	b086      	sub	sp, #24
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
   1c6f4:	b9bc      	cbnz	r4, 1c726 <smpScAuthReq+0x3a>
   1c6f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1c6fa:	075b      	lsls	r3, r3, #29
   1c6fc:	d416      	bmi.n	1c72c <smpScAuthReq+0x40>
  }
  else
  {
    /* else use just works; send ourselves a auth rsp with all zero pin */
    buf.authRsp.hdr.param = pCcb->connId;
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1c6fe:	2104      	movs	r1, #4
    buf.authRsp.authData[0] = 0;
   1c700:	2300      	movs	r3, #0
    buf.authRsp.hdr.param = pCcb->connId;
   1c702:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
   1c706:	f88d 1002 	strb.w	r1, [sp, #2]
    buf.authRsp.authData[1] = 0;
    buf.authRsp.authData[2] = 0;
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1c70a:	2203      	movs	r2, #3
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1c70c:	4669      	mov	r1, sp
    buf.authRsp.hdr.param = pCcb->connId;
   1c70e:	f8ad 4000 	strh.w	r4, [sp]
    buf.authRsp.authData[0] = 0;
   1c712:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.authRsp.authData[2] = 0;
   1c716:	f88d 3006 	strb.w	r3, [sp, #6]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
   1c71a:	f88d 2014 	strb.w	r2, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
   1c71e:	f7fe fef3 	bl	1b508 <smpSmExecute>
  }
}
   1c722:	b006      	add	sp, #24
   1c724:	bd10      	pop	{r4, pc}
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
   1c726:	785b      	ldrb	r3, [r3, #1]
   1c728:	2b02      	cmp	r3, #2
   1c72a:	d1e8      	bne.n	1c6fe <smpScAuthReq+0x12>
    buf.authReq.hdr.param = pCcb->connId;
   1c72c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
   1c730:	f8ad 4000 	strh.w	r4, [sp]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1c734:	232e      	movs	r3, #46	; 0x2e
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1c736:	4668      	mov	r0, sp
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1c738:	f88d 3002 	strb.w	r3, [sp, #2]
    buf.authReq.oob = oob;
   1c73c:	f88d 1004 	strb.w	r1, [sp, #4]
    buf.authReq.display = display;
   1c740:	f88d 2005 	strb.w	r2, [sp, #5]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
   1c744:	f7f2 f86c 	bl	e820 <DmSmpCbackExec>
}
   1c748:	b006      	add	sp, #24
   1c74a:	bd10      	pop	{r4, pc}

0001c74c <smpScActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c74c:	b510      	push	{r4, lr}
   1c74e:	4604      	mov	r4, r0
  smpActCleanup(pCcb, pMsg);
   1c750:	f7fe fbb8 	bl	1aec4 <smpActCleanup>

  /* Free scratch buffers */
  SmpScFreeScratchBuffers(pCcb);
   1c754:	4620      	mov	r0, r4
}
   1c756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SmpScFreeScratchBuffers(pCcb);
   1c75a:	f000 bb51 	b.w	1ce00 <SmpScFreeScratchBuffers>
   1c75e:	bf00      	nop

0001c760 <smpScActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c760:	b538      	push	{r3, r4, r5, lr}
   1c762:	4604      	mov	r4, r0
   1c764:	460d      	mov	r5, r1
  smpActCleanup(pCcb, pMsg);
   1c766:	f7fe fbad 	bl	1aec4 <smpActCleanup>
  SmpScFreeScratchBuffers(pCcb);
   1c76a:	4620      	mov	r0, r4
   1c76c:	f000 fb48 	bl	1ce00 <SmpScFreeScratchBuffers>
  /* Perform LESC Cleanup */
  smpScActCleanup(pCcb, pMsg);

  /* Process failure */
  smpActPairingFailed(pCcb, pMsg);
   1c770:	4629      	mov	r1, r5
   1c772:	4620      	mov	r0, r4
}
   1c774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpActPairingFailed(pCcb, pMsg);
   1c778:	f7fe bbd4 	b.w	1af24 <smpActPairingFailed>

0001c77c <smpScActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c77c:	b538      	push	{r3, r4, r5, lr}
   1c77e:	4604      	mov	r4, r0
   1c780:	460d      	mov	r5, r1
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
   1c782:	78c9      	ldrb	r1, [r1, #3]
   1c784:	f7fe fbbc 	bl	1af00 <smpSendPairingFailed>
  smpActCleanup(pCcb, pMsg);
   1c788:	4629      	mov	r1, r5
   1c78a:	4620      	mov	r0, r4
   1c78c:	f7fe fb9a 	bl	1aec4 <smpActCleanup>
  SmpScFreeScratchBuffers(pCcb);
   1c790:	4620      	mov	r0, r4
   1c792:	f000 fb35 	bl	1ce00 <SmpScFreeScratchBuffers>
  smpActPairingFailed(pCcb, pMsg);
   1c796:	4629      	mov	r1, r5
   1c798:	4620      	mov	r0, r4

  smpScActPairingFailed(pCcb, pMsg);
}
   1c79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpActPairingFailed(pCcb, pMsg);
   1c79e:	f7fe bbc1 	b.w	1af24 <smpActPairingFailed>
   1c7a2:	bf00      	nop

0001c7a4 <smpScActAuthSelect>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActAuthSelect(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c7a4:	b530      	push	{r4, r5, lr}
  wsfMsgHdr_t hdr;
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;

  /* Process public key from peer (store in MSB first format) */
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
   1c7a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;
   1c7a8:	684d      	ldr	r5, [r1, #4]
{
   1c7aa:	4604      	mov	r4, r0
   1c7ac:	b083      	sub	sp, #12
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
   1c7ae:	6898      	ldr	r0, [r3, #8]
   1c7b0:	2220      	movs	r2, #32
   1c7b2:	f105 0109 	add.w	r1, r5, #9
   1c7b6:	f7f9 f91f 	bl	159f8 <WStrReverseCpy>
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyY, &pPacket[SMP_PUB_KEY_Y_POS], SMP_PUB_KEY_LEN);
   1c7ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c7bc:	6898      	ldr	r0, [r3, #8]
   1c7be:	2220      	movs	r2, #32
   1c7c0:	4410      	add	r0, r2
   1c7c2:	f105 0129 	add.w	r1, r5, #41	; 0x29
   1c7c6:	f7f9 f917 	bl	159f8 <WStrReverseCpy>

  /* Message state machine indicating authorization mode (JW, OOB, or passkey) */
  hdr.param = pCcb->connId;
   1c7ca:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d

  switch(pCcb->pScCcb->authType)
   1c7ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hdr.param = pCcb->connId;
   1c7d0:	f8ad 2004 	strh.w	r2, [sp, #4]
  switch(pCcb->pScCcb->authType)
   1c7d4:	785b      	ldrb	r3, [r3, #1]
   1c7d6:	3b01      	subs	r3, #1
   1c7d8:	2b03      	cmp	r3, #3
   1c7da:	d81e      	bhi.n	1c81a <smpScActAuthSelect+0x76>
   1c7dc:	e8df f003 	tbb	[pc, r3]
   1c7e0:	020b1402 	.word	0x020b1402
  {
  case SMP_AUTH_TYPE_NUM_COMP:
  case SMP_AUTH_TYPE_JUST_WORKS:
    hdr.event = SMP_MSG_INT_JW_NC;
   1c7e4:	2313      	movs	r3, #19
   1c7e6:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.status = SMP_ERR_UNSPECIFIED;
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    break;
  }

  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c7ea:	a901      	add	r1, sp, #4
   1c7ec:	4620      	mov	r0, r4
   1c7ee:	f7fe fe8b 	bl	1b508 <smpSmExecute>
}
   1c7f2:	b003      	add	sp, #12
   1c7f4:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_INT_PASSKEY;
   1c7f6:	2314      	movs	r3, #20
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c7f8:	a901      	add	r1, sp, #4
   1c7fa:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_INT_PASSKEY;
   1c7fc:	f88d 3006 	strb.w	r3, [sp, #6]
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c800:	f7fe fe82 	bl	1b508 <smpSmExecute>
}
   1c804:	b003      	add	sp, #12
   1c806:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_INT_OOB;
   1c808:	2315      	movs	r3, #21
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c80a:	a901      	add	r1, sp, #4
   1c80c:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_INT_OOB;
   1c80e:	f88d 3006 	strb.w	r3, [sp, #6]
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c812:	f7fe fe79 	bl	1b508 <smpSmExecute>
}
   1c816:	b003      	add	sp, #12
   1c818:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
   1c81a:	f640 0303 	movw	r3, #2051	; 0x803
   1c81e:	f8ad 3006 	strh.w	r3, [sp, #6]
    break;
   1c822:	e7e2      	b.n	1c7ea <smpScActAuthSelect+0x46>

0001c824 <smpScActPkSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c824:	b500      	push	{lr}
  {
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  pCcb->pScCcb->pkPos = 0;
   1c826:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1c828:	b087      	sub	sp, #28
  pCcb->pScCcb->pkPos = 0;
   1c82a:	2200      	movs	r2, #0

  /* Next command is the Pair Confirm */
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1c82c:	2103      	movs	r1, #3
  pCcb->pScCcb->pkPos = 0;
   1c82e:	70da      	strb	r2, [r3, #3]
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
   1c830:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f

  /* request pin or oob from user */
  buf.authReq.hdr.param = pCcb->connId;
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
  buf.authReq.oob = FALSE;
   1c834:	f88d 2004 	strb.w	r2, [sp, #4]
  buf.authReq.hdr.param = pCcb->connId;
   1c838:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  buf.authReq.display = pCcb->pScCcb->display;
   1c83c:	791b      	ldrb	r3, [r3, #4]
  buf.authReq.hdr.param = pCcb->connId;
   1c83e:	f8ad 1000 	strh.w	r1, [sp]
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1c842:	222e      	movs	r2, #46	; 0x2e
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
   1c844:	4668      	mov	r0, sp
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
   1c846:	f88d 2002 	strb.w	r2, [sp, #2]
  buf.authReq.display = pCcb->pScCcb->display;
   1c84a:	f88d 3005 	strb.w	r3, [sp, #5]
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
   1c84e:	f7f1 ffe7 	bl	e820 <DmSmpCbackExec>
}
   1c852:	b007      	add	sp, #28
   1c854:	f85d fb04 	ldr.w	pc, [sp], #4

0001c858 <smpScActJwncCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c858:	b570      	push	{r4, r5, r6, lr}
  /* Cb = f4(PKbx, PKax, Nb, 0x00) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if (pCcb->initiator)
   1c85a:	f890 603a 	ldrb.w	r6, [r0, #58]	; 0x3a
  {
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   1c85e:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1c860:	b082      	sub	sp, #8
   1c862:	4604      	mov	r4, r0
   1c864:	460d      	mov	r5, r1
  if (pCcb->initiator)
   1c866:	b1fe      	cbz	r6, 1c8a8 <smpScActJwncCalcF4+0x50>
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   1c868:	6899      	ldr	r1, [r3, #8]
   1c86a:	481f      	ldr	r0, [pc, #124]	; (1c8e8 <smpScActJwncCalcF4+0x90>)
   1c86c:	2220      	movs	r2, #32
   1c86e:	f000 fcb9 	bl	1d1e4 <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pLocalPublicKey->pubKeyX);
   1c872:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c874:	481d      	ldr	r0, [pc, #116]	; (1c8ec <smpScActJwncCalcF4+0x94>)
   1c876:	68d9      	ldr	r1, [r3, #12]
   1c878:	2220      	movs	r2, #32
   1c87a:	f000 fcb3 	bl	1d1e4 <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1c87e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c880:	481b      	ldr	r0, [pc, #108]	; (1c8f0 <smpScActJwncCalcF4+0x98>)
   1c882:	6959      	ldr	r1, [r3, #20]
   1c884:	2210      	movs	r2, #16
   1c886:	4411      	add	r1, r2
   1c888:	f000 fcac 	bl	1d1e4 <smpLogByteArray>

    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
   1c88c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    SmpScCalcF4(pCcb, pMsg,
   1c88e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   1c892:	6940      	ldr	r0, [r0, #20]
   1c894:	3010      	adds	r0, #16
    SmpScCalcF4(pCcb, pMsg,
   1c896:	9001      	str	r0, [sp, #4]
   1c898:	2000      	movs	r0, #0
   1c89a:	9000      	str	r0, [sp, #0]
   1c89c:	4629      	mov	r1, r5
   1c89e:	4620      	mov	r0, r4
   1c8a0:	f000 fb0a 	bl	1ceb8 <SmpScCalcF4>
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
   1c8a4:	b002      	add	sp, #8
   1c8a6:	bd70      	pop	{r4, r5, r6, pc}
    SMP_TRACE_256("F4 PKb",  pCcb->pScCcb->pLocalPublicKey->pubKeyX);
   1c8a8:	68d9      	ldr	r1, [r3, #12]
   1c8aa:	480f      	ldr	r0, [pc, #60]	; (1c8e8 <smpScActJwncCalcF4+0x90>)
   1c8ac:	2220      	movs	r2, #32
   1c8ae:	f000 fc99 	bl	1d1e4 <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
   1c8b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c8b4:	480d      	ldr	r0, [pc, #52]	; (1c8ec <smpScActJwncCalcF4+0x94>)
   1c8b6:	6899      	ldr	r1, [r3, #8]
   1c8b8:	2220      	movs	r2, #32
   1c8ba:	f000 fc93 	bl	1d1e4 <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
   1c8be:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c8c0:	480b      	ldr	r0, [pc, #44]	; (1c8f0 <smpScActJwncCalcF4+0x98>)
   1c8c2:	6959      	ldr	r1, [r3, #20]
   1c8c4:	2210      	movs	r2, #16
   1c8c6:	4411      	add	r1, r2
   1c8c8:	f000 fc8c 	bl	1d1e4 <smpLogByteArray>
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
   1c8cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
    SmpScCalcF4(pCcb, pMsg,
   1c8ce:	4620      	mov	r0, r4
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   1c8d0:	6954      	ldr	r4, [r2, #20]
    SmpScCalcF4(pCcb, pMsg,
   1c8d2:	6893      	ldr	r3, [r2, #8]
   1c8d4:	68d2      	ldr	r2, [r2, #12]
   1c8d6:	9600      	str	r6, [sp, #0]
                0, pCcb->pScCcb->pScratch->Nb_Eb);
   1c8d8:	3410      	adds	r4, #16
    SmpScCalcF4(pCcb, pMsg,
   1c8da:	4629      	mov	r1, r5
   1c8dc:	9401      	str	r4, [sp, #4]
   1c8de:	f000 faeb 	bl	1ceb8 <SmpScCalcF4>
}
   1c8e2:	b002      	add	sp, #8
   1c8e4:	bd70      	pop	{r4, r5, r6, pc}
   1c8e6:	bf00      	nop
   1c8e8:	00027a78 	.word	0x00027a78
   1c8ec:	00027a80 	.word	0x00027a80
   1c8f0:	00027a88 	.word	0x00027a88

0001c8f4 <smpScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c8f4:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pCmacText;

  /* g2(PKax, PKbx, Na, Nb) where g2(U, V, X, Z) = AES-CMACx (U || V || Z) mod 2^32 */
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1c8f6:	460a      	mov	r2, r1
{
   1c8f8:	b082      	sub	sp, #8
   1c8fa:	4604      	mov	r4, r0
   1c8fc:	460e      	mov	r6, r1
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1c8fe:	4601      	mov	r1, r0
   1c900:	2050      	movs	r0, #80	; 0x50
   1c902:	f000 fac7 	bl	1ce94 <SmpScAlloc>
   1c906:	b1d0      	cbz	r0, 1c93e <smpScActJwncCalcG2+0x4a>
  {
    uint8_t *pCatBuf = pCmacText;

    /* Concatinate PKax, PKbx, Nb */
    if (pCcb->initiator)
   1c908:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1c90c:	4605      	mov	r5, r0
   1c90e:	b9c3      	cbnz	r3, 1c942 <smpScActJwncCalcG2+0x4e>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    }
    else
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1c910:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c912:	2220      	movs	r2, #32
   1c914:	6899      	ldr	r1, [r3, #8]
   1c916:	f000 fb45 	bl	1cfa4 <SmpScCat>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1c91a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c91c:	2220      	movs	r2, #32
   1c91e:	68d9      	ldr	r1, [r3, #12]
   1c920:	f000 fb40 	bl	1cfa4 <SmpScCat>
    }

    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1c924:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c926:	6959      	ldr	r1, [r3, #20]
   1c928:	3110      	adds	r1, #16
   1c92a:	f000 fb43 	bl	1cfb4 <SmpScCat128>

    /* Execute CMAC with Na as the key */
    SmpScCmac(pCcb->pScCcb->pScratch->Na_Ea, pCmacText, SMP_G2_TEXT_LEN, pCcb, pMsg);
   1c92e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1c930:	4623      	mov	r3, r4
   1c932:	6950      	ldr	r0, [r2, #20]
   1c934:	9600      	str	r6, [sp, #0]
   1c936:	2250      	movs	r2, #80	; 0x50
   1c938:	4629      	mov	r1, r5
   1c93a:	f000 fa89 	bl	1ce50 <SmpScCmac>
  }
}
   1c93e:	b002      	add	sp, #8
   1c940:	bd70      	pop	{r4, r5, r6, pc}
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1c942:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c944:	2220      	movs	r2, #32
   1c946:	68d9      	ldr	r1, [r3, #12]
   1c948:	f000 fb2c 	bl	1cfa4 <SmpScCat>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1c94c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1c94e:	2220      	movs	r2, #32
   1c950:	6899      	ldr	r1, [r3, #8]
   1c952:	f000 fb27 	bl	1cfa4 <SmpScCat>
   1c956:	e7e5      	b.n	1c924 <smpScActJwncCalcG2+0x30>

0001c958 <smpScActJwncDisplay>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c958:	b530      	push	{r4, r5, lr}
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
   1c95a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1c95c:	785b      	ldrb	r3, [r3, #1]
   1c95e:	2b04      	cmp	r3, #4
{
   1c960:	b087      	sub	sp, #28
   1c962:	4604      	mov	r4, r0
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
   1c964:	d00b      	beq.n	1c97e <smpScActJwncDisplay+0x26>
  else
  {
    /* Just Works always reports success */
    wsfMsgHdr_t hdr;

    hdr.param = pCcb->connId;
   1c966:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
   1c96a:	f8ad 2004 	strh.w	r2, [sp, #4]
    hdr.event = SMP_MSG_API_USER_CONFIRM;
   1c96e:	2316      	movs	r3, #22
    hdr.status = HCI_SUCCESS;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c970:	a901      	add	r1, sp, #4
    hdr.event = SMP_MSG_API_USER_CONFIRM;
   1c972:	f8ad 3006 	strh.w	r3, [sp, #6]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
   1c976:	f7fe fdc7 	bl	1b508 <smpSmExecute>
  }
}
   1c97a:	b007      	add	sp, #28
   1c97c:	bd30      	pop	{r4, r5, pc}
    SMP_TRACE_128("JWNC Display Cnf", pMsg->aes.pCiphertext);
   1c97e:	460d      	mov	r5, r1
   1c980:	2210      	movs	r2, #16
   1c982:	6849      	ldr	r1, [r1, #4]
   1c984:	4809      	ldr	r0, [pc, #36]	; (1c9ac <smpScActJwncDisplay+0x54>)
   1c986:	f000 fc2d 	bl	1d1e4 <smpLogByteArray>
    Calc128Cpy(cnfEvt.confirm, pMsg->aes.pCiphertext);
   1c98a:	6869      	ldr	r1, [r5, #4]
   1c98c:	a802      	add	r0, sp, #8
   1c98e:	f7f8 ffb9 	bl	15904 <Calc128Cpy>
    cnfEvt.hdr.param = pCcb->connId;
   1c992:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   1c996:	f8ad 2004 	strh.w	r2, [sp, #4]
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
   1c99a:	2335      	movs	r3, #53	; 0x35
    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
   1c99c:	a801      	add	r0, sp, #4
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
   1c99e:	f8ad 3006 	strh.w	r3, [sp, #6]
    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
   1c9a2:	f7f1 ff3d 	bl	e820 <DmSmpCbackExec>
}
   1c9a6:	b007      	add	sp, #28
   1c9a8:	bd30      	pop	{r4, r5, pc}
   1c9aa:	bf00      	nop
   1c9ac:	00027a90 	.word	0x00027a90

0001c9b0 <smpScActPkKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c9b0:	b510      	push	{r4, lr}
  uint8_t *pCmd = pMsg->data.pPacket + L2C_PAYLOAD_START;
   1c9b2:	684c      	ldr	r4, [r1, #4]
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  if (*pCmd == SMP_CMD_KEYPRESS)
   1c9b4:	f894 c008 	ldrb.w	ip, [r4, #8]
   1c9b8:	f1bc 0f0e 	cmp.w	ip, #14
{
   1c9bc:	b082      	sub	sp, #8
  if (*pCmd == SMP_CMD_KEYPRESS)
   1c9be:	d004      	beq.n	1c9ca <smpScActPkKeypress+0x1a>
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
    keypressEvt.hdr.status = HCI_SUCCESS;

    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
  }
  else if (*pCmd == SMP_CMD_PAIR_CNF)
   1c9c0:	f1bc 0f03 	cmp.w	ip, #3
   1c9c4:	d010      	beq.n	1c9e8 <smpScActPkKeypress+0x38>
  }
  else
  {
    /* Unexpected command */
  }
}
   1c9c6:	b002      	add	sp, #8
   1c9c8:	bd10      	pop	{r4, pc}
    keypressEvt.hdr.param = pCcb->connId;
   1c9ca:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    keypressEvt.notificationType = *pPacket;
   1c9ce:	7a61      	ldrb	r1, [r4, #9]
   1c9d0:	f88d 1004 	strb.w	r1, [sp, #4]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
   1c9d4:	2336      	movs	r3, #54	; 0x36
    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
   1c9d6:	4668      	mov	r0, sp
    keypressEvt.hdr.param = pCcb->connId;
   1c9d8:	f8ad 2000 	strh.w	r2, [sp]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
   1c9dc:	f8ad 3002 	strh.w	r3, [sp, #2]
    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
   1c9e0:	f7f1 ff1e 	bl	e820 <DmSmpCbackExec>
}
   1c9e4:	b002      	add	sp, #8
   1c9e6:	bd10      	pop	{r4, pc}
    pMsg->hdr.event = SMP_MSG_EARLY_CNF;
   1c9e8:	221e      	movs	r2, #30
   1c9ea:	804a      	strh	r2, [r1, #2]
}
   1c9ec:	b002      	add	sp, #8
   1c9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    smpSmExecute(pCcb, pMsg);
   1c9f2:	f7fe bd89 	b.w	1b508 <smpSmExecute>
   1c9f6:	bf00      	nop

0001c9f8 <smpScActPkSendKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSendKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1c9f8:	b538      	push	{r3, r4, r5, lr}
  /* Send keypress notification to the peer */
  smpDmKeypress_t *pKeypress = (smpDmKeypress_t *) pMsg;
  uint8_t         *pPkt;
  uint8_t         *p;

  if (pCcb->pScCcb->kpNotify)
   1c9fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1c9fc:	789b      	ldrb	r3, [r3, #2]
   1c9fe:	b903      	cbnz	r3, 1ca02 <smpScActPkSendKeypress+0xa>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
      smpSmExecute(pCcb, pMsg);
    }
  }
}
   1ca00:	bd38      	pop	{r3, r4, r5, pc}
    smpStartRspTimer(pCcb);
   1ca02:	460d      	mov	r5, r1
   1ca04:	4604      	mov	r4, r0
   1ca06:	f7fe fa55 	bl	1aeb4 <smpStartRspTimer>
    if ((pPkt = smpMsgAlloc(SMP_KEYPRESS_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1ca0a:	200a      	movs	r0, #10
   1ca0c:	f7ff fb94 	bl	1c138 <smpMsgAlloc>
   1ca10:	4601      	mov	r1, r0
   1ca12:	b140      	cbz	r0, 1ca26 <smpScActPkSendKeypress+0x2e>
      UINT8_TO_BSTREAM(p, SMP_CMD_KEYPRESS);
   1ca14:	230e      	movs	r3, #14
   1ca16:	7203      	strb	r3, [r0, #8]
      *p = pKeypress->keypress;
   1ca18:	792b      	ldrb	r3, [r5, #4]
   1ca1a:	7243      	strb	r3, [r0, #9]
      smpSendPkt(pCcb, pPkt);
   1ca1c:	4620      	mov	r0, r4
}
   1ca1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSendPkt(pCcb, pPkt);
   1ca22:	f7ff bb69 	b.w	1c0f8 <smpSendPkt>
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1ca26:	f640 0303 	movw	r3, #2051	; 0x803
   1ca2a:	806b      	strh	r3, [r5, #2]
      smpSmExecute(pCcb, pMsg);
   1ca2c:	4629      	mov	r1, r5
   1ca2e:	4620      	mov	r0, r4
}
   1ca30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSmExecute(pCcb, pMsg);
   1ca34:	f7fe bd68 	b.w	1b508 <smpSmExecute>

0001ca38 <smpScActCalcSharedSecret>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcSharedSecret(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ca38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    }
  }
#endif

  /* Use local private key and peer public key to generate the shared secret */
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   1ca3c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);

  /* Generate the shared secret */
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
   1ca40:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1cad0 <smpScActCalcSharedSecret+0x98>
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   1ca44:	f8d8 5010 	ldr.w	r5, [r8, #16]
{
   1ca48:	b099      	sub	sp, #100	; 0x64
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   1ca4a:	68aa      	ldr	r2, [r5, #8]
   1ca4c:	68eb      	ldr	r3, [r5, #12]
{
   1ca4e:	4606      	mov	r6, r0
   1ca50:	460f      	mov	r7, r1
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
   1ca52:	6828      	ldr	r0, [r5, #0]
   1ca54:	6869      	ldr	r1, [r5, #4]
   1ca56:	ac10      	add	r4, sp, #64	; 0x40
   1ca58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ca5a:	6928      	ldr	r0, [r5, #16]
   1ca5c:	6969      	ldr	r1, [r5, #20]
   1ca5e:	69aa      	ldr	r2, [r5, #24]
   1ca60:	69eb      	ldr	r3, [r5, #28]
   1ca62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1ca64:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1ca68:	6820      	ldr	r0, [r4, #0]
   1ca6a:	6861      	ldr	r1, [r4, #4]
   1ca6c:	68a2      	ldr	r2, [r4, #8]
   1ca6e:	68e3      	ldr	r3, [r4, #12]
   1ca70:	46ee      	mov	lr, sp
   1ca72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ca76:	6920      	ldr	r0, [r4, #16]
   1ca78:	6961      	ldr	r1, [r4, #20]
   1ca7a:	69a2      	ldr	r2, [r4, #24]
   1ca7c:	69e3      	ldr	r3, [r4, #28]
   1ca7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   1ca82:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1ca86:	6a20      	ldr	r0, [r4, #32]
   1ca88:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ca8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1ca8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ca8e:	f10d 0c20 	add.w	ip, sp, #32
   1ca92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1ca96:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1ca98:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1ca9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1ca9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1ca9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
   1caa2:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
   1caa6:	f899 10e0 	ldrb.w	r1, [r9, #224]	; 0xe0
   1caaa:	2319      	movs	r3, #25
   1caac:	4668      	mov	r0, sp
   1caae:	f7f2 f827 	bl	eb00 <SecEccGenSharedSecret>
   1cab2:	b110      	cbz	r0, 1caba <smpScActCalcSharedSecret+0x82>
  {
    pMsg->hdr.status = SMP_ERR_MEMORY;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1cab4:	b019      	add	sp, #100	; 0x64
   1cab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1caba:	f24e 0303 	movw	r3, #57347	; 0xe003
   1cabe:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   1cac0:	4639      	mov	r1, r7
   1cac2:	4630      	mov	r0, r6
   1cac4:	f7fe fd20 	bl	1b508 <smpSmExecute>
}
   1cac8:	b019      	add	sp, #100	; 0x64
   1caca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cace:	bf00      	nop
   1cad0:	100059e4 	.word	0x100059e4

0001cad4 <smpScActCalcF5TKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5TKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  secEccMsg_t *pSecretMsg = (secEccMsg_t*) pMsg;
  uint8_t *pCmacText;

  if (pMsg->hdr.status == HCI_SUCCESS)
   1cad8:	78cb      	ldrb	r3, [r1, #3]
{
   1cada:	b086      	sub	sp, #24
   1cadc:	460c      	mov	r4, r1
   1cade:	4605      	mov	r5, r0
  if (pMsg->hdr.status == HCI_SUCCESS)
   1cae0:	bbd3      	cbnz	r3, 1cb58 <smpScActCalcF5TKey+0x84>
  {
    /* The shared secret is the DH Key */
    SMP_TRACE_256("DHKey (Shared Secret)", pSecretMsg->data.sharedSecret.secret);
   1cae2:	1d0e      	adds	r6, r1, #4
   1cae4:	4822      	ldr	r0, [pc, #136]	; (1cb70 <smpScActCalcF5TKey+0x9c>)
   1cae6:	2220      	movs	r2, #32
   1cae8:	4631      	mov	r1, r6
   1caea:	f000 fb7b 	bl	1d1e4 <smpLogByteArray>

    if ((pCmacText = SmpScAlloc(SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1caee:	4622      	mov	r2, r4
   1caf0:	4629      	mov	r1, r5
   1caf2:	2020      	movs	r0, #32
   1caf4:	f000 f9ce 	bl	1ce94 <SmpScAlloc>
   1caf8:	4684      	mov	ip, r0
   1cafa:	b350      	cbz	r0, 1cb52 <smpScActCalcF5TKey+0x7e>
    {
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
   1cafc:	4b1d      	ldr	r3, [pc, #116]	; (1cb74 <smpScActCalcF5TKey+0xa0>)
                              0x60, 0x37, 0x0B, 0xDB, 0x5A, 0x60, 0x83, 0xBE};

      /* T = AES-CMACsalt (DHKey) */
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
   1cafe:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1cb02:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1cb06:	68e7      	ldr	r7, [r4, #12]
   1cb08:	f8d4 a010 	ldr.w	sl, [r4, #16]
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
   1cb0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1cb0e:	f10d 0e08 	add.w	lr, sp, #8
   1cb12:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
   1cb16:	f8cc 9000 	str.w	r9, [ip]
   1cb1a:	f8cc 8004 	str.w	r8, [ip, #4]
   1cb1e:	f8cc 7008 	str.w	r7, [ip, #8]
   1cb22:	f8cc a00c 	str.w	sl, [ip, #12]
   1cb26:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1cb2a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1cb2e:	69e7      	ldr	r7, [r4, #28]
   1cb30:	f8d4 a020 	ldr.w	sl, [r4, #32]
   1cb34:	f8cc a01c 	str.w	sl, [ip, #28]
   1cb38:	f8cc 9010 	str.w	r9, [ip, #16]
   1cb3c:	f8cc 8014 	str.w	r8, [ip, #20]
   1cb40:	f8cc 7018 	str.w	r7, [ip, #24]

      /* Execute CMAC with salt as the key */
      SmpScCmac(salt, pCmacText, SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg);
   1cb44:	462b      	mov	r3, r5
   1cb46:	4670      	mov	r0, lr
   1cb48:	2220      	movs	r2, #32
   1cb4a:	9400      	str	r4, [sp, #0]
   1cb4c:	4661      	mov	r1, ip
   1cb4e:	f000 f97f 	bl	1ce50 <SmpScCmac>
  else
  {
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
    smpSmExecute(pCcb, pMsg);
  }
}
   1cb52:	b006      	add	sp, #24
   1cb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
   1cb58:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1cb5c:	220b      	movs	r2, #11
   1cb5e:	f000 faeb 	bl	1d138 <SmpScGetCancelMsgWithReattempt>
    smpSmExecute(pCcb, pMsg);
   1cb62:	4621      	mov	r1, r4
   1cb64:	4628      	mov	r0, r5
}
   1cb66:	b006      	add	sp, #24
   1cb68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    smpSmExecute(pCcb, pMsg);
   1cb6c:	f7fe bccc 	b.w	1b508 <smpSmExecute>
   1cb70:	00027aa4 	.word	0x00027aa4
   1cb74:	00027abc 	.word	0x00027abc

0001cb78 <smpScActCalcF5MacKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5MacKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cb78:	b570      	push	{r4, r5, r6, lr}
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
  uint8_t *pCmacText;

  /* Copy T from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   1cb7a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1cb7c:	4604      	mov	r4, r0
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   1cb7e:	6998      	ldr	r0, [r3, #24]
{
   1cb80:	b082      	sub	sp, #8
   1cb82:	460d      	mov	r5, r1
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
   1cb84:	3010      	adds	r0, #16
   1cb86:	6849      	ldr	r1, [r1, #4]
   1cb88:	f7f8 febc 	bl	15904 <Calc128Cpy>

  SMP_TRACE_128("T", pCcb->pScCcb->pLtk->ltk_t);
   1cb8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cb8e:	4819      	ldr	r0, [pc, #100]	; (1cbf4 <smpScActCalcF5MacKey+0x7c>)
   1cb90:	6999      	ldr	r1, [r3, #24]
   1cb92:	2210      	movs	r2, #16
   1cb94:	4411      	add	r1, r2
   1cb96:	f000 fb25 	bl	1d1e4 <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1cb9a:	462a      	mov	r2, r5
   1cb9c:	4621      	mov	r1, r4
   1cb9e:	2035      	movs	r0, #53	; 0x35
   1cba0:	f000 f978 	bl	1ce94 <SmpScAlloc>
   1cba4:	b318      	cbz	r0, 1cbee <smpScActCalcF5MacKey+0x76>
  {
    uint8_t *pCatBuf = pCmacText;

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* mackey = AES-CMACT (Counter = 0 || keyID ||N1 || N2|| A1|| A2|| Length = 256) */
    *pCatBuf++ = 0;
   1cba6:	2300      	movs	r3, #0
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1cba8:	2204      	movs	r2, #4
   1cbaa:	4606      	mov	r6, r0
   1cbac:	4912      	ldr	r1, [pc, #72]	; (1cbf8 <smpScActCalcF5MacKey+0x80>)
    *pCatBuf++ = 0;
   1cbae:	f800 3b01 	strb.w	r3, [r0], #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1cbb2:	f000 f9f7 	bl	1cfa4 <SmpScCat>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1cbb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cbb8:	6959      	ldr	r1, [r3, #20]
   1cbba:	f000 f9fb 	bl	1cfb4 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1cbbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cbc0:	6959      	ldr	r1, [r3, #20]
   1cbc2:	3110      	adds	r1, #16
   1cbc4:	f000 f9f6 	bl	1cfb4 <SmpScCat128>
   1cbc8:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1cbca:	4620      	mov	r0, r4
   1cbcc:	f7ff fbae 	bl	1c32c <smpScCatInitiatorBdAddr>
   1cbd0:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1cbd2:	4620      	mov	r0, r4
   1cbd4:	f7ff fbe2 	bl	1c39c <smpScCatResponderBdAddr>
    *pCatBuf++ = 1;
   1cbd8:	2301      	movs	r3, #1
   1cbda:	8003      	strh	r3, [r0, #0]
    *pCatBuf++ = 0;

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   1cbdc:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1cbde:	6990      	ldr	r0, [r2, #24]
   1cbe0:	9500      	str	r5, [sp, #0]
   1cbe2:	4623      	mov	r3, r4
   1cbe4:	2235      	movs	r2, #53	; 0x35
   1cbe6:	4631      	mov	r1, r6
   1cbe8:	3010      	adds	r0, #16
   1cbea:	f000 f931 	bl	1ce50 <SmpScCmac>
  }
}
   1cbee:	b002      	add	sp, #8
   1cbf0:	bd70      	pop	{r4, r5, r6, pc}
   1cbf2:	bf00      	nop
   1cbf4:	00027ad0 	.word	0x00027ad0
   1cbf8:	00027ae8 	.word	0x00027ae8

0001cbfc <smpScActCalcF5Ltk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5Ltk(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbfe:	4604      	mov	r4, r0
   1cc00:	b083      	sub	sp, #12
   1cc02:	460e      	mov	r6, r1
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
  uint8_t *pCmacText;

  SMP_TRACE_128("MAC", pMsg->aes.pCiphertext);
   1cc04:	2210      	movs	r2, #16
   1cc06:	6849      	ldr	r1, [r1, #4]
   1cc08:	4819      	ldr	r0, [pc, #100]	; (1cc70 <smpScActCalcF5Ltk+0x74>)
   1cc0a:	f000 faeb 	bl	1d1e4 <smpLogByteArray>

  /* Copy Mac Key from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->mac, pCmac->pCiphertext);
   1cc0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cc10:	6871      	ldr	r1, [r6, #4]
   1cc12:	6998      	ldr	r0, [r3, #24]
   1cc14:	f7f8 fe76 	bl	15904 <Calc128Cpy>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1cc18:	4632      	mov	r2, r6
   1cc1a:	4621      	mov	r1, r4
   1cc1c:	2035      	movs	r0, #53	; 0x35
   1cc1e:	f000 f939 	bl	1ce94 <SmpScAlloc>
   1cc22:	b310      	cbz	r0, 1cc6a <smpScActCalcF5Ltk+0x6e>
  {
    uint8_t *pCatBuf = pCmacText;

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* ltk = AES-CMACT (Counter = 1 || keyID || N1 || N2|| A1|| A2 ||Length = 256) */
    *pCatBuf++ = 1;
   1cc24:	2701      	movs	r7, #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1cc26:	2204      	movs	r2, #4
   1cc28:	4605      	mov	r5, r0
   1cc2a:	4912      	ldr	r1, [pc, #72]	; (1cc74 <smpScActCalcF5Ltk+0x78>)
    *pCatBuf++ = 1;
   1cc2c:	f800 7b01 	strb.w	r7, [r0], #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
   1cc30:	f000 f9b8 	bl	1cfa4 <SmpScCat>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1cc34:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cc36:	6959      	ldr	r1, [r3, #20]
   1cc38:	f000 f9bc 	bl	1cfb4 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1cc3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cc3e:	6959      	ldr	r1, [r3, #20]
   1cc40:	3110      	adds	r1, #16
   1cc42:	f000 f9b7 	bl	1cfb4 <SmpScCat128>
   1cc46:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1cc48:	4620      	mov	r0, r4
   1cc4a:	f7ff fb6f 	bl	1c32c <smpScCatInitiatorBdAddr>
   1cc4e:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1cc50:	4620      	mov	r0, r4
   1cc52:	f7ff fba3 	bl	1c39c <smpScCatResponderBdAddr>
    *pCatBuf++ = 1;
   1cc56:	8007      	strh	r7, [r0, #0]
    *pCatBuf++ = 0;

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
   1cc58:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1cc5a:	6990      	ldr	r0, [r2, #24]
   1cc5c:	9600      	str	r6, [sp, #0]
   1cc5e:	4629      	mov	r1, r5
   1cc60:	4623      	mov	r3, r4
   1cc62:	2235      	movs	r2, #53	; 0x35
   1cc64:	3010      	adds	r0, #16
   1cc66:	f000 f8f3 	bl	1ce50 <SmpScCmac>
  }
}
   1cc6a:	b003      	add	sp, #12
   1cc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc6e:	bf00      	nop
   1cc70:	00027ad4 	.word	0x00027ad4
   1cc74:	00027ae8 	.word	0x00027ae8

0001cc78 <smpScActDHKeyCalcF6Ea>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Ea(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cc78:	b570      	push	{r4, r5, r6, lr}
   1cc7a:	4604      	mov	r4, r0
   1cc7c:	b082      	sub	sp, #8
   1cc7e:	460d      	mov	r5, r1
  uint8_t *pCmacText;

  SMP_TRACE_128("LTK", pMsg->aes.pCiphertext);
   1cc80:	481d      	ldr	r0, [pc, #116]	; (1ccf8 <smpScActDHKeyCalcF6Ea+0x80>)
   1cc82:	6849      	ldr	r1, [r1, #4]
   1cc84:	2210      	movs	r2, #16
   1cc86:	f000 faad 	bl	1d1e4 <smpLogByteArray>

  /* Copy LTK from the previous state (smpScActCalcF5Ltk) */
  WStrReverseCpy(pCcb->pScCcb->pLtk->ltk_t, pMsg->aes.pCiphertext, 16);
   1cc8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cc8c:	6869      	ldr	r1, [r5, #4]
   1cc8e:	6998      	ldr	r0, [r3, #24]
   1cc90:	2210      	movs	r2, #16
   1cc92:	4410      	add	r0, r2
   1cc94:	f7f8 feb0 	bl	159f8 <WStrReverseCpy>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1cc98:	462a      	mov	r2, r5
   1cc9a:	4621      	mov	r1, r4
   1cc9c:	2041      	movs	r0, #65	; 0x41
   1cc9e:	f000 f8f9 	bl	1ce94 <SmpScAlloc>
   1cca2:	b338      	cbz	r0, 1ccf4 <smpScActDHKeyCalcF6Ea+0x7c>
  {
    uint8_t *pCatBuf = pCmacText;

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1cca4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cca6:	6959      	ldr	r1, [r3, #20]
   1cca8:	4606      	mov	r6, r0
   1ccaa:	f000 f983 	bl	1cfb4 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1ccae:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ccb0:	6959      	ldr	r1, [r3, #20]
   1ccb2:	3110      	adds	r1, #16
   1ccb4:	f000 f97e 	bl	1cfb4 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Rb);
   1ccb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ccba:	6959      	ldr	r1, [r3, #20]
   1ccbc:	3130      	adds	r1, #48	; 0x30
   1ccbe:	f000 f979 	bl	1cfb4 <SmpScCat128>

    *pCatBuf++ = pCcb->pairReq[SMP_AUTHREQ_POS]; /* AuthReq */
   1ccc2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1ccc6:	7003      	strb	r3, [r0, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_OOB_POS]; /* OOB Data Flag */
   1ccc8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1cccc:	7043      	strb	r3, [r0, #1]
    *pCatBuf++ = pCcb->pairReq[SMP_IO_POS]; /* IO Capability Parameter */
   1ccce:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1ccd2:	7083      	strb	r3, [r0, #2]

    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1ccd4:	1cc1      	adds	r1, r0, #3
   1ccd6:	4620      	mov	r0, r4
   1ccd8:	f7ff fb28 	bl	1c32c <smpScCatInitiatorBdAddr>
   1ccdc:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1ccde:	4620      	mov	r0, r4
   1cce0:	f7ff fb5c 	bl	1c39c <smpScCatResponderBdAddr>

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   1cce4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1cce6:	4623      	mov	r3, r4
   1cce8:	6990      	ldr	r0, [r2, #24]
   1ccea:	9500      	str	r5, [sp, #0]
   1ccec:	2241      	movs	r2, #65	; 0x41
   1ccee:	4631      	mov	r1, r6
   1ccf0:	f000 f8ae 	bl	1ce50 <SmpScCmac>
  }
}
   1ccf4:	b002      	add	sp, #8
   1ccf6:	bd70      	pop	{r4, r5, r6, pc}
   1ccf8:	00027ad8 	.word	0x00027ad8

0001ccfc <smpScActDHKeyCalcF6Eb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Eb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ccfc:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pCmacText;

  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
   1ccfe:	2210      	movs	r2, #16
{
   1cd00:	b082      	sub	sp, #8
   1cd02:	460e      	mov	r6, r1
   1cd04:	4604      	mov	r4, r0
  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
   1cd06:	6849      	ldr	r1, [r1, #4]
   1cd08:	481c      	ldr	r0, [pc, #112]	; (1cd7c <smpScActDHKeyCalcF6Eb+0x80>)
   1cd0a:	f000 fa6b 	bl	1d1e4 <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
   1cd0e:	4632      	mov	r2, r6
   1cd10:	4621      	mov	r1, r4
   1cd12:	2041      	movs	r0, #65	; 0x41
   1cd14:	f000 f8be 	bl	1ce94 <SmpScAlloc>
   1cd18:	b338      	cbz	r0, 1cd6a <smpScActDHKeyCalcF6Eb+0x6e>
  {
    uint8_t *pCatBuf = pCmacText;

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
   1cd1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cd1c:	6959      	ldr	r1, [r3, #20]
   1cd1e:	3110      	adds	r1, #16
   1cd20:	4605      	mov	r5, r0
   1cd22:	f000 f947 	bl	1cfb4 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
   1cd26:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cd28:	6959      	ldr	r1, [r3, #20]
   1cd2a:	f000 f943 	bl	1cfb4 <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Ra);
   1cd2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cd30:	6959      	ldr	r1, [r3, #20]
   1cd32:	3120      	adds	r1, #32
   1cd34:	f000 f93e 	bl	1cfb4 <SmpScCat128>

    *pCatBuf++ = pCcb->pairRsp[SMP_AUTHREQ_POS]; /* AuthReq */
   1cd38:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1cd3c:	7003      	strb	r3, [r0, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_OOB_POS]; /* OOB Data Flag */
   1cd3e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1cd42:	7043      	strb	r3, [r0, #1]
    *pCatBuf++ = pCcb->pairRsp[SMP_IO_POS]; /* IO Capability Parameter */
   1cd44:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1cd48:	7083      	strb	r3, [r0, #2]

    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
   1cd4a:	1cc1      	adds	r1, r0, #3
   1cd4c:	4620      	mov	r0, r4
   1cd4e:	f7ff fb25 	bl	1c39c <smpScCatResponderBdAddr>
   1cd52:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
   1cd54:	4620      	mov	r0, r4
   1cd56:	f7ff fae9 	bl	1c32c <smpScCatInitiatorBdAddr>

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
   1cd5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1cd5c:	4623      	mov	r3, r4
   1cd5e:	6990      	ldr	r0, [r2, #24]
   1cd60:	9600      	str	r6, [sp, #0]
   1cd62:	4629      	mov	r1, r5
   1cd64:	2241      	movs	r2, #65	; 0x41
   1cd66:	f000 f873 	bl	1ce50 <SmpScCmac>
  }

  /* Copy Ea from the previous state (smpScActDHKeyCalcF6Ea) */
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
   1cd6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cd6c:	6871      	ldr	r1, [r6, #4]
   1cd6e:	6958      	ldr	r0, [r3, #20]
}
   1cd70:	b002      	add	sp, #8
   1cd72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
   1cd76:	f7f8 bdc5 	b.w	15904 <Calc128Cpy>
   1cd7a:	bf00      	nop
   1cd7c:	00027adc 	.word	0x00027adc

0001cd80 <SmpScAllocScratchBuffers>:
 *
 *  \return TRUE if success, else FALSE.
 */
/*************************************************************************************************/
bool_t SmpScAllocScratchBuffers(smpCcb_t *pCcb)
{
   1cd80:	b538      	push	{r3, r4, r5, lr}
  if (pCcb->pScCcb->pScratch == NULL)
   1cd82:	6c44      	ldr	r4, [r0, #68]	; 0x44
   1cd84:	6963      	ldr	r3, [r4, #20]
{
   1cd86:	4605      	mov	r5, r0
  if (pCcb->pScCcb->pScratch == NULL)
   1cd88:	b1db      	cbz	r3, 1cdc2 <SmpScAllocScratchBuffers+0x42>
  {
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
  }

  if (pCcb->pScCcb->pPeerPublicKey == NULL)
   1cd8a:	68a3      	ldr	r3, [r4, #8]
   1cd8c:	b30b      	cbz	r3, 1cdd2 <SmpScAllocScratchBuffers+0x52>
  {
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
  }

  if (pCcb->pScCcb->pLtk == NULL)
   1cd8e:	69a3      	ldr	r3, [r4, #24]
   1cd90:	b33b      	cbz	r3, 1cde2 <SmpScAllocScratchBuffers+0x62>
  {
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
  }

  if (pCcb->pScCcb->pLocalPublicKey == NULL)
   1cd92:	68e3      	ldr	r3, [r4, #12]
   1cd94:	2b00      	cmp	r3, #0
   1cd96:	d02c      	beq.n	1cdf2 <SmpScAllocScratchBuffers+0x72>
  {
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
  }

  if (pCcb->pScCcb->pPrivateKey == NULL)
   1cd98:	6923      	ldr	r3, [r4, #16]
   1cd9a:	b163      	cbz	r3, 1cdb6 <SmpScAllocScratchBuffers+0x36>
  {
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
  }

  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   1cd9c:	6960      	ldr	r0, [r4, #20]
   1cd9e:	b148      	cbz	r0, 1cdb4 <SmpScAllocScratchBuffers+0x34>
   1cda0:	68a0      	ldr	r0, [r4, #8]
   1cda2:	b138      	cbz	r0, 1cdb4 <SmpScAllocScratchBuffers+0x34>
   1cda4:	69a0      	ldr	r0, [r4, #24]
   1cda6:	b128      	cbz	r0, 1cdb4 <SmpScAllocScratchBuffers+0x34>
   1cda8:	68e0      	ldr	r0, [r4, #12]
   1cdaa:	b118      	cbz	r0, 1cdb4 <SmpScAllocScratchBuffers+0x34>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
   1cdac:	6920      	ldr	r0, [r4, #16]
  {
    return TRUE;
   1cdae:	3800      	subs	r0, #0
   1cdb0:	bf18      	it	ne
   1cdb2:	2001      	movne	r0, #1
  }

  return FALSE;
}
   1cdb4:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
   1cdb6:	2020      	movs	r0, #32
   1cdb8:	f001 f88e 	bl	1ded8 <WsfBufAlloc>
   1cdbc:	6120      	str	r0, [r4, #16]
  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
   1cdbe:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1cdc0:	e7ec      	b.n	1cd9c <SmpScAllocScratchBuffers+0x1c>
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
   1cdc2:	2060      	movs	r0, #96	; 0x60
   1cdc4:	f001 f888 	bl	1ded8 <WsfBufAlloc>
   1cdc8:	6160      	str	r0, [r4, #20]
  if (pCcb->pScCcb->pPeerPublicKey == NULL)
   1cdca:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1cdcc:	68a3      	ldr	r3, [r4, #8]
   1cdce:	2b00      	cmp	r3, #0
   1cdd0:	d1dd      	bne.n	1cd8e <SmpScAllocScratchBuffers+0xe>
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   1cdd2:	2040      	movs	r0, #64	; 0x40
   1cdd4:	f001 f880 	bl	1ded8 <WsfBufAlloc>
   1cdd8:	60a0      	str	r0, [r4, #8]
  if (pCcb->pScCcb->pLtk == NULL)
   1cdda:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1cddc:	69a3      	ldr	r3, [r4, #24]
   1cdde:	2b00      	cmp	r3, #0
   1cde0:	d1d7      	bne.n	1cd92 <SmpScAllocScratchBuffers+0x12>
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
   1cde2:	2020      	movs	r0, #32
   1cde4:	f001 f878 	bl	1ded8 <WsfBufAlloc>
   1cde8:	61a0      	str	r0, [r4, #24]
  if (pCcb->pScCcb->pLocalPublicKey == NULL)
   1cdea:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1cdec:	68e3      	ldr	r3, [r4, #12]
   1cdee:	2b00      	cmp	r3, #0
   1cdf0:	d1d2      	bne.n	1cd98 <SmpScAllocScratchBuffers+0x18>
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
   1cdf2:	2040      	movs	r0, #64	; 0x40
   1cdf4:	f001 f870 	bl	1ded8 <WsfBufAlloc>
   1cdf8:	60e0      	str	r0, [r4, #12]
  if (pCcb->pScCcb->pPrivateKey == NULL)
   1cdfa:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1cdfc:	e7cc      	b.n	1cd98 <SmpScAllocScratchBuffers+0x18>
   1cdfe:	bf00      	nop

0001ce00 <SmpScFreeScratchBuffers>:
 */
/*************************************************************************************************/
void SmpScFreeScratchBuffers(smpCcb_t *pCcb)
{
  /* free scratch buffer */
  if (pCcb->pScCcb->pScratch != NULL)
   1ce00:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
   1ce02:	b510      	push	{r4, lr}
   1ce04:	4604      	mov	r4, r0
  if (pCcb->pScCcb->pScratch != NULL)
   1ce06:	6958      	ldr	r0, [r3, #20]
   1ce08:	b120      	cbz	r0, 1ce14 <SmpScFreeScratchBuffers+0x14>
  {
    WsfBufFree(pCcb->pScCcb->pScratch);
   1ce0a:	f001 f895 	bl	1df38 <WsfBufFree>
    pCcb->pScCcb->pScratch = NULL;
   1ce0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ce10:	2200      	movs	r2, #0
   1ce12:	615a      	str	r2, [r3, #20]
  }

  /* free scratch peer public key buffer */
  if (pCcb->pScCcb->pPeerPublicKey != NULL)
   1ce14:	6898      	ldr	r0, [r3, #8]
   1ce16:	b120      	cbz	r0, 1ce22 <SmpScFreeScratchBuffers+0x22>
  {
    WsfBufFree(pCcb->pScCcb->pPeerPublicKey);
   1ce18:	f001 f88e 	bl	1df38 <WsfBufFree>
    pCcb->pScCcb->pPeerPublicKey = NULL;
   1ce1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ce1e:	2200      	movs	r2, #0
   1ce20:	609a      	str	r2, [r3, #8]
  }

  /* free scratch LTK buffer */
  if (pCcb->pScCcb->pLtk != NULL)
   1ce22:	6998      	ldr	r0, [r3, #24]
   1ce24:	b120      	cbz	r0, 1ce30 <SmpScFreeScratchBuffers+0x30>
  {
    WsfBufFree(pCcb->pScCcb->pLtk);
   1ce26:	f001 f887 	bl	1df38 <WsfBufFree>
    pCcb->pScCcb->pLtk = NULL;
   1ce2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ce2c:	2200      	movs	r2, #0
   1ce2e:	619a      	str	r2, [r3, #24]
  }

  /* free scratch local public key buffer */
  if (pCcb->pScCcb->pLocalPublicKey != NULL)
   1ce30:	68d8      	ldr	r0, [r3, #12]
   1ce32:	b120      	cbz	r0, 1ce3e <SmpScFreeScratchBuffers+0x3e>
  {
    WsfBufFree(pCcb->pScCcb->pLocalPublicKey);
   1ce34:	f001 f880 	bl	1df38 <WsfBufFree>
    pCcb->pScCcb->pLocalPublicKey = NULL;
   1ce38:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ce3a:	2200      	movs	r2, #0
   1ce3c:	60da      	str	r2, [r3, #12]
  }

  /* free scratch private key buffer */
  if (pCcb->pScCcb->pPrivateKey != NULL)
   1ce3e:	6918      	ldr	r0, [r3, #16]
   1ce40:	b120      	cbz	r0, 1ce4c <SmpScFreeScratchBuffers+0x4c>
  {
    WsfBufFree(pCcb->pScCcb->pPrivateKey);
   1ce42:	f001 f879 	bl	1df38 <WsfBufFree>
    pCcb->pScCcb->pPrivateKey = NULL;
   1ce46:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ce48:	2200      	movs	r2, #0
   1ce4a:	611a      	str	r2, [r3, #16]
  }
}
   1ce4c:	bd10      	pop	{r4, pc}
   1ce4e:	bf00      	nop

0001ce50 <SmpScCmac>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCmac(const uint8_t *pKey, uint8_t *pText, uint8_t textLen, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ce50:	b570      	push	{r4, r5, r6, lr}
   1ce52:	461c      	mov	r4, r3
   1ce54:	b082      	sub	sp, #8
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   1ce56:	4b0e      	ldr	r3, [pc, #56]	; (1ce90 <SmpScCmac+0x40>)
   1ce58:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
   1ce5c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   1ce60:	9600      	str	r6, [sp, #0]
   1ce62:	261c      	movs	r6, #28
   1ce64:	9601      	str	r6, [sp, #4]
{
   1ce66:	460d      	mov	r5, r1
   1ce68:	9e06      	ldr	r6, [sp, #24]
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   1ce6a:	f7f4 ff23 	bl	11cb4 <SecCmac>
   1ce6e:	b108      	cbz	r0, 1ce74 <SmpScCmac+0x24>
    WsfBufFree(pText);
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1ce70:	b002      	add	sp, #8
   1ce72:	bd70      	pop	{r4, r5, r6, pc}
    WsfBufFree(pText);
   1ce74:	4628      	mov	r0, r5
   1ce76:	f001 f85f 	bl	1df38 <WsfBufFree>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1ce7a:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
   1ce7e:	4631      	mov	r1, r6
   1ce80:	4620      	mov	r0, r4
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1ce82:	8073      	strh	r3, [r6, #2]
}
   1ce84:	b002      	add	sp, #8
   1ce86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   1ce8a:	f7fe bb3d 	b.w	1b508 <smpSmExecute>
   1ce8e:	bf00      	nop
   1ce90:	100059e4 	.word	0x100059e4

0001ce94 <SmpScAlloc>:
 *
 *  \return Allocated buffer.
 */
/*************************************************************************************************/
uint8_t *SmpScAlloc(uint8_t size, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1ce94:	b570      	push	{r4, r5, r6, lr}
   1ce96:	460e      	mov	r6, r1
   1ce98:	4615      	mov	r5, r2
  uint8_t *pBuf = WsfBufAlloc(size);
   1ce9a:	f001 f81d 	bl	1ded8 <WsfBufAlloc>

  if (pBuf == NULL)
   1ce9e:	4604      	mov	r4, r0
   1cea0:	b108      	cbz	r0, 1cea6 <SmpScAlloc+0x12>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }

  return pBuf;
}
   1cea2:	4620      	mov	r0, r4
   1cea4:	bd70      	pop	{r4, r5, r6, pc}
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1cea6:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
   1ceaa:	4630      	mov	r0, r6
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1ceac:	806b      	strh	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
   1ceae:	4629      	mov	r1, r5
   1ceb0:	f7fe fb2a 	bl	1b508 <smpSmExecute>
}
   1ceb4:	4620      	mov	r0, r4
   1ceb6:	bd70      	pop	{r4, r5, r6, pc}

0001ceb8 <SmpScCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pU, uint8_t *pV, uint8_t z, uint8_t *pX)
{
   1ceb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cebc:	b082      	sub	sp, #8
   1cebe:	4607      	mov	r7, r0
  uint8_t *pBuf = WsfBufAlloc(size);
   1cec0:	2041      	movs	r0, #65	; 0x41
{
   1cec2:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   1cec6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1ceca:	4688      	mov	r8, r1
   1cecc:	4616      	mov	r6, r2
   1cece:	461d      	mov	r5, r3
  uint8_t *pBuf = WsfBufAlloc(size);
   1ced0:	f001 f802 	bl	1ded8 <WsfBufAlloc>
  if (pBuf == NULL)
   1ced4:	b3d0      	cbz	r0, 1cf4c <SmpScCalcF4+0x94>
  return pBuf;
   1ced6:	4604      	mov	r4, r0
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat(uint8_t *pDst, const uint8_t *pSrc, uint8_t len)
{
  memcpy(pDst, pSrc, len);
   1ced8:	6831      	ldr	r1, [r6, #0]
   1ceda:	6872      	ldr	r2, [r6, #4]
   1cedc:	68b3      	ldr	r3, [r6, #8]
   1cede:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   1cee2:	f8c4 c00c 	str.w	ip, [r4, #12]
   1cee6:	6021      	str	r1, [r4, #0]
   1cee8:	6062      	str	r2, [r4, #4]
   1ceea:	60a3      	str	r3, [r4, #8]
   1ceec:	6931      	ldr	r1, [r6, #16]
   1ceee:	6972      	ldr	r2, [r6, #20]
   1cef0:	69b3      	ldr	r3, [r6, #24]
   1cef2:	f8d6 c01c 	ldr.w	ip, [r6, #28]
   1cef6:	f8c4 c01c 	str.w	ip, [r4, #28]
   1cefa:	6121      	str	r1, [r4, #16]
   1cefc:	6162      	str	r2, [r4, #20]
   1cefe:	61a3      	str	r3, [r4, #24]
   1cf00:	6829      	ldr	r1, [r5, #0]
   1cf02:	686a      	ldr	r2, [r5, #4]
   1cf04:	68ab      	ldr	r3, [r5, #8]
   1cf06:	68ee      	ldr	r6, [r5, #12]
   1cf08:	62e6      	str	r6, [r4, #44]	; 0x2c
   1cf0a:	6221      	str	r1, [r4, #32]
   1cf0c:	6262      	str	r2, [r4, #36]	; 0x24
   1cf0e:	62a3      	str	r3, [r4, #40]	; 0x28
   1cf10:	69ab      	ldr	r3, [r5, #24]
   1cf12:	6929      	ldr	r1, [r5, #16]
   1cf14:	696a      	ldr	r2, [r5, #20]
   1cf16:	69ee      	ldr	r6, [r5, #28]
   1cf18:	63a3      	str	r3, [r4, #56]	; 0x38
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   1cf1a:	4b12      	ldr	r3, [pc, #72]	; (1cf64 <SmpScCalcF4+0xac>)
  memcpy(pDst, pSrc, len);
   1cf1c:	6321      	str	r1, [r4, #48]	; 0x30
   1cf1e:	6362      	str	r2, [r4, #52]	; 0x34
   1cf20:	63e6      	str	r6, [r4, #60]	; 0x3c
    *pCatBuf = z;
   1cf22:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
   1cf26:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
   1cf2a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
   1cf2e:	9200      	str	r2, [sp, #0]
   1cf30:	221c      	movs	r2, #28
   1cf32:	9201      	str	r2, [sp, #4]
   1cf34:	4650      	mov	r0, sl
   1cf36:	2241      	movs	r2, #65	; 0x41
   1cf38:	4621      	mov	r1, r4
   1cf3a:	f7f4 febb 	bl	11cb4 <SecCmac>
   1cf3e:	b110      	cbz	r0, 1cf46 <SmpScCalcF4+0x8e>
}
   1cf40:	b002      	add	sp, #8
   1cf42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    WsfBufFree(pText);
   1cf46:	4620      	mov	r0, r4
   1cf48:	f000 fff6 	bl	1df38 <WsfBufFree>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1cf4c:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
   1cf50:	4641      	mov	r1, r8
   1cf52:	4638      	mov	r0, r7
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1cf54:	f8a8 3002 	strh.w	r3, [r8, #2]
}
   1cf58:	b002      	add	sp, #8
   1cf5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    smpSmExecute(pCcb, pMsg);
   1cf5e:	f7fe bad3 	b.w	1b508 <smpSmExecute>
   1cf62:	bf00      	nop
   1cf64:	100059e4 	.word	0x100059e4

0001cf68 <SmpScInit>:
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1cf68:	4a0a      	ldr	r2, [pc, #40]	; (1cf94 <SmpScInit+0x2c>)
   1cf6a:	4b0b      	ldr	r3, [pc, #44]	; (1cf98 <SmpScInit+0x30>)
  smpCb.procAuthReq = smpScAuthReq;
   1cf6c:	480b      	ldr	r0, [pc, #44]	; (1cf9c <SmpScInit+0x34>)
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1cf6e:	f102 011c 	add.w	r1, r2, #28
{
   1cf72:	b410      	push	{r4}
  smpCb.procPairing = smpScProcPairing;
   1cf74:	4c0a      	ldr	r4, [pc, #40]	; (1cfa0 <SmpScInit+0x38>)
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1cf76:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  smpCb.lescSupported = TRUE;
   1cf7a:	2101      	movs	r1, #1
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1cf7c:	645a      	str	r2, [r3, #68]	; 0x44
  smpCb.lescSupported = TRUE;
   1cf7e:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1cf82:	3238      	adds	r2, #56	; 0x38
  smpCb.procAuthReq = smpScAuthReq;
   1cf84:	e9c3 4039 	strd	r4, r0, [r3, #228]	; 0xe4
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
   1cf88:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
   1cf8c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1cf90:	4770      	bx	lr
   1cf92:	bf00      	nop
   1cf94:	10005ad4 	.word	0x10005ad4
   1cf98:	100059e4 	.word	0x100059e4
   1cf9c:	0001c6ed 	.word	0x0001c6ed
   1cfa0:	0001c40d 	.word	0x0001c40d

0001cfa4 <SmpScCat>:
{
   1cfa4:	b538      	push	{r3, r4, r5, lr}
   1cfa6:	4605      	mov	r5, r0
   1cfa8:	4614      	mov	r4, r2
  memcpy(pDst, pSrc, len);
   1cfaa:	f7ef f8a9 	bl	c100 <memcpy>
  return pDst + len;
}
   1cfae:	1928      	adds	r0, r5, r4
   1cfb0:	bd38      	pop	{r3, r4, r5, pc}
   1cfb2:	bf00      	nop

0001cfb4 <SmpScCat128>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat128(uint8_t *pDst, uint8_t *pSrc)
{
   1cfb4:	b510      	push	{r4, lr}
   1cfb6:	4604      	mov	r4, r0
  Calc128Cpy(pDst, pSrc);
   1cfb8:	f7f8 fca4 	bl	15904 <Calc128Cpy>
  return pDst + 16;
}
   1cfbc:	f104 0010 	add.w	r0, r4, #16
   1cfc0:	bd10      	pop	{r4, pc}
   1cfc2:	bf00      	nop

0001cfc4 <smpScSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
   1cfc4:	b570      	push	{r4, r5, r6, lr}
  /* Transmit the public key */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1cfc6:	2201      	movs	r2, #1
{
   1cfc8:	4604      	mov	r4, r0
   1cfca:	460e      	mov	r6, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1cfcc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1cfd0:	4611      	mov	r1, r2
   1cfd2:	f7f0 fa1d 	bl	d410 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1cfd6:	4620      	mov	r0, r4
   1cfd8:	f7fd ff6c 	bl	1aeb4 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PUB_KEY_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1cfdc:	2049      	movs	r0, #73	; 0x49
   1cfde:	f7ff f8ab 	bl	1c138 <smpMsgAlloc>
   1cfe2:	b1b0      	cbz	r0, 1d012 <smpScSendPubKey+0x4e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PUBLIC_KEY);
   1cfe4:	230c      	movs	r3, #12
   1cfe6:	7203      	strb	r3, [r0, #8]

    /* Store Public Key X data in LSB first format */
    WStrReverseCpy(p,  pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
   1cfe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cfea:	4605      	mov	r5, r0
   1cfec:	68d9      	ldr	r1, [r3, #12]
   1cfee:	2220      	movs	r2, #32
   1cff0:	3009      	adds	r0, #9
   1cff2:	f7f8 fd01 	bl	159f8 <WStrReverseCpy>

    /* Store Public Key Y data in LSB first format */
    WStrReverseCpy(p+SMP_PUB_KEY_LEN, pCcb->pScCcb->pLocalPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
   1cff6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cff8:	68d9      	ldr	r1, [r3, #12]
   1cffa:	2220      	movs	r2, #32
   1cffc:	f105 0029 	add.w	r0, r5, #41	; 0x29
   1d000:	4411      	add	r1, r2
   1d002:	f7f8 fcf9 	bl	159f8 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1d006:	4629      	mov	r1, r5
   1d008:	4620      	mov	r0, r4
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1d00a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSendPkt(pCcb, pPkt);
   1d00e:	f7ff b873 	b.w	1c0f8 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d012:	f640 0303 	movw	r3, #2051	; 0x803
   1d016:	8073      	strh	r3, [r6, #2]
    smpSmExecute(pCcb, pMsg);
   1d018:	4631      	mov	r1, r6
   1d01a:	4620      	mov	r0, r4
}
   1d01c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
   1d020:	f7fe ba72 	b.w	1b508 <smpSmExecute>

0001d024 <smpScSendDHKeyCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendDHKeyCheck(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCheck)
{
   1d024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d026:	4616      	mov	r6, r2
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d028:	2201      	movs	r2, #1
{
   1d02a:	4605      	mov	r5, r0
   1d02c:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d02e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1d032:	4611      	mov	r1, r2
   1d034:	f7f0 f9ec 	bl	d410 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1d038:	4628      	mov	r0, r5
   1d03a:	f7fd ff3b 	bl	1aeb4 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_DHKEY_CHECK_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
   1d03e:	2019      	movs	r0, #25
   1d040:	f7ff f87a 	bl	1c138 <smpMsgAlloc>
   1d044:	b168      	cbz	r0, 1d062 <smpScSendDHKeyCheck+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_DHKEY_CHECK);
   1d046:	230d      	movs	r3, #13
   1d048:	7203      	strb	r3, [r0, #8]

    /* DH Key Check data is result of last CMAC operation (LSB first) */
    WStrReverseCpy(p, pCheck, SMP_DHKEY_CHECK_LEN);
   1d04a:	4604      	mov	r4, r0
   1d04c:	4631      	mov	r1, r6
   1d04e:	3009      	adds	r0, #9
   1d050:	2210      	movs	r2, #16
   1d052:	f7f8 fcd1 	bl	159f8 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1d056:	4621      	mov	r1, r4
   1d058:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1d05a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
   1d05e:	f7ff b84b 	b.w	1c0f8 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d062:	f640 0303 	movw	r3, #2051	; 0x803
   1d066:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   1d068:	4639      	mov	r1, r7
   1d06a:	4628      	mov	r0, r5
}
   1d06c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
   1d070:	f7fe ba4a 	b.w	1b508 <smpSmExecute>

0001d074 <smpScSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pRand)
{
   1d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d076:	4616      	mov	r6, r2
  /* Transmit the Pair Rand */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d078:	2201      	movs	r2, #1
{
   1d07a:	4605      	mov	r5, r0
   1d07c:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d07e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1d082:	4611      	mov	r1, r2
   1d084:	f7f0 f9c4 	bl	d410 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1d088:	4628      	mov	r0, r5
   1d08a:	f7fd ff13 	bl	1aeb4 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
   1d08e:	2019      	movs	r0, #25
   1d090:	f7ff f852 	bl	1c138 <smpMsgAlloc>
   1d094:	b168      	cbz	r0, 1d0b2 <smpScSendRand+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
   1d096:	2304      	movs	r3, #4
   1d098:	7203      	strb	r3, [r0, #8]

    /* Store Random data (LSB first) */
    WStrReverseCpy(p, pRand, SMP_RAND_LEN);
   1d09a:	4604      	mov	r4, r0
   1d09c:	4631      	mov	r1, r6
   1d09e:	3009      	adds	r0, #9
   1d0a0:	2210      	movs	r2, #16
   1d0a2:	f7f8 fca9 	bl	159f8 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1d0a6:	4621      	mov	r1, r4
   1d0a8:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1d0aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
   1d0ae:	f7ff b823 	b.w	1c0f8 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d0b2:	f640 0303 	movw	r3, #2051	; 0x803
   1d0b6:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   1d0b8:	4639      	mov	r1, r7
   1d0ba:	4628      	mov	r0, r5
}
   1d0bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
   1d0c0:	f7fe ba22 	b.w	1b508 <smpSmExecute>

0001d0c4 <smpScSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCnf)
{
   1d0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d0c6:	4616      	mov	r6, r2
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d0c8:	2201      	movs	r2, #1
{
   1d0ca:	4605      	mov	r5, r0
   1d0cc:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
   1d0ce:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
   1d0d2:	4611      	mov	r1, r2
   1d0d4:	f7f0 f99c 	bl	d410 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
   1d0d8:	4628      	mov	r0, r5
   1d0da:	f7fd feeb 	bl	1aeb4 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   1d0de:	2019      	movs	r0, #25
   1d0e0:	f7ff f82a 	bl	1c138 <smpMsgAlloc>
   1d0e4:	b168      	cbz	r0, 1d102 <smpScSendPairCnf+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
   1d0e6:	2303      	movs	r3, #3
   1d0e8:	7203      	strb	r3, [r0, #8]

    /* Store Confirm data (LSB first) */
    WStrReverseCpy(p, pCnf, SMP_CONFIRM_LEN);
   1d0ea:	4604      	mov	r4, r0
   1d0ec:	4631      	mov	r1, r6
   1d0ee:	3009      	adds	r0, #9
   1d0f0:	2210      	movs	r2, #16
   1d0f2:	f7f8 fc81 	bl	159f8 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
   1d0f6:	4621      	mov	r1, r4
   1d0f8:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
   1d0fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
   1d0fe:	f7fe bffb 	b.w	1c0f8 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
   1d102:	f640 0303 	movw	r3, #2051	; 0x803
   1d106:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
   1d108:	4639      	mov	r1, r7
   1d10a:	4628      	mov	r0, r5
}
   1d10c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
   1d110:	f7fe b9fa 	b.w	1b508 <smpSmExecute>

0001d114 <smpGetPkBit>:
 *  \return None.
 */
/*************************************************************************************************/
uint8_t smpGetPkBit(smpCcb_t *pCcb)
{
  smpScCcb_t *pScCb = pCcb->pScCcb;
   1d114:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
   1d116:	78d8      	ldrb	r0, [r3, #3]
  uint8_t bit = pScCb->pkPos % 8;

  if (pScCb->pScratch->Ra[indx] & 1<<bit)
   1d118:	695a      	ldr	r2, [r3, #20]
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
   1d11a:	08c3      	lsrs	r3, r0, #3
   1d11c:	f1c3 030f 	rsb	r3, r3, #15
  if (pScCb->pScratch->Ra[indx] & 1<<bit)
   1d120:	fa52 f383 	uxtab	r3, r2, r3
   1d124:	f000 0207 	and.w	r2, r0, #7
   1d128:	f893 0020 	ldrb.w	r0, [r3, #32]
   1d12c:	4110      	asrs	r0, r2
   1d12e:	f000 0001 	and.w	r0, r0, #1
    return 0x81;

  return 0x80;
}
   1d132:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   1d136:	4770      	bx	lr

0001d138 <SmpScGetCancelMsgWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SmpScGetCancelMsgWithReattempt(dmConnId_t connId, wsfMsgHdr_t *pHdr, uint8_t status)
{
   1d138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d13a:	460d      	mov	r5, r1
   1d13c:	4617      	mov	r7, r2
   1d13e:	4606      	mov	r6, r0
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   1d140:	f7fe fde4 	bl	1bd0c <smpCcbByConnId>
   1d144:	4604      	mov	r4, r0

  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
   1d146:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
   1d14a:	480c      	ldr	r0, [pc, #48]	; (1d17c <SmpScGetCancelMsgWithReattempt+0x44>)
   1d14c:	f001 faa4 	bl	1e698 <WsfTrace>

  /* update repeated attempts count */
  pCcb->attempts++;
   1d150:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1d154:	3301      	adds	r3, #1
   1d156:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

  pHdr->param = connId;
  pHdr->status = status;

  SmpDbPairingFailed(connId);
   1d15a:	4630      	mov	r0, r6
  pHdr->param = connId;
   1d15c:	802e      	strh	r6, [r5, #0]
  pHdr->status = status;
   1d15e:	70ef      	strb	r7, [r5, #3]
  SmpDbPairingFailed(connId);
   1d160:	f7fe fbbc 	bl	1b8dc <SmpDbPairingFailed>

  if (pCcb->attempts == pSmpCfg->maxAttempts)
   1d164:	4a06      	ldr	r2, [pc, #24]	; (1d180 <SmpScGetCancelMsgWithReattempt+0x48>)
   1d166:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1d16a:	6812      	ldr	r2, [r2, #0]
   1d16c:	79d2      	ldrb	r2, [r2, #7]
    pHdr->event = SMP_MSG_INT_MAX_ATTEMPTS;
  }
  else
  {
    /* else just fail */
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
   1d16e:	4293      	cmp	r3, r2
   1d170:	bf0c      	ite	eq
   1d172:	230d      	moveq	r3, #13
   1d174:	2303      	movne	r3, #3
   1d176:	70ab      	strb	r3, [r5, #2]
  }
}
   1d178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d17a:	bf00      	nop
   1d17c:	00027aec 	.word	0x00027aec
   1d180:	10002c30 	.word	0x10002c30

0001d184 <smpScFailWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void smpScFailWithReattempt(smpCcb_t *pCcb)
{
   1d184:	b570      	push	{r4, r5, r6, lr}
  wsfMsgHdr_t hdr;

  SmpScGetCancelMsgWithReattempt(pCcb->connId, &hdr, SMP_ERR_CONFIRM_VALUE);
   1d186:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
{
   1d18a:	b082      	sub	sp, #8
   1d18c:	4605      	mov	r5, r0
  smpCcb_t *pCcb = smpCcbByConnId(connId);
   1d18e:	4630      	mov	r0, r6
   1d190:	f7fe fdbc 	bl	1bd0c <smpCcbByConnId>
   1d194:	4604      	mov	r4, r0
  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
   1d196:	4811      	ldr	r0, [pc, #68]	; (1d1dc <smpScFailWithReattempt+0x58>)
   1d198:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
   1d19c:	f001 fa7c 	bl	1e698 <WsfTrace>
  pCcb->attempts++;
   1d1a0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pHdr->param = connId;
   1d1a4:	f8ad 6004 	strh.w	r6, [sp, #4]
  pCcb->attempts++;
   1d1a8:	3301      	adds	r3, #1
  SmpDbPairingFailed(connId);
   1d1aa:	4630      	mov	r0, r6
  pCcb->attempts++;
   1d1ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  pHdr->status = status;
   1d1b0:	2304      	movs	r3, #4
   1d1b2:	f88d 3007 	strb.w	r3, [sp, #7]
  SmpDbPairingFailed(connId);
   1d1b6:	f7fe fb91 	bl	1b8dc <SmpDbPairingFailed>
  if (pCcb->attempts == pSmpCfg->maxAttempts)
   1d1ba:	4a09      	ldr	r2, [pc, #36]	; (1d1e0 <smpScFailWithReattempt+0x5c>)
   1d1bc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1d1c0:	6812      	ldr	r2, [r2, #0]
   1d1c2:	79d2      	ldrb	r2, [r2, #7]

  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
   1d1c4:	a901      	add	r1, sp, #4
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
   1d1c6:	4293      	cmp	r3, r2
   1d1c8:	bf0c      	ite	eq
   1d1ca:	230d      	moveq	r3, #13
   1d1cc:	2303      	movne	r3, #3
  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
   1d1ce:	4628      	mov	r0, r5
   1d1d0:	f88d 3006 	strb.w	r3, [sp, #6]
   1d1d4:	f7fe f998 	bl	1b508 <smpSmExecute>
}
   1d1d8:	b002      	add	sp, #8
   1d1da:	bd70      	pop	{r4, r5, r6, pc}
   1d1dc:	00027aec 	.word	0x00027aec
   1d1e0:	10002c30 	.word	0x10002c30

0001d1e4 <smpLogByteArray>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpLogByteArray(char *str, uint8_t *pArray, uint8_t len)
{
   1d1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d1e8:	4614      	mov	r4, r2
   1d1ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1d1ee:	460d      	mov	r5, r1
#if WSF_TOKEN_ENABLED == TRUE || WSF_TRACE_ENABLED == TRUE

  char buffer[512];
  int i, j=0, pos=0;

  SMP_TRACE_INFO0(str);
   1d1f0:	f001 fa52 	bl	1e698 <WsfTrace>

  while (j < len)
   1d1f4:	2c00      	cmp	r4, #0
   1d1f6:	d05c      	beq.n	1d2b2 <smpLogByteArray+0xce>
  int i, j=0, pos=0;
   1d1f8:	2600      	movs	r6, #0
   1d1fa:	46a0      	mov	r8, r4
    for (i=0; i<count; i++, j++)
    {
      uint8_t quad;

      if (i && i % 4 == 0)
        buffer[pos++] = ' ';
   1d1fc:	2720      	movs	r7, #32
    buffer[pos++] = '[';
   1d1fe:	235b      	movs	r3, #91	; 0x5b
    if (len-j < count)
   1d200:	f1b8 0f0f 	cmp.w	r8, #15
    buffer[pos++] = '[';
   1d204:	f88d 3000 	strb.w	r3, [sp]
    if (len-j < count)
   1d208:	dd47      	ble.n	1d29a <smpLogByteArray+0xb6>
    int count = 16;
   1d20a:	f04f 0810 	mov.w	r8, #16
      if (i && i % 4 == 0)
   1d20e:	f106 3eff 	add.w	lr, r6, #4294967295
   1d212:	44ae      	add	lr, r5
    for (i=0; i<count; i++, j++)
   1d214:	2200      	movs	r2, #0
    buffer[pos++] = '[';
   1d216:	f04f 0c01 	mov.w	ip, #1
   1d21a:	e005      	b.n	1d228 <smpLogByteArray+0x44>
      if (i && i % 4 == 0)
   1d21c:	0793      	lsls	r3, r2, #30
        buffer[pos++] = ' ';
   1d21e:	bf04      	itt	eq
   1d220:	f80d 700c 	strbeq.w	r7, [sp, ip]
   1d224:	f10c 0c01 	addeq.w	ip, ip, #1

      quad = (pArray[j] >> 4) & 0xf;
   1d228:	f81e 3f01 	ldrb.w	r3, [lr, #1]!

      if (quad < 10)
   1d22c:	2b9f      	cmp	r3, #159	; 0x9f
      quad = (pArray[j] >> 4) & 0xf;
   1d22e:	ea4f 1013 	mov.w	r0, r3, lsr #4
        buffer[pos++] = '0' + quad;
      else
        buffer[pos++] = 'a' + quad - 10;

      quad = pArray[j] & 0xf;
   1d232:	f003 030f 	and.w	r3, r3, #15
        buffer[pos++] = '0' + quad;
   1d236:	f10c 0101 	add.w	r1, ip, #1
   1d23a:	bf92      	itee	ls
   1d23c:	3030      	addls	r0, #48	; 0x30
        buffer[pos++] = 'a' + quad - 10;
   1d23e:	f10c 0101 	addhi.w	r1, ip, #1
   1d242:	3057      	addhi	r0, #87	; 0x57
    for (i=0; i<count; i++, j++)
   1d244:	3201      	adds	r2, #1

      if (quad < 10)
   1d246:	2b09      	cmp	r3, #9
        buffer[pos++] = '0' + quad;
   1d248:	bf94      	ite	ls
   1d24a:	3330      	addls	r3, #48	; 0x30
      else
        buffer[pos++] = 'a' + quad - 10;
   1d24c:	3357      	addhi	r3, #87	; 0x57
    for (i=0; i<count; i++, j++)
   1d24e:	4590      	cmp	r8, r2
   1d250:	f80d 000c 	strb.w	r0, [sp, ip]
      if (quad < 10)
   1d254:	f80d 3001 	strb.w	r3, [sp, r1]
        buffer[pos++] = '0' + quad;
   1d258:	f101 0c01 	add.w	ip, r1, #1
    for (i=0; i<count; i++, j++)
   1d25c:	dcde      	bgt.n	1d21c <smpLogByteArray+0x38>
   1d25e:	f1b8 0f00 	cmp.w	r8, #0
    }

    buffer[pos++] = ']';
    buffer[pos++] = '\0';
   1d262:	eb0d 030c 	add.w	r3, sp, ip
    for (i=0; i<count; i++, j++)
   1d266:	f108 38ff 	add.w	r8, r8, #4294967295
    buffer[pos++] = ']';
   1d26a:	f04f 015d 	mov.w	r1, #93	; 0x5d
    for (i=0; i<count; i++, j++)
   1d26e:	bfd8      	it	le
   1d270:	f04f 0800 	movle.w	r8, #0
    buffer[pos++] = '\0';
   1d274:	2200      	movs	r2, #0
   1d276:	3601      	adds	r6, #1
    buffer[pos++] = ']';
   1d278:	f80d 100c 	strb.w	r1, [sp, ip]
    for (i=0; i<count; i++, j++)
   1d27c:	4446      	add	r6, r8
    SMP_TRACE_INFO0(buffer);
   1d27e:	4668      	mov	r0, sp
    buffer[pos++] = '\0';
   1d280:	705a      	strb	r2, [r3, #1]
    SMP_TRACE_INFO0(buffer);
   1d282:	f001 fa09 	bl	1e698 <WsfTrace>
  while (j < len)
   1d286:	42b4      	cmp	r4, r6
   1d288:	dd13      	ble.n	1d2b2 <smpLogByteArray+0xce>
   1d28a:	eba4 0806 	sub.w	r8, r4, r6
    buffer[pos++] = '[';
   1d28e:	235b      	movs	r3, #91	; 0x5b
    if (len-j < count)
   1d290:	f1b8 0f0f 	cmp.w	r8, #15
    buffer[pos++] = '[';
   1d294:	f88d 3000 	strb.w	r3, [sp]
    if (len-j < count)
   1d298:	dcb7      	bgt.n	1d20a <smpLogByteArray+0x26>
    for (i=0; i<count; i++, j++)
   1d29a:	b10e      	cbz	r6, 1d2a0 <smpLogByteArray+0xbc>
   1d29c:	46b0      	mov	r8, r6
   1d29e:	e7b6      	b.n	1d20e <smpLogByteArray+0x2a>
    buffer[pos++] = ']';
   1d2a0:	235d      	movs	r3, #93	; 0x5d
    SMP_TRACE_INFO0(buffer);
   1d2a2:	4668      	mov	r0, sp
    buffer[pos++] = ']';
   1d2a4:	f88d 3001 	strb.w	r3, [sp, #1]
    buffer[pos++] = '\0';
   1d2a8:	f88d 6002 	strb.w	r6, [sp, #2]
    SMP_TRACE_INFO0(buffer);
   1d2ac:	f001 f9f4 	bl	1e698 <WsfTrace>
  while (j < len)
   1d2b0:	e7a5      	b.n	1d1fe <smpLogByteArray+0x1a>
    buffer[pos++] = '\0';

    SMP_TRACE_INFO0(buffer);
  }
#endif
}
   1d2b2:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1d2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d2ba:	bf00      	nop

0001d2bc <AppDbInit>:
{
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
  return;
}
   1d2bc:	4770      	bx	lr
   1d2be:	bf00      	nop

0001d2c0 <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr, bool_t master_role)
{
   1d2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t     i;

  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (!pRec->inUse)
   1d2c2:	4b19      	ldr	r3, [pc, #100]	; (1d328 <AppDbNewRecord+0x68>)
   1d2c4:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
{
   1d2c8:	4607      	mov	r7, r0
   1d2ca:	460e      	mov	r6, r1
   1d2cc:	4615      	mov	r5, r2
    if (!pRec->inUse)
   1d2ce:	b32c      	cbz	r4, 1d31c <AppDbNewRecord+0x5c>
   1d2d0:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
   1d2d4:	b322      	cbz	r2, 1d320 <AppDbNewRecord+0x60>
   1d2d6:	f893 21b7 	ldrb.w	r2, [r3, #439]	; 0x1b7
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1d2da:	f503 74c4 	add.w	r4, r3, #392	; 0x188
    if (!pRec->inUse)
   1d2de:	b14a      	cbz	r2, 1d2f4 <AppDbNewRecord+0x34>

  /* if all records were allocated */
  if (i == 0)
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   1d2e0:	4a12      	ldr	r2, [pc, #72]	; (1d32c <AppDbNewRecord+0x6c>)
   1d2e2:	6814      	ldr	r4, [r2, #0]

    /* get next record to overwrite */
    pAppDbNewRec++;
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   1d2e4:	f503 7013 	add.w	r0, r3, #588	; 0x24c
    pAppDbNewRec++;
   1d2e8:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
    {
      pAppDbNewRec = appDb.rec;
   1d2ec:	4281      	cmp	r1, r0
   1d2ee:	bf18      	it	ne
   1d2f0:	460b      	movne	r3, r1
   1d2f2:	6013      	str	r3, [r2, #0]
    }
  }

  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   1d2f4:	22c4      	movs	r2, #196	; 0xc4
   1d2f6:	2100      	movs	r1, #0
   1d2f8:	4620      	mov	r0, r4
   1d2fa:	f006 f81f 	bl	2333c <memset>
  pRec->inUse = TRUE;
   1d2fe:	2301      	movs	r3, #1
   1d300:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  pRec->addrType = addrType;
  BdaCpy(pRec->peerAddr, pAddr);
   1d304:	4620      	mov	r0, r4
  pRec->addrType = addrType;
   1d306:	71a7      	strb	r7, [r4, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   1d308:	4631      	mov	r1, r6
   1d30a:	f7f8 fad7 	bl	158bc <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   1d30e:	2300      	movs	r3, #0
   1d310:	f8a4 3031 	strh.w	r3, [r4, #49]	; 0x31
  pRec->peerRpao = FALSE;
  pRec->master_role = master_role;
   1d314:	f884 50c3 	strb.w	r5, [r4, #195]	; 0xc3

  return (appDbHdl_t) pRec;
}
   1d318:	4620      	mov	r0, r4
   1d31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  appDbRec_t  *pRec = appDb.rec;
   1d31c:	461c      	mov	r4, r3
   1d31e:	e7e9      	b.n	1d2f4 <AppDbNewRecord+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1d320:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
   1d324:	e7e6      	b.n	1d2f4 <AppDbNewRecord+0x34>
   1d326:	bf00      	nop
   1d328:	10005b28 	.word	0x10005b28
   1d32c:	10002c28 	.word	0x10002c28

0001d330 <AppDbGetNextRecord>:
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   1d330:	b198      	cbz	r0, 1d35a <AppDbGetNextRecord+0x2a>
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   1d332:	4a12      	ldr	r2, [pc, #72]	; (1d37c <AppDbGetNextRecord+0x4c>)
   1d334:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
   1d338:	b123      	cbz	r3, 1d344 <AppDbGetNextRecord+0x14>
   1d33a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1d33e:	b10b      	cbz	r3, 1d344 <AppDbGetNextRecord+0x14>
   1d340:	4290      	cmp	r0, r2
   1d342:	d018      	beq.n	1d376 <AppDbGetNextRecord+0x46>
   1d344:	f892 30f3 	ldrb.w	r3, [r2, #243]	; 0xf3
   1d348:	b12b      	cbz	r3, 1d356 <AppDbGetNextRecord+0x26>
   1d34a:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
   1d34e:	b113      	cbz	r3, 1d356 <AppDbGetNextRecord+0x26>
   1d350:	4b0b      	ldr	r3, [pc, #44]	; (1d380 <AppDbGetNextRecord+0x50>)
   1d352:	4298      	cmp	r0, r3
   1d354:	d00f      	beq.n	1d376 <AppDbGetNextRecord+0x46>
    return APP_DB_HDL_NONE;
   1d356:	2000      	movs	r0, #0
   1d358:	4770      	bx	lr
    pRec = appDb.rec;
   1d35a:	4808      	ldr	r0, [pc, #32]	; (1d37c <AppDbGetNextRecord+0x4c>)
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   1d35c:	4a09      	ldr	r2, [pc, #36]	; (1d384 <AppDbGetNextRecord+0x54>)
    if (pRec->inUse && pRec->valid)
   1d35e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   1d362:	b113      	cbz	r3, 1d36a <AppDbGetNextRecord+0x3a>
   1d364:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1d368:	b923      	cbnz	r3, 1d374 <AppDbGetNextRecord+0x44>
    pRec++;
   1d36a:	30c4      	adds	r0, #196	; 0xc4
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   1d36c:	4290      	cmp	r0, r2
   1d36e:	d3f6      	bcc.n	1d35e <AppDbGetNextRecord+0x2e>
    return APP_DB_HDL_NONE;
   1d370:	2000      	movs	r0, #0
   1d372:	4770      	bx	lr
}
   1d374:	4770      	bx	lr
    pRec++;
   1d376:	30c4      	adds	r0, #196	; 0xc4
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   1d378:	e7f0      	b.n	1d35c <AppDbGetNextRecord+0x2c>
   1d37a:	bf00      	nop
   1d37c:	10005b28 	.word	0x10005b28
   1d380:	10005bec 	.word	0x10005bec
   1d384:	10005d74 	.word	0x10005d74

0001d388 <AppDbValidateRecord>:
  ((appDbRec_t *) hdl)->valid = TRUE;
   1d388:	2301      	movs	r3, #1
   1d38a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   1d38e:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
}
   1d392:	4770      	bx	lr

0001d394 <AppDbCheckValidRecord>:
  if (((appDbRec_t *) hdl)->valid == FALSE)
   1d394:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1d398:	b90b      	cbnz	r3, 1d39e <AppDbCheckValidRecord+0xa>
  ((appDbRec_t *) hdl)->inUse = FALSE;
   1d39a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
   1d39e:	4770      	bx	lr

0001d3a0 <AppDbRecordInUse>:
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   1d3a0:	4a10      	ldr	r2, [pc, #64]	; (1d3e4 <AppDbRecordInUse+0x44>)
   1d3a2:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
   1d3a6:	b123      	cbz	r3, 1d3b2 <AppDbRecordInUse+0x12>
   1d3a8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1d3ac:	b10b      	cbz	r3, 1d3b2 <AppDbRecordInUse+0x12>
   1d3ae:	4290      	cmp	r0, r2
   1d3b0:	d016      	beq.n	1d3e0 <AppDbRecordInUse+0x40>
   1d3b2:	f892 30f3 	ldrb.w	r3, [r2, #243]	; 0xf3
   1d3b6:	b12b      	cbz	r3, 1d3c4 <AppDbRecordInUse+0x24>
   1d3b8:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
   1d3bc:	b113      	cbz	r3, 1d3c4 <AppDbRecordInUse+0x24>
   1d3be:	4b0a      	ldr	r3, [pc, #40]	; (1d3e8 <AppDbRecordInUse+0x48>)
   1d3c0:	4298      	cmp	r0, r3
   1d3c2:	d00d      	beq.n	1d3e0 <AppDbRecordInUse+0x40>
   1d3c4:	f892 31b7 	ldrb.w	r3, [r2, #439]	; 0x1b7
   1d3c8:	b143      	cbz	r3, 1d3dc <AppDbRecordInUse+0x3c>
   1d3ca:	f892 31b8 	ldrb.w	r3, [r2, #440]	; 0x1b8
   1d3ce:	b12b      	cbz	r3, 1d3dc <AppDbRecordInUse+0x3c>
   1d3d0:	4a06      	ldr	r2, [pc, #24]	; (1d3ec <AppDbRecordInUse+0x4c>)
    {
      return TRUE;
    }
  }

  return FALSE;
   1d3d2:	1a80      	subs	r0, r0, r2
   1d3d4:	fab0 f080 	clz	r0, r0
   1d3d8:	0940      	lsrs	r0, r0, #5
   1d3da:	4770      	bx	lr
   1d3dc:	4618      	mov	r0, r3
}
   1d3de:	4770      	bx	lr
      return TRUE;
   1d3e0:	2001      	movs	r0, #1
   1d3e2:	4770      	bx	lr
   1d3e4:	10005b28 	.word	0x10005b28
   1d3e8:	10005bec 	.word	0x10005bec
   1d3ec:	10005cb0 	.word	0x10005cb0

0001d3f0 <AppDbCheckBonded>:
  uint8_t     i;

  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && !pRec->master_role)
   1d3f0:	4b0b      	ldr	r3, [pc, #44]	; (1d420 <AppDbCheckBonded+0x30>)
   1d3f2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
   1d3f6:	b112      	cbz	r2, 1d3fe <AppDbCheckBonded+0xe>
   1d3f8:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
   1d3fc:	b172      	cbz	r2, 1d41c <AppDbCheckBonded+0x2c>
   1d3fe:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
   1d402:	b112      	cbz	r2, 1d40a <AppDbCheckBonded+0x1a>
   1d404:	f893 2187 	ldrb.w	r2, [r3, #391]	; 0x187
   1d408:	b142      	cbz	r2, 1d41c <AppDbCheckBonded+0x2c>
   1d40a:	f893 01b7 	ldrb.w	r0, [r3, #439]	; 0x1b7
   1d40e:	b130      	cbz	r0, 1d41e <AppDbCheckBonded+0x2e>
   1d410:	f893 024b 	ldrb.w	r0, [r3, #587]	; 0x24b
    {
      return TRUE;
    }
  }

  return FALSE;
   1d414:	fab0 f080 	clz	r0, r0
   1d418:	0940      	lsrs	r0, r0, #5
   1d41a:	4770      	bx	lr
      return TRUE;
   1d41c:	2001      	movs	r0, #1
}
   1d41e:	4770      	bx	lr
   1d420:	10005b28 	.word	0x10005b28

0001d424 <AppDbDeleteAllRecords>:
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    pRec->inUse = FALSE;
   1d424:	4b04      	ldr	r3, [pc, #16]	; (1d438 <AppDbDeleteAllRecords+0x14>)
   1d426:	2200      	movs	r2, #0
   1d428:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1d42c:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
   1d430:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
  }
}
   1d434:	4770      	bx	lr
   1d436:	bf00      	nop
   1d438:	10005b28 	.word	0x10005b28

0001d43c <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   1d43c:	b570      	push	{r4, r5, r6, lr}
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1d43e:	4c19      	ldr	r4, [pc, #100]	; (1d4a4 <AppDbFindByAddr+0x68>)
{
   1d440:	460e      	mov	r6, r1
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   1d442:	f7f0 faa5 	bl	d990 <DmHostAddrType>
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1d446:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   1d44a:	4605      	mov	r5, r0
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1d44c:	b113      	cbz	r3, 1d454 <AppDbFindByAddr+0x18>
   1d44e:	79a3      	ldrb	r3, [r4, #6]
   1d450:	4283      	cmp	r3, r0
   1d452:	d00f      	beq.n	1d474 <AppDbFindByAddr+0x38>
   1d454:	f894 30f3 	ldrb.w	r3, [r4, #243]	; 0xf3
   1d458:	b11b      	cbz	r3, 1d462 <AppDbFindByAddr+0x26>
   1d45a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   1d45e:	42ab      	cmp	r3, r5
   1d460:	d010      	beq.n	1d484 <AppDbFindByAddr+0x48>
   1d462:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1d466:	b11b      	cbz	r3, 1d470 <AppDbFindByAddr+0x34>
   1d468:	f894 318e 	ldrb.w	r3, [r4, #398]	; 0x18e
   1d46c:	42ab      	cmp	r3, r5
   1d46e:	d011      	beq.n	1d494 <AppDbFindByAddr+0x58>
    {
      return (appDbHdl_t) pRec;
    }
  }

  return APP_DB_HDL_NONE;
   1d470:	2000      	movs	r0, #0
}
   1d472:	bd70      	pop	{r4, r5, r6, pc}
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1d474:	4631      	mov	r1, r6
   1d476:	4620      	mov	r0, r4
   1d478:	f7f8 fa26 	bl	158c8 <BdaCmp>
   1d47c:	2800      	cmp	r0, #0
   1d47e:	d0e9      	beq.n	1d454 <AppDbFindByAddr+0x18>
  appDbRec_t  *pRec = appDb.rec;
   1d480:	4620      	mov	r0, r4
}
   1d482:	bd70      	pop	{r4, r5, r6, pc}
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1d484:	4808      	ldr	r0, [pc, #32]	; (1d4a8 <AppDbFindByAddr+0x6c>)
   1d486:	4631      	mov	r1, r6
   1d488:	f7f8 fa1e 	bl	158c8 <BdaCmp>
   1d48c:	2800      	cmp	r0, #0
   1d48e:	d0e8      	beq.n	1d462 <AppDbFindByAddr+0x26>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1d490:	4805      	ldr	r0, [pc, #20]	; (1d4a8 <AppDbFindByAddr+0x6c>)
}
   1d492:	bd70      	pop	{r4, r5, r6, pc}
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1d494:	4805      	ldr	r0, [pc, #20]	; (1d4ac <AppDbFindByAddr+0x70>)
   1d496:	4631      	mov	r1, r6
   1d498:	f7f8 fa16 	bl	158c8 <BdaCmp>
   1d49c:	2800      	cmp	r0, #0
   1d49e:	d0e7      	beq.n	1d470 <AppDbFindByAddr+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1d4a0:	4802      	ldr	r0, [pc, #8]	; (1d4ac <AppDbFindByAddr+0x70>)
}
   1d4a2:	bd70      	pop	{r4, r5, r6, pc}
   1d4a4:	10005b28 	.word	0x10005b28
   1d4a8:	10005bec 	.word	0x10005bec
   1d4ac:	10005cb0 	.word	0x10005cb0

0001d4b0 <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   1d4b0:	b570      	push	{r4, r5, r6, lr}
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   1d4b2:	4c1b      	ldr	r4, [pc, #108]	; (1d520 <AppDbFindByLtkReq+0x70>)
   1d4b4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
{
   1d4b8:	4605      	mov	r5, r0
   1d4ba:	460e      	mov	r6, r1
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   1d4bc:	b11b      	cbz	r3, 1d4c6 <AppDbFindByLtkReq+0x16>
   1d4be:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   1d4c2:	4283      	cmp	r3, r0
   1d4c4:	d00f      	beq.n	1d4e6 <AppDbFindByLtkReq+0x36>
   1d4c6:	f894 30f3 	ldrb.w	r3, [r4, #243]	; 0xf3
   1d4ca:	b11b      	cbz	r3, 1d4d4 <AppDbFindByLtkReq+0x24>
   1d4cc:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   1d4d0:	42ab      	cmp	r3, r5
   1d4d2:	d011      	beq.n	1d4f8 <AppDbFindByLtkReq+0x48>
   1d4d4:	f894 01b7 	ldrb.w	r0, [r4, #439]	; 0x1b7
   1d4d8:	b120      	cbz	r0, 1d4e4 <AppDbFindByLtkReq+0x34>
   1d4da:	f8b4 31d4 	ldrh.w	r3, [r4, #468]	; 0x1d4
   1d4de:	42ab      	cmp	r3, r5
   1d4e0:	d013      	beq.n	1d50a <AppDbFindByLtkReq+0x5a>
    {
      return (appDbHdl_t) pRec;
    }
  }

  return APP_DB_HDL_NONE;
   1d4e2:	2000      	movs	r0, #0
}
   1d4e4:	bd70      	pop	{r4, r5, r6, pc}
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   1d4e6:	2208      	movs	r2, #8
   1d4e8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1d4ec:	f005 fef4 	bl	232d8 <memcmp>
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   1d4f0:	2800      	cmp	r0, #0
   1d4f2:	d1e8      	bne.n	1d4c6 <AppDbFindByLtkReq+0x16>
  appDbRec_t  *pRec = appDb.rec;
   1d4f4:	4620      	mov	r0, r4
}
   1d4f6:	bd70      	pop	{r4, r5, r6, pc}
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   1d4f8:	480a      	ldr	r0, [pc, #40]	; (1d524 <AppDbFindByLtkReq+0x74>)
   1d4fa:	2208      	movs	r2, #8
   1d4fc:	4631      	mov	r1, r6
   1d4fe:	f005 feeb 	bl	232d8 <memcmp>
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   1d502:	2800      	cmp	r0, #0
   1d504:	d1e6      	bne.n	1d4d4 <AppDbFindByLtkReq+0x24>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1d506:	4808      	ldr	r0, [pc, #32]	; (1d528 <AppDbFindByLtkReq+0x78>)
}
   1d508:	bd70      	pop	{r4, r5, r6, pc}
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   1d50a:	2208      	movs	r2, #8
   1d50c:	4631      	mov	r1, r6
   1d50e:	4807      	ldr	r0, [pc, #28]	; (1d52c <AppDbFindByLtkReq+0x7c>)
   1d510:	f005 fee2 	bl	232d8 <memcmp>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1d514:	4b06      	ldr	r3, [pc, #24]	; (1d530 <AppDbFindByLtkReq+0x80>)
   1d516:	2800      	cmp	r0, #0
   1d518:	bf0c      	ite	eq
   1d51a:	4618      	moveq	r0, r3
   1d51c:	2000      	movne	r0, #0
}
   1d51e:	bd70      	pop	{r4, r5, r6, pc}
   1d520:	10005b28 	.word	0x10005b28
   1d524:	10005c30 	.word	0x10005c30
   1d528:	10005bec 	.word	0x10005bec
   1d52c:	10005cf4 	.word	0x10005cf4
   1d530:	10005cb0 	.word	0x10005cb0

0001d534 <AppDbGetKey>:
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
  dmSecKey_t *pKey = NULL;

  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   1d534:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   1d538:	400b      	ands	r3, r1
   1d53a:	d008      	beq.n	1d54e <AppDbGetKey+0x1a>
  {
    switch(type)
   1d53c:	3901      	subs	r1, #1
   1d53e:	2907      	cmp	r1, #7
   1d540:	d805      	bhi.n	1d54e <AppDbGetKey+0x1a>
   1d542:	e8df f001 	tbb	[pc, r1]
   1d546:	0d08      	.short	0x0d08
   1d548:	04041204 	.word	0x04041204
   1d54c:	0604      	.short	0x0604
   1d54e:	2000      	movs	r0, #0
        break;
    }
  }

  return pKey;
}
   1d550:	4770      	bx	lr
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   1d552:	301e      	adds	r0, #30
        break;
   1d554:	4770      	bx	lr
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   1d556:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1d55a:	7013      	strb	r3, [r2, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   1d55c:	3034      	adds	r0, #52	; 0x34
        break;
   1d55e:	4770      	bx	lr
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   1d560:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   1d564:	7013      	strb	r3, [r2, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   1d566:	3050      	adds	r0, #80	; 0x50
        break;
   1d568:	4770      	bx	lr
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   1d56a:	3007      	adds	r0, #7
        break;
   1d56c:	4770      	bx	lr
   1d56e:	bf00      	nop

0001d570 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   1d570:	b500      	push	{lr}
  switch(pKey->type)
   1d572:	7f8a      	ldrb	r2, [r1, #30]
   1d574:	3a01      	subs	r2, #1
{
   1d576:	468e      	mov	lr, r1
   1d578:	4603      	mov	r3, r0
  switch(pKey->type)
   1d57a:	2a07      	cmp	r2, #7
   1d57c:	d81f      	bhi.n	1d5be <AppDbSetKey+0x4e>
   1d57e:	e8df f002 	tbb	[pc, r2]
   1d582:	045a      	.short	0x045a
   1d584:	1e1e351e 	.word	0x1e1e351e
   1d588:	201e      	.short	0x201e
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
      break;

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   1d58a:	f89e 201f 	ldrb.w	r2, [lr, #31]
   1d58e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   1d592:	f8de 0004 	ldr.w	r0, [lr, #4]
   1d596:	f8de 1008 	ldr.w	r1, [lr, #8]
   1d59a:	f8de 200c 	ldr.w	r2, [lr, #12]
   1d59e:	f103 0c50 	add.w	ip, r3, #80	; 0x50
   1d5a2:	f8de 3010 	ldr.w	r3, [lr, #16]
   1d5a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1d5aa:	f8de 0014 	ldr.w	r0, [lr, #20]
   1d5ae:	f8de 1018 	ldr.w	r1, [lr, #24]
   1d5b2:	f8be 301c 	ldrh.w	r3, [lr, #28]
   1d5b6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1d5ba:	f8ac 3000 	strh.w	r3, [ip]
      break;

    default:
      break;
  }
}
   1d5be:	f85d fb04 	ldr.w	pc, [sp], #4
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   1d5c2:	f8de 2004 	ldr.w	r2, [lr, #4]
   1d5c6:	f8de 0008 	ldr.w	r0, [lr, #8]
   1d5ca:	f8de 100c 	ldr.w	r1, [lr, #12]
   1d5ce:	f8de c010 	ldr.w	ip, [lr, #16]
   1d5d2:	f8c3 201e 	str.w	r2, [r3, #30]
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   1d5d6:	2200      	movs	r2, #0
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   1d5d8:	f8c3 c02a 	str.w	ip, [r3, #42]	; 0x2a
   1d5dc:	f8c3 0022 	str.w	r0, [r3, #34]	; 0x22
   1d5e0:	f8c3 1026 	str.w	r1, [r3, #38]	; 0x26
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   1d5e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   1d5e8:	f85d fb04 	ldr.w	pc, [sp], #4
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   1d5ec:	f8de 2004 	ldr.w	r2, [lr, #4]
   1d5f0:	f8de 000c 	ldr.w	r0, [lr, #12]
   1d5f4:	f8de 1010 	ldr.w	r1, [lr, #16]
   1d5f8:	f8de c008 	ldr.w	ip, [lr, #8]
   1d5fc:	f8c3 2007 	str.w	r2, [r3, #7]
   1d600:	f8de 2014 	ldr.w	r2, [lr, #20]
   1d604:	f8c3 000f 	str.w	r0, [r3, #15]
   1d608:	f8c3 1013 	str.w	r1, [r3, #19]
   1d60c:	f8be 0018 	ldrh.w	r0, [lr, #24]
   1d610:	f89e 101a 	ldrb.w	r1, [lr, #26]
   1d614:	f8c3 2017 	str.w	r2, [r3, #23]
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   1d618:	f89e 201a 	ldrb.w	r2, [lr, #26]
   1d61c:	719a      	strb	r2, [r3, #6]
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   1d61e:	f8a3 001b 	strh.w	r0, [r3, #27]
   1d622:	7759      	strb	r1, [r3, #29]
   1d624:	f8c3 c00b 	str.w	ip, [r3, #11]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   1d628:	f10e 0114 	add.w	r1, lr, #20
   1d62c:	4618      	mov	r0, r3
}
   1d62e:	f85d eb04 	ldr.w	lr, [sp], #4
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   1d632:	f7f8 b943 	b.w	158bc <BdaCpy>
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   1d636:	f89e 201f 	ldrb.w	r2, [lr, #31]
   1d63a:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   1d63e:	f8de 0004 	ldr.w	r0, [lr, #4]
   1d642:	f8de 1008 	ldr.w	r1, [lr, #8]
   1d646:	f8de 200c 	ldr.w	r2, [lr, #12]
   1d64a:	f103 0c34 	add.w	ip, r3, #52	; 0x34
   1d64e:	e7a8      	b.n	1d5a2 <AppDbSetKey+0x32>

0001d650 <AppDbGetPeerDbHash>:
 */
/*************************************************************************************************/
uint8_t *AppDbGetPeerDbHash(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->dbHash;
}
   1d650:	3087      	adds	r0, #135	; 0x87
   1d652:	4770      	bx	lr

0001d654 <AppDbSetPeerDbHash>:
/*************************************************************************************************/
void AppDbSetPeerDbHash(appDbHdl_t hdl, uint8_t *pDbHash)
{
  WSF_ASSERT(pDbHash != NULL);

  memcpy(((appDbRec_t *) hdl)->dbHash, pDbHash, ATT_DATABASE_HASH_LEN);
   1d654:	f8d1 c000 	ldr.w	ip, [r1]
   1d658:	684a      	ldr	r2, [r1, #4]
   1d65a:	688b      	ldr	r3, [r1, #8]
   1d65c:	68c9      	ldr	r1, [r1, #12]
   1d65e:	f8c0 1093 	str.w	r1, [r0, #147]	; 0x93
   1d662:	f8c0 c087 	str.w	ip, [r0, #135]	; 0x87
   1d666:	f8c0 208b 	str.w	r2, [r0, #139]	; 0x8b
   1d66a:	f8c0 308f 	str.w	r3, [r0, #143]	; 0x8f
}
   1d66e:	4770      	bx	lr

0001d670 <AppDbIsCacheCheckedByHash>:
 */
/*************************************************************************************************/
bool_t AppDbIsCacheCheckedByHash(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->cacheByHash;
}
   1d670:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   1d674:	4770      	bx	lr
   1d676:	bf00      	nop

0001d678 <AppDbSetCacheByHash>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCacheByHash(appDbHdl_t hdl, bool_t cacheByHash)
{
  ((appDbRec_t *) hdl)->cacheByHash = cacheByHash;
   1d678:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
}
   1d67c:	4770      	bx	lr
   1d67e:	bf00      	nop

0001d680 <AppDbGetCccTbl>:
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->cccTbl;
}
   1d680:	306c      	adds	r0, #108	; 0x6c
   1d682:	4770      	bx	lr

0001d684 <AppDbSetCccTblValue>:
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);

  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   1d684:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   1d688:	f8a1 206c 	strh.w	r2, [r1, #108]	; 0x6c
  if(AppCheckBonded(connId))
  {
    AppStorePairingInfoInNVM(hdl);
  }
#endif
}
   1d68c:	4770      	bx	lr
   1d68e:	bf00      	nop

0001d690 <AppDbGetCsfRecord>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbGetCsfRecord(appDbHdl_t hdl, uint8_t *pChangeAwareState, uint8_t **pCsf)
{
  *pChangeAwareState = ((appDbRec_t *)hdl)->changeAwareState;
   1d690:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   1d694:	700b      	strb	r3, [r1, #0]
  *pCsf = ((appDbRec_t *) hdl)->csf;
   1d696:	3085      	adds	r0, #133	; 0x85
   1d698:	6010      	str	r0, [r2, #0]
}
   1d69a:	4770      	bx	lr

0001d69c <AppDbSetCsfRecord>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCsfRecord(appDbHdl_t hdl, uint8_t changeAwareState, uint8_t *pCsf)
{
  if ((pCsf != NULL) && (hdl != APP_DB_HDL_NONE))
   1d69c:	b12a      	cbz	r2, 1d6aa <AppDbSetCsfRecord+0xe>
   1d69e:	b120      	cbz	r0, 1d6aa <AppDbSetCsfRecord+0xe>
  {
    ((appDbRec_t *) hdl)->changeAwareState = changeAwareState;
   1d6a0:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
    memcpy(&((appDbRec_t *) hdl)->csf, pCsf, ATT_CSF_LEN);
   1d6a4:	7813      	ldrb	r3, [r2, #0]
   1d6a6:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
  }
}
   1d6aa:	4770      	bx	lr

0001d6ac <AppDbSetClientsChangeAwareState>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetClientsChangeAwareState(appDbHdl_t hdl, uint8_t state)
{
  if (hdl == APP_DB_HDL_NONE)
   1d6ac:	b110      	cbz	r0, 1d6b4 <AppDbSetClientsChangeAwareState+0x8>
      pRec->changeAwareState = state;
    }
  }
  else
  {
    ((appDbRec_t *) hdl)->changeAwareState = state;
   1d6ae:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
  }
}
   1d6b2:	4770      	bx	lr
      pRec->changeAwareState = state;
   1d6b4:	4b03      	ldr	r3, [pc, #12]	; (1d6c4 <AppDbSetClientsChangeAwareState+0x18>)
   1d6b6:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
   1d6ba:	f883 1148 	strb.w	r1, [r3, #328]	; 0x148
   1d6be:	f883 120c 	strb.w	r1, [r3, #524]	; 0x20c
    for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1d6c2:	4770      	bx	lr
   1d6c4:	10005b28 	.word	0x10005b28

0001d6c8 <AppDbGetDbHash>:
 */
/*************************************************************************************************/
uint8_t *AppDbGetDbHash(void)
{
  return appDb.dbHash;
}
   1d6c8:	4800      	ldr	r0, [pc, #0]	; (1d6cc <AppDbGetDbHash+0x4>)
   1d6ca:	4770      	bx	lr
   1d6cc:	10005d89 	.word	0x10005d89

0001d6d0 <AppDbSetDbHash>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDbHash(uint8_t *pHash)
{
  if (pHash != NULL)
   1d6d0:	b168      	cbz	r0, 1d6ee <AppDbSetDbHash+0x1e>
  {
    memcpy(appDb.dbHash, pHash, ATT_DATABASE_HASH_LEN);
   1d6d2:	4b07      	ldr	r3, [pc, #28]	; (1d6f0 <AppDbSetDbHash+0x20>)
   1d6d4:	f8d0 c000 	ldr.w	ip, [r0]
   1d6d8:	6841      	ldr	r1, [r0, #4]
   1d6da:	6882      	ldr	r2, [r0, #8]
   1d6dc:	68c0      	ldr	r0, [r0, #12]
   1d6de:	f8c3 026d 	str.w	r0, [r3, #621]	; 0x26d
   1d6e2:	f8c3 c261 	str.w	ip, [r3, #609]	; 0x261
   1d6e6:	f8c3 1265 	str.w	r1, [r3, #613]	; 0x265
   1d6ea:	f8c3 2269 	str.w	r2, [r3, #617]	; 0x269
  }
}
   1d6ee:	4770      	bx	lr
   1d6f0:	10005b28 	.word	0x10005b28

0001d6f4 <AppDbGetDiscStatus>:
 */
/*************************************************************************************************/
uint8_t AppDbGetDiscStatus(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->discStatus;
}
   1d6f4:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
   1d6f8:	4770      	bx	lr
   1d6fa:	bf00      	nop

0001d6fc <AppDbSetDiscStatus>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDiscStatus(appDbHdl_t hdl, uint8_t status)
{
  ((appDbRec_t *) hdl)->discStatus = status;
   1d6fc:	f880 10c2 	strb.w	r1, [r0, #194]	; 0xc2
}
   1d700:	4770      	bx	lr
   1d702:	bf00      	nop

0001d704 <AppDbGetHdlList>:
 */
/*************************************************************************************************/
uint16_t *AppDbGetHdlList(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->hdlList;
}
   1d704:	3098      	adds	r0, #152	; 0x98
   1d706:	4770      	bx	lr

0001d708 <AppDbSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetHdlList(appDbHdl_t hdl, uint16_t *pHdlList)
{
   1d708:	b510      	push	{r4, lr}
  memcpy(((appDbRec_t *) hdl)->hdlList, pHdlList, sizeof(((appDbRec_t *) hdl)->hdlList));
   1d70a:	3098      	adds	r0, #152	; 0x98
   1d70c:	f101 0320 	add.w	r3, r1, #32
   1d710:	f8d1 e000 	ldr.w	lr, [r1]
   1d714:	f8d1 c004 	ldr.w	ip, [r1, #4]
   1d718:	688a      	ldr	r2, [r1, #8]
   1d71a:	68cc      	ldr	r4, [r1, #12]
   1d71c:	60c4      	str	r4, [r0, #12]
   1d71e:	3110      	adds	r1, #16
   1d720:	4299      	cmp	r1, r3
   1d722:	f8c0 e000 	str.w	lr, [r0]
   1d726:	f8c0 c004 	str.w	ip, [r0, #4]
   1d72a:	6082      	str	r2, [r0, #8]
   1d72c:	f100 0010 	add.w	r0, r0, #16
   1d730:	d1ee      	bne.n	1d710 <AppDbSetHdlList+0x8>
   1d732:	680b      	ldr	r3, [r1, #0]
   1d734:	684a      	ldr	r2, [r1, #4]
   1d736:	6042      	str	r2, [r0, #4]
   1d738:	6003      	str	r3, [r0, #0]
   1d73a:	890b      	ldrh	r3, [r1, #8]
   1d73c:	8103      	strh	r3, [r0, #8]
}
   1d73e:	bd10      	pop	{r4, pc}

0001d740 <AppDbGetPeerSignCounter>:
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
  return ((appDbRec_t *)hdl)->peerSignCounter;
}
   1d740:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1d744:	4770      	bx	lr
   1d746:	bf00      	nop

0001d748 <AppDbSetPeerSignCounter>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   1d748:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
}
   1d74c:	4770      	bx	lr
   1d74e:	bf00      	nop

0001d750 <AppDbGetPeerAddedToRl>:
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
  return ((appDbRec_t *)hdl)->peerAddedToRl;
}
   1d750:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
   1d754:	4770      	bx	lr
   1d756:	bf00      	nop

0001d758 <AppDbSetPeerAddedToRl>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   1d758:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
}
   1d75c:	4770      	bx	lr
   1d75e:	bf00      	nop

0001d760 <AppDbGetPeerRpao>:
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
  return ((appDbRec_t *)hdl)->peerRpao;
}
   1d760:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
   1d764:	4770      	bx	lr
   1d766:	bf00      	nop

0001d768 <AppUiAction>:
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
  switch (event)
   1d768:	1e43      	subs	r3, r0, #1
{
   1d76a:	b510      	push	{r4, lr}
   1d76c:	4604      	mov	r4, r0
  switch (event)
   1d76e:	2b19      	cmp	r3, #25
   1d770:	d811      	bhi.n	1d796 <AppUiAction+0x2e>
   1d772:	e8df f003 	tbb	[pc, r3]
   1d776:	1074      	.short	0x1074
   1d778:	64686c70 	.word	0x64686c70
   1d77c:	54585c60 	.word	0x54585c60
   1d780:	44484c50 	.word	0x44484c50
   1d784:	34383c40 	.word	0x34383c40
   1d788:	24282c30 	.word	0x24282c30
   1d78c:	0d181c20 	.word	0x0d181c20
    case APP_UI_PER_ADV_SYNC_EST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync established <<<");
      break;

    case APP_UI_PER_ADV_SYNC_LOST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync lost <<<");
   1d790:	4835      	ldr	r0, [pc, #212]	; (1d868 <AppUiAction+0x100>)
   1d792:	f000 ff81 	bl	1e698 <WsfTrace>

    default:
      break;
  }

  if (appUiCbackTbl.actionCback)
   1d796:	4b35      	ldr	r3, [pc, #212]	; (1d86c <AppUiAction+0x104>)
   1d798:	685b      	ldr	r3, [r3, #4]
   1d79a:	b11b      	cbz	r3, 1d7a4 <AppUiAction+0x3c>
  {
    (*appUiCbackTbl.actionCback)(event);
   1d79c:	4620      	mov	r0, r4
  }
}
   1d79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*appUiCbackTbl.actionCback)(event);
   1d7a2:	4718      	bx	r3
}
   1d7a4:	bd10      	pop	{r4, pc}
      APP_TRACE_INFO0(">>> Periodic advertising sync established <<<");
   1d7a6:	4832      	ldr	r0, [pc, #200]	; (1d870 <AppUiAction+0x108>)
   1d7a8:	f000 ff76 	bl	1e698 <WsfTrace>
      break;
   1d7ac:	e7f3      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Periodic advertising set stopped <<<");
   1d7ae:	4831      	ldr	r0, [pc, #196]	; (1d874 <AppUiAction+0x10c>)
   1d7b0:	f000 ff72 	bl	1e698 <WsfTrace>
      break;
   1d7b4:	e7ef      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Periodic advertising set started <<<");
   1d7b6:	4830      	ldr	r0, [pc, #192]	; (1d878 <AppUiAction+0x110>)
   1d7b8:	f000 ff6e 	bl	1e698 <WsfTrace>
      break;
   1d7bc:	e7eb      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Extended scanning stopped <<<");
   1d7be:	482f      	ldr	r0, [pc, #188]	; (1d87c <AppUiAction+0x114>)
   1d7c0:	f000 ff6a 	bl	1e698 <WsfTrace>
      break;
   1d7c4:	e7e7      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Extended scanning started <<<");
   1d7c6:	482e      	ldr	r0, [pc, #184]	; (1d880 <AppUiAction+0x118>)
   1d7c8:	f000 ff66 	bl	1e698 <WsfTrace>
      break;
   1d7cc:	e7e3      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scan request received <<<");
   1d7ce:	482d      	ldr	r0, [pc, #180]	; (1d884 <AppUiAction+0x11c>)
   1d7d0:	f000 ff62 	bl	1e698 <WsfTrace>
      break;
   1d7d4:	e7df      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising sets stopped <<<");
   1d7d6:	482c      	ldr	r0, [pc, #176]	; (1d888 <AppUiAction+0x120>)
   1d7d8:	f000 ff5e 	bl	1e698 <WsfTrace>
      break;
   1d7dc:	e7db      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising sets started <<<");
   1d7de:	482b      	ldr	r0, [pc, #172]	; (1d88c <AppUiAction+0x124>)
   1d7e0:	f000 ff5a 	bl	1e698 <WsfTrace>
      break;
   1d7e4:	e7d7      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> High alert <<<");
   1d7e6:	482a      	ldr	r0, [pc, #168]	; (1d890 <AppUiAction+0x128>)
   1d7e8:	f000 ff56 	bl	1e698 <WsfTrace>
      break;
   1d7ec:	e7d3      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Low alert <<<");
   1d7ee:	4829      	ldr	r0, [pc, #164]	; (1d894 <AppUiAction+0x12c>)
   1d7f0:	f000 ff52 	bl	1e698 <WsfTrace>
      break;
   1d7f4:	e7cf      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   1d7f6:	4828      	ldr	r0, [pc, #160]	; (1d898 <AppUiAction+0x130>)
   1d7f8:	f000 ff4e 	bl	1e698 <WsfTrace>
      break;
   1d7fc:	e7cb      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   1d7fe:	4827      	ldr	r0, [pc, #156]	; (1d89c <AppUiAction+0x134>)
   1d800:	f000 ff4a 	bl	1e698 <WsfTrace>
      break;
   1d804:	e7c7      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   1d806:	4826      	ldr	r0, [pc, #152]	; (1d8a0 <AppUiAction+0x138>)
   1d808:	f000 ff46 	bl	1e698 <WsfTrace>
      break;
   1d80c:	e7c3      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   1d80e:	4825      	ldr	r0, [pc, #148]	; (1d8a4 <AppUiAction+0x13c>)
   1d810:	f000 ff42 	bl	1e698 <WsfTrace>
      break;
   1d814:	e7bf      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   1d816:	4824      	ldr	r0, [pc, #144]	; (1d8a8 <AppUiAction+0x140>)
   1d818:	f000 ff3e 	bl	1e698 <WsfTrace>
      break;
   1d81c:	e7bb      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   1d81e:	4823      	ldr	r0, [pc, #140]	; (1d8ac <AppUiAction+0x144>)
   1d820:	f000 ff3a 	bl	1e698 <WsfTrace>
      break;
   1d824:	e7b7      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Connection closed <<<");
   1d826:	4822      	ldr	r0, [pc, #136]	; (1d8b0 <AppUiAction+0x148>)
   1d828:	f000 ff36 	bl	1e698 <WsfTrace>
      break;
   1d82c:	e7b3      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Connection opened <<<");
   1d82e:	4821      	ldr	r0, [pc, #132]	; (1d8b4 <AppUiAction+0x14c>)
   1d830:	f000 ff32 	bl	1e698 <WsfTrace>
      break;
   1d834:	e7af      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   1d836:	4820      	ldr	r0, [pc, #128]	; (1d8b8 <AppUiAction+0x150>)
   1d838:	f000 ff2e 	bl	1e698 <WsfTrace>
      break;
   1d83c:	e7ab      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   1d83e:	481f      	ldr	r0, [pc, #124]	; (1d8bc <AppUiAction+0x154>)
   1d840:	f000 ff2a 	bl	1e698 <WsfTrace>
      break;
   1d844:	e7a7      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scanning started <<<");
   1d846:	481e      	ldr	r0, [pc, #120]	; (1d8c0 <AppUiAction+0x158>)
   1d848:	f000 ff26 	bl	1e698 <WsfTrace>
      break;
   1d84c:	e7a3      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   1d84e:	481d      	ldr	r0, [pc, #116]	; (1d8c4 <AppUiAction+0x15c>)
   1d850:	f000 ff22 	bl	1e698 <WsfTrace>
      break;
   1d854:	e79f      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising started <<<");
   1d856:	481c      	ldr	r0, [pc, #112]	; (1d8c8 <AppUiAction+0x160>)
   1d858:	f000 ff1e 	bl	1e698 <WsfTrace>
      break;
   1d85c:	e79b      	b.n	1d796 <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Reset complete <<<");
   1d85e:	481b      	ldr	r0, [pc, #108]	; (1d8cc <AppUiAction+0x164>)
   1d860:	f000 ff1a 	bl	1e698 <WsfTrace>
      break;
   1d864:	e797      	b.n	1d796 <AppUiAction+0x2e>
   1d866:	bf00      	nop
   1d868:	00027e20 	.word	0x00027e20
   1d86c:	10005d9c 	.word	0x10005d9c
   1d870:	00027df0 	.word	0x00027df0
   1d874:	00027dc4 	.word	0x00027dc4
   1d878:	00027d98 	.word	0x00027d98
   1d87c:	00027d74 	.word	0x00027d74
   1d880:	00027d50 	.word	0x00027d50
   1d884:	00027d30 	.word	0x00027d30
   1d888:	00027d0c 	.word	0x00027d0c
   1d88c:	00027ce8 	.word	0x00027ce8
   1d890:	00027cd4 	.word	0x00027cd4
   1d894:	00027cc0 	.word	0x00027cc0
   1d898:	00027c9c 	.word	0x00027c9c
   1d89c:	00027c74 	.word	0x00027c74
   1d8a0:	00027c58 	.word	0x00027c58
   1d8a4:	00027c38 	.word	0x00027c38
   1d8a8:	00027c20 	.word	0x00027c20
   1d8ac:	00027bf8 	.word	0x00027bf8
   1d8b0:	00027bdc 	.word	0x00027bdc
   1d8b4:	00027bc0 	.word	0x00027bc0
   1d8b8:	00027b98 	.word	0x00027b98
   1d8bc:	00027b7c 	.word	0x00027b7c
   1d8c0:	00027b60 	.word	0x00027b60
   1d8c4:	00027b44 	.word	0x00027b44
   1d8c8:	00027b28 	.word	0x00027b28
   1d8cc:	00027b10 	.word	0x00027b10

0001d8d0 <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   1d8d0:	4601      	mov	r1, r0
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   1d8d2:	4801      	ldr	r0, [pc, #4]	; (1d8d8 <AppUiDisplayPasskey+0x8>)
   1d8d4:	f000 bee0 	b.w	1e698 <WsfTrace>
   1d8d8:	00027e48 	.word	0x00027e48

0001d8dc <appUiTimerExpired>:
   1d8dc:	4770      	bx	lr
   1d8de:	bf00      	nop

0001d8e0 <appUiBtnPoll>:
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
  if (appUiCbackTbl.btnPollCback)
   1d8e0:	4b02      	ldr	r3, [pc, #8]	; (1d8ec <appUiBtnPoll+0xc>)
   1d8e2:	689b      	ldr	r3, [r3, #8]
   1d8e4:	b103      	cbz	r3, 1d8e8 <appUiBtnPoll+0x8>
  {
    (*appUiCbackTbl.btnPollCback)();
   1d8e6:	4718      	bx	r3
  }
}
   1d8e8:	4770      	bx	lr
   1d8ea:	bf00      	nop
   1d8ec:	10005d9c 	.word	0x10005d9c

0001d8f0 <AppUiBtnPressed>:
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{

}
   1d8f0:	4770      	bx	lr
   1d8f2:	bf00      	nop

0001d8f4 <AppUiBtnRegister>:
 *  \note   Registered by application to receive button events
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t btnCback)
{
  appUiCbackTbl.btnCback = btnCback;
   1d8f4:	4b01      	ldr	r3, [pc, #4]	; (1d8fc <AppUiBtnRegister+0x8>)
   1d8f6:	6018      	str	r0, [r3, #0]
}
   1d8f8:	4770      	bx	lr
   1d8fa:	bf00      	nop
   1d8fc:	10005d9c 	.word	0x10005d9c

0001d900 <AppUiBtnTest>:
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
  if (appUiCbackTbl.btnCback)
   1d900:	4b02      	ldr	r3, [pc, #8]	; (1d90c <AppUiBtnTest+0xc>)
   1d902:	681b      	ldr	r3, [r3, #0]
   1d904:	b103      	cbz	r3, 1d908 <AppUiBtnTest+0x8>
  {
    (*appUiCbackTbl.btnCback)(btn);
   1d906:	4718      	bx	r3
  }
}
   1d908:	4770      	bx	lr
   1d90a:	bf00      	nop
   1d90c:	10005d9c 	.word	0x10005d9c

0001d910 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1d910:	4b0a      	ldr	r3, [pc, #40]	; (1d93c <prvTaskExitError+0x2c>)
   1d912:	681b      	ldr	r3, [r3, #0]
{
   1d914:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
   1d916:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
   1d918:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
   1d91a:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
   1d91c:	d000      	beq.n	1d920 <prvTaskExitError+0x10>
   1d91e:	e7fe      	b.n	1d91e <prvTaskExitError+0xe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   1d920:	f04f 0380 	mov.w	r3, #128	; 0x80
   1d924:	f383 8811 	msr	BASEPRI, r3
   1d928:	f3bf 8f6f 	isb	sy
   1d92c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   1d930:	9b01      	ldr	r3, [sp, #4]
   1d932:	2b00      	cmp	r3, #0
   1d934:	d0fc      	beq.n	1d930 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1d936:	b002      	add	sp, #8
   1d938:	4770      	bx	lr
   1d93a:	bf00      	nop
   1d93c:	10002c34 	.word	0x10002c34

0001d940 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   1d940:	4808      	ldr	r0, [pc, #32]	; (1d964 <prvPortStartFirstTask+0x24>)
   1d942:	6800      	ldr	r0, [r0, #0]
   1d944:	6800      	ldr	r0, [r0, #0]
   1d946:	f380 8808 	msr	MSP, r0
   1d94a:	f04f 0000 	mov.w	r0, #0
   1d94e:	f380 8814 	msr	CONTROL, r0
   1d952:	b662      	cpsie	i
   1d954:	b661      	cpsie	f
   1d956:	f3bf 8f4f 	dsb	sy
   1d95a:	f3bf 8f6f 	isb	sy
   1d95e:	df00      	svc	0
   1d960:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   1d962:	0000      	.short	0x0000
   1d964:	e000ed08 	.word	0xe000ed08

0001d968 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   1d968:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1d978 <vPortEnableVFP+0x10>
   1d96c:	6801      	ldr	r1, [r0, #0]
   1d96e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1d972:	6001      	str	r1, [r0, #0]
   1d974:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   1d976:	0000      	.short	0x0000
   1d978:	e000ed88 	.word	0xe000ed88

0001d97c <pxPortInitialiseStack>:
{
   1d97c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1d97e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1d982:	4c07      	ldr	r4, [pc, #28]	; (1d9a0 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1d984:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   1d988:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   1d98c:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1d990:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   1d994:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
   1d998:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d99c:	3844      	subs	r0, #68	; 0x44
   1d99e:	4770      	bx	lr
   1d9a0:	0001d911 	.word	0x0001d911
	...

0001d9b0 <SVC_Handler>:
	__asm volatile (
   1d9b0:	4b07      	ldr	r3, [pc, #28]	; (1d9d0 <pxCurrentTCBConst2>)
   1d9b2:	6819      	ldr	r1, [r3, #0]
   1d9b4:	6808      	ldr	r0, [r1, #0]
   1d9b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9ba:	f380 8809 	msr	PSP, r0
   1d9be:	f3bf 8f6f 	isb	sy
   1d9c2:	f04f 0000 	mov.w	r0, #0
   1d9c6:	f380 8811 	msr	BASEPRI, r0
   1d9ca:	4770      	bx	lr
   1d9cc:	f3af 8000 	nop.w

0001d9d0 <pxCurrentTCBConst2>:
   1d9d0:	1000a138 	.word	0x1000a138

0001d9d4 <vPortEnterCritical>:
   1d9d4:	f04f 0380 	mov.w	r3, #128	; 0x80
   1d9d8:	f383 8811 	msr	BASEPRI, r3
   1d9dc:	f3bf 8f6f 	isb	sy
   1d9e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
   1d9e4:	4a07      	ldr	r2, [pc, #28]	; (1da04 <vPortEnterCritical+0x30>)
   1d9e6:	6813      	ldr	r3, [r2, #0]
   1d9e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
   1d9ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
   1d9ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
   1d9ee:	d000      	beq.n	1d9f2 <vPortEnterCritical+0x1e>
}
   1d9f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   1d9f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1d9f6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
   1d9fa:	b2db      	uxtb	r3, r3
   1d9fc:	2b00      	cmp	r3, #0
   1d9fe:	d0f7      	beq.n	1d9f0 <vPortEnterCritical+0x1c>
   1da00:	e7fe      	b.n	1da00 <vPortEnterCritical+0x2c>
   1da02:	bf00      	nop
   1da04:	10002c34 	.word	0x10002c34

0001da08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   1da08:	4a04      	ldr	r2, [pc, #16]	; (1da1c <vPortExitCritical+0x14>)
   1da0a:	6813      	ldr	r3, [r2, #0]
   1da0c:	b12b      	cbz	r3, 1da1a <vPortExitCritical+0x12>
	uxCriticalNesting--;
   1da0e:	3b01      	subs	r3, #1
   1da10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   1da12:	b90b      	cbnz	r3, 1da18 <vPortExitCritical+0x10>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   1da14:	f383 8811 	msr	BASEPRI, r3
}
   1da18:	4770      	bx	lr
	configASSERT( uxCriticalNesting );
   1da1a:	e7fe      	b.n	1da1a <vPortExitCritical+0x12>
   1da1c:	10002c34 	.word	0x10002c34

0001da20 <PendSV_Handler>:
	__asm volatile
   1da20:	f3ef 8009 	mrs	r0, PSP
   1da24:	f3bf 8f6f 	isb	sy
   1da28:	4b15      	ldr	r3, [pc, #84]	; (1da80 <pxCurrentTCBConst>)
   1da2a:	681a      	ldr	r2, [r3, #0]
   1da2c:	f01e 0f10 	tst.w	lr, #16
   1da30:	bf08      	it	eq
   1da32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   1da36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da3a:	6010      	str	r0, [r2, #0]
   1da3c:	e92d 0009 	stmdb	sp!, {r0, r3}
   1da40:	f04f 0080 	mov.w	r0, #128	; 0x80
   1da44:	f380 8811 	msr	BASEPRI, r0
   1da48:	f3bf 8f4f 	dsb	sy
   1da4c:	f3bf 8f6f 	isb	sy
   1da50:	f004 ffb2 	bl	229b8 <vTaskSwitchContext>
   1da54:	f04f 0000 	mov.w	r0, #0
   1da58:	f380 8811 	msr	BASEPRI, r0
   1da5c:	bc09      	pop	{r0, r3}
   1da5e:	6819      	ldr	r1, [r3, #0]
   1da60:	6808      	ldr	r0, [r1, #0]
   1da62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da66:	f01e 0f10 	tst.w	lr, #16
   1da6a:	bf08      	it	eq
   1da6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   1da70:	f380 8809 	msr	PSP, r0
   1da74:	f3bf 8f6f 	isb	sy
   1da78:	4770      	bx	lr
   1da7a:	bf00      	nop
   1da7c:	f3af 8000 	nop.w

0001da80 <pxCurrentTCBConst>:
   1da80:	1000a138 	.word	0x1000a138

0001da84 <SysTick_Handler>:
{
   1da84:	b508      	push	{r3, lr}
	__asm volatile
   1da86:	f04f 0380 	mov.w	r3, #128	; 0x80
   1da8a:	f383 8811 	msr	BASEPRI, r3
   1da8e:	f3bf 8f6f 	isb	sy
   1da92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
   1da96:	f004 fdf7 	bl	22688 <xTaskIncrementTick>
   1da9a:	b128      	cbz	r0, 1daa8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   1da9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1daa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1daa4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
   1daa8:	2300      	movs	r3, #0
   1daaa:	f383 8811 	msr	BASEPRI, r3
}
   1daae:	bd08      	pop	{r3, pc}

0001dab0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   1dab0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   1dab4:	2b0f      	cmp	r3, #15
   1dab6:	d906      	bls.n	1dac6 <vPortValidateInterruptPriority+0x16>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   1dab8:	4909      	ldr	r1, [pc, #36]	; (1dae0 <vPortValidateInterruptPriority+0x30>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   1daba:	4a0a      	ldr	r2, [pc, #40]	; (1dae4 <vPortValidateInterruptPriority+0x34>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   1dabc:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   1dabe:	7812      	ldrb	r2, [r2, #0]
   1dac0:	429a      	cmp	r2, r3
   1dac2:	d900      	bls.n	1dac6 <vPortValidateInterruptPriority+0x16>
   1dac4:	e7fe      	b.n	1dac4 <vPortValidateInterruptPriority+0x14>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   1dac6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1daca:	4a07      	ldr	r2, [pc, #28]	; (1dae8 <vPortValidateInterruptPriority+0x38>)
   1dacc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
   1dad0:	6812      	ldr	r2, [r2, #0]
   1dad2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   1dad6:	4293      	cmp	r3, r2
   1dad8:	d900      	bls.n	1dadc <vPortValidateInterruptPriority+0x2c>
   1dada:	e7fe      	b.n	1dada <vPortValidateInterruptPriority+0x2a>
	}
   1dadc:	4770      	bx	lr
   1dade:	bf00      	nop
   1dae0:	e000e3f0 	.word	0xe000e3f0
   1dae4:	10005db0 	.word	0x10005db0
   1dae8:	10005db4 	.word	0x10005db4

0001daec <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   1daec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   1daf0:	4b2c      	ldr	r3, [pc, #176]	; (1dba4 <vPortSuppressTicksAndSleep+0xb8>)


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1daf2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1dbac <vPortSuppressTicksAndSleep+0xc0>
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   1daf6:	f8d3 a000 	ldr.w	sl, [r3]
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1dafa:	f8d9 8000 	ldr.w	r8, [r9]
{
   1dafe:	4605      	mov	r5, r0

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   1db00:	b672      	cpsid	i
	__asm volatile( "dsb" );
   1db02:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1db06:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    uint32_t curTime = am_hal_stimer_counter_get();
   1db0a:	f007 fe95 	bl	25838 <am_hal_stimer_counter_get>
    gF_stimerGetHistory[gF_stimerGetHistoryCount][1] = curTime;
    gF_stimerGetHistory[gF_stimerGetHistoryCount][2] = AM_REGVAL(AM_REG_STIMER_COMPARE(0, 0));
    gF_stimerGetHistory[gF_stimerGetHistoryCount][3] = gF_stimerHistoryCount;
    gF_stimerGetHistoryCount++;
#endif
    elapsed_time = curTime - g_lastSTimerVal;
   1db0e:	4f26      	ldr	r7, [pc, #152]	; (1dba8 <vPortSuppressTicksAndSleep+0xbc>)
    uint32_t curTime = am_hal_stimer_counter_get();
   1db10:	4604      	mov	r4, r0
    elapsed_time = curTime - g_lastSTimerVal;
   1db12:	683e      	ldr	r6, [r7, #0]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   1db14:	f005 f8f4 	bl	22d00 <eTaskConfirmSleepModeStatus>
   1db18:	b158      	cbz	r0, 1db32 <vPortSuppressTicksAndSleep+0x46>
   1db1a:	4555      	cmp	r5, sl
   1db1c:	f8d9 3000 	ldr.w	r3, [r9]
   1db20:	bf28      	it	cs
   1db22:	4655      	movcs	r5, sl
   1db24:	1b9b      	subs	r3, r3, r6
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1db26:	1e69      	subs	r1, r5, #1
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   1db28:	4423      	add	r3, r4
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1db2a:	fb08 f801 	mul.w	r8, r8, r1
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   1db2e:	4543      	cmp	r3, r8
   1db30:	d902      	bls.n	1db38 <vPortSuppressTicksAndSleep+0x4c>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   1db32:	b662      	cpsie	i

	}
}
   1db34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ulReloadValue -= elapsed_time;
   1db38:	4446      	add	r6, r8
   1db3a:	1b34      	subs	r4, r6, r4
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   1db3c:	4621      	mov	r1, r4
   1db3e:	2000      	movs	r0, #0
   1db40:	f007 fe8a 	bl	25858 <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulReloadValue+1);
   1db44:	2001      	movs	r0, #1
   1db46:	1c61      	adds	r1, r4, #1
   1db48:	f007 fe86 	bl	25858 <am_hal_stimer_compare_delta_set>
		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   1db4c:	4628      	mov	r0, r5
   1db4e:	f7f8 f8df 	bl	15d10 <am_freertos_sleep>
		if( xModifiableIdleTime > 0 )
   1db52:	b120      	cbz	r0, 1db5e <vPortSuppressTicksAndSleep+0x72>
			__asm volatile( "dsb" );
   1db54:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   1db58:	bf30      	wfi
			__asm volatile( "isb" );
   1db5a:	f3bf 8f6f 	isb	sy
		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   1db5e:	4628      	mov	r0, r5
   1db60:	f7f8 f8dc 	bl	15d1c <am_freertos_wakeup>
        New_Timer = am_hal_stimer_counter_get();
   1db64:	f007 fe68 	bl	25838 <am_hal_stimer_counter_get>
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   1db68:	683b      	ldr	r3, [r7, #0]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   1db6a:	f8d9 1000 	ldr.w	r1, [r9]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   1db6e:	1ac3      	subs	r3, r0, r3
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   1db70:	fbb3 f2f1 	udiv	r2, r3, r1
   1db74:	fb01 3312 	mls	r3, r1, r2, r3
   1db78:	1ac3      	subs	r3, r0, r3
        vTaskStepTick( Delta_Sleep );
   1db7a:	4610      	mov	r0, r2
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   1db7c:	603b      	str	r3, [r7, #0]
        vTaskStepTick( Delta_Sleep );
   1db7e:	f004 fd73 	bl	22668 <vTaskStepTick>
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   1db82:	2003      	movs	r0, #3
   1db84:	f007 fece 	bl	25924 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   1db88:	f8d9 1000 	ldr.w	r1, [r9]
   1db8c:	2000      	movs	r0, #0
   1db8e:	f007 fe63 	bl	25858 <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   1db92:	f8d9 1000 	ldr.w	r1, [r9]
   1db96:	2001      	movs	r0, #1
   1db98:	4401      	add	r1, r0
   1db9a:	f007 fe5d 	bl	25858 <am_hal_stimer_compare_delta_set>
		__asm volatile( "cpsie i" );
   1db9e:	b662      	cpsie	i
}
   1dba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dba4:	10005dbc 	.word	0x10005dbc
   1dba8:	10005dac 	.word	0x10005dac
   1dbac:	10005db8 	.word	0x10005db8

0001dbb0 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   1dbb0:	b570      	push	{r4, r5, r6, lr}

    curSTimer = am_hal_stimer_counter_get();
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   1dbb2:	4e1c      	ldr	r6, [pc, #112]	; (1dc24 <xPortStimerTickHandler+0x74>)
{
   1dbb4:	4604      	mov	r4, r0
    curSTimer = am_hal_stimer_counter_get();
   1dbb6:	f007 fe3f 	bl	25838 <am_hal_stimer_counter_get>
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   1dbba:	6831      	ldr	r1, [r6, #0]
    curSTimer = am_hal_stimer_counter_get();
   1dbbc:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   1dbbe:	1b09      	subs	r1, r1, r4
   1dbc0:	2000      	movs	r0, #0
   1dbc2:	f007 fe49 	bl	25858 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   1dbc6:	6831      	ldr	r1, [r6, #0]
   1dbc8:	2001      	movs	r0, #1
   1dbca:	4401      	add	r1, r0
   1dbcc:	1b09      	subs	r1, r1, r4
   1dbce:	f007 fe43 	bl	25858 <am_hal_stimer_compare_delta_set>
#endif

    timerCounts = curSTimer - g_lastSTimerVal;
   1dbd2:	4915      	ldr	r1, [pc, #84]	; (1dc28 <xPortStimerTickHandler+0x78>)
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   1dbd4:	6832      	ldr	r2, [r6, #0]
    timerCounts = curSTimer - g_lastSTimerVal;
   1dbd6:	680b      	ldr	r3, [r1, #0]
   1dbd8:	1aeb      	subs	r3, r5, r3
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   1dbda:	fbb3 f4f2 	udiv	r4, r3, r2
    remainder = timerCounts % ulTimerCountsForOneTick;
   1dbde:	fb02 3014 	mls	r0, r2, r4, r3
    g_lastSTimerVal = curSTimer - remainder;
   1dbe2:	1a2d      	subs	r5, r5, r0
   1dbe4:	600d      	str	r5, [r1, #0]
	__asm volatile
   1dbe6:	f3ef 8111 	mrs	r1, BASEPRI
   1dbea:	f04f 0080 	mov.w	r0, #128	; 0x80
   1dbee:	f380 8811 	msr	BASEPRI, r0
   1dbf2:	f3bf 8f6f 	isb	sy
   1dbf6:	f3bf 8f4f 	dsb	sy
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   1dbfa:	429a      	cmp	r2, r3
   1dbfc:	d80e      	bhi.n	1dc1c <xPortStimerTickHandler+0x6c>
    BaseType_t ctxtSwitchReqd = pdFALSE;
   1dbfe:	2500      	movs	r5, #0
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   1dc00:	f004 fd42 	bl	22688 <xTaskIncrementTick>
   1dc04:	2800      	cmp	r0, #0
   1dc06:	bf18      	it	ne
   1dc08:	2501      	movne	r5, #1
        while (numTicksElapsed--)
   1dc0a:	3c01      	subs	r4, #1
   1dc0c:	d1f8      	bne.n	1dc00 <xPortStimerTickHandler+0x50>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   1dc0e:	b12d      	cbz	r5, 1dc1c <xPortStimerTickHandler+0x6c>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   1dc10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1dc14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1dc18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
   1dc1c:	2300      	movs	r3, #0
   1dc1e:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   1dc22:	bd70      	pop	{r4, r5, r6, pc}
   1dc24:	10005db8 	.word	0x10005db8
   1dc28:	10005dac 	.word	0x10005dac

0001dc2c <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   1dc2c:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1dc2e:	2000      	movs	r0, #0
   1dc30:	f007 fe7e 	bl	25930 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   1dc34:	07c3      	lsls	r3, r0, #31
   1dc36:	d400      	bmi.n	1dc3a <am_stimer_cmpr0_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
    }
}
   1dc38:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   1dc3a:	2001      	movs	r0, #1
   1dc3c:	f007 fe72 	bl	25924 <am_hal_stimer_int_clear>
}
   1dc40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(0);
   1dc44:	2000      	movs	r0, #0
   1dc46:	f7ff bfb3 	b.w	1dbb0 <xPortStimerTickHandler>
   1dc4a:	bf00      	nop

0001dc4c <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   1dc4c:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1dc4e:	2000      	movs	r0, #0
   1dc50:	f007 fe6e 	bl	25930 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   1dc54:	0783      	lsls	r3, r0, #30
   1dc56:	d400      	bmi.n	1dc5a <am_stimer_cmpr1_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
    }
}
   1dc58:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   1dc5a:	2002      	movs	r0, #2
   1dc5c:	f007 fe62 	bl	25924 <am_hal_stimer_int_clear>
        gNumCmpB++;
   1dc60:	4a04      	ldr	r2, [pc, #16]	; (1dc74 <am_stimer_cmpr1_isr+0x28>)
   1dc62:	6813      	ldr	r3, [r2, #0]
        xPortStimerTickHandler(1);
   1dc64:	2001      	movs	r0, #1
        gNumCmpB++;
   1dc66:	4403      	add	r3, r0
   1dc68:	6013      	str	r3, [r2, #0]
}
   1dc6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(1);
   1dc6e:	f7ff bf9f 	b.w	1dbb0 <xPortStimerTickHandler>
   1dc72:	bf00      	nop
   1dc74:	10005da8 	.word	0x10005da8

0001dc78 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   1dc78:	b538      	push	{r3, r4, r5, lr}
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
#ifdef AM_FREERTOS_STIMER_BACKUP
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   1dc7a:	4b18      	ldr	r3, [pc, #96]	; (1dcdc <vPortSetupTimerInterrupt+0x64>)
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   1dc7c:	4d18      	ldr	r5, [pc, #96]	; (1dce0 <vPortSetupTimerInterrupt+0x68>)
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   1dc7e:	4a19      	ldr	r2, [pc, #100]	; (1dce4 <vPortSetupTimerInterrupt+0x6c>)
   1dc80:	601a      	str	r2, [r3, #0]
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   1dc82:	2120      	movs	r1, #32
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   1dc84:	2003      	movs	r0, #3
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   1dc86:	6029      	str	r1, [r5, #0]
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   1dc88:	f007 fe42 	bl	25910 <am_hal_stimer_int_enable>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1dc8c:	4b16      	ldr	r3, [pc, #88]	; (1dce8 <vPortSetupTimerInterrupt+0x70>)
   1dc8e:	22e0      	movs	r2, #224	; 0xe0
   1dc90:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dc94:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1dc98:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1dc9a:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dc9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1dca2:	601a      	str	r2, [r3, #0]
#endif // AM_CMSIS_REGS
#endif
    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   1dca4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1dca8:	f007 fdbc 	bl	25824 <am_hal_stimer_config>
   1dcac:	4604      	mov	r4, r0
    g_lastSTimerVal = am_hal_stimer_counter_get();
   1dcae:	f007 fdc3 	bl	25838 <am_hal_stimer_counter_get>
   1dcb2:	4b0e      	ldr	r3, [pc, #56]	; (1dcec <vPortSetupTimerInterrupt+0x74>)
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   1dcb4:	6829      	ldr	r1, [r5, #0]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   1dcb6:	6018      	str	r0, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   1dcb8:	2000      	movs	r0, #0
   1dcba:	f007 fdcd 	bl	25858 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   1dcbe:	6829      	ldr	r1, [r5, #0]
   1dcc0:	2001      	movs	r0, #1
   1dcc2:	4401      	add	r1, r0
   1dcc4:	f007 fdc8 	bl	25858 <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   1dcc8:	4809      	ldr	r0, [pc, #36]	; (1dcf0 <vPortSetupTimerInterrupt+0x78>)
   1dcca:	4020      	ands	r0, r4
   1dccc:	f440 7040 	orr.w	r0, r0, #768	; 0x300
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   1dcd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   1dcd4:	f040 0003 	orr.w	r0, r0, #3
   1dcd8:	f007 bda4 	b.w	25824 <am_hal_stimer_config>
   1dcdc:	10005dbc 	.word	0x10005dbc
   1dce0:	10005db8 	.word	0x10005db8
   1dce4:	07fffffe 	.word	0x07fffffe
   1dce8:	e000e100 	.word	0xe000e100
   1dcec:	10005dac 	.word	0x10005dac
   1dcf0:	7ffffcf0 	.word	0x7ffffcf0

0001dcf4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   1dcf4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1dcf8:	4a36      	ldr	r2, [pc, #216]	; (1ddd4 <xPortStartScheduler+0xe0>)
   1dcfa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
   1dcfe:	4291      	cmp	r1, r2
   1dd00:	d02b      	beq.n	1dd5a <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   1dd02:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
   1dd06:	4b34      	ldr	r3, [pc, #208]	; (1ddd8 <xPortStartScheduler+0xe4>)
   1dd08:	429a      	cmp	r2, r3
   1dd0a:	d027      	beq.n	1dd5c <xPortStartScheduler+0x68>
{
   1dd0c:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   1dd0e:	4b33      	ldr	r3, [pc, #204]	; (1dddc <xPortStartScheduler+0xe8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   1dd10:	4933      	ldr	r1, [pc, #204]	; (1dde0 <xPortStartScheduler+0xec>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   1dd12:	781a      	ldrb	r2, [r3, #0]
{
   1dd14:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   1dd16:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   1dd18:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   1dd1a:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   1dd1c:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   1dd1e:	781b      	ldrb	r3, [r3, #0]
   1dd20:	b2db      	uxtb	r3, r3
   1dd22:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   1dd26:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1dd2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   1dd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1dd32:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   1dd34:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1dd36:	d50f      	bpl.n	1dd58 <xPortStartScheduler+0x64>
   1dd38:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   1dd3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dd3e:	005b      	lsls	r3, r3, #1
   1dd40:	b2db      	uxtb	r3, r3
   1dd42:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   1dd46:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dd4a:	061b      	lsls	r3, r3, #24
   1dd4c:	4611      	mov	r1, r2
   1dd4e:	f102 32ff 	add.w	r2, r2, #4294967295
   1dd52:	d4f2      	bmi.n	1dd3a <xPortStartScheduler+0x46>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   1dd54:	2904      	cmp	r1, #4
   1dd56:	d002      	beq.n	1dd5e <xPortStartScheduler+0x6a>
   1dd58:	e7fe      	b.n	1dd58 <xPortStartScheduler+0x64>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   1dd5a:	e7fe      	b.n	1dd5a <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   1dd5c:	e7fe      	b.n	1dd5c <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1dd5e:	9b02      	ldr	r3, [sp, #8]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   1dd60:	4920      	ldr	r1, [pc, #128]	; (1dde4 <xPortStartScheduler+0xf0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1dd62:	4a1e      	ldr	r2, [pc, #120]	; (1dddc <xPortStartScheduler+0xe8>)
	uxCriticalNesting = 0;
   1dd64:	4d20      	ldr	r5, [pc, #128]	; (1dde8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   1dd66:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   1dd6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1dd6e:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   1dd70:	6008      	str	r0, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1dd72:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   1dd74:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
   1dd78:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   1dd7c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   1dd80:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
   1dd84:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   1dd88:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
   1dd8c:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
   1dd8e:	f7ff ff73 	bl	1dc78 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
   1dd92:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
   1dd94:	f7ff fde8 	bl	1d968 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   1dd98:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
   1dd9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1dda0:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
   1dda4:	f7ff fdcc 	bl	1d940 <prvPortStartFirstTask>
	vTaskSwitchContext();
   1dda8:	f004 fe06 	bl	229b8 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
   1ddac:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
   1ddae:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
   1ddb0:	3301      	adds	r3, #1
   1ddb2:	d000      	beq.n	1ddb6 <xPortStartScheduler+0xc2>
   1ddb4:	e7fe      	b.n	1ddb4 <xPortStartScheduler+0xc0>
	__asm volatile
   1ddb6:	f04f 0380 	mov.w	r3, #128	; 0x80
   1ddba:	f383 8811 	msr	BASEPRI, r3
   1ddbe:	f3bf 8f6f 	isb	sy
   1ddc2:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
   1ddc6:	9b03      	ldr	r3, [sp, #12]
   1ddc8:	2b00      	cmp	r3, #0
   1ddca:	d0fc      	beq.n	1ddc6 <xPortStartScheduler+0xd2>
}
   1ddcc:	2000      	movs	r0, #0
   1ddce:	b004      	add	sp, #16
   1ddd0:	bd70      	pop	{r4, r5, r6, pc}
   1ddd2:	bf00      	nop
   1ddd4:	410fc271 	.word	0x410fc271
   1ddd8:	410fc270 	.word	0x410fc270
   1dddc:	e000e400 	.word	0xe000e400
   1dde0:	10005db0 	.word	0x10005db0
   1dde4:	10005db4 	.word	0x10005db4
   1dde8:	10002c34 	.word	0x10002c34

0001ddec <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   1ddec:	b082      	sub	sp, #8
  volatile uint8_t escape=0;
   1ddee:	2300      	movs	r3, #0
   1ddf0:	f88d 3007 	strb.w	r3, [sp, #7]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   1ddf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ddf8:	2b00      	cmp	r3, #0
   1ddfa:	d0fb      	beq.n	1ddf4 <WsfAssert+0x8>
    {
      break;
    }
  }
}
   1ddfc:	b002      	add	sp, #8
   1ddfe:	4770      	bx	lr

0001de00 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   1de00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1de04:	08c0      	lsrs	r0, r0, #3
  wsfBufMem = (wsfBufMem_t *) pBufMem;
   1de06:	4c31      	ldr	r4, [pc, #196]	; (1decc <WsfBufInit+0xcc>)
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1de08:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
  pStart = (wsfBufMem_t *) (pPool + numPools);
   1de0c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
  wsfBufMem = (wsfBufMem_t *) pBufMem;
   1de10:	6021      	str	r1, [r4, #0]
  pStart = (wsfBufMem_t *) (pPool + numPools);
   1de12:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  wsfBufNumPools = numPools;
   1de16:	4c2e      	ldr	r4, [pc, #184]	; (1ded0 <WsfBufInit+0xd0>)
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1de18:	4560      	cmp	r0, ip
  wsfBufNumPools = numPools;
   1de1a:	7022      	strb	r2, [r4, #0]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1de1c:	d849      	bhi.n	1deb2 <WsfBufInit+0xb2>
      WSF_ASSERT(FALSE);
      return 0;
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   1de1e:	1e57      	subs	r7, r2, #1
   1de20:	b2ff      	uxtb	r7, r7
   1de22:	b3ba      	cbz	r2, 1de94 <WsfBufInit+0x94>
   1de24:	f103 0208 	add.w	r2, r3, #8
   1de28:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   1de2c:	1d1d      	adds	r5, r3, #4
   1de2e:	f101 060c 	add.w	r6, r1, #12
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   1de32:	f04f 0908 	mov.w	r9, #8
    {
      WSF_ASSERT(FALSE);
      return 0;
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   1de36:	f04f 0800 	mov.w	r8, #0
    if (pDesc->len < sizeof(wsfBufMem_t))
   1de3a:	f835 4c04 	ldrh.w	r4, [r5, #-4]
   1de3e:	2c07      	cmp	r4, #7
   1de40:	d83a      	bhi.n	1deb8 <WsfBufInit+0xb8>
      pPool->desc.len = sizeof(wsfBufMem_t);
   1de42:	f826 9c0c 	strh.w	r9, [r6, #-12]
   1de46:	2401      	movs	r4, #1
    pPool->desc.num = pDesc->num;
   1de48:	f815 3c02 	ldrb.w	r3, [r5, #-2]
   1de4c:	f806 3c0a 	strb.w	r3, [r6, #-10]
    for (i = pPool->desc.num; i > 1; i--)
   1de50:	2b01      	cmp	r3, #1
    pPool->pFree = pStart;
   1de52:	e946 0002 	strd	r0, r0, [r6, #-8]
    for (i = pPool->desc.num; i > 1; i--)
   1de56:	d910      	bls.n	1de7a <WsfBufInit+0x7a>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1de58:	4584      	cmp	ip, r0
   1de5a:	d32a      	bcc.n	1deb2 <WsfBufInit+0xb2>
      pStart->pNext = pStart + len;
   1de5c:	00e2      	lsls	r2, r4, #3
   1de5e:	2c01      	cmp	r4, #1
   1de60:	f1c2 0e00 	rsb	lr, r2, #0
   1de64:	d002      	beq.n	1de6c <WsfBufInit+0x6c>
   1de66:	e01c      	b.n	1dea2 <WsfBufInit+0xa2>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1de68:	4560      	cmp	r0, ip
   1de6a:	d822      	bhi.n	1deb2 <WsfBufInit+0xb2>
    for (i = pPool->desc.num; i > 1; i--)
   1de6c:	3b01      	subs	r3, #1
      pStart->pNext = pStart + len;
   1de6e:	4410      	add	r0, r2
    for (i = pPool->desc.num; i > 1; i--)
   1de70:	b2db      	uxtb	r3, r3
   1de72:	2b01      	cmp	r3, #1
      pStart->pNext = pStart + len;
   1de74:	f840 000e 	str.w	r0, [r0, lr]
    for (i = pPool->desc.num; i > 1; i--)
   1de78:	d1f6      	bne.n	1de68 <WsfBufInit+0x68>
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1de7a:	4584      	cmp	ip, r0
   1de7c:	d319      	bcc.n	1deb2 <WsfBufInit+0xb2>
    pStart->pNext = NULL;
   1de7e:	f8c0 8000 	str.w	r8, [r0]
    pStart += len;
   1de82:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1de86:	4560      	cmp	r0, ip
   1de88:	d813      	bhi.n	1deb2 <WsfBufInit+0xb2>
    if (numPools-- == 0)
   1de8a:	3504      	adds	r5, #4
   1de8c:	42bd      	cmp	r5, r7
   1de8e:	f106 060c 	add.w	r6, r6, #12
   1de92:	d1d2      	bne.n	1de3a <WsfBufInit+0x3a>

    /* next pool */
    pPool++;
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   1de94:	4b0f      	ldr	r3, [pc, #60]	; (1ded4 <WsfBufInit+0xd4>)
   1de96:	1a40      	subs	r0, r0, r1
   1de98:	b280      	uxth	r0, r0
   1de9a:	8018      	strh	r0, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   1de9c:	e00a      	b.n	1deb4 <WsfBufInit+0xb4>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1de9e:	4560      	cmp	r0, ip
   1dea0:	d807      	bhi.n	1deb2 <WsfBufInit+0xb2>
    for (i = pPool->desc.num; i > 1; i--)
   1dea2:	3b01      	subs	r3, #1
      pStart->pNext = pStart + len;
   1dea4:	4410      	add	r0, r2
    for (i = pPool->desc.num; i > 1; i--)
   1dea6:	b2db      	uxtb	r3, r3
   1dea8:	2b01      	cmp	r3, #1
      pStart->pNext = pStart + len;
   1deaa:	f840 000e 	str.w	r0, [r0, lr]
    for (i = pPool->desc.num; i > 1; i--)
   1deae:	d1f6      	bne.n	1de9e <WsfBufInit+0x9e>
   1deb0:	e7e3      	b.n	1de7a <WsfBufInit+0x7a>
      return 0;
   1deb2:	2000      	movs	r0, #0
}
   1deb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   1deb8:	0763      	lsls	r3, r4, #29
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   1deba:	bf1e      	ittt	ne
   1debc:	f024 0407 	bicne.w	r4, r4, #7
   1dec0:	3408      	addne	r4, #8
   1dec2:	b2a4      	uxthne	r4, r4
      pPool->desc.len = pDesc->len;
   1dec4:	f826 4c0c 	strh.w	r4, [r6, #-12]
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   1dec8:	08e4      	lsrs	r4, r4, #3
   1deca:	e7bd      	b.n	1de48 <WsfBufInit+0x48>
   1decc:	10005dc0 	.word	0x10005dc0
   1ded0:	10005dc6 	.word	0x10005dc6
   1ded4:	10005dc4 	.word	0x10005dc4

0001ded8 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   1ded8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1deda:	4a14      	ldr	r2, [pc, #80]	; (1df2c <WsfBufAlloc+0x54>)
  pPool = (wsfBufPool_t *) wsfBufMem;
   1dedc:	4b14      	ldr	r3, [pc, #80]	; (1df30 <WsfBufAlloc+0x58>)
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1dede:	7815      	ldrb	r5, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   1dee0:	681c      	ldr	r4, [r3, #0]
{
   1dee2:	4606      	mov	r6, r0
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1dee4:	b19d      	cbz	r5, 1df0e <WsfBufAlloc+0x36>
   1dee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1deea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   1deee:	e002      	b.n	1def6 <WsfBufAlloc+0x1e>
   1def0:	340c      	adds	r4, #12
   1def2:	42ac      	cmp	r4, r5
   1def4:	d00b      	beq.n	1df0e <WsfBufAlloc+0x36>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   1def6:	8823      	ldrh	r3, [r4, #0]
   1def8:	42b3      	cmp	r3, r6
   1defa:	d3f9      	bcc.n	1def0 <WsfBufAlloc+0x18>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1defc:	f000 f87a 	bl	1dff4 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   1df00:	68a7      	ldr	r7, [r4, #8]
   1df02:	b95f      	cbnz	r7, 1df1c <WsfBufAlloc+0x44>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1df04:	340c      	adds	r4, #12

        return pBuf;
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1df06:	f000 f87f 	bl	1e008 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1df0a:	42ac      	cmp	r4, r5
   1df0c:	d1f3      	bne.n	1def6 <WsfBufAlloc+0x1e>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   1df0e:	4809      	ldr	r0, [pc, #36]	; (1df34 <WsfBufAlloc+0x5c>)
   1df10:	4631      	mov	r1, r6

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   1df12:	2700      	movs	r7, #0
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   1df14:	f000 fbc0 	bl	1e698 <WsfTrace>
}
   1df18:	4638      	mov	r0, r7
   1df1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pPool->pFree = pBuf->pNext;
   1df1c:	683a      	ldr	r2, [r7, #0]
   1df1e:	60a2      	str	r2, [r4, #8]
        pBuf->free = 0;
   1df20:	2300      	movs	r3, #0
   1df22:	607b      	str	r3, [r7, #4]
        WSF_CS_EXIT(cs);
   1df24:	f000 f870 	bl	1e008 <WsfCsExit>
}
   1df28:	4638      	mov	r0, r7
   1df2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1df2c:	10005dc6 	.word	0x10005dc6
   1df30:	10005dc0 	.word	0x10005dc0
   1df34:	00027e7c 	.word	0x00027e7c

0001df38 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   1df38:	b538      	push	{r3, r4, r5, lr}
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   1df3a:	4a0f      	ldr	r2, [pc, #60]	; (1df78 <WsfBufFree+0x40>)
   1df3c:	4b0f      	ldr	r3, [pc, #60]	; (1df7c <WsfBufFree+0x44>)
   1df3e:	6812      	ldr	r2, [r2, #0]
   1df40:	781c      	ldrb	r4, [r3, #0]
   1df42:	230c      	movs	r3, #12
   1df44:	fb03 2404 	mla	r4, r3, r4, r2
   1df48:	3c0c      	subs	r4, #12
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1df4a:	42a2      	cmp	r2, r4
   1df4c:	d812      	bhi.n	1df74 <WsfBufFree+0x3c>
   1df4e:	4605      	mov	r5, r0
   1df50:	e002      	b.n	1df58 <WsfBufFree+0x20>

      return;
    }

    /* next pool */
    pPool--;
   1df52:	3c0c      	subs	r4, #12
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1df54:	42a2      	cmp	r2, r4
   1df56:	d80d      	bhi.n	1df74 <WsfBufFree+0x3c>
    if (p >= pPool->pStart)
   1df58:	6863      	ldr	r3, [r4, #4]
   1df5a:	42ab      	cmp	r3, r5
   1df5c:	d8f9      	bhi.n	1df52 <WsfBufFree+0x1a>
      WSF_CS_ENTER(cs);
   1df5e:	f000 f849 	bl	1dff4 <WsfCsEnter>
      p->pNext = pPool->pFree;
   1df62:	68a3      	ldr	r3, [r4, #8]
      p->free = WSF_BUF_FREE_NUM;
   1df64:	4a06      	ldr	r2, [pc, #24]	; (1df80 <WsfBufFree+0x48>)
      p->pNext = pPool->pFree;
   1df66:	e9c5 3200 	strd	r3, r2, [r5]
      pPool->pFree = p;
   1df6a:	60a5      	str	r5, [r4, #8]

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
}
   1df6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      WSF_CS_EXIT(cs);
   1df70:	f000 b84a 	b.w	1e008 <WsfCsExit>
}
   1df74:	bd38      	pop	{r3, r4, r5, pc}
   1df76:	bf00      	nop
   1df78:	10005dc0 	.word	0x10005dc0
   1df7c:	10005dc6 	.word	0x10005dc6
   1df80:	faabd00d 	.word	0xfaabd00d

0001df84 <WsfMsgDataAlloc>:
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1df84:	3008      	adds	r0, #8
   1df86:	4408      	add	r0, r1
{
   1df88:	b508      	push	{r3, lr}
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1df8a:	b280      	uxth	r0, r0
   1df8c:	f7ff ffa4 	bl	1ded8 <WsfBufAlloc>

  /* hide header */
  if (pMsg != NULL)
   1df90:	b100      	cbz	r0, 1df94 <WsfMsgDataAlloc+0x10>
  {
    pMsg++;
   1df92:	3008      	adds	r0, #8
}
   1df94:	bd08      	pop	{r3, pc}
   1df96:	bf00      	nop

0001df98 <WsfMsgAlloc>:
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1df98:	3008      	adds	r0, #8
{
   1df9a:	b508      	push	{r3, lr}
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1df9c:	b280      	uxth	r0, r0
   1df9e:	f7ff ff9b 	bl	1ded8 <WsfBufAlloc>
  if (pMsg != NULL)
   1dfa2:	b100      	cbz	r0, 1dfa6 <WsfMsgAlloc+0xe>
    pMsg++;
   1dfa4:	3008      	adds	r0, #8
  }

  return pMsg;
}
   1dfa6:	bd08      	pop	{r3, pc}

0001dfa8 <WsfMsgFree>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   1dfa8:	3808      	subs	r0, #8
   1dfaa:	f7ff bfc5 	b.w	1df38 <WsfBufFree>
   1dfae:	bf00      	nop

0001dfb0 <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   1dfb0:	b538      	push	{r3, r4, r5, lr}
   1dfb2:	460d      	mov	r5, r1
   1dfb4:	4604      	mov	r4, r0
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   1dfb6:	f000 f8e3 	bl	1e180 <WsfTaskMsgQueue>
  p = ((wsfMsg_t *) pMsg) - 1;

  /* set handler ID */
  p->handlerId = handlerId;

  WsfQueueEnq(pQueue, p);
   1dfba:	f1a5 0108 	sub.w	r1, r5, #8
  p->handlerId = handlerId;
   1dfbe:	f805 4c04 	strb.w	r4, [r5, #-4]
  WsfQueueEnq(pQueue, p);
   1dfc2:	f000 f989 	bl	1e2d8 <WsfQueueEnq>
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   1dfc6:	4620      	mov	r0, r4
   1dfc8:	2101      	movs	r1, #1
}
   1dfca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   1dfce:	f000 b88f 	b.w	1e0f0 <WsfTaskSetReady>
   1dfd2:	bf00      	nop

0001dfd4 <WsfMsgEnq>:
  p->handlerId = handlerId;
   1dfd4:	f802 1c04 	strb.w	r1, [r2, #-4]
  WsfQueueEnq(pQueue, p);
   1dfd8:	f1a2 0108 	sub.w	r1, r2, #8
   1dfdc:	f000 b97c 	b.w	1e2d8 <WsfQueueEnq>

0001dfe0 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   1dfe0:	b510      	push	{r4, lr}
   1dfe2:	460c      	mov	r4, r1
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   1dfe4:	f000 f98e 	bl	1e304 <WsfQueueDeq>
   1dfe8:	b110      	cbz	r0, 1dff0 <WsfMsgDeq+0x10>
  {
    *pHandlerId = pMsg->handlerId;
   1dfea:	7903      	ldrb	r3, [r0, #4]
   1dfec:	7023      	strb	r3, [r4, #0]

    /* hide header */
    pMsg++;
   1dfee:	3008      	adds	r0, #8
  }

  return pMsg;
}
   1dff0:	bd10      	pop	{r4, pc}
   1dff2:	bf00      	nop

0001dff4 <WsfCsEnter>:
   1dff4:	4a03      	ldr	r2, [pc, #12]	; (1e004 <WsfCsEnter+0x10>)
   1dff6:	7813      	ldrb	r3, [r2, #0]
   1dff8:	b90b      	cbnz	r3, 1dffe <WsfCsEnter+0xa>
   1dffa:	b672      	cpsid	i
   1dffc:	7813      	ldrb	r3, [r2, #0]
   1dffe:	3301      	adds	r3, #1
   1e000:	7013      	strb	r3, [r2, #0]
   1e002:	4770      	bx	lr
   1e004:	10005dc7 	.word	0x10005dc7

0001e008 <WsfCsExit>:
   1e008:	4a03      	ldr	r2, [pc, #12]	; (1e018 <WsfCsExit+0x10>)
   1e00a:	7813      	ldrb	r3, [r2, #0]
   1e00c:	3b01      	subs	r3, #1
   1e00e:	b2db      	uxtb	r3, r3
   1e010:	7013      	strb	r3, [r2, #0]
   1e012:	b903      	cbnz	r3, 1e016 <WsfCsExit+0xe>
   1e014:	b662      	cpsie	i
   1e016:	4770      	bx	lr
   1e018:	10005dc7 	.word	0x10005dc7

0001e01c <WsfTaskLock>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
  if (csNesting == 0)
   1e01c:	4a03      	ldr	r2, [pc, #12]	; (1e02c <WsfTaskLock+0x10>)
   1e01e:	7813      	ldrb	r3, [r2, #0]
   1e020:	b90b      	cbnz	r3, 1e026 <WsfTaskLock+0xa>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   1e022:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   1e024:	7813      	ldrb	r3, [r2, #0]
   1e026:	3301      	adds	r3, #1
   1e028:	7013      	strb	r3, [r2, #0]
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
  WsfCsEnter();
}
   1e02a:	4770      	bx	lr
   1e02c:	10005dc7 	.word	0x10005dc7

0001e030 <WsfTaskUnlock>:
  csNesting--;
   1e030:	4a03      	ldr	r2, [pc, #12]	; (1e040 <WsfTaskUnlock+0x10>)
   1e032:	7813      	ldrb	r3, [r2, #0]
   1e034:	3b01      	subs	r3, #1
   1e036:	b2db      	uxtb	r3, r3
   1e038:	7013      	strb	r3, [r2, #0]
  if (csNesting == 0)
   1e03a:	b903      	cbnz	r3, 1e03e <WsfTaskUnlock+0xe>
    __asm volatile ("cpsie i");
   1e03c:	b662      	cpsie	i
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
  WsfCsExit();
}
   1e03e:	4770      	bx	lr
   1e040:	10005dc7 	.word	0x10005dc7

0001e044 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   1e044:	b510      	push	{r4, lr}
  if (csNesting == 0)
   1e046:	4b26      	ldr	r3, [pc, #152]	; (1e0e0 <WsfSetEvent+0x9c>)
   1e048:	781a      	ldrb	r2, [r3, #0]
{
   1e04a:	b082      	sub	sp, #8
  if (csNesting == 0)
   1e04c:	bb4a      	cbnz	r2, 1e0a2 <WsfSetEvent+0x5e>
    __asm volatile ("cpsid i");
   1e04e:	b672      	cpsid	i
  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1e050:	4a24      	ldr	r2, [pc, #144]	; (1e0e4 <WsfSetEvent+0xa0>)
  csNesting++;
   1e052:	781c      	ldrb	r4, [r3, #0]
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1e054:	f000 000f 	and.w	r0, r0, #15
   1e058:	4410      	add	r0, r2
   1e05a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   1e05e:	4319      	orrs	r1, r3
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1e060:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1e064:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1e068:	f043 0304 	orr.w	r3, r3, #4
   1e06c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  if (csNesting == 0)
   1e070:	b904      	cbnz	r4, 1e074 <WsfSetEvent+0x30>
    __asm volatile ("cpsie i");
   1e072:	b662      	cpsie	i
  if(xRadioTaskEventObject != NULL) 
   1e074:	4b1c      	ldr	r3, [pc, #112]	; (1e0e8 <WsfSetEvent+0xa4>)
   1e076:	681a      	ldr	r2, [r3, #0]
   1e078:	b18a      	cbz	r2, 1e09e <WsfSetEvent+0x5a>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   1e07a:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
   1e07e:	bb0a      	cbnz	r2, 1e0c4 <WsfSetEvent+0x80>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   1e080:	6818      	ldr	r0, [r3, #0]
   1e082:	2101      	movs	r1, #1
   1e084:	f003 fb14 	bl	216b0 <xEventGroupSetBits>
          if ( xResult != pdFAIL )
   1e088:	b148      	cbz	r0, 1e09e <WsfSetEvent+0x5a>
              portYIELD();
   1e08a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1e08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e092:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1e096:	f3bf 8f4f 	dsb	sy
   1e09a:	f3bf 8f6f 	isb	sy
  WSF_CS_EXIT(cs);

  /* set event in OS */

  WsfSetOsSpecificEvent();
}
   1e09e:	b002      	add	sp, #8
   1e0a0:	bd10      	pop	{r4, pc}
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1e0a2:	4b10      	ldr	r3, [pc, #64]	; (1e0e4 <WsfSetEvent+0xa0>)
   1e0a4:	f000 000f 	and.w	r0, r0, #15
   1e0a8:	4418      	add	r0, r3
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1e0aa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1e0ae:	f890 c024 	ldrb.w	ip, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1e0b2:	f042 0204 	orr.w	r2, r2, #4
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1e0b6:	ea41 010c 	orr.w	r1, r1, ip
   1e0ba:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1e0be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (csNesting == 0)
   1e0c2:	e7d7      	b.n	1e074 <WsfSetEvent+0x30>
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1e0c4:	6819      	ldr	r1, [r3, #0]
   1e0c6:	4809      	ldr	r0, [pc, #36]	; (1e0ec <WsfSetEvent+0xa8>)
          xHigherPriorityTaskWoken = pdFALSE;
   1e0c8:	2400      	movs	r4, #0
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1e0ca:	ab01      	add	r3, sp, #4
   1e0cc:	2201      	movs	r2, #1
          xHigherPriorityTaskWoken = pdFALSE;
   1e0ce:	9401      	str	r4, [sp, #4]
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1e0d0:	f005 f85a 	bl	23188 <xTimerPendFunctionCallFromISR>
          if ( xResult != pdFAIL )
   1e0d4:	2800      	cmp	r0, #0
   1e0d6:	d0e2      	beq.n	1e09e <WsfSetEvent+0x5a>
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1e0d8:	9b01      	ldr	r3, [sp, #4]
   1e0da:	2b00      	cmp	r3, #0
   1e0dc:	d0df      	beq.n	1e09e <WsfSetEvent+0x5a>
   1e0de:	e7d4      	b.n	1e08a <WsfSetEvent+0x46>
   1e0e0:	10005dc7 	.word	0x10005dc7
   1e0e4:	10005dc8 	.word	0x10005dc8
   1e0e8:	10005e04 	.word	0x10005e04
   1e0ec:	00021725 	.word	0x00021725

0001e0f0 <WsfTaskSetReady>:
  if (csNesting == 0)
   1e0f0:	4b1f      	ldr	r3, [pc, #124]	; (1e170 <WsfTaskSetReady+0x80>)
   1e0f2:	781a      	ldrb	r2, [r3, #0]
   1e0f4:	bb12      	cbnz	r2, 1e13c <WsfTaskSetReady+0x4c>
    __asm volatile ("cpsid i");
   1e0f6:	b672      	cpsid	i
  (void)handlerId;

  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
  wsfOs.task.taskEventMask |= event;
   1e0f8:	4a1e      	ldr	r2, [pc, #120]	; (1e174 <WsfTaskSetReady+0x84>)
  csNesting++;
   1e0fa:	781b      	ldrb	r3, [r3, #0]
  wsfOs.task.taskEventMask |= event;
   1e0fc:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
   1e100:	4301      	orrs	r1, r0
   1e102:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
  if (csNesting == 0)
   1e106:	b903      	cbnz	r3, 1e10a <WsfTaskSetReady+0x1a>
    __asm volatile ("cpsie i");
   1e108:	b662      	cpsie	i
  if(xRadioTaskEventObject != NULL) 
   1e10a:	4b1b      	ldr	r3, [pc, #108]	; (1e178 <WsfTaskSetReady+0x88>)
   1e10c:	681a      	ldr	r2, [r3, #0]
   1e10e:	b1fa      	cbz	r2, 1e150 <WsfTaskSetReady+0x60>
{
   1e110:	b510      	push	{r4, lr}
   1e112:	b082      	sub	sp, #8
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   1e114:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
   1e118:	b9da      	cbnz	r2, 1e152 <WsfTaskSetReady+0x62>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   1e11a:	6818      	ldr	r0, [r3, #0]
   1e11c:	2101      	movs	r1, #1
   1e11e:	f003 fac7 	bl	216b0 <xEventGroupSetBits>
          if ( xResult != pdFAIL )
   1e122:	b148      	cbz	r0, 1e138 <WsfTaskSetReady+0x48>
              portYIELD();
   1e124:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1e128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e12c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1e130:	f3bf 8f4f 	dsb	sy
   1e134:	f3bf 8f6f 	isb	sy
  WSF_CS_EXIT(cs);

  /* set event in OS */

  WsfSetOsSpecificEvent();
}
   1e138:	b002      	add	sp, #8
   1e13a:	bd10      	pop	{r4, pc}
  wsfOs.task.taskEventMask |= event;
   1e13c:	4b0d      	ldr	r3, [pc, #52]	; (1e174 <WsfTaskSetReady+0x84>)
   1e13e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1e142:	4311      	orrs	r1, r2
   1e144:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  if(xRadioTaskEventObject != NULL) 
   1e148:	4b0b      	ldr	r3, [pc, #44]	; (1e178 <WsfTaskSetReady+0x88>)
   1e14a:	681a      	ldr	r2, [r3, #0]
   1e14c:	2a00      	cmp	r2, #0
   1e14e:	d1df      	bne.n	1e110 <WsfTaskSetReady+0x20>
   1e150:	4770      	bx	lr
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1e152:	6819      	ldr	r1, [r3, #0]
   1e154:	4809      	ldr	r0, [pc, #36]	; (1e17c <WsfTaskSetReady+0x8c>)
          xHigherPriorityTaskWoken = pdFALSE;
   1e156:	2400      	movs	r4, #0
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1e158:	ab01      	add	r3, sp, #4
   1e15a:	2201      	movs	r2, #1
          xHigherPriorityTaskWoken = pdFALSE;
   1e15c:	9401      	str	r4, [sp, #4]
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1e15e:	f005 f813 	bl	23188 <xTimerPendFunctionCallFromISR>
          if ( xResult != pdFAIL )
   1e162:	2800      	cmp	r0, #0
   1e164:	d0e8      	beq.n	1e138 <WsfTaskSetReady+0x48>
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1e166:	9b01      	ldr	r3, [sp, #4]
   1e168:	2b00      	cmp	r3, #0
   1e16a:	d0e5      	beq.n	1e138 <WsfTaskSetReady+0x48>
   1e16c:	e7da      	b.n	1e124 <WsfTaskSetReady+0x34>
   1e16e:	bf00      	nop
   1e170:	10005dc7 	.word	0x10005dc7
   1e174:	10005dc8 	.word	0x10005dc8
   1e178:	10005e04 	.word	0x10005e04
   1e17c:	00021725 	.word	0x00021725

0001e180 <WsfTaskMsgQueue>:
{
  /* Unused parameter */
  (void)handlerId;

  return &(wsfOs.task.msgQueue);
}
   1e180:	4800      	ldr	r0, [pc, #0]	; (1e184 <WsfTaskMsgQueue+0x4>)
   1e182:	4770      	bx	lr
   1e184:	10005df8 	.word	0x10005df8

0001e188 <WsfOsSetNextHandler>:
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   1e188:	4a04      	ldr	r2, [pc, #16]	; (1e19c <WsfOsSetNextHandler+0x14>)
   1e18a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1e18e:	1c59      	adds	r1, r3, #1

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   1e190:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   1e194:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39

  return handlerId;
}
   1e198:	4618      	mov	r0, r3
   1e19a:	4770      	bx	lr
   1e19c:	10005dc8 	.word	0x10005dc8

0001e1a0 <WsfOsInit>:
*
*  \return None.
*/
/*************************************************************************************************/
void WsfOsInit(void)
{
   1e1a0:	b510      	push	{r4, lr}
  memset(&wsfOs, 0, sizeof(wsfOs));

  if( xRadioTaskEventObject == NULL)
   1e1a2:	4c06      	ldr	r4, [pc, #24]	; (1e1bc <WsfOsInit+0x1c>)
  memset(&wsfOs, 0, sizeof(wsfOs));
   1e1a4:	4806      	ldr	r0, [pc, #24]	; (1e1c0 <WsfOsInit+0x20>)
   1e1a6:	223c      	movs	r2, #60	; 0x3c
   1e1a8:	2100      	movs	r1, #0
   1e1aa:	f005 f8c7 	bl	2333c <memset>
  if( xRadioTaskEventObject == NULL)
   1e1ae:	6823      	ldr	r3, [r4, #0]
   1e1b0:	b103      	cbz	r3, 1e1b4 <WsfOsInit+0x14>
  {
    xRadioTaskEventObject = xEventGroupCreate();

    WSF_ASSERT(xRadioTaskEventObject != NULL);
  }
}
   1e1b2:	bd10      	pop	{r4, pc}
    xRadioTaskEventObject = xEventGroupCreate();
   1e1b4:	f003 fa08 	bl	215c8 <xEventGroupCreate>
   1e1b8:	6020      	str	r0, [r4, #0]
}
   1e1ba:	bd10      	pop	{r4, pc}
   1e1bc:	10005e04 	.word	0x10005e04
   1e1c0:	10005dc8 	.word	0x10005dc8

0001e1c4 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   1e1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e1c8:	b084      	sub	sp, #16
   1e1ca:	4d3f      	ldr	r5, [pc, #252]	; (1e2c8 <wsfOsDispatcher+0x104>)
  if (csNesting == 0)
   1e1cc:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1e2d4 <wsfOsDispatcher+0x110>

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;

  WsfTimerUpdateTicks();
   1e1d0:	f000 f9fc 	bl	1e5cc <WsfTimerUpdateTicks>
    WSF_CS_EXIT(cs);

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1e1d4:	f105 0730 	add.w	r7, r5, #48	; 0x30
    pTask->taskEventMask = 0;
   1e1d8:	f04f 0900 	mov.w	r9, #0
   1e1dc:	e00e      	b.n	1e1fc <wsfOsDispatcher+0x38>
    __asm volatile ("cpsid i");
   1e1de:	b672      	cpsid	i
  csNesting++;
   1e1e0:	f898 2000 	ldrb.w	r2, [r8]
    taskEventMask = pTask->taskEventMask;
   1e1e4:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    pTask->taskEventMask = 0;
   1e1e8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  if (csNesting == 0)
   1e1ec:	b902      	cbnz	r2, 1e1f0 <wsfOsDispatcher+0x2c>
    __asm volatile ("cpsie i");
   1e1ee:	b662      	cpsie	i
    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   1e1f0:	07f1      	lsls	r1, r6, #31
   1e1f2:	d416      	bmi.n	1e222 <wsfOsDispatcher+0x5e>
        (*pTask->handler[handlerId])(0, pMsg);
        WsfMsgFree(pMsg);
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   1e1f4:	07b2      	lsls	r2, r6, #30
   1e1f6:	d423      	bmi.n	1e240 <wsfOsDispatcher+0x7c>
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   1e1f8:	0773      	lsls	r3, r6, #29
   1e1fa:	d42c      	bmi.n	1e256 <wsfOsDispatcher+0x92>
  while (pTask->taskEventMask)
   1e1fc:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
   1e200:	2e00      	cmp	r6, #0
   1e202:	d04c      	beq.n	1e29e <wsfOsDispatcher+0xda>
  if (csNesting == 0)
   1e204:	f898 3000 	ldrb.w	r3, [r8]
   1e208:	2b00      	cmp	r3, #0
   1e20a:	d0e8      	beq.n	1e1de <wsfOsDispatcher+0x1a>
    pTask->taskEventMask = 0;
   1e20c:	f885 9038 	strb.w	r9, [r5, #56]	; 0x38
  if (csNesting == 0)
   1e210:	e7ee      	b.n	1e1f0 <wsfOsDispatcher+0x2c>
        (*pTask->handler[handlerId])(0, pMsg);
   1e212:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1e216:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   1e21a:	4798      	blx	r3
        WsfMsgFree(pMsg);
   1e21c:	4620      	mov	r0, r4
   1e21e:	f7ff fec3 	bl	1dfa8 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1e222:	f10d 010f 	add.w	r1, sp, #15
   1e226:	4638      	mov	r0, r7
   1e228:	f7ff feda 	bl	1dfe0 <WsfMsgDeq>
   1e22c:	4604      	mov	r4, r0
        (*pTask->handler[handlerId])(0, pMsg);
   1e22e:	4621      	mov	r1, r4
   1e230:	2000      	movs	r0, #0
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1e232:	2c00      	cmp	r4, #0
   1e234:	d1ed      	bne.n	1e212 <wsfOsDispatcher+0x4e>
   1e236:	e7dd      	b.n	1e1f4 <wsfOsDispatcher+0x30>
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   1e238:	7b1b      	ldrb	r3, [r3, #12]
   1e23a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   1e23e:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   1e240:	2000      	movs	r0, #0
   1e242:	f000 f9ab 	bl	1e59c <WsfTimerServiceExpired>
   1e246:	4603      	mov	r3, r0
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   1e248:	f103 0108 	add.w	r1, r3, #8
   1e24c:	2000      	movs	r0, #0
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   1e24e:	2b00      	cmp	r3, #0
   1e250:	d1f2      	bne.n	1e238 <wsfOsDispatcher+0x74>
    if (taskEventMask & WSF_HANDLER_EVENT)
   1e252:	0773      	lsls	r3, r6, #29
   1e254:	d5d2      	bpl.n	1e1fc <wsfOsDispatcher+0x38>
   1e256:	4c1d      	ldr	r4, [pc, #116]	; (1e2cc <wsfOsDispatcher+0x108>)
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
        {
          WSF_CS_ENTER(cs);
          eventMask = pTask->handlerEventMask[i];
          pTask->handlerEventMask[i] = 0;
   1e258:	f04f 0900 	mov.w	r9, #0
   1e25c:	f1a4 0623 	sub.w	r6, r4, #35	; 0x23
   1e260:	f104 0a09 	add.w	sl, r4, #9
   1e264:	e00d      	b.n	1e282 <wsfOsDispatcher+0xbe>
    __asm volatile ("cpsid i");
   1e266:	b672      	cpsid	i
  csNesting++;
   1e268:	f898 2000 	ldrb.w	r2, [r8]
          eventMask = pTask->handlerEventMask[i];
   1e26c:	7820      	ldrb	r0, [r4, #0]
          pTask->handlerEventMask[i] = 0;
   1e26e:	7023      	strb	r3, [r4, #0]
  if (csNesting == 0)
   1e270:	b902      	cbnz	r2, 1e274 <wsfOsDispatcher+0xb0>
    __asm volatile ("cpsie i");
   1e272:	b662      	cpsie	i
          WSF_CS_EXIT(cs);

          (*pTask->handler[i])(eventMask, NULL);
   1e274:	6833      	ldr	r3, [r6, #0]
   1e276:	2100      	movs	r1, #0
   1e278:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   1e27a:	4554      	cmp	r4, sl
   1e27c:	f106 0604 	add.w	r6, r6, #4
   1e280:	d0aa      	beq.n	1e1d8 <wsfOsDispatcher+0x14>
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   1e282:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1e286:	2800      	cmp	r0, #0
   1e288:	d0f7      	beq.n	1e27a <wsfOsDispatcher+0xb6>
   1e28a:	6833      	ldr	r3, [r6, #0]
   1e28c:	2b00      	cmp	r3, #0
   1e28e:	d0f4      	beq.n	1e27a <wsfOsDispatcher+0xb6>
  if (csNesting == 0)
   1e290:	f898 3000 	ldrb.w	r3, [r8]
   1e294:	2b00      	cmp	r3, #0
   1e296:	d0e6      	beq.n	1e266 <wsfOsDispatcher+0xa2>
          pTask->handlerEventMask[i] = 0;
   1e298:	f884 9000 	strb.w	r9, [r4]
  if (csNesting == 0)
   1e29c:	e7ea      	b.n	1e274 <wsfOsDispatcher+0xb0>
        }
      }
    }
  }

  WsfTimerUpdateTicks();
   1e29e:	f000 f995 	bl	1e5cc <WsfTimerUpdateTicks>

  if (wsfOsReadyToSleep())
   1e2a2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1e2a6:	b113      	cbz	r3, 1e2ae <wsfOsDispatcher+0xea>
  {
    xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
                      pdFALSE, portMAX_DELAY);
  }

}
   1e2a8:	b004      	add	sp, #16
   1e2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
   1e2ae:	4808      	ldr	r0, [pc, #32]	; (1e2d0 <wsfOsDispatcher+0x10c>)
   1e2b0:	2201      	movs	r2, #1
   1e2b2:	f04f 31ff 	mov.w	r1, #4294967295
   1e2b6:	6800      	ldr	r0, [r0, #0]
   1e2b8:	9100      	str	r1, [sp, #0]
   1e2ba:	4611      	mov	r1, r2
   1e2bc:	f003 f992 	bl	215e4 <xEventGroupWaitBits>
}
   1e2c0:	b004      	add	sp, #16
   1e2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e2c6:	bf00      	nop
   1e2c8:	10005dc8 	.word	0x10005dc8
   1e2cc:	10005deb 	.word	0x10005deb
   1e2d0:	10005e04 	.word	0x10005e04
   1e2d4:	10005dc7 	.word	0x10005dc7

0001e2d8 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   1e2d8:	b538      	push	{r3, r4, r5, lr}

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   1e2da:	2300      	movs	r3, #0
{
   1e2dc:	4604      	mov	r4, r0
  WSF_QUEUE_NEXT(pElem) = NULL;
   1e2de:	600b      	str	r3, [r1, #0]
{
   1e2e0:	460d      	mov	r5, r1

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1e2e2:	f7ff fe87 	bl	1dff4 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   1e2e6:	6823      	ldr	r3, [r4, #0]
   1e2e8:	b133      	cbz	r3, 1e2f8 <WsfQueueEnq+0x20>
    pQueue->pTail = pElem;
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   1e2ea:	6863      	ldr	r3, [r4, #4]
   1e2ec:	601d      	str	r5, [r3, #0]
    pQueue->pTail = pElem;
   1e2ee:	6065      	str	r5, [r4, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
   1e2f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WSF_CS_EXIT(cs);
   1e2f4:	f7ff be88 	b.w	1e008 <WsfCsExit>
    pQueue->pTail = pElem;
   1e2f8:	e9c4 5500 	strd	r5, r5, [r4]
}
   1e2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WSF_CS_EXIT(cs);
   1e300:	f7ff be82 	b.w	1e008 <WsfCsExit>

0001e304 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   1e304:	b538      	push	{r3, r4, r5, lr}
   1e306:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1e308:	f7ff fe74 	bl	1dff4 <WsfCsEnter>

  pElem = pQueue->pHead;
   1e30c:	6825      	ldr	r5, [r4, #0]

  /* if queue is not empty */
  if (pElem != NULL)
   1e30e:	b115      	cbz	r5, 1e316 <WsfQueueDeq+0x12>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1e310:	682b      	ldr	r3, [r5, #0]
   1e312:	6023      	str	r3, [r4, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   1e314:	b11b      	cbz	r3, 1e31e <WsfQueueDeq+0x1a>
      pQueue->pTail = NULL;
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1e316:	f7ff fe77 	bl	1e008 <WsfCsExit>

  return pElem;
}
   1e31a:	4628      	mov	r0, r5
   1e31c:	bd38      	pop	{r3, r4, r5, pc}
      pQueue->pTail = NULL;
   1e31e:	6063      	str	r3, [r4, #4]
  WSF_CS_EXIT(cs);
   1e320:	f7ff fe72 	bl	1e008 <WsfCsExit>
}
   1e324:	4628      	mov	r0, r5
   1e326:	bd38      	pop	{r3, r4, r5, pc}

0001e328 <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1e328:	b570      	push	{r4, r5, r6, lr}
   1e32a:	4604      	mov	r4, r0
   1e32c:	460d      	mov	r5, r1
   1e32e:	4616      	mov	r6, r2

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1e330:	f7ff fe60 	bl	1dff4 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   1e334:	6823      	ldr	r3, [r4, #0]
   1e336:	b153      	cbz	r3, 1e34e <WsfQueueInsert+0x26>
   1e338:	6863      	ldr	r3, [r4, #4]
   1e33a:	42b3      	cmp	r3, r6
   1e33c:	d007      	beq.n	1e34e <WsfQueueInsert+0x26>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   1e33e:	b1ae      	cbz	r6, 1e36c <WsfQueueInsert+0x44>
    WsfQueuePush(pQueue, pElem);
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   1e340:	6833      	ldr	r3, [r6, #0]
   1e342:	602b      	str	r3, [r5, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   1e344:	6035      	str	r5, [r6, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
   1e346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
   1e34a:	f7ff be5d 	b.w	1e008 <WsfCsExit>
  WSF_QUEUE_NEXT(pElem) = NULL;
   1e34e:	2300      	movs	r3, #0
   1e350:	602b      	str	r3, [r5, #0]
  WSF_CS_ENTER(cs);
   1e352:	f7ff fe4f 	bl	1dff4 <WsfCsEnter>
  if (pQueue->pHead == NULL)
   1e356:	6823      	ldr	r3, [r4, #0]
   1e358:	b17b      	cbz	r3, 1e37a <WsfQueueInsert+0x52>
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   1e35a:	6863      	ldr	r3, [r4, #4]
   1e35c:	601d      	str	r5, [r3, #0]
    pQueue->pTail = pElem;
   1e35e:	6065      	str	r5, [r4, #4]
  WSF_CS_EXIT(cs);
   1e360:	f7ff fe52 	bl	1e008 <WsfCsExit>
}
   1e364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
   1e368:	f7ff be4e 	b.w	1e008 <WsfCsExit>
  WSF_CS_ENTER(cs);
   1e36c:	f7ff fe42 	bl	1dff4 <WsfCsEnter>
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   1e370:	6823      	ldr	r3, [r4, #0]
   1e372:	602b      	str	r3, [r5, #0]
  if (pQueue->pHead == NULL)
   1e374:	b123      	cbz	r3, 1e380 <WsfQueueInsert+0x58>
  pQueue->pHead = pElem;
   1e376:	6025      	str	r5, [r4, #0]
   1e378:	e7f2      	b.n	1e360 <WsfQueueInsert+0x38>
    pQueue->pTail = pElem;
   1e37a:	e9c4 5500 	strd	r5, r5, [r4]
   1e37e:	e7ef      	b.n	1e360 <WsfQueueInsert+0x38>
    pQueue->pTail = pElem;
   1e380:	6065      	str	r5, [r4, #4]
   1e382:	e7f8      	b.n	1e376 <WsfQueueInsert+0x4e>

0001e384 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1e384:	b570      	push	{r4, r5, r6, lr}
   1e386:	4605      	mov	r5, r0
   1e388:	460c      	mov	r4, r1
   1e38a:	4616      	mov	r6, r2
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1e38c:	f7ff fe32 	bl	1dff4 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   1e390:	682b      	ldr	r3, [r5, #0]
   1e392:	42a3      	cmp	r3, r4
   1e394:	d00a      	beq.n	1e3ac <WsfQueueRemove+0x28>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
  }
  else if (pPrev)
   1e396:	b10e      	cbz	r6, 1e39c <WsfQueueRemove+0x18>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   1e398:	6823      	ldr	r3, [r4, #0]
   1e39a:	6033      	str	r3, [r6, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   1e39c:	686b      	ldr	r3, [r5, #4]
   1e39e:	42a3      	cmp	r3, r4
  {
    /* update tail */
    pQueue->pTail = pPrev;
   1e3a0:	bf08      	it	eq
   1e3a2:	606e      	streq	r6, [r5, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
   1e3a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
   1e3a8:	f7ff be2e 	b.w	1e008 <WsfCsExit>
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1e3ac:	6823      	ldr	r3, [r4, #0]
   1e3ae:	602b      	str	r3, [r5, #0]
   1e3b0:	e7f4      	b.n	1e39c <WsfQueueRemove+0x18>
   1e3b2:	bf00      	nop

0001e3b4 <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   1e3b4:	b510      	push	{r4, lr}
   1e3b6:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1e3b8:	f7ff fe1c 	bl	1dff4 <WsfCsEnter>

  pElem = pQueue->pHead;
   1e3bc:	6823      	ldr	r3, [r4, #0]

  /* iterate over queue */
  while (pElem != NULL)
   1e3be:	b14b      	cbz	r3, 1e3d4 <WsfQueueCount+0x20>
  uint16_t        count = 0;
   1e3c0:	2400      	movs	r4, #0
  {
    count++;
    pElem = pElem->pNext;
   1e3c2:	681b      	ldr	r3, [r3, #0]
    count++;
   1e3c4:	3401      	adds	r4, #1
   1e3c6:	b2a4      	uxth	r4, r4
  while (pElem != NULL)
   1e3c8:	2b00      	cmp	r3, #0
   1e3ca:	d1fa      	bne.n	1e3c2 <WsfQueueCount+0xe>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1e3cc:	f7ff fe1c 	bl	1e008 <WsfCsExit>

  return count;
}
   1e3d0:	4620      	mov	r0, r4
   1e3d2:	bd10      	pop	{r4, pc}
  uint16_t        count = 0;
   1e3d4:	461c      	mov	r4, r3
  WSF_CS_EXIT(cs);
   1e3d6:	f7ff fe17 	bl	1e008 <WsfCsExit>
}
   1e3da:	4620      	mov	r0, r4
   1e3dc:	bd10      	pop	{r4, pc}
   1e3de:	bf00      	nop

0001e3e0 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   1e3e0:	b510      	push	{r4, lr}
   1e3e2:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1e3e4:	f7ff fe06 	bl	1dff4 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   1e3e8:	6824      	ldr	r4, [r4, #0]
   1e3ea:	fab4 f484 	clz	r4, r4
   1e3ee:	0964      	lsrs	r4, r4, #5

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1e3f0:	f7ff fe0a 	bl	1e008 <WsfCsExit>

  return empty;
}
   1e3f4:	4620      	mov	r0, r4
   1e3f6:	bd10      	pop	{r4, pc}

0001e3f8 <WsfTimer_handler>:
  WsfTaskUnlock();
}

static void WsfTimer_handler(TimerHandle_t xTimer)
{
  WsfTaskSetReady(0, WSF_TIMER_EVENT);
   1e3f8:	2102      	movs	r1, #2
   1e3fa:	2000      	movs	r0, #0
   1e3fc:	f7ff be78 	b.w	1e0f0 <WsfTaskSetReady>

0001e400 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   1e400:	b510      	push	{r4, lr}
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);

  if(xWsfTimer == NULL)
   1e402:	4c0d      	ldr	r4, [pc, #52]	; (1e438 <WsfTimerInit+0x38>)
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   1e404:	4a0d      	ldr	r2, [pc, #52]	; (1e43c <WsfTimerInit+0x3c>)
  if(xWsfTimer == NULL)
   1e406:	6823      	ldr	r3, [r4, #0]
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   1e408:	2000      	movs	r0, #0
   1e40a:	2100      	movs	r1, #0
   1e40c:	e9c2 0100 	strd	r0, r1, [r2]
{
   1e410:	b082      	sub	sp, #8
  if(xWsfTimer == NULL)
   1e412:	b10b      	cbz	r3, 1e418 <WsfTimerInit+0x18>
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
          pdFALSE, NULL, WsfTimer_handler);
    configASSERT(xWsfTimer);
    g_ui32LastTime = xTaskGetTickCount();
  }
}
   1e414:	b002      	add	sp, #8
   1e416:	bd10      	pop	{r4, pc}
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   1e418:	4a09      	ldr	r2, [pc, #36]	; (1e440 <WsfTimerInit+0x40>)
   1e41a:	9200      	str	r2, [sp, #0]
   1e41c:	4809      	ldr	r0, [pc, #36]	; (1e444 <WsfTimerInit+0x44>)
   1e41e:	461a      	mov	r2, r3
   1e420:	210a      	movs	r1, #10
   1e422:	f004 fe3b 	bl	2309c <xTimerCreate>
   1e426:	6020      	str	r0, [r4, #0]
    configASSERT(xWsfTimer);
   1e428:	b120      	cbz	r0, 1e434 <WsfTimerInit+0x34>
    g_ui32LastTime = xTaskGetTickCount();
   1e42a:	f004 f917 	bl	2265c <xTaskGetTickCount>
   1e42e:	4b06      	ldr	r3, [pc, #24]	; (1e448 <WsfTimerInit+0x48>)
   1e430:	6018      	str	r0, [r3, #0]
}
   1e432:	e7ef      	b.n	1e414 <WsfTimerInit+0x14>
    configASSERT(xWsfTimer);
   1e434:	e7fe      	b.n	1e434 <WsfTimerInit+0x34>
   1e436:	bf00      	nop
   1e438:	10005e18 	.word	0x10005e18
   1e43c:	10005e10 	.word	0x10005e10
   1e440:	0001e3f9 	.word	0x0001e3f9
   1e444:	00027e98 	.word	0x00027e98
   1e448:	10005e08 	.word	0x10005e08

0001e44c <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   1e44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e44e:	4606      	mov	r6, r0
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   1e450:	2564      	movs	r5, #100	; 0x64
   1e452:	fb01 f505 	mul.w	r5, r1, r5
  WsfTaskLock();
   1e456:	f7ff fde1 	bl	1e01c <WsfTaskLock>
  if (pTimer->isStarted)
   1e45a:	7b73      	ldrb	r3, [r6, #13]
   1e45c:	b9b3      	cbnz	r3, 1e48c <WsfTimerStartSec+0x40>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1e45e:	4b1b      	ldr	r3, [pc, #108]	; (1e4cc <WsfTimerStartSec+0x80>)
   1e460:	681b      	ldr	r3, [r3, #0]
  pTimer->ticks = ticks;
   1e462:	6075      	str	r5, [r6, #4]
  pTimer->isStarted = TRUE;
   1e464:	2201      	movs	r2, #1
   1e466:	7372      	strb	r2, [r6, #13]
  while (pElem != NULL)
   1e468:	b343      	cbz	r3, 1e4bc <WsfTimerStartSec+0x70>
    if (pElem == pTimer)
   1e46a:	2200      	movs	r2, #0
   1e46c:	e003      	b.n	1e476 <WsfTimerStartSec+0x2a>
    pElem = pElem->pNext;
   1e46e:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
   1e470:	461a      	mov	r2, r3
   1e472:	b11c      	cbz	r4, 1e47c <WsfTimerStartSec+0x30>
   1e474:	4623      	mov	r3, r4
    if (pTimer->ticks < pElem->ticks)
   1e476:	685c      	ldr	r4, [r3, #4]
   1e478:	42a5      	cmp	r5, r4
   1e47a:	d2f8      	bcs.n	1e46e <WsfTimerStartSec+0x22>
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   1e47c:	4631      	mov	r1, r6
   1e47e:	4813      	ldr	r0, [pc, #76]	; (1e4cc <WsfTimerStartSec+0x80>)
   1e480:	f7ff ff52 	bl	1e328 <WsfQueueInsert>
}
   1e484:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  WsfTaskUnlock();
   1e488:	f7ff bdd2 	b.w	1e030 <WsfTaskUnlock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1e48c:	4f0f      	ldr	r7, [pc, #60]	; (1e4cc <WsfTimerStartSec+0x80>)
   1e48e:	683b      	ldr	r3, [r7, #0]
  while (pElem != NULL)
   1e490:	b1b3      	cbz	r3, 1e4c0 <WsfTimerStartSec+0x74>
    if (pElem == pTimer)
   1e492:	429e      	cmp	r6, r3
   1e494:	d00b      	beq.n	1e4ae <WsfTimerStartSec+0x62>
   1e496:	461c      	mov	r4, r3
   1e498:	e001      	b.n	1e49e <WsfTimerStartSec+0x52>
   1e49a:	42a6      	cmp	r6, r4
   1e49c:	d008      	beq.n	1e4b0 <WsfTimerStartSec+0x64>
    pElem = pElem->pNext;
   1e49e:	4622      	mov	r2, r4
   1e4a0:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   1e4a2:	2c00      	cmp	r4, #0
   1e4a4:	d1f9      	bne.n	1e49a <WsfTimerStartSec+0x4e>
  pTimer->isStarted = TRUE;
   1e4a6:	2201      	movs	r2, #1
   1e4a8:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   1e4aa:	6075      	str	r5, [r6, #4]
  while (pElem != NULL)
   1e4ac:	e7dd      	b.n	1e46a <WsfTimerStartSec+0x1e>
  wsfTimer_t  *pPrev = NULL;
   1e4ae:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   1e4b0:	4806      	ldr	r0, [pc, #24]	; (1e4cc <WsfTimerStartSec+0x80>)
   1e4b2:	4631      	mov	r1, r6
   1e4b4:	f7ff ff66 	bl	1e384 <WsfQueueRemove>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1e4b8:	683b      	ldr	r3, [r7, #0]
   1e4ba:	e7d2      	b.n	1e462 <WsfTimerStartSec+0x16>
  wsfTimer_t  *pPrev = NULL;
   1e4bc:	461a      	mov	r2, r3
   1e4be:	e7dd      	b.n	1e47c <WsfTimerStartSec+0x30>
  pTimer->isStarted = TRUE;
   1e4c0:	2201      	movs	r2, #1
   1e4c2:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   1e4c4:	6075      	str	r5, [r6, #4]
  wsfTimer_t  *pPrev = NULL;
   1e4c6:	461a      	mov	r2, r3
   1e4c8:	e7d8      	b.n	1e47c <WsfTimerStartSec+0x30>
   1e4ca:	bf00      	nop
   1e4cc:	10005e10 	.word	0x10005e10

0001e4d0 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   1e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   1e4d2:	4b1f      	ldr	r3, [pc, #124]	; (1e550 <WsfTimerStartMs+0x80>)
{
   1e4d4:	4606      	mov	r6, r0
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   1e4d6:	fba3 3501 	umull	r3, r5, r3, r1
  WsfTaskLock();
   1e4da:	f7ff fd9f 	bl	1e01c <WsfTaskLock>
  if (pTimer->isStarted)
   1e4de:	7b73      	ldrb	r3, [r6, #13]
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   1e4e0:	08ed      	lsrs	r5, r5, #3
  if (pTimer->isStarted)
   1e4e2:	b9b3      	cbnz	r3, 1e512 <WsfTimerStartMs+0x42>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1e4e4:	4b1b      	ldr	r3, [pc, #108]	; (1e554 <WsfTimerStartMs+0x84>)
   1e4e6:	681b      	ldr	r3, [r3, #0]
  pTimer->ticks = ticks;
   1e4e8:	6075      	str	r5, [r6, #4]
  pTimer->isStarted = TRUE;
   1e4ea:	2201      	movs	r2, #1
   1e4ec:	7372      	strb	r2, [r6, #13]
  while (pElem != NULL)
   1e4ee:	b343      	cbz	r3, 1e542 <WsfTimerStartMs+0x72>
    if (pElem == pTimer)
   1e4f0:	2200      	movs	r2, #0
   1e4f2:	e003      	b.n	1e4fc <WsfTimerStartMs+0x2c>
    pElem = pElem->pNext;
   1e4f4:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
   1e4f6:	461a      	mov	r2, r3
   1e4f8:	b11c      	cbz	r4, 1e502 <WsfTimerStartMs+0x32>
   1e4fa:	4623      	mov	r3, r4
    if (pTimer->ticks < pElem->ticks)
   1e4fc:	685c      	ldr	r4, [r3, #4]
   1e4fe:	42a5      	cmp	r5, r4
   1e500:	d2f8      	bcs.n	1e4f4 <WsfTimerStartMs+0x24>
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   1e502:	4631      	mov	r1, r6
   1e504:	4813      	ldr	r0, [pc, #76]	; (1e554 <WsfTimerStartMs+0x84>)
   1e506:	f7ff ff0f 	bl	1e328 <WsfQueueInsert>
}
   1e50a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  WsfTaskUnlock();
   1e50e:	f7ff bd8f 	b.w	1e030 <WsfTaskUnlock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1e512:	4f10      	ldr	r7, [pc, #64]	; (1e554 <WsfTimerStartMs+0x84>)
   1e514:	683b      	ldr	r3, [r7, #0]
  while (pElem != NULL)
   1e516:	b1b3      	cbz	r3, 1e546 <WsfTimerStartMs+0x76>
    if (pElem == pTimer)
   1e518:	429e      	cmp	r6, r3
   1e51a:	d00b      	beq.n	1e534 <WsfTimerStartMs+0x64>
   1e51c:	461c      	mov	r4, r3
   1e51e:	e001      	b.n	1e524 <WsfTimerStartMs+0x54>
   1e520:	42a6      	cmp	r6, r4
   1e522:	d008      	beq.n	1e536 <WsfTimerStartMs+0x66>
    pElem = pElem->pNext;
   1e524:	4622      	mov	r2, r4
   1e526:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   1e528:	2c00      	cmp	r4, #0
   1e52a:	d1f9      	bne.n	1e520 <WsfTimerStartMs+0x50>
  pTimer->isStarted = TRUE;
   1e52c:	2201      	movs	r2, #1
   1e52e:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   1e530:	6075      	str	r5, [r6, #4]
  while (pElem != NULL)
   1e532:	e7dd      	b.n	1e4f0 <WsfTimerStartMs+0x20>
  wsfTimer_t  *pPrev = NULL;
   1e534:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   1e536:	4807      	ldr	r0, [pc, #28]	; (1e554 <WsfTimerStartMs+0x84>)
   1e538:	4631      	mov	r1, r6
   1e53a:	f7ff ff23 	bl	1e384 <WsfQueueRemove>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1e53e:	683b      	ldr	r3, [r7, #0]
   1e540:	e7d2      	b.n	1e4e8 <WsfTimerStartMs+0x18>
  wsfTimer_t  *pPrev = NULL;
   1e542:	461a      	mov	r2, r3
   1e544:	e7dd      	b.n	1e502 <WsfTimerStartMs+0x32>
  pTimer->isStarted = TRUE;
   1e546:	2201      	movs	r2, #1
   1e548:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   1e54a:	6075      	str	r5, [r6, #4]
  wsfTimer_t  *pPrev = NULL;
   1e54c:	461a      	mov	r2, r3
   1e54e:	e7d8      	b.n	1e502 <WsfTimerStartMs+0x32>
   1e550:	cccccccd 	.word	0xcccccccd
   1e554:	10005e10 	.word	0x10005e10

0001e558 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   1e558:	b510      	push	{r4, lr}
   1e55a:	4604      	mov	r4, r0
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   1e55c:	f7ff fd5e 	bl	1e01c <WsfTaskLock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1e560:	4b0d      	ldr	r3, [pc, #52]	; (1e598 <WsfTimerStop+0x40>)
   1e562:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
   1e564:	b143      	cbz	r3, 1e578 <WsfTimerStop+0x20>
    if (pElem == pTimer)
   1e566:	429c      	cmp	r4, r3
   1e568:	d102      	bne.n	1e570 <WsfTimerStop+0x18>
   1e56a:	e009      	b.n	1e580 <WsfTimerStop+0x28>
   1e56c:	429c      	cmp	r4, r3
   1e56e:	d008      	beq.n	1e582 <WsfTimerStop+0x2a>
    pElem = pElem->pNext;
   1e570:	461a      	mov	r2, r3
   1e572:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
   1e574:	2b00      	cmp	r3, #0
   1e576:	d1f9      	bne.n	1e56c <WsfTimerStop+0x14>

  wsfTimerRemove(pTimer);

  /* task schedule unlock */
  WsfTaskUnlock();
}
   1e578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
   1e57c:	f7ff bd58 	b.w	1e030 <WsfTaskUnlock>
  wsfTimer_t  *pPrev = NULL;
   1e580:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   1e582:	4621      	mov	r1, r4
   1e584:	4804      	ldr	r0, [pc, #16]	; (1e598 <WsfTimerStop+0x40>)
   1e586:	f7ff fefd 	bl	1e384 <WsfQueueRemove>
    pTimer->isStarted = FALSE;
   1e58a:	2300      	movs	r3, #0
   1e58c:	7363      	strb	r3, [r4, #13]
}
   1e58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
   1e592:	f7ff bd4d 	b.w	1e030 <WsfTaskUnlock>
   1e596:	bf00      	nop
   1e598:	10005e10 	.word	0x10005e10

0001e59c <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   1e59c:	b538      	push	{r3, r4, r5, lr}

  /* Unused parameters */
  (void)taskId;

  /* task schedule lock */
  WsfTaskLock();
   1e59e:	f7ff fd3d 	bl	1e01c <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   1e5a2:	4809      	ldr	r0, [pc, #36]	; (1e5c8 <WsfTimerServiceExpired+0x2c>)
   1e5a4:	6804      	ldr	r4, [r0, #0]
   1e5a6:	b10c      	cbz	r4, 1e5ac <WsfTimerServiceExpired+0x10>
   1e5a8:	6865      	ldr	r5, [r4, #4]
   1e5aa:	b125      	cbz	r5, 1e5b6 <WsfTimerServiceExpired+0x1a>
  }

  /* task schedule unlock */
  WsfTaskUnlock();

  return NULL;
   1e5ac:	2400      	movs	r4, #0
  WsfTaskUnlock();
   1e5ae:	f7ff fd3f 	bl	1e030 <WsfTaskUnlock>
}
   1e5b2:	4620      	mov	r0, r4
   1e5b4:	bd38      	pop	{r3, r4, r5, pc}
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   1e5b6:	462a      	mov	r2, r5
   1e5b8:	4621      	mov	r1, r4
   1e5ba:	f7ff fee3 	bl	1e384 <WsfQueueRemove>
    pElem->isStarted = FALSE;
   1e5be:	7365      	strb	r5, [r4, #13]
    WsfTaskUnlock();
   1e5c0:	f7ff fd36 	bl	1e030 <WsfTaskUnlock>
}
   1e5c4:	4620      	mov	r0, r4
   1e5c6:	bd38      	pop	{r3, r4, r5, pc}
   1e5c8:	10005e10 	.word	0x10005e10

0001e5cc <WsfTimerUpdateTicks>:
//
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void WsfTimerUpdateTicks(void)
{
   1e5cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   1e5d0:	4f2c      	ldr	r7, [pc, #176]	; (1e684 <WsfTimerUpdateTicks+0xb8>)
{
   1e5d2:	b083      	sub	sp, #12
    ui32CurrentTime = xTaskGetTickCount();
   1e5d4:	f004 f842 	bl	2265c <xTaskGetTickCount>
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   1e5d8:	683b      	ldr	r3, [r7, #0]
   1e5da:	1ac3      	subs	r3, r0, r3

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   1e5dc:	2b09      	cmp	r3, #9
   1e5de:	d821      	bhi.n	1e624 <WsfTimerUpdateTicks+0x58>
  WsfTaskLock();
   1e5e0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1e694 <WsfTimerUpdateTicks+0xc8>
   1e5e4:	f7ff fd1a 	bl	1e01c <WsfTaskLock>
  if (wsfTimerTimerQueue.pHead == NULL)
   1e5e8:	f8d8 3000 	ldr.w	r3, [r8]
   1e5ec:	2b00      	cmp	r3, #0
   1e5ee:	d039      	beq.n	1e664 <WsfTimerUpdateTicks+0x98>
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   1e5f0:	685c      	ldr	r4, [r3, #4]
  WsfTaskUnlock();
   1e5f2:	f7ff fd1d 	bl	1e030 <WsfTaskUnlock>

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   1e5f6:	b194      	cbz	r4, 1e61e <WsfTimerUpdateTicks+0x52>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   1e5f8:	4b23      	ldr	r3, [pc, #140]	; (1e688 <WsfTimerUpdateTicks+0xbc>)
   1e5fa:	4924      	ldr	r1, [pc, #144]	; (1e68c <WsfTimerUpdateTicks+0xc0>)
   1e5fc:	f242 7210 	movw	r2, #10000	; 0x2710
   1e600:	fb04 f202 	mul.w	r2, r4, r2
   1e604:	fba3 3202 	umull	r3, r2, r3, r2
   1e608:	2364      	movs	r3, #100	; 0x64
   1e60a:	6808      	ldr	r0, [r1, #0]
   1e60c:	9300      	str	r3, [sp, #0]
   1e60e:	0992      	lsrs	r2, r2, #6
   1e610:	2300      	movs	r3, #0
   1e612:	2104      	movs	r1, #4
   1e614:	f004 fd8a 	bl	2312c <xTimerGenericCommand>
   1e618:	2801      	cmp	r0, #1
   1e61a:	d000      	beq.n	1e61e <WsfTimerUpdateTicks+0x52>
   1e61c:	e7fe      	b.n	1e61c <WsfTimerUpdateTicks+0x50>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   1e61e:	b003      	add	sp, #12
   1e620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   1e624:	4d1a      	ldr	r5, [pc, #104]	; (1e690 <WsfTimerUpdateTicks+0xc4>)
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1e626:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1e694 <WsfTimerUpdateTicks+0xc8>
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   1e62a:	fba5 2303 	umull	r2, r3, r5, r3
   1e62e:	4606      	mov	r6, r0
   1e630:	08dd      	lsrs	r5, r3, #3
  WsfTaskLock();
   1e632:	f7ff fcf3 	bl	1e01c <WsfTaskLock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1e636:	f8d8 4000 	ldr.w	r4, [r8]
  while (pElem != NULL)
   1e63a:	b154      	cbz	r4, 1e652 <WsfTimerUpdateTicks+0x86>
      pElem->ticks = 0;
   1e63c:	f04f 0900 	mov.w	r9, #0
    if (pElem->ticks > ticks)
   1e640:	6863      	ldr	r3, [r4, #4]
   1e642:	429d      	cmp	r5, r3
      pElem->ticks -= ticks;
   1e644:	eba3 0205 	sub.w	r2, r3, r5
    if (pElem->ticks > ticks)
   1e648:	d211      	bcs.n	1e66e <WsfTimerUpdateTicks+0xa2>
      pElem->ticks -= ticks;
   1e64a:	6062      	str	r2, [r4, #4]
    pElem = pElem->pNext;
   1e64c:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   1e64e:	2c00      	cmp	r4, #0
   1e650:	d1f6      	bne.n	1e640 <WsfTimerUpdateTicks+0x74>
  WsfTaskUnlock();
   1e652:	f7ff fced 	bl	1e030 <WsfTaskUnlock>
        g_ui32LastTime = ui32CurrentTime;
   1e656:	603e      	str	r6, [r7, #0]
  WsfTaskLock();
   1e658:	f7ff fce0 	bl	1e01c <WsfTaskLock>
  if (wsfTimerTimerQueue.pHead == NULL)
   1e65c:	f8d8 3000 	ldr.w	r3, [r8]
   1e660:	2b00      	cmp	r3, #0
   1e662:	d1c5      	bne.n	1e5f0 <WsfTimerUpdateTicks+0x24>
}
   1e664:	b003      	add	sp, #12
   1e666:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  WsfTaskUnlock();
   1e66a:	f7ff bce1 	b.w	1e030 <WsfTaskUnlock>
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   1e66e:	7b20      	ldrb	r0, [r4, #12]
      pElem->ticks = 0;
   1e670:	f8c4 9004 	str.w	r9, [r4, #4]
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   1e674:	2102      	movs	r1, #2
   1e676:	f7ff fd3b 	bl	1e0f0 <WsfTaskSetReady>
    pElem = pElem->pNext;
   1e67a:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   1e67c:	2c00      	cmp	r4, #0
   1e67e:	d1df      	bne.n	1e640 <WsfTimerUpdateTicks+0x74>
   1e680:	e7e7      	b.n	1e652 <WsfTimerUpdateTicks+0x86>
   1e682:	bf00      	nop
   1e684:	10005e08 	.word	0x10005e08
   1e688:	10624dd3 	.word	0x10624dd3
   1e68c:	10005e18 	.word	0x10005e18
   1e690:	cccccccd 	.word	0xcccccccd
   1e694:	10005e10 	.word	0x10005e10

0001e698 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   1e698:	b40f      	push	{r0, r1, r2, r3}
   1e69a:	b500      	push	{lr}
   1e69c:	b0c3      	sub	sp, #268	; 0x10c
   1e69e:	aa44      	add	r2, sp, #272	; 0x110
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   1e6a0:	a802      	add	r0, sp, #8
{
   1e6a2:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(args, pStr);
   1e6a6:	9201      	str	r2, [sp, #4]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   1e6a8:	f002 fa7a 	bl	20ba0 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   1e6ac:	a802      	add	r0, sp, #8
   1e6ae:	f002 fef3 	bl	21498 <am_util_stdio_printf>
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   1e6b2:	28ff      	cmp	r0, #255	; 0xff
   1e6b4:	d807      	bhi.n	1e6c6 <WsfTrace+0x2e>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
  am_util_debug_printf("\n");
   1e6b6:	4806      	ldr	r0, [pc, #24]	; (1e6d0 <WsfTrace+0x38>)
   1e6b8:	f002 feee 	bl	21498 <am_util_stdio_printf>
}
   1e6bc:	b043      	add	sp, #268	; 0x10c
   1e6be:	f85d eb04 	ldr.w	lr, [sp], #4
   1e6c2:	b004      	add	sp, #16
   1e6c4:	4770      	bx	lr
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   1e6c6:	4803      	ldr	r0, [pc, #12]	; (1e6d4 <WsfTrace+0x3c>)
   1e6c8:	2183      	movs	r1, #131	; 0x83
   1e6ca:	f7ff fb8f 	bl	1ddec <WsfAssert>
   1e6ce:	e7f2      	b.n	1e6b6 <WsfTrace+0x1e>
   1e6d0:	00026ddc 	.word	0x00026ddc
   1e6d4:	00027eb0 	.word	0x00027eb0

0001e6d8 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   1e6d8:	b508      	push	{r3, lr}
  AttsAddGroup(&svcGapGroup);
   1e6da:	4804      	ldr	r0, [pc, #16]	; (1e6ec <SvcCoreAddGroup+0x14>)
   1e6dc:	f7f5 fe34 	bl	14348 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
}
   1e6e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AttsAddGroup(&svcGattGroup);
   1e6e4:	4802      	ldr	r0, [pc, #8]	; (1e6f0 <SvcCoreAddGroup+0x18>)
   1e6e6:	f7f5 be2f 	b.w	14348 <AttsAddGroup>
   1e6ea:	bf00      	nop
   1e6ec:	10002c38 	.word	0x10002c38
   1e6f0:	10002c4c 	.word	0x10002c4c

0001e6f4 <SvcCoreGapCentAddrResUpdate>:
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
  gapValCar[0] = value;
   1e6f4:	4b01      	ldr	r3, [pc, #4]	; (1e6fc <SvcCoreGapCentAddrResUpdate+0x8>)
   1e6f6:	7018      	strb	r0, [r3, #0]
}
   1e6f8:	4770      	bx	lr
   1e6fa:	bf00      	nop
   1e6fc:	10005e20 	.word	0x10005e20

0001e700 <appDiscStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscStart(dmConnId_t connId)
{
   1e700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  appDbHdl_t  hdl;
  uint8_t     status;
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];

  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1e704:	4e30      	ldr	r6, [pc, #192]	; (1e7c8 <appDiscStart+0xc8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1e706:	1e43      	subs	r3, r0, #1
  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1e708:	eb06 1403 	add.w	r4, r6, r3, lsl #4
   1e70c:	011f      	lsls	r7, r3, #4
   1e70e:	7ae3      	ldrb	r3, [r4, #11]
{
   1e710:	b083      	sub	sp, #12
  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   1e712:	b113      	cbz	r3, 1e71a <appDiscStart+0x1a>
      }

      appDiscCfgStart(connId, status);
    }
  }
}
   1e714:	b003      	add	sp, #12
   1e716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1e71a:	4605      	mov	r5, r0
   1e71c:	f000 fc58 	bl	1efd0 <AppDbGetHdl>
   1e720:	4680      	mov	r8, r0
   1e722:	b178      	cbz	r0, 1e744 <appDiscStart+0x44>
      status = AppDbGetDiscStatus(hdl);
   1e724:	f7fe ffe6 	bl	1d6f4 <AppDbGetDiscStatus>
   1e728:	4604      	mov	r4, r0
    if (status < APP_DISC_CMPL)
   1e72a:	2c03      	cmp	r4, #3
   1e72c:	d80d      	bhi.n	1e74a <appDiscStart+0x4a>
      if ((!pAppDiscCb->alreadySecure) || (pAppDiscCb->alreadySecure && !AppCheckBonded(connId)))
   1e72e:	443e      	add	r6, r7
   1e730:	7b33      	ldrb	r3, [r6, #12]
   1e732:	bb7b      	cbnz	r3, 1e794 <appDiscStart+0x94>
        (*appDiscCback)(connId, APP_DISC_READ_DATABASE_HASH);
   1e734:	4b25      	ldr	r3, [pc, #148]	; (1e7cc <appDiscStart+0xcc>)
   1e736:	2101      	movs	r1, #1
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1e738:	681b      	ldr	r3, [r3, #0]
   1e73a:	4628      	mov	r0, r5
}
   1e73c:	b003      	add	sp, #12
   1e73e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1e742:	4718      	bx	r3
      status = pAppDiscCb->cmplStatus;
   1e744:	7a64      	ldrb	r4, [r4, #9]
    if (status < APP_DISC_CMPL)
   1e746:	2c03      	cmp	r4, #3
   1e748:	d9f1      	bls.n	1e72e <appDiscStart+0x2e>
    else if (status != APP_DISC_FAILED)
   1e74a:	2c05      	cmp	r4, #5
   1e74c:	d0e2      	beq.n	1e714 <appDiscStart+0x14>
      if (hdl != APP_DB_HDL_NONE && pAppDiscCb->pHdlList != NULL)
   1e74e:	f1b8 0f00 	cmp.w	r8, #0
   1e752:	d014      	beq.n	1e77e <appDiscStart+0x7e>
   1e754:	eb06 0907 	add.w	r9, r6, r7
   1e758:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1e75c:	b17b      	cbz	r3, 1e77e <appDiscStart+0x7e>
        if (AppDbIsCacheCheckedByHash(hdl))
   1e75e:	4640      	mov	r0, r8
   1e760:	f7fe ff86 	bl	1d670 <AppDbIsCacheCheckedByHash>
   1e764:	bb08      	cbnz	r0, 1e7aa <appDiscStart+0xaa>
          memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl), (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1e766:	4640      	mov	r0, r8
   1e768:	f8d9 8004 	ldr.w	r8, [r9, #4]
   1e76c:	f7fe ffca 	bl	1d704 <AppDbGetHdlList>
   1e770:	f899 200a 	ldrb.w	r2, [r9, #10]
   1e774:	4601      	mov	r1, r0
   1e776:	0052      	lsls	r2, r2, #1
   1e778:	4640      	mov	r0, r8
   1e77a:	f7ed fcc1 	bl	c100 <memcpy>
  if (status < APP_DISC_CFG_CMPL)
   1e77e:	2c07      	cmp	r4, #7
   1e780:	d910      	bls.n	1e7a4 <appDiscStart+0xa4>
  else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   1e782:	2c08      	cmp	r4, #8
   1e784:	d1c6      	bne.n	1e714 <appDiscStart+0x14>
   1e786:	443e      	add	r6, r7
   1e788:	7a33      	ldrb	r3, [r6, #8]
   1e78a:	2b00      	cmp	r3, #0
   1e78c:	d1c2      	bne.n	1e714 <appDiscStart+0x14>
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1e78e:	4b0f      	ldr	r3, [pc, #60]	; (1e7cc <appDiscStart+0xcc>)
   1e790:	2107      	movs	r1, #7
   1e792:	e7d1      	b.n	1e738 <appDiscStart+0x38>
      if ((!pAppDiscCb->alreadySecure) || (pAppDiscCb->alreadySecure && !AppCheckBonded(connId)))
   1e794:	4628      	mov	r0, r5
   1e796:	f000 fb93 	bl	1eec0 <AppCheckBonded>
   1e79a:	2800      	cmp	r0, #0
   1e79c:	d0ca      	beq.n	1e734 <appDiscStart+0x34>
        (*appDiscCback)(connId, APP_DISC_START);
   1e79e:	4b0b      	ldr	r3, [pc, #44]	; (1e7cc <appDiscStart+0xcc>)
   1e7a0:	2103      	movs	r1, #3
   1e7a2:	e7c9      	b.n	1e738 <appDiscStart+0x38>
    (*appDiscCback)(connId, APP_DISC_CFG_START);
   1e7a4:	4b09      	ldr	r3, [pc, #36]	; (1e7cc <appDiscStart+0xcc>)
   1e7a6:	2106      	movs	r1, #6
   1e7a8:	e7c6      	b.n	1e738 <appDiscStart+0x38>
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1e7aa:	4b09      	ldr	r3, [pc, #36]	; (1e7d0 <appDiscStart+0xd0>)
   1e7ac:	2200      	movs	r2, #0
          pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1e7ae:	2103      	movs	r1, #3
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1e7b0:	e9cd 3200 	strd	r3, r2, [sp]
   1e7b4:	4628      	mov	r0, r5
          pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1e7b6:	f889 100b 	strb.w	r1, [r9, #11]
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1e7ba:	2302      	movs	r3, #2
   1e7bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e7c0:	2101      	movs	r1, #1
   1e7c2:	f7f4 fe5f 	bl	13484 <AttcReadByTypeReq>
          return;
   1e7c6:	e7a5      	b.n	1e714 <appDiscStart+0x14>
   1e7c8:	10005e40 	.word	0x10005e40
   1e7cc:	10005e70 	.word	0x10005e70
   1e7d0:	00026828 	.word	0x00026828

0001e7d4 <appDiscRestartDiscovery>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscRestartDiscovery(dmConnId_t connId)
{
   1e7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1e7d8:	1e45      	subs	r5, r0, #1
  appDbHdl_t  dbHdl;

  /* otherwise initialize discovery and configuration status */
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1e7da:	012d      	lsls	r5, r5, #4
   1e7dc:	4c19      	ldr	r4, [pc, #100]	; (1e844 <appDiscRestartDiscovery+0x70>)
   1e7de:	f105 0308 	add.w	r3, r5, #8
   1e7e2:	2700      	movs	r7, #0
   1e7e4:	52e7      	strh	r7, [r4, r3]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
  pAppDiscCb->secRequired = FALSE;
   1e7e6:	4423      	add	r3, r4
  pAppDiscCb->scPending = FALSE;

  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   1e7e8:	eb04 0805 	add.w	r8, r4, r5
  pAppDiscCb->secRequired = FALSE;
   1e7ec:	f8a3 7005 	strh.w	r7, [r3, #5]
{
   1e7f0:	4606      	mov	r6, r0
  if (pAppDiscCb->pHdlList != NULL)
   1e7f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1e7f6:	b190      	cbz	r0, 1e81e <appDiscRestartDiscovery+0x4a>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1e7f8:	f898 200a 	ldrb.w	r2, [r8, #10]
   1e7fc:	4639      	mov	r1, r7
   1e7fe:	0052      	lsls	r2, r2, #1
   1e800:	f004 fd9c 	bl	2333c <memset>

    /* clear stored discovery status and handle list */
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1e804:	4630      	mov	r0, r6
   1e806:	f000 fbe3 	bl	1efd0 <AppDbGetHdl>
   1e80a:	4681      	mov	r9, r0
   1e80c:	b138      	cbz	r0, 1e81e <appDiscRestartDiscovery+0x4a>
    {
      AppDbSetDiscStatus(dbHdl, APP_DISC_INIT);
   1e80e:	4639      	mov	r1, r7
   1e810:	f7fe ff74 	bl	1d6fc <AppDbSetDiscStatus>
      AppDbSetHdlList(dbHdl, pAppDiscCb->pHdlList);
   1e814:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1e818:	4648      	mov	r0, r9
   1e81a:	f7fe ff75 	bl	1d708 <AppDbSetHdlList>
    }
  }

  /* if configuration in progress */
  if (pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS)
   1e81e:	442c      	add	r4, r5
   1e820:	7ae3      	ldrb	r3, [r4, #11]
   1e822:	2b02      	cmp	r3, #2
   1e824:	d00a      	beq.n	1e83c <appDiscRestartDiscovery+0x68>
  {
    /* if not waiting for security or connection is already secure, then
    * initiate discovery now; otherwise discovery will be initiated after
    * security is done
    */
    if (!pAppDiscCfg->waitForSec || pAppDiscCb->alreadySecure)
   1e826:	4b08      	ldr	r3, [pc, #32]	; (1e848 <appDiscRestartDiscovery+0x74>)
   1e828:	681b      	ldr	r3, [r3, #0]
   1e82a:	781b      	ldrb	r3, [r3, #0]
   1e82c:	b10b      	cbz	r3, 1e832 <appDiscRestartDiscovery+0x5e>
   1e82e:	7b23      	ldrb	r3, [r4, #12]
   1e830:	b133      	cbz	r3, 1e840 <appDiscRestartDiscovery+0x6c>
    {
      appDiscStart(connId);
   1e832:	4630      	mov	r0, r6
    }
  }
}
   1e834:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      appDiscStart(connId);
   1e838:	f7ff bf62 	b.w	1e700 <appDiscStart>
    pAppDiscCb->scPending = TRUE;
   1e83c:	2301      	movs	r3, #1
   1e83e:	73a3      	strb	r3, [r4, #14]
}
   1e840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e844:	10005e40 	.word	0x10005e40
   1e848:	10005ee8 	.word	0x10005ee8

0001e84c <AppDiscProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcDmMsg(dmEvt_t *pMsg)
{
   1e84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(pMsg->hdr.event)
   1e850:	7883      	ldrb	r3, [r0, #2]
   1e852:	3b27      	subs	r3, #39	; 0x27
{
   1e854:	b082      	sub	sp, #8
   1e856:	4604      	mov	r4, r0
  switch(pMsg->hdr.event)
   1e858:	2b05      	cmp	r3, #5
   1e85a:	d818      	bhi.n	1e88e <AppDiscProcDmMsg+0x42>
   1e85c:	e8df f003 	tbb	[pc, r3]
   1e860:	59170337 	.word	0x59170337
   1e864:	1a9b      	.short	0x1a9b
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1e866:	7800      	ldrb	r0, [r0, #0]
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1e868:	4d62      	ldr	r5, [pc, #392]	; (1e9f4 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1e86a:	1e43      	subs	r3, r0, #1
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1e86c:	eb05 1203 	add.w	r2, r5, r3, lsl #4
   1e870:	2600      	movs	r6, #0
   1e872:	72d6      	strb	r6, [r2, #11]
   1e874:	011c      	lsls	r4, r3, #4
  if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   1e876:	f000 fbab 	bl	1efd0 <AppDbGetHdl>
   1e87a:	b110      	cbz	r0, 1e882 <AppDiscProcDmMsg+0x36>
    AppDbSetDiscStatus(hdl, APP_DISC_INIT);
   1e87c:	4631      	mov	r1, r6
   1e87e:	f7fe ff3d 	bl	1d6fc <AppDbSetDiscStatus>
  if (pAppDiscCb->pDiscCb != NULL)
   1e882:	5928      	ldr	r0, [r5, r4]
   1e884:	b118      	cbz	r0, 1e88e <AppDiscProcDmMsg+0x42>
    WsfBufFree(pAppDiscCb->pDiscCb);
   1e886:	f7ff fb57 	bl	1df38 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1e88a:	2300      	movs	r3, #0
   1e88c:	512b      	str	r3, [r5, r4]
      break;

    default:
      break;
  }
}
   1e88e:	b002      	add	sp, #8
   1e890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pMsg->encryptInd.usingLtk)
   1e894:	7903      	ldrb	r3, [r0, #4]
   1e896:	2b00      	cmp	r3, #0
   1e898:	d0f9      	beq.n	1e88e <AppDiscProcDmMsg+0x42>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1e89a:	7800      	ldrb	r0, [r0, #0]
    if (pAppDiscCb->alreadySecure)
   1e89c:	4d55      	ldr	r5, [pc, #340]	; (1e9f4 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1e89e:	1e43      	subs	r3, r0, #1
    if (pAppDiscCb->alreadySecure)
   1e8a0:	eb05 1203 	add.w	r2, r5, r3, lsl #4
   1e8a4:	011c      	lsls	r4, r3, #4
   1e8a6:	7b13      	ldrb	r3, [r2, #12]
   1e8a8:	2b00      	cmp	r3, #0
   1e8aa:	d1f0      	bne.n	1e88e <AppDiscProcDmMsg+0x42>
    if (pAppDiscCfg->waitForSec)
   1e8ac:	4b52      	ldr	r3, [pc, #328]	; (1e9f8 <AppDiscProcDmMsg+0x1ac>)
   1e8ae:	681b      	ldr	r3, [r3, #0]
   1e8b0:	781b      	ldrb	r3, [r3, #0]
   1e8b2:	2b00      	cmp	r3, #0
   1e8b4:	f040 8093 	bne.w	1e9de <AppDiscProcDmMsg+0x192>
    else if (pAppDiscCb->secRequired)
   1e8b8:	7b51      	ldrb	r1, [r2, #13]
   1e8ba:	b121      	cbz	r1, 1e8c6 <AppDiscProcDmMsg+0x7a>
      if (pAppDiscCb->pDiscCb != NULL)
   1e8bc:	5929      	ldr	r1, [r5, r4]
      pAppDiscCb->secRequired = FALSE;
   1e8be:	7353      	strb	r3, [r2, #13]
      if (pAppDiscCb->pDiscCb != NULL)
   1e8c0:	b109      	cbz	r1, 1e8c6 <AppDiscProcDmMsg+0x7a>
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1e8c2:	f7f3 fe5f 	bl	12584 <AttcDiscConfigResume>
    pAppDiscCb->alreadySecure = TRUE;
   1e8c6:	4425      	add	r5, r4
   1e8c8:	2301      	movs	r3, #1
   1e8ca:	732b      	strb	r3, [r5, #12]
}
   1e8cc:	e7df      	b.n	1e88e <AppDiscProcDmMsg+0x42>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1e8ce:	7800      	ldrb	r0, [r0, #0]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1e8d0:	4b48      	ldr	r3, [pc, #288]	; (1e9f4 <AppDiscProcDmMsg+0x1a8>)
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1e8d2:	4e4a      	ldr	r6, [pc, #296]	; (1e9fc <AppDiscProcDmMsg+0x1b0>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1e8d4:	1e45      	subs	r5, r0, #1
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1e8d6:	012d      	lsls	r5, r5, #4
   1e8d8:	f105 0208 	add.w	r2, r5, #8
  pAppDiscCb->alreadySecure = FALSE;
   1e8dc:	1899      	adds	r1, r3, r2
  pAppDiscCb->scPending = FALSE;
   1e8de:	441d      	add	r5, r3
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1e8e0:	6837      	ldr	r7, [r6, #0]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   1e8e2:	2600      	movs	r6, #0
   1e8e4:	529e      	strh	r6, [r3, r2]
  pAppDiscCb->alreadySecure = FALSE;
   1e8e6:	808e      	strh	r6, [r1, #4]
  pAppDiscCb->scPending = FALSE;
   1e8e8:	73ae      	strb	r6, [r5, #14]
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   1e8ea:	4631      	mov	r1, r6
   1e8ec:	47b8      	blx	r7
  if (pAppDiscCb->pHdlList != NULL)
   1e8ee:	6868      	ldr	r0, [r5, #4]
   1e8f0:	b120      	cbz	r0, 1e8fc <AppDiscProcDmMsg+0xb0>
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   1e8f2:	7aaa      	ldrb	r2, [r5, #10]
   1e8f4:	4631      	mov	r1, r6
   1e8f6:	0052      	lsls	r2, r2, #1
   1e8f8:	f004 fd20 	bl	2333c <memset>
  if (!pAppDiscCfg->waitForSec)
   1e8fc:	4b3e      	ldr	r3, [pc, #248]	; (1e9f8 <AppDiscProcDmMsg+0x1ac>)
   1e8fe:	681b      	ldr	r3, [r3, #0]
   1e900:	781b      	ldrb	r3, [r3, #0]
   1e902:	2b00      	cmp	r3, #0
   1e904:	d1c3      	bne.n	1e88e <AppDiscProcDmMsg+0x42>
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1e906:	7820      	ldrb	r0, [r4, #0]
}
   1e908:	b002      	add	sp, #8
   1e90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1e90e:	f7ff bef7 	b.w	1e700 <appDiscStart>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1e912:	7800      	ldrb	r0, [r0, #0]
  if (pAppDiscCb->alreadySecure)
   1e914:	4d37      	ldr	r5, [pc, #220]	; (1e9f4 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   1e916:	1e43      	subs	r3, r0, #1
  if (pAppDiscCb->alreadySecure)
   1e918:	011e      	lsls	r6, r3, #4
   1e91a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   1e91e:	f893 800c 	ldrb.w	r8, [r3, #12]
   1e922:	f1b8 0f00 	cmp.w	r8, #0
   1e926:	d1b2      	bne.n	1e88e <AppDiscProcDmMsg+0x42>
  if (((hdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE) &&
   1e928:	f000 fb52 	bl	1efd0 <AppDbGetHdl>
   1e92c:	4607      	mov	r7, r0
   1e92e:	b180      	cbz	r0, 1e952 <AppDiscProcDmMsg+0x106>
      AppCheckBonded((dmConnId_t) pMsg->hdr.param) &&
   1e930:	7820      	ldrb	r0, [r4, #0]
   1e932:	f000 fac5 	bl	1eec0 <AppCheckBonded>
  if (((hdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE) &&
   1e936:	b160      	cbz	r0, 1e952 <AppDiscProcDmMsg+0x106>
      AppDbIsCacheCheckedByHash(hdl))
   1e938:	4638      	mov	r0, r7
   1e93a:	f7fe fe99 	bl	1d670 <AppDbIsCacheCheckedByHash>
      AppCheckBonded((dmConnId_t) pMsg->hdr.param) &&
   1e93e:	b140      	cbz	r0, 1e952 <AppDiscProcDmMsg+0x106>
    AppDbSetCacheByHash(appConnCb[pMsg->hdr.param - 1].dbHdl, FALSE);
   1e940:	4b2f      	ldr	r3, [pc, #188]	; (1ea00 <AppDiscProcDmMsg+0x1b4>)
   1e942:	8822      	ldrh	r2, [r4, #0]
   1e944:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1e948:	4641      	mov	r1, r8
   1e94a:	f853 0c20 	ldr.w	r0, [r3, #-32]
   1e94e:	f7fe fe93 	bl	1d678 <AppDbSetCacheByHash>
  if (AppCheckBonded((dmConnId_t) pMsg->hdr.param) && (pAppDiscCb->cmplStatus != APP_DISC_INIT))
   1e952:	7820      	ldrb	r0, [r4, #0]
   1e954:	f000 fab4 	bl	1eec0 <AppCheckBonded>
   1e958:	2800      	cmp	r0, #0
   1e95a:	d037      	beq.n	1e9cc <AppDiscProcDmMsg+0x180>
   1e95c:	eb05 0806 	add.w	r8, r5, r6
   1e960:	f898 1009 	ldrb.w	r1, [r8, #9]
   1e964:	b391      	cbz	r1, 1e9cc <AppDiscProcDmMsg+0x180>
    if (hdl != APP_DB_HDL_NONE)
   1e966:	b147      	cbz	r7, 1e97a <AppDiscProcDmMsg+0x12e>
      AppDbSetDiscStatus(hdl, pAppDiscCb->cmplStatus);
   1e968:	4638      	mov	r0, r7
   1e96a:	f7fe fec7 	bl	1d6fc <AppDbSetDiscStatus>
      if (pAppDiscCb->cmplStatus == APP_DISC_CMPL || pAppDiscCb->cmplStatus == APP_DISC_CFG_CMPL)
   1e96e:	f898 3009 	ldrb.w	r3, [r8, #9]
   1e972:	2b04      	cmp	r3, #4
   1e974:	d036      	beq.n	1e9e4 <AppDiscProcDmMsg+0x198>
   1e976:	2b08      	cmp	r3, #8
   1e978:	d034      	beq.n	1e9e4 <AppDiscProcDmMsg+0x198>
    if (pAppDiscCb->secRequired)
   1e97a:	19ab      	adds	r3, r5, r6
   1e97c:	7b5a      	ldrb	r2, [r3, #13]
   1e97e:	b132      	cbz	r2, 1e98e <AppDiscProcDmMsg+0x142>
      if (pAppDiscCb->pDiscCb != NULL)
   1e980:	59a9      	ldr	r1, [r5, r6]
      pAppDiscCb->secRequired = FALSE;
   1e982:	2200      	movs	r2, #0
   1e984:	735a      	strb	r2, [r3, #13]
      if (pAppDiscCb->pDiscCb != NULL)
   1e986:	b111      	cbz	r1, 1e98e <AppDiscProcDmMsg+0x142>
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1e988:	7820      	ldrb	r0, [r4, #0]
   1e98a:	f7f3 fdfb 	bl	12584 <AttcDiscConfigResume>
  pAppDiscCb->alreadySecure = TRUE;
   1e98e:	4435      	add	r5, r6
   1e990:	2301      	movs	r3, #1
   1e992:	732b      	strb	r3, [r5, #12]
   1e994:	e77b      	b.n	1e88e <AppDiscProcDmMsg+0x42>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   1e996:	7800      	ldrb	r0, [r0, #0]
  if (pAppDiscCb->alreadySecure)
   1e998:	4916      	ldr	r1, [pc, #88]	; (1e9f4 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   1e99a:	1e43      	subs	r3, r0, #1
  if (pAppDiscCb->alreadySecure)
   1e99c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1e9a0:	7b0b      	ldrb	r3, [r1, #12]
   1e9a2:	2b00      	cmp	r3, #0
   1e9a4:	f47f af73 	bne.w	1e88e <AppDiscProcDmMsg+0x42>
  if (pAppDiscCfg->readDbHash)
   1e9a8:	4a13      	ldr	r2, [pc, #76]	; (1e9f8 <AppDiscProcDmMsg+0x1ac>)
   1e9aa:	6812      	ldr	r2, [r2, #0]
   1e9ac:	7852      	ldrb	r2, [r2, #1]
   1e9ae:	2a00      	cmp	r2, #0
   1e9b0:	f43f af6d 	beq.w	1e88e <AppDiscProcDmMsg+0x42>
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1e9b4:	4a13      	ldr	r2, [pc, #76]	; (1ea04 <AppDiscProcDmMsg+0x1b8>)
    pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1e9b6:	2403      	movs	r4, #3
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1e9b8:	e9cd 2300 	strd	r2, r3, [sp]
    pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1e9bc:	72cc      	strb	r4, [r1, #11]
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1e9be:	2302      	movs	r3, #2
   1e9c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e9c4:	2101      	movs	r1, #1
   1e9c6:	f7f4 fd5d 	bl	13484 <AttcReadByTypeReq>
   1e9ca:	e760      	b.n	1e88e <AppDiscProcDmMsg+0x42>
  if (pAppDiscCfg->waitForSec)
   1e9cc:	4b0a      	ldr	r3, [pc, #40]	; (1e9f8 <AppDiscProcDmMsg+0x1ac>)
   1e9ce:	681b      	ldr	r3, [r3, #0]
   1e9d0:	781b      	ldrb	r3, [r3, #0]
   1e9d2:	2b00      	cmp	r3, #0
   1e9d4:	d0db      	beq.n	1e98e <AppDiscProcDmMsg+0x142>
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   1e9d6:	7820      	ldrb	r0, [r4, #0]
   1e9d8:	f7ff fe92 	bl	1e700 <appDiscStart>
   1e9dc:	e7d7      	b.n	1e98e <AppDiscProcDmMsg+0x142>
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1e9de:	f7ff fe8f 	bl	1e700 <appDiscStart>
   1e9e2:	e770      	b.n	1e8c6 <AppDiscProcDmMsg+0x7a>
        if (pAppDiscCb->pHdlList != NULL)
   1e9e4:	19ab      	adds	r3, r5, r6
   1e9e6:	6859      	ldr	r1, [r3, #4]
   1e9e8:	2900      	cmp	r1, #0
   1e9ea:	d0c6      	beq.n	1e97a <AppDiscProcDmMsg+0x12e>
          AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1e9ec:	4638      	mov	r0, r7
   1e9ee:	f7fe fe8b 	bl	1d708 <AppDbSetHdlList>
   1e9f2:	e7c2      	b.n	1e97a <AppDiscProcDmMsg+0x12e>
   1e9f4:	10005e40 	.word	0x10005e40
   1e9f8:	10005ee8 	.word	0x10005ee8
   1e9fc:	10005e70 	.word	0x10005e70
   1ea00:	10005e7c 	.word	0x10005e7c
   1ea04:	00026828 	.word	0x00026828

0001ea08 <AppDiscProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcAttMsg(attEvt_t *pMsg)
{
   1ea08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea0c:	4604      	mov	r4, r0
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   1ea0e:	7800      	ldrb	r0, [r0, #0]
  uint8_t status;

  /* Check status */
  if (pMsg->hdr.status == ATT_ERR_DATABASE_OUT_OF_SYNC)
   1ea10:	78e3      	ldrb	r3, [r4, #3]
   1ea12:	2b12      	cmp	r3, #18
{
   1ea14:	b082      	sub	sp, #8
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   1ea16:	f100 35ff 	add.w	r5, r0, #4294967295
  if (pMsg->hdr.status == ATT_ERR_DATABASE_OUT_OF_SYNC)
   1ea1a:	d032      	beq.n	1ea82 <AppDiscProcAttMsg+0x7a>
  {
    /* Restart discovery as cached handle list is out of sync with server's database. */
    appDiscRestartDiscovery((dmConnId_t)pMsg->hdr.param);
  }

  if (pAppDiscCb->inProgress == APP_DISC_READ_DBH_IN_PROGRESS)
   1ea1c:	4e6e      	ldr	r6, [pc, #440]	; (1ebd8 <AppDiscProcAttMsg+0x1d0>)
   1ea1e:	012f      	lsls	r7, r5, #4
   1ea20:	eb06 1505 	add.w	r5, r6, r5, lsl #4
   1ea24:	7ae9      	ldrb	r1, [r5, #11]
   1ea26:	2903      	cmp	r1, #3
   1ea28:	d01c      	beq.n	1ea64 <AppDiscProcAttMsg+0x5c>
          appDiscCfgStart(connId, status);
        }
      }
    }
  }
  else if (pAppDiscCb->inProgress == APP_DISC_SVC_DISC_IN_PROGRESS)
   1ea2a:	2901      	cmp	r1, #1
   1ea2c:	d004      	beq.n	1ea38 <AppDiscProcAttMsg+0x30>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
      }
    }
  }
  /* characteristic configuration */
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1ea2e:	2902      	cmp	r1, #2
   1ea30:	d031      	beq.n	1ea96 <AppDiscProcAttMsg+0x8e>
        /* notify application of config success */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
      }
    }
  }
}
   1ea32:	b002      	add	sp, #8
   1ea34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pMsg->hdr.event == ATTC_FIND_BY_TYPE_VALUE_RSP)
   1ea38:	78a3      	ldrb	r3, [r4, #2]
   1ea3a:	2b03      	cmp	r3, #3
   1ea3c:	d049      	beq.n	1ead2 <AppDiscProcAttMsg+0xca>
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   1ea3e:	2b04      	cmp	r3, #4
   1ea40:	d001      	beq.n	1ea46 <AppDiscProcAttMsg+0x3e>
   1ea42:	2b02      	cmp	r3, #2
   1ea44:	d1f5      	bne.n	1ea32 <AppDiscProcAttMsg+0x2a>
      status = AttcDiscCharCmpl(pAppDiscCb->pDiscCb, pMsg);
   1ea46:	4621      	mov	r1, r4
   1ea48:	59f0      	ldr	r0, [r6, r7]
   1ea4a:	f7f3 fb81 	bl	12150 <AttcDiscCharCmpl>
   1ea4e:	4605      	mov	r5, r0
      APP_TRACE_INFO1("AttcDiscCharCmpl status 0x%02x", status);
   1ea50:	4629      	mov	r1, r5
   1ea52:	4862      	ldr	r0, [pc, #392]	; (1ebdc <AppDiscProcAttMsg+0x1d4>)
   1ea54:	f7ff fe20 	bl	1e698 <WsfTrace>
      if (status == ATT_SUCCESS)
   1ea58:	b9b5      	cbnz	r5, 1ea88 <AppDiscProcAttMsg+0x80>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CMPL);
   1ea5a:	4b61      	ldr	r3, [pc, #388]	; (1ebe0 <AppDiscProcAttMsg+0x1d8>)
   1ea5c:	7820      	ldrb	r0, [r4, #0]
   1ea5e:	681b      	ldr	r3, [r3, #0]
   1ea60:	2104      	movs	r1, #4
   1ea62:	e00a      	b.n	1ea7a <AppDiscProcAttMsg+0x72>
    if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP)
   1ea64:	78a3      	ldrb	r3, [r4, #2]
   1ea66:	2b04      	cmp	r3, #4
   1ea68:	d1e3      	bne.n	1ea32 <AppDiscProcAttMsg+0x2a>
      if (pMsg->hdr.status != ATT_SUCCESS)
   1ea6a:	78e3      	ldrb	r3, [r4, #3]
      dmConnId_t connId = (dmConnId_t)pMsg->hdr.param;
   1ea6c:	f894 8000 	ldrb.w	r8, [r4]
      if (pMsg->hdr.status != ATT_SUCCESS)
   1ea70:	2b00      	cmp	r3, #0
   1ea72:	d04d      	beq.n	1eb10 <AppDiscProcAttMsg+0x108>
        (*appDiscCback)(connId, APP_DISC_START);
   1ea74:	4b5a      	ldr	r3, [pc, #360]	; (1ebe0 <AppDiscProcAttMsg+0x1d8>)
   1ea76:	681b      	ldr	r3, [r3, #0]
   1ea78:	4640      	mov	r0, r8
}
   1ea7a:	b002      	add	sp, #8
   1ea7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   1ea80:	4718      	bx	r3
    appDiscRestartDiscovery((dmConnId_t)pMsg->hdr.param);
   1ea82:	f7ff fea7 	bl	1e7d4 <appDiscRestartDiscovery>
   1ea86:	e7c9      	b.n	1ea1c <AppDiscProcAttMsg+0x14>
      else if (status != ATT_CONTINUING)
   1ea88:	2d78      	cmp	r5, #120	; 0x78
   1ea8a:	d0d2      	beq.n	1ea32 <AppDiscProcAttMsg+0x2a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   1ea8c:	4b54      	ldr	r3, [pc, #336]	; (1ebe0 <AppDiscProcAttMsg+0x1d8>)
   1ea8e:	7820      	ldrb	r0, [r4, #0]
   1ea90:	681b      	ldr	r3, [r3, #0]
   1ea92:	2105      	movs	r1, #5
   1ea94:	e7f1      	b.n	1ea7a <AppDiscProcAttMsg+0x72>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1ea96:	78a3      	ldrb	r3, [r4, #2]
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   1ea98:	2b05      	cmp	r3, #5
   1ea9a:	d001      	beq.n	1eaa0 <AppDiscProcAttMsg+0x98>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   1ea9c:	2b09      	cmp	r3, #9
   1ea9e:	d1c8      	bne.n	1ea32 <AppDiscProcAttMsg+0x2a>
    if (pAppDiscCb->scPending)
   1eaa0:	19f3      	adds	r3, r6, r7
   1eaa2:	7b9a      	ldrb	r2, [r3, #14]
   1eaa4:	2a00      	cmp	r2, #0
   1eaa6:	d151      	bne.n	1eb4c <AppDiscProcAttMsg+0x144>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1eaa8:	78e3      	ldrb	r3, [r4, #3]
   1eaaa:	2b05      	cmp	r3, #5
   1eaac:	d023      	beq.n	1eaf6 <AppDiscProcAttMsg+0xee>
   1eaae:	2b0f      	cmp	r3, #15
   1eab0:	d021      	beq.n	1eaf6 <AppDiscProcAttMsg+0xee>
      status = AttcDiscConfigCmpl((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1eab2:	59f1      	ldr	r1, [r6, r7]
   1eab4:	7820      	ldrb	r0, [r4, #0]
   1eab6:	f7f3 fd39 	bl	1252c <AttcDiscConfigCmpl>
   1eaba:	4605      	mov	r5, r0
      APP_TRACE_INFO1("AttcDiscConfigCmpl status 0x%02x", status);
   1eabc:	4629      	mov	r1, r5
   1eabe:	4849      	ldr	r0, [pc, #292]	; (1ebe4 <AppDiscProcAttMsg+0x1dc>)
   1eac0:	f7ff fdea 	bl	1e698 <WsfTrace>
      if (status != ATT_CONTINUING)
   1eac4:	2d78      	cmp	r5, #120	; 0x78
   1eac6:	d0b4      	beq.n	1ea32 <AppDiscProcAttMsg+0x2a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   1eac8:	4b45      	ldr	r3, [pc, #276]	; (1ebe0 <AppDiscProcAttMsg+0x1d8>)
   1eaca:	7820      	ldrb	r0, [r4, #0]
   1eacc:	681b      	ldr	r3, [r3, #0]
   1eace:	2108      	movs	r1, #8
   1ead0:	e7d3      	b.n	1ea7a <AppDiscProcAttMsg+0x72>
      status = AttcDiscServiceCmpl(pAppDiscCb->pDiscCb, pMsg);
   1ead2:	4621      	mov	r1, r4
   1ead4:	59f0      	ldr	r0, [r6, r7]
   1ead6:	f7f3 fafd 	bl	120d4 <AttcDiscServiceCmpl>
   1eada:	4605      	mov	r5, r0
      APP_TRACE_INFO1("AttcDiscServiceCmpl status 0x%02x", status);
   1eadc:	4601      	mov	r1, r0
   1eade:	4842      	ldr	r0, [pc, #264]	; (1ebe8 <AppDiscProcAttMsg+0x1e0>)
   1eae0:	f7ff fdda 	bl	1e698 <WsfTrace>
      if (status == ATT_SUCCESS)
   1eae4:	2d00      	cmp	r5, #0
   1eae6:	d1cf      	bne.n	1ea88 <AppDiscProcAttMsg+0x80>
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1eae8:	59f1      	ldr	r1, [r6, r7]
   1eaea:	7820      	ldrb	r0, [r4, #0]
}
   1eaec:	b002      	add	sp, #8
   1eaee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   1eaf2:	f7f3 bb19 	b.w	12128 <AttcDiscCharStart>
             (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   1eaf6:	7820      	ldrb	r0, [r4, #0]
   1eaf8:	f7ee fc80 	bl	d3fc <DmConnSecLevel>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   1eafc:	2800      	cmp	r0, #0
   1eafe:	d1d8      	bne.n	1eab2 <AppDiscProcAttMsg+0xaa>
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   1eb00:	4b37      	ldr	r3, [pc, #220]	; (1ebe0 <AppDiscProcAttMsg+0x1d8>)
   1eb02:	7820      	ldrb	r0, [r4, #0]
   1eb04:	681b      	ldr	r3, [r3, #0]
      pAppDiscCb->secRequired = TRUE;
   1eb06:	443e      	add	r6, r7
   1eb08:	2201      	movs	r2, #1
   1eb0a:	7372      	strb	r2, [r6, #13]
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   1eb0c:	2102      	movs	r1, #2
   1eb0e:	e7b4      	b.n	1ea7a <AppDiscProcAttMsg+0x72>
        pAppDiscCb->inProgress = APP_DISC_IDLE;
   1eb10:	72eb      	strb	r3, [r5, #11]
        if ((hdl = AppDbGetHdl(connId)) == APP_DB_HDL_NONE)
   1eb12:	4640      	mov	r0, r8
   1eb14:	f000 fa5c 	bl	1efd0 <AppDbGetHdl>
   1eb18:	4605      	mov	r5, r0
   1eb1a:	2800      	cmp	r0, #0
   1eb1c:	d043      	beq.n	1eba6 <AppDiscProcAttMsg+0x19e>
        if (memcmp(AppDbGetPeerDbHash(hdl), pMsg->pValue + 3, ATT_DATABASE_HASH_LEN))
   1eb1e:	4628      	mov	r0, r5
   1eb20:	f7fe fd96 	bl	1d650 <AppDbGetPeerDbHash>
   1eb24:	6861      	ldr	r1, [r4, #4]
   1eb26:	2210      	movs	r2, #16
   1eb28:	3103      	adds	r1, #3
   1eb2a:	9101      	str	r1, [sp, #4]
   1eb2c:	f004 fbd4 	bl	232d8 <memcmp>
   1eb30:	b1a8      	cbz	r0, 1eb5e <AppDiscProcAttMsg+0x156>
          AppDbSetPeerDbHash(hdl, pMsg->pValue + 3);
   1eb32:	9901      	ldr	r1, [sp, #4]
   1eb34:	4628      	mov	r0, r5
   1eb36:	f7fe fd8d 	bl	1d654 <AppDbSetPeerDbHash>
          AppDbSetCacheByHash(hdl, TRUE);
   1eb3a:	2101      	movs	r1, #1
   1eb3c:	4628      	mov	r0, r5
   1eb3e:	f7fe fd9b 	bl	1d678 <AppDbSetCacheByHash>
          (*appDiscCback)(connId, APP_DISC_START);
   1eb42:	4b27      	ldr	r3, [pc, #156]	; (1ebe0 <AppDiscProcAttMsg+0x1d8>)
   1eb44:	2103      	movs	r1, #3
   1eb46:	681b      	ldr	r3, [r3, #0]
   1eb48:	4640      	mov	r0, r8
   1eb4a:	e796      	b.n	1ea7a <AppDiscProcAttMsg+0x72>
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1eb4c:	7820      	ldrb	r0, [r4, #0]
      pAppDiscCb->scPending = FALSE;
   1eb4e:	2200      	movs	r2, #0
   1eb50:	739a      	strb	r2, [r3, #14]
      pAppDiscCb->inProgress = APP_DISC_IDLE;
   1eb52:	72da      	strb	r2, [r3, #11]
}
   1eb54:	b002      	add	sp, #8
   1eb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   1eb5a:	f7ff bdd1 	b.w	1e700 <appDiscStart>
          memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl),
   1eb5e:	4437      	add	r7, r6
   1eb60:	4628      	mov	r0, r5
   1eb62:	687c      	ldr	r4, [r7, #4]
   1eb64:	f7fe fdce 	bl	1d704 <AppDbGetHdlList>
   1eb68:	7aba      	ldrb	r2, [r7, #10]
   1eb6a:	4601      	mov	r1, r0
   1eb6c:	0052      	lsls	r2, r2, #1
   1eb6e:	4620      	mov	r0, r4
   1eb70:	f7ed fac6 	bl	c100 <memcpy>
          status = AppDbGetDiscStatus(hdl);
   1eb74:	4628      	mov	r0, r5
   1eb76:	f7fe fdbd 	bl	1d6f4 <AppDbGetDiscStatus>
  if (status < APP_DISC_CFG_CMPL)
   1eb7a:	2807      	cmp	r0, #7
   1eb7c:	d804      	bhi.n	1eb88 <AppDiscProcAttMsg+0x180>
    (*appDiscCback)(connId, APP_DISC_CFG_START);
   1eb7e:	4b18      	ldr	r3, [pc, #96]	; (1ebe0 <AppDiscProcAttMsg+0x1d8>)
   1eb80:	2106      	movs	r1, #6
   1eb82:	681b      	ldr	r3, [r3, #0]
   1eb84:	4640      	mov	r0, r8
   1eb86:	e778      	b.n	1ea7a <AppDiscProcAttMsg+0x72>
  else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   1eb88:	2808      	cmp	r0, #8
   1eb8a:	f47f af52 	bne.w	1ea32 <AppDiscProcAttMsg+0x2a>
   1eb8e:	eb06 1608 	add.w	r6, r6, r8, lsl #4
   1eb92:	f816 3c08 	ldrb.w	r3, [r6, #-8]
   1eb96:	2b00      	cmp	r3, #0
   1eb98:	f47f af4b 	bne.w	1ea32 <AppDiscProcAttMsg+0x2a>
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   1eb9c:	4b10      	ldr	r3, [pc, #64]	; (1ebe0 <AppDiscProcAttMsg+0x1d8>)
   1eb9e:	2107      	movs	r1, #7
   1eba0:	681b      	ldr	r3, [r3, #0]
   1eba2:	4640      	mov	r0, r8
   1eba4:	e769      	b.n	1ea7a <AppDiscProcAttMsg+0x72>
          hdl = appConnCb[connId - 1].dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId),
   1eba6:	4640      	mov	r0, r8
   1eba8:	f7ee fbec 	bl	d384 <DmConnPeerAddrType>
   1ebac:	4605      	mov	r5, r0
   1ebae:	4640      	mov	r0, r8
   1ebb0:	f7ee fbf2 	bl	d398 <DmConnPeerAddr>
   1ebb4:	9001      	str	r0, [sp, #4]
                                                             (DmConnRole(connId)==DM_ROLE_MASTER)?TRUE:FALSE);
   1ebb6:	4640      	mov	r0, r8
   1ebb8:	f7ee fc6c 	bl	d494 <DmConnRole>
          hdl = appConnCb[connId - 1].dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId),
   1ebbc:	fab0 f280 	clz	r2, r0
   1ebc0:	9901      	ldr	r1, [sp, #4]
   1ebc2:	4628      	mov	r0, r5
   1ebc4:	0952      	lsrs	r2, r2, #5
   1ebc6:	f7fe fb7b 	bl	1d2c0 <AppDbNewRecord>
   1ebca:	4b08      	ldr	r3, [pc, #32]	; (1ebec <AppDiscProcAttMsg+0x1e4>)
   1ebcc:	eb03 1348 	add.w	r3, r3, r8, lsl #5
   1ebd0:	4605      	mov	r5, r0
   1ebd2:	f843 0c20 	str.w	r0, [r3, #-32]
   1ebd6:	e7a2      	b.n	1eb1e <AppDiscProcAttMsg+0x116>
   1ebd8:	10005e40 	.word	0x10005e40
   1ebdc:	00028068 	.word	0x00028068
   1ebe0:	10005e70 	.word	0x10005e70
   1ebe4:	00028088 	.word	0x00028088
   1ebe8:	00028044 	.word	0x00028044
   1ebec:	10005e7c 	.word	0x10005e7c

0001ebf0 <AppDiscInit>:
{
  uint8_t i;

  for (i = 0; i < DM_CONN_MAX; i++)
  {
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1ebf0:	4b04      	ldr	r3, [pc, #16]	; (1ec04 <AppDiscInit+0x14>)
   1ebf2:	2200      	movs	r2, #0
   1ebf4:	72da      	strb	r2, [r3, #11]
    appDiscCb[i].pDiscCb = NULL;
   1ebf6:	601a      	str	r2, [r3, #0]
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1ebf8:	76da      	strb	r2, [r3, #27]
    appDiscCb[i].pDiscCb = NULL;
   1ebfa:	611a      	str	r2, [r3, #16]
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   1ebfc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    appDiscCb[i].pDiscCb = NULL;
   1ec00:	621a      	str	r2, [r3, #32]
  }
}
   1ec02:	4770      	bx	lr
   1ec04:	10005e40 	.word	0x10005e40

0001ec08 <AppDiscRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscRegister(appDiscCback_t cback)
{
  appDiscCback = cback;
   1ec08:	4b01      	ldr	r3, [pc, #4]	; (1ec10 <AppDiscRegister+0x8>)
   1ec0a:	6018      	str	r0, [r3, #0]
}
   1ec0c:	4770      	bx	lr
   1ec0e:	bf00      	nop
   1ec10:	10005e70 	.word	0x10005e70

0001ec14 <AppDiscSetHdlList>:
/*************************************************************************************************/
void AppDiscSetHdlList(dmConnId_t connId, uint8_t hdlListLen, uint16_t *pHdlList)
{
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];

  pAppDiscCb->hdlListLen = hdlListLen;
   1ec14:	4b03      	ldr	r3, [pc, #12]	; (1ec24 <AppDiscSetHdlList+0x10>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1ec16:	3801      	subs	r0, #1
  pAppDiscCb->hdlListLen = hdlListLen;
   1ec18:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1ec1c:	7281      	strb	r1, [r0, #10]
  pAppDiscCb->pHdlList = pHdlList;
   1ec1e:	6042      	str	r2, [r0, #4]
}
   1ec20:	4770      	bx	lr
   1ec22:	bf00      	nop
   1ec24:	10005e40 	.word	0x10005e40

0001ec28 <AppDiscComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscComplete(dmConnId_t connId, uint8_t status)
{
   1ec28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
  appDbHdl_t hdl;

  /* set connection as idle */
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1ec2c:	2200      	movs	r2, #0
{
   1ec2e:	460c      	mov	r4, r1
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1ec30:	2108      	movs	r1, #8
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1ec32:	f100 38ff 	add.w	r8, r0, #4294967295
{
   1ec36:	4605      	mov	r5, r0
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   1ec38:	f7ee fbea 	bl	d410 <DmConnSetIdle>

  /* store status if not doing connection setup configuration */
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1ec3c:	2c08      	cmp	r4, #8
   1ec3e:	4e26      	ldr	r6, [pc, #152]	; (1ecd8 <AppDiscComplete+0xb0>)
   1ec40:	ea4f 1708 	mov.w	r7, r8, lsl #4
   1ec44:	d02a      	beq.n	1ec9c <AppDiscComplete+0x74>
  {
    pAppDiscCb->cmplStatus = status;
   1ec46:	19f3      	adds	r3, r6, r7
   1ec48:	725c      	strb	r4, [r3, #9]
  }

  /* initialize control block */
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1ec4a:	19f3      	adds	r3, r6, r7
  if (pAppDiscCb->pDiscCb != NULL)
   1ec4c:	59f0      	ldr	r0, [r6, r7]
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   1ec4e:	f04f 0800 	mov.w	r8, #0
   1ec52:	f883 800b 	strb.w	r8, [r3, #11]
  if (pAppDiscCb->pDiscCb != NULL)
   1ec56:	b118      	cbz	r0, 1ec60 <AppDiscComplete+0x38>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   1ec58:	f7ff f96e 	bl	1df38 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   1ec5c:	f846 8007 	str.w	r8, [r6, r7]
  }

  if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1ec60:	4628      	mov	r0, r5
   1ec62:	f000 f9b5 	bl	1efd0 <AppDbGetHdl>
   1ec66:	4680      	mov	r8, r0
   1ec68:	b178      	cbz	r0, 1ec8a <AppDiscComplete+0x62>
  {
    /* Don't store configuration complete if not bonded - it must be re-done on reconnection. */
    uint8_t discComplete = AppCheckBonded(connId) ? APP_DISC_CFG_CMPL : APP_DISC_CMPL;
   1ec6a:	4628      	mov	r0, r5
   1ec6c:	f000 f928 	bl	1eec0 <AppCheckBonded>
   1ec70:	2800      	cmp	r0, #0
   1ec72:	bf14      	ite	ne
   1ec74:	2308      	movne	r3, #8
   1ec76:	2304      	moveq	r3, #4

    /* store discovery status if not doing connection setup configuration */
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START) && (status <= discComplete))
   1ec78:	2c08      	cmp	r4, #8
   1ec7a:	d016      	beq.n	1ecaa <AppDiscComplete+0x82>
   1ec7c:	42a3      	cmp	r3, r4
   1ec7e:	d226      	bcs.n	1ecce <AppDiscComplete+0xa6>
    {
      AppDbSetDiscStatus(hdl, status);
    }

    if (pAppDiscCb->pHdlList != NULL)
   1ec80:	19f3      	adds	r3, r6, r7
   1ec82:	6859      	ldr	r1, [r3, #4]
   1ec84:	b109      	cbz	r1, 1ec8a <AppDiscComplete+0x62>
    {
      /* if discovery complete store handles */
      if (status == APP_DISC_CMPL)
   1ec86:	2c04      	cmp	r4, #4
   1ec88:	d01d      	beq.n	1ecc6 <AppDiscComplete+0x9e>
  }

  /* set connection setup configuration status as complete if either discovery-initiated
   * configuration is complete or connection setup configuration is complete
   */
  if (status == APP_DISC_CFG_CMPL)
   1ec8a:	2c08      	cmp	r4, #8
   1ec8c:	d011      	beq.n	1ecb2 <AppDiscComplete+0x8a>
  {
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
  }

  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1ec8e:	4622      	mov	r2, r4
   1ec90:	4629      	mov	r1, r5
   1ec92:	4812      	ldr	r0, [pc, #72]	; (1ecdc <AppDiscComplete+0xb4>)
}
   1ec94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1ec98:	f7ff bcfe 	b.w	1e698 <WsfTrace>
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   1ec9c:	eb06 1808 	add.w	r8, r6, r8, lsl #4
   1eca0:	f898 3008 	ldrb.w	r3, [r8, #8]
   1eca4:	2b07      	cmp	r3, #7
   1eca6:	d1ce      	bne.n	1ec46 <AppDiscComplete+0x1e>
   1eca8:	e7cf      	b.n	1ec4a <AppDiscComplete+0x22>
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START) && (status <= discComplete))
   1ecaa:	19f2      	adds	r2, r6, r7
   1ecac:	7a12      	ldrb	r2, [r2, #8]
   1ecae:	2a07      	cmp	r2, #7
   1ecb0:	d1e4      	bne.n	1ec7c <AppDiscComplete+0x54>
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
   1ecb2:	443e      	add	r6, r7
   1ecb4:	2308      	movs	r3, #8
   1ecb6:	7233      	strb	r3, [r6, #8]
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1ecb8:	4622      	mov	r2, r4
   1ecba:	4629      	mov	r1, r5
   1ecbc:	4807      	ldr	r0, [pc, #28]	; (1ecdc <AppDiscComplete+0xb4>)
}
   1ecbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   1ecc2:	f7ff bce9 	b.w	1e698 <WsfTrace>
        AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   1ecc6:	4640      	mov	r0, r8
   1ecc8:	f7fe fd1e 	bl	1d708 <AppDbSetHdlList>
  if (status == APP_DISC_CFG_CMPL)
   1eccc:	e7df      	b.n	1ec8e <AppDiscComplete+0x66>
      AppDbSetDiscStatus(hdl, status);
   1ecce:	4621      	mov	r1, r4
   1ecd0:	4640      	mov	r0, r8
   1ecd2:	f7fe fd13 	bl	1d6fc <AppDbSetDiscStatus>
   1ecd6:	e7d3      	b.n	1ec80 <AppDiscComplete+0x58>
   1ecd8:	10005e40 	.word	0x10005e40
   1ecdc:	000280ac 	.word	0x000280ac

0001ece0 <AppDiscFindService>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscFindService(dmConnId_t connId, uint8_t uuidLen, uint8_t *pUuid, uint8_t listLen,
                        attcDiscChar_t **pCharList, uint16_t *pHdlList)
{
   1ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1ece4:	1e44      	subs	r4, r0, #1

  if (pAppDiscCb->pDiscCb == NULL)
   1ece6:	4e15      	ldr	r6, [pc, #84]	; (1ed3c <AppDiscFindService+0x5c>)
   1ece8:	0124      	lsls	r4, r4, #4
{
   1ecea:	b081      	sub	sp, #4
   1ecec:	4698      	mov	r8, r3
  if (pAppDiscCb->pDiscCb == NULL)
   1ecee:	5933      	ldr	r3, [r6, r4]
{
   1ecf0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1ecf4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1ecf8:	4605      	mov	r5, r0
   1ecfa:	460f      	mov	r7, r1
   1ecfc:	4693      	mov	fp, r2
  if (pAppDiscCb->pDiscCb == NULL)
   1ecfe:	b1a3      	cbz	r3, 1ed2a <AppDiscFindService+0x4a>
  }

  if (pAppDiscCb->pDiscCb != NULL)
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1ed00:	4628      	mov	r0, r5
   1ed02:	2201      	movs	r2, #1
   1ed04:	2108      	movs	r1, #8
   1ed06:	f7ee fb83 	bl	d410 <DmConnSetIdle>

    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;

    pAppDiscCb->pDiscCb->pCharList = pCharList;
   1ed0a:	5931      	ldr	r1, [r6, r4]
    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   1ed0c:	4434      	add	r4, r6
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
    pAppDiscCb->pDiscCb->charListLen = listLen;
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1ed0e:	4628      	mov	r0, r5
   1ed10:	465b      	mov	r3, fp
    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   1ed12:	2501      	movs	r5, #1
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1ed14:	463a      	mov	r2, r7
    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   1ed16:	72e5      	strb	r5, [r4, #11]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
   1ed18:	e9c1 9a00 	strd	r9, sl, [r1]
    pAppDiscCb->pDiscCb->charListLen = listLen;
   1ed1c:	f881 800c 	strb.w	r8, [r1, #12]
  }
}
   1ed20:	b001      	add	sp, #4
   1ed22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   1ed26:	f7f3 b9c5 	b.w	120b4 <AttcDiscService>
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1ed2a:	2014      	movs	r0, #20
   1ed2c:	f7ff f8d4 	bl	1ded8 <WsfBufAlloc>
   1ed30:	5130      	str	r0, [r6, r4]
  if (pAppDiscCb->pDiscCb != NULL)
   1ed32:	2800      	cmp	r0, #0
   1ed34:	d1e4      	bne.n	1ed00 <AppDiscFindService+0x20>
}
   1ed36:	b001      	add	sp, #4
   1ed38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed3c:	10005e40 	.word	0x10005e40

0001ed40 <AppDiscConfigure>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscConfigure(dmConnId_t connId, uint8_t status, uint8_t cfgListLen,
                      attcDiscCfg_t *pCfgList, uint8_t hdlListLen, uint16_t *pHdlList)
{
   1ed40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   1ed44:	1e44      	subs	r4, r0, #1
  uint8_t ret;

  if (pAppDiscCb->pDiscCb == NULL)
   1ed46:	4f1b      	ldr	r7, [pc, #108]	; (1edb4 <AppDiscConfigure+0x74>)
   1ed48:	0124      	lsls	r4, r4, #4
{
   1ed4a:	b081      	sub	sp, #4
   1ed4c:	4699      	mov	r9, r3
  if (pAppDiscCb->pDiscCb == NULL)
   1ed4e:	593b      	ldr	r3, [r7, r4]
{
   1ed50:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   1ed54:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1ed58:	4605      	mov	r5, r0
   1ed5a:	460e      	mov	r6, r1
   1ed5c:	4690      	mov	r8, r2
  if (pAppDiscCb->pDiscCb == NULL)
   1ed5e:	b1f3      	cbz	r3, 1ed9e <AppDiscConfigure+0x5e>
  }

  if (pAppDiscCb->pDiscCb != NULL)
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   1ed60:	2201      	movs	r2, #1
   1ed62:	2108      	movs	r1, #8
   1ed64:	4628      	mov	r0, r5
   1ed66:	f7ee fb53 	bl	d410 <DmConnSetIdle>

    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   1ed6a:	193b      	adds	r3, r7, r4
   1ed6c:	2202      	movs	r2, #2

    if (status == APP_DISC_CFG_CONN_START)
   1ed6e:	2e07      	cmp	r6, #7
    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   1ed70:	72da      	strb	r2, [r3, #11]
    if (status == APP_DISC_CFG_CONN_START)
   1ed72:	d01d      	beq.n	1edb0 <AppDiscConfigure+0x70>
    {
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
    }

    /* start configuration */
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   1ed74:	5939      	ldr	r1, [r7, r4]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   1ed76:	4628      	mov	r0, r5
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   1ed78:	f8c1 9008 	str.w	r9, [r1, #8]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
   1ed7c:	f881 800d 	strb.w	r8, [r1, #13]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
   1ed80:	f8c1 b004 	str.w	fp, [r1, #4]
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
   1ed84:	f881 a00c 	strb.w	sl, [r1, #12]
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   1ed88:	f7f3 fbac 	bl	124e4 <AttcDiscConfigStart>

    /* nothing to configure; configuration complete */
    if (ret == ATT_SUCCESS)
   1ed8c:	b968      	cbnz	r0, 1edaa <AppDiscConfigure+0x6a>
    {
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   1ed8e:	4b0a      	ldr	r3, [pc, #40]	; (1edb8 <AppDiscConfigure+0x78>)
   1ed90:	681b      	ldr	r3, [r3, #0]
   1ed92:	2108      	movs	r1, #8
   1ed94:	4628      	mov	r0, r5
    }
  }
}
   1ed96:	b001      	add	sp, #4
   1ed98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   1ed9c:	4718      	bx	r3
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   1ed9e:	2014      	movs	r0, #20
   1eda0:	f7ff f89a 	bl	1ded8 <WsfBufAlloc>
   1eda4:	5138      	str	r0, [r7, r4]
  if (pAppDiscCb->pDiscCb != NULL)
   1eda6:	2800      	cmp	r0, #0
   1eda8:	d1da      	bne.n	1ed60 <AppDiscConfigure+0x20>
}
   1edaa:	b001      	add	sp, #4
   1edac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
   1edb0:	721e      	strb	r6, [r3, #8]
   1edb2:	e7df      	b.n	1ed74 <AppDiscConfigure+0x34>
   1edb4:	10005e40 	.word	0x10005e40
   1edb8:	10005e70 	.word	0x10005e70

0001edbc <AppDiscServiceChanged>:
  uint16_t    *pHdl;
  uint8_t     i;
  bool_t      foundHdl;

  /* verify characteristic length */
  if (pMsg->valueLen != CH_SC_LEN)
   1edbc:	8903      	ldrh	r3, [r0, #8]
   1edbe:	2b04      	cmp	r3, #4
   1edc0:	d000      	beq.n	1edc4 <AppDiscServiceChanged+0x8>
   1edc2:	4770      	bx	lr
  {
    return;
  }

  /* parse and verify handles */
  p = pMsg->pValue;
   1edc4:	6843      	ldr	r3, [r0, #4]
  BSTREAM_TO_UINT16(startHdl, p);
   1edc6:	7859      	ldrb	r1, [r3, #1]
   1edc8:	781a      	ldrb	r2, [r3, #0]
   1edca:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   1edce:	b292      	uxth	r2, r2
  BSTREAM_TO_UINT16(endHdl, p);
  if (startHdl == 0 || endHdl < startHdl)
   1edd0:	2a00      	cmp	r2, #0
   1edd2:	d0f6      	beq.n	1edc2 <AppDiscServiceChanged+0x6>
{
   1edd4:	b530      	push	{r4, r5, lr}
  BSTREAM_TO_UINT16(endHdl, p);
   1edd6:	78d9      	ldrb	r1, [r3, #3]
   1edd8:	f893 e002 	ldrb.w	lr, [r3, #2]
   1eddc:	eb0e 2e01 	add.w	lr, lr, r1, lsl #8
   1ede0:	fa1f fe8e 	uxth.w	lr, lr
  if (startHdl == 0 || endHdl < startHdl)
   1ede4:	4572      	cmp	r2, lr
   1ede6:	d818      	bhi.n	1ee1a <AppDiscServiceChanged+0x5e>
  appDiscCb_t *pAppDiscCb = &appDiscCb[pMsg->hdr.param - 1];
   1ede8:	8805      	ldrh	r5, [r0, #0]
    return;
  }

  /* if we don't have any stored handles within service changed handle range, ignore */
  foundHdl = FALSE;
  if (pAppDiscCb->pHdlList != NULL)
   1edea:	4c11      	ldr	r4, [pc, #68]	; (1ee30 <AppDiscServiceChanged+0x74>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[pMsg->hdr.param - 1];
   1edec:	1e6b      	subs	r3, r5, #1
  if (pAppDiscCb->pHdlList != NULL)
   1edee:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   1edf2:	0118      	lsls	r0, r3, #4
   1edf4:	684b      	ldr	r3, [r1, #4]
   1edf6:	b183      	cbz	r3, 1ee1a <AppDiscServiceChanged+0x5e>
  {
    pHdl = pAppDiscCb->pHdlList;
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1edf8:	7a89      	ldrb	r1, [r1, #10]
   1edfa:	b171      	cbz	r1, 1ee1a <AppDiscServiceChanged+0x5e>
   1edfc:	f101 3cff 	add.w	ip, r1, #4294967295
   1ee00:	fa5f fc8c 	uxtb.w	ip, ip
   1ee04:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
   1ee08:	3b02      	subs	r3, #2
    {
      if (*pHdl >= startHdl && *pHdl <= endHdl)
   1ee0a:	f833 1f02 	ldrh.w	r1, [r3, #2]!
   1ee0e:	4291      	cmp	r1, r2
   1ee10:	d301      	bcc.n	1ee16 <AppDiscServiceChanged+0x5a>
   1ee12:	4571      	cmp	r1, lr
   1ee14:	d902      	bls.n	1ee1c <AppDiscServiceChanged+0x60>
    for (i = pAppDiscCb->hdlListLen; i > 0; i--, pHdl++)
   1ee16:	4563      	cmp	r3, ip
   1ee18:	d1f7      	bne.n	1ee0a <AppDiscServiceChanged+0x4e>
    return;
  }

  /* Prepare to restart service discovery*/
  appDiscRestartDiscovery((dmConnId_t) pMsg->hdr.param);
}
   1ee1a:	bd30      	pop	{r4, r5, pc}
  if (pAppDiscCb->inProgress == APP_DISC_SVC_DISC_IN_PROGRESS)
   1ee1c:	1823      	adds	r3, r4, r0
   1ee1e:	7adb      	ldrb	r3, [r3, #11]
   1ee20:	2b01      	cmp	r3, #1
   1ee22:	d0fa      	beq.n	1ee1a <AppDiscServiceChanged+0x5e>
  appDiscRestartDiscovery((dmConnId_t) pMsg->hdr.param);
   1ee24:	b2e8      	uxtb	r0, r5
}
   1ee26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  appDiscRestartDiscovery((dmConnId_t) pMsg->hdr.param);
   1ee2a:	f7ff bcd3 	b.w	1e7d4 <appDiscRestartDiscovery>
   1ee2e:	bf00      	nop
   1ee30:	10005e40 	.word	0x10005e40

0001ee34 <AppDiscReadDatabaseHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscReadDatabaseHash(dmConnId_t connId)
{
   1ee34:	b500      	push	{lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];

  /* Security/bonding not used, rely on database hash for cached handles. */
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1ee36:	490a      	ldr	r1, [pc, #40]	; (1ee60 <AppDiscReadDatabaseHash+0x2c>)

  /* Read the database hash. */
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1ee38:	4a0a      	ldr	r2, [pc, #40]	; (1ee64 <AppDiscReadDatabaseHash+0x30>)
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1ee3a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
{
   1ee3e:	b083      	sub	sp, #12
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1ee40:	f04f 0c03 	mov.w	ip, #3
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1ee44:	2300      	movs	r3, #0
   1ee46:	e9cd 2300 	strd	r2, r3, [sp]
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   1ee4a:	f801 cc05 	strb.w	ip, [r1, #-5]
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1ee4e:	2302      	movs	r3, #2
   1ee50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ee54:	2101      	movs	r1, #1
   1ee56:	f7f4 fb15 	bl	13484 <AttcReadByTypeReq>
                    (uint8_t *)attGattDbhChUuid, FALSE);
}
   1ee5a:	b003      	add	sp, #12
   1ee5c:	f85d fb04 	ldr.w	pc, [sp], #4
   1ee60:	10005e40 	.word	0x10005e40
   1ee64:	00026828 	.word	0x00026828

0001ee68 <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   1ee68:	b570      	push	{r4, r5, r6, lr}
  appConnCb_t   *pCcb = appConnCb;
  uint8_t       i, j;

  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1ee6a:	4d14      	ldr	r5, [pc, #80]	; (1eebc <appNumConns+0x54>)
   1ee6c:	792c      	ldrb	r4, [r5, #4]
{
   1ee6e:	4606      	mov	r6, r0
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1ee70:	b93c      	cbnz	r4, 1ee82 <appNumConns+0x1a>
   1ee72:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
   1ee76:	b978      	cbnz	r0, 1ee98 <appNumConns+0x30>
   1ee78:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
   1ee7c:	b9b0      	cbnz	r0, 1eeac <appNumConns+0x44>
      j++;
    }
  }

  return j;
}
   1ee7e:	4620      	mov	r0, r4
   1ee80:	bd70      	pop	{r4, r5, r6, pc}
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1ee82:	4620      	mov	r0, r4
   1ee84:	f7ee fb06 	bl	d494 <DmConnRole>
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1ee88:	1a34      	subs	r4, r6, r0
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1ee8a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1ee8e:	fab4 f484 	clz	r4, r4
   1ee92:	0964      	lsrs	r4, r4, #5
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1ee94:	2800      	cmp	r0, #0
   1ee96:	d0ef      	beq.n	1ee78 <appNumConns+0x10>
   1ee98:	f7ee fafc 	bl	d494 <DmConnRole>
   1ee9c:	4286      	cmp	r6, r0
   1ee9e:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
      j++;
   1eea2:	bf04      	itt	eq
   1eea4:	3401      	addeq	r4, #1
   1eea6:	b2e4      	uxtbeq	r4, r4
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1eea8:	2800      	cmp	r0, #0
   1eeaa:	d0e8      	beq.n	1ee7e <appNumConns+0x16>
   1eeac:	f7ee faf2 	bl	d494 <DmConnRole>
   1eeb0:	42b0      	cmp	r0, r6
      j++;
   1eeb2:	bf04      	itt	eq
   1eeb4:	3401      	addeq	r4, #1
   1eeb6:	b2e4      	uxtbeq	r4, r4
}
   1eeb8:	4620      	mov	r0, r4
   1eeba:	bd70      	pop	{r4, r5, r6, pc}
   1eebc:	10005e7c 	.word	0x10005e7c

0001eec0 <AppCheckBonded>:
/*************************************************************************************************/
bool_t AppCheckBonded(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return appConnCb[connId - 1].bonded;
   1eec0:	4b02      	ldr	r3, [pc, #8]	; (1eecc <AppCheckBonded+0xc>)
   1eec2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
}
   1eec6:	f810 0c1b 	ldrb.w	r0, [r0, #-27]
   1eeca:	4770      	bx	lr
   1eecc:	10005e7c 	.word	0x10005e7c

0001eed0 <AppHandlerInit>:
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
  appHandlerId = handlerId;
   1eed0:	4b01      	ldr	r3, [pc, #4]	; (1eed8 <AppHandlerInit+0x8>)
   1eed2:	7018      	strb	r0, [r3, #0]

  AppDbInit();
   1eed4:	f7fe b9f2 	b.w	1d2bc <AppDbInit>
   1eed8:	10005edc 	.word	0x10005edc

0001eedc <AppHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  if (pMsg != NULL)
   1eedc:	b1b1      	cbz	r1, 1ef0c <AppHandler+0x30>
{
   1eede:	b510      	push	{r4, lr}
   1eee0:	460c      	mov	r4, r1
  {
    APP_TRACE_INFO1("App got evt %d", pMsg->event);
   1eee2:	4813      	ldr	r0, [pc, #76]	; (1ef30 <AppHandler+0x54>)
   1eee4:	7889      	ldrb	r1, [r1, #2]
   1eee6:	f7ff fbd7 	bl	1e698 <WsfTrace>

    if (pMsg->event >= APP_MASTER_MSG_START)
   1eeea:	78a3      	ldrb	r3, [r4, #2]
   1eeec:	2b1f      	cmp	r3, #31
   1eeee:	d905      	bls.n	1eefc <AppHandler+0x20>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);
   1eef0:	4b10      	ldr	r3, [pc, #64]	; (1ef34 <AppHandler+0x58>)
   1eef2:	4620      	mov	r0, r4
   1eef4:	685b      	ldr	r3, [r3, #4]
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   1eef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*appCb.masterCback)(pMsg);
   1eefa:	4718      	bx	r3
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   1eefc:	2b0f      	cmp	r3, #15
   1eefe:	d908      	bls.n	1ef12 <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);
   1ef00:	4b0c      	ldr	r3, [pc, #48]	; (1ef34 <AppHandler+0x58>)
   1ef02:	4620      	mov	r0, r4
   1ef04:	681b      	ldr	r3, [r3, #0]
}
   1ef06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*appCb.slaveCback)(pMsg);
   1ef0a:	4718      	bx	r3
    if (event & APP_BTN_DOWN_EVT)
   1ef0c:	06c3      	lsls	r3, r0, #27
   1ef0e:	d404      	bmi.n	1ef1a <AppHandler+0x3e>
   1ef10:	4770      	bx	lr
  switch(pMsg->event)
   1ef12:	b14b      	cbz	r3, 1ef28 <AppHandler+0x4c>
   1ef14:	2b01      	cmp	r3, #1
   1ef16:	d002      	beq.n	1ef1e <AppHandler+0x42>
}
   1ef18:	bd10      	pop	{r4, pc}
      AppUiBtnPressed();
   1ef1a:	f7fe bce9 	b.w	1d8f0 <AppUiBtnPressed>
      appUiTimerExpired(pMsg);
   1ef1e:	4620      	mov	r0, r4
}
   1ef20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      appUiTimerExpired(pMsg);
   1ef24:	f7fe bcda 	b.w	1d8dc <appUiTimerExpired>
}
   1ef28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      appUiBtnPoll();
   1ef2c:	f7fe bcd8 	b.w	1d8e0 <appUiBtnPoll>
   1ef30:	000280d4 	.word	0x000280d4
   1ef34:	10005e74 	.word	0x10005e74

0001ef38 <AppHandlePasskey>:
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];

  if (pAuthReq->display)
   1ef38:	7943      	ldrb	r3, [r0, #5]
   1ef3a:	b30b      	cbz	r3, 1ef80 <AppHandlePasskey+0x48>
{
   1ef3c:	b510      	push	{r4, lr}
   1ef3e:	b082      	sub	sp, #8
   1ef40:	4604      	mov	r4, r0
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   1ef42:	2104      	movs	r1, #4
   1ef44:	a801      	add	r0, sp, #4
   1ef46:	f7f2 ff6f 	bl	11e28 <SecRand>
    passkey %= 1000000;
   1ef4a:	9a01      	ldr	r2, [sp, #4]
   1ef4c:	4b0e      	ldr	r3, [pc, #56]	; (1ef88 <AppHandlePasskey+0x50>)
   1ef4e:	490f      	ldr	r1, [pc, #60]	; (1ef8c <AppHandlePasskey+0x54>)
   1ef50:	fba3 0302 	umull	r0, r3, r3, r2
   1ef54:	0c9b      	lsrs	r3, r3, #18
   1ef56:	fb01 2313 	mls	r3, r1, r3, r2

    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
    buf[1] = UINT32_TO_BYTE1(passkey);
   1ef5a:	0a19      	lsrs	r1, r3, #8
    buf[2] = UINT32_TO_BYTE2(passkey);

    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1ef5c:	7820      	ldrb	r0, [r4, #0]
    buf[1] = UINT32_TO_BYTE1(passkey);
   1ef5e:	f88d 1001 	strb.w	r1, [sp, #1]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1ef62:	0c1c      	lsrs	r4, r3, #16
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1ef64:	466a      	mov	r2, sp
   1ef66:	2103      	movs	r1, #3
    passkey %= 1000000;
   1ef68:	9301      	str	r3, [sp, #4]
    buf[0] = UINT32_TO_BYTE0(passkey);
   1ef6a:	f88d 3000 	strb.w	r3, [sp]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1ef6e:	f88d 4002 	strb.w	r4, [sp, #2]
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1ef72:	f7ef fc7f 	bl	e874 <DmSecAuthRsp>

    /* display passkey */
    AppUiDisplayPasskey(passkey);
   1ef76:	9801      	ldr	r0, [sp, #4]
   1ef78:	f7fe fcaa 	bl	1d8d0 <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  }
}
   1ef7c:	b002      	add	sp, #8
   1ef7e:	bd10      	pop	{r4, pc}
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   1ef80:	200e      	movs	r0, #14
   1ef82:	f7fe bbf1 	b.w	1d768 <AppUiAction>
   1ef86:	bf00      	nop
   1ef88:	431bde83 	.word	0x431bde83
   1ef8c:	000f4240 	.word	0x000f4240

0001ef90 <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   1ef90:	4601      	mov	r1, r0
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   1ef92:	2213      	movs	r2, #19
   1ef94:	2003      	movs	r0, #3
   1ef96:	f7ee b8ef 	b.w	d178 <DmConnClose>
   1ef9a:	bf00      	nop

0001ef9c <AppConnOpenList>:
{
  appConnCb_t   *pCcb = appConnCb;
  uint8_t       i;
  uint8_t       pos = 0;

  memset(pConnIdList, DM_CONN_ID_NONE, DM_CONN_MAX);
   1ef9c:	2100      	movs	r1, #0

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   1ef9e:	4a0b      	ldr	r2, [pc, #44]	; (1efcc <AppConnOpenList+0x30>)
  memset(pConnIdList, DM_CONN_ID_NONE, DM_CONN_MAX);
   1efa0:	8001      	strh	r1, [r0, #0]
   1efa2:	7081      	strb	r1, [r0, #2]
{
   1efa4:	4603      	mov	r3, r0
    if (pCcb->connId != DM_CONN_ID_NONE)
   1efa6:	7910      	ldrb	r0, [r2, #4]
   1efa8:	b108      	cbz	r0, 1efae <AppConnOpenList+0x12>
    {
      pConnIdList[pos++] = pCcb->connId;
   1efaa:	7018      	strb	r0, [r3, #0]
   1efac:	2001      	movs	r0, #1
    if (pCcb->connId != DM_CONN_ID_NONE)
   1efae:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   1efb2:	b121      	cbz	r1, 1efbe <AppConnOpenList+0x22>
      pConnIdList[pos++] = pCcb->connId;
   1efb4:	f100 0c01 	add.w	ip, r0, #1
   1efb8:	5419      	strb	r1, [r3, r0]
   1efba:	fa5f f08c 	uxtb.w	r0, ip
    if (pCcb->connId != DM_CONN_ID_NONE)
   1efbe:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   1efc2:	b112      	cbz	r2, 1efca <AppConnOpenList+0x2e>
      pConnIdList[pos++] = pCcb->connId;
   1efc4:	1c41      	adds	r1, r0, #1
   1efc6:	541a      	strb	r2, [r3, r0]
   1efc8:	b2c8      	uxtb	r0, r1
    }
  }

  return pos;
}
   1efca:	4770      	bx	lr
   1efcc:	10005e7c 	.word	0x10005e7c

0001efd0 <AppDbGetHdl>:
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
  return appConnCb[connId-1].dbHdl;
   1efd0:	4b02      	ldr	r3, [pc, #8]	; (1efdc <AppDbGetHdl+0xc>)
   1efd2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
}
   1efd6:	f850 0c20 	ldr.w	r0, [r0, #-32]
   1efda:	4770      	bx	lr
   1efdc:	10005e7c 	.word	0x10005e7c

0001efe0 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   1efe0:	b570      	push	{r4, r5, r6, lr}
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1efe2:	4b12      	ldr	r3, [pc, #72]	; (1f02c <AppAddDevToResList+0x4c>)
   1efe4:	eb03 1141 	add.w	r1, r3, r1, lsl #5
{
   1efe8:	b082      	sub	sp, #8
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1efea:	f851 5c20 	ldr.w	r5, [r1, #-32]
{
   1efee:	4604      	mov	r4, r0

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1eff0:	f7f8 fcec 	bl	179cc <HciLlPrivacySupported>
   1eff4:	b908      	cbnz	r0, 1effa <AppAddDevToResList+0x1a>
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   1eff6:	b002      	add	sp, #8
   1eff8:	bd70      	pop	{r4, r5, r6, pc}
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1effa:	4628      	mov	r0, r5
   1effc:	2200      	movs	r2, #0
   1effe:	2104      	movs	r1, #4
   1f000:	f7fe fa98 	bl	1d534 <AppDbGetKey>
   1f004:	4605      	mov	r5, r0
   1f006:	2800      	cmp	r0, #0
   1f008:	d0f5      	beq.n	1eff6 <AppAddDevToResList+0x16>
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   1f00a:	7d86      	ldrb	r6, [r0, #22]
   1f00c:	f7ef fc62 	bl	e8d4 <DmSecGetLocalIrk>
   1f010:	8821      	ldrh	r1, [r4, #0]
   1f012:	2201      	movs	r2, #1
   1f014:	e9cd 2100 	strd	r2, r1, [sp]
   1f018:	4603      	mov	r3, r0
   1f01a:	462a      	mov	r2, r5
   1f01c:	f105 0110 	add.w	r1, r5, #16
   1f020:	4630      	mov	r0, r6
   1f022:	f7ee fe51 	bl	dcc8 <DmPrivAddDevToResList>
}
   1f026:	b002      	add	sp, #8
   1f028:	bd70      	pop	{r4, r5, r6, pc}
   1f02a:	bf00      	nop
   1f02c:	10005e7c 	.word	0x10005e7c

0001f030 <AppClearAllBondingInfo>:
 *
 *          Otherwise, clearing the resolving list in the Controller may fail.
 */
/*************************************************************************************************/
void AppClearAllBondingInfo(void)
{
   1f030:	b508      	push	{r3, lr}
  APP_TRACE_INFO0("Clear bonding info");
   1f032:	480b      	ldr	r0, [pc, #44]	; (1f060 <AppClearAllBondingInfo+0x30>)
   1f034:	f7ff fb30 	bl	1e698 <WsfTrace>

  /* clear bonded device info */
  AppDbDeleteAllRecords();
   1f038:	f7fe f9f4 	bl	1d424 <AppDbDeleteAllRecords>

  /* if LL Privacy is supported */
  if (HciLlPrivacySupported())
   1f03c:	f7f8 fcc6 	bl	179cc <HciLlPrivacySupported>
   1f040:	b900      	cbnz	r0, 1f044 <AppClearAllBondingInfo+0x14>
    }

    /* clear resolving list */
    DmPrivClearResList();
  }
}
   1f042:	bd08      	pop	{r3, pc}
    if (DmLlPrivEnabled())
   1f044:	f7ee fc92 	bl	d96c <DmLlPrivEnabled>
   1f048:	b918      	cbnz	r0, 1f052 <AppClearAllBondingInfo+0x22>
}
   1f04a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DmPrivClearResList();
   1f04e:	f7ee be6b 	b.w	dd28 <DmPrivClearResList>
      DmPrivSetAddrResEnable(FALSE);
   1f052:	2000      	movs	r0, #0
   1f054:	f7ee fe7a 	bl	dd4c <DmPrivSetAddrResEnable>
}
   1f058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DmPrivClearResList();
   1f05c:	f7ee be64 	b.w	dd28 <DmPrivClearResList>
   1f060:	000280e4 	.word	0x000280e4

0001f064 <AppUpdatePrivacyMode>:
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1f064:	b128      	cbz	r0, 1f072 <AppUpdatePrivacyMode+0xe>
{
   1f066:	b538      	push	{r3, r4, r5, lr}
   1f068:	4604      	mov	r4, r0
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1f06a:	f7fe fb71 	bl	1d750 <AppDbGetPeerAddedToRl>
   1f06e:	b908      	cbnz	r0, 1f074 <AppUpdatePrivacyMode+0x10>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
    }
  }
}
   1f070:	bd38      	pop	{r3, r4, r5, pc}
   1f072:	4770      	bx	lr
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1f074:	4620      	mov	r0, r4
   1f076:	f7fe fb73 	bl	1d760 <AppDbGetPeerRpao>
   1f07a:	4605      	mov	r5, r0
   1f07c:	2800      	cmp	r0, #0
   1f07e:	d1f7      	bne.n	1f070 <AppUpdatePrivacyMode+0xc>
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   1f080:	4602      	mov	r2, r0
   1f082:	2104      	movs	r1, #4
   1f084:	4620      	mov	r0, r4
   1f086:	f7fe fa55 	bl	1d534 <AppDbGetKey>
    if (pPeerKey != NULL)
   1f08a:	2800      	cmp	r0, #0
   1f08c:	d0f0      	beq.n	1f070 <AppUpdatePrivacyMode+0xc>
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   1f08e:	f100 0110 	add.w	r1, r0, #16
   1f092:	2201      	movs	r2, #1
   1f094:	7d80      	ldrb	r0, [r0, #22]
   1f096:	f7ee fe6f 	bl	dd78 <DmPrivSetPrivacyMode>
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1f09a:	4629      	mov	r1, r5
   1f09c:	4620      	mov	r0, r4
}
   1f09e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1f0a2:	f7fe bb59 	b.w	1d758 <AppDbSetPeerAddedToRl>
   1f0a6:	bf00      	nop

0001f0a8 <appMasterProcMsg>:
      break;

    default:
      break;
  }
}
   1f0a8:	4770      	bx	lr
   1f0aa:	bf00      	nop

0001f0ac <appMasterInitiateSec>:
{
   1f0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   1f0ae:	6813      	ldr	r3, [r2, #0]
{
   1f0b0:	b085      	sub	sp, #20
   1f0b2:	4614      	mov	r4, r2
   1f0b4:	4605      	mov	r5, r0
   1f0b6:	460e      	mov	r6, r1
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   1f0b8:	b18b      	cbz	r3, 1f0de <appMasterInitiateSec+0x32>
      ((pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_PEER_LTK, &secLevel)) != NULL))
   1f0ba:	f10d 020f 	add.w	r2, sp, #15
   1f0be:	4618      	mov	r0, r3
   1f0c0:	2102      	movs	r1, #2
   1f0c2:	f7fe fa37 	bl	1d534 <AppDbGetKey>
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   1f0c6:	4602      	mov	r2, r0
   1f0c8:	b148      	cbz	r0, 1f0de <appMasterInitiateSec+0x32>
    pCb->bondByLtk = TRUE;
   1f0ca:	2301      	movs	r3, #1
    DmSecEncryptReq(connId, secLevel, &pKey->ltk);
   1f0cc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    pCb->bondByLtk = TRUE;
   1f0d0:	71a3      	strb	r3, [r4, #6]
    pCb->initiatingSec = TRUE;
   1f0d2:	7223      	strb	r3, [r4, #8]
    DmSecEncryptReq(connId, secLevel, &pKey->ltk);
   1f0d4:	4628      	mov	r0, r5
   1f0d6:	f7ef fc77 	bl	e9c8 <DmSecEncryptReq>
}
   1f0da:	b005      	add	sp, #20
   1f0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (initiatePairing)
   1f0de:	2e00      	cmp	r6, #0
   1f0e0:	d0fb      	beq.n	1f0da <appMasterInitiateSec+0x2e>
    pCb->bondByPairing = (pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1f0e2:	4e17      	ldr	r6, [pc, #92]	; (1f140 <appMasterInitiateSec+0x94>)
   1f0e4:	6832      	ldr	r2, [r6, #0]
   1f0e6:	7813      	ldrb	r3, [r2, #0]
   1f0e8:	f003 0301 	and.w	r3, r3, #1
   1f0ec:	71e3      	strb	r3, [r4, #7]
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   1f0ee:	b10b      	cbz	r3, 1f0f4 <appMasterInitiateSec+0x48>
   1f0f0:	6823      	ldr	r3, [r4, #0]
   1f0f2:	b1b3      	cbz	r3, 1f122 <appMasterInitiateSec+0x76>
    pCb->rcvdKeys = 0;
   1f0f4:	2300      	movs	r3, #0
   1f0f6:	72e3      	strb	r3, [r4, #11]
    if (DmConnPeerAddrType(connId) == DM_ADDR_RANDOM)
   1f0f8:	4628      	mov	r0, r5
    rKeyDist = pAppSecCfg->rKeyDist;
   1f0fa:	7897      	ldrb	r7, [r2, #2]
    if (DmConnPeerAddrType(connId) == DM_ADDR_RANDOM)
   1f0fc:	f7ee f942 	bl	d384 <DmConnPeerAddrType>
    DmSecPairReq(connId, pAppSecCfg->oob, pAppSecCfg->auth, pAppSecCfg->iKeyDist, rKeyDist);
   1f100:	6831      	ldr	r1, [r6, #0]
    if (DmConnPeerAddrType(connId) == DM_ADDR_RANDOM)
   1f102:	2801      	cmp	r0, #1
    pCb->initiatingSec = TRUE;
   1f104:	f04f 0301 	mov.w	r3, #1
   1f108:	7223      	strb	r3, [r4, #8]
      rKeyDist |= DM_KEY_DIST_IRK;
   1f10a:	bf08      	it	eq
   1f10c:	f047 0702 	orreq.w	r7, r7, #2
    DmSecPairReq(connId, pAppSecCfg->oob, pAppSecCfg->auth, pAppSecCfg->iKeyDist, rKeyDist);
   1f110:	784b      	ldrb	r3, [r1, #1]
   1f112:	780a      	ldrb	r2, [r1, #0]
   1f114:	78c9      	ldrb	r1, [r1, #3]
   1f116:	9700      	str	r7, [sp, #0]
   1f118:	4628      	mov	r0, r5
   1f11a:	f7ef fc37 	bl	e98c <DmSecPairReq>
}
   1f11e:	b005      	add	sp, #20
   1f120:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId), DmConnPeerAddr(connId), TRUE);
   1f122:	4628      	mov	r0, r5
   1f124:	f7ee f92e 	bl	d384 <DmConnPeerAddrType>
   1f128:	4607      	mov	r7, r0
   1f12a:	4628      	mov	r0, r5
   1f12c:	f7ee f934 	bl	d398 <DmConnPeerAddr>
   1f130:	2201      	movs	r2, #1
   1f132:	4601      	mov	r1, r0
   1f134:	4638      	mov	r0, r7
   1f136:	f7fe f8c3 	bl	1d2c0 <AppDbNewRecord>
    rKeyDist = pAppSecCfg->rKeyDist;
   1f13a:	6832      	ldr	r2, [r6, #0]
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId), DmConnPeerAddr(connId), TRUE);
   1f13c:	6020      	str	r0, [r4, #0]
   1f13e:	e7d9      	b.n	1f0f4 <appMasterInitiateSec+0x48>
   1f140:	10005ef0 	.word	0x10005ef0

0001f144 <AppMasterInit>:
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterInit(void)
{
  appMasterCb.inProgress = FALSE;
   1f144:	4904      	ldr	r1, [pc, #16]	; (1f158 <AppMasterInit+0x14>)

  /* initialize scan mode */
  appMasterCb.scanMode = APP_SCAN_MODE_NONE;

  /* set up callback from main */
  appCb.masterCback = appMasterProcMsg;
   1f146:	4b05      	ldr	r3, [pc, #20]	; (1f15c <AppMasterInit+0x18>)
   1f148:	4a05      	ldr	r2, [pc, #20]	; (1f160 <AppMasterInit+0x1c>)
   1f14a:	605a      	str	r2, [r3, #4]
  appMasterCb.inProgress = FALSE;
   1f14c:	f44f 407f 	mov.w	r0, #65280	; 0xff00
   1f150:	f8a1 009c 	strh.w	r0, [r1, #156]	; 0x9c
}
   1f154:	4770      	bx	lr
   1f156:	bf00      	nop
   1f158:	10005efc 	.word	0x10005efc
   1f15c:	10005e74 	.word	0x10005e74
   1f160:	0001f0a9 	.word	0x0001f0a9

0001f164 <AppMasterProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterProcDmMsg(dmEvt_t *pMsg)
{
   1f164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  appConnCb_t *pCb = NULL;

  /* look up app connection control block from DM connection ID */
  if (pMsg->hdr.event == DM_CONN_OPEN_IND  ||
   1f168:	7883      	ldrb	r3, [r0, #2]
   1f16a:	f1a3 0227 	sub.w	r2, r3, #39	; 0x27
   1f16e:	2a01      	cmp	r2, #1
{
   1f170:	b085      	sub	sp, #20
   1f172:	4604      	mov	r4, r0
  if (pMsg->hdr.event == DM_CONN_OPEN_IND  ||
   1f174:	d903      	bls.n	1f17e <AppMasterProcDmMsg+0x1a>
      pMsg->hdr.event == DM_CONN_CLOSE_IND ||
   1f176:	2b40      	cmp	r3, #64	; 0x40
   1f178:	d001      	beq.n	1f17e <AppMasterProcDmMsg+0x1a>
  appConnCb_t *pCb = NULL;
   1f17a:	2500      	movs	r5, #0
   1f17c:	e004      	b.n	1f188 <AppMasterProcDmMsg+0x24>
      pMsg->hdr.event == DM_REM_CONN_PARAM_REQ_IND)
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1f17e:	8822      	ldrh	r2, [r4, #0]
   1f180:	4d94      	ldr	r5, [pc, #592]	; (1f3d4 <AppMasterProcDmMsg+0x270>)
   1f182:	3a01      	subs	r2, #1
   1f184:	eb05 1542 	add.w	r5, r5, r2, lsl #5
  }

  switch(pMsg->hdr.event)
   1f188:	3b20      	subs	r3, #32
   1f18a:	2b2c      	cmp	r3, #44	; 0x2c
   1f18c:	d833      	bhi.n	1f1f6 <AppMasterProcDmMsg+0x92>
   1f18e:	e8df f003 	tbb	[pc, r3]
   1f192:	32b8      	.short	0x32b8
   1f194:	35173232 	.word	0x35173232
   1f198:	32797341 	.word	0x32797341
   1f19c:	32323232 	.word	0x32323232
   1f1a0:	32323232 	.word	0x32323232
   1f1a4:	32323232 	.word	0x32323232
   1f1a8:	32328432 	.word	0x32328432
   1f1ac:	32323232 	.word	0x32323232
   1f1b0:	32aa3232 	.word	0x32aa3232
   1f1b4:	32323232 	.word	0x32323232
   1f1b8:	32323232 	.word	0x32323232
   1f1bc:	3517      	.short	0x3517
   1f1be:	41          	.byte	0x41
   1f1bf:	00          	.byte	0x00
  if (pMsg->hdr.status == HCI_SUCCESS)
   1f1c0:	78e2      	ldrb	r2, [r4, #3]
   1f1c2:	b9c2      	cbnz	r2, 1f1f6 <AppMasterProcDmMsg+0x92>
  appMasterCb.numScanResults = 0;
   1f1c4:	4e84      	ldr	r6, [pc, #528]	; (1f3d8 <AppMasterProcDmMsg+0x274>)
    pDev->addrType = APP_ADDR_NONE;
   1f1c6:	23ff      	movs	r3, #255	; 0xff
  appMasterCb.numScanResults = 0;
   1f1c8:	f886 2096 	strb.w	r2, [r6, #150]	; 0x96
    pDev->addrType = APP_ADDR_NONE;
   1f1cc:	71b3      	strb	r3, [r6, #6]
   1f1ce:	7573      	strb	r3, [r6, #21]
   1f1d0:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
   1f1d4:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
   1f1d8:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
   1f1dc:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
   1f1e0:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
   1f1e4:	f886 306f 	strb.w	r3, [r6, #111]	; 0x6f
   1f1e8:	f886 307e 	strb.w	r3, [r6, #126]	; 0x7e
   1f1ec:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
  appMasterCb.inProgress = FALSE;
   1f1f0:	2300      	movs	r3, #0
   1f1f2:	f886 309c 	strb.w	r3, [r6, #156]	; 0x9c
      break;

    default:
      break;
  }
}
   1f1f6:	b005      	add	sp, #20
   1f1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (pMsg->hdr.status == HCI_SUCCESS)
   1f1fc:	78e3      	ldrb	r3, [r4, #3]
   1f1fe:	2b00      	cmp	r3, #0
   1f200:	d1f9      	bne.n	1f1f6 <AppMasterProcDmMsg+0x92>
 *  \return Number of stored scan results.
 */
/*************************************************************************************************/
uint8_t AppScanGetNumResults(void)
{
  return appMasterCb.numScanResults;
   1f202:	4b75      	ldr	r3, [pc, #468]	; (1f3d8 <AppMasterProcDmMsg+0x274>)
    APP_TRACE_INFO1("Scan results: %d", AppScanGetNumResults());
   1f204:	4875      	ldr	r0, [pc, #468]	; (1f3dc <AppMasterProcDmMsg+0x278>)
   1f206:	f893 1096 	ldrb.w	r1, [r3, #150]	; 0x96
}
   1f20a:	b005      	add	sp, #20
   1f20c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    APP_TRACE_INFO1("Scan results: %d", AppScanGetNumResults());
   1f210:	f7ff ba42 	b.w	1e698 <WsfTrace>
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   1f214:	4e70      	ldr	r6, [pc, #448]	; (1f3d8 <AppMasterProcDmMsg+0x274>)
            BdaCmp(pDev->addr, pMsg->extScanReport.addr))
   1f216:	f104 0907 	add.w	r9, r4, #7
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   1f21a:	4635      	mov	r5, r6
            BdaCmp(pDev->addr, pMsg->scanReport.addr))
   1f21c:	f104 080c 	add.w	r8, r4, #12
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1f220:	f106 0796 	add.w	r7, r6, #150	; 0x96
   1f224:	e008      	b.n	1f238 <AppMasterProcDmMsg+0xd4>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1f226:	7ae2      	ldrb	r2, [r4, #11]
   1f228:	429a      	cmp	r2, r3
   1f22a:	d071      	beq.n	1f310 <AppMasterProcDmMsg+0x1ac>
        else if (pDev->addrType == APP_ADDR_NONE)
   1f22c:	2bff      	cmp	r3, #255	; 0xff
   1f22e:	f000 80b6 	beq.w	1f39e <AppMasterProcDmMsg+0x23a>
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1f232:	350f      	adds	r5, #15
   1f234:	42bd      	cmp	r5, r7
   1f236:	d0de      	beq.n	1f1f6 <AppMasterProcDmMsg+0x92>
    if(DmScanModeLeg())
   1f238:	f7ef fa42 	bl	e6c0 <DmScanModeLeg>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1f23c:	79ab      	ldrb	r3, [r5, #6]
    if(DmScanModeLeg())
   1f23e:	2800      	cmp	r0, #0
   1f240:	d1f1      	bne.n	1f226 <AppMasterProcDmMsg+0xc2>
        if ((pDev->addrType == pMsg->extScanReport.addrType) &&
   1f242:	79a2      	ldrb	r2, [r4, #6]
   1f244:	429a      	cmp	r2, r3
   1f246:	d06c      	beq.n	1f322 <AppMasterProcDmMsg+0x1be>
        else if (pDev->addrType == APP_ADDR_NONE)
   1f248:	2bff      	cmp	r3, #255	; 0xff
   1f24a:	d1f2      	bne.n	1f232 <AppMasterProcDmMsg+0xce>
          pDev->addrType = pMsg->extScanReport.addrType;
   1f24c:	79a3      	ldrb	r3, [r4, #6]
   1f24e:	71ab      	strb	r3, [r5, #6]
          pDev->secPhy = pMsg->extScanReport.secPhy;
   1f250:	7ba3      	ldrb	r3, [r4, #14]
   1f252:	73ab      	strb	r3, [r5, #14]
          BdaCpy(pDev->addr, pMsg->extScanReport.addr);
   1f254:	1de1      	adds	r1, r4, #7
   1f256:	4628      	mov	r0, r5
   1f258:	f7f6 fb30 	bl	158bc <BdaCpy>
          pDev->directAddrType = pMsg->extScanReport.directAddrType;
   1f25c:	7d23      	ldrb	r3, [r4, #20]
          BdaCpy(pDev->directAddr, pMsg->extScanReport.directAddr);
   1f25e:	f104 0115 	add.w	r1, r4, #21
          pDev->directAddrType = pMsg->extScanReport.directAddrType;
   1f262:	71eb      	strb	r3, [r5, #7]
          BdaCpy(pDev->directAddr, pMsg->extScanReport.directAddr);
   1f264:	f105 0008 	add.w	r0, r5, #8
   1f268:	f7f6 fb28 	bl	158bc <BdaCpy>
          appMasterCb.numScanResults++;
   1f26c:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   1f270:	3301      	adds	r3, #1
   1f272:	f886 3096 	strb.w	r3, [r6, #150]	; 0x96
          break;
   1f276:	e7be      	b.n	1f1f6 <AppMasterProcDmMsg+0x92>
  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   1f278:	7820      	ldrb	r0, [r4, #0]
}
   1f27a:	b005      	add	sp, #20
   1f27c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   1f280:	f7ed bf92 	b.w	d1a8 <DmReadRemoteFeatures>
  AppUpdatePrivacyMode(pCb->dbHdl);
   1f284:	6828      	ldr	r0, [r5, #0]
   1f286:	f7ff feed 	bl	1f064 <AppUpdatePrivacyMode>
  appMasterCb.inProgress = FALSE;
   1f28a:	4a53      	ldr	r2, [pc, #332]	; (1f3d8 <AppMasterProcDmMsg+0x274>)
  pCb->connId = DM_CONN_ID_NONE;
   1f28c:	2300      	movs	r3, #0
   1f28e:	712b      	strb	r3, [r5, #4]
  appMasterCb.inProgress = FALSE;
   1f290:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
}
   1f294:	b005      	add	sp, #20
   1f296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!appMasterCb.inProgress)
   1f29a:	4e4f      	ldr	r6, [pc, #316]	; (1f3d8 <AppMasterProcDmMsg+0x274>)
   1f29c:	f896 309c 	ldrb.w	r3, [r6, #156]	; 0x9c
   1f2a0:	2b00      	cmp	r3, #0
   1f2a2:	d0a8      	beq.n	1f1f6 <AppMasterProcDmMsg+0x92>
  if (pMsg->hdr.status == HCI_SUCCESS)
   1f2a4:	78e3      	ldrb	r3, [r4, #3]
  pDev = &appMasterCb.scanResults[appMasterCb.idx];
   1f2a6:	f896 5097 	ldrb.w	r5, [r6, #151]	; 0x97
  if (pMsg->hdr.status == HCI_SUCCESS)
   1f2aa:	2b00      	cmp	r3, #0
   1f2ac:	d042      	beq.n	1f334 <AppMasterProcDmMsg+0x1d0>
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appMasterCb.dbHdl != APP_DB_HDL_NONE))
   1f2ae:	2b05      	cmp	r3, #5
   1f2b0:	d19e      	bne.n	1f1f0 <AppMasterProcDmMsg+0x8c>
   1f2b2:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
   1f2b6:	2800      	cmp	r0, #0
   1f2b8:	d09a      	beq.n	1f1f0 <AppMasterProcDmMsg+0x8c>
    appMasterCb.dbHdl = AppDbGetNextRecord(appMasterCb.dbHdl);
   1f2ba:	f7fe f839 	bl	1d330 <AppDbGetNextRecord>
   1f2be:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
    if ((appMasterCb.dbHdl != APP_DB_HDL_NONE) &&
   1f2c2:	2800      	cmp	r0, #0
   1f2c4:	d094      	beq.n	1f1f0 <AppMasterProcDmMsg+0x8c>
        ((pPeerKey = AppDbGetKey(appMasterCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1f2c6:	2200      	movs	r2, #0
   1f2c8:	2104      	movs	r1, #4
   1f2ca:	f7fe f933 	bl	1d534 <AppDbGetKey>
    if ((appMasterCb.dbHdl != APP_DB_HDL_NONE) &&
   1f2ce:	2800      	cmp	r0, #0
   1f2d0:	d08e      	beq.n	1f1f0 <AppMasterProcDmMsg+0x8c>
      DmPrivResolveAddr(pDev->addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   1f2d2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
   1f2d6:	4601      	mov	r1, r0
   1f2d8:	2200      	movs	r2, #0
   1f2da:	1970      	adds	r0, r6, r5
}
   1f2dc:	b005      	add	sp, #20
   1f2de:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      DmPrivResolveAddr(pDev->addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   1f2e2:	f7ee bcd1 	b.w	dc88 <DmPrivResolveAddr>
  if (pAppMasterReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1f2e6:	4b3e      	ldr	r3, [pc, #248]	; (1f3e0 <AppMasterProcDmMsg+0x27c>)
   1f2e8:	681b      	ldr	r3, [r3, #0]
   1f2ea:	781b      	ldrb	r3, [r3, #0]
   1f2ec:	2b00      	cmp	r3, #0
   1f2ee:	d03a      	beq.n	1f366 <AppMasterProcDmMsg+0x202>
  else if (pAppMasterReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1f2f0:	2b01      	cmp	r3, #1
   1f2f2:	d180      	bne.n	1f1f6 <AppMasterProcDmMsg+0x92>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1f2f4:	7928      	ldrb	r0, [r5, #4]
   1f2f6:	2111      	movs	r1, #17
}
   1f2f8:	b005      	add	sp, #20
   1f2fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1f2fe:	f7ed bfe7 	b.w	d2d0 <DmRemoteConnParamReqNegReply>
      appMasterCb.scanMode = APP_SCAN_MODE_NONE;
   1f302:	4b35      	ldr	r3, [pc, #212]	; (1f3d8 <AppMasterProcDmMsg+0x274>)
   1f304:	22ff      	movs	r2, #255	; 0xff
   1f306:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
}
   1f30a:	b005      	add	sp, #20
   1f30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            BdaCmp(pDev->addr, pMsg->scanReport.addr))
   1f310:	4628      	mov	r0, r5
   1f312:	4641      	mov	r1, r8
   1f314:	f7f6 fad8 	bl	158c8 <BdaCmp>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1f318:	2800      	cmp	r0, #0
   1f31a:	f47f af6c 	bne.w	1f1f6 <AppMasterProcDmMsg+0x92>
        else if (pDev->addrType == APP_ADDR_NONE)
   1f31e:	79ab      	ldrb	r3, [r5, #6]
   1f320:	e784      	b.n	1f22c <AppMasterProcDmMsg+0xc8>
            BdaCmp(pDev->addr, pMsg->extScanReport.addr))
   1f322:	4628      	mov	r0, r5
   1f324:	4649      	mov	r1, r9
   1f326:	f7f6 facf 	bl	158c8 <BdaCmp>
        if ((pDev->addrType == pMsg->extScanReport.addrType) &&
   1f32a:	2800      	cmp	r0, #0
   1f32c:	f47f af63 	bne.w	1f1f6 <AppMasterProcDmMsg+0x92>
        else if (pDev->addrType == APP_ADDR_NONE)
   1f330:	79ab      	ldrb	r3, [r5, #6]
   1f332:	e789      	b.n	1f248 <AppMasterProcDmMsg+0xe4>
    if ((pMsg->hdr.param == APP_RESOLVE_ADV_RPA) && DM_RAND_ADDR_RPA(pDev->directAddr, pDev->directAddrType))
   1f334:	8823      	ldrh	r3, [r4, #0]
   1f336:	bb83      	cbnz	r3, 1f39a <AppMasterProcDmMsg+0x236>
   1f338:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
   1f33c:	4433      	add	r3, r6
   1f33e:	012c      	lsls	r4, r5, #4
   1f340:	79df      	ldrb	r7, [r3, #7]
   1f342:	2f01      	cmp	r7, #1
   1f344:	d036      	beq.n	1f3b4 <AppMasterProcDmMsg+0x250>
    if(DmScanModeLeg())
   1f346:	f7ef f9bb 	bl	e6c0 <DmScanModeLeg>
   1f34a:	b1c0      	cbz	r0, 1f37e <AppMasterProcDmMsg+0x21a>
        AppConnOpen(pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   1f34c:	1b64      	subs	r4, r4, r5
   1f34e:	4434      	add	r4, r6
   1f350:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
        AppScanStop();
   1f354:	f000 fa32 	bl	1f7bc <AppScanStop>
        AppConnOpen(pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   1f358:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
   1f35c:	79a0      	ldrb	r0, [r4, #6]
   1f35e:	1971      	adds	r1, r6, r5
   1f360:	f000 fa46 	bl	1f7f0 <AppConnOpen>
   1f364:	e744      	b.n	1f1f0 <AppMasterProcDmMsg+0x8c>
    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1f366:	f8d4 1006 	ldr.w	r1, [r4, #6]
   1f36a:	f8d4 200a 	ldr.w	r2, [r4, #10]
   1f36e:	9101      	str	r1, [sp, #4]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1f370:	7928      	ldrb	r0, [r5, #4]
   1f372:	a901      	add	r1, sp, #4
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1f374:	e9cd 2302 	strd	r2, r3, [sp, #8]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1f378:	f7ed ff8c 	bl	d294 <DmRemoteConnParamReqReply>
   1f37c:	e73b      	b.n	1f1f6 <AppMasterProcDmMsg+0x92>
        AppExtConnOpen(pDev->secPhy, pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   1f37e:	1b64      	subs	r4, r4, r5
   1f380:	4434      	add	r4, r6
   1f382:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
        AppExtScanStop();
   1f386:	f000 f99b 	bl	1f6c0 <AppExtScanStop>
        AppExtConnOpen(pDev->secPhy, pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   1f38a:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   1f38e:	79a1      	ldrb	r1, [r4, #6]
   1f390:	7ba0      	ldrb	r0, [r4, #14]
   1f392:	1972      	adds	r2, r6, r5
   1f394:	f000 f9b2 	bl	1f6fc <AppExtConnOpen>
   1f398:	e72a      	b.n	1f1f0 <AppMasterProcDmMsg+0x8c>
   1f39a:	012c      	lsls	r4, r5, #4
   1f39c:	e7d3      	b.n	1f346 <AppMasterProcDmMsg+0x1e2>
          pDev->addrType = pMsg->scanReport.addrType;
   1f39e:	7ae3      	ldrb	r3, [r4, #11]
   1f3a0:	71ab      	strb	r3, [r5, #6]
          BdaCpy(pDev->addr, pMsg->scanReport.addr);
   1f3a2:	f104 010c 	add.w	r1, r4, #12
   1f3a6:	4628      	mov	r0, r5
   1f3a8:	f7f6 fa88 	bl	158bc <BdaCpy>
          pDev->directAddrType = pMsg->scanReport.directAddrType;
   1f3ac:	7ca3      	ldrb	r3, [r4, #18]
          BdaCpy(pDev->directAddr, pMsg->scanReport.directAddr);
   1f3ae:	f104 0113 	add.w	r1, r4, #19
   1f3b2:	e756      	b.n	1f262 <AppMasterProcDmMsg+0xfe>
    if ((pMsg->hdr.param == APP_RESOLVE_ADV_RPA) && DM_RAND_ADDR_RPA(pDev->directAddr, pDev->directAddrType))
   1f3b4:	7b5b      	ldrb	r3, [r3, #13]
   1f3b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f3ba:	2b40      	cmp	r3, #64	; 0x40
   1f3bc:	d1c3      	bne.n	1f346 <AppMasterProcDmMsg+0x1e2>
      DmPrivResolveAddr(pDev->directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   1f3be:	f7ef fa89 	bl	e8d4 <DmSecGetLocalIrk>
   1f3c2:	230f      	movs	r3, #15
   1f3c4:	fb03 6505 	mla	r5, r3, r5, r6
   1f3c8:	4601      	mov	r1, r0
   1f3ca:	463a      	mov	r2, r7
   1f3cc:	f105 0008 	add.w	r0, r5, #8
   1f3d0:	e784      	b.n	1f2dc <AppMasterProcDmMsg+0x178>
   1f3d2:	bf00      	nop
   1f3d4:	10005e7c 	.word	0x10005e7c
   1f3d8:	10005efc 	.word	0x10005efc
   1f3dc:	000280fc 	.word	0x000280fc
   1f3e0:	10002c60 	.word	0x10002c60

0001f3e4 <AppMasterSecProcDmMsg>:
{
   1f3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3e6:	4604      	mov	r4, r0
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1f3e8:	8800      	ldrh	r0, [r0, #0]
  switch(pMsg->hdr.event)
   1f3ea:	78a3      	ldrb	r3, [r4, #2]
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1f3ec:	4d56      	ldr	r5, [pc, #344]	; (1f548 <AppMasterSecProcDmMsg+0x164>)
   1f3ee:	1e42      	subs	r2, r0, #1
  switch(pMsg->hdr.event)
   1f3f0:	3b27      	subs	r3, #39	; 0x27
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1f3f2:	0156      	lsls	r6, r2, #5
{
   1f3f4:	b083      	sub	sp, #12
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1f3f6:	eb05 1242 	add.w	r2, r5, r2, lsl #5
  switch(pMsg->hdr.event)
   1f3fa:	2b3f      	cmp	r3, #63	; 0x3f
   1f3fc:	d827      	bhi.n	1f44e <AppMasterSecProcDmMsg+0x6a>
   1f3fe:	e8df f003 	tbb	[pc, r3]
   1f402:	8a7e      	.short	0x8a7e
   1f404:	28232026 	.word	0x28232026
   1f408:	26352626 	.word	0x26352626
   1f40c:	26264626 	.word	0x26264626
   1f410:	26262626 	.word	0x26262626
   1f414:	26615926 	.word	0x26615926
   1f418:	266c2626 	.word	0x266c2626
   1f41c:	26262626 	.word	0x26262626
   1f420:	26262626 	.word	0x26262626
   1f424:	26262626 	.word	0x26262626
   1f428:	26262626 	.word	0x26262626
   1f42c:	26262626 	.word	0x26262626
   1f430:	26262626 	.word	0x26262626
   1f434:	26262626 	.word	0x26262626
   1f438:	26262626 	.word	0x26262626
   1f43c:	26262626 	.word	0x26262626
   1f440:	7626      	.short	0x7626
  if (pMsg->pairCmpl.auth & DM_AUTH_BOND_FLAG)
   1f442:	7923      	ldrb	r3, [r4, #4]
   1f444:	07db      	lsls	r3, r3, #31
   1f446:	d46e      	bmi.n	1f526 <AppMasterSecProcDmMsg+0x142>
  pCb->initiatingSec = FALSE;
   1f448:	4435      	add	r5, r6
   1f44a:	2300      	movs	r3, #0
   1f44c:	722b      	strb	r3, [r5, #8]
}
   1f44e:	b003      	add	sp, #12
   1f450:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   1f452:	4435      	add	r5, r6
   1f454:	79ab      	ldrb	r3, [r5, #6]
   1f456:	2b00      	cmp	r3, #0
   1f458:	d0f9      	beq.n	1f44e <AppMasterSecProcDmMsg+0x6a>
   1f45a:	7923      	ldrb	r3, [r4, #4]
   1f45c:	2b00      	cmp	r3, #0
   1f45e:	d0f6      	beq.n	1f44e <AppMasterSecProcDmMsg+0x6a>
    pCb->bonded = TRUE;
   1f460:	4a3a      	ldr	r2, [pc, #232]	; (1f54c <AppMasterSecProcDmMsg+0x168>)
   1f462:	2101      	movs	r1, #1
    pCb->initiatingSec = FALSE;
   1f464:	2300      	movs	r3, #0
    pCb->bonded = TRUE;
   1f466:	5391      	strh	r1, [r2, r6]
    pCb->initiatingSec = FALSE;
   1f468:	722b      	strb	r3, [r5, #8]
   1f46a:	e7f0      	b.n	1f44e <AppMasterSecProcDmMsg+0x6a>
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   1f46c:	19ab      	adds	r3, r5, r6
   1f46e:	79da      	ldrb	r2, [r3, #7]
   1f470:	2a00      	cmp	r2, #0
   1f472:	d0ec      	beq.n	1f44e <AppMasterSecProcDmMsg+0x6a>
   1f474:	59a8      	ldr	r0, [r5, r6]
   1f476:	2800      	cmp	r0, #0
   1f478:	d0e9      	beq.n	1f44e <AppMasterSecProcDmMsg+0x6a>
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1f47a:	7ada      	ldrb	r2, [r3, #11]
   1f47c:	7fa5      	ldrb	r5, [r4, #30]
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1f47e:	4621      	mov	r1, r4
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1f480:	432a      	orrs	r2, r5
   1f482:	72da      	strb	r2, [r3, #11]
}
   1f484:	b003      	add	sp, #12
   1f486:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1f48a:	f7fe b871 	b.w	1d570 <AppDbSetKey>
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1f48e:	4b30      	ldr	r3, [pc, #192]	; (1f550 <AppMasterSecProcDmMsg+0x16c>)
   1f490:	681b      	ldr	r3, [r3, #0]
   1f492:	791b      	ldrb	r3, [r3, #4]
   1f494:	2b00      	cmp	r3, #0
   1f496:	d1da      	bne.n	1f44e <AppMasterSecProcDmMsg+0x6a>
   1f498:	4435      	add	r5, r6
   1f49a:	7a2b      	ldrb	r3, [r5, #8]
   1f49c:	2b00      	cmp	r3, #0
   1f49e:	d1d6      	bne.n	1f44e <AppMasterSecProcDmMsg+0x6a>
      (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   1f4a0:	b2c0      	uxtb	r0, r0
   1f4a2:	9201      	str	r2, [sp, #4]
   1f4a4:	f7ed ffaa 	bl	d3fc <DmConnSecLevel>
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1f4a8:	9a01      	ldr	r2, [sp, #4]
   1f4aa:	2800      	cmp	r0, #0
   1f4ac:	d1cf      	bne.n	1f44e <AppMasterSecProcDmMsg+0x6a>
    appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, TRUE, pCb);
   1f4ae:	7820      	ldrb	r0, [r4, #0]
   1f4b0:	2101      	movs	r1, #1
   1f4b2:	e02b      	b.n	1f50c <AppMasterSecProcDmMsg+0x128>
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1f4b4:	78e3      	ldrb	r3, [r4, #3]
   1f4b6:	2b00      	cmp	r3, #0
   1f4b8:	d1c9      	bne.n	1f44e <AppMasterSecProcDmMsg+0x6a>
   1f4ba:	59a8      	ldr	r0, [r5, r6]
   1f4bc:	2800      	cmp	r0, #0
   1f4be:	d0c6      	beq.n	1f44e <AppMasterSecProcDmMsg+0x6a>
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   1f4c0:	2101      	movs	r1, #1
   1f4c2:	e005      	b.n	1f4d0 <AppMasterSecProcDmMsg+0xec>
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1f4c4:	78e1      	ldrb	r1, [r4, #3]
   1f4c6:	2900      	cmp	r1, #0
   1f4c8:	d1c1      	bne.n	1f44e <AppMasterSecProcDmMsg+0x6a>
   1f4ca:	59a8      	ldr	r0, [r5, r6]
   1f4cc:	2800      	cmp	r0, #0
   1f4ce:	d0be      	beq.n	1f44e <AppMasterSecProcDmMsg+0x6a>
}
   1f4d0:	b003      	add	sp, #12
   1f4d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   1f4d6:	f7fe b93f 	b.w	1d758 <AppDbSetPeerAddedToRl>
  if (pMsg->hdr.status == HCI_SUCCESS)
   1f4da:	78e3      	ldrb	r3, [r4, #3]
   1f4dc:	2b00      	cmp	r3, #0
   1f4de:	d1b6      	bne.n	1f44e <AppMasterSecProcDmMsg+0x6a>
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1f4e0:	f7ee fa44 	bl	d96c <DmLlPrivEnabled>
}
   1f4e4:	b003      	add	sp, #12
   1f4e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1f4ea:	f7ff b903 	b.w	1e6f4 <SvcCoreGapCentAddrResUpdate>
      HciDrvRadioBoot(0);
   1f4ee:	2000      	movs	r0, #0
   1f4f0:	f7f9 fd32 	bl	18f58 <HciDrvRadioBoot>
}
   1f4f4:	b003      	add	sp, #12
   1f4f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DmDevReset();
   1f4fa:	f7ee b9a5 	b.w	d848 <DmDevReset>
  pCb->bonded = FALSE;
   1f4fe:	4b13      	ldr	r3, [pc, #76]	; (1f54c <AppMasterSecProcDmMsg+0x168>)
   1f500:	2100      	movs	r1, #0
   1f502:	5199      	str	r1, [r3, r6]
  appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, pAppSecCfg->initiateSec, pCb);
   1f504:	4b12      	ldr	r3, [pc, #72]	; (1f550 <AppMasterSecProcDmMsg+0x16c>)
   1f506:	681b      	ldr	r3, [r3, #0]
   1f508:	7919      	ldrb	r1, [r3, #4]
   1f50a:	b2c0      	uxtb	r0, r0
}
   1f50c:	b003      	add	sp, #12
   1f50e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, TRUE, pCb);
   1f512:	f7ff bdcb 	b.w	1f0ac <appMasterInitiateSec>
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f516:	59a8      	ldr	r0, [r5, r6]
   1f518:	2800      	cmp	r0, #0
   1f51a:	d098      	beq.n	1f44e <AppMasterSecProcDmMsg+0x6a>
}
   1f51c:	b003      	add	sp, #12
   1f51e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AppDbCheckValidRecord(pCb->dbHdl);
   1f522:	f7fd bf37 	b.w	1d394 <AppDbCheckValidRecord>
    pCb->bonded = TRUE;
   1f526:	19af      	adds	r7, r5, r6
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f528:	59a8      	ldr	r0, [r5, r6]
    pCb->bonded = TRUE;
   1f52a:	2301      	movs	r3, #1
   1f52c:	717b      	strb	r3, [r7, #5]
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f52e:	2800      	cmp	r0, #0
   1f530:	d08a      	beq.n	1f448 <AppMasterSecProcDmMsg+0x64>
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   1f532:	7af9      	ldrb	r1, [r7, #11]
   1f534:	f7fd ff28 	bl	1d388 <AppDbValidateRecord>
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1f538:	59ab      	ldr	r3, [r5, r6]
   1f53a:	2b00      	cmp	r3, #0
   1f53c:	d084      	beq.n	1f448 <AppMasterSecProcDmMsg+0x64>
      AppAddDevToResList(pMsg, pCb->connId);
   1f53e:	7939      	ldrb	r1, [r7, #4]
   1f540:	4620      	mov	r0, r4
   1f542:	f7ff fd4d 	bl	1efe0 <AppAddDevToResList>
  pCb->initiatingSec = FALSE;
   1f546:	e77f      	b.n	1f448 <AppMasterSecProcDmMsg+0x64>
   1f548:	10005e7c 	.word	0x10005e7c
   1f54c:	10005e81 	.word	0x10005e81
   1f550:	10005ef0 	.word	0x10005ef0

0001f554 <appConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t appConnOpen(uint8_t initPhys, uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   1f554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f558:	460d      	mov	r5, r1
   1f55a:	4616      	mov	r6, r2
  dmConnId_t  connId;
  appConnCb_t *pCb;

  /* open connection */
  connId = DmConnOpen(DM_CLIENT_ID_APP, initPhys, addrType, pAddr);
   1f55c:	4601      	mov	r1, r0
{
   1f55e:	461f      	mov	r7, r3
  connId = DmConnOpen(DM_CLIENT_ID_APP, initPhys, addrType, pAddr);
   1f560:	2003      	movs	r0, #3
   1f562:	4613      	mov	r3, r2
   1f564:	462a      	mov	r2, r5
   1f566:	f7ed ffd1 	bl	d50c <DmConnOpen>

  if (connId != DM_CONN_ID_NONE)
   1f56a:	4604      	mov	r4, r0
   1f56c:	b180      	cbz	r0, 1f590 <appConnOpen+0x3c>
  {
    /* set up conn. control block */
    pCb = &appConnCb[connId - 1];

    pCb->connId = connId;
   1f56e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1f5a8 <appConnOpen+0x54>
    pCb = &appConnCb[connId - 1];
   1f572:	f100 3cff 	add.w	ip, r0, #4294967295
    pCb->connId = connId;
   1f576:	ea4f 194c 	mov.w	r9, ip, lsl #5
   1f57a:	eb08 1c4c 	add.w	ip, r8, ip, lsl #5
   1f57e:	f88c 0004 	strb.w	r0, [ip, #4]

    /* if database record handle is in use */
    if ((dbHdl != APP_DB_HDL_NONE) && AppDbRecordInUse(dbHdl))
   1f582:	b147      	cbz	r7, 1f596 <appConnOpen+0x42>
   1f584:	4638      	mov	r0, r7
   1f586:	f7fd ff0b 	bl	1d3a0 <AppDbRecordInUse>
   1f58a:	b120      	cbz	r0, 1f596 <appConnOpen+0x42>
    {
      pCb->dbHdl = dbHdl;
   1f58c:	f848 7009 	str.w	r7, [r8, r9]
      pCb->dbHdl = AppDbFindByAddr(addrType, pAddr);
    }
  }

  return connId;
}
   1f590:	4620      	mov	r0, r4
   1f592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pCb->dbHdl = AppDbFindByAddr(addrType, pAddr);
   1f596:	4631      	mov	r1, r6
   1f598:	4628      	mov	r0, r5
   1f59a:	f7fd ff4f 	bl	1d43c <AppDbFindByAddr>
   1f59e:	f848 0009 	str.w	r0, [r8, r9]
}
   1f5a2:	4620      	mov	r0, r4
   1f5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f5a8:	10005e7c 	.word	0x10005e7c

0001f5ac <AppMasterSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterSecurityReq(dmConnId_t connId)
{
   1f5ac:	b538      	push	{r3, r4, r5, lr}

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[connId - 1];

  /* if master is not initiating security and not already secure */
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1f5ae:	4b0b      	ldr	r3, [pc, #44]	; (1f5dc <AppMasterSecurityReq+0x30>)
   1f5b0:	681b      	ldr	r3, [r3, #0]
   1f5b2:	791b      	ldrb	r3, [r3, #4]
   1f5b4:	b933      	cbnz	r3, 1f5c4 <AppMasterSecurityReq+0x18>
   1f5b6:	4d0a      	ldr	r5, [pc, #40]	; (1f5e0 <AppMasterSecurityReq+0x34>)
  pCb = &appConnCb[connId - 1];
   1f5b8:	1e42      	subs	r2, r0, #1
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1f5ba:	eb05 1542 	add.w	r5, r5, r2, lsl #5
   1f5be:	4604      	mov	r4, r0
   1f5c0:	7a2b      	ldrb	r3, [r5, #8]
   1f5c2:	b103      	cbz	r3, 1f5c6 <AppMasterSecurityReq+0x1a>
      (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE))
  {
    appMasterInitiateSec(connId, TRUE, pCb);
  }
}
   1f5c4:	bd38      	pop	{r3, r4, r5, pc}
      (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE))
   1f5c6:	f7ed ff19 	bl	d3fc <DmConnSecLevel>
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   1f5ca:	2800      	cmp	r0, #0
   1f5cc:	d1fa      	bne.n	1f5c4 <AppMasterSecurityReq+0x18>
    appMasterInitiateSec(connId, TRUE, pCb);
   1f5ce:	462a      	mov	r2, r5
   1f5d0:	4620      	mov	r0, r4
   1f5d2:	2101      	movs	r1, #1
}
   1f5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    appMasterInitiateSec(connId, TRUE, pCb);
   1f5d8:	f7ff bd68 	b.w	1f0ac <appMasterInitiateSec>
   1f5dc:	10005ef0 	.word	0x10005ef0
   1f5e0:	10005e7c 	.word	0x10005e7c

0001f5e4 <AppMasterResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterResolveAddr(dmEvt_t *pMsg, appDbHdl_t dbHdl, uint8_t resolveType)
{
   1f5e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t    idx;

  /* if address resolution's in progress or scan record is not found */
  if ((appMasterCb.inProgress) || ((idx = appScanResultFind(pMsg)) >= APP_SCAN_RESULT_MAX))
   1f5e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1f6bc <AppMasterResolveAddr+0xd8>
   1f5ec:	f898 409c 	ldrb.w	r4, [r8, #156]	; 0x9c
   1f5f0:	b10c      	cbz	r4, 1f5f6 <AppMasterResolveAddr+0x12>
      appMasterCb.idx = idx;
      appMasterCb.dbHdl = hdl;
      appMasterCb.inProgress = TRUE;
    }
  }
}
   1f5f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5f6:	4605      	mov	r5, r0
   1f5f8:	460f      	mov	r7, r1
   1f5fa:	4616      	mov	r6, r2
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   1f5fc:	46c3      	mov	fp, r8
            BdaCmp(pDev->addr, pMsg->extScanReport.addr))
   1f5fe:	f100 0a07 	add.w	sl, r0, #7
            BdaCmp(pDev->addr, pMsg->scanReport.addr))
   1f602:	f100 090c 	add.w	r9, r0, #12
   1f606:	e008      	b.n	1f61a <AppMasterResolveAddr+0x36>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1f608:	7aeb      	ldrb	r3, [r5, #11]
   1f60a:	429a      	cmp	r2, r3
   1f60c:	d036      	beq.n	1f67c <AppMasterResolveAddr+0x98>
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   1f60e:	3401      	adds	r4, #1
   1f610:	b2e4      	uxtb	r4, r4
   1f612:	2c0a      	cmp	r4, #10
   1f614:	f10b 0b0f 	add.w	fp, fp, #15
   1f618:	d0eb      	beq.n	1f5f2 <AppMasterResolveAddr+0xe>
    if(DmScanModeLeg())
   1f61a:	f7ef f851 	bl	e6c0 <DmScanModeLeg>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1f61e:	f89b 2006 	ldrb.w	r2, [fp, #6]
    if(DmScanModeLeg())
   1f622:	2800      	cmp	r0, #0
   1f624:	d1f0      	bne.n	1f608 <AppMasterResolveAddr+0x24>
        if ((pDev->addrType == pMsg->extScanReport.addrType) &&
   1f626:	79ab      	ldrb	r3, [r5, #6]
   1f628:	429a      	cmp	r2, r3
   1f62a:	d1f0      	bne.n	1f60e <AppMasterResolveAddr+0x2a>
            BdaCmp(pDev->addr, pMsg->extScanReport.addr))
   1f62c:	4658      	mov	r0, fp
   1f62e:	4651      	mov	r1, sl
   1f630:	f7f6 f94a 	bl	158c8 <BdaCmp>
        if ((pDev->addrType == pMsg->extScanReport.addrType) &&
   1f634:	2800      	cmp	r0, #0
   1f636:	d0ea      	beq.n	1f60e <AppMasterResolveAddr+0x2a>
  if (resolveType == APP_RESOLVE_DIRECT_RPA)
   1f638:	2e01      	cmp	r6, #1
   1f63a:	d026      	beq.n	1f68a <AppMasterResolveAddr+0xa6>
  else if (resolveType == APP_RESOLVE_ADV_RPA)
   1f63c:	2e00      	cmp	r6, #0
   1f63e:	d1d8      	bne.n	1f5f2 <AppMasterResolveAddr+0xe>
    appDbHdl_t hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1f640:	4630      	mov	r0, r6
   1f642:	f7fd fe75 	bl	1d330 <AppDbGetNextRecord>
    if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1f646:	4607      	mov	r7, r0
   1f648:	2800      	cmp	r0, #0
   1f64a:	d0d2      	beq.n	1f5f2 <AppMasterResolveAddr+0xe>
   1f64c:	4632      	mov	r2, r6
   1f64e:	2104      	movs	r1, #4
   1f650:	f7fd ff70 	bl	1d534 <AppDbGetKey>
   1f654:	4681      	mov	r9, r0
   1f656:	2800      	cmp	r0, #0
   1f658:	d0cb      	beq.n	1f5f2 <AppMasterResolveAddr+0xe>
        if(DmScanModeLeg())
   1f65a:	f7ef f831 	bl	e6c0 <DmScanModeLeg>
          DmPrivResolveAddr(pMsg->scanReport.addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   1f65e:	4632      	mov	r2, r6
   1f660:	4649      	mov	r1, r9
        if(DmScanModeLeg())
   1f662:	b338      	cbz	r0, 1f6b4 <AppMasterResolveAddr+0xd0>
          DmPrivResolveAddr(pMsg->scanReport.addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   1f664:	f105 000c 	add.w	r0, r5, #12
   1f668:	f7ee fb0e 	bl	dc88 <DmPrivResolveAddr>
      appMasterCb.inProgress = TRUE;
   1f66c:	2301      	movs	r3, #1
      appMasterCb.idx = idx;
   1f66e:	f888 4097 	strb.w	r4, [r8, #151]	; 0x97
      appMasterCb.dbHdl = hdl;
   1f672:	f8c8 7098 	str.w	r7, [r8, #152]	; 0x98
      appMasterCb.inProgress = TRUE;
   1f676:	f888 309c 	strb.w	r3, [r8, #156]	; 0x9c
   1f67a:	e7ba      	b.n	1f5f2 <AppMasterResolveAddr+0xe>
            BdaCmp(pDev->addr, pMsg->scanReport.addr))
   1f67c:	4658      	mov	r0, fp
   1f67e:	4649      	mov	r1, r9
   1f680:	f7f6 f922 	bl	158c8 <BdaCmp>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   1f684:	2800      	cmp	r0, #0
   1f686:	d0c2      	beq.n	1f60e <AppMasterResolveAddr+0x2a>
   1f688:	e7d6      	b.n	1f638 <AppMasterResolveAddr+0x54>
    if(DmScanModeLeg())
   1f68a:	f7ef f819 	bl	e6c0 <DmScanModeLeg>
   1f68e:	b140      	cbz	r0, 1f6a2 <AppMasterResolveAddr+0xbe>
        DmPrivResolveAddr(pMsg->scanReport.directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   1f690:	f7ef f920 	bl	e8d4 <DmSecGetLocalIrk>
   1f694:	4632      	mov	r2, r6
   1f696:	4601      	mov	r1, r0
   1f698:	f105 0013 	add.w	r0, r5, #19
   1f69c:	f7ee faf4 	bl	dc88 <DmPrivResolveAddr>
   1f6a0:	e7e4      	b.n	1f66c <AppMasterResolveAddr+0x88>
        DmPrivResolveAddr(pMsg->extScanReport.directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   1f6a2:	f7ef f917 	bl	e8d4 <DmSecGetLocalIrk>
   1f6a6:	4632      	mov	r2, r6
   1f6a8:	4601      	mov	r1, r0
   1f6aa:	f105 0015 	add.w	r0, r5, #21
   1f6ae:	f7ee faeb 	bl	dc88 <DmPrivResolveAddr>
    appMasterCb.idx = idx;
   1f6b2:	e7db      	b.n	1f66c <AppMasterResolveAddr+0x88>
          DmPrivResolveAddr(pMsg->extScanReport.addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   1f6b4:	1de8      	adds	r0, r5, #7
   1f6b6:	f7ee fae7 	bl	dc88 <DmPrivResolveAddr>
   1f6ba:	e7d7      	b.n	1f66c <AppMasterResolveAddr+0x88>
   1f6bc:	10005efc 	.word	0x10005efc

0001f6c0 <AppExtScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppExtScanStop(void)
{
   1f6c0:	b508      	push	{r3, lr}
  if (DmScanModeExt())
   1f6c2:	f7ee feff 	bl	e4c4 <DmScanModeExt>
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f6c6:	4b0b      	ldr	r3, [pc, #44]	; (1f6f4 <AppExtScanStop+0x34>)
   1f6c8:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
  if (DmScanModeExt())
   1f6cc:	b108      	cbz	r0, 1f6d2 <AppExtScanStop+0x12>
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f6ce:	2aff      	cmp	r2, #255	; 0xff
   1f6d0:	d006      	beq.n	1f6e0 <AppExtScanStop+0x20>
  if (appMasterCb.scanMode == APP_SCAN_MODE_EXT)
   1f6d2:	2a01      	cmp	r2, #1
   1f6d4:	d007      	beq.n	1f6e6 <AppExtScanStop+0x26>
    /* stop address resolution */
    appMasterCb.inProgress = FALSE;

    DmScanStop();
  }
}
   1f6d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as legacy");
   1f6da:	4807      	ldr	r0, [pc, #28]	; (1f6f8 <AppExtScanStop+0x38>)
   1f6dc:	f7fe bfdc 	b.w	1e698 <WsfTrace>
      appMasterCb.scanMode = APP_SCAN_MODE_EXT;
   1f6e0:	2201      	movs	r2, #1
   1f6e2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    appMasterCb.inProgress = FALSE;
   1f6e6:	2200      	movs	r2, #0
   1f6e8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
   1f6ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DmScanStop();
   1f6f0:	f7ee bbe0 	b.w	deb4 <DmScanStop>
   1f6f4:	10005efc 	.word	0x10005efc
   1f6f8:	00028110 	.word	0x00028110

0001f6fc <AppExtConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t AppExtConnOpen(uint8_t initPhys, uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   1f6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f700:	461d      	mov	r5, r3
   1f702:	4604      	mov	r4, r0
   1f704:	460f      	mov	r7, r1
   1f706:	4616      	mov	r6, r2
  if (DmScanModeExt())
   1f708:	f7ee fedc 	bl	e4c4 <DmScanModeExt>
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f70c:	4b12      	ldr	r3, [pc, #72]	; (1f758 <AppExtConnOpen+0x5c>)
  if (DmScanModeExt())
   1f70e:	b158      	cbz	r0, 1f728 <AppExtConnOpen+0x2c>
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f710:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
   1f714:	28ff      	cmp	r0, #255	; 0xff
   1f716:	d013      	beq.n	1f740 <AppExtConnOpen+0x44>
  if (appMasterCb.scanMode == APP_SCAN_MODE_EXT)
   1f718:	2801      	cmp	r0, #1
   1f71a:	d009      	beq.n	1f730 <AppExtConnOpen+0x34>
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as legacy");
   1f71c:	480f      	ldr	r0, [pc, #60]	; (1f75c <AppExtConnOpen+0x60>)
   1f71e:	f7fe ffbb 	bl	1e698 <WsfTrace>
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
  }

  /* wrong connect mode */
  return DM_CONN_ID_NONE;
}
   1f722:	2000      	movs	r0, #0
   1f724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f728:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
  if (appMasterCb.scanMode == APP_SCAN_MODE_EXT)
   1f72c:	2801      	cmp	r0, #1
   1f72e:	d1f5      	bne.n	1f71c <AppExtConnOpen+0x20>
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
   1f730:	462b      	mov	r3, r5
   1f732:	4632      	mov	r2, r6
   1f734:	4639      	mov	r1, r7
   1f736:	4620      	mov	r0, r4
}
   1f738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
   1f73c:	f7ff bf0a 	b.w	1f554 <appConnOpen>
      appMasterCb.scanMode = APP_SCAN_MODE_EXT;
   1f740:	2201      	movs	r2, #1
   1f742:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
   1f746:	4639      	mov	r1, r7
   1f748:	462b      	mov	r3, r5
   1f74a:	4632      	mov	r2, r6
   1f74c:	4620      	mov	r0, r4
}
   1f74e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
   1f752:	f7ff beff 	b.w	1f554 <appConnOpen>
   1f756:	bf00      	nop
   1f758:	10005efc 	.word	0x10005efc
   1f75c:	00028110 	.word	0x00028110

0001f760 <AppScanStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppScanStart(uint8_t mode, uint8_t scanType, uint16_t duration)
{
   1f760:	b570      	push	{r4, r5, r6, lr}
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f762:	4d13      	ldr	r5, [pc, #76]	; (1f7b0 <AppScanStart+0x50>)
   1f764:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
{
   1f768:	b084      	sub	sp, #16
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f76a:	2bff      	cmp	r3, #255	; 0xff
{
   1f76c:	f88d 100f 	strb.w	r1, [sp, #15]
   1f770:	4606      	mov	r6, r0
   1f772:	4614      	mov	r4, r2
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f774:	d017      	beq.n	1f7a6 <AppScanStart+0x46>
  if (appMasterCb.scanMode == APP_SCAN_MODE_LEG)
   1f776:	b98b      	cbnz	r3, 1f79c <AppScanStart+0x3c>
  if (appMasterScanMode())
  {
    DmScanSetInterval(HCI_SCAN_PHY_LE_1M_BIT, &pAppMasterCfg->scanInterval, &pAppMasterCfg->scanWindow);
   1f778:	4b0e      	ldr	r3, [pc, #56]	; (1f7b4 <AppScanStart+0x54>)
   1f77a:	6819      	ldr	r1, [r3, #0]
   1f77c:	2001      	movs	r0, #1
   1f77e:	1c8a      	adds	r2, r1, #2
   1f780:	f7ee fbaa 	bl	ded8 <DmScanSetInterval>

    DmScanStart(HCI_SCAN_PHY_LE_1M_BIT, mode, &scanType, TRUE, duration, 0);
   1f784:	2301      	movs	r3, #1
   1f786:	2200      	movs	r2, #0
   1f788:	e9cd 4200 	strd	r4, r2, [sp]
   1f78c:	4631      	mov	r1, r6
   1f78e:	f10d 020f 	add.w	r2, sp, #15
   1f792:	4618      	mov	r0, r3
   1f794:	f7ee fb20 	bl	ddd8 <DmScanStart>
  }
}
   1f798:	b004      	add	sp, #16
   1f79a:	bd70      	pop	{r4, r5, r6, pc}
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as extended");
   1f79c:	4806      	ldr	r0, [pc, #24]	; (1f7b8 <AppScanStart+0x58>)
   1f79e:	f7fe ff7b 	bl	1e698 <WsfTrace>
}
   1f7a2:	b004      	add	sp, #16
   1f7a4:	bd70      	pop	{r4, r5, r6, pc}
    appMasterCb.scanMode = APP_SCAN_MODE_LEG;
   1f7a6:	2300      	movs	r3, #0
   1f7a8:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
    return TRUE;
   1f7ac:	e7e4      	b.n	1f778 <AppScanStart+0x18>
   1f7ae:	bf00      	nop
   1f7b0:	10005efc 	.word	0x10005efc
   1f7b4:	10005eec 	.word	0x10005eec
   1f7b8:	00028144 	.word	0x00028144

0001f7bc <AppScanStop>:
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f7bc:	4b0a      	ldr	r3, [pc, #40]	; (1f7e8 <AppScanStop+0x2c>)
   1f7be:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   1f7c2:	2aff      	cmp	r2, #255	; 0xff
   1f7c4:	d008      	beq.n	1f7d8 <AppScanStop+0x1c>
  if (appMasterCb.scanMode == APP_SCAN_MODE_LEG)
   1f7c6:	b922      	cbnz	r2, 1f7d2 <AppScanStop+0x16>
void AppScanStop(void)
{
  if (appMasterScanMode())
  {
    /* stop address resolution */
    appMasterCb.inProgress = FALSE;
   1f7c8:	2200      	movs	r2, #0
   1f7ca:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

    DmScanStop();
   1f7ce:	f7ee bb71 	b.w	deb4 <DmScanStop>
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as extended");
   1f7d2:	4806      	ldr	r0, [pc, #24]	; (1f7ec <AppScanStop+0x30>)
   1f7d4:	f7fe bf60 	b.w	1e698 <WsfTrace>
    appMasterCb.scanMode = APP_SCAN_MODE_LEG;
   1f7d8:	2200      	movs	r2, #0
   1f7da:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    appMasterCb.inProgress = FALSE;
   1f7de:	2200      	movs	r2, #0
   1f7e0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    DmScanStop();
   1f7e4:	f7ee bb66 	b.w	deb4 <DmScanStop>
   1f7e8:	10005efc 	.word	0x10005efc
   1f7ec:	00028144 	.word	0x00028144

0001f7f0 <AppConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t AppConnOpen(uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   1f7f0:	b570      	push	{r4, r5, r6, lr}
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f7f2:	4d0e      	ldr	r5, [pc, #56]	; (1f82c <AppConnOpen+0x3c>)
   1f7f4:	f895 409d 	ldrb.w	r4, [r5, #157]	; 0x9d
   1f7f8:	2cff      	cmp	r4, #255	; 0xff
{
   1f7fa:	4613      	mov	r3, r2
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   1f7fc:	d00c      	beq.n	1f818 <AppConnOpen+0x28>
  if (appMasterCb.scanMode == APP_SCAN_MODE_LEG)
   1f7fe:	b934      	cbnz	r4, 1f80e <AppConnOpen+0x1e>
  if (appMasterScanMode())
  {
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   1f800:	460a      	mov	r2, r1
  }

  /* wrong connect mode */
  return DM_CONN_ID_NONE;
}
   1f802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   1f806:	4601      	mov	r1, r0
   1f808:	2001      	movs	r0, #1
   1f80a:	f7ff bea3 	b.w	1f554 <appConnOpen>
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as extended");
   1f80e:	4808      	ldr	r0, [pc, #32]	; (1f830 <AppConnOpen+0x40>)
   1f810:	f7fe ff42 	bl	1e698 <WsfTrace>
}
   1f814:	2000      	movs	r0, #0
   1f816:	bd70      	pop	{r4, r5, r6, pc}
    appMasterCb.scanMode = APP_SCAN_MODE_LEG;
   1f818:	2200      	movs	r2, #0
   1f81a:	f885 209d 	strb.w	r2, [r5, #157]	; 0x9d
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   1f81e:	460a      	mov	r2, r1
}
   1f820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   1f824:	4601      	mov	r1, r0
   1f826:	2001      	movs	r0, #1
   1f828:	f7ff be94 	b.w	1f554 <appConnOpen>
   1f82c:	10005efc 	.word	0x10005efc
   1f830:	00028144 	.word	0x00028144

0001f834 <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   1f834:	b5f0      	push	{r4, r5, r6, r7, lr}
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;

  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1f836:	7883      	ldrb	r3, [r0, #2]
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   1f838:	7804      	ldrb	r4, [r0, #0]
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1f83a:	2b27      	cmp	r3, #39	; 0x27
{
   1f83c:	b083      	sub	sp, #12
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1f83e:	d023      	beq.n	1f888 <AppServerConnCback+0x54>
    }

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
  }
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   1f840:	2b2a      	cmp	r3, #42	; 0x2a
   1f842:	d003      	beq.n	1f84c <AppServerConnCback+0x18>
    }

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
  }
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1f844:	2b28      	cmp	r3, #40	; 0x28
   1f846:	d042      	beq.n	1f8ce <AppServerConnCback+0x9a>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
    }
  }
}
   1f848:	b003      	add	sp, #12
   1f84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   1f84c:	7903      	ldrb	r3, [r0, #4]
   1f84e:	07db      	lsls	r3, r3, #31
   1f850:	d450      	bmi.n	1f8f4 <AppServerConnCback+0xc0>
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   1f852:	4620      	mov	r0, r4
   1f854:	f7ff fbbc 	bl	1efd0 <AppDbGetHdl>
   1f858:	4605      	mov	r5, r0
   1f85a:	2800      	cmp	r0, #0
   1f85c:	d0f4      	beq.n	1f848 <AppServerConnCback+0x14>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
   1f85e:	2108      	movs	r1, #8
   1f860:	2200      	movs	r2, #0
   1f862:	f7fd fe67 	bl	1d534 <AppDbGetKey>
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   1f866:	4601      	mov	r1, r0
   1f868:	2800      	cmp	r0, #0
   1f86a:	d0ed      	beq.n	1f848 <AppServerConnCback+0x14>
    AttsSetCsrk(connId, pPeerKey->csrk.key, FALSE);
   1f86c:	2200      	movs	r2, #0
   1f86e:	4620      	mov	r0, r4
   1f870:	f7f5 fcd0 	bl	15214 <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   1f874:	4628      	mov	r0, r5
   1f876:	f7fd ff63 	bl	1d740 <AppDbGetPeerSignCounter>
   1f87a:	4601      	mov	r1, r0
   1f87c:	4620      	mov	r0, r4
}
   1f87e:	b003      	add	sp, #12
   1f880:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   1f884:	f7f5 bcd0 	b.w	15228 <AttsSetSignCounter>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1f888:	4620      	mov	r0, r4
   1f88a:	f7ff fba1 	bl	1efd0 <AppDbGetHdl>
   1f88e:	4605      	mov	r5, r0
   1f890:	2800      	cmp	r0, #0
   1f892:	d050      	beq.n	1f936 <AppServerConnCback+0x102>
      AppDbGetCsfRecord(dbHdl, &changeAwareState, &pCsf);
   1f894:	aa01      	add	r2, sp, #4
   1f896:	f10d 0103 	add.w	r1, sp, #3
   1f89a:	f7fd fef9 	bl	1d690 <AppDbGetCsfRecord>
      AttsCsfConnOpen(connId, changeAwareState, pCsf);
   1f89e:	9a01      	ldr	r2, [sp, #4]
   1f8a0:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1f8a4:	4620      	mov	r0, r4
   1f8a6:	f7f4 f855 	bl	13954 <AttsCsfConnOpen>
      AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1f8aa:	4628      	mov	r0, r5
   1f8ac:	f7fd fee8 	bl	1d680 <AppDbGetCccTbl>
   1f8b0:	4601      	mov	r1, r0
   1f8b2:	4620      	mov	r0, r4
   1f8b4:	f7f3 fedc 	bl	13670 <AttsCccInitTable>
      if (changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   1f8b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1f8bc:	2b03      	cmp	r3, #3
   1f8be:	d1c8      	bne.n	1f852 <AppServerConnCback+0x1e>
        GattSendServiceChangedInd(connId, ATT_HANDLE_START, ATT_HANDLE_MAX);
   1f8c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f8c4:	2101      	movs	r1, #1
   1f8c6:	4620      	mov	r0, r4
   1f8c8:	f7f5 ffc6 	bl	15858 <GattSendServiceChangedInd>
   1f8cc:	e7c1      	b.n	1f852 <AppServerConnCback+0x1e>
    AttsCccClearTable(connId);
   1f8ce:	4620      	mov	r0, r4
   1f8d0:	f7f3 ff26 	bl	13720 <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1f8d4:	4620      	mov	r0, r4
   1f8d6:	f7ff fb7b 	bl	1efd0 <AppDbGetHdl>
   1f8da:	4605      	mov	r5, r0
   1f8dc:	2800      	cmp	r0, #0
   1f8de:	d0b3      	beq.n	1f848 <AppServerConnCback+0x14>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   1f8e0:	4620      	mov	r0, r4
   1f8e2:	f7f5 fca9 	bl	15238 <AttsGetSignCounter>
   1f8e6:	4601      	mov	r1, r0
   1f8e8:	4628      	mov	r0, r5
}
   1f8ea:	b003      	add	sp, #12
   1f8ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   1f8f0:	f7fd bf2a 	b.w	1d748 <AppDbSetPeerSignCounter>
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   1f8f4:	4620      	mov	r0, r4
   1f8f6:	f7ff fae3 	bl	1eec0 <AppCheckBonded>
   1f8fa:	4605      	mov	r5, r0
   1f8fc:	2800      	cmp	r0, #0
   1f8fe:	d1a8      	bne.n	1f852 <AppServerConnCback+0x1e>
        ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE))
   1f900:	4620      	mov	r0, r4
   1f902:	f7ff fb65 	bl	1efd0 <AppDbGetHdl>
    if (bonded && (AppCheckBonded(connId) == FALSE) &&
   1f906:	4607      	mov	r7, r0
   1f908:	2800      	cmp	r0, #0
   1f90a:	d0a2      	beq.n	1f852 <AppServerConnCback+0x1e>
      tableLen = AttsGetCccTableLen();
   1f90c:	f7f3 ff42 	bl	13794 <AttsGetCccTableLen>
      for (idx = 0; idx < tableLen; idx++)
   1f910:	4606      	mov	r6, r0
   1f912:	b1d0      	cbz	r0, 1f94a <AppServerConnCback+0x116>
   1f914:	4629      	mov	r1, r5
   1f916:	e003      	b.n	1f920 <AppServerConnCback+0xec>
   1f918:	3501      	adds	r5, #1
   1f91a:	b2e9      	uxtb	r1, r5
   1f91c:	428e      	cmp	r6, r1
   1f91e:	d914      	bls.n	1f94a <AppServerConnCback+0x116>
        if ((cccValue = AttsCccGet(connId, idx)) != 0)
   1f920:	4620      	mov	r0, r4
   1f922:	f7f3 ff11 	bl	13748 <AttsCccGet>
   1f926:	2800      	cmp	r0, #0
   1f928:	d0f6      	beq.n	1f918 <AppServerConnCback+0xe4>
          AppDbSetCccTblValue(dbHdl, idx, cccValue);
   1f92a:	4602      	mov	r2, r0
   1f92c:	b2a9      	uxth	r1, r5
   1f92e:	4638      	mov	r0, r7
   1f930:	f7fd fea8 	bl	1d684 <AppDbSetCccTblValue>
   1f934:	e7f0      	b.n	1f918 <AppServerConnCback+0xe4>
      AttsCccInitTable(connId, NULL);
   1f936:	4601      	mov	r1, r0
   1f938:	4620      	mov	r0, r4
   1f93a:	f7f3 fe99 	bl	13670 <AttsCccInitTable>
      AttsCsfConnOpen(connId, TRUE, NULL);
   1f93e:	462a      	mov	r2, r5
   1f940:	2101      	movs	r1, #1
   1f942:	4620      	mov	r0, r4
   1f944:	f7f4 f806 	bl	13954 <AttsCsfConnOpen>
   1f948:	e783      	b.n	1f852 <AppServerConnCback+0x1e>
      AttsCsfGetFeatures(connId, csf, sizeof(csf));
   1f94a:	a901      	add	r1, sp, #4
   1f94c:	2201      	movs	r2, #1
   1f94e:	4620      	mov	r0, r4
   1f950:	f7f4 f810 	bl	13974 <AttsCsfGetFeatures>
      AppDbSetCsfRecord(dbHdl, AttsCsfGetChangeAwareState(connId), csf);
   1f954:	4620      	mov	r0, r4
   1f956:	f7f4 f81b 	bl	13990 <AttsCsfGetChangeAwareState>
   1f95a:	aa01      	add	r2, sp, #4
   1f95c:	4601      	mov	r1, r0
   1f95e:	4638      	mov	r0, r7
   1f960:	f7fd fe9c 	bl	1d69c <AppDbSetCsfRecord>
   1f964:	e775      	b.n	1f852 <AppServerConnCback+0x1e>
   1f966:	bf00      	nop

0001f968 <AppServerProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerProcAttMsg(wsfMsgHdr_t *pMsg)
{
   1f968:	b510      	push	{r4, lr}
  switch(pMsg->event)
   1f96a:	7883      	ldrb	r3, [r0, #2]
   1f96c:	2b0f      	cmp	r3, #15
{
   1f96e:	4604      	mov	r4, r0
  switch(pMsg->event)
   1f970:	d021      	beq.n	1f9b6 <AppServerProcAttMsg+0x4e>
   1f972:	2b11      	cmp	r3, #17
   1f974:	d122      	bne.n	1f9bc <AppServerProcAttMsg+0x54>
  uint8_t *pCurrentHash = AppDbGetDbHash();
   1f976:	f7fd fea7 	bl	1d6c8 <AppDbGetDbHash>
    if (memcmp(pMsg->pValue, pCurrentHash, ATT_DATABASE_HASH_LEN))
   1f97a:	6864      	ldr	r4, [r4, #4]
  if (pCurrentHash != NULL)
   1f97c:	4601      	mov	r1, r0
   1f97e:	b120      	cbz	r0, 1f98a <AppServerProcAttMsg+0x22>
    if (memcmp(pMsg->pValue, pCurrentHash, ATT_DATABASE_HASH_LEN))
   1f980:	2210      	movs	r2, #16
   1f982:	4620      	mov	r0, r4
   1f984:	f003 fca8 	bl	232d8 <memcmp>
   1f988:	b1c0      	cbz	r0, 1f9bc <AppServerProcAttMsg+0x54>
    AppDbSetDbHash(pMsg->pValue);
   1f98a:	4620      	mov	r0, r4
   1f98c:	f7fd fea0 	bl	1d6d0 <AppDbSetDbHash>
    AppDbSetClientsChangeAwareState(APP_DB_HDL_NONE, ATTS_CLIENT_CHANGE_UNAWARE);
   1f990:	2103      	movs	r1, #3
   1f992:	2000      	movs	r0, #0
   1f994:	f7fd fe8a 	bl	1d6ac <AppDbSetClientsChangeAwareState>
    AttsCsfSetClientsChangeAwarenessState(DM_CONN_ID_NONE, ATTS_CLIENT_CHANGE_UNAWARE);
   1f998:	2103      	movs	r1, #3
   1f99a:	2000      	movs	r0, #0
   1f99c:	f7f3 ffb6 	bl	1390c <AttsCsfSetClientsChangeAwarenessState>
    APP_TRACE_INFO0("Database hash updated");
   1f9a0:	480e      	ldr	r0, [pc, #56]	; (1f9dc <AppServerProcAttMsg+0x74>)
   1f9a2:	f7fe fe79 	bl	1e698 <WsfTrace>
      break;

    default:
      break;
  }
}
   1f9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GattSendServiceChangedInd(DM_CONN_ID_NONE, ATT_HANDLE_START, ATT_HANDLE_MAX);
   1f9aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f9ae:	2101      	movs	r1, #1
   1f9b0:	2000      	movs	r0, #0
   1f9b2:	f7f5 bf51 	b.w	15858 <GattSendServiceChangedInd>
  if (pMsg->handle == GATT_SC_HDL)
   1f9b6:	8943      	ldrh	r3, [r0, #10]
   1f9b8:	2b12      	cmp	r3, #18
   1f9ba:	d000      	beq.n	1f9be <AppServerProcAttMsg+0x56>
}
   1f9bc:	bd10      	pop	{r4, pc}
    dmConnId_t  connId = (dmConnId_t)pMsg->hdr.param;
   1f9be:	7804      	ldrb	r4, [r0, #0]
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1f9c0:	4620      	mov	r0, r4
   1f9c2:	f7ff fb05 	bl	1efd0 <AppDbGetHdl>
   1f9c6:	b110      	cbz	r0, 1f9ce <AppServerProcAttMsg+0x66>
      AppDbSetClientsChangeAwareState(dbHdl, ATTS_CLIENT_CHANGE_AWARE);
   1f9c8:	2100      	movs	r1, #0
   1f9ca:	f7fd fe6f 	bl	1d6ac <AppDbSetClientsChangeAwareState>
    AttsCsfSetClientsChangeAwarenessState(connId, ATTS_CLIENT_CHANGE_AWARE);
   1f9ce:	4620      	mov	r0, r4
   1f9d0:	2100      	movs	r1, #0
}
   1f9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    AttsCsfSetClientsChangeAwarenessState(connId, ATTS_CLIENT_CHANGE_AWARE);
   1f9d6:	f7f3 bf99 	b.w	1390c <AttsCsfSetClientsChangeAwarenessState>
   1f9da:	bf00      	nop
   1f9dc:	0002817c 	.word	0x0002817c

0001f9e0 <appSetAdvScanDataFrag>:
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1f9e0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
{
   1f9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1f9e8:	f103 0210 	add.w	r2, r3, #16
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1f9ec:	4e21      	ldr	r6, [pc, #132]	; (1fa74 <appSetAdvScanDataFrag+0x94>)
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1f9ee:	f103 0720 	add.w	r7, r3, #32
   1f9f2:	f836 4012 	ldrh.w	r4, [r6, r2, lsl #1]
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1f9f6:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1f9fa:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1f9fe:	f100 0228 	add.w	r2, r0, #40	; 0x28
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1fa02:	1ae4      	subs	r4, r4, r3
   1fa04:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   1fa08:	b2a4      	uxth	r4, r4
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1fa0a:	4294      	cmp	r4, r2
   1fa0c:	bf28      	it	cs
   1fa0e:	4614      	movcs	r4, r2
{
   1fa10:	b082      	sub	sp, #8
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   1fa12:	b364      	cbz	r4, 1fa6e <appSetAdvScanDataFrag+0x8e>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1fa14:	2cfb      	cmp	r4, #251	; 0xfb
   1fa16:	d91d      	bls.n	1fa54 <appSetAdvScanDataFrag+0x74>
   1fa18:	4680      	mov	r8, r0
      fragLen = remainLen;
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1fa1a:	f001 0a01 	and.w	sl, r1, #1
   1fa1e:	2201      	movs	r2, #1
   1fa20:	4625      	mov	r5, r4
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   1fa22:	4611      	mov	r1, r2
      fragLen = HCI_EXT_ADV_DATA_LEN;
   1fa24:	24fb      	movs	r4, #251	; 0xfb
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1fa26:	eb09 0203 	add.w	r2, r9, r3
   1fa2a:	9200      	str	r2, [sp, #0]
   1fa2c:	b2e3      	uxtb	r3, r4
   1fa2e:	4652      	mov	r2, sl
   1fa30:	4640      	mov	r0, r8
   1fa32:	f7ec fcb5 	bl	c3a0 <DmAdvSetData>
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1fa36:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   1fa3a:	1b2d      	subs	r5, r5, r4
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1fa3c:	4423      	add	r3, r4
   1fa3e:	b29b      	uxth	r3, r3
    remainLen -= fragLen;
   1fa40:	b2ac      	uxth	r4, r5
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1fa42:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    firstFrag = FALSE;
   1fa46:	2200      	movs	r2, #0
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   1fa48:	2102      	movs	r1, #2
  while (remainLen > 0)
   1fa4a:	b184      	cbz	r4, 1fa6e <appSetAdvScanDataFrag+0x8e>
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1fa4c:	2cfb      	cmp	r4, #251	; 0xfb
   1fa4e:	d8e7      	bhi.n	1fa20 <appSetAdvScanDataFrag+0x40>
   1fa50:	4625      	mov	r5, r4
   1fa52:	e7e8      	b.n	1fa26 <appSetAdvScanDataFrag+0x46>
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1fa54:	444b      	add	r3, r9
   1fa56:	9300      	str	r3, [sp, #0]
   1fa58:	f001 0201 	and.w	r2, r1, #1
   1fa5c:	b2e3      	uxtb	r3, r4
   1fa5e:	2103      	movs	r1, #3
   1fa60:	f7ec fc9e 	bl	c3a0 <DmAdvSetData>
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1fa64:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1fa68:	4423      	add	r3, r4
   1fa6a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
  }
}
   1fa6e:	b002      	add	sp, #8
   1fa70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fa74:	10005f9c 	.word	0x10005f9c

0001fa78 <appSetAdvScanData>:
{
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1fa78:	0049      	lsls	r1, r1, #1
{
   1fa7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1fa7e:	b2cc      	uxtb	r4, r1
  scanLoc = APP_MODE_2_SCAN_LOC(mode);

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1fa80:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   1fa84:	4d28      	ldr	r5, [pc, #160]	; (1fb28 <appSetAdvScanData+0xb0>)
   1fa86:	f103 0a20 	add.w	sl, r3, #32
   1fa8a:	f103 0710 	add.w	r7, r3, #16
   1fa8e:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
   1fa92:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1fa96:	f104 0801 	add.w	r8, r4, #1
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1fa9a:	429a      	cmp	r2, r3
{
   1fa9c:	4606      	mov	r6, r0
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1fa9e:	fa5f f888 	uxtb.w	r8, r8
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1faa2:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1faa6:	d325      	bcc.n	1faf4 <appSetAdvScanData+0x7c>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1faa8:	eb09 0308 	add.w	r3, r9, r8
   1faac:	f103 0220 	add.w	r2, r3, #32
   1fab0:	3310      	adds	r3, #16
   1fab2:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   1fab6:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
   1faba:	429a      	cmp	r2, r3
   1fabc:	d22e      	bcs.n	1fb1c <appSetAdvScanData+0xa4>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1fabe:	444c      	add	r4, r9
    appSetAdvScanDataFrag(advHandle, scanLoc);
   1fac0:	4641      	mov	r1, r8
   1fac2:	4630      	mov	r0, r6
   1fac4:	f7ff ff8c 	bl	1f9e0 <appSetAdvScanDataFrag>
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1fac8:	f104 0320 	add.w	r3, r4, #32
   1facc:	3410      	adds	r4, #16
   1face:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
   1fad2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1fad6:	429a      	cmp	r2, r3
   1fad8:	d30a      	bcc.n	1faf0 <appSetAdvScanData+0x78>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   1fada:	44c8      	add	r8, r9
   1fadc:	f108 0320 	add.w	r3, r8, #32
   1fae0:	f108 0810 	add.w	r8, r8, #16
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1fae4:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
   1fae8:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
   1faec:	429a      	cmp	r2, r3
   1faee:	d215      	bcs.n	1fb1c <appSetAdvScanData+0xa4>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
  }
}
   1faf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    appSetAdvScanDataFrag(advHandle, advLoc);
   1faf4:	4621      	mov	r1, r4
   1faf6:	f7ff ff73 	bl	1f9e0 <appSetAdvScanDataFrag>
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1fafa:	eb09 0308 	add.w	r3, r9, r8
   1fafe:	f103 0220 	add.w	r2, r3, #32
   1fb02:	3310      	adds	r3, #16
   1fb04:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   1fb08:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
   1fb0c:	429a      	cmp	r2, r3
   1fb0e:	d3d6      	bcc.n	1fabe <appSetAdvScanData+0x46>
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1fb10:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
   1fb14:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   1fb18:	429a      	cmp	r2, r3
   1fb1a:	d3e9      	bcc.n	1faf0 <appSetAdvScanData+0x78>
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   1fb1c:	4435      	add	r5, r6
   1fb1e:	2301      	movs	r3, #1
   1fb20:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
}
   1fb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fb28:	10005f9c 	.word	0x10005f9c

0001fb2c <appSlaveProcMsg>:
  appConnCb_t *pCb;

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];

  switch(pMsg->event)
   1fb2c:	7883      	ldrb	r3, [r0, #2]
   1fb2e:	2b10      	cmp	r3, #16
   1fb30:	d000      	beq.n	1fb34 <appSlaveProcMsg+0x8>
   1fb32:	4770      	bx	lr
  pCb = &appConnCb[pMsg->param - 1];
   1fb34:	8803      	ldrh	r3, [r0, #0]
{
   1fb36:	b570      	push	{r4, r5, r6, lr}
  {
    case APP_CONN_UPDATE_TIMEOUT_IND:
      /* Check state to determine if read remote features is needed */
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1fb38:	4e1e      	ldr	r6, [pc, #120]	; (1fbb4 <appSlaveProcMsg+0x88>)
  pCb = &appConnCb[pMsg->param - 1];
   1fb3a:	3b01      	subs	r3, #1
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1fb3c:	eb06 1543 	add.w	r5, r6, r3, lsl #5
   1fb40:	015c      	lsls	r4, r3, #5
   1fb42:	7b6b      	ldrb	r3, [r5, #13]
   1fb44:	2b02      	cmp	r3, #2
{
   1fb46:	b084      	sub	sp, #16
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1fb48:	d003      	beq.n	1fb52 <appSlaveProcMsg+0x26>
      {
        appSlaveConnUpdateTimeout(pMsg, pCb);
      }
      else
      {
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   1fb4a:	2301      	movs	r3, #1
   1fb4c:	736b      	strb	r3, [r5, #13]
      break;

    default:
      break;
  }
}
   1fb4e:	b004      	add	sp, #16
   1fb50:	bd70      	pop	{r4, r5, r6, pc}
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   1fb52:	7928      	ldrb	r0, [r5, #4]
   1fb54:	f7ed fc8a 	bl	d46c <DmConnCheckIdle>
   1fb58:	2800      	cmp	r0, #0
   1fb5a:	bf0c      	ite	eq
   1fb5c:	2101      	moveq	r1, #1
   1fb5e:	2100      	movne	r1, #0
  if (idle && pCb->connWasIdle)
   1fb60:	d111      	bne.n	1fb86 <appSlaveProcMsg+0x5a>
   1fb62:	7aab      	ldrb	r3, [r5, #10]
   1fb64:	b17b      	cbz	r3, 1fb86 <appSlaveProcMsg+0x5a>
    pCb->attempts++;
   1fb66:	7b2b      	ldrb	r3, [r5, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1fb68:	4a13      	ldr	r2, [pc, #76]	; (1fbb8 <appSlaveProcMsg+0x8c>)
    DmConnUpdate(pCb->connId, &connSpec);
   1fb6a:	7928      	ldrb	r0, [r5, #4]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1fb6c:	6812      	ldr	r2, [r2, #0]
    pCb->attempts++;
   1fb6e:	3301      	adds	r3, #1
   1fb70:	732b      	strb	r3, [r5, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1fb72:	e9d2 4201 	ldrd	r4, r2, [r2, #4]
    connSpec.minCeLen = 0;
   1fb76:	4b11      	ldr	r3, [pc, #68]	; (1fbbc <appSlaveProcMsg+0x90>)
   1fb78:	9303      	str	r3, [sp, #12]
    DmConnUpdate(pCb->connId, &connSpec);
   1fb7a:	a901      	add	r1, sp, #4
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1fb7c:	e9cd 4201 	strd	r4, r2, [sp, #4]
    DmConnUpdate(pCb->connId, &connSpec);
   1fb80:	f7ed fb46 	bl	d210 <DmConnUpdate>
}
   1fb84:	e7e3      	b.n	1fb4e <appSlaveProcMsg+0x22>
    pCb->connWasIdle = idle;
   1fb86:	1933      	adds	r3, r6, r4
  pCb->updateTimer.handlerId = appHandlerId;
   1fb88:	4c0d      	ldr	r4, [pc, #52]	; (1fbc0 <appSlaveProcMsg+0x94>)
    appConnUpdateTimerStart(pCb->connId);
   1fb8a:	791a      	ldrb	r2, [r3, #4]
    pCb->connWasIdle = idle;
   1fb8c:	7299      	strb	r1, [r3, #10]
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1fb8e:	1e50      	subs	r0, r2, #1
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fb90:	4909      	ldr	r1, [pc, #36]	; (1fbb8 <appSlaveProcMsg+0x8c>)
  pCb->updateTimer.handlerId = appHandlerId;
   1fb92:	eb06 1340 	add.w	r3, r6, r0, lsl #5
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fb96:	6809      	ldr	r1, [r1, #0]
  pCb->updateTimer.msg.param = connId;
   1fb98:	831a      	strh	r2, [r3, #24]
  pCb->updateTimer.handlerId = appHandlerId;
   1fb9a:	7822      	ldrb	r2, [r4, #0]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fb9c:	6809      	ldr	r1, [r1, #0]
  pCb->updateTimer.handlerId = appHandlerId;
   1fb9e:	771a      	strb	r2, [r3, #28]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fba0:	4618      	mov	r0, r3
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1fba2:	2210      	movs	r2, #16
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fba4:	4410      	add	r0, r2
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1fba6:	769a      	strb	r2, [r3, #26]
}
   1fba8:	b004      	add	sp, #16
   1fbaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fbae:	f7fe bc8f 	b.w	1e4d0 <WsfTimerStartMs>
   1fbb2:	bf00      	nop
   1fbb4:	10005e7c 	.word	0x10005e7c
   1fbb8:	10005ef8 	.word	0x10005ef8
   1fbbc:	ffff0000 	.word	0xffff0000
   1fbc0:	10005edc 	.word	0x10005edc

0001fbc4 <appSlaveSecConnOpen>:
{
   1fbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pCb->bondByLtk = FALSE;
   1fbc8:	2300      	movs	r3, #0
   1fbca:	80cb      	strh	r3, [r1, #6]
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   1fbcc:	f100 060a 	add.w	r6, r0, #10
{
   1fbd0:	460d      	mov	r5, r1
   1fbd2:	4604      	mov	r4, r0
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   1fbd4:	4631      	mov	r1, r6
   1fbd6:	7a40      	ldrb	r0, [r0, #9]
   1fbd8:	f7fd fc30 	bl	1d43c <AppDbFindByAddr>
   1fbdc:	6028      	str	r0, [r5, #0]
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   1fbde:	b180      	cbz	r0, 1fc02 <appSlaveSecConnOpen+0x3e>
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   1fbe0:	4d1a      	ldr	r5, [pc, #104]	; (1fc4c <appSlaveSecConnOpen+0x88>)
   1fbe2:	682b      	ldr	r3, [r5, #0]
   1fbe4:	791b      	ldrb	r3, [r3, #4]
   1fbe6:	b90b      	cbnz	r3, 1fbec <appSlaveSecConnOpen+0x28>
}
   1fbe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   1fbec:	f7fd fc00 	bl	1d3f0 <AppDbCheckBonded>
   1fbf0:	2800      	cmp	r0, #0
   1fbf2:	d0f9      	beq.n	1fbe8 <appSlaveSecConnOpen+0x24>
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   1fbf4:	682b      	ldr	r3, [r5, #0]
   1fbf6:	7820      	ldrb	r0, [r4, #0]
   1fbf8:	7819      	ldrb	r1, [r3, #0]
}
   1fbfa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   1fbfe:	f7ee bf2d 	b.w	ea5c <DmSecSlaveReq>
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   1fc02:	7a65      	ldrb	r5, [r4, #9]
   1fc04:	2d01      	cmp	r5, #1
   1fc06:	d1eb      	bne.n	1fbe0 <appSlaveSecConnOpen+0x1c>
   1fc08:	7be3      	ldrb	r3, [r4, #15]
   1fc0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fc0e:	2b40      	cmp	r3, #64	; 0x40
   1fc10:	d1e6      	bne.n	1fbe0 <appSlaveSecConnOpen+0x1c>
  if (appSlaveCb.inProgress)
   1fc12:	f8df 803c 	ldr.w	r8, [pc, #60]	; 1fc50 <appSlaveSecConnOpen+0x8c>
   1fc16:	f898 7074 	ldrb.w	r7, [r8, #116]	; 0x74
   1fc1a:	2f00      	cmp	r7, #0
   1fc1c:	d1e0      	bne.n	1fbe0 <appSlaveSecConnOpen+0x1c>
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1fc1e:	f7fd fb87 	bl	1d330 <AppDbGetNextRecord>
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1fc22:	4681      	mov	r9, r0
   1fc24:	2800      	cmp	r0, #0
   1fc26:	d0db      	beq.n	1fbe0 <appSlaveSecConnOpen+0x1c>
   1fc28:	463a      	mov	r2, r7
   1fc2a:	2104      	movs	r1, #4
   1fc2c:	f7fd fc82 	bl	1d534 <AppDbGetKey>
   1fc30:	2800      	cmp	r0, #0
   1fc32:	d0d5      	beq.n	1fbe0 <appSlaveSecConnOpen+0x1c>
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   1fc34:	4601      	mov	r1, r0
   1fc36:	8822      	ldrh	r2, [r4, #0]
   1fc38:	4630      	mov	r0, r6
   1fc3a:	f7ee f825 	bl	dc88 <DmPrivResolveAddr>
    appSlaveCb.dbHdl = hdl;
   1fc3e:	f8c8 9070 	str.w	r9, [r8, #112]	; 0x70
    appSlaveCb.inProgress = TRUE;
   1fc42:	f888 5074 	strb.w	r5, [r8, #116]	; 0x74
    appSlaveCb.findLtk = FALSE;
   1fc46:	f888 706c 	strb.w	r7, [r8, #108]	; 0x6c
   1fc4a:	e7c9      	b.n	1fbe0 <appSlaveSecConnOpen+0x1c>
   1fc4c:	10005ef0 	.word	0x10005ef0
   1fc50:	10005f9c 	.word	0x10005f9c

0001fc54 <AppSlaveInit>:
    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;

    /* initialize peer address */
    appSlaveCb.peerAddrType[i] = HCI_ADDR_TYPE_PUBLIC;
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1fc54:	4b0d      	ldr	r3, [pc, #52]	; (1fc8c <AppSlaveInit+0x38>)

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   1fc56:	480e      	ldr	r0, [pc, #56]	; (1fc90 <AppSlaveInit+0x3c>)
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1fc58:	2103      	movs	r1, #3
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1fc5a:	2200      	movs	r2, #0
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1fc5c:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
   1fc60:	6599      	str	r1, [r3, #88]	; 0x58
    appSlaveCb.advTypeChanged[i] = FALSE;
   1fc62:	f44f 4c7f 	mov.w	ip, #65280	; 0xff00
  appCb.slaveCback = appSlaveProcMsg;
   1fc66:	490b      	ldr	r1, [pc, #44]	; (1fc94 <AppSlaveInit+0x40>)
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1fc68:	f8c3 205e 	str.w	r2, [r3, #94]	; 0x5e
  appSlaveCb.advRestartCback = NULL;
   1fc6c:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1fc70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    appSlaveCb.peerAddrType[i] = HCI_ADDR_TYPE_PUBLIC;
   1fc74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    memset(appSlaveCb.peerAddr[i], 0, BDA_ADDR_LEN);
   1fc78:	665a      	str	r2, [r3, #100]	; 0x64
   1fc7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    appSlaveCb.advTypeChanged[i] = FALSE;
   1fc7e:	f8a3 c05c 	strh.w	ip, [r3, #92]	; 0x5c
  appSlaveCb.inProgress = FALSE;
   1fc82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  appCb.slaveCback = appSlaveProcMsg;
   1fc86:	6001      	str	r1, [r0, #0]
}
   1fc88:	4770      	bx	lr
   1fc8a:	bf00      	nop
   1fc8c:	10005f9c 	.word	0x10005f9c
   1fc90:	10005e74 	.word	0x10005e74
   1fc94:	0001fb2d 	.word	0x0001fb2d

0001fc98 <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   1fc98:	b5f0      	push	{r4, r5, r6, r7, lr}
  appConnCb_t *pCb = NULL;

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1fc9a:	7883      	ldrb	r3, [r0, #2]
   1fc9c:	2b22      	cmp	r3, #34	; 0x22
{
   1fc9e:	b085      	sub	sp, #20
   1fca0:	4604      	mov	r4, r0
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1fca2:	d056      	beq.n	1fd52 <AppSlaveProcDmMsg+0xba>
   1fca4:	2b48      	cmp	r3, #72	; 0x48
   1fca6:	d054      	beq.n	1fd52 <AppSlaveProcDmMsg+0xba>
      (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1fca8:	8802      	ldrh	r2, [r0, #0]
  }

  switch (pMsg->hdr.event)
   1fcaa:	3b20      	subs	r3, #32
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1fcac:	1e51      	subs	r1, r2, #1
   1fcae:	014d      	lsls	r5, r1, #5
  switch (pMsg->hdr.event)
   1fcb0:	2b46      	cmp	r3, #70	; 0x46
   1fcb2:	d84c      	bhi.n	1fd4e <AppSlaveProcDmMsg+0xb6>
   1fcb4:	e8df f013 	tbh	[pc, r3, lsl #1]
   1fcb8:	004b0047 	.word	0x004b0047
   1fcbc:	004b004d 	.word	0x004b004d
   1fcc0:	004b004b 	.word	0x004b004b
   1fcc4:	0056004b 	.word	0x0056004b
   1fcc8:	00a40086 	.word	0x00a40086
   1fccc:	004b004b 	.word	0x004b004b
   1fcd0:	004b004b 	.word	0x004b004b
   1fcd4:	004b004b 	.word	0x004b004b
   1fcd8:	004b004b 	.word	0x004b004b
   1fcdc:	004b004b 	.word	0x004b004b
   1fce0:	004b004b 	.word	0x004b004b
   1fce4:	00c8004b 	.word	0x00c8004b
   1fce8:	004b004b 	.word	0x004b004b
   1fcec:	004b004b 	.word	0x004b004b
   1fcf0:	004b004b 	.word	0x004b004b
   1fcf4:	004b004b 	.word	0x004b004b
   1fcf8:	010400f3 	.word	0x010400f3
   1fcfc:	004b004b 	.word	0x004b004b
   1fd00:	004b004b 	.word	0x004b004b
   1fd04:	004b004b 	.word	0x004b004b
   1fd08:	004b004b 	.word	0x004b004b
   1fd0c:	004b004b 	.word	0x004b004b
   1fd10:	004b004b 	.word	0x004b004b
   1fd14:	004b004b 	.word	0x004b004b
   1fd18:	004b004b 	.word	0x004b004b
   1fd1c:	004b004b 	.word	0x004b004b
   1fd20:	004b004b 	.word	0x004b004b
   1fd24:	0119004b 	.word	0x0119004b
   1fd28:	004b004b 	.word	0x004b004b
   1fd2c:	004b004b 	.word	0x004b004b
   1fd30:	004b004b 	.word	0x004b004b
   1fd34:	004b004b 	.word	0x004b004b
   1fd38:	004b004b 	.word	0x004b004b
   1fd3c:	004b004b 	.word	0x004b004b
   1fd40:	004b004b 	.word	0x004b004b
   1fd44:	012c      	.short	0x012c
  appSlaveCb.advStopCback = NULL;
   1fd46:	4ba0      	ldr	r3, [pc, #640]	; (1ffc8 <AppSlaveProcDmMsg+0x330>)
   1fd48:	2200      	movs	r2, #0
  appSlaveCb.advRestartCback = NULL;
   1fd4a:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
	  break;
      
    default:
      break;
  }
}
   1fd4e:	b005      	add	sp, #20
   1fd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (appSlaveCb.advStopCback != NULL)
   1fd52:	4b9d      	ldr	r3, [pc, #628]	; (1ffc8 <AppSlaveProcDmMsg+0x330>)
   1fd54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   1fd56:	2b00      	cmp	r3, #0
   1fd58:	d0f9      	beq.n	1fd4e <AppSlaveProcDmMsg+0xb6>
    (*appSlaveCb.advRestartCback)(pMsg);
   1fd5a:	4620      	mov	r0, r4
}
   1fd5c:	b005      	add	sp, #20
   1fd5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    (*appSlaveCb.advRestartCback)(pMsg);
   1fd62:	4718      	bx	r3
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   1fd64:	4e99      	ldr	r6, [pc, #612]	; (1ffcc <AppSlaveProcDmMsg+0x334>)
   1fd66:	1973      	adds	r3, r6, r5
   1fd68:	b2d2      	uxtb	r2, r2
   1fd6a:	711a      	strb	r2, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1fd6c:	4b98      	ldr	r3, [pc, #608]	; (1ffd0 <AppSlaveProcDmMsg+0x338>)
   1fd6e:	681b      	ldr	r3, [r3, #0]
   1fd70:	6819      	ldr	r1, [r3, #0]
   1fd72:	b1e1      	cbz	r1, 1fdae <AppSlaveProcDmMsg+0x116>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1fd74:	8a00      	ldrh	r0, [r0, #16]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1fd76:	889f      	ldrh	r7, [r3, #4]
   1fd78:	4287      	cmp	r7, r0
   1fd7a:	d807      	bhi.n	1fd8c <AppSlaveProcDmMsg+0xf4>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1fd7c:	88df      	ldrh	r7, [r3, #6]
   1fd7e:	4287      	cmp	r7, r0
   1fd80:	d304      	bcc.n	1fd8c <AppSlaveProcDmMsg+0xf4>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1fd82:	8a67      	ldrh	r7, [r4, #18]
   1fd84:	8918      	ldrh	r0, [r3, #8]
   1fd86:	4287      	cmp	r7, r0
   1fd88:	f000 8154 	beq.w	20034 <AppSlaveProcDmMsg+0x39c>
  pCb->updateTimer.handlerId = appHandlerId;
   1fd8c:	4b91      	ldr	r3, [pc, #580]	; (1ffd4 <AppSlaveProcDmMsg+0x33c>)
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1fd8e:	1e50      	subs	r0, r2, #1
  pCb->updateTimer.handlerId = appHandlerId;
   1fd90:	781f      	ldrb	r7, [r3, #0]
   1fd92:	eb06 1340 	add.w	r3, r6, r0, lsl #5
    pCb->connWasIdle = FALSE;
   1fd96:	4435      	add	r5, r6
  pCb->updateTimer.msg.param = connId;
   1fd98:	831a      	strh	r2, [r3, #24]
    pCb->connWasIdle = FALSE;
   1fd9a:	2200      	movs	r2, #0
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fd9c:	4618      	mov	r0, r3
    pCb->connWasIdle = FALSE;
   1fd9e:	72aa      	strb	r2, [r5, #10]
    pCb->attempts = 0;
   1fda0:	732a      	strb	r2, [r5, #12]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1fda2:	2210      	movs	r2, #16
  pCb->updateTimer.handlerId = appHandlerId;
   1fda4:	771f      	strb	r7, [r3, #28]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fda6:	3010      	adds	r0, #16
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1fda8:	769a      	strb	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fdaa:	f7fe fb91 	bl	1e4d0 <WsfTimerStartMs>
  if (appSlaveCb.advRestartCback != NULL)
   1fdae:	4b86      	ldr	r3, [pc, #536]	; (1ffc8 <AppSlaveProcDmMsg+0x330>)
   1fdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1fdb2:	b10b      	cbz	r3, 1fdb8 <AppSlaveProcDmMsg+0x120>
    (*appSlaveCb.advRestartCback)(pMsg);
   1fdb4:	4620      	mov	r0, r4
   1fdb6:	4798      	blx	r3
  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   1fdb8:	7820      	ldrb	r0, [r4, #0]
}
   1fdba:	b005      	add	sp, #20
   1fdbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   1fdc0:	f7ed b9f2 	b.w	d1a8 <DmReadRemoteFeatures>
  AppUpdatePrivacyMode(pCb->dbHdl);
   1fdc4:	4e81      	ldr	r6, [pc, #516]	; (1ffcc <AppSlaveProcDmMsg+0x334>)
   1fdc6:	5970      	ldr	r0, [r6, r5]
   1fdc8:	f7ff f94c 	bl	1f064 <AppUpdatePrivacyMode>
  if (pAppUpdateCfg->idlePeriod != 0)
   1fdcc:	4b80      	ldr	r3, [pc, #512]	; (1ffd0 <AppSlaveProcDmMsg+0x338>)
   1fdce:	681b      	ldr	r3, [r3, #0]
   1fdd0:	681b      	ldr	r3, [r3, #0]
   1fdd2:	2b00      	cmp	r3, #0
   1fdd4:	f040 80c2 	bne.w	1ff5c <AppSlaveProcDmMsg+0x2c4>
  pCb->connId = DM_CONN_ID_NONE;
   1fdd8:	1971      	adds	r1, r6, r5
  appSlaveCb.inProgress = FALSE;
   1fdda:	4f7b      	ldr	r7, [pc, #492]	; (1ffc8 <AppSlaveProcDmMsg+0x330>)
  if (pCb->setConnectable)
   1fddc:	7a4a      	ldrb	r2, [r1, #9]
  pCb->connId = DM_CONN_ID_NONE;
   1fdde:	2300      	movs	r3, #0
   1fde0:	710b      	strb	r3, [r1, #4]
  pCb->updateState = APP_CU_STATE_NONE;
   1fde2:	734b      	strb	r3, [r1, #13]
  appSlaveCb.inProgress = FALSE;
   1fde4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
  if (pCb->setConnectable)
   1fde8:	b132      	cbz	r2, 1fdf8 <AppSlaveProcDmMsg+0x160>
    pCb->setConnectable = FALSE;
   1fdea:	724b      	strb	r3, [r1, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1fdec:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   1fdf0:	643b      	str	r3, [r7, #64]	; 0x40
   1fdf2:	64bb      	str	r3, [r7, #72]	; 0x48
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   1fdf4:	f8a7 3055 	strh.w	r3, [r7, #85]	; 0x55
  if (appSlaveCb.advRestartCback != NULL)
   1fdf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1fdfa:	2b00      	cmp	r3, #0
   1fdfc:	d1ad      	bne.n	1fd5a <AppSlaveProcDmMsg+0xc2>
   1fdfe:	e7a6      	b.n	1fd4e <AppSlaveProcDmMsg+0xb6>
  if (pAppUpdateCfg->idlePeriod != 0)
   1fe00:	4b73      	ldr	r3, [pc, #460]	; (1ffd0 <AppSlaveProcDmMsg+0x338>)
   1fe02:	681b      	ldr	r3, [r3, #0]
   1fe04:	6819      	ldr	r1, [r3, #0]
   1fe06:	2900      	cmp	r1, #0
   1fe08:	d0a1      	beq.n	1fd4e <AppSlaveProcDmMsg+0xb6>
    if (pMsg->hdr.status == HCI_SUCCESS)
   1fe0a:	78c2      	ldrb	r2, [r0, #3]
   1fe0c:	2a00      	cmp	r2, #0
   1fe0e:	f040 80ab 	bne.w	1ff68 <AppSlaveProcDmMsg+0x2d0>
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   1fe12:	8902      	ldrh	r2, [r0, #8]
   1fe14:	8898      	ldrh	r0, [r3, #4]
   1fe16:	4290      	cmp	r0, r2
   1fe18:	d803      	bhi.n	1fe22 <AppSlaveProcDmMsg+0x18a>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   1fe1a:	88db      	ldrh	r3, [r3, #6]
   1fe1c:	4293      	cmp	r3, r2
   1fe1e:	f080 810f 	bcs.w	20040 <AppSlaveProcDmMsg+0x3a8>
        appConnUpdateTimerStart(pCb->connId);
   1fe22:	486a      	ldr	r0, [pc, #424]	; (1ffcc <AppSlaveProcDmMsg+0x334>)
   1fe24:	4405      	add	r5, r0
   1fe26:	792a      	ldrb	r2, [r5, #4]
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1fe28:	1e54      	subs	r4, r2, #1
  pCb->updateTimer.handlerId = appHandlerId;
   1fe2a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fe2e:	4618      	mov	r0, r3
  pCb->updateTimer.msg.param = connId;
   1fe30:	831a      	strh	r2, [r3, #24]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fe32:	3010      	adds	r0, #16
  pCb->updateTimer.handlerId = appHandlerId;
   1fe34:	4c67      	ldr	r4, [pc, #412]	; (1ffd4 <AppSlaveProcDmMsg+0x33c>)
   1fe36:	7824      	ldrb	r4, [r4, #0]
   1fe38:	771c      	strb	r4, [r3, #28]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1fe3a:	2210      	movs	r2, #16
   1fe3c:	769a      	strb	r2, [r3, #26]
}
   1fe3e:	b005      	add	sp, #20
   1fe40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1fe44:	f7fe bb44 	b.w	1e4d0 <WsfTimerStartMs>
  if (!appSlaveCb.inProgress)
   1fe48:	4f5f      	ldr	r7, [pc, #380]	; (1ffc8 <AppSlaveProcDmMsg+0x330>)
   1fe4a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
   1fe4e:	2b00      	cmp	r3, #0
   1fe50:	f43f af7d 	beq.w	1fd4e <AppSlaveProcDmMsg+0xb6>
  if (pMsg->hdr.status == HCI_SUCCESS)
   1fe54:	78c3      	ldrb	r3, [r0, #3]
   1fe56:	2b00      	cmp	r3, #0
   1fe58:	d16c      	bne.n	1ff34 <AppSlaveProcDmMsg+0x29c>
    pCb->dbHdl = appSlaveCb.dbHdl;
   1fe5a:	4e5c      	ldr	r6, [pc, #368]	; (1ffcc <AppSlaveProcDmMsg+0x334>)
    if (appSlaveCb.findLtk)
   1fe5c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    pCb->dbHdl = appSlaveCb.dbHdl;
   1fe60:	6f38      	ldr	r0, [r7, #112]	; 0x70
   1fe62:	5170      	str	r0, [r6, r5]
   1fe64:	1974      	adds	r4, r6, r5
    if (appSlaveCb.findLtk)
   1fe66:	2b00      	cmp	r3, #0
   1fe68:	d066      	beq.n	1ff38 <AppSlaveProcDmMsg+0x2a0>
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1fe6a:	2800      	cmp	r0, #0
   1fe6c:	f000 80d9 	beq.w	20022 <AppSlaveProcDmMsg+0x38a>
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   1fe70:	aa01      	add	r2, sp, #4
   1fe72:	2101      	movs	r1, #1
   1fe74:	f7fd fb5e 	bl	1d534 <AppDbGetKey>
  if (pKey != NULL)
   1fe78:	2800      	cmp	r0, #0
   1fe7a:	f000 80d2 	beq.w	20022 <AppSlaveProcDmMsg+0x38a>
    pCb->bondByLtk = !pCb->bonded;
   1fe7e:	7961      	ldrb	r1, [r4, #5]
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1fe80:	f89d 2004 	ldrb.w	r2, [sp, #4]
    pCb->bondByLtk = !pCb->bonded;
   1fe84:	fab1 f181 	clz	r1, r1
   1fe88:	0949      	lsrs	r1, r1, #5
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1fe8a:	4603      	mov	r3, r0
    pCb->bondByLtk = !pCb->bonded;
   1fe8c:	71a1      	strb	r1, [r4, #6]
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1fe8e:	7920      	ldrb	r0, [r4, #4]
   1fe90:	2101      	movs	r1, #1
   1fe92:	f7ee fdf3 	bl	ea7c <DmSecLtkRsp>
      appSlaveCb.findLtk = FALSE;
   1fe96:	2300      	movs	r3, #0
   1fe98:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
   1fe9c:	e04c      	b.n	1ff38 <AppSlaveProcDmMsg+0x2a0>
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1fe9e:	4b4e      	ldr	r3, [pc, #312]	; (1ffd8 <AppSlaveProcDmMsg+0x340>)
   1fea0:	681b      	ldr	r3, [r3, #0]
   1fea2:	781b      	ldrb	r3, [r3, #0]
   1fea4:	2b00      	cmp	r3, #0
   1fea6:	d04b      	beq.n	1ff40 <AppSlaveProcDmMsg+0x2a8>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1fea8:	2b01      	cmp	r3, #1
   1feaa:	f47f af50 	bne.w	1fd4e <AppSlaveProcDmMsg+0xb6>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1feae:	4b47      	ldr	r3, [pc, #284]	; (1ffcc <AppSlaveProcDmMsg+0x334>)
   1feb0:	441d      	add	r5, r3
   1feb2:	2111      	movs	r1, #17
   1feb4:	7928      	ldrb	r0, [r5, #4]
}
   1feb6:	b005      	add	sp, #20
   1feb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1febc:	f7ed ba08 	b.w	d2d0 <DmRemoteConnParamReqNegReply>
        APP_TRACE_INFO3("data length exchange, status= %d, maxRXLen= %d, maxTXlen= %d", pMsg->dataLenChange.hdr.status, pMsg->dataLenChange.maxRxOctets, pMsg->dataLenChange.maxTxOctets);
   1fec0:	88c3      	ldrh	r3, [r0, #6]
   1fec2:	8942      	ldrh	r2, [r0, #10]
   1fec4:	78c1      	ldrb	r1, [r0, #3]
   1fec6:	4845      	ldr	r0, [pc, #276]	; (1ffdc <AppSlaveProcDmMsg+0x344>)
   1fec8:	f7fe fbe6 	bl	1e698 <WsfTrace>
        if (AttGetMtu(pCb->connId) == ATT_DEFAULT_MTU)
   1fecc:	493f      	ldr	r1, [pc, #252]	; (1ffcc <AppSlaveProcDmMsg+0x334>)
   1fece:	440d      	add	r5, r1
   1fed0:	7928      	ldrb	r0, [r5, #4]
   1fed2:	f7f5 fc99 	bl	15808 <AttGetMtu>
   1fed6:	2817      	cmp	r0, #23
   1fed8:	f47f af39 	bne.w	1fd4e <AppSlaveProcDmMsg+0xb6>
          AttcMtuReq(pCb->connId, MTU_REQ_SIZE);
   1fedc:	7928      	ldrb	r0, [r5, #4]
   1fede:	21f7      	movs	r1, #247	; 0xf7
}
   1fee0:	b005      	add	sp, #20
   1fee2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          AttcMtuReq(pCb->connId, MTU_REQ_SIZE);
   1fee6:	f7f3 b9db 	b.w	132a0 <AttcMtuReq>
        uint8_t data_len_ext = pEvent->leReadRemoteFeatCmpl.features[0]&HCI_LE_SUP_FEAT_DATA_LEN_EXT;
   1feea:	7a01      	ldrb	r1, [r0, #8]
        APP_TRACE_INFO2("remote feature: 0x%x,  DLE:0x%x", pEvent->leReadRemoteFeatCmpl.features[0],data_len_ext);
   1feec:	483c      	ldr	r0, [pc, #240]	; (1ffe0 <AppSlaveProcDmMsg+0x348>)
        uint8_t data_len_ext = pEvent->leReadRemoteFeatCmpl.features[0]&HCI_LE_SUP_FEAT_DATA_LEN_EXT;
   1feee:	f001 0620 	and.w	r6, r1, #32
        APP_TRACE_INFO2("remote feature: 0x%x,  DLE:0x%x", pEvent->leReadRemoteFeatCmpl.features[0],data_len_ext);
   1fef2:	4632      	mov	r2, r6
   1fef4:	f7fe fbd0 	bl	1e698 <WsfTrace>
		if(data_len_ext == HCI_LE_SUP_FEAT_DATA_LEN_EXT)
   1fef8:	b996      	cbnz	r6, 1ff20 <AppSlaveProcDmMsg+0x288>
		   APP_TRACE_INFO0("Remote device doesn't support DLE"); 
   1fefa:	483a      	ldr	r0, [pc, #232]	; (1ffe4 <AppSlaveProcDmMsg+0x34c>)
   1fefc:	f7fe fbcc 	bl	1e698 <WsfTrace>
	  if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   1ff00:	4e32      	ldr	r6, [pc, #200]	; (1ffcc <AppSlaveProcDmMsg+0x334>)
   1ff02:	1974      	adds	r4, r6, r5
   1ff04:	7b63      	ldrb	r3, [r4, #13]
   1ff06:	2b01      	cmp	r3, #1
   1ff08:	d040      	beq.n	1ff8c <AppSlaveProcDmMsg+0x2f4>
        pCb->updateState = APP_CU_STATE_UPDATING;
   1ff0a:	2302      	movs	r3, #2
   1ff0c:	7363      	strb	r3, [r4, #13]
   1ff0e:	e71e      	b.n	1fd4e <AppSlaveProcDmMsg+0xb6>
      HciDrvRadioBoot(0);
   1ff10:	2000      	movs	r0, #0
   1ff12:	f7f9 f821 	bl	18f58 <HciDrvRadioBoot>
}
   1ff16:	b005      	add	sp, #20
   1ff18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DmDevReset();
   1ff1c:	f7ed bc94 	b.w	d848 <DmDevReset>
		    APP_TRACE_INFO0("Remote device support DLE");
   1ff20:	4831      	ldr	r0, [pc, #196]	; (1ffe8 <AppSlaveProcDmMsg+0x350>)
   1ff22:	f7fe fbb9 	bl	1e698 <WsfTrace>
			DmConnSetDataLen(pMsg->hdr.param, LE_MAX_TX_SIZE, LE_MAX_TX_TIME);
   1ff26:	7820      	ldrb	r0, [r4, #0]
   1ff28:	f640 0248 	movw	r2, #2120	; 0x848
   1ff2c:	21fb      	movs	r1, #251	; 0xfb
   1ff2e:	f7ed f9e5 	bl	d2fc <DmConnSetDataLen>
   1ff32:	e7e5      	b.n	1ff00 <AppSlaveProcDmMsg+0x268>
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   1ff34:	2b05      	cmp	r3, #5
   1ff36:	d059      	beq.n	1ffec <AppSlaveProcDmMsg+0x354>
  appSlaveCb.inProgress = FALSE;
   1ff38:	2300      	movs	r3, #0
   1ff3a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
   1ff3e:	e706      	b.n	1fd4e <AppSlaveProcDmMsg+0xb6>
    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1ff40:	f8d4 2006 	ldr.w	r2, [r4, #6]
   1ff44:	9201      	str	r2, [sp, #4]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1ff46:	4a21      	ldr	r2, [pc, #132]	; (1ffcc <AppSlaveProcDmMsg+0x334>)
    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1ff48:	f8d0 000a 	ldr.w	r0, [r0, #10]
   1ff4c:	9002      	str	r0, [sp, #8]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1ff4e:	4415      	add	r5, r2
   1ff50:	a901      	add	r1, sp, #4
   1ff52:	7928      	ldrb	r0, [r5, #4]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1ff54:	9303      	str	r3, [sp, #12]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1ff56:	f7ed f99d 	bl	d294 <DmRemoteConnParamReqReply>
   1ff5a:	e6f8      	b.n	1fd4e <AppSlaveProcDmMsg+0xb6>
    WsfTimerStop(&pCb->updateTimer);
   1ff5c:	f105 0010 	add.w	r0, r5, #16
   1ff60:	4430      	add	r0, r6
   1ff62:	f7fe faf9 	bl	1e558 <WsfTimerStop>
   1ff66:	e737      	b.n	1fdd8 <AppSlaveProcDmMsg+0x140>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   1ff68:	2a0c      	cmp	r2, #12
   1ff6a:	f43f aef0 	beq.w	1fd4e <AppSlaveProcDmMsg+0xb6>
   1ff6e:	4a17      	ldr	r2, [pc, #92]	; (1ffcc <AppSlaveProcDmMsg+0x334>)
   1ff70:	7b1b      	ldrb	r3, [r3, #12]
   1ff72:	4415      	add	r5, r2
   1ff74:	7b28      	ldrb	r0, [r5, #12]
   1ff76:	4298      	cmp	r0, r3
   1ff78:	f4bf aee9 	bcs.w	1fd4e <AppSlaveProcDmMsg+0xb6>
      appConnUpdateTimerStart(pCb->connId);
   1ff7c:	7928      	ldrb	r0, [r5, #4]
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1ff7e:	1e44      	subs	r4, r0, #1
  pCb->updateTimer.handlerId = appHandlerId;
   1ff80:	eb02 1344 	add.w	r3, r2, r4, lsl #5
  pCb->updateTimer.msg.param = connId;
   1ff84:	8318      	strh	r0, [r3, #24]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1ff86:	f103 0010 	add.w	r0, r3, #16
   1ff8a:	e753      	b.n	1fe34 <AppSlaveProcDmMsg+0x19c>
  pCb->updateState = APP_CU_STATE_UPDATING;
   1ff8c:	2302      	movs	r3, #2
   1ff8e:	7363      	strb	r3, [r4, #13]
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   1ff90:	7920      	ldrb	r0, [r4, #4]
   1ff92:	f7ed fa6b 	bl	d46c <DmConnCheckIdle>
   1ff96:	2800      	cmp	r0, #0
   1ff98:	bf0c      	ite	eq
   1ff9a:	2301      	moveq	r3, #1
   1ff9c:	2300      	movne	r3, #0
  if (idle && pCb->connWasIdle)
   1ff9e:	d102      	bne.n	1ffa6 <AppSlaveProcDmMsg+0x30e>
   1ffa0:	7aa2      	ldrb	r2, [r4, #10]
   1ffa2:	2a00      	cmp	r2, #0
   1ffa4:	d153      	bne.n	2004e <AppSlaveProcDmMsg+0x3b6>
    pCb->connWasIdle = idle;
   1ffa6:	1971      	adds	r1, r6, r5
  pCb->updateTimer.handlerId = appHandlerId;
   1ffa8:	4c0a      	ldr	r4, [pc, #40]	; (1ffd4 <AppSlaveProcDmMsg+0x33c>)
    appConnUpdateTimerStart(pCb->connId);
   1ffaa:	790a      	ldrb	r2, [r1, #4]
    pCb->connWasIdle = idle;
   1ffac:	728b      	strb	r3, [r1, #10]
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1ffae:	1e50      	subs	r0, r2, #1
  pCb->updateTimer.handlerId = appHandlerId;
   1ffb0:	eb06 1340 	add.w	r3, r6, r0, lsl #5
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1ffb4:	4906      	ldr	r1, [pc, #24]	; (1ffd0 <AppSlaveProcDmMsg+0x338>)
  pCb->updateTimer.msg.param = connId;
   1ffb6:	831a      	strh	r2, [r3, #24]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1ffb8:	6809      	ldr	r1, [r1, #0]
  pCb->updateTimer.handlerId = appHandlerId;
   1ffba:	7822      	ldrb	r2, [r4, #0]
   1ffbc:	771a      	strb	r2, [r3, #28]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1ffbe:	4618      	mov	r0, r3
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1ffc0:	2210      	movs	r2, #16
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1ffc2:	6809      	ldr	r1, [r1, #0]
   1ffc4:	4410      	add	r0, r2
   1ffc6:	e739      	b.n	1fe3c <AppSlaveProcDmMsg+0x1a4>
   1ffc8:	10005f9c 	.word	0x10005f9c
   1ffcc:	10005e7c 	.word	0x10005e7c
   1ffd0:	10005ef8 	.word	0x10005ef8
   1ffd4:	10005edc 	.word	0x10005edc
   1ffd8:	10002c64 	.word	0x10002c64
   1ffdc:	000281f4 	.word	0x000281f4
   1ffe0:	00028194 	.word	0x00028194
   1ffe4:	000281d0 	.word	0x000281d0
   1ffe8:	000281b4 	.word	0x000281b4
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   1ffec:	6f38      	ldr	r0, [r7, #112]	; 0x70
   1ffee:	2800      	cmp	r0, #0
   1fff0:	d0a2      	beq.n	1ff38 <AppSlaveProcDmMsg+0x2a0>
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   1fff2:	f7fd f99d 	bl	1d330 <AppDbGetNextRecord>
   1fff6:	6738      	str	r0, [r7, #112]	; 0x70
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1fff8:	2800      	cmp	r0, #0
   1fffa:	d09d      	beq.n	1ff38 <AppSlaveProcDmMsg+0x2a0>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1fffc:	2200      	movs	r2, #0
   1fffe:	2104      	movs	r1, #4
   20000:	f7fd fa98 	bl	1d534 <AppDbGetKey>
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   20004:	4606      	mov	r6, r0
   20006:	2800      	cmp	r0, #0
   20008:	d096      	beq.n	1ff38 <AppSlaveProcDmMsg+0x2a0>
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   2000a:	4919      	ldr	r1, [pc, #100]	; (20070 <AppSlaveProcDmMsg+0x3d8>)
   2000c:	4429      	add	r1, r5
   2000e:	7908      	ldrb	r0, [r1, #4]
   20010:	f7ed f9c2 	bl	d398 <DmConnPeerAddr>
   20014:	8822      	ldrh	r2, [r4, #0]
   20016:	4631      	mov	r1, r6
}
   20018:	b005      	add	sp, #20
   2001a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   2001e:	f7ed be33 	b.w	dc88 <DmPrivResolveAddr>
    pCb->bondByLtk = FALSE;
   20022:	1971      	adds	r1, r6, r5
   20024:	2300      	movs	r3, #0
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   20026:	7908      	ldrb	r0, [r1, #4]
    pCb->bondByLtk = FALSE;
   20028:	718b      	strb	r3, [r1, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   2002a:	461a      	mov	r2, r3
   2002c:	4619      	mov	r1, r3
   2002e:	f7ee fd25 	bl	ea7c <DmSecLtkRsp>
}
   20032:	e730      	b.n	1fe96 <AppSlaveProcDmMsg+0x1fe>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   20034:	895b      	ldrh	r3, [r3, #10]
   20036:	8aa0      	ldrh	r0, [r4, #20]
   20038:	4298      	cmp	r0, r3
   2003a:	f47f aea7 	bne.w	1fd8c <AppSlaveProcDmMsg+0xf4>
   2003e:	e6b6      	b.n	1fdae <AppSlaveProcDmMsg+0x116>
    WsfTimerStop(&pCb->updateTimer);
   20040:	480c      	ldr	r0, [pc, #48]	; (20074 <AppSlaveProcDmMsg+0x3dc>)
   20042:	4428      	add	r0, r5
}
   20044:	b005      	add	sp, #20
   20046:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    WsfTimerStop(&pCb->updateTimer);
   2004a:	f7fe ba85 	b.w	1e558 <WsfTimerStop>
    pCb->attempts++;
   2004e:	7b23      	ldrb	r3, [r4, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   20050:	4a09      	ldr	r2, [pc, #36]	; (20078 <AppSlaveProcDmMsg+0x3e0>)
    DmConnUpdate(pCb->connId, &connSpec);
   20052:	7920      	ldrb	r0, [r4, #4]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   20054:	6812      	ldr	r2, [r2, #0]
    pCb->attempts++;
   20056:	3301      	adds	r3, #1
   20058:	7323      	strb	r3, [r4, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   2005a:	e9d2 2501 	ldrd	r2, r5, [r2, #4]
    connSpec.minCeLen = 0;
   2005e:	4b07      	ldr	r3, [pc, #28]	; (2007c <AppSlaveProcDmMsg+0x3e4>)
   20060:	9303      	str	r3, [sp, #12]
    DmConnUpdate(pCb->connId, &connSpec);
   20062:	a901      	add	r1, sp, #4
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   20064:	e9cd 2501 	strd	r2, r5, [sp, #4]
    DmConnUpdate(pCb->connId, &connSpec);
   20068:	f7ed f8d2 	bl	d210 <DmConnUpdate>
}
   2006c:	e66f      	b.n	1fd4e <AppSlaveProcDmMsg+0xb6>
   2006e:	bf00      	nop
   20070:	10005e7c 	.word	0x10005e7c
   20074:	10005e8c 	.word	0x10005e8c
   20078:	10005ef8 	.word	0x10005ef8
   2007c:	ffff0000 	.word	0xffff0000

00020080 <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   20080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   20084:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
   20088:	4c18      	ldr	r4, [pc, #96]	; (200ec <appAdvSetData+0x6c>)
{
   2008a:	f8bd 8018 	ldrh.w	r8, [sp, #24]
  appSlaveCb.pAdvData[advHandle][location] = pData;
   2008e:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   20092:	f10c 0310 	add.w	r3, ip, #16

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   20096:	1826      	adds	r6, r4, r0
  appSlaveCb.advDataLen[advHandle][location] = len;
   20098:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   2009c:	f10c 0318 	add.w	r3, ip, #24
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   200a0:	f100 0728 	add.w	r7, r0, #40	; 0x28
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   200a4:	f896 6057 	ldrb.w	r6, [r6, #87]	; 0x57
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   200a8:	f824 8013 	strh.w	r8, [r4, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   200ac:	f10c 0c20 	add.w	ip, ip, #32
{
   200b0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   200b4:	f824 3017 	strh.w	r3, [r4, r7, lsl #1]
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   200b8:	2e03      	cmp	r6, #3
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   200ba:	f04f 0700 	mov.w	r7, #0
   200be:	f824 701c 	strh.w	r7, [r4, ip, lsl #1]
{
   200c2:	4686      	mov	lr, r0
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   200c4:	d004      	beq.n	200d0 <appAdvSetData+0x50>
   200c6:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
   200ca:	ebb6 0f51 	cmp.w	r6, r1, lsr #1
   200ce:	d005      	beq.n	200dc <appAdvSetData+0x5c>
    appSetAdvScanDataFrag(advHandle, location);
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   200d0:	4474      	add	r4, lr
   200d2:	2300      	movs	r3, #0
   200d4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
  }
}
   200d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   200dc:	2afb      	cmp	r2, #251	; 0xfb
   200de:	d8f7      	bhi.n	200d0 <appAdvSetData+0x50>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   200e0:	429a      	cmp	r2, r3
   200e2:	d8f5      	bhi.n	200d0 <appAdvSetData+0x50>
}
   200e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    appSetAdvScanDataFrag(advHandle, location);
   200e8:	f7ff bc7a 	b.w	1f9e0 <appSetAdvScanDataFrag>
   200ec:	10005f9c 	.word	0x10005f9c

000200f0 <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   200f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200f4:	b083      	sub	sp, #12
   200f6:	4617      	mov	r7, r2
   200f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   200fa:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   200fe:	9400      	str	r4, [sp, #0]
   20100:	4688      	mov	r8, r1
   20102:	469a      	mov	sl, r3
  for (i = 0; i < numSets; i++)
   20104:	4681      	mov	r9, r0
   20106:	b338      	cbz	r0, 20158 <appAdvStart+0x68>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT)       ||
   20108:	4d65      	ldr	r5, [pc, #404]	; (202a0 <appAdvStart+0x1b0>)
   2010a:	f895 005a 	ldrb.w	r0, [r5, #90]	; 0x5a
   2010e:	f895 1059 	ldrb.w	r1, [r5, #89]	; 0x59
   20112:	1f04      	subs	r4, r0, #4
   20114:	1f0b      	subs	r3, r1, #4
   20116:	2c01      	cmp	r4, #1
   20118:	b2db      	uxtb	r3, r3
   2011a:	f108 34ff 	add.w	r4, r8, #4294967295
   2011e:	f109 36ff 	add.w	r6, r9, #4294967295
   20122:	f240 8081 	bls.w	20228 <appAdvStart+0x138>
   20126:	2b01      	cmp	r3, #1
   20128:	d972      	bls.n	20210 <appAdvStart+0x120>
   2012a:	2800      	cmp	r0, #0
   2012c:	d064      	beq.n	201f8 <appAdvStart+0x108>
   2012e:	2900      	cmp	r1, #0
   20130:	d041      	beq.n	201b6 <appAdvStart+0xc6>
  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
      (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   20132:	b9d2      	cbnz	r2, 2016a <appAdvStart+0x7a>
   20134:	fa58 f686 	uxtab	r6, r8, r6
   20138:	e001      	b.n	2013e <appAdvStart+0x4e>
   2013a:	42a6      	cmp	r6, r4
   2013c:	d00c      	beq.n	20158 <appAdvStart+0x68>
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   2013e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   20142:	182b      	adds	r3, r5, r0
   20144:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
   20148:	2b00      	cmp	r3, #0
   2014a:	d1f6      	bne.n	2013a <appAdvStart+0x4a>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   2014c:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
   20150:	f7ff fc92 	bl	1fa78 <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   20154:	42a6      	cmp	r6, r4
   20156:	d1f2      	bne.n	2013e <appAdvStart+0x4e>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   20158:	9b00      	ldr	r3, [sp, #0]
   2015a:	4652      	mov	r2, sl
   2015c:	4641      	mov	r1, r8
   2015e:	4648      	mov	r0, r9
  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
  }
}
   20160:	b003      	add	sp, #12
   20162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   20166:	f7ec b945 	b.w	c3f4 <DmAdvStart>
   2016a:	3f02      	subs	r7, #2
   2016c:	fa58 f686 	uxtab	r6, r8, r6
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   20170:	f04f 0b5e 	mov.w	fp, #94	; 0x5e
   20174:	e001      	b.n	2017a <appAdvStart+0x8a>
    for (i = 0; i < numSets; i++)
   20176:	42a6      	cmp	r6, r4
   20178:	d0ee      	beq.n	20158 <appAdvStart+0x68>
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   2017a:	f837 2f02 	ldrh.w	r2, [r7, #2]!
   2017e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   20182:	4611      	mov	r1, r2
   20184:	f7ec f98a 	bl	c49c <DmAdvSetInterval>
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   20188:	7820      	ldrb	r0, [r4, #0]
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   2018a:	2306      	movs	r3, #6
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   2018c:	1829      	adds	r1, r5, r0
                    appSlaveCb.peerAddrType[pAdvHandles[i]], appSlaveCb.peerAddr[pAdvHandles[i]]);
   2018e:	fb13 b300 	smlabb	r3, r3, r0, fp
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]],
   20192:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
   20196:	f891 1059 	ldrb.w	r1, [r1, #89]	; 0x59
   2019a:	442b      	add	r3, r5
   2019c:	f7ec f8e0 	bl	c360 <DmAdvConfig>
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   201a0:	7820      	ldrb	r0, [r4, #0]
   201a2:	182b      	adds	r3, r5, r0
   201a4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
   201a8:	2b00      	cmp	r3, #0
   201aa:	d1e4      	bne.n	20176 <appAdvStart+0x86>
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   201ac:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
   201b0:	f7ff fc62 	bl	1fa78 <appSetAdvScanData>
   201b4:	e7df      	b.n	20176 <appAdvStart+0x86>
   201b6:	4623      	mov	r3, r4
   201b8:	fa58 f086 	uxtab	r0, r8, r6
   201bc:	e001      	b.n	201c2 <appAdvStart+0xd2>
  for (i = 0; i < numSets; i++)
   201be:	4283      	cmp	r3, r0
   201c0:	d0b7      	beq.n	20132 <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   201c2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   201c6:	2900      	cmp	r1, #0
   201c8:	d1f9      	bne.n	201be <appAdvStart+0xce>
      (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   201ca:	2001      	movs	r0, #1
   201cc:	9201      	str	r2, [sp, #4]
   201ce:	f7fe fe4b 	bl	1ee68 <appNumConns>
   201d2:	4b34      	ldr	r3, [pc, #208]	; (202a4 <appAdvStart+0x1b4>)
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   201d4:	9a01      	ldr	r2, [sp, #4]
      (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   201d6:	681b      	ldr	r3, [r3, #0]
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) ||
   201d8:	781b      	ldrb	r3, [r3, #0]
   201da:	4283      	cmp	r3, r0
   201dc:	d8a9      	bhi.n	20132 <appAdvStart+0x42>
   201de:	fa58 f686 	uxtab	r6, r8, r6
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   201e2:	2203      	movs	r2, #3
   201e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   201e8:	442b      	add	r3, r5
  for (i = 0; i < numSets; i++)
   201ea:	42b4      	cmp	r4, r6
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   201ec:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
  for (i = 0; i < numSets; i++)
   201f0:	d1f8      	bne.n	201e4 <appAdvStart+0xf4>
}
   201f2:	b003      	add	sp, #12
   201f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201f8:	4623      	mov	r3, r4
   201fa:	b321      	cbz	r1, 20246 <appAdvStart+0x156>
   201fc:	fa58 f086 	uxtab	r0, r8, r6
   20200:	e001      	b.n	20206 <appAdvStart+0x116>
  for (i = 0; i < numSets; i++)
   20202:	4283      	cmp	r3, r0
   20204:	d095      	beq.n	20132 <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   20206:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   2020a:	2901      	cmp	r1, #1
   2020c:	d0dd      	beq.n	201ca <appAdvStart+0xda>
   2020e:	e7f8      	b.n	20202 <appAdvStart+0x112>
   20210:	4623      	mov	r3, r4
   20212:	b318      	cbz	r0, 2025c <appAdvStart+0x16c>
   20214:	fa58 f086 	uxtab	r0, r8, r6
   20218:	e001      	b.n	2021e <appAdvStart+0x12e>
  for (i = 0; i < numSets; i++)
   2021a:	4283      	cmp	r3, r0
   2021c:	d089      	beq.n	20132 <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   2021e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   20222:	2900      	cmp	r1, #0
   20224:	d1f9      	bne.n	2021a <appAdvStart+0x12a>
   20226:	e7d0      	b.n	201ca <appAdvStart+0xda>
   20228:	2b01      	cmp	r3, #1
   2022a:	4623      	mov	r3, r4
   2022c:	d92c      	bls.n	20288 <appAdvStart+0x198>
   2022e:	b301      	cbz	r1, 20272 <appAdvStart+0x182>
   20230:	fa58 f086 	uxtab	r0, r8, r6
   20234:	e002      	b.n	2023c <appAdvStart+0x14c>
  for (i = 0; i < numSets; i++)
   20236:	4283      	cmp	r3, r0
   20238:	f43f af7b 	beq.w	20132 <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   2023c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   20240:	2901      	cmp	r1, #1
   20242:	d0c2      	beq.n	201ca <appAdvStart+0xda>
   20244:	e7f7      	b.n	20236 <appAdvStart+0x146>
   20246:	fa58 f186 	uxtab	r1, r8, r6
   2024a:	e002      	b.n	20252 <appAdvStart+0x162>
  for (i = 0; i < numSets; i++)
   2024c:	428b      	cmp	r3, r1
   2024e:	f43f af70 	beq.w	20132 <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   20252:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   20256:	2801      	cmp	r0, #1
   20258:	d8f8      	bhi.n	2024c <appAdvStart+0x15c>
   2025a:	e7b6      	b.n	201ca <appAdvStart+0xda>
   2025c:	fa58 f186 	uxtab	r1, r8, r6
   20260:	e002      	b.n	20268 <appAdvStart+0x178>
  for (i = 0; i < numSets; i++)
   20262:	428b      	cmp	r3, r1
   20264:	f43f af65 	beq.w	20132 <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   20268:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   2026c:	2801      	cmp	r0, #1
   2026e:	d8f8      	bhi.n	20262 <appAdvStart+0x172>
   20270:	e7ab      	b.n	201ca <appAdvStart+0xda>
   20272:	fa58 f186 	uxtab	r1, r8, r6
   20276:	e002      	b.n	2027e <appAdvStart+0x18e>
  for (i = 0; i < numSets; i++)
   20278:	428b      	cmp	r3, r1
   2027a:	f43f af5a 	beq.w	20132 <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   2027e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   20282:	2801      	cmp	r0, #1
   20284:	d8f8      	bhi.n	20278 <appAdvStart+0x188>
   20286:	e7a0      	b.n	201ca <appAdvStart+0xda>
   20288:	fa58 f186 	uxtab	r1, r8, r6
   2028c:	e002      	b.n	20294 <appAdvStart+0x1a4>
  for (i = 0; i < numSets; i++)
   2028e:	428b      	cmp	r3, r1
   20290:	f43f af4f 	beq.w	20132 <appAdvStart+0x42>
      if ((pAdvHandles[i] == j)                                  &&
   20294:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   20298:	2801      	cmp	r0, #1
   2029a:	d8f8      	bhi.n	2028e <appAdvStart+0x19e>
   2029c:	e795      	b.n	201ca <appAdvStart+0xda>
   2029e:	bf00      	nop
   202a0:	10005f9c 	.word	0x10005f9c
   202a4:	10005ef4 	.word	0x10005ef4

000202a8 <appAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStop(uint8_t numSets, uint8_t *pAdvHandles)
{
   202a8:	b510      	push	{r4, lr}
  uint8_t i;

  /* if number of advertising sets is 0 */
  if (numSets == 0)
   202aa:	b958      	cbnz	r0, 202c4 <appAdvStop+0x1c>
  {
    /* stop all advertising sets */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
    {
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   202ac:	4c11      	ldr	r4, [pc, #68]	; (202f4 <appAdvStop+0x4c>)
   202ae:	f240 3303 	movw	r3, #771	; 0x303
   202b2:	f8a4 3057 	strh.w	r3, [r4, #87]	; 0x57
  }

  /* if no advertising set is active */
  if (!AppSlaveIsAdvertising())
  {
    appSlaveCb.discMode = APP_MODE_NONE;
   202b6:	23ff      	movs	r3, #255	; 0xff
   202b8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  }

  DmAdvStop(numSets, pAdvHandles);
}
   202bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DmAdvStop(numSets, pAdvHandles);
   202c0:	f7ec b8be 	b.w	c440 <DmAdvStop>
   202c4:	f100 3cff 	add.w	ip, r0, #4294967295
   202c8:	4c0a      	ldr	r4, [pc, #40]	; (202f4 <appAdvStop+0x4c>)
   202ca:	1e4a      	subs	r2, r1, #1
   202cc:	fa51 fc8c 	uxtab	ip, r1, ip
      appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   202d0:	f04f 0e03 	mov.w	lr, #3
   202d4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   202d8:	4423      	add	r3, r4
    for (i = 0; i < numSets; i++)
   202da:	4594      	cmp	ip, r2
      appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   202dc:	f883 e057 	strb.w	lr, [r3, #87]	; 0x57
    for (i = 0; i < numSets; i++)
   202e0:	d1f8      	bne.n	202d4 <appAdvStop+0x2c>

  /* for each advertising set */
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
  {
    /* if advertising */
    if (appSlaveCb.advState[i] < APP_ADV_STOPPED)
   202e2:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
   202e6:	2b02      	cmp	r3, #2
   202e8:	d9e8      	bls.n	202bc <appAdvStop+0x14>
   202ea:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   202ee:	2b02      	cmp	r3, #2
   202f0:	d8e1      	bhi.n	202b6 <appAdvStop+0xe>
   202f2:	e7e3      	b.n	202bc <appAdvStop+0x14>
   202f4:	10005f9c 	.word	0x10005f9c

000202f8 <appSlaveAdvStart>:
{
   202f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   202fc:	b084      	sub	sp, #16
   202fe:	4607      	mov	r7, r0
   20300:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
  uint8_t prevMode = appSlaveCb.discMode;
   20304:	4c24      	ldr	r4, [pc, #144]	; (20398 <appSlaveAdvStart+0xa0>)
{
   20306:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  uint8_t prevMode = appSlaveCb.discMode;
   2030a:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
  if (mode == APP_MODE_AUTO_INIT)
   2030e:	2802      	cmp	r0, #2
   20310:	d02d      	beq.n	2036e <appSlaveAdvStart+0x76>
    appSlaveCb.discMode = mode;
   20312:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  if (prevMode != appSlaveCb.discMode)
   20316:	4285      	cmp	r5, r0
   20318:	d01f      	beq.n	2035a <appSlaveAdvStart+0x62>
    for (i = 0; i < numSets; i++)
   2031a:	b1f7      	cbz	r7, 2035a <appSlaveAdvStart+0x62>
  advLoc = APP_MODE_2_ADV_LOC(mode);
   2031c:	0040      	lsls	r0, r0, #1
   2031e:	b2c0      	uxtb	r0, r0
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   20320:	f100 0a01 	add.w	sl, r0, #1
   20324:	f107 39ff 	add.w	r9, r7, #4294967295
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   20328:	fa5f fa8a 	uxtb.w	sl, sl
   2032c:	fa51 f989 	uxtab	r9, r1, r9
   20330:	1e4e      	subs	r6, r1, #1
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   20332:	2500      	movs	r5, #0
   20334:	f816 cf01 	ldrb.w	ip, [r6, #1]!
   20338:	eb00 0e8c 	add.w	lr, r0, ip, lsl #2
   2033c:	f10e 0e20 	add.w	lr, lr, #32
    for (i = 0; i < numSets; i++)
   20340:	45b1      	cmp	r9, r6
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   20342:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   20346:	eb0a 0e8c 	add.w	lr, sl, ip, lsl #2
   2034a:	f10e 0e20 	add.w	lr, lr, #32
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   2034e:	44a4      	add	ip, r4
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   20350:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   20354:	f88c 5055 	strb.w	r5, [ip, #85]	; 0x55
    for (i = 0; i < numSets; i++)
   20358:	d1ec      	bne.n	20334 <appSlaveAdvStart+0x3c>
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   2035a:	2401      	movs	r4, #1
   2035c:	4638      	mov	r0, r7
   2035e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   20362:	940d      	str	r4, [sp, #52]	; 0x34
}
   20364:	b004      	add	sp, #16
   20366:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   2036a:	f7ff bec1 	b.w	200f0 <appAdvStart>
    if (AppDbCheckBonded() == FALSE)
   2036e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20372:	9101      	str	r1, [sp, #4]
   20374:	f7fd f83c 	bl	1d3f0 <AppDbCheckBonded>
   20378:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   2037c:	9b03      	ldr	r3, [sp, #12]
   2037e:	b928      	cbnz	r0, 2038c <appSlaveAdvStart+0x94>
  appSlaveCb.bondable = bondable;
   20380:	2001      	movs	r0, #1
   20382:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   20386:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
   2038a:	e7c4      	b.n	20316 <appSlaveAdvStart+0x1e>
  appSlaveCb.bondable = bondable;
   2038c:	2000      	movs	r0, #0
   2038e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   20392:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
   20396:	e7be      	b.n	20316 <appSlaveAdvStart+0x1e>
   20398:	10005f9c 	.word	0x10005f9c

0002039c <AppSlaveSecProcDmMsg>:
{
   2039c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(pMsg->hdr.event)
   203a0:	7882      	ldrb	r2, [r0, #2]
  pCb = &appConnCb[pMsg->hdr.param - 1];
   203a2:	8803      	ldrh	r3, [r0, #0]
  switch(pMsg->hdr.event)
   203a4:	3a27      	subs	r2, #39	; 0x27
{
   203a6:	b087      	sub	sp, #28
   203a8:	4604      	mov	r4, r0
  pCb = &appConnCb[pMsg->hdr.param - 1];
   203aa:	3b01      	subs	r3, #1
  switch(pMsg->hdr.event)
   203ac:	2a18      	cmp	r2, #24
   203ae:	d85e      	bhi.n	2046e <AppSlaveSecProcDmMsg+0xd2>
   203b0:	e8df f012 	tbh	[pc, r2, lsl #1]
   203b4:	0072006a 	.word	0x0072006a
   203b8:	007c005d 	.word	0x007c005d
   203bc:	009f005d 	.word	0x009f005d
   203c0:	005d005d 	.word	0x005d005d
   203c4:	00c100ad 	.word	0x00c100ad
   203c8:	005d0019 	.word	0x005d0019
   203cc:	005d005d 	.word	0x005d005d
   203d0:	005d005d 	.word	0x005d005d
   203d4:	005d005d 	.word	0x005d005d
   203d8:	00da005d 	.word	0x00da005d
   203dc:	005d00e6 	.word	0x005d00e6
   203e0:	005d005d 	.word	0x005d005d
   203e4:	0060      	.short	0x0060
  if (appSlaveCb.bondable ||
   203e6:	4a90      	ldr	r2, [pc, #576]	; (20628 <AppSlaveSecProcDmMsg+0x28c>)
   203e8:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
   203ec:	2a00      	cmp	r2, #0
   203ee:	f040 80df 	bne.w	205b0 <AppSlaveSecProcDmMsg+0x214>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   203f2:	7902      	ldrb	r2, [r0, #4]
   203f4:	4e8d      	ldr	r6, [pc, #564]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
  if (appSlaveCb.bondable ||
   203f6:	07d1      	lsls	r1, r2, #31
   203f8:	ea4f 1543 	mov.w	r5, r3, lsl #5
   203fc:	d50c      	bpl.n	20418 <AppSlaveSecProcDmMsg+0x7c>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   203fe:	eb06 1343 	add.w	r3, r6, r3, lsl #5
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   20402:	795a      	ldrb	r2, [r3, #5]
   20404:	2a00      	cmp	r2, #0
   20406:	f000 80f5 	beq.w	205f4 <AppSlaveSecProcDmMsg+0x258>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   2040a:	7918      	ldrb	r0, [r3, #4]
   2040c:	f7ec fff6 	bl	d3fc <DmConnSecLevel>
   20410:	2800      	cmp	r0, #0
   20412:	f040 80ef 	bne.w	205f4 <AppSlaveSecProcDmMsg+0x258>
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   20416:	7922      	ldrb	r2, [r4, #4]
   20418:	4f85      	ldr	r7, [pc, #532]	; (20630 <AppSlaveSecProcDmMsg+0x294>)
   2041a:	6839      	ldr	r1, [r7, #0]
   2041c:	780b      	ldrb	r3, [r1, #0]
   2041e:	eb06 0805 	add.w	r8, r6, r5
   20422:	4013      	ands	r3, r2
   20424:	f003 0301 	and.w	r3, r3, #1
   20428:	f888 3007 	strb.w	r3, [r8, #7]
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   2042c:	b11b      	cbz	r3, 20436 <AppSlaveSecProcDmMsg+0x9a>
   2042e:	5972      	ldr	r2, [r6, r5]
   20430:	2a00      	cmp	r2, #0
   20432:	f000 80e7 	beq.w	20604 <AppSlaveSecProcDmMsg+0x268>
    pCb->rcvdKeys = 0;
   20436:	1973      	adds	r3, r6, r5
   20438:	2200      	movs	r2, #0
   2043a:	72da      	strb	r2, [r3, #11]
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   2043c:	7918      	ldrb	r0, [r3, #4]
    iKeyDist = pAppSecCfg->iKeyDist;
   2043e:	f891 9001 	ldrb.w	r9, [r1, #1]
    rKeyDist = pAppSecCfg->rKeyDist;
   20442:	f891 8002 	ldrb.w	r8, [r1, #2]
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   20446:	f7ec ff9d 	bl	d384 <DmConnPeerAddrType>
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   2044a:	4435      	add	r5, r6
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   2044c:	2801      	cmp	r0, #1
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   2044e:	7928      	ldrb	r0, [r5, #4]
    rKeyDist &= pMsg->pairInd.rKeyDist;
   20450:	79e5      	ldrb	r5, [r4, #7]
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   20452:	6839      	ldr	r1, [r7, #0]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   20454:	79a3      	ldrb	r3, [r4, #6]
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   20456:	780a      	ldrb	r2, [r1, #0]
   20458:	78c9      	ldrb	r1, [r1, #3]
      iKeyDist |= DM_KEY_DIST_IRK;
   2045a:	bf08      	it	eq
   2045c:	f049 0902 	orreq.w	r9, r9, #2
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   20460:	ea08 0505 	and.w	r5, r8, r5
   20464:	ea09 0303 	and.w	r3, r9, r3
   20468:	9500      	str	r5, [sp, #0]
   2046a:	f7ee fad9 	bl	ea20 <DmSecPairRsp>
}
   2046e:	b007      	add	sp, #28
   20470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (pMsg->hdr.status == HCI_SUCCESS)
   20474:	78c3      	ldrb	r3, [r0, #3]
   20476:	2b00      	cmp	r3, #0
   20478:	d1f9      	bne.n	2046e <AppSlaveSecProcDmMsg+0xd2>
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   2047a:	f7ed fa77 	bl	d96c <DmLlPrivEnabled>
}
   2047e:	b007      	add	sp, #28
   20480:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   20484:	f7fe b936 	b.w	1e6f4 <SvcCoreGapCentAddrResUpdate>
  pCb = &appConnCb[pMsg->hdr.param - 1];
   20488:	4968      	ldr	r1, [pc, #416]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
      appSlaveSecConnOpen(pMsg, pCb);
   2048a:	eb01 1143 	add.w	r1, r1, r3, lsl #5
}
   2048e:	b007      	add	sp, #28
   20490:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      appSlaveSecConnOpen(pMsg, pCb);
   20494:	f7ff bb96 	b.w	1fbc4 <appSlaveSecConnOpen>
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   20498:	4a64      	ldr	r2, [pc, #400]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
   2049a:	015b      	lsls	r3, r3, #5
   2049c:	58d0      	ldr	r0, [r2, r3]
   2049e:	2800      	cmp	r0, #0
   204a0:	d0e5      	beq.n	2046e <AppSlaveSecProcDmMsg+0xd2>
}
   204a2:	b007      	add	sp, #28
   204a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    AppDbCheckValidRecord(pCb->dbHdl);
   204a8:	f7fc bf74 	b.w	1d394 <AppDbCheckValidRecord>
  if (pCb->bondByPairing)
   204ac:	4e5f      	ldr	r6, [pc, #380]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
   204ae:	015d      	lsls	r5, r3, #5
   204b0:	eb06 1343 	add.w	r3, r6, r3, lsl #5
   204b4:	79da      	ldrb	r2, [r3, #7]
   204b6:	2a00      	cmp	r2, #0
   204b8:	d0d9      	beq.n	2046e <AppSlaveSecProcDmMsg+0xd2>
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   204ba:	5970      	ldr	r0, [r6, r5]
    pCb->bonded = TRUE;
   204bc:	2201      	movs	r2, #1
   204be:	715a      	strb	r2, [r3, #5]
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   204c0:	b110      	cbz	r0, 204c8 <AppSlaveSecProcDmMsg+0x12c>
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   204c2:	7ad9      	ldrb	r1, [r3, #11]
   204c4:	f7fc ff60 	bl	1d388 <AppDbValidateRecord>
  appSlaveCb.bondable = bondable;
   204c8:	4b57      	ldr	r3, [pc, #348]	; (20628 <AppSlaveSecProcDmMsg+0x28c>)
   204ca:	2200      	movs	r2, #0
   204cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   204d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   204d4:	2b01      	cmp	r3, #1
      pCb->setConnectable = TRUE;
   204d6:	bf04      	itt	eq
   204d8:	1972      	addeq	r2, r6, r5
   204da:	7253      	strbeq	r3, [r2, #9]
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   204dc:	5973      	ldr	r3, [r6, r5]
   204de:	4435      	add	r5, r6
   204e0:	2b00      	cmp	r3, #0
   204e2:	d0c4      	beq.n	2046e <AppSlaveSecProcDmMsg+0xd2>
      AppAddDevToResList(pMsg, pCb->connId);
   204e4:	7929      	ldrb	r1, [r5, #4]
   204e6:	4620      	mov	r0, r4
}
   204e8:	b007      	add	sp, #28
   204ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      AppAddDevToResList(pMsg, pCb->connId);
   204ee:	f7fe bd77 	b.w	1efe0 <AppAddDevToResList>
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   204f2:	4a4e      	ldr	r2, [pc, #312]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
   204f4:	0159      	lsls	r1, r3, #5
   204f6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
   204fa:	799b      	ldrb	r3, [r3, #6]
   204fc:	2b00      	cmp	r3, #0
   204fe:	d0b6      	beq.n	2046e <AppSlaveSecProcDmMsg+0xd2>
   20500:	7903      	ldrb	r3, [r0, #4]
   20502:	2b00      	cmp	r3, #0
   20504:	d0b3      	beq.n	2046e <AppSlaveSecProcDmMsg+0xd2>
    pCb->bonded = TRUE;
   20506:	3205      	adds	r2, #5
   20508:	2301      	movs	r3, #1
   2050a:	528b      	strh	r3, [r1, r2]
   2050c:	e7af      	b.n	2046e <AppSlaveSecProcDmMsg+0xd2>
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   2050e:	4a47      	ldr	r2, [pc, #284]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
   20510:	0158      	lsls	r0, r3, #5
   20512:	eb02 1343 	add.w	r3, r2, r3, lsl #5
   20516:	79d9      	ldrb	r1, [r3, #7]
   20518:	2900      	cmp	r1, #0
   2051a:	d0a8      	beq.n	2046e <AppSlaveSecProcDmMsg+0xd2>
   2051c:	5810      	ldr	r0, [r2, r0]
   2051e:	2800      	cmp	r0, #0
   20520:	d0a5      	beq.n	2046e <AppSlaveSecProcDmMsg+0xd2>
    pCb->rcvdKeys |= pMsg->keyInd.type;
   20522:	7ada      	ldrb	r2, [r3, #11]
   20524:	7fa5      	ldrb	r5, [r4, #30]
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   20526:	4621      	mov	r1, r4
    pCb->rcvdKeys |= pMsg->keyInd.type;
   20528:	432a      	orrs	r2, r5
   2052a:	72da      	strb	r2, [r3, #11]
}
   2052c:	b007      	add	sp, #28
   2052e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   20532:	f7fd b81d 	b.w	1d570 <AppDbSetKey>
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   20536:	4e3d      	ldr	r6, [pc, #244]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
   20538:	015d      	lsls	r5, r3, #5
   2053a:	5970      	ldr	r0, [r6, r5]
   2053c:	2800      	cmp	r0, #0
   2053e:	d03b      	beq.n	205b8 <AppSlaveSecProcDmMsg+0x21c>
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   20540:	f10d 0217 	add.w	r2, sp, #23
   20544:	2101      	movs	r1, #1
   20546:	f7fc fff5 	bl	1d534 <AppDbGetKey>
  if (pKey != NULL)
   2054a:	4603      	mov	r3, r0
   2054c:	b338      	cbz	r0, 2059e <AppSlaveSecProcDmMsg+0x202>
    pCb->bondByLtk = !pCb->bonded;
   2054e:	4435      	add	r5, r6
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   20550:	f89d 2017 	ldrb.w	r2, [sp, #23]
    pCb->bondByLtk = !pCb->bonded;
   20554:	796c      	ldrb	r4, [r5, #5]
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   20556:	7928      	ldrb	r0, [r5, #4]
    pCb->bondByLtk = !pCb->bonded;
   20558:	fab4 f484 	clz	r4, r4
   2055c:	0964      	lsrs	r4, r4, #5
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   2055e:	2101      	movs	r1, #1
    pCb->bondByLtk = !pCb->bonded;
   20560:	71ac      	strb	r4, [r5, #6]
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   20562:	f7ee fa8b 	bl	ea7c <DmSecLtkRsp>
}
   20566:	e782      	b.n	2046e <AppSlaveSecProcDmMsg+0xd2>
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   20568:	78c2      	ldrb	r2, [r0, #3]
   2056a:	2a00      	cmp	r2, #0
   2056c:	f47f af7f 	bne.w	2046e <AppSlaveSecProcDmMsg+0xd2>
   20570:	4a2e      	ldr	r2, [pc, #184]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
   20572:	015b      	lsls	r3, r3, #5
   20574:	58d0      	ldr	r0, [r2, r3]
   20576:	2800      	cmp	r0, #0
   20578:	f43f af79 	beq.w	2046e <AppSlaveSecProcDmMsg+0xd2>
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   2057c:	2101      	movs	r1, #1
   2057e:	e009      	b.n	20594 <AppSlaveSecProcDmMsg+0x1f8>
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   20580:	78c1      	ldrb	r1, [r0, #3]
   20582:	2900      	cmp	r1, #0
   20584:	f47f af73 	bne.w	2046e <AppSlaveSecProcDmMsg+0xd2>
   20588:	4a28      	ldr	r2, [pc, #160]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
   2058a:	015b      	lsls	r3, r3, #5
   2058c:	58d0      	ldr	r0, [r2, r3]
   2058e:	2800      	cmp	r0, #0
   20590:	f43f af6d 	beq.w	2046e <AppSlaveSecProcDmMsg+0xd2>
}
   20594:	b007      	add	sp, #28
   20596:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   2059a:	f7fd b8dd 	b.w	1d758 <AppDbSetPeerAddedToRl>
    pCb->bondByLtk = FALSE;
   2059e:	4435      	add	r5, r6
   205a0:	2300      	movs	r3, #0
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   205a2:	7928      	ldrb	r0, [r5, #4]
    pCb->bondByLtk = FALSE;
   205a4:	71ab      	strb	r3, [r5, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   205a6:	461a      	mov	r2, r3
   205a8:	4619      	mov	r1, r3
   205aa:	f7ee fa67 	bl	ea7c <DmSecLtkRsp>
}
   205ae:	e75e      	b.n	2046e <AppSlaveSecProcDmMsg+0xd2>
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   205b0:	7902      	ldrb	r2, [r0, #4]
   205b2:	4e1e      	ldr	r6, [pc, #120]	; (2062c <AppSlaveSecProcDmMsg+0x290>)
   205b4:	015d      	lsls	r5, r3, #5
   205b6:	e72f      	b.n	20418 <AppSlaveSecProcDmMsg+0x7c>
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   205b8:	89e7      	ldrh	r7, [r4, #14]
   205ba:	3406      	adds	r4, #6
   205bc:	b977      	cbnz	r7, 205dc <AppSlaveSecProcDmMsg+0x240>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   205be:	491d      	ldr	r1, [pc, #116]	; (20634 <AppSlaveSecProcDmMsg+0x298>)
   205c0:	2208      	movs	r2, #8
   205c2:	4620      	mov	r0, r4
   205c4:	f002 fe88 	bl	232d8 <memcmp>
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   205c8:	b940      	cbnz	r0, 205dc <AppSlaveSecProcDmMsg+0x240>
    else if (appSlaveCb.inProgress)
   205ca:	4b17      	ldr	r3, [pc, #92]	; (20628 <AppSlaveSecProcDmMsg+0x28c>)
   205cc:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   205d0:	2a00      	cmp	r2, #0
   205d2:	d0e4      	beq.n	2059e <AppSlaveSecProcDmMsg+0x202>
      appSlaveCb.findLtk = TRUE;
   205d4:	2201      	movs	r2, #1
   205d6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      return;
   205da:	e748      	b.n	2046e <AppSlaveSecProcDmMsg+0xd2>
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   205dc:	4621      	mov	r1, r4
   205de:	4638      	mov	r0, r7
   205e0:	f7fc ff66 	bl	1d4b0 <AppDbFindByLtkReq>
   205e4:	5170      	str	r0, [r6, r5]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   205e6:	2800      	cmp	r0, #0
   205e8:	d0d9      	beq.n	2059e <AppSlaveSecProcDmMsg+0x202>
        appSlaveCb.inProgress = FALSE;
   205ea:	4b0f      	ldr	r3, [pc, #60]	; (20628 <AppSlaveSecProcDmMsg+0x28c>)
   205ec:	2200      	movs	r2, #0
   205ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   205f2:	e7a5      	b.n	20540 <AppSlaveSecProcDmMsg+0x1a4>
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   205f4:	4435      	add	r5, r6
   205f6:	2105      	movs	r1, #5
   205f8:	7928      	ldrb	r0, [r5, #4]
}
   205fa:	b007      	add	sp, #28
   205fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   20600:	f7ee b928 	b.w	e854 <DmSecCancelReq>
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId), FALSE);
   20604:	f898 0004 	ldrb.w	r0, [r8, #4]
   20608:	9203      	str	r2, [sp, #12]
   2060a:	f7ec febb 	bl	d384 <DmConnPeerAddrType>
   2060e:	4681      	mov	r9, r0
   20610:	f898 0004 	ldrb.w	r0, [r8, #4]
   20614:	f7ec fec0 	bl	d398 <DmConnPeerAddr>
   20618:	9a03      	ldr	r2, [sp, #12]
   2061a:	4601      	mov	r1, r0
   2061c:	4648      	mov	r0, r9
   2061e:	f7fc fe4f 	bl	1d2c0 <AppDbNewRecord>
    rKeyDist = pAppSecCfg->rKeyDist;
   20622:	6839      	ldr	r1, [r7, #0]
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId), FALSE);
   20624:	5170      	str	r0, [r6, r5]
   20626:	e706      	b.n	20436 <AppSlaveSecProcDmMsg+0x9a>
   20628:	10005f9c 	.word	0x10005f9c
   2062c:	10005e7c 	.word	0x10005e7c
   20630:	10005ef0 	.word	0x10005ef0
   20634:	0002689c 	.word	0x0002689c

00020638 <AppSetBondable>:
  appSlaveCb.bondable = bondable;
   20638:	4b01      	ldr	r3, [pc, #4]	; (20640 <AppSetBondable+0x8>)
   2063a:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
}
   2063e:	4770      	bx	lr
   20640:	10005f9c 	.word	0x10005f9c

00020644 <AppSlaveSecurityReq>:
{
   20644:	b510      	push	{r4, lr}
   20646:	4604      	mov	r4, r0
  if (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE)
   20648:	f7ec fed8 	bl	d3fc <DmConnSecLevel>
   2064c:	b100      	cbz	r0, 20650 <AppSlaveSecurityReq+0xc>
}
   2064e:	bd10      	pop	{r4, pc}
    DmSecSlaveReq(connId, pAppSecCfg->auth);
   20650:	4b03      	ldr	r3, [pc, #12]	; (20660 <AppSlaveSecurityReq+0x1c>)
   20652:	681b      	ldr	r3, [r3, #0]
   20654:	4620      	mov	r0, r4
   20656:	7819      	ldrb	r1, [r3, #0]
}
   20658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DmSecSlaveReq(connId, pAppSecCfg->auth);
   2065c:	f7ee b9fe 	b.w	ea5c <DmSecSlaveReq>
   20660:	10005ef0 	.word	0x10005ef0

00020664 <AppSlaveIsAdvertising>:
    if (appSlaveCb.advState[i] < APP_ADV_STOPPED)
   20664:	4b06      	ldr	r3, [pc, #24]	; (20680 <AppSlaveIsAdvertising+0x1c>)
   20666:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
   2066a:	2a02      	cmp	r2, #2
   2066c:	d906      	bls.n	2067c <AppSlaveIsAdvertising+0x18>
   2066e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
    {
      return TRUE;
   20672:	2802      	cmp	r0, #2
   20674:	bf8c      	ite	hi
   20676:	2000      	movhi	r0, #0
   20678:	2001      	movls	r0, #1
   2067a:	4770      	bx	lr
   2067c:	2001      	movs	r0, #1
    }
  }

  return FALSE;
}
   2067e:	4770      	bx	lr
   20680:	10005f9c 	.word	0x10005f9c

00020684 <AppSlaveClearAllBondingInfo>:
 *  \Note   This API should not be used when Advertising (other than periodic advertising) is
 *          enabled. Otherwise, clearing the resolving list in the Controller may fail.
 */
/*************************************************************************************************/
void AppSlaveClearAllBondingInfo(void)
{
   20684:	b508      	push	{r3, lr}
  /* clear all bonding info */
  AppClearAllBondingInfo();
   20686:	f7fe fcd3 	bl	1f030 <AppClearAllBondingInfo>
  appSlaveCb.bondable = bondable;
   2068a:	4b02      	ldr	r3, [pc, #8]	; (20694 <AppSlaveClearAllBondingInfo+0x10>)
   2068c:	2201      	movs	r2, #1
   2068e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* make device bondable */
  AppSetBondable(TRUE);
}
   20692:	bd08      	pop	{r3, pc}
   20694:	10005f9c 	.word	0x10005f9c

00020698 <appSlaveLegAdvStop>:
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   20698:	7883      	ldrb	r3, [r0, #2]
   2069a:	2b48      	cmp	r3, #72	; 0x48
   2069c:	d00f      	beq.n	206be <appSlaveLegAdvStop+0x26>
{
   2069e:	b530      	push	{r4, r5, lr}
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   206a0:	4a21      	ldr	r2, [pc, #132]	; (20728 <appSlaveLegAdvStop+0x90>)
   206a2:	f892 405b 	ldrb.w	r4, [r2, #91]	; 0x5b
{
   206a6:	b085      	sub	sp, #20
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   206a8:	b96c      	cbnz	r4, 206c6 <appSlaveLegAdvStop+0x2e>
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   206aa:	f892 3057 	ldrb.w	r3, [r2, #87]	; 0x57
   206ae:	3301      	adds	r3, #1
   206b0:	b2db      	uxtb	r3, r3
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   206b2:	2b02      	cmp	r3, #2
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   206b4:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   206b8:	d915      	bls.n	206e6 <appSlaveLegAdvStop+0x4e>
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
  }
}
   206ba:	b005      	add	sp, #20
   206bc:	bd30      	pop	{r4, r5, pc}
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   206be:	7903      	ldrb	r3, [r0, #4]
   206c0:	2b00      	cmp	r3, #0
   206c2:	d1ec      	bne.n	2069e <appSlaveLegAdvStop+0x6>
   206c4:	4770      	bx	lr
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   206c6:	4b19      	ldr	r3, [pc, #100]	; (2072c <appSlaveLegAdvStop+0x94>)
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   206c8:	2400      	movs	r4, #0
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   206ca:	681b      	ldr	r3, [r3, #0]
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   206cc:	f882 405b 	strb.w	r4, [r2, #91]	; 0x5b
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   206d0:	f882 4057 	strb.w	r4, [r2, #87]	; 0x57
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   206d4:	88d9      	ldrh	r1, [r3, #6]
   206d6:	f8ad 100e 	strh.w	r1, [sp, #14]
  if (interval > 0)
   206da:	b9f9      	cbnz	r1, 2071c <appSlaveLegAdvStop+0x84>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   206dc:	2303      	movs	r3, #3
   206de:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57
}
   206e2:	b005      	add	sp, #20
   206e4:	bd30      	pop	{r4, r5, pc}
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   206e6:	4911      	ldr	r1, [pc, #68]	; (2072c <appSlaveLegAdvStop+0x94>)
   206e8:	680d      	ldr	r5, [r1, #0]
   206ea:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   206ee:	88c9      	ldrh	r1, [r1, #6]
   206f0:	f8ad 100e 	strh.w	r1, [sp, #14]
  if (interval > 0)
   206f4:	2900      	cmp	r1, #0
   206f6:	d0f1      	beq.n	206dc <appSlaveLegAdvStop+0x44>
    appAdvStart(1, &advHandle, &interval,
   206f8:	2001      	movs	r0, #1
   206fa:	f10d 020d 	add.w	r2, sp, #13
   206fe:	e9cd 2000 	strd	r2, r0, [sp]
   20702:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   20706:	f10d 020e 	add.w	r2, sp, #14
   2070a:	a903      	add	r1, sp, #12
    advHandle = DM_ADV_HANDLE_DEFAULT;
   2070c:	f88d 400c 	strb.w	r4, [sp, #12]
    maxEaEvents = 0;
   20710:	f88d 400d 	strb.w	r4, [sp, #13]
    appAdvStart(1, &advHandle, &interval,
   20714:	f7ff fcec 	bl	200f0 <appAdvStart>
}
   20718:	b005      	add	sp, #20
   2071a:	bd30      	pop	{r4, r5, pc}
    appAdvStart(1, &advHandle, &interval,
   2071c:	2001      	movs	r0, #1
   2071e:	f10d 020d 	add.w	r2, sp, #13
   20722:	e9cd 2000 	strd	r2, r0, [sp]
   20726:	e7ee      	b.n	20706 <appSlaveLegAdvStop+0x6e>
   20728:	10005f9c 	.word	0x10005f9c
   2072c:	10005ee0 	.word	0x10005ee0

00020730 <appSlaveLegAdvRestart>:
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
  /* if connection closed */
  if (pMsg->hdr.event == DM_CONN_CLOSE_IND)
   20730:	7883      	ldrb	r3, [r0, #2]
  {
    /* if connectable directed advertising failed to establish connection or was cancelled */
    if (appSlaveCb.advDirected)
   20732:	4a1b      	ldr	r2, [pc, #108]	; (207a0 <appSlaveLegAdvRestart+0x70>)
  if (pMsg->hdr.event == DM_CONN_CLOSE_IND)
   20734:	2b28      	cmp	r3, #40	; 0x28
   20736:	d01b      	beq.n	20770 <appSlaveLegAdvRestart+0x40>
      appSlaveCb.advDirected = FALSE;
      return;
    }
  }
  /* else if connection opened */
  else if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   20738:	2b27      	cmp	r3, #39	; 0x27
   2073a:	d004      	beq.n	20746 <appSlaveLegAdvRestart+0x16>
    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   2073c:	f892 3057 	ldrb.w	r3, [r2, #87]	; 0x57
   20740:	2b03      	cmp	r3, #3
   20742:	d003      	beq.n	2074c <appSlaveLegAdvRestart+0x1c>
   20744:	4770      	bx	lr
    if (appSlaveCb.advDirected)
   20746:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   2074a:	b9ab      	cbnz	r3, 20778 <appSlaveLegAdvRestart+0x48>
{
   2074c:	b500      	push	{lr}
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   2074e:	4b15      	ldr	r3, [pc, #84]	; (207a4 <appSlaveLegAdvRestart+0x74>)
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   20750:	f04f 0c00 	mov.w	ip, #0
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   20754:	681b      	ldr	r3, [r3, #0]
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   20756:	f882 c057 	strb.w	ip, [r2, #87]	; 0x57
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   2075a:	88d9      	ldrh	r1, [r3, #6]
{
   2075c:	b085      	sub	sp, #20
  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   2075e:	f8ad 100e 	strh.w	r1, [sp, #14]
  if (interval > 0)
   20762:	b969      	cbnz	r1, 20780 <appSlaveLegAdvRestart+0x50>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   20764:	2303      	movs	r3, #3
   20766:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57

    /* start advertising */
    appSlaveLegAdvStart();
  }
}
   2076a:	b005      	add	sp, #20
   2076c:	f85d fb04 	ldr.w	pc, [sp], #4
    if (appSlaveCb.advDirected)
   20770:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   20774:	2b00      	cmp	r3, #0
   20776:	d0e1      	beq.n	2073c <appSlaveLegAdvRestart+0xc>
      appSlaveCb.advDirected = FALSE;
   20778:	2300      	movs	r3, #0
   2077a:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
      return;
   2077e:	4770      	bx	lr
    appAdvStart(1, &advHandle, &interval,
   20780:	f10d 020d 	add.w	r2, sp, #13
   20784:	2001      	movs	r0, #1
   20786:	e9cd 2000 	strd	r2, r0, [sp]
   2078a:	a903      	add	r1, sp, #12
   2078c:	f10d 020e 	add.w	r2, sp, #14
    advHandle = DM_ADV_HANDLE_DEFAULT;
   20790:	f88d c00c 	strb.w	ip, [sp, #12]
    maxEaEvents = 0;
   20794:	f88d c00d 	strb.w	ip, [sp, #13]
    appAdvStart(1, &advHandle, &interval,
   20798:	f7ff fcaa 	bl	200f0 <appAdvStart>
   2079c:	e7e5      	b.n	2076a <appSlaveLegAdvRestart+0x3a>
   2079e:	bf00      	nop
   207a0:	10005f9c 	.word	0x10005f9c
   207a4:	10005ee0 	.word	0x10005ee0

000207a8 <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   207a8:	b510      	push	{r4, lr}
  if (appSlaveCb.advStopCback == NULL)
   207aa:	4c10      	ldr	r4, [pc, #64]	; (207ec <AppAdvSetData+0x44>)
   207ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
{
   207ae:	b082      	sub	sp, #8
  if (appSlaveCb.advStopCback == NULL)
   207b0:	b143      	cbz	r3, 207c4 <AppAdvSetData+0x1c>
  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   207b2:	4c0f      	ldr	r4, [pc, #60]	; (207f0 <AppAdvSetData+0x48>)
   207b4:	42a3      	cmp	r3, r4
   207b6:	d009      	beq.n	207cc <AppAdvSetData+0x24>
  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   207b8:	480e      	ldr	r0, [pc, #56]	; (207f4 <AppAdvSetData+0x4c>)
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
  }
}
   207ba:	b002      	add	sp, #8
   207bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   207c0:	f7fd bf6a 	b.w	1e698 <WsfTrace>
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   207c4:	4b0a      	ldr	r3, [pc, #40]	; (207f0 <AppAdvSetData+0x48>)
   207c6:	67a3      	str	r3, [r4, #120]	; 0x78
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   207c8:	4b0b      	ldr	r3, [pc, #44]	; (207f8 <AppAdvSetData+0x50>)
   207ca:	67e3      	str	r3, [r4, #124]	; 0x7c
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   207cc:	291f      	cmp	r1, #31
   207ce:	f04f 031f 	mov.w	r3, #31
   207d2:	e9cd 3300 	strd	r3, r3, [sp]
   207d6:	4613      	mov	r3, r2
   207d8:	460a      	mov	r2, r1
   207da:	4601      	mov	r1, r0
   207dc:	bf28      	it	cs
   207de:	221f      	movcs	r2, #31
   207e0:	2000      	movs	r0, #0
   207e2:	f7ff fc4d 	bl	20080 <appAdvSetData>
}
   207e6:	b002      	add	sp, #8
   207e8:	bd10      	pop	{r4, pc}
   207ea:	bf00      	nop
   207ec:	10005f9c 	.word	0x10005f9c
   207f0:	00020699 	.word	0x00020699
   207f4:	00028234 	.word	0x00028234
   207f8:	00020731 	.word	0x00020731

000207fc <AppAdvStart>:
  if (appSlaveCb.advStopCback == NULL)
   207fc:	4a12      	ldr	r2, [pc, #72]	; (20848 <AppAdvStart+0x4c>)
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   207fe:	4913      	ldr	r1, [pc, #76]	; (2084c <AppAdvStart+0x50>)
  if (appSlaveCb.advStopCback == NULL)
   20800:	6f93      	ldr	r3, [r2, #120]	; 0x78
   20802:	b123      	cbz	r3, 2080e <AppAdvStart+0x12>
  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   20804:	428b      	cmp	r3, r1
   20806:	d005      	beq.n	20814 <AppAdvStart+0x18>
  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   20808:	4811      	ldr	r0, [pc, #68]	; (20850 <AppAdvStart+0x54>)
   2080a:	f7fd bf45 	b.w	1e698 <WsfTrace>
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   2080e:	4b11      	ldr	r3, [pc, #68]	; (20854 <AppAdvStart+0x58>)
   20810:	e9c2 131e 	strd	r1, r3, [r2, #120]	; 0x78
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   20814:	b530      	push	{r4, r5, lr}
    maxEaEvents = 0;

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   20816:	4b10      	ldr	r3, [pc, #64]	; (20858 <AppAdvStart+0x5c>)
{
   20818:	b087      	sub	sp, #28
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   2081a:	681b      	ldr	r3, [r3, #0]
   2081c:	9002      	str	r0, [sp, #8]
    advHandle = DM_ADV_HANDLE_DEFAULT;
   2081e:	2100      	movs	r1, #0
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   20820:	2401      	movs	r4, #1
   20822:	f10d 0517 	add.w	r5, sp, #23
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   20826:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    advHandle = DM_ADV_HANDLE_DEFAULT;
   2082a:	f88d 1016 	strb.w	r1, [sp, #22]
    maxEaEvents = 0;
   2082e:	f88d 1017 	strb.w	r1, [sp, #23]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   20832:	e9cd 5400 	strd	r5, r4, [sp]
   20836:	1d9a      	adds	r2, r3, #6
   20838:	4620      	mov	r0, r4
   2083a:	f10d 0116 	add.w	r1, sp, #22
   2083e:	f7ff fd5b 	bl	202f8 <appSlaveAdvStart>
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
  }
}
   20842:	b007      	add	sp, #28
   20844:	bd30      	pop	{r4, r5, pc}
   20846:	bf00      	nop
   20848:	10005f9c 	.word	0x10005f9c
   2084c:	00020699 	.word	0x00020699
   20850:	00028234 	.word	0x00028234
   20854:	00020731 	.word	0x00020731
   20858:	10005ee0 	.word	0x10005ee0

0002085c <AppAdvStop>:
  if (appSlaveCb.advStopCback == NULL)
   2085c:	4a0c      	ldr	r2, [pc, #48]	; (20890 <AppAdvStop+0x34>)
   2085e:	6f93      	ldr	r3, [r2, #120]	; 0x78
   20860:	b12b      	cbz	r3, 2086e <AppAdvStop+0x12>
  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   20862:	4a0c      	ldr	r2, [pc, #48]	; (20894 <AppAdvStop+0x38>)
   20864:	4293      	cmp	r3, r2
   20866:	d006      	beq.n	20876 <AppAdvStop+0x1a>
  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   20868:	480b      	ldr	r0, [pc, #44]	; (20898 <AppAdvStop+0x3c>)
   2086a:	f7fd bf15 	b.w	1e698 <WsfTrace>
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   2086e:	4909      	ldr	r1, [pc, #36]	; (20894 <AppAdvStop+0x38>)
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   20870:	4b0a      	ldr	r3, [pc, #40]	; (2089c <AppAdvStop+0x40>)
   20872:	e9c2 131e 	strd	r1, r3, [r2, #120]	; 0x78
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStop(void)
{
   20876:	b500      	push	{lr}
   20878:	b083      	sub	sp, #12
  uint8_t advHandle;

  if (appSlaveAdvMode())
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   2087a:	2300      	movs	r3, #0

    appAdvStop(1, &advHandle);
   2087c:	f10d 0107 	add.w	r1, sp, #7
   20880:	2001      	movs	r0, #1
    advHandle = DM_ADV_HANDLE_DEFAULT;
   20882:	f88d 3007 	strb.w	r3, [sp, #7]
    appAdvStop(1, &advHandle);
   20886:	f7ff fd0f 	bl	202a8 <appAdvStop>
  }
}
   2088a:	b003      	add	sp, #12
   2088c:	f85d fb04 	ldr.w	pc, [sp], #4
   20890:	10005f9c 	.word	0x10005f9c
   20894:	00020699 	.word	0x00020699
   20898:	00028234 	.word	0x00028234
   2089c:	00020731 	.word	0x00020731

000208a0 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   208a0:	b510      	push	{r4, lr}
   208a2:	b084      	sub	sp, #16
   208a4:	4604      	mov	r4, r0
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   208a6:	a801      	add	r0, sp, #4
   208a8:	f004 faa2 	bl	24df0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   208ac:	9b01      	ldr	r3, [sp, #4]
   208ae:	4805      	ldr	r0, [pc, #20]	; (208c4 <am_util_delay_ms+0x24>)
   208b0:	fba0 2303 	umull	r2, r3, r0, r3
   208b4:	099b      	lsrs	r3, r3, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   208b6:	fb04 f003 	mul.w	r0, r4, r3
   208ba:	f004 faff 	bl	24ebc <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   208be:	b004      	add	sp, #16
   208c0:	bd10      	pop	{r4, pc}
   208c2:	bf00      	nop
   208c4:	057619f1 	.word	0x057619f1

000208c8 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   208c8:	b510      	push	{r4, lr}
   208ca:	b084      	sub	sp, #16
   208cc:	4604      	mov	r4, r0
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   208ce:	a801      	add	r0, sp, #4
   208d0:	f004 fa8e 	bl	24df0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   208d4:	9b01      	ldr	r3, [sp, #4]
   208d6:	4805      	ldr	r0, [pc, #20]	; (208ec <am_util_delay_us+0x24>)
   208d8:	fba0 2303 	umull	r2, r3, r0, r3
   208dc:	0c9b      	lsrs	r3, r3, #18

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   208de:	fb04 f003 	mul.w	r0, r4, r3
   208e2:	f004 faeb 	bl	24ebc <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   208e6:	b004      	add	sp, #16
   208e8:	bd10      	pop	{r4, pc}
   208ea:	bf00      	nop
   208ec:	165e9f81 	.word	0x165e9f81

000208f0 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   208f0:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   208f2:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   208f6:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   208f8:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   208fc:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   20900:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   20904:	f000 f806 	bl	20914 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   20908:	bd01      	pop	{r0, pc}
   2090a:	bf00      	nop

0002090c <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   2090c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   2090e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   20910:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   20912:	4770      	bx	lr

00020914 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   20914:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   20916:	2300      	movs	r3, #0
{
   20918:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   2091a:	e9cd 3300 	strd	r3, r3, [sp]
   2091e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   20922:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   20926:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   2092a:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   2092c:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	; 0xd28
   20930:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   20932:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20934:	b2db      	uxtb	r3, r3
   20936:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   2093a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2093c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20940:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   20944:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20946:	0c1b      	lsrs	r3, r3, #16
   20948:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   2094c:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   20950:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   20952:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   20956:	079b      	lsls	r3, r3, #30
{
   20958:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   2095a:	d437      	bmi.n	209cc <am_util_faultisr_collect_data+0xb8>
   2095c:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   20960:	4621      	mov	r1, r4
   20962:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   20964:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   20966:	f7ff ffd1 	bl	2090c <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   2096a:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   2096c:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   2096e:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   20970:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   20972:	f7ff ffcb 	bl	2090c <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   20976:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   20978:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   2097a:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   2097c:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   2097e:	f7ff ffc5 	bl	2090c <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   20982:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   20984:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   20986:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   20988:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   2098a:	f7ff ffbf 	bl	2090c <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   2098e:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   20990:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   20992:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   20994:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   20996:	f7ff ffb9 	bl	2090c <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   2099a:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   2099c:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   2099e:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   209a0:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   209a2:	f7ff ffb3 	bl	2090c <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   209a6:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   209a8:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   209aa:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   209ac:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   209ae:	f7ff ffad 	bl	2090c <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   209b2:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   209b4:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   209b6:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   209b8:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   209ba:	f7ff ffa7 	bl	2090c <getStackedReg>
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   209be:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   209c0:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   209c2:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   209c4:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   209c6:	f004 fccb 	bl	25360 <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   209ca:	e7fe      	b.n	209ca <am_util_faultisr_collect_data+0xb6>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   209cc:	4601      	mov	r1, r0
   209ce:	2006      	movs	r0, #6
   209d0:	f7ff ff9c 	bl	2090c <getStackedReg>
   209d4:	4603      	mov	r3, r0
   209d6:	e7c3      	b.n	20960 <am_util_faultisr_collect_data+0x4c>

000209d8 <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   209d8:	2900      	cmp	r1, #0
   209da:	d047      	beq.n	20a6c <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   209dc:	0843      	lsrs	r3, r0, #1
   209de:	0882      	lsrs	r2, r0, #2
   209e0:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
   209e4:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   209e8:	189b      	adds	r3, r3, r2
   209ea:	ea4f 0291 	mov.w	r2, r1, lsr #2
   209ee:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
   209f2:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   209f6:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
   209fa:	eb13 030c 	adds.w	r3, r3, ip
   209fe:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
   20a02:	ea4f 2c13 	mov.w	ip, r3, lsr #8
   20a06:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
   20a0a:	eb13 030c 	adds.w	r3, r3, ip
   20a0e:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
   20a12:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   20a16:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   20a1a:	eb13 030c 	adds.w	r3, r3, ip
   20a1e:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
   20a22:	189b      	adds	r3, r3, r2
   20a24:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
   20a28:	08db      	lsrs	r3, r3, #3
   20a2a:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   20a2e:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
   20a30:	3006      	adds	r0, #6
{
   20a32:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
   20a34:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   20a38:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
   20a3c:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   20a40:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
   20a44:	eb1c 0c03 	adds.w	ip, ip, r3
   20a48:	eb42 0e0e 	adc.w	lr, r2, lr
   20a4c:	eb1c 0c0c 	adds.w	ip, ip, ip
   20a50:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
   20a54:	ebb0 000c 	subs.w	r0, r0, ip
   20a58:	eb61 010e 	sbc.w	r1, r1, lr
   20a5c:	0900      	lsrs	r0, r0, #4
   20a5e:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
   20a62:	18c0      	adds	r0, r0, r3
   20a64:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
   20a68:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
   20a6c:	0883      	lsrs	r3, r0, #2
   20a6e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
   20a72:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   20a76:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   20a7a:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   20a7e:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   20a80:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   20a84:	3006      	adds	r0, #6
   20a86:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
   20a8a:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   20a8e:	4770      	bx	lr

00020a90 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   20a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20a94:	b089      	sub	sp, #36	; 0x24
   20a96:	ad01      	add	r5, sp, #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
   20a98:	46ae      	mov	lr, r5
   20a9a:	2401      	movs	r4, #1
   20a9c:	e042      	b.n	20b24 <uint64_to_str+0x94>
        q64 = (ui64Val>>1) + (ui64Val>>2);
   20a9e:	19db      	adds	r3, r3, r7
   20aa0:	eb46 0651 	adc.w	r6, r6, r1, lsr #1
        q64 += (q64 >> 4);
   20aa4:	091f      	lsrs	r7, r3, #4
   20aa6:	ea47 7706 	orr.w	r7, r7, r6, lsl #28
   20aaa:	19db      	adds	r3, r3, r7
   20aac:	eb46 1616 	adc.w	r6, r6, r6, lsr #4
        q64 += (q64 >> 8);
   20ab0:	0a1f      	lsrs	r7, r3, #8
   20ab2:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
   20ab6:	19db      	adds	r3, r3, r7
   20ab8:	eb46 2616 	adc.w	r6, r6, r6, lsr #8
        q64 += (q64 >> 16);
   20abc:	0c1f      	lsrs	r7, r3, #16
   20abe:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
   20ac2:	19db      	adds	r3, r3, r7
   20ac4:	eb46 4616 	adc.w	r6, r6, r6, lsr #16
        q64 += (q64 >> 32);
   20ac8:	199b      	adds	r3, r3, r6
   20aca:	f146 0600 	adc.w	r6, r6, #0
        q64 >>= 3;
   20ace:	08db      	lsrs	r3, r3, #3
   20ad0:	ea43 7346 	orr.w	r3, r3, r6, lsl #29
   20ad4:	08f6      	lsrs	r6, r6, #3
        return q64 + ((r64 + 6) >> 4);
   20ad6:	1d87      	adds	r7, r0, #6
        r64 = ui64Val - q64*10;
   20ad8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   20adc:	ea4f 0886 	mov.w	r8, r6, lsl #2
        return q64 + ((r64 + 6) >> 4);
   20ae0:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   20ae4:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
   20ae8:	eb1c 0c03 	adds.w	ip, ip, r3
   20aec:	eb46 0808 	adc.w	r8, r6, r8
   20af0:	eb1c 0c0c 	adds.w	ip, ip, ip
   20af4:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
   20af8:	ebb7 070c 	subs.w	r7, r7, ip
   20afc:	eb61 0108 	sbc.w	r1, r1, r8
   20b00:	093f      	lsrs	r7, r7, #4
   20b02:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
   20b06:	18fb      	adds	r3, r7, r3
        uMod = ui64Val - (u64Tmp * 10);
   20b08:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   20b0c:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
        tbuf[ix++] = uMod + '0';
   20b10:	f100 0030 	add.w	r0, r0, #48	; 0x30
   20b14:	f88e 0000 	strb.w	r0, [lr]
   20b18:	eb46 1111 	adc.w	r1, r6, r1, lsr #4
   20b1c:	4618      	mov	r0, r3
   20b1e:	3401      	adds	r4, #1
   20b20:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
   20b24:	ea4f 0c90 	mov.w	ip, r0, lsr #2
   20b28:	eb0c 0c50 	add.w	ip, ip, r0, lsr #1
        q32 += (q32 >> 4);
   20b2c:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
        q32 += (q32 >> 8);
   20b30:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
        q32 += (q32 >> 16);
   20b34:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
        q32 >>= 3;
   20b38:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        r32 = ui32Val - q32*10;
   20b3c:	eb0c 098c 	add.w	r9, ip, ip, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
   20b40:	0843      	lsrs	r3, r0, #1
   20b42:	0887      	lsrs	r7, r0, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   20b44:	f100 0806 	add.w	r8, r0, #6
   20b48:	eba8 0849 	sub.w	r8, r8, r9, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
   20b4c:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   20b50:	ea47 7781 	orr.w	r7, r7, r1, lsl #30
   20b54:	088e      	lsrs	r6, r1, #2
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   20b56:	4681      	mov	r9, r0
    if ( ui64Val >> 32 )
   20b58:	2900      	cmp	r1, #0
   20b5a:	d1a0      	bne.n	20a9e <uint64_to_str+0xe>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   20b5c:	eb0c 1018 	add.w	r0, ip, r8, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
   20b60:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   20b64:	eba9 0943 	sub.w	r9, r9, r3, lsl #1
        tbuf[ix++] = uMod + '0';
   20b68:	f109 0930 	add.w	r9, r9, #48	; 0x30
   20b6c:	f88e 9000 	strb.w	r9, [lr]
        ui64Val = u64Tmp;
    } while ( ui64Val );
   20b70:	2800      	cmp	r0, #0
   20b72:	d1d4      	bne.n	20b1e <uint64_to_str+0x8e>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   20b74:	b14a      	cbz	r2, 20b8a <uint64_to_str+0xfa>
    {
        while ( ix-- )
   20b76:	192b      	adds	r3, r5, r4
   20b78:	1e51      	subs	r1, r2, #1
        {
            *pcBuf++ = tbuf[ix];
   20b7a:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   20b7e:	f801 0f01 	strb.w	r0, [r1, #1]!
        while ( ix-- )
   20b82:	429d      	cmp	r5, r3
   20b84:	d1f9      	bne.n	20b7a <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   20b86:	2300      	movs	r3, #0
   20b88:	5513      	strb	r3, [r2, r4]
    }

    return iNumDig;
}
   20b8a:	4620      	mov	r0, r4
   20b8c:	b009      	add	sp, #36	; 0x24
   20b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20b92:	bf00      	nop

00020b94 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
   20b94:	4b01      	ldr	r3, [pc, #4]	; (20b9c <am_util_stdio_printf_init+0x8>)
   20b96:	6018      	str	r0, [r3, #0]
}
   20b98:	4770      	bx	lr
   20b9a:	bf00      	nop
   20b9c:	10006020 	.word	0x10006020

00020ba0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   20ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
   20ba4:	780b      	ldrb	r3, [r1, #0]
{
   20ba6:	b089      	sub	sp, #36	; 0x24
   20ba8:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
   20baa:	2b00      	cmp	r3, #0
   20bac:	f000 8097 	beq.w	20cde <am_util_stdio_vsprintf+0x13e>
   20bb0:	4617      	mov	r7, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
   20bb2:	2600      	movs	r6, #0
   20bb4:	e00b      	b.n	20bce <am_util_stdio_vsprintf+0x2e>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   20bb6:	b125      	cbz	r5, 20bc2 <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   20bb8:	2b0a      	cmp	r3, #10
   20bba:	f000 8085 	beq.w	20cc8 <am_util_stdio_vsprintf+0x128>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
   20bbe:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
   20bc2:	3101      	adds	r1, #1
            ++ui32CharCnt;
   20bc4:	3601      	adds	r6, #1
    while ( *pcFmt != 0x0 )
   20bc6:	780b      	ldrb	r3, [r1, #0]
   20bc8:	2b00      	cmp	r3, #0
   20bca:	f000 8089 	beq.w	20ce0 <am_util_stdio_vsprintf+0x140>
        if ( *pcFmt != '%' )
   20bce:	2b25      	cmp	r3, #37	; 0x25
   20bd0:	d1f1      	bne.n	20bb6 <am_util_stdio_vsprintf+0x16>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
   20bd2:	784b      	ldrb	r3, [r1, #1]
   20bd4:	2b30      	cmp	r3, #48	; 0x30
   20bd6:	f000 8098 	beq.w	20d0a <am_util_stdio_vsprintf+0x16a>
        ++pcFmt;
   20bda:	f101 0e01 	add.w	lr, r1, #1
        ui8PadChar = ' ';
   20bde:	2220      	movs	r2, #32
    if ( *pcStr == '-')
   20be0:	2b2d      	cmp	r3, #45	; 0x2d
   20be2:	f000 8084 	beq.w	20cee <am_util_stdio_vsprintf+0x14e>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20be6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
   20bea:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20bee:	2909      	cmp	r1, #9
   20bf0:	4674      	mov	r4, lr
    bool bNeg = false;
   20bf2:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20bf4:	f200 8087 	bhi.w	20d06 <am_util_stdio_vsprintf+0x166>
   20bf8:	f10c 0c01 	add.w	ip, ip, #1
   20bfc:	ebac 0c04 	sub.w	ip, ip, r4
   20c00:	2100      	movs	r1, #0
        ui32Val *= 10;
   20c02:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
   20c06:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   20c0a:	eb04 090c 	add.w	r9, r4, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20c0e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   20c12:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   20c16:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
   20c18:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20c1c:	d9f1      	bls.n	20c02 <am_util_stdio_vsprintf+0x62>
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   20c1e:	f81e 3009 	ldrb.w	r3, [lr, r9]
        pcFmt += ui32NumChars;
   20c22:	eb0e 0409 	add.w	r4, lr, r9
    return bNeg ? -ui32Val : ui32Val;
   20c26:	f1b8 0f00 	cmp.w	r8, #0
   20c2a:	d000      	beq.n	20c2e <am_util_stdio_vsprintf+0x8e>
   20c2c:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   20c2e:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   20c30:	4608      	mov	r0, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   20c32:	f000 8125 	beq.w	20e80 <am_util_stdio_vsprintf+0x2e0>
   20c36:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   20c3a:	2b2e      	cmp	r3, #46	; 0x2e
   20c3c:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
   20c40:	f000 80f2 	beq.w	20e28 <am_util_stdio_vsprintf+0x288>
        iPrecision = 6;             // printf() default precision for %f is 6
   20c44:	f04f 0906 	mov.w	r9, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   20c48:	2b6c      	cmp	r3, #108	; 0x6c
   20c4a:	d104      	bne.n	20c56 <am_util_stdio_vsprintf+0xb6>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
   20c4c:	7863      	ldrb	r3, [r4, #1]
   20c4e:	2b6c      	cmp	r3, #108	; 0x6c
   20c50:	f000 8163 	beq.w	20f1a <am_util_stdio_vsprintf+0x37a>
            pcFmt++;
   20c54:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
   20c56:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
   20c5a:	2832      	cmp	r0, #50	; 0x32
   20c5c:	d85a      	bhi.n	20d14 <am_util_stdio_vsprintf+0x174>
   20c5e:	e8df f010 	tbh	[pc, r0, lsl #1]
   20c62:	005f      	.short	0x005f
   20c64:	00590059 	.word	0x00590059
   20c68:	00590059 	.word	0x00590059
   20c6c:	00590059 	.word	0x00590059
   20c70:	00590059 	.word	0x00590059
   20c74:	00590059 	.word	0x00590059
   20c78:	00590059 	.word	0x00590059
   20c7c:	00590059 	.word	0x00590059
   20c80:	00590059 	.word	0x00590059
   20c84:	01dc0059 	.word	0x01dc0059
   20c88:	00590059 	.word	0x00590059
   20c8c:	00590059 	.word	0x00590059
   20c90:	00590059 	.word	0x00590059
   20c94:	00590059 	.word	0x00590059
   20c98:	00590059 	.word	0x00590059
   20c9c:	00b400c9 	.word	0x00b400c9
   20ca0:	005f0059 	.word	0x005f0059
   20ca4:	00590059 	.word	0x00590059
   20ca8:	005900b4 	.word	0x005900b4
   20cac:	00590059 	.word	0x00590059
   20cb0:	00590059 	.word	0x00590059
   20cb4:	00590059 	.word	0x00590059
   20cb8:	00590059 	.word	0x00590059
   20cbc:	0059010e 	.word	0x0059010e
   20cc0:	005900d2 	.word	0x005900d2
   20cc4:	02fb0059 	.word	0x02fb0059
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   20cc8:	4acc      	ldr	r2, [pc, #816]	; (20ffc <am_util_stdio_vsprintf+0x45c>)
   20cca:	7812      	ldrb	r2, [r2, #0]
   20ccc:	2a00      	cmp	r2, #0
   20cce:	f43f af76 	beq.w	20bbe <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
   20cd2:	230d      	movs	r3, #13
   20cd4:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
   20cd8:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
   20cda:	780b      	ldrb	r3, [r1, #0]
   20cdc:	e76f      	b.n	20bbe <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
   20cde:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   20ce0:	b10d      	cbz	r5, 20ce6 <am_util_stdio_vsprintf+0x146>
    {
        *pcBuf = 0x0;
   20ce2:	2300      	movs	r3, #0
   20ce4:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
   20ce6:	4630      	mov	r0, r6
   20ce8:	b009      	add	sp, #36	; 0x24
   20cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20cee:	f89e 3001 	ldrb.w	r3, [lr, #1]
   20cf2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
        uCnt++;
   20cf6:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20cfa:	2909      	cmp	r1, #9
        pcStr++;
   20cfc:	eb0e 040c 	add.w	r4, lr, ip
        bNeg = true;
   20d00:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20d02:	f67f af79 	bls.w	20bf8 <am_util_stdio_vsprintf+0x58>
   20d06:	2100      	movs	r1, #0
   20d08:	e78d      	b.n	20c26 <am_util_stdio_vsprintf+0x86>
            ui8PadChar = '0';
   20d0a:	461a      	mov	r2, r3
            ++pcFmt;
   20d0c:	f101 0e02 	add.w	lr, r1, #2
    if ( *pcStr == '-')
   20d10:	788b      	ldrb	r3, [r1, #2]
   20d12:	e765      	b.n	20be0 <am_util_stdio_vsprintf+0x40>
                if ( pcBuf )
   20d14:	b10d      	cbz	r5, 20d1a <am_util_stdio_vsprintf+0x17a>
                    *pcBuf++ = *pcFmt;
   20d16:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
   20d1a:	3601      	adds	r6, #1
        ++pcFmt;
   20d1c:	1c61      	adds	r1, r4, #1
   20d1e:	e752      	b.n	20bc6 <am_util_stdio_vsprintf+0x26>
                if ( pcBuf )
   20d20:	2d00      	cmp	r5, #0
   20d22:	d0fb      	beq.n	20d1c <am_util_stdio_vsprintf+0x17c>
                    float fValue = va_arg(pArgs, double);
   20d24:	3707      	adds	r7, #7
   20d26:	f027 0707 	bic.w	r7, r7, #7
   20d2a:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   20d2e:	f7eb fa81 	bl	c234 <__aeabi_d2f>
   20d32:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
   20d36:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
   20d3a:	2314      	movs	r3, #20
    if (fValue == 0.0f)
   20d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
   20d40:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
   20d42:	f000 835d 	beq.w	21400 <am_util_stdio_vsprintf+0x860>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   20d46:	f3c0 51c7 	ubfx	r1, r0, #23, #8
   20d4a:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
   20d4e:	4603      	mov	r3, r0
    if (iExp2 >= 31)
   20d50:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   20d52:	f3c0 0016 	ubfx	r0, r0, #0, #23
   20d56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
   20d5a:	f300 837c 	bgt.w	21456 <am_util_stdio_vsprintf+0x8b6>
    else if (iExp2 < -23)
   20d5e:	f112 0f17 	cmn.w	r2, #23
   20d62:	f2c0 8374 	blt.w	2144e <am_util_stdio_vsprintf+0x8ae>
    else if (iExp2 >= 23)
   20d66:	2a16      	cmp	r2, #22
   20d68:	f340 8246 	ble.w	211f8 <am_util_stdio_vsprintf+0x658>
        i32IntPart = i32Significand << (iExp2 - 23);
   20d6c:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
   20d6e:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
   20d70:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
   20d74:	f2c0 8287 	blt.w	21286 <am_util_stdio_vsprintf+0x6e6>
   20d78:	462b      	mov	r3, r5
    i32FracPart = 0;
   20d7a:	f04f 0800 	mov.w	r8, #0
    if (i32IntPart == 0)
   20d7e:	2800      	cmp	r0, #0
   20d80:	f000 827c 	beq.w	2127c <am_util_stdio_vsprintf+0x6dc>
            *pcBuf++ = '-';
   20d84:	461a      	mov	r2, r3
   20d86:	bfde      	ittt	le
   20d88:	232d      	movle	r3, #45	; 0x2d
   20d8a:	f802 3b01 	strble.w	r3, [r2], #1
            uint64_to_str(-i32IntPart, pcBuf);
   20d8e:	4240      	negle	r0, r0
   20d90:	17c1      	asrs	r1, r0, #31
   20d92:	f7ff fe7d 	bl	20a90 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   20d96:	7813      	ldrb	r3, [r2, #0]
   20d98:	b11b      	cbz	r3, 20da2 <am_util_stdio_vsprintf+0x202>
   20d9a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   20d9e:	2b00      	cmp	r3, #0
   20da0:	d1fb      	bne.n	20d9a <am_util_stdio_vsprintf+0x1fa>
    *pcBuf++ = '.';
   20da2:	232e      	movs	r3, #46	; 0x2e
   20da4:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   20da6:	f1b8 0f00 	cmp.w	r8, #0
   20daa:	f040 8291 	bne.w	212d0 <am_util_stdio_vsprintf+0x730>
        *pcBuf++ = '0';
   20dae:	1c90      	adds	r0, r2, #2
   20db0:	2330      	movs	r3, #48	; 0x30
   20db2:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
   20db4:	1b41      	subs	r1, r0, r5
    *pcBuf = 0x00;
   20db6:	2300      	movs	r3, #0
                    if ( iVal < 0 )
   20db8:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
   20dba:	7003      	strb	r3, [r0, #0]
                    if ( iVal < 0 )
   20dbc:	f2c0 82c3 	blt.w	21346 <am_util_stdio_vsprintf+0x7a6>
                    ui32CharCnt += iVal;
   20dc0:	460b      	mov	r3, r1
   20dc2:	441e      	add	r6, r3
                    pcBuf += iVal;
   20dc4:	441d      	add	r5, r3
        ++pcFmt;
   20dc6:	1c61      	adds	r1, r4, #1
   20dc8:	e6fd      	b.n	20bc6 <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   20dca:	f857 9b04 	ldr.w	r9, [r7], #4
   20dce:	ea4f 7ae9 	mov.w	sl, r9, asr #31
                if ( i64Val < 0 )
   20dd2:	f1ba 0f00 	cmp.w	sl, #0
   20dd6:	f2c0 8113 	blt.w	21000 <am_util_stdio_vsprintf+0x460>
                if ( iWidth )
   20dda:	2900      	cmp	r1, #0
   20ddc:	f040 82bd 	bne.w	2135a <am_util_stdio_vsprintf+0x7ba>
                iVal = uint64_to_str(ui64Val, pcBuf);
   20de0:	4648      	mov	r0, r9
   20de2:	4651      	mov	r1, sl
   20de4:	462a      	mov	r2, r5
   20de6:	f7ff fe53 	bl	20a90 <uint64_to_str>
                if ( pcBuf )
   20dea:	b9d5      	cbnz	r5, 20e22 <am_util_stdio_vsprintf+0x282>
                ui32CharCnt += iVal;
   20dec:	2500      	movs	r5, #0
   20dee:	4406      	add	r6, r0
        ++pcFmt;
   20df0:	1c61      	adds	r1, r4, #1
   20df2:	e6e8      	b.n	20bc6 <am_util_stdio_vsprintf+0x26>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   20df4:	1d3b      	adds	r3, r7, #4
                if ( pcBuf )
   20df6:	b115      	cbz	r5, 20dfe <am_util_stdio_vsprintf+0x25e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   20df8:	683a      	ldr	r2, [r7, #0]
   20dfa:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
   20dfe:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   20e00:	461f      	mov	r7, r3
        ++pcFmt;
   20e02:	1c61      	adds	r1, r4, #1
   20e04:	e6df      	b.n	20bc6 <am_util_stdio_vsprintf+0x26>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   20e06:	f857 ab04 	ldr.w	sl, [r7], #4
   20e0a:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
   20e0e:	2900      	cmp	r1, #0
   20e10:	f040 81b0 	bne.w	21174 <am_util_stdio_vsprintf+0x5d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
   20e14:	4650      	mov	r0, sl
   20e16:	4649      	mov	r1, r9
   20e18:	462a      	mov	r2, r5
   20e1a:	f7ff fe39 	bl	20a90 <uint64_to_str>
                if ( pcBuf )
   20e1e:	2d00      	cmp	r5, #0
   20e20:	d0e4      	beq.n	20dec <am_util_stdio_vsprintf+0x24c>
                    pcBuf += iVal;
   20e22:	4405      	add	r5, r0
                ui32CharCnt += iVal;
   20e24:	4406      	add	r6, r0
                break;
   20e26:	e7e3      	b.n	20df0 <am_util_stdio_vsprintf+0x250>
    if ( *pcStr == '-')
   20e28:	7860      	ldrb	r0, [r4, #1]
   20e2a:	282d      	cmp	r0, #45	; 0x2d
            ++pcFmt;
   20e2c:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
   20e30:	f000 8195 	beq.w	2115e <am_util_stdio_vsprintf+0x5be>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20e34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   20e38:	2b09      	cmp	r3, #9
   20e3a:	f200 82ea 	bhi.w	21412 <am_util_stdio_vsprintf+0x872>
    uint32_t ui32Val = 0, uCnt = 0;
   20e3e:	2300      	movs	r3, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20e40:	4664      	mov	r4, ip
    bool bNeg = false;
   20e42:	4699      	mov	r9, r3
   20e44:	3301      	adds	r3, #1
   20e46:	eba3 0e04 	sub.w	lr, r3, r4
   20e4a:	2300      	movs	r3, #0
        ui32Val *= 10;
   20e4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
   20e50:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   20e54:	eb04 0a0e 	add.w	sl, r4, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20e58:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   20e5c:	f1a0 0b30 	sub.w	fp, r0, #48	; 0x30
   20e60:	f1bb 0f09 	cmp.w	fp, #9
        ui32Val += (*pcStr - '0');
   20e64:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   20e68:	d9f0      	bls.n	20e4c <am_util_stdio_vsprintf+0x2ac>
    return bNeg ? -ui32Val : ui32Val;
   20e6a:	f1b9 0f00 	cmp.w	r9, #0
   20e6e:	d000      	beq.n	20e72 <am_util_stdio_vsprintf+0x2d2>
   20e70:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   20e72:	4699      	mov	r9, r3
            pcFmt += ui32NumChars;
   20e74:	eb0c 040a 	add.w	r4, ip, sl
        if ( *pcFmt == 'l' )
   20e78:	f81c 300a 	ldrb.w	r3, [ip, sl]
   20e7c:	e6e4      	b.n	20c48 <am_util_stdio_vsprintf+0xa8>
        switch ( *pcFmt )
   20e7e:	4640      	mov	r0, r8
                pcStr = va_arg(pArgs, char *);
   20e80:	46b9      	mov	r9, r7
   20e82:	f859 3b04 	ldr.w	r3, [r9], #4
    if ( !pcBuf )
   20e86:	2b00      	cmp	r3, #0
   20e88:	f000 81c6 	beq.w	21218 <am_util_stdio_vsprintf+0x678>
    while ( *pcBuf++ )
   20e8c:	469c      	mov	ip, r3
   20e8e:	f81c 1b01 	ldrb.w	r1, [ip], #1
   20e92:	2900      	cmp	r1, #0
   20e94:	f000 82c1 	beq.w	2141a <am_util_stdio_vsprintf+0x87a>
    uint32_t ui32RetVal = 0;
   20e98:	f04f 0e00 	mov.w	lr, #0
    while ( *pcBuf++ )
   20e9c:	f81c 7b01 	ldrb.w	r7, [ip], #1
        ui32RetVal++;
   20ea0:	f10e 0e01 	add.w	lr, lr, #1
    while ( *pcBuf++ )
   20ea4:	2f00      	cmp	r7, #0
   20ea6:	d1f9      	bne.n	20e9c <am_util_stdio_vsprintf+0x2fc>
                if ( iWidth > 0 )
   20ea8:	2800      	cmp	r0, #0
   20eaa:	dd02      	ble.n	20eb2 <am_util_stdio_vsprintf+0x312>
                    if ( ui32strlen < iWidth )
   20eac:	4570      	cmp	r0, lr
   20eae:	f200 81d6 	bhi.w	2125e <am_util_stdio_vsprintf+0x6be>
   20eb2:	f1c3 0801 	rsb	r8, r3, #1
                while (*pcStr != 0x0)
   20eb6:	46b2      	mov	sl, r6
   20eb8:	462f      	mov	r7, r5
   20eba:	eb08 0c06 	add.w	ip, r8, r6
   20ebe:	e000      	b.n	20ec2 <am_util_stdio_vsprintf+0x322>
                        *pcBuf++ = *pcStr;
   20ec0:	462f      	mov	r7, r5
   20ec2:	eb0c 0603 	add.w	r6, ip, r3
                    if ( pcBuf )
   20ec6:	2d00      	cmp	r5, #0
   20ec8:	f000 8131 	beq.w	2112e <am_util_stdio_vsprintf+0x58e>
                        *pcBuf++ = *pcStr;
   20ecc:	7039      	strb	r1, [r7, #0]
                while (*pcStr != 0x0)
   20ece:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
   20ed2:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
   20ed4:	2900      	cmp	r1, #0
   20ed6:	d1f3      	bne.n	20ec0 <am_util_stdio_vsprintf+0x320>
                if ( iWidth )
   20ed8:	b1e0      	cbz	r0, 20f14 <am_util_stdio_vsprintf+0x374>
                    iWidth = -iWidth;
   20eda:	f1c0 0800 	rsb	r8, r0, #0
                    if ( ui32strlen < iWidth )
   20ede:	45f0      	cmp	r8, lr
   20ee0:	d918      	bls.n	20f14 <am_util_stdio_vsprintf+0x374>
                        iWidth -= ui32strlen;
   20ee2:	eba8 030e 	sub.w	r3, r8, lr
    if ( i32NumChars <= 0 )
   20ee6:	2b00      	cmp	r3, #0
   20ee8:	f340 82b3 	ble.w	21452 <am_util_stdio_vsprintf+0x8b2>
    while ( i32NumChars-- )
   20eec:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   20eee:	4694      	mov	ip, r2
   20ef0:	2000      	movs	r0, #0
   20ef2:	461a      	mov	r2, r3
   20ef4:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   20ef6:	4619      	mov	r1, r3
        if ( pcBuf )
   20ef8:	2b00      	cmp	r3, #0
   20efa:	f000 8129 	beq.w	21150 <am_util_stdio_vsprintf+0x5b0>
            *pcBuf++ = cPadChar;
   20efe:	f801 cb01 	strb.w	ip, [r1], #1
   20f02:	4617      	mov	r7, r2
   20f04:	460b      	mov	r3, r1
        i32Cnt++;
   20f06:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   20f08:	1e7a      	subs	r2, r7, #1
   20f0a:	2f00      	cmp	r7, #0
   20f0c:	d1f3      	bne.n	20ef6 <am_util_stdio_vsprintf+0x356>
                        ui32CharCnt += iWidth;
   20f0e:	4406      	add	r6, r0
                        pcBuf += pcBuf ? iWidth : 0;
   20f10:	b105      	cbz	r5, 20f14 <am_util_stdio_vsprintf+0x374>
   20f12:	4405      	add	r5, r0
                pcStr = va_arg(pArgs, char *);
   20f14:	464f      	mov	r7, r9
        ++pcFmt;
   20f16:	1c61      	adds	r1, r4, #1
   20f18:	e655      	b.n	20bc6 <am_util_stdio_vsprintf+0x26>
        switch ( *pcFmt )
   20f1a:	78a3      	ldrb	r3, [r4, #2]
   20f1c:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
                pcFmt++;
   20f20:	3402      	adds	r4, #2
        switch ( *pcFmt )
   20f22:	2832      	cmp	r0, #50	; 0x32
   20f24:	f63f aef6 	bhi.w	20d14 <am_util_stdio_vsprintf+0x174>
   20f28:	f20f 0c04 	addw	ip, pc, #4
   20f2c:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   20f30:	00020d21 	.word	0x00020d21
   20f34:	00020d15 	.word	0x00020d15
   20f38:	00020d15 	.word	0x00020d15
   20f3c:	00020d15 	.word	0x00020d15
   20f40:	00020d15 	.word	0x00020d15
   20f44:	00020d15 	.word	0x00020d15
   20f48:	00020d15 	.word	0x00020d15
   20f4c:	00020d15 	.word	0x00020d15
   20f50:	00020d15 	.word	0x00020d15
   20f54:	00020d15 	.word	0x00020d15
   20f58:	00020d15 	.word	0x00020d15
   20f5c:	00020d15 	.word	0x00020d15
   20f60:	00020d15 	.word	0x00020d15
   20f64:	00020d15 	.word	0x00020d15
   20f68:	00020d15 	.word	0x00020d15
   20f6c:	00020d15 	.word	0x00020d15
   20f70:	00020d15 	.word	0x00020d15
   20f74:	00020d15 	.word	0x00020d15
   20f78:	000212a9 	.word	0x000212a9
   20f7c:	00020d15 	.word	0x00020d15
   20f80:	00020d15 	.word	0x00020d15
   20f84:	00020d15 	.word	0x00020d15
   20f88:	00020d15 	.word	0x00020d15
   20f8c:	00020d15 	.word	0x00020d15
   20f90:	00020d15 	.word	0x00020d15
   20f94:	00020d15 	.word	0x00020d15
   20f98:	00020d15 	.word	0x00020d15
   20f9c:	00020d15 	.word	0x00020d15
   20fa0:	00020d15 	.word	0x00020d15
   20fa4:	00020df5 	.word	0x00020df5
   20fa8:	00021049 	.word	0x00021049
   20fac:	00020d15 	.word	0x00020d15
   20fb0:	00020d21 	.word	0x00020d21
   20fb4:	00020d15 	.word	0x00020d15
   20fb8:	00020d15 	.word	0x00020d15
   20fbc:	00021049 	.word	0x00021049
   20fc0:	00020d15 	.word	0x00020d15
   20fc4:	00020d15 	.word	0x00020d15
   20fc8:	00020d15 	.word	0x00020d15
   20fcc:	00020d15 	.word	0x00020d15
   20fd0:	00020d15 	.word	0x00020d15
   20fd4:	00020d15 	.word	0x00020d15
   20fd8:	00020d15 	.word	0x00020d15
   20fdc:	00020d15 	.word	0x00020d15
   20fe0:	00020d15 	.word	0x00020d15
   20fe4:	00020e7f 	.word	0x00020e7f
   20fe8:	00020d15 	.word	0x00020d15
   20fec:	00021059 	.word	0x00021059
   20ff0:	00020d15 	.word	0x00020d15
   20ff4:	00020d15 	.word	0x00020d15
   20ff8:	000212bd 	.word	0x000212bd
   20ffc:	1000601c 	.word	0x1000601c
                    ui64Val = -i64Val;          // Get absolute value
   21000:	f1d9 0900 	rsbs	r9, r9, #0
   21004:	eb6a 0a4a 	sbc.w	sl, sl, sl, lsl #1
                if ( iWidth )
   21008:	2900      	cmp	r1, #0
   2100a:	f040 81fd 	bne.w	21408 <am_util_stdio_vsprintf+0x868>
                        if ( pcBuf )
   2100e:	b115      	cbz	r5, 21016 <am_util_stdio_vsprintf+0x476>
                            *pcBuf++ = '-';
   21010:	232d      	movs	r3, #45	; 0x2d
   21012:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
   21016:	3601      	adds	r6, #1
   21018:	e6e2      	b.n	20de0 <am_util_stdio_vsprintf+0x240>
        bLower = bLongLong = false;
   2101a:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2101e:	f857 0b04 	ldr.w	r0, [r7], #4
   21022:	f04f 0c00 	mov.w	ip, #0
                if ( iWidth )
   21026:	b9f9      	cbnz	r1, 21068 <am_util_stdio_vsprintf+0x4c8>
    if ( ui64Val == 0 )
   21028:	ea50 030c 	orrs.w	r3, r0, ip
   2102c:	d14d      	bne.n	210ca <am_util_stdio_vsprintf+0x52a>
    if (pcBuf)
   2102e:	2d00      	cmp	r5, #0
   21030:	d079      	beq.n	21126 <am_util_stdio_vsprintf+0x586>
            *pcBuf++ = tbuf[ix];
   21032:	462b      	mov	r3, r5
   21034:	2230      	movs	r2, #48	; 0x30
   21036:	f803 2b01 	strb.w	r2, [r3], #1
   2103a:	2201      	movs	r2, #1
   2103c:	461d      	mov	r5, r3
        *pcBuf = 0;
   2103e:	2100      	movs	r1, #0
   21040:	7019      	strb	r1, [r3, #0]
                ui32CharCnt += iVal;
   21042:	4416      	add	r6, r2
        ++pcFmt;
   21044:	1c61      	adds	r1, r4, #1
   21046:	e5be      	b.n	20bc6 <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   21048:	3707      	adds	r7, #7
   2104a:	f027 0707 	bic.w	r7, r7, #7
   2104e:	f8d7 a004 	ldr.w	sl, [r7, #4]
   21052:	f857 9b08 	ldr.w	r9, [r7], #8
   21056:	e6bc      	b.n	20dd2 <am_util_stdio_vsprintf+0x232>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21058:	3707      	adds	r7, #7
   2105a:	f027 0707 	bic.w	r7, r7, #7
   2105e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   21062:	f857 ab08 	ldr.w	sl, [r7], #8
   21066:	e6d2      	b.n	20e0e <am_util_stdio_vsprintf+0x26e>
    int iDigits = ui64Val ? 0 : 1;
   21068:	ea50 030c 	orrs.w	r3, r0, ip
   2106c:	bf0c      	ite	eq
   2106e:	2101      	moveq	r1, #1
   21070:	2100      	movne	r1, #0
    while ( ui64Val )
   21072:	d00b      	beq.n	2108c <am_util_stdio_vsprintf+0x4ec>
   21074:	4603      	mov	r3, r0
   21076:	46e1      	mov	r9, ip
        ui64Val >>= 4;
   21078:	091b      	lsrs	r3, r3, #4
   2107a:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
   2107e:	ea4f 1919 	mov.w	r9, r9, lsr #4
    while ( ui64Val )
   21082:	ea53 0a09 	orrs.w	sl, r3, r9
        ++iDigits;
   21086:	f101 0101 	add.w	r1, r1, #1
    while ( ui64Val )
   2108a:	d1f5      	bne.n	21078 <am_util_stdio_vsprintf+0x4d8>
                    iWidth -= ndigits_in_hex(ui64Val);
   2108c:	eba8 0301 	sub.w	r3, r8, r1
    if ( i32NumChars <= 0 )
   21090:	2b00      	cmp	r3, #0
   21092:	f340 81b2 	ble.w	213fa <am_util_stdio_vsprintf+0x85a>
    while ( i32NumChars-- )
   21096:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   21098:	4691      	mov	r9, r2
   2109a:	4682      	mov	sl, r0
   2109c:	f04f 0800 	mov.w	r8, #0
   210a0:	462a      	mov	r2, r5
   210a2:	4618      	mov	r0, r3
            *pcBuf++ = cPadChar;
   210a4:	4611      	mov	r1, r2
        if ( pcBuf )
   210a6:	2a00      	cmp	r2, #0
   210a8:	d04c      	beq.n	21144 <am_util_stdio_vsprintf+0x5a4>
            *pcBuf++ = cPadChar;
   210aa:	f801 9b01 	strb.w	r9, [r1], #1
   210ae:	4603      	mov	r3, r0
   210b0:	460a      	mov	r2, r1
        i32Cnt++;
   210b2:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   210b6:	1e58      	subs	r0, r3, #1
   210b8:	2b00      	cmp	r3, #0
   210ba:	d1f3      	bne.n	210a4 <am_util_stdio_vsprintf+0x504>
                    ui32CharCnt += iWidth;
   210bc:	4650      	mov	r0, sl
   210be:	4446      	add	r6, r8
                    pcBuf += pcBuf ? iWidth : 0;
   210c0:	b375      	cbz	r5, 21120 <am_util_stdio_vsprintf+0x580>
    if ( ui64Val == 0 )
   210c2:	ea50 030c 	orrs.w	r3, r0, ip
                    pcBuf += pcBuf ? iWidth : 0;
   210c6:	4445      	add	r5, r8
    if ( ui64Val == 0 )
   210c8:	d0b3      	beq.n	21032 <am_util_stdio_vsprintf+0x492>
   210ca:	f1be 0f00 	cmp.w	lr, #0
   210ce:	f10d 080c 	add.w	r8, sp, #12
   210d2:	bf14      	ite	ne
   210d4:	f04f 0927 	movne.w	r9, #39	; 0x27
   210d8:	f04f 0907 	moveq.w	r9, #7
   210dc:	4641      	mov	r1, r8
    int iNumDig, ix = 0;
   210de:	2200      	movs	r2, #0
        cCh = ui64Val & 0xf;
   210e0:	f000 030f 	and.w	r3, r0, #15
        if ( cCh > 9 )
   210e4:	2b09      	cmp	r3, #9
            cCh += bLower ? 0x27 : 0x7;
   210e6:	bf88      	it	hi
   210e8:	444b      	addhi	r3, r9
        ui64Val >>= 4;
   210ea:	ea4f 1e10 	mov.w	lr, r0, lsr #4
   210ee:	ea4e 700c 	orr.w	r0, lr, ip, lsl #28
        tbuf[ix++] = cCh + '0';
   210f2:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
   210f4:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
        tbuf[ix++] = cCh + '0';
   210f8:	f801 3b01 	strb.w	r3, [r1], #1
    while ( ui64Val )
   210fc:	ea50 030c 	orrs.w	r3, r0, ip
        tbuf[ix++] = cCh + '0';
   21100:	f102 0201 	add.w	r2, r2, #1
    while ( ui64Val )
   21104:	d1ec      	bne.n	210e0 <am_util_stdio_vsprintf+0x540>
    if (pcBuf)
   21106:	b17d      	cbz	r5, 21128 <am_util_stdio_vsprintf+0x588>
   21108:	eb08 0302 	add.w	r3, r8, r2
   2110c:	1e69      	subs	r1, r5, #1
            *pcBuf++ = tbuf[ix];
   2110e:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   21112:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (ix--)
   21116:	4543      	cmp	r3, r8
   21118:	d1f9      	bne.n	2110e <am_util_stdio_vsprintf+0x56e>
            *pcBuf++ = tbuf[ix];
   2111a:	18ab      	adds	r3, r5, r2
                    pcBuf += iVal;
   2111c:	461d      	mov	r5, r3
   2111e:	e78e      	b.n	2103e <am_util_stdio_vsprintf+0x49e>
    if ( ui64Val == 0 )
   21120:	ea50 030c 	orrs.w	r3, r0, ip
   21124:	d1d1      	bne.n	210ca <am_util_stdio_vsprintf+0x52a>
   21126:	2201      	movs	r2, #1
                if ( pcBuf )
   21128:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
   2112a:	4416      	add	r6, r2
                break;
   2112c:	e78a      	b.n	21044 <am_util_stdio_vsprintf+0x4a4>
   2112e:	eb08 010a 	add.w	r1, r8, sl
                    ++ui32CharCnt;
   21132:	18ce      	adds	r6, r1, r3
                while (*pcStr != 0x0)
   21134:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   21138:	2f00      	cmp	r7, #0
   2113a:	d1fa      	bne.n	21132 <am_util_stdio_vsprintf+0x592>
                if ( iWidth )
   2113c:	2800      	cmp	r0, #0
   2113e:	f43f aee9 	beq.w	20f14 <am_util_stdio_vsprintf+0x374>
   21142:	e6ca      	b.n	20eda <am_util_stdio_vsprintf+0x33a>
    while ( i32NumChars-- )
   21144:	1e43      	subs	r3, r0, #1
        i32Cnt++;
   21146:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   2114a:	2800      	cmp	r0, #0
   2114c:	d1b1      	bne.n	210b2 <am_util_stdio_vsprintf+0x512>
   2114e:	e7b5      	b.n	210bc <am_util_stdio_vsprintf+0x51c>
   21150:	1e57      	subs	r7, r2, #1
        i32Cnt++;
   21152:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   21154:	2a00      	cmp	r2, #0
   21156:	f47f aed6 	bne.w	20f06 <am_util_stdio_vsprintf+0x366>
                        ui32CharCnt += iWidth;
   2115a:	4406      	add	r6, r0
   2115c:	e6d8      	b.n	20f10 <am_util_stdio_vsprintf+0x370>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2115e:	78a0      	ldrb	r0, [r4, #2]
   21160:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   21164:	2b09      	cmp	r3, #9
        pcStr++;
   21166:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2116a:	f200 8176 	bhi.w	2145a <am_util_stdio_vsprintf+0x8ba>
        uCnt++;
   2116e:	2301      	movs	r3, #1
        bNeg = true;
   21170:	4699      	mov	r9, r3
   21172:	e667      	b.n	20e44 <am_util_stdio_vsprintf+0x2a4>
    int iNDigits = ui64Val ? 0 : 1;
   21174:	ea5a 0309 	orrs.w	r3, sl, r9
   21178:	bf0c      	ite	eq
   2117a:	f04f 0b01 	moveq.w	fp, #1
   2117e:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   21182:	d012      	beq.n	211aa <am_util_stdio_vsprintf+0x60a>
   21184:	4649      	mov	r1, r9
   21186:	9400      	str	r4, [sp, #0]
   21188:	4650      	mov	r0, sl
   2118a:	465c      	mov	r4, fp
   2118c:	46cb      	mov	fp, r9
   2118e:	46a9      	mov	r9, r5
   21190:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   21192:	f7ff fc21 	bl	209d8 <divu64_10>
    while ( ui64Val )
   21196:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   2119a:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   2119e:	d1f8      	bne.n	21192 <am_util_stdio_vsprintf+0x5f2>
   211a0:	462a      	mov	r2, r5
   211a2:	464d      	mov	r5, r9
   211a4:	46d9      	mov	r9, fp
   211a6:	46a3      	mov	fp, r4
   211a8:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
   211aa:	eba8 030b 	sub.w	r3, r8, fp
    if ( i32NumChars <= 0 )
   211ae:	2b00      	cmp	r3, #0
   211b0:	f340 8149 	ble.w	21446 <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
   211b4:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   211b6:	4694      	mov	ip, r2
   211b8:	46a6      	mov	lr, r4
   211ba:	2000      	movs	r0, #0
   211bc:	462a      	mov	r2, r5
   211be:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   211c0:	4611      	mov	r1, r2
        if ( pcBuf )
   211c2:	b1a2      	cbz	r2, 211ee <am_util_stdio_vsprintf+0x64e>
            *pcBuf++ = cPadChar;
   211c4:	f801 cb01 	strb.w	ip, [r1], #1
   211c8:	4623      	mov	r3, r4
   211ca:	460a      	mov	r2, r1
        i32Cnt++;
   211cc:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   211ce:	1e5c      	subs	r4, r3, #1
   211d0:	2b00      	cmp	r3, #0
   211d2:	d1f5      	bne.n	211c0 <am_util_stdio_vsprintf+0x620>
                    ui32CharCnt += iWidth;
   211d4:	4674      	mov	r4, lr
   211d6:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   211d8:	2d00      	cmp	r5, #0
   211da:	f000 8123 	beq.w	21424 <am_util_stdio_vsprintf+0x884>
   211de:	4405      	add	r5, r0
                iVal = uint64_to_str(ui64Val, pcBuf);
   211e0:	462a      	mov	r2, r5
   211e2:	4650      	mov	r0, sl
   211e4:	4649      	mov	r1, r9
   211e6:	f7ff fc53 	bl	20a90 <uint64_to_str>
                    pcBuf += iVal;
   211ea:	4405      	add	r5, r0
   211ec:	e61a      	b.n	20e24 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   211ee:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   211f0:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   211f2:	2c00      	cmp	r4, #0
   211f4:	d1ea      	bne.n	211cc <am_util_stdio_vsprintf+0x62c>
   211f6:	e7ed      	b.n	211d4 <am_util_stdio_vsprintf+0x634>
    else if (iExp2 >= 0)
   211f8:	2a00      	cmp	r2, #0
   211fa:	db36      	blt.n	2126a <am_util_stdio_vsprintf+0x6ca>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   211fc:	f1a1 087e 	sub.w	r8, r1, #126	; 0x7e
   21200:	fa00 f808 	lsl.w	r8, r0, r8
        i32IntPart = i32Significand >> (23 - iExp2);
   21204:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
   21208:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand >> (23 - iExp2);
   2120a:	fa40 f002 	asr.w	r0, r0, r2
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   2120e:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    if (unFloatValue.I32 < 0)
   21212:	db3a      	blt.n	2128a <am_util_stdio_vsprintf+0x6ea>
   21214:	462a      	mov	r2, r5
   21216:	e5bb      	b.n	20d90 <am_util_stdio_vsprintf+0x1f0>
                if ( iWidth > 0 )
   21218:	2800      	cmp	r0, #0
   2121a:	dd3b      	ble.n	21294 <am_util_stdio_vsprintf+0x6f4>
        return ui32RetVal;
   2121c:	469e      	mov	lr, r3
    int32_t i32Cnt = 0;
   2121e:	469c      	mov	ip, r3
    while ( i32NumChars-- )
   21220:	f100 38ff 	add.w	r8, r0, #4294967295
    int32_t i32Cnt = 0;
   21224:	2100      	movs	r1, #0
   21226:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   21228:	4618      	mov	r0, r3
        if ( pcBuf )
   2122a:	2b00      	cmp	r3, #0
   2122c:	d049      	beq.n	212c2 <am_util_stdio_vsprintf+0x722>
            *pcBuf++ = cPadChar;
   2122e:	f800 2b01 	strb.w	r2, [r0], #1
   21232:	4647      	mov	r7, r8
   21234:	4603      	mov	r3, r0
        i32Cnt++;
   21236:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   21238:	f107 38ff 	add.w	r8, r7, #4294967295
   2123c:	2f00      	cmp	r7, #0
   2123e:	d1f3      	bne.n	21228 <am_util_stdio_vsprintf+0x688>
                        ui32CharCnt += iWidth;
   21240:	4608      	mov	r0, r1
   21242:	440e      	add	r6, r1
                while (*pcStr != 0x0)
   21244:	f89c 1000 	ldrb.w	r1, [ip]
                        ui32CharCnt += iWidth;
   21248:	4663      	mov	r3, ip
                        pcBuf += pcBuf ? iWidth : 0;
   2124a:	b105      	cbz	r5, 2124e <am_util_stdio_vsprintf+0x6ae>
   2124c:	4405      	add	r5, r0
                while (*pcStr != 0x0)
   2124e:	2900      	cmp	r1, #0
   21250:	f43f ae60 	beq.w	20f14 <am_util_stdio_vsprintf+0x374>
                        iWidth = 0;
   21254:	2000      	movs	r0, #0
   21256:	e62c      	b.n	20eb2 <am_util_stdio_vsprintf+0x312>
        switch ( *pcFmt )
   21258:	f04f 0e01 	mov.w	lr, #1
   2125c:	e6df      	b.n	2101e <am_util_stdio_vsprintf+0x47e>
                        iWidth -= ui32strlen;
   2125e:	eba0 000e 	sub.w	r0, r0, lr
    if ( i32NumChars <= 0 )
   21262:	2800      	cmp	r0, #0
   21264:	dcdb      	bgt.n	2121e <am_util_stdio_vsprintf+0x67e>
   21266:	4638      	mov	r0, r7
   21268:	e7ef      	b.n	2124a <am_util_stdio_vsprintf+0x6aa>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   2126a:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
   2126c:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   2126e:	fa40 f802 	asr.w	r8, r0, r2
        *pcBuf++ = '-';
   21272:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
   21274:	da02      	bge.n	2127c <am_util_stdio_vsprintf+0x6dc>
        *pcBuf++ = '-';
   21276:	222d      	movs	r2, #45	; 0x2d
   21278:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
   2127c:	461a      	mov	r2, r3
   2127e:	2330      	movs	r3, #48	; 0x30
   21280:	f802 3b01 	strb.w	r3, [r2], #1
   21284:	e58d      	b.n	20da2 <am_util_stdio_vsprintf+0x202>
    i32FracPart = 0;
   21286:	f04f 0800 	mov.w	r8, #0
        *pcBuf++ = '-';
   2128a:	462b      	mov	r3, r5
   2128c:	222d      	movs	r2, #45	; 0x2d
   2128e:	f803 2b01 	strb.w	r2, [r3], #1
   21292:	e574      	b.n	20d7e <am_util_stdio_vsprintf+0x1de>
    while ( *pcBuf++ )
   21294:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
   21296:	469e      	mov	lr, r3
   21298:	2900      	cmp	r1, #0
   2129a:	f47f ae0a 	bne.w	20eb2 <am_util_stdio_vsprintf+0x312>
   2129e:	468e      	mov	lr, r1
                if ( iWidth )
   212a0:	2800      	cmp	r0, #0
   212a2:	f43f ae37 	beq.w	20f14 <am_util_stdio_vsprintf+0x374>
   212a6:	e618      	b.n	20eda <am_util_stdio_vsprintf+0x33a>
        bLower = bLongLong = false;
   212a8:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   212ac:	3707      	adds	r7, #7
   212ae:	f027 0707 	bic.w	r7, r7, #7
   212b2:	f8d7 c004 	ldr.w	ip, [r7, #4]
   212b6:	f857 0b08 	ldr.w	r0, [r7], #8
   212ba:	e6b4      	b.n	21026 <am_util_stdio_vsprintf+0x486>
        switch ( *pcFmt )
   212bc:	f04f 0e01 	mov.w	lr, #1
   212c0:	e7f4      	b.n	212ac <am_util_stdio_vsprintf+0x70c>
    while ( i32NumChars-- )
   212c2:	f108 37ff 	add.w	r7, r8, #4294967295
        i32Cnt++;
   212c6:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   212c8:	f1b8 0f00 	cmp.w	r8, #0
   212cc:	d1b3      	bne.n	21236 <am_util_stdio_vsprintf+0x696>
   212ce:	e7b7      	b.n	21240 <am_util_stdio_vsprintf+0x6a0>
    *pcBuf++ = '.';
   212d0:	f102 0c01 	add.w	ip, r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   212d4:	ebac 0105 	sub.w	r1, ip, r5
   212d8:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   212dc:	454b      	cmp	r3, r9
   212de:	bfa8      	it	ge
   212e0:	464b      	movge	r3, r9
        for (jx = 0; jx < iMax; jx++)
   212e2:	2b00      	cmp	r3, #0
   212e4:	f340 80ca 	ble.w	2147c <am_util_stdio_vsprintf+0x8dc>
   212e8:	1c58      	adds	r0, r3, #1
   212ea:	4410      	add	r0, r2
            i32FracPart *= 10;
   212ec:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
   212f0:	ea4f 51e8 	mov.w	r1, r8, asr #23
   212f4:	3130      	adds	r1, #48	; 0x30
   212f6:	f80c 1b01 	strb.w	r1, [ip], #1
            i32FracPart *= 10;
   212fa:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
   212fe:	4560      	cmp	r0, ip
            i32FracPart &= 0x00FFFFFF;
   21300:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
   21304:	d1f2      	bne.n	212ec <am_util_stdio_vsprintf+0x74c>
   21306:	441a      	add	r2, r3
    return (pcBuf - pcBufInitial);
   21308:	1b41      	subs	r1, r0, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   2130a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   2130e:	f348 53c7 	sbfx	r3, r8, #23, #8
   21312:	2b04      	cmp	r3, #4
   21314:	f77f ad4f 	ble.w	20db6 <am_util_stdio_vsprintf+0x216>
            while ( pcBuftmp >= pcBufInitial )
   21318:	4295      	cmp	r5, r2
   2131a:	f63f ad4c 	bhi.w	20db6 <am_util_stdio_vsprintf+0x216>
   2131e:	4613      	mov	r3, r2
                    *pcBuftmp = '0';
   21320:	f04f 0e30 	mov.w	lr, #48	; 0x30
   21324:	e004      	b.n	21330 <am_util_stdio_vsprintf+0x790>
   21326:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
   2132a:	429d      	cmp	r5, r3
   2132c:	f63f ad43 	bhi.w	20db6 <am_util_stdio_vsprintf+0x216>
                    *pcBuftmp = '0';
   21330:	469c      	mov	ip, r3
                if ( *pcBuftmp == '.' )
   21332:	f813 2901 	ldrb.w	r2, [r3], #-1
   21336:	2a2e      	cmp	r2, #46	; 0x2e
   21338:	d0f7      	beq.n	2132a <am_util_stdio_vsprintf+0x78a>
                else if ( *pcBuftmp == '9' )
   2133a:	2a39      	cmp	r2, #57	; 0x39
   2133c:	d0f3      	beq.n	21326 <am_util_stdio_vsprintf+0x786>
                    *pcBuftmp += 1;
   2133e:	3201      	adds	r2, #1
   21340:	f88c 2000 	strb.w	r2, [ip]
                    break;
   21344:	e537      	b.n	20db6 <am_util_stdio_vsprintf+0x216>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   21346:	1c4b      	adds	r3, r1, #1
   21348:	f000 8081 	beq.w	2144e <am_util_stdio_vsprintf+0x8ae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   2134c:	3102      	adds	r1, #2
   2134e:	f000 8082 	beq.w	21456 <am_util_stdio_vsprintf+0x8b6>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   21352:	4b4e      	ldr	r3, [pc, #312]	; (2148c <am_util_stdio_vsprintf+0x8ec>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   21354:	602b      	str	r3, [r5, #0]
   21356:	2303      	movs	r3, #3
   21358:	e533      	b.n	20dc2 <am_util_stdio_vsprintf+0x222>
    int iNDigits = ui64Val ? 0 : 1;
   2135a:	ea59 010a 	orrs.w	r1, r9, sl
   2135e:	bf0c      	ite	eq
   21360:	f04f 0b01 	moveq.w	fp, #1
   21364:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   21368:	f000 808a 	beq.w	21480 <am_util_stdio_vsprintf+0x8e0>
                    bNeg = false;
   2136c:	2300      	movs	r3, #0
   2136e:	9300      	str	r3, [sp, #0]
   21370:	4648      	mov	r0, r9
   21372:	4651      	mov	r1, sl
   21374:	9401      	str	r4, [sp, #4]
   21376:	465c      	mov	r4, fp
   21378:	46d3      	mov	fp, sl
   2137a:	46ca      	mov	sl, r9
   2137c:	46a9      	mov	r9, r5
   2137e:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   21380:	f7ff fb2a 	bl	209d8 <divu64_10>
    while ( ui64Val )
   21384:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   21388:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   2138c:	d1f8      	bne.n	21380 <am_util_stdio_vsprintf+0x7e0>
                    if ( bNeg )
   2138e:	9900      	ldr	r1, [sp, #0]
                    iWidth -= ndigits_in_i64(ui64Val);
   21390:	462a      	mov	r2, r5
   21392:	464d      	mov	r5, r9
   21394:	46d1      	mov	r9, sl
   21396:	46da      	mov	sl, fp
   21398:	46a3      	mov	fp, r4
   2139a:	eba8 030b 	sub.w	r3, r8, fp
   2139e:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
   213a0:	b119      	cbz	r1, 213aa <am_util_stdio_vsprintf+0x80a>
                        if ( ui8PadChar == '0' )
   213a2:	2a30      	cmp	r2, #48	; 0x30
                        --iWidth;
   213a4:	f103 33ff 	add.w	r3, r3, #4294967295
                        if ( ui8PadChar == '0' )
   213a8:	d062      	beq.n	21470 <am_util_stdio_vsprintf+0x8d0>
    if ( i32NumChars <= 0 )
   213aa:	2b00      	cmp	r3, #0
   213ac:	dd4d      	ble.n	2144a <am_util_stdio_vsprintf+0x8aa>
    while ( i32NumChars-- )
   213ae:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   213b0:	4694      	mov	ip, r2
   213b2:	46a6      	mov	lr, r4
   213b4:	2000      	movs	r0, #0
   213b6:	462a      	mov	r2, r5
   213b8:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   213ba:	4611      	mov	r1, r2
        if ( pcBuf )
   213bc:	b1c2      	cbz	r2, 213f0 <am_util_stdio_vsprintf+0x850>
            *pcBuf++ = cPadChar;
   213be:	f801 cb01 	strb.w	ip, [r1], #1
   213c2:	4623      	mov	r3, r4
   213c4:	460a      	mov	r2, r1
        i32Cnt++;
   213c6:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   213c8:	1e5c      	subs	r4, r3, #1
   213ca:	2b00      	cmp	r3, #0
   213cc:	d1f5      	bne.n	213ba <am_util_stdio_vsprintf+0x81a>
   213ce:	4674      	mov	r4, lr
   213d0:	4662      	mov	r2, ip
                    ui32CharCnt += iWidth;
   213d2:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   213d4:	b365      	cbz	r5, 21430 <am_util_stdio_vsprintf+0x890>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   213d6:	9b00      	ldr	r3, [sp, #0]
                    pcBuf += pcBuf ? iWidth : 0;
   213d8:	4405      	add	r5, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   213da:	b113      	cbz	r3, 213e2 <am_util_stdio_vsprintf+0x842>
   213dc:	2a20      	cmp	r2, #32
   213de:	f43f ae17 	beq.w	21010 <am_util_stdio_vsprintf+0x470>
                iVal = uint64_to_str(ui64Val, pcBuf);
   213e2:	462a      	mov	r2, r5
   213e4:	4648      	mov	r0, r9
   213e6:	4651      	mov	r1, sl
   213e8:	f7ff fb52 	bl	20a90 <uint64_to_str>
                    pcBuf += iVal;
   213ec:	4405      	add	r5, r0
   213ee:	e519      	b.n	20e24 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   213f0:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   213f2:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   213f4:	2c00      	cmp	r4, #0
   213f6:	d1e6      	bne.n	213c6 <am_util_stdio_vsprintf+0x826>
   213f8:	e7e9      	b.n	213ce <am_util_stdio_vsprintf+0x82e>
   213fa:	f04f 0800 	mov.w	r8, #0
   213fe:	e65f      	b.n	210c0 <am_util_stdio_vsprintf+0x520>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   21400:	4b23      	ldr	r3, [pc, #140]	; (21490 <am_util_stdio_vsprintf+0x8f0>)
   21402:	602b      	str	r3, [r5, #0]
   21404:	2303      	movs	r3, #3
   21406:	e4dc      	b.n	20dc2 <am_util_stdio_vsprintf+0x222>
                    bNeg = true;
   21408:	2301      	movs	r3, #1
   2140a:	9300      	str	r3, [sp, #0]
    int iNDigits = ui64Val ? 0 : 1;
   2140c:	f04f 0b00 	mov.w	fp, #0
   21410:	e7ae      	b.n	21370 <am_util_stdio_vsprintf+0x7d0>
    uint32_t ui32Val = 0, uCnt = 0;
   21412:	f04f 0a00 	mov.w	sl, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   21416:	4653      	mov	r3, sl
   21418:	e52b      	b.n	20e72 <am_util_stdio_vsprintf+0x2d2>
                if ( iWidth > 0 )
   2141a:	2800      	cmp	r0, #0
   2141c:	f77f af3f 	ble.w	2129e <am_util_stdio_vsprintf+0x6fe>
    uint32_t ui32RetVal = 0;
   21420:	468e      	mov	lr, r1
   21422:	e6fc      	b.n	2121e <am_util_stdio_vsprintf+0x67e>
                iVal = uint64_to_str(ui64Val, pcBuf);
   21424:	462a      	mov	r2, r5
   21426:	4650      	mov	r0, sl
   21428:	4649      	mov	r1, r9
   2142a:	f7ff fb31 	bl	20a90 <uint64_to_str>
                if ( pcBuf )
   2142e:	e4dd      	b.n	20dec <am_util_stdio_vsprintf+0x24c>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   21430:	9b00      	ldr	r3, [sp, #0]
   21432:	b1b3      	cbz	r3, 21462 <am_util_stdio_vsprintf+0x8c2>
   21434:	2a20      	cmp	r2, #32
   21436:	f43f adee 	beq.w	21016 <am_util_stdio_vsprintf+0x476>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2143a:	462a      	mov	r2, r5
   2143c:	4648      	mov	r0, r9
   2143e:	4651      	mov	r1, sl
   21440:	f7ff fb26 	bl	20a90 <uint64_to_str>
                if ( pcBuf )
   21444:	e4d2      	b.n	20dec <am_util_stdio_vsprintf+0x24c>
   21446:	2000      	movs	r0, #0
   21448:	e6c6      	b.n	211d8 <am_util_stdio_vsprintf+0x638>
   2144a:	2000      	movs	r0, #0
   2144c:	e7c2      	b.n	213d4 <am_util_stdio_vsprintf+0x834>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   2144e:	4b10      	ldr	r3, [pc, #64]	; (21490 <am_util_stdio_vsprintf+0x8f0>)
   21450:	e780      	b.n	21354 <am_util_stdio_vsprintf+0x7b4>
   21452:	2000      	movs	r0, #0
   21454:	e55c      	b.n	20f10 <am_util_stdio_vsprintf+0x370>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   21456:	4b0f      	ldr	r3, [pc, #60]	; (21494 <am_util_stdio_vsprintf+0x8f4>)
   21458:	e77c      	b.n	21354 <am_util_stdio_vsprintf+0x7b4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2145a:	2300      	movs	r3, #0
        uCnt++;
   2145c:	f04f 0a01 	mov.w	sl, #1
   21460:	e506      	b.n	20e70 <am_util_stdio_vsprintf+0x2d0>
                iVal = uint64_to_str(ui64Val, pcBuf);
   21462:	4648      	mov	r0, r9
   21464:	4651      	mov	r1, sl
   21466:	462a      	mov	r2, r5
   21468:	f7ff fb12 	bl	20a90 <uint64_to_str>
                ui32CharCnt += iVal;
   2146c:	4406      	add	r6, r0
                break;
   2146e:	e4bf      	b.n	20df0 <am_util_stdio_vsprintf+0x250>
                            if ( pcBuf )
   21470:	b115      	cbz	r5, 21478 <am_util_stdio_vsprintf+0x8d8>
                                *pcBuf++ = '-';
   21472:	212d      	movs	r1, #45	; 0x2d
   21474:	f805 1b01 	strb.w	r1, [r5], #1
                            ++ui32CharCnt;
   21478:	3601      	adds	r6, #1
   2147a:	e796      	b.n	213aa <am_util_stdio_vsprintf+0x80a>
    *pcBuf++ = '.';
   2147c:	4660      	mov	r0, ip
   2147e:	e744      	b.n	2130a <am_util_stdio_vsprintf+0x76a>
                    iWidth -= ndigits_in_i64(ui64Val);
   21480:	eba8 030b 	sub.w	r3, r8, fp
                    bNeg = false;
   21484:	468a      	mov	sl, r1
   21486:	9100      	str	r1, [sp, #0]
                    ui64Val = i64Val;
   21488:	4689      	mov	r9, r1
   2148a:	e78e      	b.n	213aa <am_util_stdio_vsprintf+0x80a>
   2148c:	003f2e3f 	.word	0x003f2e3f
   21490:	00302e30 	.word	0x00302e30
   21494:	00232e23 	.word	0x00232e23

00021498 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   21498:	b40f      	push	{r0, r1, r2, r3}
   2149a:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   2149c:	4d09      	ldr	r5, [pc, #36]	; (214c4 <am_util_stdio_printf+0x2c>)
   2149e:	682c      	ldr	r4, [r5, #0]
{
   214a0:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
   214a2:	b14c      	cbz	r4, 214b8 <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   214a4:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   214a6:	9906      	ldr	r1, [sp, #24]
   214a8:	4807      	ldr	r0, [pc, #28]	; (214c8 <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
   214aa:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   214ac:	f7ff fb78 	bl	20ba0 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   214b0:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   214b2:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
   214b4:	4804      	ldr	r0, [pc, #16]	; (214c8 <am_util_stdio_printf+0x30>)
   214b6:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
   214b8:	4620      	mov	r0, r4
   214ba:	b003      	add	sp, #12
   214bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   214c0:	b004      	add	sp, #16
   214c2:	4770      	bx	lr
   214c4:	10006020 	.word	0x10006020
   214c8:	10006024 	.word	0x10006024

000214cc <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   214cc:	b570      	push	{r4, r5, r6, lr}
   214ce:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
   214d0:	f001 f8bc 	bl	2264c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   214d4:	4927      	ldr	r1, [pc, #156]	; (21574 <pvPortMalloc+0xa8>)
   214d6:	680a      	ldr	r2, [r1, #0]
   214d8:	b972      	cbnz	r2, 214f8 <pvPortMalloc+0x2c>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   214da:	4b27      	ldr	r3, [pc, #156]	; (21578 <pvPortMalloc+0xac>)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   214dc:	4827      	ldr	r0, [pc, #156]	; (2157c <pvPortMalloc+0xb0>)
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   214de:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
   214e2:	e9c0 3200 	strd	r3, r2, [r0]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   214e6:	4826      	ldr	r0, [pc, #152]	; (21580 <pvPortMalloc+0xb4>)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   214e8:	6018      	str	r0, [r3, #0]
	xEnd.pxNextFreeBlock = NULL;
   214ea:	6002      	str	r2, [r0, #0]
			xHeapHasBeenInitialised = pdTRUE;
   214ec:	2201      	movs	r2, #1
   214ee:	600a      	str	r2, [r1, #0]
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   214f0:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   214f4:	6042      	str	r2, [r0, #4]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   214f6:	605a      	str	r2, [r3, #4]
		if( xWantedSize > 0 )
   214f8:	b935      	cbnz	r5, 21508 <pvPortMalloc+0x3c>
			vApplicationMallocFailedHook();
   214fa:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
   214fc:	f001 f9ee 	bl	228dc <xTaskResumeAll>
			vApplicationMallocFailedHook();
   21500:	f7f4 fc0e 	bl	15d20 <vApplicationMallocFailedHook>
}
   21504:	4628      	mov	r0, r5
   21506:	bd70      	pop	{r4, r5, r6, pc}
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   21508:	076b      	lsls	r3, r5, #29
			xWantedSize += heapSTRUCT_SIZE;
   2150a:	f105 0408 	add.w	r4, r5, #8
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   2150e:	bf1c      	itt	ne
   21510:	f024 0407 	bicne.w	r4, r4, #7
   21514:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   21516:	1e62      	subs	r2, r4, #1
   21518:	f643 73f6 	movw	r3, #16374	; 0x3ff6
   2151c:	429a      	cmp	r2, r3
   2151e:	d8ec      	bhi.n	214fa <pvPortMalloc+0x2e>
			pxBlock = xStart.pxNextFreeBlock;
   21520:	4816      	ldr	r0, [pc, #88]	; (2157c <pvPortMalloc+0xb0>)
   21522:	6803      	ldr	r3, [r0, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   21524:	e003      	b.n	2152e <pvPortMalloc+0x62>
   21526:	681a      	ldr	r2, [r3, #0]
   21528:	b122      	cbz	r2, 21534 <pvPortMalloc+0x68>
   2152a:	4618      	mov	r0, r3
   2152c:	4613      	mov	r3, r2
   2152e:	6859      	ldr	r1, [r3, #4]
   21530:	42a1      	cmp	r1, r4
   21532:	d3f8      	bcc.n	21526 <pvPortMalloc+0x5a>
			if( pxBlock != &xEnd )
   21534:	4a12      	ldr	r2, [pc, #72]	; (21580 <pvPortMalloc+0xb4>)
   21536:	4293      	cmp	r3, r2
   21538:	d0df      	beq.n	214fa <pvPortMalloc+0x2e>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   2153a:	461d      	mov	r5, r3
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   2153c:	1b0a      	subs	r2, r1, r4
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   2153e:	f855 6b08 	ldr.w	r6, [r5], #8
   21542:	6006      	str	r6, [r0, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   21544:	2a10      	cmp	r2, #16
   21546:	d90c      	bls.n	21562 <pvPortMalloc+0x96>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   21548:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   2154a:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
   2154c:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   2154e:	6871      	ldr	r1, [r6, #4]
   21550:	4b0a      	ldr	r3, [pc, #40]	; (2157c <pvPortMalloc+0xb0>)
   21552:	4618      	mov	r0, r3
   21554:	681b      	ldr	r3, [r3, #0]
   21556:	685a      	ldr	r2, [r3, #4]
   21558:	428a      	cmp	r2, r1
   2155a:	d3fa      	bcc.n	21552 <pvPortMalloc+0x86>
   2155c:	6033      	str	r3, [r6, #0]
   2155e:	4621      	mov	r1, r4
   21560:	6006      	str	r6, [r0, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   21562:	4a08      	ldr	r2, [pc, #32]	; (21584 <pvPortMalloc+0xb8>)
   21564:	6813      	ldr	r3, [r2, #0]
   21566:	1a5b      	subs	r3, r3, r1
   21568:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
   2156a:	f001 f9b7 	bl	228dc <xTaskResumeAll>
}
   2156e:	4628      	mov	r0, r5
   21570:	bd70      	pop	{r4, r5, r6, pc}
   21572:	bf00      	nop
   21574:	1000a12c 	.word	0x1000a12c
   21578:	1000612c 	.word	0x1000612c
   2157c:	1000a130 	.word	0x1000a130
   21580:	1000a124 	.word	0x1000a124
   21584:	10002c68 	.word	0x10002c68

00021588 <vPortFree>:
	if( pv != NULL )
   21588:	b1c0      	cbz	r0, 215bc <vPortFree+0x34>
{
   2158a:	b538      	push	{r3, r4, r5, lr}
   2158c:	4604      	mov	r4, r0
		vTaskSuspendAll();
   2158e:	f001 f85d 	bl	2264c <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   21592:	f854 1c04 	ldr.w	r1, [r4, #-4]
   21596:	4b0a      	ldr	r3, [pc, #40]	; (215c0 <vPortFree+0x38>)
		puc -= heapSTRUCT_SIZE;
   21598:	f1a4 0508 	sub.w	r5, r4, #8
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   2159c:	4618      	mov	r0, r3
   2159e:	681b      	ldr	r3, [r3, #0]
   215a0:	685a      	ldr	r2, [r3, #4]
   215a2:	428a      	cmp	r2, r1
   215a4:	d3fa      	bcc.n	2159c <vPortFree+0x14>
			xFreeBytesRemaining += pxLink->xBlockSize;
   215a6:	4a07      	ldr	r2, [pc, #28]	; (215c4 <vPortFree+0x3c>)
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   215a8:	f844 3c08 	str.w	r3, [r4, #-8]
			xFreeBytesRemaining += pxLink->xBlockSize;
   215ac:	6813      	ldr	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   215ae:	6005      	str	r5, [r0, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   215b0:	440b      	add	r3, r1
   215b2:	6013      	str	r3, [r2, #0]
}
   215b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
   215b8:	f001 b990 	b.w	228dc <xTaskResumeAll>
   215bc:	4770      	bx	lr
   215be:	bf00      	nop
   215c0:	1000a130 	.word	0x1000a130
   215c4:	10002c68 	.word	0x10002c68

000215c8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   215c8:	b510      	push	{r4, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   215ca:	2018      	movs	r0, #24
   215cc:	f7ff ff7e 	bl	214cc <pvPortMalloc>

		if( pxEventBits != NULL )
   215d0:	4604      	mov	r4, r0
   215d2:	b120      	cbz	r0, 215de <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
   215d4:	2300      	movs	r3, #0
   215d6:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   215da:	f000 f8db 	bl	21794 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
   215de:	4620      	mov	r0, r4
   215e0:	bd10      	pop	{r4, pc}
   215e2:	bf00      	nop

000215e4 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   215e4:	b130      	cbz	r0, 215f4 <xEventGroupWaitBits+0x10>
{
   215e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   215ea:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
   215ee:	460c      	mov	r4, r1
   215f0:	d001      	beq.n	215f6 <xEventGroupWaitBits+0x12>
   215f2:	e7fe      	b.n	215f2 <xEventGroupWaitBits+0xe>
	configASSERT( xEventGroup );
   215f4:	e7fe      	b.n	215f4 <xEventGroupWaitBits+0x10>
	configASSERT( uxBitsToWaitFor != 0 );
   215f6:	b901      	cbnz	r1, 215fa <xEventGroupWaitBits+0x16>
   215f8:	e7fe      	b.n	215f8 <xEventGroupWaitBits+0x14>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   215fa:	4617      	mov	r7, r2
   215fc:	461e      	mov	r6, r3
   215fe:	4605      	mov	r5, r0
   21600:	f001 fb9a 	bl	22d38 <xTaskGetSchedulerState>
   21604:	b908      	cbnz	r0, 2160a <xEventGroupWaitBits+0x26>
   21606:	9b08      	ldr	r3, [sp, #32]
   21608:	bb8b      	cbnz	r3, 2166e <xEventGroupWaitBits+0x8a>
	}
	#endif

	vTaskSuspendAll();
   2160a:	f001 f81f 	bl	2264c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   2160e:	f8d5 9000 	ldr.w	r9, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
   21612:	b36e      	cbz	r6, 21670 <xEventGroupWaitBits+0x8c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   21614:	ea34 0309 	bics.w	r3, r4, r9
   21618:	d02d      	beq.n	21676 <xEventGroupWaitBits+0x92>
		else if( xTicksToWait == ( TickType_t ) 0 )
   2161a:	9b08      	ldr	r3, [sp, #32]
   2161c:	b393      	cbz	r3, 21684 <xEventGroupWaitBits+0xa0>
			if( xClearOnExit != pdFALSE )
   2161e:	2f00      	cmp	r7, #0
   21620:	bf16      	itet	ne
   21622:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
   21626:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
   2162a:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
			if( xWaitForAllBits != pdFALSE )
   2162e:	2e00      	cmp	r6, #0
   21630:	bf08      	it	eq
   21632:	4641      	moveq	r1, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   21634:	4321      	orrs	r1, r4
   21636:	461a      	mov	r2, r3
   21638:	1d28      	adds	r0, r5, #4
   2163a:	f001 fa07 	bl	22a4c <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
   2163e:	f001 f94d 	bl	228dc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
   21642:	b948      	cbnz	r0, 21658 <xEventGroupWaitBits+0x74>
			portYIELD_WITHIN_API();
   21644:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   21648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2164c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   21650:	f3bf 8f4f 	dsb	sy
   21654:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
   21658:	f001 fb7e 	bl	22d58 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   2165c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
   21660:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   21662:	d012      	beq.n	2168a <xEventGroupWaitBits+0xa6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   21664:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
   21668:	4648      	mov	r0, r9
   2166a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   2166e:	e7fe      	b.n	2166e <xEventGroupWaitBits+0x8a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   21670:	ea14 0f09 	tst.w	r4, r9
   21674:	d0d1      	beq.n	2161a <xEventGroupWaitBits+0x36>
			if( xClearOnExit != pdFALSE )
   21676:	b12f      	cbz	r7, 21684 <xEventGroupWaitBits+0xa0>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   21678:	ea29 0404 	bic.w	r4, r9, r4
   2167c:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
   2167e:	f001 f92d 	bl	228dc <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
   21682:	e7f1      	b.n	21668 <xEventGroupWaitBits+0x84>
	xAlreadyYielded = xTaskResumeAll();
   21684:	f001 f92a 	bl	228dc <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
   21688:	e7ee      	b.n	21668 <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
   2168a:	f7fc f9a3 	bl	1d9d4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
   2168e:	f8d5 9000 	ldr.w	r9, [r5]
	if( xWaitForAllBits == pdFALSE )
   21692:	b94e      	cbnz	r6, 216a8 <xEventGroupWaitBits+0xc4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   21694:	ea14 0f09 	tst.w	r4, r9
   21698:	d003      	beq.n	216a2 <xEventGroupWaitBits+0xbe>
					if( xClearOnExit != pdFALSE )
   2169a:	b117      	cbz	r7, 216a2 <xEventGroupWaitBits+0xbe>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   2169c:	ea29 0404 	bic.w	r4, r9, r4
   216a0:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
   216a2:	f7fc f9b1 	bl	1da08 <vPortExitCritical>
   216a6:	e7dd      	b.n	21664 <xEventGroupWaitBits+0x80>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   216a8:	ea34 0309 	bics.w	r3, r4, r9
   216ac:	d1f9      	bne.n	216a2 <xEventGroupWaitBits+0xbe>
   216ae:	e7f4      	b.n	2169a <xEventGroupWaitBits+0xb6>

000216b0 <xEventGroupSetBits>:
	configASSERT( xEventGroup );
   216b0:	b130      	cbz	r0, 216c0 <xEventGroupSetBits+0x10>
{
   216b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   216b6:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
   216ba:	4688      	mov	r8, r1
   216bc:	d001      	beq.n	216c2 <xEventGroupSetBits+0x12>
   216be:	e7fe      	b.n	216be <xEventGroupSetBits+0xe>
	configASSERT( xEventGroup );
   216c0:	e7fe      	b.n	216c0 <xEventGroupSetBits+0x10>
   216c2:	4605      	mov	r5, r0
	vTaskSuspendAll();
   216c4:	f000 ffc2 	bl	2264c <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
   216c8:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
   216ca:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   216cc:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
   216d0:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
   216d4:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
   216d6:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   216d8:	d10c      	bne.n	216f4 <xEventGroupSetBits+0x44>
   216da:	e01c      	b.n	21716 <xEventGroupSetBits+0x66>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   216dc:	ea13 0f0c 	tst.w	r3, ip
   216e0:	d006      	beq.n	216f0 <xEventGroupSetBits+0x40>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   216e2:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
   216e4:	bf48      	it	mi
   216e6:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   216ea:	f001 fa8b 	bl	22c04 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   216ee:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   216f0:	42a7      	cmp	r7, r4
   216f2:	d00e      	beq.n	21712 <xEventGroupSetBits+0x62>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   216f4:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   216f6:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   216fa:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
   216fc:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   216fe:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   21702:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   21706:	d0e9      	beq.n	216dc <xEventGroupSetBits+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   21708:	ea3c 0e03 	bics.w	lr, ip, r3
   2170c:	d0e9      	beq.n	216e2 <xEventGroupSetBits+0x32>
		while( pxListItem != pxListEnd )
   2170e:	42a7      	cmp	r7, r4
   21710:	d1f0      	bne.n	216f4 <xEventGroupSetBits+0x44>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   21712:	ea23 0306 	bic.w	r3, r3, r6
   21716:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
   21718:	f001 f8e0 	bl	228dc <xTaskResumeAll>
}
   2171c:	6828      	ldr	r0, [r5, #0]
   2171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21722:	bf00      	nop

00021724 <vEventGroupSetBitsCallback>:
	configASSERT( xEventGroup );
   21724:	b130      	cbz	r0, 21734 <vEventGroupSetBitsCallback+0x10>
{
   21726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   2172a:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
   2172e:	4688      	mov	r8, r1
   21730:	d001      	beq.n	21736 <vEventGroupSetBitsCallback+0x12>
   21732:	e7fe      	b.n	21732 <vEventGroupSetBitsCallback+0xe>
	configASSERT( xEventGroup );
   21734:	e7fe      	b.n	21734 <vEventGroupSetBitsCallback+0x10>
   21736:	4605      	mov	r5, r0
	vTaskSuspendAll();
   21738:	f000 ff88 	bl	2264c <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
   2173c:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
   2173e:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   21740:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
   21744:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
   21748:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
   2174a:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   2174c:	d10c      	bne.n	21768 <vEventGroupSetBitsCallback+0x44>
   2174e:	e01c      	b.n	2178a <vEventGroupSetBitsCallback+0x66>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   21750:	ea1c 0f03 	tst.w	ip, r3
   21754:	d006      	beq.n	21764 <vEventGroupSetBitsCallback+0x40>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   21756:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
   21758:	bf48      	it	mi
   2175a:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   2175e:	f001 fa51 	bl	22c04 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   21762:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   21764:	42a7      	cmp	r7, r4
   21766:	d00e      	beq.n	21786 <vEventGroupSetBitsCallback+0x62>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   21768:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   2176a:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   2176e:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
   21770:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   21772:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   21776:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   2177a:	d0e9      	beq.n	21750 <vEventGroupSetBitsCallback+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   2177c:	ea3c 0e03 	bics.w	lr, ip, r3
   21780:	d0e9      	beq.n	21756 <vEventGroupSetBitsCallback+0x32>
		while( pxListItem != pxListEnd )
   21782:	42a7      	cmp	r7, r4
   21784:	d1f0      	bne.n	21768 <vEventGroupSetBitsCallback+0x44>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   21786:	ea23 0306 	bic.w	r3, r3, r6
   2178a:	602b      	str	r3, [r5, #0]
}
   2178c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	( void ) xTaskResumeAll();
   21790:	f001 b8a4 	b.w	228dc <xTaskResumeAll>

00021794 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   21794:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   21798:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   2179c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   2179e:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   217a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   217a6:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   217a8:	4770      	bx	lr
   217aa:	bf00      	nop

000217ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   217ac:	2300      	movs	r3, #0
   217ae:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   217b0:	4770      	bx	lr
   217b2:	bf00      	nop

000217b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   217b4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   217b6:	689a      	ldr	r2, [r3, #8]
   217b8:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
   217ba:	6802      	ldr	r2, [r0, #0]
{
   217bc:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   217be:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
   217c0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
   217c2:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   217c4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
   217c6:	6099      	str	r1, [r3, #8]
}
   217c8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
   217cc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
   217ce:	6002      	str	r2, [r0, #0]
}
   217d0:	4770      	bx	lr
   217d2:	bf00      	nop

000217d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   217d4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   217d6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   217d8:	1c6b      	adds	r3, r5, #1
   217da:	d010      	beq.n	217fe <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   217dc:	f100 0308 	add.w	r3, r0, #8
   217e0:	461c      	mov	r4, r3
   217e2:	685b      	ldr	r3, [r3, #4]
   217e4:	681a      	ldr	r2, [r3, #0]
   217e6:	42aa      	cmp	r2, r5
   217e8:	d9fa      	bls.n	217e0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
   217ea:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
   217ec:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
   217ee:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   217f0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   217f2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   217f4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
   217f6:	6108      	str	r0, [r1, #16]
}
   217f8:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
   217fa:	6002      	str	r2, [r0, #0]
}
   217fc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   217fe:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
   21800:	6863      	ldr	r3, [r4, #4]
   21802:	e7f2      	b.n	217ea <vListInsert+0x16>

00021804 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   21804:	6903      	ldr	r3, [r0, #16]
{
   21806:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   21808:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   2180c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   2180e:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
   21810:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   21812:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   21814:	bf08      	it	eq
   21816:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
   21818:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
   2181a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
   2181e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
   21820:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
   21822:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
   21824:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
   21826:	6818      	ldr	r0, [r3, #0]
}
   21828:	4770      	bx	lr
   2182a:	bf00      	nop

0002182c <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   2182c:	b358      	cbz	r0, 21886 <xQueueGenericCreate+0x5a>
	{
   2182e:	b570      	push	{r4, r5, r6, lr}
   21830:	460e      	mov	r6, r1
   21832:	4605      	mov	r5, r0

		if( uxItemSize == ( UBaseType_t ) 0 )
   21834:	bb41      	cbnz	r1, 21888 <xQueueGenericCreate+0x5c>
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   21836:	2048      	movs	r0, #72	; 0x48
   21838:	f7ff fe48 	bl	214cc <pvPortMalloc>

		if( pxNewQueue != NULL )
   2183c:	4604      	mov	r4, r0
   2183e:	b370      	cbz	r0, 2189e <xQueueGenericCreate+0x72>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   21840:	6024      	str	r4, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
   21842:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
   21846:	f7fc f8c5 	bl	1d9d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   2184a:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
   2184e:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
   21850:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21852:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21856:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21858:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   2185a:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   2185c:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   2185e:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
   21860:	22ff      	movs	r2, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   21862:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21864:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   21866:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   2186a:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
   2186e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   21872:	f7ff ff8f 	bl	21794 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   21876:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2187a:	f7ff ff8b 	bl	21794 <vListInitialise>
	taskEXIT_CRITICAL();
   2187e:	f7fc f8c3 	bl	1da08 <vPortExitCritical>
	}
   21882:	4620      	mov	r0, r4
   21884:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   21886:	e7fe      	b.n	21886 <xQueueGenericCreate+0x5a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21888:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   2188c:	3048      	adds	r0, #72	; 0x48
   2188e:	f7ff fe1d 	bl	214cc <pvPortMalloc>
		if( pxNewQueue != NULL )
   21892:	4604      	mov	r4, r0
   21894:	b118      	cbz	r0, 2189e <xQueueGenericCreate+0x72>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   21896:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   2189a:	6003      	str	r3, [r0, #0]
   2189c:	e7d1      	b.n	21842 <xQueueGenericCreate+0x16>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   2189e:	2400      	movs	r4, #0
	}
   218a0:	4620      	mov	r0, r4
   218a2:	bd70      	pop	{r4, r5, r6, pc}

000218a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   218a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   218a8:	b085      	sub	sp, #20
   218aa:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
   218ac:	b158      	cbz	r0, 218c6 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   218ae:	4688      	mov	r8, r1
   218b0:	461f      	mov	r7, r3
   218b2:	4604      	mov	r4, r0
   218b4:	2900      	cmp	r1, #0
   218b6:	f000 808d 	beq.w	219d4 <xQueueGenericSend+0x130>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   218ba:	2f02      	cmp	r7, #2
   218bc:	d104      	bne.n	218c8 <xQueueGenericSend+0x24>
   218be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   218c0:	2b01      	cmp	r3, #1
   218c2:	d001      	beq.n	218c8 <xQueueGenericSend+0x24>
   218c4:	e7fe      	b.n	218c4 <xQueueGenericSend+0x20>
	configASSERT( pxQueue );
   218c6:	e7fe      	b.n	218c6 <xQueueGenericSend+0x22>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   218c8:	f001 fa36 	bl	22d38 <xTaskGetSchedulerState>
   218cc:	4605      	mov	r5, r0
   218ce:	2800      	cmp	r0, #0
   218d0:	f040 8086 	bne.w	219e0 <xQueueGenericSend+0x13c>
   218d4:	9b01      	ldr	r3, [sp, #4]
   218d6:	2b00      	cmp	r3, #0
   218d8:	f040 8081 	bne.w	219de <xQueueGenericSend+0x13a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   218dc:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
   218e0:	f7fc f878 	bl	1d9d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   218e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   218e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   218e8:	429a      	cmp	r2, r3
   218ea:	f0c0 80ec 	bcc.w	21ac6 <xQueueGenericSend+0x222>
   218ee:	2f02      	cmp	r7, #2
   218f0:	f000 80d1 	beq.w	21a96 <xQueueGenericSend+0x1f2>
				if( xTicksToWait == ( TickType_t ) 0 )
   218f4:	9801      	ldr	r0, [sp, #4]
   218f6:	2800      	cmp	r0, #0
   218f8:	f000 80f4 	beq.w	21ae4 <xQueueGenericSend+0x240>
				else if( xEntryTimeSet == pdFALSE )
   218fc:	2d00      	cmp	r5, #0
   218fe:	f000 80c6 	beq.w	21a8e <xQueueGenericSend+0x1ea>
		taskEXIT_CRITICAL();
   21902:	f7fc f881 	bl	1da08 <vPortExitCritical>
		vTaskSuspendAll();
   21906:	f000 fea1 	bl	2264c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   2190a:	f7fc f863 	bl	1d9d4 <vPortEnterCritical>
   2190e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   21912:	2bff      	cmp	r3, #255	; 0xff
   21914:	bf04      	itt	eq
   21916:	2300      	moveq	r3, #0
   21918:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   2191c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   21920:	2bff      	cmp	r3, #255	; 0xff
   21922:	bf04      	itt	eq
   21924:	2300      	moveq	r3, #0
   21926:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   2192a:	f7fc f86d 	bl	1da08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   2192e:	a901      	add	r1, sp, #4
   21930:	a802      	add	r0, sp, #8
   21932:	f001 f9a7 	bl	22c84 <xTaskCheckForTimeOut>
   21936:	2800      	cmp	r0, #0
   21938:	f040 80d9 	bne.w	21aee <xQueueGenericSend+0x24a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   2193c:	f7fc f84a 	bl	1d9d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   21940:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21942:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   21944:	429a      	cmp	r2, r3
   21946:	d04d      	beq.n	219e4 <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   21948:	f7fc f85e 	bl	1da08 <vPortExitCritical>
	taskENTER_CRITICAL();
   2194c:	f7fc f842 	bl	1d9d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   21950:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   21954:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21956:	2d00      	cmp	r5, #0
   21958:	dc04      	bgt.n	21964 <xQueueGenericSend+0xc0>
   2195a:	e011      	b.n	21980 <xQueueGenericSend+0xdc>
			--cTxLock;
   2195c:	1e6a      	subs	r2, r5, #1
   2195e:	b2d3      	uxtb	r3, r2
   21960:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21962:	b16b      	cbz	r3, 21980 <xQueueGenericSend+0xdc>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21964:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21966:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21968:	b153      	cbz	r3, 21980 <xQueueGenericSend+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   2196a:	f001 f8f7 	bl	22b5c <xTaskRemoveFromEventList>
   2196e:	2800      	cmp	r0, #0
   21970:	d0f4      	beq.n	2195c <xQueueGenericSend+0xb8>
						vTaskMissedYield();
   21972:	f001 f9bf 	bl	22cf4 <vTaskMissedYield>
			--cTxLock;
   21976:	1e6a      	subs	r2, r5, #1
   21978:	b2d3      	uxtb	r3, r2
   2197a:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   2197c:	2b00      	cmp	r3, #0
   2197e:	d1f1      	bne.n	21964 <xQueueGenericSend+0xc0>
		pxQueue->cTxLock = queueUNLOCKED;
   21980:	23ff      	movs	r3, #255	; 0xff
   21982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   21986:	f7fc f83f 	bl	1da08 <vPortExitCritical>
	taskENTER_CRITICAL();
   2198a:	f7fc f823 	bl	1d9d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   2198e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   21992:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21994:	2d00      	cmp	r5, #0
   21996:	dd14      	ble.n	219c2 <xQueueGenericSend+0x11e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21998:	f104 0910 	add.w	r9, r4, #16
   2199c:	e003      	b.n	219a6 <xQueueGenericSend+0x102>
				--cRxLock;
   2199e:	1e6a      	subs	r2, r5, #1
   219a0:	b2d3      	uxtb	r3, r2
   219a2:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   219a4:	b16b      	cbz	r3, 219c2 <xQueueGenericSend+0x11e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   219a6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   219a8:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   219aa:	b153      	cbz	r3, 219c2 <xQueueGenericSend+0x11e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   219ac:	f001 f8d6 	bl	22b5c <xTaskRemoveFromEventList>
   219b0:	2800      	cmp	r0, #0
   219b2:	d0f4      	beq.n	2199e <xQueueGenericSend+0xfa>
					vTaskMissedYield();
   219b4:	f001 f99e 	bl	22cf4 <vTaskMissedYield>
				--cRxLock;
   219b8:	1e6a      	subs	r2, r5, #1
   219ba:	b2d3      	uxtb	r3, r2
   219bc:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   219be:	2b00      	cmp	r3, #0
   219c0:	d1f1      	bne.n	219a6 <xQueueGenericSend+0x102>
		pxQueue->cRxLock = queueUNLOCKED;
   219c2:	23ff      	movs	r3, #255	; 0xff
   219c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   219c8:	f7fc f81e 	bl	1da08 <vPortExitCritical>
				( void ) xTaskResumeAll();
   219cc:	f000 ff86 	bl	228dc <xTaskResumeAll>
   219d0:	2501      	movs	r5, #1
   219d2:	e785      	b.n	218e0 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   219d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   219d6:	2b00      	cmp	r3, #0
   219d8:	f43f af6f 	beq.w	218ba <xQueueGenericSend+0x16>
   219dc:	e7fe      	b.n	219dc <xQueueGenericSend+0x138>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   219de:	e7fe      	b.n	219de <xQueueGenericSend+0x13a>
   219e0:	2500      	movs	r5, #0
   219e2:	e77b      	b.n	218dc <xQueueGenericSend+0x38>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   219e4:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
   219e8:	f7fc f80e 	bl	1da08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   219ec:	9901      	ldr	r1, [sp, #4]
   219ee:	4648      	mov	r0, r9
   219f0:	f000 fff0 	bl	229d4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
   219f4:	f7fb ffee 	bl	1d9d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   219f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   219fc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   219fe:	2d00      	cmp	r5, #0
   21a00:	dc04      	bgt.n	21a0c <xQueueGenericSend+0x168>
   21a02:	e011      	b.n	21a28 <xQueueGenericSend+0x184>
			--cTxLock;
   21a04:	1e6b      	subs	r3, r5, #1
   21a06:	b2da      	uxtb	r2, r3
   21a08:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21a0a:	b16a      	cbz	r2, 21a28 <xQueueGenericSend+0x184>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21a0e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21a10:	b153      	cbz	r3, 21a28 <xQueueGenericSend+0x184>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21a12:	f001 f8a3 	bl	22b5c <xTaskRemoveFromEventList>
   21a16:	2800      	cmp	r0, #0
   21a18:	d0f4      	beq.n	21a04 <xQueueGenericSend+0x160>
						vTaskMissedYield();
   21a1a:	f001 f96b 	bl	22cf4 <vTaskMissedYield>
			--cTxLock;
   21a1e:	1e6b      	subs	r3, r5, #1
   21a20:	b2da      	uxtb	r2, r3
   21a22:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21a24:	2a00      	cmp	r2, #0
   21a26:	d1f1      	bne.n	21a0c <xQueueGenericSend+0x168>
		pxQueue->cTxLock = queueUNLOCKED;
   21a28:	23ff      	movs	r3, #255	; 0xff
   21a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   21a2e:	f7fb ffeb 	bl	1da08 <vPortExitCritical>
	taskENTER_CRITICAL();
   21a32:	f7fb ffcf 	bl	1d9d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   21a36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   21a3a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21a3c:	2d00      	cmp	r5, #0
   21a3e:	dc04      	bgt.n	21a4a <xQueueGenericSend+0x1a6>
   21a40:	e011      	b.n	21a66 <xQueueGenericSend+0x1c2>
				--cRxLock;
   21a42:	1e6b      	subs	r3, r5, #1
   21a44:	b2da      	uxtb	r2, r3
   21a46:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21a48:	b16a      	cbz	r2, 21a66 <xQueueGenericSend+0x1c2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21a4a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21a4c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21a4e:	b153      	cbz	r3, 21a66 <xQueueGenericSend+0x1c2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21a50:	f001 f884 	bl	22b5c <xTaskRemoveFromEventList>
   21a54:	2800      	cmp	r0, #0
   21a56:	d0f4      	beq.n	21a42 <xQueueGenericSend+0x19e>
					vTaskMissedYield();
   21a58:	f001 f94c 	bl	22cf4 <vTaskMissedYield>
				--cRxLock;
   21a5c:	1e6b      	subs	r3, r5, #1
   21a5e:	b2da      	uxtb	r2, r3
   21a60:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21a62:	2a00      	cmp	r2, #0
   21a64:	d1f1      	bne.n	21a4a <xQueueGenericSend+0x1a6>
		pxQueue->cRxLock = queueUNLOCKED;
   21a66:	23ff      	movs	r3, #255	; 0xff
   21a68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   21a6c:	f7fb ffcc 	bl	1da08 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
   21a70:	f000 ff34 	bl	228dc <xTaskResumeAll>
   21a74:	2800      	cmp	r0, #0
   21a76:	d1ab      	bne.n	219d0 <xQueueGenericSend+0x12c>
					portYIELD_WITHIN_API();
   21a78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   21a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21a80:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   21a84:	f3bf 8f4f 	dsb	sy
   21a88:	f3bf 8f6f 	isb	sy
   21a8c:	e7a0      	b.n	219d0 <xQueueGenericSend+0x12c>
					vTaskInternalSetTimeOutState( &xTimeOut );
   21a8e:	a802      	add	r0, sp, #8
   21a90:	f001 f8ec 	bl	22c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   21a94:	e735      	b.n	21902 <xQueueGenericSend+0x5e>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   21a96:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   21a98:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   21a9a:	b1c2      	cbz	r2, 21ace <xQueueGenericSend+0x22a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   21a9c:	4641      	mov	r1, r8
   21a9e:	68e0      	ldr	r0, [r4, #12]
   21aa0:	f7ea fb2e 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21aa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   21aa6:	68e3      	ldr	r3, [r4, #12]
   21aa8:	4251      	negs	r1, r2
   21aaa:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21aac:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21aae:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21ab0:	4293      	cmp	r3, r2
   21ab2:	d204      	bcs.n	21abe <xQueueGenericSend+0x21a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   21ab4:	68a3      	ldr	r3, [r4, #8]
   21ab6:	440b      	add	r3, r1
   21ab8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   21aba:	2f02      	cmp	r7, #2
   21abc:	d107      	bne.n	21ace <xQueueGenericSend+0x22a>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   21abe:	2d01      	cmp	r5, #1
   21ac0:	bf38      	it	cc
   21ac2:	2501      	movcc	r5, #1
   21ac4:	e004      	b.n	21ad0 <xQueueGenericSend+0x22c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   21ac6:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   21ac8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   21aca:	2a00      	cmp	r2, #0
   21acc:	d15e      	bne.n	21b8c <xQueueGenericSend+0x2e8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   21ace:	3501      	adds	r5, #1
   21ad0:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21ad4:	2b00      	cmp	r3, #0
   21ad6:	d148      	bne.n	21b6a <xQueueGenericSend+0x2c6>
				taskEXIT_CRITICAL();
   21ad8:	f7fb ff96 	bl	1da08 <vPortExitCritical>
				return pdPASS;
   21adc:	2001      	movs	r0, #1
}
   21ade:	b005      	add	sp, #20
   21ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21ae4:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
   21ae6:	f7fb ff8f 	bl	1da08 <vPortExitCritical>
					return errQUEUE_FULL;
   21aea:	9800      	ldr	r0, [sp, #0]
   21aec:	e7f7      	b.n	21ade <xQueueGenericSend+0x23a>
	taskENTER_CRITICAL();
   21aee:	f7fb ff71 	bl	1d9d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   21af2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   21af6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21af8:	2d00      	cmp	r5, #0
   21afa:	dd10      	ble.n	21b1e <xQueueGenericSend+0x27a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21afc:	f104 0624 	add.w	r6, r4, #36	; 0x24
   21b00:	e003      	b.n	21b0a <xQueueGenericSend+0x266>
			--cTxLock;
   21b02:	1e6b      	subs	r3, r5, #1
   21b04:	b2da      	uxtb	r2, r3
   21b06:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21b08:	b14a      	cbz	r2, 21b1e <xQueueGenericSend+0x27a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21b0c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21b0e:	b133      	cbz	r3, 21b1e <xQueueGenericSend+0x27a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21b10:	f001 f824 	bl	22b5c <xTaskRemoveFromEventList>
   21b14:	2800      	cmp	r0, #0
   21b16:	d0f4      	beq.n	21b02 <xQueueGenericSend+0x25e>
						vTaskMissedYield();
   21b18:	f001 f8ec 	bl	22cf4 <vTaskMissedYield>
   21b1c:	e7f1      	b.n	21b02 <xQueueGenericSend+0x25e>
		pxQueue->cTxLock = queueUNLOCKED;
   21b1e:	23ff      	movs	r3, #255	; 0xff
   21b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   21b24:	f7fb ff70 	bl	1da08 <vPortExitCritical>
	taskENTER_CRITICAL();
   21b28:	f7fb ff54 	bl	1d9d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   21b2c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   21b30:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21b32:	2d00      	cmp	r5, #0
   21b34:	dd10      	ble.n	21b58 <xQueueGenericSend+0x2b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21b36:	f104 0610 	add.w	r6, r4, #16
   21b3a:	e003      	b.n	21b44 <xQueueGenericSend+0x2a0>
				--cRxLock;
   21b3c:	1e6b      	subs	r3, r5, #1
   21b3e:	b2da      	uxtb	r2, r3
   21b40:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21b42:	b14a      	cbz	r2, 21b58 <xQueueGenericSend+0x2b4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21b44:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21b46:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21b48:	b133      	cbz	r3, 21b58 <xQueueGenericSend+0x2b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21b4a:	f001 f807 	bl	22b5c <xTaskRemoveFromEventList>
   21b4e:	2800      	cmp	r0, #0
   21b50:	d0f4      	beq.n	21b3c <xQueueGenericSend+0x298>
					vTaskMissedYield();
   21b52:	f001 f8cf 	bl	22cf4 <vTaskMissedYield>
   21b56:	e7f1      	b.n	21b3c <xQueueGenericSend+0x298>
		pxQueue->cRxLock = queueUNLOCKED;
   21b58:	23ff      	movs	r3, #255	; 0xff
   21b5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   21b5e:	f7fb ff53 	bl	1da08 <vPortExitCritical>
			( void ) xTaskResumeAll();
   21b62:	f000 febb 	bl	228dc <xTaskResumeAll>
			return errQUEUE_FULL;
   21b66:	2000      	movs	r0, #0
   21b68:	e7b9      	b.n	21ade <xQueueGenericSend+0x23a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21b6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   21b6e:	f000 fff5 	bl	22b5c <xTaskRemoveFromEventList>
   21b72:	2800      	cmp	r0, #0
   21b74:	d0b0      	beq.n	21ad8 <xQueueGenericSend+0x234>
							queueYIELD_IF_USING_PREEMPTION();
   21b76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   21b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21b7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   21b82:	f3bf 8f4f 	dsb	sy
   21b86:	f3bf 8f6f 	isb	sy
   21b8a:	e7a5      	b.n	21ad8 <xQueueGenericSend+0x234>
	else if( xPosition == queueSEND_TO_BACK )
   21b8c:	b977      	cbnz	r7, 21bac <xQueueGenericSend+0x308>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   21b8e:	4641      	mov	r1, r8
   21b90:	6860      	ldr	r0, [r4, #4]
   21b92:	f7ea fab5 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   21b96:	6863      	ldr	r3, [r4, #4]
   21b98:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21b9a:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   21b9c:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21b9e:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   21ba0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21ba2:	d394      	bcc.n	21ace <xQueueGenericSend+0x22a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   21ba4:	6823      	ldr	r3, [r4, #0]
   21ba6:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   21ba8:	3501      	adds	r5, #1
   21baa:	e791      	b.n	21ad0 <xQueueGenericSend+0x22c>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   21bac:	4641      	mov	r1, r8
   21bae:	68e0      	ldr	r0, [r4, #12]
   21bb0:	f7ea faa6 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21bb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   21bb6:	68e3      	ldr	r3, [r4, #12]
   21bb8:	4251      	negs	r1, r2
   21bba:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21bbc:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21bbe:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21bc0:	4293      	cmp	r3, r2
   21bc2:	f4bf af7a 	bcs.w	21aba <xQueueGenericSend+0x216>
   21bc6:	e775      	b.n	21ab4 <xQueueGenericSend+0x210>

00021bc8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
   21bc8:	b160      	cbz	r0, 21be4 <xQueueGenericSendFromISR+0x1c>
{
   21bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21bce:	460e      	mov	r6, r1
   21bd0:	4617      	mov	r7, r2
   21bd2:	461d      	mov	r5, r3
   21bd4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   21bd6:	b1e9      	cbz	r1, 21c14 <xQueueGenericSendFromISR+0x4c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   21bd8:	2d02      	cmp	r5, #2
   21bda:	d104      	bne.n	21be6 <xQueueGenericSendFromISR+0x1e>
   21bdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   21bde:	2b01      	cmp	r3, #1
   21be0:	d001      	beq.n	21be6 <xQueueGenericSendFromISR+0x1e>
   21be2:	e7fe      	b.n	21be2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( pxQueue );
   21be4:	e7fe      	b.n	21be4 <xQueueGenericSendFromISR+0x1c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   21be6:	f7fb ff63 	bl	1dab0 <vPortValidateInterruptPriority>
	__asm volatile
   21bea:	f3ef 8a11 	mrs	sl, BASEPRI
   21bee:	f04f 0380 	mov.w	r3, #128	; 0x80
   21bf2:	f383 8811 	msr	BASEPRI, r3
   21bf6:	f3bf 8f6f 	isb	sy
   21bfa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   21bfe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   21c02:	429a      	cmp	r2, r3
   21c04:	d339      	bcc.n	21c7a <xQueueGenericSendFromISR+0xb2>
   21c06:	2d02      	cmp	r5, #2
   21c08:	d008      	beq.n	21c1c <xQueueGenericSendFromISR+0x54>
			xReturn = errQUEUE_FULL;
   21c0a:	2000      	movs	r0, #0
	__asm volatile
   21c0c:	f38a 8811 	msr	BASEPRI, sl
}
   21c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   21c14:	6c03      	ldr	r3, [r0, #64]	; 0x40
   21c16:	2b00      	cmp	r3, #0
   21c18:	d0de      	beq.n	21bd8 <xQueueGenericSendFromISR+0x10>
   21c1a:	e7fe      	b.n	21c1a <xQueueGenericSendFromISR+0x52>
			const int8_t cTxLock = pxQueue->cTxLock;
   21c1c:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   21c20:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   21c22:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
   21c26:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   21c2a:	b1b2      	cbz	r2, 21c5a <xQueueGenericSendFromISR+0x92>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   21c2c:	4631      	mov	r1, r6
   21c2e:	68e0      	ldr	r0, [r4, #12]
   21c30:	f7ea fa66 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
   21c36:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21c38:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21c3a:	1ad2      	subs	r2, r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21c3c:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21c3e:	60e2      	str	r2, [r4, #12]
   21c40:	f1c3 0300 	rsb	r3, r3, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21c44:	d204      	bcs.n	21c50 <xQueueGenericSendFromISR+0x88>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   21c46:	68a2      	ldr	r2, [r4, #8]
   21c48:	4413      	add	r3, r2
   21c4a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   21c4c:	2d02      	cmp	r5, #2
   21c4e:	d104      	bne.n	21c5a <xQueueGenericSendFromISR+0x92>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   21c50:	464b      	mov	r3, r9
   21c52:	2b01      	cmp	r3, #1
   21c54:	bf38      	it	cc
   21c56:	2301      	movcc	r3, #1
   21c58:	e001      	b.n	21c5e <xQueueGenericSendFromISR+0x96>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   21c5a:	f109 0301 	add.w	r3, r9, #1
			if( cTxLock == queueUNLOCKED )
   21c5e:	f1b8 3fff 	cmp.w	r8, #4294967295
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   21c62:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   21c64:	d023      	beq.n	21cae <xQueueGenericSendFromISR+0xe6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   21c66:	f108 0301 	add.w	r3, r8, #1
   21c6a:	b25b      	sxtb	r3, r3
   21c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   21c70:	2001      	movs	r0, #1
   21c72:	f38a 8811 	msr	BASEPRI, sl
}
   21c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
   21c7a:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   21c7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   21c80:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
   21c84:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   21c88:	2a00      	cmp	r2, #0
   21c8a:	d0e6      	beq.n	21c5a <xQueueGenericSendFromISR+0x92>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   21c8c:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
   21c8e:	b9e5      	cbnz	r5, 21cca <xQueueGenericSendFromISR+0x102>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   21c90:	6860      	ldr	r0, [r4, #4]
   21c92:	f7ea fa35 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   21c96:	6863      	ldr	r3, [r4, #4]
   21c98:	6c22      	ldr	r2, [r4, #64]	; 0x40
   21c9a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21c9c:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   21c9e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21ca0:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
   21ca2:	bf24      	itt	cs
   21ca4:	6822      	ldrcs	r2, [r4, #0]
   21ca6:	6062      	strcs	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   21ca8:	f109 0301 	add.w	r3, r9, #1
			pxQueue->pcWriteTo = pxQueue->pcHead;
   21cac:	e7d7      	b.n	21c5e <xQueueGenericSendFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21cb0:	2b00      	cmp	r3, #0
   21cb2:	d0dd      	beq.n	21c70 <xQueueGenericSendFromISR+0xa8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21cb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   21cb8:	f000 ff50 	bl	22b5c <xTaskRemoveFromEventList>
   21cbc:	2800      	cmp	r0, #0
   21cbe:	d0d7      	beq.n	21c70 <xQueueGenericSendFromISR+0xa8>
							if( pxHigherPriorityTaskWoken != NULL )
   21cc0:	2f00      	cmp	r7, #0
   21cc2:	d0d5      	beq.n	21c70 <xQueueGenericSendFromISR+0xa8>
								*pxHigherPriorityTaskWoken = pdTRUE;
   21cc4:	2001      	movs	r0, #1
   21cc6:	6038      	str	r0, [r7, #0]
   21cc8:	e7a0      	b.n	21c0c <xQueueGenericSendFromISR+0x44>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   21cca:	68e0      	ldr	r0, [r4, #12]
   21ccc:	f7ea fa18 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21cd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   21cd2:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21cd4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21cd6:	1ad2      	subs	r2, r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21cd8:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   21cda:	60e2      	str	r2, [r4, #12]
   21cdc:	f1c3 0300 	rsb	r3, r3, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   21ce0:	d2b4      	bcs.n	21c4c <xQueueGenericSendFromISR+0x84>
   21ce2:	e7b0      	b.n	21c46 <xQueueGenericSendFromISR+0x7e>

00021ce4 <xQueueReceive>:
{
   21ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21ce8:	b085      	sub	sp, #20
   21cea:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   21cec:	2800      	cmp	r0, #0
   21cee:	f000 8099 	beq.w	21e24 <xQueueReceive+0x140>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   21cf2:	460f      	mov	r7, r1
   21cf4:	4604      	mov	r4, r0
   21cf6:	2900      	cmp	r1, #0
   21cf8:	f000 8095 	beq.w	21e26 <xQueueReceive+0x142>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   21cfc:	f001 f81c 	bl	22d38 <xTaskGetSchedulerState>
   21d00:	2800      	cmp	r0, #0
   21d02:	f000 8095 	beq.w	21e30 <xQueueReceive+0x14c>
		taskENTER_CRITICAL();
   21d06:	f7fb fe65 	bl	1d9d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   21d0a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   21d0c:	2d00      	cmp	r5, #0
   21d0e:	d172      	bne.n	21df6 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
   21d10:	9b01      	ldr	r3, [sp, #4]
   21d12:	2b00      	cmp	r3, #0
   21d14:	f000 80e2 	beq.w	21edc <xQueueReceive+0x1f8>
					vTaskInternalSetTimeOutState( &xTimeOut );
   21d18:	a802      	add	r0, sp, #8
   21d1a:	f000 ffa7 	bl	22c6c <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
   21d1e:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21d20:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
   21d24:	f7fb fe70 	bl	1da08 <vPortExitCritical>
		vTaskSuspendAll();
   21d28:	f000 fc90 	bl	2264c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   21d2c:	f7fb fe52 	bl	1d9d4 <vPortEnterCritical>
   21d30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   21d34:	2bff      	cmp	r3, #255	; 0xff
   21d36:	bf08      	it	eq
   21d38:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
   21d3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   21d40:	2bff      	cmp	r3, #255	; 0xff
   21d42:	bf08      	it	eq
   21d44:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
   21d48:	f7fb fe5e 	bl	1da08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   21d4c:	a901      	add	r1, sp, #4
   21d4e:	a802      	add	r0, sp, #8
   21d50:	f000 ff98 	bl	22c84 <xTaskCheckForTimeOut>
   21d54:	2800      	cmp	r0, #0
   21d56:	d170      	bne.n	21e3a <xQueueReceive+0x156>
	taskENTER_CRITICAL();
   21d58:	f7fb fe3c 	bl	1d9d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   21d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   21d5e:	2b00      	cmp	r3, #0
   21d60:	f000 80c2 	beq.w	21ee8 <xQueueReceive+0x204>
	taskEXIT_CRITICAL();
   21d64:	f7fb fe50 	bl	1da08 <vPortExitCritical>
	taskENTER_CRITICAL();
   21d68:	f7fb fe34 	bl	1d9d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   21d6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   21d70:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21d72:	2d00      	cmp	r5, #0
   21d74:	dc04      	bgt.n	21d80 <xQueueReceive+0x9c>
   21d76:	e011      	b.n	21d9c <xQueueReceive+0xb8>
			--cTxLock;
   21d78:	1e6b      	subs	r3, r5, #1
   21d7a:	b2da      	uxtb	r2, r3
   21d7c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21d7e:	b16a      	cbz	r2, 21d9c <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21d82:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21d84:	b153      	cbz	r3, 21d9c <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21d86:	f000 fee9 	bl	22b5c <xTaskRemoveFromEventList>
   21d8a:	2800      	cmp	r0, #0
   21d8c:	d0f4      	beq.n	21d78 <xQueueReceive+0x94>
						vTaskMissedYield();
   21d8e:	f000 ffb1 	bl	22cf4 <vTaskMissedYield>
			--cTxLock;
   21d92:	1e6b      	subs	r3, r5, #1
   21d94:	b2da      	uxtb	r2, r3
   21d96:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21d98:	2a00      	cmp	r2, #0
   21d9a:	d1f1      	bne.n	21d80 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
   21d9c:	23ff      	movs	r3, #255	; 0xff
   21d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   21da2:	f7fb fe31 	bl	1da08 <vPortExitCritical>
	taskENTER_CRITICAL();
   21da6:	f7fb fe15 	bl	1d9d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   21daa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   21dae:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21db0:	2d00      	cmp	r5, #0
   21db2:	dd14      	ble.n	21dde <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21db4:	f104 0910 	add.w	r9, r4, #16
   21db8:	e003      	b.n	21dc2 <xQueueReceive+0xde>
				--cRxLock;
   21dba:	1e6b      	subs	r3, r5, #1
   21dbc:	b2da      	uxtb	r2, r3
   21dbe:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21dc0:	b16a      	cbz	r2, 21dde <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21dc2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21dc4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21dc6:	b153      	cbz	r3, 21dde <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21dc8:	f000 fec8 	bl	22b5c <xTaskRemoveFromEventList>
   21dcc:	2800      	cmp	r0, #0
   21dce:	d0f4      	beq.n	21dba <xQueueReceive+0xd6>
					vTaskMissedYield();
   21dd0:	f000 ff90 	bl	22cf4 <vTaskMissedYield>
				--cRxLock;
   21dd4:	1e6b      	subs	r3, r5, #1
   21dd6:	b2da      	uxtb	r2, r3
   21dd8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21dda:	2a00      	cmp	r2, #0
   21ddc:	d1f1      	bne.n	21dc2 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
   21dde:	23ff      	movs	r3, #255	; 0xff
   21de0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   21de4:	f7fb fe10 	bl	1da08 <vPortExitCritical>
				( void ) xTaskResumeAll();
   21de8:	f000 fd78 	bl	228dc <xTaskResumeAll>
		taskENTER_CRITICAL();
   21dec:	f7fb fdf2 	bl	1d9d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   21df0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   21df2:	2d00      	cmp	r5, #0
   21df4:	d06e      	beq.n	21ed4 <xQueueReceive+0x1f0>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   21df6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   21df8:	b152      	cbz	r2, 21e10 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   21dfa:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   21dfc:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   21dfe:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   21e00:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   21e02:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   21e04:	bf24      	itt	cs
   21e06:	6821      	ldrcs	r1, [r4, #0]
   21e08:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   21e0a:	4638      	mov	r0, r7
   21e0c:	f7ea f978 	bl	c100 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   21e10:	3d01      	subs	r5, #1
   21e12:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21e14:	6923      	ldr	r3, [r4, #16]
   21e16:	2b00      	cmp	r3, #0
   21e18:	f040 80bb 	bne.w	21f92 <xQueueReceive+0x2ae>
				taskEXIT_CRITICAL();
   21e1c:	f7fb fdf4 	bl	1da08 <vPortExitCritical>
				return pdPASS;
   21e20:	2001      	movs	r0, #1
   21e22:	e05e      	b.n	21ee2 <xQueueReceive+0x1fe>
	configASSERT( ( pxQueue ) );
   21e24:	e7fe      	b.n	21e24 <xQueueReceive+0x140>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   21e26:	6c03      	ldr	r3, [r0, #64]	; 0x40
   21e28:	2b00      	cmp	r3, #0
   21e2a:	f43f af67 	beq.w	21cfc <xQueueReceive+0x18>
   21e2e:	e7fe      	b.n	21e2e <xQueueReceive+0x14a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   21e30:	9b01      	ldr	r3, [sp, #4]
   21e32:	2b00      	cmp	r3, #0
   21e34:	f43f af67 	beq.w	21d06 <xQueueReceive+0x22>
   21e38:	e7fe      	b.n	21e38 <xQueueReceive+0x154>
	taskENTER_CRITICAL();
   21e3a:	f7fb fdcb 	bl	1d9d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   21e3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   21e42:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21e44:	2d00      	cmp	r5, #0
   21e46:	dc04      	bgt.n	21e52 <xQueueReceive+0x16e>
   21e48:	e011      	b.n	21e6e <xQueueReceive+0x18a>
			--cTxLock;
   21e4a:	1e6b      	subs	r3, r5, #1
   21e4c:	b2da      	uxtb	r2, r3
   21e4e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21e50:	b16a      	cbz	r2, 21e6e <xQueueReceive+0x18a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21e54:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21e56:	b153      	cbz	r3, 21e6e <xQueueReceive+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21e58:	f000 fe80 	bl	22b5c <xTaskRemoveFromEventList>
   21e5c:	2800      	cmp	r0, #0
   21e5e:	d0f4      	beq.n	21e4a <xQueueReceive+0x166>
						vTaskMissedYield();
   21e60:	f000 ff48 	bl	22cf4 <vTaskMissedYield>
			--cTxLock;
   21e64:	1e6b      	subs	r3, r5, #1
   21e66:	b2da      	uxtb	r2, r3
   21e68:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21e6a:	2a00      	cmp	r2, #0
   21e6c:	d1f1      	bne.n	21e52 <xQueueReceive+0x16e>
		pxQueue->cTxLock = queueUNLOCKED;
   21e6e:	23ff      	movs	r3, #255	; 0xff
   21e70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   21e74:	f7fb fdc8 	bl	1da08 <vPortExitCritical>
	taskENTER_CRITICAL();
   21e78:	f7fb fdac 	bl	1d9d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   21e7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   21e80:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21e82:	2d00      	cmp	r5, #0
   21e84:	dd14      	ble.n	21eb0 <xQueueReceive+0x1cc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21e86:	f104 0910 	add.w	r9, r4, #16
   21e8a:	e003      	b.n	21e94 <xQueueReceive+0x1b0>
				--cRxLock;
   21e8c:	1e6b      	subs	r3, r5, #1
   21e8e:	b2da      	uxtb	r2, r3
   21e90:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21e92:	b16a      	cbz	r2, 21eb0 <xQueueReceive+0x1cc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21e94:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21e96:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21e98:	b153      	cbz	r3, 21eb0 <xQueueReceive+0x1cc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21e9a:	f000 fe5f 	bl	22b5c <xTaskRemoveFromEventList>
   21e9e:	2800      	cmp	r0, #0
   21ea0:	d0f4      	beq.n	21e8c <xQueueReceive+0x1a8>
					vTaskMissedYield();
   21ea2:	f000 ff27 	bl	22cf4 <vTaskMissedYield>
				--cRxLock;
   21ea6:	1e6b      	subs	r3, r5, #1
   21ea8:	b2da      	uxtb	r2, r3
   21eaa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21eac:	2a00      	cmp	r2, #0
   21eae:	d1f1      	bne.n	21e94 <xQueueReceive+0x1b0>
		pxQueue->cRxLock = queueUNLOCKED;
   21eb0:	23ff      	movs	r3, #255	; 0xff
   21eb2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   21eb6:	f7fb fda7 	bl	1da08 <vPortExitCritical>
			( void ) xTaskResumeAll();
   21eba:	f000 fd0f 	bl	228dc <xTaskResumeAll>
	taskENTER_CRITICAL();
   21ebe:	f7fb fd89 	bl	1d9d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   21ec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   21ec4:	b153      	cbz	r3, 21edc <xQueueReceive+0x1f8>
	taskEXIT_CRITICAL();
   21ec6:	f7fb fd9f 	bl	1da08 <vPortExitCritical>
		taskENTER_CRITICAL();
   21eca:	f7fb fd83 	bl	1d9d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   21ece:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   21ed0:	2d00      	cmp	r5, #0
   21ed2:	d190      	bne.n	21df6 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
   21ed4:	9b01      	ldr	r3, [sp, #4]
   21ed6:	2b00      	cmp	r3, #0
   21ed8:	f47f af24 	bne.w	21d24 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
   21edc:	f7fb fd94 	bl	1da08 <vPortExitCritical>
					return errQUEUE_EMPTY;
   21ee0:	2000      	movs	r0, #0
}
   21ee2:	b005      	add	sp, #20
   21ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
   21ee8:	f7fb fd8e 	bl	1da08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   21eec:	9901      	ldr	r1, [sp, #4]
   21eee:	4630      	mov	r0, r6
   21ef0:	f000 fd70 	bl	229d4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
   21ef4:	f7fb fd6e 	bl	1d9d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   21ef8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   21efc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21efe:	2d00      	cmp	r5, #0
   21f00:	dc04      	bgt.n	21f0c <xQueueReceive+0x228>
   21f02:	e011      	b.n	21f28 <xQueueReceive+0x244>
			--cTxLock;
   21f04:	1e6b      	subs	r3, r5, #1
   21f06:	b2da      	uxtb	r2, r3
   21f08:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21f0a:	b16a      	cbz	r2, 21f28 <xQueueReceive+0x244>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21f0e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21f10:	b153      	cbz	r3, 21f28 <xQueueReceive+0x244>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21f12:	f000 fe23 	bl	22b5c <xTaskRemoveFromEventList>
   21f16:	2800      	cmp	r0, #0
   21f18:	d0f4      	beq.n	21f04 <xQueueReceive+0x220>
						vTaskMissedYield();
   21f1a:	f000 feeb 	bl	22cf4 <vTaskMissedYield>
			--cTxLock;
   21f1e:	1e6b      	subs	r3, r5, #1
   21f20:	b2da      	uxtb	r2, r3
   21f22:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21f24:	2a00      	cmp	r2, #0
   21f26:	d1f1      	bne.n	21f0c <xQueueReceive+0x228>
		pxQueue->cTxLock = queueUNLOCKED;
   21f28:	23ff      	movs	r3, #255	; 0xff
   21f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   21f2e:	f7fb fd6b 	bl	1da08 <vPortExitCritical>
	taskENTER_CRITICAL();
   21f32:	f7fb fd4f 	bl	1d9d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   21f36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   21f3a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21f3c:	2d00      	cmp	r5, #0
   21f3e:	dd14      	ble.n	21f6a <xQueueReceive+0x286>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21f40:	f104 0910 	add.w	r9, r4, #16
   21f44:	e003      	b.n	21f4e <xQueueReceive+0x26a>
				--cRxLock;
   21f46:	1e6b      	subs	r3, r5, #1
   21f48:	b2da      	uxtb	r2, r3
   21f4a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21f4c:	b16a      	cbz	r2, 21f6a <xQueueReceive+0x286>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21f4e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21f50:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21f52:	b153      	cbz	r3, 21f6a <xQueueReceive+0x286>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21f54:	f000 fe02 	bl	22b5c <xTaskRemoveFromEventList>
   21f58:	2800      	cmp	r0, #0
   21f5a:	d0f4      	beq.n	21f46 <xQueueReceive+0x262>
					vTaskMissedYield();
   21f5c:	f000 feca 	bl	22cf4 <vTaskMissedYield>
				--cRxLock;
   21f60:	1e6b      	subs	r3, r5, #1
   21f62:	b2da      	uxtb	r2, r3
   21f64:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   21f66:	2a00      	cmp	r2, #0
   21f68:	d1f1      	bne.n	21f4e <xQueueReceive+0x26a>
		pxQueue->cRxLock = queueUNLOCKED;
   21f6a:	23ff      	movs	r3, #255	; 0xff
   21f6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   21f70:	f7fb fd4a 	bl	1da08 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
   21f74:	f000 fcb2 	bl	228dc <xTaskResumeAll>
   21f78:	2800      	cmp	r0, #0
   21f7a:	d1a6      	bne.n	21eca <xQueueReceive+0x1e6>
					portYIELD_WITHIN_API();
   21f7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   21f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21f84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   21f88:	f3bf 8f4f 	dsb	sy
   21f8c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
   21f90:	e79b      	b.n	21eca <xQueueReceive+0x1e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21f92:	f104 0010 	add.w	r0, r4, #16
   21f96:	f000 fde1 	bl	22b5c <xTaskRemoveFromEventList>
   21f9a:	2800      	cmp	r0, #0
   21f9c:	f43f af3e 	beq.w	21e1c <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
   21fa0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   21fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21fa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   21fac:	f3bf 8f4f 	dsb	sy
   21fb0:	f3bf 8f6f 	isb	sy
   21fb4:	e732      	b.n	21e1c <xQueueReceive+0x138>
   21fb6:	bf00      	nop

00021fb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   21fb8:	b570      	push	{r4, r5, r6, lr}
   21fba:	4605      	mov	r5, r0
   21fbc:	460e      	mov	r6, r1
   21fbe:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   21fc0:	f7fb fd08 	bl	1d9d4 <vPortEnterCritical>
   21fc4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   21fc8:	2bff      	cmp	r3, #255	; 0xff
   21fca:	bf04      	itt	eq
   21fcc:	2300      	moveq	r3, #0
   21fce:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
   21fd2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   21fd6:	2bff      	cmp	r3, #255	; 0xff
   21fd8:	bf04      	itt	eq
   21fda:	2300      	moveq	r3, #0
   21fdc:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
   21fe0:	f7fb fd12 	bl	1da08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   21fe4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   21fe6:	2b00      	cmp	r3, #0
   21fe8:	d043      	beq.n	22072 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
   21fea:	f7fb fcf3 	bl	1d9d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   21fee:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   21ff2:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   21ff4:	2c00      	cmp	r4, #0
   21ff6:	dd14      	ble.n	22022 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21ff8:	f105 0624 	add.w	r6, r5, #36	; 0x24
   21ffc:	e003      	b.n	22006 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
   21ffe:	1e63      	subs	r3, r4, #1
   22000:	b2da      	uxtb	r2, r3
   22002:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   22004:	b16a      	cbz	r2, 22022 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   22006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   22008:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2200a:	b153      	cbz	r3, 22022 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   2200c:	f000 fda6 	bl	22b5c <xTaskRemoveFromEventList>
   22010:	2800      	cmp	r0, #0
   22012:	d0f4      	beq.n	21ffe <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
   22014:	f000 fe6e 	bl	22cf4 <vTaskMissedYield>
			--cTxLock;
   22018:	1e63      	subs	r3, r4, #1
   2201a:	b2da      	uxtb	r2, r3
   2201c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   2201e:	2a00      	cmp	r2, #0
   22020:	d1f1      	bne.n	22006 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
   22022:	23ff      	movs	r3, #255	; 0xff
   22024:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   22028:	f7fb fcee 	bl	1da08 <vPortExitCritical>
	taskENTER_CRITICAL();
   2202c:	f7fb fcd2 	bl	1d9d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   22030:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   22034:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   22036:	2c00      	cmp	r4, #0
   22038:	dd14      	ble.n	22064 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   2203a:	f105 0610 	add.w	r6, r5, #16
   2203e:	e003      	b.n	22048 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
   22040:	1e63      	subs	r3, r4, #1
   22042:	b2da      	uxtb	r2, r3
   22044:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   22046:	b16a      	cbz	r2, 22064 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   22048:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   2204a:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   2204c:	b153      	cbz	r3, 22064 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   2204e:	f000 fd85 	bl	22b5c <xTaskRemoveFromEventList>
   22052:	2800      	cmp	r0, #0
   22054:	d0f4      	beq.n	22040 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
   22056:	f000 fe4d 	bl	22cf4 <vTaskMissedYield>
				--cRxLock;
   2205a:	1e63      	subs	r3, r4, #1
   2205c:	b2da      	uxtb	r2, r3
   2205e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   22060:	2a00      	cmp	r2, #0
   22062:	d1f1      	bne.n	22048 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
   22064:	23ff      	movs	r3, #255	; 0xff
   22066:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
   2206a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
   2206e:	f7fb bccb 	b.w	1da08 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   22072:	4622      	mov	r2, r4
   22074:	4631      	mov	r1, r6
   22076:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2207a:	f000 fd2d 	bl	22ad8 <vTaskPlaceOnEventListRestricted>
   2207e:	e7b4      	b.n	21fea <vQueueWaitForMessageRestricted+0x32>

00022080 <vTaskSwitchContext.part.0>:
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
   22080:	4b2b      	ldr	r3, [pc, #172]	; (22130 <vTaskSwitchContext.part.0+0xb0>)
void vTaskSwitchContext( void )
   22082:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
   22084:	2200      	movs	r2, #0
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
   22086:	4c2b      	ldr	r4, [pc, #172]	; (22134 <vTaskSwitchContext.part.0+0xb4>)
		xYieldPending = pdFALSE;
   22088:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   2208a:	6823      	ldr	r3, [r4, #0]
   2208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2208e:	681a      	ldr	r2, [r3, #0]
   22090:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   22094:	d103      	bne.n	2209e <vTaskSwitchContext.part.0+0x1e>
   22096:	685a      	ldr	r2, [r3, #4]
   22098:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   2209c:	d03f      	beq.n	2211e <vTaskSwitchContext.part.0+0x9e>
   2209e:	6820      	ldr	r0, [r4, #0]
   220a0:	6821      	ldr	r1, [r4, #0]
   220a2:	3134      	adds	r1, #52	; 0x34
   220a4:	f7f3 fe3e 	bl	15d24 <vApplicationStackOverflowHook>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   220a8:	4d23      	ldr	r5, [pc, #140]	; (22138 <vTaskSwitchContext.part.0+0xb8>)
   220aa:	4a24      	ldr	r2, [pc, #144]	; (2213c <vTaskSwitchContext.part.0+0xbc>)
   220ac:	682b      	ldr	r3, [r5, #0]
   220ae:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   220b2:	0080      	lsls	r0, r0, #2
   220b4:	0099      	lsls	r1, r3, #2
   220b6:	5810      	ldr	r0, [r2, r0]
   220b8:	bb08      	cbnz	r0, 220fe <vTaskSwitchContext.part.0+0x7e>
   220ba:	b1f3      	cbz	r3, 220fa <vTaskSwitchContext.part.0+0x7a>
   220bc:	1e58      	subs	r0, r3, #1
   220be:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   220c2:	0089      	lsls	r1, r1, #2
   220c4:	5856      	ldr	r6, [r2, r1]
   220c6:	0081      	lsls	r1, r0, #2
   220c8:	b9c6      	cbnz	r6, 220fc <vTaskSwitchContext.part.0+0x7c>
   220ca:	b1b0      	cbz	r0, 220fa <vTaskSwitchContext.part.0+0x7a>
   220cc:	1e98      	subs	r0, r3, #2
   220ce:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   220d2:	0089      	lsls	r1, r1, #2
   220d4:	5856      	ldr	r6, [r2, r1]
   220d6:	0081      	lsls	r1, r0, #2
   220d8:	b986      	cbnz	r6, 220fc <vTaskSwitchContext.part.0+0x7c>
   220da:	b170      	cbz	r0, 220fa <vTaskSwitchContext.part.0+0x7a>
   220dc:	1ed8      	subs	r0, r3, #3
   220de:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   220e2:	0089      	lsls	r1, r1, #2
   220e4:	5856      	ldr	r6, [r2, r1]
   220e6:	0081      	lsls	r1, r0, #2
   220e8:	b946      	cbnz	r6, 220fc <vTaskSwitchContext.part.0+0x7c>
   220ea:	b130      	cbz	r0, 220fa <vTaskSwitchContext.part.0+0x7a>
   220ec:	3b04      	subs	r3, #4
   220ee:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   220f2:	0080      	lsls	r0, r0, #2
   220f4:	0099      	lsls	r1, r3, #2
   220f6:	5810      	ldr	r0, [r2, r0]
   220f8:	b908      	cbnz	r0, 220fe <vTaskSwitchContext.part.0+0x7e>
   220fa:	e7fe      	b.n	220fa <vTaskSwitchContext.part.0+0x7a>
   220fc:	4603      	mov	r3, r0
   220fe:	4419      	add	r1, r3
   22100:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   22104:	4602      	mov	r2, r0
   22106:	6841      	ldr	r1, [r0, #4]
   22108:	6849      	ldr	r1, [r1, #4]
   2210a:	6041      	str	r1, [r0, #4]
   2210c:	3208      	adds	r2, #8
   2210e:	4291      	cmp	r1, r2
   22110:	bf04      	itt	eq
   22112:	6849      	ldreq	r1, [r1, #4]
   22114:	6041      	streq	r1, [r0, #4]
   22116:	68ca      	ldr	r2, [r1, #12]
   22118:	6022      	str	r2, [r4, #0]
   2211a:	602b      	str	r3, [r5, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   2211c:	bd70      	pop	{r4, r5, r6, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
   2211e:	689a      	ldr	r2, [r3, #8]
   22120:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   22124:	d1bb      	bne.n	2209e <vTaskSwitchContext.part.0+0x1e>
   22126:	68db      	ldr	r3, [r3, #12]
   22128:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
   2212c:	d1b7      	bne.n	2209e <vTaskSwitchContext.part.0+0x1e>
   2212e:	e7bb      	b.n	220a8 <vTaskSwitchContext.part.0+0x28>
   22130:	1000a20c 	.word	0x1000a20c
   22134:	1000a138 	.word	0x1000a138
   22138:	1000a1a4 	.word	0x1000a1a4
   2213c:	1000a144 	.word	0x1000a144

00022140 <xTaskCreate>:
	{
   22140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   22144:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
   22148:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   2214a:	4640      	mov	r0, r8
	{
   2214c:	460c      	mov	r4, r1
   2214e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   22150:	f7ff f9bc 	bl	214cc <pvPortMalloc>
			if( pxStack != NULL )
   22154:	2800      	cmp	r0, #0
   22156:	f000 80c3 	beq.w	222e0 <xTaskCreate+0x1a0>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   2215a:	4606      	mov	r6, r0
   2215c:	204c      	movs	r0, #76	; 0x4c
   2215e:	f7ff f9b5 	bl	214cc <pvPortMalloc>
				if( pxNewTCB != NULL )
   22162:	4605      	mov	r5, r0
   22164:	2800      	cmp	r0, #0
   22166:	f000 80c0 	beq.w	222ea <xTaskCreate+0x1aa>
					pxNewTCB->pxStack = pxStack;
   2216a:	6306      	str	r6, [r0, #48]	; 0x30
	configASSERT( pcName );
   2216c:	2c00      	cmp	r4, #0
   2216e:	f000 80bb 	beq.w	222e8 <xTaskCreate+0x1a8>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   22172:	4642      	mov	r2, r8
   22174:	4630      	mov	r0, r6
   22176:	21a5      	movs	r1, #165	; 0xa5
   22178:	f001 f8e0 	bl	2333c <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2217c:	7823      	ldrb	r3, [r4, #0]
   2217e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   22182:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   22184:	f1a8 0204 	sub.w	r2, r8, #4
   22188:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   2218a:	f023 0a07 	bic.w	sl, r3, #7
		if( pcName[ x ] == ( char ) 0x00 )
   2218e:	7823      	ldrb	r3, [r4, #0]
   22190:	2b00      	cmp	r3, #0
   22192:	d04d      	beq.n	22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   22194:	7863      	ldrb	r3, [r4, #1]
   22196:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
		if( pcName[ x ] == ( char ) 0x00 )
   2219a:	7863      	ldrb	r3, [r4, #1]
   2219c:	2b00      	cmp	r3, #0
   2219e:	d047      	beq.n	22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   221a0:	78a3      	ldrb	r3, [r4, #2]
   221a2:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
		if( pcName[ x ] == ( char ) 0x00 )
   221a6:	78a3      	ldrb	r3, [r4, #2]
   221a8:	2b00      	cmp	r3, #0
   221aa:	d041      	beq.n	22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   221ac:	78e3      	ldrb	r3, [r4, #3]
   221ae:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
		if( pcName[ x ] == ( char ) 0x00 )
   221b2:	78e3      	ldrb	r3, [r4, #3]
   221b4:	2b00      	cmp	r3, #0
   221b6:	d03b      	beq.n	22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   221b8:	7923      	ldrb	r3, [r4, #4]
   221ba:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		if( pcName[ x ] == ( char ) 0x00 )
   221be:	7923      	ldrb	r3, [r4, #4]
   221c0:	2b00      	cmp	r3, #0
   221c2:	d035      	beq.n	22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   221c4:	7963      	ldrb	r3, [r4, #5]
   221c6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		if( pcName[ x ] == ( char ) 0x00 )
   221ca:	7963      	ldrb	r3, [r4, #5]
   221cc:	2b00      	cmp	r3, #0
   221ce:	d02f      	beq.n	22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   221d0:	79a3      	ldrb	r3, [r4, #6]
   221d2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
		if( pcName[ x ] == ( char ) 0x00 )
   221d6:	79a3      	ldrb	r3, [r4, #6]
   221d8:	b353      	cbz	r3, 22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   221da:	79e3      	ldrb	r3, [r4, #7]
   221dc:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		if( pcName[ x ] == ( char ) 0x00 )
   221e0:	79e3      	ldrb	r3, [r4, #7]
   221e2:	b32b      	cbz	r3, 22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   221e4:	7a23      	ldrb	r3, [r4, #8]
   221e6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		if( pcName[ x ] == ( char ) 0x00 )
   221ea:	7a23      	ldrb	r3, [r4, #8]
   221ec:	b303      	cbz	r3, 22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   221ee:	7a63      	ldrb	r3, [r4, #9]
   221f0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
		if( pcName[ x ] == ( char ) 0x00 )
   221f4:	7a63      	ldrb	r3, [r4, #9]
   221f6:	b1db      	cbz	r3, 22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   221f8:	7aa3      	ldrb	r3, [r4, #10]
   221fa:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
		if( pcName[ x ] == ( char ) 0x00 )
   221fe:	7aa3      	ldrb	r3, [r4, #10]
   22200:	b1b3      	cbz	r3, 22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   22202:	7ae3      	ldrb	r3, [r4, #11]
   22204:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
		if( pcName[ x ] == ( char ) 0x00 )
   22208:	7ae3      	ldrb	r3, [r4, #11]
   2220a:	b18b      	cbz	r3, 22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2220c:	7b23      	ldrb	r3, [r4, #12]
   2220e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		if( pcName[ x ] == ( char ) 0x00 )
   22212:	7b23      	ldrb	r3, [r4, #12]
   22214:	b163      	cbz	r3, 22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   22216:	7b63      	ldrb	r3, [r4, #13]
   22218:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
		if( pcName[ x ] == ( char ) 0x00 )
   2221c:	7b63      	ldrb	r3, [r4, #13]
   2221e:	b13b      	cbz	r3, 22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   22220:	7ba3      	ldrb	r3, [r4, #14]
   22222:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
		if( pcName[ x ] == ( char ) 0x00 )
   22226:	7ba3      	ldrb	r3, [r4, #14]
   22228:	b113      	cbz	r3, 22230 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   2222a:	7be3      	ldrb	r3, [r4, #15]
   2222c:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   22230:	9c08      	ldr	r4, [sp, #32]
   22232:	2c03      	cmp	r4, #3
   22234:	bf28      	it	cs
   22236:	2403      	movcs	r4, #3
   22238:	f04f 0800 	mov.w	r8, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   2223c:	1d2e      	adds	r6, r5, #4
	pxNewTCB->uxPriority = uxPriority;
   2223e:	62ec      	str	r4, [r5, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   22240:	4630      	mov	r0, r6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   22242:	f885 8043 	strb.w	r8, [r5, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   22246:	f7ff fab1 	bl	217ac <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2224a:	f1c4 0404 	rsb	r4, r4, #4
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   2224e:	f105 0018 	add.w	r0, r5, #24
   22252:	f7ff faab 	bl	217ac <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
   22256:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2225a:	61ac      	str	r4, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   2225c:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   22260:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   22262:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   22264:	464a      	mov	r2, r9
   22266:	4639      	mov	r1, r7
   22268:	4650      	mov	r0, sl
   2226a:	f7fb fb87 	bl	1d97c <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
   2226e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   22270:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
   22272:	b103      	cbz	r3, 22276 <xTaskCreate+0x136>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   22274:	601d      	str	r5, [r3, #0]
	taskENTER_CRITICAL();
   22276:	f7fb fbad 	bl	1d9d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
   2227a:	4a3a      	ldr	r2, [pc, #232]	; (22364 <xTaskCreate+0x224>)
		if( pxCurrentTCB == NULL )
   2227c:	4c3a      	ldr	r4, [pc, #232]	; (22368 <xTaskCreate+0x228>)
		uxCurrentNumberOfTasks++;
   2227e:	6813      	ldr	r3, [r2, #0]
   22280:	3301      	adds	r3, #1
   22282:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   22284:	6823      	ldr	r3, [r4, #0]
   22286:	2b00      	cmp	r3, #0
   22288:	d03f      	beq.n	2230a <xTaskCreate+0x1ca>
			if( xSchedulerRunning == pdFALSE )
   2228a:	4f38      	ldr	r7, [pc, #224]	; (2236c <xTaskCreate+0x22c>)
   2228c:	683b      	ldr	r3, [r7, #0]
   2228e:	2b00      	cmp	r3, #0
   22290:	d034      	beq.n	222fc <xTaskCreate+0x1bc>
		prvAddTaskToReadyList( pxNewTCB );
   22292:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
		uxTaskNumber++;
   22294:	4a36      	ldr	r2, [pc, #216]	; (22370 <xTaskCreate+0x230>)
		prvAddTaskToReadyList( pxNewTCB );
   22296:	4937      	ldr	r1, [pc, #220]	; (22374 <xTaskCreate+0x234>)
		uxTaskNumber++;
   22298:	6813      	ldr	r3, [r2, #0]
   2229a:	3301      	adds	r3, #1
   2229c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
   2229e:	680b      	ldr	r3, [r1, #0]
   222a0:	4283      	cmp	r3, r0
   222a2:	4b35      	ldr	r3, [pc, #212]	; (22378 <xTaskCreate+0x238>)
   222a4:	bf38      	it	cc
   222a6:	6008      	strcc	r0, [r1, #0]
   222a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   222ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   222b0:	4631      	mov	r1, r6
   222b2:	f7ff fa7f 	bl	217b4 <vListInsertEnd>
	taskEXIT_CRITICAL();
   222b6:	f7fb fba7 	bl	1da08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
   222ba:	683b      	ldr	r3, [r7, #0]
   222bc:	b1db      	cbz	r3, 222f6 <xTaskCreate+0x1b6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   222be:	6822      	ldr	r2, [r4, #0]
   222c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   222c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   222c4:	429a      	cmp	r2, r3
   222c6:	d216      	bcs.n	222f6 <xTaskCreate+0x1b6>
			taskYIELD_IF_USING_PREEMPTION();
   222c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   222cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   222d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   222d4:	f3bf 8f4f 	dsb	sy
   222d8:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   222dc:	2001      	movs	r0, #1
   222de:	e001      	b.n	222e4 <xTaskCreate+0x1a4>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   222e0:	f04f 30ff 	mov.w	r0, #4294967295
	}
   222e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( pcName );
   222e8:	e7fe      	b.n	222e8 <xTaskCreate+0x1a8>
					vPortFree( pxStack );
   222ea:	4630      	mov	r0, r6
   222ec:	f7ff f94c 	bl	21588 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   222f0:	f04f 30ff 	mov.w	r0, #4294967295
   222f4:	e7f6      	b.n	222e4 <xTaskCreate+0x1a4>
			xReturn = pdPASS;
   222f6:	2001      	movs	r0, #1
	}
   222f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   222fc:	6823      	ldr	r3, [r4, #0]
   222fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   22300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22302:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
   22304:	bf98      	it	ls
   22306:	6025      	strls	r5, [r4, #0]
   22308:	e7c4      	b.n	22294 <xTaskCreate+0x154>
			pxCurrentTCB = pxNewTCB;
   2230a:	6025      	str	r5, [r4, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   2230c:	6813      	ldr	r3, [r2, #0]
   2230e:	2b01      	cmp	r3, #1
   22310:	d002      	beq.n	22318 <xTaskCreate+0x1d8>
		prvAddTaskToReadyList( pxNewTCB );
   22312:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   22314:	4f15      	ldr	r7, [pc, #84]	; (2236c <xTaskCreate+0x22c>)
   22316:	e7bd      	b.n	22294 <xTaskCreate+0x154>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   22318:	4817      	ldr	r0, [pc, #92]	; (22378 <xTaskCreate+0x238>)
	}

	vListInitialise( &xDelayedTaskList1 );
   2231a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 22398 <xTaskCreate+0x258>
	vListInitialise( &xDelayedTaskList2 );
   2231e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2239c <xTaskCreate+0x25c>
   22322:	4f12      	ldr	r7, [pc, #72]	; (2236c <xTaskCreate+0x22c>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   22324:	f7ff fa36 	bl	21794 <vListInitialise>
   22328:	4814      	ldr	r0, [pc, #80]	; (2237c <xTaskCreate+0x23c>)
   2232a:	f7ff fa33 	bl	21794 <vListInitialise>
   2232e:	4814      	ldr	r0, [pc, #80]	; (22380 <xTaskCreate+0x240>)
   22330:	f7ff fa30 	bl	21794 <vListInitialise>
   22334:	4813      	ldr	r0, [pc, #76]	; (22384 <xTaskCreate+0x244>)
   22336:	f7ff fa2d 	bl	21794 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
   2233a:	4648      	mov	r0, r9
   2233c:	f7ff fa2a 	bl	21794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   22340:	4640      	mov	r0, r8
   22342:	f7ff fa27 	bl	21794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   22346:	4810      	ldr	r0, [pc, #64]	; (22388 <xTaskCreate+0x248>)
   22348:	f7ff fa24 	bl	21794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   2234c:	480f      	ldr	r0, [pc, #60]	; (2238c <xTaskCreate+0x24c>)
   2234e:	f7ff fa21 	bl	21794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   22352:	4b0f      	ldr	r3, [pc, #60]	; (22390 <xTaskCreate+0x250>)
		prvAddTaskToReadyList( pxNewTCB );
   22354:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
   22356:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   2235a:	4b0e      	ldr	r3, [pc, #56]	; (22394 <xTaskCreate+0x254>)
   2235c:	f8c3 8000 	str.w	r8, [r3]
}
   22360:	e798      	b.n	22294 <xTaskCreate+0x154>
   22362:	bf00      	nop
   22364:	1000a194 	.word	0x1000a194
   22368:	1000a138 	.word	0x1000a138
   2236c:	1000a1f0 	.word	0x1000a1f0
   22370:	1000a1a0 	.word	0x1000a1a0
   22374:	1000a1a4 	.word	0x1000a1a4
   22378:	1000a144 	.word	0x1000a144
   2237c:	1000a158 	.word	0x1000a158
   22380:	1000a16c 	.word	0x1000a16c
   22384:	1000a180 	.word	0x1000a180
   22388:	1000a1dc 	.word	0x1000a1dc
   2238c:	1000a1f4 	.word	0x1000a1f4
   22390:	1000a13c 	.word	0x1000a13c
   22394:	1000a140 	.word	0x1000a140
   22398:	1000a1a8 	.word	0x1000a1a8
   2239c:	1000a1bc 	.word	0x1000a1bc

000223a0 <vTaskSuspend>:
	{
   223a0:	b570      	push	{r4, r5, r6, lr}
   223a2:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   223a4:	4e2e      	ldr	r6, [pc, #184]	; (22460 <vTaskSuspend+0xc0>)
		taskENTER_CRITICAL();
   223a6:	f7fb fb15 	bl	1d9d4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   223aa:	2c00      	cmp	r4, #0
   223ac:	d03d      	beq.n	2242a <vTaskSuspend+0x8a>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   223ae:	1d25      	adds	r5, r4, #4
   223b0:	4628      	mov	r0, r5
   223b2:	f7ff fa27 	bl	21804 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   223b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   223b8:	b11b      	cbz	r3, 223c2 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   223ba:	f104 0018 	add.w	r0, r4, #24
   223be:	f7ff fa21 	bl	21804 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   223c2:	4629      	mov	r1, r5
   223c4:	4827      	ldr	r0, [pc, #156]	; (22464 <vTaskSuspend+0xc4>)
		if( xSchedulerRunning != pdFALSE )
   223c6:	4d28      	ldr	r5, [pc, #160]	; (22468 <vTaskSuspend+0xc8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   223c8:	f7ff f9f4 	bl	217b4 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   223cc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   223d0:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   223d2:	bf04      	itt	eq
   223d4:	2300      	moveq	r3, #0
   223d6:	f884 3048 	strbeq.w	r3, [r4, #72]	; 0x48
		taskEXIT_CRITICAL();
   223da:	f7fb fb15 	bl	1da08 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
   223de:	682b      	ldr	r3, [r5, #0]
   223e0:	b9a3      	cbnz	r3, 2240c <vTaskSuspend+0x6c>
		if( pxTCB == pxCurrentTCB )
   223e2:	6833      	ldr	r3, [r6, #0]
   223e4:	42a3      	cmp	r3, r4
   223e6:	d000      	beq.n	223ea <vTaskSuspend+0x4a>
	}
   223e8:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
   223ea:	682b      	ldr	r3, [r5, #0]
   223ec:	b323      	cbz	r3, 22438 <vTaskSuspend+0x98>
				configASSERT( uxSchedulerSuspended == 0 );
   223ee:	4b1f      	ldr	r3, [pc, #124]	; (2246c <vTaskSuspend+0xcc>)
   223f0:	681b      	ldr	r3, [r3, #0]
   223f2:	2b00      	cmp	r3, #0
   223f4:	d12d      	bne.n	22452 <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
   223f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   223fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   223fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   22402:	f3bf 8f4f 	dsb	sy
   22406:	f3bf 8f6f 	isb	sy
	}
   2240a:	bd70      	pop	{r4, r5, r6, pc}
			taskENTER_CRITICAL();
   2240c:	f7fb fae2 	bl	1d9d4 <vPortEnterCritical>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22410:	4b17      	ldr	r3, [pc, #92]	; (22470 <vTaskSuspend+0xd0>)
   22412:	681a      	ldr	r2, [r3, #0]
   22414:	6812      	ldr	r2, [r2, #0]
   22416:	b152      	cbz	r2, 2242e <vTaskSuspend+0x8e>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22418:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   2241a:	4b16      	ldr	r3, [pc, #88]	; (22474 <vTaskSuspend+0xd4>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2241c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   2241e:	68d2      	ldr	r2, [r2, #12]
   22420:	6852      	ldr	r2, [r2, #4]
   22422:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
   22424:	f7fb faf0 	bl	1da08 <vPortExitCritical>
   22428:	e7db      	b.n	223e2 <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   2242a:	6834      	ldr	r4, [r6, #0]
   2242c:	e7bf      	b.n	223ae <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
   2242e:	4b11      	ldr	r3, [pc, #68]	; (22474 <vTaskSuspend+0xd4>)
   22430:	f04f 32ff 	mov.w	r2, #4294967295
   22434:	601a      	str	r2, [r3, #0]
   22436:	e7f5      	b.n	22424 <vTaskSuspend+0x84>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   22438:	490a      	ldr	r1, [pc, #40]	; (22464 <vTaskSuspend+0xc4>)
   2243a:	4a0f      	ldr	r2, [pc, #60]	; (22478 <vTaskSuspend+0xd8>)
   2243c:	6809      	ldr	r1, [r1, #0]
   2243e:	6812      	ldr	r2, [r2, #0]
   22440:	4291      	cmp	r1, r2
   22442:	d007      	beq.n	22454 <vTaskSuspend+0xb4>
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   22444:	4b09      	ldr	r3, [pc, #36]	; (2246c <vTaskSuspend+0xcc>)
   22446:	681b      	ldr	r3, [r3, #0]
   22448:	b133      	cbz	r3, 22458 <vTaskSuspend+0xb8>
		xYieldPending = pdTRUE;
   2244a:	4b0c      	ldr	r3, [pc, #48]	; (2247c <vTaskSuspend+0xdc>)
   2244c:	2201      	movs	r2, #1
   2244e:	601a      	str	r2, [r3, #0]
	}
   22450:	bd70      	pop	{r4, r5, r6, pc}
				configASSERT( uxSchedulerSuspended == 0 );
   22452:	e7fe      	b.n	22452 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
   22454:	6033      	str	r3, [r6, #0]
	}
   22456:	bd70      	pop	{r4, r5, r6, pc}
   22458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2245c:	f7ff be10 	b.w	22080 <vTaskSwitchContext.part.0>
   22460:	1000a138 	.word	0x1000a138
   22464:	1000a1f4 	.word	0x1000a1f4
   22468:	1000a1f0 	.word	0x1000a1f0
   2246c:	1000a19c 	.word	0x1000a19c
   22470:	1000a13c 	.word	0x1000a13c
   22474:	1000a1d4 	.word	0x1000a1d4
   22478:	1000a194 	.word	0x1000a194
   2247c:	1000a20c 	.word	0x1000a20c

00022480 <vTaskStartScheduler>:
{
   22480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   22484:	f44f 6080 	mov.w	r0, #1024	; 0x400
   22488:	f7ff f820 	bl	214cc <pvPortMalloc>
			if( pxStack != NULL )
   2248c:	2800      	cmp	r0, #0
   2248e:	d06d      	beq.n	2256c <vTaskStartScheduler+0xec>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   22490:	4605      	mov	r5, r0
   22492:	204c      	movs	r0, #76	; 0x4c
   22494:	f7ff f81a 	bl	214cc <pvPortMalloc>
				if( pxNewTCB != NULL )
   22498:	4604      	mov	r4, r0
   2249a:	2800      	cmp	r0, #0
   2249c:	d063      	beq.n	22566 <vTaskStartScheduler+0xe6>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   2249e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   224a2:	21a5      	movs	r1, #165	; 0xa5
					pxNewTCB->pxStack = pxStack;
   224a4:	6305      	str	r5, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   224a6:	4628      	mov	r0, r5
   224a8:	f000 ff48 	bl	2333c <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   224ac:	2500      	movs	r5, #0
   224ae:	4b53      	ldr	r3, [pc, #332]	; (225fc <vTaskStartScheduler+0x17c>)
   224b0:	6363      	str	r3, [r4, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   224b2:	1d27      	adds	r7, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   224b4:	6b26      	ldr	r6, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   224b6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   224ba:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   224bc:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
   224c0:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   224c2:	f7ff f973 	bl	217ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   224c6:	f104 0018 	add.w	r0, r4, #24
   224ca:	f7ff f96f 	bl	217ac <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   224ce:	2304      	movs	r3, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   224d0:	f506 707f 	add.w	r0, r6, #1020	; 0x3fc
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   224d4:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
   224d6:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   224d8:	4949      	ldr	r1, [pc, #292]	; (22600 <vTaskStartScheduler+0x180>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   224da:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   224dc:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   224e0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   224e2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   224e4:	f020 0007 	bic.w	r0, r0, #7
   224e8:	f7fb fa48 	bl	1d97c <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   224ec:	4b45      	ldr	r3, [pc, #276]	; (22604 <vTaskStartScheduler+0x184>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   224ee:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   224f0:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   224f2:	f7fb fa6f 	bl	1d9d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
   224f6:	4a44      	ldr	r2, [pc, #272]	; (22608 <vTaskStartScheduler+0x188>)
		if( pxCurrentTCB == NULL )
   224f8:	4d44      	ldr	r5, [pc, #272]	; (2260c <vTaskStartScheduler+0x18c>)
		uxCurrentNumberOfTasks++;
   224fa:	6813      	ldr	r3, [r2, #0]
   224fc:	3301      	adds	r3, #1
   224fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   22500:	682b      	ldr	r3, [r5, #0]
   22502:	2b00      	cmp	r3, #0
   22504:	d04e      	beq.n	225a4 <vTaskStartScheduler+0x124>
			if( xSchedulerRunning == pdFALSE )
   22506:	4e42      	ldr	r6, [pc, #264]	; (22610 <vTaskStartScheduler+0x190>)
   22508:	6833      	ldr	r3, [r6, #0]
   2250a:	b383      	cbz	r3, 2256e <vTaskStartScheduler+0xee>
		prvAddTaskToReadyList( pxNewTCB );
   2250c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
		uxTaskNumber++;
   2250e:	4a41      	ldr	r2, [pc, #260]	; (22614 <vTaskStartScheduler+0x194>)
		prvAddTaskToReadyList( pxNewTCB );
   22510:	4941      	ldr	r1, [pc, #260]	; (22618 <vTaskStartScheduler+0x198>)
		uxTaskNumber++;
   22512:	6813      	ldr	r3, [r2, #0]
   22514:	3301      	adds	r3, #1
   22516:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
   22518:	680b      	ldr	r3, [r1, #0]
   2251a:	4298      	cmp	r0, r3
   2251c:	d900      	bls.n	22520 <vTaskStartScheduler+0xa0>
   2251e:	6008      	str	r0, [r1, #0]
   22520:	4b3e      	ldr	r3, [pc, #248]	; (2261c <vTaskStartScheduler+0x19c>)
   22522:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   22526:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2252a:	4639      	mov	r1, r7
   2252c:	f7ff f942 	bl	217b4 <vListInsertEnd>
	taskEXIT_CRITICAL();
   22530:	f7fb fa6a 	bl	1da08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
   22534:	6833      	ldr	r3, [r6, #0]
   22536:	b173      	cbz	r3, 22556 <vTaskStartScheduler+0xd6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   22538:	682a      	ldr	r2, [r5, #0]
   2253a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2253c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   2253e:	429a      	cmp	r2, r3
   22540:	d209      	bcs.n	22556 <vTaskStartScheduler+0xd6>
			taskYIELD_IF_USING_PREEMPTION();
   22542:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   22546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2254a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   2254e:	f3bf 8f4f 	dsb	sy
   22552:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
   22556:	f000 fd63 	bl	23020 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
   2255a:	2801      	cmp	r0, #1
   2255c:	d00e      	beq.n	2257c <vTaskStartScheduler+0xfc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   2255e:	3001      	adds	r0, #1
   22560:	d004      	beq.n	2256c <vTaskStartScheduler+0xec>
}
   22562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
   22566:	4628      	mov	r0, r5
   22568:	f7ff f80e 	bl	21588 <vPortFree>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   2256c:	e7fe      	b.n	2256c <vTaskStartScheduler+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   2256e:	682b      	ldr	r3, [r5, #0]
   22570:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   22572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22574:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
   22576:	bf98      	it	ls
   22578:	602c      	strls	r4, [r5, #0]
   2257a:	e7c8      	b.n	2250e <vTaskStartScheduler+0x8e>
	__asm volatile
   2257c:	f04f 0380 	mov.w	r3, #128	; 0x80
   22580:	f383 8811 	msr	BASEPRI, r3
   22584:	f3bf 8f6f 	isb	sy
   22588:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   2258c:	4a24      	ldr	r2, [pc, #144]	; (22620 <vTaskStartScheduler+0x1a0>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   2258e:	4b25      	ldr	r3, [pc, #148]	; (22624 <vTaskStartScheduler+0x1a4>)
		xNextTaskUnblockTime = portMAX_DELAY;
   22590:	f04f 31ff 	mov.w	r1, #4294967295
   22594:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   22596:	2200      	movs	r2, #0
		xSchedulerRunning = pdTRUE;
   22598:	6030      	str	r0, [r6, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   2259a:	601a      	str	r2, [r3, #0]
}
   2259c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
   225a0:	f7fb bba8 	b.w	1dcf4 <xPortStartScheduler>
			pxCurrentTCB = pxNewTCB;
   225a4:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   225a6:	6813      	ldr	r3, [r2, #0]
   225a8:	2b01      	cmp	r3, #1
   225aa:	d002      	beq.n	225b2 <vTaskStartScheduler+0x132>
		prvAddTaskToReadyList( pxNewTCB );
   225ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   225ae:	4e18      	ldr	r6, [pc, #96]	; (22610 <vTaskStartScheduler+0x190>)
   225b0:	e7ad      	b.n	2250e <vTaskStartScheduler+0x8e>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   225b2:	481a      	ldr	r0, [pc, #104]	; (2261c <vTaskStartScheduler+0x19c>)
	vListInitialise( &xDelayedTaskList1 );
   225b4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 22644 <vTaskStartScheduler+0x1c4>
	vListInitialise( &xDelayedTaskList2 );
   225b8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 22648 <vTaskStartScheduler+0x1c8>
   225bc:	4e14      	ldr	r6, [pc, #80]	; (22610 <vTaskStartScheduler+0x190>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   225be:	f7ff f8e9 	bl	21794 <vListInitialise>
   225c2:	4819      	ldr	r0, [pc, #100]	; (22628 <vTaskStartScheduler+0x1a8>)
   225c4:	f7ff f8e6 	bl	21794 <vListInitialise>
   225c8:	4818      	ldr	r0, [pc, #96]	; (2262c <vTaskStartScheduler+0x1ac>)
   225ca:	f7ff f8e3 	bl	21794 <vListInitialise>
   225ce:	4818      	ldr	r0, [pc, #96]	; (22630 <vTaskStartScheduler+0x1b0>)
   225d0:	f7ff f8e0 	bl	21794 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
   225d4:	4640      	mov	r0, r8
   225d6:	f7ff f8dd 	bl	21794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   225da:	4648      	mov	r0, r9
   225dc:	f7ff f8da 	bl	21794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   225e0:	4814      	ldr	r0, [pc, #80]	; (22634 <vTaskStartScheduler+0x1b4>)
   225e2:	f7ff f8d7 	bl	21794 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
   225e6:	4814      	ldr	r0, [pc, #80]	; (22638 <vTaskStartScheduler+0x1b8>)
   225e8:	f7ff f8d4 	bl	21794 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
   225ec:	4a13      	ldr	r2, [pc, #76]	; (2263c <vTaskStartScheduler+0x1bc>)
		prvAddTaskToReadyList( pxNewTCB );
   225ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
   225f0:	f8c2 8000 	str.w	r8, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   225f4:	4a12      	ldr	r2, [pc, #72]	; (22640 <vTaskStartScheduler+0x1c0>)
   225f6:	f8c2 9000 	str.w	r9, [r2]
}
   225fa:	e788      	b.n	2250e <vTaskStartScheduler+0x8e>
   225fc:	454c4449 	.word	0x454c4449
   22600:	000228ed 	.word	0x000228ed
   22604:	1000a1d0 	.word	0x1000a1d0
   22608:	1000a194 	.word	0x1000a194
   2260c:	1000a138 	.word	0x1000a138
   22610:	1000a1f0 	.word	0x1000a1f0
   22614:	1000a1a0 	.word	0x1000a1a0
   22618:	1000a1a4 	.word	0x1000a1a4
   2261c:	1000a144 	.word	0x1000a144
   22620:	1000a1d4 	.word	0x1000a1d4
   22624:	1000a208 	.word	0x1000a208
   22628:	1000a158 	.word	0x1000a158
   2262c:	1000a16c 	.word	0x1000a16c
   22630:	1000a180 	.word	0x1000a180
   22634:	1000a1dc 	.word	0x1000a1dc
   22638:	1000a1f4 	.word	0x1000a1f4
   2263c:	1000a13c 	.word	0x1000a13c
   22640:	1000a140 	.word	0x1000a140
   22644:	1000a1a8 	.word	0x1000a1a8
   22648:	1000a1bc 	.word	0x1000a1bc

0002264c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   2264c:	4a02      	ldr	r2, [pc, #8]	; (22658 <vTaskSuspendAll+0xc>)
   2264e:	6813      	ldr	r3, [r2, #0]
   22650:	3301      	adds	r3, #1
   22652:	6013      	str	r3, [r2, #0]
}
   22654:	4770      	bx	lr
   22656:	bf00      	nop
   22658:	1000a19c 	.word	0x1000a19c

0002265c <xTaskGetTickCount>:
		xTicks = xTickCount;
   2265c:	4b01      	ldr	r3, [pc, #4]	; (22664 <xTaskGetTickCount+0x8>)
   2265e:	6818      	ldr	r0, [r3, #0]
}
   22660:	4770      	bx	lr
   22662:	bf00      	nop
   22664:	1000a208 	.word	0x1000a208

00022668 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   22668:	4a05      	ldr	r2, [pc, #20]	; (22680 <vTaskStepTick+0x18>)
   2266a:	4906      	ldr	r1, [pc, #24]	; (22684 <vTaskStepTick+0x1c>)
   2266c:	6813      	ldr	r3, [r2, #0]
   2266e:	6809      	ldr	r1, [r1, #0]
   22670:	4403      	add	r3, r0
   22672:	428b      	cmp	r3, r1
   22674:	d803      	bhi.n	2267e <vTaskStepTick+0x16>
		xTickCount += xTicksToJump;
   22676:	6813      	ldr	r3, [r2, #0]
   22678:	4418      	add	r0, r3
   2267a:	6010      	str	r0, [r2, #0]
	}
   2267c:	4770      	bx	lr
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   2267e:	e7fe      	b.n	2267e <vTaskStepTick+0x16>
   22680:	1000a208 	.word	0x1000a208
   22684:	1000a1d4 	.word	0x1000a1d4

00022688 <xTaskIncrementTick>:
{
   22688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   2268c:	4b40      	ldr	r3, [pc, #256]	; (22790 <xTaskIncrementTick+0x108>)
   2268e:	681b      	ldr	r3, [r3, #0]
{
   22690:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22692:	2b00      	cmp	r3, #0
   22694:	d146      	bne.n	22724 <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   22696:	4b3f      	ldr	r3, [pc, #252]	; (22794 <xTaskIncrementTick+0x10c>)
   22698:	681e      	ldr	r6, [r3, #0]
   2269a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
   2269c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   2269e:	2e00      	cmp	r6, #0
   226a0:	d04e      	beq.n	22740 <xTaskIncrementTick+0xb8>
   226a2:	f8df b108 	ldr.w	fp, [pc, #264]	; 227ac <xTaskIncrementTick+0x124>
		if( xConstTickCount >= xNextTaskUnblockTime )
   226a6:	f8db 3000 	ldr.w	r3, [fp]
   226aa:	42b3      	cmp	r3, r6
   226ac:	d860      	bhi.n	22770 <xTaskIncrementTick+0xe8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   226ae:	4f3a      	ldr	r7, [pc, #232]	; (22798 <xTaskIncrementTick+0x110>)
   226b0:	683b      	ldr	r3, [r7, #0]
   226b2:	681d      	ldr	r5, [r3, #0]
   226b4:	2d00      	cmp	r5, #0
   226b6:	d05d      	beq.n	22774 <xTaskIncrementTick+0xec>
					prvAddTaskToReadyList( pxTCB );
   226b8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 227b0 <xTaskIncrementTick+0x128>
   226bc:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 227b4 <xTaskIncrementTick+0x12c>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   226c0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 227b8 <xTaskIncrementTick+0x130>
BaseType_t xSwitchRequired = pdFALSE;
   226c4:	2500      	movs	r5, #0
   226c6:	e022      	b.n	2270e <xTaskIncrementTick+0x86>
   226c8:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   226ca:	f7ff f89b 	bl	21804 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   226ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   226d0:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   226d2:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   226d6:	b113      	cbz	r3, 226de <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   226d8:	f7ff f894 	bl	21804 <uxListRemove>
   226dc:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
   226de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   226e0:	f8d8 3000 	ldr.w	r3, [r8]
   226e4:	4298      	cmp	r0, r3
   226e6:	bf88      	it	hi
   226e8:	f8c8 0000 	strhi.w	r0, [r8]
   226ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   226f0:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
   226f4:	f7ff f85e 	bl	217b4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   226f8:	f8d9 3000 	ldr.w	r3, [r9]
   226fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   226fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   22700:	429a      	cmp	r2, r3
   22702:	bf28      	it	cs
   22704:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22706:	683b      	ldr	r3, [r7, #0]
   22708:	681b      	ldr	r3, [r3, #0]
   2270a:	2b00      	cmp	r3, #0
   2270c:	d032      	beq.n	22774 <xTaskIncrementTick+0xec>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2270e:	683b      	ldr	r3, [r7, #0]
   22710:	68db      	ldr	r3, [r3, #12]
   22712:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   22714:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   22716:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
   22718:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   2271a:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
   2271c:	d2d4      	bcs.n	226c8 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
   2271e:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   22722:	e004      	b.n	2272e <xTaskIncrementTick+0xa6>
		++uxPendedTicks;
   22724:	4a1d      	ldr	r2, [pc, #116]	; (2279c <xTaskIncrementTick+0x114>)
   22726:	6813      	ldr	r3, [r2, #0]
   22728:	3301      	adds	r3, #1
BaseType_t xSwitchRequired = pdFALSE;
   2272a:	2500      	movs	r5, #0
		++uxPendedTicks;
   2272c:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
   2272e:	4b1c      	ldr	r3, [pc, #112]	; (227a0 <xTaskIncrementTick+0x118>)
   22730:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   22732:	2b00      	cmp	r3, #0
}
   22734:	bf0c      	ite	eq
   22736:	4628      	moveq	r0, r5
   22738:	2001      	movne	r0, #1
   2273a:	b003      	add	sp, #12
   2273c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
   22740:	4b15      	ldr	r3, [pc, #84]	; (22798 <xTaskIncrementTick+0x110>)
   22742:	681a      	ldr	r2, [r3, #0]
   22744:	6812      	ldr	r2, [r2, #0]
   22746:	b992      	cbnz	r2, 2276e <xTaskIncrementTick+0xe6>
   22748:	4a16      	ldr	r2, [pc, #88]	; (227a4 <xTaskIncrementTick+0x11c>)
   2274a:	6818      	ldr	r0, [r3, #0]
   2274c:	6811      	ldr	r1, [r2, #0]
   2274e:	6019      	str	r1, [r3, #0]
   22750:	4915      	ldr	r1, [pc, #84]	; (227a8 <xTaskIncrementTick+0x120>)
   22752:	6010      	str	r0, [r2, #0]
   22754:	680a      	ldr	r2, [r1, #0]
   22756:	3201      	adds	r2, #1
   22758:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2275a:	681a      	ldr	r2, [r3, #0]
   2275c:	6812      	ldr	r2, [r2, #0]
   2275e:	b972      	cbnz	r2, 2277e <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
   22760:	f8df b048 	ldr.w	fp, [pc, #72]	; 227ac <xTaskIncrementTick+0x124>
   22764:	f04f 33ff 	mov.w	r3, #4294967295
   22768:	f8cb 3000 	str.w	r3, [fp]
   2276c:	e79b      	b.n	226a6 <xTaskIncrementTick+0x1e>
			taskSWITCH_DELAYED_LISTS();
   2276e:	e7fe      	b.n	2276e <xTaskIncrementTick+0xe6>
BaseType_t xSwitchRequired = pdFALSE;
   22770:	2500      	movs	r5, #0
   22772:	e7dc      	b.n	2272e <xTaskIncrementTick+0xa6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   22774:	f04f 33ff 	mov.w	r3, #4294967295
   22778:	f8cb 3000 	str.w	r3, [fp]
					break;
   2277c:	e7d7      	b.n	2272e <xTaskIncrementTick+0xa6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2277e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   22780:	f8df b028 	ldr.w	fp, [pc, #40]	; 227ac <xTaskIncrementTick+0x124>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22784:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   22786:	68db      	ldr	r3, [r3, #12]
   22788:	685b      	ldr	r3, [r3, #4]
   2278a:	f8cb 3000 	str.w	r3, [fp]
	}
}
   2278e:	e78a      	b.n	226a6 <xTaskIncrementTick+0x1e>
   22790:	1000a19c 	.word	0x1000a19c
   22794:	1000a208 	.word	0x1000a208
   22798:	1000a13c 	.word	0x1000a13c
   2279c:	1000a198 	.word	0x1000a198
   227a0:	1000a20c 	.word	0x1000a20c
   227a4:	1000a140 	.word	0x1000a140
   227a8:	1000a1d8 	.word	0x1000a1d8
   227ac:	1000a1d4 	.word	0x1000a1d4
   227b0:	1000a1a4 	.word	0x1000a1a4
   227b4:	1000a144 	.word	0x1000a144
   227b8:	1000a138 	.word	0x1000a138

000227bc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
   227bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227c0:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
   227c2:	f7fb f907 	bl	1d9d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
   227c6:	4b3b      	ldr	r3, [pc, #236]	; (228b4 <xTaskResumeAll.part.0+0xf8>)
   227c8:	681a      	ldr	r2, [r3, #0]
   227ca:	3a01      	subs	r2, #1
   227cc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   227ce:	681b      	ldr	r3, [r3, #0]
   227d0:	2b00      	cmp	r3, #0
   227d2:	d156      	bne.n	22882 <xTaskResumeAll.part.0+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   227d4:	4b38      	ldr	r3, [pc, #224]	; (228b8 <xTaskResumeAll.part.0+0xfc>)
   227d6:	681b      	ldr	r3, [r3, #0]
   227d8:	2b00      	cmp	r3, #0
   227da:	d052      	beq.n	22882 <xTaskResumeAll.part.0+0xc6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   227dc:	4d37      	ldr	r5, [pc, #220]	; (228bc <xTaskResumeAll.part.0+0x100>)
   227de:	682b      	ldr	r3, [r5, #0]
   227e0:	2b00      	cmp	r3, #0
   227e2:	d063      	beq.n	228ac <xTaskResumeAll.part.0+0xf0>
   227e4:	4e36      	ldr	r6, [pc, #216]	; (228c0 <xTaskResumeAll.part.0+0x104>)
   227e6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 228d4 <xTaskResumeAll.part.0+0x118>
   227ea:	4f36      	ldr	r7, [pc, #216]	; (228c4 <xTaskResumeAll.part.0+0x108>)
   227ec:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 228d8 <xTaskResumeAll.part.0+0x11c>
						xYieldPending = pdTRUE;
   227f0:	f04f 0a01 	mov.w	sl, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   227f4:	68eb      	ldr	r3, [r5, #12]
   227f6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   227f8:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   227fc:	f104 0018 	add.w	r0, r4, #24
   22800:	f7ff f800 	bl	21804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   22804:	4658      	mov	r0, fp
   22806:	f7fe fffd 	bl	21804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   2280a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2280c:	6832      	ldr	r2, [r6, #0]
   2280e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   22812:	4293      	cmp	r3, r2
   22814:	4659      	mov	r1, fp
   22816:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   2281a:	bf88      	it	hi
   2281c:	6033      	strhi	r3, [r6, #0]
   2281e:	f7fe ffc9 	bl	217b4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   22822:	683b      	ldr	r3, [r7, #0]
   22824:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   22826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22828:	429a      	cmp	r2, r3
   2282a:	d332      	bcc.n	22892 <xTaskResumeAll.part.0+0xd6>
						xYieldPending = pdTRUE;
   2282c:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   22830:	682b      	ldr	r3, [r5, #0]
   22832:	2b00      	cmp	r3, #0
   22834:	d1de      	bne.n	227f4 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22836:	4b24      	ldr	r3, [pc, #144]	; (228c8 <xTaskResumeAll.part.0+0x10c>)
   22838:	681a      	ldr	r2, [r3, #0]
   2283a:	6812      	ldr	r2, [r2, #0]
   2283c:	2a00      	cmp	r2, #0
   2283e:	d030      	beq.n	228a2 <xTaskResumeAll.part.0+0xe6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22840:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   22842:	4b22      	ldr	r3, [pc, #136]	; (228cc <xTaskResumeAll.part.0+0x110>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22844:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   22846:	68d2      	ldr	r2, [r2, #12]
   22848:	6852      	ldr	r2, [r2, #4]
   2284a:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   2284c:	4e20      	ldr	r6, [pc, #128]	; (228d0 <xTaskResumeAll.part.0+0x114>)
   2284e:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   22850:	b144      	cbz	r4, 22864 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
   22852:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
   22854:	f7ff ff18 	bl	22688 <xTaskIncrementTick>
   22858:	b108      	cbz	r0, 2285e <xTaskResumeAll.part.0+0xa2>
								xYieldPending = pdTRUE;
   2285a:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   2285e:	3c01      	subs	r4, #1
   22860:	d1f8      	bne.n	22854 <xTaskResumeAll.part.0+0x98>
						uxPendedTicks = 0;
   22862:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
   22864:	f8d9 3000 	ldr.w	r3, [r9]
   22868:	b15b      	cbz	r3, 22882 <xTaskResumeAll.part.0+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
   2286a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   2286e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22872:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   22876:	f3bf 8f4f 	dsb	sy
   2287a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   2287e:	2001      	movs	r0, #1
   22880:	e000      	b.n	22884 <xTaskResumeAll.part.0+0xc8>
BaseType_t xAlreadyYielded = pdFALSE;
   22882:	2000      	movs	r0, #0
   22884:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
   22886:	f7fb f8bf 	bl	1da08 <vPortExitCritical>
}
   2288a:	9801      	ldr	r0, [sp, #4]
   2288c:	b003      	add	sp, #12
   2288e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   22892:	682b      	ldr	r3, [r5, #0]
   22894:	2b00      	cmp	r3, #0
   22896:	d1ad      	bne.n	227f4 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22898:	4b0b      	ldr	r3, [pc, #44]	; (228c8 <xTaskResumeAll.part.0+0x10c>)
   2289a:	681a      	ldr	r2, [r3, #0]
   2289c:	6812      	ldr	r2, [r2, #0]
   2289e:	2a00      	cmp	r2, #0
   228a0:	d1ce      	bne.n	22840 <xTaskResumeAll.part.0+0x84>
		xNextTaskUnblockTime = portMAX_DELAY;
   228a2:	4b0a      	ldr	r3, [pc, #40]	; (228cc <xTaskResumeAll.part.0+0x110>)
   228a4:	f04f 32ff 	mov.w	r2, #4294967295
   228a8:	601a      	str	r2, [r3, #0]
   228aa:	e7cf      	b.n	2284c <xTaskResumeAll.part.0+0x90>
   228ac:	f8df 9028 	ldr.w	r9, [pc, #40]	; 228d8 <xTaskResumeAll.part.0+0x11c>
   228b0:	e7cc      	b.n	2284c <xTaskResumeAll.part.0+0x90>
   228b2:	bf00      	nop
   228b4:	1000a19c 	.word	0x1000a19c
   228b8:	1000a194 	.word	0x1000a194
   228bc:	1000a1dc 	.word	0x1000a1dc
   228c0:	1000a1a4 	.word	0x1000a1a4
   228c4:	1000a138 	.word	0x1000a138
   228c8:	1000a13c 	.word	0x1000a13c
   228cc:	1000a1d4 	.word	0x1000a1d4
   228d0:	1000a198 	.word	0x1000a198
   228d4:	1000a144 	.word	0x1000a144
   228d8:	1000a20c 	.word	0x1000a20c

000228dc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   228dc:	4b02      	ldr	r3, [pc, #8]	; (228e8 <xTaskResumeAll+0xc>)
   228de:	681b      	ldr	r3, [r3, #0]
   228e0:	b903      	cbnz	r3, 228e4 <xTaskResumeAll+0x8>
   228e2:	e7fe      	b.n	228e2 <xTaskResumeAll+0x6>
   228e4:	f7ff bf6a 	b.w	227bc <xTaskResumeAll.part.0>
   228e8:	1000a19c 	.word	0x1000a19c

000228ec <prvIdleTask>:
{
   228ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228f0:	4c2b      	ldr	r4, [pc, #172]	; (229a0 <prvIdleTask+0xb4>)
   228f2:	4e2c      	ldr	r6, [pc, #176]	; (229a4 <prvIdleTask+0xb8>)
   228f4:	4d2c      	ldr	r5, [pc, #176]	; (229a8 <prvIdleTask+0xbc>)
   228f6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 229ac <prvIdleTask+0xc0>
   228fa:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 229b0 <prvIdleTask+0xc4>
   228fe:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 229b4 <prvIdleTask+0xc8>
				taskYIELD();
   22902:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
   22906:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   2290a:	6823      	ldr	r3, [r4, #0]
   2290c:	2b01      	cmp	r3, #1
   2290e:	d905      	bls.n	2291c <prvIdleTask+0x30>
				taskYIELD();
   22910:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
   22914:	f3bf 8f4f 	dsb	sy
   22918:	f3bf 8f6f 	isb	sy
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   2291c:	6833      	ldr	r3, [r6, #0]
   2291e:	bb13      	cbnz	r3, 22966 <prvIdleTask+0x7a>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   22920:	682b      	ldr	r3, [r5, #0]
   22922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22924:	2b00      	cmp	r3, #0
   22926:	d1f0      	bne.n	2290a <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   22928:	6823      	ldr	r3, [r4, #0]
   2292a:	2b01      	cmp	r3, #1
   2292c:	d8ed      	bhi.n	2290a <prvIdleTask+0x1e>
			xReturn = xNextTaskUnblockTime - xTickCount;
   2292e:	f8db 3000 	ldr.w	r3, [fp]
   22932:	f8da 2000 	ldr.w	r2, [sl]
   22936:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   22938:	2b01      	cmp	r3, #1
   2293a:	d9e6      	bls.n	2290a <prvIdleTask+0x1e>
	++uxSchedulerSuspended;
   2293c:	f8d9 3000 	ldr.w	r3, [r9]
   22940:	3301      	adds	r3, #1
   22942:	f8c9 3000 	str.w	r3, [r9]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   22946:	f8db 2000 	ldr.w	r2, [fp]
   2294a:	f8da 3000 	ldr.w	r3, [sl]
   2294e:	429a      	cmp	r2, r3
   22950:	d308      	bcc.n	22964 <prvIdleTask+0x78>
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   22952:	6833      	ldr	r3, [r6, #0]
   22954:	b16b      	cbz	r3, 22972 <prvIdleTask+0x86>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   22956:	682b      	ldr	r3, [r5, #0]
   22958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2295a:	b1f3      	cbz	r3, 2299a <prvIdleTask+0xae>
	configASSERT( uxSchedulerSuspended );
   2295c:	f8d9 3000 	ldr.w	r3, [r9]
   22960:	b9c3      	cbnz	r3, 22994 <prvIdleTask+0xa8>
   22962:	e7fe      	b.n	22962 <prvIdleTask+0x76>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   22964:	e7fe      	b.n	22964 <prvIdleTask+0x78>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   22966:	682b      	ldr	r3, [r5, #0]
   22968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2296a:	2b00      	cmp	r3, #0
   2296c:	d1cd      	bne.n	2290a <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   2296e:	6823      	ldr	r3, [r4, #0]
   22970:	e7cb      	b.n	2290a <prvIdleTask+0x1e>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   22972:	682b      	ldr	r3, [r5, #0]
   22974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22976:	2b00      	cmp	r3, #0
   22978:	d1f0      	bne.n	2295c <prvIdleTask+0x70>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   2297a:	6823      	ldr	r3, [r4, #0]
   2297c:	2b01      	cmp	r3, #1
   2297e:	d8ed      	bhi.n	2295c <prvIdleTask+0x70>
			xReturn = xNextTaskUnblockTime - xTickCount;
   22980:	f8db 0000 	ldr.w	r0, [fp]
   22984:	f8da 3000 	ldr.w	r3, [sl]
   22988:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   2298a:	2801      	cmp	r0, #1
   2298c:	d9e6      	bls.n	2295c <prvIdleTask+0x70>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   2298e:	f7fb f8ad 	bl	1daec <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
   22992:	e7e3      	b.n	2295c <prvIdleTask+0x70>
   22994:	f7ff ff12 	bl	227bc <xTaskResumeAll.part.0>
   22998:	e7b7      	b.n	2290a <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   2299a:	6823      	ldr	r3, [r4, #0]
   2299c:	e7de      	b.n	2295c <prvIdleTask+0x70>
   2299e:	bf00      	nop
   229a0:	1000a144 	.word	0x1000a144
   229a4:	1000a1a4 	.word	0x1000a1a4
   229a8:	1000a138 	.word	0x1000a138
   229ac:	1000a1d4 	.word	0x1000a1d4
   229b0:	1000a208 	.word	0x1000a208
   229b4:	1000a19c 	.word	0x1000a19c

000229b8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   229b8:	4b04      	ldr	r3, [pc, #16]	; (229cc <vTaskSwitchContext+0x14>)
   229ba:	681b      	ldr	r3, [r3, #0]
   229bc:	b11b      	cbz	r3, 229c6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
   229be:	4b04      	ldr	r3, [pc, #16]	; (229d0 <vTaskSwitchContext+0x18>)
   229c0:	2201      	movs	r2, #1
   229c2:	601a      	str	r2, [r3, #0]
}
   229c4:	4770      	bx	lr
   229c6:	f7ff bb5b 	b.w	22080 <vTaskSwitchContext.part.0>
   229ca:	bf00      	nop
   229cc:	1000a19c 	.word	0x1000a19c
   229d0:	1000a20c 	.word	0x1000a20c

000229d4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   229d4:	b1d0      	cbz	r0, 22a0c <vTaskPlaceOnEventList+0x38>
{
   229d6:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   229d8:	4d16      	ldr	r5, [pc, #88]	; (22a34 <vTaskPlaceOnEventList+0x60>)
   229da:	460c      	mov	r4, r1
   229dc:	6829      	ldr	r1, [r5, #0]
   229de:	3118      	adds	r1, #24
   229e0:	f7fe fef8 	bl	217d4 <vListInsert>


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   229e4:	4b14      	ldr	r3, [pc, #80]	; (22a38 <vTaskPlaceOnEventList+0x64>)
   229e6:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   229e8:	6828      	ldr	r0, [r5, #0]
   229ea:	3004      	adds	r0, #4
   229ec:	f7fe ff0a 	bl	21804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   229f0:	1c63      	adds	r3, r4, #1
   229f2:	d00c      	beq.n	22a0e <vTaskPlaceOnEventList+0x3a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   229f4:	682b      	ldr	r3, [r5, #0]
   229f6:	19a4      	adds	r4, r4, r6
   229f8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   229fa:	d30f      	bcc.n	22a1c <vTaskPlaceOnEventList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   229fc:	4b0f      	ldr	r3, [pc, #60]	; (22a3c <vTaskPlaceOnEventList+0x68>)
   229fe:	6818      	ldr	r0, [r3, #0]
   22a00:	6829      	ldr	r1, [r5, #0]
}
   22a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22a06:	3104      	adds	r1, #4
   22a08:	f7fe bee4 	b.w	217d4 <vListInsert>
	configASSERT( pxEventList );
   22a0c:	e7fe      	b.n	22a0c <vTaskPlaceOnEventList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22a0e:	6829      	ldr	r1, [r5, #0]
   22a10:	480b      	ldr	r0, [pc, #44]	; (22a40 <vTaskPlaceOnEventList+0x6c>)
}
   22a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22a16:	3104      	adds	r1, #4
   22a18:	f7fe becc 	b.w	217b4 <vListInsertEnd>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22a1c:	4b09      	ldr	r3, [pc, #36]	; (22a44 <vTaskPlaceOnEventList+0x70>)
   22a1e:	6818      	ldr	r0, [r3, #0]
   22a20:	6829      	ldr	r1, [r5, #0]
   22a22:	3104      	adds	r1, #4
   22a24:	f7fe fed6 	bl	217d4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   22a28:	4b07      	ldr	r3, [pc, #28]	; (22a48 <vTaskPlaceOnEventList+0x74>)
   22a2a:	681a      	ldr	r2, [r3, #0]
   22a2c:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
   22a2e:	bf38      	it	cc
   22a30:	601c      	strcc	r4, [r3, #0]
}
   22a32:	bd70      	pop	{r4, r5, r6, pc}
   22a34:	1000a138 	.word	0x1000a138
   22a38:	1000a208 	.word	0x1000a208
   22a3c:	1000a140 	.word	0x1000a140
   22a40:	1000a1f4 	.word	0x1000a1f4
   22a44:	1000a13c 	.word	0x1000a13c
   22a48:	1000a1d4 	.word	0x1000a1d4

00022a4c <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
   22a4c:	b118      	cbz	r0, 22a56 <vTaskPlaceOnUnorderedEventList+0xa>
	configASSERT( uxSchedulerSuspended != 0 );
   22a4e:	4b1b      	ldr	r3, [pc, #108]	; (22abc <vTaskPlaceOnUnorderedEventList+0x70>)
   22a50:	681b      	ldr	r3, [r3, #0]
   22a52:	b90b      	cbnz	r3, 22a58 <vTaskPlaceOnUnorderedEventList+0xc>
   22a54:	e7fe      	b.n	22a54 <vTaskPlaceOnUnorderedEventList+0x8>
	configASSERT( pxEventList );
   22a56:	e7fe      	b.n	22a56 <vTaskPlaceOnUnorderedEventList+0xa>
{
   22a58:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   22a5a:	4d19      	ldr	r5, [pc, #100]	; (22ac0 <vTaskPlaceOnUnorderedEventList+0x74>)
   22a5c:	682b      	ldr	r3, [r5, #0]
   22a5e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   22a62:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   22a64:	6829      	ldr	r1, [r5, #0]
   22a66:	3118      	adds	r1, #24
   22a68:	4614      	mov	r4, r2
   22a6a:	f7fe fea3 	bl	217b4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
   22a6e:	4b15      	ldr	r3, [pc, #84]	; (22ac4 <vTaskPlaceOnUnorderedEventList+0x78>)
   22a70:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   22a72:	6828      	ldr	r0, [r5, #0]
   22a74:	3004      	adds	r0, #4
   22a76:	f7fe fec5 	bl	21804 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   22a7a:	1c63      	adds	r3, r4, #1
   22a7c:	d00b      	beq.n	22a96 <vTaskPlaceOnUnorderedEventList+0x4a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   22a7e:	682b      	ldr	r3, [r5, #0]
   22a80:	19a4      	adds	r4, r4, r6
   22a82:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   22a84:	d30e      	bcc.n	22aa4 <vTaskPlaceOnUnorderedEventList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22a86:	4b10      	ldr	r3, [pc, #64]	; (22ac8 <vTaskPlaceOnUnorderedEventList+0x7c>)
   22a88:	6818      	ldr	r0, [r3, #0]
   22a8a:	6829      	ldr	r1, [r5, #0]
}
   22a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22a90:	3104      	adds	r1, #4
   22a92:	f7fe be9f 	b.w	217d4 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22a96:	6829      	ldr	r1, [r5, #0]
   22a98:	480c      	ldr	r0, [pc, #48]	; (22acc <vTaskPlaceOnUnorderedEventList+0x80>)
}
   22a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22a9e:	3104      	adds	r1, #4
   22aa0:	f7fe be88 	b.w	217b4 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22aa4:	4b0a      	ldr	r3, [pc, #40]	; (22ad0 <vTaskPlaceOnUnorderedEventList+0x84>)
   22aa6:	6818      	ldr	r0, [r3, #0]
   22aa8:	6829      	ldr	r1, [r5, #0]
   22aaa:	3104      	adds	r1, #4
   22aac:	f7fe fe92 	bl	217d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   22ab0:	4b08      	ldr	r3, [pc, #32]	; (22ad4 <vTaskPlaceOnUnorderedEventList+0x88>)
   22ab2:	681a      	ldr	r2, [r3, #0]
   22ab4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
   22ab6:	bf38      	it	cc
   22ab8:	601c      	strcc	r4, [r3, #0]
}
   22aba:	bd70      	pop	{r4, r5, r6, pc}
   22abc:	1000a19c 	.word	0x1000a19c
   22ac0:	1000a138 	.word	0x1000a138
   22ac4:	1000a208 	.word	0x1000a208
   22ac8:	1000a140 	.word	0x1000a140
   22acc:	1000a1f4 	.word	0x1000a1f4
   22ad0:	1000a13c 	.word	0x1000a13c
   22ad4:	1000a1d4 	.word	0x1000a1d4

00022ad8 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
   22ad8:	b1d0      	cbz	r0, 22b10 <vTaskPlaceOnEventListRestricted+0x38>
	{
   22ada:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   22adc:	4e19      	ldr	r6, [pc, #100]	; (22b44 <vTaskPlaceOnEventListRestricted+0x6c>)
   22ade:	460c      	mov	r4, r1
   22ae0:	6831      	ldr	r1, [r6, #0]
   22ae2:	4615      	mov	r5, r2
   22ae4:	3118      	adds	r1, #24
   22ae6:	f7fe fe65 	bl	217b4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
   22aea:	4b17      	ldr	r3, [pc, #92]	; (22b48 <vTaskPlaceOnEventListRestricted+0x70>)
		if( xWaitIndefinitely != pdFALSE )
   22aec:	b98d      	cbnz	r5, 22b12 <vTaskPlaceOnEventListRestricted+0x3a>
const TickType_t xConstTickCount = xTickCount;
   22aee:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   22af0:	6830      	ldr	r0, [r6, #0]
   22af2:	3004      	adds	r0, #4
   22af4:	f7fe fe86 	bl	21804 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   22af8:	6833      	ldr	r3, [r6, #0]
   22afa:	1964      	adds	r4, r4, r5
   22afc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   22afe:	d314      	bcc.n	22b2a <vTaskPlaceOnEventListRestricted+0x52>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22b00:	4b12      	ldr	r3, [pc, #72]	; (22b4c <vTaskPlaceOnEventListRestricted+0x74>)
   22b02:	6818      	ldr	r0, [r3, #0]
   22b04:	6831      	ldr	r1, [r6, #0]
	}
   22b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22b0a:	3104      	adds	r1, #4
   22b0c:	f7fe be62 	b.w	217d4 <vListInsert>
		configASSERT( pxEventList );
   22b10:	e7fe      	b.n	22b10 <vTaskPlaceOnEventListRestricted+0x38>
const TickType_t xConstTickCount = xTickCount;
   22b12:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   22b14:	6830      	ldr	r0, [r6, #0]
   22b16:	3004      	adds	r0, #4
   22b18:	f7fe fe74 	bl	21804 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22b1c:	6831      	ldr	r1, [r6, #0]
   22b1e:	480c      	ldr	r0, [pc, #48]	; (22b50 <vTaskPlaceOnEventListRestricted+0x78>)
	}
   22b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22b24:	3104      	adds	r1, #4
   22b26:	f7fe be45 	b.w	217b4 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   22b2a:	4b0a      	ldr	r3, [pc, #40]	; (22b54 <vTaskPlaceOnEventListRestricted+0x7c>)
   22b2c:	6818      	ldr	r0, [r3, #0]
   22b2e:	6831      	ldr	r1, [r6, #0]
   22b30:	3104      	adds	r1, #4
   22b32:	f7fe fe4f 	bl	217d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   22b36:	4b08      	ldr	r3, [pc, #32]	; (22b58 <vTaskPlaceOnEventListRestricted+0x80>)
   22b38:	681a      	ldr	r2, [r3, #0]
   22b3a:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
   22b3c:	bf38      	it	cc
   22b3e:	601c      	strcc	r4, [r3, #0]
	}
   22b40:	bd70      	pop	{r4, r5, r6, pc}
   22b42:	bf00      	nop
   22b44:	1000a138 	.word	0x1000a138
   22b48:	1000a208 	.word	0x1000a208
   22b4c:	1000a140 	.word	0x1000a140
   22b50:	1000a1f4 	.word	0x1000a1f4
   22b54:	1000a13c 	.word	0x1000a13c
   22b58:	1000a1d4 	.word	0x1000a1d4

00022b5c <xTaskRemoveFromEventList>:
{
   22b5c:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22b5e:	68c3      	ldr	r3, [r0, #12]
   22b60:	68dc      	ldr	r4, [r3, #12]
{
   22b62:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
   22b64:	b304      	cbz	r4, 22ba8 <xTaskRemoveFromEventList+0x4c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   22b66:	f104 0518 	add.w	r5, r4, #24
   22b6a:	4628      	mov	r0, r5
   22b6c:	f7fe fe4a 	bl	21804 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22b70:	4b1c      	ldr	r3, [pc, #112]	; (22be4 <xTaskRemoveFromEventList+0x88>)
   22b72:	681b      	ldr	r3, [r3, #0]
   22b74:	b1cb      	cbz	r3, 22baa <xTaskRemoveFromEventList+0x4e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   22b76:	481c      	ldr	r0, [pc, #112]	; (22be8 <xTaskRemoveFromEventList+0x8c>)
   22b78:	4629      	mov	r1, r5
   22b7a:	f7fe fe1b 	bl	217b4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   22b7e:	4b1b      	ldr	r3, [pc, #108]	; (22bec <xTaskRemoveFromEventList+0x90>)
   22b80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   22b82:	681b      	ldr	r3, [r3, #0]
   22b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22b86:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   22b88:	bf82      	ittt	hi
   22b8a:	4b19      	ldrhi	r3, [pc, #100]	; (22bf0 <xTaskRemoveFromEventList+0x94>)
   22b8c:	2001      	movhi	r0, #1
   22b8e:	6018      	strhi	r0, [r3, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22b90:	4b18      	ldr	r3, [pc, #96]	; (22bf4 <xTaskRemoveFromEventList+0x98>)
   22b92:	681a      	ldr	r2, [r3, #0]
   22b94:	6812      	ldr	r2, [r2, #0]
		xReturn = pdFALSE;
   22b96:	bf98      	it	ls
   22b98:	2000      	movls	r0, #0
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   22b9a:	b9d2      	cbnz	r2, 22bd2 <xTaskRemoveFromEventList+0x76>
		xNextTaskUnblockTime = portMAX_DELAY;
   22b9c:	4b16      	ldr	r3, [pc, #88]	; (22bf8 <xTaskRemoveFromEventList+0x9c>)
   22b9e:	f04f 32ff 	mov.w	r2, #4294967295
   22ba2:	601a      	str	r2, [r3, #0]
}
   22ba4:	b003      	add	sp, #12
   22ba6:	bd30      	pop	{r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   22ba8:	e7fe      	b.n	22ba8 <xTaskRemoveFromEventList+0x4c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   22baa:	1d21      	adds	r1, r4, #4
   22bac:	4608      	mov	r0, r1
   22bae:	9101      	str	r1, [sp, #4]
   22bb0:	f7fe fe28 	bl	21804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   22bb4:	4a11      	ldr	r2, [pc, #68]	; (22bfc <xTaskRemoveFromEventList+0xa0>)
   22bb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22bb8:	6810      	ldr	r0, [r2, #0]
   22bba:	9901      	ldr	r1, [sp, #4]
   22bbc:	4283      	cmp	r3, r0
   22bbe:	4810      	ldr	r0, [pc, #64]	; (22c00 <xTaskRemoveFromEventList+0xa4>)
   22bc0:	bf88      	it	hi
   22bc2:	6013      	strhi	r3, [r2, #0]
   22bc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   22bc8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   22bcc:	f7fe fdf2 	bl	217b4 <vListInsertEnd>
   22bd0:	e7d5      	b.n	22b7e <xTaskRemoveFromEventList+0x22>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22bd2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   22bd4:	4b08      	ldr	r3, [pc, #32]	; (22bf8 <xTaskRemoveFromEventList+0x9c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22bd6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   22bd8:	68d2      	ldr	r2, [r2, #12]
   22bda:	6852      	ldr	r2, [r2, #4]
   22bdc:	601a      	str	r2, [r3, #0]
}
   22bde:	b003      	add	sp, #12
   22be0:	bd30      	pop	{r4, r5, pc}
   22be2:	bf00      	nop
   22be4:	1000a19c 	.word	0x1000a19c
   22be8:	1000a1dc 	.word	0x1000a1dc
   22bec:	1000a138 	.word	0x1000a138
   22bf0:	1000a20c 	.word	0x1000a20c
   22bf4:	1000a13c 	.word	0x1000a13c
   22bf8:	1000a1d4 	.word	0x1000a1d4
   22bfc:	1000a1a4 	.word	0x1000a1a4
   22c00:	1000a144 	.word	0x1000a144

00022c04 <vTaskRemoveFromUnorderedEventList>:
{
   22c04:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
   22c06:	4b14      	ldr	r3, [pc, #80]	; (22c58 <vTaskRemoveFromUnorderedEventList+0x54>)
   22c08:	681a      	ldr	r2, [r3, #0]
   22c0a:	b312      	cbz	r2, 22c52 <vTaskRemoveFromUnorderedEventList+0x4e>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22c0c:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   22c0e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   22c12:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
   22c14:	b1f4      	cbz	r4, 22c54 <vTaskRemoveFromUnorderedEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   22c16:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
   22c18:	f7fe fdf4 	bl	21804 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   22c1c:	4628      	mov	r0, r5
   22c1e:	f7fe fdf1 	bl	21804 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   22c22:	4a0e      	ldr	r2, [pc, #56]	; (22c5c <vTaskRemoveFromUnorderedEventList+0x58>)
   22c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22c26:	6811      	ldr	r1, [r2, #0]
   22c28:	480d      	ldr	r0, [pc, #52]	; (22c60 <vTaskRemoveFromUnorderedEventList+0x5c>)
   22c2a:	428b      	cmp	r3, r1
   22c2c:	bf88      	it	hi
   22c2e:	6013      	strhi	r3, [r2, #0]
   22c30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   22c34:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   22c38:	4629      	mov	r1, r5
   22c3a:	f7fe fdbb 	bl	217b4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   22c3e:	4b09      	ldr	r3, [pc, #36]	; (22c64 <vTaskRemoveFromUnorderedEventList+0x60>)
   22c40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   22c42:	681b      	ldr	r3, [r3, #0]
   22c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22c46:	429a      	cmp	r2, r3
   22c48:	d902      	bls.n	22c50 <vTaskRemoveFromUnorderedEventList+0x4c>
		xYieldPending = pdTRUE;
   22c4a:	4b07      	ldr	r3, [pc, #28]	; (22c68 <vTaskRemoveFromUnorderedEventList+0x64>)
   22c4c:	2201      	movs	r2, #1
   22c4e:	601a      	str	r2, [r3, #0]
}
   22c50:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( uxSchedulerSuspended != pdFALSE );
   22c52:	e7fe      	b.n	22c52 <vTaskRemoveFromUnorderedEventList+0x4e>
	configASSERT( pxUnblockedTCB );
   22c54:	e7fe      	b.n	22c54 <vTaskRemoveFromUnorderedEventList+0x50>
   22c56:	bf00      	nop
   22c58:	1000a19c 	.word	0x1000a19c
   22c5c:	1000a1a4 	.word	0x1000a1a4
   22c60:	1000a144 	.word	0x1000a144
   22c64:	1000a138 	.word	0x1000a138
   22c68:	1000a20c 	.word	0x1000a20c

00022c6c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   22c6c:	4a03      	ldr	r2, [pc, #12]	; (22c7c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
   22c6e:	4b04      	ldr	r3, [pc, #16]	; (22c80 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   22c70:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   22c72:	681b      	ldr	r3, [r3, #0]
   22c74:	e9c0 2300 	strd	r2, r3, [r0]
}
   22c78:	4770      	bx	lr
   22c7a:	bf00      	nop
   22c7c:	1000a1d8 	.word	0x1000a1d8
   22c80:	1000a208 	.word	0x1000a208

00022c84 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   22c84:	b1e8      	cbz	r0, 22cc2 <xTaskCheckForTimeOut+0x3e>
{
   22c86:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c88:	460d      	mov	r5, r1
   22c8a:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
   22c8c:	b1c1      	cbz	r1, 22cc0 <xTaskCheckForTimeOut+0x3c>
   22c8e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   22c90:	f7fa fea0 	bl	1d9d4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
   22c94:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
   22c96:	4a15      	ldr	r2, [pc, #84]	; (22cec <xTaskCheckForTimeOut+0x68>)
			if( *pxTicksToWait == portMAX_DELAY )
   22c98:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
   22c9a:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
   22c9c:	d020      	beq.n	22ce0 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   22c9e:	f8df c050 	ldr.w	ip, [pc, #80]	; 22cf0 <xTaskCheckForTimeOut+0x6c>
   22ca2:	e9d4 6000 	ldrd	r6, r0, [r4]
   22ca6:	f8dc 7000 	ldr.w	r7, [ip]
   22caa:	42be      	cmp	r6, r7
   22cac:	d00a      	beq.n	22cc4 <xTaskCheckForTimeOut+0x40>
   22cae:	4288      	cmp	r0, r1
   22cb0:	d808      	bhi.n	22cc4 <xTaskCheckForTimeOut+0x40>
			xReturn = pdTRUE;
   22cb2:	2001      	movs	r0, #1
   22cb4:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
   22cb6:	f7fa fea7 	bl	1da08 <vPortExitCritical>
}
   22cba:	9801      	ldr	r0, [sp, #4]
   22cbc:	b003      	add	sp, #12
   22cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
   22cc0:	e7fe      	b.n	22cc0 <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTimeOut );
   22cc2:	e7fe      	b.n	22cc2 <xTaskCheckForTimeOut+0x3e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   22cc4:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   22cc8:	4573      	cmp	r3, lr
   22cca:	d90b      	bls.n	22ce4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   22ccc:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   22cce:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
   22cd2:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
   22cd4:	4403      	add	r3, r0
   22cd6:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
   22cd8:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
   22cda:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
   22cde:	e7e9      	b.n	22cb4 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
   22ce0:	2000      	movs	r0, #0
   22ce2:	e7e7      	b.n	22cb4 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
   22ce4:	2300      	movs	r3, #0
   22ce6:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
   22ce8:	2001      	movs	r0, #1
   22cea:	e7e3      	b.n	22cb4 <xTaskCheckForTimeOut+0x30>
   22cec:	1000a208 	.word	0x1000a208
   22cf0:	1000a1d8 	.word	0x1000a1d8

00022cf4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   22cf4:	4b01      	ldr	r3, [pc, #4]	; (22cfc <vTaskMissedYield+0x8>)
   22cf6:	2201      	movs	r2, #1
   22cf8:	601a      	str	r2, [r3, #0]
}
   22cfa:	4770      	bx	lr
   22cfc:	1000a20c 	.word	0x1000a20c

00022d00 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   22d00:	4b09      	ldr	r3, [pc, #36]	; (22d28 <eTaskConfirmSleepModeStatus+0x28>)
   22d02:	6818      	ldr	r0, [r3, #0]
   22d04:	b918      	cbnz	r0, 22d0e <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
   22d06:	4b09      	ldr	r3, [pc, #36]	; (22d2c <eTaskConfirmSleepModeStatus+0x2c>)
   22d08:	681b      	ldr	r3, [r3, #0]
   22d0a:	b113      	cbz	r3, 22d12 <eTaskConfirmSleepModeStatus+0x12>
	}
   22d0c:	4770      	bx	lr
			eReturn = eAbortSleep;
   22d0e:	2000      	movs	r0, #0
	}
   22d10:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   22d12:	4a07      	ldr	r2, [pc, #28]	; (22d30 <eTaskConfirmSleepModeStatus+0x30>)
   22d14:	4b07      	ldr	r3, [pc, #28]	; (22d34 <eTaskConfirmSleepModeStatus+0x34>)
   22d16:	6810      	ldr	r0, [r2, #0]
   22d18:	681b      	ldr	r3, [r3, #0]
   22d1a:	3b01      	subs	r3, #1
				eReturn = eNoTasksWaitingTimeout;
   22d1c:	4298      	cmp	r0, r3
   22d1e:	bf14      	ite	ne
   22d20:	2001      	movne	r0, #1
   22d22:	2002      	moveq	r0, #2
   22d24:	4770      	bx	lr
   22d26:	bf00      	nop
   22d28:	1000a1dc 	.word	0x1000a1dc
   22d2c:	1000a20c 	.word	0x1000a20c
   22d30:	1000a1f4 	.word	0x1000a1f4
   22d34:	1000a194 	.word	0x1000a194

00022d38 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   22d38:	4b05      	ldr	r3, [pc, #20]	; (22d50 <xTaskGetSchedulerState+0x18>)
   22d3a:	681b      	ldr	r3, [r3, #0]
   22d3c:	b133      	cbz	r3, 22d4c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   22d3e:	4b05      	ldr	r3, [pc, #20]	; (22d54 <xTaskGetSchedulerState+0x1c>)
   22d40:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   22d42:	2b00      	cmp	r3, #0
   22d44:	bf0c      	ite	eq
   22d46:	2002      	moveq	r0, #2
   22d48:	2000      	movne	r0, #0
   22d4a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   22d4c:	2001      	movs	r0, #1
	}
   22d4e:	4770      	bx	lr
   22d50:	1000a1f0 	.word	0x1000a1f0
   22d54:	1000a19c 	.word	0x1000a19c

00022d58 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   22d58:	4a04      	ldr	r2, [pc, #16]	; (22d6c <uxTaskResetEventItemValue+0x14>)
   22d5a:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   22d5c:	6813      	ldr	r3, [r2, #0]
   22d5e:	6812      	ldr	r2, [r2, #0]
   22d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   22d62:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   22d64:	f1c3 0304 	rsb	r3, r3, #4
   22d68:	6193      	str	r3, [r2, #24]
}
   22d6a:	4770      	bx	lr
   22d6c:	1000a138 	.word	0x1000a138

00022d70 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   22d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22d74:	4e1d      	ldr	r6, [pc, #116]	; (22dec <prvSwitchTimerLists+0x7c>)
	if( xTimerQueue != NULL )
   22d76:	f8df 907c 	ldr.w	r9, [pc, #124]	; 22df4 <prvSwitchTimerLists+0x84>
{
   22d7a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
   22d7c:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   22d80:	e00c      	b.n	22d9c <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   22d82:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22d84:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   22d86:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   22d88:	1d25      	adds	r5, r4, #4
   22d8a:	4628      	mov	r0, r5
   22d8c:	f7fe fd3a 	bl	21804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   22d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22d92:	4620      	mov	r0, r4
   22d94:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   22d96:	69e3      	ldr	r3, [r4, #28]
   22d98:	2b01      	cmp	r3, #1
   22d9a:	d00a      	beq.n	22db2 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   22d9c:	6833      	ldr	r3, [r6, #0]
   22d9e:	681a      	ldr	r2, [r3, #0]
   22da0:	2a00      	cmp	r2, #0
   22da2:	d1ee      	bne.n	22d82 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   22da4:	4a12      	ldr	r2, [pc, #72]	; (22df0 <prvSwitchTimerLists+0x80>)
   22da6:	6811      	ldr	r1, [r2, #0]
   22da8:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
   22daa:	6013      	str	r3, [r2, #0]
}
   22dac:	b005      	add	sp, #20
   22dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   22db2:	69a3      	ldr	r3, [r4, #24]
   22db4:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
   22db6:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   22db8:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
   22dba:	d205      	bcs.n	22dc8 <prvSwitchTimerLists+0x58>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   22dbc:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   22dbe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   22dc0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   22dc2:	f7fe fd07 	bl	217d4 <vListInsert>
   22dc6:	e7e9      	b.n	22d9c <prvSwitchTimerLists+0x2c>
	if( xTimerQueue != NULL )
   22dc8:	f8d9 3000 	ldr.w	r3, [r9]
   22dcc:	b16b      	cbz	r3, 22dea <prvSwitchTimerLists+0x7a>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   22dce:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   22dd2:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   22dd4:	f7ff ffb0 	bl	22d38 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   22dd8:	2300      	movs	r3, #0
   22dda:	f8d9 0000 	ldr.w	r0, [r9]
   22dde:	461a      	mov	r2, r3
   22de0:	4669      	mov	r1, sp
   22de2:	f7fe fd5f 	bl	218a4 <xQueueGenericSend>
				configASSERT( xResult );
   22de6:	2800      	cmp	r0, #0
   22de8:	d1d8      	bne.n	22d9c <prvSwitchTimerLists+0x2c>
   22dea:	e7fe      	b.n	22dea <prvSwitchTimerLists+0x7a>
   22dec:	1000a210 	.word	0x1000a210
   22df0:	1000a214 	.word	0x1000a214
   22df4:	1000a244 	.word	0x1000a244

00022df8 <prvTimerTask>:
{
   22df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22dfc:	4e84      	ldr	r6, [pc, #528]	; (23010 <prvTimerTask+0x218>)
   22dfe:	4d85      	ldr	r5, [pc, #532]	; (23014 <prvTimerTask+0x21c>)
   22e00:	4c85      	ldr	r4, [pc, #532]	; (23018 <prvTimerTask+0x220>)
   22e02:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
   22e04:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   22e08:	6833      	ldr	r3, [r6, #0]
   22e0a:	f8d3 a000 	ldr.w	sl, [r3]
   22e0e:	f1ba 0f00 	cmp.w	sl, #0
   22e12:	f000 8098 	beq.w	22f46 <prvTimerTask+0x14e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   22e16:	68db      	ldr	r3, [r3, #12]
   22e18:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
   22e1c:	f7ff fc16 	bl	2264c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
   22e20:	f7ff fc1c 	bl	2265c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   22e24:	682a      	ldr	r2, [r5, #0]
   22e26:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
   22e28:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   22e2a:	f200 809d 	bhi.w	22f68 <prvTimerTask+0x170>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   22e2e:	4582      	cmp	sl, r0
	xLastTime = xTimeNow;
   22e30:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   22e32:	f240 80ac 	bls.w	22f8e <prvTimerTask+0x196>
   22e36:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   22e38:	6820      	ldr	r0, [r4, #0]
   22e3a:	ebaa 0108 	sub.w	r1, sl, r8
   22e3e:	f7ff f8bb 	bl	21fb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   22e42:	f7ff fd4b 	bl	228dc <xTaskResumeAll>
   22e46:	b938      	cbnz	r0, 22e58 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
   22e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22e4c:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
   22e50:	f3bf 8f4f 	dsb	sy
   22e54:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   22e58:	6820      	ldr	r0, [r4, #0]
   22e5a:	2200      	movs	r2, #0
   22e5c:	a902      	add	r1, sp, #8
   22e5e:	f7fe ff41 	bl	21ce4 <xQueueReceive>
   22e62:	2800      	cmp	r0, #0
   22e64:	d0d0      	beq.n	22e08 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   22e66:	9b02      	ldr	r3, [sp, #8]
   22e68:	2b00      	cmp	r3, #0
   22e6a:	db64      	blt.n	22f36 <prvTimerTask+0x13e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   22e6c:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   22e6e:	697b      	ldr	r3, [r7, #20]
   22e70:	b113      	cbz	r3, 22e78 <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   22e72:	1d38      	adds	r0, r7, #4
   22e74:	f7fe fcc6 	bl	21804 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
   22e78:	f7ff fbf0 	bl	2265c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   22e7c:	682b      	ldr	r3, [r5, #0]
   22e7e:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
   22e80:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   22e82:	d378      	bcc.n	22f76 <prvTimerTask+0x17e>
			switch( xMessage.xMessageID )
   22e84:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
   22e86:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
   22e8a:	2b09      	cmp	r3, #9
   22e8c:	d8e4      	bhi.n	22e58 <prvTimerTask+0x60>
   22e8e:	a201      	add	r2, pc, #4	; (adr r2, 22e94 <prvTimerTask+0x9c>)
   22e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22e94:	00022ebd 	.word	0x00022ebd
   22e98:	00022ebd 	.word	0x00022ebd
   22e9c:	00022ebd 	.word	0x00022ebd
   22ea0:	00022e59 	.word	0x00022e59
   22ea4:	00022f11 	.word	0x00022f11
   22ea8:	00022f2f 	.word	0x00022f2f
   22eac:	00022ebd 	.word	0x00022ebd
   22eb0:	00022ebd 	.word	0x00022ebd
   22eb4:	00022e59 	.word	0x00022e59
   22eb8:	00022f11 	.word	0x00022f11
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   22ebc:	9b03      	ldr	r3, [sp, #12]
   22ebe:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   22ec0:	613f      	str	r7, [r7, #16]
   22ec2:	1899      	adds	r1, r3, r2
   22ec4:	bf2c      	ite	cs
   22ec6:	2001      	movcs	r0, #1
   22ec8:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
   22eca:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   22ecc:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
   22ece:	d855      	bhi.n	22f7c <prvTimerTask+0x184>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   22ed0:	eba8 0303 	sub.w	r3, r8, r3
   22ed4:	429a      	cmp	r2, r3
   22ed6:	d823      	bhi.n	22f20 <prvTimerTask+0x128>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   22ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22eda:	4638      	mov	r0, r7
   22edc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   22ede:	69fb      	ldr	r3, [r7, #28]
   22ee0:	2b01      	cmp	r3, #1
   22ee2:	d1b9      	bne.n	22e58 <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
   22ee4:	6823      	ldr	r3, [r4, #0]
   22ee6:	2b00      	cmp	r3, #0
   22ee8:	f000 808c 	beq.w	23004 <prvTimerTask+0x20c>
		xMessage.xMessageID = xCommandID;
   22eec:	2300      	movs	r3, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   22eee:	69ba      	ldr	r2, [r7, #24]
		xMessage.xMessageID = xCommandID;
   22ef0:	9306      	str	r3, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   22ef2:	9b03      	ldr	r3, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   22ef4:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   22ef6:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   22ef8:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   22efa:	f7ff ff1d 	bl	22d38 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   22efe:	2300      	movs	r3, #0
   22f00:	6820      	ldr	r0, [r4, #0]
   22f02:	461a      	mov	r2, r3
   22f04:	a906      	add	r1, sp, #24
   22f06:	f7fe fccd 	bl	218a4 <xQueueGenericSend>
							configASSERT( xResult );
   22f0a:	2800      	cmp	r0, #0
   22f0c:	d1a4      	bne.n	22e58 <prvTimerTask+0x60>
   22f0e:	e7fe      	b.n	22f0e <prvTimerTask+0x116>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   22f10:	9b03      	ldr	r3, [sp, #12]
   22f12:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   22f14:	b153      	cbz	r3, 22f2c <prvTimerTask+0x134>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   22f16:	4443      	add	r3, r8
	if( xNextExpiryTime <= xTimeNow )
   22f18:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   22f1a:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   22f1c:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
   22f1e:	d831      	bhi.n	22f84 <prvTimerTask+0x18c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   22f20:	4b3e      	ldr	r3, [pc, #248]	; (2301c <prvTimerTask+0x224>)
   22f22:	1d39      	adds	r1, r7, #4
   22f24:	6818      	ldr	r0, [r3, #0]
   22f26:	f7fe fc55 	bl	217d4 <vListInsert>
	return xProcessTimerNow;
   22f2a:	e795      	b.n	22e58 <prvTimerTask+0x60>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   22f2c:	e7fe      	b.n	22f2c <prvTimerTask+0x134>
						vPortFree( pxTimer );
   22f2e:	4638      	mov	r0, r7
   22f30:	f7fe fb2a 	bl	21588 <vPortFree>
					break;
   22f34:	e790      	b.n	22e58 <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   22f36:	9b03      	ldr	r3, [sp, #12]
   22f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   22f3c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   22f3e:	9b02      	ldr	r3, [sp, #8]
   22f40:	2b00      	cmp	r3, #0
   22f42:	db89      	blt.n	22e58 <prvTimerTask+0x60>
   22f44:	e792      	b.n	22e6c <prvTimerTask+0x74>
	vTaskSuspendAll();
   22f46:	f7ff fb81 	bl	2264c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
   22f4a:	f7ff fb87 	bl	2265c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   22f4e:	682a      	ldr	r2, [r5, #0]
   22f50:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
   22f52:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   22f54:	d808      	bhi.n	22f68 <prvTimerTask+0x170>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   22f56:	4b31      	ldr	r3, [pc, #196]	; (2301c <prvTimerTask+0x224>)
	xLastTime = xTimeNow;
   22f58:	f8c5 8000 	str.w	r8, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   22f5c:	681a      	ldr	r2, [r3, #0]
   22f5e:	6812      	ldr	r2, [r2, #0]
   22f60:	fab2 f282 	clz	r2, r2
   22f64:	0952      	lsrs	r2, r2, #5
   22f66:	e767      	b.n	22e38 <prvTimerTask+0x40>
		prvSwitchTimerLists();
   22f68:	f7ff ff02 	bl	22d70 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
   22f6c:	f8c5 8000 	str.w	r8, [r5]
			( void ) xTaskResumeAll();
   22f70:	f7ff fcb4 	bl	228dc <xTaskResumeAll>
   22f74:	e770      	b.n	22e58 <prvTimerTask+0x60>
		prvSwitchTimerLists();
   22f76:	f7ff fefb 	bl	22d70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   22f7a:	e783      	b.n	22e84 <prvTimerTask+0x8c>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   22f7c:	4543      	cmp	r3, r8
   22f7e:	d901      	bls.n	22f84 <prvTimerTask+0x18c>
   22f80:	2800      	cmp	r0, #0
   22f82:	d0a9      	beq.n	22ed8 <prvTimerTask+0xe0>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   22f84:	6830      	ldr	r0, [r6, #0]
   22f86:	1d39      	adds	r1, r7, #4
   22f88:	f7fe fc24 	bl	217d4 <vListInsert>
   22f8c:	e764      	b.n	22e58 <prvTimerTask+0x60>
				( void ) xTaskResumeAll();
   22f8e:	f7ff fca5 	bl	228dc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   22f92:	6832      	ldr	r2, [r6, #0]
   22f94:	68d2      	ldr	r2, [r2, #12]
   22f96:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   22f9a:	f10b 0104 	add.w	r1, fp, #4
   22f9e:	4608      	mov	r0, r1
   22fa0:	9101      	str	r1, [sp, #4]
   22fa2:	f7fe fc2f 	bl	21804 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   22fa6:	f8db 001c 	ldr.w	r0, [fp, #28]
   22faa:	9901      	ldr	r1, [sp, #4]
   22fac:	2801      	cmp	r0, #1
   22fae:	d004      	beq.n	22fba <prvTimerTask+0x1c2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   22fb0:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   22fb4:	4658      	mov	r0, fp
   22fb6:	4798      	blx	r3
}
   22fb8:	e74e      	b.n	22e58 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   22fba:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   22fbe:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   22fc2:	eb0a 0300 	add.w	r3, sl, r0
	if( xNextExpiryTime <= xTimeNow )
   22fc6:	4598      	cmp	r8, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   22fc8:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
   22fcc:	d203      	bcs.n	22fd6 <prvTimerTask+0x1de>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   22fce:	6830      	ldr	r0, [r6, #0]
   22fd0:	f7fe fc00 	bl	217d4 <vListInsert>
	return xProcessTimerNow;
   22fd4:	e7ec      	b.n	22fb0 <prvTimerTask+0x1b8>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   22fd6:	eba8 030a 	sub.w	r3, r8, sl
   22fda:	4298      	cmp	r0, r3
   22fdc:	d813      	bhi.n	23006 <prvTimerTask+0x20e>
	if( xTimerQueue != NULL )
   22fde:	6823      	ldr	r3, [r4, #0]
   22fe0:	b17b      	cbz	r3, 23002 <prvTimerTask+0x20a>
		xMessage.xMessageID = xCommandID;
   22fe2:	2300      	movs	r3, #0
   22fe4:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   22fe6:	f8cd a01c 	str.w	sl, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   22fea:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   22fee:	f7ff fea3 	bl	22d38 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   22ff2:	2300      	movs	r3, #0
   22ff4:	6820      	ldr	r0, [r4, #0]
   22ff6:	461a      	mov	r2, r3
   22ff8:	a906      	add	r1, sp, #24
   22ffa:	f7fe fc53 	bl	218a4 <xQueueGenericSend>
			configASSERT( xResult );
   22ffe:	2800      	cmp	r0, #0
   23000:	d1d6      	bne.n	22fb0 <prvTimerTask+0x1b8>
   23002:	e7fe      	b.n	23002 <prvTimerTask+0x20a>
							configASSERT( xResult );
   23004:	e783      	b.n	22f0e <prvTimerTask+0x116>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   23006:	4b05      	ldr	r3, [pc, #20]	; (2301c <prvTimerTask+0x224>)
   23008:	6818      	ldr	r0, [r3, #0]
   2300a:	f7fe fbe3 	bl	217d4 <vListInsert>
	return xProcessTimerNow;
   2300e:	e7cf      	b.n	22fb0 <prvTimerTask+0x1b8>
   23010:	1000a210 	.word	0x1000a210
   23014:	1000a240 	.word	0x1000a240
   23018:	1000a244 	.word	0x1000a244
   2301c:	1000a214 	.word	0x1000a214

00023020 <xTimerCreateTimerTask>:
{
   23020:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
   23022:	4c16      	ldr	r4, [pc, #88]	; (2307c <xTimerCreateTimerTask+0x5c>)
{
   23024:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
   23026:	f7fa fcd5 	bl	1d9d4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   2302a:	6825      	ldr	r5, [r4, #0]
   2302c:	b195      	cbz	r5, 23054 <xTimerCreateTimerTask+0x34>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   2302e:	f7fa fceb 	bl	1da08 <vPortExitCritical>
	if( xTimerQueue != NULL )
   23032:	6823      	ldr	r3, [r4, #0]
   23034:	b15b      	cbz	r3, 2304e <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
   23036:	4a12      	ldr	r2, [pc, #72]	; (23080 <xTimerCreateTimerTask+0x60>)
   23038:	4912      	ldr	r1, [pc, #72]	; (23084 <xTimerCreateTimerTask+0x64>)
   2303a:	4813      	ldr	r0, [pc, #76]	; (23088 <xTimerCreateTimerTask+0x68>)
   2303c:	2303      	movs	r3, #3
   2303e:	e9cd 3200 	strd	r3, r2, [sp]
   23042:	2300      	movs	r3, #0
   23044:	f44f 7280 	mov.w	r2, #256	; 0x100
   23048:	f7ff f87a 	bl	22140 <xTaskCreate>
	configASSERT( xReturn );
   2304c:	b900      	cbnz	r0, 23050 <xTimerCreateTimerTask+0x30>
   2304e:	e7fe      	b.n	2304e <xTimerCreateTimerTask+0x2e>
}
   23050:	b003      	add	sp, #12
   23052:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
   23054:	4f0d      	ldr	r7, [pc, #52]	; (2308c <xTimerCreateTimerTask+0x6c>)
			vListInitialise( &xActiveTimerList2 );
   23056:	4e0e      	ldr	r6, [pc, #56]	; (23090 <xTimerCreateTimerTask+0x70>)
			vListInitialise( &xActiveTimerList1 );
   23058:	4638      	mov	r0, r7
   2305a:	f7fe fb9b 	bl	21794 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   2305e:	4630      	mov	r0, r6
   23060:	f7fe fb98 	bl	21794 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   23064:	4b0b      	ldr	r3, [pc, #44]	; (23094 <xTimerCreateTimerTask+0x74>)
   23066:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   23068:	4b0b      	ldr	r3, [pc, #44]	; (23098 <xTimerCreateTimerTask+0x78>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   2306a:	462a      	mov	r2, r5
   2306c:	2110      	movs	r1, #16
   2306e:	2005      	movs	r0, #5
			pxOverflowTimerList = &xActiveTimerList2;
   23070:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   23072:	f7fe fbdb 	bl	2182c <xQueueGenericCreate>
   23076:	6020      	str	r0, [r4, #0]
   23078:	e7d9      	b.n	2302e <xTimerCreateTimerTask+0xe>
   2307a:	bf00      	nop
   2307c:	1000a244 	.word	0x1000a244
   23080:	1000a248 	.word	0x1000a248
   23084:	00028270 	.word	0x00028270
   23088:	00022df9 	.word	0x00022df9
   2308c:	1000a218 	.word	0x1000a218
   23090:	1000a22c 	.word	0x1000a22c
   23094:	1000a210 	.word	0x1000a210
   23098:	1000a214 	.word	0x1000a214

0002309c <xTimerCreate>:
	{
   2309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230a0:	4680      	mov	r8, r0
   230a2:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   230a4:	2028      	movs	r0, #40	; 0x28
	{
   230a6:	460d      	mov	r5, r1
   230a8:	4617      	mov	r7, r2
   230aa:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   230ac:	f7fe fa0e 	bl	214cc <pvPortMalloc>
		if( pxNewTimer != NULL )
   230b0:	4604      	mov	r4, r0
   230b2:	b198      	cbz	r0, 230dc <xTimerCreate+0x40>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   230b4:	b1b5      	cbz	r5, 230e4 <xTimerCreate+0x48>
		if( xTimerQueue == NULL )
   230b6:	f8df a068 	ldr.w	sl, [pc, #104]	; 23120 <xTimerCreate+0x84>
	taskENTER_CRITICAL();
   230ba:	f7fa fc8b 	bl	1d9d4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   230be:	f8da 2000 	ldr.w	r2, [sl]
   230c2:	b182      	cbz	r2, 230e6 <xTimerCreate+0x4a>
	taskEXIT_CRITICAL();
   230c4:	f7fa fca0 	bl	1da08 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   230c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		pxNewTimer->pcTimerName = pcTimerName;
   230ca:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->uxAutoReload = uxAutoReload;
   230ce:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
   230d2:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   230d4:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   230d6:	1d20      	adds	r0, r4, #4
   230d8:	f7fe fb68 	bl	217ac <vListInitialiseItem>
	}
   230dc:	4620      	mov	r0, r4
   230de:	b003      	add	sp, #12
   230e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   230e4:	e7fe      	b.n	230e4 <xTimerCreate+0x48>
			vListInitialise( &xActiveTimerList1 );
   230e6:	f8df b03c 	ldr.w	fp, [pc, #60]	; 23124 <xTimerCreate+0x88>
			vListInitialise( &xActiveTimerList2 );
   230ea:	f8df 903c 	ldr.w	r9, [pc, #60]	; 23128 <xTimerCreate+0x8c>
   230ee:	9201      	str	r2, [sp, #4]
			vListInitialise( &xActiveTimerList1 );
   230f0:	4658      	mov	r0, fp
   230f2:	f7fe fb4f 	bl	21794 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   230f6:	4648      	mov	r0, r9
   230f8:	f7fe fb4c 	bl	21794 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   230fc:	4806      	ldr	r0, [pc, #24]	; (23118 <xTimerCreate+0x7c>)
			pxOverflowTimerList = &xActiveTimerList2;
   230fe:	4907      	ldr	r1, [pc, #28]	; (2311c <xTimerCreate+0x80>)
			pxCurrentTimerList = &xActiveTimerList1;
   23100:	f8c0 b000 	str.w	fp, [r0]
			pxOverflowTimerList = &xActiveTimerList2;
   23104:	f8c1 9000 	str.w	r9, [r1]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   23108:	9a01      	ldr	r2, [sp, #4]
   2310a:	2110      	movs	r1, #16
   2310c:	2005      	movs	r0, #5
   2310e:	f7fe fb8d 	bl	2182c <xQueueGenericCreate>
   23112:	f8ca 0000 	str.w	r0, [sl]
   23116:	e7d5      	b.n	230c4 <xTimerCreate+0x28>
   23118:	1000a210 	.word	0x1000a210
   2311c:	1000a214 	.word	0x1000a214
   23120:	1000a244 	.word	0x1000a244
   23124:	1000a218 	.word	0x1000a218
   23128:	1000a22c 	.word	0x1000a22c

0002312c <xTimerGenericCommand>:
	configASSERT( xTimer );
   2312c:	b1a8      	cbz	r0, 2315a <xTimerGenericCommand+0x2e>
{
   2312e:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
   23130:	4d14      	ldr	r5, [pc, #80]	; (23184 <xTimerGenericCommand+0x58>)
   23132:	682c      	ldr	r4, [r5, #0]
{
   23134:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   23136:	b18c      	cbz	r4, 2315c <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   23138:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
   2313a:	e9cd 1200 	strd	r1, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   2313e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   23140:	dc0f      	bgt.n	23162 <xTimerGenericCommand+0x36>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   23142:	f7ff fdf9 	bl	22d38 <xTaskGetSchedulerState>
   23146:	2802      	cmp	r0, #2
   23148:	d014      	beq.n	23174 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   2314a:	2300      	movs	r3, #0
   2314c:	6828      	ldr	r0, [r5, #0]
   2314e:	461a      	mov	r2, r3
   23150:	4669      	mov	r1, sp
   23152:	f7fe fba7 	bl	218a4 <xQueueGenericSend>
}
   23156:	b005      	add	sp, #20
   23158:	bd30      	pop	{r4, r5, pc}
	configASSERT( xTimer );
   2315a:	e7fe      	b.n	2315a <xTimerGenericCommand+0x2e>
BaseType_t xReturn = pdFAIL;
   2315c:	4620      	mov	r0, r4
}
   2315e:	b005      	add	sp, #20
   23160:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   23162:	469c      	mov	ip, r3
   23164:	4662      	mov	r2, ip
   23166:	2300      	movs	r3, #0
   23168:	4669      	mov	r1, sp
   2316a:	4620      	mov	r0, r4
   2316c:	f7fe fd2c 	bl	21bc8 <xQueueGenericSendFromISR>
}
   23170:	b005      	add	sp, #20
   23172:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   23174:	6828      	ldr	r0, [r5, #0]
   23176:	9a08      	ldr	r2, [sp, #32]
   23178:	2300      	movs	r3, #0
   2317a:	4669      	mov	r1, sp
   2317c:	f7fe fb92 	bl	218a4 <xQueueGenericSend>
   23180:	e7ed      	b.n	2315e <xTimerGenericCommand+0x32>
   23182:	bf00      	nop
   23184:	1000a244 	.word	0x1000a244

00023188 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   23188:	b530      	push	{r4, r5, lr}
   2318a:	4614      	mov	r4, r2
   2318c:	b085      	sub	sp, #20
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   2318e:	461a      	mov	r2, r3
   23190:	4b06      	ldr	r3, [pc, #24]	; (231ac <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   23192:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   23194:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   23196:	6818      	ldr	r0, [r3, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   23198:	9403      	str	r4, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   2319a:	f06f 0501 	mvn.w	r5, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   2319e:	2300      	movs	r3, #0
   231a0:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   231a2:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   231a4:	f7fe fd10 	bl	21bc8 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
   231a8:	b005      	add	sp, #20
   231aa:	bd30      	pop	{r4, r5, pc}
   231ac:	1000a244 	.word	0x1000a244

000231b0 <am_devices_button_array_init>:
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   231b0:	b1b1      	cbz	r1, 231e0 <am_devices_button_array_init+0x30>
   231b2:	4b0c      	ldr	r3, [pc, #48]	; (231e4 <am_devices_button_array_init+0x34>)
{
   231b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for ( i = 0; i < ui32NumButtons; i++ )
   231b8:	2500      	movs	r5, #0
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   231ba:	f8d3 8000 	ldr.w	r8, [r3]
   231be:	460f      	mov	r7, r1
   231c0:	4604      	mov	r4, r0
    psButton->ui32Count = 0;
   231c2:	462e      	mov	r6, r5
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   231c4:	6820      	ldr	r0, [r4, #0]
   231c6:	4641      	mov	r1, r8
    for ( i = 0; i < ui32NumButtons; i++ )
   231c8:	3410      	adds	r4, #16
   231ca:	3501      	adds	r5, #1
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   231cc:	f001 fed4 	bl	24f78 <am_hal_gpio_pinconfig>
    for ( i = 0; i < ui32NumButtons; i++ )
   231d0:	42af      	cmp	r7, r5
    psButton->ui32Count = 0;
   231d2:	f844 6c08 	str.w	r6, [r4, #-8]
    psButton->bPressed = false;
   231d6:	f824 6c04 	strh.w	r6, [r4, #-4]
    for ( i = 0; i < ui32NumButtons; i++ )
   231da:	d1f3      	bne.n	231c4 <am_devices_button_array_init+0x14>
    {
        am_devices_button_init(psButtons + i);
    }
}
   231dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   231e0:	4770      	bx	lr
   231e2:	bf00      	nop
   231e4:	00029eec 	.word	0x00029eec

000231e8 <am_devices_button_array_tick>:
    uint32_t i;

    //
    // Run the "tick" function for each button in the list.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   231e8:	2900      	cmp	r1, #0
   231ea:	d036      	beq.n	2325a <am_devices_button_array_tick+0x72>
{
   231ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   231f0:	4b1a      	ldr	r3, [pc, #104]	; (2325c <am_devices_button_array_tick+0x74>)
   231f2:	4f1b      	ldr	r7, [pc, #108]	; (23260 <am_devices_button_array_tick+0x78>)
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   231f4:	f8d3 8000 	ldr.w	r8, [r3]
    for ( i = 0; i < ui32NumButtons; i++ )
   231f8:	2500      	movs	r5, #0
{
   231fa:	b083      	sub	sp, #12
   231fc:	460e      	mov	r6, r1
   231fe:	4604      	mov	r4, r0
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   23200:	46a9      	mov	r9, r5
   23202:	e012      	b.n	2322a <am_devices_button_array_tick+0x42>
        psButton->ui32Count++;
   23204:	68a2      	ldr	r2, [r4, #8]
        psButton->bChanged = true;
   23206:	2101      	movs	r1, #1
        psButton->ui32Count++;
   23208:	440a      	add	r2, r1
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
   2320a:	2a03      	cmp	r2, #3
   2320c:	60a2      	str	r2, [r4, #8]
        psButton->bPressed = bRawButtonPressed;
   2320e:	bf86      	itte	hi
   23210:	7323      	strbhi	r3, [r4, #12]
        psButton->ui32Count = 0;
   23212:	f8c4 9008 	strhi.w	r9, [r4, #8]
        psButton->bChanged = false;
   23216:	2100      	movls	r1, #0
   23218:	7361      	strb	r1, [r4, #13]
    for ( i = 0; i < ui32NumButtons; i++ )
   2321a:	3501      	adds	r5, #1
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   2321c:	6839      	ldr	r1, [r7, #0]
   2321e:	f854 0b10 	ldr.w	r0, [r4], #16
   23222:	f001 fea9 	bl	24f78 <am_hal_gpio_pinconfig>
    for ( i = 0; i < ui32NumButtons; i++ )
   23226:	42ae      	cmp	r6, r5
   23228:	d014      	beq.n	23254 <am_devices_button_array_tick+0x6c>
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   2322a:	4641      	mov	r1, r8
   2322c:	6820      	ldr	r0, [r4, #0]
   2322e:	f001 fea3 	bl	24f78 <am_hal_gpio_pinconfig>
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   23232:	aa01      	add	r2, sp, #4
   23234:	2100      	movs	r1, #0
   23236:	6820      	ldr	r0, [r4, #0]
   23238:	f001 ffd4 	bl	251e4 <am_hal_gpio_state_read>
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   2323c:	6863      	ldr	r3, [r4, #4]
   2323e:	9901      	ldr	r1, [sp, #4]
    if ( bRawButtonPressed != psButton->bPressed )
   23240:	7b22      	ldrb	r2, [r4, #12]
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   23242:	1a5b      	subs	r3, r3, r1
   23244:	bf18      	it	ne
   23246:	2301      	movne	r3, #1
    if ( bRawButtonPressed != psButton->bPressed )
   23248:	429a      	cmp	r2, r3
   2324a:	d1db      	bne.n	23204 <am_devices_button_array_tick+0x1c>
   2324c:	f8c4 9008 	str.w	r9, [r4, #8]
        psButton->bChanged = false;
   23250:	2100      	movs	r1, #0
   23252:	e7e1      	b.n	23218 <am_devices_button_array_tick+0x30>
    {
        am_devices_button_tick(psButtons + i);
    }
}
   23254:	b003      	add	sp, #12
   23256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2325a:	4770      	bx	lr
   2325c:	00029ef0 	.word	0x00029ef0
   23260:	00029eec 	.word	0x00029eec

00023264 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   23264:	e7fe      	b.n	23264 <NMI_Handler>
   23266:	bf00      	nop

00023268 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   23268:	e7fe      	b.n	23268 <BusFault_Handler>
   2326a:	bf00      	nop

0002326c <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   2326c:	e7fe      	b.n	2326c <DebugMon_Handler>
   2326e:	bf00      	nop

00023270 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
   23270:	4811      	ldr	r0, [pc, #68]	; (232b8 <zero_loop+0x12>)
   23272:	4912      	ldr	r1, [pc, #72]	; (232bc <zero_loop+0x16>)
   23274:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
   23276:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
   2327a:	4811      	ldr	r0, [pc, #68]	; (232c0 <zero_loop+0x1a>)
   2327c:	6801      	ldr	r1, [r0, #0]
   2327e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   23282:	6001      	str	r1, [r0, #0]
   23284:	f3bf 8f4f 	dsb	sy
   23288:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
   2328c:	480d      	ldr	r0, [pc, #52]	; (232c4 <zero_loop+0x1e>)
   2328e:	490e      	ldr	r1, [pc, #56]	; (232c8 <zero_loop+0x22>)
   23290:	4a0e      	ldr	r2, [pc, #56]	; (232cc <zero_loop+0x26>)

00023292 <copy_loop>:
   23292:	f850 3b04 	ldr.w	r3, [r0], #4
   23296:	f841 3b04 	str.w	r3, [r1], #4
   2329a:	4291      	cmp	r1, r2
   2329c:	dbf9      	blt.n	23292 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
   2329e:	480c      	ldr	r0, [pc, #48]	; (232d0 <zero_loop+0x2a>)
   232a0:	490c      	ldr	r1, [pc, #48]	; (232d4 <zero_loop+0x2e>)
   232a2:	f04f 0200 	mov.w	r2, #0

000232a6 <zero_loop>:
   232a6:	4288      	cmp	r0, r1
   232a8:	bfb8      	it	lt
   232aa:	f840 2b04 	strlt.w	r2, [r0], #4
   232ae:	dbfa      	blt.n	232a6 <zero_loop>
    main();
   232b0:	f7f2 fbe2 	bl	15a78 <main>
    __asm("    bkpt     ");
   232b4:	be00      	bkpt	0x0000
}
   232b6:	0000      	.short	0x0000
   232b8:	e000ed08 	.word	0xe000ed08
   232bc:	0000c000 	.word	0x0000c000
   232c0:	e000ed88 	.word	0xe000ed88
   232c4:	0002a190 	.word	0x0002a190
   232c8:	10002b00 	.word	0x10002b00
   232cc:	10003e94 	.word	0x10003e94
   232d0:	10003e98 	.word	0x10003e98
   232d4:	1000a3a4 	.word	0x1000a3a4

000232d8 <memcmp>:
   232d8:	2a03      	cmp	r2, #3
   232da:	b570      	push	{r4, r5, r6, lr}
   232dc:	d915      	bls.n	2330a <memcmp+0x32>
   232de:	ea40 0c01 	orr.w	ip, r0, r1
   232e2:	f01c 0f03 	tst.w	ip, #3
   232e6:	4604      	mov	r4, r0
   232e8:	460b      	mov	r3, r1
   232ea:	d121      	bne.n	23330 <memcmp+0x58>
   232ec:	4619      	mov	r1, r3
   232ee:	4620      	mov	r0, r4
   232f0:	680e      	ldr	r6, [r1, #0]
   232f2:	6805      	ldr	r5, [r0, #0]
   232f4:	42b5      	cmp	r5, r6
   232f6:	f104 0404 	add.w	r4, r4, #4
   232fa:	f103 0304 	add.w	r3, r3, #4
   232fe:	d117      	bne.n	23330 <memcmp+0x58>
   23300:	3a04      	subs	r2, #4
   23302:	2a03      	cmp	r2, #3
   23304:	4620      	mov	r0, r4
   23306:	4619      	mov	r1, r3
   23308:	d8f0      	bhi.n	232ec <memcmp+0x14>
   2330a:	1e54      	subs	r4, r2, #1
   2330c:	b1a2      	cbz	r2, 23338 <memcmp+0x60>
   2330e:	f100 3cff 	add.w	ip, r0, #4294967295
   23312:	3901      	subs	r1, #1
   23314:	e001      	b.n	2331a <memcmp+0x42>
   23316:	18c3      	adds	r3, r0, r3
   23318:	d00c      	beq.n	23334 <memcmp+0x5c>
   2331a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   2331e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   23322:	4596      	cmp	lr, r2
   23324:	eba4 030c 	sub.w	r3, r4, ip
   23328:	d0f5      	beq.n	23316 <memcmp+0x3e>
   2332a:	ebae 0002 	sub.w	r0, lr, r2
   2332e:	bd70      	pop	{r4, r5, r6, pc}
   23330:	1e54      	subs	r4, r2, #1
   23332:	e7ec      	b.n	2330e <memcmp+0x36>
   23334:	4618      	mov	r0, r3
   23336:	bd70      	pop	{r4, r5, r6, pc}
   23338:	4610      	mov	r0, r2
   2333a:	bd70      	pop	{r4, r5, r6, pc}

0002333c <memset>:
   2333c:	0783      	lsls	r3, r0, #30
   2333e:	b530      	push	{r4, r5, lr}
   23340:	d048      	beq.n	233d4 <memset+0x98>
   23342:	1e54      	subs	r4, r2, #1
   23344:	2a00      	cmp	r2, #0
   23346:	d03f      	beq.n	233c8 <memset+0x8c>
   23348:	b2ca      	uxtb	r2, r1
   2334a:	4603      	mov	r3, r0
   2334c:	e001      	b.n	23352 <memset+0x16>
   2334e:	3c01      	subs	r4, #1
   23350:	d33a      	bcc.n	233c8 <memset+0x8c>
   23352:	f803 2b01 	strb.w	r2, [r3], #1
   23356:	079d      	lsls	r5, r3, #30
   23358:	d1f9      	bne.n	2334e <memset+0x12>
   2335a:	2c03      	cmp	r4, #3
   2335c:	d92d      	bls.n	233ba <memset+0x7e>
   2335e:	b2cd      	uxtb	r5, r1
   23360:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   23364:	2c0f      	cmp	r4, #15
   23366:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2336a:	d936      	bls.n	233da <memset+0x9e>
   2336c:	f1a4 0210 	sub.w	r2, r4, #16
   23370:	f022 0c0f 	bic.w	ip, r2, #15
   23374:	f103 0e20 	add.w	lr, r3, #32
   23378:	44e6      	add	lr, ip
   2337a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   2337e:	f103 0210 	add.w	r2, r3, #16
   23382:	e942 5504 	strd	r5, r5, [r2, #-16]
   23386:	e942 5502 	strd	r5, r5, [r2, #-8]
   2338a:	3210      	adds	r2, #16
   2338c:	4572      	cmp	r2, lr
   2338e:	d1f8      	bne.n	23382 <memset+0x46>
   23390:	f10c 0201 	add.w	r2, ip, #1
   23394:	f014 0f0c 	tst.w	r4, #12
   23398:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   2339c:	f004 0c0f 	and.w	ip, r4, #15
   233a0:	d013      	beq.n	233ca <memset+0x8e>
   233a2:	f1ac 0304 	sub.w	r3, ip, #4
   233a6:	f023 0303 	bic.w	r3, r3, #3
   233aa:	3304      	adds	r3, #4
   233ac:	4413      	add	r3, r2
   233ae:	f842 5b04 	str.w	r5, [r2], #4
   233b2:	4293      	cmp	r3, r2
   233b4:	d1fb      	bne.n	233ae <memset+0x72>
   233b6:	f00c 0403 	and.w	r4, ip, #3
   233ba:	b12c      	cbz	r4, 233c8 <memset+0x8c>
   233bc:	b2ca      	uxtb	r2, r1
   233be:	441c      	add	r4, r3
   233c0:	f803 2b01 	strb.w	r2, [r3], #1
   233c4:	429c      	cmp	r4, r3
   233c6:	d1fb      	bne.n	233c0 <memset+0x84>
   233c8:	bd30      	pop	{r4, r5, pc}
   233ca:	4664      	mov	r4, ip
   233cc:	4613      	mov	r3, r2
   233ce:	2c00      	cmp	r4, #0
   233d0:	d1f4      	bne.n	233bc <memset+0x80>
   233d2:	e7f9      	b.n	233c8 <memset+0x8c>
   233d4:	4603      	mov	r3, r0
   233d6:	4614      	mov	r4, r2
   233d8:	e7bf      	b.n	2335a <memset+0x1e>
   233da:	461a      	mov	r2, r3
   233dc:	46a4      	mov	ip, r4
   233de:	e7e0      	b.n	233a2 <memset+0x66>

000233e0 <am_bsp_low_power_init>:
   233e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233e2:	f002 f8af 	bl	25544 <am_hal_pwrctrl_low_power_init>
   233e6:	f002 fa13 	bl	25810 <am_hal_rtc_osc_disable>
   233ea:	4b0b      	ldr	r3, [pc, #44]	; (23418 <am_bsp_low_power_init+0x38>)
   233ec:	4f0b      	ldr	r7, [pc, #44]	; (2341c <am_bsp_low_power_init+0x3c>)
   233ee:	681e      	ldr	r6, [r3, #0]
   233f0:	2400      	movs	r4, #0
   233f2:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   233f6:	4631      	mov	r1, r6
   233f8:	4628      	mov	r0, r5
   233fa:	f001 fdbd 	bl	24f78 <am_hal_gpio_pinconfig>
   233fe:	2103      	movs	r1, #3
   23400:	4628      	mov	r0, r5
   23402:	f001 ff25 	bl	25250 <am_hal_gpio_state_write>
   23406:	3401      	adds	r4, #1
   23408:	2100      	movs	r1, #0
   2340a:	4628      	mov	r0, r5
   2340c:	f001 ff20 	bl	25250 <am_hal_gpio_state_write>
   23410:	2c05      	cmp	r4, #5
   23412:	d1ee      	bne.n	233f2 <am_bsp_low_power_init+0x12>
   23414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23416:	bf00      	nop
   23418:	00029ef4 	.word	0x00029ef4
   2341c:	10002c9c 	.word	0x10002c9c

00023420 <am_bsp_itm_printf_enable>:
   23420:	b500      	push	{lr}
   23422:	4b0b      	ldr	r3, [pc, #44]	; (23450 <am_bsp_itm_printf_enable+0x30>)
   23424:	b087      	sub	sp, #28
   23426:	2201      	movs	r2, #1
   23428:	601a      	str	r2, [r3, #0]
   2342a:	f001 ff5d 	bl	252e8 <am_hal_itm_enable>
   2342e:	4b09      	ldr	r3, [pc, #36]	; (23454 <am_bsp_itm_printf_enable+0x34>)
   23430:	9301      	str	r3, [sp, #4]
   23432:	a801      	add	r0, sp, #4
   23434:	f002 fae2 	bl	259fc <am_hal_tpiu_enable>
   23438:	4b07      	ldr	r3, [pc, #28]	; (23458 <am_bsp_itm_printf_enable+0x38>)
   2343a:	2029      	movs	r0, #41	; 0x29
   2343c:	6819      	ldr	r1, [r3, #0]
   2343e:	f001 fd9b 	bl	24f78 <am_hal_gpio_pinconfig>
   23442:	4806      	ldr	r0, [pc, #24]	; (2345c <am_bsp_itm_printf_enable+0x3c>)
   23444:	f7fd fba6 	bl	20b94 <am_util_stdio_printf_init>
   23448:	b007      	add	sp, #28
   2344a:	f85d fb04 	ldr.w	pc, [sp], #4
   2344e:	bf00      	nop
   23450:	1000a24c 	.word	0x1000a24c
   23454:	000f4240 	.word	0x000f4240
   23458:	00028278 	.word	0x00028278
   2345c:	00025331 	.word	0x00025331

00023460 <am_hal_ble_blocking_transfer.part.0>:
   23460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23464:	4dbc      	ldr	r5, [pc, #752]	; (23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   23466:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   2346a:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2346e:	f36f 13c7 	bfc	r3, #7, #1
   23472:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   23476:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2347a:	f36f 2308 	bfc	r3, #8, #1
   2347e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   23482:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   23486:	f36f 0300 	bfc	r3, #0, #1
   2348a:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2348e:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   23492:	f36f 0341 	bfc	r3, #1, #1
   23496:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2349a:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   2349e:	f043 0301 	orr.w	r3, r3, #1
   234a2:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   234a6:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   234aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   234ae:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   234b2:	7a8b      	ldrb	r3, [r1, #10]
   234b4:	2b01      	cmp	r3, #1
   234b6:	b085      	sub	sp, #20
   234b8:	460e      	mov	r6, r1
   234ba:	4604      	mov	r4, r0
   234bc:	d03c      	beq.n	23538 <am_hal_ble_blocking_transfer.part.0+0xd8>
   234be:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   234c2:	061a      	lsls	r2, r3, #24
   234c4:	d532      	bpl.n	2352c <am_hal_ble_blocking_transfer.part.0+0xcc>
   234c6:	f001 ff07 	bl	252d8 <am_hal_interrupt_master_disable>
   234ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   234ce:	9003      	str	r0, [sp, #12]
   234d0:	9803      	ldr	r0, [sp, #12]
   234d2:	2b00      	cmp	r3, #0
   234d4:	d151      	bne.n	2357a <am_hal_ble_blocking_transfer.part.0+0x11a>
   234d6:	2301      	movs	r3, #1
   234d8:	6463      	str	r3, [r4, #68]	; 0x44
   234da:	f001 ff01 	bl	252e0 <am_hal_interrupt_master_set>
   234de:	7b33      	ldrb	r3, [r6, #12]
   234e0:	b113      	cbz	r3, 234e8 <am_hal_ble_blocking_transfer.part.0+0x88>
   234e2:	2301      	movs	r3, #1
   234e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   234e8:	6833      	ldr	r3, [r6, #0]
   234ea:	6872      	ldr	r2, [r6, #4]
   234ec:	68b1      	ldr	r1, [r6, #8]
   234ee:	68f0      	ldr	r0, [r6, #12]
   234f0:	61a0      	str	r0, [r4, #24]
   234f2:	60e3      	str	r3, [r4, #12]
   234f4:	6122      	str	r2, [r4, #16]
   234f6:	6161      	str	r1, [r4, #20]
   234f8:	6933      	ldr	r3, [r6, #16]
   234fa:	6972      	ldr	r2, [r6, #20]
   234fc:	6222      	str	r2, [r4, #32]
   234fe:	61e3      	str	r3, [r4, #28]
   23500:	f001 feea 	bl	252d8 <am_hal_interrupt_master_disable>
   23504:	6823      	ldr	r3, [r4, #0]
   23506:	4a95      	ldr	r2, [pc, #596]	; (2375c <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   23508:	9001      	str	r0, [sp, #4]
   2350a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2350e:	4293      	cmp	r3, r2
   23510:	f104 070c 	add.w	r7, r4, #12
   23514:	f040 8156 	bne.w	237c4 <am_hal_ble_blocking_transfer.part.0+0x364>
   23518:	79f2      	ldrb	r2, [r6, #7]
   2351a:	2a03      	cmp	r2, #3
   2351c:	f200 8152 	bhi.w	237c4 <am_hal_ble_blocking_transfer.part.0+0x364>
   23520:	e8df f012 	tbh	[pc, r2, lsl #1]
   23524:	01040071 	.word	0x01040071
   23528:	010900ff 	.word	0x010900ff
   2352c:	488c      	ldr	r0, [pc, #560]	; (23760 <am_hal_ble_blocking_transfer.part.0+0x300>)
   2352e:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   23532:	b005      	add	sp, #20
   23534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23538:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   2353c:	b333      	cbz	r3, 2358c <am_hal_ble_blocking_transfer.part.0+0x12c>
   2353e:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
   23542:	2d00      	cmp	r5, #0
   23544:	f000 81c4 	beq.w	238d0 <am_hal_ble_blocking_transfer.part.0+0x470>
   23548:	2300      	movs	r3, #0
   2354a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
   2354e:	4f82      	ldr	r7, [pc, #520]	; (23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   23550:	f240 152d 	movw	r5, #301	; 0x12d
   23554:	f04f 0900 	mov.w	r9, #0
   23558:	e008      	b.n	2356c <am_hal_ble_blocking_transfer.part.0+0x10c>
   2355a:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   2355e:	071b      	lsls	r3, r3, #28
   23560:	d518      	bpl.n	23594 <am_hal_ble_blocking_transfer.part.0+0x134>
   23562:	20a0      	movs	r0, #160	; 0xa0
   23564:	f001 fcaa 	bl	24ebc <am_hal_flash_delay>
   23568:	3d01      	subs	r5, #1
   2356a:	d013      	beq.n	23594 <am_hal_ble_blocking_transfer.part.0+0x134>
   2356c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   23570:	2b00      	cmp	r3, #0
   23572:	d0f2      	beq.n	2355a <am_hal_ble_blocking_transfer.part.0+0xfa>
   23574:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   23578:	e7f3      	b.n	23562 <am_hal_ble_blocking_transfer.part.0+0x102>
   2357a:	f001 feb1 	bl	252e0 <am_hal_interrupt_master_set>
   2357e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   23582:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   23586:	b005      	add	sp, #20
   23588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2358c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   23590:	2b00      	cmp	r3, #0
   23592:	d1dc      	bne.n	2354e <am_hal_ble_blocking_transfer.part.0+0xee>
   23594:	4d70      	ldr	r5, [pc, #448]	; (23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   23596:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2359a:	f043 0302 	orr.w	r3, r3, #2
   2359e:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   235a2:	2050      	movs	r0, #80	; 0x50
   235a4:	f001 fc8a 	bl	24ebc <am_hal_flash_delay>
   235a8:	6823      	ldr	r3, [r4, #0]
   235aa:	4a6c      	ldr	r2, [pc, #432]	; (2375c <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   235ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   235b0:	4293      	cmp	r3, r2
   235b2:	d105      	bne.n	235c0 <am_hal_ble_blocking_transfer.part.0+0x160>
   235b4:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   235b8:	f043 030c 	orr.w	r3, r3, #12
   235bc:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   235c0:	2500      	movs	r5, #0
   235c2:	4f65      	ldr	r7, [pc, #404]	; (23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   235c4:	46a9      	mov	r9, r5
   235c6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   235ca:	2b00      	cmp	r3, #0
   235cc:	f040 80ba 	bne.w	23744 <am_hal_ble_blocking_transfer.part.0+0x2e4>
   235d0:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   235d4:	0718      	lsls	r0, r3, #28
   235d6:	f140 80c7 	bpl.w	23768 <am_hal_ble_blocking_transfer.part.0+0x308>
   235da:	f001 fe7d 	bl	252d8 <am_hal_interrupt_master_disable>
   235de:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
   235e2:	9002      	str	r0, [sp, #8]
   235e4:	9802      	ldr	r0, [sp, #8]
   235e6:	f1ba 0f00 	cmp.w	sl, #0
   235ea:	f040 80ae 	bne.w	2374a <am_hal_ble_blocking_transfer.part.0+0x2ea>
   235ee:	2301      	movs	r3, #1
   235f0:	6463      	str	r3, [r4, #68]	; 0x44
   235f2:	f001 fe75 	bl	252e0 <am_hal_interrupt_master_set>
   235f6:	4b58      	ldr	r3, [pc, #352]	; (23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   235f8:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   235fc:	f36a 0241 	bfi	r2, sl, #1, #1
   23600:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   23604:	e76b      	b.n	234de <am_hal_ble_blocking_transfer.part.0+0x7e>
   23606:	2500      	movs	r5, #0
   23608:	46a9      	mov	r9, r5
   2360a:	f896 e00a 	ldrb.w	lr, [r6, #10]
   2360e:	f896 c00c 	ldrb.w	ip, [r6, #12]
   23612:	8930      	ldrh	r0, [r6, #8]
   23614:	4b53      	ldr	r3, [pc, #332]	; (23764 <am_hal_ble_blocking_transfer.part.0+0x304>)
   23616:	0151      	lsls	r1, r2, #5
   23618:	ea03 2a00 	and.w	sl, r3, r0, lsl #8
   2361c:	f001 0b60 	and.w	fp, r1, #96	; 0x60
   23620:	ea4e 13cc 	orr.w	r3, lr, ip, lsl #7
   23624:	ea43 030b 	orr.w	r3, r3, fp
   23628:	ea43 030a 	orr.w	r3, r3, sl
   2362c:	ea43 0309 	orr.w	r3, r3, r9
   23630:	f8df 9124 	ldr.w	r9, [pc, #292]	; 23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   23634:	f1be 0f01 	cmp.w	lr, #1
   23638:	f8c9 5214 	str.w	r5, [r9, #532]	; 0x214
   2363c:	f8c9 320c 	str.w	r3, [r9, #524]	; 0x20c
   23640:	f000 8131 	beq.w	238a6 <am_hal_ble_blocking_transfer.part.0+0x446>
   23644:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   23646:	f8b4 c014 	ldrh.w	ip, [r4, #20]
   2364a:	f8df e110 	ldr.w	lr, [pc, #272]	; 2375c <am_hal_ble_blocking_transfer.part.0+0x2fc>
   2364e:	4a42      	ldr	r2, [pc, #264]	; (23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   23650:	2500      	movs	r5, #0
   23652:	459c      	cmp	ip, r3
   23654:	d924      	bls.n	236a0 <am_hal_ble_blocking_transfer.part.0+0x240>
   23656:	6821      	ldr	r1, [r4, #0]
   23658:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
   2365c:	4571      	cmp	r1, lr
   2365e:	d1fd      	bne.n	2365c <am_hal_ble_blocking_transfer.part.0+0x1fc>
   23660:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   23664:	f3c1 4107 	ubfx	r1, r1, #16, #8
   23668:	2903      	cmp	r1, #3
   2366a:	d9f2      	bls.n	23652 <am_hal_ble_blocking_transfer.part.0+0x1f2>
   2366c:	4561      	cmp	r1, ip
   2366e:	f080 80a3 	bcs.w	237b8 <am_hal_ble_blocking_transfer.part.0+0x358>
   23672:	68e0      	ldr	r0, [r4, #12]
   23674:	f021 0103 	bic.w	r1, r1, #3
   23678:	f023 0303 	bic.w	r3, r3, #3
   2367c:	eb00 0903 	add.w	r9, r0, r3
   23680:	464b      	mov	r3, r9
   23682:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
   23686:	f843 0b04 	str.w	r0, [r3], #4
   2368a:	eba3 0009 	sub.w	r0, r3, r9
   2368e:	4288      	cmp	r0, r1
   23690:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
   23694:	d3f5      	bcc.n	23682 <am_hal_ble_blocking_transfer.part.0+0x222>
   23696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   23698:	440b      	add	r3, r1
   2369a:	459c      	cmp	ip, r3
   2369c:	63e3      	str	r3, [r4, #60]	; 0x3c
   2369e:	d8da      	bhi.n	23656 <am_hal_ble_blocking_transfer.part.0+0x1f6>
   236a0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   236a4:	9801      	ldr	r0, [sp, #4]
   236a6:	f001 fe1b 	bl	252e0 <am_hal_interrupt_master_set>
   236aa:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   236ae:	07da      	lsls	r2, r3, #31
   236b0:	bf58      	it	pl
   236b2:	f242 7510 	movwpl	r5, #10000	; 0x2710
   236b6:	d503      	bpl.n	236c0 <am_hal_ble_blocking_transfer.part.0+0x260>
   236b8:	e009      	b.n	236ce <am_hal_ble_blocking_transfer.part.0+0x26e>
   236ba:	3d01      	subs	r5, #1
   236bc:	f000 80fc 	beq.w	238b8 <am_hal_ble_blocking_transfer.part.0+0x458>
   236c0:	2010      	movs	r0, #16
   236c2:	f001 fbfb 	bl	24ebc <am_hal_flash_delay>
   236c6:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   236ca:	07db      	lsls	r3, r3, #31
   236cc:	d5f5      	bpl.n	236ba <am_hal_ble_blocking_transfer.part.0+0x25a>
   236ce:	4a22      	ldr	r2, [pc, #136]	; (23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   236d0:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   236d4:	f041 0101 	orr.w	r1, r1, #1
   236d8:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   236dc:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   236e0:	2300      	movs	r3, #0
   236e2:	f041 0102 	orr.w	r1, r1, #2
   236e6:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   236ea:	60e3      	str	r3, [r4, #12]
   236ec:	607b      	str	r3, [r7, #4]
   236ee:	60bb      	str	r3, [r7, #8]
   236f0:	60fb      	str	r3, [r7, #12]
   236f2:	613b      	str	r3, [r7, #16]
   236f4:	617b      	str	r3, [r7, #20]
   236f6:	63e3      	str	r3, [r4, #60]	; 0x3c
   236f8:	7ab1      	ldrb	r1, [r6, #10]
   236fa:	2901      	cmp	r1, #1
   236fc:	f000 80c2 	beq.w	23884 <am_hal_ble_blocking_transfer.part.0+0x424>
   23700:	2902      	cmp	r1, #2
   23702:	d104      	bne.n	2370e <am_hal_ble_blocking_transfer.part.0+0x2ae>
   23704:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   23708:	b10a      	cbz	r2, 2370e <am_hal_ble_blocking_transfer.part.0+0x2ae>
   2370a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2370e:	2300      	movs	r3, #0
   23710:	4a11      	ldr	r2, [pc, #68]	; (23758 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   23712:	4618      	mov	r0, r3
   23714:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   23718:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   2371c:	b005      	add	sp, #20
   2371e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23722:	7973      	ldrb	r3, [r6, #5]
   23724:	7935      	ldrb	r5, [r6, #4]
   23726:	ea4f 6903 	mov.w	r9, r3, lsl #24
   2372a:	e76e      	b.n	2360a <am_hal_ble_blocking_transfer.part.0+0x1aa>
   2372c:	7933      	ldrb	r3, [r6, #4]
   2372e:	2500      	movs	r5, #0
   23730:	ea4f 6903 	mov.w	r9, r3, lsl #24
   23734:	e769      	b.n	2360a <am_hal_ble_blocking_transfer.part.0+0x1aa>
   23736:	88b5      	ldrh	r5, [r6, #4]
   23738:	79b3      	ldrb	r3, [r6, #6]
   2373a:	ba6d      	rev16	r5, r5
   2373c:	b2ad      	uxth	r5, r5
   2373e:	ea4f 6903 	mov.w	r9, r3, lsl #24
   23742:	e762      	b.n	2360a <am_hal_ble_blocking_transfer.part.0+0x1aa>
   23744:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   23748:	e747      	b.n	235da <am_hal_ble_blocking_transfer.part.0+0x17a>
   2374a:	f001 fdc9 	bl	252e0 <am_hal_interrupt_master_set>
   2374e:	20a0      	movs	r0, #160	; 0xa0
   23750:	3501      	adds	r5, #1
   23752:	f001 fbb3 	bl	24ebc <am_hal_flash_delay>
   23756:	e736      	b.n	235c6 <am_hal_ble_blocking_transfer.part.0+0x166>
   23758:	5000c000 	.word	0x5000c000
   2375c:	01775230 	.word	0x01775230
   23760:	08000001 	.word	0x08000001
   23764:	000fff00 	.word	0x000fff00
   23768:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   2376c:	d203      	bcs.n	23776 <am_hal_ble_blocking_transfer.part.0+0x316>
   2376e:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   23772:	0619      	lsls	r1, r3, #24
   23774:	d5eb      	bpl.n	2374e <am_hal_ble_blocking_transfer.part.0+0x2ee>
   23776:	6823      	ldr	r3, [r4, #0]
   23778:	4a6a      	ldr	r2, [pc, #424]	; (23924 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   2377a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2377e:	4293      	cmp	r3, r2
   23780:	4b69      	ldr	r3, [pc, #420]	; (23928 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   23782:	f040 809b 	bne.w	238bc <am_hal_ble_blocking_transfer.part.0+0x45c>
   23786:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   2378a:	4868      	ldr	r0, [pc, #416]	; (2392c <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   2378c:	2102      	movs	r1, #2
   2378e:	f361 0283 	bfi	r2, r1, #2, #2
   23792:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   23796:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2379a:	f36f 0241 	bfc	r2, #1, #1
   2379e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   237a2:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   237a6:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   237aa:	f361 0283 	bfi	r2, r1, #2, #2
   237ae:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   237b2:	b005      	add	sp, #20
   237b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237b8:	ebac 0103 	sub.w	r1, ip, r3
   237bc:	68e0      	ldr	r0, [r4, #12]
   237be:	f023 0303 	bic.w	r3, r3, #3
   237c2:	e75b      	b.n	2367c <am_hal_ble_blocking_transfer.part.0+0x21c>
   237c4:	7ab3      	ldrb	r3, [r6, #10]
   237c6:	2b01      	cmp	r3, #1
   237c8:	f47f af3c 	bne.w	23644 <am_hal_ble_blocking_transfer.part.0+0x1e4>
   237cc:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   237d0:	68e5      	ldr	r5, [r4, #12]
   237d2:	f8df b154 	ldr.w	fp, [pc, #340]	; 23928 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   237d6:	f1b9 0f00 	cmp.w	r9, #0
   237da:	d019      	beq.n	23810 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   237dc:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   237e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   237e4:	2b03      	cmp	r3, #3
   237e6:	d835      	bhi.n	23854 <am_hal_ble_blocking_transfer.part.0+0x3f4>
   237e8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 23938 <am_hal_ble_blocking_transfer.part.0+0x4d8>
   237ec:	e00a      	b.n	23804 <am_hal_ble_blocking_transfer.part.0+0x3a4>
   237ee:	f1ba 0a01 	subs.w	sl, sl, #1
   237f2:	d00d      	beq.n	23810 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   237f4:	f001 fb62 	bl	24ebc <am_hal_flash_delay>
   237f8:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   237fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   23800:	2b03      	cmp	r3, #3
   23802:	d827      	bhi.n	23854 <am_hal_ble_blocking_transfer.part.0+0x3f4>
   23804:	f8db 3224 	ldr.w	r3, [fp, #548]	; 0x224
   23808:	07db      	lsls	r3, r3, #31
   2380a:	f04f 0010 	mov.w	r0, #16
   2380e:	d5ee      	bpl.n	237ee <am_hal_ble_blocking_transfer.part.0+0x38e>
   23810:	f8df 9114 	ldr.w	r9, [pc, #276]	; 23928 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   23814:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   23818:	07d8      	lsls	r0, r3, #31
   2381a:	bf58      	it	pl
   2381c:	f44f 65fa 	movpl.w	r5, #2000	; 0x7d0
   23820:	d408      	bmi.n	23834 <am_hal_ble_blocking_transfer.part.0+0x3d4>
   23822:	2010      	movs	r0, #16
   23824:	f001 fb4a 	bl	24ebc <am_hal_flash_delay>
   23828:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   2382c:	07d9      	lsls	r1, r3, #31
   2382e:	d401      	bmi.n	23834 <am_hal_ble_blocking_transfer.part.0+0x3d4>
   23830:	3d01      	subs	r5, #1
   23832:	d1f6      	bne.n	23822 <am_hal_ble_blocking_transfer.part.0+0x3c2>
   23834:	6823      	ldr	r3, [r4, #0]
   23836:	4a3b      	ldr	r2, [pc, #236]	; (23924 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   23838:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2383c:	4293      	cmp	r3, r2
   2383e:	f47f af2f 	bne.w	236a0 <am_hal_ble_blocking_transfer.part.0+0x240>
   23842:	4b39      	ldr	r3, [pc, #228]	; (23928 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   23844:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   23848:	2102      	movs	r1, #2
   2384a:	f361 0283 	bfi	r2, r1, #2, #2
   2384e:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   23852:	e725      	b.n	236a0 <am_hal_ble_blocking_transfer.part.0+0x240>
   23854:	f009 0003 	and.w	r0, r9, #3
   23858:	462a      	mov	r2, r5
   2385a:	f852 1b04 	ldr.w	r1, [r2], #4
   2385e:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
   23862:	4581      	cmp	r9, r0
   23864:	eba5 0102 	sub.w	r1, r5, r2
   23868:	4419      	add	r1, r3
   2386a:	f1a9 0904 	sub.w	r9, r9, #4
   2386e:	d005      	beq.n	2387c <am_hal_ble_blocking_transfer.part.0+0x41c>
   23870:	2903      	cmp	r1, #3
   23872:	d905      	bls.n	23880 <am_hal_ble_blocking_transfer.part.0+0x420>
   23874:	f1b9 0f00 	cmp.w	r9, #0
   23878:	d1ef      	bne.n	2385a <am_hal_ble_blocking_transfer.part.0+0x3fa>
   2387a:	e7c9      	b.n	23810 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   2387c:	f04f 0900 	mov.w	r9, #0
   23880:	4615      	mov	r5, r2
   23882:	e7a8      	b.n	237d6 <am_hal_ble_blocking_transfer.part.0+0x376>
   23884:	6823      	ldr	r3, [r4, #0]
   23886:	4927      	ldr	r1, [pc, #156]	; (23924 <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   23888:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2388c:	428b      	cmp	r3, r1
   2388e:	d106      	bne.n	2389e <am_hal_ble_blocking_transfer.part.0+0x43e>
   23890:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   23894:	2102      	movs	r1, #2
   23896:	f361 0383 	bfi	r3, r1, #2, #2
   2389a:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   2389e:	2301      	movs	r3, #1
   238a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   238a4:	e733      	b.n	2370e <am_hal_ble_blocking_transfer.part.0+0x2ae>
   238a6:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   238aa:	68e5      	ldr	r5, [r4, #12]
   238ac:	2a03      	cmp	r2, #3
   238ae:	d890      	bhi.n	237d2 <am_hal_ble_blocking_transfer.part.0+0x372>
   238b0:	e8df f002 	tbb	[pc, r2]
   238b4:	2a303417 	.word	0x2a303417
   238b8:	481d      	ldr	r0, [pc, #116]	; (23930 <am_hal_ble_blocking_transfer.part.0+0x4d0>)
   238ba:	e63a      	b.n	23532 <am_hal_ble_blocking_transfer.part.0+0xd2>
   238bc:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   238c0:	481a      	ldr	r0, [pc, #104]	; (2392c <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   238c2:	f36f 0241 	bfc	r2, #1, #1
   238c6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   238ca:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   238ce:	e630      	b.n	23532 <am_hal_ble_blocking_transfer.part.0+0xd2>
   238d0:	f64b 3080 	movw	r0, #48000	; 0xbb80
   238d4:	f001 faf2 	bl	24ebc <am_hal_flash_delay>
   238d8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   238dc:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
   238e0:	e656      	b.n	23590 <am_hal_ble_blocking_transfer.part.0+0x130>
   238e2:	2200      	movs	r2, #0
   238e4:	4613      	mov	r3, r2
   238e6:	f001 0160 	and.w	r1, r1, #96	; 0x60
   238ea:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
   238ee:	430b      	orrs	r3, r1
   238f0:	4910      	ldr	r1, [pc, #64]	; (23934 <am_hal_ble_blocking_transfer.part.0+0x4d4>)
   238f2:	ea01 2000 	and.w	r0, r1, r0, lsl #8
   238f6:	4303      	orrs	r3, r0
   238f8:	490b      	ldr	r1, [pc, #44]	; (23928 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   238fa:	f043 0301 	orr.w	r3, r3, #1
   238fe:	f8c1 2214 	str.w	r2, [r1, #532]	; 0x214
   23902:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   23906:	e764      	b.n	237d2 <am_hal_ble_blocking_transfer.part.0+0x372>
   23908:	88b2      	ldrh	r2, [r6, #4]
   2390a:	79b3      	ldrb	r3, [r6, #6]
   2390c:	ba52      	rev16	r2, r2
   2390e:	b292      	uxth	r2, r2
   23910:	061b      	lsls	r3, r3, #24
   23912:	e7e8      	b.n	238e6 <am_hal_ble_blocking_transfer.part.0+0x486>
   23914:	7973      	ldrb	r3, [r6, #5]
   23916:	7932      	ldrb	r2, [r6, #4]
   23918:	061b      	lsls	r3, r3, #24
   2391a:	e7e4      	b.n	238e6 <am_hal_ble_blocking_transfer.part.0+0x486>
   2391c:	7933      	ldrb	r3, [r6, #4]
   2391e:	2200      	movs	r2, #0
   23920:	061b      	lsls	r3, r3, #24
   23922:	e7e0      	b.n	238e6 <am_hal_ble_blocking_transfer.part.0+0x486>
   23924:	01775230 	.word	0x01775230
   23928:	5000c000 	.word	0x5000c000
   2392c:	08000002 	.word	0x08000002
   23930:	08000009 	.word	0x08000009
   23934:	000fff00 	.word	0x000fff00
   23938:	0007a121 	.word	0x0007a121

0002393c <am_hal_ble_initialize>:
   2393c:	bb58      	cbnz	r0, 23996 <am_hal_ble_initialize+0x5a>
   2393e:	b361      	cbz	r1, 2399a <am_hal_ble_initialize+0x5e>
   23940:	4b17      	ldr	r3, [pc, #92]	; (239a0 <am_hal_ble_initialize+0x64>)
   23942:	78d8      	ldrb	r0, [r3, #3]
   23944:	b410      	push	{r4}
   23946:	f3c0 0400 	ubfx	r4, r0, #0, #1
   2394a:	f010 0001 	ands.w	r0, r0, #1
   2394e:	d11e      	bne.n	2398e <am_hal_ble_initialize+0x52>
   23950:	681a      	ldr	r2, [r3, #0]
   23952:	f883 4047 	strb.w	r4, [r3, #71]	; 0x47
   23956:	e9c3 0004 	strd	r0, r0, [r3, #16]
   2395a:	e9c3 0006 	strd	r0, r0, [r3, #24]
   2395e:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
   23962:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
   23966:	721c      	strb	r4, [r3, #8]
   23968:	4c0e      	ldr	r4, [pc, #56]	; (239a4 <am_hal_ble_initialize+0x68>)
   2396a:	60d8      	str	r0, [r3, #12]
   2396c:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   23970:	6258      	str	r0, [r3, #36]	; 0x24
   23972:	6218      	str	r0, [r3, #32]
   23974:	4314      	orrs	r4, r2
   23976:	6398      	str	r0, [r3, #56]	; 0x38
   23978:	601c      	str	r4, [r3, #0]
   2397a:	63d8      	str	r0, [r3, #60]	; 0x3c
   2397c:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
   23980:	f8c3 0043 	str.w	r0, [r3, #67]	; 0x43
   23984:	6058      	str	r0, [r3, #4]
   23986:	f85d 4b04 	ldr.w	r4, [sp], #4
   2398a:	600b      	str	r3, [r1, #0]
   2398c:	4770      	bx	lr
   2398e:	2007      	movs	r0, #7
   23990:	f85d 4b04 	ldr.w	r4, [sp], #4
   23994:	4770      	bx	lr
   23996:	2005      	movs	r0, #5
   23998:	4770      	bx	lr
   2399a:	2006      	movs	r0, #6
   2399c:	4770      	bx	lr
   2399e:	bf00      	nop
   239a0:	1000a2d4 	.word	0x1000a2d4
   239a4:	01775230 	.word	0x01775230

000239a8 <am_hal_ble_deinitialize>:
   239a8:	b128      	cbz	r0, 239b6 <am_hal_ble_deinitialize+0xe>
   239aa:	6803      	ldr	r3, [r0, #0]
   239ac:	4a0d      	ldr	r2, [pc, #52]	; (239e4 <am_hal_ble_deinitialize+0x3c>)
   239ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   239b2:	4293      	cmp	r3, r2
   239b4:	d001      	beq.n	239ba <am_hal_ble_deinitialize+0x12>
   239b6:	2002      	movs	r0, #2
   239b8:	4770      	bx	lr
   239ba:	6802      	ldr	r2, [r0, #0]
   239bc:	2300      	movs	r3, #0
   239be:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   239c2:	e9c0 2300 	strd	r2, r3, [r0]
   239c6:	60c3      	str	r3, [r0, #12]
   239c8:	6103      	str	r3, [r0, #16]
   239ca:	6143      	str	r3, [r0, #20]
   239cc:	6183      	str	r3, [r0, #24]
   239ce:	61c3      	str	r3, [r0, #28]
   239d0:	6203      	str	r3, [r0, #32]
   239d2:	63c3      	str	r3, [r0, #60]	; 0x3c
   239d4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
   239d8:	f8c0 3043 	str.w	r3, [r0, #67]	; 0x43
   239dc:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   239e0:	4618      	mov	r0, r3
   239e2:	4770      	bx	lr
   239e4:	01775230 	.word	0x01775230

000239e8 <am_hal_ble_config>:
   239e8:	2800      	cmp	r0, #0
   239ea:	d04e      	beq.n	23a8a <am_hal_ble_config+0xa2>
   239ec:	6803      	ldr	r3, [r0, #0]
   239ee:	4a3e      	ldr	r2, [pc, #248]	; (23ae8 <am_hal_ble_config+0x100>)
   239f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   239f4:	4293      	cmp	r3, r2
   239f6:	d148      	bne.n	23a8a <am_hal_ble_config+0xa2>
   239f8:	b470      	push	{r4, r5, r6}
   239fa:	4b3c      	ldr	r3, [pc, #240]	; (23aec <am_hal_ble_config+0x104>)
   239fc:	6844      	ldr	r4, [r0, #4]
   239fe:	2203      	movs	r2, #3
   23a00:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   23a04:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   23a08:	f36f 4251 	bfc	r2, #17, #1
   23a0c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   23a10:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   23a14:	f36f 4210 	bfc	r2, #16, #1
   23a18:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   23a1c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   23a20:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   23a24:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   23a28:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   23a2c:	6888      	ldr	r0, [r1, #8]
   23a2e:	f360 220d 	bfi	r2, r0, #8, #6
   23a32:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   23a36:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   23a3a:	6848      	ldr	r0, [r1, #4]
   23a3c:	f360 0205 	bfi	r2, r0, #0, #6
   23a40:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   23a44:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   23a48:	f042 0201 	orr.w	r2, r2, #1
   23a4c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   23a50:	680b      	ldr	r3, [r1, #0]
   23a52:	68c8      	ldr	r0, [r1, #12]
   23a54:	4a25      	ldr	r2, [pc, #148]	; (23aec <am_hal_ble_config+0x104>)
   23a56:	021b      	lsls	r3, r3, #8
   23a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   23a5c:	2802      	cmp	r0, #2
   23a5e:	bf08      	it	eq
   23a60:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   23a64:	f043 0301 	orr.w	r3, r3, #1
   23a68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   23a6c:	4b20      	ldr	r3, [pc, #128]	; (23af0 <am_hal_ble_config+0x108>)
   23a6e:	68db      	ldr	r3, [r3, #12]
   23a70:	b2db      	uxtb	r3, r3
   23a72:	2b12      	cmp	r3, #18
   23a74:	d00b      	beq.n	23a8e <am_hal_ble_config+0xa6>
   23a76:	4b1f      	ldr	r3, [pc, #124]	; (23af4 <am_hal_ble_config+0x10c>)
   23a78:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   23a7c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   23a80:	7e8b      	ldrb	r3, [r1, #26]
   23a82:	7223      	strb	r3, [r4, #8]
   23a84:	2000      	movs	r0, #0
   23a86:	bc70      	pop	{r4, r5, r6}
   23a88:	4770      	bx	lr
   23a8a:	2002      	movs	r0, #2
   23a8c:	4770      	bx	lr
   23a8e:	4e1a      	ldr	r6, [pc, #104]	; (23af8 <am_hal_ble_config+0x110>)
   23a90:	68f2      	ldr	r2, [r6, #12]
   23a92:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   23a96:	690b      	ldr	r3, [r1, #16]
   23a98:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
   23a9c:	690b      	ldr	r3, [r1, #16]
   23a9e:	0a1b      	lsrs	r3, r3, #8
   23aa0:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
   23aa4:	694b      	ldr	r3, [r1, #20]
   23aa6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
   23aaa:	694b      	ldr	r3, [r1, #20]
   23aac:	0a1b      	lsrs	r3, r3, #8
   23aae:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
   23ab2:	7e4b      	ldrb	r3, [r1, #25]
   23ab4:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
   23ab8:	7e0b      	ldrb	r3, [r1, #24]
   23aba:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
   23abe:	6873      	ldr	r3, [r6, #4]
   23ac0:	b183      	cbz	r3, 23ae4 <am_hal_ble_config+0xfc>
   23ac2:	3b01      	subs	r3, #1
   23ac4:	4d0d      	ldr	r5, [pc, #52]	; (23afc <am_hal_ble_config+0x114>)
   23ac6:	eb02 0c03 	add.w	ip, r2, r3
   23aca:	3a01      	subs	r2, #1
   23acc:	2300      	movs	r3, #0
   23ace:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   23ad2:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   23ad6:	4562      	cmp	r2, ip
   23ad8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
   23adc:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   23ae0:	b29b      	uxth	r3, r3
   23ae2:	d1f4      	bne.n	23ace <am_hal_ble_config+0xe6>
   23ae4:	60b3      	str	r3, [r6, #8]
   23ae6:	e7c6      	b.n	23a76 <am_hal_ble_config+0x8e>
   23ae8:	01775230 	.word	0x01775230
   23aec:	5000c000 	.word	0x5000c000
   23af0:	40020000 	.word	0x40020000
   23af4:	1000a2d4 	.word	0x1000a2d4
   23af8:	10002d94 	.word	0x10002d94
   23afc:	0002827c 	.word	0x0002827c

00023b00 <am_hal_ble_power_control>:
   23b00:	b538      	push	{r3, r4, r5, lr}
   23b02:	2800      	cmp	r0, #0
   23b04:	f000 8086 	beq.w	23c14 <am_hal_ble_power_control+0x114>
   23b08:	6803      	ldr	r3, [r0, #0]
   23b0a:	4a50      	ldr	r2, [pc, #320]	; (23c4c <am_hal_ble_power_control+0x14c>)
   23b0c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23b10:	4293      	cmp	r3, r2
   23b12:	d17f      	bne.n	23c14 <am_hal_ble_power_control+0x114>
   23b14:	2900      	cmp	r1, #0
   23b16:	d154      	bne.n	23bc2 <am_hal_ble_power_control+0xc2>
   23b18:	4b4d      	ldr	r3, [pc, #308]	; (23c50 <am_hal_ble_power_control+0x150>)
   23b1a:	699b      	ldr	r3, [r3, #24]
   23b1c:	05db      	lsls	r3, r3, #23
   23b1e:	d44d      	bmi.n	23bbc <am_hal_ble_power_control+0xbc>
   23b20:	4d4c      	ldr	r5, [pc, #304]	; (23c54 <am_hal_ble_power_control+0x154>)
   23b22:	69ab      	ldr	r3, [r5, #24]
   23b24:	f043 0301 	orr.w	r3, r3, #1
   23b28:	61ab      	str	r3, [r5, #24]
   23b2a:	69ab      	ldr	r3, [r5, #24]
   23b2c:	f003 0307 	and.w	r3, r3, #7
   23b30:	2b07      	cmp	r3, #7
   23b32:	d00c      	beq.n	23b4e <am_hal_ble_power_control+0x4e>
   23b34:	4c48      	ldr	r4, [pc, #288]	; (23c58 <am_hal_ble_power_control+0x158>)
   23b36:	e002      	b.n	23b3e <am_hal_ble_power_control+0x3e>
   23b38:	3c01      	subs	r4, #1
   23b3a:	f000 8083 	beq.w	23c44 <am_hal_ble_power_control+0x144>
   23b3e:	2010      	movs	r0, #16
   23b40:	f001 f9bc 	bl	24ebc <am_hal_flash_delay>
   23b44:	69ab      	ldr	r3, [r5, #24]
   23b46:	f003 0307 	and.w	r3, r3, #7
   23b4a:	2b07      	cmp	r3, #7
   23b4c:	d1f4      	bne.n	23b38 <am_hal_ble_power_control+0x38>
   23b4e:	200e      	movs	r0, #14
   23b50:	f001 fca2 	bl	25498 <am_hal_pwrctrl_periph_enable>
   23b54:	2800      	cmp	r0, #0
   23b56:	d173      	bne.n	23c40 <am_hal_ble_power_control+0x140>
   23b58:	4b40      	ldr	r3, [pc, #256]	; (23c5c <am_hal_ble_power_control+0x15c>)
   23b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   23b5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   23b62:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   23b66:	4a3b      	ldr	r2, [pc, #236]	; (23c54 <am_hal_ble_power_control+0x154>)
   23b68:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   23b6c:	f360 01df 	bfi	r1, r0, #3, #29
   23b70:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   23b74:	68d3      	ldr	r3, [r2, #12]
   23b76:	b2db      	uxtb	r3, r3
   23b78:	2b11      	cmp	r3, #17
   23b7a:	d85a      	bhi.n	23c32 <am_hal_ble_power_control+0x132>
   23b7c:	2304      	movs	r3, #4
   23b7e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   23b82:	4d36      	ldr	r5, [pc, #216]	; (23c5c <am_hal_ble_power_control+0x15c>)
   23b84:	4836      	ldr	r0, [pc, #216]	; (23c60 <am_hal_ble_power_control+0x160>)
   23b86:	f001 f999 	bl	24ebc <am_hal_flash_delay>
   23b8a:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   23b8e:	f043 0301 	orr.w	r3, r3, #1
   23b92:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   23b96:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   23b9a:	f3c3 2302 	ubfx	r3, r3, #8, #3
   23b9e:	2b03      	cmp	r3, #3
   23ba0:	d00c      	beq.n	23bbc <am_hal_ble_power_control+0xbc>
   23ba2:	4c30      	ldr	r4, [pc, #192]	; (23c64 <am_hal_ble_power_control+0x164>)
   23ba4:	e001      	b.n	23baa <am_hal_ble_power_control+0xaa>
   23ba6:	3c01      	subs	r4, #1
   23ba8:	d04e      	beq.n	23c48 <am_hal_ble_power_control+0x148>
   23baa:	2010      	movs	r0, #16
   23bac:	f001 f986 	bl	24ebc <am_hal_flash_delay>
   23bb0:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   23bb4:	f3c3 2302 	ubfx	r3, r3, #8, #3
   23bb8:	2b03      	cmp	r3, #3
   23bba:	d1f4      	bne.n	23ba6 <am_hal_ble_power_control+0xa6>
   23bbc:	2400      	movs	r4, #0
   23bbe:	4620      	mov	r0, r4
   23bc0:	bd38      	pop	{r3, r4, r5, pc}
   23bc2:	2901      	cmp	r1, #1
   23bc4:	d129      	bne.n	23c1a <am_hal_ble_power_control+0x11a>
   23bc6:	4b25      	ldr	r3, [pc, #148]	; (23c5c <am_hal_ble_power_control+0x15c>)
   23bc8:	4a22      	ldr	r2, [pc, #136]	; (23c54 <am_hal_ble_power_control+0x154>)
   23bca:	2100      	movs	r1, #0
   23bcc:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   23bd0:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   23bd4:	f361 00df 	bfi	r0, r1, #3, #29
   23bd8:	f8c3 0410 	str.w	r0, [r3, #1040]	; 0x410
   23bdc:	68d3      	ldr	r3, [r2, #12]
   23bde:	b2db      	uxtb	r3, r3
   23be0:	2b11      	cmp	r3, #17
   23be2:	d91d      	bls.n	23c20 <am_hal_ble_power_control+0x120>
   23be4:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   23be8:	f361 1345 	bfi	r3, r1, #5, #1
   23bec:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   23bf0:	4b1a      	ldr	r3, [pc, #104]	; (23c5c <am_hal_ble_power_control+0x15c>)
   23bf2:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   23bf6:	f36f 0200 	bfc	r2, #0, #1
   23bfa:	200e      	movs	r0, #14
   23bfc:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   23c00:	f001 fc74 	bl	254ec <am_hal_pwrctrl_periph_disable>
   23c04:	4604      	mov	r4, r0
   23c06:	b990      	cbnz	r0, 23c2e <am_hal_ble_power_control+0x12e>
   23c08:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   23c0c:	f001 f956 	bl	24ebc <am_hal_flash_delay>
   23c10:	4620      	mov	r0, r4
   23c12:	bd38      	pop	{r3, r4, r5, pc}
   23c14:	2402      	movs	r4, #2
   23c16:	4620      	mov	r0, r4
   23c18:	bd38      	pop	{r3, r4, r5, pc}
   23c1a:	2407      	movs	r4, #7
   23c1c:	4620      	mov	r0, r4
   23c1e:	bd38      	pop	{r3, r4, r5, pc}
   23c20:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
   23c24:	f023 0304 	bic.w	r3, r3, #4
   23c28:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   23c2c:	e7e0      	b.n	23bf0 <am_hal_ble_power_control+0xf0>
   23c2e:	4c0e      	ldr	r4, [pc, #56]	; (23c68 <am_hal_ble_power_control+0x168>)
   23c30:	e7c5      	b.n	23bbe <am_hal_ble_power_control+0xbe>
   23c32:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   23c36:	f043 0320 	orr.w	r3, r3, #32
   23c3a:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   23c3e:	e7a0      	b.n	23b82 <am_hal_ble_power_control+0x82>
   23c40:	4c0a      	ldr	r4, [pc, #40]	; (23c6c <am_hal_ble_power_control+0x16c>)
   23c42:	e7bc      	b.n	23bbe <am_hal_ble_power_control+0xbe>
   23c44:	4c0a      	ldr	r4, [pc, #40]	; (23c70 <am_hal_ble_power_control+0x170>)
   23c46:	e7ba      	b.n	23bbe <am_hal_ble_power_control+0xbe>
   23c48:	4c0a      	ldr	r4, [pc, #40]	; (23c74 <am_hal_ble_power_control+0x174>)
   23c4a:	e7b8      	b.n	23bbe <am_hal_ble_power_control+0xbe>
   23c4c:	01775230 	.word	0x01775230
   23c50:	40021000 	.word	0x40021000
   23c54:	40020000 	.word	0x40020000
   23c58:	000186a0 	.word	0x000186a0
   23c5c:	5000c000 	.word	0x5000c000
   23c60:	00013880 	.word	0x00013880
   23c64:	000f4240 	.word	0x000f4240
   23c68:	08000006 	.word	0x08000006
   23c6c:	08000007 	.word	0x08000007
   23c70:	08000005 	.word	0x08000005
   23c74:	08000008 	.word	0x08000008

00023c78 <am_hal_ble_patch_apply>:
   23c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c7c:	b093      	sub	sp, #76	; 0x4c
   23c7e:	2800      	cmp	r0, #0
   23c80:	d05c      	beq.n	23d3c <am_hal_ble_patch_apply+0xc4>
   23c82:	6803      	ldr	r3, [r0, #0]
   23c84:	4ab7      	ldr	r2, [pc, #732]	; (23f64 <am_hal_ble_patch_apply+0x2ec>)
   23c86:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23c8a:	4293      	cmp	r3, r2
   23c8c:	4605      	mov	r5, r0
   23c8e:	d155      	bne.n	23d3c <am_hal_ble_patch_apply+0xc4>
   23c90:	4688      	mov	r8, r1
   23c92:	6809      	ldr	r1, [r1, #0]
   23c94:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   23c98:	f88d 1009 	strb.w	r1, [sp, #9]
   23c9c:	2001      	movs	r0, #1
   23c9e:	f240 21f1 	movw	r1, #753	; 0x2f1
   23ca2:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 23f78 <am_hal_ble_patch_apply+0x300>
   23ca6:	f88d 0008 	strb.w	r0, [sp, #8]
   23caa:	f8ad 100a 	strh.w	r1, [sp, #10]
   23cae:	f8ad 200c 	strh.w	r2, [sp, #12]
   23cb2:	f241 3788 	movw	r7, #5000	; 0x1388
   23cb6:	2400      	movs	r4, #0
   23cb8:	4699      	mov	r9, r3
   23cba:	aa02      	add	r2, sp, #8
   23cbc:	454b      	cmp	r3, r9
   23cbe:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
   23cc2:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   23cc6:	a90c      	add	r1, sp, #48	; 0x30
   23cc8:	4628      	mov	r0, r5
   23cca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   23cce:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
   23cd2:	d014      	beq.n	23cfe <am_hal_ble_patch_apply+0x86>
   23cd4:	4ba4      	ldr	r3, [pc, #656]	; (23f68 <am_hal_ble_patch_apply+0x2f0>)
   23cd6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   23cda:	061b      	lsls	r3, r3, #24
   23cdc:	d41a      	bmi.n	23d14 <am_hal_ble_patch_apply+0x9c>
   23cde:	4ea3      	ldr	r6, [pc, #652]	; (23f6c <am_hal_ble_patch_apply+0x2f4>)
   23ce0:	4ca1      	ldr	r4, [pc, #644]	; (23f68 <am_hal_ble_patch_apply+0x2f0>)
   23ce2:	2010      	movs	r0, #16
   23ce4:	f001 f8ea 	bl	24ebc <am_hal_flash_delay>
   23ce8:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   23cec:	061f      	lsls	r7, r3, #24
   23cee:	d411      	bmi.n	23d14 <am_hal_ble_patch_apply+0x9c>
   23cf0:	3e01      	subs	r6, #1
   23cf2:	d1f6      	bne.n	23ce2 <am_hal_ble_patch_apply+0x6a>
   23cf4:	4e9e      	ldr	r6, [pc, #632]	; (23f70 <am_hal_ble_patch_apply+0x2f8>)
   23cf6:	4630      	mov	r0, r6
   23cf8:	b013      	add	sp, #76	; 0x4c
   23cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23cfe:	f7ff fbaf 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   23d02:	4606      	mov	r6, r0
   23d04:	2800      	cmp	r0, #0
   23d06:	d0e5      	beq.n	23cd4 <am_hal_ble_patch_apply+0x5c>
   23d08:	3f01      	subs	r7, #1
   23d0a:	d0f4      	beq.n	23cf6 <am_hal_ble_patch_apply+0x7e>
   23d0c:	682b      	ldr	r3, [r5, #0]
   23d0e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23d12:	e7d2      	b.n	23cba <am_hal_ble_patch_apply+0x42>
   23d14:	2300      	movs	r3, #0
   23d16:	e9cd 3307 	strd	r3, r3, [sp, #28]
   23d1a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   23d1e:	930b      	str	r3, [sp, #44]	; 0x2c
   23d20:	2302      	movs	r3, #2
   23d22:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   23d26:	2305      	movs	r3, #5
   23d28:	f8ad 3020 	strh.w	r3, [sp, #32]
   23d2c:	682b      	ldr	r3, [r5, #0]
   23d2e:	f023 4b7e 	bic.w	fp, r3, #4261412864	; 0xfe000000
   23d32:	4b8c      	ldr	r3, [pc, #560]	; (23f64 <am_hal_ble_patch_apply+0x2ec>)
   23d34:	aa02      	add	r2, sp, #8
   23d36:	459b      	cmp	fp, r3
   23d38:	9206      	str	r2, [sp, #24]
   23d3a:	d004      	beq.n	23d46 <am_hal_ble_patch_apply+0xce>
   23d3c:	2602      	movs	r6, #2
   23d3e:	4630      	mov	r0, r6
   23d40:	b013      	add	sp, #76	; 0x4c
   23d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d46:	a906      	add	r1, sp, #24
   23d48:	4628      	mov	r0, r5
   23d4a:	f7ff fb89 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   23d4e:	4606      	mov	r6, r0
   23d50:	2800      	cmp	r0, #0
   23d52:	d1d0      	bne.n	23cf6 <am_hal_ble_patch_apply+0x7e>
   23d54:	f89d 1008 	ldrb.w	r1, [sp, #8]
   23d58:	f8d8 3000 	ldr.w	r3, [r8]
   23d5c:	2904      	cmp	r1, #4
   23d5e:	b2da      	uxtb	r2, r3
   23d60:	f040 80fb 	bne.w	23f5a <am_hal_ble_patch_apply+0x2e2>
   23d64:	f89d 1009 	ldrb.w	r1, [sp, #9]
   23d68:	4291      	cmp	r1, r2
   23d6a:	f040 80f6 	bne.w	23f5a <am_hal_ble_patch_apply+0x2e2>
   23d6e:	f89d 100a 	ldrb.w	r1, [sp, #10]
   23d72:	29f1      	cmp	r1, #241	; 0xf1
   23d74:	f040 80f1 	bne.w	23f5a <am_hal_ble_patch_apply+0x2e2>
   23d78:	f89d 100b 	ldrb.w	r1, [sp, #11]
   23d7c:	2901      	cmp	r1, #1
   23d7e:	f040 80ec 	bne.w	23f5a <am_hal_ble_patch_apply+0x2e2>
   23d82:	f89d 100c 	ldrb.w	r1, [sp, #12]
   23d86:	2900      	cmp	r1, #0
   23d88:	f040 80e7 	bne.w	23f5a <am_hal_ble_patch_apply+0x2e2>
   23d8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   23d90:	9101      	str	r1, [sp, #4]
   23d92:	2900      	cmp	r1, #0
   23d94:	d07d      	beq.n	23e92 <am_hal_ble_patch_apply+0x21a>
   23d96:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 23f7c <am_hal_ble_patch_apply+0x304>
   23d9a:	4f73      	ldr	r7, [pc, #460]	; (23f68 <am_hal_ble_patch_apply+0x2f0>)
   23d9c:	f88a 3001 	strb.w	r3, [sl, #1]
   23da0:	9b01      	ldr	r3, [sp, #4]
   23da2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   23da6:	4873      	ldr	r0, [pc, #460]	; (23f74 <am_hal_ble_patch_apply+0x2fc>)
   23da8:	f8cd a018 	str.w	sl, [sp, #24]
   23dac:	2b80      	cmp	r3, #128	; 0x80
   23dae:	bf28      	it	cs
   23db0:	2380      	movcs	r3, #128	; 0x80
   23db2:	4699      	mov	r9, r3
   23db4:	f88a 3003 	strb.w	r3, [sl, #3]
   23db8:	f026 0303 	bic.w	r3, r6, #3
   23dbc:	4419      	add	r1, r3
   23dbe:	2300      	movs	r3, #0
   23dc0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   23dc4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   23dc8:	930b      	str	r3, [sp, #44]	; 0x2c
   23dca:	2301      	movs	r3, #1
   23dcc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   23dd0:	f88a 3000 	strb.w	r3, [sl]
   23dd4:	f109 0304 	add.w	r3, r9, #4
   23dd8:	f8ad 3020 	strh.w	r3, [sp, #32]
   23ddc:	23f2      	movs	r3, #242	; 0xf2
   23dde:	f88a 3002 	strb.w	r3, [sl, #2]
   23de2:	464a      	mov	r2, r9
   23de4:	f7e8 f98c 	bl	c100 <memcpy>
   23de8:	682b      	ldr	r3, [r5, #0]
   23dea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23dee:	455b      	cmp	r3, fp
   23df0:	d1a4      	bne.n	23d3c <am_hal_ble_patch_apply+0xc4>
   23df2:	a906      	add	r1, sp, #24
   23df4:	4628      	mov	r0, r5
   23df6:	f7ff fb33 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   23dfa:	2800      	cmp	r0, #0
   23dfc:	f040 80cc 	bne.w	23f98 <am_hal_ble_patch_apply+0x320>
   23e00:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   23e04:	061c      	lsls	r4, r3, #24
   23e06:	d40b      	bmi.n	23e20 <am_hal_ble_patch_apply+0x1a8>
   23e08:	4c58      	ldr	r4, [pc, #352]	; (23f6c <am_hal_ble_patch_apply+0x2f4>)
   23e0a:	e002      	b.n	23e12 <am_hal_ble_patch_apply+0x19a>
   23e0c:	3c01      	subs	r4, #1
   23e0e:	f43f af71 	beq.w	23cf4 <am_hal_ble_patch_apply+0x7c>
   23e12:	2010      	movs	r0, #16
   23e14:	f001 f852 	bl	24ebc <am_hal_flash_delay>
   23e18:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   23e1c:	0618      	lsls	r0, r3, #24
   23e1e:	d5f5      	bpl.n	23e0c <am_hal_ble_patch_apply+0x194>
   23e20:	ab02      	add	r3, sp, #8
   23e22:	9306      	str	r3, [sp, #24]
   23e24:	682b      	ldr	r3, [r5, #0]
   23e26:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   23e2a:	2300      	movs	r3, #0
   23e2c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   23e30:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   23e34:	930b      	str	r3, [sp, #44]	; 0x2c
   23e36:	2302      	movs	r3, #2
   23e38:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   23e3c:	455a      	cmp	r2, fp
   23e3e:	f04f 0305 	mov.w	r3, #5
   23e42:	f8ad 3020 	strh.w	r3, [sp, #32]
   23e46:	f47f af79 	bne.w	23d3c <am_hal_ble_patch_apply+0xc4>
   23e4a:	a906      	add	r1, sp, #24
   23e4c:	4628      	mov	r0, r5
   23e4e:	f7ff fb07 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   23e52:	2800      	cmp	r0, #0
   23e54:	f040 80a0 	bne.w	23f98 <am_hal_ble_patch_apply+0x320>
   23e58:	f89d 1008 	ldrb.w	r1, [sp, #8]
   23e5c:	f8d8 3000 	ldr.w	r3, [r8]
   23e60:	2904      	cmp	r1, #4
   23e62:	b2da      	uxtb	r2, r3
   23e64:	d179      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23e66:	f89d 1009 	ldrb.w	r1, [sp, #9]
   23e6a:	4291      	cmp	r1, r2
   23e6c:	d175      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23e6e:	f89d 100a 	ldrb.w	r1, [sp, #10]
   23e72:	29f2      	cmp	r1, #242	; 0xf2
   23e74:	d171      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23e76:	f89d 100b 	ldrb.w	r1, [sp, #11]
   23e7a:	2901      	cmp	r1, #1
   23e7c:	d16d      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23e7e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   23e82:	2900      	cmp	r1, #0
   23e84:	d169      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23e86:	9901      	ldr	r1, [sp, #4]
   23e88:	ebb1 0109 	subs.w	r1, r1, r9
   23e8c:	444e      	add	r6, r9
   23e8e:	9101      	str	r1, [sp, #4]
   23e90:	d184      	bne.n	23d9c <am_hal_ble_patch_apply+0x124>
   23e92:	f88d 2009 	strb.w	r2, [sp, #9]
   23e96:	2200      	movs	r2, #0
   23e98:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   23e9c:	920d      	str	r2, [sp, #52]	; 0x34
   23e9e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   23ea2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   23ea6:	f8ad 200c 	strh.w	r2, [sp, #12]
   23eaa:	ab02      	add	r3, sp, #8
   23eac:	4a32      	ldr	r2, [pc, #200]	; (23f78 <am_hal_ble_patch_apply+0x300>)
   23eae:	930c      	str	r3, [sp, #48]	; 0x30
   23eb0:	920e      	str	r2, [sp, #56]	; 0x38
   23eb2:	682b      	ldr	r3, [r5, #0]
   23eb4:	492b      	ldr	r1, [pc, #172]	; (23f64 <am_hal_ble_patch_apply+0x2ec>)
   23eb6:	2201      	movs	r2, #1
   23eb8:	f88d 2008 	strb.w	r2, [sp, #8]
   23ebc:	f240 22f3 	movw	r2, #755	; 0x2f3
   23ec0:	f8ad 200a 	strh.w	r2, [sp, #10]
   23ec4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   23ec8:	428a      	cmp	r2, r1
   23eca:	d059      	beq.n	23f80 <am_hal_ble_patch_apply+0x308>
   23ecc:	4a26      	ldr	r2, [pc, #152]	; (23f68 <am_hal_ble_patch_apply+0x2f0>)
   23ece:	f8d2 230c 	ldr.w	r2, [r2, #780]	; 0x30c
   23ed2:	0611      	lsls	r1, r2, #24
   23ed4:	d40d      	bmi.n	23ef2 <am_hal_ble_patch_apply+0x27a>
   23ed6:	4c25      	ldr	r4, [pc, #148]	; (23f6c <am_hal_ble_patch_apply+0x2f4>)
   23ed8:	4e23      	ldr	r6, [pc, #140]	; (23f68 <am_hal_ble_patch_apply+0x2f0>)
   23eda:	e002      	b.n	23ee2 <am_hal_ble_patch_apply+0x26a>
   23edc:	3c01      	subs	r4, #1
   23ede:	f43f af09 	beq.w	23cf4 <am_hal_ble_patch_apply+0x7c>
   23ee2:	2010      	movs	r0, #16
   23ee4:	f000 ffea 	bl	24ebc <am_hal_flash_delay>
   23ee8:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   23eec:	061b      	lsls	r3, r3, #24
   23eee:	d5f5      	bpl.n	23edc <am_hal_ble_patch_apply+0x264>
   23ef0:	682b      	ldr	r3, [r5, #0]
   23ef2:	491c      	ldr	r1, [pc, #112]	; (23f64 <am_hal_ble_patch_apply+0x2ec>)
   23ef4:	aa02      	add	r2, sp, #8
   23ef6:	9206      	str	r2, [sp, #24]
   23ef8:	2200      	movs	r2, #0
   23efa:	e9cd 2207 	strd	r2, r2, [sp, #28]
   23efe:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
   23f02:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23f06:	920b      	str	r2, [sp, #44]	; 0x2c
   23f08:	2202      	movs	r2, #2
   23f0a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   23f0e:	428b      	cmp	r3, r1
   23f10:	f04f 0205 	mov.w	r2, #5
   23f14:	f8ad 2020 	strh.w	r2, [sp, #32]
   23f18:	f47f af10 	bne.w	23d3c <am_hal_ble_patch_apply+0xc4>
   23f1c:	a906      	add	r1, sp, #24
   23f1e:	4628      	mov	r0, r5
   23f20:	f7ff fa9e 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   23f24:	4606      	mov	r6, r0
   23f26:	2800      	cmp	r0, #0
   23f28:	f47f aee5 	bne.w	23cf6 <am_hal_ble_patch_apply+0x7e>
   23f2c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   23f30:	f898 3000 	ldrb.w	r3, [r8]
   23f34:	2a04      	cmp	r2, #4
   23f36:	d110      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23f38:	f89d 2009 	ldrb.w	r2, [sp, #9]
   23f3c:	429a      	cmp	r2, r3
   23f3e:	d10c      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23f40:	f89d 300a 	ldrb.w	r3, [sp, #10]
   23f44:	2bf3      	cmp	r3, #243	; 0xf3
   23f46:	d108      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23f48:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23f4c:	2b01      	cmp	r3, #1
   23f4e:	d104      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23f50:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23f54:	2b00      	cmp	r3, #0
   23f56:	f43f aece 	beq.w	23cf6 <am_hal_ble_patch_apply+0x7e>
   23f5a:	2601      	movs	r6, #1
   23f5c:	4630      	mov	r0, r6
   23f5e:	b013      	add	sp, #76	; 0x4c
   23f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f64:	01775230 	.word	0x01775230
   23f68:	5000c000 	.word	0x5000c000
   23f6c:	000f4240 	.word	0x000f4240
   23f70:	08000004 	.word	0x08000004
   23f74:	1000a254 	.word	0x1000a254
   23f78:	00010006 	.word	0x00010006
   23f7c:	1000a250 	.word	0x1000a250
   23f80:	a90c      	add	r1, sp, #48	; 0x30
   23f82:	4628      	mov	r0, r5
   23f84:	f7ff fa6c 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   23f88:	2800      	cmp	r0, #0
   23f8a:	d1e6      	bne.n	23f5a <am_hal_ble_patch_apply+0x2e2>
   23f8c:	4b03      	ldr	r3, [pc, #12]	; (23f9c <am_hal_ble_patch_apply+0x324>)
   23f8e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   23f92:	061a      	lsls	r2, r3, #24
   23f94:	d59f      	bpl.n	23ed6 <am_hal_ble_patch_apply+0x25e>
   23f96:	e7ab      	b.n	23ef0 <am_hal_ble_patch_apply+0x278>
   23f98:	4606      	mov	r6, r0
   23f9a:	e6ac      	b.n	23cf6 <am_hal_ble_patch_apply+0x7e>
   23f9c:	5000c000 	.word	0x5000c000

00023fa0 <am_hal_ble_patch_copy_end_apply>:
   23fa0:	2800      	cmp	r0, #0
   23fa2:	d076      	beq.n	24092 <am_hal_ble_patch_copy_end_apply+0xf2>
   23fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23fa8:	6803      	ldr	r3, [r0, #0]
   23faa:	4a3c      	ldr	r2, [pc, #240]	; (2409c <am_hal_ble_patch_copy_end_apply+0xfc>)
   23fac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23fb0:	4293      	cmp	r3, r2
   23fb2:	b08b      	sub	sp, #44	; 0x2c
   23fb4:	4606      	mov	r6, r0
   23fb6:	d168      	bne.n	2408a <am_hal_ble_patch_copy_end_apply+0xea>
   23fb8:	4a39      	ldr	r2, [pc, #228]	; (240a0 <am_hal_ble_patch_copy_end_apply+0x100>)
   23fba:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 240b0 <am_hal_ble_patch_copy_end_apply+0x110>
   23fbe:	9200      	str	r2, [sp, #0]
   23fc0:	2400      	movs	r4, #0
   23fc2:	f8ad 4004 	strh.w	r4, [sp, #4]
   23fc6:	f241 3588 	movw	r5, #5000	; 0x1388
   23fca:	4698      	mov	r8, r3
   23fcc:	af04      	add	r7, sp, #16
   23fce:	4543      	cmp	r3, r8
   23fd0:	e9cd 4905 	strd	r4, r9, [sp, #20]
   23fd4:	e9cd 4408 	strd	r4, r4, [sp, #32]
   23fd8:	4639      	mov	r1, r7
   23fda:	4630      	mov	r0, r6
   23fdc:	f8cd d010 	str.w	sp, [sp, #16]
   23fe0:	f88d 401c 	strb.w	r4, [sp, #28]
   23fe4:	d013      	beq.n	2400e <am_hal_ble_patch_copy_end_apply+0x6e>
   23fe6:	4b2f      	ldr	r3, [pc, #188]	; (240a4 <am_hal_ble_patch_copy_end_apply+0x104>)
   23fe8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   23fec:	061a      	lsls	r2, r3, #24
   23fee:	d419      	bmi.n	24024 <am_hal_ble_patch_copy_end_apply+0x84>
   23ff0:	4d2d      	ldr	r5, [pc, #180]	; (240a8 <am_hal_ble_patch_copy_end_apply+0x108>)
   23ff2:	4c2c      	ldr	r4, [pc, #176]	; (240a4 <am_hal_ble_patch_copy_end_apply+0x104>)
   23ff4:	2010      	movs	r0, #16
   23ff6:	f000 ff61 	bl	24ebc <am_hal_flash_delay>
   23ffa:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   23ffe:	061b      	lsls	r3, r3, #24
   24000:	d40f      	bmi.n	24022 <am_hal_ble_patch_copy_end_apply+0x82>
   24002:	3d01      	subs	r5, #1
   24004:	d1f6      	bne.n	23ff4 <am_hal_ble_patch_copy_end_apply+0x54>
   24006:	4829      	ldr	r0, [pc, #164]	; (240ac <am_hal_ble_patch_copy_end_apply+0x10c>)
   24008:	b00b      	add	sp, #44	; 0x2c
   2400a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2400e:	f7ff fa27 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   24012:	2800      	cmp	r0, #0
   24014:	d0e7      	beq.n	23fe6 <am_hal_ble_patch_copy_end_apply+0x46>
   24016:	3d01      	subs	r5, #1
   24018:	d0f6      	beq.n	24008 <am_hal_ble_patch_copy_end_apply+0x68>
   2401a:	6833      	ldr	r3, [r6, #0]
   2401c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   24020:	e7d4      	b.n	23fcc <am_hal_ble_patch_copy_end_apply+0x2c>
   24022:	af04      	add	r7, sp, #16
   24024:	6832      	ldr	r2, [r6, #0]
   24026:	491d      	ldr	r1, [pc, #116]	; (2409c <am_hal_ble_patch_copy_end_apply+0xfc>)
   24028:	f8cd d010 	str.w	sp, [sp, #16]
   2402c:	2300      	movs	r3, #0
   2402e:	e9cd 3305 	strd	r3, r3, [sp, #20]
   24032:	e9cd 3307 	strd	r3, r3, [sp, #28]
   24036:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2403a:	9309      	str	r3, [sp, #36]	; 0x24
   2403c:	2302      	movs	r3, #2
   2403e:	f88d 301a 	strb.w	r3, [sp, #26]
   24042:	428a      	cmp	r2, r1
   24044:	f04f 0305 	mov.w	r3, #5
   24048:	f8ad 3018 	strh.w	r3, [sp, #24]
   2404c:	d11d      	bne.n	2408a <am_hal_ble_patch_copy_end_apply+0xea>
   2404e:	4639      	mov	r1, r7
   24050:	4630      	mov	r0, r6
   24052:	f7ff fa05 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   24056:	2800      	cmp	r0, #0
   24058:	d1d6      	bne.n	24008 <am_hal_ble_patch_copy_end_apply+0x68>
   2405a:	f89d 3000 	ldrb.w	r3, [sp]
   2405e:	2b04      	cmp	r3, #4
   24060:	d119      	bne.n	24096 <am_hal_ble_patch_copy_end_apply+0xf6>
   24062:	f89d 3001 	ldrb.w	r3, [sp, #1]
   24066:	2bee      	cmp	r3, #238	; 0xee
   24068:	d115      	bne.n	24096 <am_hal_ble_patch_copy_end_apply+0xf6>
   2406a:	f89d 3002 	ldrb.w	r3, [sp, #2]
   2406e:	2bf1      	cmp	r3, #241	; 0xf1
   24070:	d111      	bne.n	24096 <am_hal_ble_patch_copy_end_apply+0xf6>
   24072:	f89d 3003 	ldrb.w	r3, [sp, #3]
   24076:	2b01      	cmp	r3, #1
   24078:	d10d      	bne.n	24096 <am_hal_ble_patch_copy_end_apply+0xf6>
   2407a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   2407e:	3800      	subs	r0, #0
   24080:	bf18      	it	ne
   24082:	2001      	movne	r0, #1
   24084:	b00b      	add	sp, #44	; 0x2c
   24086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2408a:	2002      	movs	r0, #2
   2408c:	b00b      	add	sp, #44	; 0x2c
   2408e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24092:	2002      	movs	r0, #2
   24094:	4770      	bx	lr
   24096:	2001      	movs	r0, #1
   24098:	e7b6      	b.n	24008 <am_hal_ble_patch_copy_end_apply+0x68>
   2409a:	bf00      	nop
   2409c:	01775230 	.word	0x01775230
   240a0:	02f1ee01 	.word	0x02f1ee01
   240a4:	5000c000 	.word	0x5000c000
   240a8:	000f4240 	.word	0x000f4240
   240ac:	08000004 	.word	0x08000004
   240b0:	00010006 	.word	0x00010006

000240b4 <am_hal_ble_default_patch_apply>:
   240b4:	4a1c      	ldr	r2, [pc, #112]	; (24128 <am_hal_ble_default_patch_apply+0x74>)
   240b6:	68d3      	ldr	r3, [r2, #12]
   240b8:	b2db      	uxtb	r3, r3
   240ba:	2b11      	cmp	r3, #17
   240bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   240c0:	4605      	mov	r5, r0
   240c2:	d02c      	beq.n	2411e <am_hal_ble_default_patch_apply+0x6a>
   240c4:	68d3      	ldr	r3, [r2, #12]
   240c6:	b2db      	uxtb	r3, r3
   240c8:	2b12      	cmp	r3, #18
   240ca:	d028      	beq.n	2411e <am_hal_ble_default_patch_apply+0x6a>
   240cc:	4a17      	ldr	r2, [pc, #92]	; (2412c <am_hal_ble_default_patch_apply+0x78>)
   240ce:	4b18      	ldr	r3, [pc, #96]	; (24130 <am_hal_ble_default_patch_apply+0x7c>)
   240d0:	6816      	ldr	r6, [r2, #0]
   240d2:	681b      	ldr	r3, [r3, #0]
   240d4:	b306      	cbz	r6, 24118 <am_hal_ble_default_patch_apply+0x64>
   240d6:	4c17      	ldr	r4, [pc, #92]	; (24134 <am_hal_ble_default_patch_apply+0x80>)
   240d8:	f1a3 0804 	sub.w	r8, r3, #4
   240dc:	2700      	movs	r7, #0
   240de:	f858 1f04 	ldr.w	r1, [r8, #4]!
   240e2:	684b      	ldr	r3, [r1, #4]
   240e4:	68ca      	ldr	r2, [r1, #12]
   240e6:	b17b      	cbz	r3, 24108 <am_hal_ble_default_patch_apply+0x54>
   240e8:	3b01      	subs	r3, #1
   240ea:	eb02 0c03 	add.w	ip, r2, r3
   240ee:	1e50      	subs	r0, r2, #1
   240f0:	2300      	movs	r3, #0
   240f2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   240f6:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   240fa:	4584      	cmp	ip, r0
   240fc:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
   24100:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   24104:	b29b      	uxth	r3, r3
   24106:	d1f4      	bne.n	240f2 <am_hal_ble_default_patch_apply+0x3e>
   24108:	608b      	str	r3, [r1, #8]
   2410a:	4628      	mov	r0, r5
   2410c:	f7ff fdb4 	bl	23c78 <am_hal_ble_patch_apply>
   24110:	b918      	cbnz	r0, 2411a <am_hal_ble_default_patch_apply+0x66>
   24112:	3701      	adds	r7, #1
   24114:	42be      	cmp	r6, r7
   24116:	d1e2      	bne.n	240de <am_hal_ble_default_patch_apply+0x2a>
   24118:	2000      	movs	r0, #0
   2411a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2411e:	4a06      	ldr	r2, [pc, #24]	; (24138 <am_hal_ble_default_patch_apply+0x84>)
   24120:	4b06      	ldr	r3, [pc, #24]	; (2413c <am_hal_ble_default_patch_apply+0x88>)
   24122:	6816      	ldr	r6, [r2, #0]
   24124:	681b      	ldr	r3, [r3, #0]
   24126:	e7d5      	b.n	240d4 <am_hal_ble_default_patch_apply+0x20>
   24128:	40020000 	.word	0x40020000
   2412c:	00029ee4 	.word	0x00029ee4
   24130:	10003e84 	.word	0x10003e84
   24134:	0002827c 	.word	0x0002827c
   24138:	00029ac8 	.word	0x00029ac8
   2413c:	10002edc 	.word	0x10002edc

00024140 <am_hal_ble_default_trim_set_ramcode>:
   24140:	4b0f      	ldr	r3, [pc, #60]	; (24180 <am_hal_ble_default_trim_set_ramcode+0x40>)
   24142:	68db      	ldr	r3, [r3, #12]
   24144:	b2db      	uxtb	r3, r3
   24146:	2b21      	cmp	r3, #33	; 0x21
   24148:	bf0c      	ite	eq
   2414a:	4b0e      	ldreq	r3, [pc, #56]	; (24184 <am_hal_ble_default_trim_set_ramcode+0x44>)
   2414c:	4b0e      	ldrne	r3, [pc, #56]	; (24188 <am_hal_ble_default_trim_set_ramcode+0x48>)
   2414e:	68da      	ldr	r2, [r3, #12]
   24150:	4b0e      	ldr	r3, [pc, #56]	; (2418c <am_hal_ble_default_trim_set_ramcode+0x4c>)
   24152:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   24156:	ba19      	rev	r1, r3
   24158:	3301      	adds	r3, #1
   2415a:	4b0c      	ldr	r3, [pc, #48]	; (2418c <am_hal_ble_default_trim_set_ramcode+0x4c>)
   2415c:	bf18      	it	ne
   2415e:	6091      	strne	r1, [r2, #8]
   24160:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   24164:	1c59      	adds	r1, r3, #1
   24166:	d009      	beq.n	2417c <am_hal_ble_default_trim_set_ramcode+0x3c>
   24168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2416c:	ba19      	rev	r1, r3
   2416e:	3301      	adds	r3, #1
   24170:	d004      	beq.n	2417c <am_hal_ble_default_trim_set_ramcode+0x3c>
   24172:	68d3      	ldr	r3, [r2, #12]
   24174:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
   24178:	430b      	orrs	r3, r1
   2417a:	60d3      	str	r3, [r2, #12]
   2417c:	2000      	movs	r0, #0
   2417e:	4770      	bx	lr
   24180:	40020000 	.word	0x40020000
   24184:	10002fc8 	.word	0x10002fc8
   24188:	10002db4 	.word	0x10002db4
   2418c:	50023000 	.word	0x50023000

00024190 <am_hal_ble_blocking_hci_write>:
   24190:	b530      	push	{r4, r5, lr}
   24192:	b087      	sub	sp, #28
   24194:	2400      	movs	r4, #0
   24196:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2419a:	b29b      	uxth	r3, r3
   2419c:	f88d 4005 	strb.w	r4, [sp, #5]
   241a0:	f8ad 4006 	strh.w	r4, [sp, #6]
   241a4:	f88d 400c 	strb.w	r4, [sp, #12]
   241a8:	2401      	movs	r4, #1
   241aa:	9200      	str	r2, [sp, #0]
   241ac:	f88d 1004 	strb.w	r1, [sp, #4]
   241b0:	f8ad 3008 	strh.w	r3, [sp, #8]
   241b4:	f8ad 400a 	strh.w	r4, [sp, #10]
   241b8:	b128      	cbz	r0, 241c6 <am_hal_ble_blocking_hci_write+0x36>
   241ba:	6802      	ldr	r2, [r0, #0]
   241bc:	4d08      	ldr	r5, [pc, #32]	; (241e0 <am_hal_ble_blocking_hci_write+0x50>)
   241be:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   241c2:	42aa      	cmp	r2, r5
   241c4:	d002      	beq.n	241cc <am_hal_ble_blocking_hci_write+0x3c>
   241c6:	2000      	movs	r0, #0
   241c8:	b007      	add	sp, #28
   241ca:	bd30      	pop	{r4, r5, pc}
   241cc:	b109      	cbz	r1, 241d2 <am_hal_ble_blocking_hci_write+0x42>
   241ce:	f88d 4007 	strb.w	r4, [sp, #7]
   241d2:	2b00      	cmp	r3, #0
   241d4:	d0f7      	beq.n	241c6 <am_hal_ble_blocking_hci_write+0x36>
   241d6:	4669      	mov	r1, sp
   241d8:	f7ff f942 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   241dc:	b007      	add	sp, #28
   241de:	bd30      	pop	{r4, r5, pc}
   241e0:	01775230 	.word	0x01775230

000241e4 <am_hal_ble_blocking_hci_read>:
   241e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   241e6:	b089      	sub	sp, #36	; 0x24
   241e8:	ab01      	add	r3, sp, #4
   241ea:	9302      	str	r3, [sp, #8]
   241ec:	4b26      	ldr	r3, [pc, #152]	; (24288 <am_hal_ble_blocking_hci_read+0xa4>)
   241ee:	681b      	ldr	r3, [r3, #0]
   241f0:	f8ad 300c 	strh.w	r3, [sp, #12]
   241f4:	0c1b      	lsrs	r3, r3, #16
   241f6:	f88d 300e 	strb.w	r3, [sp, #14]
   241fa:	2300      	movs	r3, #0
   241fc:	e9cd 3306 	strd	r3, r3, [sp, #24]
   24200:	f88d 300f 	strb.w	r3, [sp, #15]
   24204:	f88d 3014 	strb.w	r3, [sp, #20]
   24208:	f04f 1302 	mov.w	r3, #131074	; 0x20002
   2420c:	9304      	str	r3, [sp, #16]
   2420e:	b130      	cbz	r0, 2421e <am_hal_ble_blocking_hci_read+0x3a>
   24210:	6805      	ldr	r5, [r0, #0]
   24212:	4b1e      	ldr	r3, [pc, #120]	; (2428c <am_hal_ble_blocking_hci_read+0xa8>)
   24214:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   24218:	429d      	cmp	r5, r3
   2421a:	4604      	mov	r4, r0
   2421c:	d002      	beq.n	24224 <am_hal_ble_blocking_hci_read+0x40>
   2421e:	2000      	movs	r0, #0
   24220:	b009      	add	sp, #36	; 0x24
   24222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24224:	4b1a      	ldr	r3, [pc, #104]	; (24290 <am_hal_ble_blocking_hci_read+0xac>)
   24226:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2422a:	460e      	mov	r6, r1
   2422c:	f3c3 11c0 	ubfx	r1, r3, #7, #1
   24230:	061b      	lsls	r3, r3, #24
   24232:	4617      	mov	r7, r2
   24234:	d403      	bmi.n	2423e <am_hal_ble_blocking_hci_read+0x5a>
   24236:	2f00      	cmp	r7, #0
   24238:	d0f1      	beq.n	2421e <am_hal_ble_blocking_hci_read+0x3a>
   2423a:	6039      	str	r1, [r7, #0]
   2423c:	e7ef      	b.n	2421e <am_hal_ble_blocking_hci_read+0x3a>
   2423e:	a902      	add	r1, sp, #8
   24240:	f7ff f90e 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   24244:	2800      	cmp	r0, #0
   24246:	d1eb      	bne.n	24220 <am_hal_ble_blocking_hci_read+0x3c>
   24248:	f89d 1005 	ldrb.w	r1, [sp, #5]
   2424c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   24250:	9602      	str	r6, [sp, #8]
   24252:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   24256:	b29b      	uxth	r3, r3
   24258:	f8ad 3010 	strh.w	r3, [sp, #16]
   2425c:	3b01      	subs	r3, #1
   2425e:	2bff      	cmp	r3, #255	; 0xff
   24260:	d80f      	bhi.n	24282 <am_hal_ble_blocking_hci_read+0x9e>
   24262:	6823      	ldr	r3, [r4, #0]
   24264:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   24268:	42ab      	cmp	r3, r5
   2426a:	d108      	bne.n	2427e <am_hal_ble_blocking_hci_read+0x9a>
   2426c:	a902      	add	r1, sp, #8
   2426e:	4620      	mov	r0, r4
   24270:	f7ff f8f6 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   24274:	2800      	cmp	r0, #0
   24276:	d1d3      	bne.n	24220 <am_hal_ble_blocking_hci_read+0x3c>
   24278:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2427c:	e7db      	b.n	24236 <am_hal_ble_blocking_hci_read+0x52>
   2427e:	2002      	movs	r0, #2
   24280:	e7ce      	b.n	24220 <am_hal_ble_blocking_hci_read+0x3c>
   24282:	2005      	movs	r0, #5
   24284:	e7cc      	b.n	24220 <am_hal_ble_blocking_hci_read+0x3c>
   24286:	bf00      	nop
   24288:	00025ab8 	.word	0x00025ab8
   2428c:	01775230 	.word	0x01775230
   24290:	5000c000 	.word	0x5000c000

00024294 <am_hal_ble_int_enable>:
   24294:	b128      	cbz	r0, 242a2 <am_hal_ble_int_enable+0xe>
   24296:	6803      	ldr	r3, [r0, #0]
   24298:	4a0c      	ldr	r2, [pc, #48]	; (242cc <am_hal_ble_int_enable+0x38>)
   2429a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2429e:	4293      	cmp	r3, r2
   242a0:	d001      	beq.n	242a6 <am_hal_ble_int_enable+0x12>
   242a2:	2002      	movs	r0, #2
   242a4:	4770      	bx	lr
   242a6:	b510      	push	{r4, lr}
   242a8:	b082      	sub	sp, #8
   242aa:	460c      	mov	r4, r1
   242ac:	f001 f814 	bl	252d8 <am_hal_interrupt_master_disable>
   242b0:	4b07      	ldr	r3, [pc, #28]	; (242d0 <am_hal_ble_int_enable+0x3c>)
   242b2:	9001      	str	r0, [sp, #4]
   242b4:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   242b8:	4321      	orrs	r1, r4
   242ba:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   242be:	9801      	ldr	r0, [sp, #4]
   242c0:	f001 f80e 	bl	252e0 <am_hal_interrupt_master_set>
   242c4:	2000      	movs	r0, #0
   242c6:	b002      	add	sp, #8
   242c8:	bd10      	pop	{r4, pc}
   242ca:	bf00      	nop
   242cc:	01775230 	.word	0x01775230
   242d0:	5000c000 	.word	0x5000c000

000242d4 <am_hal_ble_int_status>:
   242d4:	4b05      	ldr	r3, [pc, #20]	; (242ec <am_hal_ble_int_status+0x18>)
   242d6:	b129      	cbz	r1, 242e4 <am_hal_ble_int_status+0x10>
   242d8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   242dc:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   242e0:	4010      	ands	r0, r2
   242e2:	4770      	bx	lr
   242e4:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   242e8:	4770      	bx	lr
   242ea:	bf00      	nop
   242ec:	5000c000 	.word	0x5000c000

000242f0 <am_hal_ble_int_clear>:
   242f0:	b150      	cbz	r0, 24308 <am_hal_ble_int_clear+0x18>
   242f2:	6803      	ldr	r3, [r0, #0]
   242f4:	4a05      	ldr	r2, [pc, #20]	; (2430c <am_hal_ble_int_clear+0x1c>)
   242f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   242fa:	4293      	cmp	r3, r2
   242fc:	d104      	bne.n	24308 <am_hal_ble_int_clear+0x18>
   242fe:	4b04      	ldr	r3, [pc, #16]	; (24310 <am_hal_ble_int_clear+0x20>)
   24300:	2000      	movs	r0, #0
   24302:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   24306:	4770      	bx	lr
   24308:	2002      	movs	r0, #2
   2430a:	4770      	bx	lr
   2430c:	01775230 	.word	0x01775230
   24310:	5000c000 	.word	0x5000c000
   24314:	00000000 	.word	0x00000000

00024318 <am_hal_ble_plf_reg_read>:
   24318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2431c:	b092      	sub	sp, #72	; 0x48
   2431e:	0a0c      	lsrs	r4, r1, #8
   24320:	f88d 1004 	strb.w	r1, [sp, #4]
   24324:	0c0b      	lsrs	r3, r1, #16
   24326:	0e09      	lsrs	r1, r1, #24
   24328:	f88d 3006 	strb.w	r3, [sp, #6]
   2432c:	f88d 1007 	strb.w	r1, [sp, #7]
   24330:	f88d 4005 	strb.w	r4, [sp, #5]
   24334:	9c01      	ldr	r4, [sp, #4]
   24336:	4d2c      	ldr	r5, [pc, #176]	; (243e8 <am_hal_ble_plf_reg_read+0xd0>)
   24338:	492c      	ldr	r1, [pc, #176]	; (243ec <am_hal_ble_plf_reg_read+0xd4>)
   2433a:	e9cd 5402 	strd	r5, r4, [sp, #8]
   2433e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 243e0 <am_hal_ble_plf_reg_read+0xc8>
   24342:	4617      	mov	r7, r2
   24344:	4a2a      	ldr	r2, [pc, #168]	; (243f0 <am_hal_ble_plf_reg_read+0xd8>)
   24346:	f8d1 8220 	ldr.w	r8, [r1, #544]	; 0x220
   2434a:	2300      	movs	r3, #0
   2434c:	ac02      	add	r4, sp, #8
   2434e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   24352:	930c      	str	r3, [sp, #48]	; 0x30
   24354:	4606      	mov	r6, r0
   24356:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   2435a:	e9cd 3205 	strd	r3, r2, [sp, #20]
   2435e:	e9cd 3308 	strd	r3, r3, [sp, #32]
   24362:	9404      	str	r4, [sp, #16]
   24364:	f88d 301c 	strb.w	r3, [sp, #28]
   24368:	b128      	cbz	r0, 24376 <am_hal_ble_plf_reg_read+0x5e>
   2436a:	6803      	ldr	r3, [r0, #0]
   2436c:	4a21      	ldr	r2, [pc, #132]	; (243f4 <am_hal_ble_plf_reg_read+0xdc>)
   2436e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   24372:	4293      	cmp	r3, r2
   24374:	d029      	beq.n	243ca <am_hal_ble_plf_reg_read+0xb2>
   24376:	4d1d      	ldr	r5, [pc, #116]	; (243ec <am_hal_ble_plf_reg_read+0xd4>)
   24378:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2437c:	f043 0302 	orr.w	r3, r3, #2
   24380:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   24384:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   24388:	061a      	lsls	r2, r3, #24
   2438a:	d40a      	bmi.n	243a2 <am_hal_ble_plf_reg_read+0x8a>
   2438c:	4c1a      	ldr	r4, [pc, #104]	; (243f8 <am_hal_ble_plf_reg_read+0xe0>)
   2438e:	e001      	b.n	24394 <am_hal_ble_plf_reg_read+0x7c>
   24390:	3c01      	subs	r4, #1
   24392:	d01e      	beq.n	243d2 <am_hal_ble_plf_reg_read+0xba>
   24394:	2010      	movs	r0, #16
   24396:	f000 fd91 	bl	24ebc <am_hal_flash_delay>
   2439a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2439e:	061b      	lsls	r3, r3, #24
   243a0:	d5f6      	bpl.n	24390 <am_hal_ble_plf_reg_read+0x78>
   243a2:	a90a      	add	r1, sp, #40	; 0x28
   243a4:	2200      	movs	r2, #0
   243a6:	4630      	mov	r0, r6
   243a8:	f7ff ff1c 	bl	241e4 <am_hal_ble_blocking_hci_read>
   243ac:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   243b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   243b2:	4a0e      	ldr	r2, [pc, #56]	; (243ec <am_hal_ble_plf_reg_read+0xd4>)
   243b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   243b8:	2000      	movs	r0, #0
   243ba:	603b      	str	r3, [r7, #0]
   243bc:	f8c2 8228 	str.w	r8, [r2, #552]	; 0x228
   243c0:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   243c4:	b012      	add	sp, #72	; 0x48
   243c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   243ca:	a904      	add	r1, sp, #16
   243cc:	f7ff f848 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   243d0:	e7d1      	b.n	24376 <am_hal_ble_plf_reg_read+0x5e>
   243d2:	480a      	ldr	r0, [pc, #40]	; (243fc <am_hal_ble_plf_reg_read+0xe4>)
   243d4:	b012      	add	sp, #72	; 0x48
   243d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   243da:	bf00      	nop
   243dc:	f3af 8000 	nop.w
	...
   243e8:	04fd0201 	.word	0x04fd0201
   243ec:	5000c000 	.word	0x5000c000
   243f0:	00010008 	.word	0x00010008
   243f4:	01775230 	.word	0x01775230
   243f8:	0007a120 	.word	0x0007a120
   243fc:	08000004 	.word	0x08000004

00024400 <am_hal_ble_plf_reg_write>:
   24400:	b5f0      	push	{r4, r5, r6, r7, lr}
   24402:	b08d      	sub	sp, #52	; 0x34
   24404:	0a0c      	lsrs	r4, r1, #8
   24406:	0c0b      	lsrs	r3, r1, #16
   24408:	f88d 1004 	strb.w	r1, [sp, #4]
   2440c:	f88d 4005 	strb.w	r4, [sp, #5]
   24410:	f88d 3006 	strb.w	r3, [sp, #6]
   24414:	f88d 2008 	strb.w	r2, [sp, #8]
   24418:	0a14      	lsrs	r4, r2, #8
   2441a:	0c13      	lsrs	r3, r2, #16
   2441c:	0e09      	lsrs	r1, r1, #24
   2441e:	0e12      	lsrs	r2, r2, #24
   24420:	f88d 4009 	strb.w	r4, [sp, #9]
   24424:	f88d 300a 	strb.w	r3, [sp, #10]
   24428:	f88d 200b 	strb.w	r2, [sp, #11]
   2442c:	f88d 1007 	strb.w	r1, [sp, #7]
   24430:	ab01      	add	r3, sp, #4
   24432:	4606      	mov	r6, r0
   24434:	e893 0003 	ldmia.w	r3, {r0, r1}
   24438:	ab04      	add	r3, sp, #16
   2443a:	e883 0003 	stmia.w	r3, {r0, r1}
   2443e:	4a22      	ldr	r2, [pc, #136]	; (244c8 <am_hal_ble_plf_reg_write+0xc8>)
   24440:	4c22      	ldr	r4, [pc, #136]	; (244cc <am_hal_ble_plf_reg_write+0xcc>)
   24442:	9403      	str	r4, [sp, #12]
   24444:	2300      	movs	r3, #0
   24446:	4922      	ldr	r1, [pc, #136]	; (244d0 <am_hal_ble_plf_reg_write+0xd0>)
   24448:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   2444c:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   24450:	a803      	add	r0, sp, #12
   24452:	e9cd 0306 	strd	r0, r3, [sp, #24]
   24456:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2445a:	9108      	str	r1, [sp, #32]
   2445c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   24460:	b12e      	cbz	r6, 2446e <am_hal_ble_plf_reg_write+0x6e>
   24462:	6833      	ldr	r3, [r6, #0]
   24464:	4a1b      	ldr	r2, [pc, #108]	; (244d4 <am_hal_ble_plf_reg_write+0xd4>)
   24466:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2446a:	4293      	cmp	r3, r2
   2446c:	d024      	beq.n	244b8 <am_hal_ble_plf_reg_write+0xb8>
   2446e:	4d16      	ldr	r5, [pc, #88]	; (244c8 <am_hal_ble_plf_reg_write+0xc8>)
   24470:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   24474:	f043 0302 	orr.w	r3, r3, #2
   24478:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   2447c:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   24480:	061a      	lsls	r2, r3, #24
   24482:	bf58      	it	pl
   24484:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   24488:	d502      	bpl.n	24490 <am_hal_ble_plf_reg_write+0x90>
   2448a:	e008      	b.n	2449e <am_hal_ble_plf_reg_write+0x9e>
   2448c:	3c01      	subs	r4, #1
   2448e:	d018      	beq.n	244c2 <am_hal_ble_plf_reg_write+0xc2>
   24490:	2010      	movs	r0, #16
   24492:	f000 fd13 	bl	24ebc <am_hal_flash_delay>
   24496:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   2449a:	061b      	lsls	r3, r3, #24
   2449c:	d5f6      	bpl.n	2448c <am_hal_ble_plf_reg_write+0x8c>
   2449e:	2200      	movs	r2, #0
   244a0:	a906      	add	r1, sp, #24
   244a2:	4630      	mov	r0, r6
   244a4:	f7ff fe9e 	bl	241e4 <am_hal_ble_blocking_hci_read>
   244a8:	4b07      	ldr	r3, [pc, #28]	; (244c8 <am_hal_ble_plf_reg_write+0xc8>)
   244aa:	2000      	movs	r0, #0
   244ac:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   244b0:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   244b4:	b00d      	add	sp, #52	; 0x34
   244b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   244b8:	a906      	add	r1, sp, #24
   244ba:	4630      	mov	r0, r6
   244bc:	f7fe ffd0 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   244c0:	e7d5      	b.n	2446e <am_hal_ble_plf_reg_write+0x6e>
   244c2:	4805      	ldr	r0, [pc, #20]	; (244d8 <am_hal_ble_plf_reg_write+0xd8>)
   244c4:	b00d      	add	sp, #52	; 0x34
   244c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   244c8:	5000c000 	.word	0x5000c000
   244cc:	08fd0301 	.word	0x08fd0301
   244d0:	0001000c 	.word	0x0001000c
   244d4:	01775230 	.word	0x01775230
   244d8:	08000004 	.word	0x08000004

000244dc <am_hal_ble_transmitter_modex_set>:
   244dc:	b530      	push	{r4, r5, lr}
   244de:	b085      	sub	sp, #20
   244e0:	4604      	mov	r4, r0
   244e2:	2300      	movs	r3, #0
   244e4:	466a      	mov	r2, sp
   244e6:	460d      	mov	r5, r1
   244e8:	4927      	ldr	r1, [pc, #156]	; (24588 <am_hal_ble_transmitter_modex_set+0xac>)
   244ea:	9303      	str	r3, [sp, #12]
   244ec:	f7ff ff14 	bl	24318 <am_hal_ble_plf_reg_read>
   244f0:	4925      	ldr	r1, [pc, #148]	; (24588 <am_hal_ble_transmitter_modex_set+0xac>)
   244f2:	f04f 32ff 	mov.w	r2, #4294967295
   244f6:	4620      	mov	r0, r4
   244f8:	f7ff ff82 	bl	24400 <am_hal_ble_plf_reg_write>
   244fc:	aa03      	add	r2, sp, #12
   244fe:	4923      	ldr	r1, [pc, #140]	; (2458c <am_hal_ble_transmitter_modex_set+0xb0>)
   24500:	4620      	mov	r0, r4
   24502:	f7ff ff09 	bl	24318 <am_hal_ble_plf_reg_read>
   24506:	9b03      	ldr	r3, [sp, #12]
   24508:	aa02      	add	r2, sp, #8
   2450a:	f043 0308 	orr.w	r3, r3, #8
   2450e:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   24512:	4620      	mov	r0, r4
   24514:	9303      	str	r3, [sp, #12]
   24516:	f7ff feff 	bl	24318 <am_hal_ble_plf_reg_read>
   2451a:	9a02      	ldr	r2, [sp, #8]
   2451c:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   24520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   24524:	4620      	mov	r0, r4
   24526:	9202      	str	r2, [sp, #8]
   24528:	f7ff ff6a 	bl	24400 <am_hal_ble_plf_reg_write>
   2452c:	aa01      	add	r2, sp, #4
   2452e:	4918      	ldr	r1, [pc, #96]	; (24590 <am_hal_ble_transmitter_modex_set+0xb4>)
   24530:	4620      	mov	r0, r4
   24532:	f7ff fef1 	bl	24318 <am_hal_ble_plf_reg_read>
   24536:	9a01      	ldr	r2, [sp, #4]
   24538:	4915      	ldr	r1, [pc, #84]	; (24590 <am_hal_ble_transmitter_modex_set+0xb4>)
   2453a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2453e:	f042 0208 	orr.w	r2, r2, #8
   24542:	4620      	mov	r0, r4
   24544:	f7ff ff5c 	bl	24400 <am_hal_ble_plf_reg_write>
   24548:	006a      	lsls	r2, r5, #1
   2454a:	4912      	ldr	r1, [pc, #72]	; (24594 <am_hal_ble_transmitter_modex_set+0xb8>)
   2454c:	f042 0201 	orr.w	r2, r2, #1
   24550:	4620      	mov	r0, r4
   24552:	f7ff ff55 	bl	24400 <am_hal_ble_plf_reg_write>
   24556:	490d      	ldr	r1, [pc, #52]	; (2458c <am_hal_ble_transmitter_modex_set+0xb0>)
   24558:	9a03      	ldr	r2, [sp, #12]
   2455a:	4620      	mov	r0, r4
   2455c:	f7ff ff50 	bl	24400 <am_hal_ble_plf_reg_write>
   24560:	4b0d      	ldr	r3, [pc, #52]	; (24598 <am_hal_ble_transmitter_modex_set+0xbc>)
   24562:	68db      	ldr	r3, [r3, #12]
   24564:	b2db      	uxtb	r3, r3
   24566:	2b21      	cmp	r3, #33	; 0x21
   24568:	bf0c      	ite	eq
   2456a:	490c      	ldreq	r1, [pc, #48]	; (2459c <am_hal_ble_transmitter_modex_set+0xc0>)
   2456c:	490c      	ldrne	r1, [pc, #48]	; (245a0 <am_hal_ble_transmitter_modex_set+0xc4>)
   2456e:	462a      	mov	r2, r5
   24570:	4620      	mov	r0, r4
   24572:	f7ff ff45 	bl	24400 <am_hal_ble_plf_reg_write>
   24576:	9a00      	ldr	r2, [sp, #0]
   24578:	4903      	ldr	r1, [pc, #12]	; (24588 <am_hal_ble_transmitter_modex_set+0xac>)
   2457a:	4620      	mov	r0, r4
   2457c:	f7ff ff40 	bl	24400 <am_hal_ble_plf_reg_write>
   24580:	2000      	movs	r0, #0
   24582:	b005      	add	sp, #20
   24584:	bd30      	pop	{r4, r5, pc}
   24586:	bf00      	nop
   24588:	43000004 	.word	0x43000004
   2458c:	52000008 	.word	0x52000008
   24590:	45800070 	.word	0x45800070
   24594:	52000014 	.word	0x52000014
   24598:	40020000 	.word	0x40020000
   2459c:	20006874 	.word	0x20006874
   245a0:	20006070 	.word	0x20006070

000245a4 <am_hal_ble_patch_complete.part.0>:
   245a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245a8:	b08c      	sub	sp, #48	; 0x30
   245aa:	2300      	movs	r3, #0
   245ac:	2201      	movs	r2, #1
   245ae:	e9cd 3307 	strd	r3, r3, [sp, #28]
   245b2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   245b6:	930b      	str	r3, [sp, #44]	; 0x2c
   245b8:	f8ad 3004 	strh.w	r3, [sp, #4]
   245bc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   245c0:	4b7e      	ldr	r3, [pc, #504]	; (247bc <am_hal_ble_patch_complete.part.0+0x218>)
   245c2:	f8cd d018 	str.w	sp, [sp, #24]
   245c6:	2206      	movs	r2, #6
   245c8:	f8ad 2020 	strh.w	r2, [sp, #32]
   245cc:	9300      	str	r3, [sp, #0]
   245ce:	4604      	mov	r4, r0
   245d0:	2800      	cmp	r0, #0
   245d2:	f000 80ec 	beq.w	247ae <am_hal_ble_patch_complete.part.0+0x20a>
   245d6:	4e7a      	ldr	r6, [pc, #488]	; (247c0 <am_hal_ble_patch_complete.part.0+0x21c>)
   245d8:	f241 3588 	movw	r5, #5000	; 0x1388
   245dc:	6823      	ldr	r3, [r4, #0]
   245de:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   245e2:	42b3      	cmp	r3, r6
   245e4:	a906      	add	r1, sp, #24
   245e6:	4620      	mov	r0, r4
   245e8:	d107      	bne.n	245fa <am_hal_ble_patch_complete.part.0+0x56>
   245ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   245ee:	b123      	cbz	r3, 245fa <am_hal_ble_patch_complete.part.0+0x56>
   245f0:	f7fe ff36 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   245f4:	b108      	cbz	r0, 245fa <am_hal_ble_patch_complete.part.0+0x56>
   245f6:	3d01      	subs	r5, #1
   245f8:	d1f0      	bne.n	245dc <am_hal_ble_patch_complete.part.0+0x38>
   245fa:	4b72      	ldr	r3, [pc, #456]	; (247c4 <am_hal_ble_patch_complete.part.0+0x220>)
   245fc:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   24600:	061b      	lsls	r3, r3, #24
   24602:	d458      	bmi.n	246b6 <am_hal_ble_patch_complete.part.0+0x112>
   24604:	4d70      	ldr	r5, [pc, #448]	; (247c8 <am_hal_ble_patch_complete.part.0+0x224>)
   24606:	4e6f      	ldr	r6, [pc, #444]	; (247c4 <am_hal_ble_patch_complete.part.0+0x220>)
   24608:	2010      	movs	r0, #16
   2460a:	f000 fc57 	bl	24ebc <am_hal_flash_delay>
   2460e:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   24612:	061f      	lsls	r7, r3, #24
   24614:	d406      	bmi.n	24624 <am_hal_ble_patch_complete.part.0+0x80>
   24616:	3d01      	subs	r5, #1
   24618:	d1f6      	bne.n	24608 <am_hal_ble_patch_complete.part.0+0x64>
   2461a:	4d6c      	ldr	r5, [pc, #432]	; (247cc <am_hal_ble_patch_complete.part.0+0x228>)
   2461c:	4628      	mov	r0, r5
   2461e:	b00c      	add	sp, #48	; 0x30
   24620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24624:	2302      	movs	r3, #2
   24626:	f10d 080c 	add.w	r8, sp, #12
   2462a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   2462e:	f8cd 8018 	str.w	r8, [sp, #24]
   24632:	f8ad 3020 	strh.w	r3, [sp, #32]
   24636:	2c00      	cmp	r4, #0
   24638:	d038      	beq.n	246ac <am_hal_ble_patch_complete.part.0+0x108>
   2463a:	6826      	ldr	r6, [r4, #0]
   2463c:	4b60      	ldr	r3, [pc, #384]	; (247c0 <am_hal_ble_patch_complete.part.0+0x21c>)
   2463e:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   24642:	429e      	cmp	r6, r3
   24644:	d132      	bne.n	246ac <am_hal_ble_patch_complete.part.0+0x108>
   24646:	a906      	add	r1, sp, #24
   24648:	4620      	mov	r0, r4
   2464a:	f7fe ff09 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   2464e:	4605      	mov	r5, r0
   24650:	bb68      	cbnz	r0, 246ae <am_hal_ble_patch_complete.part.0+0x10a>
   24652:	f89d 200d 	ldrb.w	r2, [sp, #13]
   24656:	2aee      	cmp	r2, #238	; 0xee
   24658:	d037      	beq.n	246ca <am_hal_ble_patch_complete.part.0+0x126>
   2465a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2465e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   24662:	6822      	ldr	r2, [r4, #0]
   24664:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   24668:	b29b      	uxth	r3, r3
   2466a:	42b2      	cmp	r2, r6
   2466c:	f8ad 3020 	strh.w	r3, [sp, #32]
   24670:	d11c      	bne.n	246ac <am_hal_ble_patch_complete.part.0+0x108>
   24672:	b133      	cbz	r3, 24682 <am_hal_ble_patch_complete.part.0+0xde>
   24674:	a906      	add	r1, sp, #24
   24676:	4620      	mov	r0, r4
   24678:	f7fe fef2 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   2467c:	2800      	cmp	r0, #0
   2467e:	f040 8094 	bne.w	247aa <am_hal_ble_patch_complete.part.0+0x206>
   24682:	2301      	movs	r3, #1
   24684:	4628      	mov	r0, r5
   24686:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   2468a:	b00c      	add	sp, #48	; 0x30
   2468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24690:	6826      	ldr	r6, [r4, #0]
   24692:	4b4b      	ldr	r3, [pc, #300]	; (247c0 <am_hal_ble_patch_complete.part.0+0x21c>)
   24694:	f8cd 8018 	str.w	r8, [sp, #24]
   24698:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   2469c:	2702      	movs	r7, #2
   2469e:	2209      	movs	r2, #9
   246a0:	429e      	cmp	r6, r3
   246a2:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   246a6:	f8ad 2020 	strh.w	r2, [sp, #32]
   246aa:	d054      	beq.n	24756 <am_hal_ble_patch_complete.part.0+0x1b2>
   246ac:	2502      	movs	r5, #2
   246ae:	4628      	mov	r0, r5
   246b0:	b00c      	add	sp, #48	; 0x30
   246b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   246b6:	2302      	movs	r3, #2
   246b8:	f10d 080c 	add.w	r8, sp, #12
   246bc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   246c0:	f8cd 8018 	str.w	r8, [sp, #24]
   246c4:	f8ad 3020 	strh.w	r3, [sp, #32]
   246c8:	e7b7      	b.n	2463a <am_hal_ble_patch_complete.part.0+0x96>
   246ca:	6827      	ldr	r7, [r4, #0]
   246cc:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
   246d0:	2303      	movs	r3, #3
   246d2:	42b7      	cmp	r7, r6
   246d4:	f8ad 3020 	strh.w	r3, [sp, #32]
   246d8:	d1e8      	bne.n	246ac <am_hal_ble_patch_complete.part.0+0x108>
   246da:	a906      	add	r1, sp, #24
   246dc:	4620      	mov	r0, r4
   246de:	f7fe febf 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   246e2:	4605      	mov	r5, r0
   246e4:	2800      	cmp	r0, #0
   246e6:	d1e2      	bne.n	246ae <am_hal_ble_patch_complete.part.0+0x10a>
   246e8:	2301      	movs	r3, #1
   246ea:	e9cd 0007 	strd	r0, r0, [sp, #28]
   246ee:	f88d 3004 	strb.w	r3, [sp, #4]
   246f2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   246f6:	f103 73fe 	add.w	r3, r3, #33292288	; 0x1fc0000
   246fa:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
   246fe:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   24702:	9300      	str	r3, [sp, #0]
   24704:	2305      	movs	r3, #5
   24706:	f8cd d018 	str.w	sp, [sp, #24]
   2470a:	900b      	str	r0, [sp, #44]	; 0x2c
   2470c:	f241 3688 	movw	r6, #5000	; 0x1388
   24710:	f8ad 3020 	strh.w	r3, [sp, #32]
   24714:	6823      	ldr	r3, [r4, #0]
   24716:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2471a:	42bb      	cmp	r3, r7
   2471c:	a906      	add	r1, sp, #24
   2471e:	4620      	mov	r0, r4
   24720:	d1c4      	bne.n	246ac <am_hal_ble_patch_complete.part.0+0x108>
   24722:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   24726:	b133      	cbz	r3, 24736 <am_hal_ble_patch_complete.part.0+0x192>
   24728:	f7fe fe9a 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   2472c:	4605      	mov	r5, r0
   2472e:	b110      	cbz	r0, 24736 <am_hal_ble_patch_complete.part.0+0x192>
   24730:	3e01      	subs	r6, #1
   24732:	d1ef      	bne.n	24714 <am_hal_ble_patch_complete.part.0+0x170>
   24734:	e7bb      	b.n	246ae <am_hal_ble_patch_complete.part.0+0x10a>
   24736:	4e23      	ldr	r6, [pc, #140]	; (247c4 <am_hal_ble_patch_complete.part.0+0x220>)
   24738:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   2473c:	0618      	lsls	r0, r3, #24
   2473e:	d4a7      	bmi.n	24690 <am_hal_ble_patch_complete.part.0+0xec>
   24740:	4d21      	ldr	r5, [pc, #132]	; (247c8 <am_hal_ble_patch_complete.part.0+0x224>)
   24742:	2010      	movs	r0, #16
   24744:	f000 fbba 	bl	24ebc <am_hal_flash_delay>
   24748:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   2474c:	0619      	lsls	r1, r3, #24
   2474e:	d49f      	bmi.n	24690 <am_hal_ble_patch_complete.part.0+0xec>
   24750:	3d01      	subs	r5, #1
   24752:	d1f6      	bne.n	24742 <am_hal_ble_patch_complete.part.0+0x19e>
   24754:	e761      	b.n	2461a <am_hal_ble_patch_complete.part.0+0x76>
   24756:	a906      	add	r1, sp, #24
   24758:	4620      	mov	r0, r4
   2475a:	f7fe fe81 	bl	23460 <am_hal_ble_blocking_transfer.part.0>
   2475e:	4605      	mov	r5, r0
   24760:	2800      	cmp	r0, #0
   24762:	d1a4      	bne.n	246ae <am_hal_ble_patch_complete.part.0+0x10a>
   24764:	6823      	ldr	r3, [r4, #0]
   24766:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2476a:	42b3      	cmp	r3, r6
   2476c:	d106      	bne.n	2477c <am_hal_ble_patch_complete.part.0+0x1d8>
   2476e:	4b15      	ldr	r3, [pc, #84]	; (247c4 <am_hal_ble_patch_complete.part.0+0x220>)
   24770:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   24774:	f367 0283 	bfi	r2, r7, #2, #2
   24778:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   2477c:	2301      	movs	r3, #1
   2477e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   24782:	4813      	ldr	r0, [pc, #76]	; (247d0 <am_hal_ble_patch_complete.part.0+0x22c>)
   24784:	f000 fb9a 	bl	24ebc <am_hal_flash_delay>
   24788:	4b12      	ldr	r3, [pc, #72]	; (247d4 <am_hal_ble_patch_complete.part.0+0x230>)
   2478a:	4a13      	ldr	r2, [pc, #76]	; (247d8 <am_hal_ble_patch_complete.part.0+0x234>)
   2478c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
   24790:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
   24794:	4291      	cmp	r1, r2
   24796:	d18a      	bne.n	246ae <am_hal_ble_patch_complete.part.0+0x10a>
   24798:	b2d9      	uxtb	r1, r3
   2479a:	f1a1 0320 	sub.w	r3, r1, #32
   2479e:	2b30      	cmp	r3, #48	; 0x30
   247a0:	d885      	bhi.n	246ae <am_hal_ble_patch_complete.part.0+0x10a>
   247a2:	4620      	mov	r0, r4
   247a4:	f7ff fe9a 	bl	244dc <am_hal_ble_transmitter_modex_set>
   247a8:	e781      	b.n	246ae <am_hal_ble_patch_complete.part.0+0x10a>
   247aa:	4605      	mov	r5, r0
   247ac:	e77f      	b.n	246ae <am_hal_ble_patch_complete.part.0+0x10a>
   247ae:	4b05      	ldr	r3, [pc, #20]	; (247c4 <am_hal_ble_patch_complete.part.0+0x220>)
   247b0:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   247b4:	061a      	lsls	r2, r3, #24
   247b6:	f57f af25 	bpl.w	24604 <am_hal_ble_patch_complete.part.0+0x60>
   247ba:	e777      	b.n	246ac <am_hal_ble_patch_complete.part.0+0x108>
   247bc:	02f1ee01 	.word	0x02f1ee01
   247c0:	01775230 	.word	0x01775230
   247c4:	5000c000 	.word	0x5000c000
   247c8:	000186a0 	.word	0x000186a0
   247cc:	08000004 	.word	0x08000004
   247d0:	007a1200 	.word	0x007a1200
   247d4:	50023000 	.word	0x50023000
   247d8:	18240600 	.word	0x18240600

000247dc <am_hal_ble_boot>:
   247dc:	2800      	cmp	r0, #0
   247de:	d06c      	beq.n	248ba <am_hal_ble_boot+0xde>
   247e0:	b530      	push	{r4, r5, lr}
   247e2:	6803      	ldr	r3, [r0, #0]
   247e4:	4a36      	ldr	r2, [pc, #216]	; (248c0 <am_hal_ble_boot+0xe4>)
   247e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   247ea:	4293      	cmp	r3, r2
   247ec:	b083      	sub	sp, #12
   247ee:	4604      	mov	r4, r0
   247f0:	d137      	bne.n	24862 <am_hal_ble_boot+0x86>
   247f2:	7a03      	ldrb	r3, [r0, #8]
   247f4:	b1f3      	cbz	r3, 24834 <am_hal_ble_boot+0x58>
   247f6:	4a33      	ldr	r2, [pc, #204]	; (248c4 <am_hal_ble_boot+0xe8>)
   247f8:	68d3      	ldr	r3, [r2, #12]
   247fa:	b2db      	uxtb	r3, r3
   247fc:	2b11      	cmp	r3, #17
   247fe:	d039      	beq.n	24874 <am_hal_ble_boot+0x98>
   24800:	68d3      	ldr	r3, [r2, #12]
   24802:	b2db      	uxtb	r3, r3
   24804:	2b12      	cmp	r3, #18
   24806:	d035      	beq.n	24874 <am_hal_ble_boot+0x98>
   24808:	4620      	mov	r0, r4
   2480a:	f7ff fc99 	bl	24140 <am_hal_ble_default_trim_set_ramcode>
   2480e:	b108      	cbz	r0, 24814 <am_hal_ble_boot+0x38>
   24810:	b003      	add	sp, #12
   24812:	bd30      	pop	{r4, r5, pc}
   24814:	4620      	mov	r0, r4
   24816:	f7ff fc4d 	bl	240b4 <am_hal_ble_default_patch_apply>
   2481a:	2800      	cmp	r0, #0
   2481c:	d1f8      	bne.n	24810 <am_hal_ble_boot+0x34>
   2481e:	6823      	ldr	r3, [r4, #0]
   24820:	4a27      	ldr	r2, [pc, #156]	; (248c0 <am_hal_ble_boot+0xe4>)
   24822:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   24826:	4293      	cmp	r3, r2
   24828:	d11b      	bne.n	24862 <am_hal_ble_boot+0x86>
   2482a:	4620      	mov	r0, r4
   2482c:	f7ff feba 	bl	245a4 <am_hal_ble_patch_complete.part.0>
   24830:	2800      	cmp	r0, #0
   24832:	d1ed      	bne.n	24810 <am_hal_ble_boot+0x34>
   24834:	4b23      	ldr	r3, [pc, #140]	; (248c4 <am_hal_ble_boot+0xe8>)
   24836:	f04f 32ff 	mov.w	r2, #4294967295
   2483a:	9201      	str	r2, [sp, #4]
   2483c:	68db      	ldr	r3, [r3, #12]
   2483e:	b2db      	uxtb	r3, r3
   24840:	2b21      	cmp	r3, #33	; 0x21
   24842:	d011      	beq.n	24868 <am_hal_ble_boot+0x8c>
   24844:	4920      	ldr	r1, [pc, #128]	; (248c8 <am_hal_ble_boot+0xec>)
   24846:	aa01      	add	r2, sp, #4
   24848:	4620      	mov	r0, r4
   2484a:	f7ff fd65 	bl	24318 <am_hal_ble_plf_reg_read>
   2484e:	9b01      	ldr	r3, [sp, #4]
   24850:	481e      	ldr	r0, [pc, #120]	; (248cc <am_hal_ble_boot+0xf0>)
   24852:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   24856:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   2485a:	bf98      	it	ls
   2485c:	2000      	movls	r0, #0
   2485e:	b003      	add	sp, #12
   24860:	bd30      	pop	{r4, r5, pc}
   24862:	2002      	movs	r0, #2
   24864:	b003      	add	sp, #12
   24866:	bd30      	pop	{r4, r5, pc}
   24868:	4919      	ldr	r1, [pc, #100]	; (248d0 <am_hal_ble_boot+0xf4>)
   2486a:	aa01      	add	r2, sp, #4
   2486c:	4620      	mov	r0, r4
   2486e:	f7ff fd53 	bl	24318 <am_hal_ble_plf_reg_read>
   24872:	e7ec      	b.n	2484e <am_hal_ble_boot+0x72>
   24874:	4b17      	ldr	r3, [pc, #92]	; (248d4 <am_hal_ble_boot+0xf8>)
   24876:	681b      	ldr	r3, [r3, #0]
   24878:	6819      	ldr	r1, [r3, #0]
   2487a:	684b      	ldr	r3, [r1, #4]
   2487c:	68ca      	ldr	r2, [r1, #12]
   2487e:	b183      	cbz	r3, 248a2 <am_hal_ble_boot+0xc6>
   24880:	3b01      	subs	r3, #1
   24882:	4d15      	ldr	r5, [pc, #84]	; (248d8 <am_hal_ble_boot+0xfc>)
   24884:	eb02 0c03 	add.w	ip, r2, r3
   24888:	1e50      	subs	r0, r2, #1
   2488a:	2300      	movs	r3, #0
   2488c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   24890:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   24894:	4560      	cmp	r0, ip
   24896:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   2489a:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   2489e:	b29b      	uxth	r3, r3
   248a0:	d1f4      	bne.n	2488c <am_hal_ble_boot+0xb0>
   248a2:	608b      	str	r3, [r1, #8]
   248a4:	4620      	mov	r0, r4
   248a6:	f7ff f9e7 	bl	23c78 <am_hal_ble_patch_apply>
   248aa:	2800      	cmp	r0, #0
   248ac:	d1b0      	bne.n	24810 <am_hal_ble_boot+0x34>
   248ae:	4620      	mov	r0, r4
   248b0:	f7ff fb76 	bl	23fa0 <am_hal_ble_patch_copy_end_apply>
   248b4:	2800      	cmp	r0, #0
   248b6:	d0a7      	beq.n	24808 <am_hal_ble_boot+0x2c>
   248b8:	e7aa      	b.n	24810 <am_hal_ble_boot+0x34>
   248ba:	2002      	movs	r0, #2
   248bc:	4770      	bx	lr
   248be:	bf00      	nop
   248c0:	01775230 	.word	0x01775230
   248c4:	40020000 	.word	0x40020000
   248c8:	20006054 	.word	0x20006054
   248cc:	0800000b 	.word	0x0800000b
   248d0:	20006858 	.word	0x20006858
   248d4:	10002ecc 	.word	0x10002ecc
   248d8:	0002827c 	.word	0x0002827c

000248dc <am_hal_ble_tx_power_set>:
   248dc:	b530      	push	{r4, r5, lr}
   248de:	b083      	sub	sp, #12
   248e0:	4604      	mov	r4, r0
   248e2:	2300      	movs	r3, #0
   248e4:	460d      	mov	r5, r1
   248e6:	466a      	mov	r2, sp
   248e8:	491a      	ldr	r1, [pc, #104]	; (24954 <am_hal_ble_tx_power_set+0x78>)
   248ea:	9301      	str	r3, [sp, #4]
   248ec:	f7ff fd14 	bl	24318 <am_hal_ble_plf_reg_read>
   248f0:	4918      	ldr	r1, [pc, #96]	; (24954 <am_hal_ble_tx_power_set+0x78>)
   248f2:	f04f 32ff 	mov.w	r2, #4294967295
   248f6:	4620      	mov	r0, r4
   248f8:	f7ff fd82 	bl	24400 <am_hal_ble_plf_reg_write>
   248fc:	042a      	lsls	r2, r5, #16
   248fe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   24902:	4915      	ldr	r1, [pc, #84]	; (24958 <am_hal_ble_tx_power_set+0x7c>)
   24904:	f042 0208 	orr.w	r2, r2, #8
   24908:	4620      	mov	r0, r4
   2490a:	f7ff fd79 	bl	24400 <am_hal_ble_plf_reg_write>
   2490e:	4911      	ldr	r1, [pc, #68]	; (24954 <am_hal_ble_tx_power_set+0x78>)
   24910:	9a00      	ldr	r2, [sp, #0]
   24912:	4620      	mov	r0, r4
   24914:	f7ff fd74 	bl	24400 <am_hal_ble_plf_reg_write>
   24918:	4b10      	ldr	r3, [pc, #64]	; (2495c <am_hal_ble_tx_power_set+0x80>)
   2491a:	68db      	ldr	r3, [r3, #12]
   2491c:	b2db      	uxtb	r3, r3
   2491e:	2b21      	cmp	r3, #33	; 0x21
   24920:	bf0c      	ite	eq
   24922:	490f      	ldreq	r1, [pc, #60]	; (24960 <am_hal_ble_tx_power_set+0x84>)
   24924:	490f      	ldrne	r1, [pc, #60]	; (24964 <am_hal_ble_tx_power_set+0x88>)
   24926:	aa01      	add	r2, sp, #4
   24928:	4620      	mov	r0, r4
   2492a:	f7ff fcf5 	bl	24318 <am_hal_ble_plf_reg_read>
   2492e:	9b01      	ldr	r3, [sp, #4]
   24930:	490a      	ldr	r1, [pc, #40]	; (2495c <am_hal_ble_tx_power_set+0x80>)
   24932:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24936:	ea43 0205 	orr.w	r2, r3, r5
   2493a:	9201      	str	r2, [sp, #4]
   2493c:	68cb      	ldr	r3, [r1, #12]
   2493e:	b2db      	uxtb	r3, r3
   24940:	2b21      	cmp	r3, #33	; 0x21
   24942:	bf0c      	ite	eq
   24944:	4906      	ldreq	r1, [pc, #24]	; (24960 <am_hal_ble_tx_power_set+0x84>)
   24946:	4907      	ldrne	r1, [pc, #28]	; (24964 <am_hal_ble_tx_power_set+0x88>)
   24948:	4620      	mov	r0, r4
   2494a:	f7ff fd59 	bl	24400 <am_hal_ble_plf_reg_write>
   2494e:	2000      	movs	r0, #0
   24950:	b003      	add	sp, #12
   24952:	bd30      	pop	{r4, r5, pc}
   24954:	43000004 	.word	0x43000004
   24958:	52400018 	.word	0x52400018
   2495c:	40020000 	.word	0x40020000
   24960:	20006838 	.word	0x20006838
   24964:	20006038 	.word	0x20006038

00024968 <am_hal_cachectrl_config>:
   24968:	b530      	push	{r4, r5, lr}
   2496a:	b083      	sub	sp, #12
   2496c:	4604      	mov	r4, r0
   2496e:	f000 fcb3 	bl	252d8 <am_hal_interrupt_master_disable>
   24972:	4d0e      	ldr	r5, [pc, #56]	; (249ac <am_hal_cachectrl_config+0x44>)
   24974:	9001      	str	r0, [sp, #4]
   24976:	682b      	ldr	r3, [r5, #0]
   24978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   2497c:	602b      	str	r3, [r5, #0]
   2497e:	9801      	ldr	r0, [sp, #4]
   24980:	f000 fcae 	bl	252e0 <am_hal_interrupt_master_set>
   24984:	7863      	ldrb	r3, [r4, #1]
   24986:	7822      	ldrb	r2, [r4, #0]
   24988:	78a1      	ldrb	r1, [r4, #2]
   2498a:	021b      	lsls	r3, r3, #8
   2498c:	f403 7340 	and.w	r3, r3, #768	; 0x300
   24990:	0112      	lsls	r2, r2, #4
   24992:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   24996:	b2d2      	uxtb	r2, r2
   24998:	4313      	orrs	r3, r2
   2499a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2499e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   249a2:	2000      	movs	r0, #0
   249a4:	602b      	str	r3, [r5, #0]
   249a6:	b003      	add	sp, #12
   249a8:	bd30      	pop	{r4, r5, pc}
   249aa:	bf00      	nop
   249ac:	40018000 	.word	0x40018000

000249b0 <am_hal_cachectrl_enable>:
   249b0:	4a03      	ldr	r2, [pc, #12]	; (249c0 <am_hal_cachectrl_enable+0x10>)
   249b2:	6813      	ldr	r3, [r2, #0]
   249b4:	f043 0301 	orr.w	r3, r3, #1
   249b8:	2000      	movs	r0, #0
   249ba:	6013      	str	r3, [r2, #0]
   249bc:	4770      	bx	lr
   249be:	bf00      	nop
   249c0:	40018000 	.word	0x40018000

000249c4 <am_hal_cachectrl_control>:
   249c4:	b510      	push	{r4, lr}
   249c6:	3801      	subs	r0, #1
   249c8:	b08e      	sub	sp, #56	; 0x38
   249ca:	2810      	cmp	r0, #16
   249cc:	f200 815e 	bhi.w	24c8c <am_hal_cachectrl_control+0x2c8>
   249d0:	e8df f010 	tbh	[pc, r0, lsl #1]
   249d4:	00360018 	.word	0x00360018
   249d8:	0040003d 	.word	0x0040003d
   249dc:	00450043 	.word	0x00450043
   249e0:	0011001a 	.word	0x0011001a
   249e4:	00540047 	.word	0x00540047
   249e8:	009a0061 	.word	0x009a0061
   249ec:	010c00d3 	.word	0x010c00d3
   249f0:	013f0126 	.word	0x013f0126
   249f4:	001d      	.short	0x001d
   249f6:	f44f 7300 	mov.w	r3, #512	; 0x200
   249fa:	4aac      	ldr	r2, [pc, #688]	; (24cac <am_hal_cachectrl_control+0x2e8>)
   249fc:	2000      	movs	r0, #0
   249fe:	6093      	str	r3, [r2, #8]
   24a00:	b00e      	add	sp, #56	; 0x38
   24a02:	bd10      	pop	{r4, pc}
   24a04:	2301      	movs	r3, #1
   24a06:	e7f8      	b.n	249fa <am_hal_cachectrl_control+0x36>
   24a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24a0c:	e7f5      	b.n	249fa <am_hal_cachectrl_control+0x36>
   24a0e:	2900      	cmp	r1, #0
   24a10:	f000 813c 	beq.w	24c8c <am_hal_cachectrl_control+0x2c8>
   24a14:	684a      	ldr	r2, [r1, #4]
   24a16:	48a6      	ldr	r0, [pc, #664]	; (24cb0 <am_hal_cachectrl_control+0x2ec>)
   24a18:	4202      	tst	r2, r0
   24a1a:	f040 8137 	bne.w	24c8c <am_hal_cachectrl_control+0x2c8>
   24a1e:	688b      	ldr	r3, [r1, #8]
   24a20:	4018      	ands	r0, r3
   24a22:	f040 8133 	bne.w	24c8c <am_hal_cachectrl_control+0x2c8>
   24a26:	780c      	ldrb	r4, [r1, #0]
   24a28:	2c00      	cmp	r4, #0
   24a2a:	f040 8133 	bne.w	24c94 <am_hal_cachectrl_control+0x2d0>
   24a2e:	4c9f      	ldr	r4, [pc, #636]	; (24cac <am_hal_cachectrl_control+0x2e8>)
   24a30:	7849      	ldrb	r1, [r1, #1]
   24a32:	6122      	str	r2, [r4, #16]
   24a34:	6163      	str	r3, [r4, #20]
   24a36:	6823      	ldr	r3, [r4, #0]
   24a38:	f361 0382 	bfi	r3, r1, #2, #1
   24a3c:	6023      	str	r3, [r4, #0]
   24a3e:	e7df      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24a40:	4b9a      	ldr	r3, [pc, #616]	; (24cac <am_hal_cachectrl_control+0x2e8>)
   24a42:	681b      	ldr	r3, [r3, #0]
   24a44:	01db      	lsls	r3, r3, #7
   24a46:	f140 811f 	bpl.w	24c88 <am_hal_cachectrl_control+0x2c4>
   24a4a:	2302      	movs	r3, #2
   24a4c:	e7d5      	b.n	249fa <am_hal_cachectrl_control+0x36>
   24a4e:	f44f 6388 	mov.w	r3, #1088	; 0x440
   24a52:	e7d2      	b.n	249fa <am_hal_cachectrl_control+0x36>
   24a54:	f44f 7308 	mov.w	r3, #544	; 0x220
   24a58:	e7cf      	b.n	249fa <am_hal_cachectrl_control+0x36>
   24a5a:	2340      	movs	r3, #64	; 0x40
   24a5c:	e7cd      	b.n	249fa <am_hal_cachectrl_control+0x36>
   24a5e:	2320      	movs	r3, #32
   24a60:	e7cb      	b.n	249fa <am_hal_cachectrl_control+0x36>
   24a62:	f000 fc39 	bl	252d8 <am_hal_interrupt_master_disable>
   24a66:	4a91      	ldr	r2, [pc, #580]	; (24cac <am_hal_cachectrl_control+0x2e8>)
   24a68:	9000      	str	r0, [sp, #0]
   24a6a:	6813      	ldr	r3, [r2, #0]
   24a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   24a70:	6013      	str	r3, [r2, #0]
   24a72:	9800      	ldr	r0, [sp, #0]
   24a74:	f000 fc34 	bl	252e0 <am_hal_interrupt_master_set>
   24a78:	2000      	movs	r0, #0
   24a7a:	e7c1      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24a7c:	f000 fc2c 	bl	252d8 <am_hal_interrupt_master_disable>
   24a80:	4a8a      	ldr	r2, [pc, #552]	; (24cac <am_hal_cachectrl_control+0x2e8>)
   24a82:	9001      	str	r0, [sp, #4]
   24a84:	6813      	ldr	r3, [r2, #0]
   24a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   24a8a:	6013      	str	r3, [r2, #0]
   24a8c:	9801      	ldr	r0, [sp, #4]
   24a8e:	f000 fc27 	bl	252e0 <am_hal_interrupt_master_set>
   24a92:	2000      	movs	r0, #0
   24a94:	e7b4      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24a96:	f000 fc1f 	bl	252d8 <am_hal_interrupt_master_disable>
   24a9a:	4603      	mov	r3, r0
   24a9c:	4885      	ldr	r0, [pc, #532]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24a9e:	9302      	str	r3, [sp, #8]
   24aa0:	f000 fa52 	bl	24f48 <am_hal_flash_load_ui32>
   24aa4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   24aa8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   24aac:	4881      	ldr	r0, [pc, #516]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24aae:	f000 fa4f 	bl	24f50 <am_hal_flash_store_ui32>
   24ab2:	9802      	ldr	r0, [sp, #8]
   24ab4:	f000 fc14 	bl	252e0 <am_hal_interrupt_master_set>
   24ab8:	f000 fc0e 	bl	252d8 <am_hal_interrupt_master_disable>
   24abc:	4603      	mov	r3, r0
   24abe:	487d      	ldr	r0, [pc, #500]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24ac0:	9303      	str	r3, [sp, #12]
   24ac2:	f000 fa41 	bl	24f48 <am_hal_flash_load_ui32>
   24ac6:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   24aca:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
   24ace:	4879      	ldr	r0, [pc, #484]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24ad0:	f000 fa3e 	bl	24f50 <am_hal_flash_store_ui32>
   24ad4:	9803      	ldr	r0, [sp, #12]
   24ad6:	f000 fc03 	bl	252e0 <am_hal_interrupt_master_set>
   24ada:	f000 fbfd 	bl	252d8 <am_hal_interrupt_master_disable>
   24ade:	4603      	mov	r3, r0
   24ae0:	4874      	ldr	r0, [pc, #464]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24ae2:	9304      	str	r3, [sp, #16]
   24ae4:	f000 fa30 	bl	24f48 <am_hal_flash_load_ui32>
   24ae8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   24aec:	f020 000f 	bic.w	r0, r0, #15
   24af0:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   24af4:	f041 0103 	orr.w	r1, r1, #3
   24af8:	486e      	ldr	r0, [pc, #440]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24afa:	f000 fa29 	bl	24f50 <am_hal_flash_store_ui32>
   24afe:	9804      	ldr	r0, [sp, #16]
   24b00:	f000 fbee 	bl	252e0 <am_hal_interrupt_master_set>
   24b04:	2000      	movs	r0, #0
   24b06:	e77b      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24b08:	f000 fbe6 	bl	252d8 <am_hal_interrupt_master_disable>
   24b0c:	4603      	mov	r3, r0
   24b0e:	4869      	ldr	r0, [pc, #420]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24b10:	9305      	str	r3, [sp, #20]
   24b12:	f000 fa19 	bl	24f48 <am_hal_flash_load_ui32>
   24b16:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   24b1a:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   24b1e:	4865      	ldr	r0, [pc, #404]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24b20:	f000 fa16 	bl	24f50 <am_hal_flash_store_ui32>
   24b24:	9805      	ldr	r0, [sp, #20]
   24b26:	f000 fbdb 	bl	252e0 <am_hal_interrupt_master_set>
   24b2a:	f000 fbd5 	bl	252d8 <am_hal_interrupt_master_disable>
   24b2e:	4603      	mov	r3, r0
   24b30:	4860      	ldr	r0, [pc, #384]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24b32:	9306      	str	r3, [sp, #24]
   24b34:	f000 fa08 	bl	24f48 <am_hal_flash_load_ui32>
   24b38:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   24b3c:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
   24b40:	485c      	ldr	r0, [pc, #368]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24b42:	f000 fa05 	bl	24f50 <am_hal_flash_store_ui32>
   24b46:	9806      	ldr	r0, [sp, #24]
   24b48:	f000 fbca 	bl	252e0 <am_hal_interrupt_master_set>
   24b4c:	f000 fbc4 	bl	252d8 <am_hal_interrupt_master_disable>
   24b50:	4603      	mov	r3, r0
   24b52:	4858      	ldr	r0, [pc, #352]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24b54:	9307      	str	r3, [sp, #28]
   24b56:	f000 f9f7 	bl	24f48 <am_hal_flash_load_ui32>
   24b5a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   24b5e:	f020 000f 	bic.w	r0, r0, #15
   24b62:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   24b66:	f041 0101 	orr.w	r1, r1, #1
   24b6a:	4852      	ldr	r0, [pc, #328]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24b6c:	f000 f9f0 	bl	24f50 <am_hal_flash_store_ui32>
   24b70:	9807      	ldr	r0, [sp, #28]
   24b72:	f000 fbb5 	bl	252e0 <am_hal_interrupt_master_set>
   24b76:	2000      	movs	r0, #0
   24b78:	e742      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24b7a:	f000 fbad 	bl	252d8 <am_hal_interrupt_master_disable>
   24b7e:	4603      	mov	r3, r0
   24b80:	484c      	ldr	r0, [pc, #304]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24b82:	9308      	str	r3, [sp, #32]
   24b84:	f000 f9e0 	bl	24f48 <am_hal_flash_load_ui32>
   24b88:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   24b8c:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   24b90:	4848      	ldr	r0, [pc, #288]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24b92:	f000 f9dd 	bl	24f50 <am_hal_flash_store_ui32>
   24b96:	9808      	ldr	r0, [sp, #32]
   24b98:	f000 fba2 	bl	252e0 <am_hal_interrupt_master_set>
   24b9c:	f000 fb9c 	bl	252d8 <am_hal_interrupt_master_disable>
   24ba0:	4603      	mov	r3, r0
   24ba2:	4844      	ldr	r0, [pc, #272]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24ba4:	9309      	str	r3, [sp, #36]	; 0x24
   24ba6:	f000 f9cf 	bl	24f48 <am_hal_flash_load_ui32>
   24baa:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   24bae:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
   24bb2:	4840      	ldr	r0, [pc, #256]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24bb4:	f000 f9cc 	bl	24f50 <am_hal_flash_store_ui32>
   24bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
   24bba:	f000 fb91 	bl	252e0 <am_hal_interrupt_master_set>
   24bbe:	f000 fb8b 	bl	252d8 <am_hal_interrupt_master_disable>
   24bc2:	4603      	mov	r3, r0
   24bc4:	483b      	ldr	r0, [pc, #236]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24bc6:	930a      	str	r3, [sp, #40]	; 0x28
   24bc8:	f000 f9be 	bl	24f48 <am_hal_flash_load_ui32>
   24bcc:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   24bd0:	f020 000f 	bic.w	r0, r0, #15
   24bd4:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   24bd8:	f041 0101 	orr.w	r1, r1, #1
   24bdc:	4835      	ldr	r0, [pc, #212]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24bde:	f000 f9b7 	bl	24f50 <am_hal_flash_store_ui32>
   24be2:	980a      	ldr	r0, [sp, #40]	; 0x28
   24be4:	f000 fb7c 	bl	252e0 <am_hal_interrupt_master_set>
   24be8:	2000      	movs	r0, #0
   24bea:	e709      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24bec:	2900      	cmp	r1, #0
   24bee:	d04d      	beq.n	24c8c <am_hal_cachectrl_control+0x2c8>
   24bf0:	680c      	ldr	r4, [r1, #0]
   24bf2:	2c03      	cmp	r4, #3
   24bf4:	d84c      	bhi.n	24c90 <am_hal_cachectrl_control+0x2cc>
   24bf6:	f000 fb6f 	bl	252d8 <am_hal_interrupt_master_disable>
   24bfa:	4603      	mov	r3, r0
   24bfc:	482d      	ldr	r0, [pc, #180]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24bfe:	930b      	str	r3, [sp, #44]	; 0x2c
   24c00:	f000 f9a2 	bl	24f48 <am_hal_flash_load_ui32>
   24c04:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   24c08:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   24c0c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   24c10:	4828      	ldr	r0, [pc, #160]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24c12:	f000 f99d 	bl	24f50 <am_hal_flash_store_ui32>
   24c16:	980b      	ldr	r0, [sp, #44]	; 0x2c
   24c18:	f000 fb62 	bl	252e0 <am_hal_interrupt_master_set>
   24c1c:	2000      	movs	r0, #0
   24c1e:	e6ef      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24c20:	b3a1      	cbz	r1, 24c8c <am_hal_cachectrl_control+0x2c8>
   24c22:	680c      	ldr	r4, [r1, #0]
   24c24:	2c07      	cmp	r4, #7
   24c26:	d833      	bhi.n	24c90 <am_hal_cachectrl_control+0x2cc>
   24c28:	f000 fb56 	bl	252d8 <am_hal_interrupt_master_disable>
   24c2c:	4603      	mov	r3, r0
   24c2e:	4821      	ldr	r0, [pc, #132]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24c30:	930c      	str	r3, [sp, #48]	; 0x30
   24c32:	f000 f989 	bl	24f48 <am_hal_flash_load_ui32>
   24c36:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   24c3a:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   24c3e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   24c42:	481c      	ldr	r0, [pc, #112]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24c44:	f000 f984 	bl	24f50 <am_hal_flash_store_ui32>
   24c48:	980c      	ldr	r0, [sp, #48]	; 0x30
   24c4a:	f000 fb49 	bl	252e0 <am_hal_interrupt_master_set>
   24c4e:	2000      	movs	r0, #0
   24c50:	e6d6      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24c52:	b1d9      	cbz	r1, 24c8c <am_hal_cachectrl_control+0x2c8>
   24c54:	680c      	ldr	r4, [r1, #0]
   24c56:	2c0f      	cmp	r4, #15
   24c58:	d81a      	bhi.n	24c90 <am_hal_cachectrl_control+0x2cc>
   24c5a:	f000 fb3d 	bl	252d8 <am_hal_interrupt_master_disable>
   24c5e:	4603      	mov	r3, r0
   24c60:	4814      	ldr	r0, [pc, #80]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24c62:	930d      	str	r3, [sp, #52]	; 0x34
   24c64:	f000 f970 	bl	24f48 <am_hal_flash_load_ui32>
   24c68:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   24c6c:	f020 000f 	bic.w	r0, r0, #15
   24c70:	ea40 0104 	orr.w	r1, r0, r4
   24c74:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   24c78:	480e      	ldr	r0, [pc, #56]	; (24cb4 <am_hal_cachectrl_control+0x2f0>)
   24c7a:	f000 f969 	bl	24f50 <am_hal_flash_store_ui32>
   24c7e:	980d      	ldr	r0, [sp, #52]	; 0x34
   24c80:	f000 fb2e 	bl	252e0 <am_hal_interrupt_master_set>
   24c84:	2000      	movs	r0, #0
   24c86:	e6bb      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24c88:	2007      	movs	r0, #7
   24c8a:	e6b9      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24c8c:	2006      	movs	r0, #6
   24c8e:	e6b7      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24c90:	2001      	movs	r0, #1
   24c92:	e6b5      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24c94:	2c01      	cmp	r4, #1
   24c96:	d1f9      	bne.n	24c8c <am_hal_cachectrl_control+0x2c8>
   24c98:	4c04      	ldr	r4, [pc, #16]	; (24cac <am_hal_cachectrl_control+0x2e8>)
   24c9a:	7849      	ldrb	r1, [r1, #1]
   24c9c:	61a2      	str	r2, [r4, #24]
   24c9e:	61e3      	str	r3, [r4, #28]
   24ca0:	6823      	ldr	r3, [r4, #0]
   24ca2:	f361 03c3 	bfi	r3, r1, #3, #1
   24ca6:	6023      	str	r3, [r4, #0]
   24ca8:	e6aa      	b.n	24a00 <am_hal_cachectrl_control+0x3c>
   24caa:	bf00      	nop
   24cac:	40018000 	.word	0x40018000
   24cb0:	f800000f 	.word	0xf800000f
   24cb4:	40018004 	.word	0x40018004

00024cb8 <am_hal_clkgen_control>:
   24cb8:	4b49      	ldr	r3, [pc, #292]	; (24de0 <am_hal_clkgen_control+0x128>)
   24cba:	681a      	ldr	r2, [r3, #0]
   24cbc:	b912      	cbnz	r2, 24cc4 <am_hal_clkgen_control+0xc>
   24cbe:	4a49      	ldr	r2, [pc, #292]	; (24de4 <am_hal_clkgen_control+0x12c>)
   24cc0:	6812      	ldr	r2, [r2, #0]
   24cc2:	601a      	str	r2, [r3, #0]
   24cc4:	2809      	cmp	r0, #9
   24cc6:	f200 8089 	bhi.w	24ddc <am_hal_clkgen_control+0x124>
   24cca:	e8df f000 	tbb	[pc, r0]
   24cce:	160d      	.short	0x160d
   24cd0:	423a261e 	.word	0x423a261e
   24cd4:	055c544c 	.word	0x055c544c
   24cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24cdc:	2000      	movs	r0, #0
   24cde:	6a1a      	ldr	r2, [r3, #32]
   24ce0:	f36f 0200 	bfc	r2, #0, #1
   24ce4:	621a      	str	r2, [r3, #32]
   24ce6:	4770      	bx	lr
   24ce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24cec:	2200      	movs	r2, #0
   24cee:	2147      	movs	r1, #71	; 0x47
   24cf0:	6159      	str	r1, [r3, #20]
   24cf2:	4610      	mov	r0, r2
   24cf4:	619a      	str	r2, [r3, #24]
   24cf6:	615a      	str	r2, [r3, #20]
   24cf8:	4770      	bx	lr
   24cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24cfe:	2000      	movs	r0, #0
   24d00:	899a      	ldrh	r2, [r3, #12]
   24d02:	f36f 0200 	bfc	r2, #0, #1
   24d06:	819a      	strh	r2, [r3, #12]
   24d08:	4770      	bx	lr
   24d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24d0e:	2000      	movs	r0, #0
   24d10:	899a      	ldrh	r2, [r3, #12]
   24d12:	f36f 0241 	bfc	r2, #1, #1
   24d16:	819a      	strh	r2, [r3, #12]
   24d18:	4770      	bx	lr
   24d1a:	4a33      	ldr	r2, [pc, #204]	; (24de8 <am_hal_clkgen_control+0x130>)
   24d1c:	68d3      	ldr	r3, [r2, #12]
   24d1e:	b2db      	uxtb	r3, r3
   24d20:	2b21      	cmp	r3, #33	; 0x21
   24d22:	d106      	bne.n	24d32 <am_hal_clkgen_control+0x7a>
   24d24:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   24d28:	2101      	movs	r1, #1
   24d2a:	f361 2309 	bfi	r3, r1, #8, #2
   24d2e:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   24d32:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   24d36:	2000      	movs	r0, #0
   24d38:	8993      	ldrh	r3, [r2, #12]
   24d3a:	f043 0301 	orr.w	r3, r3, #1
   24d3e:	8193      	strh	r3, [r2, #12]
   24d40:	4770      	bx	lr
   24d42:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   24d46:	2000      	movs	r0, #0
   24d48:	8993      	ldrh	r3, [r2, #12]
   24d4a:	f043 0302 	orr.w	r3, r3, #2
   24d4e:	8193      	strh	r3, [r2, #12]
   24d50:	4770      	bx	lr
   24d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24d56:	2200      	movs	r2, #0
   24d58:	2047      	movs	r0, #71	; 0x47
   24d5a:	2101      	movs	r1, #1
   24d5c:	6158      	str	r0, [r3, #20]
   24d5e:	6199      	str	r1, [r3, #24]
   24d60:	4610      	mov	r0, r2
   24d62:	615a      	str	r2, [r3, #20]
   24d64:	4770      	bx	lr
   24d66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24d6a:	2000      	movs	r0, #0
   24d6c:	899a      	ldrh	r2, [r3, #12]
   24d6e:	f36f 12c7 	bfc	r2, #7, #1
   24d72:	819a      	strh	r2, [r3, #12]
   24d74:	4770      	bx	lr
   24d76:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   24d7a:	2000      	movs	r0, #0
   24d7c:	8993      	ldrh	r3, [r2, #12]
   24d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   24d82:	8193      	strh	r3, [r2, #12]
   24d84:	4770      	bx	lr
   24d86:	4a18      	ldr	r2, [pc, #96]	; (24de8 <am_hal_clkgen_control+0x130>)
   24d88:	68d3      	ldr	r3, [r2, #12]
   24d8a:	b2db      	uxtb	r3, r3
   24d8c:	2b21      	cmp	r3, #33	; 0x21
   24d8e:	d00a      	beq.n	24da6 <am_hal_clkgen_control+0xee>
   24d90:	b139      	cbz	r1, 24da2 <am_hal_clkgen_control+0xea>
   24d92:	680b      	ldr	r3, [r1, #0]
   24d94:	f043 0301 	orr.w	r3, r3, #1
   24d98:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   24d9c:	2000      	movs	r0, #0
   24d9e:	6213      	str	r3, [r2, #32]
   24da0:	4770      	bx	lr
   24da2:	4b12      	ldr	r3, [pc, #72]	; (24dec <am_hal_clkgen_control+0x134>)
   24da4:	e7f8      	b.n	24d98 <am_hal_clkgen_control+0xe0>
   24da6:	b500      	push	{lr}
   24da8:	b083      	sub	sp, #12
   24daa:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   24dae:	9101      	str	r1, [sp, #4]
   24db0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   24db4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   24db8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   24dbc:	f000 f87e 	bl	24ebc <am_hal_flash_delay>
   24dc0:	9901      	ldr	r1, [sp, #4]
   24dc2:	b149      	cbz	r1, 24dd8 <am_hal_clkgen_control+0x120>
   24dc4:	680b      	ldr	r3, [r1, #0]
   24dc6:	f043 0301 	orr.w	r3, r3, #1
   24dca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   24dce:	2000      	movs	r0, #0
   24dd0:	6213      	str	r3, [r2, #32]
   24dd2:	b003      	add	sp, #12
   24dd4:	f85d fb04 	ldr.w	pc, [sp], #4
   24dd8:	4b04      	ldr	r3, [pc, #16]	; (24dec <am_hal_clkgen_control+0x134>)
   24dda:	e7f6      	b.n	24dca <am_hal_clkgen_control+0x112>
   24ddc:	2006      	movs	r0, #6
   24dde:	4770      	bx	lr
   24de0:	1000a39c 	.word	0x1000a39c
   24de4:	4ffff000 	.word	0x4ffff000
   24de8:	40020000 	.word	0x40020000
   24dec:	0025b801 	.word	0x0025b801

00024df0 <am_hal_clkgen_status_get>:
   24df0:	b1b0      	cbz	r0, 24e20 <am_hal_clkgen_status_get+0x30>
   24df2:	b410      	push	{r4}
   24df4:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
   24df8:	4603      	mov	r3, r0
   24dfa:	698c      	ldr	r4, [r1, #24]
   24dfc:	4809      	ldr	r0, [pc, #36]	; (24e24 <am_hal_clkgen_status_get+0x34>)
   24dfe:	4a0a      	ldr	r2, [pc, #40]	; (24e28 <am_hal_clkgen_status_get+0x38>)
   24e00:	f014 0f01 	tst.w	r4, #1
   24e04:	bf08      	it	eq
   24e06:	4602      	moveq	r2, r0
   24e08:	601a      	str	r2, [r3, #0]
   24e0a:	69ca      	ldr	r2, [r1, #28]
   24e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
   24e10:	f002 0101 	and.w	r1, r2, #1
   24e14:	f3c2 0240 	ubfx	r2, r2, #1, #1
   24e18:	2000      	movs	r0, #0
   24e1a:	6059      	str	r1, [r3, #4]
   24e1c:	721a      	strb	r2, [r3, #8]
   24e1e:	4770      	bx	lr
   24e20:	2006      	movs	r0, #6
   24e22:	4770      	bx	lr
   24e24:	02dc6c00 	.word	0x02dc6c00
   24e28:	016e3600 	.word	0x016e3600

00024e2c <am_hal_ctimer_int_service>:
   24e2c:	b198      	cbz	r0, 24e56 <am_hal_ctimer_int_service+0x2a>
   24e2e:	b570      	push	{r4, r5, r6, lr}
   24e30:	4e09      	ldr	r6, [pc, #36]	; (24e58 <am_hal_ctimer_int_service+0x2c>)
   24e32:	4604      	mov	r4, r0
   24e34:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   24e38:	fab4 f384 	clz	r3, r4
   24e3c:	f1c3 021f 	rsb	r2, r3, #31
   24e40:	fa25 f303 	lsr.w	r3, r5, r3
   24e44:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   24e48:	ea24 0403 	bic.w	r4, r4, r3
   24e4c:	b102      	cbz	r2, 24e50 <am_hal_ctimer_int_service+0x24>
   24e4e:	4790      	blx	r2
   24e50:	2c00      	cmp	r4, #0
   24e52:	d1f1      	bne.n	24e38 <am_hal_ctimer_int_service+0xc>
   24e54:	bd70      	pop	{r4, r5, r6, pc}
   24e56:	4770      	bx	lr
   24e58:	1000a31c 	.word	0x1000a31c

00024e5c <am_hal_ctimer_int_clear>:
   24e5c:	b510      	push	{r4, lr}
   24e5e:	b082      	sub	sp, #8
   24e60:	4604      	mov	r4, r0
   24e62:	f000 fa39 	bl	252d8 <am_hal_interrupt_master_disable>
   24e66:	4b05      	ldr	r3, [pc, #20]	; (24e7c <am_hal_ctimer_int_clear+0x20>)
   24e68:	9001      	str	r0, [sp, #4]
   24e6a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   24e6e:	9801      	ldr	r0, [sp, #4]
   24e70:	b002      	add	sp, #8
   24e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24e76:	f000 ba33 	b.w	252e0 <am_hal_interrupt_master_set>
   24e7a:	bf00      	nop
   24e7c:	40008000 	.word	0x40008000

00024e80 <am_hal_ctimer_int_status_get>:
   24e80:	b510      	push	{r4, lr}
   24e82:	b082      	sub	sp, #8
   24e84:	4604      	mov	r4, r0
   24e86:	f000 fa27 	bl	252d8 <am_hal_interrupt_master_disable>
   24e8a:	4b0b      	ldr	r3, [pc, #44]	; (24eb8 <am_hal_ctimer_int_status_get+0x38>)
   24e8c:	9001      	str	r0, [sp, #4]
   24e8e:	b154      	cbz	r4, 24ea6 <am_hal_ctimer_int_status_get+0x26>
   24e90:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   24e94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   24e98:	9801      	ldr	r0, [sp, #4]
   24e9a:	401c      	ands	r4, r3
   24e9c:	f000 fa20 	bl	252e0 <am_hal_interrupt_master_set>
   24ea0:	4620      	mov	r0, r4
   24ea2:	b002      	add	sp, #8
   24ea4:	bd10      	pop	{r4, pc}
   24ea6:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   24eaa:	9801      	ldr	r0, [sp, #4]
   24eac:	f000 fa18 	bl	252e0 <am_hal_interrupt_master_set>
   24eb0:	4620      	mov	r0, r4
   24eb2:	b002      	add	sp, #8
   24eb4:	bd10      	pop	{r4, pc}
   24eb6:	bf00      	nop
   24eb8:	40008000 	.word	0x40008000

00024ebc <am_hal_flash_delay>:
   24ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   24ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   24ec2:	075b      	lsls	r3, r3, #29
   24ec4:	bf46      	itte	mi
   24ec6:	0040      	lslmi	r0, r0, #1
   24ec8:	230e      	movmi	r3, #14
   24eca:	230b      	movpl	r3, #11
   24ecc:	4298      	cmp	r0, r3
   24ece:	d902      	bls.n	24ed6 <am_hal_flash_delay+0x1a>
   24ed0:	4a01      	ldr	r2, [pc, #4]	; (24ed8 <am_hal_flash_delay+0x1c>)
   24ed2:	1ac0      	subs	r0, r0, r3
   24ed4:	4710      	bx	r2
   24ed6:	4770      	bx	lr
   24ed8:	0800009d 	.word	0x0800009d

00024edc <am_hal_flash_delay_status_check>:
   24edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24ee0:	f89d c020 	ldrb.w	ip, [sp, #32]
   24ee4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 24f44 <am_hal_flash_delay_status_check+0x68>
   24ee8:	4604      	mov	r4, r0
   24eea:	460d      	mov	r5, r1
   24eec:	4616      	mov	r6, r2
   24eee:	461f      	mov	r7, r3
   24ef0:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   24ef4:	f1bc 0f00 	cmp.w	ip, #0
   24ef8:	d00a      	beq.n	24f10 <am_hal_flash_delay_status_check+0x34>
   24efa:	e01a      	b.n	24f32 <am_hal_flash_delay_status_check+0x56>
   24efc:	b1f4      	cbz	r4, 24f3c <am_hal_flash_delay_status_check+0x60>
   24efe:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   24f02:	f013 0f04 	tst.w	r3, #4
   24f06:	bf0c      	ite	eq
   24f08:	2005      	moveq	r0, #5
   24f0a:	2012      	movne	r0, #18
   24f0c:	3c01      	subs	r4, #1
   24f0e:	47c0      	blx	r8
   24f10:	6828      	ldr	r0, [r5, #0]
   24f12:	4030      	ands	r0, r6
   24f14:	42b8      	cmp	r0, r7
   24f16:	d0f1      	beq.n	24efc <am_hal_flash_delay_status_check+0x20>
   24f18:	2000      	movs	r0, #0
   24f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24f1e:	b16c      	cbz	r4, 24f3c <am_hal_flash_delay_status_check+0x60>
   24f20:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   24f24:	f013 0f04 	tst.w	r3, #4
   24f28:	bf0c      	ite	eq
   24f2a:	2005      	moveq	r0, #5
   24f2c:	2012      	movne	r0, #18
   24f2e:	3c01      	subs	r4, #1
   24f30:	47c0      	blx	r8
   24f32:	6828      	ldr	r0, [r5, #0]
   24f34:	4030      	ands	r0, r6
   24f36:	42b8      	cmp	r0, r7
   24f38:	d1f1      	bne.n	24f1e <am_hal_flash_delay_status_check+0x42>
   24f3a:	e7ed      	b.n	24f18 <am_hal_flash_delay_status_check+0x3c>
   24f3c:	2004      	movs	r0, #4
   24f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24f42:	bf00      	nop
   24f44:	0800009d 	.word	0x0800009d

00024f48 <am_hal_flash_load_ui32>:
   24f48:	4b00      	ldr	r3, [pc, #0]	; (24f4c <am_hal_flash_load_ui32+0x4>)
   24f4a:	4718      	bx	r3
   24f4c:	08000075 	.word	0x08000075

00024f50 <am_hal_flash_store_ui32>:
   24f50:	4b01      	ldr	r3, [pc, #4]	; (24f58 <am_hal_flash_store_ui32+0x8>)
   24f52:	f043 0301 	orr.w	r3, r3, #1
   24f56:	4718      	bx	r3
   24f58:	10003e88 	.word	0x10003e88

00024f5c <am_hal_triple_read>:
   24f5c:	b412      	push	{r1, r4}
   24f5e:	f3ef 8410 	mrs	r4, PRIMASK
   24f62:	b672      	cpsid	i
   24f64:	6801      	ldr	r1, [r0, #0]
   24f66:	6802      	ldr	r2, [r0, #0]
   24f68:	6803      	ldr	r3, [r0, #0]
   24f6a:	f384 8810 	msr	PRIMASK, r4
   24f6e:	bc11      	pop	{r0, r4}
   24f70:	6001      	str	r1, [r0, #0]
   24f72:	6042      	str	r2, [r0, #4]
   24f74:	6083      	str	r3, [r0, #8]
   24f76:	4770      	bx	lr

00024f78 <am_hal_gpio_pinconfig>:
   24f78:	2831      	cmp	r0, #49	; 0x31
   24f7a:	f200 80c3 	bhi.w	25104 <am_hal_gpio_pinconfig+0x18c>
   24f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f82:	4604      	mov	r4, r0
   24f84:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
   24f88:	f001 0007 	and.w	r0, r1, #7
   24f8c:	b085      	sub	sp, #20
   24f8e:	f3c1 03c1 	ubfx	r3, r1, #3, #2
   24f92:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   24f96:	d00f      	beq.n	24fb8 <am_hal_gpio_pinconfig+0x40>
   24f98:	f3c1 1642 	ubfx	r6, r1, #5, #3
   24f9c:	1db5      	adds	r5, r6, #6
   24f9e:	f005 0507 	and.w	r5, r5, #7
   24fa2:	2d03      	cmp	r5, #3
   24fa4:	f042 0201 	orr.w	r2, r2, #1
   24fa8:	f240 80ae 	bls.w	25108 <am_hal_gpio_pinconfig+0x190>
   24fac:	2fc0      	cmp	r7, #192	; 0xc0
   24fae:	f000 80e1 	beq.w	25174 <am_hal_gpio_pinconfig+0x1fc>
   24fb2:	2f20      	cmp	r7, #32
   24fb4:	f000 80e3 	beq.w	2517e <am_hal_gpio_pinconfig+0x206>
   24fb8:	b163      	cbz	r3, 24fd4 <am_hal_gpio_pinconfig+0x5c>
   24fba:	2b01      	cmp	r3, #1
   24fbc:	f000 80d3 	beq.w	25166 <am_hal_gpio_pinconfig+0x1ee>
   24fc0:	2b02      	cmp	r3, #2
   24fc2:	f040 80c9 	bne.w	25158 <am_hal_gpio_pinconfig+0x1e0>
   24fc6:	4b79      	ldr	r3, [pc, #484]	; (251ac <am_hal_gpio_pinconfig+0x234>)
   24fc8:	5d1b      	ldrb	r3, [r3, r4]
   24fca:	075b      	lsls	r3, r3, #29
   24fcc:	f140 80c4 	bpl.w	25158 <am_hal_gpio_pinconfig+0x1e0>
   24fd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   24fd4:	4b76      	ldr	r3, [pc, #472]	; (251b0 <am_hal_gpio_pinconfig+0x238>)
   24fd6:	5d1b      	ldrb	r3, [r3, r4]
   24fd8:	4103      	asrs	r3, r0
   24fda:	005b      	lsls	r3, r3, #1
   24fdc:	f003 0302 	and.w	r3, r3, #2
   24fe0:	4313      	orrs	r3, r2
   24fe2:	4a74      	ldr	r2, [pc, #464]	; (251b4 <am_hal_gpio_pinconfig+0x23c>)
   24fe4:	5d12      	ldrb	r2, [r2, r4]
   24fe6:	4282      	cmp	r2, r0
   24fe8:	f000 8099 	beq.w	2511e <am_hal_gpio_pinconfig+0x1a6>
   24fec:	f3c1 3000 	ubfx	r0, r1, #12, #1
   24ff0:	f3c1 2581 	ubfx	r5, r1, #10, #2
   24ff4:	f3c1 3280 	ubfx	r2, r1, #14, #1
   24ff8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
   24ffc:	0a88      	lsrs	r0, r1, #10
   24ffe:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   25002:	f000 0008 	and.w	r0, r0, #8
   25006:	4302      	orrs	r2, r0
   25008:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2500c:	f000 050c 	and.w	r5, r0, #12
   25010:	2d04      	cmp	r5, #4
   25012:	f000 80a5 	beq.w	25160 <am_hal_gpio_pinconfig+0x1e8>
   25016:	4d68      	ldr	r5, [pc, #416]	; (251b8 <am_hal_gpio_pinconfig+0x240>)
   25018:	682d      	ldr	r5, [r5, #0]
   2501a:	eba1 0805 	sub.w	r8, r1, r5
   2501e:	fab8 f888 	clz	r8, r8
   25022:	ea4f 1858 	mov.w	r8, r8, lsr #5
   25026:	f010 0f60 	tst.w	r0, #96	; 0x60
   2502a:	bf04      	itt	eq
   2502c:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
   25030:	f360 0200 	bfieq	r2, r0, #0, #1
   25034:	00a0      	lsls	r0, r4, #2
   25036:	f3c1 2101 	ubfx	r1, r1, #8, #2
   2503a:	2902      	cmp	r1, #2
   2503c:	d05c      	beq.n	250f8 <am_hal_gpio_pinconfig+0x180>
   2503e:	2903      	cmp	r1, #3
   25040:	d058      	beq.n	250f4 <am_hal_gpio_pinconfig+0x17c>
   25042:	2901      	cmp	r1, #1
   25044:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   25048:	bf08      	it	eq
   2504a:	f043 0304 	orreq.w	r3, r3, #4
   2504e:	f001 0118 	and.w	r1, r1, #24
   25052:	2700      	movs	r7, #0
   25054:	f000 001c 	and.w	r0, r0, #28
   25058:	fa02 f600 	lsl.w	r6, r2, r0
   2505c:	220f      	movs	r2, #15
   2505e:	4082      	lsls	r2, r0
   25060:	43d2      	mvns	r2, r2
   25062:	f04f 09ff 	mov.w	r9, #255	; 0xff
   25066:	fa03 f501 	lsl.w	r5, r3, r1
   2506a:	fa09 f901 	lsl.w	r9, r9, r1
   2506e:	9201      	str	r2, [sp, #4]
   25070:	f000 f932 	bl	252d8 <am_hal_interrupt_master_disable>
   25074:	f024 0a03 	bic.w	sl, r4, #3
   25078:	ea4f 0b54 	mov.w	fp, r4, lsr #1
   2507c:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
   25080:	4b4e      	ldr	r3, [pc, #312]	; (251bc <am_hal_gpio_pinconfig+0x244>)
   25082:	494f      	ldr	r1, [pc, #316]	; (251c0 <am_hal_gpio_pinconfig+0x248>)
   25084:	9a01      	ldr	r2, [sp, #4]
   25086:	9003      	str	r0, [sp, #12]
   25088:	ea6f 0909 	mvn.w	r9, r9
   2508c:	f02b 0b03 	bic.w	fp, fp, #3
   25090:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
   25094:	f1b8 0f00 	cmp.w	r8, #0
   25098:	d00b      	beq.n	250b2 <am_hal_gpio_pinconfig+0x13a>
   2509a:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   2509e:	f004 081f 	and.w	r8, r4, #31
   250a2:	4848      	ldr	r0, [pc, #288]	; (251c4 <am_hal_gpio_pinconfig+0x24c>)
   250a4:	f00e 0e04 	and.w	lr, lr, #4
   250a8:	2401      	movs	r4, #1
   250aa:	fa04 f408 	lsl.w	r4, r4, r8
   250ae:	f84e 4000 	str.w	r4, [lr, r0]
   250b2:	4845      	ldr	r0, [pc, #276]	; (251c8 <am_hal_gpio_pinconfig+0x250>)
   250b4:	2473      	movs	r4, #115	; 0x73
   250b6:	6604      	str	r4, [r0, #96]	; 0x60
   250b8:	f8dc 4000 	ldr.w	r4, [ip]
   250bc:	ea04 0409 	and.w	r4, r4, r9
   250c0:	4325      	orrs	r5, r4
   250c2:	f8cc 5000 	str.w	r5, [ip]
   250c6:	f85b 4003 	ldr.w	r4, [fp, r3]
   250ca:	4022      	ands	r2, r4
   250cc:	4332      	orrs	r2, r6
   250ce:	f84b 2003 	str.w	r2, [fp, r3]
   250d2:	f85a 3001 	ldr.w	r3, [sl, r1]
   250d6:	ea03 0909 	and.w	r9, r3, r9
   250da:	2400      	movs	r4, #0
   250dc:	ea49 0707 	orr.w	r7, r9, r7
   250e0:	f84a 7001 	str.w	r7, [sl, r1]
   250e4:	6604      	str	r4, [r0, #96]	; 0x60
   250e6:	9803      	ldr	r0, [sp, #12]
   250e8:	f000 f8fa 	bl	252e0 <am_hal_interrupt_master_set>
   250ec:	4620      	mov	r0, r4
   250ee:	b005      	add	sp, #20
   250f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250f4:	f043 0304 	orr.w	r3, r3, #4
   250f8:	00e1      	lsls	r1, r4, #3
   250fa:	f001 0118 	and.w	r1, r1, #24
   250fe:	2701      	movs	r7, #1
   25100:	408f      	lsls	r7, r1
   25102:	e7a7      	b.n	25054 <am_hal_gpio_pinconfig+0xdc>
   25104:	2006      	movs	r0, #6
   25106:	4770      	bx	lr
   25108:	4d28      	ldr	r5, [pc, #160]	; (251ac <am_hal_gpio_pinconfig+0x234>)
   2510a:	5d2d      	ldrb	r5, [r5, r4]
   2510c:	3e02      	subs	r6, #2
   2510e:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   25112:	07ee      	lsls	r6, r5, #31
   25114:	d536      	bpl.n	25184 <am_hal_gpio_pinconfig+0x20c>
   25116:	2b00      	cmp	r3, #0
   25118:	f43f af5c 	beq.w	24fd4 <am_hal_gpio_pinconfig+0x5c>
   2511c:	e74d      	b.n	24fba <am_hal_gpio_pinconfig+0x42>
   2511e:	f3c1 4202 	ubfx	r2, r1, #16, #3
   25122:	2a07      	cmp	r2, #7
   25124:	d030      	beq.n	25188 <am_hal_gpio_pinconfig+0x210>
   25126:	4d29      	ldr	r5, [pc, #164]	; (251cc <am_hal_gpio_pinconfig+0x254>)
   25128:	f3c1 40c1 	ubfx	r0, r1, #19, #2
   2512c:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   25130:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
   25134:	4290      	cmp	r0, r2
   25136:	d029      	beq.n	2518c <am_hal_gpio_pinconfig+0x214>
   25138:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   2513c:	00a0      	lsls	r0, r4, #2
   2513e:	786e      	ldrb	r6, [r5, #1]
   25140:	4296      	cmp	r6, r2
   25142:	d02d      	beq.n	251a0 <am_hal_gpio_pinconfig+0x228>
   25144:	78ae      	ldrb	r6, [r5, #2]
   25146:	4296      	cmp	r6, r2
   25148:	d02c      	beq.n	251a4 <am_hal_gpio_pinconfig+0x22c>
   2514a:	78ed      	ldrb	r5, [r5, #3]
   2514c:	4295      	cmp	r5, r2
   2514e:	d02b      	beq.n	251a8 <am_hal_gpio_pinconfig+0x230>
   25150:	481f      	ldr	r0, [pc, #124]	; (251d0 <am_hal_gpio_pinconfig+0x258>)
   25152:	b005      	add	sp, #20
   25154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25158:	481e      	ldr	r0, [pc, #120]	; (251d4 <am_hal_gpio_pinconfig+0x25c>)
   2515a:	b005      	add	sp, #20
   2515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25160:	f04f 0801 	mov.w	r8, #1
   25164:	e75f      	b.n	25026 <am_hal_gpio_pinconfig+0xae>
   25166:	4b11      	ldr	r3, [pc, #68]	; (251ac <am_hal_gpio_pinconfig+0x234>)
   25168:	5d1b      	ldrb	r3, [r3, r4]
   2516a:	079d      	lsls	r5, r3, #30
   2516c:	d5f4      	bpl.n	25158 <am_hal_gpio_pinconfig+0x1e0>
   2516e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   25172:	e72f      	b.n	24fd4 <am_hal_gpio_pinconfig+0x5c>
   25174:	2c14      	cmp	r4, #20
   25176:	f43f af1f 	beq.w	24fb8 <am_hal_gpio_pinconfig+0x40>
   2517a:	4817      	ldr	r0, [pc, #92]	; (251d8 <am_hal_gpio_pinconfig+0x260>)
   2517c:	e7b7      	b.n	250ee <am_hal_gpio_pinconfig+0x176>
   2517e:	2c14      	cmp	r4, #20
   25180:	f47f af1a 	bne.w	24fb8 <am_hal_gpio_pinconfig+0x40>
   25184:	4815      	ldr	r0, [pc, #84]	; (251dc <am_hal_gpio_pinconfig+0x264>)
   25186:	e7b2      	b.n	250ee <am_hal_gpio_pinconfig+0x176>
   25188:	4815      	ldr	r0, [pc, #84]	; (251e0 <am_hal_gpio_pinconfig+0x268>)
   2518a:	e7b0      	b.n	250ee <am_hal_gpio_pinconfig+0x176>
   2518c:	2200      	movs	r2, #0
   2518e:	00a0      	lsls	r0, r4, #2
   25190:	0052      	lsls	r2, r2, #1
   25192:	f3c1 5540 	ubfx	r5, r1, #21, #1
   25196:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
   2519a:	f04f 0800 	mov.w	r8, #0
   2519e:	e74a      	b.n	25036 <am_hal_gpio_pinconfig+0xbe>
   251a0:	2201      	movs	r2, #1
   251a2:	e7f5      	b.n	25190 <am_hal_gpio_pinconfig+0x218>
   251a4:	2202      	movs	r2, #2
   251a6:	e7f3      	b.n	25190 <am_hal_gpio_pinconfig+0x218>
   251a8:	2203      	movs	r2, #3
   251aa:	e7f1      	b.n	25190 <am_hal_gpio_pinconfig+0x218>
   251ac:	00029ef8 	.word	0x00029ef8
   251b0:	00029f2c 	.word	0x00029f2c
   251b4:	0002a028 	.word	0x0002a028
   251b8:	00029eec 	.word	0x00029eec
   251bc:	40010040 	.word	0x40010040
   251c0:	400100e0 	.word	0x400100e0
   251c4:	400100b4 	.word	0x400100b4
   251c8:	40010000 	.word	0x40010000
   251cc:	00029f60 	.word	0x00029f60
   251d0:	08000104 	.word	0x08000104
   251d4:	08000102 	.word	0x08000102
   251d8:	08000101 	.word	0x08000101
   251dc:	08000100 	.word	0x08000100
   251e0:	08000103 	.word	0x08000103

000251e4 <am_hal_gpio_state_read>:
   251e4:	b15a      	cbz	r2, 251fe <am_hal_gpio_state_read+0x1a>
   251e6:	2831      	cmp	r0, #49	; 0x31
   251e8:	d81d      	bhi.n	25226 <am_hal_gpio_state_read+0x42>
   251ea:	08c3      	lsrs	r3, r0, #3
   251ec:	2901      	cmp	r1, #1
   251ee:	f003 0304 	and.w	r3, r3, #4
   251f2:	f000 001f 	and.w	r0, r0, #31
   251f6:	d01b      	beq.n	25230 <am_hal_gpio_state_read+0x4c>
   251f8:	2902      	cmp	r1, #2
   251fa:	d00b      	beq.n	25214 <am_hal_gpio_state_read+0x30>
   251fc:	b109      	cbz	r1, 25202 <am_hal_gpio_state_read+0x1e>
   251fe:	2006      	movs	r0, #6
   25200:	4770      	bx	lr
   25202:	4910      	ldr	r1, [pc, #64]	; (25244 <am_hal_gpio_state_read+0x60>)
   25204:	585b      	ldr	r3, [r3, r1]
   25206:	fa23 f000 	lsr.w	r0, r3, r0
   2520a:	f000 0001 	and.w	r0, r0, #1
   2520e:	6010      	str	r0, [r2, #0]
   25210:	2000      	movs	r0, #0
   25212:	4770      	bx	lr
   25214:	490c      	ldr	r1, [pc, #48]	; (25248 <am_hal_gpio_state_read+0x64>)
   25216:	585b      	ldr	r3, [r3, r1]
   25218:	fa23 f000 	lsr.w	r0, r3, r0
   2521c:	f000 0001 	and.w	r0, r0, #1
   25220:	6010      	str	r0, [r2, #0]
   25222:	2000      	movs	r0, #0
   25224:	4770      	bx	lr
   25226:	f04f 33ff 	mov.w	r3, #4294967295
   2522a:	6013      	str	r3, [r2, #0]
   2522c:	2005      	movs	r0, #5
   2522e:	4770      	bx	lr
   25230:	4906      	ldr	r1, [pc, #24]	; (2524c <am_hal_gpio_state_read+0x68>)
   25232:	585b      	ldr	r3, [r3, r1]
   25234:	fa23 f000 	lsr.w	r0, r3, r0
   25238:	f000 0001 	and.w	r0, r0, #1
   2523c:	6010      	str	r0, [r2, #0]
   2523e:	2000      	movs	r0, #0
   25240:	4770      	bx	lr
   25242:	bf00      	nop
   25244:	40010080 	.word	0x40010080
   25248:	400100a0 	.word	0x400100a0
   2524c:	40010088 	.word	0x40010088

00025250 <am_hal_gpio_state_write>:
   25250:	2831      	cmp	r0, #49	; 0x31
   25252:	d81a      	bhi.n	2528a <am_hal_gpio_state_write+0x3a>
   25254:	b570      	push	{r4, r5, r6, lr}
   25256:	2905      	cmp	r1, #5
   25258:	b082      	sub	sp, #8
   2525a:	460d      	mov	r5, r1
   2525c:	d812      	bhi.n	25284 <am_hal_gpio_state_write+0x34>
   2525e:	f000 031f 	and.w	r3, r0, #31
   25262:	2201      	movs	r2, #1
   25264:	08c0      	lsrs	r0, r0, #3
   25266:	fa02 f603 	lsl.w	r6, r2, r3
   2526a:	f000 0404 	and.w	r4, r0, #4
   2526e:	f000 f833 	bl	252d8 <am_hal_interrupt_master_disable>
   25272:	3d01      	subs	r5, #1
   25274:	9001      	str	r0, [sp, #4]
   25276:	2d04      	cmp	r5, #4
   25278:	d821      	bhi.n	252be <am_hal_gpio_state_write+0x6e>
   2527a:	e8df f005 	tbb	[pc, r5]
   2527e:	1512      	.short	0x1512
   25280:	1d1a      	.short	0x1d1a
   25282:	08          	.byte	0x08
   25283:	00          	.byte	0x00
   25284:	2006      	movs	r0, #6
   25286:	b002      	add	sp, #8
   25288:	bd70      	pop	{r4, r5, r6, pc}
   2528a:	2005      	movs	r0, #5
   2528c:	4770      	bx	lr
   2528e:	4a0d      	ldr	r2, [pc, #52]	; (252c4 <am_hal_gpio_state_write+0x74>)
   25290:	58a3      	ldr	r3, [r4, r2]
   25292:	4073      	eors	r3, r6
   25294:	50a3      	str	r3, [r4, r2]
   25296:	9801      	ldr	r0, [sp, #4]
   25298:	f000 f822 	bl	252e0 <am_hal_interrupt_master_set>
   2529c:	2000      	movs	r0, #0
   2529e:	b002      	add	sp, #8
   252a0:	bd70      	pop	{r4, r5, r6, pc}
   252a2:	4b09      	ldr	r3, [pc, #36]	; (252c8 <am_hal_gpio_state_write+0x78>)
   252a4:	50e6      	str	r6, [r4, r3]
   252a6:	e7f6      	b.n	25296 <am_hal_gpio_state_write+0x46>
   252a8:	4a08      	ldr	r2, [pc, #32]	; (252cc <am_hal_gpio_state_write+0x7c>)
   252aa:	58a3      	ldr	r3, [r4, r2]
   252ac:	4073      	eors	r3, r6
   252ae:	50a3      	str	r3, [r4, r2]
   252b0:	e7f1      	b.n	25296 <am_hal_gpio_state_write+0x46>
   252b2:	4b04      	ldr	r3, [pc, #16]	; (252c4 <am_hal_gpio_state_write+0x74>)
   252b4:	50e6      	str	r6, [r4, r3]
   252b6:	e7ee      	b.n	25296 <am_hal_gpio_state_write+0x46>
   252b8:	4b05      	ldr	r3, [pc, #20]	; (252d0 <am_hal_gpio_state_write+0x80>)
   252ba:	50e6      	str	r6, [r4, r3]
   252bc:	e7eb      	b.n	25296 <am_hal_gpio_state_write+0x46>
   252be:	4b05      	ldr	r3, [pc, #20]	; (252d4 <am_hal_gpio_state_write+0x84>)
   252c0:	50e6      	str	r6, [r4, r3]
   252c2:	e7e8      	b.n	25296 <am_hal_gpio_state_write+0x46>
   252c4:	400100b4 	.word	0x400100b4
   252c8:	40010090 	.word	0x40010090
   252cc:	40010088 	.word	0x40010088
   252d0:	400100a8 	.word	0x400100a8
   252d4:	40010098 	.word	0x40010098

000252d8 <am_hal_interrupt_master_disable>:
   252d8:	f3ef 8010 	mrs	r0, PRIMASK
   252dc:	b672      	cpsid	i
   252de:	4770      	bx	lr

000252e0 <am_hal_interrupt_master_set>:
   252e0:	f380 8810 	msr	PRIMASK, r0
   252e4:	4770      	bx	lr
   252e6:	bf00      	nop

000252e8 <am_hal_itm_enable>:
   252e8:	4a0e      	ldr	r2, [pc, #56]	; (25324 <am_hal_itm_enable+0x3c>)
   252ea:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   252ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   252f2:	b410      	push	{r4}
   252f4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
   252f8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   252fc:	01db      	lsls	r3, r3, #7
   252fe:	d5fb      	bpl.n	252f8 <am_hal_itm_enable+0x10>
   25300:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   25304:	4c08      	ldr	r4, [pc, #32]	; (25328 <am_hal_itm_enable+0x40>)
   25306:	4a09      	ldr	r2, [pc, #36]	; (2532c <am_hal_itm_enable+0x44>)
   25308:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
   2530c:	200f      	movs	r0, #15
   2530e:	f04f 31ff 	mov.w	r1, #4294967295
   25312:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   25316:	f85d 4b04 	ldr.w	r4, [sp], #4
   2531a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   2531e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   25322:	4770      	bx	lr
   25324:	e000ed00 	.word	0xe000ed00
   25328:	c5acce55 	.word	0xc5acce55
   2532c:	00150511 	.word	0x00150511

00025330 <am_hal_itm_print>:
   25330:	7803      	ldrb	r3, [r0, #0]
   25332:	b1a3      	cbz	r3, 2535e <am_hal_itm_print+0x2e>
   25334:	4603      	mov	r3, r0
   25336:	f1c0 0c01 	rsb	ip, r0, #1
   2533a:	eb0c 0103 	add.w	r1, ip, r3
   2533e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25342:	2a00      	cmp	r2, #0
   25344:	d1f9      	bne.n	2533a <am_hal_itm_print+0xa>
   25346:	4401      	add	r1, r0
   25348:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   2534c:	f810 cb01 	ldrb.w	ip, [r0], #1
   25350:	6813      	ldr	r3, [r2, #0]
   25352:	2b00      	cmp	r3, #0
   25354:	d0fc      	beq.n	25350 <am_hal_itm_print+0x20>
   25356:	4288      	cmp	r0, r1
   25358:	f882 c000 	strb.w	ip, [r2]
   2535c:	d1f6      	bne.n	2534c <am_hal_itm_print+0x1c>
   2535e:	4770      	bx	lr

00025360 <am_hal_mcuctrl_info_get>:
   25360:	2900      	cmp	r1, #0
   25362:	f000 808f 	beq.w	25484 <am_hal_mcuctrl_info_get+0x124>
   25366:	2801      	cmp	r0, #1
   25368:	b430      	push	{r4, r5}
   2536a:	d006      	beq.n	2537a <am_hal_mcuctrl_info_get+0x1a>
   2536c:	2802      	cmp	r0, #2
   2536e:	d06d      	beq.n	2544c <am_hal_mcuctrl_info_get+0xec>
   25370:	2800      	cmp	r0, #0
   25372:	d055      	beq.n	25420 <am_hal_mcuctrl_info_get+0xc0>
   25374:	2006      	movs	r0, #6
   25376:	bc30      	pop	{r4, r5}
   25378:	4770      	bx	lr
   2537a:	4a43      	ldr	r2, [pc, #268]	; (25488 <am_hal_mcuctrl_info_get+0x128>)
   2537c:	4843      	ldr	r0, [pc, #268]	; (2548c <am_hal_mcuctrl_info_get+0x12c>)
   2537e:	6813      	ldr	r3, [r2, #0]
   25380:	600b      	str	r3, [r1, #0]
   25382:	6854      	ldr	r4, [r2, #4]
   25384:	604c      	str	r4, [r1, #4]
   25386:	6894      	ldr	r4, [r2, #8]
   25388:	608c      	str	r4, [r1, #8]
   2538a:	68d4      	ldr	r4, [r2, #12]
   2538c:	60cc      	str	r4, [r1, #12]
   2538e:	f3c3 5503 	ubfx	r5, r3, #20, #4
   25392:	6914      	ldr	r4, [r2, #16]
   25394:	610c      	str	r4, [r1, #16]
   25396:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   2539a:	4c3d      	ldr	r4, [pc, #244]	; (25490 <am_hal_mcuctrl_info_get+0x130>)
   2539c:	6950      	ldr	r0, [r2, #20]
   2539e:	6148      	str	r0, [r1, #20]
   253a0:	f003 0201 	and.w	r2, r3, #1
   253a4:	f3c3 4303 	ubfx	r3, r3, #16, #4
   253a8:	e9c1 2506 	strd	r2, r5, [r1, #24]
   253ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   253b0:	4a38      	ldr	r2, [pc, #224]	; (25494 <am_hal_mcuctrl_info_get+0x134>)
   253b2:	620b      	str	r3, [r1, #32]
   253b4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   253b8:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
   253bc:	b2db      	uxtb	r3, r3
   253be:	f000 000f 	and.w	r0, r0, #15
   253c2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   253c6:	624b      	str	r3, [r1, #36]	; 0x24
   253c8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   253cc:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
   253d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   253d4:	f000 000f 	and.w	r0, r0, #15
   253d8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   253dc:	628b      	str	r3, [r1, #40]	; 0x28
   253de:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   253e2:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
   253e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   253ea:	f3c0 1003 	ubfx	r0, r0, #4, #4
   253ee:	4303      	orrs	r3, r0
   253f0:	62cb      	str	r3, [r1, #44]	; 0x2c
   253f2:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
   253f6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
   253fa:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
   253fe:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   25402:	b2db      	uxtb	r3, r3
   25404:	041b      	lsls	r3, r3, #16
   25406:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   2540a:	fa5f fc82 	uxtb.w	ip, r2
   2540e:	ea43 030c 	orr.w	r3, r3, ip
   25412:	b2c2      	uxtb	r2, r0
   25414:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25418:	630b      	str	r3, [r1, #48]	; 0x30
   2541a:	2000      	movs	r0, #0
   2541c:	bc30      	pop	{r4, r5}
   2541e:	4770      	bx	lr
   25420:	4a19      	ldr	r2, [pc, #100]	; (25488 <am_hal_mcuctrl_info_get+0x128>)
   25422:	6993      	ldr	r3, [r2, #24]
   25424:	f3c3 1480 	ubfx	r4, r3, #6, #1
   25428:	700c      	strb	r4, [r1, #0]
   2542a:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
   2542e:	f3c3 0380 	ubfx	r3, r3, #2, #1
   25432:	704b      	strb	r3, [r1, #1]
   25434:	f3c4 6381 	ubfx	r3, r4, #26, #2
   25438:	710b      	strb	r3, [r1, #4]
   2543a:	6953      	ldr	r3, [r2, #20]
   2543c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   25440:	f003 0301 	and.w	r3, r3, #1
   25444:	bc30      	pop	{r4, r5}
   25446:	708a      	strb	r2, [r1, #2]
   25448:	70cb      	strb	r3, [r1, #3]
   2544a:	4770      	bx	lr
   2544c:	4a0e      	ldr	r2, [pc, #56]	; (25488 <am_hal_mcuctrl_info_get+0x128>)
   2544e:	6848      	ldr	r0, [r1, #4]
   25450:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   25454:	f003 0401 	and.w	r4, r3, #1
   25458:	700c      	strb	r4, [r1, #0]
   2545a:	f3c3 0440 	ubfx	r4, r3, #1, #1
   2545e:	720c      	strb	r4, [r1, #8]
   25460:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
   25464:	60cc      	str	r4, [r1, #12]
   25466:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
   2546a:	4320      	orrs	r0, r4
   2546c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   25470:	6048      	str	r0, [r1, #4]
   25472:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   25476:	740b      	strb	r3, [r1, #16]
   25478:	694b      	ldr	r3, [r1, #20]
   2547a:	4313      	orrs	r3, r2
   2547c:	2000      	movs	r0, #0
   2547e:	bc30      	pop	{r4, r5}
   25480:	614b      	str	r3, [r1, #20]
   25482:	4770      	bx	lr
   25484:	2006      	movs	r0, #6
   25486:	4770      	bx	lr
   25488:	40020000 	.word	0x40020000
   2548c:	0002a05c 	.word	0x0002a05c
   25490:	0002a09c 	.word	0x0002a09c
   25494:	f0000f00 	.word	0xf0000f00

00025498 <am_hal_pwrctrl_periph_enable>:
   25498:	b570      	push	{r4, r5, r6, lr}
   2549a:	b082      	sub	sp, #8
   2549c:	4604      	mov	r4, r0
   2549e:	f7ff ff1b 	bl	252d8 <am_hal_interrupt_master_disable>
   254a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   254a6:	4e0f      	ldr	r6, [pc, #60]	; (254e4 <am_hal_pwrctrl_periph_enable+0x4c>)
   254a8:	4d0f      	ldr	r5, [pc, #60]	; (254e8 <am_hal_pwrctrl_periph_enable+0x50>)
   254aa:	9001      	str	r0, [sp, #4]
   254ac:	00a4      	lsls	r4, r4, #2
   254ae:	68b3      	ldr	r3, [r6, #8]
   254b0:	592a      	ldr	r2, [r5, r4]
   254b2:	4313      	orrs	r3, r2
   254b4:	60b3      	str	r3, [r6, #8]
   254b6:	9801      	ldr	r0, [sp, #4]
   254b8:	442c      	add	r4, r5
   254ba:	f7ff ff11 	bl	252e0 <am_hal_interrupt_master_set>
   254be:	20a0      	movs	r0, #160	; 0xa0
   254c0:	f7ff fcfc 	bl	24ebc <am_hal_flash_delay>
   254c4:	69b3      	ldr	r3, [r6, #24]
   254c6:	6864      	ldr	r4, [r4, #4]
   254c8:	4223      	tst	r3, r4
   254ca:	d103      	bne.n	254d4 <am_hal_pwrctrl_periph_enable+0x3c>
   254cc:	20a0      	movs	r0, #160	; 0xa0
   254ce:	f7ff fcf5 	bl	24ebc <am_hal_flash_delay>
   254d2:	69b3      	ldr	r3, [r6, #24]
   254d4:	4b03      	ldr	r3, [pc, #12]	; (254e4 <am_hal_pwrctrl_periph_enable+0x4c>)
   254d6:	699b      	ldr	r3, [r3, #24]
   254d8:	4223      	tst	r3, r4
   254da:	bf0c      	ite	eq
   254dc:	2001      	moveq	r0, #1
   254de:	2000      	movne	r0, #0
   254e0:	b002      	add	sp, #8
   254e2:	bd70      	pop	{r4, r5, r6, pc}
   254e4:	40021000 	.word	0x40021000
   254e8:	0002a0dc 	.word	0x0002a0dc

000254ec <am_hal_pwrctrl_periph_disable>:
   254ec:	b570      	push	{r4, r5, r6, lr}
   254ee:	b082      	sub	sp, #8
   254f0:	4604      	mov	r4, r0
   254f2:	f7ff fef1 	bl	252d8 <am_hal_interrupt_master_disable>
   254f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   254fa:	4e10      	ldr	r6, [pc, #64]	; (2553c <am_hal_pwrctrl_periph_disable+0x50>)
   254fc:	4d10      	ldr	r5, [pc, #64]	; (25540 <am_hal_pwrctrl_periph_disable+0x54>)
   254fe:	9001      	str	r0, [sp, #4]
   25500:	00a4      	lsls	r4, r4, #2
   25502:	68b3      	ldr	r3, [r6, #8]
   25504:	592a      	ldr	r2, [r5, r4]
   25506:	ea23 0302 	bic.w	r3, r3, r2
   2550a:	60b3      	str	r3, [r6, #8]
   2550c:	9801      	ldr	r0, [sp, #4]
   2550e:	442c      	add	r4, r5
   25510:	f7ff fee6 	bl	252e0 <am_hal_interrupt_master_set>
   25514:	20a0      	movs	r0, #160	; 0xa0
   25516:	f7ff fcd1 	bl	24ebc <am_hal_flash_delay>
   2551a:	69b3      	ldr	r3, [r6, #24]
   2551c:	6864      	ldr	r4, [r4, #4]
   2551e:	4223      	tst	r3, r4
   25520:	d003      	beq.n	2552a <am_hal_pwrctrl_periph_disable+0x3e>
   25522:	20a0      	movs	r0, #160	; 0xa0
   25524:	f7ff fcca 	bl	24ebc <am_hal_flash_delay>
   25528:	69b3      	ldr	r3, [r6, #24]
   2552a:	4b04      	ldr	r3, [pc, #16]	; (2553c <am_hal_pwrctrl_periph_disable+0x50>)
   2552c:	699b      	ldr	r3, [r3, #24]
   2552e:	4223      	tst	r3, r4
   25530:	bf14      	ite	ne
   25532:	2001      	movne	r0, #1
   25534:	2000      	moveq	r0, #0
   25536:	b002      	add	sp, #8
   25538:	bd70      	pop	{r4, r5, r6, pc}
   2553a:	bf00      	nop
   2553c:	40021000 	.word	0x40021000
   25540:	0002a0dc 	.word	0x0002a0dc

00025544 <am_hal_pwrctrl_low_power_init>:
   25544:	b530      	push	{r4, r5, lr}
   25546:	4b69      	ldr	r3, [pc, #420]	; (256ec <am_hal_pwrctrl_low_power_init+0x1a8>)
   25548:	681a      	ldr	r2, [r3, #0]
   2554a:	b085      	sub	sp, #20
   2554c:	b912      	cbnz	r2, 25554 <am_hal_pwrctrl_low_power_init+0x10>
   2554e:	4a68      	ldr	r2, [pc, #416]	; (256f0 <am_hal_pwrctrl_low_power_init+0x1ac>)
   25550:	6812      	ldr	r2, [r2, #0]
   25552:	601a      	str	r2, [r3, #0]
   25554:	4b67      	ldr	r3, [pc, #412]	; (256f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   25556:	68db      	ldr	r3, [r3, #12]
   25558:	b2db      	uxtb	r3, r3
   2555a:	2b12      	cmp	r3, #18
   2555c:	d104      	bne.n	25568 <am_hal_pwrctrl_low_power_init+0x24>
   2555e:	4c66      	ldr	r4, [pc, #408]	; (256f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
   25560:	6863      	ldr	r3, [r4, #4]
   25562:	07d8      	lsls	r0, r3, #31
   25564:	f100 8088 	bmi.w	25678 <am_hal_pwrctrl_low_power_init+0x134>
   25568:	4b62      	ldr	r3, [pc, #392]	; (256f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   2556a:	68da      	ldr	r2, [r3, #12]
   2556c:	b2d2      	uxtb	r2, r2
   2556e:	2a20      	cmp	r2, #32
   25570:	d934      	bls.n	255dc <am_hal_pwrctrl_low_power_init+0x98>
   25572:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   25576:	2002      	movs	r0, #2
   25578:	f360 4213 	bfi	r2, r0, #16, #4
   2557c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
   25580:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   25584:	2203      	movs	r2, #3
   25586:	f362 5117 	bfi	r1, r2, #20, #4
   2558a:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   2558e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   25592:	2405      	movs	r4, #5
   25594:	f364 0103 	bfi	r1, r4, #0, #4
   25598:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2559c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   255a0:	f360 1107 	bfi	r1, r0, #4, #4
   255a4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   255a8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   255ac:	2406      	movs	r4, #6
   255ae:	f364 210b 	bfi	r1, r4, #8, #4
   255b2:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   255b6:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   255ba:	2001      	movs	r0, #1
   255bc:	f360 310f 	bfi	r1, r0, #12, #4
   255c0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   255c4:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   255c8:	f362 61de 	bfi	r1, r2, #27, #4
   255cc:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   255d0:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   255d4:	f362 0103 	bfi	r1, r2, #0, #4
   255d8:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   255dc:	4a45      	ldr	r2, [pc, #276]	; (256f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   255de:	68d3      	ldr	r3, [r2, #12]
   255e0:	b2db      	uxtb	r3, r3
   255e2:	2b11      	cmp	r3, #17
   255e4:	d905      	bls.n	255f2 <am_hal_pwrctrl_low_power_init+0xae>
   255e6:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
   255ea:	f36f 6318 	bfc	r3, #24, #1
   255ee:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
   255f2:	2100      	movs	r1, #0
   255f4:	200c      	movs	r0, #12
   255f6:	f7ff f9e5 	bl	249c4 <am_hal_cachectrl_control>
   255fa:	4b3f      	ldr	r3, [pc, #252]	; (256f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
   255fc:	699b      	ldr	r3, [r3, #24]
   255fe:	f3c3 2500 	ubfx	r5, r3, #8, #1
   25602:	05db      	lsls	r3, r3, #23
   25604:	d420      	bmi.n	25648 <am_hal_pwrctrl_low_power_init+0x104>
   25606:	4c3b      	ldr	r4, [pc, #236]	; (256f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   25608:	68e3      	ldr	r3, [r4, #12]
   2560a:	b2db      	uxtb	r3, r3
   2560c:	2b11      	cmp	r3, #17
   2560e:	d84e      	bhi.n	256ae <am_hal_pwrctrl_low_power_init+0x16a>
   25610:	4c38      	ldr	r4, [pc, #224]	; (256f4 <am_hal_pwrctrl_low_power_init+0x1b0>)
   25612:	493a      	ldr	r1, [pc, #232]	; (256fc <am_hal_pwrctrl_low_power_init+0x1b8>)
   25614:	7e22      	ldrb	r2, [r4, #24]
   25616:	2001      	movs	r0, #1
   25618:	4302      	orrs	r2, r0
   2561a:	2307      	movs	r3, #7
   2561c:	7622      	strb	r2, [r4, #24]
   2561e:	9000      	str	r0, [sp, #0]
   25620:	461a      	mov	r2, r3
   25622:	f242 7010 	movw	r0, #10000	; 0x2710
   25626:	f7ff fc59 	bl	24edc <am_hal_flash_delay_status_check>
   2562a:	2800      	cmp	r0, #0
   2562c:	d15a      	bne.n	256e4 <am_hal_pwrctrl_low_power_init+0x1a0>
   2562e:	4b32      	ldr	r3, [pc, #200]	; (256f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
   25630:	681a      	ldr	r2, [r3, #0]
   25632:	f042 0201 	orr.w	r2, r2, #1
   25636:	601a      	str	r2, [r3, #0]
   25638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2563a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2563e:	625a      	str	r2, [r3, #36]	; 0x24
   25640:	68e3      	ldr	r3, [r4, #12]
   25642:	b2db      	uxtb	r3, r3
   25644:	2b11      	cmp	r3, #17
   25646:	d002      	beq.n	2564e <am_hal_pwrctrl_low_power_init+0x10a>
   25648:	2000      	movs	r0, #0
   2564a:	b005      	add	sp, #20
   2564c:	bd30      	pop	{r4, r5, pc}
   2564e:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
   25652:	f360 5356 	bfi	r3, r0, #21, #2
   25656:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   2565a:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   2565e:	220f      	movs	r2, #15
   25660:	f362 138b 	bfi	r3, r2, #6, #6
   25664:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   25668:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   2566c:	f362 0305 	bfi	r3, r2, #0, #6
   25670:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   25674:	b005      	add	sp, #20
   25676:	bd30      	pop	{r4, r5, pc}
   25678:	f7ff fe2e 	bl	252d8 <am_hal_interrupt_master_disable>
   2567c:	9002      	str	r0, [sp, #8]
   2567e:	68a3      	ldr	r3, [r4, #8]
   25680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   25684:	60a3      	str	r3, [r4, #8]
   25686:	9802      	ldr	r0, [sp, #8]
   25688:	f7ff fe2a 	bl	252e0 <am_hal_interrupt_master_set>
   2568c:	20a0      	movs	r0, #160	; 0xa0
   2568e:	f7ff fc15 	bl	24ebc <am_hal_flash_delay>
   25692:	69a3      	ldr	r3, [r4, #24]
   25694:	0619      	lsls	r1, r3, #24
   25696:	d403      	bmi.n	256a0 <am_hal_pwrctrl_low_power_init+0x15c>
   25698:	20a0      	movs	r0, #160	; 0xa0
   2569a:	f7ff fc0f 	bl	24ebc <am_hal_flash_delay>
   2569e:	69a3      	ldr	r3, [r4, #24]
   256a0:	4b15      	ldr	r3, [pc, #84]	; (256f8 <am_hal_pwrctrl_low_power_init+0x1b4>)
   256a2:	699b      	ldr	r3, [r3, #24]
   256a4:	061a      	lsls	r2, r3, #24
   256a6:	f53f af5f 	bmi.w	25568 <am_hal_pwrctrl_low_power_init+0x24>
   256aa:	2001      	movs	r0, #1
   256ac:	e7cd      	b.n	2564a <am_hal_pwrctrl_low_power_init+0x106>
   256ae:	f7ff fe13 	bl	252d8 <am_hal_interrupt_master_disable>
   256b2:	9003      	str	r0, [sp, #12]
   256b4:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   256b8:	2219      	movs	r2, #25
   256ba:	f362 138b 	bfi	r3, r2, #6, #6
   256be:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   256c2:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
   256c6:	210c      	movs	r1, #12
   256c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   256cc:	f361 0205 	bfi	r2, r1, #0, #6
   256d0:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
   256d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   256d6:	f365 5296 	bfi	r2, r5, #22, #1
   256da:	63da      	str	r2, [r3, #60]	; 0x3c
   256dc:	9803      	ldr	r0, [sp, #12]
   256de:	f7ff fdff 	bl	252e0 <am_hal_interrupt_master_set>
   256e2:	e795      	b.n	25610 <am_hal_pwrctrl_low_power_init+0xcc>
   256e4:	2004      	movs	r0, #4
   256e6:	b005      	add	sp, #20
   256e8:	bd30      	pop	{r4, r5, pc}
   256ea:	bf00      	nop
   256ec:	1000a39c 	.word	0x1000a39c
   256f0:	4ffff000 	.word	0x4ffff000
   256f4:	40020000 	.word	0x40020000
   256f8:	40021000 	.word	0x40021000
   256fc:	40020018 	.word	0x40020018

00025700 <am_hal_queue_init>:
   25700:	b410      	push	{r4}
   25702:	2400      	movs	r4, #0
   25704:	e9c0 4400 	strd	r4, r4, [r0]
   25708:	e9c0 4302 	strd	r4, r3, [r0, #8]
   2570c:	e9c0 2104 	strd	r2, r1, [r0, #16]
   25710:	f85d 4b04 	ldr.w	r4, [sp], #4
   25714:	4770      	bx	lr
   25716:	bf00      	nop

00025718 <am_hal_queue_item_add>:
   25718:	b570      	push	{r4, r5, r6, lr}
   2571a:	6905      	ldr	r5, [r0, #16]
   2571c:	b082      	sub	sp, #8
   2571e:	4604      	mov	r4, r0
   25720:	fb02 f505 	mul.w	r5, r2, r5
   25724:	460e      	mov	r6, r1
   25726:	f7ff fdd7 	bl	252d8 <am_hal_interrupt_master_disable>
   2572a:	68e2      	ldr	r2, [r4, #12]
   2572c:	9001      	str	r0, [sp, #4]
   2572e:	68a0      	ldr	r0, [r4, #8]
   25730:	1a13      	subs	r3, r2, r0
   25732:	42ab      	cmp	r3, r5
   25734:	d31c      	bcc.n	25770 <am_hal_queue_item_add+0x58>
   25736:	b195      	cbz	r5, 2575e <am_hal_queue_item_add+0x46>
   25738:	6823      	ldr	r3, [r4, #0]
   2573a:	b306      	cbz	r6, 2577e <am_hal_queue_item_add+0x66>
   2573c:	1e71      	subs	r1, r6, #1
   2573e:	194e      	adds	r6, r1, r5
   25740:	6962      	ldr	r2, [r4, #20]
   25742:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   25746:	54d0      	strb	r0, [r2, r3]
   25748:	6823      	ldr	r3, [r4, #0]
   2574a:	68e0      	ldr	r0, [r4, #12]
   2574c:	3301      	adds	r3, #1
   2574e:	428e      	cmp	r6, r1
   25750:	fbb3 f2f0 	udiv	r2, r3, r0
   25754:	fb00 3312 	mls	r3, r0, r2, r3
   25758:	6023      	str	r3, [r4, #0]
   2575a:	d1f1      	bne.n	25740 <am_hal_queue_item_add+0x28>
   2575c:	68a0      	ldr	r0, [r4, #8]
   2575e:	4405      	add	r5, r0
   25760:	60a5      	str	r5, [r4, #8]
   25762:	9801      	ldr	r0, [sp, #4]
   25764:	f7ff fdbc 	bl	252e0 <am_hal_interrupt_master_set>
   25768:	2401      	movs	r4, #1
   2576a:	4620      	mov	r0, r4
   2576c:	b002      	add	sp, #8
   2576e:	bd70      	pop	{r4, r5, r6, pc}
   25770:	9801      	ldr	r0, [sp, #4]
   25772:	f7ff fdb5 	bl	252e0 <am_hal_interrupt_master_set>
   25776:	2400      	movs	r4, #0
   25778:	4620      	mov	r0, r4
   2577a:	b002      	add	sp, #8
   2577c:	bd70      	pop	{r4, r5, r6, pc}
   2577e:	4631      	mov	r1, r6
   25780:	3101      	adds	r1, #1
   25782:	3301      	adds	r3, #1
   25784:	428d      	cmp	r5, r1
   25786:	fbb3 f6f2 	udiv	r6, r3, r2
   2578a:	fb02 3316 	mls	r3, r2, r6, r3
   2578e:	d1f7      	bne.n	25780 <am_hal_queue_item_add+0x68>
   25790:	6023      	str	r3, [r4, #0]
   25792:	e7e4      	b.n	2575e <am_hal_queue_item_add+0x46>

00025794 <am_hal_queue_item_get>:
   25794:	b570      	push	{r4, r5, r6, lr}
   25796:	6905      	ldr	r5, [r0, #16]
   25798:	4604      	mov	r4, r0
   2579a:	b082      	sub	sp, #8
   2579c:	fb02 f505 	mul.w	r5, r2, r5
   257a0:	460e      	mov	r6, r1
   257a2:	f7ff fd99 	bl	252d8 <am_hal_interrupt_master_disable>
   257a6:	68a2      	ldr	r2, [r4, #8]
   257a8:	9001      	str	r0, [sp, #4]
   257aa:	42aa      	cmp	r2, r5
   257ac:	d31c      	bcc.n	257e8 <am_hal_queue_item_get+0x54>
   257ae:	b195      	cbz	r5, 257d6 <am_hal_queue_item_get+0x42>
   257b0:	6863      	ldr	r3, [r4, #4]
   257b2:	b306      	cbz	r6, 257f6 <am_hal_queue_item_get+0x62>
   257b4:	1e71      	subs	r1, r6, #1
   257b6:	194e      	adds	r6, r1, r5
   257b8:	6962      	ldr	r2, [r4, #20]
   257ba:	5cd3      	ldrb	r3, [r2, r3]
   257bc:	f801 3f01 	strb.w	r3, [r1, #1]!
   257c0:	6863      	ldr	r3, [r4, #4]
   257c2:	68e0      	ldr	r0, [r4, #12]
   257c4:	3301      	adds	r3, #1
   257c6:	428e      	cmp	r6, r1
   257c8:	fbb3 f2f0 	udiv	r2, r3, r0
   257cc:	fb00 3312 	mls	r3, r0, r2, r3
   257d0:	6063      	str	r3, [r4, #4]
   257d2:	d1f1      	bne.n	257b8 <am_hal_queue_item_get+0x24>
   257d4:	68a2      	ldr	r2, [r4, #8]
   257d6:	9801      	ldr	r0, [sp, #4]
   257d8:	1b52      	subs	r2, r2, r5
   257da:	60a2      	str	r2, [r4, #8]
   257dc:	f7ff fd80 	bl	252e0 <am_hal_interrupt_master_set>
   257e0:	2401      	movs	r4, #1
   257e2:	4620      	mov	r0, r4
   257e4:	b002      	add	sp, #8
   257e6:	bd70      	pop	{r4, r5, r6, pc}
   257e8:	9801      	ldr	r0, [sp, #4]
   257ea:	f7ff fd79 	bl	252e0 <am_hal_interrupt_master_set>
   257ee:	2400      	movs	r4, #0
   257f0:	4620      	mov	r0, r4
   257f2:	b002      	add	sp, #8
   257f4:	bd70      	pop	{r4, r5, r6, pc}
   257f6:	68e0      	ldr	r0, [r4, #12]
   257f8:	4631      	mov	r1, r6
   257fa:	3101      	adds	r1, #1
   257fc:	3301      	adds	r3, #1
   257fe:	42a9      	cmp	r1, r5
   25800:	fbb3 f6f0 	udiv	r6, r3, r0
   25804:	fb00 3316 	mls	r3, r0, r6, r3
   25808:	d1f7      	bne.n	257fa <am_hal_queue_item_get+0x66>
   2580a:	6063      	str	r3, [r4, #4]
   2580c:	e7e3      	b.n	257d6 <am_hal_queue_item_get+0x42>
   2580e:	bf00      	nop

00025810 <am_hal_rtc_osc_disable>:
   25810:	4a03      	ldr	r2, [pc, #12]	; (25820 <am_hal_rtc_osc_disable+0x10>)
   25812:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   25816:	f043 0310 	orr.w	r3, r3, #16
   2581a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   2581e:	4770      	bx	lr
   25820:	40004200 	.word	0x40004200

00025824 <am_hal_stimer_config>:
   25824:	4a03      	ldr	r2, [pc, #12]	; (25834 <am_hal_stimer_config+0x10>)
   25826:	4603      	mov	r3, r0
   25828:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   2582c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
   25830:	4770      	bx	lr
   25832:	bf00      	nop
   25834:	40008000 	.word	0x40008000

00025838 <am_hal_stimer_counter_get>:
   25838:	b500      	push	{lr}
   2583a:	b085      	sub	sp, #20
   2583c:	4805      	ldr	r0, [pc, #20]	; (25854 <am_hal_stimer_counter_get+0x1c>)
   2583e:	a901      	add	r1, sp, #4
   25840:	f7ff fb8c 	bl	24f5c <am_hal_triple_read>
   25844:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   25848:	4283      	cmp	r3, r0
   2584a:	bf18      	it	ne
   2584c:	9803      	ldrne	r0, [sp, #12]
   2584e:	b005      	add	sp, #20
   25850:	f85d fb04 	ldr.w	pc, [sp], #4
   25854:	40008144 	.word	0x40008144

00025858 <am_hal_stimer_compare_delta_set>:
   25858:	2807      	cmp	r0, #7
   2585a:	d900      	bls.n	2585e <am_hal_stimer_compare_delta_set+0x6>
   2585c:	4770      	bx	lr
   2585e:	b530      	push	{r4, r5, lr}
   25860:	b083      	sub	sp, #12
   25862:	460c      	mov	r4, r1
   25864:	4605      	mov	r5, r0
   25866:	f7ff fd37 	bl	252d8 <am_hal_interrupt_master_disable>
   2586a:	4a27      	ldr	r2, [pc, #156]	; (25908 <am_hal_stimer_compare_delta_set+0xb0>)
   2586c:	9001      	str	r0, [sp, #4]
   2586e:	4b27      	ldr	r3, [pc, #156]	; (2590c <am_hal_stimer_compare_delta_set+0xb4>)
   25870:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
   25874:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   25878:	f44f 7c80 	mov.w	ip, #256	; 0x100
   2587c:	442b      	add	r3, r5
   2587e:	fa0c f505 	lsl.w	r5, ip, r5
   25882:	009b      	lsls	r3, r3, #2
   25884:	ea20 0005 	bic.w	r0, r0, r5
   25888:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
   2588c:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   25890:	601c      	str	r4, [r3, #0]
   25892:	6818      	ldr	r0, [r3, #0]
   25894:	4422      	add	r2, r4
   25896:	eba0 0c02 	sub.w	ip, r0, r2
   2589a:	f1bc 0f00 	cmp.w	ip, #0
   2589e:	db03      	blt.n	258a8 <am_hal_stimer_compare_delta_set+0x50>
   258a0:	320a      	adds	r2, #10
   258a2:	1a82      	subs	r2, r0, r2
   258a4:	2a00      	cmp	r2, #0
   258a6:	dd22      	ble.n	258ee <am_hal_stimer_compare_delta_set+0x96>
   258a8:	4a17      	ldr	r2, [pc, #92]	; (25908 <am_hal_stimer_compare_delta_set+0xb0>)
   258aa:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   258ae:	601c      	str	r4, [r3, #0]
   258b0:	6818      	ldr	r0, [r3, #0]
   258b2:	4422      	add	r2, r4
   258b4:	eba0 0c02 	sub.w	ip, r0, r2
   258b8:	f1bc 0f00 	cmp.w	ip, #0
   258bc:	db03      	blt.n	258c6 <am_hal_stimer_compare_delta_set+0x6e>
   258be:	320a      	adds	r2, #10
   258c0:	1a82      	subs	r2, r0, r2
   258c2:	2a00      	cmp	r2, #0
   258c4:	dd13      	ble.n	258ee <am_hal_stimer_compare_delta_set+0x96>
   258c6:	4a10      	ldr	r2, [pc, #64]	; (25908 <am_hal_stimer_compare_delta_set+0xb0>)
   258c8:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   258cc:	601c      	str	r4, [r3, #0]
   258ce:	6818      	ldr	r0, [r3, #0]
   258d0:	4422      	add	r2, r4
   258d2:	eba0 0c02 	sub.w	ip, r0, r2
   258d6:	f1bc 0f00 	cmp.w	ip, #0
   258da:	db03      	blt.n	258e4 <am_hal_stimer_compare_delta_set+0x8c>
   258dc:	320a      	adds	r2, #10
   258de:	1a82      	subs	r2, r0, r2
   258e0:	2a00      	cmp	r2, #0
   258e2:	dd04      	ble.n	258ee <am_hal_stimer_compare_delta_set+0x96>
   258e4:	4a08      	ldr	r2, [pc, #32]	; (25908 <am_hal_stimer_compare_delta_set+0xb0>)
   258e6:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   258ea:	601c      	str	r4, [r3, #0]
   258ec:	681b      	ldr	r3, [r3, #0]
   258ee:	4b06      	ldr	r3, [pc, #24]	; (25908 <am_hal_stimer_compare_delta_set+0xb0>)
   258f0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   258f4:	400d      	ands	r5, r1
   258f6:	4315      	orrs	r5, r2
   258f8:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
   258fc:	9801      	ldr	r0, [sp, #4]
   258fe:	b003      	add	sp, #12
   25900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   25904:	f7ff bcec 	b.w	252e0 <am_hal_interrupt_master_set>
   25908:	40008000 	.word	0x40008000
   2590c:	10002054 	.word	0x10002054

00025910 <am_hal_stimer_int_enable>:
   25910:	4a03      	ldr	r2, [pc, #12]	; (25920 <am_hal_stimer_int_enable+0x10>)
   25912:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   25916:	4318      	orrs	r0, r3
   25918:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   2591c:	4770      	bx	lr
   2591e:	bf00      	nop
   25920:	40008000 	.word	0x40008000

00025924 <am_hal_stimer_int_clear>:
   25924:	4b01      	ldr	r3, [pc, #4]	; (2592c <am_hal_stimer_int_clear+0x8>)
   25926:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2592a:	4770      	bx	lr
   2592c:	40008000 	.word	0x40008000

00025930 <am_hal_stimer_int_status_get>:
   25930:	4a04      	ldr	r2, [pc, #16]	; (25944 <am_hal_stimer_int_status_get+0x14>)
   25932:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   25936:	b110      	cbz	r0, 2593e <am_hal_stimer_int_status_get+0xe>
   25938:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   2593c:	4013      	ands	r3, r2
   2593e:	4618      	mov	r0, r3
   25940:	4770      	bx	lr
   25942:	bf00      	nop
   25944:	40008000 	.word	0x40008000

00025948 <am_hal_sysctrl_sleep>:
   25948:	b510      	push	{r4, lr}
   2594a:	b082      	sub	sp, #8
   2594c:	4604      	mov	r4, r0
   2594e:	f7ff fcc3 	bl	252d8 <am_hal_interrupt_master_disable>
   25952:	9001      	str	r0, [sp, #4]
   25954:	b124      	cbz	r4, 25960 <am_hal_sysctrl_sleep+0x18>
   25956:	4b12      	ldr	r3, [pc, #72]	; (259a0 <am_hal_sysctrl_sleep+0x58>)
   25958:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   2595c:	07db      	lsls	r3, r3, #31
   2595e:	d513      	bpl.n	25988 <am_hal_sysctrl_sleep+0x40>
   25960:	4a10      	ldr	r2, [pc, #64]	; (259a4 <am_hal_sysctrl_sleep+0x5c>)
   25962:	6913      	ldr	r3, [r2, #16]
   25964:	f023 0304 	bic.w	r3, r3, #4
   25968:	6113      	str	r3, [r2, #16]
   2596a:	f3bf 8f4f 	dsb	sy
   2596e:	4a0e      	ldr	r2, [pc, #56]	; (259a8 <am_hal_sysctrl_sleep+0x60>)
   25970:	4b0e      	ldr	r3, [pc, #56]	; (259ac <am_hal_sysctrl_sleep+0x64>)
   25972:	6812      	ldr	r2, [r2, #0]
   25974:	601a      	str	r2, [r3, #0]
   25976:	bf30      	wfi
   25978:	f3bf 8f6f 	isb	sy
   2597c:	9801      	ldr	r0, [sp, #4]
   2597e:	b002      	add	sp, #8
   25980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25984:	f7ff bcac 	b.w	252e0 <am_hal_interrupt_master_set>
   25988:	4b09      	ldr	r3, [pc, #36]	; (259b0 <am_hal_sysctrl_sleep+0x68>)
   2598a:	681a      	ldr	r2, [r3, #0]
   2598c:	b912      	cbnz	r2, 25994 <am_hal_sysctrl_sleep+0x4c>
   2598e:	4a09      	ldr	r2, [pc, #36]	; (259b4 <am_hal_sysctrl_sleep+0x6c>)
   25990:	6812      	ldr	r2, [r2, #0]
   25992:	601a      	str	r2, [r3, #0]
   25994:	4a03      	ldr	r2, [pc, #12]	; (259a4 <am_hal_sysctrl_sleep+0x5c>)
   25996:	6913      	ldr	r3, [r2, #16]
   25998:	f043 0304 	orr.w	r3, r3, #4
   2599c:	6113      	str	r3, [r2, #16]
   2599e:	e7e4      	b.n	2596a <am_hal_sysctrl_sleep+0x22>
   259a0:	40020000 	.word	0x40020000
   259a4:	e000ed00 	.word	0xe000ed00
   259a8:	5fff0000 	.word	0x5fff0000
   259ac:	1000a3a0 	.word	0x1000a3a0
   259b0:	1000a39c 	.word	0x1000a39c
   259b4:	4ffff000 	.word	0x4ffff000

000259b8 <am_hal_sysctrl_fpu_enable>:
   259b8:	4b02      	ldr	r3, [pc, #8]	; (259c4 <am_hal_sysctrl_fpu_enable+0xc>)
   259ba:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   259be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   259c2:	4770      	bx	lr
   259c4:	e000ed00 	.word	0xe000ed00

000259c8 <am_hal_sysctrl_fpu_stacking_enable>:
   259c8:	b510      	push	{r4, lr}
   259ca:	b082      	sub	sp, #8
   259cc:	4604      	mov	r4, r0
   259ce:	f7ff fc83 	bl	252d8 <am_hal_interrupt_master_disable>
   259d2:	4909      	ldr	r1, [pc, #36]	; (259f8 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   259d4:	9001      	str	r0, [sp, #4]
   259d6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   259d8:	2c00      	cmp	r4, #0
   259da:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
   259de:	bf14      	ite	ne
   259e0:	f04f 4340 	movne.w	r3, #3221225472	; 0xc0000000
   259e4:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
   259e8:	4313      	orrs	r3, r2
   259ea:	634b      	str	r3, [r1, #52]	; 0x34
   259ec:	9801      	ldr	r0, [sp, #4]
   259ee:	b002      	add	sp, #8
   259f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   259f4:	f7ff bc74 	b.w	252e0 <am_hal_interrupt_master_set>
   259f8:	e000ef00 	.word	0xe000ef00

000259fc <am_hal_tpiu_enable>:
   259fc:	b510      	push	{r4, lr}
   259fe:	4b23      	ldr	r3, [pc, #140]	; (25a8c <am_hal_tpiu_enable+0x90>)
   25a00:	6804      	ldr	r4, [r0, #0]
   25a02:	2200      	movs	r2, #0
   25a04:	b084      	sub	sp, #16
   25a06:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   25a0a:	b334      	cbz	r4, 25a5a <am_hal_tpiu_enable+0x5e>
   25a0c:	4a20      	ldr	r2, [pc, #128]	; (25a90 <am_hal_tpiu_enable+0x94>)
   25a0e:	4921      	ldr	r1, [pc, #132]	; (25a94 <am_hal_tpiu_enable+0x98>)
   25a10:	2001      	movs	r0, #1
   25a12:	6058      	str	r0, [r3, #4]
   25a14:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
   25a18:	a801      	add	r0, sp, #4
   25a1a:	428b      	cmp	r3, r1
   25a1c:	bf88      	it	hi
   25a1e:	4614      	movhi	r4, r2
   25a20:	f7ff f9e6 	bl	24df0 <am_hal_clkgen_status_get>
   25a24:	9b01      	ldr	r3, [sp, #4]
   25a26:	1c5a      	adds	r2, r3, #1
   25a28:	d02d      	beq.n	25a86 <am_hal_tpiu_enable+0x8a>
   25a2a:	08db      	lsrs	r3, r3, #3
   25a2c:	fbb3 f4f4 	udiv	r4, r3, r4
   25a30:	3c01      	subs	r4, #1
   25a32:	b2a4      	uxth	r4, r4
   25a34:	4b15      	ldr	r3, [pc, #84]	; (25a8c <am_hal_tpiu_enable+0x90>)
   25a36:	4a18      	ldr	r2, [pc, #96]	; (25a98 <am_hal_tpiu_enable+0x9c>)
   25a38:	611c      	str	r4, [r3, #16]
   25a3a:	2102      	movs	r1, #2
   25a3c:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
   25a40:	2000      	movs	r0, #0
   25a42:	f240 2101 	movw	r1, #513	; 0x201
   25a46:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
   25a4a:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
   25a4e:	f44f 7048 	mov.w	r0, #800	; 0x320
   25a52:	f7ff fa33 	bl	24ebc <am_hal_flash_delay>
   25a56:	b004      	add	sp, #16
   25a58:	bd10      	pop	{r4, pc}
   25a5a:	6902      	ldr	r2, [r0, #16]
   25a5c:	611a      	str	r2, [r3, #16]
   25a5e:	6882      	ldr	r2, [r0, #8]
   25a60:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   25a64:	68c1      	ldr	r1, [r0, #12]
   25a66:	2201      	movs	r2, #1
   25a68:	3901      	subs	r1, #1
   25a6a:	408a      	lsls	r2, r1
   25a6c:	605a      	str	r2, [r3, #4]
   25a6e:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
   25a72:	4a09      	ldr	r2, [pc, #36]	; (25a98 <am_hal_tpiu_enable+0x9c>)
   25a74:	6843      	ldr	r3, [r0, #4]
   25a76:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   25a7a:	f44f 7048 	mov.w	r0, #800	; 0x320
   25a7e:	f7ff fa1d 	bl	24ebc <am_hal_flash_delay>
   25a82:	b004      	add	sp, #16
   25a84:	bd10      	pop	{r4, pc}
   25a86:	2405      	movs	r4, #5
   25a88:	e7d4      	b.n	25a34 <am_hal_tpiu_enable+0x38>
   25a8a:	bf00      	nop
   25a8c:	e0040000 	.word	0xe0040000
   25a90:	000f4240 	.word	0x000f4240
   25a94:	001da380 	.word	0x001da380
   25a98:	40020000 	.word	0x40020000
   25a9c:	00000004 	.word	0x00000004
   25aa0:	00000020 	.word	0x00000020
   25aa4:	00000020 	.word	0x00000020
   25aa8:	00000002 	.word	0x00000002
   25aac:	00000000 	.word	0x00000000
   25ab0:	00000032 	.word	0x00000032
   25ab4:	00010101 	.word	0x00010101
   25ab8:	00000000 	.word	0x00000000
   25abc:	64416d64 	.word	0x64416d64
   25ac0:	74634176 	.word	0x74634176
   25ac4:	666e6f43 	.word	0x666e6f43
   25ac8:	203a6769 	.word	0x203a6769
   25acc:	74617473 	.word	0x74617473
   25ad0:	25203a65 	.word	0x25203a65
   25ad4:	00000064 	.word	0x00000064
   25ad8:	64416d44 	.word	0x64416d44
   25adc:	6e6f4376 	.word	0x6e6f4376
   25ae0:	20676966 	.word	0x20676966
   25ae4:	69727564 	.word	0x69727564
   25ae8:	6420676e 	.word	0x6420676e
   25aec:	63657269 	.word	0x63657269
   25af0:	20646574 	.word	0x20646574
   25af4:	65766461 	.word	0x65766461
   25af8:	73697472 	.word	0x73697472
   25afc:	21676e69 	.word	0x21676e69
   25b00:	00000000 	.word	0x00000000
   25b04:	64416d64 	.word	0x64416d64
   25b08:	74634176 	.word	0x74634176
   25b0c:	44746553 	.word	0x44746553
   25b10:	3a617461 	.word	0x3a617461
   25b14:	61747320 	.word	0x61747320
   25b18:	203a6574 	.word	0x203a6574
   25b1c:	00006425 	.word	0x00006425
   25b20:	64416d64 	.word	0x64416d64
   25b24:	74634176 	.word	0x74634176
   25b28:	72617453 	.word	0x72617453
   25b2c:	73203a74 	.word	0x73203a74
   25b30:	65746174 	.word	0x65746174
   25b34:	6425203a 	.word	0x6425203a
   25b38:	00000000 	.word	0x00000000
   25b3c:	64416d64 	.word	0x64416d64
   25b40:	74634176 	.word	0x74634176
   25b44:	72617453 	.word	0x72617453
   25b48:	75642074 	.word	0x75642074
   25b4c:	676e6972 	.word	0x676e6972
   25b50:	72696420 	.word	0x72696420
   25b54:	65746365 	.word	0x65746365
   25b58:	64612064 	.word	0x64612064
   25b5c:	74726576 	.word	0x74726576
   25b60:	6e697369 	.word	0x6e697369
   25b64:	00002167 	.word	0x00002167
   25b68:	64416d64 	.word	0x64416d64
   25b6c:	74634176 	.word	0x74634176
   25b70:	706f7453 	.word	0x706f7453
   25b74:	7473203a 	.word	0x7473203a
   25b78:	3a657461 	.word	0x3a657461
   25b7c:	00642520 	.word	0x00642520
   25b80:	64416d44 	.word	0x64416d44
   25b84:	6f745376 	.word	0x6f745376
   25b88:	75642070 	.word	0x75642070
   25b8c:	676e6972 	.word	0x676e6972
   25b90:	72696420 	.word	0x72696420
   25b94:	65746365 	.word	0x65746365
   25b98:	64612064 	.word	0x64612064
   25b9c:	74726576 	.word	0x74726576
   25ba0:	6e697369 	.word	0x6e697369
   25ba4:	00002167 	.word	0x00002167
   25ba8:	5f494348 	.word	0x5f494348
   25bac:	415f454c 	.word	0x415f454c
   25bb0:	455f5644 	.word	0x455f5644
   25bb4:	4c42414e 	.word	0x4c42414e
   25bb8:	4d435f45 	.word	0x4d435f45
   25bbc:	4d435f44 	.word	0x4d435f44
   25bc0:	435f4c50 	.word	0x435f4c50
   25bc4:	4b434142 	.word	0x4b434142
   25bc8:	5456455f 	.word	0x5456455f
   25bcc:	7473203a 	.word	0x7473203a
   25bd0:	3a657461 	.word	0x3a657461
   25bd4:	00642520 	.word	0x00642520
   25bd8:	64416d64 	.word	0x64416d64
   25bdc:	74634176 	.word	0x74634176
   25be0:	656d6954 	.word	0x656d6954
   25be4:	2174756f 	.word	0x2174756f
   25be8:	00000000 	.word	0x00000000
   25bec:	64416d64 	.word	0x64416d64
   25bf0:	61745376 	.word	0x61745376
   25bf4:	69447472 	.word	0x69447472
   25bf8:	74636572 	.word	0x74636572
   25bfc:	203a6465 	.word	0x203a6465
   25c00:	74617473 	.word	0x74617473
   25c04:	25203a65 	.word	0x25203a65
   25c08:	00000064 	.word	0x00000064
   25c0c:	64416d64 	.word	0x64416d64
   25c10:	6f745376 	.word	0x6f745376
   25c14:	72694470 	.word	0x72694470
   25c18:	65746365 	.word	0x65746365
   25c1c:	73203a64 	.word	0x73203a64
   25c20:	65746174 	.word	0x65746174
   25c24:	6425203a 	.word	0x6425203a
   25c28:	00000000 	.word	0x00000000
   25c2c:	64416d64 	.word	0x64416d64
   25c30:	6e6f4376 	.word	0x6e6f4376
   25c34:	7463656e 	.word	0x7463656e
   25c38:	203a6465 	.word	0x203a6465
   25c3c:	74617473 	.word	0x74617473
   25c40:	25203a65 	.word	0x25203a65
   25c44:	00000064 	.word	0x00000064
   25c48:	64416d64 	.word	0x64416d64
   25c4c:	6e6f4376 	.word	0x6e6f4376
   25c50:	7463656e 	.word	0x7463656e
   25c54:	6c696146 	.word	0x6c696146
   25c58:	203a6465 	.word	0x203a6465
   25c5c:	74617473 	.word	0x74617473
   25c60:	25203a65 	.word	0x25203a65
   25c64:	00000064 	.word	0x00000064

00025c68 <dmAdvAct>:
   25c68:	0000c525 0000c5a1 0000c5d9 0000c621     %...........!...
   25c78:	0000c4c5 0000c761 0000c765 0000c769     ....a...e...i...

00025c88 <dmAdvFcnIf>:
   25c88:	0000c4dd 0000c665 0000c4c9 6f436d64     ....e.......dmCo
   25c98:	63436e6e 61654462 636f6c6c 00642520     nnCcbDealloc %d.
   25ca8:	6f436d64 63436e6e 48794262 6c646e61     dmConnCcbByHandl
   25cb8:	6f6e2065 6f662074 20646e75 30257830     e not found 0x%0
   25cc8:	00007834 6f436d64 64496e6e 64427942     4x..dmConnIdByBd
   25cd8:	72646441 746f6e20 756f6620 0000646e     Addr not found..
   25ce8:	6f436d64 6d436e6e 74536c70 73657461     dmConnCmplStates
   25cf8:	00642520 6f436d64 63436e6e 6c6c4162      %d.dmConnCcbAll
   25d08:	2520636f 00000064 6f436d64 63436e6e     oc %d...dmConnCc
   25d18:	6c6c4162 6620636f 656c6961 00000064     bAlloc failed...
   25d28:	6e6e6f63 253d6449 64692064 614d656c     connId=%d idleMa
   25d38:	303d6b73 34302578 00000078              sk=0x%04x...

00025d44 <dmConn2FcnIf>:
   25d44:	0000d89d 0000cb49 0000caa5              ....I.......

00025d50 <dmConnActSetMain>:
   25d50:	0000c8a9 0000c8c1 0000c939 0000c8c9     ........9.......
   25d60:	0000ca09 0000c8ad                       ........

00025d68 <dmConnFcnIf>:
   25d68:	0000cea9 0000ccf5 0000ca71              ........q...

00025d74 <dmConnSpecDefaults>:
   25d74:	00280018 07d00000 00000000              ..(.........

00025d80 <dmConnActSetMaster>:
   25d80:	0000d529 0000d4a9 0000d4c1 0000d4c9     )...............

00025d90 <dmConnActSetSlave>:
   25d90:	0000d69d 0000d6ad 0000d5a9 0000d6c9     ................
   25da0:	0000d6e5 0000d611 6f436d64 6d536e6e     ........dmConnSm
   25db0:	63657845 20657475 6e657665 64253d74     Execute event=%d
   25dc0:	61747320 253d6574 00000064               state=%d...

00025dcc <dmConnStateTbl>:
   25dcc:	00001001 00002002 00000000 00000000     ..... ..........
   25ddc:	00002303 00000000 00010000 00011104     .#..............
   25dec:	00010001 00010001 02030300 00010300     ................
   25dfc:	00010001 21000002 00020002 00020002     .......!........
   25e0c:	24000002 24002303 00020002 00030002     ...$.#.$........
   25e1c:	00030104 22031203 25031303 00030003     ......."...%....
   25e2c:	05030400 05030003 00040004 00040004     ................
   25e3c:	00040004 04000004 04000104 00040004     ................
   25e4c:	00000004 65446d64 73615076 74764573     ....dmDevPassEvt
   25e5c:	65446f54 69725076 65203a76 746e6576     ToDevPriv: event
   25e6c:	6425203a 6170202c 3a6d6172 2c642520     : %d, param: %d,
   25e7c:	76646120 646e6148 203a656c 00006425      advHandle: %d..

00025e8c <dmDevFcnIf>:
   25e8c:	0000d89d 0000d775 0000d7b1              ....u.......

00025e98 <dmEvtCbackLen>:
   25e98:	00040004 000c0004 00040004 0024001c     ..............$.
   25ea8:	000e000a 00040006 00040006 00220006     ..............".
   25eb8:	00080010 00240006 00140064 00040006     ......$.d.......
   25ec8:	000a000a 00060006 000c0006 0006000c     ................
   25ed8:	000e000e 00060008 0006000a 0008000a     ................
   25ee8:	000c000a 00040004 00060024 00160006     ........$.......
   25ef8:	00060016 001a001a 00080008 00100010     ................
   25f08:	001c000e 0008001c 00080008 00080008     ................
   25f18:	00080008 000a0008 00040008 00060006     ................

00025f28 <dmFcnDefault>:
   25f28:	0000d89d 0000d8a1 0000d8a1              ............

00025f34 <dmHciToIdTbl>:
   25f34:	03030307 04020303 04040404 05050505     ................
   25f44:	07070705 06060607 05060606 07040405     ................
   25f54:	04070407 04050504 09090904 00000202     ................
   25f64:	070b0b0b 00020002 0c0b010a 0d0d0d0c     ................
   25f74:	0d0d0d0d 0d100f0f                       ........

00025f7c <dmPrivAct>:
   25f7c:	0000db99 0000da31 0000da79 0000da9d     ....1...y.......
   25f8c:	0000dab1 0000dab5 0000dac5 0000dc05     ................
   25f9c:	0000d9fd                                ....

00025fa0 <dmPrivFcnIf>:
   25fa0:	0000d9e9 0000dad1 0000d9d5 78456d64     ............dmEx
   25fb0:	61635374 6963486e 646e6148 3a72656c     tScanHciHandler:
   25fc0:	65766520 203a746e 73206425 65746174      event: %d state
   25fd0:	6425203a 00000000                       : %d....

00025fd8 <dmScanAct>:
   25fd8:	0000e0d5 0000e32d 0000e0bd              ....-.......

00025fe4 <dmScanFcnIf>:
   25fe4:	0000e491 0000e351 0000e0c1              ....Q.......

00025ff0 <dmScanAct>:
   25ff0:	0000e609 0000e531 0000e685              ....1.......

00025ffc <dmScanFcnIf>:
   25ffc:	0000e4f1 0000e54d 0000e4dd              ....M.......

00026008 <dmSecFcnIf>:
   26008:	0000e73d 0000e741 0000e6d9              =...A.......

00026014 <dmSecLescFcnIf>:
   26014:	0000d89d 0000d8a1 0000e8e1 6e6f6850     ............Phon
   26024:	6c612065 20747265 74617473 203a7375     e alert status: 
   26034:	30257830 00007832 676e6952 73207265     0x%02x..Ringer s
   26044:	69747465 203a676e 30257830 00007832     etting: 0x%02x..

00026054 <paspcPassAs>:
   26054:	00026800 00000002                       .h......

0002605c <paspcPassAsCcc>:
   2605c:	00026810 00000006                       .h......

00026064 <paspcPassRcp>:
   26064:	00026858 00000000                       Xh......

0002606c <paspcPassRs>:
   2606c:	00026860 00000002                       `h......

00026074 <paspcPassRsCcc>:
   26074:	00026810 00000006 3a6e7462 20642520     .h......btn: %d 
   26084:	616d202d 72657473 6e6f6320 6469206e     - master conn id
   26094:	6425203a 73202d20 6576616c 6e6f6320     : %d - slave con
   260a4:	6469206e 6425203a 00000000 63746157     n id: %d....Watc
   260b4:	6e614868 72656c64 74696e49 00000000     hHandlerInit....
   260c4:	63746157 6f672068 76652074 64252074     Watch got evt %d
   260d4:	00000000 6f67654e 74616974 4d206465     ....Negotiated M
   260e4:	25205554 00000064 6e756f46 30203a64     TU %d...Found: 0
   260f4:	32302578 30253a78 253a7832 3a783230     x%02x:%02x:%02x:
   26104:	78323025 3230253a 30253a78 72207832     %02x:%02x:%02x r
   26114:	3a697373 20642520 00007325 61656c43     ssi: %d %s..Clea
   26124:	65722072 766c6f73 20676e69 7473696c     r resolving list
   26134:	61747320 20737574 30257830 00007832      status 0x%02x..

00026144 <watchAdvCfg>:
   26144:	00000000 00a00000 00000320              ........ ...

00026150 <watchAdvDataDisc>:
   26150:	02050102 ff03000a 1407005f 18111805     ........_.......
   26160:	0000180e                                ....

00026164 <watchAncpEnNewVal>:
   26164:	0000ff00                                ....

00026168 <watchAncpEnUnrVal>:
   26168:	0000ff01                                ....

0002616c <watchAncpNotNewVal>:
   2616c:	0000ff04                                ....

00026170 <watchAncpNotUnrVal>:
   26170:	0000ff05                                ....

00026174 <watchAppCfg>:
   26174:	00000101                                ....

00026178 <watchCccIndVal>:
   26178:	00000002                                ....

0002617c <watchCccNtfVal>:
   2617c:	00000001                                ....

00026180 <watchCccSet>:
   26180:	00020013 00000001                       ........

00026188 <watchConnCfg>:
   26188:	00a000a0 02580000 00000000              ......X.....

00026194 <watchCsfVal>:
   26194:	00000001                                ....

00026198 <watchDiscCfg>:
   26198:	00000000                                ....

0002619c <watchDiscConnCfgList>:
   2619c:	00000000 00000700 00000000 00000a00     ................
   261ac:	00000000 00000e00 00026164 00000d02     ........da......
   261bc:	0002616c 00000d02 00026168 00000d02     la......ha......
   261cc:	00026170 00000d02                       pa......

000261d4 <watchDiscMasterCfgList>:
   261d4:	00026194 00000201 00000000 00000000     .a..............
   261e4:	00000000 00000100 00000000 00000200     ................
   261f4:	00000000 00000300 00000000 00000400     ................
   26204:	00000000 00000500 00000000 00000600     ................
   26214:	00000000 00000200 000262bc 00000d01     .........b......
   26224:	0002617c 00000b02                       |a......

0002622c <watchDiscSlaveCfgList>:
   2622c:	00000000 00000300 00000000 00000500     ................
   2623c:	00000000 00000600 00000000 00000700     ................
   2624c:	00000000 00000a00 00000000 00000e00     ................
   2625c:	00000000 00001000 00026178 00000102     ........xa......
   2626c:	00026194 00000201 0002617c 00000402     .a......|a......
   2627c:	0002617c 00000902 0002617c 00000c02     |a......|a......
   2628c:	0002617c 00000f02 0002617c 00001102     |a......|a......
   2629c:	00026164 00000d02 0002616c 00000d02     da......la......
   262ac:	00026168 00000d02 00026170 00000d02     ha......pa......

000262bc <watchHrsRstEnExp>:
   262bc:	00000001                                ....

000262c0 <watchMasterCfg>:
   262c0:	00300060 01000fa0                       `.0.....

000262c8 <watchScanDataDisc>:
   262c8:	61570906 00686374                       ..Watch.

000262d0 <watchSecCfg>:
   262d0:	00010001 00000000                       ........

000262d8 <watchSlaveCfg>:
   262d8:	00000001                                ....

000262dc <watchSmpCfg>:
   262dc:	00000bb8 03100703 00000000 0000fa00     ................
   262ec:	0000fa00 00000002                       ........

000262f4 <watchUpdateCfg>:
   262f4:	00000000 03200258 02580003 00000005     ....X. ...X.....
   26304:	65746144 6425203a 2f64252f 00006425     Date: %d/%d/%d..
   26314:	656d6954 3025203a 253a6432 3a643230     Time: %02d:%02d:
   26324:	64323025 00000000 4f796164 65655766     %02d....dayOfWee
   26334:	64253a6b 63657320 3a363532 61206425     k:%d sec256:%d a
   26344:	73756a64 61655274 3a6e6f73 00006425     djustReason:%d..
   26354:	656d6974 656e6f5a 2064253a 4f747364     timeZone:%d dstO
   26364:	65736666 64253a74 00000000 2e666552     ffset:%d....Ref.
   26374:	6d697420 6f732065 65637275 2064253a      time source:%d 
   26384:	75636361 79636172 0064253a 7473614c     accuracy:%d.Last
   26394:	64707520 20657461 73796164 2064253a      update days:%d 
   263a4:	72756f68 64253a73 00000000              hours:%d....

000263b0 <tipcCtsCt>:
   263b0:	00026814 00000002                       .h......

000263b8 <tipcCtsCtCcc>:
   263b8:	00026810 00000006                       .h......

000263c0 <tipcCtsLti>:
   263c0:	00026840 00000000                       @h......

000263c8 <tipcCtsRti>:
   263c8:	00026864 00000000                       dh......

000263d0 <curve_G>:
   263d0:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
   263e0:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k
   263f0:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
   26400:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O

00026410 <curve_b>:
   26410:	27d2604b 3bce3c3e cc53b0f6 651d06b0     K`.'><.;..S....e
   26420:	769886bc b3ebbd55 aa3a93e7 5ac635d8     ...vU.....:..5.Z

00026430 <curve_n>:
   26430:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
   26440:	ffffffff ffffffff 00000000 ffffffff     ................

00026450 <curve_p>:
   26450:	ffffffff ffffffff ffffffff 00000000     ................
	...
   26468:	00000001 ffffffff 2077654e 72656c61     ........New aler
   26478:	61632074 64253a74 6d756e20 0064253a     t cat:%d num:%d.
   26488:	3a67734d 00007325 65726e55 61206461     Msg:%s..Unread a
   26498:	7472656c 61747320 20737574 3a746163     lert status cat:
   264a8:	6e206425 253a6d75 00000064 70707553     %d num:%d...Supp
   264b8:	6574726f 656e2064 6c612077 20747265     orted new alert 
   264c8:	65746163 79726f67 7830203a 78343025     category: 0x%04x
   264d8:	00000000 70707553 6574726f 6e752064     ....Supported un
   264e8:	64616572 656c6120 63207472 67657461     read alert categ
   264f8:	3a79726f 25783020 00783430              ory: 0x%04x.

00026504 <anpcAnsAncp>:
   26504:	000267f4 00000002                       .g......

0002650c <anpcAnsNa>:
   2650c:	0002684c 00000002                       Lh......

00026514 <anpcAnsNaCcc>:
   26514:	00026810 00000006                       .h......

0002651c <anpcAnsSnac>:
   2651c:	00026870 00000002                       ph......

00026524 <anpcAnsSuac>:
   26524:	0002687c 00000002                       |h......

0002652c <anpcAnsUas>:
   2652c:	00026880 00000002                       .h......

00026534 <anpcAnsUasCcc>:
   26534:	00026810 00000006 78656e75 74636570     .h......unexpect
   26544:	63206465 626c6c61 206b6361 6e657665     ed callback even
   26554:	64252074 00000000 6e756f66 65732064     t %d....found se
   26564:	63697672 74732065 48747261 303d6c64     rvice startHdl=0
   26574:	20782578 48646e65 303d6c64 00782578     x%x endHdl=0x%x.
   26584:	72616863 65746361 74736972 66206369     characteristic f
   26594:	646e756f 6e616820 3a656c64 78257830     ound handle:0x%x
   265a4:	00000000 61766e69 2064696c 646e6168     ....invalid hand
   265b4:	303a656c 00782578 63736564 74706972     le:0x%x.descript
   265c4:	6620726f 646e756f 6e616820 3a656c64     or found handle:
   265d4:	78257830 00000000 63747461 6b6e7520     0x%x....attc unk
   265e4:	6e776f6e 63706f20 2065646f 30257830     nown opcode 0x%0
   265f4:	00007832 63747461 62636320 746f6e20     2x..attc ccb not
   26604:	206e6920 3a657375 00642520 2055544d      in use: %d.MTU 
   26614:	20716572 63736964 65647261 00000064     req discarded...

00026624 <attcFcnIf>:
   26624:	00012611 00012665 00012a61 00012781     .&..e&..a*...'..

00026634 <attcSendReqTbl>:
   26634:	00000000 00012719 000129b9 000129b9     .....'...)...)..
   26644:	000129b9 000125d9 000129b9 000125d9     .)...%...)...%..
   26654:	000129b9 000125d9 000126b5 000128f5     .)...%...&...(..
   26664:	000125d9                                .%..

00026668 <attcProcRspTbl>:
   26668:	00012d5d 00012ea1 00012d8d 00013381     ]-.......-...3..
   26678:	00012d8d 00012e95 00013401 00012e95     .-.......4......
   26688:	00012d8d 00012e99 00000000 000134d9     .-...........4..
   26698:	00012e99 73747461 4d636343 436e6961     ....attsCccMainC
   266a8:	6b636162 6e6f6320 3d64496e 68206425     back connId=%d h
   266b8:	6c646e61 64253d65 00000000 73747441     andle=%d....Atts
   266c8:	49636343 5474696e 656c6261 6e6f6320     CccInitTable con
   266d8:	3d64496e 00006425 73747441 43636343     nId=%d..AttsCccC
   266e8:	7261656c 6c626154 6f632065 64496e6e     learTable connId
   266f8:	0064253d 61746144 65736162 73616820     =%d.Database has
   26708:	61632068 6c75636c 6f697461 6f63206e     h calculation co
   26718:	656c706d 00006574 636c6143 74616c75     mplete..Calculat
   26728:	20676e69 61746164 65736162 73616820     ing database has
   26738:	00000068 6e6e6f43 25206449 68632064     h...ConnId %d ch
   26748:	65676e61 61776120 73206572 65746174     ange aware state
   26758:	20736920 00006425 6e6e6f43 25206449      is %d..ConnId %
   26768:	756f2064 666f2074 6e797320 50202c63     d out of sync, P
   26778:	77205544 20687469 6f63706f 30206564     DU with opcode 0
   26788:	32302578 67692078 65726f6e 00002164     x%02x ignored!..
   26798:	73747461 62636320 746f6e20 206e6920     atts ccb not in 
   267a8:	3a657375 00642520                       use: %d.

000267b0 <attsIndFcnIf>:
   267b0:	000155c5 00013b55 000139a1 00013ac5     .U..U;...9...:..

000267c0 <attsFcnIf>:
   267c0:	00013dbd 00013d6d 00013fc5 00013d79     .=..m=...?..y=..

000267d0 <attsMinPduLen>:
   267d0:	07050300 05050305 05030305 01000002     ................
   267e0:	0000000f                                ....

000267e4 <attFcnDefault>:
   267e4:	000155c5 000155bd 000155bd 000155c1     .U...U...U...U..

000267f4 <attAncpChUuid>:
   267f4:	00002a44                                D*..

000267f8 <attAnsSvcUuid>:
   267f8:	00001811                                ....

000267fc <attApChUuid>:
   267fc:	00002a01                                .*..

00026800 <attAsChUuid>:
   26800:	00002a3f                                ?*..

00026804 <attBslChUuid>:
   26804:	00002a38                                8*..

00026808 <attCarChUuid>:
   26808:	00002aa6                                .*..

0002680c <attChUuid>:
   2680c:	00002803                                .(..

00026810 <attCliChCfgUuid>:
   26810:	00002902                                .)..

00026814 <attCtChUuid>:
   26814:	00002a2b                                +*..

00026818 <attCtsSvcUuid>:
   26818:	00001805                                ....

0002681c <attDisSvcUuid>:
   2681c:	0000180a                                ....

00026820 <attFrsChUuid>:
   26820:	00002a26                                &*..

00026824 <attGattCsfChUuid>:
   26824:	00002b29                                )+..

00026828 <attGattDbhChUuid>:
   26828:	00002b2a                                *+..

0002682c <attGattSvcUuid>:
   2682c:	00001801                                ....

00026830 <attHrcpChUuid>:
   26830:	00002a39                                9*..

00026834 <attHrmChUuid>:
   26834:	00002a37                                7*..

00026838 <attHrsChUuid>:
   26838:	00002a27                                '*..

0002683c <attHrsSvcUuid>:
   2683c:	0000180d                                ....

00026840 <attLtiChUuid>:
   26840:	00002a0f                                .*..

00026844 <attMfnsChUuid>:
   26844:	00002a29                                )*..

00026848 <attMnsChUuid>:
   26848:	00002a24                                $*..

0002684c <attNaChUuid>:
   2684c:	00002a46                                F*..

00026850 <attPassSvcUuid>:
   26850:	0000180e                                ....

00026854 <attPrimSvcUuid>:
   26854:	00002800                                .(..

00026858 <attRcpChUuid>:
   26858:	00002a40                                @*..

0002685c <attRpaoChUuid>:
   2685c:	00002ac9                                .*..

00026860 <attRsChUuid>:
   26860:	00002a41                                A*..

00026864 <attRtiChUuid>:
   26864:	00002a14                                .*..

00026868 <attScChUuid>:
   26868:	00002a05                                .*..

0002686c <attSidChUuid>:
   2686c:	00002a23                                #*..

00026870 <attSnacChUuid>:
   26870:	00002a47                                G*..

00026874 <attSnsChUuid>:
   26874:	00002a25                                %*..

00026878 <attSrsChUuid>:
   26878:	00002a28                                (*..

0002687c <attSuacChUuid>:
   2687c:	00002a48                                H*..

00026880 <attUasChUuid>:
   26880:	00002a45                                E*..

00026884 <gattCsf>:
   26884:	00026824 00000000                       $h......

0002688c <gattSc>:
   2688c:	00026868 00000000                       hh......

00026894 <gattScCcc>:
   26894:	00026810 00000004                       .h......

0002689c <calc128Zeros>:
	...
   268ac:	65657246 534f5452 74615720 45206863     FreeRTOS Watch E
   268bc:	706d6178 000a656c 20746f47 74747542     xample..Got Butt
   268cc:	30206e6f 65725020 000a7373 20746f47     on 0 Press..Got 
   268dc:	74747542 31206e6f 65725020 000a7373     Button 1 Press..
   268ec:	20746f47 74747542 32206e6f 65725020     Got Button 2 Pre
   268fc:	000a7373 6f6d654d 70207972 206c6f6f     ss..Memory pool 
   2690c:	74207369 73206f6f 6c6c616d 20796220     is too small by 
   2691c:	0a0d6425 00000000 69646152 7361546f     %d......RadioTas
   2692c:	73203a6b 70757465 00000a0d 72617453     k: setup....Star
   2693c:	676e6974 63697720 72746e65 74206369     ting wicentric t
   2694c:	65636172 000a0a3a 6e6e7552 20676e69     race:...Running 
   2695c:	75746573 61742070 2e736b73 0a0d2e2e     setup tasks.....
   2696c:	00000000 69646152 7361546f 0000006b     ....RadioTask...
   2697c:	75746553 00000070                       Setup...

00026984 <hciEventMask>:
   26984:	02008890 20008000                       ....... 

0002698c <hciEventMaskPage2>:
   2698c:	00800000 00000000                       ........

00026994 <hciLeEventMask>:
   26994:	007fffff 00000000 6d20454c 20617465     ........LE meta 
   269a4:	20627573 6e657665 203d2074 78257830     sub event = 0x%x
   269b4:	00000000 45696368 72507476 7365636f     ....hciEvtProces
   269c4:	43654c73 496e6e6f 70655251 0074726f     sLeConnIQReport.
   269d4:	20766372 4320654c 496e6e6f 65522051     rcv Le ConnIQ Re
   269e4:	74726f70 002e2e2e 20657463 20716572     port....cte req 
   269f4:	6c696166 2e2e6465 00002e2e 20766372     failed......rcv 
   26a04:	4320654c 746e6e6f 7373656c 20514920     Le Conntless IQ 
   26a14:	6f706552 2e2e7472 0000002e              Report......

00026a20 <hciEvtCbackLen>:
   26a20:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   26a30:	06080610 06060606 16060c0c 0a08080e     ................
   26a40:	0e0e0806 0826460e 0a060a06 0c0a0424     .....F&.....$...
   26a50:	04061016 04040404 04040404 08041c04     ................
   26a60:	00080808                                ....

00026a64 <hciEvtParseFcnTbl>:
   26a64:	00000000 00018021 00017e55 000179e1     ....!...U~...y..
   26a74:	000179fd 00017a41 00000000 00017a55     .y..Az......Uz..
   26a84:	00017ffd 00017a71 00017a85 00017fd5     ....qz...z......
   26a94:	00017ac1 00017ad9 00017af1 00017b09     .z...z...z...{..
   26aa4:	00017fa5 00017b25 00017f89 00017f81     ....%{..........
   26ab4:	00017b31 00017b39 00017b4d 00017b61     1{..9{..M{..a{..
   26ac4:	00017e3d 00017e25 00017b75 00017f55     =~..%~..u{..U...
   26ad4:	00017f39 00017b89 00017ba1 00017bb9     9....{...{...{..
   26ae4:	00017bd9 00017bed 00017c05 00017c3d     .{...{...|..=|..
   26af4:	00017c7d 00017f05 00017ebd 00017cbd     }|.......~...|..
   26b04:	00017cd5 00017ce5 00017d09 00017d1d     .|...|...}...}..
   26b14:	00000000 00017d41 00017d45 00017e15     ....A}..E}...~..
   26b24:	00017dd9 00000000 00017dcd 00000000     .}.......}......
   26b34:	00017d65 00017d65 00017d65 00017d65     e}..e}..e}..e}..
   26b44:	00017d65 00000000 00000000 00000000     e}..............
	...
   26b60:	00017d6d 00017d85 00017d9d 00017db5     m}...}...}...}..
   26b70:	7267664d 7325203a 00000000 65646f4d     Mfgr: %s....Mode
   26b80:	756e206c 25203a6d 00000073 69726553     l num: %s...Seri
   26b90:	6e206c61 203a6d75 00007325 64726148     al num: %s..Hard
   26ba0:	65726177 76657220 7325203a 00000000     ware rev: %s....
   26bb0:	6d726946 65726177 76657220 7325203a     Firmware rev: %s
   26bc0:	00000000 74666f53 65726177 76657220     ....Software rev
   26bd0:	7325203a 00000000 74737953 49206d65     : %s....System I
   26be0:	65722044 6f206461 0000006b              D read ok...

00026bec <disFrs>:
   26bec:	00026820 00000000                        h......

00026bf4 <disHrs>:
   26bf4:	00026838 00000000                       8h......

00026bfc <disMfns>:
   26bfc:	00026844 00000000                       Dh......

00026c04 <disMns>:
   26c04:	00026848 00000000                       Hh......

00026c0c <disSid>:
   26c0c:	0002686c 00000000                       lh......

00026c14 <disSns>:
   26c14:	00026874 00000000                       th......

00026c1c <disSrs>:
   26c1c:	00026878 00000000 72616548 61522074     xh......Heart Ra
   26c2c:	6d206574 20736165 3a6e656c 6d206425     te meas len:%d m
   26c3c:	654c6e69 64253a6e 00000000 65482020     inLen:%d....  He
   26c4c:	20747261 65746172 2020203a 00006425     art rate:   %d..
   26c5c:	6e452020 79677265 70784520 2020203a       Energy Exp:   
   26c6c:	00006425 6c462020 3a736761 30257830     %d..  Flags:0x%0
   26c7c:	00007832 2d722020 6e492072 76726574     2x..  r-r Interv
   26c8c:	203a6c61 00006425 79646f42 6e657320     al: %d..Body sen
   26c9c:	20726f73 61636f6c 6e6f6974 0064253a     sor location:%d.

00026cac <hrpcHrsBsl>:
   26cac:	00026804 00000000                       .h......

00026cb4 <hrpcHrsHrcp>:
   26cb4:	00026830 00000000                       0h......

00026cbc <hrpcHrsHrm>:
   26cbc:	00026834 00000002                       4h......

00026cc4 <hrpcHrsHrmCcc>:
   26cc4:	00026810 00000006 4f525245 48435f52     .h......ERROR_CH
   26cd4:	204b4345 685f6d61 625f6c61 695f656c     ECK am_hal_ble_i
   26ce4:	6974696e 7a696c61 2c302865 4c422620     nitialize(0, &BL
   26cf4:	000a2945 4f525245 48435f52 204b4345     E)..ERROR_CHECK 
   26d04:	685f6d61 625f6c61 705f656c 7265776f     am_hal_ble_power
   26d14:	6e6f635f 6c6f7274 454c4228 4d41202c     _control(BLE, AM
   26d24:	4c41485f 454c425f 574f505f 415f5245     _HAL_BLE_POWER_A
   26d34:	56495443 000a2945 4f525245 48435f52     CTIVE)..ERROR_CH
   26d44:	204b4345 685f6d61 625f6c61 635f656c     ECK am_hal_ble_c
   26d54:	69666e6f 4c422867 26202c45 656c4273     onfig(BLE, &sBle
   26d64:	666e6f43 0a296769 00000000 4f525245     Config).....ERRO
   26d74:	48435f52 204b4345 685f6d61 625f6c61     R_CHECK am_hal_b
   26d84:	705f656c 7265776f 6e6f635f 6c6f7274     le_power_control
   26d94:	454c4228 4d41202c 4c41485f 454c425f     (BLE, AM_HAL_BLE
   26da4:	574f505f 4f5f5245 0a294646 00000000     _POWER_OFF).....
   26db4:	4f525245 48435f52 204b4345 685f6d61     ERROR_CHECK am_h
   26dc4:	625f6c61 645f656c 696e6965 6c616974     al_ble_deinitial
   26dd4:	28657a69 29454c42 0000000a 61766e49     ize(BLE)....Inva
   26de4:	2064696c 656c6f72 6e6f6320 75676966     lid role configu
   26df4:	69746172 203a6e6f 656c6f72 0064253d     ration: role=%d.
   26e04:	6e6b6e75 206e776f 3d646963 30257830     unknown cid=0x%0
   26e14:	00007834 64766372 74616420 6e6f2061     4x..rcvd data on
   26e24:	65727520 74736967 64657265 64696320      uregistered cid
   26e34:	00000000 676e656c 6d206874 616d7369     ....length misma
   26e44:	3a686374 63326c20 2075253d 3d696368     tch: l2c=%u hci=
   26e54:	00007525 61766e69 2064696c 2067736d     %u..invalid msg 
   26e64:	65646f63 2064253a 3a6e656c 6c206425     code:%d len:%d l
   26e74:	654c6332 64253a6e 00000000 6e6e6f63     2cLen:%d....conn
   26e84:	64707520 20657461 20716572 656d6974      update req time
   26e94:	0074756f 646e6152 00614e20 72656550     out.Rand Na.Peer
   26ea4:	00624320 61636f4c 6243206c 00000000      Cb.Local Cb....
   26eb4:	00696143 00696243 74696e49 6f746169     Cai.Cbi.Initiato
   26ec4:	62432072 00000000 654b4844 62452079     r Cb....DHKey Eb
   26ed4:	00000000                                ....

00026ed8 <smpiScActionTbl>:
   26ed8:	0001aec1 0001c74d 0001c761 0001c77d     ....M...a...}...
   26ee8:	0001b011 0001b055 0001b05d 0001b0b9     ....U...].......
   26ef8:	0001b0e9 0001b395 0001b419 0001b439     ............9...
   26f08:	0001b421 0001b42d 0001b4a5 00019d69     !...-.......i...
   26f18:	00019dd9 00019ded 00019e19 00019e89     ................
   26f28:	00019ee9 00019f4d 00019f95 0001a025     ....M.......%...
   26f38:	0001a059 0001a08d 0001a089 0001a099     Y...............
   26f48:	0001a0dd 0001a11d 0001a141 0001c959     ........A...Y...
   26f58:	0001c825 0001c9b1 0001c9f9 0001a17d     %...........}...
   26f68:	0001a20d 0001a251 0001a275 0001a2a1     ....Q...u.......
   26f78:	0001a305 0001a371 0001a3dd 0001ca39     ....q.......9...
   26f88:	0001cad5 0001cb79 0001cbfd 0001cc79     ....y.......y...
   26f98:	0001ccfd 0001a401 0001a439              ........9...

00026fa4 <smpiScSmIf>:
   26fa4:	00026fb0 00026ed8 000270b0              .o...n...p..

00026fb0 <smpiScStateTbl>:
   26fb0:	000270e4 0002717c 0002714c 00027144     .p..|q..Lq..Dq..
   26fc0:	000271b0 00027060 00027118 00027110     .q..`p...q...q..
   26fd0:	000270fc 00027104 00027120 000271e0     .p...q.. q...q..
   26fe0:	00027184 00027194 0002719c 0002718c     .q...q...q...q..
   26ff0:	000271a4 00027158 00027160 0002706c     .q..Xq..`q..lp..
   27000:	00027084 0002707c 00027074 000270c0     .p..|p..tp...p..
   27010:	000270c8 000271d8 0002713c 00027090     .p...q..<q...p..
   27020:	00027098 0002716c 00027174 000270a0     .p..lq..tq...p..
   27030:	000270a8 000271cc 000270d0 0002712c     .p...q...p..,q..
   27040:	00027048 000271b8                       Hp...q..

00027048 <smpiScStateTblAttempts>:
   27048:	0f0b0010 24060225 0c01010a 0301000a     ....%..$........
   27058:	24070100 00000000                       ...$....

00027060 <smpiScStateTblAuthSelect>:
   27060:	141b0613 1115200b 00000028              ..... ..(...

0002706c <smpiScStateTblCalcDHKey>:
   2706c:	002c1419 00000000                       ..,.....

00027074 <smpiScStateTblCalcF5LTK>:
   27074:	002f171c 00000000                       ../.....

0002707c <smpiScStateTblCalcF5MacKey>:
   2707c:	002e161c 00000000                       ........

00027084 <smpiScStateTblCalcF5TKey>:
   27084:	0d2d151c 00000924 00000000              ..-.$.......

00027090 <smpiScStateTblCnfCalc1>:
   27090:	00051c0b 00000000                       ........

00027098 <smpiScStateTblCnfCalc2>:
   27098:	00061d0b 00000000                       ........

000270a0 <smpiScStateTblCnfVerCalc1>:
   270a0:	0008200b 00000000                       . ......

000270a8 <smpiScStateTblCnfVerCalc2>:
   270a8:	0014210b 00000000                       .!......

000270b0 <smpiScStateTblCommon>:
   270b0:	0702000a 00030200 02250f03 00000000     ..........%.....

000270c0 <smpiScStateTblDhCalcF6Ea>:
   270c0:	0030181c 00000000                       ..0.....

000270c8 <smpiScStateTblDhCalcF6Eb>:
   270c8:	0031191c 00000000                       ..1.....

000270d0 <smpiScStateTblEncrypt>:
   270d0:	09162308 22030200 03001d00 0009240d     .#.....".....$..
   270e0:	00000000                                ....

000270e4 <smpiScStateTblIdle>:
   270e4:	0a0f0101 00030100 11000610 0f000007     ................
	...

000270fc <smpiScStateTblJwNcCheck1>:
   270fc:	001e091c 00000000                       ........

00027104 <smpiScStateTblJwNcCheck2>:
   27104:	0d1f0a1c 00000924 00000000              ....$.......

00027110 <smpiScStateTblJwNcRand>:
   27110:	001d0806 00000000                       ........

00027118 <smpiScStateTblJwNcWaitCnf>:
   27118:	001c0706 00000000                       ........

00027120 <smpiScStateTblJwNcWaitUser>:
   27120:	0d2b1316 00000924 00000000              ..+.$.......

0002712c <smpiScStateTblKeyDist>:
   2712c:	0c172306 000e1823 0023030e 00000000     .#..#.....#.....

0002713c <smpiScStateTblLegacyPin>:
   2713c:	00041b04 00000000                       ........

00027144 <smpiScStateTblLescPin>:
   27144:	00190404 00000000                       ........

0002714c <smpiScStateTblModeSelect>:
   2714c:	12000311 0000001a 00000000              ............

00027158 <smpiScStateTblOobSendRand>:
   27158:	0029121c 00000000                       ..).....

00027160 <smpiScStateTblOobWaitRand>:
   27160:	0d2a1306 00000924 00000000              ..*.$.......

0002716c <smpiScStateTblPairCnf>:
   2716c:	00131e06 00000000                       ........

00027174 <smpiScStateTblPairRand>:
   27174:	00071f06 00000000                       ........

0002717c <smpiScStateTblPairRsp>:
   2717c:	00120206 00000000                       ........

00027184 <smpiScStateTblPasskeyCalc>:
   27184:	00250d1c 00000000                       ..%.....

0002718c <smpiScStateTblPasskeyCheck>:
   2718c:	0027101c 00000000                       ..'.....

00027194 <smpiScStateTblPasskeyCnf>:
   27194:	00260e06 00000000                       ..&.....

0002719c <smpiScStateTblPasskeyRand>:
   2719c:	00240f06 00000000                       ..$.....

000271a4 <smpiScStateTblPasskeyRepeat>:
   271a4:	1b230c1a 240d2b13 00000009              ..#..+.$....

000271b0 <smpiScStateTblPubKey>:
   271b0:	001a0506 00000000                       ........

000271b8 <smpiScStateTblRspTo>:
   271b8:	0701000a 25030025 00250f00 000d2501     ....%..%..%..%..
   271c8:	00000000                                ....

000271cc <smpiScStateTblStkCalc>:
   271cc:	0d15220b 00000924 00000000              ."..$.......

000271d8 <smpiScStateTblVerifyDHCheck>:
   271d8:	00322206 00000000                       ."2.....

000271e0 <smprScStateTblPasskeyKeypress>:
   271e0:	17210b06 0c04220b 00000023              ..!.."..#...

000271ec <smpiActionTbl>:
   271ec:	0001aec1 0001aec5 0001af25 0001af79     ........%...y...
   271fc:	0001b011 0001b055 0001b05d 0001b0b9     ....U...].......
   2720c:	0001b0e9 0001b395 0001b419 0001b439     ............9...
   2721c:	0001b421 0001b42d 0001b4a5 00019d69     !...-.......i...
   2722c:	00019dd9 00019ded 00019e19 00019e89     ................
   2723c:	00019ee9 00019f4d 00019f95 0001a025     ....M.......%...
   2724c:	0001a059                                Y...

00027250 <smpiSmIf>:
   27250:	0002725c 000271ec 000272cc              \r...q...r..

0002725c <smpiStateTbl>:
   2725c:	000272e8 00027320 00027328 000272ac     .r.. s..(s...r..
   2726c:	000272b4 00027310 00027318 000272bc     .r...s...s...r..
   2727c:	000272c4 00027344 000272dc 00027300     .r..Ds...r...s..
   2728c:	00027294 00027330                       .r..0s..

00027294 <smpiStateTblAttempts>:
   27294:	0f0b0010 0c06020d 0c01010a 0301000a     ................
   272a4:	0c070100 00000000                       ........

000272ac <smpiStateTblCnfCalc1>:
   272ac:	0005040b 00000000                       ........

000272b4 <smpiStateTblCnfCalc2>:
   272b4:	0006050b 00000000                       ........

000272bc <smpiStateTblCnfVerCalc1>:
   272bc:	0008080b 00000000                       ........

000272c4 <smpiStateTblCnfVerCalc2>:
   272c4:	0014090b 00000000                       ........

000272cc <smpiStateTblCommon>:
   272cc:	0702000a 00030200 020d0f03 00000000     ................

000272dc <smpiStateTblEncrypt>:
   272dc:	09160b08 0a030200 00000000              ............

000272e8 <smpiStateTblIdle>:
   272e8:	0a0f0101 00030100 11000610 0f000007     ................
	...

00027300 <smpiStateTblKeyDist>:
   27300:	0c170b06 000e180b 000b030e 00000000     ................

00027310 <smpiStateTblPairCnf>:
   27310:	00130606 00000000                       ........

00027318 <smpiStateTblPairRand>:
   27318:	00070706 00000000                       ........

00027320 <smpiStateTblPairRsp>:
   27320:	00120206 00000000                       ........

00027328 <smpiStateTblPin>:
   27328:	00040304 00000000                       ........

00027330 <smpiStateTblRspTo>:
   27330:	0701000a 0d03000d 000d0f00 000d0d01     ................
   27340:	00000000                                ....

00027344 <smpiStateTblStkCalc>:
   27344:	0d150a0b 0000090c 00000000 72635370     ............pScr
   27354:	726c6120 79646165 6c6c6120 7461636f      already allocat
   27364:	00006465 646e6152 00624e20 434e574a     ed..Rand Nb.JWNC
   27374:	6e6f4320 6d726966 00000000 00006143      Confirm....Ca..
   27384:	50206143 00726565                       Ca Peer.

0002738c <smprScActionTbl>:
   2738c:	0001aec1 0001c74d 0001c761 0001c77d     ....M...a...}...
   2739c:	0001a945 0001afe5 0001a8ed 0001b011     E...............
   273ac:	0001b055 0001b05d 0001b0b9 0001b0e9     U...]...........
   273bc:	0001b395 0001b4a5 0001b439 0001b421     ........9...!...
   273cc:	0001b42d 0001b419 0001a50d 0001a535     -...........5...
   273dc:	0001a5b9 0001a65d 0001a95d 0001a9b1     ....]...].......
   273ec:	0001a9d5 0001a9f5 0001c825 0001c9b1     ........%.......
   273fc:	0001c9f9 0001aa19 0001aa29 0001aa91     ........).......
   2740c:	0001ab31 0001ab89 0001abad 0001abed     1...............
   2741c:	0001ac75 0001ac7d 0001acf9 0001ad69     u...}.......i...
   2742c:	0001ad81 0001ad9d 0001cad5 0001cb79     ............y...
   2743c:	0001cbfd 0001cc79 0001ccfd 0001add5     ....y...........
   2744c:	0001a689 0001a6cd 0001a731 0001a799     ........1.......
   2745c:	0001a8c1 0001a849                       ....I...

00027464 <smprScSmIf>:
   27464:	00027470 0002738c 00027578              pt...s..xu..

00027470 <smprScStateTbl>:
   27470:	000275ac 00027510 00027528 0002760c     .u...u..(u...v..
   27480:	0002766c 00027604 00027548 000275cc     lv...v..Hu...u..
   27490:	000275d4 000275c4 000275dc 000275e8     .u...u...u...u..
   274a0:	00027628 00027638 00027664 00027640     (v..8v..dv..@v..
   274b0:	00027650 00027648 00027658 00027618     Pv..Hv..Xv...v..
   274c0:	00027620 00027694 00027554 0002756c      v...v..Tu..lu..
   274d0:	00027564 0002755c 00027588 00027590     du..\u...u...u..
   274e0:	000276c8 000276d4 000276a0 000276a8     .v...v...v...v..
   274f0:	000276c0 000276b0 000276b8 00027688     .v...v...v...v..
   27500:	00027598 000275f4 00027530 00027674     .u...u..0u..tv..

00027510 <smprScStateTblApiPairReq>:
   27510:	0601000a 00071302 01000302 09010008     ................
   27520:	00000100 00000000                       ........

00027528 <smprScStateTblApiPairRsp>:
   27528:	00140302 00000000                       ........

00027530 <smprScStateTblAttempts>:
   27530:	0f0e0010 26060227 0f000511 0301000a     ....'..&........
   27540:	26070100 00000000                       ...&....

00027548 <smprScStateTblAuthSelect>:
   27548:	14160713 14151a0c 00000024              ........$...

00027554 <smprScStateTblCalcDHKey>:
   27554:	002a1719 00000000                       ..*.....

0002755c <smprScStateTblCalcF5LTK>:
   2755c:	002d1a1c 00000000                       ..-.....

00027564 <smprScStateTblCalcF5MacKey>:
   27564:	002c191c 00000000                       ..,.....

0002756c <smprScStateTblCalcF5TKey>:
   2756c:	0d2b181c 00000c26 00000000              ..+.&.......

00027578 <smprScStateTblCommon>:
   27578:	0702000a 00030200 02270f03 00000000     ..........'.....

00027588 <smprScStateTblDhCalcF6Ea>:
   27588:	002e1b1c 00000000                       ........

00027590 <smprScStateTblDhCalcF6Eb>:
   27590:	002f241c 00000000                       .$/.....

00027598 <smprScStateTblEncrypt>:
   27598:	09332508 24030200 03001d00 000c260d     .%3....$.....&..
   275a8:	00000000                                ....

000275ac <smprScStateTblIdle>:
   275ac:	0a120105 02060100 00000713 0f010003     ................
	...

000275c4 <smprScStateTblJwNcCalcG2>:
   275c4:	00190a1c 00000000                       ........

000275cc <smprScStateTblJwNcSetup>:
   275cc:	0017081c 00000000                       ........

000275d4 <smprScStateTblJwNcWaitRand>:
   275d4:	00180906 00000000                       ........

000275dc <smprScStateTblJwNcWaitUser>:
   275dc:	06281516 260d270b 0000000c              ..(..'.&....

000275e8 <smprScStateTblJwNcWaitUserDhCheckRcvd>:
   275e8:	0d291616 00000c26 00000000              ..).&.......

000275f4 <smprScStateTblKeyDist>:
   275f4:	0c342506 000e3525 0025030d 00000000     .%4.%5....%.....

00027604 <smprScStateTblLescPin>:
   27604:	00060404 00000000                       ........

0002760c <smprScStateTblModeSelect>:
   2760c:	12000511 0000001c 00000000              ............

00027618 <smprScStateTblOobSendRand>:
   27618:	0026151c 00000000                       ..&.....

00027620 <smprScStateTblOobWaitRand>:
   27620:	00251306 00000000                       ..%.....

00027628 <smprScStateTblPassKeyKeypress>:
   27628:	1e1b0c06 0c171d0d 060e041c 00000000     ................

00027638 <smprScStateTblPassWaitAuthRsp>:
   27638:	001f0f04 00000000                       ........

00027640 <smprScStateTblPasskeyCalc>:
   27640:	0021101c 00000000                       ..!.....

00027648 <smprScStateTblPasskeyCheck>:
   27648:	0023121c 00000000                       ..#.....

00027650 <smprScStateTblPasskeyRand>:
   27650:	00221106 00000000                       ..".....

00027658 <smprScStateTblPasskeyRepeat>:
   27658:	1b000e1a 260d2815 0000000c              .....(.&....

00027664 <smprScStateTblPasskeyWaitCnf>:
   27664:	001e0f06 00000000                       ........

0002766c <smprScStateTblPubKey>:
   2766c:	00040606 00000000                       ........

00027674 <smprScStateTblRspTo>:
   27674:	0701000a 27030027 00270f00 00102705     ....'..'..'..'..
   27684:	00000000                                ....

00027688 <smprScStateTblStkCalc>:
   27688:	0d32240b 00000c26 00000000              .$2.&.......

00027694 <smprScStateTblWaitDhCheck>:
   27694:	0d291606 00000c26 00000000              ..).&.......

000276a0 <smprStateTblCnfCalc1>:
   276a0:	00081f0b 00000000                       ........

000276a8 <smprStateTblCnfCalc2>:
   276a8:	0009200b 00000000                       . ......

000276b0 <smprStateTblCnfVerCalc1>:
   276b0:	000b220b 00000000                       ."......

000276b8 <smprStateTblCnfVerCalc2>:
   276b8:	0031230b 00000000                       .#1.....

000276c0 <smprStateTblPairRand>:
   276c0:	000a2106 00000000                       .!......

000276c8 <smprStateTblPinPair1>:
   276c8:	06051d04 0000151d 00000000              ............

000276d4 <smprStateTblPinPair2>:
   276d4:	06071e04 0000301e 00000000              .....0......

000276e0 <smprActionTbl>:
   276e0:	0001aec1 0001aec5 0001af25 0001af79     ........%...y...
   276f0:	0001afe5 0001b011 0001b055 0001b05d     ........U...]...
   27700:	0001b0b9 0001b0e9 0001b395 0001b419     ................
   27710:	0001b439 0001b421 0001b42d 0001b4a5     9...!...-.......
   27720:	0001a50d 0001a535 0001a5b9 0001a65d     ....5.......]...
   27730:	0001a689 0001a6cd 0001a731 0001a799     ........1.......
   27740:	0001a849 0001a8c1                       I.......

00027748 <smprSmIf>:
   27748:	00027754 000276e0 000277e8              Tw...v...w..

00027754 <smprStateTbl>:
   27754:	00027804 00027790 000277a8 00027834     .x...w...w..4x..
   27764:	00027840 000277c8 000277d0 0002782c     @x...w...w..,x..
   27774:	000277d8 000277e0 00027860 000277f8     .w...w..`x...w..
   27784:	0002781c 000277b0 0002784c              .x...w..Lx..

00027790 <smprStateTblApiPairReq>:
   27790:	0601000a 00071102 01000302 09010008     ................
   277a0:	00000100 00000000                       ........

000277a8 <smprStateTblApiPairRsp>:
   277a8:	00120302 00000000                       ........

000277b0 <smprStateTblAttempts>:
   277b0:	0f0c0010 0d06020e 0d00050b 0301000a     ................
   277c0:	0d070100 00000000                       ........

000277c8 <smprStateTblCnfCalc1>:
   277c8:	0006060b 00000000                       ........

000277d0 <smprStateTblCnfCalc2>:
   277d0:	0007070b 00000000                       ........

000277d8 <smprStateTblCnfVerCalc1>:
   277d8:	0009090b 00000000                       ........

000277e0 <smprStateTblCnfVerCalc2>:
   277e0:	00150a0b 00000000                       ........

000277e8 <smprStateTblCommon>:
   277e8:	0702000a 00030200 020e0f03 00000000     ................

000277f8 <smprStateTblEncrypt>:
   277f8:	09170c08 0b030200 00000000              ............

00027804 <smprStateTblIdle>:
   27804:	0a100105 02060100 00000711 0f010003     ................
	...

0002781c <smprStateTblKeyDist>:
   2781c:	06180c0c 000e190c 000c030f 00000000     ................

0002782c <smprStateTblPairRand>:
   2782c:	00080806 00000000                       ........

00027834 <smprStateTblPinPair1>:
   27834:	06040404 00001304 00000000              ............

00027840 <smprStateTblPinPair2>:
   27840:	06050504 00001405 00000000              ............

0002784c <smprStateTblRspTo>:
   2784c:	0701000a 0e03000e 000e0f00 000e0e05     ................
   2785c:	00000000                                ....

00027860 <smprStateTblStkCalc>:
   27860:	0d160b0b 00000a0d 00000000 53706d73     ............smpS
   27870:	4b646e65 75207965 7078656e 65746365     endKey unexpecte
   27880:	74732064 20657461 4479656b 3a747369     d state keyDist:
   27890:	6c206425 53747361 4b746e65 253a7965     %d lastSentKey:%
   278a0:	00000064 53706d73 6578456d 65747563     d...smpSmExecute
   278b0:	65766520 253d746e 74732064 3d657461      event=%d state=
   278c0:	00006425 44706d73 74654762 6f636552     %d..smpDbGetReco
   278d0:	203a6472 6e6e6f63 203a6449 74206425     rd: connId: %d t
   278e0:	3a657079 00642520 44706d73 64644162     ype: %d.smpDbAdd
   278f0:	69766544 00006563 44706d73 74654762     Device..smpDbGet
   27900:	6f636552 203a6472 6d6d6f63 72206e6f     Record: common r
   27910:	726f6365 00000064 44706d53 74654762     ecord...SmpDbGet
   27920:	72696150 44676e69 62617369 5464656c     PairingDisabledT
   27930:	3a656d69 6e6f6320 3a64496e 20642520     ime: connId: %d 
   27940:	69726570 203a646f 61206425 6d657474     period: %d attem
   27950:	754d7470 203a746c 00006425 44706d53     ptMult: %d..SmpD
   27960:	74655362 6c696146 43657275 746e756f     bSetFailureCount
   27970:	6f63203a 64496e6e 6425203a 756f6320     : connId: %d cou
   27980:	203a746e 00006425 44706d53 74654762     nt: %d..SmpDbGet
   27990:	6c696146 43657275 746e756f 6f63203a     FailureCount: co
   279a0:	64496e6e 6425203a 756f6320 203a746e     nnId: %d count: 
   279b0:	00006425 44706d53 78614d62 65747441     %d..SmpDbMaxAtte
   279c0:	5274706d 68636165 203a6465 6e6e6f63     mptReached: conn
   279d0:	203a6449 00006425 44706d53 69615062     Id: %d..SmpDbPai
   279e0:	676e6972 6c696146 203a6465 6e6e6f63     ringFailed: conn
   279f0:	203a6449 00006425 78656e75 74636570     Id: %d..unexpect
   27a00:	70206465 656b6361 6d632074 64253a64     ed packet cmd:%d
   27a10:	6e656c20 2c64253a 70786520 65746365      len:%d, expecte
   27a20:	64253a64 00000000 53706d73 50646e65     d:%d....smpSendP
   27a30:	7020746b 656b6361 69642074 72616373     kt packet discar
   27a40:	20646564 3a646d63 00006425 20534541     ded cmd:%d..AES 
   27a50:	656b6f74 696d206e 74616d73 203a6863     token mismatch: 
   27a60:	25206425 00000064                       %d %d...

00027a68 <smpPktLenTbl>:
   27a68:	11070700 0b110211 02110811 00021141     ............A...
   27a78:	50203446 0000624b 50203446 0000614b     F4 PKb..F4 PKa..
   27a88:	4e203446 00000062 434e574a 73694420     F4 Nb...JWNC Dis
   27a98:	79616c70 666e4320 00000000 654b4844     play Cnf....DHKe
   27aa8:	53282079 65726168 65532064 74657263     y (Shared Secret
   27ab8:	00000029 9183886c 38a5f5aa db0b3760     )...l......8`7..
   27ac8:	be83605a 00000000 00000054 0043414d     Z`......T...MAC.
   27ad8:	004b544c 654b4844 61452079 00000000     LTK.DHKey Ea....

00027ae8 <smpScF5Key>:
   27ae8:	656c7462 53706d53 74654763 636e6143     btleSmpScGetCanc
   27af8:	734d6c65 74695767 61655268 6d657474     elMsgWithReattem
   27b08:	203a7470 00006425 203e3e3e 65736552     pt: %d..>>> Rese
   27b18:	6f632074 656c706d 3c206574 00003c3c     t complete <<<..
   27b28:	203e3e3e 65766441 73697472 20676e69     >>> Advertising 
   27b38:	72617473 20646574 003c3c3c 203e3e3e     started <<<.>>> 
   27b48:	65766441 73697472 20676e69 706f7473     Advertising stop
   27b58:	20646570 003c3c3c 203e3e3e 6e616353     ped <<<.>>> Scan
   27b68:	676e696e 61747320 64657472 3c3c3c20     ning started <<<
   27b78:	00000000 203e3e3e 6e616353 676e696e     ....>>> Scanning
   27b88:	6f747320 64657070 3c3c3c20 00000000      stopped <<<....
   27b98:	203e3e3e 6e616353 74616420 65722061     >>> Scan data re
   27ba8:	76696563 66206465 206d6f72 72656570     ceived from peer
   27bb8:	3c3c3c20 00000000 203e3e3e 6e6e6f43      <<<....>>> Conn
   27bc8:	69746365 6f206e6f 656e6570 3c3c2064     ection opened <<
   27bd8:	0000003c 203e3e3e 6e6e6f43 69746365     <...>>> Connecti
   27be8:	63206e6f 65736f6c 3c3c2064 0000003c     on closed <<<...
   27bf8:	203e3e3e 72696150 20676e69 706d6f63     >>> Pairing comp
   27c08:	6574656c 75732064 73656363 6c756673     leted successful
   27c18:	3c20796c 00003c3c 203e3e3e 72696150     ly <<<..>>> Pair
   27c28:	20676e69 6c696166 3c206465 00003c3c     ing failed <<<..
   27c38:	203e3e3e 6e6e6f43 69746365 65206e6f     >>> Connection e
   27c48:	7972636e 64657470 3c3c3c20 00000000     ncrypted <<<....
   27c58:	203e3e3e 72636e45 69747079 66206e6f     >>> Encryption f
   27c68:	656c6961 3c3c2064 0000003c 203e3e3e     ailed <<<...>>> 
   27c78:	6d6f7250 75207470 20726573 65206f74     Prompt user to e
   27c88:	7265746e 73617020 79656b73 3c3c3c20     nter passkey <<<
   27c98:	00000000 203e3e3e 636e6143 61206c65     ....>>> Cancel a
   27ca8:	776f6c20 20726f20 68676968 656c6120      low or high ale
   27cb8:	3c207472 00003c3c 203e3e3e 20776f4c     rt <<<..>>> Low 
   27cc8:	72656c61 3c3c2074 0000003c 203e3e3e     alert <<<...>>> 
   27cd8:	68676948 656c6120 3c207472 00003c3c     High alert <<<..
   27ce8:	203e3e3e 65766441 73697472 20676e69     >>> Advertising 
   27cf8:	73746573 61747320 64657472 3c3c3c20     sets started <<<
   27d08:	00000000 203e3e3e 65766441 73697472     ....>>> Advertis
   27d18:	20676e69 73746573 6f747320 64657070     ing sets stopped
   27d28:	3c3c3c20 00000000 203e3e3e 6e616353      <<<....>>> Scan
   27d38:	71657220 74736575 63657220 65766965      request receive
   27d48:	3c3c2064 0000003c 203e3e3e 65747845     d <<<...>>> Exte
   27d58:	6465646e 61637320 6e696e6e 74732067     nded scanning st
   27d68:	65747261 3c3c2064 0000003c 203e3e3e     arted <<<...>>> 
   27d78:	65747845 6465646e 61637320 6e696e6e     Extended scannin
   27d88:	74732067 6570706f 3c3c2064 0000003c     g stopped <<<...
   27d98:	203e3e3e 69726550 6369646f 76646120     >>> Periodic adv
   27da8:	69747265 676e6973 74657320 61747320     ertising set sta
   27db8:	64657472 3c3c3c20 00000000 203e3e3e     rted <<<....>>> 
   27dc8:	69726550 6369646f 76646120 69747265     Periodic adverti
   27dd8:	676e6973 74657320 6f747320 64657070     sing set stopped
   27de8:	3c3c3c20 00000000 203e3e3e 69726550      <<<....>>> Peri
   27df8:	6369646f 76646120 69747265 676e6973     odic advertising
   27e08:	6e797320 73652063 6c626174 65687369      sync establishe
   27e18:	3c3c2064 0000003c 203e3e3e 69726550     d <<<...>>> Peri
   27e28:	6369646f 76646120 69747265 676e6973     odic advertising
   27e38:	6e797320 6f6c2063 3c207473 00003c3c      sync lost <<<..
   27e48:	203e3e3e 73736150 3a79656b 20642520     >>> Passkey: %d 
   27e58:	003c3c3c                                <<<.

00027e5c <attCfg>:
   27e5c:	0000000f 041e01e0                       ........

00027e64 <smpCfg>:
   27e64:	000001f4 01100703 00000000 0000fa00     ................
   27e74:	0000fa00 00000002 42667357 6c416675     ........WsfBufAl
   27e84:	20636f6c 6c696166 6c206465 253a6e65     loc failed len:%
   27e94:	00000075 20465357 656d6954 00000072     u...WSF Timer...
   27ea4:	58323025 00000020 00000a0a 2e2f2e2e     %02X ........./.
   27eb4:	2e2e2f2e 2f2e2e2f 742f2e2e 64726968     ./../../../third
   27ec4:	7261705f 632f7974 6964726f 73772f6f     _party/cordio/ws
   27ed4:	6f732f66 65637275 6f702f73 662f7472     f/sources/port/f
   27ee4:	72656572 2f736f74 5f667377 63617274     reertos/wsf_trac
   27ef4:	00632e65                                e.c.

00027ef8 <gapLenAp>:
   27ef8:	                                         ..

00027efa <gapLenApCh>:
   27efa:	                                         ..

00027efc <gapLenCar>:
   27efc:	                                         ..

00027efe <gapLenCarCh>:
   27efe:	                                         ..

00027f00 <gapLenRpao>:
   27f00:	                                         ..

00027f02 <gapLenRpaoCh>:
   27f02:	                                         ..

00027f04 <gapLenSvc>:
   27f04:	00000002                                ....

00027f08 <gapList>:
   27f08:	00026854 00027f90 00027f04 01000002     Th..............
   27f18:	0002680c 00027f78 00027efa 01000005     .h..x....~......
   27f28:	000267fc 10005e1c 00027ef8 01000002     .g...^...~......
   27f38:	0002680c 00027f80 00027efe 01000005     .h.......~......
   27f48:	00026808 10005e20 00027efc 01000001     .h.. ^...~......
   27f58:	0002680c 00027f88 00027f02 01000005     .h..............
   27f68:	0002685c 10005e24 00027f00 01000001     \h..$^..........

00027f78 <gapValApCh>:
   27f78:	01000502 0000002a                       ....*...

00027f80 <gapValCarCh>:
   27f80:	a6000702 0000002a                       ....*...

00027f88 <gapValRpaoCh>:
   27f88:	c9000902 0000002a                       ....*...

00027f90 <gapValSvc>:
   27f90:	                                         ..

00027f92 <gattLenCsf>:
   27f92:	                                         ..

00027f94 <gattLenCsfCh>:
   27f94:	                                         ..

00027f96 <gattLenDbh>:
   27f96:	                                         ..

00027f98 <gattLenDbhCh>:
   27f98:	                                         ..

00027f9a <gattLenSc>:
   27f9a:	                                         ..

00027f9c <gattLenScCh>:
   27f9c:	                                         ..

00027f9e <gattLenScChCcc>:
   27f9e:	                                         ..

00027fa0 <gattLenSvc>:
   27fa0:	00000002                                ....

00027fa4 <gattList>:
   27fa4:	00026854 00028040 00027fa0 01000002     Th..@...........
   27fb4:	0002680c 00028038 00027f9c 01000005     .h..8...........
   27fc4:	00026868 00028034 00027f9a 00000004     hh..4...........
   27fd4:	00026810 10005e3c 00027f9e 11200002     .h..<^........ .
   27fe4:	0002680c 00028024 00027f94 01000005     .h..$...........
   27ff4:	00026824 10005e28 00027f92 11060001     $h..(^..........
   28004:	0002680c 0002802c 00027f98 01000005     .h..,...........
   28014:	00026828 10005e2c 00027f96 01040010     (h..,^..........

00028024 <gattValCsfCh>:
   28024:	29001502 0000002b                       ...)+...

0002802c <gattValDbhCh>:
   2802c:	2a001702 0000002b                       ...*+...

00028034 <gattValSc>:
   28034:	ffff0001                                ....

00028038 <gattValScCh>:
   28038:	05001220 0000002a                        ...*...

00028040 <gattValSvc>:
   28040:	00001801 63747441 63736944 76726553     ....AttcDiscServ
   28050:	43656369 206c706d 74617473 30207375     iceCmpl status 0
   28060:	32302578 00000078 63747441 63736944     x%02x...AttcDisc
   28070:	72616843 6c706d43 61747320 20737574     CharCmpl status 
   28080:	30257830 00007832 63747441 63736944     0x%02x..AttcDisc
   28090:	666e6f43 6d436769 73206c70 75746174     ConfigCmpl statu
   280a0:	78302073 78323025 00000000 44707041     s 0x%02x....AppD
   280b0:	43637369 6c706d6f 20657465 6e6e6f63     iscComplete conn
   280c0:	253a6449 74732064 73757461 2578303a     Id:%d status:0x%
   280d0:	00783230 20707041 20746f67 20747665     02x.App got evt 
   280e0:	00006425 61656c43 6f622072 6e69646e     %d..Clear bondin
   280f0:	6e692067 00006f66                       g info..

000280f8 <appReqActCfg>:
   280f8:	00000000 6e616353 73657220 73746c75     ....Scan results
   28108:	6425203a 00000000 61766e49 2064696c     : %d....Invalid 
   28118:	73204d44 6e6e6163 20676e69 65646f6d     DM scanning mode
   28128:	6f6d203b 63206564 69666e6f 65727567     ; mode configure
   28138:	73612064 67656c20 00796361 61766e49     d as legacy.Inva
   28148:	2064696c 73204d44 6e6e6163 20676e69     lid DM scanning 
   28158:	65646f6d 6f6d203b 63206564 69666e6f     mode; mode confi
   28168:	65727567 73612064 74786520 65646e65     gured as extende
   28178:	00000064 61746144 65736162 73616820     d...Database has
   28188:	70752068 65746164 00000064 6f6d6572     h updated...remo
   28198:	66206574 75746165 203a6572 78257830     te feature: 0x%x
   281a8:	4420202c 303a454c 00782578 6f6d6552     ,  DLE:0x%x.Remo
   281b8:	64206574 63697665 75732065 726f7070     te device suppor
   281c8:	4c442074 00000045 6f6d6552 64206574     t DLE...Remote d
   281d8:	63697665 6f642065 276e7365 75732074     evice doesn't su
   281e8:	726f7070 4c442074 00000045 61746164     pport DLE...data
   281f8:	6e656c20 20687467 68637865 65676e61      length exchange
   28208:	7473202c 73757461 6425203d 616d202c     , status= %d, ma
   28218:	4c585278 203d6e65 202c6425 5478616d     xRXLen= %d, maxT
   28228:	6e656c58 6425203d 00000000 61766e49     Xlen= %d....Inva
   28238:	2064696c 61204d44 72657664 69736974     lid DM advertisi
   28248:	6d20676e 3b65646f 646f6d20 6f632065     ng mode; mode co
   28258:	6769666e 64657275 20736120 65747865     nfigured as exte
   28268:	6465646e 00000000 20726d54 00637653     nded....Tmr Svc.

00028278 <g_AM_BSP_GPIO_ITM_SWO>:
   28278:	00000002                                ....

0002827c <ccitt_table>:
   2827c:	80050000 000a800f 001e801b 80110014     ................
   2828c:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   2829c:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   282ac:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   282bc:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   282cc:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   282dc:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   282ec:	00968093 8099009c 808d0088 00828087     ................
   282fc:	01868183 8189018c 819d0198 01928197     ................
   2830c:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   2831c:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   2832c:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   2833c:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   2834c:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   2835c:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   2836c:	81150110 011a811f 010e810b 81010104     ................
   2837c:	03068303 8309030c 831d0318 03128317     ................
   2838c:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   2839c:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   283ac:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   283bc:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   283cc:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   283dc:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   283ec:	83950390 039a839f 038e838b 83810384     ................
   283fc:	82850280 028a828f 029e829b 82910294     ................
   2840c:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   2841c:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   2842c:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   2843c:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   2844c:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   2845c:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   2846c:	02168213 8219021c 820d0208 02028207     ................

0002847c <am_ble_buffer_patch_data>:
   2847c:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   2848c:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   2849c:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   284ac:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   284bc:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   284f8:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   28508:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   28518:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   28528:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   28538:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   28548:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   28558:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   28568:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   28578:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   28588:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   28598:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   285a8:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   285b8:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   285c8:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   285d8:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   285e8:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   285f8:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   28608:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   28618:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   28628:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   28638:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   28648:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   28658:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   28668:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   28678:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   28688:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   28698:	8f809011 9812900e 900d3008 30309812     .........0....00
   286a8:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   286b8:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   286c8:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   286d8:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   286e8:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   286f8:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   28708:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   28718:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   28728:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   28738:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   28748:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   28758:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   28768:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   28788:	00000021 00000000 00000001 00000000     !...............
   28798:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   287a8:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   287b8:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   287c8:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   287d8:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   287e8:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   287f8:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   28808:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   28818:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   28828:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   28838:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   28848:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   28858:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   28868:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   28878:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   28888:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   28898:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   288a8:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   288b8:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   288c8:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   288d8:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   288e8:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   288f8:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   28908:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   28918:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   28928:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   28938:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   28948:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   28958:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   28968:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   28978:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   28988:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   28998:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   289a8:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   289b8:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   289c8:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   289d8:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   289e8:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   289f8:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   28a08:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   28a18:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   28a28:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   28a38:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   28a48:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   28a58:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   28a68:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   28a78:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   28a88:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   28a98:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   28aa8:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   28ab8:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   28ac8:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   28ad8:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   28ae8:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   28af8:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   28b08:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   28b18:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   28b28:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   28b38:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   28b48:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   28b58:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   28b68:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   28b78:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   28b88:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   28b98:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   28ba8:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   28bb8:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   28bc8:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   28bd8:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   28be8:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   28bf8:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   28c08:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   28c18:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   28c28:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   28c38:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   28c48:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   28c58:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   28c68:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   28c78:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   28c88:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   28c98:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   28ca8:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   28cb8:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   28cc8:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   28cd8:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   28ce8:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   28cf8:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   28d08:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   28d18:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   28d28:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   28d38:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   28d48:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   28d58:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   28d68:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   28d78:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   28d88:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   28d98:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   28da8:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   28db8:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   28dc8:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   28dd8:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   28de8:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   28df8:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   28e08:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   28e18:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   28e28:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   28e38:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   28e48:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   28e58:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   28e68:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   28e78:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   28e88:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   28e98:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   28ea8:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   28eb8:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   28ec8:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   28ed8:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   28ee8:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   28ef8:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   28f08:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   28f18:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   28f28:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   28f38:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   28f48:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   28f58:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   28f68:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   28f78:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   28f88:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   28f98:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   28fa8:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   28fb8:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   28fc8:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   28fd8:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   28fe8:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   28ff8:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   29008:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   29018:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   29028:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   29038:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   29048:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   29058:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   29068:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   29078:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   29088:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   29098:	00010341 50804000 000093a5 00000466     A....@.P....f...
   290a8:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   290b8:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   290c8:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   290d8:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   290e8:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   290f8:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   29108:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   29118:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   29128:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   29138:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   29148:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   29158:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   29168:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   29178:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   29188:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   29198:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   291a8:	00004770 20006780 20006054              pG...g. T`. 

000291b4 <am_ble_performance_copy_patch_data>:
   291b4:	006e1100 00000400 00000000 01c50101     ..n.............
   291c4:	00000039 00000000 00000000 00000000     9...............
   291d4:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   291e4:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   291f4:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   29204:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   29214:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   29224:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   29234:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   29244:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   29254:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   29264:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   29274:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   29284:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   29294:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   292a4:	f000e00a e007fb94 b2c09801 fac7f000     ................
   292b4:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   292c4:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   292d4:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   292e4:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   292f4:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   29304:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   29314:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   29324:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   29334:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   29344:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   29354:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   29364:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   29374:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   29384:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   29394:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   293a4:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   293b4:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   293c4:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   293d4:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   293e4:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   293f4:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   29404:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   29414:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   29424:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   29434:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   29444:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   29454:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   29464:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   29474:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   29484:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   29494:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   294a4:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   294b4:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   294c4:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   294d4:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   294e4:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   294f4:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   29504:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   29514:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   29524:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   29534:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   29544:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   29554:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   29564:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   29574:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   29584:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   29594:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   295a4:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   295b4:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   295c4:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   295d4:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   295e4:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   295f4:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   29604:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   29614:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   29624:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   29634:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   29644:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   29654:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   29664:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   29674:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   29684:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   29694:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   296a4:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   296b4:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   296c4:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   296d4:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   296e4:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   296f4:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   29704:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   29714:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   29724:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   29734:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   29744:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   29754:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   29764:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   29774:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   29784:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   29794:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   297a4:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   297b4:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   297c4:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   297d4:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   297e4:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   297f4:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   29804:	00400000 00804580 021e4580 00030000     ..@..E...E......
   29814:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   29824:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   29834:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   29844:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   29854:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   29864:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   29874:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   29884:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   29894:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   298a4:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   298b4:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   298c4:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   298d4:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   298e4:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   298f4:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   29904:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   29914:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   29924:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   29934:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   29944:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   29954:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   29964:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   29974:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   29984:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   29994:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   299a4:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   299b4:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   299c4:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   299d4:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   299e4:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   299f4:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   29a04:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   29a14:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   29a24:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   29a34:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   29a44:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   29a54:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   29a64:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   29a74:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   29a84:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   29a94:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   29aa4:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   29ab4:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   29ac4:	00000001                                ....

00029ac8 <am_hal_ble_num_default_patches>:
   29ac8:	00000003                                ....

00029acc <am_ble_buffer_patch_data_b0>:
   29acc:	04182200 000003ff 00077584 00077d73     .".......u..s}..
   29adc:	00078575 00078b17 000795a9 00079b18     u...............
   29aec:	0007a32d 0007acc5 0007b2f4 0007b9ff     -...............
	...
   29b2c:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   29b3c:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   29b4c:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   29b5c:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   29b6c:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   29b7c:	20003e01 7cca4e23 6ac96875 d01d2a00     .>. #N.|uh.j.*..
   29b8c:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   29b9c:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   29bac:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   29bbc:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   29bcc:	2000682c 20006e0c 47084900 20003e31     ,h. .n. .I.G1>. 
   29bdc:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   29bec:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   29bfc:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   29c0c:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   29c1c:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   29c2c:	00000021 00000000 00000001 00000000     !...............
   29c3c:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   29c4c:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   29c5c:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   29c6c:	30286928 8d013040 1a409800 b280492a     (i(0@0....@.*I..
   29c7c:	bf00bf00 22054628 30631c71 fdacf7f3     ....(F."q.c0....
   29c8c:	99006928 fbdff001 70602001 2003e001     (i....... `p... 
   29c9c:	2f007060 7860d139 d2362806 44790001     `p./9.`x.(6...yD
   29cac:	bf00bf00 22568931 46315351 fe3ef001     ....1.V"QS1F..>.
   29cbc:	70602001 2003e001 2f007060 7860d167     . `p... `p./g.`x
   29ccc:	d2642806 44790001 18497909 185f448f     .(d...yD.yI..D_.
   29cdc:	1207020c 98052128 fc54f7ff 213de057     ....(!....T.W.=!
   29cec:	20006878 20006dac 50800040 00002017     xh. .m. @..P. ..
   29cfc:	00000801 5080407e 200068d8 47084900     ....~@.P.h. .I.G
   29d0c:	20003e91 78c34311 021b7882 0412431a     .>. .C.x.x...C..
   29d1c:	4c1a430a 79426062 02127901 79c34311     .C.Lb`By.y...C.y
   29d2c:	d01b2e13 550e21a1 46692202 724e720a     .....!.U."iF.rNr
   29d3c:	4308210f 46019001 f7fe4638 4669f909     .!.C...F8F....iF
   29d4c:	b2e87a0a f7ffa902 3440ff55 8aa220ff     .z......U.@4. ..
   29d5c:	30034639 bf00bf00 bdf0b003 21a12216     9F.0.........".!
   29d6c:	00808820 30405838 07c07f00 2500d005      ...8X@0.......%
   29d7c:	8820e02f fd22f008 4668e02b 20017a01     /. ...".+.hF.z. 
   29d8c:	d0034388 28002000 e001d108 e7fa2001     .C... .(..... ..
   29d9c:	43882004 2000d004 d0032800 e018253a     . .C... .(..:%..
   29dac:	6b114a08 4b086b52 d9014298 47702000     .J.kRk.K.B... pG
   29dbc:	43424341 0c900989 49041808 d9f64288     ACBC.......I.B..
   29dcc:	47702000 20007ec0 001e8480 03938700     . pG.~. ........
   29ddc:	4913b410 4a136b89 d9024290 2000bc10     ...I.k.J.B..... 
   29dec:	4a114770 6813247d 02242214 42a34342     pG.J}$.h."$.BC.B
   29dfc:	4341d903 18100c08 4341e002 1a100c08     ..AC......AC....
   29e0c:	4288490a 2000d902 4770bc10 d0002800     .I.B... ..pG.(..
   29e1c:	42a31e40 2800d2f8 bc10d0f6 47701e40     @..B...(....@.pG
   29e2c:	20007ec0 000186a0 20006858 00030d40     .~. ....Xh. @...
   29e3c:	f3efb4f0 b2cc8110 f3812101 78428810     .........!....Bx
   29e4c:	02127801 78c34311 021b7882 0412431a     .x...C.x.x...C..
   29e5c:	4d1d430a 7942606a 02127901 79c34311     .C.Mj`By.y...C.y
   29e6c:	021b7982 0412431a 60aa430a 7a017a42     .y...C...C.`Bz.z
   29e7c:	43110212 7a827ac3 431a021b 430a0412     ...C.z.z...C...C
   29e8c:	7b4260ea 02127b01 7bc34311 021b7b82     .`B{.{...C.{.{..
   29e9c:	0412431a 612a430a 23103010 21004a0b     .C...C*a.0.#.J.!
   29eac:	54565c46 b2891c49 d3f94299 6168206e     F\VTI....B..n ha
   29ebc:	60282001 21014806 f3847401 bcf08810     . (`.H.!.t......
   29ecc:	20104904 00004708 508000c0 5080406e     .I. .G.....Pn@.P
   29edc:	200068d8 000159a1                       .h. .Y..

00029ee4 <am_hal_ble_num_default_patches_b0>:
   29ee4:	00000003                                ....

00029ee8 <am_hal_cachectrl_defaults>:
   29ee8:	00000308                                ....

00029eec <g_AM_HAL_GPIO_DISABLE>:
   29eec:	00000003                                ....

00029ef0 <g_AM_HAL_GPIO_INPUT>:
   29ef0:	00001003                                ....

00029ef4 <g_AM_HAL_GPIO_OUTPUT>:
   29ef4:	00000403                                ....

00029ef8 <g_ui8Bit76Capabilities>:
   29ef8:	02800101 80010180 80800101 80808080     ................
   29f08:	80808080 80808008 01800180 80808080     ................
   29f18:	80808080 01800402 01010401 80808080     ................
   29f28:	00000101                                ....

00029f2c <g_ui8Inpen>:
   29f2c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   29f3c:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   29f4c:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   29f5c:	00003130                                01..

00029f60 <g_ui8NCEtable>:
   29f60:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   29f70:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   29f80:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   29f90:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   29fa0:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   29fb0:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   29fc0:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   29fd0:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   29fe0:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   29ff0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   2a000:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   2a010:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   2a020:	32221202 43231303                       .."2..#C

0002a028 <g_ui8nCEpins>:
   2a028:	02070707 00080802 01020202 01010101     ................
   2a038:	01010101 01010101 01010101 01010101     ................
   2a048:	01010101 08010101 01010008 01010101     ................
   2a058:	00000101                                ....

0002a05c <g_am_hal_mcuctrl_flash_size>:
   2a05c:	00004000 00008000 00010000 00020000     .@..............
   2a06c:	00040000 00080000 00100000 00200000     .............. .
   2a07c:	00180000 00000000 00000000 00000000     ................
	...

0002a09c <g_am_hal_mcuctrl_sram_size>:
   2a09c:	00004000 00008000 00010000 00020000     .@..............
   2a0ac:	00040000 00080000 00100000 00060000     ................
   2a0bc:	000c0000 00000000 00000000 00000000     ................
	...

0002a0dc <am_hal_pwrctrl_peripheral_control>:
	...
   2a0e8:	00000001 00000004 00000004 00000002     ................
   2a0f8:	00000008 00000008 00000004 00000008     ................
   2a108:	00000008 00000008 00000008 00000008     ................
   2a118:	00000010 00000010 00000010 00000020     ............ ...
   2a128:	00000010 00000010 00000040 00000010     ........@.......
   2a138:	00000010 00000080 00000004 00000004     ................
   2a148:	00000100 00000004 00000004 00000200     ................
   2a158:	00000020 00000020 00000400 00000004      ... ...........
   2a168:	00000004 00000800 00000040 00000040     ........@...@...
   2a178:	00001000 00000080 00000080 00002000     ............. ..
   2a188:	00000100 00000100                       ........
