
bin/reset_states.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 11 d4 00 00 79 d4 00 00 a5 c5 00 00     ........y.......
    c010:	7b d4 00 00 7b d4 00 00 7b d4 00 00 00 00 00 00     {...{...{.......
	...
    c02c:	7d d4 00 00 7d d4 00 00 00 00 00 00 7d d4 00 00     }...}.......}...
    c03c:	7d d4 00 00 7d d4 00 00 d5 c1 00 00 7d d4 00 00     }...}.......}...
    c04c:	7d d4 00 00 7d d4 00 00 7d d4 00 00 7d d4 00 00     }...}...}...}...
    c05c:	7d d4 00 00 7d d4 00 00 7d d4 00 00 7d d4 00 00     }...}...}...}...
    c06c:	7d d4 00 00 7d d4 00 00 7d d4 00 00 7d d4 00 00     }...}...}...}...
    c07c:	7d d4 00 00 7d d4 00 00 7d d4 00 00 7d d4 00 00     }...}...}...}...
    c08c:	7d d4 00 00 7d d4 00 00 7d d4 00 00 7d d4 00 00     }...}...}...}...
    c09c:	7d d4 00 00 7d d4 00 00 7d d4 00 00 7d d4 00 00     }...}...}...}...
    c0ac:	7d d4 00 00 7d d4 00 00 7d d4 00 00 7d d4 00 00     }...}...}...}...
    c0bc:	7d d4 00 00                                         }...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <am_watchdog_isr>:
// Interrupt handler for the watchdog.
//
//*****************************************************************************
void
am_watchdog_isr(void)
{
    c1d4:	b508      	push	{r3, lr}
    //
    // Clear the watchdog interrupt.
    //
    am_hal_wdt_int_clear();
    c1d6:	f001 ff01 	bl	dfdc <am_hal_wdt_int_clear>

    //
    // Catch the first four watchdog interrupts, but let the fifth through
    // untouched.
    //
    if (g_ui8NumWatchdogInterrupts < 4)
    c1da:	4b18      	ldr	r3, [pc, #96]	; (c23c <am_watchdog_isr+0x68>)
    c1dc:	781b      	ldrb	r3, [r3, #0]
    c1de:	2b03      	cmp	r3, #3
    c1e0:	d804      	bhi.n	c1ec <am_watchdog_isr+0x18>
    {
        //
        // Restart the watchdog.
        //
        am_hal_wdt_restart();
    c1e2:	4b17      	ldr	r3, [pc, #92]	; (c240 <am_watchdog_isr+0x6c>)
    c1e4:	22b2      	movs	r2, #178	; 0xb2
    c1e6:	605a      	str	r2, [r3, #4]
    c1e8:	4b15      	ldr	r3, [pc, #84]	; (c240 <am_watchdog_isr+0x6c>)
    c1ea:	685b      	ldr	r3, [r3, #4]
    }

    //
    // Enable debug printf messages using ITM on SWO pin
    //
    am_bsp_debug_printf_enable();
    c1ec:	f001 ff44 	bl	e078 <am_bsp_debug_printf_enable>

    //
    // Send a status message and give it some time to print.
    //
    am_util_stdio_printf("Interrupt!!\n");
    c1f0:	4814      	ldr	r0, [pc, #80]	; (c244 <am_watchdog_isr+0x70>)
    c1f2:	f001 f8e5 	bl	d3c0 <am_util_stdio_printf>
    am_util_delay_ms(10);
    c1f6:	200a      	movs	r0, #10
    c1f8:	f000 f9b8 	bl	c56c <am_util_delay_ms>

    //
    // On the second interrupt do a different kind of reset
    //
    if (g_ui8NumWatchdogInterrupts == 2)
    c1fc:	4b0f      	ldr	r3, [pc, #60]	; (c23c <am_watchdog_isr+0x68>)
    c1fe:	781b      	ldrb	r3, [r3, #0]
    c200:	2b02      	cmp	r3, #2
    c202:	d112      	bne.n	c22a <am_watchdog_isr+0x56>
    {
        //
        //  If it's not a watch dog interrupt we will reset here.
        //
        if (g_eNextInterrupt != NEXT_WATCHDOG )
    c204:	4b10      	ldr	r3, [pc, #64]	; (c248 <am_watchdog_isr+0x74>)
    c206:	781b      	ldrb	r3, [r3, #0]
    c208:	2b00      	cmp	r3, #0
    c20a:	d00e      	beq.n	c22a <am_watchdog_isr+0x56>
        {
            //
            // Stop the watchdog.
            //
            am_hal_wdt_halt();
    c20c:	f001 fede 	bl	dfcc <am_hal_wdt_halt>

            //
            // Check if we want to do a POR or POI.
            //
            if (g_eNextInterrupt == NEXT_SWPOR)
    c210:	4b0d      	ldr	r3, [pc, #52]	; (c248 <am_watchdog_isr+0x74>)
    c212:	781b      	ldrb	r3, [r3, #0]
    c214:	2b01      	cmp	r3, #1
    c216:	d104      	bne.n	c222 <am_watchdog_isr+0x4e>
            {
                am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOR, 0);
    c218:	2100      	movs	r1, #0
    c21a:	2000      	movs	r0, #0
    c21c:	f001 fe04 	bl	de28 <am_hal_reset_control>
    c220:	e003      	b.n	c22a <am_watchdog_isr+0x56>
            }
            else
            {
                am_hal_reset_control(AM_HAL_RESET_CONTROL_SWPOI, 0);
    c222:	2100      	movs	r1, #0
    c224:	2001      	movs	r0, #1
    c226:	f001 fdff 	bl	de28 <am_hal_reset_control>
    }

    //
    // Increment the number of watchdog interrupts.
    //
    g_ui8NumWatchdogInterrupts++;
    c22a:	4b04      	ldr	r3, [pc, #16]	; (c23c <am_watchdog_isr+0x68>)
    c22c:	781b      	ldrb	r3, [r3, #0]
    c22e:	3301      	adds	r3, #1
    c230:	b2da      	uxtb	r2, r3
    c232:	4b02      	ldr	r3, [pc, #8]	; (c23c <am_watchdog_isr+0x68>)
    c234:	701a      	strb	r2, [r3, #0]
}
    c236:	bf00      	nop
    c238:	bd08      	pop	{r3, pc}
    c23a:	bf00      	nop
    c23c:	10001064 	.word	0x10001064
    c240:	40024000 	.word	0x40024000
    c244:	0000ef18 	.word	0x0000ef18
    c248:	10001065 	.word	0x10001065

0000c24c <reset_decode>:
// Function to decode and print the reset cause.
//
//*****************************************************************************
void
reset_decode(void)
{
    c24c:	b500      	push	{lr}
    c24e:	b087      	sub	sp, #28
    am_hal_reset_status_t sStatus;

    //
    // Print out reset status register upon entry.
    //
    am_hal_reset_status_get(&sStatus);
    c250:	ab01      	add	r3, sp, #4
    c252:	4618      	mov	r0, r3
    c254:	f001 fe08 	bl	de68 <am_hal_reset_status_get>
    ui32ResetStatus = sStatus.eStatus;
    c258:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c25c:	9305      	str	r3, [sp, #20]
    am_util_stdio_printf("Reset Status Register = 0x%02x\n", ui32ResetStatus);
    c25e:	9905      	ldr	r1, [sp, #20]
    c260:	482f      	ldr	r0, [pc, #188]	; (c320 <reset_decode+0xd4>)
    c262:	f001 f8ad 	bl	d3c0 <am_util_stdio_printf>

    //
    // POWER CYCLE.
    //
    if ( ui32ResetStatus & AM_HAL_RESET_STATUS_POR )
    c266:	9b05      	ldr	r3, [sp, #20]
    c268:	f003 0302 	and.w	r3, r3, #2
    c26c:	2b00      	cmp	r3, #0
    c26e:	d005      	beq.n	c27c <reset_decode+0x30>
    {
        am_util_stdio_printf("Power Cycled\n");
    c270:	482c      	ldr	r0, [pc, #176]	; (c324 <reset_decode+0xd8>)
    c272:	f001 f8a5 	bl	d3c0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_WATCHDOG;
    c276:	4b2c      	ldr	r3, [pc, #176]	; (c328 <reset_decode+0xdc>)
    c278:	2200      	movs	r2, #0
    c27a:	701a      	strb	r2, [r3, #0]
    }

    //
    // WATCHDOG.
    //
    if ( ui32ResetStatus & AM_HAL_RESET_STATUS_WDT )
    c27c:	9b05      	ldr	r3, [sp, #20]
    c27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c282:	2b00      	cmp	r3, #0
    c284:	d005      	beq.n	c292 <reset_decode+0x46>
    {
        am_util_stdio_printf("Watchdog Reset\n");
    c286:	4829      	ldr	r0, [pc, #164]	; (c32c <reset_decode+0xe0>)
    c288:	f001 f89a 	bl	d3c0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_SWPOR;
    c28c:	4b26      	ldr	r3, [pc, #152]	; (c328 <reset_decode+0xdc>)
    c28e:	2201      	movs	r2, #1
    c290:	701a      	strb	r2, [r3, #0]
    }

    //
    // DEBUGGER.
    //
    if ( ui32ResetStatus & AM_HAL_RESET_STATUS_DEBUGGER )
    c292:	9b05      	ldr	r3, [sp, #20]
    c294:	f003 0320 	and.w	r3, r3, #32
    c298:	2b00      	cmp	r3, #0
    c29a:	d005      	beq.n	c2a8 <reset_decode+0x5c>
    {
        am_util_stdio_printf("Debugger Initiated Reset\n");
    c29c:	4824      	ldr	r0, [pc, #144]	; (c330 <reset_decode+0xe4>)
    c29e:	f001 f88f 	bl	d3c0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_WATCHDOG;
    c2a2:	4b21      	ldr	r3, [pc, #132]	; (c328 <reset_decode+0xdc>)
    c2a4:	2200      	movs	r2, #0
    c2a6:	701a      	strb	r2, [r3, #0]
    }

    //
    // SOFTWARE POI.
    //
    if ( ui32ResetStatus & AM_HAL_RESET_STATUS_SWPOI )
    c2a8:	9b05      	ldr	r3, [sp, #20]
    c2aa:	f003 0310 	and.w	r3, r3, #16
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d005      	beq.n	c2be <reset_decode+0x72>
    {
        am_util_stdio_printf(
    c2b2:	4820      	ldr	r0, [pc, #128]	; (c334 <reset_decode+0xe8>)
    c2b4:	f001 f884 	bl	d3c0 <am_util_stdio_printf>
                   "Software POI (power on reset internal state)\n");
        g_eNextInterrupt = NEXT_WATCHDOG;
    c2b8:	4b1b      	ldr	r3, [pc, #108]	; (c328 <reset_decode+0xdc>)
    c2ba:	2200      	movs	r2, #0
    c2bc:	701a      	strb	r2, [r3, #0]
    }

    //
    // SOFTWARE POR.
    //
    if ( ui32ResetStatus & AM_HAL_RESET_STATUS_SWPOR )
    c2be:	9b05      	ldr	r3, [sp, #20]
    c2c0:	f003 0308 	and.w	r3, r3, #8
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d005      	beq.n	c2d4 <reset_decode+0x88>
    {
        am_util_stdio_printf("Software POR Initiated Reset\n");
    c2c8:	481b      	ldr	r0, [pc, #108]	; (c338 <reset_decode+0xec>)
    c2ca:	f001 f879 	bl	d3c0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_SWPOI;
    c2ce:	4b16      	ldr	r3, [pc, #88]	; (c328 <reset_decode+0xdc>)
    c2d0:	2202      	movs	r2, #2
    c2d2:	701a      	strb	r2, [r3, #0]
    }

    //
    // BROWNOUT DETECTOR.
    //
    if ( ui32ResetStatus & AM_HAL_RESET_STATUS_BOD )
    c2d4:	9b05      	ldr	r3, [sp, #20]
    c2d6:	f003 0304 	and.w	r3, r3, #4
    c2da:	2b00      	cmp	r3, #0
    c2dc:	d005      	beq.n	c2ea <reset_decode+0x9e>
    {
        am_util_stdio_printf("Brownout Detector Initiated Reset\n");
    c2de:	4817      	ldr	r0, [pc, #92]	; (c33c <reset_decode+0xf0>)
    c2e0:	f001 f86e 	bl	d3c0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_WATCHDOG;
    c2e4:	4b10      	ldr	r3, [pc, #64]	; (c328 <reset_decode+0xdc>)
    c2e6:	2200      	movs	r2, #0
    c2e8:	701a      	strb	r2, [r3, #0]
    }

    //
    // EXTERNAL PIN
    //
    if ( ui32ResetStatus & AM_HAL_RESET_STATUS_EXTERNAL )
    c2ea:	9b05      	ldr	r3, [sp, #20]
    c2ec:	f003 0301 	and.w	r3, r3, #1
    c2f0:	2b00      	cmp	r3, #0
    c2f2:	d005      	beq.n	c300 <reset_decode+0xb4>
    {
        am_util_stdio_printf("External Reset Pin Initiated This Reset\n");
    c2f4:	4812      	ldr	r0, [pc, #72]	; (c340 <reset_decode+0xf4>)
    c2f6:	f001 f863 	bl	d3c0 <am_util_stdio_printf>
        g_eNextInterrupt = NEXT_SWPOI;
    c2fa:	4b0b      	ldr	r3, [pc, #44]	; (c328 <reset_decode+0xdc>)
    c2fc:	2202      	movs	r2, #2
    c2fe:	701a      	strb	r2, [r3, #0]
    }

    if ( g_eNextInterrupt == NEXT_WATCHDOG )
    c300:	4b09      	ldr	r3, [pc, #36]	; (c328 <reset_decode+0xdc>)
    c302:	781b      	ldrb	r3, [r3, #0]
    c304:	2b00      	cmp	r3, #0
    c306:	d103      	bne.n	c310 <reset_decode+0xc4>
    {
        am_util_stdio_printf("  Next interrupt is WDT, so 5 interrupts should occur.\n");
    c308:	480e      	ldr	r0, [pc, #56]	; (c344 <reset_decode+0xf8>)
    c30a:	f001 f859 	bl	d3c0 <am_util_stdio_printf>
    }
    else
    {
        am_util_stdio_printf("  Next interrupt is not WDT, so only 3 interrupts should occur.\n");
    }
}
    c30e:	e002      	b.n	c316 <reset_decode+0xca>
        am_util_stdio_printf("  Next interrupt is not WDT, so only 3 interrupts should occur.\n");
    c310:	480d      	ldr	r0, [pc, #52]	; (c348 <reset_decode+0xfc>)
    c312:	f001 f855 	bl	d3c0 <am_util_stdio_printf>
}
    c316:	bf00      	nop
    c318:	b007      	add	sp, #28
    c31a:	f85d fb04 	ldr.w	pc, [sp], #4
    c31e:	bf00      	nop
    c320:	0000ef28 	.word	0x0000ef28
    c324:	0000ef48 	.word	0x0000ef48
    c328:	10001065 	.word	0x10001065
    c32c:	0000ef58 	.word	0x0000ef58
    c330:	0000ef68 	.word	0x0000ef68
    c334:	0000ef84 	.word	0x0000ef84
    c338:	0000efb4 	.word	0x0000efb4
    c33c:	0000efd4 	.word	0x0000efd4
    c340:	0000eff8 	.word	0x0000eff8
    c344:	0000f024 	.word	0x0000f024
    c348:	0000f05c 	.word	0x0000f05c

0000c34c <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c34c:	b508      	push	{r3, lr}
    //
    // Set g_eNextInterrupt to a watchdog interrupt.
    //
    g_eNextInterrupt = NEXT_WATCHDOG;
    c34e:	4b20      	ldr	r3, [pc, #128]	; (c3d0 <main+0x84>)
    c350:	2200      	movs	r2, #0
    c352:	701a      	strb	r2, [r3, #0]

    //
    // Set system clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c354:	2100      	movs	r1, #0
    c356:	2000      	movs	r0, #0
    c358:	f001 fa3a 	bl	d7d0 <am_hal_clkgen_control>

    //
    // Stop the watch dog if we are coming in from a reset
    // other than a power cycle
    //
    am_hal_wdt_halt();
    c35c:	f001 fe36 	bl	dfcc <am_hal_wdt_halt>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c360:	481c      	ldr	r0, [pc, #112]	; (c3d4 <main+0x88>)
    c362:	f001 f88d 	bl	d480 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c366:	f001 f8af 	bl	d4c8 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c36a:	f001 fe65 	bl	e038 <am_bsp_low_power_init>

    //
    // Initialize the LED
    //
#ifdef AM_BSP_NUM_LEDS
    am_devices_led_init(am_bsp_psLEDs);
    c36e:	481a      	ldr	r0, [pc, #104]	; (c3d8 <main+0x8c>)
    c370:	f000 f838 	bl	c3e4 <am_devices_led_init>
#endif

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c374:	f001 ff2a 	bl	e1cc <am_bsp_itm_printf_enable>

    //
    // Clear the terminal screen, and print a quick message to show that we're
    // alive.
    //
    am_util_stdio_terminal_clear();
    c378:	f001 f842 	bl	d400 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Reset State Tracking Example.\n");
    c37c:	4817      	ldr	r0, [pc, #92]	; (c3dc <main+0x90>)
    c37e:	f001 f81f 	bl	d3c0 <am_util_stdio_printf>

    //
    // Decode and print the reset state that got us here.
    //
    reset_decode();
    c382:	f7ff ff63 	bl	c24c <reset_decode>

    //
    // Give user a little time to read the type of reset.
    //
    am_util_delay_ms(1000);
    c386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c38a:	f000 f8ef 	bl	c56c <am_util_delay_ms>

    //
    // LFRC has to be turned on for this example because the watchdog only
    // runs off of the LFRC.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c38e:	2100      	movs	r1, #0
    c390:	2002      	movs	r0, #2
    c392:	f001 fa1d 	bl	d7d0 <am_hal_clkgen_control>

    //
    // Configure the watchdog.
    //
    am_hal_wdt_init(&g_sWatchdogConfig);
    c396:	4812      	ldr	r0, [pc, #72]	; (c3e0 <main+0x94>)
    c398:	f001 fdd8 	bl	df4c <am_hal_wdt_init>

    //
    // Enable the interrupt for the watchdog in the NVIC.
    //
    NVIC_EnableIRQ(WDT_IRQn);
    c39c:	2001      	movs	r0, #1
    c39e:	f7ff feff 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c3a2:	f001 fc99 	bl	dcd8 <am_hal_interrupt_master_enable>

    //
    // Enable the watchdog.
    //
    am_hal_wdt_start();
    c3a6:	f001 fe07 	bl	dfb8 <am_hal_wdt_start>
    while (1)
    {
        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
    c3aa:	f001 fed9 	bl	e160 <am_bsp_debug_printf_disable>

        //
        // Disable interrupts.
        //
        am_hal_interrupt_master_disable();
    c3ae:	f001 fc97 	bl	dce0 <am_hal_interrupt_master_disable>

        //
        // Turn OFF the indicator LED.
        //
#ifdef AM_BSP_NUM_LEDS
        am_devices_led_off(am_bsp_psLEDs, 0);
    c3b2:	2100      	movs	r1, #0
    c3b4:	4808      	ldr	r0, [pc, #32]	; (c3d8 <main+0x8c>)
    c3b6:	f000 f89b 	bl	c4f0 <am_devices_led_off>

        //
        // Go to sleep.
        //
//      am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_NORMAL);
    c3ba:	2000      	movs	r0, #0
    c3bc:	f001 fd8e 	bl	dedc <am_hal_sysctrl_sleep>

        //
        // Turn ON the indicator LED.
        //
#ifdef AM_BSP_NUM_LEDS
        am_devices_led_on(am_bsp_psLEDs, 0);
    c3c0:	2100      	movs	r1, #0
    c3c2:	4805      	ldr	r0, [pc, #20]	; (c3d8 <main+0x8c>)
    c3c4:	f000 f85a 	bl	c47c <am_devices_led_on>
#endif

        //
        // An interrupt woke us up so now enable them and take it.
        //
        am_hal_interrupt_master_enable();
    c3c8:	f001 fc86 	bl	dcd8 <am_hal_interrupt_master_enable>
        am_bsp_debug_printf_disable();
    c3cc:	e7ed      	b.n	c3aa <main+0x5e>
    c3ce:	bf00      	nop
    c3d0:	10001065 	.word	0x10001065
    c3d4:	0000f0d4 	.word	0x0000f0d4
    c3d8:	10001014 	.word	0x10001014
    c3dc:	0000f0a0 	.word	0x0000f0a0
    c3e0:	10001000 	.word	0x10001000

0000c3e4 <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    c3e4:	b500      	push	{lr}
    c3e6:	b083      	sub	sp, #12
    c3e8:	9001      	str	r0, [sp, #4]
    if ( (psLED == NULL)    ||
    c3ea:	9b01      	ldr	r3, [sp, #4]
    c3ec:	2b00      	cmp	r3, #0
    c3ee:	d03d      	beq.n	c46c <am_devices_led_init+0x88>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c3f0:	9b01      	ldr	r3, [sp, #4]
    c3f2:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    c3f4:	2b31      	cmp	r3, #49	; 0x31
    c3f6:	d839      	bhi.n	c46c <am_devices_led_init+0x88>
#else
#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    c3f8:	9b01      	ldr	r3, [sp, #4]
    c3fa:	685b      	ldr	r3, [r3, #4]
    c3fc:	f003 0302 	and.w	r3, r3, #2
    c400:	2b00      	cmp	r3, #0
    c402:	d019      	beq.n	c438 <am_devices_led_init+0x54>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    c404:	9b01      	ldr	r3, [sp, #4]
    c406:	681b      	ldr	r3, [r3, #0]
    c408:	4a1a      	ldr	r2, [pc, #104]	; (c474 <am_devices_led_init+0x90>)
    c40a:	6811      	ldr	r1, [r2, #0]
    c40c:	4618      	mov	r0, r3
    c40e:	f001 fae9 	bl	d9e4 <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    c412:	9b01      	ldr	r3, [sp, #4]
    c414:	681b      	ldr	r3, [r3, #0]
    c416:	2103      	movs	r1, #3
    c418:	4618      	mov	r0, r3
    c41a:	f001 fc19 	bl	dc50 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c41e:	9b01      	ldr	r3, [sp, #4]
    c420:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c422:	9b01      	ldr	r3, [sp, #4]
    c424:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    c426:	b2db      	uxtb	r3, r3
    c428:	f003 0301 	and.w	r3, r3, #1
    c42c:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c42e:	4619      	mov	r1, r3
    c430:	4610      	mov	r0, r2
    c432:	f001 fc0d 	bl	dc50 <am_hal_gpio_state_write>
    c436:	e01a      	b.n	c46e <am_devices_led_init+0x8a>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    c438:	9b01      	ldr	r3, [sp, #4]
    c43a:	681b      	ldr	r3, [r3, #0]
    c43c:	4a0e      	ldr	r2, [pc, #56]	; (c478 <am_devices_led_init+0x94>)
    c43e:	6811      	ldr	r1, [r2, #0]
    c440:	4618      	mov	r0, r3
    c442:	f001 facf 	bl	d9e4 <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    c446:	9b01      	ldr	r3, [sp, #4]
    c448:	681b      	ldr	r3, [r3, #0]
    c44a:	2103      	movs	r1, #3
    c44c:	4618      	mov	r0, r3
    c44e:	f001 fbff 	bl	dc50 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c452:	9b01      	ldr	r3, [sp, #4]
    c454:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c456:	9b01      	ldr	r3, [sp, #4]
    c458:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    c45a:	b2db      	uxtb	r3, r3
    c45c:	f003 0301 	and.w	r3, r3, #1
    c460:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c462:	4619      	mov	r1, r3
    c464:	4610      	mov	r0, r2
    c466:	f001 fbf3 	bl	dc50 <am_hal_gpio_state_write>
    c46a:	e000      	b.n	c46e <am_devices_led_init+0x8a>
        return;
    c46c:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    c46e:	b003      	add	sp, #12
    c470:	f85d fb04 	ldr.w	pc, [sp], #4
    c474:	0000f0dc 	.word	0x0000f0dc
    c478:	0000f0e0 	.word	0x0000f0e0

0000c47c <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    c47c:	b500      	push	{lr}
    c47e:	b083      	sub	sp, #12
    c480:	9001      	str	r0, [sp, #4]
    c482:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    c484:	9b01      	ldr	r3, [sp, #4]
    c486:	2b00      	cmp	r3, #0
    c488:	d02e      	beq.n	c4e8 <am_devices_led_on+0x6c>
    c48a:	9b00      	ldr	r3, [sp, #0]
    c48c:	2b1e      	cmp	r3, #30
    c48e:	d82b      	bhi.n	c4e8 <am_devices_led_on+0x6c>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c490:	9b00      	ldr	r3, [sp, #0]
    c492:	00db      	lsls	r3, r3, #3
    c494:	9a01      	ldr	r2, [sp, #4]
    c496:	4413      	add	r3, r2
    c498:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    c49a:	2b31      	cmp	r3, #49	; 0x31
    c49c:	d824      	bhi.n	c4e8 <am_devices_led_on+0x6c>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    c49e:	9b00      	ldr	r3, [sp, #0]
    c4a0:	00db      	lsls	r3, r3, #3
    c4a2:	9a01      	ldr	r2, [sp, #4]
    c4a4:	4413      	add	r3, r2
    c4a6:	685b      	ldr	r3, [r3, #4]
    c4a8:	f003 0302 	and.w	r3, r3, #2
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	d011      	beq.n	c4d4 <am_devices_led_on+0x58>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c4b0:	9b00      	ldr	r3, [sp, #0]
    c4b2:	00db      	lsls	r3, r3, #3
    c4b4:	9a01      	ldr	r2, [sp, #4]
    c4b6:	4413      	add	r3, r2
    c4b8:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c4ba:	9b00      	ldr	r3, [sp, #0]
    c4bc:	00db      	lsls	r3, r3, #3
    c4be:	9a01      	ldr	r2, [sp, #4]
    c4c0:	4413      	add	r3, r2
    c4c2:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    c4c4:	b2db      	uxtb	r3, r3
    c4c6:	f003 0301 	and.w	r3, r3, #1
    c4ca:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c4cc:	4619      	mov	r1, r3
    c4ce:	f001 fbbf 	bl	dc50 <am_hal_gpio_state_write>
    c4d2:	e00a      	b.n	c4ea <am_devices_led_on+0x6e>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c4d4:	9b00      	ldr	r3, [sp, #0]
    c4d6:	00db      	lsls	r3, r3, #3
    c4d8:	9a01      	ldr	r2, [sp, #4]
    c4da:	4413      	add	r3, r2
    c4dc:	681b      	ldr	r3, [r3, #0]
    c4de:	2104      	movs	r1, #4
    c4e0:	4618      	mov	r0, r3
    c4e2:	f001 fbb5 	bl	dc50 <am_hal_gpio_state_write>
    c4e6:	e000      	b.n	c4ea <am_devices_led_on+0x6e>
        return;
    c4e8:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    c4ea:	b003      	add	sp, #12
    c4ec:	f85d fb04 	ldr.w	pc, [sp], #4

0000c4f0 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    c4f0:	b500      	push	{lr}
    c4f2:	b083      	sub	sp, #12
    c4f4:	9001      	str	r0, [sp, #4]
    c4f6:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    c4f8:	9b01      	ldr	r3, [sp, #4]
    c4fa:	2b00      	cmp	r3, #0
    c4fc:	d031      	beq.n	c562 <am_devices_led_off+0x72>
    c4fe:	9b00      	ldr	r3, [sp, #0]
    c500:	2b1e      	cmp	r3, #30
    c502:	d82e      	bhi.n	c562 <am_devices_led_off+0x72>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c504:	9b00      	ldr	r3, [sp, #0]
    c506:	00db      	lsls	r3, r3, #3
    c508:	9a01      	ldr	r2, [sp, #4]
    c50a:	4413      	add	r3, r2
    c50c:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    c50e:	2b31      	cmp	r3, #49	; 0x31
    c510:	d827      	bhi.n	c562 <am_devices_led_off+0x72>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    c512:	9b00      	ldr	r3, [sp, #0]
    c514:	00db      	lsls	r3, r3, #3
    c516:	9a01      	ldr	r2, [sp, #4]
    c518:	4413      	add	r3, r2
    c51a:	685b      	ldr	r3, [r3, #4]
    c51c:	f003 0302 	and.w	r3, r3, #2
    c520:	2b00      	cmp	r3, #0
    c522:	d014      	beq.n	c54e <am_devices_led_off+0x5e>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c524:	9b00      	ldr	r3, [sp, #0]
    c526:	00db      	lsls	r3, r3, #3
    c528:	9a01      	ldr	r2, [sp, #4]
    c52a:	4413      	add	r3, r2
    c52c:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c52e:	9b00      	ldr	r3, [sp, #0]
    c530:	00db      	lsls	r3, r3, #3
    c532:	9a01      	ldr	r2, [sp, #4]
    c534:	4413      	add	r3, r2
    c536:	685b      	ldr	r3, [r3, #4]
    c538:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c53c:	2b00      	cmp	r3, #0
    c53e:	bf0c      	ite	eq
    c540:	2301      	moveq	r3, #1
    c542:	2300      	movne	r3, #0
    c544:	b2db      	uxtb	r3, r3
    c546:	4619      	mov	r1, r3
    c548:	f001 fb82 	bl	dc50 <am_hal_gpio_state_write>
    c54c:	e00a      	b.n	c564 <am_devices_led_off+0x74>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c54e:	9b00      	ldr	r3, [sp, #0]
    c550:	00db      	lsls	r3, r3, #3
    c552:	9a01      	ldr	r2, [sp, #4]
    c554:	4413      	add	r3, r2
    c556:	681b      	ldr	r3, [r3, #0]
    c558:	2103      	movs	r1, #3
    c55a:	4618      	mov	r0, r3
    c55c:	f001 fb78 	bl	dc50 <am_hal_gpio_state_write>
    c560:	e000      	b.n	c564 <am_devices_led_off+0x74>
        return;
    c562:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    c564:	b003      	add	sp, #12
    c566:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c56c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c56c:	b500      	push	{lr}
    c56e:	b089      	sub	sp, #36	; 0x24
    c570:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c572:	ab03      	add	r3, sp, #12
    c574:	4618      	mov	r0, r3
    c576:	f001 f9c7 	bl	d908 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c57a:	9b03      	ldr	r3, [sp, #12]
    c57c:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c57e:	9b07      	ldr	r3, [sp, #28]
    c580:	4a07      	ldr	r2, [pc, #28]	; (c5a0 <am_util_delay_ms+0x34>)
    c582:	fba2 2303 	umull	r2, r3, r2, r3
    c586:	099a      	lsrs	r2, r3, #6
    c588:	9b01      	ldr	r3, [sp, #4]
    c58a:	fb02 f303 	mul.w	r3, r2, r3
    c58e:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c590:	9806      	ldr	r0, [sp, #24]
    c592:	f001 f9d7 	bl	d944 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c596:	bf00      	nop
    c598:	b009      	add	sp, #36	; 0x24
    c59a:	f85d fb04 	ldr.w	pc, [sp], #4
    c59e:	bf00      	nop
    c5a0:	057619f1 	.word	0x057619f1

0000c5a4 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c5a4:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c5a6:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c5aa:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c5ac:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c5b0:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c5b4:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c5b8:	f000 f80a 	bl	c5d0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c5bc:	bd01      	pop	{r0, pc}
}
    c5be:	bf00      	nop
    c5c0:	4618      	mov	r0, r3

0000c5c2 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c5c2:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c5c4:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c5c6:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c5c8:	4770      	bx	lr
}
    c5ca:	bf00      	nop
    c5cc:	4618      	mov	r0, r3
	...

0000c5d0 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c5d0:	b500      	push	{lr}
    c5d2:	b097      	sub	sp, #92	; 0x5c
    c5d4:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c5d6:	ab03      	add	r3, sp, #12
    c5d8:	2200      	movs	r2, #0
    c5da:	601a      	str	r2, [r3, #0]
    c5dc:	605a      	str	r2, [r3, #4]
    c5de:	609a      	str	r2, [r3, #8]
    c5e0:	60da      	str	r2, [r3, #12]
    c5e2:	611a      	str	r2, [r3, #16]
    c5e4:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c5e6:	2300      	movs	r3, #0
    c5e8:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c5ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c5ec:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c5ee:	4b2e      	ldr	r3, [pc, #184]	; (c6a8 <am_util_faultisr_collect_data+0xd8>)
    c5f0:	681b      	ldr	r3, [r3, #0]
    c5f2:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c5f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c5f6:	b2db      	uxtb	r3, r3
    c5f8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c5fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c5fe:	0a1b      	lsrs	r3, r3, #8
    c600:	b2db      	uxtb	r3, r3
    c602:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c608:	0c1b      	lsrs	r3, r3, #16
    c60a:	b29b      	uxth	r3, r3
    c60c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c610:	4b26      	ldr	r3, [pc, #152]	; (c6ac <am_util_faultisr_collect_data+0xdc>)
    c612:	681b      	ldr	r3, [r3, #0]
    c614:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c616:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c61a:	b2db      	uxtb	r3, r3
    c61c:	f003 0302 	and.w	r3, r3, #2
    c620:	2b00      	cmp	r3, #0
    c622:	d005      	beq.n	c630 <am_util_faultisr_collect_data+0x60>
    c624:	9901      	ldr	r1, [sp, #4]
    c626:	2006      	movs	r0, #6
    c628:	f7ff ffcb 	bl	c5c2 <getStackedReg>
    c62c:	4603      	mov	r3, r0
    c62e:	e001      	b.n	c634 <am_util_faultisr_collect_data+0x64>
    c630:	f04f 33ff 	mov.w	r3, #4294967295
    c634:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c636:	9901      	ldr	r1, [sp, #4]
    c638:	2000      	movs	r0, #0
    c63a:	f7ff ffc2 	bl	c5c2 <getStackedReg>
    c63e:	4603      	mov	r3, r0
    c640:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c642:	9901      	ldr	r1, [sp, #4]
    c644:	2001      	movs	r0, #1
    c646:	f7ff ffbc 	bl	c5c2 <getStackedReg>
    c64a:	4603      	mov	r3, r0
    c64c:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c64e:	9901      	ldr	r1, [sp, #4]
    c650:	2002      	movs	r0, #2
    c652:	f7ff ffb6 	bl	c5c2 <getStackedReg>
    c656:	4603      	mov	r3, r0
    c658:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c65a:	9901      	ldr	r1, [sp, #4]
    c65c:	2003      	movs	r0, #3
    c65e:	f7ff ffb0 	bl	c5c2 <getStackedReg>
    c662:	4603      	mov	r3, r0
    c664:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c666:	9901      	ldr	r1, [sp, #4]
    c668:	2004      	movs	r0, #4
    c66a:	f7ff ffaa 	bl	c5c2 <getStackedReg>
    c66e:	4603      	mov	r3, r0
    c670:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c672:	9901      	ldr	r1, [sp, #4]
    c674:	2005      	movs	r0, #5
    c676:	f7ff ffa4 	bl	c5c2 <getStackedReg>
    c67a:	4603      	mov	r3, r0
    c67c:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c67e:	9901      	ldr	r1, [sp, #4]
    c680:	2006      	movs	r0, #6
    c682:	f7ff ff9e 	bl	c5c2 <getStackedReg>
    c686:	4603      	mov	r3, r0
    c688:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c68a:	9901      	ldr	r1, [sp, #4]
    c68c:	2007      	movs	r0, #7
    c68e:	f7ff ff98 	bl	c5c2 <getStackedReg>
    c692:	4603      	mov	r3, r0
    c694:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c696:	ab03      	add	r3, sp, #12
    c698:	4619      	mov	r1, r3
    c69a:	2002      	movs	r0, #2
    c69c:	f001 fb28 	bl	dcf0 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c6a0:	2300      	movs	r3, #0
    c6a2:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c6a4:	e7fe      	b.n	c6a4 <am_util_faultisr_collect_data+0xd4>
    c6a6:	bf00      	nop
    c6a8:	e000ed28 	.word	0xe000ed28
    c6ac:	e000ed38 	.word	0xe000ed38

0000c6b0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c6b0:	b082      	sub	sp, #8
    c6b2:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c6b4:	4a02      	ldr	r2, [pc, #8]	; (c6c0 <am_util_stdio_printf_init+0x10>)
    c6b6:	9b01      	ldr	r3, [sp, #4]
    c6b8:	6013      	str	r3, [r2, #0]
}
    c6ba:	bf00      	nop
    c6bc:	b002      	add	sp, #8
    c6be:	4770      	bx	lr
    c6c0:	10001068 	.word	0x10001068

0000c6c4 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c6c4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c6c8:	b098      	sub	sp, #96	; 0x60
    c6ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c6ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6d2:	f04f 0000 	mov.w	r0, #0
    c6d6:	f04f 0100 	mov.w	r1, #0
    c6da:	0018      	movs	r0, r3
    c6dc:	2100      	movs	r1, #0
    c6de:	ea50 0301 	orrs.w	r3, r0, r1
    c6e2:	f000 80b0 	beq.w	c846 <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c6e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6ea:	f04f 0400 	mov.w	r4, #0
    c6ee:	f04f 0500 	mov.w	r5, #0
    c6f2:	0854      	lsrs	r4, r2, #1
    c6f4:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c6f8:	085d      	lsrs	r5, r3, #1
    c6fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6fe:	f04f 0000 	mov.w	r0, #0
    c702:	f04f 0100 	mov.w	r1, #0
    c706:	0890      	lsrs	r0, r2, #2
    c708:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c70c:	0899      	lsrs	r1, r3, #2
    c70e:	eb14 0a00 	adds.w	sl, r4, r0
    c712:	eb45 0b01 	adc.w	fp, r5, r1
    c716:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c71a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c71e:	f04f 0000 	mov.w	r0, #0
    c722:	f04f 0100 	mov.w	r1, #0
    c726:	0910      	lsrs	r0, r2, #4
    c728:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c72c:	0919      	lsrs	r1, r3, #4
    c72e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c732:	1814      	adds	r4, r2, r0
    c734:	9402      	str	r4, [sp, #8]
    c736:	414b      	adcs	r3, r1
    c738:	9303      	str	r3, [sp, #12]
    c73a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c73e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c742:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c746:	f04f 0000 	mov.w	r0, #0
    c74a:	f04f 0100 	mov.w	r1, #0
    c74e:	0a10      	lsrs	r0, r2, #8
    c750:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c754:	0a19      	lsrs	r1, r3, #8
    c756:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c75a:	1814      	adds	r4, r2, r0
    c75c:	9404      	str	r4, [sp, #16]
    c75e:	414b      	adcs	r3, r1
    c760:	9305      	str	r3, [sp, #20]
    c762:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c766:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c76a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c76e:	f04f 0000 	mov.w	r0, #0
    c772:	f04f 0100 	mov.w	r1, #0
    c776:	0c10      	lsrs	r0, r2, #16
    c778:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c77c:	0c19      	lsrs	r1, r3, #16
    c77e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c782:	1814      	adds	r4, r2, r0
    c784:	9406      	str	r4, [sp, #24]
    c786:	414b      	adcs	r3, r1
    c788:	9307      	str	r3, [sp, #28]
    c78a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c78e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c792:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c796:	f04f 0000 	mov.w	r0, #0
    c79a:	f04f 0100 	mov.w	r1, #0
    c79e:	0018      	movs	r0, r3
    c7a0:	2100      	movs	r1, #0
    c7a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7a6:	1814      	adds	r4, r2, r0
    c7a8:	9408      	str	r4, [sp, #32]
    c7aa:	414b      	adcs	r3, r1
    c7ac:	9309      	str	r3, [sp, #36]	; 0x24
    c7ae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c7b2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c7b6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c7ba:	f04f 0200 	mov.w	r2, #0
    c7be:	f04f 0300 	mov.w	r3, #0
    c7c2:	08c2      	lsrs	r2, r0, #3
    c7c4:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c7c8:	08cb      	lsrs	r3, r1, #3
    c7ca:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c7ce:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c7d2:	4622      	mov	r2, r4
    c7d4:	462b      	mov	r3, r5
    c7d6:	f04f 0000 	mov.w	r0, #0
    c7da:	f04f 0100 	mov.w	r1, #0
    c7de:	0099      	lsls	r1, r3, #2
    c7e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c7e4:	0090      	lsls	r0, r2, #2
    c7e6:	4602      	mov	r2, r0
    c7e8:	460b      	mov	r3, r1
    c7ea:	1916      	adds	r6, r2, r4
    c7ec:	eb43 0705 	adc.w	r7, r3, r5
    c7f0:	19b3      	adds	r3, r6, r6
    c7f2:	930a      	str	r3, [sp, #40]	; 0x28
    c7f4:	eb47 0307 	adc.w	r3, r7, r7
    c7f8:	930b      	str	r3, [sp, #44]	; 0x2c
    c7fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c7fe:	4630      	mov	r0, r6
    c800:	4639      	mov	r1, r7
    c802:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c806:	1a14      	subs	r4, r2, r0
    c808:	940c      	str	r4, [sp, #48]	; 0x30
    c80a:	eb63 0301 	sbc.w	r3, r3, r1
    c80e:	930d      	str	r3, [sp, #52]	; 0x34
    c810:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c814:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c818:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c81c:	f112 0806 	adds.w	r8, r2, #6
    c820:	f143 0900 	adc.w	r9, r3, #0
    c824:	f04f 0200 	mov.w	r2, #0
    c828:	f04f 0300 	mov.w	r3, #0
    c82c:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c830:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c834:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c838:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c83c:	1814      	adds	r4, r2, r0
    c83e:	9400      	str	r4, [sp, #0]
    c840:	414b      	adcs	r3, r1
    c842:	9301      	str	r3, [sp, #4]
    c844:	e02a      	b.n	c89c <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c848:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c84a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c84c:	085a      	lsrs	r2, r3, #1
    c84e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c850:	089b      	lsrs	r3, r3, #2
    c852:	4413      	add	r3, r2
    c854:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c856:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c858:	091b      	lsrs	r3, r3, #4
    c85a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c85c:	4413      	add	r3, r2
    c85e:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c860:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c862:	0a1b      	lsrs	r3, r3, #8
    c864:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c866:	4413      	add	r3, r2
    c868:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c86a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c86c:	0c1b      	lsrs	r3, r3, #16
    c86e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c870:	4413      	add	r3, r2
    c872:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c874:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c876:	08db      	lsrs	r3, r3, #3
    c878:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c87a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c87c:	4613      	mov	r3, r2
    c87e:	009b      	lsls	r3, r3, #2
    c880:	4413      	add	r3, r2
    c882:	005b      	lsls	r3, r3, #1
    c884:	461a      	mov	r2, r3
    c886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c888:	1a9b      	subs	r3, r3, r2
    c88a:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c88c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c88e:	3306      	adds	r3, #6
    c890:	091a      	lsrs	r2, r3, #4
    c892:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c894:	4413      	add	r3, r2
    c896:	2200      	movs	r2, #0
    c898:	9300      	str	r3, [sp, #0]
    c89a:	9201      	str	r2, [sp, #4]
    }
}
    c89c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8a0:	4610      	mov	r0, r2
    c8a2:	4619      	mov	r1, r3
    c8a4:	b018      	add	sp, #96	; 0x60
    c8a6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c8aa:	4770      	bx	lr

0000c8ac <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c8ac:	b500      	push	{lr}
    c8ae:	b085      	sub	sp, #20
    c8b0:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c8b4:	9a00      	ldr	r2, [sp, #0]
    c8b6:	9b01      	ldr	r3, [sp, #4]
    c8b8:	4313      	orrs	r3, r2
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	bf0c      	ite	eq
    c8be:	2301      	moveq	r3, #1
    c8c0:	2300      	movne	r3, #0
    c8c2:	b2db      	uxtb	r3, r3
    c8c4:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c8c6:	e008      	b.n	c8da <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c8c8:	e9dd 0100 	ldrd	r0, r1, [sp]
    c8cc:	f7ff fefa 	bl	c6c4 <divu64_10>
    c8d0:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c8d4:	9b03      	ldr	r3, [sp, #12]
    c8d6:	3301      	adds	r3, #1
    c8d8:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c8da:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8de:	4313      	orrs	r3, r2
    c8e0:	d1f2      	bne.n	c8c8 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c8e2:	9b03      	ldr	r3, [sp, #12]
}
    c8e4:	4618      	mov	r0, r3
    c8e6:	b005      	add	sp, #20
    c8e8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c8ec <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c8ec:	b530      	push	{r4, r5, lr}
    c8ee:	b083      	sub	sp, #12
    c8f0:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c8f4:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	da07      	bge.n	c90c <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c8fc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c900:	2100      	movs	r1, #0
    c902:	4254      	negs	r4, r2
    c904:	eb61 0503 	sbc.w	r5, r1, r3
    c908:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c90c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c910:	4610      	mov	r0, r2
    c912:	4619      	mov	r1, r3
    c914:	f7ff ffca 	bl	c8ac <ndigits_in_u64>
    c918:	4603      	mov	r3, r0
}
    c91a:	4618      	mov	r0, r3
    c91c:	b003      	add	sp, #12
    c91e:	bd30      	pop	{r4, r5, pc}

0000c920 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c920:	b084      	sub	sp, #16
    c922:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c926:	9a00      	ldr	r2, [sp, #0]
    c928:	9b01      	ldr	r3, [sp, #4]
    c92a:	4313      	orrs	r3, r2
    c92c:	2b00      	cmp	r3, #0
    c92e:	bf0c      	ite	eq
    c930:	2301      	moveq	r3, #1
    c932:	2300      	movne	r3, #0
    c934:	b2db      	uxtb	r3, r3
    c936:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c938:	e00e      	b.n	c958 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c93a:	e9dd 0100 	ldrd	r0, r1, [sp]
    c93e:	f04f 0200 	mov.w	r2, #0
    c942:	f04f 0300 	mov.w	r3, #0
    c946:	0902      	lsrs	r2, r0, #4
    c948:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c94c:	090b      	lsrs	r3, r1, #4
    c94e:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c952:	9b03      	ldr	r3, [sp, #12]
    c954:	3301      	adds	r3, #1
    c956:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c958:	e9dd 2300 	ldrd	r2, r3, [sp]
    c95c:	4313      	orrs	r3, r2
    c95e:	d1ec      	bne.n	c93a <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c960:	9b03      	ldr	r3, [sp, #12]
}
    c962:	4618      	mov	r0, r3
    c964:	b004      	add	sp, #16
    c966:	4770      	bx	lr

0000c968 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c968:	b086      	sub	sp, #24
    c96a:	9001      	str	r0, [sp, #4]
    c96c:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c96e:	2300      	movs	r3, #0
    c970:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c974:	2300      	movs	r3, #0
    c976:	9304      	str	r3, [sp, #16]
    c978:	2300      	movs	r3, #0
    c97a:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c97c:	9b01      	ldr	r3, [sp, #4]
    c97e:	781b      	ldrb	r3, [r3, #0]
    c980:	2b2d      	cmp	r3, #45	; 0x2d
    c982:	d11c      	bne.n	c9be <decstr_to_int+0x56>
    {
        bNeg = true;
    c984:	2301      	movs	r3, #1
    c986:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c98a:	9b01      	ldr	r3, [sp, #4]
    c98c:	3301      	adds	r3, #1
    c98e:	9301      	str	r3, [sp, #4]
        uCnt++;
    c990:	9b03      	ldr	r3, [sp, #12]
    c992:	3301      	adds	r3, #1
    c994:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c996:	e012      	b.n	c9be <decstr_to_int+0x56>
    {
        ++uCnt;
    c998:	9b03      	ldr	r3, [sp, #12]
    c99a:	3301      	adds	r3, #1
    c99c:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c99e:	9a04      	ldr	r2, [sp, #16]
    c9a0:	4613      	mov	r3, r2
    c9a2:	009b      	lsls	r3, r3, #2
    c9a4:	4413      	add	r3, r2
    c9a6:	005b      	lsls	r3, r3, #1
    c9a8:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c9aa:	9b01      	ldr	r3, [sp, #4]
    c9ac:	781b      	ldrb	r3, [r3, #0]
    c9ae:	461a      	mov	r2, r3
    c9b0:	9b04      	ldr	r3, [sp, #16]
    c9b2:	4413      	add	r3, r2
    c9b4:	3b30      	subs	r3, #48	; 0x30
    c9b6:	9304      	str	r3, [sp, #16]
        pcStr++;
    c9b8:	9b01      	ldr	r3, [sp, #4]
    c9ba:	3301      	adds	r3, #1
    c9bc:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9be:	9b01      	ldr	r3, [sp, #4]
    c9c0:	781b      	ldrb	r3, [r3, #0]
    c9c2:	2b2f      	cmp	r3, #47	; 0x2f
    c9c4:	d903      	bls.n	c9ce <decstr_to_int+0x66>
    c9c6:	9b01      	ldr	r3, [sp, #4]
    c9c8:	781b      	ldrb	r3, [r3, #0]
    c9ca:	2b39      	cmp	r3, #57	; 0x39
    c9cc:	d9e4      	bls.n	c998 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c9ce:	9b00      	ldr	r3, [sp, #0]
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d002      	beq.n	c9da <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c9d4:	9b00      	ldr	r3, [sp, #0]
    c9d6:	9a03      	ldr	r2, [sp, #12]
    c9d8:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c9da:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d002      	beq.n	c9e8 <decstr_to_int+0x80>
    c9e2:	9b04      	ldr	r3, [sp, #16]
    c9e4:	425b      	negs	r3, r3
    c9e6:	e000      	b.n	c9ea <decstr_to_int+0x82>
    c9e8:	9b04      	ldr	r3, [sp, #16]
}
    c9ea:	4618      	mov	r0, r3
    c9ec:	b006      	add	sp, #24
    c9ee:	4770      	bx	lr

0000c9f0 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c9f0:	b500      	push	{lr}
    c9f2:	b091      	sub	sp, #68	; 0x44
    c9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c9f8:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c9fa:	2300      	movs	r3, #0
    c9fc:	930f      	str	r3, [sp, #60]	; 0x3c
    c9fe:	2300      	movs	r3, #0
    ca00:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    ca02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ca06:	f7ff fe5d 	bl	c6c4 <divu64_10>
    ca0a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    ca0e:	9902      	ldr	r1, [sp, #8]
    ca10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca12:	4613      	mov	r3, r2
    ca14:	009b      	lsls	r3, r3, #2
    ca16:	4413      	add	r3, r2
    ca18:	005b      	lsls	r3, r3, #1
    ca1a:	1acb      	subs	r3, r1, r3
    ca1c:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    ca1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca20:	b2da      	uxtb	r2, r3
    ca22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca24:	1c59      	adds	r1, r3, #1
    ca26:	910f      	str	r1, [sp, #60]	; 0x3c
    ca28:	3230      	adds	r2, #48	; 0x30
    ca2a:	b2d2      	uxtb	r2, r2
    ca2c:	3340      	adds	r3, #64	; 0x40
    ca2e:	446b      	add	r3, sp
    ca30:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    ca34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ca38:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    ca3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca40:	4313      	orrs	r3, r2
    ca42:	d1de      	bne.n	ca02 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca46:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    ca48:	9b01      	ldr	r3, [sp, #4]
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d010      	beq.n	ca70 <uint64_to_str+0x80>
    {
        while ( ix-- )
    ca4e:	e007      	b.n	ca60 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    ca50:	9b01      	ldr	r3, [sp, #4]
    ca52:	1c5a      	adds	r2, r3, #1
    ca54:	9201      	str	r2, [sp, #4]
    ca56:	a904      	add	r1, sp, #16
    ca58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ca5a:	440a      	add	r2, r1
    ca5c:	7812      	ldrb	r2, [r2, #0]
    ca5e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ca60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca62:	1e5a      	subs	r2, r3, #1
    ca64:	920f      	str	r2, [sp, #60]	; 0x3c
    ca66:	2b00      	cmp	r3, #0
    ca68:	d1f2      	bne.n	ca50 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ca6a:	9b01      	ldr	r3, [sp, #4]
    ca6c:	2200      	movs	r2, #0
    ca6e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    ca72:	4618      	mov	r0, r3
    ca74:	b011      	add	sp, #68	; 0x44
    ca76:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca7a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ca7a:	b08c      	sub	sp, #48	; 0x30
    ca7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ca80:	9201      	str	r2, [sp, #4]
    ca82:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    ca86:	2300      	movs	r3, #0
    ca88:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    ca8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca8e:	4313      	orrs	r3, r2
    ca90:	d135      	bne.n	cafe <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    ca92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca94:	1c5a      	adds	r2, r3, #1
    ca96:	920b      	str	r2, [sp, #44]	; 0x2c
    ca98:	3330      	adds	r3, #48	; 0x30
    ca9a:	446b      	add	r3, sp
    ca9c:	2230      	movs	r2, #48	; 0x30
    ca9e:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    caa2:	e02c      	b.n	cafe <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    caa4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    caa8:	f003 030f 	and.w	r3, r3, #15
    caac:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cab0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cab4:	2b09      	cmp	r3, #9
    cab6:	d90b      	bls.n	cad0 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cab8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cabc:	2b00      	cmp	r3, #0
    cabe:	d001      	beq.n	cac4 <uint64_to_hexstr+0x4a>
    cac0:	2227      	movs	r2, #39	; 0x27
    cac2:	e000      	b.n	cac6 <uint64_to_hexstr+0x4c>
    cac4:	2207      	movs	r2, #7
    cac6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    caca:	4413      	add	r3, r2
    cacc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cad2:	1c5a      	adds	r2, r3, #1
    cad4:	920b      	str	r2, [sp, #44]	; 0x2c
    cad6:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    cada:	3230      	adds	r2, #48	; 0x30
    cadc:	b2d2      	uxtb	r2, r2
    cade:	3330      	adds	r3, #48	; 0x30
    cae0:	446b      	add	r3, sp
    cae2:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    caea:	f04f 0200 	mov.w	r2, #0
    caee:	f04f 0300 	mov.w	r3, #0
    caf2:	0902      	lsrs	r2, r0, #4
    caf4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    caf8:	090b      	lsrs	r3, r1, #4
    cafa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    cafe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb02:	4313      	orrs	r3, r2
    cb04:	d1ce      	bne.n	caa4 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cb06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb08:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cb0a:	9b01      	ldr	r3, [sp, #4]
    cb0c:	2b00      	cmp	r3, #0
    cb0e:	d010      	beq.n	cb32 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cb10:	e007      	b.n	cb22 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cb12:	9b01      	ldr	r3, [sp, #4]
    cb14:	1c5a      	adds	r2, r3, #1
    cb16:	9201      	str	r2, [sp, #4]
    cb18:	a904      	add	r1, sp, #16
    cb1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cb1c:	440a      	add	r2, r1
    cb1e:	7812      	ldrb	r2, [r2, #0]
    cb20:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb24:	1e5a      	subs	r2, r3, #1
    cb26:	920b      	str	r2, [sp, #44]	; 0x2c
    cb28:	2b00      	cmp	r3, #0
    cb2a:	d1f2      	bne.n	cb12 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cb2c:	9b01      	ldr	r3, [sp, #4]
    cb2e:	2200      	movs	r2, #0
    cb30:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cb32:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cb34:	4618      	mov	r0, r3
    cb36:	b00c      	add	sp, #48	; 0x30
    cb38:	4770      	bx	lr

0000cb3a <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cb3a:	b084      	sub	sp, #16
    cb3c:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    cb3e:	2300      	movs	r3, #0
    cb40:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    cb42:	9b01      	ldr	r3, [sp, #4]
    cb44:	2b00      	cmp	r3, #0
    cb46:	d104      	bne.n	cb52 <simple_strlen+0x18>
    {
        return ui32RetVal;
    cb48:	9b03      	ldr	r3, [sp, #12]
    cb4a:	e009      	b.n	cb60 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cb4c:	9b03      	ldr	r3, [sp, #12]
    cb4e:	3301      	adds	r3, #1
    cb50:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    cb52:	9b01      	ldr	r3, [sp, #4]
    cb54:	1c5a      	adds	r2, r3, #1
    cb56:	9201      	str	r2, [sp, #4]
    cb58:	781b      	ldrb	r3, [r3, #0]
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d1f6      	bne.n	cb4c <simple_strlen+0x12>
    }
    return ui32RetVal;
    cb5e:	9b03      	ldr	r3, [sp, #12]
}
    cb60:	4618      	mov	r0, r3
    cb62:	b004      	add	sp, #16
    cb64:	4770      	bx	lr

0000cb66 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cb66:	b086      	sub	sp, #24
    cb68:	9003      	str	r0, [sp, #12]
    cb6a:	460b      	mov	r3, r1
    cb6c:	9201      	str	r2, [sp, #4]
    cb6e:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cb72:	2300      	movs	r3, #0
    cb74:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cb76:	9b01      	ldr	r3, [sp, #4]
    cb78:	2b00      	cmp	r3, #0
    cb7a:	dc0d      	bgt.n	cb98 <padbuffer+0x32>
    {
        return i32Cnt;
    cb7c:	9b05      	ldr	r3, [sp, #20]
    cb7e:	e011      	b.n	cba4 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cb80:	9b03      	ldr	r3, [sp, #12]
    cb82:	2b00      	cmp	r3, #0
    cb84:	d005      	beq.n	cb92 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cb86:	9b03      	ldr	r3, [sp, #12]
    cb88:	1c5a      	adds	r2, r3, #1
    cb8a:	9203      	str	r2, [sp, #12]
    cb8c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb90:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cb92:	9b05      	ldr	r3, [sp, #20]
    cb94:	3301      	adds	r3, #1
    cb96:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cb98:	9b01      	ldr	r3, [sp, #4]
    cb9a:	1e5a      	subs	r2, r3, #1
    cb9c:	9201      	str	r2, [sp, #4]
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d1ee      	bne.n	cb80 <padbuffer+0x1a>
    }

    return i32Cnt;
    cba2:	9b05      	ldr	r3, [sp, #20]
}
    cba4:	4618      	mov	r0, r3
    cba6:	b006      	add	sp, #24
    cba8:	4770      	bx	lr
	...

0000cbac <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cbac:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbae:	b08f      	sub	sp, #60	; 0x3c
    cbb0:	ed8d 0a03 	vstr	s0, [sp, #12]
    cbb4:	9002      	str	r0, [sp, #8]
    cbb6:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cbb8:	9b02      	ldr	r3, [sp, #8]
    cbba:	681b      	ldr	r3, [r3, #0]
    cbbc:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbc0:	2b03      	cmp	r3, #3
    cbc2:	dc02      	bgt.n	cbca <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cbc4:	f06f 0302 	mvn.w	r3, #2
    cbc8:	e0e9      	b.n	cd9e <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cbca:	eddd 7a03 	vldr	s15, [sp, #12]
    cbce:	eef5 7a40 	vcmp.f32	s15, #0.0
    cbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cbd6:	d104      	bne.n	cbe2 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cbd8:	9b02      	ldr	r3, [sp, #8]
    cbda:	4a72      	ldr	r2, [pc, #456]	; (cda4 <ftoa+0x1f8>)
    cbdc:	601a      	str	r2, [r3, #0]
        return 3;
    cbde:	2303      	movs	r3, #3
    cbe0:	e0dd      	b.n	cd9e <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cbe2:	9b02      	ldr	r3, [sp, #8]
    cbe4:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cbe6:	9b03      	ldr	r3, [sp, #12]
    cbe8:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cbea:	9b04      	ldr	r3, [sp, #16]
    cbec:	15db      	asrs	r3, r3, #23
    cbee:	b2db      	uxtb	r3, r3
    cbf0:	3b7f      	subs	r3, #127	; 0x7f
    cbf2:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cbf4:	9b04      	ldr	r3, [sp, #16]
    cbf6:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cbfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cbfe:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cc00:	2300      	movs	r3, #0
    cc02:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cc04:	2300      	movs	r3, #0
    cc06:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cc08:	9b07      	ldr	r3, [sp, #28]
    cc0a:	2b1e      	cmp	r3, #30
    cc0c:	dd02      	ble.n	cc14 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cc0e:	f06f 0301 	mvn.w	r3, #1
    cc12:	e0c4      	b.n	cd9e <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cc14:	9b07      	ldr	r3, [sp, #28]
    cc16:	f113 0f17 	cmn.w	r3, #23
    cc1a:	da02      	bge.n	cc22 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cc1c:	f04f 33ff 	mov.w	r3, #4294967295
    cc20:	e0bd      	b.n	cd9e <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cc22:	9b07      	ldr	r3, [sp, #28]
    cc24:	2b16      	cmp	r3, #22
    cc26:	dd06      	ble.n	cc36 <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cc28:	9b07      	ldr	r3, [sp, #28]
    cc2a:	3b17      	subs	r3, #23
    cc2c:	9a06      	ldr	r2, [sp, #24]
    cc2e:	fa02 f303 	lsl.w	r3, r2, r3
    cc32:	930d      	str	r3, [sp, #52]	; 0x34
    cc34:	e01a      	b.n	cc6c <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cc36:	9b07      	ldr	r3, [sp, #28]
    cc38:	2b00      	cmp	r3, #0
    cc3a:	db0f      	blt.n	cc5c <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cc3c:	9b07      	ldr	r3, [sp, #28]
    cc3e:	f1c3 0317 	rsb	r3, r3, #23
    cc42:	9a06      	ldr	r2, [sp, #24]
    cc44:	fa42 f303 	asr.w	r3, r2, r3
    cc48:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cc4a:	9b07      	ldr	r3, [sp, #28]
    cc4c:	3301      	adds	r3, #1
    cc4e:	9a06      	ldr	r2, [sp, #24]
    cc50:	fa02 f303 	lsl.w	r3, r2, r3
    cc54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc58:	930c      	str	r3, [sp, #48]	; 0x30
    cc5a:	e007      	b.n	cc6c <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc5c:	9b06      	ldr	r3, [sp, #24]
    cc5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cc62:	9b07      	ldr	r3, [sp, #28]
    cc64:	43db      	mvns	r3, r3
    cc66:	fa42 f303 	asr.w	r3, r2, r3
    cc6a:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cc6c:	9b04      	ldr	r3, [sp, #16]
    cc6e:	2b00      	cmp	r3, #0
    cc70:	da04      	bge.n	cc7c <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cc72:	9b02      	ldr	r3, [sp, #8]
    cc74:	1c5a      	adds	r2, r3, #1
    cc76:	9202      	str	r2, [sp, #8]
    cc78:	222d      	movs	r2, #45	; 0x2d
    cc7a:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cc7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc7e:	2b00      	cmp	r3, #0
    cc80:	d105      	bne.n	cc8e <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cc82:	9b02      	ldr	r3, [sp, #8]
    cc84:	1c5a      	adds	r2, r3, #1
    cc86:	9202      	str	r2, [sp, #8]
    cc88:	2230      	movs	r2, #48	; 0x30
    cc8a:	701a      	strb	r2, [r3, #0]
    cc8c:	e023      	b.n	ccd6 <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cc8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc90:	2b00      	cmp	r3, #0
    cc92:	dd09      	ble.n	cca8 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cc94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc96:	17da      	asrs	r2, r3, #31
    cc98:	461e      	mov	r6, r3
    cc9a:	4617      	mov	r7, r2
    cc9c:	9a02      	ldr	r2, [sp, #8]
    cc9e:	4630      	mov	r0, r6
    cca0:	4639      	mov	r1, r7
    cca2:	f7ff fea5 	bl	c9f0 <uint64_to_str>
    cca6:	e012      	b.n	ccce <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cca8:	9b02      	ldr	r3, [sp, #8]
    ccaa:	1c5a      	adds	r2, r3, #1
    ccac:	9202      	str	r2, [sp, #8]
    ccae:	222d      	movs	r2, #45	; 0x2d
    ccb0:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ccb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccb4:	425b      	negs	r3, r3
    ccb6:	17da      	asrs	r2, r3, #31
    ccb8:	461c      	mov	r4, r3
    ccba:	4615      	mov	r5, r2
    ccbc:	9a02      	ldr	r2, [sp, #8]
    ccbe:	4620      	mov	r0, r4
    ccc0:	4629      	mov	r1, r5
    ccc2:	f7ff fe95 	bl	c9f0 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ccc6:	e002      	b.n	ccce <ftoa+0x122>
        {
            pcBuf++;
    ccc8:	9b02      	ldr	r3, [sp, #8]
    ccca:	3301      	adds	r3, #1
    cccc:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    ccce:	9b02      	ldr	r3, [sp, #8]
    ccd0:	781b      	ldrb	r3, [r3, #0]
    ccd2:	2b00      	cmp	r3, #0
    ccd4:	d1f8      	bne.n	ccc8 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ccd6:	9b02      	ldr	r3, [sp, #8]
    ccd8:	1c5a      	adds	r2, r3, #1
    ccda:	9202      	str	r2, [sp, #8]
    ccdc:	222e      	movs	r2, #46	; 0x2e
    ccde:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cce2:	2b00      	cmp	r3, #0
    cce4:	d105      	bne.n	ccf2 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cce6:	9b02      	ldr	r3, [sp, #8]
    cce8:	1c5a      	adds	r2, r3, #1
    ccea:	9202      	str	r2, [sp, #8]
    ccec:	2230      	movs	r2, #48	; 0x30
    ccee:	701a      	strb	r2, [r3, #0]
    ccf0:	e04f      	b.n	cd92 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ccf2:	9a02      	ldr	r2, [sp, #8]
    ccf4:	9b08      	ldr	r3, [sp, #32]
    ccf6:	1ad3      	subs	r3, r2, r3
    ccf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ccfa:	1ad3      	subs	r3, r2, r3
    ccfc:	3b01      	subs	r3, #1
    ccfe:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cd00:	9a05      	ldr	r2, [sp, #20]
    cd02:	9b01      	ldr	r3, [sp, #4]
    cd04:	4293      	cmp	r3, r2
    cd06:	bfa8      	it	ge
    cd08:	4613      	movge	r3, r2
    cd0a:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cd0c:	2300      	movs	r3, #0
    cd0e:	930a      	str	r3, [sp, #40]	; 0x28
    cd10:	e015      	b.n	cd3e <ftoa+0x192>
        {
            i32FracPart *= 10;
    cd12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd14:	4613      	mov	r3, r2
    cd16:	009b      	lsls	r3, r3, #2
    cd18:	4413      	add	r3, r2
    cd1a:	005b      	lsls	r3, r3, #1
    cd1c:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cd1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd20:	161b      	asrs	r3, r3, #24
    cd22:	b2da      	uxtb	r2, r3
    cd24:	9b02      	ldr	r3, [sp, #8]
    cd26:	1c59      	adds	r1, r3, #1
    cd28:	9102      	str	r1, [sp, #8]
    cd2a:	3230      	adds	r2, #48	; 0x30
    cd2c:	b2d2      	uxtb	r2, r2
    cd2e:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cd30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd36:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cd38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd3a:	3301      	adds	r3, #1
    cd3c:	930a      	str	r3, [sp, #40]	; 0x28
    cd3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cd40:	9b05      	ldr	r3, [sp, #20]
    cd42:	429a      	cmp	r2, r3
    cd44:	dbe5      	blt.n	cd12 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cd46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd48:	4613      	mov	r3, r2
    cd4a:	009b      	lsls	r3, r3, #2
    cd4c:	4413      	add	r3, r2
    cd4e:	005b      	lsls	r3, r3, #1
    cd50:	161b      	asrs	r3, r3, #24
    cd52:	2b04      	cmp	r3, #4
    cd54:	dd1d      	ble.n	cd92 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cd56:	9b02      	ldr	r3, [sp, #8]
    cd58:	3b01      	subs	r3, #1
    cd5a:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd5c:	e015      	b.n	cd8a <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cd5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd60:	781b      	ldrb	r3, [r3, #0]
    cd62:	2b2e      	cmp	r3, #46	; 0x2e
    cd64:	d00e      	beq.n	cd84 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd68:	781b      	ldrb	r3, [r3, #0]
    cd6a:	2b39      	cmp	r3, #57	; 0x39
    cd6c:	d103      	bne.n	cd76 <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd70:	2230      	movs	r2, #48	; 0x30
    cd72:	701a      	strb	r2, [r3, #0]
    cd74:	e006      	b.n	cd84 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cd76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd78:	781b      	ldrb	r3, [r3, #0]
    cd7a:	3301      	adds	r3, #1
    cd7c:	b2da      	uxtb	r2, r3
    cd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd80:	701a      	strb	r2, [r3, #0]
                    break;
    cd82:	e006      	b.n	cd92 <ftoa+0x1e6>
                }
                pcBuftmp--;
    cd84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd86:	3b01      	subs	r3, #1
    cd88:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd8c:	9b08      	ldr	r3, [sp, #32]
    cd8e:	429a      	cmp	r2, r3
    cd90:	d2e5      	bcs.n	cd5e <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cd92:	9b02      	ldr	r3, [sp, #8]
    cd94:	2200      	movs	r2, #0
    cd96:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cd98:	9a02      	ldr	r2, [sp, #8]
    cd9a:	9b08      	ldr	r3, [sp, #32]
    cd9c:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cd9e:	4618      	mov	r0, r3
    cda0:	b00f      	add	sp, #60	; 0x3c
    cda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cda4:	00302e30 	.word	0x00302e30

0000cda8 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdac:	b097      	sub	sp, #92	; 0x5c
    cdae:	9003      	str	r0, [sp, #12]
    cdb0:	9102      	str	r1, [sp, #8]
    cdb2:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cdb4:	2300      	movs	r3, #0
    cdb6:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cdb8:	2300      	movs	r3, #0
    cdba:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cdbc:	e2e9      	b.n	d392 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cdbe:	2306      	movs	r3, #6
    cdc0:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cdc2:	9b02      	ldr	r3, [sp, #8]
    cdc4:	781b      	ldrb	r3, [r3, #0]
    cdc6:	2b25      	cmp	r3, #37	; 0x25
    cdc8:	d01f      	beq.n	ce0a <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cdca:	9b03      	ldr	r3, [sp, #12]
    cdcc:	2b00      	cmp	r3, #0
    cdce:	d015      	beq.n	cdfc <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cdd0:	9b02      	ldr	r3, [sp, #8]
    cdd2:	781b      	ldrb	r3, [r3, #0]
    cdd4:	2b0a      	cmp	r3, #10
    cdd6:	d10b      	bne.n	cdf0 <am_util_stdio_vsprintf+0x48>
    cdd8:	4ba8      	ldr	r3, [pc, #672]	; (d07c <am_util_stdio_vsprintf+0x2d4>)
    cdda:	781b      	ldrb	r3, [r3, #0]
    cddc:	2b00      	cmp	r3, #0
    cdde:	d007      	beq.n	cdf0 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cde0:	9b03      	ldr	r3, [sp, #12]
    cde2:	1c5a      	adds	r2, r3, #1
    cde4:	9203      	str	r2, [sp, #12]
    cde6:	220d      	movs	r2, #13
    cde8:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cdea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cdec:	3301      	adds	r3, #1
    cdee:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cdf0:	9b03      	ldr	r3, [sp, #12]
    cdf2:	1c5a      	adds	r2, r3, #1
    cdf4:	9203      	str	r2, [sp, #12]
    cdf6:	9a02      	ldr	r2, [sp, #8]
    cdf8:	7812      	ldrb	r2, [r2, #0]
    cdfa:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cdfc:	9b02      	ldr	r3, [sp, #8]
    cdfe:	3301      	adds	r3, #1
    ce00:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    ce02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce04:	3301      	adds	r3, #1
    ce06:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    ce08:	e2c3      	b.n	d392 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    ce0a:	9b02      	ldr	r3, [sp, #8]
    ce0c:	3301      	adds	r3, #1
    ce0e:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    ce10:	2300      	movs	r3, #0
    ce12:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    ce16:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce1a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    ce1e:	2320      	movs	r3, #32
    ce20:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    ce24:	9b02      	ldr	r3, [sp, #8]
    ce26:	781b      	ldrb	r3, [r3, #0]
    ce28:	2b30      	cmp	r3, #48	; 0x30
    ce2a:	d105      	bne.n	ce38 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    ce2c:	2330      	movs	r3, #48	; 0x30
    ce2e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    ce32:	9b02      	ldr	r3, [sp, #8]
    ce34:	3301      	adds	r3, #1
    ce36:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ce38:	ab05      	add	r3, sp, #20
    ce3a:	4619      	mov	r1, r3
    ce3c:	9802      	ldr	r0, [sp, #8]
    ce3e:	f7ff fd93 	bl	c968 <decstr_to_int>
    ce42:	4603      	mov	r3, r0
    ce44:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    ce46:	9b05      	ldr	r3, [sp, #20]
    ce48:	9a02      	ldr	r2, [sp, #8]
    ce4a:	4413      	add	r3, r2
    ce4c:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ce4e:	9b02      	ldr	r3, [sp, #8]
    ce50:	781b      	ldrb	r3, [r3, #0]
    ce52:	2b73      	cmp	r3, #115	; 0x73
    ce54:	d005      	beq.n	ce62 <am_util_stdio_vsprintf+0xba>
    ce56:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce58:	2b00      	cmp	r3, #0
    ce5a:	da02      	bge.n	ce62 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    ce5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce5e:	425b      	negs	r3, r3
    ce60:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ce62:	9b02      	ldr	r3, [sp, #8]
    ce64:	781b      	ldrb	r3, [r3, #0]
    ce66:	2b2e      	cmp	r3, #46	; 0x2e
    ce68:	d10d      	bne.n	ce86 <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    ce6a:	9b02      	ldr	r3, [sp, #8]
    ce6c:	3301      	adds	r3, #1
    ce6e:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ce70:	ab05      	add	r3, sp, #20
    ce72:	4619      	mov	r1, r3
    ce74:	9802      	ldr	r0, [sp, #8]
    ce76:	f7ff fd77 	bl	c968 <decstr_to_int>
    ce7a:	4603      	mov	r3, r0
    ce7c:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    ce7e:	9b05      	ldr	r3, [sp, #20]
    ce80:	9a02      	ldr	r2, [sp, #8]
    ce82:	4413      	add	r3, r2
    ce84:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ce86:	9b02      	ldr	r3, [sp, #8]
    ce88:	781b      	ldrb	r3, [r3, #0]
    ce8a:	2b6c      	cmp	r3, #108	; 0x6c
    ce8c:	d10c      	bne.n	cea8 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    ce8e:	9b02      	ldr	r3, [sp, #8]
    ce90:	3301      	adds	r3, #1
    ce92:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ce94:	9b02      	ldr	r3, [sp, #8]
    ce96:	781b      	ldrb	r3, [r3, #0]
    ce98:	2b6c      	cmp	r3, #108	; 0x6c
    ce9a:	d105      	bne.n	cea8 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    ce9c:	9b02      	ldr	r3, [sp, #8]
    ce9e:	3301      	adds	r3, #1
    cea0:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cea2:	2301      	movs	r3, #1
    cea4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cea8:	9b02      	ldr	r3, [sp, #8]
    ceaa:	781b      	ldrb	r3, [r3, #0]
    ceac:	3b46      	subs	r3, #70	; 0x46
    ceae:	2b32      	cmp	r3, #50	; 0x32
    ceb0:	f200 825c 	bhi.w	d36c <am_util_stdio_vsprintf+0x5c4>
    ceb4:	a201      	add	r2, pc, #4	; (adr r2, cebc <am_util_stdio_vsprintf+0x114>)
    ceb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ceba:	bf00      	nop
    cebc:	0000d2f3 	.word	0x0000d2f3
    cec0:	0000d36d 	.word	0x0000d36d
    cec4:	0000d36d 	.word	0x0000d36d
    cec8:	0000d36d 	.word	0x0000d36d
    cecc:	0000d36d 	.word	0x0000d36d
    ced0:	0000d36d 	.word	0x0000d36d
    ced4:	0000d36d 	.word	0x0000d36d
    ced8:	0000d36d 	.word	0x0000d36d
    cedc:	0000d36d 	.word	0x0000d36d
    cee0:	0000d36d 	.word	0x0000d36d
    cee4:	0000d36d 	.word	0x0000d36d
    cee8:	0000d36d 	.word	0x0000d36d
    ceec:	0000d36d 	.word	0x0000d36d
    cef0:	0000d36d 	.word	0x0000d36d
    cef4:	0000d36d 	.word	0x0000d36d
    cef8:	0000d36d 	.word	0x0000d36d
    cefc:	0000d36d 	.word	0x0000d36d
    cf00:	0000d36d 	.word	0x0000d36d
    cf04:	0000d087 	.word	0x0000d087
    cf08:	0000d36d 	.word	0x0000d36d
    cf0c:	0000d36d 	.word	0x0000d36d
    cf10:	0000d36d 	.word	0x0000d36d
    cf14:	0000d36d 	.word	0x0000d36d
    cf18:	0000d36d 	.word	0x0000d36d
    cf1c:	0000d36d 	.word	0x0000d36d
    cf20:	0000d36d 	.word	0x0000d36d
    cf24:	0000d36d 	.word	0x0000d36d
    cf28:	0000d36d 	.word	0x0000d36d
    cf2c:	0000d36d 	.word	0x0000d36d
    cf30:	0000cf89 	.word	0x0000cf89
    cf34:	0000d1b7 	.word	0x0000d1b7
    cf38:	0000d36d 	.word	0x0000d36d
    cf3c:	0000d2f3 	.word	0x0000d2f3
    cf40:	0000d36d 	.word	0x0000d36d
    cf44:	0000d36d 	.word	0x0000d36d
    cf48:	0000d1b7 	.word	0x0000d1b7
    cf4c:	0000d36d 	.word	0x0000d36d
    cf50:	0000d36d 	.word	0x0000d36d
    cf54:	0000d36d 	.word	0x0000d36d
    cf58:	0000d36d 	.word	0x0000d36d
    cf5c:	0000d36d 	.word	0x0000d36d
    cf60:	0000d36d 	.word	0x0000d36d
    cf64:	0000d36d 	.word	0x0000d36d
    cf68:	0000d36d 	.word	0x0000d36d
    cf6c:	0000d36d 	.word	0x0000d36d
    cf70:	0000cfaf 	.word	0x0000cfaf
    cf74:	0000d36d 	.word	0x0000d36d
    cf78:	0000d121 	.word	0x0000d121
    cf7c:	0000d36d 	.word	0x0000d36d
    cf80:	0000d36d 	.word	0x0000d36d
    cf84:	0000d081 	.word	0x0000d081
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cf88:	9b01      	ldr	r3, [sp, #4]
    cf8a:	1d1a      	adds	r2, r3, #4
    cf8c:	9201      	str	r2, [sp, #4]
    cf8e:	681b      	ldr	r3, [r3, #0]
    cf90:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cf94:	9b03      	ldr	r3, [sp, #12]
    cf96:	2b00      	cmp	r3, #0
    cf98:	d005      	beq.n	cfa6 <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cf9a:	9b03      	ldr	r3, [sp, #12]
    cf9c:	1c5a      	adds	r2, r3, #1
    cf9e:	9203      	str	r2, [sp, #12]
    cfa0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cfa4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cfa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cfa8:	3301      	adds	r3, #1
    cfaa:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cfac:	e1ee      	b.n	d38c <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cfae:	9b01      	ldr	r3, [sp, #4]
    cfb0:	1d1a      	adds	r2, r3, #4
    cfb2:	9201      	str	r2, [sp, #4]
    cfb4:	681b      	ldr	r3, [r3, #0]
    cfb6:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cfb8:	9815      	ldr	r0, [sp, #84]	; 0x54
    cfba:	f7ff fdbe 	bl	cb3a <simple_strlen>
    cfbe:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cfc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfc2:	2b00      	cmp	r3, #0
    cfc4:	dd2e      	ble.n	d024 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cfc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cfca:	429a      	cmp	r2, r3
    cfcc:	d22a      	bcs.n	d024 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cfce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfd2:	1ad3      	subs	r3, r2, r3
    cfd4:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfd6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfda:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfdc:	4619      	mov	r1, r3
    cfde:	9803      	ldr	r0, [sp, #12]
    cfe0:	f7ff fdc1 	bl	cb66 <padbuffer>
    cfe4:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cfe6:	9b03      	ldr	r3, [sp, #12]
    cfe8:	2b00      	cmp	r3, #0
    cfea:	d001      	beq.n	cff0 <am_util_stdio_vsprintf+0x248>
    cfec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfee:	e000      	b.n	cff2 <am_util_stdio_vsprintf+0x24a>
    cff0:	2300      	movs	r3, #0
    cff2:	9a03      	ldr	r2, [sp, #12]
    cff4:	4413      	add	r3, r2
    cff6:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cff8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cffa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cffc:	4413      	add	r3, r2
    cffe:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d000:	2300      	movs	r3, #0
    d002:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d004:	e00e      	b.n	d024 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d006:	9b03      	ldr	r3, [sp, #12]
    d008:	2b00      	cmp	r3, #0
    d00a:	d005      	beq.n	d018 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d00c:	9b03      	ldr	r3, [sp, #12]
    d00e:	1c5a      	adds	r2, r3, #1
    d010:	9203      	str	r2, [sp, #12]
    d012:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d014:	7812      	ldrb	r2, [r2, #0]
    d016:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d018:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d01a:	3301      	adds	r3, #1
    d01c:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d01e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d020:	3301      	adds	r3, #1
    d022:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d024:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d026:	781b      	ldrb	r3, [r3, #0]
    d028:	2b00      	cmp	r3, #0
    d02a:	d1ec      	bne.n	d006 <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d02e:	2b00      	cmp	r3, #0
    d030:	f000 81a9 	beq.w	d386 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d034:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d036:	425b      	negs	r3, r3
    d038:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d03a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d03c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d03e:	429a      	cmp	r2, r3
    d040:	f080 81a1 	bcs.w	d386 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d044:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d048:	1ad3      	subs	r3, r2, r3
    d04a:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d04c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d050:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d052:	4619      	mov	r1, r3
    d054:	9803      	ldr	r0, [sp, #12]
    d056:	f7ff fd86 	bl	cb66 <padbuffer>
    d05a:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d05c:	9b03      	ldr	r3, [sp, #12]
    d05e:	2b00      	cmp	r3, #0
    d060:	d001      	beq.n	d066 <am_util_stdio_vsprintf+0x2be>
    d062:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d064:	e000      	b.n	d068 <am_util_stdio_vsprintf+0x2c0>
    d066:	2300      	movs	r3, #0
    d068:	9a03      	ldr	r2, [sp, #12]
    d06a:	4413      	add	r3, r2
    d06c:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d06e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d070:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d072:	4413      	add	r3, r2
    d074:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d076:	2300      	movs	r3, #0
    d078:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d07a:	e184      	b.n	d386 <am_util_stdio_vsprintf+0x5de>
    d07c:	1000116c 	.word	0x1000116c

            case 'x':
                bLower = true;
    d080:	2301      	movs	r3, #1
    d082:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d086:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d08a:	2b00      	cmp	r3, #0
    d08c:	d009      	beq.n	d0a2 <am_util_stdio_vsprintf+0x2fa>
    d08e:	9b01      	ldr	r3, [sp, #4]
    d090:	3307      	adds	r3, #7
    d092:	f023 0307 	bic.w	r3, r3, #7
    d096:	f103 0208 	add.w	r2, r3, #8
    d09a:	9201      	str	r2, [sp, #4]
    d09c:	e9d3 4500 	ldrd	r4, r5, [r3]
    d0a0:	e006      	b.n	d0b0 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d0a2:	9b01      	ldr	r3, [sp, #4]
    d0a4:	1d1a      	adds	r2, r3, #4
    d0a6:	9201      	str	r2, [sp, #4]
    d0a8:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0aa:	2200      	movs	r2, #0
    d0ac:	461c      	mov	r4, r3
    d0ae:	4615      	mov	r5, r2
    d0b0:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d01e      	beq.n	d0f8 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d0ba:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0be:	f7ff fc2f 	bl	c920 <ndigits_in_hex>
    d0c2:	4602      	mov	r2, r0
    d0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0c6:	1a9b      	subs	r3, r3, r2
    d0c8:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0ca:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d0ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d0d0:	4619      	mov	r1, r3
    d0d2:	9803      	ldr	r0, [sp, #12]
    d0d4:	f7ff fd47 	bl	cb66 <padbuffer>
    d0d8:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d0da:	9b03      	ldr	r3, [sp, #12]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d001      	beq.n	d0e4 <am_util_stdio_vsprintf+0x33c>
    d0e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0e2:	e000      	b.n	d0e6 <am_util_stdio_vsprintf+0x33e>
    d0e4:	2300      	movs	r3, #0
    d0e6:	9a03      	ldr	r2, [sp, #12]
    d0e8:	4413      	add	r3, r2
    d0ea:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d0ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0f0:	4413      	add	r3, r2
    d0f2:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d0f4:	2300      	movs	r3, #0
    d0f6:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d0f8:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d0fc:	9a03      	ldr	r2, [sp, #12]
    d0fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d102:	f7ff fcba 	bl	ca7a <uint64_to_hexstr>
    d106:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d108:	9b03      	ldr	r3, [sp, #12]
    d10a:	2b00      	cmp	r3, #0
    d10c:	d003      	beq.n	d116 <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d10e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d110:	9a03      	ldr	r2, [sp, #12]
    d112:	4413      	add	r3, r2
    d114:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d118:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d11a:	4413      	add	r3, r2
    d11c:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d11e:	e135      	b.n	d38c <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d120:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d124:	2b00      	cmp	r3, #0
    d126:	d009      	beq.n	d13c <am_util_stdio_vsprintf+0x394>
    d128:	9b01      	ldr	r3, [sp, #4]
    d12a:	3307      	adds	r3, #7
    d12c:	f023 0307 	bic.w	r3, r3, #7
    d130:	f103 0208 	add.w	r2, r3, #8
    d134:	9201      	str	r2, [sp, #4]
    d136:	e9d3 6700 	ldrd	r6, r7, [r3]
    d13a:	e006      	b.n	d14a <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d13c:	9b01      	ldr	r3, [sp, #4]
    d13e:	1d1a      	adds	r2, r3, #4
    d140:	9201      	str	r2, [sp, #4]
    d142:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d144:	2200      	movs	r2, #0
    d146:	461e      	mov	r6, r3
    d148:	4617      	mov	r7, r2
    d14a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d14e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d150:	2b00      	cmp	r3, #0
    d152:	d01e      	beq.n	d192 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d154:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d158:	f7ff fba8 	bl	c8ac <ndigits_in_u64>
    d15c:	4602      	mov	r2, r0
    d15e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d160:	1a9b      	subs	r3, r3, r2
    d162:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d164:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d168:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d16a:	4619      	mov	r1, r3
    d16c:	9803      	ldr	r0, [sp, #12]
    d16e:	f7ff fcfa 	bl	cb66 <padbuffer>
    d172:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d174:	9b03      	ldr	r3, [sp, #12]
    d176:	2b00      	cmp	r3, #0
    d178:	d001      	beq.n	d17e <am_util_stdio_vsprintf+0x3d6>
    d17a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d17c:	e000      	b.n	d180 <am_util_stdio_vsprintf+0x3d8>
    d17e:	2300      	movs	r3, #0
    d180:	9a03      	ldr	r2, [sp, #12]
    d182:	4413      	add	r3, r2
    d184:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d186:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d188:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d18a:	4413      	add	r3, r2
    d18c:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d18e:	2300      	movs	r3, #0
    d190:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d192:	9a03      	ldr	r2, [sp, #12]
    d194:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d198:	f7ff fc2a 	bl	c9f0 <uint64_to_str>
    d19c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d19e:	9b03      	ldr	r3, [sp, #12]
    d1a0:	2b00      	cmp	r3, #0
    d1a2:	d003      	beq.n	d1ac <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1a6:	9a03      	ldr	r2, [sp, #12]
    d1a8:	4413      	add	r3, r2
    d1aa:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d1ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1b0:	4413      	add	r3, r2
    d1b2:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d1b4:	e0ea      	b.n	d38c <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1b6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	d009      	beq.n	d1d2 <am_util_stdio_vsprintf+0x42a>
    d1be:	9b01      	ldr	r3, [sp, #4]
    d1c0:	3307      	adds	r3, #7
    d1c2:	f023 0307 	bic.w	r3, r3, #7
    d1c6:	f103 0208 	add.w	r2, r3, #8
    d1ca:	9201      	str	r2, [sp, #4]
    d1cc:	e9d3 8900 	ldrd	r8, r9, [r3]
    d1d0:	e006      	b.n	d1e0 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d1d2:	9b01      	ldr	r3, [sp, #4]
    d1d4:	1d1a      	adds	r2, r3, #4
    d1d6:	9201      	str	r2, [sp, #4]
    d1d8:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1da:	17da      	asrs	r2, r3, #31
    d1dc:	4698      	mov	r8, r3
    d1de:	4691      	mov	r9, r2
    d1e0:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d1e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d1e8:	2b00      	cmp	r3, #0
    d1ea:	da0c      	bge.n	d206 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d1ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d1f0:	2100      	movs	r1, #0
    d1f2:	f1d2 0a00 	rsbs	sl, r2, #0
    d1f6:	eb61 0b03 	sbc.w	fp, r1, r3
    d1fa:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d1fe:	2301      	movs	r3, #1
    d200:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d204:	e006      	b.n	d214 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d206:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d20a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d20e:	2300      	movs	r3, #0
    d210:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d214:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d216:	2b00      	cmp	r3, #0
    d218:	d04a      	beq.n	d2b0 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d21a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d21e:	4610      	mov	r0, r2
    d220:	4619      	mov	r1, r3
    d222:	f7ff fb63 	bl	c8ec <ndigits_in_i64>
    d226:	4602      	mov	r2, r0
    d228:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d22a:	1a9b      	subs	r3, r3, r2
    d22c:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d22e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d232:	2b00      	cmp	r3, #0
    d234:	d011      	beq.n	d25a <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d236:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d238:	3b01      	subs	r3, #1
    d23a:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d23c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d240:	2b30      	cmp	r3, #48	; 0x30
    d242:	d10a      	bne.n	d25a <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d244:	9b03      	ldr	r3, [sp, #12]
    d246:	2b00      	cmp	r3, #0
    d248:	d004      	beq.n	d254 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d24a:	9b03      	ldr	r3, [sp, #12]
    d24c:	1c5a      	adds	r2, r3, #1
    d24e:	9203      	str	r2, [sp, #12]
    d250:	222d      	movs	r2, #45	; 0x2d
    d252:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d254:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d256:	3301      	adds	r3, #1
    d258:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d25a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d25e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d260:	4619      	mov	r1, r3
    d262:	9803      	ldr	r0, [sp, #12]
    d264:	f7ff fc7f 	bl	cb66 <padbuffer>
    d268:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d26a:	9b03      	ldr	r3, [sp, #12]
    d26c:	2b00      	cmp	r3, #0
    d26e:	d001      	beq.n	d274 <am_util_stdio_vsprintf+0x4cc>
    d270:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d272:	e000      	b.n	d276 <am_util_stdio_vsprintf+0x4ce>
    d274:	2300      	movs	r3, #0
    d276:	9a03      	ldr	r2, [sp, #12]
    d278:	4413      	add	r3, r2
    d27a:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d27c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d27e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d280:	4413      	add	r3, r2
    d282:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d284:	2300      	movs	r3, #0
    d286:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d288:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d28c:	2b00      	cmp	r3, #0
    d28e:	d01e      	beq.n	d2ce <am_util_stdio_vsprintf+0x526>
    d290:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d294:	2b20      	cmp	r3, #32
    d296:	d11a      	bne.n	d2ce <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d298:	9b03      	ldr	r3, [sp, #12]
    d29a:	2b00      	cmp	r3, #0
    d29c:	d004      	beq.n	d2a8 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d29e:	9b03      	ldr	r3, [sp, #12]
    d2a0:	1c5a      	adds	r2, r3, #1
    d2a2:	9203      	str	r2, [sp, #12]
    d2a4:	222d      	movs	r2, #45	; 0x2d
    d2a6:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d2a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2aa:	3301      	adds	r3, #1
    d2ac:	9311      	str	r3, [sp, #68]	; 0x44
    d2ae:	e00e      	b.n	d2ce <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d2b0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d00a      	beq.n	d2ce <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d2b8:	9b03      	ldr	r3, [sp, #12]
    d2ba:	2b00      	cmp	r3, #0
    d2bc:	d004      	beq.n	d2c8 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d2be:	9b03      	ldr	r3, [sp, #12]
    d2c0:	1c5a      	adds	r2, r3, #1
    d2c2:	9203      	str	r2, [sp, #12]
    d2c4:	222d      	movs	r2, #45	; 0x2d
    d2c6:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d2c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2ca:	3301      	adds	r3, #1
    d2cc:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d2ce:	9a03      	ldr	r2, [sp, #12]
    d2d0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d2d4:	f7ff fb8c 	bl	c9f0 <uint64_to_str>
    d2d8:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d2da:	9b03      	ldr	r3, [sp, #12]
    d2dc:	2b00      	cmp	r3, #0
    d2de:	d003      	beq.n	d2e8 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d2e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2e2:	9a03      	ldr	r2, [sp, #12]
    d2e4:	4413      	add	r3, r2
    d2e6:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d2e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d2ec:	4413      	add	r3, r2
    d2ee:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d2f0:	e04c      	b.n	d38c <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d2f2:	9b03      	ldr	r3, [sp, #12]
    d2f4:	2b00      	cmp	r3, #0
    d2f6:	d048      	beq.n	d38a <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d2f8:	9b01      	ldr	r3, [sp, #4]
    d2fa:	3307      	adds	r3, #7
    d2fc:	f023 0307 	bic.w	r3, r3, #7
    d300:	f103 0208 	add.w	r2, r3, #8
    d304:	9201      	str	r2, [sp, #4]
    d306:	e9d3 2300 	ldrd	r2, r3, [r3]
    d30a:	4610      	mov	r0, r2
    d30c:	4619      	mov	r1, r3
    d30e:	f7fe fef7 	bl	c100 <__aeabi_d2f>
    d312:	4603      	mov	r3, r0
    d314:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d316:	9b03      	ldr	r3, [sp, #12]
    d318:	2214      	movs	r2, #20
    d31a:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d31c:	990e      	ldr	r1, [sp, #56]	; 0x38
    d31e:	9803      	ldr	r0, [sp, #12]
    d320:	ed9d 0a06 	vldr	s0, [sp, #24]
    d324:	f7ff fc42 	bl	cbac <ftoa>
    d328:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d32c:	2b00      	cmp	r3, #0
    d32e:	da14      	bge.n	d35a <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d332:	f1b3 3fff 	cmp.w	r3, #4294967295
    d336:	d102      	bne.n	d33e <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d338:	4b1e      	ldr	r3, [pc, #120]	; (d3b4 <am_util_stdio_vsprintf+0x60c>)
    d33a:	930c      	str	r3, [sp, #48]	; 0x30
    d33c:	e008      	b.n	d350 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d33e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d340:	f113 0f02 	cmn.w	r3, #2
    d344:	d102      	bne.n	d34c <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d346:	4b1c      	ldr	r3, [pc, #112]	; (d3b8 <am_util_stdio_vsprintf+0x610>)
    d348:	930c      	str	r3, [sp, #48]	; 0x30
    d34a:	e001      	b.n	d350 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d34c:	4b1b      	ldr	r3, [pc, #108]	; (d3bc <am_util_stdio_vsprintf+0x614>)
    d34e:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d350:	9b03      	ldr	r3, [sp, #12]
    d352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d354:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d356:	2303      	movs	r3, #3
    d358:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d35a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d35c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d35e:	4413      	add	r3, r2
    d360:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d364:	9a03      	ldr	r2, [sp, #12]
    d366:	4413      	add	r3, r2
    d368:	9303      	str	r3, [sp, #12]
                }
                break;
    d36a:	e00e      	b.n	d38a <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d36c:	9b03      	ldr	r3, [sp, #12]
    d36e:	2b00      	cmp	r3, #0
    d370:	d005      	beq.n	d37e <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d372:	9b03      	ldr	r3, [sp, #12]
    d374:	1c5a      	adds	r2, r3, #1
    d376:	9203      	str	r2, [sp, #12]
    d378:	9a02      	ldr	r2, [sp, #8]
    d37a:	7812      	ldrb	r2, [r2, #0]
    d37c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d37e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d380:	3301      	adds	r3, #1
    d382:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d384:	e002      	b.n	d38c <am_util_stdio_vsprintf+0x5e4>
                break;
    d386:	bf00      	nop
    d388:	e000      	b.n	d38c <am_util_stdio_vsprintf+0x5e4>
                break;
    d38a:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d38c:	9b02      	ldr	r3, [sp, #8]
    d38e:	3301      	adds	r3, #1
    d390:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d392:	9b02      	ldr	r3, [sp, #8]
    d394:	781b      	ldrb	r3, [r3, #0]
    d396:	2b00      	cmp	r3, #0
    d398:	f47f ad11 	bne.w	cdbe <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d39c:	9b03      	ldr	r3, [sp, #12]
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d002      	beq.n	d3a8 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d3a2:	9b03      	ldr	r3, [sp, #12]
    d3a4:	2200      	movs	r2, #0
    d3a6:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d3a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d3aa:	4618      	mov	r0, r3
    d3ac:	b017      	add	sp, #92	; 0x5c
    d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3b2:	bf00      	nop
    d3b4:	00302e30 	.word	0x00302e30
    d3b8:	00232e23 	.word	0x00232e23
    d3bc:	003f2e3f 	.word	0x003f2e3f

0000d3c0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d3c0:	b40f      	push	{r0, r1, r2, r3}
    d3c2:	b500      	push	{lr}
    d3c4:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d3c6:	4b0c      	ldr	r3, [pc, #48]	; (d3f8 <am_util_stdio_printf+0x38>)
    d3c8:	681b      	ldr	r3, [r3, #0]
    d3ca:	2b00      	cmp	r3, #0
    d3cc:	d101      	bne.n	d3d2 <am_util_stdio_printf+0x12>
    {
        return 0;
    d3ce:	2300      	movs	r3, #0
    d3d0:	e00c      	b.n	d3ec <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d3d2:	ab05      	add	r3, sp, #20
    d3d4:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3d6:	9a00      	ldr	r2, [sp, #0]
    d3d8:	9904      	ldr	r1, [sp, #16]
    d3da:	4808      	ldr	r0, [pc, #32]	; (d3fc <am_util_stdio_printf+0x3c>)
    d3dc:	f7ff fce4 	bl	cda8 <am_util_stdio_vsprintf>
    d3e0:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d3e2:	4b05      	ldr	r3, [pc, #20]	; (d3f8 <am_util_stdio_printf+0x38>)
    d3e4:	681b      	ldr	r3, [r3, #0]
    d3e6:	4805      	ldr	r0, [pc, #20]	; (d3fc <am_util_stdio_printf+0x3c>)
    d3e8:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d3ea:	9b01      	ldr	r3, [sp, #4]
}
    d3ec:	4618      	mov	r0, r3
    d3ee:	b003      	add	sp, #12
    d3f0:	f85d eb04 	ldr.w	lr, [sp], #4
    d3f4:	b004      	add	sp, #16
    d3f6:	4770      	bx	lr
    d3f8:	10001068 	.word	0x10001068
    d3fc:	1000106c 	.word	0x1000106c

0000d400 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d400:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d402:	4802      	ldr	r0, [pc, #8]	; (d40c <am_util_stdio_terminal_clear+0xc>)
    d404:	f7ff ffdc 	bl	d3c0 <am_util_stdio_printf>
}
    d408:	bf00      	nop
    d40a:	bd08      	pop	{r3, pc}
    d40c:	0000f0c0 	.word	0x0000f0c0

0000d410 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d410:	4811      	ldr	r0, [pc, #68]	; (d458 <zero_loop+0x12>)
    d412:	4912      	ldr	r1, [pc, #72]	; (d45c <zero_loop+0x16>)
    d414:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d416:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d41a:	4811      	ldr	r0, [pc, #68]	; (d460 <zero_loop+0x1a>)
    d41c:	6801      	ldr	r1, [r0, #0]
    d41e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d422:	6001      	str	r1, [r0, #0]
    d424:	f3bf 8f4f 	dsb	sy
    d428:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d42c:	480d      	ldr	r0, [pc, #52]	; (d464 <zero_loop+0x1e>)
    d42e:	490e      	ldr	r1, [pc, #56]	; (d468 <zero_loop+0x22>)
    d430:	4a0e      	ldr	r2, [pc, #56]	; (d46c <zero_loop+0x26>)

0000d432 <copy_loop>:
    d432:	f850 3b04 	ldr.w	r3, [r0], #4
    d436:	f841 3b04 	str.w	r3, [r1], #4
    d43a:	4291      	cmp	r1, r2
    d43c:	dbf9      	blt.n	d432 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d43e:	480c      	ldr	r0, [pc, #48]	; (d470 <zero_loop+0x2a>)
    d440:	490c      	ldr	r1, [pc, #48]	; (d474 <zero_loop+0x2e>)
    d442:	f04f 0200 	mov.w	r2, #0

0000d446 <zero_loop>:
    d446:	4288      	cmp	r0, r1
    d448:	bfb8      	it	lt
    d44a:	f840 2b04 	strlt.w	r2, [r0], #4
    d44e:	dbfa      	blt.n	d446 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d450:	f7fe ff7c 	bl	c34c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d454:	be00      	bkpt	0x0000
}
    d456:	bf00      	nop
    d458:	e000ed08 	.word	0xe000ed08
    d45c:	0000c000 	.word	0x0000c000
    d460:	e000ed88 	.word	0xe000ed88
    d464:	0000f3c0 	.word	0x0000f3c0
    d468:	10001000 	.word	0x10001000
    d46c:	10001064 	.word	0x10001064
    d470:	10001064 	.word	0x10001064
    d474:	10001a48 	.word	0x10001a48

0000d478 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d478:	e7fe      	b.n	d478 <NMI_Handler>

0000d47a <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d47a:	e7fe      	b.n	d47a <BusFault_Handler>

0000d47c <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d47c:	e7fe      	b.n	d47c <DebugMon_Handler>
	...

0000d480 <am_hal_cachectrl_config>:
    d480:	b530      	push	{r4, r5, lr}
    d482:	b083      	sub	sp, #12
    d484:	4604      	mov	r4, r0
    d486:	f000 fc2b 	bl	dce0 <am_hal_interrupt_master_disable>
    d48a:	4d0e      	ldr	r5, [pc, #56]	; (d4c4 <am_hal_cachectrl_config+0x44>)
    d48c:	9001      	str	r0, [sp, #4]
    d48e:	682b      	ldr	r3, [r5, #0]
    d490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d494:	602b      	str	r3, [r5, #0]
    d496:	9801      	ldr	r0, [sp, #4]
    d498:	f000 fc26 	bl	dce8 <am_hal_interrupt_master_set>
    d49c:	7863      	ldrb	r3, [r4, #1]
    d49e:	7822      	ldrb	r2, [r4, #0]
    d4a0:	78a1      	ldrb	r1, [r4, #2]
    d4a2:	021b      	lsls	r3, r3, #8
    d4a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d4a8:	0112      	lsls	r2, r2, #4
    d4aa:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d4ae:	b2d2      	uxtb	r2, r2
    d4b0:	4313      	orrs	r3, r2
    d4b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d4b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d4ba:	2000      	movs	r0, #0
    d4bc:	602b      	str	r3, [r5, #0]
    d4be:	b003      	add	sp, #12
    d4c0:	bd30      	pop	{r4, r5, pc}
    d4c2:	bf00      	nop
    d4c4:	40018000 	.word	0x40018000

0000d4c8 <am_hal_cachectrl_enable>:
    d4c8:	4a03      	ldr	r2, [pc, #12]	; (d4d8 <am_hal_cachectrl_enable+0x10>)
    d4ca:	6813      	ldr	r3, [r2, #0]
    d4cc:	f043 0301 	orr.w	r3, r3, #1
    d4d0:	2000      	movs	r0, #0
    d4d2:	6013      	str	r3, [r2, #0]
    d4d4:	4770      	bx	lr
    d4d6:	bf00      	nop
    d4d8:	40018000 	.word	0x40018000

0000d4dc <am_hal_cachectrl_control>:
    d4dc:	b510      	push	{r4, lr}
    d4de:	3801      	subs	r0, #1
    d4e0:	b08e      	sub	sp, #56	; 0x38
    d4e2:	2810      	cmp	r0, #16
    d4e4:	f200 815e 	bhi.w	d7a4 <am_hal_cachectrl_control+0x2c8>
    d4e8:	e8df f010 	tbh	[pc, r0, lsl #1]
    d4ec:	00360018 	.word	0x00360018
    d4f0:	0040003d 	.word	0x0040003d
    d4f4:	00450043 	.word	0x00450043
    d4f8:	0011001a 	.word	0x0011001a
    d4fc:	00540047 	.word	0x00540047
    d500:	009a0061 	.word	0x009a0061
    d504:	010c00d3 	.word	0x010c00d3
    d508:	013f0126 	.word	0x013f0126
    d50c:	001d      	.short	0x001d
    d50e:	f44f 7300 	mov.w	r3, #512	; 0x200
    d512:	4aac      	ldr	r2, [pc, #688]	; (d7c4 <am_hal_cachectrl_control+0x2e8>)
    d514:	2000      	movs	r0, #0
    d516:	6093      	str	r3, [r2, #8]
    d518:	b00e      	add	sp, #56	; 0x38
    d51a:	bd10      	pop	{r4, pc}
    d51c:	2301      	movs	r3, #1
    d51e:	e7f8      	b.n	d512 <am_hal_cachectrl_control+0x36>
    d520:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d524:	e7f5      	b.n	d512 <am_hal_cachectrl_control+0x36>
    d526:	2900      	cmp	r1, #0
    d528:	f000 813c 	beq.w	d7a4 <am_hal_cachectrl_control+0x2c8>
    d52c:	684a      	ldr	r2, [r1, #4]
    d52e:	48a6      	ldr	r0, [pc, #664]	; (d7c8 <am_hal_cachectrl_control+0x2ec>)
    d530:	4202      	tst	r2, r0
    d532:	f040 8137 	bne.w	d7a4 <am_hal_cachectrl_control+0x2c8>
    d536:	688b      	ldr	r3, [r1, #8]
    d538:	4018      	ands	r0, r3
    d53a:	f040 8133 	bne.w	d7a4 <am_hal_cachectrl_control+0x2c8>
    d53e:	780c      	ldrb	r4, [r1, #0]
    d540:	2c00      	cmp	r4, #0
    d542:	f040 8133 	bne.w	d7ac <am_hal_cachectrl_control+0x2d0>
    d546:	4c9f      	ldr	r4, [pc, #636]	; (d7c4 <am_hal_cachectrl_control+0x2e8>)
    d548:	7849      	ldrb	r1, [r1, #1]
    d54a:	6122      	str	r2, [r4, #16]
    d54c:	6163      	str	r3, [r4, #20]
    d54e:	6823      	ldr	r3, [r4, #0]
    d550:	f361 0382 	bfi	r3, r1, #2, #1
    d554:	6023      	str	r3, [r4, #0]
    d556:	e7df      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d558:	4b9a      	ldr	r3, [pc, #616]	; (d7c4 <am_hal_cachectrl_control+0x2e8>)
    d55a:	681b      	ldr	r3, [r3, #0]
    d55c:	01db      	lsls	r3, r3, #7
    d55e:	f140 811f 	bpl.w	d7a0 <am_hal_cachectrl_control+0x2c4>
    d562:	2302      	movs	r3, #2
    d564:	e7d5      	b.n	d512 <am_hal_cachectrl_control+0x36>
    d566:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d56a:	e7d2      	b.n	d512 <am_hal_cachectrl_control+0x36>
    d56c:	f44f 7308 	mov.w	r3, #544	; 0x220
    d570:	e7cf      	b.n	d512 <am_hal_cachectrl_control+0x36>
    d572:	2340      	movs	r3, #64	; 0x40
    d574:	e7cd      	b.n	d512 <am_hal_cachectrl_control+0x36>
    d576:	2320      	movs	r3, #32
    d578:	e7cb      	b.n	d512 <am_hal_cachectrl_control+0x36>
    d57a:	f000 fbb1 	bl	dce0 <am_hal_interrupt_master_disable>
    d57e:	4a91      	ldr	r2, [pc, #580]	; (d7c4 <am_hal_cachectrl_control+0x2e8>)
    d580:	9000      	str	r0, [sp, #0]
    d582:	6813      	ldr	r3, [r2, #0]
    d584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d588:	6013      	str	r3, [r2, #0]
    d58a:	9800      	ldr	r0, [sp, #0]
    d58c:	f000 fbac 	bl	dce8 <am_hal_interrupt_master_set>
    d590:	2000      	movs	r0, #0
    d592:	e7c1      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d594:	f000 fba4 	bl	dce0 <am_hal_interrupt_master_disable>
    d598:	4a8a      	ldr	r2, [pc, #552]	; (d7c4 <am_hal_cachectrl_control+0x2e8>)
    d59a:	9001      	str	r0, [sp, #4]
    d59c:	6813      	ldr	r3, [r2, #0]
    d59e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d5a2:	6013      	str	r3, [r2, #0]
    d5a4:	9801      	ldr	r0, [sp, #4]
    d5a6:	f000 fb9f 	bl	dce8 <am_hal_interrupt_master_set>
    d5aa:	2000      	movs	r0, #0
    d5ac:	e7b4      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d5ae:	f000 fb97 	bl	dce0 <am_hal_interrupt_master_disable>
    d5b2:	4603      	mov	r3, r0
    d5b4:	4885      	ldr	r0, [pc, #532]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d5b6:	9302      	str	r3, [sp, #8]
    d5b8:	f000 fa0a 	bl	d9d0 <am_hal_flash_load_ui32>
    d5bc:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d5c0:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d5c4:	4881      	ldr	r0, [pc, #516]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d5c6:	f000 fa07 	bl	d9d8 <am_hal_flash_store_ui32>
    d5ca:	9802      	ldr	r0, [sp, #8]
    d5cc:	f000 fb8c 	bl	dce8 <am_hal_interrupt_master_set>
    d5d0:	f000 fb86 	bl	dce0 <am_hal_interrupt_master_disable>
    d5d4:	4603      	mov	r3, r0
    d5d6:	487d      	ldr	r0, [pc, #500]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d5d8:	9303      	str	r3, [sp, #12]
    d5da:	f000 f9f9 	bl	d9d0 <am_hal_flash_load_ui32>
    d5de:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d5e2:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d5e6:	4879      	ldr	r0, [pc, #484]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d5e8:	f000 f9f6 	bl	d9d8 <am_hal_flash_store_ui32>
    d5ec:	9803      	ldr	r0, [sp, #12]
    d5ee:	f000 fb7b 	bl	dce8 <am_hal_interrupt_master_set>
    d5f2:	f000 fb75 	bl	dce0 <am_hal_interrupt_master_disable>
    d5f6:	4603      	mov	r3, r0
    d5f8:	4874      	ldr	r0, [pc, #464]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d5fa:	9304      	str	r3, [sp, #16]
    d5fc:	f000 f9e8 	bl	d9d0 <am_hal_flash_load_ui32>
    d600:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d604:	f020 000f 	bic.w	r0, r0, #15
    d608:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d60c:	f041 0103 	orr.w	r1, r1, #3
    d610:	486e      	ldr	r0, [pc, #440]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d612:	f000 f9e1 	bl	d9d8 <am_hal_flash_store_ui32>
    d616:	9804      	ldr	r0, [sp, #16]
    d618:	f000 fb66 	bl	dce8 <am_hal_interrupt_master_set>
    d61c:	2000      	movs	r0, #0
    d61e:	e77b      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d620:	f000 fb5e 	bl	dce0 <am_hal_interrupt_master_disable>
    d624:	4603      	mov	r3, r0
    d626:	4869      	ldr	r0, [pc, #420]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d628:	9305      	str	r3, [sp, #20]
    d62a:	f000 f9d1 	bl	d9d0 <am_hal_flash_load_ui32>
    d62e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d632:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d636:	4865      	ldr	r0, [pc, #404]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d638:	f000 f9ce 	bl	d9d8 <am_hal_flash_store_ui32>
    d63c:	9805      	ldr	r0, [sp, #20]
    d63e:	f000 fb53 	bl	dce8 <am_hal_interrupt_master_set>
    d642:	f000 fb4d 	bl	dce0 <am_hal_interrupt_master_disable>
    d646:	4603      	mov	r3, r0
    d648:	4860      	ldr	r0, [pc, #384]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d64a:	9306      	str	r3, [sp, #24]
    d64c:	f000 f9c0 	bl	d9d0 <am_hal_flash_load_ui32>
    d650:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d654:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d658:	485c      	ldr	r0, [pc, #368]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d65a:	f000 f9bd 	bl	d9d8 <am_hal_flash_store_ui32>
    d65e:	9806      	ldr	r0, [sp, #24]
    d660:	f000 fb42 	bl	dce8 <am_hal_interrupt_master_set>
    d664:	f000 fb3c 	bl	dce0 <am_hal_interrupt_master_disable>
    d668:	4603      	mov	r3, r0
    d66a:	4858      	ldr	r0, [pc, #352]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d66c:	9307      	str	r3, [sp, #28]
    d66e:	f000 f9af 	bl	d9d0 <am_hal_flash_load_ui32>
    d672:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d676:	f020 000f 	bic.w	r0, r0, #15
    d67a:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d67e:	f041 0101 	orr.w	r1, r1, #1
    d682:	4852      	ldr	r0, [pc, #328]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d684:	f000 f9a8 	bl	d9d8 <am_hal_flash_store_ui32>
    d688:	9807      	ldr	r0, [sp, #28]
    d68a:	f000 fb2d 	bl	dce8 <am_hal_interrupt_master_set>
    d68e:	2000      	movs	r0, #0
    d690:	e742      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d692:	f000 fb25 	bl	dce0 <am_hal_interrupt_master_disable>
    d696:	4603      	mov	r3, r0
    d698:	484c      	ldr	r0, [pc, #304]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d69a:	9308      	str	r3, [sp, #32]
    d69c:	f000 f998 	bl	d9d0 <am_hal_flash_load_ui32>
    d6a0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d6a4:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d6a8:	4848      	ldr	r0, [pc, #288]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d6aa:	f000 f995 	bl	d9d8 <am_hal_flash_store_ui32>
    d6ae:	9808      	ldr	r0, [sp, #32]
    d6b0:	f000 fb1a 	bl	dce8 <am_hal_interrupt_master_set>
    d6b4:	f000 fb14 	bl	dce0 <am_hal_interrupt_master_disable>
    d6b8:	4603      	mov	r3, r0
    d6ba:	4844      	ldr	r0, [pc, #272]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d6bc:	9309      	str	r3, [sp, #36]	; 0x24
    d6be:	f000 f987 	bl	d9d0 <am_hal_flash_load_ui32>
    d6c2:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d6c6:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d6ca:	4840      	ldr	r0, [pc, #256]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d6cc:	f000 f984 	bl	d9d8 <am_hal_flash_store_ui32>
    d6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
    d6d2:	f000 fb09 	bl	dce8 <am_hal_interrupt_master_set>
    d6d6:	f000 fb03 	bl	dce0 <am_hal_interrupt_master_disable>
    d6da:	4603      	mov	r3, r0
    d6dc:	483b      	ldr	r0, [pc, #236]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d6de:	930a      	str	r3, [sp, #40]	; 0x28
    d6e0:	f000 f976 	bl	d9d0 <am_hal_flash_load_ui32>
    d6e4:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d6e8:	f020 000f 	bic.w	r0, r0, #15
    d6ec:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d6f0:	f041 0101 	orr.w	r1, r1, #1
    d6f4:	4835      	ldr	r0, [pc, #212]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d6f6:	f000 f96f 	bl	d9d8 <am_hal_flash_store_ui32>
    d6fa:	980a      	ldr	r0, [sp, #40]	; 0x28
    d6fc:	f000 faf4 	bl	dce8 <am_hal_interrupt_master_set>
    d700:	2000      	movs	r0, #0
    d702:	e709      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d704:	2900      	cmp	r1, #0
    d706:	d04d      	beq.n	d7a4 <am_hal_cachectrl_control+0x2c8>
    d708:	680c      	ldr	r4, [r1, #0]
    d70a:	2c03      	cmp	r4, #3
    d70c:	d84c      	bhi.n	d7a8 <am_hal_cachectrl_control+0x2cc>
    d70e:	f000 fae7 	bl	dce0 <am_hal_interrupt_master_disable>
    d712:	4603      	mov	r3, r0
    d714:	482d      	ldr	r0, [pc, #180]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d716:	930b      	str	r3, [sp, #44]	; 0x2c
    d718:	f000 f95a 	bl	d9d0 <am_hal_flash_load_ui32>
    d71c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d720:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d724:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d728:	4828      	ldr	r0, [pc, #160]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d72a:	f000 f955 	bl	d9d8 <am_hal_flash_store_ui32>
    d72e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d730:	f000 fada 	bl	dce8 <am_hal_interrupt_master_set>
    d734:	2000      	movs	r0, #0
    d736:	e6ef      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d738:	b3a1      	cbz	r1, d7a4 <am_hal_cachectrl_control+0x2c8>
    d73a:	680c      	ldr	r4, [r1, #0]
    d73c:	2c07      	cmp	r4, #7
    d73e:	d833      	bhi.n	d7a8 <am_hal_cachectrl_control+0x2cc>
    d740:	f000 face 	bl	dce0 <am_hal_interrupt_master_disable>
    d744:	4603      	mov	r3, r0
    d746:	4821      	ldr	r0, [pc, #132]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d748:	930c      	str	r3, [sp, #48]	; 0x30
    d74a:	f000 f941 	bl	d9d0 <am_hal_flash_load_ui32>
    d74e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d752:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d756:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d75a:	481c      	ldr	r0, [pc, #112]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d75c:	f000 f93c 	bl	d9d8 <am_hal_flash_store_ui32>
    d760:	980c      	ldr	r0, [sp, #48]	; 0x30
    d762:	f000 fac1 	bl	dce8 <am_hal_interrupt_master_set>
    d766:	2000      	movs	r0, #0
    d768:	e6d6      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d76a:	b1d9      	cbz	r1, d7a4 <am_hal_cachectrl_control+0x2c8>
    d76c:	680c      	ldr	r4, [r1, #0]
    d76e:	2c0f      	cmp	r4, #15
    d770:	d81a      	bhi.n	d7a8 <am_hal_cachectrl_control+0x2cc>
    d772:	f000 fab5 	bl	dce0 <am_hal_interrupt_master_disable>
    d776:	4603      	mov	r3, r0
    d778:	4814      	ldr	r0, [pc, #80]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d77a:	930d      	str	r3, [sp, #52]	; 0x34
    d77c:	f000 f928 	bl	d9d0 <am_hal_flash_load_ui32>
    d780:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d784:	f020 000f 	bic.w	r0, r0, #15
    d788:	ea40 0104 	orr.w	r1, r0, r4
    d78c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d790:	480e      	ldr	r0, [pc, #56]	; (d7cc <am_hal_cachectrl_control+0x2f0>)
    d792:	f000 f921 	bl	d9d8 <am_hal_flash_store_ui32>
    d796:	980d      	ldr	r0, [sp, #52]	; 0x34
    d798:	f000 faa6 	bl	dce8 <am_hal_interrupt_master_set>
    d79c:	2000      	movs	r0, #0
    d79e:	e6bb      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d7a0:	2007      	movs	r0, #7
    d7a2:	e6b9      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d7a4:	2006      	movs	r0, #6
    d7a6:	e6b7      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d7a8:	2001      	movs	r0, #1
    d7aa:	e6b5      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d7ac:	2c01      	cmp	r4, #1
    d7ae:	d1f9      	bne.n	d7a4 <am_hal_cachectrl_control+0x2c8>
    d7b0:	4c04      	ldr	r4, [pc, #16]	; (d7c4 <am_hal_cachectrl_control+0x2e8>)
    d7b2:	7849      	ldrb	r1, [r1, #1]
    d7b4:	61a2      	str	r2, [r4, #24]
    d7b6:	61e3      	str	r3, [r4, #28]
    d7b8:	6823      	ldr	r3, [r4, #0]
    d7ba:	f361 03c3 	bfi	r3, r1, #3, #1
    d7be:	6023      	str	r3, [r4, #0]
    d7c0:	e6aa      	b.n	d518 <am_hal_cachectrl_control+0x3c>
    d7c2:	bf00      	nop
    d7c4:	40018000 	.word	0x40018000
    d7c8:	f800000f 	.word	0xf800000f
    d7cc:	40018004 	.word	0x40018004

0000d7d0 <am_hal_clkgen_control>:
    d7d0:	4b49      	ldr	r3, [pc, #292]	; (d8f8 <am_hal_clkgen_control+0x128>)
    d7d2:	681a      	ldr	r2, [r3, #0]
    d7d4:	b912      	cbnz	r2, d7dc <am_hal_clkgen_control+0xc>
    d7d6:	4a49      	ldr	r2, [pc, #292]	; (d8fc <am_hal_clkgen_control+0x12c>)
    d7d8:	6812      	ldr	r2, [r2, #0]
    d7da:	601a      	str	r2, [r3, #0]
    d7dc:	2809      	cmp	r0, #9
    d7de:	f200 8089 	bhi.w	d8f4 <am_hal_clkgen_control+0x124>
    d7e2:	e8df f000 	tbb	[pc, r0]
    d7e6:	160d      	.short	0x160d
    d7e8:	423a261e 	.word	0x423a261e
    d7ec:	055c544c 	.word	0x055c544c
    d7f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d7f4:	2000      	movs	r0, #0
    d7f6:	6a1a      	ldr	r2, [r3, #32]
    d7f8:	f36f 0200 	bfc	r2, #0, #1
    d7fc:	621a      	str	r2, [r3, #32]
    d7fe:	4770      	bx	lr
    d800:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d804:	2200      	movs	r2, #0
    d806:	2147      	movs	r1, #71	; 0x47
    d808:	6159      	str	r1, [r3, #20]
    d80a:	4610      	mov	r0, r2
    d80c:	619a      	str	r2, [r3, #24]
    d80e:	615a      	str	r2, [r3, #20]
    d810:	4770      	bx	lr
    d812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d816:	2000      	movs	r0, #0
    d818:	899a      	ldrh	r2, [r3, #12]
    d81a:	f36f 0200 	bfc	r2, #0, #1
    d81e:	819a      	strh	r2, [r3, #12]
    d820:	4770      	bx	lr
    d822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d826:	2000      	movs	r0, #0
    d828:	899a      	ldrh	r2, [r3, #12]
    d82a:	f36f 0241 	bfc	r2, #1, #1
    d82e:	819a      	strh	r2, [r3, #12]
    d830:	4770      	bx	lr
    d832:	4a33      	ldr	r2, [pc, #204]	; (d900 <am_hal_clkgen_control+0x130>)
    d834:	68d3      	ldr	r3, [r2, #12]
    d836:	b2db      	uxtb	r3, r3
    d838:	2b21      	cmp	r3, #33	; 0x21
    d83a:	d106      	bne.n	d84a <am_hal_clkgen_control+0x7a>
    d83c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d840:	2101      	movs	r1, #1
    d842:	f361 2309 	bfi	r3, r1, #8, #2
    d846:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d84a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d84e:	2000      	movs	r0, #0
    d850:	8993      	ldrh	r3, [r2, #12]
    d852:	f043 0301 	orr.w	r3, r3, #1
    d856:	8193      	strh	r3, [r2, #12]
    d858:	4770      	bx	lr
    d85a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d85e:	2000      	movs	r0, #0
    d860:	8993      	ldrh	r3, [r2, #12]
    d862:	f043 0302 	orr.w	r3, r3, #2
    d866:	8193      	strh	r3, [r2, #12]
    d868:	4770      	bx	lr
    d86a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d86e:	2200      	movs	r2, #0
    d870:	2047      	movs	r0, #71	; 0x47
    d872:	2101      	movs	r1, #1
    d874:	6158      	str	r0, [r3, #20]
    d876:	6199      	str	r1, [r3, #24]
    d878:	4610      	mov	r0, r2
    d87a:	615a      	str	r2, [r3, #20]
    d87c:	4770      	bx	lr
    d87e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d882:	2000      	movs	r0, #0
    d884:	899a      	ldrh	r2, [r3, #12]
    d886:	f36f 12c7 	bfc	r2, #7, #1
    d88a:	819a      	strh	r2, [r3, #12]
    d88c:	4770      	bx	lr
    d88e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d892:	2000      	movs	r0, #0
    d894:	8993      	ldrh	r3, [r2, #12]
    d896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d89a:	8193      	strh	r3, [r2, #12]
    d89c:	4770      	bx	lr
    d89e:	4a18      	ldr	r2, [pc, #96]	; (d900 <am_hal_clkgen_control+0x130>)
    d8a0:	68d3      	ldr	r3, [r2, #12]
    d8a2:	b2db      	uxtb	r3, r3
    d8a4:	2b21      	cmp	r3, #33	; 0x21
    d8a6:	d00a      	beq.n	d8be <am_hal_clkgen_control+0xee>
    d8a8:	b139      	cbz	r1, d8ba <am_hal_clkgen_control+0xea>
    d8aa:	680b      	ldr	r3, [r1, #0]
    d8ac:	f043 0301 	orr.w	r3, r3, #1
    d8b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8b4:	2000      	movs	r0, #0
    d8b6:	6213      	str	r3, [r2, #32]
    d8b8:	4770      	bx	lr
    d8ba:	4b12      	ldr	r3, [pc, #72]	; (d904 <am_hal_clkgen_control+0x134>)
    d8bc:	e7f8      	b.n	d8b0 <am_hal_clkgen_control+0xe0>
    d8be:	b500      	push	{lr}
    d8c0:	b083      	sub	sp, #12
    d8c2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d8c6:	9101      	str	r1, [sp, #4]
    d8c8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d8cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d8d0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d8d4:	f000 f836 	bl	d944 <am_hal_flash_delay>
    d8d8:	9901      	ldr	r1, [sp, #4]
    d8da:	b149      	cbz	r1, d8f0 <am_hal_clkgen_control+0x120>
    d8dc:	680b      	ldr	r3, [r1, #0]
    d8de:	f043 0301 	orr.w	r3, r3, #1
    d8e2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8e6:	2000      	movs	r0, #0
    d8e8:	6213      	str	r3, [r2, #32]
    d8ea:	b003      	add	sp, #12
    d8ec:	f85d fb04 	ldr.w	pc, [sp], #4
    d8f0:	4b04      	ldr	r3, [pc, #16]	; (d904 <am_hal_clkgen_control+0x134>)
    d8f2:	e7f6      	b.n	d8e2 <am_hal_clkgen_control+0x112>
    d8f4:	2006      	movs	r0, #6
    d8f6:	4770      	bx	lr
    d8f8:	10001170 	.word	0x10001170
    d8fc:	4ffff000 	.word	0x4ffff000
    d900:	40020000 	.word	0x40020000
    d904:	0025b801 	.word	0x0025b801

0000d908 <am_hal_clkgen_status_get>:
    d908:	b1b0      	cbz	r0, d938 <am_hal_clkgen_status_get+0x30>
    d90a:	b410      	push	{r4}
    d90c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d910:	4603      	mov	r3, r0
    d912:	698c      	ldr	r4, [r1, #24]
    d914:	4809      	ldr	r0, [pc, #36]	; (d93c <am_hal_clkgen_status_get+0x34>)
    d916:	4a0a      	ldr	r2, [pc, #40]	; (d940 <am_hal_clkgen_status_get+0x38>)
    d918:	f014 0f01 	tst.w	r4, #1
    d91c:	bf08      	it	eq
    d91e:	4602      	moveq	r2, r0
    d920:	601a      	str	r2, [r3, #0]
    d922:	69ca      	ldr	r2, [r1, #28]
    d924:	f85d 4b04 	ldr.w	r4, [sp], #4
    d928:	f002 0101 	and.w	r1, r2, #1
    d92c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d930:	2000      	movs	r0, #0
    d932:	6059      	str	r1, [r3, #4]
    d934:	721a      	strb	r2, [r3, #8]
    d936:	4770      	bx	lr
    d938:	2006      	movs	r0, #6
    d93a:	4770      	bx	lr
    d93c:	02dc6c00 	.word	0x02dc6c00
    d940:	016e3600 	.word	0x016e3600

0000d944 <am_hal_flash_delay>:
    d944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d94a:	075b      	lsls	r3, r3, #29
    d94c:	bf46      	itte	mi
    d94e:	0040      	lslmi	r0, r0, #1
    d950:	230e      	movmi	r3, #14
    d952:	230b      	movpl	r3, #11
    d954:	4298      	cmp	r0, r3
    d956:	d902      	bls.n	d95e <am_hal_flash_delay+0x1a>
    d958:	4a01      	ldr	r2, [pc, #4]	; (d960 <am_hal_flash_delay+0x1c>)
    d95a:	1ac0      	subs	r0, r0, r3
    d95c:	4710      	bx	r2
    d95e:	4770      	bx	lr
    d960:	0800009d 	.word	0x0800009d

0000d964 <am_hal_flash_delay_status_check>:
    d964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d968:	f89d c020 	ldrb.w	ip, [sp, #32]
    d96c:	f8df 805c 	ldr.w	r8, [pc, #92]	; d9cc <am_hal_flash_delay_status_check+0x68>
    d970:	4604      	mov	r4, r0
    d972:	460d      	mov	r5, r1
    d974:	4616      	mov	r6, r2
    d976:	461f      	mov	r7, r3
    d978:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d97c:	f1bc 0f00 	cmp.w	ip, #0
    d980:	d00a      	beq.n	d998 <am_hal_flash_delay_status_check+0x34>
    d982:	e01a      	b.n	d9ba <am_hal_flash_delay_status_check+0x56>
    d984:	b1f4      	cbz	r4, d9c4 <am_hal_flash_delay_status_check+0x60>
    d986:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d98a:	f013 0f04 	tst.w	r3, #4
    d98e:	bf0c      	ite	eq
    d990:	2005      	moveq	r0, #5
    d992:	2012      	movne	r0, #18
    d994:	3c01      	subs	r4, #1
    d996:	47c0      	blx	r8
    d998:	6828      	ldr	r0, [r5, #0]
    d99a:	4030      	ands	r0, r6
    d99c:	42b8      	cmp	r0, r7
    d99e:	d0f1      	beq.n	d984 <am_hal_flash_delay_status_check+0x20>
    d9a0:	2000      	movs	r0, #0
    d9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d9a6:	b16c      	cbz	r4, d9c4 <am_hal_flash_delay_status_check+0x60>
    d9a8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d9ac:	f013 0f04 	tst.w	r3, #4
    d9b0:	bf0c      	ite	eq
    d9b2:	2005      	moveq	r0, #5
    d9b4:	2012      	movne	r0, #18
    d9b6:	3c01      	subs	r4, #1
    d9b8:	47c0      	blx	r8
    d9ba:	6828      	ldr	r0, [r5, #0]
    d9bc:	4030      	ands	r0, r6
    d9be:	42b8      	cmp	r0, r7
    d9c0:	d1f1      	bne.n	d9a6 <am_hal_flash_delay_status_check+0x42>
    d9c2:	e7ed      	b.n	d9a0 <am_hal_flash_delay_status_check+0x3c>
    d9c4:	2004      	movs	r0, #4
    d9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d9ca:	bf00      	nop
    d9cc:	0800009d 	.word	0x0800009d

0000d9d0 <am_hal_flash_load_ui32>:
    d9d0:	4b00      	ldr	r3, [pc, #0]	; (d9d4 <am_hal_flash_load_ui32+0x4>)
    d9d2:	4718      	bx	r3
    d9d4:	08000075 	.word	0x08000075

0000d9d8 <am_hal_flash_store_ui32>:
    d9d8:	4b01      	ldr	r3, [pc, #4]	; (d9e0 <am_hal_flash_store_ui32+0x8>)
    d9da:	f043 0301 	orr.w	r3, r3, #1
    d9de:	4718      	bx	r3
    d9e0:	10001008 	.word	0x10001008

0000d9e4 <am_hal_gpio_pinconfig>:
    d9e4:	2831      	cmp	r0, #49	; 0x31
    d9e6:	f200 80c3 	bhi.w	db70 <am_hal_gpio_pinconfig+0x18c>
    d9ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9ee:	4604      	mov	r4, r0
    d9f0:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    d9f4:	f001 0007 	and.w	r0, r1, #7
    d9f8:	b085      	sub	sp, #20
    d9fa:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    d9fe:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    da02:	d00f      	beq.n	da24 <am_hal_gpio_pinconfig+0x40>
    da04:	f3c1 1642 	ubfx	r6, r1, #5, #3
    da08:	1db5      	adds	r5, r6, #6
    da0a:	f005 0507 	and.w	r5, r5, #7
    da0e:	2d03      	cmp	r5, #3
    da10:	f042 0201 	orr.w	r2, r2, #1
    da14:	f240 80ae 	bls.w	db74 <am_hal_gpio_pinconfig+0x190>
    da18:	2fc0      	cmp	r7, #192	; 0xc0
    da1a:	f000 80e1 	beq.w	dbe0 <am_hal_gpio_pinconfig+0x1fc>
    da1e:	2f20      	cmp	r7, #32
    da20:	f000 80e3 	beq.w	dbea <am_hal_gpio_pinconfig+0x206>
    da24:	b163      	cbz	r3, da40 <am_hal_gpio_pinconfig+0x5c>
    da26:	2b01      	cmp	r3, #1
    da28:	f000 80d3 	beq.w	dbd2 <am_hal_gpio_pinconfig+0x1ee>
    da2c:	2b02      	cmp	r3, #2
    da2e:	f040 80c9 	bne.w	dbc4 <am_hal_gpio_pinconfig+0x1e0>
    da32:	4b79      	ldr	r3, [pc, #484]	; (dc18 <am_hal_gpio_pinconfig+0x234>)
    da34:	5d1b      	ldrb	r3, [r3, r4]
    da36:	075b      	lsls	r3, r3, #29
    da38:	f140 80c4 	bpl.w	dbc4 <am_hal_gpio_pinconfig+0x1e0>
    da3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    da40:	4b76      	ldr	r3, [pc, #472]	; (dc1c <am_hal_gpio_pinconfig+0x238>)
    da42:	5d1b      	ldrb	r3, [r3, r4]
    da44:	4103      	asrs	r3, r0
    da46:	005b      	lsls	r3, r3, #1
    da48:	f003 0302 	and.w	r3, r3, #2
    da4c:	4313      	orrs	r3, r2
    da4e:	4a74      	ldr	r2, [pc, #464]	; (dc20 <am_hal_gpio_pinconfig+0x23c>)
    da50:	5d12      	ldrb	r2, [r2, r4]
    da52:	4282      	cmp	r2, r0
    da54:	f000 8099 	beq.w	db8a <am_hal_gpio_pinconfig+0x1a6>
    da58:	f3c1 3000 	ubfx	r0, r1, #12, #1
    da5c:	f3c1 2581 	ubfx	r5, r1, #10, #2
    da60:	f3c1 3280 	ubfx	r2, r1, #14, #1
    da64:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    da68:	0a88      	lsrs	r0, r1, #10
    da6a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    da6e:	f000 0008 	and.w	r0, r0, #8
    da72:	4302      	orrs	r2, r0
    da74:	f3c1 2007 	ubfx	r0, r1, #8, #8
    da78:	f000 050c 	and.w	r5, r0, #12
    da7c:	2d04      	cmp	r5, #4
    da7e:	f000 80a5 	beq.w	dbcc <am_hal_gpio_pinconfig+0x1e8>
    da82:	4d68      	ldr	r5, [pc, #416]	; (dc24 <am_hal_gpio_pinconfig+0x240>)
    da84:	682d      	ldr	r5, [r5, #0]
    da86:	eba1 0805 	sub.w	r8, r1, r5
    da8a:	fab8 f888 	clz	r8, r8
    da8e:	ea4f 1858 	mov.w	r8, r8, lsr #5
    da92:	f010 0f60 	tst.w	r0, #96	; 0x60
    da96:	bf04      	itt	eq
    da98:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    da9c:	f360 0200 	bfieq	r2, r0, #0, #1
    daa0:	00a0      	lsls	r0, r4, #2
    daa2:	f3c1 2101 	ubfx	r1, r1, #8, #2
    daa6:	2902      	cmp	r1, #2
    daa8:	d05c      	beq.n	db64 <am_hal_gpio_pinconfig+0x180>
    daaa:	2903      	cmp	r1, #3
    daac:	d058      	beq.n	db60 <am_hal_gpio_pinconfig+0x17c>
    daae:	2901      	cmp	r1, #1
    dab0:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    dab4:	bf08      	it	eq
    dab6:	f043 0304 	orreq.w	r3, r3, #4
    daba:	f001 0118 	and.w	r1, r1, #24
    dabe:	2700      	movs	r7, #0
    dac0:	f000 001c 	and.w	r0, r0, #28
    dac4:	fa02 f600 	lsl.w	r6, r2, r0
    dac8:	220f      	movs	r2, #15
    daca:	4082      	lsls	r2, r0
    dacc:	43d2      	mvns	r2, r2
    dace:	f04f 09ff 	mov.w	r9, #255	; 0xff
    dad2:	fa03 f501 	lsl.w	r5, r3, r1
    dad6:	fa09 f901 	lsl.w	r9, r9, r1
    dada:	9201      	str	r2, [sp, #4]
    dadc:	f000 f900 	bl	dce0 <am_hal_interrupt_master_disable>
    dae0:	f024 0a03 	bic.w	sl, r4, #3
    dae4:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    dae8:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    daec:	4b4e      	ldr	r3, [pc, #312]	; (dc28 <am_hal_gpio_pinconfig+0x244>)
    daee:	494f      	ldr	r1, [pc, #316]	; (dc2c <am_hal_gpio_pinconfig+0x248>)
    daf0:	9a01      	ldr	r2, [sp, #4]
    daf2:	9003      	str	r0, [sp, #12]
    daf4:	ea6f 0909 	mvn.w	r9, r9
    daf8:	f02b 0b03 	bic.w	fp, fp, #3
    dafc:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    db00:	f1b8 0f00 	cmp.w	r8, #0
    db04:	d00b      	beq.n	db1e <am_hal_gpio_pinconfig+0x13a>
    db06:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    db0a:	f004 081f 	and.w	r8, r4, #31
    db0e:	4848      	ldr	r0, [pc, #288]	; (dc30 <am_hal_gpio_pinconfig+0x24c>)
    db10:	f00e 0e04 	and.w	lr, lr, #4
    db14:	2401      	movs	r4, #1
    db16:	fa04 f408 	lsl.w	r4, r4, r8
    db1a:	f84e 4000 	str.w	r4, [lr, r0]
    db1e:	4845      	ldr	r0, [pc, #276]	; (dc34 <am_hal_gpio_pinconfig+0x250>)
    db20:	2473      	movs	r4, #115	; 0x73
    db22:	6604      	str	r4, [r0, #96]	; 0x60
    db24:	f8dc 4000 	ldr.w	r4, [ip]
    db28:	ea04 0409 	and.w	r4, r4, r9
    db2c:	4325      	orrs	r5, r4
    db2e:	f8cc 5000 	str.w	r5, [ip]
    db32:	f85b 4003 	ldr.w	r4, [fp, r3]
    db36:	4022      	ands	r2, r4
    db38:	4332      	orrs	r2, r6
    db3a:	f84b 2003 	str.w	r2, [fp, r3]
    db3e:	f85a 3001 	ldr.w	r3, [sl, r1]
    db42:	ea03 0909 	and.w	r9, r3, r9
    db46:	2400      	movs	r4, #0
    db48:	ea49 0707 	orr.w	r7, r9, r7
    db4c:	f84a 7001 	str.w	r7, [sl, r1]
    db50:	6604      	str	r4, [r0, #96]	; 0x60
    db52:	9803      	ldr	r0, [sp, #12]
    db54:	f000 f8c8 	bl	dce8 <am_hal_interrupt_master_set>
    db58:	4620      	mov	r0, r4
    db5a:	b005      	add	sp, #20
    db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db60:	f043 0304 	orr.w	r3, r3, #4
    db64:	00e1      	lsls	r1, r4, #3
    db66:	f001 0118 	and.w	r1, r1, #24
    db6a:	2701      	movs	r7, #1
    db6c:	408f      	lsls	r7, r1
    db6e:	e7a7      	b.n	dac0 <am_hal_gpio_pinconfig+0xdc>
    db70:	2006      	movs	r0, #6
    db72:	4770      	bx	lr
    db74:	4d28      	ldr	r5, [pc, #160]	; (dc18 <am_hal_gpio_pinconfig+0x234>)
    db76:	5d2d      	ldrb	r5, [r5, r4]
    db78:	3e02      	subs	r6, #2
    db7a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    db7e:	07ee      	lsls	r6, r5, #31
    db80:	d536      	bpl.n	dbf0 <am_hal_gpio_pinconfig+0x20c>
    db82:	2b00      	cmp	r3, #0
    db84:	f43f af5c 	beq.w	da40 <am_hal_gpio_pinconfig+0x5c>
    db88:	e74d      	b.n	da26 <am_hal_gpio_pinconfig+0x42>
    db8a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    db8e:	2a07      	cmp	r2, #7
    db90:	d030      	beq.n	dbf4 <am_hal_gpio_pinconfig+0x210>
    db92:	4d29      	ldr	r5, [pc, #164]	; (dc38 <am_hal_gpio_pinconfig+0x254>)
    db94:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    db98:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    db9c:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    dba0:	4290      	cmp	r0, r2
    dba2:	d029      	beq.n	dbf8 <am_hal_gpio_pinconfig+0x214>
    dba4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    dba8:	00a0      	lsls	r0, r4, #2
    dbaa:	786e      	ldrb	r6, [r5, #1]
    dbac:	4296      	cmp	r6, r2
    dbae:	d02d      	beq.n	dc0c <am_hal_gpio_pinconfig+0x228>
    dbb0:	78ae      	ldrb	r6, [r5, #2]
    dbb2:	4296      	cmp	r6, r2
    dbb4:	d02c      	beq.n	dc10 <am_hal_gpio_pinconfig+0x22c>
    dbb6:	78ed      	ldrb	r5, [r5, #3]
    dbb8:	4295      	cmp	r5, r2
    dbba:	d02b      	beq.n	dc14 <am_hal_gpio_pinconfig+0x230>
    dbbc:	481f      	ldr	r0, [pc, #124]	; (dc3c <am_hal_gpio_pinconfig+0x258>)
    dbbe:	b005      	add	sp, #20
    dbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbc4:	481e      	ldr	r0, [pc, #120]	; (dc40 <am_hal_gpio_pinconfig+0x25c>)
    dbc6:	b005      	add	sp, #20
    dbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbcc:	f04f 0801 	mov.w	r8, #1
    dbd0:	e75f      	b.n	da92 <am_hal_gpio_pinconfig+0xae>
    dbd2:	4b11      	ldr	r3, [pc, #68]	; (dc18 <am_hal_gpio_pinconfig+0x234>)
    dbd4:	5d1b      	ldrb	r3, [r3, r4]
    dbd6:	079d      	lsls	r5, r3, #30
    dbd8:	d5f4      	bpl.n	dbc4 <am_hal_gpio_pinconfig+0x1e0>
    dbda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dbde:	e72f      	b.n	da40 <am_hal_gpio_pinconfig+0x5c>
    dbe0:	2c14      	cmp	r4, #20
    dbe2:	f43f af1f 	beq.w	da24 <am_hal_gpio_pinconfig+0x40>
    dbe6:	4817      	ldr	r0, [pc, #92]	; (dc44 <am_hal_gpio_pinconfig+0x260>)
    dbe8:	e7b7      	b.n	db5a <am_hal_gpio_pinconfig+0x176>
    dbea:	2c14      	cmp	r4, #20
    dbec:	f47f af1a 	bne.w	da24 <am_hal_gpio_pinconfig+0x40>
    dbf0:	4815      	ldr	r0, [pc, #84]	; (dc48 <am_hal_gpio_pinconfig+0x264>)
    dbf2:	e7b2      	b.n	db5a <am_hal_gpio_pinconfig+0x176>
    dbf4:	4815      	ldr	r0, [pc, #84]	; (dc4c <am_hal_gpio_pinconfig+0x268>)
    dbf6:	e7b0      	b.n	db5a <am_hal_gpio_pinconfig+0x176>
    dbf8:	2200      	movs	r2, #0
    dbfa:	00a0      	lsls	r0, r4, #2
    dbfc:	0052      	lsls	r2, r2, #1
    dbfe:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dc02:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    dc06:	f04f 0800 	mov.w	r8, #0
    dc0a:	e74a      	b.n	daa2 <am_hal_gpio_pinconfig+0xbe>
    dc0c:	2201      	movs	r2, #1
    dc0e:	e7f5      	b.n	dbfc <am_hal_gpio_pinconfig+0x218>
    dc10:	2202      	movs	r2, #2
    dc12:	e7f3      	b.n	dbfc <am_hal_gpio_pinconfig+0x218>
    dc14:	2203      	movs	r2, #3
    dc16:	e7f1      	b.n	dbfc <am_hal_gpio_pinconfig+0x218>
    dc18:	0000f0e4 	.word	0x0000f0e4
    dc1c:	0000f118 	.word	0x0000f118
    dc20:	0000f214 	.word	0x0000f214
    dc24:	0000f0d8 	.word	0x0000f0d8
    dc28:	40010040 	.word	0x40010040
    dc2c:	400100e0 	.word	0x400100e0
    dc30:	400100b4 	.word	0x400100b4
    dc34:	40010000 	.word	0x40010000
    dc38:	0000f14c 	.word	0x0000f14c
    dc3c:	08000104 	.word	0x08000104
    dc40:	08000102 	.word	0x08000102
    dc44:	08000101 	.word	0x08000101
    dc48:	08000100 	.word	0x08000100
    dc4c:	08000103 	.word	0x08000103

0000dc50 <am_hal_gpio_state_write>:
    dc50:	2831      	cmp	r0, #49	; 0x31
    dc52:	d81a      	bhi.n	dc8a <am_hal_gpio_state_write+0x3a>
    dc54:	b570      	push	{r4, r5, r6, lr}
    dc56:	2905      	cmp	r1, #5
    dc58:	b082      	sub	sp, #8
    dc5a:	460d      	mov	r5, r1
    dc5c:	d812      	bhi.n	dc84 <am_hal_gpio_state_write+0x34>
    dc5e:	f000 031f 	and.w	r3, r0, #31
    dc62:	2201      	movs	r2, #1
    dc64:	08c0      	lsrs	r0, r0, #3
    dc66:	fa02 f603 	lsl.w	r6, r2, r3
    dc6a:	f000 0404 	and.w	r4, r0, #4
    dc6e:	f000 f837 	bl	dce0 <am_hal_interrupt_master_disable>
    dc72:	3d01      	subs	r5, #1
    dc74:	9001      	str	r0, [sp, #4]
    dc76:	2d04      	cmp	r5, #4
    dc78:	d821      	bhi.n	dcbe <am_hal_gpio_state_write+0x6e>
    dc7a:	e8df f005 	tbb	[pc, r5]
    dc7e:	1512      	.short	0x1512
    dc80:	1d1a      	.short	0x1d1a
    dc82:	08          	.byte	0x08
    dc83:	00          	.byte	0x00
    dc84:	2006      	movs	r0, #6
    dc86:	b002      	add	sp, #8
    dc88:	bd70      	pop	{r4, r5, r6, pc}
    dc8a:	2005      	movs	r0, #5
    dc8c:	4770      	bx	lr
    dc8e:	4a0d      	ldr	r2, [pc, #52]	; (dcc4 <am_hal_gpio_state_write+0x74>)
    dc90:	58a3      	ldr	r3, [r4, r2]
    dc92:	4073      	eors	r3, r6
    dc94:	50a3      	str	r3, [r4, r2]
    dc96:	9801      	ldr	r0, [sp, #4]
    dc98:	f000 f826 	bl	dce8 <am_hal_interrupt_master_set>
    dc9c:	2000      	movs	r0, #0
    dc9e:	b002      	add	sp, #8
    dca0:	bd70      	pop	{r4, r5, r6, pc}
    dca2:	4b09      	ldr	r3, [pc, #36]	; (dcc8 <am_hal_gpio_state_write+0x78>)
    dca4:	50e6      	str	r6, [r4, r3]
    dca6:	e7f6      	b.n	dc96 <am_hal_gpio_state_write+0x46>
    dca8:	4a08      	ldr	r2, [pc, #32]	; (dccc <am_hal_gpio_state_write+0x7c>)
    dcaa:	58a3      	ldr	r3, [r4, r2]
    dcac:	4073      	eors	r3, r6
    dcae:	50a3      	str	r3, [r4, r2]
    dcb0:	e7f1      	b.n	dc96 <am_hal_gpio_state_write+0x46>
    dcb2:	4b04      	ldr	r3, [pc, #16]	; (dcc4 <am_hal_gpio_state_write+0x74>)
    dcb4:	50e6      	str	r6, [r4, r3]
    dcb6:	e7ee      	b.n	dc96 <am_hal_gpio_state_write+0x46>
    dcb8:	4b05      	ldr	r3, [pc, #20]	; (dcd0 <am_hal_gpio_state_write+0x80>)
    dcba:	50e6      	str	r6, [r4, r3]
    dcbc:	e7eb      	b.n	dc96 <am_hal_gpio_state_write+0x46>
    dcbe:	4b05      	ldr	r3, [pc, #20]	; (dcd4 <am_hal_gpio_state_write+0x84>)
    dcc0:	50e6      	str	r6, [r4, r3]
    dcc2:	e7e8      	b.n	dc96 <am_hal_gpio_state_write+0x46>
    dcc4:	400100b4 	.word	0x400100b4
    dcc8:	40010090 	.word	0x40010090
    dccc:	40010088 	.word	0x40010088
    dcd0:	400100a8 	.word	0x400100a8
    dcd4:	40010098 	.word	0x40010098

0000dcd8 <am_hal_interrupt_master_enable>:
    dcd8:	f3ef 8010 	mrs	r0, PRIMASK
    dcdc:	b662      	cpsie	i
    dcde:	4770      	bx	lr

0000dce0 <am_hal_interrupt_master_disable>:
    dce0:	f3ef 8010 	mrs	r0, PRIMASK
    dce4:	b672      	cpsid	i
    dce6:	4770      	bx	lr

0000dce8 <am_hal_interrupt_master_set>:
    dce8:	f380 8810 	msr	PRIMASK, r0
    dcec:	4770      	bx	lr
    dcee:	bf00      	nop

0000dcf0 <am_hal_mcuctrl_info_get>:
    dcf0:	2900      	cmp	r1, #0
    dcf2:	f000 808f 	beq.w	de14 <am_hal_mcuctrl_info_get+0x124>
    dcf6:	2801      	cmp	r0, #1
    dcf8:	b430      	push	{r4, r5}
    dcfa:	d006      	beq.n	dd0a <am_hal_mcuctrl_info_get+0x1a>
    dcfc:	2802      	cmp	r0, #2
    dcfe:	d06d      	beq.n	dddc <am_hal_mcuctrl_info_get+0xec>
    dd00:	2800      	cmp	r0, #0
    dd02:	d055      	beq.n	ddb0 <am_hal_mcuctrl_info_get+0xc0>
    dd04:	2006      	movs	r0, #6
    dd06:	bc30      	pop	{r4, r5}
    dd08:	4770      	bx	lr
    dd0a:	4a43      	ldr	r2, [pc, #268]	; (de18 <am_hal_mcuctrl_info_get+0x128>)
    dd0c:	4843      	ldr	r0, [pc, #268]	; (de1c <am_hal_mcuctrl_info_get+0x12c>)
    dd0e:	6813      	ldr	r3, [r2, #0]
    dd10:	600b      	str	r3, [r1, #0]
    dd12:	6854      	ldr	r4, [r2, #4]
    dd14:	604c      	str	r4, [r1, #4]
    dd16:	6894      	ldr	r4, [r2, #8]
    dd18:	608c      	str	r4, [r1, #8]
    dd1a:	68d4      	ldr	r4, [r2, #12]
    dd1c:	60cc      	str	r4, [r1, #12]
    dd1e:	f3c3 5503 	ubfx	r5, r3, #20, #4
    dd22:	6914      	ldr	r4, [r2, #16]
    dd24:	610c      	str	r4, [r1, #16]
    dd26:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    dd2a:	4c3d      	ldr	r4, [pc, #244]	; (de20 <am_hal_mcuctrl_info_get+0x130>)
    dd2c:	6950      	ldr	r0, [r2, #20]
    dd2e:	6148      	str	r0, [r1, #20]
    dd30:	f003 0201 	and.w	r2, r3, #1
    dd34:	f3c3 4303 	ubfx	r3, r3, #16, #4
    dd38:	e9c1 2506 	strd	r2, r5, [r1, #24]
    dd3c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    dd40:	4a38      	ldr	r2, [pc, #224]	; (de24 <am_hal_mcuctrl_info_get+0x134>)
    dd42:	620b      	str	r3, [r1, #32]
    dd44:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    dd48:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    dd4c:	b2db      	uxtb	r3, r3
    dd4e:	f000 000f 	and.w	r0, r0, #15
    dd52:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    dd56:	624b      	str	r3, [r1, #36]	; 0x24
    dd58:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    dd5c:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    dd60:	f3c3 1303 	ubfx	r3, r3, #4, #4
    dd64:	f000 000f 	and.w	r0, r0, #15
    dd68:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    dd6c:	628b      	str	r3, [r1, #40]	; 0x28
    dd6e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    dd72:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    dd76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    dd7a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    dd7e:	4303      	orrs	r3, r0
    dd80:	62cb      	str	r3, [r1, #44]	; 0x2c
    dd82:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    dd86:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    dd8a:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    dd8e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    dd92:	b2db      	uxtb	r3, r3
    dd94:	041b      	lsls	r3, r3, #16
    dd96:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    dd9a:	fa5f fc82 	uxtb.w	ip, r2
    dd9e:	ea43 030c 	orr.w	r3, r3, ip
    dda2:	b2c2      	uxtb	r2, r0
    dda4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dda8:	630b      	str	r3, [r1, #48]	; 0x30
    ddaa:	2000      	movs	r0, #0
    ddac:	bc30      	pop	{r4, r5}
    ddae:	4770      	bx	lr
    ddb0:	4a19      	ldr	r2, [pc, #100]	; (de18 <am_hal_mcuctrl_info_get+0x128>)
    ddb2:	6993      	ldr	r3, [r2, #24]
    ddb4:	f3c3 1480 	ubfx	r4, r3, #6, #1
    ddb8:	700c      	strb	r4, [r1, #0]
    ddba:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    ddbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ddc2:	704b      	strb	r3, [r1, #1]
    ddc4:	f3c4 6381 	ubfx	r3, r4, #26, #2
    ddc8:	710b      	strb	r3, [r1, #4]
    ddca:	6953      	ldr	r3, [r2, #20]
    ddcc:	f3c3 0240 	ubfx	r2, r3, #1, #1
    ddd0:	f003 0301 	and.w	r3, r3, #1
    ddd4:	bc30      	pop	{r4, r5}
    ddd6:	708a      	strb	r2, [r1, #2]
    ddd8:	70cb      	strb	r3, [r1, #3]
    ddda:	4770      	bx	lr
    dddc:	4a0e      	ldr	r2, [pc, #56]	; (de18 <am_hal_mcuctrl_info_get+0x128>)
    ddde:	6848      	ldr	r0, [r1, #4]
    dde0:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    dde4:	f003 0401 	and.w	r4, r3, #1
    dde8:	700c      	strb	r4, [r1, #0]
    ddea:	f3c3 0440 	ubfx	r4, r3, #1, #1
    ddee:	720c      	strb	r4, [r1, #8]
    ddf0:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    ddf4:	60cc      	str	r4, [r1, #12]
    ddf6:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    ddfa:	4320      	orrs	r0, r4
    ddfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
    de00:	6048      	str	r0, [r1, #4]
    de02:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    de06:	740b      	strb	r3, [r1, #16]
    de08:	694b      	ldr	r3, [r1, #20]
    de0a:	4313      	orrs	r3, r2
    de0c:	2000      	movs	r0, #0
    de0e:	bc30      	pop	{r4, r5}
    de10:	614b      	str	r3, [r1, #20]
    de12:	4770      	bx	lr
    de14:	2006      	movs	r0, #6
    de16:	4770      	bx	lr
    de18:	40020000 	.word	0x40020000
    de1c:	0000f248 	.word	0x0000f248
    de20:	0000f288 	.word	0x0000f288
    de24:	f0000f00 	.word	0xf0000f00

0000de28 <am_hal_reset_control>:
    de28:	2803      	cmp	r0, #3
    de2a:	d819      	bhi.n	de60 <am_hal_reset_control+0x38>
    de2c:	e8df f000 	tbb	[pc, r0]
    de30:	02080c12 	.word	0x02080c12
    de34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    de38:	2201      	movs	r2, #1
    de3a:	615a      	str	r2, [r3, #20]
    de3c:	2000      	movs	r0, #0
    de3e:	4770      	bx	lr
    de40:	4b08      	ldr	r3, [pc, #32]	; (de64 <am_hal_reset_control+0x3c>)
    de42:	2000      	movs	r0, #0
    de44:	6018      	str	r0, [r3, #0]
    de46:	4770      	bx	lr
    de48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    de4c:	221b      	movs	r2, #27
    de4e:	605a      	str	r2, [r3, #4]
    de50:	2000      	movs	r0, #0
    de52:	4770      	bx	lr
    de54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    de58:	22d4      	movs	r2, #212	; 0xd4
    de5a:	609a      	str	r2, [r3, #8]
    de5c:	2000      	movs	r0, #0
    de5e:	4770      	bx	lr
    de60:	2006      	movs	r0, #6
    de62:	4770      	bx	lr
    de64:	4ffff000 	.word	0x4ffff000

0000de68 <am_hal_reset_status_get>:
    de68:	b390      	cbz	r0, ded0 <am_hal_reset_status_get+0x68>
    de6a:	491a      	ldr	r1, [pc, #104]	; (ded4 <am_hal_reset_status_get+0x6c>)
    de6c:	680b      	ldr	r3, [r1, #0]
    de6e:	b500      	push	{lr}
    de70:	4602      	mov	r2, r0
    de72:	b913      	cbnz	r3, de7a <am_hal_reset_status_get+0x12>
    de74:	4b18      	ldr	r3, [pc, #96]	; (ded8 <am_hal_reset_status_get+0x70>)
    de76:	681b      	ldr	r3, [r3, #0]
    de78:	600b      	str	r3, [r1, #0]
    de7a:	f3c3 0140 	ubfx	r1, r3, #1, #1
    de7e:	70d1      	strb	r1, [r2, #3]
    de80:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    de84:	f003 0c01 	and.w	ip, r3, #1
    de88:	f3c3 0080 	ubfx	r0, r3, #2, #1
    de8c:	7151      	strb	r1, [r2, #5]
    de8e:	f3c3 1140 	ubfx	r1, r3, #5, #1
    de92:	f882 c002 	strb.w	ip, [r2, #2]
    de96:	7110      	strb	r0, [r2, #4]
    de98:	f3c3 1c00 	ubfx	ip, r3, #4, #1
    de9c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    dea0:	71d1      	strb	r1, [r2, #7]
    dea2:	f3c3 11c0 	ubfx	r1, r3, #7, #1
    dea6:	f882 c006 	strb.w	ip, [r2, #6]
    deaa:	f3c3 2e00 	ubfx	lr, r3, #8, #1
    deae:	7210      	strb	r0, [r2, #8]
    deb0:	7251      	strb	r1, [r2, #9]
    deb2:	f3c3 2c40 	ubfx	ip, r3, #9, #1
    deb6:	f3c3 2180 	ubfx	r1, r3, #10, #1
    deba:	fab3 f083 	clz	r0, r3
    debe:	8013      	strh	r3, [r2, #0]
    dec0:	f882 e00a 	strb.w	lr, [r2, #10]
    dec4:	f882 c00b 	strb.w	ip, [r2, #11]
    dec8:	7311      	strb	r1, [r2, #12]
    deca:	0940      	lsrs	r0, r0, #5
    decc:	f85d fb04 	ldr.w	pc, [sp], #4
    ded0:	2006      	movs	r0, #6
    ded2:	4770      	bx	lr
    ded4:	10001170 	.word	0x10001170
    ded8:	4ffff000 	.word	0x4ffff000

0000dedc <am_hal_sysctrl_sleep>:
    dedc:	b510      	push	{r4, lr}
    dede:	b082      	sub	sp, #8
    dee0:	4604      	mov	r4, r0
    dee2:	f7ff fefd 	bl	dce0 <am_hal_interrupt_master_disable>
    dee6:	9001      	str	r0, [sp, #4]
    dee8:	b124      	cbz	r4, def4 <am_hal_sysctrl_sleep+0x18>
    deea:	4b12      	ldr	r3, [pc, #72]	; (df34 <am_hal_sysctrl_sleep+0x58>)
    deec:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    def0:	07db      	lsls	r3, r3, #31
    def2:	d513      	bpl.n	df1c <am_hal_sysctrl_sleep+0x40>
    def4:	4a10      	ldr	r2, [pc, #64]	; (df38 <am_hal_sysctrl_sleep+0x5c>)
    def6:	6913      	ldr	r3, [r2, #16]
    def8:	f023 0304 	bic.w	r3, r3, #4
    defc:	6113      	str	r3, [r2, #16]
    defe:	f3bf 8f4f 	dsb	sy
    df02:	4a0e      	ldr	r2, [pc, #56]	; (df3c <am_hal_sysctrl_sleep+0x60>)
    df04:	4b0e      	ldr	r3, [pc, #56]	; (df40 <am_hal_sysctrl_sleep+0x64>)
    df06:	6812      	ldr	r2, [r2, #0]
    df08:	601a      	str	r2, [r3, #0]
    df0a:	bf30      	wfi
    df0c:	f3bf 8f6f 	isb	sy
    df10:	9801      	ldr	r0, [sp, #4]
    df12:	b002      	add	sp, #8
    df14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df18:	f7ff bee6 	b.w	dce8 <am_hal_interrupt_master_set>
    df1c:	4b09      	ldr	r3, [pc, #36]	; (df44 <am_hal_sysctrl_sleep+0x68>)
    df1e:	681a      	ldr	r2, [r3, #0]
    df20:	b912      	cbnz	r2, df28 <am_hal_sysctrl_sleep+0x4c>
    df22:	4a09      	ldr	r2, [pc, #36]	; (df48 <am_hal_sysctrl_sleep+0x6c>)
    df24:	6812      	ldr	r2, [r2, #0]
    df26:	601a      	str	r2, [r3, #0]
    df28:	4a03      	ldr	r2, [pc, #12]	; (df38 <am_hal_sysctrl_sleep+0x5c>)
    df2a:	6913      	ldr	r3, [r2, #16]
    df2c:	f043 0304 	orr.w	r3, r3, #4
    df30:	6113      	str	r3, [r2, #16]
    df32:	e7e4      	b.n	defe <am_hal_sysctrl_sleep+0x22>
    df34:	40020000 	.word	0x40020000
    df38:	e000ed00 	.word	0xe000ed00
    df3c:	5fff0000 	.word	0x5fff0000
    df40:	10001174 	.word	0x10001174
    df44:	10001170 	.word	0x10001170
    df48:	4ffff000 	.word	0x4ffff000

0000df4c <am_hal_wdt_init>:
    df4c:	8883      	ldrh	r3, [r0, #4]
    df4e:	88c2      	ldrh	r2, [r0, #6]
    df50:	6801      	ldr	r1, [r0, #0]
    df52:	041b      	lsls	r3, r3, #16
    df54:	0212      	lsls	r2, r2, #8
    df56:	b410      	push	{r4}
    df58:	b292      	uxth	r2, r2
    df5a:	4c16      	ldr	r4, [pc, #88]	; (dfb4 <am_hal_wdt_init+0x68>)
    df5c:	f421 007f 	bic.w	r0, r1, #16711680	; 0xff0000
    df60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    df64:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
    df68:	4313      	orrs	r3, r2
    df6a:	4303      	orrs	r3, r0
    df6c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
    df70:	f011 0f02 	tst.w	r1, #2
    df74:	bf14      	ite	ne
    df76:	f040 0001 	orrne.w	r0, r0, #1
    df7a:	f020 0001 	biceq.w	r0, r0, #1
    df7e:	f001 0204 	and.w	r2, r1, #4
    df82:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    df86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    df8a:	b16a      	cbz	r2, dfa8 <am_hal_wdt_init+0x5c>
    df8c:	6802      	ldr	r2, [r0, #0]
    df8e:	f042 0202 	orr.w	r2, r2, #2
    df92:	6002      	str	r2, [r0, #0]
    df94:	4a07      	ldr	r2, [pc, #28]	; (dfb4 <am_hal_wdt_init+0x68>)
    df96:	f85d 4b04 	ldr.w	r4, [sp], #4
    df9a:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    df9e:	bf08      	it	eq
    dfa0:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
    dfa4:	6013      	str	r3, [r2, #0]
    dfa6:	4770      	bx	lr
    dfa8:	6802      	ldr	r2, [r0, #0]
    dfaa:	f022 0202 	bic.w	r2, r2, #2
    dfae:	6002      	str	r2, [r0, #0]
    dfb0:	e7f0      	b.n	df94 <am_hal_wdt_init+0x48>
    dfb2:	bf00      	nop
    dfb4:	40024000 	.word	0x40024000

0000dfb8 <am_hal_wdt_start>:
    dfb8:	4b03      	ldr	r3, [pc, #12]	; (dfc8 <am_hal_wdt_start+0x10>)
    dfba:	681a      	ldr	r2, [r3, #0]
    dfbc:	21b2      	movs	r1, #178	; 0xb2
    dfbe:	f042 0201 	orr.w	r2, r2, #1
    dfc2:	601a      	str	r2, [r3, #0]
    dfc4:	6059      	str	r1, [r3, #4]
    dfc6:	4770      	bx	lr
    dfc8:	40024000 	.word	0x40024000

0000dfcc <am_hal_wdt_halt>:
    dfcc:	4a02      	ldr	r2, [pc, #8]	; (dfd8 <am_hal_wdt_halt+0xc>)
    dfce:	6813      	ldr	r3, [r2, #0]
    dfd0:	f023 0301 	bic.w	r3, r3, #1
    dfd4:	6013      	str	r3, [r2, #0]
    dfd6:	4770      	bx	lr
    dfd8:	40024000 	.word	0x40024000

0000dfdc <am_hal_wdt_int_clear>:
    dfdc:	4b02      	ldr	r3, [pc, #8]	; (dfe8 <am_hal_wdt_int_clear+0xc>)
    dfde:	2201      	movs	r2, #1
    dfe0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    dfe4:	4770      	bx	lr
    dfe6:	bf00      	nop
    dfe8:	40024000 	.word	0x40024000

0000dfec <am_bsp_uart_string_print>:
    dfec:	b530      	push	{r4, r5, lr}
    dfee:	b087      	sub	sp, #28
    dff0:	7804      	ldrb	r4, [r0, #0]
    dff2:	2300      	movs	r3, #0
    dff4:	4605      	mov	r5, r0
    dff6:	9300      	str	r3, [sp, #0]
    dff8:	b13c      	cbz	r4, e00a <am_bsp_uart_string_print+0x1e>
    dffa:	4603      	mov	r3, r0
    dffc:	f1c0 0101 	rsb	r1, r0, #1
    e000:	18cc      	adds	r4, r1, r3
    e002:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e006:	2a00      	cmp	r2, #0
    e008:	d1fa      	bne.n	e000 <am_bsp_uart_string_print+0x14>
    e00a:	4b0a      	ldr	r3, [pc, #40]	; (e034 <am_bsp_uart_string_print+0x48>)
    e00c:	f8cd d014 	str.w	sp, [sp, #20]
    e010:	6818      	ldr	r0, [r3, #0]
    e012:	2200      	movs	r2, #0
    e014:	f04f 33ff 	mov.w	r3, #4294967295
    e018:	a901      	add	r1, sp, #4
    e01a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    e01e:	e9cd 2501 	strd	r2, r5, [sp, #4]
    e022:	f000 fcc9 	bl	e9b8 <am_hal_uart_transfer>
    e026:	9b00      	ldr	r3, [sp, #0]
    e028:	42a3      	cmp	r3, r4
    e02a:	d000      	beq.n	e02e <am_bsp_uart_string_print+0x42>
    e02c:	e7fe      	b.n	e02c <am_bsp_uart_string_print+0x40>
    e02e:	b007      	add	sp, #28
    e030:	bd30      	pop	{r4, r5, pc}
    e032:	bf00      	nop
    e034:	10001178 	.word	0x10001178

0000e038 <am_bsp_low_power_init>:
    e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e03a:	f000 f9d3 	bl	e3e4 <am_hal_pwrctrl_low_power_init>
    e03e:	f000 faaf 	bl	e5a0 <am_hal_rtc_osc_disable>
    e042:	4b0b      	ldr	r3, [pc, #44]	; (e070 <am_bsp_low_power_init+0x38>)
    e044:	4f0b      	ldr	r7, [pc, #44]	; (e074 <am_bsp_low_power_init+0x3c>)
    e046:	681e      	ldr	r6, [r3, #0]
    e048:	2400      	movs	r4, #0
    e04a:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    e04e:	4631      	mov	r1, r6
    e050:	4628      	mov	r0, r5
    e052:	f7ff fcc7 	bl	d9e4 <am_hal_gpio_pinconfig>
    e056:	2103      	movs	r1, #3
    e058:	4628      	mov	r0, r5
    e05a:	f7ff fdf9 	bl	dc50 <am_hal_gpio_state_write>
    e05e:	3401      	adds	r4, #1
    e060:	2100      	movs	r1, #0
    e062:	4628      	mov	r0, r5
    e064:	f7ff fdf4 	bl	dc50 <am_hal_gpio_state_write>
    e068:	2c05      	cmp	r4, #5
    e06a:	d1ee      	bne.n	e04a <am_bsp_low_power_init+0x12>
    e06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e06e:	bf00      	nop
    e070:	0000f0dc 	.word	0x0000f0dc
    e074:	10001014 	.word	0x10001014

0000e078 <am_bsp_debug_printf_enable>:
    e078:	b510      	push	{r4, lr}
    e07a:	4a2e      	ldr	r2, [pc, #184]	; (e134 <am_bsp_debug_printf_enable+0xbc>)
    e07c:	6813      	ldr	r3, [r2, #0]
    e07e:	2b01      	cmp	r3, #1
    e080:	b086      	sub	sp, #24
    e082:	d005      	beq.n	e090 <am_bsp_debug_printf_enable+0x18>
    e084:	2b02      	cmp	r3, #2
    e086:	d014      	beq.n	e0b2 <am_bsp_debug_printf_enable+0x3a>
    e088:	2b03      	cmp	r3, #3
    e08a:	d030      	beq.n	e0ee <am_bsp_debug_printf_enable+0x76>
    e08c:	b006      	add	sp, #24
    e08e:	bd10      	pop	{r4, pc}
    e090:	f000 f8bc 	bl	e20c <am_hal_itm_enable>
    e094:	4b28      	ldr	r3, [pc, #160]	; (e138 <am_bsp_debug_printf_enable+0xc0>)
    e096:	9301      	str	r3, [sp, #4]
    e098:	a801      	add	r0, sp, #4
    e09a:	f000 fa8b 	bl	e5b4 <am_hal_tpiu_enable>
    e09e:	4b27      	ldr	r3, [pc, #156]	; (e13c <am_bsp_debug_printf_enable+0xc4>)
    e0a0:	2029      	movs	r0, #41	; 0x29
    e0a2:	6819      	ldr	r1, [r3, #0]
    e0a4:	f7ff fc9e 	bl	d9e4 <am_hal_gpio_pinconfig>
    e0a8:	4825      	ldr	r0, [pc, #148]	; (e140 <am_bsp_debug_printf_enable+0xc8>)
    e0aa:	f7fe fb01 	bl	c6b0 <am_util_stdio_printf_init>
    e0ae:	b006      	add	sp, #24
    e0b0:	bd10      	pop	{r4, pc}
    e0b2:	4c24      	ldr	r4, [pc, #144]	; (e144 <am_bsp_debug_printf_enable+0xcc>)
    e0b4:	2000      	movs	r0, #0
    e0b6:	4621      	mov	r1, r4
    e0b8:	f000 facc 	bl	e654 <am_hal_uart_initialize>
    e0bc:	2200      	movs	r2, #0
    e0be:	4611      	mov	r1, r2
    e0c0:	6820      	ldr	r0, [r4, #0]
    e0c2:	f000 fb03 	bl	e6cc <am_hal_uart_power_control>
    e0c6:	4920      	ldr	r1, [pc, #128]	; (e148 <am_bsp_debug_printf_enable+0xd0>)
    e0c8:	6820      	ldr	r0, [r4, #0]
    e0ca:	f000 fb77 	bl	e7bc <am_hal_uart_configure>
    e0ce:	4b1f      	ldr	r3, [pc, #124]	; (e14c <am_bsp_debug_printf_enable+0xd4>)
    e0d0:	2016      	movs	r0, #22
    e0d2:	6819      	ldr	r1, [r3, #0]
    e0d4:	f7ff fc86 	bl	d9e4 <am_hal_gpio_pinconfig>
    e0d8:	4b1d      	ldr	r3, [pc, #116]	; (e150 <am_bsp_debug_printf_enable+0xd8>)
    e0da:	2017      	movs	r0, #23
    e0dc:	6819      	ldr	r1, [r3, #0]
    e0de:	f7ff fc81 	bl	d9e4 <am_hal_gpio_pinconfig>
    e0e2:	481c      	ldr	r0, [pc, #112]	; (e154 <am_bsp_debug_printf_enable+0xdc>)
    e0e4:	b006      	add	sp, #24
    e0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0ea:	f7fe bae1 	b.w	c6b0 <am_util_stdio_printf_init>
    e0ee:	4c15      	ldr	r4, [pc, #84]	; (e144 <am_bsp_debug_printf_enable+0xcc>)
    e0f0:	2302      	movs	r3, #2
    e0f2:	4621      	mov	r1, r4
    e0f4:	2000      	movs	r0, #0
    e0f6:	6013      	str	r3, [r2, #0]
    e0f8:	f000 faac 	bl	e654 <am_hal_uart_initialize>
    e0fc:	2200      	movs	r2, #0
    e0fe:	4611      	mov	r1, r2
    e100:	6820      	ldr	r0, [r4, #0]
    e102:	f000 fae3 	bl	e6cc <am_hal_uart_power_control>
    e106:	4914      	ldr	r1, [pc, #80]	; (e158 <am_bsp_debug_printf_enable+0xe0>)
    e108:	6820      	ldr	r0, [r4, #0]
    e10a:	f000 fb57 	bl	e7bc <am_hal_uart_configure>
    e10e:	4b0f      	ldr	r3, [pc, #60]	; (e14c <am_bsp_debug_printf_enable+0xd4>)
    e110:	2016      	movs	r0, #22
    e112:	6819      	ldr	r1, [r3, #0]
    e114:	f7ff fc66 	bl	d9e4 <am_hal_gpio_pinconfig>
    e118:	4b0d      	ldr	r3, [pc, #52]	; (e150 <am_bsp_debug_printf_enable+0xd8>)
    e11a:	2017      	movs	r0, #23
    e11c:	6819      	ldr	r1, [r3, #0]
    e11e:	f7ff fc61 	bl	d9e4 <am_hal_gpio_pinconfig>
    e122:	480c      	ldr	r0, [pc, #48]	; (e154 <am_bsp_debug_printf_enable+0xdc>)
    e124:	f7fe fac4 	bl	c6b0 <am_util_stdio_printf_init>
    e128:	4b0c      	ldr	r3, [pc, #48]	; (e15c <am_bsp_debug_printf_enable+0xe4>)
    e12a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e12e:	601a      	str	r2, [r3, #0]
    e130:	b006      	add	sp, #24
    e132:	bd10      	pop	{r4, pc}
    e134:	1000117c 	.word	0x1000117c
    e138:	000f4240 	.word	0x000f4240
    e13c:	0000f2f8 	.word	0x0000f2f8
    e140:	0000e309 	.word	0x0000e309
    e144:	10001178 	.word	0x10001178
    e148:	0000f2c8 	.word	0x0000f2c8
    e14c:	0000f2f4 	.word	0x0000f2f4
    e150:	0000f2f0 	.word	0x0000f2f0
    e154:	0000dfed 	.word	0x0000dfed
    e158:	1000103c 	.word	0x1000103c
    e15c:	e000e100 	.word	0xe000e100

0000e160 <am_bsp_debug_printf_disable>:
    e160:	b538      	push	{r3, r4, r5, lr}
    e162:	4b17      	ldr	r3, [pc, #92]	; (e1c0 <am_bsp_debug_printf_disable+0x60>)
    e164:	681c      	ldr	r4, [r3, #0]
    e166:	2c01      	cmp	r4, #1
    e168:	d002      	beq.n	e170 <am_bsp_debug_printf_disable+0x10>
    e16a:	2c02      	cmp	r4, #2
    e16c:	d00c      	beq.n	e188 <am_bsp_debug_printf_disable+0x28>
    e16e:	bd38      	pop	{r3, r4, r5, pc}
    e170:	f000 f870 	bl	e254 <am_hal_itm_disable>
    e174:	2000      	movs	r0, #0
    e176:	f7fe fa9b 	bl	c6b0 <am_util_stdio_printf_init>
    e17a:	4b12      	ldr	r3, [pc, #72]	; (e1c4 <am_bsp_debug_printf_disable+0x64>)
    e17c:	2029      	movs	r0, #41	; 0x29
    e17e:	6819      	ldr	r1, [r3, #0]
    e180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e184:	f7ff bc2e 	b.w	d9e4 <am_hal_gpio_pinconfig>
    e188:	4d0f      	ldr	r5, [pc, #60]	; (e1c8 <am_bsp_debug_printf_disable+0x68>)
    e18a:	6828      	ldr	r0, [r5, #0]
    e18c:	f000 fe14 	bl	edb8 <am_hal_uart_tx_flush>
    e190:	2000      	movs	r0, #0
    e192:	f7fe fa8d 	bl	c6b0 <am_util_stdio_printf_init>
    e196:	4621      	mov	r1, r4
    e198:	2200      	movs	r2, #0
    e19a:	6828      	ldr	r0, [r5, #0]
    e19c:	f000 fa96 	bl	e6cc <am_hal_uart_power_control>
    e1a0:	6828      	ldr	r0, [r5, #0]
    e1a2:	f000 fa7f 	bl	e6a4 <am_hal_uart_deinitialize>
    e1a6:	4b07      	ldr	r3, [pc, #28]	; (e1c4 <am_bsp_debug_printf_disable+0x64>)
    e1a8:	681c      	ldr	r4, [r3, #0]
    e1aa:	2016      	movs	r0, #22
    e1ac:	4621      	mov	r1, r4
    e1ae:	f7ff fc19 	bl	d9e4 <am_hal_gpio_pinconfig>
    e1b2:	4621      	mov	r1, r4
    e1b4:	2017      	movs	r0, #23
    e1b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e1ba:	f7ff bc13 	b.w	d9e4 <am_hal_gpio_pinconfig>
    e1be:	bf00      	nop
    e1c0:	1000117c 	.word	0x1000117c
    e1c4:	0000f0d8 	.word	0x0000f0d8
    e1c8:	10001178 	.word	0x10001178

0000e1cc <am_bsp_itm_printf_enable>:
    e1cc:	b500      	push	{lr}
    e1ce:	4b0b      	ldr	r3, [pc, #44]	; (e1fc <am_bsp_itm_printf_enable+0x30>)
    e1d0:	b087      	sub	sp, #28
    e1d2:	2201      	movs	r2, #1
    e1d4:	601a      	str	r2, [r3, #0]
    e1d6:	f000 f819 	bl	e20c <am_hal_itm_enable>
    e1da:	4b09      	ldr	r3, [pc, #36]	; (e200 <am_bsp_itm_printf_enable+0x34>)
    e1dc:	9301      	str	r3, [sp, #4]
    e1de:	a801      	add	r0, sp, #4
    e1e0:	f000 f9e8 	bl	e5b4 <am_hal_tpiu_enable>
    e1e4:	4b07      	ldr	r3, [pc, #28]	; (e204 <am_bsp_itm_printf_enable+0x38>)
    e1e6:	2029      	movs	r0, #41	; 0x29
    e1e8:	6819      	ldr	r1, [r3, #0]
    e1ea:	f7ff fbfb 	bl	d9e4 <am_hal_gpio_pinconfig>
    e1ee:	4806      	ldr	r0, [pc, #24]	; (e208 <am_bsp_itm_printf_enable+0x3c>)
    e1f0:	f7fe fa5e 	bl	c6b0 <am_util_stdio_printf_init>
    e1f4:	b007      	add	sp, #28
    e1f6:	f85d fb04 	ldr.w	pc, [sp], #4
    e1fa:	bf00      	nop
    e1fc:	1000117c 	.word	0x1000117c
    e200:	000f4240 	.word	0x000f4240
    e204:	0000f2f8 	.word	0x0000f2f8
    e208:	0000e309 	.word	0x0000e309

0000e20c <am_hal_itm_enable>:
    e20c:	4a0e      	ldr	r2, [pc, #56]	; (e248 <am_hal_itm_enable+0x3c>)
    e20e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e216:	b410      	push	{r4}
    e218:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e21c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e220:	01db      	lsls	r3, r3, #7
    e222:	d5fb      	bpl.n	e21c <am_hal_itm_enable+0x10>
    e224:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e228:	4c08      	ldr	r4, [pc, #32]	; (e24c <am_hal_itm_enable+0x40>)
    e22a:	4a09      	ldr	r2, [pc, #36]	; (e250 <am_hal_itm_enable+0x44>)
    e22c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e230:	200f      	movs	r0, #15
    e232:	f04f 31ff 	mov.w	r1, #4294967295
    e236:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e23a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e23e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e242:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e246:	4770      	bx	lr
    e248:	e000ed00 	.word	0xe000ed00
    e24c:	c5acce55 	.word	0xc5acce55
    e250:	00150511 	.word	0x00150511

0000e254 <am_hal_itm_disable>:
    e254:	4b27      	ldr	r3, [pc, #156]	; (e2f4 <am_hal_itm_disable+0xa0>)
    e256:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e25a:	b510      	push	{r4, lr}
    e25c:	b9cb      	cbnz	r3, e292 <am_hal_itm_disable+0x3e>
    e25e:	4a26      	ldr	r2, [pc, #152]	; (e2f8 <am_hal_itm_disable+0xa4>)
    e260:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e268:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e26c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e270:	01d9      	lsls	r1, r3, #7
    e272:	d5fb      	bpl.n	e26c <am_hal_itm_disable+0x18>
    e274:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e278:	4c20      	ldr	r4, [pc, #128]	; (e2fc <am_hal_itm_disable+0xa8>)
    e27a:	4a21      	ldr	r2, [pc, #132]	; (e300 <am_hal_itm_disable+0xac>)
    e27c:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e280:	200f      	movs	r0, #15
    e282:	f04f 31ff 	mov.w	r1, #4294967295
    e286:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e28a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e28e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e292:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e296:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e29a:	021b      	lsls	r3, r3, #8
    e29c:	d4fb      	bmi.n	e296 <am_hal_itm_disable+0x42>
    e29e:	f44f 7048 	mov.w	r0, #800	; 0x320
    e2a2:	f7ff fb4f 	bl	d944 <am_hal_flash_delay>
    e2a6:	4b15      	ldr	r3, [pc, #84]	; (e2fc <am_hal_itm_disable+0xa8>)
    e2a8:	4916      	ldr	r1, [pc, #88]	; (e304 <am_hal_itm_disable+0xb0>)
    e2aa:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    e2ae:	2064      	movs	r0, #100	; 0x64
    e2b0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e2b4:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e2b8:	f023 0301 	bic.w	r3, r3, #1
    e2bc:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    e2c0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e2c4:	420b      	tst	r3, r1
    e2c6:	d1fb      	bne.n	e2c0 <am_hal_itm_disable+0x6c>
    e2c8:	3801      	subs	r0, #1
    e2ca:	d1f3      	bne.n	e2b4 <am_hal_itm_disable+0x60>
    e2cc:	4a0a      	ldr	r2, [pc, #40]	; (e2f8 <am_hal_itm_disable+0xa4>)
    e2ce:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e2d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e2d6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e2da:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e2de:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    e2e2:	d1fa      	bne.n	e2da <am_hal_itm_disable+0x86>
    e2e4:	4a03      	ldr	r2, [pc, #12]	; (e2f4 <am_hal_itm_disable+0xa0>)
    e2e6:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e2ea:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d1fb      	bne.n	e2ea <am_hal_itm_disable+0x96>
    e2f2:	bd10      	pop	{r4, pc}
    e2f4:	40020000 	.word	0x40020000
    e2f8:	e000ed00 	.word	0xe000ed00
    e2fc:	c5acce55 	.word	0xc5acce55
    e300:	00150511 	.word	0x00150511
    e304:	00800001 	.word	0x00800001

0000e308 <am_hal_itm_print>:
    e308:	7803      	ldrb	r3, [r0, #0]
    e30a:	b1a3      	cbz	r3, e336 <am_hal_itm_print+0x2e>
    e30c:	4603      	mov	r3, r0
    e30e:	f1c0 0c01 	rsb	ip, r0, #1
    e312:	eb0c 0103 	add.w	r1, ip, r3
    e316:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e31a:	2a00      	cmp	r2, #0
    e31c:	d1f9      	bne.n	e312 <am_hal_itm_print+0xa>
    e31e:	4401      	add	r1, r0
    e320:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e324:	f810 cb01 	ldrb.w	ip, [r0], #1
    e328:	6813      	ldr	r3, [r2, #0]
    e32a:	2b00      	cmp	r3, #0
    e32c:	d0fc      	beq.n	e328 <am_hal_itm_print+0x20>
    e32e:	4288      	cmp	r0, r1
    e330:	f882 c000 	strb.w	ip, [r2]
    e334:	d1f6      	bne.n	e324 <am_hal_itm_print+0x1c>
    e336:	4770      	bx	lr

0000e338 <am_hal_pwrctrl_periph_enable>:
    e338:	b570      	push	{r4, r5, r6, lr}
    e33a:	b082      	sub	sp, #8
    e33c:	4604      	mov	r4, r0
    e33e:	f7ff fccf 	bl	dce0 <am_hal_interrupt_master_disable>
    e342:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e346:	4e0f      	ldr	r6, [pc, #60]	; (e384 <am_hal_pwrctrl_periph_enable+0x4c>)
    e348:	4d0f      	ldr	r5, [pc, #60]	; (e388 <am_hal_pwrctrl_periph_enable+0x50>)
    e34a:	9001      	str	r0, [sp, #4]
    e34c:	00a4      	lsls	r4, r4, #2
    e34e:	68b3      	ldr	r3, [r6, #8]
    e350:	592a      	ldr	r2, [r5, r4]
    e352:	4313      	orrs	r3, r2
    e354:	60b3      	str	r3, [r6, #8]
    e356:	9801      	ldr	r0, [sp, #4]
    e358:	442c      	add	r4, r5
    e35a:	f7ff fcc5 	bl	dce8 <am_hal_interrupt_master_set>
    e35e:	20a0      	movs	r0, #160	; 0xa0
    e360:	f7ff faf0 	bl	d944 <am_hal_flash_delay>
    e364:	69b3      	ldr	r3, [r6, #24]
    e366:	6864      	ldr	r4, [r4, #4]
    e368:	4223      	tst	r3, r4
    e36a:	d103      	bne.n	e374 <am_hal_pwrctrl_periph_enable+0x3c>
    e36c:	20a0      	movs	r0, #160	; 0xa0
    e36e:	f7ff fae9 	bl	d944 <am_hal_flash_delay>
    e372:	69b3      	ldr	r3, [r6, #24]
    e374:	4b03      	ldr	r3, [pc, #12]	; (e384 <am_hal_pwrctrl_periph_enable+0x4c>)
    e376:	699b      	ldr	r3, [r3, #24]
    e378:	4223      	tst	r3, r4
    e37a:	bf0c      	ite	eq
    e37c:	2001      	moveq	r0, #1
    e37e:	2000      	movne	r0, #0
    e380:	b002      	add	sp, #8
    e382:	bd70      	pop	{r4, r5, r6, pc}
    e384:	40021000 	.word	0x40021000
    e388:	0000f2fc 	.word	0x0000f2fc

0000e38c <am_hal_pwrctrl_periph_disable>:
    e38c:	b570      	push	{r4, r5, r6, lr}
    e38e:	b082      	sub	sp, #8
    e390:	4604      	mov	r4, r0
    e392:	f7ff fca5 	bl	dce0 <am_hal_interrupt_master_disable>
    e396:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e39a:	4e10      	ldr	r6, [pc, #64]	; (e3dc <am_hal_pwrctrl_periph_disable+0x50>)
    e39c:	4d10      	ldr	r5, [pc, #64]	; (e3e0 <am_hal_pwrctrl_periph_disable+0x54>)
    e39e:	9001      	str	r0, [sp, #4]
    e3a0:	00a4      	lsls	r4, r4, #2
    e3a2:	68b3      	ldr	r3, [r6, #8]
    e3a4:	592a      	ldr	r2, [r5, r4]
    e3a6:	ea23 0302 	bic.w	r3, r3, r2
    e3aa:	60b3      	str	r3, [r6, #8]
    e3ac:	9801      	ldr	r0, [sp, #4]
    e3ae:	442c      	add	r4, r5
    e3b0:	f7ff fc9a 	bl	dce8 <am_hal_interrupt_master_set>
    e3b4:	20a0      	movs	r0, #160	; 0xa0
    e3b6:	f7ff fac5 	bl	d944 <am_hal_flash_delay>
    e3ba:	69b3      	ldr	r3, [r6, #24]
    e3bc:	6864      	ldr	r4, [r4, #4]
    e3be:	4223      	tst	r3, r4
    e3c0:	d003      	beq.n	e3ca <am_hal_pwrctrl_periph_disable+0x3e>
    e3c2:	20a0      	movs	r0, #160	; 0xa0
    e3c4:	f7ff fabe 	bl	d944 <am_hal_flash_delay>
    e3c8:	69b3      	ldr	r3, [r6, #24]
    e3ca:	4b04      	ldr	r3, [pc, #16]	; (e3dc <am_hal_pwrctrl_periph_disable+0x50>)
    e3cc:	699b      	ldr	r3, [r3, #24]
    e3ce:	4223      	tst	r3, r4
    e3d0:	bf14      	ite	ne
    e3d2:	2001      	movne	r0, #1
    e3d4:	2000      	moveq	r0, #0
    e3d6:	b002      	add	sp, #8
    e3d8:	bd70      	pop	{r4, r5, r6, pc}
    e3da:	bf00      	nop
    e3dc:	40021000 	.word	0x40021000
    e3e0:	0000f2fc 	.word	0x0000f2fc

0000e3e4 <am_hal_pwrctrl_low_power_init>:
    e3e4:	b530      	push	{r4, r5, lr}
    e3e6:	4b69      	ldr	r3, [pc, #420]	; (e58c <am_hal_pwrctrl_low_power_init+0x1a8>)
    e3e8:	681a      	ldr	r2, [r3, #0]
    e3ea:	b085      	sub	sp, #20
    e3ec:	b912      	cbnz	r2, e3f4 <am_hal_pwrctrl_low_power_init+0x10>
    e3ee:	4a68      	ldr	r2, [pc, #416]	; (e590 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e3f0:	6812      	ldr	r2, [r2, #0]
    e3f2:	601a      	str	r2, [r3, #0]
    e3f4:	4b67      	ldr	r3, [pc, #412]	; (e594 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e3f6:	68db      	ldr	r3, [r3, #12]
    e3f8:	b2db      	uxtb	r3, r3
    e3fa:	2b12      	cmp	r3, #18
    e3fc:	d104      	bne.n	e408 <am_hal_pwrctrl_low_power_init+0x24>
    e3fe:	4c66      	ldr	r4, [pc, #408]	; (e598 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e400:	6863      	ldr	r3, [r4, #4]
    e402:	07d8      	lsls	r0, r3, #31
    e404:	f100 8088 	bmi.w	e518 <am_hal_pwrctrl_low_power_init+0x134>
    e408:	4b62      	ldr	r3, [pc, #392]	; (e594 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e40a:	68da      	ldr	r2, [r3, #12]
    e40c:	b2d2      	uxtb	r2, r2
    e40e:	2a20      	cmp	r2, #32
    e410:	d934      	bls.n	e47c <am_hal_pwrctrl_low_power_init+0x98>
    e412:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e416:	2002      	movs	r0, #2
    e418:	f360 4213 	bfi	r2, r0, #16, #4
    e41c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e420:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e424:	2203      	movs	r2, #3
    e426:	f362 5117 	bfi	r1, r2, #20, #4
    e42a:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e42e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e432:	2405      	movs	r4, #5
    e434:	f364 0103 	bfi	r1, r4, #0, #4
    e438:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e43c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e440:	f360 1107 	bfi	r1, r0, #4, #4
    e444:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e448:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e44c:	2406      	movs	r4, #6
    e44e:	f364 210b 	bfi	r1, r4, #8, #4
    e452:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e456:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e45a:	2001      	movs	r0, #1
    e45c:	f360 310f 	bfi	r1, r0, #12, #4
    e460:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e464:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e468:	f362 61de 	bfi	r1, r2, #27, #4
    e46c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e470:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e474:	f362 0103 	bfi	r1, r2, #0, #4
    e478:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e47c:	4a45      	ldr	r2, [pc, #276]	; (e594 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e47e:	68d3      	ldr	r3, [r2, #12]
    e480:	b2db      	uxtb	r3, r3
    e482:	2b11      	cmp	r3, #17
    e484:	d905      	bls.n	e492 <am_hal_pwrctrl_low_power_init+0xae>
    e486:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e48a:	f36f 6318 	bfc	r3, #24, #1
    e48e:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e492:	2100      	movs	r1, #0
    e494:	200c      	movs	r0, #12
    e496:	f7ff f821 	bl	d4dc <am_hal_cachectrl_control>
    e49a:	4b3f      	ldr	r3, [pc, #252]	; (e598 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e49c:	699b      	ldr	r3, [r3, #24]
    e49e:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e4a2:	05db      	lsls	r3, r3, #23
    e4a4:	d420      	bmi.n	e4e8 <am_hal_pwrctrl_low_power_init+0x104>
    e4a6:	4c3b      	ldr	r4, [pc, #236]	; (e594 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4a8:	68e3      	ldr	r3, [r4, #12]
    e4aa:	b2db      	uxtb	r3, r3
    e4ac:	2b11      	cmp	r3, #17
    e4ae:	d84e      	bhi.n	e54e <am_hal_pwrctrl_low_power_init+0x16a>
    e4b0:	4c38      	ldr	r4, [pc, #224]	; (e594 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e4b2:	493a      	ldr	r1, [pc, #232]	; (e59c <am_hal_pwrctrl_low_power_init+0x1b8>)
    e4b4:	7e22      	ldrb	r2, [r4, #24]
    e4b6:	2001      	movs	r0, #1
    e4b8:	4302      	orrs	r2, r0
    e4ba:	2307      	movs	r3, #7
    e4bc:	7622      	strb	r2, [r4, #24]
    e4be:	9000      	str	r0, [sp, #0]
    e4c0:	461a      	mov	r2, r3
    e4c2:	f242 7010 	movw	r0, #10000	; 0x2710
    e4c6:	f7ff fa4d 	bl	d964 <am_hal_flash_delay_status_check>
    e4ca:	2800      	cmp	r0, #0
    e4cc:	d15a      	bne.n	e584 <am_hal_pwrctrl_low_power_init+0x1a0>
    e4ce:	4b32      	ldr	r3, [pc, #200]	; (e598 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e4d0:	681a      	ldr	r2, [r3, #0]
    e4d2:	f042 0201 	orr.w	r2, r2, #1
    e4d6:	601a      	str	r2, [r3, #0]
    e4d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e4da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e4de:	625a      	str	r2, [r3, #36]	; 0x24
    e4e0:	68e3      	ldr	r3, [r4, #12]
    e4e2:	b2db      	uxtb	r3, r3
    e4e4:	2b11      	cmp	r3, #17
    e4e6:	d002      	beq.n	e4ee <am_hal_pwrctrl_low_power_init+0x10a>
    e4e8:	2000      	movs	r0, #0
    e4ea:	b005      	add	sp, #20
    e4ec:	bd30      	pop	{r4, r5, pc}
    e4ee:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e4f2:	f360 5356 	bfi	r3, r0, #21, #2
    e4f6:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e4fa:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e4fe:	220f      	movs	r2, #15
    e500:	f362 138b 	bfi	r3, r2, #6, #6
    e504:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e508:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e50c:	f362 0305 	bfi	r3, r2, #0, #6
    e510:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e514:	b005      	add	sp, #20
    e516:	bd30      	pop	{r4, r5, pc}
    e518:	f7ff fbe2 	bl	dce0 <am_hal_interrupt_master_disable>
    e51c:	9002      	str	r0, [sp, #8]
    e51e:	68a3      	ldr	r3, [r4, #8]
    e520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e524:	60a3      	str	r3, [r4, #8]
    e526:	9802      	ldr	r0, [sp, #8]
    e528:	f7ff fbde 	bl	dce8 <am_hal_interrupt_master_set>
    e52c:	20a0      	movs	r0, #160	; 0xa0
    e52e:	f7ff fa09 	bl	d944 <am_hal_flash_delay>
    e532:	69a3      	ldr	r3, [r4, #24]
    e534:	0619      	lsls	r1, r3, #24
    e536:	d403      	bmi.n	e540 <am_hal_pwrctrl_low_power_init+0x15c>
    e538:	20a0      	movs	r0, #160	; 0xa0
    e53a:	f7ff fa03 	bl	d944 <am_hal_flash_delay>
    e53e:	69a3      	ldr	r3, [r4, #24]
    e540:	4b15      	ldr	r3, [pc, #84]	; (e598 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e542:	699b      	ldr	r3, [r3, #24]
    e544:	061a      	lsls	r2, r3, #24
    e546:	f53f af5f 	bmi.w	e408 <am_hal_pwrctrl_low_power_init+0x24>
    e54a:	2001      	movs	r0, #1
    e54c:	e7cd      	b.n	e4ea <am_hal_pwrctrl_low_power_init+0x106>
    e54e:	f7ff fbc7 	bl	dce0 <am_hal_interrupt_master_disable>
    e552:	9003      	str	r0, [sp, #12]
    e554:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e558:	2219      	movs	r2, #25
    e55a:	f362 138b 	bfi	r3, r2, #6, #6
    e55e:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e562:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e566:	210c      	movs	r1, #12
    e568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e56c:	f361 0205 	bfi	r2, r1, #0, #6
    e570:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e576:	f365 5296 	bfi	r2, r5, #22, #1
    e57a:	63da      	str	r2, [r3, #60]	; 0x3c
    e57c:	9803      	ldr	r0, [sp, #12]
    e57e:	f7ff fbb3 	bl	dce8 <am_hal_interrupt_master_set>
    e582:	e795      	b.n	e4b0 <am_hal_pwrctrl_low_power_init+0xcc>
    e584:	2004      	movs	r0, #4
    e586:	b005      	add	sp, #20
    e588:	bd30      	pop	{r4, r5, pc}
    e58a:	bf00      	nop
    e58c:	10001170 	.word	0x10001170
    e590:	4ffff000 	.word	0x4ffff000
    e594:	40020000 	.word	0x40020000
    e598:	40021000 	.word	0x40021000
    e59c:	40020018 	.word	0x40020018

0000e5a0 <am_hal_rtc_osc_disable>:
    e5a0:	4a03      	ldr	r2, [pc, #12]	; (e5b0 <am_hal_rtc_osc_disable+0x10>)
    e5a2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e5a6:	f043 0310 	orr.w	r3, r3, #16
    e5aa:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e5ae:	4770      	bx	lr
    e5b0:	40004200 	.word	0x40004200

0000e5b4 <am_hal_tpiu_enable>:
    e5b4:	b510      	push	{r4, lr}
    e5b6:	4b23      	ldr	r3, [pc, #140]	; (e644 <am_hal_tpiu_enable+0x90>)
    e5b8:	6804      	ldr	r4, [r0, #0]
    e5ba:	2200      	movs	r2, #0
    e5bc:	b084      	sub	sp, #16
    e5be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e5c2:	b334      	cbz	r4, e612 <am_hal_tpiu_enable+0x5e>
    e5c4:	4a20      	ldr	r2, [pc, #128]	; (e648 <am_hal_tpiu_enable+0x94>)
    e5c6:	4921      	ldr	r1, [pc, #132]	; (e64c <am_hal_tpiu_enable+0x98>)
    e5c8:	2001      	movs	r0, #1
    e5ca:	6058      	str	r0, [r3, #4]
    e5cc:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e5d0:	a801      	add	r0, sp, #4
    e5d2:	428b      	cmp	r3, r1
    e5d4:	bf88      	it	hi
    e5d6:	4614      	movhi	r4, r2
    e5d8:	f7ff f996 	bl	d908 <am_hal_clkgen_status_get>
    e5dc:	9b01      	ldr	r3, [sp, #4]
    e5de:	1c5a      	adds	r2, r3, #1
    e5e0:	d02d      	beq.n	e63e <am_hal_tpiu_enable+0x8a>
    e5e2:	08db      	lsrs	r3, r3, #3
    e5e4:	fbb3 f4f4 	udiv	r4, r3, r4
    e5e8:	3c01      	subs	r4, #1
    e5ea:	b2a4      	uxth	r4, r4
    e5ec:	4b15      	ldr	r3, [pc, #84]	; (e644 <am_hal_tpiu_enable+0x90>)
    e5ee:	4a18      	ldr	r2, [pc, #96]	; (e650 <am_hal_tpiu_enable+0x9c>)
    e5f0:	611c      	str	r4, [r3, #16]
    e5f2:	2102      	movs	r1, #2
    e5f4:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e5f8:	2000      	movs	r0, #0
    e5fa:	f240 2101 	movw	r1, #513	; 0x201
    e5fe:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e602:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e606:	f44f 7048 	mov.w	r0, #800	; 0x320
    e60a:	f7ff f99b 	bl	d944 <am_hal_flash_delay>
    e60e:	b004      	add	sp, #16
    e610:	bd10      	pop	{r4, pc}
    e612:	6902      	ldr	r2, [r0, #16]
    e614:	611a      	str	r2, [r3, #16]
    e616:	6882      	ldr	r2, [r0, #8]
    e618:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e61c:	68c1      	ldr	r1, [r0, #12]
    e61e:	2201      	movs	r2, #1
    e620:	3901      	subs	r1, #1
    e622:	408a      	lsls	r2, r1
    e624:	605a      	str	r2, [r3, #4]
    e626:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e62a:	4a09      	ldr	r2, [pc, #36]	; (e650 <am_hal_tpiu_enable+0x9c>)
    e62c:	6843      	ldr	r3, [r0, #4]
    e62e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e632:	f44f 7048 	mov.w	r0, #800	; 0x320
    e636:	f7ff f985 	bl	d944 <am_hal_flash_delay>
    e63a:	b004      	add	sp, #16
    e63c:	bd10      	pop	{r4, pc}
    e63e:	2405      	movs	r4, #5
    e640:	e7d4      	b.n	e5ec <am_hal_tpiu_enable+0x38>
    e642:	bf00      	nop
    e644:	e0040000 	.word	0xe0040000
    e648:	000f4240 	.word	0x000f4240
    e64c:	001da380 	.word	0x001da380
    e650:	40020000 	.word	0x40020000

0000e654 <am_hal_uart_initialize>:
    e654:	2801      	cmp	r0, #1
    e656:	d81a      	bhi.n	e68e <am_hal_uart_initialize+0x3a>
    e658:	b1e9      	cbz	r1, e696 <am_hal_uart_initialize+0x42>
    e65a:	b530      	push	{r4, r5, lr}
    e65c:	2264      	movs	r2, #100	; 0x64
    e65e:	4d0f      	ldr	r5, [pc, #60]	; (e69c <am_hal_uart_initialize+0x48>)
    e660:	fb00 f202 	mul.w	r2, r0, r2
    e664:	18ac      	adds	r4, r5, r2
    e666:	78e3      	ldrb	r3, [r4, #3]
    e668:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    e66c:	f013 0301 	ands.w	r3, r3, #1
    e670:	d10f      	bne.n	e692 <am_hal_uart_initialize+0x3e>
    e672:	6260      	str	r0, [r4, #36]	; 0x24
    e674:	58a8      	ldr	r0, [r5, r2]
    e676:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    e67a:	4809      	ldr	r0, [pc, #36]	; (e6a0 <am_hal_uart_initialize+0x4c>)
    e67c:	ea4c 0000 	orr.w	r0, ip, r0
    e680:	50a8      	str	r0, [r5, r2]
    e682:	f884 e004 	strb.w	lr, [r4, #4]
    e686:	6623      	str	r3, [r4, #96]	; 0x60
    e688:	4618      	mov	r0, r3
    e68a:	600c      	str	r4, [r1, #0]
    e68c:	bd30      	pop	{r4, r5, pc}
    e68e:	2005      	movs	r0, #5
    e690:	4770      	bx	lr
    e692:	2007      	movs	r0, #7
    e694:	bd30      	pop	{r4, r5, pc}
    e696:	2006      	movs	r0, #6
    e698:	4770      	bx	lr
    e69a:	bf00      	nop
    e69c:	10001980 	.word	0x10001980
    e6a0:	01ea9e06 	.word	0x01ea9e06

0000e6a4 <am_hal_uart_deinitialize>:
    e6a4:	b170      	cbz	r0, e6c4 <am_hal_uart_deinitialize+0x20>
    e6a6:	6803      	ldr	r3, [r0, #0]
    e6a8:	4a07      	ldr	r2, [pc, #28]	; (e6c8 <am_hal_uart_deinitialize+0x24>)
    e6aa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6ae:	4293      	cmp	r3, r2
    e6b0:	d108      	bne.n	e6c4 <am_hal_uart_deinitialize+0x20>
    e6b2:	78c2      	ldrb	r2, [r0, #3]
    e6b4:	2300      	movs	r3, #0
    e6b6:	f36f 0200 	bfc	r2, #0, #1
    e6ba:	70c2      	strb	r2, [r0, #3]
    e6bc:	6243      	str	r3, [r0, #36]	; 0x24
    e6be:	7103      	strb	r3, [r0, #4]
    e6c0:	4618      	mov	r0, r3
    e6c2:	4770      	bx	lr
    e6c4:	2002      	movs	r0, #2
    e6c6:	4770      	bx	lr
    e6c8:	01ea9e06 	.word	0x01ea9e06

0000e6cc <am_hal_uart_power_control>:
    e6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6ce:	4604      	mov	r4, r0
    e6d0:	6800      	ldr	r0, [r0, #0]
    e6d2:	4b39      	ldr	r3, [pc, #228]	; (e7b8 <am_hal_uart_power_control+0xec>)
    e6d4:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e6d8:	429e      	cmp	r6, r3
    e6da:	b085      	sub	sp, #20
    e6dc:	d13f      	bne.n	e75e <am_hal_uart_power_control+0x92>
    e6de:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e6e0:	f105 0008 	add.w	r0, r5, #8
    e6e4:	b2c7      	uxtb	r7, r0
    e6e6:	b189      	cbz	r1, e70c <am_hal_uart_power_control+0x40>
    e6e8:	3901      	subs	r1, #1
    e6ea:	2901      	cmp	r1, #1
    e6ec:	d834      	bhi.n	e758 <am_hal_uart_power_control+0x8c>
    e6ee:	2a00      	cmp	r2, #0
    e6f0:	d138      	bne.n	e764 <am_hal_uart_power_control+0x98>
    e6f2:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e6f6:	351c      	adds	r5, #28
    e6f8:	032d      	lsls	r5, r5, #12
    e6fa:	f04f 33ff 	mov.w	r3, #4294967295
    e6fe:	646b      	str	r3, [r5, #68]	; 0x44
    e700:	4638      	mov	r0, r7
    e702:	f7ff fe43 	bl	e38c <am_hal_pwrctrl_periph_disable>
    e706:	2000      	movs	r0, #0
    e708:	b005      	add	sp, #20
    e70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e70c:	2a00      	cmp	r2, #0
    e70e:	d04a      	beq.n	e7a6 <am_hal_uart_power_control+0xda>
    e710:	7923      	ldrb	r3, [r4, #4]
    e712:	2b00      	cmp	r3, #0
    e714:	d04e      	beq.n	e7b4 <am_hal_uart_power_control+0xe8>
    e716:	4638      	mov	r0, r7
    e718:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e71c:	9101      	str	r1, [sp, #4]
    e71e:	351c      	adds	r5, #28
    e720:	f7ff fe0a 	bl	e338 <am_hal_pwrctrl_periph_enable>
    e724:	f7ff fadc 	bl	dce0 <am_hal_interrupt_master_disable>
    e728:	032d      	lsls	r5, r5, #12
    e72a:	68a3      	ldr	r3, [r4, #8]
    e72c:	9002      	str	r0, [sp, #8]
    e72e:	622b      	str	r3, [r5, #32]
    e730:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e734:	626a      	str	r2, [r5, #36]	; 0x24
    e736:	62ab      	str	r3, [r5, #40]	; 0x28
    e738:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e73c:	62ea      	str	r2, [r5, #44]	; 0x2c
    e73e:	632b      	str	r3, [r5, #48]	; 0x30
    e740:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e744:	9901      	ldr	r1, [sp, #4]
    e746:	636a      	str	r2, [r5, #52]	; 0x34
    e748:	63ab      	str	r3, [r5, #56]	; 0x38
    e74a:	9802      	ldr	r0, [sp, #8]
    e74c:	7121      	strb	r1, [r4, #4]
    e74e:	f7ff facb 	bl	dce8 <am_hal_interrupt_master_set>
    e752:	9901      	ldr	r1, [sp, #4]
    e754:	4608      	mov	r0, r1
    e756:	e000      	b.n	e75a <am_hal_uart_power_control+0x8e>
    e758:	2006      	movs	r0, #6
    e75a:	b005      	add	sp, #20
    e75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e75e:	2002      	movs	r0, #2
    e760:	b005      	add	sp, #20
    e762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e764:	f7ff fabc 	bl	dce0 <am_hal_interrupt_master_disable>
    e768:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e76c:	351c      	adds	r5, #28
    e76e:	032d      	lsls	r5, r5, #12
    e770:	9003      	str	r0, [sp, #12]
    e772:	6a2b      	ldr	r3, [r5, #32]
    e774:	60a3      	str	r3, [r4, #8]
    e776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e778:	60e3      	str	r3, [r4, #12]
    e77a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e77c:	6123      	str	r3, [r4, #16]
    e77e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e780:	6163      	str	r3, [r4, #20]
    e782:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e784:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e786:	61a3      	str	r3, [r4, #24]
    e788:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e78a:	61e2      	str	r2, [r4, #28]
    e78c:	2201      	movs	r2, #1
    e78e:	6223      	str	r3, [r4, #32]
    e790:	9803      	ldr	r0, [sp, #12]
    e792:	7122      	strb	r2, [r4, #4]
    e794:	f7ff faa8 	bl	dce8 <am_hal_interrupt_master_set>
    e798:	6823      	ldr	r3, [r4, #0]
    e79a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e79e:	42b3      	cmp	r3, r6
    e7a0:	d1ae      	bne.n	e700 <am_hal_uart_power_control+0x34>
    e7a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e7a4:	e7a5      	b.n	e6f2 <am_hal_uart_power_control+0x26>
    e7a6:	4638      	mov	r0, r7
    e7a8:	9201      	str	r2, [sp, #4]
    e7aa:	f7ff fdc5 	bl	e338 <am_hal_pwrctrl_periph_enable>
    e7ae:	9a01      	ldr	r2, [sp, #4]
    e7b0:	4610      	mov	r0, r2
    e7b2:	e7d2      	b.n	e75a <am_hal_uart_power_control+0x8e>
    e7b4:	2007      	movs	r0, #7
    e7b6:	e7d0      	b.n	e75a <am_hal_uart_power_control+0x8e>
    e7b8:	01ea9e06 	.word	0x01ea9e06

0000e7bc <am_hal_uart_configure>:
    e7bc:	6803      	ldr	r3, [r0, #0]
    e7be:	4a78      	ldr	r2, [pc, #480]	; (e9a0 <am_hal_uart_configure+0x1e4>)
    e7c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7c4:	4293      	cmp	r3, r2
    e7c6:	d001      	beq.n	e7cc <am_hal_uart_configure+0x10>
    e7c8:	2002      	movs	r0, #2
    e7ca:	4770      	bx	lr
    e7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e7d2:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e7d6:	341c      	adds	r4, #28
    e7d8:	0324      	lsls	r4, r4, #12
    e7da:	2700      	movs	r7, #0
    e7dc:	b084      	sub	sp, #16
    e7de:	6327      	str	r7, [r4, #48]	; 0x30
    e7e0:	460e      	mov	r6, r1
    e7e2:	4605      	mov	r5, r0
    e7e4:	f7ff fa7c 	bl	dce0 <am_hal_interrupt_master_disable>
    e7e8:	9001      	str	r0, [sp, #4]
    e7ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e7ec:	f043 0308 	orr.w	r3, r3, #8
    e7f0:	8623      	strh	r3, [r4, #48]	; 0x30
    e7f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e7f4:	2201      	movs	r2, #1
    e7f6:	f362 1306 	bfi	r3, r2, #4, #3
    e7fa:	8623      	strh	r3, [r4, #48]	; 0x30
    e7fc:	9801      	ldr	r0, [sp, #4]
    e7fe:	f7ff fa73 	bl	dce8 <am_hal_interrupt_master_set>
    e802:	f7ff fa6d 	bl	dce0 <am_hal_interrupt_master_disable>
    e806:	9002      	str	r0, [sp, #8]
    e808:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e80a:	f367 0300 	bfi	r3, r7, #0, #1
    e80e:	8623      	strh	r3, [r4, #48]	; 0x30
    e810:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e812:	f367 2349 	bfi	r3, r7, #9, #1
    e816:	8623      	strh	r3, [r4, #48]	; 0x30
    e818:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e81a:	f367 2308 	bfi	r3, r7, #8, #1
    e81e:	8623      	strh	r3, [r4, #48]	; 0x30
    e820:	9802      	ldr	r0, [sp, #8]
    e822:	f7ff fa61 	bl	dce8 <am_hal_interrupt_master_set>
    e826:	4b5f      	ldr	r3, [pc, #380]	; (e9a4 <am_hal_uart_configure+0x1e8>)
    e828:	6832      	ldr	r2, [r6, #0]
    e82a:	68db      	ldr	r3, [r3, #12]
    e82c:	b2db      	uxtb	r3, r3
    e82e:	2b12      	cmp	r3, #18
    e830:	d076      	beq.n	e920 <am_hal_uart_configure+0x164>
    e832:	4b5c      	ldr	r3, [pc, #368]	; (e9a4 <am_hal_uart_configure+0x1e8>)
    e834:	68db      	ldr	r3, [r3, #12]
    e836:	b2db      	uxtb	r3, r3
    e838:	2b20      	cmp	r3, #32
    e83a:	d902      	bls.n	e842 <am_hal_uart_configure+0x86>
    e83c:	4b5a      	ldr	r3, [pc, #360]	; (e9a8 <am_hal_uart_configure+0x1ec>)
    e83e:	429a      	cmp	r2, r3
    e840:	d871      	bhi.n	e926 <am_hal_uart_configure+0x16a>
    e842:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e844:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e848:	3b01      	subs	r3, #1
    e84a:	b2db      	uxtb	r3, r3
    e84c:	2b03      	cmp	r3, #3
    e84e:	d86c      	bhi.n	e92a <am_hal_uart_configure+0x16e>
    e850:	4956      	ldr	r1, [pc, #344]	; (e9ac <am_hal_uart_configure+0x1f0>)
    e852:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e856:	0112      	lsls	r2, r2, #4
    e858:	4291      	cmp	r1, r2
    e85a:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e85e:	fbb1 f0f2 	udiv	r0, r1, r2
    e862:	fbb3 f3f2 	udiv	r3, r3, r2
    e866:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e86a:	d364      	bcc.n	e936 <am_hal_uart_configure+0x17a>
    e86c:	6260      	str	r0, [r4, #36]	; 0x24
    e86e:	6260      	str	r0, [r4, #36]	; 0x24
    e870:	62a3      	str	r3, [r4, #40]	; 0x28
    e872:	089b      	lsrs	r3, r3, #2
    e874:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    e878:	fbb1 f3f3 	udiv	r3, r1, r3
    e87c:	662b      	str	r3, [r5, #96]	; 0x60
    e87e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e880:	f36f 338e 	bfc	r3, #14, #1
    e884:	8623      	strh	r3, [r4, #48]	; 0x30
    e886:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e888:	f36f 33cf 	bfc	r3, #15, #1
    e88c:	8623      	strh	r3, [r4, #48]	; 0x30
    e88e:	6933      	ldr	r3, [r6, #16]
    e890:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e892:	6971      	ldr	r1, [r6, #20]
    e894:	431a      	orrs	r2, r3
    e896:	6873      	ldr	r3, [r6, #4]
    e898:	6322      	str	r2, [r4, #48]	; 0x30
    e89a:	68f2      	ldr	r2, [r6, #12]
    e89c:	6361      	str	r1, [r4, #52]	; 0x34
    e89e:	4313      	orrs	r3, r2
    e8a0:	68b2      	ldr	r2, [r6, #8]
    e8a2:	4313      	orrs	r3, r2
    e8a4:	f043 0310 	orr.w	r3, r3, #16
    e8a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    e8aa:	f7ff fa19 	bl	dce0 <am_hal_interrupt_master_disable>
    e8ae:	9003      	str	r0, [sp, #12]
    e8b0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e8b2:	f043 0301 	orr.w	r3, r3, #1
    e8b6:	8623      	strh	r3, [r4, #48]	; 0x30
    e8b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e8ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e8be:	8623      	strh	r3, [r4, #48]	; 0x30
    e8c0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e8c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e8c6:	8623      	strh	r3, [r4, #48]	; 0x30
    e8c8:	9803      	ldr	r0, [sp, #12]
    e8ca:	f7ff fa0d 	bl	dce8 <am_hal_interrupt_master_set>
    e8ce:	682a      	ldr	r2, [r5, #0]
    e8d0:	4b33      	ldr	r3, [pc, #204]	; (e9a0 <am_hal_uart_configure+0x1e4>)
    e8d2:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e8d6:	4598      	cmp	r8, r3
    e8d8:	d11e      	bne.n	e918 <am_hal_uart_configure+0x15c>
    e8da:	69b1      	ldr	r1, [r6, #24]
    e8dc:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    e8e0:	b109      	cbz	r1, e8e6 <am_hal_uart_configure+0x12a>
    e8e2:	69f3      	ldr	r3, [r6, #28]
    e8e4:	bb5b      	cbnz	r3, e93e <am_hal_uart_configure+0x182>
    e8e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e8e8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e8ec:	331c      	adds	r3, #28
    e8ee:	031b      	lsls	r3, r3, #12
    e8f0:	2200      	movs	r2, #0
    e8f2:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e8f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e8f8:	f022 0220 	bic.w	r2, r2, #32
    e8fc:	639a      	str	r2, [r3, #56]	; 0x38
    e8fe:	b10c      	cbz	r4, e904 <am_hal_uart_configure+0x148>
    e900:	2f00      	cmp	r7, #0
    e902:	d132      	bne.n	e96a <am_hal_uart_configure+0x1ae>
    e904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e906:	2000      	movs	r0, #0
    e908:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e90c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e910:	639a      	str	r2, [r3, #56]	; 0x38
    e912:	b004      	add	sp, #16
    e914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e918:	2000      	movs	r0, #0
    e91a:	b004      	add	sp, #16
    e91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e920:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e924:	d985      	bls.n	e832 <am_hal_uart_configure+0x76>
    e926:	4822      	ldr	r0, [pc, #136]	; (e9b0 <am_hal_uart_configure+0x1f4>)
    e928:	e7f3      	b.n	e912 <am_hal_uart_configure+0x156>
    e92a:	4822      	ldr	r0, [pc, #136]	; (e9b4 <am_hal_uart_configure+0x1f8>)
    e92c:	2300      	movs	r3, #0
    e92e:	662b      	str	r3, [r5, #96]	; 0x60
    e930:	b004      	add	sp, #16
    e932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e936:	2300      	movs	r3, #0
    e938:	481d      	ldr	r0, [pc, #116]	; (e9b0 <am_hal_uart_configure+0x1f4>)
    e93a:	662b      	str	r3, [r5, #96]	; 0x60
    e93c:	e7e9      	b.n	e912 <am_hal_uart_configure+0x156>
    e93e:	2201      	movs	r2, #1
    e940:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e944:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e948:	f000 fa5e 	bl	ee08 <am_hal_queue_init>
    e94c:	682b      	ldr	r3, [r5, #0]
    e94e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e952:	4543      	cmp	r3, r8
    e954:	d1e0      	bne.n	e918 <am_hal_uart_configure+0x15c>
    e956:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e958:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e95c:	331c      	adds	r3, #28
    e95e:	031b      	lsls	r3, r3, #12
    e960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e962:	f042 0220 	orr.w	r2, r2, #32
    e966:	639a      	str	r2, [r3, #56]	; 0x38
    e968:	e7c9      	b.n	e8fe <am_hal_uart_configure+0x142>
    e96a:	2201      	movs	r2, #1
    e96c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    e970:	463b      	mov	r3, r7
    e972:	4621      	mov	r1, r4
    e974:	f105 0048 	add.w	r0, r5, #72	; 0x48
    e978:	f000 fa46 	bl	ee08 <am_hal_queue_init>
    e97c:	682b      	ldr	r3, [r5, #0]
    e97e:	4a08      	ldr	r2, [pc, #32]	; (e9a0 <am_hal_uart_configure+0x1e4>)
    e980:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e984:	4293      	cmp	r3, r2
    e986:	d1c7      	bne.n	e918 <am_hal_uart_configure+0x15c>
    e988:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e98a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e98e:	331c      	adds	r3, #28
    e990:	031b      	lsls	r3, r3, #12
    e992:	2000      	movs	r0, #0
    e994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e996:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e99a:	639a      	str	r2, [r3, #56]	; 0x38
    e99c:	e7b9      	b.n	e912 <am_hal_uart_configure+0x156>
    e99e:	bf00      	nop
    e9a0:	01ea9e06 	.word	0x01ea9e06
    e9a4:	40020000 	.word	0x40020000
    e9a8:	0016e360 	.word	0x0016e360
    e9ac:	0000f3b0 	.word	0x0000f3b0
    e9b0:	08000003 	.word	0x08000003
    e9b4:	08000002 	.word	0x08000002

0000e9b8 <am_hal_uart_transfer>:
    e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9bc:	ed2d 8b02 	vpush	{d8}
    e9c0:	680d      	ldr	r5, [r1, #0]
    e9c2:	b091      	sub	sp, #68	; 0x44
    e9c4:	4604      	mov	r4, r0
    e9c6:	b14d      	cbz	r5, e9dc <am_hal_uart_transfer+0x24>
    e9c8:	2d01      	cmp	r5, #1
    e9ca:	f000 808f 	beq.w	eaec <am_hal_uart_transfer+0x134>
    e9ce:	2507      	movs	r5, #7
    e9d0:	4628      	mov	r0, r5
    e9d2:	b011      	add	sp, #68	; 0x44
    e9d4:	ecbd 8b02 	vpop	{d8}
    e9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9dc:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    e9e0:	684b      	ldr	r3, [r1, #4]
    e9e2:	690a      	ldr	r2, [r1, #16]
    e9e4:	9202      	str	r2, [sp, #8]
    e9e6:	4618      	mov	r0, r3
    e9e8:	f1b8 0f00 	cmp.w	r8, #0
    e9ec:	f000 8111 	beq.w	ec12 <am_hal_uart_transfer+0x25a>
    e9f0:	f1bb 0f00 	cmp.w	fp, #0
    e9f4:	f000 8172 	beq.w	ecdc <am_hal_uart_transfer+0x324>
    e9f8:	2c00      	cmp	r4, #0
    e9fa:	f000 8165 	beq.w	ecc8 <am_hal_uart_transfer+0x310>
    e9fe:	46a9      	mov	r9, r5
    ea00:	462f      	mov	r7, r5
    ea02:	9501      	str	r5, [sp, #4]
    ea04:	4625      	mov	r5, r4
    ea06:	4619      	mov	r1, r3
    ea08:	682a      	ldr	r2, [r5, #0]
    ea0a:	461c      	mov	r4, r3
    ea0c:	4bad      	ldr	r3, [pc, #692]	; (ecc4 <am_hal_uart_transfer+0x30c>)
    ea0e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ea12:	429a      	cmp	r2, r3
    ea14:	465e      	mov	r6, fp
    ea16:	d12d      	bne.n	ea74 <am_hal_uart_transfer+0xbc>
    ea18:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    ea1c:	bb7a      	cbnz	r2, ea7e <am_hal_uart_transfer+0xc6>
    ea1e:	1e48      	subs	r0, r1, #1
    ea20:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ea22:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ea26:	311c      	adds	r1, #28
    ea28:	0309      	lsls	r1, r1, #12
    ea2a:	698b      	ldr	r3, [r1, #24]
    ea2c:	069b      	lsls	r3, r3, #26
    ea2e:	d405      	bmi.n	ea3c <am_hal_uart_transfer+0x84>
    ea30:	3201      	adds	r2, #1
    ea32:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    ea36:	600b      	str	r3, [r1, #0]
    ea38:	4296      	cmp	r6, r2
    ea3a:	d8f6      	bhi.n	ea2a <am_hal_uart_transfer+0x72>
    ea3c:	4417      	add	r7, r2
    ea3e:	1ab6      	subs	r6, r6, r2
    ea40:	b936      	cbnz	r6, ea50 <am_hal_uart_transfer+0x98>
    ea42:	9d01      	ldr	r5, [sp, #4]
    ea44:	9b02      	ldr	r3, [sp, #8]
    ea46:	2b00      	cmp	r3, #0
    ea48:	f000 808c 	beq.w	eb64 <am_hal_uart_transfer+0x1ac>
    ea4c:	601f      	str	r7, [r3, #0]
    ea4e:	e7bf      	b.n	e9d0 <am_hal_uart_transfer+0x18>
    ea50:	2010      	movs	r0, #16
    ea52:	f7fe ff77 	bl	d944 <am_hal_flash_delay>
    ea56:	f1b8 3fff 	cmp.w	r8, #4294967295
    ea5a:	bf18      	it	ne
    ea5c:	f109 0901 	addne.w	r9, r9, #1
    ea60:	45c8      	cmp	r8, r9
    ea62:	d9ee      	bls.n	ea42 <am_hal_uart_transfer+0x8a>
    ea64:	682a      	ldr	r2, [r5, #0]
    ea66:	4b97      	ldr	r3, [pc, #604]	; (ecc4 <am_hal_uart_transfer+0x30c>)
    ea68:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ea6c:	429a      	cmp	r2, r3
    ea6e:	eb04 0107 	add.w	r1, r4, r7
    ea72:	d0d1      	beq.n	ea18 <am_hal_uart_transfer+0x60>
    ea74:	9b02      	ldr	r3, [sp, #8]
    ea76:	b103      	cbz	r3, ea7a <am_hal_uart_transfer+0xc2>
    ea78:	601f      	str	r7, [r3, #0]
    ea7a:	2502      	movs	r5, #2
    ea7c:	e7a8      	b.n	e9d0 <am_hal_uart_transfer+0x18>
    ea7e:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    ea82:	1a12      	subs	r2, r2, r0
    ea84:	42b2      	cmp	r2, r6
    ea86:	4613      	mov	r3, r2
    ea88:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    ea8c:	bf28      	it	cs
    ea8e:	4633      	movcs	r3, r6
    ea90:	461a      	mov	r2, r3
    ea92:	4658      	mov	r0, fp
    ea94:	9303      	str	r3, [sp, #12]
    ea96:	f000 f9c3 	bl	ee20 <am_hal_queue_item_add>
    ea9a:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    ea9e:	f7ff f91f 	bl	dce0 <am_hal_interrupt_master_disable>
    eaa2:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    eaa6:	f10a 0a1c 	add.w	sl, sl, #28
    eaaa:	9008      	str	r0, [sp, #32]
    eaac:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    eab0:	e00d      	b.n	eace <am_hal_uart_transfer+0x116>
    eab2:	f000 f9f3 	bl	ee9c <am_hal_queue_item_get>
    eab6:	b190      	cbz	r0, eade <am_hal_uart_transfer+0x126>
    eab8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    eaba:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    eabe:	321c      	adds	r2, #28
    eac0:	0312      	lsls	r2, r2, #12
    eac2:	6993      	ldr	r3, [r2, #24]
    eac4:	0699      	lsls	r1, r3, #26
    eac6:	bf5c      	itt	pl
    eac8:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    eacc:	6013      	strpl	r3, [r2, #0]
    eace:	f8da 3018 	ldr.w	r3, [sl, #24]
    ead2:	069b      	lsls	r3, r3, #26
    ead4:	f04f 0201 	mov.w	r2, #1
    ead8:	a907      	add	r1, sp, #28
    eada:	4658      	mov	r0, fp
    eadc:	d5e9      	bpl.n	eab2 <am_hal_uart_transfer+0xfa>
    eade:	9b03      	ldr	r3, [sp, #12]
    eae0:	9808      	ldr	r0, [sp, #32]
    eae2:	441f      	add	r7, r3
    eae4:	1af6      	subs	r6, r6, r3
    eae6:	f7ff f8ff 	bl	dce8 <am_hal_interrupt_master_set>
    eaea:	e7a9      	b.n	ea40 <am_hal_uart_transfer+0x88>
    eaec:	68cd      	ldr	r5, [r1, #12]
    eaee:	690b      	ldr	r3, [r1, #16]
    eaf0:	9301      	str	r3, [sp, #4]
    eaf2:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    eaf6:	2d00      	cmp	r5, #0
    eaf8:	f000 80b5 	beq.w	ec66 <am_hal_uart_transfer+0x2ae>
    eafc:	2f00      	cmp	r7, #0
    eafe:	f000 811e 	beq.w	ed3e <am_hal_uart_transfer+0x386>
    eb02:	2800      	cmp	r0, #0
    eb04:	f000 80e7 	beq.w	ecd6 <am_hal_uart_transfer+0x31e>
    eb08:	6822      	ldr	r2, [r4, #0]
    eb0a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; ecc4 <am_hal_uart_transfer+0x30c>
    eb0e:	f100 0348 	add.w	r3, r0, #72	; 0x48
    eb12:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eb16:	ee08 3a10 	vmov	s16, r3
    eb1a:	f04f 0900 	mov.w	r9, #0
    eb1e:	462b      	mov	r3, r5
    eb20:	4552      	cmp	r2, sl
    eb22:	46c8      	mov	r8, r9
    eb24:	465d      	mov	r5, fp
    eb26:	461e      	mov	r6, r3
    eb28:	d133      	bne.n	eb92 <am_hal_uart_transfer+0x1da>
    eb2a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    eb2e:	2a00      	cmp	r2, #0
    eb30:	d137      	bne.n	eba2 <am_hal_uart_transfer+0x1ea>
    eb32:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eb34:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    eb38:	311c      	adds	r1, #28
    eb3a:	1e68      	subs	r0, r5, #1
    eb3c:	0309      	lsls	r1, r1, #12
    eb3e:	698b      	ldr	r3, [r1, #24]
    eb40:	06dd      	lsls	r5, r3, #27
    eb42:	d408      	bmi.n	eb56 <am_hal_uart_transfer+0x19e>
    eb44:	680b      	ldr	r3, [r1, #0]
    eb46:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    eb4a:	d15e      	bne.n	ec0a <am_hal_uart_transfer+0x252>
    eb4c:	3201      	adds	r2, #1
    eb4e:	4297      	cmp	r7, r2
    eb50:	f800 3f01 	strb.w	r3, [r0, #1]!
    eb54:	d8f3      	bhi.n	eb3e <am_hal_uart_transfer+0x186>
    eb56:	4490      	add	r8, r2
    eb58:	1abf      	subs	r7, r7, r2
    eb5a:	b957      	cbnz	r7, eb72 <am_hal_uart_transfer+0x1ba>
    eb5c:	9b01      	ldr	r3, [sp, #4]
    eb5e:	b10b      	cbz	r3, eb64 <am_hal_uart_transfer+0x1ac>
    eb60:	f8c3 8000 	str.w	r8, [r3]
    eb64:	2500      	movs	r5, #0
    eb66:	4628      	mov	r0, r5
    eb68:	b011      	add	sp, #68	; 0x44
    eb6a:	ecbd 8b02 	vpop	{d8}
    eb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb72:	2010      	movs	r0, #16
    eb74:	f7fe fee6 	bl	d944 <am_hal_flash_delay>
    eb78:	1c73      	adds	r3, r6, #1
    eb7a:	bf18      	it	ne
    eb7c:	f109 0901 	addne.w	r9, r9, #1
    eb80:	454e      	cmp	r6, r9
    eb82:	d9eb      	bls.n	eb5c <am_hal_uart_transfer+0x1a4>
    eb84:	6822      	ldr	r2, [r4, #0]
    eb86:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eb8a:	4552      	cmp	r2, sl
    eb8c:	eb0b 0508 	add.w	r5, fp, r8
    eb90:	d0cb      	beq.n	eb2a <am_hal_uart_transfer+0x172>
    eb92:	2502      	movs	r5, #2
    eb94:	9b01      	ldr	r3, [sp, #4]
    eb96:	2b00      	cmp	r3, #0
    eb98:	f43f af1a 	beq.w	e9d0 <am_hal_uart_transfer+0x18>
    eb9c:	f8c3 8000 	str.w	r8, [r3]
    eba0:	e716      	b.n	e9d0 <am_hal_uart_transfer+0x18>
    eba2:	f7ff f89d 	bl	dce0 <am_hal_interrupt_master_disable>
    eba6:	9007      	str	r0, [sp, #28]
    eba8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ebaa:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    ebae:	301c      	adds	r0, #28
    ebb0:	0300      	lsls	r0, r0, #12
    ebb2:	f10d 0c20 	add.w	ip, sp, #32
    ebb6:	2200      	movs	r2, #0
    ebb8:	6983      	ldr	r3, [r0, #24]
    ebba:	06db      	lsls	r3, r3, #27
    ebbc:	d409      	bmi.n	ebd2 <am_hal_uart_transfer+0x21a>
    ebbe:	6803      	ldr	r3, [r0, #0]
    ebc0:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ebc4:	f102 0201 	add.w	r2, r2, #1
    ebc8:	d119      	bne.n	ebfe <am_hal_uart_transfer+0x246>
    ebca:	2a20      	cmp	r2, #32
    ebcc:	f80c 3b01 	strb.w	r3, [ip], #1
    ebd0:	d1f2      	bne.n	ebb8 <am_hal_uart_transfer+0x200>
    ebd2:	ee18 0a10 	vmov	r0, s16
    ebd6:	a908      	add	r1, sp, #32
    ebd8:	f000 f922 	bl	ee20 <am_hal_queue_item_add>
    ebdc:	2800      	cmp	r0, #0
    ebde:	d075      	beq.n	eccc <am_hal_uart_transfer+0x314>
    ebe0:	9807      	ldr	r0, [sp, #28]
    ebe2:	f7ff f881 	bl	dce8 <am_hal_interrupt_master_set>
    ebe6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ebe8:	42ba      	cmp	r2, r7
    ebea:	bf28      	it	cs
    ebec:	463a      	movcs	r2, r7
    ebee:	ee18 0a10 	vmov	r0, s16
    ebf2:	4629      	mov	r1, r5
    ebf4:	4490      	add	r8, r2
    ebf6:	1abf      	subs	r7, r7, r2
    ebf8:	f000 f950 	bl	ee9c <am_hal_queue_item_get>
    ebfc:	e7ad      	b.n	eb5a <am_hal_uart_transfer+0x1a2>
    ebfe:	9807      	ldr	r0, [sp, #28]
    ec00:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ec04:	f7ff f870 	bl	dce8 <am_hal_interrupt_master_set>
    ec08:	e7c4      	b.n	eb94 <am_hal_uart_transfer+0x1dc>
    ec0a:	4490      	add	r8, r2
    ec0c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ec10:	e7c0      	b.n	eb94 <am_hal_uart_transfer+0x1dc>
    ec12:	2c00      	cmp	r4, #0
    ec14:	f43f af31 	beq.w	ea7a <am_hal_uart_transfer+0xc2>
    ec18:	6822      	ldr	r2, [r4, #0]
    ec1a:	492a      	ldr	r1, [pc, #168]	; (ecc4 <am_hal_uart_transfer+0x30c>)
    ec1c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ec20:	428a      	cmp	r2, r1
    ec22:	f47f af2a 	bne.w	ea7a <am_hal_uart_transfer+0xc2>
    ec26:	9b02      	ldr	r3, [sp, #8]
    ec28:	b10b      	cbz	r3, ec2e <am_hal_uart_transfer+0x276>
    ec2a:	f8c3 8000 	str.w	r8, [r3]
    ec2e:	f1bb 0f00 	cmp.w	fp, #0
    ec32:	d097      	beq.n	eb64 <am_hal_uart_transfer+0x1ac>
    ec34:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    ec38:	2d00      	cmp	r5, #0
    ec3a:	d151      	bne.n	ece0 <am_hal_uart_transfer+0x328>
    ec3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ec3e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ec42:	311c      	adds	r1, #28
    ec44:	1e42      	subs	r2, r0, #1
    ec46:	0309      	lsls	r1, r1, #12
    ec48:	698b      	ldr	r3, [r1, #24]
    ec4a:	0698      	lsls	r0, r3, #26
    ec4c:	d405      	bmi.n	ec5a <am_hal_uart_transfer+0x2a2>
    ec4e:	3501      	adds	r5, #1
    ec50:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    ec54:	600b      	str	r3, [r1, #0]
    ec56:	45ab      	cmp	fp, r5
    ec58:	d1f6      	bne.n	ec48 <am_hal_uart_transfer+0x290>
    ec5a:	9b02      	ldr	r3, [sp, #8]
    ec5c:	2b00      	cmp	r3, #0
    ec5e:	d081      	beq.n	eb64 <am_hal_uart_transfer+0x1ac>
    ec60:	601d      	str	r5, [r3, #0]
    ec62:	2500      	movs	r5, #0
    ec64:	e6b4      	b.n	e9d0 <am_hal_uart_transfer+0x18>
    ec66:	2800      	cmp	r0, #0
    ec68:	f43f af07 	beq.w	ea7a <am_hal_uart_transfer+0xc2>
    ec6c:	6802      	ldr	r2, [r0, #0]
    ec6e:	4915      	ldr	r1, [pc, #84]	; (ecc4 <am_hal_uart_transfer+0x30c>)
    ec70:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ec74:	428a      	cmp	r2, r1
    ec76:	f47f af00 	bne.w	ea7a <am_hal_uart_transfer+0xc2>
    ec7a:	b103      	cbz	r3, ec7e <am_hal_uart_transfer+0x2c6>
    ec7c:	601d      	str	r5, [r3, #0]
    ec7e:	2f00      	cmp	r7, #0
    ec80:	f43f af70 	beq.w	eb64 <am_hal_uart_transfer+0x1ac>
    ec84:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    ec88:	2a00      	cmp	r2, #0
    ec8a:	d15a      	bne.n	ed42 <am_hal_uart_transfer+0x38a>
    ec8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ec8e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ec92:	311c      	adds	r1, #28
    ec94:	f10b 33ff 	add.w	r3, fp, #4294967295
    ec98:	0309      	lsls	r1, r1, #12
    ec9a:	4614      	mov	r4, r2
    ec9c:	698a      	ldr	r2, [r1, #24]
    ec9e:	06d2      	lsls	r2, r2, #27
    eca0:	d409      	bmi.n	ecb6 <am_hal_uart_transfer+0x2fe>
    eca2:	680a      	ldr	r2, [r1, #0]
    eca4:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    eca8:	d176      	bne.n	ed98 <am_hal_uart_transfer+0x3e0>
    ecaa:	3401      	adds	r4, #1
    ecac:	42a7      	cmp	r7, r4
    ecae:	f803 2f01 	strb.w	r2, [r3, #1]!
    ecb2:	d1f3      	bne.n	ec9c <am_hal_uart_transfer+0x2e4>
    ecb4:	4605      	mov	r5, r0
    ecb6:	9b01      	ldr	r3, [sp, #4]
    ecb8:	2b00      	cmp	r3, #0
    ecba:	f43f ae89 	beq.w	e9d0 <am_hal_uart_transfer+0x18>
    ecbe:	601c      	str	r4, [r3, #0]
    ecc0:	e686      	b.n	e9d0 <am_hal_uart_transfer+0x18>
    ecc2:	bf00      	nop
    ecc4:	01ea9e06 	.word	0x01ea9e06
    ecc8:	4627      	mov	r7, r4
    ecca:	e6d3      	b.n	ea74 <am_hal_uart_transfer+0xbc>
    eccc:	9807      	ldr	r0, [sp, #28]
    ecce:	4d39      	ldr	r5, [pc, #228]	; (edb4 <am_hal_uart_transfer+0x3fc>)
    ecd0:	f7ff f80a 	bl	dce8 <am_hal_interrupt_master_set>
    ecd4:	e75e      	b.n	eb94 <am_hal_uart_transfer+0x1dc>
    ecd6:	2502      	movs	r5, #2
    ecd8:	4680      	mov	r8, r0
    ecda:	e75b      	b.n	eb94 <am_hal_uart_transfer+0x1dc>
    ecdc:	462f      	mov	r7, r5
    ecde:	e6b1      	b.n	ea44 <am_hal_uart_transfer+0x8c>
    ece0:	6b65      	ldr	r5, [r4, #52]	; 0x34
    ece2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ece4:	1b52      	subs	r2, r2, r5
    ece6:	455a      	cmp	r2, fp
    ece8:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    ecec:	4601      	mov	r1, r0
    ecee:	bf28      	it	cs
    ecf0:	465a      	movcs	r2, fp
    ecf2:	4638      	mov	r0, r7
    ecf4:	4615      	mov	r5, r2
    ecf6:	f000 f893 	bl	ee20 <am_hal_queue_item_add>
    ecfa:	6a66      	ldr	r6, [r4, #36]	; 0x24
    ecfc:	f7fe fff0 	bl	dce0 <am_hal_interrupt_master_disable>
    ed00:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    ed04:	361c      	adds	r6, #28
    ed06:	9005      	str	r0, [sp, #20]
    ed08:	0336      	lsls	r6, r6, #12
    ed0a:	e00f      	b.n	ed2c <am_hal_uart_transfer+0x374>
    ed0c:	a908      	add	r1, sp, #32
    ed0e:	4638      	mov	r0, r7
    ed10:	f000 f8c4 	bl	ee9c <am_hal_queue_item_get>
    ed14:	b178      	cbz	r0, ed36 <am_hal_uart_transfer+0x37e>
    ed16:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ed18:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ed1c:	321c      	adds	r2, #28
    ed1e:	0312      	lsls	r2, r2, #12
    ed20:	6993      	ldr	r3, [r2, #24]
    ed22:	0699      	lsls	r1, r3, #26
    ed24:	bf5c      	itt	pl
    ed26:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    ed2a:	6013      	strpl	r3, [r2, #0]
    ed2c:	69b3      	ldr	r3, [r6, #24]
    ed2e:	069b      	lsls	r3, r3, #26
    ed30:	f04f 0201 	mov.w	r2, #1
    ed34:	d5ea      	bpl.n	ed0c <am_hal_uart_transfer+0x354>
    ed36:	9805      	ldr	r0, [sp, #20]
    ed38:	f7fe ffd6 	bl	dce8 <am_hal_interrupt_master_set>
    ed3c:	e78d      	b.n	ec5a <am_hal_uart_transfer+0x2a2>
    ed3e:	46b8      	mov	r8, r7
    ed40:	e70c      	b.n	eb5c <am_hal_uart_transfer+0x1a4>
    ed42:	f7fe ffcd 	bl	dce0 <am_hal_interrupt_master_disable>
    ed46:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ed48:	9006      	str	r0, [sp, #24]
    ed4a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ed4e:	311c      	adds	r1, #28
    ed50:	0309      	lsls	r1, r1, #12
    ed52:	ae08      	add	r6, sp, #32
    ed54:	2200      	movs	r2, #0
    ed56:	698b      	ldr	r3, [r1, #24]
    ed58:	06d8      	lsls	r0, r3, #27
    ed5a:	d409      	bmi.n	ed70 <am_hal_uart_transfer+0x3b8>
    ed5c:	680b      	ldr	r3, [r1, #0]
    ed5e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ed62:	f102 0201 	add.w	r2, r2, #1
    ed66:	d11a      	bne.n	ed9e <am_hal_uart_transfer+0x3e6>
    ed68:	2a20      	cmp	r2, #32
    ed6a:	f806 3b01 	strb.w	r3, [r6], #1
    ed6e:	d1f2      	bne.n	ed56 <am_hal_uart_transfer+0x39e>
    ed70:	f104 0648 	add.w	r6, r4, #72	; 0x48
    ed74:	a908      	add	r1, sp, #32
    ed76:	4630      	mov	r0, r6
    ed78:	f000 f852 	bl	ee20 <am_hal_queue_item_add>
    ed7c:	b1a8      	cbz	r0, edaa <am_hal_uart_transfer+0x3f2>
    ed7e:	9806      	ldr	r0, [sp, #24]
    ed80:	f7fe ffb2 	bl	dce8 <am_hal_interrupt_master_set>
    ed84:	6d24      	ldr	r4, [r4, #80]	; 0x50
    ed86:	42bc      	cmp	r4, r7
    ed88:	bf28      	it	cs
    ed8a:	463c      	movcs	r4, r7
    ed8c:	4659      	mov	r1, fp
    ed8e:	4630      	mov	r0, r6
    ed90:	4622      	mov	r2, r4
    ed92:	f000 f883 	bl	ee9c <am_hal_queue_item_get>
    ed96:	e78e      	b.n	ecb6 <am_hal_uart_transfer+0x2fe>
    ed98:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ed9c:	e78b      	b.n	ecb6 <am_hal_uart_transfer+0x2fe>
    ed9e:	9806      	ldr	r0, [sp, #24]
    eda0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    eda4:	f7fe ffa0 	bl	dce8 <am_hal_interrupt_master_set>
    eda8:	e612      	b.n	e9d0 <am_hal_uart_transfer+0x18>
    edaa:	9806      	ldr	r0, [sp, #24]
    edac:	4d01      	ldr	r5, [pc, #4]	; (edb4 <am_hal_uart_transfer+0x3fc>)
    edae:	f7fe ff9b 	bl	dce8 <am_hal_interrupt_master_set>
    edb2:	e60d      	b.n	e9d0 <am_hal_uart_transfer+0x18>
    edb4:	08000001 	.word	0x08000001

0000edb8 <am_hal_uart_tx_flush>:
    edb8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    edbc:	b570      	push	{r4, r5, r6, lr}
    edbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
    edc0:	4604      	mov	r4, r0
    edc2:	b15b      	cbz	r3, eddc <am_hal_uart_tx_flush+0x24>
    edc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    edc6:	b14b      	cbz	r3, eddc <am_hal_uart_tx_flush+0x24>
    edc8:	4e0e      	ldr	r6, [pc, #56]	; (ee04 <am_hal_uart_tx_flush+0x4c>)
    edca:	6e20      	ldr	r0, [r4, #96]	; 0x60
    edcc:	fbb6 f0f0 	udiv	r0, r6, r0
    edd0:	0100      	lsls	r0, r0, #4
    edd2:	f7fe fdb7 	bl	d944 <am_hal_flash_delay>
    edd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    edd8:	2b00      	cmp	r3, #0
    edda:	d1f6      	bne.n	edca <am_hal_uart_tx_flush+0x12>
    eddc:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ede0:	351c      	adds	r5, #28
    ede2:	032d      	lsls	r5, r5, #12
    ede4:	69ab      	ldr	r3, [r5, #24]
    ede6:	071a      	lsls	r2, r3, #28
    ede8:	d509      	bpl.n	edfe <am_hal_uart_tx_flush+0x46>
    edea:	4e06      	ldr	r6, [pc, #24]	; (ee04 <am_hal_uart_tx_flush+0x4c>)
    edec:	6e23      	ldr	r3, [r4, #96]	; 0x60
    edee:	fbb6 f3f3 	udiv	r3, r6, r3
    edf2:	0118      	lsls	r0, r3, #4
    edf4:	f7fe fda6 	bl	d944 <am_hal_flash_delay>
    edf8:	69ab      	ldr	r3, [r5, #24]
    edfa:	071b      	lsls	r3, r3, #28
    edfc:	d4f6      	bmi.n	edec <am_hal_uart_tx_flush+0x34>
    edfe:	2000      	movs	r0, #0
    ee00:	bd70      	pop	{r4, r5, r6, pc}
    ee02:	bf00      	nop
    ee04:	00b71b00 	.word	0x00b71b00

0000ee08 <am_hal_queue_init>:
    ee08:	b410      	push	{r4}
    ee0a:	2400      	movs	r4, #0
    ee0c:	e9c0 4400 	strd	r4, r4, [r0]
    ee10:	e9c0 4302 	strd	r4, r3, [r0, #8]
    ee14:	e9c0 2104 	strd	r2, r1, [r0, #16]
    ee18:	f85d 4b04 	ldr.w	r4, [sp], #4
    ee1c:	4770      	bx	lr
    ee1e:	bf00      	nop

0000ee20 <am_hal_queue_item_add>:
    ee20:	b570      	push	{r4, r5, r6, lr}
    ee22:	6905      	ldr	r5, [r0, #16]
    ee24:	b082      	sub	sp, #8
    ee26:	4604      	mov	r4, r0
    ee28:	fb02 f505 	mul.w	r5, r2, r5
    ee2c:	460e      	mov	r6, r1
    ee2e:	f7fe ff57 	bl	dce0 <am_hal_interrupt_master_disable>
    ee32:	68e2      	ldr	r2, [r4, #12]
    ee34:	9001      	str	r0, [sp, #4]
    ee36:	68a0      	ldr	r0, [r4, #8]
    ee38:	1a13      	subs	r3, r2, r0
    ee3a:	42ab      	cmp	r3, r5
    ee3c:	d31c      	bcc.n	ee78 <am_hal_queue_item_add+0x58>
    ee3e:	b195      	cbz	r5, ee66 <am_hal_queue_item_add+0x46>
    ee40:	6823      	ldr	r3, [r4, #0]
    ee42:	b306      	cbz	r6, ee86 <am_hal_queue_item_add+0x66>
    ee44:	1e71      	subs	r1, r6, #1
    ee46:	194e      	adds	r6, r1, r5
    ee48:	6962      	ldr	r2, [r4, #20]
    ee4a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ee4e:	54d0      	strb	r0, [r2, r3]
    ee50:	6823      	ldr	r3, [r4, #0]
    ee52:	68e0      	ldr	r0, [r4, #12]
    ee54:	3301      	adds	r3, #1
    ee56:	428e      	cmp	r6, r1
    ee58:	fbb3 f2f0 	udiv	r2, r3, r0
    ee5c:	fb00 3312 	mls	r3, r0, r2, r3
    ee60:	6023      	str	r3, [r4, #0]
    ee62:	d1f1      	bne.n	ee48 <am_hal_queue_item_add+0x28>
    ee64:	68a0      	ldr	r0, [r4, #8]
    ee66:	4405      	add	r5, r0
    ee68:	60a5      	str	r5, [r4, #8]
    ee6a:	9801      	ldr	r0, [sp, #4]
    ee6c:	f7fe ff3c 	bl	dce8 <am_hal_interrupt_master_set>
    ee70:	2401      	movs	r4, #1
    ee72:	4620      	mov	r0, r4
    ee74:	b002      	add	sp, #8
    ee76:	bd70      	pop	{r4, r5, r6, pc}
    ee78:	9801      	ldr	r0, [sp, #4]
    ee7a:	f7fe ff35 	bl	dce8 <am_hal_interrupt_master_set>
    ee7e:	2400      	movs	r4, #0
    ee80:	4620      	mov	r0, r4
    ee82:	b002      	add	sp, #8
    ee84:	bd70      	pop	{r4, r5, r6, pc}
    ee86:	4631      	mov	r1, r6
    ee88:	3101      	adds	r1, #1
    ee8a:	3301      	adds	r3, #1
    ee8c:	428d      	cmp	r5, r1
    ee8e:	fbb3 f6f2 	udiv	r6, r3, r2
    ee92:	fb02 3316 	mls	r3, r2, r6, r3
    ee96:	d1f7      	bne.n	ee88 <am_hal_queue_item_add+0x68>
    ee98:	6023      	str	r3, [r4, #0]
    ee9a:	e7e4      	b.n	ee66 <am_hal_queue_item_add+0x46>

0000ee9c <am_hal_queue_item_get>:
    ee9c:	b570      	push	{r4, r5, r6, lr}
    ee9e:	6905      	ldr	r5, [r0, #16]
    eea0:	4604      	mov	r4, r0
    eea2:	b082      	sub	sp, #8
    eea4:	fb02 f505 	mul.w	r5, r2, r5
    eea8:	460e      	mov	r6, r1
    eeaa:	f7fe ff19 	bl	dce0 <am_hal_interrupt_master_disable>
    eeae:	68a2      	ldr	r2, [r4, #8]
    eeb0:	9001      	str	r0, [sp, #4]
    eeb2:	42aa      	cmp	r2, r5
    eeb4:	d31c      	bcc.n	eef0 <am_hal_queue_item_get+0x54>
    eeb6:	b195      	cbz	r5, eede <am_hal_queue_item_get+0x42>
    eeb8:	6863      	ldr	r3, [r4, #4]
    eeba:	b306      	cbz	r6, eefe <am_hal_queue_item_get+0x62>
    eebc:	1e71      	subs	r1, r6, #1
    eebe:	194e      	adds	r6, r1, r5
    eec0:	6962      	ldr	r2, [r4, #20]
    eec2:	5cd3      	ldrb	r3, [r2, r3]
    eec4:	f801 3f01 	strb.w	r3, [r1, #1]!
    eec8:	6863      	ldr	r3, [r4, #4]
    eeca:	68e0      	ldr	r0, [r4, #12]
    eecc:	3301      	adds	r3, #1
    eece:	428e      	cmp	r6, r1
    eed0:	fbb3 f2f0 	udiv	r2, r3, r0
    eed4:	fb00 3312 	mls	r3, r0, r2, r3
    eed8:	6063      	str	r3, [r4, #4]
    eeda:	d1f1      	bne.n	eec0 <am_hal_queue_item_get+0x24>
    eedc:	68a2      	ldr	r2, [r4, #8]
    eede:	9801      	ldr	r0, [sp, #4]
    eee0:	1b52      	subs	r2, r2, r5
    eee2:	60a2      	str	r2, [r4, #8]
    eee4:	f7fe ff00 	bl	dce8 <am_hal_interrupt_master_set>
    eee8:	2401      	movs	r4, #1
    eeea:	4620      	mov	r0, r4
    eeec:	b002      	add	sp, #8
    eeee:	bd70      	pop	{r4, r5, r6, pc}
    eef0:	9801      	ldr	r0, [sp, #4]
    eef2:	f7fe fef9 	bl	dce8 <am_hal_interrupt_master_set>
    eef6:	2400      	movs	r4, #0
    eef8:	4620      	mov	r0, r4
    eefa:	b002      	add	sp, #8
    eefc:	bd70      	pop	{r4, r5, r6, pc}
    eefe:	68e0      	ldr	r0, [r4, #12]
    ef00:	4631      	mov	r1, r6
    ef02:	3101      	adds	r1, #1
    ef04:	3301      	adds	r3, #1
    ef06:	42a9      	cmp	r1, r5
    ef08:	fbb3 f6f0 	udiv	r6, r3, r0
    ef0c:	fb00 3316 	mls	r3, r0, r6, r3
    ef10:	d1f7      	bne.n	ef02 <am_hal_queue_item_get+0x66>
    ef12:	6063      	str	r3, [r4, #4]
    ef14:	e7e3      	b.n	eede <am_hal_queue_item_get+0x42>
    ef16:	bf00      	nop
    ef18:	65746e49 	.word	0x65746e49
    ef1c:	70757272 	.word	0x70757272
    ef20:	0a212174 	.word	0x0a212174
    ef24:	00000000 	.word	0x00000000
    ef28:	65736552 	.word	0x65736552
    ef2c:	74532074 	.word	0x74532074
    ef30:	73757461 	.word	0x73757461
    ef34:	67655220 	.word	0x67655220
    ef38:	65747369 	.word	0x65747369
    ef3c:	203d2072 	.word	0x203d2072
    ef40:	30257830 	.word	0x30257830
    ef44:	000a7832 	.word	0x000a7832
    ef48:	65776f50 	.word	0x65776f50
    ef4c:	79432072 	.word	0x79432072
    ef50:	64656c63 	.word	0x64656c63
    ef54:	0000000a 	.word	0x0000000a
    ef58:	63746157 	.word	0x63746157
    ef5c:	676f6468 	.word	0x676f6468
    ef60:	73655220 	.word	0x73655220
    ef64:	000a7465 	.word	0x000a7465
    ef68:	75626544 	.word	0x75626544
    ef6c:	72656767 	.word	0x72656767
    ef70:	696e4920 	.word	0x696e4920
    ef74:	74616974 	.word	0x74616974
    ef78:	52206465 	.word	0x52206465
    ef7c:	74657365 	.word	0x74657365
    ef80:	0000000a 	.word	0x0000000a
    ef84:	74666f53 	.word	0x74666f53
    ef88:	65726177 	.word	0x65726177
    ef8c:	494f5020 	.word	0x494f5020
    ef90:	6f702820 	.word	0x6f702820
    ef94:	20726577 	.word	0x20726577
    ef98:	72206e6f 	.word	0x72206e6f
    ef9c:	74657365 	.word	0x74657365
    efa0:	746e6920 	.word	0x746e6920
    efa4:	616e7265 	.word	0x616e7265
    efa8:	7473206c 	.word	0x7473206c
    efac:	29657461 	.word	0x29657461
    efb0:	0000000a 	.word	0x0000000a
    efb4:	74666f53 	.word	0x74666f53
    efb8:	65726177 	.word	0x65726177
    efbc:	524f5020 	.word	0x524f5020
    efc0:	696e4920 	.word	0x696e4920
    efc4:	74616974 	.word	0x74616974
    efc8:	52206465 	.word	0x52206465
    efcc:	74657365 	.word	0x74657365
    efd0:	0000000a 	.word	0x0000000a
    efd4:	776f7242 	.word	0x776f7242
    efd8:	74756f6e 	.word	0x74756f6e
    efdc:	74654420 	.word	0x74654420
    efe0:	6f746365 	.word	0x6f746365
    efe4:	6e492072 	.word	0x6e492072
    efe8:	61697469 	.word	0x61697469
    efec:	20646574 	.word	0x20646574
    eff0:	65736552 	.word	0x65736552
    eff4:	00000a74 	.word	0x00000a74
    eff8:	65747845 	.word	0x65747845
    effc:	6c616e72 	.word	0x6c616e72
    f000:	73655220 	.word	0x73655220
    f004:	50207465 	.word	0x50207465
    f008:	49206e69 	.word	0x49206e69
    f00c:	6974696e 	.word	0x6974696e
    f010:	64657461 	.word	0x64657461
    f014:	69685420 	.word	0x69685420
    f018:	65522073 	.word	0x65522073
    f01c:	0a746573 	.word	0x0a746573
    f020:	00000000 	.word	0x00000000
    f024:	654e2020 	.word	0x654e2020
    f028:	69207478 	.word	0x69207478
    f02c:	7265746e 	.word	0x7265746e
    f030:	74707572 	.word	0x74707572
    f034:	20736920 	.word	0x20736920
    f038:	2c544457 	.word	0x2c544457
    f03c:	206f7320 	.word	0x206f7320
    f040:	6e692035 	.word	0x6e692035
    f044:	72726574 	.word	0x72726574
    f048:	73747075 	.word	0x73747075
    f04c:	6f687320 	.word	0x6f687320
    f050:	20646c75 	.word	0x20646c75
    f054:	7563636f 	.word	0x7563636f
    f058:	000a2e72 	.word	0x000a2e72
    f05c:	654e2020 	.word	0x654e2020
    f060:	69207478 	.word	0x69207478
    f064:	7265746e 	.word	0x7265746e
    f068:	74707572 	.word	0x74707572
    f06c:	20736920 	.word	0x20736920
    f070:	20746f6e 	.word	0x20746f6e
    f074:	2c544457 	.word	0x2c544457
    f078:	206f7320 	.word	0x206f7320
    f07c:	796c6e6f 	.word	0x796c6e6f
    f080:	69203320 	.word	0x69203320
    f084:	7265746e 	.word	0x7265746e
    f088:	74707572 	.word	0x74707572
    f08c:	68732073 	.word	0x68732073
    f090:	646c756f 	.word	0x646c756f
    f094:	63636f20 	.word	0x63636f20
    f098:	0a2e7275 	.word	0x0a2e7275
    f09c:	00000000 	.word	0x00000000
    f0a0:	65736552 	.word	0x65736552
    f0a4:	74532074 	.word	0x74532074
    f0a8:	20657461 	.word	0x20657461
    f0ac:	63617254 	.word	0x63617254
    f0b0:	676e696b 	.word	0x676e696b
    f0b4:	61784520 	.word	0x61784520
    f0b8:	656c706d 	.word	0x656c706d
    f0bc:	00000a2e 	.word	0x00000a2e
    f0c0:	0a0a0a0a 	.word	0x0a0a0a0a
    f0c4:	0a0a0a0a 	.word	0x0a0a0a0a
    f0c8:	0a0a0a0a 	.word	0x0a0a0a0a
    f0cc:	0a0a0a0a 	.word	0x0a0a0a0a
    f0d0:	00000a0a 	.word	0x00000a0a

0000f0d4 <am_hal_cachectrl_defaults>:
    f0d4:	00000308                                ....

0000f0d8 <g_AM_HAL_GPIO_DISABLE>:
    f0d8:	00000003                                ....

0000f0dc <g_AM_HAL_GPIO_OUTPUT>:
    f0dc:	00000403                                ....

0000f0e0 <g_AM_HAL_GPIO_TRISTATE>:
    f0e0:	00000c03                                ....

0000f0e4 <g_ui8Bit76Capabilities>:
    f0e4:	02800101 80010180 80800101 80808080     ................
    f0f4:	80808080 80808008 01800180 80808080     ................
    f104:	80808080 01800402 01010401 80808080     ................
    f114:	00000101                                ....

0000f118 <g_ui8Inpen>:
    f118:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    f128:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    f138:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    f148:	00003130                                01..

0000f14c <g_ui8NCEtable>:
    f14c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f15c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f16c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f17c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f18c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f19c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f1ac:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f1bc:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f1cc:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f1dc:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f1ec:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f1fc:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f20c:	32221202 43231303                       .."2..#C

0000f214 <g_ui8nCEpins>:
    f214:	02070707 00080802 01020202 01010101     ................
    f224:	01010101 01010101 01010101 01010101     ................
    f234:	01010101 08010101 01010008 01010101     ................
    f244:	00000101                                ....

0000f248 <g_am_hal_mcuctrl_flash_size>:
    f248:	00004000 00008000 00010000 00020000     .@..............
    f258:	00040000 00080000 00100000 00200000     .............. .
    f268:	00180000 00000000 00000000 00000000     ................
	...

0000f288 <g_am_hal_mcuctrl_sram_size>:
    f288:	00004000 00008000 00010000 00020000     .@..............
    f298:	00040000 00080000 00100000 00060000     ................
    f2a8:	000c0000 00000000 00000000 00000000     ................
	...

0000f2c8 <g_sBspUartConfig>:
    f2c8:	0001c200 00000060 00000000 00000000     ....`...........
    f2d8:	00000000 00000012 00000000 00000000     ................
	...

0000f2f0 <g_AM_BSP_GPIO_COM_UART_RX>:
    f2f0:	00000000                                ....

0000f2f4 <g_AM_BSP_GPIO_COM_UART_TX>:
    f2f4:	00000000                                ....

0000f2f8 <g_AM_BSP_GPIO_ITM_SWO>:
    f2f8:	00000002                                ....

0000f2fc <am_hal_pwrctrl_peripheral_control>:
	...
    f308:	00000001 00000004 00000004 00000002     ................
    f318:	00000008 00000008 00000004 00000008     ................
    f328:	00000008 00000008 00000008 00000008     ................
    f338:	00000010 00000010 00000010 00000020     ............ ...
    f348:	00000010 00000010 00000040 00000010     ........@.......
    f358:	00000010 00000080 00000004 00000004     ................
    f368:	00000100 00000004 00000004 00000200     ................
    f378:	00000020 00000020 00000400 00000004      ... ...........
    f388:	00000004 00000800 00000040 00000040     ........@...@...
    f398:	00001000 00000080 00000080 00002000     ............. ..
    f3a8:	00000100 00000100                       ........

0000f3b0 <CSWTCH.20>:
    f3b0:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
