
bin/ble_freertos_amdtpc.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 a9 10 02 00 9d 10 02 00 55 f4 01 00     .+..........U...
    c010:	a1 10 02 00 a1 10 02 00 a1 10 02 00 00 00 00 00     ................
	...
    c02c:	61 35 01 00 a5 10 02 00 00 00 00 00 d1 35 01 00     a5...........5..
    c03c:	35 36 01 00 a5 10 02 00 a5 10 02 00 a5 10 02 00     56..............
    c04c:	a5 10 02 00 a5 10 02 00 a5 10 02 00 a5 10 02 00     ................
    c05c:	a5 10 02 00 a5 10 02 00 a5 10 02 00 a5 10 02 00     ................
    c06c:	a5 10 02 00 19 fa 00 00 a5 10 02 00 95 fa 00 00     ................
    c07c:	91 f9 00 00 a5 10 02 00 a5 10 02 00 a5 10 02 00     ................
    c08c:	a5 10 02 00 a5 10 02 00 a5 10 02 00 a5 10 02 00     ................
    c09c:	dd 37 01 00 fd 37 01 00 a5 10 02 00 a5 10 02 00     .7...7..........
    c0ac:	a5 10 02 00 a5 10 02 00 a5 10 02 00 a5 10 02 00     ................
    c0bc:	a5 10 02 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <__aeabi_d2f>:
    c234:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c238:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c23c:	bf24      	itt	cs
    c23e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c242:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c246:	d90d      	bls.n	c264 <__aeabi_d2f+0x30>
    c248:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c24c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c250:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c254:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c258:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c25c:	bf08      	it	eq
    c25e:	f020 0001 	biceq.w	r0, r0, #1
    c262:	4770      	bx	lr
    c264:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c268:	d121      	bne.n	c2ae <__aeabi_d2f+0x7a>
    c26a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c26e:	bfbc      	itt	lt
    c270:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c274:	4770      	bxlt	lr
    c276:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c27a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c27e:	f1c2 0218 	rsb	r2, r2, #24
    c282:	f1c2 0c20 	rsb	ip, r2, #32
    c286:	fa10 f30c 	lsls.w	r3, r0, ip
    c28a:	fa20 f002 	lsr.w	r0, r0, r2
    c28e:	bf18      	it	ne
    c290:	f040 0001 	orrne.w	r0, r0, #1
    c294:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c298:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c29c:	fa03 fc0c 	lsl.w	ip, r3, ip
    c2a0:	ea40 000c 	orr.w	r0, r0, ip
    c2a4:	fa23 f302 	lsr.w	r3, r3, r2
    c2a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2ac:	e7cc      	b.n	c248 <__aeabi_d2f+0x14>
    c2ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c2b2:	d107      	bne.n	c2c4 <__aeabi_d2f+0x90>
    c2b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c2b8:	bf1e      	ittt	ne
    c2ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c2be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c2c2:	4770      	bxne	lr
    c2c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c2c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c2cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop

0000c2d4 <smpiActPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActPairReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c2d4:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    c2d6:	2201      	movs	r2, #1
{
    c2d8:	4604      	mov	r4, r0
    c2da:	460d      	mov	r5, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    c2dc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    c2e0:	4611      	mov	r1, r2
    c2e2:	f00f ff5d 	bl	1c1a0 <DmConnSetIdle>

  /* set next expected packet */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RSP;
    c2e6:	2302      	movs	r3, #2

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    c2e8:	4620      	mov	r0, r4
  pCcb->nextCmdCode = SMP_CMD_PAIR_RSP;
    c2ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  smpStartRspTimer(pCcb);
    c2ee:	f000 fbc3 	bl	ca78 <smpStartRspTimer>

  /* allocate scratch buffer */
  pCcb->pScr = WsfBufAlloc(sizeof(smpScratch_t));
    c2f2:	2040      	movs	r0, #64	; 0x40
    c2f4:	f00b fc74 	bl	17be0 <WsfBufAlloc>
    c2f8:	6320      	str	r0, [r4, #48]	; 0x30
  /* handle alloc failure */

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
    c2fa:	200f      	movs	r0, #15
    c2fc:	f001 fce8 	bl	dcd0 <smpMsgAlloc>
    c300:	b1e0      	cbz	r0, c33c <smpiActPairReq+0x68>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_REQ);
    UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
    c302:	4b0f      	ldr	r3, [pc, #60]	; (c340 <smpiActPairReq+0x6c>)
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_REQ);
    c304:	2201      	movs	r2, #1
    UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
    c306:	681b      	ldr	r3, [r3, #0]
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_REQ);
    c308:	7202      	strb	r2, [r0, #8]
    UINT8_TO_BSTREAM(p, pSmpCfg->ioCap);
    c30a:	791a      	ldrb	r2, [r3, #4]
    c30c:	7242      	strb	r2, [r0, #9]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.oob);
    c30e:	792a      	ldrb	r2, [r5, #4]
    c310:	7282      	strb	r2, [r0, #10]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.auth);
    c312:	796a      	ldrb	r2, [r5, #5]
    c314:	72c2      	strb	r2, [r0, #11]
    UINT8_TO_BSTREAM(p, pSmpCfg->maxKeyLen);
    c316:	799b      	ldrb	r3, [r3, #6]
    c318:	7303      	strb	r3, [r0, #12]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.iKeyDist);
    c31a:	79ab      	ldrb	r3, [r5, #6]
    c31c:	7343      	strb	r3, [r0, #13]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
    c31e:	79ea      	ldrb	r2, [r5, #7]

    /* store pair req data */
    memcpy(pCcb->pairReq, pPkt + L2C_PAYLOAD_START, SMP_PAIR_REQ_LEN);
    c320:	6883      	ldr	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, pMsg->dm.pair.rKeyDist);
    c322:	7382      	strb	r2, [r0, #14]
    memcpy(pCcb->pairReq, pPkt + L2C_PAYLOAD_START, SMP_PAIR_REQ_LEN);
    c324:	6223      	str	r3, [r4, #32]
    c326:	8983      	ldrh	r3, [r0, #12]
    c328:	7b82      	ldrb	r2, [r0, #14]
    c32a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
    c32e:	84a3      	strh	r3, [r4, #36]	; 0x24
    c330:	4601      	mov	r1, r0

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    c332:	4620      	mov	r0, r4
  }
}
    c334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
    c338:	f001 bcaa 	b.w	dc90 <smpSendPkt>
}
    c33c:	bd38      	pop	{r3, r4, r5, pc}
    c33e:	bf00      	nop
    c340:	10002e54 	.word	0x10002e54

0000c344 <smpiActCheckSecurityReq>:
 */
/*************************************************************************************************/
void smpiActCheckSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* if security req received send pairing failed */
  if (pCcb->secReq)
    c344:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    c348:	b902      	cbnz	r2, c34c <smpiActCheckSecurityReq+0x8>
  {
    pCcb->secReq = FALSE;
    smpSendPairingFailed(pCcb, pMsg->hdr.status);
  }
}
    c34a:	4770      	bx	lr
    pCcb->secReq = FALSE;
    c34c:	2200      	movs	r2, #0
    c34e:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
    smpSendPairingFailed(pCcb, pMsg->hdr.status);
    c352:	78c9      	ldrb	r1, [r1, #3]
    c354:	f000 bbb6 	b.w	cac4 <smpSendPairingFailed>

0000c358 <smpiActProcSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActProcSecurityReq(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c358:	b500      	push	{lr}
  dmSecSlaveIndEvt_t  slaveInd;

  pCcb->secReq = TRUE;
    c35a:	2301      	movs	r3, #1
    c35c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b

  /* parse packet */
  slaveInd.auth = *(pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
    c360:	684b      	ldr	r3, [r1, #4]

  /* pass to DM */
  slaveInd.hdr.param = pCcb->connId;
    c362:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  slaveInd.auth = *(pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
    c366:	7a59      	ldrb	r1, [r3, #9]
{
    c368:	b083      	sub	sp, #12
  slaveInd.hdr.event = DM_SEC_SLAVE_REQ_IND;
    c36a:	2332      	movs	r3, #50	; 0x32
  DmSmpCbackExec((dmEvt_t *) &slaveInd);
    c36c:	4668      	mov	r0, sp
  slaveInd.auth = *(pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
    c36e:	f88d 1004 	strb.w	r1, [sp, #4]
  slaveInd.hdr.param = pCcb->connId;
    c372:	f8ad 2000 	strh.w	r2, [sp]
  slaveInd.hdr.event = DM_SEC_SLAVE_REQ_IND;
    c376:	f88d 3002 	strb.w	r3, [sp, #2]
  DmSmpCbackExec((dmEvt_t *) &slaveInd);
    c37a:	f011 f877 	bl	1d46c <DmSmpCbackExec>
}
    c37e:	b003      	add	sp, #12
    c380:	f85d fb04 	ldr.w	pc, [sp], #4

0000c384 <smpiActProcPairRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActProcPairRsp(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c384:	b530      	push	{r4, r5, lr}
  uint8_t         *p;
  uint8_t         oob;
  uint8_t         display;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START;
    c386:	684b      	ldr	r3, [r1, #4]

  /* store packet parameters */
  memcpy(pCcb->pairRsp, p, SMP_PAIR_RSP_LEN);
    c388:	689a      	ldr	r2, [r3, #8]
    c38a:	f8c0 2027 	str.w	r2, [r0, #39]	; 0x27
    c38e:	899a      	ldrh	r2, [r3, #12]
    c390:	f893 c00e 	ldrb.w	ip, [r3, #14]
    c394:	f880 c02d 	strb.w	ip, [r0, #45]	; 0x2d
    c398:	f8a0 202b 	strh.w	r2, [r0, #43]	; 0x2b

  /* verify no new key distribution bits are set */
  if (((~(pCcb->pairReq[SMP_IKEYDIST_POS]) & p[SMP_IKEYDIST_POS]) != 0) ||
    c39c:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
    c3a0:	7b5a      	ldrb	r2, [r3, #13]
    c3a2:	ea32 020c 	bics.w	r2, r2, ip
{
    c3a6:	b083      	sub	sp, #12
    c3a8:	4604      	mov	r4, r0
  if (((~(pCcb->pairReq[SMP_IKEYDIST_POS]) & p[SMP_IKEYDIST_POS]) != 0) ||
    c3aa:	d104      	bne.n	c3b6 <smpiActProcPairRsp+0x32>
      ((~(pCcb->pairReq[SMP_RKEYDIST_POS]) & p[SMP_RKEYDIST_POS]) != 0))
    c3ac:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
    c3b0:	7b9b      	ldrb	r3, [r3, #14]
  if (((~(pCcb->pairReq[SMP_IKEYDIST_POS]) & p[SMP_IKEYDIST_POS]) != 0) ||
    c3b2:	4393      	bics	r3, r2
    c3b4:	d008      	beq.n	c3c8 <smpiActProcPairRsp+0x44>
  {
    /* invalid parameters; cancel pairing */
    pMsg->hdr.status = SMP_ERR_INVALID_PARAM;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    c3b6:	f640 2303 	movw	r3, #2563	; 0xa03
    smpSmExecute(pCcb, pMsg);
    c3ba:	4620      	mov	r0, r4
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    c3bc:	804b      	strh	r3, [r1, #2]
    if (smpCb.procPairing(pCcb, &oob, &display))
    {
      smpCb.procAuthReq(pCcb, oob, display);
    }
  }
}
    c3be:	b003      	add	sp, #12
    c3c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    smpSmExecute(pCcb, pMsg);
    c3c4:	f000 be6c 	b.w	d0a0 <smpSmExecute>
    if (smpCb.procPairing(pCcb, &oob, &display))
    c3c8:	4d09      	ldr	r5, [pc, #36]	; (c3f0 <smpiActProcPairRsp+0x6c>)
    c3ca:	f10d 0207 	add.w	r2, sp, #7
    c3ce:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    c3d2:	f10d 0106 	add.w	r1, sp, #6
    c3d6:	4798      	blx	r3
    c3d8:	b138      	cbz	r0, c3ea <smpiActProcPairRsp+0x66>
      smpCb.procAuthReq(pCcb, oob, display);
    c3da:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    c3de:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c3e2:	f89d 1006 	ldrb.w	r1, [sp, #6]
    c3e6:	4620      	mov	r0, r4
    c3e8:	4798      	blx	r3
}
    c3ea:	b003      	add	sp, #12
    c3ec:	bd30      	pop	{r4, r5, pc}
    c3ee:	bf00      	nop
    c3f0:	10004118 	.word	0x10004118

0000c3f4 <smpiActProcPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActProcPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c3f4:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;

  /* go to start of packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    c3f6:	684a      	ldr	r2, [r1, #4]

  /* store confirm value */
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
    c3f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    c3fa:	f8d2 500d 	ldr.w	r5, [r2, #13]
    c3fe:	f8d2 c009 	ldr.w	ip, [r2, #9]
    c402:	f8d2 1011 	ldr.w	r1, [r2, #17]
    c406:	f8d2 2015 	ldr.w	r2, [r2, #21]
    c40a:	625d      	str	r5, [r3, #36]	; 0x24

  /* set next expected packet */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
    c40c:	2504      	movs	r5, #4
  memcpy(pCcb->pScr->buf.b3, p, SMP_CONFIRM_LEN);
    c40e:	62da      	str	r2, [r3, #44]	; 0x2c
    c410:	f8c3 c020 	str.w	ip, [r3, #32]
    c414:	6299      	str	r1, [r3, #40]	; 0x28
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
    c416:	f880 503f 	strb.w	r5, [r0, #63]	; 0x3f
{
    c41a:	4604      	mov	r4, r0

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    c41c:	f000 fb2c 	bl	ca78 <smpStartRspTimer>

  /* allocate packet buffer and send pairing random packet */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
    c420:	2019      	movs	r0, #25
    c422:	f001 fc55 	bl	dcd0 <smpMsgAlloc>
    c426:	b198      	cbz	r0, c450 <smpiActProcPairCnf+0x5c>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
    c428:	7205      	strb	r5, [r0, #8]
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
    c42a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c42c:	4601      	mov	r1, r0
    c42e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    c430:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    c432:	4620      	mov	r0, r4
    memcpy(p, pCcb->pScr->buf.b4, SMP_RAND_LEN);
    c434:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    c436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c438:	f8c1 3015 	str.w	r3, [r1, #21]
    c43c:	f8c1 5009 	str.w	r5, [r1, #9]
    c440:	f8c1 400d 	str.w	r4, [r1, #13]
    c444:	f8c1 2011 	str.w	r2, [r1, #17]
  }
}
    c448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
    c44c:	f001 bc20 	b.w	dc90 <smpSendPkt>
}
    c450:	bd38      	pop	{r3, r4, r5, pc}
    c452:	bf00      	nop

0000c454 <smpiActCnfVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActCnfVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c454:	b570      	push	{r4, r5, r6, lr}
  /* compare calculated confirm value with value received earlier */
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
    c456:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
    c458:	460d      	mov	r5, r1
    c45a:	4604      	mov	r4, r0
  if (memcmp(pMsg->aes.pCiphertext, pCcb->pScr->buf.b3, SMP_CONFIRM_LEN) != 0)
    c45c:	2210      	movs	r2, #16
    c45e:	6868      	ldr	r0, [r5, #4]
    c460:	f106 0120 	add.w	r1, r6, #32
    c464:	f014 fe54 	bl	21110 <memcmp>
    c468:	b948      	cbnz	r0, c47e <smpiActCnfVerify+0x2a>
    smpSmExecute(pCcb, pMsg);
    return;
  }

  /* do STK calculation: key, responder rand, initiator rand */
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b2, pCcb->pScr->buf.b4);
    c46a:	f106 0330 	add.w	r3, r6, #48	; 0x30
    c46e:	f106 0210 	add.w	r2, r6, #16
    c472:	4631      	mov	r1, r6
    c474:	4620      	mov	r0, r4
}
    c476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpCalcS1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b2, pCcb->pScr->buf.b4);
    c47a:	f001 bbaf 	b.w	dbdc <smpCalcS1>
    pMsg->hdr.status = SMP_ERR_CONFIRM_VALUE;
    c47e:	2304      	movs	r3, #4
    c480:	70eb      	strb	r3, [r5, #3]
    pCcb->attempts++;
    c482:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
    c486:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    pCcb->attempts++;
    c48a:	3301      	adds	r3, #1
    c48c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    SmpDbPairingFailed(pCcb->connId);
    c490:	f000 fff0 	bl	d474 <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
    c494:	4a07      	ldr	r2, [pc, #28]	; (c4b4 <smpiActCnfVerify+0x60>)
    c496:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    c49a:	6812      	ldr	r2, [r2, #0]
    c49c:	79d2      	ldrb	r2, [r2, #7]
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    c49e:	4293      	cmp	r3, r2
    c4a0:	bf0c      	ite	eq
    c4a2:	230d      	moveq	r3, #13
    c4a4:	2303      	movne	r3, #3
    smpSmExecute(pCcb, pMsg);
    c4a6:	4629      	mov	r1, r5
    c4a8:	4620      	mov	r0, r4
    c4aa:	70ab      	strb	r3, [r5, #2]
}
    c4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
    c4b0:	f000 bdf6 	b.w	d0a0 <smpSmExecute>
    c4b4:	10002e54 	.word	0x10002e54

0000c4b8 <smpiActStkEncrypt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActStkEncrypt(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c4b8:	b530      	push	{r4, r5, lr}
  uint8_t buf[SMP_KEY_LEN];
  uint8_t encKeyLen;
  uint8_t secLevel;

  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
    c4ba:	f890 502b 	ldrb.w	r5, [r0, #43]	; 0x2b
    c4be:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
               pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

  /* adjust key based on max key length */
  memcpy(buf, pMsg->aes.pCiphertext, encKeyLen);
    c4c2:	6849      	ldr	r1, [r1, #4]
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
    c4c4:	429d      	cmp	r5, r3
{
    c4c6:	b085      	sub	sp, #20
  encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
    c4c8:	bf28      	it	cs
    c4ca:	461d      	movcs	r5, r3
{
    c4cc:	4604      	mov	r4, r0
  memcpy(buf, pMsg->aes.pCiphertext, encKeyLen);
    c4ce:	462a      	mov	r2, r5
    c4d0:	4668      	mov	r0, sp
    c4d2:	f7ff fe15 	bl	c100 <memcpy>
  memset((buf + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
    c4d6:	2100      	movs	r1, #0
    c4d8:	f1c5 0210 	rsb	r2, r5, #16
    c4dc:	eb0d 0005 	add.w	r0, sp, r5
    c4e0:	f014 fe48 	bl	21174 <memset>

  secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    c4e4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  DmSmpEncryptReq(pCcb->connId, secLevel, buf);
    c4e8:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    c4ec:	f013 0f04 	tst.w	r3, #4
  DmSmpEncryptReq(pCcb->connId, secLevel, buf);
    c4f0:	466a      	mov	r2, sp
    c4f2:	bf14      	ite	ne
    c4f4:	2102      	movne	r1, #2
    c4f6:	2101      	moveq	r1, #1
    c4f8:	f011 f896 	bl	1d628 <DmSmpEncryptReq>
}
    c4fc:	b005      	add	sp, #20
    c4fe:	bd30      	pop	{r4, r5, pc}

0000c500 <smpiActSetupKeyDist>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActSetupKeyDist(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c500:	b538      	push	{r3, r4, r5, lr}
    c502:	4604      	mov	r4, r0
    c504:	460d      	mov	r5, r1
  uint8_t   rKeyDist;

  /* start smp response timer once for entire key distribution phase */
  smpStartRspTimer(pCcb);
    c506:	f000 fab7 	bl	ca78 <smpStartRspTimer>

  /* initialize parameters in key ind struct */
  pCcb->pScr->keyInd.hdr.param = pCcb->connId;
    c50a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c50c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    c510:	801a      	strh	r2, [r3, #0]
  pCcb->pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ?
    c512:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    c516:	f012 0f04 	tst.w	r2, #4
    c51a:	bf14      	ite	ne
    c51c:	2202      	movne	r2, #2
    c51e:	2201      	moveq	r2, #1
    c520:	77da      	strb	r2, [r3, #31]
                                DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
  pCcb->pScr->keyInd.encKeyLen =
    (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
     pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];
    c522:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    c526:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
    c52a:	428a      	cmp	r2, r1
    c52c:	bf28      	it	cs
    c52e:	460a      	movcs	r2, r1
  pCcb->pScr->keyInd.encKeyLen =
    c530:	f883 2020 	strb.w	r2, [r3, #32]

  pCcb->nextCmdCode = 0;

  /* get negotiated responder key distribution */
  rKeyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
    c534:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    c538:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    c53c:	400b      	ands	r3, r1
  pCcb->nextCmdCode = 0;
    c53e:	2200      	movs	r2, #0

  /* set up to receive first key distribution packet */
  if (rKeyDist & SMP_KEY_DIST_ENC)
    c540:	07d8      	lsls	r0, r3, #31
  pCcb->nextCmdCode = 0;
    c542:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  if (rKeyDist & SMP_KEY_DIST_ENC)
    c546:	d50c      	bpl.n	c562 <smpiActSetupKeyDist+0x62>
  {
      if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled)
    c548:	4a10      	ldr	r2, [pc, #64]	; (c58c <smpiActSetupKeyDist+0x8c>)
    c54a:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
    c54e:	b182      	cbz	r2, c572 <smpiActSetupKeyDist+0x72>
    c550:	6c62      	ldr	r2, [r4, #68]	; 0x44
    c552:	7812      	ldrb	r2, [r2, #0]
    c554:	b16a      	cbz	r2, c572 <smpiActSetupKeyDist+0x72>
      {
        if (rKeyDist & SMP_KEY_DIST_ID)
    c556:	0799      	lsls	r1, r3, #30
    c558:	d50f      	bpl.n	c57a <smpiActSetupKeyDist+0x7a>
        {
          pCcb->nextCmdCode = SMP_CMD_ID_INFO;
    c55a:	2308      	movs	r3, #8
    c55c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  {
    /* no responder keys to be distributed; start sending keys */
    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
    smpSmExecute(pCcb, pMsg);
  }
}
    c560:	bd38      	pop	{r3, r4, r5, pc}
  else if (rKeyDist & SMP_KEY_DIST_ID)
    c562:	079a      	lsls	r2, r3, #30
    c564:	d4f9      	bmi.n	c55a <smpiActSetupKeyDist+0x5a>
  else if (rKeyDist & SMP_KEY_DIST_SIGN)
    c566:	075b      	lsls	r3, r3, #29
    c568:	d507      	bpl.n	c57a <smpiActSetupKeyDist+0x7a>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
    c56a:	230a      	movs	r3, #10
    c56c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
    c570:	bd38      	pop	{r3, r4, r5, pc}
        pCcb->nextCmdCode = SMP_CMD_ENC_INFO;
    c572:	2306      	movs	r3, #6
    c574:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
    c578:	bd38      	pop	{r3, r4, r5, pc}
    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
    c57a:	230c      	movs	r3, #12
    c57c:	70ab      	strb	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
    c57e:	4629      	mov	r1, r5
    c580:	4620      	mov	r0, r4
}
    c582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSmExecute(pCcb, pMsg);
    c586:	f000 bd8b 	b.w	d0a0 <smpSmExecute>
    c58a:	bf00      	nop
    c58c:	10004118 	.word	0x10004118

0000c590 <smpiActRcvKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActRcvKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c590:	b538      	push	{r3, r4, r5, lr}
  uint8_t   keyDist;

  /* get responder key distribution */
  keyDist = pCcb->pairReq[SMP_RKEYDIST_POS] & pCcb->pairRsp[SMP_RKEYDIST_POS];
    c592:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
    c596:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
{
    c59a:	460d      	mov	r5, r1

  /* process received key */
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
    c59c:	4013      	ands	r3, r2
    c59e:	684a      	ldr	r2, [r1, #4]
    c5a0:	6b01      	ldr	r1, [r0, #48]	; 0x30
{
    c5a2:	4604      	mov	r4, r0
  if (smpProcRcvKey(pCcb, &pCcb->pScr->keyInd, pMsg->data.pPacket, keyDist))
    c5a4:	f000 fc4e 	bl	ce44 <smpProcRcvKey>
    c5a8:	b900      	cbnz	r0, c5ac <smpiActRcvKey+0x1c>
    pCcb->nextCmdCode = 0;

    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
    smpSmExecute(pCcb, pMsg);
  }
}
    c5aa:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->nextCmdCode = 0;
    c5ac:	2200      	movs	r2, #0
    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
    c5ae:	230c      	movs	r3, #12
    pCcb->nextCmdCode = 0;
    c5b0:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
    smpSmExecute(pCcb, pMsg);
    c5b4:	4629      	mov	r1, r5
    pMsg->hdr.event = SMP_MSG_INT_SEND_NEXT_KEY;
    c5b6:	70ab      	strb	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
    c5b8:	4620      	mov	r0, r4
}
    c5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSmExecute(pCcb, pMsg);
    c5be:	f000 bd6f 	b.w	d0a0 <smpSmExecute>
    c5c2:	bf00      	nop

0000c5c4 <smpiActSendKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiActSendKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c5c4:	b538      	push	{r3, r4, r5, lr}

  /* get initiator key distribution */
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];

  /* send next key */
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
    c5c6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
    c5ca:	b103      	cbz	r3, c5ce <smpiActSendKey+0xa>
      /* done sending keys; send ourselves pairing complete msg */
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
      smpSmExecute(pCcb, pMsg);
      return;
  }
}
    c5cc:	bd38      	pop	{r3, r4, r5, pc}
  keyDist = pCcb->pairReq[SMP_IKEYDIST_POS] & pCcb->pairRsp[SMP_IKEYDIST_POS];
    c5ce:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    c5d2:	460d      	mov	r5, r1
    c5d4:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
  if ((pCcb->nextCmdCode == 0) && smpSendKey(pCcb, keyDist))
    c5d8:	4019      	ands	r1, r3
    c5da:	4604      	mov	r4, r0
    c5dc:	f000 fb54 	bl	cc88 <smpSendKey>
    c5e0:	2800      	cmp	r0, #0
    c5e2:	d0f3      	beq.n	c5cc <smpiActSendKey+0x8>
      pMsg->hdr.event = SMP_MSG_INT_PAIRING_CMPL;
    c5e4:	230e      	movs	r3, #14
    c5e6:	70ab      	strb	r3, [r5, #2]
      smpSmExecute(pCcb, pMsg);
    c5e8:	4629      	mov	r1, r5
    c5ea:	4620      	mov	r0, r4
}
    c5ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSmExecute(pCcb, pMsg);
    c5f0:	f000 bd56 	b.w	d0a0 <smpSmExecute>

0000c5f4 <smpiScActAuthSelect>:
 */
/*************************************************************************************************/
void smpiScActAuthSelect(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Execute Common Auth Select actions */
  smpScActAuthSelect(pCcb, pMsg);
    c5f4:	f001 bea2 	b.w	e33c <smpScActAuthSelect>

0000c5f8 <smpiScActSendPubKey>:
 */
/*************************************************************************************************/
void smpiScActSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* Next command is the Public Key from the responder */
  pCcb->nextCmdCode = SMP_CMD_PUBLIC_KEY;
    c5f8:	230c      	movs	r3, #12
    c5fa:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f

  /* Send the public key */
  smpScSendPubKey(pCcb, pMsg);
    c5fe:	f002 baad 	b.w	eb5c <smpScSendPubKey>
    c602:	bf00      	nop

0000c604 <smpiScActJwncSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActJwncSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c604:	b538      	push	{r3, r4, r5, lr}
  /* Select Random Na (128-bits) */
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
    c606:	6c43      	ldr	r3, [r0, #68]	; 0x44

  SMP_TRACE_128("Rand Na", pCcb->pScCcb->pScratch->Na_Ea);

  /* Set Ra and Rb to sero */
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
    c608:	4d0d      	ldr	r5, [pc, #52]	; (c640 <smpiScActJwncSetup+0x3c>)
{
    c60a:	4604      	mov	r4, r0
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
    c60c:	2110      	movs	r1, #16
    c60e:	6958      	ldr	r0, [r3, #20]
    c610:	f00e fc70 	bl	1aef4 <SecRand>
  SMP_TRACE_128("Rand Na", pCcb->pScCcb->pScratch->Na_Ea);
    c614:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c616:	480b      	ldr	r0, [pc, #44]	; (c644 <smpiScActJwncSetup+0x40>)
    c618:	6959      	ldr	r1, [r3, #20]
    c61a:	2210      	movs	r2, #16
    c61c:	f002 fbae 	bl	ed7c <smpLogByteArray>
  Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
    c620:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c622:	6958      	ldr	r0, [r3, #20]
    c624:	4629      	mov	r1, r5
    c626:	3020      	adds	r0, #32
    c628:	f006 fe9e 	bl	13368 <Calc128Cpy>
  Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*) calc128Zeros);
    c62c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c62e:	6958      	ldr	r0, [r3, #20]
    c630:	4629      	mov	r1, r5
    c632:	3030      	adds	r0, #48	; 0x30
    c634:	f006 fe98 	bl	13368 <Calc128Cpy>

  /* Next command is a Pair Confirm from Responder */
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
    c638:	2303      	movs	r3, #3
    c63a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
}
    c63e:	bd38      	pop	{r3, r4, r5, pc}
    c640:	00024d1c 	.word	0x00024d1c
    c644:	00024070 	.word	0x00024070

0000c648 <smpiScActJwncSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActJwncSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c648:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pCb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Cb from responder is in Confirm from rsponder */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
    c64a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    c64c:	4604      	mov	r4, r0
    c64e:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
    c650:	6958      	ldr	r0, [r3, #20]
  uint8_t *pCb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    c652:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
    c654:	2210      	movs	r2, #16
    c656:	3109      	adds	r1, #9
    c658:	3040      	adds	r0, #64	; 0x40
    c65a:	f006 ff15 	bl	13488 <WStrReverseCpy>

  SMP_TRACE_128("Peer Cb", pCcb->pScCcb->pScratch->PeerCb);
    c65e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c660:	4808      	ldr	r0, [pc, #32]	; (c684 <smpiScActJwncSendRand+0x3c>)
    c662:	6959      	ldr	r1, [r3, #20]
    c664:	2210      	movs	r2, #16
    c666:	3140      	adds	r1, #64	; 0x40
    c668:	f002 fb88 	bl	ed7c <smpLogByteArray>

  /* Next command is a Pair Random from Responder */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;

  /* Send the Pair Rand */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c66c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
    c66e:	2204      	movs	r2, #4
    c670:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c674:	695a      	ldr	r2, [r3, #20]
    c676:	4629      	mov	r1, r5
    c678:	4620      	mov	r0, r4
}
    c67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c67e:	f002 bac5 	b.w	ec0c <smpScSendRand>
    c682:	bf00      	nop
    c684:	00024078 	.word	0x00024078

0000c688 <smpiScActJwncCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActJwncCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c688:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Nb from responder is in pPacket */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c68a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    c68c:	4604      	mov	r4, r0
    c68e:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c690:	6958      	ldr	r0, [r3, #20]
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    c692:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c694:	3010      	adds	r0, #16
    c696:	3109      	adds	r1, #9
    c698:	2210      	movs	r2, #16
    c69a:	f006 fef5 	bl	13488 <WStrReverseCpy>

  smpScActJwncCalcF4(pCcb, pMsg);
    c69e:	4629      	mov	r1, r5
    c6a0:	4620      	mov	r0, r4
}
    c6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActJwncCalcF4(pCcb, pMsg);
    c6a6:	f001 bea3 	b.w	e3f0 <smpScActJwncCalcF4>
    c6aa:	bf00      	nop

0000c6ac <smpiScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c6ac:	b538      	push	{r3, r4, r5, lr}
    c6ae:	4605      	mov	r5, r0
    c6b0:	460c      	mov	r4, r1
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;

  SMP_TRACE_128("Local Cb", pCmac->pCiphertext);
    c6b2:	480c      	ldr	r0, [pc, #48]	; (c6e4 <smpiScActJwncCalcG2+0x38>)
    c6b4:	6849      	ldr	r1, [r1, #4]
    c6b6:	2210      	movs	r2, #16
    c6b8:	f002 fb60 	bl	ed7c <smpLogByteArray>

  /* Check the result of the F4 confirm calculation */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCb, pCmac->pCiphertext, SMP_CONFIRM_LEN))
    c6bc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    c6be:	6861      	ldr	r1, [r4, #4]
    c6c0:	6958      	ldr	r0, [r3, #20]
    c6c2:	2210      	movs	r2, #16
    c6c4:	3040      	adds	r0, #64	; 0x40
    c6c6:	f014 fd23 	bl	21110 <memcmp>
    c6ca:	b120      	cbz	r0, c6d6 <smpiScActJwncCalcG2+0x2a>
  {
    smpScFailWithReattempt(pCcb);
    c6cc:	4628      	mov	r0, r5
  }
  else
  {
    smpScActJwncCalcG2(pCcb, pMsg);
  }
}
    c6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpScFailWithReattempt(pCcb);
    c6d2:	f002 bb23 	b.w	ed1c <smpScFailWithReattempt>
    smpScActJwncCalcG2(pCcb, pMsg);
    c6d6:	4621      	mov	r1, r4
    c6d8:	4628      	mov	r0, r5
}
    c6da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpScActJwncCalcG2(pCcb, pMsg);
    c6de:	f001 bed5 	b.w	e48c <smpScActJwncCalcG2>
    c6e2:	bf00      	nop
    c6e4:	00024080 	.word	0x00024080

0000c6e8 <smpiScActPkCalcCa>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkCalcCa(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c6e8:	b570      	push	{r4, r5, r6, lr}
  /* Record the passkey on the first confirm */
  if (pCcb->pScCcb->pkPos == 0)
    c6ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c6ec:	78da      	ldrb	r2, [r3, #3]
{
    c6ee:	b084      	sub	sp, #16
    c6f0:	4604      	mov	r4, r0
    c6f2:	460d      	mov	r5, r1
  if (pCcb->pScCcb->pkPos == 0)
    c6f4:	b1f2      	cbz	r2, c734 <smpiScActPkCalcCa+0x4c>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    }
  }

  /* Get random Nai */
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
    c6f6:	6958      	ldr	r0, [r3, #20]
    c6f8:	2110      	movs	r1, #16
    c6fa:	f00e fbfb 	bl	1aef4 <SecRand>

  SMP_TRACE_128("Rand Na", pCcb->pScCcb->pScratch->Na_Ea);
    c6fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c700:	481b      	ldr	r0, [pc, #108]	; (c770 <smpiScActPkCalcCa+0x88>)
    c702:	6959      	ldr	r1, [r3, #20]
    c704:	2210      	movs	r2, #16
    c706:	f002 fb39 	bl	ed7c <smpLogByteArray>

  /* Ca = f4(PKax, PKbx, Nai, Rai) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    c70a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
    c70c:	4620      	mov	r0, r4
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    c70e:	68da      	ldr	r2, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    c710:	689b      	ldr	r3, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    c712:	9203      	str	r2, [sp, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    c714:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
    c716:	f002 fac9 	bl	ecac <smpGetPkBit>
    c71a:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Na_Ea);
    c71c:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
    c71e:	4606      	mov	r6, r0
    c720:	4620      	mov	r0, r4
    c722:	696c      	ldr	r4, [r5, #20]
    c724:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    c728:	e9cd 6400 	strd	r6, r4, [sp]
    c72c:	f002 f990 	bl	ea50 <SmpScCalcF4>
}
    c730:	b004      	add	sp, #16
    c732:	bd70      	pop	{r4, r5, r6, pc}
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t *)calc128Zeros);
    c734:	6958      	ldr	r0, [r3, #20]
    c736:	490f      	ldr	r1, [pc, #60]	; (c774 <smpiScActPkCalcCa+0x8c>)
    c738:	3020      	adds	r0, #32
    c73a:	f006 fe15 	bl	13368 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t *)calc128Zeros);
    c73e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c740:	490c      	ldr	r1, [pc, #48]	; (c774 <smpiScActPkCalcCa+0x8c>)
    c742:	6958      	ldr	r0, [r3, #20]
    c744:	3030      	adds	r0, #48	; 0x30
    c746:	f006 fe0f 	bl	13368 <Calc128Cpy>
    if (pMsg->dm.authRsp.authDataLen <= 3)
    c74a:	7d2a      	ldrb	r2, [r5, #20]
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    c74c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    if (pMsg->dm.authRsp.authDataLen <= 3)
    c74e:	2a03      	cmp	r2, #3
    c750:	d8d1      	bhi.n	c6f6 <smpiScActPkCalcCa+0xe>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Ra[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    c752:	6958      	ldr	r0, [r3, #20]
    c754:	1d29      	adds	r1, r5, #4
    c756:	302d      	adds	r0, #45	; 0x2d
    c758:	9102      	str	r1, [sp, #8]
    c75a:	f006 fe95 	bl	13488 <WStrReverseCpy>
      WStrReverseCpy(&pCcb->pScCcb->pScratch->Rb[13], pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    c75e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c760:	7d2a      	ldrb	r2, [r5, #20]
    c762:	6958      	ldr	r0, [r3, #20]
    c764:	9902      	ldr	r1, [sp, #8]
    c766:	303d      	adds	r0, #61	; 0x3d
    c768:	f006 fe8e 	bl	13488 <WStrReverseCpy>
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
    c76c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c76e:	e7c2      	b.n	c6f6 <smpiScActPkCalcCa+0xe>
    c770:	00024070 	.word	0x00024070
    c774:	00024d1c 	.word	0x00024d1c

0000c778 <smpiScActPkCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c778:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Record the Nbi */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c77a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    c77c:	4604      	mov	r4, r0
    c77e:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c780:	6958      	ldr	r0, [r3, #20]
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    c782:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c784:	2210      	movs	r2, #16
{
    c786:	b084      	sub	sp, #16
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c788:	3109      	adds	r1, #9
    c78a:	4410      	add	r0, r2
    c78c:	f006 fe7c 	bl	13488 <WStrReverseCpy>

  /* Cb = f4(PKbx, PKax, Nbi, Rai) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  SmpScCalcF4(pCcb, pMsg,
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    c790:	6c63      	ldr	r3, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
    c792:	4620      	mov	r0, r4
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    c794:	689a      	ldr	r2, [r3, #8]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    c796:	68db      	ldr	r3, [r3, #12]
              pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    c798:	9203      	str	r2, [sp, #12]
              pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    c79a:	9302      	str	r3, [sp, #8]
  SmpScCalcF4(pCcb, pMsg,
    c79c:	f002 fa86 	bl	ecac <smpGetPkBit>
    c7a0:	4629      	mov	r1, r5
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
    c7a2:	6c65      	ldr	r5, [r4, #68]	; 0x44
  SmpScCalcF4(pCcb, pMsg,
    c7a4:	4606      	mov	r6, r0
    c7a6:	4620      	mov	r0, r4
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
    c7a8:	696c      	ldr	r4, [r5, #20]
  SmpScCalcF4(pCcb, pMsg,
    c7aa:	9600      	str	r6, [sp, #0]
              smpGetPkBit(pCcb), pCcb->pScCcb->pScratch->Nb_Eb);
    c7ac:	3410      	adds	r4, #16
  SmpScCalcF4(pCcb, pMsg,
    c7ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    c7b2:	9401      	str	r4, [sp, #4]
    c7b4:	f002 f94c 	bl	ea50 <SmpScCalcF4>
}
    c7b8:	b004      	add	sp, #16
    c7ba:	bd70      	pop	{r4, r5, r6, pc}

0000c7bc <smpiScActPkSendCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkSendCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c7bc:	b538      	push	{r3, r4, r5, lr}
    c7be:	460c      	mov	r4, r1
    c7c0:	4605      	mov	r5, r0
  SMP_TRACE_128("Cai", pMsg->aes.pCiphertext);
    c7c2:	6849      	ldr	r1, [r1, #4]
    c7c4:	4805      	ldr	r0, [pc, #20]	; (c7dc <smpiScActPkSendCnf+0x20>)
    c7c6:	2210      	movs	r2, #16
    c7c8:	f002 fad8 	bl	ed7c <smpLogByteArray>

  /* Send the Cai to the peer */
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
    c7cc:	6862      	ldr	r2, [r4, #4]
    c7ce:	4621      	mov	r1, r4
    c7d0:	4628      	mov	r0, r5
}
    c7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendPairCnf(pCcb, pMsg, pMsg->aes.pCiphertext);
    c7d6:	f002 ba41 	b.w	ec5c <smpScSendPairCnf>
    c7da:	bf00      	nop
    c7dc:	0002408c 	.word	0x0002408c

0000c7e0 <smpiScActPkSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c7e0:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pCb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Record the Cbi from the responder */
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
    c7e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    c7e4:	4604      	mov	r4, r0
    c7e6:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
    c7e8:	6958      	ldr	r0, [r3, #20]
  uint8_t *pCb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    c7ea:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->PeerCb, pCb, SMP_CONFIRM_LEN);
    c7ec:	2210      	movs	r2, #16
    c7ee:	3109      	adds	r1, #9
    c7f0:	3040      	adds	r0, #64	; 0x40
    c7f2:	f006 fe49 	bl	13488 <WStrReverseCpy>

  /* Next command is the Pair Random */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;

  /* Send the Nai */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c7f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
    c7f8:	2204      	movs	r2, #4
    c7fa:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c7fe:	695a      	ldr	r2, [r3, #20]
    c800:	4629      	mov	r1, r5
    c802:	4620      	mov	r0, r4
}
    c804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c808:	f002 ba00 	b.w	ec0c <smpScSendRand>

0000c80c <smpiScActPkCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActPkCheck(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c80c:	b570      	push	{r4, r5, r6, lr}
    c80e:	4604      	mov	r4, r0
    c810:	b082      	sub	sp, #8
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);
    c812:	4816      	ldr	r0, [pc, #88]	; (c86c <smpiScActPkCheck+0x60>)
{
    c814:	460d      	mov	r5, r1
  SMP_TRACE_128("Cbi", pMsg->aes.pCiphertext);
    c816:	2210      	movs	r2, #16
    c818:	6849      	ldr	r1, [r1, #4]
    c81a:	f002 faaf 	bl	ed7c <smpLogByteArray>

  /* Verify the Calculated Cbi to previously received Cbi */
  if (memcmp(pCcb->pScCcb->pScratch->PeerCb, pMsg->aes.pCiphertext, SMP_RAND_LEN))
    c81e:	6c66      	ldr	r6, [r4, #68]	; 0x44
    c820:	6869      	ldr	r1, [r5, #4]
    c822:	6970      	ldr	r0, [r6, #20]
    c824:	2210      	movs	r2, #16
    c826:	3040      	adds	r0, #64	; 0x40
    c828:	f014 fc72 	bl	21110 <memcmp>
    c82c:	b9b8      	cbnz	r0, c85e <smpiScActPkCheck+0x52>
  else
  {
     wsfMsgHdr_t hdr;

     /* Increment the bit position */
    if (++pCcb->pScCcb->pkPos >= SMP_PK_BIT_COUNT)
    c82e:	78f3      	ldrb	r3, [r6, #3]
    c830:	3301      	adds	r3, #1
    c832:	b2db      	uxtb	r3, r3
    c834:	2b13      	cmp	r3, #19
    c836:	70f3      	strb	r3, [r6, #3]
      hdr.event = SMP_MSG_INT_PK_CMPL;
    }
    else
    {
      /* Next command is the Pair Confirm */
      pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
    c838:	bf9e      	ittt	ls
    c83a:	2303      	movls	r3, #3
    c83c:	f884 303f 	strbls.w	r3, [r4, #63]	; 0x3f

      hdr.event = SMP_MSG_INT_PK_NEXT;
    c840:	221a      	movls	r2, #26
    }

    /* Post an event to move to the next passkey confirm or complete the process */
    hdr.param = pCcb->connId;
    c842:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    c846:	f8ad 3004 	strh.w	r3, [sp, #4]
      hdr.event = SMP_MSG_INT_PK_CMPL;
    c84a:	bf88      	it	hi
    c84c:	221b      	movhi	r2, #27
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    c84e:	a901      	add	r1, sp, #4
    c850:	4620      	mov	r0, r4
    c852:	f88d 2006 	strb.w	r2, [sp, #6]
    c856:	f000 fc23 	bl	d0a0 <smpSmExecute>
  }
}
    c85a:	b002      	add	sp, #8
    c85c:	bd70      	pop	{r4, r5, r6, pc}
    smpScFailWithReattempt(pCcb);
    c85e:	4620      	mov	r0, r4
}
    c860:	b002      	add	sp, #8
    c862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpScFailWithReattempt(pCcb);
    c866:	f002 ba59 	b.w	ed1c <smpScFailWithReattempt>
    c86a:	bf00      	nop
    c86c:	00024090 	.word	0x00024090

0000c870 <smpiScActOobCalcCb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActOobCalcCb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c870:	b530      	push	{r4, r5, lr}
  /* If the peer device's OOB data flag does not indicate remote OOB data has been received,
     clear Ra. */
  if (pCcb->pairRsp[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
    c872:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    c876:	2b01      	cmp	r3, #1
{
    c878:	b087      	sub	sp, #28
    c87a:	4604      	mov	r4, r0
    c87c:	460d      	mov	r5, r1
  if (pCcb->pairRsp[SMP_OOB_POS] != SMP_OOB_DATA_PRESENT)
    c87e:	d005      	beq.n	c88c <smpiScActOobCalcCb+0x1c>
  {
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, (uint8_t*) calc128Zeros);
    c880:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c882:	4915      	ldr	r1, [pc, #84]	; (c8d8 <smpiScActOobCalcCb+0x68>)
    c884:	6958      	ldr	r0, [r3, #20]
    c886:	3020      	adds	r0, #32
    c888:	f006 fd6e 	bl	13368 <Calc128Cpy>
  }

  /* If we indicated the presence of remote OOB data has been received, calculate Cb. */
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
    c88c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    c890:	2b01      	cmp	r3, #1
  {
    /* Calculate Cb using Toolkit function F4 */
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    c892:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
    c894:	d013      	beq.n	c8be <smpiScActOobCalcCb+0x4e>
  else
  {
    /* Simulate the cb calculation is complete and clear rb */
    secCmacMsg_t msg;

    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, (uint8_t*)calc128Zeros);
    c896:	6958      	ldr	r0, [r3, #20]
    c898:	490f      	ldr	r1, [pc, #60]	; (c8d8 <smpiScActOobCalcCb+0x68>)
    c89a:	3030      	adds	r0, #48	; 0x30
    c89c:	f006 fd64 	bl	13368 <Calc128Cpy>

    msg.hdr.param = pCcb->connId;
    c8a0:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
    c8a4:	f8ad 500c 	strh.w	r5, [sp, #12]
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
    c8a8:	221c      	movs	r2, #28
    msg.pPlainText = NULL;
    c8aa:	2300      	movs	r3, #0

    smpSmExecute(pCcb, (smpMsg_t *) &msg);
    c8ac:	a903      	add	r1, sp, #12
    c8ae:	4620      	mov	r0, r4
    msg.hdr.event = SMP_MSG_WSF_CMAC_CMPL;
    c8b0:	f88d 200e 	strb.w	r2, [sp, #14]
    msg.pPlainText = NULL;
    c8b4:	9305      	str	r3, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &msg);
    c8b6:	f000 fbf3 	bl	d0a0 <smpSmExecute>
  }
}
    c8ba:	b007      	add	sp, #28
    c8bc:	bd30      	pop	{r4, r5, pc}
                0, pCcb->pScCcb->pScratch->Rb);
    c8be:	695a      	ldr	r2, [r3, #20]
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    c8c0:	689b      	ldr	r3, [r3, #8]
                0, pCcb->pScCcb->pScratch->Rb);
    c8c2:	3230      	adds	r2, #48	; 0x30
    SmpScCalcF4(pCcb, pMsg,
    c8c4:	2000      	movs	r0, #0
    c8c6:	e9cd 0200 	strd	r0, r2, [sp]
    c8ca:	4629      	mov	r1, r5
    c8cc:	461a      	mov	r2, r3
    c8ce:	4620      	mov	r0, r4
    c8d0:	f002 f8be 	bl	ea50 <SmpScCalcF4>
}
    c8d4:	b007      	add	sp, #28
    c8d6:	bd30      	pop	{r4, r5, pc}
    c8d8:	00024d1c 	.word	0x00024d1c

0000c8dc <smpiScActOobSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActOobSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c8dc:	b570      	push	{r4, r5, r6, lr}
  /* Only compare Cb if we indicated that we received OOB data. */
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
    c8de:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    c8e2:	2b01      	cmp	r3, #1
{
    c8e4:	4604      	mov	r4, r0
    c8e6:	460d      	mov	r5, r1
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT)
    c8e8:	d016      	beq.n	c918 <smpiScActOobSendRand+0x3c>

  /* Next command is a Pair Rand from Responder */
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;

  /* Calculate a the Na */
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
    c8ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c8ec:	695e      	ldr	r6, [r3, #20]
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
    c8ee:	2304      	movs	r3, #4
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
    c8f0:	4630      	mov	r0, r6
  pCcb->nextCmdCode = SMP_CMD_PAIR_RAND;
    c8f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  SecRand(pCcb->pScCcb->pScratch->Na_Ea, SMP_RAND_LEN);
    c8f6:	2110      	movs	r1, #16
    c8f8:	f00e fafc 	bl	1aef4 <SecRand>

  SMP_TRACE_128("Rand Na", pCcb->pScCcb->pScratch->Na_Ea);
    c8fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c8fe:	4810      	ldr	r0, [pc, #64]	; (c940 <smpiScActOobSendRand+0x64>)
    c900:	6959      	ldr	r1, [r3, #20]
    c902:	2210      	movs	r2, #16
    c904:	f002 fa3a 	bl	ed7c <smpLogByteArray>

  /* Send the Na to the responder */
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c908:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c90a:	4629      	mov	r1, r5
    c90c:	4620      	mov	r0, r4
    c90e:	695a      	ldr	r2, [r3, #20]
}
    c910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  smpScSendRand(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c914:	f002 b97a 	b.w	ec0c <smpScSendRand>
    SMP_TRACE_128("Initiator Cb", pMsg->aes.pCiphertext);
    c918:	6849      	ldr	r1, [r1, #4]
    c91a:	480a      	ldr	r0, [pc, #40]	; (c944 <smpiScActOobSendRand+0x68>)
    c91c:	2210      	movs	r2, #16
    c91e:	f002 fa2d 	bl	ed7c <smpLogByteArray>
    if (memcmp(pCcb->pScCcb->pScratch->PeerCb, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN))
    c922:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c924:	6869      	ldr	r1, [r5, #4]
    c926:	695e      	ldr	r6, [r3, #20]
    c928:	2210      	movs	r2, #16
    c92a:	f106 0040 	add.w	r0, r6, #64	; 0x40
    c92e:	f014 fbef 	bl	21110 <memcmp>
    c932:	2800      	cmp	r0, #0
    c934:	d0db      	beq.n	c8ee <smpiScActOobSendRand+0x12>
      smpScFailWithReattempt(pCcb);
    c936:	4620      	mov	r0, r4
}
    c938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      smpScFailWithReattempt(pCcb);
    c93c:	f002 b9ee 	b.w	ed1c <smpScFailWithReattempt>
    c940:	00024070 	.word	0x00024070
    c944:	00024094 	.word	0x00024094

0000c948 <smpiScActOobProcRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActOobProcRand(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c948:	b538      	push	{r3, r4, r5, lr}
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  /* Copy the Nb from the responder */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c94a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    c94c:	4604      	mov	r4, r0
    c94e:	460d      	mov	r5, r1
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c950:	6958      	ldr	r0, [r3, #20]
  uint8_t *pNb = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    c952:	6849      	ldr	r1, [r1, #4]
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pNb, SMP_RAND_LEN);
    c954:	3010      	adds	r0, #16
    c956:	3109      	adds	r1, #9
    c958:	2210      	movs	r2, #16
    c95a:	f006 fd95 	bl	13488 <WStrReverseCpy>

  /* Initiate the DH Check */
  smpScActCalcSharedSecret(pCcb, pMsg);
    c95e:	4629      	mov	r1, r5
    c960:	4620      	mov	r0, r4
}
    c962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScActCalcSharedSecret(pCcb, pMsg);
    c966:	f001 be33 	b.w	e5d0 <smpScActCalcSharedSecret>
    c96a:	bf00      	nop

0000c96c <smpiScActDHKeyCheckSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActDHKeyCheckSend(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c96c:	b538      	push	{r3, r4, r5, lr}
    c96e:	4604      	mov	r4, r0
    c970:	460d      	mov	r5, r1
  SMP_TRACE_128("DHKey Eb", pMsg->aes.pCiphertext);
    c972:	480b      	ldr	r0, [pc, #44]	; (c9a0 <smpiScActDHKeyCheckSend+0x34>)
    c974:	6849      	ldr	r1, [r1, #4]
    c976:	2210      	movs	r2, #16
    c978:	f002 fa00 	bl	ed7c <smpLogByteArray>

  /* Copy Eb from the smpScActDHKeyCalcF6Eb in LSB first format (as it will be received from peer) */
  WStrReverseCpy(pCcb->pScCcb->pScratch->Nb_Eb, pMsg->aes.pCiphertext, SMP_RAND_LEN);
    c97c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c97e:	6869      	ldr	r1, [r5, #4]
    c980:	6958      	ldr	r0, [r3, #20]
    c982:	2210      	movs	r2, #16
    c984:	4410      	add	r0, r2
    c986:	f006 fd7f 	bl	13488 <WStrReverseCpy>

  /* Next cmd message is the DH Key Check from the responder */
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;

  /* Send the DH Key check with Ea to the responder */
  smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c98a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCcb->nextCmdCode = SMP_CMD_DHKEY_CHECK;
    c98c:	220d      	movs	r2, #13
    c98e:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c992:	695a      	ldr	r2, [r3, #20]
    c994:	4629      	mov	r1, r5
    c996:	4620      	mov	r0, r4
}
    c998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpScSendDHKeyCheck(pCcb, pMsg, pCcb->pScCcb->pScratch->Na_Ea);
    c99c:	f002 b90e 	b.w	ebbc <smpScSendDHKeyCheck>
    c9a0:	000240a4 	.word	0x000240a4

0000c9a4 <smpiScActDHKeyCheckVerify>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpiScActDHKeyCheckVerify(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    c9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *pEbPeer = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;;

  /* Verify the DH Key Check Eb with the value received from the responder */
  if (memcmp(pEbPeer, pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN) == 0)
    c9a6:	6c47      	ldr	r7, [r0, #68]	; 0x44
{
    c9a8:	4604      	mov	r4, r0
  uint8_t *pEbPeer = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;;
    c9aa:	6848      	ldr	r0, [r1, #4]
  if (memcmp(pEbPeer, pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN) == 0)
    c9ac:	6979      	ldr	r1, [r7, #20]
    c9ae:	2210      	movs	r2, #16
{
    c9b0:	b085      	sub	sp, #20
  if (memcmp(pEbPeer, pCcb->pScCcb->pScratch->Nb_Eb, SMP_RAND_LEN) == 0)
    c9b2:	4411      	add	r1, r2
    c9b4:	3009      	adds	r0, #9
    c9b6:	f014 fbab 	bl	21110 <memcmp>
    c9ba:	bb00      	cbnz	r0, c9fe <smpiScActDHKeyCheckVerify+0x5a>
  {
    uint8_t buf[SMP_KEY_LEN];
    uint8_t encKeyLen;

    encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
    c9bc:	f894 602b 	ldrb.w	r6, [r4, #43]	; 0x2b
    c9c0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
                 pCcb->pairReq[SMP_MAXKEY_POS] : pCcb->pairRsp[SMP_MAXKEY_POS];

    /* Adjust key based on max key length */
    memcpy(buf, pCcb->pScCcb->pLtk->ltk_t, encKeyLen);
    c9c4:	69b9      	ldr	r1, [r7, #24]
    encKeyLen = (pCcb->pairReq[SMP_MAXKEY_POS] < pCcb->pairRsp[SMP_MAXKEY_POS]) ?
    c9c6:	429e      	cmp	r6, r3
    c9c8:	bf28      	it	cs
    c9ca:	461e      	movcs	r6, r3
    memcpy(buf, pCcb->pScCcb->pLtk->ltk_t, encKeyLen);
    c9cc:	4605      	mov	r5, r0
    c9ce:	4632      	mov	r2, r6
    c9d0:	3110      	adds	r1, #16
    c9d2:	4668      	mov	r0, sp
    c9d4:	f7ff fb94 	bl	c100 <memcpy>
    memset((buf + encKeyLen), 0, (SMP_KEY_LEN - encKeyLen));
    c9d8:	f1c6 0210 	rsb	r2, r6, #16
    c9dc:	4629      	mov	r1, r5
    c9de:	eb0d 0006 	add.w	r0, sp, r6
    c9e2:	f014 fbc7 	bl	21174 <memset>

    /* Initiate encryption */
    DmSmpEncryptReq(pCcb->connId, smpGetScSecLevel(pCcb), buf);
    c9e6:	4620      	mov	r0, r4
    c9e8:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
    c9ec:	f001 f994 	bl	dd18 <smpGetScSecLevel>
    c9f0:	466a      	mov	r2, sp
    c9f2:	4601      	mov	r1, r0
    c9f4:	4628      	mov	r0, r5
    c9f6:	f010 fe17 	bl	1d628 <DmSmpEncryptReq>
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }
}
    c9fa:	b005      	add	sp, #20
    c9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCcb->attempts++;
    c9fe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    hdr.param = pCcb->connId;
    ca02:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    ca06:	f8ad 0000 	strh.w	r0, [sp]
    pCcb->attempts++;
    ca0a:	3301      	adds	r3, #1
    hdr.status = SMP_ERR_DH_KEY_CHECK;
    ca0c:	220b      	movs	r2, #11
    pCcb->attempts++;
    ca0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hdr.status = SMP_ERR_DH_KEY_CHECK;
    ca12:	f88d 2003 	strb.w	r2, [sp, #3]
    SmpDbPairingFailed(pCcb->connId);
    ca16:	f000 fd2d 	bl	d474 <SmpDbPairingFailed>
    if (pCcb->attempts == pSmpCfg->maxAttempts)
    ca1a:	4a08      	ldr	r2, [pc, #32]	; (ca3c <smpiScActDHKeyCheckVerify+0x98>)
    ca1c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    ca20:	6812      	ldr	r2, [r2, #0]
    ca22:	79d2      	ldrb	r2, [r2, #7]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    ca24:	4669      	mov	r1, sp
      hdr.event = SMP_MSG_DH_CHECK_FAILURE;
    ca26:	4293      	cmp	r3, r2
    ca28:	bf0c      	ite	eq
    ca2a:	230d      	moveq	r3, #13
    ca2c:	231d      	movne	r3, #29
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    ca2e:	4620      	mov	r0, r4
    ca30:	f88d 3002 	strb.w	r3, [sp, #2]
    ca34:	f000 fb34 	bl	d0a0 <smpSmExecute>
}
    ca38:	b005      	add	sp, #20
    ca3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca3c:	10002e54 	.word	0x10002e54

0000ca40 <SmpiScInit>:
 */
/*************************************************************************************************/
void SmpiScInit(void)
{
  /* set up callback interface */
  smpCb.pMaster = &smpiScSmIf;
    ca40:	4b02      	ldr	r3, [pc, #8]	; (ca4c <SmpiScInit+0xc>)
    ca42:	4a03      	ldr	r2, [pc, #12]	; (ca50 <SmpiScInit+0x10>)
    ca44:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /* General SMP LESC Initialization */
  SmpScInit();
    ca48:	f002 b85a 	b.w	eb00 <SmpScInit>
    ca4c:	10004118 	.word	0x10004118
    ca50:	0002417c 	.word	0x0002417c

0000ca54 <SmpiInit>:
 */
/*************************************************************************************************/
void SmpiInit(void)
{
  /* set up callback interface */
  smpCb.pMaster = &smpiSmIf;
    ca54:	4b04      	ldr	r3, [pc, #16]	; (ca68 <SmpiInit+0x14>)
  smpCb.procPairing = smpProcPairing;
    ca56:	4905      	ldr	r1, [pc, #20]	; (ca6c <SmpiInit+0x18>)
  smpCb.procAuthReq = smpAuthReq;
    ca58:	4a05      	ldr	r2, [pc, #20]	; (ca70 <SmpiInit+0x1c>)
  smpCb.pMaster = &smpiSmIf;
    ca5a:	4806      	ldr	r0, [pc, #24]	; (ca74 <SmpiInit+0x20>)
    ca5c:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  smpCb.procAuthReq = smpAuthReq;
    ca60:	e9c3 1239 	strd	r1, r2, [r3, #228]	; 0xe4
}
    ca64:	4770      	bx	lr
    ca66:	bf00      	nop
    ca68:	10004118 	.word	0x10004118
    ca6c:	0000d115 	.word	0x0000d115
    ca70:	0000d231 	.word	0x0000d231
    ca74:	00024428 	.word	0x00024428

0000ca78 <smpStartRspTimer>:
 */
/*************************************************************************************************/
void smpStartRspTimer(smpCcb_t *pCcb)
{
  /* start smp response timer */
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
    ca78:	f24e 130f 	movw	r3, #57615	; 0xe10f
    ca7c:	8143      	strh	r3, [r0, #10]
  pCcb->rspTimer.msg.status = SMP_ERR_TIMEOUT;
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
    ca7e:	211e      	movs	r1, #30
    ca80:	f00b bb68 	b.w	18154 <WsfTimerStartSec>

0000ca84 <smpActNone>:
 */
/*************************************************************************************************/
void smpActNone(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  return;
}
    ca84:	4770      	bx	lr
    ca86:	bf00      	nop

0000ca88 <smpActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ca88:	b510      	push	{r4, lr}
    ca8a:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
    ca8c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    ca8e:	b118      	cbz	r0, ca98 <smpActCleanup+0x10>
    WsfBufFree(pCcb->pScr);
    ca90:	f00b f8d6 	bl	17c40 <WsfBufFree>
    pCcb->pScr = NULL;
    ca94:	2300      	movs	r3, #0
    ca96:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
    ca98:	4620      	mov	r0, r4
    ca9a:	f00b fbe1 	bl	18260 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
    ca9e:	f104 0010 	add.w	r0, r4, #16
    caa2:	f00b fbdd 	bl	18260 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    caa6:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
  pCcb->secReq = FALSE;
    caaa:	2300      	movs	r3, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    caac:	429a      	cmp	r2, r3
    caae:	bf14      	ite	ne
    cab0:	220b      	movne	r2, #11
    cab2:	2201      	moveq	r2, #1
  pCcb->secReq = FALSE;
    cab4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    cab8:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
    cabc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  smpCleanup(pCcb);
}
    cac0:	bd10      	pop	{r4, pc}
    cac2:	bf00      	nop

0000cac4 <smpSendPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSendPairingFailed(smpCcb_t *pCcb, uint8_t reason)
{
    cac4:	b538      	push	{r3, r4, r5, lr}
    cac6:	4604      	mov	r4, r0
  uint8_t *pPacket;
  uint8_t *p;

  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
    cac8:	200a      	movs	r0, #10
{
    caca:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
    cacc:	f001 f900 	bl	dcd0 <smpMsgAlloc>
    cad0:	b140      	cbz	r0, cae4 <smpSendPairingFailed+0x20>
  {
    p = pPacket + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
    cad2:	2305      	movs	r3, #5
    cad4:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
    cad6:	7245      	strb	r5, [r0, #9]
    cad8:	4601      	mov	r1, r0

    smpSendPkt(pCcb, pPacket);
    cada:	4620      	mov	r0, r4
  }
}
    cadc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPacket);
    cae0:	f001 b8d6 	b.w	dc90 <smpSendPkt>
}
    cae4:	bd38      	pop	{r3, r4, r5, pc}
    cae6:	bf00      	nop

0000cae8 <smpActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cae8:	b538      	push	{r3, r4, r5, lr}
    caea:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
    caec:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
    caee:	460d      	mov	r5, r1
  if (pCcb->pScr != NULL)
    caf0:	b118      	cbz	r0, cafa <smpActPairingFailed+0x12>
    WsfBufFree(pCcb->pScr);
    caf2:	f00b f8a5 	bl	17c40 <WsfBufFree>
    pCcb->pScr = NULL;
    caf6:	2300      	movs	r3, #0
    caf8:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
    cafa:	4620      	mov	r0, r4
    cafc:	f00b fbb0 	bl	18260 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
    cb00:	f104 0010 	add.w	r0, r4, #16
    cb04:	f00b fbac 	bl	18260 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    cb08:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  /* clean up */
  smpCleanup(pCcb);

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    cb0c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
    cb10:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    cb12:	4293      	cmp	r3, r2
    cb14:	bf14      	ite	ne
    cb16:	230b      	movne	r3, #11
    cb18:	2301      	moveq	r3, #1
    cb1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
    cb1e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
    cb22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    cb26:	2101      	movs	r1, #1
    cb28:	f00f fb3a 	bl	1c1a0 <DmConnSetIdle>

  /* notify DM of pairing failure */
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    cb2c:	232b      	movs	r3, #43	; 0x2b
    cb2e:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
    cb30:	4628      	mov	r0, r5
}
    cb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  DmSmpCbackExec((dmEvt_t *) pMsg);
    cb36:	f010 bc99 	b.w	1d46c <DmSmpCbackExec>
    cb3a:	bf00      	nop

0000cb3c <smpActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cb3c:	b570      	push	{r4, r5, r6, lr}
    cb3e:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
    cb40:	200a      	movs	r0, #10
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
    cb42:	78ce      	ldrb	r6, [r1, #3]
{
    cb44:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
    cb46:	f001 f8c3 	bl	dcd0 <smpMsgAlloc>
    cb4a:	b130      	cbz	r0, cb5a <smpActPairingCancel+0x1e>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
    cb4c:	2305      	movs	r3, #5
    cb4e:	4601      	mov	r1, r0
    cb50:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
    cb52:	7246      	strb	r6, [r0, #9]
    smpSendPkt(pCcb, pPacket);
    cb54:	4620      	mov	r0, r4
    cb56:	f001 f89b 	bl	dc90 <smpSendPkt>
  if (pCcb->pScr != NULL)
    cb5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    cb5c:	b118      	cbz	r0, cb66 <smpActPairingCancel+0x2a>
    WsfBufFree(pCcb->pScr);
    cb5e:	f00b f86f 	bl	17c40 <WsfBufFree>
    pCcb->pScr = NULL;
    cb62:	2300      	movs	r3, #0
    cb64:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
    cb66:	4620      	mov	r0, r4
    cb68:	f00b fb7a 	bl	18260 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
    cb6c:	f104 0010 	add.w	r0, r4, #16
    cb70:	f00b fb76 	bl	18260 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    cb74:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    cb78:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
    cb7c:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    cb7e:	4293      	cmp	r3, r2
    cb80:	bf14      	ite	ne
    cb82:	230b      	movne	r3, #11
    cb84:	2301      	moveq	r3, #1
    cb86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
    cb8a:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
    cb8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    cb92:	2101      	movs	r1, #1
    cb94:	f00f fb04 	bl	1c1a0 <DmConnSetIdle>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    cb98:	232b      	movs	r3, #43	; 0x2b
    cb9a:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
    cb9c:	4628      	mov	r0, r5

  smpActPairingFailed(pCcb, pMsg);
}
    cb9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmSmpCbackExec((dmEvt_t *) pMsg);
    cba2:	f010 bc63 	b.w	1d46c <DmSmpCbackExec>
    cba6:	bf00      	nop

0000cba8 <smpActPairCnfCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cba8:	b538      	push	{r3, r4, r5, lr}
    cbaa:	460d      	mov	r5, r1
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    cbac:	7d0a      	ldrb	r2, [r1, #20]
{
    cbae:	4604      	mov	r4, r0
  memcpy(pCcb->pScr->buf.b1, pMsg->dm.authRsp.authData, pMsg->dm.authRsp.authDataLen);
    cbb0:	3104      	adds	r1, #4
    cbb2:	6b00      	ldr	r0, [r0, #48]	; 0x30
    cbb4:	f7ff faa4 	bl	c100 <memcpy>
  if (pMsg->dm.authRsp.authDataLen == SMP_PIN_LEN)
    cbb8:	7d2b      	ldrb	r3, [r5, #20]
    cbba:	2b03      	cmp	r3, #3
    cbbc:	d00c      	beq.n	cbd8 <smpActPairCnfCalc1+0x30>
  /* store authentication data */
  smpActStorePin(pCcb, pMsg);

  /* get random number to scratchpad */
  SecRand(pCcb->pScr->buf.b4, SMP_RAND_LEN);
    cbbe:	6b20      	ldr	r0, [r4, #48]	; 0x30
    cbc0:	2110      	movs	r1, #16
    cbc2:	3030      	adds	r0, #48	; 0x30
    cbc4:	f00e f996 	bl	1aef4 <SecRand>

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
    cbc8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    cbca:	4620      	mov	r0, r4
    cbcc:	f101 0230 	add.w	r2, r1, #48	; 0x30
}
    cbd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, pCcb->pScr->buf.b4);
    cbd4:	f000 be70 	b.w	d8b8 <smpCalcC1Part1>
    memset(&pCcb->pScr->buf.b1[SMP_PIN_LEN], 0, SMP_OOB_LEN - SMP_PIN_LEN);
    cbd8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    cbda:	2300      	movs	r3, #0
    cbdc:	f8c2 3003 	str.w	r3, [r2, #3]
    cbe0:	f8c2 3007 	str.w	r3, [r2, #7]
    cbe4:	f8c2 300b 	str.w	r3, [r2, #11]
    cbe8:	73d3      	strb	r3, [r2, #15]
    cbea:	e7e8      	b.n	cbbe <smpActPairCnfCalc1+0x16>

0000cbec <smpActPairCnfCalc2>:
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfCalc2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  smpCalcC1Part2(pCcb, pCcb->pScr->buf.b1, pMsg->aes.pCiphertext);
    cbec:	684a      	ldr	r2, [r1, #4]
    cbee:	6b01      	ldr	r1, [r0, #48]	; 0x30
    cbf0:	f000 bf06 	b.w	da00 <smpCalcC1Part2>

0000cbf4 <smpActSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cbf4:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set next expected packet */
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
    cbf6:	f890 503a 	ldrb.w	r5, [r0, #58]	; 0x3a
    cbfa:	2d00      	cmp	r5, #0
{
    cbfc:	460b      	mov	r3, r1
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
    cbfe:	f24e 120f 	movw	r2, #57615	; 0xe10f
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_PAIR_CNF : SMP_CMD_PAIR_RAND;
    cc02:	bf14      	ite	ne
    cc04:	2103      	movne	r1, #3
    cc06:	2104      	moveq	r1, #4
    cc08:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
  pCcb->rspTimer.msg.event = SMP_MSG_INT_RSP_TIMEOUT;
    cc0c:	8142      	strh	r2, [r0, #10]
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
    cc0e:	211e      	movs	r1, #30
{
    cc10:	4604      	mov	r4, r0
    cc12:	461d      	mov	r5, r3
  WsfTimerStartSec(&pCcb->rspTimer, SMP_TIMEOUT);
    cc14:	f00b fa9e 	bl	18154 <WsfTimerStartSec>

  /* start smp response timer */
  smpStartRspTimer(pCcb);

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
    cc18:	2019      	movs	r0, #25
    cc1a:	f001 f859 	bl	dcd0 <smpMsgAlloc>
    cc1e:	b1a8      	cbz	r0, cc4c <smpActSendPairCnf+0x58>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
    cc20:	2203      	movs	r2, #3
    cc22:	7202      	strb	r2, [r0, #8]
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
    cc24:	686a      	ldr	r2, [r5, #4]
    cc26:	4603      	mov	r3, r0
    cc28:	6815      	ldr	r5, [r2, #0]
    cc2a:	6891      	ldr	r1, [r2, #8]

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    cc2c:	4620      	mov	r0, r4
    memcpy(p, pMsg->aes.pCiphertext, SMP_CONFIRM_LEN);
    cc2e:	6854      	ldr	r4, [r2, #4]
    cc30:	68d2      	ldr	r2, [r2, #12]
    cc32:	f8c3 2015 	str.w	r2, [r3, #21]
    cc36:	f8c3 1011 	str.w	r1, [r3, #17]
    cc3a:	f8c3 5009 	str.w	r5, [r3, #9]
    cc3e:	f8c3 400d 	str.w	r4, [r3, #13]
    smpSendPkt(pCcb, pPkt);
    cc42:	4619      	mov	r1, r3
  }
}
    cc44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    smpSendPkt(pCcb, pPkt);
    cc48:	f001 b822 	b.w	dc90 <smpSendPkt>
}
    cc4c:	bd38      	pop	{r3, r4, r5, pc}
    cc4e:	bf00      	nop

0000cc50 <smpActPairCnfVerCalc1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairCnfVerCalc1(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cc50:	b530      	push	{r4, r5, lr}
  uint8_t   *p;

  /* go to start of received pairing random packet */
  p = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;
    cc52:	684a      	ldr	r2, [r1, #4]

  /* store random value */
  memcpy(pCcb->pScr->buf.b2, p, SMP_RAND_LEN);
    cc54:	6b01      	ldr	r1, [r0, #48]	; 0x30
    cc56:	f8d2 4009 	ldr.w	r4, [r2, #9]
    cc5a:	f8d2 e00d 	ldr.w	lr, [r2, #13]
    cc5e:	f8d2 5015 	ldr.w	r5, [r2, #21]
    cc62:	f8d2 c011 	ldr.w	ip, [r2, #17]
    cc66:	f8c1 c018 	str.w	ip, [r1, #24]
    cc6a:	61cd      	str	r5, [r1, #28]
    cc6c:	610c      	str	r4, [r1, #16]
    cc6e:	f8c1 e014 	str.w	lr, [r1, #20]

  /* execute calculation */
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
}
    cc72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  smpCalcC1Part1(pCcb, pCcb->pScr->buf.b1, p);
    cc76:	6b01      	ldr	r1, [r0, #48]	; 0x30
    cc78:	3209      	adds	r2, #9
    cc7a:	f000 be1d 	b.w	d8b8 <smpCalcC1Part1>
    cc7e:	bf00      	nop

0000cc80 <smpActPairCnfVerCalc2>:
    cc80:	684a      	ldr	r2, [r1, #4]
    cc82:	6b01      	ldr	r1, [r0, #48]	; 0x30
    cc84:	f000 bebc 	b.w	da00 <smpCalcC1Part2>

0000cc88 <smpSendKey>:
 *
 *  \return TRUE if done sending keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpSendKey(smpCcb_t *pCcb, uint8_t keyDist)
{
    cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t     *pPkt;
  uint8_t     *p;
  wsfMsgHdr_t *pHdr;

  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
    cc8a:	4e6c      	ldr	r6, [pc, #432]	; (ce3c <smpSendKey+0x1b4>)
    cc8c:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
{
    cc90:	b08b      	sub	sp, #44	; 0x2c
    cc92:	4605      	mov	r5, r0
    cc94:	460c      	mov	r4, r1
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
    cc96:	b11b      	cbz	r3, cca0 <smpSendKey+0x18>
    cc98:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cc9a:	781b      	ldrb	r3, [r3, #0]
    cc9c:	2b00      	cmp	r3, #0
    cc9e:	d156      	bne.n	cd4e <smpSendKey+0xc6>

    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
  }

  /* check if we're done sending keys */
  if ((keyDist == 0) ||
    cca0:	2c00      	cmp	r4, #0
    cca2:	d050      	beq.n	cd46 <smpSendKey+0xbe>
    cca4:	2c01      	cmp	r4, #1
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
    cca6:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
  if ((keyDist == 0) ||
    ccaa:	d048      	beq.n	cd3e <smpSendKey+0xb6>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
    ccac:	2c03      	cmp	r4, #3
    ccae:	d948      	bls.n	cd42 <smpSendKey+0xba>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
    ccb0:	2b0a      	cmp	r3, #10
    ccb2:	d048      	beq.n	cd46 <smpSendKey+0xbe>
  {
      return TRUE;
  }

  /* if flow disabled return */
  if (pCcb->flowDisabled)
    ccb4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d173      	bne.n	cda4 <smpSendKey+0x11c>
  {
    return FALSE;
  }

  /* allocate packet buffer for largest packet size */
  if ((pPkt = smpMsgAlloc(SMP_ENC_INFO_LEN + L2C_PAYLOAD_START)) != NULL)
    ccbc:	2019      	movs	r0, #25
    ccbe:	f001 f807 	bl	dcd0 <smpMsgAlloc>
    ccc2:	4607      	mov	r7, r0
    ccc4:	2800      	cmp	r0, #0
    ccc6:	d06d      	beq.n	cda4 <smpSendKey+0x11c>
  {
    p = pPkt + L2C_PAYLOAD_START;

    /* determine next key to send */
    if (pCcb->lastSentKey == 0 && (keyDist & SMP_KEY_DIST_ENC))
    ccc8:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
    cccc:	2b00      	cmp	r3, #0
    ccce:	d16d      	bne.n	cdac <smpSendKey+0x124>
    ccd0:	07e1      	lsls	r1, r4, #31
    ccd2:	f100 808f 	bmi.w	cdf4 <smpSendKey+0x16c>
      /* send second part of LTK */
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
    }
    else if ((keyDist & SMP_KEY_DIST_ID) &&
    ccd6:	07a2      	lsls	r2, r4, #30
    ccd8:	f100 8099 	bmi.w	ce0e <smpSendKey+0x186>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
      UINT8_TO_BSTREAM(p, DM_ADDR_PUBLIC);
      BDA_TO_BSTREAM(p, HciGetBdAddr());

    }
    else if ((keyDist & SMP_KEY_DIST_SIGN) &&
    ccdc:	0762      	lsls	r2, r4, #29
    ccde:	f140 80a1 	bpl.w	ce24 <smpSendKey+0x19c>
    cce2:	2b09      	cmp	r3, #9
    cce4:	f200 809e 	bhi.w	ce24 <smpSendKey+0x19c>
    cce8:	f240 2281 	movw	r2, #641	; 0x281
    ccec:	fa22 f303 	lsr.w	r3, r2, r3
    ccf0:	07d8      	lsls	r0, r3, #31
    ccf2:	f140 8097 	bpl.w	ce24 <smpSendKey+0x19c>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO ||
              pCcb->lastSentKey == SMP_CMD_MASTER_ID))
    {
      /* send SRK */
      UINT8_TO_BSTREAM(p, SMP_CMD_SIGN_INFO);
    ccf6:	230a      	movs	r3, #10
    ccf8:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalCsrk());
    ccfa:	f010 fc07 	bl	1d50c <DmSecGetLocalCsrk>
    ccfe:	4601      	mov	r1, r0
    cd00:	f107 0009 	add.w	r0, r7, #9
    cd04:	f006 fb30 	bl	13368 <Calc128Cpy>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
      return TRUE;
    }

    /* set last sent key to command code */
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
    cd08:	7a3b      	ldrb	r3, [r7, #8]
    cd0a:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43

    /* send command packet */
    smpSendPkt(pCcb, pPkt);
    cd0e:	4639      	mov	r1, r7
    cd10:	4628      	mov	r0, r5
    cd12:	f000 ffbd 	bl	dc90 <smpSendPkt>

    /* if flow not disabled set up to send next key */
    if (!pCcb->flowDisabled)
    cd16:	f895 403c 	ldrb.w	r4, [r5, #60]	; 0x3c
    cd1a:	2c00      	cmp	r4, #0
    cd1c:	d142      	bne.n	cda4 <smpSendKey+0x11c>
    {
      if ((pHdr = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
    cd1e:	2004      	movs	r0, #4
    cd20:	f00a ffbe 	bl	17ca0 <WsfMsgAlloc>
    cd24:	4601      	mov	r1, r0
    cd26:	2800      	cmp	r0, #0
    cd28:	d03c      	beq.n	cda4 <smpSendKey+0x11c>
      {
        pHdr->event = SMP_MSG_INT_SEND_NEXT_KEY;
    cd2a:	230c      	movs	r3, #12
    cd2c:	7083      	strb	r3, [r0, #2]
        pHdr->param = pCcb->connId;
    cd2e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    cd32:	8003      	strh	r3, [r0, #0]
        WsfMsgSend(smpCb.handlerId, pHdr);
    cd34:	f896 00e0 	ldrb.w	r0, [r6, #224]	; 0xe0
    cd38:	f00a ffbe 	bl	17cb8 <WsfMsgSend>
    cd3c:	e004      	b.n	cd48 <smpSendKey+0xc0>
      (keyDist == SMP_KEY_DIST_ENC && pCcb->lastSentKey == SMP_CMD_MASTER_ID) ||
    cd3e:	2b07      	cmp	r3, #7
    cd40:	d002      	beq.n	cd48 <smpSendKey+0xc0>
      (keyDist <= (SMP_KEY_DIST_ENC | SMP_KEY_DIST_ID) && pCcb->lastSentKey == SMP_CMD_ID_ADDR_INFO) ||
    cd42:	2b09      	cmp	r3, #9
    cd44:	d1b4      	bne.n	ccb0 <smpSendKey+0x28>
      return TRUE;
    cd46:	2401      	movs	r4, #1
      }
    }
  }

  return FALSE;
}
    cd48:	4620      	mov	r0, r4
    cd4a:	b00b      	add	sp, #44	; 0x2c
    cd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && pCcb->lastSentKey == 0)
    cd4e:	f890 7043 	ldrb.w	r7, [r0, #67]	; 0x43
    cd52:	2f00      	cmp	r7, #0
    cd54:	d1a4      	bne.n	cca0 <smpSendKey+0x18>
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
    cd56:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    cd5a:	f00f fa63 	bl	1c224 <DmConnRole>
      keyInd.type = DM_KEY_LOCAL_LTK;
    cd5e:	2800      	cmp	r0, #0
    cd60:	bf0c      	ite	eq
    cd62:	2302      	moveq	r3, #2
    cd64:	2301      	movne	r3, #1
    cd66:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    keyInd.hdr.event = DM_SEC_KEY_IND;
    cd6a:	232f      	movs	r3, #47	; 0x2f
    cd6c:	f88d 3006 	strb.w	r3, [sp, #6]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
    cd70:	4628      	mov	r0, r5
    keyInd.hdr.param = pCcb->connId;
    cd72:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    cd76:	f8ad 3004 	strh.w	r3, [sp, #4]
    keyInd.secLevel = smpGetScSecLevel(pCcb);
    cd7a:	f000 ffcd 	bl	dd18 <smpGetScSecLevel>
    memset(keyInd.keyData.ltk.rand, 0, SMP_RAND8_LEN);
    cd7e:	e9cd 7706 	strd	r7, r7, [sp, #24]
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
    cd82:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    keyInd.secLevel = smpGetScSecLevel(pCcb);
    cd84:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
    cd88:	6999      	ldr	r1, [r3, #24]
    keyInd.keyData.ltk.ediv = 0;
    cd8a:	f8ad 7020 	strh.w	r7, [sp, #32]
    Calc128Cpy(keyInd.keyData.ltk.key, pCcb->pScCcb->pLtk->ltk_t);
    cd8e:	3110      	adds	r1, #16
    cd90:	a802      	add	r0, sp, #8
    cd92:	f006 fae9 	bl	13368 <Calc128Cpy>
    DmSmpCbackExec((dmEvt_t *)&keyInd);
    cd96:	a801      	add	r0, sp, #4
    cd98:	f010 fb68 	bl	1d46c <DmSmpCbackExec>
    pCcb->lastSentKey = SMP_CMD_MASTER_ID;
    cd9c:	2307      	movs	r3, #7
    cd9e:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
    cda2:	e77d      	b.n	cca0 <smpSendKey+0x18>
    return FALSE;
    cda4:	2400      	movs	r4, #0
}
    cda6:	4620      	mov	r0, r4
    cda8:	b00b      	add	sp, #44	; 0x2c
    cdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (pCcb->lastSentKey == SMP_CMD_ENC_INFO)
    cdac:	2b06      	cmp	r3, #6
    cdae:	d010      	beq.n	cdd2 <smpSendKey+0x14a>
    else if ((keyDist & SMP_KEY_DIST_ID) &&
    cdb0:	07a1      	lsls	r1, r4, #30
    cdb2:	d501      	bpl.n	cdb8 <smpSendKey+0x130>
             (pCcb->lastSentKey == 0 || pCcb->lastSentKey == SMP_CMD_MASTER_ID))
    cdb4:	2b07      	cmp	r3, #7
    cdb6:	d02a      	beq.n	ce0e <smpSendKey+0x186>
    else if (pCcb->lastSentKey == SMP_CMD_ID_INFO)
    cdb8:	2b08      	cmp	r3, #8
    cdba:	d18f      	bne.n	ccdc <smpSendKey+0x54>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_ADDR_INFO);
    cdbc:	2309      	movs	r3, #9
    cdbe:	813b      	strh	r3, [r7, #8]
      BDA_TO_BSTREAM(p, HciGetBdAddr());
    cdc0:	f005 f92c 	bl	1201c <HciGetBdAddr>
    cdc4:	4601      	mov	r1, r0
    cdc6:	f107 000a 	add.w	r0, r7, #10
    cdca:	f006 faa9 	bl	13320 <BdaCpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
    cdce:	7a3b      	ldrb	r3, [r7, #8]
    cdd0:	e79b      	b.n	cd0a <smpSendKey+0x82>
      UINT8_TO_BSTREAM(p, SMP_CMD_MASTER_ID);
    cdd2:	2307      	movs	r3, #7
    cdd4:	7203      	strb	r3, [r0, #8]
      UINT16_TO_BSTREAM(p, pCcb->pScr->keyInd.keyData.ltk.ediv);
    cdd6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    cdd8:	8b92      	ldrh	r2, [r2, #28]
    cdda:	7242      	strb	r2, [r0, #9]
    cddc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    cdde:	8b92      	ldrh	r2, [r2, #28]
    cde0:	0a12      	lsrs	r2, r2, #8
    cde2:	7282      	strb	r2, [r0, #10]
      memcpy(p, pCcb->pScr->keyInd.keyData.ltk.rand, SMP_RAND8_LEN);
    cde4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    cde6:	6951      	ldr	r1, [r2, #20]
    cde8:	6992      	ldr	r2, [r2, #24]
    cdea:	f8c0 200f 	str.w	r2, [r0, #15]
    cdee:	f8c0 100b 	str.w	r1, [r0, #11]
    cdf2:	e78a      	b.n	cd0a <smpSendKey+0x82>
      smpGenerateLtk(pCcb);
    cdf4:	4628      	mov	r0, r5
    cdf6:	f000 ff1b 	bl	dc30 <smpGenerateLtk>
      UINT8_TO_BSTREAM(p, SMP_CMD_ENC_INFO);
    cdfa:	2306      	movs	r3, #6
    cdfc:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
    cdfe:	6b29      	ldr	r1, [r5, #48]	; 0x30
    ce00:	f107 0009 	add.w	r0, r7, #9
    ce04:	3104      	adds	r1, #4
    ce06:	f006 faaf 	bl	13368 <Calc128Cpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
    ce0a:	7a3b      	ldrb	r3, [r7, #8]
      Calc128Cpy(p, pCcb->pScr->keyInd.keyData.ltk.key);
    ce0c:	e77d      	b.n	cd0a <smpSendKey+0x82>
      UINT8_TO_BSTREAM(p, SMP_CMD_ID_INFO);
    ce0e:	2308      	movs	r3, #8
    ce10:	723b      	strb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalIrk());
    ce12:	f010 fb81 	bl	1d518 <DmSecGetLocalIrk>
    ce16:	4601      	mov	r1, r0
    ce18:	f107 0009 	add.w	r0, r7, #9
    ce1c:	f006 faa4 	bl	13368 <Calc128Cpy>
    pCcb->lastSentKey = pPkt[L2C_PAYLOAD_START];
    ce20:	7a3b      	ldrb	r3, [r7, #8]
      Calc128Cpy(p, DmSecGetLocalIrk());
    ce22:	e772      	b.n	cd0a <smpSendKey+0x82>
      WsfMsgFree(pPkt);
    ce24:	4638      	mov	r0, r7
    ce26:	f00a ff43 	bl	17cb0 <WsfMsgFree>
      SMP_TRACE_WARN2("smpSendKey unexpected state keyDist:%d lastSentKey:%d", keyDist, pCcb->lastSentKey);
    ce2a:	4621      	mov	r1, r4
    ce2c:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
    ce30:	4803      	ldr	r0, [pc, #12]	; (ce40 <smpSendKey+0x1b8>)
    ce32:	f00b fab5 	bl	183a0 <WsfTrace>
      return TRUE;
    ce36:	2401      	movs	r4, #1
    ce38:	e786      	b.n	cd48 <smpSendKey+0xc0>
    ce3a:	bf00      	nop
    ce3c:	10004118 	.word	0x10004118
    ce40:	00024528 	.word	0x00024528

0000ce44 <smpProcRcvKey>:
 *
 *  \return TRUE if done receiving keys, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpProcRcvKey(smpCcb_t *pCcb, dmSecKeyIndEvt_t *pKeyInd, uint8_t *pBuf, uint8_t keyDist)
{
    ce44:	b570      	push	{r4, r5, r6, lr}
  bool_t    done = FALSE;
  uint8_t   cmdCode;

  /* go to start of packet */
  pBuf += L2C_PAYLOAD_START;
  cmdCode = *pBuf++;
    ce46:	f892 c008 	ldrb.w	ip, [r2, #8]

  if (cmdCode == SMP_CMD_ENC_INFO)
    ce4a:	f1bc 0f06 	cmp.w	ip, #6
{
    ce4e:	460c      	mov	r4, r1
    ce50:	4605      	mov	r5, r0
    ce52:	461e      	mov	r6, r3
  cmdCode = *pBuf++;
    ce54:	f102 0109 	add.w	r1, r2, #9
  if (cmdCode == SMP_CMD_ENC_INFO)
    ce58:	d02b      	beq.n	ceb2 <smpProcRcvKey+0x6e>
  {
    /* parse encryption information packet */
    Calc128Cpy(pKeyInd->keyData.ltk.key, pBuf);
  }
  else if (cmdCode == SMP_CMD_MASTER_ID)
    ce5a:	f1bc 0f07 	cmp.w	ip, #7
    ce5e:	d047      	beq.n	cef0 <smpProcRcvKey+0xac>
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    pKeyInd->type = DM_KEY_PEER_LTK;
    keyIndReady = TRUE;
  }
  else if (cmdCode == SMP_CMD_ID_INFO)
    ce60:	f1bc 0f08 	cmp.w	ip, #8
    ce64:	d025      	beq.n	ceb2 <smpProcRcvKey+0x6e>
  {
    /* parse identity information packet */
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
  }
  else if (cmdCode == SMP_CMD_ID_ADDR_INFO)
    ce66:	f1bc 0f09 	cmp.w	ip, #9
    ce6a:	d030      	beq.n	cece <smpProcRcvKey+0x8a>
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
    pKeyInd->type = DM_KEY_IRK;
    keyIndReady = TRUE;
  }
  else if (cmdCode == SMP_CMD_SIGN_INFO)
    ce6c:	f1bc 0f0a 	cmp.w	ip, #10
    ce70:	d055      	beq.n	cf1e <smpProcRcvKey+0xda>
  bool_t    keyIndReady = FALSE;
    ce72:	2300      	movs	r3, #0
  }

  /* set up to receive next key */

  /* if just got first part of LTK or IRK */
  if (pCcb->nextCmdCode == SMP_CMD_ENC_INFO || pCcb->nextCmdCode == SMP_CMD_ID_INFO)
    ce74:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
    ce78:	2a06      	cmp	r2, #6
    ce7a:	d00d      	beq.n	ce98 <smpProcRcvKey+0x54>
    ce7c:	2a08      	cmp	r2, #8
    ce7e:	d00b      	beq.n	ce98 <smpProcRcvKey+0x54>
  {
    /* wait for second part of LTK or IRK info */
    pCcb->nextCmdCode++;
  }
  /* else if got LTK and need IRK */
  else if ((keyDist & SMP_KEY_DIST_ID) && (pCcb->nextCmdCode == SMP_CMD_MASTER_ID))
    ce80:	07b1      	lsls	r1, r6, #30
    ce82:	d51b      	bpl.n	cebc <smpProcRcvKey+0x78>
    ce84:	2a07      	cmp	r2, #7
    ce86:	d02e      	beq.n	cee6 <smpProcRcvKey+0xa2>
  {
    /* wait for first part of IRK */
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
  }
  /* else if got LTK or IRK and need SRK */
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
    ce88:	0771      	lsls	r1, r6, #29
    ce8a:	d501      	bpl.n	ce90 <smpProcRcvKey+0x4c>
           (pCcb->nextCmdCode == SMP_CMD_MASTER_ID || pCcb->nextCmdCode == SMP_CMD_ID_ADDR_INFO))
    ce8c:	2a09      	cmp	r2, #9
    ce8e:	d019      	beq.n	cec4 <smpProcRcvKey+0x80>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
  }
  else
  {
    /* done receiving keys */
    done = TRUE;
    ce90:	2501      	movs	r5, #1
  }

  /* call callback if key ready */
  if (keyIndReady)
    ce92:	b93b      	cbnz	r3, cea4 <smpProcRcvKey+0x60>
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
  }

  return done;
}
    ce94:	4628      	mov	r0, r5
    ce96:	bd70      	pop	{r4, r5, r6, pc}
    pCcb->nextCmdCode++;
    ce98:	3201      	adds	r2, #1
    ce9a:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
    ce9e:	2500      	movs	r5, #0
  if (keyIndReady)
    cea0:	2b00      	cmp	r3, #0
    cea2:	d0f7      	beq.n	ce94 <smpProcRcvKey+0x50>
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
    cea4:	232f      	movs	r3, #47	; 0x2f
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
    cea6:	4620      	mov	r0, r4
    pKeyInd->hdr.event = DM_SEC_KEY_IND;
    cea8:	70a3      	strb	r3, [r4, #2]
    DmSmpCbackExec((dmEvt_t *) pKeyInd);
    ceaa:	f010 fadf 	bl	1d46c <DmSmpCbackExec>
}
    ceae:	4628      	mov	r0, r5
    ceb0:	bd70      	pop	{r4, r5, r6, pc}
    Calc128Cpy(pKeyInd->keyData.irk.key, pBuf);
    ceb2:	1d20      	adds	r0, r4, #4
    ceb4:	f006 fa58 	bl	13368 <Calc128Cpy>
  bool_t    keyIndReady = FALSE;
    ceb8:	2300      	movs	r3, #0
    ceba:	e7db      	b.n	ce74 <smpProcRcvKey+0x30>
  else if ((keyDist & SMP_KEY_DIST_SIGN) &&
    cebc:	0770      	lsls	r0, r6, #29
    cebe:	d5e7      	bpl.n	ce90 <smpProcRcvKey+0x4c>
    cec0:	2a07      	cmp	r2, #7
    cec2:	d1e3      	bne.n	ce8c <smpProcRcvKey+0x48>
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
    cec4:	220a      	movs	r2, #10
    cec6:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
    ceca:	2500      	movs	r5, #0
    pCcb->nextCmdCode = SMP_CMD_SIGN_INFO;
    cecc:	e7e1      	b.n	ce92 <smpProcRcvKey+0x4e>
    BSTREAM_TO_UINT8(pKeyInd->keyData.irk.addrType, pBuf);
    cece:	7a53      	ldrb	r3, [r2, #9]
    ced0:	76a3      	strb	r3, [r4, #26]
    BSTREAM_TO_BDA(pKeyInd->keyData.irk.bdAddr, pBuf);
    ced2:	f102 010a 	add.w	r1, r2, #10
    ced6:	f104 0014 	add.w	r0, r4, #20
    ceda:	f006 fa21 	bl	13320 <BdaCpy>
    pKeyInd->type = DM_KEY_IRK;
    cede:	2304      	movs	r3, #4
    cee0:	77a3      	strb	r3, [r4, #30]
    keyIndReady = TRUE;
    cee2:	2301      	movs	r3, #1
    cee4:	e7c6      	b.n	ce74 <smpProcRcvKey+0x30>
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
    cee6:	2208      	movs	r2, #8
    cee8:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
  bool_t    done = FALSE;
    ceec:	2500      	movs	r5, #0
    pCcb->nextCmdCode = SMP_CMD_ID_INFO;
    ceee:	e7d0      	b.n	ce92 <smpProcRcvKey+0x4e>
    BSTREAM_TO_UINT16(pKeyInd->keyData.ltk.ediv, pBuf);
    cef0:	7a91      	ldrb	r1, [r2, #10]
    cef2:	7a53      	ldrb	r3, [r2, #9]
    cef4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    cef8:	83a3      	strh	r3, [r4, #28]
    memcpy(pKeyInd->keyData.ltk.rand, pBuf, SMP_RAND8_LEN);
    cefa:	f8d2 300b 	ldr.w	r3, [r2, #11]
    cefe:	f8d2 200f 	ldr.w	r2, [r2, #15]
    cf02:	61a2      	str	r2, [r4, #24]
    cf04:	6163      	str	r3, [r4, #20]
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    cf06:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    pKeyInd->type = DM_KEY_PEER_LTK;
    cf0a:	2302      	movs	r3, #2
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    cf0c:	f012 0f04 	tst.w	r2, #4
    cf10:	bf14      	ite	ne
    cf12:	461a      	movne	r2, r3
    cf14:	2201      	moveq	r2, #1
    pKeyInd->type = DM_KEY_PEER_LTK;
    cf16:	77a3      	strb	r3, [r4, #30]
    pKeyInd->secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    cf18:	77e2      	strb	r2, [r4, #31]
    keyIndReady = TRUE;
    cf1a:	2301      	movs	r3, #1
    cf1c:	e7aa      	b.n	ce74 <smpProcRcvKey+0x30>
    Calc128Cpy(pKeyInd->keyData.csrk.key, pBuf);
    cf1e:	1d20      	adds	r0, r4, #4
    cf20:	f006 fa22 	bl	13368 <Calc128Cpy>
    pKeyInd->type = DM_KEY_CSRK;
    cf24:	2308      	movs	r3, #8
    cf26:	77a3      	strb	r3, [r4, #30]
    keyIndReady = TRUE;
    cf28:	2301      	movs	r3, #1
    cf2a:	e7a3      	b.n	ce74 <smpProcRcvKey+0x30>

0000cf2c <smpActMaxAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActMaxAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf2e:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
    cf30:	200a      	movs	r0, #10
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
    cf32:	78ce      	ldrb	r6, [r1, #3]
{
    cf34:	460d      	mov	r5, r1
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
    cf36:	f000 fecb 	bl	dcd0 <smpMsgAlloc>
    cf3a:	b130      	cbz	r0, cf4a <smpActMaxAttempts+0x1e>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
    cf3c:	2305      	movs	r3, #5
    cf3e:	4601      	mov	r1, r0
    cf40:	7203      	strb	r3, [r0, #8]
    UINT8_TO_BSTREAM(p, reason);
    cf42:	7246      	strb	r6, [r0, #9]
    smpSendPkt(pCcb, pPacket);
    cf44:	4620      	mov	r0, r4
    cf46:	f000 fea3 	bl	dc90 <smpSendPkt>
  if (pCcb->pScr != NULL)
    cf4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    cf4c:	b118      	cbz	r0, cf56 <smpActMaxAttempts+0x2a>
    WsfBufFree(pCcb->pScr);
    cf4e:	f00a fe77 	bl	17c40 <WsfBufFree>
    pCcb->pScr = NULL;
    cf52:	2300      	movs	r3, #0
    cf54:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
    cf56:	4620      	mov	r0, r4
  WsfTimerStop(&pCcb->waitTimer);
    cf58:	f104 0710 	add.w	r7, r4, #16
  WsfTimerStop(&pCcb->rspTimer);
    cf5c:	f00b f980 	bl	18260 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
    cf60:	4638      	mov	r0, r7
    cf62:	f00b f97d 	bl	18260 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    cf66:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    cf6a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
    cf6e:	2600      	movs	r6, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    cf70:	42b3      	cmp	r3, r6
    cf72:	bf14      	ite	ne
    cf74:	230b      	movne	r3, #11
    cf76:	2301      	moveq	r3, #1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    cf78:	4632      	mov	r2, r6
    cf7a:	2101      	movs	r1, #1
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    cf7c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->secReq = FALSE;
    cf80:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
  pCcb->lastSentKey = 0;
    cf84:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    cf88:	f00f f90a 	bl	1c1a0 <DmConnSetIdle>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    cf8c:	232b      	movs	r3, #43	; 0x2b
    cf8e:	70ab      	strb	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
    cf90:	4628      	mov	r0, r5
    cf92:	f010 fa6b 	bl	1d46c <DmSmpCbackExec>

  /* send paring failed packet; note this stops the timer so call this first */
  smpActPairingCancel(pCcb, pMsg);

  /* Check SMP device DB to determine time to wait before pairing can happen again */
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
    cf96:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    cf9a:	f000 fa33 	bl	d404 <SmpDbMaxAttemptReached>

  /* start wait interval timer */
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
    cf9e:	2310      	movs	r3, #16
  timeout = SmpDbMaxAttemptReached(pCcb->connId);
    cfa0:	4601      	mov	r1, r0
  pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
    cfa2:	76a3      	strb	r3, [r4, #26]
  WsfTimerStartMs(&pCcb->waitTimer, timeout);
    cfa4:	4638      	mov	r0, r7
    cfa6:	f00b f917 	bl	181d8 <WsfTimerStartMs>

  /* clear attempts count */
  pCcb->attempts = 0;
    cfaa:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
}
    cfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cfb0 <smpActAttemptRcvd>:
 */
/*************************************************************************************************/
void smpActAttemptRcvd(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* set that attempt was received */
  pCcb->attempts = 1;
    cfb0:	2301      	movs	r3, #1
    cfb2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
}
    cfb6:	4770      	bx	lr

0000cfb8 <smpActNotifyDmAttemptsFailure>:
/*************************************************************************************************/
void smpActNotifyDmAttemptsFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_ATTEMPTS;
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    cfb8:	f640 132b 	movw	r3, #2347	; 0x92b
{
    cfbc:	4608      	mov	r0, r1
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    cfbe:	804b      	strh	r3, [r1, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
    cfc0:	f010 ba54 	b.w	1d46c <DmSmpCbackExec>

0000cfc4 <smpActNotifyDmRspToFailure>:
/*************************************************************************************************/
void smpActNotifyDmRspToFailure(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
  /* notify DM of pairing failure */
  pMsg->hdr.status = SMP_ERR_TIMEOUT;
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    cfc4:	f24e 132b 	movw	r3, #57643	; 0xe12b
{
    cfc8:	4608      	mov	r0, r1
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    cfca:	804b      	strh	r3, [r1, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
    cfcc:	f010 ba4e 	b.w	1d46c <DmSmpCbackExec>

0000cfd0 <smpActCheckAttempts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActCheckAttempts(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    cfd0:	b538      	push	{r3, r4, r5, lr}
  /* check if attempt was received */
  if (pCcb->attempts)
    cfd2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
    cfd6:	b903      	cbnz	r3, cfda <smpActCheckAttempts+0xa>
    /* notify DM of pairing failure */
    smpActNotifyDmAttemptsFailure(pCcb, pMsg);

    smpCleanup(pCcb);
  }
}
    cfd8:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->attempts = 0;
    cfda:	2300      	movs	r3, #0
    cfdc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    smpSendPairingFailed(pCcb, SMP_ERR_ATTEMPTS);
    cfe0:	4604      	mov	r4, r0
  if ((pPacket = smpMsgAlloc(L2C_PAYLOAD_START + SMP_PAIR_FAIL_LEN)) != NULL)
    cfe2:	200a      	movs	r0, #10
    cfe4:	460d      	mov	r5, r1
    cfe6:	f000 fe73 	bl	dcd0 <smpMsgAlloc>
    cfea:	4601      	mov	r1, r0
    cfec:	b128      	cbz	r0, cffa <smpActCheckAttempts+0x2a>
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_FAIL);
    cfee:	f640 1305 	movw	r3, #2309	; 0x905
    cff2:	8103      	strh	r3, [r0, #8]
    smpSendPkt(pCcb, pPacket);
    cff4:	4620      	mov	r0, r4
    cff6:	f000 fe4b 	bl	dc90 <smpSendPkt>
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    cffa:	f640 132b 	movw	r3, #2347	; 0x92b
  DmSmpCbackExec((dmEvt_t *) pMsg);
    cffe:	4628      	mov	r0, r5
  pMsg->hdr.event = DM_SEC_PAIR_FAIL_IND;
    d000:	806b      	strh	r3, [r5, #2]
  DmSmpCbackExec((dmEvt_t *) pMsg);
    d002:	f010 fa33 	bl	1d46c <DmSmpCbackExec>
  if (pCcb->pScr != NULL)
    d006:	6b20      	ldr	r0, [r4, #48]	; 0x30
    d008:	b118      	cbz	r0, d012 <smpActCheckAttempts+0x42>
    WsfBufFree(pCcb->pScr);
    d00a:	f00a fe19 	bl	17c40 <WsfBufFree>
    pCcb->pScr = NULL;
    d00e:	2300      	movs	r3, #0
    d010:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
    d012:	4620      	mov	r0, r4
    d014:	f00b f924 	bl	18260 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
    d018:	f104 0010 	add.w	r0, r4, #16
    d01c:	f00b f920 	bl	18260 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    d020:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
  pCcb->secReq = FALSE;
    d024:	2300      	movs	r3, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    d026:	429a      	cmp	r2, r3
    d028:	bf14      	ite	ne
    d02a:	220b      	movne	r2, #11
    d02c:	2201      	moveq	r2, #1
  pCcb->secReq = FALSE;
    d02e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    d032:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
    d036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
}
    d03a:	bd38      	pop	{r3, r4, r5, pc}

0000d03c <smpActPairingCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpActPairingCmpl(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d03c:	b510      	push	{r4, lr}
    d03e:	4604      	mov	r4, r0
  if (pCcb->pScr != NULL)
    d040:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
    d042:	b082      	sub	sp, #8
  if (pCcb->pScr != NULL)
    d044:	b118      	cbz	r0, d04e <smpActPairingCmpl+0x12>
    WsfBufFree(pCcb->pScr);
    d046:	f00a fdfb 	bl	17c40 <WsfBufFree>
    pCcb->pScr = NULL;
    d04a:	2300      	movs	r3, #0
    d04c:	6323      	str	r3, [r4, #48]	; 0x30
  WsfTimerStop(&pCcb->rspTimer);
    d04e:	4620      	mov	r0, r4
    d050:	f00b f906 	bl	18260 <WsfTimerStop>
  WsfTimerStop(&pCcb->waitTimer);
    d054:	f104 0010 	add.w	r0, r4, #16
    d058:	f00b f902 	bl	18260 <WsfTimerStop>
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    d05c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  dmSecPairCmplIndEvt_t pairCmpl;

  smpCleanup(pCcb);

  /* set connection idle */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    d060:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  pCcb->secReq = FALSE;
    d064:	2200      	movs	r2, #0
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    d066:	4293      	cmp	r3, r2
    d068:	bf14      	ite	ne
    d06a:	230b      	movne	r3, #11
    d06c:	2301      	moveq	r3, #1
  pCcb->secReq = FALSE;
    d06e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  pCcb->nextCmdCode = (pCcb->initiator) ? SMP_CMD_SECURITY_REQ : SMP_CMD_PAIR_REQ;
    d072:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  pCcb->lastSentKey = 0;
    d076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_IDLE);
    d07a:	2101      	movs	r1, #1
    d07c:	f00f f890 	bl	1c1a0 <DmConnSetIdle>

  pairCmpl.auth = pCcb->auth;
    d080:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  pairCmpl.hdr.param = pCcb->connId;
    d084:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  pairCmpl.auth = pCcb->auth;
    d088:	f88d 1004 	strb.w	r1, [sp, #4]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
    d08c:	232a      	movs	r3, #42	; 0x2a
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
    d08e:	4668      	mov	r0, sp
  pairCmpl.hdr.param = pCcb->connId;
    d090:	f8ad 2000 	strh.w	r2, [sp]
  pairCmpl.hdr.event = DM_SEC_PAIR_CMPL_IND;
    d094:	f88d 3002 	strb.w	r3, [sp, #2]
  DmSmpCbackExec((dmEvt_t *) &pairCmpl);
    d098:	f010 f9e8 	bl	1d46c <DmSmpCbackExec>
}
    d09c:	b002      	add	sp, #8
    d09e:	bd10      	pop	{r4, pc}

0000d0a0 <smpSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpSmExecute(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    d0a0:	b570      	push	{r4, r5, r6, lr}
    d0a2:	4604      	mov	r4, r0
#if SMP_EXTRA_TRACE == TRUE
  if (smpCb.lescSupported)
    SMP_TRACE_INFO2("SMP Exe: evt=%s st=%s", smpEventStr(pMsg->hdr.event), smpStateStr(pCcb->state));
  else
#endif
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
    d0a4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
    d0a8:	4818      	ldr	r0, [pc, #96]	; (d10c <smpSmExecute+0x6c>)
{
    d0aa:	460d      	mov	r5, r1
    SMP_TRACE_INFO2("smpSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
    d0ac:	7889      	ldrb	r1, [r1, #2]
    d0ae:	f00b f977 	bl	183a0 <WsfTrace>

  /* look up state table for state */
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
    d0b2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    d0b6:	f00f f8b5 	bl	1c224 <DmConnRole>
    d0ba:	4b15      	ldr	r3, [pc, #84]	; (d110 <smpSmExecute+0x70>)
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
    d0bc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  {
    /* look for event match and execute action */
    do
    {
      /* if match */
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
    d0c0:	f895 c002 	ldrb.w	ip, [r5, #2]
  pSmIf = DmConnRole(pCcb->connId) == DM_ROLE_SLAVE? smpCb.pSlave : smpCb.pMaster;
    d0c4:	e9d3 1336 	ldrd	r1, r3, [r3, #216]	; 0xd8
    d0c8:	2801      	cmp	r0, #1
    d0ca:	bf18      	it	ne
    d0cc:	4619      	movne	r1, r3
  pTblEntry = pSmIf->pStateTbl[pCcb->state];
    d0ce:	680b      	ldr	r3, [r1, #0]
    d0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d0d4:	e002      	b.n	d0dc <smpSmExecute+0x3c>

      /* next entry */
      pTblEntry++;

      /* while not at end */
    } while ((*pTblEntry)[SMP_SM_POS_EVENT] != 0);
    d0d6:	f813 2f03 	ldrb.w	r2, [r3, #3]!
    d0da:	b172      	cbz	r2, d0fa <smpSmExecute+0x5a>
      if ((*pTblEntry)[SMP_SM_POS_EVENT] == pMsg->hdr.event)
    d0dc:	781a      	ldrb	r2, [r3, #0]
    d0de:	4562      	cmp	r2, ip
    d0e0:	d1f9      	bne.n	d0d6 <smpSmExecute+0x36>
        pCcb->state = (*pTblEntry)[SMP_SM_POS_NEXT_STATE];
    d0e2:	785a      	ldrb	r2, [r3, #1]
    d0e4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
    d0e8:	789a      	ldrb	r2, [r3, #2]
    d0ea:	684b      	ldr	r3, [r1, #4]
    d0ec:	4620      	mov	r0, r4
    d0ee:	4629      	mov	r1, r5
    d0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    {
      /* set it up */
      pTblEntry = pSmIf->pCommonTbl;
    }
  }
}
    d0f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*pSmIf->pActionTbl[(*pTblEntry)[SMP_SM_POS_ACTION]])(pCcb, pMsg);
    d0f8:	4718      	bx	r3
    if (pTblEntry == (pSmIf->pCommonTbl + SMP_STATE_TBL_COMMON_MAX - 1))
    d0fa:	688a      	ldr	r2, [r1, #8]
    d0fc:	f102 000c 	add.w	r0, r2, #12
    d100:	4283      	cmp	r3, r0
    d102:	d001      	beq.n	d108 <smpSmExecute+0x68>
      pTblEntry = pSmIf->pCommonTbl;
    d104:	4613      	mov	r3, r2
    d106:	e7e9      	b.n	d0dc <smpSmExecute+0x3c>
}
    d108:	bd70      	pop	{r4, r5, r6, pc}
    d10a:	bf00      	nop
    d10c:	00024560 	.word	0x00024560
    d110:	10004118 	.word	0x10004118

0000d114 <smpProcPairing>:
{
    d114:	b500      	push	{lr}
  *pDisplay = FALSE;
    d116:	2300      	movs	r3, #0
    d118:	7013      	strb	r3, [r2, #0]
  *pOob = FALSE;
    d11a:	700b      	strb	r3, [r1, #0]
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
    d11c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
    d120:	2b01      	cmp	r3, #1
{
    d122:	b083      	sub	sp, #12
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
    d124:	d064      	beq.n	d1f0 <smpProcPairing+0xdc>
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
    d126:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
    d12a:	074b      	lsls	r3, r1, #29
    d12c:	d423      	bmi.n	d176 <smpProcPairing+0x62>
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
    d12e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
    d132:	f013 0f04 	tst.w	r3, #4
    d136:	d11e      	bne.n	d176 <smpProcPairing+0x62>
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
    d138:	ea01 0c03 	and.w	ip, r1, r3
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    d13c:	4a3b      	ldr	r2, [pc, #236]	; (d22c <smpProcPairing+0x118>)
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
    d13e:	f02c 0c04 	bic.w	ip, ip, #4
    d142:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    d146:	6812      	ldr	r2, [r2, #0]
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
    d148:	f890 c03a 	ldrb.w	ip, [r0, #58]	; 0x3a
    d14c:	f1bc 0f00 	cmp.w	ip, #0
    d150:	bf18      	it	ne
    d152:	460b      	movne	r3, r1
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    d154:	7a11      	ldrb	r1, [r2, #8]
    d156:	400b      	ands	r3, r1
    d158:	075b      	lsls	r3, r3, #29
    d15a:	d455      	bmi.n	d208 <smpProcPairing+0xf4>
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
    d15c:	7953      	ldrb	r3, [r2, #5]
    d15e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
    d162:	429a      	cmp	r2, r3
    d164:	d332      	bcc.n	d1cc <smpProcPairing+0xb8>
    d166:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
    d16a:	429a      	cmp	r2, r3
    d16c:	d32e      	bcc.n	d1cc <smpProcPairing+0xb8>
  return TRUE;
    d16e:	2001      	movs	r0, #1
}
    d170:	b003      	add	sp, #12
    d172:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
    d176:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    d17a:	2b03      	cmp	r3, #3
    d17c:	d035      	beq.n	d1ea <smpProcPairing+0xd6>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
    d17e:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
    d182:	f1bc 0f03 	cmp.w	ip, #3
    d186:	d030      	beq.n	d1ea <smpProcPairing+0xd6>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
    d188:	2b01      	cmp	r3, #1
    d18a:	d937      	bls.n	d1fc <smpProcPairing+0xe8>
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
    d18c:	2b04      	cmp	r3, #4
    d18e:	d045      	beq.n	d21c <smpProcPairing+0x108>
    d190:	2300      	movs	r3, #0
    d192:	4619      	mov	r1, r3
      *pDisplay =
    d194:	7011      	strb	r1, [r2, #0]
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
    d196:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    d19a:	2902      	cmp	r1, #2
    d19c:	d039      	beq.n	d212 <smpProcPairing+0xfe>
        *pDisplay ^= !pCcb->initiator;
    d19e:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
    d1a2:	2900      	cmp	r1, #0
    d1a4:	bf08      	it	eq
    d1a6:	f083 0301 	eoreq.w	r3, r3, #1
    d1aa:	7013      	strb	r3, [r2, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
    d1ac:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    d1b0:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    d1b4:	4a1d      	ldr	r2, [pc, #116]	; (d22c <smpProcPairing+0x118>)
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
    d1b6:	400b      	ands	r3, r1
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    d1b8:	6812      	ldr	r2, [r2, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
    d1ba:	f043 0304 	orr.w	r3, r3, #4
    d1be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
    d1c2:	7953      	ldrb	r3, [r2, #5]
    d1c4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
    d1c8:	429a      	cmp	r2, r3
    d1ca:	d2cc      	bcs.n	d166 <smpProcPairing+0x52>
    hdr.param = pCcb->connId;
    d1cc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    d1d0:	f240 6303 	movw	r3, #1539	; 0x603
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    d1d4:	a901      	add	r1, sp, #4
    hdr.param = pCcb->connId;
    d1d6:	f8ad 2004 	strh.w	r2, [sp, #4]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    d1da:	f8ad 3006 	strh.w	r3, [sp, #6]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    d1de:	f7ff ff5f 	bl	d0a0 <smpSmExecute>
    return FALSE;
    d1e2:	2000      	movs	r0, #0
}
    d1e4:	b003      	add	sp, #12
    d1e6:	f85d fb04 	ldr.w	pc, [sp], #4
           (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG))
    d1ea:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
    d1ee:	e7a3      	b.n	d138 <smpProcPairing+0x24>
  if (pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT &&
    d1f0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    d1f4:	2b01      	cmp	r3, #1
    d1f6:	d196      	bne.n	d126 <smpProcPairing+0x12>
    *pOob = SMP_OOB_DATA_PRESENT;
    d1f8:	700b      	strb	r3, [r1, #0]
  if (!justWorks)
    d1fa:	e7d7      	b.n	d1ac <smpProcPairing+0x98>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
    d1fc:	f1bc 0f01 	cmp.w	ip, #1
    d200:	d9f3      	bls.n	d1ea <smpProcPairing+0xd6>
    d202:	2301      	movs	r3, #1
    d204:	4619      	mov	r1, r3
    d206:	e7c5      	b.n	d194 <smpProcPairing+0x80>
    hdr.param = pCcb->connId;
    d208:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    d20c:	f240 3303 	movw	r3, #771	; 0x303
    d210:	e7e0      	b.n	d1d4 <smpProcPairing+0xc0>
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
    d212:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    d216:	2902      	cmp	r1, #2
    d218:	d1c1      	bne.n	d19e <smpProcPairing+0x8a>
    d21a:	e7c7      	b.n	d1ac <smpProcPairing+0x98>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
    d21c:	f1bc 0f02 	cmp.w	ip, #2
    d220:	d0ef      	beq.n	d202 <smpProcPairing+0xee>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
    d222:	f1bc 0f04 	cmp.w	ip, #4
    d226:	d1b3      	bne.n	d190 <smpProcPairing+0x7c>
    d228:	e7eb      	b.n	d202 <smpProcPairing+0xee>
    d22a:	bf00      	nop
    d22c:	10002e54 	.word	0x10002e54

0000d230 <smpAuthReq>:
{
    d230:	b500      	push	{lr}
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
    d232:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    buf.authReq.hdr.param = pCcb->connId;
    d236:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
    d23a:	f013 0304 	ands.w	r3, r3, #4
{
    d23e:	b087      	sub	sp, #28
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
    d240:	d00e      	beq.n	d260 <smpAuthReq+0x30>
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
    d242:	232e      	movs	r3, #46	; 0x2e
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
    d244:	4668      	mov	r0, sp
    buf.authReq.hdr.param = pCcb->connId;
    d246:	f8ad c000 	strh.w	ip, [sp]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
    d24a:	f88d 3002 	strb.w	r3, [sp, #2]
    buf.authReq.oob = oob;
    d24e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf.authReq.display = display;
    d252:	f88d 2005 	strb.w	r2, [sp, #5]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
    d256:	f010 f909 	bl	1d46c <DmSmpCbackExec>
}
    d25a:	b007      	add	sp, #28
    d25c:	f85d fb04 	ldr.w	pc, [sp], #4
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
    d260:	2104      	movs	r1, #4
    buf.authRsp.authDataLen = SMP_PIN_LEN;
    d262:	2203      	movs	r2, #3
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
    d264:	f88d 1002 	strb.w	r1, [sp, #2]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
    d268:	4669      	mov	r1, sp
    buf.authRsp.hdr.param = pCcb->connId;
    d26a:	f8ad c000 	strh.w	ip, [sp]
    buf.authRsp.authData[0] = 0;
    d26e:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.authRsp.authData[2] = 0;
    d272:	f88d 3006 	strb.w	r3, [sp, #6]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
    d276:	f88d 2014 	strb.w	r2, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
    d27a:	f7ff ff11 	bl	d0a0 <smpSmExecute>
}
    d27e:	b007      	add	sp, #28
    d280:	f85d fb04 	ldr.w	pc, [sp], #4

0000d284 <smpDbGetRecord>:
 *
 *  \return Pointer to the record associated with the connection or the common record.
 */
/*************************************************************************************************/
static smpDbDevice_t *smpDbGetRecord(dmConnId_t connId)
{
    d284:	b570      	push	{r4, r5, r6, lr}
    d286:	4604      	mov	r4, r0
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
  uint8_t addrType = DmHostAddrType(DmConnPeerAddrType(connId));
    d288:	f00e ff44 	bl	1c114 <DmConnPeerAddrType>
    d28c:	f00f f9ce 	bl	1c62c <DmHostAddrType>
    d290:	4605      	mov	r5, r0
  uint8_t *pAddr = DmConnPeerAddr(connId);
    d292:	4620      	mov	r0, r4
    d294:	f00e ff48 	bl	1c128 <DmConnPeerAddr>
  uint8_t i;

  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
    d298:	4621      	mov	r1, r4
  if (pRec->failCount > 0)
    d29a:	4c28      	ldr	r4, [pc, #160]	; (d33c <smpDbGetRecord+0xb8>)
  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
    d29c:	462a      	mov	r2, r5
  uint8_t *pAddr = DmConnPeerAddr(connId);
    d29e:	4606      	mov	r6, r0
  SMP_TRACE_INFO2("smpDbGetRecord: connId: %d type: %d", connId, addrType);
    d2a0:	4827      	ldr	r0, [pc, #156]	; (d340 <smpDbGetRecord+0xbc>)
    d2a2:	f00b f87d 	bl	183a0 <WsfTrace>
  if (pRec->failCount > 0)
    d2a6:	7fe3      	ldrb	r3, [r4, #31]
    d2a8:	b91b      	cbnz	r3, d2b2 <smpDbGetRecord+0x2e>
  if (pRec->lockMs > 0)
    d2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d2ac:	b90b      	cbnz	r3, d2b2 <smpDbGetRecord+0x2e>
  if (pRec->attemptMult > 0)
    d2ae:	8c23      	ldrh	r3, [r4, #32]
    d2b0:	b113      	cbz	r3, d2b8 <smpDbGetRecord+0x34>

  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
  {
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
    d2b2:	7fa3      	ldrb	r3, [r4, #30]
    d2b4:	42ab      	cmp	r3, r5
    d2b6:	d031      	beq.n	d31c <smpDbGetRecord+0x98>
  if (pRec->failCount > 0)
    d2b8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    d2bc:	b91b      	cbnz	r3, d2c6 <smpDbGetRecord+0x42>
  if (pRec->lockMs > 0)
    d2be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d2c0:	b90b      	cbnz	r3, d2c6 <smpDbGetRecord+0x42>
  if (pRec->attemptMult > 0)
    d2c2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    d2c4:	b11b      	cbz	r3, d2ce <smpDbGetRecord+0x4a>
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
    d2c6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    d2ca:	42ab      	cmp	r3, r5
    d2cc:	d02e      	beq.n	d32c <smpDbGetRecord+0xa8>
  SMP_TRACE_INFO0("smpDbAddDevice");
    d2ce:	481d      	ldr	r0, [pc, #116]	; (d344 <smpDbGetRecord+0xc0>)
    d2d0:	f00b f866 	bl	183a0 <WsfTrace>
  if (pRec->failCount > 0)
    d2d4:	7fe3      	ldrb	r3, [r4, #31]
    d2d6:	b993      	cbnz	r3, d2fe <smpDbGetRecord+0x7a>
  if (pRec->lockMs > 0)
    d2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d2da:	b983      	cbnz	r3, d2fe <smpDbGetRecord+0x7a>
  if (pRec->attemptMult > 0)
    d2dc:	8c23      	ldrh	r3, [r4, #32]
    d2de:	b973      	cbnz	r3, d2fe <smpDbGetRecord+0x7a>
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
    d2e0:	4c19      	ldr	r4, [pc, #100]	; (d348 <smpDbGetRecord+0xc4>)
      memset(pRec, 0, sizeof(smpDbDevice_t));
    d2e2:	2300      	movs	r3, #0
    d2e4:	e9c4 3300 	strd	r3, r3, [r4]
      BdaCpy(pRec->peerAddr, pAddr);
    d2e8:	4620      	mov	r0, r4
      memset(pRec, 0, sizeof(smpDbDevice_t));
    d2ea:	e9c4 3302 	strd	r3, r3, [r4, #8]
    d2ee:	e9c4 3304 	strd	r3, r3, [r4, #16]
      BdaCpy(pRec->peerAddr, pAddr);
    d2f2:	4631      	mov	r1, r6
      pRec->addrType = addrType;
    d2f4:	71a5      	strb	r5, [r4, #6]
      BdaCpy(pRec->peerAddr, pAddr);
    d2f6:	f006 f813 	bl	13320 <BdaCpy>
    /* Database is full, use the common record. */
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
  }

  return pRec;
}
    d2fa:	4620      	mov	r0, r4
    d2fc:	bd70      	pop	{r4, r5, r6, pc}
  if (pRec->failCount > 0)
    d2fe:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    d302:	b92b      	cbnz	r3, d310 <smpDbGetRecord+0x8c>
  if (pRec->lockMs > 0)
    d304:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d306:	b91b      	cbnz	r3, d310 <smpDbGetRecord+0x8c>
  if (pRec->attemptMult > 0)
    d308:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    d30a:	b90b      	cbnz	r3, d310 <smpDbGetRecord+0x8c>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
    d30c:	4c0f      	ldr	r4, [pc, #60]	; (d34c <smpDbGetRecord+0xc8>)
    d30e:	e7e8      	b.n	d2e2 <smpDbGetRecord+0x5e>
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
    d310:	480f      	ldr	r0, [pc, #60]	; (d350 <smpDbGetRecord+0xcc>)
    pRec = &smpDbCb.db[SMP_DB_COMMON_REC];
    d312:	4c0a      	ldr	r4, [pc, #40]	; (d33c <smpDbGetRecord+0xb8>)
    SMP_TRACE_INFO0("smpDbGetRecord: common record");
    d314:	f00b f844 	bl	183a0 <WsfTrace>
}
    d318:	4620      	mov	r0, r4
    d31a:	bd70      	pop	{r4, r5, r6, pc}
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
    d31c:	480a      	ldr	r0, [pc, #40]	; (d348 <smpDbGetRecord+0xc4>)
    d31e:	4631      	mov	r1, r6
    d320:	f006 f804 	bl	1332c <BdaCmp>
    d324:	2800      	cmp	r0, #0
    d326:	d0c7      	beq.n	d2b8 <smpDbGetRecord+0x34>
  smpDbDevice_t *pRec = &smpDbCb.db[SMP_DB_FIRST_REC];
    d328:	4c07      	ldr	r4, [pc, #28]	; (d348 <smpDbGetRecord+0xc4>)
    d32a:	e7f5      	b.n	d318 <smpDbGetRecord+0x94>
    if (smpDbRecordInUse(pRec) && (pRec->addrType == addrType) && BdaCmp(pRec->peerAddr, pAddr))
    d32c:	4807      	ldr	r0, [pc, #28]	; (d34c <smpDbGetRecord+0xc8>)
    d32e:	4631      	mov	r1, r6
    d330:	f005 fffc 	bl	1332c <BdaCmp>
    d334:	2800      	cmp	r0, #0
    d336:	d0ca      	beq.n	d2ce <smpDbGetRecord+0x4a>
  for (i = SMP_DB_FIRST_REC; i < SMP_DB_MAX_DEVICES; i++, pRec++)
    d338:	4c04      	ldr	r4, [pc, #16]	; (d34c <smpDbGetRecord+0xc8>)
    d33a:	e7ed      	b.n	d318 <smpDbGetRecord+0x94>
    d33c:	100040c0 	.word	0x100040c0
    d340:	00024580 	.word	0x00024580
    d344:	000245a4 	.word	0x000245a4
    d348:	100040d8 	.word	0x100040d8
    d34c:	100040f0 	.word	0x100040f0
    d350:	000245b4 	.word	0x000245b4

0000d354 <SmpDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbInit(void)
{
    d354:	b510      	push	{r4, lr}
  /* Stop active service timer. */
  if (smpDbCb.serviceTimer.isStarted == TRUE)
    d356:	4c0c      	ldr	r4, [pc, #48]	; (d388 <SmpDbInit+0x34>)
    d358:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    d35c:	2b01      	cmp	r3, #1
    d35e:	d00d      	beq.n	d37c <SmpDbInit+0x28>
  {
    WsfTimerStop(&smpDbCb.serviceTimer);
  }

  /* Reset control block. */
  memset(&smpDbCb, 0, sizeof(smpDbCb));
    d360:	2258      	movs	r2, #88	; 0x58
    d362:	4809      	ldr	r0, [pc, #36]	; (d388 <SmpDbInit+0x34>)
    d364:	2100      	movs	r1, #0
    d366:	f013 ff05 	bl	21174 <memset>

  /* Setup service timer. */
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
    d36a:	4a08      	ldr	r2, [pc, #32]	; (d38c <SmpDbInit+0x38>)
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
    d36c:	231f      	movs	r3, #31
  smpDbCb.serviceTimer.handlerId = smpCb.handlerId;
    d36e:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
    d372:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
  smpDbCb.serviceTimer.msg.event = SMP_DB_SERVICE_IND;
    d376:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
}
    d37a:	bd10      	pop	{r4, pc}
    WsfTimerStop(&smpDbCb.serviceTimer);
    d37c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    d380:	f00a ff6e 	bl	18260 <WsfTimerStop>
    d384:	e7ec      	b.n	d360 <SmpDbInit+0xc>
    d386:	bf00      	nop
    d388:	100040c0 	.word	0x100040c0
    d38c:	10004118 	.word	0x10004118

0000d390 <SmpDbGetPairingDisabledTime>:
 *
 *  \return Time pairing is disabled (msec), or zero if pairing isn't disabled.
 */
/*************************************************************************************************/
uint32_t SmpDbGetPairingDisabledTime(dmConnId_t connId)
{
    d390:	b510      	push	{r4, lr}
    d392:	b082      	sub	sp, #8
    d394:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    d396:	f7ff ff75 	bl	d284 <smpDbGetRecord>
    d39a:	4604      	mov	r4, r0

  SMP_TRACE_INFO3("SmpDbGetPairingDisabledTime: connId: %d period: %d attemptMult: %d",
    d39c:	9901      	ldr	r1, [sp, #4]
    d39e:	4804      	ldr	r0, [pc, #16]	; (d3b0 <SmpDbGetPairingDisabledTime+0x20>)
    d3a0:	8923      	ldrh	r3, [r4, #8]
    d3a2:	68e2      	ldr	r2, [r4, #12]
    d3a4:	f00a fffc 	bl	183a0 <WsfTrace>
                  connId, pRec->lockMs, pRec->attemptMult);

  return pRec->lockMs;
}
    d3a8:	68e0      	ldr	r0, [r4, #12]
    d3aa:	b002      	add	sp, #8
    d3ac:	bd10      	pop	{r4, pc}
    d3ae:	bf00      	nop
    d3b0:	000245d4 	.word	0x000245d4

0000d3b4 <SmpDbSetFailureCount>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbSetFailureCount(dmConnId_t connId, uint8_t count)
{
    d3b4:	b530      	push	{r4, r5, lr}
    d3b6:	b083      	sub	sp, #12
    d3b8:	460c      	mov	r4, r1
    d3ba:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    d3bc:	f7ff ff62 	bl	d284 <smpDbGetRecord>
    d3c0:	4605      	mov	r5, r0

  SMP_TRACE_INFO2("SmpDbSetFailureCount: connId: %d count: %d", connId, count);
    d3c2:	9901      	ldr	r1, [sp, #4]
    d3c4:	4805      	ldr	r0, [pc, #20]	; (d3dc <SmpDbSetFailureCount+0x28>)
    d3c6:	4622      	mov	r2, r4
    d3c8:	f00a ffea 	bl	183a0 <WsfTrace>

  pRec->failCount = count;
    d3cc:	71ec      	strb	r4, [r5, #7]

  if (count != 0)
    d3ce:	b11c      	cbz	r4, d3d8 <SmpDbSetFailureCount+0x24>
  {
    pRec->failCountToMs = pSmpCfg->maxAttemptTimeout;
    d3d0:	4b03      	ldr	r3, [pc, #12]	; (d3e0 <SmpDbSetFailureCount+0x2c>)
    d3d2:	681b      	ldr	r3, [r3, #0]
    d3d4:	68db      	ldr	r3, [r3, #12]
    d3d6:	616b      	str	r3, [r5, #20]
  }
}
    d3d8:	b003      	add	sp, #12
    d3da:	bd30      	pop	{r4, r5, pc}
    d3dc:	00024618 	.word	0x00024618
    d3e0:	10002e54 	.word	0x10002e54

0000d3e4 <SmpDbGetFailureCount>:
 *
 *  \return The failure count.
 */
/*************************************************************************************************/
uint8_t SmpDbGetFailureCount(dmConnId_t connId)
{
    d3e4:	b510      	push	{r4, lr}
    d3e6:	b082      	sub	sp, #8
    d3e8:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    d3ea:	f7ff ff4b 	bl	d284 <smpDbGetRecord>
    d3ee:	4604      	mov	r4, r0

  SMP_TRACE_INFO2("SmpDbGetFailureCount: connId: %d count: %d", connId, pRec->failCount);
    d3f0:	9901      	ldr	r1, [sp, #4]
    d3f2:	4803      	ldr	r0, [pc, #12]	; (d400 <SmpDbGetFailureCount+0x1c>)
    d3f4:	79e2      	ldrb	r2, [r4, #7]
    d3f6:	f00a ffd3 	bl	183a0 <WsfTrace>

  return pRec->failCount;
}
    d3fa:	79e0      	ldrb	r0, [r4, #7]
    d3fc:	b002      	add	sp, #8
    d3fe:	bd10      	pop	{r4, pc}
    d400:	00024644 	.word	0x00024644

0000d404 <SmpDbMaxAttemptReached>:
 *
 *  \return Time until device can retry pairing.
 */
/*************************************************************************************************/
uint32_t SmpDbMaxAttemptReached(dmConnId_t connId)
{
    d404:	b510      	push	{r4, lr}
    d406:	b082      	sub	sp, #8
    d408:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    d40a:	f7ff ff3b 	bl	d284 <smpDbGetRecord>
    d40e:	4604      	mov	r4, r0
  uint16_t multiplier;

  SMP_TRACE_INFO1("SmpDbMaxAttemptReached: connId: %d", connId);
    d410:	9901      	ldr	r1, [sp, #4]
    d412:	4815      	ldr	r0, [pc, #84]	; (d468 <SmpDbMaxAttemptReached+0x64>)
    d414:	f00a ffc4 	bl	183a0 <WsfTrace>

  if (pRec->attemptMult == 0)
    d418:	8923      	ldrh	r3, [r4, #8]
    /* Due to a disconnection, a record exists but the attempt multipier hasn't been set. */
    multiplier = 1;
  }
  else
  {
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
    d41a:	4a14      	ldr	r2, [pc, #80]	; (d46c <SmpDbMaxAttemptReached+0x68>)
  if (pRec->attemptMult == 0)
    d41c:	b9a3      	cbnz	r3, d448 <SmpDbMaxAttemptReached+0x44>
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
    d41e:	2301      	movs	r3, #1
    d420:	6812      	ldr	r2, [r2, #0]
    multiplier = 1;
    d422:	4619      	mov	r1, r3
  }

  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
    d424:	6810      	ldr	r0, [r2, #0]
    d426:	fb00 f303 	mul.w	r3, r0, r3
    d42a:	68d0      	ldr	r0, [r2, #12]
  {
    /* Exponential increase is greater than max timeout. */
    pRec->lockMs = pSmpCfg->maxAttemptTimeout;
  }

  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
    d42c:	6912      	ldr	r2, [r2, #16]
  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
    d42e:	4283      	cmp	r3, r0
    pRec->attemptMult = multiplier;
    d430:	bf98      	it	ls
    d432:	4618      	movls	r0, r3
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
    d434:	e9c4 0203 	strd	r0, r2, [r4, #12]
  if (smpDbCb.serviceTimer.isStarted == FALSE)
    d438:	4b0d      	ldr	r3, [pc, #52]	; (d470 <SmpDbMaxAttemptReached+0x6c>)
    pRec->attemptMult = multiplier;
    d43a:	bf98      	it	ls
    d43c:	8121      	strhls	r1, [r4, #8]
  if (smpDbCb.serviceTimer.isStarted == FALSE)
    d43e:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
    d442:	b142      	cbz	r2, d456 <SmpDbMaxAttemptReached+0x52>

  /* Ensure the service timer is running. */
  smpDbStartServiceTimer();

  return pRec->lockMs;
}
    d444:	b002      	add	sp, #8
    d446:	bd10      	pop	{r4, pc}
    multiplier = (pRec->attemptMult * pSmpCfg->attemptExp);
    d448:	6812      	ldr	r2, [r2, #0]
    d44a:	8a91      	ldrh	r1, [r2, #20]
    d44c:	fb11 f103 	smulbb	r1, r1, r3
    d450:	b289      	uxth	r1, r1
  if ((pSmpCfg->attemptTimeout * multiplier) <= pSmpCfg->maxAttemptTimeout)
    d452:	460b      	mov	r3, r1
    d454:	e7e6      	b.n	d424 <SmpDbMaxAttemptReached+0x20>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
    d456:	f103 0048 	add.w	r0, r3, #72	; 0x48
    d45a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d45e:	f00a febb 	bl	181d8 <WsfTimerStartMs>
  return pRec->lockMs;
    d462:	68e0      	ldr	r0, [r4, #12]
}
    d464:	b002      	add	sp, #8
    d466:	bd10      	pop	{r4, pc}
    d468:	00024670 	.word	0x00024670
    d46c:	10002e54 	.word	0x10002e54
    d470:	100040c0 	.word	0x100040c0

0000d474 <SmpDbPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbPairingFailed(dmConnId_t connId)
{
    d474:	b510      	push	{r4, lr}
    d476:	b082      	sub	sp, #8
    d478:	9001      	str	r0, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    d47a:	f7ff ff03 	bl	d284 <smpDbGetRecord>

  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
    d47e:	9901      	ldr	r1, [sp, #4]
  smpDbDevice_t *pRec = smpDbGetRecord(connId);
    d480:	4604      	mov	r4, r0
  SMP_TRACE_INFO1("SmpDbPairingFailed: connId: %d", connId);
    d482:	4804      	ldr	r0, [pc, #16]	; (d494 <SmpDbPairingFailed+0x20>)
    d484:	f00a ff8c 	bl	183a0 <WsfTrace>

  /* Reset exponent decrement timer. */
  pRec->expDecrementMs = pSmpCfg->attemptDecTimeout;
    d488:	4b03      	ldr	r3, [pc, #12]	; (d498 <SmpDbPairingFailed+0x24>)
    d48a:	681b      	ldr	r3, [r3, #0]
    d48c:	691b      	ldr	r3, [r3, #16]
    d48e:	6123      	str	r3, [r4, #16]
}
    d490:	b002      	add	sp, #8
    d492:	bd10      	pop	{r4, pc}
    d494:	00024694 	.word	0x00024694
    d498:	10002e54 	.word	0x10002e54

0000d49c <SmpDbService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpDbService(void)
{
    d49c:	b538      	push	{r3, r4, r5, lr}
  if (pRec->failCount > 0)
    d49e:	4c75      	ldr	r4, [pc, #468]	; (d674 <SmpDbService+0x1d8>)
    d4a0:	79e0      	ldrb	r0, [r4, #7]
    d4a2:	b9b8      	cbnz	r0, d4d4 <SmpDbService+0x38>
    d4a4:	68e3      	ldr	r3, [r4, #12]
  if (pRec->lockMs > 0)
    d4a6:	b9b3      	cbnz	r3, d4d6 <SmpDbService+0x3a>
  if (pRec->attemptMult > 0)
    d4a8:	8922      	ldrh	r2, [r4, #8]
    d4aa:	b9a2      	cbnz	r2, d4d6 <SmpDbService+0x3a>
  if (pRec->failCount > 0)
    d4ac:	7fe0      	ldrb	r0, [r4, #31]
    d4ae:	2800      	cmp	r0, #0
    d4b0:	d14b      	bne.n	d54a <SmpDbService+0xae>
    d4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (pRec->lockMs > 0)
    d4b4:	2b00      	cmp	r3, #0
    d4b6:	d149      	bne.n	d54c <SmpDbService+0xb0>
  if (pRec->attemptMult > 0)
    d4b8:	8c22      	ldrh	r2, [r4, #32]
    d4ba:	2a00      	cmp	r2, #0
    d4bc:	d146      	bne.n	d54c <SmpDbService+0xb0>
  if (pRec->failCount > 0)
    d4be:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    d4c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d4c4:	2800      	cmp	r0, #0
    d4c6:	d17c      	bne.n	d5c2 <SmpDbService+0x126>
  if (pRec->lockMs > 0)
    d4c8:	2b00      	cmp	r3, #0
    d4ca:	d17a      	bne.n	d5c2 <SmpDbService+0x126>
  if (pRec->attemptMult > 0)
    d4cc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    d4ce:	2a00      	cmp	r2, #0
    d4d0:	d177      	bne.n	d5c2 <SmpDbService+0x126>
      {
        smpDbStartServiceTimer();
      }
    }
  }
}
    d4d2:	bd38      	pop	{r3, r4, r5, pc}
    d4d4:	68e3      	ldr	r3, [r4, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d4d6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
    d4da:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    d4de:	bf38      	it	cc
    d4e0:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
    d4e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    d4e8:	bf38      	it	cc
    d4ea:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d4ee:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    d4f2:	bf38      	it	cc
    d4f4:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
    d4f8:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
    d4fc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d500:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
    d504:	e9c4 3103 	strd	r3, r1, [r4, #12]
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d508:	6162      	str	r2, [r4, #20]
      if (pRec->expDecrementMs == 0)
    d50a:	b961      	cbnz	r1, d526 <SmpDbService+0x8a>
        pRec->attemptMult /= pSmpCfg->attemptExp;
    d50c:	495a      	ldr	r1, [pc, #360]	; (d678 <SmpDbService+0x1dc>)
    d50e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    d512:	680d      	ldr	r5, [r1, #0]
    d514:	8aa9      	ldrh	r1, [r5, #20]
    d516:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
    d51a:	458c      	cmp	ip, r1
        pRec->attemptMult /= pSmpCfg->attemptExp;
    d51c:	f8a4 e008 	strh.w	lr, [r4, #8]
        if (pRec->attemptMult)
    d520:	d301      	bcc.n	d526 <SmpDbService+0x8a>
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
    d522:	6929      	ldr	r1, [r5, #16]
    d524:	6121      	str	r1, [r4, #16]
      if (pRec->failCountToMs == 0)
    d526:	2a00      	cmp	r2, #0
    d528:	f000 8088 	beq.w	d63c <SmpDbService+0x1a0>
  if (pRec->failCount > 0)
    d52c:	2800      	cmp	r0, #0
    d52e:	f000 8086 	beq.w	d63e <SmpDbService+0x1a2>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
    d532:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    d536:	2b00      	cmp	r3, #0
    d538:	d1b8      	bne.n	d4ac <SmpDbService+0x10>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
    d53a:	4850      	ldr	r0, [pc, #320]	; (d67c <SmpDbService+0x1e0>)
    d53c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d540:	f00a fe4a 	bl	181d8 <WsfTimerStartMs>
  if (pRec->failCount > 0)
    d544:	7fe0      	ldrb	r0, [r4, #31]
    d546:	2800      	cmp	r0, #0
    d548:	d0b3      	beq.n	d4b2 <SmpDbService+0x16>
    d54a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d54c:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
    d550:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    d554:	bf38      	it	cc
    d556:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
    d55a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    d55e:	bf38      	it	cc
    d560:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d564:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    d568:	bf38      	it	cc
    d56a:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
    d56e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
    d572:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d576:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
    d57a:	e9c4 3109 	strd	r3, r1, [r4, #36]	; 0x24
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d57e:	62e2      	str	r2, [r4, #44]	; 0x2c
      if (pRec->expDecrementMs == 0)
    d580:	b951      	cbnz	r1, d598 <SmpDbService+0xfc>
        pRec->attemptMult /= pSmpCfg->attemptExp;
    d582:	493d      	ldr	r1, [pc, #244]	; (d678 <SmpDbService+0x1dc>)
    d584:	f8b4 c020 	ldrh.w	ip, [r4, #32]
    d588:	680d      	ldr	r5, [r1, #0]
    d58a:	8aa9      	ldrh	r1, [r5, #20]
    d58c:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
    d590:	458c      	cmp	ip, r1
        pRec->attemptMult /= pSmpCfg->attemptExp;
    d592:	f8a4 e020 	strh.w	lr, [r4, #32]
        if (pRec->attemptMult)
    d596:	d26a      	bcs.n	d66e <SmpDbService+0x1d2>
      if (pRec->failCountToMs == 0)
    d598:	2a00      	cmp	r2, #0
    d59a:	d158      	bne.n	d64e <SmpDbService+0x1b2>
        pRec->failCount = 0;
    d59c:	77e2      	strb	r2, [r4, #31]
  if (pRec->lockMs > 0)
    d59e:	b913      	cbnz	r3, d5a6 <SmpDbService+0x10a>
  if (pRec->attemptMult > 0)
    d5a0:	8c23      	ldrh	r3, [r4, #32]
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	d08b      	beq.n	d4be <SmpDbService+0x22>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
    d5a6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	d187      	bne.n	d4be <SmpDbService+0x22>
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
    d5ae:	4833      	ldr	r0, [pc, #204]	; (d67c <SmpDbService+0x1e0>)
    d5b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d5b4:	f00a fe10 	bl	181d8 <WsfTimerStartMs>
  if (pRec->failCount > 0)
    d5b8:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    d5bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d5be:	2800      	cmp	r0, #0
    d5c0:	d082      	beq.n	d4c8 <SmpDbService+0x2c>
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d5c2:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
    d5c6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    d5ca:	bf38      	it	cc
    d5cc:	f44f 717a 	movcc.w	r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
    d5d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    d5d4:	bf38      	it	cc
    d5d6:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d5da:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    d5de:	bf38      	it	cc
    d5e0:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->expDecrementMs);
    d5e4:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
    d5e8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d5ec:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
      SMP_DB_DEC_TIMER(pRec->lockMs);
    d5f0:	e9c4 310f 	strd	r3, r1, [r4, #60]	; 0x3c
      SMP_DB_DEC_TIMER(pRec->failCountToMs);
    d5f4:	6462      	str	r2, [r4, #68]	; 0x44
      if (pRec->expDecrementMs == 0)
    d5f6:	b969      	cbnz	r1, d614 <SmpDbService+0x178>
        pRec->attemptMult /= pSmpCfg->attemptExp;
    d5f8:	491f      	ldr	r1, [pc, #124]	; (d678 <SmpDbService+0x1dc>)
    d5fa:	f8b4 c038 	ldrh.w	ip, [r4, #56]	; 0x38
    d5fe:	680d      	ldr	r5, [r1, #0]
    d600:	8aa9      	ldrh	r1, [r5, #20]
    d602:	fbbc fef1 	udiv	lr, ip, r1
        if (pRec->attemptMult)
    d606:	458c      	cmp	ip, r1
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
    d608:	bf28      	it	cs
    d60a:	6929      	ldrcs	r1, [r5, #16]
        pRec->attemptMult /= pSmpCfg->attemptExp;
    d60c:	f8a4 e038 	strh.w	lr, [r4, #56]	; 0x38
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
    d610:	bf28      	it	cs
    d612:	6421      	strcs	r1, [r4, #64]	; 0x40
      if (pRec->failCountToMs == 0)
    d614:	bb1a      	cbnz	r2, d65e <SmpDbService+0x1c2>
        pRec->failCount = 0;
    d616:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
  if (pRec->lockMs > 0)
    d61a:	b91b      	cbnz	r3, d624 <SmpDbService+0x188>
  if (pRec->attemptMult > 0)
    d61c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    d61e:	2b00      	cmp	r3, #0
    d620:	f43f af57 	beq.w	d4d2 <SmpDbService+0x36>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
    d624:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    d628:	2b00      	cmp	r3, #0
    d62a:	f47f af52 	bne.w	d4d2 <SmpDbService+0x36>
}
    d62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfTimerStartMs(&smpDbCb.serviceTimer, SMP_DB_SRV_MS);
    d632:	4812      	ldr	r0, [pc, #72]	; (d67c <SmpDbService+0x1e0>)
    d634:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d638:	f00a bdce 	b.w	181d8 <WsfTimerStartMs>
        pRec->failCount = 0;
    d63c:	71e2      	strb	r2, [r4, #7]
  if (pRec->lockMs > 0)
    d63e:	2b00      	cmp	r3, #0
    d640:	f47f af77 	bne.w	d532 <SmpDbService+0x96>
  if (pRec->attemptMult > 0)
    d644:	8923      	ldrh	r3, [r4, #8]
    d646:	2b00      	cmp	r3, #0
    d648:	f43f af30 	beq.w	d4ac <SmpDbService+0x10>
    d64c:	e771      	b.n	d532 <SmpDbService+0x96>
  if (pRec->failCount > 0)
    d64e:	2800      	cmp	r0, #0
    d650:	d0a5      	beq.n	d59e <SmpDbService+0x102>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
    d652:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    d656:	2b00      	cmp	r3, #0
    d658:	f47f af31 	bne.w	d4be <SmpDbService+0x22>
    d65c:	e7a7      	b.n	d5ae <SmpDbService+0x112>
  if (pRec->failCount > 0)
    d65e:	2800      	cmp	r0, #0
    d660:	d0db      	beq.n	d61a <SmpDbService+0x17e>
  if (smpDbCb.serviceTimer.isStarted == FALSE)
    d662:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    d666:	2b00      	cmp	r3, #0
    d668:	f47f af33 	bne.w	d4d2 <SmpDbService+0x36>
    d66c:	e7df      	b.n	d62e <SmpDbService+0x192>
          pRec->expDecrementMs =  pSmpCfg->attemptDecTimeout;
    d66e:	6929      	ldr	r1, [r5, #16]
    d670:	62a1      	str	r1, [r4, #40]	; 0x28
    d672:	e791      	b.n	d598 <SmpDbService+0xfc>
    d674:	100040c0 	.word	0x100040c0
    d678:	10002e54 	.word	0x10002e54
    d67c:	10004108 	.word	0x10004108

0000d680 <smpL2cDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void smpL2cDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
    d680:	b530      	push	{r4, r5, lr}
    d682:	b087      	sub	sp, #28
    d684:	460d      	mov	r5, r1
    d686:	4614      	mov	r4, r2
/*************************************************************************************************/
smpCcb_t *smpCcbByHandle(uint16_t handle)
{
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
    d688:	f00e fd18 	bl	1c0bc <DmConnIdByHandle>
    d68c:	2800      	cmp	r0, #0
    d68e:	d039      	beq.n	d704 <smpL2cDataCback+0x84>
  cmdCode = *(pPacket + L2C_PAYLOAD_START);
    d690:	f894 c008 	ldrb.w	ip, [r4, #8]
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
    d694:	f10c 33ff 	add.w	r3, ip, #4294967295
    d698:	2b0d      	cmp	r3, #13
  {
    return &smpCb.ccb[connId - 1];
    d69a:	f100 30ff 	add.w	r0, r0, #4294967295
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
    d69e:	d804      	bhi.n	d6aa <smpL2cDataCback+0x2a>
      (len == smpPktLenTbl[cmdCode]) &&
    d6a0:	4b1c      	ldr	r3, [pc, #112]	; (d714 <smpL2cDataCback+0x94>)
  if ((cmdCode >= SMP_CMD_PAIR_REQ && cmdCode < SMP_CMD_MAX) &&
    d6a2:	f813 300c 	ldrb.w	r3, [r3, ip]
    d6a6:	42ab      	cmp	r3, r5
    d6a8:	d00e      	beq.n	d6c8 <smpL2cDataCback+0x48>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
    d6aa:	4b1b      	ldr	r3, [pc, #108]	; (d718 <smpL2cDataCback+0x98>)
    d6ac:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    d6b0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    d6b4:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
    d6b8:	4818      	ldr	r0, [pc, #96]	; (d71c <smpL2cDataCback+0x9c>)
    d6ba:	462a      	mov	r2, r5
    d6bc:	4661      	mov	r1, ip
}
    d6be:	b007      	add	sp, #28
    d6c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SMP_TRACE_WARN3("unexpected packet cmd:%d len:%d, expected:%d", cmdCode, len, pCcb->nextCmdCode);
    d6c4:	f00a be6c 	b.w	183a0 <WsfTrace>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
    d6c8:	4a13      	ldr	r2, [pc, #76]	; (d718 <smpL2cDataCback+0x98>)
    d6ca:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    d6ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d6d2:	00c1      	lsls	r1, r0, #3
    d6d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
      (len == smpPktLenTbl[cmdCode]) &&
    d6d8:	4563      	cmp	r3, ip
    d6da:	d015      	beq.n	d708 <smpL2cDataCback+0x88>
      ((cmdCode == pCcb->nextCmdCode) || (cmdCode == SMP_CMD_PAIR_FAIL)))
    d6dc:	f1bc 0f05 	cmp.w	ip, #5
    d6e0:	d1ea      	bne.n	d6b8 <smpL2cDataCback+0x38>
      msg.hdr.status = *(pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN);
    d6e2:	7a63      	ldrb	r3, [r4, #9]
    d6e4:	f88d 3003 	strb.w	r3, [sp, #3]
      msg.hdr.event = SMP_MSG_CMD_PAIRING_FAILED;
    d6e8:	2507      	movs	r5, #7
    msg.hdr.param = pCcb->connId;
    d6ea:	4408      	add	r0, r1
    d6ec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    smpSmExecute(pCcb, &msg);
    d6f0:	4669      	mov	r1, sp
    msg.hdr.param = pCcb->connId;
    d6f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    d6f6:	f88d 5002 	strb.w	r5, [sp, #2]
    d6fa:	f8ad 3000 	strh.w	r3, [sp]
    msg.data.pPacket = pPacket;
    d6fe:	9401      	str	r4, [sp, #4]
    smpSmExecute(pCcb, &msg);
    d700:	f7ff fcce 	bl	d0a0 <smpSmExecute>
}
    d704:	b007      	add	sp, #28
    d706:	bd30      	pop	{r4, r5, pc}
    if (cmdCode == SMP_CMD_PAIR_FAIL)
    d708:	2b05      	cmp	r3, #5
      msg.hdr.event = SMP_MSG_CMD_PKT;
    d70a:	bf18      	it	ne
    d70c:	2506      	movne	r5, #6
    if (cmdCode == SMP_CMD_PAIR_FAIL)
    d70e:	d1ec      	bne.n	d6ea <smpL2cDataCback+0x6a>
    d710:	e7e7      	b.n	d6e2 <smpL2cDataCback+0x62>
    d712:	bf00      	nop
    d714:	00024724 	.word	0x00024724
    d718:	10004118 	.word	0x10004118
    d71c:	000246b4 	.word	0x000246b4

0000d720 <smpDmConnCback>:
{
    d720:	b5f0      	push	{r4, r5, r6, r7, lr}
    d722:	4605      	mov	r5, r0
  pCcb = smpCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
    d724:	7800      	ldrb	r0, [r0, #0]
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
    d726:	78ab      	ldrb	r3, [r5, #2]
    d728:	2b27      	cmp	r3, #39	; 0x27
{
    d72a:	b083      	sub	sp, #12
/*************************************************************************************************/
smpCcb_t *smpCcbByConnId(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &smpCb.ccb[connId - 1];
    d72c:	f100 34ff 	add.w	r4, r0, #4294967295
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
    d730:	d00b      	beq.n	d74a <smpDmConnCback+0x2a>
  else if (pCcb->connId != DM_CONN_ID_NONE)
    d732:	4a40      	ldr	r2, [pc, #256]	; (d834 <smpDmConnCback+0x114>)
    d734:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d738:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    d73c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    d740:	b10a      	cbz	r2, d746 <smpDmConnCback+0x26>
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
    d742:	2b28      	cmp	r3, #40	; 0x28
    d744:	d04c      	beq.n	d7e0 <smpDmConnCback+0xc0>
}
    d746:	b003      	add	sp, #12
    d748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (DmConnRole((dmConnId_t) pDmEvt->hdr.param) == DM_ROLE_MASTER)
    d74a:	f00e fd6b 	bl	1c224 <DmConnRole>
    d74e:	4f39      	ldr	r7, [pc, #228]	; (d834 <smpDmConnCback+0x114>)
    pCcb->handle = pDmEvt->connOpen.handle;
    d750:	88eb      	ldrh	r3, [r5, #6]
    d752:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d756:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
    d75a:	2800      	cmp	r0, #0
    pCcb->secReq = FALSE;
    d75c:	f04f 0600 	mov.w	r6, #0
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
    d760:	7828      	ldrb	r0, [r5, #0]
    pCcb->handle = pDmEvt->connOpen.handle;
    d762:	8723      	strh	r3, [r4, #56]	; 0x38
      pCcb->nextCmdCode = SMP_CMD_PAIR_REQ;
    d764:	bf0b      	itete	eq
    d766:	220b      	moveq	r2, #11
    d768:	2201      	movne	r2, #1
    d76a:	2301      	moveq	r3, #1
    d76c:	4633      	movne	r3, r6
    d76e:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
    d772:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
    d776:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    pCcb->secReq = FALSE;
    d77a:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
    pCcb->flowDisabled = FALSE;
    d77e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
    d782:	f7ff fe2f 	bl	d3e4 <SmpDbGetFailureCount>
    smpResumeAttemptsState((dmConnId_t) pDmEvt->hdr.param);
    d786:	782d      	ldrb	r5, [r5, #0]
    pCcb->attempts = SmpDbGetFailureCount((dmConnId_t) pDmEvt->hdr.param);
    d788:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    pCcb->lastSentKey = 0;
    d78c:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
    pCcb->state = 0;
    d790:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  uint32_t timeMs = SmpDbGetPairingDisabledTime(connId);
    d794:	4628      	mov	r0, r5
    d796:	f7ff fdfb 	bl	d390 <SmpDbGetPairingDisabledTime>
  if (timeMs)
    d79a:	4604      	mov	r4, r0
    d79c:	2800      	cmp	r0, #0
    d79e:	d0d2      	beq.n	d746 <smpDmConnCback+0x26>
    if (smpCb.lescSupported)
    d7a0:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
  return &smpCb.ccb[connId - 1];
    d7a4:	1e6e      	subs	r6, r5, #1
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
    d7a6:	4628      	mov	r0, r5
    if (smpCb.lescSupported)
    d7a8:	2b00      	cmp	r3, #0
    d7aa:	d035      	beq.n	d818 <smpDmConnCback+0xf8>
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SC_SM_ST_ATTEMPTS : SMPI_SC_SM_ST_ATTEMPTS;
    d7ac:	f00e fd3a 	bl	1c224 <DmConnRole>
    d7b0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    d7b4:	2801      	cmp	r0, #1
    d7b6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    d7ba:	bf0c      	ite	eq
    d7bc:	2226      	moveq	r2, #38	; 0x26
    d7be:	2224      	movne	r2, #36	; 0x24
    d7c0:	00f0      	lsls	r0, r6, #3
    d7c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
    d7c6:	4430      	add	r0, r6
    d7c8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
    d7cc:	2210      	movs	r2, #16
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
    d7ce:	4618      	mov	r0, r3
    d7d0:	4621      	mov	r1, r4
    d7d2:	4410      	add	r0, r2
    pCcb->waitTimer.msg.event = SMP_MSG_INT_WI_TIMEOUT;
    d7d4:	769a      	strb	r2, [r3, #26]
}
    d7d6:	b003      	add	sp, #12
    d7d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    WsfTimerStartMs(&pCcb->waitTimer, timeMs);
    d7dc:	f00a bcfc 	b.w	181d8 <WsfTimerStartMs>
      SmpDbSetFailureCount((dmConnId_t) pDmEvt->hdr.param, pCcb->attempts);
    d7e0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    d7e4:	f7ff fde6 	bl	d3b4 <SmpDbSetFailureCount>
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
    d7e8:	7a2b      	ldrb	r3, [r5, #8]
      hdr.param = pDmEvt->hdr.param;
    d7ea:	8828      	ldrh	r0, [r5, #0]
    d7ec:	f8ad 0004 	strh.w	r0, [sp, #4]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
    d7f0:	3320      	adds	r3, #32
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
    d7f2:	220a      	movs	r2, #10
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    d7f4:	4620      	mov	r0, r4
    d7f6:	a901      	add	r1, sp, #4
      hdr.event = SMP_MSG_DM_CONN_CLOSE;
    d7f8:	f88d 2006 	strb.w	r2, [sp, #6]
      hdr.status = pDmEvt->connClose.reason + DM_SEC_HCI_ERR_BASE;
    d7fc:	f88d 3007 	strb.w	r3, [sp, #7]
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    d800:	f7ff fc4e 	bl	d0a0 <smpSmExecute>
      if (pCcb->pQueued != NULL)
    d804:	6b60      	ldr	r0, [r4, #52]	; 0x34
      pCcb->connId = DM_CONN_ID_NONE;
    d806:	2500      	movs	r5, #0
    d808:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      if (pCcb->pQueued != NULL)
    d80c:	2800      	cmp	r0, #0
    d80e:	d09a      	beq.n	d746 <smpDmConnCback+0x26>
        WsfMsgFree(pCcb->pQueued);
    d810:	f00a fa4e 	bl	17cb0 <WsfMsgFree>
        pCcb->pQueued = NULL;
    d814:	6365      	str	r5, [r4, #52]	; 0x34
}
    d816:	e796      	b.n	d746 <smpDmConnCback+0x26>
      pCcb->state = DmConnRole(connId) == DM_ROLE_SLAVE? SMPR_SM_ST_ATTEMPTS : SMPI_SM_ST_ATTEMPTS;
    d818:	f00e fd04 	bl	1c224 <DmConnRole>
    d81c:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    d820:	2801      	cmp	r0, #1
    d822:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    d826:	bf0c      	ite	eq
    d828:	220d      	moveq	r2, #13
    d82a:	220c      	movne	r2, #12
    d82c:	00f0      	lsls	r0, r6, #3
    d82e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    d832:	e7c8      	b.n	d7c6 <smpDmConnCback+0xa6>
    d834:	10004118 	.word	0x10004118

0000d838 <smpL2cCtrlCback>:
{
    d838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return &smpCb.ccb[connId - 1];
    d83c:	7804      	ldrb	r4, [r0, #0]
  if (pCcb->connId != DM_CONN_ID_NONE)
    d83e:	4f17      	ldr	r7, [pc, #92]	; (d89c <smpL2cCtrlCback+0x64>)
  return &smpCb.ccb[connId - 1];
    d840:	3c01      	subs	r4, #1
  if (pCcb->connId != DM_CONN_ID_NONE)
    d842:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d846:	eb07 05c3 	add.w	r5, r7, r3, lsl #3
    d84a:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    d84e:	b1db      	cbz	r3, d888 <smpL2cCtrlCback+0x50>
    pCcb->flowDisabled = (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND);
    d850:	7883      	ldrb	r3, [r0, #2]
    d852:	2b01      	cmp	r3, #1
    d854:	bf0c      	ite	eq
    d856:	2301      	moveq	r3, #1
    d858:	2300      	movne	r3, #0
    d85a:	4606      	mov	r6, r0
    d85c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if (!pCcb->flowDisabled)
    d860:	d012      	beq.n	d888 <smpL2cCtrlCback+0x50>
      if (pCcb->pQueued != NULL)
    d862:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d864:	ea4f 08c4 	mov.w	r8, r4, lsl #3
    d868:	b143      	cbz	r3, d87c <smpL2cCtrlCback+0x44>
        pCcb->pQueued = NULL;
    d86a:	2200      	movs	r2, #0
    d86c:	636a      	str	r2, [r5, #52]	; 0x34
    pCcb->pQueued = pPkt;
  }
  /* else send it to L2CAP */
  else
  {
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
    d86e:	490c      	ldr	r1, [pc, #48]	; (d8a0 <smpL2cCtrlCback+0x68>)
    d870:	7a1a      	ldrb	r2, [r3, #8]
    d872:	2006      	movs	r0, #6
    d874:	5c8a      	ldrb	r2, [r1, r2]
    d876:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    d878:	f00d fca4 	bl	1b1c4 <L2cDataReq>
 *  \return TRUE if in idle state, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpStateIdle(smpCcb_t *pCcb)
{
  return (pCcb->state == 0);
    d87c:	4444      	add	r4, r8
    d87e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
      if (!smpStateIdle(pCcb))
    d882:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    d886:	b90b      	cbnz	r3, d88c <smpL2cCtrlCback+0x54>
}
    d888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pMsg->event = SMP_MSG_INT_SEND_NEXT_KEY;
    d88c:	230c      	movs	r3, #12
    d88e:	70b3      	strb	r3, [r6, #2]
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
    d890:	4631      	mov	r1, r6
    d892:	4628      	mov	r0, r5
}
    d894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        smpSmExecute(pCcb, (smpMsg_t *) pMsg);
    d898:	f7ff bc02 	b.w	d0a0 <smpSmExecute>
    d89c:	10004118 	.word	0x10004118
    d8a0:	00024724 	.word	0x00024724

0000d8a4 <smpCcbByConnId>:
  return &smpCb.ccb[connId - 1];
    d8a4:	4b03      	ldr	r3, [pc, #12]	; (d8b4 <smpCcbByConnId+0x10>)
    d8a6:	3801      	subs	r0, #1
    d8a8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
    d8ac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    d8b0:	4770      	bx	lr
    d8b2:	bf00      	nop
    d8b4:	10004118 	.word	0x10004118

0000d8b8 <smpCalcC1Part1>:
{
    d8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (pCcb->initiator)
    d8ba:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
    d8be:	4604      	mov	r4, r0
    d8c0:	b089      	sub	sp, #36	; 0x24
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
    d8c2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
    d8c6:	460e      	mov	r6, r1
    d8c8:	4615      	mov	r5, r2
  if (pCcb->initiator)
    d8ca:	b1a3      	cbz	r3, d8f6 <smpCalcC1Part1+0x3e>
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
    d8cc:	f00e fc54 	bl	1c178 <DmConnLocalRpa>
    d8d0:	f005 fd3a 	bl	13348 <BdaIsZeros>
    d8d4:	2800      	cmp	r0, #0
    d8d6:	f040 808a 	bne.w	d9ee <smpCalcC1Part1+0x136>
      iAddrType = DM_ADDR_RANDOM;
    d8da:	2701      	movs	r7, #1
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
    d8dc:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    d8e0:	f00e fc40 	bl	1c164 <DmConnPeerRpa>
    d8e4:	f005 fd30 	bl	13348 <BdaIsZeros>
    d8e8:	b1a0      	cbz	r0, d914 <smpCalcC1Part1+0x5c>
      rAddrType = DmConnPeerAddrType(pCcb->connId);
    d8ea:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    d8ee:	f00e fc11 	bl	1c114 <DmConnPeerAddrType>
    d8f2:	4686      	mov	lr, r0
    d8f4:	e010      	b.n	d918 <smpCalcC1Part1+0x60>
    if (!BdaIsZeros(DmConnPeerRpa(pCcb->connId)))
    d8f6:	f00e fc35 	bl	1c164 <DmConnPeerRpa>
    d8fa:	f005 fd25 	bl	13348 <BdaIsZeros>
    d8fe:	2800      	cmp	r0, #0
    d900:	d162      	bne.n	d9c8 <smpCalcC1Part1+0x110>
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
    d902:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
      iAddrType = DM_ADDR_RANDOM;
    d906:	2701      	movs	r7, #1
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
    d908:	f00e fc36 	bl	1c178 <DmConnLocalRpa>
    d90c:	f005 fd1c 	bl	13348 <BdaIsZeros>
    d910:	2800      	cmp	r0, #0
    d912:	d166      	bne.n	d9e2 <smpCalcC1Part1+0x12a>
      rAddrType = DM_ADDR_RANDOM;
    d914:	f04f 0e01 	mov.w	lr, #1
  *p++ = iAddrType ^ *pRand++;
    d918:	7829      	ldrb	r1, [r5, #0]
  *p++ = rAddrType ^ *pRand++;
    d91a:	786b      	ldrb	r3, [r5, #1]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    d91c:	f8d5 c002 	ldr.w	ip, [r5, #2]
    d920:	6a22      	ldr	r2, [r4, #32]
  *p++ = iAddrType ^ *pRand++;
    d922:	404f      	eors	r7, r1
  *p++ = rAddrType ^ *pRand++;
    d924:	ea8e 0e03 	eor.w	lr, lr, r3
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    d928:	79a9      	ldrb	r1, [r5, #6]
    d92a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  *p++ = iAddrType ^ *pRand++;
    d92e:	f88d 7010 	strb.w	r7, [sp, #16]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    d932:	ea8c 0c02 	eor.w	ip, ip, r2
    d936:	404b      	eors	r3, r1
    d938:	79ea      	ldrb	r2, [r5, #7]
    d93a:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    d93e:	f88d 3016 	strb.w	r3, [sp, #22]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    d942:	4630      	mov	r0, r6
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
    d944:	f8d5 3009 	ldr.w	r3, [r5, #9]
    d948:	f8d4 6027 	ldr.w	r6, [r4, #39]	; 0x27
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    d94c:	7a2f      	ldrb	r7, [r5, #8]
  *p++ = rAddrType ^ *pRand++;
    d94e:	f88d e011 	strb.w	lr, [sp, #17]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    d952:	4051      	eors	r1, r2
    d954:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
    d958:	f894 e02b 	ldrb.w	lr, [r4, #43]	; 0x2b
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    d95c:	f8cd c012 	str.w	ip, [sp, #18]
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
    d960:	4073      	eors	r3, r6
    d962:	7b6e      	ldrb	r6, [r5, #13]
    d964:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
    d968:	f8cd 3019 	str.w	r3, [sp, #25]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    d96c:	407a      	eors	r2, r7
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
    d96e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    d972:	f88d 2018 	strb.w	r2, [sp, #24]
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
    d976:	ea8e 0e06 	eor.w	lr, lr, r6
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    d97a:	4a20      	ldr	r2, [pc, #128]	; (d9fc <smpCalcC1Part1+0x144>)
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
    d97c:	7bae      	ldrb	r6, [r5, #14]
    d97e:	7bed      	ldrb	r5, [r5, #15]
    *p++ = pCcb->pairReq[i] ^ *pRand++;
    d980:	f88d 1017 	strb.w	r1, [sp, #23]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    d984:	210b      	movs	r1, #11
    d986:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
    d98a:	f88d e01d 	strb.w	lr, [sp, #29]
    d98e:	ea8c 0c06 	eor.w	ip, ip, r6
    d992:	405d      	eors	r5, r3
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    d994:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    d998:	9100      	str	r1, [sp, #0]
    d99a:	a904      	add	r1, sp, #16
    *p++ = pCcb->pairRsp[i] ^ *pRand++;
    d99c:	f88d c01e 	strb.w	ip, [sp, #30]
    d9a0:	f88d 501f 	strb.w	r5, [sp, #31]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    d9a4:	f00d f842 	bl	1aa2c <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
    d9a8:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    d9aa:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
    d9ae:	d001      	beq.n	d9b4 <smpCalcC1Part1+0xfc>
}
    d9b0:	b009      	add	sp, #36	; 0x24
    d9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    d9b4:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    d9b8:	a903      	add	r1, sp, #12
    d9ba:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    d9bc:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    d9c0:	f7ff fb6e 	bl	d0a0 <smpSmExecute>
}
    d9c4:	b009      	add	sp, #36	; 0x24
    d9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      iAddrType = DmConnPeerAddrType(pCcb->connId);
    d9c8:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    d9cc:	f00e fba2 	bl	1c114 <DmConnPeerAddrType>
    d9d0:	4607      	mov	r7, r0
    if (!BdaIsZeros(DmConnLocalRpa(pCcb->connId)))
    d9d2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    d9d6:	f00e fbcf 	bl	1c178 <DmConnLocalRpa>
    d9da:	f005 fcb5 	bl	13348 <BdaIsZeros>
    d9de:	2800      	cmp	r0, #0
    d9e0:	d098      	beq.n	d914 <smpCalcC1Part1+0x5c>
      rAddrType = DmConnLocalAddrType(pCcb->connId);
    d9e2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    d9e6:	f00e fba9 	bl	1c13c <DmConnLocalAddrType>
    d9ea:	4686      	mov	lr, r0
    d9ec:	e794      	b.n	d918 <smpCalcC1Part1+0x60>
      iAddrType = DmConnLocalAddrType(pCcb->connId);
    d9ee:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
    d9f2:	f00e fba3 	bl	1c13c <DmConnLocalAddrType>
    d9f6:	4607      	mov	r7, r0
    d9f8:	e770      	b.n	d8dc <smpCalcC1Part1+0x24>
    d9fa:	bf00      	nop
    d9fc:	10004118 	.word	0x10004118

0000da00 <smpCalcC1Part2>:
{
    da00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (pCcb->initiator)
    da04:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
    da08:	4607      	mov	r7, r0
    da0a:	b089      	sub	sp, #36	; 0x24
    pIaddr = DmConnLocalRpa(pCcb->connId);
    da0c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
    da10:	4688      	mov	r8, r1
    da12:	4614      	mov	r4, r2
  if (pCcb->initiator)
    da14:	2b00      	cmp	r3, #0
    da16:	d04c      	beq.n	dab2 <smpCalcC1Part2+0xb2>
    pIaddr = DmConnLocalRpa(pCcb->connId);
    da18:	f00e fbae 	bl	1c178 <DmConnLocalRpa>
    da1c:	4605      	mov	r5, r0
    if (BdaIsZeros(pIaddr))
    da1e:	f005 fc93 	bl	13348 <BdaIsZeros>
    da22:	2800      	cmp	r0, #0
    da24:	f040 80b2 	bne.w	db8c <smpCalcC1Part2+0x18c>
    pRaddr = DmConnPeerRpa(pCcb->connId);
    da28:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    da2c:	f00e fb9a 	bl	1c164 <DmConnPeerRpa>
    da30:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
    da32:	f005 fc89 	bl	13348 <BdaIsZeros>
    da36:	2800      	cmp	r0, #0
    da38:	f040 80b7 	bne.w	dbaa <smpCalcC1Part2+0x1aa>
  for (i = BDA_ADDR_LEN; i > 0; i--)
    da3c:	a904      	add	r1, sp, #16
    da3e:	1c73      	adds	r3, r6, #1
    da40:	1acb      	subs	r3, r1, r3
    da42:	2b02      	cmp	r3, #2
    da44:	d94f      	bls.n	dae6 <smpCalcC1Part2+0xe6>
    *p++ = *pRaddr++ ^ *pPart1++;
    da46:	6830      	ldr	r0, [r6, #0]
    da48:	6823      	ldr	r3, [r4, #0]
    da4a:	7932      	ldrb	r2, [r6, #4]
    da4c:	4058      	eors	r0, r3
    da4e:	9004      	str	r0, [sp, #16]
    da50:	7920      	ldrb	r0, [r4, #4]
    da52:	7973      	ldrb	r3, [r6, #5]
    da54:	4042      	eors	r2, r0
    da56:	7960      	ldrb	r0, [r4, #5]
    da58:	f88d 2014 	strb.w	r2, [sp, #20]
    da5c:	4043      	eors	r3, r0
    da5e:	f88d 3015 	strb.w	r3, [sp, #21]
  for (i = BDA_ADDR_LEN; i > 0; i--)
    da62:	ab08      	add	r3, sp, #32
    da64:	1b5b      	subs	r3, r3, r5
    da66:	3b0b      	subs	r3, #11
    da68:	2b02      	cmp	r3, #2
    da6a:	d965      	bls.n	db38 <smpCalcC1Part2+0x138>
    *p++ = *pIaddr++ ^ *pPart1++;
    da6c:	682b      	ldr	r3, [r5, #0]
    da6e:	f8d4 2006 	ldr.w	r2, [r4, #6]
    da72:	7aa0      	ldrb	r0, [r4, #10]
    da74:	405a      	eors	r2, r3
    da76:	f8cd 2016 	str.w	r2, [sp, #22]
    da7a:	792b      	ldrb	r3, [r5, #4]
    da7c:	7ae2      	ldrb	r2, [r4, #11]
    da7e:	4043      	eors	r3, r0
    da80:	f88d 301a 	strb.w	r3, [sp, #26]
    da84:	796b      	ldrb	r3, [r5, #5]
    da86:	4053      	eors	r3, r2
    da88:	f88d 301b 	strb.w	r3, [sp, #27]
  *p++ = *pPart1++;
    da8c:	68e3      	ldr	r3, [r4, #12]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    da8e:	4a52      	ldr	r2, [pc, #328]	; (dbd8 <smpCalcC1Part2+0x1d8>)
  *p++ = *pPart1++;
    da90:	9307      	str	r3, [sp, #28]
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    da92:	230b      	movs	r3, #11
    da94:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
    da98:	9300      	str	r3, [sp, #0]
    da9a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    da9e:	4640      	mov	r0, r8
    daa0:	f00c ffc4 	bl	1aa2c <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
    daa4:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    daa6:	f887 0041 	strb.w	r0, [r7, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
    daaa:	d064      	beq.n	db76 <smpCalcC1Part2+0x176>
}
    daac:	b009      	add	sp, #36	; 0x24
    daae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pIaddr = DmConnPeerRpa(pCcb->connId);
    dab2:	f00e fb57 	bl	1c164 <DmConnPeerRpa>
    dab6:	4605      	mov	r5, r0
    if (BdaIsZeros(pIaddr))
    dab8:	f005 fc46 	bl	13348 <BdaIsZeros>
    dabc:	2800      	cmp	r0, #0
    dabe:	d17a      	bne.n	dbb6 <smpCalcC1Part2+0x1b6>
    pRaddr = DmConnLocalRpa(pCcb->connId);
    dac0:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    dac4:	f00e fb58 	bl	1c178 <DmConnLocalRpa>
    dac8:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
    daca:	f005 fc3d 	bl	13348 <BdaIsZeros>
    dace:	2800      	cmp	r0, #0
    dad0:	d0b4      	beq.n	da3c <smpCalcC1Part2+0x3c>
      pRaddr = DmConnLocalAddr(pCcb->connId);
    dad2:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    dad6:	f00e fb3b 	bl	1c150 <DmConnLocalAddr>
    dada:	4606      	mov	r6, r0
  for (i = BDA_ADDR_LEN; i > 0; i--)
    dadc:	a904      	add	r1, sp, #16
    dade:	1c73      	adds	r3, r6, #1
    dae0:	1acb      	subs	r3, r1, r3
    dae2:	2b02      	cmp	r3, #2
    dae4:	d8af      	bhi.n	da46 <smpCalcC1Part2+0x46>
    *p++ = *pRaddr++ ^ *pPart1++;
    dae6:	f896 9000 	ldrb.w	r9, [r6]
    daea:	f896 e001 	ldrb.w	lr, [r6, #1]
    daee:	f896 c002 	ldrb.w	ip, [r6, #2]
    daf2:	78f0      	ldrb	r0, [r6, #3]
    daf4:	7932      	ldrb	r2, [r6, #4]
    daf6:	7973      	ldrb	r3, [r6, #5]
    daf8:	7826      	ldrb	r6, [r4, #0]
    dafa:	ea89 0606 	eor.w	r6, r9, r6
    dafe:	f88d 6010 	strb.w	r6, [sp, #16]
    db02:	7866      	ldrb	r6, [r4, #1]
    db04:	ea8e 0606 	eor.w	r6, lr, r6
    db08:	f88d 6011 	strb.w	r6, [sp, #17]
    db0c:	78a6      	ldrb	r6, [r4, #2]
    db0e:	ea8c 0606 	eor.w	r6, ip, r6
    db12:	f88d 6012 	strb.w	r6, [sp, #18]
    db16:	78e6      	ldrb	r6, [r4, #3]
    db18:	4070      	eors	r0, r6
    db1a:	f88d 0013 	strb.w	r0, [sp, #19]
    db1e:	7920      	ldrb	r0, [r4, #4]
    db20:	4042      	eors	r2, r0
    db22:	f88d 2014 	strb.w	r2, [sp, #20]
    db26:	7962      	ldrb	r2, [r4, #5]
    db28:	4053      	eors	r3, r2
    db2a:	f88d 3015 	strb.w	r3, [sp, #21]
  for (i = BDA_ADDR_LEN; i > 0; i--)
    db2e:	ab08      	add	r3, sp, #32
    db30:	1b5b      	subs	r3, r3, r5
    db32:	3b0b      	subs	r3, #11
    db34:	2b02      	cmp	r3, #2
    db36:	d899      	bhi.n	da6c <smpCalcC1Part2+0x6c>
    *p++ = *pIaddr++ ^ *pPart1++;
    db38:	782b      	ldrb	r3, [r5, #0]
    db3a:	79a2      	ldrb	r2, [r4, #6]
    db3c:	4053      	eors	r3, r2
    db3e:	f88d 3016 	strb.w	r3, [sp, #22]
    db42:	786a      	ldrb	r2, [r5, #1]
    db44:	79e3      	ldrb	r3, [r4, #7]
    db46:	4053      	eors	r3, r2
    db48:	f88d 3017 	strb.w	r3, [sp, #23]
    db4c:	78aa      	ldrb	r2, [r5, #2]
    db4e:	7a23      	ldrb	r3, [r4, #8]
    db50:	4053      	eors	r3, r2
    db52:	f88d 3018 	strb.w	r3, [sp, #24]
    db56:	78eb      	ldrb	r3, [r5, #3]
    db58:	7a62      	ldrb	r2, [r4, #9]
    db5a:	4053      	eors	r3, r2
    db5c:	f88d 3019 	strb.w	r3, [sp, #25]
    db60:	792b      	ldrb	r3, [r5, #4]
    db62:	7aa2      	ldrb	r2, [r4, #10]
    db64:	4053      	eors	r3, r2
    db66:	f88d 301a 	strb.w	r3, [sp, #26]
    db6a:	796a      	ldrb	r2, [r5, #5]
    db6c:	7ae3      	ldrb	r3, [r4, #11]
    db6e:	4053      	eors	r3, r2
    db70:	f88d 301b 	strb.w	r3, [sp, #27]
  for (i = BDA_ADDR_LEN; i > 0; i--)
    db74:	e78a      	b.n	da8c <smpCalcC1Part2+0x8c>
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    db76:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    db7a:	a903      	add	r1, sp, #12
    db7c:	4638      	mov	r0, r7
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    db7e:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    db82:	f7ff fa8d 	bl	d0a0 <smpSmExecute>
}
    db86:	b009      	add	sp, #36	; 0x24
    db88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pIaddr = DmConnLocalAddr(pCcb->connId);
    db8c:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    db90:	f00e fade 	bl	1c150 <DmConnLocalAddr>
    db94:	4605      	mov	r5, r0
    pRaddr = DmConnPeerRpa(pCcb->connId);
    db96:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    db9a:	f00e fae3 	bl	1c164 <DmConnPeerRpa>
    db9e:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
    dba0:	f005 fbd2 	bl	13348 <BdaIsZeros>
    dba4:	2800      	cmp	r0, #0
    dba6:	f43f af49 	beq.w	da3c <smpCalcC1Part2+0x3c>
      pRaddr = DmConnPeerAddr(pCcb->connId);
    dbaa:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    dbae:	f00e fabb 	bl	1c128 <DmConnPeerAddr>
    dbb2:	4606      	mov	r6, r0
    dbb4:	e742      	b.n	da3c <smpCalcC1Part2+0x3c>
      pIaddr = DmConnPeerAddr(pCcb->connId);
    dbb6:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    dbba:	f00e fab5 	bl	1c128 <DmConnPeerAddr>
    dbbe:	4605      	mov	r5, r0
    pRaddr = DmConnLocalRpa(pCcb->connId);
    dbc0:	f897 003d 	ldrb.w	r0, [r7, #61]	; 0x3d
    dbc4:	f00e fad8 	bl	1c178 <DmConnLocalRpa>
    dbc8:	4606      	mov	r6, r0
    if (BdaIsZeros(pRaddr))
    dbca:	f005 fbbd 	bl	13348 <BdaIsZeros>
    dbce:	2800      	cmp	r0, #0
    dbd0:	f43f af34 	beq.w	da3c <smpCalcC1Part2+0x3c>
    dbd4:	e77d      	b.n	dad2 <smpCalcC1Part2+0xd2>
    dbd6:	bf00      	nop
    dbd8:	10004118 	.word	0x10004118

0000dbdc <smpCalcS1>:
{
    dbdc:	b570      	push	{r4, r5, r6, lr}
    dbde:	b088      	sub	sp, #32
    dbe0:	4616      	mov	r6, r2
    dbe2:	4604      	mov	r4, r0
    dbe4:	460d      	mov	r5, r1
  Calc128Cpy64(buf, pRand2);
    dbe6:	a804      	add	r0, sp, #16
    dbe8:	4619      	mov	r1, r3
    dbea:	f005 fbc9 	bl	13380 <Calc128Cpy64>
  Calc128Cpy64(&buf[SMP_RAND8_LEN], pRand1);
    dbee:	4631      	mov	r1, r6
    dbf0:	a806      	add	r0, sp, #24
    dbf2:	f005 fbc5 	bl	13380 <Calc128Cpy64>
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    dbf6:	4a0d      	ldr	r2, [pc, #52]	; (dc2c <smpCalcS1+0x50>)
    dbf8:	230b      	movs	r3, #11
    dbfa:	f892 20e0 	ldrb.w	r2, [r2, #224]	; 0xe0
    dbfe:	9300      	str	r3, [sp, #0]
    dc00:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    dc04:	a904      	add	r1, sp, #16
    dc06:	4628      	mov	r0, r5
    dc08:	f00c ff10 	bl	1aa2c <SecAes>
  if (pCcb->token == SEC_TOKEN_INVALID)
    dc0c:	28ff      	cmp	r0, #255	; 0xff
  pCcb->token = SecAes(pKey, buf, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_AES_CMPL);
    dc0e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if (pCcb->token == SEC_TOKEN_INVALID)
    dc12:	d001      	beq.n	dc18 <smpCalcS1+0x3c>
}
    dc14:	b008      	add	sp, #32
    dc16:	bd70      	pop	{r4, r5, r6, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    dc18:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    dc1c:	a903      	add	r1, sp, #12
    dc1e:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    dc20:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    dc24:	f7ff fa3c 	bl	d0a0 <smpSmExecute>
}
    dc28:	b008      	add	sp, #32
    dc2a:	bd70      	pop	{r4, r5, r6, pc}
    dc2c:	10004118 	.word	0x10004118

0000dc30 <smpGenerateLtk>:
{
    dc30:	b570      	push	{r4, r5, r6, lr}
  smpScratch_t *pScr = pCcb->pScr;
    dc32:	6b04      	ldr	r4, [r0, #48]	; 0x30
  p = pScr->keyInd.keyData.ltk.key;
    dc34:	1d26      	adds	r6, r4, #4
  SecRand(p, pScr->keyInd.encKeyLen);
    dc36:	f894 1020 	ldrb.w	r1, [r4, #32]
{
    dc3a:	4605      	mov	r5, r0
  SecRand(p, pScr->keyInd.encKeyLen);
    dc3c:	4630      	mov	r0, r6
    dc3e:	f00d f959 	bl	1aef4 <SecRand>
  p += pScr->keyInd.encKeyLen;
    dc42:	f894 0020 	ldrb.w	r0, [r4, #32]
  memset(p, 0, (SMP_KEY_LEN - pScr->keyInd.encKeyLen));
    dc46:	2100      	movs	r1, #0
    dc48:	f1c0 0210 	rsb	r2, r0, #16
    dc4c:	4430      	add	r0, r6
    dc4e:	f013 fa91 	bl	21174 <memset>
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
    dc52:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    dc56:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
    dc5a:	f8d4 1032 	ldr.w	r1, [r4, #50]	; 0x32
    dc5e:	6161      	str	r1, [r4, #20]
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
    dc60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
    dc64:	f8d4 1036 	ldr.w	r1, [r4, #54]	; 0x36
  BYTES_TO_UINT16(pScr->keyInd.keyData.ltk.ediv, pScr->buf.b4);
    dc68:	83a3      	strh	r3, [r4, #28]
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
    dc6a:	2201      	movs	r2, #1
  memcpy(pScr->keyInd.keyData.ltk.rand, &pScr->buf.b4[2], SMP_RAND8_LEN);
    dc6c:	61a1      	str	r1, [r4, #24]
  pScr->keyInd.type = DM_KEY_LOCAL_LTK;
    dc6e:	77a2      	strb	r2, [r4, #30]
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    dc70:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
    dc74:	f012 0f04 	tst.w	r2, #4
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
    dc78:	f04f 032f 	mov.w	r3, #47	; 0x2f
  pScr->keyInd.secLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    dc7c:	bf14      	ite	ne
    dc7e:	2202      	movne	r2, #2
    dc80:	2201      	moveq	r2, #1
    dc82:	77e2      	strb	r2, [r4, #31]
  pScr->keyInd.hdr.event = DM_SEC_KEY_IND;
    dc84:	70a3      	strb	r3, [r4, #2]
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
    dc86:	4620      	mov	r0, r4
}
    dc88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmSmpCbackExec((dmEvt_t *) &pScr->keyInd);
    dc8c:	f00f bbee 	b.w	1d46c <DmSmpCbackExec>

0000dc90 <smpSendPkt>:
{
    dc90:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->flowDisabled)
    dc92:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
    dc96:	4604      	mov	r4, r0
    dc98:	460d      	mov	r5, r1
  if (pCcb->flowDisabled)
    dc9a:	b153      	cbz	r3, dcb2 <smpSendPkt+0x22>
    if (pCcb->pQueued != NULL)
    dc9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    dc9e:	b133      	cbz	r3, dcae <smpSendPkt+0x1e>
      SMP_TRACE_WARN1("smpSendPkt packet discarded cmd:%d", pCcb->pQueued[L2C_PAYLOAD_START]);
    dca0:	4809      	ldr	r0, [pc, #36]	; (dcc8 <smpSendPkt+0x38>)
    dca2:	7a19      	ldrb	r1, [r3, #8]
    dca4:	f00a fb7c 	bl	183a0 <WsfTrace>
      WsfMsgFree(pCcb->pQueued);
    dca8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    dcaa:	f00a f801 	bl	17cb0 <WsfMsgFree>
    pCcb->pQueued = pPkt;
    dcae:	6365      	str	r5, [r4, #52]	; 0x34
}
    dcb0:	bd70      	pop	{r4, r5, r6, pc}
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
    dcb2:	7a0b      	ldrb	r3, [r1, #8]
    dcb4:	4a05      	ldr	r2, [pc, #20]	; (dccc <smpSendPkt+0x3c>)
    dcb6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    dcb8:	5cd2      	ldrb	r2, [r2, r3]
    dcba:	2006      	movs	r0, #6
    dcbc:	462b      	mov	r3, r5
}
    dcbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L2cDataReq(L2C_CID_SMP, pCcb->handle, smpPktLenTbl[pPkt[L2C_PAYLOAD_START]], pPkt);
    dcc2:	f00d ba7f 	b.w	1b1c4 <L2cDataReq>
    dcc6:	bf00      	nop
    dcc8:	000246e4 	.word	0x000246e4
    dccc:	00024724 	.word	0x00024724

0000dcd0 <smpMsgAlloc>:
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *smpMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
    dcd0:	2100      	movs	r1, #0
    dcd2:	f009 bfdb 	b.w	17c8c <WsfMsgDataAlloc>
    dcd6:	bf00      	nop

0000dcd8 <SmpDmMsgSend>:
 *  \return None.
 */
/*************************************************************************************************/
void SmpDmMsgSend(smpDmMsg_t *pMsg)
{
  WsfMsgSend(smpCb.handlerId, pMsg);
    dcd8:	4b02      	ldr	r3, [pc, #8]	; (dce4 <SmpDmMsgSend+0xc>)
{
    dcda:	4601      	mov	r1, r0
  WsfMsgSend(smpCb.handlerId, pMsg);
    dcdc:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    dce0:	f009 bfea 	b.w	17cb8 <WsfMsgSend>
    dce4:	10004118 	.word	0x10004118

0000dce8 <SmpDmEncryptInd>:
  return &smpCb.ccb[connId - 1];
    dce8:	7803      	ldrb	r3, [r0, #0]
 */
/*************************************************************************************************/
void SmpDmEncryptInd(wsfMsgHdr_t *pMsg)
{
  /* set event to SMP event type */
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
    dcea:	78c1      	ldrb	r1, [r0, #3]

      /* get connection control block */
      pCcb = smpCcbByConnId((dmConnId_t) pMsg->param);

      /* verify connection is open */
      if (pCcb->connId != DM_CONN_ID_NONE)
    dcec:	4a09      	ldr	r2, [pc, #36]	; (dd14 <SmpDmEncryptInd+0x2c>)
  return &smpCb.ccb[connId - 1];
    dcee:	3b01      	subs	r3, #1
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
    dcf0:	2900      	cmp	r1, #0
      if (pCcb->connId != DM_CONN_ID_NONE)
    dcf2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
    dcf6:	bf0c      	ite	eq
    dcf8:	2108      	moveq	r1, #8
    dcfa:	2109      	movne	r1, #9
      if (pCcb->connId != DM_CONN_ID_NONE)
    dcfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  pMsg->event = (pMsg->status == HCI_SUCCESS) ?
    dd00:	7081      	strb	r1, [r0, #2]
      if (pCcb->connId != DM_CONN_ID_NONE)
    dd02:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    dd06:	b11a      	cbz	r2, dd10 <SmpDmEncryptInd+0x28>
            }
        }
        else
        {
          /* send to state machine */
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
    dd08:	4601      	mov	r1, r0
    dd0a:	4618      	mov	r0, r3
    dd0c:	f7ff b9c8 	b.w	d0a0 <smpSmExecute>
}
    dd10:	4770      	bx	lr
    dd12:	bf00      	nop
    dd14:	10004118 	.word	0x10004118

0000dd18 <smpGetScSecLevel>:
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
    dd18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    dd1c:	075b      	lsls	r3, r3, #29
    dd1e:	d50b      	bpl.n	dd38 <smpGetScSecLevel+0x20>
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
    dd20:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    dd24:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
    dd28:	4293      	cmp	r3, r2
    dd2a:	bf28      	it	cs
    dd2c:	4613      	movcs	r3, r2
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
    dd2e:	2b10      	cmp	r3, #16
    dd30:	bf0c      	ite	eq
    dd32:	2003      	moveq	r0, #3
    dd34:	2002      	movne	r0, #2
    dd36:	4770      	bx	lr
    secLevel = DM_SEC_LEVEL_ENC;
    dd38:	2001      	movs	r0, #1
}
    dd3a:	4770      	bx	lr

0000dd3c <SmpDmGetStk>:
{
    dd3c:	b430      	push	{r4, r5}
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
    dd3e:	4b1f      	ldr	r3, [pc, #124]	; (ddbc <SmpDmGetStk+0x80>)
    dd40:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
  return &smpCb.ccb[connId - 1];
    dd44:	3801      	subs	r0, #1
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
    dd46:	b98a      	cbnz	r2, dd6c <SmpDmGetStk+0x30>
    dd48:	00c2      	lsls	r2, r0, #3
  else if (pCcb->pScr != NULL)
    dd4a:	4410      	add	r0, r2
    dd4c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    dd50:	6b18      	ldr	r0, [r3, #48]	; 0x30
    dd52:	b148      	cbz	r0, dd68 <SmpDmGetStk+0x2c>
    *pSecLevel = (pCcb->auth & SMP_AUTH_MITM_FLAG) ? DM_SEC_LEVEL_ENC_AUTH : DM_SEC_LEVEL_ENC;
    dd54:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    dd58:	f012 0f04 	tst.w	r2, #4
    dd5c:	bf14      	ite	ne
    dd5e:	2202      	movne	r2, #2
    dd60:	2201      	moveq	r2, #1
    dd62:	700a      	strb	r2, [r1, #0]
    return pCcb->pScr->buf.b3;
    dd64:	6b18      	ldr	r0, [r3, #48]	; 0x30
    dd66:	3020      	adds	r0, #32
}
    dd68:	bc30      	pop	{r4, r5}
    dd6a:	4770      	bx	lr
  if (smpCb.lescSupported && pCcb->pScCcb->lescEnabled && (pCcb->pScCcb->pLtk != NULL))
    dd6c:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
    dd70:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
    dd74:	00c2      	lsls	r2, r0, #3
    dd76:	f8dc 4044 	ldr.w	r4, [ip, #68]	; 0x44
    dd7a:	7825      	ldrb	r5, [r4, #0]
    dd7c:	2d00      	cmp	r5, #0
    dd7e:	d0e4      	beq.n	dd4a <SmpDmGetStk+0xe>
    dd80:	69a4      	ldr	r4, [r4, #24]
    dd82:	2c00      	cmp	r4, #0
    dd84:	d0e1      	beq.n	dd4a <SmpDmGetStk+0xe>
  if (pCcb->auth & SMP_AUTH_MITM_FLAG)
    dd86:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
    dd8a:	0764      	lsls	r4, r4, #29
    dd8c:	d513      	bpl.n	ddb6 <SmpDmGetStk+0x7a>
    if (WSF_MIN(pCcb->pairReq[SMP_MAXKEY_POS], pCcb->pairRsp[SMP_MAXKEY_POS]) == SMP_KEY_SIZE_MAX)
    dd8e:	f89c 4024 	ldrb.w	r4, [ip, #36]	; 0x24
    dd92:	f89c 502b 	ldrb.w	r5, [ip, #43]	; 0x2b
    dd96:	42ac      	cmp	r4, r5
    dd98:	bf28      	it	cs
    dd9a:	462c      	movcs	r4, r5
      secLevel = DM_SEC_LEVEL_ENC_AUTH;
    dd9c:	2c10      	cmp	r4, #16
    dd9e:	bf0c      	ite	eq
    dda0:	2403      	moveq	r4, #3
    dda2:	2402      	movne	r4, #2
    return pCcb->pScCcb->pLtk->ltk_t;
    dda4:	4410      	add	r0, r2
    dda6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    *pSecLevel = smpGetScSecLevel(pCcb);
    ddaa:	700c      	strb	r4, [r1, #0]
    return pCcb->pScCcb->pLtk->ltk_t;
    ddac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ddae:	6998      	ldr	r0, [r3, #24]
}
    ddb0:	bc30      	pop	{r4, r5}
    return pCcb->pScCcb->pLtk->ltk_t;
    ddb2:	3010      	adds	r0, #16
}
    ddb4:	4770      	bx	lr
    secLevel = DM_SEC_LEVEL_ENC;
    ddb6:	2401      	movs	r4, #1
    ddb8:	e7f4      	b.n	dda4 <SmpDmGetStk+0x68>
    ddba:	bf00      	nop
    ddbc:	10004118 	.word	0x10004118

0000ddc0 <SmpHandlerInit>:
{
    ddc0:	b570      	push	{r4, r5, r6, lr}
  smpCb.handlerId = handlerId;
    ddc2:	4c14      	ldr	r4, [pc, #80]	; (de14 <SmpHandlerInit+0x54>)
{
    ddc4:	4605      	mov	r5, r0
  smpCb.handlerId = handlerId;
    ddc6:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
  SmpDbInit();
    ddca:	f7ff fac3 	bl	d354 <SmpDbInit>
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
    ddce:	2202      	movs	r2, #2
    ddd0:	2601      	movs	r6, #1
    ddd2:	2303      	movs	r3, #3
    ddd4:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
    ddd8:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
    dddc:	490e      	ldr	r1, [pc, #56]	; (de18 <SmpHandlerInit+0x58>)
    ddde:	4a0f      	ldr	r2, [pc, #60]	; (de1c <SmpHandlerInit+0x5c>)
    pCcb->rspTimer.handlerId = handlerId;
    dde0:	7325      	strb	r5, [r4, #12]
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
    dde2:	2006      	movs	r0, #6
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
    dde4:	8126      	strh	r6, [r4, #8]
    pCcb->waitTimer.handlerId = handlerId;
    dde6:	7725      	strb	r5, [r4, #28]
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
    dde8:	8326      	strh	r6, [r4, #24]
    pCcb->rspTimer.handlerId = handlerId;
    ddea:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
    pCcb->waitTimer.handlerId = handlerId;
    ddee:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    pCcb->rspTimer.handlerId = handlerId;
    ddf2:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
    pCcb->rspTimer.msg.param = i + 1;  /* param stores the conn id */
    ddf6:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    pCcb->waitTimer.handlerId = handlerId;
    ddfa:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
    pCcb->waitTimer.msg.param = i + 1;  /* param stores the conn id */
    ddfe:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
  L2cRegister(L2C_CID_SMP, smpL2cDataCback, smpL2cCtrlCback);
    de02:	f00d f9d5 	bl	1b1b0 <L2cRegister>
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
    de06:	4630      	mov	r0, r6
    de08:	4905      	ldr	r1, [pc, #20]	; (de20 <SmpHandlerInit+0x60>)
}
    de0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DmConnRegister(DM_CLIENT_ID_SMP, smpDmConnCback);
    de0e:	f00e b8ad 	b.w	1bf6c <DmConnRegister>
    de12:	bf00      	nop
    de14:	10004118 	.word	0x10004118
    de18:	0000d681 	.word	0x0000d681
    de1c:	0000d839 	.word	0x0000d839
    de20:	0000d721 	.word	0x0000d721

0000de24 <SmpHandler>:
  if (pMsg != NULL)
    de24:	2900      	cmp	r1, #0
    de26:	d046      	beq.n	deb6 <SmpHandler+0x92>
    if (pMsg->event == SMP_DB_SERVICE_IND)
    de28:	788b      	ldrb	r3, [r1, #2]
    de2a:	2b1f      	cmp	r3, #31
    de2c:	d041      	beq.n	deb2 <SmpHandler+0x8e>
{
    de2e:	b510      	push	{r4, lr}
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
    de30:	2b1c      	cmp	r3, #28
{
    de32:	b084      	sub	sp, #16
      if (pMsg->event == SMP_MSG_WSF_CMAC_CMPL)
    de34:	d035      	beq.n	dea2 <SmpHandler+0x7e>
  return &smpCb.ccb[connId - 1];
    de36:	7808      	ldrb	r0, [r1, #0]
    de38:	4b1f      	ldr	r3, [pc, #124]	; (deb8 <SmpHandler+0x94>)
    de3a:	3801      	subs	r0, #1
    de3c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    de40:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (pCcb->connId != DM_CONN_ID_NONE)
    de44:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    de48:	b1cb      	cbz	r3, de7e <SmpHandler+0x5a>
        if (pMsg->event == SMP_MSG_WSF_AES_CMPL && pCcb->token != pMsg->status)
    de4a:	788b      	ldrb	r3, [r1, #2]
    de4c:	2b0b      	cmp	r3, #11
    de4e:	d123      	bne.n	de98 <SmpHandler+0x74>
    de50:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    de54:	78ca      	ldrb	r2, [r1, #3]
    de56:	4293      	cmp	r3, r2
    de58:	d01e      	beq.n	de98 <SmpHandler+0x74>
            wsfHandlerId_t  handlerId = 0;
    de5a:	2400      	movs	r4, #0
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
    de5c:	4817      	ldr	r0, [pc, #92]	; (debc <SmpHandler+0x98>)
            wsfHandlerId_t  handlerId = 0;
    de5e:	f88d 400f 	strb.w	r4, [sp, #15]
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
    de62:	4619      	mov	r1, r3
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
    de64:	4c16      	ldr	r4, [pc, #88]	; (dec0 <SmpHandler+0x9c>)
            SMP_TRACE_WARN2("AES token mismatch: %d %d", pCcb->token, pMsg->status);
    de66:	f00a fa9b 	bl	183a0 <WsfTrace>
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
    de6a:	e001      	b.n	de70 <SmpHandler+0x4c>
                WsfMsgFree(pBuf);
    de6c:	f009 ff20 	bl	17cb0 <WsfMsgFree>
            while((pBuf=WsfMsgDeq(&secCb.aesEncQueue, &handlerId))!=NULL)
    de70:	f10d 010f 	add.w	r1, sp, #15
    de74:	4620      	mov	r0, r4
    de76:	f009 ff37 	bl	17ce8 <WsfMsgDeq>
    de7a:	2800      	cmp	r0, #0
    de7c:	d1f6      	bne.n	de6c <SmpHandler+0x48>
  /* Handle events */
  else if (event)
  {

  }
}
    de7e:	b004      	add	sp, #16
    de80:	bd10      	pop	{r4, pc}
  return &smpCb.ccb[connId - 1];
    de82:	780b      	ldrb	r3, [r1, #0]
      if (pCcb->connId != DM_CONN_ID_NONE)
    de84:	480c      	ldr	r0, [pc, #48]	; (deb8 <SmpHandler+0x94>)
  return &smpCb.ccb[connId - 1];
    de86:	3b01      	subs	r3, #1
      if (pCcb->connId != DM_CONN_ID_NONE)
    de88:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    de8c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    de90:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    de94:	2b00      	cmp	r3, #0
    de96:	d0f2      	beq.n	de7e <SmpHandler+0x5a>
}
    de98:	b004      	add	sp, #16
    de9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          smpSmExecute(pCcb, (smpMsg_t *) pMsg);
    de9e:	f7ff b8ff 	b.w	d0a0 <smpSmExecute>
        if (pCmac->pPlainText)
    dea2:	6888      	ldr	r0, [r1, #8]
    dea4:	2800      	cmp	r0, #0
    dea6:	d0ec      	beq.n	de82 <SmpHandler+0x5e>
    dea8:	9101      	str	r1, [sp, #4]
          WsfBufFree(pCmac->pPlainText);
    deaa:	f009 fec9 	bl	17c40 <WsfBufFree>
    deae:	9901      	ldr	r1, [sp, #4]
    deb0:	e7c1      	b.n	de36 <SmpHandler+0x12>
      SmpDbService();
    deb2:	f7ff baf3 	b.w	d49c <SmpDbService>
    deb6:	4770      	bx	lr
    deb8:	10004118 	.word	0x10004118
    debc:	00024708 	.word	0x00024708
    dec0:	10006f18 	.word	0x10006f18

0000dec4 <smpScCatInitiatorBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatInitiatorBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
    dec4:	b570      	push	{r4, r5, r6, lr}
    dec6:	4606      	mov	r6, r0
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
    dec8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
    decc:	460c      	mov	r4, r1
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
    dece:	f00d ff71 	bl	1bdb4 <dmConnCcbById>

  if (pDmCcb)
    ded2:	b318      	cbz	r0, df1c <smpScCatInitiatorBdAddr+0x58>
  {
    if (pCcb->initiator)
    ded4:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    ded8:	4605      	mov	r5, r0
    deda:	b17b      	cbz	r3, defc <smpScCatInitiatorBdAddr+0x38>
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
    dedc:	f100 061a 	add.w	r6, r0, #26
    dee0:	4630      	mov	r0, r6
    dee2:	f005 fa31 	bl	13348 <BdaIsZeros>
    dee6:	b9d8      	cbnz	r0, df20 <smpScCatInitiatorBdAddr+0x5c>
    else
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
      {
        *pBuf++ = DM_ADDR_RANDOM;
    dee8:	2301      	movs	r3, #1
    deea:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerRpa, BDA_ADDR_LEN);
    deee:	2206      	movs	r2, #6
    def0:	4631      	mov	r1, r6
    def2:	4620      	mov	r0, r4
    def4:	f005 fac8 	bl	13488 <WStrReverseCpy>
        *pBuf++ = pDmCcb->peerAddrType;
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
      }
    }

    pBuf += BDA_ADDR_LEN;
    def8:	1da0      	adds	r0, r4, #6
  }

  return pBuf;
}
    defa:	bd70      	pop	{r4, r5, r6, pc}
      if (!BdaIsZeros(pDmCcb->peerRpa))
    defc:	f100 0620 	add.w	r6, r0, #32
    df00:	4630      	mov	r0, r6
    df02:	f005 fa21 	bl	13348 <BdaIsZeros>
    df06:	2800      	cmp	r0, #0
    df08:	d0ee      	beq.n	dee8 <smpScCatInitiatorBdAddr+0x24>
        *pBuf++ = pDmCcb->peerAddrType;
    df0a:	7ceb      	ldrb	r3, [r5, #19]
    df0c:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
    df10:	2206      	movs	r2, #6
    df12:	4629      	mov	r1, r5
    df14:	4620      	mov	r0, r4
    df16:	f005 fab7 	bl	13488 <WStrReverseCpy>
    df1a:	e7ed      	b.n	def8 <smpScCatInitiatorBdAddr+0x34>
    df1c:	4620      	mov	r0, r4
}
    df1e:	bd70      	pop	{r4, r5, r6, pc}
        *pBuf++ = pDmCcb->localAddrType;
    df20:	7d2b      	ldrb	r3, [r5, #20]
    df22:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
    df26:	2206      	movs	r2, #6
    df28:	18a9      	adds	r1, r5, r2
    df2a:	4620      	mov	r0, r4
    df2c:	f005 faac 	bl	13488 <WStrReverseCpy>
    df30:	e7e2      	b.n	def8 <smpScCatInitiatorBdAddr+0x34>
    df32:	bf00      	nop

0000df34 <smpScCatResponderBdAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static uint8_t *smpScCatResponderBdAddr(smpCcb_t *pCcb, uint8_t *pBuf)
{
    df34:	b570      	push	{r4, r5, r6, lr}
    df36:	4606      	mov	r6, r0
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
    df38:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
{
    df3c:	460c      	mov	r4, r1
  dmConnCcb_t *pDmCcb = dmConnCcbById(pCcb->connId);
    df3e:	f00d ff39 	bl	1bdb4 <dmConnCcbById>

  if (pDmCcb)
    df42:	b318      	cbz	r0, df8c <smpScCatResponderBdAddr+0x58>
  {
    if (pCcb->initiator)
    df44:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    df48:	4605      	mov	r5, r0
    df4a:	b17b      	cbz	r3, df6c <smpScCatResponderBdAddr+0x38>
    {
      /* if peer device's using RPA */
      if (!BdaIsZeros(pDmCcb->peerRpa))
    df4c:	f100 0620 	add.w	r6, r0, #32
    df50:	4630      	mov	r0, r6
    df52:	f005 f9f9 	bl	13348 <BdaIsZeros>
    df56:	b9d8      	cbnz	r0, df90 <smpScCatResponderBdAddr+0x5c>
    else
    {
      /* if local device's using RPA */
      if (!BdaIsZeros(pDmCcb->localRpa))
      {
        *pBuf++ = DM_ADDR_RANDOM;
    df58:	2301      	movs	r3, #1
    df5a:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localRpa, BDA_ADDR_LEN);
    df5e:	2206      	movs	r2, #6
    df60:	4631      	mov	r1, r6
    df62:	4620      	mov	r0, r4
    df64:	f005 fa90 	bl	13488 <WStrReverseCpy>
        *pBuf++ = pDmCcb->localAddrType;
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
      }
    }

    pBuf += BDA_ADDR_LEN;
    df68:	1da0      	adds	r0, r4, #6
  }

  return pBuf;
}
    df6a:	bd70      	pop	{r4, r5, r6, pc}
      if (!BdaIsZeros(pDmCcb->localRpa))
    df6c:	f100 061a 	add.w	r6, r0, #26
    df70:	4630      	mov	r0, r6
    df72:	f005 f9e9 	bl	13348 <BdaIsZeros>
    df76:	2800      	cmp	r0, #0
    df78:	d0ee      	beq.n	df58 <smpScCatResponderBdAddr+0x24>
        *pBuf++ = pDmCcb->localAddrType;
    df7a:	7d2b      	ldrb	r3, [r5, #20]
    df7c:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->localAddr, BDA_ADDR_LEN);
    df80:	2206      	movs	r2, #6
    df82:	18a9      	adds	r1, r5, r2
    df84:	4620      	mov	r0, r4
    df86:	f005 fa7f 	bl	13488 <WStrReverseCpy>
    df8a:	e7ed      	b.n	df68 <smpScCatResponderBdAddr+0x34>
    df8c:	4620      	mov	r0, r4
}
    df8e:	bd70      	pop	{r4, r5, r6, pc}
        *pBuf++ = pDmCcb->peerAddrType;
    df90:	7ceb      	ldrb	r3, [r5, #19]
    df92:	f804 3b01 	strb.w	r3, [r4], #1
        WStrReverseCpy(pBuf, pDmCcb->peerAddr, BDA_ADDR_LEN);
    df96:	2206      	movs	r2, #6
    df98:	4629      	mov	r1, r5
    df9a:	4620      	mov	r0, r4
    df9c:	f005 fa74 	bl	13488 <WStrReverseCpy>
    dfa0:	e7e2      	b.n	df68 <smpScCatResponderBdAddr+0x34>
    dfa2:	bf00      	nop

0000dfa4 <smpScProcPairing>:
 *
 *  \return TRUE on success, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t smpScProcPairing(smpCcb_t *pCcb, uint8_t *pOob, uint8_t *pDisplay)
{
    dfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool_t          justWorks = TRUE;
  uint8_t         localAuth;
  wsfMsgHdr_t     hdr;

  *pDisplay = FALSE;
    dfa6:	2300      	movs	r3, #0
    dfa8:	7013      	strb	r3, [r2, #0]
  *pOob = SMP_OOB_DATA_NONE;
    dfaa:	700b      	strb	r3, [r1, #0]

  /* check for LE Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    dfac:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
{
    dfb0:	4604      	mov	r4, r0
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    dfb2:	f013 0008 	ands.w	r0, r3, #8
{
    dfb6:	b085      	sub	sp, #20
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    dfb8:	d076      	beq.n	e0a8 <smpScProcPairing+0x104>
    dfba:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
    dfbe:	072d      	lsls	r5, r5, #28
    dfc0:	d572      	bpl.n	e0a8 <smpScProcPairing+0x104>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
  {
    /* if one or both devices have OOB authentication data */
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) ||
    dfc2:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
    dfc6:	2d01      	cmp	r5, #1
    dfc8:	f000 80ab 	beq.w	e122 <smpScProcPairing+0x17e>
    dfcc:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
    dfd0:	2d01      	cmp	r5, #1
    dfd2:	f000 80a6 	beq.w	e122 <smpScProcPairing+0x17e>
      justWorks = FALSE;
    }
  }

  /* if OOB authentication data not present and either device has set MITM option */
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
    dfd6:	075d      	lsls	r5, r3, #29
    dfd8:	d56c      	bpl.n	e0b4 <smpScProcPairing+0x110>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
       (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG)))
  {
    /* check for compatible I/O settings */
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
    dfda:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    dfde:	2d03      	cmp	r5, #3
    dfe0:	d06c      	beq.n	e0bc <smpScProcPairing+0x118>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
    dfe2:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    if ((pCcb->pairReq[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* initiator has i/o and */
    dfe6:	2e03      	cmp	r6, #3
    dfe8:	d068      	beq.n	e0bc <smpScProcPairing+0x118>
        (pCcb->pairRsp[SMP_IO_POS] != SMP_IO_NO_IN_NO_OUT) &&     /* responder has i/o and */
    dfea:	2d01      	cmp	r5, #1
    dfec:	f240 80c7 	bls.w	e17e <smpScProcPairing+0x1da>
      justWorks = FALSE;

      /* check if pin should be displayed (as initiator) */
      *pDisplay =
        ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* initiator is display only or */
         (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||   /* initiator is display y/n  or */
    dff0:	2d04      	cmp	r5, #4
    dff2:	f000 8128 	beq.w	e246 <smpScProcPairing+0x2a2>
    dff6:	2300      	movs	r3, #0
    dff8:	4618      	mov	r0, r3
      *pDisplay =
    dffa:	7010      	strb	r0, [r2, #0]
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
           pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP)));

      /* invert display setting if we are not initiator and both are not key only */
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
    dffc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    e000:	2802      	cmp	r0, #2
    e002:	f000 811a 	beq.w	e23a <smpScProcPairing+0x296>
            pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_ONLY))
      {
        *pDisplay ^= !pCcb->initiator;
    e006:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e00a:	2800      	cmp	r0, #0
    e00c:	bf08      	it	eq
    e00e:	f083 0301 	eoreq.w	r3, r3, #1
    e012:	7013      	strb	r3, [r2, #0]
      }
    }
  }

  /* Check for Secure Connections */
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    e014:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
      justWorks = FALSE;
    e018:	2500      	movs	r5, #0
    e01a:	f003 0008 	and.w	r0, r3, #8
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    e01e:	2800      	cmp	r0, #0
    e020:	d04f      	beq.n	e0c2 <smpScProcPairing+0x11e>
      (pCcb->pairRsp[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG))
    e022:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    e026:	0706      	lsls	r6, r0, #28
    e028:	d54b      	bpl.n	e0c2 <smpScProcPairing+0x11e>
  {
    if (smpCb.lescSupported == FALSE)
    e02a:	4e94      	ldr	r6, [pc, #592]	; (e27c <smpScProcPairing+0x2d8>)
    e02c:	f896 60ec 	ldrb.w	r6, [r6, #236]	; 0xec
    e030:	2e00      	cmp	r6, #0
    e032:	d07e      	beq.n	e132 <smpScProcPairing+0x18e>
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
      return FALSE;
    }
    else
    {
      pCcb->pScCcb->lescEnabled = TRUE;
    e034:	6c66      	ldr	r6, [r4, #68]	; 0x44
    e036:	f240 1c01 	movw	ip, #257	; 0x101
    e03a:	f8a6 c000 	strh.w	ip, [r6]
      pCcb->pScCcb->authType = SMP_AUTH_TYPE_JUST_WORKS;
      pCcb->pScCcb->display = *pDisplay;
    e03e:	7812      	ldrb	r2, [r2, #0]
    e040:	7132      	strb	r2, [r6, #4]

      if (*pOob)
    e042:	780a      	ldrb	r2, [r1, #0]
    e044:	2a00      	cmp	r2, #0
    e046:	f000 8088 	beq.w	e15a <smpScProcPairing+0x1b6>
      {
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_OOB;
    e04a:	2302      	movs	r3, #2
    e04c:	7073      	strb	r3, [r6, #1]
        }

      }
    }

    hdr.param = pCcb->connId;
    e04e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e052:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Allocate a scratch pad for Peer Key and CMAC calculations */
    if (SmpScAllocScratchBuffers(pCcb))
    e056:	4620      	mov	r0, r4
    e058:	f000 fc5e 	bl	e918 <SmpScAllocScratchBuffers>
    e05c:	2800      	cmp	r0, #0
    e05e:	f040 8093 	bne.w	e188 <smpScProcPairing+0x1e4>
      hdr.event = SMP_MSG_INT_LESC;
    }
    else
    {
      hdr.status = SMP_ERR_UNSPECIFIED;
      hdr.event = SMP_MSG_API_CANCEL_REQ;
    e062:	f640 0303 	movw	r3, #2051	; 0x803
    e066:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e06a:	a903      	add	r1, sp, #12
    e06c:	4620      	mov	r0, r4
    e06e:	9101      	str	r1, [sp, #4]
    e070:	4e83      	ldr	r6, [pc, #524]	; (e280 <smpScProcPairing+0x2dc>)
    e072:	f7ff f815 	bl	d0a0 <smpSmExecute>
    e076:	9901      	ldr	r1, [sp, #4]
    hdr.param = pCcb->connId;
    hdr.event = SMP_MSG_INT_LEGACY;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
  }

  if (!justWorks)
    e078:	2d00      	cmp	r5, #0
    e07a:	d139      	bne.n	e0f0 <smpScProcPairing+0x14c>
  {
    /* set auth flags with mitm bit set */
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
    e07c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    e080:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
  }

  /* if we ended up with 'just works' but the device configuration requires authentication */
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    e084:	6832      	ldr	r2, [r6, #0]
    pCcb->auth = (pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS]) | SMP_AUTH_MITM_FLAG;
    e086:	4003      	ands	r3, r0
    e088:	f043 0304 	orr.w	r3, r3, #4
    e08c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    return FALSE;
  }

  /* if max encryption key is less than our minimum */
  if (pCcb->pairReq[SMP_MAXKEY_POS] < pSmpCfg->minKeyLen ||
    e090:	7953      	ldrb	r3, [r2, #5]
    e092:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    e096:	429a      	cmp	r2, r3
    e098:	d35a      	bcc.n	e150 <smpScProcPairing+0x1ac>
    e09a:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    e09e:	429a      	cmp	r2, r3
    e0a0:	d356      	bcc.n	e150 <smpScProcPairing+0x1ac>
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    return FALSE;
  }

  return TRUE;
    e0a2:	2001      	movs	r0, #1
}
    e0a4:	b005      	add	sp, #20
    e0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pCcb->pairReq[SMP_OOB_POS] == SMP_OOB_DATA_PRESENT) &&
    e0a8:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
    e0ac:	2d01      	cmp	r5, #1
    e0ae:	d08d      	beq.n	dfcc <smpScProcPairing+0x28>
  if ((*pOob == SMP_OOB_DATA_NONE)                           &&
    e0b0:	075d      	lsls	r5, r3, #29
    e0b2:	d492      	bmi.n	dfda <smpScProcPairing+0x36>
      ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_MITM_FLAG) ||
    e0b4:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
    e0b8:	076f      	lsls	r7, r5, #29
    e0ba:	d48e      	bmi.n	dfda <smpScProcPairing+0x36>
    e0bc:	2501      	movs	r5, #1
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    e0be:	2800      	cmp	r0, #0
    e0c0:	d1af      	bne.n	e022 <smpScProcPairing+0x7e>
  else if ((pSmpCfg->auth & SMP_AUTH_SC_FLAG) != 0)
    e0c2:	4e6f      	ldr	r6, [pc, #444]	; (e280 <smpScProcPairing+0x2dc>)
    e0c4:	6833      	ldr	r3, [r6, #0]
    e0c6:	7a1b      	ldrb	r3, [r3, #8]
    e0c8:	f013 0308 	ands.w	r3, r3, #8
    e0cc:	d131      	bne.n	e132 <smpScProcPairing+0x18e>
    pCcb->pScCcb->lescEnabled = FALSE;
    e0ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e0d0:	7013      	strb	r3, [r2, #0]
    hdr.param = pCcb->connId;
    e0d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    e0d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e0da:	a903      	add	r1, sp, #12
    hdr.event = SMP_MSG_INT_LEGACY;
    e0dc:	2312      	movs	r3, #18
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e0de:	4620      	mov	r0, r4
    e0e0:	9101      	str	r1, [sp, #4]
    hdr.event = SMP_MSG_INT_LEGACY;
    e0e2:	f88d 300e 	strb.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e0e6:	f7fe ffdb 	bl	d0a0 <smpSmExecute>
    e0ea:	9901      	ldr	r1, [sp, #4]
  if (!justWorks)
    e0ec:	2d00      	cmp	r5, #0
    e0ee:	d0c5      	beq.n	e07c <smpScProcPairing+0xd8>
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
    e0f0:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
    e0f4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    e0f8:	6832      	ldr	r2, [r6, #0]
    pCcb->auth = pCcb->pairReq[SMP_AUTHREQ_POS] & pCcb->pairRsp[SMP_AUTHREQ_POS] & ~SMP_AUTH_MITM_FLAG;
    e0fa:	ea05 0003 	and.w	r0, r5, r3
    e0fe:	f020 0004 	bic.w	r0, r0, #4
    e102:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  localAuth = (pCcb->initiator) ? pCcb->pairReq[SMP_AUTHREQ_POS] : pCcb->pairRsp[SMP_AUTHREQ_POS];
    e106:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    e10a:	2800      	cmp	r0, #0
    e10c:	bf18      	it	ne
    e10e:	462b      	movne	r3, r5
  if (justWorks && (pSmpCfg->auth & localAuth & SMP_AUTH_MITM_FLAG))
    e110:	7a10      	ldrb	r0, [r2, #8]
    e112:	4003      	ands	r3, r0
    e114:	075e      	lsls	r6, r3, #29
    e116:	d5bb      	bpl.n	e090 <smpScProcPairing+0xec>
    hdr.param = pCcb->connId;
    e118:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    e11c:	f240 3303 	movw	r3, #771	; 0x303
    e120:	e00c      	b.n	e13c <smpScProcPairing+0x198>
      *pOob = SMP_OOB_DATA_PRESENT;
    e122:	2301      	movs	r3, #1
    e124:	700b      	strb	r3, [r1, #0]
  if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_SC_FLAG) &&
    e126:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    e12a:	2500      	movs	r5, #0
    e12c:	f003 0008 	and.w	r0, r3, #8
    e130:	e775      	b.n	e01e <smpScProcPairing+0x7a>
      hdr.param = pCcb->connId;
    e132:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
      hdr.event = SMP_MSG_API_CANCEL_REQ;
    e136:	f240 3303 	movw	r3, #771	; 0x303
      smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e13a:	a903      	add	r1, sp, #12
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e13c:	4620      	mov	r0, r4
    hdr.param = pCcb->connId;
    e13e:	f8ad 200c 	strh.w	r2, [sp, #12]
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    e142:	f8ad 300e 	strh.w	r3, [sp, #14]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e146:	f7fe ffab 	bl	d0a0 <smpSmExecute>
    return FALSE;
    e14a:	2000      	movs	r0, #0
}
    e14c:	b005      	add	sp, #20
    e14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr.param = pCcb->connId;
    e150:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    e154:	f240 6303 	movw	r3, #1539	; 0x603
    e158:	e7f0      	b.n	e13c <smpScProcPairing+0x198>
      else if (justWorks == FALSE)
    e15a:	2d00      	cmp	r5, #0
    e15c:	d160      	bne.n	e220 <smpScProcPairing+0x27c>
        pCcb->pScCcb->authType = SMP_AUTH_TYPE_PASSKEY;
    e15e:	2203      	movs	r2, #3
    e160:	7072      	strb	r2, [r6, #1]
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
    e162:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    e166:	2a04      	cmp	r2, #4
    e168:	d07b      	beq.n	e262 <smpScProcPairing+0x2be>
              (pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP))) ||
    e16a:	2a01      	cmp	r2, #1
    e16c:	f000 8082 	beq.w	e274 <smpScProcPairing+0x2d0>
        else if ((pCcb->pairReq[SMP_AUTHREQ_POS] & SMP_AUTH_KP_FLAG) &&
    e170:	06db      	lsls	r3, r3, #27
    e172:	d560      	bpl.n	e236 <smpScProcPairing+0x292>
    e174:	06c7      	lsls	r7, r0, #27
    e176:	d55e      	bpl.n	e236 <smpScProcPairing+0x292>
          pCcb->pScCcb->kpNotify = TRUE;
    e178:	2301      	movs	r3, #1
    e17a:	70b3      	strb	r3, [r6, #2]
    e17c:	e767      	b.n	e04e <smpScProcPairing+0xaa>
        !(((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_ONLY) ||     /* both don't have display only */
    e17e:	2e01      	cmp	r6, #1
    e180:	d99c      	bls.n	e0bc <smpScProcPairing+0x118>
    e182:	2301      	movs	r3, #1
    e184:	4618      	mov	r0, r3
    e186:	e738      	b.n	dffa <smpScProcPairing+0x56>
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyX, DmSecGetEccKey()->pubKey_x, SMP_PUB_KEY_LEN);
    e188:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e18a:	68de      	ldr	r6, [r3, #12]
    e18c:	f00f fa0c 	bl	1d5a8 <DmSecGetEccKey>
    e190:	6801      	ldr	r1, [r0, #0]
    e192:	6842      	ldr	r2, [r0, #4]
    e194:	6883      	ldr	r3, [r0, #8]
    e196:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    e19a:	f8c6 c00c 	str.w	ip, [r6, #12]
    e19e:	6031      	str	r1, [r6, #0]
    e1a0:	6072      	str	r2, [r6, #4]
    e1a2:	60b3      	str	r3, [r6, #8]
    e1a4:	6901      	ldr	r1, [r0, #16]
    e1a6:	6942      	ldr	r2, [r0, #20]
    e1a8:	6983      	ldr	r3, [r0, #24]
    e1aa:	f8d0 c01c 	ldr.w	ip, [r0, #28]
    e1ae:	f8c6 c01c 	str.w	ip, [r6, #28]
    e1b2:	6131      	str	r1, [r6, #16]
    e1b4:	6172      	str	r2, [r6, #20]
    e1b6:	61b3      	str	r3, [r6, #24]
      memcpy(pCcb->pScCcb->pLocalPublicKey->pubKeyY, DmSecGetEccKey()->pubKey_y, SMP_PUB_KEY_LEN);
    e1b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e1ba:	68df      	ldr	r7, [r3, #12]
    e1bc:	f00f f9f4 	bl	1d5a8 <DmSecGetEccKey>
    e1c0:	6a06      	ldr	r6, [r0, #32]
    e1c2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e1c4:	6a82      	ldr	r2, [r0, #40]	; 0x28
    e1c6:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
    e1ca:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c
    e1ce:	623e      	str	r6, [r7, #32]
    e1d0:	6279      	str	r1, [r7, #36]	; 0x24
    e1d2:	62ba      	str	r2, [r7, #40]	; 0x28
    e1d4:	6b06      	ldr	r6, [r0, #48]	; 0x30
    e1d6:	6b41      	ldr	r1, [r0, #52]	; 0x34
    e1d8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e1da:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
    e1de:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
    e1e2:	6379      	str	r1, [r7, #52]	; 0x34
    e1e4:	63ba      	str	r2, [r7, #56]	; 0x38
    e1e6:	633e      	str	r6, [r7, #48]	; 0x30
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
    e1e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e1ea:	691e      	ldr	r6, [r3, #16]
    e1ec:	f00f f9dc 	bl	1d5a8 <DmSecGetEccKey>
    e1f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    e1f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e1f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e1f6:	f8d0 c04c 	ldr.w	ip, [r0, #76]	; 0x4c
    e1fa:	f8c6 c00c 	str.w	ip, [r6, #12]
    e1fe:	6031      	str	r1, [r6, #0]
    e200:	6072      	str	r2, [r6, #4]
    e202:	60b3      	str	r3, [r6, #8]
    e204:	6d42      	ldr	r2, [r0, #84]	; 0x54
    e206:	6d01      	ldr	r1, [r0, #80]	; 0x50
    e208:	6d83      	ldr	r3, [r0, #88]	; 0x58
    e20a:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
    e20e:	6172      	str	r2, [r6, #20]
      hdr.event = SMP_MSG_INT_LESC;
    e210:	2211      	movs	r2, #17
      memcpy(pCcb->pScCcb->pPrivateKey, DmSecGetEccKey()->privKey, SMP_PRIVATE_KEY_LEN);
    e212:	f8c6 c01c 	str.w	ip, [r6, #28]
    e216:	6131      	str	r1, [r6, #16]
    e218:	61b3      	str	r3, [r6, #24]
      hdr.event = SMP_MSG_INT_LESC;
    e21a:	f88d 200e 	strb.w	r2, [sp, #14]
    e21e:	e724      	b.n	e06a <smpScProcPairing+0xc6>
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
    e220:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e224:	2b01      	cmp	r3, #1
    e226:	d014      	beq.n	e252 <smpScProcPairing+0x2ae>
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
    e228:	2b03      	cmp	r3, #3
    e22a:	d004      	beq.n	e236 <smpScProcPairing+0x292>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
    e22c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        else if((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_NO_IN_NO_OUT) ||
    e230:	2b03      	cmp	r3, #3
    e232:	f47f af0c 	bne.w	e04e <smpScProcPairing+0xaa>
          justWorks = FALSE;
    e236:	2500      	movs	r5, #0
    e238:	e709      	b.n	e04e <smpScProcPairing+0xaa>
      if (!(pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY &&
    e23a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    e23e:	2802      	cmp	r0, #2
    e240:	f47f aee1 	bne.w	e006 <smpScProcPairing+0x62>
    e244:	e6e6      	b.n	e014 <smpScProcPairing+0x70>
         ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_KEY_DISP) &&     /* initiator is key/display and */
    e246:	2e02      	cmp	r6, #2
    e248:	d09b      	beq.n	e182 <smpScProcPairing+0x1de>
          (pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_ONLY ||      /* responder is key only or key/display */
    e24a:	2e04      	cmp	r6, #4
    e24c:	f47f aed3 	bne.w	dff6 <smpScProcPairing+0x52>
    e250:	e797      	b.n	e182 <smpScProcPairing+0x1de>
            (pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO))
    e252:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        if ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
    e256:	2b01      	cmp	r3, #1
    e258:	d1ea      	bne.n	e230 <smpScProcPairing+0x28c>
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
    e25a:	2304      	movs	r3, #4
    e25c:	7073      	strb	r3, [r6, #1]
          justWorks = FALSE;
    e25e:	4615      	mov	r5, r2
    e260:	e6f5      	b.n	e04e <smpScProcPairing+0xaa>
             ((pCcb->pairReq[SMP_IO_POS] == SMP_IO_DISP_YES_NO) ||
    e262:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
        if (((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_KEY_DISP) &&
    e266:	2a01      	cmp	r2, #1
    e268:	d001      	beq.n	e26e <smpScProcPairing+0x2ca>
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
    e26a:	2a04      	cmp	r2, #4
    e26c:	d180      	bne.n	e170 <smpScProcPairing+0x1cc>
          pCcb->pScCcb->authType = SMP_AUTH_TYPE_NUM_COMP;
    e26e:	2304      	movs	r3, #4
    e270:	7073      	strb	r3, [r6, #1]
    e272:	e6ec      	b.n	e04e <smpScProcPairing+0xaa>
            ((pCcb->pairRsp[SMP_IO_POS] == SMP_IO_DISP_YES_NO) &&
    e274:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    e278:	e7f7      	b.n	e26a <smpScProcPairing+0x2c6>
    e27a:	bf00      	nop
    e27c:	10004118 	.word	0x10004118
    e280:	10002e54 	.word	0x10002e54

0000e284 <smpScAuthReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScAuthReq(smpCcb_t *pCcb, uint8_t oob, uint8_t display)
{
    e284:	b510      	push	{r4, lr}
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  /* if authenticated pairing */
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
    e286:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e288:	781c      	ldrb	r4, [r3, #0]
{
    e28a:	b086      	sub	sp, #24
  if (((!pCcb->pScCcb->lescEnabled) && (pCcb->auth & SMP_AUTH_MITM_FLAG )) ||
    e28c:	b9bc      	cbnz	r4, e2be <smpScAuthReq+0x3a>
    e28e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    e292:	075b      	lsls	r3, r3, #29
    e294:	d416      	bmi.n	e2c4 <smpScAuthReq+0x40>
  }
  else
  {
    /* else use just works; send ourselves a auth rsp with all zero pin */
    buf.authRsp.hdr.param = pCcb->connId;
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
    e296:	2104      	movs	r1, #4
    buf.authRsp.authData[0] = 0;
    e298:	2300      	movs	r3, #0
    buf.authRsp.hdr.param = pCcb->connId;
    e29a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
    buf.authRsp.hdr.event = SMP_MSG_API_AUTH_RSP;
    e29e:	f88d 1002 	strb.w	r1, [sp, #2]
    buf.authRsp.authData[1] = 0;
    buf.authRsp.authData[2] = 0;
    buf.authRsp.authDataLen = SMP_PIN_LEN;
    e2a2:	2203      	movs	r2, #3
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
    e2a4:	4669      	mov	r1, sp
    buf.authRsp.hdr.param = pCcb->connId;
    e2a6:	f8ad 4000 	strh.w	r4, [sp]
    buf.authRsp.authData[0] = 0;
    e2aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf.authRsp.authData[2] = 0;
    e2ae:	f88d 3006 	strb.w	r3, [sp, #6]
    buf.authRsp.authDataLen = SMP_PIN_LEN;
    e2b2:	f88d 2014 	strb.w	r2, [sp, #20]
    smpSmExecute(pCcb, (smpMsg_t *) &buf.authRsp);
    e2b6:	f7fe fef3 	bl	d0a0 <smpSmExecute>
  }
}
    e2ba:	b006      	add	sp, #24
    e2bc:	bd10      	pop	{r4, pc}
      ((pCcb->pScCcb->lescEnabled) && (pCcb->pScCcb->authType == SMP_AUTH_TYPE_OOB)))
    e2be:	785b      	ldrb	r3, [r3, #1]
    e2c0:	2b02      	cmp	r3, #2
    e2c2:	d1e8      	bne.n	e296 <smpScAuthReq+0x12>
    buf.authReq.hdr.param = pCcb->connId;
    e2c4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
    e2c8:	f8ad 4000 	strh.w	r4, [sp]
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
    e2cc:	232e      	movs	r3, #46	; 0x2e
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
    e2ce:	4668      	mov	r0, sp
    buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
    e2d0:	f88d 3002 	strb.w	r3, [sp, #2]
    buf.authReq.oob = oob;
    e2d4:	f88d 1004 	strb.w	r1, [sp, #4]
    buf.authReq.display = display;
    e2d8:	f88d 2005 	strb.w	r2, [sp, #5]
    DmSmpCbackExec((dmEvt_t *) &buf.authReq);
    e2dc:	f00f f8c6 	bl	1d46c <DmSmpCbackExec>
}
    e2e0:	b006      	add	sp, #24
    e2e2:	bd10      	pop	{r4, pc}

0000e2e4 <smpScActCleanup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCleanup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e2e4:	b510      	push	{r4, lr}
    e2e6:	4604      	mov	r4, r0
  smpActCleanup(pCcb, pMsg);
    e2e8:	f7fe fbce 	bl	ca88 <smpActCleanup>

  /* Free scratch buffers */
  SmpScFreeScratchBuffers(pCcb);
    e2ec:	4620      	mov	r0, r4
}
    e2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SmpScFreeScratchBuffers(pCcb);
    e2f2:	f000 bb51 	b.w	e998 <SmpScFreeScratchBuffers>
    e2f6:	bf00      	nop

0000e2f8 <smpScActPairingFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingFailed(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e2f8:	b538      	push	{r3, r4, r5, lr}
    e2fa:	4604      	mov	r4, r0
    e2fc:	460d      	mov	r5, r1
  smpActCleanup(pCcb, pMsg);
    e2fe:	f7fe fbc3 	bl	ca88 <smpActCleanup>
  SmpScFreeScratchBuffers(pCcb);
    e302:	4620      	mov	r0, r4
    e304:	f000 fb48 	bl	e998 <SmpScFreeScratchBuffers>
  /* Perform LESC Cleanup */
  smpScActCleanup(pCcb, pMsg);

  /* Process failure */
  smpActPairingFailed(pCcb, pMsg);
    e308:	4629      	mov	r1, r5
    e30a:	4620      	mov	r0, r4
}
    e30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpActPairingFailed(pCcb, pMsg);
    e310:	f7fe bbea 	b.w	cae8 <smpActPairingFailed>

0000e314 <smpScActPairingCancel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPairingCancel(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e314:	b538      	push	{r3, r4, r5, lr}
    e316:	4604      	mov	r4, r0
    e318:	460d      	mov	r5, r1
  /* send pairing failed packet */
  smpSendPairingFailed(pCcb, pMsg->hdr.status);
    e31a:	78c9      	ldrb	r1, [r1, #3]
    e31c:	f7fe fbd2 	bl	cac4 <smpSendPairingFailed>
  smpActCleanup(pCcb, pMsg);
    e320:	4629      	mov	r1, r5
    e322:	4620      	mov	r0, r4
    e324:	f7fe fbb0 	bl	ca88 <smpActCleanup>
  SmpScFreeScratchBuffers(pCcb);
    e328:	4620      	mov	r0, r4
    e32a:	f000 fb35 	bl	e998 <SmpScFreeScratchBuffers>
  smpActPairingFailed(pCcb, pMsg);
    e32e:	4629      	mov	r1, r5
    e330:	4620      	mov	r0, r4

  smpScActPairingFailed(pCcb, pMsg);
}
    e332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  smpActPairingFailed(pCcb, pMsg);
    e336:	f7fe bbd7 	b.w	cae8 <smpActPairingFailed>
    e33a:	bf00      	nop

0000e33c <smpScActAuthSelect>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActAuthSelect(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e33c:	b530      	push	{r4, r5, lr}
  wsfMsgHdr_t hdr;
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;

  /* Process public key from peer (store in MSB first format) */
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
    e33e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START;
    e340:	684d      	ldr	r5, [r1, #4]
{
    e342:	4604      	mov	r4, r0
    e344:	b083      	sub	sp, #12
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyX, &pPacket[SMP_PUB_KEY_X_POS], SMP_PUB_KEY_LEN);
    e346:	6898      	ldr	r0, [r3, #8]
    e348:	2220      	movs	r2, #32
    e34a:	f105 0109 	add.w	r1, r5, #9
    e34e:	f005 f89b 	bl	13488 <WStrReverseCpy>
  WStrReverseCpy(pCcb->pScCcb->pPeerPublicKey->pubKeyY, &pPacket[SMP_PUB_KEY_Y_POS], SMP_PUB_KEY_LEN);
    e352:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e354:	6898      	ldr	r0, [r3, #8]
    e356:	2220      	movs	r2, #32
    e358:	4410      	add	r0, r2
    e35a:	f105 0129 	add.w	r1, r5, #41	; 0x29
    e35e:	f005 f893 	bl	13488 <WStrReverseCpy>

  /* Message state machine indicating authorization mode (JW, OOB, or passkey) */
  hdr.param = pCcb->connId;
    e362:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d

  switch(pCcb->pScCcb->authType)
    e366:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hdr.param = pCcb->connId;
    e368:	f8ad 2004 	strh.w	r2, [sp, #4]
  switch(pCcb->pScCcb->authType)
    e36c:	785b      	ldrb	r3, [r3, #1]
    e36e:	3b01      	subs	r3, #1
    e370:	2b03      	cmp	r3, #3
    e372:	d81e      	bhi.n	e3b2 <smpScActAuthSelect+0x76>
    e374:	e8df f003 	tbb	[pc, r3]
    e378:	020b1402 	.word	0x020b1402
  {
  case SMP_AUTH_TYPE_NUM_COMP:
  case SMP_AUTH_TYPE_JUST_WORKS:
    hdr.event = SMP_MSG_INT_JW_NC;
    e37c:	2313      	movs	r3, #19
    e37e:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.status = SMP_ERR_UNSPECIFIED;
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    break;
  }

  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e382:	a901      	add	r1, sp, #4
    e384:	4620      	mov	r0, r4
    e386:	f7fe fe8b 	bl	d0a0 <smpSmExecute>
}
    e38a:	b003      	add	sp, #12
    e38c:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_INT_PASSKEY;
    e38e:	2314      	movs	r3, #20
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e390:	a901      	add	r1, sp, #4
    e392:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_INT_PASSKEY;
    e394:	f88d 3006 	strb.w	r3, [sp, #6]
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e398:	f7fe fe82 	bl	d0a0 <smpSmExecute>
}
    e39c:	b003      	add	sp, #12
    e39e:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_INT_OOB;
    e3a0:	2315      	movs	r3, #21
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e3a2:	a901      	add	r1, sp, #4
    e3a4:	4620      	mov	r0, r4
    hdr.event = SMP_MSG_INT_OOB;
    e3a6:	f88d 3006 	strb.w	r3, [sp, #6]
  smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e3aa:	f7fe fe79 	bl	d0a0 <smpSmExecute>
}
    e3ae:	b003      	add	sp, #12
    e3b0:	bd30      	pop	{r4, r5, pc}
    hdr.event = SMP_MSG_API_CANCEL_REQ;
    e3b2:	f640 0303 	movw	r3, #2051	; 0x803
    e3b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    break;
    e3ba:	e7e2      	b.n	e382 <smpScActAuthSelect+0x46>

0000e3bc <smpScActPkSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSetup(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e3bc:	b500      	push	{lr}
  {
    smpDmAuthRsp_t        authRsp;
    dmSecAuthReqIndEvt_t  authReq;
  } buf;

  pCcb->pScCcb->pkPos = 0;
    e3be:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    e3c0:	b087      	sub	sp, #28
  pCcb->pScCcb->pkPos = 0;
    e3c2:	2200      	movs	r2, #0

  /* Next command is the Pair Confirm */
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
    e3c4:	2103      	movs	r1, #3
  pCcb->pScCcb->pkPos = 0;
    e3c6:	70da      	strb	r2, [r3, #3]
  pCcb->nextCmdCode = SMP_CMD_PAIR_CNF;
    e3c8:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f

  /* request pin or oob from user */
  buf.authReq.hdr.param = pCcb->connId;
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
  buf.authReq.oob = FALSE;
    e3cc:	f88d 2004 	strb.w	r2, [sp, #4]
  buf.authReq.hdr.param = pCcb->connId;
    e3d0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  buf.authReq.display = pCcb->pScCcb->display;
    e3d4:	791b      	ldrb	r3, [r3, #4]
  buf.authReq.hdr.param = pCcb->connId;
    e3d6:	f8ad 1000 	strh.w	r1, [sp]
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
    e3da:	222e      	movs	r2, #46	; 0x2e
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
    e3dc:	4668      	mov	r0, sp
  buf.authReq.hdr.event = DM_SEC_AUTH_REQ_IND;
    e3de:	f88d 2002 	strb.w	r2, [sp, #2]
  buf.authReq.display = pCcb->pScCcb->display;
    e3e2:	f88d 3005 	strb.w	r3, [sp, #5]
  DmSmpCbackExec((dmEvt_t *)&buf.authReq);
    e3e6:	f00f f841 	bl	1d46c <DmSmpCbackExec>
}
    e3ea:	b007      	add	sp, #28
    e3ec:	f85d fb04 	ldr.w	pc, [sp], #4

0000e3f0 <smpScActJwncCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e3f0:	b570      	push	{r4, r5, r6, lr}
  /* Cb = f4(PKbx, PKax, Nb, 0x00) where f4(U, V, x, Z) = AES-CMACx (U || V || Z) */
  if (pCcb->initiator)
    e3f2:	f890 603a 	ldrb.w	r6, [r0, #58]	; 0x3a
  {
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
    e3f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    e3f8:	b082      	sub	sp, #8
    e3fa:	4604      	mov	r4, r0
    e3fc:	460d      	mov	r5, r1
  if (pCcb->initiator)
    e3fe:	b1fe      	cbz	r6, e440 <smpScActJwncCalcF4+0x50>
    SMP_TRACE_256("F4 PKb", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
    e400:	6899      	ldr	r1, [r3, #8]
    e402:	481f      	ldr	r0, [pc, #124]	; (e480 <smpScActJwncCalcF4+0x90>)
    e404:	2220      	movs	r2, #32
    e406:	f000 fcb9 	bl	ed7c <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pLocalPublicKey->pubKeyX);
    e40a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e40c:	481d      	ldr	r0, [pc, #116]	; (e484 <smpScActJwncCalcF4+0x94>)
    e40e:	68d9      	ldr	r1, [r3, #12]
    e410:	2220      	movs	r2, #32
    e412:	f000 fcb3 	bl	ed7c <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
    e416:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e418:	481b      	ldr	r0, [pc, #108]	; (e488 <smpScActJwncCalcF4+0x98>)
    e41a:	6959      	ldr	r1, [r3, #20]
    e41c:	2210      	movs	r2, #16
    e41e:	4411      	add	r1, r2
    e420:	f000 fcac 	bl	ed7c <smpLogByteArray>

    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
    e424:	6c60      	ldr	r0, [r4, #68]	; 0x44
    SmpScCalcF4(pCcb, pMsg,
    e426:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
    e42a:	6940      	ldr	r0, [r0, #20]
    e42c:	3010      	adds	r0, #16
    SmpScCalcF4(pCcb, pMsg,
    e42e:	9001      	str	r0, [sp, #4]
    e430:	2000      	movs	r0, #0
    e432:	9000      	str	r0, [sp, #0]
    e434:	4629      	mov	r1, r5
    e436:	4620      	mov	r0, r4
    e438:	f000 fb0a 	bl	ea50 <SmpScCalcF4>
    SmpScCalcF4(pCcb, pMsg,
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
                pCcb->pScCcb->pPeerPublicKey->pubKeyX,
                0, pCcb->pScCcb->pScratch->Nb_Eb);
  }
}
    e43c:	b002      	add	sp, #8
    e43e:	bd70      	pop	{r4, r5, r6, pc}
    SMP_TRACE_256("F4 PKb",  pCcb->pScCcb->pLocalPublicKey->pubKeyX);
    e440:	68d9      	ldr	r1, [r3, #12]
    e442:	480f      	ldr	r0, [pc, #60]	; (e480 <smpScActJwncCalcF4+0x90>)
    e444:	2220      	movs	r2, #32
    e446:	f000 fc99 	bl	ed7c <smpLogByteArray>
    SMP_TRACE_256("F4 PKa", pCcb->pScCcb->pPeerPublicKey->pubKeyX);
    e44a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e44c:	480d      	ldr	r0, [pc, #52]	; (e484 <smpScActJwncCalcF4+0x94>)
    e44e:	6899      	ldr	r1, [r3, #8]
    e450:	2220      	movs	r2, #32
    e452:	f000 fc93 	bl	ed7c <smpLogByteArray>
    SMP_TRACE_128("F4 Nb", pCcb->pScCcb->pScratch->Nb_Eb);
    e456:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e458:	480b      	ldr	r0, [pc, #44]	; (e488 <smpScActJwncCalcF4+0x98>)
    e45a:	6959      	ldr	r1, [r3, #20]
    e45c:	2210      	movs	r2, #16
    e45e:	4411      	add	r1, r2
    e460:	f000 fc8c 	bl	ed7c <smpLogByteArray>
                pCcb->pScCcb->pLocalPublicKey->pubKeyX,
    e464:	6c62      	ldr	r2, [r4, #68]	; 0x44
    SmpScCalcF4(pCcb, pMsg,
    e466:	4620      	mov	r0, r4
                0, pCcb->pScCcb->pScratch->Nb_Eb);
    e468:	6954      	ldr	r4, [r2, #20]
    SmpScCalcF4(pCcb, pMsg,
    e46a:	6893      	ldr	r3, [r2, #8]
    e46c:	68d2      	ldr	r2, [r2, #12]
    e46e:	9600      	str	r6, [sp, #0]
                0, pCcb->pScCcb->pScratch->Nb_Eb);
    e470:	3410      	adds	r4, #16
    SmpScCalcF4(pCcb, pMsg,
    e472:	4629      	mov	r1, r5
    e474:	9401      	str	r4, [sp, #4]
    e476:	f000 faeb 	bl	ea50 <SmpScCalcF4>
}
    e47a:	b002      	add	sp, #8
    e47c:	bd70      	pop	{r4, r5, r6, pc}
    e47e:	bf00      	nop
    e480:	00024734 	.word	0x00024734
    e484:	0002473c 	.word	0x0002473c
    e488:	00024744 	.word	0x00024744

0000e48c <smpScActJwncCalcG2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncCalcG2(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e48c:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pCmacText;

  /* g2(PKax, PKbx, Na, Nb) where g2(U, V, X, Z) = AES-CMACx (U || V || Z) mod 2^32 */
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    e48e:	460a      	mov	r2, r1
{
    e490:	b082      	sub	sp, #8
    e492:	4604      	mov	r4, r0
    e494:	460e      	mov	r6, r1
  if ((pCmacText = SmpScAlloc(SMP_G2_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    e496:	4601      	mov	r1, r0
    e498:	2050      	movs	r0, #80	; 0x50
    e49a:	f000 fac7 	bl	ea2c <SmpScAlloc>
    e49e:	b1d0      	cbz	r0, e4d6 <smpScActJwncCalcG2+0x4a>
  {
    uint8_t *pCatBuf = pCmacText;

    /* Concatinate PKax, PKbx, Nb */
    if (pCcb->initiator)
    e4a0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    e4a4:	4605      	mov	r5, r0
    e4a6:	b9c3      	cbnz	r3, e4da <smpScActJwncCalcG2+0x4e>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    }
    else
    {
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    e4a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e4aa:	2220      	movs	r2, #32
    e4ac:	6899      	ldr	r1, [r3, #8]
    e4ae:	f000 fb45 	bl	eb3c <SmpScCat>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    e4b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e4b4:	2220      	movs	r2, #32
    e4b6:	68d9      	ldr	r1, [r3, #12]
    e4b8:	f000 fb40 	bl	eb3c <SmpScCat>
    }

    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    e4bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e4be:	6959      	ldr	r1, [r3, #20]
    e4c0:	3110      	adds	r1, #16
    e4c2:	f000 fb43 	bl	eb4c <SmpScCat128>

    /* Execute CMAC with Na as the key */
    SmpScCmac(pCcb->pScCcb->pScratch->Na_Ea, pCmacText, SMP_G2_TEXT_LEN, pCcb, pMsg);
    e4c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e4c8:	4623      	mov	r3, r4
    e4ca:	6950      	ldr	r0, [r2, #20]
    e4cc:	9600      	str	r6, [sp, #0]
    e4ce:	2250      	movs	r2, #80	; 0x50
    e4d0:	4629      	mov	r1, r5
    e4d2:	f000 fa89 	bl	e9e8 <SmpScCmac>
  }
}
    e4d6:	b002      	add	sp, #8
    e4d8:	bd70      	pop	{r4, r5, r6, pc}
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    e4da:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e4dc:	2220      	movs	r2, #32
    e4de:	68d9      	ldr	r1, [r3, #12]
    e4e0:	f000 fb2c 	bl	eb3c <SmpScCat>
      pCatBuf = SmpScCat(pCatBuf, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    e4e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e4e6:	2220      	movs	r2, #32
    e4e8:	6899      	ldr	r1, [r3, #8]
    e4ea:	f000 fb27 	bl	eb3c <SmpScCat>
    e4ee:	e7e5      	b.n	e4bc <smpScActJwncCalcG2+0x30>

0000e4f0 <smpScActJwncDisplay>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActJwncDisplay(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e4f0:	b530      	push	{r4, r5, lr}
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
    e4f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e4f4:	785b      	ldrb	r3, [r3, #1]
    e4f6:	2b04      	cmp	r3, #4
{
    e4f8:	b087      	sub	sp, #28
    e4fa:	4604      	mov	r4, r0
  if (pCcb->pScCcb->authType == SMP_AUTH_TYPE_NUM_COMP)
    e4fc:	d00b      	beq.n	e516 <smpScActJwncDisplay+0x26>
  else
  {
    /* Just Works always reports success */
    wsfMsgHdr_t hdr;

    hdr.param = pCcb->connId;
    e4fe:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    e502:	f8ad 2004 	strh.w	r2, [sp, #4]
    hdr.event = SMP_MSG_API_USER_CONFIRM;
    e506:	2316      	movs	r3, #22
    hdr.status = HCI_SUCCESS;
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e508:	a901      	add	r1, sp, #4
    hdr.event = SMP_MSG_API_USER_CONFIRM;
    e50a:	f8ad 3006 	strh.w	r3, [sp, #6]
    smpSmExecute(pCcb, (smpMsg_t *) &hdr);
    e50e:	f7fe fdc7 	bl	d0a0 <smpSmExecute>
  }
}
    e512:	b007      	add	sp, #28
    e514:	bd30      	pop	{r4, r5, pc}
    SMP_TRACE_128("JWNC Display Cnf", pMsg->aes.pCiphertext);
    e516:	460d      	mov	r5, r1
    e518:	2210      	movs	r2, #16
    e51a:	6849      	ldr	r1, [r1, #4]
    e51c:	4809      	ldr	r0, [pc, #36]	; (e544 <smpScActJwncDisplay+0x54>)
    e51e:	f000 fc2d 	bl	ed7c <smpLogByteArray>
    Calc128Cpy(cnfEvt.confirm, pMsg->aes.pCiphertext);
    e522:	6869      	ldr	r1, [r5, #4]
    e524:	a802      	add	r0, sp, #8
    e526:	f004 ff1f 	bl	13368 <Calc128Cpy>
    cnfEvt.hdr.param = pCcb->connId;
    e52a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    e52e:	f8ad 2004 	strh.w	r2, [sp, #4]
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
    e532:	2335      	movs	r3, #53	; 0x35
    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
    e534:	a801      	add	r0, sp, #4
    cnfEvt.hdr.event = DM_SEC_COMPARE_IND;
    e536:	f8ad 3006 	strh.w	r3, [sp, #6]
    DmSmpCbackExec((dmEvt_t *) &cnfEvt);
    e53a:	f00e ff97 	bl	1d46c <DmSmpCbackExec>
}
    e53e:	b007      	add	sp, #28
    e540:	bd30      	pop	{r4, r5, pc}
    e542:	bf00      	nop
    e544:	0002474c 	.word	0x0002474c

0000e548 <smpScActPkKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e548:	b510      	push	{r4, lr}
  uint8_t *pCmd = pMsg->data.pPacket + L2C_PAYLOAD_START;
    e54a:	684c      	ldr	r4, [r1, #4]
  uint8_t *pPacket = pMsg->data.pPacket + L2C_PAYLOAD_START + SMP_HDR_LEN;

  if (*pCmd == SMP_CMD_KEYPRESS)
    e54c:	f894 c008 	ldrb.w	ip, [r4, #8]
    e550:	f1bc 0f0e 	cmp.w	ip, #14
{
    e554:	b082      	sub	sp, #8
  if (*pCmd == SMP_CMD_KEYPRESS)
    e556:	d004      	beq.n	e562 <smpScActPkKeypress+0x1a>
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
    keypressEvt.hdr.status = HCI_SUCCESS;

    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
  }
  else if (*pCmd == SMP_CMD_PAIR_CNF)
    e558:	f1bc 0f03 	cmp.w	ip, #3
    e55c:	d010      	beq.n	e580 <smpScActPkKeypress+0x38>
  }
  else
  {
    /* Unexpected command */
  }
}
    e55e:	b002      	add	sp, #8
    e560:	bd10      	pop	{r4, pc}
    keypressEvt.hdr.param = pCcb->connId;
    e562:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
    keypressEvt.notificationType = *pPacket;
    e566:	7a61      	ldrb	r1, [r4, #9]
    e568:	f88d 1004 	strb.w	r1, [sp, #4]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
    e56c:	2336      	movs	r3, #54	; 0x36
    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
    e56e:	4668      	mov	r0, sp
    keypressEvt.hdr.param = pCcb->connId;
    e570:	f8ad 2000 	strh.w	r2, [sp]
    keypressEvt.hdr.event = DM_SEC_KEYPRESS_IND;
    e574:	f8ad 3002 	strh.w	r3, [sp, #2]
    DmSmpCbackExec((dmEvt_t *) &keypressEvt);
    e578:	f00e ff78 	bl	1d46c <DmSmpCbackExec>
}
    e57c:	b002      	add	sp, #8
    e57e:	bd10      	pop	{r4, pc}
    pMsg->hdr.event = SMP_MSG_EARLY_CNF;
    e580:	221e      	movs	r2, #30
    e582:	804a      	strh	r2, [r1, #2]
}
    e584:	b002      	add	sp, #8
    e586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    smpSmExecute(pCcb, pMsg);
    e58a:	f7fe bd89 	b.w	d0a0 <smpSmExecute>
    e58e:	bf00      	nop

0000e590 <smpScActPkSendKeypress>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActPkSendKeypress(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e590:	b538      	push	{r3, r4, r5, lr}
  /* Send keypress notification to the peer */
  smpDmKeypress_t *pKeypress = (smpDmKeypress_t *) pMsg;
  uint8_t         *pPkt;
  uint8_t         *p;

  if (pCcb->pScCcb->kpNotify)
    e592:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e594:	789b      	ldrb	r3, [r3, #2]
    e596:	b903      	cbnz	r3, e59a <smpScActPkSendKeypress+0xa>
      pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
      smpSmExecute(pCcb, pMsg);
    }
  }
}
    e598:	bd38      	pop	{r3, r4, r5, pc}
    smpStartRspTimer(pCcb);
    e59a:	460d      	mov	r5, r1
    e59c:	4604      	mov	r4, r0
    e59e:	f7fe fa6b 	bl	ca78 <smpStartRspTimer>
    if ((pPkt = smpMsgAlloc(SMP_KEYPRESS_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
    e5a2:	200a      	movs	r0, #10
    e5a4:	f7ff fb94 	bl	dcd0 <smpMsgAlloc>
    e5a8:	4601      	mov	r1, r0
    e5aa:	b140      	cbz	r0, e5be <smpScActPkSendKeypress+0x2e>
      UINT8_TO_BSTREAM(p, SMP_CMD_KEYPRESS);
    e5ac:	230e      	movs	r3, #14
    e5ae:	7203      	strb	r3, [r0, #8]
      *p = pKeypress->keypress;
    e5b0:	792b      	ldrb	r3, [r5, #4]
    e5b2:	7243      	strb	r3, [r0, #9]
      smpSendPkt(pCcb, pPkt);
    e5b4:	4620      	mov	r0, r4
}
    e5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSendPkt(pCcb, pPkt);
    e5ba:	f7ff bb69 	b.w	dc90 <smpSendPkt>
      pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    e5be:	f640 0303 	movw	r3, #2051	; 0x803
    e5c2:	806b      	strh	r3, [r5, #2]
      smpSmExecute(pCcb, pMsg);
    e5c4:	4629      	mov	r1, r5
    e5c6:	4620      	mov	r0, r4
}
    e5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      smpSmExecute(pCcb, pMsg);
    e5cc:	f7fe bd68 	b.w	d0a0 <smpSmExecute>

0000e5d0 <smpScActCalcSharedSecret>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcSharedSecret(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    }
  }
#endif

  /* Use local private key and peer public key to generate the shared secret */
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
    e5d4:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);

  /* Generate the shared secret */
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
    e5d8:	f8df 908c 	ldr.w	r9, [pc, #140]	; e668 <smpScActCalcSharedSecret+0x98>
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
    e5dc:	f8d8 5010 	ldr.w	r5, [r8, #16]
{
    e5e0:	b099      	sub	sp, #100	; 0x64
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
    e5e2:	68aa      	ldr	r2, [r5, #8]
    e5e4:	68eb      	ldr	r3, [r5, #12]
{
    e5e6:	4606      	mov	r6, r0
    e5e8:	460f      	mov	r7, r1
  memcpy(key.privKey,  pCcb->pScCcb->pPrivateKey, SMP_PRIVATE_KEY_LEN);
    e5ea:	6828      	ldr	r0, [r5, #0]
    e5ec:	6869      	ldr	r1, [r5, #4]
    e5ee:	ac10      	add	r4, sp, #64	; 0x40
    e5f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e5f2:	6928      	ldr	r0, [r5, #16]
    e5f4:	6969      	ldr	r1, [r5, #20]
    e5f6:	69aa      	ldr	r2, [r5, #24]
    e5f8:	69eb      	ldr	r3, [r5, #28]
    e5fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy(key.pubKey_x, pCcb->pScCcb->pPeerPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    e5fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
    e600:	6820      	ldr	r0, [r4, #0]
    e602:	6861      	ldr	r1, [r4, #4]
    e604:	68a2      	ldr	r2, [r4, #8]
    e606:	68e3      	ldr	r3, [r4, #12]
    e608:	46ee      	mov	lr, sp
    e60a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    e60e:	6920      	ldr	r0, [r4, #16]
    e610:	6961      	ldr	r1, [r4, #20]
    e612:	69a2      	ldr	r2, [r4, #24]
    e614:	69e3      	ldr	r3, [r4, #28]
    e616:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  memcpy(key.pubKey_y, pCcb->pScCcb->pPeerPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
    e61a:	f8d8 4008 	ldr.w	r4, [r8, #8]
    e61e:	6a20      	ldr	r0, [r4, #32]
    e620:	6a61      	ldr	r1, [r4, #36]	; 0x24
    e622:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e626:	f10d 0c20 	add.w	ip, sp, #32
    e62a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    e62e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    e630:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e632:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e634:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e636:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (SecEccGenSharedSecret(&key, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_ECC_CMPL) == FALSE)
    e63a:	f896 203d 	ldrb.w	r2, [r6, #61]	; 0x3d
    e63e:	f899 10e0 	ldrb.w	r1, [r9, #224]	; 0xe0
    e642:	2319      	movs	r3, #25
    e644:	4668      	mov	r0, sp
    e646:	f001 f847 	bl	f6d8 <SecEccGenSharedSecret>
    e64a:	b110      	cbz	r0, e652 <smpScActCalcSharedSecret+0x82>
  {
    pMsg->hdr.status = SMP_ERR_MEMORY;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    e64c:	b019      	add	sp, #100	; 0x64
    e64e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    e652:	f24e 0303 	movw	r3, #57347	; 0xe003
    e656:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
    e658:	4639      	mov	r1, r7
    e65a:	4630      	mov	r0, r6
    e65c:	f7fe fd20 	bl	d0a0 <smpSmExecute>
}
    e660:	b019      	add	sp, #100	; 0x64
    e662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e666:	bf00      	nop
    e668:	10004118 	.word	0x10004118

0000e66c <smpScActCalcF5TKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5TKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  secEccMsg_t *pSecretMsg = (secEccMsg_t*) pMsg;
  uint8_t *pCmacText;

  if (pMsg->hdr.status == HCI_SUCCESS)
    e670:	78cb      	ldrb	r3, [r1, #3]
{
    e672:	b086      	sub	sp, #24
    e674:	460c      	mov	r4, r1
    e676:	4605      	mov	r5, r0
  if (pMsg->hdr.status == HCI_SUCCESS)
    e678:	bbd3      	cbnz	r3, e6f0 <smpScActCalcF5TKey+0x84>
  {
    /* The shared secret is the DH Key */
    SMP_TRACE_256("DHKey (Shared Secret)", pSecretMsg->data.sharedSecret.secret);
    e67a:	1d0e      	adds	r6, r1, #4
    e67c:	4822      	ldr	r0, [pc, #136]	; (e708 <smpScActCalcF5TKey+0x9c>)
    e67e:	2220      	movs	r2, #32
    e680:	4631      	mov	r1, r6
    e682:	f000 fb7b 	bl	ed7c <smpLogByteArray>

    if ((pCmacText = SmpScAlloc(SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    e686:	4622      	mov	r2, r4
    e688:	4629      	mov	r1, r5
    e68a:	2020      	movs	r0, #32
    e68c:	f000 f9ce 	bl	ea2c <SmpScAlloc>
    e690:	4684      	mov	ip, r0
    e692:	b350      	cbz	r0, e6ea <smpScActCalcF5TKey+0x7e>
    {
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
    e694:	4b1d      	ldr	r3, [pc, #116]	; (e70c <smpScActCalcF5TKey+0xa0>)
                              0x60, 0x37, 0x0B, 0xDB, 0x5A, 0x60, 0x83, 0xBE};

      /* T = AES-CMACsalt (DHKey) */
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
    e696:	f8d4 9004 	ldr.w	r9, [r4, #4]
    e69a:	f8d4 8008 	ldr.w	r8, [r4, #8]
    e69e:	68e7      	ldr	r7, [r4, #12]
    e6a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
      const uint8_t salt[] = {0x6C, 0x88, 0x83, 0x91, 0xAA, 0xF5, 0xA5, 0x38,
    e6a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    e6a6:	f10d 0e08 	add.w	lr, sp, #8
    e6aa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
      memcpy(pCmacText, pSecretMsg->data.sharedSecret.secret, SMP_DHKEY_LEN);
    e6ae:	f8cc 9000 	str.w	r9, [ip]
    e6b2:	f8cc 8004 	str.w	r8, [ip, #4]
    e6b6:	f8cc 7008 	str.w	r7, [ip, #8]
    e6ba:	f8cc a00c 	str.w	sl, [ip, #12]
    e6be:	f8d4 9014 	ldr.w	r9, [r4, #20]
    e6c2:	f8d4 8018 	ldr.w	r8, [r4, #24]
    e6c6:	69e7      	ldr	r7, [r4, #28]
    e6c8:	f8d4 a020 	ldr.w	sl, [r4, #32]
    e6cc:	f8cc a01c 	str.w	sl, [ip, #28]
    e6d0:	f8cc 9010 	str.w	r9, [ip, #16]
    e6d4:	f8cc 8014 	str.w	r8, [ip, #20]
    e6d8:	f8cc 7018 	str.w	r7, [ip, #24]

      /* Execute CMAC with salt as the key */
      SmpScCmac(salt, pCmacText, SMP_F5_TKEY_TEXT_LEN, pCcb, pMsg);
    e6dc:	462b      	mov	r3, r5
    e6de:	4670      	mov	r0, lr
    e6e0:	2220      	movs	r2, #32
    e6e2:	9400      	str	r4, [sp, #0]
    e6e4:	4661      	mov	r1, ip
    e6e6:	f000 f97f 	bl	e9e8 <SmpScCmac>
  else
  {
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
    smpSmExecute(pCcb, pMsg);
  }
}
    e6ea:	b006      	add	sp, #24
    e6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SmpScGetCancelMsgWithReattempt(pCcb->connId, &pMsg->hdr, SMP_ERR_DH_KEY_CHECK);
    e6f0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    e6f4:	220b      	movs	r2, #11
    e6f6:	f000 faeb 	bl	ecd0 <SmpScGetCancelMsgWithReattempt>
    smpSmExecute(pCcb, pMsg);
    e6fa:	4621      	mov	r1, r4
    e6fc:	4628      	mov	r0, r5
}
    e6fe:	b006      	add	sp, #24
    e700:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    smpSmExecute(pCcb, pMsg);
    e704:	f7fe bccc 	b.w	d0a0 <smpSmExecute>
    e708:	00024760 	.word	0x00024760
    e70c:	00024778 	.word	0x00024778

0000e710 <smpScActCalcF5MacKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5MacKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e710:	b570      	push	{r4, r5, r6, lr}
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
  uint8_t *pCmacText;

  /* Copy T from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
    e712:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    e714:	4604      	mov	r4, r0
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
    e716:	6998      	ldr	r0, [r3, #24]
{
    e718:	b082      	sub	sp, #8
    e71a:	460d      	mov	r5, r1
  Calc128Cpy(pCcb->pScCcb->pLtk->ltk_t, pCmac->pCiphertext);
    e71c:	3010      	adds	r0, #16
    e71e:	6849      	ldr	r1, [r1, #4]
    e720:	f004 fe22 	bl	13368 <Calc128Cpy>

  SMP_TRACE_128("T", pCcb->pScCcb->pLtk->ltk_t);
    e724:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e726:	4819      	ldr	r0, [pc, #100]	; (e78c <smpScActCalcF5MacKey+0x7c>)
    e728:	6999      	ldr	r1, [r3, #24]
    e72a:	2210      	movs	r2, #16
    e72c:	4411      	add	r1, r2
    e72e:	f000 fb25 	bl	ed7c <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    e732:	462a      	mov	r2, r5
    e734:	4621      	mov	r1, r4
    e736:	2035      	movs	r0, #53	; 0x35
    e738:	f000 f978 	bl	ea2c <SmpScAlloc>
    e73c:	b318      	cbz	r0, e786 <smpScActCalcF5MacKey+0x76>
  {
    uint8_t *pCatBuf = pCmacText;

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* mackey = AES-CMACT (Counter = 0 || keyID ||N1 || N2|| A1|| A2|| Length = 256) */
    *pCatBuf++ = 0;
    e73e:	2300      	movs	r3, #0
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
    e740:	2204      	movs	r2, #4
    e742:	4606      	mov	r6, r0
    e744:	4912      	ldr	r1, [pc, #72]	; (e790 <smpScActCalcF5MacKey+0x80>)
    *pCatBuf++ = 0;
    e746:	f800 3b01 	strb.w	r3, [r0], #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
    e74a:	f000 f9f7 	bl	eb3c <SmpScCat>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
    e74e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e750:	6959      	ldr	r1, [r3, #20]
    e752:	f000 f9fb 	bl	eb4c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    e756:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e758:	6959      	ldr	r1, [r3, #20]
    e75a:	3110      	adds	r1, #16
    e75c:	f000 f9f6 	bl	eb4c <SmpScCat128>
    e760:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
    e762:	4620      	mov	r0, r4
    e764:	f7ff fbae 	bl	dec4 <smpScCatInitiatorBdAddr>
    e768:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
    e76a:	4620      	mov	r0, r4
    e76c:	f7ff fbe2 	bl	df34 <smpScCatResponderBdAddr>
    *pCatBuf++ = 1;
    e770:	2301      	movs	r3, #1
    e772:	8003      	strh	r3, [r0, #0]
    *pCatBuf++ = 0;

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
    e774:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e776:	6990      	ldr	r0, [r2, #24]
    e778:	9500      	str	r5, [sp, #0]
    e77a:	4623      	mov	r3, r4
    e77c:	2235      	movs	r2, #53	; 0x35
    e77e:	4631      	mov	r1, r6
    e780:	3010      	adds	r0, #16
    e782:	f000 f931 	bl	e9e8 <SmpScCmac>
  }
}
    e786:	b002      	add	sp, #8
    e788:	bd70      	pop	{r4, r5, r6, pc}
    e78a:	bf00      	nop
    e78c:	0002478c 	.word	0x0002478c
    e790:	000247a4 	.word	0x000247a4

0000e794 <smpScActCalcF5Ltk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActCalcF5Ltk(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e794:	b5f0      	push	{r4, r5, r6, r7, lr}
    e796:	4604      	mov	r4, r0
    e798:	b083      	sub	sp, #12
    e79a:	460e      	mov	r6, r1
  secCmacMsg_t *pCmac = (secCmacMsg_t *) pMsg;
  uint8_t *pCmacText;

  SMP_TRACE_128("MAC", pMsg->aes.pCiphertext);
    e79c:	2210      	movs	r2, #16
    e79e:	6849      	ldr	r1, [r1, #4]
    e7a0:	4819      	ldr	r0, [pc, #100]	; (e808 <smpScActCalcF5Ltk+0x74>)
    e7a2:	f000 faeb 	bl	ed7c <smpLogByteArray>

  /* Copy Mac Key from the previous step in the F5 Calculation */
  Calc128Cpy(pCcb->pScCcb->pLtk->mac, pCmac->pCiphertext);
    e7a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e7a8:	6871      	ldr	r1, [r6, #4]
    e7aa:	6998      	ldr	r0, [r3, #24]
    e7ac:	f004 fddc 	bl	13368 <Calc128Cpy>

  if ((pCmacText = SmpScAlloc(SMP_F5_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    e7b0:	4632      	mov	r2, r6
    e7b2:	4621      	mov	r1, r4
    e7b4:	2035      	movs	r0, #53	; 0x35
    e7b6:	f000 f939 	bl	ea2c <SmpScAlloc>
    e7ba:	b310      	cbz	r0, e802 <smpScActCalcF5Ltk+0x6e>
  {
    uint8_t *pCatBuf = pCmacText;

    /* mackey || ltk = f5(W, N1, N2, A1, A2) */
    /* ltk = AES-CMACT (Counter = 1 || keyID || N1 || N2|| A1|| A2 ||Length = 256) */
    *pCatBuf++ = 1;
    e7bc:	2701      	movs	r7, #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
    e7be:	2204      	movs	r2, #4
    e7c0:	4605      	mov	r5, r0
    e7c2:	4912      	ldr	r1, [pc, #72]	; (e80c <smpScActCalcF5Ltk+0x78>)
    *pCatBuf++ = 1;
    e7c4:	f800 7b01 	strb.w	r7, [r0], #1
    pCatBuf = SmpScCat(pCatBuf, smpScF5Key, 4);
    e7c8:	f000 f9b8 	bl	eb3c <SmpScCat>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
    e7cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e7ce:	6959      	ldr	r1, [r3, #20]
    e7d0:	f000 f9bc 	bl	eb4c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    e7d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e7d6:	6959      	ldr	r1, [r3, #20]
    e7d8:	3110      	adds	r1, #16
    e7da:	f000 f9b7 	bl	eb4c <SmpScCat128>
    e7de:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
    e7e0:	4620      	mov	r0, r4
    e7e2:	f7ff fb6f 	bl	dec4 <smpScCatInitiatorBdAddr>
    e7e6:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
    e7e8:	4620      	mov	r0, r4
    e7ea:	f7ff fba3 	bl	df34 <smpScCatResponderBdAddr>
    *pCatBuf++ = 1;
    e7ee:	8007      	strh	r7, [r0, #0]
    *pCatBuf++ = 0;

    /* Execute CMAC with T as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->ltk_t, pCmacText, SMP_F5_TEXT_LEN, pCcb, pMsg);
    e7f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e7f2:	6990      	ldr	r0, [r2, #24]
    e7f4:	9600      	str	r6, [sp, #0]
    e7f6:	4629      	mov	r1, r5
    e7f8:	4623      	mov	r3, r4
    e7fa:	2235      	movs	r2, #53	; 0x35
    e7fc:	3010      	adds	r0, #16
    e7fe:	f000 f8f3 	bl	e9e8 <SmpScCmac>
  }
}
    e802:	b003      	add	sp, #12
    e804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e806:	bf00      	nop
    e808:	00024790 	.word	0x00024790
    e80c:	000247a4 	.word	0x000247a4

0000e810 <smpScActDHKeyCalcF6Ea>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Ea(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e810:	b570      	push	{r4, r5, r6, lr}
    e812:	4604      	mov	r4, r0
    e814:	b082      	sub	sp, #8
    e816:	460d      	mov	r5, r1
  uint8_t *pCmacText;

  SMP_TRACE_128("LTK", pMsg->aes.pCiphertext);
    e818:	481d      	ldr	r0, [pc, #116]	; (e890 <smpScActDHKeyCalcF6Ea+0x80>)
    e81a:	6849      	ldr	r1, [r1, #4]
    e81c:	2210      	movs	r2, #16
    e81e:	f000 faad 	bl	ed7c <smpLogByteArray>

  /* Copy LTK from the previous state (smpScActCalcF5Ltk) */
  WStrReverseCpy(pCcb->pScCcb->pLtk->ltk_t, pMsg->aes.pCiphertext, 16);
    e822:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e824:	6869      	ldr	r1, [r5, #4]
    e826:	6998      	ldr	r0, [r3, #24]
    e828:	2210      	movs	r2, #16
    e82a:	4410      	add	r0, r2
    e82c:	f004 fe2c 	bl	13488 <WStrReverseCpy>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    e830:	462a      	mov	r2, r5
    e832:	4621      	mov	r1, r4
    e834:	2041      	movs	r0, #65	; 0x41
    e836:	f000 f8f9 	bl	ea2c <SmpScAlloc>
    e83a:	b338      	cbz	r0, e88c <smpScActDHKeyCalcF6Ea+0x7c>
  {
    uint8_t *pCatBuf = pCmacText;

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
    e83c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e83e:	6959      	ldr	r1, [r3, #20]
    e840:	4606      	mov	r6, r0
    e842:	f000 f983 	bl	eb4c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    e846:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e848:	6959      	ldr	r1, [r3, #20]
    e84a:	3110      	adds	r1, #16
    e84c:	f000 f97e 	bl	eb4c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Rb);
    e850:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e852:	6959      	ldr	r1, [r3, #20]
    e854:	3130      	adds	r1, #48	; 0x30
    e856:	f000 f979 	bl	eb4c <SmpScCat128>

    *pCatBuf++ = pCcb->pairReq[SMP_AUTHREQ_POS]; /* AuthReq */
    e85a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    e85e:	7003      	strb	r3, [r0, #0]
    *pCatBuf++ = pCcb->pairReq[SMP_OOB_POS]; /* OOB Data Flag */
    e860:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    e864:	7043      	strb	r3, [r0, #1]
    *pCatBuf++ = pCcb->pairReq[SMP_IO_POS]; /* IO Capability Parameter */
    e866:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    e86a:	7083      	strb	r3, [r0, #2]

    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
    e86c:	1cc1      	adds	r1, r0, #3
    e86e:	4620      	mov	r0, r4
    e870:	f7ff fb28 	bl	dec4 <smpScCatInitiatorBdAddr>
    e874:	4601      	mov	r1, r0
    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
    e876:	4620      	mov	r0, r4
    e878:	f7ff fb5c 	bl	df34 <smpScCatResponderBdAddr>

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
    e87c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e87e:	4623      	mov	r3, r4
    e880:	6990      	ldr	r0, [r2, #24]
    e882:	9500      	str	r5, [sp, #0]
    e884:	2241      	movs	r2, #65	; 0x41
    e886:	4631      	mov	r1, r6
    e888:	f000 f8ae 	bl	e9e8 <SmpScCmac>
  }
}
    e88c:	b002      	add	sp, #8
    e88e:	bd70      	pop	{r4, r5, r6, pc}
    e890:	00024794 	.word	0x00024794

0000e894 <smpScActDHKeyCalcF6Eb>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScActDHKeyCalcF6Eb(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e894:	b570      	push	{r4, r5, r6, lr}
  uint8_t *pCmacText;

  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
    e896:	2210      	movs	r2, #16
{
    e898:	b082      	sub	sp, #8
    e89a:	460e      	mov	r6, r1
    e89c:	4604      	mov	r4, r0
  SMP_TRACE_128("DHKey Ea", pMsg->aes.pCiphertext);
    e89e:	6849      	ldr	r1, [r1, #4]
    e8a0:	481c      	ldr	r0, [pc, #112]	; (e914 <smpScActDHKeyCalcF6Eb+0x80>)
    e8a2:	f000 fa6b 	bl	ed7c <smpLogByteArray>

  if ((pCmacText = SmpScAlloc(SMP_F6_TEXT_LEN, pCcb, pMsg)) !=  NULL)
    e8a6:	4632      	mov	r2, r6
    e8a8:	4621      	mov	r1, r4
    e8aa:	2041      	movs	r0, #65	; 0x41
    e8ac:	f000 f8be 	bl	ea2c <SmpScAlloc>
    e8b0:	b338      	cbz	r0, e902 <smpScActDHKeyCalcF6Eb+0x6e>
  {
    uint8_t *pCatBuf = pCmacText;

    /* f6(W, N1, N2, R, IOcap, A1, A2) = AES-CMACW (N1 || N2 || R || IOcap || A1 || A2) */
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Nb_Eb);
    e8b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e8b4:	6959      	ldr	r1, [r3, #20]
    e8b6:	3110      	adds	r1, #16
    e8b8:	4605      	mov	r5, r0
    e8ba:	f000 f947 	bl	eb4c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Na_Ea);
    e8be:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e8c0:	6959      	ldr	r1, [r3, #20]
    e8c2:	f000 f943 	bl	eb4c <SmpScCat128>
    pCatBuf = SmpScCat128(pCatBuf, pCcb->pScCcb->pScratch->Ra);
    e8c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e8c8:	6959      	ldr	r1, [r3, #20]
    e8ca:	3120      	adds	r1, #32
    e8cc:	f000 f93e 	bl	eb4c <SmpScCat128>

    *pCatBuf++ = pCcb->pairRsp[SMP_AUTHREQ_POS]; /* AuthReq */
    e8d0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    e8d4:	7003      	strb	r3, [r0, #0]
    *pCatBuf++ = pCcb->pairRsp[SMP_OOB_POS]; /* OOB Data Flag */
    e8d6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e8da:	7043      	strb	r3, [r0, #1]
    *pCatBuf++ = pCcb->pairRsp[SMP_IO_POS]; /* IO Capability Parameter */
    e8dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e8e0:	7083      	strb	r3, [r0, #2]

    pCatBuf = smpScCatResponderBdAddr(pCcb, pCatBuf);
    e8e2:	1cc1      	adds	r1, r0, #3
    e8e4:	4620      	mov	r0, r4
    e8e6:	f7ff fb25 	bl	df34 <smpScCatResponderBdAddr>
    e8ea:	4601      	mov	r1, r0
    pCatBuf = smpScCatInitiatorBdAddr(pCcb, pCatBuf);
    e8ec:	4620      	mov	r0, r4
    e8ee:	f7ff fae9 	bl	dec4 <smpScCatInitiatorBdAddr>

    /* Execute CMAC with MACKey as the key */
    SmpScCmac(pCcb->pScCcb->pLtk->mac, pCmacText, SMP_F6_TEXT_LEN, pCcb, pMsg);
    e8f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e8f4:	4623      	mov	r3, r4
    e8f6:	6990      	ldr	r0, [r2, #24]
    e8f8:	9600      	str	r6, [sp, #0]
    e8fa:	4629      	mov	r1, r5
    e8fc:	2241      	movs	r2, #65	; 0x41
    e8fe:	f000 f873 	bl	e9e8 <SmpScCmac>
  }

  /* Copy Ea from the previous state (smpScActDHKeyCalcF6Ea) */
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
    e902:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e904:	6871      	ldr	r1, [r6, #4]
    e906:	6958      	ldr	r0, [r3, #20]
}
    e908:	b002      	add	sp, #8
    e90a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Calc128Cpy(pCcb->pScCcb->pScratch->Na_Ea, pMsg->aes.pCiphertext);
    e90e:	f004 bd2b 	b.w	13368 <Calc128Cpy>
    e912:	bf00      	nop
    e914:	00024798 	.word	0x00024798

0000e918 <SmpScAllocScratchBuffers>:
 *
 *  \return TRUE if success, else FALSE.
 */
/*************************************************************************************************/
bool_t SmpScAllocScratchBuffers(smpCcb_t *pCcb)
{
    e918:	b538      	push	{r3, r4, r5, lr}
  if (pCcb->pScCcb->pScratch == NULL)
    e91a:	6c44      	ldr	r4, [r0, #68]	; 0x44
    e91c:	6963      	ldr	r3, [r4, #20]
{
    e91e:	4605      	mov	r5, r0
  if (pCcb->pScCcb->pScratch == NULL)
    e920:	b1db      	cbz	r3, e95a <SmpScAllocScratchBuffers+0x42>
  {
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
  }

  if (pCcb->pScCcb->pPeerPublicKey == NULL)
    e922:	68a3      	ldr	r3, [r4, #8]
    e924:	b30b      	cbz	r3, e96a <SmpScAllocScratchBuffers+0x52>
  {
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
  }

  if (pCcb->pScCcb->pLtk == NULL)
    e926:	69a3      	ldr	r3, [r4, #24]
    e928:	b33b      	cbz	r3, e97a <SmpScAllocScratchBuffers+0x62>
  {
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
  }

  if (pCcb->pScCcb->pLocalPublicKey == NULL)
    e92a:	68e3      	ldr	r3, [r4, #12]
    e92c:	2b00      	cmp	r3, #0
    e92e:	d02c      	beq.n	e98a <SmpScAllocScratchBuffers+0x72>
  {
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
  }

  if (pCcb->pScCcb->pPrivateKey == NULL)
    e930:	6923      	ldr	r3, [r4, #16]
    e932:	b163      	cbz	r3, e94e <SmpScAllocScratchBuffers+0x36>
  {
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
  }

  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
    e934:	6960      	ldr	r0, [r4, #20]
    e936:	b148      	cbz	r0, e94c <SmpScAllocScratchBuffers+0x34>
    e938:	68a0      	ldr	r0, [r4, #8]
    e93a:	b138      	cbz	r0, e94c <SmpScAllocScratchBuffers+0x34>
    e93c:	69a0      	ldr	r0, [r4, #24]
    e93e:	b128      	cbz	r0, e94c <SmpScAllocScratchBuffers+0x34>
    e940:	68e0      	ldr	r0, [r4, #12]
    e942:	b118      	cbz	r0, e94c <SmpScAllocScratchBuffers+0x34>
      pCcb->pScCcb->pLocalPublicKey && pCcb->pScCcb->pPrivateKey)
    e944:	6920      	ldr	r0, [r4, #16]
  {
    return TRUE;
    e946:	3800      	subs	r0, #0
    e948:	bf18      	it	ne
    e94a:	2001      	movne	r0, #1
  }

  return FALSE;
}
    e94c:	bd38      	pop	{r3, r4, r5, pc}
    pCcb->pScCcb->pPrivateKey = WsfBufAlloc(SMP_PRIVATE_KEY_LEN);
    e94e:	2020      	movs	r0, #32
    e950:	f009 f946 	bl	17be0 <WsfBufAlloc>
    e954:	6120      	str	r0, [r4, #16]
  if (pCcb->pScCcb->pScratch && pCcb->pScCcb->pPeerPublicKey && pCcb->pScCcb->pLtk &&
    e956:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    e958:	e7ec      	b.n	e934 <SmpScAllocScratchBuffers+0x1c>
    pCcb->pScCcb->pScratch = WsfBufAlloc(sizeof(smpScScratch_t));
    e95a:	2060      	movs	r0, #96	; 0x60
    e95c:	f009 f940 	bl	17be0 <WsfBufAlloc>
    e960:	6160      	str	r0, [r4, #20]
  if (pCcb->pScCcb->pPeerPublicKey == NULL)
    e962:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    e964:	68a3      	ldr	r3, [r4, #8]
    e966:	2b00      	cmp	r3, #0
    e968:	d1dd      	bne.n	e926 <SmpScAllocScratchBuffers+0xe>
    pCcb->pScCcb->pPeerPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
    e96a:	2040      	movs	r0, #64	; 0x40
    e96c:	f009 f938 	bl	17be0 <WsfBufAlloc>
    e970:	60a0      	str	r0, [r4, #8]
  if (pCcb->pScCcb->pLtk == NULL)
    e972:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    e974:	69a3      	ldr	r3, [r4, #24]
    e976:	2b00      	cmp	r3, #0
    e978:	d1d7      	bne.n	e92a <SmpScAllocScratchBuffers+0x12>
    pCcb->pScCcb->pLtk = WsfBufAlloc(sizeof(smpScLtk_t));
    e97a:	2020      	movs	r0, #32
    e97c:	f009 f930 	bl	17be0 <WsfBufAlloc>
    e980:	61a0      	str	r0, [r4, #24]
  if (pCcb->pScCcb->pLocalPublicKey == NULL)
    e982:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    e984:	68e3      	ldr	r3, [r4, #12]
    e986:	2b00      	cmp	r3, #0
    e988:	d1d2      	bne.n	e930 <SmpScAllocScratchBuffers+0x18>
    pCcb->pScCcb->pLocalPublicKey = WsfBufAlloc(sizeof(smpScPubKey_t));
    e98a:	2040      	movs	r0, #64	; 0x40
    e98c:	f009 f928 	bl	17be0 <WsfBufAlloc>
    e990:	60e0      	str	r0, [r4, #12]
  if (pCcb->pScCcb->pPrivateKey == NULL)
    e992:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    e994:	e7cc      	b.n	e930 <SmpScAllocScratchBuffers+0x18>
    e996:	bf00      	nop

0000e998 <SmpScFreeScratchBuffers>:
 */
/*************************************************************************************************/
void SmpScFreeScratchBuffers(smpCcb_t *pCcb)
{
  /* free scratch buffer */
  if (pCcb->pScCcb->pScratch != NULL)
    e998:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
    e99a:	b510      	push	{r4, lr}
    e99c:	4604      	mov	r4, r0
  if (pCcb->pScCcb->pScratch != NULL)
    e99e:	6958      	ldr	r0, [r3, #20]
    e9a0:	b120      	cbz	r0, e9ac <SmpScFreeScratchBuffers+0x14>
  {
    WsfBufFree(pCcb->pScCcb->pScratch);
    e9a2:	f009 f94d 	bl	17c40 <WsfBufFree>
    pCcb->pScCcb->pScratch = NULL;
    e9a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e9a8:	2200      	movs	r2, #0
    e9aa:	615a      	str	r2, [r3, #20]
  }

  /* free scratch peer public key buffer */
  if (pCcb->pScCcb->pPeerPublicKey != NULL)
    e9ac:	6898      	ldr	r0, [r3, #8]
    e9ae:	b120      	cbz	r0, e9ba <SmpScFreeScratchBuffers+0x22>
  {
    WsfBufFree(pCcb->pScCcb->pPeerPublicKey);
    e9b0:	f009 f946 	bl	17c40 <WsfBufFree>
    pCcb->pScCcb->pPeerPublicKey = NULL;
    e9b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e9b6:	2200      	movs	r2, #0
    e9b8:	609a      	str	r2, [r3, #8]
  }

  /* free scratch LTK buffer */
  if (pCcb->pScCcb->pLtk != NULL)
    e9ba:	6998      	ldr	r0, [r3, #24]
    e9bc:	b120      	cbz	r0, e9c8 <SmpScFreeScratchBuffers+0x30>
  {
    WsfBufFree(pCcb->pScCcb->pLtk);
    e9be:	f009 f93f 	bl	17c40 <WsfBufFree>
    pCcb->pScCcb->pLtk = NULL;
    e9c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e9c4:	2200      	movs	r2, #0
    e9c6:	619a      	str	r2, [r3, #24]
  }

  /* free scratch local public key buffer */
  if (pCcb->pScCcb->pLocalPublicKey != NULL)
    e9c8:	68d8      	ldr	r0, [r3, #12]
    e9ca:	b120      	cbz	r0, e9d6 <SmpScFreeScratchBuffers+0x3e>
  {
    WsfBufFree(pCcb->pScCcb->pLocalPublicKey);
    e9cc:	f009 f938 	bl	17c40 <WsfBufFree>
    pCcb->pScCcb->pLocalPublicKey = NULL;
    e9d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e9d2:	2200      	movs	r2, #0
    e9d4:	60da      	str	r2, [r3, #12]
  }

  /* free scratch private key buffer */
  if (pCcb->pScCcb->pPrivateKey != NULL)
    e9d6:	6918      	ldr	r0, [r3, #16]
    e9d8:	b120      	cbz	r0, e9e4 <SmpScFreeScratchBuffers+0x4c>
  {
    WsfBufFree(pCcb->pScCcb->pPrivateKey);
    e9da:	f009 f931 	bl	17c40 <WsfBufFree>
    pCcb->pScCcb->pPrivateKey = NULL;
    e9de:	6c63      	ldr	r3, [r4, #68]	; 0x44
    e9e0:	2200      	movs	r2, #0
    e9e2:	611a      	str	r2, [r3, #16]
  }
}
    e9e4:	bd10      	pop	{r4, pc}
    e9e6:	bf00      	nop

0000e9e8 <SmpScCmac>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCmac(const uint8_t *pKey, uint8_t *pText, uint8_t textLen, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    e9e8:	b570      	push	{r4, r5, r6, lr}
    e9ea:	461c      	mov	r4, r3
    e9ec:	b082      	sub	sp, #8
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
    e9ee:	4b0e      	ldr	r3, [pc, #56]	; (ea28 <SmpScCmac+0x40>)
    e9f0:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
    e9f4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
    e9f8:	9600      	str	r6, [sp, #0]
    e9fa:	261c      	movs	r6, #28
    e9fc:	9601      	str	r6, [sp, #4]
{
    e9fe:	460d      	mov	r5, r1
    ea00:	9e06      	ldr	r6, [sp, #24]
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
    ea02:	f00c f9bd 	bl	1ad80 <SecCmac>
    ea06:	b108      	cbz	r0, ea0c <SmpScCmac+0x24>
    WsfBufFree(pText);
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    ea08:	b002      	add	sp, #8
    ea0a:	bd70      	pop	{r4, r5, r6, pc}
    WsfBufFree(pText);
    ea0c:	4628      	mov	r0, r5
    ea0e:	f009 f917 	bl	17c40 <WsfBufFree>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    ea12:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
    ea16:	4631      	mov	r1, r6
    ea18:	4620      	mov	r0, r4
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    ea1a:	8073      	strh	r3, [r6, #2]
}
    ea1c:	b002      	add	sp, #8
    ea1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
    ea22:	f7fe bb3d 	b.w	d0a0 <smpSmExecute>
    ea26:	bf00      	nop
    ea28:	10004118 	.word	0x10004118

0000ea2c <SmpScAlloc>:
 *
 *  \return Allocated buffer.
 */
/*************************************************************************************************/
uint8_t *SmpScAlloc(uint8_t size, smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    ea2c:	b570      	push	{r4, r5, r6, lr}
    ea2e:	460e      	mov	r6, r1
    ea30:	4615      	mov	r5, r2
  uint8_t *pBuf = WsfBufAlloc(size);
    ea32:	f009 f8d5 	bl	17be0 <WsfBufAlloc>

  if (pBuf == NULL)
    ea36:	4604      	mov	r4, r0
    ea38:	b108      	cbz	r0, ea3e <SmpScAlloc+0x12>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }

  return pBuf;
}
    ea3a:	4620      	mov	r0, r4
    ea3c:	bd70      	pop	{r4, r5, r6, pc}
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    ea3e:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
    ea42:	4630      	mov	r0, r6
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    ea44:	806b      	strh	r3, [r5, #2]
    smpSmExecute(pCcb, pMsg);
    ea46:	4629      	mov	r1, r5
    ea48:	f7fe fb2a 	bl	d0a0 <smpSmExecute>
}
    ea4c:	4620      	mov	r0, r4
    ea4e:	bd70      	pop	{r4, r5, r6, pc}

0000ea50 <SmpScCalcF4>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SmpScCalcF4(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pU, uint8_t *pV, uint8_t z, uint8_t *pX)
{
    ea50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ea54:	b082      	sub	sp, #8
    ea56:	4607      	mov	r7, r0
  uint8_t *pBuf = WsfBufAlloc(size);
    ea58:	2041      	movs	r0, #65	; 0x41
{
    ea5a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
    ea5e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    ea62:	4688      	mov	r8, r1
    ea64:	4616      	mov	r6, r2
    ea66:	461d      	mov	r5, r3
  uint8_t *pBuf = WsfBufAlloc(size);
    ea68:	f009 f8ba 	bl	17be0 <WsfBufAlloc>
  if (pBuf == NULL)
    ea6c:	b3d0      	cbz	r0, eae4 <SmpScCalcF4+0x94>
  return pBuf;
    ea6e:	4604      	mov	r4, r0
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat(uint8_t *pDst, const uint8_t *pSrc, uint8_t len)
{
  memcpy(pDst, pSrc, len);
    ea70:	6831      	ldr	r1, [r6, #0]
    ea72:	6872      	ldr	r2, [r6, #4]
    ea74:	68b3      	ldr	r3, [r6, #8]
    ea76:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    ea7a:	f8c4 c00c 	str.w	ip, [r4, #12]
    ea7e:	6021      	str	r1, [r4, #0]
    ea80:	6062      	str	r2, [r4, #4]
    ea82:	60a3      	str	r3, [r4, #8]
    ea84:	6931      	ldr	r1, [r6, #16]
    ea86:	6972      	ldr	r2, [r6, #20]
    ea88:	69b3      	ldr	r3, [r6, #24]
    ea8a:	f8d6 c01c 	ldr.w	ip, [r6, #28]
    ea8e:	f8c4 c01c 	str.w	ip, [r4, #28]
    ea92:	6121      	str	r1, [r4, #16]
    ea94:	6162      	str	r2, [r4, #20]
    ea96:	61a3      	str	r3, [r4, #24]
    ea98:	6829      	ldr	r1, [r5, #0]
    ea9a:	686a      	ldr	r2, [r5, #4]
    ea9c:	68ab      	ldr	r3, [r5, #8]
    ea9e:	68ee      	ldr	r6, [r5, #12]
    eaa0:	62e6      	str	r6, [r4, #44]	; 0x2c
    eaa2:	6221      	str	r1, [r4, #32]
    eaa4:	6262      	str	r2, [r4, #36]	; 0x24
    eaa6:	62a3      	str	r3, [r4, #40]	; 0x28
    eaa8:	69ab      	ldr	r3, [r5, #24]
    eaaa:	6929      	ldr	r1, [r5, #16]
    eaac:	696a      	ldr	r2, [r5, #20]
    eaae:	69ee      	ldr	r6, [r5, #28]
    eab0:	63a3      	str	r3, [r4, #56]	; 0x38
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
    eab2:	4b12      	ldr	r3, [pc, #72]	; (eafc <SmpScCalcF4+0xac>)
  memcpy(pDst, pSrc, len);
    eab4:	6321      	str	r1, [r4, #48]	; 0x30
    eab6:	6362      	str	r2, [r4, #52]	; 0x34
    eab8:	63e6      	str	r6, [r4, #60]	; 0x3c
    *pCatBuf = z;
    eaba:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
  if (SecCmac(pKey, pText, textLen, smpCb.handlerId, pCcb->connId, SMP_MSG_WSF_CMAC_CMPL) == FALSE)
    eabe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    eac2:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
    eac6:	9200      	str	r2, [sp, #0]
    eac8:	221c      	movs	r2, #28
    eaca:	9201      	str	r2, [sp, #4]
    eacc:	4650      	mov	r0, sl
    eace:	2241      	movs	r2, #65	; 0x41
    ead0:	4621      	mov	r1, r4
    ead2:	f00c f955 	bl	1ad80 <SecCmac>
    ead6:	b110      	cbz	r0, eade <SmpScCalcF4+0x8e>
}
    ead8:	b002      	add	sp, #8
    eada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    WsfBufFree(pText);
    eade:	4620      	mov	r0, r4
    eae0:	f009 f8ae 	bl	17c40 <WsfBufFree>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    eae4:	f640 0303 	movw	r3, #2051	; 0x803
    smpSmExecute(pCcb, pMsg);
    eae8:	4641      	mov	r1, r8
    eaea:	4638      	mov	r0, r7
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    eaec:	f8a8 3002 	strh.w	r3, [r8, #2]
}
    eaf0:	b002      	add	sp, #8
    eaf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    smpSmExecute(pCcb, pMsg);
    eaf6:	f7fe bad3 	b.w	d0a0 <smpSmExecute>
    eafa:	bf00      	nop
    eafc:	10004118 	.word	0x10004118

0000eb00 <SmpScInit>:
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
    eb00:	4a0a      	ldr	r2, [pc, #40]	; (eb2c <SmpScInit+0x2c>)
    eb02:	4b0b      	ldr	r3, [pc, #44]	; (eb30 <SmpScInit+0x30>)
  smpCb.procAuthReq = smpScAuthReq;
    eb04:	480b      	ldr	r0, [pc, #44]	; (eb34 <SmpScInit+0x34>)
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
    eb06:	f102 011c 	add.w	r1, r2, #28
{
    eb0a:	b410      	push	{r4}
  smpCb.procPairing = smpScProcPairing;
    eb0c:	4c0a      	ldr	r4, [pc, #40]	; (eb38 <SmpScInit+0x38>)
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
    eb0e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  smpCb.lescSupported = TRUE;
    eb12:	2101      	movs	r1, #1
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
    eb14:	645a      	str	r2, [r3, #68]	; 0x44
  smpCb.lescSupported = TRUE;
    eb16:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
    eb1a:	3238      	adds	r2, #56	; 0x38
  smpCb.procAuthReq = smpScAuthReq;
    eb1c:	e9c3 4039 	strd	r4, r0, [r3, #228]	; 0xe4
    smpCb.ccb[i].pScCcb = &SMP_ScCcb[i];
    eb20:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
    eb24:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb28:	4770      	bx	lr
    eb2a:	bf00      	nop
    eb2c:	10004208 	.word	0x10004208
    eb30:	10004118 	.word	0x10004118
    eb34:	0000e285 	.word	0x0000e285
    eb38:	0000dfa5 	.word	0x0000dfa5

0000eb3c <SmpScCat>:
{
    eb3c:	b538      	push	{r3, r4, r5, lr}
    eb3e:	4605      	mov	r5, r0
    eb40:	4614      	mov	r4, r2
  memcpy(pDst, pSrc, len);
    eb42:	f7fd fadd 	bl	c100 <memcpy>
  return pDst + len;
}
    eb46:	1928      	adds	r0, r5, r4
    eb48:	bd38      	pop	{r3, r4, r5, pc}
    eb4a:	bf00      	nop

0000eb4c <SmpScCat128>:
 *
 *  \return Pointer to next byte after concatination.
 */
/*************************************************************************************************/
uint8_t *SmpScCat128(uint8_t *pDst, uint8_t *pSrc)
{
    eb4c:	b510      	push	{r4, lr}
    eb4e:	4604      	mov	r4, r0
  Calc128Cpy(pDst, pSrc);
    eb50:	f004 fc0a 	bl	13368 <Calc128Cpy>
  return pDst + 16;
}
    eb54:	f104 0010 	add.w	r0, r4, #16
    eb58:	bd10      	pop	{r4, pc}
    eb5a:	bf00      	nop

0000eb5c <smpScSendPubKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPubKey(smpCcb_t *pCcb, smpMsg_t *pMsg)
{
    eb5c:	b570      	push	{r4, r5, r6, lr}
  /* Transmit the public key */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    eb5e:	2201      	movs	r2, #1
{
    eb60:	4604      	mov	r4, r0
    eb62:	460e      	mov	r6, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    eb64:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    eb68:	4611      	mov	r1, r2
    eb6a:	f00d fb19 	bl	1c1a0 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    eb6e:	4620      	mov	r0, r4
    eb70:	f7fd ff82 	bl	ca78 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PUB_KEY_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
    eb74:	2049      	movs	r0, #73	; 0x49
    eb76:	f7ff f8ab 	bl	dcd0 <smpMsgAlloc>
    eb7a:	b1b0      	cbz	r0, ebaa <smpScSendPubKey+0x4e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PUBLIC_KEY);
    eb7c:	230c      	movs	r3, #12
    eb7e:	7203      	strb	r3, [r0, #8]

    /* Store Public Key X data in LSB first format */
    WStrReverseCpy(p,  pCcb->pScCcb->pLocalPublicKey->pubKeyX, SMP_PUB_KEY_LEN);
    eb80:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eb82:	4605      	mov	r5, r0
    eb84:	68d9      	ldr	r1, [r3, #12]
    eb86:	2220      	movs	r2, #32
    eb88:	3009      	adds	r0, #9
    eb8a:	f004 fc7d 	bl	13488 <WStrReverseCpy>

    /* Store Public Key Y data in LSB first format */
    WStrReverseCpy(p+SMP_PUB_KEY_LEN, pCcb->pScCcb->pLocalPublicKey->pubKeyY, SMP_PUB_KEY_LEN);
    eb8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eb90:	68d9      	ldr	r1, [r3, #12]
    eb92:	2220      	movs	r2, #32
    eb94:	f105 0029 	add.w	r0, r5, #41	; 0x29
    eb98:	4411      	add	r1, r2
    eb9a:	f004 fc75 	bl	13488 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    eb9e:	4629      	mov	r1, r5
    eba0:	4620      	mov	r0, r4
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    eba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSendPkt(pCcb, pPkt);
    eba6:	f7ff b873 	b.w	dc90 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    ebaa:	f640 0303 	movw	r3, #2051	; 0x803
    ebae:	8073      	strh	r3, [r6, #2]
    smpSmExecute(pCcb, pMsg);
    ebb0:	4631      	mov	r1, r6
    ebb2:	4620      	mov	r0, r4
}
    ebb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    smpSmExecute(pCcb, pMsg);
    ebb8:	f7fe ba72 	b.w	d0a0 <smpSmExecute>

0000ebbc <smpScSendDHKeyCheck>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendDHKeyCheck(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCheck)
{
    ebbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebbe:	4616      	mov	r6, r2
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    ebc0:	2201      	movs	r2, #1
{
    ebc2:	4605      	mov	r5, r0
    ebc4:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    ebc6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    ebca:	4611      	mov	r1, r2
    ebcc:	f00d fae8 	bl	1c1a0 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    ebd0:	4628      	mov	r0, r5
    ebd2:	f7fd ff51 	bl	ca78 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_DHKEY_CHECK_MSG_LEN + L2C_PAYLOAD_START)) != NULL)
    ebd6:	2019      	movs	r0, #25
    ebd8:	f7ff f87a 	bl	dcd0 <smpMsgAlloc>
    ebdc:	b168      	cbz	r0, ebfa <smpScSendDHKeyCheck+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_DHKEY_CHECK);
    ebde:	230d      	movs	r3, #13
    ebe0:	7203      	strb	r3, [r0, #8]

    /* DH Key Check data is result of last CMAC operation (LSB first) */
    WStrReverseCpy(p, pCheck, SMP_DHKEY_CHECK_LEN);
    ebe2:	4604      	mov	r4, r0
    ebe4:	4631      	mov	r1, r6
    ebe6:	3009      	adds	r0, #9
    ebe8:	2210      	movs	r2, #16
    ebea:	f004 fc4d 	bl	13488 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    ebee:	4621      	mov	r1, r4
    ebf0:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    ebf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
    ebf6:	f7ff b84b 	b.w	dc90 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    ebfa:	f640 0303 	movw	r3, #2051	; 0x803
    ebfe:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
    ec00:	4639      	mov	r1, r7
    ec02:	4628      	mov	r0, r5
}
    ec04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
    ec08:	f7fe ba4a 	b.w	d0a0 <smpSmExecute>

0000ec0c <smpScSendRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendRand(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pRand)
{
    ec0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec0e:	4616      	mov	r6, r2
  /* Transmit the Pair Rand */
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    ec10:	2201      	movs	r2, #1
{
    ec12:	4605      	mov	r5, r0
    ec14:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    ec16:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    ec1a:	4611      	mov	r1, r2
    ec1c:	f00d fac0 	bl	1c1a0 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    ec20:	4628      	mov	r0, r5
    ec22:	f7fd ff29 	bl	ca78 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_RAND_LEN + L2C_PAYLOAD_START)) != NULL)
    ec26:	2019      	movs	r0, #25
    ec28:	f7ff f852 	bl	dcd0 <smpMsgAlloc>
    ec2c:	b168      	cbz	r0, ec4a <smpScSendRand+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_RAND);
    ec2e:	2304      	movs	r3, #4
    ec30:	7203      	strb	r3, [r0, #8]

    /* Store Random data (LSB first) */
    WStrReverseCpy(p, pRand, SMP_RAND_LEN);
    ec32:	4604      	mov	r4, r0
    ec34:	4631      	mov	r1, r6
    ec36:	3009      	adds	r0, #9
    ec38:	2210      	movs	r2, #16
    ec3a:	f004 fc25 	bl	13488 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    ec3e:	4621      	mov	r1, r4
    ec40:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    ec42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
    ec46:	f7ff b823 	b.w	dc90 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    ec4a:	f640 0303 	movw	r3, #2051	; 0x803
    ec4e:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
    ec50:	4639      	mov	r1, r7
    ec52:	4628      	mov	r0, r5
}
    ec54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
    ec58:	f7fe ba22 	b.w	d0a0 <smpSmExecute>

0000ec5c <smpScSendPairCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpScSendPairCnf(smpCcb_t *pCcb, smpMsg_t *pMsg, uint8_t *pCnf)
{
    ec5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ec5e:	4616      	mov	r6, r2
  uint8_t   *pPkt;
  uint8_t   *p;

  /* set connection busy */
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    ec60:	2201      	movs	r2, #1
{
    ec62:	4605      	mov	r5, r0
    ec64:	460f      	mov	r7, r1
  DmConnSetIdle(pCcb->connId, DM_IDLE_SMP_PAIR, DM_CONN_BUSY);
    ec66:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
    ec6a:	4611      	mov	r1, r2
    ec6c:	f00d fa98 	bl	1c1a0 <DmConnSetIdle>

  /* start smp response timer */
  smpStartRspTimer(pCcb);
    ec70:	4628      	mov	r0, r5
    ec72:	f7fd ff01 	bl	ca78 <smpStartRspTimer>

  /* allocate packet buffer */
  if ((pPkt = smpMsgAlloc(SMP_PAIR_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
    ec76:	2019      	movs	r0, #25
    ec78:	f7ff f82a 	bl	dcd0 <smpMsgAlloc>
    ec7c:	b168      	cbz	r0, ec9a <smpScSendPairCnf+0x3e>
  {
    /* build packet */
    p = pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, SMP_CMD_PAIR_CNF);
    ec7e:	2303      	movs	r3, #3
    ec80:	7203      	strb	r3, [r0, #8]

    /* Store Confirm data (LSB first) */
    WStrReverseCpy(p, pCnf, SMP_CONFIRM_LEN);
    ec82:	4604      	mov	r4, r0
    ec84:	4631      	mov	r1, r6
    ec86:	3009      	adds	r0, #9
    ec88:	2210      	movs	r2, #16
    ec8a:	f004 fbfd 	bl	13488 <WStrReverseCpy>

    /* send packet */
    smpSendPkt(pCcb, pPkt);
    ec8e:	4621      	mov	r1, r4
    ec90:	4628      	mov	r0, r5
  {
    pMsg->hdr.status = SMP_ERR_UNSPECIFIED;
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    smpSmExecute(pCcb, pMsg);
  }
}
    ec92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSendPkt(pCcb, pPkt);
    ec96:	f7fe bffb 	b.w	dc90 <smpSendPkt>
    pMsg->hdr.event = SMP_MSG_API_CANCEL_REQ;
    ec9a:	f640 0303 	movw	r3, #2051	; 0x803
    ec9e:	807b      	strh	r3, [r7, #2]
    smpSmExecute(pCcb, pMsg);
    eca0:	4639      	mov	r1, r7
    eca2:	4628      	mov	r0, r5
}
    eca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    smpSmExecute(pCcb, pMsg);
    eca8:	f7fe b9fa 	b.w	d0a0 <smpSmExecute>

0000ecac <smpGetPkBit>:
 *  \return None.
 */
/*************************************************************************************************/
uint8_t smpGetPkBit(smpCcb_t *pCcb)
{
  smpScCcb_t *pScCb = pCcb->pScCcb;
    ecac:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
    ecae:	78d8      	ldrb	r0, [r3, #3]
  uint8_t bit = pScCb->pkPos % 8;

  if (pScCb->pScratch->Ra[indx] & 1<<bit)
    ecb0:	695a      	ldr	r2, [r3, #20]
  uint8_t indx = (SMP_RAND_LEN - 1) - pScCb->pkPos / 8;
    ecb2:	08c3      	lsrs	r3, r0, #3
    ecb4:	f1c3 030f 	rsb	r3, r3, #15
  if (pScCb->pScratch->Ra[indx] & 1<<bit)
    ecb8:	fa52 f383 	uxtab	r3, r2, r3
    ecbc:	f000 0207 	and.w	r2, r0, #7
    ecc0:	f893 0020 	ldrb.w	r0, [r3, #32]
    ecc4:	4110      	asrs	r0, r2
    ecc6:	f000 0001 	and.w	r0, r0, #1
    return 0x81;

  return 0x80;
}
    ecca:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    ecce:	4770      	bx	lr

0000ecd0 <SmpScGetCancelMsgWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SmpScGetCancelMsgWithReattempt(dmConnId_t connId, wsfMsgHdr_t *pHdr, uint8_t status)
{
    ecd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecd2:	460d      	mov	r5, r1
    ecd4:	4617      	mov	r7, r2
    ecd6:	4606      	mov	r6, r0
  smpCcb_t *pCcb = smpCcbByConnId(connId);
    ecd8:	f7fe fde4 	bl	d8a4 <smpCcbByConnId>
    ecdc:	4604      	mov	r4, r0

  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
    ecde:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    ece2:	480c      	ldr	r0, [pc, #48]	; (ed14 <SmpScGetCancelMsgWithReattempt+0x44>)
    ece4:	f009 fb5c 	bl	183a0 <WsfTrace>

  /* update repeated attempts count */
  pCcb->attempts++;
    ece8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    ecec:	3301      	adds	r3, #1
    ecee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

  pHdr->param = connId;
  pHdr->status = status;

  SmpDbPairingFailed(connId);
    ecf2:	4630      	mov	r0, r6
  pHdr->param = connId;
    ecf4:	802e      	strh	r6, [r5, #0]
  pHdr->status = status;
    ecf6:	70ef      	strb	r7, [r5, #3]
  SmpDbPairingFailed(connId);
    ecf8:	f7fe fbbc 	bl	d474 <SmpDbPairingFailed>

  if (pCcb->attempts == pSmpCfg->maxAttempts)
    ecfc:	4a06      	ldr	r2, [pc, #24]	; (ed18 <SmpScGetCancelMsgWithReattempt+0x48>)
    ecfe:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    ed02:	6812      	ldr	r2, [r2, #0]
    ed04:	79d2      	ldrb	r2, [r2, #7]
    pHdr->event = SMP_MSG_INT_MAX_ATTEMPTS;
  }
  else
  {
    /* else just fail */
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
    ed06:	4293      	cmp	r3, r2
    ed08:	bf0c      	ite	eq
    ed0a:	230d      	moveq	r3, #13
    ed0c:	2303      	movne	r3, #3
    ed0e:	70ab      	strb	r3, [r5, #2]
  }
}
    ed10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed12:	bf00      	nop
    ed14:	000247a8 	.word	0x000247a8
    ed18:	10002e54 	.word	0x10002e54

0000ed1c <smpScFailWithReattempt>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void smpScFailWithReattempt(smpCcb_t *pCcb)
{
    ed1c:	b570      	push	{r4, r5, r6, lr}
  wsfMsgHdr_t hdr;

  SmpScGetCancelMsgWithReattempt(pCcb->connId, &hdr, SMP_ERR_CONFIRM_VALUE);
    ed1e:	f890 603d 	ldrb.w	r6, [r0, #61]	; 0x3d
{
    ed22:	b082      	sub	sp, #8
    ed24:	4605      	mov	r5, r0
  smpCcb_t *pCcb = smpCcbByConnId(connId);
    ed26:	4630      	mov	r0, r6
    ed28:	f7fe fdbc 	bl	d8a4 <smpCcbByConnId>
    ed2c:	4604      	mov	r4, r0
  SMP_TRACE_INFO1("SmpScGetCancelMsgWithReattempt: %d", pCcb->attempts);
    ed2e:	4811      	ldr	r0, [pc, #68]	; (ed74 <smpScFailWithReattempt+0x58>)
    ed30:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    ed34:	f009 fb34 	bl	183a0 <WsfTrace>
  pCcb->attempts++;
    ed38:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pHdr->param = connId;
    ed3c:	f8ad 6004 	strh.w	r6, [sp, #4]
  pCcb->attempts++;
    ed40:	3301      	adds	r3, #1
  SmpDbPairingFailed(connId);
    ed42:	4630      	mov	r0, r6
  pCcb->attempts++;
    ed44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  pHdr->status = status;
    ed48:	2304      	movs	r3, #4
    ed4a:	f88d 3007 	strb.w	r3, [sp, #7]
  SmpDbPairingFailed(connId);
    ed4e:	f7fe fb91 	bl	d474 <SmpDbPairingFailed>
  if (pCcb->attempts == pSmpCfg->maxAttempts)
    ed52:	4a09      	ldr	r2, [pc, #36]	; (ed78 <smpScFailWithReattempt+0x5c>)
    ed54:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    ed58:	6812      	ldr	r2, [r2, #0]
    ed5a:	79d2      	ldrb	r2, [r2, #7]

  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
    ed5c:	a901      	add	r1, sp, #4
    pHdr->event = SMP_MSG_API_CANCEL_REQ;
    ed5e:	4293      	cmp	r3, r2
    ed60:	bf0c      	ite	eq
    ed62:	230d      	moveq	r3, #13
    ed64:	2303      	movne	r3, #3
  smpSmExecute(pCcb, (smpMsg_t *)&hdr);
    ed66:	4628      	mov	r0, r5
    ed68:	f88d 3006 	strb.w	r3, [sp, #6]
    ed6c:	f7fe f998 	bl	d0a0 <smpSmExecute>
}
    ed70:	b002      	add	sp, #8
    ed72:	bd70      	pop	{r4, r5, r6, pc}
    ed74:	000247a8 	.word	0x000247a8
    ed78:	10002e54 	.word	0x10002e54

0000ed7c <smpLogByteArray>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void smpLogByteArray(char *str, uint8_t *pArray, uint8_t len)
{
    ed7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed80:	4614      	mov	r4, r2
    ed82:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    ed86:	460d      	mov	r5, r1
#if WSF_TOKEN_ENABLED == TRUE || WSF_TRACE_ENABLED == TRUE

  char buffer[512];
  int i, j=0, pos=0;

  SMP_TRACE_INFO0(str);
    ed88:	f009 fb0a 	bl	183a0 <WsfTrace>

  while (j < len)
    ed8c:	2c00      	cmp	r4, #0
    ed8e:	d05c      	beq.n	ee4a <smpLogByteArray+0xce>
  int i, j=0, pos=0;
    ed90:	2600      	movs	r6, #0
    ed92:	46a0      	mov	r8, r4
    for (i=0; i<count; i++, j++)
    {
      uint8_t quad;

      if (i && i % 4 == 0)
        buffer[pos++] = ' ';
    ed94:	2720      	movs	r7, #32
    buffer[pos++] = '[';
    ed96:	235b      	movs	r3, #91	; 0x5b
    if (len-j < count)
    ed98:	f1b8 0f0f 	cmp.w	r8, #15
    buffer[pos++] = '[';
    ed9c:	f88d 3000 	strb.w	r3, [sp]
    if (len-j < count)
    eda0:	dd47      	ble.n	ee32 <smpLogByteArray+0xb6>
    int count = 16;
    eda2:	f04f 0810 	mov.w	r8, #16
      if (i && i % 4 == 0)
    eda6:	f106 3eff 	add.w	lr, r6, #4294967295
    edaa:	44ae      	add	lr, r5
    for (i=0; i<count; i++, j++)
    edac:	2200      	movs	r2, #0
    buffer[pos++] = '[';
    edae:	f04f 0c01 	mov.w	ip, #1
    edb2:	e005      	b.n	edc0 <smpLogByteArray+0x44>
      if (i && i % 4 == 0)
    edb4:	0793      	lsls	r3, r2, #30
        buffer[pos++] = ' ';
    edb6:	bf04      	itt	eq
    edb8:	f80d 700c 	strbeq.w	r7, [sp, ip]
    edbc:	f10c 0c01 	addeq.w	ip, ip, #1

      quad = (pArray[j] >> 4) & 0xf;
    edc0:	f81e 3f01 	ldrb.w	r3, [lr, #1]!

      if (quad < 10)
    edc4:	2b9f      	cmp	r3, #159	; 0x9f
      quad = (pArray[j] >> 4) & 0xf;
    edc6:	ea4f 1013 	mov.w	r0, r3, lsr #4
        buffer[pos++] = '0' + quad;
      else
        buffer[pos++] = 'a' + quad - 10;

      quad = pArray[j] & 0xf;
    edca:	f003 030f 	and.w	r3, r3, #15
        buffer[pos++] = '0' + quad;
    edce:	f10c 0101 	add.w	r1, ip, #1
    edd2:	bf92      	itee	ls
    edd4:	3030      	addls	r0, #48	; 0x30
        buffer[pos++] = 'a' + quad - 10;
    edd6:	f10c 0101 	addhi.w	r1, ip, #1
    edda:	3057      	addhi	r0, #87	; 0x57
    for (i=0; i<count; i++, j++)
    eddc:	3201      	adds	r2, #1

      if (quad < 10)
    edde:	2b09      	cmp	r3, #9
        buffer[pos++] = '0' + quad;
    ede0:	bf94      	ite	ls
    ede2:	3330      	addls	r3, #48	; 0x30
      else
        buffer[pos++] = 'a' + quad - 10;
    ede4:	3357      	addhi	r3, #87	; 0x57
    for (i=0; i<count; i++, j++)
    ede6:	4590      	cmp	r8, r2
    ede8:	f80d 000c 	strb.w	r0, [sp, ip]
      if (quad < 10)
    edec:	f80d 3001 	strb.w	r3, [sp, r1]
        buffer[pos++] = '0' + quad;
    edf0:	f101 0c01 	add.w	ip, r1, #1
    for (i=0; i<count; i++, j++)
    edf4:	dcde      	bgt.n	edb4 <smpLogByteArray+0x38>
    edf6:	f1b8 0f00 	cmp.w	r8, #0
    }

    buffer[pos++] = ']';
    buffer[pos++] = '\0';
    edfa:	eb0d 030c 	add.w	r3, sp, ip
    for (i=0; i<count; i++, j++)
    edfe:	f108 38ff 	add.w	r8, r8, #4294967295
    buffer[pos++] = ']';
    ee02:	f04f 015d 	mov.w	r1, #93	; 0x5d
    for (i=0; i<count; i++, j++)
    ee06:	bfd8      	it	le
    ee08:	f04f 0800 	movle.w	r8, #0
    buffer[pos++] = '\0';
    ee0c:	2200      	movs	r2, #0
    ee0e:	3601      	adds	r6, #1
    buffer[pos++] = ']';
    ee10:	f80d 100c 	strb.w	r1, [sp, ip]
    for (i=0; i<count; i++, j++)
    ee14:	4446      	add	r6, r8
    SMP_TRACE_INFO0(buffer);
    ee16:	4668      	mov	r0, sp
    buffer[pos++] = '\0';
    ee18:	705a      	strb	r2, [r3, #1]
    SMP_TRACE_INFO0(buffer);
    ee1a:	f009 fac1 	bl	183a0 <WsfTrace>
  while (j < len)
    ee1e:	42b4      	cmp	r4, r6
    ee20:	dd13      	ble.n	ee4a <smpLogByteArray+0xce>
    ee22:	eba4 0806 	sub.w	r8, r4, r6
    buffer[pos++] = '[';
    ee26:	235b      	movs	r3, #91	; 0x5b
    if (len-j < count)
    ee28:	f1b8 0f0f 	cmp.w	r8, #15
    buffer[pos++] = '[';
    ee2c:	f88d 3000 	strb.w	r3, [sp]
    if (len-j < count)
    ee30:	dcb7      	bgt.n	eda2 <smpLogByteArray+0x26>
    for (i=0; i<count; i++, j++)
    ee32:	b10e      	cbz	r6, ee38 <smpLogByteArray+0xbc>
    ee34:	46b0      	mov	r8, r6
    ee36:	e7b6      	b.n	eda6 <smpLogByteArray+0x2a>
    buffer[pos++] = ']';
    ee38:	235d      	movs	r3, #93	; 0x5d
    SMP_TRACE_INFO0(buffer);
    ee3a:	4668      	mov	r0, sp
    buffer[pos++] = ']';
    ee3c:	f88d 3001 	strb.w	r3, [sp, #1]
    buffer[pos++] = '\0';
    ee40:	f88d 6002 	strb.w	r6, [sp, #2]
    SMP_TRACE_INFO0(buffer);
    ee44:	f009 faac 	bl	183a0 <WsfTrace>
  while (j < len)
    ee48:	e7a5      	b.n	ed96 <smpLogByteArray+0x1a>
    buffer[pos++] = '\0';

    SMP_TRACE_INFO0(buffer);
  }
#endif
}
    ee4a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    ee4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee52:	bf00      	nop

0000ee54 <SmpScSetOobCfg>:
{
    ee54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee58:	460d      	mov	r5, r1
  SMP_TRACE_128("OOB Peer Confirm", pConfig->peerConfirm);
    ee5a:	f101 0830 	add.w	r8, r1, #48	; 0x30
  smpCcb_t *pCcb = smpCcbByConnId(connId);
    ee5e:	f7fe fd21 	bl	d8a4 <smpCcbByConnId>
  SMP_TRACE_128("OOB Peer Random", pConfig->peerRandom);
    ee62:	f105 0720 	add.w	r7, r5, #32
  SMP_TRACE_128("OOB Peer Confirm", pConfig->peerConfirm);
    ee66:	2210      	movs	r2, #16
    ee68:	4641      	mov	r1, r8
  smpCcb_t *pCcb = smpCcbByConnId(connId);
    ee6a:	4604      	mov	r4, r0
  SMP_TRACE_128("OOB Peer Confirm", pConfig->peerConfirm);
    ee6c:	4824      	ldr	r0, [pc, #144]	; (ef00 <SmpScSetOobCfg+0xac>)
    ee6e:	f7ff ff85 	bl	ed7c <smpLogByteArray>
  SMP_TRACE_128("OOB Local Confirm", pConfig->localConfirm);
    ee72:	f105 0610 	add.w	r6, r5, #16
  SMP_TRACE_128("OOB Peer Random", pConfig->peerRandom);
    ee76:	4823      	ldr	r0, [pc, #140]	; (ef04 <SmpScSetOobCfg+0xb0>)
    ee78:	2210      	movs	r2, #16
    ee7a:	4639      	mov	r1, r7
    ee7c:	f7ff ff7e 	bl	ed7c <smpLogByteArray>
  SMP_TRACE_128("OOB Local Confirm", pConfig->localConfirm);
    ee80:	4821      	ldr	r0, [pc, #132]	; (ef08 <SmpScSetOobCfg+0xb4>)
    ee82:	2210      	movs	r2, #16
    ee84:	4631      	mov	r1, r6
    ee86:	f7ff ff79 	bl	ed7c <smpLogByteArray>
  SMP_TRACE_128("OOB Local Random", pConfig->localRandom);
    ee8a:	4629      	mov	r1, r5
    ee8c:	481f      	ldr	r0, [pc, #124]	; (ef0c <SmpScSetOobCfg+0xb8>)
    ee8e:	2210      	movs	r2, #16
    ee90:	f7ff ff74 	bl	ed7c <smpLogByteArray>
  if (pCcb->initiator)
    ee94:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pConfig->localConfirm);
    ee98:	4631      	mov	r1, r6
  if (pCcb->initiator)
    ee9a:	b1c3      	cbz	r3, eece <SmpScSetOobCfg+0x7a>
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pConfig->localConfirm);
    ee9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ee9e:	6958      	ldr	r0, [r3, #20]
    eea0:	3050      	adds	r0, #80	; 0x50
    eea2:	f004 fa61 	bl	13368 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, pConfig->localRandom);
    eea6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eea8:	6958      	ldr	r0, [r3, #20]
    eeaa:	4629      	mov	r1, r5
    eeac:	3020      	adds	r0, #32
    eeae:	f004 fa5b 	bl	13368 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCb, pConfig->peerConfirm);
    eeb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eeb4:	6958      	ldr	r0, [r3, #20]
    eeb6:	4641      	mov	r1, r8
    eeb8:	3040      	adds	r0, #64	; 0x40
    eeba:	f004 fa55 	bl	13368 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, pConfig->peerRandom);
    eebe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eec0:	6958      	ldr	r0, [r3, #20]
    eec2:	4639      	mov	r1, r7
    eec4:	3030      	adds	r0, #48	; 0x30
}
    eec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, pConfig->peerRandom);
    eeca:	f004 ba4d 	b.w	13368 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCb, pConfig->localConfirm);
    eece:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eed0:	6958      	ldr	r0, [r3, #20]
    eed2:	3040      	adds	r0, #64	; 0x40
    eed4:	f004 fa48 	bl	13368 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Rb, pConfig->localRandom);
    eed8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eeda:	6958      	ldr	r0, [r3, #20]
    eedc:	4629      	mov	r1, r5
    eede:	3030      	adds	r0, #48	; 0x30
    eee0:	f004 fa42 	bl	13368 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->PeerCa_Ea, pConfig->peerConfirm);
    eee4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eee6:	6958      	ldr	r0, [r3, #20]
    eee8:	4641      	mov	r1, r8
    eeea:	3050      	adds	r0, #80	; 0x50
    eeec:	f004 fa3c 	bl	13368 <Calc128Cpy>
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, pConfig->peerRandom);
    eef0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eef2:	6958      	ldr	r0, [r3, #20]
    eef4:	4639      	mov	r1, r7
    eef6:	3020      	adds	r0, #32
}
    eef8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Calc128Cpy(pCcb->pScCcb->pScratch->Ra, pConfig->peerRandom);
    eefc:	f004 ba34 	b.w	13368 <Calc128Cpy>
    ef00:	000247cc 	.word	0x000247cc
    ef04:	000247e0 	.word	0x000247e0
    ef08:	000247f0 	.word	0x000247f0
    ef0c:	00024804 	.word	0x00024804

0000ef10 <amdtpcDiscCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amdtpcDiscCback(dmConnId_t connId, uint8_t status)
{
    ef10:	b530      	push	{r4, r5, lr}
    ef12:	4604      	mov	r4, r0
    ef14:	b083      	sub	sp, #12
  switch(status)
    ef16:	2908      	cmp	r1, #8
    ef18:	d821      	bhi.n	ef5e <amdtpcDiscCback+0x4e>
    ef1a:	e8df f001 	tbb	[pc, r1]
    ef1e:	362e      	.short	0x362e
    ef20:	4905403b 	.word	0x4905403b
    ef24:	2058      	.short	0x2058
    ef26:	22          	.byte	0x22
    ef27:	00          	.byte	0x00

    case APP_DISC_FAILED:
      if (pAppCfg->abortDisc)
      {
        /* if discovery failed for proprietary data service then disconnect */
        if (amdtpcCb.discState == AMDTPC_DISC_AMDTP_SVC)
    ef28:	4d37      	ldr	r5, [pc, #220]	; (f008 <amdtpcDiscCback+0xf8>)
    ef2a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
      }
      /* else fall through and continue discovery */

    case APP_DISC_CMPL:
      /* next discovery state */
      amdtpcCb.discState++;
    ef2e:	3301      	adds	r3, #1
    ef30:	b2db      	uxtb	r3, r3

      if (amdtpcCb.discState == AMDTPC_DISC_GAP_SVC)
    ef32:	2b01      	cmp	r3, #1
      amdtpcCb.discState++;
    ef34:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
      if (amdtpcCb.discState == AMDTPC_DISC_GAP_SVC)
    ef38:	d055      	beq.n	efe6 <amdtpcDiscCback+0xd6>
      {
        /* discover GAP service */
        GapDiscover(connId, pAmdtpcGapHdlList);
      }
      else if (amdtpcCb.discState == AMDTPC_DISC_AMDTP_SVC)
    ef3a:	2b02      	cmp	r3, #2
    ef3c:	d04c      	beq.n	efd8 <amdtpcDiscCback+0xc8>
        AmdtpcDiscover(connId, pAmdtpcHdlList);
      }
      else
      {
        /* discovery complete */
        AppDiscComplete(connId, APP_DISC_CMPL);
    ef3e:	2104      	movs	r1, #4
    ef40:	4620      	mov	r0, r4
    ef42:	f011 fb0f 	bl	20564 <AppDiscComplete>
  if ((pAmdtpcGapHdlList[GAP_RPAO_HDL_IDX] != ATT_HANDLE_NONE) &&
    ef46:	892b      	ldrh	r3, [r5, #8]
    ef48:	2b00      	cmp	r3, #0
    ef4a:	d153      	bne.n	eff4 <amdtpcDiscCback+0xe4>

        /* GAP service discovery completed */
        amdtpcDiscGapCmpl(connId);

        /* start configuration */
        AppDiscConfigure(connId, APP_DISC_CFG_START, AMDTPC_DISC_CFG_LIST_LEN,
    ef4c:	4b2f      	ldr	r3, [pc, #188]	; (f00c <amdtpcDiscCback+0xfc>)
    ef4e:	9501      	str	r5, [sp, #4]
    ef50:	220a      	movs	r2, #10
      }
      break;

    case APP_DISC_CFG_START:
        /* start configuration */
        AppDiscConfigure(connId, APP_DISC_CFG_START, AMDTPC_DISC_CFG_LIST_LEN,
    ef52:	9200      	str	r2, [sp, #0]
    ef54:	2106      	movs	r1, #6
    ef56:	2203      	movs	r2, #3
    ef58:	4620      	mov	r0, r4
    ef5a:	f011 fb8f 	bl	2067c <AppDiscConfigure>
      break;

    default:
      break;
  }
}
    ef5e:	b003      	add	sp, #12
    ef60:	bd30      	pop	{r4, r5, pc}
      AppDiscComplete(connId, status);
    ef62:	2108      	movs	r1, #8
    ef64:	f011 fafe 	bl	20564 <AppDiscComplete>
      amdtpc_start(pAmdtpcHdlList[AMDTP_RX_HDL_IDX], pAmdtpcHdlList[AMDTP_ACK_HDL_IDX], AMDTP_TIMER_IND);
    ef68:	4b27      	ldr	r3, [pc, #156]	; (f008 <amdtpcDiscCback+0xf8>)
    ef6a:	8a19      	ldrh	r1, [r3, #16]
    ef6c:	8958      	ldrh	r0, [r3, #10]
    ef6e:	22a0      	movs	r2, #160	; 0xa0
}
    ef70:	b003      	add	sp, #12
    ef72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      amdtpc_start(pAmdtpcHdlList[AMDTP_RX_HDL_IDX], pAmdtpcHdlList[AMDTP_ACK_HDL_IDX], AMDTP_TIMER_IND);
    ef76:	f004 bdd5 	b.w	13b24 <amdtpc_start>
      AppDiscSetHdlList(connId, amdtpcCb.hdlListLen, amdtpcCb.hdlList);
    ef7a:	4a23      	ldr	r2, [pc, #140]	; (f008 <amdtpcDiscCback+0xf8>)
    ef7c:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
}
    ef80:	b003      	add	sp, #12
    ef82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppDiscSetHdlList(connId, amdtpcCb.hdlListLen, amdtpcCb.hdlList);
    ef86:	f011 bae3 	b.w	20550 <AppDiscSetHdlList>
}
    ef8a:	b003      	add	sp, #12
    ef8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppDiscReadDatabaseHash(connId);
    ef90:	f011 bbb2 	b.w	206f8 <AppDiscReadDatabaseHash>
}
    ef94:	b003      	add	sp, #12
    ef96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      AppMasterSecurityReq(connId);
    ef9a:	f011 bf3b 	b.w	20e14 <AppMasterSecurityReq>
      amdtpcCb.discState = AMDTPC_DISC_GATT_SVC;
    ef9e:	491a      	ldr	r1, [pc, #104]	; (f008 <amdtpcDiscCback+0xf8>)
    efa0:	2300      	movs	r3, #0
    efa2:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
}
    efa6:	b003      	add	sp, #12
    efa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      GattDiscover(connId, pAmdtpcGattHdlList);
    efac:	f009 ba18 	b.w	183e0 <GattDiscover>
      if (pAppCfg->abortDisc)
    efb0:	4b17      	ldr	r3, [pc, #92]	; (f010 <amdtpcDiscCback+0x100>)
        if (amdtpcCb.discState == AMDTPC_DISC_AMDTP_SVC)
    efb2:	4d15      	ldr	r5, [pc, #84]	; (f008 <amdtpcDiscCback+0xf8>)
      if (pAppCfg->abortDisc)
    efb4:	681b      	ldr	r3, [r3, #0]
    efb6:	781b      	ldrb	r3, [r3, #0]
    efb8:	2b00      	cmp	r3, #0
    efba:	d0b6      	beq.n	ef2a <amdtpcDiscCback+0x1a>
        if (amdtpcCb.discState == AMDTPC_DISC_AMDTP_SVC)
    efbc:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    efc0:	2b02      	cmp	r3, #2
    efc2:	d1b4      	bne.n	ef2e <amdtpcDiscCback+0x1e>
}
    efc4:	b003      	add	sp, #12
    efc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          AppConnClose(connId);
    efca:	f011 bc25 	b.w	20818 <AppConnClose>
        AppDiscConfigure(connId, APP_DISC_CFG_START, AMDTPC_DISC_CFG_LIST_LEN,
    efce:	490e      	ldr	r1, [pc, #56]	; (f008 <amdtpcDiscCback+0xf8>)
    efd0:	4b0e      	ldr	r3, [pc, #56]	; (f00c <amdtpcDiscCback+0xfc>)
    efd2:	9101      	str	r1, [sp, #4]
    efd4:	220a      	movs	r2, #10
    efd6:	e7bc      	b.n	ef52 <amdtpcDiscCback+0x42>
        AmdtpcDiscover(connId, pAmdtpcHdlList);
    efd8:	490e      	ldr	r1, [pc, #56]	; (f014 <amdtpcDiscCback+0x104>)
    efda:	4620      	mov	r0, r4
}
    efdc:	b003      	add	sp, #12
    efde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        AmdtpcDiscover(connId, pAmdtpcHdlList);
    efe2:	f004 bd57 	b.w	13a94 <AmdtpcDiscover>
        GapDiscover(connId, pAmdtpcGapHdlList);
    efe6:	490c      	ldr	r1, [pc, #48]	; (f018 <amdtpcDiscCback+0x108>)
    efe8:	4620      	mov	r0, r4
}
    efea:	b003      	add	sp, #12
    efec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        GapDiscover(connId, pAmdtpcGapHdlList);
    eff0:	f004 bcf2 	b.w	139d8 <GapDiscover>
      ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE))
    eff4:	4620      	mov	r0, r4
    eff6:	f011 fc21 	bl	2083c <AppDbGetHdl>
  if ((pAmdtpcGapHdlList[GAP_RPAO_HDL_IDX] != ATT_HANDLE_NONE) &&
    effa:	2800      	cmp	r0, #0
    effc:	d0a6      	beq.n	ef4c <amdtpcDiscCback+0x3c>
    AppDbSetPeerRpao(dbHdl, TRUE);
    effe:	2101      	movs	r1, #1
    f000:	f005 faaa 	bl	14558 <AppDbSetPeerRpao>
    f004:	e7a2      	b.n	ef4c <amdtpcDiscCback+0x3c>
    f006:	bf00      	nop
    f008:	1000425c 	.word	0x1000425c
    f00c:	0002493c 	.word	0x0002493c
    f010:	1000b434 	.word	0x1000b434
    f014:	10004266 	.word	0x10004266
    f018:	10004262 	.word	0x10004262

0000f01c <amdtpcAttCback>:
{
    f01c:	b538      	push	{r3, r4, r5, lr}
    f01e:	4605      	mov	r5, r0
  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
    f020:	8900      	ldrh	r0, [r0, #8]
    f022:	3010      	adds	r0, #16
    f024:	b280      	uxth	r0, r0
    f026:	f008 fe3b 	bl	17ca0 <WsfMsgAlloc>
    f02a:	b1a0      	cbz	r0, f056 <amdtpcAttCback+0x3a>
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
    f02c:	68e9      	ldr	r1, [r5, #12]
    f02e:	682a      	ldr	r2, [r5, #0]
    f030:	68ab      	ldr	r3, [r5, #8]
    f032:	60c1      	str	r1, [r0, #12]
    pMsg->pValue = (uint8_t *) (pMsg + 1);
    f034:	4604      	mov	r4, r0
    f036:	3010      	adds	r0, #16
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
    f038:	60a3      	str	r3, [r4, #8]
    f03a:	6022      	str	r2, [r4, #0]
    pMsg->pValue = (uint8_t *) (pMsg + 1);
    f03c:	6060      	str	r0, [r4, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
    f03e:	6869      	ldr	r1, [r5, #4]
    f040:	892a      	ldrh	r2, [r5, #8]
    f042:	f7fd f85d 	bl	c100 <memcpy>
    WsfMsgSend(amdtpcCb.handlerId, pMsg);
    f046:	4b04      	ldr	r3, [pc, #16]	; (f058 <amdtpcAttCback+0x3c>)
    f048:	4621      	mov	r1, r4
    f04a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
}
    f04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(amdtpcCb.handlerId, pMsg);
    f052:	f008 be31 	b.w	17cb8 <WsfMsgSend>
}
    f056:	bd38      	pop	{r3, r4, r5, pc}
    f058:	1000425c 	.word	0x1000425c

0000f05c <AmdtpcSendTestData>:
{
    f05c:	b530      	push	{r4, r5, lr}
    f05e:	b0bf      	sub	sp, #252	; 0xfc
    uint8_t data[236] = {0};
    f060:	2100      	movs	r1, #0
    f062:	22e8      	movs	r2, #232	; 0xe8
    data[1] = counter;
    f064:	4c0e      	ldr	r4, [pc, #56]	; (f0a0 <AmdtpcSendTestData+0x44>)
    uint8_t data[236] = {0};
    f066:	9103      	str	r1, [sp, #12]
    f068:	a804      	add	r0, sp, #16
    f06a:	f012 f883 	bl	21174 <memset>
    sendDataContinuously = true;
    f06e:	4b0d      	ldr	r3, [pc, #52]	; (f0a4 <AmdtpcSendTestData+0x48>)
    data[1] = counter;
    f070:	7820      	ldrb	r0, [r4, #0]
    f072:	f88d 000d 	strb.w	r0, [sp, #13]
    sendDataContinuously = true;
    f076:	2201      	movs	r2, #1
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
    f078:	25ec      	movs	r5, #236	; 0xec
    f07a:	9500      	str	r5, [sp, #0]
    f07c:	2100      	movs	r1, #0
    sendDataContinuously = true;
    f07e:	701a      	strb	r2, [r3, #0]
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
    f080:	4610      	mov	r0, r2
    f082:	ab03      	add	r3, sp, #12
    f084:	f004 fe00 	bl	13c88 <AmdtpcSendPacket>
    if (status != AMDTP_STATUS_SUCCESS)
    f088:	b920      	cbnz	r0, f094 <AmdtpcSendTestData+0x38>
        counter++;
    f08a:	7823      	ldrb	r3, [r4, #0]
    f08c:	3301      	adds	r3, #1
    f08e:	7023      	strb	r3, [r4, #0]
}
    f090:	b03f      	add	sp, #252	; 0xfc
    f092:	bd30      	pop	{r4, r5, pc}
    f094:	4601      	mov	r1, r0
        APP_TRACE_INFO1("AmdtpcSendTestData() failed, status = %d\n", status);
    f096:	4804      	ldr	r0, [pc, #16]	; (f0a8 <AmdtpcSendTestData+0x4c>)
    f098:	f009 f982 	bl	183a0 <WsfTrace>
}
    f09c:	b03f      	add	sp, #252	; 0xfc
    f09e:	bd30      	pop	{r4, r5, pc}
    f0a0:	1000429c 	.word	0x1000429c
    f0a4:	100042b8 	.word	0x100042b8
    f0a8:	00024818 	.word	0x00024818

0000f0ac <amdtpDtpTransCback>:
{
    f0ac:	b510      	push	{r4, lr}
    f0ae:	4604      	mov	r4, r0
    APP_TRACE_INFO1("amdtpDtpTransCback status = %d\n", status);
    f0b0:	4621      	mov	r1, r4
    f0b2:	4806      	ldr	r0, [pc, #24]	; (f0cc <amdtpDtpTransCback+0x20>)
    f0b4:	f009 f974 	bl	183a0 <WsfTrace>
    if (status == AMDTP_STATUS_SUCCESS && sendDataContinuously)
    f0b8:	b914      	cbnz	r4, f0c0 <amdtpDtpTransCback+0x14>
    f0ba:	4b05      	ldr	r3, [pc, #20]	; (f0d0 <amdtpDtpTransCback+0x24>)
    f0bc:	781b      	ldrb	r3, [r3, #0]
    f0be:	b903      	cbnz	r3, f0c2 <amdtpDtpTransCback+0x16>
}
    f0c0:	bd10      	pop	{r4, pc}
    f0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        AmdtpcSendTestData();
    f0c6:	f7ff bfc9 	b.w	f05c <AmdtpcSendTestData>
    f0ca:	bf00      	nop
    f0cc:	00024844 	.word	0x00024844
    f0d0:	100042b8 	.word	0x100042b8

0000f0d4 <amdtpDtpRecvCback>:
    gTotalDataBytesRecev += len;
    f0d4:	4a08      	ldr	r2, [pc, #32]	; (f0f8 <amdtpDtpRecvCback+0x24>)
{
    f0d6:	b410      	push	{r4}
    if (!measTpStarted)
    f0d8:	4c08      	ldr	r4, [pc, #32]	; (f0fc <amdtpDtpRecvCback+0x28>)
    gTotalDataBytesRecev += len;
    f0da:	6813      	ldr	r3, [r2, #0]
    if (!measTpStarted)
    f0dc:	7820      	ldrb	r0, [r4, #0]
    gTotalDataBytesRecev += len;
    f0de:	4419      	add	r1, r3
    f0e0:	6011      	str	r1, [r2, #0]
    if (!measTpStarted)
    f0e2:	b110      	cbz	r0, f0ea <amdtpDtpRecvCback+0x16>
}
    f0e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    f0e8:	4770      	bx	lr
        measTpStarted = true;
    f0ea:	2101      	movs	r1, #1
    f0ec:	7021      	strb	r1, [r4, #0]
        WsfTimerStartSec(&measTpTimer, 1);
    f0ee:	4804      	ldr	r0, [pc, #16]	; (f100 <amdtpDtpRecvCback+0x2c>)
}
    f0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
        WsfTimerStartSec(&measTpTimer, 1);
    f0f4:	f009 b82e 	b.w	18154 <WsfTimerStartSec>
    f0f8:	100042a0 	.word	0x100042a0
    f0fc:	100042a4 	.word	0x100042a4
    f100:	100042a8 	.word	0x100042a8

0000f104 <amdtpcBtnCback>:
{
    f104:	b510      	push	{r4, lr}
    f106:	4604      	mov	r4, r0
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
    f108:	f011 fb8c 	bl	20824 <AppConnIsOpen>
    f10c:	b110      	cbz	r0, f114 <amdtpcBtnCback+0x10>
    switch (btn)
    f10e:	2c04      	cmp	r4, #4
    f110:	d018      	beq.n	f144 <amdtpcBtnCback+0x40>
}
    f112:	bd10      	pop	{r4, pc}
    switch (btn)
    f114:	3c02      	subs	r4, #2
    f116:	2c08      	cmp	r4, #8
    f118:	d8fb      	bhi.n	f112 <amdtpcBtnCback+0xe>
    f11a:	a301      	add	r3, pc, #4	; (adr r3, f120 <amdtpcBtnCback+0x1c>)
    f11c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    f120:	0000f171 	.word	0x0000f171
    f124:	0000f113 	.word	0x0000f113
    f128:	0000f169 	.word	0x0000f169
    f12c:	0000f161 	.word	0x0000f161
    f130:	0000f113 	.word	0x0000f113
    f134:	0000f113 	.word	0x0000f113
    f138:	0000f113 	.word	0x0000f113
    f13c:	0000f113 	.word	0x0000f113
    f140:	0000f14d 	.word	0x0000f14d
}
    f144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        AppConnClose(connId);
    f148:	f011 bb66 	b.w	20818 <AppConnClose>
        DmDevPrivStart(15 * 60);
    f14c:	f44f 7061 	mov.w	r0, #900	; 0x384
    f150:	f00d f9c8 	bl	1c4e4 <DmDevPrivStart>
}
    f154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DmDevSetFilterPolicy(DM_FILT_POLICY_MODE_SCAN, HCI_FILT_RES_INIT);
    f158:	2102      	movs	r1, #2
    f15a:	2001      	movs	r0, #1
    f15c:	f00d b99a 	b.w	1c494 <DmDevSetFilterPolicy>
}
    f160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SvcCoreGapAddRpaoCh();
    f164:	f00e bad2 	b.w	1d70c <SvcCoreGapAddRpaoCh>
}
    f168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        AppDbDeleteAllRecords();
    f16c:	f005 b8d6 	b.w	1431c <AppDbDeleteAllRecords>
        if (amdtpcCb.scanning)
    f170:	4b0b      	ldr	r3, [pc, #44]	; (f1a0 <amdtpcBtnCback+0x9c>)
    f172:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
    f176:	b972      	cbnz	r2, f196 <amdtpcBtnCback+0x92>
        else if (!amdtpcCb.autoConnect)
    f178:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
    f17c:	2800      	cmp	r0, #0
    f17e:	d1c8      	bne.n	f112 <amdtpcBtnCback+0xe>
          amdtpcConnInfo.doConnect = FALSE;
    f180:	4c08      	ldr	r4, [pc, #32]	; (f1a4 <amdtpcBtnCback+0xa0>)
          amdtpcCb.autoConnect = TRUE;
    f182:	2101      	movs	r1, #1
    f184:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
          amdtpcConnInfo.doConnect = FALSE;
    f188:	72e0      	strb	r0, [r4, #11]
}
    f18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          AppScanStart(amdtpcMasterCfg.discMode, amdtpcMasterCfg.scanType,
    f18e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    f192:	f011 bf19 	b.w	20fc8 <AppScanStart>
}
    f196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          AppScanStop();
    f19a:	f011 bf43 	b.w	21024 <AppScanStop>
    f19e:	bf00      	nop
    f1a0:	1000425c 	.word	0x1000425c
    f1a4:	1000428c 	.word	0x1000428c

0000f1a8 <amdtpcDmCback>:
{
    f1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pDmEvt->hdr.event == DM_SEC_ECC_KEY_IND)
    f1aa:	7883      	ldrb	r3, [r0, #2]
    f1ac:	2b34      	cmp	r3, #52	; 0x34
{
    f1ae:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_SEC_ECC_KEY_IND)
    f1b0:	d030      	beq.n	f214 <amdtpcDmCback+0x6c>
  else if (pDmEvt->hdr.event == DM_SEC_CALC_OOB_IND)
    f1b2:	2b33      	cmp	r3, #51	; 0x33
    f1b4:	d10d      	bne.n	f1d2 <amdtpcDmCback+0x2a>
    if (amdtpcOobCfg == NULL)
    f1b6:	4d1f      	ldr	r5, [pc, #124]	; (f234 <amdtpcDmCback+0x8c>)
    f1b8:	6828      	ldr	r0, [r5, #0]
    f1ba:	b320      	cbz	r0, f206 <amdtpcDmCback+0x5e>
      Calc128Cpy(amdtpcOobCfg->localConfirm, pDmEvt->oobCalcInd.confirm);
    f1bc:	1d21      	adds	r1, r4, #4
    f1be:	3010      	adds	r0, #16
    f1c0:	f004 f8d2 	bl	13368 <Calc128Cpy>
      Calc128Cpy(amdtpcOobCfg->localRandom, pDmEvt->oobCalcInd.random);
    f1c4:	6828      	ldr	r0, [r5, #0]
    f1c6:	f104 0114 	add.w	r1, r4, #20
}
    f1ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      Calc128Cpy(amdtpcOobCfg->localRandom, pDmEvt->oobCalcInd.random);
    f1ce:	f004 b8cb 	b.w	13368 <Calc128Cpy>
    len = DmSizeOfEvt(pDmEvt);
    f1d2:	f00d fa39 	bl	1c648 <DmSizeOfEvt>
    if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
    f1d6:	78a3      	ldrb	r3, [r4, #2]
    f1d8:	2b26      	cmp	r3, #38	; 0x26
    len = DmSizeOfEvt(pDmEvt);
    f1da:	4605      	mov	r5, r0
    if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
    f1dc:	d01f      	beq.n	f21e <amdtpcDmCback+0x76>
      reportLen = 0;
    f1de:	2700      	movs	r7, #0
    if ((pMsg = WsfMsgAlloc(len + reportLen)) != NULL)
    f1e0:	f008 fd5e 	bl	17ca0 <WsfMsgAlloc>
    f1e4:	4606      	mov	r6, r0
    f1e6:	b1a0      	cbz	r0, f212 <amdtpcDmCback+0x6a>
      memcpy(pMsg, pDmEvt, len);
    f1e8:	462a      	mov	r2, r5
    f1ea:	4621      	mov	r1, r4
    f1ec:	f7fc ff88 	bl	c100 <memcpy>
      if (pDmEvt->hdr.event == DM_SCAN_REPORT_IND)
    f1f0:	78a3      	ldrb	r3, [r4, #2]
    f1f2:	2b26      	cmp	r3, #38	; 0x26
    f1f4:	d017      	beq.n	f226 <amdtpcDmCback+0x7e>
      WsfMsgSend(amdtpcCb.handlerId, pMsg);
    f1f6:	4b10      	ldr	r3, [pc, #64]	; (f238 <amdtpcDmCback+0x90>)
    f1f8:	4631      	mov	r1, r6
    f1fa:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
}
    f1fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      WsfMsgSend(amdtpcCb.handlerId, pMsg);
    f202:	f008 bd59 	b.w	17cb8 <WsfMsgSend>
      amdtpcOobCfg = WsfBufAlloc(sizeof(dmSecLescOobCfg_t));
    f206:	2040      	movs	r0, #64	; 0x40
    f208:	f008 fcea 	bl	17be0 <WsfBufAlloc>
    f20c:	6028      	str	r0, [r5, #0]
    if (amdtpcOobCfg)
    f20e:	2800      	cmp	r0, #0
    f210:	d1d4      	bne.n	f1bc <amdtpcDmCback+0x14>
}
    f212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f214:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    DmSecSetEccKey(&pDmEvt->eccMsg.data.key);
    f218:	3004      	adds	r0, #4
    f21a:	f00e b9bb 	b.w	1d594 <DmSecSetEccKey>
      reportLen = pDmEvt->scanReport.len;
    f21e:	7a27      	ldrb	r7, [r4, #8]
    if ((pMsg = WsfMsgAlloc(len + reportLen)) != NULL)
    f220:	4438      	add	r0, r7
    f222:	b280      	uxth	r0, r0
    f224:	e7dc      	b.n	f1e0 <amdtpcDmCback+0x38>
        pMsg->scanReport.pData = (uint8_t *) ((uint8_t *) pMsg + len);
    f226:	1970      	adds	r0, r6, r5
    f228:	6070      	str	r0, [r6, #4]
        memcpy(pMsg->scanReport.pData, pDmEvt->scanReport.pData, reportLen);
    f22a:	6861      	ldr	r1, [r4, #4]
    f22c:	463a      	mov	r2, r7
    f22e:	f7fc ff67 	bl	c100 <memcpy>
    f232:	e7e0      	b.n	f1f6 <amdtpcDmCback+0x4e>
    f234:	10004298 	.word	0x10004298
    f238:	1000425c 	.word	0x1000425c

0000f23c <AmdtpcScanStart>:
    AppScanStart(amdtpcMasterCfg.discMode, amdtpcMasterCfg.scanType,
    f23c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    f240:	2101      	movs	r1, #1
    f242:	2000      	movs	r0, #0
    f244:	f011 bec0 	b.w	20fc8 <AppScanStart>

0000f248 <AmdtpcScanStop>:
    AppScanStop();
    f248:	f011 beec 	b.w	21024 <AppScanStop>

0000f24c <AmdtpcConnOpen>:
{
    f24c:	b508      	push	{r3, lr}
    devInfo = AppScanGetResult(idx);
    f24e:	f011 fd9d 	bl	20d8c <AppScanGetResult>
    if (devInfo)
    f252:	b130      	cbz	r0, f262 <AmdtpcConnOpen+0x16>
        AppConnOpen(devInfo->addrType, devInfo->addr, NULL);
    f254:	4601      	mov	r1, r0
}
    f256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        AppConnOpen(devInfo->addrType, devInfo->addr, NULL);
    f25a:	7980      	ldrb	r0, [r0, #6]
    f25c:	2200      	movs	r2, #0
    f25e:	f011 befb 	b.w	21058 <AppConnOpen>
}
    f262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        APP_TRACE_INFO0("AmdtpcConnOpen() devInfo = NULL\n");
    f266:	4801      	ldr	r0, [pc, #4]	; (f26c <AmdtpcConnOpen+0x20>)
    f268:	f009 b89a 	b.w	183a0 <WsfTrace>
    f26c:	00024864 	.word	0x00024864

0000f270 <AmdtpcSendTestDataStop>:
    sendDataContinuously = false;
    f270:	4b01      	ldr	r3, [pc, #4]	; (f278 <AmdtpcSendTestDataStop+0x8>)
    f272:	2200      	movs	r2, #0
    f274:	701a      	strb	r2, [r3, #0]
}
    f276:	4770      	bx	lr
    f278:	100042b8 	.word	0x100042b8

0000f27c <AmdtpcRequestServerSend>:
{
    f27c:	b500      	push	{lr}
    f27e:	b085      	sub	sp, #20
    data[0] = 1;
    f280:	2201      	movs	r2, #1
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
    f282:	2304      	movs	r3, #4
    uint8_t data[4] = {0};
    f284:	2100      	movs	r1, #0
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
    f286:	9300      	str	r3, [sp, #0]
    f288:	4610      	mov	r0, r2
    f28a:	ab03      	add	r3, sp, #12
    uint8_t data[4] = {0};
    f28c:	9103      	str	r1, [sp, #12]
    data[0] = 1;
    f28e:	f88d 200c 	strb.w	r2, [sp, #12]
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
    f292:	f004 fcf9 	bl	13c88 <AmdtpcSendPacket>
    if (status != AMDTP_STATUS_SUCCESS)
    f296:	b910      	cbnz	r0, f29e <AmdtpcRequestServerSend+0x22>
}
    f298:	b005      	add	sp, #20
    f29a:	f85d fb04 	ldr.w	pc, [sp], #4
        APP_TRACE_INFO1("AmdtpcRequestServerSend() failed, status = %d\n", AmdtpcSendTestData);
    f29e:	4903      	ldr	r1, [pc, #12]	; (f2ac <AmdtpcRequestServerSend+0x30>)
    f2a0:	4803      	ldr	r0, [pc, #12]	; (f2b0 <AmdtpcRequestServerSend+0x34>)
    f2a2:	f009 f87d 	bl	183a0 <WsfTrace>
}
    f2a6:	b005      	add	sp, #20
    f2a8:	f85d fb04 	ldr.w	pc, [sp], #4
    f2ac:	0000f05d 	.word	0x0000f05d
    f2b0:	00024888 	.word	0x00024888

0000f2b4 <AmdtpcRequestServerSendStop>:
{
    f2b4:	b500      	push	{lr}
    f2b6:	b085      	sub	sp, #20
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
    f2b8:	2304      	movs	r3, #4
    data[0] = 2;
    f2ba:	2002      	movs	r0, #2
    uint8_t data[4] = {0};
    f2bc:	2100      	movs	r1, #0
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
    f2be:	2201      	movs	r2, #1
    f2c0:	9300      	str	r3, [sp, #0]
    uint8_t data[4] = {0};
    f2c2:	9103      	str	r1, [sp, #12]
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
    f2c4:	ab03      	add	r3, sp, #12
    data[0] = 2;
    f2c6:	f88d 000c 	strb.w	r0, [sp, #12]
    status = AmdtpcSendPacket(AMDTP_PKT_TYPE_DATA, false, true, data, sizeof(data));
    f2ca:	4610      	mov	r0, r2
    f2cc:	f004 fcdc 	bl	13c88 <AmdtpcSendPacket>
    if (status != AMDTP_STATUS_SUCCESS)
    f2d0:	b910      	cbnz	r0, f2d8 <AmdtpcRequestServerSendStop+0x24>
}
    f2d2:	b005      	add	sp, #20
    f2d4:	f85d fb04 	ldr.w	pc, [sp], #4
        APP_TRACE_INFO1("AmdtpcRequestServerSend() failed, status = %d\n", AmdtpcSendTestData);
    f2d8:	4903      	ldr	r1, [pc, #12]	; (f2e8 <AmdtpcRequestServerSendStop+0x34>)
    f2da:	4804      	ldr	r0, [pc, #16]	; (f2ec <AmdtpcRequestServerSendStop+0x38>)
    f2dc:	f009 f860 	bl	183a0 <WsfTrace>
}
    f2e0:	b005      	add	sp, #20
    f2e2:	f85d fb04 	ldr.w	pc, [sp], #4
    f2e6:	bf00      	nop
    f2e8:	0000f05d 	.word	0x0000f05d
    f2ec:	00024888 	.word	0x00024888

0000f2f0 <AmdtpcHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AmdtpcHandlerInit(wsfHandlerId_t handlerId)
{
    f2f0:	b538      	push	{r3, r4, r5, lr}
    f2f2:	4604      	mov	r4, r0
  APP_TRACE_INFO0("AmdtpcHandlerInit");
    f2f4:	4814      	ldr	r0, [pc, #80]	; (f348 <AmdtpcHandlerInit+0x58>)

  /* set handle list length */
  amdtpcCb.hdlListLen = AMDTPC_DISC_HDL_LIST_LEN;

  /* Set configuration pointers */
  pAppMasterCfg = (appMasterCfg_t *) &amdtpcMasterCfg;
    f2f6:	4d15      	ldr	r5, [pc, #84]	; (f34c <AmdtpcHandlerInit+0x5c>)
  APP_TRACE_INFO0("AmdtpcHandlerInit");
    f2f8:	f009 f852 	bl	183a0 <WsfTrace>
  pAppMasterCfg = (appMasterCfg_t *) &amdtpcMasterCfg;
    f2fc:	4914      	ldr	r1, [pc, #80]	; (f350 <AmdtpcHandlerInit+0x60>)
  amdtpcCb.handlerId = handlerId;
    f2fe:	4b15      	ldr	r3, [pc, #84]	; (f354 <AmdtpcHandlerInit+0x64>)
  pAppMasterCfg = (appMasterCfg_t *) &amdtpcMasterCfg;
    f300:	600d      	str	r5, [r1, #0]
  pAppSecCfg = (appSecCfg_t *) &amdtpcSecCfg;
    f302:	4815      	ldr	r0, [pc, #84]	; (f358 <AmdtpcHandlerInit+0x68>)
    f304:	4d15      	ldr	r5, [pc, #84]	; (f35c <AmdtpcHandlerInit+0x6c>)
    f306:	6005      	str	r5, [r0, #0]
  amdtpcCb.hdlListLen = AMDTPC_DISC_HDL_LIST_LEN;
    f308:	210a      	movs	r1, #10
    f30a:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
  pAppDiscCfg = (appDiscCfg_t *) &amdtpcDiscCfg;
  pAppCfg = (appCfg_t *)&amdtpcAppCfg;
    f30e:	4914      	ldr	r1, [pc, #80]	; (f360 <AmdtpcHandlerInit+0x70>)
    f310:	4814      	ldr	r0, [pc, #80]	; (f364 <AmdtpcHandlerInit+0x74>)
  amdtpcCb.handlerId = handlerId;
    f312:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
  pSmpCfg = (smpCfg_t *) &amdtpcSmpCfg;
    f316:	4b14      	ldr	r3, [pc, #80]	; (f368 <AmdtpcHandlerInit+0x78>)
  pAppDiscCfg = (appDiscCfg_t *) &amdtpcDiscCfg;
    f318:	4a14      	ldr	r2, [pc, #80]	; (f36c <AmdtpcHandlerInit+0x7c>)
  pAppCfg = (appCfg_t *)&amdtpcAppCfg;
    f31a:	6008      	str	r0, [r1, #0]
  pSmpCfg = (smpCfg_t *) &amdtpcSmpCfg;
    f31c:	4914      	ldr	r1, [pc, #80]	; (f370 <AmdtpcHandlerInit+0x80>)
    f31e:	6019      	str	r1, [r3, #0]
  pAppDiscCfg = (appDiscCfg_t *) &amdtpcDiscCfg;
    f320:	4b14      	ldr	r3, [pc, #80]	; (f374 <AmdtpcHandlerInit+0x84>)
    f322:	6013      	str	r3, [r2, #0]

  /* Initialize application framework */
  AppMasterInit();
    f324:	f011 fb2a 	bl	2097c <AppMasterInit>
  AppDiscInit();
    f328:	f011 f900 	bl	2052c <AppDiscInit>

  /* Set IRK for the local device */
  DmSecSetLocalIrk(localIrk);
    f32c:	4812      	ldr	r0, [pc, #72]	; (f378 <AmdtpcHandlerInit+0x88>)
    f32e:	f00e f8e1 	bl	1d4f4 <DmSecSetLocalIrk>
  amdtpc_init(handlerId, amdtpDtpRecvCback, amdtpDtpTransCback);
    f332:	4a12      	ldr	r2, [pc, #72]	; (f37c <AmdtpcHandlerInit+0x8c>)
    f334:	4912      	ldr	r1, [pc, #72]	; (f380 <AmdtpcHandlerInit+0x90>)
    f336:	4620      	mov	r0, r4
    f338:	f004 fbbe 	bl	13ab8 <amdtpc_init>

#ifdef MEASURE_THROUGHPUT
  measTpTimer.handlerId = handlerId;
    f33c:	4b11      	ldr	r3, [pc, #68]	; (f384 <AmdtpcHandlerInit+0x94>)
  measTpTimer.msg.event = AMDTP_MEAS_TP_TIMER_IND;
    f33e:	22a1      	movs	r2, #161	; 0xa1
  measTpTimer.handlerId = handlerId;
    f340:	731c      	strb	r4, [r3, #12]
  measTpTimer.msg.event = AMDTP_MEAS_TP_TIMER_IND;
    f342:	729a      	strb	r2, [r3, #10]
#endif
}
    f344:	bd38      	pop	{r3, r4, r5, pc}
    f346:	bf00      	nop
    f348:	000248b8 	.word	0x000248b8
    f34c:	00024954 	.word	0x00024954
    f350:	1000b43c 	.word	0x1000b43c
    f354:	1000425c 	.word	0x1000425c
    f358:	1000b440 	.word	0x1000b440
    f35c:	0002495c 	.word	0x0002495c
    f360:	1000b434 	.word	0x1000b434
    f364:	00024924 	.word	0x00024924
    f368:	10002e54 	.word	0x10002e54
    f36c:	1000b438 	.word	0x1000b438
    f370:	00024964 	.word	0x00024964
    f374:	00024938 	.word	0x00024938
    f378:	10002b00 	.word	0x10002b00
    f37c:	0000f0ad 	.word	0x0000f0ad
    f380:	0000f0d5 	.word	0x0000f0d5
    f384:	100042a8 	.word	0x100042a8

0000f388 <AmdtpcHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void AmdtpcHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  if (pMsg != NULL)
    f388:	2900      	cmp	r1, #0
    f38a:	d047      	beq.n	f41c <AmdtpcHandler+0x94>
{
    f38c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f38e:	460c      	mov	r4, r1
  {
    APP_TRACE_INFO1("Amdtpc got evt %d", pMsg->event);
    f390:	48a7      	ldr	r0, [pc, #668]	; (f630 <AmdtpcHandler+0x2a8>)
    f392:	7889      	ldrb	r1, [r1, #2]
{
    f394:	b083      	sub	sp, #12
    APP_TRACE_INFO1("Amdtpc got evt %d", pMsg->event);
    f396:	f009 f803 	bl	183a0 <WsfTrace>

    /* process ATT messages */
    if (pMsg->event <= ATT_CBACK_END)
    f39a:	78a3      	ldrb	r3, [r4, #2]
    f39c:	2b12      	cmp	r3, #18
    f39e:	d93e      	bls.n	f41e <AmdtpcHandler+0x96>
    {
      /* process discovery-related ATT messages */
      AppDiscProcAttMsg((attEvt_t *) pMsg);
    }
    /* process DM messages */
    else if (pMsg->event <= DM_CBACK_END)
    f3a0:	2b68      	cmp	r3, #104	; 0x68
    f3a2:	f240 80a9 	bls.w	f4f8 <AmdtpcHandler+0x170>
  switch(pMsg->hdr.event)
    f3a6:	2ba0      	cmp	r3, #160	; 0xa0
    f3a8:	f000 80a0 	beq.w	f4ec <AmdtpcHandler+0x164>
    f3ac:	2ba1      	cmp	r3, #161	; 0xa1
    f3ae:	d133      	bne.n	f418 <AmdtpcHandler+0x90>
    APP_TRACE_INFO1("throughput : %d Bytes/s\n", gTotalDataBytesRecev);
    f3b0:	4ca0      	ldr	r4, [pc, #640]	; (f634 <AmdtpcHandler+0x2ac>)
    f3b2:	48a1      	ldr	r0, [pc, #644]	; (f638 <AmdtpcHandler+0x2b0>)
    f3b4:	6821      	ldr	r1, [r4, #0]
    f3b6:	f008 fff3 	bl	183a0 <WsfTrace>
    WsfTimerStartSec(&measTpTimer, 1);
    f3ba:	48a0      	ldr	r0, [pc, #640]	; (f63c <AmdtpcHandler+0x2b4>)
    gTotalDataBytesRecev = 0;
    f3bc:	2300      	movs	r3, #0
    WsfTimerStartSec(&measTpTimer, 1);
    f3be:	2101      	movs	r1, #1
    gTotalDataBytesRecev = 0;
    f3c0:	6023      	str	r3, [r4, #0]
    }

    /* perform profile and user interface-related operations */
    amdtpcProcMsg((dmEvt_t *) pMsg);
  }
}
    f3c2:	b003      	add	sp, #12
    f3c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    WsfTimerStartSec(&measTpTimer, 1);
    f3c8:	f008 bec4 	b.w	18154 <WsfTimerStartSec>
  if (!amdtpcCb.scanning || !amdtpcCb.autoConnect)
    f3cc:	4d9c      	ldr	r5, [pc, #624]	; (f640 <AmdtpcHandler+0x2b8>)
    f3ce:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    f3d2:	b30b      	cbz	r3, f418 <AmdtpcHandler+0x90>
    f3d4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    f3d8:	b1f3      	cbz	r3, f418 <AmdtpcHandler+0x90>
  if ((dbHdl = AppDbFindByAddr(pMsg->scanReport.addrType, pMsg->scanReport.addr)) != APP_DB_HDL_NONE)
    f3da:	f104 070c 	add.w	r7, r4, #12
    f3de:	7ae0      	ldrb	r0, [r4, #11]
    f3e0:	4639      	mov	r1, r7
    f3e2:	f004 ffa7 	bl	14334 <AppDbFindByAddr>
    f3e6:	4606      	mov	r6, r0
    f3e8:	2800      	cmp	r0, #0
    f3ea:	f000 80f3 	beq.w	f5d4 <AmdtpcHandler+0x24c>
    if (DM_RAND_ADDR_RPA(pMsg->scanReport.directAddr, pMsg->scanReport.directAddrType))
    f3ee:	7ca2      	ldrb	r2, [r4, #18]
    f3f0:	2a01      	cmp	r2, #1
    f3f2:	f000 810c 	beq.w	f60e <AmdtpcHandler+0x286>
    amdtpcCb.autoConnect = FALSE;
    f3f6:	2300      	movs	r3, #0
    f3f8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    AppScanStop();
    f3fc:	f011 fe12 	bl	21024 <AppScanStop>
    amdtpcConnInfo.addrType = pMsg->scanReport.addrType;
    f400:	4b90      	ldr	r3, [pc, #576]	; (f644 <AmdtpcHandler+0x2bc>)
    f402:	7ae2      	ldrb	r2, [r4, #11]
    memcpy(amdtpcConnInfo.addr, pMsg->scanReport.addr, sizeof(bdAddr_t));
    f404:	68e0      	ldr	r0, [r4, #12]
    f406:	88b9      	ldrh	r1, [r7, #4]
    amdtpcConnInfo.addrType = pMsg->scanReport.addrType;
    f408:	711a      	strb	r2, [r3, #4]
    amdtpcConnInfo.doConnect = TRUE;
    f40a:	2201      	movs	r2, #1
    memcpy(amdtpcConnInfo.addr, pMsg->scanReport.addr, sizeof(bdAddr_t));
    f40c:	f8c3 0005 	str.w	r0, [r3, #5]
    f410:	f8a3 1009 	strh.w	r1, [r3, #9]
    amdtpcConnInfo.dbHdl = dbHdl;
    f414:	601e      	str	r6, [r3, #0]
    amdtpcConnInfo.doConnect = TRUE;
    f416:	72da      	strb	r2, [r3, #11]
}
    f418:	b003      	add	sp, #12
    f41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f41c:	4770      	bx	lr
      AppDiscProcAttMsg((attEvt_t *) pMsg);
    f41e:	4620      	mov	r0, r4
    f420:	f010 ff90 	bl	20344 <AppDiscProcAttMsg>
  switch(pMsg->hdr.event)
    f424:	78a3      	ldrb	r3, [r4, #2]
    f426:	2b35      	cmp	r3, #53	; 0x35
    f428:	d8bd      	bhi.n	f3a6 <AmdtpcHandler+0x1e>
    f42a:	2b09      	cmp	r3, #9
    f42c:	d9f4      	bls.n	f418 <AmdtpcHandler+0x90>
    f42e:	3b0a      	subs	r3, #10
    f430:	2b2b      	cmp	r3, #43	; 0x2b
    f432:	d8f1      	bhi.n	f418 <AmdtpcHandler+0x90>
    f434:	a201      	add	r2, pc, #4	; (adr r2, f43c <AmdtpcHandler+0xb4>)
    f436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f43a:	bf00      	nop
    f43c:	0000f4ed 	.word	0x0000f4ed
    f440:	0000f419 	.word	0x0000f419
    f444:	0000f419 	.word	0x0000f419
    f448:	0000f4ed 	.word	0x0000f4ed
    f44c:	0000f419 	.word	0x0000f419
    f450:	0000f419 	.word	0x0000f419
    f454:	0000f419 	.word	0x0000f419
    f458:	0000f419 	.word	0x0000f419
    f45c:	0000f419 	.word	0x0000f419
    f460:	0000f419 	.word	0x0000f419
    f464:	0000f419 	.word	0x0000f419
    f468:	0000f419 	.word	0x0000f419
    f46c:	0000f419 	.word	0x0000f419
    f470:	0000f419 	.word	0x0000f419
    f474:	0000f419 	.word	0x0000f419
    f478:	0000f419 	.word	0x0000f419
    f47c:	0000f419 	.word	0x0000f419
    f480:	0000f419 	.word	0x0000f419
    f484:	0000f419 	.word	0x0000f419
    f488:	0000f419 	.word	0x0000f419
    f48c:	0000f419 	.word	0x0000f419
    f490:	0000f419 	.word	0x0000f419
    f494:	0000f58d 	.word	0x0000f58d
    f498:	0000f419 	.word	0x0000f419
    f49c:	0000f419 	.word	0x0000f419
    f4a0:	0000f419 	.word	0x0000f419
    f4a4:	0000f57d 	.word	0x0000f57d
    f4a8:	0000f563 	.word	0x0000f563
    f4ac:	0000f3cd 	.word	0x0000f3cd
    f4b0:	0000f559 	.word	0x0000f559
    f4b4:	0000f54f 	.word	0x0000f54f
    f4b8:	0000f419 	.word	0x0000f419
    f4bc:	0000f5af 	.word	0x0000f5af
    f4c0:	0000f54b 	.word	0x0000f54b
    f4c4:	0000f53f 	.word	0x0000f53f
    f4c8:	0000f5b3 	.word	0x0000f5b3
    f4cc:	0000f51b 	.word	0x0000f51b
    f4d0:	0000f419 	.word	0x0000f419
    f4d4:	0000f419 	.word	0x0000f419
    f4d8:	0000f419 	.word	0x0000f419
    f4dc:	0000f419 	.word	0x0000f419
    f4e0:	0000f419 	.word	0x0000f419
    f4e4:	0000f419 	.word	0x0000f419
    f4e8:	0000f50f 	.word	0x0000f50f
      amdtpc_proc_msg(&pMsg->hdr);
    f4ec:	4620      	mov	r0, r4
}
    f4ee:	b003      	add	sp, #12
    f4f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      amdtpc_proc_msg(&pMsg->hdr);
    f4f4:	f004 bb36 	b.w	13b64 <amdtpc_proc_msg>
      AppMasterProcDmMsg((dmEvt_t *) pMsg);
    f4f8:	4620      	mov	r0, r4
    f4fa:	f011 fa4f 	bl	2099c <AppMasterProcDmMsg>
      AppMasterSecProcDmMsg((dmEvt_t *) pMsg);
    f4fe:	4620      	mov	r0, r4
    f500:	f011 fb8c 	bl	20c1c <AppMasterSecProcDmMsg>
      AppDiscProcDmMsg((dmEvt_t *) pMsg);
    f504:	4620      	mov	r0, r4
    f506:	f010 fe3f 	bl	20188 <AppDiscProcDmMsg>
  switch(pMsg->hdr.event)
    f50a:	78a3      	ldrb	r3, [r4, #2]
    f50c:	e78b      	b.n	f426 <AmdtpcHandler+0x9e>
      AppHandleNumericComparison(&pMsg->cnfInd);
    f50e:	4620      	mov	r0, r4
}
    f510:	b003      	add	sp, #12
    f512:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      AppHandleNumericComparison(&pMsg->cnfInd);
    f516:	f011 b971 	b.w	207fc <AppHandleNumericComparison>
      if (pMsg->authReq.oob)
    f51a:	7923      	ldrb	r3, [r4, #4]
    f51c:	2b00      	cmp	r3, #0
    f51e:	d04c      	beq.n	f5ba <AmdtpcHandler+0x232>
        if (amdtpcOobCfg != NULL)
    f520:	4b49      	ldr	r3, [pc, #292]	; (f648 <AmdtpcHandler+0x2c0>)
        dmConnId_t connId = (dmConnId_t) pMsg->hdr.param;
    f522:	7820      	ldrb	r0, [r4, #0]
        if (amdtpcOobCfg != NULL)
    f524:	6819      	ldr	r1, [r3, #0]
    f526:	b119      	cbz	r1, f530 <AmdtpcHandler+0x1a8>
          DmSecSetOob(connId, amdtpcOobCfg);
    f528:	9001      	str	r0, [sp, #4]
    f52a:	f00e f829 	bl	1d580 <DmSecSetOob>
    f52e:	9801      	ldr	r0, [sp, #4]
        DmSecAuthRsp(connId, 0, NULL);
    f530:	2200      	movs	r2, #0
    f532:	4611      	mov	r1, r2
}
    f534:	b003      	add	sp, #12
    f536:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        DmSecAuthRsp(connId, 0, NULL);
    f53a:	f00d bfb1 	b.w	1d4a0 <DmSecAuthRsp>
      uiEvent = APP_UI_SEC_ENCRYPT;
    f53e:	200c      	movs	r0, #12
}
    f540:	b003      	add	sp, #12
    f542:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AppUiAction(uiEvent);
    f546:	f005 b80b 	b.w	14560 <AppUiAction>
      uiEvent = APP_UI_SEC_PAIR_FAIL;
    f54a:	200b      	movs	r0, #11
    f54c:	e7f8      	b.n	f540 <AmdtpcHandler+0x1b8>
      amdtpc_proc_msg(&pMsg->hdr);
    f54e:	4620      	mov	r0, r4
    f550:	f004 fb08 	bl	13b64 <amdtpc_proc_msg>
      uiEvent = APP_UI_CONN_CLOSE;
    f554:	2009      	movs	r0, #9
    f556:	e7f3      	b.n	f540 <AmdtpcHandler+0x1b8>
      am_menu_printf(" Connection opened\r\n");
    f558:	483c      	ldr	r0, [pc, #240]	; (f64c <AmdtpcHandler+0x2c4>)
    f55a:	f000 f931 	bl	f7c0 <am_menu_printf>
      uiEvent = APP_UI_CONN_OPEN;
    f55e:	2008      	movs	r0, #8
    f560:	e7ee      	b.n	f540 <AmdtpcHandler+0x1b8>
  if (pMsg->hdr.status == HCI_SUCCESS)
    f562:	78e4      	ldrb	r4, [r4, #3]
    f564:	b92c      	cbnz	r4, f572 <AmdtpcHandler+0x1ea>
    if (amdtpcConnInfo.doConnect)
    f566:	4d37      	ldr	r5, [pc, #220]	; (f644 <AmdtpcHandler+0x2bc>)
    amdtpcCb.scanning = FALSE;
    f568:	4a35      	ldr	r2, [pc, #212]	; (f640 <AmdtpcHandler+0x2b8>)
    if (amdtpcConnInfo.doConnect)
    f56a:	7aeb      	ldrb	r3, [r5, #11]
    amdtpcCb.scanning = FALSE;
    f56c:	f8a2 402b 	strh.w	r4, [r2, #43]	; 0x2b
    if (amdtpcConnInfo.doConnect)
    f570:	bb4b      	cbnz	r3, f5c6 <AmdtpcHandler+0x23e>
      am_menu_printf("scan stop\r\n");
    f572:	4837      	ldr	r0, [pc, #220]	; (f650 <AmdtpcHandler+0x2c8>)
    f574:	f000 f924 	bl	f7c0 <am_menu_printf>
      uiEvent = APP_UI_SCAN_STOP;
    f578:	2006      	movs	r0, #6
    f57a:	e7e1      	b.n	f540 <AmdtpcHandler+0x1b8>
  if (pMsg->hdr.status == HCI_SUCCESS)
    f57c:	78e3      	ldrb	r3, [r4, #3]
    f57e:	b9d3      	cbnz	r3, f5b6 <AmdtpcHandler+0x22e>
    amdtpcCb.scanning = TRUE;
    f580:	4b2f      	ldr	r3, [pc, #188]	; (f640 <AmdtpcHandler+0x2b8>)
    f582:	2201      	movs	r2, #1
    f584:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
      uiEvent = APP_UI_SCAN_START;
    f588:	2005      	movs	r0, #5
    f58a:	e7d9      	b.n	f540 <AmdtpcHandler+0x1b8>
      AttsCalculateDbHash();
    f58c:	f006 ff52 	bl	16434 <AttsCalculateDbHash>
      DmSecGenerateEccKeyReq();
    f590:	f00d fff8 	bl	1d584 <DmSecGenerateEccKeyReq>
  amdtpcCb.scanning = FALSE;
    f594:	492a      	ldr	r1, [pc, #168]	; (f640 <AmdtpcHandler+0x2b8>)
  amdtpcConnInfo.doConnect = FALSE;
    f596:	4a2b      	ldr	r2, [pc, #172]	; (f644 <AmdtpcHandler+0x2bc>)
  DmConnSetConnSpec((hciConnSpec_t *) &amdtpcConnCfg);
    f598:	482e      	ldr	r0, [pc, #184]	; (f654 <AmdtpcHandler+0x2cc>)
  amdtpcCb.scanning = FALSE;
    f59a:	2300      	movs	r3, #0
    f59c:	f8a1 302b 	strh.w	r3, [r1, #43]	; 0x2b
  amdtpcConnInfo.doConnect = FALSE;
    f5a0:	72d3      	strb	r3, [r2, #11]
  DmConnSetConnSpec((hciConnSpec_t *) &amdtpcConnCfg);
    f5a2:	f00c fd3f 	bl	1c024 <DmConnSetConnSpec>
      BleMenuInit();
    f5a6:	f00b fa0d 	bl	1a9c4 <BleMenuInit>
      uiEvent = APP_UI_RESET_CMPL;
    f5aa:	2001      	movs	r0, #1
    f5ac:	e7c8      	b.n	f540 <AmdtpcHandler+0x1b8>
      uiEvent = APP_UI_SEC_PAIR_CMPL;
    f5ae:	200a      	movs	r0, #10
    f5b0:	e7c6      	b.n	f540 <AmdtpcHandler+0x1b8>
  switch(pMsg->hdr.event)
    f5b2:	200d      	movs	r0, #13
    f5b4:	e7c4      	b.n	f540 <AmdtpcHandler+0x1b8>
      uiEvent = APP_UI_SCAN_START;
    f5b6:	2005      	movs	r0, #5
    f5b8:	e7c2      	b.n	f540 <AmdtpcHandler+0x1b8>
        AppHandlePasskey(&pMsg->authReq);
    f5ba:	4620      	mov	r0, r4
}
    f5bc:	b003      	add	sp, #12
    f5be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        AppHandlePasskey(&pMsg->authReq);
    f5c2:	f011 b8ef 	b.w	207a4 <AppHandlePasskey>
      AppConnOpen(amdtpcConnInfo.addrType, amdtpcConnInfo.addr, amdtpcConnInfo.dbHdl);
    f5c6:	682a      	ldr	r2, [r5, #0]
    f5c8:	7928      	ldrb	r0, [r5, #4]
    f5ca:	1d69      	adds	r1, r5, #5
    f5cc:	f011 fd44 	bl	21058 <AppConnOpen>
      amdtpcConnInfo.doConnect = FALSE;
    f5d0:	72ec      	strb	r4, [r5, #11]
    f5d2:	e7ce      	b.n	f572 <AmdtpcHandler+0x1ea>
  else if (DM_RAND_ADDR_RPA(pMsg->scanReport.addr, pMsg->scanReport.addrType))
    f5d4:	7ae3      	ldrb	r3, [r4, #11]
    f5d6:	2b01      	cmp	r3, #1
    f5d8:	d104      	bne.n	f5e4 <AmdtpcHandler+0x25c>
    f5da:	7c63      	ldrb	r3, [r4, #17]
    f5dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f5e0:	2b40      	cmp	r3, #64	; 0x40
    f5e2:	d021      	beq.n	f628 <AmdtpcHandler+0x2a0>
  else if ((pData = DmFindAdType(DM_ADV_TYPE_MANUFACTURER, pMsg->scanReport.len,
    f5e4:	6862      	ldr	r2, [r4, #4]
    f5e6:	7a21      	ldrb	r1, [r4, #8]
    f5e8:	20ff      	movs	r0, #255	; 0xff
    f5ea:	f00c ffcb 	bl	1c584 <DmFindAdType>
    f5ee:	2800      	cmp	r0, #0
    f5f0:	f43f af12 	beq.w	f418 <AmdtpcHandler+0x90>
    if (pData[DM_AD_LEN_IDX] >= 3 && BYTES_UINT16_CMP(&pData[DM_AD_DATA_IDX], HCI_ID_ARM))
    f5f4:	7803      	ldrb	r3, [r0, #0]
    f5f6:	2b02      	cmp	r3, #2
    f5f8:	f67f af0e 	bls.w	f418 <AmdtpcHandler+0x90>
    f5fc:	78c3      	ldrb	r3, [r0, #3]
    f5fe:	2b00      	cmp	r3, #0
    f600:	f47f af0a 	bne.w	f418 <AmdtpcHandler+0x90>
    f604:	7883      	ldrb	r3, [r0, #2]
    f606:	2b5f      	cmp	r3, #95	; 0x5f
    f608:	f47f af06 	bne.w	f418 <AmdtpcHandler+0x90>
    f60c:	e6f3      	b.n	f3f6 <AmdtpcHandler+0x6e>
    if (DM_RAND_ADDR_RPA(pMsg->scanReport.directAddr, pMsg->scanReport.directAddrType))
    f60e:	7e23      	ldrb	r3, [r4, #24]
    f610:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f614:	2b40      	cmp	r3, #64	; 0x40
    f616:	f47f aeee 	bne.w	f3f6 <AmdtpcHandler+0x6e>
      AppMasterResolveAddr(pMsg, dbHdl, APP_RESOLVE_DIRECT_RPA);
    f61a:	4601      	mov	r1, r0
    AppMasterResolveAddr(pMsg, APP_DB_HDL_NONE, APP_RESOLVE_ADV_RPA);
    f61c:	4620      	mov	r0, r4
}
    f61e:	b003      	add	sp, #12
    f620:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AppMasterResolveAddr(pMsg, APP_DB_HDL_NONE, APP_RESOLVE_ADV_RPA);
    f624:	f011 bc12 	b.w	20e4c <AppMasterResolveAddr>
    f628:	4602      	mov	r2, r0
    f62a:	4601      	mov	r1, r0
    f62c:	e7f6      	b.n	f61c <AmdtpcHandler+0x294>
    f62e:	bf00      	nop
    f630:	000248cc 	.word	0x000248cc
    f634:	100042a0 	.word	0x100042a0
    f638:	000248e0 	.word	0x000248e0
    f63c:	100042a8 	.word	0x100042a8
    f640:	1000425c 	.word	0x1000425c
    f644:	1000428c 	.word	0x1000428c
    f648:	10004298 	.word	0x10004298
    f64c:	00024908 	.word	0x00024908
    f650:	000248fc 	.word	0x000248fc
    f654:	0002492c 	.word	0x0002492c

0000f658 <AmdtpcStart>:
 */
/*************************************************************************************************/
void AmdtpcStart(void)
{
  /* Register for stack callbacks */
  DmRegister(amdtpcDmCback);
    f658:	490b      	ldr	r1, [pc, #44]	; (f688 <AmdtpcStart+0x30>)
{
    f65a:	b508      	push	{r3, lr}
  DmRegister(amdtpcDmCback);
    f65c:	4608      	mov	r0, r1
    f65e:	f00c ff75 	bl	1c54c <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, amdtpcDmCback);
    f662:	4909      	ldr	r1, [pc, #36]	; (f688 <AmdtpcStart+0x30>)
    f664:	2003      	movs	r0, #3
    f666:	f00c fc81 	bl	1bf6c <DmConnRegister>
  AttRegister(amdtpcAttCback);
    f66a:	4808      	ldr	r0, [pc, #32]	; (f68c <AmdtpcStart+0x34>)
    f66c:	f008 fa18 	bl	17aa0 <AttRegister>

  /* Register for app framework button callbacks */
  AppUiBtnRegister(amdtpcBtnCback);
    f670:	4807      	ldr	r0, [pc, #28]	; (f690 <AmdtpcStart+0x38>)
    f672:	f005 f841 	bl	146f8 <AppUiBtnRegister>

  /* Register for app framework discovery callbacks */
  AppDiscRegister(amdtpcDiscCback);
    f676:	4807      	ldr	r0, [pc, #28]	; (f694 <AmdtpcStart+0x3c>)
    f678:	f010 ff64 	bl	20544 <AppDiscRegister>

  /* Initialize attribute server database */
  SvcCoreAddGroup();
    f67c:	f00e f832 	bl	1d6e4 <SvcCoreAddGroup>

  /* Reset the device */
  DmDevReset();
}
    f680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DmDevReset();
    f684:	f00c bef4 	b.w	1c470 <DmDevReset>
    f688:	0000f1a9 	.word	0x0000f1a9
    f68c:	0000f01d 	.word	0x0000f01d
    f690:	0000f105 	.word	0x0000f105
    f694:	0000ef11 	.word	0x0000ef11

0000f698 <secEccRng>:
 *
 *  \return TRUE if successful.
 */
/*************************************************************************************************/
static int secEccRng(uint8_t *p_dest, unsigned p_size)
{
    f698:	b508      	push	{r3, lr}
  SecRand(p_dest, p_size);
    f69a:	b2c9      	uxtb	r1, r1
    f69c:	f00b fc2a 	bl	1aef4 <SecRand>
  return TRUE;
}
    f6a0:	2001      	movs	r0, #1
    f6a2:	bd08      	pop	{r3, pc}

0000f6a4 <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
    f6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6a6:	4605      	mov	r5, r0
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
    f6a8:	2064      	movs	r0, #100	; 0x64
{
    f6aa:	460e      	mov	r6, r1
    f6ac:	4617      	mov	r7, r2
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
    f6ae:	f008 faf7 	bl	17ca0 <WsfMsgAlloc>

  if (pMsg)
    f6b2:	4604      	mov	r4, r0
    f6b4:	b900      	cbnz	r0, f6b8 <SecEccGenKey+0x14>

    return TRUE;
  }

  return FALSE;
}
    f6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uECC_make_key(pMsg->data.key.pubKey_x, pMsg->data.key.privKey);
    f6b8:	f100 0144 	add.w	r1, r0, #68	; 0x44
    f6bc:	3004      	adds	r0, #4
    f6be:	f00a fd29 	bl	1a114 <uECC_make_key>
    pMsg->hdr.status = HCI_SUCCESS;
    f6c2:	2300      	movs	r3, #0
    WsfMsgSend(handlerId, pMsg);
    f6c4:	4628      	mov	r0, r5
    pMsg->hdr.event = event;
    f6c6:	70a7      	strb	r7, [r4, #2]
    pMsg->hdr.param = param;
    f6c8:	8026      	strh	r6, [r4, #0]
    pMsg->hdr.status = HCI_SUCCESS;
    f6ca:	70e3      	strb	r3, [r4, #3]
    WsfMsgSend(handlerId, pMsg);
    f6cc:	4621      	mov	r1, r4
    f6ce:	f008 faf3 	bl	17cb8 <WsfMsgSend>
    return TRUE;
    f6d2:	2001      	movs	r0, #1
}
    f6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f6d6:	bf00      	nop

0000f6d8 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
    f6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6dc:	4605      	mov	r5, r0
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
    f6de:	2064      	movs	r0, #100	; 0x64
{
    f6e0:	4688      	mov	r8, r1
    f6e2:	4617      	mov	r7, r2
    f6e4:	461e      	mov	r6, r3
  secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
    f6e6:	f008 fadb 	bl	17ca0 <WsfMsgAlloc>

  if (pMsg)
    f6ea:	4604      	mov	r4, r0
    f6ec:	b908      	cbnz	r0, f6f2 <SecEccGenSharedSecret+0x1a>

    return TRUE;
  }

  return FALSE;
}
    f6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool_t keyValid = uECC_valid_public_key(pKey->pubKey_x);
    f6f2:	4628      	mov	r0, r5
    f6f4:	f00a ff14 	bl	1a520 <uECC_valid_public_key>
    if (keyValid)
    f6f8:	b2c0      	uxtb	r0, r0
    f6fa:	b978      	cbnz	r0, f71c <SecEccGenSharedSecret+0x44>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
    f6fc:	2220      	movs	r2, #32
    f6fe:	21ff      	movs	r1, #255	; 0xff
    f700:	1d20      	adds	r0, r4, #4
    f702:	f011 fd37 	bl	21174 <memset>
    pMsg->hdr.event = event;
    f706:	70a6      	strb	r6, [r4, #2]
    pMsg->hdr.param = param;
    f708:	8027      	strh	r7, [r4, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
    f70a:	2312      	movs	r3, #18
    WsfMsgSend(handlerId, pMsg);
    f70c:	4640      	mov	r0, r8
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
    f70e:	70e3      	strb	r3, [r4, #3]
    WsfMsgSend(handlerId, pMsg);
    f710:	4621      	mov	r1, r4
    f712:	f008 fad1 	bl	17cb8 <WsfMsgSend>
    return TRUE;
    f716:	2001      	movs	r0, #1
}
    f718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uECC_shared_secret(pKey->pubKey_x, pKey->privKey, pMsg->data.sharedSecret.secret);
    f71c:	1d22      	adds	r2, r4, #4
    f71e:	f105 0140 	add.w	r1, r5, #64	; 0x40
    f722:	4628      	mov	r0, r5
    f724:	f00a fdfc 	bl	1a320 <uECC_shared_secret>
    pMsg->hdr.event = event;
    f728:	70a6      	strb	r6, [r4, #2]
    pMsg->hdr.param = param;
    f72a:	8027      	strh	r7, [r4, #0]
    pMsg->hdr.status = keyValid ? HCI_SUCCESS : HCI_ERR_INVALID_PARAM;
    f72c:	2300      	movs	r3, #0
    f72e:	e7ed      	b.n	f70c <SecEccGenSharedSecret+0x34>

0000f730 <SecEccInit>:
 */
/*************************************************************************************************/
void SecEccInit()
{
  //srand((unsigned int)time(NULL));
  uECC_set_rng(secEccRng);
    f730:	4801      	ldr	r0, [pc, #4]	; (f738 <SecEccInit+0x8>)
    f732:	f00a bce9 	b.w	1a108 <uECC_set_rng>
    f736:	bf00      	nop
    f738:	0000f699 	.word	0x0000f699

0000f73c <setup_serial>:
// UART configuration settings.
//
//*****************************************************************************
void
setup_serial(int32_t i32Module)
{
    f73c:	b530      	push	{r4, r5, lr}
    //
    // Enable a UART to use for the menu.
    //
    const am_hal_uart_config_t sUartConfig =
    f73e:	4c1b      	ldr	r4, [pc, #108]	; (f7ac <setup_serial+0x70>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f740:	4d1b      	ldr	r5, [pc, #108]	; (f7b0 <setup_serial+0x74>)
    f742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
    f744:	b08b      	sub	sp, #44	; 0x2c
    const am_hal_uart_config_t sUartConfig =
    f746:	46ec      	mov	ip, sp
    f748:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    f74c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    f74e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    f752:	e894 0003 	ldmia.w	r4, {r0, r1}
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    am_hal_uart_initialize(0, &UART);
    f756:	4c17      	ldr	r4, [pc, #92]	; (f7b4 <setup_serial+0x78>)
    const am_hal_uart_config_t sUartConfig =
    f758:	e88c 0003 	stmia.w	ip, {r0, r1}
    am_hal_uart_initialize(0, &UART);
    f75c:	4621      	mov	r1, r4
    f75e:	2000      	movs	r0, #0
    f760:	f014 f882 	bl	23868 <am_hal_uart_initialize>
    am_hal_uart_power_control(UART, AM_HAL_SYSCTRL_WAKE, false);
    f764:	2200      	movs	r2, #0
    f766:	4611      	mov	r1, r2
    f768:	6820      	ldr	r0, [r4, #0]
    f76a:	f014 f8a5 	bl	238b8 <am_hal_uart_power_control>
    am_hal_uart_configure(UART, &sUartConfig);
    f76e:	4669      	mov	r1, sp
    f770:	6820      	ldr	r0, [r4, #0]
    f772:	f014 f919 	bl	239a8 <am_hal_uart_configure>
    // FreeRTOS API calls.
    //
    NVIC_SetPriority(UART0_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);


    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    f776:	4a10      	ldr	r2, [pc, #64]	; (f7b8 <setup_serial+0x7c>)
    f778:	2380      	movs	r3, #128	; 0x80
    f77a:	6811      	ldr	r1, [r2, #0]
    f77c:	f885 330f 	strb.w	r3, [r5, #783]	; 0x30f
    f780:	2016      	movs	r0, #22
    f782:	f013 fb15 	bl	22db0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    f786:	4b0d      	ldr	r3, [pc, #52]	; (f7bc <setup_serial+0x80>)
    f788:	2017      	movs	r0, #23
    f78a:	6819      	ldr	r1, [r3, #0]
    f78c:	f013 fb10 	bl	22db0 <am_hal_gpio_pinconfig>

    //
    // Enable UART RX interrupts manually.
    //
    am_hal_uart_interrupt_clear(UART, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
    f790:	6820      	ldr	r0, [r4, #0]
    f792:	2150      	movs	r1, #80	; 0x50
    f794:	f014 fc1a 	bl	23fcc <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_enable(UART, AM_HAL_UART_INT_RX | AM_HAL_UART_INT_RX_TMOUT);
    f798:	6820      	ldr	r0, [r4, #0]
    f79a:	2150      	movs	r1, #80	; 0x50
    f79c:	f014 fc02 	bl	23fa4 <am_hal_uart_interrupt_enable>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f7a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f7a4:	602b      	str	r3, [r5, #0]
    NVIC_EnableIRQ(UART0_IRQn);
}
    f7a6:	b00b      	add	sp, #44	; 0x2c
    f7a8:	bd30      	pop	{r4, r5, pc}
    f7aa:	bf00      	nop
    f7ac:	00024028 	.word	0x00024028
    f7b0:	e000e100 	.word	0xe000e100
    f7b4:	100042bc 	.word	0x100042bc
    f7b8:	000264fc 	.word	0x000264fc
    f7bc:	000264f8 	.word	0x000264f8

0000f7c0 <am_menu_printf>:
// buffer for printf
static char g_prfbuf[AM_PRINTF_BUFSIZE];

uint32_t
am_menu_printf(const char *pcFmt, ...)
{
    f7c0:	b40f      	push	{r0, r1, r2, r3}
    f7c2:	b530      	push	{r4, r5, lr}
    f7c4:	b087      	sub	sp, #28
    f7c6:	aa0a      	add	r2, sp, #40	; 0x28
    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    f7c8:	4d0d      	ldr	r5, [pc, #52]	; (f800 <am_menu_printf+0x40>)
{
    f7ca:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(pArgs, pcFmt);
    f7ce:	9200      	str	r2, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    f7d0:	4628      	mov	r0, r5
    f7d2:	f00f ff97 	bl	1f704 <am_util_stdio_vsprintf>
        .ui32NumBytes = ui32NumChars,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = 0,
    };

    am_hal_uart_transfer(UART, &sSend);
    f7d6:	4a0b      	ldr	r2, [pc, #44]	; (f804 <am_menu_printf+0x44>)
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    f7d8:	4604      	mov	r4, r0
    am_hal_uart_transfer_t sSend =
    f7da:	2300      	movs	r3, #0
    am_hal_uart_transfer(UART, &sSend);
    f7dc:	6810      	ldr	r0, [r2, #0]
    am_hal_uart_transfer_t sSend =
    f7de:	9305      	str	r3, [sp, #20]
    f7e0:	f04f 32ff 	mov.w	r2, #4294967295
    am_hal_uart_transfer(UART, &sSend);
    f7e4:	a901      	add	r1, sp, #4
    am_hal_uart_transfer_t sSend =
    f7e6:	e9cd 3501 	strd	r3, r5, [sp, #4]
    f7ea:	e9cd 4203 	strd	r4, r2, [sp, #12]
    am_hal_uart_transfer(UART, &sSend);
    f7ee:	f014 f9d9 	bl	23ba4 <am_hal_uart_transfer>

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    f7f2:	4620      	mov	r0, r4
    f7f4:	b007      	add	sp, #28
    f7f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f7fa:	b004      	add	sp, #16
    f7fc:	4770      	bx	lr
    f7fe:	bf00      	nop
    f800:	100042c0 	.word	0x100042c0
    f804:	100042bc 	.word	0x100042bc

0000f808 <main>:
main(void)
{
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    f808:	2100      	movs	r1, #0
{
    f80a:	b510      	push	{r4, lr}
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    f80c:	4608      	mov	r0, r1
        //32.6 - MOSI
        //33.4 - CSN
        //35.7 - SPI_STATUS
        //41.1 - IRQ (not configured, also SWO)

        am_hal_gpio_pincfg_t sPincfg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    f80e:	2406      	movs	r4, #6
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    f810:	f013 f96e 	bl	22af0 <am_hal_clkgen_control>

        sPincfg.uFuncSel = 6;
        am_hal_gpio_pinconfig(30, sPincfg);
    f814:	4621      	mov	r1, r4
    f816:	201e      	movs	r0, #30
    f818:	f013 faca 	bl	22db0 <am_hal_gpio_pinconfig>
        am_hal_gpio_pinconfig(31, sPincfg);
    f81c:	4621      	mov	r1, r4
    f81e:	201f      	movs	r0, #31
    f820:	f013 fac6 	bl	22db0 <am_hal_gpio_pinconfig>
        am_hal_gpio_pinconfig(32, sPincfg);
    f824:	4621      	mov	r1, r4
    f826:	2020      	movs	r0, #32
    f828:	f013 fac2 	bl	22db0 <am_hal_gpio_pinconfig>
        sPincfg.uFuncSel = 4;
    f82c:	2304      	movs	r3, #4
    f82e:	f363 0402 	bfi	r4, r3, #0, #3
        am_hal_gpio_pinconfig(33, sPincfg);
    f832:	4621      	mov	r1, r4
    f834:	2021      	movs	r0, #33	; 0x21
    f836:	f013 fabb 	bl	22db0 <am_hal_gpio_pinconfig>
        sPincfg.uFuncSel = 7;
        am_hal_gpio_pinconfig(35, sPincfg);
    f83a:	f044 0107 	orr.w	r1, r4, #7
    f83e:	2023      	movs	r0, #35	; 0x23
    f840:	f013 fab6 	bl	22db0 <am_hal_gpio_pinconfig>
        //sPincfg.uFuncSel = 1;
        //am_hal_gpio_pinconfig(41, sPincfg);

    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    f844:	480c      	ldr	r0, [pc, #48]	; (f878 <main+0x70>)
    f846:	f012 ffab 	bl	227a0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    f84a:	f012 ffcd 	bl	227e8 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
    f84e:	f013 ff99 	bl	23784 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
    f852:	2001      	movs	r0, #1
    f854:	f013 ff9e 	bl	23794 <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
    f858:	f011 fcde 	bl	21218 <am_bsp_low_power_init>
    am_bsp_itm_printf_enable();
    f85c:	f011 fcfc 	bl	21258 <am_bsp_itm_printf_enable>
    am_util_stdio_terminal_clear();
    f860:	f010 fbe6 	bl	20030 <am_util_stdio_terminal_clear>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS AMDTP Example\n");
    f864:	4805      	ldr	r0, [pc, #20]	; (f87c <main+0x74>)
    f866:	f010 fbc9 	bl	1fffc <am_util_stdio_printf>

#ifdef BLE_MENU
    setup_serial(0);
    f86a:	2000      	movs	r0, #0
    f86c:	f7ff ff66 	bl	f73c <setup_serial>
#endif

    //
    // Run the application.
    //
    run_tasks();
    f870:	f000 f928 	bl	fac4 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
    f874:	e7fe      	b.n	f874 <main+0x6c>
    f876:	bf00      	nop
    f878:	00028170 	.word	0x00028170
    f87c:	00024980 	.word	0x00024980

0000f880 <uart_data_ready_handler>:

#ifdef BLE_MENU
wsfHandlerId_t g_uartDataReadyHandlerId;
void uart_data_ready_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    BleMenuRx();
    f880:	f00b b80e 	b.w	1a8a0 <BleMenuRx>

0000f884 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
    f884:	b510      	push	{r4, lr}
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    WsfOsInit();
    f886:	f008 fb0f 	bl	17ea8 <WsfOsInit>
    WsfTimerInit();
    f88a:	f008 fc3d 	bl	18108 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
    f88e:	4b33      	ldr	r3, [pc, #204]	; (f95c <exactle_stack_init+0xd8>)
    f890:	4933      	ldr	r1, [pc, #204]	; (f960 <exactle_stack_init+0xdc>)
    f892:	2204      	movs	r2, #4
    f894:	f44f 6038 	mov.w	r0, #2944	; 0xb80
    f898:	f008 f936 	bl	17b08 <WsfBufInit>
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
    f89c:	f5b0 6f38 	cmp.w	r0, #2944	; 0xb80
    f8a0:	d854      	bhi.n	f94c <exactle_stack_init+0xc8>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
    f8a2:	f00b fb15 	bl	1aed0 <SecInit>
    SecAesInit();
    f8a6:	f00b f8fb 	bl	1aaa0 <SecAesInit>
    SecCmacInit();
    f8aa:	f00b faab 	bl	1ae04 <SecCmacInit>
    SecEccInit();
    f8ae:	f7ff ff3f 	bl	f730 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
    f8b2:	482c      	ldr	r0, [pc, #176]	; (f964 <exactle_stack_init+0xe0>)
    f8b4:	f008 faec 	bl	17e90 <WsfOsSetNextHandler>
    HciHandlerInit(handlerId);
    f8b8:	f004 f882 	bl	139c0 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
    f8bc:	482a      	ldr	r0, [pc, #168]	; (f968 <exactle_stack_init+0xe4>)
    f8be:	f008 fae7 	bl	17e90 <WsfOsSetNextHandler>
    f8c2:	4604      	mov	r4, r0
    DmDevVsInit(0);
    f8c4:	2000      	movs	r0, #0
    f8c6:	f00c fe0b 	bl	1c4e0 <DmDevVsInit>
    DmAdvInit();
    f8ca:	f00b fedf 	bl	1b68c <DmAdvInit>
    DmScanInit();
    f8ce:	f00d fd0d 	bl	1d2ec <DmScanInit>
    DmConnInit();
    f8d2:	f00c fb35 	bl	1bf40 <DmConnInit>
    DmConnMasterInit();
    f8d6:	f00c fd27 	bl	1c328 <DmConnMasterInit>
    DmSecInit();
    f8da:	f00d fdfb 	bl	1d4d4 <DmSecInit>
    DmSecLescInit();
    f8de:	f00d fe9b 	bl	1d618 <DmSecLescInit>
    DmPrivInit();
    f8e2:	f00d f817 	bl	1c914 <DmPrivInit>
    DmHandlerInit(handlerId);
    f8e6:	4620      	mov	r0, r4
    f8e8:	f00c fe6e 	bl	1c5c8 <DmHandlerInit>

    L2cInit();
    f8ec:	f00b fc3a 	bl	1b164 <L2cInit>
    L2cMasterInit();
    f8f0:	f00b fcfc 	bl	1b2ec <L2cMasterInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
    f8f4:	481d      	ldr	r0, [pc, #116]	; (f96c <exactle_stack_init+0xe8>)
    f8f6:	f008 facb 	bl	17e90 <WsfOsSetNextHandler>
    AttHandlerInit(handlerId);
    f8fa:	f008 f8a5 	bl	17a48 <AttHandlerInit>
    AttsInit();
    f8fe:	f006 fd7f 	bl	16400 <AttsInit>
    AttsIndInit();
    f902:	f006 fb99 	bl	16038 <AttsIndInit>
    AttcInit();
    f906:	f005 fd9b 	bl	15440 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
    f90a:	4819      	ldr	r0, [pc, #100]	; (f970 <exactle_stack_init+0xec>)
    f90c:	f008 fac0 	bl	17e90 <WsfOsSetNextHandler>
    SmpHandlerInit(handlerId);
    f910:	f7fe fa56 	bl	ddc0 <SmpHandlerInit>
    SmpiInit();
    f914:	f7fd f89e 	bl	ca54 <SmpiInit>
    SmpiScInit();
    f918:	f7fd f892 	bl	ca40 <SmpiScInit>
    HciSetMaxRxAclLen(251);
    f91c:	20fb      	movs	r0, #251	; 0xfb
    f91e:	f002 fa8b 	bl	11e38 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
    f922:	4814      	ldr	r0, [pc, #80]	; (f974 <exactle_stack_init+0xf0>)
    f924:	f008 fab4 	bl	17e90 <WsfOsSetNextHandler>
    AppHandlerInit(handlerId);
    f928:	f010 ff08 	bl	2073c <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(AmdtpcHandler);
    f92c:	4812      	ldr	r0, [pc, #72]	; (f978 <exactle_stack_init+0xf4>)
    f92e:	f008 faaf 	bl	17e90 <WsfOsSetNextHandler>
    AmdtpcHandlerInit(handlerId);
    f932:	f7ff fcdd 	bl	f2f0 <AmdtpcHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
    f936:	4811      	ldr	r0, [pc, #68]	; (f97c <exactle_stack_init+0xf8>)
    f938:	f008 faaa 	bl	17e90 <WsfOsSetNextHandler>
    HciDrvHandlerInit(handlerId);
    f93c:	f000 fa68 	bl	fe10 <HciDrvHandlerInit>

#ifdef BLE_MENU
    g_uartDataReadyHandlerId = WsfOsSetNextHandler(uart_data_ready_handler);
    f940:	480f      	ldr	r0, [pc, #60]	; (f980 <exactle_stack_init+0xfc>)
    f942:	f008 faa5 	bl	17e90 <WsfOsSetNextHandler>
    f946:	4b0f      	ldr	r3, [pc, #60]	; (f984 <exactle_stack_init+0x100>)
    f948:	7018      	strb	r0, [r3, #0]
#endif
}
    f94a:	bd10      	pop	{r4, pc}
        am_util_debug_printf("Memory pool is too small by %d\r\n",
    f94c:	4601      	mov	r1, r0
    f94e:	f5a1 6138 	sub.w	r1, r1, #2944	; 0xb80
    f952:	480d      	ldr	r0, [pc, #52]	; (f988 <exactle_stack_init+0x104>)
    f954:	f010 fb52 	bl	1fffc <am_util_stdio_printf>
    f958:	e7a3      	b.n	f8a2 <exactle_stack_init+0x1e>
    f95a:	bf00      	nop
    f95c:	10002b10 	.word	0x10002b10
    f960:	100043c0 	.word	0x100043c0
    f964:	000139d5 	.word	0x000139d5
    f968:	0001c5e5 	.word	0x0001c5e5
    f96c:	00017a81 	.word	0x00017a81
    f970:	0000de25 	.word	0x0000de25
    f974:	00020749 	.word	0x00020749
    f978:	0000f389 	.word	0x0000f389
    f97c:	0000fe71 	.word	0x0000fe71
    f980:	0000f881 	.word	0x0000f881
    f984:	10004f40 	.word	0x10004f40
    f988:	00024998 	.word	0x00024998
    f98c:	00000000 	.word	0x00000000

0000f990 <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
    f990:	b510      	push	{r4, lr}

    //
    // Check to see what caused this interrupt, then clear the bit from the
    // interrupt register.
    //
    am_hal_uart_interrupt_status_get(UART, &ui32Status, true);
    f992:	4c1d      	ldr	r4, [pc, #116]	; (fa08 <am_uart_isr+0x78>)
{
    f994:	b088      	sub	sp, #32
    am_hal_uart_interrupt_status_get(UART, &ui32Status, true);
    f996:	2201      	movs	r2, #1
    f998:	6820      	ldr	r0, [r4, #0]
    f99a:	a901      	add	r1, sp, #4
    f99c:	f014 fb28 	bl	23ff0 <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(UART, ui32Status);
    f9a0:	9901      	ldr	r1, [sp, #4]
    f9a2:	6820      	ldr	r0, [r4, #0]
    f9a4:	f014 fb12 	bl	23fcc <am_hal_uart_interrupt_clear>

    //
    // Service the uart FIFO.
    //
    const am_hal_uart_transfer_t sGetChar =
    f9a8:	ed9f 7b15 	vldr	d7, [pc, #84]	; fa00 <am_uart_isr+0x70>
    f9ac:	2300      	movs	r3, #0
        .ui32NumBytes = 1,
        .ui32TimeoutMs = AM_HAL_UART_WAIT_FOREVER,
        .pui32BytesTransferred = 0,
    };

    am_hal_uart_transfer(UART, &sGetChar);
    f9ae:	6820      	ldr	r0, [r4, #0]
    const am_hal_uart_transfer_t sGetChar =
    f9b0:	9306      	str	r3, [sp, #24]
    f9b2:	f10d 0203 	add.w	r2, sp, #3
    f9b6:	2401      	movs	r4, #1
    am_hal_uart_transfer(UART, &sGetChar);
    f9b8:	a902      	add	r1, sp, #8
    const am_hal_uart_transfer_t sGetChar =
    f9ba:	ed8d 7b04 	vstr	d7, [sp, #16]
    f9be:	e9cd 4202 	strd	r4, r2, [sp, #8]
    am_hal_uart_transfer(UART, &sGetChar);
    f9c2:	f014 f8ef 	bl	23ba4 <am_hal_uart_transfer>

    if ((rxData == '\n') || (rxData == '\r'))
    f9c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f9ca:	2b0a      	cmp	r3, #10
    f9cc:	d009      	beq.n	f9e2 <am_uart_isr+0x52>
    f9ce:	2b0d      	cmp	r3, #13
    f9d0:	d007      	beq.n	f9e2 <am_uart_isr+0x52>
            WsfMsgSend(g_uartDataReadyHandlerId, pMsg);
        }
    }
    else
    {
        menuRxData[menuRxDataLen++] = rxData;
    f9d2:	4a0e      	ldr	r2, [pc, #56]	; (fa0c <am_uart_isr+0x7c>)
    f9d4:	4c0e      	ldr	r4, [pc, #56]	; (fa10 <am_uart_isr+0x80>)
    f9d6:	6811      	ldr	r1, [r2, #0]
    f9d8:	1c48      	adds	r0, r1, #1
    f9da:	5463      	strb	r3, [r4, r1]
    f9dc:	6010      	str	r0, [r2, #0]
    }
}
    f9de:	b008      	add	sp, #32
    f9e0:	bd10      	pop	{r4, pc}
        if ( (pMsg = WsfMsgAlloc(0)) != NULL )
    f9e2:	2000      	movs	r0, #0
    f9e4:	f008 f95c 	bl	17ca0 <WsfMsgAlloc>
    f9e8:	4601      	mov	r1, r0
    f9ea:	2800      	cmp	r0, #0
    f9ec:	d0f7      	beq.n	f9de <am_uart_isr+0x4e>
            WsfMsgSend(g_uartDataReadyHandlerId, pMsg);
    f9ee:	4b09      	ldr	r3, [pc, #36]	; (fa14 <am_uart_isr+0x84>)
    f9f0:	7818      	ldrb	r0, [r3, #0]
    f9f2:	f008 f961 	bl	17cb8 <WsfMsgSend>
}
    f9f6:	b008      	add	sp, #32
    f9f8:	bd10      	pop	{r4, pc}
    f9fa:	bf00      	nop
    f9fc:	f3af 8000 	nop.w
    fa00:	00000001 	.word	0x00000001
    fa04:	ffffffff 	.word	0xffffffff
    fa08:	100042bc 	.word	0x100042bc
    fa0c:	10006ef4 	.word	0x10006ef4
    fa10:	10006ee0 	.word	0x10006ee0
    fa14:	10004f40 	.word	0x10004f40

0000fa18 <am_ble_isr>:
//*****************************************************************************
void
am_ble_isr(void)
{

    HciDrvIntService();
    fa18:	f000 ba0e 	b.w	fe38 <HciDrvIntService>

0000fa1c <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
    fa1c:	b508      	push	{r3, lr}
    am_util_debug_printf("RadioTask: setup\r\n");
    fa1e:	4804      	ldr	r0, [pc, #16]	; (fa30 <RadioTaskSetup+0x14>)
    fa20:	f010 faec 	bl	1fffc <am_util_stdio_printf>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fa24:	4b03      	ldr	r3, [pc, #12]	; (fa34 <RadioTaskSetup+0x18>)
    fa26:	2280      	movs	r2, #128	; 0x80
    fa28:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c


    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);

}
    fa2c:	bd08      	pop	{r3, pc}
    fa2e:	bf00      	nop
    fa30:	000249bc 	.word	0x000249bc
    fa34:	e000e100 	.word	0xe000e100

0000fa38 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
    fa38:	b508      	push	{r3, lr}
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
    fa3a:	4806      	ldr	r0, [pc, #24]	; (fa54 <RadioTask+0x1c>)
    fa3c:	f010 fade 	bl	1fffc <am_util_stdio_printf>
#endif
    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
    fa40:	2001      	movs	r0, #1
    fa42:	f000 f857 	bl	faf4 <HciDrvRadioBoot>

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
    fa46:	f7ff ff1d 	bl	f884 <exactle_stack_init>


    //
    // Start the "Amdtp" profile.
    //
    AmdtpcStart();
    fa4a:	f7ff fe05 	bl	f658 <AmdtpcStart>
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        wsfOsDispatcher();
    fa4e:	f008 fa3d 	bl	17ecc <wsfOsDispatcher>
    while (1)
    fa52:	e7fc      	b.n	fa4e <RadioTask+0x16>
    fa54:	000249d0 	.word	0x000249d0

0000fa58 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
    fa58:	b500      	push	{lr}
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
    fa5a:	480a      	ldr	r0, [pc, #40]	; (fa84 <setup_task+0x2c>)
{
    fa5c:	b083      	sub	sp, #12
    am_util_debug_printf("Running setup tasks...\r\n");
    fa5e:	f010 facd 	bl	1fffc <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
    fa62:	f7ff ffdb 	bl	fa1c <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
    fa66:	4a08      	ldr	r2, [pc, #32]	; (fa88 <setup_task+0x30>)
    fa68:	4908      	ldr	r1, [pc, #32]	; (fa8c <setup_task+0x34>)
    fa6a:	4809      	ldr	r0, [pc, #36]	; (fa90 <setup_task+0x38>)
    fa6c:	2303      	movs	r3, #3
    fa6e:	e9cd 3200 	strd	r3, r2, [sp]
    fa72:	2300      	movs	r3, #0
    fa74:	f44f 7200 	mov.w	r2, #512	; 0x200
    fa78:	f00e fc8c 	bl	1e394 <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
    fa7c:	2000      	movs	r0, #0
    fa7e:	f00e fdb9 	bl	1e5f4 <vTaskSuspend>

    while (1);
    fa82:	e7fe      	b.n	fa82 <setup_task+0x2a>
    fa84:	000249ec 	.word	0x000249ec
    fa88:	10004f44 	.word	0x10004f44
    fa8c:	00024a08 	.word	0x00024a08
    fa90:	0000fa39 	.word	0x0000fa39

0000fa94 <am_ctimer_isr>:
{
    fa94:	b510      	push	{r4, lr}
    ui32Status = am_hal_ctimer_int_status_get(false);
    fa96:	2000      	movs	r0, #0
    fa98:	f013 f90e 	bl	22cb8 <am_hal_ctimer_int_status_get>
    fa9c:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(ui32Status);
    fa9e:	f013 f8f9 	bl	22c94 <am_hal_ctimer_int_clear>
    am_hal_ctimer_int_service(ui32Status);
    faa2:	4620      	mov	r0, r4
}
    faa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    am_hal_ctimer_int_service(ui32Status);
    faa8:	f013 b8dc 	b.w	22c64 <am_hal_ctimer_int_service>

0000faac <am_freertos_sleep>:
{
    faac:	b508      	push	{r3, lr}
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    faae:	2001      	movs	r0, #1
    fab0:	f013 fe30 	bl	23714 <am_hal_sysctrl_sleep>
}
    fab4:	2000      	movs	r0, #0
    fab6:	bd08      	pop	{r3, pc}

0000fab8 <am_freertos_wakeup>:
}
    fab8:	4770      	bx	lr
    faba:	bf00      	nop

0000fabc <vApplicationMallocFailedHook>:
    while (1);
    fabc:	e7fe      	b.n	fabc <vApplicationMallocFailedHook>
    fabe:	bf00      	nop

0000fac0 <vApplicationStackOverflowHook>:
        __asm("BKPT #0\n") ; // Break into the debugger
    fac0:	be00      	bkpt	0x0000
    while (1)
    fac2:	e7fd      	b.n	fac0 <vApplicationStackOverflowHook>

0000fac4 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
    fac4:	b500      	push	{lr}
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
    fac6:	4a08      	ldr	r2, [pc, #32]	; (fae8 <run_tasks+0x24>)
    fac8:	4908      	ldr	r1, [pc, #32]	; (faec <run_tasks+0x28>)
    faca:	4809      	ldr	r0, [pc, #36]	; (faf0 <run_tasks+0x2c>)
{
    facc:	b083      	sub	sp, #12
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
    face:	2303      	movs	r3, #3
    fad0:	e9cd 3200 	strd	r3, r2, [sp]
    fad4:	2300      	movs	r3, #0
    fad6:	f44f 7200 	mov.w	r2, #512	; 0x200
    fada:	f00e fc5b 	bl	1e394 <xTaskCreate>

    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
}
    fade:	b003      	add	sp, #12
    fae0:	f85d eb04 	ldr.w	lr, [sp], #4
    vTaskStartScheduler();
    fae4:	f00e bdf6 	b.w	1e6d4 <vTaskStartScheduler>
    fae8:	10004f48 	.word	0x10004f48
    faec:	00024a14 	.word	0x00024a14
    faf0:	0000fa59 	.word	0x0000fa59

0000faf4 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
uint32_t
HciDrvRadioBoot(bool bColdBoot)
{
    faf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32NumXtalRetries = 0;


    g_ui32NumBytes     = 0;
    faf8:	4968      	ldr	r1, [pc, #416]	; (fc9c <HciDrvRadioBoot+0x1a8>)
    fafa:	4d69      	ldr	r5, [pc, #420]	; (fca0 <HciDrvRadioBoot+0x1ac>)
    g_consumed_bytes   = 0;
    fafc:	4a69      	ldr	r2, [pc, #420]	; (fca4 <HciDrvRadioBoot+0x1b0>)
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
    fafe:	f8df 81d8 	ldr.w	r8, [pc, #472]	; fcd8 <HciDrvRadioBoot+0x1e4>
    g_ui32NumBytes     = 0;
    fb02:	2300      	movs	r3, #0
    fb04:	600b      	str	r3, [r1, #0]
{
    fb06:	b090      	sub	sp, #64	; 0x40
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    fb08:	4629      	mov	r1, r5
{
    fb0a:	4607      	mov	r7, r0
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    fb0c:	2000      	movs	r0, #0
    g_consumed_bytes   = 0;
    fb0e:	6013      	str	r3, [r2, #0]
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    fb10:	f011 fe30 	bl	21774 <am_hal_ble_initialize>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
    fb14:	260b      	movs	r6, #11
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    fb16:	4601      	mov	r1, r0
    fb18:	2800      	cmp	r0, #0
    fb1a:	d13b      	bne.n	fb94 <HciDrvRadioBoot+0xa0>
        ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
    fb1c:	6828      	ldr	r0, [r5, #0]
    fb1e:	f011 ff0b 	bl	21938 <am_hal_ble_power_control>
    fb22:	4604      	mov	r4, r0
    fb24:	2800      	cmp	r0, #0
    fb26:	d174      	bne.n	fc12 <HciDrvRadioBoot+0x11e>
        am_hal_ble_config_t sBleConfig =
    fb28:	4c5f      	ldr	r4, [pc, #380]	; (fca8 <HciDrvRadioBoot+0x1b4>)
    fb2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    fb2c:	f10d 0c0c 	add.w	ip, sp, #12
    fb30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fb34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    fb38:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        ERROR_CHECK(am_hal_ble_config(BLE, &sBleConfig));
    fb3c:	6828      	ldr	r0, [r5, #0]
    fb3e:	a903      	add	r1, sp, #12
    fb40:	f011 fe6e 	bl	21820 <am_hal_ble_config>
    fb44:	4604      	mov	r4, r0
    fb46:	2800      	cmp	r0, #0
    fb48:	d16d      	bne.n	fc26 <HciDrvRadioBoot+0x132>
        if ( bColdBoot )
    fb4a:	2f00      	cmp	r7, #0
    fb4c:	d131      	bne.n	fbb2 <HciDrvRadioBoot+0xbe>
        ui32Status = am_hal_ble_boot(BLE);
    fb4e:	6828      	ldr	r0, [r5, #0]
    fb50:	f012 fd60 	bl	22614 <am_hal_ble_boot>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
    fb54:	4604      	mov	r4, r0
    fb56:	2800      	cmp	r0, #0
    fb58:	d030      	beq.n	fbbc <HciDrvRadioBoot+0xc8>
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
    fb5a:	4544      	cmp	r4, r8
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    fb5c:	6828      	ldr	r0, [r5, #0]
    fb5e:	f04f 0101 	mov.w	r1, #1
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
    fb62:	d168      	bne.n	fc36 <HciDrvRadioBoot+0x142>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    fb64:	f011 fee8 	bl	21938 <am_hal_ble_power_control>
    fb68:	4604      	mov	r4, r0
    fb6a:	2800      	cmp	r0, #0
    fb6c:	d176      	bne.n	fc5c <HciDrvRadioBoot+0x168>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
    fb6e:	6828      	ldr	r0, [r5, #0]
    fb70:	f011 fe36 	bl	217e0 <am_hal_ble_deinitialize>
    fb74:	4604      	mov	r4, r0
    fb76:	2800      	cmp	r0, #0
    fb78:	d178      	bne.n	fc6c <HciDrvRadioBoot+0x178>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
    fb7a:	3e01      	subs	r6, #1
    fb7c:	d014      	beq.n	fba8 <HciDrvRadioBoot+0xb4>
            {
                am_util_delay_ms(1000);
    fb7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fb82:	f00f fc3f 	bl	1f404 <am_util_delay_ms>
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    fb86:	4629      	mov	r1, r5
    fb88:	2000      	movs	r0, #0
    fb8a:	f011 fdf3 	bl	21774 <am_hal_ble_initialize>
    fb8e:	4601      	mov	r1, r0
    fb90:	2800      	cmp	r0, #0
    fb92:	d0c3      	beq.n	fb1c <HciDrvRadioBoot+0x28>
    fb94:	4845      	ldr	r0, [pc, #276]	; (fcac <HciDrvRadioBoot+0x1b8>)
    fb96:	9101      	str	r1, [sp, #4]
    fb98:	f010 fa30 	bl	1fffc <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    fb9c:	4b44      	ldr	r3, [pc, #272]	; (fcb0 <HciDrvRadioBoot+0x1bc>)
    fb9e:	681b      	ldr	r3, [r3, #0]
    fba0:	b113      	cbz	r3, fba8 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    fba2:	9901      	ldr	r1, [sp, #4]
    fba4:	4608      	mov	r0, r1
    fba6:	4798      	blx	r3
        ERROR_CHECK(am_hal_ble_initialize(0, &BLE));
    fba8:	2401      	movs	r4, #1
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
    }

    return AM_HAL_STATUS_SUCCESS;
}
    fbaa:	4620      	mov	r0, r4
    fbac:	b010      	add	sp, #64	; 0x40
    fbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            am_util_delay_ms(1000);
    fbb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fbb6:	f00f fc25 	bl	1f404 <am_util_delay_ms>
    fbba:	e7c8      	b.n	fb4e <HciDrvRadioBoot+0x5a>
    am_hal_ble_tx_power_set(BLE, 0x8);
    fbbc:	6828      	ldr	r0, [r5, #0]
    fbbe:	2108      	movs	r1, #8
    fbc0:	f012 fda8 	bl	22714 <am_hal_ble_tx_power_set>
    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
    fbc4:	6828      	ldr	r0, [r5, #0]
    fbc6:	f240 2181 	movw	r1, #641	; 0x281
    fbca:	f012 faad 	bl	22128 <am_hal_ble_int_clear>
    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
    fbce:	6828      	ldr	r0, [r5, #0]
    fbd0:	f240 2181 	movw	r1, #641	; 0x281
    fbd4:	f012 fa7a 	bl	220cc <am_hal_ble_int_enable>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fbd8:	4b36      	ldr	r3, [pc, #216]	; (fcb4 <HciDrvRadioBoot+0x1c0>)
    fbda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    fbde:	601a      	str	r2, [r3, #0]
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
    fbe0:	f44f 6302 	mov.w	r3, #2080	; 0x820
    fbe4:	4934      	ldr	r1, [pc, #208]	; (fcb8 <HciDrvRadioBoot+0x1c4>)
    fbe6:	4835      	ldr	r0, [pc, #212]	; (fcbc <HciDrvRadioBoot+0x1c8>)
    fbe8:	f44f 7282 	mov.w	r2, #260	; 0x104
    fbec:	f013 fc6e 	bl	234cc <am_hal_queue_init>
    g_ui32InterruptsSeen = 0;
    fbf0:	4b33      	ldr	r3, [pc, #204]	; (fcc0 <HciDrvRadioBoot+0x1cc>)
    fbf2:	601c      	str	r4, [r3, #0]
    if (bColdBoot)
    fbf4:	2f00      	cmp	r7, #0
    fbf6:	d0d8      	beq.n	fbaa <HciDrvRadioBoot+0xb6>
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
    fbf8:	a903      	add	r1, sp, #12
    fbfa:	2001      	movs	r0, #1
    fbfc:	f013 fa96 	bl	2312c <am_hal_mcuctrl_info_get>
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
    fc00:	9b04      	ldr	r3, [sp, #16]
        memcpy(g_BLEMacAddress, &sDevice.ui32ChipID1, sizeof(sDevice.ui32ChipID1));
    fc02:	4a30      	ldr	r2, [pc, #192]	; (fcc4 <HciDrvRadioBoot+0x1d0>)
    fc04:	9805      	ldr	r0, [sp, #20]
    fc06:	6010      	str	r0, [r2, #0]
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
    fc08:	0a19      	lsrs	r1, r3, #8
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
    fc0a:	0c1b      	lsrs	r3, r3, #16
        g_BLEMacAddress[4] = (sDevice.ui32ChipID0 >> 8) & 0xFF;
    fc0c:	7111      	strb	r1, [r2, #4]
        g_BLEMacAddress[5] = (sDevice.ui32ChipID0 >> 16) & 0xFF;
    fc0e:	7153      	strb	r3, [r2, #5]
    fc10:	e7cb      	b.n	fbaa <HciDrvRadioBoot+0xb6>
        ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
    fc12:	482d      	ldr	r0, [pc, #180]	; (fcc8 <HciDrvRadioBoot+0x1d4>)
    fc14:	f010 f9f2 	bl	1fffc <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    fc18:	4b25      	ldr	r3, [pc, #148]	; (fcb0 <HciDrvRadioBoot+0x1bc>)
    fc1a:	681b      	ldr	r3, [r3, #0]
    fc1c:	2b00      	cmp	r3, #0
    fc1e:	d0c3      	beq.n	fba8 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    fc20:	4620      	mov	r0, r4
    fc22:	4798      	blx	r3
    fc24:	e7c0      	b.n	fba8 <HciDrvRadioBoot+0xb4>
        ERROR_CHECK(am_hal_ble_config(BLE, &sBleConfig));
    fc26:	4829      	ldr	r0, [pc, #164]	; (fccc <HciDrvRadioBoot+0x1d8>)
    fc28:	f010 f9e8 	bl	1fffc <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    fc2c:	4b20      	ldr	r3, [pc, #128]	; (fcb0 <HciDrvRadioBoot+0x1bc>)
    fc2e:	681b      	ldr	r3, [r3, #0]
    fc30:	2b00      	cmp	r3, #0
    fc32:	d1f5      	bne.n	fc20 <HciDrvRadioBoot+0x12c>
    fc34:	e7b8      	b.n	fba8 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    fc36:	f011 fe7f 	bl	21938 <am_hal_ble_power_control>
    fc3a:	4606      	mov	r6, r0
    fc3c:	bb18      	cbnz	r0, fc86 <HciDrvRadioBoot+0x192>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
    fc3e:	6828      	ldr	r0, [r5, #0]
    fc40:	f011 fdce 	bl	217e0 <am_hal_ble_deinitialize>
    fc44:	4605      	mov	r5, r0
    fc46:	b1c8      	cbz	r0, fc7c <HciDrvRadioBoot+0x188>
    fc48:	4821      	ldr	r0, [pc, #132]	; (fcd0 <HciDrvRadioBoot+0x1dc>)
    fc4a:	f010 f9d7 	bl	1fffc <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    fc4e:	4b18      	ldr	r3, [pc, #96]	; (fcb0 <HciDrvRadioBoot+0x1bc>)
    fc50:	681b      	ldr	r3, [r3, #0]
    fc52:	2b00      	cmp	r3, #0
    fc54:	d0a8      	beq.n	fba8 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    fc56:	4628      	mov	r0, r5
    fc58:	4798      	blx	r3
    fc5a:	e7a5      	b.n	fba8 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    fc5c:	481d      	ldr	r0, [pc, #116]	; (fcd4 <HciDrvRadioBoot+0x1e0>)
    fc5e:	f010 f9cd 	bl	1fffc <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    fc62:	4b13      	ldr	r3, [pc, #76]	; (fcb0 <HciDrvRadioBoot+0x1bc>)
    fc64:	681b      	ldr	r3, [r3, #0]
    fc66:	2b00      	cmp	r3, #0
    fc68:	d1da      	bne.n	fc20 <HciDrvRadioBoot+0x12c>
    fc6a:	e79d      	b.n	fba8 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_deinitialize(BLE));
    fc6c:	4818      	ldr	r0, [pc, #96]	; (fcd0 <HciDrvRadioBoot+0x1dc>)
    fc6e:	f010 f9c5 	bl	1fffc <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    fc72:	4b0f      	ldr	r3, [pc, #60]	; (fcb0 <HciDrvRadioBoot+0x1bc>)
    fc74:	681b      	ldr	r3, [r3, #0]
    fc76:	2b00      	cmp	r3, #0
    fc78:	d1d2      	bne.n	fc20 <HciDrvRadioBoot+0x12c>
    fc7a:	e795      	b.n	fba8 <HciDrvRadioBoot+0xb4>
    fc7c:	4b0c      	ldr	r3, [pc, #48]	; (fcb0 <HciDrvRadioBoot+0x1bc>)
    fc7e:	681b      	ldr	r3, [r3, #0]
    fc80:	2b00      	cmp	r3, #0
    fc82:	d1cd      	bne.n	fc20 <HciDrvRadioBoot+0x12c>
    fc84:	e790      	b.n	fba8 <HciDrvRadioBoot+0xb4>
            ERROR_CHECK(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
    fc86:	4813      	ldr	r0, [pc, #76]	; (fcd4 <HciDrvRadioBoot+0x1e0>)
    fc88:	f010 f9b8 	bl	1fffc <am_util_stdio_printf>
        if (g_hciDrvErrorHandler)
    fc8c:	4b08      	ldr	r3, [pc, #32]	; (fcb0 <HciDrvRadioBoot+0x1bc>)
    fc8e:	681b      	ldr	r3, [r3, #0]
    fc90:	2b00      	cmp	r3, #0
    fc92:	d089      	beq.n	fba8 <HciDrvRadioBoot+0xb4>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    fc94:	4630      	mov	r0, r6
    fc96:	4798      	blx	r3
    fc98:	e786      	b.n	fba8 <HciDrvRadioBoot+0xb4>
    fc9a:	bf00      	nop
    fc9c:	100058bc 	.word	0x100058bc
    fca0:	10004f4c 	.word	0x10004f4c
    fca4:	10004f78 	.word	0x10004f78
    fca8:	00024050 	.word	0x00024050
    fcac:	00024a1c 	.word	0x00024a1c
    fcb0:	10004f7c 	.word	0x10004f7c
    fcb4:	e000e100 	.word	0xe000e100
    fcb8:	10004f80 	.word	0x10004f80
    fcbc:	100058a0 	.word	0x100058a0
    fcc0:	100058b8 	.word	0x100058b8
    fcc4:	10004f50 	.word	0x10004f50
    fcc8:	00024a48 	.word	0x00024a48
    fccc:	00024a8c 	.word	0x00024a8c
    fcd0:	00024b04 	.word	0x00024b04
    fcd4:	00024ac0 	.word	0x00024ac0
    fcd8:	0800000b 	.word	0x0800000b

0000fcdc <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
    fcdc:	b570      	push	{r4, r5, r6, lr}
    BLE_HEARTBEAT_STOP();
    fcde:	4814      	ldr	r0, [pc, #80]	; (fd30 <HciDrvRadioShutdown+0x54>)
    fce0:	f008 fabe 	bl	18260 <WsfTimerStop>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fce4:	4b13      	ldr	r3, [pc, #76]	; (fd34 <HciDrvRadioShutdown+0x58>)
    fce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    fcea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    fcee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fcf2:	f3bf 8f6f 	isb	sy

    NVIC_DisableIRQ(BLE_IRQn);

    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
    fcf6:	4e10      	ldr	r6, [pc, #64]	; (fd38 <HciDrvRadioShutdown+0x5c>)

    // wait for 1s at max
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
    fcf8:	4d10      	ldr	r5, [pc, #64]	; (fd3c <HciDrvRadioShutdown+0x60>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
    fcfa:	6830      	ldr	r0, [r6, #0]
    fcfc:	2101      	movs	r1, #1
    fcfe:	f011 fe1b 	bl	21938 <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
    fd02:	68ab      	ldr	r3, [r5, #8]
    fd04:	049a      	lsls	r2, r3, #18
    fd06:	d509      	bpl.n	fd1c <HciDrvRadioShutdown+0x40>
    fd08:	4c0d      	ldr	r4, [pc, #52]	; (fd40 <HciDrvRadioShutdown+0x64>)
    fd0a:	e001      	b.n	fd10 <HciDrvRadioShutdown+0x34>
    fd0c:	3c01      	subs	r4, #1
    fd0e:	d005      	beq.n	fd1c <HciDrvRadioShutdown+0x40>
    fd10:	2010      	movs	r0, #16
    fd12:	f012 ffef 	bl	22cf4 <am_hal_flash_delay>
    fd16:	68ab      	ldr	r3, [r5, #8]
    fd18:	049b      	lsls	r3, r3, #18
    fd1a:	d4f7      	bmi.n	fd0c <HciDrvRadioShutdown+0x30>

    am_hal_ble_deinitialize(BLE);
    fd1c:	6830      	ldr	r0, [r6, #0]
    fd1e:	f011 fd5f 	bl	217e0 <am_hal_ble_deinitialize>

    g_ui32NumBytes   = 0;
    fd22:	4908      	ldr	r1, [pc, #32]	; (fd44 <HciDrvRadioShutdown+0x68>)
    g_consumed_bytes = 0;
    fd24:	4a08      	ldr	r2, [pc, #32]	; (fd48 <HciDrvRadioShutdown+0x6c>)
    g_ui32NumBytes   = 0;
    fd26:	2300      	movs	r3, #0
    fd28:	600b      	str	r3, [r1, #0]
    g_consumed_bytes = 0;
    fd2a:	6013      	str	r3, [r2, #0]
}
    fd2c:	bd70      	pop	{r4, r5, r6, pc}
    fd2e:	bf00      	nop
    fd30:	10004f58 	.word	0x10004f58
    fd34:	e000e100 	.word	0xe000e100
    fd38:	10004f4c 	.word	0x10004f4c
    fd3c:	40021000 	.word	0x40021000
    fd40:	000f4240 	.word	0x000f4240
    fd44:	100058bc 	.word	0x100058bc
    fd48:	10004f78 	.word	0x10004f78

0000fd4c <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
    fd4c:	b538      	push	{r3, r4, r5, lr}


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
    fd4e:	4d2c      	ldr	r5, [pc, #176]	; (fe00 <hciDrvWrite+0xb4>)
{
    fd50:	460c      	mov	r4, r1
    if (am_hal_queue_full(&g_sWriteQueue))
    fd52:	68ab      	ldr	r3, [r5, #8]
    fd54:	68e9      	ldr	r1, [r5, #12]
    fd56:	428b      	cmp	r3, r1
    fd58:	d04a      	beq.n	fdf0 <hciDrvWrite+0xa4>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
    fd5a:	2cff      	cmp	r4, #255	; 0xff
    fd5c:	d837      	bhi.n	fdce <hciDrvWrite+0x82>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
    fd5e:	696b      	ldr	r3, [r5, #20]
    fd60:	682d      	ldr	r5, [r5, #0]

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
    fd62:	1c61      	adds	r1, r4, #1
    fd64:	b289      	uxth	r1, r1
    fd66:	5159      	str	r1, [r3, r5]
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
    fd68:	442b      	add	r3, r5

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;

    *pui8Wptr++ = type;
    fd6a:	1d5d      	adds	r5, r3, #5
    fd6c:	7118      	strb	r0, [r3, #4]

    for (uint32_t i = 0; i < len; i++)
    fd6e:	b314      	cbz	r4, fdb6 <hciDrvWrite+0x6a>
    fd70:	1c51      	adds	r1, r2, #1
    fd72:	1a69      	subs	r1, r5, r1
    fd74:	2902      	cmp	r1, #2
    fd76:	d932      	bls.n	fdde <hciDrvWrite+0x92>
    fd78:	1e61      	subs	r1, r4, #1
    fd7a:	2907      	cmp	r1, #7
    fd7c:	d92f      	bls.n	fdde <hciDrvWrite+0x92>
    fd7e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    fd82:	4613      	mov	r3, r2
    fd84:	4629      	mov	r1, r5
    fd86:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
    {
        pui8Wptr[i] = pData[i];
    fd8a:	f853 0b04 	ldr.w	r0, [r3], #4
    fd8e:	f841 0b04 	str.w	r0, [r1], #4
    for (uint32_t i = 0; i < len; i++)
    fd92:	4563      	cmp	r3, ip
    fd94:	d1f9      	bne.n	fd8a <hciDrvWrite+0x3e>
    fd96:	f024 0303 	bic.w	r3, r4, #3
    fd9a:	429c      	cmp	r4, r3
    fd9c:	d00b      	beq.n	fdb6 <hciDrvWrite+0x6a>
        pui8Wptr[i] = pData[i];
    fd9e:	5cd1      	ldrb	r1, [r2, r3]
    fda0:	54e9      	strb	r1, [r5, r3]
    for (uint32_t i = 0; i < len; i++)
    fda2:	1c59      	adds	r1, r3, #1
    fda4:	428c      	cmp	r4, r1
    fda6:	d906      	bls.n	fdb6 <hciDrvWrite+0x6a>
    fda8:	3302      	adds	r3, #2
        pui8Wptr[i] = pData[i];
    fdaa:	5c50      	ldrb	r0, [r2, r1]
    fdac:	5468      	strb	r0, [r5, r1]
    for (uint32_t i = 0; i < len; i++)
    fdae:	429c      	cmp	r4, r3
    fdb0:	d901      	bls.n	fdb6 <hciDrvWrite+0x6a>
        pui8Wptr[i] = pData[i];
    fdb2:	5cd2      	ldrb	r2, [r2, r3]
    fdb4:	54ea      	strb	r2, [r5, r3]
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
    fdb6:	2100      	movs	r1, #0
    fdb8:	4811      	ldr	r0, [pc, #68]	; (fe00 <hciDrvWrite+0xb4>)
    fdba:	2201      	movs	r2, #1
    fdbc:	f013 fb92 	bl	234e4 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    fdc0:	4b10      	ldr	r3, [pc, #64]	; (fe04 <hciDrvWrite+0xb8>)
    fdc2:	2101      	movs	r1, #1
    fdc4:	7818      	ldrb	r0, [r3, #0]
    fdc6:	f007 ffc1 	bl	17d4c <WsfSetEvent>
#endif
    return len;
}
    fdca:	4620      	mov	r0, r4
    fdcc:	bd38      	pop	{r3, r4, r5, pc}
        if (g_hciDrvErrorHandler)
    fdce:	4b0e      	ldr	r3, [pc, #56]	; (fe08 <hciDrvWrite+0xbc>)
    fdd0:	681b      	ldr	r3, [r3, #0]
    fdd2:	2b00      	cmp	r3, #0
    fdd4:	d0f9      	beq.n	fdca <hciDrvWrite+0x7e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    fdd6:	480d      	ldr	r0, [pc, #52]	; (fe0c <hciDrvWrite+0xc0>)
    fdd8:	4798      	blx	r3
}
    fdda:	4620      	mov	r0, r4
    fddc:	bd38      	pop	{r3, r4, r5, pc}
    fdde:	3304      	adds	r3, #4
    fde0:	1910      	adds	r0, r2, r4
        pui8Wptr[i] = pData[i];
    fde2:	f812 1b01 	ldrb.w	r1, [r2], #1
    fde6:	f803 1f01 	strb.w	r1, [r3, #1]!
    for (uint32_t i = 0; i < len; i++)
    fdea:	4282      	cmp	r2, r0
    fdec:	d1f9      	bne.n	fde2 <hciDrvWrite+0x96>
    fdee:	e7e2      	b.n	fdb6 <hciDrvWrite+0x6a>
        if (g_hciDrvErrorHandler)
    fdf0:	4b05      	ldr	r3, [pc, #20]	; (fe08 <hciDrvWrite+0xbc>)
    fdf2:	681b      	ldr	r3, [r3, #0]
    fdf4:	2b00      	cmp	r3, #0
    fdf6:	d0e8      	beq.n	fdca <hciDrvWrite+0x7e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    fdf8:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
    fdfc:	4798      	blx	r3
    fdfe:	e7e4      	b.n	fdca <hciDrvWrite+0x7e>
    fe00:	100058a0 	.word	0x100058a0
    fe04:	10004f56 	.word	0x10004f56
    fe08:	10004f7c 	.word	0x10004f7c
    fe0c:	09000001 	.word	0x09000001

0000fe10 <HciDrvHandlerInit>:
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
    g_HciDrvHandleID = handlerId;

    g_HeartBeatTimer.handlerId = handlerId;
    fe10:	4a06      	ldr	r2, [pc, #24]	; (fe2c <HciDrvHandlerInit+0x1c>)
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;

    g_WakeTimer.handlerId = handlerId;
    fe12:	4b07      	ldr	r3, [pc, #28]	; (fe30 <HciDrvHandlerInit+0x20>)
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
    fe14:	2102      	movs	r1, #2
{
    fe16:	b410      	push	{r4}
    g_HciDrvHandleID = handlerId;
    fe18:	4c06      	ldr	r4, [pc, #24]	; (fe34 <HciDrvHandlerInit+0x24>)
    g_HeartBeatTimer.handlerId = handlerId;
    fe1a:	7310      	strb	r0, [r2, #12]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
    fe1c:	7291      	strb	r1, [r2, #10]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
    fe1e:	2203      	movs	r2, #3
    g_WakeTimer.handlerId = handlerId;
    fe20:	7318      	strb	r0, [r3, #12]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
    fe22:	729a      	strb	r2, [r3, #10]
    g_HciDrvHandleID = handlerId;
    fe24:	7020      	strb	r0, [r4, #0]
}
    fe26:	f85d 4b04 	ldr.w	r4, [sp], #4
    fe2a:	4770      	bx	lr
    fe2c:	10004f58 	.word	0x10004f58
    fe30:	10004f68 	.word	0x10004f68
    fe34:	10004f56 	.word	0x10004f56

0000fe38 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
    fe38:	b510      	push	{r4, lr}
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
    fe3a:	4c0a      	ldr	r4, [pc, #40]	; (fe64 <HciDrvIntService+0x2c>)
    fe3c:	2101      	movs	r1, #1
    fe3e:	6820      	ldr	r0, [r4, #0]
    fe40:	f012 f964 	bl	2210c <am_hal_ble_int_status>
    fe44:	4601      	mov	r1, r0
    am_hal_ble_int_clear(BLE, ui32Status);
    fe46:	6820      	ldr	r0, [r4, #0]
    fe48:	f012 f96e 	bl	22128 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
    fe4c:	4a06      	ldr	r2, [pc, #24]	; (fe68 <HciDrvIntService+0x30>)

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    fe4e:	4907      	ldr	r1, [pc, #28]	; (fe6c <HciDrvIntService+0x34>)
    g_ui32InterruptsSeen++;
    fe50:	6813      	ldr	r3, [r2, #0]
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    fe52:	7808      	ldrb	r0, [r1, #0]
    g_ui32InterruptsSeen++;
    fe54:	3301      	adds	r3, #1

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
    fe56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    fe5a:	2101      	movs	r1, #1
    g_ui32InterruptsSeen++;
    fe5c:	6013      	str	r3, [r2, #0]
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    fe5e:	f007 bf75 	b.w	17d4c <WsfSetEvent>
    fe62:	bf00      	nop
    fe64:	10004f4c 	.word	0x10004f4c
    fe68:	100058b8 	.word	0x100058b8
    fe6c:	10004f56 	.word	0x10004f56

0000fe70 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
    fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
    fe74:	788b      	ldrb	r3, [r1, #2]
    fe76:	2b02      	cmp	r3, #2
{
    fe78:	b083      	sub	sp, #12
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
    fe7a:	f000 80c3 	beq.w	10004 <HciDrvHandler+0x194>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
    fe7e:	4b98      	ldr	r3, [pc, #608]	; (100e0 <HciDrvHandler+0x270>)
    fe80:	4a98      	ldr	r2, [pc, #608]	; (100e4 <HciDrvHandler+0x274>)
    fe82:	681b      	ldr	r3, [r3, #0]
    fe84:	6812      	ldr	r2, [r2, #0]
    fe86:	4293      	cmp	r3, r2
    fe88:	f200 809f 	bhi.w	ffca <HciDrvHandler+0x15a>
    fe8c:	2300      	movs	r3, #0
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
    fe8e:	4c96      	ldr	r4, [pc, #600]	; (100e8 <HciDrvHandler+0x278>)
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
    fe90:	f8df 928c 	ldr.w	r9, [pc, #652]	; 10120 <HciDrvHandler+0x2b0>
    fe94:	9300      	str	r3, [sp, #0]
    fe96:	2601      	movs	r6, #1
    fe98:	461d      	mov	r5, r3
    fe9a:	e00a      	b.n	feb2 <HciDrvHandler+0x42>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
    fe9c:	3501      	adds	r5, #1

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
    fe9e:	f242 7310 	movw	r3, #10000	; 0x2710
    fea2:	429d      	cmp	r5, r3
    fea4:	d87a      	bhi.n	ff9c <HciDrvHandler+0x12c>
    fea6:	46b2      	mov	sl, r6
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    fea8:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
    feac:	f106 0601 	add.w	r6, r6, #1
    feb0:	d279      	bcs.n	ffa6 <HciDrvHandler+0x136>
        if ( BLE_IRQ_CHECK() )
    feb2:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    feb6:	0619      	lsls	r1, r3, #24
    feb8:	f100 8084 	bmi.w	ffc4 <HciDrvHandler+0x154>
    febc:	4f8b      	ldr	r7, [pc, #556]	; (100ec <HciDrvHandler+0x27c>)
                    BLE_HEARTBEAT_RESTART();
    febe:	f8df 8234 	ldr.w	r8, [pc, #564]	; 100f4 <HciDrvHandler+0x284>
            if (am_hal_queue_empty(&g_sWriteQueue))
    fec2:	68bb      	ldr	r3, [r7, #8]
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
    fec4:	2100      	movs	r1, #0
            if (am_hal_queue_empty(&g_sWriteQueue))
    fec6:	2b00      	cmp	r3, #0
    fec8:	d06d      	beq.n	ffa6 <HciDrvHandler+0x136>
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
    feca:	697a      	ldr	r2, [r7, #20]
    fecc:	687b      	ldr	r3, [r7, #4]
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
    fece:	f8d9 0000 	ldr.w	r0, [r9]
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
    fed2:	eb02 0c03 	add.w	ip, r2, r3
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
    fed6:	58d3      	ldr	r3, [r2, r3]
    fed8:	f10c 0204 	add.w	r2, ip, #4
    fedc:	f012 f874 	bl	21fc8 <am_hal_ble_blocking_hci_write>
    fee0:	46cb      	mov	fp, r9
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
    fee2:	4682      	mov	sl, r0
    fee4:	2800      	cmp	r0, #0
    fee6:	d1d9      	bne.n	fe9c <HciDrvHandler+0x2c>
                    BLE_HEARTBEAT_RESTART();
    fee8:	4640      	mov	r0, r8
    feea:	f008 f9b9 	bl	18260 <WsfTimerStop>
    feee:	4640      	mov	r0, r8
    fef0:	f242 7110 	movw	r1, #10000	; 0x2710
    fef4:	f008 f970 	bl	181d8 <WsfTimerStartMs>
                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
    fef8:	2201      	movs	r2, #1
    fefa:	4651      	mov	r1, sl
    fefc:	4638      	mov	r0, r7
    fefe:	f013 fb2f 	bl	23560 <am_hal_queue_item_get>
        if ( BLE_IRQ_CHECK() )
    ff02:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    ff06:	0618      	lsls	r0, r3, #24
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    ff08:	f04f 0601 	mov.w	r6, #1
        if ( BLE_IRQ_CHECK() )
    ff0c:	f3c3 15c0 	ubfx	r5, r3, #7, #1
    ff10:	d5d7      	bpl.n	fec2 <HciDrvHandler+0x52>
                    ui32TxRetries = 0;
    ff12:	4655      	mov	r5, sl
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    ff14:	46b2      	mov	sl, r6
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
    ff16:	4b76      	ldr	r3, [pc, #472]	; (100f0 <HciDrvHandler+0x280>)
            BLE_HEARTBEAT_RESTART();
    ff18:	4876      	ldr	r0, [pc, #472]	; (100f4 <HciDrvHandler+0x284>)
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
    ff1a:	f8d3 8000 	ldr.w	r8, [r3]
            BLE_HEARTBEAT_RESTART();
    ff1e:	f008 f99f 	bl	18260 <WsfTimerStop>
    ff22:	4874      	ldr	r0, [pc, #464]	; (100f4 <HciDrvHandler+0x284>)
    ff24:	f242 7110 	movw	r1, #10000	; 0x2710
    ff28:	f008 f956 	bl	181d8 <WsfTimerStartMs>
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
    ff2c:	4a6c      	ldr	r2, [pc, #432]	; (100e0 <HciDrvHandler+0x270>)
    ff2e:	4972      	ldr	r1, [pc, #456]	; (100f8 <HciDrvHandler+0x288>)
    ff30:	f8db 0000 	ldr.w	r0, [fp]
            g_ui32NumBytes = 0;
    ff34:	4617      	mov	r7, r2
    ff36:	2300      	movs	r3, #0
    ff38:	6013      	str	r3, [r2, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
    ff3a:	f012 f86f 	bl	2201c <am_hal_ble_blocking_hci_read>
            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
    ff3e:	683a      	ldr	r2, [r7, #0]
    ff40:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
    ff44:	4603      	mov	r3, r0
            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
    ff46:	d834      	bhi.n	ffb2 <HciDrvHandler+0x142>
            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
    ff48:	2b00      	cmp	r3, #0
    ff4a:	f040 80a3 	bne.w	10094 <HciDrvHandler+0x224>
    ff4e:	f44f 6bfa 	mov.w	fp, #2000	; 0x7d0
    ff52:	e008      	b.n	ff66 <HciDrvHandler+0xf6>
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
    ff54:	4b66      	ldr	r3, [pc, #408]	; (100f0 <HciDrvHandler+0x280>)
    ff56:	681b      	ldr	r3, [r3, #0]
    ff58:	4543      	cmp	r3, r8
    ff5a:	d10a      	bne.n	ff72 <HciDrvHandler+0x102>
                    am_util_delay_us(1);
    ff5c:	f00f fa66 	bl	1f42c <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
    ff60:	f1bb 0b01 	subs.w	fp, fp, #1
    ff64:	d005      	beq.n	ff72 <HciDrvHandler+0x102>
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
    ff66:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    ff6a:	061b      	lsls	r3, r3, #24
                    am_util_delay_us(1);
    ff6c:	f04f 0001 	mov.w	r0, #1
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
    ff70:	d4f0      	bmi.n	ff54 <HciDrvHandler+0xe4>
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
    ff72:	4b62      	ldr	r3, [pc, #392]	; (100fc <HciDrvHandler+0x28c>)
    ff74:	4f5a      	ldr	r7, [pc, #360]	; (100e0 <HciDrvHandler+0x270>)
    ff76:	6818      	ldr	r0, [r3, #0]
    ff78:	8839      	ldrh	r1, [r7, #0]
    ff7a:	f003 f8fd 	bl	13178 <hciTrSerialRxIncoming>
                if (g_consumed_bytes != g_ui32NumBytes)
    ff7e:	683b      	ldr	r3, [r7, #0]
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
    ff80:	4a58      	ldr	r2, [pc, #352]	; (100e4 <HciDrvHandler+0x274>)
                if (g_consumed_bytes != g_ui32NumBytes)
    ff82:	4298      	cmp	r0, r3
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
    ff84:	6010      	str	r0, [r2, #0]
                if (g_consumed_bytes != g_ui32NumBytes)
    ff86:	d109      	bne.n	ff9c <HciDrvHandler+0x12c>
                read_hci_packet_count++;
    ff88:	9a00      	ldr	r2, [sp, #0]
                g_ui32NumBytes   = 0;
    ff8a:	4955      	ldr	r1, [pc, #340]	; (100e0 <HciDrvHandler+0x270>)
    ff8c:	2300      	movs	r3, #0
                read_hci_packet_count++;
    ff8e:	3201      	adds	r2, #1
                g_ui32NumBytes   = 0;
    ff90:	600b      	str	r3, [r1, #0]
                g_consumed_bytes = 0;
    ff92:	4954      	ldr	r1, [pc, #336]	; (100e4 <HciDrvHandler+0x274>)
                read_hci_packet_count++;
    ff94:	9200      	str	r2, [sp, #0]
            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
    ff96:	2a03      	cmp	r2, #3
                g_consumed_bytes = 0;
    ff98:	600b      	str	r3, [r1, #0]
            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
    ff9a:	d985      	bls.n	fea8 <HciDrvHandler+0x38>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    ff9c:	4b58      	ldr	r3, [pc, #352]	; (10100 <HciDrvHandler+0x290>)
    ff9e:	2101      	movs	r1, #1
    ffa0:	7818      	ldrb	r0, [r3, #0]
    ffa2:	f007 fed3 	bl	17d4c <WsfSetEvent>

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
    ffa6:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
    ffaa:	d035      	beq.n	10018 <HciDrvHandler+0x1a8>
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
    ffac:	b003      	add	sp, #12
    ffae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (g_hciDrvErrorHandler)
    ffb2:	4a54      	ldr	r2, [pc, #336]	; (10104 <HciDrvHandler+0x294>)
    ffb4:	6812      	ldr	r2, [r2, #0]
    ffb6:	2a00      	cmp	r2, #0
    ffb8:	d0c6      	beq.n	ff48 <HciDrvHandler+0xd8>
    ffba:	9001      	str	r0, [sp, #4]
            g_hciDrvErrorHandler(g_ui32FailingStatus);
    ffbc:	4852      	ldr	r0, [pc, #328]	; (10108 <HciDrvHandler+0x298>)
    ffbe:	4790      	blx	r2
    ffc0:	9b01      	ldr	r3, [sp, #4]
    ffc2:	e7c1      	b.n	ff48 <HciDrvHandler+0xd8>
        if ( BLE_IRQ_CHECK() )
    ffc4:	46b2      	mov	sl, r6
    ffc6:	46cb      	mov	fp, r9
    ffc8:	e7a5      	b.n	ff16 <HciDrvHandler+0xa6>
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
    ffca:	494c      	ldr	r1, [pc, #304]	; (100fc <HciDrvHandler+0x28c>)
    ffcc:	6808      	ldr	r0, [r1, #0]
    ffce:	1a9b      	subs	r3, r3, r2
    ffd0:	b299      	uxth	r1, r3
    ffd2:	4410      	add	r0, r2
    ffd4:	f003 f8d0 	bl	13178 <hciTrSerialRxIncoming>
    ffd8:	4942      	ldr	r1, [pc, #264]	; (100e4 <HciDrvHandler+0x274>)
        if (g_consumed_bytes != g_ui32NumBytes)
    ffda:	4b41      	ldr	r3, [pc, #260]	; (100e0 <HciDrvHandler+0x270>)
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
    ffdc:	680a      	ldr	r2, [r1, #0]
        if (g_consumed_bytes != g_ui32NumBytes)
    ffde:	681b      	ldr	r3, [r3, #0]
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
    ffe0:	4410      	add	r0, r2
        if (g_consumed_bytes != g_ui32NumBytes)
    ffe2:	4298      	cmp	r0, r3
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
    ffe4:	6008      	str	r0, [r1, #0]
        if (g_consumed_bytes != g_ui32NumBytes)
    ffe6:	d105      	bne.n	fff4 <HciDrvHandler+0x184>
            g_ui32NumBytes   = 0;
    ffe8:	4a3d      	ldr	r2, [pc, #244]	; (100e0 <HciDrvHandler+0x270>)
    ffea:	2300      	movs	r3, #0
    ffec:	6013      	str	r3, [r2, #0]
            g_consumed_bytes = 0;
    ffee:	4a3d      	ldr	r2, [pc, #244]	; (100e4 <HciDrvHandler+0x274>)
    fff0:	6013      	str	r3, [r2, #0]
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
    fff2:	e74b      	b.n	fe8c <HciDrvHandler+0x1c>
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
    fff4:	4b42      	ldr	r3, [pc, #264]	; (10100 <HciDrvHandler+0x290>)
    fff6:	7818      	ldrb	r0, [r3, #0]
    fff8:	2101      	movs	r1, #1
}
    fffa:	b003      	add	sp, #12
    fffc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   10000:	f007 bea4 	b.w	17d4c <WsfSetEvent>
        HciReadLocalVerInfoCmd();
   10004:	f001 f8f4 	bl	111f0 <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   10008:	483a      	ldr	r0, [pc, #232]	; (100f4 <HciDrvHandler+0x284>)
   1000a:	f242 7110 	movw	r1, #10000	; 0x2710
}
   1000e:	b003      	add	sp, #12
   10010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        BLE_HEARTBEAT_START();
   10014:	f008 b8e0 	b.w	181d8 <WsfTimerStartMs>
        if (g_hciDrvErrorHandler)
   10018:	4b3a      	ldr	r3, [pc, #232]	; (10104 <HciDrvHandler+0x294>)
   1001a:	681b      	ldr	r3, [r3, #0]
   1001c:	b10b      	cbz	r3, 10022 <HciDrvHandler+0x1b2>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   1001e:	483b      	ldr	r0, [pc, #236]	; (1010c <HciDrvHandler+0x29c>)
   10020:	4798      	blx	r3
    BLE_HEARTBEAT_STOP();
   10022:	4834      	ldr	r0, [pc, #208]	; (100f4 <HciDrvHandler+0x284>)
   10024:	f008 f91c 	bl	18260 <WsfTimerStop>
   10028:	4b39      	ldr	r3, [pc, #228]	; (10110 <HciDrvHandler+0x2a0>)
   1002a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1002e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   10032:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10036:	f3bf 8f6f 	isb	sy
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   1003a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 10120 <HciDrvHandler+0x2b0>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   1003e:	4d35      	ldr	r5, [pc, #212]	; (10114 <HciDrvHandler+0x2a4>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   10040:	f8db 0000 	ldr.w	r0, [fp]
   10044:	2101      	movs	r1, #1
   10046:	f011 fc77 	bl	21938 <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   1004a:	68ab      	ldr	r3, [r5, #8]
   1004c:	049a      	lsls	r2, r3, #18
   1004e:	d509      	bpl.n	10064 <HciDrvHandler+0x1f4>
   10050:	4c31      	ldr	r4, [pc, #196]	; (10118 <HciDrvHandler+0x2a8>)
   10052:	e001      	b.n	10058 <HciDrvHandler+0x1e8>
   10054:	3c01      	subs	r4, #1
   10056:	d005      	beq.n	10064 <HciDrvHandler+0x1f4>
   10058:	2010      	movs	r0, #16
   1005a:	f012 fe4b 	bl	22cf4 <am_hal_flash_delay>
   1005e:	68ab      	ldr	r3, [r5, #8]
   10060:	049b      	lsls	r3, r3, #18
   10062:	d4f7      	bmi.n	10054 <HciDrvHandler+0x1e4>
    am_hal_ble_deinitialize(BLE);
   10064:	f8db 0000 	ldr.w	r0, [fp]
   10068:	f011 fbba 	bl	217e0 <am_hal_ble_deinitialize>
    g_ui32NumBytes   = 0;
   1006c:	4b1c      	ldr	r3, [pc, #112]	; (100e0 <HciDrvHandler+0x270>)
   1006e:	2000      	movs	r0, #0
   10070:	6018      	str	r0, [r3, #0]
    g_consumed_bytes = 0;
   10072:	4b1c      	ldr	r3, [pc, #112]	; (100e4 <HciDrvHandler+0x274>)
   10074:	6018      	str	r0, [r3, #0]
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   10076:	f7ff fd3d 	bl	faf4 <HciDrvRadioBoot>
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   1007a:	4928      	ldr	r1, [pc, #160]	; (1011c <HciDrvHandler+0x2ac>)
   1007c:	481b      	ldr	r0, [pc, #108]	; (100ec <HciDrvHandler+0x27c>)
   1007e:	f44f 6302 	mov.w	r3, #2080	; 0x820
   10082:	f44f 7282 	mov.w	r2, #260	; 0x104
   10086:	f013 fa21 	bl	234cc <am_hal_queue_init>
}
   1008a:	b003      	add	sp, #12
   1008c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   10090:	f00c b9ee 	b.w	1c470 <DmDevReset>
        if (g_hciDrvErrorHandler)
   10094:	4a1b      	ldr	r2, [pc, #108]	; (10104 <HciDrvHandler+0x294>)
   10096:	6812      	ldr	r2, [r2, #0]
   10098:	b10a      	cbz	r2, 1009e <HciDrvHandler+0x22e>
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   1009a:	4618      	mov	r0, r3
   1009c:	4790      	blx	r2
    BLE_HEARTBEAT_STOP();
   1009e:	4815      	ldr	r0, [pc, #84]	; (100f4 <HciDrvHandler+0x284>)
   100a0:	f008 f8de 	bl	18260 <WsfTimerStop>
   100a4:	4b1a      	ldr	r3, [pc, #104]	; (10110 <HciDrvHandler+0x2a0>)
   100a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   100aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   100ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   100b2:	f3bf 8f6f 	isb	sy
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   100b6:	4d17      	ldr	r5, [pc, #92]	; (10114 <HciDrvHandler+0x2a4>)
    am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF);
   100b8:	f8db 0000 	ldr.w	r0, [fp]
   100bc:	2101      	movs	r1, #1
   100be:	f011 fc3b 	bl	21938 <am_hal_ble_power_control>
    WHILE_TIMEOUT_MS_BREAK(PWRCTRL->DEVPWREN_b.PWRBLEL, 1000, 0);
   100c2:	68ab      	ldr	r3, [r5, #8]
   100c4:	049f      	lsls	r7, r3, #18
   100c6:	d5cd      	bpl.n	10064 <HciDrvHandler+0x1f4>
   100c8:	4c13      	ldr	r4, [pc, #76]	; (10118 <HciDrvHandler+0x2a8>)
   100ca:	e001      	b.n	100d0 <HciDrvHandler+0x260>
   100cc:	3c01      	subs	r4, #1
   100ce:	d0c9      	beq.n	10064 <HciDrvHandler+0x1f4>
   100d0:	2010      	movs	r0, #16
   100d2:	f012 fe0f 	bl	22cf4 <am_hal_flash_delay>
   100d6:	68ab      	ldr	r3, [r5, #8]
   100d8:	049e      	lsls	r6, r3, #18
   100da:	d4f7      	bmi.n	100cc <HciDrvHandler+0x25c>
   100dc:	e7c2      	b.n	10064 <HciDrvHandler+0x1f4>
   100de:	bf00      	nop
   100e0:	100058bc 	.word	0x100058bc
   100e4:	10004f78 	.word	0x10004f78
   100e8:	5000c000 	.word	0x5000c000
   100ec:	100058a0 	.word	0x100058a0
   100f0:	100058b8 	.word	0x100058b8
   100f4:	10004f58 	.word	0x10004f58
   100f8:	100057a0 	.word	0x100057a0
   100fc:	10002b20 	.word	0x10002b20
   10100:	10004f56 	.word	0x10004f56
   10104:	10004f7c 	.word	0x10004f7c
   10108:	09000002 	.word	0x09000002
   1010c:	09000006 	.word	0x09000006
   10110:	e000e100 	.word	0xe000e100
   10114:	40021000 	.word	0x40021000
   10118:	000f4240 	.word	0x000f4240
   1011c:	10004f80 	.word	0x10004f80
   10120:	10004f4c 	.word	0x10004f4c

00010124 <HciVscUpdateBDAddress>:
    HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   10124:	4a02      	ldr	r2, [pc, #8]	; (10130 <HciVscUpdateBDAddress+0xc>)
   10126:	2106      	movs	r1, #6
   10128:	f64f 4032 	movw	r0, #64562	; 0xfc32
   1012c:	f001 bb18 	b.w	11760 <HciVendorSpecificCmd>
   10130:	10004f50 	.word	0x10004f50

00010134 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   10134:	b508      	push	{r3, lr}
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   10136:	f001 f8c1 	bl	112bc <HciResetCmd>

  // update Bluetooth Address to controller
  HciVscUpdateBDAddress();        

}
   1013a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HciVscUpdateBDAddress();        
   1013e:	f7ff bff1 	b.w	10124 <HciVscUpdateBDAddress>
   10142:	bf00      	nop

00010144 <hciCoreResetSequence>:
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   10144:	7803      	ldrb	r3, [r0, #0]
   10146:	2b0e      	cmp	r3, #14
   10148:	d000      	beq.n	1014c <hciCoreResetSequence+0x8>
   1014a:	4770      	bx	lr
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
    pMsg++;                   /* skip num packets */
    BSTREAM_TO_UINT16(opcode, pMsg);
   1014c:	7902      	ldrb	r2, [r0, #4]
   1014e:	78c1      	ldrb	r1, [r0, #3]
   10150:	eb01 2102 	add.w	r1, r1, r2, lsl #8
    pMsg++;                   /* skip status */

    /* decode opcode */
    switch (opcode)
   10154:	f242 034a 	movw	r3, #8266	; 0x204a
    BSTREAM_TO_UINT16(opcode, pMsg);
   10158:	b289      	uxth	r1, r1
    switch (opcode)
   1015a:	4299      	cmp	r1, r3
    pMsg++;                   /* skip status */
   1015c:	f100 0206 	add.w	r2, r0, #6
    switch (opcode)
   10160:	d8f3      	bhi.n	1014a <hciCoreResetSequence+0x6>
{
   10162:	b500      	push	{lr}
    switch (opcode)
   10164:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
{
   10168:	b083      	sub	sp, #12
    switch (opcode)
   1016a:	d962      	bls.n	10232 <hciCoreResetSequence+0xee>
   1016c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   10170:	3b01      	subs	r3, #1
   10172:	2b49      	cmp	r3, #73	; 0x49
   10174:	d85a      	bhi.n	1022c <hciCoreResetSequence+0xe8>
   10176:	e8df f013 	tbh	[pc, r3, lsl #1]
   1017a:	0094      	.short	0x0094
   1017c:	00db009a 	.word	0x00db009a
   10180:	00590059 	.word	0x00590059
   10184:	00590059 	.word	0x00590059
   10188:	00590059 	.word	0x00590059
   1018c:	00590059 	.word	0x00590059
   10190:	00590059 	.word	0x00590059
   10194:	00ed0059 	.word	0x00ed0059
   10198:	00590059 	.word	0x00590059
   1019c:	00590059 	.word	0x00590059
   101a0:	00590059 	.word	0x00590059
   101a4:	00590059 	.word	0x00590059
   101a8:	0059004a 	.word	0x0059004a
   101ac:	00590059 	.word	0x00590059
   101b0:	005900f6 	.word	0x005900f6
   101b4:	00590059 	.word	0x00590059
   101b8:	00590059 	.word	0x00590059
   101bc:	00590059 	.word	0x00590059
   101c0:	005900c3 	.word	0x005900c3
   101c4:	00590059 	.word	0x00590059
   101c8:	00590059 	.word	0x00590059
   101cc:	005900cb 	.word	0x005900cb
   101d0:	00590059 	.word	0x00590059
   101d4:	00b40059 	.word	0x00b40059
   101d8:	00590059 	.word	0x00590059
   101dc:	00590059 	.word	0x00590059
   101e0:	00590059 	.word	0x00590059
   101e4:	00590059 	.word	0x00590059
   101e8:	00590059 	.word	0x00590059
   101ec:	008a008a 	.word	0x008a008a
   101f0:	00590059 	.word	0x00590059
   101f4:	00590059 	.word	0x00590059
   101f8:	00590059 	.word	0x00590059
   101fc:	00590059 	.word	0x00590059
   10200:	00590059 	.word	0x00590059
   10204:	00590059 	.word	0x00590059
   10208:	00590059 	.word	0x00590059
   1020c:	008a      	.short	0x008a
        }
        break;

      case HCI_OPCODE_LE_RAND:
        /* check if need to send second rand command */
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   1020e:	4a66      	ldr	r2, [pc, #408]	; (103a8 <hciCoreResetSequence+0x264>)
   10210:	7813      	ldrb	r3, [r2, #0]
   10212:	2b02      	cmp	r3, #2
   10214:	f240 80bb 	bls.w	1038e <hciCoreResetSequence+0x24a>
          HciLeRandCmd();
        }
        else
        {
          /* last command in sequence; set resetting state and call callback */
          hciCb.resetting = FALSE;
   10218:	4a64      	ldr	r2, [pc, #400]	; (103ac <hciCoreResetSequence+0x268>)
   1021a:	2300      	movs	r3, #0
          hdr.param = 0;
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   1021c:	6891      	ldr	r1, [r2, #8]
          hciCb.resetting = FALSE;
   1021e:	7653      	strb	r3, [r2, #25]
          hdr.param = 0;
   10220:	f8ad 3004 	strh.w	r3, [sp, #4]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   10224:	f88d 3006 	strb.w	r3, [sp, #6]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   10228:	a801      	add	r0, sp, #4
   1022a:	4788      	blx	r1

      default:
        break;
    }
  }
}
   1022c:	b003      	add	sp, #12
   1022e:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (opcode)
   10232:	f640 4363 	movw	r3, #3171	; 0xc63
   10236:	4299      	cmp	r1, r3
   10238:	f000 809f 	beq.w	1037a <hciCoreResetSequence+0x236>
   1023c:	d910      	bls.n	10260 <hciCoreResetSequence+0x11c>
   1023e:	f241 0301 	movw	r3, #4097	; 0x1001
   10242:	4299      	cmp	r1, r3
   10244:	d023      	beq.n	1028e <hciCoreResetSequence+0x14a>
   10246:	f241 0309 	movw	r3, #4105	; 0x1009
   1024a:	4299      	cmp	r1, r3
   1024c:	d1ee      	bne.n	1022c <hciCoreResetSequence+0xe8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   1024e:	4858      	ldr	r0, [pc, #352]	; (103b0 <hciCoreResetSequence+0x26c>)
   10250:	4611      	mov	r1, r2
   10252:	f003 f865 	bl	13320 <BdaCpy>
}
   10256:	b003      	add	sp, #12
   10258:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadBufSizeCmd();
   1025c:	f000 bc90 	b.w	10b80 <HciLeReadBufSizeCmd>
    switch (opcode)
   10260:	f640 4301 	movw	r3, #3073	; 0xc01
   10264:	4299      	cmp	r1, r3
   10266:	d00c      	beq.n	10282 <hciCoreResetSequence+0x13e>
   10268:	f640 4303 	movw	r3, #3075	; 0xc03
   1026c:	4299      	cmp	r1, r3
   1026e:	d1dd      	bne.n	1022c <hciCoreResetSequence+0xe8>
        randCnt = 0;
   10270:	4b4d      	ldr	r3, [pc, #308]	; (103a8 <hciCoreResetSequence+0x264>)
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   10272:	4850      	ldr	r0, [pc, #320]	; (103b4 <hciCoreResetSequence+0x270>)
        randCnt = 0;
   10274:	2200      	movs	r2, #0
   10276:	701a      	strb	r2, [r3, #0]
}
   10278:	b003      	add	sp, #12
   1027a:	f85d eb04 	ldr.w	lr, [sp], #4
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   1027e:	f001 b865 	b.w	1134c <HciSetEventMaskCmd>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   10282:	484d      	ldr	r0, [pc, #308]	; (103b8 <hciCoreResetSequence+0x274>)
}
   10284:	b003      	add	sp, #12
   10286:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   1028a:	f000 be3f 	b.w	10f0c <HciLeSetEventMaskCmd>
        if (hciCoreCb.extResetSeq)
   1028e:	4b4b      	ldr	r3, [pc, #300]	; (103bc <hciCoreResetSequence+0x278>)
   10290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   10294:	2b00      	cmp	r3, #0
   10296:	d0c9      	beq.n	1022c <hciCoreResetSequence+0xe8>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   10298:	4610      	mov	r0, r2
}
   1029a:	b003      	add	sp, #12
   1029c:	f85d eb04 	ldr.w	lr, [sp], #4
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   102a0:	4718      	bx	r3
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   102a2:	4847      	ldr	r0, [pc, #284]	; (103c0 <hciCoreResetSequence+0x27c>)
}
   102a4:	b003      	add	sp, #12
   102a6:	f85d eb04 	ldr.w	lr, [sp], #4
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   102aa:	f001 b887 	b.w	113bc <HciSetEventMaskPage2Cmd>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   102ae:	79c1      	ldrb	r1, [r0, #7]
   102b0:	7982      	ldrb	r2, [r0, #6]
   102b2:	4b42      	ldr	r3, [pc, #264]	; (103bc <hciCoreResetSequence+0x278>)
   102b4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   102b8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   102bc:	7a02      	ldrb	r2, [r0, #8]
        if (!APOLLO3_GE_B0)
   102be:	4941      	ldr	r1, [pc, #260]	; (103c4 <hciCoreResetSequence+0x280>)
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   102c0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        if (!APOLLO3_GE_B0)
   102c4:	68c9      	ldr	r1, [r1, #12]
   102c6:	b2c9      	uxtb	r1, r1
   102c8:	2920      	cmp	r1, #32
   102ca:	d803      	bhi.n	102d4 <hciCoreResetSequence+0x190>
          hciCoreCb.numBufs--;
   102cc:	3a01      	subs	r2, #1
   102ce:	b2d2      	uxtb	r2, r2
   102d0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   102d4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
   102d8:	b003      	add	sp, #12
   102da:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadSupStatesCmd();
   102de:	f000 bce5 	b.w	10cac <HciLeReadSupStatesCmd>
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   102e2:	7a42      	ldrb	r2, [r0, #9]
   102e4:	7a01      	ldrb	r1, [r0, #8]
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   102e6:	79c3      	ldrb	r3, [r0, #7]
   102e8:	7980      	ldrb	r0, [r0, #6]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   102ea:	eb01 2102 	add.w	r1, r1, r2, lsl #8
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   102ee:	eb00 2003 	add.w	r0, r0, r3, lsl #8
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   102f2:	b289      	uxth	r1, r1
   102f4:	b280      	uxth	r0, r0
}
   102f6:	b003      	add	sp, #12
   102f8:	f85d eb04 	ldr.w	lr, [sp], #4
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   102fc:	f000 bae0 	b.w	108c0 <HciLeWriteDefDataLen>
        if (hciCoreCb.extResetSeq)
   10300:	492e      	ldr	r1, [pc, #184]	; (103bc <hciCoreResetSequence+0x278>)
   10302:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   10306:	2b00      	cmp	r3, #0
   10308:	d049      	beq.n	1039e <hciCoreResetSequence+0x25a>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   1030a:	f242 0124 	movw	r1, #8228	; 0x2024
   1030e:	e7c3      	b.n	10298 <hciCoreResetSequence+0x154>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   10310:	4b2a      	ldr	r3, [pc, #168]	; (103bc <hciCoreResetSequence+0x278>)
   10312:	7981      	ldrb	r1, [r0, #6]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   10314:	6fda      	ldr	r2, [r3, #124]	; 0x7c
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   10316:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   1031a:	0693      	lsls	r3, r2, #26
   1031c:	d503      	bpl.n	10326 <hciCoreResetSequence+0x1e2>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   1031e:	4b2a      	ldr	r3, [pc, #168]	; (103c8 <hciCoreResetSequence+0x284>)
   10320:	681b      	ldr	r3, [r3, #0]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   10322:	069a      	lsls	r2, r3, #26
   10324:	d42e      	bmi.n	10384 <hciCoreResetSequence+0x240>
}
   10326:	b003      	add	sp, #12
   10328:	f85d eb04 	ldr.w	lr, [sp], #4
          HciLeRandCmd();
   1032c:	f000 bbf8 	b.w	10b20 <HciLeRandCmd>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   10330:	79c1      	ldrb	r1, [r0, #7]
   10332:	7982      	ldrb	r2, [r0, #6]
   10334:	4b21      	ldr	r3, [pc, #132]	; (103bc <hciCoreResetSequence+0x278>)
   10336:	eb02 2201 	add.w	r2, r2, r1, lsl #8
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   1033a:	0651      	lsls	r1, r2, #25
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   1033c:	67da      	str	r2, [r3, #124]	; 0x7c
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   1033e:	d503      	bpl.n	10348 <hciCoreResetSequence+0x204>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   10340:	4921      	ldr	r1, [pc, #132]	; (103c8 <hciCoreResetSequence+0x284>)
   10342:	6809      	ldr	r1, [r1, #0]
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   10344:	0648      	lsls	r0, r1, #25
   10346:	d425      	bmi.n	10394 <hciCoreResetSequence+0x250>
    hciCoreCb.resListSize = 0;
   10348:	2100      	movs	r1, #0
   1034a:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   1034e:	0691      	lsls	r1, r2, #26
   10350:	d5e9      	bpl.n	10326 <hciCoreResetSequence+0x1e2>
   10352:	e7e4      	b.n	1031e <hciCoreResetSequence+0x1da>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   10354:	4b19      	ldr	r3, [pc, #100]	; (103bc <hciCoreResetSequence+0x278>)
   10356:	7982      	ldrb	r2, [r0, #6]
   10358:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
   1035c:	b003      	add	sp, #12
   1035e:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadLocalSupFeatCmd();
   10362:	f000 bc3d 	b.w	10be0 <HciLeReadLocalSupFeatCmd>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   10366:	f8d0 0006 	ldr.w	r0, [r0, #6]
   1036a:	6851      	ldr	r1, [r2, #4]
   1036c:	4b17      	ldr	r3, [pc, #92]	; (103cc <hciCoreResetSequence+0x288>)
   1036e:	c303      	stmia	r3!, {r0, r1}
}
   10370:	b003      	add	sp, #12
   10372:	f85d eb04 	ldr.w	lr, [sp], #4
        HciLeReadWhiteListSizeCmd();
   10376:	f000 bcc9 	b.w	10d0c <HciLeReadWhiteListSizeCmd>
}
   1037a:	b003      	add	sp, #12
   1037c:	f85d eb04 	ldr.w	lr, [sp], #4
        HciReadBdAddrCmd();
   10380:	f000 bf06 	b.w	11190 <HciReadBdAddrCmd>
}
   10384:	b003      	add	sp, #12
   10386:	f85d eb04 	ldr.w	lr, [sp], #4
    HciLeReadMaxDataLen();
   1038a:	f000 bad3 	b.w	10934 <HciLeReadMaxDataLen>
          randCnt++;
   1038e:	3301      	adds	r3, #1
   10390:	7013      	strb	r3, [r2, #0]
   10392:	e7c8      	b.n	10326 <hciCoreResetSequence+0x1e2>
}
   10394:	b003      	add	sp, #12
   10396:	f85d eb04 	ldr.w	lr, [sp], #4
    HciLeReadResolvingListSize();
   1039a:	f001 b941 	b.w	11620 <HciLeReadResolvingListSize>
          hciCoreCb.maxAdvDataLen = 0;
   1039e:	f8a1 3082 	strh.w	r3, [r1, #130]	; 0x82
          hciCoreCb.numSupAdvSets = 0;
   103a2:	f8a1 3084 	strh.w	r3, [r1, #132]	; 0x84
          HciLeRandCmd();
   103a6:	e7be      	b.n	10326 <hciCoreResetSequence+0x1e2>
   103a8:	100058c0 	.word	0x100058c0
   103ac:	100059bc 	.word	0x100059bc
   103b0:	1000593c 	.word	0x1000593c
   103b4:	00024b30 	.word	0x00024b30
   103b8:	00024b40 	.word	0x00024b40
   103bc:	100058e0 	.word	0x100058e0
   103c0:	00024b38 	.word	0x00024b38
   103c4:	40020000 	.word	0x40020000
   103c8:	10002b24 	.word	0x10002b24
   103cc:	10005934 	.word	0x10005934

000103d0 <hciCoreVsCmdCmplRcvd>:
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
}
   103d0:	2012      	movs	r0, #18
   103d2:	4770      	bx	lr

000103d4 <HciVsInit>:
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{

}
   103d4:	4770      	bx	lr
   103d6:	bf00      	nop

000103d8 <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   103d8:	b538      	push	{r3, r4, r5, lr}
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   103da:	1ccb      	adds	r3, r1, #3
{
   103dc:	4605      	mov	r5, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   103de:	b298      	uxth	r0, r3
{
   103e0:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   103e2:	f007 fc5d 	bl	17ca0 <WsfMsgAlloc>
   103e6:	b118      	cbz	r0, 103f0 <hciCmdAlloc+0x18>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   103e8:	0a2b      	lsrs	r3, r5, #8
   103ea:	7005      	strb	r5, [r0, #0]
   103ec:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   103ee:	7084      	strb	r4, [r0, #2]
    p -= HCI_CMD_HDR_LEN;
  }

  return p;
}
   103f0:	bd38      	pop	{r3, r4, r5, pc}
   103f2:	bf00      	nop

000103f4 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   103f4:	b530      	push	{r4, r5, lr}
   103f6:	b083      	sub	sp, #12
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   103f8:	b120      	cbz	r0, 10404 <hciCmdSend+0x10>
   103fa:	4602      	mov	r2, r0
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   103fc:	2100      	movs	r1, #0
   103fe:	4811      	ldr	r0, [pc, #68]	; (10444 <hciCmdSend+0x50>)
   10400:	f007 fc6c 	bl	17cdc <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   10404:	4c10      	ldr	r4, [pc, #64]	; (10448 <hciCmdSend+0x54>)
   10406:	7ea3      	ldrb	r3, [r4, #26]
   10408:	b90b      	cbnz	r3, 1040e <hciCmdSend+0x1a>

      /* send command to transport */
      hciTrSendCmd(p);
    }
  }
}
   1040a:	b003      	add	sp, #12
   1040c:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1040e:	f10d 0107 	add.w	r1, sp, #7
   10412:	f104 0010 	add.w	r0, r4, #16
   10416:	f007 fc67 	bl	17ce8 <WsfMsgDeq>
   1041a:	4605      	mov	r5, r0
   1041c:	2800      	cmp	r0, #0
   1041e:	d0f4      	beq.n	1040a <hciCmdSend+0x16>
      hciCmdCb.numCmdPkts--;
   10420:	7ea3      	ldrb	r3, [r4, #26]
   10422:	3b01      	subs	r3, #1
   10424:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10426:	7842      	ldrb	r2, [r0, #1]
   10428:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1042a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1042c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10430:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10432:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10434:	f007 fe8e 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10438:	4628      	mov	r0, r5
   1043a:	f002 fe8b 	bl	13154 <hciTrSendCmd>
}
   1043e:	b003      	add	sp, #12
   10440:	bd30      	pop	{r4, r5, pc}
   10442:	bf00      	nop
   10444:	100058d4 	.word	0x100058d4
   10448:	100058c4 	.word	0x100058c4

0001044c <hciCmdInit>:
  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   1044c:	4805      	ldr	r0, [pc, #20]	; (10464 <hciCmdInit+0x18>)
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   1044e:	4b06      	ldr	r3, [pc, #24]	; (10468 <hciCmdInit+0x1c>)
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   10450:	7e00      	ldrb	r0, [r0, #24]
   10452:	7318      	strb	r0, [r3, #12]
  hciCmdCb.numCmdPkts = 1;
   10454:	2201      	movs	r2, #1
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   10456:	2100      	movs	r1, #0
   10458:	e9c3 1104 	strd	r1, r1, [r3, #16]
  hciCmdCb.numCmdPkts = 1;
   1045c:	769a      	strb	r2, [r3, #26]
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   1045e:	729a      	strb	r2, [r3, #10]
}
   10460:	4770      	bx	lr
   10462:	bf00      	nop
   10464:	100059bc 	.word	0x100059bc
   10468:	100058c4 	.word	0x100058c4

0001046c <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   1046c:	b508      	push	{r3, lr}
  HCI_TRACE_INFO1("hciCmdTimeout, opcode=0x%x", hciCmdCb.cmdOpcode);
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   1046e:	f7ff fc35 	bl	fcdc <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   10472:	2000      	movs	r0, #0
   10474:	f7ff fb3e 	bl	faf4 <HciDrvRadioBoot>
  DmDevReset();
}
   10478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DmDevReset();
   1047c:	f00b bff8 	b.w	1c470 <DmDevReset>

00010480 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   10480:	b530      	push	{r4, r5, lr}
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   10482:	4c10      	ldr	r4, [pc, #64]	; (104c4 <hciCmdRecvCmpl+0x44>)
{
   10484:	b083      	sub	sp, #12
  WsfTimerStop(&hciCmdCb.cmdTimer);
   10486:	4620      	mov	r0, r4
   10488:	f007 feea 	bl	18260 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   1048c:	2301      	movs	r3, #1
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1048e:	f10d 0107 	add.w	r1, sp, #7
   10492:	f104 0010 	add.w	r0, r4, #16
  hciCmdCb.numCmdPkts = 1;
   10496:	76a3      	strb	r3, [r4, #26]
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10498:	f007 fc26 	bl	17ce8 <WsfMsgDeq>
   1049c:	b178      	cbz	r0, 104be <hciCmdRecvCmpl+0x3e>
      hciCmdCb.numCmdPkts--;
   1049e:	7ea3      	ldrb	r3, [r4, #26]
   104a0:	3b01      	subs	r3, #1
   104a2:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   104a4:	7842      	ldrb	r2, [r0, #1]
   104a6:	7803      	ldrb	r3, [r0, #0]
   104a8:	4605      	mov	r5, r0
   104aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   104ae:	4620      	mov	r0, r4
   104b0:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   104b2:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   104b4:	f007 fe4e 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   104b8:	4628      	mov	r0, r5
   104ba:	f002 fe4b 	bl	13154 <hciTrSendCmd>

  /* send the next queued command */
  hciCmdSend(NULL);
}
   104be:	b003      	add	sp, #12
   104c0:	bd30      	pop	{r4, r5, pc}
   104c2:	bf00      	nop
   104c4:	100058c4 	.word	0x100058c4

000104c8 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   104c8:	b570      	push	{r4, r5, r6, lr}
   104ca:	4604      	mov	r4, r0
   104cc:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   104ce:	2006      	movs	r0, #6
{
   104d0:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   104d2:	f007 fbe5 	bl	17ca0 <WsfMsgAlloc>
   104d6:	b190      	cbz	r0, 104fe <HciDisconnectCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   104d8:	2306      	movs	r3, #6
   104da:	7003      	strb	r3, [r0, #0]
   104dc:	2304      	movs	r3, #4
   104de:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   104e0:	4d14      	ldr	r5, [pc, #80]	; (10534 <HciDisconnectCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   104e2:	70c4      	strb	r4, [r0, #3]
    UINT8_TO_BSTREAM(p, len);
   104e4:	2303      	movs	r3, #3
   104e6:	7083      	strb	r3, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   104e8:	0a23      	lsrs	r3, r4, #8
   104ea:	7103      	strb	r3, [r0, #4]
    UINT8_TO_BSTREAM(p, reason);
   104ec:	4602      	mov	r2, r0
   104ee:	7146      	strb	r6, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   104f0:	2100      	movs	r1, #0
   104f2:	f105 0010 	add.w	r0, r5, #16
   104f6:	f007 fbf1 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   104fa:	7eab      	ldrb	r3, [r5, #26]
   104fc:	b90b      	cbnz	r3, 10502 <HciDisconnectCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   104fe:	b002      	add	sp, #8
   10500:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10502:	f10d 0107 	add.w	r1, sp, #7
   10506:	f105 0010 	add.w	r0, r5, #16
   1050a:	f007 fbed 	bl	17ce8 <WsfMsgDeq>
   1050e:	4604      	mov	r4, r0
   10510:	2800      	cmp	r0, #0
   10512:	d0f4      	beq.n	104fe <HciDisconnectCmd+0x36>
      hciCmdCb.numCmdPkts--;
   10514:	7eab      	ldrb	r3, [r5, #26]
   10516:	3b01      	subs	r3, #1
   10518:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1051a:	7842      	ldrb	r2, [r0, #1]
   1051c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1051e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10520:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10524:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10526:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10528:	f007 fe14 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   1052c:	4620      	mov	r0, r4
   1052e:	f002 fe11 	bl	13154 <hciTrSendCmd>
}
   10532:	e7e4      	b.n	104fe <HciDisconnectCmd+0x36>
   10534:	100058c4 	.word	0x100058c4

00010538 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   10538:	b530      	push	{r4, r5, lr}
   1053a:	4605      	mov	r5, r0
   1053c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1053e:	2011      	movs	r0, #17
{
   10540:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10542:	f007 fbad 	bl	17ca0 <WsfMsgAlloc>
   10546:	b378      	cbz	r0, 105a8 <HciLeConnUpdateCmd+0x70>
    UINT16_TO_BSTREAM(p, opcode);
   10548:	2113      	movs	r1, #19
   1054a:	2320      	movs	r3, #32
   1054c:	7001      	strb	r1, [r0, #0]
   1054e:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   10550:	210e      	movs	r1, #14
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10552:	0a2b      	lsrs	r3, r5, #8
    UINT8_TO_BSTREAM(p, len);
   10554:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   10556:	70c5      	strb	r5, [r0, #3]
   10558:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   1055a:	8823      	ldrh	r3, [r4, #0]
   1055c:	7143      	strb	r3, [r0, #5]
   1055e:	8823      	ldrh	r3, [r4, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10560:	4d1f      	ldr	r5, [pc, #124]	; (105e0 <HciLeConnUpdateCmd+0xa8>)
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   10562:	0a1b      	lsrs	r3, r3, #8
   10564:	7183      	strb	r3, [r0, #6]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   10566:	8863      	ldrh	r3, [r4, #2]
   10568:	71c3      	strb	r3, [r0, #7]
   1056a:	8863      	ldrh	r3, [r4, #2]
   1056c:	0a1b      	lsrs	r3, r3, #8
   1056e:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   10570:	88a3      	ldrh	r3, [r4, #4]
   10572:	7243      	strb	r3, [r0, #9]
   10574:	88a3      	ldrh	r3, [r4, #4]
   10576:	0a1b      	lsrs	r3, r3, #8
   10578:	7283      	strb	r3, [r0, #10]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   1057a:	88e3      	ldrh	r3, [r4, #6]
   1057c:	72c3      	strb	r3, [r0, #11]
   1057e:	88e3      	ldrh	r3, [r4, #6]
   10580:	0a1b      	lsrs	r3, r3, #8
   10582:	7303      	strb	r3, [r0, #12]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   10584:	8923      	ldrh	r3, [r4, #8]
   10586:	7343      	strb	r3, [r0, #13]
   10588:	8923      	ldrh	r3, [r4, #8]
   1058a:	0a1b      	lsrs	r3, r3, #8
   1058c:	7383      	strb	r3, [r0, #14]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   1058e:	8963      	ldrh	r3, [r4, #10]
   10590:	73c3      	strb	r3, [r0, #15]
   10592:	8963      	ldrh	r3, [r4, #10]
   10594:	0a1b      	lsrs	r3, r3, #8
   10596:	7403      	strb	r3, [r0, #16]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10598:	4602      	mov	r2, r0
   1059a:	2100      	movs	r1, #0
   1059c:	f105 0010 	add.w	r0, r5, #16
   105a0:	f007 fb9c 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   105a4:	7eab      	ldrb	r3, [r5, #26]
   105a6:	b90b      	cbnz	r3, 105ac <HciLeConnUpdateCmd+0x74>
    hciCmdSend(pBuf);
  }
}
   105a8:	b003      	add	sp, #12
   105aa:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   105ac:	f10d 0107 	add.w	r1, sp, #7
   105b0:	f105 0010 	add.w	r0, r5, #16
   105b4:	f007 fb98 	bl	17ce8 <WsfMsgDeq>
   105b8:	4604      	mov	r4, r0
   105ba:	2800      	cmp	r0, #0
   105bc:	d0f4      	beq.n	105a8 <HciLeConnUpdateCmd+0x70>
      hciCmdCb.numCmdPkts--;
   105be:	7eab      	ldrb	r3, [r5, #26]
   105c0:	3b01      	subs	r3, #1
   105c2:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   105c4:	7842      	ldrb	r2, [r0, #1]
   105c6:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   105c8:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   105ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   105ce:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   105d0:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   105d2:	f007 fdbf 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   105d6:	4620      	mov	r0, r4
   105d8:	f002 fdbc 	bl	13154 <hciTrSendCmd>
}
   105dc:	e7e4      	b.n	105a8 <HciLeConnUpdateCmd+0x70>
   105de:	bf00      	nop
   105e0:	100058c4 	.word	0x100058c4

000105e4 <HciLeCreateConnCmd>:
 */
/*************************************************************************************************/
void HciLeCreateConnCmd(uint16_t scanInterval, uint16_t scanWindow, uint8_t filterPolicy,
                        uint8_t peerAddrType, uint8_t *pPeerAddr, uint8_t ownAddrType,
                        hciConnSpec_t *pConnSpec)
{
   105e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   105e8:	b082      	sub	sp, #8
   105ea:	4606      	mov	r6, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   105ec:	201c      	movs	r0, #28
{
   105ee:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   105f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   105f4:	460f      	mov	r7, r1
   105f6:	4692      	mov	sl, r2
   105f8:	4699      	mov	r9, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   105fa:	f007 fb51 	bl	17ca0 <WsfMsgAlloc>
   105fe:	2800      	cmp	r0, #0
   10600:	d03d      	beq.n	1067e <HciLeCreateConnCmd+0x9a>
    UINT16_TO_BSTREAM(p, opcode);
   10602:	4604      	mov	r4, r0

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CREATE_CONN, HCI_LEN_LE_CREATE_CONN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, scanInterval);
    UINT16_TO_BSTREAM(p, scanWindow);
   10604:	0a3b      	lsrs	r3, r7, #8
    UINT16_TO_BSTREAM(p, scanInterval);
   10606:	70c6      	strb	r6, [r0, #3]
    UINT16_TO_BSTREAM(p, scanWindow);
   10608:	7183      	strb	r3, [r0, #6]
    UINT16_TO_BSTREAM(p, scanInterval);
   1060a:	0a36      	lsrs	r6, r6, #8
    UINT16_TO_BSTREAM(p, opcode);
   1060c:	230d      	movs	r3, #13
    UINT16_TO_BSTREAM(p, scanInterval);
   1060e:	7106      	strb	r6, [r0, #4]
    UINT8_TO_BSTREAM(p, filterPolicy);
   10610:	f880 a007 	strb.w	sl, [r0, #7]
    UINT8_TO_BSTREAM(p, peerAddrType);
   10614:	f880 9008 	strb.w	r9, [r0, #8]
    UINT16_TO_BSTREAM(p, scanWindow);
   10618:	7147      	strb	r7, [r0, #5]
    UINT16_TO_BSTREAM(p, opcode);
   1061a:	7023      	strb	r3, [r4, #0]
   1061c:	2320      	movs	r3, #32
   1061e:	7063      	strb	r3, [r4, #1]
    UINT8_TO_BSTREAM(p, len);
   10620:	2319      	movs	r3, #25
    BDA_TO_BSTREAM(p, pPeerAddr);
   10622:	990a      	ldr	r1, [sp, #40]	; 0x28
    UINT8_TO_BSTREAM(p, len);
   10624:	70a3      	strb	r3, [r4, #2]
    BDA_TO_BSTREAM(p, pPeerAddr);
   10626:	3009      	adds	r0, #9
   10628:	f002 fe7a 	bl	13320 <BdaCpy>
    UINT8_TO_BSTREAM(p, ownAddrType);
   1062c:	f884 800f 	strb.w	r8, [r4, #15]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   10630:	882b      	ldrh	r3, [r5, #0]
   10632:	7423      	strb	r3, [r4, #16]
   10634:	882b      	ldrh	r3, [r5, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10636:	4e20      	ldr	r6, [pc, #128]	; (106b8 <HciLeCreateConnCmd+0xd4>)
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   10638:	0a1b      	lsrs	r3, r3, #8
   1063a:	7463      	strb	r3, [r4, #17]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   1063c:	886b      	ldrh	r3, [r5, #2]
   1063e:	74a3      	strb	r3, [r4, #18]
   10640:	886b      	ldrh	r3, [r5, #2]
   10642:	0a1b      	lsrs	r3, r3, #8
   10644:	74e3      	strb	r3, [r4, #19]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   10646:	88ab      	ldrh	r3, [r5, #4]
   10648:	7523      	strb	r3, [r4, #20]
   1064a:	88ab      	ldrh	r3, [r5, #4]
   1064c:	0a1b      	lsrs	r3, r3, #8
   1064e:	7563      	strb	r3, [r4, #21]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   10650:	88eb      	ldrh	r3, [r5, #6]
   10652:	75a3      	strb	r3, [r4, #22]
   10654:	88eb      	ldrh	r3, [r5, #6]
   10656:	0a1b      	lsrs	r3, r3, #8
   10658:	75e3      	strb	r3, [r4, #23]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   1065a:	892b      	ldrh	r3, [r5, #8]
   1065c:	7623      	strb	r3, [r4, #24]
   1065e:	892b      	ldrh	r3, [r5, #8]
   10660:	0a1b      	lsrs	r3, r3, #8
   10662:	7663      	strb	r3, [r4, #25]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   10664:	896b      	ldrh	r3, [r5, #10]
   10666:	76a3      	strb	r3, [r4, #26]
   10668:	896b      	ldrh	r3, [r5, #10]
   1066a:	0a1b      	lsrs	r3, r3, #8
   1066c:	76e3      	strb	r3, [r4, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1066e:	4622      	mov	r2, r4
   10670:	2100      	movs	r1, #0
   10672:	f106 0010 	add.w	r0, r6, #16
   10676:	f007 fb31 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1067a:	7eb3      	ldrb	r3, [r6, #26]
   1067c:	b913      	cbnz	r3, 10684 <HciLeCreateConnCmd+0xa0>
    hciCmdSend(pBuf);
  }
}
   1067e:	b002      	add	sp, #8
   10680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10684:	f10d 0107 	add.w	r1, sp, #7
   10688:	f106 0010 	add.w	r0, r6, #16
   1068c:	f007 fb2c 	bl	17ce8 <WsfMsgDeq>
   10690:	4604      	mov	r4, r0
   10692:	2800      	cmp	r0, #0
   10694:	d0f3      	beq.n	1067e <HciLeCreateConnCmd+0x9a>
      hciCmdCb.numCmdPkts--;
   10696:	7eb3      	ldrb	r3, [r6, #26]
   10698:	3b01      	subs	r3, #1
   1069a:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1069c:	7842      	ldrb	r2, [r0, #1]
   1069e:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   106a0:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   106a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   106a6:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   106a8:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   106aa:	f007 fd53 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   106ae:	4620      	mov	r0, r4
   106b0:	f002 fd50 	bl	13154 <hciTrSendCmd>
}
   106b4:	e7e3      	b.n	1067e <HciLeCreateConnCmd+0x9a>
   106b6:	bf00      	nop
   106b8:	100058c4 	.word	0x100058c4

000106bc <HciLeCreateConnCancelCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeCreateConnCancelCmd(void)
{
   106bc:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   106be:	2003      	movs	r0, #3
{
   106c0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   106c2:	f007 faed 	bl	17ca0 <WsfMsgAlloc>
   106c6:	b160      	cbz	r0, 106e2 <HciLeCreateConnCancelCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   106c8:	4c13      	ldr	r4, [pc, #76]	; (10718 <HciLeCreateConnCancelCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   106ca:	f242 030e 	movw	r3, #8206	; 0x200e
    UINT8_TO_BSTREAM(p, len);
   106ce:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   106d0:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   106d2:	4602      	mov	r2, r0
   106d4:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   106d6:	f104 0010 	add.w	r0, r4, #16
   106da:	f007 faff 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   106de:	7ea3      	ldrb	r3, [r4, #26]
   106e0:	b90b      	cbnz	r3, 106e6 <HciLeCreateConnCancelCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CREATE_CONN_CANCEL, HCI_LEN_LE_CREATE_CONN_CANCEL)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   106e2:	b003      	add	sp, #12
   106e4:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   106e6:	f10d 0107 	add.w	r1, sp, #7
   106ea:	f104 0010 	add.w	r0, r4, #16
   106ee:	f007 fafb 	bl	17ce8 <WsfMsgDeq>
   106f2:	4605      	mov	r5, r0
   106f4:	2800      	cmp	r0, #0
   106f6:	d0f4      	beq.n	106e2 <HciLeCreateConnCancelCmd+0x26>
      hciCmdCb.numCmdPkts--;
   106f8:	7ea3      	ldrb	r3, [r4, #26]
   106fa:	3b01      	subs	r3, #1
   106fc:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   106fe:	7842      	ldrb	r2, [r0, #1]
   10700:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10702:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10704:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10708:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1070a:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1070c:	f007 fd22 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10710:	4628      	mov	r0, r5
   10712:	f002 fd1f 	bl	13154 <hciTrSendCmd>
}
   10716:	e7e4      	b.n	106e2 <HciLeCreateConnCancelCmd+0x26>
   10718:	100058c4 	.word	0x100058c4

0001071c <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   1071c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10720:	b082      	sub	sp, #8
   10722:	4607      	mov	r7, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10724:	2011      	movs	r0, #17
{
   10726:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
   1072a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   1072e:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   10732:	460e      	mov	r6, r1
   10734:	4615      	mov	r5, r2
   10736:	461c      	mov	r4, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10738:	f007 fab2 	bl	17ca0 <WsfMsgAlloc>
   1073c:	b360      	cbz	r0, 10798 <HciLeRemoteConnParamReqReply+0x7c>
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
    UINT16_TO_BSTREAM(p, intervalMin);
    UINT16_TO_BSTREAM(p, intervalMax);
    UINT16_TO_BSTREAM(p, latency);
    UINT16_TO_BSTREAM(p, timeout);
   1073e:	ea4f 231a 	mov.w	r3, sl, lsr #8
    UINT16_TO_BSTREAM(p, latency);
   10742:	7244      	strb	r4, [r0, #9]
    UINT16_TO_BSTREAM(p, timeout);
   10744:	7303      	strb	r3, [r0, #12]
   10746:	4684      	mov	ip, r0
    UINT16_TO_BSTREAM(p, latency);
   10748:	0a24      	lsrs	r4, r4, #8
    UINT16_TO_BSTREAM(p, minCeLen);
    UINT16_TO_BSTREAM(p, maxCeLen);
   1074a:	ea4f 2318 	mov.w	r3, r8, lsr #8
    UINT16_TO_BSTREAM(p, handle);
   1074e:	70c7      	strb	r7, [r0, #3]
    UINT16_TO_BSTREAM(p, intervalMin);
   10750:	7146      	strb	r6, [r0, #5]
    UINT16_TO_BSTREAM(p, intervalMax);
   10752:	71c5      	strb	r5, [r0, #7]
    UINT16_TO_BSTREAM(p, latency);
   10754:	7284      	strb	r4, [r0, #10]
    UINT16_TO_BSTREAM(p, maxCeLen);
   10756:	7403      	strb	r3, [r0, #16]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10758:	4c1d      	ldr	r4, [pc, #116]	; (107d0 <HciLeRemoteConnParamReqReply+0xb4>)
    UINT16_TO_BSTREAM(p, timeout);
   1075a:	f880 a00b 	strb.w	sl, [r0, #11]
    UINT16_TO_BSTREAM(p, opcode);
   1075e:	2320      	movs	r3, #32
    UINT16_TO_BSTREAM(p, minCeLen);
   10760:	ea4f 2219 	mov.w	r2, r9, lsr #8
    UINT16_TO_BSTREAM(p, handle);
   10764:	0a3f      	lsrs	r7, r7, #8
    UINT16_TO_BSTREAM(p, intervalMin);
   10766:	0a36      	lsrs	r6, r6, #8
    UINT16_TO_BSTREAM(p, intervalMax);
   10768:	0a2d      	lsrs	r5, r5, #8
    UINT16_TO_BSTREAM(p, minCeLen);
   1076a:	7382      	strb	r2, [r0, #14]
    UINT16_TO_BSTREAM(p, handle);
   1076c:	7107      	strb	r7, [r0, #4]
    UINT16_TO_BSTREAM(p, intervalMin);
   1076e:	7186      	strb	r6, [r0, #6]
    UINT16_TO_BSTREAM(p, intervalMax);
   10770:	7205      	strb	r5, [r0, #8]
    UINT16_TO_BSTREAM(p, minCeLen);
   10772:	f880 900d 	strb.w	r9, [r0, #13]
    UINT16_TO_BSTREAM(p, maxCeLen);
   10776:	f880 800f 	strb.w	r8, [r0, #15]
    UINT16_TO_BSTREAM(p, opcode);
   1077a:	f88c 3000 	strb.w	r3, [ip]
   1077e:	f88c 3001 	strb.w	r3, [ip, #1]
    UINT8_TO_BSTREAM(p, len);
   10782:	230e      	movs	r3, #14
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10784:	4602      	mov	r2, r0
    UINT8_TO_BSTREAM(p, len);
   10786:	f88c 3002 	strb.w	r3, [ip, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1078a:	2100      	movs	r1, #0
   1078c:	f104 0010 	add.w	r0, r4, #16
   10790:	f007 faa4 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10794:	7ea3      	ldrb	r3, [r4, #26]
   10796:	b913      	cbnz	r3, 1079e <HciLeRemoteConnParamReqReply+0x82>
    hciCmdSend(pBuf);
  }
}
   10798:	b002      	add	sp, #8
   1079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1079e:	f10d 0107 	add.w	r1, sp, #7
   107a2:	f104 0010 	add.w	r0, r4, #16
   107a6:	f007 fa9f 	bl	17ce8 <WsfMsgDeq>
   107aa:	4605      	mov	r5, r0
   107ac:	2800      	cmp	r0, #0
   107ae:	d0f3      	beq.n	10798 <HciLeRemoteConnParamReqReply+0x7c>
      hciCmdCb.numCmdPkts--;
   107b0:	7ea3      	ldrb	r3, [r4, #26]
   107b2:	3b01      	subs	r3, #1
   107b4:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   107b6:	7842      	ldrb	r2, [r0, #1]
   107b8:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   107ba:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   107bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   107c0:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   107c2:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   107c4:	f007 fcc6 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   107c8:	4628      	mov	r0, r5
   107ca:	f002 fcc3 	bl	13154 <hciTrSendCmd>
}
   107ce:	e7e3      	b.n	10798 <HciLeRemoteConnParamReqReply+0x7c>
   107d0:	100058c4 	.word	0x100058c4

000107d4 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   107d4:	b570      	push	{r4, r5, r6, lr}
   107d6:	4604      	mov	r4, r0
   107d8:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   107da:	2006      	movs	r0, #6
{
   107dc:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   107de:	f007 fa5f 	bl	17ca0 <WsfMsgAlloc>
   107e2:	b190      	cbz	r0, 1080a <HciLeRemoteConnParamReqNegReply+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   107e4:	2321      	movs	r3, #33	; 0x21
   107e6:	7003      	strb	r3, [r0, #0]
   107e8:	2320      	movs	r3, #32
   107ea:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   107ec:	4d14      	ldr	r5, [pc, #80]	; (10840 <HciLeRemoteConnParamReqNegReply+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   107ee:	70c4      	strb	r4, [r0, #3]
    UINT8_TO_BSTREAM(p, len);
   107f0:	2303      	movs	r3, #3
   107f2:	7083      	strb	r3, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   107f4:	0a23      	lsrs	r3, r4, #8
   107f6:	7103      	strb	r3, [r0, #4]
    UINT8_TO_BSTREAM(p, reason);
   107f8:	4602      	mov	r2, r0
   107fa:	7146      	strb	r6, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   107fc:	2100      	movs	r1, #0
   107fe:	f105 0010 	add.w	r0, r5, #16
   10802:	f007 fa6b 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10806:	7eab      	ldrb	r3, [r5, #26]
   10808:	b90b      	cbnz	r3, 1080e <HciLeRemoteConnParamReqNegReply+0x3a>
    hciCmdSend(pBuf);
  }
}
   1080a:	b002      	add	sp, #8
   1080c:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1080e:	f10d 0107 	add.w	r1, sp, #7
   10812:	f105 0010 	add.w	r0, r5, #16
   10816:	f007 fa67 	bl	17ce8 <WsfMsgDeq>
   1081a:	4604      	mov	r4, r0
   1081c:	2800      	cmp	r0, #0
   1081e:	d0f4      	beq.n	1080a <HciLeRemoteConnParamReqNegReply+0x36>
      hciCmdCb.numCmdPkts--;
   10820:	7eab      	ldrb	r3, [r5, #26]
   10822:	3b01      	subs	r3, #1
   10824:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10826:	7842      	ldrb	r2, [r0, #1]
   10828:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1082a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1082c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10830:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10832:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10834:	f007 fc8e 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10838:	4620      	mov	r0, r4
   1083a:	f002 fc8b 	bl	13154 <hciTrSendCmd>
}
   1083e:	e7e4      	b.n	1080a <HciLeRemoteConnParamReqNegReply+0x36>
   10840:	100058c4 	.word	0x100058c4

00010844 <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   10844:	b570      	push	{r4, r5, r6, lr}
   10846:	4605      	mov	r5, r0
   10848:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1084a:	2009      	movs	r0, #9
{
   1084c:	460e      	mov	r6, r1
   1084e:	4614      	mov	r4, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10850:	f007 fa26 	bl	17ca0 <WsfMsgAlloc>
   10854:	b1b8      	cbz	r0, 10886 <HciLeSetDataLen+0x42>
    UINT16_TO_BSTREAM(p, opcode);
   10856:	2322      	movs	r3, #34	; 0x22
   10858:	7003      	strb	r3, [r0, #0]
   1085a:	2320      	movs	r3, #32
   1085c:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   1085e:	2306      	movs	r3, #6
   10860:	7083      	strb	r3, [r0, #2]
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10862:	70c5      	strb	r5, [r0, #3]
   10864:	0a2b      	lsrs	r3, r5, #8
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10866:	4d15      	ldr	r5, [pc, #84]	; (108bc <HciLeSetDataLen+0x78>)
    UINT16_TO_BSTREAM(p, handle);
   10868:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, txOctets);
   1086a:	0a32      	lsrs	r2, r6, #8
    UINT16_TO_BSTREAM(p, txTime);
   1086c:	0a23      	lsrs	r3, r4, #8
    UINT16_TO_BSTREAM(p, txOctets);
   1086e:	7182      	strb	r2, [r0, #6]
    UINT16_TO_BSTREAM(p, txTime);
   10870:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, txOctets);
   10872:	7146      	strb	r6, [r0, #5]
    UINT16_TO_BSTREAM(p, txTime);
   10874:	71c4      	strb	r4, [r0, #7]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10876:	4602      	mov	r2, r0
   10878:	2100      	movs	r1, #0
   1087a:	f105 0010 	add.w	r0, r5, #16
   1087e:	f007 fa2d 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10882:	7eab      	ldrb	r3, [r5, #26]
   10884:	b90b      	cbnz	r3, 1088a <HciLeSetDataLen+0x46>
    hciCmdSend(pBuf);
  }
}
   10886:	b002      	add	sp, #8
   10888:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1088a:	f10d 0107 	add.w	r1, sp, #7
   1088e:	f105 0010 	add.w	r0, r5, #16
   10892:	f007 fa29 	bl	17ce8 <WsfMsgDeq>
   10896:	4604      	mov	r4, r0
   10898:	2800      	cmp	r0, #0
   1089a:	d0f4      	beq.n	10886 <HciLeSetDataLen+0x42>
      hciCmdCb.numCmdPkts--;
   1089c:	7eab      	ldrb	r3, [r5, #26]
   1089e:	3b01      	subs	r3, #1
   108a0:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   108a2:	7842      	ldrb	r2, [r0, #1]
   108a4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   108a6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   108a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   108ac:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   108ae:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   108b0:	f007 fc50 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   108b4:	4620      	mov	r0, r4
   108b6:	f002 fc4d 	bl	13154 <hciTrSendCmd>
}
   108ba:	e7e4      	b.n	10886 <HciLeSetDataLen+0x42>
   108bc:	100058c4 	.word	0x100058c4

000108c0 <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   108c0:	b570      	push	{r4, r5, r6, lr}
   108c2:	4605      	mov	r5, r0
   108c4:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   108c6:	2007      	movs	r0, #7
{
   108c8:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   108ca:	f007 f9e9 	bl	17ca0 <WsfMsgAlloc>
   108ce:	b1a0      	cbz	r0, 108fa <HciLeWriteDefDataLen+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   108d0:	2324      	movs	r3, #36	; 0x24
   108d2:	7003      	strb	r3, [r0, #0]
   108d4:	2320      	movs	r3, #32
   108d6:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   108d8:	2304      	movs	r3, #4
   108da:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   108dc:	4e14      	ldr	r6, [pc, #80]	; (10930 <HciLeWriteDefDataLen+0x70>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   108de:	70c5      	strb	r5, [r0, #3]
   108e0:	0a2b      	lsrs	r3, r5, #8
   108e2:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   108e4:	0a23      	lsrs	r3, r4, #8
   108e6:	7183      	strb	r3, [r0, #6]
   108e8:	4602      	mov	r2, r0
   108ea:	7144      	strb	r4, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   108ec:	2100      	movs	r1, #0
   108ee:	f106 0010 	add.w	r0, r6, #16
   108f2:	f007 f9f3 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   108f6:	7eb3      	ldrb	r3, [r6, #26]
   108f8:	b90b      	cbnz	r3, 108fe <HciLeWriteDefDataLen+0x3e>
    hciCmdSend(pBuf);
  }
}
   108fa:	b002      	add	sp, #8
   108fc:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   108fe:	f10d 0107 	add.w	r1, sp, #7
   10902:	f106 0010 	add.w	r0, r6, #16
   10906:	f007 f9ef 	bl	17ce8 <WsfMsgDeq>
   1090a:	4604      	mov	r4, r0
   1090c:	2800      	cmp	r0, #0
   1090e:	d0f4      	beq.n	108fa <HciLeWriteDefDataLen+0x3a>
      hciCmdCb.numCmdPkts--;
   10910:	7eb3      	ldrb	r3, [r6, #26]
   10912:	3b01      	subs	r3, #1
   10914:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10916:	7842      	ldrb	r2, [r0, #1]
   10918:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1091a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1091c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10920:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10922:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10924:	f007 fc16 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10928:	4620      	mov	r0, r4
   1092a:	f002 fc13 	bl	13154 <hciTrSendCmd>
}
   1092e:	e7e4      	b.n	108fa <HciLeWriteDefDataLen+0x3a>
   10930:	100058c4 	.word	0x100058c4

00010934 <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   10934:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10936:	2003      	movs	r0, #3
{
   10938:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1093a:	f007 f9b1 	bl	17ca0 <WsfMsgAlloc>
   1093e:	b160      	cbz	r0, 1095a <HciLeReadMaxDataLen+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10940:	4c13      	ldr	r4, [pc, #76]	; (10990 <HciLeReadMaxDataLen+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   10942:	f242 032f 	movw	r3, #8239	; 0x202f
    UINT8_TO_BSTREAM(p, len);
   10946:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   10948:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   1094a:	4602      	mov	r2, r0
   1094c:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1094e:	f104 0010 	add.w	r0, r4, #16
   10952:	f007 f9c3 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10956:	7ea3      	ldrb	r3, [r4, #26]
   10958:	b90b      	cbnz	r3, 1095e <HciLeReadMaxDataLen+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   1095a:	b003      	add	sp, #12
   1095c:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1095e:	f10d 0107 	add.w	r1, sp, #7
   10962:	f104 0010 	add.w	r0, r4, #16
   10966:	f007 f9bf 	bl	17ce8 <WsfMsgDeq>
   1096a:	4605      	mov	r5, r0
   1096c:	2800      	cmp	r0, #0
   1096e:	d0f4      	beq.n	1095a <HciLeReadMaxDataLen+0x26>
      hciCmdCb.numCmdPkts--;
   10970:	7ea3      	ldrb	r3, [r4, #26]
   10972:	3b01      	subs	r3, #1
   10974:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10976:	7842      	ldrb	r2, [r0, #1]
   10978:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1097a:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1097c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10980:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10982:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10984:	f007 fbe6 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10988:	4628      	mov	r0, r5
   1098a:	f002 fbe3 	bl	13154 <hciTrSendCmd>
}
   1098e:	e7e4      	b.n	1095a <HciLeReadMaxDataLen+0x26>
   10990:	100058c4 	.word	0x100058c4

00010994 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   10994:	b530      	push	{r4, r5, lr}
   10996:	4605      	mov	r5, r0
   10998:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1099a:	2023      	movs	r0, #35	; 0x23
{
   1099c:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1099e:	f007 f97f 	bl	17ca0 <WsfMsgAlloc>
   109a2:	b328      	cbz	r0, 109f0 <HciLeEncryptCmd+0x5c>
    UINT16_TO_BSTREAM(p, opcode);
   109a4:	f242 0117 	movw	r1, #8215	; 0x2017
    UINT8_TO_BSTREAM(p, len);
   109a8:	2320      	movs	r3, #32
    UINT16_TO_BSTREAM(p, opcode);
   109aa:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   109ac:	7083      	strb	r3, [r0, #2]
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pKey, HCI_KEY_LEN);
   109ae:	4602      	mov	r2, r0
   109b0:	6869      	ldr	r1, [r5, #4]
   109b2:	6828      	ldr	r0, [r5, #0]
   109b4:	68ab      	ldr	r3, [r5, #8]
   109b6:	68ed      	ldr	r5, [r5, #12]
   109b8:	f8c2 500f 	str.w	r5, [r2, #15]
   109bc:	f8c2 0003 	str.w	r0, [r2, #3]
   109c0:	f8c2 1007 	str.w	r1, [r2, #7]
   109c4:	f8c2 300b 	str.w	r3, [r2, #11]
    p += HCI_KEY_LEN;
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   109c8:	6820      	ldr	r0, [r4, #0]
   109ca:	6861      	ldr	r1, [r4, #4]
   109cc:	68a3      	ldr	r3, [r4, #8]
   109ce:	68e4      	ldr	r4, [r4, #12]
   109d0:	f8c2 401f 	str.w	r4, [r2, #31]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   109d4:	4c14      	ldr	r4, [pc, #80]	; (10a28 <HciLeEncryptCmd+0x94>)
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   109d6:	f8c2 0013 	str.w	r0, [r2, #19]
   109da:	f8c2 1017 	str.w	r1, [r2, #23]
   109de:	f8c2 301b 	str.w	r3, [r2, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   109e2:	2100      	movs	r1, #0
   109e4:	f104 0010 	add.w	r0, r4, #16
   109e8:	f007 f978 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   109ec:	7ea3      	ldrb	r3, [r4, #26]
   109ee:	b90b      	cbnz	r3, 109f4 <HciLeEncryptCmd+0x60>
    hciCmdSend(pBuf);
  }
}
   109f0:	b003      	add	sp, #12
   109f2:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   109f4:	f10d 0107 	add.w	r1, sp, #7
   109f8:	f104 0010 	add.w	r0, r4, #16
   109fc:	f007 f974 	bl	17ce8 <WsfMsgDeq>
   10a00:	4605      	mov	r5, r0
   10a02:	2800      	cmp	r0, #0
   10a04:	d0f4      	beq.n	109f0 <HciLeEncryptCmd+0x5c>
      hciCmdCb.numCmdPkts--;
   10a06:	7ea3      	ldrb	r3, [r4, #26]
   10a08:	3b01      	subs	r3, #1
   10a0a:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10a0c:	7842      	ldrb	r2, [r0, #1]
   10a0e:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10a10:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10a12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10a16:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10a18:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10a1a:	f007 fb9b 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10a1e:	4628      	mov	r0, r5
   10a20:	f002 fb98 	bl	13154 <hciTrSendCmd>
}
   10a24:	e7e4      	b.n	109f0 <HciLeEncryptCmd+0x5c>
   10a26:	bf00      	nop
   10a28:	100058c4 	.word	0x100058c4

00010a2c <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   10a2c:	b530      	push	{r4, r5, lr}
   10a2e:	4604      	mov	r4, r0
   10a30:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10a32:	2005      	movs	r0, #5
   10a34:	f007 f934 	bl	17ca0 <WsfMsgAlloc>
   10a38:	b188      	cbz	r0, 10a5e <HciLeLtkReqNegReplCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10a3a:	4d16      	ldr	r5, [pc, #88]	; (10a94 <HciLeLtkReqNegReplCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10a3c:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   10a3e:	211b      	movs	r1, #27
   10a40:	2320      	movs	r3, #32
   10a42:	7001      	strb	r1, [r0, #0]
   10a44:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   10a46:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
   10a48:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
   10a4a:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   10a4c:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10a4e:	4602      	mov	r2, r0
   10a50:	2100      	movs	r1, #0
   10a52:	f105 0010 	add.w	r0, r5, #16
   10a56:	f007 f941 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10a5a:	7eab      	ldrb	r3, [r5, #26]
   10a5c:	b90b      	cbnz	r3, 10a62 <HciLeLtkReqNegReplCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   10a5e:	b003      	add	sp, #12
   10a60:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10a62:	f10d 0107 	add.w	r1, sp, #7
   10a66:	f105 0010 	add.w	r0, r5, #16
   10a6a:	f007 f93d 	bl	17ce8 <WsfMsgDeq>
   10a6e:	4604      	mov	r4, r0
   10a70:	2800      	cmp	r0, #0
   10a72:	d0f4      	beq.n	10a5e <HciLeLtkReqNegReplCmd+0x32>
      hciCmdCb.numCmdPkts--;
   10a74:	7eab      	ldrb	r3, [r5, #26]
   10a76:	3b01      	subs	r3, #1
   10a78:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10a7a:	7842      	ldrb	r2, [r0, #1]
   10a7c:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10a7e:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10a80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10a84:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10a86:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10a88:	f007 fb64 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10a8c:	4620      	mov	r0, r4
   10a8e:	f002 fb61 	bl	13154 <hciTrSendCmd>
}
   10a92:	e7e4      	b.n	10a5e <HciLeLtkReqNegReplCmd+0x32>
   10a94:	100058c4 	.word	0x100058c4

00010a98 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   10a98:	b530      	push	{r4, r5, lr}
   10a9a:	4605      	mov	r5, r0
   10a9c:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10a9e:	2015      	movs	r0, #21
{
   10aa0:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10aa2:	f007 f8fd 	bl	17ca0 <WsfMsgAlloc>
   10aa6:	b1e8      	cbz	r0, 10ae4 <HciLeLtkReqReplCmd+0x4c>
    UINT16_TO_BSTREAM(p, opcode);
   10aa8:	211a      	movs	r1, #26
   10aaa:	2320      	movs	r3, #32
   10aac:	7001      	strb	r1, [r0, #0]
   10aae:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   10ab0:	2112      	movs	r1, #18
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10ab2:	0a2b      	lsrs	r3, r5, #8
    UINT8_TO_BSTREAM(p, len);
   10ab4:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   10ab6:	70c5      	strb	r5, [r0, #3]
   10ab8:	7103      	strb	r3, [r0, #4]
    memcpy(p, pKey, HCI_KEY_LEN);
   10aba:	4602      	mov	r2, r0
   10abc:	6861      	ldr	r1, [r4, #4]
   10abe:	6820      	ldr	r0, [r4, #0]
   10ac0:	68a3      	ldr	r3, [r4, #8]
   10ac2:	68e4      	ldr	r4, [r4, #12]
   10ac4:	f8c2 4011 	str.w	r4, [r2, #17]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10ac8:	4c14      	ldr	r4, [pc, #80]	; (10b1c <HciLeLtkReqReplCmd+0x84>)
    memcpy(p, pKey, HCI_KEY_LEN);
   10aca:	f8c2 0005 	str.w	r0, [r2, #5]
   10ace:	f8c2 1009 	str.w	r1, [r2, #9]
   10ad2:	f8c2 300d 	str.w	r3, [r2, #13]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10ad6:	2100      	movs	r1, #0
   10ad8:	f104 0010 	add.w	r0, r4, #16
   10adc:	f007 f8fe 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10ae0:	7ea3      	ldrb	r3, [r4, #26]
   10ae2:	b90b      	cbnz	r3, 10ae8 <HciLeLtkReqReplCmd+0x50>
    hciCmdSend(pBuf);
  }
}
   10ae4:	b003      	add	sp, #12
   10ae6:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10ae8:	f10d 0107 	add.w	r1, sp, #7
   10aec:	f104 0010 	add.w	r0, r4, #16
   10af0:	f007 f8fa 	bl	17ce8 <WsfMsgDeq>
   10af4:	4605      	mov	r5, r0
   10af6:	2800      	cmp	r0, #0
   10af8:	d0f4      	beq.n	10ae4 <HciLeLtkReqReplCmd+0x4c>
      hciCmdCb.numCmdPkts--;
   10afa:	7ea3      	ldrb	r3, [r4, #26]
   10afc:	3b01      	subs	r3, #1
   10afe:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10b00:	7842      	ldrb	r2, [r0, #1]
   10b02:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b04:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10b06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b0a:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10b0c:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b0e:	f007 fb21 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10b12:	4628      	mov	r0, r5
   10b14:	f002 fb1e 	bl	13154 <hciTrSendCmd>
}
   10b18:	e7e4      	b.n	10ae4 <HciLeLtkReqReplCmd+0x4c>
   10b1a:	bf00      	nop
   10b1c:	100058c4 	.word	0x100058c4

00010b20 <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   10b20:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10b22:	2003      	movs	r0, #3
{
   10b24:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10b26:	f007 f8bb 	bl	17ca0 <WsfMsgAlloc>
   10b2a:	b160      	cbz	r0, 10b46 <HciLeRandCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10b2c:	4c13      	ldr	r4, [pc, #76]	; (10b7c <HciLeRandCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   10b2e:	f242 0318 	movw	r3, #8216	; 0x2018
    UINT8_TO_BSTREAM(p, len);
   10b32:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   10b34:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   10b36:	4602      	mov	r2, r0
   10b38:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10b3a:	f104 0010 	add.w	r0, r4, #16
   10b3e:	f007 f8cd 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10b42:	7ea3      	ldrb	r3, [r4, #26]
   10b44:	b90b      	cbnz	r3, 10b4a <HciLeRandCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   10b46:	b003      	add	sp, #12
   10b48:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10b4a:	f10d 0107 	add.w	r1, sp, #7
   10b4e:	f104 0010 	add.w	r0, r4, #16
   10b52:	f007 f8c9 	bl	17ce8 <WsfMsgDeq>
   10b56:	4605      	mov	r5, r0
   10b58:	2800      	cmp	r0, #0
   10b5a:	d0f4      	beq.n	10b46 <HciLeRandCmd+0x26>
      hciCmdCb.numCmdPkts--;
   10b5c:	7ea3      	ldrb	r3, [r4, #26]
   10b5e:	3b01      	subs	r3, #1
   10b60:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10b62:	7842      	ldrb	r2, [r0, #1]
   10b64:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b66:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10b68:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b6c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10b6e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10b70:	f007 faf0 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10b74:	4628      	mov	r0, r5
   10b76:	f002 faed 	bl	13154 <hciTrSendCmd>
}
   10b7a:	e7e4      	b.n	10b46 <HciLeRandCmd+0x26>
   10b7c:	100058c4 	.word	0x100058c4

00010b80 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   10b80:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10b82:	2003      	movs	r0, #3
{
   10b84:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10b86:	f007 f88b 	bl	17ca0 <WsfMsgAlloc>
   10b8a:	b160      	cbz	r0, 10ba6 <HciLeReadBufSizeCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10b8c:	4c13      	ldr	r4, [pc, #76]	; (10bdc <HciLeReadBufSizeCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   10b8e:	f242 0302 	movw	r3, #8194	; 0x2002
    UINT8_TO_BSTREAM(p, len);
   10b92:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   10b94:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   10b96:	4602      	mov	r2, r0
   10b98:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10b9a:	f104 0010 	add.w	r0, r4, #16
   10b9e:	f007 f89d 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10ba2:	7ea3      	ldrb	r3, [r4, #26]
   10ba4:	b90b      	cbnz	r3, 10baa <HciLeReadBufSizeCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   10ba6:	b003      	add	sp, #12
   10ba8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10baa:	f10d 0107 	add.w	r1, sp, #7
   10bae:	f104 0010 	add.w	r0, r4, #16
   10bb2:	f007 f899 	bl	17ce8 <WsfMsgDeq>
   10bb6:	4605      	mov	r5, r0
   10bb8:	2800      	cmp	r0, #0
   10bba:	d0f4      	beq.n	10ba6 <HciLeReadBufSizeCmd+0x26>
      hciCmdCb.numCmdPkts--;
   10bbc:	7ea3      	ldrb	r3, [r4, #26]
   10bbe:	3b01      	subs	r3, #1
   10bc0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10bc2:	7842      	ldrb	r2, [r0, #1]
   10bc4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10bc6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10bc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10bcc:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10bce:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10bd0:	f007 fac0 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10bd4:	4628      	mov	r0, r5
   10bd6:	f002 fabd 	bl	13154 <hciTrSendCmd>
}
   10bda:	e7e4      	b.n	10ba6 <HciLeReadBufSizeCmd+0x26>
   10bdc:	100058c4 	.word	0x100058c4

00010be0 <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   10be0:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10be2:	2003      	movs	r0, #3
{
   10be4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10be6:	f007 f85b 	bl	17ca0 <WsfMsgAlloc>
   10bea:	b160      	cbz	r0, 10c06 <HciLeReadLocalSupFeatCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10bec:	4c13      	ldr	r4, [pc, #76]	; (10c3c <HciLeReadLocalSupFeatCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   10bee:	f242 0303 	movw	r3, #8195	; 0x2003
    UINT8_TO_BSTREAM(p, len);
   10bf2:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   10bf4:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   10bf6:	4602      	mov	r2, r0
   10bf8:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10bfa:	f104 0010 	add.w	r0, r4, #16
   10bfe:	f007 f86d 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10c02:	7ea3      	ldrb	r3, [r4, #26]
   10c04:	b90b      	cbnz	r3, 10c0a <HciLeReadLocalSupFeatCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   10c06:	b003      	add	sp, #12
   10c08:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10c0a:	f10d 0107 	add.w	r1, sp, #7
   10c0e:	f104 0010 	add.w	r0, r4, #16
   10c12:	f007 f869 	bl	17ce8 <WsfMsgDeq>
   10c16:	4605      	mov	r5, r0
   10c18:	2800      	cmp	r0, #0
   10c1a:	d0f4      	beq.n	10c06 <HciLeReadLocalSupFeatCmd+0x26>
      hciCmdCb.numCmdPkts--;
   10c1c:	7ea3      	ldrb	r3, [r4, #26]
   10c1e:	3b01      	subs	r3, #1
   10c20:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10c22:	7842      	ldrb	r2, [r0, #1]
   10c24:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10c26:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10c28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10c2c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10c2e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10c30:	f007 fa90 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10c34:	4628      	mov	r0, r5
   10c36:	f002 fa8d 	bl	13154 <hciTrSendCmd>
}
   10c3a:	e7e4      	b.n	10c06 <HciLeReadLocalSupFeatCmd+0x26>
   10c3c:	100058c4 	.word	0x100058c4

00010c40 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   10c40:	b530      	push	{r4, r5, lr}
   10c42:	4604      	mov	r4, r0
   10c44:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10c46:	2005      	movs	r0, #5
   10c48:	f007 f82a 	bl	17ca0 <WsfMsgAlloc>
   10c4c:	b188      	cbz	r0, 10c72 <HciLeReadRemoteFeatCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10c4e:	4d16      	ldr	r5, [pc, #88]	; (10ca8 <HciLeReadRemoteFeatCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   10c50:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   10c52:	2116      	movs	r1, #22
   10c54:	2320      	movs	r3, #32
   10c56:	7001      	strb	r1, [r0, #0]
   10c58:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   10c5a:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
   10c5c:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
   10c5e:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   10c60:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10c62:	4602      	mov	r2, r0
   10c64:	2100      	movs	r1, #0
   10c66:	f105 0010 	add.w	r0, r5, #16
   10c6a:	f007 f837 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10c6e:	7eab      	ldrb	r3, [r5, #26]
   10c70:	b90b      	cbnz	r3, 10c76 <HciLeReadRemoteFeatCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   10c72:	b003      	add	sp, #12
   10c74:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10c76:	f10d 0107 	add.w	r1, sp, #7
   10c7a:	f105 0010 	add.w	r0, r5, #16
   10c7e:	f007 f833 	bl	17ce8 <WsfMsgDeq>
   10c82:	4604      	mov	r4, r0
   10c84:	2800      	cmp	r0, #0
   10c86:	d0f4      	beq.n	10c72 <HciLeReadRemoteFeatCmd+0x32>
      hciCmdCb.numCmdPkts--;
   10c88:	7eab      	ldrb	r3, [r5, #26]
   10c8a:	3b01      	subs	r3, #1
   10c8c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10c8e:	7842      	ldrb	r2, [r0, #1]
   10c90:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10c92:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10c94:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10c98:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10c9a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10c9c:	f007 fa5a 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10ca0:	4620      	mov	r0, r4
   10ca2:	f002 fa57 	bl	13154 <hciTrSendCmd>
}
   10ca6:	e7e4      	b.n	10c72 <HciLeReadRemoteFeatCmd+0x32>
   10ca8:	100058c4 	.word	0x100058c4

00010cac <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   10cac:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10cae:	2003      	movs	r0, #3
{
   10cb0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10cb2:	f006 fff5 	bl	17ca0 <WsfMsgAlloc>
   10cb6:	b160      	cbz	r0, 10cd2 <HciLeReadSupStatesCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10cb8:	4c13      	ldr	r4, [pc, #76]	; (10d08 <HciLeReadSupStatesCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   10cba:	f242 031c 	movw	r3, #8220	; 0x201c
    UINT8_TO_BSTREAM(p, len);
   10cbe:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   10cc0:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   10cc2:	4602      	mov	r2, r0
   10cc4:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10cc6:	f104 0010 	add.w	r0, r4, #16
   10cca:	f007 f807 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10cce:	7ea3      	ldrb	r3, [r4, #26]
   10cd0:	b90b      	cbnz	r3, 10cd6 <HciLeReadSupStatesCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   10cd2:	b003      	add	sp, #12
   10cd4:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10cd6:	f10d 0107 	add.w	r1, sp, #7
   10cda:	f104 0010 	add.w	r0, r4, #16
   10cde:	f007 f803 	bl	17ce8 <WsfMsgDeq>
   10ce2:	4605      	mov	r5, r0
   10ce4:	2800      	cmp	r0, #0
   10ce6:	d0f4      	beq.n	10cd2 <HciLeReadSupStatesCmd+0x26>
      hciCmdCb.numCmdPkts--;
   10ce8:	7ea3      	ldrb	r3, [r4, #26]
   10cea:	3b01      	subs	r3, #1
   10cec:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10cee:	7842      	ldrb	r2, [r0, #1]
   10cf0:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10cf2:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10cf4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10cf8:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10cfa:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10cfc:	f007 fa2a 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10d00:	4628      	mov	r0, r5
   10d02:	f002 fa27 	bl	13154 <hciTrSendCmd>
}
   10d06:	e7e4      	b.n	10cd2 <HciLeReadSupStatesCmd+0x26>
   10d08:	100058c4 	.word	0x100058c4

00010d0c <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   10d0c:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10d0e:	2003      	movs	r0, #3
{
   10d10:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10d12:	f006 ffc5 	bl	17ca0 <WsfMsgAlloc>
   10d16:	b160      	cbz	r0, 10d32 <HciLeReadWhiteListSizeCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10d18:	4c13      	ldr	r4, [pc, #76]	; (10d68 <HciLeReadWhiteListSizeCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   10d1a:	f242 030f 	movw	r3, #8207	; 0x200f
    UINT8_TO_BSTREAM(p, len);
   10d1e:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   10d20:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   10d22:	4602      	mov	r2, r0
   10d24:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10d26:	f104 0010 	add.w	r0, r4, #16
   10d2a:	f006 ffd7 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10d2e:	7ea3      	ldrb	r3, [r4, #26]
   10d30:	b90b      	cbnz	r3, 10d36 <HciLeReadWhiteListSizeCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   10d32:	b003      	add	sp, #12
   10d34:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10d36:	f10d 0107 	add.w	r1, sp, #7
   10d3a:	f104 0010 	add.w	r0, r4, #16
   10d3e:	f006 ffd3 	bl	17ce8 <WsfMsgDeq>
   10d42:	4605      	mov	r5, r0
   10d44:	2800      	cmp	r0, #0
   10d46:	d0f4      	beq.n	10d32 <HciLeReadWhiteListSizeCmd+0x26>
      hciCmdCb.numCmdPkts--;
   10d48:	7ea3      	ldrb	r3, [r4, #26]
   10d4a:	3b01      	subs	r3, #1
   10d4c:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10d4e:	7842      	ldrb	r2, [r0, #1]
   10d50:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10d52:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10d54:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10d58:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10d5a:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10d5c:	f007 f9fa 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10d60:	4628      	mov	r0, r5
   10d62:	f002 f9f7 	bl	13154 <hciTrSendCmd>
}
   10d66:	e7e4      	b.n	10d32 <HciLeReadWhiteListSizeCmd+0x26>
   10d68:	100058c4 	.word	0x100058c4

00010d6c <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   10d6c:	b570      	push	{r4, r5, r6, lr}
   10d6e:	4604      	mov	r4, r0
   10d70:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10d72:	2004      	movs	r0, #4
   10d74:	f006 ff94 	bl	17ca0 <WsfMsgAlloc>
   10d78:	b178      	cbz	r0, 10d9a <HciLeSetAdvEnableCmd+0x2e>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10d7a:	4d15      	ldr	r5, [pc, #84]	; (10dd0 <HciLeSetAdvEnableCmd+0x64>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
   10d7c:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   10d7e:	2320      	movs	r3, #32
   10d80:	7043      	strb	r3, [r0, #1]
   10d82:	260a      	movs	r6, #10
    UINT8_TO_BSTREAM(p, len);
   10d84:	2301      	movs	r3, #1
   10d86:	7083      	strb	r3, [r0, #2]
   10d88:	4602      	mov	r2, r0
    UINT16_TO_BSTREAM(p, opcode);
   10d8a:	7006      	strb	r6, [r0, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10d8c:	2100      	movs	r1, #0
   10d8e:	f105 0010 	add.w	r0, r5, #16
   10d92:	f006 ffa3 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10d96:	7eab      	ldrb	r3, [r5, #26]
   10d98:	b90b      	cbnz	r3, 10d9e <HciLeSetAdvEnableCmd+0x32>
    hciCmdSend(pBuf);
  }
}
   10d9a:	b002      	add	sp, #8
   10d9c:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10d9e:	f10d 0107 	add.w	r1, sp, #7
   10da2:	f105 0010 	add.w	r0, r5, #16
   10da6:	f006 ff9f 	bl	17ce8 <WsfMsgDeq>
   10daa:	4604      	mov	r4, r0
   10dac:	2800      	cmp	r0, #0
   10dae:	d0f4      	beq.n	10d9a <HciLeSetAdvEnableCmd+0x2e>
      hciCmdCb.numCmdPkts--;
   10db0:	7eab      	ldrb	r3, [r5, #26]
   10db2:	3b01      	subs	r3, #1
   10db4:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10db6:	7842      	ldrb	r2, [r0, #1]
   10db8:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10dba:	4631      	mov	r1, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10dbc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10dc0:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10dc2:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10dc4:	f007 f9c6 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10dc8:	4620      	mov	r0, r4
   10dca:	f002 f9c3 	bl	13154 <hciTrSendCmd>
}
   10dce:	e7e4      	b.n	10d9a <HciLeSetAdvEnableCmd+0x2e>
   10dd0:	100058c4 	.word	0x100058c4

00010dd4 <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   10dd4:	b570      	push	{r4, r5, r6, lr}
   10dd6:	4605      	mov	r5, r0
   10dd8:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10dda:	2023      	movs	r0, #35	; 0x23
{
   10ddc:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10dde:	f006 ff5f 	bl	17ca0 <WsfMsgAlloc>
   10de2:	b1d8      	cbz	r0, 10e1c <HciLeSetAdvDataCmd+0x48>
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, len);
   10de4:	1d03      	adds	r3, r0, #4
    UINT16_TO_BSTREAM(p, opcode);
   10de6:	2220      	movs	r2, #32
   10de8:	2108      	movs	r1, #8
   10dea:	7001      	strb	r1, [r0, #0]
   10dec:	7042      	strb	r2, [r0, #1]
    memcpy(p, pData, len);
   10dee:	4631      	mov	r1, r6
    UINT8_TO_BSTREAM(p, len);
   10df0:	7082      	strb	r2, [r0, #2]
    UINT8_TO_BSTREAM(p, len);
   10df2:	4604      	mov	r4, r0
    memcpy(p, pData, len);
   10df4:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
   10df6:	70c5      	strb	r5, [r0, #3]
    memcpy(p, pData, len);
   10df8:	4618      	mov	r0, r3
   10dfa:	f7fb f981 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10dfe:	4e15      	ldr	r6, [pc, #84]	; (10e54 <HciLeSetAdvDataCmd+0x80>)
    p += len;
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   10e00:	f1c5 021f 	rsb	r2, r5, #31
   10e04:	2100      	movs	r1, #0
   10e06:	4428      	add	r0, r5
   10e08:	f010 f9b4 	bl	21174 <memset>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10e0c:	4622      	mov	r2, r4
   10e0e:	2100      	movs	r1, #0
   10e10:	f106 0010 	add.w	r0, r6, #16
   10e14:	f006 ff62 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10e18:	7eb3      	ldrb	r3, [r6, #26]
   10e1a:	b90b      	cbnz	r3, 10e20 <HciLeSetAdvDataCmd+0x4c>
    hciCmdSend(pBuf);
  }
}
   10e1c:	b002      	add	sp, #8
   10e1e:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10e20:	f10d 0107 	add.w	r1, sp, #7
   10e24:	f106 0010 	add.w	r0, r6, #16
   10e28:	f006 ff5e 	bl	17ce8 <WsfMsgDeq>
   10e2c:	4604      	mov	r4, r0
   10e2e:	2800      	cmp	r0, #0
   10e30:	d0f4      	beq.n	10e1c <HciLeSetAdvDataCmd+0x48>
      hciCmdCb.numCmdPkts--;
   10e32:	7eb3      	ldrb	r3, [r6, #26]
   10e34:	3b01      	subs	r3, #1
   10e36:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10e38:	7842      	ldrb	r2, [r0, #1]
   10e3a:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10e3c:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10e3e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10e42:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10e44:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10e46:	f007 f985 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10e4a:	4620      	mov	r0, r4
   10e4c:	f002 f982 	bl	13154 <hciTrSendCmd>
}
   10e50:	e7e4      	b.n	10e1c <HciLeSetAdvDataCmd+0x48>
   10e52:	bf00      	nop
   10e54:	100058c4 	.word	0x100058c4

00010e58 <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   10e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e5c:	b083      	sub	sp, #12
   10e5e:	4680      	mov	r8, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10e60:	2012      	movs	r0, #18
{
   10e62:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
   10e66:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   10e6a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
   10e6e:	460d      	mov	r5, r1
   10e70:	4617      	mov	r7, r2
   10e72:	461e      	mov	r6, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10e74:	f006 ff14 	bl	17ca0 <WsfMsgAlloc>
   10e78:	2800      	cmp	r0, #0
   10e7a:	d03f      	beq.n	10efc <HciLeSetAdvParamCmd+0xa4>
    UINT16_TO_BSTREAM(p, opcode);
   10e7c:	4604      	mov	r4, r0
   10e7e:	2306      	movs	r3, #6
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, advIntervalMin);
    UINT16_TO_BSTREAM(p, advIntervalMax);
    UINT8_TO_BSTREAM(p, advType);
   10e80:	71c7      	strb	r7, [r0, #7]
    UINT8_TO_BSTREAM(p, ownAddrType);
   10e82:	7206      	strb	r6, [r0, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   10e84:	f880 b009 	strb.w	fp, [r0, #9]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   10e88:	f880 8003 	strb.w	r8, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   10e8c:	7023      	strb	r3, [r4, #0]
   10e8e:	2320      	movs	r3, #32
   10e90:	7063      	strb	r3, [r4, #1]
    UINT8_TO_BSTREAM(p, len);
   10e92:	230f      	movs	r3, #15
   10e94:	70a3      	strb	r3, [r4, #2]
    if (pPeerAddr != NULL)
   10e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    UINT16_TO_BSTREAM(p, advIntervalMax);
   10e98:	7165      	strb	r5, [r4, #5]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   10e9a:	ea4f 2018 	mov.w	r0, r8, lsr #8
    UINT16_TO_BSTREAM(p, advIntervalMax);
   10e9e:	0a2d      	lsrs	r5, r5, #8
    UINT16_TO_BSTREAM(p, advIntervalMin);
   10ea0:	7120      	strb	r0, [r4, #4]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   10ea2:	71a5      	strb	r5, [r4, #6]
    UINT8_TO_BSTREAM(p, peerAddrType);
   10ea4:	f104 000a 	add.w	r0, r4, #10
    if (pPeerAddr != NULL)
   10ea8:	b35b      	cbz	r3, 10f02 <HciLeSetAdvParamCmd+0xaa>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   10eaa:	4619      	mov	r1, r3
   10eac:	f002 fa38 	bl	13320 <BdaCpy>
   10eb0:	f104 0010 	add.w	r0, r4, #16
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10eb4:	4d14      	ldr	r5, [pc, #80]	; (10f08 <HciLeSetAdvParamCmd+0xb0>)
    }
    else
    {
      p = BdaClr(p);
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   10eb6:	f880 a000 	strb.w	sl, [r0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   10eba:	f880 9001 	strb.w	r9, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10ebe:	4622      	mov	r2, r4
   10ec0:	2100      	movs	r1, #0
   10ec2:	f105 0010 	add.w	r0, r5, #16
   10ec6:	f006 ff09 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10eca:	7eab      	ldrb	r3, [r5, #26]
   10ecc:	b1b3      	cbz	r3, 10efc <HciLeSetAdvParamCmd+0xa4>
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10ece:	f10d 0107 	add.w	r1, sp, #7
   10ed2:	f105 0010 	add.w	r0, r5, #16
   10ed6:	f006 ff07 	bl	17ce8 <WsfMsgDeq>
   10eda:	4604      	mov	r4, r0
   10edc:	b170      	cbz	r0, 10efc <HciLeSetAdvParamCmd+0xa4>
      hciCmdCb.numCmdPkts--;
   10ede:	7eab      	ldrb	r3, [r5, #26]
   10ee0:	3b01      	subs	r3, #1
   10ee2:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10ee4:	7842      	ldrb	r2, [r0, #1]
   10ee6:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10ee8:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10eea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10eee:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10ef0:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10ef2:	f007 f92f 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10ef6:	4620      	mov	r0, r4
   10ef8:	f002 f92c 	bl	13154 <hciTrSendCmd>
    hciCmdSend(pBuf);
  }
}
   10efc:	b003      	add	sp, #12
   10efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = BdaClr(p);
   10f02:	f002 fa1b 	bl	1333c <BdaClr>
   10f06:	e7d5      	b.n	10eb4 <HciLeSetAdvParamCmd+0x5c>
   10f08:	100058c4 	.word	0x100058c4

00010f0c <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   10f0c:	b530      	push	{r4, r5, lr}
   10f0e:	4604      	mov	r4, r0
   10f10:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10f12:	200b      	movs	r0, #11
   10f14:	f006 fec4 	bl	17ca0 <WsfMsgAlloc>
   10f18:	b198      	cbz	r0, 10f42 <HciLeSetEventMaskCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   10f1a:	f242 0101 	movw	r1, #8193	; 0x2001
    UINT8_TO_BSTREAM(p, len);
   10f1e:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
   10f20:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   10f22:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10f24:	4d14      	ldr	r5, [pc, #80]	; (10f78 <HciLeSetEventMaskCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   10f26:	6823      	ldr	r3, [r4, #0]
   10f28:	6861      	ldr	r1, [r4, #4]
   10f2a:	f8c0 1007 	str.w	r1, [r0, #7]
   10f2e:	f8c0 3003 	str.w	r3, [r0, #3]
   10f32:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10f34:	2100      	movs	r1, #0
   10f36:	f105 0010 	add.w	r0, r5, #16
   10f3a:	f006 fecf 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10f3e:	7eab      	ldrb	r3, [r5, #26]
   10f40:	b90b      	cbnz	r3, 10f46 <HciLeSetEventMaskCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   10f42:	b003      	add	sp, #12
   10f44:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10f46:	f10d 0107 	add.w	r1, sp, #7
   10f4a:	f105 0010 	add.w	r0, r5, #16
   10f4e:	f006 fecb 	bl	17ce8 <WsfMsgDeq>
   10f52:	4604      	mov	r4, r0
   10f54:	2800      	cmp	r0, #0
   10f56:	d0f4      	beq.n	10f42 <HciLeSetEventMaskCmd+0x36>
      hciCmdCb.numCmdPkts--;
   10f58:	7eab      	ldrb	r3, [r5, #26]
   10f5a:	3b01      	subs	r3, #1
   10f5c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10f5e:	7842      	ldrb	r2, [r0, #1]
   10f60:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10f62:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10f64:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10f68:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10f6a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10f6c:	f007 f8f2 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10f70:	4620      	mov	r0, r4
   10f72:	f002 f8ef 	bl	13154 <hciTrSendCmd>
}
   10f76:	e7e4      	b.n	10f42 <HciLeSetEventMaskCmd+0x36>
   10f78:	100058c4 	.word	0x100058c4

00010f7c <HciLeSetScanEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanEnableCmd(uint8_t enable, uint8_t filterDup)
{
   10f7c:	b570      	push	{r4, r5, r6, lr}
   10f7e:	4606      	mov	r6, r0
   10f80:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10f82:	2005      	movs	r0, #5
{
   10f84:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10f86:	f006 fe8b 	bl	17ca0 <WsfMsgAlloc>
   10f8a:	b180      	cbz	r0, 10fae <HciLeSetScanEnableCmd+0x32>
    UINT16_TO_BSTREAM(p, opcode);
   10f8c:	230c      	movs	r3, #12
   10f8e:	7003      	strb	r3, [r0, #0]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10f90:	4d14      	ldr	r5, [pc, #80]	; (10fe4 <HciLeSetScanEnableCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_ENABLE, HCI_LEN_LE_SET_SCAN_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
   10f92:	70c6      	strb	r6, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   10f94:	2320      	movs	r3, #32
   10f96:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   10f98:	2302      	movs	r3, #2
   10f9a:	7083      	strb	r3, [r0, #2]
    UINT8_TO_BSTREAM(p, filterDup);
   10f9c:	4602      	mov	r2, r0
   10f9e:	7104      	strb	r4, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   10fa0:	2100      	movs	r1, #0
   10fa2:	f105 0010 	add.w	r0, r5, #16
   10fa6:	f006 fe99 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   10faa:	7eab      	ldrb	r3, [r5, #26]
   10fac:	b90b      	cbnz	r3, 10fb2 <HciLeSetScanEnableCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   10fae:	b002      	add	sp, #8
   10fb0:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   10fb2:	f10d 0107 	add.w	r1, sp, #7
   10fb6:	f105 0010 	add.w	r0, r5, #16
   10fba:	f006 fe95 	bl	17ce8 <WsfMsgDeq>
   10fbe:	4604      	mov	r4, r0
   10fc0:	2800      	cmp	r0, #0
   10fc2:	d0f4      	beq.n	10fae <HciLeSetScanEnableCmd+0x32>
      hciCmdCb.numCmdPkts--;
   10fc4:	7eab      	ldrb	r3, [r5, #26]
   10fc6:	3b01      	subs	r3, #1
   10fc8:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10fca:	7842      	ldrb	r2, [r0, #1]
   10fcc:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10fce:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10fd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10fd4:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   10fd6:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   10fd8:	f007 f8bc 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   10fdc:	4620      	mov	r0, r4
   10fde:	f002 f8b9 	bl	13154 <hciTrSendCmd>
}
   10fe2:	e7e4      	b.n	10fae <HciLeSetScanEnableCmd+0x32>
   10fe4:	100058c4 	.word	0x100058c4

00010fe8 <HciLeSetScanParamCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanParamCmd(uint8_t scanType, uint16_t scanInterval, uint16_t scanWindow,
                          uint8_t ownAddrType, uint8_t scanFiltPolicy)
{
   10fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fec:	b082      	sub	sp, #8
   10fee:	4607      	mov	r7, r0
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10ff0:	200a      	movs	r0, #10
{
   10ff2:	f89d 6020 	ldrb.w	r6, [sp, #32]
   10ff6:	460c      	mov	r4, r1
   10ff8:	4615      	mov	r5, r2
   10ffa:	4698      	mov	r8, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   10ffc:	f006 fe50 	bl	17ca0 <WsfMsgAlloc>
   11000:	b1c0      	cbz	r0, 11034 <HciLeSetScanParamCmd+0x4c>
    UINT16_TO_BSTREAM(p, opcode);
   11002:	4602      	mov	r2, r0
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_PARAM, HCI_LEN_LE_SET_SCAN_PARAM)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, scanType);
    UINT16_TO_BSTREAM(p, scanInterval);
    UINT16_TO_BSTREAM(p, scanWindow);
   11004:	0a2b      	lsrs	r3, r5, #8
    UINT16_TO_BSTREAM(p, scanInterval);
   11006:	7104      	strb	r4, [r0, #4]
    UINT16_TO_BSTREAM(p, scanWindow);
   11008:	71c3      	strb	r3, [r0, #7]
    UINT16_TO_BSTREAM(p, scanInterval);
   1100a:	0a24      	lsrs	r4, r4, #8
    UINT16_TO_BSTREAM(p, opcode);
   1100c:	230b      	movs	r3, #11
    UINT8_TO_BSTREAM(p, scanType);
   1100e:	70c7      	strb	r7, [r0, #3]
    UINT8_TO_BSTREAM(p, ownAddrType);
   11010:	f880 8008 	strb.w	r8, [r0, #8]
    UINT16_TO_BSTREAM(p, scanInterval);
   11014:	7144      	strb	r4, [r0, #5]
    UINT16_TO_BSTREAM(p, scanWindow);
   11016:	7185      	strb	r5, [r0, #6]
    UINT8_TO_BSTREAM(p, scanFiltPolicy);
   11018:	7246      	strb	r6, [r0, #9]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1101a:	4f14      	ldr	r7, [pc, #80]	; (1106c <HciLeSetScanParamCmd+0x84>)
    UINT16_TO_BSTREAM(p, opcode);
   1101c:	7013      	strb	r3, [r2, #0]
   1101e:	2320      	movs	r3, #32
   11020:	7053      	strb	r3, [r2, #1]
    UINT8_TO_BSTREAM(p, len);
   11022:	2307      	movs	r3, #7
   11024:	7093      	strb	r3, [r2, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11026:	2100      	movs	r1, #0
   11028:	f107 0010 	add.w	r0, r7, #16
   1102c:	f006 fe56 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11030:	7ebb      	ldrb	r3, [r7, #26]
   11032:	b913      	cbnz	r3, 1103a <HciLeSetScanParamCmd+0x52>
    hciCmdSend(pBuf);
  }
}
   11034:	b002      	add	sp, #8
   11036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1103a:	f10d 0107 	add.w	r1, sp, #7
   1103e:	f107 0010 	add.w	r0, r7, #16
   11042:	f006 fe51 	bl	17ce8 <WsfMsgDeq>
   11046:	4604      	mov	r4, r0
   11048:	2800      	cmp	r0, #0
   1104a:	d0f3      	beq.n	11034 <HciLeSetScanParamCmd+0x4c>
      hciCmdCb.numCmdPkts--;
   1104c:	7ebb      	ldrb	r3, [r7, #26]
   1104e:	3b01      	subs	r3, #1
   11050:	76bb      	strb	r3, [r7, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11052:	7842      	ldrb	r2, [r0, #1]
   11054:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11056:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11058:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1105c:	4638      	mov	r0, r7
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1105e:	833b      	strh	r3, [r7, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11060:	f007 f878 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11064:	4620      	mov	r0, r4
   11066:	f002 f875 	bl	13154 <hciTrSendCmd>
}
   1106a:	e7e3      	b.n	11034 <HciLeSetScanParamCmd+0x4c>
   1106c:	100058c4 	.word	0x100058c4

00011070 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   11070:	b570      	push	{r4, r5, r6, lr}
   11072:	4605      	mov	r5, r0
   11074:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11076:	2023      	movs	r0, #35	; 0x23
{
   11078:	460e      	mov	r6, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1107a:	f006 fe11 	bl	17ca0 <WsfMsgAlloc>
   1107e:	b1d8      	cbz	r0, 110b8 <HciLeSetScanRespDataCmd+0x48>
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, len);
   11080:	1d03      	adds	r3, r0, #4
    UINT16_TO_BSTREAM(p, opcode);
   11082:	2220      	movs	r2, #32
   11084:	2109      	movs	r1, #9
   11086:	7001      	strb	r1, [r0, #0]
   11088:	7042      	strb	r2, [r0, #1]
    memcpy(p, pData, len);
   1108a:	4631      	mov	r1, r6
    UINT8_TO_BSTREAM(p, len);
   1108c:	7082      	strb	r2, [r0, #2]
    UINT8_TO_BSTREAM(p, len);
   1108e:	4604      	mov	r4, r0
    memcpy(p, pData, len);
   11090:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
   11092:	70c5      	strb	r5, [r0, #3]
    memcpy(p, pData, len);
   11094:	4618      	mov	r0, r3
   11096:	f7fb f833 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1109a:	4e15      	ldr	r6, [pc, #84]	; (110f0 <HciLeSetScanRespDataCmd+0x80>)
    p += len;
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   1109c:	f1c5 021f 	rsb	r2, r5, #31
   110a0:	2100      	movs	r1, #0
   110a2:	4428      	add	r0, r5
   110a4:	f010 f866 	bl	21174 <memset>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   110a8:	4622      	mov	r2, r4
   110aa:	2100      	movs	r1, #0
   110ac:	f106 0010 	add.w	r0, r6, #16
   110b0:	f006 fe14 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   110b4:	7eb3      	ldrb	r3, [r6, #26]
   110b6:	b90b      	cbnz	r3, 110bc <HciLeSetScanRespDataCmd+0x4c>
    hciCmdSend(pBuf);
  }
}
   110b8:	b002      	add	sp, #8
   110ba:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   110bc:	f10d 0107 	add.w	r1, sp, #7
   110c0:	f106 0010 	add.w	r0, r6, #16
   110c4:	f006 fe10 	bl	17ce8 <WsfMsgDeq>
   110c8:	4604      	mov	r4, r0
   110ca:	2800      	cmp	r0, #0
   110cc:	d0f4      	beq.n	110b8 <HciLeSetScanRespDataCmd+0x48>
      hciCmdCb.numCmdPkts--;
   110ce:	7eb3      	ldrb	r3, [r6, #26]
   110d0:	3b01      	subs	r3, #1
   110d2:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   110d4:	7842      	ldrb	r2, [r0, #1]
   110d6:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   110d8:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   110da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   110de:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   110e0:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   110e2:	f007 f837 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   110e6:	4620      	mov	r0, r4
   110e8:	f002 f834 	bl	13154 <hciTrSendCmd>
}
   110ec:	e7e4      	b.n	110b8 <HciLeSetScanRespDataCmd+0x48>
   110ee:	bf00      	nop
   110f0:	100058c4 	.word	0x100058c4

000110f4 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   110f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   110f6:	4604      	mov	r4, r0
   110f8:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   110fa:	201f      	movs	r0, #31
{
   110fc:	460d      	mov	r5, r1
   110fe:	4617      	mov	r7, r2
   11100:	461e      	mov	r6, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11102:	f006 fdcd 	bl	17ca0 <WsfMsgAlloc>
   11106:	b330      	cbz	r0, 11156 <HciLeStartEncryptionCmd+0x62>
    UINT16_TO_BSTREAM(p, opcode);
   11108:	2319      	movs	r3, #25
   1110a:	7003      	strb	r3, [r0, #0]
   1110c:	2320      	movs	r3, #32
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   1110e:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   11110:	7043      	strb	r3, [r0, #1]
    UINT16_TO_BSTREAM(p, handle);
   11112:	0a24      	lsrs	r4, r4, #8
    UINT8_TO_BSTREAM(p, len);
   11114:	231c      	movs	r3, #28
    UINT16_TO_BSTREAM(p, handle);
   11116:	7104      	strb	r4, [r0, #4]
    UINT8_TO_BSTREAM(p, len);
   11118:	7083      	strb	r3, [r0, #2]
    memcpy(p, pRand, HCI_RAND_LEN);
   1111a:	682b      	ldr	r3, [r5, #0]
   1111c:	686a      	ldr	r2, [r5, #4]
   1111e:	f8c0 3005 	str.w	r3, [r0, #5]
    p += HCI_RAND_LEN;
    UINT16_TO_BSTREAM(p, diversifier);
   11122:	0a3b      	lsrs	r3, r7, #8
    memcpy(p, pRand, HCI_RAND_LEN);
   11124:	f8c0 2009 	str.w	r2, [r0, #9]
    UINT16_TO_BSTREAM(p, diversifier);
   11128:	7347      	strb	r7, [r0, #13]
   1112a:	7383      	strb	r3, [r0, #14]
    memcpy(p, pKey, HCI_KEY_LEN);
   1112c:	68f4      	ldr	r4, [r6, #12]
   1112e:	6831      	ldr	r1, [r6, #0]
   11130:	6872      	ldr	r2, [r6, #4]
   11132:	68b3      	ldr	r3, [r6, #8]
   11134:	f8c0 401b 	str.w	r4, [r0, #27]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11138:	4c14      	ldr	r4, [pc, #80]	; (1118c <HciLeStartEncryptionCmd+0x98>)
    memcpy(p, pKey, HCI_KEY_LEN);
   1113a:	f8c0 100f 	str.w	r1, [r0, #15]
   1113e:	f8c0 2013 	str.w	r2, [r0, #19]
   11142:	f8c0 3017 	str.w	r3, [r0, #23]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11146:	4602      	mov	r2, r0
   11148:	2100      	movs	r1, #0
   1114a:	f104 0010 	add.w	r0, r4, #16
   1114e:	f006 fdc5 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11152:	7ea3      	ldrb	r3, [r4, #26]
   11154:	b90b      	cbnz	r3, 1115a <HciLeStartEncryptionCmd+0x66>
    hciCmdSend(pBuf);
  }
}
   11156:	b003      	add	sp, #12
   11158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1115a:	f10d 0107 	add.w	r1, sp, #7
   1115e:	f104 0010 	add.w	r0, r4, #16
   11162:	f006 fdc1 	bl	17ce8 <WsfMsgDeq>
   11166:	4605      	mov	r5, r0
   11168:	2800      	cmp	r0, #0
   1116a:	d0f4      	beq.n	11156 <HciLeStartEncryptionCmd+0x62>
      hciCmdCb.numCmdPkts--;
   1116c:	7ea3      	ldrb	r3, [r4, #26]
   1116e:	3b01      	subs	r3, #1
   11170:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11172:	7842      	ldrb	r2, [r0, #1]
   11174:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11176:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11178:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1117c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1117e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11180:	f006 ffe8 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11184:	4628      	mov	r0, r5
   11186:	f001 ffe5 	bl	13154 <hciTrSendCmd>
}
   1118a:	e7e4      	b.n	11156 <HciLeStartEncryptionCmd+0x62>
   1118c:	100058c4 	.word	0x100058c4

00011190 <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   11190:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11192:	2003      	movs	r0, #3
{
   11194:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11196:	f006 fd83 	bl	17ca0 <WsfMsgAlloc>
   1119a:	b160      	cbz	r0, 111b6 <HciReadBdAddrCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1119c:	4c13      	ldr	r4, [pc, #76]	; (111ec <HciReadBdAddrCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1119e:	f241 0309 	movw	r3, #4105	; 0x1009
    UINT8_TO_BSTREAM(p, len);
   111a2:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   111a4:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   111a6:	4602      	mov	r2, r0
   111a8:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   111aa:	f104 0010 	add.w	r0, r4, #16
   111ae:	f006 fd95 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   111b2:	7ea3      	ldrb	r3, [r4, #26]
   111b4:	b90b      	cbnz	r3, 111ba <HciReadBdAddrCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   111b6:	b003      	add	sp, #12
   111b8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   111ba:	f10d 0107 	add.w	r1, sp, #7
   111be:	f104 0010 	add.w	r0, r4, #16
   111c2:	f006 fd91 	bl	17ce8 <WsfMsgDeq>
   111c6:	4605      	mov	r5, r0
   111c8:	2800      	cmp	r0, #0
   111ca:	d0f4      	beq.n	111b6 <HciReadBdAddrCmd+0x26>
      hciCmdCb.numCmdPkts--;
   111cc:	7ea3      	ldrb	r3, [r4, #26]
   111ce:	3b01      	subs	r3, #1
   111d0:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   111d2:	7842      	ldrb	r2, [r0, #1]
   111d4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   111d6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   111d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   111dc:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   111de:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   111e0:	f006 ffb8 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   111e4:	4628      	mov	r0, r5
   111e6:	f001 ffb5 	bl	13154 <hciTrSendCmd>
}
   111ea:	e7e4      	b.n	111b6 <HciReadBdAddrCmd+0x26>
   111ec:	100058c4 	.word	0x100058c4

000111f0 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   111f0:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   111f2:	2003      	movs	r0, #3
{
   111f4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   111f6:	f006 fd53 	bl	17ca0 <WsfMsgAlloc>
   111fa:	b160      	cbz	r0, 11216 <HciReadLocalVerInfoCmd+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   111fc:	4c13      	ldr	r4, [pc, #76]	; (1124c <HciReadLocalVerInfoCmd+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   111fe:	f241 0301 	movw	r3, #4097	; 0x1001
    UINT8_TO_BSTREAM(p, len);
   11202:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11204:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11206:	4602      	mov	r2, r0
   11208:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1120a:	f104 0010 	add.w	r0, r4, #16
   1120e:	f006 fd65 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11212:	7ea3      	ldrb	r3, [r4, #26]
   11214:	b90b      	cbnz	r3, 1121a <HciReadLocalVerInfoCmd+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   11216:	b003      	add	sp, #12
   11218:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1121a:	f10d 0107 	add.w	r1, sp, #7
   1121e:	f104 0010 	add.w	r0, r4, #16
   11222:	f006 fd61 	bl	17ce8 <WsfMsgDeq>
   11226:	4605      	mov	r5, r0
   11228:	2800      	cmp	r0, #0
   1122a:	d0f4      	beq.n	11216 <HciReadLocalVerInfoCmd+0x26>
      hciCmdCb.numCmdPkts--;
   1122c:	7ea3      	ldrb	r3, [r4, #26]
   1122e:	3b01      	subs	r3, #1
   11230:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11232:	7842      	ldrb	r2, [r0, #1]
   11234:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11236:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11238:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1123c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1123e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11240:	f006 ff88 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11244:	4628      	mov	r0, r5
   11246:	f001 ff85 	bl	13154 <hciTrSendCmd>
}
   1124a:	e7e4      	b.n	11216 <HciReadLocalVerInfoCmd+0x26>
   1124c:	100058c4 	.word	0x100058c4

00011250 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   11250:	b530      	push	{r4, r5, lr}
   11252:	4604      	mov	r4, r0
   11254:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11256:	2005      	movs	r0, #5
   11258:	f006 fd22 	bl	17ca0 <WsfMsgAlloc>
   1125c:	b188      	cbz	r0, 11282 <HciReadRssiCmd+0x32>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1125e:	4d16      	ldr	r5, [pc, #88]	; (112b8 <HciReadRssiCmd+0x68>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   11260:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   11262:	2105      	movs	r1, #5
   11264:	2314      	movs	r3, #20
   11266:	7001      	strb	r1, [r0, #0]
   11268:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   1126a:	2102      	movs	r1, #2
    UINT16_TO_BSTREAM(p, handle);
   1126c:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, len);
   1126e:	7081      	strb	r1, [r0, #2]
    UINT16_TO_BSTREAM(p, handle);
   11270:	7103      	strb	r3, [r0, #4]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11272:	4602      	mov	r2, r0
   11274:	2100      	movs	r1, #0
   11276:	f105 0010 	add.w	r0, r5, #16
   1127a:	f006 fd2f 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1127e:	7eab      	ldrb	r3, [r5, #26]
   11280:	b90b      	cbnz	r3, 11286 <HciReadRssiCmd+0x36>
    hciCmdSend(pBuf);
  }
}
   11282:	b003      	add	sp, #12
   11284:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11286:	f10d 0107 	add.w	r1, sp, #7
   1128a:	f105 0010 	add.w	r0, r5, #16
   1128e:	f006 fd2b 	bl	17ce8 <WsfMsgDeq>
   11292:	4604      	mov	r4, r0
   11294:	2800      	cmp	r0, #0
   11296:	d0f4      	beq.n	11282 <HciReadRssiCmd+0x32>
      hciCmdCb.numCmdPkts--;
   11298:	7eab      	ldrb	r3, [r5, #26]
   1129a:	3b01      	subs	r3, #1
   1129c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1129e:	7842      	ldrb	r2, [r0, #1]
   112a0:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   112a2:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   112a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   112a8:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   112aa:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   112ac:	f006 ff52 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   112b0:	4620      	mov	r0, r4
   112b2:	f001 ff4f 	bl	13154 <hciTrSendCmd>
}
   112b6:	e7e4      	b.n	11282 <HciReadRssiCmd+0x32>
   112b8:	100058c4 	.word	0x100058c4

000112bc <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   112bc:	b570      	push	{r4, r5, r6, lr}
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;

  hciCb.secCback((hciEvt_t *)&evt);
   112be:	4b20      	ldr	r3, [pc, #128]	; (11340 <HciResetCmd+0x84>)
   112c0:	4e20      	ldr	r6, [pc, #128]	; (11344 <HciResetCmd+0x88>)
   112c2:	68db      	ldr	r3, [r3, #12]
{
   112c4:	b084      	sub	sp, #16
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   112c6:	2214      	movs	r2, #20
   112c8:	f88d 200a 	strb.w	r2, [sp, #10]
  hciCb.secCback((hciEvt_t *)&evt);
   112cc:	a802      	add	r0, sp, #8
   112ce:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   112d0:	f106 0510 	add.w	r5, r6, #16
   112d4:	e001      	b.n	112da <HciResetCmd+0x1e>
  {
    WsfMsgFree(pBuf);
   112d6:	f006 fceb 	bl	17cb0 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   112da:	f10d 0106 	add.w	r1, sp, #6
   112de:	4628      	mov	r0, r5
   112e0:	f006 fd02 	bl	17ce8 <WsfMsgDeq>
   112e4:	4604      	mov	r4, r0
   112e6:	2800      	cmp	r0, #0
   112e8:	d1f5      	bne.n	112d6 <HciResetCmd+0x1a>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   112ea:	2301      	movs	r3, #1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   112ec:	2003      	movs	r0, #3
  hciCmdCb.numCmdPkts = 1;
   112ee:	76b3      	strb	r3, [r6, #26]
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   112f0:	f006 fcd6 	bl	17ca0 <WsfMsgAlloc>
   112f4:	4602      	mov	r2, r0
   112f6:	b148      	cbz	r0, 1130c <HciResetCmd+0x50>
    UINT16_TO_BSTREAM(p, opcode);
   112f8:	f640 4303 	movw	r3, #3075	; 0xc03
   112fc:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   112fe:	7084      	strb	r4, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11300:	4621      	mov	r1, r4
   11302:	4811      	ldr	r0, [pc, #68]	; (11348 <HciResetCmd+0x8c>)
   11304:	f006 fcea 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11308:	7eb3      	ldrb	r3, [r6, #26]
   1130a:	b90b      	cbnz	r3, 11310 <HciResetCmd+0x54>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   1130c:	b004      	add	sp, #16
   1130e:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11310:	480d      	ldr	r0, [pc, #52]	; (11348 <HciResetCmd+0x8c>)
   11312:	f10d 0107 	add.w	r1, sp, #7
   11316:	f006 fce7 	bl	17ce8 <WsfMsgDeq>
   1131a:	4604      	mov	r4, r0
   1131c:	2800      	cmp	r0, #0
   1131e:	d0f5      	beq.n	1130c <HciResetCmd+0x50>
      hciCmdCb.numCmdPkts--;
   11320:	7eb3      	ldrb	r3, [r6, #26]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11322:	4808      	ldr	r0, [pc, #32]	; (11344 <HciResetCmd+0x88>)
      hciCmdCb.numCmdPkts--;
   11324:	3b01      	subs	r3, #1
   11326:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11328:	7862      	ldrb	r2, [r4, #1]
   1132a:	7823      	ldrb	r3, [r4, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1132c:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1132e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   11332:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11334:	f006 ff0e 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11338:	4620      	mov	r0, r4
   1133a:	f001 ff0b 	bl	13154 <hciTrSendCmd>
}
   1133e:	e7e5      	b.n	1130c <HciResetCmd+0x50>
   11340:	100059bc 	.word	0x100059bc
   11344:	100058c4 	.word	0x100058c4
   11348:	100058d4 	.word	0x100058d4

0001134c <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   1134c:	b530      	push	{r4, r5, lr}
   1134e:	4604      	mov	r4, r0
   11350:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11352:	200b      	movs	r0, #11
   11354:	f006 fca4 	bl	17ca0 <WsfMsgAlloc>
   11358:	b198      	cbz	r0, 11382 <HciSetEventMaskCmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   1135a:	f640 4101 	movw	r1, #3073	; 0xc01
    UINT8_TO_BSTREAM(p, len);
   1135e:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
   11360:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11362:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11364:	4d14      	ldr	r5, [pc, #80]	; (113b8 <HciSetEventMaskCmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   11366:	6823      	ldr	r3, [r4, #0]
   11368:	6861      	ldr	r1, [r4, #4]
   1136a:	f8c0 1007 	str.w	r1, [r0, #7]
   1136e:	f8c0 3003 	str.w	r3, [r0, #3]
   11372:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11374:	2100      	movs	r1, #0
   11376:	f105 0010 	add.w	r0, r5, #16
   1137a:	f006 fcaf 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1137e:	7eab      	ldrb	r3, [r5, #26]
   11380:	b90b      	cbnz	r3, 11386 <HciSetEventMaskCmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   11382:	b003      	add	sp, #12
   11384:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11386:	f10d 0107 	add.w	r1, sp, #7
   1138a:	f105 0010 	add.w	r0, r5, #16
   1138e:	f006 fcab 	bl	17ce8 <WsfMsgDeq>
   11392:	4604      	mov	r4, r0
   11394:	2800      	cmp	r0, #0
   11396:	d0f4      	beq.n	11382 <HciSetEventMaskCmd+0x36>
      hciCmdCb.numCmdPkts--;
   11398:	7eab      	ldrb	r3, [r5, #26]
   1139a:	3b01      	subs	r3, #1
   1139c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1139e:	7842      	ldrb	r2, [r0, #1]
   113a0:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   113a2:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   113a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   113a8:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   113aa:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   113ac:	f006 fed2 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   113b0:	4620      	mov	r0, r4
   113b2:	f001 fecf 	bl	13154 <hciTrSendCmd>
}
   113b6:	e7e4      	b.n	11382 <HciSetEventMaskCmd+0x36>
   113b8:	100058c4 	.word	0x100058c4

000113bc <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   113bc:	b530      	push	{r4, r5, lr}
   113be:	4604      	mov	r4, r0
   113c0:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   113c2:	200b      	movs	r0, #11
   113c4:	f006 fc6c 	bl	17ca0 <WsfMsgAlloc>
   113c8:	b198      	cbz	r0, 113f2 <HciSetEventMaskPage2Cmd+0x36>
    UINT16_TO_BSTREAM(p, opcode);
   113ca:	f640 4163 	movw	r1, #3171	; 0xc63
    UINT8_TO_BSTREAM(p, len);
   113ce:	2308      	movs	r3, #8
    UINT16_TO_BSTREAM(p, opcode);
   113d0:	8001      	strh	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   113d2:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   113d4:	4d14      	ldr	r5, [pc, #80]	; (11428 <HciSetEventMaskPage2Cmd+0x6c>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   113d6:	6823      	ldr	r3, [r4, #0]
   113d8:	6861      	ldr	r1, [r4, #4]
   113da:	f8c0 1007 	str.w	r1, [r0, #7]
   113de:	f8c0 3003 	str.w	r3, [r0, #3]
   113e2:	4602      	mov	r2, r0
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   113e4:	2100      	movs	r1, #0
   113e6:	f105 0010 	add.w	r0, r5, #16
   113ea:	f006 fc77 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   113ee:	7eab      	ldrb	r3, [r5, #26]
   113f0:	b90b      	cbnz	r3, 113f6 <HciSetEventMaskPage2Cmd+0x3a>
    hciCmdSend(pBuf);
  }
}
   113f2:	b003      	add	sp, #12
   113f4:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   113f6:	f10d 0107 	add.w	r1, sp, #7
   113fa:	f105 0010 	add.w	r0, r5, #16
   113fe:	f006 fc73 	bl	17ce8 <WsfMsgDeq>
   11402:	4604      	mov	r4, r0
   11404:	2800      	cmp	r0, #0
   11406:	d0f4      	beq.n	113f2 <HciSetEventMaskPage2Cmd+0x36>
      hciCmdCb.numCmdPkts--;
   11408:	7eab      	ldrb	r3, [r5, #26]
   1140a:	3b01      	subs	r3, #1
   1140c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1140e:	7842      	ldrb	r2, [r0, #1]
   11410:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11412:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11414:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11418:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1141a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1141c:	f006 fe9a 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11420:	4620      	mov	r0, r4
   11422:	f001 fe97 	bl	13154 <hciTrSendCmd>
}
   11426:	e7e4      	b.n	113f2 <HciSetEventMaskPage2Cmd+0x36>
   11428:	100058c4 	.word	0x100058c4

0001142c <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   1142c:	b570      	push	{r4, r5, r6, lr}
   1142e:	4605      	mov	r5, r0
   11430:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11432:	2007      	movs	r0, #7
{
   11434:	460c      	mov	r4, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11436:	f006 fc33 	bl	17ca0 <WsfMsgAlloc>
   1143a:	b1a0      	cbz	r0, 11466 <HciWriteAuthPayloadTimeout+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   1143c:	237c      	movs	r3, #124	; 0x7c
   1143e:	7003      	strb	r3, [r0, #0]
   11440:	230c      	movs	r3, #12
   11442:	7043      	strb	r3, [r0, #1]
    UINT8_TO_BSTREAM(p, len);
   11444:	2304      	movs	r3, #4
   11446:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11448:	4e14      	ldr	r6, [pc, #80]	; (1149c <HciWriteAuthPayloadTimeout+0x70>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT16_TO_BSTREAM(p, handle);
   1144a:	70c5      	strb	r5, [r0, #3]
   1144c:	0a2b      	lsrs	r3, r5, #8
   1144e:	7103      	strb	r3, [r0, #4]
    UINT16_TO_BSTREAM(p, timeout);
   11450:	0a23      	lsrs	r3, r4, #8
   11452:	7183      	strb	r3, [r0, #6]
   11454:	4602      	mov	r2, r0
   11456:	7144      	strb	r4, [r0, #5]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11458:	2100      	movs	r1, #0
   1145a:	f106 0010 	add.w	r0, r6, #16
   1145e:	f006 fc3d 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11462:	7eb3      	ldrb	r3, [r6, #26]
   11464:	b90b      	cbnz	r3, 1146a <HciWriteAuthPayloadTimeout+0x3e>
    hciCmdSend(pBuf);
  }
}
   11466:	b002      	add	sp, #8
   11468:	bd70      	pop	{r4, r5, r6, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1146a:	f10d 0107 	add.w	r1, sp, #7
   1146e:	f106 0010 	add.w	r0, r6, #16
   11472:	f006 fc39 	bl	17ce8 <WsfMsgDeq>
   11476:	4604      	mov	r4, r0
   11478:	2800      	cmp	r0, #0
   1147a:	d0f4      	beq.n	11466 <HciWriteAuthPayloadTimeout+0x3a>
      hciCmdCb.numCmdPkts--;
   1147c:	7eb3      	ldrb	r3, [r6, #26]
   1147e:	3b01      	subs	r3, #1
   11480:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11482:	7842      	ldrb	r2, [r0, #1]
   11484:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11486:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11488:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1148c:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1148e:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11490:	f006 fe60 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11494:	4620      	mov	r0, r4
   11496:	f001 fe5d 	bl	13154 <hciTrSendCmd>
}
   1149a:	e7e4      	b.n	11466 <HciWriteAuthPayloadTimeout+0x3a>
   1149c:	100058c4 	.word	0x100058c4

000114a0 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   114a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114a4:	4680      	mov	r8, r0
   114a6:	b082      	sub	sp, #8
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   114a8:	202a      	movs	r0, #42	; 0x2a
{
   114aa:	460f      	mov	r7, r1
   114ac:	4616      	mov	r6, r2
   114ae:	461d      	mov	r5, r3
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   114b0:	f006 fbf6 	bl	17ca0 <WsfMsgAlloc>
   114b4:	b360      	cbz	r0, 11510 <HciLeAddDeviceToResolvingListCmd+0x70>
    UINT16_TO_BSTREAM(p, opcode);
   114b6:	4604      	mov	r4, r0
   114b8:	2327      	movs	r3, #39	; 0x27
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, peerAddrType);
   114ba:	f880 8003 	strb.w	r8, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   114be:	7023      	strb	r3, [r4, #0]
    UINT8_TO_BSTREAM(p, len);
   114c0:	70a3      	strb	r3, [r4, #2]
    UINT16_TO_BSTREAM(p, opcode);
   114c2:	2320      	movs	r3, #32
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   114c4:	4639      	mov	r1, r7
   114c6:	3004      	adds	r0, #4
    UINT16_TO_BSTREAM(p, opcode);
   114c8:	7063      	strb	r3, [r4, #1]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   114ca:	f001 ff29 	bl	13320 <BdaCpy>
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   114ce:	6831      	ldr	r1, [r6, #0]
   114d0:	6872      	ldr	r2, [r6, #4]
   114d2:	68b3      	ldr	r3, [r6, #8]
   114d4:	68f0      	ldr	r0, [r6, #12]
   114d6:	f8c4 0016 	str.w	r0, [r4, #22]
   114da:	f8c4 100a 	str.w	r1, [r4, #10]
   114de:	f8c4 200e 	str.w	r2, [r4, #14]
   114e2:	f8c4 3012 	str.w	r3, [r4, #18]
    p += HCI_KEY_LEN;
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   114e6:	6829      	ldr	r1, [r5, #0]
   114e8:	686a      	ldr	r2, [r5, #4]
   114ea:	68ab      	ldr	r3, [r5, #8]
   114ec:	68e8      	ldr	r0, [r5, #12]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   114ee:	4d16      	ldr	r5, [pc, #88]	; (11548 <HciLeAddDeviceToResolvingListCmd+0xa8>)
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   114f0:	f8c4 0026 	str.w	r0, [r4, #38]	; 0x26
   114f4:	f8c4 101a 	str.w	r1, [r4, #26]
   114f8:	f8c4 201e 	str.w	r2, [r4, #30]
   114fc:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11500:	4622      	mov	r2, r4
   11502:	2100      	movs	r1, #0
   11504:	f105 0010 	add.w	r0, r5, #16
   11508:	f006 fbe8 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   1150c:	7eab      	ldrb	r3, [r5, #26]
   1150e:	b913      	cbnz	r3, 11516 <HciLeAddDeviceToResolvingListCmd+0x76>
    hciCmdSend(pBuf);
  }
}
   11510:	b002      	add	sp, #8
   11512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   11516:	f10d 0107 	add.w	r1, sp, #7
   1151a:	f105 0010 	add.w	r0, r5, #16
   1151e:	f006 fbe3 	bl	17ce8 <WsfMsgDeq>
   11522:	4604      	mov	r4, r0
   11524:	2800      	cmp	r0, #0
   11526:	d0f3      	beq.n	11510 <HciLeAddDeviceToResolvingListCmd+0x70>
      hciCmdCb.numCmdPkts--;
   11528:	7eab      	ldrb	r3, [r5, #26]
   1152a:	3b01      	subs	r3, #1
   1152c:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1152e:	7842      	ldrb	r2, [r0, #1]
   11530:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11532:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11534:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11538:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1153a:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1153c:	f006 fe0a 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11540:	4620      	mov	r0, r4
   11542:	f001 fe07 	bl	13154 <hciTrSendCmd>
}
   11546:	e7e3      	b.n	11510 <HciLeAddDeviceToResolvingListCmd+0x70>
   11548:	100058c4 	.word	0x100058c4

0001154c <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   1154c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1154e:	4607      	mov	r7, r0
   11550:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11552:	200a      	movs	r0, #10
{
   11554:	460d      	mov	r5, r1
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11556:	f006 fba3 	bl	17ca0 <WsfMsgAlloc>
   1155a:	b1a0      	cbz	r0, 11586 <HciLeRemoveDeviceFromResolvingList+0x3a>
    UINT16_TO_BSTREAM(p, opcode);
   1155c:	2328      	movs	r3, #40	; 0x28
   1155e:	7003      	strb	r3, [r0, #0]
   11560:	4604      	mov	r4, r0
   11562:	2320      	movs	r3, #32
   11564:	7043      	strb	r3, [r0, #1]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11566:	4e15      	ldr	r6, [pc, #84]	; (115bc <HciLeRemoveDeviceFromResolvingList+0x70>)
    UINT8_TO_BSTREAM(p, len);
   11568:	2307      	movs	r3, #7
   1156a:	7083      	strb	r3, [r0, #2]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, peerAddrType);
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   1156c:	4629      	mov	r1, r5
   1156e:	3004      	adds	r0, #4
    UINT8_TO_BSTREAM(p, peerAddrType);
   11570:	70e7      	strb	r7, [r4, #3]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   11572:	f001 fed5 	bl	13320 <BdaCpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11576:	4622      	mov	r2, r4
   11578:	2100      	movs	r1, #0
   1157a:	f106 0010 	add.w	r0, r6, #16
   1157e:	f006 fbad 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11582:	7eb3      	ldrb	r3, [r6, #26]
   11584:	b90b      	cbnz	r3, 1158a <HciLeRemoveDeviceFromResolvingList+0x3e>
    hciCmdSend(pBuf);
  }
}
   11586:	b003      	add	sp, #12
   11588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1158a:	f10d 0107 	add.w	r1, sp, #7
   1158e:	f106 0010 	add.w	r0, r6, #16
   11592:	f006 fba9 	bl	17ce8 <WsfMsgDeq>
   11596:	4604      	mov	r4, r0
   11598:	2800      	cmp	r0, #0
   1159a:	d0f4      	beq.n	11586 <HciLeRemoveDeviceFromResolvingList+0x3a>
      hciCmdCb.numCmdPkts--;
   1159c:	7eb3      	ldrb	r3, [r6, #26]
   1159e:	3b01      	subs	r3, #1
   115a0:	76b3      	strb	r3, [r6, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   115a2:	7842      	ldrb	r2, [r0, #1]
   115a4:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   115a6:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   115a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   115ac:	4630      	mov	r0, r6
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   115ae:	8333      	strh	r3, [r6, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   115b0:	f006 fdd0 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   115b4:	4620      	mov	r0, r4
   115b6:	f001 fdcd 	bl	13154 <hciTrSendCmd>
}
   115ba:	e7e4      	b.n	11586 <HciLeRemoveDeviceFromResolvingList+0x3a>
   115bc:	100058c4 	.word	0x100058c4

000115c0 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   115c0:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   115c2:	2003      	movs	r0, #3
{
   115c4:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   115c6:	f006 fb6b 	bl	17ca0 <WsfMsgAlloc>
   115ca:	b160      	cbz	r0, 115e6 <HciLeClearResolvingList+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   115cc:	4c13      	ldr	r4, [pc, #76]	; (1161c <HciLeClearResolvingList+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   115ce:	f242 0329 	movw	r3, #8233	; 0x2029
    UINT8_TO_BSTREAM(p, len);
   115d2:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   115d4:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   115d6:	4602      	mov	r2, r0
   115d8:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   115da:	f104 0010 	add.w	r0, r4, #16
   115de:	f006 fb7d 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   115e2:	7ea3      	ldrb	r3, [r4, #26]
   115e4:	b90b      	cbnz	r3, 115ea <HciLeClearResolvingList+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   115e6:	b003      	add	sp, #12
   115e8:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   115ea:	f10d 0107 	add.w	r1, sp, #7
   115ee:	f104 0010 	add.w	r0, r4, #16
   115f2:	f006 fb79 	bl	17ce8 <WsfMsgDeq>
   115f6:	4605      	mov	r5, r0
   115f8:	2800      	cmp	r0, #0
   115fa:	d0f4      	beq.n	115e6 <HciLeClearResolvingList+0x26>
      hciCmdCb.numCmdPkts--;
   115fc:	7ea3      	ldrb	r3, [r4, #26]
   115fe:	3b01      	subs	r3, #1
   11600:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11602:	7842      	ldrb	r2, [r0, #1]
   11604:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11606:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11608:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1160c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1160e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11610:	f006 fda0 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11614:	4628      	mov	r0, r5
   11616:	f001 fd9d 	bl	13154 <hciTrSendCmd>
}
   1161a:	e7e4      	b.n	115e6 <HciLeClearResolvingList+0x26>
   1161c:	100058c4 	.word	0x100058c4

00011620 <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   11620:	b530      	push	{r4, r5, lr}
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11622:	2003      	movs	r0, #3
{
   11624:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11626:	f006 fb3b 	bl	17ca0 <WsfMsgAlloc>
   1162a:	b160      	cbz	r0, 11646 <HciLeReadResolvingListSize+0x26>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1162c:	4c13      	ldr	r4, [pc, #76]	; (1167c <HciLeReadResolvingListSize+0x5c>)
    UINT16_TO_BSTREAM(p, opcode);
   1162e:	f242 032a 	movw	r3, #8234	; 0x202a
    UINT8_TO_BSTREAM(p, len);
   11632:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, opcode);
   11634:	8003      	strh	r3, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   11636:	4602      	mov	r2, r0
   11638:	7081      	strb	r1, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1163a:	f104 0010 	add.w	r0, r4, #16
   1163e:	f006 fb4d 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11642:	7ea3      	ldrb	r3, [r4, #26]
   11644:	b90b      	cbnz	r3, 1164a <HciLeReadResolvingListSize+0x2a>

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
  {
    hciCmdSend(pBuf);
  }
}
   11646:	b003      	add	sp, #12
   11648:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1164a:	f10d 0107 	add.w	r1, sp, #7
   1164e:	f104 0010 	add.w	r0, r4, #16
   11652:	f006 fb49 	bl	17ce8 <WsfMsgDeq>
   11656:	4605      	mov	r5, r0
   11658:	2800      	cmp	r0, #0
   1165a:	d0f4      	beq.n	11646 <HciLeReadResolvingListSize+0x26>
      hciCmdCb.numCmdPkts--;
   1165c:	7ea3      	ldrb	r3, [r4, #26]
   1165e:	3b01      	subs	r3, #1
   11660:	76a3      	strb	r3, [r4, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11662:	7842      	ldrb	r2, [r0, #1]
   11664:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11666:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11668:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1166c:	4620      	mov	r0, r4
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1166e:	8323      	strh	r3, [r4, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11670:	f006 fd70 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11674:	4628      	mov	r0, r5
   11676:	f001 fd6d 	bl	13154 <hciTrSendCmd>
}
   1167a:	e7e4      	b.n	11646 <HciLeReadResolvingListSize+0x26>
   1167c:	100058c4 	.word	0x100058c4

00011680 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   11680:	b530      	push	{r4, r5, lr}
   11682:	4604      	mov	r4, r0
   11684:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11686:	2004      	movs	r0, #4
   11688:	f006 fb0a 	bl	17ca0 <WsfMsgAlloc>
   1168c:	b178      	cbz	r0, 116ae <HciLeSetAddrResolutionEnable+0x2e>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1168e:	4d15      	ldr	r5, [pc, #84]	; (116e4 <HciLeSetAddrResolutionEnable+0x64>)
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
   11690:	70c4      	strb	r4, [r0, #3]
    UINT16_TO_BSTREAM(p, opcode);
   11692:	2320      	movs	r3, #32
   11694:	7043      	strb	r3, [r0, #1]
   11696:	212d      	movs	r1, #45	; 0x2d
    UINT8_TO_BSTREAM(p, len);
   11698:	2301      	movs	r3, #1
    UINT16_TO_BSTREAM(p, opcode);
   1169a:	7001      	strb	r1, [r0, #0]
    UINT8_TO_BSTREAM(p, len);
   1169c:	7083      	strb	r3, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   1169e:	4602      	mov	r2, r0
   116a0:	2100      	movs	r1, #0
   116a2:	f105 0010 	add.w	r0, r5, #16
   116a6:	f006 fb19 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   116aa:	7eab      	ldrb	r3, [r5, #26]
   116ac:	b90b      	cbnz	r3, 116b2 <HciLeSetAddrResolutionEnable+0x32>
    hciCmdSend(pBuf);
  }
}
   116ae:	b003      	add	sp, #12
   116b0:	bd30      	pop	{r4, r5, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   116b2:	f10d 0107 	add.w	r1, sp, #7
   116b6:	f105 0010 	add.w	r0, r5, #16
   116ba:	f006 fb15 	bl	17ce8 <WsfMsgDeq>
   116be:	4604      	mov	r4, r0
   116c0:	2800      	cmp	r0, #0
   116c2:	d0f4      	beq.n	116ae <HciLeSetAddrResolutionEnable+0x2e>
      hciCmdCb.numCmdPkts--;
   116c4:	7eab      	ldrb	r3, [r5, #26]
   116c6:	3b01      	subs	r3, #1
   116c8:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   116ca:	7842      	ldrb	r2, [r0, #1]
   116cc:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   116ce:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   116d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   116d4:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   116d6:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   116d8:	f006 fd3c 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   116dc:	4620      	mov	r0, r4
   116de:	f001 fd39 	bl	13154 <hciTrSendCmd>
}
   116e2:	e7e4      	b.n	116ae <HciLeSetAddrResolutionEnable+0x2e>
   116e4:	100058c4 	.word	0x100058c4

000116e8 <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   116e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   116ea:	4607      	mov	r7, r0
   116ec:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   116ee:	200b      	movs	r0, #11
{
   116f0:	460d      	mov	r5, r1
   116f2:	4616      	mov	r6, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   116f4:	f006 fad4 	bl	17ca0 <WsfMsgAlloc>
   116f8:	b1a8      	cbz	r0, 11726 <HciLeSetPrivacyModeCmd+0x3e>
    UINT16_TO_BSTREAM(p, opcode);
   116fa:	234e      	movs	r3, #78	; 0x4e
   116fc:	7003      	strb	r3, [r0, #0]
   116fe:	4604      	mov	r4, r0
   11700:	2320      	movs	r3, #32
   11702:	7043      	strb	r3, [r0, #1]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, addrType);
    BDA_TO_BSTREAM(p, pAddr);
   11704:	4629      	mov	r1, r5
    UINT8_TO_BSTREAM(p, len);
   11706:	2308      	movs	r3, #8
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11708:	4d14      	ldr	r5, [pc, #80]	; (1175c <HciLeSetPrivacyModeCmd+0x74>)
    UINT8_TO_BSTREAM(p, len);
   1170a:	7083      	strb	r3, [r0, #2]
    BDA_TO_BSTREAM(p, pAddr);
   1170c:	3004      	adds	r0, #4
    UINT8_TO_BSTREAM(p, addrType);
   1170e:	70e7      	strb	r7, [r4, #3]
    BDA_TO_BSTREAM(p, pAddr);
   11710:	f001 fe06 	bl	13320 <BdaCpy>
    UINT8_TO_BSTREAM(p, mode);
   11714:	72a6      	strb	r6, [r4, #10]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11716:	4622      	mov	r2, r4
   11718:	2100      	movs	r1, #0
   1171a:	f105 0010 	add.w	r0, r5, #16
   1171e:	f006 fadd 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11722:	7eab      	ldrb	r3, [r5, #26]
   11724:	b90b      	cbnz	r3, 1172a <HciLeSetPrivacyModeCmd+0x42>
    hciCmdSend(pBuf);
  }
}
   11726:	b003      	add	sp, #12
   11728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1172a:	f10d 0107 	add.w	r1, sp, #7
   1172e:	f105 0010 	add.w	r0, r5, #16
   11732:	f006 fad9 	bl	17ce8 <WsfMsgDeq>
   11736:	4604      	mov	r4, r0
   11738:	2800      	cmp	r0, #0
   1173a:	d0f4      	beq.n	11726 <HciLeSetPrivacyModeCmd+0x3e>
      hciCmdCb.numCmdPkts--;
   1173c:	7eab      	ldrb	r3, [r5, #26]
   1173e:	3b01      	subs	r3, #1
   11740:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11742:	7842      	ldrb	r2, [r0, #1]
   11744:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11746:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   11748:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   1174c:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   1174e:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   11750:	f006 fd00 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   11754:	4620      	mov	r0, r4
   11756:	f001 fcfd 	bl	13154 <hciTrSendCmd>
}
   1175a:	e7e4      	b.n	11726 <HciLeSetPrivacyModeCmd+0x3e>
   1175c:	100058c4 	.word	0x100058c4

00011760 <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   11760:	b5f0      	push	{r4, r5, r6, r7, lr}
   11762:	4606      	mov	r6, r0
   11764:	b083      	sub	sp, #12
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   11766:	1cc8      	adds	r0, r1, #3
{
   11768:	460d      	mov	r5, r1
   1176a:	4617      	mov	r7, r2
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1176c:	f006 fa98 	bl	17ca0 <WsfMsgAlloc>
   11770:	b190      	cbz	r0, 11798 <HciVendorSpecificCmd+0x38>
    UINT16_TO_BSTREAM(p, opcode);
   11772:	0a33      	lsrs	r3, r6, #8
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    memcpy(p, pData, len);
   11774:	462a      	mov	r2, r5
    UINT8_TO_BSTREAM(p, len);
   11776:	7085      	strb	r5, [r0, #2]
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11778:	4d15      	ldr	r5, [pc, #84]	; (117d0 <HciVendorSpecificCmd+0x70>)
    UINT16_TO_BSTREAM(p, opcode);
   1177a:	7043      	strb	r3, [r0, #1]
   1177c:	4604      	mov	r4, r0
    memcpy(p, pData, len);
   1177e:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, opcode);
   11780:	7006      	strb	r6, [r0, #0]
    memcpy(p, pData, len);
   11782:	3003      	adds	r0, #3
   11784:	f7fa fcbc 	bl	c100 <memcpy>
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   11788:	4622      	mov	r2, r4
   1178a:	2100      	movs	r1, #0
   1178c:	f105 0010 	add.w	r0, r5, #16
   11790:	f006 faa4 	bl	17cdc <WsfMsgEnq>
  if (hciCmdCb.numCmdPkts > 0)
   11794:	7eab      	ldrb	r3, [r5, #26]
   11796:	b90b      	cbnz	r3, 1179c <HciVendorSpecificCmd+0x3c>
    hciCmdSend(pBuf);
  }
}
   11798:	b003      	add	sp, #12
   1179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   1179c:	f10d 0107 	add.w	r1, sp, #7
   117a0:	f105 0010 	add.w	r0, r5, #16
   117a4:	f006 faa0 	bl	17ce8 <WsfMsgDeq>
   117a8:	4604      	mov	r4, r0
   117aa:	2800      	cmp	r0, #0
   117ac:	d0f4      	beq.n	11798 <HciVendorSpecificCmd+0x38>
      hciCmdCb.numCmdPkts--;
   117ae:	7eab      	ldrb	r3, [r5, #26]
   117b0:	3b01      	subs	r3, #1
   117b2:	76ab      	strb	r3, [r5, #26]
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   117b4:	7842      	ldrb	r2, [r0, #1]
   117b6:	7803      	ldrb	r3, [r0, #0]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   117b8:	210a      	movs	r1, #10
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   117ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   117be:	4628      	mov	r0, r5
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   117c0:	832b      	strh	r3, [r5, #24]
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   117c2:	f006 fcc7 	bl	18154 <WsfTimerStartSec>
      hciTrSendCmd(p);
   117c6:	4620      	mov	r0, r4
   117c8:	f001 fcc4 	bl	13154 <hciTrSendCmd>
}
   117cc:	e7e4      	b.n	11798 <HciVendorSpecificCmd+0x38>
   117ce:	bf00      	nop
   117d0:	100058c4 	.word	0x100058c4

000117d4 <HciLeSetExtScanParamCmd>:
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetExtScanParamCmd(uint8_t ownAddrType, uint8_t scanFiltPolicy, uint8_t scanPhys,
                             hciExtScanParam_t *pScanParam)
{
   117d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t numPhys;

  /* find out number of scanning PHYs */
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
  {
    if (scanPhys & (1 << i))
   117d8:	f012 0401 	ands.w	r4, r2, #1
{
   117dc:	4616      	mov	r6, r2
    {
      numPhys++;
   117de:	bf18      	it	ne
   117e0:	2401      	movne	r4, #1
    if (scanPhys & (1 << i))
   117e2:	07b2      	lsls	r2, r6, #30
      numPhys++;
   117e4:	bf44      	itt	mi
   117e6:	3401      	addmi	r4, #1
   117e8:	b2e4      	uxtbmi	r4, r4
{
   117ea:	461d      	mov	r5, r3
    if (scanPhys & (1 << i))
   117ec:	0773      	lsls	r3, r6, #29
      numPhys++;
   117ee:	bf48      	it	mi
   117f0:	3401      	addmi	r4, #1
{
   117f2:	4680      	mov	r8, r0
      numPhys++;
   117f4:	bf48      	it	mi
   117f6:	b2e4      	uxtbmi	r4, r4
    if (scanPhys & (1 << i))
   117f8:	0730      	lsls	r0, r6, #28
{
   117fa:	460f      	mov	r7, r1
    if (scanPhys & (1 << i))
   117fc:	d503      	bpl.n	11806 <HciLeSetExtScanParamCmd+0x32>
      numPhys++;
   117fe:	3401      	adds	r4, #1
   11800:	b2e4      	uxtb	r4, r4
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
   11802:	2c04      	cmp	r4, #4
   11804:	d064      	beq.n	118d0 <HciLeSetExtScanParamCmd+0xfc>
    if (scanPhys & (1 << i))
   11806:	06f1      	lsls	r1, r6, #27
   11808:	d503      	bpl.n	11812 <HciLeSetExtScanParamCmd+0x3e>
      numPhys++;
   1180a:	3401      	adds	r4, #1
   1180c:	b2e4      	uxtb	r4, r4
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
   1180e:	2c04      	cmp	r4, #4
   11810:	d05e      	beq.n	118d0 <HciLeSetExtScanParamCmd+0xfc>
    if (scanPhys & (1 << i))
   11812:	06b2      	lsls	r2, r6, #26
   11814:	d503      	bpl.n	1181e <HciLeSetExtScanParamCmd+0x4a>
      numPhys++;
   11816:	3401      	adds	r4, #1
   11818:	b2e4      	uxtb	r4, r4
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
   1181a:	2c04      	cmp	r4, #4
   1181c:	d058      	beq.n	118d0 <HciLeSetExtScanParamCmd+0xfc>
    if (scanPhys & (1 << i))
   1181e:	0673      	lsls	r3, r6, #25
   11820:	d503      	bpl.n	1182a <HciLeSetExtScanParamCmd+0x56>
      numPhys++;
   11822:	3401      	adds	r4, #1
   11824:	b2e4      	uxtb	r4, r4
  for (i = 0, numPhys = 0; (i < 8) && (numPhys <= HCI_MAX_NUM_PHYS); i++)
   11826:	2c04      	cmp	r4, #4
   11828:	d052      	beq.n	118d0 <HciLeSetExtScanParamCmd+0xfc>
    if (scanPhys & (1 << i))
   1182a:	09f3      	lsrs	r3, r6, #7
      numPhys++;
   1182c:	bf1c      	itt	ne
   1182e:	3401      	addne	r4, #1
   11830:	b2e4      	uxtbne	r4, r4
    }
  }

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EXT_SCAN_PARAM, HCI_LEN_LE_SET_EXT_SCAN_PARAM(numPhys))) != NULL)
   11832:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   11836:	3103      	adds	r1, #3
   11838:	f242 0041 	movw	r0, #8257	; 0x2041
   1183c:	f7fe fdcc 	bl	103d8 <hciCmdAlloc>
   11840:	2800      	cmp	r0, #0
   11842:	d043      	beq.n	118cc <HciLeSetExtScanParamCmd+0xf8>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, ownAddrType);
   11844:	f880 8003 	strb.w	r8, [r0, #3]
    UINT8_TO_BSTREAM(p, scanFiltPolicy);
   11848:	7107      	strb	r7, [r0, #4]
    UINT8_TO_BSTREAM(p, scanPhys);
   1184a:	1d82      	adds	r2, r0, #6
   1184c:	7146      	strb	r6, [r0, #5]

    for (i = 0; i < numPhys; i++)
   1184e:	2c00      	cmp	r4, #0
   11850:	d038      	beq.n	118c4 <HciLeSetExtScanParamCmd+0xf0>
    {
      UINT8_TO_BSTREAM(p, pScanParam[i].scanType);
   11852:	792b      	ldrb	r3, [r5, #4]
   11854:	7013      	strb	r3, [r2, #0]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanInterval);
   11856:	882b      	ldrh	r3, [r5, #0]
   11858:	7053      	strb	r3, [r2, #1]
   1185a:	882b      	ldrh	r3, [r5, #0]
   1185c:	0a1b      	lsrs	r3, r3, #8
   1185e:	7093      	strb	r3, [r2, #2]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   11860:	886b      	ldrh	r3, [r5, #2]
   11862:	70d3      	strb	r3, [r2, #3]
   11864:	886b      	ldrh	r3, [r5, #2]
    for (i = 0; i < numPhys; i++)
   11866:	2c01      	cmp	r4, #1
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   11868:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1186c:	7113      	strb	r3, [r2, #4]
    for (i = 0; i < numPhys; i++)
   1186e:	d029      	beq.n	118c4 <HciLeSetExtScanParamCmd+0xf0>
      UINT8_TO_BSTREAM(p, pScanParam[i].scanType);
   11870:	7aab      	ldrb	r3, [r5, #10]
   11872:	7153      	strb	r3, [r2, #5]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanInterval);
   11874:	88eb      	ldrh	r3, [r5, #6]
   11876:	7193      	strb	r3, [r2, #6]
   11878:	88eb      	ldrh	r3, [r5, #6]
   1187a:	0a1b      	lsrs	r3, r3, #8
   1187c:	71d3      	strb	r3, [r2, #7]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   1187e:	892b      	ldrh	r3, [r5, #8]
   11880:	7213      	strb	r3, [r2, #8]
   11882:	892b      	ldrh	r3, [r5, #8]
    for (i = 0; i < numPhys; i++)
   11884:	2c02      	cmp	r4, #2
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   11886:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1188a:	7253      	strb	r3, [r2, #9]
    for (i = 0; i < numPhys; i++)
   1188c:	d01a      	beq.n	118c4 <HciLeSetExtScanParamCmd+0xf0>
      UINT8_TO_BSTREAM(p, pScanParam[i].scanType);
   1188e:	7c2b      	ldrb	r3, [r5, #16]
   11890:	7293      	strb	r3, [r2, #10]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanInterval);
   11892:	89ab      	ldrh	r3, [r5, #12]
   11894:	72d3      	strb	r3, [r2, #11]
   11896:	89ab      	ldrh	r3, [r5, #12]
   11898:	0a1b      	lsrs	r3, r3, #8
   1189a:	7313      	strb	r3, [r2, #12]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   1189c:	89eb      	ldrh	r3, [r5, #14]
   1189e:	7353      	strb	r3, [r2, #13]
   118a0:	89eb      	ldrh	r3, [r5, #14]
    for (i = 0; i < numPhys; i++)
   118a2:	2c04      	cmp	r4, #4
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   118a4:	ea4f 2313 	mov.w	r3, r3, lsr #8
   118a8:	7393      	strb	r3, [r2, #14]
    for (i = 0; i < numPhys; i++)
   118aa:	d10b      	bne.n	118c4 <HciLeSetExtScanParamCmd+0xf0>
      UINT8_TO_BSTREAM(p, pScanParam[i].scanType);
   118ac:	7dab      	ldrb	r3, [r5, #22]
   118ae:	73d3      	strb	r3, [r2, #15]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanInterval);
   118b0:	8a6b      	ldrh	r3, [r5, #18]
   118b2:	7413      	strb	r3, [r2, #16]
   118b4:	8a6b      	ldrh	r3, [r5, #18]
   118b6:	0a1b      	lsrs	r3, r3, #8
   118b8:	7453      	strb	r3, [r2, #17]
      UINT16_TO_BSTREAM(p, pScanParam[i].scanWindow)
   118ba:	8aab      	ldrh	r3, [r5, #20]
   118bc:	7493      	strb	r3, [r2, #18]
   118be:	8aab      	ldrh	r3, [r5, #20]
   118c0:	0a1b      	lsrs	r3, r3, #8
   118c2:	74d3      	strb	r3, [r2, #19]
    }

    hciCmdSend(pBuf);
  }
}
   118c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hciCmdSend(pBuf);
   118c8:	f7fe bd94 	b.w	103f4 <hciCmdSend>
}
   118cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EXT_SCAN_PARAM, HCI_LEN_LE_SET_EXT_SCAN_PARAM(numPhys))) != NULL)
   118d0:	2117      	movs	r1, #23
   118d2:	f242 0041 	movw	r0, #8257	; 0x2041
   118d6:	f7fe fd7f 	bl	103d8 <hciCmdAlloc>
   118da:	2800      	cmp	r0, #0
   118dc:	d0f6      	beq.n	118cc <HciLeSetExtScanParamCmd+0xf8>
    UINT8_TO_BSTREAM(p, ownAddrType);
   118de:	f880 8003 	strb.w	r8, [r0, #3]
    UINT8_TO_BSTREAM(p, scanFiltPolicy);
   118e2:	7107      	strb	r7, [r0, #4]
    UINT8_TO_BSTREAM(p, scanPhys);
   118e4:	1d82      	adds	r2, r0, #6
   118e6:	7146      	strb	r6, [r0, #5]
   118e8:	2404      	movs	r4, #4
   118ea:	e7b2      	b.n	11852 <HciLeSetExtScanParamCmd+0x7e>

000118ec <HciLeExtScanEnableCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeExtScanEnableCmd(uint8_t enable, uint8_t filterDup, uint16_t duration, uint16_t period)
{
   118ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118ee:	460f      	mov	r7, r1
   118f0:	4606      	mov	r6, r0
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE, HCI_LEN_LE_SET_EXT_SCAN_ENABLE)) != NULL)
   118f2:	2106      	movs	r1, #6
   118f4:	f242 0042 	movw	r0, #8258	; 0x2042
{
   118f8:	4615      	mov	r5, r2
   118fa:	461c      	mov	r4, r3
  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE, HCI_LEN_LE_SET_EXT_SCAN_ENABLE)) != NULL)
   118fc:	f7fe fd6c 	bl	103d8 <hciCmdAlloc>
   11900:	b158      	cbz	r0, 1191a <HciLeExtScanEnableCmd+0x2e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
    UINT8_TO_BSTREAM(p, enable);
    UINT8_TO_BSTREAM(p, filterDup);
    UINT16_TO_BSTREAM(p, duration);
   11902:	0a2b      	lsrs	r3, r5, #8
   11904:	7183      	strb	r3, [r0, #6]
    UINT16_TO_BSTREAM(p, period);
   11906:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, enable);
   11908:	70c6      	strb	r6, [r0, #3]
    UINT8_TO_BSTREAM(p, filterDup);
   1190a:	7107      	strb	r7, [r0, #4]
    UINT16_TO_BSTREAM(p, duration);
   1190c:	7145      	strb	r5, [r0, #5]
    UINT16_TO_BSTREAM(p, period);
   1190e:	71c4      	strb	r4, [r0, #7]
   11910:	7203      	strb	r3, [r0, #8]
    hciCmdSend(pBuf);
  }
}
   11912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    hciCmdSend(pBuf);
   11916:	f7fe bd6d 	b.w	103f4 <hciCmdSend>
}
   1191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001191c <hciCoreConnByHandle>:
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
  {
    if (pConn->handle == handle)
   1191c:	4b09      	ldr	r3, [pc, #36]	; (11944 <hciCoreConnByHandle+0x28>)
   1191e:	8a19      	ldrh	r1, [r3, #16]
   11920:	4281      	cmp	r1, r0
   11922:	d00a      	beq.n	1193a <hciCoreConnByHandle+0x1e>
   11924:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
   11926:	4281      	cmp	r1, r0
   11928:	d009      	beq.n	1193e <hciCoreConnByHandle+0x22>
   1192a:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1192e:	3338      	adds	r3, #56	; 0x38
   11930:	4281      	cmp	r1, r0
   11932:	bf0c      	ite	eq
   11934:	4618      	moveq	r0, r3
   11936:	2000      	movne	r0, #0
   11938:	4770      	bx	lr
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1193a:	4618      	mov	r0, r3
   1193c:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1193e:	f103 001c 	add.w	r0, r3, #28
      return pConn;
    }
  }

  return NULL;
}
   11942:	4770      	bx	lr
   11944:	100058e0 	.word	0x100058e0

00011948 <hciCoreConnOpen>:
    if (pConn->handle == HCI_HANDLE_NONE)
   11948:	4b0b      	ldr	r3, [pc, #44]	; (11978 <hciCoreConnOpen+0x30>)
   1194a:	8a19      	ldrh	r1, [r3, #16]
   1194c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11950:	4291      	cmp	r1, r2
   11952:	d00a      	beq.n	1196a <hciCoreConnOpen+0x22>
   11954:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
   11956:	4291      	cmp	r1, r2
   11958:	d006      	beq.n	11968 <hciCoreConnOpen+0x20>
   1195a:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
   1195e:	4291      	cmp	r1, r2
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11960:	bf08      	it	eq
   11962:	3338      	addeq	r3, #56	; 0x38
    if (pConn->handle == HCI_HANDLE_NONE)
   11964:	d001      	beq.n	1196a <hciCoreConnOpen+0x22>
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
}
   11966:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11968:	331c      	adds	r3, #28
      pConn->outBufs = 0;
   1196a:	2200      	movs	r2, #0
      pConn->handle = handle;
   1196c:	8218      	strh	r0, [r3, #16]
      pConn->outBufs = 0;
   1196e:	765a      	strb	r2, [r3, #25]
      pConn->flowDisabled = FALSE;
   11970:	f8a3 2017 	strh.w	r2, [r3, #23]
}
   11974:	4770      	bx	lr
   11976:	bf00      	nop
   11978:	100058e0 	.word	0x100058e0

0001197c <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   1197c:	b570      	push	{r4, r5, r6, lr}
   1197e:	460e      	mov	r6, r1
   11980:	4604      	mov	r4, r0
   11982:	4615      	mov	r5, r2
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   11984:	f000 fb4e 	bl	12024 <HciGetBufSize>

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   11988:	42b0      	cmp	r0, r6
   1198a:	d24b      	bcs.n	11a24 <hciCoreTxAclStart+0xa8>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   1198c:	182b      	adds	r3, r5, r0
   1198e:	6063      	str	r3, [r4, #4]
    pConn->txAclRemLen = len - hciLen;
   11990:	1a36      	subs	r6, r6, r0
    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
    pConn->fragmenting = TRUE;

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   11992:	0a03      	lsrs	r3, r0, #8
    pConn->fragmenting = TRUE;
   11994:	2201      	movs	r2, #1
    pConn->txAclRemLen = len - hciLen;
   11996:	8266      	strh	r6, [r4, #18]
    pConn->pTxAclPkt = pData;
   11998:	6025      	str	r5, [r4, #0]
    pConn->fragmenting = TRUE;
   1199a:	75a2      	strb	r2, [r4, #22]
    UINT16_TO_BUF(&pData[2], hciLen);
   1199c:	70a8      	strb	r0, [r5, #2]
   1199e:	70eb      	strb	r3, [r5, #3]
  pConn->outBufs++;
   119a0:	7e63      	ldrb	r3, [r4, #25]
  if (hciCoreCb.availBufs > 0)
   119a2:	4e2f      	ldr	r6, [pc, #188]	; (11a60 <hciCoreTxAclStart+0xe4>)
  pConn->outBufs++;
   119a4:	4413      	add	r3, r2
   119a6:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   119a8:	4629      	mov	r1, r5
   119aa:	4620      	mov	r0, r4
   119ac:	f001 fbba 	bl	13124 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   119b0:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   119b4:	2b00      	cmp	r3, #0
   119b6:	d040      	beq.n	11a3a <hciCoreTxAclStart+0xbe>
    hciCoreCb.availBufs--;
   119b8:	3b01      	subs	r3, #1
   119ba:	b2db      	uxtb	r3, r3
   119bc:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76

    /* send the packet */
    hciCoreSendAclData(pConn, pData);

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   119c0:	2b00      	cmp	r3, #0
   119c2:	d03a      	beq.n	11a3a <hciCoreTxAclStart+0xbe>
  }

  if (pConn != NULL)
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   119c4:	8a65      	ldrh	r5, [r4, #18]
   119c6:	f000 fb2d 	bl	12024 <HciGetBufSize>
   119ca:	4285      	cmp	r5, r0
   119cc:	d23a      	bcs.n	11a44 <hciCoreTxAclStart+0xc8>
   119ce:	8a65      	ldrh	r5, [r4, #18]

    if (aclLen > 0)
   119d0:	2d00      	cmp	r5, #0
   119d2:	d032      	beq.n	11a3a <hciCoreTxAclStart+0xbe>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   119d4:	8a63      	ldrh	r3, [r4, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   119d6:	6862      	ldr	r2, [r4, #4]
      pConn->txAclRemLen -= aclLen;
   119d8:	1b5b      	subs	r3, r3, r5
   119da:	8263      	strh	r3, [r4, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   119dc:	8a23      	ldrh	r3, [r4, #16]
   119de:	7013      	strb	r3, [r2, #0]
   119e0:	8a23      	ldrh	r3, [r4, #16]
   119e2:	6862      	ldr	r2, [r4, #4]
   119e4:	0a1b      	lsrs	r3, r3, #8
   119e6:	f043 0310 	orr.w	r3, r3, #16
   119ea:	7053      	strb	r3, [r2, #1]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   119ec:	6862      	ldr	r2, [r4, #4]
   119ee:	7095      	strb	r5, [r2, #2]
   119f0:	6862      	ldr	r2, [r4, #4]
   119f2:	0a2b      	lsrs	r3, r5, #8
   119f4:	70d3      	strb	r3, [r2, #3]
  pConn->outBufs++;
   119f6:	7e63      	ldrb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   119f8:	6861      	ldr	r1, [r4, #4]
  pConn->outBufs++;
   119fa:	3301      	adds	r3, #1
   119fc:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   119fe:	4620      	mov	r0, r4
   11a00:	f001 fb90 	bl	13124 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   11a04:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   11a08:	b303      	cbz	r3, 11a4c <hciCoreTxAclStart+0xd0>
    hciCoreCb.availBufs--;
   11a0a:	3b01      	subs	r3, #1
   11a0c:	b2db      	uxtb	r3, r3
   11a0e:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   11a12:	8a62      	ldrh	r2, [r4, #18]
   11a14:	2a00      	cmp	r2, #0
   11a16:	d0d3      	beq.n	119c0 <hciCoreTxAclStart+0x44>
      {
        pConn->pNextTxFrag += aclLen;
   11a18:	6863      	ldr	r3, [r4, #4]
   11a1a:	442b      	add	r3, r5
   11a1c:	6063      	str	r3, [r4, #4]
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   11a1e:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   11a22:	e7cd      	b.n	119c0 <hciCoreTxAclStart+0x44>
  pConn->outBufs++;
   11a24:	7e63      	ldrb	r3, [r4, #25]
   11a26:	3301      	adds	r3, #1
   11a28:	7663      	strb	r3, [r4, #25]
  hciTrSendAclData(pConn, pData);
   11a2a:	4629      	mov	r1, r5
   11a2c:	4620      	mov	r0, r4
   11a2e:	f001 fb79 	bl	13124 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   11a32:	4a0b      	ldr	r2, [pc, #44]	; (11a60 <hciCoreTxAclStart+0xe4>)
   11a34:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   11a38:	b903      	cbnz	r3, 11a3c <hciCoreTxAclStart+0xc0>
}
   11a3a:	bd70      	pop	{r4, r5, r6, pc}
    hciCoreCb.availBufs--;
   11a3c:	3b01      	subs	r3, #1
   11a3e:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
}
   11a42:	bd70      	pop	{r4, r5, r6, pc}
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   11a44:	f000 faee 	bl	12024 <HciGetBufSize>
   11a48:	4605      	mov	r5, r0
   11a4a:	e7c1      	b.n	119d0 <hciCoreTxAclStart+0x54>
      if (pConn->txAclRemLen > 0)
   11a4c:	8a63      	ldrh	r3, [r4, #18]
   11a4e:	2b00      	cmp	r3, #0
   11a50:	d0f3      	beq.n	11a3a <hciCoreTxAclStart+0xbe>
        pConn->pNextTxFrag += aclLen;
   11a52:	6863      	ldr	r3, [r4, #4]
   11a54:	442b      	add	r3, r5
   11a56:	6063      	str	r3, [r4, #4]
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   11a58:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
   11a5c:	e7b0      	b.n	119c0 <hciCoreTxAclStart+0x44>
   11a5e:	bf00      	nop
   11a60:	100058e0 	.word	0x100058e0

00011a64 <hciCoreTxReady>:
{
   11a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hciCoreCb.availBufs += bufs;
   11a68:	4c50      	ldr	r4, [pc, #320]	; (11bac <hciCoreTxReady+0x148>)
{
   11a6a:	b082      	sub	sp, #8
    hciCoreCb.availBufs += bufs;
   11a6c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
  if (bufs > 0)
   11a70:	b150      	cbz	r0, 11a88 <hciCoreTxReady+0x24>
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   11a72:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
    hciCoreCb.availBufs += bufs;
   11a76:	4403      	add	r3, r0
   11a78:	b2db      	uxtb	r3, r3
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   11a7a:	4293      	cmp	r3, r2
    hciCoreCb.availBufs += bufs;
   11a7c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   11a80:	bf84      	itt	hi
   11a82:	f884 2076 	strbhi.w	r2, [r4, #118]	; 0x76
   11a86:	4613      	movhi	r3, r2
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11a88:	4e49      	ldr	r6, [pc, #292]	; (11bb0 <hciCoreTxReady+0x14c>)
   11a8a:	f1a6 081c 	sub.w	r8, r6, #28
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11a8e:	f1a6 0a38 	sub.w	sl, r6, #56	; 0x38
  while (hciCoreCb.availBufs > 0)
   11a92:	2b00      	cmp	r3, #0
   11a94:	d035      	beq.n	11b02 <hciCoreTxReady+0x9e>
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   11a96:	8a22      	ldrh	r2, [r4, #16]
   11a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11a9c:	429a      	cmp	r2, r3
   11a9e:	d001      	beq.n	11aa4 <hciCoreTxReady+0x40>
   11aa0:	7da3      	ldrb	r3, [r4, #22]
   11aa2:	bb8b      	cbnz	r3, 11b08 <hciCoreTxReady+0xa4>
   11aa4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   11aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11aaa:	429a      	cmp	r2, r3
   11aac:	d003      	beq.n	11ab6 <hciCoreTxReady+0x52>
   11aae:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   11ab2:	2b00      	cmp	r3, #0
   11ab4:	d169      	bne.n	11b8a <hciCoreTxReady+0x126>
   11ab6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   11aba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11abe:	429a      	cmp	r2, r3
   11ac0:	d003      	beq.n	11aca <hciCoreTxReady+0x66>
   11ac2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   11ac6:	2b00      	cmp	r3, #0
   11ac8:	d161      	bne.n	11b8e <hciCoreTxReady+0x12a>
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   11aca:	483a      	ldr	r0, [pc, #232]	; (11bb4 <hciCoreTxReady+0x150>)
   11acc:	f10d 0107 	add.w	r1, sp, #7
   11ad0:	f006 f90a 	bl	17ce8 <WsfMsgDeq>
   11ad4:	4602      	mov	r2, r0
   11ad6:	b1a0      	cbz	r0, 11b02 <hciCoreTxReady+0x9e>
        BYTES_TO_UINT16(handle, pData);
   11ad8:	7841      	ldrb	r1, [r0, #1]
   11ada:	7803      	ldrb	r3, [r0, #0]
   11adc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    if (pConn->handle == handle)
   11ae0:	8a21      	ldrh	r1, [r4, #16]
        BYTES_TO_UINT16(handle, pData);
   11ae2:	b29b      	uxth	r3, r3
    if (pConn->handle == handle)
   11ae4:	4299      	cmp	r1, r3
   11ae6:	d054      	beq.n	11b92 <hciCoreTxReady+0x12e>
   11ae8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   11aea:	4299      	cmp	r1, r3
   11aec:	d05a      	beq.n	11ba4 <hciCoreTxReady+0x140>
   11aee:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   11af2:	4299      	cmp	r1, r3
   11af4:	d058      	beq.n	11ba8 <hciCoreTxReady+0x144>
          WsfMsgFree(pData);
   11af6:	f006 f8db 	bl	17cb0 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   11afa:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11afe:	2b00      	cmp	r3, #0
   11b00:	d1c9      	bne.n	11a96 <hciCoreTxReady+0x32>
}
   11b02:	b002      	add	sp, #8
   11b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11b08:	4655      	mov	r5, sl
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   11b0a:	f8b5 9012 	ldrh.w	r9, [r5, #18]
   11b0e:	f000 fa89 	bl	12024 <HciGetBufSize>
   11b12:	4581      	cmp	r9, r0
   11b14:	d22a      	bcs.n	11b6c <hciCoreTxReady+0x108>
   11b16:	8a6f      	ldrh	r7, [r5, #18]
    if (aclLen > 0)
   11b18:	2f00      	cmp	r7, #0
   11b1a:	d0d6      	beq.n	11aca <hciCoreTxReady+0x66>
      pConn->txAclRemLen -= aclLen;
   11b1c:	8a6b      	ldrh	r3, [r5, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   11b1e:	686a      	ldr	r2, [r5, #4]
   11b20:	8a29      	ldrh	r1, [r5, #16]
      pConn->txAclRemLen -= aclLen;
   11b22:	1bdb      	subs	r3, r3, r7
   11b24:	826b      	strh	r3, [r5, #18]
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   11b26:	7011      	strb	r1, [r2, #0]
   11b28:	8a2b      	ldrh	r3, [r5, #16]
   11b2a:	686a      	ldr	r2, [r5, #4]
   11b2c:	0a1b      	lsrs	r3, r3, #8
   11b2e:	f043 0310 	orr.w	r3, r3, #16
   11b32:	7053      	strb	r3, [r2, #1]
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   11b34:	686b      	ldr	r3, [r5, #4]
   11b36:	709f      	strb	r7, [r3, #2]
   11b38:	686b      	ldr	r3, [r5, #4]
   11b3a:	0a3a      	lsrs	r2, r7, #8
   11b3c:	70da      	strb	r2, [r3, #3]
  pConn->outBufs++;
   11b3e:	7e6b      	ldrb	r3, [r5, #25]
  hciTrSendAclData(pConn, pData);
   11b40:	6869      	ldr	r1, [r5, #4]
  pConn->outBufs++;
   11b42:	3301      	adds	r3, #1
   11b44:	766b      	strb	r3, [r5, #25]
  hciTrSendAclData(pConn, pData);
   11b46:	4628      	mov	r0, r5
   11b48:	f001 faec 	bl	13124 <hciTrSendAclData>
  if (hciCoreCb.availBufs > 0)
   11b4c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11b50:	b193      	cbz	r3, 11b78 <hciCoreTxReady+0x114>
    hciCoreCb.availBufs--;
   11b52:	3b01      	subs	r3, #1
   11b54:	b2db      	uxtb	r3, r3
   11b56:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
      if (pConn->txAclRemLen > 0)
   11b5a:	8a6a      	ldrh	r2, [r5, #18]
   11b5c:	2a00      	cmp	r2, #0
   11b5e:	d098      	beq.n	11a92 <hciCoreTxReady+0x2e>
        pConn->pNextTxFrag += aclLen;
   11b60:	686b      	ldr	r3, [r5, #4]
   11b62:	443b      	add	r3, r7
   11b64:	606b      	str	r3, [r5, #4]
  while (hciCoreCb.availBufs > 0)
   11b66:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11b6a:	e792      	b.n	11a92 <hciCoreTxReady+0x2e>
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   11b6c:	f000 fa5a 	bl	12024 <HciGetBufSize>
   11b70:	4607      	mov	r7, r0
    if (aclLen > 0)
   11b72:	2f00      	cmp	r7, #0
   11b74:	d0a9      	beq.n	11aca <hciCoreTxReady+0x66>
   11b76:	e7d1      	b.n	11b1c <hciCoreTxReady+0xb8>
      if (pConn->txAclRemLen > 0)
   11b78:	8a6b      	ldrh	r3, [r5, #18]
   11b7a:	2b00      	cmp	r3, #0
   11b7c:	d0c1      	beq.n	11b02 <hciCoreTxReady+0x9e>
        pConn->pNextTxFrag += aclLen;
   11b7e:	686b      	ldr	r3, [r5, #4]
   11b80:	443b      	add	r3, r7
   11b82:	606b      	str	r3, [r5, #4]
  while (hciCoreCb.availBufs > 0)
   11b84:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11b88:	e783      	b.n	11a92 <hciCoreTxReady+0x2e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11b8a:	4645      	mov	r5, r8
   11b8c:	e7bd      	b.n	11b0a <hciCoreTxReady+0xa6>
   11b8e:	4635      	mov	r5, r6
   11b90:	e7bb      	b.n	11b0a <hciCoreTxReady+0xa6>
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11b92:	4650      	mov	r0, sl
        BYTES_TO_UINT16(len, &pData[2]);
   11b94:	78d3      	ldrb	r3, [r2, #3]
   11b96:	7891      	ldrb	r1, [r2, #2]
   11b98:	eb01 2103 	add.w	r1, r1, r3, lsl #8
          hciCoreTxAclStart(pConn, len, pData);
   11b9c:	b289      	uxth	r1, r1
   11b9e:	f7ff feed 	bl	1197c <hciCoreTxAclStart>
   11ba2:	e7aa      	b.n	11afa <hciCoreTxReady+0x96>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11ba4:	4640      	mov	r0, r8
   11ba6:	e7f5      	b.n	11b94 <hciCoreTxReady+0x130>
   11ba8:	4630      	mov	r0, r6
   11baa:	e7f3      	b.n	11b94 <hciCoreTxReady+0x130>
   11bac:	100058e0 	.word	0x100058e0
   11bb0:	10005918 	.word	0x10005918
   11bb4:	10005944 	.word	0x10005944

00011bb8 <hciCoreConnClose>:
{
   11bb8:	b538      	push	{r3, r4, r5, lr}
    if (pConn->handle == handle)
   11bba:	4c12      	ldr	r4, [pc, #72]	; (11c04 <hciCoreConnClose+0x4c>)
   11bbc:	8a22      	ldrh	r2, [r4, #16]
   11bbe:	4282      	cmp	r2, r0
   11bc0:	d00a      	beq.n	11bd8 <hciCoreConnClose+0x20>
   11bc2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   11bc4:	4282      	cmp	r2, r0
   11bc6:	d006      	beq.n	11bd6 <hciCoreConnClose+0x1e>
   11bc8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   11bcc:	4282      	cmp	r2, r0
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11bce:	bf08      	it	eq
   11bd0:	3438      	addeq	r4, #56	; 0x38
    if (pConn->handle == handle)
   11bd2:	d001      	beq.n	11bd8 <hciCoreConnClose+0x20>
}
   11bd4:	bd38      	pop	{r3, r4, r5, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11bd6:	341c      	adds	r4, #28
      if (pConn->pTxAclPkt != NULL)
   11bd8:	6820      	ldr	r0, [r4, #0]
   11bda:	b118      	cbz	r0, 11be4 <hciCoreConnClose+0x2c>
        WsfMsgFree(pConn->pTxAclPkt);
   11bdc:	f006 f868 	bl	17cb0 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   11be0:	2300      	movs	r3, #0
   11be2:	6023      	str	r3, [r4, #0]
      if (pConn->pRxAclPkt != NULL)
   11be4:	68a0      	ldr	r0, [r4, #8]
      pConn->fragmenting = FALSE;
   11be6:	2500      	movs	r5, #0
   11be8:	75a5      	strb	r5, [r4, #22]
      if (pConn->pRxAclPkt != NULL)
   11bea:	b110      	cbz	r0, 11bf2 <hciCoreConnClose+0x3a>
        WsfMsgFree(pConn->pRxAclPkt);
   11bec:	f006 f860 	bl	17cb0 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   11bf0:	60a5      	str	r5, [r4, #8]
      pConn->handle = HCI_HANDLE_NONE;
   11bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
      hciCoreTxReady(pConn->outBufs);
   11bf6:	7e60      	ldrb	r0, [r4, #25]
      pConn->handle = HCI_HANDLE_NONE;
   11bf8:	8223      	strh	r3, [r4, #16]
}
   11bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      hciCoreTxReady(pConn->outBufs);
   11bfe:	f7ff bf31 	b.w	11a64 <hciCoreTxReady>
   11c02:	bf00      	nop
   11c04:	100058e0 	.word	0x100058e0

00011c08 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   11c08:	b538      	push	{r3, r4, r5, lr}
  /* if fragmenting */
  if (pConn->fragmenting)
   11c0a:	7d83      	ldrb	r3, [r0, #22]
   11c0c:	b11b      	cbz	r3, 11c16 <hciCoreTxAclComplete+0xe>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   11c0e:	8a45      	ldrh	r5, [r0, #18]
   11c10:	4604      	mov	r4, r0
   11c12:	b13d      	cbz	r5, 11c24 <hciCoreTxAclComplete+0x1c>
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   11c14:	bd38      	pop	{r3, r4, r5, pc}
  else if (pData != NULL)
   11c16:	2900      	cmp	r1, #0
   11c18:	d0fc      	beq.n	11c14 <hciCoreTxAclComplete+0xc>
}
   11c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgFree(pData);
   11c1e:	4608      	mov	r0, r1
   11c20:	f006 b846 	b.w	17cb0 <WsfMsgFree>
      WsfMsgFree(pConn->pTxAclPkt);
   11c24:	6800      	ldr	r0, [r0, #0]
   11c26:	f006 f843 	bl	17cb0 <WsfMsgFree>
      pConn->fragmenting = FALSE;
   11c2a:	75a5      	strb	r5, [r4, #22]
      pConn->pTxAclPkt = NULL;
   11c2c:	6025      	str	r5, [r4, #0]
}
   11c2e:	bd38      	pop	{r3, r4, r5, pc}

00011c30 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   11c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pConn->handle == handle)
   11c34:	4e4b      	ldr	r6, [pc, #300]	; (11d64 <hciCoreAclReassembly+0x134>)
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;

  BYTES_TO_UINT16(handle, pData);
   11c36:	7841      	ldrb	r1, [r0, #1]
   11c38:	7804      	ldrb	r4, [r0, #0]
  pbf = handle & HCI_PB_FLAG_MASK;
  handle &= HCI_HANDLE_MASK;
  BYTES_TO_UINT16(aclLen, &pData[2]);
   11c3a:	78c3      	ldrb	r3, [r0, #3]
   11c3c:	7882      	ldrb	r2, [r0, #2]
  BYTES_TO_UINT16(handle, pData);
   11c3e:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    if (pConn->handle == handle)
   11c42:	8a31      	ldrh	r1, [r6, #16]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   11c44:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  pbf = handle & HCI_PB_FLAG_MASK;
   11c48:	f404 5340 	and.w	r3, r4, #12288	; 0x3000
  handle &= HCI_HANDLE_MASK;
   11c4c:	f3c4 040b 	ubfx	r4, r4, #0, #12
    if (pConn->handle == handle)
   11c50:	42a1      	cmp	r1, r4
{
   11c52:	4605      	mov	r5, r0
  BYTES_TO_UINT16(aclLen, &pData[2]);
   11c54:	b297      	uxth	r7, r2
    if (pConn->handle == handle)
   11c56:	d00d      	beq.n	11c74 <hciCoreAclReassembly+0x44>
   11c58:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
   11c5a:	42a2      	cmp	r2, r4
   11c5c:	d049      	beq.n	11cf2 <hciCoreAclReassembly+0xc2>
   11c5e:	f8b6 2048 	ldrh.w	r2, [r6, #72]	; 0x48
   11c62:	42a2      	cmp	r2, r4
   11c64:	d07a      	beq.n	11d5c <hciCoreAclReassembly+0x12c>
  uint8_t       *pDataRtn = NULL;
   11c66:	2400      	movs	r4, #0
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
  {
    WsfMsgFree(pData);
   11c68:	4628      	mov	r0, r5
   11c6a:	f006 f821 	bl	17cb0 <WsfMsgFree>
  }

  return pDataRtn;
}
   11c6e:	4620      	mov	r0, r4
   11c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11c74:	46b0      	mov	r8, r6
    if (pbf == HCI_PB_START_C2H)
   11c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   11c7a:	d022      	beq.n	11cc2 <hciCoreAclReassembly+0x92>
    else if (pbf == HCI_PB_CONTINUE)
   11c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   11c80:	d1f1      	bne.n	11c66 <hciCoreAclReassembly+0x36>
      if (pConn->pRxAclPkt != NULL)
   11c82:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11c86:	2b00      	cmp	r3, #0
   11c88:	d0ed      	beq.n	11c66 <hciCoreAclReassembly+0x36>
        if (aclLen <= pConn->rxAclRemLen)
   11c8a:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   11c8e:	42bb      	cmp	r3, r7
   11c90:	d3e9      	bcc.n	11c66 <hciCoreAclReassembly+0x36>
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   11c92:	463a      	mov	r2, r7
   11c94:	f8d8 000c 	ldr.w	r0, [r8, #12]
   11c98:	1d29      	adds	r1, r5, #4
   11c9a:	f7fa fa31 	bl	c100 <memcpy>
          pConn->rxAclRemLen -= aclLen;
   11c9e:	f8b8 3014 	ldrh.w	r3, [r8, #20]
          pConn->pNextRxFrag += aclLen;
   11ca2:	f8d8 200c 	ldr.w	r2, [r8, #12]
          pConn->rxAclRemLen -= aclLen;
   11ca6:	1bdb      	subs	r3, r3, r7
          pConn->pNextRxFrag += aclLen;
   11ca8:	443a      	add	r2, r7
          pConn->rxAclRemLen -= aclLen;
   11caa:	b29b      	uxth	r3, r3
          pConn->pNextRxFrag += aclLen;
   11cac:	f8c8 200c 	str.w	r2, [r8, #12]
          pConn->rxAclRemLen -= aclLen;
   11cb0:	f8a8 3014 	strh.w	r3, [r8, #20]
          if (pConn->rxAclRemLen == 0)
   11cb4:	2b00      	cmp	r3, #0
   11cb6:	d1d6      	bne.n	11c66 <hciCoreAclReassembly+0x36>
            pDataRtn = pConn->pRxAclPkt;
   11cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
            pConn->pRxAclPkt = NULL;
   11cbc:	f8c8 3008 	str.w	r3, [r8, #8]
  if (freeData)
   11cc0:	e7d2      	b.n	11c68 <hciCoreAclReassembly+0x38>
      if (pConn->pRxAclPkt != NULL)
   11cc2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   11cc6:	b120      	cbz	r0, 11cd2 <hciCoreAclReassembly+0xa2>
        WsfMsgFree(pConn->pRxAclPkt);
   11cc8:	f005 fff2 	bl	17cb0 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   11ccc:	2300      	movs	r3, #0
   11cce:	f8c8 3008 	str.w	r3, [r8, #8]
      if (aclLen >= L2C_HDR_LEN)
   11cd2:	2f03      	cmp	r7, #3
   11cd4:	d9c7      	bls.n	11c66 <hciCoreAclReassembly+0x36>
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   11cd6:	f8b6 2070 	ldrh.w	r2, [r6, #112]	; 0x70
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   11cda:	796b      	ldrb	r3, [r5, #5]
   11cdc:	792e      	ldrb	r6, [r5, #4]
   11cde:	eb06 2603 	add.w	r6, r6, r3, lsl #8
   11ce2:	b2b6      	uxth	r6, r6
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   11ce4:	1cf3      	adds	r3, r6, #3
   11ce6:	4293      	cmp	r3, r2
   11ce8:	dabd      	bge.n	11c66 <hciCoreAclReassembly+0x36>
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   11cea:	42bb      	cmp	r3, r7
   11cec:	da04      	bge.n	11cf8 <hciCoreAclReassembly+0xc8>
   11cee:	462c      	mov	r4, r5
  return pDataRtn;
   11cf0:	e7bd      	b.n	11c6e <hciCoreAclReassembly+0x3e>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11cf2:	f106 081c 	add.w	r8, r6, #28
   11cf6:	e7be      	b.n	11c76 <hciCoreAclReassembly+0x46>
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   11cf8:	f106 0008 	add.w	r0, r6, #8
   11cfc:	b280      	uxth	r0, r0
   11cfe:	2100      	movs	r1, #0
   11d00:	f005 ffc4 	bl	17c8c <WsfMsgDataAlloc>
   11d04:	f8c8 0008 	str.w	r0, [r8, #8]
   11d08:	2800      	cmp	r0, #0
   11d0a:	d0ac      	beq.n	11c66 <hciCoreAclReassembly+0x36>
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   11d0c:	1c43      	adds	r3, r0, #1
   11d0e:	f8c8 300c 	str.w	r3, [r8, #12]
   11d12:	7004      	strb	r4, [r0, #0]
   11d14:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11d18:	0a24      	lsrs	r4, r4, #8
   11d1a:	1c5a      	adds	r2, r3, #1
   11d1c:	f8c8 200c 	str.w	r2, [r8, #12]
   11d20:	701c      	strb	r4, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   11d22:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11d26:	3604      	adds	r6, #4
   11d28:	1c59      	adds	r1, r3, #1
   11d2a:	f8c8 100c 	str.w	r1, [r8, #12]
   11d2e:	701e      	strb	r6, [r3, #0]
   11d30:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11d34:	1230      	asrs	r0, r6, #8
   11d36:	1c5c      	adds	r4, r3, #1
   11d38:	f8c8 400c 	str.w	r4, [r8, #12]
   11d3c:	7018      	strb	r0, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   11d3e:	f8d8 000c 	ldr.w	r0, [r8, #12]
   11d42:	463a      	mov	r2, r7
   11d44:	1d29      	adds	r1, r5, #4
   11d46:	f7fa f9db 	bl	c100 <memcpy>
            pConn->pNextRxFrag += aclLen;
   11d4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   11d4e:	1bf6      	subs	r6, r6, r7
            pConn->pNextRxFrag += aclLen;
   11d50:	443b      	add	r3, r7
   11d52:	f8c8 300c 	str.w	r3, [r8, #12]
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   11d56:	f8a8 6014 	strh.w	r6, [r8, #20]
   11d5a:	e784      	b.n	11c66 <hciCoreAclReassembly+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11d5c:	f106 0838 	add.w	r8, r6, #56	; 0x38
   11d60:	e789      	b.n	11c76 <hciCoreAclReassembly+0x46>
   11d62:	bf00      	nop
   11d64:	100058e0 	.word	0x100058e0

00011d68 <HciCoreInit>:
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;

  #if defined(AM_PART_APOLLO3) || defined(AM_PART_APOLLO3P)
    if (APOLLO3_GE_B0)
   11d68:	4a10      	ldr	r2, [pc, #64]	; (11dac <HciCoreInit+0x44>)
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   11d6a:	4b11      	ldr	r3, [pc, #68]	; (11db0 <HciCoreInit+0x48>)
    if (APOLLO3_GE_B0)
   11d6c:	68d2      	ldr	r2, [r2, #12]
   11d6e:	b2d2      	uxtb	r2, r2
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   11d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
    if (APOLLO3_GE_B0)
   11d74:	2a20      	cmp	r2, #32
    {
      // B0 has only less internal ACL buffers
      hciCoreCb.aclQueueHi--;
   11d76:	bf88      	it	hi
   11d78:	f44f 7201 	movhi.w	r2, #516	; 0x204
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   11d7c:	8219      	strh	r1, [r3, #16]
   11d7e:	8599      	strh	r1, [r3, #44]	; 0x2c
   11d80:	f8a3 1048 	strh.w	r1, [r3, #72]	; 0x48
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   11d84:	f240 3105 	movw	r1, #773	; 0x305
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   11d88:	f04f 0000 	mov.w	r0, #0
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   11d8c:	f04f 0c1b 	mov.w	ip, #27
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   11d90:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
      hciCoreCb.aclQueueHi--;
   11d94:	bf88      	it	hi
   11d96:	f8a3 2074 	strhhi.w	r2, [r3, #116]	; 0x74
      hciCoreCb.aclQueueLo--;
    }
  #endif
  hciCoreCb.extResetSeq = NULL;
   11d9a:	2200      	movs	r2, #0
  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   11d9c:	e9c3 0019 	strd	r0, r0, [r3, #100]	; 0x64
  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   11da0:	f8a3 c070 	strh.w	ip, [r3, #112]	; 0x70
  hciCoreCb.extResetSeq = NULL;
   11da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  hciCoreInit();
   11da8:	f000 b8a4 	b.w	11ef4 <hciCoreInit>
   11dac:	40020000 	.word	0x40020000
   11db0:	100058e0 	.word	0x100058e0

00011db4 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   11db4:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   11db6:	4d1e      	ldr	r5, [pc, #120]	; (11e30 <HciResetSequence+0x7c>)
{
   11db8:	b083      	sub	sp, #12
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   11dba:	e001      	b.n	11dc0 <HciResetSequence+0xc>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   11dbc:	f005 ff78 	bl	17cb0 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   11dc0:	f10d 0107 	add.w	r1, sp, #7
   11dc4:	4628      	mov	r0, r5
   11dc6:	f005 ff8f 	bl	17ce8 <WsfMsgDeq>
   11dca:	4604      	mov	r4, r0
   11dcc:	2800      	cmp	r0, #0
   11dce:	d1f5      	bne.n	11dbc <HciResetSequence+0x8>
   11dd0:	4d18      	ldr	r5, [pc, #96]	; (11e34 <HciResetSequence+0x80>)
      WsfMsgFree(pConn->pRxAclPkt);
      pConn->pRxAclPkt = NULL;
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   11dd2:	f64f 77ff 	movw	r7, #65535	; 0xffff
   11dd6:	f105 0654 	add.w	r6, r5, #84	; 0x54
    if (pConn->pTxAclPkt != NULL)
   11dda:	f855 0c1c 	ldr.w	r0, [r5, #-28]
   11dde:	b118      	cbz	r0, 11de8 <HciResetSequence+0x34>
      WsfMsgFree(pConn->pTxAclPkt);
   11de0:	f005 ff66 	bl	17cb0 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   11de4:	f845 4c1c 	str.w	r4, [r5, #-28]
    if (pConn->pRxAclPkt != NULL)
   11de8:	f855 0c14 	ldr.w	r0, [r5, #-20]
    pConn->fragmenting = FALSE;
   11dec:	f805 4c06 	strb.w	r4, [r5, #-6]
    if (pConn->pRxAclPkt != NULL)
   11df0:	b198      	cbz	r0, 11e1a <HciResetSequence+0x66>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11df2:	351c      	adds	r5, #28
      WsfMsgFree(pConn->pRxAclPkt);
   11df4:	f005 ff5c 	bl	17cb0 <WsfMsgFree>

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   11df8:	f815 0c1f 	ldrb.w	r0, [r5, #-31]
      pConn->pRxAclPkt = NULL;
   11dfc:	f845 4c30 	str.w	r4, [r5, #-48]
    pConn->handle = HCI_HANDLE_NONE;
   11e00:	f825 7c28 	strh.w	r7, [r5, #-40]
    hciCoreTxReady(pConn->outBufs);
   11e04:	f7ff fe2e 	bl	11a64 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11e08:	42ae      	cmp	r6, r5
   11e0a:	d1e6      	bne.n	11dda <HciResetSequence+0x26>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   11e0c:	4b08      	ldr	r3, [pc, #32]	; (11e30 <HciResetSequence+0x7c>)
   11e0e:	2201      	movs	r2, #1
   11e10:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   11e12:	f7fe f98f 	bl	10134 <hciCoreResetStart>
}
   11e16:	b003      	add	sp, #12
   11e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hciCoreTxReady(pConn->outBufs);
   11e1a:	f815 0c03 	ldrb.w	r0, [r5, #-3]
    pConn->handle = HCI_HANDLE_NONE;
   11e1e:	f825 7c0c 	strh.w	r7, [r5, #-12]
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11e22:	351c      	adds	r5, #28
    hciCoreTxReady(pConn->outBufs);
   11e24:	f7ff fe1e 	bl	11a64 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11e28:	42b5      	cmp	r5, r6
   11e2a:	d1d6      	bne.n	11dda <HciResetSequence+0x26>
   11e2c:	e7ee      	b.n	11e0c <HciResetSequence+0x58>
   11e2e:	bf00      	nop
   11e30:	100059bc 	.word	0x100059bc
   11e34:	100058fc 	.word	0x100058fc

00011e38 <HciSetMaxRxAclLen>:
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
  hciCoreCb.maxRxAclLen = len;
   11e38:	4b01      	ldr	r3, [pc, #4]	; (11e40 <HciSetMaxRxAclLen+0x8>)
   11e3a:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
}
   11e3e:	4770      	bx	lr
   11e40:	100058e0 	.word	0x100058e0

00011e44 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   11e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pConn->handle == handle)
   11e48:	4f27      	ldr	r7, [pc, #156]	; (11ee8 <HciSendAclData+0xa4>)
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   11e4a:	7843      	ldrb	r3, [r0, #1]
   11e4c:	7805      	ldrb	r5, [r0, #0]
   11e4e:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    if (pConn->handle == handle)
   11e52:	8a3b      	ldrh	r3, [r7, #16]
  BYTES_TO_UINT16(handle, pData);
   11e54:	b2ad      	uxth	r5, r5
    if (pConn->handle == handle)
   11e56:	42ab      	cmp	r3, r5
{
   11e58:	4680      	mov	r8, r0
    if (pConn->handle == handle)
   11e5a:	d00a      	beq.n	11e72 <HciSendAclData+0x2e>
   11e5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   11e5e:	42ab      	cmp	r3, r5
   11e60:	d03c      	beq.n	11edc <HciSendAclData+0x98>
   11e62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
   11e66:	42ab      	cmp	r3, r5
   11e68:	d03b      	beq.n	11ee2 <HciSendAclData+0x9e>
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   11e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pData);
   11e6e:	f005 bf1f 	b.w	17cb0 <WsfMsgFree>
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   11e72:	463e      	mov	r6, r7
  BYTES_TO_UINT16(len, &pData[2]);
   11e74:	f898 3003 	ldrb.w	r3, [r8, #3]
   11e78:	f898 4002 	ldrb.w	r4, [r8, #2]
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   11e7c:	481b      	ldr	r0, [pc, #108]	; (11eec <HciSendAclData+0xa8>)
  BYTES_TO_UINT16(len, &pData[2]);
   11e7e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   11e82:	b2a4      	uxth	r4, r4
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   11e84:	f006 f930 	bl	180e8 <WsfQueueEmpty>
   11e88:	b110      	cbz	r0, 11e90 <HciSendAclData+0x4c>
   11e8a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
   11e8e:	b9fb      	cbnz	r3, 11ed0 <HciSendAclData+0x8c>
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   11e90:	4816      	ldr	r0, [pc, #88]	; (11eec <HciSendAclData+0xa8>)
   11e92:	4642      	mov	r2, r8
   11e94:	2100      	movs	r1, #0
   11e96:	f005 ff21 	bl	17cdc <WsfMsgEnq>
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   11e9a:	f000 f8c3 	bl	12024 <HciGetBufSize>
   11e9e:	7e32      	ldrb	r2, [r6, #24]
   11ea0:	3c01      	subs	r4, #1
   11ea2:	fb94 f4f0 	sdiv	r4, r4, r0
   11ea6:	1c63      	adds	r3, r4, #1
   11ea8:	4413      	add	r3, r2
   11eaa:	b2db      	uxtb	r3, r3
   11eac:	7633      	strb	r3, [r6, #24]
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   11eae:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
   11eb2:	429a      	cmp	r2, r3
   11eb4:	d901      	bls.n	11eba <HciSendAclData+0x76>
}
   11eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   11eba:	7df3      	ldrb	r3, [r6, #23]
   11ebc:	2b00      	cmp	r3, #0
   11ebe:	d1fa      	bne.n	11eb6 <HciSendAclData+0x72>
      (*hciCb.flowCback)(handle, TRUE);
   11ec0:	4b0b      	ldr	r3, [pc, #44]	; (11ef0 <HciSendAclData+0xac>)
      pConn->flowDisabled = TRUE;
   11ec2:	2101      	movs	r1, #1
   11ec4:	75f1      	strb	r1, [r6, #23]
      (*hciCb.flowCback)(handle, TRUE);
   11ec6:	4628      	mov	r0, r5
   11ec8:	695b      	ldr	r3, [r3, #20]
}
   11eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*hciCb.flowCback)(handle, TRUE);
   11ece:	4718      	bx	r3
      hciCoreTxAclStart(pConn, len, pData);
   11ed0:	4642      	mov	r2, r8
   11ed2:	4621      	mov	r1, r4
   11ed4:	4630      	mov	r0, r6
   11ed6:	f7ff fd51 	bl	1197c <hciCoreTxAclStart>
   11eda:	e7de      	b.n	11e9a <HciSendAclData+0x56>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   11edc:	f107 061c 	add.w	r6, r7, #28
   11ee0:	e7c8      	b.n	11e74 <HciSendAclData+0x30>
   11ee2:	f107 0638 	add.w	r6, r7, #56	; 0x38
   11ee6:	e7c5      	b.n	11e74 <HciSendAclData+0x30>
   11ee8:	100058e0 	.word	0x100058e0
   11eec:	10005944 	.word	0x10005944
   11ef0:	100059bc 	.word	0x100059bc

00011ef4 <hciCoreInit>:
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
  hciCmdInit();
   11ef4:	f7fe baaa 	b.w	1044c <hciCmdInit>

00011ef8 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   11ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t        handle;
  uint8_t         availBufs = 0;
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   11efc:	f890 a000 	ldrb.w	sl, [r0]

  /* for each handle in event */
  while (numHandles-- > 0)
   11f00:	f1ba 0f00 	cmp.w	sl, #0
   11f04:	d03b      	beq.n	11f7e <hciCoreNumCmplPkts+0x86>
   11f06:	f10a 36ff 	add.w	r6, sl, #4294967295
   11f0a:	b2f6      	uxtb	r6, r6
   11f0c:	f100 0309 	add.w	r3, r0, #9
  uint8_t         availBufs = 0;
   11f10:	f04f 0a00 	mov.w	sl, #0

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   11f14:	4f1c      	ldr	r7, [pc, #112]	; (11f88 <hciCoreNumCmplPkts+0x90>)
      {
        pConn->flowDisabled = FALSE;
        (*hciCb.flowCback)(handle, FALSE);
   11f16:	f8df 9074 	ldr.w	r9, [pc, #116]	; 11f8c <hciCoreNumCmplPkts+0x94>
   11f1a:	1d44      	adds	r4, r0, #5
   11f1c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        pConn->flowDisabled = FALSE;
   11f20:	46d0      	mov	r8, sl
    BSTREAM_TO_UINT16(handle, pMsg);
   11f22:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   11f26:	f814 5c04 	ldrb.w	r5, [r4, #-4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   11f2a:	f814 bc02 	ldrb.w	fp, [r4, #-2]
    BSTREAM_TO_UINT16(handle, pMsg);
   11f2e:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   11f32:	b2ad      	uxth	r5, r5
    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   11f34:	4628      	mov	r0, r5
   11f36:	f7ff fcf1 	bl	1191c <hciCoreConnByHandle>
  while (numHandles-- > 0)
   11f3a:	3404      	adds	r4, #4
      pConn->outBufs -= (uint8_t) bufs;
   11f3c:	465a      	mov	r2, fp
      availBufs += (uint8_t) bufs;
   11f3e:	eb0b 0c0a 	add.w	ip, fp, sl
    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   11f42:	4603      	mov	r3, r0
   11f44:	b1c8      	cbz	r0, 11f7a <hciCoreNumCmplPkts+0x82>
      pConn->queuedBufs -= (uint8_t) bufs;
   11f46:	7e00      	ldrb	r0, [r0, #24]
      pConn->outBufs -= (uint8_t) bufs;
   11f48:	7e59      	ldrb	r1, [r3, #25]
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   11f4a:	f893 e017 	ldrb.w	lr, [r3, #23]
      pConn->queuedBufs -= (uint8_t) bufs;
   11f4e:	1a80      	subs	r0, r0, r2
   11f50:	b2c0      	uxtb	r0, r0
      pConn->outBufs -= (uint8_t) bufs;
   11f52:	1a8a      	subs	r2, r1, r2
   11f54:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs -= (uint8_t) bufs;
   11f56:	7618      	strb	r0, [r3, #24]
      availBufs += (uint8_t) bufs;
   11f58:	fa5f fa8c 	uxtb.w	sl, ip
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   11f5c:	f1be 0f00 	cmp.w	lr, #0
   11f60:	d00b      	beq.n	11f7a <hciCoreNumCmplPkts+0x82>
   11f62:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
   11f66:	4282      	cmp	r2, r0
        (*hciCb.flowCback)(handle, FALSE);
   11f68:	f04f 0100 	mov.w	r1, #0
   11f6c:	4628      	mov	r0, r5
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   11f6e:	d304      	bcc.n	11f7a <hciCoreNumCmplPkts+0x82>
        pConn->flowDisabled = FALSE;
   11f70:	f883 8017 	strb.w	r8, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   11f74:	f8d9 3014 	ldr.w	r3, [r9, #20]
   11f78:	4798      	blx	r3
  while (numHandles-- > 0)
   11f7a:	42a6      	cmp	r6, r4
   11f7c:	d1d1      	bne.n	11f22 <hciCoreNumCmplPkts+0x2a>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   11f7e:	4650      	mov	r0, sl
}
   11f80:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciCoreTxReady(availBufs);
   11f84:	f7ff bd6e 	b.w	11a64 <hciCoreTxReady>
   11f88:	100058e0 	.word	0x100058e0
   11f8c:	100059bc 	.word	0x100059bc

00011f90 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   11f90:	b510      	push	{r4, lr}
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   11f92:	4c06      	ldr	r4, [pc, #24]	; (11fac <hciCoreRecv+0x1c>)
{
   11f94:	4603      	mov	r3, r0
   11f96:	460a      	mov	r2, r1
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   11f98:	4620      	mov	r0, r4
   11f9a:	4619      	mov	r1, r3
   11f9c:	f005 fe9e 	bl	17cdc <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   11fa0:	7e20      	ldrb	r0, [r4, #24]
   11fa2:	2101      	movs	r1, #1
}
   11fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   11fa8:	f005 bed0 	b.w	17d4c <WsfSetEvent>
   11fac:	100059bc 	.word	0x100059bc

00011fb0 <HciCoreHandler>:
{
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   11fb0:	b119      	cbz	r1, 11fba <HciCoreHandler+0xa>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   11fb2:	788b      	ldrb	r3, [r1, #2]
   11fb4:	2b01      	cmp	r3, #1
   11fb6:	d028      	beq.n	1200a <HciCoreHandler+0x5a>
   11fb8:	4770      	bx	lr
    {
      hciCmdTimeout(pMsg);
    }
  }
  /* Handle events */
  else if (event & HCI_EVT_RX)
   11fba:	07c3      	lsls	r3, r0, #31
   11fbc:	d5fc      	bpl.n	11fb8 <HciCoreHandler+0x8>
{
   11fbe:	b530      	push	{r4, r5, lr}
   11fc0:	4d15      	ldr	r5, [pc, #84]	; (12018 <HciCoreHandler+0x68>)
   11fc2:	b083      	sub	sp, #12
  {
    /* Process rx queue */
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   11fc4:	f10d 0107 	add.w	r1, sp, #7
   11fc8:	4628      	mov	r0, r5
   11fca:	f005 fe8d 	bl	17ce8 <WsfMsgDeq>
   11fce:	4604      	mov	r4, r0
   11fd0:	b188      	cbz	r0, 11ff6 <HciCoreHandler+0x46>
    {
      /* Handle incoming HCI events */
      if (handlerId == HCI_EVT_TYPE)
   11fd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11fd6:	2b04      	cmp	r3, #4
   11fd8:	d00f      	beq.n	11ffa <HciCoreHandler+0x4a>
      }
      /* Handle ACL data */
      else
      {
        /* Reassemble */
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   11fda:	f7ff fe29 	bl	11c30 <hciCoreAclReassembly>
   11fde:	2800      	cmp	r0, #0
   11fe0:	d0f0      	beq.n	11fc4 <HciCoreHandler+0x14>
        {
          /* Call ACL callback; client will free buffer */
          hciCb.aclCback(pBuf);
   11fe2:	692b      	ldr	r3, [r5, #16]
   11fe4:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   11fe6:	f10d 0107 	add.w	r1, sp, #7
   11fea:	4628      	mov	r0, r5
   11fec:	f005 fe7c 	bl	17ce8 <WsfMsgDeq>
   11ff0:	4604      	mov	r4, r0
   11ff2:	2800      	cmp	r0, #0
   11ff4:	d1ed      	bne.n	11fd2 <HciCoreHandler+0x22>
        }
      }
    }
  }
}
   11ff6:	b003      	add	sp, #12
   11ff8:	bd30      	pop	{r4, r5, pc}
        hciEvtProcessMsg(pBuf);
   11ffa:	f000 fcc3 	bl	12984 <hciEvtProcessMsg>
        if (hciCb.resetting)
   11ffe:	7e6b      	ldrb	r3, [r5, #25]
   12000:	b933      	cbnz	r3, 12010 <HciCoreHandler+0x60>
        WsfMsgFree(pBuf);
   12002:	4620      	mov	r0, r4
   12004:	f005 fe54 	bl	17cb0 <WsfMsgFree>
   12008:	e7dc      	b.n	11fc4 <HciCoreHandler+0x14>
      hciCmdTimeout(pMsg);
   1200a:	4608      	mov	r0, r1
   1200c:	f7fe ba2e 	b.w	1046c <hciCmdTimeout>
          hciCoreResetSequence(pBuf);
   12010:	4620      	mov	r0, r4
   12012:	f7fe f897 	bl	10144 <hciCoreResetSequence>
   12016:	e7f4      	b.n	12002 <HciCoreHandler+0x52>
   12018:	100059bc 	.word	0x100059bc

0001201c <HciGetBdAddr>:
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
  return hciCoreCb.bdAddr;
}
   1201c:	4800      	ldr	r0, [pc, #0]	; (12020 <HciGetBdAddr+0x4>)
   1201e:	4770      	bx	lr
   12020:	1000593c 	.word	0x1000593c

00012024 <HciGetBufSize>:
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
  return hciCoreCb.bufSize;
   12024:	4b01      	ldr	r3, [pc, #4]	; (1202c <HciGetBufSize+0x8>)
}
   12026:	f8b3 0072 	ldrh.w	r0, [r3, #114]	; 0x72
   1202a:	4770      	bx	lr
   1202c:	100058e0 	.word	0x100058e0

00012030 <HciGetMaxRxAclLen>:
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
  return hciCoreCb.maxRxAclLen;
   12030:	4b01      	ldr	r3, [pc, #4]	; (12038 <HciGetMaxRxAclLen+0x8>)
}
   12032:	f8b3 0070 	ldrh.w	r0, [r3, #112]	; 0x70
   12036:	4770      	bx	lr
   12038:	100058e0 	.word	0x100058e0

0001203c <HciLlPrivacySupported>:
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   1203c:	4b03      	ldr	r3, [pc, #12]	; (1204c <HciLlPrivacySupported+0x10>)
   1203e:	f893 0081 	ldrb.w	r0, [r3, #129]	; 0x81
}
   12042:	3800      	subs	r0, #0
   12044:	bf18      	it	ne
   12046:	2001      	movne	r0, #1
   12048:	4770      	bx	lr
   1204a:	bf00      	nop
   1204c:	100058e0 	.word	0x100058e0

00012050 <hciEvtParseDisconnectCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   12050:	780a      	ldrb	r2, [r1, #0]
   12052:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   12054:	f891 c002 	ldrb.w	ip, [r1, #2]
   12058:	784b      	ldrb	r3, [r1, #1]
   1205a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1205e:	b29b      	uxth	r3, r3
   12060:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   12062:	78c9      	ldrb	r1, [r1, #3]
   12064:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   12066:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   12068:	70c2      	strb	r2, [r0, #3]
}
   1206a:	4770      	bx	lr

0001206c <hciEvtParseLeConnUpdateCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   1206c:	f891 c000 	ldrb.w	ip, [r1]
   12070:	f880 c004 	strb.w	ip, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   12074:	788a      	ldrb	r2, [r1, #2]
   12076:	784b      	ldrb	r3, [r1, #1]
   12078:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1207c:	b29b      	uxth	r3, r3
   1207e:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   12080:	78ca      	ldrb	r2, [r1, #3]
{
   12082:	b500      	push	{lr}
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   12084:	f891 e004 	ldrb.w	lr, [r1, #4]
   12088:	eb02 220e 	add.w	r2, r2, lr, lsl #8
   1208c:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   1208e:	f891 e006 	ldrb.w	lr, [r1, #6]
   12092:	794a      	ldrb	r2, [r1, #5]
   12094:	eb02 220e 	add.w	r2, r2, lr, lsl #8
   12098:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   1209a:	f891 e008 	ldrb.w	lr, [r1, #8]
   1209e:	79ca      	ldrb	r2, [r1, #7]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   120a0:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   120a2:	eb02 230e 	add.w	r3, r2, lr, lsl #8
   120a6:	8183      	strh	r3, [r0, #12]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   120a8:	f880 c003 	strb.w	ip, [r0, #3]
}
   120ac:	f85d fb04 	ldr.w	pc, [sp], #4

000120b0 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   120b0:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   120b2:	f04f 0300 	mov.w	r3, #0
   120b6:	f362 0307 	bfi	r3, r2, #0, #8
   120ba:	f362 230f 	bfi	r3, r2, #8, #8
   120be:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   120c2:	4770      	bx	lr

000120c4 <hciEvtParseReadRssiCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   120c4:	780a      	ldrb	r2, [r1, #0]
   120c6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   120c8:	f891 c002 	ldrb.w	ip, [r1, #2]
   120cc:	784b      	ldrb	r3, [r1, #1]
   120ce:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   120d2:	b29b      	uxth	r3, r3
   120d4:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   120d6:	78c9      	ldrb	r1, [r1, #3]
   120d8:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   120da:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   120dc:	70c2      	strb	r2, [r0, #3]
}
   120de:	4770      	bx	lr

000120e0 <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   120e0:	780b      	ldrb	r3, [r1, #0]
   120e2:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   120e4:	784a      	ldrb	r2, [r1, #1]
   120e6:	7142      	strb	r2, [r0, #5]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   120e8:	78c9      	ldrb	r1, [r1, #3]
   120ea:	7181      	strb	r1, [r0, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   120ec:	8002      	strh	r2, [r0, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   120ee:	70c3      	strb	r3, [r0, #3]
}
   120f0:	4770      	bx	lr
   120f2:	bf00      	nop

000120f4 <hciEvtParseReadRemoteVerInfoCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   120f4:	f891 c000 	ldrb.w	ip, [r1]
   120f8:	f880 c004 	strb.w	ip, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   120fc:	788a      	ldrb	r2, [r1, #2]
   120fe:	784b      	ldrb	r3, [r1, #1]
   12100:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12104:	b29b      	uxth	r3, r3
   12106:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   12108:	78ca      	ldrb	r2, [r1, #3]
   1210a:	7202      	strb	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   1210c:	790a      	ldrb	r2, [r1, #4]
{
   1210e:	b500      	push	{lr}
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   12110:	f891 e005 	ldrb.w	lr, [r1, #5]
   12114:	eb02 220e 	add.w	r2, r2, lr, lsl #8
   12118:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   1211a:	f891 e007 	ldrb.w	lr, [r1, #7]
   1211e:	798a      	ldrb	r2, [r1, #6]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   12120:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   12122:	eb02 230e 	add.w	r3, r2, lr, lsl #8
   12126:	8183      	strh	r3, [r0, #12]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   12128:	f880 c003 	strb.w	ip, [r0, #3]
}
   1212c:	f85d fb04 	ldr.w	pc, [sp], #4

00012130 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   12130:	780a      	ldrb	r2, [r1, #0]
   12132:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   12134:	f891 c002 	ldrb.w	ip, [r1, #2]
   12138:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   1213a:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   1213c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12140:	b29b      	uxth	r3, r3
   12142:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   12144:	8003      	strh	r3, [r0, #0]
}
   12146:	4770      	bx	lr

00012148 <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   12148:	780a      	ldrb	r2, [r1, #0]
   1214a:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   1214c:	f891 c002 	ldrb.w	ip, [r1, #2]
   12150:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   12152:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   12154:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12158:	b29b      	uxth	r3, r3
   1215a:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   1215c:	8003      	strh	r3, [r0, #0]
}
   1215e:	4770      	bx	lr

00012160 <hciEvtParseEncKeyRefreshCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   12160:	780a      	ldrb	r2, [r1, #0]
   12162:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   12164:	f891 c002 	ldrb.w	ip, [r1, #2]
   12168:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   1216a:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   1216c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12170:	b29b      	uxth	r3, r3
   12172:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   12174:	8003      	strh	r3, [r0, #0]
}
   12176:	4770      	bx	lr

00012178 <hciEvtParseEncChange>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   12178:	780a      	ldrb	r2, [r1, #0]
   1217a:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   1217c:	f891 c002 	ldrb.w	ip, [r1, #2]
   12180:	784b      	ldrb	r3, [r1, #1]
   12182:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12186:	b29b      	uxth	r3, r3
   12188:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   1218a:	78c9      	ldrb	r1, [r1, #3]
   1218c:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   1218e:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   12190:	70c2      	strb	r2, [r0, #3]
}
   12192:	4770      	bx	lr

00012194 <hciEvtParseVendorSpecCmdStatus>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   12194:	784a      	ldrb	r2, [r1, #1]
   12196:	780b      	ldrb	r3, [r1, #0]
   12198:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1219c:	8083      	strh	r3, [r0, #4]
}
   1219e:	4770      	bx	lr

000121a0 <hciEvtParseHwError>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   121a0:	780b      	ldrb	r3, [r1, #0]
   121a2:	7103      	strb	r3, [r0, #4]
}
   121a4:	4770      	bx	lr
   121a6:	bf00      	nop

000121a8 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   121a8:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   121aa:	f04f 0300 	mov.w	r3, #0
   121ae:	f362 0307 	bfi	r3, r2, #0, #8
   121b2:	f362 230f 	bfi	r3, r2, #8, #8
   121b6:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   121ba:	4770      	bx	lr

000121bc <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   121bc:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   121be:	f04f 0300 	mov.w	r3, #0
   121c2:	f362 0307 	bfi	r3, r2, #0, #8
   121c6:	f362 230f 	bfi	r3, r2, #8, #8
   121ca:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   121ce:	4770      	bx	lr

000121d0 <hciEvtParseLeClearResListCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   121d0:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   121d2:	f04f 0300 	mov.w	r3, #0
   121d6:	f362 0307 	bfi	r3, r2, #0, #8
   121da:	f362 230f 	bfi	r3, r2, #8, #8
   121de:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   121e2:	4770      	bx	lr

000121e4 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   121e4:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   121e6:	f04f 0300 	mov.w	r3, #0
   121ea:	f362 0307 	bfi	r3, r2, #0, #8
   121ee:	f362 230f 	bfi	r3, r2, #8, #8
   121f2:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   121f6:	4770      	bx	lr

000121f8 <hciEvtParseRemConnParamRepCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   121f8:	780a      	ldrb	r2, [r1, #0]
   121fa:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   121fc:	f891 c002 	ldrb.w	ip, [r1, #2]
   12200:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   12202:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   12204:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12208:	b29b      	uxth	r3, r3
   1220a:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   1220c:	8003      	strh	r3, [r0, #0]
}
   1220e:	4770      	bx	lr

00012210 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   12210:	780a      	ldrb	r2, [r1, #0]
   12212:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   12214:	f891 c002 	ldrb.w	ip, [r1, #2]
   12218:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   1221a:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   1221c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12220:	b29b      	uxth	r3, r3
   12222:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   12224:	8003      	strh	r3, [r0, #0]
}
   12226:	4770      	bx	lr

00012228 <hciEvtParseReadDefDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   12228:	780a      	ldrb	r2, [r1, #0]
   1222a:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   1222c:	f891 c002 	ldrb.w	ip, [r1, #2]
   12230:	784b      	ldrb	r3, [r1, #1]
   12232:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12236:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   12238:	f891 c004 	ldrb.w	ip, [r1, #4]
   1223c:	78cb      	ldrb	r3, [r1, #3]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   1223e:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   12240:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12244:	8103      	strh	r3, [r0, #8]
}
   12246:	4770      	bx	lr

00012248 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   12248:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   1224a:	f04f 0300 	mov.w	r3, #0
   1224e:	f362 0307 	bfi	r3, r2, #0, #8
   12252:	f362 230f 	bfi	r3, r2, #8, #8
   12256:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   1225a:	4770      	bx	lr

0001225c <hciEvtParseSetDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   1225c:	780a      	ldrb	r2, [r1, #0]
   1225e:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   12260:	f891 c002 	ldrb.w	ip, [r1, #2]
   12264:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   12266:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   12268:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1226c:	b29b      	uxth	r3, r3
   1226e:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   12270:	8003      	strh	r3, [r0, #0]
}
   12272:	4770      	bx	lr

00012274 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   12274:	780a      	ldrb	r2, [r1, #0]
   12276:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   12278:	f891 c002 	ldrb.w	ip, [r1, #2]
   1227c:	784b      	ldrb	r3, [r1, #1]
   1227e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12282:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   12284:	f891 c004 	ldrb.w	ip, [r1, #4]
   12288:	78cb      	ldrb	r3, [r1, #3]
   1228a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1228e:	8103      	strh	r3, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   12290:	f891 c006 	ldrb.w	ip, [r1, #6]
   12294:	794b      	ldrb	r3, [r1, #5]
   12296:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1229a:	8143      	strh	r3, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   1229c:	f891 c008 	ldrb.w	ip, [r1, #8]
   122a0:	79cb      	ldrb	r3, [r1, #7]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   122a2:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   122a4:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   122a8:	8183      	strh	r3, [r0, #12]
}
   122aa:	4770      	bx	lr

000122ac <hciEvtParseRemConnParamReq>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   122ac:	784a      	ldrb	r2, [r1, #1]
   122ae:	780b      	ldrb	r3, [r1, #0]
   122b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   122b4:	b29b      	uxth	r3, r3
   122b6:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   122b8:	f891 c003 	ldrb.w	ip, [r1, #3]
   122bc:	788a      	ldrb	r2, [r1, #2]
   122be:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   122c2:	80c2      	strh	r2, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   122c4:	f891 c005 	ldrb.w	ip, [r1, #5]
   122c8:	790a      	ldrb	r2, [r1, #4]
   122ca:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   122ce:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   122d0:	f891 c007 	ldrb.w	ip, [r1, #7]
   122d4:	798a      	ldrb	r2, [r1, #6]
   122d6:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   122da:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   122dc:	f891 c009 	ldrb.w	ip, [r1, #9]
   122e0:	7a0a      	ldrb	r2, [r1, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   122e2:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   122e4:	eb02 230c 	add.w	r3, r2, ip, lsl #8
   122e8:	8183      	strh	r3, [r0, #12]
}
   122ea:	4770      	bx	lr

000122ec <hciEvtParseDataLenChange>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   122ec:	784a      	ldrb	r2, [r1, #1]
   122ee:	780b      	ldrb	r3, [r1, #0]
   122f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   122f4:	b29b      	uxth	r3, r3
   122f6:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   122f8:	f891 c003 	ldrb.w	ip, [r1, #3]
   122fc:	788a      	ldrb	r2, [r1, #2]
   122fe:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   12302:	80c2      	strh	r2, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   12304:	f891 c005 	ldrb.w	ip, [r1, #5]
   12308:	790a      	ldrb	r2, [r1, #4]
   1230a:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   1230e:	8102      	strh	r2, [r0, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   12310:	f891 c007 	ldrb.w	ip, [r1, #7]
   12314:	798a      	ldrb	r2, [r1, #6]
   12316:	eb02 220c 	add.w	r2, r2, ip, lsl #8
   1231a:	8142      	strh	r2, [r0, #10]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   1231c:	f891 c009 	ldrb.w	ip, [r1, #9]
   12320:	7a0a      	ldrb	r2, [r1, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   12322:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   12324:	eb02 230c 	add.w	r3, r2, ip, lsl #8
   12328:	8183      	strh	r3, [r0, #12]
}
   1232a:	4770      	bx	lr

0001232c <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   1232c:	780a      	ldrb	r2, [r1, #0]
   1232e:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   12330:	f891 c002 	ldrb.w	ip, [r1, #2]
   12334:	784b      	ldrb	r3, [r1, #1]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   12336:	70c2      	strb	r2, [r0, #3]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   12338:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1233c:	b29b      	uxth	r3, r3
   1233e:	80c3      	strh	r3, [r0, #6]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   12340:	8003      	strh	r3, [r0, #0]
}
   12342:	4770      	bx	lr

00012344 <hciEvtParseAuthTimeoutExpiredEvt>:
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   12344:	784a      	ldrb	r2, [r1, #1]
   12346:	780b      	ldrb	r3, [r1, #0]
   12348:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1234c:	b29b      	uxth	r3, r3
   1234e:	8083      	strh	r3, [r0, #4]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   12350:	8003      	strh	r3, [r0, #0]
}
   12352:	4770      	bx	lr

00012354 <hciEvtParseReadPhyCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   12354:	780a      	ldrb	r2, [r1, #0]
   12356:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   12358:	f891 c002 	ldrb.w	ip, [r1, #2]
   1235c:	784b      	ldrb	r3, [r1, #1]
   1235e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12362:	b29b      	uxth	r3, r3
   12364:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   12366:	f891 c003 	ldrb.w	ip, [r1, #3]
   1236a:	f880 c008 	strb.w	ip, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   1236e:	7909      	ldrb	r1, [r1, #4]
   12370:	7241      	strb	r1, [r0, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   12372:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   12374:	8003      	strh	r3, [r0, #0]
}
   12376:	4770      	bx	lr

00012378 <hciEvtParseSetDefPhyCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   12378:	780a      	ldrb	r2, [r1, #0]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   1237a:	f04f 0300 	mov.w	r3, #0
   1237e:	f362 0307 	bfi	r3, r2, #0, #8
   12382:	f362 230f 	bfi	r3, r2, #8, #8
   12386:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   1238a:	4770      	bx	lr

0001238c <hciEvtParsePhyUpdateCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   1238c:	780a      	ldrb	r2, [r1, #0]
   1238e:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   12390:	f891 c002 	ldrb.w	ip, [r1, #2]
   12394:	784b      	ldrb	r3, [r1, #1]
   12396:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1239a:	b29b      	uxth	r3, r3
   1239c:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   1239e:	f891 c003 	ldrb.w	ip, [r1, #3]
   123a2:	f880 c008 	strb.w	ip, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   123a6:	7909      	ldrb	r1, [r1, #4]
   123a8:	7241      	strb	r1, [r0, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   123aa:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   123ac:	8003      	strh	r3, [r0, #0]
}
   123ae:	4770      	bx	lr

000123b0 <hciEvtParseLeScanTimeout>:
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  /* empty */
}
   123b0:	4770      	bx	lr
   123b2:	bf00      	nop

000123b4 <hciEvtParseLeAdvSetTerm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   123b4:	780a      	ldrb	r2, [r1, #0]
   123b6:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   123b8:	784b      	ldrb	r3, [r1, #1]
   123ba:	7143      	strb	r3, [r0, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   123bc:	f891 c003 	ldrb.w	ip, [r1, #3]
   123c0:	788b      	ldrb	r3, [r1, #2]
   123c2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   123c6:	b29b      	uxth	r3, r3
   123c8:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   123ca:	7909      	ldrb	r1, [r1, #4]
   123cc:	7201      	strb	r1, [r0, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   123ce:	70c2      	strb	r2, [r0, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   123d0:	8003      	strh	r3, [r0, #0]
}
   123d2:	4770      	bx	lr

000123d4 <hciEvtParseLeCmdCmpl>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   123d4:	780b      	ldrb	r3, [r1, #0]
   123d6:	70c3      	strb	r3, [r0, #3]
}
   123d8:	4770      	bx	lr
   123da:	bf00      	nop

000123dc <hciEvtParseLeSetConnCteRcvParm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteRcvParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leSetConnCteRxParamsCmdCmpl.status, p);
   123dc:	780a      	ldrb	r2, [r1, #0]
   123de:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteRxParamsCmdCmpl.handle, p);
   123e0:	f891 c002 	ldrb.w	ip, [r1, #2]
   123e4:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leSetConnCteRxParamsCmdCmpl.status;
   123e6:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteRxParamsCmdCmpl.handle, p);
   123e8:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   123ec:	b29b      	uxth	r3, r3
   123ee:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leSetConnCteRxParamsCmdCmpl.handle;
   123f0:	8003      	strh	r3, [r0, #0]
}
   123f2:	4770      	bx	lr

000123f4 <hciEvtParseLeSetConnCteTxParm>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetConnCteTxParm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leSetConnCteTxParamsCmdCmpl.status, p);
   123f4:	780a      	ldrb	r2, [r1, #0]
   123f6:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteTxParamsCmdCmpl.handle, p);
   123f8:	f891 c002 	ldrb.w	ip, [r1, #2]
   123fc:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leSetConnCteTxParamsCmdCmpl.status;
   123fe:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leSetConnCteTxParamsCmdCmpl.handle, p);
   12400:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12404:	b29b      	uxth	r3, r3
   12406:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leSetConnCteTxParamsCmdCmpl.handle;
   12408:	8003      	strh	r3, [r0, #0]
}
   1240a:	4770      	bx	lr

0001240c <hciEvtParseLeConnCteReqEn>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteReqEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leConnCteReqEnableCmdCmpl.status, p);
   1240c:	780a      	ldrb	r2, [r1, #0]
   1240e:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteReqEnableCmdCmpl.handle, p);
   12410:	f891 c002 	ldrb.w	ip, [r1, #2]
   12414:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leConnCteReqEnableCmdCmpl.status;
   12416:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leConnCteReqEnableCmdCmpl.handle, p);
   12418:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1241c:	b29b      	uxth	r3, r3
   1241e:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leConnCteReqEnableCmdCmpl.handle;
   12420:	8003      	strh	r3, [r0, #0]
}
   12422:	4770      	bx	lr

00012424 <hciEvtParseLeConnCteRspEn>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCteRspEn(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
    BSTREAM_TO_UINT8(pMsg->leConnCteRspEnableCmdCmpl.status, p);
   12424:	780a      	ldrb	r2, [r1, #0]
   12426:	7102      	strb	r2, [r0, #4]
    BSTREAM_TO_UINT16(pMsg->leConnCteRspEnableCmdCmpl.handle, p);
   12428:	f891 c002 	ldrb.w	ip, [r1, #2]
   1242c:	784b      	ldrb	r3, [r1, #1]
    
    pMsg->hdr.status = pMsg->leConnCteRspEnableCmdCmpl.status;
   1242e:	70c2      	strb	r2, [r0, #3]
    BSTREAM_TO_UINT16(pMsg->leConnCteRspEnableCmdCmpl.handle, p);
   12430:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12434:	b29b      	uxth	r3, r3
   12436:	80c3      	strh	r3, [r0, #6]
    pMsg->hdr.param = pMsg->leConnCteRspEnableCmdCmpl.handle;
   12438:	8003      	strh	r3, [r0, #0]
}
   1243a:	4770      	bx	lr

0001243c <hciEvtParseLePerAdvSyncLost>:
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   1243c:	784a      	ldrb	r2, [r1, #1]
   1243e:	780b      	ldrb	r3, [r1, #0]
   12440:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12444:	8083      	strh	r3, [r0, #4]
}
   12446:	4770      	bx	lr

00012448 <hciEvtParseLePerAdvSyncEst>:
{
   12448:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   1244a:	780b      	ldrb	r3, [r1, #0]
   1244c:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   1244e:	788a      	ldrb	r2, [r1, #2]
   12450:	784b      	ldrb	r3, [r1, #1]
{
   12452:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   12454:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12458:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   1245a:	78eb      	ldrb	r3, [r5, #3]
   1245c:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   1245e:	792b      	ldrb	r3, [r5, #4]
   12460:	7243      	strb	r3, [r0, #9]
{
   12462:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   12464:	3105      	adds	r1, #5
   12466:	300a      	adds	r0, #10
   12468:	f000 ff5a 	bl	13320 <BdaCpy>
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   1246c:	7aeb      	ldrb	r3, [r5, #11]
   1246e:	7423      	strb	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   12470:	7b69      	ldrb	r1, [r5, #13]
   12472:	7b2b      	ldrb	r3, [r5, #12]
  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   12474:	7922      	ldrb	r2, [r4, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   12476:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1247a:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   1247c:	7bab      	ldrb	r3, [r5, #14]
   1247e:	7523      	strb	r3, [r4, #20]
  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   12480:	70e2      	strb	r2, [r4, #3]
}
   12482:	bd38      	pop	{r3, r4, r5, pc}

00012484 <hciEvtParseLeScanReqRcvd>:
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   12484:	780b      	ldrb	r3, [r1, #0]
   12486:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   12488:	784b      	ldrb	r3, [r1, #1]
   1248a:	7143      	strb	r3, [r0, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   1248c:	3102      	adds	r1, #2
   1248e:	3006      	adds	r0, #6
   12490:	f000 bf46 	b.w	13320 <BdaCpy>

00012494 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
{
   12494:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   12496:	f811 3b01 	ldrb.w	r3, [r1], #1
   1249a:	7103      	strb	r3, [r0, #4]
{
   1249c:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   1249e:	3005      	adds	r0, #5
   124a0:	f000 ff3e 	bl	13320 <BdaCpy>
  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   124a4:	7923      	ldrb	r3, [r4, #4]
   124a6:	70e3      	strb	r3, [r4, #3]
}
   124a8:	bd10      	pop	{r4, pc}
   124aa:	bf00      	nop

000124ac <hciEvtParseLeReadPeerResAddrCmdCmpl>:
{
   124ac:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   124ae:	f811 3b01 	ldrb.w	r3, [r1], #1
   124b2:	7103      	strb	r3, [r0, #4]
{
   124b4:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   124b6:	3005      	adds	r0, #5
   124b8:	f000 ff32 	bl	13320 <BdaCpy>
  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   124bc:	7923      	ldrb	r3, [r4, #4]
   124be:	70e3      	strb	r3, [r4, #3]
}
   124c0:	bd10      	pop	{r4, pc}
   124c2:	bf00      	nop

000124c4 <hciEvtParseLeEnhancedConnCmpl>:
{
   124c4:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   124c6:	780b      	ldrb	r3, [r1, #0]
   124c8:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   124ca:	788a      	ldrb	r2, [r1, #2]
   124cc:	784b      	ldrb	r3, [r1, #1]
{
   124ce:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   124d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   124d4:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   124d6:	78eb      	ldrb	r3, [r5, #3]
   124d8:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   124da:	792b      	ldrb	r3, [r5, #4]
   124dc:	7243      	strb	r3, [r0, #9]
{
   124de:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   124e0:	3105      	adds	r1, #5
   124e2:	300a      	adds	r0, #10
   124e4:	f000 ff1c 	bl	13320 <BdaCpy>
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   124e8:	f105 010b 	add.w	r1, r5, #11
   124ec:	f104 0017 	add.w	r0, r4, #23
   124f0:	f000 ff16 	bl	13320 <BdaCpy>
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   124f4:	f105 0111 	add.w	r1, r5, #17
   124f8:	f104 001d 	add.w	r0, r4, #29
   124fc:	f000 ff10 	bl	13320 <BdaCpy>
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   12500:	7e29      	ldrb	r1, [r5, #24]
   12502:	7deb      	ldrb	r3, [r5, #23]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   12504:	88e2      	ldrh	r2, [r4, #6]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   12506:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1250a:	8223      	strh	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   1250c:	7ea9      	ldrb	r1, [r5, #26]
   1250e:	7e6b      	ldrb	r3, [r5, #25]
   12510:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   12514:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   12516:	7f29      	ldrb	r1, [r5, #28]
   12518:	7eeb      	ldrb	r3, [r5, #27]
   1251a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1251e:	82a3      	strh	r3, [r4, #20]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   12520:	7f69      	ldrb	r1, [r5, #29]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   12522:	7923      	ldrb	r3, [r4, #4]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   12524:	75a1      	strb	r1, [r4, #22]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   12526:	8022      	strh	r2, [r4, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   12528:	70e3      	strb	r3, [r4, #3]
}
   1252a:	bd38      	pop	{r3, r4, r5, pc}

0001252c <hciEvtParseGenDhKeyCmdCmpl>:
{
   1252c:	b510      	push	{r4, lr}
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   1252e:	460b      	mov	r3, r1
   12530:	f813 4b01 	ldrb.w	r4, [r3], #1
   12534:	7104      	strb	r4, [r0, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   12536:	f8d1 c001 	ldr.w	ip, [r1, #1]
   1253a:	689a      	ldr	r2, [r3, #8]
   1253c:	6859      	ldr	r1, [r3, #4]
   1253e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
   12542:	f8c0 e011 	str.w	lr, [r0, #17]
   12546:	f8c0 c005 	str.w	ip, [r0, #5]
   1254a:	f8c0 1009 	str.w	r1, [r0, #9]
   1254e:	f8c0 200d 	str.w	r2, [r0, #13]
   12552:	f8d3 c010 	ldr.w	ip, [r3, #16]
   12556:	6959      	ldr	r1, [r3, #20]
   12558:	699a      	ldr	r2, [r3, #24]
   1255a:	f8d3 e01c 	ldr.w	lr, [r3, #28]
   1255e:	f8c0 e021 	str.w	lr, [r0, #33]	; 0x21
   12562:	f8c0 c015 	str.w	ip, [r0, #21]
   12566:	f8c0 1019 	str.w	r1, [r0, #25]
   1256a:	f8c0 201d 	str.w	r2, [r0, #29]
  pMsg->hdr.status = pMsg->leGenDHKey.status;
   1256e:	70c4      	strb	r4, [r0, #3]
}
   12570:	bd10      	pop	{r4, pc}
   12572:	bf00      	nop

00012574 <hciEvtParseReadPubKeyCmdCmpl>:
{
   12574:	b570      	push	{r4, r5, r6, lr}
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   12576:	460b      	mov	r3, r1
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   12578:	1d42      	adds	r2, r0, #5
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   1257a:	f813 cb01 	ldrb.w	ip, [r3], #1
   1257e:	f880 c004 	strb.w	ip, [r0, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   12582:	3141      	adds	r1, #65	; 0x41
   12584:	681d      	ldr	r5, [r3, #0]
   12586:	685c      	ldr	r4, [r3, #4]
   12588:	f8d3 e008 	ldr.w	lr, [r3, #8]
   1258c:	68de      	ldr	r6, [r3, #12]
   1258e:	60d6      	str	r6, [r2, #12]
   12590:	3310      	adds	r3, #16
   12592:	428b      	cmp	r3, r1
   12594:	6015      	str	r5, [r2, #0]
   12596:	6054      	str	r4, [r2, #4]
   12598:	f8c2 e008 	str.w	lr, [r2, #8]
   1259c:	f102 0210 	add.w	r2, r2, #16
   125a0:	d1f0      	bne.n	12584 <hciEvtParseReadPubKeyCmdCmpl+0x10>
  pMsg->hdr.status = pMsg->leP256.status;
   125a2:	f880 c003 	strb.w	ip, [r0, #3]
}
   125a6:	bd70      	pop	{r4, r5, r6, pc}

000125a8 <hciEvtParseLeRandCmdCmpl>:
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   125a8:	460b      	mov	r3, r1
   125aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   125ae:	7102      	strb	r2, [r0, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   125b0:	f8d1 1001 	ldr.w	r1, [r1, #1]
   125b4:	685b      	ldr	r3, [r3, #4]
   125b6:	f8c0 3009 	str.w	r3, [r0, #9]
   125ba:	f8c0 1005 	str.w	r1, [r0, #5]
  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   125be:	70c2      	strb	r2, [r0, #3]
}
   125c0:	4770      	bx	lr
   125c2:	bf00      	nop

000125c4 <hciEvtParseLeEncryptCmdCmpl>:
{
   125c4:	b500      	push	{lr}
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   125c6:	460b      	mov	r3, r1
   125c8:	f813 2b01 	ldrb.w	r2, [r3], #1
   125cc:	7102      	strb	r2, [r0, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   125ce:	f8d1 e001 	ldr.w	lr, [r1, #1]
   125d2:	f8d3 c004 	ldr.w	ip, [r3, #4]
   125d6:	6899      	ldr	r1, [r3, #8]
   125d8:	68db      	ldr	r3, [r3, #12]
   125da:	f8c0 3011 	str.w	r3, [r0, #17]
   125de:	f8c0 e005 	str.w	lr, [r0, #5]
   125e2:	f8c0 c009 	str.w	ip, [r0, #9]
   125e6:	f8c0 100d 	str.w	r1, [r0, #13]
  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   125ea:	70c2      	strb	r2, [r0, #3]
}
   125ec:	f85d fb04 	ldr.w	pc, [sp], #4

000125f0 <hciEvtParseVendorSpec>:
  memcpy(pMsg->vendorSpec.param, p, len);
   125f0:	3004      	adds	r0, #4
   125f2:	f7f9 bd85 	b.w	c100 <memcpy>
   125f6:	bf00      	nop

000125f8 <hciEvtParseVendorSpecCmdCmpl>:
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   125f8:	f811 cc01 	ldrb.w	ip, [r1, #-1]
   125fc:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   12600:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12604:	8083      	strh	r3, [r0, #4]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   12606:	f811 3b01 	ldrb.w	r3, [r1], #1
   1260a:	70c3      	strb	r3, [r0, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   1260c:	3a04      	subs	r2, #4
   1260e:	3006      	adds	r0, #6
   12610:	f7f9 bd76 	b.w	c100 <memcpy>

00012614 <hciEvtParseLeLtkReq>:
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   12614:	460a      	mov	r2, r1
   12616:	f891 c001 	ldrb.w	ip, [r1, #1]
   1261a:	f812 3b02 	ldrb.w	r3, [r2], #2
   1261e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12622:	b29b      	uxth	r3, r3
   12624:	8083      	strh	r3, [r0, #4]
  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   12626:	f8d1 c002 	ldr.w	ip, [r1, #2]
   1262a:	6852      	ldr	r2, [r2, #4]
   1262c:	f8c0 200a 	str.w	r2, [r0, #10]
   12630:	f8c0 c006 	str.w	ip, [r0, #6]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   12634:	f891 c00b 	ldrb.w	ip, [r1, #11]
   12638:	7a8a      	ldrb	r2, [r1, #10]
  pMsg->hdr.param = pMsg->leLtkReq.handle;
   1263a:	8003      	strh	r3, [r0, #0]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   1263c:	eb02 230c 	add.w	r3, r2, ip, lsl #8
   12640:	81c3      	strh	r3, [r0, #14]
}
   12642:	4770      	bx	lr

00012644 <hciEvtParseReadLeRemoteFeatCmpl>:
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   12644:	780a      	ldrb	r2, [r1, #0]
   12646:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   12648:	f891 c002 	ldrb.w	ip, [r1, #2]
   1264c:	784b      	ldrb	r3, [r1, #1]
   1264e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   12652:	b29b      	uxth	r3, r3
   12654:	80c3      	strh	r3, [r0, #6]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   12656:	f8d1 c003 	ldr.w	ip, [r1, #3]
   1265a:	f8d1 1007 	ldr.w	r1, [r1, #7]
   1265e:	60c1      	str	r1, [r0, #12]
   12660:	f8c0 c008 	str.w	ip, [r0, #8]
  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   12664:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   12666:	70c2      	strb	r2, [r0, #3]
}
   12668:	4770      	bx	lr
   1266a:	bf00      	nop

0001266c <hciEvtParseReadChanMapCmdCmpl>:
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   1266c:	780a      	ldrb	r2, [r1, #0]
   1266e:	7102      	strb	r2, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   12670:	f891 c002 	ldrb.w	ip, [r1, #2]
   12674:	784b      	ldrb	r3, [r1, #1]
   12676:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1267a:	b29b      	uxth	r3, r3
   1267c:	80c3      	strh	r3, [r0, #6]
  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   1267e:	f8d1 c003 	ldr.w	ip, [r1, #3]
   12682:	f8c0 c008 	str.w	ip, [r0, #8]
   12686:	79c9      	ldrb	r1, [r1, #7]
   12688:	7301      	strb	r1, [r0, #12]
  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   1268a:	8003      	strh	r3, [r0, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   1268c:	70c2      	strb	r2, [r0, #3]
}
   1268e:	4770      	bx	lr

00012690 <hciEvtParseLeConnCmpl>:
{
   12690:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   12692:	780b      	ldrb	r3, [r1, #0]
   12694:	7103      	strb	r3, [r0, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   12696:	788a      	ldrb	r2, [r1, #2]
   12698:	784b      	ldrb	r3, [r1, #1]
{
   1269a:	460d      	mov	r5, r1
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1269c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   126a0:	80c3      	strh	r3, [r0, #6]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   126a2:	78eb      	ldrb	r3, [r5, #3]
   126a4:	7203      	strb	r3, [r0, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   126a6:	792b      	ldrb	r3, [r5, #4]
   126a8:	7243      	strb	r3, [r0, #9]
{
   126aa:	4604      	mov	r4, r0
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   126ac:	3105      	adds	r1, #5
   126ae:	300a      	adds	r0, #10
   126b0:	f000 fe36 	bl	13320 <BdaCpy>
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   126b4:	7b2a      	ldrb	r2, [r5, #12]
   126b6:	7aeb      	ldrb	r3, [r5, #11]
   126b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   126bc:	8223      	strh	r3, [r4, #16]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   126be:	7baa      	ldrb	r2, [r5, #14]
   126c0:	7b6b      	ldrb	r3, [r5, #13]
   126c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   126c6:	8263      	strh	r3, [r4, #18]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   126c8:	7c2a      	ldrb	r2, [r5, #16]
   126ca:	7beb      	ldrb	r3, [r5, #15]
   126cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   126d0:	82a3      	strh	r3, [r4, #20]
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   126d2:	2300      	movs	r3, #0
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   126d4:	7c68      	ldrb	r0, [r5, #17]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   126d6:	88e2      	ldrh	r2, [r4, #6]
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   126d8:	f8c4 3017 	str.w	r3, [r4, #23]
   126dc:	f8a4 301b 	strh.w	r3, [r4, #27]
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   126e0:	f8c4 301d 	str.w	r3, [r4, #29]
   126e4:	f8a4 3021 	strh.w	r3, [r4, #33]	; 0x21
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   126e8:	7923      	ldrb	r3, [r4, #4]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   126ea:	75a0      	strb	r0, [r4, #22]
  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   126ec:	8022      	strh	r2, [r4, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   126ee:	70e3      	strb	r3, [r4, #3]
}
   126f0:	bd38      	pop	{r3, r4, r5, pc}
   126f2:	bf00      	nop

000126f4 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   126f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126f8:	4688      	mov	r8, r1
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
  hciEvtCback_t cback = hciCb.evtCback;

  BSTREAM_TO_UINT8(numPkts, p);
  BSTREAM_TO_UINT16(opcode, p);
   126fa:	7843      	ldrb	r3, [r0, #1]
   126fc:	7881      	ldrb	r1, [r0, #2]
  hciEvtCback_t cback = hciCb.evtCback;
   126fe:	4a9e      	ldr	r2, [pc, #632]	; (12978 <hciEvtProcessCmdCmpl+0x284>)
  BSTREAM_TO_UINT8(numPkts, p);
   12700:	7806      	ldrb	r6, [r0, #0]
  hciEvtCback_t cback = hciCb.evtCback;
   12702:	6897      	ldr	r7, [r2, #8]
  BSTREAM_TO_UINT16(opcode, p);
   12704:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   12708:	b29b      	uxth	r3, r3

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   1270a:	f242 0157 	movw	r1, #8279	; 0x2057
   1270e:	428b      	cmp	r3, r1
  BSTREAM_TO_UINT16(opcode, p);
   12710:	f100 0503 	add.w	r5, r0, #3
  switch (opcode)
   12714:	f200 808d 	bhi.w	12832 <hciEvtProcessCmdCmpl+0x13e>
   12718:	f242 0109 	movw	r1, #8201	; 0x2009
   1271c:	428b      	cmp	r3, r1
   1271e:	d955      	bls.n	127cc <hciEvtProcessCmdCmpl+0xd8>
   12720:	f5a3 5000 	sub.w	r0, r3, #8192	; 0x2000
   12724:	380a      	subs	r0, #10
   12726:	284d      	cmp	r0, #77	; 0x4d
   12728:	f200 8083 	bhi.w	12832 <hciEvtProcessCmdCmpl+0x13e>
   1272c:	e8df f010 	tbh	[pc, r0, lsl #1]
   12730:	00810114 	.word	0x00810114
   12734:	0081010f 	.word	0x0081010f
   12738:	0081011e 	.word	0x0081011e
   1273c:	00810081 	.word	0x00810081
   12740:	00810081 	.word	0x00810081
   12744:	010a0081 	.word	0x010a0081
   12748:	01040081 	.word	0x01040081
   1274c:	008100fe 	.word	0x008100fe
   12750:	00f400f9 	.word	0x00f400f9
   12754:	00810081 	.word	0x00810081
   12758:	00810081 	.word	0x00810081
   1275c:	00ea00ef 	.word	0x00ea00ef
   12760:	00e000e5 	.word	0x00e000e5
   12764:	008100db 	.word	0x008100db
   12768:	00d60081 	.word	0x00d60081
   1276c:	00cc00d1 	.word	0x00cc00d1
   12770:	00c70081 	.word	0x00c70081
   12774:	00bd00c2 	.word	0x00bd00c2
   12778:	00b80081 	.word	0x00b80081
   1277c:	00ae00b3 	.word	0x00ae00b3
   12780:	00810081 	.word	0x00810081
   12784:	00810081 	.word	0x00810081
   12788:	00810081 	.word	0x00810081
   1278c:	00a90081 	.word	0x00a90081
   12790:	00810081 	.word	0x00810081
   12794:	00810081 	.word	0x00810081
   12798:	00810081 	.word	0x00810081
   1279c:	008100a4 	.word	0x008100a4
   127a0:	0081009f 	.word	0x0081009f
   127a4:	00810081 	.word	0x00810081
   127a8:	00810081 	.word	0x00810081
   127ac:	00810081 	.word	0x00810081
   127b0:	00810081 	.word	0x00810081
   127b4:	00810081 	.word	0x00810081
   127b8:	00810081 	.word	0x00810081
   127bc:	00810081 	.word	0x00810081
   127c0:	00810081 	.word	0x00810081
   127c4:	0095009a 	.word	0x0095009a
   127c8:	01190090 	.word	0x01190090
   127cc:	f640 427c 	movw	r2, #3196	; 0xc7c
   127d0:	4293      	cmp	r3, r2
   127d2:	d029      	beq.n	12828 <hciEvtProcessCmdCmpl+0x134>
   127d4:	f241 4205 	movw	r2, #5125	; 0x1405
   127d8:	4293      	cmp	r3, r2
   127da:	d11c      	bne.n	12816 <hciEvtProcessCmdCmpl+0x122>
   127dc:	f04f 0a07 	mov.w	sl, #7
   127e0:	200a      	movs	r0, #10
  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
    break;

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   127e2:	46d1      	mov	r9, sl

  /* if callback is executed for this event */
  if (cbackEvt != 0)
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   127e4:	f005 f9fc 	bl	17be0 <WsfBufAlloc>
   127e8:	4604      	mov	r4, r0
   127ea:	b178      	cbz	r0, 1280c <hciEvtProcessCmdCmpl+0x118>
      pMsg->hdr.param = 0;
      pMsg->hdr.event = cbackEvt;
      pMsg->hdr.status = 0;

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   127ec:	4b63      	ldr	r3, [pc, #396]	; (1297c <hciEvtProcessCmdCmpl+0x288>)
      pMsg->hdr.event = cbackEvt;
   127ee:	f880 9002 	strb.w	r9, [r0, #2]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   127f2:	4629      	mov	r1, r5
   127f4:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
      pMsg->hdr.param = 0;
   127f8:	2300      	movs	r3, #0
   127fa:	8003      	strh	r3, [r0, #0]
      pMsg->hdr.status = 0;
   127fc:	70c3      	strb	r3, [r0, #3]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   127fe:	4642      	mov	r2, r8
   12800:	47a8      	blx	r5

      /* execute callback */
      (*cback)(pMsg);
   12802:	4620      	mov	r0, r4
   12804:	47b8      	blx	r7

      /* free buffer */
      WsfBufFree(pMsg);
   12806:	4620      	mov	r0, r4
   12808:	f005 fa1a 	bl	17c40 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   1280c:	4630      	mov	r0, r6
}
   1280e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hciCmdRecvCmpl(numPkts);
   12812:	f7fd be35 	b.w	10480 <hciCmdRecvCmpl>
  switch (opcode)
   12816:	f640 422d 	movw	r2, #3117	; 0xc2d
   1281a:	4293      	cmp	r3, r2
   1281c:	d1f6      	bne.n	1280c <hciEvtProcessCmdCmpl+0x118>
   1281e:	f04f 0a09 	mov.w	sl, #9
   12822:	2008      	movs	r0, #8
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   12824:	46d1      	mov	r9, sl
   12826:	e7dd      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12828:	f04f 0a27 	mov.w	sl, #39	; 0x27
   1282c:	2008      	movs	r0, #8
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   1282e:	46d1      	mov	r9, sl
   12830:	e7d8      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   12832:	0a9a      	lsrs	r2, r3, #10
   12834:	2a3f      	cmp	r2, #63	; 0x3f
   12836:	d1e9      	bne.n	1280c <hciEvtProcessCmdCmpl+0x118>
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   12838:	4618      	mov	r0, r3
   1283a:	4642      	mov	r2, r8
   1283c:	4629      	mov	r1, r5
   1283e:	f7fd fdc7 	bl	103d0 <hciCoreVsCmdCmplRcvd>
  if (cbackEvt != 0)
   12842:	4681      	mov	r9, r0
   12844:	2800      	cmp	r0, #0
   12846:	d0e1      	beq.n	1280c <hciEvtProcessCmdCmpl+0x118>
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   12848:	4b4d      	ldr	r3, [pc, #308]	; (12980 <hciEvtProcessCmdCmpl+0x28c>)
   1284a:	46ca      	mov	sl, r9
   1284c:	5c18      	ldrb	r0, [r3, r0]
   1284e:	e7c9      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12850:	f04f 0a41 	mov.w	sl, #65	; 0x41
   12854:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_CONN_CTE_REQ_ENABLE_CMD_CMPL_CBACK_EVT;
   12856:	46d1      	mov	r9, sl
   12858:	e7c4      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1285a:	f04f 0a40 	mov.w	sl, #64	; 0x40
   1285e:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_CONN_CTE_TX_PARAMS_CMD_CMPL_CBACK_EVT;
   12860:	46d1      	mov	r9, sl
   12862:	e7bf      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12864:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
   12868:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_CONN_CTE_RX_PARAMS_CMD_CMPL_CBACK_EVT;
   1286a:	46d1      	mov	r9, sl
   1286c:	e7ba      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1286e:	f04f 0a36 	mov.w	sl, #54	; 0x36
   12872:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   12874:	46d1      	mov	r9, sl
   12876:	e7b5      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12878:	f04f 0a38 	mov.w	sl, #56	; 0x38
   1287c:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   1287e:	46d1      	mov	r9, sl
   12880:	e7b0      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12882:	f04f 0a37 	mov.w	sl, #55	; 0x37
   12886:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   12888:	46d1      	mov	r9, sl
   1288a:	e7ab      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1288c:	f04f 0a2a 	mov.w	sl, #42	; 0x2a
   12890:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   12892:	46d1      	mov	r9, sl
   12894:	e7a6      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12896:	f04f 0a29 	mov.w	sl, #41	; 0x29
   1289a:	200a      	movs	r0, #10
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   1289c:	46d1      	mov	r9, sl
   1289e:	e7a1      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128a0:	f04f 0a22 	mov.w	sl, #34	; 0x22
   128a4:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   128a6:	46d1      	mov	r9, sl
   128a8:	e79c      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128aa:	f04f 0a1a 	mov.w	sl, #26
   128ae:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   128b0:	46d1      	mov	r9, sl
   128b2:	e797      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128b4:	f04f 0a19 	mov.w	sl, #25
   128b8:	200c      	movs	r0, #12
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   128ba:	46d1      	mov	r9, sl
   128bc:	e792      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128be:	f04f 0a18 	mov.w	sl, #24
   128c2:	200c      	movs	r0, #12
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   128c4:	46d1      	mov	r9, sl
   128c6:	e78d      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128c8:	f04f 0a17 	mov.w	sl, #23
   128cc:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   128ce:	46d1      	mov	r9, sl
   128d0:	e788      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128d2:	f04f 0a16 	mov.w	sl, #22
   128d6:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   128d8:	46d1      	mov	r9, sl
   128da:	e783      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128dc:	f04f 0a15 	mov.w	sl, #21
   128e0:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   128e2:	46d1      	mov	r9, sl
   128e4:	e77e      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128e6:	f04f 0a20 	mov.w	sl, #32
   128ea:	2006      	movs	r0, #6
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   128ec:	46d1      	mov	r9, sl
   128ee:	e779      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128f0:	f04f 0a1f 	mov.w	sl, #31
   128f4:	200a      	movs	r0, #10
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   128f6:	46d1      	mov	r9, sl
   128f8:	e774      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   128fa:	f04f 0a21 	mov.w	sl, #33	; 0x21
   128fe:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   12900:	46d1      	mov	r9, sl
   12902:	e76f      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12904:	f04f 0a1e 	mov.w	sl, #30
   12908:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   1290a:	46d1      	mov	r9, sl
   1290c:	e76a      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1290e:	f04f 0a1d 	mov.w	sl, #29
   12912:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   12914:	46d1      	mov	r9, sl
   12916:	e765      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12918:	f04f 0a0d 	mov.w	sl, #13
   1291c:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   1291e:	46d1      	mov	r9, sl
   12920:	e760      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12922:	f04f 0a0c 	mov.w	sl, #12
   12926:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   12928:	46d1      	mov	r9, sl
   1292a:	e75b      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
    cback = hciCb.secCback;
   1292c:	f04f 0a1c 	mov.w	sl, #28
   12930:	68d7      	ldr	r7, [r2, #12]
   12932:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   12934:	46d1      	mov	r9, sl
   12936:	e755      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
    cback = hciCb.secCback;
   12938:	f04f 0a1b 	mov.w	sl, #27
   1293c:	68d7      	ldr	r7, [r2, #12]
   1293e:	2016      	movs	r0, #22
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   12940:	46d1      	mov	r9, sl
   12942:	e74f      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12944:	f04f 0a08 	mov.w	sl, #8
   12948:	200e      	movs	r0, #14
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   1294a:	46d1      	mov	r9, sl
   1294c:	e74a      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1294e:	f04f 0a34 	mov.w	sl, #52	; 0x34
   12952:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_SCAN_ENABLE_CMD_CMPL_CBACK_EVT;
   12954:	46d1      	mov	r9, sl
   12956:	e745      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12958:	f04f 0a35 	mov.w	sl, #53	; 0x35
   1295c:	2004      	movs	r0, #4
    cbackEvt = HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT;
   1295e:	46d1      	mov	r9, sl
   12960:	e740      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   12962:	f04f 0a42 	mov.w	sl, #66	; 0x42
   12966:	2008      	movs	r0, #8
    cbackEvt = HCI_LE_CONN_CTE_RSP_ENABLE_CMD_CMPL_CBACK_EVT;
   12968:	46d1      	mov	r9, sl
   1296a:	e73b      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
  switch (opcode)
   1296c:	f04f 0a05 	mov.w	sl, #5
   12970:	2006      	movs	r0, #6
   12972:	46d1      	mov	r9, sl
   12974:	e736      	b.n	127e4 <hciEvtProcessCmdCmpl+0xf0>
   12976:	bf00      	nop
   12978:	100059bc 	.word	0x100059bc
   1297c:	00024c10 	.word	0x00024c10
   12980:	00024bcc 	.word	0x00024bcc

00012984 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   12984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   12988:	4605      	mov	r5, r0
  hciEvtCback_t cback = hciCb.evtCback;
   1298a:	4e89      	ldr	r6, [pc, #548]	; (12bb0 <hciEvtProcessMsg+0x22c>)
  BSTREAM_TO_UINT8(evt, pEvt);
   1298c:	f815 3b02 	ldrb.w	r3, [r5], #2
  hciEvtCback_t cback = hciCb.evtCback;
   12990:	68b7      	ldr	r7, [r6, #8]
  BSTREAM_TO_UINT8(len, pEvt);
   12992:	f890 8001 	ldrb.w	r8, [r0, #1]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   12996:	2b57      	cmp	r3, #87	; 0x57
   12998:	d831      	bhi.n	129fe <hciEvtProcessMsg+0x7a>
   1299a:	2b04      	cmp	r3, #4
   1299c:	d94d      	bls.n	12a3a <hciEvtProcessMsg+0xb6>
   1299e:	3b05      	subs	r3, #5
   129a0:	4604      	mov	r4, r0
   129a2:	2b52      	cmp	r3, #82	; 0x52
   129a4:	d849      	bhi.n	12a3a <hciEvtProcessMsg+0xb6>
   129a6:	e8df f003 	tbb	[pc, r3]
   129aa:	4853      	.short	0x4853
   129ac:	48487048 	.word	0x48487048
   129b0:	82487948 	.word	0x82487948
   129b4:	4848958c 	.word	0x4848958c
   129b8:	4848489e 	.word	0x4848489e
   129bc:	a6484848 	.word	0xa6484848
   129c0:	48484848 	.word	0x48484848
   129c4:	48484848 	.word	0x48484848
   129c8:	48484848 	.word	0x48484848
   129cc:	48484848 	.word	0x48484848
   129d0:	48484848 	.word	0x48484848
   129d4:	4848ab48 	.word	0x4848ab48
   129d8:	48484848 	.word	0x48484848
   129dc:	48484848 	.word	0x48484848
   129e0:	b4484848 	.word	0xb4484848
   129e4:	48484848 	.word	0x48484848
   129e8:	48484848 	.word	0x48484848
   129ec:	48484848 	.word	0x48484848
   129f0:	48484848 	.word	0x48484848
   129f4:	48484848 	.word	0x48484848
   129f8:	48484848 	.word	0x48484848
   129fc:	4a          	.byte	0x4a
   129fd:	00          	.byte	0x00
   129fe:	2bff      	cmp	r3, #255	; 0xff
   12a00:	d11b      	bne.n	12a3a <hciEvtProcessMsg+0xb6>
      /* for nonstandard controllers that send a vendor-specific event instead
       * of a command complete event
       */
      hciCmdRecvCmpl(1);
#endif
      hciEvtStats.numVendorSpecEvt++;
   12a02:	4a6c      	ldr	r2, [pc, #432]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12a04:	4e6c      	ldr	r6, [pc, #432]	; (12bb8 <hciEvtProcessMsg+0x234>)
   12a06:	8a93      	ldrh	r3, [r2, #20]
   12a08:	3301      	adds	r3, #1
   12a0a:	8293      	strh	r3, [r2, #20]
   12a0c:	2006      	movs	r0, #6
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   12a0e:	f04f 0913 	mov.w	r9, #19

  /* if callback is executed for this event */
  if (cbackEvt != 0)
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   12a12:	f005 f8e5 	bl	17be0 <WsfBufAlloc>
   12a16:	4604      	mov	r4, r0
   12a18:	b178      	cbz	r0, 12a3a <hciEvtProcessMsg+0xb6>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   12a1a:	2300      	movs	r3, #0
      pMsg->hdr.event = cbackEvt;
      pMsg->hdr.status = 0;

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   12a1c:	4642      	mov	r2, r8
      pMsg->hdr.param = 0;
   12a1e:	8023      	strh	r3, [r4, #0]
      pMsg->hdr.status = 0;
   12a20:	70e3      	strb	r3, [r4, #3]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   12a22:	4629      	mov	r1, r5
      pMsg->hdr.event = cbackEvt;
   12a24:	f884 9002 	strb.w	r9, [r4, #2]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   12a28:	47b0      	blx	r6

      /* execute callback */
      (*cback)(pMsg);
   12a2a:	4620      	mov	r0, r4
   12a2c:	47b8      	blx	r7

      /* free buffer */
      WsfBufFree(pMsg);
   12a2e:	4620      	mov	r0, r4
   12a30:	f005 f906 	bl	17c40 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   12a34:	f1b9 0f03 	cmp.w	r9, #3
   12a38:	d01e      	beq.n	12a78 <hciEvtProcessMsg+0xf4>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
      hciCoreConnClose(handle);
    }
  }
}
   12a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hciEvtStats.numAuthToEvt++;
   12a3e:	4a5d      	ldr	r2, [pc, #372]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12a40:	4e5e      	ldr	r6, [pc, #376]	; (12bbc <hciEvtProcessMsg+0x238>)
   12a42:	8ad3      	ldrh	r3, [r2, #22]
   12a44:	3301      	adds	r3, #1
   12a46:	82d3      	strh	r3, [r2, #22]
   12a48:	2006      	movs	r0, #6
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   12a4a:	f04f 0928 	mov.w	r9, #40	; 0x28
   12a4e:	e7e0      	b.n	12a12 <hciEvtProcessMsg+0x8e>
      hciEvtStats.numDiscCmplEvt++;
   12a50:	4a58      	ldr	r2, [pc, #352]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12a52:	8813      	ldrh	r3, [r2, #0]
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   12a54:	200a      	movs	r0, #10
      hciEvtStats.numDiscCmplEvt++;
   12a56:	3301      	adds	r3, #1
   12a58:	8013      	strh	r3, [r2, #0]
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   12a5a:	f005 f8c1 	bl	17be0 <WsfBufAlloc>
   12a5e:	4604      	mov	r4, r0
   12a60:	b150      	cbz	r0, 12a78 <hciEvtProcessMsg+0xf4>
      pMsg->hdr.param = 0;
   12a62:	f44f 3340 	mov.w	r3, #196608	; 0x30000
   12a66:	6003      	str	r3, [r0, #0]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   12a68:	4642      	mov	r2, r8
   12a6a:	4629      	mov	r1, r5
   12a6c:	f7ff faf0 	bl	12050 <hciEvtParseDisconnectCmpl>
      (*cback)(pMsg);
   12a70:	47b8      	blx	r7
      WsfBufFree(pMsg);
   12a72:	4620      	mov	r0, r4
   12a74:	f005 f8e4 	bl	17c40 <WsfBufFree>
      BYTES_TO_UINT16(handle, (pEvt + 1));
   12a78:	78ab      	ldrb	r3, [r5, #2]
   12a7a:	7868      	ldrb	r0, [r5, #1]
   12a7c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      hciCoreConnClose(handle);
   12a80:	b280      	uxth	r0, r0
}
   12a82:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      hciCoreConnClose(handle);
   12a86:	f7ff b897 	b.w	11bb8 <hciCoreConnClose>
      hciEvtStats.numEncChangeEvt++;
   12a8a:	4a4a      	ldr	r2, [pc, #296]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12a8c:	4e4c      	ldr	r6, [pc, #304]	; (12bc0 <hciEvtProcessMsg+0x23c>)
   12a8e:	8853      	ldrh	r3, [r2, #2]
   12a90:	3301      	adds	r3, #1
   12a92:	8053      	strh	r3, [r2, #2]
   12a94:	200a      	movs	r0, #10
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   12a96:	f04f 090f 	mov.w	r9, #15
   12a9a:	e7ba      	b.n	12a12 <hciEvtProcessMsg+0x8e>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   12a9c:	4a45      	ldr	r2, [pc, #276]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12a9e:	4e49      	ldr	r6, [pc, #292]	; (12bc4 <hciEvtProcessMsg+0x240>)
   12aa0:	8893      	ldrh	r3, [r2, #4]
   12aa2:	3301      	adds	r3, #1
   12aa4:	8093      	strh	r3, [r2, #4]
   12aa6:	200e      	movs	r0, #14
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   12aa8:	f04f 090a 	mov.w	r9, #10
   12aac:	e7b1      	b.n	12a12 <hciEvtProcessMsg+0x8e>
      hciEvtStats.numCmdCmplEvt++;
   12aae:	4a41      	ldr	r2, [pc, #260]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12ab0:	88d3      	ldrh	r3, [r2, #6]
   12ab2:	3301      	adds	r3, #1
      hciEvtProcessCmdCmpl(pEvt, len);
   12ab4:	4641      	mov	r1, r8
   12ab6:	4628      	mov	r0, r5
      hciEvtStats.numCmdCmplEvt++;
   12ab8:	80d3      	strh	r3, [r2, #6]
}
   12aba:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      hciEvtProcessCmdCmpl(pEvt, len);
   12abe:	f7ff be19 	b.w	126f4 <hciEvtProcessCmdCmpl>
      hciEvtStats.numCmdStatusEvt++;
   12ac2:	4a3c      	ldr	r2, [pc, #240]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12ac4:	8913      	ldrh	r3, [r2, #8]
   12ac6:	3301      	adds	r3, #1
   12ac8:	8113      	strh	r3, [r2, #8]
  hciCmdRecvCmpl(numPkts);
   12aca:	78c0      	ldrb	r0, [r0, #3]
}
   12acc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hciCmdRecvCmpl(numPkts);
   12ad0:	f7fd bcd6 	b.w	10480 <hciCmdRecvCmpl>
      hciEvtStats.numHwErrorEvt++;
   12ad4:	4a37      	ldr	r2, [pc, #220]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12ad6:	4e3c      	ldr	r6, [pc, #240]	; (12bc8 <hciEvtProcessMsg+0x244>)
   12ad8:	8953      	ldrh	r3, [r2, #10]
   12ada:	3301      	adds	r3, #1
   12adc:	8153      	strh	r3, [r2, #10]
   12ade:	2006      	movs	r0, #6
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   12ae0:	f04f 0914 	mov.w	r9, #20
   12ae4:	e795      	b.n	12a12 <hciEvtProcessMsg+0x8e>
      hciCoreNumCmplPkts(pEvt);
   12ae6:	4628      	mov	r0, r5
   12ae8:	f7ff fa06 	bl	11ef8 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   12aec:	4a31      	ldr	r2, [pc, #196]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12aee:	8993      	ldrh	r3, [r2, #12]
   12af0:	3301      	adds	r3, #1
   12af2:	8193      	strh	r3, [r2, #12]
  if (cbackEvt != 0)
   12af4:	e7a1      	b.n	12a3a <hciEvtProcessMsg+0xb6>
      hciEvtStats.numDataBufOverflowEvt++;
   12af6:	4a2f      	ldr	r2, [pc, #188]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12af8:	89d3      	ldrh	r3, [r2, #14]
   12afa:	3301      	adds	r3, #1
   12afc:	81d3      	strh	r3, [r2, #14]
  if (cbackEvt != 0)
   12afe:	e79c      	b.n	12a3a <hciEvtProcessMsg+0xb6>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   12b00:	4a2c      	ldr	r2, [pc, #176]	; (12bb4 <hciEvtProcessMsg+0x230>)
   12b02:	4e32      	ldr	r6, [pc, #200]	; (12bcc <hciEvtProcessMsg+0x248>)
   12b04:	8a13      	ldrh	r3, [r2, #16]
   12b06:	3301      	adds	r3, #1
   12b08:	8213      	strh	r3, [r2, #16]
   12b0a:	2008      	movs	r0, #8
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   12b0c:	f04f 090e 	mov.w	r9, #14
   12b10:	e77f      	b.n	12a12 <hciEvtProcessMsg+0x8e>
      hciEvtStats.numLeMetaEvt++;
   12b12:	4a28      	ldr	r2, [pc, #160]	; (12bb4 <hciEvtProcessMsg+0x230>)
      BSTREAM_TO_UINT8(subEvt, pEvt);
   12b14:	f890 9002 	ldrb.w	r9, [r0, #2]
      hciEvtStats.numLeMetaEvt++;
   12b18:	8a53      	ldrh	r3, [r2, #18]
      BSTREAM_TO_UINT8(subEvt, pEvt);
   12b1a:	1cc5      	adds	r5, r0, #3
      hciEvtStats.numLeMetaEvt++;
   12b1c:	3301      	adds	r3, #1
      APP_TRACE_INFO1("LE meta sub event = 0x%x", subEvt);
   12b1e:	482c      	ldr	r0, [pc, #176]	; (12bd0 <hciEvtProcessMsg+0x24c>)
      hciEvtStats.numLeMetaEvt++;
   12b20:	8253      	strh	r3, [r2, #18]
      APP_TRACE_INFO1("LE meta sub event = 0x%x", subEvt);
   12b22:	4649      	mov	r1, r9
   12b24:	f005 fc3c 	bl	183a0 <WsfTrace>
      switch (subEvt)
   12b28:	f109 33ff 	add.w	r3, r9, #4294967295
   12b2c:	2b16      	cmp	r3, #22
   12b2e:	d884      	bhi.n	12a3a <hciEvtProcessMsg+0xb6>
   12b30:	a201      	add	r2, pc, #4	; (adr r2, 12b38 <hciEvtProcessMsg+0x1b4>)
   12b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12b36:	bf00      	nop
   12b38:	00012c79 	.word	0x00012c79
   12b3c:	00012be1 	.word	0x00012be1
   12b40:	000130b1 	.word	0x000130b1
   12b44:	00012ba7 	.word	0x00012ba7
   12b48:	00012b9f 	.word	0x00012b9f
   12b4c:	00012b95 	.word	0x00012b95
   12b50:	00013035 	.word	0x00013035
   12b54:	00013029 	.word	0x00013029
   12b58:	0001301f 	.word	0x0001301f
   12b5c:	0001300f 	.word	0x0001300f
   12b60:	0001303f 	.word	0x0001303f
   12b64:	00012e4d 	.word	0x00012e4d
   12b68:	00012c9b 	.word	0x00012c9b
   12b6c:	00012c91 	.word	0x00012c91
   12b70:	00012e75 	.word	0x00012e75
   12b74:	00012e6b 	.word	0x00012e6b
   12b78:	00012e61 	.word	0x00012e61
   12b7c:	00012e57 	.word	0x00012e57
   12b80:	00012f53 	.word	0x00012f53
   12b84:	00012a3b 	.word	0x00012a3b
   12b88:	00012ecf 	.word	0x00012ecf
   12b8c:	00012f81 	.word	0x00012f81
   12b90:	00012c87 	.word	0x00012c87
   12b94:	4e0f      	ldr	r6, [pc, #60]	; (12bd4 <hciEvtProcessMsg+0x250>)
   12b96:	200e      	movs	r0, #14
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   12b98:	f04f 0923 	mov.w	r9, #35	; 0x23
   12b9c:	e739      	b.n	12a12 <hciEvtProcessMsg+0x8e>
   12b9e:	2010      	movs	r0, #16
   12ba0:	4e0d      	ldr	r6, [pc, #52]	; (12bd8 <hciEvtProcessMsg+0x254>)
   12ba2:	4681      	mov	r9, r0
   12ba4:	e735      	b.n	12a12 <hciEvtProcessMsg+0x8e>
   12ba6:	4e0d      	ldr	r6, [pc, #52]	; (12bdc <hciEvtProcessMsg+0x258>)
   12ba8:	2010      	movs	r0, #16
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   12baa:	f04f 090b 	mov.w	r9, #11
   12bae:	e730      	b.n	12a12 <hciEvtProcessMsg+0x8e>
   12bb0:	100059bc 	.word	0x100059bc
   12bb4:	10005974 	.word	0x10005974
   12bb8:	000125f1 	.word	0x000125f1
   12bbc:	00012345 	.word	0x00012345
   12bc0:	00012179 	.word	0x00012179
   12bc4:	000120f5 	.word	0x000120f5
   12bc8:	000121a1 	.word	0x000121a1
   12bcc:	00012161 	.word	0x00012161
   12bd0:	00024b48 	.word	0x00024b48
   12bd4:	000122ad 	.word	0x000122ad
   12bd8:	00012615 	.word	0x00012615
   12bdc:	00012645 	.word	0x00012645
  BSTREAM_TO_UINT8(i, p);
   12be0:	f894 8003 	ldrb.w	r8, [r4, #3]
  if (i > HCI_MAX_REPORTS)
   12be4:	f1b8 0f0f 	cmp.w	r8, #15
   12be8:	f63f af27 	bhi.w	12a3a <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   12bec:	203b      	movs	r0, #59	; 0x3b
   12bee:	f004 fff7 	bl	17be0 <WsfBufAlloc>
   12bf2:	4605      	mov	r5, r0
   12bf4:	2800      	cmp	r0, #0
   12bf6:	f43f af20 	beq.w	12a3a <hciEvtProcessMsg+0xb6>
    while (i-- > 0)
   12bfa:	f108 37ff 	add.w	r7, r8, #4294967295
   12bfe:	b2ff      	uxtb	r7, r7
   12c00:	f1b8 0f00 	cmp.w	r8, #0
   12c04:	f000 815e 	beq.w	12ec4 <hciEvtProcessMsg+0x540>
  BSTREAM_TO_UINT8(i, p);
   12c08:	3404      	adds	r4, #4
      BSTREAM_TO_BDA(pMsg->addr, p);
   12c0a:	f100 0a0c 	add.w	sl, r0, #12
      pMsg->pData = (uint8_t *) (pMsg + 1);
   12c0e:	f100 091c 	add.w	r9, r0, #28
      pMsg->directAddrType = 0;
   12c12:	f04f 0800 	mov.w	r8, #0
   12c16:	e01c      	b.n	12c52 <hciEvtProcessMsg+0x2ce>
      memcpy(pMsg->pData, p, pMsg->len);
   12c18:	4621      	mov	r1, r4
   12c1a:	465a      	mov	r2, fp
      pMsg->pData = (uint8_t *) (pMsg + 1);
   12c1c:	f8c5 9004 	str.w	r9, [r5, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   12c20:	f7f9 fa6e 	bl	c100 <memcpy>
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   12c24:	f814 100b 	ldrb.w	r1, [r4, fp]
   12c28:	7269      	strb	r1, [r5, #9]
      pMsg->hdr.param = 0;
   12c2a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
   12c2e:	602b      	str	r3, [r5, #0]
    while (i-- > 0)
   12c30:	3f01      	subs	r7, #1
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   12c32:	68b3      	ldr	r3, [r6, #8]
      pMsg->directAddrType = 0;
   12c34:	f885 8012 	strb.w	r8, [r5, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   12c38:	f8c5 8013 	str.w	r8, [r5, #19]
   12c3c:	f8a5 8017 	strh.w	r8, [r5, #23]
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   12c40:	4628      	mov	r0, r5
    while (i-- > 0)
   12c42:	b2ff      	uxtb	r7, r7
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   12c44:	4798      	blx	r3
      p += pMsg->len;
   12c46:	445c      	add	r4, fp
    while (i-- > 0)
   12c48:	2fff      	cmp	r7, #255	; 0xff
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   12c4a:	f104 0401 	add.w	r4, r4, #1
    while (i-- > 0)
   12c4e:	f000 8139 	beq.w	12ec4 <hciEvtProcessMsg+0x540>
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   12c52:	7823      	ldrb	r3, [r4, #0]
   12c54:	72ab      	strb	r3, [r5, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   12c56:	7863      	ldrb	r3, [r4, #1]
   12c58:	72eb      	strb	r3, [r5, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   12c5a:	1ca1      	adds	r1, r4, #2
   12c5c:	4650      	mov	r0, sl
   12c5e:	f000 fb5f 	bl	13320 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->len, p);
   12c62:	f894 b008 	ldrb.w	fp, [r4, #8]
   12c66:	f885 b008 	strb.w	fp, [r5, #8]
      if (pMsg->len > HCI_ADV_DATA_LEN)
   12c6a:	f1bb 0f1f 	cmp.w	fp, #31
      memcpy(pMsg->pData, p, pMsg->len);
   12c6e:	4648      	mov	r0, r9
      BSTREAM_TO_UINT8(pMsg->len, p);
   12c70:	f104 0409 	add.w	r4, r4, #9
      if (pMsg->len > HCI_ADV_DATA_LEN)
   12c74:	d9d0      	bls.n	12c18 <hciEvtProcessMsg+0x294>
   12c76:	e125      	b.n	12ec4 <hciEvtProcessMsg+0x540>
          if (*pEvt == HCI_SUCCESS)
   12c78:	78e3      	ldrb	r3, [r4, #3]
   12c7a:	2b00      	cmp	r3, #0
   12c7c:	f000 8238 	beq.w	130f0 <hciEvtProcessMsg+0x76c>
   12c80:	4eb6      	ldr	r6, [pc, #728]	; (12f5c <hciEvtProcessMsg+0x5d8>)
   12c82:	2024      	movs	r0, #36	; 0x24
   12c84:	e6c5      	b.n	12a12 <hciEvtProcessMsg+0x8e>
}
   12c86:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        APP_TRACE_INFO0("cte req failed....");
   12c8a:	48b5      	ldr	r0, [pc, #724]	; (12f60 <hciEvtProcessMsg+0x5dc>)
   12c8c:	f005 bb88 	b.w	183a0 <WsfTrace>
  if (cbackEvt != 0)
   12c90:	4eb4      	ldr	r6, [pc, #720]	; (12f64 <hciEvtProcessMsg+0x5e0>)
   12c92:	2016      	movs	r0, #22
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   12c94:	f04f 0930 	mov.w	r9, #48	; 0x30
   12c98:	e6bb      	b.n	12a12 <hciEvtProcessMsg+0x8e>
  i = *p;
   12c9a:	78e2      	ldrb	r2, [r4, #3]
  if (i > HCI_MAX_REPORTS)
   12c9c:	2a0f      	cmp	r2, #15
   12c9e:	f63f aecc 	bhi.w	12a3a <hciEvtProcessMsg+0xb6>
  ptr = p + 1;
   12ca2:	1d25      	adds	r5, r4, #4
  while (i-- > 0)
   12ca4:	2a00      	cmp	r2, #0
   12ca6:	f000 822d 	beq.w	13104 <hciEvtProcessMsg+0x780>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12caa:	7ee0      	ldrb	r0, [r4, #27]
   12cac:	f104 031c 	add.w	r3, r4, #28
  while (i-- > 0)
   12cb0:	2a01      	cmp	r2, #1
    ptr += dataLen;
   12cb2:	4403      	add	r3, r0
  while (i-- > 0)
   12cb4:	d078      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12cb6:	7dd9      	ldrb	r1, [r3, #23]
   12cb8:	4288      	cmp	r0, r1
   12cba:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12cbe:	bf38      	it	cc
   12cc0:	4608      	movcc	r0, r1
  while (i-- > 0)
   12cc2:	2a02      	cmp	r2, #2
    ptr += dataLen;
   12cc4:	440b      	add	r3, r1
  while (i-- > 0)
   12cc6:	d06f      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12cc8:	7dd9      	ldrb	r1, [r3, #23]
   12cca:	4288      	cmp	r0, r1
   12ccc:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12cd0:	bf38      	it	cc
   12cd2:	4608      	movcc	r0, r1
  while (i-- > 0)
   12cd4:	2a03      	cmp	r2, #3
    ptr += dataLen;
   12cd6:	440b      	add	r3, r1
  while (i-- > 0)
   12cd8:	d066      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12cda:	7dd9      	ldrb	r1, [r3, #23]
   12cdc:	4288      	cmp	r0, r1
   12cde:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12ce2:	bf38      	it	cc
   12ce4:	4608      	movcc	r0, r1
  while (i-- > 0)
   12ce6:	2a04      	cmp	r2, #4
    ptr += dataLen;
   12ce8:	440b      	add	r3, r1
  while (i-- > 0)
   12cea:	d05d      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12cec:	7dd9      	ldrb	r1, [r3, #23]
   12cee:	4288      	cmp	r0, r1
   12cf0:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12cf4:	bf38      	it	cc
   12cf6:	4608      	movcc	r0, r1
  while (i-- > 0)
   12cf8:	2a05      	cmp	r2, #5
    ptr += dataLen;
   12cfa:	440b      	add	r3, r1
  while (i-- > 0)
   12cfc:	d054      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12cfe:	7dd9      	ldrb	r1, [r3, #23]
   12d00:	4288      	cmp	r0, r1
   12d02:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12d06:	bf38      	it	cc
   12d08:	4608      	movcc	r0, r1
  while (i-- > 0)
   12d0a:	2a06      	cmp	r2, #6
    ptr += dataLen;
   12d0c:	440b      	add	r3, r1
  while (i-- > 0)
   12d0e:	d04b      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12d10:	7dd9      	ldrb	r1, [r3, #23]
   12d12:	4288      	cmp	r0, r1
   12d14:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12d18:	bf38      	it	cc
   12d1a:	4608      	movcc	r0, r1
  while (i-- > 0)
   12d1c:	2a07      	cmp	r2, #7
    ptr += dataLen;
   12d1e:	440b      	add	r3, r1
  while (i-- > 0)
   12d20:	d042      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12d22:	7dd9      	ldrb	r1, [r3, #23]
   12d24:	4288      	cmp	r0, r1
   12d26:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12d2a:	bf38      	it	cc
   12d2c:	4608      	movcc	r0, r1
  while (i-- > 0)
   12d2e:	2a08      	cmp	r2, #8
    ptr += dataLen;
   12d30:	440b      	add	r3, r1
  while (i-- > 0)
   12d32:	d039      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12d34:	7dd9      	ldrb	r1, [r3, #23]
   12d36:	4288      	cmp	r0, r1
   12d38:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12d3c:	bf38      	it	cc
   12d3e:	4608      	movcc	r0, r1
  while (i-- > 0)
   12d40:	2a09      	cmp	r2, #9
    ptr += dataLen;
   12d42:	440b      	add	r3, r1
  while (i-- > 0)
   12d44:	d030      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12d46:	7dd9      	ldrb	r1, [r3, #23]
   12d48:	4288      	cmp	r0, r1
   12d4a:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12d4e:	bf38      	it	cc
   12d50:	4608      	movcc	r0, r1
  while (i-- > 0)
   12d52:	2a0a      	cmp	r2, #10
    ptr += dataLen;
   12d54:	440b      	add	r3, r1
  while (i-- > 0)
   12d56:	d027      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12d58:	7dd9      	ldrb	r1, [r3, #23]
   12d5a:	4288      	cmp	r0, r1
   12d5c:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12d60:	bf38      	it	cc
   12d62:	4608      	movcc	r0, r1
  while (i-- > 0)
   12d64:	2a0b      	cmp	r2, #11
    ptr += dataLen;
   12d66:	440b      	add	r3, r1
  while (i-- > 0)
   12d68:	d01e      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12d6a:	7dd9      	ldrb	r1, [r3, #23]
   12d6c:	4288      	cmp	r0, r1
   12d6e:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12d72:	bf38      	it	cc
   12d74:	4608      	movcc	r0, r1
  while (i-- > 0)
   12d76:	2a0c      	cmp	r2, #12
    ptr += dataLen;
   12d78:	440b      	add	r3, r1
  while (i-- > 0)
   12d7a:	d015      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12d7c:	7dd9      	ldrb	r1, [r3, #23]
   12d7e:	4288      	cmp	r0, r1
   12d80:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12d84:	bf38      	it	cc
   12d86:	4608      	movcc	r0, r1
  while (i-- > 0)
   12d88:	2a0d      	cmp	r2, #13
    ptr += dataLen;
   12d8a:	440b      	add	r3, r1
  while (i-- > 0)
   12d8c:	d00c      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    BSTREAM_TO_UINT8(dataLen, ptr);
   12d8e:	7dd9      	ldrb	r1, [r3, #23]
   12d90:	4288      	cmp	r0, r1
   12d92:	f103 0318 	add.w	r3, r3, #24
    ptr += dataLen;
   12d96:	bf38      	it	cc
   12d98:	4608      	movcc	r0, r1
  while (i-- > 0)
   12d9a:	2a0e      	cmp	r2, #14
    ptr += dataLen;
   12d9c:	440b      	add	r3, r1
  while (i-- > 0)
   12d9e:	d003      	beq.n	12da8 <hciEvtProcessMsg+0x424>
    if (dataLen > maxLen)
   12da0:	7ddb      	ldrb	r3, [r3, #23]
   12da2:	4298      	cmp	r0, r3
   12da4:	bf38      	it	cc
   12da6:	4618      	movcc	r0, r3
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   12da8:	3024      	adds	r0, #36	; 0x24
   12daa:	f004 ff19 	bl	17be0 <WsfBufAlloc>
   12dae:	4607      	mov	r7, r0
   12db0:	2800      	cmp	r0, #0
   12db2:	f43f ae42 	beq.w	12a3a <hciEvtProcessMsg+0xb6>
    BSTREAM_TO_UINT8(i, p);
   12db6:	78e3      	ldrb	r3, [r4, #3]
    while (i-- > 0)
   12db8:	1e5c      	subs	r4, r3, #1
   12dba:	b2e4      	uxtb	r4, r4
   12dbc:	2b00      	cmp	r3, #0
   12dbe:	d040      	beq.n	12e42 <hciEvtProcessMsg+0x4be>
      BSTREAM_TO_BDA(pMsg->addr, p);
   12dc0:	f100 0a07 	add.w	sl, r0, #7
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   12dc4:	f100 0915 	add.w	r9, r0, #21
      pMsg->pData = (uint8_t *)(pMsg + 1);
   12dc8:	f100 0824 	add.w	r8, r0, #36	; 0x24
      pMsg->hdr.param = 0;
   12dcc:	f44f 1b30 	mov.w	fp, #2883584	; 0x2c0000
   12dd0:	e00c      	b.n	12dec <hciEvtProcessMsg+0x468>
      pMsg->pData = (uint8_t *)(pMsg + 1);
   12dd2:	f8c7 8020 	str.w	r8, [r7, #32]
      memcpy(pMsg->pData, p, pMsg->len);
   12dd6:	f7f9 f993 	bl	c100 <memcpy>
    while (i-- > 0)
   12dda:	3c01      	subs	r4, #1
      pMsg->hdr.param = 0;
   12ddc:	f8c7 b000 	str.w	fp, [r7]
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   12de0:	68b3      	ldr	r3, [r6, #8]
   12de2:	4638      	mov	r0, r7
    while (i-- > 0)
   12de4:	b2e4      	uxtb	r4, r4
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   12de6:	4798      	blx	r3
    while (i-- > 0)
   12de8:	2cff      	cmp	r4, #255	; 0xff
   12dea:	d02a      	beq.n	12e42 <hciEvtProcessMsg+0x4be>
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   12dec:	786a      	ldrb	r2, [r5, #1]
   12dee:	782b      	ldrb	r3, [r5, #0]
   12df0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12df4:	80bb      	strh	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   12df6:	78ab      	ldrb	r3, [r5, #2]
   12df8:	71bb      	strb	r3, [r7, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   12dfa:	1ce9      	adds	r1, r5, #3
   12dfc:	4650      	mov	r0, sl
   12dfe:	f000 fa8f 	bl	13320 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   12e02:	7a6b      	ldrb	r3, [r5, #9]
   12e04:	737b      	strb	r3, [r7, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   12e06:	7aab      	ldrb	r3, [r5, #10]
   12e08:	73bb      	strb	r3, [r7, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   12e0a:	7aeb      	ldrb	r3, [r5, #11]
   12e0c:	73fb      	strb	r3, [r7, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   12e0e:	7b2b      	ldrb	r3, [r5, #12]
   12e10:	743b      	strb	r3, [r7, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   12e12:	7b6b      	ldrb	r3, [r5, #13]
   12e14:	747b      	strb	r3, [r7, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   12e16:	7bea      	ldrb	r2, [r5, #15]
   12e18:	7bab      	ldrb	r3, [r5, #14]
   12e1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12e1e:	827b      	strh	r3, [r7, #18]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   12e20:	7c2b      	ldrb	r3, [r5, #16]
   12e22:	753b      	strb	r3, [r7, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   12e24:	f105 0111 	add.w	r1, r5, #17
   12e28:	4648      	mov	r0, r9
   12e2a:	f000 fa79 	bl	13320 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->len, p);
   12e2e:	7dea      	ldrb	r2, [r5, #23]
   12e30:	b293      	uxth	r3, r2
   12e32:	f105 0118 	add.w	r1, r5, #24
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   12e36:	2be5      	cmp	r3, #229	; 0xe5
      memcpy(pMsg->pData, p, pMsg->len);
   12e38:	4640      	mov	r0, r8
      p += pMsg->len;
   12e3a:	eb01 0502 	add.w	r5, r1, r2
      BSTREAM_TO_UINT8(pMsg->len, p);
   12e3e:	83bb      	strh	r3, [r7, #28]
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   12e40:	d9c7      	bls.n	12dd2 <hciEvtProcessMsg+0x44e>
    WsfBufFree(pMsg);
   12e42:	4638      	mov	r0, r7
}
   12e44:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    WsfBufFree(pMsg);
   12e48:	f004 befa 	b.w	17c40 <WsfBufFree>
  if (cbackEvt != 0)
   12e4c:	4e46      	ldr	r6, [pc, #280]	; (12f68 <hciEvtProcessMsg+0x5e4>)
   12e4e:	200a      	movs	r0, #10
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   12e50:	f04f 092b 	mov.w	r9, #43	; 0x2b
   12e54:	e5dd      	b.n	12a12 <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   12e56:	4e45      	ldr	r6, [pc, #276]	; (12f6c <hciEvtProcessMsg+0x5e8>)
   12e58:	200a      	movs	r0, #10
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   12e5a:	f04f 092e 	mov.w	r9, #46	; 0x2e
   12e5e:	e5d8      	b.n	12a12 <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   12e60:	4e43      	ldr	r6, [pc, #268]	; (12f70 <hciEvtProcessMsg+0x5ec>)
   12e62:	2004      	movs	r0, #4
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   12e64:	f04f 092d 	mov.w	r9, #45	; 0x2d
   12e68:	e5d3      	b.n	12a12 <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   12e6a:	4e42      	ldr	r6, [pc, #264]	; (12f74 <hciEvtProcessMsg+0x5f0>)
   12e6c:	2006      	movs	r0, #6
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   12e6e:	f04f 0932 	mov.w	r9, #50	; 0x32
   12e72:	e5ce      	b.n	12a12 <hciEvtProcessMsg+0x8e>
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   12e74:	7a60      	ldrb	r0, [r4, #9]
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   12e76:	28f7      	cmp	r0, #247	; 0xf7
   12e78:	f63f addf 	bhi.w	12a3a <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   12e7c:	3010      	adds	r0, #16
   12e7e:	f004 feaf 	bl	17be0 <WsfBufAlloc>
   12e82:	4605      	mov	r5, r0
   12e84:	2800      	cmp	r0, #0
   12e86:	f43f add8 	beq.w	12a3a <hciEvtProcessMsg+0xb6>
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   12e8a:	7922      	ldrb	r2, [r4, #4]
   12e8c:	78e3      	ldrb	r3, [r4, #3]
   12e8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12e92:	8083      	strh	r3, [r0, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   12e94:	7963      	ldrb	r3, [r4, #5]
   12e96:	7183      	strb	r3, [r0, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   12e98:	79a3      	ldrb	r3, [r4, #6]
   12e9a:	71c3      	strb	r3, [r0, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   12e9c:	79e3      	ldrb	r3, [r4, #7]
   12e9e:	7203      	strb	r3, [r0, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   12ea0:	7a27      	ldrb	r7, [r4, #8]
   12ea2:	7247      	strb	r7, [r0, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   12ea4:	7a62      	ldrb	r2, [r4, #9]
   12ea6:	8142      	strh	r2, [r0, #10]
    pMsg->pData = (uint8_t *)(pMsg + 1);
   12ea8:	3010      	adds	r0, #16
    memcpy(pMsg->pData, p, pMsg->len);
   12eaa:	f104 010a 	add.w	r1, r4, #10
    pMsg->pData = (uint8_t *)(pMsg + 1);
   12eae:	60e8      	str	r0, [r5, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   12eb0:	f7f9 f926 	bl	c100 <memcpy>
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   12eb4:	2331      	movs	r3, #49	; 0x31
   12eb6:	70ab      	strb	r3, [r5, #2]
    pMsg->hdr.status = pMsg->status;
   12eb8:	70ef      	strb	r7, [r5, #3]
    pMsg->hdr.param = 0;
   12eba:	2200      	movs	r2, #0
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   12ebc:	68b3      	ldr	r3, [r6, #8]
    pMsg->hdr.param = 0;
   12ebe:	802a      	strh	r2, [r5, #0]
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   12ec0:	4628      	mov	r0, r5
   12ec2:	4798      	blx	r3
    WsfBufFree(pMsg);
   12ec4:	4628      	mov	r0, r5
}
   12ec6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    WsfBufFree(pMsg);
   12eca:	f004 beb9 	b.w	17c40 <WsfBufFree>
    if ((pMsg = WsfBufAlloc(sizeof(hciLeConlessIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
   12ece:	20c0      	movs	r0, #192	; 0xc0
   12ed0:	f004 fe86 	bl	17be0 <WsfBufAlloc>
   12ed4:	4605      	mov	r5, r0
   12ed6:	2800      	cmp	r0, #0
   12ed8:	f43f adaf 	beq.w	12a3a <hciEvtProcessMsg+0xb6>
        APP_TRACE_INFO0("rcv Le Conntless IQ Report...");
   12edc:	4826      	ldr	r0, [pc, #152]	; (12f78 <hciEvtProcessMsg+0x5f4>)
   12ede:	f005 fa5f 	bl	183a0 <WsfTrace>
        BSTREAM_TO_UINT16(pMsg->synHdl, p);
   12ee2:	7923      	ldrb	r3, [r4, #4]
   12ee4:	78e7      	ldrb	r7, [r4, #3]
   12ee6:	eb07 2703 	add.w	r7, r7, r3, lsl #8
   12eea:	b2bf      	uxth	r7, r7
   12eec:	80af      	strh	r7, [r5, #4]
        BSTREAM_TO_UINT8(pMsg->chIdx, p);
   12eee:	7963      	ldrb	r3, [r4, #5]
   12ef0:	71ab      	strb	r3, [r5, #6]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
   12ef2:	79e2      	ldrb	r2, [r4, #7]
   12ef4:	79a3      	ldrb	r3, [r4, #6]
   12ef6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12efa:	812b      	strh	r3, [r5, #8]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
   12efc:	7a23      	ldrb	r3, [r4, #8]
   12efe:	72ab      	strb	r3, [r5, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
   12f00:	7a63      	ldrb	r3, [r4, #9]
   12f02:	72eb      	strb	r3, [r5, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
   12f04:	7aa3      	ldrb	r3, [r4, #10]
   12f06:	732b      	strb	r3, [r5, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
   12f08:	f894 900b 	ldrb.w	r9, [r4, #11]
   12f0c:	f885 900d 	strb.w	r9, [r5, #13]
        BSTREAM_TO_UINT16(pMsg->paEvtCnt, p);
   12f10:	7b62      	ldrb	r2, [r4, #13]
   12f12:	7b23      	ldrb	r3, [r4, #12]
   12f14:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12f18:	81eb      	strh	r3, [r5, #14]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   12f1a:	f894 800e 	ldrb.w	r8, [r4, #14]
   12f1e:	f885 8010 	strb.w	r8, [r5, #16]
        pMsg->pISample = (int8_t *) (pMsg + 1);
   12f22:	f105 031c 	add.w	r3, r5, #28
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   12f26:	340f      	adds	r4, #15
        pMsg->pISample = (int8_t *) (pMsg + 1);
   12f28:	616b      	str	r3, [r5, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   12f2a:	4642      	mov	r2, r8
   12f2c:	4621      	mov	r1, r4
   12f2e:	4618      	mov	r0, r3
   12f30:	f7f9 f8e6 	bl	c100 <memcpy>
        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
   12f34:	f105 036e 	add.w	r3, r5, #110	; 0x6e
   12f38:	61ab      	str	r3, [r5, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   12f3a:	eb04 0108 	add.w	r1, r4, r8
   12f3e:	4642      	mov	r2, r8
   12f40:	f7f9 f8de 	bl	c100 <memcpy>
        pMsg->hdr.event = HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT;
   12f44:	2347      	movs	r3, #71	; 0x47
        pMsg->hdr.status = pMsg->pktStatus;
   12f46:	f885 9003 	strb.w	r9, [r5, #3]
        pMsg->hdr.event = HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT;
   12f4a:	70ab      	strb	r3, [r5, #2]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   12f4c:	68b3      	ldr	r3, [r6, #8]
        pMsg->hdr.param = pMsg->synHdl;
   12f4e:	802f      	strh	r7, [r5, #0]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   12f50:	e7b6      	b.n	12ec0 <hciEvtProcessMsg+0x53c>
  if (cbackEvt != 0)
   12f52:	4e0a      	ldr	r6, [pc, #40]	; (12f7c <hciEvtProcessMsg+0x5f8>)
   12f54:	200c      	movs	r0, #12
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   12f56:	f04f 092f 	mov.w	r9, #47	; 0x2f
   12f5a:	e55a      	b.n	12a12 <hciEvtProcessMsg+0x8e>
   12f5c:	00012691 	.word	0x00012691
   12f60:	00024b98 	.word	0x00024b98
   12f64:	00012449 	.word	0x00012449
   12f68:	0001238d 	.word	0x0001238d
   12f6c:	000123b5 	.word	0x000123b5
   12f70:	000123b1 	.word	0x000123b1
   12f74:	0001243d 	.word	0x0001243d
   12f78:	00024bac 	.word	0x00024bac
   12f7c:	00012485 	.word	0x00012485
    APP_TRACE_INFO0("hciEvtProcessLeConnIQReport");
   12f80:	4861      	ldr	r0, [pc, #388]	; (13108 <hciEvtProcessMsg+0x784>)
   12f82:	f005 fa0d 	bl	183a0 <WsfTrace>
    if ((pMsg = WsfBufAlloc(sizeof(hciLeConnIQReportEvt_t) + HCI_IQ_RPT_SAMPLE_CNT_MAX*2)) != NULL)
   12f86:	20c0      	movs	r0, #192	; 0xc0
   12f88:	f004 fe2a 	bl	17be0 <WsfBufAlloc>
   12f8c:	4605      	mov	r5, r0
   12f8e:	2800      	cmp	r0, #0
   12f90:	f43f ad53 	beq.w	12a3a <hciEvtProcessMsg+0xb6>
        APP_TRACE_INFO0("rcv Le ConnIQ Report...");
   12f94:	485d      	ldr	r0, [pc, #372]	; (1310c <hciEvtProcessMsg+0x788>)
   12f96:	f005 fa03 	bl	183a0 <WsfTrace>
        BSTREAM_TO_UINT16(pMsg->handle, p);
   12f9a:	7923      	ldrb	r3, [r4, #4]
   12f9c:	78e7      	ldrb	r7, [r4, #3]
   12f9e:	eb07 2703 	add.w	r7, r7, r3, lsl #8
   12fa2:	b2bf      	uxth	r7, r7
   12fa4:	80af      	strh	r7, [r5, #4]
        BSTREAM_TO_UINT8(pMsg->rxPhy, p);
   12fa6:	7963      	ldrb	r3, [r4, #5]
   12fa8:	71ab      	strb	r3, [r5, #6]
        BSTREAM_TO_UINT8(pMsg->dataChIdx, p);
   12faa:	79a3      	ldrb	r3, [r4, #6]
   12fac:	71eb      	strb	r3, [r5, #7]
        BSTREAM_TO_UINT16(pMsg->rssi, p); 
   12fae:	7a22      	ldrb	r2, [r4, #8]
   12fb0:	79e3      	ldrb	r3, [r4, #7]
   12fb2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12fb6:	812b      	strh	r3, [r5, #8]
        BSTREAM_TO_UINT8(pMsg->rssiAntennaId, p);
   12fb8:	7a63      	ldrb	r3, [r4, #9]
   12fba:	72ab      	strb	r3, [r5, #10]
        BSTREAM_TO_UINT8(pMsg->cteType, p);
   12fbc:	7aa3      	ldrb	r3, [r4, #10]
   12fbe:	72eb      	strb	r3, [r5, #11]
        BSTREAM_TO_UINT8(pMsg->slotDurations, p);
   12fc0:	7ae3      	ldrb	r3, [r4, #11]
   12fc2:	732b      	strb	r3, [r5, #12]
        BSTREAM_TO_UINT8(pMsg->pktStatus, p);
   12fc4:	f894 900c 	ldrb.w	r9, [r4, #12]
   12fc8:	f885 900d 	strb.w	r9, [r5, #13]
        BSTREAM_TO_UINT16(pMsg->connEvtCnt, p);
   12fcc:	7ba2      	ldrb	r2, [r4, #14]
   12fce:	7b63      	ldrb	r3, [r4, #13]
   12fd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   12fd4:	81eb      	strh	r3, [r5, #14]
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   12fd6:	f894 800f 	ldrb.w	r8, [r4, #15]
   12fda:	f885 8010 	strb.w	r8, [r5, #16]
        pMsg->pISample = (int8_t *) (pMsg + 1);
   12fde:	f105 031c 	add.w	r3, r5, #28
        BSTREAM_TO_UINT8(pMsg->sampleCnt, p);
   12fe2:	3410      	adds	r4, #16
        pMsg->pISample = (int8_t *) (pMsg + 1);
   12fe4:	616b      	str	r3, [r5, #20]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   12fe6:	4642      	mov	r2, r8
   12fe8:	4621      	mov	r1, r4
   12fea:	4618      	mov	r0, r3
   12fec:	f7f9 f888 	bl	c100 <memcpy>
        pMsg->pQSample = (int8_t *) (pMsg + 1)+HCI_IQ_RPT_SAMPLE_CNT_MAX;
   12ff0:	f105 036e 	add.w	r3, r5, #110	; 0x6e
   12ff4:	61ab      	str	r3, [r5, #24]
        memcpy(pMsg->pISample, p, pMsg->sampleCnt);
   12ff6:	eb04 0108 	add.w	r1, r4, r8
   12ffa:	4642      	mov	r2, r8
   12ffc:	f7f9 f880 	bl	c100 <memcpy>
        pMsg->hdr.event = HCI_LE_CONN_IQ_REPORT_CBACK_EVT;
   13000:	233d      	movs	r3, #61	; 0x3d
        pMsg->hdr.status = pMsg->pktStatus;
   13002:	f885 9003 	strb.w	r9, [r5, #3]
        pMsg->hdr.event = HCI_LE_CONN_IQ_REPORT_CBACK_EVT;
   13006:	70ab      	strb	r3, [r5, #2]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   13008:	68b3      	ldr	r3, [r6, #8]
        pMsg->hdr.param = pMsg->handle;
   1300a:	802f      	strh	r7, [r5, #0]
        (*hciCb.evtCback)((hciEvt_t *) pMsg);
   1300c:	e758      	b.n	12ec0 <hciEvtProcessMsg+0x53c>
          if (*pEvt == HCI_SUCCESS)
   1300e:	78e3      	ldrb	r3, [r4, #3]
   13010:	2b00      	cmp	r3, #0
   13012:	d061      	beq.n	130d8 <hciEvtProcessMsg+0x754>
   13014:	4e3e      	ldr	r6, [pc, #248]	; (13110 <hciEvtProcessMsg+0x78c>)
   13016:	2024      	movs	r0, #36	; 0x24
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   13018:	f04f 0902 	mov.w	r9, #2
   1301c:	e4f9      	b.n	12a12 <hciEvtProcessMsg+0x8e>
          cback = hciCb.secCback;
   1301e:	2026      	movs	r0, #38	; 0x26
   13020:	68f7      	ldr	r7, [r6, #12]
   13022:	4e3c      	ldr	r6, [pc, #240]	; (13114 <hciEvtProcessMsg+0x790>)
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   13024:	4681      	mov	r9, r0
   13026:	e4f4      	b.n	12a12 <hciEvtProcessMsg+0x8e>
          cback = hciCb.secCback;
   13028:	68f7      	ldr	r7, [r6, #12]
   1302a:	4e3b      	ldr	r6, [pc, #236]	; (13118 <hciEvtProcessMsg+0x794>)
   1302c:	2046      	movs	r0, #70	; 0x46
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   1302e:	f04f 0925 	mov.w	r9, #37	; 0x25
   13032:	e4ee      	b.n	12a12 <hciEvtProcessMsg+0x8e>
  if (cbackEvt != 0)
   13034:	4e39      	ldr	r6, [pc, #228]	; (1311c <hciEvtProcessMsg+0x798>)
   13036:	200e      	movs	r0, #14
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   13038:	f04f 0924 	mov.w	r9, #36	; 0x24
   1303c:	e4e9      	b.n	12a12 <hciEvtProcessMsg+0x8e>
  BSTREAM_TO_UINT8(i, p);
   1303e:	78e7      	ldrb	r7, [r4, #3]
  if (i > HCI_MAX_REPORTS)
   13040:	2f0f      	cmp	r7, #15
   13042:	f63f acfa 	bhi.w	12a3a <hciEvtProcessMsg+0xb6>
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   13046:	201c      	movs	r0, #28
   13048:	f004 fdca 	bl	17be0 <WsfBufAlloc>
   1304c:	4605      	mov	r5, r0
   1304e:	2800      	cmp	r0, #0
   13050:	f43f acf3 	beq.w	12a3a <hciEvtProcessMsg+0xb6>
    while (i-- > 0)
   13054:	1e7b      	subs	r3, r7, #1
   13056:	b2db      	uxtb	r3, r3
   13058:	2f00      	cmp	r7, #0
   1305a:	f43f af33 	beq.w	12ec4 <hciEvtProcessMsg+0x540>
   1305e:	f104 0816 	add.w	r8, r4, #22
      BSTREAM_TO_BDA(pMsg->addr, p);
   13062:	f100 0a0c 	add.w	sl, r0, #12
   13066:	eb08 1803 	add.w	r8, r8, r3, lsl #4
   1306a:	3406      	adds	r4, #6
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   1306c:	f100 0b13 	add.w	fp, r0, #19
      pMsg->hdr.param = 0;
   13070:	f44f 29c0 	mov.w	r9, #393216	; 0x60000
      pMsg->pData = NULL;
   13074:	2700      	movs	r7, #0
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   13076:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   1307a:	72ab      	strb	r3, [r5, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   1307c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   13080:	72eb      	strb	r3, [r5, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   13082:	4621      	mov	r1, r4
   13084:	4650      	mov	r0, sl
   13086:	f000 f94b 	bl	13320 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   1308a:	79a3      	ldrb	r3, [r4, #6]
   1308c:	74ab      	strb	r3, [r5, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   1308e:	1de1      	adds	r1, r4, #7
   13090:	4658      	mov	r0, fp
   13092:	f000 f945 	bl	13320 <BdaCpy>
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   13096:	7b63      	ldrb	r3, [r4, #13]
   13098:	726b      	strb	r3, [r5, #9]
      pMsg->hdr.param = 0;
   1309a:	f8c5 9000 	str.w	r9, [r5]
      pMsg->len = 0;
   1309e:	722f      	strb	r7, [r5, #8]
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   130a0:	68b3      	ldr	r3, [r6, #8]
      pMsg->pData = NULL;
   130a2:	606f      	str	r7, [r5, #4]
    while (i-- > 0)
   130a4:	3410      	adds	r4, #16
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   130a6:	4628      	mov	r0, r5
   130a8:	4798      	blx	r3
    while (i-- > 0)
   130aa:	4544      	cmp	r4, r8
   130ac:	d1e3      	bne.n	13076 <hciEvtProcessMsg+0x6f2>
   130ae:	e709      	b.n	12ec4 <hciEvtProcessMsg+0x540>
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   130b0:	200e      	movs	r0, #14
   130b2:	f004 fd95 	bl	17be0 <WsfBufAlloc>
   130b6:	4604      	mov	r4, r0
   130b8:	2800      	cmp	r0, #0
   130ba:	f43f acbe 	beq.w	12a3a <hciEvtProcessMsg+0xb6>
      pMsg->hdr.param = 0;
   130be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   130c2:	6003      	str	r3, [r0, #0]
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   130c4:	4642      	mov	r2, r8
   130c6:	4629      	mov	r1, r5
   130c8:	f7fe ffd0 	bl	1206c <hciEvtParseLeConnUpdateCmpl>
      (*cback)(pMsg);
   130cc:	47b8      	blx	r7
      WsfBufFree(pMsg);
   130ce:	4620      	mov	r0, r4
}
   130d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      WsfBufFree(pMsg);
   130d4:	f004 bdb4 	b.w	17c40 <WsfBufFree>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   130d8:	7963      	ldrb	r3, [r4, #5]
   130da:	7920      	ldrb	r0, [r4, #4]
            hciCoreConnOpen(handle);
   130dc:	4e0c      	ldr	r6, [pc, #48]	; (13110 <hciEvtProcessMsg+0x78c>)
            BYTES_TO_UINT16(handle, (pEvt + 1));
   130de:	eb00 2003 	add.w	r0, r0, r3, lsl #8
            hciCoreConnOpen(handle);
   130e2:	b280      	uxth	r0, r0
   130e4:	f7fe fc30 	bl	11948 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   130e8:	f04f 0902 	mov.w	r9, #2
            hciCoreConnOpen(handle);
   130ec:	2024      	movs	r0, #36	; 0x24
   130ee:	e490      	b.n	12a12 <hciEvtProcessMsg+0x8e>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   130f0:	7963      	ldrb	r3, [r4, #5]
   130f2:	7920      	ldrb	r0, [r4, #4]
            hciCoreConnOpen(handle);
   130f4:	4e0a      	ldr	r6, [pc, #40]	; (13120 <hciEvtProcessMsg+0x79c>)
            BYTES_TO_UINT16(handle, (pEvt + 1));
   130f6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
            hciCoreConnOpen(handle);
   130fa:	b280      	uxth	r0, r0
   130fc:	f7fe fc24 	bl	11948 <hciCoreConnOpen>
   13100:	2024      	movs	r0, #36	; 0x24
   13102:	e486      	b.n	12a12 <hciEvtProcessMsg+0x8e>
  maxLen = 0;
   13104:	4610      	mov	r0, r2
   13106:	e64f      	b.n	12da8 <hciEvtProcessMsg+0x424>
   13108:	00024b64 	.word	0x00024b64
   1310c:	00024b80 	.word	0x00024b80
   13110:	000124c5 	.word	0x000124c5
   13114:	0001252d 	.word	0x0001252d
   13118:	00012575 	.word	0x00012575
   1311c:	000122ed 	.word	0x000122ed
   13120:	00012691 	.word	0x00012691

00013124 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   13124:	b570      	push	{r4, r5, r6, lr}
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   13126:	788c      	ldrb	r4, [r1, #2]
{
   13128:	460d      	mov	r5, r1
  BYTES_TO_UINT16(len, &pData[2]);
   1312a:	78c9      	ldrb	r1, [r1, #3]
  len += HCI_ACL_HDR_LEN;
   1312c:	3404      	adds	r4, #4
   1312e:	eb04 2401 	add.w	r4, r4, r1, lsl #8
   13132:	b2a4      	uxth	r4, r4

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   13134:	462a      	mov	r2, r5
   13136:	4621      	mov	r1, r4
{
   13138:	4606      	mov	r6, r0
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   1313a:	2002      	movs	r0, #2
   1313c:	f7fc fe06 	bl	fd4c <hciDrvWrite>
   13140:	42a0      	cmp	r0, r4
   13142:	d000      	beq.n	13146 <hciTrSendAclData+0x22>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
  }
}
   13144:	bd70      	pop	{r4, r5, r6, pc}
    hciCoreTxAclComplete(pContext, pData);
   13146:	4629      	mov	r1, r5
   13148:	4630      	mov	r0, r6
}
   1314a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hciCoreTxAclComplete(pContext, pData);
   1314e:	f7fe bd5b 	b.w	11c08 <hciCoreTxAclComplete>
   13152:	bf00      	nop

00013154 <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   13154:	b538      	push	{r3, r4, r5, lr}
  uint16_t   len;  // in case like LE set periodic advertising data, the maximum HCI command parameter length is 255

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   13156:	7885      	ldrb	r5, [r0, #2]
   13158:	3503      	adds	r5, #3

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   1315a:	4602      	mov	r2, r0
{
   1315c:	4604      	mov	r4, r0
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   1315e:	4629      	mov	r1, r5
   13160:	2001      	movs	r0, #1
   13162:	f7fc fdf3 	bl	fd4c <hciDrvWrite>
   13166:	42a8      	cmp	r0, r5
   13168:	d000      	beq.n	1316c <hciTrSendCmd+0x18>
  {
    /* free buffer */
    WsfMsgFree(pData);
  }
}
   1316a:	bd38      	pop	{r3, r4, r5, pc}
    WsfMsgFree(pData);
   1316c:	4620      	mov	r0, r4
}
   1316e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgFree(pData);
   13172:	f004 bd9d 	b.w	17cb0 <WsfMsgFree>
   13176:	bf00      	nop

00013178 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   13178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   1317c:	460c      	mov	r4, r1
{
   1317e:	b083      	sub	sp, #12
  while (len)
   13180:	2900      	cmp	r1, #0
   13182:	f000 80b9 	beq.w	132f8 <hciTrSerialRxIncoming+0x180>
   13186:	f890 c000 	ldrb.w	ip, [r0]
   1318a:	4f5e      	ldr	r7, [pc, #376]	; (13304 <hciTrSerialRxIncoming+0x18c>)
    if (stateRx == HCI_RX_STATE_COMPLETE)
    {
      g_bHCIReceivingPacket = FALSE;

      /* deliver data */
      if (pPktRx != NULL)
   1318c:	f8df a184 	ldr.w	sl, [pc, #388]	; 13314 <hciTrSerialRxIncoming+0x19c>
      g_bHCIReceivingPacket = FALSE;
   13190:	f8df 9184 	ldr.w	r9, [pc, #388]	; 13318 <hciTrSerialRxIncoming+0x1a0>
   13194:	f8df 8184 	ldr.w	r8, [pc, #388]	; 1331c <hciTrSerialRxIncoming+0x1a4>
   13198:	4606      	mov	r6, r0
  consumed_bytes = 0;
   1319a:	2500      	movs	r5, #0
    if (stateRx == HCI_RX_STATE_IDLE)
   1319c:	783b      	ldrb	r3, [r7, #0]
   1319e:	b993      	cbnz	r3, 131c6 <hciTrSerialRxIncoming+0x4e>
      stateRx  = HCI_RX_STATE_HEADER;
   131a0:	2201      	movs	r2, #1
      iRx      = 0;
   131a2:	4959      	ldr	r1, [pc, #356]	; (13308 <hciTrSerialRxIncoming+0x190>)
      pktIndRx = dataByte;
   131a4:	f888 c000 	strb.w	ip, [r8]
      consumed_bytes++;
   131a8:	4415      	add	r5, r2
      len--;
   131aa:	3c01      	subs	r4, #1
      iRx      = 0;
   131ac:	800b      	strh	r3, [r1, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   131ae:	703a      	strb	r2, [r7, #0]
      g_bHCIReceivingPacket = TRUE;
   131b0:	f889 2000 	strb.w	r2, [r9]
      pBuf++;
   131b4:	4416      	add	r6, r2
      consumed_bytes++;
   131b6:	b2ad      	uxth	r5, r5
      len--;
   131b8:	b2a4      	uxth	r4, r4
  while (len)
   131ba:	b1cc      	cbz	r4, 131f0 <hciTrSerialRxIncoming+0x78>
    if (stateRx == HCI_RX_STATE_IDLE)
   131bc:	783b      	ldrb	r3, [r7, #0]
   131be:	f896 c000 	ldrb.w	ip, [r6]
   131c2:	2b00      	cmp	r3, #0
   131c4:	d0ec      	beq.n	131a0 <hciTrSerialRxIncoming+0x28>
    else if (stateRx == HCI_RX_STATE_HEADER)
   131c6:	2b01      	cmp	r3, #1
   131c8:	d016      	beq.n	131f8 <hciTrSerialRxIncoming+0x80>
    else if (stateRx == HCI_RX_STATE_DATA)
   131ca:	2b02      	cmp	r3, #2
   131cc:	d054      	beq.n	13278 <hciTrSerialRxIncoming+0x100>
    if (stateRx == HCI_RX_STATE_COMPLETE)
   131ce:	2b03      	cmp	r3, #3
   131d0:	d1e4      	bne.n	1319c <hciTrSerialRxIncoming+0x24>
      if (pPktRx != NULL)
   131d2:	f8da 3000 	ldr.w	r3, [sl]
      g_bHCIReceivingPacket = FALSE;
   131d6:	2200      	movs	r2, #0
   131d8:	f889 2000 	strb.w	r2, [r9]
      if (pPktRx != NULL)
   131dc:	b123      	cbz	r3, 131e8 <hciTrSerialRxIncoming+0x70>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   131de:	f898 0000 	ldrb.w	r0, [r8]
   131e2:	4619      	mov	r1, r3
   131e4:	f7fe fed4 	bl	11f90 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   131e8:	2300      	movs	r3, #0
   131ea:	703b      	strb	r3, [r7, #0]
  while (len)
   131ec:	2c00      	cmp	r4, #0
   131ee:	d1e5      	bne.n	131bc <hciTrSerialRxIncoming+0x44>
    }
  }
  return consumed_bytes;
}
   131f0:	4628      	mov	r0, r5
   131f2:	b003      	add	sp, #12
   131f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (pktIndRx == HCI_EVT_TYPE)
   131f8:	f898 1000 	ldrb.w	r1, [r8]
   131fc:	2904      	cmp	r1, #4
   131fe:	d050      	beq.n	132a2 <hciTrSerialRxIncoming+0x12a>
      else if (pktIndRx == HCI_ACL_TYPE)
   13200:	2902      	cmp	r1, #2
   13202:	d1f5      	bne.n	131f0 <hciTrSerialRxIncoming+0x78>
      if (iRx != hdrLen) {
   13204:	f8df b100 	ldr.w	fp, [pc, #256]	; 13308 <hciTrSerialRxIncoming+0x190>
   13208:	f8bb 3000 	ldrh.w	r3, [fp]
   1320c:	2b04      	cmp	r3, #4
   1320e:	d05d      	beq.n	132cc <hciTrSerialRxIncoming+0x154>
        hdrLen = HCI_ACL_HDR_LEN;
   13210:	2204      	movs	r2, #4
      if (iRx != hdrLen) {
   13212:	4610      	mov	r0, r2
        hdrRx[iRx++] = dataByte;
   13214:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 1330c <hciTrSerialRxIncoming+0x194>
   13218:	f80e c003 	strb.w	ip, [lr, r3]
   1321c:	3301      	adds	r3, #1
   1321e:	b29b      	uxth	r3, r3
        consumed_bytes++;
   13220:	3501      	adds	r5, #1
        len--;
   13222:	3c01      	subs	r4, #1
      if (iRx == hdrLen)
   13224:	4283      	cmp	r3, r0
        pBuf++;
   13226:	f106 0601 	add.w	r6, r6, #1
        consumed_bytes++;
   1322a:	b2ad      	uxth	r5, r5
        len--;
   1322c:	b2a4      	uxth	r4, r4
        hdrRx[iRx++] = dataByte;
   1322e:	f8ab 3000 	strh.w	r3, [fp]
      if (iRx == hdrLen)
   13232:	d1c2      	bne.n	131ba <hciTrSerialRxIncoming+0x42>
        if (pktIndRx == HCI_EVT_TYPE)
   13234:	2904      	cmp	r1, #4
   13236:	d061      	beq.n	132fc <hciTrSerialRxIncoming+0x184>
        else if (pktIndRx == HCI_ACL_TYPE)
   13238:	2902      	cmp	r1, #2
   1323a:	d061      	beq.n	13300 <hciTrSerialRxIncoming+0x188>
      uint16_t dataLen = 0;
   1323c:	2300      	movs	r3, #0
   1323e:	9300      	str	r3, [sp, #0]
   13240:	9201      	str	r2, [sp, #4]
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   13242:	f004 fd2d 	bl	17ca0 <WsfMsgAlloc>
   13246:	9a01      	ldr	r2, [sp, #4]
   13248:	f8ca 0000 	str.w	r0, [sl]
   1324c:	4603      	mov	r3, r0
        if (pPktRx != NULL)
   1324e:	2b00      	cmp	r3, #0
   13250:	d0ce      	beq.n	131f0 <hciTrSerialRxIncoming+0x78>
              *pDataRx++ = hdrRx[i];
   13252:	492e      	ldr	r1, [pc, #184]	; (1330c <hciTrSerialRxIncoming+0x194>)
   13254:	9201      	str	r2, [sp, #4]
   13256:	4618      	mov	r0, r3
   13258:	f7f8 ff52 	bl	c100 <memcpy>
   1325c:	9a01      	ldr	r2, [sp, #4]
   1325e:	492c      	ldr	r1, [pc, #176]	; (13310 <hciTrSerialRxIncoming+0x198>)
   13260:	4603      	mov	r3, r0
          iRx = dataLen;
   13262:	9800      	ldr	r0, [sp, #0]
   13264:	f8ab 0000 	strh.w	r0, [fp]
              *pDataRx++ = hdrRx[i];
   13268:	441a      	add	r2, r3
   1326a:	600a      	str	r2, [r1, #0]
          if (iRx == 0)
   1326c:	bb10      	cbnz	r0, 132b4 <hciTrSerialRxIncoming+0x13c>
            stateRx = HCI_RX_STATE_COMPLETE;
   1326e:	2203      	movs	r2, #3
      g_bHCIReceivingPacket = FALSE;
   13270:	f889 0000 	strb.w	r0, [r9]
            stateRx = HCI_RX_STATE_COMPLETE;
   13274:	703a      	strb	r2, [r7, #0]
      if (pPktRx != NULL)
   13276:	e7b2      	b.n	131de <hciTrSerialRxIncoming+0x66>
      *pDataRx++ = dataByte;
   13278:	4925      	ldr	r1, [pc, #148]	; (13310 <hciTrSerialRxIncoming+0x198>)
      iRx--;
   1327a:	4a23      	ldr	r2, [pc, #140]	; (13308 <hciTrSerialRxIncoming+0x190>)
      *pDataRx++ = dataByte;
   1327c:	680b      	ldr	r3, [r1, #0]
   1327e:	f883 c000 	strb.w	ip, [r3]
   13282:	3301      	adds	r3, #1
   13284:	600b      	str	r3, [r1, #0]
      iRx--;
   13286:	8813      	ldrh	r3, [r2, #0]
   13288:	3b01      	subs	r3, #1
   1328a:	b29b      	uxth	r3, r3
      consumed_bytes++;
   1328c:	3501      	adds	r5, #1
      len--;
   1328e:	3c01      	subs	r4, #1
      iRx--;
   13290:	8013      	strh	r3, [r2, #0]
      pBuf++;
   13292:	3601      	adds	r6, #1
      consumed_bytes++;
   13294:	b2ad      	uxth	r5, r5
      len--;
   13296:	b2a4      	uxth	r4, r4
      if (iRx == 0)
   13298:	2b00      	cmp	r3, #0
   1329a:	d18e      	bne.n	131ba <hciTrSerialRxIncoming+0x42>
        stateRx = HCI_RX_STATE_COMPLETE;
   1329c:	2303      	movs	r3, #3
   1329e:	703b      	strb	r3, [r7, #0]
    if (stateRx == HCI_RX_STATE_COMPLETE)
   132a0:	e797      	b.n	131d2 <hciTrSerialRxIncoming+0x5a>
      if (iRx != hdrLen) {
   132a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 13308 <hciTrSerialRxIncoming+0x190>
   132a6:	f8bb 3000 	ldrh.w	r3, [fp]
   132aa:	2b02      	cmp	r3, #2
   132ac:	d005      	beq.n	132ba <hciTrSerialRxIncoming+0x142>
        hdrLen = HCI_EVT_HDR_LEN;
   132ae:	2202      	movs	r2, #2
      if (iRx != hdrLen) {
   132b0:	4610      	mov	r0, r2
   132b2:	e7af      	b.n	13214 <hciTrSerialRxIncoming+0x9c>
            stateRx = HCI_RX_STATE_DATA;
   132b4:	2302      	movs	r3, #2
   132b6:	703b      	strb	r3, [r7, #0]
   132b8:	e77f      	b.n	131ba <hciTrSerialRxIncoming+0x42>
   132ba:	f8df e050 	ldr.w	lr, [pc, #80]	; 1330c <hciTrSerialRxIncoming+0x194>
        hdrLen = HCI_EVT_HDR_LEN;
   132be:	461a      	mov	r2, r3
          dataLen = hdrRx[1];
   132c0:	f89e 1001 	ldrb.w	r1, [lr, #1]
   132c4:	9100      	str	r1, [sp, #0]
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   132c6:	440b      	add	r3, r1
   132c8:	b298      	uxth	r0, r3
   132ca:	e7b9      	b.n	13240 <hciTrSerialRxIncoming+0xc8>
   132cc:	f8df e03c 	ldr.w	lr, [pc, #60]	; 1330c <hciTrSerialRxIncoming+0x194>
        hdrLen = HCI_ACL_HDR_LEN;
   132d0:	461a      	mov	r2, r3
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   132d2:	f89e 0003 	ldrb.w	r0, [lr, #3]
   132d6:	f89e 1002 	ldrb.w	r1, [lr, #2]
   132da:	9201      	str	r2, [sp, #4]
   132dc:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   132e0:	b28a      	uxth	r2, r1
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   132e2:	4413      	add	r3, r2
   132e4:	b298      	uxth	r0, r3
   132e6:	2100      	movs	r1, #0
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   132e8:	9200      	str	r2, [sp, #0]
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   132ea:	f004 fccf 	bl	17c8c <WsfMsgDataAlloc>
   132ee:	9a01      	ldr	r2, [sp, #4]
   132f0:	f8ca 0000 	str.w	r0, [sl]
   132f4:	4603      	mov	r3, r0
   132f6:	e7aa      	b.n	1324e <hciTrSerialRxIncoming+0xd6>
  consumed_bytes = 0;
   132f8:	460d      	mov	r5, r1
   132fa:	e779      	b.n	131f0 <hciTrSerialRxIncoming+0x78>
   132fc:	4603      	mov	r3, r0
   132fe:	e7df      	b.n	132c0 <hciTrSerialRxIncoming+0x148>
   13300:	4603      	mov	r3, r0
   13302:	e7e6      	b.n	132d2 <hciTrSerialRxIncoming+0x15a>
   13304:	100059a1 	.word	0x100059a1
   13308:	10005994 	.word	0x10005994
   1330c:	10005990 	.word	0x10005990
   13310:	10005998 	.word	0x10005998
   13314:	1000599c 	.word	0x1000599c
   13318:	1000598c 	.word	0x1000598c
   1331c:	100059a0 	.word	0x100059a0

00013320 <BdaCpy>:
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   13320:	680b      	ldr	r3, [r1, #0]
   13322:	6003      	str	r3, [r0, #0]
   13324:	888b      	ldrh	r3, [r1, #4]
   13326:	8083      	strh	r3, [r0, #4]
}
   13328:	4770      	bx	lr
   1332a:	bf00      	nop

0001332c <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   1332c:	b508      	push	{r3, lr}
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   1332e:	2206      	movs	r2, #6
   13330:	f00d feee 	bl	21110 <memcmp>
}
   13334:	fab0 f080 	clz	r0, r0
   13338:	0940      	lsrs	r0, r0, #5
   1333a:	bd08      	pop	{r3, pc}

0001333c <BdaClr>:
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
  memset(pDst, 0, BDA_ADDR_LEN);
   1333c:	2300      	movs	r3, #0
   1333e:	6003      	str	r3, [r0, #0]
   13340:	8083      	strh	r3, [r0, #4]

  return (pDst + BDA_ADDR_LEN);
}
   13342:	3006      	adds	r0, #6
   13344:	4770      	bx	lr
   13346:	bf00      	nop

00013348 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   13348:	b500      	push	{lr}
   1334a:	b083      	sub	sp, #12
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   1334c:	2300      	movs	r3, #0

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   1334e:	2206      	movs	r2, #6
   13350:	4669      	mov	r1, sp
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   13352:	9300      	str	r3, [sp, #0]
   13354:	f8ad 3004 	strh.w	r3, [sp, #4]
  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   13358:	f00d feda 	bl	21110 <memcmp>
}
   1335c:	fab0 f080 	clz	r0, r0
   13360:	0940      	lsrs	r0, r0, #5
   13362:	b003      	add	sp, #12
   13364:	f85d fb04 	ldr.w	pc, [sp], #4

00013368 <Calc128Cpy>:
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
  memcpy(pDst, pSrc, CALC128_LEN);
   13368:	f8d1 c000 	ldr.w	ip, [r1]
   1336c:	684a      	ldr	r2, [r1, #4]
   1336e:	688b      	ldr	r3, [r1, #8]
   13370:	68c9      	ldr	r1, [r1, #12]
   13372:	60c1      	str	r1, [r0, #12]
   13374:	f8c0 c000 	str.w	ip, [r0]
   13378:	6042      	str	r2, [r0, #4]
   1337a:	6083      	str	r3, [r0, #8]
}
   1337c:	4770      	bx	lr
   1337e:	bf00      	nop

00013380 <Calc128Cpy64>:
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
  memcpy(pDst, pSrc, CALC128_LEN/2);
   13380:	680b      	ldr	r3, [r1, #0]
   13382:	684a      	ldr	r2, [r1, #4]
   13384:	6042      	str	r2, [r0, #4]
   13386:	6003      	str	r3, [r0, #0]
}
   13388:	4770      	bx	lr
   1338a:	bf00      	nop

0001338c <Calc128Xor>:
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   1338c:	1c4b      	adds	r3, r1, #1
   1338e:	1ac3      	subs	r3, r0, r3
   13390:	2b02      	cmp	r3, #2
   13392:	d914      	bls.n	133be <Calc128Xor+0x32>
  {
    *pDst++ ^= *pSrc++;
   13394:	680b      	ldr	r3, [r1, #0]
   13396:	f8d0 c000 	ldr.w	ip, [r0]
   1339a:	6842      	ldr	r2, [r0, #4]
   1339c:	ea83 030c 	eor.w	r3, r3, ip
   133a0:	6003      	str	r3, [r0, #0]
   133a2:	684b      	ldr	r3, [r1, #4]
   133a4:	f8d0 c008 	ldr.w	ip, [r0, #8]
   133a8:	405a      	eors	r2, r3
   133aa:	6042      	str	r2, [r0, #4]
   133ac:	688b      	ldr	r3, [r1, #8]
   133ae:	68c2      	ldr	r2, [r0, #12]
   133b0:	ea83 030c 	eor.w	r3, r3, ip
   133b4:	6083      	str	r3, [r0, #8]
   133b6:	68cb      	ldr	r3, [r1, #12]
   133b8:	4053      	eors	r3, r2
   133ba:	60c3      	str	r3, [r0, #12]
  for (i = CALC128_LEN; i > 0; i--)
   133bc:	4770      	bx	lr
    *pDst++ ^= *pSrc++;
   133be:	f891 c000 	ldrb.w	ip, [r1]
   133c2:	7803      	ldrb	r3, [r0, #0]
   133c4:	7842      	ldrb	r2, [r0, #1]
   133c6:	ea83 030c 	eor.w	r3, r3, ip
   133ca:	7003      	strb	r3, [r0, #0]
   133cc:	784b      	ldrb	r3, [r1, #1]
   133ce:	f890 c002 	ldrb.w	ip, [r0, #2]
   133d2:	4053      	eors	r3, r2
   133d4:	7043      	strb	r3, [r0, #1]
   133d6:	788b      	ldrb	r3, [r1, #2]
   133d8:	78c2      	ldrb	r2, [r0, #3]
   133da:	ea83 030c 	eor.w	r3, r3, ip
   133de:	7083      	strb	r3, [r0, #2]
   133e0:	78cb      	ldrb	r3, [r1, #3]
   133e2:	f890 c004 	ldrb.w	ip, [r0, #4]
   133e6:	4053      	eors	r3, r2
   133e8:	70c3      	strb	r3, [r0, #3]
   133ea:	790b      	ldrb	r3, [r1, #4]
   133ec:	7942      	ldrb	r2, [r0, #5]
   133ee:	ea83 030c 	eor.w	r3, r3, ip
   133f2:	7103      	strb	r3, [r0, #4]
   133f4:	794b      	ldrb	r3, [r1, #5]
   133f6:	f890 c006 	ldrb.w	ip, [r0, #6]
   133fa:	4053      	eors	r3, r2
   133fc:	7143      	strb	r3, [r0, #5]
   133fe:	798b      	ldrb	r3, [r1, #6]
   13400:	79c2      	ldrb	r2, [r0, #7]
   13402:	ea83 030c 	eor.w	r3, r3, ip
   13406:	7183      	strb	r3, [r0, #6]
   13408:	79cb      	ldrb	r3, [r1, #7]
   1340a:	f890 c008 	ldrb.w	ip, [r0, #8]
   1340e:	4053      	eors	r3, r2
   13410:	71c3      	strb	r3, [r0, #7]
   13412:	7a0b      	ldrb	r3, [r1, #8]
   13414:	7a42      	ldrb	r2, [r0, #9]
   13416:	ea83 030c 	eor.w	r3, r3, ip
   1341a:	7203      	strb	r3, [r0, #8]
   1341c:	7a4b      	ldrb	r3, [r1, #9]
   1341e:	4053      	eors	r3, r2
   13420:	7243      	strb	r3, [r0, #9]
   13422:	7a82      	ldrb	r2, [r0, #10]
   13424:	7a8b      	ldrb	r3, [r1, #10]
   13426:	4053      	eors	r3, r2
   13428:	7283      	strb	r3, [r0, #10]
   1342a:	7acb      	ldrb	r3, [r1, #11]
   1342c:	f890 c00b 	ldrb.w	ip, [r0, #11]
   13430:	7b02      	ldrb	r2, [r0, #12]
   13432:	ea83 030c 	eor.w	r3, r3, ip
   13436:	72c3      	strb	r3, [r0, #11]
   13438:	7b0b      	ldrb	r3, [r1, #12]
   1343a:	f890 c00d 	ldrb.w	ip, [r0, #13]
   1343e:	4053      	eors	r3, r2
   13440:	7303      	strb	r3, [r0, #12]
   13442:	7b4b      	ldrb	r3, [r1, #13]
   13444:	7b82      	ldrb	r2, [r0, #14]
   13446:	ea83 030c 	eor.w	r3, r3, ip
   1344a:	7343      	strb	r3, [r0, #13]
   1344c:	7b8b      	ldrb	r3, [r1, #14]
   1344e:	4053      	eors	r3, r2
   13450:	7383      	strb	r3, [r0, #14]
   13452:	7bcb      	ldrb	r3, [r1, #15]
   13454:	7bc2      	ldrb	r2, [r0, #15]
   13456:	4053      	eors	r3, r2
   13458:	73c3      	strb	r3, [r0, #15]
  }
}
   1345a:	4770      	bx	lr

0001345c <CalcCrc32>:
/*************************************************************************************************/
uint32_t CalcCrc32(uint32_t crcInit, uint32_t len, uint8_t *pBuf)
{
  uint32_t crc = crcInit;

  while (len > 0)
   1345c:	b181      	cbz	r1, 13480 <CalcCrc32+0x24>
{
   1345e:	b410      	push	{r4}
   13460:	4c08      	ldr	r4, [pc, #32]	; (13484 <CalcCrc32+0x28>)
   13462:	4411      	add	r1, r2
  {
    crc = crc32Table[*pBuf ^ (uint8_t)crc] ^ (crc >> 8);
   13464:	f812 3b01 	ldrb.w	r3, [r2], #1
   13468:	4043      	eors	r3, r0
   1346a:	b2db      	uxtb	r3, r3
  while (len > 0)
   1346c:	428a      	cmp	r2, r1
    crc = crc32Table[*pBuf ^ (uint8_t)crc] ^ (crc >> 8);
   1346e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   13472:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
  while (len > 0)
   13476:	d1f5      	bne.n	13464 <CalcCrc32+0x8>
  }

  crc = crc ^ 0xFFFFFFFFU;

  return crc;
}
   13478:	43c0      	mvns	r0, r0
   1347a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1347e:	4770      	bx	lr
   13480:	43c0      	mvns	r0, r0
   13482:	4770      	bx	lr
   13484:	00024d2c 	.word	0x00024d2c

00013488 <WStrReverseCpy>:
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
  int16_t i;

  for (i=0; i<len; i++)
   13488:	b17a      	cbz	r2, 134aa <WStrReverseCpy+0x22>
   1348a:	2300      	movs	r3, #0
{
   1348c:	b530      	push	{r4, r5, lr}
  for (i=0; i<len; i++)
   1348e:	469c      	mov	ip, r3
  {
    pBuf1[len-1-i] = pBuf2[i];
   13490:	1e55      	subs	r5, r2, #1
   13492:	1c5c      	adds	r4, r3, #1
   13494:	f811 e003 	ldrb.w	lr, [r1, r3]
   13498:	eba5 0c0c 	sub.w	ip, r5, ip
   1349c:	b223      	sxth	r3, r4
  for (i=0; i<len; i++)
   1349e:	4293      	cmp	r3, r2
    pBuf1[len-1-i] = pBuf2[i];
   134a0:	f800 e00c 	strb.w	lr, [r0, ip]
  for (i=0; i<len; i++)
   134a4:	469c      	mov	ip, r3
   134a6:	dbf4      	blt.n	13492 <WStrReverseCpy+0xa>
  }
}
   134a8:	bd30      	pop	{r4, r5, pc}
   134aa:	4770      	bx	lr

000134ac <WStrReverse>:
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   134ac:	084b      	lsrs	r3, r1, #1
   134ae:	d00c      	beq.n	134ca <WStrReverse+0x1e>
   134b0:	1e5a      	subs	r2, r3, #1
   134b2:	4401      	add	r1, r0
   134b4:	1e43      	subs	r3, r0, #1
   134b6:	fa50 fc82 	uxtab	ip, r0, r2
  {
    temp = pBuf[len-i-1];
    pBuf[len-i-1] = pBuf[i];
   134ba:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    temp = pBuf[len-i-1];
   134be:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    pBuf[len-i-1] = pBuf[i];
   134c2:	7008      	strb	r0, [r1, #0]
  for (i=0; i<len/2; i++)
   134c4:	4563      	cmp	r3, ip
    pBuf[i] = temp;
   134c6:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   134c8:	d1f7      	bne.n	134ba <WStrReverse+0xe>
  }
}
   134ca:	4770      	bx	lr

000134cc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   134cc:	4b0a      	ldr	r3, [pc, #40]	; (134f8 <prvTaskExitError+0x2c>)
   134ce:	681b      	ldr	r3, [r3, #0]
{
   134d0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
   134d2:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
   134d4:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
   134d6:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
   134d8:	d000      	beq.n	134dc <prvTaskExitError+0x10>
   134da:	e7fe      	b.n	134da <prvTaskExitError+0xe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   134dc:	f04f 0380 	mov.w	r3, #128	; 0x80
   134e0:	f383 8811 	msr	BASEPRI, r3
   134e4:	f3bf 8f6f 	isb	sy
   134e8:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   134ec:	9b01      	ldr	r3, [sp, #4]
   134ee:	2b00      	cmp	r3, #0
   134f0:	d0fc      	beq.n	134ec <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   134f2:	b002      	add	sp, #8
   134f4:	4770      	bx	lr
   134f6:	bf00      	nop
   134f8:	10002b28 	.word	0x10002b28

000134fc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   134fc:	4808      	ldr	r0, [pc, #32]	; (13520 <prvPortStartFirstTask+0x24>)
   134fe:	6800      	ldr	r0, [r0, #0]
   13500:	6800      	ldr	r0, [r0, #0]
   13502:	f380 8808 	msr	MSP, r0
   13506:	f04f 0000 	mov.w	r0, #0
   1350a:	f380 8814 	msr	CONTROL, r0
   1350e:	b662      	cpsie	i
   13510:	b661      	cpsie	f
   13512:	f3bf 8f4f 	dsb	sy
   13516:	f3bf 8f6f 	isb	sy
   1351a:	df00      	svc	0
   1351c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   1351e:	0000      	.short	0x0000
   13520:	e000ed08 	.word	0xe000ed08

00013524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   13524:	f8df 000c 	ldr.w	r0, [pc, #12]	; 13534 <vPortEnableVFP+0x10>
   13528:	6801      	ldr	r1, [r0, #0]
   1352a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1352e:	6001      	str	r1, [r0, #0]
   13530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   13532:	0000      	.short	0x0000
   13534:	e000ed88 	.word	0xe000ed88

00013538 <pxPortInitialiseStack>:
{
   13538:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1353a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1353e:	4c07      	ldr	r4, [pc, #28]	; (1355c <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   13540:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   13544:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   13548:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1354c:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   13550:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
   13554:	f85d 4b04 	ldr.w	r4, [sp], #4
   13558:	3844      	subs	r0, #68	; 0x44
   1355a:	4770      	bx	lr
   1355c:	000134cd 	.word	0x000134cd

00013560 <SVC_Handler>:
	__asm volatile (
   13560:	4b07      	ldr	r3, [pc, #28]	; (13580 <pxCurrentTCBConst2>)
   13562:	6819      	ldr	r1, [r3, #0]
   13564:	6808      	ldr	r0, [r1, #0]
   13566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1356a:	f380 8809 	msr	PSP, r0
   1356e:	f3bf 8f6f 	isb	sy
   13572:	f04f 0000 	mov.w	r0, #0
   13576:	f380 8811 	msr	BASEPRI, r0
   1357a:	4770      	bx	lr
   1357c:	f3af 8000 	nop.w

00013580 <pxCurrentTCBConst2>:
   13580:	1000b178 	.word	0x1000b178

00013584 <vPortEnterCritical>:
   13584:	f04f 0380 	mov.w	r3, #128	; 0x80
   13588:	f383 8811 	msr	BASEPRI, r3
   1358c:	f3bf 8f6f 	isb	sy
   13590:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
   13594:	4a07      	ldr	r2, [pc, #28]	; (135b4 <vPortEnterCritical+0x30>)
   13596:	6813      	ldr	r3, [r2, #0]
   13598:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
   1359a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
   1359c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
   1359e:	d000      	beq.n	135a2 <vPortEnterCritical+0x1e>
}
   135a0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   135a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   135a6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
   135aa:	b2db      	uxtb	r3, r3
   135ac:	2b00      	cmp	r3, #0
   135ae:	d0f7      	beq.n	135a0 <vPortEnterCritical+0x1c>
   135b0:	e7fe      	b.n	135b0 <vPortEnterCritical+0x2c>
   135b2:	bf00      	nop
   135b4:	10002b28 	.word	0x10002b28

000135b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   135b8:	4a04      	ldr	r2, [pc, #16]	; (135cc <vPortExitCritical+0x14>)
   135ba:	6813      	ldr	r3, [r2, #0]
   135bc:	b12b      	cbz	r3, 135ca <vPortExitCritical+0x12>
	uxCriticalNesting--;
   135be:	3b01      	subs	r3, #1
   135c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   135c2:	b90b      	cbnz	r3, 135c8 <vPortExitCritical+0x10>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   135c4:	f383 8811 	msr	BASEPRI, r3
}
   135c8:	4770      	bx	lr
	configASSERT( uxCriticalNesting );
   135ca:	e7fe      	b.n	135ca <vPortExitCritical+0x12>
   135cc:	10002b28 	.word	0x10002b28

000135d0 <PendSV_Handler>:
	__asm volatile
   135d0:	f3ef 8009 	mrs	r0, PSP
   135d4:	f3bf 8f6f 	isb	sy
   135d8:	4b15      	ldr	r3, [pc, #84]	; (13630 <pxCurrentTCBConst>)
   135da:	681a      	ldr	r2, [r3, #0]
   135dc:	f01e 0f10 	tst.w	lr, #16
   135e0:	bf08      	it	eq
   135e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   135e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135ea:	6010      	str	r0, [r2, #0]
   135ec:	e92d 0009 	stmdb	sp!, {r0, r3}
   135f0:	f04f 0080 	mov.w	r0, #128	; 0x80
   135f4:	f380 8811 	msr	BASEPRI, r0
   135f8:	f3bf 8f4f 	dsb	sy
   135fc:	f3bf 8f6f 	isb	sy
   13600:	f00b fb04 	bl	1ec0c <vTaskSwitchContext>
   13604:	f04f 0000 	mov.w	r0, #0
   13608:	f380 8811 	msr	BASEPRI, r0
   1360c:	bc09      	pop	{r0, r3}
   1360e:	6819      	ldr	r1, [r3, #0]
   13610:	6808      	ldr	r0, [r1, #0]
   13612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13616:	f01e 0f10 	tst.w	lr, #16
   1361a:	bf08      	it	eq
   1361c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   13620:	f380 8809 	msr	PSP, r0
   13624:	f3bf 8f6f 	isb	sy
   13628:	4770      	bx	lr
   1362a:	bf00      	nop
   1362c:	f3af 8000 	nop.w

00013630 <pxCurrentTCBConst>:
   13630:	1000b178 	.word	0x1000b178

00013634 <SysTick_Handler>:
{
   13634:	b508      	push	{r3, lr}
	__asm volatile
   13636:	f04f 0380 	mov.w	r3, #128	; 0x80
   1363a:	f383 8811 	msr	BASEPRI, r3
   1363e:	f3bf 8f6f 	isb	sy
   13642:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
   13646:	f00b f949 	bl	1e8dc <xTaskIncrementTick>
   1364a:	b128      	cbz	r0, 13658 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   1364c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   13650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13654:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
   13658:	2300      	movs	r3, #0
   1365a:	f383 8811 	msr	BASEPRI, r3
}
   1365e:	bd08      	pop	{r3, pc}

00013660 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   13660:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   13664:	2b0f      	cmp	r3, #15
   13666:	d906      	bls.n	13676 <vPortValidateInterruptPriority+0x16>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   13668:	4909      	ldr	r1, [pc, #36]	; (13690 <vPortValidateInterruptPriority+0x30>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   1366a:	4a0a      	ldr	r2, [pc, #40]	; (13694 <vPortValidateInterruptPriority+0x34>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   1366c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   1366e:	7812      	ldrb	r2, [r2, #0]
   13670:	429a      	cmp	r2, r3
   13672:	d900      	bls.n	13676 <vPortValidateInterruptPriority+0x16>
   13674:	e7fe      	b.n	13674 <vPortValidateInterruptPriority+0x14>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   13676:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1367a:	4a07      	ldr	r2, [pc, #28]	; (13698 <vPortValidateInterruptPriority+0x38>)
   1367c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
   13680:	6812      	ldr	r2, [r2, #0]
   13682:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   13686:	4293      	cmp	r3, r2
   13688:	d900      	bls.n	1368c <vPortValidateInterruptPriority+0x2c>
   1368a:	e7fe      	b.n	1368a <vPortValidateInterruptPriority+0x2a>
	}
   1368c:	4770      	bx	lr
   1368e:	bf00      	nop
   13690:	e000e3f0 	.word	0xe000e3f0
   13694:	100059ac 	.word	0x100059ac
   13698:	100059b0 	.word	0x100059b0

0001369c <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   1369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   136a0:	4b2c      	ldr	r3, [pc, #176]	; (13754 <vPortSuppressTicksAndSleep+0xb8>)


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   136a2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1375c <vPortSuppressTicksAndSleep+0xc0>
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   136a6:	f8d3 a000 	ldr.w	sl, [r3]
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   136aa:	f8d9 8000 	ldr.w	r8, [r9]
{
   136ae:	4605      	mov	r5, r0

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   136b0:	b672      	cpsid	i
	__asm volatile( "dsb" );
   136b2:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   136b6:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    uint32_t curTime = am_hal_stimer_counter_get();
   136ba:	f00f ffa3 	bl	23604 <am_hal_stimer_counter_get>
    gF_stimerGetHistory[gF_stimerGetHistoryCount][1] = curTime;
    gF_stimerGetHistory[gF_stimerGetHistoryCount][2] = AM_REGVAL(AM_REG_STIMER_COMPARE(0, 0));
    gF_stimerGetHistory[gF_stimerGetHistoryCount][3] = gF_stimerHistoryCount;
    gF_stimerGetHistoryCount++;
#endif
    elapsed_time = curTime - g_lastSTimerVal;
   136be:	4f26      	ldr	r7, [pc, #152]	; (13758 <vPortSuppressTicksAndSleep+0xbc>)
    uint32_t curTime = am_hal_stimer_counter_get();
   136c0:	4604      	mov	r4, r0
    elapsed_time = curTime - g_lastSTimerVal;
   136c2:	683e      	ldr	r6, [r7, #0]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   136c4:	f00b fc46 	bl	1ef54 <eTaskConfirmSleepModeStatus>
   136c8:	b158      	cbz	r0, 136e2 <vPortSuppressTicksAndSleep+0x46>
   136ca:	4555      	cmp	r5, sl
   136cc:	f8d9 3000 	ldr.w	r3, [r9]
   136d0:	bf28      	it	cs
   136d2:	4655      	movcs	r5, sl
   136d4:	1b9b      	subs	r3, r3, r6
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   136d6:	1e69      	subs	r1, r5, #1
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   136d8:	4423      	add	r3, r4
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   136da:	fb08 f801 	mul.w	r8, r8, r1
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   136de:	4543      	cmp	r3, r8
   136e0:	d902      	bls.n	136e8 <vPortSuppressTicksAndSleep+0x4c>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   136e2:	b662      	cpsie	i

	}
}
   136e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ulReloadValue -= elapsed_time;
   136e8:	4446      	add	r6, r8
   136ea:	1b34      	subs	r4, r6, r4
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   136ec:	4621      	mov	r1, r4
   136ee:	2000      	movs	r0, #0
   136f0:	f00f ff98 	bl	23624 <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulReloadValue+1);
   136f4:	2001      	movs	r0, #1
   136f6:	1c61      	adds	r1, r4, #1
   136f8:	f00f ff94 	bl	23624 <am_hal_stimer_compare_delta_set>
		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   136fc:	4628      	mov	r0, r5
   136fe:	f7fc f9d5 	bl	faac <am_freertos_sleep>
		if( xModifiableIdleTime > 0 )
   13702:	b120      	cbz	r0, 1370e <vPortSuppressTicksAndSleep+0x72>
			__asm volatile( "dsb" );
   13704:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   13708:	bf30      	wfi
			__asm volatile( "isb" );
   1370a:	f3bf 8f6f 	isb	sy
		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   1370e:	4628      	mov	r0, r5
   13710:	f7fc f9d2 	bl	fab8 <am_freertos_wakeup>
        New_Timer = am_hal_stimer_counter_get();
   13714:	f00f ff76 	bl	23604 <am_hal_stimer_counter_get>
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   13718:	683b      	ldr	r3, [r7, #0]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   1371a:	f8d9 1000 	ldr.w	r1, [r9]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   1371e:	1ac3      	subs	r3, r0, r3
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   13720:	fbb3 f2f1 	udiv	r2, r3, r1
   13724:	fb01 3312 	mls	r3, r1, r2, r3
   13728:	1ac3      	subs	r3, r0, r3
        vTaskStepTick( Delta_Sleep );
   1372a:	4610      	mov	r0, r2
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   1372c:	603b      	str	r3, [r7, #0]
        vTaskStepTick( Delta_Sleep );
   1372e:	f00b f8c5 	bl	1e8bc <vTaskStepTick>
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   13732:	2003      	movs	r0, #3
   13734:	f00f ffdc 	bl	236f0 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   13738:	f8d9 1000 	ldr.w	r1, [r9]
   1373c:	2000      	movs	r0, #0
   1373e:	f00f ff71 	bl	23624 <am_hal_stimer_compare_delta_set>
        am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   13742:	f8d9 1000 	ldr.w	r1, [r9]
   13746:	2001      	movs	r0, #1
   13748:	4401      	add	r1, r0
   1374a:	f00f ff6b 	bl	23624 <am_hal_stimer_compare_delta_set>
		__asm volatile( "cpsie i" );
   1374e:	b662      	cpsie	i
}
   13750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13754:	100059b8 	.word	0x100059b8
   13758:	100059a8 	.word	0x100059a8
   1375c:	100059b4 	.word	0x100059b4

00013760 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   13760:	b570      	push	{r4, r5, r6, lr}

    curSTimer = am_hal_stimer_counter_get();
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   13762:	4e1c      	ldr	r6, [pc, #112]	; (137d4 <xPortStimerTickHandler+0x74>)
{
   13764:	4604      	mov	r4, r0
    curSTimer = am_hal_stimer_counter_get();
   13766:	f00f ff4d 	bl	23604 <am_hal_stimer_counter_get>
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   1376a:	6831      	ldr	r1, [r6, #0]
    curSTimer = am_hal_stimer_counter_get();
   1376c:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   1376e:	1b09      	subs	r1, r1, r4
   13770:	2000      	movs	r0, #0
   13772:	f00f ff57 	bl	23624 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   13776:	6831      	ldr	r1, [r6, #0]
   13778:	2001      	movs	r0, #1
   1377a:	4401      	add	r1, r0
   1377c:	1b09      	subs	r1, r1, r4
   1377e:	f00f ff51 	bl	23624 <am_hal_stimer_compare_delta_set>
#endif

    timerCounts = curSTimer - g_lastSTimerVal;
   13782:	4915      	ldr	r1, [pc, #84]	; (137d8 <xPortStimerTickHandler+0x78>)
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   13784:	6832      	ldr	r2, [r6, #0]
    timerCounts = curSTimer - g_lastSTimerVal;
   13786:	680b      	ldr	r3, [r1, #0]
   13788:	1aeb      	subs	r3, r5, r3
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   1378a:	fbb3 f4f2 	udiv	r4, r3, r2
    remainder = timerCounts % ulTimerCountsForOneTick;
   1378e:	fb02 3014 	mls	r0, r2, r4, r3
    g_lastSTimerVal = curSTimer - remainder;
   13792:	1a2d      	subs	r5, r5, r0
   13794:	600d      	str	r5, [r1, #0]
	__asm volatile
   13796:	f3ef 8111 	mrs	r1, BASEPRI
   1379a:	f04f 0080 	mov.w	r0, #128	; 0x80
   1379e:	f380 8811 	msr	BASEPRI, r0
   137a2:	f3bf 8f6f 	isb	sy
   137a6:	f3bf 8f4f 	dsb	sy
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   137aa:	429a      	cmp	r2, r3
   137ac:	d80e      	bhi.n	137cc <xPortStimerTickHandler+0x6c>
    BaseType_t ctxtSwitchReqd = pdFALSE;
   137ae:	2500      	movs	r5, #0
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   137b0:	f00b f894 	bl	1e8dc <xTaskIncrementTick>
   137b4:	2800      	cmp	r0, #0
   137b6:	bf18      	it	ne
   137b8:	2501      	movne	r5, #1
        while (numTicksElapsed--)
   137ba:	3c01      	subs	r4, #1
   137bc:	d1f8      	bne.n	137b0 <xPortStimerTickHandler+0x50>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   137be:	b12d      	cbz	r5, 137cc <xPortStimerTickHandler+0x6c>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   137c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   137c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   137c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
   137cc:	2300      	movs	r3, #0
   137ce:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   137d2:	bd70      	pop	{r4, r5, r6, pc}
   137d4:	100059b4 	.word	0x100059b4
   137d8:	100059a8 	.word	0x100059a8

000137dc <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   137dc:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   137de:	2000      	movs	r0, #0
   137e0:	f00f ff8c 	bl	236fc <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   137e4:	07c3      	lsls	r3, r0, #31
   137e6:	d400      	bmi.n	137ea <am_stimer_cmpr0_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
    }
}
   137e8:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   137ea:	2001      	movs	r0, #1
   137ec:	f00f ff80 	bl	236f0 <am_hal_stimer_int_clear>
}
   137f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(0);
   137f4:	2000      	movs	r0, #0
   137f6:	f7ff bfb3 	b.w	13760 <xPortStimerTickHandler>
   137fa:	bf00      	nop

000137fc <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   137fc:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   137fe:	2000      	movs	r0, #0
   13800:	f00f ff7c 	bl	236fc <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   13804:	0783      	lsls	r3, r0, #30
   13806:	d400      	bmi.n	1380a <am_stimer_cmpr1_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
    }
}
   13808:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   1380a:	2002      	movs	r0, #2
   1380c:	f00f ff70 	bl	236f0 <am_hal_stimer_int_clear>
        gNumCmpB++;
   13810:	4a04      	ldr	r2, [pc, #16]	; (13824 <am_stimer_cmpr1_isr+0x28>)
   13812:	6813      	ldr	r3, [r2, #0]
        xPortStimerTickHandler(1);
   13814:	2001      	movs	r0, #1
        gNumCmpB++;
   13816:	4403      	add	r3, r0
   13818:	6013      	str	r3, [r2, #0]
}
   1381a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(1);
   1381e:	f7ff bf9f 	b.w	13760 <xPortStimerTickHandler>
   13822:	bf00      	nop
   13824:	100059a4 	.word	0x100059a4

00013828 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   13828:	b538      	push	{r3, r4, r5, lr}
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
#ifdef AM_FREERTOS_STIMER_BACKUP
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   1382a:	4b18      	ldr	r3, [pc, #96]	; (1388c <vPortSetupTimerInterrupt+0x64>)
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   1382c:	4d18      	ldr	r5, [pc, #96]	; (13890 <vPortSetupTimerInterrupt+0x68>)
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick - 1;
   1382e:	4a19      	ldr	r2, [pc, #100]	; (13894 <vPortSetupTimerInterrupt+0x6c>)
   13830:	601a      	str	r2, [r3, #0]
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   13832:	2120      	movs	r1, #32
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   13834:	2003      	movs	r0, #3
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   13836:	6029      	str	r1, [r5, #0]
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA | AM_HAL_STIMER_INT_COMPAREB);
   13838:	f00f ff50 	bl	236dc <am_hal_stimer_int_enable>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1383c:	4b16      	ldr	r3, [pc, #88]	; (13898 <vPortSetupTimerInterrupt+0x70>)
   1383e:	22e0      	movs	r2, #224	; 0xe0
   13840:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13844:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   13848:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1384a:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1384e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   13852:	601a      	str	r2, [r3, #0]
#endif // AM_CMSIS_REGS
#endif
    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   13854:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   13858:	f00f feca 	bl	235f0 <am_hal_stimer_config>
   1385c:	4604      	mov	r4, r0
    g_lastSTimerVal = am_hal_stimer_counter_get();
   1385e:	f00f fed1 	bl	23604 <am_hal_stimer_counter_get>
   13862:	4b0e      	ldr	r3, [pc, #56]	; (1389c <vPortSetupTimerInterrupt+0x74>)
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   13864:	6829      	ldr	r1, [r5, #0]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   13866:	6018      	str	r0, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   13868:	2000      	movs	r0, #0
   1386a:	f00f fedb 	bl	23624 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, ulTimerCountsForOneTick+1);
   1386e:	6829      	ldr	r1, [r5, #0]
   13870:	2001      	movs	r0, #1
   13872:	4401      	add	r1, r0
   13874:	f00f fed6 	bl	23624 <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   13878:	4809      	ldr	r0, [pc, #36]	; (138a0 <vPortSetupTimerInterrupt+0x78>)
   1387a:	4020      	ands	r0, r4
   1387c:	f440 7040 	orr.w	r0, r0, #768	; 0x300
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   13880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE | CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE | AM_HAL_STIMER_CFG_COMPARE_B_ENABLE);
   13884:	f040 0003 	orr.w	r0, r0, #3
   13888:	f00f beb2 	b.w	235f0 <am_hal_stimer_config>
   1388c:	100059b8 	.word	0x100059b8
   13890:	100059b4 	.word	0x100059b4
   13894:	07fffffe 	.word	0x07fffffe
   13898:	e000e100 	.word	0xe000e100
   1389c:	100059a8 	.word	0x100059a8
   138a0:	7ffffcf0 	.word	0x7ffffcf0

000138a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   138a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   138a8:	4a36      	ldr	r2, [pc, #216]	; (13984 <xPortStartScheduler+0xe0>)
   138aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
   138ae:	4291      	cmp	r1, r2
   138b0:	d02b      	beq.n	1390a <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   138b2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
   138b6:	4b34      	ldr	r3, [pc, #208]	; (13988 <xPortStartScheduler+0xe4>)
   138b8:	429a      	cmp	r2, r3
   138ba:	d027      	beq.n	1390c <xPortStartScheduler+0x68>
{
   138bc:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   138be:	4b33      	ldr	r3, [pc, #204]	; (1398c <xPortStartScheduler+0xe8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   138c0:	4933      	ldr	r1, [pc, #204]	; (13990 <xPortStartScheduler+0xec>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   138c2:	781a      	ldrb	r2, [r3, #0]
{
   138c4:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   138c6:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   138c8:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   138ca:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   138cc:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	b2db      	uxtb	r3, r3
   138d2:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   138d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   138da:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   138de:	f003 0380 	and.w	r3, r3, #128	; 0x80
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   138e2:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   138e4:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   138e6:	d50f      	bpl.n	13908 <xPortStartScheduler+0x64>
   138e8:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   138ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   138ee:	005b      	lsls	r3, r3, #1
   138f0:	b2db      	uxtb	r3, r3
   138f2:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   138f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   138fa:	061b      	lsls	r3, r3, #24
   138fc:	4611      	mov	r1, r2
   138fe:	f102 32ff 	add.w	r2, r2, #4294967295
   13902:	d4f2      	bmi.n	138ea <xPortStartScheduler+0x46>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   13904:	2904      	cmp	r1, #4
   13906:	d002      	beq.n	1390e <xPortStartScheduler+0x6a>
   13908:	e7fe      	b.n	13908 <xPortStartScheduler+0x64>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   1390a:	e7fe      	b.n	1390a <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   1390c:	e7fe      	b.n	1390c <xPortStartScheduler+0x68>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1390e:	9b02      	ldr	r3, [sp, #8]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   13910:	4920      	ldr	r1, [pc, #128]	; (13994 <xPortStartScheduler+0xf0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   13912:	4a1e      	ldr	r2, [pc, #120]	; (1398c <xPortStartScheduler+0xe8>)
	uxCriticalNesting = 0;
   13914:	4d20      	ldr	r5, [pc, #128]	; (13998 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   13916:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   1391a:	f44f 6080 	mov.w	r0, #1024	; 0x400
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   1391e:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   13920:	6008      	str	r0, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   13922:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   13924:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
   13928:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   1392c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   13930:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
   13934:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   13938:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
   1393c:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
   1393e:	f7ff ff73 	bl	13828 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
   13942:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
   13944:	f7ff fdee 	bl	13524 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   13948:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
   1394c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   13950:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
   13954:	f7ff fdd2 	bl	134fc <prvPortStartFirstTask>
	vTaskSwitchContext();
   13958:	f00b f958 	bl	1ec0c <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
   1395c:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
   1395e:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
   13960:	3301      	adds	r3, #1
   13962:	d000      	beq.n	13966 <xPortStartScheduler+0xc2>
   13964:	e7fe      	b.n	13964 <xPortStartScheduler+0xc0>
	__asm volatile
   13966:	f04f 0380 	mov.w	r3, #128	; 0x80
   1396a:	f383 8811 	msr	BASEPRI, r3
   1396e:	f3bf 8f6f 	isb	sy
   13972:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
   13976:	9b03      	ldr	r3, [sp, #12]
   13978:	2b00      	cmp	r3, #0
   1397a:	d0fc      	beq.n	13976 <xPortStartScheduler+0xd2>
}
   1397c:	2000      	movs	r0, #0
   1397e:	b004      	add	sp, #16
   13980:	bd70      	pop	{r4, r5, r6, pc}
   13982:	bf00      	nop
   13984:	410fc271 	.word	0x410fc271
   13988:	410fc270 	.word	0x410fc270
   1398c:	e000e400 	.word	0xe000e400
   13990:	100059ac 	.word	0x100059ac
   13994:	100059b0 	.word	0x100059b0
   13998:	10002b28 	.word	0x10002b28

0001399c <HciEvtRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
  hciCb.evtCback = evtCback;
   1399c:	4b01      	ldr	r3, [pc, #4]	; (139a4 <HciEvtRegister+0x8>)
   1399e:	6098      	str	r0, [r3, #8]
}
   139a0:	4770      	bx	lr
   139a2:	bf00      	nop
   139a4:	100059bc 	.word	0x100059bc

000139a8 <HciSecRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
  hciCb.secCback = secCback;
   139a8:	4b01      	ldr	r3, [pc, #4]	; (139b0 <HciSecRegister+0x8>)
   139aa:	60d8      	str	r0, [r3, #12]
}
   139ac:	4770      	bx	lr
   139ae:	bf00      	nop
   139b0:	100059bc 	.word	0x100059bc

000139b4 <HciAclRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
  hciCb.aclCback = aclCback;
   139b4:	4b01      	ldr	r3, [pc, #4]	; (139bc <HciAclRegister+0x8>)
  hciCb.flowCback = flowCback;
   139b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
   139ba:	4770      	bx	lr
   139bc:	100059bc 	.word	0x100059bc

000139c0 <HciHandlerInit>:
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
  /* store handler ID */
  hciCb.handlerId = handlerId;
   139c0:	4b03      	ldr	r3, [pc, #12]	; (139d0 <HciHandlerInit+0x10>)

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   139c2:	2200      	movs	r2, #0
   139c4:	e9c3 2200 	strd	r2, r2, [r3]
  hciCb.handlerId = handlerId;
   139c8:	7618      	strb	r0, [r3, #24]

  /* perform other hci initialization */
  HciCoreInit();
   139ca:	f7fe b9cd 	b.w	11d68 <HciCoreInit>
   139ce:	bf00      	nop
   139d0:	100059bc 	.word	0x100059bc

000139d4 <HciHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  HciCoreHandler(event, pMsg);
   139d4:	f7fe baec 	b.w	11fb0 <HciCoreHandler>

000139d8 <GapDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GapDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   139d8:	b510      	push	{r4, lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGapSvcUuid,
   139da:	4c05      	ldr	r4, [pc, #20]	; (139f0 <GapDiscover+0x18>)
   139dc:	4a05      	ldr	r2, [pc, #20]	; (139f4 <GapDiscover+0x1c>)
{
   139de:	b082      	sub	sp, #8
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGapSvcUuid,
   139e0:	2302      	movs	r3, #2
   139e2:	e9cd 4100 	strd	r4, r1, [sp]
   139e6:	4619      	mov	r1, r3
   139e8:	f00c fe18 	bl	2061c <AppDiscFindService>
                     GAP_HDL_LIST_LEN, (attcDiscChar_t **) gapDiscCharList, pHdlList);
}
   139ec:	b002      	add	sp, #8
   139ee:	bd10      	pop	{r4, pc}
   139f0:	10002b2c 	.word	0x10002b2c
   139f4:	000259b4 	.word	0x000259b4

000139f8 <amdtpcSendAck>:
    }
}

static eAmdtpStatus_t
amdtpcSendAck(eAmdtpPktType_t type, bool_t encrypted, bool_t enableACK, uint8_t *buf, uint16_t len)
{
   139f8:	b510      	push	{r4, lr}
   139fa:	b082      	sub	sp, #8
   139fc:	4694      	mov	ip, r2
   139fe:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    dmConnId_t connId;

    AmdtpBuildPkt(&amdtpcCb.core, type, encrypted, enableACK, buf, len);
   13a02:	9401      	str	r4, [sp, #4]
{
   13a04:	461c      	mov	r4, r3
    AmdtpBuildPkt(&amdtpcCb.core, type, encrypted, enableACK, buf, len);
   13a06:	9400      	str	r4, [sp, #0]
   13a08:	4c0f      	ldr	r4, [pc, #60]	; (13a48 <amdtpcSendAck+0x50>)
   13a0a:	460a      	mov	r2, r1
   13a0c:	4663      	mov	r3, ip
   13a0e:	4601      	mov	r1, r0
   13a10:	f104 0008 	add.w	r0, r4, #8
   13a14:	f000 fb50 	bl	140b8 <AmdtpBuildPkt>

    if ((connId = AppConnIsOpen()) == DM_CONN_ID_NONE)
   13a18:	f00c ff04 	bl	20824 <AppConnIsOpen>
   13a1c:	b170      	cbz	r0, 13a3c <amdtpcSendAck+0x44>
    {
        APP_TRACE_INFO0("AmdtpcSendAck() no connection\n");
        return AMDTP_STATUS_TX_NOT_READY;
    }

    if (amdtpcCb.attAckHdl != ATT_HANDLE_NONE)
   13a1e:	88a1      	ldrh	r1, [r4, #4]
   13a20:	b131      	cbz	r1, 13a30 <amdtpcSendAck+0x38>
    {
        //APP_TRACE_INFO2("rxHdl = 0x%x, ackHdl = 0x%x\n", amdtpcCb.attRxHdl, amdtpcCb.attAckHdl);
        AttcWriteCmd(connId, amdtpcCb.attAckHdl, amdtpcCb.core.ackPkt.len, amdtpcCb.core.ackPkt.data);
   13a22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13a24:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   13a26:	f002 f905 	bl	15c34 <AttcWriteCmd>
    else
    {
        APP_TRACE_INFO1("Invalid attAckHdl = 0x%x\n", amdtpcCb.attAckHdl);
        return AMDTP_STATUS_TX_NOT_READY;
    }
    return AMDTP_STATUS_SUCCESS;
   13a2a:	2000      	movs	r0, #0
}
   13a2c:	b002      	add	sp, #8
   13a2e:	bd10      	pop	{r4, pc}
        APP_TRACE_INFO1("Invalid attAckHdl = 0x%x\n", amdtpcCb.attAckHdl);
   13a30:	4806      	ldr	r0, [pc, #24]	; (13a4c <amdtpcSendAck+0x54>)
   13a32:	f004 fcb5 	bl	183a0 <WsfTrace>
   13a36:	2007      	movs	r0, #7
}
   13a38:	b002      	add	sp, #8
   13a3a:	bd10      	pop	{r4, pc}
        APP_TRACE_INFO0("AmdtpcSendAck() no connection\n");
   13a3c:	4804      	ldr	r0, [pc, #16]	; (13a50 <amdtpcSendAck+0x58>)
   13a3e:	f004 fcaf 	bl	183a0 <WsfTrace>
        return AMDTP_STATUS_TX_NOT_READY;
   13a42:	2007      	movs	r0, #7
}
   13a44:	b002      	add	sp, #8
   13a46:	bd10      	pop	{r4, pc}
   13a48:	100059ec 	.word	0x100059ec
   13a4c:	0002515c 	.word	0x0002515c
   13a50:	0002513c 	.word	0x0002513c

00013a54 <amdtpcSendData>:
{
   13a54:	b570      	push	{r4, r5, r6, lr}
   13a56:	4605      	mov	r5, r0
   13a58:	460c      	mov	r4, r1
    if ((connId = AppConnIsOpen()) == DM_CONN_ID_NONE)
   13a5a:	f00c fee3 	bl	20824 <AppConnIsOpen>
   13a5e:	b170      	cbz	r0, 13a7e <amdtpcSendData+0x2a>
    if (amdtpcCb.attRxHdl != ATT_HANDLE_NONE)
   13a60:	4e09      	ldr	r6, [pc, #36]	; (13a88 <amdtpcSendData+0x34>)
   13a62:	8871      	ldrh	r1, [r6, #2]
   13a64:	b131      	cbz	r1, 13a74 <amdtpcSendData+0x20>
        AttcWriteCmd(connId, amdtpcCb.attRxHdl, len, buf);
   13a66:	462b      	mov	r3, r5
   13a68:	4622      	mov	r2, r4
   13a6a:	f002 f8e3 	bl	15c34 <AttcWriteCmd>
        amdtpcCb.txReady = false;
   13a6e:	2300      	movs	r3, #0
   13a70:	7033      	strb	r3, [r6, #0]
}
   13a72:	bd70      	pop	{r4, r5, r6, pc}
   13a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        APP_TRACE_WARN1("Invalid attRxHdl = 0x%x\n", amdtpcCb.attRxHdl);
   13a78:	4804      	ldr	r0, [pc, #16]	; (13a8c <amdtpcSendData+0x38>)
   13a7a:	f004 bc91 	b.w	183a0 <WsfTrace>
}
   13a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        APP_TRACE_INFO0("AmdtpcSendData() no connection\n");
   13a82:	4803      	ldr	r0, [pc, #12]	; (13a90 <amdtpcSendData+0x3c>)
   13a84:	f004 bc8c 	b.w	183a0 <WsfTrace>
   13a88:	100059ec 	.word	0x100059ec
   13a8c:	00025198 	.word	0x00025198
   13a90:	00025178 	.word	0x00025178

00013a94 <AmdtpcDiscover>:
{
   13a94:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_128_UUID_LEN, (uint8_t *) amdtpSvcUuid,
   13a96:	4b06      	ldr	r3, [pc, #24]	; (13ab0 <AmdtpcDiscover+0x1c>)
   13a98:	4a06      	ldr	r2, [pc, #24]	; (13ab4 <AmdtpcDiscover+0x20>)
{
   13a9a:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_128_UUID_LEN, (uint8_t *) amdtpSvcUuid,
   13a9c:	e9cd 3100 	strd	r3, r1, [sp]
   13aa0:	2305      	movs	r3, #5
   13aa2:	2110      	movs	r1, #16
   13aa4:	f00c fdba 	bl	2061c <AppDiscFindService>
}
   13aa8:	b003      	add	sp, #12
   13aaa:	f85d fb04 	ldr.w	pc, [sp], #4
   13aae:	bf00      	nop
   13ab0:	10002b34 	.word	0x10002b34
   13ab4:	000252d0 	.word	0x000252d0

00013ab8 <amdtpc_init>:

void
amdtpc_init(wsfHandlerId_t handlerId, amdtpRecvCback_t recvCback, amdtpTransCback_t transCback)
{
   13ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset(&amdtpcCb, 0, sizeof(amdtpcCb));
   13aba:	4c14      	ldr	r4, [pc, #80]	; (13b0c <amdtpc_init+0x54>)
{
   13abc:	4615      	mov	r5, r2
   13abe:	4607      	mov	r7, r0
    memset(&amdtpcCb, 0, sizeof(amdtpcCb));
   13ac0:	2258      	movs	r2, #88	; 0x58
{
   13ac2:	460e      	mov	r6, r1
    memset(&amdtpcCb, 0, sizeof(amdtpcCb));
   13ac4:	4620      	mov	r0, r4
   13ac6:	2100      	movs	r1, #0
   13ac8:	f00d fb54 	bl	21174 <memset>
    amdtpcCb.txReady = false;
    amdtpcCb.core.txState = AMDTP_STATE_TX_IDLE;
   13acc:	2301      	movs	r3, #1
    amdtpcCb.core.timeoutTimer.handlerId = handlerId;

    amdtpcCb.core.lastRxPktSn = 0;
    amdtpcCb.core.txPktSn = 0;

    resetPkt(&amdtpcCb.core.rxPkt);
   13ace:	f104 000c 	add.w	r0, r4, #12
    amdtpcCb.core.txState = AMDTP_STATE_TX_IDLE;
   13ad2:	7223      	strb	r3, [r4, #8]
    amdtpcCb.core.timeoutTimer.handlerId = handlerId;
   13ad4:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
    resetPkt(&amdtpcCb.core.rxPkt);
   13ad8:	f000 f910 	bl	13cfc <resetPkt>
    amdtpcCb.core.rxPkt.data = rxPktBuf;
   13adc:	4b0c      	ldr	r3, [pc, #48]	; (13b10 <amdtpc_init+0x58>)
   13ade:	6163      	str	r3, [r4, #20]

    resetPkt(&amdtpcCb.core.txPkt);
   13ae0:	f104 0018 	add.w	r0, r4, #24
   13ae4:	f000 f90a 	bl	13cfc <resetPkt>
    amdtpcCb.core.txPkt.data = txPktBuf;
   13ae8:	4b0a      	ldr	r3, [pc, #40]	; (13b14 <amdtpc_init+0x5c>)
   13aea:	6223      	str	r3, [r4, #32]

    resetPkt(&amdtpcCb.core.ackPkt);
   13aec:	f104 0024 	add.w	r0, r4, #36	; 0x24
   13af0:	f000 f904 	bl	13cfc <resetPkt>
    amdtpcCb.core.ackPkt.data = ackPktBuf;
   13af4:	4b08      	ldr	r3, [pc, #32]	; (13b18 <amdtpc_init+0x60>)
    amdtpcCb.core.recvCback = recvCback;
    amdtpcCb.core.transCback = transCback;

    amdtpcCb.core.txTimeoutMs = TX_TIMEOUT_DEFAULT;

    amdtpcCb.core.data_sender_func = amdtpcSendData;
   13af6:	4a09      	ldr	r2, [pc, #36]	; (13b1c <amdtpc_init+0x64>)
    amdtpcCb.core.ackPkt.data = ackPktBuf;
   13af8:	62e3      	str	r3, [r4, #44]	; 0x2c
    amdtpcCb.core.txTimeoutMs = TX_TIMEOUT_DEFAULT;
   13afa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    amdtpcCb.core.ack_sender_func = amdtpcSendAck;
   13afe:	4b08      	ldr	r3, [pc, #32]	; (13b20 <amdtpc_init+0x68>)
    amdtpcCb.core.txTimeoutMs = TX_TIMEOUT_DEFAULT;
   13b00:	6461      	str	r1, [r4, #68]	; 0x44
    amdtpcCb.core.data_sender_func = amdtpcSendData;
   13b02:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
    amdtpcCb.core.recvCback = recvCback;
   13b06:	64a6      	str	r6, [r4, #72]	; 0x48
    amdtpcCb.core.ack_sender_func = amdtpcSendAck;
   13b08:	6563      	str	r3, [r4, #84]	; 0x54
}
   13b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b0c:	100059ec 	.word	0x100059ec
   13b10:	10005a44 	.word	0x10005a44
   13b14:	1000624c 	.word	0x1000624c
   13b18:	100059d8 	.word	0x100059d8
   13b1c:	00013a55 	.word	0x00013a55
   13b20:	000139f9 	.word	0x000139f9

00013b24 <amdtpc_start>:
    resetPkt(&amdtpcCb.core.ackPkt);
}

void
amdtpc_start(uint16_t rxHdl, uint16_t ackHdl, uint8_t timerEvt)
{
   13b24:	b510      	push	{r4, lr}
    amdtpcCb.txReady = true;
   13b26:	4c0c      	ldr	r4, [pc, #48]	; (13b58 <amdtpc_start+0x34>)
   13b28:	2301      	movs	r3, #1
   13b2a:	7023      	strb	r3, [r4, #0]
    amdtpcCb.attRxHdl = rxHdl;
   13b2c:	8060      	strh	r0, [r4, #2]
    amdtpcCb.attAckHdl = ackHdl;
   13b2e:	80a1      	strh	r1, [r4, #4]
    amdtpcCb.core.timeoutTimer.msg.event = timerEvt;
   13b30:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e

    dmConnId_t connId;

    if ((connId = AppConnIsOpen()) == DM_CONN_ID_NONE)
   13b34:	f00c fe76 	bl	20824 <AppConnIsOpen>
   13b38:	b140      	cbz	r0, 13b4c <amdtpc_start+0x28>
    {
        APP_TRACE_INFO0("amdtpc_start() no connection\n");
        return;
    }

    amdtpcCb.core.attMtuSize = AttGetMtu(connId);
   13b3a:	f003 ffd1 	bl	17ae0 <AttGetMtu>
   13b3e:	4601      	mov	r1, r0
   13b40:	8661      	strh	r1, [r4, #50]	; 0x32
    APP_TRACE_INFO1("MTU size = %d bytes", amdtpcCb.core.attMtuSize);
   13b42:	4806      	ldr	r0, [pc, #24]	; (13b5c <amdtpc_start+0x38>)
}
   13b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    APP_TRACE_INFO1("MTU size = %d bytes", amdtpcCb.core.attMtuSize);
   13b48:	f004 bc2a 	b.w	183a0 <WsfTrace>
}
   13b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        APP_TRACE_INFO0("amdtpc_start() no connection\n");
   13b50:	4803      	ldr	r0, [pc, #12]	; (13b60 <amdtpc_start+0x3c>)
   13b52:	f004 bc25 	b.w	183a0 <WsfTrace>
   13b56:	bf00      	nop
   13b58:	100059ec 	.word	0x100059ec
   13b5c:	000251d4 	.word	0x000251d4
   13b60:	000251b4 	.word	0x000251b4

00013b64 <amdtpc_proc_msg>:
}

void
amdtpc_proc_msg(wsfMsgHdr_t *pMsg)
{
    if (pMsg->event == DM_CONN_OPEN_IND)
   13b64:	7883      	ldrb	r3, [r0, #2]
   13b66:	2b27      	cmp	r3, #39	; 0x27
   13b68:	d011      	beq.n	13b8e <amdtpc_proc_msg+0x2a>
{
   13b6a:	b530      	push	{r4, r5, lr}
    {
    }
    else if (pMsg->event == DM_CONN_CLOSE_IND)
   13b6c:	2b28      	cmp	r3, #40	; 0x28
{
   13b6e:	b083      	sub	sp, #12
    else if (pMsg->event == DM_CONN_CLOSE_IND)
   13b70:	d01e      	beq.n	13bb0 <amdtpc_proc_msg+0x4c>
    {
        amdtpc_conn_close((dmEvt_t *) pMsg);
    }
    else if (pMsg->event == DM_CONN_UPDATE_IND)
   13b72:	2b29      	cmp	r3, #41	; 0x29
   13b74:	d009      	beq.n	13b8a <amdtpc_proc_msg+0x26>
    {
    }
    else if (pMsg->event == amdtpcCb.core.timeoutTimer.msg.event)
   13b76:	4d3f      	ldr	r5, [pc, #252]	; (13c74 <amdtpc_proc_msg+0x110>)
   13b78:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
   13b7c:	429a      	cmp	r2, r3
   13b7e:	d030      	beq.n	13be2 <amdtpc_proc_msg+0x7e>
    {
       amdtpc_timeout_timer_expired(pMsg);
    }
    else if (pMsg->event == ATTC_WRITE_CMD_RSP)
   13b80:	2b0a      	cmp	r3, #10
   13b82:	4604      	mov	r4, r0
   13b84:	d004      	beq.n	13b90 <amdtpc_proc_msg+0x2c>
    {
        amdtpcHandleWriteResponse((attEvt_t *) pMsg);
    }
    else if (pMsg->event == ATTC_HANDLE_VALUE_NTF)
   13b86:	2b0d      	cmp	r3, #13
   13b88:	d03f      	beq.n	13c0a <amdtpc_proc_msg+0xa6>
    {
        amdtpcValueNtf((attEvt_t *) pMsg);
    }
}
   13b8a:	b003      	add	sp, #12
   13b8c:	bd30      	pop	{r4, r5, pc}
   13b8e:	4770      	bx	lr
    if (pMsg->hdr.status == ATT_SUCCESS && pMsg->handle == amdtpcCb.attRxHdl)
   13b90:	78c3      	ldrb	r3, [r0, #3]
   13b92:	2b00      	cmp	r3, #0
   13b94:	d1f9      	bne.n	13b8a <amdtpc_proc_msg+0x26>
   13b96:	8942      	ldrh	r2, [r0, #10]
   13b98:	886b      	ldrh	r3, [r5, #2]
   13b9a:	429a      	cmp	r2, r3
   13b9c:	d1f5      	bne.n	13b8a <amdtpc_proc_msg+0x26>
        amdtpcCb.txReady = true;
   13b9e:	4628      	mov	r0, r5
   13ba0:	2301      	movs	r3, #1
   13ba2:	f800 3b08 	strb.w	r3, [r0], #8
}
   13ba6:	b003      	add	sp, #12
   13ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        AmdtpSendPacketHandler(&amdtpcCb.core);
   13bac:	f000 baf2 	b.w	14194 <AmdtpSendPacketHandler>
    WsfTimerStop(&amdtpcCb.core.timeoutTimer);
   13bb0:	4c30      	ldr	r4, [pc, #192]	; (13c74 <amdtpc_proc_msg+0x110>)
   13bb2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   13bb6:	f004 fb53 	bl	18260 <WsfTimerStop>
    amdtpcCb.txReady = false;
   13bba:	2300      	movs	r3, #0
    amdtpcCb.core.txState = AMDTP_STATE_TX_IDLE;
   13bbc:	2201      	movs	r2, #1
    resetPkt(&amdtpcCb.core.rxPkt);
   13bbe:	f104 000c 	add.w	r0, r4, #12
    amdtpcCb.core.txState = AMDTP_STATE_TX_IDLE;
   13bc2:	8122      	strh	r2, [r4, #8]
    amdtpcCb.core.txPktSn = 0;
   13bc4:	8623      	strh	r3, [r4, #48]	; 0x30
    amdtpcCb.txReady = false;
   13bc6:	7023      	strb	r3, [r4, #0]
    resetPkt(&amdtpcCb.core.rxPkt);
   13bc8:	f000 f898 	bl	13cfc <resetPkt>
    resetPkt(&amdtpcCb.core.txPkt);
   13bcc:	f104 0018 	add.w	r0, r4, #24
   13bd0:	f000 f894 	bl	13cfc <resetPkt>
    resetPkt(&amdtpcCb.core.ackPkt);
   13bd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
}
   13bd8:	b003      	add	sp, #12
   13bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    resetPkt(&amdtpcCb.core.ackPkt);
   13bde:	f000 b88d 	b.w	13cfc <resetPkt>
    data[0] = amdtpcCb.core.txPktSn;
   13be2:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    APP_TRACE_INFO1("amdtpc tx timeout, txPktSn = %d", amdtpcCb.core.txPktSn);
   13be6:	4824      	ldr	r0, [pc, #144]	; (13c78 <amdtpc_proc_msg+0x114>)
    data[0] = amdtpcCb.core.txPktSn;
   13be8:	f88d 1004 	strb.w	r1, [sp, #4]
    APP_TRACE_INFO1("amdtpc tx timeout, txPktSn = %d", amdtpcCb.core.txPktSn);
   13bec:	f004 fbd8 	bl	183a0 <WsfTrace>
    AmdtpSendControl(&amdtpcCb.core, AMDTP_CONTROL_RESEND_REQ, data, 1);
   13bf0:	f105 0008 	add.w	r0, r5, #8
   13bf4:	2301      	movs	r3, #1
   13bf6:	aa01      	add	r2, sp, #4
   13bf8:	2100      	movs	r1, #0
   13bfa:	f000 faa3 	bl	14144 <AmdtpSendControl>
    WsfTimerStartMs(&amdtpcCb.core.timeoutTimer, amdtpcCb.core.txTimeoutMs);
   13bfe:	6c69      	ldr	r1, [r5, #68]	; 0x44
   13c00:	f105 0034 	add.w	r0, r5, #52	; 0x34
   13c04:	f004 fae8 	bl	181d8 <WsfTimerStartMs>
}
   13c08:	e7bf      	b.n	13b8a <amdtpc_proc_msg+0x26>
    if (pMsg->handle == amdtpcCb.attRxHdl)
   13c0a:	8943      	ldrh	r3, [r0, #10]
   13c0c:	886a      	ldrh	r2, [r5, #2]
   13c0e:	429a      	cmp	r2, r3
   13c10:	d021      	beq.n	13c56 <amdtpc_proc_msg+0xf2>
    else if ( pMsg->handle == amdtpcCb.attAckHdl )
   13c12:	88aa      	ldrh	r2, [r5, #4]
   13c14:	429a      	cmp	r2, r3
   13c16:	d1b8      	bne.n	13b8a <amdtpc_proc_msg+0x26>
        status = AmdtpReceivePkt(&amdtpcCb.core, &amdtpcCb.core.ackPkt, pMsg->valueLen, pMsg->pValue);
   13c18:	6843      	ldr	r3, [r0, #4]
   13c1a:	8902      	ldrh	r2, [r0, #8]
   13c1c:	f105 0124 	add.w	r1, r5, #36	; 0x24
   13c20:	f105 0008 	add.w	r0, r5, #8
   13c24:	f000 f872 	bl	13d0c <AmdtpReceivePkt>
    if (status == AMDTP_STATUS_RECEIVE_DONE)
   13c28:	280a      	cmp	r0, #10
   13c2a:	d1ae      	bne.n	13b8a <amdtpc_proc_msg+0x26>
        if (pMsg->handle == amdtpcCb.attRxHdl)
   13c2c:	8963      	ldrh	r3, [r4, #10]
   13c2e:	886a      	ldrh	r2, [r5, #2]
   13c30:	429a      	cmp	r2, r3
   13c32:	d019      	beq.n	13c68 <amdtpc_proc_msg+0x104>
        else if (pMsg->handle == amdtpcCb.attAckHdl)
   13c34:	88aa      	ldrh	r2, [r5, #4]
   13c36:	429a      	cmp	r2, r3
   13c38:	d118      	bne.n	13c6c <amdtpc_proc_msg+0x108>
            pkt = &amdtpcCb.core.ackPkt;
   13c3a:	4b10      	ldr	r3, [pc, #64]	; (13c7c <amdtpc_proc_msg+0x118>)
        AmdtpPacketHandler(&amdtpcCb.core, (eAmdtpPktType_t)pkt->header.pktType, pkt->len - AMDTP_CRC_SIZE_IN_PKT, pkt->data);
   13c3c:	885a      	ldrh	r2, [r3, #2]
   13c3e:	7919      	ldrb	r1, [r3, #4]
   13c40:	480f      	ldr	r0, [pc, #60]	; (13c80 <amdtpc_proc_msg+0x11c>)
   13c42:	689b      	ldr	r3, [r3, #8]
   13c44:	3a04      	subs	r2, #4
   13c46:	b292      	uxth	r2, r2
   13c48:	f001 010f 	and.w	r1, r1, #15
}
   13c4c:	b003      	add	sp, #12
   13c4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        AmdtpPacketHandler(&amdtpcCb.core, (eAmdtpPktType_t)pkt->header.pktType, pkt->len - AMDTP_CRC_SIZE_IN_PKT, pkt->data);
   13c52:	f000 b95d 	b.w	13f10 <AmdtpPacketHandler>
        status = AmdtpReceivePkt(&amdtpcCb.core, &amdtpcCb.core.rxPkt, pMsg->valueLen, pMsg->pValue);
   13c56:	6843      	ldr	r3, [r0, #4]
   13c58:	8902      	ldrh	r2, [r0, #8]
   13c5a:	f105 010c 	add.w	r1, r5, #12
   13c5e:	f105 0008 	add.w	r0, r5, #8
   13c62:	f000 f853 	bl	13d0c <AmdtpReceivePkt>
   13c66:	e7df      	b.n	13c28 <amdtpc_proc_msg+0xc4>
            pkt = &amdtpcCb.core.rxPkt;
   13c68:	4b06      	ldr	r3, [pc, #24]	; (13c84 <amdtpc_proc_msg+0x120>)
   13c6a:	e7e7      	b.n	13c3c <amdtpc_proc_msg+0xd8>
        AmdtpPacketHandler(&amdtpcCb.core, (eAmdtpPktType_t)pkt->header.pktType, pkt->len - AMDTP_CRC_SIZE_IN_PKT, pkt->data);
   13c6c:	2300      	movs	r3, #0
   13c6e:	791b      	ldrb	r3, [r3, #4]
   13c70:	deff      	udf	#255	; 0xff
   13c72:	bf00      	nop
   13c74:	100059ec 	.word	0x100059ec
   13c78:	000251e8 	.word	0x000251e8
   13c7c:	10005a10 	.word	0x10005a10
   13c80:	100059f4 	.word	0x100059f4
   13c84:	100059f8 	.word	0x100059f8

00013c88 <AmdtpcSendPacket>:
//! @return status
//
//*****************************************************************************
eAmdtpStatus_t
AmdtpcSendPacket(eAmdtpPktType_t type, bool_t encrypted, bool_t enableACK, uint8_t *buf, uint16_t len)
{
   13c88:	b570      	push	{r4, r5, r6, lr}
    //
    // Check if the service is idle to send
    //
    if ( amdtpcCb.core.txState != AMDTP_STATE_TX_IDLE )
   13c8a:	4c18      	ldr	r4, [pc, #96]	; (13cec <AmdtpcSendPacket+0x64>)
{
   13c8c:	461d      	mov	r5, r3
    if ( amdtpcCb.core.txState != AMDTP_STATE_TX_IDLE )
   13c8e:	7a23      	ldrb	r3, [r4, #8]
{
   13c90:	b082      	sub	sp, #8
    if ( amdtpcCb.core.txState != AMDTP_STATE_TX_IDLE )
   13c92:	2b01      	cmp	r3, #1
{
   13c94:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    if ( amdtpcCb.core.txState != AMDTP_STATE_TX_IDLE )
   13c98:	d114      	bne.n	13cc4 <AmdtpcSendPacket+0x3c>
    }

    //
    // Check if data length is valid
    //
    if ( len > AMDTP_MAX_PAYLOAD_SIZE )
   13c9a:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   13c9e:	d81f      	bhi.n	13ce0 <AmdtpcSendPacket+0x58>
    }

    //
    // Check if ready to send notification
    //
    if ( !amdtpcCb.txReady )
   13ca0:	7823      	ldrb	r3, [r4, #0]
   13ca2:	b1b3      	cbz	r3, 13cd2 <AmdtpcSendPacket+0x4a>
        //set in callback amdtpsHandleValueCnf
        APP_TRACE_INFO1("data sending failed, not ready for notification.", NULL);
        return AMDTP_STATUS_TX_NOT_READY;
    }

    AmdtpBuildPkt(&amdtpcCb.core, type, encrypted, enableACK, buf, len);
   13ca4:	4613      	mov	r3, r2
   13ca6:	9601      	str	r6, [sp, #4]
   13ca8:	460a      	mov	r2, r1
   13caa:	9500      	str	r5, [sp, #0]
   13cac:	4601      	mov	r1, r0
   13cae:	f104 0008 	add.w	r0, r4, #8
   13cb2:	f000 fa01 	bl	140b8 <AmdtpBuildPkt>

    // send packet
    AmdtpSendPacketHandler(&amdtpcCb.core);
   13cb6:	f104 0008 	add.w	r0, r4, #8
   13cba:	f000 fa6b 	bl	14194 <AmdtpSendPacketHandler>

    return AMDTP_STATUS_SUCCESS;
   13cbe:	2000      	movs	r0, #0
}
   13cc0:	b002      	add	sp, #8
   13cc2:	bd70      	pop	{r4, r5, r6, pc}
        APP_TRACE_INFO1("data sending failed, tx state = %d", amdtpcCb.core.txState);
   13cc4:	480a      	ldr	r0, [pc, #40]	; (13cf0 <AmdtpcSendPacket+0x68>)
   13cc6:	4619      	mov	r1, r3
   13cc8:	f004 fb6a 	bl	183a0 <WsfTrace>
        return AMDTP_STATUS_BUSY;
   13ccc:	2006      	movs	r0, #6
}
   13cce:	b002      	add	sp, #8
   13cd0:	bd70      	pop	{r4, r5, r6, pc}
        APP_TRACE_INFO1("data sending failed, not ready for notification.", NULL);
   13cd2:	4808      	ldr	r0, [pc, #32]	; (13cf4 <AmdtpcSendPacket+0x6c>)
   13cd4:	4619      	mov	r1, r3
   13cd6:	f004 fb63 	bl	183a0 <WsfTrace>
        return AMDTP_STATUS_TX_NOT_READY;
   13cda:	2007      	movs	r0, #7
}
   13cdc:	b002      	add	sp, #8
   13cde:	bd70      	pop	{r4, r5, r6, pc}
        APP_TRACE_INFO1("data sending failed, exceed maximum payload, len = %d.", len);
   13ce0:	4805      	ldr	r0, [pc, #20]	; (13cf8 <AmdtpcSendPacket+0x70>)
   13ce2:	4631      	mov	r1, r6
   13ce4:	f004 fb5c 	bl	183a0 <WsfTrace>
        return AMDTP_STATUS_INVALID_PKT_LENGTH;
   13ce8:	2003      	movs	r0, #3
   13cea:	e7e9      	b.n	13cc0 <AmdtpcSendPacket+0x38>
   13cec:	100059ec 	.word	0x100059ec
   13cf0:	00025208 	.word	0x00025208
   13cf4:	00025264 	.word	0x00025264
   13cf8:	0002522c 	.word	0x0002522c

00013cfc <resetPkt>:

void
resetPkt(amdtpPacket_t *pkt)
{
    pkt->offset = 0;
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13cfc:	7903      	ldrb	r3, [r0, #4]
    pkt->offset = 0;
   13cfe:	2200      	movs	r2, #0
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13d00:	f362 0303 	bfi	r3, r2, #0, #4
    pkt->offset = 0;
   13d04:	6002      	str	r2, [r0, #0]
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13d06:	7103      	strb	r3, [r0, #4]
    pkt->len = 0;
}
   13d08:	4770      	bx	lr
   13d0a:	bf00      	nop

00013d0c <AmdtpReceivePkt>:

eAmdtpStatus_t
AmdtpReceivePkt(amdtpCb_t *amdtpCb, amdtpPacket_t *pkt, uint16_t len, uint8_t *pValue)
{
   13d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint8_t dataIdx = 0;
    uint32_t calDataCrc = 0;
    uint16_t header = 0;

    if (pkt->offset == 0 && len < AMDTP_PREFIX_SIZE_IN_PKT)
   13d10:	f8b1 8000 	ldrh.w	r8, [r1]
{
   13d14:	b089      	sub	sp, #36	; 0x24
   13d16:	460c      	mov	r4, r1
   13d18:	4606      	mov	r6, r0
   13d1a:	4615      	mov	r5, r2
   13d1c:	461f      	mov	r7, r3
    if (pkt->offset == 0 && len < AMDTP_PREFIX_SIZE_IN_PKT)
   13d1e:	f1b8 0f00 	cmp.w	r8, #0
   13d22:	d165      	bne.n	13df0 <AmdtpReceivePkt+0xe4>
   13d24:	2a03      	cmp	r2, #3
   13d26:	f240 80c5 	bls.w	13eb4 <AmdtpReceivePkt+0x1a8>
    }

    // new packet
    if (pkt->offset == 0)
    {
        BYTES_TO_UINT16(pkt->len, pValue);
   13d2a:	785a      	ldrb	r2, [r3, #1]
   13d2c:	781b      	ldrb	r3, [r3, #0]
   13d2e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   13d32:	804b      	strh	r3, [r1, #2]
        BYTES_TO_UINT16(header, &pValue[2]);
   13d34:	78fa      	ldrb	r2, [r7, #3]
   13d36:	78b8      	ldrb	r0, [r7, #2]
        pkt->header.pktType = (header & PACKET_TYPE_BIT_MASK) >> PACKET_TYPE_BIT_OFFSET;
   13d38:	88a3      	ldrh	r3, [r4, #4]
   13d3a:	0911      	lsrs	r1, r2, #4
   13d3c:	f002 020f 	and.w	r2, r2, #15
   13d40:	ea4f 1ed0 	mov.w	lr, r0, lsr #7
   13d44:	ea41 1c02 	orr.w	ip, r1, r2, lsl #4
   13d48:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
   13d4c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13d50:	ea4c 2c40 	orr.w	ip, ip, r0, lsl #9
   13d54:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   13d58:	f023 0303 	bic.w	r3, r3, #3
   13d5c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
   13d60:	ea4c 0c03 	orr.w	ip, ip, r3
   13d64:	f8a4 c004 	strh.w	ip, [r4, #4]
        pkt->header.pktSn = (header & PACKET_SN_BIT_MASK) >> PACKET_SN_BIT_OFFSET;
        pkt->header.encrypted = (header & PACKET_ENCRYPTION_BIT_MASK) >> PACKET_ENCRYPTION_BIT_OFFSET;
        pkt->header.ackEnabled = (header & PACKET_ACK_BIT_MASK) >> PACKET_ACK_BIT_OFFSET;
        dataIdx = AMDTP_PREFIX_SIZE_IN_PKT;
        if (pkt->header.pktType == AMDTP_PKT_TYPE_DATA)
   13d68:	f00c 0c0f 	and.w	ip, ip, #15
   13d6c:	f1bc 0f01 	cmp.w	ip, #1
        {
            amdtpCb->rxState = AMDTP_STATE_GETTING_DATA;
   13d70:	bf04      	itt	eq
   13d72:	2304      	moveq	r3, #4
   13d74:	7073      	strbeq	r3, [r6, #1]
        }
#ifdef AMDTP_DEBUG_ON
        APP_TRACE_INFO1("pkt len = 0x%x", pkt->len);
        APP_TRACE_INFO1("pkt header = 0x%x", header);
#endif
        APP_TRACE_INFO2("type = %d, sn = %d", pkt->header.pktType, pkt->header.pktSn);
   13d76:	4860      	ldr	r0, [pc, #384]	; (13ef8 <AmdtpReceivePkt+0x1ec>)
   13d78:	f004 fb12 	bl	183a0 <WsfTrace>
        APP_TRACE_INFO2("enc = %d, ackEnabled = %d", pkt->header.encrypted,  pkt->header.ackEnabled);
   13d7c:	7961      	ldrb	r1, [r4, #5]
   13d7e:	485f      	ldr	r0, [pc, #380]	; (13efc <AmdtpReceivePkt+0x1f0>)
   13d80:	f3c1 0240 	ubfx	r2, r1, #1, #1
   13d84:	f001 0101 	and.w	r1, r1, #1
   13d88:	f004 fb0a 	bl	183a0 <WsfTrace>
    }

    // make sure we have enough space for new data
    if (pkt->offset + len - dataIdx > AMDTP_PACKET_SIZE)
   13d8c:	f8b4 8000 	ldrh.w	r8, [r4]
   13d90:	f04f 0904 	mov.w	r9, #4
   13d94:	464a      	mov	r2, r9
   13d96:	eb08 0305 	add.w	r3, r8, r5
   13d9a:	1a9b      	subs	r3, r3, r2
   13d9c:	f640 0008 	movw	r0, #2056	; 0x808
   13da0:	4283      	cmp	r3, r0
   13da2:	4649      	mov	r1, r9
   13da4:	dd2f      	ble.n	13e06 <AmdtpReceivePkt+0xfa>
    {
        APP_TRACE_INFO0("not enough buffer size!!!");
   13da6:	4856      	ldr	r0, [pc, #344]	; (13f00 <AmdtpReceivePkt+0x1f4>)
   13da8:	f004 fafa 	bl	183a0 <WsfTrace>
        if (pkt->header.pktType == AMDTP_PKT_TYPE_DATA)
   13dac:	7923      	ldrb	r3, [r4, #4]
   13dae:	f003 030f 	and.w	r3, r3, #15
   13db2:	2b01      	cmp	r3, #1
        {
            amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   13db4:	bf04      	itt	eq
   13db6:	2302      	moveq	r3, #2
   13db8:	7073      	strbeq	r3, [r6, #1]
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13dba:	7923      	ldrb	r3, [r4, #4]
    buf[0] = status;
    if (len > 0)
    {
        memcpy(buf + 1, data, len);
    }
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13dbc:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
    pkt->offset = 0;
   13dbe:	2200      	movs	r2, #0
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13dc0:	f362 0303 	bfi	r3, r2, #0, #4
   13dc4:	7123      	strb	r3, [r4, #4]
    buf[0] = status;
   13dc6:	2504      	movs	r5, #4
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13dc8:	2301      	movs	r3, #1
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13dca:	9203      	str	r2, [sp, #12]
    pkt->offset = 0;
   13dcc:	6022      	str	r2, [r4, #0]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13dce:	e9cd 2205 	strd	r2, r2, [sp, #20]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13dd2:	9300      	str	r3, [sp, #0]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13dd4:	9204      	str	r2, [sp, #16]
    buf[0] = status;
   13dd6:	f88d 500c 	strb.w	r5, [sp, #12]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13dda:	9207      	str	r2, [sp, #28]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13ddc:	ab03      	add	r3, sp, #12
   13dde:	4611      	mov	r1, r2
   13de0:	2002      	movs	r0, #2
   13de2:	47b0      	blx	r6
    if (st != AMDTP_STATUS_SUCCESS)
   13de4:	2800      	cmp	r0, #0
   13de6:	d160      	bne.n	13eaa <AmdtpReceivePkt+0x19e>
        return AMDTP_STATUS_INSUFFICIENT_BUFFER;
   13de8:	2004      	movs	r0, #4
}
   13dea:	b009      	add	sp, #36	; 0x24
   13dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13df0:	f04f 0900 	mov.w	r9, #0
   13df4:	464a      	mov	r2, r9
    if (pkt->offset + len - dataIdx > AMDTP_PACKET_SIZE)
   13df6:	eb08 0305 	add.w	r3, r8, r5
   13dfa:	1a9b      	subs	r3, r3, r2
   13dfc:	f640 0008 	movw	r0, #2056	; 0x808
   13e00:	4283      	cmp	r3, r0
   13e02:	4649      	mov	r1, r9
   13e04:	dccf      	bgt.n	13da6 <AmdtpReceivePkt+0x9a>
    memcpy(pkt->data + pkt->offset, pValue + dataIdx, len - dataIdx);
   13e06:	68a0      	ldr	r0, [r4, #8]
   13e08:	1aaa      	subs	r2, r5, r2
   13e0a:	4439      	add	r1, r7
   13e0c:	4440      	add	r0, r8
   13e0e:	f7f8 f977 	bl	c100 <memcpy>
    pkt->offset += (len - dataIdx);
   13e12:	8822      	ldrh	r2, [r4, #0]
    if (pkt->offset >= pkt->len)
   13e14:	8861      	ldrh	r1, [r4, #2]
    pkt->offset += (len - dataIdx);
   13e16:	4415      	add	r5, r2
   13e18:	eba5 0509 	sub.w	r5, r5, r9
   13e1c:	b2ad      	uxth	r5, r5
    if (pkt->offset >= pkt->len)
   13e1e:	428d      	cmp	r5, r1
    pkt->offset += (len - dataIdx);
   13e20:	8025      	strh	r5, [r4, #0]
    if (pkt->offset >= pkt->len)
   13e22:	d203      	bcs.n	13e2c <AmdtpReceivePkt+0x120>
    return AMDTP_STATUS_RECEIVE_CONTINUE;
   13e24:	2009      	movs	r0, #9
}
   13e26:	b009      	add	sp, #36	; 0x24
   13e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        BYTES_TO_UINT32(peerCrc, pkt->data + pkt->len - AMDTP_CRC_SIZE_IN_PKT);
   13e2c:	68a2      	ldr	r2, [r4, #8]
   13e2e:	1853      	adds	r3, r2, r1
        calDataCrc = CalcCrc32(0xFFFFFFFFU, pkt->len - AMDTP_CRC_SIZE_IN_PKT, pkt->data);
   13e30:	3904      	subs	r1, #4
        BYTES_TO_UINT32(peerCrc, pkt->data + pkt->len - AMDTP_CRC_SIZE_IN_PKT);
   13e32:	f813 5c02 	ldrb.w	r5, [r3, #-2]
   13e36:	f813 0c03 	ldrb.w	r0, [r3, #-3]
   13e3a:	042d      	lsls	r5, r5, #16
   13e3c:	eb05 2500 	add.w	r5, r5, r0, lsl #8
   13e40:	f813 0c04 	ldrb.w	r0, [r3, #-4]
   13e44:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   13e48:	4405      	add	r5, r0
        calDataCrc = CalcCrc32(0xFFFFFFFFU, pkt->len - AMDTP_CRC_SIZE_IN_PKT, pkt->data);
   13e4a:	f04f 30ff 	mov.w	r0, #4294967295
        BYTES_TO_UINT32(peerCrc, pkt->data + pkt->len - AMDTP_CRC_SIZE_IN_PKT);
   13e4e:	eb05 6503 	add.w	r5, r5, r3, lsl #24
        calDataCrc = CalcCrc32(0xFFFFFFFFU, pkt->len - AMDTP_CRC_SIZE_IN_PKT, pkt->data);
   13e52:	f7ff fb03 	bl	1345c <CalcCrc32>
        if (peerCrc != calDataCrc)
   13e56:	4285      	cmp	r5, r0
   13e58:	d045      	beq.n	13ee6 <AmdtpReceivePkt+0x1da>
            APP_TRACE_INFO0("crc error\n");
   13e5a:	482a      	ldr	r0, [pc, #168]	; (13f04 <AmdtpReceivePkt+0x1f8>)
   13e5c:	f004 faa0 	bl	183a0 <WsfTrace>
            if (pkt->header.pktType == AMDTP_PKT_TYPE_DATA)
   13e60:	7923      	ldrb	r3, [r4, #4]
   13e62:	f003 030f 	and.w	r3, r3, #15
   13e66:	2b01      	cmp	r3, #1
                amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   13e68:	bf04      	itt	eq
   13e6a:	2302      	moveq	r3, #2
   13e6c:	7073      	strbeq	r3, [r6, #1]
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13e6e:	7923      	ldrb	r3, [r4, #4]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13e70:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
    pkt->offset = 0;
   13e72:	2200      	movs	r2, #0
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13e74:	f362 0303 	bfi	r3, r2, #0, #4
    buf[0] = status;
   13e78:	2501      	movs	r5, #1
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13e7a:	7123      	strb	r3, [r4, #4]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13e7c:	9203      	str	r2, [sp, #12]
    pkt->offset = 0;
   13e7e:	6022      	str	r2, [r4, #0]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13e80:	e9cd 2205 	strd	r2, r2, [sp, #20]
   13e84:	9204      	str	r2, [sp, #16]
    buf[0] = status;
   13e86:	f88d 500c 	strb.w	r5, [sp, #12]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13e8a:	9500      	str	r5, [sp, #0]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13e8c:	9207      	str	r2, [sp, #28]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13e8e:	ab03      	add	r3, sp, #12
   13e90:	4611      	mov	r1, r2
   13e92:	2002      	movs	r0, #2
   13e94:	47b0      	blx	r6
    if (st != AMDTP_STATUS_SUCCESS)
   13e96:	b918      	cbnz	r0, 13ea0 <AmdtpReceivePkt+0x194>
            return AMDTP_STATUS_CRC_ERROR;
   13e98:	2001      	movs	r0, #1
}
   13e9a:	b009      	add	sp, #36	; 0x24
   13e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
        APP_TRACE_WARN1("AmdtpSendReply status = %d\n", status);
   13ea0:	4819      	ldr	r0, [pc, #100]	; (13f08 <AmdtpReceivePkt+0x1fc>)
   13ea2:	4629      	mov	r1, r5
   13ea4:	f004 fa7c 	bl	183a0 <WsfTrace>
   13ea8:	e7f6      	b.n	13e98 <AmdtpReceivePkt+0x18c>
   13eaa:	4817      	ldr	r0, [pc, #92]	; (13f08 <AmdtpReceivePkt+0x1fc>)
   13eac:	4629      	mov	r1, r5
   13eae:	f004 fa77 	bl	183a0 <WsfTrace>
   13eb2:	e799      	b.n	13de8 <AmdtpReceivePkt+0xdc>
        APP_TRACE_INFO0("Invalid packet!!!");
   13eb4:	4815      	ldr	r0, [pc, #84]	; (13f0c <AmdtpReceivePkt+0x200>)
   13eb6:	f004 fa73 	bl	183a0 <WsfTrace>
    buf[0] = status;
   13eba:	2403      	movs	r4, #3
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13ebc:	2301      	movs	r3, #1
   13ebe:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13ec0:	f8cd 800c 	str.w	r8, [sp, #12]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13ec4:	9300      	str	r3, [sp, #0]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13ec6:	e9cd 8805 	strd	r8, r8, [sp, #20]
   13eca:	f8cd 8010 	str.w	r8, [sp, #16]
    buf[0] = status;
   13ece:	f88d 400c 	strb.w	r4, [sp, #12]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13ed2:	ab03      	add	r3, sp, #12
   13ed4:	4642      	mov	r2, r8
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13ed6:	f8cd 801c 	str.w	r8, [sp, #28]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13eda:	4641      	mov	r1, r8
   13edc:	2002      	movs	r0, #2
   13ede:	47a8      	blx	r5
    if (st != AMDTP_STATUS_SUCCESS)
   13ee0:	b928      	cbnz	r0, 13eee <AmdtpReceivePkt+0x1e2>
        return AMDTP_STATUS_INVALID_PKT_LENGTH;
   13ee2:	2003      	movs	r0, #3
    }
}
   13ee4:	e79f      	b.n	13e26 <AmdtpReceivePkt+0x11a>
        return AMDTP_STATUS_RECEIVE_DONE;
   13ee6:	200a      	movs	r0, #10
}
   13ee8:	b009      	add	sp, #36	; 0x24
   13eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        APP_TRACE_WARN1("AmdtpSendReply status = %d\n", status);
   13eee:	4806      	ldr	r0, [pc, #24]	; (13f08 <AmdtpReceivePkt+0x1fc>)
   13ef0:	4621      	mov	r1, r4
   13ef2:	f004 fa55 	bl	183a0 <WsfTrace>
   13ef6:	e7f4      	b.n	13ee2 <AmdtpReceivePkt+0x1d6>
   13ef8:	00025330 	.word	0x00025330
   13efc:	00025344 	.word	0x00025344
   13f00:	00025360 	.word	0x00025360
   13f04:	0002537c 	.word	0x0002537c
   13f08:	00025314 	.word	0x00025314
   13f0c:	00025300 	.word	0x00025300

00013f10 <AmdtpPacketHandler>:
{
   13f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(type)
   13f14:	2902      	cmp	r1, #2
{
   13f16:	b088      	sub	sp, #32
   13f18:	4604      	mov	r4, r0
   13f1a:	461e      	mov	r6, r3
    switch(type)
   13f1c:	d006      	beq.n	13f2c <AmdtpPacketHandler+0x1c>
   13f1e:	2903      	cmp	r1, #3
   13f20:	d058      	beq.n	13fd4 <AmdtpPacketHandler+0xc4>
   13f22:	2901      	cmp	r1, #1
   13f24:	d031      	beq.n	13f8a <AmdtpPacketHandler+0x7a>
}
   13f26:	b008      	add	sp, #32
   13f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            WsfTimerStop(&amdtpCb->timeoutTimer);
   13f2c:	f100 072c 	add.w	r7, r0, #44	; 0x2c
   13f30:	4638      	mov	r0, r7
            eAmdtpStatus_t status = (eAmdtpStatus_t)buf[0];
   13f32:	781d      	ldrb	r5, [r3, #0]
            WsfTimerStop(&amdtpCb->timeoutTimer);
   13f34:	f004 f994 	bl	18260 <WsfTimerStop>
            if (amdtpCb->txState != AMDTP_STATE_TX_IDLE)
   13f38:	7823      	ldrb	r3, [r4, #0]
   13f3a:	2b01      	cmp	r3, #1
   13f3c:	d069      	beq.n	14012 <AmdtpPacketHandler+0x102>
                amdtpCb->txState = AMDTP_STATE_TX_IDLE;
   13f3e:	2301      	movs	r3, #1
            if (status == AMDTP_STATUS_CRC_ERROR || status == AMDTP_STATUS_RESEND_REPLY)
   13f40:	429d      	cmp	r5, r3
                amdtpCb->txState = AMDTP_STATE_TX_IDLE;
   13f42:	7023      	strb	r3, [r4, #0]
            if (status == AMDTP_STATUS_CRC_ERROR || status == AMDTP_STATUS_RESEND_REPLY)
   13f44:	d067      	beq.n	14016 <AmdtpPacketHandler+0x106>
   13f46:	2d08      	cmp	r5, #8
   13f48:	d065      	beq.n	14016 <AmdtpPacketHandler+0x106>
                if (status == AMDTP_STATUS_SUCCESS)
   13f4a:	b94d      	cbnz	r5, 13f60 <AmdtpPacketHandler+0x50>
                    amdtpCb->txPktSn++;
   13f4c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   13f50:	3301      	adds	r3, #1
   13f52:	b2db      	uxtb	r3, r3
                    if (amdtpCb->txPktSn == 16)
   13f54:	2b10      	cmp	r3, #16
                    amdtpCb->txPktSn++;
   13f56:	bf14      	ite	ne
   13f58:	f884 3028 	strbne.w	r3, [r4, #40]	; 0x28
                        amdtpCb->txPktSn = 0;
   13f5c:	f884 5028 	strbeq.w	r5, [r4, #40]	; 0x28
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13f60:	7d23      	ldrb	r3, [r4, #20]
                if (amdtpCb->transCback)
   13f62:	6c61      	ldr	r1, [r4, #68]	; 0x44
    pkt->offset = 0;
   13f64:	2200      	movs	r2, #0
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13f66:	f362 0303 	bfi	r3, r2, #0, #4
    pkt->offset = 0;
   13f6a:	6122      	str	r2, [r4, #16]
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13f6c:	7523      	strb	r3, [r4, #20]
                if (amdtpCb->transCback)
   13f6e:	b109      	cbz	r1, 13f74 <AmdtpPacketHandler+0x64>
                    amdtpCb->transCback(status);
   13f70:	4628      	mov	r0, r5
   13f72:	4788      	blx	r1
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13f74:	f894 3020 	ldrb.w	r3, [r4, #32]
    pkt->offset = 0;
   13f78:	2200      	movs	r2, #0
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13f7a:	f362 0303 	bfi	r3, r2, #0, #4
    pkt->offset = 0;
   13f7e:	61e2      	str	r2, [r4, #28]
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13f80:	f884 3020 	strb.w	r3, [r4, #32]
}
   13f84:	b008      	add	sp, #32
   13f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13f8a:	9100      	str	r1, [sp, #0]
            amdtpCb->lastRxPktSn = amdtpCb->rxPkt.header.pktSn;
   13f8c:	7a03      	ldrb	r3, [r0, #8]
   13f8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13f92:	2500      	movs	r5, #0
            amdtpCb->lastRxPktSn = amdtpCb->rxPkt.header.pktSn;
   13f94:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13f98:	4690      	mov	r8, r2
   13f9a:	e9cd 5503 	strd	r5, r5, [sp, #12]
   13f9e:	e9cd 5505 	strd	r5, r5, [sp, #20]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13fa2:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   13fa4:	9507      	str	r5, [sp, #28]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   13fa6:	ab03      	add	r3, sp, #12
   13fa8:	462a      	mov	r2, r5
   13faa:	4629      	mov	r1, r5
   13fac:	2002      	movs	r0, #2
   13fae:	47b8      	blx	r7
    if (st != AMDTP_STATUS_SUCCESS)
   13fb0:	2800      	cmp	r0, #0
   13fb2:	d144      	bne.n	1403e <AmdtpPacketHandler+0x12e>
            if (amdtpCb->recvCback)
   13fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13fb6:	b113      	cbz	r3, 13fbe <AmdtpPacketHandler+0xae>
                amdtpCb->recvCback(buf, len);
   13fb8:	4641      	mov	r1, r8
   13fba:	4630      	mov	r0, r6
   13fbc:	4798      	blx	r3
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13fbe:	7a23      	ldrb	r3, [r4, #8]
    pkt->offset = 0;
   13fc0:	2200      	movs	r2, #0
            amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   13fc2:	2102      	movs	r1, #2
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13fc4:	f362 0303 	bfi	r3, r2, #0, #4
            amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   13fc8:	7061      	strb	r1, [r4, #1]
    pkt->offset = 0;
   13fca:	6062      	str	r2, [r4, #4]
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13fcc:	7223      	strb	r3, [r4, #8]
}
   13fce:	b008      	add	sp, #32
   13fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            eAmdtpControl_t control = (eAmdtpControl_t)buf[0];
   13fd4:	781d      	ldrb	r5, [r3, #0]
            if (control == AMDTP_CONTROL_RESEND_REQ)
   13fd6:	b9bd      	cbnz	r5, 14008 <AmdtpPacketHandler+0xf8>
            uint8_t resendPktSn = buf[1];
   13fd8:	785e      	ldrb	r6, [r3, #1]
                APP_TRACE_INFO2("resendPktSn = %d, lastRxPktSn = %d", resendPktSn, amdtpCb->lastRxPktSn);
   13fda:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
   13fde:	4833      	ldr	r0, [pc, #204]	; (140ac <AmdtpPacketHandler+0x19c>)
   13fe0:	4631      	mov	r1, r6
   13fe2:	f004 f9dd 	bl	183a0 <WsfTrace>
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13fe6:	7a23      	ldrb	r3, [r4, #8]
                if (resendPktSn > amdtpCb->lastRxPktSn)
   13fe8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    pkt->offset = 0;
   13fec:	6065      	str	r5, [r4, #4]
                amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   13fee:	2002      	movs	r0, #2
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13ff0:	f365 0303 	bfi	r3, r5, #0, #4
                if (resendPktSn > amdtpCb->lastRxPktSn)
   13ff4:	42b2      	cmp	r2, r6
    pkt->header.pktType = AMDTP_PKT_TYPE_UNKNOWN;
   13ff6:	7223      	strb	r3, [r4, #8]
                amdtpCb->rxState = AMDTP_STATE_RX_IDLE;
   13ff8:	7060      	strb	r0, [r4, #1]
                if (resendPktSn > amdtpCb->lastRxPktSn)
   13ffa:	d325      	bcc.n	14048 <AmdtpPacketHandler+0x138>
                else if (resendPktSn == amdtpCb->lastRxPktSn)
   13ffc:	d041      	beq.n	14082 <AmdtpPacketHandler+0x172>
                    APP_TRACE_WARN2("resendPktSn = %d, lastRxPktSn = %d", resendPktSn, amdtpCb->lastRxPktSn);
   13ffe:	482b      	ldr	r0, [pc, #172]	; (140ac <AmdtpPacketHandler+0x19c>)
   14000:	4631      	mov	r1, r6
   14002:	f004 f9cd 	bl	183a0 <WsfTrace>
   14006:	e7b5      	b.n	13f74 <AmdtpPacketHandler+0x64>
                APP_TRACE_WARN1("unexpected contrl = %d\n", control);
   14008:	4829      	ldr	r0, [pc, #164]	; (140b0 <AmdtpPacketHandler+0x1a0>)
   1400a:	4629      	mov	r1, r5
   1400c:	f004 f9c8 	bl	183a0 <WsfTrace>
   14010:	e7b0      	b.n	13f74 <AmdtpPacketHandler+0x64>
            if (status == AMDTP_STATUS_CRC_ERROR || status == AMDTP_STATUS_RESEND_REPLY)
   14012:	2d01      	cmp	r5, #1
   14014:	d197      	bne.n	13f46 <AmdtpPacketHandler+0x36>
    {
        txPkt->offset = 0;
        amdtpCb->txState = AMDTP_STATE_SENDING;
    }

    if ( txPkt->offset >= txPkt->len )
   14016:	8a61      	ldrh	r1, [r4, #18]
        txPkt->offset = 0;
   14018:	2200      	movs	r2, #0
        amdtpCb->txState = AMDTP_STATE_SENDING;
   1401a:	2303      	movs	r3, #3
        txPkt->offset = 0;
   1401c:	8222      	strh	r2, [r4, #16]
        amdtpCb->txState = AMDTP_STATE_SENDING;
   1401e:	7023      	strb	r3, [r4, #0]
    if ( txPkt->offset >= txPkt->len )
   14020:	b341      	cbz	r1, 14074 <AmdtpPacketHandler+0x164>
        WsfTimerStartMs(&amdtpCb->timeoutTimer, amdtpCb->txTimeoutMs);
    }
    else
    {
        remainingBytes = txPkt->len - txPkt->offset;
        transferSize = ((amdtpCb->attMtuSize - 3) > remainingBytes)
   14022:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
                                            ? remainingBytes
                                            : (amdtpCb->attMtuSize - 3);
        // send packet
        amdtpCb->data_sender_func(&txPkt->data[txPkt->offset], transferSize);
   14024:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   14026:	69a0      	ldr	r0, [r4, #24]
        transferSize = ((amdtpCb->attMtuSize - 3) > remainingBytes)
   14028:	1edd      	subs	r5, r3, #3
                                            : (amdtpCb->attMtuSize - 3);
   1402a:	428d      	cmp	r5, r1
   1402c:	bfa8      	it	ge
   1402e:	460d      	movge	r5, r1
        transferSize = ((amdtpCb->attMtuSize - 3) > remainingBytes)
   14030:	b2ad      	uxth	r5, r5
        amdtpCb->data_sender_func(&txPkt->data[txPkt->offset], transferSize);
   14032:	4629      	mov	r1, r5
   14034:	4790      	blx	r2
        txPkt->offset += transferSize;
   14036:	8a21      	ldrh	r1, [r4, #16]
   14038:	440d      	add	r5, r1
   1403a:	8225      	strh	r5, [r4, #16]
   1403c:	e79a      	b.n	13f74 <AmdtpPacketHandler+0x64>
        APP_TRACE_WARN1("AmdtpSendReply status = %d\n", status);
   1403e:	481d      	ldr	r0, [pc, #116]	; (140b4 <AmdtpPacketHandler+0x1a4>)
   14040:	4629      	mov	r1, r5
   14042:	f004 f9ad 	bl	183a0 <WsfTrace>
   14046:	e7b5      	b.n	13fb4 <AmdtpPacketHandler+0xa4>
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   14048:	2301      	movs	r3, #1
   1404a:	9300      	str	r3, [sp, #0]
    buf[0] = status;
   1404c:	2708      	movs	r7, #8
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   1404e:	e9cd 5503 	strd	r5, r5, [sp, #12]
   14052:	e9cd 5505 	strd	r5, r5, [sp, #20]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   14056:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    buf[0] = status;
   14058:	f88d 700c 	strb.w	r7, [sp, #12]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   1405c:	9507      	str	r5, [sp, #28]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   1405e:	ab03      	add	r3, sp, #12
   14060:	462a      	mov	r2, r5
   14062:	4629      	mov	r1, r5
   14064:	47b0      	blx	r6
    if (st != AMDTP_STATUS_SUCCESS)
   14066:	2800      	cmp	r0, #0
   14068:	d084      	beq.n	13f74 <AmdtpPacketHandler+0x64>
        APP_TRACE_WARN1("AmdtpSendReply status = %d\n", status);
   1406a:	4812      	ldr	r0, [pc, #72]	; (140b4 <AmdtpPacketHandler+0x1a4>)
   1406c:	4639      	mov	r1, r7
   1406e:	f004 f997 	bl	183a0 <WsfTrace>
}
   14072:	e77f      	b.n	13f74 <AmdtpPacketHandler+0x64>
        amdtpCb->txState = AMDTP_STATE_WAITING_ACK;
   14074:	2305      	movs	r3, #5
        WsfTimerStartMs(&amdtpCb->timeoutTimer, amdtpCb->txTimeoutMs);
   14076:	6be1      	ldr	r1, [r4, #60]	; 0x3c
        amdtpCb->txState = AMDTP_STATE_WAITING_ACK;
   14078:	7023      	strb	r3, [r4, #0]
        WsfTimerStartMs(&amdtpCb->timeoutTimer, amdtpCb->txTimeoutMs);
   1407a:	4638      	mov	r0, r7
   1407c:	f004 f8ac 	bl	181d8 <WsfTimerStartMs>
    }
}
   14080:	e778      	b.n	13f74 <AmdtpPacketHandler+0x64>
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   14082:	2301      	movs	r3, #1
   14084:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   14086:	9507      	str	r5, [sp, #28]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   14088:	9300      	str	r3, [sp, #0]
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   1408a:	e9cd 5503 	strd	r5, r5, [sp, #12]
   1408e:	e9cd 5505 	strd	r5, r5, [sp, #20]
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_ACK, false, false, buf, len + 1);
   14092:	ab03      	add	r3, sp, #12
   14094:	462a      	mov	r2, r5
   14096:	4629      	mov	r1, r5
   14098:	47b0      	blx	r6
    if (st != AMDTP_STATUS_SUCCESS)
   1409a:	2800      	cmp	r0, #0
   1409c:	f43f af6a 	beq.w	13f74 <AmdtpPacketHandler+0x64>
        APP_TRACE_WARN1("AmdtpSendReply status = %d\n", status);
   140a0:	4804      	ldr	r0, [pc, #16]	; (140b4 <AmdtpPacketHandler+0x1a4>)
   140a2:	4629      	mov	r1, r5
   140a4:	f004 f97c 	bl	183a0 <WsfTrace>
}
   140a8:	e764      	b.n	13f74 <AmdtpPacketHandler+0x64>
   140aa:	bf00      	nop
   140ac:	00025388 	.word	0x00025388
   140b0:	000253ac 	.word	0x000253ac
   140b4:	00025314 	.word	0x00025314

000140b8 <AmdtpBuildPkt>:
{
   140b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (type == AMDTP_PKT_TYPE_DATA)
   140ba:	2901      	cmp	r1, #1
{
   140bc:	9e06      	ldr	r6, [sp, #24]
   140be:	f8bd 501c 	ldrh.w	r5, [sp, #28]
    if (type == AMDTP_PKT_TYPE_DATA)
   140c2:	d038      	beq.n	14136 <AmdtpBuildPkt+0x7e>
        pkt = &amdtpCb->ackPkt;
   140c4:	f100 041c 	add.w	r4, r0, #28
   140c8:	f04f 0c00 	mov.w	ip, #0
    header = header | (type << PACKET_TYPE_BIT_OFFSET);
   140cc:	ea4c 3001 	orr.w	r0, ip, r1, lsl #12
    pkt->data[0]  = (len + AMDTP_CRC_SIZE_IN_PKT) & 0xff;
   140d0:	68a1      	ldr	r1, [r4, #8]
   140d2:	1d2f      	adds	r7, r5, #4
    pkt->len = len + AMDTP_PREFIX_SIZE_IN_PKT + AMDTP_CRC_SIZE_IN_PKT;
   140d4:	f105 0c08 	add.w	ip, r5, #8
   140d8:	f8a4 c002 	strh.w	ip, [r4, #2]
    pkt->data[0]  = (len + AMDTP_CRC_SIZE_IN_PKT) & 0xff;
   140dc:	700f      	strb	r7, [r1, #0]
    pkt->data[1]  = ((len + AMDTP_CRC_SIZE_IN_PKT) >> 8) & 0xff;
   140de:	68a1      	ldr	r1, [r4, #8]
   140e0:	ea4f 2c27 	mov.w	ip, r7, asr #8
    header = header | (type << PACKET_TYPE_BIT_OFFSET);
   140e4:	b280      	uxth	r0, r0
    pkt->data[1]  = ((len + AMDTP_CRC_SIZE_IN_PKT) >> 8) & 0xff;
   140e6:	f881 c001 	strb.w	ip, [r1, #1]
    if (encrypted)
   140ea:	b10a      	cbz	r2, 140f0 <AmdtpBuildPkt+0x38>
        header = header | (1 << PACKET_ENCRYPTION_BIT_OFFSET);
   140ec:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    if (enableACK)
   140f0:	b10b      	cbz	r3, 140f6 <AmdtpBuildPkt+0x3e>
        header = header | (1 << PACKET_ACK_BIT_OFFSET);
   140f2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    pkt->data[2] = (header & 0xff);
   140f6:	68a3      	ldr	r3, [r4, #8]
   140f8:	7098      	strb	r0, [r3, #2]
    pkt->data[3] = (header >> 8);
   140fa:	68a3      	ldr	r3, [r4, #8]
   140fc:	0a00      	lsrs	r0, r0, #8
   140fe:	70d8      	strb	r0, [r3, #3]
    memcpy(&(pkt->data[AMDTP_PREFIX_SIZE_IN_PKT]), buf, len);
   14100:	68a0      	ldr	r0, [r4, #8]
   14102:	462a      	mov	r2, r5
   14104:	4631      	mov	r1, r6
   14106:	3004      	adds	r0, #4
   14108:	f7f7 fffa 	bl	c100 <memcpy>
    calDataCrc = CalcCrc32(0xFFFFFFFFU, len, buf);
   1410c:	4632      	mov	r2, r6
   1410e:	4629      	mov	r1, r5
   14110:	f04f 30ff 	mov.w	r0, #4294967295
   14114:	f7ff f9a2 	bl	1345c <CalcCrc32>
    pkt->data[AMDTP_PREFIX_SIZE_IN_PKT + len] = (calDataCrc & 0xff);
   14118:	68a3      	ldr	r3, [r4, #8]
   1411a:	55d8      	strb	r0, [r3, r7]
    pkt->data[AMDTP_PREFIX_SIZE_IN_PKT + len + 1] = ((calDataCrc >> 8) & 0xff);
   1411c:	68a3      	ldr	r3, [r4, #8]
   1411e:	442b      	add	r3, r5
   14120:	0a02      	lsrs	r2, r0, #8
   14122:	715a      	strb	r2, [r3, #5]
    pkt->data[AMDTP_PREFIX_SIZE_IN_PKT + len + 2] = ((calDataCrc >> 16) & 0xff);
   14124:	68a3      	ldr	r3, [r4, #8]
   14126:	442b      	add	r3, r5
   14128:	0c02      	lsrs	r2, r0, #16
   1412a:	719a      	strb	r2, [r3, #6]
    pkt->data[AMDTP_PREFIX_SIZE_IN_PKT + len + 3] = ((calDataCrc >> 24) & 0xff);
   1412c:	68a3      	ldr	r3, [r4, #8]
   1412e:	441d      	add	r5, r3
   14130:	0e00      	lsrs	r0, r0, #24
   14132:	71e8      	strb	r0, [r5, #7]
}
   14134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        header = amdtpCb->txPktSn << PACKET_SN_BIT_OFFSET;
   14136:	f990 c028 	ldrsb.w	ip, [r0, #40]	; 0x28
        pkt = &amdtpCb->txPkt;
   1413a:	f100 0410 	add.w	r4, r0, #16
    header = header | (type << PACKET_TYPE_BIT_OFFSET);
   1413e:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   14142:	e7c3      	b.n	140cc <AmdtpBuildPkt+0x14>

00014144 <AmdtpSendControl>:
{
   14144:	b570      	push	{r4, r5, r6, lr}
   14146:	b088      	sub	sp, #32
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   14148:	2500      	movs	r5, #0
   1414a:	9503      	str	r5, [sp, #12]
   1414c:	e9cd 5505 	strd	r5, r5, [sp, #20]
    buf[0] = control;
   14150:	f88d 100c 	strb.w	r1, [sp, #12]
{
   14154:	4606      	mov	r6, r0
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   14156:	9504      	str	r5, [sp, #16]
    if (len > 0)
   14158:	461c      	mov	r4, r3
    uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN] = {0};
   1415a:	9507      	str	r5, [sp, #28]
    if (len > 0)
   1415c:	b963      	cbnz	r3, 14178 <AmdtpSendControl+0x34>
    st = amdtpCb->ack_sender_func(AMDTP_PKT_TYPE_CONTROL, false, false, buf, len + 1);
   1415e:	3401      	adds	r4, #1
   14160:	2200      	movs	r2, #0
   14162:	b2a4      	uxth	r4, r4
   14164:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   14166:	9400      	str	r4, [sp, #0]
   14168:	4611      	mov	r1, r2
   1416a:	ab03      	add	r3, sp, #12
   1416c:	2003      	movs	r0, #3
   1416e:	47a8      	blx	r5
    if (st != AMDTP_STATUS_SUCCESS)
   14170:	4601      	mov	r1, r0
   14172:	b940      	cbnz	r0, 14186 <AmdtpSendControl+0x42>
}
   14174:	b008      	add	sp, #32
   14176:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(buf + 1, data, len);
   14178:	4611      	mov	r1, r2
   1417a:	f10d 000d 	add.w	r0, sp, #13
   1417e:	461a      	mov	r2, r3
   14180:	f7f7 ffbe 	bl	c100 <memcpy>
   14184:	e7eb      	b.n	1415e <AmdtpSendControl+0x1a>
        APP_TRACE_WARN1("AmdtpSendControl status = %d\n", st);
   14186:	4802      	ldr	r0, [pc, #8]	; (14190 <AmdtpSendControl+0x4c>)
   14188:	f004 f90a 	bl	183a0 <WsfTrace>
}
   1418c:	b008      	add	sp, #32
   1418e:	bd70      	pop	{r4, r5, r6, pc}
   14190:	000253c4 	.word	0x000253c4

00014194 <AmdtpSendPacketHandler>:
{
   14194:	b538      	push	{r3, r4, r5, lr}
    if ( amdtpCb->txState == AMDTP_STATE_TX_IDLE )
   14196:	7803      	ldrb	r3, [r0, #0]
   14198:	2b01      	cmp	r3, #1
{
   1419a:	4604      	mov	r4, r0
    if ( amdtpCb->txState == AMDTP_STATE_TX_IDLE )
   1419c:	d014      	beq.n	141c8 <AmdtpSendPacketHandler+0x34>
    if ( txPkt->offset >= txPkt->len )
   1419e:	8a02      	ldrh	r2, [r0, #16]
   141a0:	8a63      	ldrh	r3, [r4, #18]
   141a2:	4293      	cmp	r3, r2
   141a4:	d917      	bls.n	141d6 <AmdtpSendPacketHandler+0x42>
        transferSize = ((amdtpCb->attMtuSize - 3) > remainingBytes)
   141a6:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
        amdtpCb->data_sender_func(&txPkt->data[txPkt->offset], transferSize);
   141a8:	69a0      	ldr	r0, [r4, #24]
        remainingBytes = txPkt->len - txPkt->offset;
   141aa:	1a9b      	subs	r3, r3, r2
                                            : (amdtpCb->attMtuSize - 3);
   141ac:	b299      	uxth	r1, r3
        transferSize = ((amdtpCb->attMtuSize - 3) > remainingBytes)
   141ae:	3d03      	subs	r5, #3
                                            : (amdtpCb->attMtuSize - 3);
   141b0:	428d      	cmp	r5, r1
   141b2:	bfa8      	it	ge
   141b4:	460d      	movge	r5, r1
        transferSize = ((amdtpCb->attMtuSize - 3) > remainingBytes)
   141b6:	b2ad      	uxth	r5, r5
        amdtpCb->data_sender_func(&txPkt->data[txPkt->offset], transferSize);
   141b8:	4629      	mov	r1, r5
   141ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   141bc:	4410      	add	r0, r2
   141be:	4798      	blx	r3
        txPkt->offset += transferSize;
   141c0:	8a21      	ldrh	r1, [r4, #16]
   141c2:	440d      	add	r5, r1
   141c4:	8225      	strh	r5, [r4, #16]
}
   141c6:	bd38      	pop	{r3, r4, r5, pc}
        amdtpCb->txState = AMDTP_STATE_SENDING;
   141c8:	2303      	movs	r3, #3
   141ca:	7003      	strb	r3, [r0, #0]
    if ( txPkt->offset >= txPkt->len )
   141cc:	8a63      	ldrh	r3, [r4, #18]
        txPkt->offset = 0;
   141ce:	2200      	movs	r2, #0
    if ( txPkt->offset >= txPkt->len )
   141d0:	4293      	cmp	r3, r2
        txPkt->offset = 0;
   141d2:	8202      	strh	r2, [r0, #16]
    if ( txPkt->offset >= txPkt->len )
   141d4:	d8e7      	bhi.n	141a6 <AmdtpSendPacketHandler+0x12>
        amdtpCb->txState = AMDTP_STATE_WAITING_ACK;
   141d6:	2305      	movs	r3, #5
   141d8:	7023      	strb	r3, [r4, #0]
        WsfTimerStartMs(&amdtpCb->timeoutTimer, amdtpCb->txTimeoutMs);
   141da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   141dc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
}
   141e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        WsfTimerStartMs(&amdtpCb->timeoutTimer, amdtpCb->txTimeoutMs);
   141e4:	f003 bff8 	b.w	181d8 <WsfTimerStartMs>

000141e8 <AppDbInit>:
{
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
  return;
}
   141e8:	4770      	bx	lr
   141ea:	bf00      	nop

000141ec <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr, bool_t master_role)
{
   141ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t     i;

  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (!pRec->inUse)
   141ee:	4b19      	ldr	r3, [pc, #100]	; (14254 <AppDbNewRecord+0x68>)
   141f0:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
{
   141f4:	4607      	mov	r7, r0
   141f6:	460e      	mov	r6, r1
   141f8:	4615      	mov	r5, r2
    if (!pRec->inUse)
   141fa:	b32c      	cbz	r4, 14248 <AppDbNewRecord+0x5c>
   141fc:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
   14200:	b322      	cbz	r2, 1424c <AppDbNewRecord+0x60>
   14202:	f893 21b7 	ldrb.w	r2, [r3, #439]	; 0x1b7
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   14206:	f503 74c4 	add.w	r4, r3, #392	; 0x188
    if (!pRec->inUse)
   1420a:	b14a      	cbz	r2, 14220 <AppDbNewRecord+0x34>

  /* if all records were allocated */
  if (i == 0)
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   1420c:	4a12      	ldr	r2, [pc, #72]	; (14258 <AppDbNewRecord+0x6c>)
   1420e:	6814      	ldr	r4, [r2, #0]

    /* get next record to overwrite */
    pAppDbNewRec++;
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   14210:	f503 7013 	add.w	r0, r3, #588	; 0x24c
    pAppDbNewRec++;
   14214:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
    {
      pAppDbNewRec = appDb.rec;
   14218:	4281      	cmp	r1, r0
   1421a:	bf18      	it	ne
   1421c:	460b      	movne	r3, r1
   1421e:	6013      	str	r3, [r2, #0]
    }
  }

  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   14220:	22c4      	movs	r2, #196	; 0xc4
   14222:	2100      	movs	r1, #0
   14224:	4620      	mov	r0, r4
   14226:	f00c ffa5 	bl	21174 <memset>
  pRec->inUse = TRUE;
   1422a:	2301      	movs	r3, #1
   1422c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  pRec->addrType = addrType;
  BdaCpy(pRec->peerAddr, pAddr);
   14230:	4620      	mov	r0, r4
  pRec->addrType = addrType;
   14232:	71a7      	strb	r7, [r4, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   14234:	4631      	mov	r1, r6
   14236:	f7ff f873 	bl	13320 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   1423a:	2300      	movs	r3, #0
   1423c:	f8a4 3031 	strh.w	r3, [r4, #49]	; 0x31
  pRec->peerRpao = FALSE;
  pRec->master_role = master_role;
   14240:	f884 50c3 	strb.w	r5, [r4, #195]	; 0xc3

  return (appDbHdl_t) pRec;
}
   14244:	4620      	mov	r0, r4
   14246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  appDbRec_t  *pRec = appDb.rec;
   14248:	461c      	mov	r4, r3
   1424a:	e7e9      	b.n	14220 <AppDbNewRecord+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1424c:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
   14250:	e7e6      	b.n	14220 <AppDbNewRecord+0x34>
   14252:	bf00      	nop
   14254:	10006a54 	.word	0x10006a54
   14258:	10002b48 	.word	0x10002b48

0001425c <AppDbGetNextRecord>:
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   1425c:	b198      	cbz	r0, 14286 <AppDbGetNextRecord+0x2a>
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   1425e:	4a12      	ldr	r2, [pc, #72]	; (142a8 <AppDbGetNextRecord+0x4c>)
   14260:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
   14264:	b123      	cbz	r3, 14270 <AppDbGetNextRecord+0x14>
   14266:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   1426a:	b10b      	cbz	r3, 14270 <AppDbGetNextRecord+0x14>
   1426c:	4290      	cmp	r0, r2
   1426e:	d018      	beq.n	142a2 <AppDbGetNextRecord+0x46>
   14270:	f892 30f3 	ldrb.w	r3, [r2, #243]	; 0xf3
   14274:	b12b      	cbz	r3, 14282 <AppDbGetNextRecord+0x26>
   14276:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
   1427a:	b113      	cbz	r3, 14282 <AppDbGetNextRecord+0x26>
   1427c:	4b0b      	ldr	r3, [pc, #44]	; (142ac <AppDbGetNextRecord+0x50>)
   1427e:	4298      	cmp	r0, r3
   14280:	d00f      	beq.n	142a2 <AppDbGetNextRecord+0x46>
    return APP_DB_HDL_NONE;
   14282:	2000      	movs	r0, #0
   14284:	4770      	bx	lr
    pRec = appDb.rec;
   14286:	4808      	ldr	r0, [pc, #32]	; (142a8 <AppDbGetNextRecord+0x4c>)
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   14288:	4a09      	ldr	r2, [pc, #36]	; (142b0 <AppDbGetNextRecord+0x54>)
    if (pRec->inUse && pRec->valid)
   1428a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
   1428e:	b113      	cbz	r3, 14296 <AppDbGetNextRecord+0x3a>
   14290:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   14294:	b923      	cbnz	r3, 142a0 <AppDbGetNextRecord+0x44>
    pRec++;
   14296:	30c4      	adds	r0, #196	; 0xc4
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   14298:	4290      	cmp	r0, r2
   1429a:	d3f6      	bcc.n	1428a <AppDbGetNextRecord+0x2e>
    return APP_DB_HDL_NONE;
   1429c:	2000      	movs	r0, #0
   1429e:	4770      	bx	lr
}
   142a0:	4770      	bx	lr
    pRec++;
   142a2:	30c4      	adds	r0, #196	; 0xc4
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   142a4:	e7f0      	b.n	14288 <AppDbGetNextRecord+0x2c>
   142a6:	bf00      	nop
   142a8:	10006a54 	.word	0x10006a54
   142ac:	10006b18 	.word	0x10006b18
   142b0:	10006ca0 	.word	0x10006ca0

000142b4 <AppDbValidateRecord>:
  ((appDbRec_t *) hdl)->valid = TRUE;
   142b4:	2301      	movs	r3, #1
   142b6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   142ba:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
}
   142be:	4770      	bx	lr

000142c0 <AppDbCheckValidRecord>:
  if (((appDbRec_t *) hdl)->valid == FALSE)
   142c0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   142c4:	b90b      	cbnz	r3, 142ca <AppDbCheckValidRecord+0xa>
  ((appDbRec_t *) hdl)->inUse = FALSE;
   142c6:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
   142ca:	4770      	bx	lr

000142cc <AppDbRecordInUse>:
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   142cc:	4a10      	ldr	r2, [pc, #64]	; (14310 <AppDbRecordInUse+0x44>)
   142ce:	f892 302f 	ldrb.w	r3, [r2, #47]	; 0x2f
   142d2:	b123      	cbz	r3, 142de <AppDbRecordInUse+0x12>
   142d4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   142d8:	b10b      	cbz	r3, 142de <AppDbRecordInUse+0x12>
   142da:	4290      	cmp	r0, r2
   142dc:	d016      	beq.n	1430c <AppDbRecordInUse+0x40>
   142de:	f892 30f3 	ldrb.w	r3, [r2, #243]	; 0xf3
   142e2:	b12b      	cbz	r3, 142f0 <AppDbRecordInUse+0x24>
   142e4:	f892 30f4 	ldrb.w	r3, [r2, #244]	; 0xf4
   142e8:	b113      	cbz	r3, 142f0 <AppDbRecordInUse+0x24>
   142ea:	4b0a      	ldr	r3, [pc, #40]	; (14314 <AppDbRecordInUse+0x48>)
   142ec:	4298      	cmp	r0, r3
   142ee:	d00d      	beq.n	1430c <AppDbRecordInUse+0x40>
   142f0:	f892 31b7 	ldrb.w	r3, [r2, #439]	; 0x1b7
   142f4:	b143      	cbz	r3, 14308 <AppDbRecordInUse+0x3c>
   142f6:	f892 31b8 	ldrb.w	r3, [r2, #440]	; 0x1b8
   142fa:	b12b      	cbz	r3, 14308 <AppDbRecordInUse+0x3c>
   142fc:	4a06      	ldr	r2, [pc, #24]	; (14318 <AppDbRecordInUse+0x4c>)
    {
      return TRUE;
    }
  }

  return FALSE;
   142fe:	1a80      	subs	r0, r0, r2
   14300:	fab0 f080 	clz	r0, r0
   14304:	0940      	lsrs	r0, r0, #5
   14306:	4770      	bx	lr
   14308:	4618      	mov	r0, r3
}
   1430a:	4770      	bx	lr
      return TRUE;
   1430c:	2001      	movs	r0, #1
   1430e:	4770      	bx	lr
   14310:	10006a54 	.word	0x10006a54
   14314:	10006b18 	.word	0x10006b18
   14318:	10006bdc 	.word	0x10006bdc

0001431c <AppDbDeleteAllRecords>:
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    pRec->inUse = FALSE;
   1431c:	4b04      	ldr	r3, [pc, #16]	; (14330 <AppDbDeleteAllRecords+0x14>)
   1431e:	2200      	movs	r2, #0
   14320:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   14324:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
   14328:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
  }
}
   1432c:	4770      	bx	lr
   1432e:	bf00      	nop
   14330:	10006a54 	.word	0x10006a54

00014334 <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   14334:	b570      	push	{r4, r5, r6, lr}
  uint8_t     i;

  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   14336:	4c19      	ldr	r4, [pc, #100]	; (1439c <AppDbFindByAddr+0x68>)
{
   14338:	460e      	mov	r6, r1
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   1433a:	f008 f977 	bl	1c62c <DmHostAddrType>
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1433e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   14342:	4605      	mov	r5, r0
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   14344:	b113      	cbz	r3, 1434c <AppDbFindByAddr+0x18>
   14346:	79a3      	ldrb	r3, [r4, #6]
   14348:	4283      	cmp	r3, r0
   1434a:	d00f      	beq.n	1436c <AppDbFindByAddr+0x38>
   1434c:	f894 30f3 	ldrb.w	r3, [r4, #243]	; 0xf3
   14350:	b11b      	cbz	r3, 1435a <AppDbFindByAddr+0x26>
   14352:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   14356:	42ab      	cmp	r3, r5
   14358:	d010      	beq.n	1437c <AppDbFindByAddr+0x48>
   1435a:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1435e:	b11b      	cbz	r3, 14368 <AppDbFindByAddr+0x34>
   14360:	f894 318e 	ldrb.w	r3, [r4, #398]	; 0x18e
   14364:	42ab      	cmp	r3, r5
   14366:	d011      	beq.n	1438c <AppDbFindByAddr+0x58>
    {
      return (appDbHdl_t) pRec;
    }
  }

  return APP_DB_HDL_NONE;
   14368:	2000      	movs	r0, #0
}
   1436a:	bd70      	pop	{r4, r5, r6, pc}
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1436c:	4631      	mov	r1, r6
   1436e:	4620      	mov	r0, r4
   14370:	f7fe ffdc 	bl	1332c <BdaCmp>
   14374:	2800      	cmp	r0, #0
   14376:	d0e9      	beq.n	1434c <AppDbFindByAddr+0x18>
  appDbRec_t  *pRec = appDb.rec;
   14378:	4620      	mov	r0, r4
}
   1437a:	bd70      	pop	{r4, r5, r6, pc}
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1437c:	4808      	ldr	r0, [pc, #32]	; (143a0 <AppDbFindByAddr+0x6c>)
   1437e:	4631      	mov	r1, r6
   14380:	f7fe ffd4 	bl	1332c <BdaCmp>
   14384:	2800      	cmp	r0, #0
   14386:	d0e8      	beq.n	1435a <AppDbFindByAddr+0x26>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   14388:	4805      	ldr	r0, [pc, #20]	; (143a0 <AppDbFindByAddr+0x6c>)
}
   1438a:	bd70      	pop	{r4, r5, r6, pc}
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1438c:	4805      	ldr	r0, [pc, #20]	; (143a4 <AppDbFindByAddr+0x70>)
   1438e:	4631      	mov	r1, r6
   14390:	f7fe ffcc 	bl	1332c <BdaCmp>
   14394:	2800      	cmp	r0, #0
   14396:	d0e7      	beq.n	14368 <AppDbFindByAddr+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   14398:	4802      	ldr	r0, [pc, #8]	; (143a4 <AppDbFindByAddr+0x70>)
}
   1439a:	bd70      	pop	{r4, r5, r6, pc}
   1439c:	10006a54 	.word	0x10006a54
   143a0:	10006b18 	.word	0x10006b18
   143a4:	10006bdc 	.word	0x10006bdc

000143a8 <AppDbGetKey>:
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
  dmSecKey_t *pKey = NULL;

  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   143a8:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   143ac:	400b      	ands	r3, r1
   143ae:	d008      	beq.n	143c2 <AppDbGetKey+0x1a>
  {
    switch(type)
   143b0:	3901      	subs	r1, #1
   143b2:	2907      	cmp	r1, #7
   143b4:	d805      	bhi.n	143c2 <AppDbGetKey+0x1a>
   143b6:	e8df f001 	tbb	[pc, r1]
   143ba:	0d08      	.short	0x0d08
   143bc:	04041204 	.word	0x04041204
   143c0:	0604      	.short	0x0604
   143c2:	2000      	movs	r0, #0
        break;
    }
  }

  return pKey;
}
   143c4:	4770      	bx	lr
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   143c6:	301e      	adds	r0, #30
        break;
   143c8:	4770      	bx	lr
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   143ca:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   143ce:	7013      	strb	r3, [r2, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   143d0:	3034      	adds	r0, #52	; 0x34
        break;
   143d2:	4770      	bx	lr
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   143d4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   143d8:	7013      	strb	r3, [r2, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   143da:	3050      	adds	r0, #80	; 0x50
        break;
   143dc:	4770      	bx	lr
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   143de:	3007      	adds	r0, #7
        break;
   143e0:	4770      	bx	lr
   143e2:	bf00      	nop

000143e4 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   143e4:	b500      	push	{lr}
  switch(pKey->type)
   143e6:	7f8a      	ldrb	r2, [r1, #30]
   143e8:	3a01      	subs	r2, #1
{
   143ea:	468e      	mov	lr, r1
   143ec:	4603      	mov	r3, r0
  switch(pKey->type)
   143ee:	2a07      	cmp	r2, #7
   143f0:	d81f      	bhi.n	14432 <AppDbSetKey+0x4e>
   143f2:	e8df f002 	tbb	[pc, r2]
   143f6:	045a      	.short	0x045a
   143f8:	1e1e351e 	.word	0x1e1e351e
   143fc:	201e      	.short	0x201e
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
      break;

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   143fe:	f89e 201f 	ldrb.w	r2, [lr, #31]
   14402:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   14406:	f8de 0004 	ldr.w	r0, [lr, #4]
   1440a:	f8de 1008 	ldr.w	r1, [lr, #8]
   1440e:	f8de 200c 	ldr.w	r2, [lr, #12]
   14412:	f103 0c50 	add.w	ip, r3, #80	; 0x50
   14416:	f8de 3010 	ldr.w	r3, [lr, #16]
   1441a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1441e:	f8de 0014 	ldr.w	r0, [lr, #20]
   14422:	f8de 1018 	ldr.w	r1, [lr, #24]
   14426:	f8be 301c 	ldrh.w	r3, [lr, #28]
   1442a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1442e:	f8ac 3000 	strh.w	r3, [ip]
      break;

    default:
      break;
  }
}
   14432:	f85d fb04 	ldr.w	pc, [sp], #4
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   14436:	f8de 2004 	ldr.w	r2, [lr, #4]
   1443a:	f8de 0008 	ldr.w	r0, [lr, #8]
   1443e:	f8de 100c 	ldr.w	r1, [lr, #12]
   14442:	f8de c010 	ldr.w	ip, [lr, #16]
   14446:	f8c3 201e 	str.w	r2, [r3, #30]
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   1444a:	2200      	movs	r2, #0
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   1444c:	f8c3 c02a 	str.w	ip, [r3, #42]	; 0x2a
   14450:	f8c3 0022 	str.w	r0, [r3, #34]	; 0x22
   14454:	f8c3 1026 	str.w	r1, [r3, #38]	; 0x26
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   14458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   1445c:	f85d fb04 	ldr.w	pc, [sp], #4
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   14460:	f8de 2004 	ldr.w	r2, [lr, #4]
   14464:	f8de 000c 	ldr.w	r0, [lr, #12]
   14468:	f8de 1010 	ldr.w	r1, [lr, #16]
   1446c:	f8de c008 	ldr.w	ip, [lr, #8]
   14470:	f8c3 2007 	str.w	r2, [r3, #7]
   14474:	f8de 2014 	ldr.w	r2, [lr, #20]
   14478:	f8c3 000f 	str.w	r0, [r3, #15]
   1447c:	f8c3 1013 	str.w	r1, [r3, #19]
   14480:	f8be 0018 	ldrh.w	r0, [lr, #24]
   14484:	f89e 101a 	ldrb.w	r1, [lr, #26]
   14488:	f8c3 2017 	str.w	r2, [r3, #23]
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   1448c:	f89e 201a 	ldrb.w	r2, [lr, #26]
   14490:	719a      	strb	r2, [r3, #6]
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   14492:	f8a3 001b 	strh.w	r0, [r3, #27]
   14496:	7759      	strb	r1, [r3, #29]
   14498:	f8c3 c00b 	str.w	ip, [r3, #11]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   1449c:	f10e 0114 	add.w	r1, lr, #20
   144a0:	4618      	mov	r0, r3
}
   144a2:	f85d eb04 	ldr.w	lr, [sp], #4
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   144a6:	f7fe bf3b 	b.w	13320 <BdaCpy>
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   144aa:	f89e 201f 	ldrb.w	r2, [lr, #31]
   144ae:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   144b2:	f8de 0004 	ldr.w	r0, [lr, #4]
   144b6:	f8de 1008 	ldr.w	r1, [lr, #8]
   144ba:	f8de 200c 	ldr.w	r2, [lr, #12]
   144be:	f103 0c34 	add.w	ip, r3, #52	; 0x34
   144c2:	e7a8      	b.n	14416 <AppDbSetKey+0x32>

000144c4 <AppDbGetPeerDbHash>:
 */
/*************************************************************************************************/
uint8_t *AppDbGetPeerDbHash(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->dbHash;
}
   144c4:	3087      	adds	r0, #135	; 0x87
   144c6:	4770      	bx	lr

000144c8 <AppDbSetPeerDbHash>:
/*************************************************************************************************/
void AppDbSetPeerDbHash(appDbHdl_t hdl, uint8_t *pDbHash)
{
  WSF_ASSERT(pDbHash != NULL);

  memcpy(((appDbRec_t *) hdl)->dbHash, pDbHash, ATT_DATABASE_HASH_LEN);
   144c8:	f8d1 c000 	ldr.w	ip, [r1]
   144cc:	684a      	ldr	r2, [r1, #4]
   144ce:	688b      	ldr	r3, [r1, #8]
   144d0:	68c9      	ldr	r1, [r1, #12]
   144d2:	f8c0 1093 	str.w	r1, [r0, #147]	; 0x93
   144d6:	f8c0 c087 	str.w	ip, [r0, #135]	; 0x87
   144da:	f8c0 208b 	str.w	r2, [r0, #139]	; 0x8b
   144de:	f8c0 308f 	str.w	r3, [r0, #143]	; 0x8f
}
   144e2:	4770      	bx	lr

000144e4 <AppDbIsCacheCheckedByHash>:
 */
/*************************************************************************************************/
bool_t AppDbIsCacheCheckedByHash(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->cacheByHash;
}
   144e4:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   144e8:	4770      	bx	lr
   144ea:	bf00      	nop

000144ec <AppDbSetCacheByHash>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCacheByHash(appDbHdl_t hdl, bool_t cacheByHash)
{
  ((appDbRec_t *) hdl)->cacheByHash = cacheByHash;
   144ec:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
}
   144f0:	4770      	bx	lr
   144f2:	bf00      	nop

000144f4 <AppDbGetDiscStatus>:
 */
/*************************************************************************************************/
uint8_t AppDbGetDiscStatus(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->discStatus;
}
   144f4:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
   144f8:	4770      	bx	lr
   144fa:	bf00      	nop

000144fc <AppDbSetDiscStatus>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetDiscStatus(appDbHdl_t hdl, uint8_t status)
{
  ((appDbRec_t *) hdl)->discStatus = status;
   144fc:	f880 10c2 	strb.w	r1, [r0, #194]	; 0xc2
}
   14500:	4770      	bx	lr
   14502:	bf00      	nop

00014504 <AppDbGetHdlList>:
 */
/*************************************************************************************************/
uint16_t *AppDbGetHdlList(appDbHdl_t hdl)
{
  return ((appDbRec_t *) hdl)->hdlList;
}
   14504:	3098      	adds	r0, #152	; 0x98
   14506:	4770      	bx	lr

00014508 <AppDbSetHdlList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetHdlList(appDbHdl_t hdl, uint16_t *pHdlList)
{
   14508:	b510      	push	{r4, lr}
  memcpy(((appDbRec_t *) hdl)->hdlList, pHdlList, sizeof(((appDbRec_t *) hdl)->hdlList));
   1450a:	3098      	adds	r0, #152	; 0x98
   1450c:	f101 0320 	add.w	r3, r1, #32
   14510:	f8d1 e000 	ldr.w	lr, [r1]
   14514:	f8d1 c004 	ldr.w	ip, [r1, #4]
   14518:	688a      	ldr	r2, [r1, #8]
   1451a:	68cc      	ldr	r4, [r1, #12]
   1451c:	60c4      	str	r4, [r0, #12]
   1451e:	3110      	adds	r1, #16
   14520:	4299      	cmp	r1, r3
   14522:	f8c0 e000 	str.w	lr, [r0]
   14526:	f8c0 c004 	str.w	ip, [r0, #4]
   1452a:	6082      	str	r2, [r0, #8]
   1452c:	f100 0010 	add.w	r0, r0, #16
   14530:	d1ee      	bne.n	14510 <AppDbSetHdlList+0x8>
   14532:	680b      	ldr	r3, [r1, #0]
   14534:	684a      	ldr	r2, [r1, #4]
   14536:	6042      	str	r2, [r0, #4]
   14538:	6003      	str	r3, [r0, #0]
   1453a:	890b      	ldrh	r3, [r1, #8]
   1453c:	8103      	strh	r3, [r0, #8]
}
   1453e:	bd10      	pop	{r4, pc}

00014540 <AppDbGetPeerAddedToRl>:
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
  return ((appDbRec_t *)hdl)->peerAddedToRl;
}
   14540:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
   14544:	4770      	bx	lr
   14546:	bf00      	nop

00014548 <AppDbSetPeerAddedToRl>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   14548:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
}
   1454c:	4770      	bx	lr
   1454e:	bf00      	nop

00014550 <AppDbGetPeerRpao>:
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
  return ((appDbRec_t *)hdl)->peerRpao;
}
   14550:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
   14554:	4770      	bx	lr
   14556:	bf00      	nop

00014558 <AppDbSetPeerRpao>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerRpao(appDbHdl_t hdl, bool_t peerRpao)
{
  ((appDbRec_t *)hdl)->peerRpao = peerRpao;
   14558:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
}
   1455c:	4770      	bx	lr
   1455e:	bf00      	nop

00014560 <AppUiAction>:
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
  switch (event)
   14560:	1e43      	subs	r3, r0, #1
{
   14562:	b510      	push	{r4, lr}
   14564:	4604      	mov	r4, r0
  switch (event)
   14566:	2b19      	cmp	r3, #25
   14568:	d811      	bhi.n	1458e <AppUiAction+0x2e>
   1456a:	e8df f003 	tbb	[pc, r3]
   1456e:	1074      	.short	0x1074
   14570:	64686c70 	.word	0x64686c70
   14574:	54585c60 	.word	0x54585c60
   14578:	44484c50 	.word	0x44484c50
   1457c:	34383c40 	.word	0x34383c40
   14580:	24282c30 	.word	0x24282c30
   14584:	0d181c20 	.word	0x0d181c20
    case APP_UI_PER_ADV_SYNC_EST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync established <<<");
      break;

    case APP_UI_PER_ADV_SYNC_LOST_IND:
      APP_TRACE_INFO0(">>> Periodic advertising sync lost <<<");
   14588:	4835      	ldr	r0, [pc, #212]	; (14660 <AppUiAction+0x100>)
   1458a:	f003 ff09 	bl	183a0 <WsfTrace>

    default:
      break;
  }

  if (appUiCbackTbl.actionCback)
   1458e:	4b35      	ldr	r3, [pc, #212]	; (14664 <AppUiAction+0x104>)
   14590:	685b      	ldr	r3, [r3, #4]
   14592:	b11b      	cbz	r3, 1459c <AppUiAction+0x3c>
  {
    (*appUiCbackTbl.actionCback)(event);
   14594:	4620      	mov	r0, r4
  }
}
   14596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*appUiCbackTbl.actionCback)(event);
   1459a:	4718      	bx	r3
}
   1459c:	bd10      	pop	{r4, pc}
      APP_TRACE_INFO0(">>> Periodic advertising sync established <<<");
   1459e:	4832      	ldr	r0, [pc, #200]	; (14668 <AppUiAction+0x108>)
   145a0:	f003 fefe 	bl	183a0 <WsfTrace>
      break;
   145a4:	e7f3      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Periodic advertising set stopped <<<");
   145a6:	4831      	ldr	r0, [pc, #196]	; (1466c <AppUiAction+0x10c>)
   145a8:	f003 fefa 	bl	183a0 <WsfTrace>
      break;
   145ac:	e7ef      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Periodic advertising set started <<<");
   145ae:	4830      	ldr	r0, [pc, #192]	; (14670 <AppUiAction+0x110>)
   145b0:	f003 fef6 	bl	183a0 <WsfTrace>
      break;
   145b4:	e7eb      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Extended scanning stopped <<<");
   145b6:	482f      	ldr	r0, [pc, #188]	; (14674 <AppUiAction+0x114>)
   145b8:	f003 fef2 	bl	183a0 <WsfTrace>
      break;
   145bc:	e7e7      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Extended scanning started <<<");
   145be:	482e      	ldr	r0, [pc, #184]	; (14678 <AppUiAction+0x118>)
   145c0:	f003 feee 	bl	183a0 <WsfTrace>
      break;
   145c4:	e7e3      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scan request received <<<");
   145c6:	482d      	ldr	r0, [pc, #180]	; (1467c <AppUiAction+0x11c>)
   145c8:	f003 feea 	bl	183a0 <WsfTrace>
      break;
   145cc:	e7df      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising sets stopped <<<");
   145ce:	482c      	ldr	r0, [pc, #176]	; (14680 <AppUiAction+0x120>)
   145d0:	f003 fee6 	bl	183a0 <WsfTrace>
      break;
   145d4:	e7db      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising sets started <<<");
   145d6:	482b      	ldr	r0, [pc, #172]	; (14684 <AppUiAction+0x124>)
   145d8:	f003 fee2 	bl	183a0 <WsfTrace>
      break;
   145dc:	e7d7      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> High alert <<<");
   145de:	482a      	ldr	r0, [pc, #168]	; (14688 <AppUiAction+0x128>)
   145e0:	f003 fede 	bl	183a0 <WsfTrace>
      break;
   145e4:	e7d3      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Low alert <<<");
   145e6:	4829      	ldr	r0, [pc, #164]	; (1468c <AppUiAction+0x12c>)
   145e8:	f003 feda 	bl	183a0 <WsfTrace>
      break;
   145ec:	e7cf      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   145ee:	4828      	ldr	r0, [pc, #160]	; (14690 <AppUiAction+0x130>)
   145f0:	f003 fed6 	bl	183a0 <WsfTrace>
      break;
   145f4:	e7cb      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   145f6:	4827      	ldr	r0, [pc, #156]	; (14694 <AppUiAction+0x134>)
   145f8:	f003 fed2 	bl	183a0 <WsfTrace>
      break;
   145fc:	e7c7      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   145fe:	4826      	ldr	r0, [pc, #152]	; (14698 <AppUiAction+0x138>)
   14600:	f003 fece 	bl	183a0 <WsfTrace>
      break;
   14604:	e7c3      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   14606:	4825      	ldr	r0, [pc, #148]	; (1469c <AppUiAction+0x13c>)
   14608:	f003 feca 	bl	183a0 <WsfTrace>
      break;
   1460c:	e7bf      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   1460e:	4824      	ldr	r0, [pc, #144]	; (146a0 <AppUiAction+0x140>)
   14610:	f003 fec6 	bl	183a0 <WsfTrace>
      break;
   14614:	e7bb      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   14616:	4823      	ldr	r0, [pc, #140]	; (146a4 <AppUiAction+0x144>)
   14618:	f003 fec2 	bl	183a0 <WsfTrace>
      break;
   1461c:	e7b7      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Connection closed <<<");
   1461e:	4822      	ldr	r0, [pc, #136]	; (146a8 <AppUiAction+0x148>)
   14620:	f003 febe 	bl	183a0 <WsfTrace>
      break;
   14624:	e7b3      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Connection opened <<<");
   14626:	4821      	ldr	r0, [pc, #132]	; (146ac <AppUiAction+0x14c>)
   14628:	f003 feba 	bl	183a0 <WsfTrace>
      break;
   1462c:	e7af      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   1462e:	4820      	ldr	r0, [pc, #128]	; (146b0 <AppUiAction+0x150>)
   14630:	f003 feb6 	bl	183a0 <WsfTrace>
      break;
   14634:	e7ab      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   14636:	481f      	ldr	r0, [pc, #124]	; (146b4 <AppUiAction+0x154>)
   14638:	f003 feb2 	bl	183a0 <WsfTrace>
      break;
   1463c:	e7a7      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Scanning started <<<");
   1463e:	481e      	ldr	r0, [pc, #120]	; (146b8 <AppUiAction+0x158>)
   14640:	f003 feae 	bl	183a0 <WsfTrace>
      break;
   14644:	e7a3      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   14646:	481d      	ldr	r0, [pc, #116]	; (146bc <AppUiAction+0x15c>)
   14648:	f003 feaa 	bl	183a0 <WsfTrace>
      break;
   1464c:	e79f      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Advertising started <<<");
   1464e:	481c      	ldr	r0, [pc, #112]	; (146c0 <AppUiAction+0x160>)
   14650:	f003 fea6 	bl	183a0 <WsfTrace>
      break;
   14654:	e79b      	b.n	1458e <AppUiAction+0x2e>
      APP_TRACE_INFO0(">>> Reset complete <<<");
   14656:	481b      	ldr	r0, [pc, #108]	; (146c4 <AppUiAction+0x164>)
   14658:	f003 fea2 	bl	183a0 <WsfTrace>
      break;
   1465c:	e797      	b.n	1458e <AppUiAction+0x2e>
   1465e:	bf00      	nop
   14660:	000256f4 	.word	0x000256f4
   14664:	10006cc8 	.word	0x10006cc8
   14668:	000256c4 	.word	0x000256c4
   1466c:	00025698 	.word	0x00025698
   14670:	0002566c 	.word	0x0002566c
   14674:	00025648 	.word	0x00025648
   14678:	00025624 	.word	0x00025624
   1467c:	00025604 	.word	0x00025604
   14680:	000255e0 	.word	0x000255e0
   14684:	000255bc 	.word	0x000255bc
   14688:	000255a8 	.word	0x000255a8
   1468c:	00025594 	.word	0x00025594
   14690:	00025570 	.word	0x00025570
   14694:	00025548 	.word	0x00025548
   14698:	0002552c 	.word	0x0002552c
   1469c:	0002550c 	.word	0x0002550c
   146a0:	000254f4 	.word	0x000254f4
   146a4:	000254cc 	.word	0x000254cc
   146a8:	000254b0 	.word	0x000254b0
   146ac:	00025494 	.word	0x00025494
   146b0:	0002546c 	.word	0x0002546c
   146b4:	00025450 	.word	0x00025450
   146b8:	00025434 	.word	0x00025434
   146bc:	00025418 	.word	0x00025418
   146c0:	000253fc 	.word	0x000253fc
   146c4:	000253e4 	.word	0x000253e4

000146c8 <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   146c8:	4601      	mov	r1, r0
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   146ca:	4801      	ldr	r0, [pc, #4]	; (146d0 <AppUiDisplayPasskey+0x8>)
   146cc:	f003 be68 	b.w	183a0 <WsfTrace>
   146d0:	0002571c 	.word	0x0002571c

000146d4 <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
   146d4:	4601      	mov	r1, r0
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
   146d6:	4801      	ldr	r0, [pc, #4]	; (146dc <AppUiDisplayConfirmValue+0x8>)
   146d8:	f003 be62 	b.w	183a0 <WsfTrace>
   146dc:	00025730 	.word	0x00025730

000146e0 <appUiTimerExpired>:
   146e0:	4770      	bx	lr
   146e2:	bf00      	nop

000146e4 <appUiBtnPoll>:
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
  if (appUiCbackTbl.btnPollCback)
   146e4:	4b02      	ldr	r3, [pc, #8]	; (146f0 <appUiBtnPoll+0xc>)
   146e6:	689b      	ldr	r3, [r3, #8]
   146e8:	b103      	cbz	r3, 146ec <appUiBtnPoll+0x8>
  {
    (*appUiCbackTbl.btnPollCback)();
   146ea:	4718      	bx	r3
  }
}
   146ec:	4770      	bx	lr
   146ee:	bf00      	nop
   146f0:	10006cc8 	.word	0x10006cc8

000146f4 <AppUiBtnPressed>:
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{

}
   146f4:	4770      	bx	lr
   146f6:	bf00      	nop

000146f8 <AppUiBtnRegister>:
 *  \note   Registered by application to receive button events
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t btnCback)
{
  appUiCbackTbl.btnCback = btnCback;
   146f8:	4b01      	ldr	r3, [pc, #4]	; (14700 <AppUiBtnRegister+0x8>)
   146fa:	6018      	str	r0, [r3, #0]
}
   146fc:	4770      	bx	lr
   146fe:	bf00      	nop
   14700:	10006cc8 	.word	0x10006cc8

00014704 <attcDiscDescriptors>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
static uint8_t attcDiscDescriptors(dmConnId_t connId, attcDiscCb_t *pCb)
{
   14704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  attcDiscChar_t  **pChar;
  uint16_t        startHdl = ATT_HANDLE_NONE;
  uint16_t        endHdl = ATT_HANDLE_NONE;

  /* find next descriptor in list */
  pChar = pCb->pCharList + pCb->charListIdx;
   14708:	7c8b      	ldrb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->charListLen)
   1470a:	7b0d      	ldrb	r5, [r1, #12]
  pChar = pCb->pCharList + pCb->charListIdx;
   1470c:	680e      	ldr	r6, [r1, #0]
{
   1470e:	b083      	sub	sp, #12
  uint16_t        endHdl = ATT_HANDLE_NONE;
   14710:	2200      	movs	r2, #0
  while (pCb->charListIdx < pCb->charListLen)
   14712:	42ab      	cmp	r3, r5
{
   14714:	9001      	str	r0, [sp, #4]
  pChar = pCb->pCharList + pCb->charListIdx;
   14716:	eb06 0c83 	add.w	ip, r6, r3, lsl #2
  uint16_t        startHdl = ATT_HANDLE_NONE;
   1471a:	4614      	mov	r4, r2
  while (pCb->charListIdx < pCb->charListLen)
   1471c:	d23f      	bcs.n	1479e <attcDiscDescriptors+0x9a>
    {
      /* start handle is one greater than characteristic value handle,
       * which is stored in the previous entry in the list;
       * end handle is stored at current entry in the list
       */
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
   1471e:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
      endHdl = pCb->pHdlList[pCb->charListIdx];

      /* clear temp end handle */
      pCb->pHdlList[pCb->charListIdx] = ATT_HANDLE_NONE;
   14722:	4617      	mov	r7, r2
      {
        /* we are looking for descriptors for this characteristic but
         * there aren't any;
         * skip over any other descriptors that follow in our list
         */
        while (++pCb->charListIdx < pCb->charListLen)
   14724:	f105 3aff 	add.w	sl, r5, #4294967295
        {
          pChar++;
   14728:	f1a5 0902 	sub.w	r9, r5, #2
   1472c:	e006      	b.n	1473c <attcDiscDescriptors+0x38>
    }
    else
    {
      /* go to next in list */
      pChar++;
      pCb->charListIdx++;
   1472e:	fa5f f38e 	uxtb.w	r3, lr
  while (pCb->charListIdx < pCb->charListLen)
   14732:	429d      	cmp	r5, r3
      pCb->charListIdx++;
   14734:	748b      	strb	r3, [r1, #18]
      pChar++;
   14736:	f10c 0c04 	add.w	ip, ip, #4
  while (pCb->charListIdx < pCb->charListLen)
   1473a:	d930      	bls.n	1479e <attcDiscDescriptors+0x9a>
    if (((*pChar)->settings & ATTC_SET_DESCRIPTOR) != 0)
   1473c:	f8dc 0000 	ldr.w	r0, [ip]
   14740:	f890 b004 	ldrb.w	fp, [r0, #4]
   14744:	f01b 0f04 	tst.w	fp, #4
      pCb->charListIdx++;
   14748:	f103 0e01 	add.w	lr, r3, #1
    if (((*pChar)->settings & ATTC_SET_DESCRIPTOR) != 0)
   1474c:	d0ef      	beq.n	1472e <attcDiscDescriptors+0x2a>
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
   1474e:	f8d1 e004 	ldr.w	lr, [r1, #4]
   14752:	4443      	add	r3, r8
   14754:	005a      	lsls	r2, r3, #1
   14756:	f83e 4013 	ldrh.w	r4, [lr, r3, lsl #1]
      endHdl = pCb->pHdlList[pCb->charListIdx];
   1475a:	1c93      	adds	r3, r2, #2
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
   1475c:	3401      	adds	r4, #1
      endHdl = pCb->pHdlList[pCb->charListIdx];
   1475e:	f83e 2003 	ldrh.w	r2, [lr, r3]
      pCb->pHdlList[pCb->charListIdx] = ATT_HANDLE_NONE;
   14762:	f82e 7003 	strh.w	r7, [lr, r3]
      startHdl = pCb->pHdlList[pCb->charListIdx - 1] + 1;
   14766:	b2a4      	uxth	r4, r4
      if (startHdl <= endHdl)
   14768:	4294      	cmp	r4, r2
   1476a:	d932      	bls.n	147d2 <attcDiscDescriptors+0xce>
        while (++pCb->charListIdx < pCb->charListLen)
   1476c:	f891 b012 	ldrb.w	fp, [r1, #18]
   14770:	f10b 0301 	add.w	r3, fp, #1
   14774:	b2db      	uxtb	r3, r3
   14776:	eb03 0e0a 	add.w	lr, r3, sl
   1477a:	ebae 0e0b 	sub.w	lr, lr, fp
          pChar++;
   1477e:	eba9 0b0b 	sub.w	fp, r9, fp
   14782:	fa5f fb8b 	uxtb.w	fp, fp
   14786:	f10b 0b01 	add.w	fp, fp, #1
        while (++pCb->charListIdx < pCb->charListLen)
   1478a:	42ab      	cmp	r3, r5
   1478c:	748b      	strb	r3, [r1, #18]
          pChar++;
   1478e:	eb0c 0c8b 	add.w	ip, ip, fp, lsl #2
        while (++pCb->charListIdx < pCb->charListLen)
   14792:	d204      	bcs.n	1479e <attcDiscDescriptors+0x9a>
   14794:	fa5f f38e 	uxtb.w	r3, lr
  while (pCb->charListIdx < pCb->charListLen)
   14798:	429d      	cmp	r5, r3
   1479a:	748b      	strb	r3, [r1, #18]
   1479c:	d8ce      	bhi.n	1473c <attcDiscDescriptors+0x38>
    }
  }

  /* if no more descriptors to be discovered */
  if (pCb->charListIdx == pCb->charListLen)
   1479e:	42ab      	cmp	r3, r5
   147a0:	d117      	bne.n	147d2 <attcDiscDescriptors+0xce>
  for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
   147a2:	b193      	cbz	r3, 147ca <attcDiscDescriptors+0xc6>
   147a4:	3b01      	subs	r3, #1
   147a6:	b2db      	uxtb	r3, r3
   147a8:	1f32      	subs	r2, r6, #4
   147aa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   147ae:	2000      	movs	r0, #0
    if (((*pChar)->settings & ATTC_SET_REQUIRED) != 0)
   147b0:	f852 4f04 	ldr.w	r4, [r2, #4]!
   147b4:	7924      	ldrb	r4, [r4, #4]
   147b6:	07a4      	lsls	r4, r4, #30
   147b8:	d502      	bpl.n	147c0 <attcDiscDescriptors+0xbc>
      if (pCb->pHdlList[i] == ATT_HANDLE_NONE)
   147ba:	684c      	ldr	r4, [r1, #4]
   147bc:	5a24      	ldrh	r4, [r4, r0]
   147be:	b194      	cbz	r4, 147e6 <attcDiscDescriptors+0xe2>
  for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
   147c0:	4293      	cmp	r3, r2
   147c2:	f100 0002 	add.w	r0, r0, #2
   147c6:	d1f3      	bne.n	147b0 <attcDiscDescriptors+0xac>
  return ATT_SUCCESS;
   147c8:	2500      	movs	r5, #0
  else
  {
    AttcFindInfoReq(connId, startHdl, endHdl, TRUE);
    return ATT_CONTINUING;
  }
}
   147ca:	4628      	mov	r0, r5
   147cc:	b003      	add	sp, #12
   147ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    AttcFindInfoReq(connId, startHdl, endHdl, TRUE);
   147d2:	9801      	ldr	r0, [sp, #4]
   147d4:	2301      	movs	r3, #1
   147d6:	4621      	mov	r1, r4
   147d8:	f001 f832 	bl	15840 <AttcFindInfoReq>
    return ATT_CONTINUING;
   147dc:	2578      	movs	r5, #120	; 0x78
}
   147de:	4628      	mov	r0, r5
   147e0:	b003      	add	sp, #12
   147e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ATT_ERR_REQ_NOT_FOUND;
   147e6:	2576      	movs	r5, #118	; 0x76
}
   147e8:	4628      	mov	r0, r5
   147ea:	b003      	add	sp, #12
   147ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000147f0 <AttcDiscService>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcDiscService(dmConnId_t connId, attcDiscCb_t *pCb, uint8_t uuidLen, uint8_t *pUuid)
{
   147f0:	b500      	push	{lr}
   147f2:	b085      	sub	sp, #20
  AttcFindByTypeValueReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_UUID_PRIMARY_SERVICE,
   147f4:	2100      	movs	r1, #0
   147f6:	e9cd 3101 	strd	r3, r1, [sp, #4]
   147fa:	9200      	str	r2, [sp, #0]
   147fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14800:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14804:	2101      	movs	r1, #1
   14806:	f001 f9a9 	bl	15b5c <AttcFindByTypeValueReq>
                         uuidLen, pUuid, FALSE);
}
   1480a:	b005      	add	sp, #20
   1480c:	f85d fb04 	ldr.w	pc, [sp], #4

00014810 <AttcDiscServiceCmpl>:
 *
 *  \return ATT_SUCCESS if successful otherwise error.
 */
/*************************************************************************************************/
uint8_t AttcDiscServiceCmpl(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
   14810:	b510      	push	{r4, lr}
  uint8_t *p;

  /* verify callback event */
  if (pMsg->hdr.event != ATTC_FIND_BY_TYPE_VALUE_RSP)
   14812:	788b      	ldrb	r3, [r1, #2]
   14814:	2b03      	cmp	r3, #3
   14816:	d117      	bne.n	14848 <AttcDiscServiceCmpl+0x38>
  {
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
    return ATT_ERR_UNDEFINED;
  }
  /* verify status */
  else if (pMsg->hdr.status != ATT_SUCCESS)
   14818:	78cc      	ldrb	r4, [r1, #3]
   1481a:	b99c      	cbnz	r4, 14844 <AttcDiscServiceCmpl+0x34>
  {
    return pMsg->hdr.status;
  }
  /* verify result was found */
  else if (pMsg->valueLen == 0)
   1481c:	890b      	ldrh	r3, [r1, #8]
   1481e:	b1d3      	cbz	r3, 14856 <AttcDiscServiceCmpl+0x46>
  {
    return ATT_ERR_NOT_FOUND;
  }

  /* get handles of first returned service only; ATT has already performed error checking */
  p = pMsg->pValue;
   14820:	684b      	ldr	r3, [r1, #4]
  BSTREAM_TO_UINT16(pCb->svcStartHdl, p);
   14822:	785a      	ldrb	r2, [r3, #1]
   14824:	7819      	ldrb	r1, [r3, #0]
   14826:	eb01 2102 	add.w	r1, r1, r2, lsl #8
   1482a:	b289      	uxth	r1, r1
   1482c:	81c1      	strh	r1, [r0, #14]
  BSTREAM_TO_UINT16(pCb->svcEndHdl, p);
   1482e:	789a      	ldrb	r2, [r3, #2]
   14830:	4684      	mov	ip, r0
   14832:	78d8      	ldrb	r0, [r3, #3]
   14834:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   14838:	b292      	uxth	r2, r2

  ATT_TRACE_INFO2("found service startHdl=0x%x endHdl=0x%x", pCb->svcStartHdl, pCb->svcEndHdl);
   1483a:	4808      	ldr	r0, [pc, #32]	; (1485c <AttcDiscServiceCmpl+0x4c>)
  BSTREAM_TO_UINT16(pCb->svcEndHdl, p);
   1483c:	f8ac 2010 	strh.w	r2, [ip, #16]
  ATT_TRACE_INFO2("found service startHdl=0x%x endHdl=0x%x", pCb->svcStartHdl, pCb->svcEndHdl);
   14840:	f003 fdae 	bl	183a0 <WsfTrace>

  return ATT_SUCCESS;
}
   14844:	4620      	mov	r0, r4
   14846:	bd10      	pop	{r4, pc}
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
   14848:	4805      	ldr	r0, [pc, #20]	; (14860 <AttcDiscServiceCmpl+0x50>)
   1484a:	4619      	mov	r1, r3
    return ATT_ERR_UNDEFINED;
   1484c:	2475      	movs	r4, #117	; 0x75
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
   1484e:	f003 fda7 	bl	183a0 <WsfTrace>
}
   14852:	4620      	mov	r0, r4
   14854:	bd10      	pop	{r4, pc}
    return ATT_ERR_NOT_FOUND;
   14856:	240a      	movs	r4, #10
}
   14858:	4620      	mov	r0, r4
   1485a:	bd10      	pop	{r4, pc}
   1485c:	0002576c 	.word	0x0002576c
   14860:	0002574c 	.word	0x0002574c

00014864 <AttcDiscCharStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcDiscCharStart(dmConnId_t connId, attcDiscCb_t *pCb)
{
   14864:	b500      	push	{lr}
   14866:	b083      	sub	sp, #12
  /* initialize control block */
  pCb->charListIdx = 0;
   14868:	f44f 4c7f 	mov.w	ip, #65280	; 0xff00
  pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;

  AttcReadByTypeReq(connId, pCb->svcStartHdl, pCb->svcEndHdl, ATT_16_UUID_LEN,
   1486c:	2201      	movs	r2, #1
  pCb->charListIdx = 0;
   1486e:	f8a1 c012 	strh.w	ip, [r1, #18]
  AttcReadByTypeReq(connId, pCb->svcStartHdl, pCb->svcEndHdl, ATT_16_UUID_LEN,
   14872:	4b05      	ldr	r3, [pc, #20]	; (14888 <AttcDiscCharStart+0x24>)
   14874:	9201      	str	r2, [sp, #4]
   14876:	8a0a      	ldrh	r2, [r1, #16]
   14878:	89c9      	ldrh	r1, [r1, #14]
   1487a:	9300      	str	r3, [sp, #0]
   1487c:	2302      	movs	r3, #2
   1487e:	f001 f99f 	bl	15bc0 <AttcReadByTypeReq>
                    (uint8_t *) attChUuid, TRUE);
}
   14882:	b003      	add	sp, #12
   14884:	f85d fb04 	ldr.w	pc, [sp], #4
   14888:	000259ac 	.word	0x000259ac

0001488c <AttcDiscCharCmpl>:
 *          ATT_SUCCESS if discovery procedure completed successfully.
 *          Otherwise the discovery procedure failed.
 */
/*************************************************************************************************/
uint8_t AttcDiscCharCmpl(attcDiscCb_t *pCb, attEvt_t *pMsg)
{
   1488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14890:	468b      	mov	fp, r1
  uint8_t status;

  /* verify callback event */
  if (pMsg->hdr.event != ATTC_READ_BY_TYPE_RSP &&
   14892:	7889      	ldrb	r1, [r1, #2]
   14894:	2904      	cmp	r1, #4
{
   14896:	b087      	sub	sp, #28
   14898:	4607      	mov	r7, r0
  if (pMsg->hdr.event != ATTC_READ_BY_TYPE_RSP &&
   1489a:	f000 8099 	beq.w	149d0 <AttcDiscCharCmpl+0x144>
   1489e:	2902      	cmp	r1, #2
   148a0:	f040 819b 	bne.w	14bda <AttcDiscCharCmpl+0x34e>
  if (pMsg->hdr.status == ATT_SUCCESS)
   148a4:	f89b 3003 	ldrb.w	r3, [fp, #3]
   148a8:	9300      	str	r3, [sp, #0]
   148aa:	b32b      	cbz	r3, 148f8 <AttcDiscCharCmpl+0x6c>
    pChar = &pCb->pCharList[pCb->charListIdx];
   148ac:	7cba      	ldrb	r2, [r7, #18]
   148ae:	6839      	ldr	r1, [r7, #0]
      if (pCb->charListIdx == pCb->charListLen)
   148b0:	7b3c      	ldrb	r4, [r7, #12]
    pChar = &pCb->pCharList[pCb->charListIdx];
   148b2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   148b6:	3201      	adds	r2, #1
   148b8:	b2d2      	uxtb	r2, r2
   148ba:	e005      	b.n	148c8 <AttcDiscCharCmpl+0x3c>
    } while ((*pChar)->settings & ATTC_SET_DESCRIPTOR);
   148bc:	f851 0f04 	ldr.w	r0, [r1, #4]!
   148c0:	7900      	ldrb	r0, [r0, #4]
   148c2:	0740      	lsls	r0, r0, #29
   148c4:	d504      	bpl.n	148d0 <AttcDiscCharCmpl+0x44>
   148c6:	461a      	mov	r2, r3
   148c8:	1c53      	adds	r3, r2, #1
      if (pCb->charListIdx == pCb->charListLen)
   148ca:	42a2      	cmp	r2, r4
    } while ((*pChar)->settings & ATTC_SET_DESCRIPTOR);
   148cc:	b2db      	uxtb	r3, r3
      if (pCb->charListIdx == pCb->charListLen)
   148ce:	d1f5      	bne.n	148bc <AttcDiscCharCmpl+0x30>
    return attcDiscDescriptors((dmConnId_t) pMsg->hdr.param, pCb);
   148d0:	74ba      	strb	r2, [r7, #18]
   148d2:	f89b 0000 	ldrb.w	r0, [fp]
   148d6:	4639      	mov	r1, r7
   148d8:	f7ff ff14 	bl	14704 <attcDiscDescriptors>
   148dc:	4604      	mov	r4, r0
  {
    status = attcDiscProcDesc(pCb, pMsg);
  }

  /* if characteristic discovery failed clear any handles */
  if (status != ATT_SUCCESS && status != ATT_CONTINUING)
   148de:	b13c      	cbz	r4, 148f0 <AttcDiscCharCmpl+0x64>
   148e0:	2c78      	cmp	r4, #120	; 0x78
   148e2:	d070      	beq.n	149c6 <AttcDiscCharCmpl+0x13a>
  {
    memset(pCb->pHdlList, 0, (pCb->charListLen * sizeof(uint16_t)));
   148e4:	7b3a      	ldrb	r2, [r7, #12]
   148e6:	6878      	ldr	r0, [r7, #4]
   148e8:	0052      	lsls	r2, r2, #1
   148ea:	2100      	movs	r1, #0
   148ec:	f00c fc42 	bl	21174 <memset>
  }

  return status;
}
   148f0:	4620      	mov	r0, r4
   148f2:	b007      	add	sp, #28
   148f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p = pMsg->pValue;
   148f8:	f8db 3004 	ldr.w	r3, [fp, #4]
    pEnd = pMsg->pValue + pMsg->valueLen;
   148fc:	f8bb 2008 	ldrh.w	r2, [fp, #8]
    BSTREAM_TO_UINT8(format, p);
   14900:	4698      	mov	r8, r3
    pEnd = pMsg->pValue + pMsg->valueLen;
   14902:	eb03 0a02 	add.w	sl, r3, r2
    BSTREAM_TO_UINT8(format, p);
   14906:	f818 3b01 	ldrb.w	r3, [r8], #1
    if (format == ATT_FIND_HANDLE_16_UUID)
   1490a:	2b01      	cmp	r3, #1
   1490c:	f000 810d 	beq.w	14b2a <AttcDiscCharCmpl+0x29e>
    else if (format == ATT_FIND_HANDLE_128_UUID)
   14910:	2b02      	cmp	r3, #2
   14912:	f040 816a 	bne.w	14bea <AttcDiscCharCmpl+0x35e>
   14916:	2312      	movs	r3, #18
   14918:	9303      	str	r3, [sp, #12]
      settings = ATTC_SET_UUID_128;
   1491a:	2301      	movs	r3, #1
   1491c:	9300      	str	r3, [sp, #0]
    while (p < pEnd)
   1491e:	45c2      	cmp	sl, r8
   14920:	d94c      	bls.n	149bc <AttcDiscCharCmpl+0x130>
   14922:	f897 900c 	ldrb.w	r9, [r7, #12]
   14926:	f8cd b014 	str.w	fp, [sp, #20]
   1492a:	46d3      	mov	fp, sl
  pDesc = &pCb->pCharList[pCb->charListIdx];
   1492c:	7cbc      	ldrb	r4, [r7, #18]
  BSTREAM_TO_UINT16(hdl, pPair);
   1492e:	f898 3000 	ldrb.w	r3, [r8]
  pDesc = &pCb->pCharList[pCb->charListIdx];
   14932:	683e      	ldr	r6, [r7, #0]
  BSTREAM_TO_UINT16(hdl, pPair);
   14934:	9301      	str	r3, [sp, #4]
  for (i = pCb->charListIdx;
   14936:	454c      	cmp	r4, r9
  BSTREAM_TO_UINT16(hdl, pPair);
   14938:	f898 3001 	ldrb.w	r3, [r8, #1]
   1493c:	9302      	str	r3, [sp, #8]
  pDesc = &pCb->pCharList[pCb->charListIdx];
   1493e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   14942:	f108 0a02 	add.w	sl, r8, #2
   14946:	b222      	sxth	r2, r4
  for (i = pCb->charListIdx;
   14948:	f080 8151 	bcs.w	14bee <AttcDiscCharCmpl+0x362>
   1494c:	9b00      	ldr	r3, [sp, #0]
   1494e:	2b01      	cmp	r3, #1
   14950:	f040 80ee 	bne.w	14b30 <AttcDiscCharCmpl+0x2a4>
   14954:	3e04      	subs	r6, #4
   14956:	e003      	b.n	14960 <AttcDiscCharCmpl+0xd4>
       i++, pDesc++)
   14958:	3401      	adds	r4, #1
   1495a:	b2e4      	uxtb	r4, r4
  for (i = pCb->charListIdx;
   1495c:	454c      	cmp	r4, r9
   1495e:	d222      	bcs.n	149a6 <AttcDiscCharCmpl+0x11a>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
   14960:	f856 0f04 	ldr.w	r0, [r6, #4]!
   14964:	f890 c004 	ldrb.w	ip, [r0, #4]
   14968:	f01c 0f04 	tst.w	ip, #4
    if (pCb->pHdlList[i] == 0)
   1496c:	ea4f 0244 	mov.w	r2, r4, lsl #1
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
   14970:	d019      	beq.n	149a6 <AttcDiscCharCmpl+0x11a>
    if (pCb->pHdlList[i] == 0)
   14972:	687d      	ldr	r5, [r7, #4]
   14974:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
   14978:	eb05 0544 	add.w	r5, r5, r4, lsl #1
   1497c:	2900      	cmp	r1, #0
   1497e:	d1eb      	bne.n	14958 <AttcDiscCharCmpl+0xcc>
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
   14980:	f01c 0f01 	tst.w	ip, #1
   14984:	6800      	ldr	r0, [r0, #0]
    return attUuidCmp16to128(pChar->pUuid, pUuid);
   14986:	4651      	mov	r1, sl
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
   14988:	f040 810c 	bne.w	14ba4 <AttcDiscCharCmpl+0x318>
   1498c:	9204      	str	r2, [sp, #16]
    return attUuidCmp16to128(pChar->pUuid, pUuid);
   1498e:	f003 f807 	bl	179a0 <attUuidCmp16to128>
      if (attcUuidCmp(*pDesc, pPair, settings))
   14992:	9a04      	ldr	r2, [sp, #16]
   14994:	2800      	cmp	r0, #0
   14996:	f040 811d 	bne.w	14bd4 <AttcDiscCharCmpl+0x348>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
   1499a:	f897 900c 	ldrb.w	r9, [r7, #12]
       i++, pDesc++)
   1499e:	3401      	adds	r4, #1
   149a0:	b2e4      	uxtb	r4, r4
  for (i = pCb->charListIdx;
   149a2:	454c      	cmp	r4, r9
   149a4:	d3dc      	bcc.n	14960 <AttcDiscCharCmpl+0xd4>
      p += pairLen;
   149a6:	9b03      	ldr	r3, [sp, #12]
   149a8:	4498      	add	r8, r3
    while (p < pEnd)
   149aa:	45c3      	cmp	fp, r8
   149ac:	d8be      	bhi.n	1492c <AttcDiscCharCmpl+0xa0>
   149ae:	f8dd b014 	ldr.w	fp, [sp, #20]
  if (pMsg->hdr.status != ATT_SUCCESS || pMsg->continuing == FALSE)
   149b2:	f89b 3003 	ldrb.w	r3, [fp, #3]
   149b6:	2b00      	cmp	r3, #0
   149b8:	f47f af78 	bne.w	148ac <AttcDiscCharCmpl+0x20>
   149bc:	f89b 300c 	ldrb.w	r3, [fp, #12]
   149c0:	2b00      	cmp	r3, #0
   149c2:	f43f af73 	beq.w	148ac <AttcDiscCharCmpl+0x20>
    return ATT_CONTINUING;
   149c6:	2478      	movs	r4, #120	; 0x78
}
   149c8:	4620      	mov	r0, r4
   149ca:	b007      	add	sp, #28
   149cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pMsg->hdr.status == ATT_SUCCESS)
   149d0:	f89b 3003 	ldrb.w	r3, [fp, #3]
   149d4:	4618      	mov	r0, r3
   149d6:	2b00      	cmp	r3, #0
   149d8:	f040 8097 	bne.w	14b0a <AttcDiscCharCmpl+0x27e>
    p = pMsg->pValue;
   149dc:	f8db 3004 	ldr.w	r3, [fp, #4]
    pEnd = pMsg->pValue + pMsg->valueLen;
   149e0:	f8bb 2008 	ldrh.w	r2, [fp, #8]
   149e4:	189a      	adds	r2, r3, r2
   149e6:	9200      	str	r2, [sp, #0]
    BSTREAM_TO_UINT8(pairLen, p);
   149e8:	461a      	mov	r2, r3
   149ea:	f812 1b01 	ldrb.w	r1, [r2], #1
   149ee:	9101      	str	r1, [sp, #4]
    if (pairLen == ATT_READ_RSP_LEN_UUID16)
   149f0:	2907      	cmp	r1, #7
   149f2:	d004      	beq.n	149fe <AttcDiscCharCmpl+0x172>
    else if (pairLen == ATT_READ_RSP_LEN_UUID128)
   149f4:	2915      	cmp	r1, #21
   149f6:	f040 80f8 	bne.w	14bea <AttcDiscCharCmpl+0x35e>
      settings = ATTC_SET_UUID_128;
   149fa:	2101      	movs	r1, #1
   149fc:	4608      	mov	r0, r1
    while (p < pEnd)
   149fe:	9900      	ldr	r1, [sp, #0]
   14a00:	4291      	cmp	r1, r2
   14a02:	d97d      	bls.n	14b00 <AttcDiscCharCmpl+0x274>
    pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;
   14a04:	f8cd b010 	str.w	fp, [sp, #16]
   14a08:	f103 0906 	add.w	r9, r3, #6
   14a0c:	4683      	mov	fp, r0
  BSTREAM_TO_UINT16(declHdl, pDecl);
   14a0e:	f819 2c04 	ldrb.w	r2, [r9, #-4]
   14a12:	f819 3c05 	ldrb.w	r3, [r9, #-5]
  BSTREAM_TO_UINT16(hdl, pDecl);
   14a16:	f819 8c02 	ldrb.w	r8, [r9, #-2]
  BSTREAM_TO_UINT16(declHdl, pDecl);
   14a1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  BSTREAM_TO_UINT16(hdl, pDecl);
   14a1e:	f819 2c01 	ldrb.w	r2, [r9, #-1]
   14a22:	eb08 2802 	add.w	r8, r8, r2, lsl #8
  if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
   14a26:	7cfa      	ldrb	r2, [r7, #19]
   14a28:	2aff      	cmp	r2, #255	; 0xff
  BSTREAM_TO_UINT16(declHdl, pDecl);
   14a2a:	b29b      	uxth	r3, r3
  BSTREAM_TO_UINT16(hdl, pDecl);
   14a2c:	fa1f f888 	uxth.w	r8, r8
  if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
   14a30:	d006      	beq.n	14a40 <AttcDiscCharCmpl+0x1b4>
    pCb->pHdlList[pCb->endHdlIdx] = declHdl - 1;
   14a32:	6879      	ldr	r1, [r7, #4]
   14a34:	1e58      	subs	r0, r3, #1
   14a36:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
    pCb->endHdlIdx = ATT_DISC_HDL_IDX_NONE;
   14a3a:	f04f 32ff 	mov.w	r2, #4294967295
   14a3e:	74fa      	strb	r2, [r7, #19]
  if (hdl > declHdl && hdl <= pCb->svcEndHdl)
   14a40:	4543      	cmp	r3, r8
   14a42:	f080 80b6 	bcs.w	14bb2 <AttcDiscCharCmpl+0x326>
   14a46:	8a3b      	ldrh	r3, [r7, #16]
   14a48:	4543      	cmp	r3, r8
   14a4a:	f0c0 80b2 	bcc.w	14bb2 <AttcDiscCharCmpl+0x326>
    for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
   14a4e:	7b3b      	ldrb	r3, [r7, #12]
   14a50:	f8d7 a000 	ldr.w	sl, [r7]
   14a54:	2b00      	cmp	r3, #0
   14a56:	d047      	beq.n	14ae8 <AttcDiscCharCmpl+0x25c>
   14a58:	f8cd 9008 	str.w	r9, [sp, #8]
   14a5c:	2601      	movs	r6, #1
   14a5e:	46c1      	mov	r9, r8
   14a60:	4698      	mov	r8, r3
   14a62:	e006      	b.n	14a72 <AttcDiscCharCmpl+0x1e6>
   14a64:	1c72      	adds	r2, r6, #1
   14a66:	45b0      	cmp	r8, r6
   14a68:	f10a 0a04 	add.w	sl, sl, #4
   14a6c:	b2d2      	uxtb	r2, r2
   14a6e:	d939      	bls.n	14ae4 <AttcDiscCharCmpl+0x258>
   14a70:	4616      	mov	r6, r2
   14a72:	1e75      	subs	r5, r6, #1
      if (pCb->pHdlList[i] == 0)
   14a74:	b2e9      	uxtb	r1, r5
   14a76:	687c      	ldr	r4, [r7, #4]
   14a78:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
   14a7c:	460d      	mov	r5, r1
   14a7e:	004a      	lsls	r2, r1, #1
   14a80:	eb04 0441 	add.w	r4, r4, r1, lsl #1
   14a84:	2800      	cmp	r0, #0
   14a86:	d1ed      	bne.n	14a64 <AttcDiscCharCmpl+0x1d8>
        if (attcUuidCmp(*pChar, pDecl, settings))
   14a88:	f8da 0000 	ldr.w	r0, [sl]
   14a8c:	7901      	ldrb	r1, [r0, #4]
   14a8e:	6800      	ldr	r0, [r0, #0]
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
   14a90:	f001 0101 	and.w	r1, r1, #1
   14a94:	458b      	cmp	fp, r1
   14a96:	f000 8091 	beq.w	14bbc <AttcDiscCharCmpl+0x330>
  else if ((settings == ATTC_SET_UUID_128) && ((pChar->settings & ATTC_SET_UUID_128) == 0))
   14a9a:	f1bb 0f01 	cmp.w	fp, #1
   14a9e:	d1e1      	bne.n	14a64 <AttcDiscCharCmpl+0x1d8>
   14aa0:	2900      	cmp	r1, #0
   14aa2:	d1df      	bne.n	14a64 <AttcDiscCharCmpl+0x1d8>
    return attUuidCmp16to128(pChar->pUuid, pUuid);
   14aa4:	9902      	ldr	r1, [sp, #8]
   14aa6:	9203      	str	r2, [sp, #12]
   14aa8:	f002 ff7a 	bl	179a0 <attUuidCmp16to128>
        if (attcUuidCmp(*pChar, pDecl, settings))
   14aac:	9a03      	ldr	r2, [sp, #12]
   14aae:	b188      	cbz	r0, 14ad4 <AttcDiscCharCmpl+0x248>
          pCb->pHdlList[i] = hdl;
   14ab0:	687c      	ldr	r4, [r7, #4]
   14ab2:	4414      	add	r4, r2
   14ab4:	f8a4 9000 	strh.w	r9, [r4]
          if (i < (pCb->charListLen - 1) &&
   14ab8:	7b3a      	ldrb	r2, [r7, #12]
   14aba:	3a01      	subs	r2, #1
   14abc:	4295      	cmp	r5, r2
   14abe:	da05      	bge.n	14acc <AttcDiscCharCmpl+0x240>
              ((*(pChar + 1))->settings & ATTC_SET_DESCRIPTOR) == ATTC_SET_DESCRIPTOR)
   14ac0:	f8da 2004 	ldr.w	r2, [sl, #4]
          if (i < (pCb->charListLen - 1) &&
   14ac4:	7912      	ldrb	r2, [r2, #4]
   14ac6:	0752      	lsls	r2, r2, #29
            pCb->endHdlIdx = i + 1;
   14ac8:	bf48      	it	mi
   14aca:	74fe      	strbmi	r6, [r7, #19]
          ATT_TRACE_INFO1("characteristic found handle:0x%x", hdl);
   14acc:	4850      	ldr	r0, [pc, #320]	; (14c10 <AttcDiscCharCmpl+0x384>)
   14ace:	4649      	mov	r1, r9
   14ad0:	f003 fc66 	bl	183a0 <WsfTrace>
   14ad4:	f897 800c 	ldrb.w	r8, [r7, #12]
    for (i = 0, pChar = pCb->pCharList; i < pCb->charListLen; i++, pChar++)
   14ad8:	1c72      	adds	r2, r6, #1
   14ada:	45b0      	cmp	r8, r6
   14adc:	f10a 0a04 	add.w	sl, sl, #4
   14ae0:	b2d2      	uxtb	r2, r2
   14ae2:	d8c5      	bhi.n	14a70 <AttcDiscCharCmpl+0x1e4>
   14ae4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    while (p < pEnd)
   14ae8:	9b01      	ldr	r3, [sp, #4]
   14aea:	9a00      	ldr	r2, [sp, #0]
   14aec:	4499      	add	r9, r3
   14aee:	f1a9 0305 	sub.w	r3, r9, #5
   14af2:	429a      	cmp	r2, r3
   14af4:	d88b      	bhi.n	14a0e <AttcDiscCharCmpl+0x182>
  if (pMsg->hdr.status != ATT_SUCCESS || pMsg->continuing == FALSE)
   14af6:	f8dd b010 	ldr.w	fp, [sp, #16]
   14afa:	f89b 3003 	ldrb.w	r3, [fp, #3]
   14afe:	b923      	cbnz	r3, 14b0a <AttcDiscCharCmpl+0x27e>
   14b00:	f89b 300c 	ldrb.w	r3, [fp, #12]
   14b04:	2b00      	cmp	r3, #0
   14b06:	f47f af5e 	bne.w	149c6 <AttcDiscCharCmpl+0x13a>
    if (pCb->endHdlIdx != ATT_DISC_HDL_IDX_NONE)
   14b0a:	7cfb      	ldrb	r3, [r7, #19]
   14b0c:	2bff      	cmp	r3, #255	; 0xff
   14b0e:	d003      	beq.n	14b18 <AttcDiscCharCmpl+0x28c>
      pCb->pHdlList[pCb->endHdlIdx] = pCb->svcEndHdl;
   14b10:	687a      	ldr	r2, [r7, #4]
   14b12:	8a39      	ldrh	r1, [r7, #16]
   14b14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    pCb->charListIdx = 0;
   14b18:	2300      	movs	r3, #0
   14b1a:	74bb      	strb	r3, [r7, #18]
    return attcDiscDescriptors((dmConnId_t) pMsg->hdr.param, pCb);
   14b1c:	f89b 0000 	ldrb.w	r0, [fp]
   14b20:	4639      	mov	r1, r7
   14b22:	f7ff fdef 	bl	14704 <attcDiscDescriptors>
   14b26:	4604      	mov	r4, r0
   14b28:	e6d9      	b.n	148de <AttcDiscCharCmpl+0x52>
   14b2a:	2304      	movs	r3, #4
   14b2c:	9303      	str	r3, [sp, #12]
   14b2e:	e6f6      	b.n	1491e <AttcDiscCharCmpl+0x92>
   14b30:	f109 3cff 	add.w	ip, r9, #4294967295
   14b34:	ebac 0c04 	sub.w	ip, ip, r4
   14b38:	fa5f fc8c 	uxtb.w	ip, ip
   14b3c:	2304      	movs	r3, #4
   14b3e:	fb13 6c0c 	smlabb	ip, r3, ip, r6
   14b42:	0052      	lsls	r2, r2, #1
   14b44:	3e04      	subs	r6, #4
   14b46:	e002      	b.n	14b4e <AttcDiscCharCmpl+0x2c2>
  for (i = pCb->charListIdx;
   14b48:	45b4      	cmp	ip, r6
   14b4a:	f43f af2c 	beq.w	149a6 <AttcDiscCharCmpl+0x11a>
       (i < pCb->charListLen) && (((*pDesc)->settings & ATTC_SET_DESCRIPTOR) != 0);
   14b4e:	f856 0f04 	ldr.w	r0, [r6, #4]!
   14b52:	7901      	ldrb	r1, [r0, #4]
   14b54:	074b      	lsls	r3, r1, #29
   14b56:	f57f af26 	bpl.w	149a6 <AttcDiscCharCmpl+0x11a>
    if (pCb->pHdlList[i] == 0)
   14b5a:	687b      	ldr	r3, [r7, #4]
   14b5c:	5a9c      	ldrh	r4, [r3, r2]
   14b5e:	4413      	add	r3, r2
  for (i = pCb->charListIdx;
   14b60:	3202      	adds	r2, #2
    if (pCb->pHdlList[i] == 0)
   14b62:	2c00      	cmp	r4, #0
   14b64:	d1f0      	bne.n	14b48 <AttcDiscCharCmpl+0x2bc>
  if ((pChar->settings & ATT_SET_UUID_MASK) == settings)
   14b66:	07cd      	lsls	r5, r1, #31
   14b68:	6800      	ldr	r0, [r0, #0]
   14b6a:	d4ed      	bmi.n	14b48 <AttcDiscCharCmpl+0x2bc>
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
   14b6c:	7804      	ldrb	r4, [r0, #0]
   14b6e:	f89a 1000 	ldrb.w	r1, [sl]
   14b72:	428c      	cmp	r4, r1
   14b74:	d1e8      	bne.n	14b48 <AttcDiscCharCmpl+0x2bc>
   14b76:	7840      	ldrb	r0, [r0, #1]
   14b78:	f89a 1001 	ldrb.w	r1, [sl, #1]
   14b7c:	4288      	cmp	r0, r1
   14b7e:	d1e3      	bne.n	14b48 <AttcDiscCharCmpl+0x2bc>
   14b80:	461d      	mov	r5, r3
  BSTREAM_TO_UINT16(hdl, pPair);
   14b82:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   14b86:	eb03 2102 	add.w	r1, r3, r2, lsl #8
      p += pairLen;
   14b8a:	9b03      	ldr	r3, [sp, #12]
        ATT_TRACE_INFO1("descriptor found handle:0x%x", hdl);
   14b8c:	4821      	ldr	r0, [pc, #132]	; (14c14 <AttcDiscCharCmpl+0x388>)
  BSTREAM_TO_UINT16(hdl, pPair);
   14b8e:	b289      	uxth	r1, r1
      p += pairLen;
   14b90:	4498      	add	r8, r3
        pCb->pHdlList[i] = hdl;
   14b92:	8029      	strh	r1, [r5, #0]
        ATT_TRACE_INFO1("descriptor found handle:0x%x", hdl);
   14b94:	f003 fc04 	bl	183a0 <WsfTrace>
    while (p < pEnd)
   14b98:	45c3      	cmp	fp, r8
   14b9a:	f67f af08 	bls.w	149ae <AttcDiscCharCmpl+0x122>
   14b9e:	f897 900c 	ldrb.w	r9, [r7, #12]
   14ba2:	e6c3      	b.n	1492c <AttcDiscCharCmpl+0xa0>
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
   14ba4:	2210      	movs	r2, #16
   14ba6:	f00c fab3 	bl	21110 <memcmp>
      if (attcUuidCmp(*pDesc, pPair, settings))
   14baa:	2800      	cmp	r0, #0
   14bac:	f47f aed4 	bne.w	14958 <AttcDiscCharCmpl+0xcc>
   14bb0:	e7e7      	b.n	14b82 <AttcDiscCharCmpl+0x2f6>
    ATT_TRACE_WARN1("invalid handle:0x%x", hdl);
   14bb2:	4819      	ldr	r0, [pc, #100]	; (14c18 <AttcDiscCharCmpl+0x38c>)
   14bb4:	4641      	mov	r1, r8
   14bb6:	f003 fbf3 	bl	183a0 <WsfTrace>
   14bba:	e795      	b.n	14ae8 <AttcDiscCharCmpl+0x25c>
    return (memcmp(pChar->pUuid, pUuid, (settings == 0) ? ATT_16_UUID_LEN : ATT_128_UUID_LEN) == 0);
   14bbc:	f1bb 0f00 	cmp.w	fp, #0
   14bc0:	bf0c      	ite	eq
   14bc2:	2202      	moveq	r2, #2
   14bc4:	2210      	movne	r2, #16
   14bc6:	9902      	ldr	r1, [sp, #8]
   14bc8:	f00c faa2 	bl	21110 <memcmp>
        if (attcUuidCmp(*pChar, pDecl, settings))
   14bcc:	2800      	cmp	r0, #0
   14bce:	f43f af71 	beq.w	14ab4 <AttcDiscCharCmpl+0x228>
   14bd2:	e747      	b.n	14a64 <AttcDiscCharCmpl+0x1d8>
        pCb->pHdlList[i] = hdl;
   14bd4:	687d      	ldr	r5, [r7, #4]
   14bd6:	4415      	add	r5, r2
   14bd8:	e7d3      	b.n	14b82 <AttcDiscCharCmpl+0x2f6>
    ATT_TRACE_WARN1("unexpected callback event %d", pMsg->hdr.event);
   14bda:	4810      	ldr	r0, [pc, #64]	; (14c1c <AttcDiscCharCmpl+0x390>)
   14bdc:	f003 fbe0 	bl	183a0 <WsfTrace>
    return ATT_ERR_UNDEFINED;
   14be0:	2475      	movs	r4, #117	; 0x75
}
   14be2:	4620      	mov	r0, r4
   14be4:	b007      	add	sp, #28
   14be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bea:	2473      	movs	r4, #115	; 0x73
   14bec:	e67a      	b.n	148e4 <AttcDiscCharCmpl+0x58>
      p += pairLen;
   14bee:	9b03      	ldr	r3, [sp, #12]
   14bf0:	46da      	mov	sl, fp
   14bf2:	4498      	add	r8, r3
    while (p < pEnd)
   14bf4:	45c2      	cmp	sl, r8
      p += pairLen;
   14bf6:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (p < pEnd)
   14bfa:	f67f aeda 	bls.w	149b2 <AttcDiscCharCmpl+0x126>
      p += pairLen;
   14bfe:	4498      	add	r8, r3
    while (p < pEnd)
   14c00:	45c2      	cmp	sl, r8
   14c02:	f67f aed6 	bls.w	149b2 <AttcDiscCharCmpl+0x126>
      p += pairLen;
   14c06:	4498      	add	r8, r3
    while (p < pEnd)
   14c08:	45c2      	cmp	sl, r8
   14c0a:	d8f8      	bhi.n	14bfe <AttcDiscCharCmpl+0x372>
   14c0c:	e6d1      	b.n	149b2 <AttcDiscCharCmpl+0x126>
   14c0e:	bf00      	nop
   14c10:	00025794 	.word	0x00025794
   14c14:	000257cc 	.word	0x000257cc
   14c18:	000257b8 	.word	0x000257b8
   14c1c:	0002574c 	.word	0x0002574c

00014c20 <AttcDiscConfigStart>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if nothing to configure.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigStart(dmConnId_t connId, attcDiscCb_t *pCb)
{
   14c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (pCb->charListIdx < pCb->cfgListLen)
   14c22:	7b4e      	ldrb	r6, [r1, #13]
  pCfg = pCb->pCfgList + pCb->charListIdx;
   14c24:	688c      	ldr	r4, [r1, #8]
  /* use char list index to iterate over config list */
  pCb->charListIdx = 0;
   14c26:	2300      	movs	r3, #0
   14c28:	748b      	strb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->cfgListLen)
   14c2a:	b1ae      	cbz	r6, 14c58 <AttcDiscConfigStart+0x38>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   14c2c:	684f      	ldr	r7, [r1, #4]
   14c2e:	e004      	b.n	14c3a <AttcDiscConfigStart+0x1a>
  while (pCb->charListIdx < pCb->cfgListLen)
   14c30:	429e      	cmp	r6, r3
    pCb->charListIdx++;
   14c32:	748b      	strb	r3, [r1, #18]
    pCfg++;
   14c34:	f104 0408 	add.w	r4, r4, #8
  while (pCb->charListIdx < pCb->cfgListLen)
   14c38:	d00e      	beq.n	14c58 <AttcDiscConfigStart+0x38>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   14c3a:	7962      	ldrb	r2, [r4, #5]
   14c3c:	f837 5012 	ldrh.w	r5, [r7, r2, lsl #1]
    pCb->charListIdx++;
   14c40:	3301      	adds	r3, #1
   14c42:	b2db      	uxtb	r3, r3
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   14c44:	2d00      	cmp	r5, #0
   14c46:	d0f3      	beq.n	14c30 <AttcDiscConfigStart+0x10>
      if (pCfg->valueLen != 0)
   14c48:	7922      	ldrb	r2, [r4, #4]
   14c4a:	b13a      	cbz	r2, 14c5c <AttcDiscConfigStart+0x3c>
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
   14c4c:	6823      	ldr	r3, [r4, #0]
   14c4e:	4629      	mov	r1, r5
   14c50:	f000 fe9e 	bl	15990 <AttcWriteReq>
      return ATT_CONTINUING;
   14c54:	2078      	movs	r0, #120	; 0x78

  return attcDiscConfigNext(connId, pCb);
}
   14c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ATT_SUCCESS;
   14c58:	2000      	movs	r0, #0
}
   14c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
   14c5c:	4629      	mov	r1, r5
   14c5e:	f000 fe45 	bl	158ec <AttcReadReq>
      return ATT_CONTINUING;
   14c62:	2078      	movs	r0, #120	; 0x78
}
   14c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c66:	bf00      	nop

00014c68 <AttcDiscConfigCmpl>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if configuration procedure completed successfully.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigCmpl(dmConnId_t connId, attcDiscCb_t *pCb)
{
   14c68:	b538      	push	{r3, r4, r5, lr}
  /* go to next in list */
  pCb->charListIdx++;
   14c6a:	7c8b      	ldrb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->cfgListLen)
   14c6c:	f891 e00d 	ldrb.w	lr, [r1, #13]
  pCfg = pCb->pCfgList + pCb->charListIdx;
   14c70:	688a      	ldr	r2, [r1, #8]
  pCb->charListIdx++;
   14c72:	3301      	adds	r3, #1
   14c74:	b2db      	uxtb	r3, r3
  while (pCb->charListIdx < pCb->cfgListLen)
   14c76:	4573      	cmp	r3, lr
  pCb->charListIdx++;
   14c78:	748b      	strb	r3, [r1, #18]
  pCfg = pCb->pCfgList + pCb->charListIdx;
   14c7a:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
  while (pCb->charListIdx < pCb->cfgListLen)
   14c7e:	d218      	bcs.n	14cb2 <AttcDiscConfigCmpl+0x4a>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   14c80:	684d      	ldr	r5, [r1, #4]
   14c82:	e004      	b.n	14c8e <AttcDiscConfigCmpl+0x26>
  while (pCb->charListIdx < pCb->cfgListLen)
   14c84:	4573      	cmp	r3, lr
    pCb->charListIdx++;
   14c86:	748b      	strb	r3, [r1, #18]
    pCfg++;
   14c88:	f10c 0c08 	add.w	ip, ip, #8
  while (pCb->charListIdx < pCb->cfgListLen)
   14c8c:	d211      	bcs.n	14cb2 <AttcDiscConfigCmpl+0x4a>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   14c8e:	f89c 2005 	ldrb.w	r2, [ip, #5]
   14c92:	f835 4012 	ldrh.w	r4, [r5, r2, lsl #1]
    pCb->charListIdx++;
   14c96:	3301      	adds	r3, #1
   14c98:	b2db      	uxtb	r3, r3
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   14c9a:	2c00      	cmp	r4, #0
   14c9c:	d0f2      	beq.n	14c84 <AttcDiscConfigCmpl+0x1c>
      if (pCfg->valueLen != 0)
   14c9e:	f89c 2004 	ldrb.w	r2, [ip, #4]
   14ca2:	b142      	cbz	r2, 14cb6 <AttcDiscConfigCmpl+0x4e>
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
   14ca4:	f8dc 3000 	ldr.w	r3, [ip]
   14ca8:	4621      	mov	r1, r4
   14caa:	f000 fe71 	bl	15990 <AttcWriteReq>
      return ATT_CONTINUING;
   14cae:	2078      	movs	r0, #120	; 0x78

  return attcDiscConfigNext(connId, pCb);
}
   14cb0:	bd38      	pop	{r3, r4, r5, pc}
  return ATT_SUCCESS;
   14cb2:	2000      	movs	r0, #0
}
   14cb4:	bd38      	pop	{r3, r4, r5, pc}
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
   14cb6:	4621      	mov	r1, r4
   14cb8:	f000 fe18 	bl	158ec <AttcReadReq>
      return ATT_CONTINUING;
   14cbc:	2078      	movs	r0, #120	; 0x78
}
   14cbe:	bd38      	pop	{r3, r4, r5, pc}

00014cc0 <AttcDiscConfigResume>:
 *  \return ATT_CONTINUING if successful and configuration procedure is continuing.
 *          ATT_SUCCESS if configuration procedure completed successfully.
 */
/*************************************************************************************************/
uint8_t AttcDiscConfigResume(dmConnId_t connId, attcDiscCb_t *pCb)
{
   14cc0:	b538      	push	{r3, r4, r5, lr}
  pCfg = pCb->pCfgList + pCb->charListIdx;
   14cc2:	7c8b      	ldrb	r3, [r1, #18]
  while (pCb->charListIdx < pCb->cfgListLen)
   14cc4:	f891 e00d 	ldrb.w	lr, [r1, #13]
  pCfg = pCb->pCfgList + pCb->charListIdx;
   14cc8:	688a      	ldr	r2, [r1, #8]
  while (pCb->charListIdx < pCb->cfgListLen)
   14cca:	4573      	cmp	r3, lr
  pCfg = pCb->pCfgList + pCb->charListIdx;
   14ccc:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
  while (pCb->charListIdx < pCb->cfgListLen)
   14cd0:	d218      	bcs.n	14d04 <AttcDiscConfigResume+0x44>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   14cd2:	684d      	ldr	r5, [r1, #4]
   14cd4:	e004      	b.n	14ce0 <AttcDiscConfigResume+0x20>
  while (pCb->charListIdx < pCb->cfgListLen)
   14cd6:	4573      	cmp	r3, lr
    pCb->charListIdx++;
   14cd8:	748b      	strb	r3, [r1, #18]
    pCfg++;
   14cda:	f10c 0c08 	add.w	ip, ip, #8
  while (pCb->charListIdx < pCb->cfgListLen)
   14cde:	d011      	beq.n	14d04 <AttcDiscConfigResume+0x44>
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   14ce0:	f89c 2005 	ldrb.w	r2, [ip, #5]
   14ce4:	f835 4012 	ldrh.w	r4, [r5, r2, lsl #1]
    pCb->charListIdx++;
   14ce8:	3301      	adds	r3, #1
   14cea:	b2db      	uxtb	r3, r3
    if (pCb->pHdlList[pCfg->hdlIdx] != ATT_HANDLE_NONE)
   14cec:	2c00      	cmp	r4, #0
   14cee:	d0f2      	beq.n	14cd6 <AttcDiscConfigResume+0x16>
      if (pCfg->valueLen != 0)
   14cf0:	f89c 2004 	ldrb.w	r2, [ip, #4]
   14cf4:	b142      	cbz	r2, 14d08 <AttcDiscConfigResume+0x48>
        AttcWriteReq(connId, pCb->pHdlList[pCfg->hdlIdx], pCfg->valueLen, (uint8_t *) pCfg->pValue);
   14cf6:	f8dc 3000 	ldr.w	r3, [ip]
   14cfa:	4621      	mov	r1, r4
   14cfc:	f000 fe48 	bl	15990 <AttcWriteReq>
      return ATT_CONTINUING;
   14d00:	2078      	movs	r0, #120	; 0x78
  return attcDiscConfigNext(connId, pCb);
}
   14d02:	bd38      	pop	{r3, r4, r5, pc}
  return ATT_SUCCESS;
   14d04:	2000      	movs	r0, #0
}
   14d06:	bd38      	pop	{r3, r4, r5, pc}
        AttcReadReq(connId, pCb->pHdlList[pCfg->hdlIdx]);
   14d08:	4621      	mov	r1, r4
   14d0a:	f000 fdef 	bl	158ec <AttcReadReq>
      return ATT_CONTINUING;
   14d0e:	2078      	movs	r0, #120	; 0x78
}
   14d10:	bd38      	pop	{r3, r4, r5, pc}
   14d12:	bf00      	nop

00014d14 <attcSendSimpleReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcSendSimpleReq(attcCcb_t *pCcb)
{
   14d14:	b570      	push	{r4, r5, r6, lr}

  /* clear stored packet pointer */
  pCcb->outReq.pPkt = NULL;

  /* start request timer (except for write command) */
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   14d16:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   14d18:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
   14d1a:	2200      	movs	r2, #0
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   14d1c:	2b0a      	cmp	r3, #10
{
   14d1e:	4604      	mov	r4, r0
  pCcb->outReq.pPkt = NULL;
   14d20:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   14d22:	d008      	beq.n	14d36 <attcSendSimpleReq+0x22>
  {
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   14d24:	4b08      	ldr	r3, [pc, #32]	; (14d48 <attcSendSimpleReq+0x34>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   14d26:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   14d28:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   14d2a:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   14d2e:	7999      	ldrb	r1, [r3, #6]
   14d30:	3024      	adds	r0, #36	; 0x24
   14d32:	f003 fa0f 	bl	18154 <WsfTimerStartSec>
  }

  /* send packet to L2CAP */
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   14d36:	6823      	ldr	r3, [r4, #0]
   14d38:	882a      	ldrh	r2, [r5, #0]
   14d3a:	8b19      	ldrh	r1, [r3, #24]
   14d3c:	2004      	movs	r0, #4
   14d3e:	462b      	mov	r3, r5
}
   14d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   14d44:	f006 ba3e 	b.w	1b1c4 <L2cDataReq>
   14d48:	10002e50 	.word	0x10002e50

00014d4c <attcDataCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attcDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
   14d4c:	b538      	push	{r3, r4, r5, lr}
   14d4e:	460d      	mov	r5, r1
   14d50:	4614      	mov	r4, r2
/*************************************************************************************************/
attcCcb_t *attcCcbByHandle(uint16_t handle)
{
  dmConnId_t  connId;

  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   14d52:	f007 f9b3 	bl	1c0bc <DmConnIdByHandle>
   14d56:	b190      	cbz	r0, 14d7e <attcDataCback+0x32>
  opcode = *(pPacket + L2C_PAYLOAD_START);
   14d58:	7a21      	ldrb	r1, [r4, #8]
  {
    return &attcCb.ccb[connId - 1];
   14d5a:	4b0f      	ldr	r3, [pc, #60]	; (14d98 <attcDataCback+0x4c>)
   14d5c:	3801      	subs	r0, #1
   14d5e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
   14d62:	2919      	cmp	r1, #25
    return &attcCb.ccb[connId - 1];
   14d64:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  if (opcode <= ATT_PDU_EXEC_WRITE_RSP)
   14d68:	d90a      	bls.n	14d80 <attcDataCback+0x34>
  else if ((opcode == ATT_PDU_VALUE_NTF) || (opcode == ATT_PDU_VALUE_IND))
   14d6a:	291b      	cmp	r1, #27
   14d6c:	d001      	beq.n	14d72 <attcDataCback+0x26>
   14d6e:	291d      	cmp	r1, #29
   14d70:	d10c      	bne.n	14d8c <attcDataCback+0x40>
    attcProcInd(pCcb, len, pPacket);
   14d72:	4622      	mov	r2, r4
   14d74:	4629      	mov	r1, r5
}
   14d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    attcProcInd(pCcb, len, pPacket);
   14d7a:	f000 bcb9 	b.w	156f0 <attcProcInd>
}
   14d7e:	bd38      	pop	{r3, r4, r5, pc}
    attcProcRsp(pCcb, len, pPacket);
   14d80:	4622      	mov	r2, r4
   14d82:	4629      	mov	r1, r5
}
   14d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    attcProcRsp(pCcb, len, pPacket);
   14d88:	f000 bc54 	b.w	15634 <attcProcRsp>
}
   14d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ATT_TRACE_WARN1("attc unknown opcode 0x%02x", opcode);
   14d90:	4802      	ldr	r0, [pc, #8]	; (14d9c <attcDataCback+0x50>)
   14d92:	f003 bb05 	b.w	183a0 <WsfTrace>
   14d96:	bf00      	nop
   14d98:	10006cd4 	.word	0x10006cd4
   14d9c:	000257ec 	.word	0x000257ec

00014da0 <attcCtrlCback>:
{
   14da0:	b530      	push	{r4, r5, lr}
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   14da2:	7804      	ldrb	r4, [r0, #0]
{
   14da4:	b083      	sub	sp, #12
   14da6:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
   14da8:	4620      	mov	r0, r4
   14daa:	f007 f9a9 	bl	1c100 <DmConnInUse>
   14dae:	b1a0      	cbz	r0, 14dda <attcCtrlCback+0x3a>
    AttcIndConfirm((dmConnId_t) pMsg->param);
   14db0:	7828      	ldrb	r0, [r5, #0]
   14db2:	f000 fe63 	bl	15a7c <AttcIndConfirm>
    return &attcCb.ccb[connId - 1];
   14db6:	3c01      	subs	r4, #1
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   14db8:	490b      	ldr	r1, [pc, #44]	; (14de8 <attcCtrlCback+0x48>)
    attcWriteCmdCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   14dba:	7828      	ldrb	r0, [r5, #0]
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   14dbc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14dc0:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   14dc4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   14dc6:	b132      	cbz	r2, 14dd6 <attcCtrlCback+0x36>
/*************************************************************************************************/
void attcExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status)
{
  if (event != ATT_METHOD_MTU)
  {
    attExecCallback(connId, event, handle, status, 0);
   14dc8:	2500      	movs	r5, #0
   14dca:	9500      	str	r5, [sp, #0]
   14dcc:	462b      	mov	r3, r5
   14dce:	210a      	movs	r1, #10
   14dd0:	f002 fe1a 	bl	17a08 <attExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
   14dd4:	86e5      	strh	r5, [r4, #54]	; 0x36
}
   14dd6:	b003      	add	sp, #12
   14dd8:	bd30      	pop	{r4, r5, pc}
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   14dda:	4804      	ldr	r0, [pc, #16]	; (14dec <attcCtrlCback+0x4c>)
   14ddc:	4621      	mov	r1, r4
}
   14dde:	b003      	add	sp, #12
   14de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   14de4:	f003 badc 	b.w	183a0 <WsfTrace>
   14de8:	10006cd4 	.word	0x10006cd4
   14dec:	00025808 	.word	0x00025808

00014df0 <attcSendWriteCmd>:
{
   14df0:	b530      	push	{r4, r5, lr}
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   14df2:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   14df4:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
   14df6:	2200      	movs	r2, #0
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   14df8:	2b0a      	cmp	r3, #10
{
   14dfa:	b083      	sub	sp, #12
   14dfc:	4604      	mov	r4, r0
  pCcb->outReq.pPkt = NULL;
   14dfe:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   14e00:	d008      	beq.n	14e14 <attcSendWriteCmd+0x24>
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   14e02:	4b13      	ldr	r3, [pc, #76]	; (14e50 <attcSendWriteCmd+0x60>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   14e04:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   14e06:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   14e08:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   14e0c:	7999      	ldrb	r1, [r3, #6]
   14e0e:	3024      	adds	r0, #36	; 0x24
   14e10:	f003 f9a0 	bl	18154 <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   14e14:	6823      	ldr	r3, [r4, #0]
   14e16:	882a      	ldrh	r2, [r5, #0]
   14e18:	8b19      	ldrh	r1, [r3, #24]
   14e1a:	2004      	movs	r0, #4
   14e1c:	462b      	mov	r3, r5
   14e1e:	f006 f9d1 	bl	1b1c4 <L2cDataReq>
  if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   14e22:	6822      	ldr	r2, [r4, #0]
   14e24:	7f53      	ldrb	r3, [r2, #29]
   14e26:	f013 0302 	ands.w	r3, r3, #2
   14e2a:	d007      	beq.n	14e3c <attcSendWriteCmd+0x4c>
    if (pCcb->pendWriteCmdHandle[i] == ATT_HANDLE_NONE)
   14e2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   14e2e:	b90b      	cbnz	r3, 14e34 <attcSendWriteCmd+0x44>
      pCcb->pendWriteCmdHandle[i] = pCcb->outReq.handle;
   14e30:	8b23      	ldrh	r3, [r4, #24]
   14e32:	86e3      	strh	r3, [r4, #54]	; 0x36
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   14e34:	2300      	movs	r3, #0
   14e36:	74a3      	strb	r3, [r4, #18]
}
   14e38:	b003      	add	sp, #12
   14e3a:	bd30      	pop	{r4, r5, pc}
    attExecCallback(connId, event, handle, status, 0);
   14e3c:	7f10      	ldrb	r0, [r2, #28]
   14e3e:	8b22      	ldrh	r2, [r4, #24]
   14e40:	9300      	str	r3, [sp, #0]
   14e42:	210a      	movs	r1, #10
   14e44:	f002 fde0 	bl	17a08 <attExecCallback>
  pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   14e48:	2300      	movs	r3, #0
   14e4a:	74a3      	strb	r3, [r4, #18]
}
   14e4c:	b003      	add	sp, #12
   14e4e:	bd30      	pop	{r4, r5, pc}
   14e50:	10002e50 	.word	0x10002e50

00014e54 <attcSendMtuReq>:
{
   14e54:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
   14e56:	6801      	ldr	r1, [r0, #0]
   14e58:	7f4b      	ldrb	r3, [r1, #29]
   14e5a:	f013 0201 	ands.w	r2, r3, #1
{
   14e5e:	4604      	mov	r4, r0
  if (pCcb->pMainCcb->control & ATT_CCB_STATUS_MTU_SENT)
   14e60:	d00c      	beq.n	14e7c <attcSendMtuReq+0x28>
  if (pMsg->pPkt != NULL)
   14e62:	6940      	ldr	r0, [r0, #20]
   14e64:	b118      	cbz	r0, 14e6e <attcSendMtuReq+0x1a>
    WsfMsgFree(pMsg->pPkt);
   14e66:	f002 ff23 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   14e6a:	2300      	movs	r3, #0
   14e6c:	6163      	str	r3, [r4, #20]
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   14e6e:	2300      	movs	r3, #0
   14e70:	74a3      	strb	r3, [r4, #18]
}
   14e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ATT_TRACE_WARN0("MTU req discarded");
   14e76:	480f      	ldr	r0, [pc, #60]	; (14eb4 <attcSendMtuReq+0x60>)
   14e78:	f003 ba92 	b.w	183a0 <WsfTrace>
    pCcb->pMainCcb->control |= ATT_CCB_STATUS_MTU_SENT;
   14e7c:	f043 0301 	orr.w	r3, r3, #1
   14e80:	774b      	strb	r3, [r1, #29]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   14e82:	7c83      	ldrb	r3, [r0, #18]
  attcPktParam_t  *pPkt = pCcb->outReq.pPkt;
   14e84:	6945      	ldr	r5, [r0, #20]
  pCcb->outReq.pPkt = NULL;
   14e86:	6142      	str	r2, [r0, #20]
  if (pCcb->outReq.hdr.event != ATTC_MSG_API_WRITE_CMD)
   14e88:	2b0a      	cmp	r3, #10
   14e8a:	d107      	bne.n	14e9c <attcSendMtuReq+0x48>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   14e8c:	882a      	ldrh	r2, [r5, #0]
   14e8e:	8b09      	ldrh	r1, [r1, #24]
   14e90:	462b      	mov	r3, r5
   14e92:	2004      	movs	r0, #4
}
   14e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   14e98:	f006 b994 	b.w	1b1c4 <L2cDataReq>
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   14e9c:	4b06      	ldr	r3, [pc, #24]	; (14eb8 <attcSendMtuReq+0x64>)
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   14e9e:	2210      	movs	r2, #16
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   14ea0:	681b      	ldr	r3, [r3, #0]
    pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   14ea2:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
    WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   14ea6:	7999      	ldrb	r1, [r3, #6]
   14ea8:	3024      	adds	r0, #36	; 0x24
   14eaa:	f003 f953 	bl	18154 <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   14eae:	6821      	ldr	r1, [r4, #0]
   14eb0:	e7ec      	b.n	14e8c <attcSendMtuReq+0x38>
   14eb2:	bf00      	nop
   14eb4:	00025820 	.word	0x00025820
   14eb8:	10002e50 	.word	0x10002e50

00014ebc <attcConnCback>:
{
   14ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   14ec0:	788b      	ldrb	r3, [r1, #2]
   14ec2:	2b27      	cmp	r3, #39	; 0x27
{
   14ec4:	b085      	sub	sp, #20
   14ec6:	4606      	mov	r6, r0
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   14ec8:	d03e      	beq.n	14f48 <attcConnCback+0x8c>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   14eca:	2b28      	cmp	r3, #40	; 0x28
   14ecc:	d002      	beq.n	14ed4 <attcConnCback+0x18>
}
   14ece:	b005      	add	sp, #20
   14ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   14ed4:	78cb      	ldrb	r3, [r1, #3]
   14ed6:	2b00      	cmp	r3, #0
   14ed8:	d04d      	beq.n	14f76 <attcConnCback+0xba>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   14eda:	3320      	adds	r3, #32
   14edc:	b2db      	uxtb	r3, r3
    pClient = &attcCb.ccb[pCcb->connId - 1];
   14ede:	7f35      	ldrb	r5, [r6, #28]
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
   14ee0:	4c51      	ldr	r4, [pc, #324]	; (15028 <attcConnCback+0x16c>)
    pClient = &attcCb.ccb[pCcb->connId - 1];
   14ee2:	3d01      	subs	r5, #1
   14ee4:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    if (pClient->outReq.hdr.event != ATTC_MSG_API_NONE)
   14ee8:	eb04 09c2 	add.w	r9, r4, r2, lsl #3
   14eec:	ea4f 08c2 	mov.w	r8, r2, lsl #3
   14ef0:	f899 2012 	ldrb.w	r2, [r9, #18]
   14ef4:	00ef      	lsls	r7, r5, #3
   14ef6:	2a00      	cmp	r2, #0
   14ef8:	d155      	bne.n	14fa6 <attcConnCback+0xea>
    if (pClient->onDeck.hdr.event != ATTC_MSG_API_NONE)
   14efa:	eba7 0905 	sub.w	r9, r7, r5
   14efe:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
   14f02:	f899 1006 	ldrb.w	r1, [r9, #6]
   14f06:	2900      	cmp	r1, #0
   14f08:	d139      	bne.n	14f7e <attcConnCback+0xc2>
    pClient->flowDisabled = FALSE;
   14f0a:	1b7a      	subs	r2, r7, r5
    if (attcCb.pSign != NULL)
   14f0c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    pClient->flowDisabled = FALSE;
   14f10:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   14f14:	2000      	movs	r0, #0
   14f16:	8690      	strh	r0, [r2, #52]	; 0x34
    if (attcCb.pSign != NULL)
   14f18:	b131      	cbz	r1, 14f28 <attcConnCback+0x6c>
      (*attcCb.pSign->closeCback)(pClient, status);
   14f1a:	684a      	ldr	r2, [r1, #4]
   14f1c:	9303      	str	r3, [sp, #12]
   14f1e:	4619      	mov	r1, r3
   14f20:	eb04 0008 	add.w	r0, r4, r8
   14f24:	4790      	blx	r2
   14f26:	9b03      	ldr	r3, [sp, #12]
    attcWriteCmdCallback(pCcb->connId, pClient, status);
   14f28:	7f30      	ldrb	r0, [r6, #28]
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   14f2a:	1b7d      	subs	r5, r7, r5
   14f2c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   14f30:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   14f32:	2a00      	cmp	r2, #0
   14f34:	d0cb      	beq.n	14ece <attcConnCback+0x12>
    attExecCallback(connId, event, handle, status, 0);
   14f36:	2500      	movs	r5, #0
   14f38:	9500      	str	r5, [sp, #0]
   14f3a:	210a      	movs	r1, #10
   14f3c:	f002 fd64 	bl	17a08 <attExecCallback>
      pCcb->pendWriteCmdHandle[i] = ATT_HANDLE_NONE;
   14f40:	86e5      	strh	r5, [r4, #54]	; 0x36
}
   14f42:	b005      	add	sp, #20
   14f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (DmConnRole(pCcb->connId) == DM_ROLE_MASTER)
   14f48:	7f00      	ldrb	r0, [r0, #28]
   14f4a:	f007 f96b 	bl	1c224 <DmConnRole>
   14f4e:	2800      	cmp	r0, #0
   14f50:	d1bd      	bne.n	14ece <attcConnCback+0x12>
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   14f52:	4c36      	ldr	r4, [pc, #216]	; (1502c <attcConnCback+0x170>)
   14f54:	6823      	ldr	r3, [r4, #0]
   14f56:	889d      	ldrh	r5, [r3, #4]
   14f58:	f7fd f86a 	bl	12030 <HciGetMaxRxAclLen>
   14f5c:	3804      	subs	r0, #4
   14f5e:	4285      	cmp	r5, r0
   14f60:	da5d      	bge.n	1501e <attcConnCback+0x162>
   14f62:	6823      	ldr	r3, [r4, #0]
   14f64:	8899      	ldrh	r1, [r3, #4]
      if (localMtu != ATT_DEFAULT_MTU)
   14f66:	2917      	cmp	r1, #23
   14f68:	d0b1      	beq.n	14ece <attcConnCback+0x12>
        AttcMtuReq(pCcb->connId, localMtu);
   14f6a:	7f30      	ldrb	r0, [r6, #28]
}
   14f6c:	b005      	add	sp, #20
   14f6e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        AttcMtuReq(pCcb->connId, localMtu);
   14f72:	f000 bd33 	b.w	159dc <AttcMtuReq>
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   14f76:	7a0b      	ldrb	r3, [r1, #8]
   14f78:	3320      	adds	r3, #32
   14f7a:	b2db      	uxtb	r3, r3
   14f7c:	e7af      	b.n	14ede <attcConnCback+0x22>
  if (pMsg->pPkt != NULL)
   14f7e:	f8d9 0008 	ldr.w	r0, [r9, #8]
   14f82:	b140      	cbz	r0, 14f96 <attcConnCback+0xda>
   14f84:	9303      	str	r3, [sp, #12]
    WsfMsgFree(pMsg->pPkt);
   14f86:	f002 fe93 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   14f8a:	2200      	movs	r2, #0
 */
/*************************************************************************************************/
void attcReqClear(attcCcb_t *pCcb, attcApiMsg_t *pMsg, uint8_t status)
{
  attcFreePkt(pMsg);
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   14f8c:	f899 1006 	ldrb.w	r1, [r9, #6]
   14f90:	9b03      	ldr	r3, [sp, #12]
    pMsg->pPkt = NULL;
   14f92:	f8c9 2008 	str.w	r2, [r9, #8]
  if (event != ATT_METHOD_MTU)
   14f96:	2901      	cmp	r1, #1
   14f98:	d130      	bne.n	14ffc <attcConnCback+0x140>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   14f9a:	1b7a      	subs	r2, r7, r5
   14f9c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   14fa0:	2100      	movs	r1, #0
   14fa2:	7191      	strb	r1, [r2, #6]
}
   14fa4:	e7b1      	b.n	14f0a <attcConnCback+0x4e>
      WsfTimerStop(&pClient->outReqTimer);
   14fa6:	f108 0024 	add.w	r0, r8, #36	; 0x24
   14faa:	4420      	add	r0, r4
   14fac:	9303      	str	r3, [sp, #12]
   14fae:	f003 f957 	bl	18260 <WsfTimerStop>
  if (pMsg->pPkt != NULL)
   14fb2:	f8d9 0014 	ldr.w	r0, [r9, #20]
   14fb6:	9b03      	ldr	r3, [sp, #12]
   14fb8:	b128      	cbz	r0, 14fc6 <attcConnCback+0x10a>
    WsfMsgFree(pMsg->pPkt);
   14fba:	f002 fe79 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   14fbe:	2200      	movs	r2, #0
   14fc0:	9b03      	ldr	r3, [sp, #12]
   14fc2:	f8c9 2014 	str.w	r2, [r9, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   14fc6:	1b7a      	subs	r2, r7, r5
   14fc8:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
   14fcc:	00d2      	lsls	r2, r2, #3
   14fce:	7c81      	ldrb	r1, [r0, #18]
  if (event != ATT_METHOD_MTU)
   14fd0:	2901      	cmp	r1, #1
   14fd2:	d105      	bne.n	14fe0 <attcConnCback+0x124>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   14fd4:	1b7a      	subs	r2, r7, r5
   14fd6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   14fda:	2100      	movs	r1, #0
   14fdc:	7491      	strb	r1, [r2, #18]
}
   14fde:	e78c      	b.n	14efa <attcConnCback+0x3e>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   14fe0:	f854 c002 	ldr.w	ip, [r4, r2]
    attExecCallback(connId, event, handle, status, 0);
   14fe4:	8b02      	ldrh	r2, [r0, #24]
   14fe6:	f89c 001c 	ldrb.w	r0, [ip, #28]
   14fea:	9303      	str	r3, [sp, #12]
   14fec:	f04f 0c00 	mov.w	ip, #0
   14ff0:	f8cd c000 	str.w	ip, [sp]
   14ff4:	f002 fd08 	bl	17a08 <attExecCallback>
   14ff8:	9b03      	ldr	r3, [sp, #12]
   14ffa:	e7eb      	b.n	14fd4 <attcConnCback+0x118>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   14ffc:	1b7a      	subs	r2, r7, r5
   14ffe:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
   15002:	f854 0032 	ldr.w	r0, [r4, r2, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   15006:	f8bc 200c 	ldrh.w	r2, [ip, #12]
   1500a:	7f00      	ldrb	r0, [r0, #28]
   1500c:	9303      	str	r3, [sp, #12]
   1500e:	f04f 0c00 	mov.w	ip, #0
   15012:	f8cd c000 	str.w	ip, [sp]
   15016:	f002 fcf7 	bl	17a08 <attExecCallback>
   1501a:	9b03      	ldr	r3, [sp, #12]
   1501c:	e7bd      	b.n	14f9a <attcConnCback+0xde>
      localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   1501e:	f7fd f807 	bl	12030 <HciGetMaxRxAclLen>
   15022:	3804      	subs	r0, #4
   15024:	b281      	uxth	r1, r0
   15026:	e79e      	b.n	14f66 <attcConnCback+0xaa>
   15028:	10006cd4 	.word	0x10006cd4
   1502c:	10002e50 	.word	0x10002e50

00015030 <attcSendPrepWriteReq>:
{
   15030:	b570      	push	{r4, r5, r6, lr}
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   15032:	7cc3      	ldrb	r3, [r0, #19]
   15034:	2b01      	cmp	r3, #1
{
   15036:	b082      	sub	sp, #8
   15038:	4604      	mov	r4, r0
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   1503a:	d020      	beq.n	1507e <attcSendPrepWriteReq+0x4e>
    pCcb->outReq.pPkt = NULL;
   1503c:	2300      	movs	r3, #0
    dataLen = pCcb->outReqParams.w.len;
   1503e:	8b85      	ldrh	r5, [r0, #28]
    pPkt = pCcb->outReq.pPkt;
   15040:	6946      	ldr	r6, [r0, #20]
    pCcb->outReq.pPkt = NULL;
   15042:	6143      	str	r3, [r0, #20]
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
   15044:	8be3      	ldrh	r3, [r4, #30]
   15046:	72f3      	strb	r3, [r6, #11]
   15048:	8be3      	ldrh	r3, [r4, #30]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1504a:	4a29      	ldr	r2, [pc, #164]	; (150f0 <attcSendPrepWriteReq+0xc0>)
  UINT16_TO_BSTREAM(p, pCcb->outReqParams.w.offset);
   1504c:	0a1b      	lsrs	r3, r3, #8
   1504e:	7333      	strb	r3, [r6, #12]
  pCcb->outReqParams.w.offset += dataLen;
   15050:	8be3      	ldrh	r3, [r4, #30]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   15052:	6812      	ldr	r2, [r2, #0]
  pCcb->outReqParams.w.offset += dataLen;
   15054:	442b      	add	r3, r5
   15056:	83e3      	strh	r3, [r4, #30]
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   15058:	2310      	movs	r3, #16
   1505a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1505e:	7991      	ldrb	r1, [r2, #6]
   15060:	f104 0024 	add.w	r0, r4, #36	; 0x24
   15064:	f003 f876 	bl	18154 <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
   15068:	6823      	ldr	r3, [r4, #0]
   1506a:	1d6a      	adds	r2, r5, #5
   1506c:	8b19      	ldrh	r1, [r3, #24]
   1506e:	b292      	uxth	r2, r2
   15070:	4633      	mov	r3, r6
   15072:	2004      	movs	r0, #4
}
   15074:	b002      	add	sp, #8
   15076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, dataLen + ATT_PREP_WRITE_REQ_LEN, (uint8_t *) pPkt);
   1507a:	f006 b8a3 	b.w	1b1c4 <L2cDataReq>
    if (pCcb->outReqParams.w.len < (pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN))
   1507e:	6803      	ldr	r3, [r0, #0]
   15080:	8b85      	ldrh	r5, [r0, #28]
   15082:	8b5b      	ldrh	r3, [r3, #26]
   15084:	3b05      	subs	r3, #5
   15086:	429d      	cmp	r5, r3
      dataLen = pCcb->pMainCcb->mtu - ATT_PREP_WRITE_REQ_LEN;
   15088:	bfa8      	it	ge
   1508a:	b29d      	uxthge	r5, r3
    if ((pPkt = attMsgAlloc(dataLen + ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START)) != NULL)
   1508c:	f105 000d 	add.w	r0, r5, #13
   15090:	b280      	uxth	r0, r0
   15092:	f002 fcd5 	bl	17a40 <attMsgAlloc>
   15096:	4606      	mov	r6, r0
   15098:	b1a8      	cbz	r0, 150c6 <attcSendPrepWriteReq+0x96>
      memcpy(pPkt, pCcb->outReq.pPkt, ATT_PREP_WRITE_REQ_LEN + L2C_PAYLOAD_START);
   1509a:	6963      	ldr	r3, [r4, #20]
   1509c:	6819      	ldr	r1, [r3, #0]
   1509e:	685a      	ldr	r2, [r3, #4]
   150a0:	6898      	ldr	r0, [r3, #8]
   150a2:	60b0      	str	r0, [r6, #8]
   150a4:	6072      	str	r2, [r6, #4]
   150a6:	6031      	str	r1, [r6, #0]
   150a8:	7b1b      	ldrb	r3, [r3, #12]
   150aa:	7333      	strb	r3, [r6, #12]
      memcpy(((uint8_t *) pPkt + L2C_PAYLOAD_START + ATT_PREP_WRITE_REQ_LEN),
   150ac:	462a      	mov	r2, r5
   150ae:	6a21      	ldr	r1, [r4, #32]
   150b0:	f106 000d 	add.w	r0, r6, #13
   150b4:	f7f7 f824 	bl	c100 <memcpy>
      pCcb->outReqParams.w.pValue += dataLen;
   150b8:	6a22      	ldr	r2, [r4, #32]
      pCcb->outReqParams.w.len -= dataLen;
   150ba:	8ba3      	ldrh	r3, [r4, #28]
      pCcb->outReqParams.w.pValue += dataLen;
   150bc:	442a      	add	r2, r5
      pCcb->outReqParams.w.len -= dataLen;
   150be:	1b5b      	subs	r3, r3, r5
      pCcb->outReqParams.w.pValue += dataLen;
   150c0:	6222      	str	r2, [r4, #32]
      pCcb->outReqParams.w.len -= dataLen;
   150c2:	83a3      	strh	r3, [r4, #28]
   150c4:	e7be      	b.n	15044 <attcSendPrepWriteReq+0x14>
  if (pMsg->pPkt != NULL)
   150c6:	6960      	ldr	r0, [r4, #20]
   150c8:	b110      	cbz	r0, 150d0 <attcSendPrepWriteReq+0xa0>
    WsfMsgFree(pMsg->pPkt);
   150ca:	f002 fdf1 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   150ce:	6166      	str	r6, [r4, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   150d0:	7ca1      	ldrb	r1, [r4, #18]
  if (event != ATT_METHOD_MTU)
   150d2:	2901      	cmp	r1, #1
   150d4:	d103      	bne.n	150de <attcSendPrepWriteReq+0xae>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   150d6:	2300      	movs	r3, #0
   150d8:	74a3      	strb	r3, [r4, #18]
}
   150da:	b002      	add	sp, #8
   150dc:	bd70      	pop	{r4, r5, r6, pc}
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   150de:	6822      	ldr	r2, [r4, #0]
    attExecCallback(connId, event, handle, status, 0);
   150e0:	2300      	movs	r3, #0
   150e2:	7f10      	ldrb	r0, [r2, #28]
   150e4:	8b22      	ldrh	r2, [r4, #24]
   150e6:	9300      	str	r3, [sp, #0]
   150e8:	2370      	movs	r3, #112	; 0x70
   150ea:	f002 fc8d 	bl	17a08 <attExecCallback>
   150ee:	e7f2      	b.n	150d6 <attcSendPrepWriteReq+0xa6>
   150f0:	10002e50 	.word	0x10002e50

000150f4 <attcSendContinuingReq>:
{
   150f4:	b530      	push	{r4, r5, lr}
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   150f6:	7cc3      	ldrb	r3, [r0, #19]
   150f8:	2b01      	cmp	r3, #1
{
   150fa:	b083      	sub	sp, #12
   150fc:	4604      	mov	r4, r0
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   150fe:	d028      	beq.n	15152 <attcSendContinuingReq+0x5e>
    pCcb->outReq.pPkt = NULL;
   15100:	2300      	movs	r3, #0
    pPkt = pCcb->outReq.pPkt;
   15102:	6945      	ldr	r5, [r0, #20]
    pCcb->outReq.pPkt = NULL;
   15104:	6143      	str	r3, [r0, #20]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
   15106:	7ca3      	ldrb	r3, [r4, #18]
   15108:	2b06      	cmp	r3, #6
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
   1510a:	8be3      	ldrh	r3, [r4, #30]
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_LONG)
   1510c:	d01c      	beq.n	15148 <attcSendContinuingReq+0x54>
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.startHandle);
   1510e:	726b      	strb	r3, [r5, #9]
   15110:	8be3      	ldrh	r3, [r4, #30]
   15112:	0a1b      	lsrs	r3, r3, #8
   15114:	72ab      	strb	r3, [r5, #10]
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.h.endHandle);
   15116:	8c23      	ldrh	r3, [r4, #32]
   15118:	72eb      	strb	r3, [r5, #11]
   1511a:	8c23      	ldrh	r3, [r4, #32]
   1511c:	0a1b      	lsrs	r3, r3, #8
   1511e:	732b      	strb	r3, [r5, #12]
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   15120:	4b1d      	ldr	r3, [pc, #116]	; (15198 <attcSendContinuingReq+0xa4>)
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   15122:	2210      	movs	r2, #16
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   15124:	681b      	ldr	r3, [r3, #0]
  pCcb->outReqTimer.msg.event = ATTC_MSG_REQ_TIMEOUT;
   15126:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  WsfTimerStartSec(&pCcb->outReqTimer, pAttCfg->transTimeout);
   1512a:	7999      	ldrb	r1, [r3, #6]
   1512c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   15130:	f003 f810 	bl	18154 <WsfTimerStartSec>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   15134:	6823      	ldr	r3, [r4, #0]
   15136:	882a      	ldrh	r2, [r5, #0]
   15138:	8b19      	ldrh	r1, [r3, #24]
   1513a:	2004      	movs	r0, #4
   1513c:	462b      	mov	r3, r5
}
   1513e:	b003      	add	sp, #12
   15140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   15144:	f006 b83e 	b.w	1b1c4 <L2cDataReq>
    UINT16_TO_BSTREAM(p, pCcb->outReqParams.o.offset);
   15148:	72eb      	strb	r3, [r5, #11]
   1514a:	8be3      	ldrh	r3, [r4, #30]
   1514c:	0a1b      	lsrs	r3, r3, #8
   1514e:	732b      	strb	r3, [r5, #12]
   15150:	e7e6      	b.n	15120 <attcSendContinuingReq+0x2c>
    if ((pPkt = attMsgAlloc(pCcb->outReq.pPkt->len + L2C_PAYLOAD_START)) != NULL)
   15152:	6943      	ldr	r3, [r0, #20]
   15154:	8818      	ldrh	r0, [r3, #0]
   15156:	3008      	adds	r0, #8
   15158:	b280      	uxth	r0, r0
   1515a:	f002 fc71 	bl	17a40 <attMsgAlloc>
   1515e:	4605      	mov	r5, r0
   15160:	b128      	cbz	r0, 1516e <attcSendContinuingReq+0x7a>
      memcpy(pPkt, pCcb->outReq.pPkt, pCcb->outReq.pPkt->len + L2C_PAYLOAD_START);
   15162:	6961      	ldr	r1, [r4, #20]
   15164:	880a      	ldrh	r2, [r1, #0]
   15166:	3208      	adds	r2, #8
   15168:	f7f6 ffca 	bl	c100 <memcpy>
   1516c:	e7cb      	b.n	15106 <attcSendContinuingReq+0x12>
  if (pMsg->pPkt != NULL)
   1516e:	6960      	ldr	r0, [r4, #20]
   15170:	b110      	cbz	r0, 15178 <attcSendContinuingReq+0x84>
    WsfMsgFree(pMsg->pPkt);
   15172:	f002 fd9d 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   15176:	6165      	str	r5, [r4, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   15178:	7ca1      	ldrb	r1, [r4, #18]
  if (event != ATT_METHOD_MTU)
   1517a:	2901      	cmp	r1, #1
   1517c:	d007      	beq.n	1518e <attcSendContinuingReq+0x9a>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1517e:	6822      	ldr	r2, [r4, #0]
    attExecCallback(connId, event, handle, status, 0);
   15180:	2300      	movs	r3, #0
   15182:	7f10      	ldrb	r0, [r2, #28]
   15184:	8b22      	ldrh	r2, [r4, #24]
   15186:	9300      	str	r3, [sp, #0]
   15188:	2370      	movs	r3, #112	; 0x70
   1518a:	f002 fc3d 	bl	17a08 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   1518e:	2300      	movs	r3, #0
   15190:	74a3      	strb	r3, [r4, #18]
}
   15192:	b003      	add	sp, #12
   15194:	bd30      	pop	{r4, r5, pc}
   15196:	bf00      	nop
   15198:	10002e50 	.word	0x10002e50

0001519c <attcMsgCback>:
{
   1519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((pCcb = attcCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   151a0:	7804      	ldrb	r4, [r0, #0]
{
   151a2:	b082      	sub	sp, #8
   151a4:	4606      	mov	r6, r0
  if (DmConnInUse(connId))
   151a6:	4620      	mov	r0, r4
   151a8:	f006 ffaa 	bl	1c100 <DmConnInUse>
   151ac:	2800      	cmp	r0, #0
   151ae:	d068      	beq.n	15282 <attcMsgCback+0xe6>
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   151b0:	78b1      	ldrb	r1, [r6, #2]
    return &attcCb.ccb[connId - 1];
   151b2:	4f71      	ldr	r7, [pc, #452]	; (15378 <attcMsgCback+0x1dc>)
   151b4:	3c01      	subs	r4, #1
   151b6:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   151ba:	290c      	cmp	r1, #12
   151bc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
   151c0:	ea4f 03c0 	mov.w	r3, r0, lsl #3
    return &attcCb.ccb[connId - 1];
   151c4:	eb07 05c0 	add.w	r5, r7, r0, lsl #3
  if (pMsg->hdr.event <= ATTC_MSG_API_EXEC_WRITE)
   151c8:	d825      	bhi.n	15216 <attcMsgCback+0x7a>
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   151ca:	79aa      	ldrb	r2, [r5, #6]
   151cc:	bb72      	cbnz	r2, 1522c <attcMsgCback+0x90>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   151ce:	7caa      	ldrb	r2, [r5, #18]
    if ((pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE) ||
   151d0:	2a01      	cmp	r2, #1
   151d2:	d82b      	bhi.n	1522c <attcMsgCback+0x90>
        (pCcb->outReq.hdr.event > ATTC_MSG_API_MTU)   ||
   151d4:	290a      	cmp	r1, #10
   151d6:	d06f      	beq.n	152b8 <attcMsgCback+0x11c>
    if (pCcb->outReq.hdr.event == ATTC_MSG_API_MTU || pCcb->flowDisabled)
   151d8:	2a01      	cmp	r2, #1
   151da:	d077      	beq.n	152cc <attcMsgCback+0x130>
   151dc:	eba8 0304 	sub.w	r3, r8, r4
   151e0:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   151e4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   151e8:	2a00      	cmp	r2, #0
   151ea:	d16f      	bne.n	152cc <attcMsgCback+0x130>
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   151ec:	4a63      	ldr	r2, [pc, #396]	; (1537c <attcMsgCback+0x1e0>)
   151ee:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
  pCcb->outReq = *pMsg;
   151f2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   151f6:	f103 0410 	add.w	r4, r3, #16
   151fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pCcb->outReqParams = *(pMsg->pPkt);
   151fe:	6872      	ldr	r2, [r6, #4]
   15200:	e892 0003 	ldmia.w	r2, {r0, r1}
   15204:	331c      	adds	r3, #28
   15206:	e883 0003 	stmia.w	r3, {r0, r1}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   1520a:	4628      	mov	r0, r5
   1520c:	463b      	mov	r3, r7
}
   1520e:	b002      	add	sp, #8
   15210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   15214:	4718      	bx	r3
  else if (pMsg->hdr.event >= ATTC_MSG_API_SIGNED_WRITE_CMD &&
   15216:	f1a1 020d 	sub.w	r2, r1, #13
   1521a:	2a01      	cmp	r2, #1
   1521c:	d941      	bls.n	152a2 <attcMsgCback+0x106>
  else if (pMsg->hdr.event == ATTC_MSG_API_CANCEL)
   1521e:	290f      	cmp	r1, #15
   15220:	d012      	beq.n	15248 <attcMsgCback+0xac>
  else if (pMsg->hdr.event == ATTC_MSG_REQ_TIMEOUT)
   15222:	2910      	cmp	r1, #16
   15224:	d06a      	beq.n	152fc <attcMsgCback+0x160>
}
   15226:	b002      	add	sp, #8
   15228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pMsg->pPkt != NULL)
   1522c:	6870      	ldr	r0, [r6, #4]
   1522e:	b120      	cbz	r0, 1523a <attcMsgCback+0x9e>
    WsfMsgFree(pMsg->pPkt);
   15230:	f002 fd3e 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   15234:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   15236:	78b1      	ldrb	r1, [r6, #2]
    pMsg->pPkt = NULL;
   15238:	6073      	str	r3, [r6, #4]
  if (event != ATT_METHOD_MTU)
   1523a:	2901      	cmp	r1, #1
   1523c:	d152      	bne.n	152e4 <attcMsgCback+0x148>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   1523e:	2300      	movs	r3, #0
   15240:	70b3      	strb	r3, [r6, #2]
}
   15242:	b002      	add	sp, #8
   15244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE &&
   15248:	7caa      	ldrb	r2, [r5, #18]
   1524a:	2a01      	cmp	r2, #1
   1524c:	d878      	bhi.n	15340 <attcMsgCback+0x1a4>
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   1524e:	79ab      	ldrb	r3, [r5, #6]
   15250:	2b00      	cmp	r3, #0
   15252:	d0e8      	beq.n	15226 <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
   15254:	68a8      	ldr	r0, [r5, #8]
   15256:	b118      	cbz	r0, 15260 <attcMsgCback+0xc4>
    WsfMsgFree(pMsg->pPkt);
   15258:	f002 fd2a 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   1525c:	2300      	movs	r3, #0
   1525e:	60ab      	str	r3, [r5, #8]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   15260:	79a9      	ldrb	r1, [r5, #6]
  if (event != ATT_METHOD_MTU)
   15262:	2901      	cmp	r1, #1
   15264:	d00a      	beq.n	1527c <attcMsgCback+0xe0>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   15266:	eba8 0404 	sub.w	r4, r8, r4
    attExecCallback(connId, event, handle, status, 0);
   1526a:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1526c:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   15270:	7f10      	ldrb	r0, [r2, #28]
   15272:	9300      	str	r3, [sp, #0]
   15274:	89aa      	ldrh	r2, [r5, #12]
   15276:	2374      	movs	r3, #116	; 0x74
   15278:	f002 fbc6 	bl	17a08 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   1527c:	2300      	movs	r3, #0
   1527e:	71ab      	strb	r3, [r5, #6]
}
   15280:	e7d1      	b.n	15226 <attcMsgCback+0x8a>
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   15282:	4605      	mov	r5, r0
   15284:	4621      	mov	r1, r4
   15286:	483e      	ldr	r0, [pc, #248]	; (15380 <attcMsgCback+0x1e4>)
   15288:	f003 f88a 	bl	183a0 <WsfTrace>
    if (pMsg->hdr.event >= ATTC_MSG_API_MTU &&
   1528c:	78b3      	ldrb	r3, [r6, #2]
   1528e:	3b01      	subs	r3, #1
   15290:	2b0c      	cmp	r3, #12
   15292:	d8c8      	bhi.n	15226 <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
   15294:	6870      	ldr	r0, [r6, #4]
   15296:	2800      	cmp	r0, #0
   15298:	d0c5      	beq.n	15226 <attcMsgCback+0x8a>
    WsfMsgFree(pMsg->pPkt);
   1529a:	f002 fd09 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   1529e:	6075      	str	r5, [r6, #4]
   152a0:	e7c1      	b.n	15226 <attcMsgCback+0x8a>
    if (attcCb.pSign != NULL)
   152a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   152a6:	2b00      	cmp	r3, #0
   152a8:	d0bd      	beq.n	15226 <attcMsgCback+0x8a>
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
   152aa:	681b      	ldr	r3, [r3, #0]
   152ac:	4631      	mov	r1, r6
   152ae:	4628      	mov	r0, r5
}
   152b0:	b002      	add	sp, #8
   152b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*attcCb.pSign->msgCback)(pCcb, pMsg);
   152b6:	4718      	bx	r3
    if (pCcb->pendWriteCmdHandle[i] != ATT_HANDLE_NONE)
   152b8:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
   152ba:	2800      	cmp	r0, #0
   152bc:	d08c      	beq.n	151d8 <attcMsgCback+0x3c>
  if (pMsg->pPkt != NULL)
   152be:	6870      	ldr	r0, [r6, #4]
   152c0:	2800      	cmp	r0, #0
   152c2:	d1b5      	bne.n	15230 <attcMsgCback+0x94>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   152c4:	58fb      	ldr	r3, [r7, r3]
      if (pCcb->pendWriteCmdHandle[i] == pMsg->handle)
   152c6:	8932      	ldrh	r2, [r6, #8]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   152c8:	7f18      	ldrb	r0, [r3, #28]
  if (event != ATT_METHOD_MTU)
   152ca:	e011      	b.n	152f0 <attcMsgCback+0x154>
      pCcb->onDeck = *pMsg;
   152cc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   152d0:	eba8 0404 	sub.w	r4, r8, r4
   152d4:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
   152d8:	3704      	adds	r7, #4
   152da:	e887 0007 	stmia.w	r7, {r0, r1, r2}
}
   152de:	b002      	add	sp, #8
   152e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   152e4:	eba8 0404 	sub.w	r4, r8, r4
   152e8:	8932      	ldrh	r2, [r6, #8]
   152ea:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
   152ee:	7f18      	ldrb	r0, [r3, #28]
    attExecCallback(connId, event, handle, status, 0);
   152f0:	2300      	movs	r3, #0
   152f2:	9300      	str	r3, [sp, #0]
   152f4:	2372      	movs	r3, #114	; 0x72
   152f6:	f002 fb87 	bl	17a08 <attExecCallback>
   152fa:	e7a0      	b.n	1523e <attcMsgCback+0xa2>
    if (pCcb->outReq.hdr.event != ATTC_MSG_API_NONE)
   152fc:	7cab      	ldrb	r3, [r5, #18]
   152fe:	2b00      	cmp	r3, #0
   15300:	d091      	beq.n	15226 <attcMsgCback+0x8a>
  if (pMsg->pPkt != NULL)
   15302:	6968      	ldr	r0, [r5, #20]
   15304:	b118      	cbz	r0, 1530e <attcMsgCback+0x172>
    WsfMsgFree(pMsg->pPkt);
   15306:	f002 fcd3 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   1530a:	2300      	movs	r3, #0
   1530c:	616b      	str	r3, [r5, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1530e:	7ca9      	ldrb	r1, [r5, #18]
  if (event != ATT_METHOD_MTU)
   15310:	2901      	cmp	r1, #1
   15312:	d00a      	beq.n	1532a <attcMsgCback+0x18e>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   15314:	eba8 0304 	sub.w	r3, r8, r4
   15318:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   1531c:	7f18      	ldrb	r0, [r3, #28]
   1531e:	2300      	movs	r3, #0
   15320:	9300      	str	r3, [sp, #0]
   15322:	8b2a      	ldrh	r2, [r5, #24]
   15324:	2371      	movs	r3, #113	; 0x71
   15326:	f002 fb6f 	bl	17a08 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   1532a:	2300      	movs	r3, #0
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   1532c:	eba8 0404 	sub.w	r4, r8, r4
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   15330:	74ab      	strb	r3, [r5, #18]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   15332:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
   15336:	7f53      	ldrb	r3, [r2, #29]
   15338:	f043 0304 	orr.w	r3, r3, #4
   1533c:	7753      	strb	r3, [r2, #29]
   1533e:	e772      	b.n	15226 <attcMsgCback+0x8a>
      WsfTimerStop(&pCcb->outReqTimer);
   15340:	f103 0024 	add.w	r0, r3, #36	; 0x24
   15344:	4438      	add	r0, r7
   15346:	f002 ff8b 	bl	18260 <WsfTimerStop>
  if (pMsg->pPkt != NULL)
   1534a:	6968      	ldr	r0, [r5, #20]
   1534c:	b118      	cbz	r0, 15356 <attcMsgCback+0x1ba>
    WsfMsgFree(pMsg->pPkt);
   1534e:	f002 fcaf 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   15352:	2300      	movs	r3, #0
   15354:	616b      	str	r3, [r5, #20]
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   15356:	7ca9      	ldrb	r1, [r5, #18]
  if (event != ATT_METHOD_MTU)
   15358:	2901      	cmp	r1, #1
   1535a:	d00a      	beq.n	15372 <attcMsgCback+0x1d6>
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   1535c:	eba8 0404 	sub.w	r4, r8, r4
    attExecCallback(connId, event, handle, status, 0);
   15360:	2300      	movs	r3, #0
  attcExecCallback(pCcb->pMainCcb->connId, pMsg->hdr.event, pMsg->handle, status);
   15362:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
    attExecCallback(connId, event, handle, status, 0);
   15366:	7f10      	ldrb	r0, [r2, #28]
   15368:	9300      	str	r3, [sp, #0]
   1536a:	8b2a      	ldrh	r2, [r5, #24]
   1536c:	2374      	movs	r3, #116	; 0x74
   1536e:	f002 fb4b 	bl	17a08 <attExecCallback>
  pMsg->hdr.event = ATTC_MSG_API_NONE;
   15372:	2300      	movs	r3, #0
   15374:	74ab      	strb	r3, [r5, #18]
}
   15376:	e756      	b.n	15226 <attcMsgCback+0x8a>
   15378:	10006cd4 	.word	0x10006cd4
   1537c:	00025844 	.word	0x00025844
   15380:	00025808 	.word	0x00025808

00015384 <attcSendReq>:
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   15384:	4b02      	ldr	r3, [pc, #8]	; (15390 <attcSendReq+0xc>)
   15386:	7c82      	ldrb	r2, [r0, #18]
   15388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1538c:	4718      	bx	r3
   1538e:	bf00      	nop
   15390:	00025844 	.word	0x00025844

00015394 <attcSetupReq>:
{
   15394:	b510      	push	{r4, lr}
   15396:	4603      	mov	r3, r0
  pCcb->outReq = *pMsg;
   15398:	f100 0e10 	add.w	lr, r0, #16
{
   1539c:	468c      	mov	ip, r1
  pCcb->outReq = *pMsg;
   1539e:	c907      	ldmia	r1, {r0, r1, r2}
   153a0:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  pCcb->outReqParams = *(pMsg->pPkt);
   153a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   153a8:	4c06      	ldr	r4, [pc, #24]	; (153c4 <attcSetupReq+0x30>)
  pCcb->outReqParams = *(pMsg->pPkt);
   153aa:	c903      	ldmia	r1, {r0, r1}
   153ac:	f103 021c 	add.w	r2, r3, #28
   153b0:	e882 0003 	stmia.w	r2, {r0, r1}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   153b4:	4618      	mov	r0, r3
   153b6:	7c9b      	ldrb	r3, [r3, #18]
   153b8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
}
   153bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (*attcSendReqTbl[pCcb->outReq.hdr.event])(pCcb);
   153c0:	4718      	bx	r3
   153c2:	bf00      	nop
   153c4:	00025844 	.word	0x00025844

000153c8 <attcCcbByConnId>:
{
   153c8:	b538      	push	{r3, r4, r5, lr}
   153ca:	4604      	mov	r4, r0
  if (DmConnInUse(connId))
   153cc:	f006 fe98 	bl	1c100 <DmConnInUse>
   153d0:	b130      	cbz	r0, 153e0 <attcCcbByConnId+0x18>
    return &attcCb.ccb[connId - 1];
   153d2:	4d07      	ldr	r5, [pc, #28]	; (153f0 <attcCcbByConnId+0x28>)
   153d4:	1e60      	subs	r0, r4, #1
   153d6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   153da:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
}
   153de:	bd38      	pop	{r3, r4, r5, pc}
   153e0:	4605      	mov	r5, r0
    ATT_TRACE_WARN1("attc ccb not in use: %d", connId);
   153e2:	4621      	mov	r1, r4
   153e4:	4803      	ldr	r0, [pc, #12]	; (153f4 <attcCcbByConnId+0x2c>)
   153e6:	f002 ffdb 	bl	183a0 <WsfTrace>
    return NULL;
   153ea:	4628      	mov	r0, r5
}
   153ec:	bd38      	pop	{r3, r4, r5, pc}
   153ee:	bf00      	nop
   153f0:	10006cd4 	.word	0x10006cd4
   153f4:	00025808 	.word	0x00025808

000153f8 <attcCcbByHandle>:
{
   153f8:	b508      	push	{r3, lr}
  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   153fa:	f006 fe5f 	bl	1c0bc <DmConnIdByHandle>
   153fe:	b128      	cbz	r0, 1540c <attcCcbByHandle+0x14>
    return &attcCb.ccb[connId - 1];
   15400:	4b03      	ldr	r3, [pc, #12]	; (15410 <attcCcbByHandle+0x18>)
   15402:	3801      	subs	r0, #1
   15404:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15408:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
   1540c:	bd08      	pop	{r3, pc}
   1540e:	bf00      	nop
   15410:	10006cd4 	.word	0x10006cd4

00015414 <attcFreePkt>:
{
   15414:	b510      	push	{r4, lr}
   15416:	4604      	mov	r4, r0
  if (pMsg->pPkt != NULL)
   15418:	6840      	ldr	r0, [r0, #4]
   1541a:	b118      	cbz	r0, 15424 <attcFreePkt+0x10>
    WsfMsgFree(pMsg->pPkt);
   1541c:	f002 fc48 	bl	17cb0 <WsfMsgFree>
    pMsg->pPkt = NULL;
   15420:	2300      	movs	r3, #0
   15422:	6063      	str	r3, [r4, #4]
}
   15424:	bd10      	pop	{r4, pc}
   15426:	bf00      	nop

00015428 <attcExecCallback>:
  if (event != ATT_METHOD_MTU)
   15428:	2901      	cmp	r1, #1
   1542a:	d100      	bne.n	1542e <attcExecCallback+0x6>
   1542c:	4770      	bx	lr
{
   1542e:	b510      	push	{r4, lr}
   15430:	b082      	sub	sp, #8
    attExecCallback(connId, event, handle, status, 0);
   15432:	2400      	movs	r4, #0
   15434:	9400      	str	r4, [sp, #0]
   15436:	f002 fae7 	bl	17a08 <attExecCallback>
}
   1543a:	b002      	add	sp, #8
   1543c:	bd10      	pop	{r4, pc}
   1543e:	bf00      	nop

00015440 <AttcInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcInit(void)
{
   15440:	b410      	push	{r4}
  uint8_t     i;
  attcCcb_t   *pCcb;

  /* Initialize control block */
  attcCb.pSign = NULL;
   15442:	4b12      	ldr	r3, [pc, #72]	; (1548c <AttcInit+0x4c>)
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];

    /* initialize timer */
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   15444:	4a12      	ldr	r2, [pc, #72]	; (15490 <AttcInit+0x50>)
    pCcb->pMainCcb = &attCb.ccb[i];
   15446:	601a      	str	r2, [r3, #0]
  attcCb.pSign = NULL;
   15448:	2400      	movs	r4, #0
   1544a:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    pCcb->pMainCcb = &attCb.ccb[i];
   1544e:	f102 0424 	add.w	r4, r2, #36	; 0x24
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   15452:	f892 107c 	ldrb.w	r1, [r2, #124]	; 0x7c
    pCcb->pMainCcb = &attCb.ccb[i];
   15456:	639c      	str	r4, [r3, #56]	; 0x38
  attcCb.autoCnf = TRUE;
   15458:	2001      	movs	r0, #1
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   1545a:	2402      	movs	r4, #2
  attcCb.autoCnf = TRUE;
   1545c:	f883 00ac 	strb.w	r0, [r3, #172]	; 0xac
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   15460:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   15464:	8598      	strh	r0, [r3, #44]	; 0x2c
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   15466:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
  }

  /* set up callback interface */
  attCb.pClient = &attcFcnIf;
   1546a:	480a      	ldr	r0, [pc, #40]	; (15494 <AttcInit+0x54>)
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   1546c:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
   15470:	f04f 0c03 	mov.w	ip, #3
    pCcb->pMainCcb = &attCb.ccb[i];
   15474:	f102 0448 	add.w	r4, r2, #72	; 0x48
    pCcb->outReqTimer.handlerId = attCb.handlerId;
   15478:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
    pCcb->pMainCcb = &attCb.ccb[i];
   1547c:	671c      	str	r4, [r3, #112]	; 0x70
    pCcb->outReqTimer.msg.param = i + 1;  /* param stores the conn id */
   1547e:	f8a3 c09c 	strh.w	ip, [r3, #156]	; 0x9c
}
   15482:	f85d 4b04 	ldr.w	r4, [sp], #4
  attCb.pClient = &attcFcnIf;
   15486:	66d0      	str	r0, [r2, #108]	; 0x6c
}
   15488:	4770      	bx	lr
   1548a:	bf00      	nop
   1548c:	10006cd4 	.word	0x10006cd4
   15490:	10006e04 	.word	0x10006e04
   15494:	00025834 	.word	0x00025834

00015498 <attcProcErrRsp>:
  uint8_t *p;

  p =  pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* set callback event from stored method */
  pEvt->hdr.event = pCcb->outReq.hdr.event;
   15498:	7c81      	ldrb	r1, [r0, #18]
   1549a:	7099      	strb	r1, [r3, #2]

  /* ignore request opcode in the error response */
  p++;

  /* if request was a read or write with a specific handle */
  if (pEvt->hdr.event == ATTC_READ_RSP || pEvt->hdr.event == ATTC_READ_LONG_RSP ||
   1549c:	1f48      	subs	r0, r1, #5
   1549e:	2801      	cmp	r0, #1
   154a0:	d90a      	bls.n	154b8 <attcProcErrRsp+0x20>
   154a2:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
   154a6:	2909      	cmp	r1, #9
   154a8:	d006      	beq.n	154b8 <attcProcErrRsp+0x20>
    p += 2;
  }
  else
  {
    /* set handle from packet */
    BSTREAM_TO_UINT16(pEvt->handle, p);
   154aa:	7ad0      	ldrb	r0, [r2, #11]
   154ac:	7a91      	ldrb	r1, [r2, #10]
   154ae:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   154b2:	320c      	adds	r2, #12
   154b4:	8159      	strh	r1, [r3, #10]
   154b6:	e000      	b.n	154ba <attcProcErrRsp+0x22>
    p += 2;
   154b8:	320c      	adds	r2, #12
  }

  /* set status from error code in packet, but verify it's not 'success' */
  BSTREAM_TO_UINT8(pEvt->hdr.status, p);
   154ba:	7812      	ldrb	r2, [r2, #0]
  if (pEvt->hdr.status == ATT_SUCCESS)
   154bc:	b902      	cbnz	r2, 154c0 <attcProcErrRsp+0x28>
  {
    pEvt->hdr.status = ATT_ERR_UNDEFINED;
   154be:	2275      	movs	r2, #117	; 0x75
   154c0:	70da      	strb	r2, [r3, #3]
  }

  /* no parameters so clear length */
  pEvt->valueLen = 0;
   154c2:	2200      	movs	r2, #0
   154c4:	811a      	strh	r2, [r3, #8]
}
   154c6:	4770      	bx	lr

000154c8 <attcProcFindOrReadRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcFindOrReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
   154c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  pEnd = pPacket + L2C_PAYLOAD_START + len;

  /* parameter length depends on packet type */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   154cc:	7c87      	ldrb	r7, [r0, #18]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   154ce:	3108      	adds	r1, #8
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   154d0:	2f02      	cmp	r7, #2
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   154d2:	eb02 0c01 	add.w	ip, r2, r1
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_FIND_INFO)
   154d6:	d065      	beq.n	155a4 <attcProcFindOrReadRsp+0xdc>
    else
    {
      paramLen = ATT_128_UUID_LEN;
    }
  }
  else if (pCcb->outReq.hdr.event == ATTC_MSG_API_READ_BY_TYPE)
   154d8:	2f04      	cmp	r7, #4
   154da:	d03d      	beq.n	15558 <attcProcFindOrReadRsp+0x90>
    paramLen = *p++ - sizeof(uint16_t);
  }
  else
  {
    /* length in read by group type response is two handles plus parameter length */
    paramLen = *p++ - (2 * sizeof(uint16_t));
   154dc:	f892 e009 	ldrb.w	lr, [r2, #9]
  }

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   154e0:	8bc4      	ldrh	r4, [r0, #30]
    paramLen = *p++ - (2 * sizeof(uint16_t));
   154e2:	f1ae 0e04 	sub.w	lr, lr, #4
   154e6:	2f08      	cmp	r7, #8
   154e8:	f102 010a 	add.w	r1, r2, #10
   154ec:	fa5f fe8e 	uxtb.w	lr, lr
  while (p < pEnd)
   154f0:	d16b      	bne.n	155ca <attcProcFindOrReadRsp+0x102>
   154f2:	f10e 0e04 	add.w	lr, lr, #4
        break;
      }
    }

    /* set next expected handle, with special case for max handle */
    if (handle == ATT_HANDLE_MAX)
   154f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   154fa:	e024      	b.n	15546 <attcProcFindOrReadRsp+0x7e>
    BSTREAM_TO_UINT16(handle, p);
   154fc:	784d      	ldrb	r5, [r1, #1]
   154fe:	780a      	ldrb	r2, [r1, #0]
   15500:	eb02 2205 	add.w	r2, r2, r5, lsl #8
   15504:	b292      	uxth	r2, r2
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   15506:	2a00      	cmp	r2, #0
   15508:	d048      	beq.n	1559c <attcProcFindOrReadRsp+0xd4>
   1550a:	2c00      	cmp	r4, #0
   1550c:	d046      	beq.n	1559c <attcProcFindOrReadRsp+0xd4>
   1550e:	4294      	cmp	r4, r2
   15510:	d844      	bhi.n	1559c <attcProcFindOrReadRsp+0xd4>
        handle > pCcb->outReqParams.h.endHandle)
   15512:	8c07      	ldrh	r7, [r0, #32]
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   15514:	4297      	cmp	r7, r2
   15516:	d341      	bcc.n	1559c <attcProcFindOrReadRsp+0xd4>
      BSTREAM_TO_UINT16(handle, p);
   15518:	f891 8003 	ldrb.w	r8, [r1, #3]
   1551c:	788d      	ldrb	r5, [r1, #2]
   1551e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
   15522:	b2ad      	uxth	r5, r5
      if (handle == 0 || handle < prevHandle || handle < nextHandle ||
   15524:	2d00      	cmp	r5, #0
   15526:	d039      	beq.n	1559c <attcProcFindOrReadRsp+0xd4>
   15528:	42aa      	cmp	r2, r5
   1552a:	d837      	bhi.n	1559c <attcProcFindOrReadRsp+0xd4>
   1552c:	42ac      	cmp	r4, r5
   1552e:	d835      	bhi.n	1559c <attcProcFindOrReadRsp+0xd4>
   15530:	42af      	cmp	r7, r5
   15532:	d333      	bcc.n	1559c <attcProcFindOrReadRsp+0xd4>
    if (handle == ATT_HANDLE_MAX)
   15534:	42b5      	cmp	r5, r6
    {
      nextHandle = 0;
    }
    else
    {
      nextHandle = handle + 1;
   15536:	bf18      	it	ne
   15538:	1c6c      	addne	r4, r5, #1
   1553a:	4471      	add	r1, lr
   1553c:	bf14      	ite	ne
   1553e:	b2a4      	uxthne	r4, r4
      nextHandle = 0;
   15540:	2400      	moveq	r4, #0

    /* skip over parameter */
    p += paramLen;

    /* check for truncated response */
    if (p > pEnd)
   15542:	458c      	cmp	ip, r1
   15544:	d32a      	bcc.n	1559c <attcProcFindOrReadRsp+0xd4>
  while (p < pEnd)
   15546:	4561      	cmp	r1, ip
   15548:	d3d8      	bcc.n	154fc <attcProcFindOrReadRsp+0x34>
      break;
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   1554a:	78db      	ldrb	r3, [r3, #3]
   1554c:	b913      	cbnz	r3, 15554 <attcProcFindOrReadRsp+0x8c>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   1554e:	7cc3      	ldrb	r3, [r0, #19]
   15550:	2b01      	cmp	r3, #1
   15552:	d02e      	beq.n	155b2 <attcProcFindOrReadRsp+0xea>
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   15554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    paramLen = *p++ - sizeof(uint16_t);
   15558:	7a57      	ldrb	r7, [r2, #9]
   1555a:	3f02      	subs	r7, #2
   1555c:	f102 010a 	add.w	r1, r2, #10
   15560:	b2ff      	uxtb	r7, r7
  nextHandle = pCcb->outReqParams.h.startHandle;
   15562:	8bc4      	ldrh	r4, [r0, #30]
  while (p < pEnd)
   15564:	3702      	adds	r7, #2
    if (handle == ATT_HANDLE_MAX)
   15566:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1556a:	e014      	b.n	15596 <attcProcFindOrReadRsp+0xce>
    BSTREAM_TO_UINT16(handle, p);
   1556c:	784d      	ldrb	r5, [r1, #1]
   1556e:	780a      	ldrb	r2, [r1, #0]
   15570:	eb02 2205 	add.w	r2, r2, r5, lsl #8
   15574:	b292      	uxth	r2, r2
      nextHandle = handle + 1;
   15576:	1c55      	adds	r5, r2, #1
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   15578:	b182      	cbz	r2, 1559c <attcProcFindOrReadRsp+0xd4>
   1557a:	b17c      	cbz	r4, 1559c <attcProcFindOrReadRsp+0xd4>
   1557c:	42a2      	cmp	r2, r4
   1557e:	d30d      	bcc.n	1559c <attcProcFindOrReadRsp+0xd4>
   15580:	f8b0 e020 	ldrh.w	lr, [r0, #32]
   15584:	4596      	cmp	lr, r2
      nextHandle = handle + 1;
   15586:	b2ac      	uxth	r4, r5
    if (handle == 0 || nextHandle == 0 || handle < nextHandle ||
   15588:	d308      	bcc.n	1559c <attcProcFindOrReadRsp+0xd4>
    if (handle == ATT_HANDLE_MAX)
   1558a:	42b2      	cmp	r2, r6
   1558c:	4439      	add	r1, r7
      nextHandle = 0;
   1558e:	bf08      	it	eq
   15590:	2400      	moveq	r4, #0
    if (p > pEnd)
   15592:	4561      	cmp	r1, ip
   15594:	d802      	bhi.n	1559c <attcProcFindOrReadRsp+0xd4>
  while (p < pEnd)
   15596:	458c      	cmp	ip, r1
   15598:	d8e8      	bhi.n	1556c <attcProcFindOrReadRsp+0xa4>
   1559a:	e7d6      	b.n	1554a <attcProcFindOrReadRsp+0x82>
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   1559c:	2273      	movs	r2, #115	; 0x73
   1559e:	70da      	strb	r2, [r3, #3]
}
   155a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
   155a4:	7a51      	ldrb	r1, [r2, #9]
      paramLen = ATT_128_UUID_LEN;
   155a6:	2901      	cmp	r1, #1
   155a8:	bf18      	it	ne
   155aa:	2710      	movne	r7, #16
    if (*p++ == ATT_FIND_HANDLE_16_UUID)
   155ac:	f102 010a 	add.w	r1, r2, #10
   155b0:	e7d7      	b.n	15562 <attcProcFindOrReadRsp+0x9a>
      if (nextHandle == 0 || nextHandle == (pCcb->outReqParams.h.endHandle + 1))
   155b2:	b134      	cbz	r4, 155c2 <attcProcFindOrReadRsp+0xfa>
   155b4:	8c03      	ldrh	r3, [r0, #32]
   155b6:	3301      	adds	r3, #1
   155b8:	429c      	cmp	r4, r3
   155ba:	d002      	beq.n	155c2 <attcProcFindOrReadRsp+0xfa>
        pCcb->outReqParams.h.startHandle = nextHandle;
   155bc:	83c4      	strh	r4, [r0, #30]
        pCcb->outReq.handle = nextHandle;
   155be:	8304      	strh	r4, [r0, #24]
}
   155c0:	e7c8      	b.n	15554 <attcProcFindOrReadRsp+0x8c>
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   155c2:	2300      	movs	r3, #0
   155c4:	74c3      	strb	r3, [r0, #19]
}
   155c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    paramLen = *p++ - (2 * sizeof(uint16_t));
   155ca:	4677      	mov	r7, lr
   155cc:	e7ca      	b.n	15564 <attcProcFindOrReadRsp+0x9c>
   155ce:	bf00      	nop

000155d0 <attcProcReadRsp>:
 */
/*************************************************************************************************/
void attcProcReadRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* nothing to process */
}
   155d0:	4770      	bx	lr
   155d2:	bf00      	nop

000155d4 <attcProcWriteRsp>:
 */
/*************************************************************************************************/
void attcProcWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* no parameters so clear length */
  pEvt->valueLen = 0;
   155d4:	2200      	movs	r2, #0
   155d6:	811a      	strh	r2, [r3, #8]
}
   155d8:	4770      	bx	lr
   155da:	bf00      	nop

000155dc <attcProcMtuRsp>:
{
   155dc:	b570      	push	{r4, r5, r6, lr}
  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   155de:	7a93      	ldrb	r3, [r2, #10]
   155e0:	7a51      	ldrb	r1, [r2, #9]
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   155e2:	4c13      	ldr	r4, [pc, #76]	; (15630 <attcProcMtuRsp+0x54>)
   155e4:	6805      	ldr	r5, [r0, #0]
  BYTES_TO_UINT16(mtu, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   155e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   155ea:	b289      	uxth	r1, r1
  if (mtu < ATT_DEFAULT_MTU)
   155ec:	2917      	cmp	r1, #23
{
   155ee:	b082      	sub	sp, #8
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   155f0:	6823      	ldr	r3, [r4, #0]
   155f2:	bf38      	it	cc
   155f4:	2117      	movcc	r1, #23
   155f6:	889e      	ldrh	r6, [r3, #4]
   155f8:	9101      	str	r1, [sp, #4]
   155fa:	f7fc fd19 	bl	12030 <HciGetMaxRxAclLen>
   155fe:	3804      	subs	r0, #4
   15600:	4286      	cmp	r6, r0
   15602:	9901      	ldr	r1, [sp, #4]
   15604:	da07      	bge.n	15616 <attcProcMtuRsp+0x3a>
   15606:	6823      	ldr	r3, [r4, #0]
   15608:	889a      	ldrh	r2, [r3, #4]
   1560a:	4628      	mov	r0, r5
}
   1560c:	b002      	add	sp, #8
   1560e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   15612:	f002 b9d7 	b.w	179c4 <attSetMtu>
   15616:	9101      	str	r1, [sp, #4]
   15618:	f7fc fd0a 	bl	12030 <HciGetMaxRxAclLen>
   1561c:	9901      	ldr	r1, [sp, #4]
   1561e:	3804      	subs	r0, #4
   15620:	b282      	uxth	r2, r0
   15622:	4628      	mov	r0, r5
}
   15624:	b002      	add	sp, #8
   15626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  attSetMtu(pCcb->pMainCcb, mtu, WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN)));
   1562a:	f002 b9cb 	b.w	179c4 <attSetMtu>
   1562e:	bf00      	nop
   15630:	10002e50 	.word	0x10002e50

00015634 <attcProcRsp>:
void attcProcRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
  attEvt_t    evt;

  /* if no request in progress ignore response */
  if (pCcb->outReq.hdr.event == ATTC_MSG_API_NONE)
   15634:	7c83      	ldrb	r3, [r0, #18]
   15636:	2b00      	cmp	r3, #0
   15638:	d04b      	beq.n	156d2 <attcProcRsp+0x9e>
{
   1563a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1563c:	4615      	mov	r5, r2
  {
    return;
  }

  /* get method */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   1563e:	7a12      	ldrb	r2, [r2, #8]
{
   15640:	b085      	sub	sp, #20
   15642:	460e      	mov	r6, r1
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   15644:	0851      	lsrs	r1, r2, #1

  /* if response method is not error and does not match stored method ignore response */
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
   15646:	0852      	lsrs	r2, r2, #1
   15648:	4604      	mov	r4, r0
  evt.hdr.event = ATT_OPCODE_2_METHOD(*(pPacket + L2C_PAYLOAD_START));
   1564a:	f88d 1002 	strb.w	r1, [sp, #2]
  if ((evt.hdr.event != ATT_METHOD_ERR) && (evt.hdr.event != pCcb->outReq.hdr.event))
   1564e:	d001      	beq.n	15654 <attcProcRsp+0x20>
   15650:	428b      	cmp	r3, r1
   15652:	d135      	bne.n	156c0 <attcProcRsp+0x8c>
  {
    return;
  }

  /* stop request timer */
  WsfTimerStop(&pCcb->outReqTimer);
   15654:	f104 0024 	add.w	r0, r4, #36	; 0x24
   15658:	f002 fe02 	bl	18260 <WsfTimerStop>

  /* initialize event structure then process response */
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  evt.valueLen = len - ATT_HDR_LEN;
  evt.handle = pCcb->outReq.handle;
   1565c:	8b23      	ldrh	r3, [r4, #24]
   1565e:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   15662:	f105 0309 	add.w	r3, r5, #9
  evt.hdr.status = ATT_SUCCESS;
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   15666:	f89d 1002 	ldrb.w	r1, [sp, #2]
   1566a:	4a1f      	ldr	r2, [pc, #124]	; (156e8 <attcProcRsp+0xb4>)
  evt.pValue = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   1566c:	9301      	str	r3, [sp, #4]
  evt.valueLen = len - ATT_HDR_LEN;
   1566e:	1e73      	subs	r3, r6, #1
   15670:	f8ad 3008 	strh.w	r3, [sp, #8]
  evt.hdr.status = ATT_SUCCESS;
   15674:	2300      	movs	r3, #0
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   15676:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
  evt.hdr.status = ATT_SUCCESS;
   1567a:	f88d 3003 	strb.w	r3, [sp, #3]
  (*attcProcRspTbl[evt.hdr.event])(pCcb, len, pPacket, &evt);
   1567e:	462a      	mov	r2, r5
   15680:	466b      	mov	r3, sp
   15682:	4631      	mov	r1, r6
   15684:	4620      	mov	r0, r4
   15686:	47b8      	blx	r7

  /* if not continuing or status is not success */
  if ((pCcb->outReq.hdr.status == ATTC_NOT_CONTINUING) || (evt.hdr.status != ATT_SUCCESS))
   15688:	7ce3      	ldrb	r3, [r4, #19]
   1568a:	b1db      	cbz	r3, 156c4 <attcProcRsp+0x90>
   1568c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15690:	b9c3      	cbnz	r3, 156c4 <attcProcRsp+0x90>
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
    attcFreePkt(&pCcb->outReq);
  }

  /* call callback (if not mtu rsp) */
  if ((evt.hdr.event != ATT_METHOD_MTU) && attCb.cback)
   15692:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15696:	2b01      	cmp	r3, #1
   15698:	d00a      	beq.n	156b0 <attcProcRsp+0x7c>
   1569a:	4b14      	ldr	r3, [pc, #80]	; (156ec <attcProcRsp+0xb8>)
   1569c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1569e:	b13b      	cbz	r3, 156b0 <attcProcRsp+0x7c>
  {
    /* set additional parameters and call callback */
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
   156a0:	7ce1      	ldrb	r1, [r4, #19]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
   156a2:	8a22      	ldrh	r2, [r4, #16]
    evt.continuing = pCcb->outReq.hdr.status;   /* continuing flag */
   156a4:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.hdr.param = pCcb->outReq.hdr.param;     /* connId */
   156a8:	f8ad 2000 	strh.w	r2, [sp]
    (*attCb.cback)(&evt);
   156ac:	4668      	mov	r0, sp
   156ae:	4798      	blx	r3
  }

  /* if no flow control */
  if (!pCcb->flowDisabled)
   156b0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   156b4:	b923      	cbnz	r3, 156c0 <attcProcRsp+0x8c>
  {
    /* if out req ready */
    if (pCcb->outReq.pPkt != NULL)
   156b6:	6965      	ldr	r5, [r4, #20]
   156b8:	b165      	cbz	r5, 156d4 <attcProcRsp+0xa0>
    {
      /* build and send request */
      attcSendReq(pCcb);
   156ba:	4620      	mov	r0, r4
   156bc:	f7ff fe62 	bl	15384 <attcSendReq>

      /* clear on deck */
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
    }
  }
}
   156c0:	b005      	add	sp, #20
   156c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCcb->outReq.hdr.event = ATTC_MSG_API_NONE;
   156c4:	2300      	movs	r3, #0
   156c6:	74a3      	strb	r3, [r4, #18]
    attcFreePkt(&pCcb->outReq);
   156c8:	f104 0010 	add.w	r0, r4, #16
   156cc:	f7ff fea2 	bl	15414 <attcFreePkt>
   156d0:	e7df      	b.n	15692 <attcProcRsp+0x5e>
   156d2:	4770      	bx	lr
    else if (pCcb->onDeck.hdr.event != ATTC_MSG_API_NONE)
   156d4:	79a3      	ldrb	r3, [r4, #6]
   156d6:	2b00      	cmp	r3, #0
   156d8:	d0f2      	beq.n	156c0 <attcProcRsp+0x8c>
      attcSetupReq(pCcb, &pCcb->onDeck);
   156da:	1d21      	adds	r1, r4, #4
   156dc:	4620      	mov	r0, r4
   156de:	f7ff fe59 	bl	15394 <attcSetupReq>
      pCcb->onDeck.hdr.event = ATTC_MSG_API_NONE;
   156e2:	71a5      	strb	r5, [r4, #6]
   156e4:	e7ec      	b.n	156c0 <attcProcRsp+0x8c>
   156e6:	bf00      	nop
   156e8:	00025878 	.word	0x00025878
   156ec:	10006e04 	.word	0x10006e04

000156f0 <attcProcInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcProcInd(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   156f0:	b510      	push	{r4, lr}
   156f2:	4604      	mov	r4, r0
  uint8_t     *pPkt;

  p = pPacket + L2C_PAYLOAD_START;

  /* parse packet and set callback event struct */
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
   156f4:	7a10      	ldrb	r0, [r2, #8]
  BSTREAM_TO_UINT16(evt.handle, p);
   156f6:	f892 c00a 	ldrb.w	ip, [r2, #10]
   156fa:	7a53      	ldrb	r3, [r2, #9]
{
   156fc:	b084      	sub	sp, #16
  evt.hdr.event = ATT_OPCODE_2_METHOD(*p++);
   156fe:	1040      	asrs	r0, r0, #1
   15700:	f88d 0002 	strb.w	r0, [sp, #2]
  evt.pValue = p;
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
  evt.hdr.param = pCcb->pMainCcb->connId;
   15704:	6820      	ldr	r0, [r4, #0]
  BSTREAM_TO_UINT16(evt.handle, p);
   15706:	320b      	adds	r2, #11
   15708:	eb03 230c 	add.w	r3, r3, ip, lsl #8
  evt.hdr.param = pCcb->pMainCcb->connId;
   1570c:	7f00      	ldrb	r0, [r0, #28]
  evt.pValue = p;
   1570e:	9201      	str	r2, [sp, #4]
  BSTREAM_TO_UINT16(evt.handle, p);
   15710:	b29b      	uxth	r3, r3
  evt.hdr.status = ATT_SUCCESS;
   15712:	2200      	movs	r2, #0
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
   15714:	3903      	subs	r1, #3
  BSTREAM_TO_UINT16(evt.handle, p);
   15716:	f8ad 300a 	strh.w	r3, [sp, #10]
  evt.valueLen = len - ATT_HDR_LEN - sizeof(uint16_t);
   1571a:	f8ad 1008 	strh.w	r1, [sp, #8]
  evt.hdr.param = pCcb->pMainCcb->connId;
   1571e:	f8ad 0000 	strh.w	r0, [sp]
  evt.hdr.status = ATT_SUCCESS;
   15722:	f88d 2003 	strb.w	r2, [sp, #3]
  evt.continuing = FALSE;
   15726:	f88d 200c 	strb.w	r2, [sp, #12]

  /* verify handle and call callback */
  if ((evt.handle != 0) && attCb.cback)
   1572a:	b123      	cbz	r3, 15736 <attcProcInd+0x46>
   1572c:	4b12      	ldr	r3, [pc, #72]	; (15778 <attcProcInd+0x88>)
   1572e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   15730:	b10b      	cbz	r3, 15736 <attcProcInd+0x46>
  {
    (*attCb.cback)(&evt);
   15732:	4668      	mov	r0, sp
   15734:	4798      	blx	r3
  }

  /* if indication send confirm */
  if (attcCb.autoCnf && (evt.hdr.event == ATT_METHOD_VALUE_IND))
   15736:	4b11      	ldr	r3, [pc, #68]	; (1577c <attcProcInd+0x8c>)
   15738:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
   1573c:	b11b      	cbz	r3, 15746 <attcProcInd+0x56>
   1573e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15742:	2b0e      	cmp	r3, #14
   15744:	d004      	beq.n	15750 <attcProcInd+0x60>

    return;
  }

  /* mark confirm as pending; will be sent when flow enabled or application sends it. */
  pCcb->cnfPending = TRUE;
   15746:	2301      	movs	r3, #1
   15748:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   1574c:	b004      	add	sp, #16
   1574e:	bd10      	pop	{r4, pc}
    if (!pCcb->flowDisabled)
   15750:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   15754:	2b00      	cmp	r3, #0
   15756:	d1f9      	bne.n	1574c <attcProcInd+0x5c>
      if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   15758:	2009      	movs	r0, #9
   1575a:	f002 f971 	bl	17a40 <attMsgAlloc>
   1575e:	2800      	cmp	r0, #0
   15760:	d0f4      	beq.n	1574c <attcProcInd+0x5c>
        *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   15762:	231e      	movs	r3, #30
   15764:	7203      	strb	r3, [r0, #8]
        L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   15766:	6822      	ldr	r2, [r4, #0]
   15768:	4603      	mov	r3, r0
   1576a:	8b11      	ldrh	r1, [r2, #24]
   1576c:	2004      	movs	r0, #4
   1576e:	2201      	movs	r2, #1
   15770:	f005 fd28 	bl	1b1c4 <L2cDataReq>
    return;
   15774:	e7ea      	b.n	1574c <attcProcInd+0x5c>
   15776:	bf00      	nop
   15778:	10006e04 	.word	0x10006e04
   1577c:	10006cd4 	.word	0x10006cd4

00015780 <attcSendMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attcSendMsg(dmConnId_t connId, uint16_t handle, uint8_t msgId, attcPktParam_t *pPkt, bool_t continuing)
{
   15780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15784:	4605      	mov	r5, r0
   15786:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1578a:	460f      	mov	r7, r1
   1578c:	4616      	mov	r6, r2
   1578e:	461c      	mov	r4, r3
  attcCcb_t   *pCcb;
  uint16_t    mtu;
  bool_t      transTimedOut;

  WsfTaskLock();
   15790:	f002 fac8 	bl	17d24 <WsfTaskLock>

  /* get CCB and verify connection still in use */
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   15794:	4628      	mov	r0, r5
   15796:	f7ff fe17 	bl	153c8 <attcCcbByConnId>
   1579a:	b1f0      	cbz	r0, 157da <attcSendMsg+0x5a>
  {
    /* get MTU size */
    mtu = pCcb->pMainCcb->mtu;
   1579c:	6803      	ldr	r3, [r0, #0]
   1579e:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   157a2:	f893 a01d 	ldrb.w	sl, [r3, #29]
    /* MTU size unknown */
    mtu = 0;
    transTimedOut = FALSE;
  }

  WsfTaskUnlock();
   157a6:	f002 fac7 	bl	17d38 <WsfTaskUnlock>

  /* if MTU size known for connection */
  if (mtu > 0)
   157aa:	f1b9 0f00 	cmp.w	r9, #0
   157ae:	d016      	beq.n	157de <attcSendMsg+0x5e>
  {
    /* if no transaction's timed out */
    if (!transTimedOut)
   157b0:	f01a 0f04 	tst.w	sl, #4
   157b4:	d117      	bne.n	157e6 <attcSendMsg+0x66>
    {
      uint16_t dataLen = 0;

      /* if packet is not null then find out its length */
      if (pPkt != NULL)
   157b6:	2c00      	cmp	r4, #0
   157b8:	d038      	beq.n	1582c <attcSendMsg+0xac>
      {
        /* if not prepare write request */
        if (msgId != ATTC_MSG_API_PREP_WRITE)
   157ba:	2e0b      	cmp	r6, #11
   157bc:	d01c      	beq.n	157f8 <attcSendMsg+0x78>
        {
          dataLen = pPkt->len;
   157be:	8823      	ldrh	r3, [r4, #0]
          /* else will be sent as multiple prepare write requests */
        }
      }

      /* if packet length is less than or equal to negotiated MTU */
      if (dataLen <= mtu)
   157c0:	454b      	cmp	r3, r9
   157c2:	d920      	bls.n	15806 <attcSendMsg+0x86>
      }
      /* else packet length exceeds MTU size */
      else
      {
        /* call callback with failure status */
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   157c4:	2377      	movs	r3, #119	; 0x77
   157c6:	463a      	mov	r2, r7
   157c8:	4631      	mov	r1, r6
   157ca:	4628      	mov	r0, r5
   157cc:	f7ff fe2c 	bl	15428 <attcExecCallback>
  }

  /* alloc failed, transaction's timed out or packet length exceeded MTU size; free packet buffer */
  if (pPkt != NULL)
  {
    WsfMsgFree(pPkt);
   157d0:	4620      	mov	r0, r4
  }
}
   157d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    WsfMsgFree(pPkt);
   157d6:	f002 ba6b 	b.w	17cb0 <WsfMsgFree>
  WsfTaskUnlock();
   157da:	f002 faad 	bl	17d38 <WsfTaskUnlock>
  if (pPkt != NULL)
   157de:	2c00      	cmp	r4, #0
   157e0:	d1f6      	bne.n	157d0 <attcSendMsg+0x50>
}
   157e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   157e6:	2371      	movs	r3, #113	; 0x71
   157e8:	463a      	mov	r2, r7
   157ea:	4631      	mov	r1, r6
   157ec:	4628      	mov	r0, r5
   157ee:	f7ff fe1b 	bl	15428 <attcExecCallback>
  if (pPkt != NULL)
   157f2:	2c00      	cmp	r4, #0
   157f4:	d0f5      	beq.n	157e2 <attcSendMsg+0x62>
   157f6:	e7eb      	b.n	157d0 <attcSendMsg+0x50>
          if (!continuing)
   157f8:	f1b8 0f00 	cmp.w	r8, #0
   157fc:	d103      	bne.n	15806 <attcSendMsg+0x86>
            dataLen = ATT_PREP_WRITE_REQ_LEN + pPkt->w.len;
   157fe:	8823      	ldrh	r3, [r4, #0]
   15800:	3305      	adds	r3, #5
   15802:	b29b      	uxth	r3, r3
   15804:	e7dc      	b.n	157c0 <attcSendMsg+0x40>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   15806:	200c      	movs	r0, #12
   15808:	f002 fa4a 	bl	17ca0 <WsfMsgAlloc>
   1580c:	4601      	mov	r1, r0
   1580e:	2800      	cmp	r0, #0
   15810:	d0de      	beq.n	157d0 <attcSendMsg+0x50>
          WsfMsgSend(attCb.handlerId, pMsg);
   15812:	4b0a      	ldr	r3, [pc, #40]	; (1583c <attcSendMsg+0xbc>)
          pMsg->hdr.param = connId;
   15814:	800d      	strh	r5, [r1, #0]
          pMsg->hdr.status = continuing;
   15816:	f881 8003 	strb.w	r8, [r1, #3]
          pMsg->hdr.event = msgId;
   1581a:	708e      	strb	r6, [r1, #2]
          pMsg->pPkt = pPkt;
   1581c:	604c      	str	r4, [r1, #4]
          pMsg->handle = handle;
   1581e:	810f      	strh	r7, [r1, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
   15820:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   15824:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
   15828:	f002 ba46 	b.w	17cb8 <WsfMsgSend>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   1582c:	200c      	movs	r0, #12
   1582e:	f002 fa37 	bl	17ca0 <WsfMsgAlloc>
   15832:	4601      	mov	r1, r0
   15834:	2800      	cmp	r0, #0
   15836:	d0d4      	beq.n	157e2 <attcSendMsg+0x62>
   15838:	e7eb      	b.n	15812 <attcSendMsg+0x92>
   1583a:	bf00      	nop
   1583c:	10006e04 	.word	0x10006e04

00015840 <AttcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcFindInfoReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle, bool_t continuing)
{
   15840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15844:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_FIND_INFO_REQ_BUF_LEN)) != NULL)
   15846:	200d      	movs	r0, #13
{
   15848:	460f      	mov	r7, r1
   1584a:	4615      	mov	r5, r2
   1584c:	4698      	mov	r8, r3
  if ((pPkt = attMsgAlloc(ATT_FIND_INFO_REQ_BUF_LEN)) != NULL)
   1584e:	f002 f8f7 	bl	17a40 <attMsgAlloc>
   15852:	b318      	cbz	r0, 1589c <AttcFindInfoReq+0x5c>
    pPkt->h.startHandle = startHandle;
    pPkt->h.endHandle = endHandle;

    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_REQ);
   15854:	2304      	movs	r3, #4
   15856:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_FIND_INFO_REQ_LEN;
   15858:	2305      	movs	r3, #5
    pPkt->h.endHandle = endHandle;
   1585a:	8085      	strh	r5, [r0, #4]
    pPkt->h.startHandle = startHandle;
   1585c:	8047      	strh	r7, [r0, #2]
    pPkt->len = ATT_FIND_INFO_REQ_LEN;
   1585e:	8003      	strh	r3, [r0, #0]
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
   15860:	4604      	mov	r4, r0
  WsfTaskLock();
   15862:	f002 fa5f 	bl	17d24 <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   15866:	4630      	mov	r0, r6
   15868:	f7ff fdae 	bl	153c8 <attcCcbByConnId>
   1586c:	b1c0      	cbz	r0, 158a0 <AttcFindInfoReq+0x60>
    mtu = pCcb->pMainCcb->mtu;
   1586e:	6803      	ldr	r3, [r0, #0]
   15870:	8b5d      	ldrh	r5, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   15872:	f893 901d 	ldrb.w	r9, [r3, #29]
  WsfTaskUnlock();
   15876:	f002 fa5f 	bl	17d38 <WsfTaskUnlock>
  if (mtu > 0)
   1587a:	b155      	cbz	r5, 15892 <AttcFindInfoReq+0x52>
    if (!transTimedOut)
   1587c:	f019 0f04 	tst.w	r9, #4
   15880:	d115      	bne.n	158ae <AttcFindInfoReq+0x6e>
      if (dataLen <= mtu)
   15882:	8823      	ldrh	r3, [r4, #0]
   15884:	42ab      	cmp	r3, r5
   15886:	d819      	bhi.n	158bc <AttcFindInfoReq+0x7c>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   15888:	200c      	movs	r0, #12
   1588a:	f002 fa09 	bl	17ca0 <WsfMsgAlloc>
   1588e:	4601      	mov	r1, r0
   15890:	b9d8      	cbnz	r0, 158ca <AttcFindInfoReq+0x8a>
    WsfMsgFree(pPkt);
   15892:	4620      	mov	r0, r4

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_INFO, pPkt, continuing);
  }
}
   15894:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    WsfMsgFree(pPkt);
   15898:	f002 ba0a 	b.w	17cb0 <WsfMsgFree>
}
   1589c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  WsfTaskUnlock();
   158a0:	f002 fa4a 	bl	17d38 <WsfTaskUnlock>
    WsfMsgFree(pPkt);
   158a4:	4620      	mov	r0, r4
}
   158a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    WsfMsgFree(pPkt);
   158aa:	f002 ba01 	b.w	17cb0 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   158ae:	2371      	movs	r3, #113	; 0x71
   158b0:	463a      	mov	r2, r7
   158b2:	2102      	movs	r1, #2
   158b4:	4630      	mov	r0, r6
   158b6:	f7ff fdb7 	bl	15428 <attcExecCallback>
   158ba:	e7ea      	b.n	15892 <AttcFindInfoReq+0x52>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   158bc:	2377      	movs	r3, #119	; 0x77
   158be:	463a      	mov	r2, r7
   158c0:	2102      	movs	r1, #2
   158c2:	4630      	mov	r0, r6
   158c4:	f7ff fdb0 	bl	15428 <attcExecCallback>
   158c8:	e7e3      	b.n	15892 <AttcFindInfoReq+0x52>
          WsfMsgSend(attCb.handlerId, pMsg);
   158ca:	4b07      	ldr	r3, [pc, #28]	; (158e8 <AttcFindInfoReq+0xa8>)
          pMsg->hdr.param = connId;
   158cc:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
   158ce:	2202      	movs	r2, #2
   158d0:	7082      	strb	r2, [r0, #2]
          pMsg->hdr.status = continuing;
   158d2:	f880 8003 	strb.w	r8, [r0, #3]
          pMsg->pPkt = pPkt;
   158d6:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
   158d8:	8107      	strh	r7, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
   158da:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   158de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
   158e2:	f002 b9e9 	b.w	17cb8 <WsfMsgSend>
   158e6:	bf00      	nop
   158e8:	10006e04 	.word	0x10006e04

000158ec <AttcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcReadReq(dmConnId_t connId, uint16_t handle)
{
   158ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158f0:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_READ_REQ_BUF_LEN)) != NULL)
   158f2:	200b      	movs	r0, #11
{
   158f4:	460d      	mov	r5, r1
  if ((pPkt = attMsgAlloc(ATT_READ_REQ_BUF_LEN)) != NULL)
   158f6:	f002 f8a3 	bl	17a40 <attMsgAlloc>
   158fa:	b320      	cbz	r0, 15946 <AttcReadReq+0x5a>
    /* set length */
    pPkt->len = ATT_READ_REQ_LEN;

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_REQ);
   158fc:	230a      	movs	r3, #10
   158fe:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_READ_REQ_LEN;
   15900:	2203      	movs	r2, #3
    UINT16_TO_BSTREAM(p, handle);
   15902:	0a2b      	lsrs	r3, r5, #8
    pPkt->len = ATT_READ_REQ_LEN;
   15904:	8002      	strh	r2, [r0, #0]
    UINT16_TO_BSTREAM(p, handle);
   15906:	7245      	strb	r5, [r0, #9]
   15908:	7283      	strb	r3, [r0, #10]

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_READ, pPkt, FALSE);
   1590a:	4604      	mov	r4, r0
  WsfTaskLock();
   1590c:	f002 fa0a 	bl	17d24 <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   15910:	4630      	mov	r0, r6
   15912:	f7ff fd59 	bl	153c8 <attcCcbByConnId>
   15916:	b1c0      	cbz	r0, 1594a <AttcReadReq+0x5e>
    mtu = pCcb->pMainCcb->mtu;
   15918:	6803      	ldr	r3, [r0, #0]
   1591a:	8b5f      	ldrh	r7, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   1591c:	f893 801d 	ldrb.w	r8, [r3, #29]
  WsfTaskUnlock();
   15920:	f002 fa0a 	bl	17d38 <WsfTaskUnlock>
  if (mtu > 0)
   15924:	b157      	cbz	r7, 1593c <AttcReadReq+0x50>
    if (!transTimedOut)
   15926:	f018 0f04 	tst.w	r8, #4
   1592a:	d115      	bne.n	15958 <AttcReadReq+0x6c>
      if (dataLen <= mtu)
   1592c:	8823      	ldrh	r3, [r4, #0]
   1592e:	42bb      	cmp	r3, r7
   15930:	d819      	bhi.n	15966 <AttcReadReq+0x7a>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   15932:	200c      	movs	r0, #12
   15934:	f002 f9b4 	bl	17ca0 <WsfMsgAlloc>
   15938:	4601      	mov	r1, r0
   1593a:	b9d8      	cbnz	r0, 15974 <AttcReadReq+0x88>
    WsfMsgFree(pPkt);
   1593c:	4620      	mov	r0, r4
  }
}
   1593e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pPkt);
   15942:	f002 b9b5 	b.w	17cb0 <WsfMsgFree>
}
   15946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  WsfTaskUnlock();
   1594a:	f002 f9f5 	bl	17d38 <WsfTaskUnlock>
    WsfMsgFree(pPkt);
   1594e:	4620      	mov	r0, r4
}
   15950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfMsgFree(pPkt);
   15954:	f002 b9ac 	b.w	17cb0 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   15958:	2371      	movs	r3, #113	; 0x71
   1595a:	462a      	mov	r2, r5
   1595c:	2105      	movs	r1, #5
   1595e:	4630      	mov	r0, r6
   15960:	f7ff fd62 	bl	15428 <attcExecCallback>
   15964:	e7ea      	b.n	1593c <AttcReadReq+0x50>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   15966:	2377      	movs	r3, #119	; 0x77
   15968:	462a      	mov	r2, r5
   1596a:	2105      	movs	r1, #5
   1596c:	4630      	mov	r0, r6
   1596e:	f7ff fd5b 	bl	15428 <attcExecCallback>
   15972:	e7e3      	b.n	1593c <AttcReadReq+0x50>
          WsfMsgSend(attCb.handlerId, pMsg);
   15974:	4b05      	ldr	r3, [pc, #20]	; (1598c <AttcReadReq+0xa0>)
          pMsg->hdr.param = connId;
   15976:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
   15978:	2205      	movs	r2, #5
   1597a:	8042      	strh	r2, [r0, #2]
          pMsg->pPkt = pPkt;
   1597c:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
   1597e:	8105      	strh	r5, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
   15980:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   15984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
   15988:	f002 b996 	b.w	17cb8 <WsfMsgSend>
   1598c:	10006e04 	.word	0x10006e04

00015990 <AttcWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcWriteReq(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   15990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
   15994:	f102 040b 	add.w	r4, r2, #11
{
   15998:	b082      	sub	sp, #8
   1599a:	4680      	mov	r8, r0
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
   1599c:	b2a0      	uxth	r0, r4
{
   1599e:	4615      	mov	r5, r2
   159a0:	460e      	mov	r6, r1
   159a2:	461f      	mov	r7, r3
  if ((pPkt = attMsgAlloc(ATT_WRITE_REQ_BUF_LEN + valueLen)) != NULL)
   159a4:	f002 f84c 	bl	17a40 <attMsgAlloc>
   159a8:	b1a0      	cbz	r0, 159d4 <AttcWriteReq+0x44>
  {
    /* set length */
    pPkt->len = ATT_WRITE_REQ_LEN + valueLen;
   159aa:	1ceb      	adds	r3, r5, #3
   159ac:	8003      	strh	r3, [r0, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_REQ);
   159ae:	2312      	movs	r3, #18
   159b0:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, handle);
   159b2:	0a33      	lsrs	r3, r6, #8
   159b4:	7283      	strb	r3, [r0, #10]
    memcpy(p, pValue, valueLen);
   159b6:	4604      	mov	r4, r0
   159b8:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, handle);
   159ba:	7246      	strb	r6, [r0, #9]
    memcpy(p, pValue, valueLen);
   159bc:	462a      	mov	r2, r5
   159be:	300b      	adds	r0, #11
   159c0:	f7f6 fb9e 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_WRITE, pPkt, FALSE);
   159c4:	2300      	movs	r3, #0
   159c6:	9300      	str	r3, [sp, #0]
   159c8:	2209      	movs	r2, #9
   159ca:	4623      	mov	r3, r4
   159cc:	4631      	mov	r1, r6
   159ce:	4640      	mov	r0, r8
   159d0:	f7ff fed6 	bl	15780 <attcSendMsg>
  }
}
   159d4:	b002      	add	sp, #8
   159d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   159da:	bf00      	nop

000159dc <AttcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcMtuReq(dmConnId_t connId, uint16_t mtu)
{
   159dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   159de:	4606      	mov	r6, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
   159e0:	200b      	movs	r0, #11
{
   159e2:	460d      	mov	r5, r1
  if ((pPkt = attMsgAlloc(ATT_MTU_REQ_BUF_LEN)) != NULL)
   159e4:	f002 f82c 	bl	17a40 <attMsgAlloc>
   159e8:	b318      	cbz	r0, 15a32 <AttcMtuReq+0x56>
    /* set length */
    pPkt->len = ATT_MTU_REQ_LEN;

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_REQ);
   159ea:	2302      	movs	r3, #2
   159ec:	7203      	strb	r3, [r0, #8]
    pPkt->len = ATT_MTU_REQ_LEN;
   159ee:	2203      	movs	r2, #3
    UINT16_TO_BSTREAM(p, mtu);
   159f0:	0a2b      	lsrs	r3, r5, #8
    pPkt->len = ATT_MTU_REQ_LEN;
   159f2:	8002      	strh	r2, [r0, #0]
    UINT16_TO_BSTREAM(p, mtu);
   159f4:	7245      	strb	r5, [r0, #9]
   159f6:	7283      	strb	r3, [r0, #10]

    /* send message */
    attcSendMsg(connId, 0, ATTC_MSG_API_MTU, pPkt, FALSE);
   159f8:	4604      	mov	r4, r0
  WsfTaskLock();
   159fa:	f002 f993 	bl	17d24 <WsfTaskLock>
  if ((pCcb = attcCcbByConnId(connId)) != NULL)
   159fe:	4630      	mov	r0, r6
   15a00:	f7ff fce2 	bl	153c8 <attcCcbByConnId>
   15a04:	b1b0      	cbz	r0, 15a34 <AttcMtuReq+0x58>
    mtu = pCcb->pMainCcb->mtu;
   15a06:	6803      	ldr	r3, [r0, #0]
   15a08:	8b5f      	ldrh	r7, [r3, #26]
    transTimedOut = !!(pCcb->pMainCcb->control & ATT_CCB_STATUS_TX_TIMEOUT);
   15a0a:	7f5d      	ldrb	r5, [r3, #29]
  WsfTaskUnlock();
   15a0c:	f002 f994 	bl	17d38 <WsfTaskUnlock>
  if (mtu > 0)
   15a10:	b157      	cbz	r7, 15a28 <AttcMtuReq+0x4c>
    if (!transTimedOut)
   15a12:	f015 0504 	ands.w	r5, r5, #4
   15a16:	d114      	bne.n	15a42 <AttcMtuReq+0x66>
      if (dataLen <= mtu)
   15a18:	8823      	ldrh	r3, [r4, #0]
   15a1a:	42bb      	cmp	r3, r7
   15a1c:	d818      	bhi.n	15a50 <AttcMtuReq+0x74>
        if ((pMsg = WsfMsgAlloc(sizeof(attcApiMsg_t))) != NULL)
   15a1e:	200c      	movs	r0, #12
   15a20:	f002 f93e 	bl	17ca0 <WsfMsgAlloc>
   15a24:	4601      	mov	r1, r0
   15a26:	b9d0      	cbnz	r0, 15a5e <AttcMtuReq+0x82>
    WsfMsgFree(pPkt);
   15a28:	4620      	mov	r0, r4
  }
}
   15a2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgFree(pPkt);
   15a2e:	f002 b93f 	b.w	17cb0 <WsfMsgFree>
}
   15a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  WsfTaskUnlock();
   15a34:	f002 f980 	bl	17d38 <WsfTaskUnlock>
    WsfMsgFree(pPkt);
   15a38:	4620      	mov	r0, r4
}
   15a3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgFree(pPkt);
   15a3e:	f002 b937 	b.w	17cb0 <WsfMsgFree>
      attcExecCallback(connId, msgId, handle, ATT_ERR_TIMEOUT);
   15a42:	2371      	movs	r3, #113	; 0x71
   15a44:	2200      	movs	r2, #0
   15a46:	2101      	movs	r1, #1
   15a48:	4630      	mov	r0, r6
   15a4a:	f7ff fced 	bl	15428 <attcExecCallback>
   15a4e:	e7eb      	b.n	15a28 <AttcMtuReq+0x4c>
        attcExecCallback(connId, msgId, handle, ATT_ERR_MTU_EXCEEDED);
   15a50:	2377      	movs	r3, #119	; 0x77
   15a52:	462a      	mov	r2, r5
   15a54:	2101      	movs	r1, #1
   15a56:	4630      	mov	r0, r6
   15a58:	f7ff fce6 	bl	15428 <attcExecCallback>
   15a5c:	e7e4      	b.n	15a28 <AttcMtuReq+0x4c>
          WsfMsgSend(attCb.handlerId, pMsg);
   15a5e:	4b06      	ldr	r3, [pc, #24]	; (15a78 <AttcMtuReq+0x9c>)
          pMsg->hdr.param = connId;
   15a60:	8006      	strh	r6, [r0, #0]
          pMsg->hdr.event = msgId;
   15a62:	2201      	movs	r2, #1
   15a64:	8042      	strh	r2, [r0, #2]
          pMsg->pPkt = pPkt;
   15a66:	6044      	str	r4, [r0, #4]
          pMsg->handle = handle;
   15a68:	8105      	strh	r5, [r0, #8]
          WsfMsgSend(attCb.handlerId, pMsg);
   15a6a:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   15a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
          WsfMsgSend(attCb.handlerId, pMsg);
   15a72:	f002 b921 	b.w	17cb8 <WsfMsgSend>
   15a76:	bf00      	nop
   15a78:	10006e04 	.word	0x10006e04

00015a7c <AttcIndConfirm>:
void AttcIndConfirm(dmConnId_t connId)
{
  attcCcb_t   *pCcb;
  uint8_t     *pPkt;

  pCcb = attcCcbByHandle(connId - 1);
   15a7c:	3801      	subs	r0, #1
{
   15a7e:	b570      	push	{r4, r5, r6, lr}
  pCcb = attcCcbByHandle(connId - 1);
   15a80:	b280      	uxth	r0, r0
   15a82:	f7ff fcb9 	bl	153f8 <attcCcbByHandle>

  /* If confirmation is pending */
  if (pCcb && pCcb->cnfPending && !pCcb->flowDisabled)
   15a86:	b130      	cbz	r0, 15a96 <AttcIndConfirm+0x1a>
   15a88:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   15a8c:	4604      	mov	r4, r0
   15a8e:	b113      	cbz	r3, 15a96 <AttcIndConfirm+0x1a>
   15a90:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
   15a94:	b105      	cbz	r5, 15a98 <AttcIndConfirm+0x1c>

      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
    }
  }
}
   15a96:	bd70      	pop	{r4, r5, r6, pc}
    if ((pPkt = attMsgAlloc(ATT_VALUE_CNF_LEN + L2C_PAYLOAD_START)) != NULL)
   15a98:	2009      	movs	r0, #9
   15a9a:	f001 ffd1 	bl	17a40 <attMsgAlloc>
   15a9e:	2800      	cmp	r0, #0
   15aa0:	d0f9      	beq.n	15a96 <AttcIndConfirm+0x1a>
      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   15aa2:	231e      	movs	r3, #30
      pCcb->cnfPending = FALSE;
   15aa4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
      *(pPkt + L2C_PAYLOAD_START) = ATT_PDU_VALUE_CNF;
   15aa8:	7203      	strb	r3, [r0, #8]
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   15aaa:	6822      	ldr	r2, [r4, #0]
   15aac:	4603      	mov	r3, r0
   15aae:	8b11      	ldrh	r1, [r2, #24]
}
   15ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, ATT_VALUE_CNF_LEN, pPkt);
   15ab4:	2201      	movs	r2, #1
   15ab6:	2004      	movs	r0, #4
   15ab8:	f005 bb84 	b.w	1b1c4 <L2cDataReq>

00015abc <attcProcFindByTypeRsp>:
  uint16_t  startHandle;
  uint16_t  endHandle;
  uint16_t  nextHandle;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   15abc:	3108      	adds	r1, #8
{
   15abe:	b5f0      	push	{r4, r5, r6, r7, lr}
  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;
   15ac0:	f102 0c09 	add.w	ip, r2, #9

  /* get and verify all handles */
  nextHandle = pCcb->outReqParams.h.startHandle;
   15ac4:	8bc4      	ldrh	r4, [r0, #30]
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   15ac6:	eb02 0e01 	add.w	lr, r2, r1
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
      break;
    }

    /* set next expected handle, with special case for max handle */
    if (endHandle == ATT_HANDLE_MAX)
   15aca:	f64f 77ff 	movw	r7, #65535	; 0xffff
  while (p < pEnd)
   15ace:	e01f      	b.n	15b10 <attcProcFindByTypeRsp+0x54>
    BSTREAM_TO_UINT16(startHandle, p);
   15ad0:	f89c 6001 	ldrb.w	r6, [ip, #1]
   15ad4:	f89c 2000 	ldrb.w	r2, [ip]
    BSTREAM_TO_UINT16(endHandle, p);
   15ad8:	f89c 5003 	ldrb.w	r5, [ip, #3]
   15adc:	f89c 1002 	ldrb.w	r1, [ip, #2]
    BSTREAM_TO_UINT16(startHandle, p);
   15ae0:	eb02 2206 	add.w	r2, r2, r6, lsl #8
    BSTREAM_TO_UINT16(endHandle, p);
   15ae4:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   15ae8:	b289      	uxth	r1, r1
    BSTREAM_TO_UINT16(startHandle, p);
   15aea:	b292      	uxth	r2, r2
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   15aec:	428a      	cmp	r2, r1
   15aee:	f10c 0c04 	add.w	ip, ip, #4
    {
      nextHandle = 0;
    }
    else
    {
      nextHandle = endHandle + 1;
   15af2:	f101 0601 	add.w	r6, r1, #1
    if ((startHandle > endHandle) || (startHandle < nextHandle) ||
   15af6:	d813      	bhi.n	15b20 <attcProcFindByTypeRsp+0x64>
   15af8:	4294      	cmp	r4, r2
   15afa:	d811      	bhi.n	15b20 <attcProcFindByTypeRsp+0x64>
   15afc:	8c05      	ldrh	r5, [r0, #32]
   15afe:	4295      	cmp	r5, r2
   15b00:	d30e      	bcc.n	15b20 <attcProcFindByTypeRsp+0x64>
        (startHandle > pCcb->outReqParams.h.endHandle) || (nextHandle == 0))
   15b02:	b16c      	cbz	r4, 15b20 <attcProcFindByTypeRsp+0x64>
    if (endHandle == ATT_HANDLE_MAX)
   15b04:	42b9      	cmp	r1, r7
      nextHandle = endHandle + 1;
   15b06:	bf14      	ite	ne
   15b08:	b2b4      	uxthne	r4, r6
      nextHandle = 0;
   15b0a:	2400      	moveq	r4, #0
    }

    /* check for truncated response */
    if (p > pEnd)
   15b0c:	45e6      	cmp	lr, ip
   15b0e:	d307      	bcc.n	15b20 <attcProcFindByTypeRsp+0x64>
  while (p < pEnd)
   15b10:	45f4      	cmp	ip, lr
   15b12:	d3dd      	bcc.n	15ad0 <attcProcFindByTypeRsp+0x14>
      break;
    }
  }

  /* if response was correct */
  if (pEvt->hdr.status == ATT_SUCCESS)
   15b14:	78db      	ldrb	r3, [r3, #3]
   15b16:	b913      	cbnz	r3, 15b1e <attcProcFindByTypeRsp+0x62>
  {
    /* if continuing */
    if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   15b18:	7cc3      	ldrb	r3, [r0, #19]
   15b1a:	2b01      	cmp	r3, #1
   15b1c:	d003      	beq.n	15b26 <attcProcFindByTypeRsp+0x6a>
        pCcb->outReqParams.h.startHandle = nextHandle;
        pCcb->outReq.handle = nextHandle;
      }
    }
  }
}
   15b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pEvt->hdr.status = ATT_ERR_INVALID_RSP;
   15b20:	2273      	movs	r2, #115	; 0x73
   15b22:	70da      	strb	r2, [r3, #3]
}
   15b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (nextHandle == 0 || nextHandle > pCcb->outReqParams.h.endHandle)
   15b26:	b114      	cbz	r4, 15b2e <attcProcFindByTypeRsp+0x72>
   15b28:	8c03      	ldrh	r3, [r0, #32]
   15b2a:	42a3      	cmp	r3, r4
   15b2c:	d202      	bcs.n	15b34 <attcProcFindByTypeRsp+0x78>
        pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   15b2e:	2300      	movs	r3, #0
   15b30:	74c3      	strb	r3, [r0, #19]
}
   15b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pCcb->outReqParams.h.startHandle = nextHandle;
   15b34:	83c4      	strh	r4, [r0, #30]
        pCcb->outReq.handle = nextHandle;
   15b36:	8304      	strh	r4, [r0, #24]
}
   15b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b3a:	bf00      	nop

00015b3c <attcProcReadLongRsp>:
 */
/*************************************************************************************************/
void attcProcReadLongRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   15b3c:	7cc2      	ldrb	r2, [r0, #19]
   15b3e:	2a01      	cmp	r2, #1
   15b40:	d000      	beq.n	15b44 <attcProcReadLongRsp+0x8>
    else
    {
      pCcb->outReqParams.o.offset += pEvt->valueLen;
    }
  }
}
   15b42:	4770      	bx	lr
    if (len < pCcb->pMainCcb->mtu)
   15b44:	6802      	ldr	r2, [r0, #0]
   15b46:	8b52      	ldrh	r2, [r2, #26]
   15b48:	428a      	cmp	r2, r1
   15b4a:	d902      	bls.n	15b52 <attcProcReadLongRsp+0x16>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   15b4c:	2300      	movs	r3, #0
   15b4e:	74c3      	strb	r3, [r0, #19]
   15b50:	4770      	bx	lr
      pCcb->outReqParams.o.offset += pEvt->valueLen;
   15b52:	8bc2      	ldrh	r2, [r0, #30]
   15b54:	891b      	ldrh	r3, [r3, #8]
   15b56:	4413      	add	r3, r2
   15b58:	83c3      	strh	r3, [r0, #30]
}
   15b5a:	4770      	bx	lr

00015b5c <AttcFindByTypeValueReq>:
 *  \return None.
 */
/*************************************************************************************************/
void AttcFindByTypeValueReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle,
                            uint16_t uuid16, uint16_t valueLen, uint8_t *pValue, bool_t continuing)
{
   15b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b60:	b081      	sub	sp, #4
   15b62:	4607      	mov	r7, r0
   15b64:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   15b68:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   15b6c:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_FIND_TYPE_REQ_BUF_LEN + valueLen)) != NULL)
   15b70:	f109 000f 	add.w	r0, r9, #15
   15b74:	b280      	uxth	r0, r0
{
   15b76:	460e      	mov	r6, r1
   15b78:	4690      	mov	r8, r2
   15b7a:	461d      	mov	r5, r3
  if ((pPkt = attMsgAlloc(ATT_FIND_TYPE_REQ_BUF_LEN + valueLen)) != NULL)
   15b7c:	f001 ff60 	bl	17a40 <attMsgAlloc>
   15b80:	b1d8      	cbz	r0, 15bba <AttcFindByTypeValueReq+0x5e>
  {
    /* set parameters */
    pPkt->len = ATT_FIND_TYPE_REQ_LEN + valueLen;
   15b82:	f109 0307 	add.w	r3, r9, #7
    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
    /* skip start and end handle fields */
    p += (2 * sizeof(uint16_t));
    UINT16_TO_BSTREAM(p, uuid16);
   15b86:	7345      	strb	r5, [r0, #13]
    pPkt->len = ATT_FIND_TYPE_REQ_LEN + valueLen;
   15b88:	8003      	strh	r3, [r0, #0]
    UINT16_TO_BSTREAM(p, uuid16);
   15b8a:	0a2d      	lsrs	r5, r5, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
   15b8c:	2306      	movs	r3, #6
   15b8e:	4604      	mov	r4, r0
    pPkt->h.endHandle = endHandle;
   15b90:	f8a0 8004 	strh.w	r8, [r0, #4]
    memcpy(p, pValue, valueLen);
   15b94:	4659      	mov	r1, fp
    pPkt->h.startHandle = startHandle;
   15b96:	8046      	strh	r6, [r0, #2]
    UINT16_TO_BSTREAM(p, uuid16);
   15b98:	7385      	strb	r5, [r0, #14]
    memcpy(p, pValue, valueLen);
   15b9a:	464a      	mov	r2, r9
    UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_REQ);
   15b9c:	7203      	strb	r3, [r0, #8]
    memcpy(p, pValue, valueLen);
   15b9e:	300f      	adds	r0, #15
   15ba0:	f7f6 faae 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_BY_TYPE_VALUE, pPkt, continuing);
   15ba4:	4623      	mov	r3, r4
   15ba6:	2203      	movs	r2, #3
   15ba8:	4631      	mov	r1, r6
   15baa:	4638      	mov	r0, r7
   15bac:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  }
}
   15bb0:	b001      	add	sp, #4
   15bb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attcSendMsg(connId, startHandle, ATTC_MSG_API_FIND_BY_TYPE_VALUE, pPkt, continuing);
   15bb6:	f7ff bde3 	b.w	15780 <attcSendMsg>
}
   15bba:	b001      	add	sp, #4
   15bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015bc0 <AttcReadByTypeReq>:
 *  \return None.
 */
/*************************************************************************************************/
void AttcReadByTypeReq(dmConnId_t connId, uint16_t startHandle, uint16_t endHandle,
                       uint8_t uuidLen, uint8_t *pUuid, bool_t continuing)
{
   15bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15bc4:	4607      	mov	r7, r0
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_READ_TYPE_REQ_BUF_LEN + uuidLen)) != NULL)
   15bc6:	f103 000d 	add.w	r0, r3, #13
{
   15bca:	f8dd a020 	ldr.w	sl, [sp, #32]
   15bce:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
   15bd2:	461d      	mov	r5, r3
   15bd4:	460e      	mov	r6, r1
   15bd6:	4690      	mov	r8, r2
  if ((pPkt = attMsgAlloc(ATT_READ_TYPE_REQ_BUF_LEN + uuidLen)) != NULL)
   15bd8:	f001 ff32 	bl	17a40 <attMsgAlloc>
   15bdc:	b1b8      	cbz	r0, 15c0e <AttcReadByTypeReq+0x4e>
  {
    /* set parameters */
    pPkt->len = ATT_READ_TYPE_REQ_LEN + uuidLen;
   15bde:	b2ab      	uxth	r3, r5
   15be0:	3305      	adds	r3, #5
   15be2:	8003      	strh	r3, [r0, #0]
    pPkt->h.startHandle = startHandle;
    pPkt->h.endHandle = endHandle;

    /* build partial packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_REQ);
   15be4:	2308      	movs	r3, #8
   15be6:	4604      	mov	r4, r0
    pPkt->h.endHandle = endHandle;
   15be8:	f8a0 8004 	strh.w	r8, [r0, #4]
    /* skip start and end handle fields */
    p += (2 * sizeof(uint16_t));
    memcpy(p, pUuid, uuidLen);
   15bec:	462a      	mov	r2, r5
   15bee:	4651      	mov	r1, sl
    pPkt->h.startHandle = startHandle;
   15bf0:	8046      	strh	r6, [r0, #2]
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_REQ);
   15bf2:	7203      	strb	r3, [r0, #8]
    memcpy(p, pUuid, uuidLen);
   15bf4:	300d      	adds	r0, #13
   15bf6:	f7f6 fa83 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, startHandle, ATTC_MSG_API_READ_BY_TYPE, pPkt, continuing);
   15bfa:	f8cd 9020 	str.w	r9, [sp, #32]
   15bfe:	4623      	mov	r3, r4
   15c00:	4631      	mov	r1, r6
   15c02:	4638      	mov	r0, r7
   15c04:	2204      	movs	r2, #4
  }
}
   15c06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attcSendMsg(connId, startHandle, ATTC_MSG_API_READ_BY_TYPE, pPkt, continuing);
   15c0a:	f7ff bdb9 	b.w	15780 <attcSendMsg>
}
   15c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15c12:	bf00      	nop

00015c14 <attcProcPrepWriteRsp>:
 */
/*************************************************************************************************/
void attcProcPrepWriteRsp(attcCcb_t *pCcb, uint16_t len, uint8_t *pPacket, attEvt_t *pEvt)
{
  /* if continuing */
  if (pCcb->outReq.hdr.status == ATTC_CONTINUING)
   15c14:	7cc2      	ldrb	r2, [r0, #19]
   15c16:	2a01      	cmp	r2, #1
   15c18:	d006      	beq.n	15c28 <attcProcPrepWriteRsp+0x14>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
    }
  }

  /* adjust attribute value and its length (adjusted by ATT header length already) */
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   15c1a:	6859      	ldr	r1, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   15c1c:	891a      	ldrh	r2, [r3, #8]
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   15c1e:	3104      	adds	r1, #4
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   15c20:	3a04      	subs	r2, #4
  pEvt->pValue += (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   15c22:	6059      	str	r1, [r3, #4]
  pEvt->valueLen -= (ATT_PREP_WRITE_RSP_LEN - ATT_HDR_LEN);
   15c24:	811a      	strh	r2, [r3, #8]
}
   15c26:	4770      	bx	lr
    if (pCcb->outReqParams.w.len == 0)
   15c28:	8b82      	ldrh	r2, [r0, #28]
   15c2a:	2a00      	cmp	r2, #0
   15c2c:	d1f5      	bne.n	15c1a <attcProcPrepWriteRsp+0x6>
      pCcb->outReq.hdr.status = ATTC_NOT_CONTINUING;
   15c2e:	74c2      	strb	r2, [r0, #19]
   15c30:	e7f3      	b.n	15c1a <attcProcPrepWriteRsp+0x6>
   15c32:	bf00      	nop

00015c34 <AttcWriteCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttcWriteCmd(dmConnId_t connId, uint16_t handle, uint16_t valueLen, uint8_t *pValue)
{
   15c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attcPktParam_t  *pPkt;
  uint8_t         *p;

  /* allocate packet and parameter buffer */
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
   15c38:	f102 040b 	add.w	r4, r2, #11
{
   15c3c:	b082      	sub	sp, #8
   15c3e:	4680      	mov	r8, r0
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
   15c40:	b2a0      	uxth	r0, r4
{
   15c42:	4615      	mov	r5, r2
   15c44:	460e      	mov	r6, r1
   15c46:	461f      	mov	r7, r3
  if ((pPkt = attMsgAlloc(ATT_WRITE_CMD_BUF_LEN + valueLen)) != NULL)
   15c48:	f001 fefa 	bl	17a40 <attMsgAlloc>
   15c4c:	b1a0      	cbz	r0, 15c78 <AttcWriteCmd+0x44>
  {
    /* set length */
    pPkt->len = ATT_WRITE_CMD_LEN + valueLen;
   15c4e:	1ceb      	adds	r3, r5, #3
   15c50:	8003      	strh	r3, [r0, #0]

    /* build packet */
    p = (uint8_t *) pPkt + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_CMD);
   15c52:	2352      	movs	r3, #82	; 0x52
   15c54:	7203      	strb	r3, [r0, #8]
    UINT16_TO_BSTREAM(p, handle);
   15c56:	0a33      	lsrs	r3, r6, #8
   15c58:	7283      	strb	r3, [r0, #10]
    memcpy(p, pValue, valueLen);
   15c5a:	4604      	mov	r4, r0
   15c5c:	4639      	mov	r1, r7
    UINT16_TO_BSTREAM(p, handle);
   15c5e:	7246      	strb	r6, [r0, #9]
    memcpy(p, pValue, valueLen);
   15c60:	462a      	mov	r2, r5
   15c62:	300b      	adds	r0, #11
   15c64:	f7f6 fa4c 	bl	c100 <memcpy>

    /* send message */
    attcSendMsg(connId, handle, ATTC_MSG_API_WRITE_CMD, pPkt, FALSE);
   15c68:	2300      	movs	r3, #0
   15c6a:	9300      	str	r3, [sp, #0]
   15c6c:	220a      	movs	r2, #10
   15c6e:	4623      	mov	r3, r4
   15c70:	4631      	mov	r1, r6
   15c72:	4640      	mov	r0, r8
   15c74:	f7ff fd84 	bl	15780 <attcSendMsg>
  }
}
   15c78:	b002      	add	sp, #8
   15c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15c7e:	bf00      	nop

00015c80 <attsCsfSetHashUpdateStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsCsfSetHashUpdateStatus(bool_t isUpdating)
{
   15c80:	b510      	push	{r4, lr}
  if (attsCsfCb.isHashUpdating == isUpdating)
   15c82:	4c10      	ldr	r4, [pc, #64]	; (15cc4 <attsCsfSetHashUpdateStatus+0x44>)
   15c84:	7b23      	ldrb	r3, [r4, #12]
   15c86:	4283      	cmp	r3, r0
   15c88:	d01a      	beq.n	15cc0 <attsCsfSetHashUpdateStatus+0x40>
    return;
  }
  else
  {
    /* Update state. */
    attsCsfCb.isHashUpdating = isUpdating;
   15c8a:	7320      	strb	r0, [r4, #12]
  }

  /* Update complete.
   * Check if clients were pending on the hash value and fulfill their requests.
   */
  if (isUpdating == FALSE)
   15c8c:	b930      	cbnz	r0, 15c9c <attsCsfSetHashUpdateStatus+0x1c>
  {
    ATT_TRACE_INFO0("Database hash calculation complete");
   15c8e:	480e      	ldr	r0, [pc, #56]	; (15cc8 <attsCsfSetHashUpdateStatus+0x48>)
   15c90:	f002 fb86 	bl	183a0 <WsfTrace>
      {
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
      }
    }
  }
}
   15c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    attsCheckPendDbHashReadRsp();
   15c98:	f000 bb3a 	b.w	16310 <attsCheckPendDbHashReadRsp>
    ATT_TRACE_INFO0("Calculating database hash");
   15c9c:	480b      	ldr	r0, [pc, #44]	; (15ccc <attsCsfSetHashUpdateStatus+0x4c>)
   15c9e:	f002 fb7f 	bl	183a0 <WsfTrace>
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   15ca2:	7863      	ldrb	r3, [r4, #1]
   15ca4:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   15ca6:	bf04      	itt	eq
   15ca8:	2301      	moveq	r3, #1
   15caa:	7063      	strbeq	r3, [r4, #1]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   15cac:	78e3      	ldrb	r3, [r4, #3]
   15cae:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   15cb0:	bf04      	itt	eq
   15cb2:	2301      	moveq	r3, #1
   15cb4:	70e3      	strbeq	r3, [r4, #3]
      if (attsCsfCb.attsCsfTable[i].changeAwareState == ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING)
   15cb6:	7963      	ldrb	r3, [r4, #5]
   15cb8:	2b02      	cmp	r3, #2
        attsCsfCb.attsCsfTable[i].changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   15cba:	bf04      	itt	eq
   15cbc:	2301      	moveq	r3, #1
   15cbe:	7163      	strbeq	r3, [r4, #5]
}
   15cc0:	bd10      	pop	{r4, pc}
   15cc2:	bf00      	nop
   15cc4:	10006d84 	.word	0x10006d84
   15cc8:	000258ac 	.word	0x000258ac
   15ccc:	000258d0 	.word	0x000258d0

00015cd0 <attsCsfGetHashUpdateStatus>:
*  \return \ref TRUE if update in progress, \ref FALSE otherwise.
*/
/*************************************************************************************************/
uint8_t attsCsfGetHashUpdateStatus(void)
{
  return attsCsfCb.isHashUpdating;
   15cd0:	4b01      	ldr	r3, [pc, #4]	; (15cd8 <attsCsfGetHashUpdateStatus+0x8>)
}
   15cd2:	7b18      	ldrb	r0, [r3, #12]
   15cd4:	4770      	bx	lr
   15cd6:	bf00      	nop
   15cd8:	10006d84 	.word	0x10006d84

00015cdc <attsCsfActClientState>:
{
  uint8_t err = ATT_SUCCESS;
  attsCsfRec_t *pRec;

  /* PDU which do not operate on att handles are handled agnostically of the client's state. */
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
   15cdc:	2902      	cmp	r1, #2
   15cde:	d04a      	beq.n	15d76 <attsCsfActClientState+0x9a>
   15ce0:	291e      	cmp	r1, #30
{
   15ce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15ce6:	460c      	mov	r4, r1
  if (opcode == ATT_PDU_MTU_REQ || opcode == ATT_PDU_VALUE_CNF)
   15ce8:	d00e      	beq.n	15d08 <attsCsfActClientState+0x2c>
  }

  pRec = &attsCsfCb.attsCsfTable[handle];

  /* If the client is change-unaware */
  if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_UNAWARE)
   15cea:	4f2e      	ldr	r7, [pc, #184]	; (15da4 <attsCsfActClientState+0xc8>)
   15cec:	eb07 0840 	add.w	r8, r7, r0, lsl #1
   15cf0:	4605      	mov	r5, r0
   15cf2:	f898 3001 	ldrb.w	r3, [r8, #1]
   15cf6:	2b03      	cmp	r3, #3
   15cf8:	4616      	mov	r6, r2
   15cfa:	ea4f 0940 	mov.w	r9, r0, lsl #1
   15cfe:	d006      	beq.n	15d0e <attsCsfActClientState+0x32>
    {
      /* return a database out of sync error */
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    }
  }
  else if (pRec->changeAwareState == ATTS_CLIENT_CHANGE_PENDING_AWARE)
   15d00:	2b01      	cmp	r3, #1
   15d02:	d03a      	beq.n	15d7a <attsCsfActClientState+0x9e>
      err = ATT_ERR_DATABASE_OUT_OF_SYNC;
    }
  }

  /* If this is Read by Type request */
  if (opcode == ATT_PDU_READ_TYPE_REQ)
   15d04:	2c08      	cmp	r4, #8
   15d06:	d016      	beq.n	15d36 <attsCsfActClientState+0x5a>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));

    /* If this is a Read By Type Request of the Database Hash characteristic value */
    if (uuid == ATT_UUID_DATABASE_HASH)
    {
      err = ATT_SUCCESS;
   15d08:	2000      	movs	r0, #0
  {
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
  }

  return err;
}
   15d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   15d0e:	064a      	lsls	r2, r1, #25
   15d10:	d525      	bpl.n	15d5e <attsCsfActClientState+0x82>
  if (opcode == ATT_PDU_READ_TYPE_REQ)
   15d12:	2c08      	cmp	r4, #8
   15d14:	d108      	bne.n	15d28 <attsCsfActClientState+0x4c>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
   15d16:	7bb2      	ldrb	r2, [r6, #14]
   15d18:	7b73      	ldrb	r3, [r6, #13]
   15d1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if (uuid == ATT_UUID_DATABASE_HASH)
   15d1e:	b29b      	uxth	r3, r3
   15d20:	f642 322a 	movw	r2, #11050	; 0x2b2a
   15d24:	4293      	cmp	r3, r2
   15d26:	d00f      	beq.n	15d48 <attsCsfActClientState+0x6c>
    ATT_TRACE_INFO2("ConnId %d out of sync, PDU with opcode 0x%02x ignored!", handle + 1, opcode);
   15d28:	481f      	ldr	r0, [pc, #124]	; (15da8 <attsCsfActClientState+0xcc>)
   15d2a:	4622      	mov	r2, r4
   15d2c:	1c69      	adds	r1, r5, #1
   15d2e:	f002 fb37 	bl	183a0 <WsfTrace>
   15d32:	2012      	movs	r0, #18
   15d34:	e7e9      	b.n	15d0a <attsCsfActClientState+0x2e>
    BYTES_TO_UINT16(uuid, (pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN + 4));
   15d36:	7bb2      	ldrb	r2, [r6, #14]
   15d38:	7b73      	ldrb	r3, [r6, #13]
   15d3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if (uuid == ATT_UUID_DATABASE_HASH)
   15d3e:	b29b      	uxth	r3, r3
   15d40:	f642 322a 	movw	r2, #11050	; 0x2b2a
   15d44:	4293      	cmp	r3, r2
   15d46:	d1df      	bne.n	15d08 <attsCsfActClientState+0x2c>
      if (attsCsfCb.isHashUpdating)
   15d48:	7b3b      	ldrb	r3, [r7, #12]
   15d4a:	2b00      	cmp	r3, #0
   15d4c:	d0dc      	beq.n	15d08 <attsCsfActClientState+0x2c>
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
   15d4e:	444f      	add	r7, r9
   15d50:	2202      	movs	r2, #2
        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   15d52:	4816      	ldr	r0, [pc, #88]	; (15dac <attsCsfActClientState+0xd0>)
        pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE_DB_READ_PENDING;
   15d54:	707a      	strb	r2, [r7, #1]
        ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   15d56:	1c69      	adds	r1, r5, #1
   15d58:	f002 fb22 	bl	183a0 <WsfTrace>
   15d5c:	e7d4      	b.n	15d08 <attsCsfActClientState+0x2c>
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   15d5e:	2201      	movs	r2, #1
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   15d60:	4812      	ldr	r0, [pc, #72]	; (15dac <attsCsfActClientState+0xd0>)
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_PENDING_AWARE;
   15d62:	f888 2001 	strb.w	r2, [r8, #1]
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1,
   15d66:	18a9      	adds	r1, r5, r2
   15d68:	f002 fb1a 	bl	183a0 <WsfTrace>
    if ((opcode & ATT_PDU_MASK_COMMAND) ||
   15d6c:	f817 3015 	ldrb.w	r3, [r7, r5, lsl #1]
   15d70:	07db      	lsls	r3, r3, #31
   15d72:	d4ce      	bmi.n	15d12 <attsCsfActClientState+0x36>
   15d74:	e7c6      	b.n	15d04 <attsCsfActClientState+0x28>
    return err;
   15d76:	2000      	movs	r0, #0
}
   15d78:	4770      	bx	lr
    if ((opcode & ATT_PDU_MASK_COMMAND) == 0)
   15d7a:	f011 0240 	ands.w	r2, r1, #64	; 0x40
   15d7e:	d1c8      	bne.n	15d12 <attsCsfActClientState+0x36>
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
   15d80:	f100 0a01 	add.w	sl, r0, #1
      pRec->changeAwareState = ATTS_CLIENT_CHANGE_AWARE;
   15d84:	f888 2001 	strb.w	r2, [r8, #1]
      ATT_TRACE_INFO2("ConnId %d change aware state is %d", handle + 1, ATTS_CLIENT_CHANGE_AWARE);
   15d88:	4808      	ldr	r0, [pc, #32]	; (15dac <attsCsfActClientState+0xd0>)
   15d8a:	4651      	mov	r1, sl
   15d8c:	f002 fb08 	bl	183a0 <WsfTrace>
      if (attsCsfCb.writeCback != NULL)
   15d90:	68bb      	ldr	r3, [r7, #8]
   15d92:	2b00      	cmp	r3, #0
   15d94:	d0b6      	beq.n	15d04 <attsCsfActClientState+0x28>
        attsCsfCb.writeCback(handle + 1, pRec->changeAwareState, &pRec->csf);
   15d96:	f898 1001 	ldrb.w	r1, [r8, #1]
   15d9a:	fa5f f08a 	uxtb.w	r0, sl
   15d9e:	4642      	mov	r2, r8
   15da0:	4798      	blx	r3
   15da2:	e7af      	b.n	15d04 <attsCsfActClientState+0x28>
   15da4:	10006d84 	.word	0x10006d84
   15da8:	00025910 	.word	0x00025910
   15dac:	000258ec 	.word	0x000258ec

00015db0 <attsIndMsgCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndMsgCback(attsApiMsg_t *pMsg)
{
   15db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attsIndCcb_t   *pCcb;

  /* get CCB and verify connection still in use */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->hdr.param)) == NULL)
   15db4:	7804      	ldrb	r4, [r0, #0]
{
   15db6:	b082      	sub	sp, #8
   15db8:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
   15dba:	4620      	mov	r0, r4
   15dbc:	f006 f9a0 	bl	1c100 <DmConnInUse>
   15dc0:	2800      	cmp	r0, #0
   15dc2:	d03b      	beq.n	15e3c <attsIndMsgCback+0x8c>
    /* ignore if connection not in use */
    return;
  }

  /* if an API message to send packet */
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   15dc4:	78ab      	ldrb	r3, [r5, #2]
   15dc6:	2b21      	cmp	r3, #33	; 0x21
    return &attsIndCb.ccb[connId - 1];
   15dc8:	f104 34ff 	add.w	r4, r4, #4294967295
  if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   15dcc:	d004      	beq.n	15dd8 <attsIndMsgCback+0x28>
    {
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
    }
  }
  /* else if indication timeout */
  else if (pMsg->hdr.event == ATTS_MSG_IND_TIMEOUT)
   15dce:	2b22      	cmp	r3, #34	; 0x22
   15dd0:	d01c      	beq.n	15e0c <attsIndMsgCback+0x5c>
      attsExecCallback((dmConnId_t) pMsg->hdr.param, pCcb->pendIndHandle, ATT_ERR_TIMEOUT);
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
    }
  }
}
   15dd2:	b002      	add	sp, #8
   15dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
   15dd8:	686b      	ldr	r3, [r5, #4]
  if (opcode == ATT_PDU_VALUE_IND)
   15dda:	7a1a      	ldrb	r2, [r3, #8]
   15ddc:	2a1d      	cmp	r2, #29
   15dde:	d049      	beq.n	15e74 <attsIndMsgCback+0xc4>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   15de0:	4939      	ldr	r1, [pc, #228]	; (15ec8 <attsIndMsgCback+0x118>)
   15de2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15de6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   15dea:	8b22      	ldrh	r2, [r4, #24]
   15dec:	2a00      	cmp	r2, #0
   15dee:	d02f      	beq.n	15e50 <attsIndMsgCback+0xa0>
  handle = pPkt->handle;
   15df0:	885a      	ldrh	r2, [r3, #2]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   15df2:	7828      	ldrb	r0, [r5, #0]
   15df4:	2300      	movs	r3, #0
   15df6:	9300      	str	r3, [sp, #0]
   15df8:	210f      	movs	r1, #15
   15dfa:	2372      	movs	r3, #114	; 0x72
   15dfc:	f001 fe04 	bl	17a08 <attExecCallback>
      WsfMsgFree(pMsg->pPkt);
   15e00:	6868      	ldr	r0, [r5, #4]
}
   15e02:	b002      	add	sp, #8
   15e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      WsfMsgFree(pMsg->pPkt);
   15e08:	f001 bf52 	b.w	17cb0 <WsfMsgFree>
    if (pCcb->outIndHandle != ATT_HANDLE_NONE)
   15e0c:	4b2e      	ldr	r3, [pc, #184]	; (15ec8 <attsIndMsgCback+0x118>)
   15e0e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15e12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   15e16:	8aa3      	ldrh	r3, [r4, #20]
   15e18:	2b00      	cmp	r3, #0
   15e1a:	d0da      	beq.n	15dd2 <attsIndMsgCback+0x22>
      pCcb->outIndHandle = ATT_HANDLE_NONE;
   15e1c:	2600      	movs	r6, #0
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   15e1e:	8ae2      	ldrh	r2, [r4, #22]
   15e20:	7828      	ldrb	r0, [r5, #0]
   15e22:	9600      	str	r6, [sp, #0]
   15e24:	2371      	movs	r3, #113	; 0x71
      pCcb->outIndHandle = ATT_HANDLE_NONE;
   15e26:	82a6      	strh	r6, [r4, #20]
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   15e28:	210f      	movs	r1, #15
   15e2a:	f001 fded 	bl	17a08 <attExecCallback>
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   15e2e:	6922      	ldr	r2, [r4, #16]
      pCcb->pendIndHandle = ATT_HANDLE_NONE;
   15e30:	82e6      	strh	r6, [r4, #22]
      pCcb->pMainCcb->control |= ATT_CCB_STATUS_TX_TIMEOUT;
   15e32:	7f53      	ldrb	r3, [r2, #29]
   15e34:	f043 0304 	orr.w	r3, r3, #4
   15e38:	7753      	strb	r3, [r2, #29]
   15e3a:	e7ca      	b.n	15dd2 <attsIndMsgCback+0x22>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   15e3c:	4823      	ldr	r0, [pc, #140]	; (15ecc <attsIndMsgCback+0x11c>)
   15e3e:	4621      	mov	r1, r4
   15e40:	f002 faae 	bl	183a0 <WsfTrace>
    if (pMsg->hdr.event == ATTS_MSG_API_VALUE_IND_NTF)
   15e44:	78ab      	ldrb	r3, [r5, #2]
   15e46:	2b21      	cmp	r3, #33	; 0x21
   15e48:	d0da      	beq.n	15e00 <attsIndMsgCback+0x50>
}
   15e4a:	b002      	add	sp, #8
   15e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   15e50:	6922      	ldr	r2, [r4, #16]
      attsSetupMsg(pCcb, (dmConnId_t) pMsg->hdr.param, pMsg->pPkt);
   15e52:	882e      	ldrh	r6, [r5, #0]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   15e54:	8b11      	ldrh	r1, [r2, #24]
   15e56:	881a      	ldrh	r2, [r3, #0]
  handle = pPkt->handle;
   15e58:	885d      	ldrh	r5, [r3, #2]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   15e5a:	2004      	movs	r0, #4
   15e5c:	f005 f9b2 	bl	1b1c4 <L2cDataReq>
  else if (!(pCcb->pMainCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   15e60:	6923      	ldr	r3, [r4, #16]
   15e62:	7f5b      	ldrb	r3, [r3, #29]
   15e64:	f013 0302 	ands.w	r3, r3, #2
   15e68:	d026      	beq.n	15eb8 <attsIndMsgCback+0x108>
    if (pCcb->pendNtfHandle[i] == ATT_HANDLE_NONE)
   15e6a:	8b23      	ldrh	r3, [r4, #24]
   15e6c:	2b00      	cmp	r3, #0
   15e6e:	d1b0      	bne.n	15dd2 <attsIndMsgCback+0x22>
      pCcb->pendNtfHandle[i] = handle;
   15e70:	8325      	strh	r5, [r4, #24]
      break;
   15e72:	e7ae      	b.n	15dd2 <attsIndMsgCback+0x22>
    return (pCcb->pendIndHandle == ATT_HANDLE_NONE) ? FALSE : TRUE;
   15e74:	4f14      	ldr	r7, [pc, #80]	; (15ec8 <attsIndMsgCback+0x118>)
   15e76:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15e7a:	ea4f 0884 	mov.w	r8, r4, lsl #2
   15e7e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    if (attsPendIndNtfHandle(pCcb, pMsg->pPkt))
   15e82:	8ae6      	ldrh	r6, [r4, #22]
   15e84:	2e00      	cmp	r6, #0
   15e86:	d1b3      	bne.n	15df0 <attsIndMsgCback+0x40>
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   15e88:	6922      	ldr	r2, [r4, #16]
  handle = pPkt->handle;
   15e8a:	885d      	ldrh	r5, [r3, #2]
  L2cDataReq(L2C_CID_ATT, pCcb->pMainCcb->handle, pPkt->len, (uint8_t *) pPkt);
   15e8c:	8b11      	ldrh	r1, [r2, #24]
   15e8e:	881a      	ldrh	r2, [r3, #0]
   15e90:	2004      	movs	r0, #4
   15e92:	f005 f997 	bl	1b1c4 <L2cDataReq>
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   15e96:	4b0e      	ldr	r3, [pc, #56]	; (15ed0 <attsIndMsgCback+0x120>)
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   15e98:	4447      	add	r7, r8
   15e9a:	f365 060f 	bfi	r6, r5, #0, #16
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   15e9e:	681b      	ldr	r3, [r3, #0]
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   15ea0:	f365 461f 	bfi	r6, r5, #16, #16
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
   15ea4:	2222      	movs	r2, #34	; 0x22
    pCcb->outIndHandle = pCcb->pendIndHandle = handle;
   15ea6:	617e      	str	r6, [r7, #20]
    pCcb->outIndTimer.msg.event = ATTS_MSG_IND_TIMEOUT;
   15ea8:	72a2      	strb	r2, [r4, #10]
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   15eaa:	7999      	ldrb	r1, [r3, #6]
   15eac:	4620      	mov	r0, r4
}
   15eae:	b002      	add	sp, #8
   15eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    WsfTimerStartSec(&pCcb->outIndTimer, pAttCfg->transTimeout);
   15eb4:	f002 b94e 	b.w	18154 <WsfTimerStartSec>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   15eb8:	9300      	str	r3, [sp, #0]
   15eba:	462a      	mov	r2, r5
   15ebc:	210f      	movs	r1, #15
   15ebe:	b2f0      	uxtb	r0, r6
   15ec0:	f001 fda2 	bl	17a08 <attExecCallback>
}
   15ec4:	e785      	b.n	15dd2 <attsIndMsgCback+0x22>
   15ec6:	bf00      	nop
   15ec8:	10006d94 	.word	0x10006d94
   15ecc:	00025948 	.word	0x00025948
   15ed0:	10002e50 	.word	0x10002e50

00015ed4 <attsIndConnCback>:
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   15ed4:	788b      	ldrb	r3, [r1, #2]
   15ed6:	2b28      	cmp	r3, #40	; 0x28
   15ed8:	d000      	beq.n	15edc <attsIndConnCback+0x8>
   15eda:	4770      	bx	lr
{
   15edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   15ee0:	78cb      	ldrb	r3, [r1, #3]
{
   15ee2:	b084      	sub	sp, #16
   15ee4:	4604      	mov	r4, r0
    if (pDmEvt->connClose.hdr.status == HCI_SUCCESS)
   15ee6:	b1fb      	cbz	r3, 15f28 <attsIndConnCback+0x54>
      status = pDmEvt->connClose.hdr.status + ATT_HCI_ERR_BASE;
   15ee8:	3320      	adds	r3, #32
   15eea:	b2db      	uxtb	r3, r3
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
   15eec:	7f20      	ldrb	r0, [r4, #28]
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   15eee:	4d1c      	ldr	r5, [pc, #112]	; (15f60 <attsIndConnCback+0x8c>)
    pIndCcb = &attsIndCb.ccb[pCcb->connId - 1];
   15ef0:	1e46      	subs	r6, r0, #1
    if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   15ef2:	ebc6 08c6 	rsb	r8, r6, r6, lsl #3
   15ef6:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   15efa:	00f7      	lsls	r7, r6, #3
   15efc:	f8b8 2014 	ldrh.w	r2, [r8, #20]
   15f00:	bb22      	cbnz	r2, 15f4c <attsIndConnCback+0x78>
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   15f02:	1bbc      	subs	r4, r7, r6
   15f04:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   15f08:	8ae2      	ldrh	r2, [r4, #22]
   15f0a:	b98a      	cbnz	r2, 15f30 <attsIndConnCback+0x5c>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   15f0c:	1bbe      	subs	r6, r7, r6
   15f0e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   15f12:	8b2a      	ldrh	r2, [r5, #24]
   15f14:	b12a      	cbz	r2, 15f22 <attsIndConnCback+0x4e>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   15f16:	2400      	movs	r4, #0
   15f18:	9400      	str	r4, [sp, #0]
   15f1a:	210f      	movs	r1, #15
   15f1c:	f001 fd74 	bl	17a08 <attExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
   15f20:	832c      	strh	r4, [r5, #24]
}
   15f22:	b004      	add	sp, #16
   15f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      status = pDmEvt->connClose.reason + ATT_HCI_ERR_BASE;
   15f28:	7a0b      	ldrb	r3, [r1, #8]
   15f2a:	3320      	adds	r3, #32
   15f2c:	b2db      	uxtb	r3, r3
   15f2e:	e7dd      	b.n	15eec <attsIndConnCback+0x18>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   15f30:	f04f 0800 	mov.w	r8, #0
   15f34:	f8cd 8000 	str.w	r8, [sp]
   15f38:	210f      	movs	r1, #15
   15f3a:	9303      	str	r3, [sp, #12]
   15f3c:	9002      	str	r0, [sp, #8]
   15f3e:	f001 fd63 	bl	17a08 <attExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
   15f42:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   15f46:	f8a4 8016 	strh.w	r8, [r4, #22]
   15f4a:	e7df      	b.n	15f0c <attsIndConnCback+0x38>
      WsfTimerStop(&pIndCcb->outIndTimer);
   15f4c:	4640      	mov	r0, r8
   15f4e:	9302      	str	r3, [sp, #8]
   15f50:	f002 f986 	bl	18260 <WsfTimerStop>
      pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   15f54:	2200      	movs	r2, #0
   15f56:	f8a8 2014 	strh.w	r2, [r8, #20]
    attsIndNtfCallback(pCcb->connId, pIndCcb, status);
   15f5a:	7f20      	ldrb	r0, [r4, #28]
   15f5c:	9b02      	ldr	r3, [sp, #8]
   15f5e:	e7d0      	b.n	15f02 <attsIndConnCback+0x2e>
   15f60:	10006d94 	.word	0x10006d94

00015f64 <attsIndCtrlCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void attsIndCtrlCback(wsfMsgHdr_t *pMsg)
{
   15f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  attsIndCcb_t   *pCcb;

  /* note this function is currently only called when flow is enabled */

  /* get CCB */
  if ((pCcb = attsIndCcbByConnId((dmConnId_t) pMsg->param)) != NULL)
   15f68:	7804      	ldrb	r4, [r0, #0]
{
   15f6a:	b084      	sub	sp, #16
   15f6c:	4606      	mov	r6, r0
  if (DmConnInUse(connId))
   15f6e:	4620      	mov	r0, r4
   15f70:	f006 f8c6 	bl	1c100 <DmConnInUse>
   15f74:	b328      	cbz	r0, 15fc2 <attsIndCtrlCback+0x5e>
    return &attsIndCb.ccb[connId - 1];
   15f76:	3c01      	subs	r4, #1
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   15f78:	4d15      	ldr	r5, [pc, #84]	; (15fd0 <attsIndCtrlCback+0x6c>)
  {
    /* call pending indication and notification callback */
    attsIndNtfCallback((dmConnId_t) pMsg->param, pCcb, ATT_SUCCESS);
   15f7a:	7830      	ldrb	r0, [r6, #0]
  if (pCcb->pendIndHandle != ATT_HANDLE_NONE)
   15f7c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   15f80:	eb05 0787 	add.w	r7, r5, r7, lsl #2
   15f84:	00e6      	lsls	r6, r4, #3
   15f86:	8afa      	ldrh	r2, [r7, #22]
   15f88:	b972      	cbnz	r2, 15fa8 <attsIndCtrlCback+0x44>
    if (pCcb->pendNtfHandle[i] != ATT_HANDLE_NONE)
   15f8a:	1b34      	subs	r4, r6, r4
   15f8c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   15f90:	8b2a      	ldrh	r2, [r5, #24]
   15f92:	b132      	cbz	r2, 15fa2 <attsIndCtrlCback+0x3e>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   15f94:	2400      	movs	r4, #0
   15f96:	9400      	str	r4, [sp, #0]
   15f98:	4623      	mov	r3, r4
   15f9a:	210f      	movs	r1, #15
   15f9c:	f001 fd34 	bl	17a08 <attExecCallback>
      pCcb->pendNtfHandle[i] = ATT_HANDLE_NONE;
   15fa0:	832c      	strh	r4, [r5, #24]
  }
}
   15fa2:	b004      	add	sp, #16
   15fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   15fa8:	f04f 0800 	mov.w	r8, #0
   15fac:	f8cd 8000 	str.w	r8, [sp]
   15fb0:	4643      	mov	r3, r8
   15fb2:	210f      	movs	r1, #15
   15fb4:	9003      	str	r0, [sp, #12]
   15fb6:	f001 fd27 	bl	17a08 <attExecCallback>
    pCcb->pendIndHandle = ATT_HANDLE_NONE;
   15fba:	9803      	ldr	r0, [sp, #12]
   15fbc:	f8a7 8016 	strh.w	r8, [r7, #22]
   15fc0:	e7e3      	b.n	15f8a <attsIndCtrlCback+0x26>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   15fc2:	4804      	ldr	r0, [pc, #16]	; (15fd4 <attsIndCtrlCback+0x70>)
   15fc4:	4621      	mov	r1, r4
}
   15fc6:	b004      	add	sp, #16
   15fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   15fcc:	f002 b9e8 	b.w	183a0 <WsfTrace>
   15fd0:	10006d94 	.word	0x10006d94
   15fd4:	00025948 	.word	0x00025948

00015fd8 <attsProcValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcValueCnf(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   15fd8:	b570      	push	{r4, r5, r6, lr}
  attsIndCcb_t    *pIndCcb;

  /* get server indication CCB */
  if ((pIndCcb = attsIndCcbByConnId(pCcb->connId)) == NULL)
   15fda:	7f04      	ldrb	r4, [r0, #28]
{
   15fdc:	b082      	sub	sp, #8
   15fde:	4605      	mov	r5, r0
  if (DmConnInUse(connId))
   15fe0:	4620      	mov	r0, r4
   15fe2:	f006 f88d 	bl	1c100 <DmConnInUse>
   15fe6:	b1d8      	cbz	r0, 16020 <attsProcValueCnf+0x48>
  {
    return;
  }

  /* if an outstanding indication */
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   15fe8:	4911      	ldr	r1, [pc, #68]	; (16030 <attsProcValueCnf+0x58>)
    return &attsIndCb.ccb[connId - 1];
   15fea:	3c01      	subs	r4, #1
  if (pIndCcb->outIndHandle != ATT_HANDLE_NONE)
   15fec:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15ff0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   15ff4:	8aa3      	ldrh	r3, [r4, #20]
   15ff6:	b90b      	cbnz	r3, 15ffc <attsProcValueCnf+0x24>
    {
      attsExecCallback(pCcb->connId, pIndCcb->pendIndHandle, ATT_SUCCESS);
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
    }
  }
}
   15ff8:	b002      	add	sp, #8
   15ffa:	bd70      	pop	{r4, r5, r6, pc}
    pIndCcb->outIndHandle = ATT_HANDLE_NONE;
   15ffc:	2300      	movs	r3, #0
   15ffe:	82a3      	strh	r3, [r4, #20]
    WsfTimerStop(&pIndCcb->outIndTimer);
   16000:	4620      	mov	r0, r4
   16002:	f002 f92d 	bl	18260 <WsfTimerStop>
    if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   16006:	7f6b      	ldrb	r3, [r5, #29]
   16008:	f013 0602 	ands.w	r6, r3, #2
   1600c:	d1f4      	bne.n	15ff8 <attsProcValueCnf+0x20>
  attExecCallback(connId, ATTS_HANDLE_VALUE_CNF, handle, status, 0);
   1600e:	8ae2      	ldrh	r2, [r4, #22]
   16010:	7f28      	ldrb	r0, [r5, #28]
   16012:	9600      	str	r6, [sp, #0]
   16014:	4633      	mov	r3, r6
   16016:	210f      	movs	r1, #15
   16018:	f001 fcf6 	bl	17a08 <attExecCallback>
      pIndCcb->pendIndHandle = ATT_HANDLE_NONE;
   1601c:	82e6      	strh	r6, [r4, #22]
   1601e:	e7eb      	b.n	15ff8 <attsProcValueCnf+0x20>
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   16020:	4804      	ldr	r0, [pc, #16]	; (16034 <attsProcValueCnf+0x5c>)
   16022:	4621      	mov	r1, r4
}
   16024:	b002      	add	sp, #8
   16026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ATT_TRACE_WARN1("atts ccb not in use: %d", connId);
   1602a:	f002 b9b9 	b.w	183a0 <WsfTrace>
   1602e:	bf00      	nop
   16030:	10006d94 	.word	0x10006d94
   16034:	00025948 	.word	0x00025948

00016038 <AttsIndInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttsIndInit(void)
{
   16038:	b410      	push	{r4}

  /* Initialize control block CCBs */
  for (i = 0, pCcb = attsIndCb.ccb; i < DM_CONN_MAX; i++, pCcb++)
  {
    /* set pointer to main CCB */
    pCcb->pMainCcb = &attCb.ccb[i];
   1603a:	4b0e      	ldr	r3, [pc, #56]	; (16074 <AttsIndInit+0x3c>)

    /* initialize timer */
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   1603c:	4a0e      	ldr	r2, [pc, #56]	; (16078 <AttsIndInit+0x40>)
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
  }

  /* set up callback interface */
  attsCb.pInd = &attsIndFcnIf;
   1603e:	480f      	ldr	r0, [pc, #60]	; (1607c <AttsIndInit+0x44>)
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   16040:	f892 107c 	ldrb.w	r1, [r2, #124]	; 0x7c
    pCcb->pMainCcb = &attCb.ccb[i];
   16044:	611a      	str	r2, [r3, #16]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   16046:	2401      	movs	r4, #1
   16048:	811c      	strh	r4, [r3, #8]
    pCcb->pMainCcb = &attCb.ccb[i];
   1604a:	f102 0424 	add.w	r4, r2, #36	; 0x24
   1604e:	62dc      	str	r4, [r3, #44]	; 0x2c
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   16050:	2402      	movs	r4, #2
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   16052:	7319      	strb	r1, [r3, #12]
    pCcb->pMainCcb = &attCb.ccb[i];
   16054:	3248      	adds	r2, #72	; 0x48
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   16056:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   1605a:	849c      	strh	r4, [r3, #36]	; 0x24
   1605c:	f04f 0c03 	mov.w	ip, #3
  attsCb.pInd = &attsIndFcnIf;
   16060:	4c07      	ldr	r4, [pc, #28]	; (16080 <AttsIndInit+0x48>)
    pCcb->outIndTimer.handlerId = attCb.handlerId;
   16062:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
  attsCb.pInd = &attsIndFcnIf;
   16066:	6084      	str	r4, [r0, #8]
    pCcb->outIndTimer.msg.param = i + 1;  /* param stores the conn id */
   16068:	f8a3 c040 	strh.w	ip, [r3, #64]	; 0x40
}
   1606c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pCcb->pMainCcb = &attCb.ccb[i];
   16070:	649a      	str	r2, [r3, #72]	; 0x48
}
   16072:	4770      	bx	lr
   16074:	10006d94 	.word	0x10006d94
   16078:	10006e04 	.word	0x10006e04
   1607c:	10006de8 	.word	0x10006de8
   16080:	00025960 	.word	0x00025960

00016084 <attsL2cCtrlCback>:
 */
/*************************************************************************************************/
static void attsL2cCtrlCback(wsfMsgHdr_t *pMsg)
{
  /* pass event to indication interface */
  (*attsCb.pInd->ctrlCback)(pMsg);
   16084:	4b01      	ldr	r3, [pc, #4]	; (1608c <attsL2cCtrlCback+0x8>)
   16086:	689b      	ldr	r3, [r3, #8]
   16088:	685b      	ldr	r3, [r3, #4]
   1608a:	4718      	bx	r3
   1608c:	10006de8 	.word	0x10006de8

00016090 <attsConnCback>:
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   16090:	788b      	ldrb	r3, [r1, #2]
   16092:	2b28      	cmp	r3, #40	; 0x28
{
   16094:	b570      	push	{r4, r5, r6, lr}
   16096:	460d      	mov	r5, r1
   16098:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1609a:	d009      	beq.n	160b0 <attsConnCback+0x20>
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
   1609c:	4b0c      	ldr	r3, [pc, #48]	; (160d0 <attsConnCback+0x40>)
   1609e:	689b      	ldr	r3, [r3, #8]
   160a0:	4629      	mov	r1, r5
   160a2:	4620      	mov	r0, r4
   160a4:	68db      	ldr	r3, [r3, #12]
}
   160a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*attsCb.pInd->connCback)(pCcb, pDmEvt);
   160aa:	4718      	bx	r3
{
  void *pBuf;

  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
  {
    WsfBufFree(pBuf);
   160ac:	f001 fdc8 	bl	17c40 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   160b0:	4620      	mov	r0, r4
   160b2:	f001 ffab 	bl	1800c <WsfQueueDeq>
   160b6:	2800      	cmp	r0, #0
   160b8:	d1f8      	bne.n	160ac <attsConnCback+0x1c>
    if (DmConnCheckIdle(pCcb->connId) & DM_IDLE_ATTS_DISC)
   160ba:	7f20      	ldrb	r0, [r4, #28]
   160bc:	f006 f89e 	bl	1c1fc <DmConnCheckIdle>
   160c0:	0743      	lsls	r3, r0, #29
   160c2:	d5eb      	bpl.n	1609c <attsConnCback+0xc>
      WsfTimerStop(&pCcb->idleTimer);
   160c4:	f104 0008 	add.w	r0, r4, #8
   160c8:	f002 f8ca 	bl	18260 <WsfTimerStop>
   160cc:	e7e6      	b.n	1609c <attsConnCback+0xc>
   160ce:	bf00      	nop
   160d0:	10006de8 	.word	0x10006de8

000160d4 <attsDataCback>:
{
   160d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   160d8:	4680      	mov	r8, r0
   160da:	4689      	mov	r9, r1
   160dc:	4614      	mov	r4, r2
  if ((pCcb = attCcbByHandle(handle)) == NULL)
   160de:	f001 fc51 	bl	17984 <attCcbByHandle>
   160e2:	b180      	cbz	r0, 16106 <attsDataCback+0x32>
  opcode = *(pPacket + L2C_PAYLOAD_START);
   160e4:	7a27      	ldrb	r7, [r4, #8]
  if ((opcode <= ATT_PDU_WRITE_REQ) ||
   160e6:	2f12      	cmp	r7, #18
   160e8:	4605      	mov	r5, r0
   160ea:	d90e      	bls.n	1610a <attsDataCback+0x36>
   160ec:	f1a7 0316 	sub.w	r3, r7, #22
   160f0:	2b08      	cmp	r3, #8
   160f2:	d90a      	bls.n	1610a <attsDataCback+0x36>
  else if (opcode == ATT_PDU_WRITE_CMD)
   160f4:	2f52      	cmp	r7, #82	; 0x52
   160f6:	d048      	beq.n	1618a <attsDataCback+0xb6>
  else if (opcode == ATT_PDU_SIGNED_WRITE_CMD)
   160f8:	2fd2      	cmp	r7, #210	; 0xd2
   160fa:	d04f      	beq.n	1619c <attsDataCback+0xc8>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   160fc:	f890 a01d 	ldrb.w	sl, [r0, #29]
   16100:	f01a 0a08 	ands.w	sl, sl, #8
   16104:	d009      	beq.n	1611a <attsDataCback+0x46>
}
   16106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   1610a:	7f6b      	ldrb	r3, [r5, #29]
   1610c:	0718      	lsls	r0, r3, #28
    method = ATT_OPCODE_2_METHOD(opcode);
   1610e:	ea4f 0a67 	mov.w	sl, r7, asr #1
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   16112:	d502      	bpl.n	1611a <attsDataCback+0x46>
    if (method != ATT_METHOD_VALUE_CNF)
   16114:	f1ba 0f0f 	cmp.w	sl, #15
   16118:	d1f5      	bne.n	16106 <attsDataCback+0x32>
  err = attsCsfActClientState(handle, opcode, pPacket);
   1611a:	4622      	mov	r2, r4
   1611c:	4639      	mov	r1, r7
   1611e:	4640      	mov	r0, r8
   16120:	f7ff fddc 	bl	15cdc <attsCsfActClientState>
  if (err)
   16124:	4606      	mov	r6, r0
   16126:	b1f0      	cbz	r0, 16166 <attsDataCback+0x92>
    BYTES_TO_UINT16(attHandle, pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN);
   16128:	7aa2      	ldrb	r2, [r4, #10]
   1612a:	7a63      	ldrb	r3, [r4, #9]
   1612c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   16130:	b29c      	uxth	r4, r3
  if (err && (opcode != ATT_PDU_MTU_REQ) && (opcode != ATT_PDU_VALUE_CNF) &&
   16132:	2f02      	cmp	r7, #2
   16134:	d0e7      	beq.n	16106 <attsDataCback+0x32>
   16136:	2f1e      	cmp	r7, #30
   16138:	d0e5      	beq.n	16106 <attsDataCback+0x32>
   1613a:	067b      	lsls	r3, r7, #25
   1613c:	d4e3      	bmi.n	16106 <attsDataCback+0x32>
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   1613e:	200d      	movs	r0, #13
   16140:	f001 fc7e 	bl	17a40 <attMsgAlloc>
   16144:	4603      	mov	r3, r0
   16146:	2800      	cmp	r0, #0
   16148:	d0dd      	beq.n	16106 <attsDataCback+0x32>
    UINT16_TO_BSTREAM(p, attHandle);
   1614a:	7284      	strb	r4, [r0, #10]
   1614c:	0a22      	lsrs	r2, r4, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   1614e:	2401      	movs	r4, #1
    UINT16_TO_BSTREAM(p, attHandle);
   16150:	72c2      	strb	r2, [r0, #11]
    UINT8_TO_BSTREAM(p, opcode);
   16152:	7247      	strb	r7, [r0, #9]
    UINT8_TO_BSTREAM(p, reason);
   16154:	7306      	strb	r6, [r0, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   16156:	721c      	strb	r4, [r3, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   16158:	4641      	mov	r1, r8
   1615a:	2205      	movs	r2, #5
}
   1615c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   16160:	2004      	movs	r0, #4
   16162:	f005 b82f 	b.w	1b1c4 <L2cDataReq>
    procFcn = attsProcFcnTbl[method];
   16166:	4b10      	ldr	r3, [pc, #64]	; (161a8 <attsDataCback+0xd4>)
   16168:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    if (procFcn != NULL)
   1616c:	b153      	cbz	r3, 16184 <attsDataCback+0xb0>
      if (len >= attsMinPduLen[method])
   1616e:	4a0f      	ldr	r2, [pc, #60]	; (161ac <attsDataCback+0xd8>)
   16170:	f812 200a 	ldrb.w	r2, [r2, sl]
   16174:	454a      	cmp	r2, r9
   16176:	d80e      	bhi.n	16196 <attsDataCback+0xc2>
        (*procFcn)(pCcb, len, pPacket);
   16178:	4622      	mov	r2, r4
   1617a:	4649      	mov	r1, r9
   1617c:	4628      	mov	r0, r5
}
   1617e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        (*procFcn)(pCcb, len, pPacket);
   16182:	4718      	bx	r3
    attHandle = ATT_HANDLE_NONE;
   16184:	4604      	mov	r4, r0
      err = ATT_ERR_NOT_SUP;
   16186:	2606      	movs	r6, #6
   16188:	e7d3      	b.n	16132 <attsDataCback+0x5e>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   1618a:	7f43      	ldrb	r3, [r0, #29]
   1618c:	0719      	lsls	r1, r3, #28
   1618e:	d4ba      	bmi.n	16106 <attsDataCback+0x32>
   16190:	f04f 0a0a 	mov.w	sl, #10
   16194:	e7c1      	b.n	1611a <attsDataCback+0x46>
    attHandle = ATT_HANDLE_NONE;
   16196:	4634      	mov	r4, r6
        err = ATT_ERR_INVALID_PDU;
   16198:	2604      	movs	r6, #4
   1619a:	e7ca      	b.n	16132 <attsDataCback+0x5e>
  if (pCcb->control & ATT_CCB_STATUS_RSP_PENDING)
   1619c:	7f43      	ldrb	r3, [r0, #29]
   1619e:	071a      	lsls	r2, r3, #28
   161a0:	d4b1      	bmi.n	16106 <attsDataCback+0x32>
   161a2:	f04f 0a10 	mov.w	sl, #16
   161a6:	e7b8      	b.n	1611a <attsDataCback+0x46>
   161a8:	10002b4c 	.word	0x10002b4c
   161ac:	00025980 	.word	0x00025980

000161b0 <attsErrRsp>:
{
   161b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161b4:	4607      	mov	r7, r0
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   161b6:	200d      	movs	r0, #13
{
   161b8:	460e      	mov	r6, r1
   161ba:	4614      	mov	r4, r2
   161bc:	461d      	mov	r5, r3
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   161be:	f001 fc3f 	bl	17a40 <attMsgAlloc>
   161c2:	b180      	cbz	r0, 161e6 <attsErrRsp+0x36>
   161c4:	4684      	mov	ip, r0
    UINT16_TO_BSTREAM(p, attHandle);
   161c6:	7284      	strb	r4, [r0, #10]
   161c8:	0a23      	lsrs	r3, r4, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   161ca:	2401      	movs	r4, #1
    UINT16_TO_BSTREAM(p, attHandle);
   161cc:	72c3      	strb	r3, [r0, #11]
    UINT8_TO_BSTREAM(p, opcode);
   161ce:	7246      	strb	r6, [r0, #9]
    UINT8_TO_BSTREAM(p, reason);
   161d0:	7305      	strb	r5, [r0, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   161d2:	f88c 4008 	strb.w	r4, [ip, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   161d6:	4603      	mov	r3, r0
   161d8:	4639      	mov	r1, r7
   161da:	2205      	movs	r2, #5
}
   161dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   161e0:	2004      	movs	r0, #4
   161e2:	f004 bfef 	b.w	1b1c4 <L2cDataReq>
}
   161e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   161ea:	bf00      	nop

000161ec <attsClearPrepWrites>:
{
   161ec:	b510      	push	{r4, lr}
   161ee:	4604      	mov	r4, r0
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   161f0:	e001      	b.n	161f6 <attsClearPrepWrites+0xa>
    WsfBufFree(pBuf);
   161f2:	f001 fd25 	bl	17c40 <WsfBufFree>
  while ((pBuf = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   161f6:	4620      	mov	r0, r4
   161f8:	f001 ff08 	bl	1800c <WsfQueueDeq>
   161fc:	2800      	cmp	r0, #0
   161fe:	d1f8      	bne.n	161f2 <attsClearPrepWrites+0x6>
  }
}
   16200:	bd10      	pop	{r4, pc}
   16202:	bf00      	nop

00016204 <attsDiscBusy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsDiscBusy(attCcb_t *pCcb)
{
   16204:	b538      	push	{r3, r4, r5, lr}
  if (pAttCfg->discIdleTimeout > 0)
   16206:	4d0d      	ldr	r5, [pc, #52]	; (1623c <attsDiscBusy+0x38>)
   16208:	682b      	ldr	r3, [r5, #0]
   1620a:	681b      	ldr	r3, [r3, #0]
   1620c:	b903      	cbnz	r3, 16210 <attsDiscBusy+0xc>
    pCcb->idleTimer.handlerId = attCb.handlerId;
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
    pCcb->idleTimer.msg.param = pCcb->connId;
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
  }
}
   1620e:	bd38      	pop	{r3, r4, r5, pc}
    DmConnSetIdle(pCcb->connId, DM_IDLE_ATTS_DISC, DM_CONN_BUSY);
   16210:	4604      	mov	r4, r0
   16212:	2104      	movs	r1, #4
   16214:	7f00      	ldrb	r0, [r0, #28]
   16216:	2201      	movs	r2, #1
   16218:	f005 ffc2 	bl	1c1a0 <DmConnSetIdle>
    pCcb->idleTimer.handlerId = attCb.handlerId;
   1621c:	4b08      	ldr	r3, [pc, #32]	; (16240 <attsDiscBusy+0x3c>)
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   1621e:	682a      	ldr	r2, [r5, #0]
    pCcb->idleTimer.handlerId = attCb.handlerId;
   16220:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
   16224:	7520      	strb	r0, [r4, #20]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
   16226:	2120      	movs	r1, #32
    pCcb->idleTimer.msg.param = pCcb->connId;
   16228:	7f23      	ldrb	r3, [r4, #28]
    pCcb->idleTimer.msg.event = ATTS_MSG_IDLE_TIMEOUT;
   1622a:	74a1      	strb	r1, [r4, #18]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   1622c:	6811      	ldr	r1, [r2, #0]
    pCcb->idleTimer.msg.param = pCcb->connId;
   1622e:	8223      	strh	r3, [r4, #16]
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   16230:	f104 0008 	add.w	r0, r4, #8
}
   16234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfTimerStartSec(&pCcb->idleTimer, pAttCfg->discIdleTimeout);
   16238:	f001 bf8c 	b.w	18154 <WsfTimerStartSec>
   1623c:	10002e50 	.word	0x10002e50
   16240:	10006e04 	.word	0x10006e04

00016244 <attsProcessDatabaseHashUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcessDatabaseHashUpdate(secCmacMsg_t *pMsg)
{
   16244:	b530      	push	{r4, r5, lr}
   16246:	4604      	mov	r4, r0
   16248:	b08b      	sub	sp, #44	; 0x2c
  evt.handle = ATT_HANDLE_NONE;
  evt.continuing = FALSE;
  evt.mtu = 0;

  /* free plain text buffer */
  if (pMsg->pPlainText != NULL)
   1624a:	6880      	ldr	r0, [r0, #8]
  evt.continuing = FALSE;
   1624c:	2500      	movs	r5, #0
  evt.hdr.param = DM_CONN_ID_NONE;
   1624e:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
  evt.valueLen = ATT_DATABASE_HASH_LEN;
   16252:	2310      	movs	r3, #16
  evt.hdr.param = DM_CONN_ID_NONE;
   16254:	9206      	str	r2, [sp, #24]
  evt.valueLen = ATT_DATABASE_HASH_LEN;
   16256:	9308      	str	r3, [sp, #32]
  evt.continuing = FALSE;
   16258:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  evt.mtu = 0;
   1625c:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
  if (pMsg->pPlainText != NULL)
   16260:	b110      	cbz	r0, 16268 <attsProcessDatabaseHashUpdate+0x24>
  {
    WsfBufFree(pMsg->pPlainText);
   16262:	f001 fced 	bl	17c40 <WsfBufFree>
    pMsg->pPlainText = NULL;
   16266:	60a5      	str	r5, [r4, #8]

  /* copy in little endian */
  evt.pValue = pMsg->pCiphertext;

  /* find GATT database handle */
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   16268:	a904      	add	r1, sp, #16
   1626a:	aa03      	add	r2, sp, #12
  evt.pValue = pMsg->pCiphertext;
   1626c:	6864      	ldr	r4, [r4, #4]
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   1626e:	4b19      	ldr	r3, [pc, #100]	; (162d4 <attsProcessDatabaseHashUpdate+0x90>)
  evt.pValue = pMsg->pCiphertext;
   16270:	9407      	str	r4, [sp, #28]
  dbhCharHandle = attsFindUuidInRange(ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   16272:	e9cd 2100 	strd	r2, r1, [sp]
   16276:	2001      	movs	r0, #1
   16278:	2202      	movs	r2, #2
   1627a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1627e:	f000 fc05 	bl	16a8c <attsFindUuidInRange>
                                      (uint8_t *) attGattDbhChUuid, &pAttr, &pGroup);

  if (dbhCharHandle != ATT_HANDLE_NONE)
   16282:	4604      	mov	r4, r0
   16284:	b940      	cbnz	r0, 16298 <attsProcessDatabaseHashUpdate+0x54>
    /* Set hash in service. */
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
  }

  /* set hash update complete */
  attsCsfSetHashUpdateStatus(FALSE);
   16286:	2000      	movs	r0, #0
   16288:	f7ff fcfa 	bl	15c80 <attsCsfSetHashUpdateStatus>

  attCb.cback(&evt);
   1628c:	4b12      	ldr	r3, [pc, #72]	; (162d8 <attsProcessDatabaseHashUpdate+0x94>)
   1628e:	a806      	add	r0, sp, #24
   16290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   16292:	4798      	blx	r3
}
   16294:	b00b      	add	sp, #44	; 0x2c
   16296:	bd30      	pop	{r4, r5, pc}
    AttsSetAttr(dbhCharHandle, SEC_CMAC_HASH_LEN, evt.pValue);
   16298:	9d07      	ldr	r5, [sp, #28]
{
  attsAttr_t  *pAttr;
  attsGroup_t *pGroup;
  uint8_t     err = ATT_SUCCESS;

  WsfTaskLock();
   1629a:	f001 fd43 	bl	17d24 <WsfTaskLock>

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   1629e:	a905      	add	r1, sp, #20
   162a0:	4620      	mov	r0, r4
   162a2:	f000 fa35 	bl	16710 <attsFindByHandle>
   162a6:	b110      	cbz	r0, 162ae <attsProcessDatabaseHashUpdate+0x6a>
  {
    /* verify write length */
    if (valueLen > pAttr->maxLen)
   162a8:	8983      	ldrh	r3, [r0, #12]
   162aa:	2b0f      	cmp	r3, #15
   162ac:	d802      	bhi.n	162b4 <attsProcessDatabaseHashUpdate+0x70>
  else
  {
    err = ATT_ERR_NOT_FOUND;
  }

  WsfTaskUnlock();
   162ae:	f001 fd43 	bl	17d38 <WsfTaskUnlock>

  return err;
   162b2:	e7e8      	b.n	16286 <attsProcessDatabaseHashUpdate+0x42>
      memcpy(pAttr->pValue, pValue, valueLen);
   162b4:	6843      	ldr	r3, [r0, #4]
   162b6:	682c      	ldr	r4, [r5, #0]
   162b8:	6869      	ldr	r1, [r5, #4]
   162ba:	68aa      	ldr	r2, [r5, #8]
   162bc:	68ed      	ldr	r5, [r5, #12]
   162be:	60dd      	str	r5, [r3, #12]
   162c0:	601c      	str	r4, [r3, #0]
   162c2:	6059      	str	r1, [r3, #4]
   162c4:	609a      	str	r2, [r3, #8]
      if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   162c6:	7b83      	ldrb	r3, [r0, #14]
   162c8:	071b      	lsls	r3, r3, #28
   162ca:	d5f0      	bpl.n	162ae <attsProcessDatabaseHashUpdate+0x6a>
        *(pAttr->pLen) = valueLen;
   162cc:	6883      	ldr	r3, [r0, #8]
   162ce:	2210      	movs	r2, #16
   162d0:	801a      	strh	r2, [r3, #0]
   162d2:	e7ec      	b.n	162ae <attsProcessDatabaseHashUpdate+0x6a>
   162d4:	000259bc 	.word	0x000259bc
   162d8:	10006e04 	.word	0x10006e04

000162dc <attsMsgCback>:
  if (pMsg->event == ATTS_MSG_IDLE_TIMEOUT)
   162dc:	7882      	ldrb	r2, [r0, #2]
   162de:	2a20      	cmp	r2, #32
   162e0:	d00a      	beq.n	162f8 <attsMsgCback+0x1c>
  else if (pMsg->event <= ATTS_MSG_IND_TIMEOUT)
   162e2:	2a22      	cmp	r2, #34	; 0x22
   162e4:	d904      	bls.n	162f0 <attsMsgCback+0x14>
  else if (pMsg->event == ATTS_MSG_SIGN_CMAC_CMPL)
   162e6:	2a23      	cmp	r2, #35	; 0x23
   162e8:	d00b      	beq.n	16302 <attsMsgCback+0x26>
  else if (pMsg->event == ATTS_MSG_DBH_CMAC_CMPL)
   162ea:	2a24      	cmp	r2, #36	; 0x24
   162ec:	d00c      	beq.n	16308 <attsMsgCback+0x2c>
}
   162ee:	4770      	bx	lr
    (*attsCb.pInd->msgCback)(pMsg);
   162f0:	4b06      	ldr	r3, [pc, #24]	; (1630c <attsMsgCback+0x30>)
   162f2:	689b      	ldr	r3, [r3, #8]
   162f4:	689b      	ldr	r3, [r3, #8]
   162f6:	4718      	bx	r3
    DmConnSetIdle((dmConnId_t) pMsg->param, DM_IDLE_ATTS_DISC, DM_CONN_IDLE);
   162f8:	7800      	ldrb	r0, [r0, #0]
   162fa:	2200      	movs	r2, #0
   162fc:	2104      	movs	r1, #4
   162fe:	f005 bf4f 	b.w	1c1a0 <DmConnSetIdle>
    (*attsCb.signMsgCback)(pMsg);
   16302:	4b02      	ldr	r3, [pc, #8]	; (1630c <attsMsgCback+0x30>)
   16304:	68db      	ldr	r3, [r3, #12]
   16306:	4718      	bx	r3
    attsProcessDatabaseHashUpdate((secCmacMsg_t *) pMsg);
   16308:	f7ff bf9c 	b.w	16244 <attsProcessDatabaseHashUpdate>
   1630c:	10006de8 	.word	0x10006de8

00016310 <attsCheckPendDbHashReadRsp>:
{
   16310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16314:	4c39      	ldr	r4, [pc, #228]	; (163fc <attsCheckPendDbHashReadRsp+0xec>)
   16316:	b084      	sub	sp, #16
      pCcb->pPendDbHashRsp = NULL;
   16318:	f04f 0900 	mov.w	r9, #0
   1631c:	f104 086c 	add.w	r8, r4, #108	; 0x6c
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   16320:	f04f 0a01 	mov.w	sl, #1
    if (pCcb->pPendDbHashRsp)
   16324:	6a23      	ldr	r3, [r4, #32]
   16326:	2b00      	cmp	r3, #0
   16328:	d032      	beq.n	16390 <attsCheckPendDbHashReadRsp+0x80>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1632a:	8b60      	ldrh	r0, [r4, #26]
   1632c:	3008      	adds	r0, #8
   1632e:	b280      	uxth	r0, r0
   16330:	f001 fb86 	bl	17a40 <attMsgAlloc>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   16334:	2209      	movs	r2, #9
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
   16336:	2312      	movs	r3, #18
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   16338:	a903      	add	r1, sp, #12
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1633a:	4605      	mov	r5, r0
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
   1633c:	f100 070c 	add.w	r7, r0, #12
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   16340:	b360      	cbz	r0, 1639c <attsCheckPendDbHashReadRsp+0x8c>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   16342:	7202      	strb	r2, [r0, #8]
        UINT8_TO_BSTREAM(p, ATT_DATABASE_HASH_LEN + sizeof(uint16_t));
   16344:	7243      	strb	r3, [r0, #9]
        UINT16_TO_BSTREAM(p, pCcb->pPendDbHashRsp->handle);
   16346:	6a23      	ldr	r3, [r4, #32]
   16348:	885b      	ldrh	r3, [r3, #2]
   1634a:	7283      	strb	r3, [r0, #10]
   1634c:	6a23      	ldr	r3, [r4, #32]
   1634e:	885b      	ldrh	r3, [r3, #2]
   16350:	0a1b      	lsrs	r3, r3, #8
   16352:	72c3      	strb	r3, [r0, #11]
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   16354:	6a23      	ldr	r3, [r4, #32]
   16356:	8858      	ldrh	r0, [r3, #2]
   16358:	f000 f9da 	bl	16710 <attsFindByHandle>
   1635c:	4606      	mov	r6, r0
          memcpy(p, pAttr->pValue, *pAttr->pLen);
   1635e:	4638      	mov	r0, r7
        if ((pAttr = attsFindByHandle(pCcb->pPendDbHashRsp->handle, &pGroup)) != NULL)
   16360:	2e00      	cmp	r6, #0
   16362:	d037      	beq.n	163d4 <attsCheckPendDbHashReadRsp+0xc4>
          memcpy(p, pAttr->pValue, *pAttr->pLen);
   16364:	68b3      	ldr	r3, [r6, #8]
   16366:	6871      	ldr	r1, [r6, #4]
   16368:	881a      	ldrh	r2, [r3, #0]
   1636a:	f7f5 fec9 	bl	c100 <memcpy>
          p += *pAttr->pLen;
   1636e:	68b3      	ldr	r3, [r6, #8]
          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
   16370:	8b21      	ldrh	r1, [r4, #24]
          p += *pAttr->pLen;
   16372:	881a      	ldrh	r2, [r3, #0]
   16374:	4417      	add	r7, r2
        p = pBuf + L2C_PAYLOAD_START;
   16376:	f105 0208 	add.w	r2, r5, #8
          L2cDataReq(L2C_CID_ATT, pCcb->handle, p - (pBuf + L2C_PAYLOAD_START), pBuf);
   1637a:	1aba      	subs	r2, r7, r2
   1637c:	462b      	mov	r3, r5
   1637e:	b292      	uxth	r2, r2
   16380:	2004      	movs	r0, #4
   16382:	f004 ff1f 	bl	1b1c4 <L2cDataReq>
      WsfBufFree(pCcb->pPendDbHashRsp);
   16386:	6a20      	ldr	r0, [r4, #32]
   16388:	f001 fc5a 	bl	17c40 <WsfBufFree>
      pCcb->pPendDbHashRsp = NULL;
   1638c:	f8c4 9020 	str.w	r9, [r4, #32]
  for (uint8_t i = 0; i < DM_CONN_MAX; i++)
   16390:	3424      	adds	r4, #36	; 0x24
   16392:	4544      	cmp	r4, r8
   16394:	d1c6      	bne.n	16324 <attsCheckPendDbHashReadRsp+0x14>
}
   16396:	b004      	add	sp, #16
   16398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_RESOURCES);
   1639c:	6a23      	ldr	r3, [r4, #32]
   1639e:	7f21      	ldrb	r1, [r4, #28]
   163a0:	881d      	ldrh	r5, [r3, #0]
   163a2:	9101      	str	r1, [sp, #4]
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   163a4:	200d      	movs	r0, #13
   163a6:	f001 fb4b 	bl	17a40 <attMsgAlloc>
    UINT8_TO_BSTREAM(p, opcode);
   163aa:	f04f 0c08 	mov.w	ip, #8
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   163ae:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   163b0:	9901      	ldr	r1, [sp, #4]
    UINT16_TO_BSTREAM(p, attHandle);
   163b2:	fa25 f70c 	lsr.w	r7, r5, ip
    UINT8_TO_BSTREAM(p, reason);
   163b6:	2611      	movs	r6, #17
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   163b8:	2205      	movs	r2, #5
   163ba:	2004      	movs	r0, #4
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   163bc:	2b00      	cmp	r3, #0
   163be:	d0e2      	beq.n	16386 <attsCheckPendDbHashReadRsp+0x76>
    UINT8_TO_BSTREAM(p, opcode);
   163c0:	f883 c009 	strb.w	ip, [r3, #9]
    UINT16_TO_BSTREAM(p, attHandle);
   163c4:	729d      	strb	r5, [r3, #10]
   163c6:	72df      	strb	r7, [r3, #11]
    UINT8_TO_BSTREAM(p, reason);
   163c8:	731e      	strb	r6, [r3, #12]
    UINT8_TO_BSTREAM(p, ATT_PDU_ERR_RSP);
   163ca:	f883 a008 	strb.w	sl, [r3, #8]
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   163ce:	f004 fef9 	bl	1b1c4 <L2cDataReq>
   163d2:	e7d8      	b.n	16386 <attsCheckPendDbHashReadRsp+0x76>
          attsErrRsp(pCcb->connId, ATT_PDU_READ_TYPE_REQ, pCcb->pPendDbHashRsp->startHandle, ATT_ERR_NOT_FOUND);
   163d4:	6a23      	ldr	r3, [r4, #32]
   163d6:	7f21      	ldrb	r1, [r4, #28]
   163d8:	881d      	ldrh	r5, [r3, #0]
   163da:	9101      	str	r1, [sp, #4]
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   163dc:	200d      	movs	r0, #13
   163de:	f001 fb2f 	bl	17a40 <attMsgAlloc>
    UINT8_TO_BSTREAM(p, opcode);
   163e2:	f04f 0c08 	mov.w	ip, #8
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   163e6:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   163e8:	9901      	ldr	r1, [sp, #4]
    UINT16_TO_BSTREAM(p, attHandle);
   163ea:	fa25 f70c 	lsr.w	r7, r5, ip
    UINT8_TO_BSTREAM(p, reason);
   163ee:	260a      	movs	r6, #10
    L2cDataReq(L2C_CID_ATT, handle, ATT_ERR_RSP_LEN, pBuf);
   163f0:	2205      	movs	r2, #5
   163f2:	2004      	movs	r0, #4
  if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_ERR_RSP_LEN)) != NULL)
   163f4:	2b00      	cmp	r3, #0
   163f6:	d1e3      	bne.n	163c0 <attsCheckPendDbHashReadRsp+0xb0>
   163f8:	e7c5      	b.n	16386 <attsCheckPendDbHashReadRsp+0x76>
   163fa:	bf00      	nop
   163fc:	10006e04 	.word	0x10006e04

00016400 <AttsInit>:
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   16400:	4b07      	ldr	r3, [pc, #28]	; (16420 <AttsInit+0x20>)
  attCb.pServer = &attsFcnIf;
   16402:	4908      	ldr	r1, [pc, #32]	; (16424 <AttsInit+0x24>)
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
   16404:	4808      	ldr	r0, [pc, #32]	; (16428 <AttsInit+0x28>)
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   16406:	2200      	movs	r2, #0
{
   16408:	b410      	push	{r4}
  attsCb.pInd = &attFcnDefault;
   1640a:	4c08      	ldr	r4, [pc, #32]	; (1642c <AttsInit+0x2c>)
   1640c:	609c      	str	r4, [r3, #8]
  WSF_QUEUE_INIT(&attsCb.groupQueue);
   1640e:	e9c3 2200 	strd	r2, r2, [r3]
  attCb.pServer = &attsFcnIf;
   16412:	4a07      	ldr	r2, [pc, #28]	; (16430 <AttsInit+0x30>)
}
   16414:	f85d 4b04 	ldr.w	r4, [sp], #4
  attsCb.signMsgCback = (attMsgHandler_t) attEmptyHandler;
   16418:	60d8      	str	r0, [r3, #12]
  attCb.pServer = &attsFcnIf;
   1641a:	670a      	str	r2, [r1, #112]	; 0x70
}
   1641c:	4770      	bx	lr
   1641e:	bf00      	nop
   16420:	10006de8 	.word	0x10006de8
   16424:	10006e04 	.word	0x10006e04
   16428:	000178a1 	.word	0x000178a1
   1642c:	00025994 	.word	0x00025994
   16430:	00025970 	.word	0x00025970

00016434 <AttsCalculateDbHash>:
{
   16434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  attsGroup_t *pGroup = (attsGroup_t *) attsCb.groupQueue.pHead;
   16438:	4f86      	ldr	r7, [pc, #536]	; (16654 <AttsCalculateDbHash+0x220>)
   1643a:	683d      	ldr	r5, [r7, #0]
{
   1643c:	b087      	sub	sp, #28
  while (pGroup != NULL)
   1643e:	2d00      	cmp	r5, #0
   16440:	f000 8106 	beq.w	16650 <AttsCalculateDbHash+0x21c>
   16444:	f8df a210 	ldr.w	sl, [pc, #528]	; 16658 <AttsCalculateDbHash+0x224>
   16448:	2000      	movs	r0, #0
   1644a:	f89a 1000 	ldrb.w	r1, [sl]
  uint16_t msgLen = 0;
   1644e:	4604      	mov	r4, r0
  switch (uuid)
   16450:	f642 1903 	movw	r9, #10499	; 0x2903
    uint8_t numAttrs = (pGroup->endHandle - pGroup->startHandle) + 1;
   16454:	8a6b      	ldrh	r3, [r5, #18]
   16456:	8a2a      	ldrh	r2, [r5, #16]
   16458:	3301      	adds	r3, #1
   1645a:	1a9b      	subs	r3, r3, r2
    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
   1645c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   16460:	686a      	ldr	r2, [r5, #4]
   16462:	d034      	beq.n	164ce <AttsCalculateDbHash+0x9a>
   16464:	3b01      	subs	r3, #1
   16466:	f102 0c20 	add.w	ip, r2, #32
   1646a:	b2db      	uxtb	r3, r3
   1646c:	3210      	adds	r2, #16
   1646e:	eb0c 1c03 	add.w	ip, ip, r3, lsl #4
  switch (uuid)
   16472:	f642 1805 	movw	r8, #10501	; 0x2905
   16476:	f642 0602 	movw	r6, #10242	; 0x2802
   1647a:	f642 0e03 	movw	lr, #10243	; 0x2803
  if (isAttrCharVal)
   1647e:	2900      	cmp	r1, #0
   16480:	f040 80b6 	bne.w	165f0 <AttsCalculateDbHash+0x1bc>
  BYTES_TO_UINT16(uuid, pAttr->pUuid);
   16484:	f852 3c10 	ldr.w	r3, [r2, #-16]
   16488:	f893 b001 	ldrb.w	fp, [r3, #1]
   1648c:	781b      	ldrb	r3, [r3, #0]
   1648e:	eb03 230b 	add.w	r3, r3, fp, lsl #8
   16492:	b29b      	uxth	r3, r3
  switch (uuid)
   16494:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   16498:	d008      	beq.n	164ac <AttsCalculateDbHash+0x78>
   1649a:	f200 80a2 	bhi.w	165e2 <AttsCalculateDbHash+0x1ae>
   1649e:	42b3      	cmp	r3, r6
   164a0:	f240 809a 	bls.w	165d8 <AttsCalculateDbHash+0x1a4>
   164a4:	4573      	cmp	r3, lr
   164a6:	d10f      	bne.n	164c8 <AttsCalculateDbHash+0x94>
   164a8:	2001      	movs	r0, #1
   164aa:	4601      	mov	r1, r0
      length += *pAttr->pLen;
   164ac:	f852 3c08 	ldr.w	r3, [r2, #-8]
   164b0:	881b      	ldrh	r3, [r3, #0]
   164b2:	3302      	adds	r3, #2
   164b4:	b29b      	uxth	r3, r3
      if (pAttr->settings & ATTS_SET_UUID_128)
   164b6:	f812 bc02 	ldrb.w	fp, [r2, #-2]
   164ba:	f01b 0f01 	tst.w	fp, #1
      msgLen += attsIsHashableAttr(pAttr);
   164be:	bf14      	ite	ne
   164c0:	3410      	addne	r4, #16
   164c2:	3402      	addeq	r4, #2
   164c4:	441c      	add	r4, r3
   164c6:	b2a4      	uxth	r4, r4
    for (attsAttr_t *pAttr = pGroup->pAttr; numAttrs != 0; numAttrs--, pAttr++)
   164c8:	3210      	adds	r2, #16
   164ca:	4594      	cmp	ip, r2
   164cc:	d1d7      	bne.n	1647e <AttsCalculateDbHash+0x4a>
    pGroup = pGroup->pNext;
   164ce:	682d      	ldr	r5, [r5, #0]
  while (pGroup != NULL)
   164d0:	2d00      	cmp	r5, #0
   164d2:	d1bf      	bne.n	16454 <AttsCalculateDbHash+0x20>
   164d4:	b108      	cbz	r0, 164da <AttsCalculateDbHash+0xa6>
   164d6:	f88a 1000 	strb.w	r1, [sl]
  if ((pMsg = WsfBufAlloc(msgLen)) != NULL)
   164da:	4620      	mov	r0, r4
   164dc:	f001 fb80 	bl	17be0 <WsfBufAlloc>
   164e0:	4680      	mov	r8, r0
   164e2:	2800      	cmp	r0, #0
   164e4:	d075      	beq.n	165d2 <AttsCalculateDbHash+0x19e>
    pGroup = (attsGroup_t *)attsCb.groupQueue.pHead;
   164e6:	f8d7 9000 	ldr.w	r9, [r7]
    uint8_t hashingKey[16] = { 0, };
   164ea:	2300      	movs	r3, #0
   164ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
   164f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    while (pGroup)
   164f4:	f1b9 0f00 	cmp.w	r9, #0
   164f8:	d05f      	beq.n	165ba <AttsCalculateDbHash+0x186>
   164fa:	4f57      	ldr	r7, [pc, #348]	; (16658 <AttsCalculateDbHash+0x224>)
   164fc:	4602      	mov	r2, r0
      uint16_t attHandle = pGroup->startHandle;
   164fe:	f8b9 5010 	ldrh.w	r5, [r9, #16]
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   16502:	f8b9 1012 	ldrh.w	r1, [r9, #18]
   16506:	f8d9 6004 	ldr.w	r6, [r9, #4]
   1650a:	428d      	cmp	r5, r1
   1650c:	d850      	bhi.n	165b0 <AttsCalculateDbHash+0x17c>
   1650e:	3610      	adds	r6, #16
  switch (uuid)
   16510:	f642 1a03 	movw	sl, #10499	; 0x2903
   16514:	e041      	b.n	1659a <AttsCalculateDbHash+0x166>
  BYTES_TO_UINT16(uuid, pAttr->pUuid);
   16516:	f856 0c10 	ldr.w	r0, [r6, #-16]
   1651a:	f890 c001 	ldrb.w	ip, [r0, #1]
   1651e:	7803      	ldrb	r3, [r0, #0]
   16520:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   16524:	b29b      	uxth	r3, r3
  switch (uuid)
   16526:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1652a:	d00a      	beq.n	16542 <AttsCalculateDbHash+0x10e>
   1652c:	d867      	bhi.n	165fe <AttsCalculateDbHash+0x1ca>
   1652e:	f642 0002 	movw	r0, #10242	; 0x2802
   16532:	4283      	cmp	r3, r0
   16534:	d95f      	bls.n	165f6 <AttsCalculateDbHash+0x1c2>
   16536:	f642 0003 	movw	r0, #10243	; 0x2803
   1653a:	4283      	cmp	r3, r0
   1653c:	d127      	bne.n	1658e <AttsCalculateDbHash+0x15a>
      isAttrCharVal = TRUE;
   1653e:	2301      	movs	r3, #1
   16540:	703b      	strb	r3, [r7, #0]
      length += *pAttr->pLen;
   16542:	f856 3c08 	ldr.w	r3, [r6, #-8]
   16546:	881b      	ldrh	r3, [r3, #0]
   16548:	3302      	adds	r3, #2
   1654a:	b29b      	uxth	r3, r3
      if (pAttr->settings & ATTS_SET_UUID_128)
   1654c:	f816 0c02 	ldrb.w	r0, [r6, #-2]
   16550:	07c0      	lsls	r0, r0, #31
        length += 16;
   16552:	bf4c      	ite	mi
   16554:	3310      	addmi	r3, #16
        length += 2;
   16556:	3302      	addpl	r3, #2
   16558:	b298      	uxth	r0, r3
        if (valLen)
   1655a:	b1c0      	cbz	r0, 1658e <AttsCalculateDbHash+0x15a>
          UINT16_TO_BSTREAM(p, attHandle);
   1655c:	0a2b      	lsrs	r3, r5, #8
   1655e:	7015      	strb	r5, [r2, #0]
   16560:	7053      	strb	r3, [r2, #1]
          if (pAttr->settings & ATTS_SET_UUID_128)
   16562:	f816 3c02 	ldrb.w	r3, [r6, #-2]
   16566:	07db      	lsls	r3, r3, #31
   16568:	d45e      	bmi.n	16628 <AttsCalculateDbHash+0x1f4>
            BYTES_TO_UINT16(uuid, pAttr->pUuid);
   1656a:	f856 1c10 	ldr.w	r1, [r6, #-16]
   1656e:	f891 c001 	ldrb.w	ip, [r1, #1]
   16572:	780b      	ldrb	r3, [r1, #0]
   16574:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   16578:	b29b      	uxth	r3, r3
            UINT16_TO_BSTREAM(p,uuid);
   1657a:	0a19      	lsrs	r1, r3, #8
   1657c:	7093      	strb	r3, [r2, #2]
   1657e:	70d1      	strb	r1, [r2, #3]
   16580:	1d13      	adds	r3, r2, #4
   16582:	2204      	movs	r2, #4
          if (valLen - (uuidLen + 2))
   16584:	4290      	cmp	r0, r2
   16586:	d142      	bne.n	1660e <AttsCalculateDbHash+0x1da>
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   16588:	f8b9 1012 	ldrh.w	r1, [r9, #18]
   1658c:	461a      	mov	r2, r3
   1658e:	3501      	adds	r5, #1
   16590:	b2ad      	uxth	r5, r5
   16592:	428d      	cmp	r5, r1
   16594:	f106 0610 	add.w	r6, r6, #16
   16598:	d80a      	bhi.n	165b0 <AttsCalculateDbHash+0x17c>
  if (isAttrCharVal)
   1659a:	783b      	ldrb	r3, [r7, #0]
   1659c:	2b00      	cmp	r3, #0
   1659e:	d0ba      	beq.n	16516 <AttsCalculateDbHash+0xe2>
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   165a0:	3501      	adds	r5, #1
   165a2:	b2ad      	uxth	r5, r5
    isAttrCharVal = FALSE;
   165a4:	2300      	movs	r3, #0
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   165a6:	428d      	cmp	r5, r1
    isAttrCharVal = FALSE;
   165a8:	703b      	strb	r3, [r7, #0]
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   165aa:	f106 0610 	add.w	r6, r6, #16
   165ae:	d9f4      	bls.n	1659a <AttsCalculateDbHash+0x166>
      pGroup = pGroup->pNext;
   165b0:	f8d9 9000 	ldr.w	r9, [r9]
    while (pGroup)
   165b4:	f1b9 0f00 	cmp.w	r9, #0
   165b8:	d1a1      	bne.n	164fe <AttsCalculateDbHash+0xca>
  return SecCmac(pKey, pMsg, msgLen, attCb.handlerId, 0, ATTS_MSG_DBH_CMAC_CMPL);
   165ba:	4b28      	ldr	r3, [pc, #160]	; (1665c <AttsCalculateDbHash+0x228>)
   165bc:	2124      	movs	r1, #36	; 0x24
   165be:	2200      	movs	r2, #0
   165c0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   165c4:	a802      	add	r0, sp, #8
   165c6:	e9cd 2100 	strd	r2, r1, [sp]
   165ca:	4622      	mov	r2, r4
   165cc:	4641      	mov	r1, r8
   165ce:	f004 fbd7 	bl	1ad80 <SecCmac>
}
   165d2:	b007      	add	sp, #28
   165d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (uuid)
   165d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
   165dc:	f4ff af74 	bcc.w	164c8 <AttsCalculateDbHash+0x94>
   165e0:	e764      	b.n	164ac <AttsCalculateDbHash+0x78>
   165e2:	454b      	cmp	r3, r9
   165e4:	d902      	bls.n	165ec <AttsCalculateDbHash+0x1b8>
   165e6:	4543      	cmp	r3, r8
   165e8:	f47f af6e 	bne.w	164c8 <AttsCalculateDbHash+0x94>
   165ec:	2302      	movs	r3, #2
   165ee:	e762      	b.n	164b6 <AttsCalculateDbHash+0x82>
   165f0:	2001      	movs	r0, #1
    isAttrCharVal = FALSE;
   165f2:	2100      	movs	r1, #0
   165f4:	e768      	b.n	164c8 <AttsCalculateDbHash+0x94>
  switch (uuid)
   165f6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
   165fa:	d3c8      	bcc.n	1658e <AttsCalculateDbHash+0x15a>
   165fc:	e7a1      	b.n	16542 <AttsCalculateDbHash+0x10e>
   165fe:	4553      	cmp	r3, sl
   16600:	d903      	bls.n	1660a <AttsCalculateDbHash+0x1d6>
   16602:	f642 1005 	movw	r0, #10501	; 0x2905
   16606:	4283      	cmp	r3, r0
   16608:	d1c1      	bne.n	1658e <AttsCalculateDbHash+0x15a>
   1660a:	2302      	movs	r3, #2
   1660c:	e79e      	b.n	1654c <AttsCalculateDbHash+0x118>
            memcpy(p, pAttr->pValue, *pAttr->pLen);
   1660e:	e956 1203 	ldrd	r1, r2, [r6, #-12]
   16612:	4618      	mov	r0, r3
   16614:	8812      	ldrh	r2, [r2, #0]
   16616:	f7f5 fd73 	bl	c100 <memcpy>
            p += *pAttr->pLen;
   1661a:	f856 2c08 	ldr.w	r2, [r6, #-8]
      for (attsAttr_t *pAttr = pGroup->pAttr; attHandle <= pGroup->endHandle; attHandle++, pAttr++)
   1661e:	f8b9 1012 	ldrh.w	r1, [r9, #18]
            p += *pAttr->pLen;
   16622:	8812      	ldrh	r2, [r2, #0]
   16624:	4402      	add	r2, r0
   16626:	e7b2      	b.n	1658e <AttsCalculateDbHash+0x15a>
            memcpy(p, pAttr->pUuid, 16);
   16628:	f856 3c10 	ldr.w	r3, [r6, #-16]
   1662c:	f8d3 e000 	ldr.w	lr, [r3]
   16630:	f8d3 c004 	ldr.w	ip, [r3, #4]
   16634:	6899      	ldr	r1, [r3, #8]
   16636:	68db      	ldr	r3, [r3, #12]
   16638:	f8c2 300e 	str.w	r3, [r2, #14]
   1663c:	f8c2 e002 	str.w	lr, [r2, #2]
   16640:	f8c2 c006 	str.w	ip, [r2, #6]
   16644:	f8c2 100a 	str.w	r1, [r2, #10]
            p += 16;
   16648:	f102 0312 	add.w	r3, r2, #18
            uuidLen = 16;
   1664c:	2212      	movs	r2, #18
   1664e:	e799      	b.n	16584 <AttsCalculateDbHash+0x150>
  uint16_t msgLen = 0;
   16650:	462c      	mov	r4, r5
   16652:	e742      	b.n	164da <AttsCalculateDbHash+0xa6>
   16654:	10006de8 	.word	0x10006de8
   16658:	10006e00 	.word	0x10006e00
   1665c:	10006e04 	.word	0x10006e04

00016660 <AttsAddGroup>:
{
   16660:	b538      	push	{r3, r4, r5, lr}
   16662:	4605      	mov	r5, r0
  WsfTaskLock();
   16664:	f001 fb5e 	bl	17d24 <WsfTaskLock>
  pElem = (attsGroup_t *) attsCb.groupQueue.pHead;
   16668:	4b0d      	ldr	r3, [pc, #52]	; (166a0 <AttsAddGroup+0x40>)
   1666a:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
   1666c:	b1ab      	cbz	r3, 1669a <AttsAddGroup+0x3a>
    if (pGroup->startHandle < pElem->startHandle)
   1666e:	f8b5 c010 	ldrh.w	ip, [r5, #16]
  attsGroup_t   *pPrev = NULL;
   16672:	2200      	movs	r2, #0
   16674:	e003      	b.n	1667e <AttsAddGroup+0x1e>
    pElem = pElem->pNext;
   16676:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
   16678:	461a      	mov	r2, r3
   1667a:	b11c      	cbz	r4, 16684 <AttsAddGroup+0x24>
   1667c:	4623      	mov	r3, r4
    if (pGroup->startHandle < pElem->startHandle)
   1667e:	8a1c      	ldrh	r4, [r3, #16]
   16680:	4564      	cmp	r4, ip
   16682:	d9f8      	bls.n	16676 <AttsAddGroup+0x16>
  WsfQueueInsert(&attsCb.groupQueue, pGroup, pPrev);
   16684:	4629      	mov	r1, r5
   16686:	4806      	ldr	r0, [pc, #24]	; (166a0 <AttsAddGroup+0x40>)
   16688:	f001 fcd2 	bl	18030 <WsfQueueInsert>
  attsCsfSetHashUpdateStatus(TRUE);
   1668c:	2001      	movs	r0, #1
   1668e:	f7ff faf7 	bl	15c80 <attsCsfSetHashUpdateStatus>
}
   16692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskUnlock();
   16696:	f001 bb4f 	b.w	17d38 <WsfTaskUnlock>
  attsGroup_t   *pPrev = NULL;
   1669a:	461a      	mov	r2, r3
   1669c:	e7f2      	b.n	16684 <AttsAddGroup+0x24>
   1669e:	bf00      	nop
   166a0:	10006de8 	.word	0x10006de8

000166a4 <attsUuidCmp>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuidCmp(attsAttr_t *pAttr, uint8_t uuidLen, uint8_t *pUuid)
{
   166a4:	b508      	push	{r3, lr}
  /* if both uuids are the same length */
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   166a6:	f890 c00e 	ldrb.w	ip, [r0, #14]
   166aa:	f01c 0f01 	tst.w	ip, #1
{
   166ae:	4613      	mov	r3, r2
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   166b0:	d007      	beq.n	166c2 <attsUuidCmp+0x1e>
      (((pAttr->settings & ATTS_SET_UUID_128) != 0) &&  (uuidLen == ATT_128_UUID_LEN)))
   166b2:	2910      	cmp	r1, #16
   166b4:	d00f      	beq.n	166d6 <attsUuidCmp+0x32>
  {
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
  }
  else
  {
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
   166b6:	6801      	ldr	r1, [r0, #0]
   166b8:	4618      	mov	r0, r3
  }
}
   166ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return attUuidCmp16to128(pUuid, pAttr->pUuid);
   166be:	f001 b96f 	b.w	179a0 <attUuidCmp16to128>
  if ((((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_16_UUID_LEN)) ||
   166c2:	2902      	cmp	r1, #2
   166c4:	d007      	beq.n	166d6 <attsUuidCmp+0x32>
  else if (((pAttr->settings & ATTS_SET_UUID_128) == 0) && (uuidLen == ATT_128_UUID_LEN))
   166c6:	2910      	cmp	r1, #16
   166c8:	d1f5      	bne.n	166b6 <attsUuidCmp+0x12>
}
   166ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return attUuidCmp16to128(pAttr->pUuid, pUuid);
   166ce:	6800      	ldr	r0, [r0, #0]
   166d0:	4611      	mov	r1, r2
   166d2:	f001 b965 	b.w	179a0 <attUuidCmp16to128>
    return (memcmp(pAttr->pUuid, pUuid, uuidLen) == 0);
   166d6:	460a      	mov	r2, r1
   166d8:	6800      	ldr	r0, [r0, #0]
   166da:	4619      	mov	r1, r3
   166dc:	f00a fd18 	bl	21110 <memcmp>
   166e0:	fab0 f080 	clz	r0, r0
   166e4:	0940      	lsrs	r0, r0, #5
}
   166e6:	bd08      	pop	{r3, pc}

000166e8 <attsUuid16Cmp>:
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attsUuid16Cmp(uint8_t *pUuid16, uint8_t uuidLen, uint8_t *pUuid)
{
  if (uuidLen == ATT_16_UUID_LEN)
   166e8:	2902      	cmp	r1, #2
{
   166ea:	4603      	mov	r3, r0
  if (uuidLen == ATT_16_UUID_LEN)
   166ec:	d105      	bne.n	166fa <attsUuid16Cmp+0x12>
  {
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
   166ee:	7800      	ldrb	r0, [r0, #0]
   166f0:	7811      	ldrb	r1, [r2, #0]
   166f2:	4288      	cmp	r0, r1
   166f4:	d004      	beq.n	16700 <attsUuid16Cmp+0x18>
   166f6:	2000      	movs	r0, #0
  }
  else
  {
    return attUuidCmp16to128(pUuid16, pUuid);
  }
}
   166f8:	4770      	bx	lr
    return attUuidCmp16to128(pUuid16, pUuid);
   166fa:	4611      	mov	r1, r2
   166fc:	f001 b950 	b.w	179a0 <attUuidCmp16to128>
    return ((pUuid16[0] == pUuid[0]) && (pUuid16[1] == pUuid[1]));
   16700:	7858      	ldrb	r0, [r3, #1]
   16702:	7853      	ldrb	r3, [r2, #1]
   16704:	1ac0      	subs	r0, r0, r3
   16706:	fab0 f080 	clz	r0, r0
   1670a:	0940      	lsrs	r0, r0, #5
   1670c:	4770      	bx	lr
   1670e:	bf00      	nop

00016710 <attsFindByHandle>:
attsAttr_t *attsFindByHandle(uint16_t handle, attsGroup_t **pAttrGroup)
{
  attsGroup_t   *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16710:	4b0a      	ldr	r3, [pc, #40]	; (1673c <attsFindByHandle+0x2c>)
   16712:	681b      	ldr	r3, [r3, #0]
   16714:	b183      	cbz	r3, 16738 <attsFindByHandle+0x28>
  {
    /*  if start handle within handle range of group */
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
   16716:	8a1a      	ldrh	r2, [r3, #16]
   16718:	4282      	cmp	r2, r0
   1671a:	d8fa      	bhi.n	16712 <attsFindByHandle+0x2>
   1671c:	f8b3 c012 	ldrh.w	ip, [r3, #18]
   16720:	4584      	cmp	ip, r0
   16722:	d3f6      	bcc.n	16712 <attsFindByHandle+0x2>
{
   16724:	b410      	push	{r4}
    {
      /* index by handle into attribute array to return attribute */
      *pAttrGroup = pGroup;
      return &pGroup->pAttr[handle - pGroup->startHandle];
   16726:	685c      	ldr	r4, [r3, #4]
      *pAttrGroup = pGroup;
   16728:	600b      	str	r3, [r1, #0]
      return &pGroup->pAttr[handle - pGroup->startHandle];
   1672a:	1a80      	subs	r0, r0, r2
   1672c:	eb04 1300 	add.w	r3, r4, r0, lsl #4
    }
  }

  /* handle not found */
  return NULL;
}
   16730:	4618      	mov	r0, r3
   16732:	f85d 4b04 	ldr.w	r4, [sp], #4
   16736:	4770      	bx	lr
   16738:	4618      	mov	r0, r3
   1673a:	4770      	bx	lr
   1673c:	10006de8 	.word	0x10006de8

00016740 <attsPermissions>:
uint8_t attsPermissions(dmConnId_t connId, uint8_t permit, uint16_t handle, uint8_t permissions)
{
  uint8_t secLevel;

  /* verify read or write permissions */
  if (!(permissions & permit))
   16740:	420b      	tst	r3, r1
{
   16742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16746:	460d      	mov	r5, r1
  if (!(permissions & permit))
   16748:	d01f      	beq.n	1678a <attsPermissions+0x4a>
  {
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
  }

  /* convert write permissions to read permissions for easier masking */
  if (permit == ATTS_PERMIT_WRITE)
   1674a:	2910      	cmp	r1, #16
   1674c:	461c      	mov	r4, r3
  {
    permissions >>= 4;
   1674e:	bf08      	it	eq
   16750:	091c      	lsreq	r4, r3, #4
  }

  /* if no security requirements return quickly */
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
   16752:	f014 0f0e 	tst.w	r4, #14
   16756:	4607      	mov	r7, r0
   16758:	4616      	mov	r6, r2
   1675a:	d102      	bne.n	16762 <attsPermissions+0x22>
  {
    return ATT_SUCCESS;
   1675c:	2000      	movs	r0, #0
  }
  else
  {
    return ATT_SUCCESS;
  }
}
   1675e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  secLevel = DmConnSecLevel(connId);
   16762:	f005 fd13 	bl	1c18c <DmConnSecLevel>
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
   16766:	0722      	lsls	r2, r4, #28
   16768:	d500      	bpl.n	1676c <attsPermissions+0x2c>
   1676a:	b1b0      	cbz	r0, 1679a <attsPermissions+0x5a>
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
   1676c:	f004 030a 	and.w	r3, r4, #10
   16770:	2b0a      	cmp	r3, #10
   16772:	d010      	beq.n	16796 <attsPermissions+0x56>
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
   16774:	0763      	lsls	r3, r4, #29
   16776:	d5f1      	bpl.n	1675c <attsPermissions+0x1c>
    if (attsCb.authorCback == NULL)
   16778:	4b0a      	ldr	r3, [pc, #40]	; (167a4 <attsPermissions+0x64>)
   1677a:	691b      	ldr	r3, [r3, #16]
   1677c:	b17b      	cbz	r3, 1679e <attsPermissions+0x5e>
      return (*attsCb.authorCback)(connId, permit, handle);
   1677e:	4632      	mov	r2, r6
   16780:	4629      	mov	r1, r5
   16782:	4638      	mov	r0, r7
}
   16784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return (*attsCb.authorCback)(connId, permit, handle);
   16788:	4718      	bx	r3
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
   1678a:	2901      	cmp	r1, #1
   1678c:	bf0c      	ite	eq
   1678e:	2002      	moveq	r0, #2
   16790:	2003      	movne	r0, #3
}
   16792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
   16796:	2801      	cmp	r0, #1
   16798:	d8ec      	bhi.n	16774 <attsPermissions+0x34>
    return ATT_ERR_AUTH;
   1679a:	2005      	movs	r0, #5
   1679c:	e7df      	b.n	1675e <attsPermissions+0x1e>
      return ATT_ERR_AUTHOR;
   1679e:	2008      	movs	r0, #8
   167a0:	e7dd      	b.n	1675e <attsPermissions+0x1e>
   167a2:	bf00      	nop
   167a4:	10006de8 	.word	0x10006de8

000167a8 <attsProcMtuReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcMtuReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   167a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t   *pRsp;

  p = pPacket + L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* parse mtu */
  BYTES_TO_UINT16(mtu, p);
   167aa:	7a93      	ldrb	r3, [r2, #10]
   167ac:	7a54      	ldrb	r4, [r2, #9]
  {
    mtu = ATT_DEFAULT_MTU;
  }

  /* get desired MTU */
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   167ae:	4e15      	ldr	r6, [pc, #84]	; (16804 <attsProcMtuReq+0x5c>)
  BYTES_TO_UINT16(mtu, p);
   167b0:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   167b4:	b2a4      	uxth	r4, r4
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   167b6:	6833      	ldr	r3, [r6, #0]
   167b8:	2c17      	cmp	r4, #23
   167ba:	889f      	ldrh	r7, [r3, #4]
   167bc:	bf38      	it	cc
   167be:	2417      	movcc	r4, #23
{
   167c0:	4605      	mov	r5, r0
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   167c2:	f7fb fc35 	bl	12030 <HciGetMaxRxAclLen>
   167c6:	3804      	subs	r0, #4
   167c8:	4287      	cmp	r7, r0
   167ca:	da16      	bge.n	167fa <attsProcMtuReq+0x52>
   167cc:	6833      	ldr	r3, [r6, #0]
   167ce:	889e      	ldrh	r6, [r3, #4]

  /* send response */
  if ((pRsp = attMsgAlloc(L2C_PAYLOAD_START + ATT_MTU_RSP_LEN)) != NULL)
   167d0:	200b      	movs	r0, #11
   167d2:	f001 f935 	bl	17a40 <attMsgAlloc>
   167d6:	4603      	mov	r3, r0
   167d8:	b140      	cbz	r0, 167ec <attsProcMtuReq+0x44>
  {
    p = pRsp + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
    UINT16_TO_BSTREAM(p, localMtu);
   167da:	0a31      	lsrs	r1, r6, #8
    UINT8_TO_BSTREAM(p, ATT_PDU_MTU_RSP);
   167dc:	2203      	movs	r2, #3
   167de:	7202      	strb	r2, [r0, #8]
    UINT16_TO_BSTREAM(p, localMtu);
   167e0:	7246      	strb	r6, [r0, #9]
   167e2:	7281      	strb	r1, [r0, #10]

    L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_MTU_RSP_LEN, pRsp);
   167e4:	8b29      	ldrh	r1, [r5, #24]
   167e6:	2004      	movs	r0, #4
   167e8:	f004 fcec 	bl	1b1c4 <L2cDataReq>
  }

  /* set mtu for the connection */
  attSetMtu(pCcb, mtu, localMtu);
   167ec:	4632      	mov	r2, r6
   167ee:	4621      	mov	r1, r4
   167f0:	4628      	mov	r0, r5
}
   167f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  attSetMtu(pCcb, mtu, localMtu);
   167f6:	f001 b8e5 	b.w	179c4 <attSetMtu>
  localMtu = WSF_MIN(pAttCfg->mtu, (HciGetMaxRxAclLen() - L2C_HDR_LEN));
   167fa:	f7fb fc19 	bl	12030 <HciGetMaxRxAclLen>
   167fe:	3804      	subs	r0, #4
   16800:	b286      	uxth	r6, r0
   16802:	e7e5      	b.n	167d0 <attsProcMtuReq+0x28>
   16804:	10002e50 	.word	0x10002e50

00016808 <attsProcFindInfoReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindInfoReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   16808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t    handle;
  uint8_t     err = ATT_SUCCESS;

  /* parse handles */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
   1680c:	7a93      	ldrb	r3, [r2, #10]
   1680e:	7a56      	ldrb	r6, [r2, #9]
   16810:	eb06 2603 	add.w	r6, r6, r3, lsl #8
   16814:	b2b6      	uxth	r6, r6
{
   16816:	4607      	mov	r7, r0
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   16818:	b136      	cbz	r6, 16828 <attsProcFindInfoReq+0x20>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   1681a:	7b13      	ldrb	r3, [r2, #12]
   1681c:	7ad5      	ldrb	r5, [r2, #11]
   1681e:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   16822:	b2ad      	uxth	r5, r5
  if ((startHandle == 0) || (startHandle > endHandle))
   16824:	42ae      	cmp	r6, r5
   16826:	d90a      	bls.n	1683e <attsProcFindInfoReq+0x36>
      err = ATT_ERR_RESOURCES;
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   16828:	4638      	mov	r0, r7
   1682a:	f7ff fceb 	bl	16204 <attsDiscBusy>
    err = ATT_ERR_HANDLE;
   1682e:	2301      	movs	r3, #1
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
   16830:	8b38      	ldrh	r0, [r7, #24]
   16832:	4632      	mov	r2, r6
   16834:	2104      	movs	r1, #4
  }
}
   16836:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_INFO_REQ, startHandle, err);
   1683a:	f7ff bcb9 	b.w	161b0 <attsErrRsp>
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1683e:	8b40      	ldrh	r0, [r0, #26]
   16840:	3008      	adds	r0, #8
   16842:	b280      	uxth	r0, r0
   16844:	f001 f8fc 	bl	17a40 <attMsgAlloc>
   16848:	4680      	mov	r8, r0
   1684a:	2800      	cmp	r0, #0
   1684c:	d05a      	beq.n	16904 <attsProcFindInfoReq+0xfc>
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_INFO_RSP);
   1684e:	f240 1305 	movw	r3, #261	; 0x105
   16852:	8103      	strh	r3, [r0, #8]
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   16854:	f100 030e 	add.w	r3, r0, #14
   16858:	4842      	ldr	r0, [pc, #264]	; (16964 <attsProcFindInfoReq+0x15c>)
   1685a:	4634      	mov	r4, r6
        if (handle == ATT_HANDLE_MAX)
   1685c:	f64f 7eff 	movw	lr, #65535	; 0xffff
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16860:	6801      	ldr	r1, [r0, #0]
   16862:	f1a3 0904 	sub.w	r9, r3, #4
   16866:	b161      	cbz	r1, 16882 <attsProcFindInfoReq+0x7a>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   16868:	f8b1 c010 	ldrh.w	ip, [r1, #16]
   1686c:	45a4      	cmp	ip, r4
   1686e:	d902      	bls.n	16876 <attsProcFindInfoReq+0x6e>
   16870:	4565      	cmp	r5, ip
   16872:	d303      	bcc.n	1687c <attsProcFindInfoReq+0x74>
   16874:	4664      	mov	r4, ip
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16876:	8a4a      	ldrh	r2, [r1, #18]
   16878:	42a2      	cmp	r2, r4
   1687a:	d215      	bcs.n	168a8 <attsProcFindInfoReq+0xa0>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1687c:	6809      	ldr	r1, [r1, #0]
   1687e:	2900      	cmp	r1, #0
   16880:	d1f2      	bne.n	16868 <attsProcFindInfoReq+0x60>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   16882:	f108 020a 	add.w	r2, r8, #10
   16886:	4591      	cmp	r9, r2
   16888:	d063      	beq.n	16952 <attsProcFindInfoReq+0x14a>
  attsDiscBusy(pCcb);
   1688a:	4638      	mov	r0, r7
   1688c:	f7ff fcba 	bl	16204 <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   16890:	f108 0208 	add.w	r2, r8, #8
   16894:	eba9 0202 	sub.w	r2, r9, r2
   16898:	8b39      	ldrh	r1, [r7, #24]
   1689a:	4643      	mov	r3, r8
   1689c:	b292      	uxth	r2, r2
}
   1689e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   168a2:	2004      	movs	r0, #4
   168a4:	f004 bc8e 	b.w	1b1c4 <L2cDataReq>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   168a8:	6849      	ldr	r1, [r1, #4]
   168aa:	eba4 0c0c 	sub.w	ip, r4, ip
   168ae:	ea4f 1a0c 	mov.w	sl, ip, lsl #4
   168b2:	eb01 1c0c 	add.w	ip, r1, ip, lsl #4
      while ((handle = attsFindInRange(handle, endHandle, &pAttr)) != ATT_HANDLE_NONE)
   168b6:	2c00      	cmp	r4, #0
   168b8:	d0e3      	beq.n	16882 <attsProcFindInfoReq+0x7a>
        if (pAttr->settings & ATTS_SET_UUID_128)
   168ba:	f89c 200e 	ldrb.w	r2, [ip, #14]
   168be:	07d2      	lsls	r2, r2, #31
   168c0:	d429      	bmi.n	16916 <attsProcFindInfoReq+0x10e>
              (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   168c2:	8b7a      	ldrh	r2, [r7, #26]
   168c4:	3208      	adds	r2, #8
   168c6:	4442      	add	r2, r8
          if ((p + ATT_16_UUID_LEN + sizeof(uint16_t)) <=
   168c8:	4293      	cmp	r3, r2
   168ca:	469c      	mov	ip, r3
   168cc:	d8d9      	bhi.n	16882 <attsProcFindInfoReq+0x7a>
            UINT16_TO_BSTREAM(p, handle);
   168ce:	0a22      	lsrs	r2, r4, #8
   168d0:	f803 4c04 	strb.w	r4, [r3, #-4]
   168d4:	f803 2c03 	strb.w	r2, [r3, #-3]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[0]);
   168d8:	f851 200a 	ldr.w	r2, [r1, sl]
   168dc:	7812      	ldrb	r2, [r2, #0]
   168de:	f803 2c02 	strb.w	r2, [r3, #-2]
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
   168e2:	f851 200a 	ldr.w	r2, [r1, sl]
        if (handle == ATT_HANDLE_MAX)
   168e6:	4574      	cmp	r4, lr
            UINT8_TO_BSTREAM(p, pAttr->pUuid[1]);
   168e8:	7852      	ldrb	r2, [r2, #1]
   168ea:	f803 2c01 	strb.w	r2, [r3, #-1]
        if (handle == ATT_HANDLE_MAX)
   168ee:	d00e      	beq.n	1690e <attsProcFindInfoReq+0x106>
        if (++handle > endHandle)
   168f0:	3401      	adds	r4, #1
   168f2:	b2a4      	uxth	r4, r4
   168f4:	42a5      	cmp	r5, r4
   168f6:	f103 0304 	add.w	r3, r3, #4
   168fa:	d2b1      	bcs.n	16860 <attsProcFindInfoReq+0x58>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   168fc:	f108 020a 	add.w	r2, r8, #10
   16900:	46e1      	mov	r9, ip
   16902:	e7c0      	b.n	16886 <attsProcFindInfoReq+0x7e>
  attsDiscBusy(pCcb);
   16904:	4638      	mov	r0, r7
   16906:	f7ff fc7d 	bl	16204 <attsDiscBusy>
      err = ATT_ERR_RESOURCES;
   1690a:	2311      	movs	r3, #17
   1690c:	e790      	b.n	16830 <attsProcFindInfoReq+0x28>
      if (p == (pBuf + L2C_PAYLOAD_START + 2))
   1690e:	f108 020a 	add.w	r2, r8, #10
   16912:	4699      	mov	r9, r3
   16914:	e7b7      	b.n	16886 <attsProcFindInfoReq+0x7e>
          if (p == (pBuf + L2C_PAYLOAD_START + 2))
   16916:	f108 030a 	add.w	r3, r8, #10
   1691a:	4599      	cmp	r9, r3
   1691c:	d1b5      	bne.n	1688a <attsProcFindInfoReq+0x82>
            UINT16_TO_BSTREAM(p, handle);
   1691e:	f889 4000 	strb.w	r4, [r9]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
   16922:	2302      	movs	r3, #2
            UINT16_TO_BSTREAM(p, handle);
   16924:	0a24      	lsrs	r4, r4, #8
   16926:	f889 4001 	strb.w	r4, [r9, #1]
            UINT8_TO_BSTREAM(p, ATT_FIND_HANDLE_128_UUID);
   1692a:	f809 3c01 	strb.w	r3, [r9, #-1]
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
   1692e:	f8dc 3000 	ldr.w	r3, [ip]
   16932:	681c      	ldr	r4, [r3, #0]
   16934:	6858      	ldr	r0, [r3, #4]
   16936:	6899      	ldr	r1, [r3, #8]
   16938:	68db      	ldr	r3, [r3, #12]
   1693a:	f8c8 3018 	str.w	r3, [r8, #24]
            p += ATT_128_UUID_LEN;
   1693e:	464a      	mov	r2, r9
            memcpy(p, pAttr->pUuid, ATT_128_UUID_LEN);
   16940:	f8c8 400c 	str.w	r4, [r8, #12]
   16944:	f8c8 0010 	str.w	r0, [r8, #16]
   16948:	f8c8 1014 	str.w	r1, [r8, #20]
            p += ATT_128_UUID_LEN;
   1694c:	f108 091c 	add.w	r9, r8, #28
   16950:	e799      	b.n	16886 <attsProcFindInfoReq+0x7e>
        WsfMsgFree(pBuf);
   16952:	4640      	mov	r0, r8
   16954:	f001 f9ac 	bl	17cb0 <WsfMsgFree>
  attsDiscBusy(pCcb);
   16958:	4638      	mov	r0, r7
   1695a:	f7ff fc53 	bl	16204 <attsDiscBusy>
        err = ATT_ERR_NOT_FOUND;
   1695e:	230a      	movs	r3, #10
   16960:	e766      	b.n	16830 <attsProcFindInfoReq+0x28>
   16962:	bf00      	nop
   16964:	10006de8 	.word	0x10006de8

00016968 <attsProcReadReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   16968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1696c:	4f46      	ldr	r7, [pc, #280]	; (16a88 <attsProcReadReq+0x120>)
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;

  /* parse handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
   1696e:	7a93      	ldrb	r3, [r2, #10]
   16970:	7a55      	ldrb	r5, [r2, #9]
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16972:	683c      	ldr	r4, [r7, #0]
  BSTREAM_TO_UINT16(handle, pPacket);
   16974:	eb05 2503 	add.w	r5, r5, r3, lsl #8
{
   16978:	b082      	sub	sp, #8
   1697a:	4680      	mov	r8, r0
  BSTREAM_TO_UINT16(handle, pPacket);
   1697c:	b2ad      	uxth	r5, r5
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1697e:	b144      	cbz	r4, 16992 <attsProcReadReq+0x2a>
    if ((handle >= pGroup->startHandle) && (handle <= pGroup->endHandle))
   16980:	8a23      	ldrh	r3, [r4, #16]
   16982:	429d      	cmp	r5, r3
   16984:	d302      	bcc.n	1698c <attsProcReadReq+0x24>
   16986:	8a62      	ldrh	r2, [r4, #18]
   16988:	42aa      	cmp	r2, r5
   1698a:	d20c      	bcs.n	169a6 <attsProcReadReq+0x3e>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1698c:	6824      	ldr	r4, [r4, #0]
   1698e:	2c00      	cmp	r4, #0
   16990:	d1f6      	bne.n	16980 <attsProcReadReq+0x18>
    }
  }
  /* else invalid handle */
  else
  {
    err = ATT_ERR_HANDLE;
   16992:	2301      	movs	r3, #1
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
   16994:	f8b8 0018 	ldrh.w	r0, [r8, #24]
   16998:	462a      	mov	r2, r5
   1699a:	210a      	movs	r1, #10
  }
}
   1699c:	b002      	add	sp, #8
   1699e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_READ_REQ, handle, err);
   169a2:	f7ff bc05 	b.w	161b0 <attsErrRsp>
      return &pGroup->pAttr[handle - pGroup->startHandle];
   169a6:	6866      	ldr	r6, [r4, #4]
   169a8:	1aeb      	subs	r3, r5, r3
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   169aa:	eb16 1603 	adds.w	r6, r6, r3, lsl #4
   169ae:	d0f0      	beq.n	16992 <attsProcReadReq+0x2a>
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   169b0:	f896 900f 	ldrb.w	r9, [r6, #15]
  if (!(permissions & permit))
   169b4:	f019 0f01 	tst.w	r9, #1
   169b8:	d04e      	beq.n	16a58 <attsProcReadReq+0xf0>
  if ((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_AUTHORIZ | ATTS_PERMIT_READ_ENC)) == 0)
   169ba:	f019 0f0e 	tst.w	r9, #14
   169be:	d01a      	beq.n	169f6 <attsProcReadReq+0x8e>
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   169c0:	f898 a01c 	ldrb.w	sl, [r8, #28]
  secLevel = DmConnSecLevel(connId);
   169c4:	4650      	mov	r0, sl
   169c6:	f005 fbe1 	bl	1c18c <DmConnSecLevel>
  if ((permissions & ATTS_PERMIT_READ_ENC) && (secLevel == DM_SEC_LEVEL_NONE))
   169ca:	f019 0f08 	tst.w	r9, #8
   169ce:	d001      	beq.n	169d4 <attsProcReadReq+0x6c>
   169d0:	2800      	cmp	r0, #0
   169d2:	d052      	beq.n	16a7a <attsProcReadReq+0x112>
  if (((permissions & (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) ==
   169d4:	f009 030a 	and.w	r3, r9, #10
   169d8:	2b0a      	cmp	r3, #10
   169da:	d04c      	beq.n	16a76 <attsProcReadReq+0x10e>
  if (permissions & ATTS_PERMIT_READ_AUTHORIZ)
   169dc:	f019 0f04 	tst.w	r9, #4
   169e0:	d009      	beq.n	169f6 <attsProcReadReq+0x8e>
    if (attsCb.authorCback == NULL)
   169e2:	693b      	ldr	r3, [r7, #16]
   169e4:	2b00      	cmp	r3, #0
   169e6:	d04d      	beq.n	16a84 <attsProcReadReq+0x11c>
      return (*attsCb.authorCback)(connId, permit, handle);
   169e8:	4650      	mov	r0, sl
   169ea:	462a      	mov	r2, r5
   169ec:	2101      	movs	r1, #1
   169ee:	4798      	blx	r3
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   169f0:	4603      	mov	r3, r0
   169f2:	2800      	cmp	r0, #0
   169f4:	d1ce      	bne.n	16994 <attsProcReadReq+0x2c>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   169f6:	7bb3      	ldrb	r3, [r6, #14]
   169f8:	075a      	lsls	r2, r3, #29
   169fa:	d52f      	bpl.n	16a5c <attsProcReadReq+0xf4>
          (pGroup->readCback != NULL))
   169fc:	68a4      	ldr	r4, [r4, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   169fe:	b36c      	cbz	r4, 16a5c <attsProcReadReq+0xf4>
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_REQ, 0, pAttr);
   16a00:	9600      	str	r6, [sp, #0]
   16a02:	2300      	movs	r3, #0
   16a04:	f898 001c 	ldrb.w	r0, [r8, #28]
   16a08:	220a      	movs	r2, #10
   16a0a:	4629      	mov	r1, r5
   16a0c:	47a0      	blx	r4
   16a0e:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
   16a10:	2b00      	cmp	r3, #0
   16a12:	d1bf      	bne.n	16994 <attsProcReadReq+0x2c>
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   16a14:	68b2      	ldr	r2, [r6, #8]
   16a16:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   16a1a:	8812      	ldrh	r2, [r2, #0]
   16a1c:	1e5c      	subs	r4, r3, #1
                   *pAttr->pLen : (pCcb->mtu - ATT_READ_RSP_LEN);
   16a1e:	4294      	cmp	r4, r2
   16a20:	bfa8      	it	ge
   16a22:	4614      	movge	r4, r2
        readLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_RSP_LEN)) ?
   16a24:	b2a7      	uxth	r7, r4
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_RSP_LEN + readLen)) != NULL)
   16a26:	f107 0009 	add.w	r0, r7, #9
   16a2a:	b280      	uxth	r0, r0
   16a2c:	f001 f808 	bl	17a40 <attMsgAlloc>
   16a30:	4605      	mov	r5, r0
   16a32:	b320      	cbz	r0, 16a7e <attsProcReadReq+0x116>
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_RSP);
   16a34:	230b      	movs	r3, #11
   16a36:	7203      	strb	r3, [r0, #8]
          memcpy(p, pAttr->pValue, readLen);
   16a38:	6871      	ldr	r1, [r6, #4]
   16a3a:	b2a2      	uxth	r2, r4
   16a3c:	3009      	adds	r0, #9
   16a3e:	f7f5 fb5f 	bl	c100 <memcpy>
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
   16a42:	1c7a      	adds	r2, r7, #1
   16a44:	f8b8 1018 	ldrh.w	r1, [r8, #24]
   16a48:	462b      	mov	r3, r5
   16a4a:	b292      	uxth	r2, r2
   16a4c:	2004      	movs	r0, #4
}
   16a4e:	b002      	add	sp, #8
   16a50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_RSP_LEN + readLen), pBuf);
   16a54:	f004 bbb6 	b.w	1b1c4 <L2cDataReq>
    return (permit == ATTS_PERMIT_READ) ? ATT_ERR_READ : ATT_ERR_WRITE;
   16a58:	2302      	movs	r3, #2
   16a5a:	e79b      	b.n	16994 <attsProcReadReq+0x2c>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   16a5c:	069b      	lsls	r3, r3, #26
   16a5e:	d5d9      	bpl.n	16a14 <attsProcReadReq+0xac>
   16a60:	697c      	ldr	r4, [r7, #20]
   16a62:	2c00      	cmp	r4, #0
   16a64:	d0d6      	beq.n	16a14 <attsProcReadReq+0xac>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   16a66:	6873      	ldr	r3, [r6, #4]
   16a68:	f898 001c 	ldrb.w	r0, [r8, #28]
   16a6c:	462a      	mov	r2, r5
   16a6e:	2105      	movs	r1, #5
   16a70:	47a0      	blx	r4
   16a72:	4603      	mov	r3, r0
   16a74:	e7cc      	b.n	16a10 <attsProcReadReq+0xa8>
       (ATTS_PERMIT_READ_AUTH | ATTS_PERMIT_READ_ENC)) && (secLevel < DM_SEC_LEVEL_ENC_AUTH))
   16a76:	2801      	cmp	r0, #1
   16a78:	d8b0      	bhi.n	169dc <attsProcReadReq+0x74>
    return ATT_ERR_AUTH;
   16a7a:	2305      	movs	r3, #5
   16a7c:	e78a      	b.n	16994 <attsProcReadReq+0x2c>
}
   16a7e:	b002      	add	sp, #8
   16a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return ATT_ERR_AUTHOR;
   16a84:	2308      	movs	r3, #8
   16a86:	e785      	b.n	16994 <attsProcReadReq+0x2c>
   16a88:	10006de8 	.word	0x10006de8

00016a8c <attsFindUuidInRange>:
 *  \return Attribute handle or ATT_HANDLE_NONE if not found.
 */
/*************************************************************************************************/
uint16_t attsFindUuidInRange(uint16_t startHandle, uint16_t endHandle, uint8_t uuidLen,
                             uint8_t *pUuid, attsAttr_t **pAttr, attsGroup_t **pAttrGroup)
{
   16a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a90:	469a      	mov	sl, r3
  attsGroup_t *pGroup;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16a92:	4b1e      	ldr	r3, [pc, #120]	; (16b0c <attsFindUuidInRange+0x80>)
{
   16a94:	9e08      	ldr	r6, [sp, #32]
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16a96:	681d      	ldr	r5, [r3, #0]
   16a98:	2d00      	cmp	r5, #0
   16a9a:	d033      	beq.n	16b04 <attsFindUuidInRange+0x78>
   16a9c:	4604      	mov	r4, r0
   16a9e:	460f      	mov	r7, r1
   16aa0:	4690      	mov	r8, r2
          *pAttrGroup = pGroup;
          return startHandle;
        }

        /* special case of max handle value */
        if (startHandle == ATT_HANDLE_MAX)
   16aa2:	f64f 79ff 	movw	r9, #65535	; 0xffff
   16aa6:	e004      	b.n	16ab2 <attsFindUuidInRange+0x26>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16aa8:	8a6b      	ldrh	r3, [r5, #18]
   16aaa:	42a3      	cmp	r3, r4
   16aac:	d224      	bcs.n	16af8 <attsFindUuidInRange+0x6c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16aae:	682d      	ldr	r5, [r5, #0]
   16ab0:	b345      	cbz	r5, 16b04 <attsFindUuidInRange+0x78>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   16ab2:	8a28      	ldrh	r0, [r5, #16]
   16ab4:	42a0      	cmp	r0, r4
   16ab6:	d9f7      	bls.n	16aa8 <attsFindUuidInRange+0x1c>
   16ab8:	42b8      	cmp	r0, r7
   16aba:	d8f8      	bhi.n	16aae <attsFindUuidInRange+0x22>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16abc:	8a6b      	ldrh	r3, [r5, #18]
   16abe:	4283      	cmp	r3, r0
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16ac0:	4604      	mov	r4, r0
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16ac2:	d3f4      	bcc.n	16aae <attsFindUuidInRange+0x22>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16ac4:	6868      	ldr	r0, [r5, #4]
   16ac6:	6030      	str	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16ac8:	e00a      	b.n	16ae0 <attsFindUuidInRange+0x54>
        if (startHandle == ATT_HANDLE_MAX)
   16aca:	454c      	cmp	r4, r9
   16acc:	d0ef      	beq.n	16aae <attsFindUuidInRange+0x22>
        {
          break;
        }

        startHandle++;
        (*pAttr)++;
   16ace:	6830      	ldr	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16ad0:	8a6a      	ldrh	r2, [r5, #18]
        startHandle++;
   16ad2:	b29c      	uxth	r4, r3
        (*pAttr)++;
   16ad4:	3010      	adds	r0, #16
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16ad6:	42a2      	cmp	r2, r4
        (*pAttr)++;
   16ad8:	6030      	str	r0, [r6, #0]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16ada:	d3e8      	bcc.n	16aae <attsFindUuidInRange+0x22>
   16adc:	42a7      	cmp	r7, r4
   16ade:	d3e6      	bcc.n	16aae <attsFindUuidInRange+0x22>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   16ae0:	4652      	mov	r2, sl
   16ae2:	4641      	mov	r1, r8
   16ae4:	f7ff fdde 	bl	166a4 <attsUuidCmp>
        startHandle++;
   16ae8:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   16aea:	2800      	cmp	r0, #0
   16aec:	d0ed      	beq.n	16aca <attsFindUuidInRange+0x3e>
          *pAttrGroup = pGroup;
   16aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
          return startHandle;
   16af0:	4620      	mov	r0, r4
          *pAttrGroup = pGroup;
   16af2:	601d      	str	r5, [r3, #0]
    }
  }

  /* no match found */
  return ATT_HANDLE_NONE;
}
   16af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16af8:	1a23      	subs	r3, r4, r0
   16afa:	6868      	ldr	r0, [r5, #4]
   16afc:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   16b00:	6030      	str	r0, [r6, #0]
   16b02:	e7eb      	b.n	16adc <attsFindUuidInRange+0x50>
  return ATT_HANDLE_NONE;
   16b04:	2000      	movs	r0, #0
}
   16b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16b0a:	bf00      	nop
   16b0c:	10006de8 	.word	0x10006de8

00016b10 <attsFindServiceGroupEnd>:
 *
 *  \return Service group end handle.
 */
/*************************************************************************************************/
uint16_t attsFindServiceGroupEnd(uint16_t startHandle)
{
   16b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t      prevHandle;
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};

  /* special case for max handle */
  if (startHandle == ATT_HANDLE_MAX)
   16b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   16b18:	b082      	sub	sp, #8
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   16b1a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
   16b1e:	f642 0201 	movw	r2, #10241	; 0x2801
  if (startHandle == ATT_HANDLE_MAX)
   16b22:	4298      	cmp	r0, r3
  uint8_t       primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   16b24:	f8ad 1000 	strh.w	r1, [sp]
  uint8_t       secSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_SECONDARY_SERVICE)};
   16b28:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (startHandle == ATT_HANDLE_MAX)
   16b2c:	d010      	beq.n	16b50 <attsFindServiceGroupEnd+0x40>

  prevHandle = startHandle;
  startHandle++;

  /* iterate over attribute group list */
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16b2e:	4b1d      	ldr	r3, [pc, #116]	; (16ba4 <attsFindServiceGroupEnd+0x94>)
   16b30:	681e      	ldr	r6, [r3, #0]
  startHandle++;
   16b32:	1c44      	adds	r4, r0, #1
   16b34:	4607      	mov	r7, r0
   16b36:	b2a4      	uxth	r4, r4
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16b38:	b156      	cbz	r6, 16b50 <attsFindServiceGroupEnd+0x40>
  {
    /* if start handle is less than group start handle */
    if (startHandle < pGroup->startHandle)
   16b3a:	8a35      	ldrh	r5, [r6, #16]
      /* set start handle to first handle in group */
      startHandle = pGroup->startHandle;
    }

    /*  if start handle within handle range of group */
    if (startHandle <= pGroup->endHandle)
   16b3c:	8a73      	ldrh	r3, [r6, #18]
   16b3e:	42ac      	cmp	r4, r5
   16b40:	bf38      	it	cc
   16b42:	462c      	movcc	r4, r5
   16b44:	b2a4      	uxth	r4, r4
   16b46:	42a3      	cmp	r3, r4
   16b48:	d208      	bcs.n	16b5c <attsFindServiceGroupEnd+0x4c>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16b4a:	6836      	ldr	r6, [r6, #0]
   16b4c:	2e00      	cmp	r6, #0
   16b4e:	d1f4      	bne.n	16b3a <attsFindServiceGroupEnd+0x2a>
    return ATT_HANDLE_MAX;
   16b50:	f64f 77ff 	movw	r7, #65535	; 0xffff
    }
  }

  /* next service not found; return 0xFFFF as the last handle in the database */
  return ATT_HANDLE_MAX;
}
   16b54:	4638      	mov	r0, r7
   16b56:	b002      	add	sp, #8
   16b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16b5c:	6873      	ldr	r3, [r6, #4]
   16b5e:	1b65      	subs	r5, r4, r5
   16b60:	eb03 1505 	add.w	r5, r3, r5, lsl #4
        if (startHandle == ATT_HANDLE_MAX)
   16b64:	f64f 78ff 	movw	r8, #65535	; 0xffff
   16b68:	e00c      	b.n	16b84 <attsFindServiceGroupEnd+0x74>
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
   16b6a:	f7ff fd9b 	bl	166a4 <attsUuidCmp>
        startHandle++;
   16b6e:	1c63      	adds	r3, r4, #1
   16b70:	b29b      	uxth	r3, r3
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   16b72:	2800      	cmp	r0, #0
   16b74:	d1ee      	bne.n	16b54 <attsFindServiceGroupEnd+0x44>
        if (startHandle == ATT_HANDLE_MAX)
   16b76:	4544      	cmp	r4, r8
   16b78:	4627      	mov	r7, r4
   16b7a:	d0e9      	beq.n	16b50 <attsFindServiceGroupEnd+0x40>
      while (startHandle <= pGroup->endHandle)
   16b7c:	8a72      	ldrh	r2, [r6, #18]
   16b7e:	429a      	cmp	r2, r3
   16b80:	461c      	mov	r4, r3
   16b82:	d3e2      	bcc.n	16b4a <attsFindServiceGroupEnd+0x3a>
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   16b84:	466a      	mov	r2, sp
   16b86:	2102      	movs	r1, #2
   16b88:	4628      	mov	r0, r5
   16b8a:	f7ff fd8b 	bl	166a4 <attsUuidCmp>
   16b8e:	4603      	mov	r3, r0
            attsUuidCmp(pAttr, ATT_16_UUID_LEN, secSvcUuid))
   16b90:	aa01      	add	r2, sp, #4
   16b92:	4628      	mov	r0, r5
   16b94:	2102      	movs	r1, #2
        pAttr++;
   16b96:	3510      	adds	r5, #16
        if (attsUuidCmp(pAttr, ATT_16_UUID_LEN, primSvcUuid) ||
   16b98:	2b00      	cmp	r3, #0
   16b9a:	d0e6      	beq.n	16b6a <attsFindServiceGroupEnd+0x5a>
}
   16b9c:	4638      	mov	r0, r7
   16b9e:	b002      	add	sp, #8
   16ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16ba4:	10006de8 	.word	0x10006de8

00016ba8 <attsProcReadBlobReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadBlobReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   16ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint16_t    readLen;
  uint8_t     err = ATT_SUCCESS;

  /* parse handle and offset */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
   16bac:	7a93      	ldrb	r3, [r2, #10]
   16bae:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(offset, pPacket);
   16bb0:	7ad7      	ldrb	r7, [r2, #11]
   16bb2:	f892 800c 	ldrb.w	r8, [r2, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   16bb6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
   16bba:	b085      	sub	sp, #20
  BSTREAM_TO_UINT16(handle, pPacket);
   16bbc:	b2a4      	uxth	r4, r4
{
   16bbe:	4606      	mov	r6, r0

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   16bc0:	a903      	add	r1, sp, #12
   16bc2:	4620      	mov	r0, r4
   16bc4:	f7ff fda4 	bl	16710 <attsFindByHandle>
   16bc8:	2800      	cmp	r0, #0
   16bca:	d04c      	beq.n	16c66 <attsProcReadBlobReq+0xbe>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   16bcc:	7bc3      	ldrb	r3, [r0, #15]
   16bce:	4605      	mov	r5, r0
   16bd0:	4622      	mov	r2, r4
   16bd2:	7f30      	ldrb	r0, [r6, #28]
   16bd4:	2101      	movs	r1, #1
   16bd6:	f7ff fdb3 	bl	16740 <attsPermissions>
   16bda:	4603      	mov	r3, r0
   16bdc:	b138      	cbz	r0, 16bee <attsProcReadBlobReq+0x46>
    err = ATT_ERR_HANDLE;
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_BLOB_REQ, handle, err);
   16bde:	8b30      	ldrh	r0, [r6, #24]
   16be0:	4622      	mov	r2, r4
   16be2:	210c      	movs	r1, #12
   16be4:	f7ff fae4 	bl	161b0 <attsErrRsp>
  }
}
   16be8:	b005      	add	sp, #20
   16bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (offset > *pAttr->pLen)
   16bee:	68ab      	ldr	r3, [r5, #8]
  BSTREAM_TO_UINT16(offset, pPacket);
   16bf0:	eb07 2708 	add.w	r7, r7, r8, lsl #8
    else if (offset > *pAttr->pLen)
   16bf4:	881b      	ldrh	r3, [r3, #0]
  BSTREAM_TO_UINT16(offset, pPacket);
   16bf6:	b2bf      	uxth	r7, r7
    else if (offset > *pAttr->pLen)
   16bf8:	42bb      	cmp	r3, r7
   16bfa:	d336      	bcc.n	16c6a <attsProcReadBlobReq+0xc2>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   16bfc:	7baa      	ldrb	r2, [r5, #14]
   16bfe:	0751      	lsls	r1, r2, #29
   16c00:	d535      	bpl.n	16c6e <attsProcReadBlobReq+0xc6>
          (pGroup->readCback != NULL))
   16c02:	9903      	ldr	r1, [sp, #12]
   16c04:	f8d1 8008 	ldr.w	r8, [r1, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   16c08:	f1b8 0f00 	cmp.w	r8, #0
   16c0c:	d02f      	beq.n	16c6e <attsProcReadBlobReq+0xc6>
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_BLOB_REQ, offset, pAttr);
   16c0e:	9500      	str	r5, [sp, #0]
   16c10:	463b      	mov	r3, r7
   16c12:	7f30      	ldrb	r0, [r6, #28]
   16c14:	220c      	movs	r2, #12
   16c16:	4621      	mov	r1, r4
   16c18:	47c0      	blx	r8
   16c1a:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
   16c1c:	2b00      	cmp	r3, #0
   16c1e:	d1de      	bne.n	16bde <attsProcReadBlobReq+0x36>
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   16c20:	68ab      	ldr	r3, [r5, #8]
   16c22:	881b      	ldrh	r3, [r3, #0]
   16c24:	8b74      	ldrh	r4, [r6, #26]
   16c26:	1bda      	subs	r2, r3, r7
   16c28:	3c01      	subs	r4, #1
                   (*pAttr->pLen - offset) : (pCcb->mtu - ATT_READ_BLOB_RSP_LEN);
   16c2a:	4294      	cmp	r4, r2
   16c2c:	bfa8      	it	ge
   16c2e:	4614      	movge	r4, r2
        readLen = ((*pAttr->pLen - offset) < (pCcb->mtu - ATT_READ_BLOB_RSP_LEN)) ?
   16c30:	fa1f f984 	uxth.w	r9, r4
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_READ_BLOB_RSP_LEN + readLen)) != NULL)
   16c34:	f109 0009 	add.w	r0, r9, #9
   16c38:	b280      	uxth	r0, r0
   16c3a:	f000 ff01 	bl	17a40 <attMsgAlloc>
   16c3e:	4680      	mov	r8, r0
   16c40:	2800      	cmp	r0, #0
   16c42:	d0d1      	beq.n	16be8 <attsProcReadBlobReq+0x40>
          UINT8_TO_BSTREAM(p, ATT_PDU_READ_BLOB_RSP);
   16c44:	230d      	movs	r3, #13
   16c46:	7203      	strb	r3, [r0, #8]
          memcpy(p, (pAttr->pValue + offset), readLen);
   16c48:	6869      	ldr	r1, [r5, #4]
   16c4a:	464a      	mov	r2, r9
   16c4c:	4439      	add	r1, r7
   16c4e:	3009      	adds	r0, #9
   16c50:	f7f5 fa56 	bl	c100 <memcpy>
          L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_READ_BLOB_RSP_LEN + readLen), pBuf);
   16c54:	f109 0201 	add.w	r2, r9, #1
   16c58:	8b31      	ldrh	r1, [r6, #24]
   16c5a:	4643      	mov	r3, r8
   16c5c:	b292      	uxth	r2, r2
   16c5e:	2004      	movs	r0, #4
   16c60:	f004 fab0 	bl	1b1c4 <L2cDataReq>
  if (err)
   16c64:	e7c0      	b.n	16be8 <attsProcReadBlobReq+0x40>
    err = ATT_ERR_HANDLE;
   16c66:	2301      	movs	r3, #1
   16c68:	e7b9      	b.n	16bde <attsProcReadBlobReq+0x36>
      err = ATT_ERR_OFFSET;
   16c6a:	2307      	movs	r3, #7
   16c6c:	e7b7      	b.n	16bde <attsProcReadBlobReq+0x36>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   16c6e:	0692      	lsls	r2, r2, #26
   16c70:	d5d8      	bpl.n	16c24 <attsProcReadBlobReq+0x7c>
   16c72:	4a07      	ldr	r2, [pc, #28]	; (16c90 <attsProcReadBlobReq+0xe8>)
   16c74:	f8d2 8014 	ldr.w	r8, [r2, #20]
   16c78:	f1b8 0f00 	cmp.w	r8, #0
   16c7c:	d0d2      	beq.n	16c24 <attsProcReadBlobReq+0x7c>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   16c7e:	686b      	ldr	r3, [r5, #4]
   16c80:	7f30      	ldrb	r0, [r6, #28]
   16c82:	4622      	mov	r2, r4
   16c84:	2105      	movs	r1, #5
   16c86:	47c0      	blx	r8
   16c88:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS)
   16c8a:	2b00      	cmp	r3, #0
   16c8c:	d1a7      	bne.n	16bde <attsProcReadBlobReq+0x36>
   16c8e:	e7c7      	b.n	16c20 <attsProcReadBlobReq+0x78>
   16c90:	10006de8 	.word	0x10006de8

00016c94 <attsProcFindTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcFindTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   16c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c98:	ed2d 8b02 	vpush	{d8}
  uint16_t    nextHandle;
  uint8_t     err = ATT_SUCCESS;

  /* parse handles and uuid; pPacket then points to the value in the request */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
   16c9c:	7a93      	ldrb	r3, [r2, #10]
   16c9e:	f892 9009 	ldrb.w	r9, [r2, #9]
{
   16ca2:	b087      	sub	sp, #28
  BSTREAM_TO_UINT16(startHandle, pPacket);
   16ca4:	eb09 2903 	add.w	r9, r9, r3, lsl #8
   16ca8:	fa1f f389 	uxth.w	r3, r9
   16cac:	9301      	str	r3, [sp, #4]
{
   16cae:	4683      	mov	fp, r0

  /* set len to the value length */
  len -= ATT_FIND_TYPE_REQ_LEN;

  /* verify handles */
  if ((startHandle == 0) || (startHandle > endHandle))
   16cb0:	b143      	cbz	r3, 16cc4 <attsProcFindTypeReq+0x30>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   16cb2:	7b13      	ldrb	r3, [r2, #12]
   16cb4:	7ad6      	ldrb	r6, [r2, #11]
   16cb6:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  if ((startHandle == 0) || (startHandle > endHandle))
   16cba:	9b01      	ldr	r3, [sp, #4]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   16cbc:	b2b6      	uxth	r6, r6
  if ((startHandle == 0) || (startHandle > endHandle))
   16cbe:	42b3      	cmp	r3, r6
   16cc0:	4692      	mov	sl, r2
   16cc2:	d90e      	bls.n	16ce2 <attsProcFindTypeReq+0x4e>
      err = ATT_ERR_RESOURCES;
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   16cc4:	4658      	mov	r0, fp
   16cc6:	f7ff fa9d 	bl	16204 <attsDiscBusy>
    err = ATT_ERR_HANDLE;
   16cca:	2301      	movs	r3, #1
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
   16ccc:	f8bb 0018 	ldrh.w	r0, [fp, #24]
   16cd0:	9a01      	ldr	r2, [sp, #4]
   16cd2:	2106      	movs	r1, #6
  }
}
   16cd4:	b007      	add	sp, #28
   16cd6:	ecbd 8b02 	vpop	{d8}
   16cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_FIND_TYPE_REQ, startHandle, err);
   16cde:	f7ff ba67 	b.w	161b0 <attsErrRsp>
    if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   16ce2:	8b40      	ldrh	r0, [r0, #26]
   16ce4:	3008      	adds	r0, #8
   16ce6:	b280      	uxth	r0, r0
   16ce8:	460c      	mov	r4, r1
   16cea:	f000 fea9 	bl	17a40 <attMsgAlloc>
   16cee:	9002      	str	r0, [sp, #8]
   16cf0:	2800      	cmp	r0, #0
   16cf2:	f000 8091 	beq.w	16e18 <attsProcFindTypeReq+0x184>
  len -= ATT_FIND_TYPE_REQ_LEN;
   16cf6:	1fe1      	subs	r1, r4, #7
   16cf8:	b28b      	uxth	r3, r1
   16cfa:	9303      	str	r3, [sp, #12]
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   16cfc:	2307      	movs	r3, #7
   16cfe:	7203      	strb	r3, [r0, #8]
  pPacket += ATT_16_UUID_LEN;
   16d00:	f10a 030f 	add.w	r3, sl, #15
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   16d04:	f100 0109 	add.w	r1, r0, #9
  pPacket += ATT_16_UUID_LEN;
   16d08:	ee08 3a10 	vmov	s16, r3
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   16d0c:	9c01      	ldr	r4, [sp, #4]
   16d0e:	f8cd a010 	str.w	sl, [sp, #16]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   16d12:	f10a 070d 	add.w	r7, sl, #13
      UINT8_TO_BSTREAM(p, ATT_PDU_FIND_TYPE_RSP);
   16d16:	9105      	str	r1, [sp, #20]
        if (startHandle == ATT_HANDLE_MAX)
   16d18:	f64f 78ff 	movw	r8, #65535	; 0xffff
   16d1c:	468a      	mov	sl, r1
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16d1e:	4b46      	ldr	r3, [pc, #280]	; (16e38 <attsProcFindTypeReq+0x1a4>)
   16d20:	681d      	ldr	r5, [r3, #0]
   16d22:	b92d      	cbnz	r5, 16d30 <attsProcFindTypeReq+0x9c>
   16d24:	e03a      	b.n	16d9c <attsProcFindTypeReq+0x108>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16d26:	8a6b      	ldrh	r3, [r5, #18]
   16d28:	42a3      	cmp	r3, r4
   16d2a:	d231      	bcs.n	16d90 <attsProcFindTypeReq+0xfc>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16d2c:	682d      	ldr	r5, [r5, #0]
   16d2e:	b3ad      	cbz	r5, 16d9c <attsProcFindTypeReq+0x108>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   16d30:	f8b5 9010 	ldrh.w	r9, [r5, #16]
   16d34:	454c      	cmp	r4, r9
   16d36:	d2f6      	bcs.n	16d26 <attsProcFindTypeReq+0x92>
   16d38:	454e      	cmp	r6, r9
   16d3a:	d3f7      	bcc.n	16d2c <attsProcFindTypeReq+0x98>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16d3c:	8a6b      	ldrh	r3, [r5, #18]
   16d3e:	454b      	cmp	r3, r9
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16d40:	464c      	mov	r4, r9
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16d42:	d3f3      	bcc.n	16d2c <attsProcFindTypeReq+0x98>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16d44:	f8d5 9004 	ldr.w	r9, [r5, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16d48:	e009      	b.n	16d5e <attsProcFindTypeReq+0xca>
        if (startHandle == ATT_HANDLE_MAX)
   16d4a:	4544      	cmp	r4, r8
        (*pAttr)++;
   16d4c:	f109 0910 	add.w	r9, r9, #16
        if (startHandle == ATT_HANDLE_MAX)
   16d50:	d0ec      	beq.n	16d2c <attsProcFindTypeReq+0x98>
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16d52:	8a6a      	ldrh	r2, [r5, #18]
        startHandle++;
   16d54:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16d56:	42a2      	cmp	r2, r4
   16d58:	d3e8      	bcc.n	16d2c <attsProcFindTypeReq+0x98>
   16d5a:	42a6      	cmp	r6, r4
   16d5c:	d3e6      	bcc.n	16d2c <attsProcFindTypeReq+0x98>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   16d5e:	4648      	mov	r0, r9
   16d60:	463a      	mov	r2, r7
   16d62:	2102      	movs	r1, #2
   16d64:	f7ff fc9e 	bl	166a4 <attsUuidCmp>
        startHandle++;
   16d68:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   16d6a:	2800      	cmp	r0, #0
   16d6c:	d0ed      	beq.n	16d4a <attsProcFindTypeReq+0xb6>
      while ((handle = attsFindUuidInRange(handle, endHandle, ATT_16_UUID_LEN,
   16d6e:	b1ac      	cbz	r4, 16d9c <attsProcFindTypeReq+0x108>
        if ((pAttr->permissions & ATTS_PERMIT_READ) &&
   16d70:	f899 200f 	ldrb.w	r2, [r9, #15]
   16d74:	07d3      	lsls	r3, r2, #31
   16d76:	d506      	bpl.n	16d86 <attsProcFindTypeReq+0xf2>
   16d78:	9b03      	ldr	r3, [sp, #12]
   16d7a:	b373      	cbz	r3, 16dda <attsProcFindTypeReq+0x146>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   16d7c:	f8d9 2008 	ldr.w	r2, [r9, #8]
            ((len == 0) ||
   16d80:	8812      	ldrh	r2, [r2, #0]
   16d82:	429a      	cmp	r2, r3
   16d84:	d020      	beq.n	16dc8 <attsProcFindTypeReq+0x134>
        if ((nextHandle >= endHandle) || (nextHandle == ATT_HANDLE_MAX))
   16d86:	42b4      	cmp	r4, r6
   16d88:	d208      	bcs.n	16d9c <attsProcFindTypeReq+0x108>
        handle = nextHandle + 1;
   16d8a:	3401      	adds	r4, #1
   16d8c:	b2a4      	uxth	r4, r4
   16d8e:	e7c6      	b.n	16d1e <attsProcFindTypeReq+0x8a>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16d90:	686b      	ldr	r3, [r5, #4]
   16d92:	eba4 0909 	sub.w	r9, r4, r9
   16d96:	eb03 1909 	add.w	r9, r3, r9, lsl #4
   16d9a:	e7de      	b.n	16d5a <attsProcFindTypeReq+0xc6>
      if (p == (pBuf + L2C_PAYLOAD_START + 1))
   16d9c:	9b05      	ldr	r3, [sp, #20]
   16d9e:	459a      	cmp	sl, r3
   16da0:	4654      	mov	r4, sl
   16da2:	d041      	beq.n	16e28 <attsProcFindTypeReq+0x194>
  attsDiscBusy(pCcb);
   16da4:	4658      	mov	r0, fp
   16da6:	f7ff fa2d 	bl	16204 <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   16daa:	9b02      	ldr	r3, [sp, #8]
   16dac:	f8bb 1018 	ldrh.w	r1, [fp, #24]
   16db0:	f103 0208 	add.w	r2, r3, #8
   16db4:	1aa2      	subs	r2, r4, r2
   16db6:	b292      	uxth	r2, r2
   16db8:	2004      	movs	r0, #4
}
   16dba:	b007      	add	sp, #28
   16dbc:	ecbd 8b02 	vpop	{d8}
   16dc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   16dc4:	f004 b9fe 	b.w	1b1c4 <L2cDataReq>
             ((len == *pAttr->pLen) && (memcmp(pPacket, pAttr->pValue, len) == 0))))
   16dc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16dcc:	ee18 0a10 	vmov	r0, s16
   16dd0:	461a      	mov	r2, r3
   16dd2:	f00a f99d 	bl	21110 <memcmp>
   16dd6:	2800      	cmp	r0, #0
   16dd8:	d1d5      	bne.n	16d86 <attsProcFindTypeReq+0xf2>
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   16dda:	9a04      	ldr	r2, [sp, #16]
   16ddc:	7b53      	ldrb	r3, [r2, #13]
   16dde:	b9cb      	cbnz	r3, 16e14 <attsProcFindTypeReq+0x180>
   16de0:	7b93      	ldrb	r3, [r2, #14]
   16de2:	2b28      	cmp	r3, #40	; 0x28
            nextHandle = attsFindServiceGroupEnd(handle);
   16de4:	4620      	mov	r0, r4
          if (pUuid[0] == UINT16_TO_BYTE0(ATT_UUID_PRIMARY_SERVICE) &&
   16de6:	d01c      	beq.n	16e22 <attsProcFindTypeReq+0x18e>
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   16de8:	f8bb 301a 	ldrh.w	r3, [fp, #26]
   16dec:	9a02      	ldr	r2, [sp, #8]
   16dee:	3308      	adds	r3, #8
   16df0:	4413      	add	r3, r2
   16df2:	f10a 0204 	add.w	r2, sl, #4
   16df6:	429a      	cmp	r2, r3
   16df8:	d8d0      	bhi.n	16d9c <attsProcFindTypeReq+0x108>
            UINT16_TO_BSTREAM(p, handle);
   16dfa:	f88a 4000 	strb.w	r4, [sl]
            UINT16_TO_BSTREAM(p, nextHandle);
   16dfe:	0a03      	lsrs	r3, r0, #8
            UINT16_TO_BSTREAM(p, handle);
   16e00:	0a24      	lsrs	r4, r4, #8
   16e02:	f88a 4001 	strb.w	r4, [sl, #1]
            UINT16_TO_BSTREAM(p, nextHandle);
   16e06:	f88a 0002 	strb.w	r0, [sl, #2]
   16e0a:	f88a 3003 	strb.w	r3, [sl, #3]
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   16e0e:	4604      	mov	r4, r0
            UINT16_TO_BSTREAM(p, nextHandle);
   16e10:	4692      	mov	sl, r2
          if ((p + (sizeof(uint16_t) * 2)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   16e12:	e7b8      	b.n	16d86 <attsProcFindTypeReq+0xf2>
   16e14:	4620      	mov	r0, r4
   16e16:	e7e7      	b.n	16de8 <attsProcFindTypeReq+0x154>
  attsDiscBusy(pCcb);
   16e18:	4658      	mov	r0, fp
   16e1a:	f7ff f9f3 	bl	16204 <attsDiscBusy>
      err = ATT_ERR_RESOURCES;
   16e1e:	2311      	movs	r3, #17
   16e20:	e754      	b.n	16ccc <attsProcFindTypeReq+0x38>
            nextHandle = attsFindServiceGroupEnd(handle);
   16e22:	f7ff fe75 	bl	16b10 <attsFindServiceGroupEnd>
   16e26:	e7df      	b.n	16de8 <attsProcFindTypeReq+0x154>
        WsfMsgFree(pBuf);
   16e28:	9802      	ldr	r0, [sp, #8]
   16e2a:	f000 ff41 	bl	17cb0 <WsfMsgFree>
  attsDiscBusy(pCcb);
   16e2e:	4658      	mov	r0, fp
   16e30:	f7ff f9e8 	bl	16204 <attsDiscBusy>
        err = ATT_ERR_NOT_FOUND;
   16e34:	230a      	movs	r3, #10
   16e36:	e749      	b.n	16ccc <attsProcFindTypeReq+0x38>
   16e38:	10006de8 	.word	0x10006de8

00016e3c <attsProcReadTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   16e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
   16e40:	3905      	subs	r1, #5
  BSTREAM_TO_UINT16(startHandle, pPacket);
   16e42:	7a93      	ldrb	r3, [r2, #10]
   16e44:	7a54      	ldrb	r4, [r2, #9]
  uuidLen = len - ATT_READ_TYPE_REQ_LEN;
   16e46:	b2cd      	uxtb	r5, r1
  BSTREAM_TO_UINT16(startHandle, pPacket);
   16e48:	eb04 2403 	add.w	r4, r4, r3, lsl #8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   16e4c:	2d02      	cmp	r5, #2
{
   16e4e:	b087      	sub	sp, #28
   16e50:	4617      	mov	r7, r2
   16e52:	4683      	mov	fp, r0
  BSTREAM_TO_UINT16(startHandle, pPacket);
   16e54:	b2a4      	uxth	r4, r4
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   16e56:	d00b      	beq.n	16e70 <attsProcReadTypeReq+0x34>
   16e58:	2d10      	cmp	r5, #16
   16e5a:	d009      	beq.n	16e70 <attsProcReadTypeReq+0x34>
  {
    err = ATT_ERR_INVALID_PDU;
   16e5c:	2304      	movs	r3, #4
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
   16e5e:	f8bb 0018 	ldrh.w	r0, [fp, #24]
   16e62:	4622      	mov	r2, r4
   16e64:	2108      	movs	r1, #8
  }
}
   16e66:	b007      	add	sp, #28
   16e68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, err);
   16e6c:	f7ff b9a0 	b.w	161b0 <attsErrRsp>
  else if ((startHandle == 0) || (startHandle > endHandle))
   16e70:	b90c      	cbnz	r4, 16e76 <attsProcReadTypeReq+0x3a>
    err = ATT_ERR_HANDLE;
   16e72:	2301      	movs	r3, #1
   16e74:	e7f3      	b.n	16e5e <attsProcReadTypeReq+0x22>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   16e76:	7b3b      	ldrb	r3, [r7, #12]
   16e78:	f897 800b 	ldrb.w	r8, [r7, #11]
   16e7c:	eb08 2803 	add.w	r8, r8, r3, lsl #8
   16e80:	fa1f f888 	uxth.w	r8, r8
  else if ((startHandle == 0) || (startHandle > endHandle))
   16e84:	4544      	cmp	r4, r8
   16e86:	d8f4      	bhi.n	16e72 <attsProcReadTypeReq+0x36>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16e88:	4baf      	ldr	r3, [pc, #700]	; (17148 <attsProcReadTypeReq+0x30c>)
   16e8a:	681e      	ldr	r6, [r3, #0]
  BSTREAM_TO_UINT16(endHandle, pPacket);
   16e8c:	f107 0a0d 	add.w	sl, r7, #13
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16e90:	b946      	cbnz	r6, 16ea4 <attsProcReadTypeReq+0x68>
   16e92:	e109      	b.n	170a8 <attsProcReadTypeReq+0x26c>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16e94:	8a73      	ldrh	r3, [r6, #18]
   16e96:	42a3      	cmp	r3, r4
   16e98:	f080 80fd 	bcs.w	17096 <attsProcReadTypeReq+0x25a>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16e9c:	6836      	ldr	r6, [r6, #0]
   16e9e:	2e00      	cmp	r6, #0
   16ea0:	f000 8102 	beq.w	170a8 <attsProcReadTypeReq+0x26c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   16ea4:	f8b6 9010 	ldrh.w	r9, [r6, #16]
   16ea8:	454c      	cmp	r4, r9
   16eaa:	d2f3      	bcs.n	16e94 <attsProcReadTypeReq+0x58>
   16eac:	45c8      	cmp	r8, r9
   16eae:	d3f5      	bcc.n	16e9c <attsProcReadTypeReq+0x60>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16eb0:	8a73      	ldrh	r3, [r6, #18]
   16eb2:	454b      	cmp	r3, r9
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16eb4:	464c      	mov	r4, r9
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16eb6:	d3f1      	bcc.n	16e9c <attsProcReadTypeReq+0x60>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16eb8:	f8d6 9004 	ldr.w	r9, [r6, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16ebc:	e00b      	b.n	16ed6 <attsProcReadTypeReq+0x9a>
        if (startHandle == ATT_HANDLE_MAX)
   16ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16ec2:	4294      	cmp	r4, r2
        (*pAttr)++;
   16ec4:	f109 0910 	add.w	r9, r9, #16
        if (startHandle == ATT_HANDLE_MAX)
   16ec8:	d0e8      	beq.n	16e9c <attsProcReadTypeReq+0x60>
        startHandle++;
   16eca:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16ecc:	8a73      	ldrh	r3, [r6, #18]
   16ece:	42a3      	cmp	r3, r4
   16ed0:	d3e4      	bcc.n	16e9c <attsProcReadTypeReq+0x60>
   16ed2:	45a0      	cmp	r8, r4
   16ed4:	d3e2      	bcc.n	16e9c <attsProcReadTypeReq+0x60>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   16ed6:	4648      	mov	r0, r9
   16ed8:	4652      	mov	r2, sl
   16eda:	4629      	mov	r1, r5
   16edc:	f7ff fbe2 	bl	166a4 <attsUuidCmp>
        startHandle++;
   16ee0:	1c63      	adds	r3, r4, #1
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   16ee2:	2800      	cmp	r0, #0
   16ee4:	d0eb      	beq.n	16ebe <attsProcReadTypeReq+0x82>
    if (handle == ATT_HANDLE_NONE)
   16ee6:	2c00      	cmp	r4, #0
   16ee8:	f000 80de 	beq.w	170a8 <attsProcReadTypeReq+0x26c>
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   16eec:	f899 300f 	ldrb.w	r3, [r9, #15]
   16ef0:	f89b 001c 	ldrb.w	r0, [fp, #28]
   16ef4:	4622      	mov	r2, r4
   16ef6:	2101      	movs	r1, #1
   16ef8:	f7ff fc22 	bl	16740 <attsPermissions>
   16efc:	4603      	mov	r3, r0
   16efe:	2800      	cmp	r0, #0
   16f00:	d1ad      	bne.n	16e5e <attsProcReadTypeReq+0x22>
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   16f02:	f899 200e 	ldrb.w	r2, [r9, #14]
   16f06:	0750      	lsls	r0, r2, #29
   16f08:	f140 80e8 	bpl.w	170dc <attsProcReadTypeReq+0x2a0>
             (pGroup->readCback != NULL))
   16f0c:	68b6      	ldr	r6, [r6, #8]
    else if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   16f0e:	2e00      	cmp	r6, #0
   16f10:	f000 80e4 	beq.w	170dc <attsProcReadTypeReq+0x2a0>
      err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   16f14:	f8cd 9000 	str.w	r9, [sp]
   16f18:	f89b 001c 	ldrb.w	r0, [fp, #28]
   16f1c:	2208      	movs	r2, #8
   16f1e:	4621      	mov	r1, r4
   16f20:	47b0      	blx	r6
   16f22:	4603      	mov	r3, r0
    if (err == ATT_SUCCESS)
   16f24:	2b00      	cmp	r3, #0
   16f26:	d19a      	bne.n	16e5e <attsProcReadTypeReq+0x22>
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
   16f28:	4b88      	ldr	r3, [pc, #544]	; (1714c <attsProcReadTypeReq+0x310>)
   16f2a:	7b79      	ldrb	r1, [r7, #13]
   16f2c:	781a      	ldrb	r2, [r3, #0]
   16f2e:	4291      	cmp	r1, r2
   16f30:	f000 80e7 	beq.w	17102 <attsProcReadTypeReq+0x2c6>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   16f34:	f8bb 001a 	ldrh.w	r0, [fp, #26]
   16f38:	3008      	adds	r0, #8
   16f3a:	b280      	uxth	r0, r0
   16f3c:	f000 fd80 	bl	17a40 <attMsgAlloc>
   16f40:	4606      	mov	r6, r0
   16f42:	2800      	cmp	r0, #0
   16f44:	f000 80db 	beq.w	170fe <attsProcReadTypeReq+0x2c2>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_TYPE_RSP);
   16f48:	2309      	movs	r3, #9
   16f4a:	7203      	strb	r3, [r0, #8]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   16f4c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   16f50:	881a      	ldrh	r2, [r3, #0]
   16f52:	f8bb 301a 	ldrh.w	r3, [fp, #26]
        UINT16_TO_BSTREAM(p, handle);
   16f56:	7284      	strb	r4, [r0, #10]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   16f58:	3b04      	subs	r3, #4
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t));
   16f5a:	4293      	cmp	r3, r2
   16f5c:	bf28      	it	cs
   16f5e:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_TYPE_RSP_LEN - sizeof(uint16_t))) ?
   16f60:	b2da      	uxtb	r2, r3
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   16f62:	1c97      	adds	r7, r2, #2
        UINT16_TO_BSTREAM(p, handle);
   16f64:	0a23      	lsrs	r3, r4, #8
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   16f66:	7247      	strb	r7, [r0, #9]
        UINT16_TO_BSTREAM(p, handle);
   16f68:	72c3      	strb	r3, [r0, #11]
   16f6a:	f100 030c 	add.w	r3, r0, #12
        memcpy(p, pAttr->pValue, attLen);
   16f6e:	f8d9 1004 	ldr.w	r1, [r9, #4]
        UINT8_TO_BSTREAM(p, attLen + sizeof(uint16_t));
   16f72:	9705      	str	r7, [sp, #20]
        memcpy(p, pAttr->pValue, attLen);
   16f74:	4618      	mov	r0, r3
   16f76:	4691      	mov	r9, r2
   16f78:	f7f5 f8c2 	bl	c100 <memcpy>
        handle++;
   16f7c:	3401      	adds	r4, #1
   16f7e:	e9cd b603 	strd	fp, r6, [sp, #12]
   16f82:	b2a4      	uxth	r4, r4
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   16f84:	19c7      	adds	r7, r0, r7
   16f86:	46cb      	mov	fp, r9
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16f88:	4b6f      	ldr	r3, [pc, #444]	; (17148 <attsProcReadTypeReq+0x30c>)
   16f8a:	f8d3 9000 	ldr.w	r9, [r3]
   16f8e:	1ebb      	subs	r3, r7, #2
   16f90:	9302      	str	r3, [sp, #8]
   16f92:	f1b9 0f00 	cmp.w	r9, #0
   16f96:	f000 808f 	beq.w	170b8 <attsProcReadTypeReq+0x27c>
   16f9a:	464b      	mov	r3, r9
   16f9c:	46a9      	mov	r9, r5
   16f9e:	461d      	mov	r5, r3
   16fa0:	e007      	b.n	16fb2 <attsProcReadTypeReq+0x176>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16fa2:	8a6b      	ldrh	r3, [r5, #18]
   16fa4:	42a3      	cmp	r3, r4
   16fa6:	f080 8082 	bcs.w	170ae <attsProcReadTypeReq+0x272>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   16faa:	682d      	ldr	r5, [r5, #0]
   16fac:	2d00      	cmp	r5, #0
   16fae:	f000 8083 	beq.w	170b8 <attsProcReadTypeReq+0x27c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   16fb2:	8a2e      	ldrh	r6, [r5, #16]
   16fb4:	42b4      	cmp	r4, r6
   16fb6:	d2f4      	bcs.n	16fa2 <attsProcReadTypeReq+0x166>
   16fb8:	45b0      	cmp	r8, r6
   16fba:	d3f6      	bcc.n	16faa <attsProcReadTypeReq+0x16e>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16fbc:	8a6b      	ldrh	r3, [r5, #18]
   16fbe:	42b3      	cmp	r3, r6
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16fc0:	4634      	mov	r4, r6
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   16fc2:	d3f2      	bcc.n	16faa <attsProcReadTypeReq+0x16e>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   16fc4:	686e      	ldr	r6, [r5, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16fc6:	e00d      	b.n	16fe4 <attsProcReadTypeReq+0x1a8>
        if (startHandle == ATT_HANDLE_MAX)
   16fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16fcc:	429c      	cmp	r4, r3
        (*pAttr)++;
   16fce:	f106 0610 	add.w	r6, r6, #16
        startHandle++;
   16fd2:	f104 0301 	add.w	r3, r4, #1
        if (startHandle == ATT_HANDLE_MAX)
   16fd6:	d0e8      	beq.n	16faa <attsProcReadTypeReq+0x16e>
        startHandle++;
   16fd8:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   16fda:	8a6b      	ldrh	r3, [r5, #18]
   16fdc:	42a3      	cmp	r3, r4
   16fde:	d3e4      	bcc.n	16faa <attsProcReadTypeReq+0x16e>
   16fe0:	45a0      	cmp	r8, r4
   16fe2:	d3e2      	bcc.n	16faa <attsProcReadTypeReq+0x16e>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   16fe4:	4630      	mov	r0, r6
   16fe6:	4652      	mov	r2, sl
   16fe8:	4649      	mov	r1, r9
   16fea:	f7ff fb5b 	bl	166a4 <attsUuidCmp>
   16fee:	2800      	cmp	r0, #0
   16ff0:	d0ea      	beq.n	16fc8 <attsProcReadTypeReq+0x18c>
        while ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   16ff2:	462b      	mov	r3, r5
   16ff4:	464d      	mov	r5, r9
   16ff6:	4699      	mov	r9, r3
   16ff8:	2c00      	cmp	r4, #0
   16ffa:	d05d      	beq.n	170b8 <attsProcReadTypeReq+0x27c>
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   16ffc:	7bb3      	ldrb	r3, [r6, #14]
   16ffe:	075a      	lsls	r2, r3, #29
   17000:	d55d      	bpl.n	170be <attsProcReadTypeReq+0x282>
              (pGroup->readCback != NULL))
   17002:	f8d9 9008 	ldr.w	r9, [r9, #8]
          if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   17006:	f1b9 0f00 	cmp.w	r9, #0
   1700a:	d058      	beq.n	170be <attsProcReadTypeReq+0x282>
            cbackErr = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_TYPE_REQ, 0, pAttr);
   1700c:	9b03      	ldr	r3, [sp, #12]
   1700e:	9600      	str	r6, [sp, #0]
   17010:	7f18      	ldrb	r0, [r3, #28]
   17012:	2208      	movs	r2, #8
   17014:	2300      	movs	r3, #0
   17016:	4621      	mov	r1, r4
   17018:	47c8      	blx	r9
          if ((cbackErr == ATT_SUCCESS) &&
   1701a:	2800      	cmp	r0, #0
   1701c:	d14c      	bne.n	170b8 <attsProcReadTypeReq+0x27c>
              (*pAttr->pLen == attLen) &&
   1701e:	68b3      	ldr	r3, [r6, #8]
          if ((cbackErr == ATT_SUCCESS) &&
   17020:	881b      	ldrh	r3, [r3, #0]
   17022:	455b      	cmp	r3, fp
   17024:	d148      	bne.n	170b8 <attsProcReadTypeReq+0x27c>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   17026:	9a03      	ldr	r2, [sp, #12]
   17028:	7bf3      	ldrb	r3, [r6, #15]
   1702a:	7f10      	ldrb	r0, [r2, #28]
   1702c:	2101      	movs	r1, #1
   1702e:	4622      	mov	r2, r4
   17030:	f7ff fb86 	bl	16740 <attsPermissions>
              (*pAttr->pLen == attLen) &&
   17034:	2800      	cmp	r0, #0
   17036:	d13f      	bne.n	170b8 <attsProcReadTypeReq+0x27c>
            if ((p + attLen + sizeof(uint16_t)) <= (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   17038:	9a03      	ldr	r2, [sp, #12]
   1703a:	8b53      	ldrh	r3, [r2, #26]
   1703c:	9a04      	ldr	r2, [sp, #16]
   1703e:	3308      	adds	r3, #8
   17040:	4413      	add	r3, r2
   17042:	eb0b 0907 	add.w	r9, fp, r7
   17046:	4599      	cmp	r9, r3
   17048:	d875      	bhi.n	17136 <attsProcReadTypeReq+0x2fa>
              UINT16_TO_BSTREAM(p, handle);
   1704a:	0a23      	lsrs	r3, r4, #8
   1704c:	f807 3c01 	strb.w	r3, [r7, #-1]
   17050:	f807 4c02 	strb.w	r4, [r7, #-2]
              memcpy(p, pAttr->pValue, attLen);
   17054:	6871      	ldr	r1, [r6, #4]
   17056:	465a      	mov	r2, fp
   17058:	4638      	mov	r0, r7
   1705a:	f7f5 f851 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
   1705e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17062:	429c      	cmp	r4, r3
   17064:	d005      	beq.n	17072 <attsProcReadTypeReq+0x236>
          if (++handle > endHandle)
   17066:	3401      	adds	r4, #1
   17068:	9b05      	ldr	r3, [sp, #20]
   1706a:	b2a4      	uxth	r4, r4
   1706c:	45a0      	cmp	r8, r4
   1706e:	441f      	add	r7, r3
   17070:	d28a      	bcs.n	16f88 <attsProcReadTypeReq+0x14c>
   17072:	e9dd b603 	ldrd	fp, r6, [sp, #12]
   17076:	f8cd 9008 	str.w	r9, [sp, #8]
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1707a:	9b02      	ldr	r3, [sp, #8]
   1707c:	f8bb 1018 	ldrh.w	r1, [fp, #24]
   17080:	f106 0208 	add.w	r2, r6, #8
   17084:	1a9a      	subs	r2, r3, r2
   17086:	b292      	uxth	r2, r2
   17088:	4633      	mov	r3, r6
   1708a:	2004      	movs	r0, #4
}
   1708c:	b007      	add	sp, #28
   1708e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   17092:	f004 b897 	b.w	1b1c4 <L2cDataReq>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17096:	6873      	ldr	r3, [r6, #4]
   17098:	eba4 0909 	sub.w	r9, r4, r9
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   1709c:	4544      	cmp	r4, r8
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1709e:	eb03 1909 	add.w	r9, r3, r9, lsl #4
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   170a2:	f67f af18 	bls.w	16ed6 <attsProcReadTypeReq+0x9a>
   170a6:	e6f9      	b.n	16e9c <attsProcReadTypeReq+0x60>
      err = ATT_ERR_NOT_FOUND;
   170a8:	230a      	movs	r3, #10
    startHandle = handle;
   170aa:	2400      	movs	r4, #0
   170ac:	e6d7      	b.n	16e5e <attsProcReadTypeReq+0x22>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   170ae:	686b      	ldr	r3, [r5, #4]
   170b0:	1ba6      	subs	r6, r4, r6
   170b2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   170b6:	e793      	b.n	16fe0 <attsProcReadTypeReq+0x1a4>
   170b8:	e9dd b603 	ldrd	fp, r6, [sp, #12]
   170bc:	e7dd      	b.n	1707a <attsProcReadTypeReq+0x23e>
          else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   170be:	069b      	lsls	r3, r3, #26
   170c0:	d5ad      	bpl.n	1701e <attsProcReadTypeReq+0x1e2>
   170c2:	4b21      	ldr	r3, [pc, #132]	; (17148 <attsProcReadTypeReq+0x30c>)
   170c4:	f8d3 9014 	ldr.w	r9, [r3, #20]
   170c8:	f1b9 0f00 	cmp.w	r9, #0
   170cc:	d0a7      	beq.n	1701e <attsProcReadTypeReq+0x1e2>
            cbackErr = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   170ce:	9a03      	ldr	r2, [sp, #12]
   170d0:	6873      	ldr	r3, [r6, #4]
   170d2:	7f10      	ldrb	r0, [r2, #28]
   170d4:	2105      	movs	r1, #5
   170d6:	4622      	mov	r2, r4
   170d8:	47c8      	blx	r9
   170da:	e79e      	b.n	1701a <attsProcReadTypeReq+0x1de>
    else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   170dc:	0691      	lsls	r1, r2, #26
   170de:	f57f af23 	bpl.w	16f28 <attsProcReadTypeReq+0xec>
   170e2:	4b19      	ldr	r3, [pc, #100]	; (17148 <attsProcReadTypeReq+0x30c>)
   170e4:	695e      	ldr	r6, [r3, #20]
   170e6:	2e00      	cmp	r6, #0
   170e8:	f43f af1e 	beq.w	16f28 <attsProcReadTypeReq+0xec>
      err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   170ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
   170f0:	f89b 001c 	ldrb.w	r0, [fp, #28]
   170f4:	4622      	mov	r2, r4
   170f6:	2105      	movs	r1, #5
   170f8:	47b0      	blx	r6
   170fa:	4603      	mov	r3, r0
   170fc:	e712      	b.n	16f24 <attsProcReadTypeReq+0xe8>
        err = ATT_ERR_RESOURCES;
   170fe:	2311      	movs	r3, #17
   17100:	e6ad      	b.n	16e5e <attsProcReadTypeReq+0x22>
      if ((memcmp(pPacket, attGattDbhChUuid, ATT_16_UUID_LEN) == 0) && attsCsfGetHashUpdateStatus())
   17102:	785b      	ldrb	r3, [r3, #1]
   17104:	f89a 2001 	ldrb.w	r2, [sl, #1]
   17108:	429a      	cmp	r2, r3
   1710a:	f47f af13 	bne.w	16f34 <attsProcReadTypeReq+0xf8>
   1710e:	f7fe fddf 	bl	15cd0 <attsCsfGetHashUpdateStatus>
   17112:	2800      	cmp	r0, #0
   17114:	f43f af0e 	beq.w	16f34 <attsProcReadTypeReq+0xf8>
        pCcb->pPendDbHashRsp = WsfBufAlloc(sizeof(attPendDbHashRsp_t));
   17118:	2004      	movs	r0, #4
   1711a:	f000 fd61 	bl	17be0 <WsfBufAlloc>
   1711e:	f8cb 0020 	str.w	r0, [fp, #32]
        if (pCcb->pPendDbHashRsp)
   17122:	b160      	cbz	r0, 1713e <attsProcReadTypeReq+0x302>
          pCcb->pPendDbHashRsp->startHandle = startHandle;
   17124:	2300      	movs	r3, #0
   17126:	f364 030f 	bfi	r3, r4, #0, #16
   1712a:	f364 431f 	bfi	r3, r4, #16, #16
   1712e:	6003      	str	r3, [r0, #0]
}
   17130:	b007      	add	sp, #28
   17132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17136:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1713a:	4616      	mov	r6, r2
   1713c:	e79d      	b.n	1707a <attsProcReadTypeReq+0x23e>
          attsErrRsp(pCcb->handle, ATT_PDU_READ_TYPE_REQ, startHandle, ATT_ERR_RESOURCES);
   1713e:	f8bb 0018 	ldrh.w	r0, [fp, #24]
   17142:	2311      	movs	r3, #17
   17144:	e68d      	b.n	16e62 <attsProcReadTypeReq+0x26>
   17146:	bf00      	nop
   17148:	10006de8 	.word	0x10006de8
   1714c:	000259bc 	.word	0x000259bc

00017150 <attsProcReadMultReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadMultReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17154:	4607      	mov	r7, r0

  /* points to first handle */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* allocate max size buffer for response */
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   17156:	8b40      	ldrh	r0, [r0, #26]
   17158:	3008      	adds	r0, #8
{
   1715a:	b087      	sub	sp, #28
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   1715c:	b280      	uxth	r0, r0
{
   1715e:	460c      	mov	r4, r1
   17160:	4616      	mov	r6, r2
  if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   17162:	f000 fc6d 	bl	17a40 <attMsgAlloc>
   17166:	4682      	mov	sl, r0
   17168:	2800      	cmp	r0, #0
   1716a:	d07d      	beq.n	17268 <attsProcReadMultReq+0x118>
  {
    p = pBuf + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   1716c:	220f      	movs	r2, #15
  pEnd = pPacket + L2C_PAYLOAD_START + len;
   1716e:	f104 0108 	add.w	r1, r4, #8
   17172:	1873      	adds	r3, r6, r1
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   17174:	7202      	strb	r2, [r0, #8]
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
   17176:	f106 0209 	add.w	r2, r6, #9

    /* while there are handles remaining and there is space in response buffer */
    while (pPacket < pEnd)
   1717a:	4293      	cmp	r3, r2
    UINT8_TO_BSTREAM(p, ATT_PDU_READ_MULT_RSP);
   1717c:	f100 0809 	add.w	r8, r0, #9
    while (pPacket < pEnd)
   17180:	d965      	bls.n	1724e <attsProcReadMultReq+0xfe>
   17182:	eba3 0906 	sub.w	r9, r3, r6
   17186:	f1a9 090a 	sub.w	r9, r9, #10
   1718a:	f106 030d 	add.w	r3, r6, #13
   1718e:	f029 0901 	bic.w	r9, r9, #1
   17192:	4499      	add	r9, r3
   17194:	360b      	adds	r6, #11
   17196:	e014      	b.n	171c2 <attsProcReadMultReq+0x72>
        break;
      }

      /* call read callback if desired */
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
          (pGroup->readCback != NULL))
   17198:	9a05      	ldr	r2, [sp, #20]
   1719a:	f8d2 b008 	ldr.w	fp, [r2, #8]
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   1719e:	f1bb 0f00 	cmp.w	fp, #0
   171a2:	d026      	beq.n	171f2 <attsProcReadMultReq+0xa2>
      {
        err = (*pGroup->readCback)(pCcb->connId, handle, ATT_PDU_READ_MULT_REQ, 0, pAttr);
   171a4:	9500      	str	r5, [sp, #0]
   171a6:	4603      	mov	r3, r0
   171a8:	220e      	movs	r2, #14
   171aa:	7f38      	ldrb	r0, [r7, #28]
   171ac:	4621      	mov	r1, r4
   171ae:	47d8      	blx	fp
        if (err != ATT_SUCCESS)
   171b0:	bb70      	cbnz	r0, 17210 <attsProcReadMultReq+0xc0>
        {
          break;
        }
      }

      if (p < (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   171b2:	8b7a      	ldrh	r2, [r7, #26]
   171b4:	3208      	adds	r2, #8
   171b6:	4452      	add	r2, sl
   171b8:	4542      	cmp	r2, r8
   171ba:	d837      	bhi.n	1722c <attsProcReadMultReq+0xdc>
    while (pPacket < pEnd)
   171bc:	3602      	adds	r6, #2
   171be:	45b1      	cmp	r9, r6
   171c0:	d045      	beq.n	1724e <attsProcReadMultReq+0xfe>
      BSTREAM_TO_UINT16(handle, pPacket);
   171c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   171c6:	f816 4c02 	ldrb.w	r4, [r6, #-2]
   171ca:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   171ce:	b2a4      	uxth	r4, r4
      if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   171d0:	a905      	add	r1, sp, #20
   171d2:	4620      	mov	r0, r4
   171d4:	f7ff fa9c 	bl	16710 <attsFindByHandle>
   171d8:	4605      	mov	r5, r0
   171da:	2800      	cmp	r0, #0
   171dc:	d047      	beq.n	1726e <attsProcReadMultReq+0x11e>
      if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   171de:	7bc3      	ldrb	r3, [r0, #15]
   171e0:	7f38      	ldrb	r0, [r7, #28]
   171e2:	4622      	mov	r2, r4
   171e4:	2101      	movs	r1, #1
   171e6:	f7ff faab 	bl	16740 <attsPermissions>
   171ea:	b988      	cbnz	r0, 17210 <attsProcReadMultReq+0xc0>
      if ((pAttr->settings & ATTS_SET_READ_CBACK) &&
   171ec:	7bab      	ldrb	r3, [r5, #14]
   171ee:	075a      	lsls	r2, r3, #29
   171f0:	d4d2      	bmi.n	17198 <attsProcReadMultReq+0x48>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   171f2:	069b      	lsls	r3, r3, #26
   171f4:	d5dd      	bpl.n	171b2 <attsProcReadMultReq+0x62>
   171f6:	4b1f      	ldr	r3, [pc, #124]	; (17274 <attsProcReadMultReq+0x124>)
   171f8:	f8d3 b014 	ldr.w	fp, [r3, #20]
   171fc:	f1bb 0f00 	cmp.w	fp, #0
   17200:	d0d7      	beq.n	171b2 <attsProcReadMultReq+0x62>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_READ, handle, pAttr->pValue);
   17202:	686b      	ldr	r3, [r5, #4]
   17204:	7f38      	ldrb	r0, [r7, #28]
   17206:	4622      	mov	r2, r4
   17208:	2105      	movs	r1, #5
   1720a:	47d8      	blx	fp
        if (err != ATT_SUCCESS)
   1720c:	2800      	cmp	r0, #0
   1720e:	d0d0      	beq.n	171b2 <attsProcReadMultReq+0x62>
   17210:	4603      	mov	r3, r0
  else
  {
    /* discard response buffer */
    if (pBuf != NULL)
    {
      WsfMsgFree(pBuf);
   17212:	4650      	mov	r0, sl
   17214:	9303      	str	r3, [sp, #12]
   17216:	f000 fd4b 	bl	17cb0 <WsfMsgFree>
   1721a:	9b03      	ldr	r3, [sp, #12]
    }

    attsErrRsp(pCcb->handle, ATT_PDU_READ_MULT_REQ, handle, err);
   1721c:	8b38      	ldrh	r0, [r7, #24]
   1721e:	4622      	mov	r2, r4
   17220:	210e      	movs	r1, #14
   17222:	f7fe ffc5 	bl	161b0 <attsErrRsp>
  }
}
   17226:	b007      	add	sp, #28
   17228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
   1722c:	68ab      	ldr	r3, [r5, #8]
        memcpy(p, pAttr->pValue, readLen);
   1722e:	6869      	ldr	r1, [r5, #4]
        readLen = (*pAttr->pLen < readLen) ? *pAttr->pLen : readLen;
   17230:	881c      	ldrh	r4, [r3, #0]
        readLen = (pBuf + pCcb->mtu + L2C_PAYLOAD_START) - p;
   17232:	eba2 0208 	sub.w	r2, r2, r8
   17236:	b292      	uxth	r2, r2
        memcpy(p, pAttr->pValue, readLen);
   17238:	4294      	cmp	r4, r2
   1723a:	bf28      	it	cs
   1723c:	4614      	movcs	r4, r2
   1723e:	4640      	mov	r0, r8
   17240:	4622      	mov	r2, r4
    while (pPacket < pEnd)
   17242:	3602      	adds	r6, #2
        memcpy(p, pAttr->pValue, readLen);
   17244:	f7f4 ff5c 	bl	c100 <memcpy>
    while (pPacket < pEnd)
   17248:	45b1      	cmp	r9, r6
        p += readLen;
   1724a:	44a0      	add	r8, r4
    while (pPacket < pEnd)
   1724c:	d1b9      	bne.n	171c2 <attsProcReadMultReq+0x72>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   1724e:	f10a 0208 	add.w	r2, sl, #8
   17252:	eba8 0202 	sub.w	r2, r8, r2
   17256:	8b39      	ldrh	r1, [r7, #24]
   17258:	4653      	mov	r3, sl
   1725a:	b292      	uxth	r2, r2
   1725c:	2004      	movs	r0, #4
   1725e:	f003 ffb1 	bl	1b1c4 <L2cDataReq>
}
   17262:	b007      	add	sp, #28
   17264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ATT_ERR_RESOURCES;
   17268:	2311      	movs	r3, #17
  uint16_t    handle = ATT_HANDLE_NONE;
   1726a:	4604      	mov	r4, r0
   1726c:	e7d6      	b.n	1721c <attsProcReadMultReq+0xcc>
        err = ATT_ERR_HANDLE;
   1726e:	2301      	movs	r3, #1
   17270:	e7cf      	b.n	17212 <attsProcReadMultReq+0xc2>
   17272:	bf00      	nop
   17274:	10006de8 	.word	0x10006de8

00017278 <attsProcReadGroupTypeReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcReadGroupTypeReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1727c:	b089      	sub	sp, #36	; 0x24
  uint16_t    endHandle;
  uint16_t    handle;
  uint8_t     uuidLen;
  uint8_t     attLen;
  uint8_t     err = ATT_SUCCESS;
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   1727e:	f44f 5320 	mov.w	r3, #10240	; 0x2800

  /* parse handles; pPacket then points to the uuid */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(startHandle, pPacket);
   17282:	f892 8009 	ldrb.w	r8, [r2, #9]
  uint8_t     primSvcUuid[ATT_16_UUID_LEN] = {UINT16_TO_BYTES(ATT_UUID_PRIMARY_SERVICE)};
   17286:	f8ad 301c 	strh.w	r3, [sp, #28]
  BSTREAM_TO_UINT16(endHandle, pPacket);

  /* get and verify uuid length */
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
   1728a:	3905      	subs	r1, #5
  BSTREAM_TO_UINT16(startHandle, pPacket);
   1728c:	7a93      	ldrb	r3, [r2, #10]
  uuidLen = len - ATT_READ_GROUP_TYPE_REQ_LEN;
   1728e:	b2cc      	uxtb	r4, r1
  BSTREAM_TO_UINT16(startHandle, pPacket);
   17290:	eb08 2803 	add.w	r8, r8, r3, lsl #8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   17294:	2c02      	cmp	r4, #2
{
   17296:	4606      	mov	r6, r0
  BSTREAM_TO_UINT16(startHandle, pPacket);
   17298:	fa1f f888 	uxth.w	r8, r8
  if (!((uuidLen == ATT_16_UUID_LEN) || (uuidLen == ATT_128_UUID_LEN)))
   1729c:	d00c      	beq.n	172b8 <attsProcReadGroupTypeReq+0x40>
   1729e:	2c10      	cmp	r4, #16
   172a0:	d00a      	beq.n	172b8 <attsProcReadGroupTypeReq+0x40>
      }
    }
  }

  /* set channel as busy for service discovery */
  attsDiscBusy(pCcb);
   172a2:	f7fe ffaf 	bl	16204 <attsDiscBusy>
    err = ATT_ERR_INVALID_PDU;
   172a6:	2304      	movs	r3, #4
  {
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
  }
  else
  {
    attsErrRsp(pCcb->handle, ATT_PDU_READ_GROUP_TYPE_REQ, startHandle, err);
   172a8:	8b30      	ldrh	r0, [r6, #24]
   172aa:	4642      	mov	r2, r8
   172ac:	2110      	movs	r1, #16
   172ae:	f7fe ff7f 	bl	161b0 <attsErrRsp>
  }
}
   172b2:	b009      	add	sp, #36	; 0x24
   172b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((startHandle == 0) || (startHandle > endHandle))
   172b8:	f1b8 0f00 	cmp.w	r8, #0
   172bc:	d104      	bne.n	172c8 <attsProcReadGroupTypeReq+0x50>
  attsDiscBusy(pCcb);
   172be:	4630      	mov	r0, r6
   172c0:	f7fe ffa0 	bl	16204 <attsDiscBusy>
    err = ATT_ERR_HANDLE;
   172c4:	2301      	movs	r3, #1
   172c6:	e7ef      	b.n	172a8 <attsProcReadGroupTypeReq+0x30>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   172c8:	7b13      	ldrb	r3, [r2, #12]
   172ca:	7ad7      	ldrb	r7, [r2, #11]
   172cc:	eb07 2703 	add.w	r7, r7, r3, lsl #8
   172d0:	b2bf      	uxth	r7, r7
  else if ((startHandle == 0) || (startHandle > endHandle))
   172d2:	45b8      	cmp	r8, r7
   172d4:	d8f3      	bhi.n	172be <attsProcReadGroupTypeReq+0x46>
  BSTREAM_TO_UINT16(endHandle, pPacket);
   172d6:	f102 050d 	add.w	r5, r2, #13
  else if (!attsUuid16Cmp(primSvcUuid, uuidLen, pPacket))
   172da:	462a      	mov	r2, r5
   172dc:	4621      	mov	r1, r4
   172de:	a807      	add	r0, sp, #28
   172e0:	f7ff fa02 	bl	166e8 <attsUuid16Cmp>
   172e4:	b920      	cbnz	r0, 172f0 <attsProcReadGroupTypeReq+0x78>
  attsDiscBusy(pCcb);
   172e6:	4630      	mov	r0, r6
   172e8:	f7fe ff8c 	bl	16204 <attsDiscBusy>
    err = ATT_ERR_GROUP_TYPE;
   172ec:	2310      	movs	r3, #16
   172ee:	e7db      	b.n	172a8 <attsProcReadGroupTypeReq+0x30>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   172f0:	4b8d      	ldr	r3, [pc, #564]	; (17528 <attsProcReadGroupTypeReq+0x2b0>)
   172f2:	f8d3 a000 	ldr.w	sl, [r3]
   172f6:	f1ba 0f00 	cmp.w	sl, #0
   172fa:	d046      	beq.n	1738a <attsProcReadGroupTypeReq+0x112>
        if (startHandle == ATT_HANDLE_MAX)
   172fc:	4653      	mov	r3, sl
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   172fe:	46c1      	mov	r9, r8
        if (startHandle == ATT_HANDLE_MAX)
   17300:	46a2      	mov	sl, r4
   17302:	461c      	mov	r4, r3
   17304:	e005      	b.n	17312 <attsProcReadGroupTypeReq+0x9a>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17306:	8a63      	ldrh	r3, [r4, #18]
   17308:	454b      	cmp	r3, r9
   1730a:	d238      	bcs.n	1737e <attsProcReadGroupTypeReq+0x106>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1730c:	6824      	ldr	r4, [r4, #0]
   1730e:	2c00      	cmp	r4, #0
   17310:	d03b      	beq.n	1738a <attsProcReadGroupTypeReq+0x112>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   17312:	f8b4 b010 	ldrh.w	fp, [r4, #16]
   17316:	45cb      	cmp	fp, r9
   17318:	d9f5      	bls.n	17306 <attsProcReadGroupTypeReq+0x8e>
   1731a:	455f      	cmp	r7, fp
   1731c:	d3f6      	bcc.n	1730c <attsProcReadGroupTypeReq+0x94>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   1731e:	8a63      	ldrh	r3, [r4, #18]
   17320:	455b      	cmp	r3, fp
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17322:	46d9      	mov	r9, fp
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17324:	d3f2      	bcc.n	1730c <attsProcReadGroupTypeReq+0x94>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17326:	f8d4 b004 	ldr.w	fp, [r4, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   1732a:	e00e      	b.n	1734a <attsProcReadGroupTypeReq+0xd2>
        if (startHandle == ATT_HANDLE_MAX)
   1732c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17330:	4599      	cmp	r9, r3
        (*pAttr)++;
   17332:	f10b 0b10 	add.w	fp, fp, #16
        startHandle++;
   17336:	f109 0301 	add.w	r3, r9, #1
        if (startHandle == ATT_HANDLE_MAX)
   1733a:	d0e7      	beq.n	1730c <attsProcReadGroupTypeReq+0x94>
        startHandle++;
   1733c:	fa1f f983 	uxth.w	r9, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17340:	8a63      	ldrh	r3, [r4, #18]
   17342:	454b      	cmp	r3, r9
   17344:	d3e2      	bcc.n	1730c <attsProcReadGroupTypeReq+0x94>
   17346:	454f      	cmp	r7, r9
   17348:	d3e0      	bcc.n	1730c <attsProcReadGroupTypeReq+0x94>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   1734a:	4658      	mov	r0, fp
   1734c:	462a      	mov	r2, r5
   1734e:	4651      	mov	r1, sl
   17350:	f7ff f9a8 	bl	166a4 <attsUuidCmp>
   17354:	2800      	cmp	r0, #0
   17356:	d0e9      	beq.n	1732c <attsProcReadGroupTypeReq+0xb4>
    if (handle == ATT_HANDLE_NONE)
   17358:	4654      	mov	r4, sl
   1735a:	f1b9 0f00 	cmp.w	r9, #0
   1735e:	d014      	beq.n	1738a <attsProcReadGroupTypeReq+0x112>
    else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   17360:	f89b 300f 	ldrb.w	r3, [fp, #15]
   17364:	7f30      	ldrb	r0, [r6, #28]
   17366:	464a      	mov	r2, r9
   17368:	2101      	movs	r1, #1
   1736a:	f7ff f9e9 	bl	16740 <attsPermissions>
   1736e:	b188      	cbz	r0, 17394 <attsProcReadGroupTypeReq+0x11c>
   17370:	9001      	str	r0, [sp, #4]
  attsDiscBusy(pCcb);
   17372:	4630      	mov	r0, r6
   17374:	f7fe ff46 	bl	16204 <attsDiscBusy>
   17378:	46c8      	mov	r8, r9
   1737a:	9b01      	ldr	r3, [sp, #4]
   1737c:	e794      	b.n	172a8 <attsProcReadGroupTypeReq+0x30>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1737e:	6863      	ldr	r3, [r4, #4]
   17380:	eba9 0b0b 	sub.w	fp, r9, fp
   17384:	eb03 1b0b 	add.w	fp, r3, fp, lsl #4
   17388:	e7dd      	b.n	17346 <attsProcReadGroupTypeReq+0xce>
  attsDiscBusy(pCcb);
   1738a:	4630      	mov	r0, r6
   1738c:	f7fe ff3a 	bl	16204 <attsDiscBusy>
      err = ATT_ERR_NOT_FOUND;
   17390:	230a      	movs	r3, #10
   17392:	e789      	b.n	172a8 <attsProcReadGroupTypeReq+0x30>
      if ((pBuf = attMsgAlloc(pCcb->mtu + L2C_PAYLOAD_START)) != NULL)
   17394:	8b70      	ldrh	r0, [r6, #26]
   17396:	3008      	adds	r0, #8
   17398:	b280      	uxth	r0, r0
   1739a:	f000 fb51 	bl	17a40 <attMsgAlloc>
   1739e:	4682      	mov	sl, r0
   173a0:	2800      	cmp	r0, #0
   173a2:	f000 80bc 	beq.w	1751e <attsProcReadGroupTypeReq+0x2a6>
        UINT8_TO_BSTREAM(p, ATT_PDU_READ_GROUP_TYPE_RSP);
   173a6:	2311      	movs	r3, #17
   173a8:	7203      	strb	r3, [r0, #8]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   173aa:	f8db 3008 	ldr.w	r3, [fp, #8]
   173ae:	881a      	ldrh	r2, [r3, #0]
   173b0:	8b73      	ldrh	r3, [r6, #26]
        UINT16_TO_BSTREAM(p, handle);
   173b2:	f880 900a 	strb.w	r9, [r0, #10]
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   173b6:	3b06      	subs	r3, #6
                  *pAttr->pLen : (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)));
   173b8:	4293      	cmp	r3, r2
   173ba:	bf28      	it	cs
   173bc:	4613      	movcs	r3, r2
        attLen = (*pAttr->pLen < (pCcb->mtu - ATT_READ_GROUP_TYPE_RSP_LEN - (2 * sizeof(uint16_t)))) ?
   173be:	b2db      	uxtb	r3, r3
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   173c0:	1d1a      	adds	r2, r3, #4
   173c2:	9301      	str	r3, [sp, #4]
        UINT16_TO_BSTREAM(p, handle);
   173c4:	ea4f 2319 	mov.w	r3, r9, lsr #8
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   173c8:	7242      	strb	r2, [r0, #9]
        UINT16_TO_BSTREAM(p, handle);
   173ca:	72c3      	strb	r3, [r0, #11]
        handle = attsFindServiceGroupEnd(handle);
   173cc:	4648      	mov	r0, r9
        UINT8_TO_BSTREAM(p, attLen + (2 * sizeof(uint16_t)));
   173ce:	9205      	str	r2, [sp, #20]
        handle = attsFindServiceGroupEnd(handle);
   173d0:	f7ff fb9e 	bl	16b10 <attsFindServiceGroupEnd>
        UINT16_TO_BSTREAM(p, handle);
   173d4:	0a03      	lsrs	r3, r0, #8
   173d6:	f88a 000c 	strb.w	r0, [sl, #12]
   173da:	f88a 300d 	strb.w	r3, [sl, #13]
        memcpy(p, pAttr->pValue, attLen);
   173de:	f8db 1004 	ldr.w	r1, [fp, #4]
   173e2:	f8dd b004 	ldr.w	fp, [sp, #4]
        UINT16_TO_BSTREAM(p, handle);
   173e6:	f10a 080e 	add.w	r8, sl, #14
        handle = attsFindServiceGroupEnd(handle);
   173ea:	4681      	mov	r9, r0
        memcpy(p, pAttr->pValue, attLen);
   173ec:	465a      	mov	r2, fp
   173ee:	4640      	mov	r0, r8
   173f0:	f7f4 fe86 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
   173f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   173f8:	4591      	cmp	r9, r2
        p += attLen;
   173fa:	44d8      	add	r8, fp
          if (handle == ATT_HANDLE_MAX)
   173fc:	d075      	beq.n	174ea <attsProcReadGroupTypeReq+0x272>
          if (++handle > endHandle)
   173fe:	f109 0901 	add.w	r9, r9, #1
   17402:	fa1f f989 	uxth.w	r9, r9
   17406:	454f      	cmp	r7, r9
   17408:	d36f      	bcc.n	174ea <attsProcReadGroupTypeReq+0x272>
   1740a:	f108 0204 	add.w	r2, r8, #4
   1740e:	464b      	mov	r3, r9
   17410:	f8cd a004 	str.w	sl, [sp, #4]
   17414:	46a1      	mov	r9, r4
   17416:	46b8      	mov	r8, r7
   17418:	4692      	mov	sl, r2
   1741a:	9602      	str	r6, [sp, #8]
   1741c:	461c      	mov	r4, r3
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   1741e:	4b42      	ldr	r3, [pc, #264]	; (17528 <attsProcReadGroupTypeReq+0x2b0>)
   17420:	681e      	ldr	r6, [r3, #0]
   17422:	f1aa 0304 	sub.w	r3, sl, #4
   17426:	9303      	str	r3, [sp, #12]
   17428:	b936      	cbnz	r6, 17438 <attsProcReadGroupTypeReq+0x1c0>
   1742a:	e073      	b.n	17514 <attsProcReadGroupTypeReq+0x29c>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   1742c:	8a72      	ldrh	r2, [r6, #18]
   1742e:	42a2      	cmp	r2, r4
   17430:	d26b      	bcs.n	1750a <attsProcReadGroupTypeReq+0x292>
  for (pGroup = attsCb.groupQueue.pHead; pGroup != NULL; pGroup = pGroup->pNext)
   17432:	6836      	ldr	r6, [r6, #0]
   17434:	2e00      	cmp	r6, #0
   17436:	d06d      	beq.n	17514 <attsProcReadGroupTypeReq+0x29c>
    if ((startHandle < pGroup->startHandle) && (endHandle >= pGroup->startHandle))
   17438:	8a33      	ldrh	r3, [r6, #16]
   1743a:	42a3      	cmp	r3, r4
   1743c:	d9f6      	bls.n	1742c <attsProcReadGroupTypeReq+0x1b4>
   1743e:	4598      	cmp	r8, r3
   17440:	d3f7      	bcc.n	17432 <attsProcReadGroupTypeReq+0x1ba>
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17442:	8a72      	ldrh	r2, [r6, #18]
   17444:	429a      	cmp	r2, r3
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   17446:	461c      	mov	r4, r3
    if ((startHandle >= pGroup->startHandle) && (startHandle <= pGroup->endHandle))
   17448:	d3f3      	bcc.n	17432 <attsProcReadGroupTypeReq+0x1ba>
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1744a:	6877      	ldr	r7, [r6, #4]
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   1744c:	e00d      	b.n	1746a <attsProcReadGroupTypeReq+0x1f2>
        if (startHandle == ATT_HANDLE_MAX)
   1744e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17452:	429c      	cmp	r4, r3
        (*pAttr)++;
   17454:	f107 0710 	add.w	r7, r7, #16
        startHandle++;
   17458:	f104 0301 	add.w	r3, r4, #1
        if (startHandle == ATT_HANDLE_MAX)
   1745c:	d0e9      	beq.n	17432 <attsProcReadGroupTypeReq+0x1ba>
        startHandle++;
   1745e:	b29c      	uxth	r4, r3
      while ((startHandle <= pGroup->endHandle) && (startHandle <= endHandle))
   17460:	8a73      	ldrh	r3, [r6, #18]
   17462:	42a3      	cmp	r3, r4
   17464:	d3e5      	bcc.n	17432 <attsProcReadGroupTypeReq+0x1ba>
   17466:	45a0      	cmp	r8, r4
   17468:	d3e3      	bcc.n	17432 <attsProcReadGroupTypeReq+0x1ba>
        if (attsUuidCmp(*pAttr, uuidLen, pUuid))
   1746a:	4638      	mov	r0, r7
   1746c:	462a      	mov	r2, r5
   1746e:	4649      	mov	r1, r9
   17470:	f7ff f918 	bl	166a4 <attsUuidCmp>
   17474:	2800      	cmp	r0, #0
   17476:	d0ea      	beq.n	1744e <attsProcReadGroupTypeReq+0x1d6>
          if ((handle = attsFindUuidInRange(handle, endHandle, uuidLen,
   17478:	2c00      	cmp	r4, #0
   1747a:	d04b      	beq.n	17514 <attsProcReadGroupTypeReq+0x29c>
          if ((*pAttr->pLen == attLen) &&
   1747c:	68bb      	ldr	r3, [r7, #8]
   1747e:	881b      	ldrh	r3, [r3, #0]
   17480:	455b      	cmp	r3, fp
   17482:	d147      	bne.n	17514 <attsProcReadGroupTypeReq+0x29c>
              (attsPermissions(pCcb->connId, ATTS_PERMIT_READ,
   17484:	9e02      	ldr	r6, [sp, #8]
   17486:	7bfb      	ldrb	r3, [r7, #15]
   17488:	7f30      	ldrb	r0, [r6, #28]
   1748a:	4622      	mov	r2, r4
   1748c:	2101      	movs	r1, #1
   1748e:	f7ff f957 	bl	16740 <attsPermissions>
          if ((*pAttr->pLen == attLen) &&
   17492:	2800      	cmp	r0, #0
   17494:	d13e      	bne.n	17514 <attsProcReadGroupTypeReq+0x29c>
                (pBuf + pCcb->mtu + L2C_PAYLOAD_START))
   17496:	8b72      	ldrh	r2, [r6, #26]
   17498:	9b01      	ldr	r3, [sp, #4]
   1749a:	3208      	adds	r2, #8
   1749c:	441a      	add	r2, r3
   1749e:	eb0b 030a 	add.w	r3, fp, sl
            if ((p + attLen + (2 * sizeof(uint16_t))) <=
   174a2:	4293      	cmp	r3, r2
   174a4:	9304      	str	r3, [sp, #16]
   174a6:	d835      	bhi.n	17514 <attsProcReadGroupTypeReq+0x29c>
              UINT16_TO_BSTREAM(p, handle);
   174a8:	0a22      	lsrs	r2, r4, #8
   174aa:	f80a 4c04 	strb.w	r4, [sl, #-4]
   174ae:	f80a 2c03 	strb.w	r2, [sl, #-3]
              handle = attsFindServiceGroupEnd(handle);
   174b2:	4620      	mov	r0, r4
   174b4:	f7ff fb2c 	bl	16b10 <attsFindServiceGroupEnd>
              UINT16_TO_BSTREAM(p, handle);
   174b8:	0a02      	lsrs	r2, r0, #8
   174ba:	f80a 0c02 	strb.w	r0, [sl, #-2]
   174be:	f80a 2c01 	strb.w	r2, [sl, #-1]
              handle = attsFindServiceGroupEnd(handle);
   174c2:	4604      	mov	r4, r0
              memcpy(p, pAttr->pValue, attLen);
   174c4:	6879      	ldr	r1, [r7, #4]
   174c6:	465a      	mov	r2, fp
   174c8:	4650      	mov	r0, sl
   174ca:	f7f4 fe19 	bl	c100 <memcpy>
          if (handle == ATT_HANDLE_MAX)
   174ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   174d2:	429c      	cmp	r4, r3
   174d4:	9b04      	ldr	r3, [sp, #16]
   174d6:	d005      	beq.n	174e4 <attsProcReadGroupTypeReq+0x26c>
          if (++handle > endHandle)
   174d8:	3401      	adds	r4, #1
   174da:	9a05      	ldr	r2, [sp, #20]
   174dc:	b2a4      	uxth	r4, r4
   174de:	45a0      	cmp	r8, r4
   174e0:	4492      	add	sl, r2
   174e2:	d29c      	bcs.n	1741e <attsProcReadGroupTypeReq+0x1a6>
   174e4:	e9dd a601 	ldrd	sl, r6, [sp, #4]
   174e8:	4698      	mov	r8, r3
  attsDiscBusy(pCcb);
   174ea:	4630      	mov	r0, r6
   174ec:	f7fe fe8a 	bl	16204 <attsDiscBusy>
    L2cDataReq(L2C_CID_ATT, pCcb->handle, (p - (pBuf + L2C_PAYLOAD_START)), pBuf);
   174f0:	f10a 0208 	add.w	r2, sl, #8
   174f4:	eba8 0202 	sub.w	r2, r8, r2
   174f8:	8b31      	ldrh	r1, [r6, #24]
   174fa:	4653      	mov	r3, sl
   174fc:	b292      	uxth	r2, r2
   174fe:	2004      	movs	r0, #4
   17500:	f003 fe60 	bl	1b1c4 <L2cDataReq>
}
   17504:	b009      	add	sp, #36	; 0x24
   17506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      *pAttr = &pGroup->pAttr[startHandle - pGroup->startHandle];
   1750a:	6872      	ldr	r2, [r6, #4]
   1750c:	1ae3      	subs	r3, r4, r3
   1750e:	eb02 1703 	add.w	r7, r2, r3, lsl #4
   17512:	e7a8      	b.n	17466 <attsProcReadGroupTypeReq+0x1ee>
   17514:	e9dd 6802 	ldrd	r6, r8, [sp, #8]
   17518:	f8dd a004 	ldr.w	sl, [sp, #4]
   1751c:	e7e5      	b.n	174ea <attsProcReadGroupTypeReq+0x272>
  attsDiscBusy(pCcb);
   1751e:	4630      	mov	r0, r6
   17520:	f7fe fe70 	bl	16204 <attsDiscBusy>
        err = ATT_ERR_RESOURCES;
   17524:	2311      	movs	r3, #17
   17526:	e6bf      	b.n	172a8 <attsProcReadGroupTypeReq+0x30>
   17528:	10006de8 	.word	0x10006de8

0001752c <attsProcWrite>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcWrite(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   1752c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t     err = ATT_SUCCESS;

  /* parse opcode handle, calculate write length */
  pPacket += L2C_PAYLOAD_START;
  BSTREAM_TO_UINT8(opcode, pPacket);
  BSTREAM_TO_UINT16(handle, pPacket);
   17530:	7a93      	ldrb	r3, [r2, #10]
   17532:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT8(opcode, pPacket);
   17534:	f892 9008 	ldrb.w	r9, [r2, #8]
  BSTREAM_TO_UINT16(handle, pPacket);
   17538:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
   1753c:	b087      	sub	sp, #28
  BSTREAM_TO_UINT16(handle, pPacket);
   1753e:	b2a4      	uxth	r4, r4
{
   17540:	460d      	mov	r5, r1
   17542:	4606      	mov	r6, r0
  writeLen = len - ATT_WRITE_REQ_LEN;

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   17544:	a905      	add	r1, sp, #20
   17546:	4620      	mov	r0, r4
{
   17548:	4617      	mov	r7, r2
  if ((pAttr = attsFindByHandle(handle, &pGroup)) != NULL)
   1754a:	f7ff f8e1 	bl	16710 <attsFindByHandle>
   1754e:	b350      	cbz	r0, 175a6 <attsProcWrite+0x7a>
  {
    /* verify permissions */
    if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   17550:	7bc3      	ldrb	r3, [r0, #15]
   17552:	4680      	mov	r8, r0
   17554:	4622      	mov	r2, r4
   17556:	7f30      	ldrb	r0, [r6, #28]
   17558:	2110      	movs	r1, #16
   1755a:	f7ff f8f1 	bl	16740 <attsPermissions>
   1755e:	4603      	mov	r3, r0
   17560:	b158      	cbz	r0, 1757a <attsProcWrite+0x4e>
  {
    err = ATT_ERR_HANDLE;
  }

  /* send error response for write req only */
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   17562:	f1b9 0f12 	cmp.w	r9, #18
   17566:	d121      	bne.n	175ac <attsProcWrite+0x80>
  {
    if (err == ATT_RSP_PENDING)
   17568:	2b79      	cmp	r3, #121	; 0x79
   1756a:	d114      	bne.n	17596 <attsProcWrite+0x6a>
    {
      /* set response pending */
      pCcb->control |= ATT_CCB_STATUS_RSP_PENDING;
   1756c:	7f73      	ldrb	r3, [r6, #29]
   1756e:	f043 0308 	orr.w	r3, r3, #8
   17572:	7773      	strb	r3, [r6, #29]
    else
    {
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
    }
  }
}
   17574:	b007      	add	sp, #28
   17576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   1757a:	f898 300e 	ldrb.w	r3, [r8, #14]
   1757e:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  writeLen = len - ATT_WRITE_REQ_LEN;
   17582:	3d03      	subs	r5, #3
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   17584:	0719      	lsls	r1, r3, #28
  writeLen = len - ATT_WRITE_REQ_LEN;
   17586:	b2ad      	uxth	r5, r5
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   17588:	d413      	bmi.n	175b2 <attsProcWrite+0x86>
   1758a:	42aa      	cmp	r2, r5
   1758c:	d013      	beq.n	175b6 <attsProcWrite+0x8a>
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   1758e:	f1b9 0f12 	cmp.w	r9, #18
   17592:	d10b      	bne.n	175ac <attsProcWrite+0x80>
      err = ATT_ERR_LENGTH;
   17594:	230d      	movs	r3, #13
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   17596:	8b30      	ldrh	r0, [r6, #24]
   17598:	4622      	mov	r2, r4
   1759a:	2112      	movs	r1, #18
   1759c:	f7fe fe08 	bl	161b0 <attsErrRsp>
}
   175a0:	b007      	add	sp, #28
   175a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   175a6:	f1b9 0f12 	cmp.w	r9, #18
   175aa:	d033      	beq.n	17614 <attsProcWrite+0xe8>
}
   175ac:	b007      	add	sp, #28
   175ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0) &&
   175b2:	42aa      	cmp	r2, r5
   175b4:	d3eb      	bcc.n	1758e <attsProcWrite+0x62>
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   175b6:	0798      	lsls	r0, r3, #30
  BSTREAM_TO_UINT16(handle, pPacket);
   175b8:	f107 010b 	add.w	r1, r7, #11
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   175bc:	d51e      	bpl.n	175fc <attsProcWrite+0xd0>
          (pGroup->writeCback != NULL))
   175be:	9a05      	ldr	r2, [sp, #20]
   175c0:	68d7      	ldr	r7, [r2, #12]
      if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   175c2:	b1df      	cbz	r7, 175fc <attsProcWrite+0xd0>
        err = (*pGroup->writeCback)(pCcb->connId, handle, opcode, 0, writeLen,
   175c4:	e9cd 1801 	strd	r1, r8, [sp, #4]
   175c8:	9500      	str	r5, [sp, #0]
   175ca:	2300      	movs	r3, #0
   175cc:	7f30      	ldrb	r0, [r6, #28]
   175ce:	464a      	mov	r2, r9
   175d0:	4621      	mov	r1, r4
   175d2:	47b8      	blx	r7
   175d4:	4603      	mov	r3, r0
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
   175d6:	2b00      	cmp	r3, #0
   175d8:	d1c3      	bne.n	17562 <attsProcWrite+0x36>
   175da:	f1b9 0f12 	cmp.w	r9, #18
   175de:	d1e5      	bne.n	175ac <attsProcWrite+0x80>
        if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_WRITE_RSP_LEN)) != NULL)
   175e0:	2009      	movs	r0, #9
   175e2:	f000 fa2d 	bl	17a40 <attMsgAlloc>
   175e6:	2800      	cmp	r0, #0
   175e8:	d0e0      	beq.n	175ac <attsProcWrite+0x80>
          UINT8_TO_BSTREAM(p, ATT_PDU_WRITE_RSP);
   175ea:	2313      	movs	r3, #19
   175ec:	7203      	strb	r3, [r0, #8]
          L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_WRITE_RSP_LEN, pBuf);
   175ee:	8b31      	ldrh	r1, [r6, #24]
   175f0:	4603      	mov	r3, r0
   175f2:	2201      	movs	r2, #1
   175f4:	2004      	movs	r0, #4
   175f6:	f003 fde5 	bl	1b1c4 <L2cDataReq>
  if (err && (opcode == ATT_PDU_WRITE_REQ))
   175fa:	e7d7      	b.n	175ac <attsProcWrite+0x80>
      else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   175fc:	069a      	lsls	r2, r3, #26
   175fe:	d510      	bpl.n	17622 <attsProcWrite+0xf6>
   17600:	4b0e      	ldr	r3, [pc, #56]	; (1763c <attsProcWrite+0x110>)
   17602:	695f      	ldr	r7, [r3, #20]
   17604:	b16f      	cbz	r7, 17622 <attsProcWrite+0xf6>
        err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, handle, pPacket);
   17606:	460b      	mov	r3, r1
   17608:	7f30      	ldrb	r0, [r6, #28]
   1760a:	4622      	mov	r2, r4
   1760c:	2109      	movs	r1, #9
   1760e:	47b8      	blx	r7
   17610:	4603      	mov	r3, r0
   17612:	e7e0      	b.n	175d6 <attsProcWrite+0xaa>
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   17614:	8b30      	ldrh	r0, [r6, #24]
    err = ATT_ERR_HANDLE;
   17616:	2301      	movs	r3, #1
      attsErrRsp(pCcb->handle, ATT_PDU_WRITE_REQ, handle, err);
   17618:	4622      	mov	r2, r4
   1761a:	2112      	movs	r1, #18
   1761c:	f7fe fdc8 	bl	161b0 <attsErrRsp>
   17620:	e7be      	b.n	175a0 <attsProcWrite+0x74>
        memcpy(pAttr->pValue, pPacket, writeLen);
   17622:	f8d8 0004 	ldr.w	r0, [r8, #4]
   17626:	462a      	mov	r2, r5
   17628:	f7f4 fd6a 	bl	c100 <memcpy>
        if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   1762c:	f898 300e 	ldrb.w	r3, [r8, #14]
   17630:	071b      	lsls	r3, r3, #28
   17632:	d5d2      	bpl.n	175da <attsProcWrite+0xae>
          *(pAttr->pLen) = writeLen;
   17634:	f8d8 3008 	ldr.w	r3, [r8, #8]
   17638:	801d      	strh	r5, [r3, #0]
      if (err == ATT_SUCCESS && opcode == ATT_PDU_WRITE_REQ)
   1763a:	e7ce      	b.n	175da <attsProcWrite+0xae>
   1763c:	10006de8 	.word	0x10006de8

00017640 <attsProcPrepWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcPrepWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t        writeLen;
  uint8_t         err = ATT_SUCCESS;

  /* parse handle and offset, calculate write length */
  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;
  BSTREAM_TO_UINT16(handle, pPacket);
   17644:	7a93      	ldrb	r3, [r2, #10]
   17646:	7a54      	ldrb	r4, [r2, #9]
  BSTREAM_TO_UINT16(offset, pPacket);
   17648:	f892 800b 	ldrb.w	r8, [r2, #11]
   1764c:	f892 900c 	ldrb.w	r9, [r2, #12]
  BSTREAM_TO_UINT16(handle, pPacket);
   17650:	eb04 2403 	add.w	r4, r4, r3, lsl #8
{
   17654:	b089      	sub	sp, #36	; 0x24
  BSTREAM_TO_UINT16(handle, pPacket);
   17656:	b2a4      	uxth	r4, r4
{
   17658:	4606      	mov	r6, r0
   1765a:	460f      	mov	r7, r1
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */

  /* find attribute */
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   1765c:	4620      	mov	r0, r4
   1765e:	a907      	add	r1, sp, #28
{
   17660:	4693      	mov	fp, r2
  if ((pAttr = attsFindByHandle(handle, &pGroup)) == NULL)
   17662:	f7ff f855 	bl	16710 <attsFindByHandle>
   17666:	b338      	cbz	r0, 176b8 <attsProcPrepWriteReq+0x78>
  {
    /* attribute not found */
    err = ATT_ERR_HANDLE;
  }
  /* verify permissions */
  else if ((err = attsPermissions(pCcb->connId, ATTS_PERMIT_WRITE,
   17668:	7bc3      	ldrb	r3, [r0, #15]
   1766a:	4605      	mov	r5, r0
   1766c:	4622      	mov	r2, r4
   1766e:	7f30      	ldrb	r0, [r6, #28]
   17670:	2110      	movs	r1, #16
   17672:	f7ff f865 	bl	16740 <attsPermissions>
   17676:	4603      	mov	r3, r0
   17678:	b138      	cbz	r0, 1768a <attsProcPrepWriteReq+0x4a>
    }
  }

  if (err)
  {
    attsErrRsp(pCcb->handle, ATT_PDU_PREP_WRITE_REQ, handle, err);
   1767a:	8b30      	ldrh	r0, [r6, #24]
   1767c:	4622      	mov	r2, r4
   1767e:	2116      	movs	r1, #22
   17680:	f7fe fd96 	bl	161b0 <attsErrRsp>
  }
}
   17684:	b009      	add	sp, #36	; 0x24
   17686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BSTREAM_TO_UINT16(offset, pPacket);
   1768a:	eb08 2809 	add.w	r8, r8, r9, lsl #8
   1768e:	fa1f f888 	uxth.w	r8, r8
  else if ((offset != 0) && ((pAttr->settings & ATTS_SET_ALLOW_OFFSET) == 0))
   17692:	7bab      	ldrb	r3, [r5, #14]
   17694:	f1b8 0f00 	cmp.w	r8, #0
   17698:	d003      	beq.n	176a2 <attsProcPrepWriteReq+0x62>
   1769a:	06d9      	lsls	r1, r3, #27
   1769c:	d401      	bmi.n	176a2 <attsProcPrepWriteReq+0x62>
    err = ATT_ERR_NOT_LONG;
   1769e:	230b      	movs	r3, #11
   176a0:	e7eb      	b.n	1767a <attsProcPrepWriteReq+0x3a>
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
   176a2:	f1a7 0905 	sub.w	r9, r7, #5
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   176a6:	071a      	lsls	r2, r3, #28
  writeLen = len - ATT_PREP_WRITE_REQ_LEN;    /* length of value being written */
   176a8:	fa1f f989 	uxth.w	r9, r9
  else if (((pAttr->settings & ATTS_SET_VARIABLE_LEN) == 0) &&
   176ac:	d406      	bmi.n	176bc <attsProcPrepWriteReq+0x7c>
   176ae:	89ab      	ldrh	r3, [r5, #12]
   176b0:	454b      	cmp	r3, r9
   176b2:	d003      	beq.n	176bc <attsProcPrepWriteReq+0x7c>
    err = ATT_ERR_LENGTH;
   176b4:	230d      	movs	r3, #13
   176b6:	e7e0      	b.n	1767a <attsProcPrepWriteReq+0x3a>
    err = ATT_ERR_HANDLE;
   176b8:	2301      	movs	r3, #1
   176ba:	e7de      	b.n	1767a <attsProcPrepWriteReq+0x3a>
  else if (WsfQueueCount(&pCcb->prepWriteQueue) >= pAttCfg->numPrepWrites)
   176bc:	4630      	mov	r0, r6
   176be:	f000 fcfd 	bl	180bc <WsfQueueCount>
   176c2:	4b2a      	ldr	r3, [pc, #168]	; (1776c <attsProcPrepWriteReq+0x12c>)
   176c4:	681b      	ldr	r3, [r3, #0]
   176c6:	79db      	ldrb	r3, [r3, #7]
   176c8:	4283      	cmp	r3, r0
   176ca:	d801      	bhi.n	176d0 <attsProcPrepWriteReq+0x90>
    err = ATT_ERR_QUEUE_FULL;
   176cc:	2309      	movs	r3, #9
   176ce:	e7d4      	b.n	1767a <attsProcPrepWriteReq+0x3a>
  else if ((pPrep = WsfBufAlloc(sizeof(attsPrepWrite_t) - 1 + writeLen)) == NULL)
   176d0:	1db8      	adds	r0, r7, #6
   176d2:	b280      	uxth	r0, r0
   176d4:	f000 fa84 	bl	17be0 <WsfBufAlloc>
   176d8:	4682      	mov	sl, r0
   176da:	2800      	cmp	r0, #0
   176dc:	d044      	beq.n	17768 <attsProcPrepWriteReq+0x128>
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   176de:	7bab      	ldrb	r3, [r5, #14]
   176e0:	079b      	lsls	r3, r3, #30
  BSTREAM_TO_UINT16(offset, pPacket);
   176e2:	f10b 0b0d 	add.w	fp, fp, #13
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   176e6:	d510      	bpl.n	1770a <attsProcPrepWriteReq+0xca>
          (pGroup->writeCback != NULL))
   176e8:	9b07      	ldr	r3, [sp, #28]
   176ea:	68db      	ldr	r3, [r3, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   176ec:	9305      	str	r3, [sp, #20]
   176ee:	b163      	cbz	r3, 1770a <attsProcPrepWriteReq+0xca>
    err = (*pGroup->writeCback)(pCcb->connId, handle, ATT_PDU_PREP_WRITE_REQ, 0, writeLen,
   176f0:	e9cd b501 	strd	fp, r5, [sp, #4]
   176f4:	f8cd 9000 	str.w	r9, [sp]
   176f8:	2300      	movs	r3, #0
   176fa:	7f30      	ldrb	r0, [r6, #28]
   176fc:	9d05      	ldr	r5, [sp, #20]
   176fe:	2216      	movs	r2, #22
   17700:	4621      	mov	r1, r4
   17702:	47a8      	blx	r5
  if (err == ATT_SUCCESS)
   17704:	4603      	mov	r3, r0
   17706:	2800      	cmp	r0, #0
   17708:	d1b7      	bne.n	1767a <attsProcPrepWriteReq+0x3a>
    memcpy(pPrep->packet, pPacket, writeLen);
   1770a:	464a      	mov	r2, r9
   1770c:	4659      	mov	r1, fp
    pPrep->writeLen = writeLen;
   1770e:	f8aa 9004 	strh.w	r9, [sl, #4]
    pPrep->handle = handle;
   17712:	f8aa 4006 	strh.w	r4, [sl, #6]
    pPrep->offset = offset;
   17716:	f8aa 8008 	strh.w	r8, [sl, #8]
    memcpy(pPrep->packet, pPacket, writeLen);
   1771a:	f10a 000a 	add.w	r0, sl, #10
   1771e:	f7f4 fcef 	bl	c100 <memcpy>
    WsfQueueEnq(&pCcb->prepWriteQueue, pPrep);
   17722:	4651      	mov	r1, sl
   17724:	4630      	mov	r0, r6
   17726:	f000 fc5b 	bl	17fe0 <WsfQueueEnq>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_PREP_WRITE_RSP_LEN + writeLen)) != NULL)
   1772a:	f107 0008 	add.w	r0, r7, #8
   1772e:	b280      	uxth	r0, r0
   17730:	f000 f986 	bl	17a40 <attMsgAlloc>
   17734:	4605      	mov	r5, r0
   17736:	2800      	cmp	r0, #0
   17738:	d0a4      	beq.n	17684 <attsProcPrepWriteReq+0x44>
      UINT16_TO_BSTREAM(p, handle);
   1773a:	7244      	strb	r4, [r0, #9]
      UINT16_TO_BSTREAM(p, offset);
   1773c:	f880 800b 	strb.w	r8, [r0, #11]
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
   17740:	2317      	movs	r3, #23
      UINT16_TO_BSTREAM(p, handle);
   17742:	0a24      	lsrs	r4, r4, #8
      UINT16_TO_BSTREAM(p, offset);
   17744:	ea4f 2818 	mov.w	r8, r8, lsr #8
      memcpy(p, pPacket, writeLen);
   17748:	4659      	mov	r1, fp
      UINT16_TO_BSTREAM(p, handle);
   1774a:	7284      	strb	r4, [r0, #10]
      UINT16_TO_BSTREAM(p, offset);
   1774c:	f880 800c 	strb.w	r8, [r0, #12]
      memcpy(p, pPacket, writeLen);
   17750:	464a      	mov	r2, r9
      UINT8_TO_BSTREAM(p, ATT_PDU_PREP_WRITE_RSP);
   17752:	7203      	strb	r3, [r0, #8]
      memcpy(p, pPacket, writeLen);
   17754:	300d      	adds	r0, #13
   17756:	f7f4 fcd3 	bl	c100 <memcpy>
      L2cDataReq(L2C_CID_ATT, pCcb->handle, (ATT_PREP_WRITE_RSP_LEN + writeLen), pBuf);
   1775a:	8b31      	ldrh	r1, [r6, #24]
   1775c:	462b      	mov	r3, r5
   1775e:	463a      	mov	r2, r7
   17760:	2004      	movs	r0, #4
   17762:	f003 fd2f 	bl	1b1c4 <L2cDataReq>
  if (err)
   17766:	e78d      	b.n	17684 <attsProcPrepWriteReq+0x44>
    err = ATT_ERR_RESOURCES;
   17768:	2311      	movs	r3, #17
   1776a:	e786      	b.n	1767a <attsProcPrepWriteReq+0x3a>
   1776c:	10002e50 	.word	0x10002e50

00017770 <attsProcExecWriteReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void attsProcExecWriteReq(attCcb_t *pCcb, uint16_t len, uint8_t *pPacket)
{
   17770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t         err = ATT_SUCCESS;

  pPacket += L2C_PAYLOAD_START + ATT_HDR_LEN;

  /* if cancelling all prepared writes */
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
   17774:	7a53      	ldrb	r3, [r2, #9]
{
   17776:	b086      	sub	sp, #24
   17778:	4606      	mov	r6, r0
  if (*pPacket == ATT_EXEC_WRITE_CANCEL)
   1777a:	2b00      	cmp	r3, #0
   1777c:	d04d      	beq.n	1781a <attsProcExecWriteReq+0xaa>
  {
    /* free all queued buffers */
    attsClearPrepWrites(pCcb);
  }
  /* else writing all prepared writes */
  else if (*pPacket == ATT_EXEC_WRITE_ALL)
   1777e:	2b01      	cmp	r3, #1
   17780:	d141      	bne.n	17806 <attsProcExecWriteReq+0x96>
  {
    /* iterate over prepare write queue and verify offset and length */
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   17782:	6804      	ldr	r4, [r0, #0]
   17784:	b17c      	cbz	r4, 177a6 <attsProcExecWriteReq+0x36>
    {
      /* find attribute */
      if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) != NULL)
   17786:	88e0      	ldrh	r0, [r4, #6]
   17788:	a904      	add	r1, sp, #16
   1778a:	f7fe ffc1 	bl	16710 <attsFindByHandle>
   1778e:	b138      	cbz	r0, 177a0 <attsProcExecWriteReq+0x30>
      {
        /* verify offset */
        if (pPrep->offset > pAttr->maxLen)
   17790:	8921      	ldrh	r1, [r4, #8]
   17792:	8982      	ldrh	r2, [r0, #12]
   17794:	4291      	cmp	r1, r2
   17796:	d87a      	bhi.n	1788e <attsProcExecWriteReq+0x11e>
        {
          err = ATT_ERR_OFFSET;
        }
        /* verify write length with offset */
        else if ((pPrep->writeLen + pPrep->offset) > pAttr->maxLen)
   17798:	88a3      	ldrh	r3, [r4, #4]
   1779a:	440b      	add	r3, r1
   1779c:	4293      	cmp	r3, r2
   1779e:	dc7b      	bgt.n	17898 <attsProcExecWriteReq+0x128>
    for (pPrep = pCcb->prepWriteQueue.pHead; pPrep != NULL; pPrep = pPrep->pNext)
   177a0:	6824      	ldr	r4, [r4, #0]
   177a2:	2c00      	cmp	r4, #0
   177a4:	d1ef      	bne.n	17786 <attsProcExecWriteReq+0x16>

    /* if length and offset checks ok then write all buffers in queue */
    if (err == ATT_SUCCESS)
    {
      /* for each buffer */
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   177a6:	4630      	mov	r0, r6
   177a8:	f000 fc30 	bl	1800c <WsfQueueDeq>
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   177ac:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1789c <attsProcExecWriteReq+0x12c>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   177b0:	2700      	movs	r7, #0
   177b2:	4604      	mov	r4, r0
   177b4:	b328      	cbz	r0, 17802 <attsProcExecWriteReq+0x92>
  if ((pAttr = attsFindByHandle(pPrep->handle, &pGroup)) == NULL)
   177b6:	88e0      	ldrh	r0, [r4, #6]
   177b8:	a905      	add	r1, sp, #20
   177ba:	f7fe ffa9 	bl	16710 <attsFindByHandle>
   177be:	4605      	mov	r5, r0
   177c0:	2800      	cmp	r0, #0
   177c2:	d04d      	beq.n	17860 <attsProcExecWriteReq+0xf0>
  else if (!(pAttr->permissions & ATTS_PERMIT_WRITE))
   177c4:	7bc3      	ldrb	r3, [r0, #15]
   177c6:	06d8      	lsls	r0, r3, #27
   177c8:	d545      	bpl.n	17856 <attsProcExecWriteReq+0xe6>
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   177ca:	7bab      	ldrb	r3, [r5, #14]
   177cc:	0799      	lsls	r1, r3, #30
  p = pPrep->packet;
   177ce:	f104 020a 	add.w	r2, r4, #10
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   177d2:	d534      	bpl.n	1783e <attsProcExecWriteReq+0xce>
           (pGroup->writeCback != NULL))
   177d4:	9905      	ldr	r1, [sp, #20]
   177d6:	68cf      	ldr	r7, [r1, #12]
  else if ((pAttr->settings & ATTS_SET_WRITE_CBACK) &&
   177d8:	b38f      	cbz	r7, 1783e <attsProcExecWriteReq+0xce>
    err = (*pGroup->writeCback)(pCcb->connId, pPrep->handle, ATT_PDU_EXEC_WRITE_REQ,
   177da:	8923      	ldrh	r3, [r4, #8]
   177dc:	88e1      	ldrh	r1, [r4, #6]
   177de:	e9cd 2501 	strd	r2, r5, [sp, #4]
   177e2:	88a2      	ldrh	r2, [r4, #4]
   177e4:	9200      	str	r2, [sp, #0]
   177e6:	7f30      	ldrb	r0, [r6, #28]
   177e8:	2218      	movs	r2, #24
   177ea:	47b8      	blx	r7
   177ec:	4607      	mov	r7, r0
      {
        /* write buffer */
        if ((err = attsExecPrepWrite(pCcb, pPrep)) != ATT_SUCCESS)
   177ee:	bb9f      	cbnz	r7, 17858 <attsProcExecWriteReq+0xe8>
          /* write failed; discard remaining prepared writes */
          attsClearPrepWrites(pCcb);
        }

        /* free buffer */
        WsfBufFree(pPrep);
   177f0:	4620      	mov	r0, r4
   177f2:	f000 fa25 	bl	17c40 <WsfBufFree>
      while ((pPrep = WsfQueueDeq(&pCcb->prepWriteQueue)) != NULL)
   177f6:	4630      	mov	r0, r6
   177f8:	f000 fc08 	bl	1800c <WsfQueueDeq>
   177fc:	4604      	mov	r4, r0
   177fe:	2800      	cmp	r0, #0
   17800:	d1d9      	bne.n	177b6 <attsProcExecWriteReq+0x46>
  {
    err = ATT_ERR_INVALID_PDU;
  }

  /* send response or error response */
  if (err)
   17802:	b167      	cbz	r7, 1781e <attsProcExecWriteReq+0xae>
   17804:	e000      	b.n	17808 <attsProcExecWriteReq+0x98>
    err = ATT_ERR_INVALID_PDU;
   17806:	2704      	movs	r7, #4
  {
    attsErrRsp(pCcb->handle, ATT_PDU_EXEC_WRITE_REQ, 0, err);
   17808:	8b30      	ldrh	r0, [r6, #24]
   1780a:	463b      	mov	r3, r7
   1780c:	2200      	movs	r2, #0
   1780e:	2118      	movs	r1, #24
   17810:	f7fe fcce 	bl	161b0 <attsErrRsp>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);

      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
    }
  }
}
   17814:	b006      	add	sp, #24
   17816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    attsClearPrepWrites(pCcb);
   1781a:	f7fe fce7 	bl	161ec <attsClearPrepWrites>
    if ((pBuf = attMsgAlloc(L2C_PAYLOAD_START + ATT_EXEC_WRITE_RSP_LEN)) != NULL)
   1781e:	2009      	movs	r0, #9
   17820:	f000 f90e 	bl	17a40 <attMsgAlloc>
   17824:	2800      	cmp	r0, #0
   17826:	d0f5      	beq.n	17814 <attsProcExecWriteReq+0xa4>
      UINT8_TO_BSTREAM(p, ATT_PDU_EXEC_WRITE_RSP);
   17828:	2319      	movs	r3, #25
   1782a:	7203      	strb	r3, [r0, #8]
      L2cDataReq(L2C_CID_ATT, pCcb->handle, ATT_EXEC_WRITE_RSP_LEN, pBuf);
   1782c:	8b31      	ldrh	r1, [r6, #24]
   1782e:	4603      	mov	r3, r0
   17830:	2201      	movs	r2, #1
   17832:	2004      	movs	r0, #4
   17834:	f003 fcc6 	bl	1b1c4 <L2cDataReq>
}
   17838:	b006      	add	sp, #24
   1783a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if ((pAttr->settings & ATTS_SET_CCC) && (attsCb.cccCback != NULL))
   1783e:	069b      	lsls	r3, r3, #26
   17840:	d513      	bpl.n	1786a <attsProcExecWriteReq+0xfa>
   17842:	f8d8 7014 	ldr.w	r7, [r8, #20]
   17846:	b187      	cbz	r7, 1786a <attsProcExecWriteReq+0xfa>
    err = (*attsCb.cccCback)(pCcb->connId, ATT_METHOD_WRITE, pPrep->handle, p);
   17848:	4613      	mov	r3, r2
   1784a:	7f30      	ldrb	r0, [r6, #28]
   1784c:	88e2      	ldrh	r2, [r4, #6]
   1784e:	2109      	movs	r1, #9
   17850:	47b8      	blx	r7
   17852:	4607      	mov	r7, r0
   17854:	e7cb      	b.n	177ee <attsProcExecWriteReq+0x7e>
    err = ATT_ERR_WRITE;
   17856:	2703      	movs	r7, #3
          attsClearPrepWrites(pCcb);
   17858:	4630      	mov	r0, r6
   1785a:	f7fe fcc7 	bl	161ec <attsClearPrepWrites>
   1785e:	e7c7      	b.n	177f0 <attsProcExecWriteReq+0x80>
   17860:	4630      	mov	r0, r6
    err = ATT_ERR_UNLIKELY;
   17862:	270e      	movs	r7, #14
          attsClearPrepWrites(pCcb);
   17864:	f7fe fcc2 	bl	161ec <attsClearPrepWrites>
   17868:	e7c2      	b.n	177f0 <attsProcExecWriteReq+0x80>
    memcpy((pAttr->pValue + pPrep->offset), p, pPrep->writeLen);
   1786a:	8923      	ldrh	r3, [r4, #8]
   1786c:	6868      	ldr	r0, [r5, #4]
   1786e:	4611      	mov	r1, r2
   17870:	4418      	add	r0, r3
   17872:	88a2      	ldrh	r2, [r4, #4]
   17874:	f7f4 fc44 	bl	c100 <memcpy>
    if ((pAttr->settings & ATTS_SET_VARIABLE_LEN) != 0)
   17878:	7baf      	ldrb	r7, [r5, #14]
   1787a:	f017 0708 	ands.w	r7, r7, #8
   1787e:	d0b7      	beq.n	177f0 <attsProcExecWriteReq+0x80>
      *(pAttr->pLen) = pPrep->writeLen + pPrep->offset;
   17880:	88a3      	ldrh	r3, [r4, #4]
   17882:	8921      	ldrh	r1, [r4, #8]
   17884:	68aa      	ldr	r2, [r5, #8]
   17886:	440b      	add	r3, r1
   17888:	8013      	strh	r3, [r2, #0]
  uint8_t     err = ATT_SUCCESS;
   1788a:	2700      	movs	r7, #0
   1788c:	e7b0      	b.n	177f0 <attsProcExecWriteReq+0x80>
          err = ATT_ERR_OFFSET;
   1788e:	2707      	movs	r7, #7
          attsClearPrepWrites(pCcb);
   17890:	4630      	mov	r0, r6
   17892:	f7fe fcab 	bl	161ec <attsClearPrepWrites>
  if (err)
   17896:	e7b7      	b.n	17808 <attsProcExecWriteReq+0x98>
          err = ATT_ERR_LENGTH;
   17898:	270d      	movs	r7, #13
   1789a:	e7f9      	b.n	17890 <attsProcExecWriteReq+0x120>
   1789c:	10006de8 	.word	0x10006de8

000178a0 <attEmptyHandler>:
 */
/*************************************************************************************************/
void attEmptyHandler(wsfMsgHdr_t *pMsg)
{
  return;
}
   178a0:	4770      	bx	lr
   178a2:	bf00      	nop

000178a4 <attEmptyConnCback>:
 */
/*************************************************************************************************/
void attEmptyConnCback(attCcb_t *pCcb, dmEvt_t *pDmEvt)
{
  return;
}
   178a4:	4770      	bx	lr
   178a6:	bf00      	nop

000178a8 <attEmptyDataCback>:
 */
/*************************************************************************************************/
void attEmptyDataCback(uint16_t handle, uint16_t len, uint8_t *pPacket)
{
  return;
}
   178a8:	4770      	bx	lr
   178aa:	bf00      	nop

000178ac <attDmConnCback>:
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   178ac:	7883      	ldrb	r3, [r0, #2]
  pCcb = attCcbByConnId((dmConnId_t) pDmEvt->hdr.param);
   178ae:	7802      	ldrb	r2, [r0, #0]
{
   178b0:	b570      	push	{r4, r5, r6, lr}
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   178b2:	2b27      	cmp	r3, #39	; 0x27
{
   178b4:	4604      	mov	r4, r0
/*************************************************************************************************/
attCcb_t *attCcbByConnId(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return &attCb.ccb[connId - 1];
   178b6:	f102 30ff 	add.w	r0, r2, #4294967295
    pCcb->handle = pDmEvt->connOpen.handle;
   178ba:	4e18      	ldr	r6, [pc, #96]	; (1791c <attDmConnCback+0x70>)
   178bc:	ea4f 05c0 	mov.w	r5, r0, lsl #3
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   178c0:	d10b      	bne.n	178da <attDmConnCback+0x2e>
    pCcb->handle = pDmEvt->connOpen.handle;
   178c2:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   178c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   178ca:	88e1      	ldrh	r1, [r4, #6]
    pCcb->connId = (dmConnId_t) pDmEvt->hdr.param;
   178cc:	771a      	strb	r2, [r3, #28]
    pCcb->control = 0;
   178ce:	2200      	movs	r2, #0
   178d0:	775a      	strb	r2, [r3, #29]
    pCcb->pPendDbHashRsp = NULL;
   178d2:	621a      	str	r2, [r3, #32]
    pCcb->mtu = ATT_DEFAULT_MTU;
   178d4:	2217      	movs	r2, #23
    pCcb->handle = pDmEvt->connOpen.handle;
   178d6:	8319      	strh	r1, [r3, #24]
    pCcb->mtu = ATT_DEFAULT_MTU;
   178d8:	835a      	strh	r2, [r3, #26]
  if (pCcb->connId != DM_CONN_ID_NONE)
   178da:	4405      	add	r5, r0
   178dc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   178e0:	7f2b      	ldrb	r3, [r5, #28]
   178e2:	b163      	cbz	r3, 178fe <attDmConnCback+0x52>
    (*attCb.pServer->connCback)(pCcb, pDmEvt);
   178e4:	6f33      	ldr	r3, [r6, #112]	; 0x70
   178e6:	4621      	mov	r1, r4
   178e8:	68db      	ldr	r3, [r3, #12]
   178ea:	4628      	mov	r0, r5
   178ec:	4798      	blx	r3
    (*attCb.pClient->connCback)(pCcb, pDmEvt);
   178ee:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   178f0:	4621      	mov	r1, r4
   178f2:	68db      	ldr	r3, [r3, #12]
   178f4:	4628      	mov	r0, r5
   178f6:	4798      	blx	r3
    if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   178f8:	78a3      	ldrb	r3, [r4, #2]
   178fa:	2b28      	cmp	r3, #40	; 0x28
   178fc:	d006      	beq.n	1790c <attDmConnCback+0x60>
  if (attCb.connCback != NULL)
   178fe:	6fb3      	ldr	r3, [r6, #120]	; 0x78
   17900:	b11b      	cbz	r3, 1790a <attDmConnCback+0x5e>
    (*attCb.connCback)(pDmEvt);
   17902:	4620      	mov	r0, r4
}
   17904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*attCb.connCback)(pDmEvt);
   17908:	4718      	bx	r3
}
   1790a:	bd70      	pop	{r4, r5, r6, pc}
      if (pCcb->pPendDbHashRsp)
   1790c:	6a28      	ldr	r0, [r5, #32]
      pCcb->connId = DM_CONN_ID_NONE;
   1790e:	2300      	movs	r3, #0
   17910:	772b      	strb	r3, [r5, #28]
      if (pCcb->pPendDbHashRsp)
   17912:	2800      	cmp	r0, #0
   17914:	d0f3      	beq.n	178fe <attDmConnCback+0x52>
        WsfBufFree(pCcb->pPendDbHashRsp);
   17916:	f000 f993 	bl	17c40 <WsfBufFree>
   1791a:	e7f0      	b.n	178fe <attDmConnCback+0x52>
   1791c:	10006e04 	.word	0x10006e04

00017920 <attL2cDataCback>:
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
   17920:	7a13      	ldrb	r3, [r2, #8]
   17922:	f013 0f01 	tst.w	r3, #1
    (*attCb.pClient->dataCback)(handle, len, pPacket);
   17926:	4b04      	ldr	r3, [pc, #16]	; (17938 <attL2cDataCback+0x18>)
  if ((pduType & ATT_PDU_MASK_SERVER) != 0)
   17928:	d002      	beq.n	17930 <attL2cDataCback+0x10>
    (*attCb.pClient->dataCback)(handle, len, pPacket);
   1792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1792c:	681b      	ldr	r3, [r3, #0]
   1792e:	4718      	bx	r3
    (*attCb.pServer->dataCback)(handle, len, pPacket);
   17930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   17932:	681b      	ldr	r3, [r3, #0]
   17934:	4718      	bx	r3
   17936:	bf00      	nop
   17938:	10006e04 	.word	0x10006e04

0001793c <attL2cCtrlCback>:
{
   1793c:	b570      	push	{r4, r5, r6, lr}
  return &attCb.ccb[connId - 1];
   1793e:	7804      	ldrb	r4, [r0, #0]
  if (pCcb->connId != DM_CONN_ID_NONE)
   17940:	4e0f      	ldr	r6, [pc, #60]	; (17980 <attL2cCtrlCback+0x44>)
  return &attCb.ccb[connId - 1];
   17942:	3c01      	subs	r4, #1
  if (pCcb->connId != DM_CONN_ID_NONE)
   17944:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   17948:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   1794c:	7f23      	ldrb	r3, [r4, #28]
   1794e:	b1b3      	cbz	r3, 1797e <attL2cCtrlCback+0x42>
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
   17950:	7883      	ldrb	r3, [r0, #2]
   17952:	2b01      	cmp	r3, #1
   17954:	4605      	mov	r5, r0
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
   17956:	7f63      	ldrb	r3, [r4, #29]
    if (pMsg->event == L2C_CTRL_FLOW_DISABLE_IND)
   17958:	d00e      	beq.n	17978 <attL2cCtrlCback+0x3c>
      pCcb->control &= ~ATT_CCB_STATUS_FLOW_DISABLED;
   1795a:	f023 0302 	bic.w	r3, r3, #2
   1795e:	7763      	strb	r3, [r4, #29]
      (*attCb.pServer->ctrlCback)(pMsg);
   17960:	6f33      	ldr	r3, [r6, #112]	; 0x70
   17962:	685b      	ldr	r3, [r3, #4]
   17964:	4798      	blx	r3
      if (!(pCcb->control & ATT_CCB_STATUS_FLOW_DISABLED))
   17966:	7f63      	ldrb	r3, [r4, #29]
   17968:	079b      	lsls	r3, r3, #30
   1796a:	d408      	bmi.n	1797e <attL2cCtrlCback+0x42>
        (*attCb.pClient->ctrlCback)(pMsg);
   1796c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   1796e:	4628      	mov	r0, r5
   17970:	685b      	ldr	r3, [r3, #4]
}
   17972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (*attCb.pClient->ctrlCback)(pMsg);
   17976:	4718      	bx	r3
      pCcb->control |= ATT_CCB_STATUS_FLOW_DISABLED;
   17978:	f043 0302 	orr.w	r3, r3, #2
   1797c:	7763      	strb	r3, [r4, #29]
}
   1797e:	bd70      	pop	{r4, r5, r6, pc}
   17980:	10006e04 	.word	0x10006e04

00017984 <attCcbByHandle>:
{
   17984:	b508      	push	{r3, lr}
  if ((connId = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   17986:	f004 fb99 	bl	1c0bc <DmConnIdByHandle>
   1798a:	b128      	cbz	r0, 17998 <attCcbByHandle+0x14>
    return &attCb.ccb[connId - 1];
   1798c:	4b03      	ldr	r3, [pc, #12]	; (1799c <attCcbByHandle+0x18>)
   1798e:	3801      	subs	r0, #1
   17990:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17994:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
   17998:	bd08      	pop	{r3, pc}
   1799a:	bf00      	nop
   1799c:	10006e04 	.word	0x10006e04

000179a0 <attUuidCmp16to128>:
 *
 *  \return TRUE of UUIDs match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t attUuidCmp16to128(const uint8_t *pUuid16, const uint8_t *pUuid128)
{
   179a0:	b508      	push	{r3, lr}
  attBaseUuid[ATT_BASE_UUID_POS_0] = pUuid16[0];
   179a2:	4b07      	ldr	r3, [pc, #28]	; (179c0 <attUuidCmp16to128+0x20>)
   179a4:	7802      	ldrb	r2, [r0, #0]
   179a6:	731a      	strb	r2, [r3, #12]
  attBaseUuid[ATT_BASE_UUID_POS_1] = pUuid16[1];
   179a8:	f890 c001 	ldrb.w	ip, [r0, #1]
   179ac:	f883 c00d 	strb.w	ip, [r3, #13]

  return (memcmp(attBaseUuid, pUuid128, ATT_128_UUID_LEN) == 0);
   179b0:	2210      	movs	r2, #16
   179b2:	4618      	mov	r0, r3
   179b4:	f009 fbac 	bl	21110 <memcmp>
}
   179b8:	fab0 f080 	clz	r0, r0
   179bc:	0940      	lsrs	r0, r0, #5
   179be:	bd08      	pop	{r3, pc}
   179c0:	10002b90 	.word	0x10002b90

000179c4 <attSetMtu>:
void attSetMtu(attCcb_t *pCcb, uint16_t peerMtu, uint16_t localMtu)
{
  uint16_t  mtu;

  /* set negotiated mtu for the connection to the lesser of ours and theirs */
  mtu = WSF_MIN(peerMtu, localMtu);
   179c4:	428a      	cmp	r2, r1

  /* if current mtu is not the same as the negotiated value */
  if (pCcb->mtu != mtu)
   179c6:	8b43      	ldrh	r3, [r0, #26]
  mtu = WSF_MIN(peerMtu, localMtu);
   179c8:	bf28      	it	cs
   179ca:	460a      	movcs	r2, r1
  if (pCcb->mtu != mtu)
   179cc:	4293      	cmp	r3, r2
   179ce:	d017      	beq.n	17a00 <attSetMtu+0x3c>
 *  \return None.
 */
/*************************************************************************************************/
void attExecCallback(dmConnId_t connId, uint8_t event, uint16_t handle, uint8_t status, uint16_t mtu)
{
  if (attCb.cback)
   179d0:	4b0c      	ldr	r3, [pc, #48]	; (17a04 <attSetMtu+0x40>)
    pCcb->mtu = mtu;
   179d2:	8342      	strh	r2, [r0, #26]
  if (attCb.cback)
   179d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   179d6:	b19b      	cbz	r3, 17a00 <attSetMtu+0x3c>
{
   179d8:	b500      	push	{lr}
   179da:	b085      	sub	sp, #20
  {
    attEvt_t evt;

    evt.hdr.param = connId;
   179dc:	f890 c01c 	ldrb.w	ip, [r0, #28]
   179e0:	f8ad c000 	strh.w	ip, [sp]
    evt.hdr.event = event;
    evt.hdr.status = status;
    evt.valueLen = 0;
   179e4:	2100      	movs	r1, #0
    evt.hdr.event = event;
   179e6:	2012      	movs	r0, #18
   179e8:	f8ad 0002 	strh.w	r0, [sp, #2]
    evt.valueLen = 0;
   179ec:	9102      	str	r1, [sp, #8]
    evt.handle = handle;
    evt.continuing = 0;
   179ee:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.mtu = mtu;
   179f2:	f8ad 200e 	strh.w	r2, [sp, #14]

    (*attCb.cback)(&evt);
   179f6:	4668      	mov	r0, sp
   179f8:	4798      	blx	r3
}
   179fa:	b005      	add	sp, #20
   179fc:	f85d fb04 	ldr.w	pc, [sp], #4
   17a00:	4770      	bx	lr
   17a02:	bf00      	nop
   17a04:	10006e04 	.word	0x10006e04

00017a08 <attExecCallback>:
{
   17a08:	b510      	push	{r4, lr}
  if (attCb.cback)
   17a0a:	4c0c      	ldr	r4, [pc, #48]	; (17a3c <attExecCallback+0x34>)
{
   17a0c:	b084      	sub	sp, #16
  if (attCb.cback)
   17a0e:	6f64      	ldr	r4, [r4, #116]	; 0x74
{
   17a10:	f8bd c018 	ldrh.w	ip, [sp, #24]
  if (attCb.cback)
   17a14:	b184      	cbz	r4, 17a38 <attExecCallback+0x30>
    evt.hdr.event = event;
   17a16:	f88d 1002 	strb.w	r1, [sp, #2]
    evt.valueLen = 0;
   17a1a:	2100      	movs	r1, #0
    evt.hdr.param = connId;
   17a1c:	f8ad 0000 	strh.w	r0, [sp]
    evt.hdr.status = status;
   17a20:	f88d 3003 	strb.w	r3, [sp, #3]
    evt.valueLen = 0;
   17a24:	f8ad 1008 	strh.w	r1, [sp, #8]
    evt.handle = handle;
   17a28:	f8ad 200a 	strh.w	r2, [sp, #10]
    evt.continuing = 0;
   17a2c:	f88d 100c 	strb.w	r1, [sp, #12]
    evt.mtu = mtu;
   17a30:	f8ad c00e 	strh.w	ip, [sp, #14]
    (*attCb.cback)(&evt);
   17a34:	4668      	mov	r0, sp
   17a36:	47a0      	blx	r4
  }
}
   17a38:	b004      	add	sp, #16
   17a3a:	bd10      	pop	{r4, pc}
   17a3c:	10006e04 	.word	0x10006e04

00017a40 <attMsgAlloc>:
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *attMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   17a40:	2100      	movs	r1, #0
   17a42:	f000 b923 	b.w	17c8c <WsfMsgDataAlloc>
   17a46:	bf00      	nop

00017a48 <AttHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttHandlerInit(wsfHandlerId_t handlerId)
{
   17a48:	b510      	push	{r4, lr}
  /* store handler ID */
  attCb.handlerId = handlerId;
   17a4a:	4b08      	ldr	r3, [pc, #32]	; (17a6c <AttHandlerInit+0x24>)

  /* initialize control block */
  attCb.pClient = &attFcnDefault;
   17a4c:	4c08      	ldr	r4, [pc, #32]	; (17a70 <AttHandlerInit+0x28>)
  attCb.pServer = &attFcnDefault;

  /* Register with L2C */
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   17a4e:	4909      	ldr	r1, [pc, #36]	; (17a74 <AttHandlerInit+0x2c>)
  attCb.handlerId = handlerId;
   17a50:	f883 007c 	strb.w	r0, [r3, #124]	; 0x7c
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   17a54:	4a08      	ldr	r2, [pc, #32]	; (17a78 <AttHandlerInit+0x30>)
   17a56:	2004      	movs	r0, #4
  attCb.pServer = &attFcnDefault;
   17a58:	e9c3 441b 	strd	r4, r4, [r3, #108]	; 0x6c
  L2cRegister(L2C_CID_ATT,  attL2cDataCback, attL2cCtrlCback);
   17a5c:	f003 fba8 	bl	1b1b0 <L2cRegister>

  /* Register with DM */
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);

}
   17a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DmConnRegister(DM_CLIENT_ID_ATT, attDmConnCback);
   17a64:	4905      	ldr	r1, [pc, #20]	; (17a7c <AttHandlerInit+0x34>)
   17a66:	2000      	movs	r0, #0
   17a68:	f004 ba80 	b.w	1bf6c <DmConnRegister>
   17a6c:	10006e04 	.word	0x10006e04
   17a70:	00025994 	.word	0x00025994
   17a74:	00017921 	.word	0x00017921
   17a78:	0001793d 	.word	0x0001793d
   17a7c:	000178ad 	.word	0x000178ad

00017a80 <AttHandler>:
 */
/*************************************************************************************************/
void AttHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
   17a80:	4608      	mov	r0, r1
   17a82:	b149      	cbz	r1, 17a98 <AttHandler+0x18>
  {
    if (pMsg->event >= ATTS_MSG_START)
   17a84:	788b      	ldrb	r3, [r1, #2]
   17a86:	2b1f      	cmp	r3, #31
    {
      /* pass event to server */
      (*attCb.pServer->msgCback)(pMsg);
   17a88:	4b04      	ldr	r3, [pc, #16]	; (17a9c <AttHandler+0x1c>)
    if (pMsg->event >= ATTS_MSG_START)
   17a8a:	d902      	bls.n	17a92 <AttHandler+0x12>
      (*attCb.pServer->msgCback)(pMsg);
   17a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   17a8e:	689b      	ldr	r3, [r3, #8]
   17a90:	4718      	bx	r3
    }
    else
    {
      /* pass event to client */
      (*attCb.pClient->msgCback)(pMsg);
   17a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   17a94:	689b      	ldr	r3, [r3, #8]
   17a96:	4718      	bx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   17a98:	4770      	bx	lr
   17a9a:	bf00      	nop
   17a9c:	10006e04 	.word	0x10006e04

00017aa0 <AttRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AttRegister(attCback_t cback)
{
   17aa0:	b510      	push	{r4, lr}
  attCb.cback = cback;
   17aa2:	4c0c      	ldr	r4, [pc, #48]	; (17ad4 <AttRegister+0x34>)
{
   17aa4:	b084      	sub	sp, #16
  attCb.cback = cback;
   17aa6:	6760      	str	r0, [r4, #116]	; 0x74

  /* if configured MTU size is larger than maximum RX PDU length */
  if (pAttCfg->mtu > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   17aa8:	f7fa fac2 	bl	12030 <HciGetMaxRxAclLen>
   17aac:	4b0a      	ldr	r3, [pc, #40]	; (17ad8 <AttRegister+0x38>)
   17aae:	681b      	ldr	r3, [r3, #0]
   17ab0:	889b      	ldrh	r3, [r3, #4]
   17ab2:	3803      	subs	r0, #3
   17ab4:	4298      	cmp	r0, r3
   17ab6:	dc0b      	bgt.n	17ad0 <AttRegister+0x30>
  if (attCb.cback)
   17ab8:	6f62      	ldr	r2, [r4, #116]	; 0x74
   17aba:	b14a      	cbz	r2, 17ad0 <AttRegister+0x30>
    evt.valueLen = 0;
   17abc:	2300      	movs	r3, #0
    evt.hdr.param = connId;
   17abe:	4907      	ldr	r1, [pc, #28]	; (17adc <AttRegister+0x3c>)
   17ac0:	9100      	str	r1, [sp, #0]
    evt.valueLen = 0;
   17ac2:	9302      	str	r3, [sp, #8]
    evt.continuing = 0;
   17ac4:	f88d 300c 	strb.w	r3, [sp, #12]
    evt.mtu = mtu;
   17ac8:	f8ad 300e 	strh.w	r3, [sp, #14]
    (*attCb.cback)(&evt);
   17acc:	4668      	mov	r0, sp
   17ace:	4790      	blx	r2
  {
    /* notify app about MTU misconfiguration */
    attExecCallback(0, DM_ERROR_IND, 0, DM_ERR_ATT_RX_PDU_LEN_EXCEEDED, 0);
  }
}
   17ad0:	b004      	add	sp, #16
   17ad2:	bd10      	pop	{r4, pc}
   17ad4:	10006e04 	.word	0x10006e04
   17ad8:	10002e50 	.word	0x10002e50
   17adc:	02650000 	.word	0x02650000

00017ae0 <AttGetMtu>:
 *  \return MTU of the connection.
 */
/*************************************************************************************************/
uint16_t AttGetMtu(dmConnId_t connId)
{
  return (attCcbByConnId(connId)->mtu);
   17ae0:	4b03      	ldr	r3, [pc, #12]	; (17af0 <AttGetMtu+0x10>)
   17ae2:	3801      	subs	r0, #1
   17ae4:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   17ae8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
   17aec:	8b40      	ldrh	r0, [r0, #26]
   17aee:	4770      	bx	lr
   17af0:	10006e04 	.word	0x10006e04

00017af4 <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   17af4:	b082      	sub	sp, #8
  volatile uint8_t escape=0;
   17af6:	2300      	movs	r3, #0
   17af8:	f88d 3007 	strb.w	r3, [sp, #7]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   17afc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   17b00:	2b00      	cmp	r3, #0
   17b02:	d0fb      	beq.n	17afc <WsfAssert+0x8>
    {
      break;
    }
  }
}
   17b04:	b002      	add	sp, #8
   17b06:	4770      	bx	lr

00017b08 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   17b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17b0c:	08c0      	lsrs	r0, r0, #3
  wsfBufMem = (wsfBufMem_t *) pBufMem;
   17b0e:	4c31      	ldr	r4, [pc, #196]	; (17bd4 <WsfBufInit+0xcc>)
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17b10:	eb01 0cc0 	add.w	ip, r1, r0, lsl #3
  pStart = (wsfBufMem_t *) (pPool + numPools);
   17b14:	eb02 0042 	add.w	r0, r2, r2, lsl #1
  wsfBufMem = (wsfBufMem_t *) pBufMem;
   17b18:	6021      	str	r1, [r4, #0]
  pStart = (wsfBufMem_t *) (pPool + numPools);
   17b1a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  wsfBufNumPools = numPools;
   17b1e:	4c2e      	ldr	r4, [pc, #184]	; (17bd8 <WsfBufInit+0xd0>)
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17b20:	4560      	cmp	r0, ip
  wsfBufNumPools = numPools;
   17b22:	7022      	strb	r2, [r4, #0]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17b24:	d849      	bhi.n	17bba <WsfBufInit+0xb2>
      WSF_ASSERT(FALSE);
      return 0;
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   17b26:	1e57      	subs	r7, r2, #1
   17b28:	b2ff      	uxtb	r7, r7
   17b2a:	b3ba      	cbz	r2, 17b9c <WsfBufInit+0x94>
   17b2c:	f103 0208 	add.w	r2, r3, #8
   17b30:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   17b34:	1d1d      	adds	r5, r3, #4
   17b36:	f101 060c 	add.w	r6, r1, #12
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   17b3a:	f04f 0908 	mov.w	r9, #8
    {
      WSF_ASSERT(FALSE);
      return 0;
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   17b3e:	f04f 0800 	mov.w	r8, #0
    if (pDesc->len < sizeof(wsfBufMem_t))
   17b42:	f835 4c04 	ldrh.w	r4, [r5, #-4]
   17b46:	2c07      	cmp	r4, #7
   17b48:	d83a      	bhi.n	17bc0 <WsfBufInit+0xb8>
      pPool->desc.len = sizeof(wsfBufMem_t);
   17b4a:	f826 9c0c 	strh.w	r9, [r6, #-12]
   17b4e:	2401      	movs	r4, #1
    pPool->desc.num = pDesc->num;
   17b50:	f815 3c02 	ldrb.w	r3, [r5, #-2]
   17b54:	f806 3c0a 	strb.w	r3, [r6, #-10]
    for (i = pPool->desc.num; i > 1; i--)
   17b58:	2b01      	cmp	r3, #1
    pPool->pFree = pStart;
   17b5a:	e946 0002 	strd	r0, r0, [r6, #-8]
    for (i = pPool->desc.num; i > 1; i--)
   17b5e:	d910      	bls.n	17b82 <WsfBufInit+0x7a>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17b60:	4584      	cmp	ip, r0
   17b62:	d32a      	bcc.n	17bba <WsfBufInit+0xb2>
      pStart->pNext = pStart + len;
   17b64:	00e2      	lsls	r2, r4, #3
   17b66:	2c01      	cmp	r4, #1
   17b68:	f1c2 0e00 	rsb	lr, r2, #0
   17b6c:	d002      	beq.n	17b74 <WsfBufInit+0x6c>
   17b6e:	e01c      	b.n	17baa <WsfBufInit+0xa2>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17b70:	4560      	cmp	r0, ip
   17b72:	d822      	bhi.n	17bba <WsfBufInit+0xb2>
    for (i = pPool->desc.num; i > 1; i--)
   17b74:	3b01      	subs	r3, #1
      pStart->pNext = pStart + len;
   17b76:	4410      	add	r0, r2
    for (i = pPool->desc.num; i > 1; i--)
   17b78:	b2db      	uxtb	r3, r3
   17b7a:	2b01      	cmp	r3, #1
      pStart->pNext = pStart + len;
   17b7c:	f840 000e 	str.w	r0, [r0, lr]
    for (i = pPool->desc.num; i > 1; i--)
   17b80:	d1f6      	bne.n	17b70 <WsfBufInit+0x68>
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17b82:	4584      	cmp	ip, r0
   17b84:	d319      	bcc.n	17bba <WsfBufInit+0xb2>
    pStart->pNext = NULL;
   17b86:	f8c0 8000 	str.w	r8, [r0]
    pStart += len;
   17b8a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17b8e:	4560      	cmp	r0, ip
   17b90:	d813      	bhi.n	17bba <WsfBufInit+0xb2>
    if (numPools-- == 0)
   17b92:	3504      	adds	r5, #4
   17b94:	42bd      	cmp	r5, r7
   17b96:	f106 060c 	add.w	r6, r6, #12
   17b9a:	d1d2      	bne.n	17b42 <WsfBufInit+0x3a>

    /* next pool */
    pPool++;
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   17b9c:	4b0f      	ldr	r3, [pc, #60]	; (17bdc <WsfBufInit+0xd4>)
   17b9e:	1a40      	subs	r0, r0, r1
   17ba0:	b280      	uxth	r0, r0
   17ba2:	8018      	strh	r0, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   17ba4:	e00a      	b.n	17bbc <WsfBufInit+0xb4>
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17ba6:	4560      	cmp	r0, ip
   17ba8:	d807      	bhi.n	17bba <WsfBufInit+0xb2>
    for (i = pPool->desc.num; i > 1; i--)
   17baa:	3b01      	subs	r3, #1
      pStart->pNext = pStart + len;
   17bac:	4410      	add	r0, r2
    for (i = pPool->desc.num; i > 1; i--)
   17bae:	b2db      	uxtb	r3, r3
   17bb0:	2b01      	cmp	r3, #1
      pStart->pNext = pStart + len;
   17bb2:	f840 000e 	str.w	r0, [r0, lr]
    for (i = pPool->desc.num; i > 1; i--)
   17bb6:	d1f6      	bne.n	17ba6 <WsfBufInit+0x9e>
   17bb8:	e7e3      	b.n	17b82 <WsfBufInit+0x7a>
      return 0;
   17bba:	2000      	movs	r0, #0
}
   17bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   17bc0:	0763      	lsls	r3, r4, #29
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   17bc2:	bf1e      	ittt	ne
   17bc4:	f024 0407 	bicne.w	r4, r4, #7
   17bc8:	3408      	addne	r4, #8
   17bca:	b2a4      	uxthne	r4, r4
      pPool->desc.len = pDesc->len;
   17bcc:	f826 4c0c 	strh.w	r4, [r6, #-12]
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   17bd0:	08e4      	lsrs	r4, r4, #3
   17bd2:	e7bd      	b.n	17b50 <WsfBufInit+0x48>
   17bd4:	10006e84 	.word	0x10006e84
   17bd8:	10006e8a 	.word	0x10006e8a
   17bdc:	10006e88 	.word	0x10006e88

00017be0 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   17be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   17be2:	4a14      	ldr	r2, [pc, #80]	; (17c34 <WsfBufAlloc+0x54>)
  pPool = (wsfBufPool_t *) wsfBufMem;
   17be4:	4b14      	ldr	r3, [pc, #80]	; (17c38 <WsfBufAlloc+0x58>)
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   17be6:	7815      	ldrb	r5, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   17be8:	681c      	ldr	r4, [r3, #0]
{
   17bea:	4606      	mov	r6, r0
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   17bec:	b19d      	cbz	r5, 17c16 <WsfBufAlloc+0x36>
   17bee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   17bf2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   17bf6:	e002      	b.n	17bfe <WsfBufAlloc+0x1e>
   17bf8:	340c      	adds	r4, #12
   17bfa:	42ac      	cmp	r4, r5
   17bfc:	d00b      	beq.n	17c16 <WsfBufAlloc+0x36>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   17bfe:	8823      	ldrh	r3, [r4, #0]
   17c00:	42b3      	cmp	r3, r6
   17c02:	d3f9      	bcc.n	17bf8 <WsfBufAlloc+0x18>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   17c04:	f000 f87a 	bl	17cfc <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   17c08:	68a7      	ldr	r7, [r4, #8]
   17c0a:	b95f      	cbnz	r7, 17c24 <WsfBufAlloc+0x44>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   17c0c:	340c      	adds	r4, #12

        return pBuf;
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   17c0e:	f000 f87f 	bl	17d10 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   17c12:	42ac      	cmp	r4, r5
   17c14:	d1f3      	bne.n	17bfe <WsfBufAlloc+0x1e>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   17c16:	4809      	ldr	r0, [pc, #36]	; (17c3c <WsfBufAlloc+0x5c>)
   17c18:	4631      	mov	r1, r6

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   17c1a:	2700      	movs	r7, #0
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   17c1c:	f000 fbc0 	bl	183a0 <WsfTrace>
}
   17c20:	4638      	mov	r0, r7
   17c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pPool->pFree = pBuf->pNext;
   17c24:	683a      	ldr	r2, [r7, #0]
   17c26:	60a2      	str	r2, [r4, #8]
        pBuf->free = 0;
   17c28:	2300      	movs	r3, #0
   17c2a:	607b      	str	r3, [r7, #4]
        WSF_CS_EXIT(cs);
   17c2c:	f000 f870 	bl	17d10 <WsfCsExit>
}
   17c30:	4638      	mov	r0, r7
   17c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17c34:	10006e8a 	.word	0x10006e8a
   17c38:	10006e84 	.word	0x10006e84
   17c3c:	000259d0 	.word	0x000259d0

00017c40 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   17c40:	b538      	push	{r3, r4, r5, lr}
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   17c42:	4a0f      	ldr	r2, [pc, #60]	; (17c80 <WsfBufFree+0x40>)
   17c44:	4b0f      	ldr	r3, [pc, #60]	; (17c84 <WsfBufFree+0x44>)
   17c46:	6812      	ldr	r2, [r2, #0]
   17c48:	781c      	ldrb	r4, [r3, #0]
   17c4a:	230c      	movs	r3, #12
   17c4c:	fb03 2404 	mla	r4, r3, r4, r2
   17c50:	3c0c      	subs	r4, #12
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   17c52:	42a2      	cmp	r2, r4
   17c54:	d812      	bhi.n	17c7c <WsfBufFree+0x3c>
   17c56:	4605      	mov	r5, r0
   17c58:	e002      	b.n	17c60 <WsfBufFree+0x20>

      return;
    }

    /* next pool */
    pPool--;
   17c5a:	3c0c      	subs	r4, #12
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   17c5c:	42a2      	cmp	r2, r4
   17c5e:	d80d      	bhi.n	17c7c <WsfBufFree+0x3c>
    if (p >= pPool->pStart)
   17c60:	6863      	ldr	r3, [r4, #4]
   17c62:	42ab      	cmp	r3, r5
   17c64:	d8f9      	bhi.n	17c5a <WsfBufFree+0x1a>
      WSF_CS_ENTER(cs);
   17c66:	f000 f849 	bl	17cfc <WsfCsEnter>
      p->pNext = pPool->pFree;
   17c6a:	68a3      	ldr	r3, [r4, #8]
      p->free = WSF_BUF_FREE_NUM;
   17c6c:	4a06      	ldr	r2, [pc, #24]	; (17c88 <WsfBufFree+0x48>)
      p->pNext = pPool->pFree;
   17c6e:	e9c5 3200 	strd	r3, r2, [r5]
      pPool->pFree = p;
   17c72:	60a5      	str	r5, [r4, #8]

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
}
   17c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      WSF_CS_EXIT(cs);
   17c78:	f000 b84a 	b.w	17d10 <WsfCsExit>
}
   17c7c:	bd38      	pop	{r3, r4, r5, pc}
   17c7e:	bf00      	nop
   17c80:	10006e84 	.word	0x10006e84
   17c84:	10006e8a 	.word	0x10006e8a
   17c88:	faabd00d 	.word	0xfaabd00d

00017c8c <WsfMsgDataAlloc>:
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   17c8c:	3008      	adds	r0, #8
   17c8e:	4408      	add	r0, r1
{
   17c90:	b508      	push	{r3, lr}
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   17c92:	b280      	uxth	r0, r0
   17c94:	f7ff ffa4 	bl	17be0 <WsfBufAlloc>

  /* hide header */
  if (pMsg != NULL)
   17c98:	b100      	cbz	r0, 17c9c <WsfMsgDataAlloc+0x10>
  {
    pMsg++;
   17c9a:	3008      	adds	r0, #8
}
   17c9c:	bd08      	pop	{r3, pc}
   17c9e:	bf00      	nop

00017ca0 <WsfMsgAlloc>:
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   17ca0:	3008      	adds	r0, #8
{
   17ca2:	b508      	push	{r3, lr}
  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   17ca4:	b280      	uxth	r0, r0
   17ca6:	f7ff ff9b 	bl	17be0 <WsfBufAlloc>
  if (pMsg != NULL)
   17caa:	b100      	cbz	r0, 17cae <WsfMsgAlloc+0xe>
    pMsg++;
   17cac:	3008      	adds	r0, #8
  }

  return pMsg;
}
   17cae:	bd08      	pop	{r3, pc}

00017cb0 <WsfMsgFree>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   17cb0:	3808      	subs	r0, #8
   17cb2:	f7ff bfc5 	b.w	17c40 <WsfBufFree>
   17cb6:	bf00      	nop

00017cb8 <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   17cb8:	b538      	push	{r3, r4, r5, lr}
   17cba:	460d      	mov	r5, r1
   17cbc:	4604      	mov	r4, r0
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   17cbe:	f000 f8e3 	bl	17e88 <WsfTaskMsgQueue>
  p = ((wsfMsg_t *) pMsg) - 1;

  /* set handler ID */
  p->handlerId = handlerId;

  WsfQueueEnq(pQueue, p);
   17cc2:	f1a5 0108 	sub.w	r1, r5, #8
  p->handlerId = handlerId;
   17cc6:	f805 4c04 	strb.w	r4, [r5, #-4]
  WsfQueueEnq(pQueue, p);
   17cca:	f000 f989 	bl	17fe0 <WsfQueueEnq>
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   17cce:	4620      	mov	r0, r4
   17cd0:	2101      	movs	r1, #1
}
   17cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   17cd6:	f000 b88f 	b.w	17df8 <WsfTaskSetReady>
   17cda:	bf00      	nop

00017cdc <WsfMsgEnq>:
  p->handlerId = handlerId;
   17cdc:	f802 1c04 	strb.w	r1, [r2, #-4]
  WsfQueueEnq(pQueue, p);
   17ce0:	f1a2 0108 	sub.w	r1, r2, #8
   17ce4:	f000 b97c 	b.w	17fe0 <WsfQueueEnq>

00017ce8 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   17ce8:	b510      	push	{r4, lr}
   17cea:	460c      	mov	r4, r1
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   17cec:	f000 f98e 	bl	1800c <WsfQueueDeq>
   17cf0:	b110      	cbz	r0, 17cf8 <WsfMsgDeq+0x10>
  {
    *pHandlerId = pMsg->handlerId;
   17cf2:	7903      	ldrb	r3, [r0, #4]
   17cf4:	7023      	strb	r3, [r4, #0]

    /* hide header */
    pMsg++;
   17cf6:	3008      	adds	r0, #8
  }

  return pMsg;
}
   17cf8:	bd10      	pop	{r4, pc}
   17cfa:	bf00      	nop

00017cfc <WsfCsEnter>:
   17cfc:	4a03      	ldr	r2, [pc, #12]	; (17d0c <WsfCsEnter+0x10>)
   17cfe:	7813      	ldrb	r3, [r2, #0]
   17d00:	b90b      	cbnz	r3, 17d06 <WsfCsEnter+0xa>
   17d02:	b672      	cpsid	i
   17d04:	7813      	ldrb	r3, [r2, #0]
   17d06:	3301      	adds	r3, #1
   17d08:	7013      	strb	r3, [r2, #0]
   17d0a:	4770      	bx	lr
   17d0c:	10006e8b 	.word	0x10006e8b

00017d10 <WsfCsExit>:
   17d10:	4a03      	ldr	r2, [pc, #12]	; (17d20 <WsfCsExit+0x10>)
   17d12:	7813      	ldrb	r3, [r2, #0]
   17d14:	3b01      	subs	r3, #1
   17d16:	b2db      	uxtb	r3, r3
   17d18:	7013      	strb	r3, [r2, #0]
   17d1a:	b903      	cbnz	r3, 17d1e <WsfCsExit+0xe>
   17d1c:	b662      	cpsie	i
   17d1e:	4770      	bx	lr
   17d20:	10006e8b 	.word	0x10006e8b

00017d24 <WsfTaskLock>:
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
  if (csNesting == 0)
   17d24:	4a03      	ldr	r2, [pc, #12]	; (17d34 <WsfTaskLock+0x10>)
   17d26:	7813      	ldrb	r3, [r2, #0]
   17d28:	b90b      	cbnz	r3, 17d2e <WsfTaskLock+0xa>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   17d2a:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   17d2c:	7813      	ldrb	r3, [r2, #0]
   17d2e:	3301      	adds	r3, #1
   17d30:	7013      	strb	r3, [r2, #0]
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
  WsfCsEnter();
}
   17d32:	4770      	bx	lr
   17d34:	10006e8b 	.word	0x10006e8b

00017d38 <WsfTaskUnlock>:
  csNesting--;
   17d38:	4a03      	ldr	r2, [pc, #12]	; (17d48 <WsfTaskUnlock+0x10>)
   17d3a:	7813      	ldrb	r3, [r2, #0]
   17d3c:	3b01      	subs	r3, #1
   17d3e:	b2db      	uxtb	r3, r3
   17d40:	7013      	strb	r3, [r2, #0]
  if (csNesting == 0)
   17d42:	b903      	cbnz	r3, 17d46 <WsfTaskUnlock+0xe>
    __asm volatile ("cpsie i");
   17d44:	b662      	cpsie	i
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
  WsfCsExit();
}
   17d46:	4770      	bx	lr
   17d48:	10006e8b 	.word	0x10006e8b

00017d4c <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   17d4c:	b510      	push	{r4, lr}
  if (csNesting == 0)
   17d4e:	4b26      	ldr	r3, [pc, #152]	; (17de8 <WsfSetEvent+0x9c>)
   17d50:	781a      	ldrb	r2, [r3, #0]
{
   17d52:	b082      	sub	sp, #8
  if (csNesting == 0)
   17d54:	bb4a      	cbnz	r2, 17daa <WsfSetEvent+0x5e>
    __asm volatile ("cpsid i");
   17d56:	b672      	cpsid	i
  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   17d58:	4a24      	ldr	r2, [pc, #144]	; (17dec <WsfSetEvent+0xa0>)
  csNesting++;
   17d5a:	781c      	ldrb	r4, [r3, #0]
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   17d5c:	f000 000f 	and.w	r0, r0, #15
   17d60:	4410      	add	r0, r2
   17d62:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   17d66:	4319      	orrs	r1, r3
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   17d68:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   17d6c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   17d70:	f043 0304 	orr.w	r3, r3, #4
   17d74:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
  if (csNesting == 0)
   17d78:	b904      	cbnz	r4, 17d7c <WsfSetEvent+0x30>
    __asm volatile ("cpsie i");
   17d7a:	b662      	cpsie	i
  if(xRadioTaskEventObject != NULL) 
   17d7c:	4b1c      	ldr	r3, [pc, #112]	; (17df0 <WsfSetEvent+0xa4>)
   17d7e:	681a      	ldr	r2, [r3, #0]
   17d80:	b18a      	cbz	r2, 17da6 <WsfSetEvent+0x5a>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   17d82:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
   17d86:	bb0a      	cbnz	r2, 17dcc <WsfSetEvent+0x80>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   17d88:	6818      	ldr	r0, [r3, #0]
   17d8a:	2101      	movs	r1, #1
   17d8c:	f005 fdba 	bl	1d904 <xEventGroupSetBits>
          if ( xResult != pdFAIL )
   17d90:	b148      	cbz	r0, 17da6 <WsfSetEvent+0x5a>
              portYIELD();
   17d92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17d9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   17d9e:	f3bf 8f4f 	dsb	sy
   17da2:	f3bf 8f6f 	isb	sy
  WSF_CS_EXIT(cs);

  /* set event in OS */

  WsfSetOsSpecificEvent();
}
   17da6:	b002      	add	sp, #8
   17da8:	bd10      	pop	{r4, pc}
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   17daa:	4b10      	ldr	r3, [pc, #64]	; (17dec <WsfSetEvent+0xa0>)
   17dac:	f000 000f 	and.w	r0, r0, #15
   17db0:	4418      	add	r0, r3
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   17db2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   17db6:	f890 c024 	ldrb.w	ip, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   17dba:	f042 0204 	orr.w	r2, r2, #4
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   17dbe:	ea41 010c 	orr.w	r1, r1, ip
   17dc2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   17dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (csNesting == 0)
   17dca:	e7d7      	b.n	17d7c <WsfSetEvent+0x30>
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   17dcc:	6819      	ldr	r1, [r3, #0]
   17dce:	4809      	ldr	r0, [pc, #36]	; (17df4 <WsfSetEvent+0xa8>)
          xHigherPriorityTaskWoken = pdFALSE;
   17dd0:	2400      	movs	r4, #0
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   17dd2:	ab01      	add	r3, sp, #4
   17dd4:	2201      	movs	r2, #1
          xHigherPriorityTaskWoken = pdFALSE;
   17dd6:	9401      	str	r4, [sp, #4]
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   17dd8:	f007 fb00 	bl	1f3dc <xTimerPendFunctionCallFromISR>
          if ( xResult != pdFAIL )
   17ddc:	2800      	cmp	r0, #0
   17dde:	d0e2      	beq.n	17da6 <WsfSetEvent+0x5a>
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   17de0:	9b01      	ldr	r3, [sp, #4]
   17de2:	2b00      	cmp	r3, #0
   17de4:	d0df      	beq.n	17da6 <WsfSetEvent+0x5a>
   17de6:	e7d4      	b.n	17d92 <WsfSetEvent+0x46>
   17de8:	10006e8b 	.word	0x10006e8b
   17dec:	10006e8c 	.word	0x10006e8c
   17df0:	10006ec8 	.word	0x10006ec8
   17df4:	0001d979 	.word	0x0001d979

00017df8 <WsfTaskSetReady>:
  if (csNesting == 0)
   17df8:	4b1f      	ldr	r3, [pc, #124]	; (17e78 <WsfTaskSetReady+0x80>)
   17dfa:	781a      	ldrb	r2, [r3, #0]
   17dfc:	bb12      	cbnz	r2, 17e44 <WsfTaskSetReady+0x4c>
    __asm volatile ("cpsid i");
   17dfe:	b672      	cpsid	i
  (void)handlerId;

  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
  wsfOs.task.taskEventMask |= event;
   17e00:	4a1e      	ldr	r2, [pc, #120]	; (17e7c <WsfTaskSetReady+0x84>)
  csNesting++;
   17e02:	781b      	ldrb	r3, [r3, #0]
  wsfOs.task.taskEventMask |= event;
   17e04:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
   17e08:	4301      	orrs	r1, r0
   17e0a:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
  if (csNesting == 0)
   17e0e:	b903      	cbnz	r3, 17e12 <WsfTaskSetReady+0x1a>
    __asm volatile ("cpsie i");
   17e10:	b662      	cpsie	i
  if(xRadioTaskEventObject != NULL) 
   17e12:	4b1b      	ldr	r3, [pc, #108]	; (17e80 <WsfTaskSetReady+0x88>)
   17e14:	681a      	ldr	r2, [r3, #0]
   17e16:	b1fa      	cbz	r2, 17e58 <WsfTaskSetReady+0x60>
{
   17e18:	b510      	push	{r4, lr}
   17e1a:	b082      	sub	sp, #8
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   17e1c:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
   17e20:	b9da      	cbnz	r2, 17e5a <WsfTaskSetReady+0x62>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   17e22:	6818      	ldr	r0, [r3, #0]
   17e24:	2101      	movs	r1, #1
   17e26:	f005 fd6d 	bl	1d904 <xEventGroupSetBits>
          if ( xResult != pdFAIL )
   17e2a:	b148      	cbz	r0, 17e40 <WsfTaskSetReady+0x48>
              portYIELD();
   17e2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17e34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   17e38:	f3bf 8f4f 	dsb	sy
   17e3c:	f3bf 8f6f 	isb	sy
  WSF_CS_EXIT(cs);

  /* set event in OS */

  WsfSetOsSpecificEvent();
}
   17e40:	b002      	add	sp, #8
   17e42:	bd10      	pop	{r4, pc}
  wsfOs.task.taskEventMask |= event;
   17e44:	4b0d      	ldr	r3, [pc, #52]	; (17e7c <WsfTaskSetReady+0x84>)
   17e46:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   17e4a:	4311      	orrs	r1, r2
   17e4c:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
  if(xRadioTaskEventObject != NULL) 
   17e50:	4b0b      	ldr	r3, [pc, #44]	; (17e80 <WsfTaskSetReady+0x88>)
   17e52:	681a      	ldr	r2, [r3, #0]
   17e54:	2a00      	cmp	r2, #0
   17e56:	d1df      	bne.n	17e18 <WsfTaskSetReady+0x20>
   17e58:	4770      	bx	lr
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   17e5a:	6819      	ldr	r1, [r3, #0]
   17e5c:	4809      	ldr	r0, [pc, #36]	; (17e84 <WsfTaskSetReady+0x8c>)
          xHigherPriorityTaskWoken = pdFALSE;
   17e5e:	2400      	movs	r4, #0
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   17e60:	ab01      	add	r3, sp, #4
   17e62:	2201      	movs	r2, #1
          xHigherPriorityTaskWoken = pdFALSE;
   17e64:	9401      	str	r4, [sp, #4]
          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   17e66:	f007 fab9 	bl	1f3dc <xTimerPendFunctionCallFromISR>
          if ( xResult != pdFAIL )
   17e6a:	2800      	cmp	r0, #0
   17e6c:	d0e8      	beq.n	17e40 <WsfTaskSetReady+0x48>
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   17e6e:	9b01      	ldr	r3, [sp, #4]
   17e70:	2b00      	cmp	r3, #0
   17e72:	d0e5      	beq.n	17e40 <WsfTaskSetReady+0x48>
   17e74:	e7da      	b.n	17e2c <WsfTaskSetReady+0x34>
   17e76:	bf00      	nop
   17e78:	10006e8b 	.word	0x10006e8b
   17e7c:	10006e8c 	.word	0x10006e8c
   17e80:	10006ec8 	.word	0x10006ec8
   17e84:	0001d979 	.word	0x0001d979

00017e88 <WsfTaskMsgQueue>:
{
  /* Unused parameter */
  (void)handlerId;

  return &(wsfOs.task.msgQueue);
}
   17e88:	4800      	ldr	r0, [pc, #0]	; (17e8c <WsfTaskMsgQueue+0x4>)
   17e8a:	4770      	bx	lr
   17e8c:	10006ebc 	.word	0x10006ebc

00017e90 <WsfOsSetNextHandler>:
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   17e90:	4a04      	ldr	r2, [pc, #16]	; (17ea4 <WsfOsSetNextHandler+0x14>)
   17e92:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   17e96:	1c59      	adds	r1, r3, #1

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   17e98:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   17e9c:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39

  return handlerId;
}
   17ea0:	4618      	mov	r0, r3
   17ea2:	4770      	bx	lr
   17ea4:	10006e8c 	.word	0x10006e8c

00017ea8 <WsfOsInit>:
*
*  \return None.
*/
/*************************************************************************************************/
void WsfOsInit(void)
{
   17ea8:	b510      	push	{r4, lr}
  memset(&wsfOs, 0, sizeof(wsfOs));

  if( xRadioTaskEventObject == NULL)
   17eaa:	4c06      	ldr	r4, [pc, #24]	; (17ec4 <WsfOsInit+0x1c>)
  memset(&wsfOs, 0, sizeof(wsfOs));
   17eac:	4806      	ldr	r0, [pc, #24]	; (17ec8 <WsfOsInit+0x20>)
   17eae:	223c      	movs	r2, #60	; 0x3c
   17eb0:	2100      	movs	r1, #0
   17eb2:	f009 f95f 	bl	21174 <memset>
  if( xRadioTaskEventObject == NULL)
   17eb6:	6823      	ldr	r3, [r4, #0]
   17eb8:	b103      	cbz	r3, 17ebc <WsfOsInit+0x14>
  {
    xRadioTaskEventObject = xEventGroupCreate();

    WSF_ASSERT(xRadioTaskEventObject != NULL);
  }
}
   17eba:	bd10      	pop	{r4, pc}
    xRadioTaskEventObject = xEventGroupCreate();
   17ebc:	f005 fcae 	bl	1d81c <xEventGroupCreate>
   17ec0:	6020      	str	r0, [r4, #0]
}
   17ec2:	bd10      	pop	{r4, pc}
   17ec4:	10006ec8 	.word	0x10006ec8
   17ec8:	10006e8c 	.word	0x10006e8c

00017ecc <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   17ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17ed0:	b084      	sub	sp, #16
   17ed2:	4d3f      	ldr	r5, [pc, #252]	; (17fd0 <wsfOsDispatcher+0x104>)
  if (csNesting == 0)
   17ed4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 17fdc <wsfOsDispatcher+0x110>

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;

  WsfTimerUpdateTicks();
   17ed8:	f000 f9fc 	bl	182d4 <WsfTimerUpdateTicks>
    WSF_CS_EXIT(cs);

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   17edc:	f105 0730 	add.w	r7, r5, #48	; 0x30
    pTask->taskEventMask = 0;
   17ee0:	f04f 0900 	mov.w	r9, #0
   17ee4:	e00e      	b.n	17f04 <wsfOsDispatcher+0x38>
    __asm volatile ("cpsid i");
   17ee6:	b672      	cpsid	i
  csNesting++;
   17ee8:	f898 2000 	ldrb.w	r2, [r8]
    taskEventMask = pTask->taskEventMask;
   17eec:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    pTask->taskEventMask = 0;
   17ef0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  if (csNesting == 0)
   17ef4:	b902      	cbnz	r2, 17ef8 <wsfOsDispatcher+0x2c>
    __asm volatile ("cpsie i");
   17ef6:	b662      	cpsie	i
    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   17ef8:	07f1      	lsls	r1, r6, #31
   17efa:	d416      	bmi.n	17f2a <wsfOsDispatcher+0x5e>
        (*pTask->handler[handlerId])(0, pMsg);
        WsfMsgFree(pMsg);
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   17efc:	07b2      	lsls	r2, r6, #30
   17efe:	d423      	bmi.n	17f48 <wsfOsDispatcher+0x7c>
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   17f00:	0773      	lsls	r3, r6, #29
   17f02:	d42c      	bmi.n	17f5e <wsfOsDispatcher+0x92>
  while (pTask->taskEventMask)
   17f04:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
   17f08:	2e00      	cmp	r6, #0
   17f0a:	d04c      	beq.n	17fa6 <wsfOsDispatcher+0xda>
  if (csNesting == 0)
   17f0c:	f898 3000 	ldrb.w	r3, [r8]
   17f10:	2b00      	cmp	r3, #0
   17f12:	d0e8      	beq.n	17ee6 <wsfOsDispatcher+0x1a>
    pTask->taskEventMask = 0;
   17f14:	f885 9038 	strb.w	r9, [r5, #56]	; 0x38
  if (csNesting == 0)
   17f18:	e7ee      	b.n	17ef8 <wsfOsDispatcher+0x2c>
        (*pTask->handler[handlerId])(0, pMsg);
   17f1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   17f1e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   17f22:	4798      	blx	r3
        WsfMsgFree(pMsg);
   17f24:	4620      	mov	r0, r4
   17f26:	f7ff fec3 	bl	17cb0 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   17f2a:	f10d 010f 	add.w	r1, sp, #15
   17f2e:	4638      	mov	r0, r7
   17f30:	f7ff feda 	bl	17ce8 <WsfMsgDeq>
   17f34:	4604      	mov	r4, r0
        (*pTask->handler[handlerId])(0, pMsg);
   17f36:	4621      	mov	r1, r4
   17f38:	2000      	movs	r0, #0
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   17f3a:	2c00      	cmp	r4, #0
   17f3c:	d1ed      	bne.n	17f1a <wsfOsDispatcher+0x4e>
   17f3e:	e7dd      	b.n	17efc <wsfOsDispatcher+0x30>
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   17f40:	7b1b      	ldrb	r3, [r3, #12]
   17f42:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   17f46:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   17f48:	2000      	movs	r0, #0
   17f4a:	f000 f9ab 	bl	182a4 <WsfTimerServiceExpired>
   17f4e:	4603      	mov	r3, r0
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   17f50:	f103 0108 	add.w	r1, r3, #8
   17f54:	2000      	movs	r0, #0
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   17f56:	2b00      	cmp	r3, #0
   17f58:	d1f2      	bne.n	17f40 <wsfOsDispatcher+0x74>
    if (taskEventMask & WSF_HANDLER_EVENT)
   17f5a:	0773      	lsls	r3, r6, #29
   17f5c:	d5d2      	bpl.n	17f04 <wsfOsDispatcher+0x38>
   17f5e:	4c1d      	ldr	r4, [pc, #116]	; (17fd4 <wsfOsDispatcher+0x108>)
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
        {
          WSF_CS_ENTER(cs);
          eventMask = pTask->handlerEventMask[i];
          pTask->handlerEventMask[i] = 0;
   17f60:	f04f 0900 	mov.w	r9, #0
   17f64:	f1a4 0623 	sub.w	r6, r4, #35	; 0x23
   17f68:	f104 0a09 	add.w	sl, r4, #9
   17f6c:	e00d      	b.n	17f8a <wsfOsDispatcher+0xbe>
    __asm volatile ("cpsid i");
   17f6e:	b672      	cpsid	i
  csNesting++;
   17f70:	f898 2000 	ldrb.w	r2, [r8]
          eventMask = pTask->handlerEventMask[i];
   17f74:	7820      	ldrb	r0, [r4, #0]
          pTask->handlerEventMask[i] = 0;
   17f76:	7023      	strb	r3, [r4, #0]
  if (csNesting == 0)
   17f78:	b902      	cbnz	r2, 17f7c <wsfOsDispatcher+0xb0>
    __asm volatile ("cpsie i");
   17f7a:	b662      	cpsie	i
          WSF_CS_EXIT(cs);

          (*pTask->handler[i])(eventMask, NULL);
   17f7c:	6833      	ldr	r3, [r6, #0]
   17f7e:	2100      	movs	r1, #0
   17f80:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   17f82:	4554      	cmp	r4, sl
   17f84:	f106 0604 	add.w	r6, r6, #4
   17f88:	d0aa      	beq.n	17ee0 <wsfOsDispatcher+0x14>
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   17f8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   17f8e:	2800      	cmp	r0, #0
   17f90:	d0f7      	beq.n	17f82 <wsfOsDispatcher+0xb6>
   17f92:	6833      	ldr	r3, [r6, #0]
   17f94:	2b00      	cmp	r3, #0
   17f96:	d0f4      	beq.n	17f82 <wsfOsDispatcher+0xb6>
  if (csNesting == 0)
   17f98:	f898 3000 	ldrb.w	r3, [r8]
   17f9c:	2b00      	cmp	r3, #0
   17f9e:	d0e6      	beq.n	17f6e <wsfOsDispatcher+0xa2>
          pTask->handlerEventMask[i] = 0;
   17fa0:	f884 9000 	strb.w	r9, [r4]
  if (csNesting == 0)
   17fa4:	e7ea      	b.n	17f7c <wsfOsDispatcher+0xb0>
        }
      }
    }
  }

  WsfTimerUpdateTicks();
   17fa6:	f000 f995 	bl	182d4 <WsfTimerUpdateTicks>

  if (wsfOsReadyToSleep())
   17faa:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   17fae:	b113      	cbz	r3, 17fb6 <wsfOsDispatcher+0xea>
  {
    xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
                      pdFALSE, portMAX_DELAY);
  }

}
   17fb0:	b004      	add	sp, #16
   17fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    xEventGroupWaitBits(xRadioTaskEventObject, 1, pdTRUE,
   17fb6:	4808      	ldr	r0, [pc, #32]	; (17fd8 <wsfOsDispatcher+0x10c>)
   17fb8:	2201      	movs	r2, #1
   17fba:	f04f 31ff 	mov.w	r1, #4294967295
   17fbe:	6800      	ldr	r0, [r0, #0]
   17fc0:	9100      	str	r1, [sp, #0]
   17fc2:	4611      	mov	r1, r2
   17fc4:	f005 fc38 	bl	1d838 <xEventGroupWaitBits>
}
   17fc8:	b004      	add	sp, #16
   17fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17fce:	bf00      	nop
   17fd0:	10006e8c 	.word	0x10006e8c
   17fd4:	10006eaf 	.word	0x10006eaf
   17fd8:	10006ec8 	.word	0x10006ec8
   17fdc:	10006e8b 	.word	0x10006e8b

00017fe0 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   17fe0:	b538      	push	{r3, r4, r5, lr}

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   17fe2:	2300      	movs	r3, #0
{
   17fe4:	4604      	mov	r4, r0
  WSF_QUEUE_NEXT(pElem) = NULL;
   17fe6:	600b      	str	r3, [r1, #0]
{
   17fe8:	460d      	mov	r5, r1

  /* enter critical section */
  WSF_CS_ENTER(cs);
   17fea:	f7ff fe87 	bl	17cfc <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   17fee:	6823      	ldr	r3, [r4, #0]
   17ff0:	b133      	cbz	r3, 18000 <WsfQueueEnq+0x20>
    pQueue->pTail = pElem;
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   17ff2:	6863      	ldr	r3, [r4, #4]
   17ff4:	601d      	str	r5, [r3, #0]
    pQueue->pTail = pElem;
   17ff6:	6065      	str	r5, [r4, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
   17ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WSF_CS_EXIT(cs);
   17ffc:	f7ff be88 	b.w	17d10 <WsfCsExit>
    pQueue->pTail = pElem;
   18000:	e9c4 5500 	strd	r5, r5, [r4]
}
   18004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WSF_CS_EXIT(cs);
   18008:	f7ff be82 	b.w	17d10 <WsfCsExit>

0001800c <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   1800c:	b538      	push	{r3, r4, r5, lr}
   1800e:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   18010:	f7ff fe74 	bl	17cfc <WsfCsEnter>

  pElem = pQueue->pHead;
   18014:	6825      	ldr	r5, [r4, #0]

  /* if queue is not empty */
  if (pElem != NULL)
   18016:	b115      	cbz	r5, 1801e <WsfQueueDeq+0x12>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   18018:	682b      	ldr	r3, [r5, #0]
   1801a:	6023      	str	r3, [r4, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   1801c:	b11b      	cbz	r3, 18026 <WsfQueueDeq+0x1a>
      pQueue->pTail = NULL;
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1801e:	f7ff fe77 	bl	17d10 <WsfCsExit>

  return pElem;
}
   18022:	4628      	mov	r0, r5
   18024:	bd38      	pop	{r3, r4, r5, pc}
      pQueue->pTail = NULL;
   18026:	6063      	str	r3, [r4, #4]
  WSF_CS_EXIT(cs);
   18028:	f7ff fe72 	bl	17d10 <WsfCsExit>
}
   1802c:	4628      	mov	r0, r5
   1802e:	bd38      	pop	{r3, r4, r5, pc}

00018030 <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   18030:	b570      	push	{r4, r5, r6, lr}
   18032:	4604      	mov	r4, r0
   18034:	460d      	mov	r5, r1
   18036:	4616      	mov	r6, r2

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   18038:	f7ff fe60 	bl	17cfc <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   1803c:	6823      	ldr	r3, [r4, #0]
   1803e:	b153      	cbz	r3, 18056 <WsfQueueInsert+0x26>
   18040:	6863      	ldr	r3, [r4, #4]
   18042:	42b3      	cmp	r3, r6
   18044:	d007      	beq.n	18056 <WsfQueueInsert+0x26>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   18046:	b1ae      	cbz	r6, 18074 <WsfQueueInsert+0x44>
    WsfQueuePush(pQueue, pElem);
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   18048:	6833      	ldr	r3, [r6, #0]
   1804a:	602b      	str	r3, [r5, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   1804c:	6035      	str	r5, [r6, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
   1804e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
   18052:	f7ff be5d 	b.w	17d10 <WsfCsExit>
  WSF_QUEUE_NEXT(pElem) = NULL;
   18056:	2300      	movs	r3, #0
   18058:	602b      	str	r3, [r5, #0]
  WSF_CS_ENTER(cs);
   1805a:	f7ff fe4f 	bl	17cfc <WsfCsEnter>
  if (pQueue->pHead == NULL)
   1805e:	6823      	ldr	r3, [r4, #0]
   18060:	b17b      	cbz	r3, 18082 <WsfQueueInsert+0x52>
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   18062:	6863      	ldr	r3, [r4, #4]
   18064:	601d      	str	r5, [r3, #0]
    pQueue->pTail = pElem;
   18066:	6065      	str	r5, [r4, #4]
  WSF_CS_EXIT(cs);
   18068:	f7ff fe52 	bl	17d10 <WsfCsExit>
}
   1806c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
   18070:	f7ff be4e 	b.w	17d10 <WsfCsExit>
  WSF_CS_ENTER(cs);
   18074:	f7ff fe42 	bl	17cfc <WsfCsEnter>
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   18078:	6823      	ldr	r3, [r4, #0]
   1807a:	602b      	str	r3, [r5, #0]
  if (pQueue->pHead == NULL)
   1807c:	b123      	cbz	r3, 18088 <WsfQueueInsert+0x58>
  pQueue->pHead = pElem;
   1807e:	6025      	str	r5, [r4, #0]
   18080:	e7f2      	b.n	18068 <WsfQueueInsert+0x38>
    pQueue->pTail = pElem;
   18082:	e9c4 5500 	strd	r5, r5, [r4]
   18086:	e7ef      	b.n	18068 <WsfQueueInsert+0x38>
    pQueue->pTail = pElem;
   18088:	6065      	str	r5, [r4, #4]
   1808a:	e7f8      	b.n	1807e <WsfQueueInsert+0x4e>

0001808c <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1808c:	b570      	push	{r4, r5, r6, lr}
   1808e:	4605      	mov	r5, r0
   18090:	460c      	mov	r4, r1
   18092:	4616      	mov	r6, r2
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   18094:	f7ff fe32 	bl	17cfc <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   18098:	682b      	ldr	r3, [r5, #0]
   1809a:	42a3      	cmp	r3, r4
   1809c:	d00a      	beq.n	180b4 <WsfQueueRemove+0x28>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
  }
  else if (pPrev)
   1809e:	b10e      	cbz	r6, 180a4 <WsfQueueRemove+0x18>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   180a0:	6823      	ldr	r3, [r4, #0]
   180a2:	6033      	str	r3, [r6, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   180a4:	686b      	ldr	r3, [r5, #4]
   180a6:	42a3      	cmp	r3, r4
  {
    /* update tail */
    pQueue->pTail = pPrev;
   180a8:	bf08      	it	eq
   180aa:	606e      	streq	r6, [r5, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
}
   180ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  WSF_CS_EXIT(cs);
   180b0:	f7ff be2e 	b.w	17d10 <WsfCsExit>
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   180b4:	6823      	ldr	r3, [r4, #0]
   180b6:	602b      	str	r3, [r5, #0]
   180b8:	e7f4      	b.n	180a4 <WsfQueueRemove+0x18>
   180ba:	bf00      	nop

000180bc <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   180bc:	b510      	push	{r4, lr}
   180be:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   180c0:	f7ff fe1c 	bl	17cfc <WsfCsEnter>

  pElem = pQueue->pHead;
   180c4:	6823      	ldr	r3, [r4, #0]

  /* iterate over queue */
  while (pElem != NULL)
   180c6:	b14b      	cbz	r3, 180dc <WsfQueueCount+0x20>
  uint16_t        count = 0;
   180c8:	2400      	movs	r4, #0
  {
    count++;
    pElem = pElem->pNext;
   180ca:	681b      	ldr	r3, [r3, #0]
    count++;
   180cc:	3401      	adds	r4, #1
   180ce:	b2a4      	uxth	r4, r4
  while (pElem != NULL)
   180d0:	2b00      	cmp	r3, #0
   180d2:	d1fa      	bne.n	180ca <WsfQueueCount+0xe>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   180d4:	f7ff fe1c 	bl	17d10 <WsfCsExit>

  return count;
}
   180d8:	4620      	mov	r0, r4
   180da:	bd10      	pop	{r4, pc}
  uint16_t        count = 0;
   180dc:	461c      	mov	r4, r3
  WSF_CS_EXIT(cs);
   180de:	f7ff fe17 	bl	17d10 <WsfCsExit>
}
   180e2:	4620      	mov	r0, r4
   180e4:	bd10      	pop	{r4, pc}
   180e6:	bf00      	nop

000180e8 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   180e8:	b510      	push	{r4, lr}
   180ea:	4604      	mov	r4, r0
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   180ec:	f7ff fe06 	bl	17cfc <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   180f0:	6824      	ldr	r4, [r4, #0]
   180f2:	fab4 f484 	clz	r4, r4
   180f6:	0964      	lsrs	r4, r4, #5

  /* exit critical section */
  WSF_CS_EXIT(cs);
   180f8:	f7ff fe0a 	bl	17d10 <WsfCsExit>

  return empty;
}
   180fc:	4620      	mov	r0, r4
   180fe:	bd10      	pop	{r4, pc}

00018100 <WsfTimer_handler>:
  WsfTaskUnlock();
}

static void WsfTimer_handler(TimerHandle_t xTimer)
{
  WsfTaskSetReady(0, WSF_TIMER_EVENT);
   18100:	2102      	movs	r1, #2
   18102:	2000      	movs	r0, #0
   18104:	f7ff be78 	b.w	17df8 <WsfTaskSetReady>

00018108 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   18108:	b510      	push	{r4, lr}
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);

  if(xWsfTimer == NULL)
   1810a:	4c0d      	ldr	r4, [pc, #52]	; (18140 <WsfTimerInit+0x38>)
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   1810c:	4a0d      	ldr	r2, [pc, #52]	; (18144 <WsfTimerInit+0x3c>)
  if(xWsfTimer == NULL)
   1810e:	6823      	ldr	r3, [r4, #0]
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   18110:	2000      	movs	r0, #0
   18112:	2100      	movs	r1, #0
   18114:	e9c2 0100 	strd	r0, r1, [r2]
{
   18118:	b082      	sub	sp, #8
  if(xWsfTimer == NULL)
   1811a:	b10b      	cbz	r3, 18120 <WsfTimerInit+0x18>
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
          pdFALSE, NULL, WsfTimer_handler);
    configASSERT(xWsfTimer);
    g_ui32LastTime = xTaskGetTickCount();
  }
}
   1811c:	b002      	add	sp, #8
   1811e:	bd10      	pop	{r4, pc}
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   18120:	4a09      	ldr	r2, [pc, #36]	; (18148 <WsfTimerInit+0x40>)
   18122:	9200      	str	r2, [sp, #0]
   18124:	4809      	ldr	r0, [pc, #36]	; (1814c <WsfTimerInit+0x44>)
   18126:	461a      	mov	r2, r3
   18128:	210a      	movs	r1, #10
   1812a:	f007 f8e1 	bl	1f2f0 <xTimerCreate>
   1812e:	6020      	str	r0, [r4, #0]
    configASSERT(xWsfTimer);
   18130:	b120      	cbz	r0, 1813c <WsfTimerInit+0x34>
    g_ui32LastTime = xTaskGetTickCount();
   18132:	f006 fbbd 	bl	1e8b0 <xTaskGetTickCount>
   18136:	4b06      	ldr	r3, [pc, #24]	; (18150 <WsfTimerInit+0x48>)
   18138:	6018      	str	r0, [r3, #0]
}
   1813a:	e7ef      	b.n	1811c <WsfTimerInit+0x14>
    configASSERT(xWsfTimer);
   1813c:	e7fe      	b.n	1813c <WsfTimerInit+0x34>
   1813e:	bf00      	nop
   18140:	10006ed8 	.word	0x10006ed8
   18144:	10006ed0 	.word	0x10006ed0
   18148:	00018101 	.word	0x00018101
   1814c:	000259ec 	.word	0x000259ec
   18150:	10006ecc 	.word	0x10006ecc

00018154 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   18154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18156:	4606      	mov	r6, r0
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   18158:	2564      	movs	r5, #100	; 0x64
   1815a:	fb01 f505 	mul.w	r5, r1, r5
  WsfTaskLock();
   1815e:	f7ff fde1 	bl	17d24 <WsfTaskLock>
  if (pTimer->isStarted)
   18162:	7b73      	ldrb	r3, [r6, #13]
   18164:	b9b3      	cbnz	r3, 18194 <WsfTimerStartSec+0x40>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   18166:	4b1b      	ldr	r3, [pc, #108]	; (181d4 <WsfTimerStartSec+0x80>)
   18168:	681b      	ldr	r3, [r3, #0]
  pTimer->ticks = ticks;
   1816a:	6075      	str	r5, [r6, #4]
  pTimer->isStarted = TRUE;
   1816c:	2201      	movs	r2, #1
   1816e:	7372      	strb	r2, [r6, #13]
  while (pElem != NULL)
   18170:	b343      	cbz	r3, 181c4 <WsfTimerStartSec+0x70>
    if (pElem == pTimer)
   18172:	2200      	movs	r2, #0
   18174:	e003      	b.n	1817e <WsfTimerStartSec+0x2a>
    pElem = pElem->pNext;
   18176:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
   18178:	461a      	mov	r2, r3
   1817a:	b11c      	cbz	r4, 18184 <WsfTimerStartSec+0x30>
   1817c:	4623      	mov	r3, r4
    if (pTimer->ticks < pElem->ticks)
   1817e:	685c      	ldr	r4, [r3, #4]
   18180:	42a5      	cmp	r5, r4
   18182:	d2f8      	bcs.n	18176 <WsfTimerStartSec+0x22>
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   18184:	4631      	mov	r1, r6
   18186:	4813      	ldr	r0, [pc, #76]	; (181d4 <WsfTimerStartSec+0x80>)
   18188:	f7ff ff52 	bl	18030 <WsfQueueInsert>
}
   1818c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  WsfTaskUnlock();
   18190:	f7ff bdd2 	b.w	17d38 <WsfTaskUnlock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   18194:	4f0f      	ldr	r7, [pc, #60]	; (181d4 <WsfTimerStartSec+0x80>)
   18196:	683b      	ldr	r3, [r7, #0]
  while (pElem != NULL)
   18198:	b1b3      	cbz	r3, 181c8 <WsfTimerStartSec+0x74>
    if (pElem == pTimer)
   1819a:	429e      	cmp	r6, r3
   1819c:	d00b      	beq.n	181b6 <WsfTimerStartSec+0x62>
   1819e:	461c      	mov	r4, r3
   181a0:	e001      	b.n	181a6 <WsfTimerStartSec+0x52>
   181a2:	42a6      	cmp	r6, r4
   181a4:	d008      	beq.n	181b8 <WsfTimerStartSec+0x64>
    pElem = pElem->pNext;
   181a6:	4622      	mov	r2, r4
   181a8:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   181aa:	2c00      	cmp	r4, #0
   181ac:	d1f9      	bne.n	181a2 <WsfTimerStartSec+0x4e>
  pTimer->isStarted = TRUE;
   181ae:	2201      	movs	r2, #1
   181b0:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   181b2:	6075      	str	r5, [r6, #4]
  while (pElem != NULL)
   181b4:	e7dd      	b.n	18172 <WsfTimerStartSec+0x1e>
  wsfTimer_t  *pPrev = NULL;
   181b6:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   181b8:	4806      	ldr	r0, [pc, #24]	; (181d4 <WsfTimerStartSec+0x80>)
   181ba:	4631      	mov	r1, r6
   181bc:	f7ff ff66 	bl	1808c <WsfQueueRemove>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   181c0:	683b      	ldr	r3, [r7, #0]
   181c2:	e7d2      	b.n	1816a <WsfTimerStartSec+0x16>
  wsfTimer_t  *pPrev = NULL;
   181c4:	461a      	mov	r2, r3
   181c6:	e7dd      	b.n	18184 <WsfTimerStartSec+0x30>
  pTimer->isStarted = TRUE;
   181c8:	2201      	movs	r2, #1
   181ca:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   181cc:	6075      	str	r5, [r6, #4]
  wsfTimer_t  *pPrev = NULL;
   181ce:	461a      	mov	r2, r3
   181d0:	e7d8      	b.n	18184 <WsfTimerStartSec+0x30>
   181d2:	bf00      	nop
   181d4:	10006ed0 	.word	0x10006ed0

000181d8 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   181d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   181da:	4b1f      	ldr	r3, [pc, #124]	; (18258 <WsfTimerStartMs+0x80>)
{
   181dc:	4606      	mov	r6, r0
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   181de:	fba3 3501 	umull	r3, r5, r3, r1
  WsfTaskLock();
   181e2:	f7ff fd9f 	bl	17d24 <WsfTaskLock>
  if (pTimer->isStarted)
   181e6:	7b73      	ldrb	r3, [r6, #13]
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   181e8:	08ed      	lsrs	r5, r5, #3
  if (pTimer->isStarted)
   181ea:	b9b3      	cbnz	r3, 1821a <WsfTimerStartMs+0x42>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   181ec:	4b1b      	ldr	r3, [pc, #108]	; (1825c <WsfTimerStartMs+0x84>)
   181ee:	681b      	ldr	r3, [r3, #0]
  pTimer->ticks = ticks;
   181f0:	6075      	str	r5, [r6, #4]
  pTimer->isStarted = TRUE;
   181f2:	2201      	movs	r2, #1
   181f4:	7372      	strb	r2, [r6, #13]
  while (pElem != NULL)
   181f6:	b343      	cbz	r3, 1824a <WsfTimerStartMs+0x72>
    if (pElem == pTimer)
   181f8:	2200      	movs	r2, #0
   181fa:	e003      	b.n	18204 <WsfTimerStartMs+0x2c>
    pElem = pElem->pNext;
   181fc:	681c      	ldr	r4, [r3, #0]
  while (pElem != NULL)
   181fe:	461a      	mov	r2, r3
   18200:	b11c      	cbz	r4, 1820a <WsfTimerStartMs+0x32>
   18202:	4623      	mov	r3, r4
    if (pTimer->ticks < pElem->ticks)
   18204:	685c      	ldr	r4, [r3, #4]
   18206:	42a5      	cmp	r5, r4
   18208:	d2f8      	bcs.n	181fc <WsfTimerStartMs+0x24>
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   1820a:	4631      	mov	r1, r6
   1820c:	4813      	ldr	r0, [pc, #76]	; (1825c <WsfTimerStartMs+0x84>)
   1820e:	f7ff ff0f 	bl	18030 <WsfQueueInsert>
}
   18212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  WsfTaskUnlock();
   18216:	f7ff bd8f 	b.w	17d38 <WsfTaskUnlock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1821a:	4f10      	ldr	r7, [pc, #64]	; (1825c <WsfTimerStartMs+0x84>)
   1821c:	683b      	ldr	r3, [r7, #0]
  while (pElem != NULL)
   1821e:	b1b3      	cbz	r3, 1824e <WsfTimerStartMs+0x76>
    if (pElem == pTimer)
   18220:	429e      	cmp	r6, r3
   18222:	d00b      	beq.n	1823c <WsfTimerStartMs+0x64>
   18224:	461c      	mov	r4, r3
   18226:	e001      	b.n	1822c <WsfTimerStartMs+0x54>
   18228:	42a6      	cmp	r6, r4
   1822a:	d008      	beq.n	1823e <WsfTimerStartMs+0x66>
    pElem = pElem->pNext;
   1822c:	4622      	mov	r2, r4
   1822e:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   18230:	2c00      	cmp	r4, #0
   18232:	d1f9      	bne.n	18228 <WsfTimerStartMs+0x50>
  pTimer->isStarted = TRUE;
   18234:	2201      	movs	r2, #1
   18236:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   18238:	6075      	str	r5, [r6, #4]
  while (pElem != NULL)
   1823a:	e7dd      	b.n	181f8 <WsfTimerStartMs+0x20>
  wsfTimer_t  *pPrev = NULL;
   1823c:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   1823e:	4807      	ldr	r0, [pc, #28]	; (1825c <WsfTimerStartMs+0x84>)
   18240:	4631      	mov	r1, r6
   18242:	f7ff ff23 	bl	1808c <WsfQueueRemove>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   18246:	683b      	ldr	r3, [r7, #0]
   18248:	e7d2      	b.n	181f0 <WsfTimerStartMs+0x18>
  wsfTimer_t  *pPrev = NULL;
   1824a:	461a      	mov	r2, r3
   1824c:	e7dd      	b.n	1820a <WsfTimerStartMs+0x32>
  pTimer->isStarted = TRUE;
   1824e:	2201      	movs	r2, #1
   18250:	7372      	strb	r2, [r6, #13]
  pTimer->ticks = ticks;
   18252:	6075      	str	r5, [r6, #4]
  wsfTimer_t  *pPrev = NULL;
   18254:	461a      	mov	r2, r3
   18256:	e7d8      	b.n	1820a <WsfTimerStartMs+0x32>
   18258:	cccccccd 	.word	0xcccccccd
   1825c:	10006ed0 	.word	0x10006ed0

00018260 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   18260:	b510      	push	{r4, lr}
   18262:	4604      	mov	r4, r0
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   18264:	f7ff fd5e 	bl	17d24 <WsfTaskLock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   18268:	4b0d      	ldr	r3, [pc, #52]	; (182a0 <WsfTimerStop+0x40>)
   1826a:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
   1826c:	b143      	cbz	r3, 18280 <WsfTimerStop+0x20>
    if (pElem == pTimer)
   1826e:	429c      	cmp	r4, r3
   18270:	d102      	bne.n	18278 <WsfTimerStop+0x18>
   18272:	e009      	b.n	18288 <WsfTimerStop+0x28>
   18274:	429c      	cmp	r4, r3
   18276:	d008      	beq.n	1828a <WsfTimerStop+0x2a>
    pElem = pElem->pNext;
   18278:	461a      	mov	r2, r3
   1827a:	681b      	ldr	r3, [r3, #0]
  while (pElem != NULL)
   1827c:	2b00      	cmp	r3, #0
   1827e:	d1f9      	bne.n	18274 <WsfTimerStop+0x14>

  wsfTimerRemove(pTimer);

  /* task schedule unlock */
  WsfTaskUnlock();
}
   18280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
   18284:	f7ff bd58 	b.w	17d38 <WsfTaskUnlock>
  wsfTimer_t  *pPrev = NULL;
   18288:	2200      	movs	r2, #0
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   1828a:	4621      	mov	r1, r4
   1828c:	4804      	ldr	r0, [pc, #16]	; (182a0 <WsfTimerStop+0x40>)
   1828e:	f7ff fefd 	bl	1808c <WsfQueueRemove>
    pTimer->isStarted = FALSE;
   18292:	2300      	movs	r3, #0
   18294:	7363      	strb	r3, [r4, #13]
}
   18296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
   1829a:	f7ff bd4d 	b.w	17d38 <WsfTaskUnlock>
   1829e:	bf00      	nop
   182a0:	10006ed0 	.word	0x10006ed0

000182a4 <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   182a4:	b538      	push	{r3, r4, r5, lr}

  /* Unused parameters */
  (void)taskId;

  /* task schedule lock */
  WsfTaskLock();
   182a6:	f7ff fd3d 	bl	17d24 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   182aa:	4809      	ldr	r0, [pc, #36]	; (182d0 <WsfTimerServiceExpired+0x2c>)
   182ac:	6804      	ldr	r4, [r0, #0]
   182ae:	b10c      	cbz	r4, 182b4 <WsfTimerServiceExpired+0x10>
   182b0:	6865      	ldr	r5, [r4, #4]
   182b2:	b125      	cbz	r5, 182be <WsfTimerServiceExpired+0x1a>
  }

  /* task schedule unlock */
  WsfTaskUnlock();

  return NULL;
   182b4:	2400      	movs	r4, #0
  WsfTaskUnlock();
   182b6:	f7ff fd3f 	bl	17d38 <WsfTaskUnlock>
}
   182ba:	4620      	mov	r0, r4
   182bc:	bd38      	pop	{r3, r4, r5, pc}
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   182be:	462a      	mov	r2, r5
   182c0:	4621      	mov	r1, r4
   182c2:	f7ff fee3 	bl	1808c <WsfQueueRemove>
    pElem->isStarted = FALSE;
   182c6:	7365      	strb	r5, [r4, #13]
    WsfTaskUnlock();
   182c8:	f7ff fd36 	bl	17d38 <WsfTaskUnlock>
}
   182cc:	4620      	mov	r0, r4
   182ce:	bd38      	pop	{r3, r4, r5, pc}
   182d0:	10006ed0 	.word	0x10006ed0

000182d4 <WsfTimerUpdateTicks>:
//
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void WsfTimerUpdateTicks(void)
{
   182d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   182d8:	4f2c      	ldr	r7, [pc, #176]	; (1838c <WsfTimerUpdateTicks+0xb8>)
{
   182da:	b083      	sub	sp, #12
    ui32CurrentTime = xTaskGetTickCount();
   182dc:	f006 fae8 	bl	1e8b0 <xTaskGetTickCount>
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   182e0:	683b      	ldr	r3, [r7, #0]
   182e2:	1ac3      	subs	r3, r0, r3

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   182e4:	2b09      	cmp	r3, #9
   182e6:	d821      	bhi.n	1832c <WsfTimerUpdateTicks+0x58>
  WsfTaskLock();
   182e8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1839c <WsfTimerUpdateTicks+0xc8>
   182ec:	f7ff fd1a 	bl	17d24 <WsfTaskLock>
  if (wsfTimerTimerQueue.pHead == NULL)
   182f0:	f8d8 3000 	ldr.w	r3, [r8]
   182f4:	2b00      	cmp	r3, #0
   182f6:	d039      	beq.n	1836c <WsfTimerUpdateTicks+0x98>
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   182f8:	685c      	ldr	r4, [r3, #4]
  WsfTaskUnlock();
   182fa:	f7ff fd1d 	bl	17d38 <WsfTaskUnlock>

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   182fe:	b194      	cbz	r4, 18326 <WsfTimerUpdateTicks+0x52>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   18300:	4b23      	ldr	r3, [pc, #140]	; (18390 <WsfTimerUpdateTicks+0xbc>)
   18302:	4924      	ldr	r1, [pc, #144]	; (18394 <WsfTimerUpdateTicks+0xc0>)
   18304:	f242 7210 	movw	r2, #10000	; 0x2710
   18308:	fb04 f202 	mul.w	r2, r4, r2
   1830c:	fba3 3202 	umull	r3, r2, r3, r2
   18310:	2364      	movs	r3, #100	; 0x64
   18312:	6808      	ldr	r0, [r1, #0]
   18314:	9300      	str	r3, [sp, #0]
   18316:	0992      	lsrs	r2, r2, #6
   18318:	2300      	movs	r3, #0
   1831a:	2104      	movs	r1, #4
   1831c:	f007 f830 	bl	1f380 <xTimerGenericCommand>
   18320:	2801      	cmp	r0, #1
   18322:	d000      	beq.n	18326 <WsfTimerUpdateTicks+0x52>
   18324:	e7fe      	b.n	18324 <WsfTimerUpdateTicks+0x50>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   18326:	b003      	add	sp, #12
   18328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   1832c:	4d1a      	ldr	r5, [pc, #104]	; (18398 <WsfTimerUpdateTicks+0xc4>)
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1832e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1839c <WsfTimerUpdateTicks+0xc8>
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   18332:	fba5 2303 	umull	r2, r3, r5, r3
   18336:	4606      	mov	r6, r0
   18338:	08dd      	lsrs	r5, r3, #3
  WsfTaskLock();
   1833a:	f7ff fcf3 	bl	17d24 <WsfTaskLock>
  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1833e:	f8d8 4000 	ldr.w	r4, [r8]
  while (pElem != NULL)
   18342:	b154      	cbz	r4, 1835a <WsfTimerUpdateTicks+0x86>
      pElem->ticks = 0;
   18344:	f04f 0900 	mov.w	r9, #0
    if (pElem->ticks > ticks)
   18348:	6863      	ldr	r3, [r4, #4]
   1834a:	429d      	cmp	r5, r3
      pElem->ticks -= ticks;
   1834c:	eba3 0205 	sub.w	r2, r3, r5
    if (pElem->ticks > ticks)
   18350:	d211      	bcs.n	18376 <WsfTimerUpdateTicks+0xa2>
      pElem->ticks -= ticks;
   18352:	6062      	str	r2, [r4, #4]
    pElem = pElem->pNext;
   18354:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   18356:	2c00      	cmp	r4, #0
   18358:	d1f6      	bne.n	18348 <WsfTimerUpdateTicks+0x74>
  WsfTaskUnlock();
   1835a:	f7ff fced 	bl	17d38 <WsfTaskUnlock>
        g_ui32LastTime = ui32CurrentTime;
   1835e:	603e      	str	r6, [r7, #0]
  WsfTaskLock();
   18360:	f7ff fce0 	bl	17d24 <WsfTaskLock>
  if (wsfTimerTimerQueue.pHead == NULL)
   18364:	f8d8 3000 	ldr.w	r3, [r8]
   18368:	2b00      	cmp	r3, #0
   1836a:	d1c5      	bne.n	182f8 <WsfTimerUpdateTicks+0x24>
}
   1836c:	b003      	add	sp, #12
   1836e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  WsfTaskUnlock();
   18372:	f7ff bce1 	b.w	17d38 <WsfTaskUnlock>
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   18376:	7b20      	ldrb	r0, [r4, #12]
      pElem->ticks = 0;
   18378:	f8c4 9004 	str.w	r9, [r4, #4]
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   1837c:	2102      	movs	r1, #2
   1837e:	f7ff fd3b 	bl	17df8 <WsfTaskSetReady>
    pElem = pElem->pNext;
   18382:	6824      	ldr	r4, [r4, #0]
  while (pElem != NULL)
   18384:	2c00      	cmp	r4, #0
   18386:	d1df      	bne.n	18348 <WsfTimerUpdateTicks+0x74>
   18388:	e7e7      	b.n	1835a <WsfTimerUpdateTicks+0x86>
   1838a:	bf00      	nop
   1838c:	10006ecc 	.word	0x10006ecc
   18390:	10624dd3 	.word	0x10624dd3
   18394:	10006ed8 	.word	0x10006ed8
   18398:	cccccccd 	.word	0xcccccccd
   1839c:	10006ed0 	.word	0x10006ed0

000183a0 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   183a0:	b40f      	push	{r0, r1, r2, r3}
   183a2:	b500      	push	{lr}
   183a4:	b0c3      	sub	sp, #268	; 0x10c
   183a6:	aa44      	add	r2, sp, #272	; 0x110
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   183a8:	a802      	add	r0, sp, #8
{
   183aa:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(args, pStr);
   183ae:	9201      	str	r2, [sp, #4]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   183b0:	f007 f9a8 	bl	1f704 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   183b4:	a802      	add	r0, sp, #8
   183b6:	f007 fe21 	bl	1fffc <am_util_stdio_printf>
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   183ba:	28ff      	cmp	r0, #255	; 0xff
   183bc:	d807      	bhi.n	183ce <WsfTrace+0x2e>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
  am_util_debug_printf("\n");
   183be:	4806      	ldr	r0, [pc, #24]	; (183d8 <WsfTrace+0x38>)
   183c0:	f007 fe1c 	bl	1fffc <am_util_stdio_printf>
}
   183c4:	b043      	add	sp, #268	; 0x10c
   183c6:	f85d eb04 	ldr.w	lr, [sp], #4
   183ca:	b004      	add	sp, #16
   183cc:	4770      	bx	lr
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   183ce:	4803      	ldr	r0, [pc, #12]	; (183dc <WsfTrace+0x3c>)
   183d0:	2183      	movs	r1, #131	; 0x83
   183d2:	f7ff fb8f 	bl	17af4 <WsfAssert>
   183d6:	e7f2      	b.n	183be <WsfTrace+0x1e>
   183d8:	00025c48 	.word	0x00025c48
   183dc:	00025a00 	.word	0x00025a00

000183e0 <GattDiscover>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void GattDiscover(dmConnId_t connId, uint16_t *pHdlList)
{
   183e0:	b500      	push	{lr}
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   183e2:	4b06      	ldr	r3, [pc, #24]	; (183fc <GattDiscover+0x1c>)
   183e4:	4a06      	ldr	r2, [pc, #24]	; (18400 <GattDiscover+0x20>)
{
   183e6:	b083      	sub	sp, #12
  AppDiscFindService(connId, ATT_16_UUID_LEN, (uint8_t *) attGattSvcUuid,
   183e8:	e9cd 3100 	strd	r3, r1, [sp]
   183ec:	2303      	movs	r3, #3
   183ee:	2102      	movs	r1, #2
   183f0:	f008 f914 	bl	2061c <AppDiscFindService>
                     GATT_HDL_LIST_LEN, (attcDiscChar_t **) gattDiscCharList, pHdlList);
}
   183f4:	b003      	add	sp, #12
   183f6:	f85d fb04 	ldr.w	pc, [sp], #4
   183fa:	bf00      	nop
   183fc:	10002ba0 	.word	0x10002ba0
   18400:	000259c0 	.word	0x000259c0

00018404 <default_RNG>:

#else /* Some other platform */

static int default_RNG(uint8_t *dest, unsigned size) {
    return 0;
}
   18404:	2000      	movs	r0, #0
   18406:	4770      	bx	lr

00018408 <vli_add>:
static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
    uint32_t carry = 0;
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   18408:	2300      	movs	r3, #0
static uint32_t vli_add(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   1840a:	b500      	push	{lr}
    __asm__ volatile (
   1840c:	4684      	mov	ip, r0
   1840e:	4618      	mov	r0, r3
   18410:	c908      	ldmia	r1!, {r3}
   18412:	f852 eb04 	ldr.w	lr, [r2], #4
   18416:	eb13 030e 	adds.w	r3, r3, lr
   1841a:	f84c 3b04 	str.w	r3, [ip], #4
   1841e:	c908      	ldmia	r1!, {r3}
   18420:	f852 eb04 	ldr.w	lr, [r2], #4
   18424:	eb53 030e 	adcs.w	r3, r3, lr
   18428:	f84c 3b04 	str.w	r3, [ip], #4
   1842c:	c908      	ldmia	r1!, {r3}
   1842e:	f852 eb04 	ldr.w	lr, [r2], #4
   18432:	eb53 030e 	adcs.w	r3, r3, lr
   18436:	f84c 3b04 	str.w	r3, [ip], #4
   1843a:	c908      	ldmia	r1!, {r3}
   1843c:	f852 eb04 	ldr.w	lr, [r2], #4
   18440:	eb53 030e 	adcs.w	r3, r3, lr
   18444:	f84c 3b04 	str.w	r3, [ip], #4
   18448:	c908      	ldmia	r1!, {r3}
   1844a:	f852 eb04 	ldr.w	lr, [r2], #4
   1844e:	eb53 030e 	adcs.w	r3, r3, lr
   18452:	f84c 3b04 	str.w	r3, [ip], #4
   18456:	c908      	ldmia	r1!, {r3}
   18458:	f852 eb04 	ldr.w	lr, [r2], #4
   1845c:	eb53 030e 	adcs.w	r3, r3, lr
   18460:	f84c 3b04 	str.w	r3, [ip], #4
   18464:	c908      	ldmia	r1!, {r3}
   18466:	f852 eb04 	ldr.w	lr, [r2], #4
   1846a:	eb53 030e 	adcs.w	r3, r3, lr
   1846e:	f84c 3b04 	str.w	r3, [ip], #4
   18472:	c908      	ldmia	r1!, {r3}
   18474:	f852 eb04 	ldr.w	lr, [r2], #4
   18478:	eb53 030e 	adcs.w	r3, r3, lr
   1847c:	f84c 3b04 	str.w	r3, [ip], #4
   18480:	4140      	adcs	r0, r0
    #endif
        :
        : "cc", "memory"
    );
    return carry;
}
   18482:	f85d fb04 	ldr.w	pc, [sp], #4
   18486:	bf00      	nop

00018488 <vli_sub>:
#define asm_add 1

static uint32_t vli_sub(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   18488:	b500      	push	{lr}
    uint32_t carry = 0;
    uint32_t left_word;
    uint32_t right_word;

    __asm__ volatile (
   1848a:	2300      	movs	r3, #0
   1848c:	f851 cb04 	ldr.w	ip, [r1], #4
   18490:	f852 eb04 	ldr.w	lr, [r2], #4
   18494:	ebbc 0c0e 	subs.w	ip, ip, lr
   18498:	f840 cb04 	str.w	ip, [r0], #4
   1849c:	f851 cb04 	ldr.w	ip, [r1], #4
   184a0:	f852 eb04 	ldr.w	lr, [r2], #4
   184a4:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   184a8:	f840 cb04 	str.w	ip, [r0], #4
   184ac:	f851 cb04 	ldr.w	ip, [r1], #4
   184b0:	f852 eb04 	ldr.w	lr, [r2], #4
   184b4:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   184b8:	f840 cb04 	str.w	ip, [r0], #4
   184bc:	f851 cb04 	ldr.w	ip, [r1], #4
   184c0:	f852 eb04 	ldr.w	lr, [r2], #4
   184c4:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   184c8:	f840 cb04 	str.w	ip, [r0], #4
   184cc:	f851 cb04 	ldr.w	ip, [r1], #4
   184d0:	f852 eb04 	ldr.w	lr, [r2], #4
   184d4:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   184d8:	f840 cb04 	str.w	ip, [r0], #4
   184dc:	f851 cb04 	ldr.w	ip, [r1], #4
   184e0:	f852 eb04 	ldr.w	lr, [r2], #4
   184e4:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   184e8:	f840 cb04 	str.w	ip, [r0], #4
   184ec:	f851 cb04 	ldr.w	ip, [r1], #4
   184f0:	f852 eb04 	ldr.w	lr, [r2], #4
   184f4:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   184f8:	f840 cb04 	str.w	ip, [r0], #4
   184fc:	f851 cb04 	ldr.w	ip, [r1], #4
   18500:	f852 eb04 	ldr.w	lr, [r2], #4
   18504:	eb7c 0c0e 	sbcs.w	ip, ip, lr
   18508:	f840 cb04 	str.w	ip, [r0], #4
   1850c:	415b      	adcs	r3, r3
        :
        : "cc", "memory"
    );
    return !carry; // note that on ARM, carry flag set means "no borrow" when subtracting
                   // (for some reason...)
}
   1850e:	fab3 f083 	clz	r0, r3
   18512:	0940      	lsrs	r0, r0, #5
   18514:	f85d fb04 	ldr.w	pc, [sp], #4

00018518 <vli_mult>:
}
#define asm_mult 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_mult(uint32_t *result, const uint32_t *left, const uint32_t *right) {
   18518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    register uint32_t *r0 __asm__("r0") = result;
    register const uint32_t *r1 __asm__("r1") = left;
    register const uint32_t *r2 __asm__("r2") = right;

    __asm__ volatile (
   1851c:	f100 0018 	add.w	r0, r0, #24
   18520:	f102 0218 	add.w	r2, r2, #24
   18524:	c918      	ldmia	r1!, {r3, r4}
   18526:	cac0      	ldmia	r2!, {r6, r7}
   18528:	fba3 bc06 	umull	fp, ip, r3, r6
   1852c:	f840 bb04 	str.w	fp, [r0], #4
   18530:	f04f 0a00 	mov.w	sl, #0
   18534:	fba3 b907 	umull	fp, r9, r3, r7
   18538:	eb1c 0c0b 	adds.w	ip, ip, fp
   1853c:	f149 0900 	adc.w	r9, r9, #0
   18540:	fba4 be06 	umull	fp, lr, r4, r6
   18544:	eb1c 0c0b 	adds.w	ip, ip, fp
   18548:	eb59 090e 	adcs.w	r9, r9, lr
   1854c:	f14a 0a00 	adc.w	sl, sl, #0
   18550:	f840 cb04 	str.w	ip, [r0], #4
   18554:	fba4 ce07 	umull	ip, lr, r4, r7
   18558:	eb19 090c 	adds.w	r9, r9, ip
   1855c:	eb4a 0a0e 	adc.w	sl, sl, lr
   18560:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   18564:	f1a0 001c 	sub.w	r0, r0, #28
   18568:	f1a2 0214 	sub.w	r2, r2, #20
   1856c:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   18570:	c920      	ldmia	r1!, {r5}
   18572:	fba3 bc06 	umull	fp, ip, r3, r6
   18576:	f840 bb04 	str.w	fp, [r0], #4
   1857a:	f04f 0a00 	mov.w	sl, #0
   1857e:	fba3 b907 	umull	fp, r9, r3, r7
   18582:	eb1c 0c0b 	adds.w	ip, ip, fp
   18586:	f149 0900 	adc.w	r9, r9, #0
   1858a:	fba4 be06 	umull	fp, lr, r4, r6
   1858e:	eb1c 0c0b 	adds.w	ip, ip, fp
   18592:	eb59 090e 	adcs.w	r9, r9, lr
   18596:	f14a 0a00 	adc.w	sl, sl, #0
   1859a:	f840 cb04 	str.w	ip, [r0], #4
   1859e:	f04f 0b00 	mov.w	fp, #0
   185a2:	fba3 ce08 	umull	ip, lr, r3, r8
   185a6:	eb19 090c 	adds.w	r9, r9, ip
   185aa:	eb5a 0a0e 	adcs.w	sl, sl, lr
   185ae:	f14b 0b00 	adc.w	fp, fp, #0
   185b2:	fba4 ce07 	umull	ip, lr, r4, r7
   185b6:	eb19 090c 	adds.w	r9, r9, ip
   185ba:	eb5a 0a0e 	adcs.w	sl, sl, lr
   185be:	f14b 0b00 	adc.w	fp, fp, #0
   185c2:	fba5 ce06 	umull	ip, lr, r5, r6
   185c6:	eb19 090c 	adds.w	r9, r9, ip
   185ca:	eb5a 0a0e 	adcs.w	sl, sl, lr
   185ce:	f14b 0b00 	adc.w	fp, fp, #0
   185d2:	f840 9b04 	str.w	r9, [r0], #4
   185d6:	c908      	ldmia	r1!, {r3}
   185d8:	f04f 0c00 	mov.w	ip, #0
   185dc:	fba4 e908 	umull	lr, r9, r4, r8
   185e0:	eb1a 0a0e 	adds.w	sl, sl, lr
   185e4:	eb5b 0b09 	adcs.w	fp, fp, r9
   185e8:	f14c 0c00 	adc.w	ip, ip, #0
   185ec:	fba5 e907 	umull	lr, r9, r5, r7
   185f0:	eb1a 0a0e 	adds.w	sl, sl, lr
   185f4:	eb5b 0b09 	adcs.w	fp, fp, r9
   185f8:	f14c 0c00 	adc.w	ip, ip, #0
   185fc:	fba3 e906 	umull	lr, r9, r3, r6
   18600:	eb1a 0a0e 	adds.w	sl, sl, lr
   18604:	eb5b 0b09 	adcs.w	fp, fp, r9
   18608:	f14c 0c00 	adc.w	ip, ip, #0
   1860c:	f8d0 e000 	ldr.w	lr, [r0]
   18610:	eb1a 0a0e 	adds.w	sl, sl, lr
   18614:	f15b 0b00 	adcs.w	fp, fp, #0
   18618:	f14c 0c00 	adc.w	ip, ip, #0
   1861c:	f840 ab04 	str.w	sl, [r0], #4
   18620:	c910      	ldmia	r1!, {r4}
   18622:	f04f 0e00 	mov.w	lr, #0
   18626:	fba5 9a08 	umull	r9, sl, r5, r8
   1862a:	eb1b 0b09 	adds.w	fp, fp, r9
   1862e:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18632:	f14e 0e00 	adc.w	lr, lr, #0
   18636:	fba3 9a07 	umull	r9, sl, r3, r7
   1863a:	eb1b 0b09 	adds.w	fp, fp, r9
   1863e:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18642:	f14e 0e00 	adc.w	lr, lr, #0
   18646:	fba4 9a06 	umull	r9, sl, r4, r6
   1864a:	eb1b 0b09 	adds.w	fp, fp, r9
   1864e:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18652:	f14e 0e00 	adc.w	lr, lr, #0
   18656:	f8d0 9000 	ldr.w	r9, [r0]
   1865a:	eb1b 0b09 	adds.w	fp, fp, r9
   1865e:	f15c 0c00 	adcs.w	ip, ip, #0
   18662:	f14e 0e00 	adc.w	lr, lr, #0
   18666:	f840 bb04 	str.w	fp, [r0], #4
   1866a:	ca40      	ldmia	r2!, {r6}
   1866c:	f04f 0900 	mov.w	r9, #0
   18670:	fba5 ab06 	umull	sl, fp, r5, r6
   18674:	eb1c 0c0a 	adds.w	ip, ip, sl
   18678:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1867c:	f149 0900 	adc.w	r9, r9, #0
   18680:	fba3 ab08 	umull	sl, fp, r3, r8
   18684:	eb1c 0c0a 	adds.w	ip, ip, sl
   18688:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1868c:	f149 0900 	adc.w	r9, r9, #0
   18690:	fba4 ab07 	umull	sl, fp, r4, r7
   18694:	eb1c 0c0a 	adds.w	ip, ip, sl
   18698:	eb5e 0e0b 	adcs.w	lr, lr, fp
   1869c:	f149 0900 	adc.w	r9, r9, #0
   186a0:	f8d0 a000 	ldr.w	sl, [r0]
   186a4:	eb1c 0c0a 	adds.w	ip, ip, sl
   186a8:	f15e 0e00 	adcs.w	lr, lr, #0
   186ac:	f149 0900 	adc.w	r9, r9, #0
   186b0:	f840 cb04 	str.w	ip, [r0], #4
   186b4:	ca80      	ldmia	r2!, {r7}
   186b6:	f04f 0a00 	mov.w	sl, #0
   186ba:	fba5 bc07 	umull	fp, ip, r5, r7
   186be:	eb1e 0e0b 	adds.w	lr, lr, fp
   186c2:	eb59 090c 	adcs.w	r9, r9, ip
   186c6:	f14a 0a00 	adc.w	sl, sl, #0
   186ca:	fba3 bc06 	umull	fp, ip, r3, r6
   186ce:	eb1e 0e0b 	adds.w	lr, lr, fp
   186d2:	eb59 090c 	adcs.w	r9, r9, ip
   186d6:	f14a 0a00 	adc.w	sl, sl, #0
   186da:	fba4 bc08 	umull	fp, ip, r4, r8
   186de:	eb1e 0e0b 	adds.w	lr, lr, fp
   186e2:	eb59 090c 	adcs.w	r9, r9, ip
   186e6:	f14a 0a00 	adc.w	sl, sl, #0
   186ea:	f8d0 b000 	ldr.w	fp, [r0]
   186ee:	eb1e 0e0b 	adds.w	lr, lr, fp
   186f2:	f159 0900 	adcs.w	r9, r9, #0
   186f6:	f14a 0a00 	adc.w	sl, sl, #0
   186fa:	f840 eb04 	str.w	lr, [r0], #4
   186fe:	f04f 0b00 	mov.w	fp, #0
   18702:	fba3 ce07 	umull	ip, lr, r3, r7
   18706:	eb19 090c 	adds.w	r9, r9, ip
   1870a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1870e:	f14b 0b00 	adc.w	fp, fp, #0
   18712:	fba4 ce06 	umull	ip, lr, r4, r6
   18716:	eb19 090c 	adds.w	r9, r9, ip
   1871a:	eb5a 0a0e 	adcs.w	sl, sl, lr
   1871e:	f14b 0b00 	adc.w	fp, fp, #0
   18722:	f840 9b04 	str.w	r9, [r0], #4
   18726:	fba4 e907 	umull	lr, r9, r4, r7
   1872a:	eb1a 0a0e 	adds.w	sl, sl, lr
   1872e:	eb4b 0b09 	adc.w	fp, fp, r9
   18732:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   18736:	f1a0 0034 	sub.w	r0, r0, #52	; 0x34
   1873a:	f1a1 0114 	sub.w	r1, r1, #20
   1873e:	f1a2 0220 	sub.w	r2, r2, #32
   18742:	c938      	ldmia	r1!, {r3, r4, r5}
   18744:	e8b2 01c0 	ldmia.w	r2!, {r6, r7, r8}
   18748:	fba3 bc06 	umull	fp, ip, r3, r6
   1874c:	f840 bb04 	str.w	fp, [r0], #4
   18750:	f04f 0a00 	mov.w	sl, #0
   18754:	fba3 b907 	umull	fp, r9, r3, r7
   18758:	eb1c 0c0b 	adds.w	ip, ip, fp
   1875c:	f149 0900 	adc.w	r9, r9, #0
   18760:	fba4 be06 	umull	fp, lr, r4, r6
   18764:	eb1c 0c0b 	adds.w	ip, ip, fp
   18768:	eb59 090e 	adcs.w	r9, r9, lr
   1876c:	f14a 0a00 	adc.w	sl, sl, #0
   18770:	f840 cb04 	str.w	ip, [r0], #4
   18774:	f04f 0b00 	mov.w	fp, #0
   18778:	fba3 ce08 	umull	ip, lr, r3, r8
   1877c:	eb19 090c 	adds.w	r9, r9, ip
   18780:	eb5a 0a0e 	adcs.w	sl, sl, lr
   18784:	f14b 0b00 	adc.w	fp, fp, #0
   18788:	fba4 ce07 	umull	ip, lr, r4, r7
   1878c:	eb19 090c 	adds.w	r9, r9, ip
   18790:	eb5a 0a0e 	adcs.w	sl, sl, lr
   18794:	f14b 0b00 	adc.w	fp, fp, #0
   18798:	fba5 ce06 	umull	ip, lr, r5, r6
   1879c:	eb19 090c 	adds.w	r9, r9, ip
   187a0:	eb5a 0a0e 	adcs.w	sl, sl, lr
   187a4:	f14b 0b00 	adc.w	fp, fp, #0
   187a8:	f840 9b04 	str.w	r9, [r0], #4
   187ac:	c908      	ldmia	r1!, {r3}
   187ae:	f04f 0c00 	mov.w	ip, #0
   187b2:	fba4 e908 	umull	lr, r9, r4, r8
   187b6:	eb1a 0a0e 	adds.w	sl, sl, lr
   187ba:	eb5b 0b09 	adcs.w	fp, fp, r9
   187be:	f14c 0c00 	adc.w	ip, ip, #0
   187c2:	fba5 e907 	umull	lr, r9, r5, r7
   187c6:	eb1a 0a0e 	adds.w	sl, sl, lr
   187ca:	eb5b 0b09 	adcs.w	fp, fp, r9
   187ce:	f14c 0c00 	adc.w	ip, ip, #0
   187d2:	fba3 e906 	umull	lr, r9, r3, r6
   187d6:	eb1a 0a0e 	adds.w	sl, sl, lr
   187da:	eb5b 0b09 	adcs.w	fp, fp, r9
   187de:	f14c 0c00 	adc.w	ip, ip, #0
   187e2:	f8d0 e000 	ldr.w	lr, [r0]
   187e6:	eb1a 0a0e 	adds.w	sl, sl, lr
   187ea:	f15b 0b00 	adcs.w	fp, fp, #0
   187ee:	f14c 0c00 	adc.w	ip, ip, #0
   187f2:	f840 ab04 	str.w	sl, [r0], #4
   187f6:	c910      	ldmia	r1!, {r4}
   187f8:	f04f 0e00 	mov.w	lr, #0
   187fc:	fba5 9a08 	umull	r9, sl, r5, r8
   18800:	eb1b 0b09 	adds.w	fp, fp, r9
   18804:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18808:	f14e 0e00 	adc.w	lr, lr, #0
   1880c:	fba3 9a07 	umull	r9, sl, r3, r7
   18810:	eb1b 0b09 	adds.w	fp, fp, r9
   18814:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18818:	f14e 0e00 	adc.w	lr, lr, #0
   1881c:	fba4 9a06 	umull	r9, sl, r4, r6
   18820:	eb1b 0b09 	adds.w	fp, fp, r9
   18824:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18828:	f14e 0e00 	adc.w	lr, lr, #0
   1882c:	f8d0 9000 	ldr.w	r9, [r0]
   18830:	eb1b 0b09 	adds.w	fp, fp, r9
   18834:	f15c 0c00 	adcs.w	ip, ip, #0
   18838:	f14e 0e00 	adc.w	lr, lr, #0
   1883c:	f840 bb04 	str.w	fp, [r0], #4
   18840:	c920      	ldmia	r1!, {r5}
   18842:	f04f 0900 	mov.w	r9, #0
   18846:	fba3 ab08 	umull	sl, fp, r3, r8
   1884a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1884e:	eb5e 0e0b 	adcs.w	lr, lr, fp
   18852:	f149 0900 	adc.w	r9, r9, #0
   18856:	fba4 ab07 	umull	sl, fp, r4, r7
   1885a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1885e:	eb5e 0e0b 	adcs.w	lr, lr, fp
   18862:	f149 0900 	adc.w	r9, r9, #0
   18866:	fba5 ab06 	umull	sl, fp, r5, r6
   1886a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1886e:	eb5e 0e0b 	adcs.w	lr, lr, fp
   18872:	f149 0900 	adc.w	r9, r9, #0
   18876:	f8d0 a000 	ldr.w	sl, [r0]
   1887a:	eb1c 0c0a 	adds.w	ip, ip, sl
   1887e:	f15e 0e00 	adcs.w	lr, lr, #0
   18882:	f149 0900 	adc.w	r9, r9, #0
   18886:	f840 cb04 	str.w	ip, [r0], #4
   1888a:	c908      	ldmia	r1!, {r3}
   1888c:	f04f 0a00 	mov.w	sl, #0
   18890:	fba4 bc08 	umull	fp, ip, r4, r8
   18894:	eb1e 0e0b 	adds.w	lr, lr, fp
   18898:	eb59 090c 	adcs.w	r9, r9, ip
   1889c:	f14a 0a00 	adc.w	sl, sl, #0
   188a0:	fba5 bc07 	umull	fp, ip, r5, r7
   188a4:	eb1e 0e0b 	adds.w	lr, lr, fp
   188a8:	eb59 090c 	adcs.w	r9, r9, ip
   188ac:	f14a 0a00 	adc.w	sl, sl, #0
   188b0:	fba3 bc06 	umull	fp, ip, r3, r6
   188b4:	eb1e 0e0b 	adds.w	lr, lr, fp
   188b8:	eb59 090c 	adcs.w	r9, r9, ip
   188bc:	f14a 0a00 	adc.w	sl, sl, #0
   188c0:	f8d0 b000 	ldr.w	fp, [r0]
   188c4:	eb1e 0e0b 	adds.w	lr, lr, fp
   188c8:	f159 0900 	adcs.w	r9, r9, #0
   188cc:	f14a 0a00 	adc.w	sl, sl, #0
   188d0:	f840 eb04 	str.w	lr, [r0], #4
   188d4:	c910      	ldmia	r1!, {r4}
   188d6:	f04f 0b00 	mov.w	fp, #0
   188da:	fba5 ce08 	umull	ip, lr, r5, r8
   188de:	eb19 090c 	adds.w	r9, r9, ip
   188e2:	eb5a 0a0e 	adcs.w	sl, sl, lr
   188e6:	f14b 0b00 	adc.w	fp, fp, #0
   188ea:	fba3 ce07 	umull	ip, lr, r3, r7
   188ee:	eb19 090c 	adds.w	r9, r9, ip
   188f2:	eb5a 0a0e 	adcs.w	sl, sl, lr
   188f6:	f14b 0b00 	adc.w	fp, fp, #0
   188fa:	fba4 ce06 	umull	ip, lr, r4, r6
   188fe:	eb19 090c 	adds.w	r9, r9, ip
   18902:	eb5a 0a0e 	adcs.w	sl, sl, lr
   18906:	f14b 0b00 	adc.w	fp, fp, #0
   1890a:	f8d0 c000 	ldr.w	ip, [r0]
   1890e:	eb19 090c 	adds.w	r9, r9, ip
   18912:	f15a 0a00 	adcs.w	sl, sl, #0
   18916:	f14b 0b00 	adc.w	fp, fp, #0
   1891a:	f840 9b04 	str.w	r9, [r0], #4
   1891e:	ca40      	ldmia	r2!, {r6}
   18920:	f04f 0c00 	mov.w	ip, #0
   18924:	fba5 e906 	umull	lr, r9, r5, r6
   18928:	eb1a 0a0e 	adds.w	sl, sl, lr
   1892c:	eb5b 0b09 	adcs.w	fp, fp, r9
   18930:	f14c 0c00 	adc.w	ip, ip, #0
   18934:	fba3 e908 	umull	lr, r9, r3, r8
   18938:	eb1a 0a0e 	adds.w	sl, sl, lr
   1893c:	eb5b 0b09 	adcs.w	fp, fp, r9
   18940:	f14c 0c00 	adc.w	ip, ip, #0
   18944:	fba4 e907 	umull	lr, r9, r4, r7
   18948:	eb1a 0a0e 	adds.w	sl, sl, lr
   1894c:	eb5b 0b09 	adcs.w	fp, fp, r9
   18950:	f14c 0c00 	adc.w	ip, ip, #0
   18954:	f8d0 e000 	ldr.w	lr, [r0]
   18958:	eb1a 0a0e 	adds.w	sl, sl, lr
   1895c:	f15b 0b00 	adcs.w	fp, fp, #0
   18960:	f14c 0c00 	adc.w	ip, ip, #0
   18964:	f840 ab04 	str.w	sl, [r0], #4
   18968:	ca80      	ldmia	r2!, {r7}
   1896a:	f04f 0e00 	mov.w	lr, #0
   1896e:	fba5 9a07 	umull	r9, sl, r5, r7
   18972:	eb1b 0b09 	adds.w	fp, fp, r9
   18976:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1897a:	f14e 0e00 	adc.w	lr, lr, #0
   1897e:	fba3 9a06 	umull	r9, sl, r3, r6
   18982:	eb1b 0b09 	adds.w	fp, fp, r9
   18986:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1898a:	f14e 0e00 	adc.w	lr, lr, #0
   1898e:	fba4 9a08 	umull	r9, sl, r4, r8
   18992:	eb1b 0b09 	adds.w	fp, fp, r9
   18996:	eb5c 0c0a 	adcs.w	ip, ip, sl
   1899a:	f14e 0e00 	adc.w	lr, lr, #0
   1899e:	f8d0 9000 	ldr.w	r9, [r0]
   189a2:	eb1b 0b09 	adds.w	fp, fp, r9
   189a6:	f15c 0c00 	adcs.w	ip, ip, #0
   189aa:	f14e 0e00 	adc.w	lr, lr, #0
   189ae:	f840 bb04 	str.w	fp, [r0], #4
   189b2:	f852 8b04 	ldr.w	r8, [r2], #4
   189b6:	f04f 0900 	mov.w	r9, #0
   189ba:	fba5 ab08 	umull	sl, fp, r5, r8
   189be:	eb1c 0c0a 	adds.w	ip, ip, sl
   189c2:	eb5e 0e0b 	adcs.w	lr, lr, fp
   189c6:	f149 0900 	adc.w	r9, r9, #0
   189ca:	fba3 ab07 	umull	sl, fp, r3, r7
   189ce:	eb1c 0c0a 	adds.w	ip, ip, sl
   189d2:	eb5e 0e0b 	adcs.w	lr, lr, fp
   189d6:	f149 0900 	adc.w	r9, r9, #0
   189da:	fba4 ab06 	umull	sl, fp, r4, r6
   189de:	eb1c 0c0a 	adds.w	ip, ip, sl
   189e2:	eb5e 0e0b 	adcs.w	lr, lr, fp
   189e6:	f149 0900 	adc.w	r9, r9, #0
   189ea:	f8d0 a000 	ldr.w	sl, [r0]
   189ee:	eb1c 0c0a 	adds.w	ip, ip, sl
   189f2:	f15e 0e00 	adcs.w	lr, lr, #0
   189f6:	f149 0900 	adc.w	r9, r9, #0
   189fa:	f840 cb04 	str.w	ip, [r0], #4
   189fe:	ca40      	ldmia	r2!, {r6}
   18a00:	f04f 0a00 	mov.w	sl, #0
   18a04:	fba5 bc06 	umull	fp, ip, r5, r6
   18a08:	eb1e 0e0b 	adds.w	lr, lr, fp
   18a0c:	eb59 090c 	adcs.w	r9, r9, ip
   18a10:	f14a 0a00 	adc.w	sl, sl, #0
   18a14:	fba3 bc08 	umull	fp, ip, r3, r8
   18a18:	eb1e 0e0b 	adds.w	lr, lr, fp
   18a1c:	eb59 090c 	adcs.w	r9, r9, ip
   18a20:	f14a 0a00 	adc.w	sl, sl, #0
   18a24:	fba4 bc07 	umull	fp, ip, r4, r7
   18a28:	eb1e 0e0b 	adds.w	lr, lr, fp
   18a2c:	eb59 090c 	adcs.w	r9, r9, ip
   18a30:	f14a 0a00 	adc.w	sl, sl, #0
   18a34:	f8d0 b000 	ldr.w	fp, [r0]
   18a38:	eb1e 0e0b 	adds.w	lr, lr, fp
   18a3c:	f159 0900 	adcs.w	r9, r9, #0
   18a40:	f14a 0a00 	adc.w	sl, sl, #0
   18a44:	f840 eb04 	str.w	lr, [r0], #4
   18a48:	ca80      	ldmia	r2!, {r7}
   18a4a:	f04f 0b00 	mov.w	fp, #0
   18a4e:	fba5 ce07 	umull	ip, lr, r5, r7
   18a52:	eb19 090c 	adds.w	r9, r9, ip
   18a56:	eb5a 0a0e 	adcs.w	sl, sl, lr
   18a5a:	f14b 0b00 	adc.w	fp, fp, #0
   18a5e:	fba3 ce06 	umull	ip, lr, r3, r6
   18a62:	eb19 090c 	adds.w	r9, r9, ip
   18a66:	eb5a 0a0e 	adcs.w	sl, sl, lr
   18a6a:	f14b 0b00 	adc.w	fp, fp, #0
   18a6e:	fba4 ce08 	umull	ip, lr, r4, r8
   18a72:	eb19 090c 	adds.w	r9, r9, ip
   18a76:	eb5a 0a0e 	adcs.w	sl, sl, lr
   18a7a:	f14b 0b00 	adc.w	fp, fp, #0
   18a7e:	f8d0 c000 	ldr.w	ip, [r0]
   18a82:	eb19 090c 	adds.w	r9, r9, ip
   18a86:	f15a 0a00 	adcs.w	sl, sl, #0
   18a8a:	f14b 0b00 	adc.w	fp, fp, #0
   18a8e:	f840 9b04 	str.w	r9, [r0], #4
   18a92:	f04f 0c00 	mov.w	ip, #0
   18a96:	fba3 e907 	umull	lr, r9, r3, r7
   18a9a:	eb1a 0a0e 	adds.w	sl, sl, lr
   18a9e:	eb5b 0b09 	adcs.w	fp, fp, r9
   18aa2:	f14c 0c00 	adc.w	ip, ip, #0
   18aa6:	fba4 e906 	umull	lr, r9, r4, r6
   18aaa:	eb1a 0a0e 	adds.w	sl, sl, lr
   18aae:	eb5b 0b09 	adcs.w	fp, fp, r9
   18ab2:	f14c 0c00 	adc.w	ip, ip, #0
   18ab6:	f840 ab04 	str.w	sl, [r0], #4
   18aba:	fba4 9a07 	umull	r9, sl, r4, r7
   18abe:	eb1b 0b09 	adds.w	fp, fp, r9
   18ac2:	eb4c 0c0a 	adc.w	ip, ip, sl
   18ac6:	e8a0 1800 	stmia.w	r0!, {fp, ip}
    #endif
        : "+r" (r0), "+r" (r1), "+r" (r2)
        :
        : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   18aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ace:	bf00      	nop

00018ad0 <vli_square>:
}
#define asm_square 1
#endif /* (uECC_WORDS == 7) */

#if (uECC_WORDS == 8)
static void vli_square(uint32_t *result, const uint32_t *left) {
   18ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    register uint32_t *r0 __asm__("r0") = result;
    register const uint32_t *r1 __asm__("r1") = left;

    __asm__ volatile (
   18ad4:	c90c      	ldmia	r1!, {r2, r3}
   18ad6:	f101 0110 	add.w	r1, r1, #16
   18ada:	c960      	ldmia	r1!, {r5, r6}
   18adc:	f100 0018 	add.w	r0, r0, #24
   18ae0:	fba2 8905 	umull	r8, r9, r2, r5
   18ae4:	f840 8b04 	str.w	r8, [r0], #4
   18ae8:	fba2 ca06 	umull	ip, sl, r2, r6
   18aec:	eb19 090c 	adds.w	r9, r9, ip
   18af0:	f14a 0a00 	adc.w	sl, sl, #0
   18af4:	f840 9b04 	str.w	r9, [r0], #4
   18af8:	fba3 8906 	umull	r8, r9, r3, r6
   18afc:	eb1a 0a08 	adds.w	sl, sl, r8
   18b00:	f149 0b00 	adc.w	fp, r9, #0
   18b04:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   18b08:	f1a0 0028 	sub.w	r0, r0, #40	; 0x28
   18b0c:	f1a1 0120 	sub.w	r1, r1, #32
   18b10:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
   18b12:	fba2 bc02 	umull	fp, ip, r2, r2
   18b16:	f840 bb04 	str.w	fp, [r0], #4
   18b1a:	f04f 0900 	mov.w	r9, #0
   18b1e:	fba2 ab03 	umull	sl, fp, r2, r3
   18b22:	eb1c 0c0a 	adds.w	ip, ip, sl
   18b26:	f15b 0800 	adcs.w	r8, fp, #0
   18b2a:	f149 0900 	adc.w	r9, r9, #0
   18b2e:	eb1c 0c0a 	adds.w	ip, ip, sl
   18b32:	eb58 080b 	adcs.w	r8, r8, fp
   18b36:	f149 0900 	adc.w	r9, r9, #0
   18b3a:	f840 cb04 	str.w	ip, [r0], #4
   18b3e:	f04f 0a00 	mov.w	sl, #0
   18b42:	fba2 bc04 	umull	fp, ip, r2, r4
   18b46:	eb1b 0b0b 	adds.w	fp, fp, fp
   18b4a:	eb5c 0c0c 	adcs.w	ip, ip, ip
   18b4e:	f14a 0a00 	adc.w	sl, sl, #0
   18b52:	eb18 080b 	adds.w	r8, r8, fp
   18b56:	eb59 090c 	adcs.w	r9, r9, ip
   18b5a:	f14a 0a00 	adc.w	sl, sl, #0
   18b5e:	fba3 bc03 	umull	fp, ip, r3, r3
   18b62:	eb18 080b 	adds.w	r8, r8, fp
   18b66:	eb59 090c 	adcs.w	r9, r9, ip
   18b6a:	f14a 0a00 	adc.w	sl, sl, #0
   18b6e:	f840 8b04 	str.w	r8, [r0], #4
   18b72:	f04f 0c00 	mov.w	ip, #0
   18b76:	fba2 8b05 	umull	r8, fp, r2, r5
   18b7a:	46de      	mov	lr, fp
   18b7c:	fbe3 8b04 	umlal	r8, fp, r3, r4
   18b80:	45de      	cmp	lr, fp
   18b82:	bf88      	it	hi
   18b84:	f14c 0c00 	adchi.w	ip, ip, #0
   18b88:	eb18 0808 	adds.w	r8, r8, r8
   18b8c:	eb5b 0b0b 	adcs.w	fp, fp, fp
   18b90:	eb4c 0c0c 	adc.w	ip, ip, ip
   18b94:	eb18 0809 	adds.w	r8, r8, r9
   18b98:	eb5b 0b0a 	adcs.w	fp, fp, sl
   18b9c:	f14c 0c00 	adc.w	ip, ip, #0
   18ba0:	f840 8b04 	str.w	r8, [r0], #4
   18ba4:	f04f 0a00 	mov.w	sl, #0
   18ba8:	fba2 8906 	umull	r8, r9, r2, r6
   18bac:	46ce      	mov	lr, r9
   18bae:	fbe3 8905 	umlal	r8, r9, r3, r5
   18bb2:	45ce      	cmp	lr, r9
   18bb4:	bf88      	it	hi
   18bb6:	f14a 0a00 	adchi.w	sl, sl, #0
   18bba:	eb18 0808 	adds.w	r8, r8, r8
   18bbe:	eb59 0909 	adcs.w	r9, r9, r9
   18bc2:	eb4a 0a0a 	adc.w	sl, sl, sl
   18bc6:	46ce      	mov	lr, r9
   18bc8:	fbe4 8904 	umlal	r8, r9, r4, r4
   18bcc:	45ce      	cmp	lr, r9
   18bce:	bf88      	it	hi
   18bd0:	f14a 0a00 	adchi.w	sl, sl, #0
   18bd4:	eb18 080b 	adds.w	r8, r8, fp
   18bd8:	eb59 090c 	adcs.w	r9, r9, ip
   18bdc:	f14a 0a00 	adc.w	sl, sl, #0
   18be0:	f840 8b04 	str.w	r8, [r0], #4
   18be4:	f04f 0c00 	mov.w	ip, #0
   18be8:	fba2 8b07 	umull	r8, fp, r2, r7
   18bec:	46de      	mov	lr, fp
   18bee:	fbe3 8b06 	umlal	r8, fp, r3, r6
   18bf2:	45de      	cmp	lr, fp
   18bf4:	bf88      	it	hi
   18bf6:	f14c 0c00 	adchi.w	ip, ip, #0
   18bfa:	46de      	mov	lr, fp
   18bfc:	fbe4 8b05 	umlal	r8, fp, r4, r5
   18c00:	45de      	cmp	lr, fp
   18c02:	bf88      	it	hi
   18c04:	f14c 0c00 	adchi.w	ip, ip, #0
   18c08:	eb18 0808 	adds.w	r8, r8, r8
   18c0c:	eb5b 0b0b 	adcs.w	fp, fp, fp
   18c10:	eb4c 0c0c 	adc.w	ip, ip, ip
   18c14:	eb18 0809 	adds.w	r8, r8, r9
   18c18:	eb5b 0b0a 	adcs.w	fp, fp, sl
   18c1c:	f14c 0c00 	adc.w	ip, ip, #0
   18c20:	f840 8b04 	str.w	r8, [r0], #4
   18c24:	c904      	ldmia	r1!, {r2}
   18c26:	f04f 0a00 	mov.w	sl, #0
   18c2a:	fba3 8907 	umull	r8, r9, r3, r7
   18c2e:	46ce      	mov	lr, r9
   18c30:	fbe4 8906 	umlal	r8, r9, r4, r6
   18c34:	45ce      	cmp	lr, r9
   18c36:	bf88      	it	hi
   18c38:	f14a 0a00 	adchi.w	sl, sl, #0
   18c3c:	f8d0 e000 	ldr.w	lr, [r0]
   18c40:	eb18 080e 	adds.w	r8, r8, lr
   18c44:	f159 0900 	adcs.w	r9, r9, #0
   18c48:	f14a 0a00 	adc.w	sl, sl, #0
   18c4c:	eb18 0808 	adds.w	r8, r8, r8
   18c50:	eb59 0909 	adcs.w	r9, r9, r9
   18c54:	eb4a 0a0a 	adc.w	sl, sl, sl
   18c58:	46ce      	mov	lr, r9
   18c5a:	fbe5 8905 	umlal	r8, r9, r5, r5
   18c5e:	45ce      	cmp	lr, r9
   18c60:	bf88      	it	hi
   18c62:	f14a 0a00 	adchi.w	sl, sl, #0
   18c66:	eb18 080b 	adds.w	r8, r8, fp
   18c6a:	eb59 090c 	adcs.w	r9, r9, ip
   18c6e:	f14a 0a00 	adc.w	sl, sl, #0
   18c72:	f840 8b04 	str.w	r8, [r0], #4
   18c76:	f04f 0c00 	mov.w	ip, #0
   18c7a:	fba3 8b02 	umull	r8, fp, r3, r2
   18c7e:	46de      	mov	lr, fp
   18c80:	fbe4 8b07 	umlal	r8, fp, r4, r7
   18c84:	45de      	cmp	lr, fp
   18c86:	bf88      	it	hi
   18c88:	f14c 0c00 	adchi.w	ip, ip, #0
   18c8c:	46de      	mov	lr, fp
   18c8e:	fbe5 8b06 	umlal	r8, fp, r5, r6
   18c92:	45de      	cmp	lr, fp
   18c94:	bf88      	it	hi
   18c96:	f14c 0c00 	adchi.w	ip, ip, #0
   18c9a:	f8d0 e000 	ldr.w	lr, [r0]
   18c9e:	eb18 080e 	adds.w	r8, r8, lr
   18ca2:	f15b 0b00 	adcs.w	fp, fp, #0
   18ca6:	f14c 0c00 	adc.w	ip, ip, #0
   18caa:	eb18 0808 	adds.w	r8, r8, r8
   18cae:	eb5b 0b0b 	adcs.w	fp, fp, fp
   18cb2:	eb4c 0c0c 	adc.w	ip, ip, ip
   18cb6:	eb18 0809 	adds.w	r8, r8, r9
   18cba:	eb5b 0b0a 	adcs.w	fp, fp, sl
   18cbe:	f14c 0c00 	adc.w	ip, ip, #0
   18cc2:	f840 8b04 	str.w	r8, [r0], #4
   18cc6:	c908      	ldmia	r1!, {r3}
   18cc8:	f04f 0a00 	mov.w	sl, #0
   18ccc:	fba4 8902 	umull	r8, r9, r4, r2
   18cd0:	46ce      	mov	lr, r9
   18cd2:	fbe5 8907 	umlal	r8, r9, r5, r7
   18cd6:	45ce      	cmp	lr, r9
   18cd8:	bf88      	it	hi
   18cda:	f14a 0a00 	adchi.w	sl, sl, #0
   18cde:	f8d0 e000 	ldr.w	lr, [r0]
   18ce2:	eb18 080e 	adds.w	r8, r8, lr
   18ce6:	f159 0900 	adcs.w	r9, r9, #0
   18cea:	f14a 0a00 	adc.w	sl, sl, #0
   18cee:	eb18 0808 	adds.w	r8, r8, r8
   18cf2:	eb59 0909 	adcs.w	r9, r9, r9
   18cf6:	eb4a 0a0a 	adc.w	sl, sl, sl
   18cfa:	46ce      	mov	lr, r9
   18cfc:	fbe6 8906 	umlal	r8, r9, r6, r6
   18d00:	45ce      	cmp	lr, r9
   18d02:	bf88      	it	hi
   18d04:	f14a 0a00 	adchi.w	sl, sl, #0
   18d08:	eb18 080b 	adds.w	r8, r8, fp
   18d0c:	eb59 090c 	adcs.w	r9, r9, ip
   18d10:	f14a 0a00 	adc.w	sl, sl, #0
   18d14:	f840 8b04 	str.w	r8, [r0], #4
   18d18:	f04f 0c00 	mov.w	ip, #0
   18d1c:	fba4 8b03 	umull	r8, fp, r4, r3
   18d20:	46de      	mov	lr, fp
   18d22:	fbe5 8b02 	umlal	r8, fp, r5, r2
   18d26:	45de      	cmp	lr, fp
   18d28:	bf88      	it	hi
   18d2a:	f14c 0c00 	adchi.w	ip, ip, #0
   18d2e:	46de      	mov	lr, fp
   18d30:	fbe6 8b07 	umlal	r8, fp, r6, r7
   18d34:	45de      	cmp	lr, fp
   18d36:	bf88      	it	hi
   18d38:	f14c 0c00 	adchi.w	ip, ip, #0
   18d3c:	f8d0 e000 	ldr.w	lr, [r0]
   18d40:	eb18 080e 	adds.w	r8, r8, lr
   18d44:	f15b 0b00 	adcs.w	fp, fp, #0
   18d48:	f14c 0c00 	adc.w	ip, ip, #0
   18d4c:	eb18 0808 	adds.w	r8, r8, r8
   18d50:	eb5b 0b0b 	adcs.w	fp, fp, fp
   18d54:	eb4c 0c0c 	adc.w	ip, ip, ip
   18d58:	eb18 0809 	adds.w	r8, r8, r9
   18d5c:	eb5b 0b0a 	adcs.w	fp, fp, sl
   18d60:	f14c 0c00 	adc.w	ip, ip, #0
   18d64:	f840 8b04 	str.w	r8, [r0], #4
   18d68:	f04f 0a00 	mov.w	sl, #0
   18d6c:	fba5 8903 	umull	r8, r9, r5, r3
   18d70:	46ce      	mov	lr, r9
   18d72:	fbe6 8902 	umlal	r8, r9, r6, r2
   18d76:	45ce      	cmp	lr, r9
   18d78:	bf88      	it	hi
   18d7a:	f14a 0a00 	adchi.w	sl, sl, #0
   18d7e:	eb18 0808 	adds.w	r8, r8, r8
   18d82:	eb59 0909 	adcs.w	r9, r9, r9
   18d86:	eb4a 0a0a 	adc.w	sl, sl, sl
   18d8a:	46ce      	mov	lr, r9
   18d8c:	fbe7 8907 	umlal	r8, r9, r7, r7
   18d90:	45ce      	cmp	lr, r9
   18d92:	bf88      	it	hi
   18d94:	f14a 0a00 	adchi.w	sl, sl, #0
   18d98:	eb18 080b 	adds.w	r8, r8, fp
   18d9c:	eb59 090c 	adcs.w	r9, r9, ip
   18da0:	f14a 0a00 	adc.w	sl, sl, #0
   18da4:	f840 8b04 	str.w	r8, [r0], #4
   18da8:	f04f 0c00 	mov.w	ip, #0
   18dac:	fba6 8b03 	umull	r8, fp, r6, r3
   18db0:	46de      	mov	lr, fp
   18db2:	fbe7 8b02 	umlal	r8, fp, r7, r2
   18db6:	45de      	cmp	lr, fp
   18db8:	bf88      	it	hi
   18dba:	f14c 0c00 	adchi.w	ip, ip, #0
   18dbe:	eb18 0808 	adds.w	r8, r8, r8
   18dc2:	eb5b 0b0b 	adcs.w	fp, fp, fp
   18dc6:	eb4c 0c0c 	adc.w	ip, ip, ip
   18dca:	eb18 0809 	adds.w	r8, r8, r9
   18dce:	eb5b 0b0a 	adcs.w	fp, fp, sl
   18dd2:	f14c 0c00 	adc.w	ip, ip, #0
   18dd6:	f840 8b04 	str.w	r8, [r0], #4
   18dda:	f04f 0800 	mov.w	r8, #0
   18dde:	fba7 1a03 	umull	r1, sl, r7, r3
   18de2:	1849      	adds	r1, r1, r1
   18de4:	eb5a 0a0a 	adcs.w	sl, sl, sl
   18de8:	f148 0800 	adc.w	r8, r8, #0
   18dec:	eb1b 0b01 	adds.w	fp, fp, r1
   18df0:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18df4:	f148 0800 	adc.w	r8, r8, #0
   18df8:	fba2 1a02 	umull	r1, sl, r2, r2
   18dfc:	eb1b 0b01 	adds.w	fp, fp, r1
   18e00:	eb5c 0c0a 	adcs.w	ip, ip, sl
   18e04:	f148 0800 	adc.w	r8, r8, #0
   18e08:	f840 bb04 	str.w	fp, [r0], #4
   18e0c:	f04f 0b00 	mov.w	fp, #0
   18e10:	fba2 1a03 	umull	r1, sl, r2, r3
   18e14:	1849      	adds	r1, r1, r1
   18e16:	eb5a 0a0a 	adcs.w	sl, sl, sl
   18e1a:	f14b 0b00 	adc.w	fp, fp, #0
   18e1e:	eb1c 0c01 	adds.w	ip, ip, r1
   18e22:	eb58 080a 	adcs.w	r8, r8, sl
   18e26:	f14b 0b00 	adc.w	fp, fp, #0
   18e2a:	f840 cb04 	str.w	ip, [r0], #4
   18e2e:	fba3 1a03 	umull	r1, sl, r3, r3
   18e32:	eb18 0801 	adds.w	r8, r8, r1
   18e36:	eb5b 0b0a 	adcs.w	fp, fp, sl
   18e3a:	e8a0 0900 	stmia.w	r0!, {r8, fp}
    #endif
        : "+r" (r0), "+r" (r1)
        :
        : "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
}
   18e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e42:	bf00      	nop
   18e44:	0000      	movs	r0, r0
	...

00018e48 <vli_mmod_fast>:
            carry -= vli_sub(result, result, curve_p);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   18e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e4a:	b089      	sub	sp, #36	; 0x24
    /* t */
    vli_set(result, product);

    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
    tmp[3] = product[11];
   18e4c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   18e4e:	9303      	str	r3, [sp, #12]
    tmp[4] = product[12];
   18e50:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   18e52:	9304      	str	r3, [sp, #16]
    tmp[5] = product[13];
   18e54:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   18e56:	9305      	str	r3, [sp, #20]
    tmp[6] = product[14];
   18e58:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   18e5a:	9306      	str	r3, [sp, #24]
        dest[i] = src[i];
   18e5c:	468c      	mov	ip, r1
    tmp[7] = product[15];
   18e5e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   18e60:	9307      	str	r3, [sp, #28]
static void vli_mmod_fast(uint32_t *RESTRICT result, uint32_t *RESTRICT product) {
   18e62:	460e      	mov	r6, r1
   18e64:	4604      	mov	r4, r0
        dest[i] = src[i];
   18e66:	4605      	mov	r5, r0
   18e68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   18e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18e6e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    tmp[0] = tmp[1] = tmp[2] = 0;
   18e72:	ed9f 7b65 	vldr	d7, [pc, #404]	; 19008 <vli_mmod_fast+0x1c0>
        dest[i] = src[i];
   18e76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    tmp[0] = tmp[1] = tmp[2] = 0;
   18e7a:	2700      	movs	r7, #0
    carry = vli_add(tmp, tmp, tmp);
   18e7c:	466a      	mov	r2, sp
   18e7e:	4669      	mov	r1, sp
   18e80:	4668      	mov	r0, sp
    tmp[0] = tmp[1] = tmp[2] = 0;
   18e82:	ed8d 7b00 	vstr	d7, [sp]
   18e86:	9702      	str	r7, [sp, #8]
    carry = vli_add(tmp, tmp, tmp);
   18e88:	f7ff fabe 	bl	18408 <vli_add>
    carry += vli_add(result, result, tmp);
   18e8c:	466a      	mov	r2, sp
    carry = vli_add(tmp, tmp, tmp);
   18e8e:	4605      	mov	r5, r0
    carry += vli_add(result, result, tmp);
   18e90:	4621      	mov	r1, r4
   18e92:	4620      	mov	r0, r4
   18e94:	f7ff fab8 	bl	18408 <vli_add>

    /* s2 */
    tmp[3] = product[12];
   18e98:	6b33      	ldr	r3, [r6, #48]	; 0x30
   18e9a:	9303      	str	r3, [sp, #12]
    tmp[4] = product[13];
   18e9c:	6b73      	ldr	r3, [r6, #52]	; 0x34
   18e9e:	9304      	str	r3, [sp, #16]
    tmp[5] = product[14];
   18ea0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   18ea2:	9305      	str	r3, [sp, #20]
    carry += vli_add(result, result, tmp);
   18ea4:	4405      	add	r5, r0
    tmp[6] = product[15];
   18ea6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   18ea8:	9306      	str	r3, [sp, #24]
    tmp[7] = 0;
    carry += vli_add(tmp, tmp, tmp);
   18eaa:	466a      	mov	r2, sp
   18eac:	4669      	mov	r1, sp
   18eae:	4668      	mov	r0, sp
    tmp[7] = 0;
   18eb0:	9707      	str	r7, [sp, #28]
    carry += vli_add(tmp, tmp, tmp);
   18eb2:	f7ff faa9 	bl	18408 <vli_add>
    carry += vli_add(result, result, tmp);
   18eb6:	466a      	mov	r2, sp
    carry += vli_add(tmp, tmp, tmp);
   18eb8:	4405      	add	r5, r0
    carry += vli_add(result, result, tmp);
   18eba:	4621      	mov	r1, r4
   18ebc:	4620      	mov	r0, r4
   18ebe:	f7ff faa3 	bl	18408 <vli_add>

    /* s3 */
    tmp[0] = product[8];
   18ec2:	6a33      	ldr	r3, [r6, #32]
   18ec4:	9300      	str	r3, [sp, #0]
    tmp[1] = product[9];
   18ec6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18ec8:	9301      	str	r3, [sp, #4]
    tmp[2] = product[10];
   18eca:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   18ecc:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[14];
   18ece:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   18ed0:	9306      	str	r3, [sp, #24]
    carry += vli_add(result, result, tmp);
   18ed2:	4405      	add	r5, r0
    tmp[7] = product[15];
   18ed4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   18ed6:	9307      	str	r3, [sp, #28]
    carry += vli_add(result, result, tmp);
   18ed8:	466a      	mov	r2, sp
   18eda:	4621      	mov	r1, r4
   18edc:	4620      	mov	r0, r4
    tmp[3] = tmp[4] = tmp[5] = 0;
   18ede:	ed8d 7b04 	vstr	d7, [sp, #16]
   18ee2:	9703      	str	r7, [sp, #12]
    carry += vli_add(result, result, tmp);
   18ee4:	f7ff fa90 	bl	18408 <vli_add>
   18ee8:	6b73      	ldr	r3, [r6, #52]	; 0x34

    /* s4 */
    tmp[0] = product[9];
   18eea:	9303      	str	r3, [sp, #12]
   18eec:	9306      	str	r3, [sp, #24]
   18eee:	6a33      	ldr	r3, [r6, #32]
   18ef0:	9307      	str	r3, [sp, #28]
   18ef2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   18ef4:	9301      	str	r3, [sp, #4]
   18ef6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   18ef8:	9302      	str	r3, [sp, #8]
   18efa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   18efc:	9304      	str	r3, [sp, #16]
   18efe:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   18f00:	9305      	str	r3, [sp, #20]
    carry += vli_add(result, result, tmp);
   18f02:	4405      	add	r5, r0
    tmp[0] = product[9];
   18f04:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18f06:	9300      	str	r3, [sp, #0]
    tmp[3] = product[13];
    tmp[4] = product[14];
    tmp[5] = product[15];
    tmp[6] = product[13];
    tmp[7] = product[8];
    carry += vli_add(result, result, tmp);
   18f08:	466a      	mov	r2, sp
   18f0a:	4621      	mov	r1, r4
   18f0c:	4620      	mov	r0, r4
   18f0e:	f7ff fa7b 	bl	18408 <vli_add>

    /* d1 */
    tmp[0] = product[11];
   18f12:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   18f14:	9300      	str	r3, [sp, #0]
    tmp[1] = product[12];
   18f16:	6b33      	ldr	r3, [r6, #48]	; 0x30
   18f18:	9301      	str	r3, [sp, #4]
    tmp[2] = product[13];
   18f1a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   18f1c:	9302      	str	r3, [sp, #8]
    tmp[3] = tmp[4] = tmp[5] = 0;
    tmp[6] = product[8];
   18f1e:	6a33      	ldr	r3, [r6, #32]
   18f20:	9306      	str	r3, [sp, #24]
    carry += vli_add(result, result, tmp);
   18f22:	4405      	add	r5, r0
    tmp[7] = product[10];
   18f24:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   18f26:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   18f28:	466a      	mov	r2, sp
   18f2a:	4621      	mov	r1, r4
   18f2c:	4620      	mov	r0, r4
    tmp[3] = tmp[4] = tmp[5] = 0;
   18f2e:	ed8d 7b04 	vstr	d7, [sp, #16]
   18f32:	9703      	str	r7, [sp, #12]
    carry -= vli_sub(result, result, tmp);
   18f34:	f7ff faa8 	bl	18488 <vli_sub>

    /* d2 */
    tmp[0] = product[12];
   18f38:	6b33      	ldr	r3, [r6, #48]	; 0x30
   18f3a:	9300      	str	r3, [sp, #0]
    tmp[1] = product[13];
   18f3c:	6b73      	ldr	r3, [r6, #52]	; 0x34
   18f3e:	9301      	str	r3, [sp, #4]
    tmp[2] = product[14];
   18f40:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   18f42:	9302      	str	r3, [sp, #8]
    tmp[3] = product[15];
   18f44:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   18f46:	9303      	str	r3, [sp, #12]
    tmp[4] = tmp[5] = 0;
    tmp[6] = product[9];
   18f48:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18f4a:	9306      	str	r3, [sp, #24]
    carry -= vli_sub(result, result, tmp);
   18f4c:	1a2d      	subs	r5, r5, r0
    tmp[7] = product[11];
   18f4e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   18f50:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   18f52:	466a      	mov	r2, sp
   18f54:	4621      	mov	r1, r4
   18f56:	4620      	mov	r0, r4
    tmp[4] = tmp[5] = 0;
   18f58:	ed8d 7b04 	vstr	d7, [sp, #16]
    carry -= vli_sub(result, result, tmp);
   18f5c:	f7ff fa94 	bl	18488 <vli_sub>

    /* d3 */
    tmp[0] = product[13];
   18f60:	6b73      	ldr	r3, [r6, #52]	; 0x34
   18f62:	9300      	str	r3, [sp, #0]
    tmp[1] = product[14];
   18f64:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   18f66:	9301      	str	r3, [sp, #4]
    tmp[2] = product[15];
   18f68:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   18f6a:	9302      	str	r3, [sp, #8]
    tmp[3] = product[8];
   18f6c:	6a33      	ldr	r3, [r6, #32]
   18f6e:	9303      	str	r3, [sp, #12]
    tmp[4] = product[9];
   18f70:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18f72:	9304      	str	r3, [sp, #16]
    tmp[5] = product[10];
   18f74:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   18f76:	9305      	str	r3, [sp, #20]
    carry -= vli_sub(result, result, tmp);
   18f78:	1a2d      	subs	r5, r5, r0
    tmp[6] = 0;
    tmp[7] = product[12];
   18f7a:	6b33      	ldr	r3, [r6, #48]	; 0x30
   18f7c:	9307      	str	r3, [sp, #28]
    carry -= vli_sub(result, result, tmp);
   18f7e:	466a      	mov	r2, sp
   18f80:	4621      	mov	r1, r4
   18f82:	4620      	mov	r0, r4
    tmp[6] = 0;
   18f84:	9706      	str	r7, [sp, #24]
    carry -= vli_sub(result, result, tmp);
   18f86:	f7ff fa7f 	bl	18488 <vli_sub>
    tmp[2] = 0;
    tmp[3] = product[9];
    tmp[4] = product[10];
    tmp[5] = product[11];
    tmp[6] = 0;
    tmp[7] = product[13];
   18f8a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   18f8c:	9307      	str	r3, [sp, #28]
    tmp[0] = product[14];
   18f8e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   18f90:	9300      	str	r3, [sp, #0]
    tmp[1] = product[15];
   18f92:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   18f94:	9301      	str	r3, [sp, #4]
    tmp[3] = product[9];
   18f96:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18f98:	9303      	str	r3, [sp, #12]
    tmp[4] = product[10];
   18f9a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   18f9c:	9304      	str	r3, [sp, #16]
    carry -= vli_sub(result, result, tmp);
   18f9e:	1a2d      	subs	r5, r5, r0
    tmp[5] = product[11];
   18fa0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    tmp[2] = 0;
   18fa2:	9702      	str	r7, [sp, #8]
    carry -= vli_sub(result, result, tmp);
   18fa4:	466a      	mov	r2, sp
   18fa6:	4621      	mov	r1, r4
   18fa8:	4620      	mov	r0, r4
    tmp[6] = 0;
   18faa:	9706      	str	r7, [sp, #24]
    tmp[5] = product[11];
   18fac:	9305      	str	r3, [sp, #20]
    carry -= vli_sub(result, result, tmp);
   18fae:	f7ff fa6b 	bl	18488 <vli_sub>

    if (carry < 0) {
   18fb2:	1a2d      	subs	r5, r5, r0
        do {
            carry += vli_add(result, result, curve_p);
   18fb4:	4e16      	ldr	r6, [pc, #88]	; (19010 <vli_mmod_fast+0x1c8>)
    if (carry < 0) {
   18fb6:	d41d      	bmi.n	18ff4 <vli_mmod_fast+0x1ac>
        } while (carry < 0);
    } else {
        while (carry || vli_cmp(curve_p, result) != 1) {
   18fb8:	b9ad      	cbnz	r5, 18fe6 <vli_mmod_fast+0x19e>
        if (left[i] > right[i]) {
   18fba:	69e3      	ldr	r3, [r4, #28]
   18fbc:	3301      	adds	r3, #1
   18fbe:	d120      	bne.n	19002 <vli_mmod_fast+0x1ba>
   18fc0:	69a3      	ldr	r3, [r4, #24]
   18fc2:	b1f3      	cbz	r3, 19002 <vli_mmod_fast+0x1ba>
        } else if (left[i] < right[i]) {
   18fc4:	2b01      	cmp	r3, #1
   18fc6:	d10e      	bne.n	18fe6 <vli_mmod_fast+0x19e>
   18fc8:	6963      	ldr	r3, [r4, #20]
   18fca:	b963      	cbnz	r3, 18fe6 <vli_mmod_fast+0x19e>
   18fcc:	6923      	ldr	r3, [r4, #16]
   18fce:	b953      	cbnz	r3, 18fe6 <vli_mmod_fast+0x19e>
   18fd0:	68e3      	ldr	r3, [r4, #12]
   18fd2:	b943      	cbnz	r3, 18fe6 <vli_mmod_fast+0x19e>
        if (left[i] > right[i]) {
   18fd4:	68a3      	ldr	r3, [r4, #8]
   18fd6:	3301      	adds	r3, #1
   18fd8:	d113      	bne.n	19002 <vli_mmod_fast+0x1ba>
   18fda:	6863      	ldr	r3, [r4, #4]
   18fdc:	3301      	adds	r3, #1
   18fde:	d110      	bne.n	19002 <vli_mmod_fast+0x1ba>
   18fe0:	6823      	ldr	r3, [r4, #0]
   18fe2:	3301      	adds	r3, #1
   18fe4:	d10d      	bne.n	19002 <vli_mmod_fast+0x1ba>
            carry -= vli_sub(result, result, curve_p);
   18fe6:	4632      	mov	r2, r6
   18fe8:	4621      	mov	r1, r4
   18fea:	4620      	mov	r0, r4
   18fec:	f7ff fa4c 	bl	18488 <vli_sub>
   18ff0:	1a2d      	subs	r5, r5, r0
   18ff2:	e7e1      	b.n	18fb8 <vli_mmod_fast+0x170>
            carry += vli_add(result, result, curve_p);
   18ff4:	4632      	mov	r2, r6
   18ff6:	4621      	mov	r1, r4
   18ff8:	4620      	mov	r0, r4
   18ffa:	f7ff fa05 	bl	18408 <vli_add>
        } while (carry < 0);
   18ffe:	182d      	adds	r5, r5, r0
   19000:	d4f8      	bmi.n	18ff4 <vli_mmod_fast+0x1ac>
        }
    }
}
   19002:	b009      	add	sp, #36	; 0x24
   19004:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19006:	bf00      	nop
	...
   19010:	00025ae0 	.word	0x00025ae0

00019014 <vli_modInv.part.0>:
#define EVEN(vli) (!(vli[0] & 1))
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide"
   https://labs.oracle.com/techrep/2001/smli_tr-2001-95.pdf */
#if !defined(asm_modInv) || !asm_modInv
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   19014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19018:	ed2d 8b02 	vpush	{d8}
   1901c:	b0a5      	sub	sp, #148	; 0x94
        dest[i] = src[i];
   1901e:	460c      	mov	r4, r1
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   19020:	9003      	str	r0, [sp, #12]
        dest[i] = src[i];
   19022:	4616      	mov	r6, r2
static void vli_modInv(uECC_word_t *result, const uECC_word_t *input, const uECC_word_t *mod) {
   19024:	ee08 2a10 	vmov	s16, r2
        dest[i] = src[i];
   19028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1902a:	af04      	add	r7, sp, #16
   1902c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1902e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   19032:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   19036:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   19038:	ad0c      	add	r5, sp, #48	; 0x30
   1903a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1903c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
        vli[i] = 0;
   19040:	f04f 0c00 	mov.w	ip, #0
        dest[i] = src[i];
   19044:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    }

    vli_set(a, input);
    vli_set(b, mod);
    vli_clear(u);
    u[0] = 1;
   19048:	f04f 0e01 	mov.w	lr, #1
        vli[i] = 0;
   1904c:	4661      	mov	r1, ip
   1904e:	2220      	movs	r2, #32
   19050:	a81c      	add	r0, sp, #112	; 0x70
    u[0] = 1;
   19052:	e9cd ec14 	strd	lr, ip, [sp, #80]	; 0x50
        vli[i] = 0;
   19056:	e9cd cc16 	strd	ip, ip, [sp, #88]	; 0x58
   1905a:	e9cd cc18 	strd	ip, ip, [sp, #96]	; 0x60
   1905e:	e9cd cc1a 	strd	ip, ip, [sp, #104]	; 0x68
   19062:	f008 f887 	bl	21174 <memset>
        if (left[i] > right[i]) {
   19066:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1906a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    vli_clear(v);
    while ((cmpResult = vli_cmp(a, b)) != 0) {
        carry = 0;
        if (EVEN(a)) {
   1906e:	9c04      	ldr	r4, [sp, #16]
        if (left[i] > right[i]) {
   19070:	45da      	cmp	sl, fp
   19072:	d844      	bhi.n	190fe <vli_modInv.part.0+0xea>
        } else if (left[i] < right[i]) {
   19074:	f0c0 80e6 	bcc.w	19244 <vli_modInv.part.0+0x230>
        if (left[i] > right[i]) {
   19078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1907a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1907c:	42b3      	cmp	r3, r6
   1907e:	f200 8187 	bhi.w	19390 <vli_modInv.part.0+0x37c>
        } else if (left[i] < right[i]) {
   19082:	f0c0 81ef 	bcc.w	19464 <vli_modInv.part.0+0x450>
        if (left[i] > right[i]) {
   19086:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19088:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1908c:	4562      	cmp	r2, ip
   1908e:	f200 81fa 	bhi.w	19486 <vli_modInv.part.0+0x472>
        } else if (left[i] < right[i]) {
   19092:	f0c0 8273 	bcc.w	1957c <vli_modInv.part.0+0x568>
        if (left[i] > right[i]) {
   19096:	9908      	ldr	r1, [sp, #32]
   19098:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1909c:	4571      	cmp	r1, lr
   1909e:	f200 8276 	bhi.w	1958e <vli_modInv.part.0+0x57a>
        } else if (left[i] < right[i]) {
   190a2:	f0c0 827d 	bcc.w	195a0 <vli_modInv.part.0+0x58c>
        if (left[i] > right[i]) {
   190a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   190a8:	9807      	ldr	r0, [sp, #28]
   190aa:	9501      	str	r5, [sp, #4]
   190ac:	42a8      	cmp	r0, r5
   190ae:	f200 8280 	bhi.w	195b2 <vli_modInv.part.0+0x59e>
        } else if (left[i] < right[i]) {
   190b2:	f0c0 8287 	bcc.w	195c4 <vli_modInv.part.0+0x5b0>
        if (left[i] > right[i]) {
   190b6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   190b8:	9d06      	ldr	r5, [sp, #24]
   190ba:	9702      	str	r7, [sp, #8]
   190bc:	42bd      	cmp	r5, r7
   190be:	f200 828b 	bhi.w	195d8 <vli_modInv.part.0+0x5c4>
        } else if (left[i] < right[i]) {
   190c2:	f0c0 8297 	bcc.w	195f4 <vli_modInv.part.0+0x5e0>
        if (left[i] > right[i]) {
   190c6:	9f05      	ldr	r7, [sp, #20]
   190c8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   190cc:	454f      	cmp	r7, r9
   190ce:	f200 829c 	bhi.w	1960a <vli_modInv.part.0+0x5f6>
        } else if (left[i] < right[i]) {
   190d2:	f0c0 82a6 	bcc.w	19622 <vli_modInv.part.0+0x60e>
        if (left[i] > right[i]) {
   190d6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   190da:	4544      	cmp	r4, r8
   190dc:	f200 82ac 	bhi.w	19638 <vli_modInv.part.0+0x624>
        } else if (left[i] < right[i]) {
   190e0:	f0c0 82b3 	bcc.w	1964a <vli_modInv.part.0+0x636>
        dest[i] = src[i];
   190e4:	ac14      	add	r4, sp, #80	; 0x50
   190e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   190e8:	9d03      	ldr	r5, [sp, #12]
   190ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   190ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   190f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
            }
        }
    }
    vli_set(result, u);
}
   190f4:	b025      	add	sp, #148	; 0x94
   190f6:	ecbd 8b02 	vpop	{d8}
   190fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (EVEN(a)) {
   190fe:	07e5      	lsls	r5, r4, #31
   19100:	f140 81d7 	bpl.w	194b2 <vli_modInv.part.0+0x49e>
        } else if (EVEN(b)) {
   19104:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   19108:	f018 0f01 	tst.w	r8, #1
   1910c:	f000 82a6 	beq.w	1965c <vli_modInv.part.0+0x648>
            vli_sub(a, a, b);
   19110:	a904      	add	r1, sp, #16
   19112:	aa0c      	add	r2, sp, #48	; 0x30
   19114:	4608      	mov	r0, r1
   19116:	f7ff f9b7 	bl	18488 <vli_sub>
        uECC_word_t temp = *vli;
   1911a:	e9dd 0509 	ldrd	r0, r5, [sp, #36]	; 0x24
   1911e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   19120:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
        *vli = (temp >> 1) | carry;
   19124:	0873      	lsrs	r3, r6, #1
   19126:	086f      	lsrs	r7, r5, #1
   19128:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   1912c:	930b      	str	r3, [sp, #44]	; 0x2c
   1912e:	0846      	lsrs	r6, r0, #1
        uECC_word_t temp = *vli;
   19130:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
        *vli = (temp >> 1) | carry;
   19134:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   19138:	084d      	lsrs	r5, r1, #1
   1913a:	ea45 75c0 	orr.w	r5, r5, r0, lsl #31
   1913e:	0850      	lsrs	r0, r2, #1
   19140:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   19144:	0861      	lsrs	r1, r4, #1
   19146:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   1914a:	085a      	lsrs	r2, r3, #1
   1914c:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
   19150:	9205      	str	r2, [sp, #20]
   19152:	9a04      	ldr	r2, [sp, #16]
   19154:	970a      	str	r7, [sp, #40]	; 0x28
        carry = temp << (uECC_WORD_BITS - 1);
   19156:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   19158:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1915c:	9304      	str	r3, [sp, #16]
        if (left[i] > right[i]) {
   1915e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   19160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   19162:	9609      	str	r6, [sp, #36]	; 0x24
        if (left[i] > right[i]) {
   19164:	429a      	cmp	r2, r3
        *vli = (temp >> 1) | carry;
   19166:	9508      	str	r5, [sp, #32]
   19168:	9007      	str	r0, [sp, #28]
   1916a:	9106      	str	r1, [sp, #24]
        if (left[i] > right[i]) {
   1916c:	d82a      	bhi.n	191c4 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   1916e:	f0c0 8183 	bcc.w	19478 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   19172:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   19174:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19176:	429a      	cmp	r2, r3
   19178:	d824      	bhi.n	191c4 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   1917a:	f0c0 817d 	bcc.w	19478 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   1917e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   19180:	9b21      	ldr	r3, [sp, #132]	; 0x84
   19182:	429a      	cmp	r2, r3
   19184:	d81e      	bhi.n	191c4 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   19186:	f0c0 8177 	bcc.w	19478 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   1918a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1918c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1918e:	429a      	cmp	r2, r3
   19190:	d818      	bhi.n	191c4 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   19192:	f0c0 8171 	bcc.w	19478 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   19196:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19198:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1919a:	429a      	cmp	r2, r3
   1919c:	d812      	bhi.n	191c4 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   1919e:	f0c0 816b 	bcc.w	19478 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   191a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   191a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   191a6:	429a      	cmp	r2, r3
   191a8:	d80c      	bhi.n	191c4 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   191aa:	f0c0 8165 	bcc.w	19478 <vli_modInv.part.0+0x464>
        if (left[i] > right[i]) {
   191ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
   191b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   191b2:	429a      	cmp	r2, r3
   191b4:	d806      	bhi.n	191c4 <vli_modInv.part.0+0x1b0>
        } else if (left[i] < right[i]) {
   191b6:	f0c0 815f 	bcc.w	19478 <vli_modInv.part.0+0x464>
   191ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
   191bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   191be:	429a      	cmp	r2, r3
   191c0:	f0c0 815a 	bcc.w	19478 <vli_modInv.part.0+0x464>
            vli_sub(u, u, v);
   191c4:	a914      	add	r1, sp, #80	; 0x50
   191c6:	aa1c      	add	r2, sp, #112	; 0x70
   191c8:	4608      	mov	r0, r1
   191ca:	f7ff f95d 	bl	18488 <vli_sub>
            if (!EVEN(u)) {
   191ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   191d0:	f013 0001 	ands.w	r0, r3, #1
   191d4:	d12e      	bne.n	19234 <vli_modInv.part.0+0x220>
        uECC_word_t temp = *vli;
   191d6:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   191da:	e9dd 5417 	ldrd	r5, r4, [sp, #92]	; 0x5c
        *vli = (temp >> 1) | carry;
   191de:	085b      	lsrs	r3, r3, #1
   191e0:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
   191e4:	087f      	lsrs	r7, r7, #1
        uECC_word_t temp = *vli;
   191e6:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
        *vli = (temp >> 1) | carry;
   191ea:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   191ee:	0876      	lsrs	r6, r6, #1
   191f0:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   191f4:	086d      	lsrs	r5, r5, #1
   191f6:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
   191fa:	0864      	lsrs	r4, r4, #1
   191fc:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
   19200:	9314      	str	r3, [sp, #80]	; 0x50
   19202:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   19204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   19206:	9715      	str	r7, [sp, #84]	; 0x54
   19208:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   1920c:	0852      	lsrs	r2, r2, #1
   1920e:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   19212:	085b      	lsrs	r3, r3, #1
   19214:	9616      	str	r6, [sp, #88]	; 0x58
   19216:	9517      	str	r5, [sp, #92]	; 0x5c
   19218:	9418      	str	r4, [sp, #96]	; 0x60
   1921a:	9119      	str	r1, [sp, #100]	; 0x64
   1921c:	921a      	str	r2, [sp, #104]	; 0x68
   1921e:	931b      	str	r3, [sp, #108]	; 0x6c
            if (carry) {
   19220:	b110      	cbz	r0, 19228 <vli_modInv.part.0+0x214>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   19222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19226:	931b      	str	r3, [sp, #108]	; 0x6c
        if (left[i] > right[i]) {
   19228:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   1922c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   19230:	9c04      	ldr	r4, [sp, #16]
   19232:	e71d      	b.n	19070 <vli_modInv.part.0+0x5c>
                carry = vli_add(u, u, mod);
   19234:	a914      	add	r1, sp, #80	; 0x50
   19236:	ee18 2a10 	vmov	r2, s16
   1923a:	4608      	mov	r0, r1
   1923c:	f7ff f8e4 	bl	18408 <vli_add>
        uECC_word_t temp = *vli;
   19240:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19242:	e7c8      	b.n	191d6 <vli_modInv.part.0+0x1c2>
        if (EVEN(a)) {
   19244:	07e3      	lsls	r3, r4, #31
   19246:	f140 8134 	bpl.w	194b2 <vli_modInv.part.0+0x49e>
        } else if (EVEN(b)) {
   1924a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1924e:	f018 0f01 	tst.w	r8, #1
   19252:	f000 8203 	beq.w	1965c <vli_modInv.part.0+0x648>
            vli_sub(b, b, a);
   19256:	a90c      	add	r1, sp, #48	; 0x30
   19258:	aa04      	add	r2, sp, #16
   1925a:	4608      	mov	r0, r1
   1925c:	f7ff f914 	bl	18488 <vli_sub>
        uECC_word_t temp = *vli;
   19260:	e9dd 4511 	ldrd	r4, r5, [sp, #68]	; 0x44
   19264:	e9dd 0e0f 	ldrd	r0, lr, [sp, #60]	; 0x3c
   19268:	e9dd 370d 	ldrd	r3, r7, [sp, #52]	; 0x34
   1926c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        *vli = (temp >> 1) | carry;
   1926e:	0869      	lsrs	r1, r5, #1
   19270:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   19274:	0866      	lsrs	r6, r4, #1
   19276:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   1927a:	9112      	str	r1, [sp, #72]	; 0x48
   1927c:	ea4f 055e 	mov.w	r5, lr, lsr #1
   19280:	0879      	lsrs	r1, r7, #1
   19282:	0852      	lsrs	r2, r2, #1
   19284:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
   19288:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   1928c:	0844      	lsrs	r4, r0, #1
   1928e:	980c      	ldr	r0, [sp, #48]	; 0x30
   19290:	9213      	str	r2, [sp, #76]	; 0x4c
   19292:	085a      	lsrs	r2, r3, #1
        carry = temp << (uECC_WORD_BITS - 1);
   19294:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   19296:	ea44 74ce 	orr.w	r4, r4, lr, lsl #31
   1929a:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
   1929e:	940f      	str	r4, [sp, #60]	; 0x3c
   192a0:	930c      	str	r3, [sp, #48]	; 0x30
        if (left[i] > right[i]) {
   192a2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   192a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   192a6:	9611      	str	r6, [sp, #68]	; 0x44
   192a8:	ea42 72c7 	orr.w	r2, r2, r7, lsl #31
        if (left[i] > right[i]) {
   192ac:	429c      	cmp	r4, r3
        *vli = (temp >> 1) | carry;
   192ae:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
   192b2:	9510      	str	r5, [sp, #64]	; 0x40
        if (left[i] > right[i]) {
   192b4:	d822      	bhi.n	192fc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   192b6:	d364      	bcc.n	19382 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   192b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   192ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   192bc:	429a      	cmp	r2, r3
   192be:	d81d      	bhi.n	192fc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   192c0:	d35f      	bcc.n	19382 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   192c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
   192c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   192c6:	429a      	cmp	r2, r3
   192c8:	d818      	bhi.n	192fc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   192ca:	d35a      	bcc.n	19382 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   192cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   192ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
   192d0:	429a      	cmp	r2, r3
   192d2:	d813      	bhi.n	192fc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   192d4:	d355      	bcc.n	19382 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   192d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   192d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   192da:	429a      	cmp	r2, r3
   192dc:	d80e      	bhi.n	192fc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   192de:	d350      	bcc.n	19382 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   192e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   192e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   192e4:	429a      	cmp	r2, r3
   192e6:	d809      	bhi.n	192fc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   192e8:	d34b      	bcc.n	19382 <vli_modInv.part.0+0x36e>
        if (left[i] > right[i]) {
   192ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   192ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   192ee:	429a      	cmp	r2, r3
   192f0:	d804      	bhi.n	192fc <vli_modInv.part.0+0x2e8>
        } else if (left[i] < right[i]) {
   192f2:	d346      	bcc.n	19382 <vli_modInv.part.0+0x36e>
   192f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   192f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   192f8:	429a      	cmp	r2, r3
   192fa:	d342      	bcc.n	19382 <vli_modInv.part.0+0x36e>
            vli_sub(v, v, u);
   192fc:	a91c      	add	r1, sp, #112	; 0x70
   192fe:	aa14      	add	r2, sp, #80	; 0x50
   19300:	4608      	mov	r0, r1
   19302:	f7ff f8c1 	bl	18488 <vli_sub>
            if (!EVEN(v)) {
   19306:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   19308:	f013 0001 	ands.w	r0, r3, #1
   1930c:	d131      	bne.n	19372 <vli_modInv.part.0+0x35e>
        uECC_word_t temp = *vli;
   1930e:	e9dd c71d 	ldrd	ip, r7, [sp, #116]	; 0x74
   19312:	e9dd 641f 	ldrd	r6, r4, [sp, #124]	; 0x7c
        *vli = (temp >> 1) | carry;
   19316:	085b      	lsrs	r3, r3, #1
   19318:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   1931c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   19320:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
        *vli = (temp >> 1) | carry;
   19324:	931c      	str	r3, [sp, #112]	; 0x70
   19326:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   1932a:	087f      	lsrs	r7, r7, #1
   1932c:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   19330:	0876      	lsrs	r6, r6, #1
   19332:	ea46 76c4 	orr.w	r6, r6, r4, lsl #31
   19336:	0864      	lsrs	r4, r4, #1
        uECC_word_t temp = *vli;
   19338:	9d23      	ldr	r5, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   1933a:	931d      	str	r3, [sp, #116]	; 0x74
   1933c:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
   19340:	0849      	lsrs	r1, r1, #1
   19342:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   19346:	0852      	lsrs	r2, r2, #1
   19348:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1934c:	086d      	lsrs	r5, r5, #1
   1934e:	971e      	str	r7, [sp, #120]	; 0x78
   19350:	961f      	str	r6, [sp, #124]	; 0x7c
   19352:	9420      	str	r4, [sp, #128]	; 0x80
   19354:	9121      	str	r1, [sp, #132]	; 0x84
   19356:	9222      	str	r2, [sp, #136]	; 0x88
   19358:	9523      	str	r5, [sp, #140]	; 0x8c
            if (carry) {
   1935a:	2800      	cmp	r0, #0
   1935c:	f43f af64 	beq.w	19228 <vli_modInv.part.0+0x214>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   19360:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
        if (left[i] > right[i]) {
   19364:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   19368:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   1936c:	9c04      	ldr	r4, [sp, #16]
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1936e:	9523      	str	r5, [sp, #140]	; 0x8c
   19370:	e67e      	b.n	19070 <vli_modInv.part.0+0x5c>
                carry = vli_add(v, v, mod);
   19372:	a91c      	add	r1, sp, #112	; 0x70
   19374:	ee18 2a10 	vmov	r2, s16
   19378:	4608      	mov	r0, r1
   1937a:	f7ff f845 	bl	18408 <vli_add>
        uECC_word_t temp = *vli;
   1937e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   19380:	e7c5      	b.n	1930e <vli_modInv.part.0+0x2fa>
                vli_add(v, v, mod);
   19382:	a91c      	add	r1, sp, #112	; 0x70
   19384:	ee18 2a10 	vmov	r2, s16
   19388:	4608      	mov	r0, r1
   1938a:	f7ff f83d 	bl	18408 <vli_add>
   1938e:	e7b5      	b.n	192fc <vli_modInv.part.0+0x2e8>
        if (EVEN(a)) {
   19390:	07e2      	lsls	r2, r4, #31
   19392:	f140 8166 	bpl.w	19662 <vli_modInv.part.0+0x64e>
        } else if (EVEN(b)) {
   19396:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1939a:	f018 0f01 	tst.w	r8, #1
   1939e:	f47f aeb7 	bne.w	19110 <vli_modInv.part.0+0xfc>
   193a2:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   193a6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   193aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   193ac:	9301      	str	r3, [sp, #4]
   193ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   193b0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   193b4:	9302      	str	r3, [sp, #8]
   193b6:	461a      	mov	r2, r3
        *vli = (temp >> 1) | carry;
   193b8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   193bc:	ea48 73c9 	orr.w	r3, r8, r9, lsl #31
   193c0:	ea4f 0959 	mov.w	r9, r9, lsr #1
   193c4:	930c      	str	r3, [sp, #48]	; 0x30
   193c6:	ea49 73c2 	orr.w	r3, r9, r2, lsl #31
   193ca:	930d      	str	r3, [sp, #52]	; 0x34
   193cc:	0853      	lsrs	r3, r2, #1
   193ce:	9a01      	ldr	r2, [sp, #4]
   193d0:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   193d4:	930e      	str	r3, [sp, #56]	; 0x38
   193d6:	0853      	lsrs	r3, r2, #1
   193d8:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   193dc:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
   193e0:	930f      	str	r3, [sp, #60]	; 0x3c
   193e2:	ea4e 73cc 	orr.w	r3, lr, ip, lsl #31
   193e6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   193ea:	9310      	str	r3, [sp, #64]	; 0x40
   193ec:	ea4c 73c6 	orr.w	r3, ip, r6, lsl #31
   193f0:	9311      	str	r3, [sp, #68]	; 0x44
            if (!EVEN(v)) {
   193f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        *vli = (temp >> 1) | carry;
   193f4:	0876      	lsrs	r6, r6, #1
   193f6:	ea46 76cb 	orr.w	r6, r6, fp, lsl #31
   193fa:	ea4f 025b 	mov.w	r2, fp, lsr #1
            if (!EVEN(v)) {
   193fe:	f013 0001 	ands.w	r0, r3, #1
        *vli = (temp >> 1) | carry;
   19402:	9612      	str	r6, [sp, #72]	; 0x48
   19404:	9213      	str	r2, [sp, #76]	; 0x4c
            if (!EVEN(v)) {
   19406:	d147      	bne.n	19498 <vli_modInv.part.0+0x484>
   19408:	4693      	mov	fp, r2
        uECC_word_t temp = *vli;
   1940a:	e9dd c71d 	ldrd	ip, r7, [sp, #116]	; 0x74
   1940e:	e9dd 651f 	ldrd	r6, r5, [sp, #124]	; 0x7c
        *vli = (temp >> 1) | carry;
   19412:	085b      	lsrs	r3, r3, #1
   19414:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   19418:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   1941c:	e9dd 1221 	ldrd	r1, r2, [sp, #132]	; 0x84
        *vli = (temp >> 1) | carry;
   19420:	931c      	str	r3, [sp, #112]	; 0x70
   19422:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   19426:	087f      	lsrs	r7, r7, #1
   19428:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   1942c:	0876      	lsrs	r6, r6, #1
   1942e:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   19432:	086d      	lsrs	r5, r5, #1
   19434:	ea45 75c1 	orr.w	r5, r5, r1, lsl #31
   19438:	931d      	str	r3, [sp, #116]	; 0x74
   1943a:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   1943c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
        *vli = (temp >> 1) | carry;
   1943e:	971e      	str	r7, [sp, #120]	; 0x78
   19440:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   19444:	0852      	lsrs	r2, r2, #1
   19446:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   1944a:	085b      	lsrs	r3, r3, #1
   1944c:	961f      	str	r6, [sp, #124]	; 0x7c
   1944e:	9520      	str	r5, [sp, #128]	; 0x80
   19450:	9121      	str	r1, [sp, #132]	; 0x84
   19452:	9222      	str	r2, [sp, #136]	; 0x88
   19454:	9323      	str	r3, [sp, #140]	; 0x8c
            if (carry) {
   19456:	2800      	cmp	r0, #0
   19458:	f43f ae0a 	beq.w	19070 <vli_modInv.part.0+0x5c>
                v[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1945c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19460:	9323      	str	r3, [sp, #140]	; 0x8c
   19462:	e605      	b.n	19070 <vli_modInv.part.0+0x5c>
        if (EVEN(a)) {
   19464:	07e0      	lsls	r0, r4, #31
   19466:	f140 80fc 	bpl.w	19662 <vli_modInv.part.0+0x64e>
        } else if (EVEN(b)) {
   1946a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1946e:	f018 0f01 	tst.w	r8, #1
   19472:	f47f aef0 	bne.w	19256 <vli_modInv.part.0+0x242>
   19476:	e794      	b.n	193a2 <vli_modInv.part.0+0x38e>
                vli_add(u, u, mod);
   19478:	a914      	add	r1, sp, #80	; 0x50
   1947a:	ee18 2a10 	vmov	r2, s16
   1947e:	4608      	mov	r0, r1
   19480:	f7fe ffc2 	bl	18408 <vli_add>
   19484:	e69e      	b.n	191c4 <vli_modInv.part.0+0x1b0>
        if (EVEN(a)) {
   19486:	07e1      	lsls	r1, r4, #31
   19488:	d515      	bpl.n	194b6 <vli_modInv.part.0+0x4a2>
        } else if (EVEN(b)) {
   1948a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1948e:	f018 0f01 	tst.w	r8, #1
   19492:	f47f ae3d 	bne.w	19110 <vli_modInv.part.0+0xfc>
   19496:	e786      	b.n	193a6 <vli_modInv.part.0+0x392>
                carry = vli_add(v, v, mod);
   19498:	a91c      	add	r1, sp, #112	; 0x70
   1949a:	ee18 2a10 	vmov	r2, s16
   1949e:	4608      	mov	r0, r1
   194a0:	f7fe ffb2 	bl	18408 <vli_add>
        uECC_word_t temp = *vli;
   194a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
        if (left[i] > right[i]) {
   194a6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   194aa:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   194ae:	9c04      	ldr	r4, [sp, #16]
   194b0:	e7ab      	b.n	1940a <vli_modInv.part.0+0x3f6>
   194b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   194b6:	9908      	ldr	r1, [sp, #32]
   194b8:	9807      	ldr	r0, [sp, #28]
   194ba:	9d06      	ldr	r5, [sp, #24]
   194bc:	9e05      	ldr	r6, [sp, #20]
   194be:	4637      	mov	r7, r6
        *vli = (temp >> 1) | carry;
   194c0:	0864      	lsrs	r4, r4, #1
   194c2:	ea44 74c7 	orr.w	r4, r4, r7, lsl #31
   194c6:	087f      	lsrs	r7, r7, #1
   194c8:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   194cc:	086d      	lsrs	r5, r5, #1
   194ce:	ea45 75c0 	orr.w	r5, r5, r0, lsl #31
   194d2:	0840      	lsrs	r0, r0, #1
   194d4:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   194d8:	0849      	lsrs	r1, r1, #1
   194da:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   194de:	0852      	lsrs	r2, r2, #1
   194e0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   194e4:	085b      	lsrs	r3, r3, #1
   194e6:	ea43 73ca 	orr.w	r3, r3, sl, lsl #31
   194ea:	930a      	str	r3, [sp, #40]	; 0x28
            if (!EVEN(u)) {
   194ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
        *vli = (temp >> 1) | carry;
   194ee:	9007      	str	r0, [sp, #28]
   194f0:	9209      	str	r2, [sp, #36]	; 0x24
            if (!EVEN(u)) {
   194f2:	f013 0001 	ands.w	r0, r3, #1
        *vli = (temp >> 1) | carry;
   194f6:	ea4f 025a 	mov.w	r2, sl, lsr #1
   194fa:	9705      	str	r7, [sp, #20]
   194fc:	9506      	str	r5, [sp, #24]
   194fe:	9108      	str	r1, [sp, #32]
   19500:	920b      	str	r2, [sp, #44]	; 0x2c
   19502:	9404      	str	r4, [sp, #16]
            if (!EVEN(u)) {
   19504:	d12d      	bne.n	19562 <vli_modInv.part.0+0x54e>
   19506:	4692      	mov	sl, r2
        uECC_word_t temp = *vli;
   19508:	e9dd c715 	ldrd	ip, r7, [sp, #84]	; 0x54
   1950c:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
        *vli = (temp >> 1) | carry;
   19510:	085b      	lsrs	r3, r3, #1
   19512:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   19516:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        uECC_word_t temp = *vli;
   1951a:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
        *vli = (temp >> 1) | carry;
   1951e:	9314      	str	r3, [sp, #80]	; 0x50
   19520:	ea4c 73c7 	orr.w	r3, ip, r7, lsl #31
   19524:	087f      	lsrs	r7, r7, #1
   19526:	ea47 77c6 	orr.w	r7, r7, r6, lsl #31
   1952a:	0876      	lsrs	r6, r6, #1
   1952c:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
   19530:	086d      	lsrs	r5, r5, #1
   19532:	ea45 75c1 	orr.w	r5, r5, r1, lsl #31
   19536:	9315      	str	r3, [sp, #84]	; 0x54
   19538:	0849      	lsrs	r1, r1, #1
        uECC_word_t temp = *vli;
   1953a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        *vli = (temp >> 1) | carry;
   1953c:	9716      	str	r7, [sp, #88]	; 0x58
   1953e:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   19542:	0852      	lsrs	r2, r2, #1
   19544:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
   19548:	085b      	lsrs	r3, r3, #1
   1954a:	9617      	str	r6, [sp, #92]	; 0x5c
   1954c:	9518      	str	r5, [sp, #96]	; 0x60
   1954e:	9119      	str	r1, [sp, #100]	; 0x64
   19550:	921a      	str	r2, [sp, #104]	; 0x68
   19552:	931b      	str	r3, [sp, #108]	; 0x6c
            if (carry) {
   19554:	2800      	cmp	r0, #0
   19556:	f43f ad8b 	beq.w	19070 <vli_modInv.part.0+0x5c>
                u[uECC_WORDS - 1] |= HIGH_BIT_SET;
   1955a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1955e:	931b      	str	r3, [sp, #108]	; 0x6c
   19560:	e586      	b.n	19070 <vli_modInv.part.0+0x5c>
                carry = vli_add(u, u, mod);
   19562:	a914      	add	r1, sp, #80	; 0x50
   19564:	ee18 2a10 	vmov	r2, s16
   19568:	4608      	mov	r0, r1
   1956a:	f7fe ff4d 	bl	18408 <vli_add>
        uECC_word_t temp = *vli;
   1956e:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (left[i] > right[i]) {
   19570:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   19574:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if (EVEN(a)) {
   19578:	9c04      	ldr	r4, [sp, #16]
   1957a:	e7c5      	b.n	19508 <vli_modInv.part.0+0x4f4>
   1957c:	07e1      	lsls	r1, r4, #31
   1957e:	d59a      	bpl.n	194b6 <vli_modInv.part.0+0x4a2>
        } else if (EVEN(b)) {
   19580:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   19584:	f018 0f01 	tst.w	r8, #1
   19588:	f47f ae65 	bne.w	19256 <vli_modInv.part.0+0x242>
   1958c:	e70b      	b.n	193a6 <vli_modInv.part.0+0x392>
        if (EVEN(a)) {
   1958e:	07e7      	lsls	r7, r4, #31
   19590:	d592      	bpl.n	194b8 <vli_modInv.part.0+0x4a4>
        } else if (EVEN(b)) {
   19592:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   19596:	f018 0f01 	tst.w	r8, #1
   1959a:	f47f adb9 	bne.w	19110 <vli_modInv.part.0+0xfc>
   1959e:	e704      	b.n	193aa <vli_modInv.part.0+0x396>
        if (EVEN(a)) {
   195a0:	07e7      	lsls	r7, r4, #31
   195a2:	d589      	bpl.n	194b8 <vli_modInv.part.0+0x4a4>
        } else if (EVEN(b)) {
   195a4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   195a8:	f018 0f01 	tst.w	r8, #1
   195ac:	f47f ae53 	bne.w	19256 <vli_modInv.part.0+0x242>
   195b0:	e6fb      	b.n	193aa <vli_modInv.part.0+0x396>
        if (EVEN(a)) {
   195b2:	07e5      	lsls	r5, r4, #31
   195b4:	d581      	bpl.n	194ba <vli_modInv.part.0+0x4a6>
        } else if (EVEN(b)) {
   195b6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   195ba:	f018 0f01 	tst.w	r8, #1
   195be:	f47f ada7 	bne.w	19110 <vli_modInv.part.0+0xfc>
   195c2:	e6f4      	b.n	193ae <vli_modInv.part.0+0x39a>
        if (EVEN(a)) {
   195c4:	07e5      	lsls	r5, r4, #31
   195c6:	f57f af78 	bpl.w	194ba <vli_modInv.part.0+0x4a6>
        } else if (EVEN(b)) {
   195ca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   195ce:	f018 0f01 	tst.w	r8, #1
   195d2:	f47f ae40 	bne.w	19256 <vli_modInv.part.0+0x242>
   195d6:	e6ea      	b.n	193ae <vli_modInv.part.0+0x39a>
        if (EVEN(a)) {
   195d8:	f014 0f01 	tst.w	r4, #1
   195dc:	f43f af6e 	beq.w	194bc <vli_modInv.part.0+0x4a8>
        } else if (EVEN(b)) {
   195e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   195e4:	f018 0f01 	tst.w	r8, #1
   195e8:	f47f ad92 	bne.w	19110 <vli_modInv.part.0+0xfc>
   195ec:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   195f0:	463a      	mov	r2, r7
   195f2:	e6e1      	b.n	193b8 <vli_modInv.part.0+0x3a4>
        if (EVEN(a)) {
   195f4:	f014 0f01 	tst.w	r4, #1
   195f8:	f43f af60 	beq.w	194bc <vli_modInv.part.0+0x4a8>
        } else if (EVEN(b)) {
   195fc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   19600:	f018 0f01 	tst.w	r8, #1
   19604:	f47f ae27 	bne.w	19256 <vli_modInv.part.0+0x242>
   19608:	e7f0      	b.n	195ec <vli_modInv.part.0+0x5d8>
        if (EVEN(a)) {
   1960a:	f014 0f01 	tst.w	r4, #1
   1960e:	f43f af57 	beq.w	194c0 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   19612:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   19616:	f018 0f01 	tst.w	r8, #1
   1961a:	f47f ad79 	bne.w	19110 <vli_modInv.part.0+0xfc>
   1961e:	9a02      	ldr	r2, [sp, #8]
   19620:	e6ca      	b.n	193b8 <vli_modInv.part.0+0x3a4>
        if (EVEN(a)) {
   19622:	f014 0f01 	tst.w	r4, #1
   19626:	f43f af4b 	beq.w	194c0 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   1962a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1962e:	f018 0f01 	tst.w	r8, #1
   19632:	f47f ae10 	bne.w	19256 <vli_modInv.part.0+0x242>
   19636:	e7f2      	b.n	1961e <vli_modInv.part.0+0x60a>
        if (EVEN(a)) {
   19638:	f014 0f01 	tst.w	r4, #1
   1963c:	f43f af40 	beq.w	194c0 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   19640:	f018 0f01 	tst.w	r8, #1
   19644:	f47f ad64 	bne.w	19110 <vli_modInv.part.0+0xfc>
   19648:	e7e9      	b.n	1961e <vli_modInv.part.0+0x60a>
        if (EVEN(a)) {
   1964a:	f014 0f01 	tst.w	r4, #1
   1964e:	f43f af37 	beq.w	194c0 <vli_modInv.part.0+0x4ac>
        } else if (EVEN(b)) {
   19652:	f018 0f01 	tst.w	r8, #1
   19656:	f47f adfe 	bne.w	19256 <vli_modInv.part.0+0x242>
   1965a:	e7e0      	b.n	1961e <vli_modInv.part.0+0x60a>
   1965c:	e9dd c611 	ldrd	ip, r6, [sp, #68]	; 0x44
   19660:	e6a1      	b.n	193a6 <vli_modInv.part.0+0x392>
   19662:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19664:	e727      	b.n	194b6 <vli_modInv.part.0+0x4a2>
   19666:	bf00      	nop

00019668 <XYcZ_add>:
   or P => P', Q => P + Q
*/
static void XYcZ_add(uECC_word_t * RESTRICT X1,
                     uECC_word_t * RESTRICT Y1,
                     uECC_word_t * RESTRICT X2,
                     uECC_word_t * RESTRICT Y2) {
   19668:	b5f0      	push	{r4, r5, r6, r7, lr}
   1966a:	4614      	mov	r4, r2
   1966c:	b099      	sub	sp, #100	; 0x64
   1966e:	4606      	mov	r6, r0
   19670:	460f      	mov	r7, r1
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19672:	4602      	mov	r2, r0
   19674:	4621      	mov	r1, r4
   19676:	4668      	mov	r0, sp
                     uECC_word_t * RESTRICT Y2) {
   19678:	461d      	mov	r5, r3
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1967a:	f7fe ff05 	bl	18488 <vli_sub>
    if (l_borrow) {
   1967e:	2800      	cmp	r0, #0
   19680:	d165      	bne.n	1974e <XYcZ_add+0xe6>
    vli_square(product, left);
   19682:	4669      	mov	r1, sp
   19684:	a808      	add	r0, sp, #32
   19686:	f7ff fa23 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   1968a:	a908      	add	r1, sp, #32
   1968c:	4668      	mov	r0, sp
   1968e:	f7ff fbdb 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19692:	466a      	mov	r2, sp
   19694:	4631      	mov	r1, r6
   19696:	a808      	add	r0, sp, #32
   19698:	f7fe ff3e 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   1969c:	a908      	add	r1, sp, #32
   1969e:	4630      	mov	r0, r6
   196a0:	f7ff fbd2 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   196a4:	466a      	mov	r2, sp
   196a6:	4621      	mov	r1, r4
   196a8:	a808      	add	r0, sp, #32
   196aa:	f7fe ff35 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   196ae:	a908      	add	r1, sp, #32
   196b0:	4620      	mov	r0, r4
   196b2:	f7ff fbc9 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   196b6:	463a      	mov	r2, r7
   196b8:	4629      	mov	r1, r5
   196ba:	4628      	mov	r0, r5
   196bc:	f7fe fee4 	bl	18488 <vli_sub>
    if (l_borrow) {
   196c0:	2800      	cmp	r0, #0
   196c2:	d168      	bne.n	19796 <XYcZ_add+0x12e>
    vli_square(product, left);
   196c4:	4629      	mov	r1, r5
   196c6:	a808      	add	r0, sp, #32
   196c8:	f7ff fa02 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   196cc:	a908      	add	r1, sp, #32
   196ce:	4668      	mov	r0, sp
   196d0:	f7ff fbba 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   196d4:	4632      	mov	r2, r6
   196d6:	4669      	mov	r1, sp
   196d8:	4668      	mov	r0, sp
   196da:	f7fe fed5 	bl	18488 <vli_sub>
    if (l_borrow) {
   196de:	2800      	cmp	r0, #0
   196e0:	d153      	bne.n	1978a <XYcZ_add+0x122>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   196e2:	4622      	mov	r2, r4
   196e4:	4669      	mov	r1, sp
   196e6:	4668      	mov	r0, sp
   196e8:	f7fe fece 	bl	18488 <vli_sub>
    if (l_borrow) {
   196ec:	2800      	cmp	r0, #0
   196ee:	d146      	bne.n	1977e <XYcZ_add+0x116>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   196f0:	4632      	mov	r2, r6
   196f2:	4621      	mov	r1, r4
   196f4:	4620      	mov	r0, r4
   196f6:	f7fe fec7 	bl	18488 <vli_sub>
    if (l_borrow) {
   196fa:	2800      	cmp	r0, #0
   196fc:	d139      	bne.n	19772 <XYcZ_add+0x10a>
    vli_mult(product, left, right);
   196fe:	4622      	mov	r2, r4
   19700:	4639      	mov	r1, r7
   19702:	a808      	add	r0, sp, #32
   19704:	f7fe ff08 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19708:	a908      	add	r1, sp, #32
   1970a:	4638      	mov	r0, r7
   1970c:	f7ff fb9c 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19710:	466a      	mov	r2, sp
   19712:	4631      	mov	r1, r6
   19714:	4620      	mov	r0, r4
   19716:	f7fe feb7 	bl	18488 <vli_sub>
    if (l_borrow) {
   1971a:	bb20      	cbnz	r0, 19766 <XYcZ_add+0xfe>
    vli_mult(product, left, right);
   1971c:	4622      	mov	r2, r4
   1971e:	4629      	mov	r1, r5
   19720:	a808      	add	r0, sp, #32
   19722:	f7fe fef9 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19726:	a908      	add	r1, sp, #32
   19728:	4628      	mov	r0, r5
   1972a:	f7ff fb8d 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1972e:	463a      	mov	r2, r7
   19730:	4629      	mov	r1, r5
   19732:	4628      	mov	r0, r5
   19734:	f7fe fea8 	bl	18488 <vli_sub>
    if (l_borrow) {
   19738:	b978      	cbnz	r0, 1975a <XYcZ_add+0xf2>
        dest[i] = src[i];
   1973a:	46ec      	mov	ip, sp
   1973c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   19740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19742:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   19746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_modSub_fast(X2, X1, t5);  /* t3 = B - x3 */
    vli_modMult_fast(Y2, Y2, X2); /* t4 = (y2 - y1)*(B - x3) */
    vli_modSub_fast(Y2, Y2, Y1);  /* t4 = y3 */

    vli_set(X2, t5);
}
   1974a:	b019      	add	sp, #100	; 0x64
   1974c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli_add(result, result, mod);
   1974e:	4a15      	ldr	r2, [pc, #84]	; (197a4 <XYcZ_add+0x13c>)
   19750:	4669      	mov	r1, sp
   19752:	4668      	mov	r0, sp
   19754:	f7fe fe58 	bl	18408 <vli_add>
   19758:	e793      	b.n	19682 <XYcZ_add+0x1a>
   1975a:	4a12      	ldr	r2, [pc, #72]	; (197a4 <XYcZ_add+0x13c>)
   1975c:	4629      	mov	r1, r5
   1975e:	4628      	mov	r0, r5
   19760:	f7fe fe52 	bl	18408 <vli_add>
   19764:	e7e9      	b.n	1973a <XYcZ_add+0xd2>
   19766:	4a0f      	ldr	r2, [pc, #60]	; (197a4 <XYcZ_add+0x13c>)
   19768:	4621      	mov	r1, r4
   1976a:	4620      	mov	r0, r4
   1976c:	f7fe fe4c 	bl	18408 <vli_add>
   19770:	e7d4      	b.n	1971c <XYcZ_add+0xb4>
   19772:	4a0c      	ldr	r2, [pc, #48]	; (197a4 <XYcZ_add+0x13c>)
   19774:	4621      	mov	r1, r4
   19776:	4620      	mov	r0, r4
   19778:	f7fe fe46 	bl	18408 <vli_add>
   1977c:	e7bf      	b.n	196fe <XYcZ_add+0x96>
   1977e:	4a09      	ldr	r2, [pc, #36]	; (197a4 <XYcZ_add+0x13c>)
   19780:	4669      	mov	r1, sp
   19782:	4668      	mov	r0, sp
   19784:	f7fe fe40 	bl	18408 <vli_add>
   19788:	e7b2      	b.n	196f0 <XYcZ_add+0x88>
   1978a:	4a06      	ldr	r2, [pc, #24]	; (197a4 <XYcZ_add+0x13c>)
   1978c:	4669      	mov	r1, sp
   1978e:	4668      	mov	r0, sp
   19790:	f7fe fe3a 	bl	18408 <vli_add>
   19794:	e7a5      	b.n	196e2 <XYcZ_add+0x7a>
   19796:	4a03      	ldr	r2, [pc, #12]	; (197a4 <XYcZ_add+0x13c>)
   19798:	4629      	mov	r1, r5
   1979a:	4628      	mov	r0, r5
   1979c:	f7fe fe34 	bl	18408 <vli_add>
   197a0:	e790      	b.n	196c4 <XYcZ_add+0x5c>
   197a2:	bf00      	nop
   197a4:	00025ae0 	.word	0x00025ae0

000197a8 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(uECC_word_t * RESTRICT X1,
                      uECC_word_t * RESTRICT Y1,
                      uECC_word_t * RESTRICT X2,
                      uECC_word_t * RESTRICT Y2) {
   197a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   197aa:	4614      	mov	r4, r2
   197ac:	b0a9      	sub	sp, #164	; 0xa4
   197ae:	4606      	mov	r6, r0
   197b0:	460f      	mov	r7, r1
    uECC_word_t l_borrow = vli_sub(result, left, right);
   197b2:	4602      	mov	r2, r0
   197b4:	4621      	mov	r1, r4
   197b6:	4668      	mov	r0, sp
                      uECC_word_t * RESTRICT Y2) {
   197b8:	461d      	mov	r5, r3
    uECC_word_t l_borrow = vli_sub(result, left, right);
   197ba:	f7fe fe65 	bl	18488 <vli_sub>
    if (l_borrow) {
   197be:	2800      	cmp	r0, #0
   197c0:	f040 80cb 	bne.w	1995a <XYcZ_addC+0x1b2>
    vli_square(product, left);
   197c4:	4669      	mov	r1, sp
   197c6:	a818      	add	r0, sp, #96	; 0x60
   197c8:	f7ff f982 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   197cc:	a918      	add	r1, sp, #96	; 0x60
   197ce:	4668      	mov	r0, sp
   197d0:	f7ff fb3a 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   197d4:	466a      	mov	r2, sp
   197d6:	4631      	mov	r1, r6
   197d8:	a818      	add	r0, sp, #96	; 0x60
   197da:	f7fe fe9d 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   197de:	a918      	add	r1, sp, #96	; 0x60
   197e0:	4630      	mov	r0, r6
   197e2:	f7ff fb31 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   197e6:	466a      	mov	r2, sp
   197e8:	4621      	mov	r1, r4
   197ea:	a818      	add	r0, sp, #96	; 0x60
   197ec:	f7fe fe94 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   197f0:	a918      	add	r1, sp, #96	; 0x60
   197f2:	4620      	mov	r0, r4
   197f4:	f7ff fb28 	bl	18e48 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   197f8:	463a      	mov	r2, r7
   197fa:	4629      	mov	r1, r5
   197fc:	4668      	mov	r0, sp
   197fe:	f7fe fe03 	bl	18408 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   19802:	b9a8      	cbnz	r0, 19830 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   19804:	9b07      	ldr	r3, [sp, #28]
   19806:	3301      	adds	r3, #1
   19808:	d117      	bne.n	1983a <XYcZ_addC+0x92>
        if (left[i] > right[i]) {
   1980a:	9b06      	ldr	r3, [sp, #24]
   1980c:	2b01      	cmp	r3, #1
   1980e:	d80f      	bhi.n	19830 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   19810:	b19b      	cbz	r3, 1983a <XYcZ_addC+0x92>
        if (left[i] > right[i]) {
   19812:	9b05      	ldr	r3, [sp, #20]
   19814:	b963      	cbnz	r3, 19830 <XYcZ_addC+0x88>
   19816:	9b04      	ldr	r3, [sp, #16]
   19818:	b953      	cbnz	r3, 19830 <XYcZ_addC+0x88>
   1981a:	9b03      	ldr	r3, [sp, #12]
   1981c:	b943      	cbnz	r3, 19830 <XYcZ_addC+0x88>
        } else if (left[i] < right[i]) {
   1981e:	9b02      	ldr	r3, [sp, #8]
   19820:	3301      	adds	r3, #1
   19822:	d10a      	bne.n	1983a <XYcZ_addC+0x92>
   19824:	9b01      	ldr	r3, [sp, #4]
   19826:	3301      	adds	r3, #1
   19828:	d107      	bne.n	1983a <XYcZ_addC+0x92>
   1982a:	9b00      	ldr	r3, [sp, #0]
   1982c:	3301      	adds	r3, #1
   1982e:	d104      	bne.n	1983a <XYcZ_addC+0x92>
        vli_sub(result, result, mod);
   19830:	4a65      	ldr	r2, [pc, #404]	; (199c8 <XYcZ_addC+0x220>)
   19832:	4669      	mov	r1, sp
   19834:	4668      	mov	r0, sp
   19836:	f7fe fe27 	bl	18488 <vli_sub>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1983a:	463a      	mov	r2, r7
   1983c:	4629      	mov	r1, r5
   1983e:	4628      	mov	r0, r5
   19840:	f7fe fe22 	bl	18488 <vli_sub>
    if (l_borrow) {
   19844:	2800      	cmp	r0, #0
   19846:	f040 8094 	bne.w	19972 <XYcZ_addC+0x1ca>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1984a:	4632      	mov	r2, r6
   1984c:	4621      	mov	r1, r4
   1984e:	a808      	add	r0, sp, #32
   19850:	f7fe fe1a 	bl	18488 <vli_sub>
    if (l_borrow) {
   19854:	2800      	cmp	r0, #0
   19856:	f040 8086 	bne.w	19966 <XYcZ_addC+0x1be>
    vli_mult(product, left, right);
   1985a:	aa08      	add	r2, sp, #32
   1985c:	4639      	mov	r1, r7
   1985e:	a818      	add	r0, sp, #96	; 0x60
   19860:	f7fe fe5a 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19864:	a918      	add	r1, sp, #96	; 0x60
   19866:	4638      	mov	r0, r7
   19868:	f7ff faee 	bl	18e48 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   1986c:	4622      	mov	r2, r4
   1986e:	4631      	mov	r1, r6
   19870:	a808      	add	r0, sp, #32
   19872:	f7fe fdc9 	bl	18408 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   19876:	b9a8      	cbnz	r0, 198a4 <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   19878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1987a:	3301      	adds	r3, #1
   1987c:	d117      	bne.n	198ae <XYcZ_addC+0x106>
        if (left[i] > right[i]) {
   1987e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19880:	2b01      	cmp	r3, #1
   19882:	d80f      	bhi.n	198a4 <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   19884:	b19b      	cbz	r3, 198ae <XYcZ_addC+0x106>
        if (left[i] > right[i]) {
   19886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19888:	b963      	cbnz	r3, 198a4 <XYcZ_addC+0xfc>
   1988a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1988c:	b953      	cbnz	r3, 198a4 <XYcZ_addC+0xfc>
   1988e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19890:	b943      	cbnz	r3, 198a4 <XYcZ_addC+0xfc>
        } else if (left[i] < right[i]) {
   19892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19894:	3301      	adds	r3, #1
   19896:	d10a      	bne.n	198ae <XYcZ_addC+0x106>
   19898:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1989a:	3301      	adds	r3, #1
   1989c:	d107      	bne.n	198ae <XYcZ_addC+0x106>
   1989e:	9b08      	ldr	r3, [sp, #32]
   198a0:	3301      	adds	r3, #1
   198a2:	d104      	bne.n	198ae <XYcZ_addC+0x106>
        vli_sub(result, result, mod);
   198a4:	a908      	add	r1, sp, #32
   198a6:	4a48      	ldr	r2, [pc, #288]	; (199c8 <XYcZ_addC+0x220>)
   198a8:	4608      	mov	r0, r1
   198aa:	f7fe fded 	bl	18488 <vli_sub>
    vli_square(product, left);
   198ae:	4629      	mov	r1, r5
   198b0:	a818      	add	r0, sp, #96	; 0x60
   198b2:	f7ff f90d 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   198b6:	a918      	add	r1, sp, #96	; 0x60
   198b8:	4620      	mov	r0, r4
   198ba:	f7ff fac5 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   198be:	aa08      	add	r2, sp, #32
   198c0:	4621      	mov	r1, r4
   198c2:	4620      	mov	r0, r4
   198c4:	f7fe fde0 	bl	18488 <vli_sub>
    if (l_borrow) {
   198c8:	2800      	cmp	r0, #0
   198ca:	d176      	bne.n	199ba <XYcZ_addC+0x212>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   198cc:	4622      	mov	r2, r4
   198ce:	4631      	mov	r1, r6
   198d0:	a810      	add	r0, sp, #64	; 0x40
   198d2:	f7fe fdd9 	bl	18488 <vli_sub>
    if (l_borrow) {
   198d6:	2800      	cmp	r0, #0
   198d8:	d169      	bne.n	199ae <XYcZ_addC+0x206>
    vli_mult(product, left, right);
   198da:	aa10      	add	r2, sp, #64	; 0x40
   198dc:	4629      	mov	r1, r5
   198de:	a818      	add	r0, sp, #96	; 0x60
   198e0:	f7fe fe1a 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   198e4:	a918      	add	r1, sp, #96	; 0x60
   198e6:	4628      	mov	r0, r5
   198e8:	f7ff faae 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   198ec:	463a      	mov	r2, r7
   198ee:	4629      	mov	r1, r5
   198f0:	4628      	mov	r0, r5
   198f2:	f7fe fdc9 	bl	18488 <vli_sub>
    if (l_borrow) {
   198f6:	2800      	cmp	r0, #0
   198f8:	d153      	bne.n	199a2 <XYcZ_addC+0x1fa>
    vli_square(product, left);
   198fa:	4669      	mov	r1, sp
   198fc:	a818      	add	r0, sp, #96	; 0x60
   198fe:	f7ff f8e7 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   19902:	a918      	add	r1, sp, #96	; 0x60
   19904:	a810      	add	r0, sp, #64	; 0x40
   19906:	f7ff fa9f 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1990a:	a910      	add	r1, sp, #64	; 0x40
   1990c:	aa08      	add	r2, sp, #32
   1990e:	4608      	mov	r0, r1
   19910:	f7fe fdba 	bl	18488 <vli_sub>
    if (l_borrow) {
   19914:	2800      	cmp	r0, #0
   19916:	d13e      	bne.n	19996 <XYcZ_addC+0x1ee>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19918:	4632      	mov	r2, r6
   1991a:	a910      	add	r1, sp, #64	; 0x40
   1991c:	a808      	add	r0, sp, #32
   1991e:	f7fe fdb3 	bl	18488 <vli_sub>
    if (l_borrow) {
   19922:	bb90      	cbnz	r0, 1998a <XYcZ_addC+0x1e2>
    vli_mult(product, left, right);
   19924:	466a      	mov	r2, sp
   19926:	a908      	add	r1, sp, #32
   19928:	a818      	add	r0, sp, #96	; 0x60
   1992a:	f7fe fdf5 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   1992e:	a918      	add	r1, sp, #96	; 0x60
   19930:	a808      	add	r0, sp, #32
   19932:	f7ff fa89 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19936:	463a      	mov	r2, r7
   19938:	a908      	add	r1, sp, #32
   1993a:	4638      	mov	r0, r7
   1993c:	f7fe fda4 	bl	18488 <vli_sub>
    if (l_borrow) {
   19940:	b9e8      	cbnz	r0, 1997e <XYcZ_addC+0x1d6>
        dest[i] = src[i];
   19942:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   19946:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1994a:	4634      	mov	r4, r6
   1994c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1994e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   19952:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_modSub_fast(t6, t7, X1);  /* t6 = x3' - B */
    vli_modMult_fast(t6, t6, t5); /* t6 = (y2 + y1)*(x3' - B) */
    vli_modSub_fast(Y1, t6, Y1);  /* t2 = (y2 + y1)*(x3' - B) - E = y3' */

    vli_set(X1, t7);
}
   19956:	b029      	add	sp, #164	; 0xa4
   19958:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli_add(result, result, mod);
   1995a:	4a1b      	ldr	r2, [pc, #108]	; (199c8 <XYcZ_addC+0x220>)
   1995c:	4669      	mov	r1, sp
   1995e:	4668      	mov	r0, sp
   19960:	f7fe fd52 	bl	18408 <vli_add>
   19964:	e72e      	b.n	197c4 <XYcZ_addC+0x1c>
   19966:	a908      	add	r1, sp, #32
   19968:	4a17      	ldr	r2, [pc, #92]	; (199c8 <XYcZ_addC+0x220>)
   1996a:	4608      	mov	r0, r1
   1996c:	f7fe fd4c 	bl	18408 <vli_add>
   19970:	e773      	b.n	1985a <XYcZ_addC+0xb2>
   19972:	4a15      	ldr	r2, [pc, #84]	; (199c8 <XYcZ_addC+0x220>)
   19974:	4629      	mov	r1, r5
   19976:	4628      	mov	r0, r5
   19978:	f7fe fd46 	bl	18408 <vli_add>
   1997c:	e765      	b.n	1984a <XYcZ_addC+0xa2>
   1997e:	4a12      	ldr	r2, [pc, #72]	; (199c8 <XYcZ_addC+0x220>)
   19980:	4639      	mov	r1, r7
   19982:	4638      	mov	r0, r7
   19984:	f7fe fd40 	bl	18408 <vli_add>
   19988:	e7db      	b.n	19942 <XYcZ_addC+0x19a>
   1998a:	a908      	add	r1, sp, #32
   1998c:	4a0e      	ldr	r2, [pc, #56]	; (199c8 <XYcZ_addC+0x220>)
   1998e:	4608      	mov	r0, r1
   19990:	f7fe fd3a 	bl	18408 <vli_add>
   19994:	e7c6      	b.n	19924 <XYcZ_addC+0x17c>
   19996:	a910      	add	r1, sp, #64	; 0x40
   19998:	4a0b      	ldr	r2, [pc, #44]	; (199c8 <XYcZ_addC+0x220>)
   1999a:	4608      	mov	r0, r1
   1999c:	f7fe fd34 	bl	18408 <vli_add>
   199a0:	e7ba      	b.n	19918 <XYcZ_addC+0x170>
   199a2:	4a09      	ldr	r2, [pc, #36]	; (199c8 <XYcZ_addC+0x220>)
   199a4:	4629      	mov	r1, r5
   199a6:	4628      	mov	r0, r5
   199a8:	f7fe fd2e 	bl	18408 <vli_add>
   199ac:	e7a5      	b.n	198fa <XYcZ_addC+0x152>
   199ae:	a910      	add	r1, sp, #64	; 0x40
   199b0:	4a05      	ldr	r2, [pc, #20]	; (199c8 <XYcZ_addC+0x220>)
   199b2:	4608      	mov	r0, r1
   199b4:	f7fe fd28 	bl	18408 <vli_add>
   199b8:	e78f      	b.n	198da <XYcZ_addC+0x132>
   199ba:	4a03      	ldr	r2, [pc, #12]	; (199c8 <XYcZ_addC+0x220>)
   199bc:	4621      	mov	r1, r4
   199be:	4620      	mov	r0, r4
   199c0:	f7fe fd22 	bl	18408 <vli_add>
   199c4:	e782      	b.n	198cc <XYcZ_addC+0x124>
   199c6:	bf00      	nop
   199c8:	00025ae0 	.word	0x00025ae0

000199cc <EccPoint_double_jacobian.part.0>:
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
   199cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   199d0:	b0a1      	sub	sp, #132	; 0x84
   199d2:	4604      	mov	r4, r0
    vli_square(product, left);
   199d4:	a810      	add	r0, sp, #64	; 0x40
static void EccPoint_double_jacobian(uECC_word_t * RESTRICT X1,
   199d6:	4615      	mov	r5, r2
   199d8:	460e      	mov	r6, r1
    vli_square(product, left);
   199da:	f7ff f879 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   199de:	a910      	add	r1, sp, #64	; 0x40
   199e0:	4668      	mov	r0, sp
   199e2:	f7ff fa31 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   199e6:	466a      	mov	r2, sp
   199e8:	4621      	mov	r1, r4
   199ea:	a810      	add	r0, sp, #64	; 0x40
   199ec:	f7fe fd94 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   199f0:	a910      	add	r1, sp, #64	; 0x40
   199f2:	a808      	add	r0, sp, #32
   199f4:	f7ff fa28 	bl	18e48 <vli_mmod_fast>
    vli_square(product, left);
   199f8:	4669      	mov	r1, sp
   199fa:	a810      	add	r0, sp, #64	; 0x40
   199fc:	f7ff f868 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   19a00:	a910      	add	r1, sp, #64	; 0x40
   19a02:	4668      	mov	r0, sp
   19a04:	f7ff fa20 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19a08:	462a      	mov	r2, r5
   19a0a:	4631      	mov	r1, r6
   19a0c:	a810      	add	r0, sp, #64	; 0x40
   19a0e:	f7fe fd83 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19a12:	a910      	add	r1, sp, #64	; 0x40
   19a14:	4630      	mov	r0, r6
   19a16:	f7ff fa17 	bl	18e48 <vli_mmod_fast>
    vli_square(product, left);
   19a1a:	4629      	mov	r1, r5
   19a1c:	a810      	add	r0, sp, #64	; 0x40
   19a1e:	f7ff f857 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   19a22:	a910      	add	r1, sp, #64	; 0x40
   19a24:	4628      	mov	r0, r5
   19a26:	f7ff fa0f 	bl	18e48 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   19a2a:	462a      	mov	r2, r5
   19a2c:	4621      	mov	r1, r4
   19a2e:	4620      	mov	r0, r4
   19a30:	f7fe fcea 	bl	18408 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   19a34:	b9a8      	cbnz	r0, 19a62 <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   19a36:	69e3      	ldr	r3, [r4, #28]
   19a38:	3301      	adds	r3, #1
   19a3a:	d117      	bne.n	19a6c <EccPoint_double_jacobian.part.0+0xa0>
        if (left[i] > right[i]) {
   19a3c:	69a3      	ldr	r3, [r4, #24]
   19a3e:	2b01      	cmp	r3, #1
   19a40:	d80f      	bhi.n	19a62 <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   19a42:	b19b      	cbz	r3, 19a6c <EccPoint_double_jacobian.part.0+0xa0>
        if (left[i] > right[i]) {
   19a44:	6963      	ldr	r3, [r4, #20]
   19a46:	b963      	cbnz	r3, 19a62 <EccPoint_double_jacobian.part.0+0x96>
   19a48:	6923      	ldr	r3, [r4, #16]
   19a4a:	b953      	cbnz	r3, 19a62 <EccPoint_double_jacobian.part.0+0x96>
   19a4c:	68e3      	ldr	r3, [r4, #12]
   19a4e:	b943      	cbnz	r3, 19a62 <EccPoint_double_jacobian.part.0+0x96>
        } else if (left[i] < right[i]) {
   19a50:	68a3      	ldr	r3, [r4, #8]
   19a52:	3301      	adds	r3, #1
   19a54:	d10a      	bne.n	19a6c <EccPoint_double_jacobian.part.0+0xa0>
   19a56:	6863      	ldr	r3, [r4, #4]
   19a58:	3301      	adds	r3, #1
   19a5a:	d107      	bne.n	19a6c <EccPoint_double_jacobian.part.0+0xa0>
   19a5c:	6823      	ldr	r3, [r4, #0]
   19a5e:	3301      	adds	r3, #1
   19a60:	d104      	bne.n	19a6c <EccPoint_double_jacobian.part.0+0xa0>
        vli_sub(result, result, mod);
   19a62:	4a9d      	ldr	r2, [pc, #628]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19a64:	4621      	mov	r1, r4
   19a66:	4620      	mov	r0, r4
   19a68:	f7fe fd0e 	bl	18488 <vli_sub>
    uECC_word_t carry = vli_add(result, left, right);
   19a6c:	462a      	mov	r2, r5
   19a6e:	4629      	mov	r1, r5
   19a70:	4628      	mov	r0, r5
   19a72:	f7fe fcc9 	bl	18408 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   19a76:	b9a8      	cbnz	r0, 19aa4 <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   19a78:	69eb      	ldr	r3, [r5, #28]
   19a7a:	3301      	adds	r3, #1
   19a7c:	d117      	bne.n	19aae <EccPoint_double_jacobian.part.0+0xe2>
        if (left[i] > right[i]) {
   19a7e:	69ab      	ldr	r3, [r5, #24]
   19a80:	2b01      	cmp	r3, #1
   19a82:	d80f      	bhi.n	19aa4 <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   19a84:	b19b      	cbz	r3, 19aae <EccPoint_double_jacobian.part.0+0xe2>
        if (left[i] > right[i]) {
   19a86:	696b      	ldr	r3, [r5, #20]
   19a88:	b963      	cbnz	r3, 19aa4 <EccPoint_double_jacobian.part.0+0xd8>
   19a8a:	692b      	ldr	r3, [r5, #16]
   19a8c:	b953      	cbnz	r3, 19aa4 <EccPoint_double_jacobian.part.0+0xd8>
   19a8e:	68eb      	ldr	r3, [r5, #12]
   19a90:	b943      	cbnz	r3, 19aa4 <EccPoint_double_jacobian.part.0+0xd8>
        } else if (left[i] < right[i]) {
   19a92:	68ab      	ldr	r3, [r5, #8]
   19a94:	3301      	adds	r3, #1
   19a96:	d10a      	bne.n	19aae <EccPoint_double_jacobian.part.0+0xe2>
   19a98:	686b      	ldr	r3, [r5, #4]
   19a9a:	3301      	adds	r3, #1
   19a9c:	d107      	bne.n	19aae <EccPoint_double_jacobian.part.0+0xe2>
   19a9e:	682b      	ldr	r3, [r5, #0]
   19aa0:	3301      	adds	r3, #1
   19aa2:	d104      	bne.n	19aae <EccPoint_double_jacobian.part.0+0xe2>
        vli_sub(result, result, mod);
   19aa4:	4a8c      	ldr	r2, [pc, #560]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19aa6:	4629      	mov	r1, r5
   19aa8:	4628      	mov	r0, r5
   19aaa:	f7fe fced 	bl	18488 <vli_sub>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19aae:	462a      	mov	r2, r5
   19ab0:	4621      	mov	r1, r4
   19ab2:	4628      	mov	r0, r5
   19ab4:	f7fe fce8 	bl	18488 <vli_sub>
    if (l_borrow) {
   19ab8:	2800      	cmp	r0, #0
   19aba:	f040 80bd 	bne.w	19c38 <EccPoint_double_jacobian.part.0+0x26c>
    vli_mult(product, left, right);
   19abe:	462a      	mov	r2, r5
   19ac0:	4621      	mov	r1, r4
   19ac2:	a810      	add	r0, sp, #64	; 0x40
   19ac4:	f7fe fd28 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19ac8:	a910      	add	r1, sp, #64	; 0x40
   19aca:	4620      	mov	r0, r4
   19acc:	f7ff f9bc 	bl	18e48 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   19ad0:	4622      	mov	r2, r4
   19ad2:	4621      	mov	r1, r4
   19ad4:	4628      	mov	r0, r5
   19ad6:	f7fe fc97 	bl	18408 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   19ada:	b9a8      	cbnz	r0, 19b08 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   19adc:	69eb      	ldr	r3, [r5, #28]
   19ade:	3301      	adds	r3, #1
   19ae0:	d117      	bne.n	19b12 <EccPoint_double_jacobian.part.0+0x146>
        if (left[i] > right[i]) {
   19ae2:	69ab      	ldr	r3, [r5, #24]
   19ae4:	2b01      	cmp	r3, #1
   19ae6:	d80f      	bhi.n	19b08 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   19ae8:	b19b      	cbz	r3, 19b12 <EccPoint_double_jacobian.part.0+0x146>
        if (left[i] > right[i]) {
   19aea:	696b      	ldr	r3, [r5, #20]
   19aec:	b963      	cbnz	r3, 19b08 <EccPoint_double_jacobian.part.0+0x13c>
   19aee:	692b      	ldr	r3, [r5, #16]
   19af0:	b953      	cbnz	r3, 19b08 <EccPoint_double_jacobian.part.0+0x13c>
   19af2:	68eb      	ldr	r3, [r5, #12]
   19af4:	b943      	cbnz	r3, 19b08 <EccPoint_double_jacobian.part.0+0x13c>
        } else if (left[i] < right[i]) {
   19af6:	68ab      	ldr	r3, [r5, #8]
   19af8:	3301      	adds	r3, #1
   19afa:	d10a      	bne.n	19b12 <EccPoint_double_jacobian.part.0+0x146>
   19afc:	686b      	ldr	r3, [r5, #4]
   19afe:	3301      	adds	r3, #1
   19b00:	d107      	bne.n	19b12 <EccPoint_double_jacobian.part.0+0x146>
   19b02:	682b      	ldr	r3, [r5, #0]
   19b04:	3301      	adds	r3, #1
   19b06:	d104      	bne.n	19b12 <EccPoint_double_jacobian.part.0+0x146>
        vli_sub(result, result, mod);
   19b08:	4a73      	ldr	r2, [pc, #460]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19b0a:	4629      	mov	r1, r5
   19b0c:	4628      	mov	r0, r5
   19b0e:	f7fe fcbb 	bl	18488 <vli_sub>
    uECC_word_t carry = vli_add(result, left, right);
   19b12:	462a      	mov	r2, r5
   19b14:	4621      	mov	r1, r4
   19b16:	4620      	mov	r0, r4
   19b18:	f7fe fc76 	bl	18408 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   19b1c:	b9a8      	cbnz	r0, 19b4a <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   19b1e:	69e3      	ldr	r3, [r4, #28]
   19b20:	3301      	adds	r3, #1
   19b22:	d117      	bne.n	19b54 <EccPoint_double_jacobian.part.0+0x188>
        if (left[i] > right[i]) {
   19b24:	69a3      	ldr	r3, [r4, #24]
   19b26:	2b01      	cmp	r3, #1
   19b28:	d80f      	bhi.n	19b4a <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   19b2a:	b19b      	cbz	r3, 19b54 <EccPoint_double_jacobian.part.0+0x188>
        if (left[i] > right[i]) {
   19b2c:	6963      	ldr	r3, [r4, #20]
   19b2e:	b963      	cbnz	r3, 19b4a <EccPoint_double_jacobian.part.0+0x17e>
   19b30:	6923      	ldr	r3, [r4, #16]
   19b32:	b953      	cbnz	r3, 19b4a <EccPoint_double_jacobian.part.0+0x17e>
   19b34:	68e3      	ldr	r3, [r4, #12]
   19b36:	b943      	cbnz	r3, 19b4a <EccPoint_double_jacobian.part.0+0x17e>
        } else if (left[i] < right[i]) {
   19b38:	68a3      	ldr	r3, [r4, #8]
   19b3a:	3301      	adds	r3, #1
   19b3c:	d10a      	bne.n	19b54 <EccPoint_double_jacobian.part.0+0x188>
   19b3e:	6863      	ldr	r3, [r4, #4]
   19b40:	3301      	adds	r3, #1
   19b42:	d107      	bne.n	19b54 <EccPoint_double_jacobian.part.0+0x188>
   19b44:	6823      	ldr	r3, [r4, #0]
   19b46:	3301      	adds	r3, #1
   19b48:	d104      	bne.n	19b54 <EccPoint_double_jacobian.part.0+0x188>
        vli_sub(result, result, mod);
   19b4a:	4a63      	ldr	r2, [pc, #396]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19b4c:	4621      	mov	r1, r4
   19b4e:	4620      	mov	r0, r4
   19b50:	f7fe fc9a 	bl	18488 <vli_sub>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   19b54:	6821      	ldr	r1, [r4, #0]
    if (vli_testBit(X1, 0)) {
   19b56:	07cb      	lsls	r3, r1, #31
   19b58:	f100 808c 	bmi.w	19c74 <EccPoint_double_jacobian.part.0+0x2a8>
        uECC_word_t temp = *vli;
   19b5c:	e9d4 7905 	ldrd	r7, r9, [r4, #20]
   19b60:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
   19b64:	69e2      	ldr	r2, [r4, #28]
        *vli = (temp >> 1) | carry;
   19b66:	ea4f 0059 	mov.w	r0, r9, lsr #1
        uECC_word_t temp = *vli;
   19b6a:	e9d4 3c01 	ldrd	r3, ip, [r4, #4]
        *vli = (temp >> 1) | carry;
   19b6e:	ea40 70c2 	orr.w	r0, r0, r2, lsl #31
   19b72:	0852      	lsrs	r2, r2, #1
   19b74:	61a0      	str	r0, [r4, #24]
   19b76:	61e2      	str	r2, [r4, #28]
   19b78:	0878      	lsrs	r0, r7, #1
   19b7a:	ea4f 0258 	mov.w	r2, r8, lsr #1
   19b7e:	ea42 72c7 	orr.w	r2, r2, r7, lsl #31
   19b82:	ea40 70c9 	orr.w	r0, r0, r9, lsl #31
   19b86:	6160      	str	r0, [r4, #20]
   19b88:	6122      	str	r2, [r4, #16]
   19b8a:	ea4f 075e 	mov.w	r7, lr, lsr #1
   19b8e:	085a      	lsrs	r2, r3, #1
   19b90:	ea4f 005c 	mov.w	r0, ip, lsr #1
        carry = temp << (uECC_WORD_BITS - 1);
   19b94:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   19b96:	ea47 77c8 	orr.w	r7, r7, r8, lsl #31
   19b9a:	ea40 70ce 	orr.w	r0, r0, lr, lsl #31
   19b9e:	ea42 72cc 	orr.w	r2, r2, ip, lsl #31
   19ba2:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   19ba6:	60e7      	str	r7, [r4, #12]
   19ba8:	60a0      	str	r0, [r4, #8]
   19baa:	6062      	str	r2, [r4, #4]
   19bac:	6023      	str	r3, [r4, #0]
    vli_square(product, left);
   19bae:	4621      	mov	r1, r4
   19bb0:	a810      	add	r0, sp, #64	; 0x40
   19bb2:	f7fe ff8d 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   19bb6:	a910      	add	r1, sp, #64	; 0x40
   19bb8:	4628      	mov	r0, r5
   19bba:	f7ff f945 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19bbe:	aa08      	add	r2, sp, #32
   19bc0:	4629      	mov	r1, r5
   19bc2:	4628      	mov	r0, r5
   19bc4:	f7fe fc60 	bl	18488 <vli_sub>
    if (l_borrow) {
   19bc8:	2800      	cmp	r0, #0
   19bca:	d14d      	bne.n	19c68 <EccPoint_double_jacobian.part.0+0x29c>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19bcc:	aa08      	add	r2, sp, #32
   19bce:	4629      	mov	r1, r5
   19bd0:	4628      	mov	r0, r5
   19bd2:	f7fe fc59 	bl	18488 <vli_sub>
    if (l_borrow) {
   19bd6:	2800      	cmp	r0, #0
   19bd8:	d140      	bne.n	19c5c <EccPoint_double_jacobian.part.0+0x290>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19bda:	a908      	add	r1, sp, #32
   19bdc:	462a      	mov	r2, r5
   19bde:	4608      	mov	r0, r1
   19be0:	f7fe fc52 	bl	18488 <vli_sub>
    if (l_borrow) {
   19be4:	bba0      	cbnz	r0, 19c50 <EccPoint_double_jacobian.part.0+0x284>
    vli_mult(product, left, right);
   19be6:	aa08      	add	r2, sp, #32
   19be8:	4621      	mov	r1, r4
   19bea:	a810      	add	r0, sp, #64	; 0x40
   19bec:	f7fe fc94 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19bf0:	a910      	add	r1, sp, #64	; 0x40
   19bf2:	4620      	mov	r0, r4
   19bf4:	f7ff f928 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19bf8:	466a      	mov	r2, sp
   19bfa:	4621      	mov	r1, r4
   19bfc:	4668      	mov	r0, sp
   19bfe:	f7fe fc43 	bl	18488 <vli_sub>
    if (l_borrow) {
   19c02:	b9f8      	cbnz	r0, 19c44 <EccPoint_double_jacobian.part.0+0x278>
        dest[i] = src[i];
   19c04:	462f      	mov	r7, r5
   19c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19c0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19c0e:	46b4      	mov	ip, r6
   19c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   19c14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   19c18:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   19c1a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   19c1e:	46ee      	mov	lr, sp
   19c20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   19c24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   19c28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   19c2a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   19c2e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   19c32:	b021      	add	sp, #132	; 0x84
   19c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        vli_add(result, result, mod);
   19c38:	4a27      	ldr	r2, [pc, #156]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19c3a:	4629      	mov	r1, r5
   19c3c:	4628      	mov	r0, r5
   19c3e:	f7fe fbe3 	bl	18408 <vli_add>
   19c42:	e73c      	b.n	19abe <EccPoint_double_jacobian.part.0+0xf2>
   19c44:	4a24      	ldr	r2, [pc, #144]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19c46:	4669      	mov	r1, sp
   19c48:	4668      	mov	r0, sp
   19c4a:	f7fe fbdd 	bl	18408 <vli_add>
   19c4e:	e7d9      	b.n	19c04 <EccPoint_double_jacobian.part.0+0x238>
   19c50:	a908      	add	r1, sp, #32
   19c52:	4a21      	ldr	r2, [pc, #132]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19c54:	4608      	mov	r0, r1
   19c56:	f7fe fbd7 	bl	18408 <vli_add>
   19c5a:	e7c4      	b.n	19be6 <EccPoint_double_jacobian.part.0+0x21a>
   19c5c:	4a1e      	ldr	r2, [pc, #120]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19c5e:	4629      	mov	r1, r5
   19c60:	4628      	mov	r0, r5
   19c62:	f7fe fbd1 	bl	18408 <vli_add>
   19c66:	e7b8      	b.n	19bda <EccPoint_double_jacobian.part.0+0x20e>
   19c68:	4a1b      	ldr	r2, [pc, #108]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19c6a:	4629      	mov	r1, r5
   19c6c:	4628      	mov	r0, r5
   19c6e:	f7fe fbcb 	bl	18408 <vli_add>
   19c72:	e7ab      	b.n	19bcc <EccPoint_double_jacobian.part.0+0x200>
        uECC_word_t l_carry = vli_add(X1, X1, curve_p);
   19c74:	4a18      	ldr	r2, [pc, #96]	; (19cd8 <EccPoint_double_jacobian.part.0+0x30c>)
   19c76:	4621      	mov	r1, r4
   19c78:	4620      	mov	r0, r4
   19c7a:	f7fe fbc5 	bl	18408 <vli_add>
        uECC_word_t temp = *vli;
   19c7e:	e9d4 2705 	ldrd	r2, r7, [r4, #20]
   19c82:	f8d4 901c 	ldr.w	r9, [r4, #28]
   19c86:	6863      	ldr	r3, [r4, #4]
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   19c88:	07c1      	lsls	r1, r0, #31
   19c8a:	ea41 0159 	orr.w	r1, r1, r9, lsr #1
        uECC_word_t temp = *vli;
   19c8e:	e9d4 0c02 	ldrd	r0, ip, [r4, #8]
        *vli = (temp >> 1) | carry;
   19c92:	ea4f 0857 	mov.w	r8, r7, lsr #1
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   19c96:	61e1      	str	r1, [r4, #28]
        carry = temp << (uECC_WORD_BITS - 1);
   19c98:	07ff      	lsls	r7, r7, #31
        uECC_word_t temp = *vli;
   19c9a:	6921      	ldr	r1, [r4, #16]
        *vli = (temp >> 1) | carry;
   19c9c:	ea47 0752 	orr.w	r7, r7, r2, lsr #1
        carry = temp << (uECC_WORD_BITS - 1);
   19ca0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
   19ca2:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
   19ca6:	6122      	str	r2, [r4, #16]
   19ca8:	ea4f 025c 	mov.w	r2, ip, lsr #1
   19cac:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   19cb0:	60e2      	str	r2, [r4, #12]
   19cb2:	0842      	lsrs	r2, r0, #1
   19cb4:	ea42 72cc 	orr.w	r2, r2, ip, lsl #31
   19cb8:	60a2      	str	r2, [r4, #8]
   19cba:	085a      	lsrs	r2, r3, #1
   19cbc:	ea42 70c0 	orr.w	r0, r2, r0, lsl #31
   19cc0:	6822      	ldr	r2, [r4, #0]
   19cc2:	6167      	str	r7, [r4, #20]
        carry = temp << (uECC_WORD_BITS - 1);
   19cc4:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
   19cc6:	ea48 78c9 	orr.w	r8, r8, r9, lsl #31
   19cca:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   19cce:	f8c4 8018 	str.w	r8, [r4, #24]
   19cd2:	6060      	str	r0, [r4, #4]
   19cd4:	6023      	str	r3, [r4, #0]
        X1[uECC_WORDS - 1] |= l_carry << (uECC_WORD_BITS - 1);
   19cd6:	e76a      	b.n	19bae <EccPoint_double_jacobian.part.0+0x1e2>
   19cd8:	00025ae0 	.word	0x00025ae0

00019cdc <EccPoint_mult.constprop.0>:

static void EccPoint_mult(EccPoint * RESTRICT result,
   19cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ce0:	b0c5      	sub	sp, #276	; 0x114
   19ce2:	4690      	mov	r8, r2
        dest[i] = src[i];
   19ce4:	468c      	mov	ip, r1
    uECC_word_t z[uECC_WORDS];
    bitcount_t i;
    uECC_word_t nb;

    vli_set(Rx[1], point->x);
    vli_set(Ry[1], point->y);
   19ce6:	f101 0220 	add.w	r2, r1, #32
static void EccPoint_mult(EccPoint * RESTRICT result,
   19cea:	9002      	str	r0, [sp, #8]
    vli_set(Ry[1], point->y);
   19cec:	9201      	str	r2, [sp, #4]
        dest[i] = src[i];
   19cee:	4616      	mov	r6, r2
static void EccPoint_mult(EccPoint * RESTRICT result,
   19cf0:	468a      	mov	sl, r1
    if (initial_Z) {
   19cf2:	461c      	mov	r4, r3
        dest[i] = src[i];
   19cf4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   19cf8:	af1c      	add	r7, sp, #112	; 0x70
   19cfa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   19cfc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   19d00:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   19d04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   19d06:	ad2c      	add	r5, sp, #176	; 0xb0
   19d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   19d0a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   19d0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (initial_Z) {
   19d12:	2c00      	cmp	r4, #0
   19d14:	f000 815c 	beq.w	19fd0 <EccPoint_mult.constprop.0+0x2f4>
        dest[i] = src[i];
   19d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   19d1a:	ae04      	add	r6, sp, #16
   19d1c:	4635      	mov	r5, r6
   19d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   19d20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   19d24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   19d28:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   19d2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   19d30:	af14      	add	r7, sp, #80	; 0x50
   19d32:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   19d34:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   19d38:	ad2c      	add	r5, sp, #176	; 0xb0
   19d3a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   19d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19d40:	ac24      	add	r4, sp, #144	; 0x90
   19d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19d44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vli_square(product, left);
   19d4c:	4631      	mov	r1, r6
   19d4e:	a834      	add	r0, sp, #208	; 0xd0
   19d50:	f7fe febe 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   19d54:	a934      	add	r1, sp, #208	; 0xd0
   19d56:	a80c      	add	r0, sp, #48	; 0x30
   19d58:	f7ff f876 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19d5c:	aa0c      	add	r2, sp, #48	; 0x30
   19d5e:	a91c      	add	r1, sp, #112	; 0x70
   19d60:	a834      	add	r0, sp, #208	; 0xd0
   19d62:	f7fe fbd9 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19d66:	a934      	add	r1, sp, #208	; 0xd0
   19d68:	a81c      	add	r0, sp, #112	; 0x70
   19d6a:	f7ff f86d 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19d6e:	4632      	mov	r2, r6
   19d70:	a90c      	add	r1, sp, #48	; 0x30
   19d72:	a834      	add	r0, sp, #208	; 0xd0
   19d74:	f7fe fbd0 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19d78:	a934      	add	r1, sp, #208	; 0xd0
   19d7a:	a80c      	add	r0, sp, #48	; 0x30
   19d7c:	f7ff f864 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19d80:	aa0c      	add	r2, sp, #48	; 0x30
   19d82:	a92c      	add	r1, sp, #176	; 0xb0
   19d84:	a834      	add	r0, sp, #208	; 0xd0
   19d86:	f7fe fbc7 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19d8a:	a934      	add	r1, sp, #208	; 0xd0
   19d8c:	a82c      	add	r0, sp, #176	; 0xb0
   19d8e:	f7ff f85b 	bl	18e48 <vli_mmod_fast>
        if (vli[i]) {
   19d92:	6833      	ldr	r3, [r6, #0]
   19d94:	2b00      	cmp	r3, #0
   19d96:	f040 810f 	bne.w	19fb8 <EccPoint_mult.constprop.0+0x2dc>
   19d9a:	6873      	ldr	r3, [r6, #4]
   19d9c:	2b00      	cmp	r3, #0
   19d9e:	f040 810b 	bne.w	19fb8 <EccPoint_mult.constprop.0+0x2dc>
   19da2:	68b3      	ldr	r3, [r6, #8]
   19da4:	2b00      	cmp	r3, #0
   19da6:	f040 8107 	bne.w	19fb8 <EccPoint_mult.constprop.0+0x2dc>
   19daa:	68f3      	ldr	r3, [r6, #12]
   19dac:	2b00      	cmp	r3, #0
   19dae:	f040 8103 	bne.w	19fb8 <EccPoint_mult.constprop.0+0x2dc>
   19db2:	6933      	ldr	r3, [r6, #16]
   19db4:	2b00      	cmp	r3, #0
   19db6:	f040 80ff 	bne.w	19fb8 <EccPoint_mult.constprop.0+0x2dc>
   19dba:	6973      	ldr	r3, [r6, #20]
   19dbc:	2b00      	cmp	r3, #0
   19dbe:	f040 80fb 	bne.w	19fb8 <EccPoint_mult.constprop.0+0x2dc>
   19dc2:	69b3      	ldr	r3, [r6, #24]
   19dc4:	2b00      	cmp	r3, #0
   19dc6:	f040 80f7 	bne.w	19fb8 <EccPoint_mult.constprop.0+0x2dc>
   19dca:	69f3      	ldr	r3, [r6, #28]
   19dcc:	2b00      	cmp	r3, #0
   19dce:	f040 80f3 	bne.w	19fb8 <EccPoint_mult.constprop.0+0x2dc>
    vli_square(product, left);
   19dd2:	4631      	mov	r1, r6
   19dd4:	a834      	add	r0, sp, #208	; 0xd0
   19dd6:	f7fe fe7b 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   19dda:	a934      	add	r1, sp, #208	; 0xd0
   19ddc:	a80c      	add	r0, sp, #48	; 0x30
   19dde:	f7ff f833 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19de2:	aa0c      	add	r2, sp, #48	; 0x30
   19de4:	a914      	add	r1, sp, #80	; 0x50
   19de6:	a834      	add	r0, sp, #208	; 0xd0
   19de8:	f7fe fb96 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19dec:	a934      	add	r1, sp, #208	; 0xd0
   19dee:	a814      	add	r0, sp, #80	; 0x50
   19df0:	f7ff f82a 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19df4:	4632      	mov	r2, r6
   19df6:	a90c      	add	r1, sp, #48	; 0x30
   19df8:	a834      	add	r0, sp, #208	; 0xd0
   19dfa:	f7fe fb8d 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19dfe:	a934      	add	r1, sp, #208	; 0xd0
   19e00:	a80c      	add	r0, sp, #48	; 0x30
   19e02:	f7ff f821 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19e06:	aa0c      	add	r2, sp, #48	; 0x30
   19e08:	a924      	add	r1, sp, #144	; 0x90
   19e0a:	a834      	add	r0, sp, #208	; 0xd0
   19e0c:	f7fe fb84 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19e10:	a934      	add	r1, sp, #208	; 0xd0
   19e12:	a824      	add	r0, sp, #144	; 0x90
   19e14:	f7ff f818 	bl	18e48 <vli_mmod_fast>

    XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initialZ);

    for (i = numBits - 2; i > 0; --i) {
   19e18:	25ff      	movs	r5, #255	; 0xff
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   19e1a:	f04f 0901 	mov.w	r9, #1
   19e1e:	9603      	str	r6, [sp, #12]
   19e20:	116b      	asrs	r3, r5, #5
   19e22:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   19e26:	f005 031f 	and.w	r3, r5, #31
   19e2a:	fa09 f303 	lsl.w	r3, r9, r3
        nb = !vli_testBit(scalar, i);
   19e2e:	4213      	tst	r3, r2
   19e30:	bf0c      	ite	eq
   19e32:	2401      	moveq	r4, #1
   19e34:	2400      	movne	r4, #0
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   19e36:	f1c4 0701 	rsb	r7, r4, #1
   19e3a:	ab14      	add	r3, sp, #80	; 0x50
   19e3c:	eb03 1647 	add.w	r6, r3, r7, lsl #5
   19e40:	ab24      	add	r3, sp, #144	; 0x90
   19e42:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   19e46:	ab14      	add	r3, sp, #80	; 0x50
   19e48:	eb03 1b44 	add.w	fp, r3, r4, lsl #5
   19e4c:	ab24      	add	r3, sp, #144	; 0x90
   19e4e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   19e52:	4623      	mov	r3, r4
   19e54:	465a      	mov	r2, fp
   19e56:	4639      	mov	r1, r7
   19e58:	4630      	mov	r0, r6
   19e5a:	f7ff fca5 	bl	197a8 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   19e5e:	463b      	mov	r3, r7
   19e60:	4632      	mov	r2, r6
   19e62:	4621      	mov	r1, r4
   19e64:	4658      	mov	r0, fp
   19e66:	f7ff fbff 	bl	19668 <XYcZ_add>
    for (i = numBits - 2; i > 0; --i) {
   19e6a:	3d01      	subs	r5, #1
   19e6c:	d1d8      	bne.n	19e20 <EccPoint_mult.constprop.0+0x144>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   19e6e:	f8d8 4000 	ldr.w	r4, [r8]
   19e72:	9e03      	ldr	r6, [sp, #12]
   19e74:	43e5      	mvns	r5, r4
    }

    nb = !vli_testBit(scalar, 0);
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   19e76:	ab14      	add	r3, sp, #80	; 0x50
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   19e78:	f004 0401 	and.w	r4, r4, #1
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb]);
   19e7c:	eb03 1744 	add.w	r7, r3, r4, lsl #5
   19e80:	ab24      	add	r3, sp, #144	; 0x90
   19e82:	f005 0501 	and.w	r5, r5, #1
   19e86:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   19e8a:	ab14      	add	r3, sp, #80	; 0x50
   19e8c:	eb03 1845 	add.w	r8, r3, r5, lsl #5
   19e90:	ab24      	add	r3, sp, #144	; 0x90
   19e92:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   19e96:	4642      	mov	r2, r8
   19e98:	4621      	mov	r1, r4
   19e9a:	4638      	mov	r0, r7
   19e9c:	462b      	mov	r3, r5
   19e9e:	f7ff fc83 	bl	197a8 <XYcZ_addC>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   19ea2:	aa14      	add	r2, sp, #80	; 0x50
   19ea4:	a91c      	add	r1, sp, #112	; 0x70
   19ea6:	4630      	mov	r0, r6
   19ea8:	f7fe faee 	bl	18488 <vli_sub>
    if (l_borrow) {
   19eac:	2800      	cmp	r0, #0
   19eae:	f040 8089 	bne.w	19fc4 <EccPoint_mult.constprop.0+0x2e8>
    vli_mult(product, left, right);
   19eb2:	4622      	mov	r2, r4
   19eb4:	4631      	mov	r1, r6
   19eb6:	a834      	add	r0, sp, #208	; 0xd0
   19eb8:	f7fe fb2e 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19ebc:	a934      	add	r1, sp, #208	; 0xd0
   19ebe:	4630      	mov	r0, r6
   19ec0:	f7fe ffc2 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19ec4:	4652      	mov	r2, sl
   19ec6:	4631      	mov	r1, r6
   19ec8:	a834      	add	r0, sp, #208	; 0xd0
   19eca:	f7fe fb25 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19ece:	a934      	add	r1, sp, #208	; 0xd0
   19ed0:	4630      	mov	r0, r6
   19ed2:	f7fe ffb9 	bl	18e48 <vli_mmod_fast>
        if (vli[i]) {
   19ed6:	6833      	ldr	r3, [r6, #0]
   19ed8:	2b00      	cmp	r3, #0
   19eda:	d167      	bne.n	19fac <EccPoint_mult.constprop.0+0x2d0>
   19edc:	6873      	ldr	r3, [r6, #4]
   19ede:	2b00      	cmp	r3, #0
   19ee0:	d164      	bne.n	19fac <EccPoint_mult.constprop.0+0x2d0>
   19ee2:	68b3      	ldr	r3, [r6, #8]
   19ee4:	2b00      	cmp	r3, #0
   19ee6:	d161      	bne.n	19fac <EccPoint_mult.constprop.0+0x2d0>
   19ee8:	68f3      	ldr	r3, [r6, #12]
   19eea:	2b00      	cmp	r3, #0
   19eec:	d15e      	bne.n	19fac <EccPoint_mult.constprop.0+0x2d0>
   19eee:	6933      	ldr	r3, [r6, #16]
   19ef0:	2b00      	cmp	r3, #0
   19ef2:	d15b      	bne.n	19fac <EccPoint_mult.constprop.0+0x2d0>
   19ef4:	6973      	ldr	r3, [r6, #20]
   19ef6:	2b00      	cmp	r3, #0
   19ef8:	d158      	bne.n	19fac <EccPoint_mult.constprop.0+0x2d0>
   19efa:	69b3      	ldr	r3, [r6, #24]
   19efc:	2b00      	cmp	r3, #0
   19efe:	d155      	bne.n	19fac <EccPoint_mult.constprop.0+0x2d0>
   19f00:	69f1      	ldr	r1, [r6, #28]
   19f02:	2900      	cmp	r1, #0
   19f04:	d152      	bne.n	19fac <EccPoint_mult.constprop.0+0x2d0>
        vli[i] = 0;
   19f06:	2220      	movs	r2, #32
   19f08:	4630      	mov	r0, r6
   19f0a:	f007 f933 	bl	21174 <memset>
    vli_mult(product, left, right);
   19f0e:	9a01      	ldr	r2, [sp, #4]
   19f10:	4631      	mov	r1, r6
   19f12:	a834      	add	r0, sp, #208	; 0xd0
   19f14:	f7fe fb00 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19f18:	a934      	add	r1, sp, #208	; 0xd0
   19f1a:	4630      	mov	r0, r6
   19f1c:	f7fe ff94 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19f20:	463a      	mov	r2, r7
   19f22:	4631      	mov	r1, r6
   19f24:	a834      	add	r0, sp, #208	; 0xd0
   19f26:	f7fe faf7 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19f2a:	a934      	add	r1, sp, #208	; 0xd0
   19f2c:	4630      	mov	r0, r6
   19f2e:	f7fe ff8b 	bl	18e48 <vli_mmod_fast>
    vli_modInv(z, z, curve_p);          /* 1 / (xP * Yb * (X1 - X0)) */
    vli_modMult_fast(z, z, point->y); /* yP / (xP * Yb * (X1 - X0)) */
    vli_modMult_fast(z, z, Rx[1 - nb]); /* Xb * yP / (xP * Yb * (X1 - X0)) */
    /* End 1/Z calculation */

    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb]);
   19f32:	4623      	mov	r3, r4
   19f34:	463a      	mov	r2, r7
   19f36:	4629      	mov	r1, r5
   19f38:	4640      	mov	r0, r8
   19f3a:	f7ff fb95 	bl	19668 <XYcZ_add>
    vli_square(product, left);
   19f3e:	4631      	mov	r1, r6
   19f40:	a834      	add	r0, sp, #208	; 0xd0
   19f42:	f7fe fdc5 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   19f46:	a934      	add	r1, sp, #208	; 0xd0
   19f48:	a80c      	add	r0, sp, #48	; 0x30
   19f4a:	f7fe ff7d 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19f4e:	aa0c      	add	r2, sp, #48	; 0x30
   19f50:	a914      	add	r1, sp, #80	; 0x50
   19f52:	a834      	add	r0, sp, #208	; 0xd0
   19f54:	f7fe fae0 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19f58:	a934      	add	r1, sp, #208	; 0xd0
   19f5a:	a814      	add	r0, sp, #80	; 0x50
   19f5c:	f7fe ff74 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19f60:	4632      	mov	r2, r6
   19f62:	a90c      	add	r1, sp, #48	; 0x30
   19f64:	a834      	add	r0, sp, #208	; 0xd0
   19f66:	f7fe fad7 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   19f6a:	a934      	add	r1, sp, #208	; 0xd0
   19f6c:	a80c      	add	r0, sp, #48	; 0x30
   19f6e:	f7fe ff6b 	bl	18e48 <vli_mmod_fast>
    vli_mult(product, left, right);
   19f72:	aa0c      	add	r2, sp, #48	; 0x30
   19f74:	a924      	add	r1, sp, #144	; 0x90
   19f76:	a834      	add	r0, sp, #208	; 0xd0
   19f78:	f7fe face 	bl	18518 <vli_mult>
        dest[i] = src[i];
   19f7c:	af14      	add	r7, sp, #80	; 0x50
    vli_mmod_fast(result, product);
   19f7e:	a934      	add	r1, sp, #208	; 0xd0
   19f80:	a824      	add	r0, sp, #144	; 0x90
   19f82:	f7fe ff61 	bl	18e48 <vli_mmod_fast>
        dest[i] = src[i];
   19f86:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   19f88:	9c02      	ldr	r4, [sp, #8]
   19f8a:	f104 0520 	add.w	r5, r4, #32
   19f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19f90:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   19f94:	ae24      	add	r6, sp, #144	; 0x90
   19f96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   19f9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   19f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   19f9e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   19fa2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    apply_z(Rx[0], Ry[0], z);

    vli_set(result->x, Rx[0]);
    vli_set(result->y, Ry[0]);
}
   19fa6:	b045      	add	sp, #276	; 0x114
   19fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fac:	4a0e      	ldr	r2, [pc, #56]	; (19fe8 <EccPoint_mult.constprop.0+0x30c>)
   19fae:	4631      	mov	r1, r6
   19fb0:	4630      	mov	r0, r6
   19fb2:	f7ff f82f 	bl	19014 <vli_modInv.part.0>
   19fb6:	e7aa      	b.n	19f0e <EccPoint_mult.constprop.0+0x232>
   19fb8:	a92c      	add	r1, sp, #176	; 0xb0
   19fba:	4632      	mov	r2, r6
   19fbc:	a81c      	add	r0, sp, #112	; 0x70
   19fbe:	f7ff fd05 	bl	199cc <EccPoint_double_jacobian.part.0>
   19fc2:	e706      	b.n	19dd2 <EccPoint_mult.constprop.0+0xf6>
        vli_add(result, result, mod);
   19fc4:	4a08      	ldr	r2, [pc, #32]	; (19fe8 <EccPoint_mult.constprop.0+0x30c>)
   19fc6:	4631      	mov	r1, r6
   19fc8:	4630      	mov	r0, r6
   19fca:	f7fe fa1d 	bl	18408 <vli_add>
   19fce:	e770      	b.n	19eb2 <EccPoint_mult.constprop.0+0x1d6>
        vli[i] = 0;
   19fd0:	ae04      	add	r6, sp, #16
        z[0] = 1;
   19fd2:	2301      	movs	r3, #1
        vli[i] = 0;
   19fd4:	e9cd 4405 	strd	r4, r4, [sp, #20]
   19fd8:	e9cd 4407 	strd	r4, r4, [sp, #28]
   19fdc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
   19fe0:	940b      	str	r4, [sp, #44]	; 0x2c
        z[0] = 1;
   19fe2:	6033      	str	r3, [r6, #0]
   19fe4:	e6a0      	b.n	19d28 <EccPoint_mult.constprop.0+0x4c>
   19fe6:	bf00      	nop
   19fe8:	00025ae0 	.word	0x00025ae0

00019fec <EccPoint_compute_public_key>:

static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   19fec:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (vli[i]) {
   19fee:	680b      	ldr	r3, [r1, #0]
static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   19ff0:	b093      	sub	sp, #76	; 0x4c
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp1[uECC_WORDS];
    uECC_word_t tmp2[uECC_WORDS];
    uECC_word_t *p2[2] = {tmp1, tmp2};
   19ff2:	ae02      	add	r6, sp, #8
   19ff4:	af0a      	add	r7, sp, #40	; 0x28
   19ff6:	e9cd 6700 	strd	r6, r7, [sp]
static int EccPoint_compute_public_key(EccPoint *result, uECC_word_t *private) {
   19ffa:	4605      	mov	r5, r0
        if (vli[i]) {
   19ffc:	b98b      	cbnz	r3, 1a022 <EccPoint_compute_public_key+0x36>
   19ffe:	684a      	ldr	r2, [r1, #4]
   1a000:	b97a      	cbnz	r2, 1a022 <EccPoint_compute_public_key+0x36>
   1a002:	688a      	ldr	r2, [r1, #8]
   1a004:	b96a      	cbnz	r2, 1a022 <EccPoint_compute_public_key+0x36>
   1a006:	68ca      	ldr	r2, [r1, #12]
   1a008:	b95a      	cbnz	r2, 1a022 <EccPoint_compute_public_key+0x36>
   1a00a:	690a      	ldr	r2, [r1, #16]
   1a00c:	b94a      	cbnz	r2, 1a022 <EccPoint_compute_public_key+0x36>
   1a00e:	694a      	ldr	r2, [r1, #20]
   1a010:	b93a      	cbnz	r2, 1a022 <EccPoint_compute_public_key+0x36>
   1a012:	698b      	ldr	r3, [r1, #24]
   1a014:	2b00      	cmp	r3, #0
   1a016:	d168      	bne.n	1a0ea <EccPoint_compute_public_key+0xfe>
   1a018:	69cb      	ldr	r3, [r1, #28]
   1a01a:	bb5b      	cbnz	r3, 1a074 <EccPoint_compute_public_key+0x88>
    uECC_word_t carry;
#endif

    /* Make sure the private key is in the range [1, n-1]. */
    if (vli_isZero(private)) {
        return 0;
   1a01c:	2000      	movs	r0, #0

    if (EccPoint_isZero(result)) {
        return 0;
    }
    return 1;
}
   1a01e:	b013      	add	sp, #76	; 0x4c
   1a020:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (left[i] > right[i]) {
   1a022:	69ca      	ldr	r2, [r1, #28]
   1a024:	3201      	adds	r2, #1
   1a026:	d125      	bne.n	1a074 <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   1a028:	698a      	ldr	r2, [r1, #24]
   1a02a:	2a00      	cmp	r2, #0
   1a02c:	d1f6      	bne.n	1a01c <EccPoint_compute_public_key+0x30>
   1a02e:	694a      	ldr	r2, [r1, #20]
        if (left[i] > right[i]) {
   1a030:	3201      	adds	r2, #1
   1a032:	d11f      	bne.n	1a074 <EccPoint_compute_public_key+0x88>
   1a034:	690a      	ldr	r2, [r1, #16]
   1a036:	3201      	adds	r2, #1
   1a038:	d11c      	bne.n	1a074 <EccPoint_compute_public_key+0x88>
   1a03a:	68ca      	ldr	r2, [r1, #12]
   1a03c:	482d      	ldr	r0, [pc, #180]	; (1a0f4 <EccPoint_compute_public_key+0x108>)
   1a03e:	4282      	cmp	r2, r0
   1a040:	d918      	bls.n	1a074 <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   1a042:	3001      	adds	r0, #1
   1a044:	4282      	cmp	r2, r0
   1a046:	d1e9      	bne.n	1a01c <EccPoint_compute_public_key+0x30>
        if (left[i] > right[i]) {
   1a048:	f1a0 50ae 	sub.w	r0, r0, #364904448	; 0x15c00000
   1a04c:	688a      	ldr	r2, [r1, #8]
   1a04e:	f5a0 2075 	sub.w	r0, r0, #1003520	; 0xf5000
   1a052:	f6a0 402a 	subw	r0, r0, #3114	; 0xc2a
   1a056:	4282      	cmp	r2, r0
   1a058:	d90c      	bls.n	1a074 <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   1a05a:	3001      	adds	r0, #1
   1a05c:	4282      	cmp	r2, r0
   1a05e:	d1dd      	bne.n	1a01c <EccPoint_compute_public_key+0x30>
        if (left[i] > right[i]) {
   1a060:	684a      	ldr	r2, [r1, #4]
   1a062:	4825      	ldr	r0, [pc, #148]	; (1a0f8 <EccPoint_compute_public_key+0x10c>)
   1a064:	4282      	cmp	r2, r0
   1a066:	d905      	bls.n	1a074 <EccPoint_compute_public_key+0x88>
        } else if (left[i] < right[i]) {
   1a068:	3001      	adds	r0, #1
   1a06a:	4282      	cmp	r2, r0
   1a06c:	d1d6      	bne.n	1a01c <EccPoint_compute_public_key+0x30>
        if (left[i] > right[i]) {
   1a06e:	4a23      	ldr	r2, [pc, #140]	; (1a0fc <EccPoint_compute_public_key+0x110>)
   1a070:	4293      	cmp	r3, r2
   1a072:	d8d3      	bhi.n	1a01c <EccPoint_compute_public_key+0x30>
    carry = vli_add(tmp1, private, curve_n);
   1a074:	4a22      	ldr	r2, [pc, #136]	; (1a100 <EccPoint_compute_public_key+0x114>)
   1a076:	4630      	mov	r0, r6
   1a078:	f7fe f9c6 	bl	18408 <vli_add>
    vli_add(tmp2, tmp1, curve_n);
   1a07c:	4a20      	ldr	r2, [pc, #128]	; (1a100 <EccPoint_compute_public_key+0x114>)
    carry = vli_add(tmp1, private, curve_n);
   1a07e:	4604      	mov	r4, r0
    vli_add(tmp2, tmp1, curve_n);
   1a080:	4631      	mov	r1, r6
   1a082:	4638      	mov	r0, r7
   1a084:	f7fe f9c0 	bl	18408 <vli_add>
    EccPoint_mult(result, &curve_G, p2[!carry], 0, (uECC_BYTES * 8) + 1);
   1a088:	fab4 f384 	clz	r3, r4
   1a08c:	aa12      	add	r2, sp, #72	; 0x48
   1a08e:	095b      	lsrs	r3, r3, #5
   1a090:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1a094:	491b      	ldr	r1, [pc, #108]	; (1a104 <EccPoint_compute_public_key+0x118>)
   1a096:	f853 2c48 	ldr.w	r2, [r3, #-72]
   1a09a:	4628      	mov	r0, r5
   1a09c:	2300      	movs	r3, #0
   1a09e:	f7ff fe1d 	bl	19cdc <EccPoint_mult.constprop.0>
        if (vli[i]) {
   1a0a2:	682b      	ldr	r3, [r5, #0]
   1a0a4:	b9f3      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0a6:	686b      	ldr	r3, [r5, #4]
   1a0a8:	b9e3      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0aa:	68ab      	ldr	r3, [r5, #8]
   1a0ac:	b9d3      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0ae:	68eb      	ldr	r3, [r5, #12]
   1a0b0:	b9c3      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0b2:	692b      	ldr	r3, [r5, #16]
   1a0b4:	b9b3      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0b6:	696b      	ldr	r3, [r5, #20]
   1a0b8:	b9a3      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0ba:	69ab      	ldr	r3, [r5, #24]
   1a0bc:	b993      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0be:	69eb      	ldr	r3, [r5, #28]
   1a0c0:	b983      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0c2:	6a2b      	ldr	r3, [r5, #32]
   1a0c4:	b973      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a0c8:	b963      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1a0cc:	b953      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1a0d0:	b943      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1a0d4:	b933      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1a0d8:	b923      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a0dc:	b913      	cbnz	r3, 1a0e4 <EccPoint_compute_public_key+0xf8>
   1a0de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1a0e0:	2b00      	cmp	r3, #0
   1a0e2:	d09b      	beq.n	1a01c <EccPoint_compute_public_key+0x30>
    return 1;
   1a0e4:	2001      	movs	r0, #1
}
   1a0e6:	b013      	add	sp, #76	; 0x4c
   1a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (left[i] > right[i]) {
   1a0ea:	69cb      	ldr	r3, [r1, #28]
   1a0ec:	3301      	adds	r3, #1
   1a0ee:	d1c1      	bne.n	1a074 <EccPoint_compute_public_key+0x88>
   1a0f0:	e794      	b.n	1a01c <EccPoint_compute_public_key+0x30>
   1a0f2:	bf00      	nop
   1a0f4:	bce6faac 	.word	0xbce6faac
   1a0f8:	f3b9cac1 	.word	0xf3b9cac1
   1a0fc:	fc632550 	.word	0xfc632550
   1a100:	00025ac0 	.word	0x00025ac0
   1a104:	00025a60 	.word	0x00025a60

0001a108 <uECC_set_rng>:
    g_rng_function = rng_function;
   1a108:	4b01      	ldr	r3, [pc, #4]	; (1a110 <uECC_set_rng+0x8>)
   1a10a:	6018      	str	r0, [r3, #0]
}
   1a10c:	4770      	bx	lr
   1a10e:	bf00      	nop
   1a110:	10002bac 	.word	0x10002bac

0001a114 <uECC_make_key>:
    }
}

#endif /* uECC_WORD_SIZE */

int uECC_make_key(uint8_t public_key[uECC_BYTES*2], uint8_t private_key[uECC_BYTES]) {
   1a114:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a116:	4e81      	ldr	r6, [pc, #516]	; (1a31c <uECC_make_key+0x208>)
   1a118:	b099      	sub	sp, #100	; 0x64
   1a11a:	4605      	mov	r5, r0
   1a11c:	460f      	mov	r7, r1
   1a11e:	2440      	movs	r4, #64	; 0x40
   1a120:	e002      	b.n	1a128 <uECC_make_key+0x14>
    uECC_word_t private[uECC_WORDS];
    EccPoint public;
    uECC_word_t tries;
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1a122:	3c01      	subs	r4, #1
   1a124:	f000 80f6 	beq.w	1a314 <uECC_make_key+0x200>
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   1a128:	6833      	ldr	r3, [r6, #0]
   1a12a:	2120      	movs	r1, #32
   1a12c:	4668      	mov	r0, sp
   1a12e:	4798      	blx	r3
   1a130:	2800      	cmp	r0, #0
   1a132:	d0f6      	beq.n	1a122 <uECC_make_key+0xe>
                EccPoint_compute_public_key(&public, private)) {
   1a134:	4669      	mov	r1, sp
   1a136:	a808      	add	r0, sp, #32
   1a138:	f7ff ff58 	bl	19fec <EccPoint_compute_public_key>
        if (g_rng_function((uint8_t *)private, sizeof(private)) &&
   1a13c:	2800      	cmp	r0, #0
   1a13e:	d0f0      	beq.n	1a122 <uECC_make_key+0xe>
        digit[0] = (uint8_t)(native[i] >> 24);
   1a140:	e9dd 3400 	ldrd	r3, r4, [sp]
   1a144:	0e1a      	lsrs	r2, r3, #24
   1a146:	773a      	strb	r2, [r7, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a148:	0c1a      	lsrs	r2, r3, #16
        digit[0] = (uint8_t)(native[i] >> 24);
   1a14a:	9802      	ldr	r0, [sp, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a14c:	777a      	strb	r2, [r7, #29]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a14e:	0a1a      	lsrs	r2, r3, #8
   1a150:	77ba      	strb	r2, [r7, #30]
        digit[3] = (uint8_t)(native[i]);
   1a152:	76fc      	strb	r4, [r7, #27]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a154:	0e22      	lsrs	r2, r4, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   1a156:	0c26      	lsrs	r6, r4, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a158:	0a24      	lsrs	r4, r4, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1a15a:	9903      	ldr	r1, [sp, #12]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a15c:	76bc      	strb	r4, [r7, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a15e:	0e04      	lsrs	r4, r0, #24
        digit[3] = (uint8_t)(native[i]);
   1a160:	75f8      	strb	r0, [r7, #23]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a162:	753c      	strb	r4, [r7, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a164:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a166:	0a00      	lsrs	r0, r0, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1a168:	763a      	strb	r2, [r7, #24]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a16a:	75b8      	strb	r0, [r7, #22]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a16c:	9a04      	ldr	r2, [sp, #16]
        digit[3] = (uint8_t)(native[i]);
   1a16e:	74f9      	strb	r1, [r7, #19]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a170:	0e08      	lsrs	r0, r1, #24
   1a172:	7438      	strb	r0, [r7, #16]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a174:	0c08      	lsrs	r0, r1, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a176:	0a09      	lsrs	r1, r1, #8
        digit[3] = (uint8_t)(native[i]);
   1a178:	77fb      	strb	r3, [r7, #31]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a17a:	74b9      	strb	r1, [r7, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a17c:	9b05      	ldr	r3, [sp, #20]
        digit[3] = (uint8_t)(native[i]);
   1a17e:	73fa      	strb	r2, [r7, #15]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a180:	0e11      	lsrs	r1, r2, #24
   1a182:	7339      	strb	r1, [r7, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a184:	0c11      	lsrs	r1, r2, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a186:	0a12      	lsrs	r2, r2, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1a188:	f8dd c018 	ldr.w	ip, [sp, #24]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a18c:	73ba      	strb	r2, [r7, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a18e:	0e1a      	lsrs	r2, r3, #24
        digit[3] = (uint8_t)(native[i]);
   1a190:	72fb      	strb	r3, [r7, #11]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a192:	723a      	strb	r2, [r7, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a194:	0c1a      	lsrs	r2, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a196:	0a1b      	lsrs	r3, r3, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   1a198:	727a      	strb	r2, [r7, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a19a:	72bb      	strb	r3, [r7, #10]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a19c:	ea4f 621c 	mov.w	r2, ip, lsr #24
        digit[1] = (uint8_t)(native[i] >> 16);
   1a1a0:	ea4f 431c 	mov.w	r3, ip, lsr #16
   1a1a4:	767e      	strb	r6, [r7, #25]
   1a1a6:	757c      	strb	r4, [r7, #21]
   1a1a8:	7478      	strb	r0, [r7, #17]
   1a1aa:	7379      	strb	r1, [r7, #13]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1ac:	713a      	strb	r2, [r7, #4]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a1ae:	717b      	strb	r3, [r7, #5]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1b0:	9e07      	ldr	r6, [sp, #28]
   1a1b2:	9c08      	ldr	r4, [sp, #32]
        digit[3] = (uint8_t)(native[i]);
   1a1b4:	f887 c007 	strb.w	ip, [r7, #7]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a1b8:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1a1bc:	71bb      	strb	r3, [r7, #6]
        digit[3] = (uint8_t)(native[i]);
   1a1be:	70fe      	strb	r6, [r7, #3]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1c0:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
   1a1c4:	0e33      	lsrs	r3, r6, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   1a1c6:	ea4f 4c16 	mov.w	ip, r6, lsr #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a1ca:	0a36      	lsrs	r6, r6, #8
   1a1cc:	70be      	strb	r6, [r7, #2]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1ce:	0e26      	lsrs	r6, r4, #24
   1a1d0:	703b      	strb	r3, [r7, #0]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a1d2:	f887 c001 	strb.w	ip, [r7, #1]
        digit[3] = (uint8_t)(native[i]);
   1a1d6:	77ec      	strb	r4, [r5, #31]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1d8:	772e      	strb	r6, [r5, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a1da:	0c26      	lsrs	r6, r4, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a1dc:	0a24      	lsrs	r4, r4, #8
   1a1de:	77ac      	strb	r4, [r5, #30]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1e0:	0e04      	lsrs	r4, r0, #24
   1a1e2:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
        digit[3] = (uint8_t)(native[i]);
   1a1e6:	76e8      	strb	r0, [r5, #27]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1e8:	762c      	strb	r4, [r5, #24]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a1ea:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a1ec:	0a00      	lsrs	r0, r0, #8
   1a1ee:	76a8      	strb	r0, [r5, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1f0:	0e08      	lsrs	r0, r1, #24
   1a1f2:	7528      	strb	r0, [r5, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a1f4:	0c08      	lsrs	r0, r1, #16
   1a1f6:	7568      	strb	r0, [r5, #21]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1f8:	0e10      	lsrs	r0, r2, #24
        digit[3] = (uint8_t)(native[i]);
   1a1fa:	75e9      	strb	r1, [r5, #23]
   1a1fc:	74ea      	strb	r2, [r5, #19]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a1fe:	7428      	strb	r0, [r5, #16]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a200:	0a09      	lsrs	r1, r1, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   1a202:	0c10      	lsrs	r0, r2, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a204:	0a12      	lsrs	r2, r2, #8
        digit[3] = (uint8_t)(native[i]);
   1a206:	73eb      	strb	r3, [r5, #15]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a208:	75a9      	strb	r1, [r5, #22]
   1a20a:	74aa      	strb	r2, [r5, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a20c:	0e19      	lsrs	r1, r3, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   1a20e:	0c1a      	lsrs	r2, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a210:	0a1b      	lsrs	r3, r3, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   1a212:	776e      	strb	r6, [r5, #29]
   1a214:	7468      	strb	r0, [r5, #17]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a216:	7329      	strb	r1, [r5, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a218:	736a      	strb	r2, [r5, #13]
   1a21a:	766c      	strb	r4, [r5, #25]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a21c:	73ab      	strb	r3, [r5, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a21e:	e9dd 340d 	ldrd	r3, r4, [sp, #52]	; 0x34
   1a222:	0e1a      	lsrs	r2, r3, #24
   1a224:	722a      	strb	r2, [r5, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a226:	0c1a      	lsrs	r2, r3, #16
        digit[0] = (uint8_t)(native[i] >> 24);
   1a228:	980f      	ldr	r0, [sp, #60]	; 0x3c
        digit[1] = (uint8_t)(native[i] >> 16);
   1a22a:	726a      	strb	r2, [r5, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a22c:	0a1a      	lsrs	r2, r3, #8
   1a22e:	72aa      	strb	r2, [r5, #10]
        digit[3] = (uint8_t)(native[i]);
   1a230:	71ec      	strb	r4, [r5, #7]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a232:	0e22      	lsrs	r2, r4, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   1a234:	0c27      	lsrs	r7, r4, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a236:	0a24      	lsrs	r4, r4, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1a238:	9910      	ldr	r1, [sp, #64]	; 0x40
        digit[2] = (uint8_t)(native[i] >> 8);
   1a23a:	71ac      	strb	r4, [r5, #6]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a23c:	0e04      	lsrs	r4, r0, #24
        digit[3] = (uint8_t)(native[i]);
   1a23e:	70e8      	strb	r0, [r5, #3]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a240:	702c      	strb	r4, [r5, #0]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a242:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a244:	0a00      	lsrs	r0, r0, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1a246:	712a      	strb	r2, [r5, #4]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a248:	70a8      	strb	r0, [r5, #2]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a24a:	9a11      	ldr	r2, [sp, #68]	; 0x44
        digit[3] = (uint8_t)(native[i]);
   1a24c:	f885 103f 	strb.w	r1, [r5, #63]	; 0x3f
        digit[0] = (uint8_t)(native[i] >> 24);
   1a250:	0e08      	lsrs	r0, r1, #24
   1a252:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
        digit[1] = (uint8_t)(native[i] >> 16);
   1a256:	0c08      	lsrs	r0, r1, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a258:	0a09      	lsrs	r1, r1, #8
        digit[3] = (uint8_t)(native[i]);
   1a25a:	72eb      	strb	r3, [r5, #11]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a25c:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
        digit[0] = (uint8_t)(native[i] >> 24);
   1a260:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a262:	9e13      	ldr	r6, [sp, #76]	; 0x4c
        digit[3] = (uint8_t)(native[i]);
   1a264:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
        digit[0] = (uint8_t)(native[i] >> 24);
   1a268:	0e11      	lsrs	r1, r2, #24
   1a26a:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
        digit[1] = (uint8_t)(native[i] >> 16);
   1a26e:	0c11      	lsrs	r1, r2, #16
   1a270:	f885 1039 	strb.w	r1, [r5, #57]	; 0x39
        digit[0] = (uint8_t)(native[i] >> 24);
   1a274:	0e19      	lsrs	r1, r3, #24
        digit[3] = (uint8_t)(native[i]);
   1a276:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        digit[0] = (uint8_t)(native[i] >> 24);
   1a27a:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
        digit[2] = (uint8_t)(native[i] >> 8);
   1a27e:	0a12      	lsrs	r2, r2, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   1a280:	0c19      	lsrs	r1, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a282:	0a1b      	lsrs	r3, r3, #8
   1a284:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
   1a288:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
        digit[0] = (uint8_t)(native[i] >> 24);
   1a28c:	0e32      	lsrs	r2, r6, #24
        digit[1] = (uint8_t)(native[i] >> 16);
   1a28e:	0c33      	lsrs	r3, r6, #16
   1a290:	706c      	strb	r4, [r5, #1]
   1a292:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
   1a296:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
        digit[0] = (uint8_t)(native[i] >> 24);
   1a29a:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
        digit[1] = (uint8_t)(native[i] >> 16);
   1a29e:	716f      	strb	r7, [r5, #5]
   1a2a0:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
        digit[0] = (uint8_t)(native[i] >> 24);
   1a2a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
        digit[2] = (uint8_t)(native[i] >> 8);
   1a2a8:	0a33      	lsrs	r3, r6, #8
        digit[1] = (uint8_t)(native[i] >> 16);
   1a2aa:	0c04      	lsrs	r4, r0, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a2ac:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
        digit[3] = (uint8_t)(native[i]);
   1a2b0:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
        digit[0] = (uint8_t)(native[i] >> 24);
   1a2b4:	0e03      	lsrs	r3, r0, #24
        digit[2] = (uint8_t)(native[i] >> 8);
   1a2b6:	0a00      	lsrs	r0, r0, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1a2b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
        digit[2] = (uint8_t)(native[i] >> 8);
   1a2ba:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        digit[0] = (uint8_t)(native[i] >> 24);
   1a2be:	0e08      	lsrs	r0, r1, #24
   1a2c0:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
        digit[1] = (uint8_t)(native[i] >> 16);
   1a2c4:	0c08      	lsrs	r0, r1, #16
        digit[0] = (uint8_t)(native[i] >> 24);
   1a2c6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
        digit[1] = (uint8_t)(native[i] >> 16);
   1a2ca:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
        digit[0] = (uint8_t)(native[i] >> 24);
   1a2ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        digit[3] = (uint8_t)(native[i]);
   1a2d0:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
        digit[0] = (uint8_t)(native[i] >> 24);
   1a2d4:	0e10      	lsrs	r0, r2, #24
        digit[3] = (uint8_t)(native[i]);
   1a2d6:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
        digit[2] = (uint8_t)(native[i] >> 8);
   1a2da:	0a09      	lsrs	r1, r1, #8
        digit[0] = (uint8_t)(native[i] >> 24);
   1a2dc:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        digit[1] = (uint8_t)(native[i] >> 16);
   1a2e0:	0c10      	lsrs	r0, r2, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a2e2:	0a12      	lsrs	r2, r2, #8
        digit[3] = (uint8_t)(native[i]);
   1a2e4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
        digit[2] = (uint8_t)(native[i] >> 8);
   1a2e8:	f885 102a 	strb.w	r1, [r5, #42]	; 0x2a
        digit[1] = (uint8_t)(native[i] >> 16);
   1a2ec:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        digit[0] = (uint8_t)(native[i] >> 24);
   1a2f0:	0e19      	lsrs	r1, r3, #24
        digit[2] = (uint8_t)(native[i] >> 8);
   1a2f2:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
            vli_nativeToBytes(private_key, private);
            vli_nativeToBytes(public_key, public.x);
            vli_nativeToBytes(public_key + uECC_BYTES, public.y);
            return 1;
   1a2f6:	2001      	movs	r0, #1
        digit[1] = (uint8_t)(native[i] >> 16);
   1a2f8:	0c1a      	lsrs	r2, r3, #16
        digit[2] = (uint8_t)(native[i] >> 8);
   1a2fa:	0a1b      	lsrs	r3, r3, #8
        digit[3] = (uint8_t)(native[i]);
   1a2fc:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
        digit[1] = (uint8_t)(native[i] >> 16);
   1a300:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
        digit[0] = (uint8_t)(native[i] >> 24);
   1a304:	f885 1020 	strb.w	r1, [r5, #32]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a308:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
        digit[2] = (uint8_t)(native[i] >> 8);
   1a30c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
        }
    }
    return 0;
}
   1a310:	b019      	add	sp, #100	; 0x64
   1a312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
   1a314:	4620      	mov	r0, r4
}
   1a316:	b019      	add	sp, #100	; 0x64
   1a318:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a31a:	bf00      	nop
   1a31c:	10002bac 	.word	0x10002bac

0001a320 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t public_key[uECC_BYTES*2],
                       const uint8_t private_key[uECC_BYTES],
                       uint8_t secret[uECC_BYTES]) {
   1a320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a324:	b0bc      	sub	sp, #240	; 0xf0
    uECC_word_t random[uECC_WORDS];
    uECC_word_t *initial_Z = 0;
    uECC_word_t tries;
#if (uECC_CURVE != uECC_secp160r1)
    uECC_word_t tmp[uECC_WORDS];
    uECC_word_t *p2[2] = {private, tmp};
   1a326:	f10d 0810 	add.w	r8, sp, #16
   1a32a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   1a32e:	e9cd 8902 	strd	r8, r9, [sp, #8]
#endif

    // Try to get a random initial Z value to improve protection against side-channel
    // attacks. If the RNG fails every time (eg it was not defined), we continue so that
    // uECC_shared_secret() can still work without an RNG defined.
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1a332:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 1a51c <uECC_shared_secret+0x1fc>
                       uint8_t secret[uECC_BYTES]) {
   1a336:	4606      	mov	r6, r0
   1a338:	460f      	mov	r7, r1
   1a33a:	4615      	mov	r5, r2
    uECC_word_t *p2[2] = {private, tmp};
   1a33c:	2440      	movs	r4, #64	; 0x40
   1a33e:	e001      	b.n	1a344 <uECC_shared_secret+0x24>
    for (tries = 0; tries < MAX_TRIES; ++tries) {
   1a340:	3c01      	subs	r4, #1
   1a342:	d018      	beq.n	1a376 <uECC_shared_secret+0x56>
        if (g_rng_function((uint8_t *)random, sizeof(random)) && !vli_isZero(random)) {
   1a344:	f8da 3000 	ldr.w	r3, [sl]
   1a348:	2120      	movs	r1, #32
   1a34a:	a80c      	add	r0, sp, #48	; 0x30
   1a34c:	4798      	blx	r3
   1a34e:	2800      	cmp	r0, #0
   1a350:	d0f6      	beq.n	1a340 <uECC_shared_secret+0x20>
        if (vli[i]) {
   1a352:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
   1a356:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a358:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1a35a:	4303      	orrs	r3, r0
   1a35c:	431a      	orrs	r2, r3
   1a35e:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a360:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a362:	4311      	orrs	r1, r2
   1a364:	4308      	orrs	r0, r1
   1a366:	4318      	orrs	r0, r3
   1a368:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1a36c:	4310      	orrs	r0, r2
   1a36e:	4303      	orrs	r3, r0
   1a370:	d0e6      	beq.n	1a340 <uECC_shared_secret+0x20>
            initial_Z = random;
   1a372:	ab0c      	add	r3, sp, #48	; 0x30
   1a374:	e000      	b.n	1a378 <uECC_shared_secret+0x58>
    uECC_word_t *initial_Z = 0;
   1a376:	4623      	mov	r3, r4
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1a378:	69fa      	ldr	r2, [r7, #28]
   1a37a:	6879      	ldr	r1, [r7, #4]
   1a37c:	9301      	str	r3, [sp, #4]
   1a37e:	ba12      	rev	r2, r2
   1a380:	9204      	str	r2, [sp, #16]
   1a382:	69ba      	ldr	r2, [r7, #24]
   1a384:	ba12      	rev	r2, r2
   1a386:	9205      	str	r2, [sp, #20]
   1a388:	697a      	ldr	r2, [r7, #20]
   1a38a:	ba12      	rev	r2, r2
   1a38c:	9206      	str	r2, [sp, #24]
   1a38e:	693a      	ldr	r2, [r7, #16]
   1a390:	ba12      	rev	r2, r2
   1a392:	9207      	str	r2, [sp, #28]
   1a394:	68fa      	ldr	r2, [r7, #12]
   1a396:	ba12      	rev	r2, r2
   1a398:	9208      	str	r2, [sp, #32]
   1a39a:	68ba      	ldr	r2, [r7, #8]
   1a39c:	ba12      	rev	r2, r2
   1a39e:	9209      	str	r2, [sp, #36]	; 0x24
   1a3a0:	683a      	ldr	r2, [r7, #0]
   1a3a2:	ba12      	rev	r2, r2
   1a3a4:	920b      	str	r2, [sp, #44]	; 0x2c
   1a3a6:	69f2      	ldr	r2, [r6, #28]
   1a3a8:	ba12      	rev	r2, r2
   1a3aa:	921c      	str	r2, [sp, #112]	; 0x70
   1a3ac:	69b2      	ldr	r2, [r6, #24]
   1a3ae:	ba12      	rev	r2, r2
   1a3b0:	921d      	str	r2, [sp, #116]	; 0x74
   1a3b2:	6972      	ldr	r2, [r6, #20]
   1a3b4:	ba12      	rev	r2, r2
   1a3b6:	921e      	str	r2, [sp, #120]	; 0x78
   1a3b8:	6932      	ldr	r2, [r6, #16]
   1a3ba:	ba12      	rev	r2, r2
   1a3bc:	921f      	str	r2, [sp, #124]	; 0x7c
   1a3be:	68f2      	ldr	r2, [r6, #12]
   1a3c0:	ba12      	rev	r2, r2
   1a3c2:	9220      	str	r2, [sp, #128]	; 0x80
   1a3c4:	68b2      	ldr	r2, [r6, #8]
   1a3c6:	ba12      	rev	r2, r2
   1a3c8:	9221      	str	r2, [sp, #132]	; 0x84
   1a3ca:	6872      	ldr	r2, [r6, #4]
   1a3cc:	ba12      	rev	r2, r2
   1a3ce:	9222      	str	r2, [sp, #136]	; 0x88
   1a3d0:	6832      	ldr	r2, [r6, #0]
   1a3d2:	ba09      	rev	r1, r1
   1a3d4:	ba12      	rev	r2, r2
   1a3d6:	910a      	str	r1, [sp, #40]	; 0x28
   1a3d8:	9223      	str	r2, [sp, #140]	; 0x8c
   1a3da:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
   1a3dc:	6a71      	ldr	r1, [r6, #36]	; 0x24
   1a3de:	ba12      	rev	r2, r2
   1a3e0:	9224      	str	r2, [sp, #144]	; 0x90
   1a3e2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   1a3e4:	ba12      	rev	r2, r2
   1a3e6:	9225      	str	r2, [sp, #148]	; 0x94
   1a3e8:	6b72      	ldr	r2, [r6, #52]	; 0x34
   1a3ea:	ba12      	rev	r2, r2
   1a3ec:	9226      	str	r2, [sp, #152]	; 0x98
   1a3ee:	6b32      	ldr	r2, [r6, #48]	; 0x30
   1a3f0:	ba12      	rev	r2, r2
   1a3f2:	9227      	str	r2, [sp, #156]	; 0x9c
   1a3f4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   1a3f6:	ba12      	rev	r2, r2
   1a3f8:	9228      	str	r2, [sp, #160]	; 0xa0
   1a3fa:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1a3fc:	ba12      	rev	r2, r2
   1a3fe:	9229      	str	r2, [sp, #164]	; 0xa4
   1a400:	6a32      	ldr	r2, [r6, #32]
   1a402:	ba09      	rev	r1, r1
   1a404:	ba12      	rev	r2, r2
   1a406:	912a      	str	r1, [sp, #168]	; 0xa8
   1a408:	922b      	str	r2, [sp, #172]	; 0xac
    // Don't regularize the bitcount for secp160r1.
    EccPoint_mult(&product, &public, private, initial_Z, vli_numBits(private, uECC_WORDS));
#else
    // Regularize the bitcount for the private key so that attackers cannot use a side channel
    // attack to learn the number of leading zeros.
    carry = vli_add(private, private, curve_n);
   1a40a:	4641      	mov	r1, r8
   1a40c:	4a42      	ldr	r2, [pc, #264]	; (1a518 <uECC_shared_secret+0x1f8>)
   1a40e:	4640      	mov	r0, r8
   1a410:	f7fd fffa 	bl	18408 <vli_add>
    vli_add(tmp, private, curve_n);
   1a414:	4a40      	ldr	r2, [pc, #256]	; (1a518 <uECC_shared_secret+0x1f8>)
    carry = vli_add(private, private, curve_n);
   1a416:	4604      	mov	r4, r0
    vli_add(tmp, private, curve_n);
   1a418:	4641      	mov	r1, r8
   1a41a:	4648      	mov	r0, r9
   1a41c:	f7fd fff4 	bl	18408 <vli_add>
    EccPoint_mult(&product, &public, p2[!carry], initial_Z, (uECC_BYTES * 8) + 1);
   1a420:	fab4 f284 	clz	r2, r4
   1a424:	ab3c      	add	r3, sp, #240	; 0xf0
   1a426:	0952      	lsrs	r2, r2, #5
   1a428:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1a42c:	a91c      	add	r1, sp, #112	; 0x70
   1a42e:	9b01      	ldr	r3, [sp, #4]
   1a430:	f852 2ce8 	ldr.w	r2, [r2, #-232]
   1a434:	a82c      	add	r0, sp, #176	; 0xb0
   1a436:	f7ff fc51 	bl	19cdc <EccPoint_mult.constprop.0>
        digit[0] = (uint8_t)(native[i] >> 24);
   1a43a:	e9dd 322c 	ldrd	r3, r2, [sp, #176]	; 0xb0
   1a43e:	0e18      	lsrs	r0, r3, #24
   1a440:	7728      	strb	r0, [r5, #28]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a442:	0c18      	lsrs	r0, r3, #16
   1a444:	7768      	strb	r0, [r5, #29]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a446:	0a18      	lsrs	r0, r3, #8
   1a448:	77a8      	strb	r0, [r5, #30]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a44a:	0e10      	lsrs	r0, r2, #24
   1a44c:	992e      	ldr	r1, [sp, #184]	; 0xb8
   1a44e:	7628      	strb	r0, [r5, #24]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a450:	0c10      	lsrs	r0, r2, #16
   1a452:	7668      	strb	r0, [r5, #25]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a454:	0a10      	lsrs	r0, r2, #8
   1a456:	76a8      	strb	r0, [r5, #26]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a458:	0e08      	lsrs	r0, r1, #24
   1a45a:	7528      	strb	r0, [r5, #20]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a45c:	0c08      	lsrs	r0, r1, #16
   1a45e:	7568      	strb	r0, [r5, #21]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a460:	0a08      	lsrs	r0, r1, #8
   1a462:	75a8      	strb	r0, [r5, #22]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a464:	982f      	ldr	r0, [sp, #188]	; 0xbc
   1a466:	9c30      	ldr	r4, [sp, #192]	; 0xc0
   1a468:	9e31      	ldr	r6, [sp, #196]	; 0xc4
   1a46a:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
        digit[3] = (uint8_t)(native[i]);
   1a46e:	77eb      	strb	r3, [r5, #31]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a470:	0e07      	lsrs	r7, r0, #24
   1a472:	742f      	strb	r7, [r5, #16]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a474:	0c07      	lsrs	r7, r0, #16
   1a476:	746f      	strb	r7, [r5, #17]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a478:	0a07      	lsrs	r7, r0, #8
   1a47a:	74af      	strb	r7, [r5, #18]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a47c:	0e27      	lsrs	r7, r4, #24
   1a47e:	732f      	strb	r7, [r5, #12]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a480:	0c27      	lsrs	r7, r4, #16
   1a482:	736f      	strb	r7, [r5, #13]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a484:	0a27      	lsrs	r7, r4, #8
   1a486:	73af      	strb	r7, [r5, #14]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a488:	0e37      	lsrs	r7, r6, #24
   1a48a:	722f      	strb	r7, [r5, #8]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a48c:	0c37      	lsrs	r7, r6, #16
   1a48e:	726f      	strb	r7, [r5, #9]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a490:	0a37      	lsrs	r7, r6, #8
   1a492:	72af      	strb	r7, [r5, #10]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a494:	ea4f 671c 	mov.w	r7, ip, lsr #24
   1a498:	712f      	strb	r7, [r5, #4]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a49a:	ea4f 471c 	mov.w	r7, ip, lsr #16
        digit[3] = (uint8_t)(native[i]);
   1a49e:	76ea      	strb	r2, [r5, #27]
   1a4a0:	75e9      	strb	r1, [r5, #23]
   1a4a2:	74e8      	strb	r0, [r5, #19]
   1a4a4:	73ec      	strb	r4, [r5, #15]
   1a4a6:	72ee      	strb	r6, [r5, #11]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a4a8:	716f      	strb	r7, [r5, #5]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a4aa:	9f33      	ldr	r7, [sp, #204]	; 0xcc
        digit[3] = (uint8_t)(native[i]);
   1a4ac:	f885 c007 	strb.w	ip, [r5, #7]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a4b0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
   1a4b4:	f885 e006 	strb.w	lr, [r5, #6]
        digit[0] = (uint8_t)(native[i] >> 24);
   1a4b8:	ea4f 6e17 	mov.w	lr, r7, lsr #24
   1a4bc:	f885 e000 	strb.w	lr, [r5]
        digit[1] = (uint8_t)(native[i] >> 16);
   1a4c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1a4c4:	f885 e001 	strb.w	lr, [r5, #1]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a4c8:	ea4f 2e17 	mov.w	lr, r7, lsr #8
        digit[3] = (uint8_t)(native[i]);
   1a4cc:	70ef      	strb	r7, [r5, #3]
        digit[2] = (uint8_t)(native[i] >> 8);
   1a4ce:	f885 e002 	strb.w	lr, [r5, #2]
        if (vli[i]) {
   1a4d2:	b9eb      	cbnz	r3, 1a510 <uECC_shared_secret+0x1f0>
   1a4d4:	b9e2      	cbnz	r2, 1a510 <uECC_shared_secret+0x1f0>
   1a4d6:	b9d9      	cbnz	r1, 1a510 <uECC_shared_secret+0x1f0>
   1a4d8:	b9d0      	cbnz	r0, 1a510 <uECC_shared_secret+0x1f0>
   1a4da:	b9cc      	cbnz	r4, 1a510 <uECC_shared_secret+0x1f0>
   1a4dc:	b9c6      	cbnz	r6, 1a510 <uECC_shared_secret+0x1f0>
   1a4de:	f1bc 0f00 	cmp.w	ip, #0
   1a4e2:	d115      	bne.n	1a510 <uECC_shared_secret+0x1f0>
   1a4e4:	b9a7      	cbnz	r7, 1a510 <uECC_shared_secret+0x1f0>
   1a4e6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   1a4e8:	b993      	cbnz	r3, 1a510 <uECC_shared_secret+0x1f0>
   1a4ea:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   1a4ec:	b983      	cbnz	r3, 1a510 <uECC_shared_secret+0x1f0>
   1a4ee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1a4f0:	b973      	cbnz	r3, 1a510 <uECC_shared_secret+0x1f0>
   1a4f2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   1a4f4:	b963      	cbnz	r3, 1a510 <uECC_shared_secret+0x1f0>
   1a4f6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1a4f8:	b953      	cbnz	r3, 1a510 <uECC_shared_secret+0x1f0>
   1a4fa:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   1a4fc:	b943      	cbnz	r3, 1a510 <uECC_shared_secret+0x1f0>
   1a4fe:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   1a500:	b933      	cbnz	r3, 1a510 <uECC_shared_secret+0x1f0>
   1a502:	983b      	ldr	r0, [sp, #236]	; 0xec
   1a504:	3800      	subs	r0, #0
   1a506:	bf18      	it	ne
   1a508:	2001      	movne	r0, #1
#endif

    vli_nativeToBytes(secret, product.x);
    return !EccPoint_isZero(&product);
}
   1a50a:	b03c      	add	sp, #240	; 0xf0
   1a50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a510:	2001      	movs	r0, #1
   1a512:	b03c      	add	sp, #240	; 0xf0
   1a514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a518:	00025ac0 	.word	0x00025ac0
   1a51c:	10002bac 	.word	0x10002bac

0001a520 <uECC_valid_public_key>:

    vli_nativeToBytes(public_key, point.x);
    vli_nativeToBytes(public_key + uECC_BYTES, point.y);
}

int uECC_valid_public_key(const uint8_t public_key[uECC_BYTES*2]) {
   1a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a524:	6887      	ldr	r7, [r0, #8]
   1a526:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
   1a52a:	69c1      	ldr	r1, [r0, #28]
   1a52c:	6984      	ldr	r4, [r0, #24]
   1a52e:	6945      	ldr	r5, [r0, #20]
   1a530:	6903      	ldr	r3, [r0, #16]
   1a532:	68c6      	ldr	r6, [r0, #12]
   1a534:	6842      	ldr	r2, [r0, #4]
   1a536:	f8d0 c000 	ldr.w	ip, [r0]
   1a53a:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
   1a53e:	f8d0 9038 	ldr.w	r9, [r0, #56]	; 0x38
   1a542:	f8d0 a02c 	ldr.w	sl, [r0, #44]	; 0x2c
   1a546:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
   1a54a:	b0bd      	sub	sp, #244	; 0xf4
        native[i] = ((uint32_t)digit[0] << 24) | ((uint32_t)digit[1] << 16) |
   1a54c:	ba3f      	rev	r7, r7
   1a54e:	9701      	str	r7, [sp, #4]
   1a550:	9721      	str	r7, [sp, #132]	; 0x84
   1a552:	fa98 f788 	rev.w	r7, r8
   1a556:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
   1a55a:	9702      	str	r7, [sp, #8]
   1a55c:	fa9a fa8a 	rev.w	sl, sl
   1a560:	ba09      	rev	r1, r1
   1a562:	ba24      	rev	r4, r4
   1a564:	ba2d      	rev	r5, r5
   1a566:	ba1b      	rev	r3, r3
   1a568:	ba36      	rev	r6, r6
   1a56a:	ba12      	rev	r2, r2
   1a56c:	fa9c fc8c 	rev.w	ip, ip
   1a570:	fa9e fe8e 	rev.w	lr, lr
   1a574:	fa99 f989 	rev.w	r9, r9
   1a578:	fa98 f888 	rev.w	r8, r8
   1a57c:	fa9b fb8b 	rev.w	fp, fp
   1a580:	e9cd 141c 	strd	r1, r4, [sp, #112]	; 0x70
   1a584:	e9cd 531e 	strd	r5, r3, [sp, #120]	; 0x78
   1a588:	9620      	str	r6, [sp, #128]	; 0x80
   1a58a:	9222      	str	r2, [sp, #136]	; 0x88
   1a58c:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
   1a590:	f8cd e090 	str.w	lr, [sp, #144]	; 0x90
   1a594:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   1a598:	9726      	str	r7, [sp, #152]	; 0x98
   1a59a:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
   1a59e:	f8cd a00c 	str.w	sl, [sp, #12]
   1a5a2:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
   1a5a6:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
   1a5aa:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
   1a5ae:	6a00      	ldr	r0, [r0, #32]
   1a5b0:	fa9a fa8a 	rev.w	sl, sl
   1a5b4:	ba00      	rev	r0, r0
   1a5b6:	e9cd a02a 	strd	sl, r0, [sp, #168]	; 0xa8
        if (vli[i]) {
   1a5ba:	bb19      	cbnz	r1, 1a604 <uECC_valid_public_key+0xe4>
   1a5bc:	bb14      	cbnz	r4, 1a604 <uECC_valid_public_key+0xe4>
   1a5be:	bb0d      	cbnz	r5, 1a604 <uECC_valid_public_key+0xe4>
   1a5c0:	bb03      	cbnz	r3, 1a604 <uECC_valid_public_key+0xe4>
   1a5c2:	b9fe      	cbnz	r6, 1a604 <uECC_valid_public_key+0xe4>
   1a5c4:	9f01      	ldr	r7, [sp, #4]
   1a5c6:	b9ef      	cbnz	r7, 1a604 <uECC_valid_public_key+0xe4>
   1a5c8:	2a00      	cmp	r2, #0
   1a5ca:	f040 80c6 	bne.w	1a75a <uECC_valid_public_key+0x23a>
   1a5ce:	f1bc 0f00 	cmp.w	ip, #0
   1a5d2:	d12d      	bne.n	1a630 <uECC_valid_public_key+0x110>
   1a5d4:	f1be 0f00 	cmp.w	lr, #0
   1a5d8:	d12a      	bne.n	1a630 <uECC_valid_public_key+0x110>
   1a5da:	f1b9 0f00 	cmp.w	r9, #0
   1a5de:	d127      	bne.n	1a630 <uECC_valid_public_key+0x110>
   1a5e0:	9f02      	ldr	r7, [sp, #8]
   1a5e2:	bb2f      	cbnz	r7, 1a630 <uECC_valid_public_key+0x110>
   1a5e4:	f1b8 0f00 	cmp.w	r8, #0
   1a5e8:	d122      	bne.n	1a630 <uECC_valid_public_key+0x110>
   1a5ea:	9f03      	ldr	r7, [sp, #12]
   1a5ec:	bb07      	cbnz	r7, 1a630 <uECC_valid_public_key+0x110>
   1a5ee:	f1bb 0f00 	cmp.w	fp, #0
   1a5f2:	d11d      	bne.n	1a630 <uECC_valid_public_key+0x110>
   1a5f4:	f1ba 0f00 	cmp.w	sl, #0
   1a5f8:	d137      	bne.n	1a66a <uECC_valid_public_key+0x14a>
   1a5fa:	2800      	cmp	r0, #0
   1a5fc:	d137      	bne.n	1a66e <uECC_valid_public_key+0x14e>
    vli_modSquare_fast(tmp1, public.y); /* tmp1 = y^2 */
    curve_x_side(tmp2, public.x); /* tmp2 = x^3 + ax + b */

    /* Make sure that y^2 == x^3 + ax + b */
    return (vli_cmp(tmp1, tmp2) == 0);
}
   1a5fe:	b03d      	add	sp, #244	; 0xf4
   1a600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   1a604:	f1bc 3fff 	cmp.w	ip, #4294967295
   1a608:	d112      	bne.n	1a630 <uECC_valid_public_key+0x110>
   1a60a:	b18a      	cbz	r2, 1a630 <uECC_valid_public_key+0x110>
        } else if (left[i] < right[i]) {
   1a60c:	2a01      	cmp	r2, #1
   1a60e:	d828      	bhi.n	1a662 <uECC_valid_public_key+0x142>
   1a610:	9a01      	ldr	r2, [sp, #4]
   1a612:	bb32      	cbnz	r2, 1a662 <uECC_valid_public_key+0x142>
   1a614:	2e00      	cmp	r6, #0
   1a616:	f040 80af 	bne.w	1a778 <uECC_valid_public_key+0x258>
   1a61a:	bb13      	cbnz	r3, 1a662 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   1a61c:	3501      	adds	r5, #1
   1a61e:	d107      	bne.n	1a630 <uECC_valid_public_key+0x110>
   1a620:	3401      	adds	r4, #1
   1a622:	d105      	bne.n	1a630 <uECC_valid_public_key+0x110>
   1a624:	3101      	adds	r1, #1
   1a626:	d103      	bne.n	1a630 <uECC_valid_public_key+0x110>
   1a628:	4618      	mov	r0, r3
}
   1a62a:	b03d      	add	sp, #244	; 0xf4
   1a62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   1a630:	3001      	adds	r0, #1
   1a632:	d11c      	bne.n	1a66e <uECC_valid_public_key+0x14e>
   1a634:	f1ba 0f00 	cmp.w	sl, #0
   1a638:	d019      	beq.n	1a66e <uECC_valid_public_key+0x14e>
        } else if (left[i] < right[i]) {
   1a63a:	f1ba 0f01 	cmp.w	sl, #1
   1a63e:	d110      	bne.n	1a662 <uECC_valid_public_key+0x142>
   1a640:	f1bb 0f00 	cmp.w	fp, #0
   1a644:	d10d      	bne.n	1a662 <uECC_valid_public_key+0x142>
   1a646:	9b03      	ldr	r3, [sp, #12]
   1a648:	b95b      	cbnz	r3, 1a662 <uECC_valid_public_key+0x142>
   1a64a:	f1b8 0f00 	cmp.w	r8, #0
   1a64e:	d1eb      	bne.n	1a628 <uECC_valid_public_key+0x108>
        if (left[i] > right[i]) {
   1a650:	9b02      	ldr	r3, [sp, #8]
   1a652:	3301      	adds	r3, #1
   1a654:	d10b      	bne.n	1a66e <uECC_valid_public_key+0x14e>
   1a656:	f1b9 3fff 	cmp.w	r9, #4294967295
   1a65a:	d108      	bne.n	1a66e <uECC_valid_public_key+0x14e>
   1a65c:	f1be 3fff 	cmp.w	lr, #4294967295
   1a660:	d105      	bne.n	1a66e <uECC_valid_public_key+0x14e>
        return 0;
   1a662:	2000      	movs	r0, #0
}
   1a664:	b03d      	add	sp, #244	; 0xf4
   1a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (left[i] > right[i]) {
   1a66a:	3001      	adds	r0, #1
   1a66c:	d0e5      	beq.n	1a63a <uECC_valid_public_key+0x11a>
    vli_square(product, left);
   1a66e:	a82c      	add	r0, sp, #176	; 0xb0
   1a670:	a924      	add	r1, sp, #144	; 0x90
   1a672:	f7fe fa2d 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   1a676:	a92c      	add	r1, sp, #176	; 0xb0
   1a678:	a804      	add	r0, sp, #16
   1a67a:	f7fe fbe5 	bl	18e48 <vli_mmod_fast>
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   1a67e:	2300      	movs	r3, #0
   1a680:	2203      	movs	r2, #3
    vli_square(product, left);
   1a682:	a91c      	add	r1, sp, #112	; 0x70
   1a684:	a82c      	add	r0, sp, #176	; 0xb0
    uECC_word_t _3[uECC_WORDS] = {3}; /* -a = 3 */
   1a686:	9214      	str	r2, [sp, #80]	; 0x50
   1a688:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   1a68c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
   1a690:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   1a694:	931b      	str	r3, [sp, #108]	; 0x6c
    vli_square(product, left);
   1a696:	f7fe fa1b 	bl	18ad0 <vli_square>
    vli_mmod_fast(result, product);
   1a69a:	a92c      	add	r1, sp, #176	; 0xb0
   1a69c:	a80c      	add	r0, sp, #48	; 0x30
   1a69e:	f7fe fbd3 	bl	18e48 <vli_mmod_fast>
    uECC_word_t l_borrow = vli_sub(result, left, right);
   1a6a2:	a90c      	add	r1, sp, #48	; 0x30
   1a6a4:	aa14      	add	r2, sp, #80	; 0x50
   1a6a6:	4608      	mov	r0, r1
   1a6a8:	f7fd feee 	bl	18488 <vli_sub>
    if (l_borrow) {
   1a6ac:	2800      	cmp	r0, #0
   1a6ae:	d15d      	bne.n	1a76c <uECC_valid_public_key+0x24c>
    vli_mult(product, left, right);
   1a6b0:	aa1c      	add	r2, sp, #112	; 0x70
   1a6b2:	a90c      	add	r1, sp, #48	; 0x30
   1a6b4:	a82c      	add	r0, sp, #176	; 0xb0
   1a6b6:	f7fd ff2f 	bl	18518 <vli_mult>
    vli_mmod_fast(result, product);
   1a6ba:	a92c      	add	r1, sp, #176	; 0xb0
   1a6bc:	a80c      	add	r0, sp, #48	; 0x30
   1a6be:	f7fe fbc3 	bl	18e48 <vli_mmod_fast>
    uECC_word_t carry = vli_add(result, left, right);
   1a6c2:	a90c      	add	r1, sp, #48	; 0x30
   1a6c4:	4a2d      	ldr	r2, [pc, #180]	; (1a77c <uECC_valid_public_key+0x25c>)
   1a6c6:	4608      	mov	r0, r1
   1a6c8:	f7fd fe9e 	bl	18408 <vli_add>
    if (carry || vli_cmp(result, mod) >= 0) {
   1a6cc:	b9a8      	cbnz	r0, 1a6fa <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   1a6ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a6d0:	1c5a      	adds	r2, r3, #1
   1a6d2:	d118      	bne.n	1a706 <uECC_valid_public_key+0x1e6>
        if (left[i] > right[i]) {
   1a6d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1a6d6:	2a01      	cmp	r2, #1
   1a6d8:	d80f      	bhi.n	1a6fa <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   1a6da:	b1a2      	cbz	r2, 1a706 <uECC_valid_public_key+0x1e6>
        if (left[i] > right[i]) {
   1a6dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a6de:	b962      	cbnz	r2, 1a6fa <uECC_valid_public_key+0x1da>
   1a6e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a6e2:	b952      	cbnz	r2, 1a6fa <uECC_valid_public_key+0x1da>
   1a6e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a6e6:	b942      	cbnz	r2, 1a6fa <uECC_valid_public_key+0x1da>
        } else if (left[i] < right[i]) {
   1a6e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a6ea:	3201      	adds	r2, #1
   1a6ec:	d10b      	bne.n	1a706 <uECC_valid_public_key+0x1e6>
   1a6ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a6f0:	3201      	adds	r2, #1
   1a6f2:	d108      	bne.n	1a706 <uECC_valid_public_key+0x1e6>
   1a6f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a6f6:	3201      	adds	r2, #1
   1a6f8:	d105      	bne.n	1a706 <uECC_valid_public_key+0x1e6>
        vli_sub(result, result, mod);
   1a6fa:	a90c      	add	r1, sp, #48	; 0x30
   1a6fc:	4a20      	ldr	r2, [pc, #128]	; (1a780 <uECC_valid_public_key+0x260>)
   1a6fe:	4608      	mov	r0, r1
   1a700:	f7fd fec2 	bl	18488 <vli_sub>
   1a704:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        if (left[i] > right[i]) {
   1a706:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a708:	429a      	cmp	r2, r3
   1a70a:	d8aa      	bhi.n	1a662 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   1a70c:	d3a9      	bcc.n	1a662 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   1a70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a710:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1a712:	429a      	cmp	r2, r3
   1a714:	d3a5      	bcc.n	1a662 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   1a716:	d8a4      	bhi.n	1a662 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   1a718:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a71a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1a71c:	429a      	cmp	r2, r3
   1a71e:	d3a0      	bcc.n	1a662 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   1a720:	d89f      	bhi.n	1a662 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   1a722:	9b08      	ldr	r3, [sp, #32]
   1a724:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a726:	429a      	cmp	r2, r3
   1a728:	d39b      	bcc.n	1a662 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   1a72a:	d89a      	bhi.n	1a662 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   1a72c:	9b07      	ldr	r3, [sp, #28]
   1a72e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a730:	429a      	cmp	r2, r3
   1a732:	d396      	bcc.n	1a662 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   1a734:	d895      	bhi.n	1a662 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   1a736:	9b06      	ldr	r3, [sp, #24]
   1a738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a73a:	429a      	cmp	r2, r3
   1a73c:	d391      	bcc.n	1a662 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   1a73e:	d890      	bhi.n	1a662 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   1a740:	9b05      	ldr	r3, [sp, #20]
   1a742:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a744:	429a      	cmp	r2, r3
   1a746:	d38c      	bcc.n	1a662 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   1a748:	d88b      	bhi.n	1a662 <uECC_valid_public_key+0x142>
        if (left[i] > right[i]) {
   1a74a:	9a04      	ldr	r2, [sp, #16]
   1a74c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a74e:	429a      	cmp	r2, r3
   1a750:	d887      	bhi.n	1a662 <uECC_valid_public_key+0x142>
        } else if (left[i] < right[i]) {
   1a752:	bf2c      	ite	cs
   1a754:	2001      	movcs	r0, #1
   1a756:	2000      	movcc	r0, #0
   1a758:	e751      	b.n	1a5fe <uECC_valid_public_key+0xde>
        if (left[i] > right[i]) {
   1a75a:	f1bc 3fff 	cmp.w	ip, #4294967295
   1a75e:	f47f af67 	bne.w	1a630 <uECC_valid_public_key+0x110>
        } else if (left[i] < right[i]) {
   1a762:	2a01      	cmp	r2, #1
   1a764:	f67f af64 	bls.w	1a630 <uECC_valid_public_key+0x110>
   1a768:	4638      	mov	r0, r7
   1a76a:	e748      	b.n	1a5fe <uECC_valid_public_key+0xde>
        vli_add(result, result, mod);
   1a76c:	a90c      	add	r1, sp, #48	; 0x30
   1a76e:	4a04      	ldr	r2, [pc, #16]	; (1a780 <uECC_valid_public_key+0x260>)
   1a770:	4608      	mov	r0, r1
   1a772:	f7fd fe49 	bl	18408 <vli_add>
   1a776:	e79b      	b.n	1a6b0 <uECC_valid_public_key+0x190>
   1a778:	4610      	mov	r0, r2
   1a77a:	e740      	b.n	1a5fe <uECC_valid_public_key+0xde>
   1a77c:	00025aa0 	.word	0x00025aa0
   1a780:	00025ae0 	.word	0x00025ae0

0001a784 <showScanResults>:
    }
    return false;
}

static void showScanResults(void)
{
   1a784:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a786:	b087      	sub	sp, #28
    appDevInfo_t *devInfo;
    uint8_t num = AppScanGetNumResults();
   1a788:	f006 fb12 	bl	20db0 <AppScanGetNumResults>
   1a78c:	4605      	mov	r5, r0

    am_menu_printf("--------------------Scan Results--------------------\r\n");
   1a78e:	4816      	ldr	r0, [pc, #88]	; (1a7e8 <showScanResults+0x64>)
   1a790:	f7f5 f816 	bl	f7c0 <am_menu_printf>
    for (int i = 0; i < num; i++)
   1a794:	b315      	cbz	r5, 1a7dc <showScanResults+0x58>
    {
        devInfo = AppScanGetResult(i);
        if (devInfo)
        {
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a796:	4e15      	ldr	r6, [pc, #84]	; (1a7ec <showScanResults+0x68>)
    for (int i = 0; i < num; i++)
   1a798:	2400      	movs	r4, #0
        devInfo = AppScanGetResult(i);
   1a79a:	b2e0      	uxtb	r0, r4
   1a79c:	f006 faf6 	bl	20d8c <AppScanGetResult>
   1a7a0:	4684      	mov	ip, r0
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a7a2:	4621      	mov	r1, r4
   1a7a4:	4630      	mov	r0, r6
    for (int i = 0; i < num; i++)
   1a7a6:	3401      	adds	r4, #1
        if (devInfo)
   1a7a8:	f1bc 0f00 	cmp.w	ip, #0
   1a7ac:	d014      	beq.n	1a7d8 <showScanResults+0x54>
            am_menu_printf("%d : %d %02x%02x%02x%02x%02x%02x \r\n", i, devInfo->addrType,
   1a7ae:	f89c 7005 	ldrb.w	r7, [ip, #5]
   1a7b2:	f89c 3000 	ldrb.w	r3, [ip]
   1a7b6:	f89c 2006 	ldrb.w	r2, [ip, #6]
   1a7ba:	9704      	str	r7, [sp, #16]
   1a7bc:	f89c 7004 	ldrb.w	r7, [ip, #4]
   1a7c0:	9703      	str	r7, [sp, #12]
   1a7c2:	f89c 7003 	ldrb.w	r7, [ip, #3]
   1a7c6:	9702      	str	r7, [sp, #8]
   1a7c8:	f89c 7002 	ldrb.w	r7, [ip, #2]
   1a7cc:	9701      	str	r7, [sp, #4]
   1a7ce:	f89c 7001 	ldrb.w	r7, [ip, #1]
   1a7d2:	9700      	str	r7, [sp, #0]
   1a7d4:	f7f4 fff4 	bl	f7c0 <am_menu_printf>
    for (int i = 0; i < num; i++)
   1a7d8:	42ac      	cmp	r4, r5
   1a7da:	d1de      	bne.n	1a79a <showScanResults+0x16>
            devInfo->addr[0], devInfo->addr[1], devInfo->addr[2], devInfo->addr[3], devInfo->addr[4], devInfo->addr[5]);
        }
    }
    am_menu_printf("-----------------------------------------------------\r\n");
   1a7dc:	4804      	ldr	r0, [pc, #16]	; (1a7f0 <showScanResults+0x6c>)
}
   1a7de:	b007      	add	sp, #28
   1a7e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    am_menu_printf("-----------------------------------------------------\r\n");
   1a7e4:	f7f4 bfec 	b.w	f7c0 <am_menu_printf>
   1a7e8:	00025b00 	.word	0x00025b00
   1a7ec:	00025b38 	.word	0x00025b38
   1a7f0:	00025b5c 	.word	0x00025b5c

0001a7f4 <BleMenuShowMenu>:
    }
}

static void
BleMenuShowMenu(void)
{
   1a7f4:	b570      	push	{r4, r5, r6, lr}
    switch (bleMenuCb.menuId)
   1a7f6:	4b20      	ldr	r3, [pc, #128]	; (1a878 <BleMenuShowMenu+0x84>)
   1a7f8:	785b      	ldrb	r3, [r3, #1]
   1a7fa:	2b03      	cmp	r3, #3
   1a7fc:	d80e      	bhi.n	1a81c <BleMenuShowMenu+0x28>
   1a7fe:	e8df f003 	tbb	[pc, r3]
   1a802:	1824      	.short	0x1824
   1a804:	020e      	.short	0x020e
   1a806:	4c1d      	ldr	r4, [pc, #116]	; (1a87c <BleMenuShowMenu+0x88>)
        am_menu_printf("%s\r\n", amdtpMenuContent[i]);
   1a808:	4e1d      	ldr	r6, [pc, #116]	; (1a880 <BleMenuShowMenu+0x8c>)
   1a80a:	f504 75a0 	add.w	r5, r4, #320	; 0x140
   1a80e:	4621      	mov	r1, r4
   1a810:	4630      	mov	r0, r6
    for (int i = 0; i < AMDTP_MENU_ID_MAX; i++)
   1a812:	3440      	adds	r4, #64	; 0x40
        am_menu_printf("%s\r\n", amdtpMenuContent[i]);
   1a814:	f7f4 ffd4 	bl	f7c0 <am_menu_printf>
    for (int i = 0; i < AMDTP_MENU_ID_MAX; i++)
   1a818:	42a5      	cmp	r5, r4
   1a81a:	d1f8      	bne.n	1a80e <BleMenuShowMenu+0x1a>
            BLEMenuShowAMDTPMenu();
            break;
        default:
            break;
    }
}
   1a81c:	bd70      	pop	{r4, r5, r6, pc}
        am_menu_printf("%s\r\n", gattMenuContent[i]);
   1a81e:	4919      	ldr	r1, [pc, #100]	; (1a884 <BleMenuShowMenu+0x90>)
   1a820:	4817      	ldr	r0, [pc, #92]	; (1a880 <BleMenuShowMenu+0x8c>)
   1a822:	f7f4 ffcd 	bl	f7c0 <am_menu_printf>
}
   1a826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        am_menu_printf("%s\r\n", gattMenuContent[i]);
   1a82a:	4917      	ldr	r1, [pc, #92]	; (1a888 <BleMenuShowMenu+0x94>)
   1a82c:	4814      	ldr	r0, [pc, #80]	; (1a880 <BleMenuShowMenu+0x8c>)
   1a82e:	f7f4 bfc7 	b.w	f7c0 <am_menu_printf>
   1a832:	4c16      	ldr	r4, [pc, #88]	; (1a88c <BleMenuShowMenu+0x98>)
        am_menu_printf("%s\r\n", gapMenuContent[i]);
   1a834:	4e12      	ldr	r6, [pc, #72]	; (1a880 <BleMenuShowMenu+0x8c>)
   1a836:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   1a83a:	4621      	mov	r1, r4
   1a83c:	4630      	mov	r0, r6
    for (int i = 0; i < GAP_MENU_ID_MAX; i++)
   1a83e:	3420      	adds	r4, #32
        am_menu_printf("%s\r\n", gapMenuContent[i]);
   1a840:	f7f4 ffbe 	bl	f7c0 <am_menu_printf>
    for (int i = 0; i < GAP_MENU_ID_MAX; i++)
   1a844:	42a5      	cmp	r5, r4
   1a846:	d1f8      	bne.n	1a83a <BleMenuShowMenu+0x46>
}
   1a848:	bd70      	pop	{r4, r5, r6, pc}
    am_menu_printf("--------------------BLE main menu--------------------\r\n");
   1a84a:	4811      	ldr	r0, [pc, #68]	; (1a890 <BleMenuShowMenu+0x9c>)
   1a84c:	4c11      	ldr	r4, [pc, #68]	; (1a894 <BleMenuShowMenu+0xa0>)
        am_menu_printf("%s\r\n", mainMenuContent[i]);
   1a84e:	4e0c      	ldr	r6, [pc, #48]	; (1a880 <BleMenuShowMenu+0x8c>)
    am_menu_printf("--------------------BLE main menu--------------------\r\n");
   1a850:	f7f4 ffb6 	bl	f7c0 <am_menu_printf>
    for (int i = 0; i < BLE_MENU_ID_MAX; i++)
   1a854:	f104 0580 	add.w	r5, r4, #128	; 0x80
        am_menu_printf("%s\r\n", mainMenuContent[i]);
   1a858:	4621      	mov	r1, r4
   1a85a:	4630      	mov	r0, r6
    for (int i = 0; i < BLE_MENU_ID_MAX; i++)
   1a85c:	3420      	adds	r4, #32
        am_menu_printf("%s\r\n", mainMenuContent[i]);
   1a85e:	f7f4 ffaf 	bl	f7c0 <am_menu_printf>
    for (int i = 0; i < BLE_MENU_ID_MAX; i++)
   1a862:	42ac      	cmp	r4, r5
   1a864:	d1f8      	bne.n	1a858 <BleMenuShowMenu+0x64>
    am_menu_printf("hint: use 'h' to do main menu\r\n");
   1a866:	480c      	ldr	r0, [pc, #48]	; (1a898 <BleMenuShowMenu+0xa4>)
   1a868:	f7f4 ffaa 	bl	f7c0 <am_menu_printf>
}
   1a86c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    am_menu_printf("-----------------------------------------------------\r\n");
   1a870:	480a      	ldr	r0, [pc, #40]	; (1a89c <BleMenuShowMenu+0xa8>)
   1a872:	f7f4 bfa5 	b.w	f7c0 <am_menu_printf>
   1a876:	bf00      	nop
   1a878:	10006edc 	.word	0x10006edc
   1a87c:	10002bb0 	.word	0x10002bb0
   1a880:	00025b94 	.word	0x00025b94
   1a884:	10002d90 	.word	0x10002d90
   1a888:	10002db0 	.word	0x10002db0
   1a88c:	10002cf0 	.word	0x10002cf0
   1a890:	00025b9c 	.word	0x00025b9c
   1a894:	10002dd0 	.word	0x10002dd0
   1a898:	00025bd4 	.word	0x00025bd4
   1a89c:	00025b5c 	.word	0x00025b5c

0001a8a0 <BleMenuRx>:
{
   1a8a0:	b570      	push	{r4, r5, r6, lr}
    if (menuRxDataLen == 0)
   1a8a2:	4d3d      	ldr	r5, [pc, #244]	; (1a998 <BleMenuRx+0xf8>)
   1a8a4:	682b      	ldr	r3, [r5, #0]
   1a8a6:	b903      	cbnz	r3, 1a8aa <BleMenuRx+0xa>
}
   1a8a8:	bd70      	pop	{r4, r5, r6, pc}
    menuRxData[menuRxDataLen] = '\0';
   1a8aa:	4c3c      	ldr	r4, [pc, #240]	; (1a99c <BleMenuRx+0xfc>)
    am_util_debug_printf("BleMenuRx data = %s\n", menuRxData);
   1a8ac:	483c      	ldr	r0, [pc, #240]	; (1a9a0 <BleMenuRx+0x100>)
    menuRxData[menuRxDataLen] = '\0';
   1a8ae:	2600      	movs	r6, #0
    am_util_debug_printf("BleMenuRx data = %s\n", menuRxData);
   1a8b0:	4621      	mov	r1, r4
    menuRxData[menuRxDataLen] = '\0';
   1a8b2:	54e6      	strb	r6, [r4, r3]
    am_util_debug_printf("BleMenuRx data = %s\n", menuRxData);
   1a8b4:	f005 fba2 	bl	1fffc <am_util_stdio_printf>
    if (menuRxData[0] == 'h')
   1a8b8:	7823      	ldrb	r3, [r4, #0]
   1a8ba:	2b68      	cmp	r3, #104	; 0x68
   1a8bc:	d007      	beq.n	1a8ce <BleMenuRx+0x2e>
    switch (bleMenuCb.menuId)
   1a8be:	4e39      	ldr	r6, [pc, #228]	; (1a9a4 <BleMenuRx+0x104>)
   1a8c0:	7872      	ldrb	r2, [r6, #1]
   1a8c2:	2a03      	cmp	r2, #3
   1a8c4:	d863      	bhi.n	1a98e <BleMenuRx+0xee>
   1a8c6:	e8df f002 	tbb	[pc, r2]
   1a8ca:	1823      	.short	0x1823
   1a8cc:	0f07      	.short	0x0f07
        bleMenuCb.prevMenuId = BLE_MENU_ID_MAIN;
   1a8ce:	4b35      	ldr	r3, [pc, #212]	; (1a9a4 <BleMenuRx+0x104>)
   1a8d0:	801e      	strh	r6, [r3, #0]
        bleMenuCb.gapMenuSelected = GAP_MENU_ID_NONE;
   1a8d2:	709e      	strb	r6, [r3, #2]
        BleMenuShowMenu();
   1a8d4:	f7ff ff8e 	bl	1a7f4 <BleMenuShowMenu>
    memset(menuRxData, 0, sizeof(menuRxData));
   1a8d8:	2300      	movs	r3, #0
   1a8da:	e9c4 3300 	strd	r3, r3, [r4]
   1a8de:	e9c4 3302 	strd	r3, r3, [r4, #8]
   1a8e2:	6123      	str	r3, [r4, #16]
    menuRxDataLen = 0;
   1a8e4:	602b      	str	r3, [r5, #0]
}
   1a8e6:	bd70      	pop	{r4, r5, r6, pc}
    id = (eAmdtpMenuId)(menuRxData[0] - '0');
   1a8e8:	3b30      	subs	r3, #48	; 0x30
    switch (id)
   1a8ea:	b2db      	uxtb	r3, r3
   1a8ec:	3b01      	subs	r3, #1
   1a8ee:	2b03      	cmp	r3, #3
   1a8f0:	d8f2      	bhi.n	1a8d8 <BleMenuRx+0x38>
   1a8f2:	e8df f003 	tbb	[pc, r3]
   1a8f6:	252b      	.short	0x252b
   1a8f8:	191f      	.short	0x191f
    if (bleMenuCb.gapMenuSelected == GAP_MENU_ID_NONE)
   1a8fa:	78b2      	ldrb	r2, [r6, #2]
   1a8fc:	b96a      	cbnz	r2, 1a91a <BleMenuRx+0x7a>
        id = (eGapMenuId)(menuRxData[0] - '0');
   1a8fe:	3b30      	subs	r3, #48	; 0x30
    switch (id)
   1a900:	b2db      	uxtb	r3, r3
   1a902:	3b01      	subs	r3, #1
   1a904:	2b03      	cmp	r3, #3
   1a906:	d8e7      	bhi.n	1a8d8 <BleMenuRx+0x38>
   1a908:	e8df f003 	tbb	[pc, r3]
   1a90c:	3926292c 	.word	0x3926292c
            bleMenuCb.menuId = (eBleMenuId)(menuRxData[0] - '0');
   1a910:	3b30      	subs	r3, #48	; 0x30
   1a912:	7073      	strb	r3, [r6, #1]
            BleMenuShowMenu();
   1a914:	f7ff ff6e 	bl	1a7f4 <BleMenuShowMenu>
            break;
   1a918:	e7de      	b.n	1a8d8 <BleMenuRx+0x38>
    switch (id)
   1a91a:	3a01      	subs	r2, #1
   1a91c:	2a03      	cmp	r2, #3
   1a91e:	d8db      	bhi.n	1a8d8 <BleMenuRx+0x38>
   1a920:	e8df f002 	tbb	[pc, r2]
   1a924:	261a1d20 	.word	0x261a1d20
            am_menu_printf("request server to stop\r\n");
   1a928:	481f      	ldr	r0, [pc, #124]	; (1a9a8 <BleMenuRx+0x108>)
   1a92a:	f7f4 ff49 	bl	f7c0 <am_menu_printf>
            AmdtpcRequestServerSendStop();
   1a92e:	f7f4 fcc1 	bl	f2b4 <AmdtpcRequestServerSendStop>
            break;
   1a932:	e7d1      	b.n	1a8d8 <BleMenuRx+0x38>
            am_menu_printf("request server to send\r\n");
   1a934:	481d      	ldr	r0, [pc, #116]	; (1a9ac <BleMenuRx+0x10c>)
   1a936:	f7f4 ff43 	bl	f7c0 <am_menu_printf>
            AmdtpcRequestServerSend();
   1a93a:	f7f4 fc9f 	bl	f27c <AmdtpcRequestServerSend>
            break;
   1a93e:	e7cb      	b.n	1a8d8 <BleMenuRx+0x38>
            am_menu_printf("send data to server stop\r\n");
   1a940:	481b      	ldr	r0, [pc, #108]	; (1a9b0 <BleMenuRx+0x110>)
   1a942:	f7f4 ff3d 	bl	f7c0 <am_menu_printf>
            AmdtpcSendTestDataStop();
   1a946:	f7f4 fc93 	bl	f270 <AmdtpcSendTestDataStop>
            break;
   1a94a:	e7c5      	b.n	1a8d8 <BleMenuRx+0x38>
            am_menu_printf("send data to server\r\n");
   1a94c:	4819      	ldr	r0, [pc, #100]	; (1a9b4 <BleMenuRx+0x114>)
   1a94e:	f7f4 ff37 	bl	f7c0 <am_menu_printf>
            AmdtpcSendTestData();
   1a952:	f7f4 fb83 	bl	f05c <AmdtpcSendTestData>
            break;
   1a956:	e7bf      	b.n	1a8d8 <BleMenuRx+0x38>
            showScanResults();
   1a958:	f7ff ff14 	bl	1a784 <showScanResults>
            break;
   1a95c:	e7bc      	b.n	1a8d8 <BleMenuRx+0x38>
            AmdtpcScanStop();
   1a95e:	f7f4 fc73 	bl	f248 <AmdtpcScanStop>
            break;
   1a962:	e7b9      	b.n	1a8d8 <BleMenuRx+0x38>
            am_menu_printf("scan start\r\n");
   1a964:	4814      	ldr	r0, [pc, #80]	; (1a9b8 <BleMenuRx+0x118>)
   1a966:	f7f4 ff2b 	bl	f7c0 <am_menu_printf>
            AmdtpcScanStart();
   1a96a:	f7f4 fc67 	bl	f23c <AmdtpcScanStart>
            break;
   1a96e:	e7b3      	b.n	1a8d8 <BleMenuRx+0x38>
                uint8_t idx = menuRxData[0] - '0';
   1a970:	3b30      	subs	r3, #48	; 0x30
                bleMenuCb.gapMenuSelected = GAP_MENU_ID_NONE;
   1a972:	2200      	movs	r2, #0
                AmdtpcConnOpen(idx);
   1a974:	b2d8      	uxtb	r0, r3
                bleMenuCb.gapMenuSelected = GAP_MENU_ID_NONE;
   1a976:	70b2      	strb	r2, [r6, #2]
                AmdtpcConnOpen(idx);
   1a978:	f7f4 fc68 	bl	f24c <AmdtpcConnOpen>
   1a97c:	e7ac      	b.n	1a8d8 <BleMenuRx+0x38>
                am_menu_printf("choose an idx from scan results to connect:\r\n");
   1a97e:	480f      	ldr	r0, [pc, #60]	; (1a9bc <BleMenuRx+0x11c>)
   1a980:	f7f4 ff1e 	bl	f7c0 <am_menu_printf>
                showScanResults();
   1a984:	f7ff fefe 	bl	1a784 <showScanResults>
                bleMenuCb.gapMenuSelected = GAP_MENU_ID_CONNECT;
   1a988:	2304      	movs	r3, #4
   1a98a:	70b3      	strb	r3, [r6, #2]
   1a98c:	e7a4      	b.n	1a8d8 <BleMenuRx+0x38>
            am_util_debug_printf("handleSelection() unknown input\n");
   1a98e:	480c      	ldr	r0, [pc, #48]	; (1a9c0 <BleMenuRx+0x120>)
   1a990:	f005 fb34 	bl	1fffc <am_util_stdio_printf>
            break;
   1a994:	e7a0      	b.n	1a8d8 <BleMenuRx+0x38>
   1a996:	bf00      	nop
   1a998:	10006ef4 	.word	0x10006ef4
   1a99c:	10006ee0 	.word	0x10006ee0
   1a9a0:	00025bf4 	.word	0x00025bf4
   1a9a4:	10006edc 	.word	0x10006edc
   1a9a8:	00025c9c 	.word	0x00025c9c
   1a9ac:	00025c80 	.word	0x00025c80
   1a9b0:	00025c64 	.word	0x00025c64
   1a9b4:	00025c4c 	.word	0x00025c4c
   1a9b8:	00025c0c 	.word	0x00025c0c
   1a9bc:	00025c1c 	.word	0x00025c1c
   1a9c0:	00025cb8 	.word	0x00025cb8

0001a9c4 <BleMenuInit>:

void
BleMenuInit(void)
{
    bleMenuCb.prevMenuId = BLE_MENU_ID_MAIN;
   1a9c4:	4b0c      	ldr	r3, [pc, #48]	; (1a9f8 <BleMenuInit+0x34>)
    am_menu_printf("--------------------BLE main menu--------------------\r\n");
   1a9c6:	480d      	ldr	r0, [pc, #52]	; (1a9fc <BleMenuInit+0x38>)
    bleMenuCb.prevMenuId = BLE_MENU_ID_MAIN;
   1a9c8:	2200      	movs	r2, #0
{
   1a9ca:	b570      	push	{r4, r5, r6, lr}
    bleMenuCb.prevMenuId = BLE_MENU_ID_MAIN;
   1a9cc:	601a      	str	r2, [r3, #0]
    am_menu_printf("--------------------BLE main menu--------------------\r\n");
   1a9ce:	4c0c      	ldr	r4, [pc, #48]	; (1aa00 <BleMenuInit+0x3c>)
        am_menu_printf("%s\r\n", mainMenuContent[i]);
   1a9d0:	4e0c      	ldr	r6, [pc, #48]	; (1aa04 <BleMenuInit+0x40>)
    am_menu_printf("--------------------BLE main menu--------------------\r\n");
   1a9d2:	f7f4 fef5 	bl	f7c0 <am_menu_printf>
    for (int i = 0; i < BLE_MENU_ID_MAX; i++)
   1a9d6:	f104 0580 	add.w	r5, r4, #128	; 0x80
        am_menu_printf("%s\r\n", mainMenuContent[i]);
   1a9da:	4621      	mov	r1, r4
   1a9dc:	4630      	mov	r0, r6
    for (int i = 0; i < BLE_MENU_ID_MAX; i++)
   1a9de:	3420      	adds	r4, #32
        am_menu_printf("%s\r\n", mainMenuContent[i]);
   1a9e0:	f7f4 feee 	bl	f7c0 <am_menu_printf>
    for (int i = 0; i < BLE_MENU_ID_MAX; i++)
   1a9e4:	42ac      	cmp	r4, r5
   1a9e6:	d1f8      	bne.n	1a9da <BleMenuInit+0x16>
    am_menu_printf("hint: use 'h' to do main menu\r\n");
   1a9e8:	4807      	ldr	r0, [pc, #28]	; (1aa08 <BleMenuInit+0x44>)
   1a9ea:	f7f4 fee9 	bl	f7c0 <am_menu_printf>
    bleMenuCb.menuId = BLE_MENU_ID_MAIN;
    bleMenuCb.gapMenuSelected = GAP_MENU_ID_NONE;
    bleMenuCb.gattMenuSelected = GATT_MENU_ID_NONE;
    BleMenuShowMenu();
}
   1a9ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    am_menu_printf("-----------------------------------------------------\r\n");
   1a9f2:	4806      	ldr	r0, [pc, #24]	; (1aa0c <BleMenuInit+0x48>)
   1a9f4:	f7f4 bee4 	b.w	f7c0 <am_menu_printf>
   1a9f8:	10006edc 	.word	0x10006edc
   1a9fc:	00025b9c 	.word	0x00025b9c
   1aa00:	10002dd0 	.word	0x10002dd0
   1aa04:	00025b94 	.word	0x00025b94
   1aa08:	00025bd4 	.word	0x00025bd4
   1aa0c:	00025b5c 	.word	0x00025b5c

0001aa10 <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1aa10:	b538      	push	{r3, r4, r5, lr}
   1aa12:	4604      	mov	r4, r0
  secAes_t *pAes = (secAes_t *) &pBuf->msg;

  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   1aa14:	3010      	adds	r0, #16
{
   1aa16:	4615      	mov	r5, r2
  pAes->pCiphertext = pBuf->ciphertext;
   1aa18:	6060      	str	r0, [r4, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   1aa1a:	3105      	adds	r1, #5
   1aa1c:	f7f8 fca4 	bl	13368 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   1aa20:	4621      	mov	r1, r4
   1aa22:	4628      	mov	r0, r5
}
   1aa24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgSend(handlerId, pAes);
   1aa28:	f7fd b946 	b.w	17cb8 <WsfMsgSend>

0001aa2c <SecAes>:
{
   1aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa30:	4606      	mov	r6, r0
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   1aa32:	2038      	movs	r0, #56	; 0x38
{
   1aa34:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1aa38:	460f      	mov	r7, r1
   1aa3a:	4692      	mov	sl, r2
   1aa3c:	4699      	mov	r9, r3
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   1aa3e:	f7fd f92f 	bl	17ca0 <WsfMsgAlloc>
   1aa42:	b328      	cbz	r0, 1aa90 <SecAes+0x64>
  uint8_t token = secCb.token++;
   1aa44:	4d14      	ldr	r5, [pc, #80]	; (1aa98 <SecAes+0x6c>)
   1aa46:	f895 c038 	ldrb.w	ip, [r5, #56]	; 0x38
  if (token == SEC_TOKEN_INVALID)
   1aa4a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1aa4e:	4604      	mov	r4, r0
   1aa50:	d018      	beq.n	1aa84 <SecAes+0x58>
  uint8_t token = secCb.token++;
   1aa52:	f10c 0301 	add.w	r3, ip, #1
   1aa56:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    pBuf->type = SEC_TYPE_AES;
   1aa5a:	2300      	movs	r3, #0
    pBuf->msg.hdr.status = getNextToken();
   1aa5c:	f884 c003 	strb.w	ip, [r4, #3]
    pBuf->type = SEC_TYPE_AES;
   1aa60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   1aa64:	4622      	mov	r2, r4
   1aa66:	4651      	mov	r1, sl
   1aa68:	480c      	ldr	r0, [pc, #48]	; (1aa9c <SecAes+0x70>)
    pBuf->msg.hdr.param = param;
   1aa6a:	f8a4 9000 	strh.w	r9, [r4]
    pBuf->msg.hdr.event = event;
   1aa6e:	f884 8002 	strb.w	r8, [r4, #2]
    WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   1aa72:	f7fd f933 	bl	17cdc <WsfMsgEnq>
    HciLeEncryptCmd(pKey, pPlaintext);
   1aa76:	4630      	mov	r0, r6
   1aa78:	4639      	mov	r1, r7
   1aa7a:	f7f5 ff8b 	bl	10994 <HciLeEncryptCmd>
    return pBuf->msg.hdr.status;
   1aa7e:	78e0      	ldrb	r0, [r4, #3]
}
   1aa80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    token = secCb.token++;
   1aa84:	2301      	movs	r3, #1
   1aa86:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
   1aa8a:	f04f 0c00 	mov.w	ip, #0
   1aa8e:	e7e4      	b.n	1aa5a <SecAes+0x2e>
  return SEC_TOKEN_INVALID;
   1aa90:	20ff      	movs	r0, #255	; 0xff
}
   1aa92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aa96:	bf00      	nop
   1aa98:	10006ef8 	.word	0x10006ef8
   1aa9c:	10006f18 	.word	0x10006f18

0001aaa0 <SecAesInit>:
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   1aaa0:	4b01      	ldr	r3, [pc, #4]	; (1aaa8 <SecAesInit+0x8>)
   1aaa2:	4a02      	ldr	r2, [pc, #8]	; (1aaac <SecAesInit+0xc>)
   1aaa4:	63da      	str	r2, [r3, #60]	; 0x3c
}
   1aaa6:	4770      	bx	lr
   1aaa8:	10006ef8 	.word	0x10006ef8
   1aaac:	0001aa11 	.word	0x0001aa11

0001aab0 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   1aab0:	b5f0      	push	{r4, r5, r6, r7, lr}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1aab2:	6b04      	ldr	r4, [r0, #48]	; 0x30
  uint8_t text[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   1aab4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
   1aab6:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   1aab8:	6821      	ldr	r1, [r4, #0]
  int16_t remaining = (int16_t) pCmac->len - pCmac->position;
   1aaba:	1aed      	subs	r5, r5, r3
   1aabc:	b22d      	sxth	r5, r5
{
   1aabe:	b085      	sub	sp, #20

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   1aac0:	2d10      	cmp	r5, #16
{
   1aac2:	4606      	mov	r6, r0
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   1aac4:	4419      	add	r1, r3
  {
    memcpy(text, pMn, remaining);
   1aac6:	466f      	mov	r7, sp
  if (remaining <= SEC_BLOCK_LEN)
   1aac8:	dc1a      	bgt.n	1ab00 <secCmacProcessBlock+0x50>
    memcpy(text, pMn, remaining);
   1aaca:	462a      	mov	r2, r5
   1aacc:	4638      	mov	r0, r7
   1aace:	f7f1 fb17 	bl	c100 <memcpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   1aad2:	2d10      	cmp	r5, #16
   1aad4:	d121      	bne.n	1ab1a <secCmacProcessBlock+0x6a>
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
      text[remaining] = 0x80;
    }

    /* XOr the subkey */
    Calc128Xor(text, pCmac->subkey);
   1aad6:	f104 0114 	add.w	r1, r4, #20
   1aada:	4638      	mov	r0, r7
   1aadc:	f7f8 fc56 	bl	1338c <Calc128Xor>
  {
    /* Copy the block to the buffer */
    Calc128Cpy(text, pMn);
  }

  if (pCmac->position != 0)
   1aae0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   1aae2:	2302      	movs	r3, #2
   1aae4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  if (pCmac->position != 0)
   1aae8:	b982      	cbnz	r2, 1ab0c <secCmacProcessBlock+0x5c>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(text, pBuf->ciphertext);
  }

  pCmac->position += SEC_BLOCK_LEN;
   1aaea:	3210      	adds	r2, #16
   1aaec:	84a2      	strh	r2, [r4, #36]	; 0x24

  SecLeEncryptCmd(pCmac->key, text, pBuf, pCmac->handlerId);
   1aaee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1aaf2:	4632      	mov	r2, r6
   1aaf4:	4639      	mov	r1, r7
   1aaf6:	1d20      	adds	r0, r4, #4
   1aaf8:	f000 fa3a 	bl	1af70 <SecLeEncryptCmd>
}
   1aafc:	b005      	add	sp, #20
   1aafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Calc128Cpy(text, pMn);
   1ab00:	4638      	mov	r0, r7
   1ab02:	f7f8 fc31 	bl	13368 <Calc128Cpy>
  if (pCmac->position != 0)
   1ab06:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   1ab08:	2a00      	cmp	r2, #0
   1ab0a:	d0ee      	beq.n	1aaea <secCmacProcessBlock+0x3a>
    Calc128Xor(text, pBuf->ciphertext);
   1ab0c:	f106 0110 	add.w	r1, r6, #16
   1ab10:	4638      	mov	r0, r7
   1ab12:	f7f8 fc3b 	bl	1338c <Calc128Xor>
  pCmac->position += SEC_BLOCK_LEN;
   1ab16:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   1ab18:	e7e7      	b.n	1aaea <secCmacProcessBlock+0x3a>
      memset(text + remaining, 0, SEC_BLOCK_LEN - remaining);
   1ab1a:	f1c5 0210 	rsb	r2, r5, #16
   1ab1e:	1978      	adds	r0, r7, r5
   1ab20:	2100      	movs	r1, #0
   1ab22:	f006 fb27 	bl	21174 <memset>
      text[remaining] = 0x80;
   1ab26:	f105 0310 	add.w	r3, r5, #16
   1ab2a:	eb0d 0503 	add.w	r5, sp, r3
   1ab2e:	2380      	movs	r3, #128	; 0x80
   1ab30:	f805 3c10 	strb.w	r3, [r5, #-16]
   1ab34:	e7cf      	b.n	1aad6 <secCmacProcessBlock+0x26>
   1ab36:	bf00      	nop

0001ab38 <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   1ab3c:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1ab3e:	b089      	sub	sp, #36	; 0x24

  if (pCmac)
   1ab40:	b17c      	cbz	r4, 1ab62 <SecCmacHciCback+0x2a>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   1ab42:	f100 0610 	add.w	r6, r0, #16
   1ab46:	4605      	mov	r5, r0
   1ab48:	3105      	adds	r1, #5
   1ab4a:	4630      	mov	r0, r6
   1ab4c:	f7f8 fc0c 	bl	13368 <Calc128Cpy>

    switch (pCmac->state)
   1ab50:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1ab54:	2b01      	cmp	r3, #1
   1ab56:	f000 8100 	beq.w	1ad5a <SecCmacHciCback+0x222>
   1ab5a:	2b02      	cmp	r3, #2
   1ab5c:	f000 8103 	beq.w	1ad66 <SecCmacHciCback+0x22e>
   1ab60:	b113      	cbz	r3, 1ab68 <SecCmacHciCback+0x30>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   1ab62:	b009      	add	sp, #36	; 0x24
   1ab64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1ab68:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   1ab6a:	4631      	mov	r1, r6
   1ab6c:	f104 0014 	add.w	r0, r4, #20
   1ab70:	f7f8 fbfa 	bl	13368 <Calc128Cpy>
      overflow = pBuf[i+1] >> (8 - shift);
   1ab74:	f894 b015 	ldrb.w	fp, [r4, #21]
   1ab78:	7fe2      	ldrb	r2, [r4, #31]
  uint8_t finalOverflow = pBuf[0] >> (8 - shift);
   1ab7a:	7d23      	ldrb	r3, [r4, #20]
      overflow = pBuf[i+1] >> (8 - shift);
   1ab7c:	9206      	str	r2, [sp, #24]
   1ab7e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   1ab82:	f894 a016 	ldrb.w	sl, [r4, #22]
   1ab86:	9202      	str	r2, [sp, #8]
   1ab88:	ea4f 12eb 	mov.w	r2, fp, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ab8c:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1ab90:	f894 9017 	ldrb.w	r9, [r4, #23]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ab94:	9301      	str	r3, [sp, #4]
   1ab96:	b2d3      	uxtb	r3, r2
      overflow = pBuf[i+1] >> (8 - shift);
   1ab98:	ea4f 12ea 	mov.w	r2, sl, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ab9c:	ea42 024b 	orr.w	r2, r2, fp, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1aba0:	f894 8018 	ldrb.w	r8, [r4, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1aba4:	7562      	strb	r2, [r4, #21]
      overflow = pBuf[i+1] >> (8 - shift);
   1aba6:	ea4f 12e9 	mov.w	r2, r9, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abaa:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1abae:	7e67      	ldrb	r7, [r4, #25]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abb0:	75a2      	strb	r2, [r4, #22]
      overflow = pBuf[i+1] >> (8 - shift);
   1abb2:	ea4f 12e8 	mov.w	r2, r8, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abb6:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1abba:	7ea6      	ldrb	r6, [r4, #26]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abbc:	75e2      	strb	r2, [r4, #23]
      overflow = pBuf[i+1] >> (8 - shift);
   1abbe:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abc0:	ea42 0248 	orr.w	r2, r2, r8, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1abc4:	f894 e01b 	ldrb.w	lr, [r4, #27]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abc8:	7622      	strb	r2, [r4, #24]
      overflow = pBuf[i+1] >> (8 - shift);
   1abca:	11f2      	asrs	r2, r6, #7
   1abcc:	7f61      	ldrb	r1, [r4, #29]
   1abce:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1abd2:	9104      	str	r1, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abd4:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
   1abd8:	7662      	strb	r2, [r4, #25]
      overflow = pBuf[i+1] >> (8 - shift);
   1abda:	ea4f 12ee 	mov.w	r2, lr, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abde:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1abe2:	9e04      	ldr	r6, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abe4:	76a2      	strb	r2, [r4, #26]
      overflow = pBuf[i+1] >> (8 - shift);
   1abe6:	ea4f 12ec 	mov.w	r2, ip, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abea:	ea42 0e4e 	orr.w	lr, r2, lr, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1abee:	11f2      	asrs	r2, r6, #7
   1abf0:	7fa0      	ldrb	r0, [r4, #30]
   1abf2:	f894 1020 	ldrb.w	r1, [r4, #32]
   1abf6:	9005      	str	r0, [sp, #20]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1abf8:	ea42 0c4c 	orr.w	ip, r2, ip, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1abfc:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   1ac00:	9107      	str	r1, [sp, #28]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac02:	9303      	str	r3, [sp, #12]
      overflow = pBuf[i+1] >> (8 - shift);
   1ac04:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac08:	7523      	strb	r3, [r4, #20]
   1ac0a:	f884 e01b 	strb.w	lr, [r4, #27]
   1ac0e:	f884 c01c 	strb.w	ip, [r4, #28]
      overflow = pBuf[i+1] >> (8 - shift);
   1ac12:	9f05      	ldr	r7, [sp, #20]
   1ac14:	9b02      	ldr	r3, [sp, #8]
   1ac16:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac18:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1ac1c:	9e06      	ldr	r6, [sp, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac1e:	7762      	strb	r2, [r4, #29]
      overflow = pBuf[i+1] >> (8 - shift);
   1ac20:	11f2      	asrs	r2, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac22:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1ac26:	9f07      	ldr	r7, [sp, #28]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac28:	77a2      	strb	r2, [r4, #30]
      overflow = pBuf[i+1] >> (8 - shift);
   1ac2a:	11fa      	asrs	r2, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac2c:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
   1ac30:	77e2      	strb	r2, [r4, #31]
      overflow = pBuf[i+1] >> (8 - shift);
   1ac32:	11c2      	asrs	r2, r0, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac34:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
   1ac38:	f884 2020 	strb.w	r2, [r4, #32]
      overflow = pBuf[i+1] >> (8 - shift);
   1ac3c:	11ca      	asrs	r2, r1, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac3e:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1ac42:	11da      	asrs	r2, r3, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac44:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
  if (overflow)
   1ac48:	9a01      	ldr	r2, [sp, #4]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac4a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   1ac4e:	005b      	lsls	r3, r3, #1
   1ac50:	b2db      	uxtb	r3, r3
  if (overflow)
   1ac52:	09d2      	lsrs	r2, r2, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac54:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   1ac58:	bf1c      	itt	ne
   1ac5a:	f083 0387 	eorne.w	r3, r3, #135	; 0x87
   1ac5e:	f884 3023 	strbne.w	r3, [r4, #35]	; 0x23
  if (pCmac->len % SEC_BLOCK_LEN != 0)
   1ac62:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac64:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  if (pCmac->len % SEC_BLOCK_LEN != 0)
   1ac68:	071b      	lsls	r3, r3, #28
   1ac6a:	d073      	beq.n	1ad54 <SecCmacHciCback+0x21c>
      overflow = pBuf[i+1] >> (8 - shift);
   1ac6c:	f894 a016 	ldrb.w	sl, [r4, #22]
   1ac70:	f894 b015 	ldrb.w	fp, [r4, #21]
   1ac74:	7fa1      	ldrb	r1, [r4, #30]
   1ac76:	f894 9017 	ldrb.w	r9, [r4, #23]
   1ac7a:	9102      	str	r1, [sp, #8]
   1ac7c:	ea4f 11ea 	mov.w	r1, sl, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac80:	ea41 014b 	orr.w	r1, r1, fp, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1ac84:	f894 8018 	ldrb.w	r8, [r4, #24]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac88:	7561      	strb	r1, [r4, #21]
      overflow = pBuf[i+1] >> (8 - shift);
   1ac8a:	ea4f 11e9 	mov.w	r1, r9, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac8e:	ea41 014a 	orr.w	r1, r1, sl, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1ac92:	f894 e019 	ldrb.w	lr, [r4, #25]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac96:	75a1      	strb	r1, [r4, #22]
      overflow = pBuf[i+1] >> (8 - shift);
   1ac98:	ea4f 11e8 	mov.w	r1, r8, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ac9c:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1aca0:	f894 c01a 	ldrb.w	ip, [r4, #26]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1aca4:	75e1      	strb	r1, [r4, #23]
      overflow = pBuf[i+1] >> (8 - shift);
   1aca6:	ea4f 11ee 	mov.w	r1, lr, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1acaa:	ea41 0148 	orr.w	r1, r1, r8, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1acae:	7ee7      	ldrb	r7, [r4, #27]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1acb0:	9a03      	ldr	r2, [sp, #12]
   1acb2:	7621      	strb	r1, [r4, #24]
      overflow = pBuf[i+1] >> (8 - shift);
   1acb4:	ea4f 11ec 	mov.w	r1, ip, asr #7
   1acb8:	7f26      	ldrb	r6, [r4, #28]
   1acba:	7fe0      	ldrb	r0, [r4, #31]
   1acbc:	9004      	str	r0, [sp, #16]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1acbe:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1acc2:	ea4f 13eb 	mov.w	r3, fp, asr #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1acc6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   1acca:	7661      	strb	r1, [r4, #25]
      overflow = pBuf[i+1] >> (8 - shift);
   1accc:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1acce:	7523      	strb	r3, [r4, #20]
   1acd0:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1acd4:	7f63      	ldrb	r3, [r4, #29]
   1acd6:	9301      	str	r3, [sp, #4]
   1acd8:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1acda:	ea41 0747 	orr.w	r7, r1, r7, lsl #1
   1acde:	76e7      	strb	r7, [r4, #27]
      overflow = pBuf[i+1] >> (8 - shift);
   1ace0:	9f01      	ldr	r7, [sp, #4]
   1ace2:	f894 3020 	ldrb.w	r3, [r4, #32]
   1ace6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1acea:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
   1acee:	9305      	str	r3, [sp, #20]
   1acf0:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1acf2:	ea41 0646 	orr.w	r6, r1, r6, lsl #1
   1acf6:	7726      	strb	r6, [r4, #28]
      overflow = pBuf[i+1] >> (8 - shift);
   1acf8:	9e02      	ldr	r6, [sp, #8]
   1acfa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1acfe:	f884 c01a 	strb.w	ip, [r4, #26]
      overflow = pBuf[i+1] >> (8 - shift);
   1ad02:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ad04:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
   1ad08:	7761      	strb	r1, [r4, #29]
      overflow = pBuf[i+1] >> (8 - shift);
   1ad0a:	9f04      	ldr	r7, [sp, #16]
   1ad0c:	11f9      	asrs	r1, r7, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ad0e:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
      overflow = pBuf[i+1] >> (8 - shift);
   1ad12:	9e05      	ldr	r6, [sp, #20]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ad14:	77a1      	strb	r1, [r4, #30]
      overflow = pBuf[i+1] >> (8 - shift);
   1ad16:	11f1      	asrs	r1, r6, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ad18:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
   1ad1c:	77e1      	strb	r1, [r4, #31]
   1ad1e:	0071      	lsls	r1, r6, #1
   1ad20:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
   1ad24:	0052      	lsls	r2, r2, #1
   1ad26:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
   1ad2a:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
      overflow = pBuf[i+1] >> (8 - shift);
   1ad2e:	11da      	asrs	r2, r3, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ad30:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (overflow)
   1ad34:	9a03      	ldr	r2, [sp, #12]
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ad36:	f884 1020 	strb.w	r1, [r4, #32]
   1ad3a:	005b      	lsls	r3, r3, #1
   1ad3c:	b2db      	uxtb	r3, r3
    if (overflow)
   1ad3e:	09d2      	lsrs	r2, r2, #7
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ad40:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   1ad44:	bf18      	it	ne
   1ad46:	f083 0387 	eorne.w	r3, r3, #135	; 0x87
    pBuf[i] = (pBuf[i] << shift) | overflow;
   1ad4a:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
      pCmac->subkey[SEC_BLOCK_LEN-1] ^= SEC_CMAC_RB;
   1ad4e:	bf18      	it	ne
   1ad50:	f884 3023 	strbne.w	r3, [r4, #35]	; 0x23
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   1ad54:	2301      	movs	r3, #1
   1ad56:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
      secCmacProcessBlock(pBuf);
   1ad5a:	4628      	mov	r0, r5
}
   1ad5c:	b009      	add	sp, #36	; 0x24
   1ad5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      secCmacProcessBlock(pBuf);
   1ad62:	f7ff bea5 	b.w	1aab0 <secCmacProcessBlock>
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   1ad66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  pMsg->pCiphertext = pBuf->ciphertext;
   1ad68:	606e      	str	r6, [r5, #4]
  pMsg->pPlainText = pCmac->pPlainText;
   1ad6a:	681a      	ldr	r2, [r3, #0]
   1ad6c:	60aa      	str	r2, [r5, #8]
  WsfMsgSend(pCmac->handlerId, pMsg);
   1ad6e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
   1ad72:	4629      	mov	r1, r5
}
   1ad74:	b009      	add	sp, #36	; 0x24
   1ad76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  WsfMsgSend(pCmac->handlerId, pMsg);
   1ad7a:	f7fc bf9d 	b.w	17cb8 <WsfMsgSend>
   1ad7e:	bf00      	nop

0001ad80 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint16_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   1ad80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad84:	b084      	sub	sp, #16
   1ad86:	4606      	mov	r6, r0
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1ad88:	2064      	movs	r0, #100	; 0x64
{
   1ad8a:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   1ad8e:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   1ad92:	460d      	mov	r5, r1
   1ad94:	4690      	mov	r8, r2
   1ad96:	461f      	mov	r7, r3
  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1ad98:	f7fc ff82 	bl	17ca0 <WsfMsgAlloc>
   1ad9c:	4604      	mov	r4, r0
   1ad9e:	b360      	cbz	r0, 1adfa <SecCmac+0x7a>

    pCmacCb->pPlainText = pPlainText;

    pCmacCb->len = textLen;
    pCmacCb->position = 0;
    pCmacCb->handlerId = handlerId;
   1ada0:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
    pBuf->msg.hdr.status = secCb.token++;
   1ada4:	4a16      	ldr	r2, [pc, #88]	; (1ae00 <SecCmac+0x80>)
    pCmacCb->len = textLen;
   1ada6:	f8a0 805e 	strh.w	r8, [r0, #94]	; 0x5e
    pBuf->type = SEC_TYPE_CMAC;
   1adaa:	2701      	movs	r7, #1
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   1adac:	f100 0338 	add.w	r3, r0, #56	; 0x38
    pBuf->type = SEC_TYPE_CMAC;
   1adb0:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    pBuf->pCb = pCmacCb;
   1adb4:	6303      	str	r3, [r0, #48]	; 0x30
    pBuf->msg.hdr.status = secCb.token++;
   1adb6:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;

    /* Copy key */
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   1adba:	4631      	mov	r1, r6
    pCmacCb->position = 0;
   1adbc:	2600      	movs	r6, #0
   1adbe:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   1adc2:	f880 6061 	strb.w	r6, [r0, #97]	; 0x61
    pBuf->msg.hdr.status = secCb.token++;
   1adc6:	19d8      	adds	r0, r3, r7
   1adc8:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
   1adcc:	70e3      	strb	r3, [r4, #3]
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   1adce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    pBuf->msg.hdr.param = param;
   1add2:	f8a4 9000 	strh.w	r9, [r4]
    pBuf->msg.hdr.event = event;
   1add6:	f884 a002 	strb.w	sl, [r4, #2]
    pCmacCb->pPlainText = pPlainText;
   1adda:	63a5      	str	r5, [r4, #56]	; 0x38
    Calc128Cpy(pCmacCb->key, (uint8_t *) pKey);
   1addc:	f7f8 fac4 	bl	13368 <Calc128Cpy>
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1ade0:	6b20      	ldr	r0, [r4, #48]	; 0x30
  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
   1ade2:	4622      	mov	r2, r4
   1ade4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1ade8:	4669      	mov	r1, sp
   1adea:	3004      	adds	r0, #4
  memset(buf, 0, SEC_BLOCK_LEN);
   1adec:	e9cd 6600 	strd	r6, r6, [sp]
   1adf0:	e9cd 6602 	strd	r6, r6, [sp, #8]
  SecLeEncryptCmd(pCmac->key, buf, pBuf, pCmac->handlerId);
   1adf4:	f000 f8bc 	bl	1af70 <SecLeEncryptCmd>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);

    return TRUE;
   1adf8:	4638      	mov	r0, r7
  }

  return FALSE;
}
   1adfa:	b004      	add	sp, #16
   1adfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ae00:	10006ef8 	.word	0x10006ef8

0001ae04 <SecCmacInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   1ae04:	4b01      	ldr	r3, [pc, #4]	; (1ae0c <SecCmacInit+0x8>)
   1ae06:	4a02      	ldr	r2, [pc, #8]	; (1ae10 <SecCmacInit+0xc>)
   1ae08:	641a      	str	r2, [r3, #64]	; 0x40
}
   1ae0a:	4770      	bx	lr
   1ae0c:	10006ef8 	.word	0x10006ef8
   1ae10:	0001ab39 	.word	0x0001ab39

0001ae14 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   1ae14:	b530      	push	{r4, r5, lr}
  secQueueBuf_t *pBuf = NULL;
  wsfHandlerId_t handlerId = 0;

  /* Handle random number event. */
  switch (pEvent->hdr.event)
   1ae16:	7883      	ldrb	r3, [r0, #2]
{
   1ae18:	b083      	sub	sp, #12
  wsfHandlerId_t handlerId = 0;
   1ae1a:	2200      	movs	r2, #0
  switch (pEvent->hdr.event)
   1ae1c:	3b1b      	subs	r3, #27
{
   1ae1e:	4604      	mov	r4, r0
  wsfHandlerId_t handlerId = 0;
   1ae20:	f88d 2007 	strb.w	r2, [sp, #7]
  switch (pEvent->hdr.event)
   1ae24:	2b0b      	cmp	r3, #11
   1ae26:	d819      	bhi.n	1ae5c <secHciCback+0x48>
   1ae28:	e8df f003 	tbb	[pc, r3]
   1ae2c:	18182136 	.word	0x18182136
   1ae30:	18181818 	.word	0x18181818
   1ae34:	061a1818 	.word	0x061a1818
  case HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
    break;

  case HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT:
    pBuf = WsfMsgDeq(&secCb.dhKeyQueue, &handlerId);
   1ae38:	4821      	ldr	r0, [pc, #132]	; (1aec0 <secHciCback+0xac>)
   1ae3a:	f10d 0107 	add.w	r1, sp, #7
   1ae3e:	f7fc ff53 	bl	17ce8 <WsfMsgDeq>
   1ae42:	4605      	mov	r5, r0

  default:
    break;
  }

  if (pBuf)
   1ae44:	b155      	cbz	r5, 1ae5c <secHciCback+0x48>
  {
    WSF_ASSERT(secCb.hciCbackTbl[pBuf->type]);
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   1ae46:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   1ae4a:	4b1e      	ldr	r3, [pc, #120]	; (1aec4 <secHciCback+0xb0>)
   1ae4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1ae50:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1ae54:	4628      	mov	r0, r5
   1ae56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ae58:	4621      	mov	r1, r4
   1ae5a:	4798      	blx	r3
  }
}
   1ae5c:	b003      	add	sp, #12
   1ae5e:	bd30      	pop	{r4, r5, pc}
    pBuf = WsfMsgDeq(&secCb.pubKeyQueue, &handlerId);
   1ae60:	4819      	ldr	r0, [pc, #100]	; (1aec8 <secHciCback+0xb4>)
   1ae62:	f10d 0107 	add.w	r1, sp, #7
   1ae66:	f7fc ff3f 	bl	17ce8 <WsfMsgDeq>
   1ae6a:	4605      	mov	r5, r0
    break;
   1ae6c:	e7ea      	b.n	1ae44 <secHciCback+0x30>
    memcpy(&secCb.rand[HCI_RAND_LEN * secCb.randTop], pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   1ae6e:	4a15      	ldr	r2, [pc, #84]	; (1aec4 <secHciCback+0xb0>)
   1ae70:	f8d0 0005 	ldr.w	r0, [r0, #5]
   1ae74:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1ae78:	f8d4 1009 	ldr.w	r1, [r4, #9]
   1ae7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ae80:	c303      	stmia	r3!, {r0, r1}
    secCb.randTop = (secCb.randTop >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randTop + 1;
   1ae82:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1ae86:	2b02      	cmp	r3, #2
   1ae88:	bf9a      	itte	ls
   1ae8a:	3301      	addls	r3, #1
   1ae8c:	b2db      	uxtbls	r3, r3
   1ae8e:	2300      	movhi	r3, #0
   1ae90:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
}
   1ae94:	b003      	add	sp, #12
   1ae96:	bd30      	pop	{r4, r5, pc}
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   1ae98:	f10d 0107 	add.w	r1, sp, #7
   1ae9c:	480b      	ldr	r0, [pc, #44]	; (1aecc <secHciCback+0xb8>)
   1ae9e:	f7fc ff23 	bl	17ce8 <WsfMsgDeq>
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   1aea2:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   1aea6:	1ecb      	subs	r3, r1, #3
   1aea8:	2b01      	cmp	r3, #1
    pBuf = WsfMsgDeq(&secCb.aesEncQueue, &handlerId);
   1aeaa:	4605      	mov	r5, r0
    if (pBuf->type == SEC_TYPE_CCM || pBuf->type == SEC_TYPE_CMAC || pBuf->type == SEC_TYPE_AES_REV)
   1aeac:	d901      	bls.n	1aeb2 <secHciCback+0x9e>
   1aeae:	2901      	cmp	r1, #1
   1aeb0:	d1cb      	bne.n	1ae4a <secHciCback+0x36>
      WStrReverse(pEvent->leEncryptCmdCmpl.data, HCI_ENCRYPT_DATA_LEN);
   1aeb2:	2110      	movs	r1, #16
   1aeb4:	1d60      	adds	r0, r4, #5
   1aeb6:	f7f8 faf9 	bl	134ac <WStrReverse>
    secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   1aeba:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   1aebe:	e7c4      	b.n	1ae4a <secHciCback+0x36>
   1aec0:	10006f28 	.word	0x10006f28
   1aec4:	10006ef8 	.word	0x10006ef8
   1aec8:	10006f20 	.word	0x10006f20
   1aecc:	10006f18 	.word	0x10006f18

0001aed0 <SecInit>:
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   1aed0:	4b06      	ldr	r3, [pc, #24]	; (1aeec <SecInit+0x1c>)
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);

  secCb.token = 0;

  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   1aed2:	4807      	ldr	r0, [pc, #28]	; (1aef0 <SecInit+0x20>)
  WSF_QUEUE_INIT(&secCb.aesEncQueue);
   1aed4:	2200      	movs	r2, #0
   1aed6:	e9c3 2208 	strd	r2, r2, [r3, #32]
  WSF_QUEUE_INIT(&secCb.pubKeyQueue);
   1aeda:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  WSF_QUEUE_INIT(&secCb.dhKeyQueue);
   1aede:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  secCb.token = 0;
   1aee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  HciSecRegister(secHciCback);
   1aee6:	f7f8 bd5f 	b.w	139a8 <HciSecRegister>
   1aeea:	bf00      	nop
   1aeec:	10006ef8 	.word	0x10006ef8
   1aef0:	0001ae15 	.word	0x0001ae15

0001aef4 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   1aef4:	b570      	push	{r4, r5, r6, lr}
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   1aef6:	4d1d      	ldr	r5, [pc, #116]	; (1af6c <SecRand+0x78>)
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   1aef8:	1dce      	adds	r6, r1, #7
  uint8_t index = secCb.randBtm * HCI_RAND_LEN;
   1aefa:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   1aefe:	10f6      	asrs	r6, r6, #3

  WSF_ASSERT(randLen <= SEC_RAND_DATA_LEN);

  /* Copy from circular buffer of random data. */
  while (randLen--)
   1af00:	b1d1      	cbz	r1, 1af38 <SecRand+0x44>
   1af02:	00db      	lsls	r3, r3, #3
   1af04:	b2db      	uxtb	r3, r3
   1af06:	4401      	add	r1, r0
   1af08:	e009      	b.n	1af1e <SecRand+0x2a>
   1af0a:	4291      	cmp	r1, r2
   1af0c:	d014      	beq.n	1af38 <SecRand+0x44>
  {
    *pRand++ = secCb.rand[index];
   1af0e:	782b      	ldrb	r3, [r5, #0]
   1af10:	f800 3c01 	strb.w	r3, [r0, #-1]
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   1af14:	2300      	movs	r3, #0
   1af16:	3301      	adds	r3, #1
  while (randLen--)
   1af18:	4281      	cmp	r1, r0
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   1af1a:	b2db      	uxtb	r3, r3
  while (randLen--)
   1af1c:	d00c      	beq.n	1af38 <SecRand+0x44>
    *pRand++ = secCb.rand[index];
   1af1e:	4602      	mov	r2, r0
   1af20:	5cec      	ldrb	r4, [r5, r3]
   1af22:	f802 4b01 	strb.w	r4, [r2], #1
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   1af26:	2b1f      	cmp	r3, #31
    *pRand++ = secCb.rand[index];
   1af28:	f100 0002 	add.w	r0, r0, #2
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   1af2c:	d0ed      	beq.n	1af0a <SecRand+0x16>
   1af2e:	4610      	mov	r0, r2
   1af30:	3301      	adds	r3, #1
  while (randLen--)
   1af32:	4281      	cmp	r1, r0
    index = (index == SEC_RAND_DATA_LEN - 1) ? 0 : index + 1;
   1af34:	b2db      	uxtb	r3, r3
  while (randLen--)
   1af36:	d1f2      	bne.n	1af1e <SecRand+0x2a>
  }

  while (count--)
   1af38:	b2f4      	uxtb	r4, r6
   1af3a:	b17e      	cbz	r6, 1af5c <SecRand+0x68>
  {
    /* Request more random data. */
    HciLeRandCmd();

    /* Update copy index. */
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   1af3c:	2600      	movs	r6, #0
    HciLeRandCmd();
   1af3e:	f7f5 fdef 	bl	10b20 <HciLeRandCmd>
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   1af42:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1af46:	2b02      	cmp	r3, #2
  while (count--)
   1af48:	f104 32ff 	add.w	r2, r4, #4294967295
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   1af4c:	f103 0101 	add.w	r1, r3, #1
   1af50:	d805      	bhi.n	1af5e <SecRand+0x6a>
  while (count--)
   1af52:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   1af56:	f885 103a 	strb.w	r1, [r5, #58]	; 0x3a
  while (count--)
   1af5a:	d1f0      	bne.n	1af3e <SecRand+0x4a>
  }
}
   1af5c:	bd70      	pop	{r4, r5, r6, pc}
  while (count--)
   1af5e:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    secCb.randBtm = (secCb.randBtm >= SEC_HCI_RAND_MULT - 1) ? 0 : secCb.randBtm + 1;
   1af62:	f885 603a 	strb.w	r6, [r5, #58]	; 0x3a
  while (count--)
   1af66:	d1ea      	bne.n	1af3e <SecRand+0x4a>
}
   1af68:	bd70      	pop	{r4, r5, r6, pc}
   1af6a:	bf00      	nop
   1af6c:	10006ef8 	.word	0x10006ef8

0001af70 <SecLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecLeEncryptCmd(uint8_t *pKey, uint8_t *pText, void *pBuf, wsfHandlerId_t handlerId)
{
   1af70:	b570      	push	{r4, r5, r6, lr}
   1af72:	b088      	sub	sp, #32
   1af74:	460e      	mov	r6, r1
   1af76:	4615      	mov	r5, r2
  uint8_t revKey[HCI_KEY_LEN];
  uint8_t revText[HCI_ENCRYPT_DATA_LEN];

  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   1af78:	4601      	mov	r1, r0
   1af7a:	2210      	movs	r2, #16
   1af7c:	4668      	mov	r0, sp
{
   1af7e:	461c      	mov	r4, r3
  WStrReverseCpy(revKey, pKey, HCI_KEY_LEN);
   1af80:	f7f8 fa82 	bl	13488 <WStrReverseCpy>
  WStrReverseCpy(revText, pText, HCI_ENCRYPT_DATA_LEN);
   1af84:	4631      	mov	r1, r6
   1af86:	a804      	add	r0, sp, #16
   1af88:	2210      	movs	r2, #16
   1af8a:	f7f8 fa7d 	bl	13488 <WStrReverseCpy>

  WsfMsgEnq(&secCb.aesEncQueue, handlerId, pBuf);
   1af8e:	462a      	mov	r2, r5
   1af90:	4621      	mov	r1, r4
   1af92:	4804      	ldr	r0, [pc, #16]	; (1afa4 <SecLeEncryptCmd+0x34>)
   1af94:	f7fc fea2 	bl	17cdc <WsfMsgEnq>
  HciLeEncryptCmd(revKey, revText);
   1af98:	a904      	add	r1, sp, #16
   1af9a:	4668      	mov	r0, sp
   1af9c:	f7f5 fcfa 	bl	10994 <HciLeEncryptCmd>
}
   1afa0:	b008      	add	sp, #32
   1afa2:	bd70      	pop	{r4, r5, r6, pc}
   1afa4:	10006f18 	.word	0x10006f18

0001afa8 <l2cDefaultCtrlCback>:
 */
/*************************************************************************************************/
static void l2cDefaultCtrlCback(wsfMsgHdr_t *pMsg)
{
  return;
}
   1afa8:	4770      	bx	lr
   1afaa:	bf00      	nop

0001afac <l2cHciFlowCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cHciFlowCback(uint16_t handle, bool_t flowDisabled)
{
   1afac:	b530      	push	{r4, r5, lr}
   1afae:	b083      	sub	sp, #12
   1afb0:	460c      	mov	r4, r1
  wsfMsgHdr_t hdr;

  /* get conn ID for handle */
  if ((hdr.param = DmConnIdByHandle(handle)) != DM_CONN_ID_NONE)
   1afb2:	f001 f883 	bl	1c0bc <DmConnIdByHandle>
   1afb6:	b280      	uxth	r0, r0
   1afb8:	f8ad 0004 	strh.w	r0, [sp, #4]
   1afbc:	b178      	cbz	r0, 1afde <l2cHciFlowCback+0x32>
  {
    /* execute higher layer flow control callbacks */
    hdr.event = flowDisabled;
    (*l2cCb.attCtrlCback)(&hdr);
   1afbe:	4d09      	ldr	r5, [pc, #36]	; (1afe4 <l2cHciFlowCback+0x38>)
    hdr.event = flowDisabled;
   1afc0:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.attCtrlCback)(&hdr);
   1afc4:	68eb      	ldr	r3, [r5, #12]
   1afc6:	a801      	add	r0, sp, #4
   1afc8:	4798      	blx	r3
    hdr.event = flowDisabled;
    (*l2cCb.smpCtrlCback)(&hdr);
   1afca:	692b      	ldr	r3, [r5, #16]
    hdr.event = flowDisabled;
   1afcc:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.smpCtrlCback)(&hdr);
   1afd0:	a801      	add	r0, sp, #4
   1afd2:	4798      	blx	r3

    /* execute connection oriented channel flow control callback */
    hdr.event = flowDisabled;
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   1afd4:	696b      	ldr	r3, [r5, #20]
    hdr.event = flowDisabled;
   1afd6:	f88d 4006 	strb.w	r4, [sp, #6]
    (*l2cCb.l2cCocCtrlCback)(&hdr);
   1afda:	a801      	add	r0, sp, #4
   1afdc:	4798      	blx	r3
  }
}
   1afde:	b003      	add	sp, #12
   1afe0:	bd30      	pop	{r4, r5, pc}
   1afe2:	bf00      	nop
   1afe4:	10006f48 	.word	0x10006f48

0001afe8 <l2cRxSignalingPkt>:
{
   1afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afec:	4606      	mov	r6, r0
   1afee:	460d      	mov	r5, r1
   1aff0:	4614      	mov	r4, r2
  if ((connId = DmConnIdByHandle(handle)) == DM_CONN_ID_NONE)
   1aff2:	f001 f863 	bl	1c0bc <DmConnIdByHandle>
   1aff6:	b908      	cbnz	r0, 1affc <l2cRxSignalingPkt+0x14>
}
   1aff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  role = DmConnRole(connId);
   1affc:	f001 f912 	bl	1c224 <DmConnRole>
  if ((role == DM_ROLE_MASTER) && (l2cCb.masterRxSignalingPkt != NULL))
   1b000:	4601      	mov	r1, r0
   1b002:	b948      	cbnz	r0, 1b018 <l2cRxSignalingPkt+0x30>
   1b004:	4a0d      	ldr	r2, [pc, #52]	; (1b03c <l2cRxSignalingPkt+0x54>)
   1b006:	6997      	ldr	r7, [r2, #24]
   1b008:	b147      	cbz	r7, 1b01c <l2cRxSignalingPkt+0x34>
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1b00a:	4622      	mov	r2, r4
   1b00c:	4629      	mov	r1, r5
   1b00e:	4630      	mov	r0, r6
   1b010:	463b      	mov	r3, r7
}
   1b012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1b016:	4718      	bx	r3
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   1b018:	2801      	cmp	r0, #1
   1b01a:	d004      	beq.n	1b026 <l2cRxSignalingPkt+0x3e>
}
   1b01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    L2C_TRACE_ERR1("Invalid role configuration: role=%d", role);
   1b020:	4807      	ldr	r0, [pc, #28]	; (1b040 <l2cRxSignalingPkt+0x58>)
   1b022:	f7fd b9bd 	b.w	183a0 <WsfTrace>
  else if ((role == DM_ROLE_SLAVE) && (l2cCb.slaveRxSignalingPkt != NULL))
   1b026:	4a05      	ldr	r2, [pc, #20]	; (1b03c <l2cRxSignalingPkt+0x54>)
   1b028:	69d7      	ldr	r7, [r2, #28]
   1b02a:	2f00      	cmp	r7, #0
   1b02c:	d0f6      	beq.n	1b01c <l2cRxSignalingPkt+0x34>
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1b02e:	4622      	mov	r2, r4
   1b030:	4629      	mov	r1, r5
   1b032:	4630      	mov	r0, r6
   1b034:	463b      	mov	r3, r7
}
   1b036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*l2cCb.slaveRxSignalingPkt)(handle, len, pPacket);
   1b03a:	4718      	bx	r3
   1b03c:	10006f48 	.word	0x10006f48
   1b040:	00025cfc 	.word	0x00025cfc

0001b044 <l2cDefaultDataCidCback>:
  L2C_TRACE_WARN1("unknown cid=0x%04x", cid);
   1b044:	4801      	ldr	r0, [pc, #4]	; (1b04c <l2cDefaultDataCidCback+0x8>)
   1b046:	f7fd b9ab 	b.w	183a0 <WsfTrace>
   1b04a:	bf00      	nop
   1b04c:	00025d20 	.word	0x00025d20

0001b050 <l2cDefaultDataCback>:
  L2C_TRACE_WARN0("rcvd data on uregistered cid");
   1b050:	4801      	ldr	r0, [pc, #4]	; (1b058 <l2cDefaultDataCback+0x8>)
   1b052:	f7fd b9a5 	b.w	183a0 <WsfTrace>
   1b056:	bf00      	nop
   1b058:	00025d34 	.word	0x00025d34

0001b05c <l2cHciAclCback>:
{
   1b05c:	b538      	push	{r3, r4, r5, lr}
  BSTREAM_TO_UINT16(hciLen, p);
   1b05e:	78c3      	ldrb	r3, [r0, #3]
   1b060:	7882      	ldrb	r2, [r0, #2]
   1b062:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   1b066:	b292      	uxth	r2, r2
  if (hciLen >= L2C_HDR_LEN)
   1b068:	2a03      	cmp	r2, #3
{
   1b06a:	4604      	mov	r4, r0
  if (hciLen >= L2C_HDR_LEN)
   1b06c:	d808      	bhi.n	1b080 <l2cHciAclCback+0x24>
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   1b06e:	2100      	movs	r1, #0
    L2C_TRACE_WARN2("length mismatch: l2c=%u hci=%u", l2cLen, hciLen);
   1b070:	4826      	ldr	r0, [pc, #152]	; (1b10c <l2cHciAclCback+0xb0>)
   1b072:	f7fd f995 	bl	183a0 <WsfTrace>
  WsfMsgFree(pPacket);
   1b076:	4620      	mov	r0, r4
}
   1b078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   1b07c:	f7fc be18 	b.w	17cb0 <WsfMsgFree>
    BSTREAM_TO_UINT16(l2cLen, p);
   1b080:	7941      	ldrb	r1, [r0, #5]
   1b082:	f890 c004 	ldrb.w	ip, [r0, #4]
   1b086:	eb0c 2c01 	add.w	ip, ip, r1, lsl #8
   1b08a:	fa1f fc8c 	uxth.w	ip, ip
  if (hciLen == (l2cLen + L2C_HDR_LEN))
   1b08e:	f10c 0304 	add.w	r3, ip, #4
   1b092:	429a      	cmp	r2, r3
   1b094:	4661      	mov	r1, ip
   1b096:	d1eb      	bne.n	1b070 <l2cHciAclCback+0x14>
    BSTREAM_TO_UINT16(cid, p);
   1b098:	79c1      	ldrb	r1, [r0, #7]
   1b09a:	7983      	ldrb	r3, [r0, #6]
  BSTREAM_TO_UINT16(handle, p);
   1b09c:	7842      	ldrb	r2, [r0, #1]
   1b09e:	7800      	ldrb	r0, [r0, #0]
    BSTREAM_TO_UINT16(cid, p);
   1b0a0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1b0a4:	b29b      	uxth	r3, r3
  BSTREAM_TO_UINT16(handle, p);
   1b0a6:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    switch (cid)
   1b0aa:	2b05      	cmp	r3, #5
  handle &= HCI_HANDLE_MASK;
   1b0ac:	f3c0 000b 	ubfx	r0, r0, #0, #12
    switch (cid)
   1b0b0:	d022      	beq.n	1b0f8 <l2cHciAclCback+0x9c>
   1b0b2:	2b06      	cmp	r3, #6
   1b0b4:	d016      	beq.n	1b0e4 <l2cHciAclCback+0x88>
   1b0b6:	2b04      	cmp	r3, #4
   1b0b8:	d00a      	beq.n	1b0d0 <l2cHciAclCback+0x74>
        (*l2cCb.l2cDataCidCback)(handle, cid, l2cLen, pPacket);
   1b0ba:	4915      	ldr	r1, [pc, #84]	; (1b110 <l2cHciAclCback+0xb4>)
   1b0bc:	4662      	mov	r2, ip
   1b0be:	6a0d      	ldr	r5, [r1, #32]
   1b0c0:	4619      	mov	r1, r3
   1b0c2:	4623      	mov	r3, r4
   1b0c4:	47a8      	blx	r5
  WsfMsgFree(pPacket);
   1b0c6:	4620      	mov	r0, r4
}
   1b0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   1b0cc:	f7fc bdf0 	b.w	17cb0 <WsfMsgFree>
        (*l2cCb.attDataCback)(handle, l2cLen, pPacket);
   1b0d0:	4b0f      	ldr	r3, [pc, #60]	; (1b110 <l2cHciAclCback+0xb4>)
   1b0d2:	4622      	mov	r2, r4
   1b0d4:	681b      	ldr	r3, [r3, #0]
   1b0d6:	4661      	mov	r1, ip
   1b0d8:	4798      	blx	r3
  WsfMsgFree(pPacket);
   1b0da:	4620      	mov	r0, r4
}
   1b0dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   1b0e0:	f7fc bde6 	b.w	17cb0 <WsfMsgFree>
        (*l2cCb.smpDataCback)(handle, l2cLen, pPacket);
   1b0e4:	4b0a      	ldr	r3, [pc, #40]	; (1b110 <l2cHciAclCback+0xb4>)
   1b0e6:	4622      	mov	r2, r4
   1b0e8:	685b      	ldr	r3, [r3, #4]
   1b0ea:	4661      	mov	r1, ip
   1b0ec:	4798      	blx	r3
  WsfMsgFree(pPacket);
   1b0ee:	4620      	mov	r0, r4
}
   1b0f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   1b0f4:	f7fc bddc 	b.w	17cb0 <WsfMsgFree>
        (*l2cCb.l2cSignalingCback)(handle, l2cLen, pPacket);
   1b0f8:	4b05      	ldr	r3, [pc, #20]	; (1b110 <l2cHciAclCback+0xb4>)
   1b0fa:	4622      	mov	r2, r4
   1b0fc:	689b      	ldr	r3, [r3, #8]
   1b0fe:	4661      	mov	r1, ip
   1b100:	4798      	blx	r3
  WsfMsgFree(pPacket);
   1b102:	4620      	mov	r0, r4
}
   1b104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfMsgFree(pPacket);
   1b108:	f7fc bdd2 	b.w	17cb0 <WsfMsgFree>
   1b10c:	00025d54 	.word	0x00025d54
   1b110:	10006f48 	.word	0x10006f48

0001b114 <l2cSendCmdReject>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void l2cSendCmdReject(uint16_t handle, uint8_t identifier, uint16_t reason)
{
   1b114:	b570      	push	{r4, r5, r6, lr}
   1b116:	4605      	mov	r5, r0
   1b118:	460e      	mov	r6, r1
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *l2cMsgAlloc(uint16_t len)
{
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1b11a:	200e      	movs	r0, #14
   1b11c:	2100      	movs	r1, #0
{
   1b11e:	4614      	mov	r4, r2
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1b120:	f7fc fdb4 	bl	17c8c <WsfMsgDataAlloc>
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CMD_REJ_LEN)) != NULL)
   1b124:	b1c8      	cbz	r0, 1b15a <l2cSendCmdReject+0x46>
void L2cDataReq(uint16_t cid, uint16_t handle, uint16_t len, uint8_t *pPacket)
{
  uint8_t *p = pPacket;

  /* Set HCI header */
  UINT16_TO_BSTREAM(p, handle);
   1b126:	0a29      	lsrs	r1, r5, #8
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   1b128:	2202      	movs	r2, #2
   1b12a:	7282      	strb	r2, [r0, #10]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   1b12c:	7304      	strb	r4, [r0, #12]
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   1b12e:	2200      	movs	r2, #0
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   1b130:	0a24      	lsrs	r4, r4, #8
  UINT16_TO_BSTREAM(p, handle);
   1b132:	7041      	strb	r1, [r0, #1]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));

  /* Set L2CAP header */
  UINT16_TO_BSTREAM(p, len);
   1b134:	2106      	movs	r1, #6
    UINT16_TO_BSTREAM(p, L2C_SIG_CMD_REJ_LEN);    /* parameter length */
   1b136:	72c2      	strb	r2, [r0, #11]
    UINT16_TO_BSTREAM(p, reason);                 /* reason */
   1b138:	7344      	strb	r4, [r0, #13]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   1b13a:	70c2      	strb	r2, [r0, #3]
   1b13c:	240a      	movs	r4, #10
  UINT16_TO_BSTREAM(p, len);
   1b13e:	7101      	strb	r1, [r0, #4]
   1b140:	7142      	strb	r2, [r0, #5]
  UINT16_TO_BSTREAM(p, cid);
   1b142:	71c2      	strb	r2, [r0, #7]
   1b144:	2105      	movs	r1, #5
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   1b146:	2201      	movs	r2, #1
    UINT8_TO_BSTREAM(p, identifier);              /* identifier */
   1b148:	7246      	strb	r6, [r0, #9]
  UINT16_TO_BSTREAM(p, handle);
   1b14a:	7005      	strb	r5, [r0, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   1b14c:	7084      	strb	r4, [r0, #2]
  UINT16_TO_BSTREAM(p, cid);
   1b14e:	7181      	strb	r1, [r0, #6]
    UINT8_TO_BSTREAM(p, L2C_SIG_CMD_REJ);         /* command code */
   1b150:	7202      	strb	r2, [r0, #8]
}
   1b152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Send to HCI */
  HciSendAclData(pPacket);
   1b156:	f7f6 be75 	b.w	11e44 <HciSendAclData>
}
   1b15a:	bd70      	pop	{r4, r5, r6, pc}

0001b15c <l2cMsgAlloc>:
  return WsfMsgDataAlloc(len, HCI_TX_DATA_TAILROOM);
   1b15c:	2100      	movs	r1, #0
   1b15e:	f7fc bd95 	b.w	17c8c <WsfMsgDataAlloc>
   1b162:	bf00      	nop

0001b164 <L2cInit>:
  l2cCb.attDataCback = l2cDefaultDataCback;
   1b164:	4b0b      	ldr	r3, [pc, #44]	; (1b194 <L2cInit+0x30>)
   1b166:	490c      	ldr	r1, [pc, #48]	; (1b198 <L2cInit+0x34>)
  l2cCb.attCtrlCback = l2cDefaultCtrlCback;
   1b168:	4a0c      	ldr	r2, [pc, #48]	; (1b19c <L2cInit+0x38>)
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   1b16a:	480d      	ldr	r0, [pc, #52]	; (1b1a0 <L2cInit+0x3c>)
  l2cCb.identifier = 1;
   1b16c:	f04f 0c01 	mov.w	ip, #1
{
   1b170:	b410      	push	{r4}
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   1b172:	4c0c      	ldr	r4, [pc, #48]	; (1b1a4 <L2cInit+0x40>)
  l2cCb.identifier = 1;
   1b174:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
  l2cCb.smpDataCback = l2cDefaultDataCback;
   1b178:	e9c3 1100 	strd	r1, r1, [r3]
  l2cCb.l2cSignalingCback = l2cRxSignalingPkt;
   1b17c:	609c      	str	r4, [r3, #8]
  l2cCb.l2cDataCidCback = l2cDefaultDataCidCback;
   1b17e:	6218      	str	r0, [r3, #32]
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   1b180:	4909      	ldr	r1, [pc, #36]	; (1b1a8 <L2cInit+0x44>)
   1b182:	480a      	ldr	r0, [pc, #40]	; (1b1ac <L2cInit+0x48>)
}
   1b184:	f85d 4b04 	ldr.w	r4, [sp], #4
  l2cCb.l2cCocCtrlCback = l2cDefaultCtrlCback;
   1b188:	615a      	str	r2, [r3, #20]
  l2cCb.smpCtrlCback = l2cDefaultCtrlCback;
   1b18a:	e9c3 2203 	strd	r2, r2, [r3, #12]
  HciAclRegister(l2cHciAclCback, l2cHciFlowCback);
   1b18e:	f7f8 bc11 	b.w	139b4 <HciAclRegister>
   1b192:	bf00      	nop
   1b194:	10006f48 	.word	0x10006f48
   1b198:	0001b051 	.word	0x0001b051
   1b19c:	0001afa9 	.word	0x0001afa9
   1b1a0:	0001b045 	.word	0x0001b045
   1b1a4:	0001afe9 	.word	0x0001afe9
   1b1a8:	0001afad 	.word	0x0001afad
   1b1ac:	0001b05d 	.word	0x0001b05d

0001b1b0 <L2cRegister>:
    l2cCb.attDataCback = dataCback;
   1b1b0:	4b03      	ldr	r3, [pc, #12]	; (1b1c0 <L2cRegister+0x10>)
  if (cid == L2C_CID_ATT)
   1b1b2:	2804      	cmp	r0, #4
    l2cCb.attDataCback = dataCback;
   1b1b4:	bf07      	ittee	eq
   1b1b6:	6019      	streq	r1, [r3, #0]
    l2cCb.attCtrlCback = ctrlCback;
   1b1b8:	60da      	streq	r2, [r3, #12]
    l2cCb.smpDataCback = dataCback;
   1b1ba:	6059      	strne	r1, [r3, #4]
    l2cCb.smpCtrlCback = ctrlCback;
   1b1bc:	611a      	strne	r2, [r3, #16]
}
   1b1be:	4770      	bx	lr
   1b1c0:	10006f48 	.word	0x10006f48

0001b1c4 <L2cDataReq>:
  UINT16_TO_BSTREAM(p, handle);
   1b1c4:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1b1c8:	f883 c001 	strb.w	ip, [r3, #1]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   1b1cc:	fa5f fc82 	uxtb.w	ip, r2
  UINT16_TO_BSTREAM(p, handle);
   1b1d0:	7019      	strb	r1, [r3, #0]
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   1b1d2:	f10c 0104 	add.w	r1, ip, #4
   1b1d6:	7099      	strb	r1, [r3, #2]
   1b1d8:	1d11      	adds	r1, r2, #4
   1b1da:	1209      	asrs	r1, r1, #8
  UINT16_TO_BSTREAM(p, len);
   1b1dc:	0a12      	lsrs	r2, r2, #8
  UINT16_TO_BSTREAM(p, (len + L2C_HDR_LEN));
   1b1de:	70d9      	strb	r1, [r3, #3]
  UINT16_TO_BSTREAM(p, cid);
   1b1e0:	0a01      	lsrs	r1, r0, #8
   1b1e2:	7198      	strb	r0, [r3, #6]
  UINT16_TO_BSTREAM(p, len);
   1b1e4:	f883 c004 	strb.w	ip, [r3, #4]
   1b1e8:	715a      	strb	r2, [r3, #5]
  UINT16_TO_BSTREAM(p, cid);
   1b1ea:	71d9      	strb	r1, [r3, #7]
  HciSendAclData(pPacket);
   1b1ec:	4618      	mov	r0, r3
   1b1ee:	f7f6 be29 	b.w	11e44 <HciSendAclData>
   1b1f2:	bf00      	nop

0001b1f4 <l2cMasterRxSignalingPkt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void l2cMasterRxSignalingPkt(uint16_t handle, uint16_t l2cLen, uint8_t *pPacket)
{
   1b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1f6:	460b      	mov	r3, r1

  /* parse code, len, and identifier */
  pPacket += L2C_PAYLOAD_START;
  BSTREAM_TO_UINT8(code, pPacket);
  BSTREAM_TO_UINT8(id, pPacket);
  BSTREAM_TO_UINT16(len, pPacket);
   1b1f8:	f892 c00a 	ldrb.w	ip, [r2, #10]
   1b1fc:	7ad1      	ldrb	r1, [r2, #11]
  BSTREAM_TO_UINT8(code, pPacket);
   1b1fe:	7a15      	ldrb	r5, [r2, #8]
  BSTREAM_TO_UINT8(id, pPacket);
   1b200:	7a56      	ldrb	r6, [r2, #9]
  BSTREAM_TO_UINT16(len, pPacket);
   1b202:	eb0c 2c01 	add.w	ip, ip, r1, lsl #8
   1b206:	fa1f fc8c 	uxth.w	ip, ip

  /* verify signaling length vs. l2c length
   * verify this is a conn param update rsp
   * verify parameter length
   */
  if ((l2cLen != (len + L2C_SIG_HDR_LEN)) ||
   1b20a:	f10c 0104 	add.w	r1, ip, #4
   1b20e:	428b      	cmp	r3, r1
{
   1b210:	b085      	sub	sp, #20
   1b212:	4604      	mov	r4, r0
  if ((l2cLen != (len + L2C_SIG_HDR_LEN)) ||
   1b214:	d101      	bne.n	1b21a <l2cMasterRxSignalingPkt+0x26>
   1b216:	2d12      	cmp	r5, #18
   1b218:	d008      	beq.n	1b22c <l2cMasterRxSignalingPkt+0x38>
      (code != L2C_SIG_CONN_UPDATE_REQ) ||
      (len != L2C_SIG_CONN_UPDATE_REQ_LEN))
  {
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   1b21a:	4833      	ldr	r0, [pc, #204]	; (1b2e8 <l2cMasterRxSignalingPkt+0xf4>)
   1b21c:	4662      	mov	r2, ip
   1b21e:	4629      	mov	r1, r5
   1b220:	f7fd f8be 	bl	183a0 <WsfTrace>

    /* reject all unknown or invalid commands except command reject. */
    if (code != L2C_SIG_CMD_REJ)
   1b224:	2d01      	cmp	r5, #1
   1b226:	d141      	bne.n	1b2ac <l2cMasterRxSignalingPkt+0xb8>
    L2cDmConnUpdateRsp(id, handle, L2C_CONN_PARAM_REJECTED);
    return;
  }

  DmL2cConnUpdateInd(id, handle, &connSpec);
}
   1b228:	b005      	add	sp, #20
   1b22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (code != L2C_SIG_CONN_UPDATE_REQ) ||
   1b22c:	f1bc 0f08 	cmp.w	ip, #8
   1b230:	d137      	bne.n	1b2a2 <l2cMasterRxSignalingPkt+0xae>
  BSTREAM_TO_UINT16(connSpec.connIntervalMin, pPacket);
   1b232:	7b51      	ldrb	r1, [r2, #13]
   1b234:	7b13      	ldrb	r3, [r2, #12]
  BSTREAM_TO_UINT16(connSpec.connIntervalMax, pPacket);
   1b236:	7bd0      	ldrb	r0, [r2, #15]
  BSTREAM_TO_UINT16(connSpec.connLatency, pPacket);
   1b238:	7c55      	ldrb	r5, [r2, #17]
  BSTREAM_TO_UINT16(connSpec.connIntervalMin, pPacket);
   1b23a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  BSTREAM_TO_UINT16(connSpec.connIntervalMax, pPacket);
   1b23e:	7b91      	ldrb	r1, [r2, #14]
   1b240:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  BSTREAM_TO_UINT16(connSpec.connLatency, pPacket);
   1b244:	7c10      	ldrb	r0, [r2, #16]
   1b246:	eb00 2005 	add.w	r0, r0, r5, lsl #8
  BSTREAM_TO_UINT16(connSpec.supTimeout, pPacket);
   1b24a:	7cd5      	ldrb	r5, [r2, #19]
   1b24c:	7c92      	ldrb	r2, [r2, #18]
  BSTREAM_TO_UINT16(connSpec.connIntervalMin, pPacket);
   1b24e:	b29b      	uxth	r3, r3
  BSTREAM_TO_UINT16(connSpec.supTimeout, pPacket);
   1b250:	eb02 2205 	add.w	r2, r2, r5, lsl #8
  if ((connSpec.connIntervalMin < HCI_CONN_INTERVAL_MIN) ||
   1b254:	1f9d      	subs	r5, r3, #6
   1b256:	b2ad      	uxth	r5, r5
   1b258:	f640 4c7a 	movw	ip, #3194	; 0xc7a
  BSTREAM_TO_UINT16(connSpec.connIntervalMax, pPacket);
   1b25c:	b289      	uxth	r1, r1
  BSTREAM_TO_UINT16(connSpec.connLatency, pPacket);
   1b25e:	b280      	uxth	r0, r0
  BSTREAM_TO_UINT16(connSpec.supTimeout, pPacket);
   1b260:	b292      	uxth	r2, r2
  connSpec.minCeLen = 0;
   1b262:	2700      	movs	r7, #0
  if ((connSpec.connIntervalMin < HCI_CONN_INTERVAL_MIN) ||
   1b264:	4565      	cmp	r5, ip
  BSTREAM_TO_UINT16(connSpec.connIntervalMin, pPacket);
   1b266:	f8ad 3004 	strh.w	r3, [sp, #4]
  BSTREAM_TO_UINT16(connSpec.connIntervalMax, pPacket);
   1b26a:	f8ad 1006 	strh.w	r1, [sp, #6]
  BSTREAM_TO_UINT16(connSpec.connLatency, pPacket);
   1b26e:	f8ad 0008 	strh.w	r0, [sp, #8]
  BSTREAM_TO_UINT16(connSpec.supTimeout, pPacket);
   1b272:	f8ad 200a 	strh.w	r2, [sp, #10]
  connSpec.minCeLen = 0;
   1b276:	9703      	str	r7, [sp, #12]
  if ((connSpec.connIntervalMin < HCI_CONN_INTERVAL_MIN) ||
   1b278:	d820      	bhi.n	1b2bc <l2cMasterRxSignalingPkt+0xc8>
      (connSpec.connIntervalMin > HCI_CONN_INTERVAL_MAX) ||
   1b27a:	428b      	cmp	r3, r1
   1b27c:	d81e      	bhi.n	1b2bc <l2cMasterRxSignalingPkt+0xc8>
      (connSpec.connIntervalMax < HCI_CONN_INTERVAL_MIN) ||
   1b27e:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1b282:	d81b      	bhi.n	1b2bc <l2cMasterRxSignalingPkt+0xc8>
      (connSpec.connIntervalMax > HCI_CONN_INTERVAL_MAX) ||
   1b284:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1b288:	d218      	bcs.n	1b2bc <l2cMasterRxSignalingPkt+0xc8>
      (connSpec.connLatency > HCI_CONN_LATENCY_MAX) ||
   1b28a:	3a0a      	subs	r2, #10
   1b28c:	b292      	uxth	r2, r2
   1b28e:	f640 4376 	movw	r3, #3190	; 0xc76
   1b292:	429a      	cmp	r2, r3
   1b294:	d812      	bhi.n	1b2bc <l2cMasterRxSignalingPkt+0xc8>
  DmL2cConnUpdateInd(id, handle, &connSpec);
   1b296:	aa01      	add	r2, sp, #4
   1b298:	4621      	mov	r1, r4
   1b29a:	4630      	mov	r0, r6
   1b29c:	f000 ffea 	bl	1c274 <DmL2cConnUpdateInd>
   1b2a0:	e7c2      	b.n	1b228 <l2cMasterRxSignalingPkt+0x34>
    L2C_TRACE_WARN3("invalid msg code:%d len:%d l2cLen:%d", code, len, l2cLen);
   1b2a2:	4811      	ldr	r0, [pc, #68]	; (1b2e8 <l2cMasterRxSignalingPkt+0xf4>)
   1b2a4:	4662      	mov	r2, ip
   1b2a6:	4629      	mov	r1, r5
   1b2a8:	f7fd f87a 	bl	183a0 <WsfTrace>
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   1b2ac:	2200      	movs	r2, #0
   1b2ae:	4631      	mov	r1, r6
   1b2b0:	4620      	mov	r0, r4
}
   1b2b2:	b005      	add	sp, #20
   1b2b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      l2cSendCmdReject(handle, id, L2C_REJ_NOT_UNDERSTOOD);
   1b2b8:	f7ff bf2c 	b.w	1b114 <l2cSendCmdReject>
{
  uint8_t *pPacket;
  uint8_t *p;

  /* allocate msg buffer */
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN)) != NULL)
   1b2bc:	200e      	movs	r0, #14
   1b2be:	f7ff ff4d 	bl	1b15c <l2cMsgAlloc>
   1b2c2:	2800      	cmp	r0, #0
   1b2c4:	d0b0      	beq.n	1b228 <l2cMasterRxSignalingPkt+0x34>
  {
    /* build message */
    p = pPacket + L2C_PAYLOAD_START;
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP);       /* command code */
   1b2c6:	2213      	movs	r2, #19
   1b2c8:	7202      	strb	r2, [r0, #8]
    UINT8_TO_BSTREAM(p, identifier);                    /* identifier */
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP_LEN);  /* parameter length */
   1b2ca:	2202      	movs	r2, #2
   1b2cc:	2300      	movs	r3, #0
   1b2ce:	7282      	strb	r2, [r0, #10]
    UINT16_TO_BSTREAM(p, result);                       /* result */
   1b2d0:	2201      	movs	r2, #1
    UINT8_TO_BSTREAM(p, identifier);                    /* identifier */
   1b2d2:	7246      	strb	r6, [r0, #9]
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP_LEN);  /* parameter length */
   1b2d4:	72c3      	strb	r3, [r0, #11]
    UINT16_TO_BSTREAM(p, result);                       /* result */
   1b2d6:	7302      	strb	r2, [r0, #12]
   1b2d8:	7343      	strb	r3, [r0, #13]

    /* send packet */
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN), pPacket);
   1b2da:	2206      	movs	r2, #6
   1b2dc:	4603      	mov	r3, r0
   1b2de:	4621      	mov	r1, r4
   1b2e0:	2005      	movs	r0, #5
   1b2e2:	f7ff ff6f 	bl	1b1c4 <L2cDataReq>
   1b2e6:	e79f      	b.n	1b228 <l2cMasterRxSignalingPkt+0x34>
   1b2e8:	00025d74 	.word	0x00025d74

0001b2ec <L2cMasterInit>:
  l2cCb.masterRxSignalingPkt = l2cMasterRxSignalingPkt;
   1b2ec:	4b01      	ldr	r3, [pc, #4]	; (1b2f4 <L2cMasterInit+0x8>)
   1b2ee:	4a02      	ldr	r2, [pc, #8]	; (1b2f8 <L2cMasterInit+0xc>)
   1b2f0:	619a      	str	r2, [r3, #24]
}
   1b2f2:	4770      	bx	lr
   1b2f4:	10006f48 	.word	0x10006f48
   1b2f8:	0001b1f5 	.word	0x0001b1f5

0001b2fc <L2cDmConnUpdateRsp>:
{
   1b2fc:	b570      	push	{r4, r5, r6, lr}
   1b2fe:	4606      	mov	r6, r0
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN)) != NULL)
   1b300:	200e      	movs	r0, #14
{
   1b302:	460d      	mov	r5, r1
   1b304:	4614      	mov	r4, r2
  if ((pPacket = l2cMsgAlloc(L2C_SIG_PKT_BASE_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN)) != NULL)
   1b306:	f7ff ff29 	bl	1b15c <l2cMsgAlloc>
   1b30a:	b188      	cbz	r0, 1b330 <L2cDmConnUpdateRsp+0x34>
    UINT8_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP);       /* command code */
   1b30c:	2213      	movs	r2, #19
   1b30e:	7202      	strb	r2, [r0, #8]
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP_LEN);  /* parameter length */
   1b310:	2202      	movs	r2, #2
   1b312:	7282      	strb	r2, [r0, #10]
   1b314:	2100      	movs	r1, #0
    UINT16_TO_BSTREAM(p, result);                       /* result */
   1b316:	0a22      	lsrs	r2, r4, #8
    UINT16_TO_BSTREAM(p, L2C_SIG_CONN_UPDATE_RSP_LEN);  /* parameter length */
   1b318:	72c1      	strb	r1, [r0, #11]
    UINT16_TO_BSTREAM(p, result);                       /* result */
   1b31a:	7342      	strb	r2, [r0, #13]
    UINT8_TO_BSTREAM(p, identifier);                    /* identifier */
   1b31c:	7246      	strb	r6, [r0, #9]
    UINT16_TO_BSTREAM(p, result);                       /* result */
   1b31e:	7304      	strb	r4, [r0, #12]
   1b320:	4603      	mov	r3, r0
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN), pPacket);
   1b322:	4629      	mov	r1, r5
   1b324:	2206      	movs	r2, #6
  }
}
   1b326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L2cDataReq(L2C_CID_LE_SIGNALING, handle, (L2C_SIG_HDR_LEN + L2C_SIG_CONN_UPDATE_RSP_LEN), pPacket);
   1b32a:	2005      	movs	r0, #5
   1b32c:	f7ff bf4a 	b.w	1b1c4 <L2cDataReq>
}
   1b330:	bd70      	pop	{r4, r5, r6, pc}
   1b332:	bf00      	nop

0001b334 <dmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvInit(void)
{
   1b334:	b410      	push	{r4}
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   1b336:	4b09      	ldr	r3, [pc, #36]	; (1b35c <dmAdvInit+0x28>)
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   1b338:	4a09      	ldr	r2, [pc, #36]	; (1b360 <dmAdvInit+0x2c>)
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   1b33a:	4c0a      	ldr	r4, [pc, #40]	; (1b364 <dmAdvInit+0x30>)
   1b33c:	480a      	ldr	r0, [pc, #40]	; (1b368 <dmAdvInit+0x34>)
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   1b33e:	2100      	movs	r1, #0
  dmAdvCb.intervalMin[advHandle] = DM_GAP_ADV_SLOW_INT_MIN;
   1b340:	e9c3 4004 	strd	r4, r0, [r3, #16]
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
   1b344:	4c09      	ldr	r4, [pc, #36]	; (1b36c <dmAdvInit+0x38>)
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
  {
    dmAdvCbInit(i);
  }

  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
   1b346:	7b10      	ldrb	r0, [r2, #12]
  dmAdvCb.advType[advHandle] = DM_ADV_NONE;
   1b348:	619c      	str	r4, [r3, #24]
  dmCb.advFiltPolicy[advHandle] = HCI_ADV_FILT_NONE;
   1b34a:	f8a2 1011 	strh.w	r1, [r2, #17]
  dmAdvCb.advState[advHandle] = DM_ADV_STATE_IDLE;
   1b34e:	f8a3 101d 	strh.w	r1, [r3, #29]
  dmAdvCb.advTimer.handlerId = dmCb.handlerId;
   1b352:	7318      	strb	r0, [r3, #12]
  dmCb.advAddrType = DM_ADDR_PUBLIC;
   1b354:	7391      	strb	r1, [r2, #14]
}
   1b356:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b35a:	4770      	bx	lr
   1b35c:	10006f70 	.word	0x10006f70
   1b360:	1000707c 	.word	0x1000707c
   1b364:	06400640 	.word	0x06400640
   1b368:	07800780 	.word	0x07800780
   1b36c:	0707ffff 	.word	0x0707ffff

0001b370 <dmAdvGenConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmAdvGenConnCmpl(uint8_t advHandle, uint8_t status)
{
   1b370:	b530      	push	{r4, r5, lr}
   1b372:	b08b      	sub	sp, #44	; 0x2c
   1b374:	460d      	mov	r5, r1
   1b376:	4604      	mov	r4, r0
  hciLeConnCmplEvt_t  leConnCmpl;

  /* generate enhanced connection complete event */
  memset(&leConnCmpl, 0, sizeof(leConnCmpl));
   1b378:	2224      	movs	r2, #36	; 0x24
   1b37a:	2100      	movs	r1, #0
   1b37c:	a801      	add	r0, sp, #4
   1b37e:	f005 fef9 	bl	21174 <memset>

  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
  leConnCmpl.hdr.status = leConnCmpl.status = status;
  leConnCmpl.role = DM_ROLE_SLAVE;
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   1b382:	4b0e      	ldr	r3, [pc, #56]	; (1b3bc <dmAdvGenConnCmpl+0x4c>)
  leConnCmpl.hdr.status = leConnCmpl.status = status;
   1b384:	f88d 5008 	strb.w	r5, [sp, #8]
  leConnCmpl.hdr.event = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   1b388:	2202      	movs	r2, #2
   1b38a:	f88d 2006 	strb.w	r2, [sp, #6]
  leConnCmpl.role = DM_ROLE_SLAVE;
   1b38e:	2201      	movs	r2, #1
   1b390:	f88d 200c 	strb.w	r2, [sp, #12]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   1b394:	2106      	movs	r1, #6
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   1b396:	191a      	adds	r2, r3, r4
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   1b398:	fb01 3104 	mla	r1, r1, r4, r3
   1b39c:	3125      	adds	r1, #37	; 0x25
  leConnCmpl.addrType = dmAdvCb.peerAddrType[advHandle];
   1b39e:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
   1b3a2:	f88d 300d 	strb.w	r3, [sp, #13]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   1b3a6:	f10d 000e 	add.w	r0, sp, #14
  leConnCmpl.hdr.status = leConnCmpl.status = status;
   1b3aa:	f88d 5007 	strb.w	r5, [sp, #7]
  BdaCpy(leConnCmpl.peerAddr, dmAdvCb.peerAddr[advHandle]);
   1b3ae:	f7f7 ffb7 	bl	13320 <BdaCpy>

  /* pass connection complete event to DM connection management module */
  dmDevPassHciEvtToConn((hciEvt_t *) &leConnCmpl);
   1b3b2:	a801      	add	r0, sp, #4
   1b3b4:	f001 f8c4 	bl	1c540 <dmDevPassHciEvtToConn>
}
   1b3b8:	b00b      	add	sp, #44	; 0x2c
   1b3ba:	bd30      	pop	{r4, r5, pc}
   1b3bc:	10006f70 	.word	0x10006f70

0001b3c0 <dmAdvActRemoveSet>:
 */
/*************************************************************************************************/
void dmAdvActRemoveSet(dmAdvMsg_t *pMsg)
{
  /* empty */
}
   1b3c0:	4770      	bx	lr
   1b3c2:	bf00      	nop

0001b3c4 <dmAdvMsgHandler>:
 */
/*************************************************************************************************/
void dmAdvMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmAdvAct[DM_MSG_MASK(pMsg->event)])((dmAdvMsg_t *)pMsg);
   1b3c4:	7883      	ldrb	r3, [r0, #2]
   1b3c6:	4a03      	ldr	r2, [pc, #12]	; (1b3d4 <dmAdvMsgHandler+0x10>)
   1b3c8:	f003 030f 	and.w	r3, r3, #15
   1b3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b3d0:	4718      	bx	r3
   1b3d2:	bf00      	nop
   1b3d4:	00025ecc 	.word	0x00025ecc

0001b3d8 <dmAdvReset>:
{
   1b3d8:	b500      	push	{lr}
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   1b3da:	4a0f      	ldr	r2, [pc, #60]	; (1b418 <dmAdvReset+0x40>)
   1b3dc:	7f53      	ldrb	r3, [r2, #29]
   1b3de:	2b05      	cmp	r3, #5
{
   1b3e0:	b083      	sub	sp, #12
  if ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)     ||
   1b3e2:	d009      	beq.n	1b3f8 <dmAdvReset+0x20>
   1b3e4:	2b01      	cmp	r3, #1
   1b3e6:	d004      	beq.n	1b3f2 <dmAdvReset+0x1a>
  dmAdvInit();
   1b3e8:	f7ff ffa4 	bl	1b334 <dmAdvInit>
}
   1b3ec:	b003      	add	sp, #12
   1b3ee:	f85d fb04 	ldr.w	pc, [sp], #4
      ((dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING) &&
   1b3f2:	7e13      	ldrb	r3, [r2, #24]
   1b3f4:	2b01      	cmp	r3, #1
   1b3f6:	d0f7      	beq.n	1b3e8 <dmAdvReset+0x10>
    WsfTimerStop(&dmAdvCb.advTimer);
   1b3f8:	4807      	ldr	r0, [pc, #28]	; (1b418 <dmAdvReset+0x40>)
   1b3fa:	f7fc ff31 	bl	18260 <WsfTimerStop>
    (*dmCb.cback)((dmEvt_t *) &advStop);
   1b3fe:	4b07      	ldr	r3, [pc, #28]	; (1b41c <dmAdvReset+0x44>)
    advStop.event = DM_ADV_STOP_IND;
   1b400:	2222      	movs	r2, #34	; 0x22
    (*dmCb.cback)((dmEvt_t *) &advStop);
   1b402:	689b      	ldr	r3, [r3, #8]
    advStop.event = DM_ADV_STOP_IND;
   1b404:	f8ad 2006 	strh.w	r2, [sp, #6]
    (*dmCb.cback)((dmEvt_t *) &advStop);
   1b408:	a801      	add	r0, sp, #4
   1b40a:	4798      	blx	r3
  dmAdvInit();
   1b40c:	f7ff ff92 	bl	1b334 <dmAdvInit>
}
   1b410:	b003      	add	sp, #12
   1b412:	f85d fb04 	ldr.w	pc, [sp], #4
   1b416:	bf00      	nop
   1b418:	10006f70 	.word	0x10006f70
   1b41c:	1000707c 	.word	0x1000707c

0001b420 <dmAdvActConfig>:
{
   1b420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1b424:	4c18      	ldr	r4, [pc, #96]	; (1b488 <dmAdvActConfig+0x68>)
{
   1b426:	b087      	sub	sp, #28
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1b428:	7f61      	ldrb	r1, [r4, #29]
{
   1b42a:	4605      	mov	r5, r0
  DM_TRACE_INFO1("dmAdvActConfig: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1b42c:	4817      	ldr	r0, [pc, #92]	; (1b48c <dmAdvActConfig+0x6c>)
   1b42e:	f7fc ffb7 	bl	183a0 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   1b432:	7f63      	ldrb	r3, [r4, #29]
   1b434:	b9fb      	cbnz	r3, 1b476 <dmAdvActConfig+0x56>
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   1b436:	7e23      	ldrb	r3, [r4, #24]
   1b438:	2b01      	cmp	r3, #1
   1b43a:	d01f      	beq.n	1b47c <dmAdvActConfig+0x5c>
   1b43c:	2b04      	cmp	r3, #4
   1b43e:	d01d      	beq.n	1b47c <dmAdvActConfig+0x5c>
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   1b440:	4f13      	ldr	r7, [pc, #76]	; (1b490 <dmAdvActConfig+0x70>)
   1b442:	8aa1      	ldrh	r1, [r4, #20]
   1b444:	7bb8      	ldrb	r0, [r7, #14]
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
   1b446:	796e      	ldrb	r6, [r5, #5]
   1b448:	f895 9006 	ldrb.w	r9, [r5, #6]
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   1b44c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1b450:	9105      	str	r1, [sp, #20]
   1b452:	f001 f8df 	bl	1c614 <DmLlAddrType>
   1b456:	7c7a      	ldrb	r2, [r7, #17]
   1b458:	9203      	str	r2, [sp, #12]
    dmAdvConfig(pMsg->apiConfig.advType, pMsg->apiConfig.peerAddrType, pMsg->apiConfig.peerAddr);
   1b45a:	3507      	adds	r5, #7
  HciLeSetAdvParamCmd(dmAdvCb.intervalMin[DM_ADV_HANDLE_DEFAULT], /* advIntervalMin */
   1b45c:	7ea2      	ldrb	r2, [r4, #26]
   1b45e:	9202      	str	r2, [sp, #8]
   1b460:	4603      	mov	r3, r0
   1b462:	9905      	ldr	r1, [sp, #20]
   1b464:	f8cd 9000 	str.w	r9, [sp]
   1b468:	9501      	str	r5, [sp, #4]
   1b46a:	4632      	mov	r2, r6
   1b46c:	4640      	mov	r0, r8
   1b46e:	f7f5 fcf3 	bl	10e58 <HciLeSetAdvParamCmd>
  dmLegAdvCb.advType = advType;
   1b472:	4b08      	ldr	r3, [pc, #32]	; (1b494 <dmAdvActConfig+0x74>)
   1b474:	701e      	strb	r6, [r3, #0]
}
   1b476:	b007      	add	sp, #28
   1b478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
   1b47c:	4806      	ldr	r0, [pc, #24]	; (1b498 <dmAdvActConfig+0x78>)
}
   1b47e:	b007      	add	sp, #28
   1b480:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      DM_TRACE_WARN0("DmAdvConfig during directed advertising!");
   1b484:	f7fc bf8c 	b.w	183a0 <WsfTrace>
   1b488:	10006f70 	.word	0x10006f70
   1b48c:	00025d9c 	.word	0x00025d9c
   1b490:	1000707c 	.word	0x1000707c
   1b494:	10006fa4 	.word	0x10006fa4
   1b498:	00025db8 	.word	0x00025db8

0001b49c <dmAdvActSetData>:
{
   1b49c:	b538      	push	{r3, r4, r5, lr}
  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1b49e:	4d0b      	ldr	r5, [pc, #44]	; (1b4cc <dmAdvActSetData+0x30>)
{
   1b4a0:	4604      	mov	r4, r0
  DM_TRACE_INFO1("dmAdvActSetData: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1b4a2:	7f69      	ldrb	r1, [r5, #29]
   1b4a4:	480a      	ldr	r0, [pc, #40]	; (1b4d0 <dmAdvActSetData+0x34>)
   1b4a6:	f7fc ff7b 	bl	183a0 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   1b4aa:	7f6b      	ldrb	r3, [r5, #29]
   1b4ac:	b943      	cbnz	r3, 1b4c0 <dmAdvActSetData+0x24>
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
   1b4ae:	79a3      	ldrb	r3, [r4, #6]
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   1b4b0:	79e0      	ldrb	r0, [r4, #7]
   1b4b2:	f104 0108 	add.w	r1, r4, #8
    if (pMsg->apiSetData.location == DM_DATA_LOC_ADV)
   1b4b6:	b923      	cbnz	r3, 1b4c2 <dmAdvActSetData+0x26>
}
   1b4b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      HciLeSetAdvDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   1b4bc:	f7f5 bc8a 	b.w	10dd4 <HciLeSetAdvDataCmd>
}
   1b4c0:	bd38      	pop	{r3, r4, r5, pc}
   1b4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      HciLeSetScanRespDataCmd(pMsg->apiSetData.len, pMsg->apiSetData.pData);
   1b4c6:	f7f5 bdd3 	b.w	11070 <HciLeSetScanRespDataCmd>
   1b4ca:	bf00      	nop
   1b4cc:	10006f70 	.word	0x10006f70
   1b4d0:	00025de4 	.word	0x00025de4

0001b4d4 <dmAdvActStart>:
{
   1b4d4:	b538      	push	{r3, r4, r5, lr}
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1b4d6:	4c0e      	ldr	r4, [pc, #56]	; (1b510 <dmAdvActStart+0x3c>)
{
   1b4d8:	4605      	mov	r5, r0
  DM_TRACE_INFO1("dmAdvActStart: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1b4da:	7f61      	ldrb	r1, [r4, #29]
   1b4dc:	480d      	ldr	r0, [pc, #52]	; (1b514 <dmAdvActStart+0x40>)
   1b4de:	f7fc ff5f 	bl	183a0 <WsfTrace>
   if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_IDLE)
   1b4e2:	7f63      	ldrb	r3, [r4, #29]
   1b4e4:	b96b      	cbnz	r3, 1b502 <dmAdvActStart+0x2e>
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   1b4e6:	7e23      	ldrb	r3, [r4, #24]
   1b4e8:	2b01      	cmp	r3, #1
   1b4ea:	d00b      	beq.n	1b504 <dmAdvActStart+0x30>
   1b4ec:	2b04      	cmp	r3, #4
   1b4ee:	d009      	beq.n	1b504 <dmAdvActStart+0x30>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STARTING;
   1b4f0:	2303      	movs	r3, #3
   1b4f2:	7763      	strb	r3, [r4, #29]
    dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] = pMsg->apiStart.duration[DM_ADV_HANDLE_DEFAULT];
   1b4f4:	892b      	ldrh	r3, [r5, #8]
   1b4f6:	8423      	strh	r3, [r4, #32]
    HciLeSetAdvEnableCmd(TRUE);
   1b4f8:	2001      	movs	r0, #1
}
   1b4fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HciLeSetAdvEnableCmd(TRUE);
   1b4fe:	f7f5 bc35 	b.w	10d6c <HciLeSetAdvEnableCmd>
}
   1b502:	bd38      	pop	{r3, r4, r5, pc}
   1b504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      DM_TRACE_WARN0("dmAdvActStart during directed advertising!");
   1b508:	4803      	ldr	r0, [pc, #12]	; (1b518 <dmAdvActStart+0x44>)
   1b50a:	f7fc bf49 	b.w	183a0 <WsfTrace>
   1b50e:	bf00      	nop
   1b510:	10006f70 	.word	0x10006f70
   1b514:	00025e00 	.word	0x00025e00
   1b518:	00025e1c 	.word	0x00025e1c

0001b51c <dmAdvActStop>:
{
   1b51c:	b510      	push	{r4, lr}
  DM_TRACE_INFO1("dmAdvActStop: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1b51e:	4c0d      	ldr	r4, [pc, #52]	; (1b554 <dmAdvActStop+0x38>)
   1b520:	480d      	ldr	r0, [pc, #52]	; (1b558 <dmAdvActStop+0x3c>)
   1b522:	7f61      	ldrb	r1, [r4, #29]
   1b524:	f7fc ff3c 	bl	183a0 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   1b528:	7f63      	ldrb	r3, [r4, #29]
   1b52a:	2b01      	cmp	r3, #1
   1b52c:	d000      	beq.n	1b530 <dmAdvActStop+0x14>
}
   1b52e:	bd10      	pop	{r4, pc}
    if ((dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] == DM_ADV_CONN_DIRECT) ||
   1b530:	7e23      	ldrb	r3, [r4, #24]
   1b532:	2b01      	cmp	r3, #1
   1b534:	d008      	beq.n	1b548 <dmAdvActStop+0x2c>
   1b536:	2b04      	cmp	r3, #4
   1b538:	d006      	beq.n	1b548 <dmAdvActStop+0x2c>
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   1b53a:	2305      	movs	r3, #5
   1b53c:	7763      	strb	r3, [r4, #29]
    HciLeSetAdvEnableCmd(FALSE);
   1b53e:	2000      	movs	r0, #0
}
   1b540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HciLeSetAdvEnableCmd(FALSE);
   1b544:	f7f5 bc12 	b.w	10d6c <HciLeSetAdvEnableCmd>
}
   1b548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      DM_TRACE_WARN0("DmAdvStop during directed advertising!");
   1b54c:	4803      	ldr	r0, [pc, #12]	; (1b55c <dmAdvActStop+0x40>)
   1b54e:	f7fc bf27 	b.w	183a0 <WsfTrace>
   1b552:	bf00      	nop
   1b554:	10006f70 	.word	0x10006f70
   1b558:	00025e48 	.word	0x00025e48
   1b55c:	00025e60 	.word	0x00025e60

0001b560 <dmAdvHciHandler>:
  if (pEvent->hdr.event == HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT)
   1b560:	7883      	ldrb	r3, [r0, #2]
   1b562:	2b35      	cmp	r3, #53	; 0x35
   1b564:	d000      	beq.n	1b568 <dmAdvHciHandler+0x8>
   1b566:	4770      	bx	lr
{
   1b568:	b570      	push	{r4, r5, r6, lr}
    DM_TRACE_INFO1("HCI_LE_ADV_ENABLE_CMD_CMPL_CBACK_EVT: state: %d", dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT]);
   1b56a:	4d38      	ldr	r5, [pc, #224]	; (1b64c <dmAdvHciHandler+0xec>)
   1b56c:	4604      	mov	r4, r0
   1b56e:	7f69      	ldrb	r1, [r5, #29]
   1b570:	4837      	ldr	r0, [pc, #220]	; (1b650 <dmAdvHciHandler+0xf0>)
   1b572:	f7fc ff15 	bl	183a0 <WsfTrace>
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   1b576:	7f69      	ldrb	r1, [r5, #29]
   1b578:	2903      	cmp	r1, #3
   1b57a:	d910      	bls.n	1b59e <dmAdvHciHandler+0x3e>
   1b57c:	1f0b      	subs	r3, r1, #4
   1b57e:	2b01      	cmp	r3, #1
   1b580:	d80c      	bhi.n	1b59c <dmAdvHciHandler+0x3c>
      if (pEvent->hdr.status == HCI_SUCCESS)
   1b582:	78e6      	ldrb	r6, [r4, #3]
   1b584:	bb06      	cbnz	r6, 1b5c8 <dmAdvHciHandler+0x68>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STOPPING)
   1b586:	2905      	cmp	r1, #5
   1b588:	d039      	beq.n	1b5fe <dmAdvHciHandler+0x9e>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   1b58a:	4633      	mov	r3, r6
   1b58c:	4632      	mov	r2, r6
   1b58e:	2122      	movs	r1, #34	; 0x22
   1b590:	2015      	movs	r0, #21
   1b592:	f000 ff39 	bl	1c408 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   1b596:	23ff      	movs	r3, #255	; 0xff
   1b598:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   1b59a:	776e      	strb	r6, [r5, #29]
}
   1b59c:	bd70      	pop	{r4, r5, r6, pc}
    switch (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT])
   1b59e:	2901      	cmp	r1, #1
   1b5a0:	d9fc      	bls.n	1b59c <dmAdvHciHandler+0x3c>
      if (pEvent->hdr.status == HCI_SUCCESS)
   1b5a2:	78e3      	ldrb	r3, [r4, #3]
   1b5a4:	b96b      	cbnz	r3, 1b5c2 <dmAdvHciHandler+0x62>
        if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_STARTING)
   1b5a6:	2903      	cmp	r1, #3
   1b5a8:	d011      	beq.n	1b5ce <dmAdvHciHandler+0x6e>
   1b5aa:	4e2a      	ldr	r6, [pc, #168]	; (1b654 <dmAdvHciHandler+0xf4>)
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
   1b5ac:	2300      	movs	r3, #0
   1b5ae:	461a      	mov	r2, r3
   1b5b0:	2121      	movs	r1, #33	; 0x21
   1b5b2:	2014      	movs	r0, #20
   1b5b4:	f000 ff28 	bl	1c408 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
   1b5b8:	7832      	ldrb	r2, [r6, #0]
   1b5ba:	762a      	strb	r2, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   1b5bc:	2301      	movs	r3, #1
   1b5be:	776b      	strb	r3, [r5, #29]
}
   1b5c0:	bd70      	pop	{r4, r5, r6, pc}
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   1b5c2:	2300      	movs	r3, #0
   1b5c4:	776b      	strb	r3, [r5, #29]
}
   1b5c6:	bd70      	pop	{r4, r5, r6, pc}
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   1b5c8:	2301      	movs	r3, #1
   1b5ca:	776b      	strb	r3, [r5, #29]
}
   1b5cc:	bd70      	pop	{r4, r5, r6, pc}
          if (dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT] > 0)
   1b5ce:	8c29      	ldrh	r1, [r5, #32]
   1b5d0:	bbb1      	cbnz	r1, 1b640 <dmAdvHciHandler+0xe0>
          if (dmLegAdvCb.advType != DM_ADV_CONN_DIRECT_LO_DUTY)
   1b5d2:	4e20      	ldr	r6, [pc, #128]	; (1b654 <dmAdvHciHandler+0xf4>)
   1b5d4:	7833      	ldrb	r3, [r6, #0]
   1b5d6:	2b04      	cmp	r3, #4
   1b5d8:	d0e8      	beq.n	1b5ac <dmAdvHciHandler+0x4c>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_ADV_START_IND, 0, 0);
   1b5da:	2300      	movs	r3, #0
   1b5dc:	461a      	mov	r2, r3
   1b5de:	2121      	movs	r1, #33	; 0x21
   1b5e0:	2014      	movs	r0, #20
   1b5e2:	f000 ff11 	bl	1c408 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = dmLegAdvCb.advType;
   1b5e6:	7832      	ldrb	r2, [r6, #0]
   1b5e8:	762a      	strb	r2, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_ADVERTISING;
   1b5ea:	2301      	movs	r3, #1
   1b5ec:	776b      	strb	r3, [r5, #29]
            cbackEvent = DM_ADV_START_IND;
   1b5ee:	2221      	movs	r2, #33	; 0x21
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1b5f0:	4b19      	ldr	r3, [pc, #100]	; (1b658 <dmAdvHciHandler+0xf8>)
      pEvent->hdr.event = cbackEvent;
   1b5f2:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1b5f4:	4620      	mov	r0, r4
   1b5f6:	689b      	ldr	r3, [r3, #8]
}
   1b5f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1b5fc:	4718      	bx	r3
          WsfTimerStop(&dmAdvCb.advTimer);
   1b5fe:	4628      	mov	r0, r5
   1b600:	f7fc fe2e 	bl	18260 <WsfTimerStop>
          if (dmLegAdvCb.advType == DM_ADV_CONN_DIRECT_LO_DUTY)
   1b604:	4b13      	ldr	r3, [pc, #76]	; (1b654 <dmAdvHciHandler+0xf4>)
   1b606:	781b      	ldrb	r3, [r3, #0]
   1b608:	2b04      	cmp	r3, #4
   1b60a:	d00a      	beq.n	1b622 <dmAdvHciHandler+0xc2>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   1b60c:	4633      	mov	r3, r6
   1b60e:	4632      	mov	r2, r6
   1b610:	2122      	movs	r1, #34	; 0x22
   1b612:	2015      	movs	r0, #21
   1b614:	f000 fef8 	bl	1c408 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   1b618:	23ff      	movs	r3, #255	; 0xff
   1b61a:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   1b61c:	776e      	strb	r6, [r5, #29]
            cbackEvent = DM_ADV_STOP_IND;
   1b61e:	2222      	movs	r2, #34	; 0x22
   1b620:	e7e6      	b.n	1b5f0 <dmAdvHciHandler+0x90>
        dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_ADV_STOP_IND, 0, 0);
   1b622:	4633      	mov	r3, r6
   1b624:	2122      	movs	r1, #34	; 0x22
   1b626:	2015      	movs	r0, #21
   1b628:	4632      	mov	r2, r6
   1b62a:	f000 feed 	bl	1c408 <dmDevPassEvtToDevPriv>
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   1b62e:	23ff      	movs	r3, #255	; 0xff
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   1b630:	4630      	mov	r0, r6
        dmAdvCb.advType[DM_ADV_HANDLE_DEFAULT] = DM_ADV_NONE;
   1b632:	762b      	strb	r3, [r5, #24]
        dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_IDLE;
   1b634:	776e      	strb	r6, [r5, #29]
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   1b636:	213c      	movs	r1, #60	; 0x3c
}
   1b638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      dmAdvGenConnCmpl(DM_ADV_HANDLE_DEFAULT, HCI_ERR_ADV_TIMEOUT);
   1b63c:	f7ff be98 	b.w	1b370 <dmAdvGenConnCmpl>
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
   1b640:	2307      	movs	r3, #7
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
   1b642:	4628      	mov	r0, r5
            dmAdvCb.advTimer.msg.event = DM_ADV_MSG_TIMEOUT;
   1b644:	72ab      	strb	r3, [r5, #10]
            WsfTimerStartMs(&dmAdvCb.advTimer, dmAdvCb.advDuration[DM_ADV_HANDLE_DEFAULT]);
   1b646:	f7fc fdc7 	bl	181d8 <WsfTimerStartMs>
   1b64a:	e7c2      	b.n	1b5d2 <dmAdvHciHandler+0x72>
   1b64c:	10006f70 	.word	0x10006f70
   1b650:	00025e88 	.word	0x00025e88
   1b654:	10006fa4 	.word	0x10006fa4
   1b658:	1000707c 	.word	0x1000707c

0001b65c <dmAdvActClearSets>:
   1b65c:	4770      	bx	lr
   1b65e:	bf00      	nop

0001b660 <dmAdvActSetRandAddr>:
   1b660:	4770      	bx	lr
   1b662:	bf00      	nop

0001b664 <dmAdvActTimeout>:
{
   1b664:	b508      	push	{r3, lr}
  DM_TRACE_INFO0("dmAdvActTimeout!");
   1b666:	4807      	ldr	r0, [pc, #28]	; (1b684 <dmAdvActTimeout+0x20>)
   1b668:	f7fc fe9a 	bl	183a0 <WsfTrace>
  if (dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] == DM_ADV_STATE_ADVERTISING)
   1b66c:	4b06      	ldr	r3, [pc, #24]	; (1b688 <dmAdvActTimeout+0x24>)
   1b66e:	7f5a      	ldrb	r2, [r3, #29]
   1b670:	2a01      	cmp	r2, #1
   1b672:	d000      	beq.n	1b676 <dmAdvActTimeout+0x12>
}
   1b674:	bd08      	pop	{r3, pc}
    dmAdvCb.advState[DM_ADV_HANDLE_DEFAULT] = DM_ADV_STATE_STOPPING;
   1b676:	2205      	movs	r2, #5
   1b678:	775a      	strb	r2, [r3, #29]
}
   1b67a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HciLeSetAdvEnableCmd(FALSE);
   1b67e:	2000      	movs	r0, #0
   1b680:	f7f5 bb74 	b.w	10d6c <HciLeSetAdvEnableCmd>
   1b684:	00025eb8 	.word	0x00025eb8
   1b688:	10006f70 	.word	0x10006f70

0001b68c <DmAdvInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmAdvInit(void)
{
   1b68c:	b508      	push	{r3, lr}
  WsfTaskLock();
   1b68e:	f7fc fb49 	bl	17d24 <WsfTaskLock>

  /* set function interface table */
  dmFcnIfTbl[DM_ID_ADV] = (dmFcnIf_t *) &dmAdvFcnIf;
   1b692:	4b07      	ldr	r3, [pc, #28]	; (1b6b0 <DmAdvInit+0x24>)
   1b694:	4a07      	ldr	r2, [pc, #28]	; (1b6b4 <DmAdvInit+0x28>)
   1b696:	601a      	str	r2, [r3, #0]

  /* initialize legacy adv module */
  dmAdvInit();
   1b698:	f7ff fe4c 	bl	1b334 <dmAdvInit>

  /* clear set advertising set random address callback */
  dmDevCb.advSetRandAddrCback = NULL;
   1b69c:	4b06      	ldr	r3, [pc, #24]	; (1b6b8 <DmAdvInit+0x2c>)
   1b69e:	2000      	movs	r0, #0
   1b6a0:	6018      	str	r0, [r3, #0]

  /* initialize HCI VS module */
  HciVsInit(0);
   1b6a2:	f7f4 fe97 	bl	103d4 <HciVsInit>

  WsfTaskUnlock();
}
   1b6a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WsfTaskUnlock();
   1b6aa:	f7fc bb45 	b.w	17d38 <WsfTaskUnlock>
   1b6ae:	bf00      	nop
   1b6b0:	10002e58 	.word	0x10002e58
   1b6b4:	00025eec 	.word	0x00025eec
   1b6b8:	10007078 	.word	0x10007078

0001b6bc <dmConnSmActNone>:
 */
/*************************************************************************************************/
void dmConnSmActNone(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  return;
}
   1b6bc:	4770      	bx	lr
   1b6be:	bf00      	nop

0001b6c0 <dmConnSmActHciUpdated>:
/*************************************************************************************************/
void dmConnSmActHciUpdated(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  /* call callback */
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   1b6c0:	4b03      	ldr	r3, [pc, #12]	; (1b6d0 <dmConnSmActHciUpdated+0x10>)
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
   1b6c2:	2229      	movs	r2, #41	; 0x29
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   1b6c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  pMsg->hdr.event = DM_CONN_UPDATE_IND;
   1b6c8:	708a      	strb	r2, [r1, #2]
{
   1b6ca:	4608      	mov	r0, r1
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) pMsg);
   1b6cc:	4718      	bx	r3
   1b6ce:	bf00      	nop
   1b6d0:	10006fa8 	.word	0x10006fa8

0001b6d4 <dmConnSmActClose>:
  HciDisconnectCmd(pCcb->handle, pMsg->apiClose.reason);
   1b6d4:	8980      	ldrh	r0, [r0, #12]
   1b6d6:	7909      	ldrb	r1, [r1, #4]
   1b6d8:	f7f4 bef6 	b.w	104c8 <HciDisconnectCmd>

0001b6dc <dmConnSmActConnFailed>:
{
   1b6dc:	b570      	push	{r4, r5, r6, lr}
   1b6de:	4604      	mov	r4, r0
   1b6e0:	460d      	mov	r5, r1
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   1b6e2:	4817      	ldr	r0, [pc, #92]	; (1b740 <dmConnSmActConnFailed+0x64>)
   1b6e4:	7c21      	ldrb	r1, [r4, #16]
   1b6e6:	f7fc fe5b 	bl	183a0 <WsfTrace>
  if (pCcb->role == DM_ROLE_MASTER)
   1b6ea:	7e63      	ldrb	r3, [r4, #25]
  pCcb->inUse = FALSE;
   1b6ec:	2200      	movs	r2, #0
   1b6ee:	75a2      	strb	r2, [r4, #22]
  if (pCcb->role == DM_ROLE_MASTER)
   1b6f0:	b17b      	cbz	r3, 1b712 <dmConnSmActConnFailed+0x36>
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   1b6f2:	4c14      	ldr	r4, [pc, #80]	; (1b744 <dmConnSmActConnFailed+0x68>)
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
   1b6f4:	2300      	movs	r3, #0
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   1b6f6:	2228      	movs	r2, #40	; 0x28
   1b6f8:	70aa      	strb	r2, [r5, #2]
  pMsg->hciLeConnCmpl.handle = pMsg->hciLeConnCmpl.role = 0;
   1b6fa:	722b      	strb	r3, [r5, #8]
   1b6fc:	80eb      	strh	r3, [r5, #6]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   1b6fe:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
   1b702:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   1b706:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
   1b708:	b103      	cbz	r3, 1b70c <dmConnSmActConnFailed+0x30>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   1b70a:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   1b70c:	42a6      	cmp	r6, r4
   1b70e:	d1f8      	bne.n	1b702 <dmConnSmActConnFailed+0x26>
}
   1b710:	bd70      	pop	{r4, r5, r6, pc}
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
   1b712:	461a      	mov	r2, r3
   1b714:	2101      	movs	r1, #1
   1b716:	2016      	movs	r0, #22
   1b718:	f000 fe76 	bl	1c408 <dmDevPassEvtToDevPriv>
    if (pCcb->inUse)
   1b71c:	4b0a      	ldr	r3, [pc, #40]	; (1b748 <dmConnSmActConnFailed+0x6c>)
   1b71e:	7d9a      	ldrb	r2, [r3, #22]
   1b720:	2a00      	cmp	r2, #0
   1b722:	d1e6      	bne.n	1b6f2 <dmConnSmActConnFailed+0x16>
   1b724:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   1b728:	2a00      	cmp	r2, #0
   1b72a:	d1e2      	bne.n	1b6f2 <dmConnSmActConnFailed+0x16>
   1b72c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1b730:	2b00      	cmp	r3, #0
   1b732:	d1de      	bne.n	1b6f2 <dmConnSmActConnFailed+0x16>
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0 , 0);
   1b734:	461a      	mov	r2, r3
   1b736:	2128      	movs	r1, #40	; 0x28
   1b738:	2015      	movs	r0, #21
   1b73a:	f000 fe65 	bl	1c408 <dmDevPassEvtToDevPriv>
   1b73e:	e7d8      	b.n	1b6f2 <dmConnSmActConnFailed+0x16>
   1b740:	00025ef8 	.word	0x00025ef8
   1b744:	10007038 	.word	0x10007038
   1b748:	10006fa8 	.word	0x10006fa8

0001b74c <dmConnSmActConnOpened>:
{
   1b74c:	b570      	push	{r4, r5, r6, lr}
   1b74e:	460d      	mov	r5, r1
   1b750:	4604      	mov	r4, r0
  BdaCpy(pCcb->peerAddr, pMsg->hciLeConnCmpl.peerAddr);
   1b752:	310a      	adds	r1, #10
   1b754:	f7f7 fde4 	bl	13320 <BdaCpy>
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
   1b758:	88eb      	ldrh	r3, [r5, #6]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
   1b75a:	7a68      	ldrb	r0, [r5, #9]
  pCcb->handle = pMsg->hciLeConnCmpl.handle;
   1b75c:	81a3      	strh	r3, [r4, #12]
  pCcb->peerAddrType = DmHostAddrType(pMsg->hciLeConnCmpl.addrType);
   1b75e:	f000 ff65 	bl	1c62c <DmHostAddrType>
   1b762:	74e0      	strb	r0, [r4, #19]
  pCcb->role = pMsg->hciLeConnCmpl.role;
   1b764:	7a2b      	ldrb	r3, [r5, #8]
   1b766:	7663      	strb	r3, [r4, #25]
  if (pCcb->role == DM_ROLE_MASTER)
   1b768:	bb7b      	cbnz	r3, 1b7ca <dmConnSmActConnOpened+0x7e>
    pCcb->localAddrType = dmCb.connAddrType;
   1b76a:	4b29      	ldr	r3, [pc, #164]	; (1b810 <dmConnSmActConnOpened+0xc4>)
   1b76c:	7b5b      	ldrb	r3, [r3, #13]
   1b76e:	7523      	strb	r3, [r4, #20]
  if (pCcb->localAddrType == DM_ADDR_PUBLIC)
   1b770:	bb33      	cbnz	r3, 1b7c0 <dmConnSmActConnOpened+0x74>
    BdaCpy(pCcb->localAddr, HciGetBdAddr());
   1b772:	f7f6 fc53 	bl	1201c <HciGetBdAddr>
   1b776:	4601      	mov	r1, r0
   1b778:	1da0      	adds	r0, r4, #6
   1b77a:	f7f7 fdd1 	bl	13320 <BdaCpy>
  BdaCpy(pCcb->localRpa, pMsg->hciLeConnCmpl.localRpa);
   1b77e:	f105 0117 	add.w	r1, r5, #23
   1b782:	f104 001a 	add.w	r0, r4, #26
   1b786:	f7f7 fdcb 	bl	13320 <BdaCpy>
  BdaCpy(pCcb->peerRpa, pMsg->hciLeConnCmpl.peerRpa);
   1b78a:	f105 011d 	add.w	r1, r5, #29
   1b78e:	f104 0020 	add.w	r0, r4, #32
   1b792:	f7f7 fdc5 	bl	13320 <BdaCpy>
  if (pCcb->role == DM_ROLE_MASTER)
   1b796:	7e63      	ldrb	r3, [r4, #25]
  pCcb->idleMask = 0;
   1b798:	2200      	movs	r2, #0
   1b79a:	81e2      	strh	r2, [r4, #14]
  if (pCcb->role == DM_ROLE_MASTER)
   1b79c:	b1c3      	cbz	r3, 1b7d0 <dmConnSmActConnOpened+0x84>
  dmDevPassEvtToConnCte(DM_CONN_OPEN_IND, pCcb->connId);
   1b79e:	7c21      	ldrb	r1, [r4, #16]
   1b7a0:	4c1c      	ldr	r4, [pc, #112]	; (1b814 <dmConnSmActConnOpened+0xc8>)
   1b7a2:	2027      	movs	r0, #39	; 0x27
   1b7a4:	f000 fe50 	bl	1c448 <dmDevPassEvtToConnCte>
  pMsg->hdr.event = DM_CONN_OPEN_IND;
   1b7a8:	2327      	movs	r3, #39	; 0x27
   1b7aa:	70ab      	strb	r3, [r5, #2]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   1b7ac:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
   1b7b0:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   1b7b4:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
   1b7b6:	b103      	cbz	r3, 1b7ba <dmConnSmActConnOpened+0x6e>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   1b7b8:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   1b7ba:	42a6      	cmp	r6, r4
   1b7bc:	d1f8      	bne.n	1b7b0 <dmConnSmActConnOpened+0x64>
}
   1b7be:	bd70      	pop	{r4, r5, r6, pc}
    BdaCpy(pCcb->localAddr, dmCb.localAddr);
   1b7c0:	4913      	ldr	r1, [pc, #76]	; (1b810 <dmConnSmActConnOpened+0xc4>)
   1b7c2:	1da0      	adds	r0, r4, #6
   1b7c4:	f7f7 fdac 	bl	13320 <BdaCpy>
   1b7c8:	e7d9      	b.n	1b77e <dmConnSmActConnOpened+0x32>
    pCcb->localAddrType = dmCb.advAddrType;
   1b7ca:	4b11      	ldr	r3, [pc, #68]	; (1b810 <dmConnSmActConnOpened+0xc4>)
   1b7cc:	7b9b      	ldrb	r3, [r3, #14]
   1b7ce:	e7ce      	b.n	1b76e <dmConnSmActConnOpened+0x22>
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0 , 0);
   1b7d0:	461a      	mov	r2, r3
   1b7d2:	2101      	movs	r1, #1
   1b7d4:	2016      	movs	r0, #22
   1b7d6:	f000 fe17 	bl	1c408 <dmDevPassEvtToDevPriv>
    if (pCcb->inUse)
   1b7da:	4b0f      	ldr	r3, [pc, #60]	; (1b818 <dmConnSmActConnOpened+0xcc>)
   1b7dc:	7d9a      	ldrb	r2, [r3, #22]
   1b7de:	b172      	cbz	r2, 1b7fe <dmConnSmActConnOpened+0xb2>
   1b7e0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   1b7e4:	2a00      	cmp	r2, #0
   1b7e6:	d1da      	bne.n	1b79e <dmConnSmActConnOpened+0x52>
   1b7e8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1b7ec:	2b00      	cmp	r3, #0
   1b7ee:	d1d6      	bne.n	1b79e <dmConnSmActConnOpened+0x52>
      dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_START, DM_CONN_OPEN_IND, 0, 0);
   1b7f0:	2300      	movs	r3, #0
   1b7f2:	461a      	mov	r2, r3
   1b7f4:	2127      	movs	r1, #39	; 0x27
   1b7f6:	2014      	movs	r0, #20
   1b7f8:	f000 fe06 	bl	1c408 <dmDevPassEvtToDevPriv>
   1b7fc:	e7cf      	b.n	1b79e <dmConnSmActConnOpened+0x52>
    if (pCcb->inUse)
   1b7fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   1b802:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1b806:	2a00      	cmp	r2, #0
   1b808:	d1f0      	bne.n	1b7ec <dmConnSmActConnOpened+0xa0>
   1b80a:	2b00      	cmp	r3, #0
   1b80c:	d1f0      	bne.n	1b7f0 <dmConnSmActConnOpened+0xa4>
   1b80e:	e7c6      	b.n	1b79e <dmConnSmActConnOpened+0x52>
   1b810:	1000707c 	.word	0x1000707c
   1b814:	10007038 	.word	0x10007038
   1b818:	10006fa8 	.word	0x10006fa8

0001b81c <dmConnSmActConnClosed>:
{
   1b81c:	b570      	push	{r4, r5, r6, lr}
   1b81e:	4604      	mov	r4, r0
   1b820:	460d      	mov	r5, r1
  dmDevPassEvtToConnCte(DM_CONN_CLOSE_IND, pCcb->connId);
   1b822:	2028      	movs	r0, #40	; 0x28
   1b824:	7c21      	ldrb	r1, [r4, #16]
   1b826:	f000 fe0f 	bl	1c448 <dmDevPassEvtToConnCte>
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   1b82a:	7c21      	ldrb	r1, [r4, #16]
   1b82c:	4812      	ldr	r0, [pc, #72]	; (1b878 <dmConnSmActConnClosed+0x5c>)
   1b82e:	f7fc fdb7 	bl	183a0 <WsfTrace>
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
   1b832:	7e63      	ldrb	r3, [r4, #25]
  pCcb->inUse = FALSE;
   1b834:	2200      	movs	r2, #0
   1b836:	75a2      	strb	r2, [r4, #22]
  if ((pCcb->role == DM_ROLE_MASTER) && (dmConnNum() == 0))
   1b838:	b913      	cbnz	r3, 1b840 <dmConnSmActConnClosed+0x24>
    if (pCcb->inUse)
   1b83a:	4b10      	ldr	r3, [pc, #64]	; (1b87c <dmConnSmActConnClosed+0x60>)
   1b83c:	7d9a      	ldrb	r2, [r3, #22]
   1b83e:	b162      	cbz	r2, 1b85a <dmConnSmActConnClosed+0x3e>
  pMsg->hdr.event = DM_CONN_CLOSE_IND;
   1b840:	4c0f      	ldr	r4, [pc, #60]	; (1b880 <dmConnSmActConnClosed+0x64>)
   1b842:	2328      	movs	r3, #40	; 0x28
   1b844:	70ab      	strb	r3, [r5, #2]
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   1b846:	f104 0614 	add.w	r6, r4, #20
    if (dmConnCb.connCback[i] != NULL)
   1b84a:	f854 3b04 	ldr.w	r3, [r4], #4
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   1b84e:	4628      	mov	r0, r5
    if (dmConnCb.connCback[i] != NULL)
   1b850:	b103      	cbz	r3, 1b854 <dmConnSmActConnClosed+0x38>
      (*dmConnCb.connCback[i])((dmEvt_t *) pMsg);
   1b852:	4798      	blx	r3
  for (i = 0; i < DM_CLIENT_ID_MAX; i++)
   1b854:	42b4      	cmp	r4, r6
   1b856:	d1f8      	bne.n	1b84a <dmConnSmActConnClosed+0x2e>
}
   1b858:	bd70      	pop	{r4, r5, r6, pc}
    if (pCcb->inUse)
   1b85a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   1b85e:	2a00      	cmp	r2, #0
   1b860:	d1ee      	bne.n	1b840 <dmConnSmActConnClosed+0x24>
   1b862:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
   1b866:	2b00      	cmp	r3, #0
   1b868:	d1ea      	bne.n	1b840 <dmConnSmActConnClosed+0x24>
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_CONN_CLOSE_IND, 0, 0);
   1b86a:	461a      	mov	r2, r3
   1b86c:	2128      	movs	r1, #40	; 0x28
   1b86e:	2015      	movs	r0, #21
   1b870:	f000 fdca 	bl	1c408 <dmDevPassEvtToDevPriv>
   1b874:	e7e4      	b.n	1b840 <dmConnSmActConnClosed+0x24>
   1b876:	bf00      	nop
   1b878:	00025ef8 	.word	0x00025ef8
   1b87c:	10006fa8 	.word	0x10006fa8
   1b880:	10007038 	.word	0x10007038

0001b884 <dmConnMsgHandler>:
void dmConnMsgHandler(wsfMsgHdr_t *pMsg)
{
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   1b884:	8803      	ldrh	r3, [r0, #0]
{
   1b886:	b410      	push	{r4}
  connId--;
   1b888:	3b01      	subs	r3, #1
  if (dmConnCb.ccb[connId].inUse)
   1b88a:	4c0a      	ldr	r4, [pc, #40]	; (1b8b4 <dmConnMsgHandler+0x30>)
  connId--;
   1b88c:	b2db      	uxtb	r3, r3
  if (dmConnCb.ccb[connId].inUse)
   1b88e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1b892:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   1b896:	7d92      	ldrb	r2, [r2, #22]
   1b898:	b142      	cbz	r2, 1b8ac <dmConnMsgHandler+0x28>
    return &dmConnCb.ccb[connId];
   1b89a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b89e:	4601      	mov	r1, r0
  {
    /* execute state machine */
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
   1b8a0:	eb04 1003 	add.w	r0, r4, r3, lsl #4
  }
}
   1b8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pMsg);
   1b8a8:	f000 bd46 	b.w	1c338 <dmConnSmExecute>
}
   1b8ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b8b0:	4770      	bx	lr
   1b8b2:	bf00      	nop
   1b8b4:	10006fa8 	.word	0x10006fa8

0001b8b8 <dmConn2MsgHandler>:
void dmConn2MsgHandler(wsfMsgHdr_t *pMsg)
{
  dmConnCcb_t *pCcb;

  /* look up ccb from conn id */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->param)) != NULL)
   1b8b8:	8803      	ldrh	r3, [r0, #0]
{
   1b8ba:	b530      	push	{r4, r5, lr}
  connId--;
   1b8bc:	3b01      	subs	r3, #1
  if (dmConnCb.ccb[connId].inUse)
   1b8be:	4c26      	ldr	r4, [pc, #152]	; (1b958 <dmConn2MsgHandler+0xa0>)
   1b8c0:	b2db      	uxtb	r3, r3
   1b8c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1b8c6:	eb04 1202 	add.w	r2, r4, r2, lsl #4
{
   1b8ca:	b085      	sub	sp, #20
  if (dmConnCb.ccb[connId].inUse)
   1b8cc:	7d92      	ldrb	r2, [r2, #22]
   1b8ce:	b1ca      	cbz	r2, 1b904 <dmConn2MsgHandler+0x4c>
   1b8d0:	4601      	mov	r1, r0
   1b8d2:	0058      	lsls	r0, r3, #1
  {
    dmConn2Msg_t *pConn2Msg = (dmConn2Msg_t *) pMsg;

    /* handle incoming message */
    switch (pMsg->event)
   1b8d4:	788a      	ldrb	r2, [r1, #2]
   1b8d6:	3a41      	subs	r2, #65	; 0x41
   1b8d8:	2a04      	cmp	r2, #4
   1b8da:	d813      	bhi.n	1b904 <dmConn2MsgHandler+0x4c>
   1b8dc:	e8df f002 	tbb	[pc, r2]
   1b8e0:	3127031e 	.word	0x3127031e
   1b8e4:	14          	.byte	0x14
   1b8e5:	00          	.byte	0x00

      case DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY:
        {
          hciConnSpec_t *pConnSpec = &pConn2Msg->apiRemConnParamReqReply.connSpec;

          HciLeRemoteConnParamReqReply(pCcb->handle, pConnSpec->connIntervalMin,
   1b8e6:	4403      	add	r3, r0
   1b8e8:	898a      	ldrh	r2, [r1, #12]
   1b8ea:	89cd      	ldrh	r5, [r1, #14]
   1b8ec:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1b8f0:	894c      	ldrh	r4, [r1, #10]
   1b8f2:	8998      	ldrh	r0, [r3, #12]
   1b8f4:	e9cd 2501 	strd	r2, r5, [sp, #4]
   1b8f8:	890b      	ldrh	r3, [r1, #8]
   1b8fa:	88ca      	ldrh	r2, [r1, #6]
   1b8fc:	8889      	ldrh	r1, [r1, #4]
   1b8fe:	9400      	str	r4, [sp, #0]
   1b900:	f7f4 ff0c 	bl	1071c <HciLeRemoteConnParamReqReply>
      default:
        /* should never get here */
        break;
    }
  }
}
   1b904:	b005      	add	sp, #20
   1b906:	bd30      	pop	{r4, r5, pc}
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
   1b908:	4418      	add	r0, r3
   1b90a:	eb04 1300 	add.w	r3, r4, r0, lsl #4
   1b90e:	8889      	ldrh	r1, [r1, #4]
   1b910:	8998      	ldrh	r0, [r3, #12]
}
   1b912:	b005      	add	sp, #20
   1b914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciWriteAuthPayloadTimeout(pCcb->handle, pConn2Msg->apiWriteAuthPayloadTo.timeout);
   1b918:	f7f5 bd88 	b.w	1142c <HciWriteAuthPayloadTimeout>
        HciReadRssiCmd(pCcb->handle);
   1b91c:	4403      	add	r3, r0
   1b91e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1b922:	8998      	ldrh	r0, [r3, #12]
}
   1b924:	b005      	add	sp, #20
   1b926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciReadRssiCmd(pCcb->handle);
   1b92a:	f7f5 bc91 	b.w	11250 <HciReadRssiCmd>
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
   1b92e:	4403      	add	r3, r0
   1b930:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1b934:	7909      	ldrb	r1, [r1, #4]
   1b936:	8998      	ldrh	r0, [r3, #12]
}
   1b938:	b005      	add	sp, #20
   1b93a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        HciLeRemoteConnParamReqNegReply(pCcb->handle, pConn2Msg->apiRemConnParamReqNegReply.reason);
   1b93e:	f7f4 bf49 	b.w	107d4 <HciLeRemoteConnParamReqNegReply>
          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
   1b942:	4403      	add	r3, r0
   1b944:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1b948:	88ca      	ldrh	r2, [r1, #6]
   1b94a:	8998      	ldrh	r0, [r3, #12]
   1b94c:	8889      	ldrh	r1, [r1, #4]
}
   1b94e:	b005      	add	sp, #20
   1b950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HciLeSetDataLen(pCcb->handle, pDataLen->txOctets, pDataLen->txTime);
   1b954:	f7f4 bf76 	b.w	10844 <HciLeSetDataLen>
   1b958:	10006fa8 	.word	0x10006fa8

0001b95c <dmConn2HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConn2HciHandler(hciEvt_t *pEvent)
{
   1b95c:	b510      	push	{r4, lr}
    if (pCcb->inUse && (pCcb->handle == handle))
   1b95e:	4c66      	ldr	r4, [pc, #408]	; (1baf8 <dmConn2HciHandler+0x19c>)
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   1b960:	8801      	ldrh	r1, [r0, #0]
    if (pCcb->inUse && (pCcb->handle == handle))
   1b962:	7da2      	ldrb	r2, [r4, #22]
{
   1b964:	b084      	sub	sp, #16
   1b966:	4603      	mov	r3, r0
    if (pCcb->inUse && (pCcb->handle == handle))
   1b968:	b112      	cbz	r2, 1b970 <dmConn2HciHandler+0x14>
   1b96a:	89a0      	ldrh	r0, [r4, #12]
   1b96c:	4281      	cmp	r1, r0
   1b96e:	d014      	beq.n	1b99a <dmConn2HciHandler+0x3e>
   1b970:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
   1b974:	b11a      	cbz	r2, 1b97e <dmConn2HciHandler+0x22>
   1b976:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   1b978:	4281      	cmp	r1, r0
   1b97a:	f000 80b9 	beq.w	1baf0 <dmConn2HciHandler+0x194>
   1b97e:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
   1b982:	b122      	cbz	r2, 1b98e <dmConn2HciHandler+0x32>
   1b984:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
   1b988:	4281      	cmp	r1, r0
   1b98a:	f000 80b3 	beq.w	1baf4 <dmConn2HciHandler+0x198>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   1b98e:	485b      	ldr	r0, [pc, #364]	; (1bafc <dmConn2HciHandler+0x1a0>)
      default:
        /* should never get here */
        break;
    }
  }
}
   1b990:	b004      	add	sp, #16
   1b992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   1b996:	f7fc bd03 	b.w	183a0 <WsfTrace>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   1b99a:	4621      	mov	r1, r4
    switch (pEvent->hdr.event)
   1b99c:	789a      	ldrb	r2, [r3, #2]
   1b99e:	3a07      	subs	r2, #7
   1b9a0:	2a21      	cmp	r2, #33	; 0x21
   1b9a2:	d82b      	bhi.n	1b9fc <dmConn2HciHandler+0xa0>
   1b9a4:	e8df f002 	tbb	[pc, r2]
   1b9a8:	752a2a8e 	.word	0x752a2a8e
   1b9ac:	2a2a2a51 	.word	0x2a2a2a51
   1b9b0:	2a2a2a2a 	.word	0x2a2a2a2a
   1b9b4:	2a2a2a2a 	.word	0x2a2a2a2a
   1b9b8:	2a2a2a2a 	.word	0x2a2a2a2a
   1b9bc:	2a2a2a2a 	.word	0x2a2a2a2a
   1b9c0:	2a2a2a2a 	.word	0x2a2a2a2a
   1b9c4:	2a2a114c 	.word	0x2a2a114c
   1b9c8:	2c3a      	.short	0x2c3a
{
  hciLeDataLenChangeEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
  evt.hdr.param = pCcb->connId;
   1b9ca:	7c09      	ldrb	r1, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;
  evt.handle = pCcb->handle;
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
   1b9cc:	f8b3 c006 	ldrh.w	ip, [r3, #6]
  evt.hdr.event = DM_CONN_DATA_LEN_CHANGE_IND;
   1b9d0:	2241      	movs	r2, #65	; 0x41
   1b9d2:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.hdr.param = pCcb->connId;
   1b9d6:	f8ad 1000 	strh.w	r1, [sp]
  evt.handle = pCcb->handle;
   1b9da:	f8ad 0004 	strh.w	r0, [sp, #4]
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
   1b9de:	8918      	ldrh	r0, [r3, #8]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
   1b9e0:	8959      	ldrh	r1, [r3, #10]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
   1b9e2:	899b      	ldrh	r3, [r3, #12]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1b9e4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  evt.maxTxTime = pEvent->leDataLenChange.maxTxTime;
   1b9e8:	f8ad 0008 	strh.w	r0, [sp, #8]
  evt.maxTxOctets = pEvent->leDataLenChange.maxTxOctets;
   1b9ec:	f8ad c006 	strh.w	ip, [sp, #6]
  evt.maxRxOctets = pEvent->leDataLenChange.maxRxOctets;
   1b9f0:	f8ad 100a 	strh.w	r1, [sp, #10]
  evt.maxRxTime = pEvent->leDataLenChange.maxRxTime;
   1b9f4:	f8ad 300c 	strh.w	r3, [sp, #12]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1b9f8:	4668      	mov	r0, sp
   1b9fa:	4790      	blx	r2
}
   1b9fc:	b004      	add	sp, #16
   1b9fe:	bd10      	pop	{r4, pc}
{
  hciAuthPayloadToExpiredEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
  evt.hdr.param = pCcb->connId;
   1ba00:	7c08      	ldrb	r0, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;
  evt.handle = pEvent->authPayloadToExpired.handle;
   1ba02:	889a      	ldrh	r2, [r3, #4]
  evt.hdr.param = pCcb->connId;
   1ba04:	f8ad 0000 	strh.w	r0, [sp]
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
   1ba08:	2143      	movs	r1, #67	; 0x43

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1ba0a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  evt.hdr.event = DM_CONN_AUTH_TO_EXPIRED_IND;
   1ba0e:	f8ad 1002 	strh.w	r1, [sp, #2]
  evt.handle = pEvent->authPayloadToExpired.handle;
   1ba12:	f8ad 2004 	strh.w	r2, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1ba16:	4668      	mov	r0, sp
   1ba18:	4798      	blx	r3
}
   1ba1a:	e7ef      	b.n	1b9fc <dmConn2HciHandler+0xa0>
  evt.hdr.param = pCcb->connId;
   1ba1c:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
   1ba20:	791a      	ldrb	r2, [r3, #4]
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
   1ba22:	88d9      	ldrh	r1, [r3, #6]
  evt.hdr.param = pCcb->connId;
   1ba24:	f8ad c000 	strh.w	ip, [sp]
  evt.hdr.event = DM_CONN_WRITE_AUTH_TO_IND;
   1ba28:	2042      	movs	r0, #66	; 0x42
   1ba2a:	f8ad 0002 	strh.w	r0, [sp, #2]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1ba2e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  evt.handle = pEvent->writeAuthPayloadToCmdCmpl.handle;
   1ba32:	f8ad 1006 	strh.w	r1, [sp, #6]
  evt.status = pEvent->writeAuthPayloadToCmdCmpl.status;
   1ba36:	f88d 2004 	strb.w	r2, [sp, #4]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1ba3a:	4668      	mov	r0, sp
   1ba3c:	4798      	blx	r3
}
   1ba3e:	e7dd      	b.n	1b9fc <dmConn2HciHandler+0xa0>
  evt.hdr.param = pCcb->connId;
   1ba40:	7c09      	ldrb	r1, [r1, #16]
  evt.intervalMin = pEvent->leRemConnParamReq.intervalMin;
   1ba42:	f8b3 c006 	ldrh.w	ip, [r3, #6]
  evt.hdr.event = DM_REM_CONN_PARAM_REQ_IND;
   1ba46:	2240      	movs	r2, #64	; 0x40
   1ba48:	e7c3      	b.n	1b9d2 <dmConn2HciHandler+0x76>
static void dmConn2ActReadRemoteFeaturesCmpl(dmConnCcb_t *pCcb, hciEvt_t *pEvent)
{
  hciLeReadRemoteFeatCmplEvt_t evt;

  /* Save the features */
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
   1ba4a:	7a9a      	ldrb	r2, [r3, #10]
   1ba4c:	7a58      	ldrb	r0, [r3, #9]
   1ba4e:	0412      	lsls	r2, r2, #16
   1ba50:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   1ba54:	7a18      	ldrb	r0, [r3, #8]
   1ba56:	4402      	add	r2, r0
   1ba58:	7ad8      	ldrb	r0, [r3, #11]
   1ba5a:	eb02 6200 	add.w	r2, r2, r0, lsl #24
  pCcb->featuresPresent = TRUE;
   1ba5e:	2001      	movs	r0, #1
   1ba60:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
  BYTES_TO_UINT32(pCcb->features, pEvent->leReadRemoteFeatCmpl.features);
   1ba64:	628a      	str	r2, [r1, #40]	; 0x28

  /* call callback */
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
  evt.hdr.param = pCcb->connId;
   1ba66:	7c0a      	ldrb	r2, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;

  evt.status = pEvent->leReadRemoteFeatCmpl.status;
   1ba68:	f893 c004 	ldrb.w	ip, [r3, #4]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   1ba6c:	6898      	ldr	r0, [r3, #8]
   1ba6e:	68d9      	ldr	r1, [r3, #12]
  evt.hdr.param = pCcb->connId;
   1ba70:	f8ad 2000 	strh.w	r2, [sp]
  evt.handle = pEvent->leReadRemoteFeatCmpl.handle;
   1ba74:	88da      	ldrh	r2, [r3, #6]
   1ba76:	f8ad 2006 	strh.w	r2, [sp, #6]
  evt.hdr.event = DM_REMOTE_FEATURES_IND;
   1ba7a:	2357      	movs	r3, #87	; 0x57
   1ba7c:	f8ad 3002 	strh.w	r3, [sp, #2]
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   1ba80:	ab02      	add	r3, sp, #8
  evt.status = pEvent->leReadRemoteFeatCmpl.status;
   1ba82:	f88d c004 	strb.w	ip, [sp, #4]

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1ba86:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  memcpy(evt.features, pEvent->leReadRemoteFeatCmpl.features, sizeof(evt.features));
   1ba8a:	c303      	stmia	r3!, {r0, r1}
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1ba8c:	4668      	mov	r0, sp
   1ba8e:	4790      	blx	r2
}
   1ba90:	e7b4      	b.n	1b9fc <dmConn2HciHandler+0xa0>
{
  hciReadRemoteVerInfoCmplEvt_t evt;

  /* call callback */
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
  evt.hdr.param = pCcb->connId;
   1ba92:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.hdr.status = HCI_SUCCESS;

  evt.status = pEvent->readRemoteVerInfoCmpl.status;
   1ba96:	7919      	ldrb	r1, [r3, #4]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
   1ba98:	88d8      	ldrh	r0, [r3, #6]
  evt.status = pEvent->readRemoteVerInfoCmpl.status;
   1ba9a:	f88d 1004 	strb.w	r1, [sp, #4]
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
   1ba9e:	2258      	movs	r2, #88	; 0x58
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
   1baa0:	7a19      	ldrb	r1, [r3, #8]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
   1baa2:	f8d3 300a 	ldr.w	r3, [r3, #10]
  evt.hdr.event = DM_READ_REMOTE_VER_INFO_IND;
   1baa6:	f8ad 2002 	strh.w	r2, [sp, #2]
  evt.handle = pEvent->readRemoteVerInfoCmpl.handle;
   1baaa:	f8ad 0006 	strh.w	r0, [sp, #6]
  evt.subversion = pEvent->readRemoteVerInfoCmpl.subversion;

  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1baae:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
   1bab2:	f8ad c000 	strh.w	ip, [sp]
  evt.version = pEvent->readRemoteVerInfoCmpl.version;
   1bab6:	f88d 1008 	strb.w	r1, [sp, #8]
  evt.mfrName = pEvent->readRemoteVerInfoCmpl.mfrName;
   1baba:	f8cd 300a 	str.w	r3, [sp, #10]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1babe:	4668      	mov	r0, sp
   1bac0:	4790      	blx	r2
}
   1bac2:	e79b      	b.n	1b9fc <dmConn2HciHandler+0xa0>
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
   1bac4:	2239      	movs	r2, #57	; 0x39
  evt.hdr.param = pCcb->connId;
   1bac6:	f891 c010 	ldrb.w	ip, [r1, #16]
  evt.hdr.event = DM_CONN_READ_RSSI_IND;
   1baca:	f88d 2002 	strb.w	r2, [sp, #2]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
   1bace:	791a      	ldrb	r2, [r3, #4]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
   1bad0:	7a1b      	ldrb	r3, [r3, #8]
  evt.handle = pCcb->handle;
   1bad2:	f8ad 0006 	strh.w	r0, [sp, #6]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1bad6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
  evt.hdr.param = pCcb->connId;
   1bada:	f8ad c000 	strh.w	ip, [sp]
  evt.status = evt.hdr.status = (uint8_t) pEvent->readRssiCmdCmpl.status;
   1bade:	f88d 2003 	strb.w	r2, [sp, #3]
   1bae2:	f88d 2004 	strb.w	r2, [sp, #4]
  evt.rssi = pEvent->readRssiCmdCmpl.rssi;
   1bae6:	f88d 3008 	strb.w	r3, [sp, #8]
  (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1baea:	4668      	mov	r0, sp
   1baec:	4788      	blx	r1
}
   1baee:	e785      	b.n	1b9fc <dmConn2HciHandler+0xa0>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1baf0:	4903      	ldr	r1, [pc, #12]	; (1bb00 <dmConn2HciHandler+0x1a4>)
   1baf2:	e753      	b.n	1b99c <dmConn2HciHandler+0x40>
   1baf4:	4903      	ldr	r1, [pc, #12]	; (1bb04 <dmConn2HciHandler+0x1a8>)
   1baf6:	e751      	b.n	1b99c <dmConn2HciHandler+0x40>
   1baf8:	10006fa8 	.word	0x10006fa8
   1bafc:	00025f0c 	.word	0x00025f0c
   1bb00:	10006fd8 	.word	0x10006fd8
   1bb04:	10007008 	.word	0x10007008

0001bb08 <dmConnHciHandler>:
{
   1bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   1bb0a:	7883      	ldrb	r3, [r0, #2]
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1bb0c:	4d63      	ldr	r5, [pc, #396]	; (1bc9c <dmConnHciHandler+0x194>)
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   1bb0e:	1e5a      	subs	r2, r3, #1
   1bb10:	2a01      	cmp	r2, #1
{
   1bb12:	4604      	mov	r4, r0
  if ((pEvent->hdr.event == HCI_LE_CONN_CMPL_CBACK_EVT) ||
   1bb14:	d919      	bls.n	1bb4a <dmConnHciHandler+0x42>
    if (pCcb->inUse && (pCcb->handle == handle))
   1bb16:	7daa      	ldrb	r2, [r5, #22]
    pCcb = dmConnCcbByHandle(pEvent->hdr.param);
   1bb18:	8801      	ldrh	r1, [r0, #0]
    if (pCcb->inUse && (pCcb->handle == handle))
   1bb1a:	b112      	cbz	r2, 1bb22 <dmConnHciHandler+0x1a>
   1bb1c:	89aa      	ldrh	r2, [r5, #12]
   1bb1e:	428a      	cmp	r2, r1
   1bb20:	d077      	beq.n	1bc12 <dmConnHciHandler+0x10a>
   1bb22:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
   1bb26:	b112      	cbz	r2, 1bb2e <dmConnHciHandler+0x26>
   1bb28:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   1bb2a:	428a      	cmp	r2, r1
   1bb2c:	d070      	beq.n	1bc10 <dmConnHciHandler+0x108>
   1bb2e:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   1bb32:	b11a      	cbz	r2, 1bb3c <dmConnHciHandler+0x34>
   1bb34:	f8b5 206c 	ldrh.w	r2, [r5, #108]	; 0x6c
   1bb38:	428a      	cmp	r2, r1
   1bb3a:	d06d      	beq.n	1bc18 <dmConnHciHandler+0x110>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   1bb3c:	4858      	ldr	r0, [pc, #352]	; (1bca0 <dmConnHciHandler+0x198>)
   1bb3e:	f7fc fc2f 	bl	183a0 <WsfTrace>
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
   1bb42:	78a3      	ldrb	r3, [r4, #2]
   1bb44:	3336      	adds	r3, #54	; 0x36
   1bb46:	70a3      	strb	r3, [r4, #2]
}
   1bb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1bb4a:	7dab      	ldrb	r3, [r5, #22]
    if ((pCcb = dmConnCcbByBdAddr(pEvent->leConnCmpl.peerAddr)) == NULL)
   1bb4c:	f100 060a 	add.w	r6, r0, #10
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1bb50:	2b00      	cmp	r3, #0
   1bb52:	d143      	bne.n	1bbdc <dmConnHciHandler+0xd4>
   1bb54:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   1bb58:	2b00      	cmp	r3, #0
   1bb5a:	d149      	bne.n	1bbf0 <dmConnHciHandler+0xe8>
   1bb5c:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   1bb60:	2b00      	cmp	r3, #0
   1bb62:	d14d      	bne.n	1bc00 <dmConnHciHandler+0xf8>
  DM_TRACE_INFO0("dmConnIdByBdAddr not found");
   1bb64:	484f      	ldr	r0, [pc, #316]	; (1bca4 <dmConnHciHandler+0x19c>)
   1bb66:	f7fc fc1b 	bl	183a0 <WsfTrace>
    if (pCcb->inUse &&
   1bb6a:	7dab      	ldrb	r3, [r5, #22]
   1bb6c:	b9d3      	cbnz	r3, 1bba4 <dmConnHciHandler+0x9c>
   1bb6e:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
   1bb72:	b129      	cbz	r1, 1bb80 <dmConnHciHandler+0x78>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1bb74:	f895 2045 	ldrb.w	r2, [r5, #69]	; 0x45
    if (pCcb->inUse &&
   1bb78:	2a02      	cmp	r2, #2
   1bb7a:	d06d      	beq.n	1bc58 <dmConnHciHandler+0x150>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1bb7c:	2a04      	cmp	r2, #4
   1bb7e:	d066      	beq.n	1bc4e <dmConnHciHandler+0x146>
    if (pCcb->inUse &&
   1bb80:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
   1bb84:	b12a      	cbz	r2, 1bb92 <dmConnHciHandler+0x8a>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1bb86:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    if (pCcb->inUse &&
   1bb8a:	2802      	cmp	r0, #2
   1bb8c:	d05d      	beq.n	1bc4a <dmConnHciHandler+0x142>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1bb8e:	2804      	cmp	r0, #4
   1bb90:	d055      	beq.n	1bc3e <dmConnHciHandler+0x136>
        if ((pEvent->hdr.status == HCI_SUCCESS) && (pEvent->leConnCmpl.role == HCI_ROLE_SLAVE))
   1bb92:	78e0      	ldrb	r0, [r4, #3]
   1bb94:	2800      	cmp	r0, #0
   1bb96:	d14c      	bne.n	1bc32 <dmConnHciHandler+0x12a>
   1bb98:	7a27      	ldrb	r7, [r4, #8]
   1bb9a:	2f01      	cmp	r7, #1
   1bb9c:	d03e      	beq.n	1bc1c <dmConnHciHandler+0x114>
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
   1bb9e:	2338      	movs	r3, #56	; 0x38
   1bba0:	70a3      	strb	r3, [r4, #2]
}
   1bba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1bba4:	7d6a      	ldrb	r2, [r5, #21]
    if (pCcb->inUse &&
   1bba6:	2a02      	cmp	r2, #2
   1bba8:	d006      	beq.n	1bbb8 <dmConnHciHandler+0xb0>
        ((pCcb->state == DM_CONN_SM_ST_ACCEPTING) ||
   1bbaa:	2a04      	cmp	r2, #4
   1bbac:	d1df      	bne.n	1bb6e <dmConnHciHandler+0x66>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   1bbae:	89a9      	ldrh	r1, [r5, #12]
   1bbb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bbb4:	4291      	cmp	r1, r2
   1bbb6:	d1da      	bne.n	1bb6e <dmConnHciHandler+0x66>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   1bbb8:	4d38      	ldr	r5, [pc, #224]	; (1bc9c <dmConnHciHandler+0x194>)
      DM_TRACE_INFO1("dmConnCmplStates %d", pCcb->connId);
   1bbba:	7c29      	ldrb	r1, [r5, #16]
   1bbbc:	483a      	ldr	r0, [pc, #232]	; (1bca8 <dmConnHciHandler+0x1a0>)
   1bbbe:	f7fc fbef 	bl	183a0 <WsfTrace>
    if (pEvent->hdr.status == HCI_SUCCESS)
   1bbc2:	78e3      	ldrb	r3, [r4, #3]
   1bbc4:	2b00      	cmp	r3, #0
   1bbc6:	d137      	bne.n	1bc38 <dmConnHciHandler+0x130>
      pEvent->hdr.event =  DM_CONN_MSG_HCI_LE_CONN_CMPL;
   1bbc8:	2338      	movs	r3, #56	; 0x38
   1bbca:	70a3      	strb	r3, [r4, #2]
    pEvent->hdr.param = pCcb->connId;
   1bbcc:	7c2b      	ldrb	r3, [r5, #16]
   1bbce:	8023      	strh	r3, [r4, #0]
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
   1bbd0:	4621      	mov	r1, r4
   1bbd2:	4628      	mov	r0, r5
}
   1bbd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dmConnSmExecute(pCcb, (dmConnMsg_t *) pEvent);
   1bbd8:	f000 bbae 	b.w	1c338 <dmConnSmExecute>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1bbdc:	4631      	mov	r1, r6
   1bbde:	4628      	mov	r0, r5
   1bbe0:	f7f7 fba4 	bl	1332c <BdaCmp>
   1bbe4:	2800      	cmp	r0, #0
   1bbe6:	d1ec      	bne.n	1bbc2 <dmConnHciHandler+0xba>
   1bbe8:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   1bbec:	2b00      	cmp	r3, #0
   1bbee:	d0b5      	beq.n	1bb5c <dmConnHciHandler+0x54>
   1bbf0:	482e      	ldr	r0, [pc, #184]	; (1bcac <dmConnHciHandler+0x1a4>)
   1bbf2:	4631      	mov	r1, r6
   1bbf4:	f7f7 fb9a 	bl	1332c <BdaCmp>
   1bbf8:	2800      	cmp	r0, #0
   1bbfa:	d0af      	beq.n	1bb5c <dmConnHciHandler+0x54>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1bbfc:	4d2b      	ldr	r5, [pc, #172]	; (1bcac <dmConnHciHandler+0x1a4>)
   1bbfe:	e7e0      	b.n	1bbc2 <dmConnHciHandler+0xba>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1bc00:	482b      	ldr	r0, [pc, #172]	; (1bcb0 <dmConnHciHandler+0x1a8>)
   1bc02:	4631      	mov	r1, r6
   1bc04:	f7f7 fb92 	bl	1332c <BdaCmp>
   1bc08:	2800      	cmp	r0, #0
   1bc0a:	d0ab      	beq.n	1bb64 <dmConnHciHandler+0x5c>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1bc0c:	4d28      	ldr	r5, [pc, #160]	; (1bcb0 <dmConnHciHandler+0x1a8>)
   1bc0e:	e7d8      	b.n	1bbc2 <dmConnHciHandler+0xba>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1bc10:	4d26      	ldr	r5, [pc, #152]	; (1bcac <dmConnHciHandler+0x1a4>)
    pEvent->hdr.event = DM_CONN_HCI_EVT_2_MSG(pEvent->hdr.event);
   1bc12:	3336      	adds	r3, #54	; 0x36
   1bc14:	70a3      	strb	r3, [r4, #2]
   1bc16:	e7d9      	b.n	1bbcc <dmConnHciHandler+0xc4>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1bc18:	4d25      	ldr	r5, [pc, #148]	; (1bcb0 <dmConnHciHandler+0x1a8>)
   1bc1a:	e7fa      	b.n	1bc12 <dmConnHciHandler+0x10a>
    if (pCcb->inUse == FALSE)
   1bc1c:	2b00      	cmp	r3, #0
   1bc1e:	d037      	beq.n	1bc90 <dmConnHciHandler+0x188>
   1bc20:	b1e1      	cbz	r1, 1bc5c <dmConnHciHandler+0x154>
   1bc22:	2a00      	cmp	r2, #0
   1bc24:	d037      	beq.n	1bc96 <dmConnHciHandler+0x18e>
  DM_TRACE_ERR0("dmConnCcbAlloc failed");
   1bc26:	4823      	ldr	r0, [pc, #140]	; (1bcb4 <dmConnHciHandler+0x1ac>)
   1bc28:	f7fc fbba 	bl	183a0 <WsfTrace>
    if (pEvent->hdr.status == HCI_SUCCESS)
   1bc2c:	78e3      	ldrb	r3, [r4, #3]
   1bc2e:	2b00      	cmp	r3, #0
   1bc30:	d0b5      	beq.n	1bb9e <dmConnHciHandler+0x96>
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
   1bc32:	2337      	movs	r3, #55	; 0x37
   1bc34:	70a3      	strb	r3, [r4, #2]
}
   1bc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pEvent->hdr.event = DM_CONN_MSG_HCI_LE_CONN_CMPL_FAIL;
   1bc38:	2337      	movs	r3, #55	; 0x37
   1bc3a:	70a3      	strb	r3, [r4, #2]
   1bc3c:	e7c6      	b.n	1bbcc <dmConnHciHandler+0xc4>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   1bc3e:	f8b5 506c 	ldrh.w	r5, [r5, #108]	; 0x6c
   1bc42:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1bc46:	4285      	cmp	r5, r0
   1bc48:	d1a3      	bne.n	1bb92 <dmConnHciHandler+0x8a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1bc4a:	4d19      	ldr	r5, [pc, #100]	; (1bcb0 <dmConnHciHandler+0x1a8>)
   1bc4c:	e7b5      	b.n	1bbba <dmConnHciHandler+0xb2>
         ((pCcb->state == DM_CONN_SM_ST_DISCONNECTING) && (pCcb->handle == DM_CONN_HCI_HANDLE_NONE))))
   1bc4e:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
   1bc50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bc54:	4290      	cmp	r0, r2
   1bc56:	d193      	bne.n	1bb80 <dmConnHciHandler+0x78>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1bc58:	4d14      	ldr	r5, [pc, #80]	; (1bcac <dmConnHciHandler+0x1a4>)
   1bc5a:	e7ae      	b.n	1bbba <dmConnHciHandler+0xb2>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   1bc5c:	4d13      	ldr	r5, [pc, #76]	; (1bcac <dmConnHciHandler+0x1a4>)
      memset(pCcb, 0, sizeof(dmConnCcb_t));
   1bc5e:	2230      	movs	r2, #48	; 0x30
   1bc60:	4628      	mov	r0, r5
   1bc62:	2100      	movs	r1, #0
   1bc64:	f005 fa86 	bl	21174 <memset>
      BdaCpy(pCcb->peerAddr, pAddr);
   1bc68:	4631      	mov	r1, r6
   1bc6a:	4628      	mov	r0, r5
   1bc6c:	f7f7 fb58 	bl	13320 <BdaCpy>
      pCcb->updating = FALSE;
   1bc70:	2300      	movs	r3, #0
      pCcb->connId = i + 1;
   1bc72:	1c79      	adds	r1, r7, #1
   1bc74:	b2c9      	uxtb	r1, r1
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   1bc76:	f64f 72ff 	movw	r2, #65535	; 0xffff
      pCcb->updating = FALSE;
   1bc7a:	746b      	strb	r3, [r5, #17]
      pCcb->featuresPresent = FALSE;
   1bc7c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      pCcb->inUse = TRUE;
   1bc80:	2301      	movs	r3, #1
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   1bc82:	480d      	ldr	r0, [pc, #52]	; (1bcb8 <dmConnHciHandler+0x1b0>)
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   1bc84:	81aa      	strh	r2, [r5, #12]
      pCcb->connId = i + 1;
   1bc86:	7429      	strb	r1, [r5, #16]
      pCcb->inUse = TRUE;
   1bc88:	75ab      	strb	r3, [r5, #22]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   1bc8a:	f7fc fb89 	bl	183a0 <WsfTrace>
      return pCcb;
   1bc8e:	e798      	b.n	1bbc2 <dmConnHciHandler+0xba>
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   1bc90:	4d02      	ldr	r5, [pc, #8]	; (1bc9c <dmConnHciHandler+0x194>)
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   1bc92:	461f      	mov	r7, r3
   1bc94:	e7e3      	b.n	1bc5e <dmConnHciHandler+0x156>
   1bc96:	4d06      	ldr	r5, [pc, #24]	; (1bcb0 <dmConnHciHandler+0x1a8>)
   1bc98:	2702      	movs	r7, #2
   1bc9a:	e7e0      	b.n	1bc5e <dmConnHciHandler+0x156>
   1bc9c:	10006fa8 	.word	0x10006fa8
   1bca0:	00025f0c 	.word	0x00025f0c
   1bca4:	00025f30 	.word	0x00025f30
   1bca8:	00025f4c 	.word	0x00025f4c
   1bcac:	10006fd8 	.word	0x10006fd8
   1bcb0:	10007008 	.word	0x10007008
   1bcb4:	00025f74 	.word	0x00025f74
   1bcb8:	00025f60 	.word	0x00025f60

0001bcbc <dmConnReset>:
{
   1bcbc:	b530      	push	{r4, r5, lr}
    if (pCcb->inUse)
   1bcbe:	4d25      	ldr	r5, [pc, #148]	; (1bd54 <dmConnReset+0x98>)
{
   1bcc0:	b085      	sub	sp, #20
    if (pCcb->inUse)
   1bcc2:	7dab      	ldrb	r3, [r5, #22]
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
   1bcc4:	2000      	movs	r0, #0
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
   1bcc6:	2103      	movs	r1, #3
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
   1bcc8:	2216      	movs	r2, #22
  disconnectCmpl.hdr.status = disconnectCmpl.status = HCI_SUCCESS;
   1bcca:	f88d 0008 	strb.w	r0, [sp, #8]
  disconnectCmpl.hdr.event = HCI_DISCONNECT_CMPL_CBACK_EVT;
   1bcce:	f8ad 1006 	strh.w	r1, [sp, #6]
  disconnectCmpl.reason = HCI_ERR_LOCAL_TERMINATED;
   1bcd2:	f88d 200c 	strb.w	r2, [sp, #12]
    if (pCcb->inUse)
   1bcd6:	b9d3      	cbnz	r3, 1bd0e <dmConnReset+0x52>
   1bcd8:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   1bcdc:	bb1b      	cbnz	r3, 1bd26 <dmConnReset+0x6a>
   1bcde:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   1bce2:	bb63      	cbnz	r3, 1bd3e <dmConnReset+0x82>
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   1bce4:	4c1c      	ldr	r4, [pc, #112]	; (1bd58 <dmConnReset+0x9c>)
   1bce6:	4b1d      	ldr	r3, [pc, #116]	; (1bd5c <dmConnReset+0xa0>)
   1bce8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1bcec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    dmConnCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
   1bcf0:	f04f 1230 	mov.w	r2, #3145776	; 0x300030
    dmConnCb.scanWindow[i] = DM_GAP_SCAN_FAST_WINDOW;
   1bcf4:	e9c5 222f 	strd	r2, r2, [r5, #188]	; 0xbc
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   1bcf8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1bcfc:	330c      	adds	r3, #12
  dmCb.initFiltPolicy = HCI_FILT_NONE;
   1bcfe:	4c18      	ldr	r4, [pc, #96]	; (1bd60 <dmConnReset+0xa4>)
    dmConnCb.connSpec[i] = dmConnSpecDefaults;
   1bd00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  dmCb.initFiltPolicy = HCI_FILT_NONE;
   1bd04:	2300      	movs	r3, #0
   1bd06:	7523      	strb	r3, [r4, #20]
  dmCb.connAddrType = DM_ADDR_PUBLIC;
   1bd08:	7363      	strb	r3, [r4, #13]
}
   1bd0a:	b005      	add	sp, #20
   1bd0c:	bd30      	pop	{r4, r5, pc}
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   1bd0e:	89ab      	ldrh	r3, [r5, #12]
   1bd10:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   1bd14:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   1bd16:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   1bd1a:	f7ff fef5 	bl	1bb08 <dmConnHciHandler>
    if (pCcb->inUse)
   1bd1e:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
   1bd22:	2b00      	cmp	r3, #0
   1bd24:	d0db      	beq.n	1bcde <dmConnReset+0x22>
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   1bd26:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
   1bd28:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   1bd2c:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   1bd2e:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   1bd32:	f7ff fee9 	bl	1bb08 <dmConnHciHandler>
    if (pCcb->inUse)
   1bd36:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   1bd3a:	2b00      	cmp	r3, #0
   1bd3c:	d0d2      	beq.n	1bce4 <dmConnReset+0x28>
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   1bd3e:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   1bd42:	f8ad 300a 	strh.w	r3, [sp, #10]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   1bd46:	a801      	add	r0, sp, #4
      disconnectCmpl.hdr.param = disconnectCmpl.handle = pCcb->handle;
   1bd48:	f8ad 3004 	strh.w	r3, [sp, #4]
      dmConnHciHandler((hciEvt_t *) &disconnectCmpl);
   1bd4c:	f7ff fedc 	bl	1bb08 <dmConnHciHandler>
   1bd50:	e7c8      	b.n	1bce4 <dmConnReset+0x28>
   1bd52:	bf00      	nop
   1bd54:	10006fa8 	.word	0x10006fa8
   1bd58:	00025fd8 	.word	0x00025fd8
   1bd5c:	1000704c 	.word	0x1000704c
   1bd60:	1000707c 	.word	0x1000707c

0001bd64 <dmConnCcbByHandle>:
{
   1bd64:	b508      	push	{r3, lr}
    if (pCcb->inUse && (pCcb->handle == handle))
   1bd66:	4b0f      	ldr	r3, [pc, #60]	; (1bda4 <dmConnCcbByHandle+0x40>)
   1bd68:	7d9a      	ldrb	r2, [r3, #22]
{
   1bd6a:	4601      	mov	r1, r0
    if (pCcb->inUse && (pCcb->handle == handle))
   1bd6c:	b112      	cbz	r2, 1bd74 <dmConnCcbByHandle+0x10>
   1bd6e:	899a      	ldrh	r2, [r3, #12]
   1bd70:	4282      	cmp	r2, r0
   1bd72:	d011      	beq.n	1bd98 <dmConnCcbByHandle+0x34>
   1bd74:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   1bd78:	b112      	cbz	r2, 1bd80 <dmConnCcbByHandle+0x1c>
   1bd7a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   1bd7c:	428a      	cmp	r2, r1
   1bd7e:	d00d      	beq.n	1bd9c <dmConnCcbByHandle+0x38>
   1bd80:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   1bd84:	b11a      	cbz	r2, 1bd8e <dmConnCcbByHandle+0x2a>
   1bd86:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
   1bd8a:	428b      	cmp	r3, r1
   1bd8c:	d008      	beq.n	1bda0 <dmConnCcbByHandle+0x3c>
  DM_TRACE_WARN1("dmConnCcbByHandle not found 0x%04x", handle);
   1bd8e:	4806      	ldr	r0, [pc, #24]	; (1bda8 <dmConnCcbByHandle+0x44>)
   1bd90:	f7fc fb06 	bl	183a0 <WsfTrace>
  return NULL;
   1bd94:	2000      	movs	r0, #0
}
   1bd96:	bd08      	pop	{r3, pc}
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   1bd98:	4618      	mov	r0, r3
}
   1bd9a:	bd08      	pop	{r3, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1bd9c:	4803      	ldr	r0, [pc, #12]	; (1bdac <dmConnCcbByHandle+0x48>)
}
   1bd9e:	bd08      	pop	{r3, pc}
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1bda0:	4803      	ldr	r0, [pc, #12]	; (1bdb0 <dmConnCcbByHandle+0x4c>)
}
   1bda2:	bd08      	pop	{r3, pc}
   1bda4:	10006fa8 	.word	0x10006fa8
   1bda8:	00025f0c 	.word	0x00025f0c
   1bdac:	10006fd8 	.word	0x10006fd8
   1bdb0:	10007008 	.word	0x10007008

0001bdb4 <dmConnCcbById>:
  connId--;
   1bdb4:	3801      	subs	r0, #1
   1bdb6:	b2c3      	uxtb	r3, r0
  if (dmConnCb.ccb[connId].inUse)
   1bdb8:	4904      	ldr	r1, [pc, #16]	; (1bdcc <dmConnCcbById+0x18>)
   1bdba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1bdbe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1bdc2:	7d90      	ldrb	r0, [r2, #22]
   1bdc4:	b100      	cbz	r0, 1bdc8 <dmConnCcbById+0x14>
    return &dmConnCb.ccb[connId];
   1bdc6:	4610      	mov	r0, r2
}
   1bdc8:	4770      	bx	lr
   1bdca:	bf00      	nop
   1bdcc:	10006fa8 	.word	0x10006fa8

0001bdd0 <dmConnOpenAccept>:
{
   1bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1bdd4:	4c52      	ldr	r4, [pc, #328]	; (1bf20 <dmConnOpenAccept+0x150>)
{
   1bdd6:	b085      	sub	sp, #20
   1bdd8:	461e      	mov	r6, r3
   1bdda:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1bdde:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
   1bde2:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
   1bde6:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
   1bdea:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1bdec:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
   1bdf0:	9203      	str	r2, [sp, #12]
  WsfTaskLock();
   1bdf2:	f7fb ff97 	bl	17d24 <WsfTaskLock>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1bdf6:	7da3      	ldrb	r3, [r4, #22]
   1bdf8:	b9f3      	cbnz	r3, 1be38 <dmConnOpenAccept+0x68>
   1bdfa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1bdfe:	2b00      	cmp	r3, #0
   1be00:	d151      	bne.n	1bea6 <dmConnOpenAccept+0xd6>
   1be02:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   1be06:	2b00      	cmp	r3, #0
   1be08:	d155      	bne.n	1beb6 <dmConnOpenAccept+0xe6>
  DM_TRACE_INFO0("dmConnIdByBdAddr not found");
   1be0a:	4846      	ldr	r0, [pc, #280]	; (1bf24 <dmConnOpenAccept+0x154>)
   1be0c:	f7fc fac8 	bl	183a0 <WsfTrace>
    if (pCcb->inUse == FALSE)
   1be10:	7da5      	ldrb	r5, [r4, #22]
   1be12:	2d00      	cmp	r5, #0
   1be14:	d064      	beq.n	1bee0 <dmConnOpenAccept+0x110>
   1be16:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1be1a:	2b00      	cmp	r3, #0
   1be1c:	d07a      	beq.n	1bf14 <dmConnOpenAccept+0x144>
   1be1e:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   1be22:	2b00      	cmp	r3, #0
   1be24:	d079      	beq.n	1bf1a <dmConnOpenAccept+0x14a>
  DM_TRACE_ERR0("dmConnCcbAlloc failed");
   1be26:	4840      	ldr	r0, [pc, #256]	; (1bf28 <dmConnOpenAccept+0x158>)
   1be28:	f7fc faba 	bl	183a0 <WsfTrace>
  WsfTaskUnlock();
   1be2c:	f7fb ff84 	bl	17d38 <WsfTaskUnlock>
  return DM_CONN_ID_NONE;
   1be30:	2000      	movs	r0, #0
}
   1be32:	b005      	add	sp, #20
   1be34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1be38:	4639      	mov	r1, r7
   1be3a:	4620      	mov	r0, r4
   1be3c:	f7f7 fa76 	bl	1332c <BdaCmp>
   1be40:	2800      	cmp	r0, #0
   1be42:	d0da      	beq.n	1bdfa <dmConnOpenAccept+0x2a>
  WsfTaskUnlock();
   1be44:	f7fb ff78 	bl	17d38 <WsfTaskUnlock>
    if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiOpen_t))) != NULL)
   1be48:	2014      	movs	r0, #20
   1be4a:	f7fb ff29 	bl	17ca0 <WsfMsgAlloc>
   1be4e:	4605      	mov	r5, r0
   1be50:	2800      	cmp	r0, #0
   1be52:	d038      	beq.n	1bec6 <dmConnOpenAccept+0xf6>
      pMsg->hdr.param = pCcb->connId;
   1be54:	7c22      	ldrb	r2, [r4, #16]
      pMsg->initPhys = initPhys;
   1be56:	9b02      	ldr	r3, [sp, #8]
      pMsg->hdr.param = pCcb->connId;
   1be58:	802a      	strh	r2, [r5, #0]
      pMsg->hdr.event = (role == DM_ROLE_MASTER) ?
   1be5a:	f1b8 0f00 	cmp.w	r8, #0
   1be5e:	bf0c      	ite	eq
   1be60:	2230      	moveq	r2, #48	; 0x30
   1be62:	2232      	movne	r2, #50	; 0x32
      pMsg->initPhys = initPhys;
   1be64:	712b      	strb	r3, [r5, #4]
      pMsg->advHandle = advHandle;
   1be66:	9b03      	ldr	r3, [sp, #12]
   1be68:	716b      	strb	r3, [r5, #5]
      BdaCpy(pMsg->peerAddr, pAddr);
   1be6a:	4639      	mov	r1, r7
      pMsg->hdr.event = (role == DM_ROLE_MASTER) ?
   1be6c:	70aa      	strb	r2, [r5, #2]
      BdaCpy(pMsg->peerAddr, pAddr);
   1be6e:	f105 000b 	add.w	r0, r5, #11
      pMsg->advType = advType;
   1be72:	71ae      	strb	r6, [r5, #6]
      pMsg->duration = duration;
   1be74:	f8a5 9008 	strh.w	r9, [r5, #8]
      pMsg->maxEaEvents = maxEaEvents;
   1be78:	f885 a00a 	strb.w	sl, [r5, #10]
      BdaCpy(pMsg->peerAddr, pAddr);
   1be7c:	f7f7 fa50 	bl	13320 <BdaCpy>
      WsfMsgSend(dmCb.handlerId, pMsg);
   1be80:	4a2a      	ldr	r2, [pc, #168]	; (1bf2c <dmConnOpenAccept+0x15c>)
      pMsg->clientId = clientId;
   1be82:	9b01      	ldr	r3, [sp, #4]
      WsfMsgSend(dmCb.handlerId, pMsg);
   1be84:	7b10      	ldrb	r0, [r2, #12]
      pMsg->clientId = clientId;
   1be86:	74ab      	strb	r3, [r5, #18]
      WsfMsgSend(dmCb.handlerId, pMsg);
   1be88:	4629      	mov	r1, r5
      pMsg->addrType = addrType;
   1be8a:	f885 b011 	strb.w	fp, [r5, #17]
      WsfMsgSend(dmCb.handlerId, pMsg);
   1be8e:	f7fb ff13 	bl	17cb8 <WsfMsgSend>
      WsfTaskLock();
   1be92:	f7fb ff47 	bl	17d24 <WsfTaskLock>
      pCcb->role = role;
   1be96:	f884 8019 	strb.w	r8, [r4, #25]
      WsfTaskUnlock();
   1be9a:	f7fb ff4d 	bl	17d38 <WsfTaskUnlock>
      return pCcb->connId;
   1be9e:	7c20      	ldrb	r0, [r4, #16]
}
   1bea0:	b005      	add	sp, #20
   1bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1bea6:	4822      	ldr	r0, [pc, #136]	; (1bf30 <dmConnOpenAccept+0x160>)
   1bea8:	4639      	mov	r1, r7
   1beaa:	f7f7 fa3f 	bl	1332c <BdaCmp>
   1beae:	2800      	cmp	r0, #0
   1beb0:	d0a7      	beq.n	1be02 <dmConnOpenAccept+0x32>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1beb2:	4c1f      	ldr	r4, [pc, #124]	; (1bf30 <dmConnOpenAccept+0x160>)
   1beb4:	e7c6      	b.n	1be44 <dmConnOpenAccept+0x74>
    if (pCcb->inUse && BdaCmp(pCcb->peerAddr, pAddr))
   1beb6:	481f      	ldr	r0, [pc, #124]	; (1bf34 <dmConnOpenAccept+0x164>)
   1beb8:	4639      	mov	r1, r7
   1beba:	f7f7 fa37 	bl	1332c <BdaCmp>
   1bebe:	2800      	cmp	r0, #0
   1bec0:	d0a3      	beq.n	1be0a <dmConnOpenAccept+0x3a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1bec2:	4c1c      	ldr	r4, [pc, #112]	; (1bf34 <dmConnOpenAccept+0x164>)
   1bec4:	e7be      	b.n	1be44 <dmConnOpenAccept+0x74>
      WsfTaskLock();
   1bec6:	f7fb ff2d 	bl	17d24 <WsfTaskLock>
  DM_TRACE_FREE1("dmConnCcbDealloc %d", pCcb->connId);
   1beca:	7c21      	ldrb	r1, [r4, #16]
   1becc:	481a      	ldr	r0, [pc, #104]	; (1bf38 <dmConnOpenAccept+0x168>)
   1bece:	f7fc fa67 	bl	183a0 <WsfTrace>
  pCcb->inUse = FALSE;
   1bed2:	75a5      	strb	r5, [r4, #22]
      WsfTaskUnlock();
   1bed4:	f7fb ff30 	bl	17d38 <WsfTaskUnlock>
  return DM_CONN_ID_NONE;
   1bed8:	4628      	mov	r0, r5
}
   1beda:	b005      	add	sp, #20
   1bedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
   1bee0:	4c0f      	ldr	r4, [pc, #60]	; (1bf20 <dmConnOpenAccept+0x150>)
      memset(pCcb, 0, sizeof(dmConnCcb_t));
   1bee2:	2230      	movs	r2, #48	; 0x30
   1bee4:	4620      	mov	r0, r4
   1bee6:	2100      	movs	r1, #0
   1bee8:	f005 f944 	bl	21174 <memset>
      BdaCpy(pCcb->peerAddr, pAddr);
   1beec:	4639      	mov	r1, r7
   1beee:	4620      	mov	r0, r4
   1bef0:	f7f7 fa16 	bl	13320 <BdaCpy>
      pCcb->connId = i + 1;
   1bef4:	1c6b      	adds	r3, r5, #1
   1bef6:	b2d9      	uxtb	r1, r3
      pCcb->updating = FALSE;
   1bef8:	2300      	movs	r3, #0
   1befa:	7463      	strb	r3, [r4, #17]
      pCcb->featuresPresent = FALSE;
   1befc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
      pCcb->handle = DM_CONN_HCI_HANDLE_NONE;
   1bf00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bf04:	81a3      	strh	r3, [r4, #12]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   1bf06:	480d      	ldr	r0, [pc, #52]	; (1bf3c <dmConnOpenAccept+0x16c>)
      pCcb->connId = i + 1;
   1bf08:	7421      	strb	r1, [r4, #16]
      pCcb->inUse = TRUE;
   1bf0a:	2301      	movs	r3, #1
   1bf0c:	75a3      	strb	r3, [r4, #22]
      DM_TRACE_ALLOC1("dmConnCcbAlloc %d", pCcb->connId);
   1bf0e:	f7fc fa47 	bl	183a0 <WsfTrace>
      return pCcb;
   1bf12:	e797      	b.n	1be44 <dmConnOpenAccept+0x74>
  for (i = 0; i < DM_CONN_MAX; i++, pCcb++)
   1bf14:	4c06      	ldr	r4, [pc, #24]	; (1bf30 <dmConnOpenAccept+0x160>)
   1bf16:	2501      	movs	r5, #1
   1bf18:	e7e3      	b.n	1bee2 <dmConnOpenAccept+0x112>
   1bf1a:	4c06      	ldr	r4, [pc, #24]	; (1bf34 <dmConnOpenAccept+0x164>)
   1bf1c:	2502      	movs	r5, #2
   1bf1e:	e7e0      	b.n	1bee2 <dmConnOpenAccept+0x112>
   1bf20:	10006fa8 	.word	0x10006fa8
   1bf24:	00025f30 	.word	0x00025f30
   1bf28:	00025f74 	.word	0x00025f74
   1bf2c:	1000707c 	.word	0x1000707c
   1bf30:	10006fd8 	.word	0x10006fd8
   1bf34:	10007008 	.word	0x10007008
   1bf38:	00025ef8 	.word	0x00025ef8
   1bf3c:	00025f60 	.word	0x00025f60

0001bf40 <DmConnInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnInit(void)
{
   1bf40:	b410      	push	{r4}
  dmFcnIfTbl[DM_ID_CONN] = (dmFcnIf_t *) &dmConnFcnIf;
   1bf42:	4b05      	ldr	r3, [pc, #20]	; (1bf58 <DmConnInit+0x18>)
   1bf44:	4c05      	ldr	r4, [pc, #20]	; (1bf5c <DmConnInit+0x1c>)
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
   1bf46:	4a06      	ldr	r2, [pc, #24]	; (1bf60 <DmConnInit+0x20>)
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
   1bf48:	4806      	ldr	r0, [pc, #24]	; (1bf64 <DmConnInit+0x24>)
  dmConnActSet[DM_CONN_ACT_SET_MAIN] = (dmConnAct_t *) dmConnActSetMain;
   1bf4a:	4907      	ldr	r1, [pc, #28]	; (1bf68 <DmConnInit+0x28>)
   1bf4c:	6011      	str	r1, [r2, #0]
  dmFcnIfTbl[DM_ID_CONN_2] = (dmFcnIf_t *) &dmConn2FcnIf;
   1bf4e:	e9c3 4003 	strd	r4, r0, [r3, #12]
}
   1bf52:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bf56:	4770      	bx	lr
   1bf58:	10002e58 	.word	0x10002e58
   1bf5c:	00025fcc 	.word	0x00025fcc
   1bf60:	1000706c 	.word	0x1000706c
   1bf64:	00025fa8 	.word	0x00025fa8
   1bf68:	00025fb4 	.word	0x00025fb4

0001bf6c <DmConnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnRegister(uint8_t clientId, dmCback_t cback)
{
   1bf6c:	b538      	push	{r3, r4, r5, lr}
   1bf6e:	4604      	mov	r4, r0
   1bf70:	460d      	mov	r5, r1
  WSF_ASSERT(clientId < DM_CLIENT_ID_MAX);

  /* store callback */
  WsfTaskLock();
  dmConnCb.connCback[clientId] = cback;
   1bf72:	3424      	adds	r4, #36	; 0x24
  WsfTaskLock();
   1bf74:	f7fb fed6 	bl	17d24 <WsfTaskLock>
  dmConnCb.connCback[clientId] = cback;
   1bf78:	4b03      	ldr	r3, [pc, #12]	; (1bf88 <DmConnRegister+0x1c>)
   1bf7a:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
  WsfTaskUnlock();
}
   1bf7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  WsfTaskUnlock();
   1bf82:	f7fb bed9 	b.w	17d38 <WsfTaskUnlock>
   1bf86:	bf00      	nop
   1bf88:	10006fa8 	.word	0x10006fa8

0001bf8c <DmConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnClose(uint8_t clientId, dmConnId_t connId, uint8_t reason)
{
   1bf8c:	b570      	push	{r4, r5, r6, lr}
   1bf8e:	4606      	mov	r6, r0
  dmConnApiClose_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiClose_t))) != NULL)
   1bf90:	2006      	movs	r0, #6
{
   1bf92:	460d      	mov	r5, r1
   1bf94:	4614      	mov	r4, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiClose_t))) != NULL)
   1bf96:	f7fb fe83 	bl	17ca0 <WsfMsgAlloc>
   1bf9a:	b160      	cbz	r0, 1bfb6 <DmConnClose+0x2a>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_CLOSE;
   1bf9c:	2231      	movs	r2, #49	; 0x31
   1bf9e:	7082      	strb	r2, [r0, #2]
    pMsg->hdr.param = connId;
    pMsg->hdr.status = pMsg->reason = reason;
    pMsg->clientId = clientId;

    WsfMsgSend(dmCb.handlerId, pMsg);
   1bfa0:	4a05      	ldr	r2, [pc, #20]	; (1bfb8 <DmConnClose+0x2c>)
    pMsg->hdr.param = connId;
   1bfa2:	8005      	strh	r5, [r0, #0]
    pMsg->hdr.status = pMsg->reason = reason;
   1bfa4:	7104      	strb	r4, [r0, #4]
   1bfa6:	70c4      	strb	r4, [r0, #3]
    pMsg->clientId = clientId;
   1bfa8:	7146      	strb	r6, [r0, #5]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1bfaa:	4601      	mov	r1, r0
  }
}
   1bfac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1bfb0:	7b10      	ldrb	r0, [r2, #12]
   1bfb2:	f7fb be81 	b.w	17cb8 <WsfMsgSend>
}
   1bfb6:	bd70      	pop	{r4, r5, r6, pc}
   1bfb8:	1000707c 	.word	0x1000707c

0001bfbc <DmReadRemoteFeatures>:
  connId--;
   1bfbc:	3801      	subs	r0, #1
  if (dmConnCb.ccb[connId].inUse)
   1bfbe:	4a18      	ldr	r2, [pc, #96]	; (1c020 <DmReadRemoteFeatures+0x64>)
   1bfc0:	b2c3      	uxtb	r3, r0
   1bfc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1bfc6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1bfca:	7d99      	ldrb	r1, [r3, #22]
   1bfcc:	b319      	cbz	r1, 1c016 <DmReadRemoteFeatures+0x5a>
  dmConnCcb_t *pCcb;

  /* look up ccb from conn handle */
  if ((pCcb = dmConnCcbById(connId)) != NULL)
  {
    if (pCcb->featuresPresent)
   1bfce:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
   1bfd2:	b309      	cbz	r1, 1c018 <DmReadRemoteFeatures+0x5c>
{
   1bfd4:	b500      	push	{lr}
      evt.hdr.param = pCcb->connId;
      evt.hdr.status = HCI_SUCCESS;

      evt.status = HCI_SUCCESS;
      evt.handle = pCcb->handle;
      UINT32_TO_BSTREAM(p, pCcb->features);
   1bfd6:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1bfd8:	f8b3 c028 	ldrh.w	ip, [r3, #40]	; 0x28
      evt.hdr.param = pCcb->connId;
   1bfdc:	f893 e010 	ldrb.w	lr, [r3, #16]
      evt.handle = pCcb->handle;
   1bfe0:	8998      	ldrh	r0, [r3, #12]
{
   1bfe2:	b085      	sub	sp, #20
      evt.hdr.event = DM_REMOTE_FEATURES_IND;
   1bfe4:	2357      	movs	r3, #87	; 0x57
   1bfe6:	f8ad 3002 	strh.w	r3, [sp, #2]
      evt.handle = pCcb->handle;
   1bfea:	f8ad 0006 	strh.w	r0, [sp, #6]

      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1bfee:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
      evt.hdr.param = pCcb->connId;
   1bff2:	f8ad e000 	strh.w	lr, [sp]
      UINT32_TO_BSTREAM(p, pCcb->features);
   1bff6:	0c08      	lsrs	r0, r1, #16
      evt.status = HCI_SUCCESS;
   1bff8:	2200      	movs	r2, #0
      UINT32_TO_BSTREAM(p, pCcb->features);
   1bffa:	0e09      	lsrs	r1, r1, #24
   1bffc:	f88d 000a 	strb.w	r0, [sp, #10]
   1c000:	f8ad c008 	strh.w	ip, [sp, #8]
   1c004:	f88d 100b 	strb.w	r1, [sp, #11]
      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1c008:	4668      	mov	r0, sp
      evt.status = HCI_SUCCESS;
   1c00a:	f88d 2004 	strb.w	r2, [sp, #4]
      (*dmConnCb.connCback[DM_CLIENT_ID_APP])((dmEvt_t *) &evt);
   1c00e:	4798      	blx	r3
    {
      /* Request the remote features from the peer */
      HciLeReadRemoteFeatCmd(pCcb->handle);
    }
  }
}
   1c010:	b005      	add	sp, #20
   1c012:	f85d fb04 	ldr.w	pc, [sp], #4
   1c016:	4770      	bx	lr
      HciLeReadRemoteFeatCmd(pCcb->handle);
   1c018:	8998      	ldrh	r0, [r3, #12]
   1c01a:	f7f4 be11 	b.w	10c40 <HciLeReadRemoteFeatCmd>
   1c01e:	bf00      	nop
   1c020:	10006fa8 	.word	0x10006fa8

0001c024 <DmConnSetConnSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSetConnSpec(hciConnSpec_t *pConnSpec)
{
   1c024:	b510      	push	{r4, lr}
   1c026:	4604      	mov	r4, r0
  WsfTaskLock();
   1c028:	f7fb fe7c 	bl	17d24 <WsfTaskLock>
  dmConnCb.connSpec[DmInitPhyToIdx(initPhy)] = *pConnSpec;
   1c02c:	2001      	movs	r0, #1
   1c02e:	f000 fb1b 	bl	1c668 <DmInitPhyToIdx>
   1c032:	4b07      	ldr	r3, [pc, #28]	; (1c050 <DmConnSetConnSpec+0x2c>)
   1c034:	6861      	ldr	r1, [r4, #4]
   1c036:	68a2      	ldr	r2, [r4, #8]
   1c038:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
   1c03c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1c040:	6820      	ldr	r0, [r4, #0]
   1c042:	33a4      	adds	r3, #164	; 0xa4
  dmConnSetConnSpec(HCI_INIT_PHY_LE_1M_BIT, pConnSpec);
}
   1c044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dmConnCb.connSpec[DmInitPhyToIdx(initPhy)] = *pConnSpec;
   1c048:	c307      	stmia	r3!, {r0, r1, r2}
  WsfTaskUnlock();
   1c04a:	f7fb be75 	b.w	17d38 <WsfTaskUnlock>
   1c04e:	bf00      	nop
   1c050:	10006fa8 	.word	0x10006fa8

0001c054 <DmRemoteConnParamReqReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void DmRemoteConnParamReqReply(dmConnId_t connId, hciConnSpec_t *pConnSpec)
{
   1c054:	b538      	push	{r3, r4, r5, lr}
   1c056:	4605      	mov	r5, r0
  dmConnApiRemConnParamReqReply_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqReply_t))) != NULL)
   1c058:	2010      	movs	r0, #16
{
   1c05a:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqReply_t))) != NULL)
   1c05c:	f7fb fe20 	bl	17ca0 <WsfMsgAlloc>
   1c060:	b190      	cbz	r0, 1c088 <DmRemoteConnParamReqReply+0x34>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY;
    pMsg->hdr.param = connId;
   1c062:	4602      	mov	r2, r0
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_REPLY;
   1c064:	2142      	movs	r1, #66	; 0x42
   1c066:	7081      	strb	r1, [r0, #2]
    pMsg->hdr.param = connId;
   1c068:	f822 5b04 	strh.w	r5, [r2], #4
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   1c06c:	4603      	mov	r3, r0
   1c06e:	6821      	ldr	r1, [r4, #0]
   1c070:	68a0      	ldr	r0, [r4, #8]
   1c072:	6865      	ldr	r5, [r4, #4]
   1c074:	6059      	str	r1, [r3, #4]

    WsfMsgSend(dmCb.handlerId, pMsg);
   1c076:	4905      	ldr	r1, [pc, #20]	; (1c08c <DmRemoteConnParamReqReply+0x38>)
    memcpy(&pMsg->connSpec, pConnSpec, sizeof(hciConnSpec_t));
   1c078:	6055      	str	r5, [r2, #4]
   1c07a:	6090      	str	r0, [r2, #8]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c07c:	7b08      	ldrb	r0, [r1, #12]
   1c07e:	4619      	mov	r1, r3
  }
}
   1c080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c084:	f7fb be18 	b.w	17cb8 <WsfMsgSend>
}
   1c088:	bd38      	pop	{r3, r4, r5, pc}
   1c08a:	bf00      	nop
   1c08c:	1000707c 	.word	0x1000707c

0001c090 <DmRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void DmRemoteConnParamReqNegReply(dmConnId_t connId, uint8_t reason)
{
   1c090:	b538      	push	{r3, r4, r5, lr}
   1c092:	4605      	mov	r5, r0
  dmConnApiRemConnParamReqNegReply_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqNegReply_t))) != NULL)
   1c094:	2006      	movs	r0, #6
{
   1c096:	460c      	mov	r4, r1
  if ((pMsg = WsfMsgAlloc(sizeof(dmConnApiRemConnParamReqNegReply_t))) != NULL)
   1c098:	f7fb fe02 	bl	17ca0 <WsfMsgAlloc>
   1c09c:	b158      	cbz	r0, 1c0b6 <DmRemoteConnParamReqNegReply+0x26>
  {
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY;
   1c09e:	2143      	movs	r1, #67	; 0x43
    pMsg->hdr.param = connId;
    pMsg->reason = reason;

    WsfMsgSend(dmCb.handlerId, pMsg);
   1c0a0:	4a05      	ldr	r2, [pc, #20]	; (1c0b8 <DmRemoteConnParamReqNegReply+0x28>)
    pMsg->hdr.event = DM_CONN_MSG_API_REM_CONN_PARAM_REQ_NEG_REPLY;
   1c0a2:	7081      	strb	r1, [r0, #2]
    pMsg->hdr.param = connId;
   1c0a4:	4603      	mov	r3, r0
   1c0a6:	8005      	strh	r5, [r0, #0]
    pMsg->reason = reason;
   1c0a8:	7104      	strb	r4, [r0, #4]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c0aa:	4619      	mov	r1, r3
   1c0ac:	7b10      	ldrb	r0, [r2, #12]
  }
}
   1c0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c0b2:	f7fb be01 	b.w	17cb8 <WsfMsgSend>
}
   1c0b6:	bd38      	pop	{r3, r4, r5, pc}
   1c0b8:	1000707c 	.word	0x1000707c

0001c0bc <DmConnIdByHandle>:
  dmConnCcb_t   *pCcb = dmConnCb.ccb;
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
  {
    if (pCcb->inUse && (pCcb->handle == handle))
   1c0bc:	4b0d      	ldr	r3, [pc, #52]	; (1c0f4 <DmConnIdByHandle+0x38>)
   1c0be:	7d9a      	ldrb	r2, [r3, #22]
   1c0c0:	b112      	cbz	r2, 1c0c8 <DmConnIdByHandle+0xc>
   1c0c2:	899a      	ldrh	r2, [r3, #12]
   1c0c4:	4282      	cmp	r2, r0
   1c0c6:	d011      	beq.n	1c0ec <DmConnIdByHandle+0x30>
   1c0c8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
   1c0cc:	b112      	cbz	r2, 1c0d4 <DmConnIdByHandle+0x18>
   1c0ce:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   1c0d0:	4282      	cmp	r2, r0
   1c0d2:	d00a      	beq.n	1c0ea <DmConnIdByHandle+0x2e>
   1c0d4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
   1c0d8:	b12a      	cbz	r2, 1c0e6 <DmConnIdByHandle+0x2a>
   1c0da:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
   1c0de:	4283      	cmp	r3, r0
    }
  }

  // DM_TRACE_WARN1("DmConnIdByHandle not found 0x%04x", handle);

  return DM_CONN_ID_NONE;
   1c0e0:	bf18      	it	ne
   1c0e2:	2200      	movne	r2, #0
    if (pCcb->inUse && (pCcb->handle == handle))
   1c0e4:	d004      	beq.n	1c0f0 <DmConnIdByHandle+0x34>
}
   1c0e6:	4610      	mov	r0, r2
   1c0e8:	4770      	bx	lr
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1c0ea:	4b03      	ldr	r3, [pc, #12]	; (1c0f8 <DmConnIdByHandle+0x3c>)
      return pCcb->connId;
   1c0ec:	7c1a      	ldrb	r2, [r3, #16]
   1c0ee:	e7fa      	b.n	1c0e6 <DmConnIdByHandle+0x2a>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1c0f0:	4b02      	ldr	r3, [pc, #8]	; (1c0fc <DmConnIdByHandle+0x40>)
   1c0f2:	e7fb      	b.n	1c0ec <DmConnIdByHandle+0x30>
   1c0f4:	10006fa8 	.word	0x10006fa8
   1c0f8:	10006fd8 	.word	0x10006fd8
   1c0fc:	10007008 	.word	0x10007008

0001c100 <DmConnInUse>:
/*************************************************************************************************/
bool_t DmConnInUse(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].inUse;
   1c100:	4b03      	ldr	r3, [pc, #12]	; (1c110 <DmConnInUse+0x10>)
   1c102:	3801      	subs	r0, #1
   1c104:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c108:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1c10c:	7d80      	ldrb	r0, [r0, #22]
   1c10e:	4770      	bx	lr
   1c110:	10006fa8 	.word	0x10006fa8

0001c114 <DmConnPeerAddrType>:
/*************************************************************************************************/
uint8_t DmConnPeerAddrType(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddrType;
   1c114:	4b03      	ldr	r3, [pc, #12]	; (1c124 <DmConnPeerAddrType+0x10>)
   1c116:	3801      	subs	r0, #1
   1c118:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c11c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1c120:	7cc0      	ldrb	r0, [r0, #19]
   1c122:	4770      	bx	lr
   1c124:	10006fa8 	.word	0x10006fa8

0001c128 <DmConnPeerAddr>:
/*************************************************************************************************/
uint8_t *DmConnPeerAddr(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].peerAddr;
   1c128:	4b03      	ldr	r3, [pc, #12]	; (1c138 <DmConnPeerAddr+0x10>)
   1c12a:	3801      	subs	r0, #1
   1c12c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
   1c130:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1c134:	4770      	bx	lr
   1c136:	bf00      	nop
   1c138:	10006fa8 	.word	0x10006fa8

0001c13c <DmConnLocalAddrType>:
/*************************************************************************************************/
uint8_t DmConnLocalAddrType(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddrType;
   1c13c:	4b03      	ldr	r3, [pc, #12]	; (1c14c <DmConnLocalAddrType+0x10>)
   1c13e:	3801      	subs	r0, #1
   1c140:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c144:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1c148:	7d00      	ldrb	r0, [r0, #20]
   1c14a:	4770      	bx	lr
   1c14c:	10006fa8 	.word	0x10006fa8

0001c150 <DmConnLocalAddr>:
/*************************************************************************************************/
uint8_t *DmConnLocalAddr(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].localAddr;
   1c150:	4b03      	ldr	r3, [pc, #12]	; (1c160 <DmConnLocalAddr+0x10>)
   1c152:	3801      	subs	r0, #1
   1c154:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c158:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1c15c:	3006      	adds	r0, #6
   1c15e:	4770      	bx	lr
   1c160:	10006fa8 	.word	0x10006fa8

0001c164 <DmConnPeerRpa>:
/*************************************************************************************************/
uint8_t *DmConnPeerRpa(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].peerRpa;
   1c164:	4b03      	ldr	r3, [pc, #12]	; (1c174 <DmConnPeerRpa+0x10>)
   1c166:	3801      	subs	r0, #1
   1c168:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c16c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1c170:	3020      	adds	r0, #32
   1c172:	4770      	bx	lr
   1c174:	10006fa8 	.word	0x10006fa8

0001c178 <DmConnLocalRpa>:
/*************************************************************************************************/
uint8_t *DmConnLocalRpa(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId - 1].localRpa;
   1c178:	4b03      	ldr	r3, [pc, #12]	; (1c188 <DmConnLocalRpa+0x10>)
   1c17a:	3801      	subs	r0, #1
   1c17c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c180:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1c184:	301a      	adds	r0, #26
   1c186:	4770      	bx	lr
   1c188:	10006fa8 	.word	0x10006fa8

0001c18c <DmConnSecLevel>:
/*************************************************************************************************/
uint8_t DmConnSecLevel(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].secLevel;
   1c18c:	4b03      	ldr	r3, [pc, #12]	; (1c19c <DmConnSecLevel+0x10>)
   1c18e:	3801      	subs	r0, #1
   1c190:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c194:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1c198:	7dc0      	ldrb	r0, [r0, #23]
   1c19a:	4770      	bx	lr
   1c19c:	10006fa8 	.word	0x10006fa8

0001c1a0 <DmConnSetIdle>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmConnSetIdle(dmConnId_t connId, uint16_t idleMask, uint8_t idle)
{
   1c1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return dmConnCb.ccb[connId-1].inUse;
   1c1a4:	1e46      	subs	r6, r0, #1
   1c1a6:	4d13      	ldr	r5, [pc, #76]	; (1c1f4 <DmConnSetIdle+0x54>)
{
   1c1a8:	4691      	mov	r9, r2
   1c1aa:	4604      	mov	r4, r0
   1c1ac:	4688      	mov	r8, r1
  WsfTaskLock();
   1c1ae:	f7fb fdb9 	bl	17d24 <WsfTaskLock>
  return dmConnCb.ccb[connId-1].inUse;
   1c1b2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1c1b6:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   1c1ba:	0077      	lsls	r7, r6, #1

  if (DmConnInUse(connId))
   1c1bc:	7d9a      	ldrb	r2, [r3, #22]
   1c1be:	b13a      	cbz	r2, 1c1d0 <DmConnSetIdle+0x30>
  {
    if (idle == DM_CONN_IDLE)
    {
      /* clear bit if idle */
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
   1c1c0:	89d9      	ldrh	r1, [r3, #14]
    if (idle == DM_CONN_IDLE)
   1c1c2:	f1b9 0f00 	cmp.w	r9, #0
   1c1c6:	d10f      	bne.n	1c1e8 <DmConnSetIdle+0x48>
      dmConnCb.ccb[connId-1].idleMask &= ~idleMask;
   1c1c8:	ea21 0808 	bic.w	r8, r1, r8
   1c1cc:	f8a3 800e 	strh.w	r8, [r3, #14]
    }
  }

  WsfTaskUnlock();

  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   1c1d0:	443e      	add	r6, r7
   1c1d2:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  WsfTaskUnlock();
   1c1d6:	f7fb fdaf 	bl	17d38 <WsfTaskUnlock>
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   1c1da:	89ea      	ldrh	r2, [r5, #14]
   1c1dc:	4806      	ldr	r0, [pc, #24]	; (1c1f8 <DmConnSetIdle+0x58>)
   1c1de:	4621      	mov	r1, r4
}
   1c1e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DM_TRACE_INFO2("connId=%d idleMask=0x%04x", connId, dmConnCb.ccb[connId-1].idleMask);
   1c1e4:	f7fc b8dc 	b.w	183a0 <WsfTrace>
      dmConnCb.ccb[connId-1].idleMask |= idleMask;
   1c1e8:	ea48 0801 	orr.w	r8, r8, r1
   1c1ec:	f8a3 800e 	strh.w	r8, [r3, #14]
   1c1f0:	e7ee      	b.n	1c1d0 <DmConnSetIdle+0x30>
   1c1f2:	bf00      	nop
   1c1f4:	10006fa8 	.word	0x10006fa8
   1c1f8:	00025f8c 	.word	0x00025f8c

0001c1fc <DmConnCheckIdle>:
 *
 *  \return Zero if connection is idle, nonzero if busy.
 */
/*************************************************************************************************/
uint16_t DmConnCheckIdle(dmConnId_t connId)
{
   1c1fc:	b510      	push	{r4, lr}
   1c1fe:	4604      	mov	r4, r0
   1c200:	b082      	sub	sp, #8
  uint16_t idleMask;

  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  WsfTaskLock();
   1c202:	f7fb fd8f 	bl	17d24 <WsfTaskLock>
  idleMask = dmConnCb.ccb[connId-1].idleMask;
   1c206:	4b06      	ldr	r3, [pc, #24]	; (1c220 <DmConnCheckIdle+0x24>)
   1c208:	1e60      	subs	r0, r4, #1
   1c20a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c20e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1c212:	89c0      	ldrh	r0, [r0, #14]
   1c214:	9001      	str	r0, [sp, #4]
  WsfTaskUnlock();
   1c216:	f7fb fd8f 	bl	17d38 <WsfTaskUnlock>

  return idleMask;
}
   1c21a:	9801      	ldr	r0, [sp, #4]
   1c21c:	b002      	add	sp, #8
   1c21e:	bd10      	pop	{r4, pc}
   1c220:	10006fa8 	.word	0x10006fa8

0001c224 <DmConnRole>:
/*************************************************************************************************/
uint8_t DmConnRole(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return dmConnCb.ccb[connId-1].role;
   1c224:	4b03      	ldr	r3, [pc, #12]	; (1c234 <DmConnRole+0x10>)
   1c226:	3801      	subs	r0, #1
   1c228:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c22c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
   1c230:	7e40      	ldrb	r0, [r0, #25]
   1c232:	4770      	bx	lr
   1c234:	10006fa8 	.word	0x10006fa8

0001c238 <dmConnSmActCancelOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActCancelOpen(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1c238:	b510      	push	{r4, lr}
  /* cancel create connection */
  HciLeCreateConnCancelCmd();
   1c23a:	f7f4 fa3f 	bl	106bc <HciLeCreateConnCancelCmd>

  /* pass connection initiation stopped to dev priv */
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
   1c23e:	2300      	movs	r3, #0
}
   1c240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_STOP, 0, 0);
   1c244:	461a      	mov	r2, r3
   1c246:	2101      	movs	r1, #1
   1c248:	2016      	movs	r0, #22
   1c24a:	f000 b8dd 	b.w	1c408 <dmDevPassEvtToDevPriv>
   1c24e:	bf00      	nop

0001c250 <dmConnSmActUpdateMaster>:
 */
/*************************************************************************************************/
void dmConnSmActUpdateMaster(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
  /* send HCI command */
  HciLeConnUpdateCmd(pCcb->handle, &pMsg->apiUpdate.connSpec);
   1c250:	8980      	ldrh	r0, [r0, #12]
   1c252:	3104      	adds	r1, #4
   1c254:	f7f4 b970 	b.w	10538 <HciLeConnUpdateCmd>

0001c258 <dmConnSmActL2cUpdateInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmActL2cUpdateInd(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1c258:	b538      	push	{r3, r4, r5, lr}
   1c25a:	460d      	mov	r5, r1
   1c25c:	4604      	mov	r4, r0
  /* always send back response */
  L2cDmConnUpdateRsp(pMsg->l2cUpdateInd.identifier, pCcb->handle, L2C_CONN_PARAM_ACCEPTED);
   1c25e:	8981      	ldrh	r1, [r0, #12]
   1c260:	7a28      	ldrb	r0, [r5, #8]
   1c262:	2200      	movs	r2, #0
   1c264:	f7ff f84a 	bl	1b2fc <L2cDmConnUpdateRsp>

  /* send HCI command */
  HciLeConnUpdateCmd(pCcb->handle, pMsg->l2cUpdateInd.pConnSpec);
   1c268:	6869      	ldr	r1, [r5, #4]
   1c26a:	89a0      	ldrh	r0, [r4, #12]
}
   1c26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HciLeConnUpdateCmd(pCcb->handle, pMsg->l2cUpdateInd.pConnSpec);
   1c270:	f7f4 b962 	b.w	10538 <HciLeConnUpdateCmd>

0001c274 <DmL2cConnUpdateInd>:
 *  \param  pConnSpec   Connection spec parameters.
 *  \return None.
 */
/*************************************************************************************************/
void DmL2cConnUpdateInd(uint8_t identifier, uint16_t handle, hciConnSpec_t *pConnSpec)
{
   1c274:	b530      	push	{r4, r5, lr}
   1c276:	4604      	mov	r4, r0
   1c278:	b085      	sub	sp, #20
  dmConnL2cUpdateInd_t  updateInd;
  dmConnCcb_t           *pCcb;

  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
   1c27a:	4608      	mov	r0, r1
{
   1c27c:	4615      	mov	r5, r2
  if ((pCcb = dmConnCcbByHandle(handle)) != NULL)
   1c27e:	f7ff fd71 	bl	1bd64 <dmConnCcbByHandle>
   1c282:	b140      	cbz	r0, 1c296 <DmL2cConnUpdateInd+0x22>
  {
    updateInd.hdr.event = DM_CONN_MSG_L2C_UPDATE_IND;
   1c284:	2335      	movs	r3, #53	; 0x35
    updateInd.pConnSpec = pConnSpec;
    updateInd.identifier = identifier;

    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateInd);
   1c286:	a901      	add	r1, sp, #4
    updateInd.hdr.event = DM_CONN_MSG_L2C_UPDATE_IND;
   1c288:	f88d 3006 	strb.w	r3, [sp, #6]
    updateInd.pConnSpec = pConnSpec;
   1c28c:	9502      	str	r5, [sp, #8]
    updateInd.identifier = identifier;
   1c28e:	f88d 400c 	strb.w	r4, [sp, #12]
    dmConnSmExecute(pCcb, (dmConnMsg_t *) &updateInd);
   1c292:	f000 f851 	bl	1c338 <dmConnSmExecute>
  }
}
   1c296:	b005      	add	sp, #20
   1c298:	bd30      	pop	{r4, r5, pc}
   1c29a:	bf00      	nop

0001c29c <DmConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t DmConnOpen(uint8_t clientId, uint8_t initPhys, uint8_t addrType, uint8_t *pAddr)
{
   1c29c:	b510      	push	{r4, lr}
   1c29e:	b086      	sub	sp, #24
  return dmConnOpenAccept(clientId, initPhys, 0, 0, 0, 0, addrType, pAddr, DM_ROLE_MASTER);
   1c2a0:	2400      	movs	r4, #0
   1c2a2:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1c2a6:	e9cd 4201 	strd	r4, r2, [sp, #4]
   1c2aa:	9400      	str	r4, [sp, #0]
   1c2ac:	4623      	mov	r3, r4
   1c2ae:	4622      	mov	r2, r4
   1c2b0:	f7ff fd8e 	bl	1bdd0 <dmConnOpenAccept>
}
   1c2b4:	b006      	add	sp, #24
   1c2b6:	bd10      	pop	{r4, pc}

0001c2b8 <dmConnSmActOpen>:
 *
 *  \return None.
*/
/*************************************************************************************************/
void dmConnSmActOpen(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1c2b8:	e92d 41d0 	stmdb	sp!, {r4, r6, r7, r8, lr}
   1c2bc:	b089      	sub	sp, #36	; 0x24
  dmConnOpen(pMsg->apiOpen.initPhys, pMsg->apiOpen.addrType, pMsg->apiOpen.peerAddr);
   1c2be:	7c4b      	ldrb	r3, [r1, #17]
   1c2c0:	9307      	str	r3, [sp, #28]
  uint8_t phyIdx = DmScanPhyToIdx(HCI_SCAN_PHY_LE_1M_BIT);
   1c2c2:	2001      	movs	r0, #1
{
   1c2c4:	460c      	mov	r4, r1
  uint8_t phyIdx = DmScanPhyToIdx(HCI_SCAN_PHY_LE_1M_BIT);
   1c2c6:	f000 f9cb 	bl	1c660 <DmScanPhyToIdx>
  HciLeCreateConnCmd(dmConnCb.scanInterval[phyIdx], dmConnCb.scanWindow[phyIdx], dmCb.initFiltPolicy,
   1c2ca:	4f15      	ldr	r7, [pc, #84]	; (1c320 <dmConnSmActOpen+0x68>)
   1c2cc:	eb07 0240 	add.w	r2, r7, r0, lsl #1
   1c2d0:	f100 0160 	add.w	r1, r0, #96	; 0x60
   1c2d4:	f8b2 80bc 	ldrh.w	r8, [r2, #188]	; 0xbc
   1c2d8:	4a12      	ldr	r2, [pc, #72]	; (1c324 <dmConnSmActOpen+0x6c>)
   1c2da:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
   1c2de:	9106      	str	r1, [sp, #24]
  uint8_t phyIdx = DmScanPhyToIdx(HCI_SCAN_PHY_LE_1M_BIT);
   1c2e0:	4606      	mov	r6, r0
  dmConnOpen(pMsg->apiOpen.initPhys, pMsg->apiOpen.addrType, pMsg->apiOpen.peerAddr);
   1c2e2:	340b      	adds	r4, #11
  HciLeCreateConnCmd(dmConnCb.scanInterval[phyIdx], dmConnCb.scanWindow[phyIdx], dmCb.initFiltPolicy,
   1c2e4:	7b50      	ldrb	r0, [r2, #13]
   1c2e6:	7d12      	ldrb	r2, [r2, #20]
   1c2e8:	9205      	str	r2, [sp, #20]
   1c2ea:	f000 f993 	bl	1c614 <DmLlAddrType>
   1c2ee:	9400      	str	r4, [sp, #0]
   1c2f0:	f04f 0c0c 	mov.w	ip, #12
   1c2f4:	24a4      	movs	r4, #164	; 0xa4
   1c2f6:	fb1c 4406 	smlabb	r4, ip, r6, r4
   1c2fa:	443c      	add	r4, r7
   1c2fc:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   1c300:	9b07      	ldr	r3, [sp, #28]
   1c302:	9001      	str	r0, [sp, #4]
   1c304:	9402      	str	r4, [sp, #8]
   1c306:	4640      	mov	r0, r8
   1c308:	f7f4 f96c 	bl	105e4 <HciLeCreateConnCmd>
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_START, 0, 0);
   1c30c:	2300      	movs	r3, #0
   1c30e:	461a      	mov	r2, r3
   1c310:	4619      	mov	r1, r3
   1c312:	2016      	movs	r0, #22
}
   1c314:	b009      	add	sp, #36	; 0x24
   1c316:	e8bd 41d0 	ldmia.w	sp!, {r4, r6, r7, r8, lr}
  dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_CTRL, DM_DEV_PRIV_MSG_CONN_INIT_START, 0, 0);
   1c31a:	f000 b875 	b.w	1c408 <dmDevPassEvtToDevPriv>
   1c31e:	bf00      	nop
   1c320:	10006fa8 	.word	0x10006fa8
   1c324:	1000707c 	.word	0x1000707c

0001c328 <DmConnMasterInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmConnMasterInit(void)
{
  dmConnActSet[DM_CONN_ACT_SET_MASTER] = (dmConnAct_t *) dmConnActSetMaster;
   1c328:	4b01      	ldr	r3, [pc, #4]	; (1c330 <DmConnMasterInit+0x8>)
   1c32a:	4a02      	ldr	r2, [pc, #8]	; (1c334 <DmConnMasterInit+0xc>)
   1c32c:	605a      	str	r2, [r3, #4]
}
   1c32e:	4770      	bx	lr
   1c330:	1000706c 	.word	0x1000706c
   1c334:	00025fe4 	.word	0x00025fe4

0001c338 <dmConnSmExecute>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmConnSmExecute(dmConnCcb_t *pCcb, dmConnMsg_t *pMsg)
{
   1c338:	b570      	push	{r4, r5, r6, lr}
   1c33a:	4604      	mov	r4, r0
  dmConnAct_t       *actSet;
  uint8_t           action;
  uint8_t           event;

  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   1c33c:	7d42      	ldrb	r2, [r0, #21]
   1c33e:	4814      	ldr	r0, [pc, #80]	; (1c390 <dmConnSmExecute+0x58>)
{
   1c340:	460d      	mov	r5, r1
  DM_TRACE_INFO2("dmConnSmExecute event=%d state=%d", pMsg->hdr.event, pCcb->state);
   1c342:	7889      	ldrb	r1, [r1, #2]
   1c344:	f7fc f82c 	bl	183a0 <WsfTrace>

  /* get the event */
  event = DM_MSG_MASK(pMsg->hdr.event);

  /* get action */
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   1c348:	7d63      	ldrb	r3, [r4, #21]
  event = DM_MSG_MASK(pMsg->hdr.event);
   1c34a:	78aa      	ldrb	r2, [r5, #2]
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   1c34c:	4911      	ldr	r1, [pc, #68]	; (1c394 <dmConnSmExecute+0x5c>)
   1c34e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1c352:	f002 020f 	and.w	r2, r2, #15
   1c356:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1c35a:	4413      	add	r3, r2
   1c35c:	eb01 0243 	add.w	r2, r1, r3, lsl #1

  /* set next state */
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
   1c360:	f811 1013 	ldrb.w	r1, [r1, r3, lsl #1]
  action = dmConnStateTbl[pCcb->state][event][DM_CONN_ACTION];
   1c364:	7853      	ldrb	r3, [r2, #1]
  pCcb->state = dmConnStateTbl[pCcb->state][event][DM_CONN_NEXT_STATE];
   1c366:	7561      	strb	r1, [r4, #21]

  /* look up action set */
  actSet = dmConnActSet[DM_CONN_ACT_SET_ID(action)];
   1c368:	4a0b      	ldr	r2, [pc, #44]	; (1c398 <dmConnSmExecute+0x60>)
   1c36a:	0919      	lsrs	r1, r3, #4
   1c36c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]

  /* if action set present */
  if (actSet != NULL)
   1c370:	b142      	cbz	r2, 1c384 <dmConnSmExecute+0x4c>
  {
    /* execute action function in action set */
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
   1c372:	f003 030f 	and.w	r3, r3, #15
   1c376:	4629      	mov	r1, r5
   1c378:	4620      	mov	r0, r4
   1c37a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  else
  {
     /* no action */
     dmConnSmActNone(pCcb, pMsg);
  }
}
   1c37e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*actSet[DM_CONN_ACT_ID(action)])(pCcb, pMsg);
   1c382:	4718      	bx	r3
     dmConnSmActNone(pCcb, pMsg);
   1c384:	4629      	mov	r1, r5
   1c386:	4620      	mov	r0, r4
}
   1c388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     dmConnSmActNone(pCcb, pMsg);
   1c38c:	f7ff b996 	b.w	1b6bc <dmConnSmActNone>
   1c390:	00025ff4 	.word	0x00025ff4
   1c394:	00026018 	.word	0x00026018
   1c398:	1000706c 	.word	0x1000706c

0001c39c <dmDevHciHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void dmDevHciHandler(hciEvt_t *pEvent)
{
  switch (pEvent->hdr.event)
   1c39c:	7883      	ldrb	r3, [r0, #2]
   1c39e:	2b13      	cmp	r3, #19
   1c3a0:	d80a      	bhi.n	1c3b8 <dmDevHciHandler+0x1c>
   1c3a2:	2b11      	cmp	r3, #17
   1c3a4:	d811      	bhi.n	1c3ca <dmDevHciHandler+0x2e>
   1c3a6:	b973      	cbnz	r3, 1c3c6 <dmDevHciHandler+0x2a>
  dmCb.resetting = FALSE;
   1c3a8:	490a      	ldr	r1, [pc, #40]	; (1c3d4 <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_RESET_CMPL_IND;
   1c3aa:	f04f 0c20 	mov.w	ip, #32
  dmCb.resetting = FALSE;
   1c3ae:	740b      	strb	r3, [r1, #16]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1c3b0:	688b      	ldr	r3, [r1, #8]
  pEvent->hdr.event = DM_RESET_CMPL_IND;
   1c3b2:	f880 c002 	strb.w	ip, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1c3b6:	4718      	bx	r3
  switch (pEvent->hdr.event)
   1c3b8:	2b14      	cmp	r3, #20
   1c3ba:	d105      	bne.n	1c3c8 <dmDevHciHandler+0x2c>
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1c3bc:	4b05      	ldr	r3, [pc, #20]	; (1c3d4 <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_HW_ERROR_IND;
   1c3be:	2166      	movs	r1, #102	; 0x66
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1c3c0:	689b      	ldr	r3, [r3, #8]
  pEvent->hdr.event = DM_HW_ERROR_IND;
   1c3c2:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1c3c4:	4718      	bx	r3
   1c3c6:	4770      	bx	lr
   1c3c8:	4770      	bx	lr
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1c3ca:	4b02      	ldr	r3, [pc, #8]	; (1c3d4 <dmDevHciHandler+0x38>)
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
   1c3cc:	2167      	movs	r1, #103	; 0x67
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1c3ce:	689b      	ldr	r3, [r3, #8]
  pEvent->hdr.event = DM_VENDOR_SPEC_IND;
   1c3d0:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pEvent);
   1c3d2:	4718      	bx	r3
   1c3d4:	1000707c 	.word	0x1000707c

0001c3d8 <dmDevMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevMsgHandler(wsfMsgHdr_t *pMsg)
{
   1c3d8:	b538      	push	{r3, r4, r5, lr}
  if (!dmCb.resetting)
   1c3da:	4b09      	ldr	r3, [pc, #36]	; (1c400 <dmDevMsgHandler+0x28>)
   1c3dc:	7c1a      	ldrb	r2, [r3, #16]
   1c3de:	b972      	cbnz	r2, 1c3fe <dmDevMsgHandler+0x26>
    dmCb.resetting = TRUE;
   1c3e0:	4c08      	ldr	r4, [pc, #32]	; (1c404 <dmDevMsgHandler+0x2c>)
   1c3e2:	2201      	movs	r2, #1
   1c3e4:	741a      	strb	r2, [r3, #16]
    for (i = 0; i < DM_NUM_IDS; i++)
   1c3e6:	f104 0538 	add.w	r5, r4, #56	; 0x38
      (*(dmFcnIfTbl[i]->reset))();
   1c3ea:	f854 3f04 	ldr.w	r3, [r4, #4]!
   1c3ee:	681b      	ldr	r3, [r3, #0]
   1c3f0:	4798      	blx	r3
    for (i = 0; i < DM_NUM_IDS; i++)
   1c3f2:	42ac      	cmp	r4, r5
   1c3f4:	d1f9      	bne.n	1c3ea <dmDevMsgHandler+0x12>
  /* execute action function */
  (*dmDevAct[DM_MSG_MASK(pMsg->event)])(pMsg);
}
   1c3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HciResetSequence();
   1c3fa:	f7f5 bcdb 	b.w	11db4 <HciResetSequence>
}
   1c3fe:	bd38      	pop	{r3, r4, r5, pc}
   1c400:	1000707c 	.word	0x1000707c
   1c404:	10002e54 	.word	0x10002e54

0001c408 <dmDevPassEvtToDevPriv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToDevPriv(uint8_t event, uint8_t param, uint8_t advHandle, bool_t connectable)
{
   1c408:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c40a:	4606      	mov	r6, r0
   1c40c:	b083      	sub	sp, #12
   1c40e:	460d      	mov	r5, r1
   1c410:	4614      	mov	r4, r2
   1c412:	461f      	mov	r7, r3
  dmDevPrivMsg_t evt;

  DM_TRACE_INFO3("dmDevPassEvtToDevPriv: event: %d, param: %d, advHandle: %d", event, param, advHandle);
   1c414:	480a      	ldr	r0, [pc, #40]	; (1c440 <dmDevPassEvtToDevPriv+0x38>)
   1c416:	4613      	mov	r3, r2
   1c418:	460a      	mov	r2, r1
   1c41a:	4631      	mov	r1, r6
   1c41c:	f7fb ffc0 	bl	183a0 <WsfTrace>
  evt.hdr.param = param;
  evt.privCtrl.advHandle = advHandle;
  evt.privCtrl.connectable = connectable;

  /* pass event to device privacy */
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   1c420:	4b08      	ldr	r3, [pc, #32]	; (1c444 <dmDevPassEvtToDevPriv+0x3c>)
  evt.hdr.event = event;
   1c422:	f88d 6002 	strb.w	r6, [sp, #2]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   1c426:	685b      	ldr	r3, [r3, #4]
  evt.hdr.param = param;
   1c428:	f8ad 5000 	strh.w	r5, [sp]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   1c42c:	689b      	ldr	r3, [r3, #8]
  evt.privCtrl.advHandle = advHandle;
   1c42e:	f88d 4004 	strb.w	r4, [sp, #4]
  evt.privCtrl.connectable = connectable;
   1c432:	f88d 7005 	strb.w	r7, [sp, #5]
  (*(dmFcnIfTbl[DM_ID_DEV_PRIV]->msgHandler))((wsfMsgHdr_t *) &evt);
   1c436:	4668      	mov	r0, sp
   1c438:	4798      	blx	r3
}
   1c43a:	b003      	add	sp, #12
   1c43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c43e:	bf00      	nop
   1c440:	0002609c 	.word	0x0002609c
   1c444:	10002e58 	.word	0x10002e58

0001c448 <dmDevPassEvtToConnCte>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmDevPassEvtToConnCte(uint8_t state, dmConnId_t connId)
{
   1c448:	b500      	push	{lr}
  evt.event = DM_CONN_CTE_MSG_STATE;
  evt.status = state;
  evt.param = connId;

  /* pass event to Connection CTE */
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   1c44a:	4b08      	ldr	r3, [pc, #32]	; (1c46c <dmDevPassEvtToConnCte+0x24>)
{
   1c44c:	b083      	sub	sp, #12
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   1c44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  evt.status = state;
   1c450:	f88d 0007 	strb.w	r0, [sp, #7]
  evt.event = DM_CONN_CTE_MSG_STATE;
   1c454:	22d7      	movs	r2, #215	; 0xd7
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   1c456:	689b      	ldr	r3, [r3, #8]
  evt.event = DM_CONN_CTE_MSG_STATE;
   1c458:	f88d 2006 	strb.w	r2, [sp, #6]
  evt.param = connId;
   1c45c:	f8ad 1004 	strh.w	r1, [sp, #4]
  (*(dmFcnIfTbl[DM_ID_CONN_CTE]->msgHandler))(&evt);
   1c460:	a801      	add	r0, sp, #4
   1c462:	4798      	blx	r3
}
   1c464:	b003      	add	sp, #12
   1c466:	f85d fb04 	ldr.w	pc, [sp], #4
   1c46a:	bf00      	nop
   1c46c:	10002e58 	.word	0x10002e58

0001c470 <DmDevReset>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevReset(void)
{
   1c470:	b508      	push	{r3, lr}
  wsfMsgHdr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   1c472:	2004      	movs	r0, #4
   1c474:	f7fb fc14 	bl	17ca0 <WsfMsgAlloc>
   1c478:	b140      	cbz	r0, 1c48c <DmDevReset+0x1c>
  {
    pMsg->event = DM_DEV_MSG_API_RESET;

    WsfMsgSend(dmCb.handlerId, pMsg);
   1c47a:	4b05      	ldr	r3, [pc, #20]	; (1c490 <DmDevReset+0x20>)
    pMsg->event = DM_DEV_MSG_API_RESET;
   1c47c:	2270      	movs	r2, #112	; 0x70
   1c47e:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c480:	4601      	mov	r1, r0
   1c482:	7b18      	ldrb	r0, [r3, #12]
  }
}
   1c484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c488:	f7fb bc16 	b.w	17cb8 <WsfMsgSend>
}
   1c48c:	bd08      	pop	{r3, pc}
   1c48e:	bf00      	nop
   1c490:	1000707c 	.word	0x1000707c

0001c494 <DmDevSetFilterPolicy>:
/*************************************************************************************************/
bool_t dmDevSetFilterPolicy(uint8_t advHandle, uint8_t mode, uint8_t policy)
{
  bool_t policySet = FALSE;

  switch (mode)
   1c494:	2803      	cmp	r0, #3
   1c496:	d805      	bhi.n	1c4a4 <DmDevSetFilterPolicy+0x10>
   1c498:	e8df f000 	tbb	[pc, r0]
   1c49c:	02060c11 	.word	0x02060c11
      }
      break;

    case DM_FILT_POLICY_MODE_SYNC:
      /* if Synchronization filter policy is valid */
      if (policy <= HCI_FILT_PER_ADV_LIST)
   1c4a0:	2901      	cmp	r1, #1
   1c4a2:	d912      	bls.n	1c4ca <DmDevSetFilterPolicy+0x36>
  bool_t policySet = FALSE;
   1c4a4:	2000      	movs	r0, #0
 */
/*************************************************************************************************/
bool_t DmDevSetFilterPolicy(uint8_t mode, uint8_t policy)
{
  return dmDevSetFilterPolicy(DM_ADV_HANDLE_DEFAULT, mode, policy);
}
   1c4a6:	4770      	bx	lr
      if (policy <= HCI_FILT_WHITE_LIST)
   1c4a8:	2901      	cmp	r1, #1
   1c4aa:	d8fb      	bhi.n	1c4a4 <DmDevSetFilterPolicy+0x10>
        dmCb.initFiltPolicy = policy;
   1c4ac:	4b0b      	ldr	r3, [pc, #44]	; (1c4dc <DmDevSetFilterPolicy+0x48>)
        policySet = TRUE;
   1c4ae:	2001      	movs	r0, #1
        dmCb.initFiltPolicy = policy;
   1c4b0:	7519      	strb	r1, [r3, #20]
        policySet = TRUE;
   1c4b2:	4770      	bx	lr
      if (policy <= HCI_FILT_WHITE_LIST_RES_INIT)
   1c4b4:	2903      	cmp	r1, #3
   1c4b6:	d8f5      	bhi.n	1c4a4 <DmDevSetFilterPolicy+0x10>
        dmCb.scanFiltPolicy = policy;
   1c4b8:	4b08      	ldr	r3, [pc, #32]	; (1c4dc <DmDevSetFilterPolicy+0x48>)
   1c4ba:	74d9      	strb	r1, [r3, #19]
        policySet = TRUE;
   1c4bc:	4770      	bx	lr
      if (policy <= HCI_ADV_FILT_ALL)
   1c4be:	2903      	cmp	r1, #3
   1c4c0:	d8f1      	bhi.n	1c4a6 <DmDevSetFilterPolicy+0x12>
        dmCb.advFiltPolicy[advHandle] = policy;
   1c4c2:	4b06      	ldr	r3, [pc, #24]	; (1c4dc <DmDevSetFilterPolicy+0x48>)
        policySet = TRUE;
   1c4c4:	2001      	movs	r0, #1
        dmCb.advFiltPolicy[advHandle] = policy;
   1c4c6:	7459      	strb	r1, [r3, #17]
        policySet = TRUE;
   1c4c8:	4770      	bx	lr
        dmCb.syncOptions |= policy;
   1c4ca:	4a04      	ldr	r2, [pc, #16]	; (1c4dc <DmDevSetFilterPolicy+0x48>)
        dmCb.syncOptions &= ~HCI_OPTIONS_FILT_POLICY_BIT;
   1c4cc:	7d53      	ldrb	r3, [r2, #21]
   1c4ce:	f023 0301 	bic.w	r3, r3, #1
        dmCb.syncOptions |= policy;
   1c4d2:	4319      	orrs	r1, r3
   1c4d4:	2001      	movs	r0, #1
   1c4d6:	7551      	strb	r1, [r2, #21]
  return policySet;
   1c4d8:	4770      	bx	lr
   1c4da:	bf00      	nop
   1c4dc:	1000707c 	.word	0x1000707c

0001c4e0 <DmDevVsInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmDevVsInit(uint8_t param)
{
  HciVsInit(param);
   1c4e0:	f7f3 bf78 	b.w	103d4 <HciVsInit>

0001c4e4 <DmDevPrivStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmDevPrivStart(uint16_t changeInterval)
{
   1c4e4:	b510      	push	{r4, lr}
   1c4e6:	4604      	mov	r4, r0
  dmDevPrivApiStart_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmDevPrivApiStart_t))) != NULL)
   1c4e8:	2006      	movs	r0, #6
   1c4ea:	f7fb fbd9 	bl	17ca0 <WsfMsgAlloc>
   1c4ee:	b148      	cbz	r0, 1c504 <DmDevPrivStart+0x20>
  {
    pMsg->hdr.event = DM_DEV_PRIV_MSG_API_START;
    pMsg->changeInterval = changeInterval;
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c4f0:	4b05      	ldr	r3, [pc, #20]	; (1c508 <DmDevPrivStart+0x24>)
    pMsg->changeInterval = changeInterval;
   1c4f2:	8084      	strh	r4, [r0, #4]
    pMsg->hdr.event = DM_DEV_PRIV_MSG_API_START;
   1c4f4:	2210      	movs	r2, #16
   1c4f6:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c4f8:	4601      	mov	r1, r0
  }
}
   1c4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c4fe:	7b18      	ldrb	r0, [r3, #12]
   1c500:	f7fb bbda 	b.w	17cb8 <WsfMsgSend>
}
   1c504:	bd10      	pop	{r4, pc}
   1c506:	bf00      	nop
   1c508:	1000707c 	.word	0x1000707c

0001c50c <dmHciEvtCback>:
static void dmHciEvtCback(hciEvt_t *pEvent)
{
  WSF_ASSERT(pEvent->hdr.event <= HCI_LE_CONNLESS_IQ_REPORT_CBACK_EVT);

  /* if DM not resetting or resetting but incoming event is HCI reset sequence complete event */
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
   1c50c:	4b07      	ldr	r3, [pc, #28]	; (1c52c <dmHciEvtCback+0x20>)
   1c50e:	7c1b      	ldrb	r3, [r3, #16]
   1c510:	b93b      	cbnz	r3, 1c522 <dmHciEvtCback+0x16>
   1c512:	7883      	ldrb	r3, [r0, #2]
  {
    /* route event to DM component handling function */
    (*(dmFcnIfTbl[dmHciToIdTbl[pEvent->hdr.event]]->hciHandler))(pEvent);
   1c514:	4906      	ldr	r1, [pc, #24]	; (1c530 <dmHciEvtCback+0x24>)
   1c516:	4a07      	ldr	r2, [pc, #28]	; (1c534 <dmHciEvtCback+0x28>)
   1c518:	5ccb      	ldrb	r3, [r1, r3]
   1c51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c51e:	685b      	ldr	r3, [r3, #4]
   1c520:	4718      	bx	r3
  if (!dmCb.resetting || (pEvent->hdr.event == HCI_RESET_SEQ_CMPL_CBACK_EVT))
   1c522:	7883      	ldrb	r3, [r0, #2]
   1c524:	2b00      	cmp	r3, #0
   1c526:	d0f5      	beq.n	1c514 <dmHciEvtCback+0x8>
  }
}
   1c528:	4770      	bx	lr
   1c52a:	bf00      	nop
   1c52c:	1000707c 	.word	0x1000707c
   1c530:	00026180 	.word	0x00026180
   1c534:	10002e58 	.word	0x10002e58

0001c538 <dmEmptyReset>:
 */
/*************************************************************************************************/
void dmEmptyReset(void)
{
  /* empty */
}
   1c538:	4770      	bx	lr
   1c53a:	bf00      	nop

0001c53c <dmEmptyHandler>:
 */
/*************************************************************************************************/
void dmEmptyHandler(wsfMsgHdr_t *pMsg)
{
  return;
}
   1c53c:	4770      	bx	lr
   1c53e:	bf00      	nop

0001c540 <dmDevPassHciEvtToConn>:
 */
/*************************************************************************************************/
void dmDevPassHciEvtToConn(hciEvt_t *pEvent)
{
  /* pass event to DM connection management module */
  (*(dmFcnIfTbl[DM_ID_CONN]->hciHandler))(pEvent);
   1c540:	4b01      	ldr	r3, [pc, #4]	; (1c548 <dmDevPassHciEvtToConn+0x8>)
   1c542:	68db      	ldr	r3, [r3, #12]
   1c544:	685b      	ldr	r3, [r3, #4]
   1c546:	4718      	bx	r3
   1c548:	10002e58 	.word	0x10002e58

0001c54c <DmRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmRegister(dmCback_t cback)
{
   1c54c:	b510      	push	{r4, lr}
  dmCb.cback = cback;

  /* if LESC is enabled */
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   1c54e:	4a09      	ldr	r2, [pc, #36]	; (1c574 <DmRegister+0x28>)
   1c550:	4b09      	ldr	r3, [pc, #36]	; (1c578 <DmRegister+0x2c>)
   1c552:	6a12      	ldr	r2, [r2, #32]
  dmCb.cback = cback;
   1c554:	4c09      	ldr	r4, [pc, #36]	; (1c57c <DmRegister+0x30>)
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   1c556:	429a      	cmp	r2, r3
{
   1c558:	b09a      	sub	sp, #104	; 0x68
  dmCb.cback = cback;
   1c55a:	60a0      	str	r0, [r4, #8]
  if (dmFcnIfTbl[DM_ID_LESC] != &dmFcnDefault)
   1c55c:	d008      	beq.n	1c570 <DmRegister+0x24>
  {
    /* if largest LESC key length is larger than maximum RX PDU length */
    if (SMP_PUB_KEY_MSG_LEN > (HciGetMaxRxAclLen() - L2C_HDR_LEN))
   1c55e:	f7f5 fd67 	bl	12030 <HciGetMaxRxAclLen>
   1c562:	2844      	cmp	r0, #68	; 0x44
   1c564:	d804      	bhi.n	1c570 <DmRegister+0x24>
    {
      dmEvt_t evt;

      evt.hdr.param = 0;
   1c566:	4a06      	ldr	r2, [pc, #24]	; (1c580 <DmRegister+0x34>)
      evt.hdr.event = DM_ERROR_IND;
      evt.hdr.status = DM_ERR_SMP_RX_PDU_LEN_EXCEEDED;

      (*dmCb.cback)(&evt);
   1c568:	68a3      	ldr	r3, [r4, #8]
      evt.hdr.param = 0;
   1c56a:	9201      	str	r2, [sp, #4]
      (*dmCb.cback)(&evt);
   1c56c:	a801      	add	r0, sp, #4
   1c56e:	4798      	blx	r3
    }
  }
}
   1c570:	b01a      	add	sp, #104	; 0x68
   1c572:	bd10      	pop	{r4, pc}
   1c574:	10002e58 	.word	0x10002e58
   1c578:	00026174 	.word	0x00026174
   1c57c:	1000707c 	.word	0x1000707c
   1c580:	01650000 	.word	0x01650000

0001c584 <DmFindAdType>:
{
  /* while not at end of data and
   * data element length is not zero and
   * data element length is not erroneously more than the data length
   */
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
   1c584:	b1e9      	cbz	r1, 1c5c2 <DmFindAdType+0x3e>
{
   1c586:	b410      	push	{r4}
   1c588:	e007      	b.n	1c59a <DmFindAdType+0x16>
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
   1c58a:	428c      	cmp	r4, r1
    {
      return pData;
    }

    /* else go to next element */
    dataLen = dataLen - pData[DM_AD_LEN_IDX] - 1;
   1c58c:	b299      	uxth	r1, r3
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
   1c58e:	d210      	bcs.n	1c5b2 <DmFindAdType+0x2e>
    if (pData[DM_AD_TYPE_IDX] == adType)
   1c590:	7853      	ldrb	r3, [r2, #1]
   1c592:	4283      	cmp	r3, r0
   1c594:	d011      	beq.n	1c5ba <DmFindAdType+0x36>
    pData = pData + pData[DM_AD_LEN_IDX] + 1;
   1c596:	4462      	add	r2, ip
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
   1c598:	b159      	cbz	r1, 1c5b2 <DmFindAdType+0x2e>
   1c59a:	7814      	ldrb	r4, [r2, #0]
   1c59c:	b2a3      	uxth	r3, r4
    dataLen = dataLen - pData[DM_AD_LEN_IDX] - 1;
   1c59e:	43db      	mvns	r3, r3
   1c5a0:	440b      	add	r3, r1
    pData = pData + pData[DM_AD_LEN_IDX] + 1;
   1c5a2:	f104 0c01 	add.w	ip, r4, #1
  while ((dataLen != 0) && (pData[DM_AD_LEN_IDX] != 0) && (pData[DM_AD_LEN_IDX] < dataLen))
   1c5a6:	2c00      	cmp	r4, #0
   1c5a8:	d1ef      	bne.n	1c58a <DmFindAdType+0x6>
  }

  /* not found */
  return NULL;
   1c5aa:	4620      	mov	r0, r4
}
   1c5ac:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c5b0:	4770      	bx	lr
  return NULL;
   1c5b2:	2000      	movs	r0, #0
}
   1c5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c5b8:	4770      	bx	lr
   1c5ba:	4610      	mov	r0, r2
   1c5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c5c0:	4770      	bx	lr
  return NULL;
   1c5c2:	4608      	mov	r0, r1
}
   1c5c4:	4770      	bx	lr
   1c5c6:	bf00      	nop

0001c5c8 <DmHandlerInit>:
 */
/*************************************************************************************************/
void DmHandlerInit(wsfHandlerId_t handlerId)
{
  /* store handler ID */
  dmCb.handlerId = handlerId;
   1c5c8:	4b04      	ldr	r3, [pc, #16]	; (1c5dc <DmHandlerInit+0x14>)
{
   1c5ca:	4601      	mov	r1, r0

  dmCb.llPrivEnabled = FALSE;
   1c5cc:	2200      	movs	r2, #0
  dmCb.resetting = FALSE;

  /* register with the HCI event interface */
  HciEvtRegister(dmHciEvtCback);
   1c5ce:	4804      	ldr	r0, [pc, #16]	; (1c5e0 <DmHandlerInit+0x18>)
  dmCb.handlerId = handlerId;
   1c5d0:	7319      	strb	r1, [r3, #12]
  dmCb.llPrivEnabled = FALSE;
   1c5d2:	759a      	strb	r2, [r3, #22]
  dmCb.resetting = FALSE;
   1c5d4:	741a      	strb	r2, [r3, #16]
  HciEvtRegister(dmHciEvtCback);
   1c5d6:	f7f7 b9e1 	b.w	1399c <HciEvtRegister>
   1c5da:	bf00      	nop
   1c5dc:	1000707c 	.word	0x1000707c
   1c5e0:	0001c50d 	.word	0x0001c50d

0001c5e4 <DmHandler>:
 */
/*************************************************************************************************/
void DmHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  /* Handle message */
  if (pMsg != NULL)
   1c5e4:	b151      	cbz	r1, 1c5fc <DmHandler+0x18>
  {
    WSF_ASSERT(DM_ID_FROM_MSG(pMsg->event) < DM_NUM_IDS);

    /* if DM not resetting */
    if (!dmCb.resetting)
   1c5e6:	4b06      	ldr	r3, [pc, #24]	; (1c600 <DmHandler+0x1c>)
   1c5e8:	7c1b      	ldrb	r3, [r3, #16]
   1c5ea:	b93b      	cbnz	r3, 1c5fc <DmHandler+0x18>
    {
      /* route message to DM component handling function */
      (*(dmFcnIfTbl[DM_ID_FROM_MSG(pMsg->event)]->msgHandler))(pMsg);
   1c5ec:	788b      	ldrb	r3, [r1, #2]
   1c5ee:	4a05      	ldr	r2, [pc, #20]	; (1c604 <DmHandler+0x20>)
   1c5f0:	091b      	lsrs	r3, r3, #4
   1c5f2:	4608      	mov	r0, r1
   1c5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c5f8:	689b      	ldr	r3, [r3, #8]
   1c5fa:	4718      	bx	r3
  /* Handle events */
  else if (event)
  {

  }
}
   1c5fc:	4770      	bx	lr
   1c5fe:	bf00      	nop
   1c600:	1000707c 	.word	0x1000707c
   1c604:	10002e58 	.word	0x10002e58

0001c608 <DmLlPrivEnabled>:
 *  \return TRUE if LL Privacy is enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmLlPrivEnabled(void)
{
  return dmCb.llPrivEnabled;
   1c608:	4b01      	ldr	r3, [pc, #4]	; (1c610 <DmLlPrivEnabled+0x8>)
}
   1c60a:	7d98      	ldrb	r0, [r3, #22]
   1c60c:	4770      	bx	lr
   1c60e:	bf00      	nop
   1c610:	1000707c 	.word	0x1000707c

0001c614 <DmLlAddrType>:
uint8_t DmLlAddrType(uint8_t addrType)
{
  uint8_t llAddrType = addrType;

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   1c614:	4b04      	ldr	r3, [pc, #16]	; (1c628 <DmLlAddrType+0x14>)
   1c616:	7d9b      	ldrb	r3, [r3, #22]
   1c618:	b12b      	cbz	r3, 1c626 <DmLlAddrType+0x12>
  {
    if (addrType == DM_ADDR_PUBLIC)
   1c61a:	b118      	cbz	r0, 1c624 <DmLlAddrType+0x10>
    {
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
    }
    else if (addrType == DM_ADDR_RANDOM)
    {
      llAddrType = DM_ADDR_RANDOM_IDENTITY;
   1c61c:	2801      	cmp	r0, #1
   1c61e:	bf08      	it	eq
   1c620:	2003      	moveq	r0, #3
   1c622:	4770      	bx	lr
      llAddrType = DM_ADDR_PUBLIC_IDENTITY;
   1c624:	2002      	movs	r0, #2
    }
  }

  return llAddrType;
}
   1c626:	4770      	bx	lr
   1c628:	1000707c 	.word	0x1000707c

0001c62c <DmHostAddrType>:
uint8_t DmHostAddrType(uint8_t addrType)
{
  uint8_t hostAddrType = addrType;

  /* if LL Privacy is enabled */
  if (dmCb.llPrivEnabled)
   1c62c:	4b05      	ldr	r3, [pc, #20]	; (1c644 <DmHostAddrType+0x18>)
   1c62e:	7d9b      	ldrb	r3, [r3, #22]
   1c630:	b133      	cbz	r3, 1c640 <DmHostAddrType+0x14>
  {
    if (addrType == DM_ADDR_PUBLIC_IDENTITY)
   1c632:	2802      	cmp	r0, #2
   1c634:	d003      	beq.n	1c63e <DmHostAddrType+0x12>
    {
      hostAddrType = DM_ADDR_PUBLIC;
    }
    else if (addrType == DM_ADDR_RANDOM_IDENTITY)
    {
      hostAddrType = DM_ADDR_RANDOM;
   1c636:	2803      	cmp	r0, #3
   1c638:	bf08      	it	eq
   1c63a:	2001      	moveq	r0, #1
   1c63c:	4770      	bx	lr
      hostAddrType = DM_ADDR_PUBLIC;
   1c63e:	2000      	movs	r0, #0
    }
  }

  return hostAddrType;
}
   1c640:	4770      	bx	lr
   1c642:	bf00      	nop
   1c644:	1000707c 	.word	0x1000707c

0001c648 <DmSizeOfEvt>:
uint16_t DmSizeOfEvt(dmEvt_t *pDmEvt)
{
  uint16_t len;

  /* if a valid DM event ID */
  if ((pDmEvt->hdr.event >= DM_CBACK_START) && (pDmEvt->hdr.event <= DM_CBACK_END))
   1c648:	7883      	ldrb	r3, [r0, #2]
   1c64a:	3b20      	subs	r3, #32
   1c64c:	b2da      	uxtb	r2, r3
   1c64e:	2a48      	cmp	r2, #72	; 0x48
  {
    len = dmEvtCbackLen[pDmEvt->hdr.event - DM_CBACK_START];
   1c650:	bf9a      	itte	ls
   1c652:	4a02      	ldrls	r2, [pc, #8]	; (1c65c <DmSizeOfEvt+0x14>)
   1c654:	f832 0013 	ldrhls.w	r0, [r2, r3, lsl #1]
  }
  else
  {
    len = sizeof(wsfMsgHdr_t);
   1c658:	2004      	movhi	r0, #4
  }

  return len;
}
   1c65a:	4770      	bx	lr
   1c65c:	000260e4 	.word	0x000260e4

0001c660 <DmScanPhyToIdx>:
 */
/*************************************************************************************************/
uint8_t DmScanPhyToIdx(uint8_t scanPhy)
{
  return dmScanPhyToIdx(DM_NUM_PHYS, scanPhy);
}
   1c660:	3801      	subs	r0, #1
   1c662:	bf18      	it	ne
   1c664:	2001      	movne	r0, #1
   1c666:	4770      	bx	lr

0001c668 <DmInitPhyToIdx>:
   1c668:	3801      	subs	r0, #1
   1c66a:	bf18      	it	ne
   1c66c:	2001      	movne	r0, #1
   1c66e:	4770      	bx	lr

0001c670 <dmPrivMsgHandler>:
 */
/*************************************************************************************************/
void dmPrivMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmPrivAct[DM_MSG_MASK(pMsg->event)])((dmPrivMsg_t *) pMsg);
   1c670:	7883      	ldrb	r3, [r0, #2]
   1c672:	4a03      	ldr	r2, [pc, #12]	; (1c680 <dmPrivMsgHandler+0x10>)
   1c674:	f003 030f 	and.w	r3, r3, #15
   1c678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c67c:	4718      	bx	r3
   1c67e:	bf00      	nop
   1c680:	000261c8 	.word	0x000261c8

0001c684 <dmPrivReset>:
 */
/*************************************************************************************************/
void dmPrivReset(void)
{
  /* initialize control block */
  dmPrivCb.inProgress = 0;
   1c684:	4902      	ldr	r1, [pc, #8]	; (1c690 <dmPrivReset+0xc>)
  dmCb.llPrivEnabled = FALSE;
   1c686:	4a03      	ldr	r2, [pc, #12]	; (1c694 <dmPrivReset+0x10>)
  dmPrivCb.inProgress = 0;
   1c688:	2300      	movs	r3, #0
   1c68a:	70cb      	strb	r3, [r1, #3]
  dmCb.llPrivEnabled = FALSE;
   1c68c:	7593      	strb	r3, [r2, #22]
}
   1c68e:	4770      	bx	lr
   1c690:	10007094 	.word	0x10007094
   1c694:	1000707c 	.word	0x1000707c

0001c698 <dmPrivActGenAddrAesCmpl>:
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
   1c698:	6842      	ldr	r2, [r0, #4]
   1c69a:	8811      	ldrh	r1, [r2, #0]
   1c69c:	7892      	ldrb	r2, [r2, #2]
   1c69e:	7182      	strb	r2, [r0, #6]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   1c6a0:	4a08      	ldr	r2, [pc, #32]	; (1c6c4 <dmPrivActGenAddrAesCmpl+0x2c>)
  memcpy(pAddrEvt->addr, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN);
   1c6a2:	8081      	strh	r1, [r0, #4]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   1c6a4:	7b11      	ldrb	r1, [r2, #12]
   1c6a6:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
   1c6aa:	7241      	strb	r1, [r0, #9]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
   1c6ac:	78d1      	ldrb	r1, [r2, #3]
  memcpy(pAddrEvt->addr + DM_PRIV_HASH_LEN, dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   1c6ae:	f8a0 c007 	strh.w	ip, [r0, #7]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_GEN_ADDR;
   1c6b2:	f021 0102 	bic.w	r1, r1, #2
   1c6b6:	70d1      	strb	r1, [r2, #3]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
   1c6b8:	4a03      	ldr	r2, [pc, #12]	; (1c6c8 <dmPrivActGenAddrAesCmpl+0x30>)
  pAddrEvt->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   1c6ba:	2138      	movs	r1, #56	; 0x38
   1c6bc:	8041      	strh	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pAddrEvt);
   1c6be:	6893      	ldr	r3, [r2, #8]
   1c6c0:	4718      	bx	r3
   1c6c2:	bf00      	nop
   1c6c4:	10007094 	.word	0x10007094
   1c6c8:	1000707c 	.word	0x1000707c

0001c6cc <dmPrivActResAddrAesCmpl>:
{
   1c6cc:	b410      	push	{r4}
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
   1c6ce:	4b0f      	ldr	r3, [pc, #60]	; (1c70c <dmPrivActResAddrAesCmpl+0x40>)
   1c6d0:	6842      	ldr	r2, [r0, #4]
   1c6d2:	781c      	ldrb	r4, [r3, #0]
   1c6d4:	7811      	ldrb	r1, [r2, #0]
   1c6d6:	428c      	cmp	r4, r1
   1c6d8:	d00c      	beq.n	1c6f4 <dmPrivActResAddrAesCmpl+0x28>
    pMsg->hdr.status = HCI_ERR_AUTH_FAILURE;
   1c6da:	2205      	movs	r2, #5
   1c6dc:	70c2      	strb	r2, [r0, #3]
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
   1c6de:	78da      	ldrb	r2, [r3, #3]
  (*dmCb.cback)((dmEvt_t *) pMsg);
   1c6e0:	4c0b      	ldr	r4, [pc, #44]	; (1c710 <dmPrivActResAddrAesCmpl+0x44>)
  dmPrivCb.inProgress &= ~DM_PRIV_INPROGRESS_RES_ADDR;
   1c6e2:	f022 0201 	bic.w	r2, r2, #1
   1c6e6:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   1c6e8:	2137      	movs	r1, #55	; 0x37
  (*dmCb.cback)((dmEvt_t *) pMsg);
   1c6ea:	68a3      	ldr	r3, [r4, #8]
}
   1c6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   1c6f0:	7081      	strb	r1, [r0, #2]
  (*dmCb.cback)((dmEvt_t *) pMsg);
   1c6f2:	4718      	bx	r3
  if (memcmp(dmPrivCb.hash, pMsg->aes.pCiphertext, DM_PRIV_HASH_LEN) == 0)
   1c6f4:	7851      	ldrb	r1, [r2, #1]
   1c6f6:	785c      	ldrb	r4, [r3, #1]
   1c6f8:	428c      	cmp	r4, r1
   1c6fa:	f102 0201 	add.w	r2, r2, #1
   1c6fe:	d1ec      	bne.n	1c6da <dmPrivActResAddrAesCmpl+0xe>
   1c700:	7899      	ldrb	r1, [r3, #2]
   1c702:	7852      	ldrb	r2, [r2, #1]
   1c704:	4291      	cmp	r1, r2
   1c706:	d1e8      	bne.n	1c6da <dmPrivActResAddrAesCmpl+0xe>
    pMsg->hdr.status = HCI_SUCCESS;
   1c708:	2200      	movs	r2, #0
   1c70a:	e7e7      	b.n	1c6dc <dmPrivActResAddrAesCmpl+0x10>
   1c70c:	10007094 	.word	0x10007094
   1c710:	1000707c 	.word	0x1000707c

0001c714 <dmPrivActAddDevToResList>:
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
   1c714:	4a07      	ldr	r2, [pc, #28]	; (1c734 <dmPrivActAddDevToResList+0x20>)
{
   1c716:	4601      	mov	r1, r0
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
   1c718:	4603      	mov	r3, r0
  dmPrivCb.enableLlPriv = pDev->enableLlPriv;
   1c71a:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
   1c71e:	7210      	strb	r0, [r2, #8]
  dmPrivCb.addDevToResListParam = pMsg->hdr.param;
   1c720:	f833 0b1b 	ldrh.w	r0, [r3], #27
   1c724:	8090      	strh	r0, [r2, #4]
  HciLeAddDeviceToResolvingListCmd(pDev->addrType, pDev->peerAddr, pDev->peerIrk, pDev->localIrk);
   1c726:	7908      	ldrb	r0, [r1, #4]
   1c728:	f101 020b 	add.w	r2, r1, #11
   1c72c:	3105      	adds	r1, #5
   1c72e:	f7f4 beb7 	b.w	114a0 <HciLeAddDeviceToResolvingListCmd>
   1c732:	bf00      	nop
   1c734:	10007094 	.word	0x10007094

0001c738 <dmPrivActRemDevFromResList>:
  dmPrivCb.remDevFromResListParam = pMsg->hdr.param;
   1c738:	4601      	mov	r1, r0
   1c73a:	4b03      	ldr	r3, [pc, #12]	; (1c748 <dmPrivActRemDevFromResList+0x10>)
   1c73c:	f831 2b05 	ldrh.w	r2, [r1], #5
   1c740:	80da      	strh	r2, [r3, #6]
  HciLeRemoveDeviceFromResolvingList(pDev->addrType, pDev->peerAddr);
   1c742:	7900      	ldrb	r0, [r0, #4]
   1c744:	f7f4 bf02 	b.w	1154c <HciLeRemoveDeviceFromResolvingList>
   1c748:	10007094 	.word	0x10007094

0001c74c <dmPrivActClearResList>:
  HciLeClearResolvingList();
   1c74c:	f7f4 bf38 	b.w	115c0 <HciLeClearResolvingList>

0001c750 <dmPrivActSetAddrResEnable>:
  dmPrivCb.addrResEnable = enable;
   1c750:	4b02      	ldr	r3, [pc, #8]	; (1c75c <dmPrivActSetAddrResEnable+0xc>)
  dmPrivSetAddrResEnable(pAddrRes->enable);
   1c752:	7900      	ldrb	r0, [r0, #4]
  dmPrivCb.addrResEnable = enable;
   1c754:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
   1c756:	f7f4 bf93 	b.w	11680 <HciLeSetAddrResolutionEnable>
   1c75a:	bf00      	nop
   1c75c:	10007094 	.word	0x10007094

0001c760 <dmPrivActSetPrivacyMode>:
  HciLeSetPrivacyModeCmd(pPrivacyMode->addrType, pPrivacyMode->peerAddr, pPrivacyMode->mode);
   1c760:	7ac2      	ldrb	r2, [r0, #11]
   1c762:	1d41      	adds	r1, r0, #5
   1c764:	7900      	ldrb	r0, [r0, #4]
   1c766:	f7f4 bfbf 	b.w	116e8 <HciLeSetPrivacyModeCmd>
   1c76a:	bf00      	nop

0001c76c <dmPrivHciHandler>:
  switch (pEvent->hdr.event)
   1c76c:	7883      	ldrb	r3, [r0, #2]
   1c76e:	3b15      	subs	r3, #21
{
   1c770:	b570      	push	{r4, r5, r6, lr}
   1c772:	4604      	mov	r4, r0
  switch (pEvent->hdr.event)
   1c774:	2b05      	cmp	r3, #5
   1c776:	d858      	bhi.n	1c82a <dmPrivHciHandler+0xbe>
   1c778:	e8df f003 	tbb	[pc, r3]
   1c77c:	392b200e 	.word	0x392b200e
   1c780:	0341      	.short	0x0341
      if (pEvent->hdr.status == HCI_SUCCESS)
   1c782:	78c3      	ldrb	r3, [r0, #3]
      pEvent->hdr.event = DM_PRIV_SET_ADDR_RES_ENABLE_IND;
   1c784:	223f      	movs	r2, #63	; 0x3f
   1c786:	7082      	strb	r2, [r0, #2]
      if (pEvent->hdr.status == HCI_SUCCESS)
   1c788:	2b00      	cmp	r3, #0
   1c78a:	d040      	beq.n	1c80e <dmPrivHciHandler+0xa2>
   1c78c:	4d27      	ldr	r5, [pc, #156]	; (1c82c <dmPrivHciHandler+0xc0>)
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1c78e:	68ab      	ldr	r3, [r5, #8]
   1c790:	4620      	mov	r0, r4
}
   1c792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1c796:	4718      	bx	r3
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
   1c798:	4b25      	ldr	r3, [pc, #148]	; (1c830 <dmPrivHciHandler+0xc4>)
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
   1c79a:	4d24      	ldr	r5, [pc, #144]	; (1c82c <dmPrivHciHandler+0xc0>)
      pEvent->hdr.param = dmPrivCb.addDevToResListParam;
   1c79c:	889a      	ldrh	r2, [r3, #4]
   1c79e:	8002      	strh	r2, [r0, #0]
      pEvent->hdr.event = DM_PRIV_ADD_DEV_TO_RES_LIST_IND;
   1c7a0:	213a      	movs	r1, #58	; 0x3a
   1c7a2:	7081      	strb	r1, [r0, #2]
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmPrivCb.enableLlPriv && !dmCb.llPrivEnabled)
   1c7a4:	7a1a      	ldrb	r2, [r3, #8]
   1c7a6:	2a00      	cmp	r2, #0
   1c7a8:	d0f1      	beq.n	1c78e <dmPrivHciHandler+0x22>
   1c7aa:	78c1      	ldrb	r1, [r0, #3]
   1c7ac:	7daa      	ldrb	r2, [r5, #22]
   1c7ae:	430a      	orrs	r2, r1
   1c7b0:	d1ed      	bne.n	1c78e <dmPrivHciHandler+0x22>
  dmPrivCb.addrResEnable = enable;
   1c7b2:	2001      	movs	r0, #1
   1c7b4:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
   1c7b6:	f7f4 ff63 	bl	11680 <HciLeSetAddrResolutionEnable>
}
   1c7ba:	e7e8      	b.n	1c78e <dmPrivHciHandler+0x22>
      pEvent->hdr.param = dmPrivCb.remDevFromResListParam;
   1c7bc:	4b1c      	ldr	r3, [pc, #112]	; (1c830 <dmPrivHciHandler+0xc4>)
   1c7be:	4d1b      	ldr	r5, [pc, #108]	; (1c82c <dmPrivHciHandler+0xc0>)
   1c7c0:	88db      	ldrh	r3, [r3, #6]
   1c7c2:	8003      	strh	r3, [r0, #0]
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
   1c7c4:	223b      	movs	r2, #59	; 0x3b
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1c7c6:	68ab      	ldr	r3, [r5, #8]
      pEvent->hdr.event = DM_PRIV_REM_DEV_FROM_RES_LIST_IND;
   1c7c8:	7082      	strb	r2, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1c7ca:	4620      	mov	r0, r4
}
   1c7cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1c7d0:	4718      	bx	r3
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
   1c7d2:	78c0      	ldrb	r0, [r0, #3]
   1c7d4:	4d15      	ldr	r5, [pc, #84]	; (1c82c <dmPrivHciHandler+0xc0>)
      pEvent->hdr.event = DM_PRIV_CLEAR_RES_LIST_IND;
   1c7d6:	233c      	movs	r3, #60	; 0x3c
   1c7d8:	70a3      	strb	r3, [r4, #2]
      if ((pEvent->hdr.status == HCI_SUCCESS) && dmCb.llPrivEnabled)
   1c7da:	2800      	cmp	r0, #0
   1c7dc:	d1d7      	bne.n	1c78e <dmPrivHciHandler+0x22>
   1c7de:	7dab      	ldrb	r3, [r5, #22]
   1c7e0:	2b00      	cmp	r3, #0
   1c7e2:	d0d4      	beq.n	1c78e <dmPrivHciHandler+0x22>
  dmPrivCb.addrResEnable = enable;
   1c7e4:	4b12      	ldr	r3, [pc, #72]	; (1c830 <dmPrivHciHandler+0xc4>)
   1c7e6:	7258      	strb	r0, [r3, #9]
  HciLeSetAddrResolutionEnable(enable);
   1c7e8:	f7f4 ff4a 	bl	11680 <HciLeSetAddrResolutionEnable>
}
   1c7ec:	e7cf      	b.n	1c78e <dmPrivHciHandler+0x22>
      pEvent->hdr.event = DM_PRIV_READ_PEER_RES_ADDR_IND;
   1c7ee:	4d0f      	ldr	r5, [pc, #60]	; (1c82c <dmPrivHciHandler+0xc0>)
   1c7f0:	233d      	movs	r3, #61	; 0x3d
   1c7f2:	7083      	strb	r3, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1c7f4:	68ab      	ldr	r3, [r5, #8]
   1c7f6:	4620      	mov	r0, r4
}
   1c7f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1c7fc:	4718      	bx	r3
      pEvent->hdr.event = DM_PRIV_READ_LOCAL_RES_ADDR_IND;
   1c7fe:	4d0b      	ldr	r5, [pc, #44]	; (1c82c <dmPrivHciHandler+0xc0>)
   1c800:	233e      	movs	r3, #62	; 0x3e
   1c802:	7083      	strb	r3, [r0, #2]
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1c804:	68ab      	ldr	r3, [r5, #8]
   1c806:	4620      	mov	r0, r4
}
   1c808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (*dmCb.cback)((dmEvt_t *)pEvent);
   1c80c:	4718      	bx	r3
        dmCb.llPrivEnabled = dmPrivCb.addrResEnable;
   1c80e:	4a08      	ldr	r2, [pc, #32]	; (1c830 <dmPrivHciHandler+0xc4>)
   1c810:	4d06      	ldr	r5, [pc, #24]	; (1c82c <dmPrivHciHandler+0xc0>)
   1c812:	7a51      	ldrb	r1, [r2, #9]
   1c814:	75a9      	strb	r1, [r5, #22]
        dmDevPassEvtToDevPriv(dmCb.llPrivEnabled ? DM_DEV_PRIV_MSG_RPA_STOP : DM_DEV_PRIV_MSG_RPA_START,
   1c816:	2900      	cmp	r1, #0
   1c818:	461a      	mov	r2, r3
   1c81a:	bf15      	itete	ne
   1c81c:	2101      	movne	r1, #1
   1c81e:	2100      	moveq	r1, #0
   1c820:	2015      	movne	r0, #21
   1c822:	2014      	moveq	r0, #20
   1c824:	f7ff fdf0 	bl	1c408 <dmDevPassEvtToDevPriv>
   1c828:	e7b1      	b.n	1c78e <dmPrivHciHandler+0x22>
}
   1c82a:	bd70      	pop	{r4, r5, r6, pc}
   1c82c:	1000707c 	.word	0x1000707c
   1c830:	10007094 	.word	0x10007094

0001c834 <dmPrivActResolveAddr>:
{
   1c834:	b510      	push	{r4, lr}
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
   1c836:	4c18      	ldr	r4, [pc, #96]	; (1c898 <dmPrivActResolveAddr+0x64>)
   1c838:	78e3      	ldrb	r3, [r4, #3]
   1c83a:	f013 0c01 	ands.w	ip, r3, #1
{
   1c83e:	b086      	sub	sp, #24
   1c840:	4601      	mov	r1, r0
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_RES_ADDR) == 0)
   1c842:	d008      	beq.n	1c856 <dmPrivActResolveAddr+0x22>
    (*dmCb.cback)((dmEvt_t *) pMsg);
   1c844:	4b15      	ldr	r3, [pc, #84]	; (1c89c <dmPrivActResolveAddr+0x68>)
   1c846:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_PRIV_RESOLVED_ADDR_IND;
   1c848:	f240 7237 	movw	r2, #1847	; 0x737
   1c84c:	8042      	strh	r2, [r0, #2]
}
   1c84e:	b006      	add	sp, #24
   1c850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   1c854:	4718      	bx	r3
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_RES_ADDR;
   1c856:	f043 0301 	orr.w	r3, r3, #1
   1c85a:	70e3      	strb	r3, [r4, #3]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   1c85c:	4b0f      	ldr	r3, [pc, #60]	; (1c89c <dmPrivActResolveAddr+0x68>)
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
   1c85e:	8a82      	ldrh	r2, [r0, #20]
   1c860:	8022      	strh	r2, [r4, #0]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   1c862:	7b1a      	ldrb	r2, [r3, #12]
    memcpy(dmPrivCb.hash, pMsg->apiResolveAddr.addr, DM_PRIV_HASH_LEN);
   1c864:	7d83      	ldrb	r3, [r0, #22]
   1c866:	70a3      	strb	r3, [r4, #2]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   1c868:	2461      	movs	r4, #97	; 0x61
   1c86a:	f830 3b04 	ldrh.w	r3, [r0], #4
   1c86e:	9400      	str	r4, [sp, #0]
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
   1c870:	f8b1 4017 	ldrh.w	r4, [r1, #23]
   1c874:	7e49      	ldrb	r1, [r1, #25]
   1c876:	f88d 100a 	strb.w	r1, [sp, #10]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   1c87a:	a902      	add	r1, sp, #8
    memset(buf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   1c87c:	f8cd c00b 	str.w	ip, [sp, #11]
   1c880:	f8cd c00f 	str.w	ip, [sp, #15]
   1c884:	f8cd c013 	str.w	ip, [sp, #19]
   1c888:	f88d c017 	strb.w	ip, [sp, #23]
    memcpy(buf, &pMsg->apiResolveAddr.addr[3], DM_PRIV_PRAND_LEN);
   1c88c:	f8ad 4008 	strh.w	r4, [sp, #8]
    SecAes(pMsg->apiResolveAddr.irk, buf, dmCb.handlerId,
   1c890:	f7fe f8cc 	bl	1aa2c <SecAes>
}
   1c894:	b006      	add	sp, #24
   1c896:	bd10      	pop	{r4, pc}
   1c898:	10007094 	.word	0x10007094
   1c89c:	1000707c 	.word	0x1000707c

0001c8a0 <dmPrivActGenAddr>:
{
   1c8a0:	b570      	push	{r4, r5, r6, lr}
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
   1c8a2:	4c1a      	ldr	r4, [pc, #104]	; (1c90c <dmPrivActGenAddr+0x6c>)
   1c8a4:	78e3      	ldrb	r3, [r4, #3]
   1c8a6:	f013 0602 	ands.w	r6, r3, #2
{
   1c8aa:	b082      	sub	sp, #8
   1c8ac:	4605      	mov	r5, r0
  if ((dmPrivCb.inProgress & DM_PRIV_INPROGRESS_GEN_ADDR) == 0)
   1c8ae:	d008      	beq.n	1c8c2 <dmPrivActGenAddr+0x22>
    (*dmCb.cback)((dmEvt_t *) pMsg);
   1c8b0:	4b17      	ldr	r3, [pc, #92]	; (1c910 <dmPrivActGenAddr+0x70>)
   1c8b2:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_PRIV_GENERATE_ADDR_IND;
   1c8b4:	f44f 62e7 	mov.w	r2, #1848	; 0x738
   1c8b8:	8042      	strh	r2, [r0, #2]
}
   1c8ba:	b002      	add	sp, #8
   1c8bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   1c8c0:	4718      	bx	r3
    SecRand(dmPrivCb.genAddrBuf, DM_PRIV_PRAND_LEN);
   1c8c2:	f104 000a 	add.w	r0, r4, #10
   1c8c6:	2103      	movs	r1, #3
   1c8c8:	f7fe fb14 	bl	1aef4 <SecRand>
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   1c8cc:	7b23      	ldrb	r3, [r4, #12]
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   1c8ce:	78e2      	ldrb	r2, [r4, #3]
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   1c8d0:	f8c4 600d 	str.w	r6, [r4, #13]
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   1c8d4:	f042 0202 	orr.w	r2, r2, #2
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   1c8d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dmPrivCb.inProgress |= DM_PRIV_INPROGRESS_GEN_ADDR;
   1c8dc:	70e2      	strb	r2, [r4, #3]
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   1c8de:	4628      	mov	r0, r5
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   1c8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   1c8e4:	4a0a      	ldr	r2, [pc, #40]	; (1c910 <dmPrivActGenAddr+0x70>)
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   1c8e6:	f8c4 6011 	str.w	r6, [r4, #17]
   1c8ea:	f8c4 6015 	str.w	r6, [r4, #21]
   1c8ee:	7666      	strb	r6, [r4, #25]
    dmPrivCb.genAddrBuf[2] = (dmPrivCb.genAddrBuf[2] & 0x3F) | DM_RAND_ADDR_RESOLV;
   1c8f0:	7323      	strb	r3, [r4, #12]
    memset(dmPrivCb.genAddrBuf + DM_PRIV_PRAND_LEN, 0, (DM_PRIV_PLAINTEXT_LEN - DM_PRIV_PRAND_LEN));
   1c8f2:	f104 010d 	add.w	r1, r4, #13
    SecAes(pMsg->apiGenerateAddr.irk, dmPrivCb.genAddrBuf, dmCb.handlerId,
   1c8f6:	2468      	movs	r4, #104	; 0x68
   1c8f8:	f830 3b04 	ldrh.w	r3, [r0], #4
   1c8fc:	7b12      	ldrb	r2, [r2, #12]
   1c8fe:	9400      	str	r4, [sp, #0]
   1c900:	3903      	subs	r1, #3
   1c902:	f7fe f893 	bl	1aa2c <SecAes>
}
   1c906:	b002      	add	sp, #8
   1c908:	bd70      	pop	{r4, r5, r6, pc}
   1c90a:	bf00      	nop
   1c90c:	10007094 	.word	0x10007094
   1c910:	1000707c 	.word	0x1000707c

0001c914 <DmPrivInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivInit(void)
{
  dmFcnIfTbl[DM_ID_PRIV] = (dmFcnIf_t *) &dmPrivFcnIf;
   1c914:	4b01      	ldr	r3, [pc, #4]	; (1c91c <DmPrivInit+0x8>)
   1c916:	4a02      	ldr	r2, [pc, #8]	; (1c920 <DmPrivInit+0xc>)
   1c918:	619a      	str	r2, [r3, #24]
}
   1c91a:	4770      	bx	lr
   1c91c:	10002e58 	.word	0x10002e58
   1c920:	000261ec 	.word	0x000261ec

0001c924 <DmPrivResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmPrivResolveAddr(uint8_t *pAddr, uint8_t *pIrk, uint16_t param)
{
   1c924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c926:	4607      	mov	r7, r0
  dmPrivApiResolveAddr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiResolveAddr_t))) != NULL)
   1c928:	201a      	movs	r0, #26
{
   1c92a:	460e      	mov	r6, r1
   1c92c:	4615      	mov	r5, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiResolveAddr_t))) != NULL)
   1c92e:	f7fb f9b7 	bl	17ca0 <WsfMsgAlloc>
   1c932:	b198      	cbz	r0, 1c95c <DmPrivResolveAddr+0x38>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_RESOLVE_ADDR;
   1c934:	2360      	movs	r3, #96	; 0x60
   1c936:	4604      	mov	r4, r0
   1c938:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = param;
    Calc128Cpy(pMsg->irk, pIrk);
   1c93a:	4631      	mov	r1, r6
    pMsg->hdr.param = param;
   1c93c:	f820 5b04 	strh.w	r5, [r0], #4
    Calc128Cpy(pMsg->irk, pIrk);
   1c940:	f7f6 fd12 	bl	13368 <Calc128Cpy>
    BdaCpy(pMsg->addr, pAddr);
   1c944:	4639      	mov	r1, r7
   1c946:	f104 0014 	add.w	r0, r4, #20
   1c94a:	f7f6 fce9 	bl	13320 <BdaCpy>
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c94e:	4b04      	ldr	r3, [pc, #16]	; (1c960 <DmPrivResolveAddr+0x3c>)
   1c950:	4621      	mov	r1, r4
   1c952:	7b18      	ldrb	r0, [r3, #12]
  }
}
   1c954:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c958:	f7fb b9ae 	b.w	17cb8 <WsfMsgSend>
}
   1c95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c95e:	bf00      	nop
   1c960:	1000707c 	.word	0x1000707c

0001c964 <DmPrivAddDevToResList>:
 *          to resolving list to enable address resolution in the Controller.
 */
/*************************************************************************************************/
void DmPrivAddDevToResList(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t *pPeerIrk,
                           uint8_t *pLocalIrk, bool_t enableLlPriv, uint16_t param)
{
   1c964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c968:	4607      	mov	r7, r0
  dmPrivApiAddDevToResList_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiAddDevToResList_t))) != NULL)
   1c96a:	202c      	movs	r0, #44	; 0x2c
{
   1c96c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1c970:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
   1c974:	4689      	mov	r9, r1
   1c976:	4616      	mov	r6, r2
   1c978:	461d      	mov	r5, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiAddDevToResList_t))) != NULL)
   1c97a:	f7fb f991 	bl	17ca0 <WsfMsgAlloc>
   1c97e:	b1e0      	cbz	r0, 1c9ba <DmPrivAddDevToResList+0x56>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_ADD_DEV_TO_RES_LIST;
   1c980:	2362      	movs	r3, #98	; 0x62
   1c982:	4604      	mov	r4, r0
   1c984:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = param;
   1c986:	f8a0 a000 	strh.w	sl, [r0]
    pMsg->addrType = addrType;
   1c98a:	7107      	strb	r7, [r0, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   1c98c:	4649      	mov	r1, r9
   1c98e:	3005      	adds	r0, #5
   1c990:	f7f6 fcc6 	bl	13320 <BdaCpy>
    Calc128Cpy(pMsg->peerIrk, pPeerIrk);
   1c994:	4631      	mov	r1, r6
   1c996:	f104 000b 	add.w	r0, r4, #11
   1c99a:	f7f6 fce5 	bl	13368 <Calc128Cpy>
    Calc128Cpy(pMsg->localIrk, pLocalIrk);
   1c99e:	4629      	mov	r1, r5
   1c9a0:	f104 001b 	add.w	r0, r4, #27
   1c9a4:	f7f6 fce0 	bl	13368 <Calc128Cpy>
    pMsg->enableLlPriv = enableLlPriv;
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c9a8:	4b05      	ldr	r3, [pc, #20]	; (1c9c0 <DmPrivAddDevToResList+0x5c>)
    pMsg->enableLlPriv = enableLlPriv;
   1c9aa:	f884 802b 	strb.w	r8, [r4, #43]	; 0x2b
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c9ae:	4621      	mov	r1, r4
   1c9b0:	7b18      	ldrb	r0, [r3, #12]
  }
}
   1c9b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c9b6:	f7fb b97f 	b.w	17cb8 <WsfMsgSend>
}
   1c9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c9be:	bf00      	nop
   1c9c0:	1000707c 	.word	0x1000707c

0001c9c4 <DmPrivSetPrivacyMode>:
 *          - Scanning is enabled, or
 *          - (Extended) Create connection or Create Sync command is outstanding.
 */
/*************************************************************************************************/
void DmPrivSetPrivacyMode(uint8_t addrType, const uint8_t *pIdentityAddr, uint8_t mode)
{
   1c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9c6:	4606      	mov	r6, r0
  dmPrivApiSetPrivacyMode_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiSetPrivacyMode_t))) != NULL)
   1c9c8:	200c      	movs	r0, #12
{
   1c9ca:	460f      	mov	r7, r1
   1c9cc:	4615      	mov	r5, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmPrivApiSetPrivacyMode_t))) != NULL)
   1c9ce:	f7fb f967 	bl	17ca0 <WsfMsgAlloc>
   1c9d2:	b178      	cbz	r0, 1c9f4 <DmPrivSetPrivacyMode+0x30>
  {
    pMsg->hdr.event = DM_PRIV_MSG_API_SET_PRIVACY_MODE;
   1c9d4:	4604      	mov	r4, r0
   1c9d6:	2366      	movs	r3, #102	; 0x66
   1c9d8:	7083      	strb	r3, [r0, #2]
    pMsg->addrType = addrType;
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   1c9da:	4639      	mov	r1, r7
   1c9dc:	3005      	adds	r0, #5
    pMsg->addrType = addrType;
   1c9de:	7126      	strb	r6, [r4, #4]
    BdaCpy(pMsg->peerAddr, pIdentityAddr);
   1c9e0:	f7f6 fc9e 	bl	13320 <BdaCpy>
    pMsg->mode = mode;
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c9e4:	4b04      	ldr	r3, [pc, #16]	; (1c9f8 <DmPrivSetPrivacyMode+0x34>)
    pMsg->mode = mode;
   1c9e6:	72e5      	strb	r5, [r4, #11]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c9e8:	7b18      	ldrb	r0, [r3, #12]
   1c9ea:	4621      	mov	r1, r4
  }
}
   1c9ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1c9f0:	f7fb b962 	b.w	17cb8 <WsfMsgSend>
}
   1c9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c9f6:	bf00      	nop
   1c9f8:	1000707c 	.word	0x1000707c

0001c9fc <dmScanInit>:
  {
    dmScanCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
    dmScanCb.scanWindow[i] = DM_GAP_SCAN_FAST_WINDOW;
  }

  dmCb.scanFiltPolicy = HCI_FILT_NONE;
   1c9fc:	4a07      	ldr	r2, [pc, #28]	; (1ca1c <dmScanInit+0x20>)
    dmScanCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
   1c9fe:	4b08      	ldr	r3, [pc, #32]	; (1ca20 <dmScanInit+0x24>)
  dmScanCb.scanTimer.handlerId = dmCb.handlerId;
   1ca00:	f892 c00c 	ldrb.w	ip, [r2, #12]
   1ca04:	f883 c00c 	strb.w	ip, [r3, #12]
  dmCb.scanFiltPolicy = HCI_FILT_NONE;
   1ca08:	2100      	movs	r1, #0
    dmScanCb.scanInterval[i] = DM_GAP_SCAN_FAST_INT_MIN;
   1ca0a:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
   1ca0e:	e9c3 0004 	strd	r0, r0, [r3, #16]
  dmCb.scanFiltPolicy = HCI_FILT_NONE;
   1ca12:	74d1      	strb	r1, [r2, #19]
  dmScanCb.scanState = DM_SCAN_STATE_IDLE;
   1ca14:	7619      	strb	r1, [r3, #24]
  dmCb.scanAddrType = DM_ADDR_PUBLIC;
   1ca16:	73d1      	strb	r1, [r2, #15]
}
   1ca18:	4770      	bx	lr
   1ca1a:	bf00      	nop
   1ca1c:	1000707c 	.word	0x1000707c
   1ca20:	100070b0 	.word	0x100070b0

0001ca24 <DmScanStart>:
 *  \return None.
 */
/*************************************************************************************************/
void DmScanStart(uint8_t scanPhys, uint8_t mode, const uint8_t *pScanType, bool_t filterDup,
                 uint16_t duration, uint16_t period)
{
   1ca24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ca28:	4605      	mov	r5, r0
  uint8_t i;              /* scanPhy bit position */
  uint8_t idx;            /* param array index */
  dmScanApiStart_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmScanApiStart_t))) != NULL)
   1ca2a:	200e      	movs	r0, #14
{
   1ca2c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   1ca30:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   1ca34:	460e      	mov	r6, r1
   1ca36:	4692      	mov	sl, r2
   1ca38:	461f      	mov	r7, r3
  if ((pMsg = WsfMsgAlloc(sizeof(dmScanApiStart_t))) != NULL)
   1ca3a:	f7fb f931 	bl	17ca0 <WsfMsgAlloc>
   1ca3e:	2800      	cmp	r0, #0
   1ca40:	d056      	beq.n	1caf0 <DmScanStart+0xcc>
  {
    pMsg->hdr.event = DM_SCAN_MSG_API_START;
   1ca42:	2320      	movs	r3, #32
    pMsg->scanPhys = scanPhys;

    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
    {
      if (scanPhys & (1 << i))
   1ca44:	f015 0401 	ands.w	r4, r5, #1
   1ca48:	4601      	mov	r1, r0
    pMsg->scanPhys = scanPhys;
   1ca4a:	7105      	strb	r5, [r0, #4]
    pMsg->hdr.event = DM_SCAN_MSG_API_START;
   1ca4c:	7083      	strb	r3, [r0, #2]
      if (scanPhys & (1 << i))
   1ca4e:	d02d      	beq.n	1caac <DmScanStart+0x88>
      {
        /* scan type for this PHY */
        pMsg->scanType[idx] = pScanType[idx];
   1ca50:	f89a 3000 	ldrb.w	r3, [sl]
   1ca54:	7143      	strb	r3, [r0, #5]
      if (scanPhys & (1 << i))
   1ca56:	07ac      	lsls	r4, r5, #30
   1ca58:	d446      	bmi.n	1cae8 <DmScanStart+0xc4>
   1ca5a:	076b      	lsls	r3, r5, #29
   1ca5c:	d444      	bmi.n	1cae8 <DmScanStart+0xc4>
   1ca5e:	2401      	movs	r4, #1
   1ca60:	0728      	lsls	r0, r5, #28
   1ca62:	d52d      	bpl.n	1cac0 <DmScanStart+0x9c>
        pMsg->scanType[idx] = pScanType[idx];
   1ca64:	190b      	adds	r3, r1, r4
   1ca66:	f81a 2004 	ldrb.w	r2, [sl, r4]
   1ca6a:	715a      	strb	r2, [r3, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1ca6c:	b994      	cbnz	r4, 1ca94 <DmScanStart+0x70>
      if (scanPhys & (1 << i))
   1ca6e:	06e8      	lsls	r0, r5, #27
   1ca70:	d43a      	bmi.n	1cae8 <DmScanStart+0xc4>
   1ca72:	2401      	movs	r4, #1
   1ca74:	06aa      	lsls	r2, r5, #26
   1ca76:	d52e      	bpl.n	1cad6 <DmScanStart+0xb2>
        pMsg->scanType[idx] = pScanType[idx];
   1ca78:	190b      	adds	r3, r1, r4
   1ca7a:	f81a 2004 	ldrb.w	r2, [sl, r4]
   1ca7e:	715a      	strb	r2, [r3, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1ca80:	b944      	cbnz	r4, 1ca94 <DmScanStart+0x70>
      if (scanPhys & (1 << i))
   1ca82:	066b      	lsls	r3, r5, #25
   1ca84:	d430      	bmi.n	1cae8 <DmScanStart+0xc4>
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1ca86:	2401      	movs	r4, #1
      if (scanPhys & (1 << i))
   1ca88:	09eb      	lsrs	r3, r5, #7
   1ca8a:	d003      	beq.n	1ca94 <DmScanStart+0x70>
        pMsg->scanType[idx] = pScanType[idx];
   1ca8c:	f81a 3004 	ldrb.w	r3, [sl, r4]
   1ca90:	440c      	add	r4, r1
   1ca92:	7163      	strb	r3, [r4, #5]

    pMsg->mode = mode;
    pMsg->duration = duration;
    pMsg->period = period;
    pMsg->filterDup = filterDup;
    WsfMsgSend(dmCb.handlerId, pMsg);
   1ca94:	4b19      	ldr	r3, [pc, #100]	; (1cafc <DmScanStart+0xd8>)
    pMsg->mode = mode;
   1ca96:	71ce      	strb	r6, [r1, #7]
    pMsg->duration = duration;
   1ca98:	f8a1 8008 	strh.w	r8, [r1, #8]
    pMsg->period = period;
   1ca9c:	f8a1 900a 	strh.w	r9, [r1, #10]
    pMsg->filterDup = filterDup;
   1caa0:	730f      	strb	r7, [r1, #12]
  }
}
   1caa2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1caa6:	7b18      	ldrb	r0, [r3, #12]
   1caa8:	f7fb b906 	b.w	17cb8 <WsfMsgSend>
      if (scanPhys & (1 << i))
   1caac:	07ab      	lsls	r3, r5, #30
   1caae:	d421      	bmi.n	1caf4 <DmScanStart+0xd0>
   1cab0:	076a      	lsls	r2, r5, #29
   1cab2:	d5d5      	bpl.n	1ca60 <DmScanStart+0x3c>
        pMsg->scanType[idx] = pScanType[idx];
   1cab4:	f89a 3000 	ldrb.w	r3, [sl]
   1cab8:	7143      	strb	r3, [r0, #5]
      if (scanPhys & (1 << i))
   1caba:	072a      	lsls	r2, r5, #28
   1cabc:	d414      	bmi.n	1cae8 <DmScanStart+0xc4>
   1cabe:	2401      	movs	r4, #1
   1cac0:	06eb      	lsls	r3, r5, #27
   1cac2:	d5d7      	bpl.n	1ca74 <DmScanStart+0x50>
        pMsg->scanType[idx] = pScanType[idx];
   1cac4:	190b      	adds	r3, r1, r4
   1cac6:	f81a 2004 	ldrb.w	r2, [sl, r4]
   1caca:	715a      	strb	r2, [r3, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cacc:	2c00      	cmp	r4, #0
   1cace:	d1e1      	bne.n	1ca94 <DmScanStart+0x70>
      if (scanPhys & (1 << i))
   1cad0:	06ac      	lsls	r4, r5, #26
   1cad2:	d409      	bmi.n	1cae8 <DmScanStart+0xc4>
   1cad4:	2401      	movs	r4, #1
   1cad6:	0668      	lsls	r0, r5, #25
   1cad8:	d5d6      	bpl.n	1ca88 <DmScanStart+0x64>
        pMsg->scanType[idx] = pScanType[idx];
   1cada:	190b      	adds	r3, r1, r4
   1cadc:	f81a 2004 	ldrb.w	r2, [sl, r4]
   1cae0:	715a      	strb	r2, [r3, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cae2:	2c00      	cmp	r4, #0
   1cae4:	d0cf      	beq.n	1ca86 <DmScanStart+0x62>
   1cae6:	e7d5      	b.n	1ca94 <DmScanStart+0x70>
        pMsg->scanType[idx] = pScanType[idx];
   1cae8:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1caec:	718b      	strb	r3, [r1, #6]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1caee:	e7d1      	b.n	1ca94 <DmScanStart+0x70>
}
   1caf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        pMsg->scanType[idx] = pScanType[idx];
   1caf4:	f89a 3000 	ldrb.w	r3, [sl]
   1caf8:	7143      	strb	r3, [r0, #5]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cafa:	e7ae      	b.n	1ca5a <DmScanStart+0x36>
   1cafc:	1000707c 	.word	0x1000707c

0001cb00 <DmScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmScanStop(void)
{
   1cb00:	b508      	push	{r3, lr}
  wsfMsgHdr_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(wsfMsgHdr_t))) != NULL)
   1cb02:	2004      	movs	r0, #4
   1cb04:	f7fb f8cc 	bl	17ca0 <WsfMsgAlloc>
   1cb08:	b140      	cbz	r0, 1cb1c <DmScanStop+0x1c>
  {
    pMsg->event = DM_SCAN_MSG_API_STOP;
    WsfMsgSend(dmCb.handlerId, pMsg);
   1cb0a:	4b05      	ldr	r3, [pc, #20]	; (1cb20 <DmScanStop+0x20>)
    pMsg->event = DM_SCAN_MSG_API_STOP;
   1cb0c:	2221      	movs	r2, #33	; 0x21
   1cb0e:	7082      	strb	r2, [r0, #2]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1cb10:	4601      	mov	r1, r0
   1cb12:	7b18      	ldrb	r0, [r3, #12]
  }
}
   1cb14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1cb18:	f7fb b8ce 	b.w	17cb8 <WsfMsgSend>
}
   1cb1c:	bd08      	pop	{r3, pc}
   1cb1e:	bf00      	nop
   1cb20:	1000707c 	.word	0x1000707c

0001cb24 <DmScanSetInterval>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmScanSetInterval(uint8_t scanPhys, uint16_t *pScanInterval, uint16_t *pScanWindow)
{
   1cb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t i;   /* scanPhy bit position */
  uint8_t idx; /* param array index */

  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
  {
    if (scanPhys & (1 << i))
   1cb28:	f010 0501 	ands.w	r5, r0, #1
{
   1cb2c:	4604      	mov	r4, r0
   1cb2e:	460e      	mov	r6, r1
   1cb30:	4617      	mov	r7, r2
    if (scanPhys & (1 << i))
   1cb32:	f040 80a1 	bne.w	1cc78 <DmScanSetInterval+0x154>
   1cb36:	0783      	lsls	r3, r0, #30
   1cb38:	d40e      	bmi.n	1cb58 <DmScanSetInterval+0x34>
   1cb3a:	0742      	lsls	r2, r0, #29
   1cb3c:	f100 80ce 	bmi.w	1ccdc <DmScanSetInterval+0x1b8>
   1cb40:	0722      	lsls	r2, r4, #28
   1cb42:	d421      	bmi.n	1cb88 <DmScanSetInterval+0x64>
   1cb44:	06e3      	lsls	r3, r4, #27
   1cb46:	d438      	bmi.n	1cbba <DmScanSetInterval+0x96>
   1cb48:	06a0      	lsls	r0, r4, #26
   1cb4a:	d44f      	bmi.n	1cbec <DmScanSetInterval+0xc8>
   1cb4c:	0661      	lsls	r1, r4, #25
   1cb4e:	d466      	bmi.n	1cc1e <DmScanSetInterval+0xfa>
   1cb50:	09e3      	lsrs	r3, r4, #7
   1cb52:	d17d      	bne.n	1cc50 <DmScanSetInterval+0x12c>
    {
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
      idx++;
    }
  }
}
   1cb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
   1cb58:	f8b1 9000 	ldrh.w	r9, [r1]
   1cb5c:	8815      	ldrh	r5, [r2, #0]
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cb5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 1cd04 <DmScanSetInterval+0x1e0>
  WsfTaskLock();
   1cb62:	f7fb f8df 	bl	17d24 <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
   1cb66:	2002      	movs	r0, #2
   1cb68:	f7ff fd7a 	bl	1c660 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cb6c:	3008      	adds	r0, #8
   1cb6e:	f828 9010 	strh.w	r9, [r8, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1cb72:	eb08 0040 	add.w	r0, r8, r0, lsl #1
   1cb76:	8085      	strh	r5, [r0, #4]
  WsfTaskUnlock();
   1cb78:	f7fb f8de 	bl	17d38 <WsfTaskUnlock>
    if (scanPhys & (1 << i))
   1cb7c:	0763      	lsls	r3, r4, #29
   1cb7e:	f100 80ab 	bmi.w	1ccd8 <DmScanSetInterval+0x1b4>
      idx++;
   1cb82:	2501      	movs	r5, #1
    if (scanPhys & (1 << i))
   1cb84:	0722      	lsls	r2, r4, #28
   1cb86:	d5dd      	bpl.n	1cb44 <DmScanSetInterval+0x20>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
   1cb88:	f836 9015 	ldrh.w	r9, [r6, r5, lsl #1]
   1cb8c:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
  WsfTaskLock();
   1cb90:	f7fb f8c8 	bl	17d24 <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
   1cb94:	2008      	movs	r0, #8
   1cb96:	f7ff fd63 	bl	1c660 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cb9a:	4b5a      	ldr	r3, [pc, #360]	; (1cd04 <DmScanSetInterval+0x1e0>)
   1cb9c:	3008      	adds	r0, #8
   1cb9e:	f823 9010 	strh.w	r9, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1cba2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1cba6:	f8a3 8004 	strh.w	r8, [r3, #4]
  WsfTaskUnlock();
   1cbaa:	f7fb f8c5 	bl	17d38 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cbae:	2d00      	cmp	r5, #0
   1cbb0:	d1d0      	bne.n	1cb54 <DmScanSetInterval+0x30>
    if (scanPhys & (1 << i))
   1cbb2:	06e3      	lsls	r3, r4, #27
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cbb4:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
   1cbb8:	d5c6      	bpl.n	1cb48 <DmScanSetInterval+0x24>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
   1cbba:	f836 9015 	ldrh.w	r9, [r6, r5, lsl #1]
   1cbbe:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
  WsfTaskLock();
   1cbc2:	f7fb f8af 	bl	17d24 <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
   1cbc6:	2010      	movs	r0, #16
   1cbc8:	f7ff fd4a 	bl	1c660 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cbcc:	4b4d      	ldr	r3, [pc, #308]	; (1cd04 <DmScanSetInterval+0x1e0>)
   1cbce:	3008      	adds	r0, #8
   1cbd0:	f823 9010 	strh.w	r9, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1cbd4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1cbd8:	f8a3 8004 	strh.w	r8, [r3, #4]
  WsfTaskUnlock();
   1cbdc:	f7fb f8ac 	bl	17d38 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cbe0:	2d00      	cmp	r5, #0
   1cbe2:	d1b7      	bne.n	1cb54 <DmScanSetInterval+0x30>
    if (scanPhys & (1 << i))
   1cbe4:	06a0      	lsls	r0, r4, #26
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cbe6:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
   1cbea:	d5af      	bpl.n	1cb4c <DmScanSetInterval+0x28>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
   1cbec:	f836 9015 	ldrh.w	r9, [r6, r5, lsl #1]
   1cbf0:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
  WsfTaskLock();
   1cbf4:	f7fb f896 	bl	17d24 <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
   1cbf8:	2020      	movs	r0, #32
   1cbfa:	f7ff fd31 	bl	1c660 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cbfe:	4b41      	ldr	r3, [pc, #260]	; (1cd04 <DmScanSetInterval+0x1e0>)
   1cc00:	3008      	adds	r0, #8
   1cc02:	f823 9010 	strh.w	r9, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1cc06:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1cc0a:	f8a3 8004 	strh.w	r8, [r3, #4]
  WsfTaskUnlock();
   1cc0e:	f7fb f893 	bl	17d38 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cc12:	2d00      	cmp	r5, #0
   1cc14:	d19e      	bne.n	1cb54 <DmScanSetInterval+0x30>
    if (scanPhys & (1 << i))
   1cc16:	0661      	lsls	r1, r4, #25
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cc18:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
   1cc1c:	d598      	bpl.n	1cb50 <DmScanSetInterval+0x2c>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
   1cc1e:	f836 9015 	ldrh.w	r9, [r6, r5, lsl #1]
   1cc22:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
  WsfTaskLock();
   1cc26:	f7fb f87d 	bl	17d24 <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
   1cc2a:	2040      	movs	r0, #64	; 0x40
   1cc2c:	f7ff fd18 	bl	1c660 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cc30:	4b34      	ldr	r3, [pc, #208]	; (1cd04 <DmScanSetInterval+0x1e0>)
   1cc32:	3008      	adds	r0, #8
   1cc34:	f823 9010 	strh.w	r9, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1cc38:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1cc3c:	f8a3 8004 	strh.w	r8, [r3, #4]
  WsfTaskUnlock();
   1cc40:	f7fb f87a 	bl	17d38 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cc44:	2d00      	cmp	r5, #0
   1cc46:	d185      	bne.n	1cb54 <DmScanSetInterval+0x30>
    if (scanPhys & (1 << i))
   1cc48:	09e3      	lsrs	r3, r4, #7
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cc4a:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
   1cc4e:	d081      	beq.n	1cb54 <DmScanSetInterval+0x30>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
   1cc50:	f836 6015 	ldrh.w	r6, [r6, r5, lsl #1]
   1cc54:	f837 4015 	ldrh.w	r4, [r7, r5, lsl #1]
  WsfTaskLock();
   1cc58:	f7fb f864 	bl	17d24 <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
   1cc5c:	2080      	movs	r0, #128	; 0x80
   1cc5e:	f7ff fcff 	bl	1c660 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cc62:	4b28      	ldr	r3, [pc, #160]	; (1cd04 <DmScanSetInterval+0x1e0>)
   1cc64:	3008      	adds	r0, #8
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1cc66:	eb03 0240 	add.w	r2, r3, r0, lsl #1
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cc6a:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1cc6e:	8094      	strh	r4, [r2, #4]
}
   1cc70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  WsfTaskUnlock();
   1cc74:	f7fb b860 	b.w	17d38 <WsfTaskUnlock>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
   1cc78:	f8b1 9000 	ldrh.w	r9, [r1]
   1cc7c:	8815      	ldrh	r5, [r2, #0]
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cc7e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1cd04 <DmScanSetInterval+0x1e0>
  WsfTaskLock();
   1cc82:	f7fb f84f 	bl	17d24 <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
   1cc86:	2001      	movs	r0, #1
   1cc88:	f7ff fcea 	bl	1c660 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1cc8c:	3008      	adds	r0, #8
   1cc8e:	f828 9010 	strh.w	r9, [r8, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1cc92:	eb08 0040 	add.w	r0, r8, r0, lsl #1
   1cc96:	8085      	strh	r5, [r0, #4]
  WsfTaskUnlock();
   1cc98:	f7fb f84e 	bl	17d38 <WsfTaskUnlock>
    if (scanPhys & (1 << i))
   1cc9c:	07a0      	lsls	r0, r4, #30
   1cc9e:	d420      	bmi.n	1cce2 <DmScanSetInterval+0x1be>
   1cca0:	0761      	lsls	r1, r4, #29
      idx++;
   1cca2:	f04f 0501 	mov.w	r5, #1
    if (scanPhys & (1 << i))
   1cca6:	f57f af4b 	bpl.w	1cb40 <DmScanSetInterval+0x1c>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
   1ccaa:	f836 a015 	ldrh.w	sl, [r6, r5, lsl #1]
   1ccae:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
  WsfTaskLock();
   1ccb2:	f7fb f837 	bl	17d24 <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
   1ccb6:	2004      	movs	r0, #4
   1ccb8:	f7ff fcd2 	bl	1c660 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1ccbc:	3008      	adds	r0, #8
   1ccbe:	f828 a010 	strh.w	sl, [r8, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1ccc2:	eb08 0040 	add.w	r0, r8, r0, lsl #1
   1ccc6:	f8a0 9004 	strh.w	r9, [r0, #4]
  WsfTaskUnlock();
   1ccca:	f7fb f835 	bl	17d38 <WsfTaskUnlock>
  for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1ccce:	2d00      	cmp	r5, #0
   1ccd0:	f47f af40 	bne.w	1cb54 <DmScanSetInterval+0x30>
      idx++;
   1ccd4:	2501      	movs	r5, #1
   1ccd6:	e755      	b.n	1cb84 <DmScanSetInterval+0x60>
   1ccd8:	2501      	movs	r5, #1
   1ccda:	e7e6      	b.n	1ccaa <DmScanSetInterval+0x186>
   1ccdc:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1cd04 <DmScanSetInterval+0x1e0>
   1cce0:	e7e3      	b.n	1ccaa <DmScanSetInterval+0x186>
      dmScanSetInterval((1 << i), pScanInterval[idx], pScanWindow[idx]);
   1cce2:	8875      	ldrh	r5, [r6, #2]
   1cce4:	887c      	ldrh	r4, [r7, #2]
  WsfTaskLock();
   1cce6:	f7fb f81d 	bl	17d24 <WsfTaskLock>
  phyIdx = DmScanPhyToIdx(scanPhy);
   1ccea:	2002      	movs	r0, #2
   1ccec:	f7ff fcb8 	bl	1c660 <DmScanPhyToIdx>
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1ccf0:	3008      	adds	r0, #8
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1ccf2:	eb08 0340 	add.w	r3, r8, r0, lsl #1
  dmScanCb.scanInterval[phyIdx] = scanInterval;
   1ccf6:	f828 5010 	strh.w	r5, [r8, r0, lsl #1]
  dmScanCb.scanWindow[phyIdx] = scanWindow;
   1ccfa:	809c      	strh	r4, [r3, #4]
}
   1ccfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  WsfTaskUnlock();
   1cd00:	f7fb b81a 	b.w	17d38 <WsfTaskUnlock>
   1cd04:	100070b0 	.word	0x100070b0

0001cd08 <dmExtScanActTimeout>:
 */
/*************************************************************************************************/
void dmExtScanActTimeout(dmScanMsg_t *pMsg)
{
  /* empty */
}
   1cd08:	4770      	bx	lr
   1cd0a:	bf00      	nop

0001cd0c <dmExtScanMsgHandler>:
 */
/*************************************************************************************************/
void dmExtScanMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmScanAct[DM_MSG_MASK(pMsg->event)])((dmScanMsg_t *)pMsg);
   1cd0c:	7883      	ldrb	r3, [r0, #2]
   1cd0e:	4a03      	ldr	r2, [pc, #12]	; (1cd1c <dmExtScanMsgHandler+0x10>)
   1cd10:	f003 030f 	and.w	r3, r3, #15
   1cd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1cd18:	4718      	bx	r3
   1cd1a:	bf00      	nop
   1cd1c:	00026224 	.word	0x00026224

0001cd20 <dmExtScanActStart>:
{
   1cd20:	b570      	push	{r4, r5, r6, lr}
  if (dmScanCb.scanState == DM_SCAN_STATE_IDLE)
   1cd22:	4d92      	ldr	r5, [pc, #584]	; (1cf6c <dmExtScanActStart+0x24c>)
   1cd24:	7e2b      	ldrb	r3, [r5, #24]
{
   1cd26:	b084      	sub	sp, #16
  if (dmScanCb.scanState == DM_SCAN_STATE_IDLE)
   1cd28:	2b00      	cmp	r3, #0
   1cd2a:	d134      	bne.n	1cd96 <dmExtScanActStart+0x76>
      if (pMsg->apiStart.scanPhys & (1 << i))
   1cd2c:	7903      	ldrb	r3, [r0, #4]
   1cd2e:	f013 0601 	ands.w	r6, r3, #1
   1cd32:	4604      	mov	r4, r0
   1cd34:	d131      	bne.n	1cd9a <dmExtScanActStart+0x7a>
   1cd36:	0798      	lsls	r0, r3, #30
   1cd38:	f100 80bc 	bmi.w	1ceb4 <dmExtScanActStart+0x194>
   1cd3c:	0759      	lsls	r1, r3, #29
   1cd3e:	d444      	bmi.n	1cdca <dmExtScanActStart+0xaa>
   1cd40:	0718      	lsls	r0, r3, #28
   1cd42:	d45f      	bmi.n	1ce04 <dmExtScanActStart+0xe4>
   1cd44:	06d9      	lsls	r1, r3, #27
   1cd46:	d47a      	bmi.n	1ce3e <dmExtScanActStart+0x11e>
   1cd48:	069a      	lsls	r2, r3, #26
   1cd4a:	f100 8097 	bmi.w	1ce7c <dmExtScanActStart+0x15c>
   1cd4e:	0658      	lsls	r0, r3, #25
   1cd50:	f100 80c5 	bmi.w	1cede <dmExtScanActStart+0x1be>
   1cd54:	09db      	lsrs	r3, r3, #7
   1cd56:	f040 80e1 	bne.w	1cf1c <dmExtScanActStart+0x1fc>
    HciLeSetExtScanParamCmd(DmLlAddrType(dmCb.scanAddrType), dmCb.scanFiltPolicy,
   1cd5a:	4e85      	ldr	r6, [pc, #532]	; (1cf70 <dmExtScanActStart+0x250>)
   1cd5c:	7bf0      	ldrb	r0, [r6, #15]
   1cd5e:	f7ff fc59 	bl	1c614 <DmLlAddrType>
   1cd62:	ab01      	add	r3, sp, #4
   1cd64:	7cf1      	ldrb	r1, [r6, #19]
   1cd66:	7922      	ldrb	r2, [r4, #4]
   1cd68:	f7f4 fd34 	bl	117d4 <HciLeSetExtScanParamCmd>
    if (pMsg->apiStart.mode == DM_DISC_MODE_LIMITED)
   1cd6c:	79e3      	ldrb	r3, [r4, #7]
   1cd6e:	2b01      	cmp	r3, #1
   1cd70:	d003      	beq.n	1cd7a <dmExtScanActStart+0x5a>
    else if (pMsg->apiStart.mode == DM_DISC_MODE_GENERAL)
   1cd72:	2b02      	cmp	r3, #2
   1cd74:	f000 80cf 	beq.w	1cf16 <dmExtScanActStart+0x1f6>
      dmScanCb.discFilter = 0;
   1cd78:	2300      	movs	r3, #0
   1cd7a:	776b      	strb	r3, [r5, #29]
    dmScanCb.filterNextScanRsp = FALSE;
   1cd7c:	2300      	movs	r3, #0
    dmScanCb.scanState = DM_SCAN_STATE_STARTING;
   1cd7e:	2001      	movs	r0, #1
    dmScanCb.filterNextScanRsp = FALSE;
   1cd80:	772b      	strb	r3, [r5, #28]
    dmScanCb.scanState = DM_SCAN_STATE_STARTING;
   1cd82:	7628      	strb	r0, [r5, #24]
    HciLeExtScanEnableCmd(TRUE, pMsg->apiStart.filterDup, (pMsg->apiStart.duration / 10), pMsg->apiStart.period);
   1cd84:	497b      	ldr	r1, [pc, #492]	; (1cf74 <dmExtScanActStart+0x254>)
   1cd86:	8922      	ldrh	r2, [r4, #8]
   1cd88:	8963      	ldrh	r3, [r4, #10]
   1cd8a:	fba1 1202 	umull	r1, r2, r1, r2
   1cd8e:	08d2      	lsrs	r2, r2, #3
   1cd90:	7b21      	ldrb	r1, [r4, #12]
   1cd92:	f7f4 fdab 	bl	118ec <HciLeExtScanEnableCmd>
}
   1cd96:	b004      	add	sp, #16
   1cd98:	bd70      	pop	{r4, r5, r6, pc}
        phyIdx = DmScanPhyToIdx(1 << i);
   1cd9a:	2001      	movs	r0, #1
   1cd9c:	f7ff fc60 	bl	1c660 <DmScanPhyToIdx>
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cda0:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cda2:	7961      	ldrb	r1, [r4, #5]
      if (pMsg->apiStart.scanPhys & (1 << i))
   1cda4:	7923      	ldrb	r3, [r4, #4]
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cda6:	f88d 1008 	strb.w	r1, [sp, #8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cdaa:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cdae:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cdb2:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cdb4:	f8ad 1004 	strh.w	r1, [sp, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
   1cdb8:	0799      	lsls	r1, r3, #30
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cdba:	f8ad 2006 	strh.w	r2, [sp, #6]
      if (pMsg->apiStart.scanPhys & (1 << i))
   1cdbe:	f100 80c4 	bmi.w	1cf4a <dmExtScanActStart+0x22a>
   1cdc2:	075a      	lsls	r2, r3, #29
        idx++;
   1cdc4:	f04f 0601 	mov.w	r6, #1
      if (pMsg->apiStart.scanPhys & (1 << i))
   1cdc8:	d5ba      	bpl.n	1cd40 <dmExtScanActStart+0x20>
        phyIdx = DmScanPhyToIdx(1 << i);
   1cdca:	2004      	movs	r0, #4
   1cdcc:	f7ff fc48 	bl	1c660 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cdd0:	aa04      	add	r2, sp, #16
   1cdd2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1cdd6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1cdda:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cddc:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cdde:	7952      	ldrb	r2, [r2, #5]
   1cde0:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cde4:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cde8:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cdec:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cdee:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cdf2:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cdf6:	2e00      	cmp	r6, #0
   1cdf8:	d1af      	bne.n	1cd5a <dmExtScanActStart+0x3a>
   1cdfa:	7923      	ldrb	r3, [r4, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
   1cdfc:	0718      	lsls	r0, r3, #28
        idx++;
   1cdfe:	f04f 0601 	mov.w	r6, #1
      if (pMsg->apiStart.scanPhys & (1 << i))
   1ce02:	d59f      	bpl.n	1cd44 <dmExtScanActStart+0x24>
        phyIdx = DmScanPhyToIdx(1 << i);
   1ce04:	2008      	movs	r0, #8
   1ce06:	f7ff fc2b 	bl	1c660 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1ce0a:	aa04      	add	r2, sp, #16
   1ce0c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1ce10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1ce14:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1ce16:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1ce18:	7952      	ldrb	r2, [r2, #5]
   1ce1a:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1ce1e:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1ce22:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1ce26:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1ce28:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1ce2c:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1ce30:	2e00      	cmp	r6, #0
   1ce32:	d192      	bne.n	1cd5a <dmExtScanActStart+0x3a>
   1ce34:	7923      	ldrb	r3, [r4, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
   1ce36:	06d9      	lsls	r1, r3, #27
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1ce38:	f04f 0601 	mov.w	r6, #1
      if (pMsg->apiStart.scanPhys & (1 << i))
   1ce3c:	d584      	bpl.n	1cd48 <dmExtScanActStart+0x28>
        phyIdx = DmScanPhyToIdx(1 << i);
   1ce3e:	2010      	movs	r0, #16
   1ce40:	f7ff fc0e 	bl	1c660 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1ce44:	aa04      	add	r2, sp, #16
   1ce46:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1ce4a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1ce4e:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1ce50:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1ce52:	7952      	ldrb	r2, [r2, #5]
   1ce54:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1ce58:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1ce5c:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1ce60:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1ce62:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1ce66:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1ce6a:	2e00      	cmp	r6, #0
   1ce6c:	f47f af75 	bne.w	1cd5a <dmExtScanActStart+0x3a>
   1ce70:	7923      	ldrb	r3, [r4, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
   1ce72:	069a      	lsls	r2, r3, #26
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1ce74:	f04f 0601 	mov.w	r6, #1
      if (pMsg->apiStart.scanPhys & (1 << i))
   1ce78:	f57f af69 	bpl.w	1cd4e <dmExtScanActStart+0x2e>
        phyIdx = DmScanPhyToIdx(1 << i);
   1ce7c:	2020      	movs	r0, #32
   1ce7e:	f7ff fbef 	bl	1c660 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1ce82:	aa04      	add	r2, sp, #16
   1ce84:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1ce88:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1ce8c:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1ce8e:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1ce90:	7952      	ldrb	r2, [r2, #5]
   1ce92:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1ce96:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1ce9a:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1ce9e:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cea0:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cea4:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cea8:	2e00      	cmp	r6, #0
   1ceaa:	f47f af56 	bne.w	1cd5a <dmExtScanActStart+0x3a>
   1ceae:	7923      	ldrb	r3, [r4, #4]
   1ceb0:	2601      	movs	r6, #1
   1ceb2:	e74c      	b.n	1cd4e <dmExtScanActStart+0x2e>
        phyIdx = DmScanPhyToIdx(1 << i);
   1ceb4:	2002      	movs	r0, #2
   1ceb6:	f7ff fbd3 	bl	1c660 <DmScanPhyToIdx>
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1ceba:	3008      	adds	r0, #8
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cebc:	eb05 0240 	add.w	r2, r5, r0, lsl #1
      if (pMsg->apiStart.scanPhys & (1 << i))
   1cec0:	7923      	ldrb	r3, [r4, #4]
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cec2:	7961      	ldrb	r1, [r4, #5]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cec4:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cec6:	f88d 1008 	strb.w	r1, [sp, #8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1ceca:	f8ad 2006 	strh.w	r2, [sp, #6]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cece:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
   1ced2:	f8ad 1004 	strh.w	r1, [sp, #4]
      if (pMsg->apiStart.scanPhys & (1 << i))
   1ced6:	075a      	lsls	r2, r3, #29
   1ced8:	d590      	bpl.n	1cdfc <dmExtScanActStart+0xdc>
        idx++;
   1ceda:	2601      	movs	r6, #1
   1cedc:	e775      	b.n	1cdca <dmExtScanActStart+0xaa>
        phyIdx = DmScanPhyToIdx(1 << i);
   1cede:	2040      	movs	r0, #64	; 0x40
   1cee0:	f7ff fbbe 	bl	1c660 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cee4:	aa04      	add	r2, sp, #16
   1cee6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1ceea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1ceee:	19a2      	adds	r2, r4, r6
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cef0:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cef2:	7952      	ldrb	r2, [r2, #5]
   1cef4:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cef8:	eb05 0240 	add.w	r2, r5, r0, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cefc:	f835 1010 	ldrh.w	r1, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cf00:	8892      	ldrh	r2, [r2, #4]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cf02:	f823 1c0c 	strh.w	r1, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cf06:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cf0a:	2e00      	cmp	r6, #0
   1cf0c:	f47f af25 	bne.w	1cd5a <dmExtScanActStart+0x3a>
   1cf10:	7923      	ldrb	r3, [r4, #4]
   1cf12:	2601      	movs	r6, #1
   1cf14:	e71e      	b.n	1cd54 <dmExtScanActStart+0x34>
      dmScanCb.discFilter = DM_FLAG_LE_LIMITED_DISC | DM_FLAG_LE_GENERAL_DISC;
   1cf16:	2303      	movs	r3, #3
   1cf18:	776b      	strb	r3, [r5, #29]
   1cf1a:	e72f      	b.n	1cd7c <dmExtScanActStart+0x5c>
        phyIdx = DmScanPhyToIdx(1 << i);
   1cf1c:	2080      	movs	r0, #128	; 0x80
   1cf1e:	f7ff fb9f 	bl	1c660 <DmScanPhyToIdx>
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cf22:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1cf26:	aa04      	add	r2, sp, #16
   1cf28:	4426      	add	r6, r4
   1cf2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cf2e:	3008      	adds	r0, #8
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cf30:	7972      	ldrb	r2, [r6, #5]
   1cf32:	f803 2c08 	strb.w	r2, [r3, #-8]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cf36:	f835 2010 	ldrh.w	r2, [r5, r0, lsl #1]
   1cf3a:	f823 2c0c 	strh.w	r2, [r3, #-12]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cf3e:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   1cf42:	8882      	ldrh	r2, [r0, #4]
   1cf44:	f823 2c0a 	strh.w	r2, [r3, #-10]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cf48:	e707      	b.n	1cd5a <dmExtScanActStart+0x3a>
        phyIdx = DmScanPhyToIdx(1 << i);
   1cf4a:	2002      	movs	r0, #2
   1cf4c:	f7ff fb88 	bl	1c660 <DmScanPhyToIdx>
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cf50:	3008      	adds	r0, #8
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cf52:	eb05 0340 	add.w	r3, r5, r0, lsl #1
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cf56:	79a1      	ldrb	r1, [r4, #6]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cf58:	f835 2010 	ldrh.w	r2, [r5, r0, lsl #1]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cf5c:	889b      	ldrh	r3, [r3, #4]
        scanParam[idx].scanType = pMsg->apiStart.scanType[idx];
   1cf5e:	f88d 100e 	strb.w	r1, [sp, #14]
        scanParam[idx].scanInterval = dmScanCb.scanInterval[phyIdx];
   1cf62:	f8ad 200a 	strh.w	r2, [sp, #10]
        scanParam[idx].scanWindow = dmScanCb.scanWindow[phyIdx];
   1cf66:	f8ad 300c 	strh.w	r3, [sp, #12]
    for (i = 0, idx = 0; (i < 8) && (idx < DM_NUM_PHYS); i++)
   1cf6a:	e6f6      	b.n	1cd5a <dmExtScanActStart+0x3a>
   1cf6c:	100070b0 	.word	0x100070b0
   1cf70:	1000707c 	.word	0x1000707c
   1cf74:	cccccccd 	.word	0xcccccccd

0001cf78 <dmExtScanActStop>:
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
   1cf78:	4807      	ldr	r0, [pc, #28]	; (1cf98 <dmExtScanActStop+0x20>)
   1cf7a:	7e03      	ldrb	r3, [r0, #24]
   1cf7c:	2b02      	cmp	r3, #2
   1cf7e:	d000      	beq.n	1cf82 <dmExtScanActStop+0xa>
}
   1cf80:	4770      	bx	lr
    HciLeExtScanEnableCmd(FALSE, 0, 0, 0);
   1cf82:	2300      	movs	r3, #0
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
   1cf84:	f04f 0c03 	mov.w	ip, #3
   1cf88:	f880 c018 	strb.w	ip, [r0, #24]
    HciLeExtScanEnableCmd(FALSE, 0, 0, 0);
   1cf8c:	461a      	mov	r2, r3
   1cf8e:	4619      	mov	r1, r3
   1cf90:	4618      	mov	r0, r3
   1cf92:	f7f4 bcab 	b.w	118ec <HciLeExtScanEnableCmd>
   1cf96:	bf00      	nop
   1cf98:	100070b0 	.word	0x100070b0

0001cf9c <dmExtScanHciHandler>:
{
   1cf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DM_TRACE_INFO2("dmExtScanHciHandler: event: %d state: %d", pEvent->hdr.event, dmScanCb.scanState);
   1cfa0:	4d49      	ldr	r5, [pc, #292]	; (1d0c8 <dmExtScanHciHandler+0x12c>)
   1cfa2:	7881      	ldrb	r1, [r0, #2]
   1cfa4:	7e2a      	ldrb	r2, [r5, #24]
{
   1cfa6:	4604      	mov	r4, r0
  DM_TRACE_INFO2("dmExtScanHciHandler: event: %d state: %d", pEvent->hdr.event, dmScanCb.scanState);
   1cfa8:	4848      	ldr	r0, [pc, #288]	; (1d0cc <dmExtScanHciHandler+0x130>)
   1cfaa:	f7fb f9f9 	bl	183a0 <WsfTrace>
  if (pEvent->hdr.event == HCI_LE_EXT_ADV_REPORT_CBACK_EVT)
   1cfae:	78a1      	ldrb	r1, [r4, #2]
   1cfb0:	292c      	cmp	r1, #44	; 0x2c
   1cfb2:	d015      	beq.n	1cfe0 <dmExtScanHciHandler+0x44>
  else if (pEvent->hdr.event == HCI_LE_SCAN_TIMEOUT_CBACK_EVT)
   1cfb4:	292d      	cmp	r1, #45	; 0x2d
   1cfb6:	d04b      	beq.n	1d050 <dmExtScanHciHandler+0xb4>
  else if (pEvent->hdr.event == HCI_LE_EXT_SCAN_ENABLE_CMD_CMPL_CBACK_EVT)
   1cfb8:	2936      	cmp	r1, #54	; 0x36
   1cfba:	d001      	beq.n	1cfc0 <dmExtScanHciHandler+0x24>
}
   1cfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (dmScanCb.scanState)
   1cfc0:	7e2b      	ldrb	r3, [r5, #24]
   1cfc2:	2b01      	cmp	r3, #1
   1cfc4:	d039      	beq.n	1d03a <dmExtScanHciHandler+0x9e>
   1cfc6:	2b03      	cmp	r3, #3
   1cfc8:	d02e      	beq.n	1d028 <dmExtScanHciHandler+0x8c>
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_EXT_SCAN_START_IND) ? \
   1cfca:	2015      	movs	r0, #21
   1cfcc:	2300      	movs	r3, #0
   1cfce:	461a      	mov	r2, r3
   1cfd0:	f7ff fa1a 	bl	1c408 <dmDevPassEvtToDevPriv>
    (*dmCb.cback)((dmEvt_t *)pEvent);
   1cfd4:	4b3e      	ldr	r3, [pc, #248]	; (1d0d0 <dmExtScanHciHandler+0x134>)
   1cfd6:	4620      	mov	r0, r4
   1cfd8:	689b      	ldr	r3, [r3, #8]
}
   1cfda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*dmCb.cback)((dmEvt_t *)pEvent);
   1cfde:	4718      	bx	r3
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
   1cfe0:	7e2b      	ldrb	r3, [r5, #24]
   1cfe2:	2b02      	cmp	r3, #2
   1cfe4:	d1ea      	bne.n	1cfbc <dmExtScanHciHandler+0x20>
    if ((dmScanCb.discFilter != 0) && firstFrag)
   1cfe6:	7f6b      	ldrb	r3, [r5, #29]
   1cfe8:	2b00      	cmp	r3, #0
   1cfea:	d040      	beq.n	1d06e <dmExtScanHciHandler+0xd2>
   1cfec:	4f39      	ldr	r7, [pc, #228]	; (1d0d4 <dmExtScanHciHandler+0x138>)
   1cfee:	783b      	ldrb	r3, [r7, #0]
   1cff0:	2b00      	cmp	r3, #0
   1cff2:	d054      	beq.n	1d09e <dmExtScanHciHandler+0x102>
      if (DM_ADV_RPT_SCAN_RSP(pEvent->leExtAdvReport.eventType))
   1cff4:	88a3      	ldrh	r3, [r4, #4]
   1cff6:	f1a3 021a 	sub.w	r2, r3, #26
   1cffa:	2a01      	cmp	r2, #1
   1cffc:	d954      	bls.n	1d0a8 <dmExtScanHciHandler+0x10c>
   1cffe:	f003 0318 	and.w	r3, r3, #24
   1d002:	2b08      	cmp	r3, #8
   1d004:	d050      	beq.n	1d0a8 <dmExtScanHciHandler+0x10c>
        p = DmFindAdType(DM_ADV_TYPE_FLAGS, pEvent->leExtAdvReport.len, pEvent->leExtAdvReport.pData);
   1d006:	6a22      	ldr	r2, [r4, #32]
   1d008:	8ba1      	ldrh	r1, [r4, #28]
          filtered = TRUE;
   1d00a:	4e33      	ldr	r6, [pc, #204]	; (1d0d8 <dmExtScanHciHandler+0x13c>)
        p = DmFindAdType(DM_ADV_TYPE_FLAGS, pEvent->leExtAdvReport.len, pEvent->leExtAdvReport.pData);
   1d00c:	2001      	movs	r0, #1
   1d00e:	f7ff fab9 	bl	1c584 <DmFindAdType>
        if (p == NULL)
   1d012:	b118      	cbz	r0, 1d01c <dmExtScanHciHandler+0x80>
        else if ((p[DM_AD_DATA_IDX] & dmScanCb.discFilter) == 0)
   1d014:	7882      	ldrb	r2, [r0, #2]
   1d016:	7f6b      	ldrb	r3, [r5, #29]
   1d018:	421a      	tst	r2, r3
   1d01a:	d14e      	bne.n	1d0ba <dmExtScanHciHandler+0x11e>
          filtered = TRUE;
   1d01c:	2301      	movs	r3, #1
   1d01e:	7033      	strb	r3, [r6, #0]
          dmScanCb.filterNextScanRsp = TRUE;
   1d020:	772b      	strb	r3, [r5, #28]
      firstFrag = FALSE;
   1d022:	2300      	movs	r3, #0
   1d024:	703b      	strb	r3, [r7, #0]
    if (!filtered)
   1d026:	e02c      	b.n	1d082 <dmExtScanHciHandler+0xe6>
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_IDLE : DM_SCAN_STATE_SCANNING;
   1d028:	78e3      	ldrb	r3, [r4, #3]
   1d02a:	2b00      	cmp	r3, #0
      pEvent->hdr.event = DM_EXT_SCAN_STOP_IND;
   1d02c:	f04f 014b 	mov.w	r1, #75	; 0x4b
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_IDLE : DM_SCAN_STATE_SCANNING;
   1d030:	bf18      	it	ne
   1d032:	2302      	movne	r3, #2
      pEvent->hdr.event = DM_EXT_SCAN_STOP_IND;
   1d034:	70a1      	strb	r1, [r4, #2]
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_IDLE : DM_SCAN_STATE_SCANNING;
   1d036:	762b      	strb	r3, [r5, #24]
   1d038:	e7c7      	b.n	1cfca <dmExtScanHciHandler+0x2e>
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_SCANNING : DM_SCAN_STATE_IDLE;
   1d03a:	78e3      	ldrb	r3, [r4, #3]
   1d03c:	2b00      	cmp	r3, #0
      pEvent->hdr.event = DM_EXT_SCAN_START_IND;
   1d03e:	f04f 014a 	mov.w	r1, #74	; 0x4a
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_SCANNING : DM_SCAN_STATE_IDLE;
   1d042:	bf0c      	ite	eq
   1d044:	2302      	moveq	r3, #2
   1d046:	2300      	movne	r3, #0
      pEvent->hdr.event = DM_EXT_SCAN_START_IND;
   1d048:	70a1      	strb	r1, [r4, #2]
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_EXT_SCAN_START_IND) ? \
   1d04a:	2014      	movs	r0, #20
      dmScanCb.scanState = pEvent->hdr.status == HCI_SUCCESS? DM_SCAN_STATE_SCANNING : DM_SCAN_STATE_IDLE;
   1d04c:	762b      	strb	r3, [r5, #24]
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_EXT_SCAN_START_IND) ? \
   1d04e:	e7bd      	b.n	1cfcc <dmExtScanHciHandler+0x30>
    dmScanCb.scanState = DM_SCAN_STATE_IDLE;
   1d050:	2300      	movs	r3, #0
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_EXT_SCAN_STOP_IND, 0, 0);
   1d052:	461a      	mov	r2, r3
   1d054:	2015      	movs	r0, #21
   1d056:	214b      	movs	r1, #75	; 0x4b
    dmScanCb.scanState = DM_SCAN_STATE_IDLE;
   1d058:	762b      	strb	r3, [r5, #24]
    dmDevPassEvtToDevPriv(DM_DEV_PRIV_MSG_RPA_STOP, DM_EXT_SCAN_STOP_IND, 0, 0);
   1d05a:	f7ff f9d5 	bl	1c408 <dmDevPassEvtToDevPriv>
    (*dmCb.cback)((dmEvt_t *) pEvent);
   1d05e:	4b1c      	ldr	r3, [pc, #112]	; (1d0d0 <dmExtScanHciHandler+0x134>)
    pEvent->hdr.event = DM_EXT_SCAN_STOP_IND;
   1d060:	224b      	movs	r2, #75	; 0x4b
    (*dmCb.cback)((dmEvt_t *) pEvent);
   1d062:	689b      	ldr	r3, [r3, #8]
    pEvent->hdr.event = DM_EXT_SCAN_STOP_IND;
   1d064:	70a2      	strb	r2, [r4, #2]
    (*dmCb.cback)((dmEvt_t *) pEvent);
   1d066:	4620      	mov	r0, r4
}
   1d068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    (*dmCb.cback)((dmEvt_t *) pEvent);
   1d06c:	4718      	bx	r3
    if (!filtered)
   1d06e:	4e1a      	ldr	r6, [pc, #104]	; (1d0d8 <dmExtScanHciHandler+0x13c>)
   1d070:	7833      	ldrb	r3, [r6, #0]
   1d072:	2b00      	cmp	r3, #0
   1d074:	d1a2      	bne.n	1cfbc <dmExtScanHciHandler+0x20>
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d076:	4b16      	ldr	r3, [pc, #88]	; (1d0d0 <dmExtScanHciHandler+0x134>)
      pEvent->hdr.event = DM_EXT_SCAN_REPORT_IND;
   1d078:	224c      	movs	r2, #76	; 0x4c
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d07a:	689b      	ldr	r3, [r3, #8]
      pEvent->hdr.event = DM_EXT_SCAN_REPORT_IND;
   1d07c:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d07e:	4620      	mov	r0, r4
   1d080:	4798      	blx	r3
    if ((dmScanCb.discFilter != 0) &&
   1d082:	7f6b      	ldrb	r3, [r5, #29]
   1d084:	2b00      	cmp	r3, #0
   1d086:	d099      	beq.n	1cfbc <dmExtScanHciHandler+0x20>
        (DM_ADV_RPT_DATA_STATUS(pEvent->leExtAdvReport.eventType) != HCI_ADV_RPT_DATA_INCMPL_MORE))
   1d088:	88a3      	ldrh	r3, [r4, #4]
   1d08a:	f3c3 1341 	ubfx	r3, r3, #5, #2
    if ((dmScanCb.discFilter != 0) &&
   1d08e:	2b01      	cmp	r3, #1
   1d090:	d094      	beq.n	1cfbc <dmExtScanHciHandler+0x20>
      firstFrag = TRUE;
   1d092:	4b10      	ldr	r3, [pc, #64]	; (1d0d4 <dmExtScanHciHandler+0x138>)
      filtered = FALSE;
   1d094:	2100      	movs	r1, #0
      firstFrag = TRUE;
   1d096:	2201      	movs	r2, #1
      filtered = FALSE;
   1d098:	7031      	strb	r1, [r6, #0]
      firstFrag = TRUE;
   1d09a:	701a      	strb	r2, [r3, #0]
   1d09c:	e78e      	b.n	1cfbc <dmExtScanHciHandler+0x20>
    if (!filtered)
   1d09e:	4e0e      	ldr	r6, [pc, #56]	; (1d0d8 <dmExtScanHciHandler+0x13c>)
   1d0a0:	7833      	ldrb	r3, [r6, #0]
   1d0a2:	2b00      	cmp	r3, #0
   1d0a4:	d0e7      	beq.n	1d076 <dmExtScanHciHandler+0xda>
   1d0a6:	e7ef      	b.n	1d088 <dmExtScanHciHandler+0xec>
        if (dmScanCb.filterNextScanRsp)
   1d0a8:	7f2b      	ldrb	r3, [r5, #28]
          filtered = TRUE;
   1d0aa:	4e0b      	ldr	r6, [pc, #44]	; (1d0d8 <dmExtScanHciHandler+0x13c>)
        if (dmScanCb.filterNextScanRsp)
   1d0ac:	b12b      	cbz	r3, 1d0ba <dmExtScanHciHandler+0x11e>
          filtered = TRUE;
   1d0ae:	2301      	movs	r3, #1
   1d0b0:	7033      	strb	r3, [r6, #0]
          dmScanCb.filterNextScanRsp = FALSE;
   1d0b2:	2300      	movs	r3, #0
   1d0b4:	772b      	strb	r3, [r5, #28]
      firstFrag = FALSE;
   1d0b6:	703b      	strb	r3, [r7, #0]
    if ((dmScanCb.discFilter != 0) &&
   1d0b8:	e7e6      	b.n	1d088 <dmExtScanHciHandler+0xec>
    if (!filtered)
   1d0ba:	7833      	ldrb	r3, [r6, #0]
      firstFrag = FALSE;
   1d0bc:	2200      	movs	r2, #0
   1d0be:	703a      	strb	r2, [r7, #0]
    if (!filtered)
   1d0c0:	2b00      	cmp	r3, #0
   1d0c2:	d0d8      	beq.n	1d076 <dmExtScanHciHandler+0xda>
   1d0c4:	e7dd      	b.n	1d082 <dmExtScanHciHandler+0xe6>
   1d0c6:	bf00      	nop
   1d0c8:	100070b0 	.word	0x100070b0
   1d0cc:	000261f8 	.word	0x000261f8
   1d0d0:	1000707c 	.word	0x1000707c
   1d0d4:	10002e90 	.word	0x10002e90
   1d0d8:	100070d0 	.word	0x100070d0

0001d0dc <dmExtScanReset>:
{
   1d0dc:	b500      	push	{lr}
  if ((dmScanCb.scanState == DM_SCAN_STATE_STOPPING) ||
   1d0de:	4b0b      	ldr	r3, [pc, #44]	; (1d10c <dmExtScanReset+0x30>)
   1d0e0:	7e1b      	ldrb	r3, [r3, #24]
   1d0e2:	3b02      	subs	r3, #2
   1d0e4:	2b01      	cmp	r3, #1
{
   1d0e6:	b083      	sub	sp, #12
  if ((dmScanCb.scanState == DM_SCAN_STATE_STOPPING) ||
   1d0e8:	d904      	bls.n	1d0f4 <dmExtScanReset+0x18>
  dmScanInit();
   1d0ea:	f7ff fc87 	bl	1c9fc <dmScanInit>
}
   1d0ee:	b003      	add	sp, #12
   1d0f0:	f85d fb04 	ldr.w	pc, [sp], #4
    scanTimeout.hdr.event = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   1d0f4:	232d      	movs	r3, #45	; 0x2d
    dmExtScanHciHandler((hciEvt_t *) &scanTimeout);
   1d0f6:	a801      	add	r0, sp, #4
    scanTimeout.hdr.event = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   1d0f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    dmExtScanHciHandler((hciEvt_t *) &scanTimeout);
   1d0fc:	f7ff ff4e 	bl	1cf9c <dmExtScanHciHandler>
  dmScanInit();
   1d100:	f7ff fc7c 	bl	1c9fc <dmScanInit>
}
   1d104:	b003      	add	sp, #12
   1d106:	f85d fb04 	ldr.w	pc, [sp], #4
   1d10a:	bf00      	nop
   1d10c:	100070b0 	.word	0x100070b0

0001d110 <DmScanModeExt>:
 *  \return TRUE if DM scanning is in extended mode. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmScanModeExt(void)
{
  return (dmFcnIfTbl[DM_ID_SCAN] == (dmFcnIf_t *) &dmScanFcnIf) ? TRUE : FALSE;
   1d110:	4a03      	ldr	r2, [pc, #12]	; (1d120 <DmScanModeExt+0x10>)
   1d112:	4b04      	ldr	r3, [pc, #16]	; (1d124 <DmScanModeExt+0x14>)
   1d114:	6890      	ldr	r0, [r2, #8]
}
   1d116:	1ac0      	subs	r0, r0, r3
   1d118:	fab0 f080 	clz	r0, r0
   1d11c:	0940      	lsrs	r0, r0, #5
   1d11e:	4770      	bx	lr
   1d120:	10002e58 	.word	0x10002e58
   1d124:	00026230 	.word	0x00026230

0001d128 <dmScanMsgHandler>:
 */
/*************************************************************************************************/
void dmScanMsgHandler(wsfMsgHdr_t *pMsg)
{
  /* execute action function */
  (*dmScanAct[DM_MSG_MASK(pMsg->event)])((dmScanMsg_t *)pMsg);
   1d128:	7883      	ldrb	r3, [r0, #2]
   1d12a:	4a03      	ldr	r2, [pc, #12]	; (1d138 <dmScanMsgHandler+0x10>)
   1d12c:	f003 030f 	and.w	r3, r3, #15
   1d130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d134:	4718      	bx	r3
   1d136:	bf00      	nop
   1d138:	0002623c 	.word	0x0002623c

0001d13c <dmScanReset>:
{
   1d13c:	b510      	push	{r4, lr}
  if ((dmScanCb.scanState == DM_SCAN_STATE_STOPPING) ||
   1d13e:	4c0d      	ldr	r4, [pc, #52]	; (1d174 <dmScanReset+0x38>)
   1d140:	7e23      	ldrb	r3, [r4, #24]
   1d142:	3b02      	subs	r3, #2
   1d144:	2b01      	cmp	r3, #1
{
   1d146:	b082      	sub	sp, #8
  if ((dmScanCb.scanState == DM_SCAN_STATE_STOPPING) ||
   1d148:	d903      	bls.n	1d152 <dmScanReset+0x16>
  dmScanInit();
   1d14a:	f7ff fc57 	bl	1c9fc <dmScanInit>
}
   1d14e:	b002      	add	sp, #8
   1d150:	bd10      	pop	{r4, pc}
    WsfTimerStop(&dmScanCb.scanTimer);
   1d152:	4620      	mov	r0, r4
   1d154:	f7fb f884 	bl	18260 <WsfTimerStop>
    (*dmCb.cback)((dmEvt_t *) &scanStop);
   1d158:	4b07      	ldr	r3, [pc, #28]	; (1d178 <dmScanReset+0x3c>)
    scanStop.event = DM_SCAN_STOP_IND;
   1d15a:	2225      	movs	r2, #37	; 0x25
   1d15c:	f8ad 2006 	strh.w	r2, [sp, #6]
    (*dmCb.cback)((dmEvt_t *) &scanStop);
   1d160:	a801      	add	r0, sp, #4
   1d162:	689b      	ldr	r3, [r3, #8]
   1d164:	4798      	blx	r3
    dmScanCb.scanState = DM_SCAN_STATE_IDLE;
   1d166:	2300      	movs	r3, #0
   1d168:	7623      	strb	r3, [r4, #24]
  dmScanInit();
   1d16a:	f7ff fc47 	bl	1c9fc <dmScanInit>
}
   1d16e:	b002      	add	sp, #8
   1d170:	bd10      	pop	{r4, pc}
   1d172:	bf00      	nop
   1d174:	100070b0 	.word	0x100070b0
   1d178:	1000707c 	.word	0x1000707c

0001d17c <dmScanActStop>:
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
   1d17c:	4b05      	ldr	r3, [pc, #20]	; (1d194 <dmScanActStop+0x18>)
   1d17e:	7e1a      	ldrb	r2, [r3, #24]
   1d180:	2a02      	cmp	r2, #2
   1d182:	d000      	beq.n	1d186 <dmScanActStop+0xa>
}
   1d184:	4770      	bx	lr
    HciLeSetScanEnableCmd(FALSE, 0);
   1d186:	2100      	movs	r1, #0
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
   1d188:	2203      	movs	r2, #3
    HciLeSetScanEnableCmd(FALSE, 0);
   1d18a:	4608      	mov	r0, r1
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
   1d18c:	761a      	strb	r2, [r3, #24]
    HciLeSetScanEnableCmd(FALSE, 0);
   1d18e:	f7f3 bef5 	b.w	10f7c <HciLeSetScanEnableCmd>
   1d192:	bf00      	nop
   1d194:	100070b0 	.word	0x100070b0

0001d198 <dmScanHciHandler>:
  if (pEvent->hdr.event == HCI_LE_ADV_REPORT_CBACK_EVT)
   1d198:	7881      	ldrb	r1, [r0, #2]
   1d19a:	2906      	cmp	r1, #6
{
   1d19c:	b570      	push	{r4, r5, r6, lr}
   1d19e:	4604      	mov	r4, r0
  if (pEvent->hdr.event == HCI_LE_ADV_REPORT_CBACK_EVT)
   1d1a0:	d019      	beq.n	1d1d6 <dmScanHciHandler+0x3e>
  else if (pEvent->hdr.event == HCI_LE_SCAN_ENABLE_CMD_CMPL_CBACK_EVT)
   1d1a2:	2934      	cmp	r1, #52	; 0x34
   1d1a4:	d000      	beq.n	1d1a8 <dmScanHciHandler+0x10>
}
   1d1a6:	bd70      	pop	{r4, r5, r6, pc}
    switch (dmScanCb.scanState)
   1d1a8:	4d28      	ldr	r5, [pc, #160]	; (1d24c <dmScanHciHandler+0xb4>)
   1d1aa:	7e2b      	ldrb	r3, [r5, #24]
   1d1ac:	2b01      	cmp	r3, #1
   1d1ae:	d020      	beq.n	1d1f2 <dmScanHciHandler+0x5a>
   1d1b0:	2b03      	cmp	r3, #3
   1d1b2:	d105      	bne.n	1d1c0 <dmScanHciHandler+0x28>
      if (pEvent->hdr.status == HCI_SUCCESS)
   1d1b4:	78c6      	ldrb	r6, [r0, #3]
   1d1b6:	b38e      	cbz	r6, 1d21c <dmScanHciHandler+0x84>
        dmScanCb.scanState = DM_SCAN_STATE_SCANNING;
   1d1b8:	2302      	movs	r3, #2
   1d1ba:	762b      	strb	r3, [r5, #24]
      pEvent->hdr.event = DM_SCAN_STOP_IND;
   1d1bc:	2125      	movs	r1, #37	; 0x25
   1d1be:	70a1      	strb	r1, [r4, #2]
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_SCAN_START_IND) ? \
   1d1c0:	2015      	movs	r0, #21
   1d1c2:	2300      	movs	r3, #0
   1d1c4:	461a      	mov	r2, r3
   1d1c6:	f7ff f91f 	bl	1c408 <dmDevPassEvtToDevPriv>
    (*dmCb.cback)((dmEvt_t *) pEvent);
   1d1ca:	4b21      	ldr	r3, [pc, #132]	; (1d250 <dmScanHciHandler+0xb8>)
   1d1cc:	4620      	mov	r0, r4
   1d1ce:	689b      	ldr	r3, [r3, #8]
}
   1d1d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (*dmCb.cback)((dmEvt_t *) pEvent);
   1d1d4:	4718      	bx	r3
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
   1d1d6:	4d1d      	ldr	r5, [pc, #116]	; (1d24c <dmScanHciHandler+0xb4>)
   1d1d8:	7e2b      	ldrb	r3, [r5, #24]
   1d1da:	2b02      	cmp	r3, #2
   1d1dc:	d1e3      	bne.n	1d1a6 <dmScanHciHandler+0xe>
    if (dmScanCb.discFilter != 0)
   1d1de:	7f6b      	ldrb	r3, [r5, #29]
   1d1e0:	b1a3      	cbz	r3, 1d20c <dmScanHciHandler+0x74>
      if (pEvent->leAdvReport.eventType == DM_RPT_SCAN_RESPONSE)
   1d1e2:	7a83      	ldrb	r3, [r0, #10]
   1d1e4:	2b04      	cmp	r3, #4
   1d1e6:	d11e      	bne.n	1d226 <dmScanHciHandler+0x8e>
        if (dmScanCb.filterNextScanRsp)
   1d1e8:	7f2b      	ldrb	r3, [r5, #28]
   1d1ea:	b17b      	cbz	r3, 1d20c <dmScanHciHandler+0x74>
          dmScanCb.filterNextScanRsp = FALSE;
   1d1ec:	2300      	movs	r3, #0
   1d1ee:	772b      	strb	r3, [r5, #28]
}
   1d1f0:	bd70      	pop	{r4, r5, r6, pc}
      if (pEvent->hdr.status == HCI_SUCCESS)
   1d1f2:	78c3      	ldrb	r3, [r0, #3]
   1d1f4:	b923      	cbnz	r3, 1d200 <dmScanHciHandler+0x68>
        if (dmScanCb.scanDuration > 0)
   1d1f6:	8b69      	ldrh	r1, [r5, #26]
   1d1f8:	bb11      	cbnz	r1, 1d240 <dmScanHciHandler+0xa8>
        dmScanCb.scanState = DM_SCAN_STATE_SCANNING;
   1d1fa:	2302      	movs	r3, #2
   1d1fc:	762b      	strb	r3, [r5, #24]
   1d1fe:	e001      	b.n	1d204 <dmScanHciHandler+0x6c>
        dmScanCb.scanState = DM_SCAN_STATE_IDLE;
   1d200:	2300      	movs	r3, #0
   1d202:	762b      	strb	r3, [r5, #24]
      pEvent->hdr.event = DM_SCAN_START_IND;
   1d204:	2124      	movs	r1, #36	; 0x24
   1d206:	70a1      	strb	r1, [r4, #2]
    dmDevPassEvtToDevPriv((pEvent->hdr.event == DM_SCAN_START_IND) ? \
   1d208:	2014      	movs	r0, #20
   1d20a:	e7da      	b.n	1d1c2 <dmScanHciHandler+0x2a>
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d20c:	4b10      	ldr	r3, [pc, #64]	; (1d250 <dmScanHciHandler+0xb8>)
      pEvent->hdr.event = DM_SCAN_REPORT_IND;
   1d20e:	2226      	movs	r2, #38	; 0x26
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d210:	689b      	ldr	r3, [r3, #8]
      pEvent->hdr.event = DM_SCAN_REPORT_IND;
   1d212:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d214:	4620      	mov	r0, r4
}
   1d216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d21a:	4718      	bx	r3
        WsfTimerStop(&dmScanCb.scanTimer);
   1d21c:	4628      	mov	r0, r5
   1d21e:	f7fb f81f 	bl	18260 <WsfTimerStop>
        dmScanCb.scanState = DM_SCAN_STATE_IDLE;
   1d222:	762e      	strb	r6, [r5, #24]
   1d224:	e7ca      	b.n	1d1bc <dmScanHciHandler+0x24>
        p = DmFindAdType(DM_ADV_TYPE_FLAGS, pEvent->leAdvReport.len, pEvent->leAdvReport.pData);
   1d226:	6842      	ldr	r2, [r0, #4]
   1d228:	7a01      	ldrb	r1, [r0, #8]
   1d22a:	2001      	movs	r0, #1
   1d22c:	f7ff f9aa 	bl	1c584 <DmFindAdType>
        if (p == NULL)
   1d230:	b118      	cbz	r0, 1d23a <dmScanHciHandler+0xa2>
        else if ((p[DM_AD_DATA_IDX] & dmScanCb.discFilter) == 0)
   1d232:	7882      	ldrb	r2, [r0, #2]
   1d234:	7f6b      	ldrb	r3, [r5, #29]
   1d236:	421a      	tst	r2, r3
   1d238:	d1e8      	bne.n	1d20c <dmScanHciHandler+0x74>
          dmScanCb.filterNextScanRsp = TRUE;
   1d23a:	2301      	movs	r3, #1
   1d23c:	772b      	strb	r3, [r5, #28]
}
   1d23e:	bd70      	pop	{r4, r5, r6, pc}
          dmScanCb.scanTimer.msg.event = DM_SCAN_MSG_TIMEOUT;
   1d240:	2322      	movs	r3, #34	; 0x22
          WsfTimerStartMs(&dmScanCb.scanTimer, dmScanCb.scanDuration);
   1d242:	4628      	mov	r0, r5
          dmScanCb.scanTimer.msg.event = DM_SCAN_MSG_TIMEOUT;
   1d244:	72ab      	strb	r3, [r5, #10]
          WsfTimerStartMs(&dmScanCb.scanTimer, dmScanCb.scanDuration);
   1d246:	f7fa ffc7 	bl	181d8 <WsfTimerStartMs>
   1d24a:	e7d6      	b.n	1d1fa <dmScanHciHandler+0x62>
   1d24c:	100070b0 	.word	0x100070b0
   1d250:	1000707c 	.word	0x1000707c

0001d254 <dmScanActStart>:
{
   1d254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (dmScanCb.scanState == DM_SCAN_STATE_IDLE)
   1d258:	4e1b      	ldr	r6, [pc, #108]	; (1d2c8 <dmScanActStart+0x74>)
{
   1d25a:	b084      	sub	sp, #16
   1d25c:	4604      	mov	r4, r0
  uint8_t phyIdx = DmScanPhyToIdx(HCI_SCAN_PHY_LE_1M_BIT);
   1d25e:	2001      	movs	r0, #1
   1d260:	f7ff f9fe 	bl	1c660 <DmScanPhyToIdx>
  if (dmScanCb.scanState == DM_SCAN_STATE_IDLE)
   1d264:	7e35      	ldrb	r5, [r6, #24]
   1d266:	b115      	cbz	r5, 1d26e <dmScanActStart+0x1a>
}
   1d268:	b004      	add	sp, #16
   1d26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HciLeSetScanParamCmd(pMsg->apiStart.scanType[phyIdx], dmScanCb.scanInterval[phyIdx],
   1d26e:	1822      	adds	r2, r4, r0
   1d270:	4603      	mov	r3, r0
   1d272:	3308      	adds	r3, #8
   1d274:	f892 8005 	ldrb.w	r8, [r2, #5]
   1d278:	4f14      	ldr	r7, [pc, #80]	; (1d2cc <dmScanActStart+0x78>)
   1d27a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
   1d27e:	7bf8      	ldrb	r0, [r7, #15]
   1d280:	9103      	str	r1, [sp, #12]
   1d282:	eb06 0243 	add.w	r2, r6, r3, lsl #1
   1d286:	8892      	ldrh	r2, [r2, #4]
   1d288:	9202      	str	r2, [sp, #8]
   1d28a:	f7ff f9c3 	bl	1c614 <DmLlAddrType>
   1d28e:	4603      	mov	r3, r0
   1d290:	7cf8      	ldrb	r0, [r7, #19]
   1d292:	9000      	str	r0, [sp, #0]
   1d294:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1d298:	4640      	mov	r0, r8
   1d29a:	f7f3 fea5 	bl	10fe8 <HciLeSetScanParamCmd>
    if (pMsg->apiStart.mode == DM_DISC_MODE_LIMITED)
   1d29e:	79e3      	ldrb	r3, [r4, #7]
   1d2a0:	2b01      	cmp	r3, #1
   1d2a2:	d00f      	beq.n	1d2c4 <dmScanActStart+0x70>
    else if (pMsg->apiStart.mode == DM_DISC_MODE_GENERAL)
   1d2a4:	2b02      	cmp	r3, #2
   1d2a6:	d00c      	beq.n	1d2c2 <dmScanActStart+0x6e>
      dmScanCb.discFilter = 0;
   1d2a8:	7775      	strb	r5, [r6, #29]
   1d2aa:	7b21      	ldrb	r1, [r4, #12]
    dmScanCb.filterNextScanRsp = FALSE;
   1d2ac:	8923      	ldrh	r3, [r4, #8]
    dmScanCb.scanDuration = pMsg->apiStart.duration;
   1d2ae:	8373      	strh	r3, [r6, #26]
    dmScanCb.scanState = DM_SCAN_STATE_STARTING;
   1d2b0:	2001      	movs	r0, #1
    dmScanCb.filterNextScanRsp = FALSE;
   1d2b2:	2200      	movs	r2, #0
   1d2b4:	7732      	strb	r2, [r6, #28]
    dmScanCb.scanState = DM_SCAN_STATE_STARTING;
   1d2b6:	7630      	strb	r0, [r6, #24]
}
   1d2b8:	b004      	add	sp, #16
   1d2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HciLeSetScanEnableCmd(TRUE, pMsg->apiStart.filterDup);
   1d2be:	f7f3 be5d 	b.w	10f7c <HciLeSetScanEnableCmd>
      dmScanCb.discFilter = DM_FLAG_LE_LIMITED_DISC | DM_FLAG_LE_GENERAL_DISC;
   1d2c2:	2303      	movs	r3, #3
   1d2c4:	7773      	strb	r3, [r6, #29]
   1d2c6:	e7f0      	b.n	1d2aa <dmScanActStart+0x56>
   1d2c8:	100070b0 	.word	0x100070b0
   1d2cc:	1000707c 	.word	0x1000707c

0001d2d0 <dmScanActTimeout>:
  if (dmScanCb.scanState == DM_SCAN_STATE_SCANNING)
   1d2d0:	4b05      	ldr	r3, [pc, #20]	; (1d2e8 <dmScanActTimeout+0x18>)
   1d2d2:	7e1a      	ldrb	r2, [r3, #24]
   1d2d4:	2a02      	cmp	r2, #2
   1d2d6:	d000      	beq.n	1d2da <dmScanActTimeout+0xa>
}
   1d2d8:	4770      	bx	lr
    HciLeSetScanEnableCmd(FALSE, 0);
   1d2da:	2100      	movs	r1, #0
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
   1d2dc:	2203      	movs	r2, #3
    HciLeSetScanEnableCmd(FALSE, 0);
   1d2de:	4608      	mov	r0, r1
    dmScanCb.scanState = DM_SCAN_STATE_STOPPING;
   1d2e0:	761a      	strb	r2, [r3, #24]
    HciLeSetScanEnableCmd(FALSE, 0);
   1d2e2:	f7f3 be4b 	b.w	10f7c <HciLeSetScanEnableCmd>
   1d2e6:	bf00      	nop
   1d2e8:	100070b0 	.word	0x100070b0

0001d2ec <DmScanInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmScanInit(void)
{
   1d2ec:	b508      	push	{r3, lr}
  WsfTaskLock();
   1d2ee:	f7fa fd19 	bl	17d24 <WsfTaskLock>

  /* set function interface table */
  dmFcnIfTbl[DM_ID_SCAN] = (dmFcnIf_t *) &dmScanFcnIf;
   1d2f2:	4b04      	ldr	r3, [pc, #16]	; (1d304 <DmScanInit+0x18>)
   1d2f4:	4a04      	ldr	r2, [pc, #16]	; (1d308 <DmScanInit+0x1c>)
   1d2f6:	609a      	str	r2, [r3, #8]

  /* initialize scan module */
  dmScanInit();
   1d2f8:	f7ff fb80 	bl	1c9fc <dmScanInit>

  WsfTaskUnlock();
}
   1d2fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  WsfTaskUnlock();
   1d300:	f7fa bd1a 	b.w	17d38 <WsfTaskUnlock>
   1d304:	10002e58 	.word	0x10002e58
   1d308:	00026248 	.word	0x00026248

0001d30c <DmScanModeLeg>:
 *  \return TRUE if DM scanning is in legacy mode. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t DmScanModeLeg(void)
{
  return (dmFcnIfTbl[DM_ID_SCAN] == (dmFcnIf_t *) &dmScanFcnIf) ? TRUE : FALSE;
   1d30c:	4a03      	ldr	r2, [pc, #12]	; (1d31c <DmScanModeLeg+0x10>)
   1d30e:	4b04      	ldr	r3, [pc, #16]	; (1d320 <DmScanModeLeg+0x14>)
   1d310:	6890      	ldr	r0, [r2, #8]
}
   1d312:	1ac0      	subs	r0, r0, r3
   1d314:	fab0 f080 	clz	r0, r0
   1d318:	0940      	lsrs	r0, r0, #5
   1d31a:	4770      	bx	lr
   1d31c:	10002e58 	.word	0x10002e58
   1d320:	00026248 	.word	0x00026248

0001d324 <dmSecMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecMsgHandler(dmSecMsg_t *pMsg)
{
   1d324:	b570      	push	{r4, r5, r6, lr}
   1d326:	4604      	mov	r4, r0
  dmConnCcb_t *pCcb;

  /* look up ccb */
  if ((pCcb = dmConnCcbById((dmConnId_t) pMsg->hdr.param)) != NULL)
   1d328:	7800      	ldrb	r0, [r0, #0]
   1d32a:	f7fe fd43 	bl	1bdb4 <dmConnCcbById>
   1d32e:	b128      	cbz	r0, 1d33c <dmSecMsgHandler+0x18>
  {
    /* process API encrypt req */
    switch (pMsg->hdr.event)
   1d330:	78a3      	ldrb	r3, [r4, #2]
   1d332:	2b50      	cmp	r3, #80	; 0x50
   1d334:	4605      	mov	r5, r0
   1d336:	d00c      	beq.n	1d352 <dmSecMsgHandler+0x2e>
   1d338:	2b51      	cmp	r3, #81	; 0x51
   1d33a:	d000      	beq.n	1d33e <dmSecMsgHandler+0x1a>

    default:
      break;
    }
  }
}
   1d33c:	bd70      	pop	{r4, r5, r6, pc}
      if (pMsg->ltkRsp.keyFound)
   1d33e:	7d22      	ldrb	r2, [r4, #20]
   1d340:	b1ca      	cbz	r2, 1d376 <dmSecMsgHandler+0x52>
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
   1d342:	7d63      	ldrb	r3, [r4, #21]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   1d344:	8980      	ldrh	r0, [r0, #12]
        pCcb->tmpSecLevel = pMsg->ltkRsp.secLevel;
   1d346:	762b      	strb	r3, [r5, #24]
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   1d348:	1d21      	adds	r1, r4, #4
}
   1d34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HciLeLtkReqReplCmd(pCcb->handle, pMsg->ltkRsp.key);
   1d34e:	f7f3 bba3 	b.w	10a98 <HciLeLtkReqReplCmd>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   1d352:	7c00      	ldrb	r0, [r0, #16]
   1d354:	2201      	movs	r2, #1
   1d356:	2102      	movs	r1, #2
   1d358:	f7fe ff22 	bl	1c1a0 <DmConnSetIdle>
      pCcb->tmpSecLevel = pMsg->encryptReq.secLevel;
   1d35c:	7fa2      	ldrb	r2, [r4, #30]
   1d35e:	762a      	strb	r2, [r5, #24]
      pCcb->usingLtk = TRUE;
   1d360:	2301      	movs	r3, #1
   1d362:	74ab      	strb	r3, [r5, #18]
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   1d364:	8ba2      	ldrh	r2, [r4, #28]
   1d366:	89a8      	ldrh	r0, [r5, #12]
   1d368:	1d23      	adds	r3, r4, #4
   1d36a:	f104 0114 	add.w	r1, r4, #20
}
   1d36e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HciLeStartEncryptionCmd(pCcb->handle, pMsg->encryptReq.ltk.rand,
   1d372:	f7f3 bebf 	b.w	110f4 <HciLeStartEncryptionCmd>
        DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   1d376:	7c00      	ldrb	r0, [r0, #16]
   1d378:	2102      	movs	r1, #2
   1d37a:	f7fe ff11 	bl	1c1a0 <DmConnSetIdle>
        HciLeLtkReqNegReplCmd(pCcb->handle);
   1d37e:	89a8      	ldrh	r0, [r5, #12]
}
   1d380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HciLeLtkReqNegReplCmd(pCcb->handle);
   1d384:	f7f3 bb52 	b.w	10a2c <HciLeLtkReqNegReplCmd>

0001d388 <dmSecReset>:
 */
/*************************************************************************************************/
void dmSecReset(void)
{
  /* initialize smp database */
  SmpDbInit();
   1d388:	f7ef bfe4 	b.w	d354 <SmpDbInit>

0001d38c <dmSecHciHandler>:
{
   1d38c:	b570      	push	{r4, r5, r6, lr}
   1d38e:	4604      	mov	r4, r0
   1d390:	b084      	sub	sp, #16
  if ((pCcb = dmConnCcbByHandle(pEvent->hdr.param)) != NULL)
   1d392:	8800      	ldrh	r0, [r0, #0]
   1d394:	f7fe fce6 	bl	1bd64 <dmConnCcbByHandle>
   1d398:	b130      	cbz	r0, 1d3a8 <dmSecHciHandler+0x1c>
    if (pEvent->hdr.event == HCI_LE_LTK_REQ_CBACK_EVT)
   1d39a:	78a3      	ldrb	r3, [r4, #2]
   1d39c:	2b10      	cmp	r3, #16
   1d39e:	4605      	mov	r5, r0
   1d3a0:	d004      	beq.n	1d3ac <dmSecHciHandler+0x20>
    else if (pEvent->hdr.event == HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT ||
   1d3a2:	3b0e      	subs	r3, #14
   1d3a4:	2b01      	cmp	r3, #1
   1d3a6:	d922      	bls.n	1d3ee <dmSecHciHandler+0x62>
}
   1d3a8:	b004      	add	sp, #16
   1d3aa:	bd70      	pop	{r4, r5, r6, pc}
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   1d3ac:	89e3      	ldrh	r3, [r4, #14]
   1d3ae:	b96b      	cbnz	r3, 1d3cc <dmSecHciHandler+0x40>
          (memcmp(pEvent->leLtkReq.randNum, calc128Zeros, HCI_RAND_LEN) == 0))
   1d3b0:	492b      	ldr	r1, [pc, #172]	; (1d460 <dmSecHciHandler+0xd4>)
   1d3b2:	2208      	movs	r2, #8
   1d3b4:	1da0      	adds	r0, r4, #6
   1d3b6:	f003 feab 	bl	21110 <memcmp>
      if ((pEvent->leLtkReq.encDiversifier == 0) &&
   1d3ba:	4606      	mov	r6, r0
   1d3bc:	b930      	cbnz	r0, 1d3cc <dmSecHciHandler+0x40>
        if ((pKey = SmpDmGetStk(pCcb->connId, &secLevel)) != NULL)
   1d3be:	a902      	add	r1, sp, #8
   1d3c0:	7c28      	ldrb	r0, [r5, #16]
   1d3c2:	f7f0 fcbb 	bl	dd3c <SmpDmGetStk>
   1d3c6:	4601      	mov	r1, r0
   1d3c8:	2800      	cmp	r0, #0
   1d3ca:	d141      	bne.n	1d450 <dmSecHciHandler+0xc4>
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_BUSY);
   1d3cc:	7c28      	ldrb	r0, [r5, #16]
   1d3ce:	2201      	movs	r2, #1
   1d3d0:	2102      	movs	r1, #2
   1d3d2:	f7fe fee5 	bl	1c1a0 <DmConnSetIdle>
      pCcb->usingLtk = TRUE;
   1d3d6:	2201      	movs	r2, #1
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d3d8:	4b22      	ldr	r3, [pc, #136]	; (1d464 <dmSecHciHandler+0xd8>)
      pCcb->usingLtk = TRUE;
   1d3da:	74aa      	strb	r2, [r5, #18]
      pEvent->hdr.param = pCcb->connId;
   1d3dc:	7c29      	ldrb	r1, [r5, #16]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d3de:	689b      	ldr	r3, [r3, #8]
      pEvent->hdr.param = pCcb->connId;
   1d3e0:	8021      	strh	r1, [r4, #0]
      pEvent->hdr.event = DM_SEC_LTK_REQ_IND;
   1d3e2:	2230      	movs	r2, #48	; 0x30
   1d3e4:	70a2      	strb	r2, [r4, #2]
      (*dmCb.cback)((dmEvt_t *) pEvent);
   1d3e6:	4620      	mov	r0, r4
   1d3e8:	4798      	blx	r3
}
   1d3ea:	b004      	add	sp, #16
   1d3ec:	bd70      	pop	{r4, r5, r6, pc}
      DmConnSetIdle(pCcb->connId, DM_IDLE_DM_ENC, DM_CONN_IDLE);
   1d3ee:	2200      	movs	r2, #0
   1d3f0:	7c00      	ldrb	r0, [r0, #16]
   1d3f2:	2102      	movs	r1, #2
   1d3f4:	f7fe fed4 	bl	1c1a0 <DmConnSetIdle>
      encryptInd.hdr.status = pEvent->hdr.status;
   1d3f8:	78e3      	ldrb	r3, [r4, #3]
      encryptInd.hdr.param = pCcb->connId;
   1d3fa:	7c2a      	ldrb	r2, [r5, #16]
   1d3fc:	f8ad 2008 	strh.w	r2, [sp, #8]
      encryptInd.hdr.status = pEvent->hdr.status;
   1d400:	f88d 300b 	strb.w	r3, [sp, #11]
      if (encryptInd.hdr.status == HCI_SUCCESS)
   1d404:	b193      	cbz	r3, 1d42c <dmSecHciHandler+0xa0>
   1d406:	232d      	movs	r3, #45	; 0x2d
   1d408:	f88d 300a 	strb.w	r3, [sp, #10]
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   1d40c:	a802      	add	r0, sp, #8
  (*dmCb.cback)(pDmEvt);
   1d40e:	4b15      	ldr	r3, [pc, #84]	; (1d464 <dmSecHciHandler+0xd8>)
   1d410:	9001      	str	r0, [sp, #4]
   1d412:	689b      	ldr	r3, [r3, #8]
   1d414:	4798      	blx	r3
      encryptInd.hdr.param = pCcb->connId;
   1d416:	7c2a      	ldrb	r2, [r5, #16]
      encryptInd.hdr.status = pEvent->hdr.status;
   1d418:	78e3      	ldrb	r3, [r4, #3]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
   1d41a:	9801      	ldr	r0, [sp, #4]
      encryptInd.hdr.param = pCcb->connId;
   1d41c:	f8ad 2008 	strh.w	r2, [sp, #8]
      encryptInd.hdr.status = pEvent->hdr.status;
   1d420:	f88d 300b 	strb.w	r3, [sp, #11]
      SmpDmEncryptInd((wsfMsgHdr_t *) &encryptInd);
   1d424:	f7f0 fc60 	bl	dce8 <SmpDmEncryptInd>
}
   1d428:	b004      	add	sp, #16
   1d42a:	bd70      	pop	{r4, r5, r6, pc}
        pCcb->secLevel = pCcb->tmpSecLevel;
   1d42c:	7e2a      	ldrb	r2, [r5, #24]
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   1d42e:	4b0e      	ldr	r3, [pc, #56]	; (1d468 <dmSecHciHandler+0xdc>)
        pCcb->secLevel = pCcb->tmpSecLevel;
   1d430:	75ea      	strb	r2, [r5, #23]
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   1d432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
        encryptInd.usingLtk = pCcb->usingLtk;
   1d436:	7ca9      	ldrb	r1, [r5, #18]
   1d438:	f88d 100c 	strb.w	r1, [sp, #12]
   1d43c:	222c      	movs	r2, #44	; 0x2c
   1d43e:	f88d 200a 	strb.w	r2, [sp, #10]
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   1d442:	a802      	add	r0, sp, #8
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   1d444:	2b00      	cmp	r3, #0
   1d446:	d0e2      	beq.n	1d40e <dmSecHciHandler+0x82>
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   1d448:	9001      	str	r0, [sp, #4]
   1d44a:	4798      	blx	r3
   1d44c:	9801      	ldr	r0, [sp, #4]
   1d44e:	e7de      	b.n	1d40e <dmSecHciHandler+0x82>
          pCcb->tmpSecLevel = secLevel;
   1d450:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1d454:	762b      	strb	r3, [r5, #24]
          pCcb->usingLtk = FALSE;
   1d456:	74ae      	strb	r6, [r5, #18]
          HciLeLtkReqReplCmd(pEvent->hdr.param, pKey);
   1d458:	8820      	ldrh	r0, [r4, #0]
   1d45a:	f7f3 fb1d 	bl	10a98 <HciLeLtkReqReplCmd>
          return;
   1d45e:	e7a3      	b.n	1d3a8 <dmSecHciHandler+0x1c>
   1d460:	00024d1c 	.word	0x00024d1c
   1d464:	1000707c 	.word	0x1000707c
   1d468:	10006fa8 	.word	0x10006fa8

0001d46c <DmSmpCbackExec>:
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   1d46c:	7883      	ldrb	r3, [r0, #2]
   1d46e:	2b2a      	cmp	r3, #42	; 0x2a
{
   1d470:	b510      	push	{r4, lr}
   1d472:	4604      	mov	r4, r0
  if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND ||
   1d474:	d007      	beq.n	1d486 <DmSmpCbackExec+0x1a>
   1d476:	2b2c      	cmp	r3, #44	; 0x2c
   1d478:	d005      	beq.n	1d486 <DmSmpCbackExec+0x1a>
  (*dmCb.cback)(pDmEvt);
   1d47a:	4b07      	ldr	r3, [pc, #28]	; (1d498 <DmSmpCbackExec+0x2c>)
   1d47c:	4620      	mov	r0, r4
   1d47e:	689b      	ldr	r3, [r3, #8]
}
   1d480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (*dmCb.cback)(pDmEvt);
   1d484:	4718      	bx	r3
    if (dmConnCb.connCback[DM_CLIENT_ID_ATT] != NULL)
   1d486:	4b05      	ldr	r3, [pc, #20]	; (1d49c <DmSmpCbackExec+0x30>)
   1d488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1d48c:	2b00      	cmp	r3, #0
   1d48e:	d0f4      	beq.n	1d47a <DmSmpCbackExec+0xe>
      (*dmConnCb.connCback[DM_CLIENT_ID_ATT])(pDmEvt);
   1d490:	4620      	mov	r0, r4
   1d492:	4798      	blx	r3
   1d494:	e7f1      	b.n	1d47a <DmSmpCbackExec+0xe>
   1d496:	bf00      	nop
   1d498:	1000707c 	.word	0x1000707c
   1d49c:	10006fa8 	.word	0x10006fa8

0001d4a0 <DmSecAuthRsp>:
{
   1d4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4a2:	4607      	mov	r7, r0
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
   1d4a4:	2016      	movs	r0, #22
{
   1d4a6:	460e      	mov	r6, r1
   1d4a8:	4615      	mov	r5, r2
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmAuthRsp_t))) != NULL)
   1d4aa:	f7fa fbf9 	bl	17ca0 <WsfMsgAlloc>
   1d4ae:	b178      	cbz	r0, 1d4d0 <DmSecAuthRsp+0x30>
    pMsg->hdr.event = SMP_MSG_API_AUTH_RSP;
   1d4b0:	2304      	movs	r3, #4
   1d4b2:	4604      	mov	r4, r0
   1d4b4:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = connId;
   1d4b6:	8007      	strh	r7, [r0, #0]
    pMsg->authDataLen = authDataLen;
   1d4b8:	7506      	strb	r6, [r0, #20]
    if (pAuthData != NULL)
   1d4ba:	b125      	cbz	r5, 1d4c6 <DmSecAuthRsp+0x26>
      memcpy(pMsg->authData, pAuthData, authDataLen);
   1d4bc:	4632      	mov	r2, r6
   1d4be:	4629      	mov	r1, r5
   1d4c0:	4418      	add	r0, r3
   1d4c2:	f7ee fe1d 	bl	c100 <memcpy>
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1d4c6:	4620      	mov	r0, r4
}
   1d4c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1d4cc:	f7f0 bc04 	b.w	dcd8 <SmpDmMsgSend>
}
   1d4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d4d2:	bf00      	nop

0001d4d4 <DmSecInit>:
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   1d4d4:	4b03      	ldr	r3, [pc, #12]	; (1d4e4 <DmSecInit+0x10>)
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
   1d4d6:	4904      	ldr	r1, [pc, #16]	; (1d4e8 <DmSecInit+0x14>)
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   1d4d8:	4a04      	ldr	r2, [pc, #16]	; (1d4ec <DmSecInit+0x18>)
  dmFcnIfTbl[DM_ID_SEC] = (dmFcnIf_t *) &dmSecFcnIf;
   1d4da:	4805      	ldr	r0, [pc, #20]	; (1d4f0 <DmSecInit+0x1c>)
   1d4dc:	6148      	str	r0, [r1, #20]
  dmSecCb.pCsrk = dmSecCb.pIrk = (uint8_t *) calc128Zeros;
   1d4de:	e9c3 2200 	strd	r2, r2, [r3]
}
   1d4e2:	4770      	bx	lr
   1d4e4:	100070d4 	.word	0x100070d4
   1d4e8:	10002e58 	.word	0x10002e58
   1d4ec:	00024d1c 	.word	0x00024d1c
   1d4f0:	00026254 	.word	0x00026254

0001d4f4 <DmSecSetLocalIrk>:
{
   1d4f4:	b510      	push	{r4, lr}
   1d4f6:	4604      	mov	r4, r0
  WsfTaskLock();
   1d4f8:	f7fa fc14 	bl	17d24 <WsfTaskLock>
  dmSecCb.pIrk = pIrk;
   1d4fc:	4b02      	ldr	r3, [pc, #8]	; (1d508 <DmSecSetLocalIrk+0x14>)
   1d4fe:	601c      	str	r4, [r3, #0]
}
   1d500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WsfTaskUnlock();
   1d504:	f7fa bc18 	b.w	17d38 <WsfTaskUnlock>
   1d508:	100070d4 	.word	0x100070d4

0001d50c <DmSecGetLocalCsrk>:
  return dmSecCb.pCsrk;
   1d50c:	4b01      	ldr	r3, [pc, #4]	; (1d514 <DmSecGetLocalCsrk+0x8>)
}
   1d50e:	6858      	ldr	r0, [r3, #4]
   1d510:	4770      	bx	lr
   1d512:	bf00      	nop
   1d514:	100070d4 	.word	0x100070d4

0001d518 <DmSecGetLocalIrk>:
  return dmSecCb.pIrk;
   1d518:	4b01      	ldr	r3, [pc, #4]	; (1d520 <DmSecGetLocalIrk+0x8>)
}
   1d51a:	6818      	ldr	r0, [r3, #0]
   1d51c:	4770      	bx	lr
   1d51e:	bf00      	nop
   1d520:	100070d4 	.word	0x100070d4

0001d524 <dmSecLescMsgHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void dmSecLescMsgHandler(dmSecMsg_t *pMsg)
{
   1d524:	b530      	push	{r4, r5, lr}
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
   1d526:	7883      	ldrb	r3, [r0, #2]
   1d528:	2b81      	cmp	r3, #129	; 0x81
{
   1d52a:	b08b      	sub	sp, #44	; 0x2c
   1d52c:	4604      	mov	r4, r0
  if (pMsg->hdr.event == DM_SEC_MSG_ECC_KEY_CNF)
   1d52e:	d003      	beq.n	1d538 <dmSecLescMsgHandler+0x14>
  {
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
    (*dmCb.cback)((dmEvt_t *) pMsg);
  }
  else if (pMsg->hdr.event == DM_SEC_MSG_CALC_OOB_CNF)
   1d530:	2b80      	cmp	r3, #128	; 0x80
   1d532:	d009      	beq.n	1d548 <dmSecLescMsgHandler+0x24>

    WsfBufFree(dmSecOobRand);

    (*dmCb.cback)((dmEvt_t *) &oobEvt);
  }
}
   1d534:	b00b      	add	sp, #44	; 0x2c
   1d536:	bd30      	pop	{r4, r5, pc}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   1d538:	4b0f      	ldr	r3, [pc, #60]	; (1d578 <dmSecLescMsgHandler+0x54>)
   1d53a:	689b      	ldr	r3, [r3, #8]
    pMsg->hdr.event = DM_SEC_ECC_KEY_IND;
   1d53c:	2234      	movs	r2, #52	; 0x34
   1d53e:	7082      	strb	r2, [r0, #2]
}
   1d540:	b00b      	add	sp, #44	; 0x2c
   1d542:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    (*dmCb.cback)((dmEvt_t *) pMsg);
   1d546:	4718      	bx	r3
    Calc128Cpy(oobEvt.random, dmSecOobRand);
   1d548:	4d0c      	ldr	r5, [pc, #48]	; (1d57c <dmSecLescMsgHandler+0x58>)
    WsfBufFree(pCmacMsg->pPlainText);
   1d54a:	6880      	ldr	r0, [r0, #8]
   1d54c:	f7fa fb78 	bl	17c40 <WsfBufFree>
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   1d550:	2333      	movs	r3, #51	; 0x33
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
   1d552:	6861      	ldr	r1, [r4, #4]
    oobEvt.hdr.event = DM_SEC_CALC_OOB_IND;
   1d554:	f8ad 3006 	strh.w	r3, [sp, #6]
    Calc128Cpy(oobEvt.confirm, ((secAes_t *) pMsg)->pCiphertext);
   1d558:	a802      	add	r0, sp, #8
   1d55a:	f7f5 ff05 	bl	13368 <Calc128Cpy>
    Calc128Cpy(oobEvt.random, dmSecOobRand);
   1d55e:	6829      	ldr	r1, [r5, #0]
   1d560:	a806      	add	r0, sp, #24
   1d562:	f7f5 ff01 	bl	13368 <Calc128Cpy>
    WsfBufFree(dmSecOobRand);
   1d566:	6828      	ldr	r0, [r5, #0]
   1d568:	f7fa fb6a 	bl	17c40 <WsfBufFree>
    (*dmCb.cback)((dmEvt_t *) &oobEvt);
   1d56c:	4b02      	ldr	r3, [pc, #8]	; (1d578 <dmSecLescMsgHandler+0x54>)
   1d56e:	a801      	add	r0, sp, #4
   1d570:	689b      	ldr	r3, [r3, #8]
   1d572:	4798      	blx	r3
}
   1d574:	b00b      	add	sp, #44	; 0x2c
   1d576:	bd30      	pop	{r4, r5, pc}
   1d578:	1000707c 	.word	0x1000707c
   1d57c:	100070dc 	.word	0x100070dc

0001d580 <DmSecSetOob>:
 */
/*************************************************************************************************/
void DmSecSetOob(dmConnId_t connId, dmSecLescOobCfg_t *pCfg)
{
  /* Update the Security Manager control structure with random and confirm values from the peer */
  SmpScSetOobCfg(connId, pCfg);
   1d580:	f7f1 bc68 	b.w	ee54 <SmpScSetOobCfg>

0001d584 <DmSecGenerateEccKeyReq>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecGenerateEccKeyReq()
{
  SecEccGenKey(dmCb.handlerId, 0, DM_SEC_MSG_ECC_KEY_CNF);
   1d584:	4b02      	ldr	r3, [pc, #8]	; (1d590 <DmSecGenerateEccKeyReq+0xc>)
   1d586:	2281      	movs	r2, #129	; 0x81
   1d588:	7b18      	ldrb	r0, [r3, #12]
   1d58a:	2100      	movs	r1, #0
   1d58c:	f7f2 b88a 	b.w	f6a4 <SecEccGenKey>
   1d590:	1000707c 	.word	0x1000707c

0001d594 <DmSecSetEccKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecSetEccKey(secEccKey_t *pKey)
{
   1d594:	b508      	push	{r3, lr}
   1d596:	4601      	mov	r1, r0
  memcpy(&localEccKey, pKey, sizeof(secEccKey_t));
   1d598:	2260      	movs	r2, #96	; 0x60
   1d59a:	4802      	ldr	r0, [pc, #8]	; (1d5a4 <DmSecSetEccKey+0x10>)
   1d59c:	f7ee fdb0 	bl	c100 <memcpy>
}
   1d5a0:	bd08      	pop	{r3, pc}
   1d5a2:	bf00      	nop
   1d5a4:	100070e0 	.word	0x100070e0

0001d5a8 <DmSecGetEccKey>:
 */
/*************************************************************************************************/
secEccKey_t *DmSecGetEccKey(void)
{
  return &localEccKey;
}
   1d5a8:	4800      	ldr	r0, [pc, #0]	; (1d5ac <DmSecGetEccKey+0x4>)
   1d5aa:	4770      	bx	lr
   1d5ac:	100070e0 	.word	0x100070e0

0001d5b0 <DmSecCompareRsp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecCompareRsp(dmConnId_t connId, bool_t valid)
{
   1d5b0:	b570      	push	{r4, r5, r6, lr}
   1d5b2:	4605      	mov	r5, r0
  smpDmMsg_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmMsg_t))) != NULL)
   1d5b4:	2016      	movs	r0, #22
{
   1d5b6:	460e      	mov	r6, r1
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmMsg_t))) != NULL)
   1d5b8:	f7fa fb72 	bl	17ca0 <WsfMsgAlloc>
   1d5bc:	b198      	cbz	r0, 1d5e6 <DmSecCompareRsp+0x36>
  {
    /* Execution an an SMP state machine event to send the compare response */
    pMsg->hdr.param = connId;
   1d5be:	4604      	mov	r4, r0
   1d5c0:	8005      	strh	r5, [r0, #0]

    if (valid)
   1d5c2:	b136      	cbz	r6, 1d5d2 <DmSecCompareRsp+0x22>
    {
      pMsg->hdr.event = SMP_MSG_API_USER_CONFIRM;
   1d5c4:	2316      	movs	r3, #22
   1d5c6:	7083      	strb	r3, [r0, #2]
    else
    {
      SmpScGetCancelMsgWithReattempt(connId, (wsfMsgHdr_t *) pMsg, SMP_ERR_NUMERIC_COMPARISON);
    }

    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1d5c8:	4620      	mov	r0, r4
  }
}
   1d5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1d5ce:	f7f0 bb83 	b.w	dcd8 <SmpDmMsgSend>
      SmpScGetCancelMsgWithReattempt(connId, (wsfMsgHdr_t *) pMsg, SMP_ERR_NUMERIC_COMPARISON);
   1d5d2:	4601      	mov	r1, r0
   1d5d4:	220c      	movs	r2, #12
   1d5d6:	4628      	mov	r0, r5
   1d5d8:	f7f1 fb7a 	bl	ecd0 <SmpScGetCancelMsgWithReattempt>
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1d5dc:	4620      	mov	r0, r4
}
   1d5de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1d5e2:	f7f0 bb79 	b.w	dcd8 <SmpDmMsgSend>
}
   1d5e6:	bd70      	pop	{r4, r5, r6, pc}

0001d5e8 <DmSecGetCompareValue>:
/*************************************************************************************************/
uint32_t DmSecGetCompareValue(uint8_t *pConfirm)
{
  uint32_t compare = ((uint32_t) pConfirm[15]        +
                     ((uint32_t) pConfirm[14] << 8)  +
                     ((uint32_t) pConfirm[13] << 16) +
   1d5e8:	7b43      	ldrb	r3, [r0, #13]
                     ((uint32_t) pConfirm[14] << 8)  +
   1d5ea:	f890 c00e 	ldrb.w	ip, [r0, #14]
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   1d5ee:	7bc1      	ldrb	r1, [r0, #15]
                     ((uint32_t) pConfirm[12] << 24));
   1d5f0:	7b00      	ldrb	r0, [r0, #12]

  /* return the least significant six digits */
  return compare % 1000000;
   1d5f2:	4a07      	ldr	r2, [pc, #28]	; (1d610 <DmSecGetCompareValue+0x28>)
                     ((uint32_t) pConfirm[13] << 16) +
   1d5f4:	041b      	lsls	r3, r3, #16
                     ((uint32_t) pConfirm[14] << 8)  +
   1d5f6:	eb03 230c 	add.w	r3, r3, ip, lsl #8
   1d5fa:	440b      	add	r3, r1
  uint32_t compare = ((uint32_t) pConfirm[15]        +
   1d5fc:	eb03 6300 	add.w	r3, r3, r0, lsl #24
  return compare % 1000000;
   1d600:	fba2 1203 	umull	r1, r2, r2, r3
   1d604:	4803      	ldr	r0, [pc, #12]	; (1d614 <DmSecGetCompareValue+0x2c>)
   1d606:	0c92      	lsrs	r2, r2, #18
}
   1d608:	fb00 3012 	mls	r0, r0, r2, r3
   1d60c:	4770      	bx	lr
   1d60e:	bf00      	nop
   1d610:	431bde83 	.word	0x431bde83
   1d614:	000f4240 	.word	0x000f4240

0001d618 <DmSecLescInit>:
 *  \return None.
 */
/*************************************************************************************************/
void DmSecLescInit(void)
{
  dmFcnIfTbl[DM_ID_LESC] = (dmFcnIf_t *) &dmSecLescFcnIf;
   1d618:	4b01      	ldr	r3, [pc, #4]	; (1d620 <DmSecLescInit+0x8>)
   1d61a:	4a02      	ldr	r2, [pc, #8]	; (1d624 <DmSecLescInit+0xc>)
   1d61c:	621a      	str	r2, [r3, #32]
}
   1d61e:	4770      	bx	lr
   1d620:	10002e58 	.word	0x10002e58
   1d624:	00026260 	.word	0x00026260

0001d628 <DmSmpEncryptReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSmpEncryptReq(dmConnId_t connId, uint8_t secLevel, uint8_t *pKey)
{
   1d628:	b570      	push	{r4, r5, r6, lr}
   1d62a:	460d      	mov	r5, r1
   1d62c:	4614      	mov	r4, r2
  dmConnCcb_t *pCcb;

  if ((pCcb = dmConnCcbById(connId)) != NULL)
   1d62e:	f7fe fbc1 	bl	1bdb4 <dmConnCcbById>
   1d632:	b148      	cbz	r0, 1d648 <DmSmpEncryptReq+0x20>
  {
    /* store security level */
    pCcb->tmpSecLevel = secLevel;

    /* not using LTK */
    pCcb->usingLtk = FALSE;
   1d634:	2200      	movs	r2, #0
    pCcb->tmpSecLevel = secLevel;
   1d636:	7605      	strb	r5, [r0, #24]
    pCcb->usingLtk = FALSE;
   1d638:	7482      	strb	r2, [r0, #18]

    /* start encryption; note EDIV and RAND are zero */
    HciLeStartEncryptionCmd(pCcb->handle, (uint8_t *) calc128Zeros, 0, pKey);
   1d63a:	4623      	mov	r3, r4
   1d63c:	8980      	ldrh	r0, [r0, #12]
   1d63e:	4903      	ldr	r1, [pc, #12]	; (1d64c <DmSmpEncryptReq+0x24>)
  }
}
   1d640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HciLeStartEncryptionCmd(pCcb->handle, (uint8_t *) calc128Zeros, 0, pKey);
   1d644:	f7f3 bd56 	b.w	110f4 <HciLeStartEncryptionCmd>
}
   1d648:	bd70      	pop	{r4, r5, r6, pc}
   1d64a:	bf00      	nop
   1d64c:	00024d1c 	.word	0x00024d1c

0001d650 <DmSecPairReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecPairReq(dmConnId_t connId, uint8_t oob, uint8_t auth, uint8_t iKeyDist, uint8_t rKeyDist)
{
   1d650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d654:	4680      	mov	r8, r0
  smpDmPair_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
   1d656:	2008      	movs	r0, #8
{
   1d658:	f89d 7018 	ldrb.w	r7, [sp, #24]
   1d65c:	460e      	mov	r6, r1
   1d65e:	4615      	mov	r5, r2
   1d660:	461c      	mov	r4, r3
  if ((pMsg = WsfMsgAlloc(sizeof(smpDmPair_t))) != NULL)
   1d662:	f7fa fb1d 	bl	17ca0 <WsfMsgAlloc>
   1d666:	b178      	cbz	r0, 1d688 <DmSecPairReq+0x38>
    pMsg->hdr.param = connId;
    pMsg->oob = oob;
    pMsg->auth = auth;

    /* clear any erroneous key dist bits set by app */
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
   1d668:	f004 0307 	and.w	r3, r4, #7
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
   1d66c:	f007 0707 	and.w	r7, r7, #7
    pMsg->iKeyDist = iKeyDist & SMP_KEY_DIST_MASK;
   1d670:	7183      	strb	r3, [r0, #6]
    pMsg->hdr.event = SMP_MSG_API_PAIR_REQ;
   1d672:	2301      	movs	r3, #1
    pMsg->oob = oob;
   1d674:	7106      	strb	r6, [r0, #4]
    pMsg->auth = auth;
   1d676:	7145      	strb	r5, [r0, #5]
    pMsg->rKeyDist = rKeyDist & SMP_KEY_DIST_MASK;
   1d678:	71c7      	strb	r7, [r0, #7]
    pMsg->hdr.event = SMP_MSG_API_PAIR_REQ;
   1d67a:	7083      	strb	r3, [r0, #2]
    pMsg->hdr.param = connId;
   1d67c:	f8a0 8000 	strh.w	r8, [r0]

    /* note we're sending this to SMP */
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
  }
}
   1d680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SmpDmMsgSend((smpDmMsg_t *) pMsg);
   1d684:	f7f0 bb28 	b.w	dcd8 <SmpDmMsgSend>
}
   1d688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d68c <DmSecEncryptReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void DmSecEncryptReq(dmConnId_t connId, uint8_t secLevel, dmSecLtk_t *pLtk)
{
   1d68c:	b570      	push	{r4, r5, r6, lr}
   1d68e:	4606      	mov	r6, r0
  dmSecApiEncryptReq_t  *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiEncryptReq_t))) != NULL)
   1d690:	2020      	movs	r0, #32
{
   1d692:	460d      	mov	r5, r1
   1d694:	4614      	mov	r4, r2
  if ((pMsg = WsfMsgAlloc(sizeof(dmSecApiEncryptReq_t))) != NULL)
   1d696:	f7fa fb03 	bl	17ca0 <WsfMsgAlloc>
   1d69a:	b1f8      	cbz	r0, 1d6dc <DmSecEncryptReq+0x50>
  {
    pMsg->hdr.event = DM_SEC_MSG_API_ENCRYPT_REQ;
   1d69c:	2250      	movs	r2, #80	; 0x50
   1d69e:	7082      	strb	r2, [r0, #2]
    pMsg->hdr.param = connId;
   1d6a0:	4602      	mov	r2, r0
   1d6a2:	4603      	mov	r3, r0
   1d6a4:	f822 6b04 	strh.w	r6, [r2], #4
    memcpy(&pMsg->ltk, pLtk, sizeof(dmSecLtk_t));
   1d6a8:	6820      	ldr	r0, [r4, #0]
   1d6aa:	f8d4 c004 	ldr.w	ip, [r4, #4]
   1d6ae:	68e1      	ldr	r1, [r4, #12]
   1d6b0:	68a6      	ldr	r6, [r4, #8]
   1d6b2:	6058      	str	r0, [r3, #4]
   1d6b4:	f8c2 c004 	str.w	ip, [r2, #4]
   1d6b8:	6096      	str	r6, [r2, #8]
   1d6ba:	60d1      	str	r1, [r2, #12]
   1d6bc:	6920      	ldr	r0, [r4, #16]
   1d6be:	f8d4 c014 	ldr.w	ip, [r4, #20]
   1d6c2:	f8c2 c014 	str.w	ip, [r2, #20]
   1d6c6:	6110      	str	r0, [r2, #16]
   1d6c8:	8b20      	ldrh	r0, [r4, #24]
    pMsg->secLevel = secLevel;

    WsfMsgSend(dmCb.handlerId, pMsg);
   1d6ca:	4905      	ldr	r1, [pc, #20]	; (1d6e0 <DmSecEncryptReq+0x54>)
    memcpy(&pMsg->ltk, pLtk, sizeof(dmSecLtk_t));
   1d6cc:	8310      	strh	r0, [r2, #24]
    pMsg->secLevel = secLevel;
   1d6ce:	779d      	strb	r5, [r3, #30]
    WsfMsgSend(dmCb.handlerId, pMsg);
   1d6d0:	7b08      	ldrb	r0, [r1, #12]
  }
}
   1d6d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    WsfMsgSend(dmCb.handlerId, pMsg);
   1d6d6:	4619      	mov	r1, r3
   1d6d8:	f7fa baee 	b.w	17cb8 <WsfMsgSend>
}
   1d6dc:	bd70      	pop	{r4, r5, r6, pc}
   1d6de:	bf00      	nop
   1d6e0:	1000707c 	.word	0x1000707c

0001d6e4 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   1d6e4:	b508      	push	{r3, lr}
  AttsAddGroup(&svcGapGroup);
   1d6e6:	4804      	ldr	r0, [pc, #16]	; (1d6f8 <SvcCoreAddGroup+0x14>)
   1d6e8:	f7f8 ffba 	bl	16660 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
}
   1d6ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  AttsAddGroup(&svcGattGroup);
   1d6f0:	4802      	ldr	r0, [pc, #8]	; (1d6fc <SvcCoreAddGroup+0x18>)
   1d6f2:	f7f8 bfb5 	b.w	16660 <AttsAddGroup>
   1d6f6:	bf00      	nop
   1d6f8:	10002e94 	.word	0x10002e94
   1d6fc:	10002ea8 	.word	0x10002ea8

0001d700 <SvcCoreGapCentAddrResUpdate>:
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
  gapValCar[0] = value;
   1d700:	4b01      	ldr	r3, [pc, #4]	; (1d708 <SvcCoreGapCentAddrResUpdate+0x8>)
   1d702:	7018      	strb	r0, [r3, #0]
}
   1d704:	4770      	bx	lr
   1d706:	bf00      	nop
   1d708:	10007144 	.word	0x10007144

0001d70c <SvcCoreGapAddRpaoCh>:
 */
/*************************************************************************************************/
void SvcCoreGapAddRpaoCh(void)
{
  /* if RPAO characteristic not already in GAP service */
  if (svcGapGroup.endHandle < GAP_RPAO_HDL)
   1d70c:	4b03      	ldr	r3, [pc, #12]	; (1d71c <SvcCoreGapAddRpaoCh+0x10>)
   1d70e:	8a5a      	ldrh	r2, [r3, #18]
   1d710:	2a08      	cmp	r2, #8
  {
    svcGapGroup.endHandle = GAP_RPAO_HDL;
   1d712:	bf9c      	itt	ls
   1d714:	2209      	movls	r2, #9
   1d716:	825a      	strhls	r2, [r3, #18]
  }
}
   1d718:	4770      	bx	lr
   1d71a:	bf00      	nop
   1d71c:	10002e94 	.word	0x10002e94

0001d720 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1d720:	b570      	push	{r4, r5, r6, lr}
   1d722:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
   1d724:	f001 f8bc 	bl	1e8a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   1d728:	4927      	ldr	r1, [pc, #156]	; (1d7c8 <pvPortMalloc+0xa8>)
   1d72a:	680a      	ldr	r2, [r1, #0]
   1d72c:	b972      	cbnz	r2, 1d74c <pvPortMalloc+0x2c>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1d72e:	4b27      	ldr	r3, [pc, #156]	; (1d7cc <pvPortMalloc+0xac>)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   1d730:	4827      	ldr	r0, [pc, #156]	; (1d7d0 <pvPortMalloc+0xb0>)
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1d732:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
   1d736:	e9c0 3200 	strd	r3, r2, [r0]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   1d73a:	4826      	ldr	r0, [pc, #152]	; (1d7d4 <pvPortMalloc+0xb4>)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   1d73c:	6018      	str	r0, [r3, #0]
	xEnd.pxNextFreeBlock = NULL;
   1d73e:	6002      	str	r2, [r0, #0]
			xHeapHasBeenInitialised = pdTRUE;
   1d740:	2201      	movs	r2, #1
   1d742:	600a      	str	r2, [r1, #0]
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   1d744:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   1d748:	6042      	str	r2, [r0, #4]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   1d74a:	605a      	str	r2, [r3, #4]
		if( xWantedSize > 0 )
   1d74c:	b935      	cbnz	r5, 1d75c <pvPortMalloc+0x3c>
			vApplicationMallocFailedHook();
   1d74e:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
   1d750:	f001 f9ee 	bl	1eb30 <xTaskResumeAll>
			vApplicationMallocFailedHook();
   1d754:	f7f2 f9b2 	bl	fabc <vApplicationMallocFailedHook>
}
   1d758:	4628      	mov	r0, r5
   1d75a:	bd70      	pop	{r4, r5, r6, pc}
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   1d75c:	076b      	lsls	r3, r5, #29
			xWantedSize += heapSTRUCT_SIZE;
   1d75e:	f105 0408 	add.w	r4, r5, #8
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1d762:	bf1c      	itt	ne
   1d764:	f024 0407 	bicne.w	r4, r4, #7
   1d768:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   1d76a:	1e62      	subs	r2, r4, #1
   1d76c:	f643 73f6 	movw	r3, #16374	; 0x3ff6
   1d770:	429a      	cmp	r2, r3
   1d772:	d8ec      	bhi.n	1d74e <pvPortMalloc+0x2e>
			pxBlock = xStart.pxNextFreeBlock;
   1d774:	4816      	ldr	r0, [pc, #88]	; (1d7d0 <pvPortMalloc+0xb0>)
   1d776:	6803      	ldr	r3, [r0, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   1d778:	e003      	b.n	1d782 <pvPortMalloc+0x62>
   1d77a:	681a      	ldr	r2, [r3, #0]
   1d77c:	b122      	cbz	r2, 1d788 <pvPortMalloc+0x68>
   1d77e:	4618      	mov	r0, r3
   1d780:	4613      	mov	r3, r2
   1d782:	6859      	ldr	r1, [r3, #4]
   1d784:	42a1      	cmp	r1, r4
   1d786:	d3f8      	bcc.n	1d77a <pvPortMalloc+0x5a>
			if( pxBlock != &xEnd )
   1d788:	4a12      	ldr	r2, [pc, #72]	; (1d7d4 <pvPortMalloc+0xb4>)
   1d78a:	4293      	cmp	r3, r2
   1d78c:	d0df      	beq.n	1d74e <pvPortMalloc+0x2e>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   1d78e:	461d      	mov	r5, r3
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   1d790:	1b0a      	subs	r2, r1, r4
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   1d792:	f855 6b08 	ldr.w	r6, [r5], #8
   1d796:	6006      	str	r6, [r0, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   1d798:	2a10      	cmp	r2, #16
   1d79a:	d90c      	bls.n	1d7b6 <pvPortMalloc+0x96>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   1d79c:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   1d79e:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
   1d7a0:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   1d7a2:	6871      	ldr	r1, [r6, #4]
   1d7a4:	4b0a      	ldr	r3, [pc, #40]	; (1d7d0 <pvPortMalloc+0xb0>)
   1d7a6:	4618      	mov	r0, r3
   1d7a8:	681b      	ldr	r3, [r3, #0]
   1d7aa:	685a      	ldr	r2, [r3, #4]
   1d7ac:	428a      	cmp	r2, r1
   1d7ae:	d3fa      	bcc.n	1d7a6 <pvPortMalloc+0x86>
   1d7b0:	6033      	str	r3, [r6, #0]
   1d7b2:	4621      	mov	r1, r4
   1d7b4:	6006      	str	r6, [r0, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   1d7b6:	4a08      	ldr	r2, [pc, #32]	; (1d7d8 <pvPortMalloc+0xb8>)
   1d7b8:	6813      	ldr	r3, [r2, #0]
   1d7ba:	1a5b      	subs	r3, r3, r1
   1d7bc:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
   1d7be:	f001 f9b7 	bl	1eb30 <xTaskResumeAll>
}
   1d7c2:	4628      	mov	r0, r5
   1d7c4:	bd70      	pop	{r4, r5, r6, pc}
   1d7c6:	bf00      	nop
   1d7c8:	1000b16c 	.word	0x1000b16c
   1d7cc:	1000716c 	.word	0x1000716c
   1d7d0:	1000b170 	.word	0x1000b170
   1d7d4:	1000b164 	.word	0x1000b164
   1d7d8:	10002ebc 	.word	0x10002ebc

0001d7dc <vPortFree>:
	if( pv != NULL )
   1d7dc:	b1c0      	cbz	r0, 1d810 <vPortFree+0x34>
{
   1d7de:	b538      	push	{r3, r4, r5, lr}
   1d7e0:	4604      	mov	r4, r0
		vTaskSuspendAll();
   1d7e2:	f001 f85d 	bl	1e8a0 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1d7e6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1d7ea:	4b0a      	ldr	r3, [pc, #40]	; (1d814 <vPortFree+0x38>)
		puc -= heapSTRUCT_SIZE;
   1d7ec:	f1a4 0508 	sub.w	r5, r4, #8
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1d7f0:	4618      	mov	r0, r3
   1d7f2:	681b      	ldr	r3, [r3, #0]
   1d7f4:	685a      	ldr	r2, [r3, #4]
   1d7f6:	428a      	cmp	r2, r1
   1d7f8:	d3fa      	bcc.n	1d7f0 <vPortFree+0x14>
			xFreeBytesRemaining += pxLink->xBlockSize;
   1d7fa:	4a07      	ldr	r2, [pc, #28]	; (1d818 <vPortFree+0x3c>)
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1d7fc:	f844 3c08 	str.w	r3, [r4, #-8]
			xFreeBytesRemaining += pxLink->xBlockSize;
   1d800:	6813      	ldr	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1d802:	6005      	str	r5, [r0, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   1d804:	440b      	add	r3, r1
   1d806:	6013      	str	r3, [r2, #0]
}
   1d808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
   1d80c:	f001 b990 	b.w	1eb30 <xTaskResumeAll>
   1d810:	4770      	bx	lr
   1d812:	bf00      	nop
   1d814:	1000b170 	.word	0x1000b170
   1d818:	10002ebc 	.word	0x10002ebc

0001d81c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   1d81c:	b510      	push	{r4, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   1d81e:	2018      	movs	r0, #24
   1d820:	f7ff ff7e 	bl	1d720 <pvPortMalloc>

		if( pxEventBits != NULL )
   1d824:	4604      	mov	r4, r0
   1d826:	b120      	cbz	r0, 1d832 <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
   1d828:	2300      	movs	r3, #0
   1d82a:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   1d82e:	f000 f8db 	bl	1d9e8 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
   1d832:	4620      	mov	r0, r4
   1d834:	bd10      	pop	{r4, pc}
   1d836:	bf00      	nop

0001d838 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   1d838:	b130      	cbz	r0, 1d848 <xEventGroupWaitBits+0x10>
{
   1d83a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1d83e:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
   1d842:	460c      	mov	r4, r1
   1d844:	d001      	beq.n	1d84a <xEventGroupWaitBits+0x12>
   1d846:	e7fe      	b.n	1d846 <xEventGroupWaitBits+0xe>
	configASSERT( xEventGroup );
   1d848:	e7fe      	b.n	1d848 <xEventGroupWaitBits+0x10>
	configASSERT( uxBitsToWaitFor != 0 );
   1d84a:	b901      	cbnz	r1, 1d84e <xEventGroupWaitBits+0x16>
   1d84c:	e7fe      	b.n	1d84c <xEventGroupWaitBits+0x14>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d84e:	4617      	mov	r7, r2
   1d850:	461e      	mov	r6, r3
   1d852:	4605      	mov	r5, r0
   1d854:	f001 fb9a 	bl	1ef8c <xTaskGetSchedulerState>
   1d858:	b908      	cbnz	r0, 1d85e <xEventGroupWaitBits+0x26>
   1d85a:	9b08      	ldr	r3, [sp, #32]
   1d85c:	bb8b      	cbnz	r3, 1d8c2 <xEventGroupWaitBits+0x8a>
	}
	#endif

	vTaskSuspendAll();
   1d85e:	f001 f81f 	bl	1e8a0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   1d862:	f8d5 9000 	ldr.w	r9, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
   1d866:	b36e      	cbz	r6, 1d8c4 <xEventGroupWaitBits+0x8c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1d868:	ea34 0309 	bics.w	r3, r4, r9
   1d86c:	d02d      	beq.n	1d8ca <xEventGroupWaitBits+0x92>
		else if( xTicksToWait == ( TickType_t ) 0 )
   1d86e:	9b08      	ldr	r3, [sp, #32]
   1d870:	b393      	cbz	r3, 1d8d8 <xEventGroupWaitBits+0xa0>
			if( xClearOnExit != pdFALSE )
   1d872:	2f00      	cmp	r7, #0
   1d874:	bf16      	itet	ne
   1d876:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
   1d87a:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
   1d87e:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
			if( xWaitForAllBits != pdFALSE )
   1d882:	2e00      	cmp	r6, #0
   1d884:	bf08      	it	eq
   1d886:	4641      	moveq	r1, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   1d888:	4321      	orrs	r1, r4
   1d88a:	461a      	mov	r2, r3
   1d88c:	1d28      	adds	r0, r5, #4
   1d88e:	f001 fa07 	bl	1eca0 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
   1d892:	f001 f94d 	bl	1eb30 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
   1d896:	b948      	cbnz	r0, 1d8ac <xEventGroupWaitBits+0x74>
			portYIELD_WITHIN_API();
   1d898:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1d89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d8a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1d8a4:	f3bf 8f4f 	dsb	sy
   1d8a8:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
   1d8ac:	f001 fb7e 	bl	1efac <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1d8b0:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
   1d8b4:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1d8b6:	d012      	beq.n	1d8de <xEventGroupWaitBits+0xa6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   1d8b8:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
   1d8bc:	4648      	mov	r0, r9
   1d8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d8c2:	e7fe      	b.n	1d8c2 <xEventGroupWaitBits+0x8a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1d8c4:	ea14 0f09 	tst.w	r4, r9
   1d8c8:	d0d1      	beq.n	1d86e <xEventGroupWaitBits+0x36>
			if( xClearOnExit != pdFALSE )
   1d8ca:	b12f      	cbz	r7, 1d8d8 <xEventGroupWaitBits+0xa0>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1d8cc:	ea29 0404 	bic.w	r4, r9, r4
   1d8d0:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
   1d8d2:	f001 f92d 	bl	1eb30 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
   1d8d6:	e7f1      	b.n	1d8bc <xEventGroupWaitBits+0x84>
	xAlreadyYielded = xTaskResumeAll();
   1d8d8:	f001 f92a 	bl	1eb30 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
   1d8dc:	e7ee      	b.n	1d8bc <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
   1d8de:	f7f5 fe51 	bl	13584 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
   1d8e2:	f8d5 9000 	ldr.w	r9, [r5]
	if( xWaitForAllBits == pdFALSE )
   1d8e6:	b94e      	cbnz	r6, 1d8fc <xEventGroupWaitBits+0xc4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1d8e8:	ea14 0f09 	tst.w	r4, r9
   1d8ec:	d003      	beq.n	1d8f6 <xEventGroupWaitBits+0xbe>
					if( xClearOnExit != pdFALSE )
   1d8ee:	b117      	cbz	r7, 1d8f6 <xEventGroupWaitBits+0xbe>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1d8f0:	ea29 0404 	bic.w	r4, r9, r4
   1d8f4:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
   1d8f6:	f7f5 fe5f 	bl	135b8 <vPortExitCritical>
   1d8fa:	e7dd      	b.n	1d8b8 <xEventGroupWaitBits+0x80>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1d8fc:	ea34 0309 	bics.w	r3, r4, r9
   1d900:	d1f9      	bne.n	1d8f6 <xEventGroupWaitBits+0xbe>
   1d902:	e7f4      	b.n	1d8ee <xEventGroupWaitBits+0xb6>

0001d904 <xEventGroupSetBits>:
	configASSERT( xEventGroup );
   1d904:	b130      	cbz	r0, 1d914 <xEventGroupSetBits+0x10>
{
   1d906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1d90a:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
   1d90e:	4688      	mov	r8, r1
   1d910:	d001      	beq.n	1d916 <xEventGroupSetBits+0x12>
   1d912:	e7fe      	b.n	1d912 <xEventGroupSetBits+0xe>
	configASSERT( xEventGroup );
   1d914:	e7fe      	b.n	1d914 <xEventGroupSetBits+0x10>
   1d916:	4605      	mov	r5, r0
	vTaskSuspendAll();
   1d918:	f000 ffc2 	bl	1e8a0 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
   1d91c:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
   1d91e:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1d920:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
   1d924:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
   1d928:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
   1d92a:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1d92c:	d10c      	bne.n	1d948 <xEventGroupSetBits+0x44>
   1d92e:	e01c      	b.n	1d96a <xEventGroupSetBits+0x66>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1d930:	ea13 0f0c 	tst.w	r3, ip
   1d934:	d006      	beq.n	1d944 <xEventGroupSetBits+0x40>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1d936:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
   1d938:	bf48      	it	mi
   1d93a:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1d93e:	f001 fa8b 	bl	1ee58 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1d942:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1d944:	42a7      	cmp	r7, r4
   1d946:	d00e      	beq.n	1d966 <xEventGroupSetBits+0x62>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1d948:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1d94a:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1d94e:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
   1d950:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1d952:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1d956:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1d95a:	d0e9      	beq.n	1d930 <xEventGroupSetBits+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1d95c:	ea3c 0e03 	bics.w	lr, ip, r3
   1d960:	d0e9      	beq.n	1d936 <xEventGroupSetBits+0x32>
		while( pxListItem != pxListEnd )
   1d962:	42a7      	cmp	r7, r4
   1d964:	d1f0      	bne.n	1d948 <xEventGroupSetBits+0x44>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1d966:	ea23 0306 	bic.w	r3, r3, r6
   1d96a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
   1d96c:	f001 f8e0 	bl	1eb30 <xTaskResumeAll>
}
   1d970:	6828      	ldr	r0, [r5, #0]
   1d972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d976:	bf00      	nop

0001d978 <vEventGroupSetBitsCallback>:
	configASSERT( xEventGroup );
   1d978:	b130      	cbz	r0, 1d988 <vEventGroupSetBitsCallback+0x10>
{
   1d97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1d97e:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
   1d982:	4688      	mov	r8, r1
   1d984:	d001      	beq.n	1d98a <vEventGroupSetBitsCallback+0x12>
   1d986:	e7fe      	b.n	1d986 <vEventGroupSetBitsCallback+0xe>
	configASSERT( xEventGroup );
   1d988:	e7fe      	b.n	1d988 <vEventGroupSetBitsCallback+0x10>
   1d98a:	4605      	mov	r5, r0
	vTaskSuspendAll();
   1d98c:	f000 ff88 	bl	1e8a0 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
   1d990:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
   1d992:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1d994:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
   1d998:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
   1d99c:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
   1d99e:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1d9a0:	d10c      	bne.n	1d9bc <vEventGroupSetBitsCallback+0x44>
   1d9a2:	e01c      	b.n	1d9de <vEventGroupSetBitsCallback+0x66>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1d9a4:	ea1c 0f03 	tst.w	ip, r3
   1d9a8:	d006      	beq.n	1d9b8 <vEventGroupSetBitsCallback+0x40>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1d9aa:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
   1d9ac:	bf48      	it	mi
   1d9ae:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1d9b2:	f001 fa51 	bl	1ee58 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1d9b6:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
   1d9b8:	42a7      	cmp	r7, r4
   1d9ba:	d00e      	beq.n	1d9da <vEventGroupSetBitsCallback+0x62>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1d9bc:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1d9be:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1d9c2:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
   1d9c4:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1d9c6:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1d9ca:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1d9ce:	d0e9      	beq.n	1d9a4 <vEventGroupSetBitsCallback+0x2c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1d9d0:	ea3c 0e03 	bics.w	lr, ip, r3
   1d9d4:	d0e9      	beq.n	1d9aa <vEventGroupSetBitsCallback+0x32>
		while( pxListItem != pxListEnd )
   1d9d6:	42a7      	cmp	r7, r4
   1d9d8:	d1f0      	bne.n	1d9bc <vEventGroupSetBitsCallback+0x44>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1d9da:	ea23 0306 	bic.w	r3, r3, r6
   1d9de:	602b      	str	r3, [r5, #0]
}
   1d9e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	( void ) xTaskResumeAll();
   1d9e4:	f001 b8a4 	b.w	1eb30 <xTaskResumeAll>

0001d9e8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1d9e8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1d9ec:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1d9f0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1d9f2:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1d9f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1d9fa:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1d9fc:	4770      	bx	lr
   1d9fe:	bf00      	nop

0001da00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   1da00:	2300      	movs	r3, #0
   1da02:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1da04:	4770      	bx	lr
   1da06:	bf00      	nop

0001da08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   1da08:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1da0a:	689a      	ldr	r2, [r3, #8]
   1da0c:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
   1da0e:	6802      	ldr	r2, [r0, #0]
{
   1da10:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1da12:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
   1da14:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
   1da16:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1da18:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1da1a:	6099      	str	r1, [r3, #8]
}
   1da1c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
   1da20:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
   1da22:	6002      	str	r2, [r0, #0]
}
   1da24:	4770      	bx	lr
   1da26:	bf00      	nop

0001da28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1da28:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1da2a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1da2c:	1c6b      	adds	r3, r5, #1
   1da2e:	d010      	beq.n	1da52 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   1da30:	f100 0308 	add.w	r3, r0, #8
   1da34:	461c      	mov	r4, r3
   1da36:	685b      	ldr	r3, [r3, #4]
   1da38:	681a      	ldr	r2, [r3, #0]
   1da3a:	42aa      	cmp	r2, r5
   1da3c:	d9fa      	bls.n	1da34 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
   1da3e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
   1da40:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
   1da42:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1da44:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1da46:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   1da48:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
   1da4a:	6108      	str	r0, [r1, #16]
}
   1da4c:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
   1da4e:	6002      	str	r2, [r0, #0]
}
   1da50:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   1da52:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
   1da54:	6863      	ldr	r3, [r4, #4]
   1da56:	e7f2      	b.n	1da3e <vListInsert+0x16>

0001da58 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   1da58:	6903      	ldr	r3, [r0, #16]
{
   1da5a:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1da5c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1da60:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1da62:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
   1da64:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1da66:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1da68:	bf08      	it	eq
   1da6a:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
   1da6c:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
   1da6e:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
   1da72:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
   1da74:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
   1da76:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
   1da78:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
   1da7a:	6818      	ldr	r0, [r3, #0]
}
   1da7c:	4770      	bx	lr
   1da7e:	bf00      	nop

0001da80 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1da80:	b358      	cbz	r0, 1dada <xQueueGenericCreate+0x5a>
	{
   1da82:	b570      	push	{r4, r5, r6, lr}
   1da84:	460e      	mov	r6, r1
   1da86:	4605      	mov	r5, r0

		if( uxItemSize == ( UBaseType_t ) 0 )
   1da88:	bb41      	cbnz	r1, 1dadc <xQueueGenericCreate+0x5c>
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1da8a:	2048      	movs	r0, #72	; 0x48
   1da8c:	f7ff fe48 	bl	1d720 <pvPortMalloc>

		if( pxNewQueue != NULL )
   1da90:	4604      	mov	r4, r0
   1da92:	b370      	cbz	r0, 1daf2 <xQueueGenericCreate+0x72>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1da94:	6024      	str	r4, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
   1da96:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
   1da9a:	f7f5 fd73 	bl	13584 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1da9e:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
   1daa2:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1daa4:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1daa6:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1daaa:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1daac:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1daae:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1dab0:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1dab2:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
   1dab4:	22ff      	movs	r2, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1dab6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1dab8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1daba:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1dabe:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
   1dac2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1dac6:	f7ff ff8f 	bl	1d9e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1daca:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1dace:	f7ff ff8b 	bl	1d9e8 <vListInitialise>
	taskEXIT_CRITICAL();
   1dad2:	f7f5 fd71 	bl	135b8 <vPortExitCritical>
	}
   1dad6:	4620      	mov	r0, r4
   1dad8:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1dada:	e7fe      	b.n	1dada <xQueueGenericCreate+0x5a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dadc:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1dae0:	3048      	adds	r0, #72	; 0x48
   1dae2:	f7ff fe1d 	bl	1d720 <pvPortMalloc>
		if( pxNewQueue != NULL )
   1dae6:	4604      	mov	r4, r0
   1dae8:	b118      	cbz	r0, 1daf2 <xQueueGenericCreate+0x72>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1daea:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1daee:	6003      	str	r3, [r0, #0]
   1daf0:	e7d1      	b.n	1da96 <xQueueGenericCreate+0x16>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1daf2:	2400      	movs	r4, #0
	}
   1daf4:	4620      	mov	r0, r4
   1daf6:	bd70      	pop	{r4, r5, r6, pc}

0001daf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1daf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dafc:	b085      	sub	sp, #20
   1dafe:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;

	configASSERT( pxQueue );
   1db00:	b158      	cbz	r0, 1db1a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1db02:	4688      	mov	r8, r1
   1db04:	461f      	mov	r7, r3
   1db06:	4604      	mov	r4, r0
   1db08:	2900      	cmp	r1, #0
   1db0a:	f000 808d 	beq.w	1dc28 <xQueueGenericSend+0x130>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1db0e:	2f02      	cmp	r7, #2
   1db10:	d104      	bne.n	1db1c <xQueueGenericSend+0x24>
   1db12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1db14:	2b01      	cmp	r3, #1
   1db16:	d001      	beq.n	1db1c <xQueueGenericSend+0x24>
   1db18:	e7fe      	b.n	1db18 <xQueueGenericSend+0x20>
	configASSERT( pxQueue );
   1db1a:	e7fe      	b.n	1db1a <xQueueGenericSend+0x22>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1db1c:	f001 fa36 	bl	1ef8c <xTaskGetSchedulerState>
   1db20:	4605      	mov	r5, r0
   1db22:	2800      	cmp	r0, #0
   1db24:	f040 8086 	bne.w	1dc34 <xQueueGenericSend+0x13c>
   1db28:	9b01      	ldr	r3, [sp, #4]
   1db2a:	2b00      	cmp	r3, #0
   1db2c:	f040 8081 	bne.w	1dc32 <xQueueGenericSend+0x13a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1db30:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
   1db34:	f7f5 fd26 	bl	13584 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1db38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1db3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1db3c:	429a      	cmp	r2, r3
   1db3e:	f0c0 80ec 	bcc.w	1dd1a <xQueueGenericSend+0x222>
   1db42:	2f02      	cmp	r7, #2
   1db44:	f000 80d1 	beq.w	1dcea <xQueueGenericSend+0x1f2>
				if( xTicksToWait == ( TickType_t ) 0 )
   1db48:	9801      	ldr	r0, [sp, #4]
   1db4a:	2800      	cmp	r0, #0
   1db4c:	f000 80f4 	beq.w	1dd38 <xQueueGenericSend+0x240>
				else if( xEntryTimeSet == pdFALSE )
   1db50:	2d00      	cmp	r5, #0
   1db52:	f000 80c6 	beq.w	1dce2 <xQueueGenericSend+0x1ea>
		taskEXIT_CRITICAL();
   1db56:	f7f5 fd2f 	bl	135b8 <vPortExitCritical>
		vTaskSuspendAll();
   1db5a:	f000 fea1 	bl	1e8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1db5e:	f7f5 fd11 	bl	13584 <vPortEnterCritical>
   1db62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1db66:	2bff      	cmp	r3, #255	; 0xff
   1db68:	bf04      	itt	eq
   1db6a:	2300      	moveq	r3, #0
   1db6c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
   1db70:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1db74:	2bff      	cmp	r3, #255	; 0xff
   1db76:	bf04      	itt	eq
   1db78:	2300      	moveq	r3, #0
   1db7a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
   1db7e:	f7f5 fd1b 	bl	135b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1db82:	a901      	add	r1, sp, #4
   1db84:	a802      	add	r0, sp, #8
   1db86:	f001 f9a7 	bl	1eed8 <xTaskCheckForTimeOut>
   1db8a:	2800      	cmp	r0, #0
   1db8c:	f040 80d9 	bne.w	1dd42 <xQueueGenericSend+0x24a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1db90:	f7f5 fcf8 	bl	13584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1db94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1db96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1db98:	429a      	cmp	r2, r3
   1db9a:	d04d      	beq.n	1dc38 <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   1db9c:	f7f5 fd0c 	bl	135b8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1dba0:	f7f5 fcf0 	bl	13584 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1dba4:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   1dba8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dbaa:	2d00      	cmp	r5, #0
   1dbac:	dc04      	bgt.n	1dbb8 <xQueueGenericSend+0xc0>
   1dbae:	e011      	b.n	1dbd4 <xQueueGenericSend+0xdc>
			--cTxLock;
   1dbb0:	1e6a      	subs	r2, r5, #1
   1dbb2:	b2d3      	uxtb	r3, r2
   1dbb4:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dbb6:	b16b      	cbz	r3, 1dbd4 <xQueueGenericSend+0xdc>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dbb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dbba:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dbbc:	b153      	cbz	r3, 1dbd4 <xQueueGenericSend+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dbbe:	f001 f8f7 	bl	1edb0 <xTaskRemoveFromEventList>
   1dbc2:	2800      	cmp	r0, #0
   1dbc4:	d0f4      	beq.n	1dbb0 <xQueueGenericSend+0xb8>
						vTaskMissedYield();
   1dbc6:	f001 f9bf 	bl	1ef48 <vTaskMissedYield>
			--cTxLock;
   1dbca:	1e6a      	subs	r2, r5, #1
   1dbcc:	b2d3      	uxtb	r3, r2
   1dbce:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dbd0:	2b00      	cmp	r3, #0
   1dbd2:	d1f1      	bne.n	1dbb8 <xQueueGenericSend+0xc0>
		pxQueue->cTxLock = queueUNLOCKED;
   1dbd4:	23ff      	movs	r3, #255	; 0xff
   1dbd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1dbda:	f7f5 fced 	bl	135b8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1dbde:	f7f5 fcd1 	bl	13584 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1dbe2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1dbe6:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dbe8:	2d00      	cmp	r5, #0
   1dbea:	dd14      	ble.n	1dc16 <xQueueGenericSend+0x11e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dbec:	f104 0910 	add.w	r9, r4, #16
   1dbf0:	e003      	b.n	1dbfa <xQueueGenericSend+0x102>
				--cRxLock;
   1dbf2:	1e6a      	subs	r2, r5, #1
   1dbf4:	b2d3      	uxtb	r3, r2
   1dbf6:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dbf8:	b16b      	cbz	r3, 1dc16 <xQueueGenericSend+0x11e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1dbfa:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dbfc:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1dbfe:	b153      	cbz	r3, 1dc16 <xQueueGenericSend+0x11e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dc00:	f001 f8d6 	bl	1edb0 <xTaskRemoveFromEventList>
   1dc04:	2800      	cmp	r0, #0
   1dc06:	d0f4      	beq.n	1dbf2 <xQueueGenericSend+0xfa>
					vTaskMissedYield();
   1dc08:	f001 f99e 	bl	1ef48 <vTaskMissedYield>
				--cRxLock;
   1dc0c:	1e6a      	subs	r2, r5, #1
   1dc0e:	b2d3      	uxtb	r3, r2
   1dc10:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dc12:	2b00      	cmp	r3, #0
   1dc14:	d1f1      	bne.n	1dbfa <xQueueGenericSend+0x102>
		pxQueue->cRxLock = queueUNLOCKED;
   1dc16:	23ff      	movs	r3, #255	; 0xff
   1dc18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1dc1c:	f7f5 fccc 	bl	135b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
   1dc20:	f000 ff86 	bl	1eb30 <xTaskResumeAll>
   1dc24:	2501      	movs	r5, #1
   1dc26:	e785      	b.n	1db34 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1dc28:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1dc2a:	2b00      	cmp	r3, #0
   1dc2c:	f43f af6f 	beq.w	1db0e <xQueueGenericSend+0x16>
   1dc30:	e7fe      	b.n	1dc30 <xQueueGenericSend+0x138>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1dc32:	e7fe      	b.n	1dc32 <xQueueGenericSend+0x13a>
   1dc34:	2500      	movs	r5, #0
   1dc36:	e77b      	b.n	1db30 <xQueueGenericSend+0x38>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1dc38:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
   1dc3c:	f7f5 fcbc 	bl	135b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1dc40:	9901      	ldr	r1, [sp, #4]
   1dc42:	4648      	mov	r0, r9
   1dc44:	f000 fff0 	bl	1ec28 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
   1dc48:	f7f5 fc9c 	bl	13584 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1dc4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1dc50:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dc52:	2d00      	cmp	r5, #0
   1dc54:	dc04      	bgt.n	1dc60 <xQueueGenericSend+0x168>
   1dc56:	e011      	b.n	1dc7c <xQueueGenericSend+0x184>
			--cTxLock;
   1dc58:	1e6b      	subs	r3, r5, #1
   1dc5a:	b2da      	uxtb	r2, r3
   1dc5c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dc5e:	b16a      	cbz	r2, 1dc7c <xQueueGenericSend+0x184>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dc60:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dc62:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dc64:	b153      	cbz	r3, 1dc7c <xQueueGenericSend+0x184>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dc66:	f001 f8a3 	bl	1edb0 <xTaskRemoveFromEventList>
   1dc6a:	2800      	cmp	r0, #0
   1dc6c:	d0f4      	beq.n	1dc58 <xQueueGenericSend+0x160>
						vTaskMissedYield();
   1dc6e:	f001 f96b 	bl	1ef48 <vTaskMissedYield>
			--cTxLock;
   1dc72:	1e6b      	subs	r3, r5, #1
   1dc74:	b2da      	uxtb	r2, r3
   1dc76:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dc78:	2a00      	cmp	r2, #0
   1dc7a:	d1f1      	bne.n	1dc60 <xQueueGenericSend+0x168>
		pxQueue->cTxLock = queueUNLOCKED;
   1dc7c:	23ff      	movs	r3, #255	; 0xff
   1dc7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1dc82:	f7f5 fc99 	bl	135b8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1dc86:	f7f5 fc7d 	bl	13584 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1dc8a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1dc8e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dc90:	2d00      	cmp	r5, #0
   1dc92:	dc04      	bgt.n	1dc9e <xQueueGenericSend+0x1a6>
   1dc94:	e011      	b.n	1dcba <xQueueGenericSend+0x1c2>
				--cRxLock;
   1dc96:	1e6b      	subs	r3, r5, #1
   1dc98:	b2da      	uxtb	r2, r3
   1dc9a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dc9c:	b16a      	cbz	r2, 1dcba <xQueueGenericSend+0x1c2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1dc9e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dca0:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1dca2:	b153      	cbz	r3, 1dcba <xQueueGenericSend+0x1c2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dca4:	f001 f884 	bl	1edb0 <xTaskRemoveFromEventList>
   1dca8:	2800      	cmp	r0, #0
   1dcaa:	d0f4      	beq.n	1dc96 <xQueueGenericSend+0x19e>
					vTaskMissedYield();
   1dcac:	f001 f94c 	bl	1ef48 <vTaskMissedYield>
				--cRxLock;
   1dcb0:	1e6b      	subs	r3, r5, #1
   1dcb2:	b2da      	uxtb	r2, r3
   1dcb4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dcb6:	2a00      	cmp	r2, #0
   1dcb8:	d1f1      	bne.n	1dc9e <xQueueGenericSend+0x1a6>
		pxQueue->cRxLock = queueUNLOCKED;
   1dcba:	23ff      	movs	r3, #255	; 0xff
   1dcbc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1dcc0:	f7f5 fc7a 	bl	135b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
   1dcc4:	f000 ff34 	bl	1eb30 <xTaskResumeAll>
   1dcc8:	2800      	cmp	r0, #0
   1dcca:	d1ab      	bne.n	1dc24 <xQueueGenericSend+0x12c>
					portYIELD_WITHIN_API();
   1dccc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1dcd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1dcd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1dcd8:	f3bf 8f4f 	dsb	sy
   1dcdc:	f3bf 8f6f 	isb	sy
   1dce0:	e7a0      	b.n	1dc24 <xQueueGenericSend+0x12c>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1dce2:	a802      	add	r0, sp, #8
   1dce4:	f001 f8ec 	bl	1eec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1dce8:	e735      	b.n	1db56 <xQueueGenericSend+0x5e>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1dcea:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1dcec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1dcee:	b1c2      	cbz	r2, 1dd22 <xQueueGenericSend+0x22a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1dcf0:	4641      	mov	r1, r8
   1dcf2:	68e0      	ldr	r0, [r4, #12]
   1dcf4:	f7ee fa04 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1dcf8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1dcfa:	68e3      	ldr	r3, [r4, #12]
   1dcfc:	4251      	negs	r1, r2
   1dcfe:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1dd00:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1dd02:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1dd04:	4293      	cmp	r3, r2
   1dd06:	d204      	bcs.n	1dd12 <xQueueGenericSend+0x21a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1dd08:	68a3      	ldr	r3, [r4, #8]
   1dd0a:	440b      	add	r3, r1
   1dd0c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   1dd0e:	2f02      	cmp	r7, #2
   1dd10:	d107      	bne.n	1dd22 <xQueueGenericSend+0x22a>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1dd12:	2d01      	cmp	r5, #1
   1dd14:	bf38      	it	cc
   1dd16:	2501      	movcc	r5, #1
   1dd18:	e004      	b.n	1dd24 <xQueueGenericSend+0x22c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1dd1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1dd1c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1dd1e:	2a00      	cmp	r2, #0
   1dd20:	d15e      	bne.n	1dde0 <xQueueGenericSend+0x2e8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1dd22:	3501      	adds	r5, #1
   1dd24:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dd26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dd28:	2b00      	cmp	r3, #0
   1dd2a:	d148      	bne.n	1ddbe <xQueueGenericSend+0x2c6>
				taskEXIT_CRITICAL();
   1dd2c:	f7f5 fc44 	bl	135b8 <vPortExitCritical>
				return pdPASS;
   1dd30:	2001      	movs	r0, #1
}
   1dd32:	b005      	add	sp, #20
   1dd34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1dd38:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
   1dd3a:	f7f5 fc3d 	bl	135b8 <vPortExitCritical>
					return errQUEUE_FULL;
   1dd3e:	9800      	ldr	r0, [sp, #0]
   1dd40:	e7f7      	b.n	1dd32 <xQueueGenericSend+0x23a>
	taskENTER_CRITICAL();
   1dd42:	f7f5 fc1f 	bl	13584 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1dd46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1dd4a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dd4c:	2d00      	cmp	r5, #0
   1dd4e:	dd10      	ble.n	1dd72 <xQueueGenericSend+0x27a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dd50:	f104 0624 	add.w	r6, r4, #36	; 0x24
   1dd54:	e003      	b.n	1dd5e <xQueueGenericSend+0x266>
			--cTxLock;
   1dd56:	1e6b      	subs	r3, r5, #1
   1dd58:	b2da      	uxtb	r2, r3
   1dd5a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dd5c:	b14a      	cbz	r2, 1dd72 <xQueueGenericSend+0x27a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dd5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dd60:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dd62:	b133      	cbz	r3, 1dd72 <xQueueGenericSend+0x27a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dd64:	f001 f824 	bl	1edb0 <xTaskRemoveFromEventList>
   1dd68:	2800      	cmp	r0, #0
   1dd6a:	d0f4      	beq.n	1dd56 <xQueueGenericSend+0x25e>
						vTaskMissedYield();
   1dd6c:	f001 f8ec 	bl	1ef48 <vTaskMissedYield>
   1dd70:	e7f1      	b.n	1dd56 <xQueueGenericSend+0x25e>
		pxQueue->cTxLock = queueUNLOCKED;
   1dd72:	23ff      	movs	r3, #255	; 0xff
   1dd74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1dd78:	f7f5 fc1e 	bl	135b8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1dd7c:	f7f5 fc02 	bl	13584 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1dd80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1dd84:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dd86:	2d00      	cmp	r5, #0
   1dd88:	dd10      	ble.n	1ddac <xQueueGenericSend+0x2b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dd8a:	f104 0610 	add.w	r6, r4, #16
   1dd8e:	e003      	b.n	1dd98 <xQueueGenericSend+0x2a0>
				--cRxLock;
   1dd90:	1e6b      	subs	r3, r5, #1
   1dd92:	b2da      	uxtb	r2, r3
   1dd94:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1dd96:	b14a      	cbz	r2, 1ddac <xQueueGenericSend+0x2b4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1dd98:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dd9a:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1dd9c:	b133      	cbz	r3, 1ddac <xQueueGenericSend+0x2b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1dd9e:	f001 f807 	bl	1edb0 <xTaskRemoveFromEventList>
   1dda2:	2800      	cmp	r0, #0
   1dda4:	d0f4      	beq.n	1dd90 <xQueueGenericSend+0x298>
					vTaskMissedYield();
   1dda6:	f001 f8cf 	bl	1ef48 <vTaskMissedYield>
   1ddaa:	e7f1      	b.n	1dd90 <xQueueGenericSend+0x298>
		pxQueue->cRxLock = queueUNLOCKED;
   1ddac:	23ff      	movs	r3, #255	; 0xff
   1ddae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1ddb2:	f7f5 fc01 	bl	135b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
   1ddb6:	f000 febb 	bl	1eb30 <xTaskResumeAll>
			return errQUEUE_FULL;
   1ddba:	2000      	movs	r0, #0
   1ddbc:	e7b9      	b.n	1dd32 <xQueueGenericSend+0x23a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ddbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1ddc2:	f000 fff5 	bl	1edb0 <xTaskRemoveFromEventList>
   1ddc6:	2800      	cmp	r0, #0
   1ddc8:	d0b0      	beq.n	1dd2c <xQueueGenericSend+0x234>
							queueYIELD_IF_USING_PREEMPTION();
   1ddca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1ddce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ddd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1ddd6:	f3bf 8f4f 	dsb	sy
   1ddda:	f3bf 8f6f 	isb	sy
   1ddde:	e7a5      	b.n	1dd2c <xQueueGenericSend+0x234>
	else if( xPosition == queueSEND_TO_BACK )
   1dde0:	b977      	cbnz	r7, 1de00 <xQueueGenericSend+0x308>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1dde2:	4641      	mov	r1, r8
   1dde4:	6860      	ldr	r0, [r4, #4]
   1dde6:	f7ee f98b 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1ddea:	6863      	ldr	r3, [r4, #4]
   1ddec:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ddee:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1ddf0:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ddf2:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1ddf4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ddf6:	d394      	bcc.n	1dd22 <xQueueGenericSend+0x22a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1ddf8:	6823      	ldr	r3, [r4, #0]
   1ddfa:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1ddfc:	3501      	adds	r5, #1
   1ddfe:	e791      	b.n	1dd24 <xQueueGenericSend+0x22c>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1de00:	4641      	mov	r1, r8
   1de02:	68e0      	ldr	r0, [r4, #12]
   1de04:	f7ee f97c 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1de08:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1de0a:	68e3      	ldr	r3, [r4, #12]
   1de0c:	4251      	negs	r1, r2
   1de0e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1de10:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1de12:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1de14:	4293      	cmp	r3, r2
   1de16:	f4bf af7a 	bcs.w	1dd0e <xQueueGenericSend+0x216>
   1de1a:	e775      	b.n	1dd08 <xQueueGenericSend+0x210>

0001de1c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
   1de1c:	b160      	cbz	r0, 1de38 <xQueueGenericSendFromISR+0x1c>
{
   1de1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de22:	460e      	mov	r6, r1
   1de24:	4617      	mov	r7, r2
   1de26:	461d      	mov	r5, r3
   1de28:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1de2a:	b1e9      	cbz	r1, 1de68 <xQueueGenericSendFromISR+0x4c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1de2c:	2d02      	cmp	r5, #2
   1de2e:	d104      	bne.n	1de3a <xQueueGenericSendFromISR+0x1e>
   1de30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1de32:	2b01      	cmp	r3, #1
   1de34:	d001      	beq.n	1de3a <xQueueGenericSendFromISR+0x1e>
   1de36:	e7fe      	b.n	1de36 <xQueueGenericSendFromISR+0x1a>
	configASSERT( pxQueue );
   1de38:	e7fe      	b.n	1de38 <xQueueGenericSendFromISR+0x1c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   1de3a:	f7f5 fc11 	bl	13660 <vPortValidateInterruptPriority>
	__asm volatile
   1de3e:	f3ef 8a11 	mrs	sl, BASEPRI
   1de42:	f04f 0380 	mov.w	r3, #128	; 0x80
   1de46:	f383 8811 	msr	BASEPRI, r3
   1de4a:	f3bf 8f6f 	isb	sy
   1de4e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1de52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1de54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1de56:	429a      	cmp	r2, r3
   1de58:	d339      	bcc.n	1dece <xQueueGenericSendFromISR+0xb2>
   1de5a:	2d02      	cmp	r5, #2
   1de5c:	d008      	beq.n	1de70 <xQueueGenericSendFromISR+0x54>
			xReturn = errQUEUE_FULL;
   1de5e:	2000      	movs	r0, #0
	__asm volatile
   1de60:	f38a 8811 	msr	BASEPRI, sl
}
   1de64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1de68:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1de6a:	2b00      	cmp	r3, #0
   1de6c:	d0de      	beq.n	1de2c <xQueueGenericSendFromISR+0x10>
   1de6e:	e7fe      	b.n	1de6e <xQueueGenericSendFromISR+0x52>
			const int8_t cTxLock = pxQueue->cTxLock;
   1de70:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1de74:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1de76:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
   1de7a:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1de7e:	b1b2      	cbz	r2, 1deae <xQueueGenericSendFromISR+0x92>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1de80:	4631      	mov	r1, r6
   1de82:	68e0      	ldr	r0, [r4, #12]
   1de84:	f7ee f93c 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1de88:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1de8a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1de8c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1de8e:	1ad2      	subs	r2, r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1de90:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1de92:	60e2      	str	r2, [r4, #12]
   1de94:	f1c3 0300 	rsb	r3, r3, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1de98:	d204      	bcs.n	1dea4 <xQueueGenericSendFromISR+0x88>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1de9a:	68a2      	ldr	r2, [r4, #8]
   1de9c:	4413      	add	r3, r2
   1de9e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
   1dea0:	2d02      	cmp	r5, #2
   1dea2:	d104      	bne.n	1deae <xQueueGenericSendFromISR+0x92>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1dea4:	464b      	mov	r3, r9
   1dea6:	2b01      	cmp	r3, #1
   1dea8:	bf38      	it	cc
   1deaa:	2301      	movcc	r3, #1
   1deac:	e001      	b.n	1deb2 <xQueueGenericSendFromISR+0x96>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1deae:	f109 0301 	add.w	r3, r9, #1
			if( cTxLock == queueUNLOCKED )
   1deb2:	f1b8 3fff 	cmp.w	r8, #4294967295
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1deb6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   1deb8:	d023      	beq.n	1df02 <xQueueGenericSendFromISR+0xe6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1deba:	f108 0301 	add.w	r3, r8, #1
   1debe:	b25b      	sxtb	r3, r3
   1dec0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
   1dec4:	2001      	movs	r0, #1
   1dec6:	f38a 8811 	msr	BASEPRI, sl
}
   1deca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
   1dece:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1ded2:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ded4:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
   1ded8:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1dedc:	2a00      	cmp	r2, #0
   1dede:	d0e6      	beq.n	1deae <xQueueGenericSendFromISR+0x92>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1dee0:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
   1dee2:	b9e5      	cbnz	r5, 1df1e <xQueueGenericSendFromISR+0x102>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1dee4:	6860      	ldr	r0, [r4, #4]
   1dee6:	f7ee f90b 	bl	c100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1deea:	6863      	ldr	r3, [r4, #4]
   1deec:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1deee:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1def0:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1def2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1def4:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1def6:	bf24      	itt	cs
   1def8:	6822      	ldrcs	r2, [r4, #0]
   1defa:	6062      	strcs	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1defc:	f109 0301 	add.w	r3, r9, #1
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1df00:	e7d7      	b.n	1deb2 <xQueueGenericSendFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1df02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1df04:	2b00      	cmp	r3, #0
   1df06:	d0dd      	beq.n	1dec4 <xQueueGenericSendFromISR+0xa8>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1df08:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1df0c:	f000 ff50 	bl	1edb0 <xTaskRemoveFromEventList>
   1df10:	2800      	cmp	r0, #0
   1df12:	d0d7      	beq.n	1dec4 <xQueueGenericSendFromISR+0xa8>
							if( pxHigherPriorityTaskWoken != NULL )
   1df14:	2f00      	cmp	r7, #0
   1df16:	d0d5      	beq.n	1dec4 <xQueueGenericSendFromISR+0xa8>
								*pxHigherPriorityTaskWoken = pdTRUE;
   1df18:	2001      	movs	r0, #1
   1df1a:	6038      	str	r0, [r7, #0]
   1df1c:	e7a0      	b.n	1de60 <xQueueGenericSendFromISR+0x44>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1df1e:	68e0      	ldr	r0, [r4, #12]
   1df20:	f7ee f8ee 	bl	c100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1df24:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1df26:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1df28:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1df2a:	1ad2      	subs	r2, r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1df2c:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1df2e:	60e2      	str	r2, [r4, #12]
   1df30:	f1c3 0300 	rsb	r3, r3, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1df34:	d2b4      	bcs.n	1dea0 <xQueueGenericSendFromISR+0x84>
   1df36:	e7b0      	b.n	1de9a <xQueueGenericSendFromISR+0x7e>

0001df38 <xQueueReceive>:
{
   1df38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1df3c:	b085      	sub	sp, #20
   1df3e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   1df40:	2800      	cmp	r0, #0
   1df42:	f000 8099 	beq.w	1e078 <xQueueReceive+0x140>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1df46:	460f      	mov	r7, r1
   1df48:	4604      	mov	r4, r0
   1df4a:	2900      	cmp	r1, #0
   1df4c:	f000 8095 	beq.w	1e07a <xQueueReceive+0x142>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1df50:	f001 f81c 	bl	1ef8c <xTaskGetSchedulerState>
   1df54:	2800      	cmp	r0, #0
   1df56:	f000 8095 	beq.w	1e084 <xQueueReceive+0x14c>
		taskENTER_CRITICAL();
   1df5a:	f7f5 fb13 	bl	13584 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1df5e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1df60:	2d00      	cmp	r5, #0
   1df62:	d172      	bne.n	1e04a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
   1df64:	9b01      	ldr	r3, [sp, #4]
   1df66:	2b00      	cmp	r3, #0
   1df68:	f000 80e2 	beq.w	1e130 <xQueueReceive+0x1f8>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1df6c:	a802      	add	r0, sp, #8
   1df6e:	f000 ffa7 	bl	1eec0 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
   1df72:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1df74:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
   1df78:	f7f5 fb1e 	bl	135b8 <vPortExitCritical>
		vTaskSuspendAll();
   1df7c:	f000 fc90 	bl	1e8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1df80:	f7f5 fb00 	bl	13584 <vPortEnterCritical>
   1df84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1df88:	2bff      	cmp	r3, #255	; 0xff
   1df8a:	bf08      	it	eq
   1df8c:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
   1df90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1df94:	2bff      	cmp	r3, #255	; 0xff
   1df96:	bf08      	it	eq
   1df98:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
   1df9c:	f7f5 fb0c 	bl	135b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1dfa0:	a901      	add	r1, sp, #4
   1dfa2:	a802      	add	r0, sp, #8
   1dfa4:	f000 ff98 	bl	1eed8 <xTaskCheckForTimeOut>
   1dfa8:	2800      	cmp	r0, #0
   1dfaa:	d170      	bne.n	1e08e <xQueueReceive+0x156>
	taskENTER_CRITICAL();
   1dfac:	f7f5 faea 	bl	13584 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1dfb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1dfb2:	2b00      	cmp	r3, #0
   1dfb4:	f000 80c2 	beq.w	1e13c <xQueueReceive+0x204>
	taskEXIT_CRITICAL();
   1dfb8:	f7f5 fafe 	bl	135b8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1dfbc:	f7f5 fae2 	bl	13584 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1dfc0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1dfc4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dfc6:	2d00      	cmp	r5, #0
   1dfc8:	dc04      	bgt.n	1dfd4 <xQueueReceive+0x9c>
   1dfca:	e011      	b.n	1dff0 <xQueueReceive+0xb8>
			--cTxLock;
   1dfcc:	1e6b      	subs	r3, r5, #1
   1dfce:	b2da      	uxtb	r2, r3
   1dfd0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dfd2:	b16a      	cbz	r2, 1dff0 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dfd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dfd6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dfd8:	b153      	cbz	r3, 1dff0 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dfda:	f000 fee9 	bl	1edb0 <xTaskRemoveFromEventList>
   1dfde:	2800      	cmp	r0, #0
   1dfe0:	d0f4      	beq.n	1dfcc <xQueueReceive+0x94>
						vTaskMissedYield();
   1dfe2:	f000 ffb1 	bl	1ef48 <vTaskMissedYield>
			--cTxLock;
   1dfe6:	1e6b      	subs	r3, r5, #1
   1dfe8:	b2da      	uxtb	r2, r3
   1dfea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1dfec:	2a00      	cmp	r2, #0
   1dfee:	d1f1      	bne.n	1dfd4 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
   1dff0:	23ff      	movs	r3, #255	; 0xff
   1dff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1dff6:	f7f5 fadf 	bl	135b8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1dffa:	f7f5 fac3 	bl	13584 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1dffe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1e002:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e004:	2d00      	cmp	r5, #0
   1e006:	dd14      	ble.n	1e032 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e008:	f104 0910 	add.w	r9, r4, #16
   1e00c:	e003      	b.n	1e016 <xQueueReceive+0xde>
				--cRxLock;
   1e00e:	1e6b      	subs	r3, r5, #1
   1e010:	b2da      	uxtb	r2, r3
   1e012:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e014:	b16a      	cbz	r2, 1e032 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e016:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e018:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e01a:	b153      	cbz	r3, 1e032 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e01c:	f000 fec8 	bl	1edb0 <xTaskRemoveFromEventList>
   1e020:	2800      	cmp	r0, #0
   1e022:	d0f4      	beq.n	1e00e <xQueueReceive+0xd6>
					vTaskMissedYield();
   1e024:	f000 ff90 	bl	1ef48 <vTaskMissedYield>
				--cRxLock;
   1e028:	1e6b      	subs	r3, r5, #1
   1e02a:	b2da      	uxtb	r2, r3
   1e02c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e02e:	2a00      	cmp	r2, #0
   1e030:	d1f1      	bne.n	1e016 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
   1e032:	23ff      	movs	r3, #255	; 0xff
   1e034:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1e038:	f7f5 fabe 	bl	135b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
   1e03c:	f000 fd78 	bl	1eb30 <xTaskResumeAll>
		taskENTER_CRITICAL();
   1e040:	f7f5 faa0 	bl	13584 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1e044:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1e046:	2d00      	cmp	r5, #0
   1e048:	d06e      	beq.n	1e128 <xQueueReceive+0x1f0>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1e04a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1e04c:	b152      	cbz	r2, 1e064 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1e04e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1e050:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1e052:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1e054:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1e056:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   1e058:	bf24      	itt	cs
   1e05a:	6821      	ldrcs	r1, [r4, #0]
   1e05c:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1e05e:	4638      	mov	r0, r7
   1e060:	f7ee f84e 	bl	c100 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1e064:	3d01      	subs	r5, #1
   1e066:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e068:	6923      	ldr	r3, [r4, #16]
   1e06a:	2b00      	cmp	r3, #0
   1e06c:	f040 80bb 	bne.w	1e1e6 <xQueueReceive+0x2ae>
				taskEXIT_CRITICAL();
   1e070:	f7f5 faa2 	bl	135b8 <vPortExitCritical>
				return pdPASS;
   1e074:	2001      	movs	r0, #1
   1e076:	e05e      	b.n	1e136 <xQueueReceive+0x1fe>
	configASSERT( ( pxQueue ) );
   1e078:	e7fe      	b.n	1e078 <xQueueReceive+0x140>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1e07a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1e07c:	2b00      	cmp	r3, #0
   1e07e:	f43f af67 	beq.w	1df50 <xQueueReceive+0x18>
   1e082:	e7fe      	b.n	1e082 <xQueueReceive+0x14a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1e084:	9b01      	ldr	r3, [sp, #4]
   1e086:	2b00      	cmp	r3, #0
   1e088:	f43f af67 	beq.w	1df5a <xQueueReceive+0x22>
   1e08c:	e7fe      	b.n	1e08c <xQueueReceive+0x154>
	taskENTER_CRITICAL();
   1e08e:	f7f5 fa79 	bl	13584 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1e092:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1e096:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e098:	2d00      	cmp	r5, #0
   1e09a:	dc04      	bgt.n	1e0a6 <xQueueReceive+0x16e>
   1e09c:	e011      	b.n	1e0c2 <xQueueReceive+0x18a>
			--cTxLock;
   1e09e:	1e6b      	subs	r3, r5, #1
   1e0a0:	b2da      	uxtb	r2, r3
   1e0a2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e0a4:	b16a      	cbz	r2, 1e0c2 <xQueueReceive+0x18a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e0a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e0a8:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e0aa:	b153      	cbz	r3, 1e0c2 <xQueueReceive+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e0ac:	f000 fe80 	bl	1edb0 <xTaskRemoveFromEventList>
   1e0b0:	2800      	cmp	r0, #0
   1e0b2:	d0f4      	beq.n	1e09e <xQueueReceive+0x166>
						vTaskMissedYield();
   1e0b4:	f000 ff48 	bl	1ef48 <vTaskMissedYield>
			--cTxLock;
   1e0b8:	1e6b      	subs	r3, r5, #1
   1e0ba:	b2da      	uxtb	r2, r3
   1e0bc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e0be:	2a00      	cmp	r2, #0
   1e0c0:	d1f1      	bne.n	1e0a6 <xQueueReceive+0x16e>
		pxQueue->cTxLock = queueUNLOCKED;
   1e0c2:	23ff      	movs	r3, #255	; 0xff
   1e0c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1e0c8:	f7f5 fa76 	bl	135b8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1e0cc:	f7f5 fa5a 	bl	13584 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1e0d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1e0d4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e0d6:	2d00      	cmp	r5, #0
   1e0d8:	dd14      	ble.n	1e104 <xQueueReceive+0x1cc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e0da:	f104 0910 	add.w	r9, r4, #16
   1e0de:	e003      	b.n	1e0e8 <xQueueReceive+0x1b0>
				--cRxLock;
   1e0e0:	1e6b      	subs	r3, r5, #1
   1e0e2:	b2da      	uxtb	r2, r3
   1e0e4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e0e6:	b16a      	cbz	r2, 1e104 <xQueueReceive+0x1cc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e0e8:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e0ea:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e0ec:	b153      	cbz	r3, 1e104 <xQueueReceive+0x1cc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e0ee:	f000 fe5f 	bl	1edb0 <xTaskRemoveFromEventList>
   1e0f2:	2800      	cmp	r0, #0
   1e0f4:	d0f4      	beq.n	1e0e0 <xQueueReceive+0x1a8>
					vTaskMissedYield();
   1e0f6:	f000 ff27 	bl	1ef48 <vTaskMissedYield>
				--cRxLock;
   1e0fa:	1e6b      	subs	r3, r5, #1
   1e0fc:	b2da      	uxtb	r2, r3
   1e0fe:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e100:	2a00      	cmp	r2, #0
   1e102:	d1f1      	bne.n	1e0e8 <xQueueReceive+0x1b0>
		pxQueue->cRxLock = queueUNLOCKED;
   1e104:	23ff      	movs	r3, #255	; 0xff
   1e106:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1e10a:	f7f5 fa55 	bl	135b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
   1e10e:	f000 fd0f 	bl	1eb30 <xTaskResumeAll>
	taskENTER_CRITICAL();
   1e112:	f7f5 fa37 	bl	13584 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1e116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e118:	b153      	cbz	r3, 1e130 <xQueueReceive+0x1f8>
	taskEXIT_CRITICAL();
   1e11a:	f7f5 fa4d 	bl	135b8 <vPortExitCritical>
		taskENTER_CRITICAL();
   1e11e:	f7f5 fa31 	bl	13584 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1e122:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1e124:	2d00      	cmp	r5, #0
   1e126:	d190      	bne.n	1e04a <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
   1e128:	9b01      	ldr	r3, [sp, #4]
   1e12a:	2b00      	cmp	r3, #0
   1e12c:	f47f af24 	bne.w	1df78 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
   1e130:	f7f5 fa42 	bl	135b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
   1e134:	2000      	movs	r0, #0
}
   1e136:	b005      	add	sp, #20
   1e138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
   1e13c:	f7f5 fa3c 	bl	135b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1e140:	9901      	ldr	r1, [sp, #4]
   1e142:	4630      	mov	r0, r6
   1e144:	f000 fd70 	bl	1ec28 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
   1e148:	f7f5 fa1c 	bl	13584 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1e14c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1e150:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e152:	2d00      	cmp	r5, #0
   1e154:	dc04      	bgt.n	1e160 <xQueueReceive+0x228>
   1e156:	e011      	b.n	1e17c <xQueueReceive+0x244>
			--cTxLock;
   1e158:	1e6b      	subs	r3, r5, #1
   1e15a:	b2da      	uxtb	r2, r3
   1e15c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e15e:	b16a      	cbz	r2, 1e17c <xQueueReceive+0x244>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e160:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e162:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e164:	b153      	cbz	r3, 1e17c <xQueueReceive+0x244>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e166:	f000 fe23 	bl	1edb0 <xTaskRemoveFromEventList>
   1e16a:	2800      	cmp	r0, #0
   1e16c:	d0f4      	beq.n	1e158 <xQueueReceive+0x220>
						vTaskMissedYield();
   1e16e:	f000 feeb 	bl	1ef48 <vTaskMissedYield>
			--cTxLock;
   1e172:	1e6b      	subs	r3, r5, #1
   1e174:	b2da      	uxtb	r2, r3
   1e176:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e178:	2a00      	cmp	r2, #0
   1e17a:	d1f1      	bne.n	1e160 <xQueueReceive+0x228>
		pxQueue->cTxLock = queueUNLOCKED;
   1e17c:	23ff      	movs	r3, #255	; 0xff
   1e17e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
   1e182:	f7f5 fa19 	bl	135b8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1e186:	f7f5 f9fd 	bl	13584 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1e18a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1e18e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e190:	2d00      	cmp	r5, #0
   1e192:	dd14      	ble.n	1e1be <xQueueReceive+0x286>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e194:	f104 0910 	add.w	r9, r4, #16
   1e198:	e003      	b.n	1e1a2 <xQueueReceive+0x26a>
				--cRxLock;
   1e19a:	1e6b      	subs	r3, r5, #1
   1e19c:	b2da      	uxtb	r2, r3
   1e19e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e1a0:	b16a      	cbz	r2, 1e1be <xQueueReceive+0x286>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e1a2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e1a4:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e1a6:	b153      	cbz	r3, 1e1be <xQueueReceive+0x286>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e1a8:	f000 fe02 	bl	1edb0 <xTaskRemoveFromEventList>
   1e1ac:	2800      	cmp	r0, #0
   1e1ae:	d0f4      	beq.n	1e19a <xQueueReceive+0x262>
					vTaskMissedYield();
   1e1b0:	f000 feca 	bl	1ef48 <vTaskMissedYield>
				--cRxLock;
   1e1b4:	1e6b      	subs	r3, r5, #1
   1e1b6:	b2da      	uxtb	r2, r3
   1e1b8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e1ba:	2a00      	cmp	r2, #0
   1e1bc:	d1f1      	bne.n	1e1a2 <xQueueReceive+0x26a>
		pxQueue->cRxLock = queueUNLOCKED;
   1e1be:	23ff      	movs	r3, #255	; 0xff
   1e1c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
   1e1c4:	f7f5 f9f8 	bl	135b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
   1e1c8:	f000 fcb2 	bl	1eb30 <xTaskResumeAll>
   1e1cc:	2800      	cmp	r0, #0
   1e1ce:	d1a6      	bne.n	1e11e <xQueueReceive+0x1e6>
					portYIELD_WITHIN_API();
   1e1d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1e1d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e1d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1e1dc:	f3bf 8f4f 	dsb	sy
   1e1e0:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
   1e1e4:	e79b      	b.n	1e11e <xQueueReceive+0x1e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e1e6:	f104 0010 	add.w	r0, r4, #16
   1e1ea:	f000 fde1 	bl	1edb0 <xTaskRemoveFromEventList>
   1e1ee:	2800      	cmp	r0, #0
   1e1f0:	f43f af3e 	beq.w	1e070 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
   1e1f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1e1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e1fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1e200:	f3bf 8f4f 	dsb	sy
   1e204:	f3bf 8f6f 	isb	sy
   1e208:	e732      	b.n	1e070 <xQueueReceive+0x138>
   1e20a:	bf00      	nop

0001e20c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1e20c:	b570      	push	{r4, r5, r6, lr}
   1e20e:	4605      	mov	r5, r0
   1e210:	460e      	mov	r6, r1
   1e212:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1e214:	f7f5 f9b6 	bl	13584 <vPortEnterCritical>
   1e218:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1e21c:	2bff      	cmp	r3, #255	; 0xff
   1e21e:	bf04      	itt	eq
   1e220:	2300      	moveq	r3, #0
   1e222:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
   1e226:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   1e22a:	2bff      	cmp	r3, #255	; 0xff
   1e22c:	bf04      	itt	eq
   1e22e:	2300      	moveq	r3, #0
   1e230:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
   1e234:	f7f5 f9c0 	bl	135b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1e238:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1e23a:	2b00      	cmp	r3, #0
   1e23c:	d043      	beq.n	1e2c6 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
   1e23e:	f7f5 f9a1 	bl	13584 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
   1e242:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   1e246:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e248:	2c00      	cmp	r4, #0
   1e24a:	dd14      	ble.n	1e276 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e24c:	f105 0624 	add.w	r6, r5, #36	; 0x24
   1e250:	e003      	b.n	1e25a <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
   1e252:	1e63      	subs	r3, r4, #1
   1e254:	b2da      	uxtb	r2, r3
   1e256:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e258:	b16a      	cbz	r2, 1e276 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e25a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e25c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e25e:	b153      	cbz	r3, 1e276 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e260:	f000 fda6 	bl	1edb0 <xTaskRemoveFromEventList>
   1e264:	2800      	cmp	r0, #0
   1e266:	d0f4      	beq.n	1e252 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
   1e268:	f000 fe6e 	bl	1ef48 <vTaskMissedYield>
			--cTxLock;
   1e26c:	1e63      	subs	r3, r4, #1
   1e26e:	b2da      	uxtb	r2, r3
   1e270:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e272:	2a00      	cmp	r2, #0
   1e274:	d1f1      	bne.n	1e25a <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
   1e276:	23ff      	movs	r3, #255	; 0xff
   1e278:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
   1e27c:	f7f5 f99c 	bl	135b8 <vPortExitCritical>
	taskENTER_CRITICAL();
   1e280:	f7f5 f980 	bl	13584 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
   1e284:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1e288:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e28a:	2c00      	cmp	r4, #0
   1e28c:	dd14      	ble.n	1e2b8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e28e:	f105 0610 	add.w	r6, r5, #16
   1e292:	e003      	b.n	1e29c <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
   1e294:	1e63      	subs	r3, r4, #1
   1e296:	b2da      	uxtb	r2, r3
   1e298:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e29a:	b16a      	cbz	r2, 1e2b8 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e29c:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e29e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e2a0:	b153      	cbz	r3, 1e2b8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e2a2:	f000 fd85 	bl	1edb0 <xTaskRemoveFromEventList>
   1e2a6:	2800      	cmp	r0, #0
   1e2a8:	d0f4      	beq.n	1e294 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
   1e2aa:	f000 fe4d 	bl	1ef48 <vTaskMissedYield>
				--cRxLock;
   1e2ae:	1e63      	subs	r3, r4, #1
   1e2b0:	b2da      	uxtb	r2, r3
   1e2b2:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e2b4:	2a00      	cmp	r2, #0
   1e2b6:	d1f1      	bne.n	1e29c <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
   1e2b8:	23ff      	movs	r3, #255	; 0xff
   1e2ba:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
   1e2be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
   1e2c2:	f7f5 b979 	b.w	135b8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1e2c6:	4622      	mov	r2, r4
   1e2c8:	4631      	mov	r1, r6
   1e2ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1e2ce:	f000 fd2d 	bl	1ed2c <vTaskPlaceOnEventListRestricted>
   1e2d2:	e7b4      	b.n	1e23e <vQueueWaitForMessageRestricted+0x32>

0001e2d4 <vTaskSwitchContext.part.0>:
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
   1e2d4:	4b2b      	ldr	r3, [pc, #172]	; (1e384 <vTaskSwitchContext.part.0+0xb0>)
void vTaskSwitchContext( void )
   1e2d6:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
   1e2d8:	2200      	movs	r2, #0
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
   1e2da:	4c2b      	ldr	r4, [pc, #172]	; (1e388 <vTaskSwitchContext.part.0+0xb4>)
		xYieldPending = pdFALSE;
   1e2dc:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1e2de:	6823      	ldr	r3, [r4, #0]
   1e2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e2e2:	681a      	ldr	r2, [r3, #0]
   1e2e4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   1e2e8:	d103      	bne.n	1e2f2 <vTaskSwitchContext.part.0+0x1e>
   1e2ea:	685a      	ldr	r2, [r3, #4]
   1e2ec:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   1e2f0:	d03f      	beq.n	1e372 <vTaskSwitchContext.part.0+0x9e>
   1e2f2:	6820      	ldr	r0, [r4, #0]
   1e2f4:	6821      	ldr	r1, [r4, #0]
   1e2f6:	3134      	adds	r1, #52	; 0x34
   1e2f8:	f7f1 fbe2 	bl	fac0 <vApplicationStackOverflowHook>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1e2fc:	4d23      	ldr	r5, [pc, #140]	; (1e38c <vTaskSwitchContext.part.0+0xb8>)
   1e2fe:	4a24      	ldr	r2, [pc, #144]	; (1e390 <vTaskSwitchContext.part.0+0xbc>)
   1e300:	682b      	ldr	r3, [r5, #0]
   1e302:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1e306:	0080      	lsls	r0, r0, #2
   1e308:	0099      	lsls	r1, r3, #2
   1e30a:	5810      	ldr	r0, [r2, r0]
   1e30c:	bb08      	cbnz	r0, 1e352 <vTaskSwitchContext.part.0+0x7e>
   1e30e:	b1f3      	cbz	r3, 1e34e <vTaskSwitchContext.part.0+0x7a>
   1e310:	1e58      	subs	r0, r3, #1
   1e312:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1e316:	0089      	lsls	r1, r1, #2
   1e318:	5856      	ldr	r6, [r2, r1]
   1e31a:	0081      	lsls	r1, r0, #2
   1e31c:	b9c6      	cbnz	r6, 1e350 <vTaskSwitchContext.part.0+0x7c>
   1e31e:	b1b0      	cbz	r0, 1e34e <vTaskSwitchContext.part.0+0x7a>
   1e320:	1e98      	subs	r0, r3, #2
   1e322:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1e326:	0089      	lsls	r1, r1, #2
   1e328:	5856      	ldr	r6, [r2, r1]
   1e32a:	0081      	lsls	r1, r0, #2
   1e32c:	b986      	cbnz	r6, 1e350 <vTaskSwitchContext.part.0+0x7c>
   1e32e:	b170      	cbz	r0, 1e34e <vTaskSwitchContext.part.0+0x7a>
   1e330:	1ed8      	subs	r0, r3, #3
   1e332:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   1e336:	0089      	lsls	r1, r1, #2
   1e338:	5856      	ldr	r6, [r2, r1]
   1e33a:	0081      	lsls	r1, r0, #2
   1e33c:	b946      	cbnz	r6, 1e350 <vTaskSwitchContext.part.0+0x7c>
   1e33e:	b130      	cbz	r0, 1e34e <vTaskSwitchContext.part.0+0x7a>
   1e340:	3b04      	subs	r3, #4
   1e342:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1e346:	0080      	lsls	r0, r0, #2
   1e348:	0099      	lsls	r1, r3, #2
   1e34a:	5810      	ldr	r0, [r2, r0]
   1e34c:	b908      	cbnz	r0, 1e352 <vTaskSwitchContext.part.0+0x7e>
   1e34e:	e7fe      	b.n	1e34e <vTaskSwitchContext.part.0+0x7a>
   1e350:	4603      	mov	r3, r0
   1e352:	4419      	add	r1, r3
   1e354:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   1e358:	4602      	mov	r2, r0
   1e35a:	6841      	ldr	r1, [r0, #4]
   1e35c:	6849      	ldr	r1, [r1, #4]
   1e35e:	6041      	str	r1, [r0, #4]
   1e360:	3208      	adds	r2, #8
   1e362:	4291      	cmp	r1, r2
   1e364:	bf04      	itt	eq
   1e366:	6849      	ldreq	r1, [r1, #4]
   1e368:	6041      	streq	r1, [r0, #4]
   1e36a:	68ca      	ldr	r2, [r1, #12]
   1e36c:	6022      	str	r2, [r4, #0]
   1e36e:	602b      	str	r3, [r5, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1e370:	bd70      	pop	{r4, r5, r6, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
   1e372:	689a      	ldr	r2, [r3, #8]
   1e374:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
   1e378:	d1bb      	bne.n	1e2f2 <vTaskSwitchContext.part.0+0x1e>
   1e37a:	68db      	ldr	r3, [r3, #12]
   1e37c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
   1e380:	d1b7      	bne.n	1e2f2 <vTaskSwitchContext.part.0+0x1e>
   1e382:	e7bb      	b.n	1e2fc <vTaskSwitchContext.part.0+0x28>
   1e384:	1000b24c 	.word	0x1000b24c
   1e388:	1000b178 	.word	0x1000b178
   1e38c:	1000b1e4 	.word	0x1000b1e4
   1e390:	1000b184 	.word	0x1000b184

0001e394 <xTaskCreate>:
	{
   1e394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1e398:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
   1e39c:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1e39e:	4640      	mov	r0, r8
	{
   1e3a0:	460c      	mov	r4, r1
   1e3a2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1e3a4:	f7ff f9bc 	bl	1d720 <pvPortMalloc>
			if( pxStack != NULL )
   1e3a8:	2800      	cmp	r0, #0
   1e3aa:	f000 80c3 	beq.w	1e534 <xTaskCreate+0x1a0>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   1e3ae:	4606      	mov	r6, r0
   1e3b0:	204c      	movs	r0, #76	; 0x4c
   1e3b2:	f7ff f9b5 	bl	1d720 <pvPortMalloc>
				if( pxNewTCB != NULL )
   1e3b6:	4605      	mov	r5, r0
   1e3b8:	2800      	cmp	r0, #0
   1e3ba:	f000 80c0 	beq.w	1e53e <xTaskCreate+0x1aa>
					pxNewTCB->pxStack = pxStack;
   1e3be:	6306      	str	r6, [r0, #48]	; 0x30
	configASSERT( pcName );
   1e3c0:	2c00      	cmp	r4, #0
   1e3c2:	f000 80bb 	beq.w	1e53c <xTaskCreate+0x1a8>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1e3c6:	4642      	mov	r2, r8
   1e3c8:	4630      	mov	r0, r6
   1e3ca:	21a5      	movs	r1, #165	; 0xa5
   1e3cc:	f002 fed2 	bl	21174 <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e3d0:	7823      	ldrb	r3, [r4, #0]
   1e3d2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1e3d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1e3d8:	f1a8 0204 	sub.w	r2, r8, #4
   1e3dc:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   1e3de:	f023 0a07 	bic.w	sl, r3, #7
		if( pcName[ x ] == ( char ) 0x00 )
   1e3e2:	7823      	ldrb	r3, [r4, #0]
   1e3e4:	2b00      	cmp	r3, #0
   1e3e6:	d04d      	beq.n	1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e3e8:	7863      	ldrb	r3, [r4, #1]
   1e3ea:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
		if( pcName[ x ] == ( char ) 0x00 )
   1e3ee:	7863      	ldrb	r3, [r4, #1]
   1e3f0:	2b00      	cmp	r3, #0
   1e3f2:	d047      	beq.n	1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e3f4:	78a3      	ldrb	r3, [r4, #2]
   1e3f6:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
		if( pcName[ x ] == ( char ) 0x00 )
   1e3fa:	78a3      	ldrb	r3, [r4, #2]
   1e3fc:	2b00      	cmp	r3, #0
   1e3fe:	d041      	beq.n	1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e400:	78e3      	ldrb	r3, [r4, #3]
   1e402:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
		if( pcName[ x ] == ( char ) 0x00 )
   1e406:	78e3      	ldrb	r3, [r4, #3]
   1e408:	2b00      	cmp	r3, #0
   1e40a:	d03b      	beq.n	1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e40c:	7923      	ldrb	r3, [r4, #4]
   1e40e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		if( pcName[ x ] == ( char ) 0x00 )
   1e412:	7923      	ldrb	r3, [r4, #4]
   1e414:	2b00      	cmp	r3, #0
   1e416:	d035      	beq.n	1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e418:	7963      	ldrb	r3, [r4, #5]
   1e41a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		if( pcName[ x ] == ( char ) 0x00 )
   1e41e:	7963      	ldrb	r3, [r4, #5]
   1e420:	2b00      	cmp	r3, #0
   1e422:	d02f      	beq.n	1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e424:	79a3      	ldrb	r3, [r4, #6]
   1e426:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
		if( pcName[ x ] == ( char ) 0x00 )
   1e42a:	79a3      	ldrb	r3, [r4, #6]
   1e42c:	b353      	cbz	r3, 1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e42e:	79e3      	ldrb	r3, [r4, #7]
   1e430:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		if( pcName[ x ] == ( char ) 0x00 )
   1e434:	79e3      	ldrb	r3, [r4, #7]
   1e436:	b32b      	cbz	r3, 1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e438:	7a23      	ldrb	r3, [r4, #8]
   1e43a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		if( pcName[ x ] == ( char ) 0x00 )
   1e43e:	7a23      	ldrb	r3, [r4, #8]
   1e440:	b303      	cbz	r3, 1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e442:	7a63      	ldrb	r3, [r4, #9]
   1e444:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
		if( pcName[ x ] == ( char ) 0x00 )
   1e448:	7a63      	ldrb	r3, [r4, #9]
   1e44a:	b1db      	cbz	r3, 1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e44c:	7aa3      	ldrb	r3, [r4, #10]
   1e44e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
		if( pcName[ x ] == ( char ) 0x00 )
   1e452:	7aa3      	ldrb	r3, [r4, #10]
   1e454:	b1b3      	cbz	r3, 1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e456:	7ae3      	ldrb	r3, [r4, #11]
   1e458:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
		if( pcName[ x ] == ( char ) 0x00 )
   1e45c:	7ae3      	ldrb	r3, [r4, #11]
   1e45e:	b18b      	cbz	r3, 1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e460:	7b23      	ldrb	r3, [r4, #12]
   1e462:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		if( pcName[ x ] == ( char ) 0x00 )
   1e466:	7b23      	ldrb	r3, [r4, #12]
   1e468:	b163      	cbz	r3, 1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e46a:	7b63      	ldrb	r3, [r4, #13]
   1e46c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
		if( pcName[ x ] == ( char ) 0x00 )
   1e470:	7b63      	ldrb	r3, [r4, #13]
   1e472:	b13b      	cbz	r3, 1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e474:	7ba3      	ldrb	r3, [r4, #14]
   1e476:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
		if( pcName[ x ] == ( char ) 0x00 )
   1e47a:	7ba3      	ldrb	r3, [r4, #14]
   1e47c:	b113      	cbz	r3, 1e484 <xTaskCreate+0xf0>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e47e:	7be3      	ldrb	r3, [r4, #15]
   1e480:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1e484:	9c08      	ldr	r4, [sp, #32]
   1e486:	2c03      	cmp	r4, #3
   1e488:	bf28      	it	cs
   1e48a:	2403      	movcs	r4, #3
   1e48c:	f04f 0800 	mov.w	r8, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e490:	1d2e      	adds	r6, r5, #4
	pxNewTCB->uxPriority = uxPriority;
   1e492:	62ec      	str	r4, [r5, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e494:	4630      	mov	r0, r6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1e496:	f885 8043 	strb.w	r8, [r5, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e49a:	f7ff fab1 	bl	1da00 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e49e:	f1c4 0404 	rsb	r4, r4, #4
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1e4a2:	f105 0018 	add.w	r0, r5, #24
   1e4a6:	f7ff faab 	bl	1da00 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
   1e4aa:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e4ae:	61ac      	str	r4, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e4b0:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1e4b4:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1e4b6:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e4b8:	464a      	mov	r2, r9
   1e4ba:	4639      	mov	r1, r7
   1e4bc:	4650      	mov	r0, sl
   1e4be:	f7f5 f83b 	bl	13538 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
   1e4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e4c4:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
   1e4c6:	b103      	cbz	r3, 1e4ca <xTaskCreate+0x136>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1e4c8:	601d      	str	r5, [r3, #0]
	taskENTER_CRITICAL();
   1e4ca:	f7f5 f85b 	bl	13584 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
   1e4ce:	4a3a      	ldr	r2, [pc, #232]	; (1e5b8 <xTaskCreate+0x224>)
		if( pxCurrentTCB == NULL )
   1e4d0:	4c3a      	ldr	r4, [pc, #232]	; (1e5bc <xTaskCreate+0x228>)
		uxCurrentNumberOfTasks++;
   1e4d2:	6813      	ldr	r3, [r2, #0]
   1e4d4:	3301      	adds	r3, #1
   1e4d6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   1e4d8:	6823      	ldr	r3, [r4, #0]
   1e4da:	2b00      	cmp	r3, #0
   1e4dc:	d03f      	beq.n	1e55e <xTaskCreate+0x1ca>
			if( xSchedulerRunning == pdFALSE )
   1e4de:	4f38      	ldr	r7, [pc, #224]	; (1e5c0 <xTaskCreate+0x22c>)
   1e4e0:	683b      	ldr	r3, [r7, #0]
   1e4e2:	2b00      	cmp	r3, #0
   1e4e4:	d034      	beq.n	1e550 <xTaskCreate+0x1bc>
		prvAddTaskToReadyList( pxNewTCB );
   1e4e6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
		uxTaskNumber++;
   1e4e8:	4a36      	ldr	r2, [pc, #216]	; (1e5c4 <xTaskCreate+0x230>)
		prvAddTaskToReadyList( pxNewTCB );
   1e4ea:	4937      	ldr	r1, [pc, #220]	; (1e5c8 <xTaskCreate+0x234>)
		uxTaskNumber++;
   1e4ec:	6813      	ldr	r3, [r2, #0]
   1e4ee:	3301      	adds	r3, #1
   1e4f0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
   1e4f2:	680b      	ldr	r3, [r1, #0]
   1e4f4:	4283      	cmp	r3, r0
   1e4f6:	4b35      	ldr	r3, [pc, #212]	; (1e5cc <xTaskCreate+0x238>)
   1e4f8:	bf38      	it	cc
   1e4fa:	6008      	strcc	r0, [r1, #0]
   1e4fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1e500:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1e504:	4631      	mov	r1, r6
   1e506:	f7ff fa7f 	bl	1da08 <vListInsertEnd>
	taskEXIT_CRITICAL();
   1e50a:	f7f5 f855 	bl	135b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
   1e50e:	683b      	ldr	r3, [r7, #0]
   1e510:	b1db      	cbz	r3, 1e54a <xTaskCreate+0x1b6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1e512:	6822      	ldr	r2, [r4, #0]
   1e514:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e516:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1e518:	429a      	cmp	r2, r3
   1e51a:	d216      	bcs.n	1e54a <xTaskCreate+0x1b6>
			taskYIELD_IF_USING_PREEMPTION();
   1e51c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1e520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e524:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1e528:	f3bf 8f4f 	dsb	sy
   1e52c:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
   1e530:	2001      	movs	r0, #1
   1e532:	e001      	b.n	1e538 <xTaskCreate+0x1a4>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1e534:	f04f 30ff 	mov.w	r0, #4294967295
	}
   1e538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	configASSERT( pcName );
   1e53c:	e7fe      	b.n	1e53c <xTaskCreate+0x1a8>
					vPortFree( pxStack );
   1e53e:	4630      	mov	r0, r6
   1e540:	f7ff f94c 	bl	1d7dc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1e544:	f04f 30ff 	mov.w	r0, #4294967295
   1e548:	e7f6      	b.n	1e538 <xTaskCreate+0x1a4>
			xReturn = pdPASS;
   1e54a:	2001      	movs	r0, #1
	}
   1e54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1e550:	6823      	ldr	r3, [r4, #0]
   1e552:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1e554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e556:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
   1e558:	bf98      	it	ls
   1e55a:	6025      	strls	r5, [r4, #0]
   1e55c:	e7c4      	b.n	1e4e8 <xTaskCreate+0x154>
			pxCurrentTCB = pxNewTCB;
   1e55e:	6025      	str	r5, [r4, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1e560:	6813      	ldr	r3, [r2, #0]
   1e562:	2b01      	cmp	r3, #1
   1e564:	d002      	beq.n	1e56c <xTaskCreate+0x1d8>
		prvAddTaskToReadyList( pxNewTCB );
   1e566:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1e568:	4f15      	ldr	r7, [pc, #84]	; (1e5c0 <xTaskCreate+0x22c>)
   1e56a:	e7bd      	b.n	1e4e8 <xTaskCreate+0x154>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1e56c:	4817      	ldr	r0, [pc, #92]	; (1e5cc <xTaskCreate+0x238>)
	}

	vListInitialise( &xDelayedTaskList1 );
   1e56e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1e5ec <xTaskCreate+0x258>
	vListInitialise( &xDelayedTaskList2 );
   1e572:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1e5f0 <xTaskCreate+0x25c>
   1e576:	4f12      	ldr	r7, [pc, #72]	; (1e5c0 <xTaskCreate+0x22c>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1e578:	f7ff fa36 	bl	1d9e8 <vListInitialise>
   1e57c:	4814      	ldr	r0, [pc, #80]	; (1e5d0 <xTaskCreate+0x23c>)
   1e57e:	f7ff fa33 	bl	1d9e8 <vListInitialise>
   1e582:	4814      	ldr	r0, [pc, #80]	; (1e5d4 <xTaskCreate+0x240>)
   1e584:	f7ff fa30 	bl	1d9e8 <vListInitialise>
   1e588:	4813      	ldr	r0, [pc, #76]	; (1e5d8 <xTaskCreate+0x244>)
   1e58a:	f7ff fa2d 	bl	1d9e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
   1e58e:	4648      	mov	r0, r9
   1e590:	f7ff fa2a 	bl	1d9e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   1e594:	4640      	mov	r0, r8
   1e596:	f7ff fa27 	bl	1d9e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   1e59a:	4810      	ldr	r0, [pc, #64]	; (1e5dc <xTaskCreate+0x248>)
   1e59c:	f7ff fa24 	bl	1d9e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1e5a0:	480f      	ldr	r0, [pc, #60]	; (1e5e0 <xTaskCreate+0x24c>)
   1e5a2:	f7ff fa21 	bl	1d9e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1e5a6:	4b0f      	ldr	r3, [pc, #60]	; (1e5e4 <xTaskCreate+0x250>)
		prvAddTaskToReadyList( pxNewTCB );
   1e5a8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
   1e5aa:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1e5ae:	4b0e      	ldr	r3, [pc, #56]	; (1e5e8 <xTaskCreate+0x254>)
   1e5b0:	f8c3 8000 	str.w	r8, [r3]
}
   1e5b4:	e798      	b.n	1e4e8 <xTaskCreate+0x154>
   1e5b6:	bf00      	nop
   1e5b8:	1000b1d4 	.word	0x1000b1d4
   1e5bc:	1000b178 	.word	0x1000b178
   1e5c0:	1000b230 	.word	0x1000b230
   1e5c4:	1000b1e0 	.word	0x1000b1e0
   1e5c8:	1000b1e4 	.word	0x1000b1e4
   1e5cc:	1000b184 	.word	0x1000b184
   1e5d0:	1000b198 	.word	0x1000b198
   1e5d4:	1000b1ac 	.word	0x1000b1ac
   1e5d8:	1000b1c0 	.word	0x1000b1c0
   1e5dc:	1000b21c 	.word	0x1000b21c
   1e5e0:	1000b234 	.word	0x1000b234
   1e5e4:	1000b17c 	.word	0x1000b17c
   1e5e8:	1000b180 	.word	0x1000b180
   1e5ec:	1000b1e8 	.word	0x1000b1e8
   1e5f0:	1000b1fc 	.word	0x1000b1fc

0001e5f4 <vTaskSuspend>:
	{
   1e5f4:	b570      	push	{r4, r5, r6, lr}
   1e5f6:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1e5f8:	4e2e      	ldr	r6, [pc, #184]	; (1e6b4 <vTaskSuspend+0xc0>)
		taskENTER_CRITICAL();
   1e5fa:	f7f4 ffc3 	bl	13584 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1e5fe:	2c00      	cmp	r4, #0
   1e600:	d03d      	beq.n	1e67e <vTaskSuspend+0x8a>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e602:	1d25      	adds	r5, r4, #4
   1e604:	4628      	mov	r0, r5
   1e606:	f7ff fa27 	bl	1da58 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1e60a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e60c:	b11b      	cbz	r3, 1e616 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e60e:	f104 0018 	add.w	r0, r4, #24
   1e612:	f7ff fa21 	bl	1da58 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1e616:	4629      	mov	r1, r5
   1e618:	4827      	ldr	r0, [pc, #156]	; (1e6b8 <vTaskSuspend+0xc4>)
		if( xSchedulerRunning != pdFALSE )
   1e61a:	4d28      	ldr	r5, [pc, #160]	; (1e6bc <vTaskSuspend+0xc8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1e61c:	f7ff f9f4 	bl	1da08 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1e620:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   1e624:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e626:	bf04      	itt	eq
   1e628:	2300      	moveq	r3, #0
   1e62a:	f884 3048 	strbeq.w	r3, [r4, #72]	; 0x48
		taskEXIT_CRITICAL();
   1e62e:	f7f4 ffc3 	bl	135b8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
   1e632:	682b      	ldr	r3, [r5, #0]
   1e634:	b9a3      	cbnz	r3, 1e660 <vTaskSuspend+0x6c>
		if( pxTCB == pxCurrentTCB )
   1e636:	6833      	ldr	r3, [r6, #0]
   1e638:	42a3      	cmp	r3, r4
   1e63a:	d000      	beq.n	1e63e <vTaskSuspend+0x4a>
	}
   1e63c:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
   1e63e:	682b      	ldr	r3, [r5, #0]
   1e640:	b323      	cbz	r3, 1e68c <vTaskSuspend+0x98>
				configASSERT( uxSchedulerSuspended == 0 );
   1e642:	4b1f      	ldr	r3, [pc, #124]	; (1e6c0 <vTaskSuspend+0xcc>)
   1e644:	681b      	ldr	r3, [r3, #0]
   1e646:	2b00      	cmp	r3, #0
   1e648:	d12d      	bne.n	1e6a6 <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
   1e64a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1e64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e652:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1e656:	f3bf 8f4f 	dsb	sy
   1e65a:	f3bf 8f6f 	isb	sy
	}
   1e65e:	bd70      	pop	{r4, r5, r6, pc}
			taskENTER_CRITICAL();
   1e660:	f7f4 ff90 	bl	13584 <vPortEnterCritical>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1e664:	4b17      	ldr	r3, [pc, #92]	; (1e6c4 <vTaskSuspend+0xd0>)
   1e666:	681a      	ldr	r2, [r3, #0]
   1e668:	6812      	ldr	r2, [r2, #0]
   1e66a:	b152      	cbz	r2, 1e682 <vTaskSuspend+0x8e>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1e66c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1e66e:	4b16      	ldr	r3, [pc, #88]	; (1e6c8 <vTaskSuspend+0xd4>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1e670:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1e672:	68d2      	ldr	r2, [r2, #12]
   1e674:	6852      	ldr	r2, [r2, #4]
   1e676:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
   1e678:	f7f4 ff9e 	bl	135b8 <vPortExitCritical>
   1e67c:	e7db      	b.n	1e636 <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1e67e:	6834      	ldr	r4, [r6, #0]
   1e680:	e7bf      	b.n	1e602 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
   1e682:	4b11      	ldr	r3, [pc, #68]	; (1e6c8 <vTaskSuspend+0xd4>)
   1e684:	f04f 32ff 	mov.w	r2, #4294967295
   1e688:	601a      	str	r2, [r3, #0]
   1e68a:	e7f5      	b.n	1e678 <vTaskSuspend+0x84>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   1e68c:	490a      	ldr	r1, [pc, #40]	; (1e6b8 <vTaskSuspend+0xc4>)
   1e68e:	4a0f      	ldr	r2, [pc, #60]	; (1e6cc <vTaskSuspend+0xd8>)
   1e690:	6809      	ldr	r1, [r1, #0]
   1e692:	6812      	ldr	r2, [r2, #0]
   1e694:	4291      	cmp	r1, r2
   1e696:	d007      	beq.n	1e6a8 <vTaskSuspend+0xb4>
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1e698:	4b09      	ldr	r3, [pc, #36]	; (1e6c0 <vTaskSuspend+0xcc>)
   1e69a:	681b      	ldr	r3, [r3, #0]
   1e69c:	b133      	cbz	r3, 1e6ac <vTaskSuspend+0xb8>
		xYieldPending = pdTRUE;
   1e69e:	4b0c      	ldr	r3, [pc, #48]	; (1e6d0 <vTaskSuspend+0xdc>)
   1e6a0:	2201      	movs	r2, #1
   1e6a2:	601a      	str	r2, [r3, #0]
	}
   1e6a4:	bd70      	pop	{r4, r5, r6, pc}
				configASSERT( uxSchedulerSuspended == 0 );
   1e6a6:	e7fe      	b.n	1e6a6 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
   1e6a8:	6033      	str	r3, [r6, #0]
	}
   1e6aa:	bd70      	pop	{r4, r5, r6, pc}
   1e6ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e6b0:	f7ff be10 	b.w	1e2d4 <vTaskSwitchContext.part.0>
   1e6b4:	1000b178 	.word	0x1000b178
   1e6b8:	1000b234 	.word	0x1000b234
   1e6bc:	1000b230 	.word	0x1000b230
   1e6c0:	1000b1dc 	.word	0x1000b1dc
   1e6c4:	1000b17c 	.word	0x1000b17c
   1e6c8:	1000b214 	.word	0x1000b214
   1e6cc:	1000b1d4 	.word	0x1000b1d4
   1e6d0:	1000b24c 	.word	0x1000b24c

0001e6d4 <vTaskStartScheduler>:
{
   1e6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1e6d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e6dc:	f7ff f820 	bl	1d720 <pvPortMalloc>
			if( pxStack != NULL )
   1e6e0:	2800      	cmp	r0, #0
   1e6e2:	d06d      	beq.n	1e7c0 <vTaskStartScheduler+0xec>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   1e6e4:	4605      	mov	r5, r0
   1e6e6:	204c      	movs	r0, #76	; 0x4c
   1e6e8:	f7ff f81a 	bl	1d720 <pvPortMalloc>
				if( pxNewTCB != NULL )
   1e6ec:	4604      	mov	r4, r0
   1e6ee:	2800      	cmp	r0, #0
   1e6f0:	d063      	beq.n	1e7ba <vTaskStartScheduler+0xe6>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1e6f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e6f6:	21a5      	movs	r1, #165	; 0xa5
					pxNewTCB->pxStack = pxStack;
   1e6f8:	6305      	str	r5, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1e6fa:	4628      	mov	r0, r5
   1e6fc:	f002 fd3a 	bl	21174 <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e700:	2500      	movs	r5, #0
   1e702:	4b53      	ldr	r3, [pc, #332]	; (1e850 <vTaskStartScheduler+0x17c>)
   1e704:	6363      	str	r3, [r4, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e706:	1d27      	adds	r7, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1e708:	6b26      	ldr	r6, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1e70a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e70e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1e710:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
   1e714:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1e716:	f7ff f973 	bl	1da00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1e71a:	f104 0018 	add.w	r0, r4, #24
   1e71e:	f7ff f96f 	bl	1da00 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e722:	2304      	movs	r3, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1e724:	f506 707f 	add.w	r0, r6, #1020	; 0x3fc
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e728:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
   1e72a:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e72c:	4949      	ldr	r1, [pc, #292]	; (1e854 <vTaskStartScheduler+0x180>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e72e:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1e730:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1e734:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1e736:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e738:	f020 0007 	bic.w	r0, r0, #7
   1e73c:	f7f4 fefc 	bl	13538 <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1e740:	4b45      	ldr	r3, [pc, #276]	; (1e858 <vTaskStartScheduler+0x184>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1e742:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1e744:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   1e746:	f7f4 ff1d 	bl	13584 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
   1e74a:	4a44      	ldr	r2, [pc, #272]	; (1e85c <vTaskStartScheduler+0x188>)
		if( pxCurrentTCB == NULL )
   1e74c:	4d44      	ldr	r5, [pc, #272]	; (1e860 <vTaskStartScheduler+0x18c>)
		uxCurrentNumberOfTasks++;
   1e74e:	6813      	ldr	r3, [r2, #0]
   1e750:	3301      	adds	r3, #1
   1e752:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   1e754:	682b      	ldr	r3, [r5, #0]
   1e756:	2b00      	cmp	r3, #0
   1e758:	d04e      	beq.n	1e7f8 <vTaskStartScheduler+0x124>
			if( xSchedulerRunning == pdFALSE )
   1e75a:	4e42      	ldr	r6, [pc, #264]	; (1e864 <vTaskStartScheduler+0x190>)
   1e75c:	6833      	ldr	r3, [r6, #0]
   1e75e:	b383      	cbz	r3, 1e7c2 <vTaskStartScheduler+0xee>
		prvAddTaskToReadyList( pxNewTCB );
   1e760:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
		uxTaskNumber++;
   1e762:	4a41      	ldr	r2, [pc, #260]	; (1e868 <vTaskStartScheduler+0x194>)
		prvAddTaskToReadyList( pxNewTCB );
   1e764:	4941      	ldr	r1, [pc, #260]	; (1e86c <vTaskStartScheduler+0x198>)
		uxTaskNumber++;
   1e766:	6813      	ldr	r3, [r2, #0]
   1e768:	3301      	adds	r3, #1
   1e76a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
   1e76c:	680b      	ldr	r3, [r1, #0]
   1e76e:	4298      	cmp	r0, r3
   1e770:	d900      	bls.n	1e774 <vTaskStartScheduler+0xa0>
   1e772:	6008      	str	r0, [r1, #0]
   1e774:	4b3e      	ldr	r3, [pc, #248]	; (1e870 <vTaskStartScheduler+0x19c>)
   1e776:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1e77a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1e77e:	4639      	mov	r1, r7
   1e780:	f7ff f942 	bl	1da08 <vListInsertEnd>
	taskEXIT_CRITICAL();
   1e784:	f7f4 ff18 	bl	135b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
   1e788:	6833      	ldr	r3, [r6, #0]
   1e78a:	b173      	cbz	r3, 1e7aa <vTaskStartScheduler+0xd6>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1e78c:	682a      	ldr	r2, [r5, #0]
   1e78e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e790:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1e792:	429a      	cmp	r2, r3
   1e794:	d209      	bcs.n	1e7aa <vTaskStartScheduler+0xd6>
			taskYIELD_IF_USING_PREEMPTION();
   1e796:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1e79a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e79e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1e7a2:	f3bf 8f4f 	dsb	sy
   1e7a6:	f3bf 8f6f 	isb	sy
			xReturn = xTimerCreateTimerTask();
   1e7aa:	f000 fd63 	bl	1f274 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
   1e7ae:	2801      	cmp	r0, #1
   1e7b0:	d00e      	beq.n	1e7d0 <vTaskStartScheduler+0xfc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1e7b2:	3001      	adds	r0, #1
   1e7b4:	d004      	beq.n	1e7c0 <vTaskStartScheduler+0xec>
}
   1e7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
   1e7ba:	4628      	mov	r0, r5
   1e7bc:	f7ff f80e 	bl	1d7dc <vPortFree>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1e7c0:	e7fe      	b.n	1e7c0 <vTaskStartScheduler+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1e7c2:	682b      	ldr	r3, [r5, #0]
   1e7c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1e7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e7c8:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
   1e7ca:	bf98      	it	ls
   1e7cc:	602c      	strls	r4, [r5, #0]
   1e7ce:	e7c8      	b.n	1e762 <vTaskStartScheduler+0x8e>
	__asm volatile
   1e7d0:	f04f 0380 	mov.w	r3, #128	; 0x80
   1e7d4:	f383 8811 	msr	BASEPRI, r3
   1e7d8:	f3bf 8f6f 	isb	sy
   1e7dc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
   1e7e0:	4a24      	ldr	r2, [pc, #144]	; (1e874 <vTaskStartScheduler+0x1a0>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1e7e2:	4b25      	ldr	r3, [pc, #148]	; (1e878 <vTaskStartScheduler+0x1a4>)
		xNextTaskUnblockTime = portMAX_DELAY;
   1e7e4:	f04f 31ff 	mov.w	r1, #4294967295
   1e7e8:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1e7ea:	2200      	movs	r2, #0
		xSchedulerRunning = pdTRUE;
   1e7ec:	6030      	str	r0, [r6, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1e7ee:	601a      	str	r2, [r3, #0]
}
   1e7f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
   1e7f4:	f7f5 b856 	b.w	138a4 <xPortStartScheduler>
			pxCurrentTCB = pxNewTCB;
   1e7f8:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1e7fa:	6813      	ldr	r3, [r2, #0]
   1e7fc:	2b01      	cmp	r3, #1
   1e7fe:	d002      	beq.n	1e806 <vTaskStartScheduler+0x132>
		prvAddTaskToReadyList( pxNewTCB );
   1e800:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1e802:	4e18      	ldr	r6, [pc, #96]	; (1e864 <vTaskStartScheduler+0x190>)
   1e804:	e7ad      	b.n	1e762 <vTaskStartScheduler+0x8e>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1e806:	481a      	ldr	r0, [pc, #104]	; (1e870 <vTaskStartScheduler+0x19c>)
	vListInitialise( &xDelayedTaskList1 );
   1e808:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1e898 <vTaskStartScheduler+0x1c4>
	vListInitialise( &xDelayedTaskList2 );
   1e80c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1e89c <vTaskStartScheduler+0x1c8>
   1e810:	4e14      	ldr	r6, [pc, #80]	; (1e864 <vTaskStartScheduler+0x190>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1e812:	f7ff f8e9 	bl	1d9e8 <vListInitialise>
   1e816:	4819      	ldr	r0, [pc, #100]	; (1e87c <vTaskStartScheduler+0x1a8>)
   1e818:	f7ff f8e6 	bl	1d9e8 <vListInitialise>
   1e81c:	4818      	ldr	r0, [pc, #96]	; (1e880 <vTaskStartScheduler+0x1ac>)
   1e81e:	f7ff f8e3 	bl	1d9e8 <vListInitialise>
   1e822:	4818      	ldr	r0, [pc, #96]	; (1e884 <vTaskStartScheduler+0x1b0>)
   1e824:	f7ff f8e0 	bl	1d9e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
   1e828:	4640      	mov	r0, r8
   1e82a:	f7ff f8dd 	bl	1d9e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   1e82e:	4648      	mov	r0, r9
   1e830:	f7ff f8da 	bl	1d9e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   1e834:	4814      	ldr	r0, [pc, #80]	; (1e888 <vTaskStartScheduler+0x1b4>)
   1e836:	f7ff f8d7 	bl	1d9e8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
   1e83a:	4814      	ldr	r0, [pc, #80]	; (1e88c <vTaskStartScheduler+0x1b8>)
   1e83c:	f7ff f8d4 	bl	1d9e8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
   1e840:	4a13      	ldr	r2, [pc, #76]	; (1e890 <vTaskStartScheduler+0x1bc>)
		prvAddTaskToReadyList( pxNewTCB );
   1e842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
   1e844:	f8c2 8000 	str.w	r8, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1e848:	4a12      	ldr	r2, [pc, #72]	; (1e894 <vTaskStartScheduler+0x1c0>)
   1e84a:	f8c2 9000 	str.w	r9, [r2]
}
   1e84e:	e788      	b.n	1e762 <vTaskStartScheduler+0x8e>
   1e850:	454c4449 	.word	0x454c4449
   1e854:	0001eb41 	.word	0x0001eb41
   1e858:	1000b210 	.word	0x1000b210
   1e85c:	1000b1d4 	.word	0x1000b1d4
   1e860:	1000b178 	.word	0x1000b178
   1e864:	1000b230 	.word	0x1000b230
   1e868:	1000b1e0 	.word	0x1000b1e0
   1e86c:	1000b1e4 	.word	0x1000b1e4
   1e870:	1000b184 	.word	0x1000b184
   1e874:	1000b214 	.word	0x1000b214
   1e878:	1000b248 	.word	0x1000b248
   1e87c:	1000b198 	.word	0x1000b198
   1e880:	1000b1ac 	.word	0x1000b1ac
   1e884:	1000b1c0 	.word	0x1000b1c0
   1e888:	1000b21c 	.word	0x1000b21c
   1e88c:	1000b234 	.word	0x1000b234
   1e890:	1000b17c 	.word	0x1000b17c
   1e894:	1000b180 	.word	0x1000b180
   1e898:	1000b1e8 	.word	0x1000b1e8
   1e89c:	1000b1fc 	.word	0x1000b1fc

0001e8a0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   1e8a0:	4a02      	ldr	r2, [pc, #8]	; (1e8ac <vTaskSuspendAll+0xc>)
   1e8a2:	6813      	ldr	r3, [r2, #0]
   1e8a4:	3301      	adds	r3, #1
   1e8a6:	6013      	str	r3, [r2, #0]
}
   1e8a8:	4770      	bx	lr
   1e8aa:	bf00      	nop
   1e8ac:	1000b1dc 	.word	0x1000b1dc

0001e8b0 <xTaskGetTickCount>:
		xTicks = xTickCount;
   1e8b0:	4b01      	ldr	r3, [pc, #4]	; (1e8b8 <xTaskGetTickCount+0x8>)
   1e8b2:	6818      	ldr	r0, [r3, #0]
}
   1e8b4:	4770      	bx	lr
   1e8b6:	bf00      	nop
   1e8b8:	1000b248 	.word	0x1000b248

0001e8bc <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   1e8bc:	4a05      	ldr	r2, [pc, #20]	; (1e8d4 <vTaskStepTick+0x18>)
   1e8be:	4906      	ldr	r1, [pc, #24]	; (1e8d8 <vTaskStepTick+0x1c>)
   1e8c0:	6813      	ldr	r3, [r2, #0]
   1e8c2:	6809      	ldr	r1, [r1, #0]
   1e8c4:	4403      	add	r3, r0
   1e8c6:	428b      	cmp	r3, r1
   1e8c8:	d803      	bhi.n	1e8d2 <vTaskStepTick+0x16>
		xTickCount += xTicksToJump;
   1e8ca:	6813      	ldr	r3, [r2, #0]
   1e8cc:	4418      	add	r0, r3
   1e8ce:	6010      	str	r0, [r2, #0]
	}
   1e8d0:	4770      	bx	lr
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   1e8d2:	e7fe      	b.n	1e8d2 <vTaskStepTick+0x16>
   1e8d4:	1000b248 	.word	0x1000b248
   1e8d8:	1000b214 	.word	0x1000b214

0001e8dc <xTaskIncrementTick>:
{
   1e8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1e8e0:	4b40      	ldr	r3, [pc, #256]	; (1e9e4 <xTaskIncrementTick+0x108>)
   1e8e2:	681b      	ldr	r3, [r3, #0]
{
   1e8e4:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1e8e6:	2b00      	cmp	r3, #0
   1e8e8:	d146      	bne.n	1e978 <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1e8ea:	4b3f      	ldr	r3, [pc, #252]	; (1e9e8 <xTaskIncrementTick+0x10c>)
   1e8ec:	681e      	ldr	r6, [r3, #0]
   1e8ee:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
   1e8f0:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1e8f2:	2e00      	cmp	r6, #0
   1e8f4:	d04e      	beq.n	1e994 <xTaskIncrementTick+0xb8>
   1e8f6:	f8df b108 	ldr.w	fp, [pc, #264]	; 1ea00 <xTaskIncrementTick+0x124>
		if( xConstTickCount >= xNextTaskUnblockTime )
   1e8fa:	f8db 3000 	ldr.w	r3, [fp]
   1e8fe:	42b3      	cmp	r3, r6
   1e900:	d860      	bhi.n	1e9c4 <xTaskIncrementTick+0xe8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1e902:	4f3a      	ldr	r7, [pc, #232]	; (1e9ec <xTaskIncrementTick+0x110>)
   1e904:	683b      	ldr	r3, [r7, #0]
   1e906:	681d      	ldr	r5, [r3, #0]
   1e908:	2d00      	cmp	r5, #0
   1e90a:	d05d      	beq.n	1e9c8 <xTaskIncrementTick+0xec>
					prvAddTaskToReadyList( pxTCB );
   1e90c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1ea04 <xTaskIncrementTick+0x128>
   1e910:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 1ea08 <xTaskIncrementTick+0x12c>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1e914:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1ea0c <xTaskIncrementTick+0x130>
BaseType_t xSwitchRequired = pdFALSE;
   1e918:	2500      	movs	r5, #0
   1e91a:	e022      	b.n	1e962 <xTaskIncrementTick+0x86>
   1e91c:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1e91e:	f7ff f89b 	bl	1da58 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1e922:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e924:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e926:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1e92a:	b113      	cbz	r3, 1e932 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1e92c:	f7ff f894 	bl	1da58 <uxListRemove>
   1e930:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
   1e932:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1e934:	f8d8 3000 	ldr.w	r3, [r8]
   1e938:	4298      	cmp	r0, r3
   1e93a:	bf88      	it	hi
   1e93c:	f8c8 0000 	strhi.w	r0, [r8]
   1e940:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1e944:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
   1e948:	f7ff f85e 	bl	1da08 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1e94c:	f8d9 3000 	ldr.w	r3, [r9]
   1e950:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1e952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
   1e954:	429a      	cmp	r2, r3
   1e956:	bf28      	it	cs
   1e958:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1e95a:	683b      	ldr	r3, [r7, #0]
   1e95c:	681b      	ldr	r3, [r3, #0]
   1e95e:	2b00      	cmp	r3, #0
   1e960:	d032      	beq.n	1e9c8 <xTaskIncrementTick+0xec>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1e962:	683b      	ldr	r3, [r7, #0]
   1e964:	68db      	ldr	r3, [r3, #12]
   1e966:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1e968:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1e96a:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
   1e96c:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1e96e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
   1e970:	d2d4      	bcs.n	1e91c <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
   1e972:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   1e976:	e004      	b.n	1e982 <xTaskIncrementTick+0xa6>
		++uxPendedTicks;
   1e978:	4a1d      	ldr	r2, [pc, #116]	; (1e9f0 <xTaskIncrementTick+0x114>)
   1e97a:	6813      	ldr	r3, [r2, #0]
   1e97c:	3301      	adds	r3, #1
BaseType_t xSwitchRequired = pdFALSE;
   1e97e:	2500      	movs	r5, #0
		++uxPendedTicks;
   1e980:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
   1e982:	4b1c      	ldr	r3, [pc, #112]	; (1e9f4 <xTaskIncrementTick+0x118>)
   1e984:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
   1e986:	2b00      	cmp	r3, #0
}
   1e988:	bf0c      	ite	eq
   1e98a:	4628      	moveq	r0, r5
   1e98c:	2001      	movne	r0, #1
   1e98e:	b003      	add	sp, #12
   1e990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
   1e994:	4b15      	ldr	r3, [pc, #84]	; (1e9ec <xTaskIncrementTick+0x110>)
   1e996:	681a      	ldr	r2, [r3, #0]
   1e998:	6812      	ldr	r2, [r2, #0]
   1e99a:	b992      	cbnz	r2, 1e9c2 <xTaskIncrementTick+0xe6>
   1e99c:	4a16      	ldr	r2, [pc, #88]	; (1e9f8 <xTaskIncrementTick+0x11c>)
   1e99e:	6818      	ldr	r0, [r3, #0]
   1e9a0:	6811      	ldr	r1, [r2, #0]
   1e9a2:	6019      	str	r1, [r3, #0]
   1e9a4:	4915      	ldr	r1, [pc, #84]	; (1e9fc <xTaskIncrementTick+0x120>)
   1e9a6:	6010      	str	r0, [r2, #0]
   1e9a8:	680a      	ldr	r2, [r1, #0]
   1e9aa:	3201      	adds	r2, #1
   1e9ac:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1e9ae:	681a      	ldr	r2, [r3, #0]
   1e9b0:	6812      	ldr	r2, [r2, #0]
   1e9b2:	b972      	cbnz	r2, 1e9d2 <xTaskIncrementTick+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
   1e9b4:	f8df b048 	ldr.w	fp, [pc, #72]	; 1ea00 <xTaskIncrementTick+0x124>
   1e9b8:	f04f 33ff 	mov.w	r3, #4294967295
   1e9bc:	f8cb 3000 	str.w	r3, [fp]
   1e9c0:	e79b      	b.n	1e8fa <xTaskIncrementTick+0x1e>
			taskSWITCH_DELAYED_LISTS();
   1e9c2:	e7fe      	b.n	1e9c2 <xTaskIncrementTick+0xe6>
BaseType_t xSwitchRequired = pdFALSE;
   1e9c4:	2500      	movs	r5, #0
   1e9c6:	e7dc      	b.n	1e982 <xTaskIncrementTick+0xa6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e9c8:	f04f 33ff 	mov.w	r3, #4294967295
   1e9cc:	f8cb 3000 	str.w	r3, [fp]
					break;
   1e9d0:	e7d7      	b.n	1e982 <xTaskIncrementTick+0xa6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1e9d2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1e9d4:	f8df b028 	ldr.w	fp, [pc, #40]	; 1ea00 <xTaskIncrementTick+0x124>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1e9d8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1e9da:	68db      	ldr	r3, [r3, #12]
   1e9dc:	685b      	ldr	r3, [r3, #4]
   1e9de:	f8cb 3000 	str.w	r3, [fp]
	}
}
   1e9e2:	e78a      	b.n	1e8fa <xTaskIncrementTick+0x1e>
   1e9e4:	1000b1dc 	.word	0x1000b1dc
   1e9e8:	1000b248 	.word	0x1000b248
   1e9ec:	1000b17c 	.word	0x1000b17c
   1e9f0:	1000b1d8 	.word	0x1000b1d8
   1e9f4:	1000b24c 	.word	0x1000b24c
   1e9f8:	1000b180 	.word	0x1000b180
   1e9fc:	1000b218 	.word	0x1000b218
   1ea00:	1000b214 	.word	0x1000b214
   1ea04:	1000b1e4 	.word	0x1000b1e4
   1ea08:	1000b184 	.word	0x1000b184
   1ea0c:	1000b178 	.word	0x1000b178

0001ea10 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
   1ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea14:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
   1ea16:	f7f4 fdb5 	bl	13584 <vPortEnterCritical>
		--uxSchedulerSuspended;
   1ea1a:	4b3b      	ldr	r3, [pc, #236]	; (1eb08 <xTaskResumeAll.part.0+0xf8>)
   1ea1c:	681a      	ldr	r2, [r3, #0]
   1ea1e:	3a01      	subs	r2, #1
   1ea20:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ea22:	681b      	ldr	r3, [r3, #0]
   1ea24:	2b00      	cmp	r3, #0
   1ea26:	d156      	bne.n	1ead6 <xTaskResumeAll.part.0+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1ea28:	4b38      	ldr	r3, [pc, #224]	; (1eb0c <xTaskResumeAll.part.0+0xfc>)
   1ea2a:	681b      	ldr	r3, [r3, #0]
   1ea2c:	2b00      	cmp	r3, #0
   1ea2e:	d052      	beq.n	1ead6 <xTaskResumeAll.part.0+0xc6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ea30:	4d37      	ldr	r5, [pc, #220]	; (1eb10 <xTaskResumeAll.part.0+0x100>)
   1ea32:	682b      	ldr	r3, [r5, #0]
   1ea34:	2b00      	cmp	r3, #0
   1ea36:	d063      	beq.n	1eb00 <xTaskResumeAll.part.0+0xf0>
   1ea38:	4e36      	ldr	r6, [pc, #216]	; (1eb14 <xTaskResumeAll.part.0+0x104>)
   1ea3a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1eb28 <xTaskResumeAll.part.0+0x118>
   1ea3e:	4f36      	ldr	r7, [pc, #216]	; (1eb18 <xTaskResumeAll.part.0+0x108>)
   1ea40:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1eb2c <xTaskResumeAll.part.0+0x11c>
						xYieldPending = pdTRUE;
   1ea44:	f04f 0a01 	mov.w	sl, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ea48:	68eb      	ldr	r3, [r5, #12]
   1ea4a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ea4c:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ea50:	f104 0018 	add.w	r0, r4, #24
   1ea54:	f7ff f800 	bl	1da58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ea58:	4658      	mov	r0, fp
   1ea5a:	f7fe fffd 	bl	1da58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   1ea5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ea60:	6832      	ldr	r2, [r6, #0]
   1ea62:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1ea66:	4293      	cmp	r3, r2
   1ea68:	4659      	mov	r1, fp
   1ea6a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   1ea6e:	bf88      	it	hi
   1ea70:	6033      	strhi	r3, [r6, #0]
   1ea72:	f7fe ffc9 	bl	1da08 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1ea76:	683b      	ldr	r3, [r7, #0]
   1ea78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1ea7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ea7c:	429a      	cmp	r2, r3
   1ea7e:	d332      	bcc.n	1eae6 <xTaskResumeAll.part.0+0xd6>
						xYieldPending = pdTRUE;
   1ea80:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ea84:	682b      	ldr	r3, [r5, #0]
   1ea86:	2b00      	cmp	r3, #0
   1ea88:	d1de      	bne.n	1ea48 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ea8a:	4b24      	ldr	r3, [pc, #144]	; (1eb1c <xTaskResumeAll.part.0+0x10c>)
   1ea8c:	681a      	ldr	r2, [r3, #0]
   1ea8e:	6812      	ldr	r2, [r2, #0]
   1ea90:	2a00      	cmp	r2, #0
   1ea92:	d030      	beq.n	1eaf6 <xTaskResumeAll.part.0+0xe6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ea94:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1ea96:	4b22      	ldr	r3, [pc, #136]	; (1eb20 <xTaskResumeAll.part.0+0x110>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ea98:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1ea9a:	68d2      	ldr	r2, [r2, #12]
   1ea9c:	6852      	ldr	r2, [r2, #4]
   1ea9e:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1eaa0:	4e20      	ldr	r6, [pc, #128]	; (1eb24 <xTaskResumeAll.part.0+0x114>)
   1eaa2:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1eaa4:	b144      	cbz	r4, 1eab8 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
   1eaa6:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
   1eaa8:	f7ff ff18 	bl	1e8dc <xTaskIncrementTick>
   1eaac:	b108      	cbz	r0, 1eab2 <xTaskResumeAll.part.0+0xa2>
								xYieldPending = pdTRUE;
   1eaae:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1eab2:	3c01      	subs	r4, #1
   1eab4:	d1f8      	bne.n	1eaa8 <xTaskResumeAll.part.0+0x98>
						uxPendedTicks = 0;
   1eab6:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
   1eab8:	f8d9 3000 	ldr.w	r3, [r9]
   1eabc:	b15b      	cbz	r3, 1ead6 <xTaskResumeAll.part.0+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
   1eabe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1eac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1eac6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
   1eaca:	f3bf 8f4f 	dsb	sy
   1eace:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
   1ead2:	2001      	movs	r0, #1
   1ead4:	e000      	b.n	1ead8 <xTaskResumeAll.part.0+0xc8>
BaseType_t xAlreadyYielded = pdFALSE;
   1ead6:	2000      	movs	r0, #0
   1ead8:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
   1eada:	f7f4 fd6d 	bl	135b8 <vPortExitCritical>
}
   1eade:	9801      	ldr	r0, [sp, #4]
   1eae0:	b003      	add	sp, #12
   1eae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1eae6:	682b      	ldr	r3, [r5, #0]
   1eae8:	2b00      	cmp	r3, #0
   1eaea:	d1ad      	bne.n	1ea48 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1eaec:	4b0b      	ldr	r3, [pc, #44]	; (1eb1c <xTaskResumeAll.part.0+0x10c>)
   1eaee:	681a      	ldr	r2, [r3, #0]
   1eaf0:	6812      	ldr	r2, [r2, #0]
   1eaf2:	2a00      	cmp	r2, #0
   1eaf4:	d1ce      	bne.n	1ea94 <xTaskResumeAll.part.0+0x84>
		xNextTaskUnblockTime = portMAX_DELAY;
   1eaf6:	4b0a      	ldr	r3, [pc, #40]	; (1eb20 <xTaskResumeAll.part.0+0x110>)
   1eaf8:	f04f 32ff 	mov.w	r2, #4294967295
   1eafc:	601a      	str	r2, [r3, #0]
   1eafe:	e7cf      	b.n	1eaa0 <xTaskResumeAll.part.0+0x90>
   1eb00:	f8df 9028 	ldr.w	r9, [pc, #40]	; 1eb2c <xTaskResumeAll.part.0+0x11c>
   1eb04:	e7cc      	b.n	1eaa0 <xTaskResumeAll.part.0+0x90>
   1eb06:	bf00      	nop
   1eb08:	1000b1dc 	.word	0x1000b1dc
   1eb0c:	1000b1d4 	.word	0x1000b1d4
   1eb10:	1000b21c 	.word	0x1000b21c
   1eb14:	1000b1e4 	.word	0x1000b1e4
   1eb18:	1000b178 	.word	0x1000b178
   1eb1c:	1000b17c 	.word	0x1000b17c
   1eb20:	1000b214 	.word	0x1000b214
   1eb24:	1000b1d8 	.word	0x1000b1d8
   1eb28:	1000b184 	.word	0x1000b184
   1eb2c:	1000b24c 	.word	0x1000b24c

0001eb30 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
   1eb30:	4b02      	ldr	r3, [pc, #8]	; (1eb3c <xTaskResumeAll+0xc>)
   1eb32:	681b      	ldr	r3, [r3, #0]
   1eb34:	b903      	cbnz	r3, 1eb38 <xTaskResumeAll+0x8>
   1eb36:	e7fe      	b.n	1eb36 <xTaskResumeAll+0x6>
   1eb38:	f7ff bf6a 	b.w	1ea10 <xTaskResumeAll.part.0>
   1eb3c:	1000b1dc 	.word	0x1000b1dc

0001eb40 <prvIdleTask>:
{
   1eb40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb44:	4c2b      	ldr	r4, [pc, #172]	; (1ebf4 <prvIdleTask+0xb4>)
   1eb46:	4e2c      	ldr	r6, [pc, #176]	; (1ebf8 <prvIdleTask+0xb8>)
   1eb48:	4d2c      	ldr	r5, [pc, #176]	; (1ebfc <prvIdleTask+0xbc>)
   1eb4a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 1ec00 <prvIdleTask+0xc0>
   1eb4e:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1ec04 <prvIdleTask+0xc4>
   1eb52:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1ec08 <prvIdleTask+0xc8>
				taskYIELD();
   1eb56:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
   1eb5a:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1eb5e:	6823      	ldr	r3, [r4, #0]
   1eb60:	2b01      	cmp	r3, #1
   1eb62:	d905      	bls.n	1eb70 <prvIdleTask+0x30>
				taskYIELD();
   1eb64:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
   1eb68:	f3bf 8f4f 	dsb	sy
   1eb6c:	f3bf 8f6f 	isb	sy
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   1eb70:	6833      	ldr	r3, [r6, #0]
   1eb72:	bb13      	cbnz	r3, 1ebba <prvIdleTask+0x7a>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1eb74:	682b      	ldr	r3, [r5, #0]
   1eb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eb78:	2b00      	cmp	r3, #0
   1eb7a:	d1f0      	bne.n	1eb5e <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1eb7c:	6823      	ldr	r3, [r4, #0]
   1eb7e:	2b01      	cmp	r3, #1
   1eb80:	d8ed      	bhi.n	1eb5e <prvIdleTask+0x1e>
			xReturn = xNextTaskUnblockTime - xTickCount;
   1eb82:	f8db 3000 	ldr.w	r3, [fp]
   1eb86:	f8da 2000 	ldr.w	r2, [sl]
   1eb8a:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1eb8c:	2b01      	cmp	r3, #1
   1eb8e:	d9e6      	bls.n	1eb5e <prvIdleTask+0x1e>
	++uxSchedulerSuspended;
   1eb90:	f8d9 3000 	ldr.w	r3, [r9]
   1eb94:	3301      	adds	r3, #1
   1eb96:	f8c9 3000 	str.w	r3, [r9]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   1eb9a:	f8db 2000 	ldr.w	r2, [fp]
   1eb9e:	f8da 3000 	ldr.w	r3, [sl]
   1eba2:	429a      	cmp	r2, r3
   1eba4:	d308      	bcc.n	1ebb8 <prvIdleTask+0x78>
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   1eba6:	6833      	ldr	r3, [r6, #0]
   1eba8:	b16b      	cbz	r3, 1ebc6 <prvIdleTask+0x86>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1ebaa:	682b      	ldr	r3, [r5, #0]
   1ebac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ebae:	b1f3      	cbz	r3, 1ebee <prvIdleTask+0xae>
	configASSERT( uxSchedulerSuspended );
   1ebb0:	f8d9 3000 	ldr.w	r3, [r9]
   1ebb4:	b9c3      	cbnz	r3, 1ebe8 <prvIdleTask+0xa8>
   1ebb6:	e7fe      	b.n	1ebb6 <prvIdleTask+0x76>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   1ebb8:	e7fe      	b.n	1ebb8 <prvIdleTask+0x78>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1ebba:	682b      	ldr	r3, [r5, #0]
   1ebbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ebbe:	2b00      	cmp	r3, #0
   1ebc0:	d1cd      	bne.n	1eb5e <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1ebc2:	6823      	ldr	r3, [r4, #0]
   1ebc4:	e7cb      	b.n	1eb5e <prvIdleTask+0x1e>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1ebc6:	682b      	ldr	r3, [r5, #0]
   1ebc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ebca:	2b00      	cmp	r3, #0
   1ebcc:	d1f0      	bne.n	1ebb0 <prvIdleTask+0x70>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1ebce:	6823      	ldr	r3, [r4, #0]
   1ebd0:	2b01      	cmp	r3, #1
   1ebd2:	d8ed      	bhi.n	1ebb0 <prvIdleTask+0x70>
			xReturn = xNextTaskUnblockTime - xTickCount;
   1ebd4:	f8db 0000 	ldr.w	r0, [fp]
   1ebd8:	f8da 3000 	ldr.w	r3, [sl]
   1ebdc:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1ebde:	2801      	cmp	r0, #1
   1ebe0:	d9e6      	bls.n	1ebb0 <prvIdleTask+0x70>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   1ebe2:	f7f4 fd5b 	bl	1369c <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
   1ebe6:	e7e3      	b.n	1ebb0 <prvIdleTask+0x70>
   1ebe8:	f7ff ff12 	bl	1ea10 <xTaskResumeAll.part.0>
   1ebec:	e7b7      	b.n	1eb5e <prvIdleTask+0x1e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1ebee:	6823      	ldr	r3, [r4, #0]
   1ebf0:	e7de      	b.n	1ebb0 <prvIdleTask+0x70>
   1ebf2:	bf00      	nop
   1ebf4:	1000b184 	.word	0x1000b184
   1ebf8:	1000b1e4 	.word	0x1000b1e4
   1ebfc:	1000b178 	.word	0x1000b178
   1ec00:	1000b214 	.word	0x1000b214
   1ec04:	1000b248 	.word	0x1000b248
   1ec08:	1000b1dc 	.word	0x1000b1dc

0001ec0c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1ec0c:	4b04      	ldr	r3, [pc, #16]	; (1ec20 <vTaskSwitchContext+0x14>)
   1ec0e:	681b      	ldr	r3, [r3, #0]
   1ec10:	b11b      	cbz	r3, 1ec1a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
   1ec12:	4b04      	ldr	r3, [pc, #16]	; (1ec24 <vTaskSwitchContext+0x18>)
   1ec14:	2201      	movs	r2, #1
   1ec16:	601a      	str	r2, [r3, #0]
}
   1ec18:	4770      	bx	lr
   1ec1a:	f7ff bb5b 	b.w	1e2d4 <vTaskSwitchContext.part.0>
   1ec1e:	bf00      	nop
   1ec20:	1000b1dc 	.word	0x1000b1dc
   1ec24:	1000b24c 	.word	0x1000b24c

0001ec28 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
   1ec28:	b1d0      	cbz	r0, 1ec60 <vTaskPlaceOnEventList+0x38>
{
   1ec2a:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ec2c:	4d16      	ldr	r5, [pc, #88]	; (1ec88 <vTaskPlaceOnEventList+0x60>)
   1ec2e:	460c      	mov	r4, r1
   1ec30:	6829      	ldr	r1, [r5, #0]
   1ec32:	3118      	adds	r1, #24
   1ec34:	f7fe fef8 	bl	1da28 <vListInsert>


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1ec38:	4b14      	ldr	r3, [pc, #80]	; (1ec8c <vTaskPlaceOnEventList+0x64>)
   1ec3a:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ec3c:	6828      	ldr	r0, [r5, #0]
   1ec3e:	3004      	adds	r0, #4
   1ec40:	f7fe ff0a 	bl	1da58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1ec44:	1c63      	adds	r3, r4, #1
   1ec46:	d00c      	beq.n	1ec62 <vTaskPlaceOnEventList+0x3a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1ec48:	682b      	ldr	r3, [r5, #0]
   1ec4a:	19a4      	adds	r4, r4, r6
   1ec4c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   1ec4e:	d30f      	bcc.n	1ec70 <vTaskPlaceOnEventList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ec50:	4b0f      	ldr	r3, [pc, #60]	; (1ec90 <vTaskPlaceOnEventList+0x68>)
   1ec52:	6818      	ldr	r0, [r3, #0]
   1ec54:	6829      	ldr	r1, [r5, #0]
}
   1ec56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ec5a:	3104      	adds	r1, #4
   1ec5c:	f7fe bee4 	b.w	1da28 <vListInsert>
	configASSERT( pxEventList );
   1ec60:	e7fe      	b.n	1ec60 <vTaskPlaceOnEventList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ec62:	6829      	ldr	r1, [r5, #0]
   1ec64:	480b      	ldr	r0, [pc, #44]	; (1ec94 <vTaskPlaceOnEventList+0x6c>)
}
   1ec66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ec6a:	3104      	adds	r1, #4
   1ec6c:	f7fe becc 	b.w	1da08 <vListInsertEnd>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ec70:	4b09      	ldr	r3, [pc, #36]	; (1ec98 <vTaskPlaceOnEventList+0x70>)
   1ec72:	6818      	ldr	r0, [r3, #0]
   1ec74:	6829      	ldr	r1, [r5, #0]
   1ec76:	3104      	adds	r1, #4
   1ec78:	f7fe fed6 	bl	1da28 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   1ec7c:	4b07      	ldr	r3, [pc, #28]	; (1ec9c <vTaskPlaceOnEventList+0x74>)
   1ec7e:	681a      	ldr	r2, [r3, #0]
   1ec80:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
   1ec82:	bf38      	it	cc
   1ec84:	601c      	strcc	r4, [r3, #0]
}
   1ec86:	bd70      	pop	{r4, r5, r6, pc}
   1ec88:	1000b178 	.word	0x1000b178
   1ec8c:	1000b248 	.word	0x1000b248
   1ec90:	1000b180 	.word	0x1000b180
   1ec94:	1000b234 	.word	0x1000b234
   1ec98:	1000b17c 	.word	0x1000b17c
   1ec9c:	1000b214 	.word	0x1000b214

0001eca0 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
   1eca0:	b118      	cbz	r0, 1ecaa <vTaskPlaceOnUnorderedEventList+0xa>
	configASSERT( uxSchedulerSuspended != 0 );
   1eca2:	4b1b      	ldr	r3, [pc, #108]	; (1ed10 <vTaskPlaceOnUnorderedEventList+0x70>)
   1eca4:	681b      	ldr	r3, [r3, #0]
   1eca6:	b90b      	cbnz	r3, 1ecac <vTaskPlaceOnUnorderedEventList+0xc>
   1eca8:	e7fe      	b.n	1eca8 <vTaskPlaceOnUnorderedEventList+0x8>
	configASSERT( pxEventList );
   1ecaa:	e7fe      	b.n	1ecaa <vTaskPlaceOnUnorderedEventList+0xa>
{
   1ecac:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1ecae:	4d19      	ldr	r5, [pc, #100]	; (1ed14 <vTaskPlaceOnUnorderedEventList+0x74>)
   1ecb0:	682b      	ldr	r3, [r5, #0]
   1ecb2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1ecb6:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ecb8:	6829      	ldr	r1, [r5, #0]
   1ecba:	3118      	adds	r1, #24
   1ecbc:	4614      	mov	r4, r2
   1ecbe:	f7fe fea3 	bl	1da08 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
   1ecc2:	4b15      	ldr	r3, [pc, #84]	; (1ed18 <vTaskPlaceOnUnorderedEventList+0x78>)
   1ecc4:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ecc6:	6828      	ldr	r0, [r5, #0]
   1ecc8:	3004      	adds	r0, #4
   1ecca:	f7fe fec5 	bl	1da58 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1ecce:	1c63      	adds	r3, r4, #1
   1ecd0:	d00b      	beq.n	1ecea <vTaskPlaceOnUnorderedEventList+0x4a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1ecd2:	682b      	ldr	r3, [r5, #0]
   1ecd4:	19a4      	adds	r4, r4, r6
   1ecd6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1ecd8:	d30e      	bcc.n	1ecf8 <vTaskPlaceOnUnorderedEventList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ecda:	4b10      	ldr	r3, [pc, #64]	; (1ed1c <vTaskPlaceOnUnorderedEventList+0x7c>)
   1ecdc:	6818      	ldr	r0, [r3, #0]
   1ecde:	6829      	ldr	r1, [r5, #0]
}
   1ece0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ece4:	3104      	adds	r1, #4
   1ece6:	f7fe be9f 	b.w	1da28 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ecea:	6829      	ldr	r1, [r5, #0]
   1ecec:	480c      	ldr	r0, [pc, #48]	; (1ed20 <vTaskPlaceOnUnorderedEventList+0x80>)
}
   1ecee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ecf2:	3104      	adds	r1, #4
   1ecf4:	f7fe be88 	b.w	1da08 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ecf8:	4b0a      	ldr	r3, [pc, #40]	; (1ed24 <vTaskPlaceOnUnorderedEventList+0x84>)
   1ecfa:	6818      	ldr	r0, [r3, #0]
   1ecfc:	6829      	ldr	r1, [r5, #0]
   1ecfe:	3104      	adds	r1, #4
   1ed00:	f7fe fe92 	bl	1da28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   1ed04:	4b08      	ldr	r3, [pc, #32]	; (1ed28 <vTaskPlaceOnUnorderedEventList+0x88>)
   1ed06:	681a      	ldr	r2, [r3, #0]
   1ed08:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
   1ed0a:	bf38      	it	cc
   1ed0c:	601c      	strcc	r4, [r3, #0]
}
   1ed0e:	bd70      	pop	{r4, r5, r6, pc}
   1ed10:	1000b1dc 	.word	0x1000b1dc
   1ed14:	1000b178 	.word	0x1000b178
   1ed18:	1000b248 	.word	0x1000b248
   1ed1c:	1000b180 	.word	0x1000b180
   1ed20:	1000b234 	.word	0x1000b234
   1ed24:	1000b17c 	.word	0x1000b17c
   1ed28:	1000b214 	.word	0x1000b214

0001ed2c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
   1ed2c:	b1d0      	cbz	r0, 1ed64 <vTaskPlaceOnEventListRestricted+0x38>
	{
   1ed2e:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1ed30:	4e19      	ldr	r6, [pc, #100]	; (1ed98 <vTaskPlaceOnEventListRestricted+0x6c>)
   1ed32:	460c      	mov	r4, r1
   1ed34:	6831      	ldr	r1, [r6, #0]
   1ed36:	4615      	mov	r5, r2
   1ed38:	3118      	adds	r1, #24
   1ed3a:	f7fe fe65 	bl	1da08 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
   1ed3e:	4b17      	ldr	r3, [pc, #92]	; (1ed9c <vTaskPlaceOnEventListRestricted+0x70>)
		if( xWaitIndefinitely != pdFALSE )
   1ed40:	b98d      	cbnz	r5, 1ed66 <vTaskPlaceOnEventListRestricted+0x3a>
const TickType_t xConstTickCount = xTickCount;
   1ed42:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ed44:	6830      	ldr	r0, [r6, #0]
   1ed46:	3004      	adds	r0, #4
   1ed48:	f7fe fe86 	bl	1da58 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1ed4c:	6833      	ldr	r3, [r6, #0]
   1ed4e:	1964      	adds	r4, r4, r5
   1ed50:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1ed52:	d314      	bcc.n	1ed7e <vTaskPlaceOnEventListRestricted+0x52>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ed54:	4b12      	ldr	r3, [pc, #72]	; (1eda0 <vTaskPlaceOnEventListRestricted+0x74>)
   1ed56:	6818      	ldr	r0, [r3, #0]
   1ed58:	6831      	ldr	r1, [r6, #0]
	}
   1ed5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ed5e:	3104      	adds	r1, #4
   1ed60:	f7fe be62 	b.w	1da28 <vListInsert>
		configASSERT( pxEventList );
   1ed64:	e7fe      	b.n	1ed64 <vTaskPlaceOnEventListRestricted+0x38>
const TickType_t xConstTickCount = xTickCount;
   1ed66:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ed68:	6830      	ldr	r0, [r6, #0]
   1ed6a:	3004      	adds	r0, #4
   1ed6c:	f7fe fe74 	bl	1da58 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ed70:	6831      	ldr	r1, [r6, #0]
   1ed72:	480c      	ldr	r0, [pc, #48]	; (1eda4 <vTaskPlaceOnEventListRestricted+0x78>)
	}
   1ed74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ed78:	3104      	adds	r1, #4
   1ed7a:	f7fe be45 	b.w	1da08 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1ed7e:	4b0a      	ldr	r3, [pc, #40]	; (1eda8 <vTaskPlaceOnEventListRestricted+0x7c>)
   1ed80:	6818      	ldr	r0, [r3, #0]
   1ed82:	6831      	ldr	r1, [r6, #0]
   1ed84:	3104      	adds	r1, #4
   1ed86:	f7fe fe4f 	bl	1da28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   1ed8a:	4b08      	ldr	r3, [pc, #32]	; (1edac <vTaskPlaceOnEventListRestricted+0x80>)
   1ed8c:	681a      	ldr	r2, [r3, #0]
   1ed8e:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
   1ed90:	bf38      	it	cc
   1ed92:	601c      	strcc	r4, [r3, #0]
	}
   1ed94:	bd70      	pop	{r4, r5, r6, pc}
   1ed96:	bf00      	nop
   1ed98:	1000b178 	.word	0x1000b178
   1ed9c:	1000b248 	.word	0x1000b248
   1eda0:	1000b180 	.word	0x1000b180
   1eda4:	1000b234 	.word	0x1000b234
   1eda8:	1000b17c 	.word	0x1000b17c
   1edac:	1000b214 	.word	0x1000b214

0001edb0 <xTaskRemoveFromEventList>:
{
   1edb0:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1edb2:	68c3      	ldr	r3, [r0, #12]
   1edb4:	68dc      	ldr	r4, [r3, #12]
{
   1edb6:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
   1edb8:	b304      	cbz	r4, 1edfc <xTaskRemoveFromEventList+0x4c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1edba:	f104 0518 	add.w	r5, r4, #24
   1edbe:	4628      	mov	r0, r5
   1edc0:	f7fe fe4a 	bl	1da58 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1edc4:	4b1c      	ldr	r3, [pc, #112]	; (1ee38 <xTaskRemoveFromEventList+0x88>)
   1edc6:	681b      	ldr	r3, [r3, #0]
   1edc8:	b1cb      	cbz	r3, 1edfe <xTaskRemoveFromEventList+0x4e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1edca:	481c      	ldr	r0, [pc, #112]	; (1ee3c <xTaskRemoveFromEventList+0x8c>)
   1edcc:	4629      	mov	r1, r5
   1edce:	f7fe fe1b 	bl	1da08 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1edd2:	4b1b      	ldr	r3, [pc, #108]	; (1ee40 <xTaskRemoveFromEventList+0x90>)
   1edd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1edd6:	681b      	ldr	r3, [r3, #0]
   1edd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1edda:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
   1eddc:	bf82      	ittt	hi
   1edde:	4b19      	ldrhi	r3, [pc, #100]	; (1ee44 <xTaskRemoveFromEventList+0x94>)
   1ede0:	2001      	movhi	r0, #1
   1ede2:	6018      	strhi	r0, [r3, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ede4:	4b18      	ldr	r3, [pc, #96]	; (1ee48 <xTaskRemoveFromEventList+0x98>)
   1ede6:	681a      	ldr	r2, [r3, #0]
   1ede8:	6812      	ldr	r2, [r2, #0]
		xReturn = pdFALSE;
   1edea:	bf98      	it	ls
   1edec:	2000      	movls	r0, #0
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1edee:	b9d2      	cbnz	r2, 1ee26 <xTaskRemoveFromEventList+0x76>
		xNextTaskUnblockTime = portMAX_DELAY;
   1edf0:	4b16      	ldr	r3, [pc, #88]	; (1ee4c <xTaskRemoveFromEventList+0x9c>)
   1edf2:	f04f 32ff 	mov.w	r2, #4294967295
   1edf6:	601a      	str	r2, [r3, #0]
}
   1edf8:	b003      	add	sp, #12
   1edfa:	bd30      	pop	{r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   1edfc:	e7fe      	b.n	1edfc <xTaskRemoveFromEventList+0x4c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1edfe:	1d21      	adds	r1, r4, #4
   1ee00:	4608      	mov	r0, r1
   1ee02:	9101      	str	r1, [sp, #4]
   1ee04:	f7fe fe28 	bl	1da58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ee08:	4a11      	ldr	r2, [pc, #68]	; (1ee50 <xTaskRemoveFromEventList+0xa0>)
   1ee0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ee0c:	6810      	ldr	r0, [r2, #0]
   1ee0e:	9901      	ldr	r1, [sp, #4]
   1ee10:	4283      	cmp	r3, r0
   1ee12:	4810      	ldr	r0, [pc, #64]	; (1ee54 <xTaskRemoveFromEventList+0xa4>)
   1ee14:	bf88      	it	hi
   1ee16:	6013      	strhi	r3, [r2, #0]
   1ee18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1ee1c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ee20:	f7fe fdf2 	bl	1da08 <vListInsertEnd>
   1ee24:	e7d5      	b.n	1edd2 <xTaskRemoveFromEventList+0x22>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ee26:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1ee28:	4b08      	ldr	r3, [pc, #32]	; (1ee4c <xTaskRemoveFromEventList+0x9c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ee2a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1ee2c:	68d2      	ldr	r2, [r2, #12]
   1ee2e:	6852      	ldr	r2, [r2, #4]
   1ee30:	601a      	str	r2, [r3, #0]
}
   1ee32:	b003      	add	sp, #12
   1ee34:	bd30      	pop	{r4, r5, pc}
   1ee36:	bf00      	nop
   1ee38:	1000b1dc 	.word	0x1000b1dc
   1ee3c:	1000b21c 	.word	0x1000b21c
   1ee40:	1000b178 	.word	0x1000b178
   1ee44:	1000b24c 	.word	0x1000b24c
   1ee48:	1000b17c 	.word	0x1000b17c
   1ee4c:	1000b214 	.word	0x1000b214
   1ee50:	1000b1e4 	.word	0x1000b1e4
   1ee54:	1000b184 	.word	0x1000b184

0001ee58 <vTaskRemoveFromUnorderedEventList>:
{
   1ee58:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
   1ee5a:	4b14      	ldr	r3, [pc, #80]	; (1eeac <vTaskRemoveFromUnorderedEventList+0x54>)
   1ee5c:	681a      	ldr	r2, [r3, #0]
   1ee5e:	b312      	cbz	r2, 1eea6 <vTaskRemoveFromUnorderedEventList+0x4e>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ee60:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1ee62:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
   1ee66:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
   1ee68:	b1f4      	cbz	r4, 1eea8 <vTaskRemoveFromUnorderedEventList+0x50>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ee6a:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
   1ee6c:	f7fe fdf4 	bl	1da58 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ee70:	4628      	mov	r0, r5
   1ee72:	f7fe fdf1 	bl	1da58 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   1ee76:	4a0e      	ldr	r2, [pc, #56]	; (1eeb0 <vTaskRemoveFromUnorderedEventList+0x58>)
   1ee78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ee7a:	6811      	ldr	r1, [r2, #0]
   1ee7c:	480d      	ldr	r0, [pc, #52]	; (1eeb4 <vTaskRemoveFromUnorderedEventList+0x5c>)
   1ee7e:	428b      	cmp	r3, r1
   1ee80:	bf88      	it	hi
   1ee82:	6013      	strhi	r3, [r2, #0]
   1ee84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1ee88:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1ee8c:	4629      	mov	r1, r5
   1ee8e:	f7fe fdbb 	bl	1da08 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1ee92:	4b09      	ldr	r3, [pc, #36]	; (1eeb8 <vTaskRemoveFromUnorderedEventList+0x60>)
   1ee94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1ee96:	681b      	ldr	r3, [r3, #0]
   1ee98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ee9a:	429a      	cmp	r2, r3
   1ee9c:	d902      	bls.n	1eea4 <vTaskRemoveFromUnorderedEventList+0x4c>
		xYieldPending = pdTRUE;
   1ee9e:	4b07      	ldr	r3, [pc, #28]	; (1eebc <vTaskRemoveFromUnorderedEventList+0x64>)
   1eea0:	2201      	movs	r2, #1
   1eea2:	601a      	str	r2, [r3, #0]
}
   1eea4:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( uxSchedulerSuspended != pdFALSE );
   1eea6:	e7fe      	b.n	1eea6 <vTaskRemoveFromUnorderedEventList+0x4e>
	configASSERT( pxUnblockedTCB );
   1eea8:	e7fe      	b.n	1eea8 <vTaskRemoveFromUnorderedEventList+0x50>
   1eeaa:	bf00      	nop
   1eeac:	1000b1dc 	.word	0x1000b1dc
   1eeb0:	1000b1e4 	.word	0x1000b1e4
   1eeb4:	1000b184 	.word	0x1000b184
   1eeb8:	1000b178 	.word	0x1000b178
   1eebc:	1000b24c 	.word	0x1000b24c

0001eec0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1eec0:	4a03      	ldr	r2, [pc, #12]	; (1eed0 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
   1eec2:	4b04      	ldr	r3, [pc, #16]	; (1eed4 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1eec4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1eec6:	681b      	ldr	r3, [r3, #0]
   1eec8:	e9c0 2300 	strd	r2, r3, [r0]
}
   1eecc:	4770      	bx	lr
   1eece:	bf00      	nop
   1eed0:	1000b218 	.word	0x1000b218
   1eed4:	1000b248 	.word	0x1000b248

0001eed8 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
   1eed8:	b1e8      	cbz	r0, 1ef16 <xTaskCheckForTimeOut+0x3e>
{
   1eeda:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eedc:	460d      	mov	r5, r1
   1eede:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
   1eee0:	b1c1      	cbz	r1, 1ef14 <xTaskCheckForTimeOut+0x3c>
   1eee2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   1eee4:	f7f4 fb4e 	bl	13584 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
   1eee8:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
   1eeea:	4a15      	ldr	r2, [pc, #84]	; (1ef40 <xTaskCheckForTimeOut+0x68>)
			if( *pxTicksToWait == portMAX_DELAY )
   1eeec:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
   1eeee:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
   1eef0:	d020      	beq.n	1ef34 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1eef2:	f8df c050 	ldr.w	ip, [pc, #80]	; 1ef44 <xTaskCheckForTimeOut+0x6c>
   1eef6:	e9d4 6000 	ldrd	r6, r0, [r4]
   1eefa:	f8dc 7000 	ldr.w	r7, [ip]
   1eefe:	42be      	cmp	r6, r7
   1ef00:	d00a      	beq.n	1ef18 <xTaskCheckForTimeOut+0x40>
   1ef02:	4288      	cmp	r0, r1
   1ef04:	d808      	bhi.n	1ef18 <xTaskCheckForTimeOut+0x40>
			xReturn = pdTRUE;
   1ef06:	2001      	movs	r0, #1
   1ef08:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
   1ef0a:	f7f4 fb55 	bl	135b8 <vPortExitCritical>
}
   1ef0e:	9801      	ldr	r0, [sp, #4]
   1ef10:	b003      	add	sp, #12
   1ef12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
   1ef14:	e7fe      	b.n	1ef14 <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTimeOut );
   1ef16:	e7fe      	b.n	1ef16 <xTaskCheckForTimeOut+0x3e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1ef18:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1ef1c:	4573      	cmp	r3, lr
   1ef1e:	d90b      	bls.n	1ef38 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
   1ef20:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1ef22:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1ef26:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
   1ef28:	4403      	add	r3, r0
   1ef2a:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
   1ef2c:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
   1ef2e:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
   1ef32:	e7e9      	b.n	1ef08 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
   1ef34:	2000      	movs	r0, #0
   1ef36:	e7e7      	b.n	1ef08 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
   1ef38:	2300      	movs	r3, #0
   1ef3a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
   1ef3c:	2001      	movs	r0, #1
   1ef3e:	e7e3      	b.n	1ef08 <xTaskCheckForTimeOut+0x30>
   1ef40:	1000b248 	.word	0x1000b248
   1ef44:	1000b218 	.word	0x1000b218

0001ef48 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   1ef48:	4b01      	ldr	r3, [pc, #4]	; (1ef50 <vTaskMissedYield+0x8>)
   1ef4a:	2201      	movs	r2, #1
   1ef4c:	601a      	str	r2, [r3, #0]
}
   1ef4e:	4770      	bx	lr
   1ef50:	1000b24c 	.word	0x1000b24c

0001ef54 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   1ef54:	4b09      	ldr	r3, [pc, #36]	; (1ef7c <eTaskConfirmSleepModeStatus+0x28>)
   1ef56:	6818      	ldr	r0, [r3, #0]
   1ef58:	b918      	cbnz	r0, 1ef62 <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
   1ef5a:	4b09      	ldr	r3, [pc, #36]	; (1ef80 <eTaskConfirmSleepModeStatus+0x2c>)
   1ef5c:	681b      	ldr	r3, [r3, #0]
   1ef5e:	b113      	cbz	r3, 1ef66 <eTaskConfirmSleepModeStatus+0x12>
	}
   1ef60:	4770      	bx	lr
			eReturn = eAbortSleep;
   1ef62:	2000      	movs	r0, #0
	}
   1ef64:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   1ef66:	4a07      	ldr	r2, [pc, #28]	; (1ef84 <eTaskConfirmSleepModeStatus+0x30>)
   1ef68:	4b07      	ldr	r3, [pc, #28]	; (1ef88 <eTaskConfirmSleepModeStatus+0x34>)
   1ef6a:	6810      	ldr	r0, [r2, #0]
   1ef6c:	681b      	ldr	r3, [r3, #0]
   1ef6e:	3b01      	subs	r3, #1
				eReturn = eNoTasksWaitingTimeout;
   1ef70:	4298      	cmp	r0, r3
   1ef72:	bf14      	ite	ne
   1ef74:	2001      	movne	r0, #1
   1ef76:	2002      	moveq	r0, #2
   1ef78:	4770      	bx	lr
   1ef7a:	bf00      	nop
   1ef7c:	1000b21c 	.word	0x1000b21c
   1ef80:	1000b24c 	.word	0x1000b24c
   1ef84:	1000b234 	.word	0x1000b234
   1ef88:	1000b1d4 	.word	0x1000b1d4

0001ef8c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   1ef8c:	4b05      	ldr	r3, [pc, #20]	; (1efa4 <xTaskGetSchedulerState+0x18>)
   1ef8e:	681b      	ldr	r3, [r3, #0]
   1ef90:	b133      	cbz	r3, 1efa0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ef92:	4b05      	ldr	r3, [pc, #20]	; (1efa8 <xTaskGetSchedulerState+0x1c>)
   1ef94:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   1ef96:	2b00      	cmp	r3, #0
   1ef98:	bf0c      	ite	eq
   1ef9a:	2002      	moveq	r0, #2
   1ef9c:	2000      	movne	r0, #0
   1ef9e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   1efa0:	2001      	movs	r0, #1
	}
   1efa2:	4770      	bx	lr
   1efa4:	1000b230 	.word	0x1000b230
   1efa8:	1000b1dc 	.word	0x1000b1dc

0001efac <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1efac:	4a04      	ldr	r2, [pc, #16]	; (1efc0 <uxTaskResetEventItemValue+0x14>)
   1efae:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1efb0:	6813      	ldr	r3, [r2, #0]
   1efb2:	6812      	ldr	r2, [r2, #0]
   1efb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1efb6:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1efb8:	f1c3 0304 	rsb	r3, r3, #4
   1efbc:	6193      	str	r3, [r2, #24]
}
   1efbe:	4770      	bx	lr
   1efc0:	1000b178 	.word	0x1000b178

0001efc4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1efc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1efc8:	4e1d      	ldr	r6, [pc, #116]	; (1f040 <prvSwitchTimerLists+0x7c>)
	if( xTimerQueue != NULL )
   1efca:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1f048 <prvSwitchTimerLists+0x84>
{
   1efce:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
   1efd0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1efd4:	e00c      	b.n	1eff0 <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1efd6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1efd8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1efda:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1efdc:	1d25      	adds	r5, r4, #4
   1efde:	4628      	mov	r0, r5
   1efe0:	f7fe fd3a 	bl	1da58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1efe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1efe6:	4620      	mov	r0, r4
   1efe8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1efea:	69e3      	ldr	r3, [r4, #28]
   1efec:	2b01      	cmp	r3, #1
   1efee:	d00a      	beq.n	1f006 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1eff0:	6833      	ldr	r3, [r6, #0]
   1eff2:	681a      	ldr	r2, [r3, #0]
   1eff4:	2a00      	cmp	r2, #0
   1eff6:	d1ee      	bne.n	1efd6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   1eff8:	4a12      	ldr	r2, [pc, #72]	; (1f044 <prvSwitchTimerLists+0x80>)
   1effa:	6811      	ldr	r1, [r2, #0]
   1effc:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
   1effe:	6013      	str	r3, [r2, #0]
}
   1f000:	b005      	add	sp, #20
   1f002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1f006:	69a3      	ldr	r3, [r4, #24]
   1f008:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
   1f00a:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1f00c:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
   1f00e:	d205      	bcs.n	1f01c <prvSwitchTimerLists+0x58>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1f010:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1f012:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1f014:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1f016:	f7fe fd07 	bl	1da28 <vListInsert>
   1f01a:	e7e9      	b.n	1eff0 <prvSwitchTimerLists+0x2c>
	if( xTimerQueue != NULL )
   1f01c:	f8d9 3000 	ldr.w	r3, [r9]
   1f020:	b16b      	cbz	r3, 1f03e <prvSwitchTimerLists+0x7a>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1f022:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1f026:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1f028:	f7ff ffb0 	bl	1ef8c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1f02c:	2300      	movs	r3, #0
   1f02e:	f8d9 0000 	ldr.w	r0, [r9]
   1f032:	461a      	mov	r2, r3
   1f034:	4669      	mov	r1, sp
   1f036:	f7fe fd5f 	bl	1daf8 <xQueueGenericSend>
				configASSERT( xResult );
   1f03a:	2800      	cmp	r0, #0
   1f03c:	d1d8      	bne.n	1eff0 <prvSwitchTimerLists+0x2c>
   1f03e:	e7fe      	b.n	1f03e <prvSwitchTimerLists+0x7a>
   1f040:	1000b250 	.word	0x1000b250
   1f044:	1000b254 	.word	0x1000b254
   1f048:	1000b284 	.word	0x1000b284

0001f04c <prvTimerTask>:
{
   1f04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f050:	4e84      	ldr	r6, [pc, #528]	; (1f264 <prvTimerTask+0x218>)
   1f052:	4d85      	ldr	r5, [pc, #532]	; (1f268 <prvTimerTask+0x21c>)
   1f054:	4c85      	ldr	r4, [pc, #532]	; (1f26c <prvTimerTask+0x220>)
   1f056:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
   1f058:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1f05c:	6833      	ldr	r3, [r6, #0]
   1f05e:	f8d3 a000 	ldr.w	sl, [r3]
   1f062:	f1ba 0f00 	cmp.w	sl, #0
   1f066:	f000 8098 	beq.w	1f19a <prvTimerTask+0x14e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1f06a:	68db      	ldr	r3, [r3, #12]
   1f06c:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
   1f070:	f7ff fc16 	bl	1e8a0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
   1f074:	f7ff fc1c 	bl	1e8b0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   1f078:	682a      	ldr	r2, [r5, #0]
   1f07a:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
   1f07c:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   1f07e:	f200 809d 	bhi.w	1f1bc <prvTimerTask+0x170>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1f082:	4582      	cmp	sl, r0
	xLastTime = xTimeNow;
   1f084:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1f086:	f240 80ac 	bls.w	1f1e2 <prvTimerTask+0x196>
   1f08a:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1f08c:	6820      	ldr	r0, [r4, #0]
   1f08e:	ebaa 0108 	sub.w	r1, sl, r8
   1f092:	f7ff f8bb 	bl	1e20c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   1f096:	f7ff fd4b 	bl	1eb30 <xTaskResumeAll>
   1f09a:	b938      	cbnz	r0, 1f0ac <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
   1f09c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f0a0:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
   1f0a4:	f3bf 8f4f 	dsb	sy
   1f0a8:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1f0ac:	6820      	ldr	r0, [r4, #0]
   1f0ae:	2200      	movs	r2, #0
   1f0b0:	a902      	add	r1, sp, #8
   1f0b2:	f7fe ff41 	bl	1df38 <xQueueReceive>
   1f0b6:	2800      	cmp	r0, #0
   1f0b8:	d0d0      	beq.n	1f05c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   1f0ba:	9b02      	ldr	r3, [sp, #8]
   1f0bc:	2b00      	cmp	r3, #0
   1f0be:	db64      	blt.n	1f18a <prvTimerTask+0x13e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1f0c0:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1f0c2:	697b      	ldr	r3, [r7, #20]
   1f0c4:	b113      	cbz	r3, 1f0cc <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1f0c6:	1d38      	adds	r0, r7, #4
   1f0c8:	f7fe fcc6 	bl	1da58 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
   1f0cc:	f7ff fbf0 	bl	1e8b0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   1f0d0:	682b      	ldr	r3, [r5, #0]
   1f0d2:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
   1f0d4:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   1f0d6:	d378      	bcc.n	1f1ca <prvTimerTask+0x17e>
			switch( xMessage.xMessageID )
   1f0d8:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
   1f0da:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
   1f0de:	2b09      	cmp	r3, #9
   1f0e0:	d8e4      	bhi.n	1f0ac <prvTimerTask+0x60>
   1f0e2:	a201      	add	r2, pc, #4	; (adr r2, 1f0e8 <prvTimerTask+0x9c>)
   1f0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f0e8:	0001f111 	.word	0x0001f111
   1f0ec:	0001f111 	.word	0x0001f111
   1f0f0:	0001f111 	.word	0x0001f111
   1f0f4:	0001f0ad 	.word	0x0001f0ad
   1f0f8:	0001f165 	.word	0x0001f165
   1f0fc:	0001f183 	.word	0x0001f183
   1f100:	0001f111 	.word	0x0001f111
   1f104:	0001f111 	.word	0x0001f111
   1f108:	0001f0ad 	.word	0x0001f0ad
   1f10c:	0001f165 	.word	0x0001f165
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1f110:	9b03      	ldr	r3, [sp, #12]
   1f112:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1f114:	613f      	str	r7, [r7, #16]
   1f116:	1899      	adds	r1, r3, r2
   1f118:	bf2c      	ite	cs
   1f11a:	2001      	movcs	r0, #1
   1f11c:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
   1f11e:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1f120:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
   1f122:	d855      	bhi.n	1f1d0 <prvTimerTask+0x184>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f124:	eba8 0303 	sub.w	r3, r8, r3
   1f128:	429a      	cmp	r2, r3
   1f12a:	d823      	bhi.n	1f174 <prvTimerTask+0x128>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1f12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f12e:	4638      	mov	r0, r7
   1f130:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1f132:	69fb      	ldr	r3, [r7, #28]
   1f134:	2b01      	cmp	r3, #1
   1f136:	d1b9      	bne.n	1f0ac <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
   1f138:	6823      	ldr	r3, [r4, #0]
   1f13a:	2b00      	cmp	r3, #0
   1f13c:	f000 808c 	beq.w	1f258 <prvTimerTask+0x20c>
		xMessage.xMessageID = xCommandID;
   1f140:	2300      	movs	r3, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1f142:	69ba      	ldr	r2, [r7, #24]
		xMessage.xMessageID = xCommandID;
   1f144:	9306      	str	r3, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1f146:	9b03      	ldr	r3, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1f148:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1f14a:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1f14c:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1f14e:	f7ff ff1d 	bl	1ef8c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1f152:	2300      	movs	r3, #0
   1f154:	6820      	ldr	r0, [r4, #0]
   1f156:	461a      	mov	r2, r3
   1f158:	a906      	add	r1, sp, #24
   1f15a:	f7fe fccd 	bl	1daf8 <xQueueGenericSend>
							configASSERT( xResult );
   1f15e:	2800      	cmp	r0, #0
   1f160:	d1a4      	bne.n	1f0ac <prvTimerTask+0x60>
   1f162:	e7fe      	b.n	1f162 <prvTimerTask+0x116>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1f164:	9b03      	ldr	r3, [sp, #12]
   1f166:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1f168:	b153      	cbz	r3, 1f180 <prvTimerTask+0x134>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1f16a:	4443      	add	r3, r8
	if( xNextExpiryTime <= xTimeNow )
   1f16c:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1f16e:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1f170:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
   1f172:	d831      	bhi.n	1f1d8 <prvTimerTask+0x18c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1f174:	4b3e      	ldr	r3, [pc, #248]	; (1f270 <prvTimerTask+0x224>)
   1f176:	1d39      	adds	r1, r7, #4
   1f178:	6818      	ldr	r0, [r3, #0]
   1f17a:	f7fe fc55 	bl	1da28 <vListInsert>
	return xProcessTimerNow;
   1f17e:	e795      	b.n	1f0ac <prvTimerTask+0x60>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1f180:	e7fe      	b.n	1f180 <prvTimerTask+0x134>
						vPortFree( pxTimer );
   1f182:	4638      	mov	r0, r7
   1f184:	f7fe fb2a 	bl	1d7dc <vPortFree>
					break;
   1f188:	e790      	b.n	1f0ac <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   1f18a:	9b03      	ldr	r3, [sp, #12]
   1f18c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f190:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1f192:	9b02      	ldr	r3, [sp, #8]
   1f194:	2b00      	cmp	r3, #0
   1f196:	db89      	blt.n	1f0ac <prvTimerTask+0x60>
   1f198:	e792      	b.n	1f0c0 <prvTimerTask+0x74>
	vTaskSuspendAll();
   1f19a:	f7ff fb81 	bl	1e8a0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
   1f19e:	f7ff fb87 	bl	1e8b0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
   1f1a2:	682a      	ldr	r2, [r5, #0]
   1f1a4:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
   1f1a6:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   1f1a8:	d808      	bhi.n	1f1bc <prvTimerTask+0x170>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1f1aa:	4b31      	ldr	r3, [pc, #196]	; (1f270 <prvTimerTask+0x224>)
	xLastTime = xTimeNow;
   1f1ac:	f8c5 8000 	str.w	r8, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1f1b0:	681a      	ldr	r2, [r3, #0]
   1f1b2:	6812      	ldr	r2, [r2, #0]
   1f1b4:	fab2 f282 	clz	r2, r2
   1f1b8:	0952      	lsrs	r2, r2, #5
   1f1ba:	e767      	b.n	1f08c <prvTimerTask+0x40>
		prvSwitchTimerLists();
   1f1bc:	f7ff ff02 	bl	1efc4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
   1f1c0:	f8c5 8000 	str.w	r8, [r5]
			( void ) xTaskResumeAll();
   1f1c4:	f7ff fcb4 	bl	1eb30 <xTaskResumeAll>
   1f1c8:	e770      	b.n	1f0ac <prvTimerTask+0x60>
		prvSwitchTimerLists();
   1f1ca:	f7ff fefb 	bl	1efc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   1f1ce:	e783      	b.n	1f0d8 <prvTimerTask+0x8c>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1f1d0:	4543      	cmp	r3, r8
   1f1d2:	d901      	bls.n	1f1d8 <prvTimerTask+0x18c>
   1f1d4:	2800      	cmp	r0, #0
   1f1d6:	d0a9      	beq.n	1f12c <prvTimerTask+0xe0>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1f1d8:	6830      	ldr	r0, [r6, #0]
   1f1da:	1d39      	adds	r1, r7, #4
   1f1dc:	f7fe fc24 	bl	1da28 <vListInsert>
   1f1e0:	e764      	b.n	1f0ac <prvTimerTask+0x60>
				( void ) xTaskResumeAll();
   1f1e2:	f7ff fca5 	bl	1eb30 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1f1e6:	6832      	ldr	r2, [r6, #0]
   1f1e8:	68d2      	ldr	r2, [r2, #12]
   1f1ea:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1f1ee:	f10b 0104 	add.w	r1, fp, #4
   1f1f2:	4608      	mov	r0, r1
   1f1f4:	9101      	str	r1, [sp, #4]
   1f1f6:	f7fe fc2f 	bl	1da58 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1f1fa:	f8db 001c 	ldr.w	r0, [fp, #28]
   1f1fe:	9901      	ldr	r1, [sp, #4]
   1f200:	2801      	cmp	r0, #1
   1f202:	d004      	beq.n	1f20e <prvTimerTask+0x1c2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1f204:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1f208:	4658      	mov	r0, fp
   1f20a:	4798      	blx	r3
}
   1f20c:	e74e      	b.n	1f0ac <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1f20e:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1f212:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1f216:	eb0a 0300 	add.w	r3, sl, r0
	if( xNextExpiryTime <= xTimeNow )
   1f21a:	4598      	cmp	r8, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1f21c:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
   1f220:	d203      	bcs.n	1f22a <prvTimerTask+0x1de>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1f222:	6830      	ldr	r0, [r6, #0]
   1f224:	f7fe fc00 	bl	1da28 <vListInsert>
	return xProcessTimerNow;
   1f228:	e7ec      	b.n	1f204 <prvTimerTask+0x1b8>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f22a:	eba8 030a 	sub.w	r3, r8, sl
   1f22e:	4298      	cmp	r0, r3
   1f230:	d813      	bhi.n	1f25a <prvTimerTask+0x20e>
	if( xTimerQueue != NULL )
   1f232:	6823      	ldr	r3, [r4, #0]
   1f234:	b17b      	cbz	r3, 1f256 <prvTimerTask+0x20a>
		xMessage.xMessageID = xCommandID;
   1f236:	2300      	movs	r3, #0
   1f238:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1f23a:	f8cd a01c 	str.w	sl, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1f23e:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1f242:	f7ff fea3 	bl	1ef8c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1f246:	2300      	movs	r3, #0
   1f248:	6820      	ldr	r0, [r4, #0]
   1f24a:	461a      	mov	r2, r3
   1f24c:	a906      	add	r1, sp, #24
   1f24e:	f7fe fc53 	bl	1daf8 <xQueueGenericSend>
			configASSERT( xResult );
   1f252:	2800      	cmp	r0, #0
   1f254:	d1d6      	bne.n	1f204 <prvTimerTask+0x1b8>
   1f256:	e7fe      	b.n	1f256 <prvTimerTask+0x20a>
							configASSERT( xResult );
   1f258:	e783      	b.n	1f162 <prvTimerTask+0x116>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1f25a:	4b05      	ldr	r3, [pc, #20]	; (1f270 <prvTimerTask+0x224>)
   1f25c:	6818      	ldr	r0, [r3, #0]
   1f25e:	f7fe fbe3 	bl	1da28 <vListInsert>
	return xProcessTimerNow;
   1f262:	e7cf      	b.n	1f204 <prvTimerTask+0x1b8>
   1f264:	1000b250 	.word	0x1000b250
   1f268:	1000b280 	.word	0x1000b280
   1f26c:	1000b284 	.word	0x1000b284
   1f270:	1000b254 	.word	0x1000b254

0001f274 <xTimerCreateTimerTask>:
{
   1f274:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
   1f276:	4c16      	ldr	r4, [pc, #88]	; (1f2d0 <xTimerCreateTimerTask+0x5c>)
{
   1f278:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
   1f27a:	f7f4 f983 	bl	13584 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   1f27e:	6825      	ldr	r5, [r4, #0]
   1f280:	b195      	cbz	r5, 1f2a8 <xTimerCreateTimerTask+0x34>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1f282:	f7f4 f999 	bl	135b8 <vPortExitCritical>
	if( xTimerQueue != NULL )
   1f286:	6823      	ldr	r3, [r4, #0]
   1f288:	b15b      	cbz	r3, 1f2a2 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
   1f28a:	4a12      	ldr	r2, [pc, #72]	; (1f2d4 <xTimerCreateTimerTask+0x60>)
   1f28c:	4912      	ldr	r1, [pc, #72]	; (1f2d8 <xTimerCreateTimerTask+0x64>)
   1f28e:	4813      	ldr	r0, [pc, #76]	; (1f2dc <xTimerCreateTimerTask+0x68>)
   1f290:	2303      	movs	r3, #3
   1f292:	e9cd 3200 	strd	r3, r2, [sp]
   1f296:	2300      	movs	r3, #0
   1f298:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f29c:	f7ff f87a 	bl	1e394 <xTaskCreate>
	configASSERT( xReturn );
   1f2a0:	b900      	cbnz	r0, 1f2a4 <xTimerCreateTimerTask+0x30>
   1f2a2:	e7fe      	b.n	1f2a2 <xTimerCreateTimerTask+0x2e>
}
   1f2a4:	b003      	add	sp, #12
   1f2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
   1f2a8:	4f0d      	ldr	r7, [pc, #52]	; (1f2e0 <xTimerCreateTimerTask+0x6c>)
			vListInitialise( &xActiveTimerList2 );
   1f2aa:	4e0e      	ldr	r6, [pc, #56]	; (1f2e4 <xTimerCreateTimerTask+0x70>)
			vListInitialise( &xActiveTimerList1 );
   1f2ac:	4638      	mov	r0, r7
   1f2ae:	f7fe fb9b 	bl	1d9e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   1f2b2:	4630      	mov	r0, r6
   1f2b4:	f7fe fb98 	bl	1d9e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   1f2b8:	4b0b      	ldr	r3, [pc, #44]	; (1f2e8 <xTimerCreateTimerTask+0x74>)
   1f2ba:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1f2bc:	4b0b      	ldr	r3, [pc, #44]	; (1f2ec <xTimerCreateTimerTask+0x78>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1f2be:	462a      	mov	r2, r5
   1f2c0:	2110      	movs	r1, #16
   1f2c2:	2005      	movs	r0, #5
			pxOverflowTimerList = &xActiveTimerList2;
   1f2c4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1f2c6:	f7fe fbdb 	bl	1da80 <xQueueGenericCreate>
   1f2ca:	6020      	str	r0, [r4, #0]
   1f2cc:	e7d9      	b.n	1f282 <xTimerCreateTimerTask+0xe>
   1f2ce:	bf00      	nop
   1f2d0:	1000b284 	.word	0x1000b284
   1f2d4:	1000b288 	.word	0x1000b288
   1f2d8:	000263b8 	.word	0x000263b8
   1f2dc:	0001f04d 	.word	0x0001f04d
   1f2e0:	1000b258 	.word	0x1000b258
   1f2e4:	1000b26c 	.word	0x1000b26c
   1f2e8:	1000b250 	.word	0x1000b250
   1f2ec:	1000b254 	.word	0x1000b254

0001f2f0 <xTimerCreate>:
	{
   1f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2f4:	4680      	mov	r8, r0
   1f2f6:	b083      	sub	sp, #12
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   1f2f8:	2028      	movs	r0, #40	; 0x28
	{
   1f2fa:	460d      	mov	r5, r1
   1f2fc:	4617      	mov	r7, r2
   1f2fe:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   1f300:	f7fe fa0e 	bl	1d720 <pvPortMalloc>
		if( pxNewTimer != NULL )
   1f304:	4604      	mov	r4, r0
   1f306:	b198      	cbz	r0, 1f330 <xTimerCreate+0x40>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   1f308:	b1b5      	cbz	r5, 1f338 <xTimerCreate+0x48>
		if( xTimerQueue == NULL )
   1f30a:	f8df a068 	ldr.w	sl, [pc, #104]	; 1f374 <xTimerCreate+0x84>
	taskENTER_CRITICAL();
   1f30e:	f7f4 f939 	bl	13584 <vPortEnterCritical>
		if( xTimerQueue == NULL )
   1f312:	f8da 2000 	ldr.w	r2, [sl]
   1f316:	b182      	cbz	r2, 1f33a <xTimerCreate+0x4a>
	taskEXIT_CRITICAL();
   1f318:	f7f4 f94e 	bl	135b8 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   1f31c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		pxNewTimer->pcTimerName = pcTimerName;
   1f31e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->uxAutoReload = uxAutoReload;
   1f322:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
   1f326:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   1f328:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   1f32a:	1d20      	adds	r0, r4, #4
   1f32c:	f7fe fb68 	bl	1da00 <vListInitialiseItem>
	}
   1f330:	4620      	mov	r0, r4
   1f332:	b003      	add	sp, #12
   1f334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   1f338:	e7fe      	b.n	1f338 <xTimerCreate+0x48>
			vListInitialise( &xActiveTimerList1 );
   1f33a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 1f378 <xTimerCreate+0x88>
			vListInitialise( &xActiveTimerList2 );
   1f33e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1f37c <xTimerCreate+0x8c>
   1f342:	9201      	str	r2, [sp, #4]
			vListInitialise( &xActiveTimerList1 );
   1f344:	4658      	mov	r0, fp
   1f346:	f7fe fb4f 	bl	1d9e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   1f34a:	4648      	mov	r0, r9
   1f34c:	f7fe fb4c 	bl	1d9e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   1f350:	4806      	ldr	r0, [pc, #24]	; (1f36c <xTimerCreate+0x7c>)
			pxOverflowTimerList = &xActiveTimerList2;
   1f352:	4907      	ldr	r1, [pc, #28]	; (1f370 <xTimerCreate+0x80>)
			pxCurrentTimerList = &xActiveTimerList1;
   1f354:	f8c0 b000 	str.w	fp, [r0]
			pxOverflowTimerList = &xActiveTimerList2;
   1f358:	f8c1 9000 	str.w	r9, [r1]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1f35c:	9a01      	ldr	r2, [sp, #4]
   1f35e:	2110      	movs	r1, #16
   1f360:	2005      	movs	r0, #5
   1f362:	f7fe fb8d 	bl	1da80 <xQueueGenericCreate>
   1f366:	f8ca 0000 	str.w	r0, [sl]
   1f36a:	e7d5      	b.n	1f318 <xTimerCreate+0x28>
   1f36c:	1000b250 	.word	0x1000b250
   1f370:	1000b254 	.word	0x1000b254
   1f374:	1000b284 	.word	0x1000b284
   1f378:	1000b258 	.word	0x1000b258
   1f37c:	1000b26c 	.word	0x1000b26c

0001f380 <xTimerGenericCommand>:
	configASSERT( xTimer );
   1f380:	b1a8      	cbz	r0, 1f3ae <xTimerGenericCommand+0x2e>
{
   1f382:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
   1f384:	4d14      	ldr	r5, [pc, #80]	; (1f3d8 <xTimerGenericCommand+0x58>)
   1f386:	682c      	ldr	r4, [r5, #0]
{
   1f388:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   1f38a:	b18c      	cbz	r4, 1f3b0 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1f38c:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
   1f38e:	e9cd 1200 	strd	r1, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1f392:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1f394:	dc0f      	bgt.n	1f3b6 <xTimerGenericCommand+0x36>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1f396:	f7ff fdf9 	bl	1ef8c <xTaskGetSchedulerState>
   1f39a:	2802      	cmp	r0, #2
   1f39c:	d014      	beq.n	1f3c8 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1f39e:	2300      	movs	r3, #0
   1f3a0:	6828      	ldr	r0, [r5, #0]
   1f3a2:	461a      	mov	r2, r3
   1f3a4:	4669      	mov	r1, sp
   1f3a6:	f7fe fba7 	bl	1daf8 <xQueueGenericSend>
}
   1f3aa:	b005      	add	sp, #20
   1f3ac:	bd30      	pop	{r4, r5, pc}
	configASSERT( xTimer );
   1f3ae:	e7fe      	b.n	1f3ae <xTimerGenericCommand+0x2e>
BaseType_t xReturn = pdFAIL;
   1f3b0:	4620      	mov	r0, r4
}
   1f3b2:	b005      	add	sp, #20
   1f3b4:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1f3b6:	469c      	mov	ip, r3
   1f3b8:	4662      	mov	r2, ip
   1f3ba:	2300      	movs	r3, #0
   1f3bc:	4669      	mov	r1, sp
   1f3be:	4620      	mov	r0, r4
   1f3c0:	f7fe fd2c 	bl	1de1c <xQueueGenericSendFromISR>
}
   1f3c4:	b005      	add	sp, #20
   1f3c6:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1f3c8:	6828      	ldr	r0, [r5, #0]
   1f3ca:	9a08      	ldr	r2, [sp, #32]
   1f3cc:	2300      	movs	r3, #0
   1f3ce:	4669      	mov	r1, sp
   1f3d0:	f7fe fb92 	bl	1daf8 <xQueueGenericSend>
   1f3d4:	e7ed      	b.n	1f3b2 <xTimerGenericCommand+0x32>
   1f3d6:	bf00      	nop
   1f3d8:	1000b284 	.word	0x1000b284

0001f3dc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   1f3dc:	b530      	push	{r4, r5, lr}
   1f3de:	4614      	mov	r4, r2
   1f3e0:	b085      	sub	sp, #20
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1f3e2:	461a      	mov	r2, r3
   1f3e4:	4b06      	ldr	r3, [pc, #24]	; (1f400 <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   1f3e6:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   1f3e8:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1f3ea:	6818      	ldr	r0, [r3, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   1f3ec:	9403      	str	r4, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   1f3ee:	f06f 0501 	mvn.w	r5, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1f3f2:	2300      	movs	r3, #0
   1f3f4:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   1f3f6:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1f3f8:	f7fe fd10 	bl	1de1c <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
   1f3fc:	b005      	add	sp, #20
   1f3fe:	bd30      	pop	{r4, r5, pc}
   1f400:	1000b284 	.word	0x1000b284

0001f404 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   1f404:	b510      	push	{r4, lr}
   1f406:	b084      	sub	sp, #16
   1f408:	4604      	mov	r4, r0
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1f40a:	a801      	add	r0, sp, #4
   1f40c:	f003 fc0c 	bl	22c28 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   1f410:	9b01      	ldr	r3, [sp, #4]
   1f412:	4805      	ldr	r0, [pc, #20]	; (1f428 <am_util_delay_ms+0x24>)
   1f414:	fba0 2303 	umull	r2, r3, r0, r3
   1f418:	099b      	lsrs	r3, r3, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1f41a:	fb04 f003 	mul.w	r0, r4, r3
   1f41e:	f003 fc69 	bl	22cf4 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   1f422:	b004      	add	sp, #16
   1f424:	bd10      	pop	{r4, pc}
   1f426:	bf00      	nop
   1f428:	057619f1 	.word	0x057619f1

0001f42c <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   1f42c:	b510      	push	{r4, lr}
   1f42e:	b084      	sub	sp, #16
   1f430:	4604      	mov	r4, r0
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1f432:	a801      	add	r0, sp, #4
   1f434:	f003 fbf8 	bl	22c28 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   1f438:	9b01      	ldr	r3, [sp, #4]
   1f43a:	4805      	ldr	r0, [pc, #20]	; (1f450 <am_util_delay_us+0x24>)
   1f43c:	fba0 2303 	umull	r2, r3, r0, r3
   1f440:	0c9b      	lsrs	r3, r3, #18

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1f442:	fb04 f003 	mul.w	r0, r4, r3
   1f446:	f003 fc55 	bl	22cf4 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
   1f44a:	b004      	add	sp, #16
   1f44c:	bd10      	pop	{r4, pc}
   1f44e:	bf00      	nop
   1f450:	165e9f81 	.word	0x165e9f81

0001f454 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   1f454:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   1f456:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1f45a:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   1f45c:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   1f460:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   1f464:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   1f468:	f000 f806 	bl	1f478 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   1f46c:	bd01      	pop	{r0, pc}
   1f46e:	bf00      	nop

0001f470 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   1f470:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   1f472:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   1f474:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   1f476:	4770      	bx	lr

0001f478 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   1f478:	b510      	push	{r4, lr}
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1f47a:	2300      	movs	r3, #0
{
   1f47c:	b092      	sub	sp, #72	; 0x48
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1f47e:	e9cd 3300 	strd	r3, r3, [sp]
   1f482:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1f486:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1f48a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   1f48e:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1f490:	f8d2 3d28 	ldr.w	r3, [r2, #3368]	; 0xd28
   1f494:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   1f496:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f498:	b2db      	uxtb	r3, r3
   1f49a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   1f49e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f4a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1f4a4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   1f4a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f4aa:	0c1b      	lsrs	r3, r3, #16
   1f4ac:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   1f4b0:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   1f4b4:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1f4b6:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   1f4ba:	079b      	lsls	r3, r3, #30
{
   1f4bc:	4604      	mov	r4, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1f4be:	d437      	bmi.n	1f530 <am_util_faultisr_collect_data+0xb8>
   1f4c0:	f04f 33ff 	mov.w	r3, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1f4c4:	4621      	mov	r1, r4
   1f4c6:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1f4c8:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1f4ca:	f7ff ffd1 	bl	1f470 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1f4ce:	4621      	mov	r1, r4
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1f4d0:	4603      	mov	r3, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1f4d2:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1f4d4:	9306      	str	r3, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1f4d6:	f7ff ffcb 	bl	1f470 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1f4da:	4621      	mov	r1, r4
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1f4dc:	4603      	mov	r3, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1f4de:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1f4e0:	9307      	str	r3, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1f4e2:	f7ff ffc5 	bl	1f470 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1f4e6:	4621      	mov	r1, r4
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1f4e8:	4603      	mov	r3, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1f4ea:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1f4ec:	9308      	str	r3, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1f4ee:	f7ff ffbf 	bl	1f470 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1f4f2:	4621      	mov	r1, r4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1f4f4:	4603      	mov	r3, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1f4f6:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1f4f8:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1f4fa:	f7ff ffb9 	bl	1f470 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1f4fe:	4621      	mov	r1, r4
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1f500:	4603      	mov	r3, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1f502:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1f504:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1f506:	f7ff ffb3 	bl	1f470 <getStackedReg>
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1f50a:	4621      	mov	r1, r4
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1f50c:	4603      	mov	r3, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1f50e:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1f510:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1f512:	f7ff ffad 	bl	1f470 <getStackedReg>
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1f516:	4621      	mov	r1, r4
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1f518:	4603      	mov	r3, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1f51a:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1f51c:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1f51e:	f7ff ffa7 	bl	1f470 <getStackedReg>
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1f522:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1f524:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1f526:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1f528:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1f52a:	f003 fdff 	bl	2312c <am_hal_mcuctrl_info_get>
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   1f52e:	e7fe      	b.n	1f52e <am_util_faultisr_collect_data+0xb6>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1f530:	4601      	mov	r1, r0
   1f532:	2006      	movs	r0, #6
   1f534:	f7ff ff9c 	bl	1f470 <getStackedReg>
   1f538:	4603      	mov	r3, r0
   1f53a:	e7c3      	b.n	1f4c4 <am_util_faultisr_collect_data+0x4c>

0001f53c <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   1f53c:	2900      	cmp	r1, #0
   1f53e:	d047      	beq.n	1f5d0 <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1f540:	0843      	lsrs	r3, r0, #1
   1f542:	0882      	lsrs	r2, r0, #2
   1f544:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
   1f548:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   1f54c:	189b      	adds	r3, r3, r2
   1f54e:	ea4f 0291 	mov.w	r2, r1, lsr #2
   1f552:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
   1f556:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   1f55a:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
   1f55e:	eb13 030c 	adds.w	r3, r3, ip
   1f562:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
   1f566:	ea4f 2c13 	mov.w	ip, r3, lsr #8
   1f56a:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
   1f56e:	eb13 030c 	adds.w	r3, r3, ip
   1f572:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
   1f576:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1f57a:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   1f57e:	eb13 030c 	adds.w	r3, r3, ip
   1f582:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
   1f586:	189b      	adds	r3, r3, r2
   1f588:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
   1f58c:	08db      	lsrs	r3, r3, #3
   1f58e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1f592:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
   1f594:	3006      	adds	r0, #6
{
   1f596:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
   1f598:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1f59c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
   1f5a0:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   1f5a4:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
   1f5a8:	eb1c 0c03 	adds.w	ip, ip, r3
   1f5ac:	eb42 0e0e 	adc.w	lr, r2, lr
   1f5b0:	eb1c 0c0c 	adds.w	ip, ip, ip
   1f5b4:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
   1f5b8:	ebb0 000c 	subs.w	r0, r0, ip
   1f5bc:	eb61 010e 	sbc.w	r1, r1, lr
   1f5c0:	0900      	lsrs	r0, r0, #4
   1f5c2:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
   1f5c6:	18c0      	adds	r0, r0, r3
   1f5c8:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
   1f5cc:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1f5d0:	0883      	lsrs	r3, r0, #2
   1f5d2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
   1f5d6:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   1f5da:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   1f5de:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   1f5e2:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   1f5e4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1f5e8:	3006      	adds	r0, #6
   1f5ea:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
   1f5ee:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   1f5f2:	4770      	bx	lr

0001f5f4 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   1f5f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f5f8:	b089      	sub	sp, #36	; 0x24
   1f5fa:	ad01      	add	r5, sp, #4
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
   1f5fc:	46ae      	mov	lr, r5
   1f5fe:	2401      	movs	r4, #1
   1f600:	e042      	b.n	1f688 <uint64_to_str+0x94>
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1f602:	19db      	adds	r3, r3, r7
   1f604:	eb46 0651 	adc.w	r6, r6, r1, lsr #1
        q64 += (q64 >> 4);
   1f608:	091f      	lsrs	r7, r3, #4
   1f60a:	ea47 7706 	orr.w	r7, r7, r6, lsl #28
   1f60e:	19db      	adds	r3, r3, r7
   1f610:	eb46 1616 	adc.w	r6, r6, r6, lsr #4
        q64 += (q64 >> 8);
   1f614:	0a1f      	lsrs	r7, r3, #8
   1f616:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
   1f61a:	19db      	adds	r3, r3, r7
   1f61c:	eb46 2616 	adc.w	r6, r6, r6, lsr #8
        q64 += (q64 >> 16);
   1f620:	0c1f      	lsrs	r7, r3, #16
   1f622:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
   1f626:	19db      	adds	r3, r3, r7
   1f628:	eb46 4616 	adc.w	r6, r6, r6, lsr #16
        q64 += (q64 >> 32);
   1f62c:	199b      	adds	r3, r3, r6
   1f62e:	f146 0600 	adc.w	r6, r6, #0
        q64 >>= 3;
   1f632:	08db      	lsrs	r3, r3, #3
   1f634:	ea43 7346 	orr.w	r3, r3, r6, lsl #29
   1f638:	08f6      	lsrs	r6, r6, #3
        return q64 + ((r64 + 6) >> 4);
   1f63a:	1d87      	adds	r7, r0, #6
        r64 = ui64Val - q64*10;
   1f63c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1f640:	ea4f 0886 	mov.w	r8, r6, lsl #2
        return q64 + ((r64 + 6) >> 4);
   1f644:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   1f648:	ea48 7893 	orr.w	r8, r8, r3, lsr #30
   1f64c:	eb1c 0c03 	adds.w	ip, ip, r3
   1f650:	eb46 0808 	adc.w	r8, r6, r8
   1f654:	eb1c 0c0c 	adds.w	ip, ip, ip
   1f658:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
   1f65c:	ebb7 070c 	subs.w	r7, r7, ip
   1f660:	eb61 0108 	sbc.w	r1, r1, r8
   1f664:	093f      	lsrs	r7, r7, #4
   1f666:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
   1f66a:	18fb      	adds	r3, r7, r3
        uMod = ui64Val - (u64Tmp * 10);
   1f66c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   1f670:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
        tbuf[ix++] = uMod + '0';
   1f674:	f100 0030 	add.w	r0, r0, #48	; 0x30
   1f678:	f88e 0000 	strb.w	r0, [lr]
   1f67c:	eb46 1111 	adc.w	r1, r6, r1, lsr #4
   1f680:	4618      	mov	r0, r3
   1f682:	3401      	adds	r4, #1
   1f684:	f10e 0e01 	add.w	lr, lr, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1f688:	ea4f 0c90 	mov.w	ip, r0, lsr #2
   1f68c:	eb0c 0c50 	add.w	ip, ip, r0, lsr #1
        q32 += (q32 >> 4);
   1f690:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
        q32 += (q32 >> 8);
   1f694:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
        q32 += (q32 >> 16);
   1f698:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
        q32 >>= 3;
   1f69c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        r32 = ui32Val - q32*10;
   1f6a0:	eb0c 098c 	add.w	r9, ip, ip, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1f6a4:	0843      	lsrs	r3, r0, #1
   1f6a6:	0887      	lsrs	r7, r0, #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1f6a8:	f100 0806 	add.w	r8, r0, #6
   1f6ac:	eba8 0849 	sub.w	r8, r8, r9, lsl #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1f6b0:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   1f6b4:	ea47 7781 	orr.w	r7, r7, r1, lsl #30
   1f6b8:	088e      	lsrs	r6, r1, #2
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   1f6ba:	4681      	mov	r9, r0
    if ( ui64Val >> 32 )
   1f6bc:	2900      	cmp	r1, #0
   1f6be:	d1a0      	bne.n	1f602 <uint64_to_str+0xe>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1f6c0:	eb0c 1018 	add.w	r0, ip, r8, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
   1f6c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1f6c8:	eba9 0943 	sub.w	r9, r9, r3, lsl #1
        tbuf[ix++] = uMod + '0';
   1f6cc:	f109 0930 	add.w	r9, r9, #48	; 0x30
   1f6d0:	f88e 9000 	strb.w	r9, [lr]
        ui64Val = u64Tmp;
    } while ( ui64Val );
   1f6d4:	2800      	cmp	r0, #0
   1f6d6:	d1d4      	bne.n	1f682 <uint64_to_str+0x8e>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   1f6d8:	b14a      	cbz	r2, 1f6ee <uint64_to_str+0xfa>
    {
        while ( ix-- )
   1f6da:	192b      	adds	r3, r5, r4
   1f6dc:	1e51      	subs	r1, r2, #1
        {
            *pcBuf++ = tbuf[ix];
   1f6de:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1f6e2:	f801 0f01 	strb.w	r0, [r1, #1]!
        while ( ix-- )
   1f6e6:	429d      	cmp	r5, r3
   1f6e8:	d1f9      	bne.n	1f6de <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   1f6ea:	2300      	movs	r3, #0
   1f6ec:	5513      	strb	r3, [r2, r4]
    }

    return iNumDig;
}
   1f6ee:	4620      	mov	r0, r4
   1f6f0:	b009      	add	sp, #36	; 0x24
   1f6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f6f6:	bf00      	nop

0001f6f8 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
   1f6f8:	4b01      	ldr	r3, [pc, #4]	; (1f700 <am_util_stdio_printf_init+0x8>)
   1f6fa:	6018      	str	r0, [r3, #0]
}
   1f6fc:	4770      	bx	lr
   1f6fe:	bf00      	nop
   1f700:	1000b290 	.word	0x1000b290

0001f704 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   1f704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
   1f708:	780b      	ldrb	r3, [r1, #0]
{
   1f70a:	b089      	sub	sp, #36	; 0x24
   1f70c:	4605      	mov	r5, r0
    while ( *pcFmt != 0x0 )
   1f70e:	2b00      	cmp	r3, #0
   1f710:	f000 8097 	beq.w	1f842 <am_util_stdio_vsprintf+0x13e>
   1f714:	4617      	mov	r7, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1f716:	2600      	movs	r6, #0
   1f718:	e00b      	b.n	1f732 <am_util_stdio_vsprintf+0x2e>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   1f71a:	b125      	cbz	r5, 1f726 <am_util_stdio_vsprintf+0x22>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1f71c:	2b0a      	cmp	r3, #10
   1f71e:	f000 8085 	beq.w	1f82c <am_util_stdio_vsprintf+0x128>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
   1f722:	f805 3b01 	strb.w	r3, [r5], #1
            }

            ++pcFmt;
   1f726:	3101      	adds	r1, #1
            ++ui32CharCnt;
   1f728:	3601      	adds	r6, #1
    while ( *pcFmt != 0x0 )
   1f72a:	780b      	ldrb	r3, [r1, #0]
   1f72c:	2b00      	cmp	r3, #0
   1f72e:	f000 8089 	beq.w	1f844 <am_util_stdio_vsprintf+0x140>
        if ( *pcFmt != '%' )
   1f732:	2b25      	cmp	r3, #37	; 0x25
   1f734:	d1f1      	bne.n	1f71a <am_util_stdio_vsprintf+0x16>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
   1f736:	784b      	ldrb	r3, [r1, #1]
   1f738:	2b30      	cmp	r3, #48	; 0x30
   1f73a:	f000 8098 	beq.w	1f86e <am_util_stdio_vsprintf+0x16a>
        ++pcFmt;
   1f73e:	f101 0e01 	add.w	lr, r1, #1
        ui8PadChar = ' ';
   1f742:	2220      	movs	r2, #32
    if ( *pcStr == '-')
   1f744:	2b2d      	cmp	r3, #45	; 0x2d
   1f746:	f000 8084 	beq.w	1f852 <am_util_stdio_vsprintf+0x14e>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f74a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
   1f74e:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f752:	2909      	cmp	r1, #9
   1f754:	4674      	mov	r4, lr
    bool bNeg = false;
   1f756:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f758:	f200 8087 	bhi.w	1f86a <am_util_stdio_vsprintf+0x166>
   1f75c:	f10c 0c01 	add.w	ip, ip, #1
   1f760:	ebac 0c04 	sub.w	ip, ip, r4
   1f764:	2100      	movs	r1, #0
        ui32Val *= 10;
   1f766:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
   1f76a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   1f76e:	eb04 090c 	add.w	r9, r4, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f772:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1f776:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1f77a:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
   1f77c:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f780:	d9f1      	bls.n	1f766 <am_util_stdio_vsprintf+0x62>
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1f782:	f81e 3009 	ldrb.w	r3, [lr, r9]
        pcFmt += ui32NumChars;
   1f786:	eb0e 0409 	add.w	r4, lr, r9
    return bNeg ? -ui32Val : ui32Val;
   1f78a:	f1b8 0f00 	cmp.w	r8, #0
   1f78e:	d000      	beq.n	1f792 <am_util_stdio_vsprintf+0x8e>
   1f790:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1f792:	2b73      	cmp	r3, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   1f794:	4608      	mov	r0, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1f796:	f000 8125 	beq.w	1f9e4 <am_util_stdio_vsprintf+0x2e0>
   1f79a:	ea81 78e1 	eor.w	r8, r1, r1, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   1f79e:	2b2e      	cmp	r3, #46	; 0x2e
   1f7a0:	eba8 78e1 	sub.w	r8, r8, r1, asr #31
   1f7a4:	f000 80f2 	beq.w	1f98c <am_util_stdio_vsprintf+0x288>
        iPrecision = 6;             // printf() default precision for %f is 6
   1f7a8:	f04f 0906 	mov.w	r9, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   1f7ac:	2b6c      	cmp	r3, #108	; 0x6c
   1f7ae:	d104      	bne.n	1f7ba <am_util_stdio_vsprintf+0xb6>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
   1f7b0:	7863      	ldrb	r3, [r4, #1]
   1f7b2:	2b6c      	cmp	r3, #108	; 0x6c
   1f7b4:	f000 8163 	beq.w	1fa7e <am_util_stdio_vsprintf+0x37a>
            pcFmt++;
   1f7b8:	3401      	adds	r4, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
   1f7ba:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
   1f7be:	2832      	cmp	r0, #50	; 0x32
   1f7c0:	d85a      	bhi.n	1f878 <am_util_stdio_vsprintf+0x174>
   1f7c2:	e8df f010 	tbh	[pc, r0, lsl #1]
   1f7c6:	005f      	.short	0x005f
   1f7c8:	00590059 	.word	0x00590059
   1f7cc:	00590059 	.word	0x00590059
   1f7d0:	00590059 	.word	0x00590059
   1f7d4:	00590059 	.word	0x00590059
   1f7d8:	00590059 	.word	0x00590059
   1f7dc:	00590059 	.word	0x00590059
   1f7e0:	00590059 	.word	0x00590059
   1f7e4:	00590059 	.word	0x00590059
   1f7e8:	01dc0059 	.word	0x01dc0059
   1f7ec:	00590059 	.word	0x00590059
   1f7f0:	00590059 	.word	0x00590059
   1f7f4:	00590059 	.word	0x00590059
   1f7f8:	00590059 	.word	0x00590059
   1f7fc:	00590059 	.word	0x00590059
   1f800:	00b400c9 	.word	0x00b400c9
   1f804:	005f0059 	.word	0x005f0059
   1f808:	00590059 	.word	0x00590059
   1f80c:	005900b4 	.word	0x005900b4
   1f810:	00590059 	.word	0x00590059
   1f814:	00590059 	.word	0x00590059
   1f818:	00590059 	.word	0x00590059
   1f81c:	00590059 	.word	0x00590059
   1f820:	0059010e 	.word	0x0059010e
   1f824:	005900d2 	.word	0x005900d2
   1f828:	02fb0059 	.word	0x02fb0059
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1f82c:	4acc      	ldr	r2, [pc, #816]	; (1fb60 <am_util_stdio_vsprintf+0x45c>)
   1f82e:	7812      	ldrb	r2, [r2, #0]
   1f830:	2a00      	cmp	r2, #0
   1f832:	f43f af76 	beq.w	1f722 <am_util_stdio_vsprintf+0x1e>
                    *pcBuf++ = '\r';
   1f836:	230d      	movs	r3, #13
   1f838:	f805 3b01 	strb.w	r3, [r5], #1
                    ++ui32CharCnt;
   1f83c:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
   1f83e:	780b      	ldrb	r3, [r1, #0]
   1f840:	e76f      	b.n	1f722 <am_util_stdio_vsprintf+0x1e>
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1f842:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   1f844:	b10d      	cbz	r5, 1f84a <am_util_stdio_vsprintf+0x146>
    {
        *pcBuf = 0x0;
   1f846:	2300      	movs	r3, #0
   1f848:	702b      	strb	r3, [r5, #0]
    }

    return (ui32CharCnt);
}
   1f84a:	4630      	mov	r0, r6
   1f84c:	b009      	add	sp, #36	; 0x24
   1f84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f852:	f89e 3001 	ldrb.w	r3, [lr, #1]
   1f856:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
        uCnt++;
   1f85a:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f85e:	2909      	cmp	r1, #9
        pcStr++;
   1f860:	eb0e 040c 	add.w	r4, lr, ip
        bNeg = true;
   1f864:	46e0      	mov	r8, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f866:	f67f af79 	bls.w	1f75c <am_util_stdio_vsprintf+0x58>
   1f86a:	2100      	movs	r1, #0
   1f86c:	e78d      	b.n	1f78a <am_util_stdio_vsprintf+0x86>
            ui8PadChar = '0';
   1f86e:	461a      	mov	r2, r3
            ++pcFmt;
   1f870:	f101 0e02 	add.w	lr, r1, #2
    if ( *pcStr == '-')
   1f874:	788b      	ldrb	r3, [r1, #2]
   1f876:	e765      	b.n	1f744 <am_util_stdio_vsprintf+0x40>
                if ( pcBuf )
   1f878:	b10d      	cbz	r5, 1f87e <am_util_stdio_vsprintf+0x17a>
                    *pcBuf++ = *pcFmt;
   1f87a:	f805 3b01 	strb.w	r3, [r5], #1
                ++ui32CharCnt;
   1f87e:	3601      	adds	r6, #1
        ++pcFmt;
   1f880:	1c61      	adds	r1, r4, #1
   1f882:	e752      	b.n	1f72a <am_util_stdio_vsprintf+0x26>
                if ( pcBuf )
   1f884:	2d00      	cmp	r5, #0
   1f886:	d0fb      	beq.n	1f880 <am_util_stdio_vsprintf+0x17c>
                    float fValue = va_arg(pArgs, double);
   1f888:	3707      	adds	r7, #7
   1f88a:	f027 0707 	bic.w	r7, r7, #7
   1f88e:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   1f892:	f7ec fccf 	bl	c234 <__aeabi_d2f>
   1f896:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
   1f89a:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
   1f89e:	2314      	movs	r3, #20
    if (fValue == 0.0f)
   1f8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
   1f8a4:	602b      	str	r3, [r5, #0]
    if (fValue == 0.0f)
   1f8a6:	f000 835d 	beq.w	1ff64 <am_util_stdio_vsprintf+0x860>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   1f8aa:	f3c0 51c7 	ubfx	r1, r0, #23, #8
   1f8ae:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
   1f8b2:	4603      	mov	r3, r0
    if (iExp2 >= 31)
   1f8b4:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   1f8b6:	f3c0 0016 	ubfx	r0, r0, #0, #23
   1f8ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
   1f8be:	f300 837c 	bgt.w	1ffba <am_util_stdio_vsprintf+0x8b6>
    else if (iExp2 < -23)
   1f8c2:	f112 0f17 	cmn.w	r2, #23
   1f8c6:	f2c0 8374 	blt.w	1ffb2 <am_util_stdio_vsprintf+0x8ae>
    else if (iExp2 >= 23)
   1f8ca:	2a16      	cmp	r2, #22
   1f8cc:	f340 8246 	ble.w	1fd5c <am_util_stdio_vsprintf+0x658>
        i32IntPart = i32Significand << (iExp2 - 23);
   1f8d0:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
   1f8d2:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
   1f8d4:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
   1f8d8:	f2c0 8287 	blt.w	1fdea <am_util_stdio_vsprintf+0x6e6>
   1f8dc:	462b      	mov	r3, r5
    i32FracPart = 0;
   1f8de:	f04f 0800 	mov.w	r8, #0
    if (i32IntPart == 0)
   1f8e2:	2800      	cmp	r0, #0
   1f8e4:	f000 827c 	beq.w	1fde0 <am_util_stdio_vsprintf+0x6dc>
            *pcBuf++ = '-';
   1f8e8:	461a      	mov	r2, r3
   1f8ea:	bfde      	ittt	le
   1f8ec:	232d      	movle	r3, #45	; 0x2d
   1f8ee:	f802 3b01 	strble.w	r3, [r2], #1
            uint64_to_str(-i32IntPart, pcBuf);
   1f8f2:	4240      	negle	r0, r0
   1f8f4:	17c1      	asrs	r1, r0, #31
   1f8f6:	f7ff fe7d 	bl	1f5f4 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   1f8fa:	7813      	ldrb	r3, [r2, #0]
   1f8fc:	b11b      	cbz	r3, 1f906 <am_util_stdio_vsprintf+0x202>
   1f8fe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1f902:	2b00      	cmp	r3, #0
   1f904:	d1fb      	bne.n	1f8fe <am_util_stdio_vsprintf+0x1fa>
    *pcBuf++ = '.';
   1f906:	232e      	movs	r3, #46	; 0x2e
   1f908:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   1f90a:	f1b8 0f00 	cmp.w	r8, #0
   1f90e:	f040 8291 	bne.w	1fe34 <am_util_stdio_vsprintf+0x730>
        *pcBuf++ = '0';
   1f912:	1c90      	adds	r0, r2, #2
   1f914:	2330      	movs	r3, #48	; 0x30
   1f916:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
   1f918:	1b41      	subs	r1, r0, r5
    *pcBuf = 0x00;
   1f91a:	2300      	movs	r3, #0
                    if ( iVal < 0 )
   1f91c:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
   1f91e:	7003      	strb	r3, [r0, #0]
                    if ( iVal < 0 )
   1f920:	f2c0 82c3 	blt.w	1feaa <am_util_stdio_vsprintf+0x7a6>
                    ui32CharCnt += iVal;
   1f924:	460b      	mov	r3, r1
   1f926:	441e      	add	r6, r3
                    pcBuf += iVal;
   1f928:	441d      	add	r5, r3
        ++pcFmt;
   1f92a:	1c61      	adds	r1, r4, #1
   1f92c:	e6fd      	b.n	1f72a <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1f92e:	f857 9b04 	ldr.w	r9, [r7], #4
   1f932:	ea4f 7ae9 	mov.w	sl, r9, asr #31
                if ( i64Val < 0 )
   1f936:	f1ba 0f00 	cmp.w	sl, #0
   1f93a:	f2c0 8113 	blt.w	1fb64 <am_util_stdio_vsprintf+0x460>
                if ( iWidth )
   1f93e:	2900      	cmp	r1, #0
   1f940:	f040 82bd 	bne.w	1febe <am_util_stdio_vsprintf+0x7ba>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1f944:	4648      	mov	r0, r9
   1f946:	4651      	mov	r1, sl
   1f948:	462a      	mov	r2, r5
   1f94a:	f7ff fe53 	bl	1f5f4 <uint64_to_str>
                if ( pcBuf )
   1f94e:	b9d5      	cbnz	r5, 1f986 <am_util_stdio_vsprintf+0x282>
                ui32CharCnt += iVal;
   1f950:	2500      	movs	r5, #0
   1f952:	4406      	add	r6, r0
        ++pcFmt;
   1f954:	1c61      	adds	r1, r4, #1
   1f956:	e6e8      	b.n	1f72a <am_util_stdio_vsprintf+0x26>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1f958:	1d3b      	adds	r3, r7, #4
                if ( pcBuf )
   1f95a:	b115      	cbz	r5, 1f962 <am_util_stdio_vsprintf+0x25e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1f95c:	683a      	ldr	r2, [r7, #0]
   1f95e:	f805 2b01 	strb.w	r2, [r5], #1
                ++ui32CharCnt;
   1f962:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1f964:	461f      	mov	r7, r3
        ++pcFmt;
   1f966:	1c61      	adds	r1, r4, #1
   1f968:	e6df      	b.n	1f72a <am_util_stdio_vsprintf+0x26>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1f96a:	f857 ab04 	ldr.w	sl, [r7], #4
   1f96e:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
   1f972:	2900      	cmp	r1, #0
   1f974:	f040 81b0 	bne.w	1fcd8 <am_util_stdio_vsprintf+0x5d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1f978:	4650      	mov	r0, sl
   1f97a:	4649      	mov	r1, r9
   1f97c:	462a      	mov	r2, r5
   1f97e:	f7ff fe39 	bl	1f5f4 <uint64_to_str>
                if ( pcBuf )
   1f982:	2d00      	cmp	r5, #0
   1f984:	d0e4      	beq.n	1f950 <am_util_stdio_vsprintf+0x24c>
                    pcBuf += iVal;
   1f986:	4405      	add	r5, r0
                ui32CharCnt += iVal;
   1f988:	4406      	add	r6, r0
                break;
   1f98a:	e7e3      	b.n	1f954 <am_util_stdio_vsprintf+0x250>
    if ( *pcStr == '-')
   1f98c:	7860      	ldrb	r0, [r4, #1]
   1f98e:	282d      	cmp	r0, #45	; 0x2d
            ++pcFmt;
   1f990:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
   1f994:	f000 8195 	beq.w	1fcc2 <am_util_stdio_vsprintf+0x5be>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f998:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1f99c:	2b09      	cmp	r3, #9
   1f99e:	f200 82ea 	bhi.w	1ff76 <am_util_stdio_vsprintf+0x872>
    uint32_t ui32Val = 0, uCnt = 0;
   1f9a2:	2300      	movs	r3, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f9a4:	4664      	mov	r4, ip
    bool bNeg = false;
   1f9a6:	4699      	mov	r9, r3
   1f9a8:	3301      	adds	r3, #1
   1f9aa:	eba3 0e04 	sub.w	lr, r3, r4
   1f9ae:	2300      	movs	r3, #0
        ui32Val *= 10;
   1f9b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
   1f9b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   1f9b8:	eb04 0a0e 	add.w	sl, r4, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f9bc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1f9c0:	f1a0 0b30 	sub.w	fp, r0, #48	; 0x30
   1f9c4:	f1bb 0f09 	cmp.w	fp, #9
        ui32Val += (*pcStr - '0');
   1f9c8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1f9cc:	d9f0      	bls.n	1f9b0 <am_util_stdio_vsprintf+0x2ac>
    return bNeg ? -ui32Val : ui32Val;
   1f9ce:	f1b9 0f00 	cmp.w	r9, #0
   1f9d2:	d000      	beq.n	1f9d6 <am_util_stdio_vsprintf+0x2d2>
   1f9d4:	425b      	negs	r3, r3
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   1f9d6:	4699      	mov	r9, r3
            pcFmt += ui32NumChars;
   1f9d8:	eb0c 040a 	add.w	r4, ip, sl
        if ( *pcFmt == 'l' )
   1f9dc:	f81c 300a 	ldrb.w	r3, [ip, sl]
   1f9e0:	e6e4      	b.n	1f7ac <am_util_stdio_vsprintf+0xa8>
        switch ( *pcFmt )
   1f9e2:	4640      	mov	r0, r8
                pcStr = va_arg(pArgs, char *);
   1f9e4:	46b9      	mov	r9, r7
   1f9e6:	f859 3b04 	ldr.w	r3, [r9], #4
    if ( !pcBuf )
   1f9ea:	2b00      	cmp	r3, #0
   1f9ec:	f000 81c6 	beq.w	1fd7c <am_util_stdio_vsprintf+0x678>
    while ( *pcBuf++ )
   1f9f0:	469c      	mov	ip, r3
   1f9f2:	f81c 1b01 	ldrb.w	r1, [ip], #1
   1f9f6:	2900      	cmp	r1, #0
   1f9f8:	f000 82c1 	beq.w	1ff7e <am_util_stdio_vsprintf+0x87a>
    uint32_t ui32RetVal = 0;
   1f9fc:	f04f 0e00 	mov.w	lr, #0
    while ( *pcBuf++ )
   1fa00:	f81c 7b01 	ldrb.w	r7, [ip], #1
        ui32RetVal++;
   1fa04:	f10e 0e01 	add.w	lr, lr, #1
    while ( *pcBuf++ )
   1fa08:	2f00      	cmp	r7, #0
   1fa0a:	d1f9      	bne.n	1fa00 <am_util_stdio_vsprintf+0x2fc>
                if ( iWidth > 0 )
   1fa0c:	2800      	cmp	r0, #0
   1fa0e:	dd02      	ble.n	1fa16 <am_util_stdio_vsprintf+0x312>
                    if ( ui32strlen < iWidth )
   1fa10:	4570      	cmp	r0, lr
   1fa12:	f200 81d6 	bhi.w	1fdc2 <am_util_stdio_vsprintf+0x6be>
   1fa16:	f1c3 0801 	rsb	r8, r3, #1
                while (*pcStr != 0x0)
   1fa1a:	46b2      	mov	sl, r6
   1fa1c:	462f      	mov	r7, r5
   1fa1e:	eb08 0c06 	add.w	ip, r8, r6
   1fa22:	e000      	b.n	1fa26 <am_util_stdio_vsprintf+0x322>
                        *pcBuf++ = *pcStr;
   1fa24:	462f      	mov	r7, r5
   1fa26:	eb0c 0603 	add.w	r6, ip, r3
                    if ( pcBuf )
   1fa2a:	2d00      	cmp	r5, #0
   1fa2c:	f000 8131 	beq.w	1fc92 <am_util_stdio_vsprintf+0x58e>
                        *pcBuf++ = *pcStr;
   1fa30:	7039      	strb	r1, [r7, #0]
                while (*pcStr != 0x0)
   1fa32:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
   1fa36:	3501      	adds	r5, #1
                while (*pcStr != 0x0)
   1fa38:	2900      	cmp	r1, #0
   1fa3a:	d1f3      	bne.n	1fa24 <am_util_stdio_vsprintf+0x320>
                if ( iWidth )
   1fa3c:	b1e0      	cbz	r0, 1fa78 <am_util_stdio_vsprintf+0x374>
                    iWidth = -iWidth;
   1fa3e:	f1c0 0800 	rsb	r8, r0, #0
                    if ( ui32strlen < iWidth )
   1fa42:	45f0      	cmp	r8, lr
   1fa44:	d918      	bls.n	1fa78 <am_util_stdio_vsprintf+0x374>
                        iWidth -= ui32strlen;
   1fa46:	eba8 030e 	sub.w	r3, r8, lr
    if ( i32NumChars <= 0 )
   1fa4a:	2b00      	cmp	r3, #0
   1fa4c:	f340 82b3 	ble.w	1ffb6 <am_util_stdio_vsprintf+0x8b2>
    while ( i32NumChars-- )
   1fa50:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1fa52:	4694      	mov	ip, r2
   1fa54:	2000      	movs	r0, #0
   1fa56:	461a      	mov	r2, r3
   1fa58:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   1fa5a:	4619      	mov	r1, r3
        if ( pcBuf )
   1fa5c:	2b00      	cmp	r3, #0
   1fa5e:	f000 8129 	beq.w	1fcb4 <am_util_stdio_vsprintf+0x5b0>
            *pcBuf++ = cPadChar;
   1fa62:	f801 cb01 	strb.w	ip, [r1], #1
   1fa66:	4617      	mov	r7, r2
   1fa68:	460b      	mov	r3, r1
        i32Cnt++;
   1fa6a:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1fa6c:	1e7a      	subs	r2, r7, #1
   1fa6e:	2f00      	cmp	r7, #0
   1fa70:	d1f3      	bne.n	1fa5a <am_util_stdio_vsprintf+0x356>
                        ui32CharCnt += iWidth;
   1fa72:	4406      	add	r6, r0
                        pcBuf += pcBuf ? iWidth : 0;
   1fa74:	b105      	cbz	r5, 1fa78 <am_util_stdio_vsprintf+0x374>
   1fa76:	4405      	add	r5, r0
                pcStr = va_arg(pArgs, char *);
   1fa78:	464f      	mov	r7, r9
        ++pcFmt;
   1fa7a:	1c61      	adds	r1, r4, #1
   1fa7c:	e655      	b.n	1f72a <am_util_stdio_vsprintf+0x26>
        switch ( *pcFmt )
   1fa7e:	78a3      	ldrb	r3, [r4, #2]
   1fa80:	f1a3 0046 	sub.w	r0, r3, #70	; 0x46
                pcFmt++;
   1fa84:	3402      	adds	r4, #2
        switch ( *pcFmt )
   1fa86:	2832      	cmp	r0, #50	; 0x32
   1fa88:	f63f aef6 	bhi.w	1f878 <am_util_stdio_vsprintf+0x174>
   1fa8c:	f20f 0c04 	addw	ip, pc, #4
   1fa90:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   1fa94:	0001f885 	.word	0x0001f885
   1fa98:	0001f879 	.word	0x0001f879
   1fa9c:	0001f879 	.word	0x0001f879
   1faa0:	0001f879 	.word	0x0001f879
   1faa4:	0001f879 	.word	0x0001f879
   1faa8:	0001f879 	.word	0x0001f879
   1faac:	0001f879 	.word	0x0001f879
   1fab0:	0001f879 	.word	0x0001f879
   1fab4:	0001f879 	.word	0x0001f879
   1fab8:	0001f879 	.word	0x0001f879
   1fabc:	0001f879 	.word	0x0001f879
   1fac0:	0001f879 	.word	0x0001f879
   1fac4:	0001f879 	.word	0x0001f879
   1fac8:	0001f879 	.word	0x0001f879
   1facc:	0001f879 	.word	0x0001f879
   1fad0:	0001f879 	.word	0x0001f879
   1fad4:	0001f879 	.word	0x0001f879
   1fad8:	0001f879 	.word	0x0001f879
   1fadc:	0001fe0d 	.word	0x0001fe0d
   1fae0:	0001f879 	.word	0x0001f879
   1fae4:	0001f879 	.word	0x0001f879
   1fae8:	0001f879 	.word	0x0001f879
   1faec:	0001f879 	.word	0x0001f879
   1faf0:	0001f879 	.word	0x0001f879
   1faf4:	0001f879 	.word	0x0001f879
   1faf8:	0001f879 	.word	0x0001f879
   1fafc:	0001f879 	.word	0x0001f879
   1fb00:	0001f879 	.word	0x0001f879
   1fb04:	0001f879 	.word	0x0001f879
   1fb08:	0001f959 	.word	0x0001f959
   1fb0c:	0001fbad 	.word	0x0001fbad
   1fb10:	0001f879 	.word	0x0001f879
   1fb14:	0001f885 	.word	0x0001f885
   1fb18:	0001f879 	.word	0x0001f879
   1fb1c:	0001f879 	.word	0x0001f879
   1fb20:	0001fbad 	.word	0x0001fbad
   1fb24:	0001f879 	.word	0x0001f879
   1fb28:	0001f879 	.word	0x0001f879
   1fb2c:	0001f879 	.word	0x0001f879
   1fb30:	0001f879 	.word	0x0001f879
   1fb34:	0001f879 	.word	0x0001f879
   1fb38:	0001f879 	.word	0x0001f879
   1fb3c:	0001f879 	.word	0x0001f879
   1fb40:	0001f879 	.word	0x0001f879
   1fb44:	0001f879 	.word	0x0001f879
   1fb48:	0001f9e3 	.word	0x0001f9e3
   1fb4c:	0001f879 	.word	0x0001f879
   1fb50:	0001fbbd 	.word	0x0001fbbd
   1fb54:	0001f879 	.word	0x0001f879
   1fb58:	0001f879 	.word	0x0001f879
   1fb5c:	0001fe21 	.word	0x0001fe21
   1fb60:	1000b28c 	.word	0x1000b28c
                    ui64Val = -i64Val;          // Get absolute value
   1fb64:	f1d9 0900 	rsbs	r9, r9, #0
   1fb68:	eb6a 0a4a 	sbc.w	sl, sl, sl, lsl #1
                if ( iWidth )
   1fb6c:	2900      	cmp	r1, #0
   1fb6e:	f040 81fd 	bne.w	1ff6c <am_util_stdio_vsprintf+0x868>
                        if ( pcBuf )
   1fb72:	b115      	cbz	r5, 1fb7a <am_util_stdio_vsprintf+0x476>
                            *pcBuf++ = '-';
   1fb74:	232d      	movs	r3, #45	; 0x2d
   1fb76:	f805 3b01 	strb.w	r3, [r5], #1
                        ++ui32CharCnt;
   1fb7a:	3601      	adds	r6, #1
   1fb7c:	e6e2      	b.n	1f944 <am_util_stdio_vsprintf+0x240>
        bLower = bLongLong = false;
   1fb7e:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1fb82:	f857 0b04 	ldr.w	r0, [r7], #4
   1fb86:	f04f 0c00 	mov.w	ip, #0
                if ( iWidth )
   1fb8a:	b9f9      	cbnz	r1, 1fbcc <am_util_stdio_vsprintf+0x4c8>
    if ( ui64Val == 0 )
   1fb8c:	ea50 030c 	orrs.w	r3, r0, ip
   1fb90:	d14d      	bne.n	1fc2e <am_util_stdio_vsprintf+0x52a>
    if (pcBuf)
   1fb92:	2d00      	cmp	r5, #0
   1fb94:	d079      	beq.n	1fc8a <am_util_stdio_vsprintf+0x586>
            *pcBuf++ = tbuf[ix];
   1fb96:	462b      	mov	r3, r5
   1fb98:	2230      	movs	r2, #48	; 0x30
   1fb9a:	f803 2b01 	strb.w	r2, [r3], #1
   1fb9e:	2201      	movs	r2, #1
   1fba0:	461d      	mov	r5, r3
        *pcBuf = 0;
   1fba2:	2100      	movs	r1, #0
   1fba4:	7019      	strb	r1, [r3, #0]
                ui32CharCnt += iVal;
   1fba6:	4416      	add	r6, r2
        ++pcFmt;
   1fba8:	1c61      	adds	r1, r4, #1
   1fbaa:	e5be      	b.n	1f72a <am_util_stdio_vsprintf+0x26>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1fbac:	3707      	adds	r7, #7
   1fbae:	f027 0707 	bic.w	r7, r7, #7
   1fbb2:	f8d7 a004 	ldr.w	sl, [r7, #4]
   1fbb6:	f857 9b08 	ldr.w	r9, [r7], #8
   1fbba:	e6bc      	b.n	1f936 <am_util_stdio_vsprintf+0x232>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1fbbc:	3707      	adds	r7, #7
   1fbbe:	f027 0707 	bic.w	r7, r7, #7
   1fbc2:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1fbc6:	f857 ab08 	ldr.w	sl, [r7], #8
   1fbca:	e6d2      	b.n	1f972 <am_util_stdio_vsprintf+0x26e>
    int iDigits = ui64Val ? 0 : 1;
   1fbcc:	ea50 030c 	orrs.w	r3, r0, ip
   1fbd0:	bf0c      	ite	eq
   1fbd2:	2101      	moveq	r1, #1
   1fbd4:	2100      	movne	r1, #0
    while ( ui64Val )
   1fbd6:	d00b      	beq.n	1fbf0 <am_util_stdio_vsprintf+0x4ec>
   1fbd8:	4603      	mov	r3, r0
   1fbda:	46e1      	mov	r9, ip
        ui64Val >>= 4;
   1fbdc:	091b      	lsrs	r3, r3, #4
   1fbde:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
   1fbe2:	ea4f 1919 	mov.w	r9, r9, lsr #4
    while ( ui64Val )
   1fbe6:	ea53 0a09 	orrs.w	sl, r3, r9
        ++iDigits;
   1fbea:	f101 0101 	add.w	r1, r1, #1
    while ( ui64Val )
   1fbee:	d1f5      	bne.n	1fbdc <am_util_stdio_vsprintf+0x4d8>
                    iWidth -= ndigits_in_hex(ui64Val);
   1fbf0:	eba8 0301 	sub.w	r3, r8, r1
    if ( i32NumChars <= 0 )
   1fbf4:	2b00      	cmp	r3, #0
   1fbf6:	f340 81b2 	ble.w	1ff5e <am_util_stdio_vsprintf+0x85a>
    while ( i32NumChars-- )
   1fbfa:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1fbfc:	4691      	mov	r9, r2
   1fbfe:	4682      	mov	sl, r0
   1fc00:	f04f 0800 	mov.w	r8, #0
   1fc04:	462a      	mov	r2, r5
   1fc06:	4618      	mov	r0, r3
            *pcBuf++ = cPadChar;
   1fc08:	4611      	mov	r1, r2
        if ( pcBuf )
   1fc0a:	2a00      	cmp	r2, #0
   1fc0c:	d04c      	beq.n	1fca8 <am_util_stdio_vsprintf+0x5a4>
            *pcBuf++ = cPadChar;
   1fc0e:	f801 9b01 	strb.w	r9, [r1], #1
   1fc12:	4603      	mov	r3, r0
   1fc14:	460a      	mov	r2, r1
        i32Cnt++;
   1fc16:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   1fc1a:	1e58      	subs	r0, r3, #1
   1fc1c:	2b00      	cmp	r3, #0
   1fc1e:	d1f3      	bne.n	1fc08 <am_util_stdio_vsprintf+0x504>
                    ui32CharCnt += iWidth;
   1fc20:	4650      	mov	r0, sl
   1fc22:	4446      	add	r6, r8
                    pcBuf += pcBuf ? iWidth : 0;
   1fc24:	b375      	cbz	r5, 1fc84 <am_util_stdio_vsprintf+0x580>
    if ( ui64Val == 0 )
   1fc26:	ea50 030c 	orrs.w	r3, r0, ip
                    pcBuf += pcBuf ? iWidth : 0;
   1fc2a:	4445      	add	r5, r8
    if ( ui64Val == 0 )
   1fc2c:	d0b3      	beq.n	1fb96 <am_util_stdio_vsprintf+0x492>
   1fc2e:	f1be 0f00 	cmp.w	lr, #0
   1fc32:	f10d 080c 	add.w	r8, sp, #12
   1fc36:	bf14      	ite	ne
   1fc38:	f04f 0927 	movne.w	r9, #39	; 0x27
   1fc3c:	f04f 0907 	moveq.w	r9, #7
   1fc40:	4641      	mov	r1, r8
    int iNumDig, ix = 0;
   1fc42:	2200      	movs	r2, #0
        cCh = ui64Val & 0xf;
   1fc44:	f000 030f 	and.w	r3, r0, #15
        if ( cCh > 9 )
   1fc48:	2b09      	cmp	r3, #9
            cCh += bLower ? 0x27 : 0x7;
   1fc4a:	bf88      	it	hi
   1fc4c:	444b      	addhi	r3, r9
        ui64Val >>= 4;
   1fc4e:	ea4f 1e10 	mov.w	lr, r0, lsr #4
   1fc52:	ea4e 700c 	orr.w	r0, lr, ip, lsl #28
        tbuf[ix++] = cCh + '0';
   1fc56:	3330      	adds	r3, #48	; 0x30
        ui64Val >>= 4;
   1fc58:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
        tbuf[ix++] = cCh + '0';
   1fc5c:	f801 3b01 	strb.w	r3, [r1], #1
    while ( ui64Val )
   1fc60:	ea50 030c 	orrs.w	r3, r0, ip
        tbuf[ix++] = cCh + '0';
   1fc64:	f102 0201 	add.w	r2, r2, #1
    while ( ui64Val )
   1fc68:	d1ec      	bne.n	1fc44 <am_util_stdio_vsprintf+0x540>
    if (pcBuf)
   1fc6a:	b17d      	cbz	r5, 1fc8c <am_util_stdio_vsprintf+0x588>
   1fc6c:	eb08 0302 	add.w	r3, r8, r2
   1fc70:	1e69      	subs	r1, r5, #1
            *pcBuf++ = tbuf[ix];
   1fc72:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1fc76:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (ix--)
   1fc7a:	4543      	cmp	r3, r8
   1fc7c:	d1f9      	bne.n	1fc72 <am_util_stdio_vsprintf+0x56e>
            *pcBuf++ = tbuf[ix];
   1fc7e:	18ab      	adds	r3, r5, r2
                    pcBuf += iVal;
   1fc80:	461d      	mov	r5, r3
   1fc82:	e78e      	b.n	1fba2 <am_util_stdio_vsprintf+0x49e>
    if ( ui64Val == 0 )
   1fc84:	ea50 030c 	orrs.w	r3, r0, ip
   1fc88:	d1d1      	bne.n	1fc2e <am_util_stdio_vsprintf+0x52a>
   1fc8a:	2201      	movs	r2, #1
                if ( pcBuf )
   1fc8c:	2500      	movs	r5, #0
                ui32CharCnt += iVal;
   1fc8e:	4416      	add	r6, r2
                break;
   1fc90:	e78a      	b.n	1fba8 <am_util_stdio_vsprintf+0x4a4>
   1fc92:	eb08 010a 	add.w	r1, r8, sl
                    ++ui32CharCnt;
   1fc96:	18ce      	adds	r6, r1, r3
                while (*pcStr != 0x0)
   1fc98:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   1fc9c:	2f00      	cmp	r7, #0
   1fc9e:	d1fa      	bne.n	1fc96 <am_util_stdio_vsprintf+0x592>
                if ( iWidth )
   1fca0:	2800      	cmp	r0, #0
   1fca2:	f43f aee9 	beq.w	1fa78 <am_util_stdio_vsprintf+0x374>
   1fca6:	e6ca      	b.n	1fa3e <am_util_stdio_vsprintf+0x33a>
    while ( i32NumChars-- )
   1fca8:	1e43      	subs	r3, r0, #1
        i32Cnt++;
   1fcaa:	f108 0801 	add.w	r8, r8, #1
    while ( i32NumChars-- )
   1fcae:	2800      	cmp	r0, #0
   1fcb0:	d1b1      	bne.n	1fc16 <am_util_stdio_vsprintf+0x512>
   1fcb2:	e7b5      	b.n	1fc20 <am_util_stdio_vsprintf+0x51c>
   1fcb4:	1e57      	subs	r7, r2, #1
        i32Cnt++;
   1fcb6:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1fcb8:	2a00      	cmp	r2, #0
   1fcba:	f47f aed6 	bne.w	1fa6a <am_util_stdio_vsprintf+0x366>
                        ui32CharCnt += iWidth;
   1fcbe:	4406      	add	r6, r0
   1fcc0:	e6d8      	b.n	1fa74 <am_util_stdio_vsprintf+0x370>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1fcc2:	78a0      	ldrb	r0, [r4, #2]
   1fcc4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1fcc8:	2b09      	cmp	r3, #9
        pcStr++;
   1fcca:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1fcce:	f200 8176 	bhi.w	1ffbe <am_util_stdio_vsprintf+0x8ba>
        uCnt++;
   1fcd2:	2301      	movs	r3, #1
        bNeg = true;
   1fcd4:	4699      	mov	r9, r3
   1fcd6:	e667      	b.n	1f9a8 <am_util_stdio_vsprintf+0x2a4>
    int iNDigits = ui64Val ? 0 : 1;
   1fcd8:	ea5a 0309 	orrs.w	r3, sl, r9
   1fcdc:	bf0c      	ite	eq
   1fcde:	f04f 0b01 	moveq.w	fp, #1
   1fce2:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   1fce6:	d012      	beq.n	1fd0e <am_util_stdio_vsprintf+0x60a>
   1fce8:	4649      	mov	r1, r9
   1fcea:	9400      	str	r4, [sp, #0]
   1fcec:	4650      	mov	r0, sl
   1fcee:	465c      	mov	r4, fp
   1fcf0:	46cb      	mov	fp, r9
   1fcf2:	46a9      	mov	r9, r5
   1fcf4:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   1fcf6:	f7ff fc21 	bl	1f53c <divu64_10>
    while ( ui64Val )
   1fcfa:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   1fcfe:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   1fd02:	d1f8      	bne.n	1fcf6 <am_util_stdio_vsprintf+0x5f2>
   1fd04:	462a      	mov	r2, r5
   1fd06:	464d      	mov	r5, r9
   1fd08:	46d9      	mov	r9, fp
   1fd0a:	46a3      	mov	fp, r4
   1fd0c:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
   1fd0e:	eba8 030b 	sub.w	r3, r8, fp
    if ( i32NumChars <= 0 )
   1fd12:	2b00      	cmp	r3, #0
   1fd14:	f340 8149 	ble.w	1ffaa <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
   1fd18:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1fd1a:	4694      	mov	ip, r2
   1fd1c:	46a6      	mov	lr, r4
   1fd1e:	2000      	movs	r0, #0
   1fd20:	462a      	mov	r2, r5
   1fd22:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   1fd24:	4611      	mov	r1, r2
        if ( pcBuf )
   1fd26:	b1a2      	cbz	r2, 1fd52 <am_util_stdio_vsprintf+0x64e>
            *pcBuf++ = cPadChar;
   1fd28:	f801 cb01 	strb.w	ip, [r1], #1
   1fd2c:	4623      	mov	r3, r4
   1fd2e:	460a      	mov	r2, r1
        i32Cnt++;
   1fd30:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1fd32:	1e5c      	subs	r4, r3, #1
   1fd34:	2b00      	cmp	r3, #0
   1fd36:	d1f5      	bne.n	1fd24 <am_util_stdio_vsprintf+0x620>
                    ui32CharCnt += iWidth;
   1fd38:	4674      	mov	r4, lr
   1fd3a:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   1fd3c:	2d00      	cmp	r5, #0
   1fd3e:	f000 8123 	beq.w	1ff88 <am_util_stdio_vsprintf+0x884>
   1fd42:	4405      	add	r5, r0
                iVal = uint64_to_str(ui64Val, pcBuf);
   1fd44:	462a      	mov	r2, r5
   1fd46:	4650      	mov	r0, sl
   1fd48:	4649      	mov	r1, r9
   1fd4a:	f7ff fc53 	bl	1f5f4 <uint64_to_str>
                    pcBuf += iVal;
   1fd4e:	4405      	add	r5, r0
   1fd50:	e61a      	b.n	1f988 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   1fd52:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   1fd54:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1fd56:	2c00      	cmp	r4, #0
   1fd58:	d1ea      	bne.n	1fd30 <am_util_stdio_vsprintf+0x62c>
   1fd5a:	e7ed      	b.n	1fd38 <am_util_stdio_vsprintf+0x634>
    else if (iExp2 >= 0)
   1fd5c:	2a00      	cmp	r2, #0
   1fd5e:	db36      	blt.n	1fdce <am_util_stdio_vsprintf+0x6ca>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1fd60:	f1a1 087e 	sub.w	r8, r1, #126	; 0x7e
   1fd64:	fa00 f808 	lsl.w	r8, r0, r8
        i32IntPart = i32Significand >> (23 - iExp2);
   1fd68:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
   1fd6c:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand >> (23 - iExp2);
   1fd6e:	fa40 f002 	asr.w	r0, r0, r2
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1fd72:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    if (unFloatValue.I32 < 0)
   1fd76:	db3a      	blt.n	1fdee <am_util_stdio_vsprintf+0x6ea>
   1fd78:	462a      	mov	r2, r5
   1fd7a:	e5bb      	b.n	1f8f4 <am_util_stdio_vsprintf+0x1f0>
                if ( iWidth > 0 )
   1fd7c:	2800      	cmp	r0, #0
   1fd7e:	dd3b      	ble.n	1fdf8 <am_util_stdio_vsprintf+0x6f4>
        return ui32RetVal;
   1fd80:	469e      	mov	lr, r3
    int32_t i32Cnt = 0;
   1fd82:	469c      	mov	ip, r3
    while ( i32NumChars-- )
   1fd84:	f100 38ff 	add.w	r8, r0, #4294967295
    int32_t i32Cnt = 0;
   1fd88:	2100      	movs	r1, #0
   1fd8a:	462b      	mov	r3, r5
            *pcBuf++ = cPadChar;
   1fd8c:	4618      	mov	r0, r3
        if ( pcBuf )
   1fd8e:	2b00      	cmp	r3, #0
   1fd90:	d049      	beq.n	1fe26 <am_util_stdio_vsprintf+0x722>
            *pcBuf++ = cPadChar;
   1fd92:	f800 2b01 	strb.w	r2, [r0], #1
   1fd96:	4647      	mov	r7, r8
   1fd98:	4603      	mov	r3, r0
        i32Cnt++;
   1fd9a:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   1fd9c:	f107 38ff 	add.w	r8, r7, #4294967295
   1fda0:	2f00      	cmp	r7, #0
   1fda2:	d1f3      	bne.n	1fd8c <am_util_stdio_vsprintf+0x688>
                        ui32CharCnt += iWidth;
   1fda4:	4608      	mov	r0, r1
   1fda6:	440e      	add	r6, r1
                while (*pcStr != 0x0)
   1fda8:	f89c 1000 	ldrb.w	r1, [ip]
                        ui32CharCnt += iWidth;
   1fdac:	4663      	mov	r3, ip
                        pcBuf += pcBuf ? iWidth : 0;
   1fdae:	b105      	cbz	r5, 1fdb2 <am_util_stdio_vsprintf+0x6ae>
   1fdb0:	4405      	add	r5, r0
                while (*pcStr != 0x0)
   1fdb2:	2900      	cmp	r1, #0
   1fdb4:	f43f ae60 	beq.w	1fa78 <am_util_stdio_vsprintf+0x374>
                        iWidth = 0;
   1fdb8:	2000      	movs	r0, #0
   1fdba:	e62c      	b.n	1fa16 <am_util_stdio_vsprintf+0x312>
        switch ( *pcFmt )
   1fdbc:	f04f 0e01 	mov.w	lr, #1
   1fdc0:	e6df      	b.n	1fb82 <am_util_stdio_vsprintf+0x47e>
                        iWidth -= ui32strlen;
   1fdc2:	eba0 000e 	sub.w	r0, r0, lr
    if ( i32NumChars <= 0 )
   1fdc6:	2800      	cmp	r0, #0
   1fdc8:	dcdb      	bgt.n	1fd82 <am_util_stdio_vsprintf+0x67e>
   1fdca:	4638      	mov	r0, r7
   1fdcc:	e7ef      	b.n	1fdae <am_util_stdio_vsprintf+0x6aa>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1fdce:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
   1fdd0:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1fdd2:	fa40 f802 	asr.w	r8, r0, r2
        *pcBuf++ = '-';
   1fdd6:	462b      	mov	r3, r5
    if (unFloatValue.I32 < 0)
   1fdd8:	da02      	bge.n	1fde0 <am_util_stdio_vsprintf+0x6dc>
        *pcBuf++ = '-';
   1fdda:	222d      	movs	r2, #45	; 0x2d
   1fddc:	f803 2b01 	strb.w	r2, [r3], #1
        *pcBuf++ = '0';
   1fde0:	461a      	mov	r2, r3
   1fde2:	2330      	movs	r3, #48	; 0x30
   1fde4:	f802 3b01 	strb.w	r3, [r2], #1
   1fde8:	e58d      	b.n	1f906 <am_util_stdio_vsprintf+0x202>
    i32FracPart = 0;
   1fdea:	f04f 0800 	mov.w	r8, #0
        *pcBuf++ = '-';
   1fdee:	462b      	mov	r3, r5
   1fdf0:	222d      	movs	r2, #45	; 0x2d
   1fdf2:	f803 2b01 	strb.w	r2, [r3], #1
   1fdf6:	e574      	b.n	1f8e2 <am_util_stdio_vsprintf+0x1de>
    while ( *pcBuf++ )
   1fdf8:	7819      	ldrb	r1, [r3, #0]
                while (*pcStr != 0x0)
   1fdfa:	469e      	mov	lr, r3
   1fdfc:	2900      	cmp	r1, #0
   1fdfe:	f47f ae0a 	bne.w	1fa16 <am_util_stdio_vsprintf+0x312>
   1fe02:	468e      	mov	lr, r1
                if ( iWidth )
   1fe04:	2800      	cmp	r0, #0
   1fe06:	f43f ae37 	beq.w	1fa78 <am_util_stdio_vsprintf+0x374>
   1fe0a:	e618      	b.n	1fa3e <am_util_stdio_vsprintf+0x33a>
        bLower = bLongLong = false;
   1fe0c:	f04f 0e00 	mov.w	lr, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1fe10:	3707      	adds	r7, #7
   1fe12:	f027 0707 	bic.w	r7, r7, #7
   1fe16:	f8d7 c004 	ldr.w	ip, [r7, #4]
   1fe1a:	f857 0b08 	ldr.w	r0, [r7], #8
   1fe1e:	e6b4      	b.n	1fb8a <am_util_stdio_vsprintf+0x486>
        switch ( *pcFmt )
   1fe20:	f04f 0e01 	mov.w	lr, #1
   1fe24:	e7f4      	b.n	1fe10 <am_util_stdio_vsprintf+0x70c>
    while ( i32NumChars-- )
   1fe26:	f108 37ff 	add.w	r7, r8, #4294967295
        i32Cnt++;
   1fe2a:	3101      	adds	r1, #1
    while ( i32NumChars-- )
   1fe2c:	f1b8 0f00 	cmp.w	r8, #0
   1fe30:	d1b3      	bne.n	1fd9a <am_util_stdio_vsprintf+0x696>
   1fe32:	e7b7      	b.n	1fda4 <am_util_stdio_vsprintf+0x6a0>
    *pcBuf++ = '.';
   1fe34:	f102 0c01 	add.w	ip, r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   1fe38:	ebac 0105 	sub.w	r1, ip, r5
   1fe3c:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   1fe40:	454b      	cmp	r3, r9
   1fe42:	bfa8      	it	ge
   1fe44:	464b      	movge	r3, r9
        for (jx = 0; jx < iMax; jx++)
   1fe46:	2b00      	cmp	r3, #0
   1fe48:	f340 80ca 	ble.w	1ffe0 <am_util_stdio_vsprintf+0x8dc>
   1fe4c:	1c58      	adds	r0, r3, #1
   1fe4e:	4410      	add	r0, r2
            i32FracPart *= 10;
   1fe50:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
   1fe54:	ea4f 51e8 	mov.w	r1, r8, asr #23
   1fe58:	3130      	adds	r1, #48	; 0x30
   1fe5a:	f80c 1b01 	strb.w	r1, [ip], #1
            i32FracPart *= 10;
   1fe5e:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
   1fe62:	4560      	cmp	r0, ip
            i32FracPart &= 0x00FFFFFF;
   1fe64:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
   1fe68:	d1f2      	bne.n	1fe50 <am_util_stdio_vsprintf+0x74c>
   1fe6a:	441a      	add	r2, r3
    return (pcBuf - pcBufInitial);
   1fe6c:	1b41      	subs	r1, r0, r5
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   1fe6e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1fe72:	f348 53c7 	sbfx	r3, r8, #23, #8
   1fe76:	2b04      	cmp	r3, #4
   1fe78:	f77f ad4f 	ble.w	1f91a <am_util_stdio_vsprintf+0x216>
            while ( pcBuftmp >= pcBufInitial )
   1fe7c:	4295      	cmp	r5, r2
   1fe7e:	f63f ad4c 	bhi.w	1f91a <am_util_stdio_vsprintf+0x216>
   1fe82:	4613      	mov	r3, r2
                    *pcBuftmp = '0';
   1fe84:	f04f 0e30 	mov.w	lr, #48	; 0x30
   1fe88:	e004      	b.n	1fe94 <am_util_stdio_vsprintf+0x790>
   1fe8a:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
   1fe8e:	429d      	cmp	r5, r3
   1fe90:	f63f ad43 	bhi.w	1f91a <am_util_stdio_vsprintf+0x216>
                    *pcBuftmp = '0';
   1fe94:	469c      	mov	ip, r3
                if ( *pcBuftmp == '.' )
   1fe96:	f813 2901 	ldrb.w	r2, [r3], #-1
   1fe9a:	2a2e      	cmp	r2, #46	; 0x2e
   1fe9c:	d0f7      	beq.n	1fe8e <am_util_stdio_vsprintf+0x78a>
                else if ( *pcBuftmp == '9' )
   1fe9e:	2a39      	cmp	r2, #57	; 0x39
   1fea0:	d0f3      	beq.n	1fe8a <am_util_stdio_vsprintf+0x786>
                    *pcBuftmp += 1;
   1fea2:	3201      	adds	r2, #1
   1fea4:	f88c 2000 	strb.w	r2, [ip]
                    break;
   1fea8:	e537      	b.n	1f91a <am_util_stdio_vsprintf+0x216>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   1feaa:	1c4b      	adds	r3, r1, #1
   1feac:	f000 8081 	beq.w	1ffb2 <am_util_stdio_vsprintf+0x8ae>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   1feb0:	3102      	adds	r1, #2
   1feb2:	f000 8082 	beq.w	1ffba <am_util_stdio_vsprintf+0x8b6>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   1feb6:	4b4e      	ldr	r3, [pc, #312]	; (1fff0 <am_util_stdio_vsprintf+0x8ec>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   1feb8:	602b      	str	r3, [r5, #0]
   1feba:	2303      	movs	r3, #3
   1febc:	e533      	b.n	1f926 <am_util_stdio_vsprintf+0x222>
    int iNDigits = ui64Val ? 0 : 1;
   1febe:	ea59 010a 	orrs.w	r1, r9, sl
   1fec2:	bf0c      	ite	eq
   1fec4:	f04f 0b01 	moveq.w	fp, #1
   1fec8:	f04f 0b00 	movne.w	fp, #0
    while ( ui64Val )
   1fecc:	f000 808a 	beq.w	1ffe4 <am_util_stdio_vsprintf+0x8e0>
                    bNeg = false;
   1fed0:	2300      	movs	r3, #0
   1fed2:	9300      	str	r3, [sp, #0]
   1fed4:	4648      	mov	r0, r9
   1fed6:	4651      	mov	r1, sl
   1fed8:	9401      	str	r4, [sp, #4]
   1feda:	465c      	mov	r4, fp
   1fedc:	46d3      	mov	fp, sl
   1fede:	46ca      	mov	sl, r9
   1fee0:	46a9      	mov	r9, r5
   1fee2:	4615      	mov	r5, r2
        ui64Val = divu64_10(ui64Val);
   1fee4:	f7ff fb2a 	bl	1f53c <divu64_10>
    while ( ui64Val )
   1fee8:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
   1feec:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   1fef0:	d1f8      	bne.n	1fee4 <am_util_stdio_vsprintf+0x7e0>
                    if ( bNeg )
   1fef2:	9900      	ldr	r1, [sp, #0]
                    iWidth -= ndigits_in_i64(ui64Val);
   1fef4:	462a      	mov	r2, r5
   1fef6:	464d      	mov	r5, r9
   1fef8:	46d1      	mov	r9, sl
   1fefa:	46da      	mov	sl, fp
   1fefc:	46a3      	mov	fp, r4
   1fefe:	eba8 030b 	sub.w	r3, r8, fp
   1ff02:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
   1ff04:	b119      	cbz	r1, 1ff0e <am_util_stdio_vsprintf+0x80a>
                        if ( ui8PadChar == '0' )
   1ff06:	2a30      	cmp	r2, #48	; 0x30
                        --iWidth;
   1ff08:	f103 33ff 	add.w	r3, r3, #4294967295
                        if ( ui8PadChar == '0' )
   1ff0c:	d062      	beq.n	1ffd4 <am_util_stdio_vsprintf+0x8d0>
    if ( i32NumChars <= 0 )
   1ff0e:	2b00      	cmp	r3, #0
   1ff10:	dd4d      	ble.n	1ffae <am_util_stdio_vsprintf+0x8aa>
    while ( i32NumChars-- )
   1ff12:	3b01      	subs	r3, #1
    int32_t i32Cnt = 0;
   1ff14:	4694      	mov	ip, r2
   1ff16:	46a6      	mov	lr, r4
   1ff18:	2000      	movs	r0, #0
   1ff1a:	462a      	mov	r2, r5
   1ff1c:	461c      	mov	r4, r3
            *pcBuf++ = cPadChar;
   1ff1e:	4611      	mov	r1, r2
        if ( pcBuf )
   1ff20:	b1c2      	cbz	r2, 1ff54 <am_util_stdio_vsprintf+0x850>
            *pcBuf++ = cPadChar;
   1ff22:	f801 cb01 	strb.w	ip, [r1], #1
   1ff26:	4623      	mov	r3, r4
   1ff28:	460a      	mov	r2, r1
        i32Cnt++;
   1ff2a:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1ff2c:	1e5c      	subs	r4, r3, #1
   1ff2e:	2b00      	cmp	r3, #0
   1ff30:	d1f5      	bne.n	1ff1e <am_util_stdio_vsprintf+0x81a>
   1ff32:	4674      	mov	r4, lr
   1ff34:	4662      	mov	r2, ip
                    ui32CharCnt += iWidth;
   1ff36:	4406      	add	r6, r0
                    pcBuf += pcBuf ? iWidth : 0;
   1ff38:	b365      	cbz	r5, 1ff94 <am_util_stdio_vsprintf+0x890>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1ff3a:	9b00      	ldr	r3, [sp, #0]
                    pcBuf += pcBuf ? iWidth : 0;
   1ff3c:	4405      	add	r5, r0
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1ff3e:	b113      	cbz	r3, 1ff46 <am_util_stdio_vsprintf+0x842>
   1ff40:	2a20      	cmp	r2, #32
   1ff42:	f43f ae17 	beq.w	1fb74 <am_util_stdio_vsprintf+0x470>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1ff46:	462a      	mov	r2, r5
   1ff48:	4648      	mov	r0, r9
   1ff4a:	4651      	mov	r1, sl
   1ff4c:	f7ff fb52 	bl	1f5f4 <uint64_to_str>
                    pcBuf += iVal;
   1ff50:	4405      	add	r5, r0
   1ff52:	e519      	b.n	1f988 <am_util_stdio_vsprintf+0x284>
    while ( i32NumChars-- )
   1ff54:	1e63      	subs	r3, r4, #1
        i32Cnt++;
   1ff56:	3001      	adds	r0, #1
    while ( i32NumChars-- )
   1ff58:	2c00      	cmp	r4, #0
   1ff5a:	d1e6      	bne.n	1ff2a <am_util_stdio_vsprintf+0x826>
   1ff5c:	e7e9      	b.n	1ff32 <am_util_stdio_vsprintf+0x82e>
   1ff5e:	f04f 0800 	mov.w	r8, #0
   1ff62:	e65f      	b.n	1fc24 <am_util_stdio_vsprintf+0x520>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   1ff64:	4b23      	ldr	r3, [pc, #140]	; (1fff4 <am_util_stdio_vsprintf+0x8f0>)
   1ff66:	602b      	str	r3, [r5, #0]
   1ff68:	2303      	movs	r3, #3
   1ff6a:	e4dc      	b.n	1f926 <am_util_stdio_vsprintf+0x222>
                    bNeg = true;
   1ff6c:	2301      	movs	r3, #1
   1ff6e:	9300      	str	r3, [sp, #0]
    int iNDigits = ui64Val ? 0 : 1;
   1ff70:	f04f 0b00 	mov.w	fp, #0
   1ff74:	e7ae      	b.n	1fed4 <am_util_stdio_vsprintf+0x7d0>
    uint32_t ui32Val = 0, uCnt = 0;
   1ff76:	f04f 0a00 	mov.w	sl, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1ff7a:	4653      	mov	r3, sl
   1ff7c:	e52b      	b.n	1f9d6 <am_util_stdio_vsprintf+0x2d2>
                if ( iWidth > 0 )
   1ff7e:	2800      	cmp	r0, #0
   1ff80:	f77f af3f 	ble.w	1fe02 <am_util_stdio_vsprintf+0x6fe>
    uint32_t ui32RetVal = 0;
   1ff84:	468e      	mov	lr, r1
   1ff86:	e6fc      	b.n	1fd82 <am_util_stdio_vsprintf+0x67e>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1ff88:	462a      	mov	r2, r5
   1ff8a:	4650      	mov	r0, sl
   1ff8c:	4649      	mov	r1, r9
   1ff8e:	f7ff fb31 	bl	1f5f4 <uint64_to_str>
                if ( pcBuf )
   1ff92:	e4dd      	b.n	1f950 <am_util_stdio_vsprintf+0x24c>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1ff94:	9b00      	ldr	r3, [sp, #0]
   1ff96:	b1b3      	cbz	r3, 1ffc6 <am_util_stdio_vsprintf+0x8c2>
   1ff98:	2a20      	cmp	r2, #32
   1ff9a:	f43f adee 	beq.w	1fb7a <am_util_stdio_vsprintf+0x476>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1ff9e:	462a      	mov	r2, r5
   1ffa0:	4648      	mov	r0, r9
   1ffa2:	4651      	mov	r1, sl
   1ffa4:	f7ff fb26 	bl	1f5f4 <uint64_to_str>
                if ( pcBuf )
   1ffa8:	e4d2      	b.n	1f950 <am_util_stdio_vsprintf+0x24c>
   1ffaa:	2000      	movs	r0, #0
   1ffac:	e6c6      	b.n	1fd3c <am_util_stdio_vsprintf+0x638>
   1ffae:	2000      	movs	r0, #0
   1ffb0:	e7c2      	b.n	1ff38 <am_util_stdio_vsprintf+0x834>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   1ffb2:	4b10      	ldr	r3, [pc, #64]	; (1fff4 <am_util_stdio_vsprintf+0x8f0>)
   1ffb4:	e780      	b.n	1feb8 <am_util_stdio_vsprintf+0x7b4>
   1ffb6:	2000      	movs	r0, #0
   1ffb8:	e55c      	b.n	1fa74 <am_util_stdio_vsprintf+0x370>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   1ffba:	4b0f      	ldr	r3, [pc, #60]	; (1fff8 <am_util_stdio_vsprintf+0x8f4>)
   1ffbc:	e77c      	b.n	1feb8 <am_util_stdio_vsprintf+0x7b4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1ffbe:	2300      	movs	r3, #0
        uCnt++;
   1ffc0:	f04f 0a01 	mov.w	sl, #1
   1ffc4:	e506      	b.n	1f9d4 <am_util_stdio_vsprintf+0x2d0>
                iVal = uint64_to_str(ui64Val, pcBuf);
   1ffc6:	4648      	mov	r0, r9
   1ffc8:	4651      	mov	r1, sl
   1ffca:	462a      	mov	r2, r5
   1ffcc:	f7ff fb12 	bl	1f5f4 <uint64_to_str>
                ui32CharCnt += iVal;
   1ffd0:	4406      	add	r6, r0
                break;
   1ffd2:	e4bf      	b.n	1f954 <am_util_stdio_vsprintf+0x250>
                            if ( pcBuf )
   1ffd4:	b115      	cbz	r5, 1ffdc <am_util_stdio_vsprintf+0x8d8>
                                *pcBuf++ = '-';
   1ffd6:	212d      	movs	r1, #45	; 0x2d
   1ffd8:	f805 1b01 	strb.w	r1, [r5], #1
                            ++ui32CharCnt;
   1ffdc:	3601      	adds	r6, #1
   1ffde:	e796      	b.n	1ff0e <am_util_stdio_vsprintf+0x80a>
    *pcBuf++ = '.';
   1ffe0:	4660      	mov	r0, ip
   1ffe2:	e744      	b.n	1fe6e <am_util_stdio_vsprintf+0x76a>
                    iWidth -= ndigits_in_i64(ui64Val);
   1ffe4:	eba8 030b 	sub.w	r3, r8, fp
                    bNeg = false;
   1ffe8:	468a      	mov	sl, r1
   1ffea:	9100      	str	r1, [sp, #0]
                    ui64Val = i64Val;
   1ffec:	4689      	mov	r9, r1
   1ffee:	e78e      	b.n	1ff0e <am_util_stdio_vsprintf+0x80a>
   1fff0:	003f2e3f 	.word	0x003f2e3f
   1fff4:	00302e30 	.word	0x00302e30
   1fff8:	00232e23 	.word	0x00232e23

0001fffc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   1fffc:	b40f      	push	{r0, r1, r2, r3}
   1fffe:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   20000:	4d09      	ldr	r5, [pc, #36]	; (20028 <am_util_stdio_printf+0x2c>)
   20002:	682c      	ldr	r4, [r5, #0]
{
   20004:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
   20006:	b14c      	cbz	r4, 2001c <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   20008:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   2000a:	9906      	ldr	r1, [sp, #24]
   2000c:	4807      	ldr	r0, [pc, #28]	; (2002c <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
   2000e:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   20010:	f7ff fb78 	bl	1f704 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   20014:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   20016:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
   20018:	4804      	ldr	r0, [pc, #16]	; (2002c <am_util_stdio_printf+0x30>)
   2001a:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
   2001c:	4620      	mov	r0, r4
   2001e:	b003      	add	sp, #12
   20020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20024:	b004      	add	sp, #16
   20026:	4770      	bx	lr
   20028:	1000b290 	.word	0x1000b290
   2002c:	1000b294 	.word	0x1000b294

00020030 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   20030:	4801      	ldr	r0, [pc, #4]	; (20038 <am_util_stdio_terminal_clear+0x8>)
   20032:	f7ff bfe3 	b.w	1fffc <am_util_stdio_printf>
   20036:	bf00      	nop
   20038:	000263c0 	.word	0x000263c0

0002003c <appDiscStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscStart(dmConnId_t connId)
{
   2003c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  appDbHdl_t  hdl;
  uint8_t     status;
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];

  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   20040:	4e30      	ldr	r6, [pc, #192]	; (20104 <appDiscStart+0xc8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   20042:	1e43      	subs	r3, r0, #1
  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   20044:	eb06 1403 	add.w	r4, r6, r3, lsl #4
   20048:	011f      	lsls	r7, r3, #4
   2004a:	7ae3      	ldrb	r3, [r4, #11]
{
   2004c:	b083      	sub	sp, #12
  if (pAppDiscCb->inProgress == APP_DISC_IDLE)
   2004e:	b113      	cbz	r3, 20056 <appDiscStart+0x1a>
      }

      appDiscCfgStart(connId, status);
    }
  }
}
   20050:	b003      	add	sp, #12
   20052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   20056:	4605      	mov	r5, r0
   20058:	f000 fbf0 	bl	2083c <AppDbGetHdl>
   2005c:	4680      	mov	r8, r0
   2005e:	b178      	cbz	r0, 20080 <appDiscStart+0x44>
      status = AppDbGetDiscStatus(hdl);
   20060:	f7f4 fa48 	bl	144f4 <AppDbGetDiscStatus>
   20064:	4604      	mov	r4, r0
    if (status < APP_DISC_CMPL)
   20066:	2c03      	cmp	r4, #3
   20068:	d80d      	bhi.n	20086 <appDiscStart+0x4a>
      if ((!pAppDiscCb->alreadySecure) || (pAppDiscCb->alreadySecure && !AppCheckBonded(connId)))
   2006a:	443e      	add	r6, r7
   2006c:	7b33      	ldrb	r3, [r6, #12]
   2006e:	bb7b      	cbnz	r3, 200d0 <appDiscStart+0x94>
        (*appDiscCback)(connId, APP_DISC_READ_DATABASE_HASH);
   20070:	4b25      	ldr	r3, [pc, #148]	; (20108 <appDiscStart+0xcc>)
   20072:	2101      	movs	r1, #1
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   20074:	681b      	ldr	r3, [r3, #0]
   20076:	4628      	mov	r0, r5
}
   20078:	b003      	add	sp, #12
   2007a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   2007e:	4718      	bx	r3
      status = pAppDiscCb->cmplStatus;
   20080:	7a64      	ldrb	r4, [r4, #9]
    if (status < APP_DISC_CMPL)
   20082:	2c03      	cmp	r4, #3
   20084:	d9f1      	bls.n	2006a <appDiscStart+0x2e>
    else if (status != APP_DISC_FAILED)
   20086:	2c05      	cmp	r4, #5
   20088:	d0e2      	beq.n	20050 <appDiscStart+0x14>
      if (hdl != APP_DB_HDL_NONE && pAppDiscCb->pHdlList != NULL)
   2008a:	f1b8 0f00 	cmp.w	r8, #0
   2008e:	d014      	beq.n	200ba <appDiscStart+0x7e>
   20090:	eb06 0907 	add.w	r9, r6, r7
   20094:	f8d9 3004 	ldr.w	r3, [r9, #4]
   20098:	b17b      	cbz	r3, 200ba <appDiscStart+0x7e>
        if (AppDbIsCacheCheckedByHash(hdl))
   2009a:	4640      	mov	r0, r8
   2009c:	f7f4 fa22 	bl	144e4 <AppDbIsCacheCheckedByHash>
   200a0:	bb08      	cbnz	r0, 200e6 <appDiscStart+0xaa>
          memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl), (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   200a2:	4640      	mov	r0, r8
   200a4:	f8d9 8004 	ldr.w	r8, [r9, #4]
   200a8:	f7f4 fa2c 	bl	14504 <AppDbGetHdlList>
   200ac:	f899 200a 	ldrb.w	r2, [r9, #10]
   200b0:	4601      	mov	r1, r0
   200b2:	0052      	lsls	r2, r2, #1
   200b4:	4640      	mov	r0, r8
   200b6:	f7ec f823 	bl	c100 <memcpy>
  if (status < APP_DISC_CFG_CMPL)
   200ba:	2c07      	cmp	r4, #7
   200bc:	d910      	bls.n	200e0 <appDiscStart+0xa4>
  else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   200be:	2c08      	cmp	r4, #8
   200c0:	d1c6      	bne.n	20050 <appDiscStart+0x14>
   200c2:	443e      	add	r6, r7
   200c4:	7a33      	ldrb	r3, [r6, #8]
   200c6:	2b00      	cmp	r3, #0
   200c8:	d1c2      	bne.n	20050 <appDiscStart+0x14>
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   200ca:	4b0f      	ldr	r3, [pc, #60]	; (20108 <appDiscStart+0xcc>)
   200cc:	2107      	movs	r1, #7
   200ce:	e7d1      	b.n	20074 <appDiscStart+0x38>
      if ((!pAppDiscCb->alreadySecure) || (pAppDiscCb->alreadySecure && !AppCheckBonded(connId)))
   200d0:	4628      	mov	r0, r5
   200d2:	f000 fb2b 	bl	2072c <AppCheckBonded>
   200d6:	2800      	cmp	r0, #0
   200d8:	d0ca      	beq.n	20070 <appDiscStart+0x34>
        (*appDiscCback)(connId, APP_DISC_START);
   200da:	4b0b      	ldr	r3, [pc, #44]	; (20108 <appDiscStart+0xcc>)
   200dc:	2103      	movs	r1, #3
   200de:	e7c9      	b.n	20074 <appDiscStart+0x38>
    (*appDiscCback)(connId, APP_DISC_CFG_START);
   200e0:	4b09      	ldr	r3, [pc, #36]	; (20108 <appDiscStart+0xcc>)
   200e2:	2106      	movs	r1, #6
   200e4:	e7c6      	b.n	20074 <appDiscStart+0x38>
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   200e6:	4b09      	ldr	r3, [pc, #36]	; (2010c <appDiscStart+0xd0>)
   200e8:	2200      	movs	r2, #0
          pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   200ea:	2103      	movs	r1, #3
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   200ec:	e9cd 3200 	strd	r3, r2, [sp]
   200f0:	4628      	mov	r0, r5
          pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   200f2:	f889 100b 	strb.w	r1, [r9, #11]
          AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   200f6:	2302      	movs	r3, #2
   200f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   200fc:	2101      	movs	r1, #1
   200fe:	f7f5 fd5f 	bl	15bc0 <AttcReadByTypeReq>
          return;
   20102:	e7a5      	b.n	20050 <appDiscStart+0x14>
   20104:	1000b394 	.word	0x1000b394
   20108:	1000b3c4 	.word	0x1000b3c4
   2010c:	000259bc 	.word	0x000259bc

00020110 <appDiscRestartDiscovery>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appDiscRestartDiscovery(dmConnId_t connId)
{
   20110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   20114:	1e45      	subs	r5, r0, #1
  appDbHdl_t  dbHdl;

  /* otherwise initialize discovery and configuration status */
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   20116:	012d      	lsls	r5, r5, #4
   20118:	4c19      	ldr	r4, [pc, #100]	; (20180 <appDiscRestartDiscovery+0x70>)
   2011a:	f105 0308 	add.w	r3, r5, #8
   2011e:	2700      	movs	r7, #0
   20120:	52e7      	strh	r7, [r4, r3]
  pAppDiscCb->cmplStatus = APP_DISC_INIT;
  pAppDiscCb->secRequired = FALSE;
   20122:	4423      	add	r3, r4
  pAppDiscCb->scPending = FALSE;

  /* initialize handle list */
  if (pAppDiscCb->pHdlList != NULL)
   20124:	eb04 0805 	add.w	r8, r4, r5
  pAppDiscCb->secRequired = FALSE;
   20128:	f8a3 7005 	strh.w	r7, [r3, #5]
{
   2012c:	4606      	mov	r6, r0
  if (pAppDiscCb->pHdlList != NULL)
   2012e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   20132:	b190      	cbz	r0, 2015a <appDiscRestartDiscovery+0x4a>
  {
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   20134:	f898 200a 	ldrb.w	r2, [r8, #10]
   20138:	4639      	mov	r1, r7
   2013a:	0052      	lsls	r2, r2, #1
   2013c:	f001 f81a 	bl	21174 <memset>

    /* clear stored discovery status and handle list */
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   20140:	4630      	mov	r0, r6
   20142:	f000 fb7b 	bl	2083c <AppDbGetHdl>
   20146:	4681      	mov	r9, r0
   20148:	b138      	cbz	r0, 2015a <appDiscRestartDiscovery+0x4a>
    {
      AppDbSetDiscStatus(dbHdl, APP_DISC_INIT);
   2014a:	4639      	mov	r1, r7
   2014c:	f7f4 f9d6 	bl	144fc <AppDbSetDiscStatus>
      AppDbSetHdlList(dbHdl, pAppDiscCb->pHdlList);
   20150:	f8d8 1004 	ldr.w	r1, [r8, #4]
   20154:	4648      	mov	r0, r9
   20156:	f7f4 f9d7 	bl	14508 <AppDbSetHdlList>
    }
  }

  /* if configuration in progress */
  if (pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS)
   2015a:	442c      	add	r4, r5
   2015c:	7ae3      	ldrb	r3, [r4, #11]
   2015e:	2b02      	cmp	r3, #2
   20160:	d00a      	beq.n	20178 <appDiscRestartDiscovery+0x68>
  {
    /* if not waiting for security or connection is already secure, then
    * initiate discovery now; otherwise discovery will be initiated after
    * security is done
    */
    if (!pAppDiscCfg->waitForSec || pAppDiscCb->alreadySecure)
   20162:	4b08      	ldr	r3, [pc, #32]	; (20184 <appDiscRestartDiscovery+0x74>)
   20164:	681b      	ldr	r3, [r3, #0]
   20166:	781b      	ldrb	r3, [r3, #0]
   20168:	b10b      	cbz	r3, 2016e <appDiscRestartDiscovery+0x5e>
   2016a:	7b23      	ldrb	r3, [r4, #12]
   2016c:	b133      	cbz	r3, 2017c <appDiscRestartDiscovery+0x6c>
    {
      appDiscStart(connId);
   2016e:	4630      	mov	r0, r6
    }
  }
}
   20170:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      appDiscStart(connId);
   20174:	f7ff bf62 	b.w	2003c <appDiscStart>
    pAppDiscCb->scPending = TRUE;
   20178:	2301      	movs	r3, #1
   2017a:	73a3      	strb	r3, [r4, #14]
}
   2017c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20180:	1000b394 	.word	0x1000b394
   20184:	1000b438 	.word	0x1000b438

00020188 <AppDiscProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcDmMsg(dmEvt_t *pMsg)
{
   20188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(pMsg->hdr.event)
   2018c:	7883      	ldrb	r3, [r0, #2]
   2018e:	3b27      	subs	r3, #39	; 0x27
{
   20190:	b082      	sub	sp, #8
   20192:	4604      	mov	r4, r0
  switch(pMsg->hdr.event)
   20194:	2b05      	cmp	r3, #5
   20196:	d818      	bhi.n	201ca <AppDiscProcDmMsg+0x42>
   20198:	e8df f003 	tbb	[pc, r3]
   2019c:	59170337 	.word	0x59170337
   201a0:	1a9b      	.short	0x1a9b
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   201a2:	7800      	ldrb	r0, [r0, #0]
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   201a4:	4d62      	ldr	r5, [pc, #392]	; (20330 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   201a6:	1e43      	subs	r3, r0, #1
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   201a8:	eb05 1203 	add.w	r2, r5, r3, lsl #4
   201ac:	2600      	movs	r6, #0
   201ae:	72d6      	strb	r6, [r2, #11]
   201b0:	011c      	lsls	r4, r3, #4
  if ((hdl = AppDbGetHdl((dmConnId_t) pMsg->hdr.param)) != APP_DB_HDL_NONE)
   201b2:	f000 fb43 	bl	2083c <AppDbGetHdl>
   201b6:	b110      	cbz	r0, 201be <AppDiscProcDmMsg+0x36>
    AppDbSetDiscStatus(hdl, APP_DISC_INIT);
   201b8:	4631      	mov	r1, r6
   201ba:	f7f4 f99f 	bl	144fc <AppDbSetDiscStatus>
  if (pAppDiscCb->pDiscCb != NULL)
   201be:	5928      	ldr	r0, [r5, r4]
   201c0:	b118      	cbz	r0, 201ca <AppDiscProcDmMsg+0x42>
    WsfBufFree(pAppDiscCb->pDiscCb);
   201c2:	f7f7 fd3d 	bl	17c40 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   201c6:	2300      	movs	r3, #0
   201c8:	512b      	str	r3, [r5, r4]
      break;

    default:
      break;
  }
}
   201ca:	b002      	add	sp, #8
   201cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pMsg->encryptInd.usingLtk)
   201d0:	7903      	ldrb	r3, [r0, #4]
   201d2:	2b00      	cmp	r3, #0
   201d4:	d0f9      	beq.n	201ca <AppDiscProcDmMsg+0x42>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   201d6:	7800      	ldrb	r0, [r0, #0]
    if (pAppDiscCb->alreadySecure)
   201d8:	4d55      	ldr	r5, [pc, #340]	; (20330 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   201da:	1e43      	subs	r3, r0, #1
    if (pAppDiscCb->alreadySecure)
   201dc:	eb05 1203 	add.w	r2, r5, r3, lsl #4
   201e0:	011c      	lsls	r4, r3, #4
   201e2:	7b13      	ldrb	r3, [r2, #12]
   201e4:	2b00      	cmp	r3, #0
   201e6:	d1f0      	bne.n	201ca <AppDiscProcDmMsg+0x42>
    if (pAppDiscCfg->waitForSec)
   201e8:	4b52      	ldr	r3, [pc, #328]	; (20334 <AppDiscProcDmMsg+0x1ac>)
   201ea:	681b      	ldr	r3, [r3, #0]
   201ec:	781b      	ldrb	r3, [r3, #0]
   201ee:	2b00      	cmp	r3, #0
   201f0:	f040 8093 	bne.w	2031a <AppDiscProcDmMsg+0x192>
    else if (pAppDiscCb->secRequired)
   201f4:	7b51      	ldrb	r1, [r2, #13]
   201f6:	b121      	cbz	r1, 20202 <AppDiscProcDmMsg+0x7a>
      if (pAppDiscCb->pDiscCb != NULL)
   201f8:	5929      	ldr	r1, [r5, r4]
      pAppDiscCb->secRequired = FALSE;
   201fa:	7353      	strb	r3, [r2, #13]
      if (pAppDiscCb->pDiscCb != NULL)
   201fc:	b109      	cbz	r1, 20202 <AppDiscProcDmMsg+0x7a>
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   201fe:	f7f4 fd5f 	bl	14cc0 <AttcDiscConfigResume>
    pAppDiscCb->alreadySecure = TRUE;
   20202:	4425      	add	r5, r4
   20204:	2301      	movs	r3, #1
   20206:	732b      	strb	r3, [r5, #12]
}
   20208:	e7df      	b.n	201ca <AppDiscProcDmMsg+0x42>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   2020a:	7800      	ldrb	r0, [r0, #0]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   2020c:	4b48      	ldr	r3, [pc, #288]	; (20330 <AppDiscProcDmMsg+0x1a8>)
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   2020e:	4e4a      	ldr	r6, [pc, #296]	; (20338 <AppDiscProcDmMsg+0x1b0>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   20210:	1e45      	subs	r5, r0, #1
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   20212:	012d      	lsls	r5, r5, #4
   20214:	f105 0208 	add.w	r2, r5, #8
  pAppDiscCb->alreadySecure = FALSE;
   20218:	1899      	adds	r1, r3, r2
  pAppDiscCb->scPending = FALSE;
   2021a:	441d      	add	r5, r3
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   2021c:	6837      	ldr	r7, [r6, #0]
  pAppDiscCb->connCfgStatus = APP_DISC_INIT;
   2021e:	2600      	movs	r6, #0
   20220:	529e      	strh	r6, [r3, r2]
  pAppDiscCb->alreadySecure = FALSE;
   20222:	808e      	strh	r6, [r1, #4]
  pAppDiscCb->scPending = FALSE;
   20224:	73ae      	strb	r6, [r5, #14]
  (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_INIT);
   20226:	4631      	mov	r1, r6
   20228:	47b8      	blx	r7
  if (pAppDiscCb->pHdlList != NULL)
   2022a:	6868      	ldr	r0, [r5, #4]
   2022c:	b120      	cbz	r0, 20238 <AppDiscProcDmMsg+0xb0>
    memset(pAppDiscCb->pHdlList, 0, (pAppDiscCb->hdlListLen * sizeof(uint16_t)));
   2022e:	7aaa      	ldrb	r2, [r5, #10]
   20230:	4631      	mov	r1, r6
   20232:	0052      	lsls	r2, r2, #1
   20234:	f000 ff9e 	bl	21174 <memset>
  if (!pAppDiscCfg->waitForSec)
   20238:	4b3e      	ldr	r3, [pc, #248]	; (20334 <AppDiscProcDmMsg+0x1ac>)
   2023a:	681b      	ldr	r3, [r3, #0]
   2023c:	781b      	ldrb	r3, [r3, #0]
   2023e:	2b00      	cmp	r3, #0
   20240:	d1c3      	bne.n	201ca <AppDiscProcDmMsg+0x42>
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   20242:	7820      	ldrb	r0, [r4, #0]
}
   20244:	b002      	add	sp, #8
   20246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   2024a:	f7ff bef7 	b.w	2003c <appDiscStart>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   2024e:	7800      	ldrb	r0, [r0, #0]
  if (pAppDiscCb->alreadySecure)
   20250:	4d37      	ldr	r5, [pc, #220]	; (20330 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t) pMsg->hdr.param - 1];
   20252:	1e43      	subs	r3, r0, #1
  if (pAppDiscCb->alreadySecure)
   20254:	011e      	lsls	r6, r3, #4
   20256:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   2025a:	f893 800c 	ldrb.w	r8, [r3, #12]
   2025e:	f1b8 0f00 	cmp.w	r8, #0
   20262:	d1b2      	bne.n	201ca <AppDiscProcDmMsg+0x42>
  if (((hdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE) &&
   20264:	f000 faea 	bl	2083c <AppDbGetHdl>
   20268:	4607      	mov	r7, r0
   2026a:	b180      	cbz	r0, 2028e <AppDiscProcDmMsg+0x106>
      AppCheckBonded((dmConnId_t) pMsg->hdr.param) &&
   2026c:	7820      	ldrb	r0, [r4, #0]
   2026e:	f000 fa5d 	bl	2072c <AppCheckBonded>
  if (((hdl = AppDbGetHdl((dmConnId_t)pMsg->hdr.param)) != APP_DB_HDL_NONE) &&
   20272:	b160      	cbz	r0, 2028e <AppDiscProcDmMsg+0x106>
      AppDbIsCacheCheckedByHash(hdl))
   20274:	4638      	mov	r0, r7
   20276:	f7f4 f935 	bl	144e4 <AppDbIsCacheCheckedByHash>
      AppCheckBonded((dmConnId_t) pMsg->hdr.param) &&
   2027a:	b140      	cbz	r0, 2028e <AppDiscProcDmMsg+0x106>
    AppDbSetCacheByHash(appConnCb[pMsg->hdr.param - 1].dbHdl, FALSE);
   2027c:	4b2f      	ldr	r3, [pc, #188]	; (2033c <AppDiscProcDmMsg+0x1b4>)
   2027e:	8822      	ldrh	r2, [r4, #0]
   20280:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   20284:	4641      	mov	r1, r8
   20286:	f853 0c20 	ldr.w	r0, [r3, #-32]
   2028a:	f7f4 f92f 	bl	144ec <AppDbSetCacheByHash>
  if (AppCheckBonded((dmConnId_t) pMsg->hdr.param) && (pAppDiscCb->cmplStatus != APP_DISC_INIT))
   2028e:	7820      	ldrb	r0, [r4, #0]
   20290:	f000 fa4c 	bl	2072c <AppCheckBonded>
   20294:	2800      	cmp	r0, #0
   20296:	d037      	beq.n	20308 <AppDiscProcDmMsg+0x180>
   20298:	eb05 0806 	add.w	r8, r5, r6
   2029c:	f898 1009 	ldrb.w	r1, [r8, #9]
   202a0:	b391      	cbz	r1, 20308 <AppDiscProcDmMsg+0x180>
    if (hdl != APP_DB_HDL_NONE)
   202a2:	b147      	cbz	r7, 202b6 <AppDiscProcDmMsg+0x12e>
      AppDbSetDiscStatus(hdl, pAppDiscCb->cmplStatus);
   202a4:	4638      	mov	r0, r7
   202a6:	f7f4 f929 	bl	144fc <AppDbSetDiscStatus>
      if (pAppDiscCb->cmplStatus == APP_DISC_CMPL || pAppDiscCb->cmplStatus == APP_DISC_CFG_CMPL)
   202aa:	f898 3009 	ldrb.w	r3, [r8, #9]
   202ae:	2b04      	cmp	r3, #4
   202b0:	d036      	beq.n	20320 <AppDiscProcDmMsg+0x198>
   202b2:	2b08      	cmp	r3, #8
   202b4:	d034      	beq.n	20320 <AppDiscProcDmMsg+0x198>
    if (pAppDiscCb->secRequired)
   202b6:	19ab      	adds	r3, r5, r6
   202b8:	7b5a      	ldrb	r2, [r3, #13]
   202ba:	b132      	cbz	r2, 202ca <AppDiscProcDmMsg+0x142>
      if (pAppDiscCb->pDiscCb != NULL)
   202bc:	59a9      	ldr	r1, [r5, r6]
      pAppDiscCb->secRequired = FALSE;
   202be:	2200      	movs	r2, #0
   202c0:	735a      	strb	r2, [r3, #13]
      if (pAppDiscCb->pDiscCb != NULL)
   202c2:	b111      	cbz	r1, 202ca <AppDiscProcDmMsg+0x142>
        AttcDiscConfigResume((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   202c4:	7820      	ldrb	r0, [r4, #0]
   202c6:	f7f4 fcfb 	bl	14cc0 <AttcDiscConfigResume>
  pAppDiscCb->alreadySecure = TRUE;
   202ca:	4435      	add	r5, r6
   202cc:	2301      	movs	r3, #1
   202ce:	732b      	strb	r3, [r5, #12]
   202d0:	e77b      	b.n	201ca <AppDiscProcDmMsg+0x42>
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   202d2:	7800      	ldrb	r0, [r0, #0]
  if (pAppDiscCb->alreadySecure)
   202d4:	4916      	ldr	r1, [pc, #88]	; (20330 <AppDiscProcDmMsg+0x1a8>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   202d6:	1e43      	subs	r3, r0, #1
  if (pAppDiscCb->alreadySecure)
   202d8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   202dc:	7b0b      	ldrb	r3, [r1, #12]
   202de:	2b00      	cmp	r3, #0
   202e0:	f47f af73 	bne.w	201ca <AppDiscProcDmMsg+0x42>
  if (pAppDiscCfg->readDbHash)
   202e4:	4a13      	ldr	r2, [pc, #76]	; (20334 <AppDiscProcDmMsg+0x1ac>)
   202e6:	6812      	ldr	r2, [r2, #0]
   202e8:	7852      	ldrb	r2, [r2, #1]
   202ea:	2a00      	cmp	r2, #0
   202ec:	f43f af6d 	beq.w	201ca <AppDiscProcDmMsg+0x42>
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   202f0:	4a13      	ldr	r2, [pc, #76]	; (20340 <AppDiscProcDmMsg+0x1b8>)
    pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   202f2:	2403      	movs	r4, #3
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   202f4:	e9cd 2300 	strd	r2, r3, [sp]
    pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   202f8:	72cc      	strb	r4, [r1, #11]
    AttcReadByTypeReq((dmConnId_t) pMsg->hdr.param, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   202fa:	2302      	movs	r3, #2
   202fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20300:	2101      	movs	r1, #1
   20302:	f7f5 fc5d 	bl	15bc0 <AttcReadByTypeReq>
   20306:	e760      	b.n	201ca <AppDiscProcDmMsg+0x42>
  if (pAppDiscCfg->waitForSec)
   20308:	4b0a      	ldr	r3, [pc, #40]	; (20334 <AppDiscProcDmMsg+0x1ac>)
   2030a:	681b      	ldr	r3, [r3, #0]
   2030c:	781b      	ldrb	r3, [r3, #0]
   2030e:	2b00      	cmp	r3, #0
   20310:	d0db      	beq.n	202ca <AppDiscProcDmMsg+0x142>
    appDiscStart((dmConnId_t) pMsg->hdr.param);
   20312:	7820      	ldrb	r0, [r4, #0]
   20314:	f7ff fe92 	bl	2003c <appDiscStart>
   20318:	e7d7      	b.n	202ca <AppDiscProcDmMsg+0x142>
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   2031a:	f7ff fe8f 	bl	2003c <appDiscStart>
   2031e:	e770      	b.n	20202 <AppDiscProcDmMsg+0x7a>
        if (pAppDiscCb->pHdlList != NULL)
   20320:	19ab      	adds	r3, r5, r6
   20322:	6859      	ldr	r1, [r3, #4]
   20324:	2900      	cmp	r1, #0
   20326:	d0c6      	beq.n	202b6 <AppDiscProcDmMsg+0x12e>
          AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   20328:	4638      	mov	r0, r7
   2032a:	f7f4 f8ed 	bl	14508 <AppDbSetHdlList>
   2032e:	e7c2      	b.n	202b6 <AppDiscProcDmMsg+0x12e>
   20330:	1000b394 	.word	0x1000b394
   20334:	1000b438 	.word	0x1000b438
   20338:	1000b3c4 	.word	0x1000b3c4
   2033c:	1000b3d0 	.word	0x1000b3d0
   20340:	000259bc 	.word	0x000259bc

00020344 <AppDiscProcAttMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscProcAttMsg(attEvt_t *pMsg)
{
   20344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20348:	4604      	mov	r4, r0
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   2034a:	7800      	ldrb	r0, [r0, #0]
  uint8_t status;

  /* Check status */
  if (pMsg->hdr.status == ATT_ERR_DATABASE_OUT_OF_SYNC)
   2034c:	78e3      	ldrb	r3, [r4, #3]
   2034e:	2b12      	cmp	r3, #18
{
   20350:	b082      	sub	sp, #8
  appDiscCb_t *pAppDiscCb = &appDiscCb[(dmConnId_t)pMsg->hdr.param - 1];
   20352:	f100 35ff 	add.w	r5, r0, #4294967295
  if (pMsg->hdr.status == ATT_ERR_DATABASE_OUT_OF_SYNC)
   20356:	d032      	beq.n	203be <AppDiscProcAttMsg+0x7a>
  {
    /* Restart discovery as cached handle list is out of sync with server's database. */
    appDiscRestartDiscovery((dmConnId_t)pMsg->hdr.param);
  }

  if (pAppDiscCb->inProgress == APP_DISC_READ_DBH_IN_PROGRESS)
   20358:	4e6e      	ldr	r6, [pc, #440]	; (20514 <AppDiscProcAttMsg+0x1d0>)
   2035a:	012f      	lsls	r7, r5, #4
   2035c:	eb06 1505 	add.w	r5, r6, r5, lsl #4
   20360:	7ae9      	ldrb	r1, [r5, #11]
   20362:	2903      	cmp	r1, #3
   20364:	d01c      	beq.n	203a0 <AppDiscProcAttMsg+0x5c>
          appDiscCfgStart(connId, status);
        }
      }
    }
  }
  else if (pAppDiscCb->inProgress == APP_DISC_SVC_DISC_IN_PROGRESS)
   20366:	2901      	cmp	r1, #1
   20368:	d004      	beq.n	20374 <AppDiscProcAttMsg+0x30>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
      }
    }
  }
  /* characteristic configuration */
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   2036a:	2902      	cmp	r1, #2
   2036c:	d031      	beq.n	203d2 <AppDiscProcAttMsg+0x8e>
        /* notify application of config success */
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
      }
    }
  }
}
   2036e:	b002      	add	sp, #8
   20370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pMsg->hdr.event == ATTC_FIND_BY_TYPE_VALUE_RSP)
   20374:	78a3      	ldrb	r3, [r4, #2]
   20376:	2b03      	cmp	r3, #3
   20378:	d049      	beq.n	2040e <AppDiscProcAttMsg+0xca>
    else if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP ||
   2037a:	2b04      	cmp	r3, #4
   2037c:	d001      	beq.n	20382 <AppDiscProcAttMsg+0x3e>
   2037e:	2b02      	cmp	r3, #2
   20380:	d1f5      	bne.n	2036e <AppDiscProcAttMsg+0x2a>
      status = AttcDiscCharCmpl(pAppDiscCb->pDiscCb, pMsg);
   20382:	4621      	mov	r1, r4
   20384:	59f0      	ldr	r0, [r6, r7]
   20386:	f7f4 fa81 	bl	1488c <AttcDiscCharCmpl>
   2038a:	4605      	mov	r5, r0
      APP_TRACE_INFO1("AttcDiscCharCmpl status 0x%02x", status);
   2038c:	4629      	mov	r1, r5
   2038e:	4862      	ldr	r0, [pc, #392]	; (20518 <AppDiscProcAttMsg+0x1d4>)
   20390:	f7f8 f806 	bl	183a0 <WsfTrace>
      if (status == ATT_SUCCESS)
   20394:	b9b5      	cbnz	r5, 203c4 <AppDiscProcAttMsg+0x80>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CMPL);
   20396:	4b61      	ldr	r3, [pc, #388]	; (2051c <AppDiscProcAttMsg+0x1d8>)
   20398:	7820      	ldrb	r0, [r4, #0]
   2039a:	681b      	ldr	r3, [r3, #0]
   2039c:	2104      	movs	r1, #4
   2039e:	e00a      	b.n	203b6 <AppDiscProcAttMsg+0x72>
    if (pMsg->hdr.event == ATTC_READ_BY_TYPE_RSP)
   203a0:	78a3      	ldrb	r3, [r4, #2]
   203a2:	2b04      	cmp	r3, #4
   203a4:	d1e3      	bne.n	2036e <AppDiscProcAttMsg+0x2a>
      if (pMsg->hdr.status != ATT_SUCCESS)
   203a6:	78e3      	ldrb	r3, [r4, #3]
      dmConnId_t connId = (dmConnId_t)pMsg->hdr.param;
   203a8:	f894 8000 	ldrb.w	r8, [r4]
      if (pMsg->hdr.status != ATT_SUCCESS)
   203ac:	2b00      	cmp	r3, #0
   203ae:	d04d      	beq.n	2044c <AppDiscProcAttMsg+0x108>
        (*appDiscCback)(connId, APP_DISC_START);
   203b0:	4b5a      	ldr	r3, [pc, #360]	; (2051c <AppDiscProcAttMsg+0x1d8>)
   203b2:	681b      	ldr	r3, [r3, #0]
   203b4:	4640      	mov	r0, r8
}
   203b6:	b002      	add	sp, #8
   203b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   203bc:	4718      	bx	r3
    appDiscRestartDiscovery((dmConnId_t)pMsg->hdr.param);
   203be:	f7ff fea7 	bl	20110 <appDiscRestartDiscovery>
   203c2:	e7c9      	b.n	20358 <AppDiscProcAttMsg+0x14>
      else if (status != ATT_CONTINUING)
   203c4:	2d78      	cmp	r5, #120	; 0x78
   203c6:	d0d2      	beq.n	2036e <AppDiscProcAttMsg+0x2a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_FAILED);
   203c8:	4b54      	ldr	r3, [pc, #336]	; (2051c <AppDiscProcAttMsg+0x1d8>)
   203ca:	7820      	ldrb	r0, [r4, #0]
   203cc:	681b      	ldr	r3, [r3, #0]
   203ce:	2105      	movs	r1, #5
   203d0:	e7f1      	b.n	203b6 <AppDiscProcAttMsg+0x72>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   203d2:	78a3      	ldrb	r3, [r4, #2]
  else if ((pAppDiscCb->inProgress == APP_DISC_CFG_IN_PROGRESS) &&
   203d4:	2b05      	cmp	r3, #5
   203d6:	d001      	beq.n	203dc <AppDiscProcAttMsg+0x98>
           (pMsg->hdr.event == ATTC_READ_RSP || pMsg->hdr.event == ATTC_WRITE_RSP))
   203d8:	2b09      	cmp	r3, #9
   203da:	d1c8      	bne.n	2036e <AppDiscProcAttMsg+0x2a>
    if (pAppDiscCb->scPending)
   203dc:	19f3      	adds	r3, r6, r7
   203de:	7b9a      	ldrb	r2, [r3, #14]
   203e0:	2a00      	cmp	r2, #0
   203e2:	d151      	bne.n	20488 <AppDiscProcAttMsg+0x144>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   203e4:	78e3      	ldrb	r3, [r4, #3]
   203e6:	2b05      	cmp	r3, #5
   203e8:	d023      	beq.n	20432 <AppDiscProcAttMsg+0xee>
   203ea:	2b0f      	cmp	r3, #15
   203ec:	d021      	beq.n	20432 <AppDiscProcAttMsg+0xee>
      status = AttcDiscConfigCmpl((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   203ee:	59f1      	ldr	r1, [r6, r7]
   203f0:	7820      	ldrb	r0, [r4, #0]
   203f2:	f7f4 fc39 	bl	14c68 <AttcDiscConfigCmpl>
   203f6:	4605      	mov	r5, r0
      APP_TRACE_INFO1("AttcDiscConfigCmpl status 0x%02x", status);
   203f8:	4629      	mov	r1, r5
   203fa:	4849      	ldr	r0, [pc, #292]	; (20520 <AppDiscProcAttMsg+0x1dc>)
   203fc:	f7f7 ffd0 	bl	183a0 <WsfTrace>
      if (status != ATT_CONTINUING)
   20400:	2d78      	cmp	r5, #120	; 0x78
   20402:	d0b4      	beq.n	2036e <AppDiscProcAttMsg+0x2a>
        (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_CFG_CMPL);
   20404:	4b45      	ldr	r3, [pc, #276]	; (2051c <AppDiscProcAttMsg+0x1d8>)
   20406:	7820      	ldrb	r0, [r4, #0]
   20408:	681b      	ldr	r3, [r3, #0]
   2040a:	2108      	movs	r1, #8
   2040c:	e7d3      	b.n	203b6 <AppDiscProcAttMsg+0x72>
      status = AttcDiscServiceCmpl(pAppDiscCb->pDiscCb, pMsg);
   2040e:	4621      	mov	r1, r4
   20410:	59f0      	ldr	r0, [r6, r7]
   20412:	f7f4 f9fd 	bl	14810 <AttcDiscServiceCmpl>
   20416:	4605      	mov	r5, r0
      APP_TRACE_INFO1("AttcDiscServiceCmpl status 0x%02x", status);
   20418:	4601      	mov	r1, r0
   2041a:	4842      	ldr	r0, [pc, #264]	; (20524 <AppDiscProcAttMsg+0x1e0>)
   2041c:	f7f7 ffc0 	bl	183a0 <WsfTrace>
      if (status == ATT_SUCCESS)
   20420:	2d00      	cmp	r5, #0
   20422:	d1cf      	bne.n	203c4 <AppDiscProcAttMsg+0x80>
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   20424:	59f1      	ldr	r1, [r6, r7]
   20426:	7820      	ldrb	r0, [r4, #0]
}
   20428:	b002      	add	sp, #8
   2042a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        AttcDiscCharStart((dmConnId_t) pMsg->hdr.param, pAppDiscCb->pDiscCb);
   2042e:	f7f4 ba19 	b.w	14864 <AttcDiscCharStart>
             (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   20432:	7820      	ldrb	r0, [r4, #0]
   20434:	f7fb feaa 	bl	1c18c <DmConnSecLevel>
    else if ((pMsg->hdr.status == ATT_ERR_AUTH || pMsg->hdr.status == ATT_ERR_ENC) &&
   20438:	2800      	cmp	r0, #0
   2043a:	d1d8      	bne.n	203ee <AppDiscProcAttMsg+0xaa>
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   2043c:	4b37      	ldr	r3, [pc, #220]	; (2051c <AppDiscProcAttMsg+0x1d8>)
   2043e:	7820      	ldrb	r0, [r4, #0]
   20440:	681b      	ldr	r3, [r3, #0]
      pAppDiscCb->secRequired = TRUE;
   20442:	443e      	add	r6, r7
   20444:	2201      	movs	r2, #1
   20446:	7372      	strb	r2, [r6, #13]
      (*appDiscCback)((dmConnId_t) pMsg->hdr.param, APP_DISC_SEC_REQUIRED);
   20448:	2102      	movs	r1, #2
   2044a:	e7b4      	b.n	203b6 <AppDiscProcAttMsg+0x72>
        pAppDiscCb->inProgress = APP_DISC_IDLE;
   2044c:	72eb      	strb	r3, [r5, #11]
        if ((hdl = AppDbGetHdl(connId)) == APP_DB_HDL_NONE)
   2044e:	4640      	mov	r0, r8
   20450:	f000 f9f4 	bl	2083c <AppDbGetHdl>
   20454:	4605      	mov	r5, r0
   20456:	2800      	cmp	r0, #0
   20458:	d043      	beq.n	204e2 <AppDiscProcAttMsg+0x19e>
        if (memcmp(AppDbGetPeerDbHash(hdl), pMsg->pValue + 3, ATT_DATABASE_HASH_LEN))
   2045a:	4628      	mov	r0, r5
   2045c:	f7f4 f832 	bl	144c4 <AppDbGetPeerDbHash>
   20460:	6861      	ldr	r1, [r4, #4]
   20462:	2210      	movs	r2, #16
   20464:	3103      	adds	r1, #3
   20466:	9101      	str	r1, [sp, #4]
   20468:	f000 fe52 	bl	21110 <memcmp>
   2046c:	b1a8      	cbz	r0, 2049a <AppDiscProcAttMsg+0x156>
          AppDbSetPeerDbHash(hdl, pMsg->pValue + 3);
   2046e:	9901      	ldr	r1, [sp, #4]
   20470:	4628      	mov	r0, r5
   20472:	f7f4 f829 	bl	144c8 <AppDbSetPeerDbHash>
          AppDbSetCacheByHash(hdl, TRUE);
   20476:	2101      	movs	r1, #1
   20478:	4628      	mov	r0, r5
   2047a:	f7f4 f837 	bl	144ec <AppDbSetCacheByHash>
          (*appDiscCback)(connId, APP_DISC_START);
   2047e:	4b27      	ldr	r3, [pc, #156]	; (2051c <AppDiscProcAttMsg+0x1d8>)
   20480:	2103      	movs	r1, #3
   20482:	681b      	ldr	r3, [r3, #0]
   20484:	4640      	mov	r0, r8
   20486:	e796      	b.n	203b6 <AppDiscProcAttMsg+0x72>
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   20488:	7820      	ldrb	r0, [r4, #0]
      pAppDiscCb->scPending = FALSE;
   2048a:	2200      	movs	r2, #0
   2048c:	739a      	strb	r2, [r3, #14]
      pAppDiscCb->inProgress = APP_DISC_IDLE;
   2048e:	72da      	strb	r2, [r3, #11]
}
   20490:	b002      	add	sp, #8
   20492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      appDiscStart((dmConnId_t) pMsg->hdr.param);
   20496:	f7ff bdd1 	b.w	2003c <appDiscStart>
          memcpy(pAppDiscCb->pHdlList, AppDbGetHdlList(hdl),
   2049a:	4437      	add	r7, r6
   2049c:	4628      	mov	r0, r5
   2049e:	687c      	ldr	r4, [r7, #4]
   204a0:	f7f4 f830 	bl	14504 <AppDbGetHdlList>
   204a4:	7aba      	ldrb	r2, [r7, #10]
   204a6:	4601      	mov	r1, r0
   204a8:	0052      	lsls	r2, r2, #1
   204aa:	4620      	mov	r0, r4
   204ac:	f7eb fe28 	bl	c100 <memcpy>
          status = AppDbGetDiscStatus(hdl);
   204b0:	4628      	mov	r0, r5
   204b2:	f7f4 f81f 	bl	144f4 <AppDbGetDiscStatus>
  if (status < APP_DISC_CFG_CMPL)
   204b6:	2807      	cmp	r0, #7
   204b8:	d804      	bhi.n	204c4 <AppDiscProcAttMsg+0x180>
    (*appDiscCback)(connId, APP_DISC_CFG_START);
   204ba:	4b18      	ldr	r3, [pc, #96]	; (2051c <AppDiscProcAttMsg+0x1d8>)
   204bc:	2106      	movs	r1, #6
   204be:	681b      	ldr	r3, [r3, #0]
   204c0:	4640      	mov	r0, r8
   204c2:	e778      	b.n	203b6 <AppDiscProcAttMsg+0x72>
  else if (status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_INIT)
   204c4:	2808      	cmp	r0, #8
   204c6:	f47f af52 	bne.w	2036e <AppDiscProcAttMsg+0x2a>
   204ca:	eb06 1608 	add.w	r6, r6, r8, lsl #4
   204ce:	f816 3c08 	ldrb.w	r3, [r6, #-8]
   204d2:	2b00      	cmp	r3, #0
   204d4:	f47f af4b 	bne.w	2036e <AppDiscProcAttMsg+0x2a>
    (*appDiscCback)(connId, APP_DISC_CFG_CONN_START);
   204d8:	4b10      	ldr	r3, [pc, #64]	; (2051c <AppDiscProcAttMsg+0x1d8>)
   204da:	2107      	movs	r1, #7
   204dc:	681b      	ldr	r3, [r3, #0]
   204de:	4640      	mov	r0, r8
   204e0:	e769      	b.n	203b6 <AppDiscProcAttMsg+0x72>
          hdl = appConnCb[connId - 1].dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId),
   204e2:	4640      	mov	r0, r8
   204e4:	f7fb fe16 	bl	1c114 <DmConnPeerAddrType>
   204e8:	4605      	mov	r5, r0
   204ea:	4640      	mov	r0, r8
   204ec:	f7fb fe1c 	bl	1c128 <DmConnPeerAddr>
   204f0:	9001      	str	r0, [sp, #4]
                                                             (DmConnRole(connId)==DM_ROLE_MASTER)?TRUE:FALSE);
   204f2:	4640      	mov	r0, r8
   204f4:	f7fb fe96 	bl	1c224 <DmConnRole>
          hdl = appConnCb[connId - 1].dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId),
   204f8:	fab0 f280 	clz	r2, r0
   204fc:	9901      	ldr	r1, [sp, #4]
   204fe:	4628      	mov	r0, r5
   20500:	0952      	lsrs	r2, r2, #5
   20502:	f7f3 fe73 	bl	141ec <AppDbNewRecord>
   20506:	4b08      	ldr	r3, [pc, #32]	; (20528 <AppDiscProcAttMsg+0x1e4>)
   20508:	eb03 1348 	add.w	r3, r3, r8, lsl #5
   2050c:	4605      	mov	r5, r0
   2050e:	f843 0c20 	str.w	r0, [r3, #-32]
   20512:	e7a2      	b.n	2045a <AppDiscProcAttMsg+0x116>
   20514:	1000b394 	.word	0x1000b394
   20518:	000263f8 	.word	0x000263f8
   2051c:	1000b3c4 	.word	0x1000b3c4
   20520:	00026418 	.word	0x00026418
   20524:	000263d4 	.word	0x000263d4
   20528:	1000b3d0 	.word	0x1000b3d0

0002052c <AppDiscInit>:
{
  uint8_t i;

  for (i = 0; i < DM_CONN_MAX; i++)
  {
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   2052c:	4b04      	ldr	r3, [pc, #16]	; (20540 <AppDiscInit+0x14>)
   2052e:	2200      	movs	r2, #0
   20530:	72da      	strb	r2, [r3, #11]
    appDiscCb[i].pDiscCb = NULL;
   20532:	601a      	str	r2, [r3, #0]
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   20534:	76da      	strb	r2, [r3, #27]
    appDiscCb[i].pDiscCb = NULL;
   20536:	611a      	str	r2, [r3, #16]
    appDiscCb[i].inProgress = APP_DISC_IDLE;
   20538:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    appDiscCb[i].pDiscCb = NULL;
   2053c:	621a      	str	r2, [r3, #32]
  }
}
   2053e:	4770      	bx	lr
   20540:	1000b394 	.word	0x1000b394

00020544 <AppDiscRegister>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscRegister(appDiscCback_t cback)
{
  appDiscCback = cback;
   20544:	4b01      	ldr	r3, [pc, #4]	; (2054c <AppDiscRegister+0x8>)
   20546:	6018      	str	r0, [r3, #0]
}
   20548:	4770      	bx	lr
   2054a:	bf00      	nop
   2054c:	1000b3c4 	.word	0x1000b3c4

00020550 <AppDiscSetHdlList>:
/*************************************************************************************************/
void AppDiscSetHdlList(dmConnId_t connId, uint8_t hdlListLen, uint16_t *pHdlList)
{
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];

  pAppDiscCb->hdlListLen = hdlListLen;
   20550:	4b03      	ldr	r3, [pc, #12]	; (20560 <AppDiscSetHdlList+0x10>)
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   20552:	3801      	subs	r0, #1
  pAppDiscCb->hdlListLen = hdlListLen;
   20554:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   20558:	7281      	strb	r1, [r0, #10]
  pAppDiscCb->pHdlList = pHdlList;
   2055a:	6042      	str	r2, [r0, #4]
}
   2055c:	4770      	bx	lr
   2055e:	bf00      	nop
   20560:	1000b394 	.word	0x1000b394

00020564 <AppDiscComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscComplete(dmConnId_t connId, uint8_t status)
{
   20564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
  appDbHdl_t hdl;

  /* set connection as idle */
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   20568:	2200      	movs	r2, #0
{
   2056a:	460c      	mov	r4, r1
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   2056c:	2108      	movs	r1, #8
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   2056e:	f100 38ff 	add.w	r8, r0, #4294967295
{
   20572:	4605      	mov	r5, r0
  DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_IDLE);
   20574:	f7fb fe14 	bl	1c1a0 <DmConnSetIdle>

  /* store status if not doing connection setup configuration */
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   20578:	2c08      	cmp	r4, #8
   2057a:	4e26      	ldr	r6, [pc, #152]	; (20614 <AppDiscComplete+0xb0>)
   2057c:	ea4f 1708 	mov.w	r7, r8, lsl #4
   20580:	d02a      	beq.n	205d8 <AppDiscComplete+0x74>
  {
    pAppDiscCb->cmplStatus = status;
   20582:	19f3      	adds	r3, r6, r7
   20584:	725c      	strb	r4, [r3, #9]
  }

  /* initialize control block */
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   20586:	19f3      	adds	r3, r6, r7
  if (pAppDiscCb->pDiscCb != NULL)
   20588:	59f0      	ldr	r0, [r6, r7]
  pAppDiscCb->inProgress = APP_DISC_IDLE;
   2058a:	f04f 0800 	mov.w	r8, #0
   2058e:	f883 800b 	strb.w	r8, [r3, #11]
  if (pAppDiscCb->pDiscCb != NULL)
   20592:	b118      	cbz	r0, 2059c <AppDiscComplete+0x38>
  {
    WsfBufFree(pAppDiscCb->pDiscCb);
   20594:	f7f7 fb54 	bl	17c40 <WsfBufFree>
    pAppDiscCb->pDiscCb = NULL;
   20598:	f846 8007 	str.w	r8, [r6, r7]
  }

  if ((hdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   2059c:	4628      	mov	r0, r5
   2059e:	f000 f94d 	bl	2083c <AppDbGetHdl>
   205a2:	4680      	mov	r8, r0
   205a4:	b178      	cbz	r0, 205c6 <AppDiscComplete+0x62>
  {
    /* Don't store configuration complete if not bonded - it must be re-done on reconnection. */
    uint8_t discComplete = AppCheckBonded(connId) ? APP_DISC_CFG_CMPL : APP_DISC_CMPL;
   205a6:	4628      	mov	r0, r5
   205a8:	f000 f8c0 	bl	2072c <AppCheckBonded>
   205ac:	2800      	cmp	r0, #0
   205ae:	bf14      	ite	ne
   205b0:	2308      	movne	r3, #8
   205b2:	2304      	moveq	r3, #4

    /* store discovery status if not doing connection setup configuration */
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START) && (status <= discComplete))
   205b4:	2c08      	cmp	r4, #8
   205b6:	d016      	beq.n	205e6 <AppDiscComplete+0x82>
   205b8:	42a3      	cmp	r3, r4
   205ba:	d226      	bcs.n	2060a <AppDiscComplete+0xa6>
    {
      AppDbSetDiscStatus(hdl, status);
    }

    if (pAppDiscCb->pHdlList != NULL)
   205bc:	19f3      	adds	r3, r6, r7
   205be:	6859      	ldr	r1, [r3, #4]
   205c0:	b109      	cbz	r1, 205c6 <AppDiscComplete+0x62>
    {
      /* if discovery complete store handles */
      if (status == APP_DISC_CMPL)
   205c2:	2c04      	cmp	r4, #4
   205c4:	d01d      	beq.n	20602 <AppDiscComplete+0x9e>
  }

  /* set connection setup configuration status as complete if either discovery-initiated
   * configuration is complete or connection setup configuration is complete
   */
  if (status == APP_DISC_CFG_CMPL)
   205c6:	2c08      	cmp	r4, #8
   205c8:	d011      	beq.n	205ee <AppDiscComplete+0x8a>
  {
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
  }

  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   205ca:	4622      	mov	r2, r4
   205cc:	4629      	mov	r1, r5
   205ce:	4812      	ldr	r0, [pc, #72]	; (20618 <AppDiscComplete+0xb4>)
}
   205d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   205d4:	f7f7 bee4 	b.w	183a0 <WsfTrace>
  if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START))
   205d8:	eb06 1808 	add.w	r8, r6, r8, lsl #4
   205dc:	f898 3008 	ldrb.w	r3, [r8, #8]
   205e0:	2b07      	cmp	r3, #7
   205e2:	d1ce      	bne.n	20582 <AppDiscComplete+0x1e>
   205e4:	e7cf      	b.n	20586 <AppDiscComplete+0x22>
    if (!(status == APP_DISC_CFG_CMPL && pAppDiscCb->connCfgStatus == APP_DISC_CFG_CONN_START) && (status <= discComplete))
   205e6:	19f2      	adds	r2, r6, r7
   205e8:	7a12      	ldrb	r2, [r2, #8]
   205ea:	2a07      	cmp	r2, #7
   205ec:	d1e4      	bne.n	205b8 <AppDiscComplete+0x54>
    pAppDiscCb->connCfgStatus = APP_DISC_CFG_CMPL;
   205ee:	443e      	add	r6, r7
   205f0:	2308      	movs	r3, #8
   205f2:	7233      	strb	r3, [r6, #8]
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   205f4:	4622      	mov	r2, r4
   205f6:	4629      	mov	r1, r5
   205f8:	4807      	ldr	r0, [pc, #28]	; (20618 <AppDiscComplete+0xb4>)
}
   205fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  APP_TRACE_INFO2("AppDiscComplete connId:%d status:0x%02x", connId, status);
   205fe:	f7f7 becf 	b.w	183a0 <WsfTrace>
        AppDbSetHdlList(hdl, pAppDiscCb->pHdlList);
   20602:	4640      	mov	r0, r8
   20604:	f7f3 ff80 	bl	14508 <AppDbSetHdlList>
  if (status == APP_DISC_CFG_CMPL)
   20608:	e7df      	b.n	205ca <AppDiscComplete+0x66>
      AppDbSetDiscStatus(hdl, status);
   2060a:	4621      	mov	r1, r4
   2060c:	4640      	mov	r0, r8
   2060e:	f7f3 ff75 	bl	144fc <AppDbSetDiscStatus>
   20612:	e7d3      	b.n	205bc <AppDiscComplete+0x58>
   20614:	1000b394 	.word	0x1000b394
   20618:	0002643c 	.word	0x0002643c

0002061c <AppDiscFindService>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscFindService(dmConnId_t connId, uint8_t uuidLen, uint8_t *pUuid, uint8_t listLen,
                        attcDiscChar_t **pCharList, uint16_t *pHdlList)
{
   2061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   20620:	1e44      	subs	r4, r0, #1

  if (pAppDiscCb->pDiscCb == NULL)
   20622:	4e15      	ldr	r6, [pc, #84]	; (20678 <AppDiscFindService+0x5c>)
   20624:	0124      	lsls	r4, r4, #4
{
   20626:	b081      	sub	sp, #4
   20628:	4698      	mov	r8, r3
  if (pAppDiscCb->pDiscCb == NULL)
   2062a:	5933      	ldr	r3, [r6, r4]
{
   2062c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   20630:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   20634:	4605      	mov	r5, r0
   20636:	460f      	mov	r7, r1
   20638:	4693      	mov	fp, r2
  if (pAppDiscCb->pDiscCb == NULL)
   2063a:	b1a3      	cbz	r3, 20666 <AppDiscFindService+0x4a>
  }

  if (pAppDiscCb->pDiscCb != NULL)
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   2063c:	4628      	mov	r0, r5
   2063e:	2201      	movs	r2, #1
   20640:	2108      	movs	r1, #8
   20642:	f7fb fdad 	bl	1c1a0 <DmConnSetIdle>

    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;

    pAppDiscCb->pDiscCb->pCharList = pCharList;
   20646:	5931      	ldr	r1, [r6, r4]
    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   20648:	4434      	add	r4, r6
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
    pAppDiscCb->pDiscCb->charListLen = listLen;
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   2064a:	4628      	mov	r0, r5
   2064c:	465b      	mov	r3, fp
    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   2064e:	2501      	movs	r5, #1
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   20650:	463a      	mov	r2, r7
    pAppDiscCb->inProgress = APP_DISC_SVC_DISC_IN_PROGRESS;
   20652:	72e5      	strb	r5, [r4, #11]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
   20654:	e9c1 9a00 	strd	r9, sl, [r1]
    pAppDiscCb->pDiscCb->charListLen = listLen;
   20658:	f881 800c 	strb.w	r8, [r1, #12]
  }
}
   2065c:	b001      	add	sp, #4
   2065e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AttcDiscService(connId, pAppDiscCb->pDiscCb, uuidLen, pUuid);
   20662:	f7f4 b8c5 	b.w	147f0 <AttcDiscService>
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   20666:	2014      	movs	r0, #20
   20668:	f7f7 faba 	bl	17be0 <WsfBufAlloc>
   2066c:	5130      	str	r0, [r6, r4]
  if (pAppDiscCb->pDiscCb != NULL)
   2066e:	2800      	cmp	r0, #0
   20670:	d1e4      	bne.n	2063c <AppDiscFindService+0x20>
}
   20672:	b001      	add	sp, #4
   20674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20678:	1000b394 	.word	0x1000b394

0002067c <AppDiscConfigure>:
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscConfigure(dmConnId_t connId, uint8_t status, uint8_t cfgListLen,
                      attcDiscCfg_t *pCfgList, uint8_t hdlListLen, uint16_t *pHdlList)
{
   2067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];
   20680:	1e44      	subs	r4, r0, #1
  uint8_t ret;

  if (pAppDiscCb->pDiscCb == NULL)
   20682:	4f1b      	ldr	r7, [pc, #108]	; (206f0 <AppDiscConfigure+0x74>)
   20684:	0124      	lsls	r4, r4, #4
{
   20686:	b081      	sub	sp, #4
   20688:	4699      	mov	r9, r3
  if (pAppDiscCb->pDiscCb == NULL)
   2068a:	593b      	ldr	r3, [r7, r4]
{
   2068c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   20690:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   20694:	4605      	mov	r5, r0
   20696:	460e      	mov	r6, r1
   20698:	4690      	mov	r8, r2
  if (pAppDiscCb->pDiscCb == NULL)
   2069a:	b1f3      	cbz	r3, 206da <AppDiscConfigure+0x5e>
  }

  if (pAppDiscCb->pDiscCb != NULL)
  {
    /* set connection as busy */
    DmConnSetIdle(connId, DM_IDLE_APP_DISC, DM_CONN_BUSY);
   2069c:	2201      	movs	r2, #1
   2069e:	2108      	movs	r1, #8
   206a0:	4628      	mov	r0, r5
   206a2:	f7fb fd7d 	bl	1c1a0 <DmConnSetIdle>

    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   206a6:	193b      	adds	r3, r7, r4
   206a8:	2202      	movs	r2, #2

    if (status == APP_DISC_CFG_CONN_START)
   206aa:	2e07      	cmp	r6, #7
    pAppDiscCb->inProgress = APP_DISC_CFG_IN_PROGRESS;
   206ac:	72da      	strb	r2, [r3, #11]
    if (status == APP_DISC_CFG_CONN_START)
   206ae:	d01d      	beq.n	206ec <AppDiscConfigure+0x70>
    {
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
    }

    /* start configuration */
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   206b0:	5939      	ldr	r1, [r7, r4]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   206b2:	4628      	mov	r0, r5
    pAppDiscCb->pDiscCb->pCfgList = pCfgList;
   206b4:	f8c1 9008 	str.w	r9, [r1, #8]
    pAppDiscCb->pDiscCb->cfgListLen = cfgListLen;
   206b8:	f881 800d 	strb.w	r8, [r1, #13]
    pAppDiscCb->pDiscCb->pHdlList = pHdlList;
   206bc:	f8c1 b004 	str.w	fp, [r1, #4]
    pAppDiscCb->pDiscCb->charListLen = hdlListLen;
   206c0:	f881 a00c 	strb.w	sl, [r1, #12]
    ret = AttcDiscConfigStart(connId, pAppDiscCb->pDiscCb);
   206c4:	f7f4 faac 	bl	14c20 <AttcDiscConfigStart>

    /* nothing to configure; configuration complete */
    if (ret == ATT_SUCCESS)
   206c8:	b968      	cbnz	r0, 206e6 <AppDiscConfigure+0x6a>
    {
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   206ca:	4b0a      	ldr	r3, [pc, #40]	; (206f4 <AppDiscConfigure+0x78>)
   206cc:	681b      	ldr	r3, [r3, #0]
   206ce:	2108      	movs	r1, #8
   206d0:	4628      	mov	r0, r5
    }
  }
}
   206d2:	b001      	add	sp, #4
   206d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      (*appDiscCback)(connId, APP_DISC_CFG_CMPL);
   206d8:	4718      	bx	r3
    pAppDiscCb->pDiscCb = WsfBufAlloc(sizeof(attcDiscCb_t));
   206da:	2014      	movs	r0, #20
   206dc:	f7f7 fa80 	bl	17be0 <WsfBufAlloc>
   206e0:	5138      	str	r0, [r7, r4]
  if (pAppDiscCb->pDiscCb != NULL)
   206e2:	2800      	cmp	r0, #0
   206e4:	d1da      	bne.n	2069c <AppDiscConfigure+0x20>
}
   206e6:	b001      	add	sp, #4
   206e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pAppDiscCb->connCfgStatus = APP_DISC_CFG_CONN_START;
   206ec:	721e      	strb	r6, [r3, #8]
   206ee:	e7df      	b.n	206b0 <AppDiscConfigure+0x34>
   206f0:	1000b394 	.word	0x1000b394
   206f4:	1000b3c4 	.word	0x1000b3c4

000206f8 <AppDiscReadDatabaseHash>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDiscReadDatabaseHash(dmConnId_t connId)
{
   206f8:	b500      	push	{lr}
  appDiscCb_t *pAppDiscCb = &appDiscCb[connId - 1];

  /* Security/bonding not used, rely on database hash for cached handles. */
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   206fa:	490a      	ldr	r1, [pc, #40]	; (20724 <AppDiscReadDatabaseHash+0x2c>)

  /* Read the database hash. */
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   206fc:	4a0a      	ldr	r2, [pc, #40]	; (20728 <AppDiscReadDatabaseHash+0x30>)
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   206fe:	eb01 1100 	add.w	r1, r1, r0, lsl #4
{
   20702:	b083      	sub	sp, #12
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   20704:	f04f 0c03 	mov.w	ip, #3
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   20708:	2300      	movs	r3, #0
   2070a:	e9cd 2300 	strd	r2, r3, [sp]
  pAppDiscCb->inProgress = APP_DISC_READ_DBH_IN_PROGRESS;
   2070e:	f801 cc05 	strb.w	ip, [r1, #-5]
  AttcReadByTypeReq(connId, ATT_HANDLE_START, ATT_HANDLE_MAX, ATT_16_UUID_LEN,
   20712:	2302      	movs	r3, #2
   20714:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20718:	2101      	movs	r1, #1
   2071a:	f7f5 fa51 	bl	15bc0 <AttcReadByTypeReq>
                    (uint8_t *)attGattDbhChUuid, FALSE);
}
   2071e:	b003      	add	sp, #12
   20720:	f85d fb04 	ldr.w	pc, [sp], #4
   20724:	1000b394 	.word	0x1000b394
   20728:	000259bc 	.word	0x000259bc

0002072c <AppCheckBonded>:
/*************************************************************************************************/
bool_t AppCheckBonded(dmConnId_t connId)
{
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));

  return appConnCb[connId - 1].bonded;
   2072c:	4b02      	ldr	r3, [pc, #8]	; (20738 <AppCheckBonded+0xc>)
   2072e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
}
   20732:	f810 0c1b 	ldrb.w	r0, [r0, #-27]
   20736:	4770      	bx	lr
   20738:	1000b3d0 	.word	0x1000b3d0

0002073c <AppHandlerInit>:
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
  appHandlerId = handlerId;
   2073c:	4b01      	ldr	r3, [pc, #4]	; (20744 <AppHandlerInit+0x8>)
   2073e:	7018      	strb	r0, [r3, #0]

  AppDbInit();
   20740:	f7f3 bd52 	b.w	141e8 <AppDbInit>
   20744:	1000b430 	.word	0x1000b430

00020748 <AppHandler>:
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
  if (pMsg != NULL)
   20748:	b1b1      	cbz	r1, 20778 <AppHandler+0x30>
{
   2074a:	b510      	push	{r4, lr}
   2074c:	460c      	mov	r4, r1
  {
    APP_TRACE_INFO1("App got evt %d", pMsg->event);
   2074e:	4813      	ldr	r0, [pc, #76]	; (2079c <AppHandler+0x54>)
   20750:	7889      	ldrb	r1, [r1, #2]
   20752:	f7f7 fe25 	bl	183a0 <WsfTrace>

    if (pMsg->event >= APP_MASTER_MSG_START)
   20756:	78a3      	ldrb	r3, [r4, #2]
   20758:	2b1f      	cmp	r3, #31
   2075a:	d905      	bls.n	20768 <AppHandler+0x20>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);
   2075c:	4b10      	ldr	r3, [pc, #64]	; (207a0 <AppHandler+0x58>)
   2075e:	4620      	mov	r0, r4
   20760:	685b      	ldr	r3, [r3, #4]
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   20762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*appCb.masterCback)(pMsg);
   20766:	4718      	bx	r3
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   20768:	2b0f      	cmp	r3, #15
   2076a:	d908      	bls.n	2077e <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);
   2076c:	4b0c      	ldr	r3, [pc, #48]	; (207a0 <AppHandler+0x58>)
   2076e:	4620      	mov	r0, r4
   20770:	681b      	ldr	r3, [r3, #0]
}
   20772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*appCb.slaveCback)(pMsg);
   20776:	4718      	bx	r3
    if (event & APP_BTN_DOWN_EVT)
   20778:	06c3      	lsls	r3, r0, #27
   2077a:	d404      	bmi.n	20786 <AppHandler+0x3e>
   2077c:	4770      	bx	lr
  switch(pMsg->event)
   2077e:	b14b      	cbz	r3, 20794 <AppHandler+0x4c>
   20780:	2b01      	cmp	r3, #1
   20782:	d002      	beq.n	2078a <AppHandler+0x42>
}
   20784:	bd10      	pop	{r4, pc}
      AppUiBtnPressed();
   20786:	f7f3 bfb5 	b.w	146f4 <AppUiBtnPressed>
      appUiTimerExpired(pMsg);
   2078a:	4620      	mov	r0, r4
}
   2078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      appUiTimerExpired(pMsg);
   20790:	f7f3 bfa6 	b.w	146e0 <appUiTimerExpired>
}
   20794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      appUiBtnPoll();
   20798:	f7f3 bfa4 	b.w	146e4 <appUiBtnPoll>
   2079c:	00026464 	.word	0x00026464
   207a0:	1000b3c8 	.word	0x1000b3c8

000207a4 <AppHandlePasskey>:
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];

  if (pAuthReq->display)
   207a4:	7943      	ldrb	r3, [r0, #5]
   207a6:	b30b      	cbz	r3, 207ec <AppHandlePasskey+0x48>
{
   207a8:	b510      	push	{r4, lr}
   207aa:	b082      	sub	sp, #8
   207ac:	4604      	mov	r4, r0
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   207ae:	2104      	movs	r1, #4
   207b0:	a801      	add	r0, sp, #4
   207b2:	f7fa fb9f 	bl	1aef4 <SecRand>
    passkey %= 1000000;
   207b6:	9a01      	ldr	r2, [sp, #4]
   207b8:	4b0e      	ldr	r3, [pc, #56]	; (207f4 <AppHandlePasskey+0x50>)
   207ba:	490f      	ldr	r1, [pc, #60]	; (207f8 <AppHandlePasskey+0x54>)
   207bc:	fba3 0302 	umull	r0, r3, r3, r2
   207c0:	0c9b      	lsrs	r3, r3, #18
   207c2:	fb01 2313 	mls	r3, r1, r3, r2

    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
    buf[1] = UINT32_TO_BYTE1(passkey);
   207c6:	0a19      	lsrs	r1, r3, #8
    buf[2] = UINT32_TO_BYTE2(passkey);

    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   207c8:	7820      	ldrb	r0, [r4, #0]
    buf[1] = UINT32_TO_BYTE1(passkey);
   207ca:	f88d 1001 	strb.w	r1, [sp, #1]
    buf[2] = UINT32_TO_BYTE2(passkey);
   207ce:	0c1c      	lsrs	r4, r3, #16
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   207d0:	466a      	mov	r2, sp
   207d2:	2103      	movs	r1, #3
    passkey %= 1000000;
   207d4:	9301      	str	r3, [sp, #4]
    buf[0] = UINT32_TO_BYTE0(passkey);
   207d6:	f88d 3000 	strb.w	r3, [sp]
    buf[2] = UINT32_TO_BYTE2(passkey);
   207da:	f88d 4002 	strb.w	r4, [sp, #2]
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   207de:	f7fc fe5f 	bl	1d4a0 <DmSecAuthRsp>

    /* display passkey */
    AppUiDisplayPasskey(passkey);
   207e2:	9801      	ldr	r0, [sp, #4]
   207e4:	f7f3 ff70 	bl	146c8 <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  }
}
   207e8:	b002      	add	sp, #8
   207ea:	bd10      	pop	{r4, pc}
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   207ec:	200e      	movs	r0, #14
   207ee:	f7f3 beb7 	b.w	14560 <AppUiAction>
   207f2:	bf00      	nop
   207f4:	431bde83 	.word	0x431bde83
   207f8:	000f4240 	.word	0x000f4240

000207fc <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   207fc:	b510      	push	{r4, lr}
   207fe:	4604      	mov	r4, r0
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   20800:	3004      	adds	r0, #4
   20802:	f7fc fef1 	bl	1d5e8 <DmSecGetCompareValue>

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   20806:	f7f3 ff65 	bl	146d4 <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   2080a:	7820      	ldrb	r0, [r4, #0]
   2080c:	2101      	movs	r1, #1
}
   2080e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   20812:	f7fc becd 	b.w	1d5b0 <DmSecCompareRsp>
   20816:	bf00      	nop

00020818 <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   20818:	4601      	mov	r1, r0
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   2081a:	2213      	movs	r2, #19
   2081c:	2003      	movs	r0, #3
   2081e:	f7fb bbb5 	b.w	1bf8c <DmConnClose>
   20822:	bf00      	nop

00020824 <AppConnIsOpen>:
  appConnCb_t   *pCcb = appConnCb;
  uint8_t       i;

  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   20824:	4b04      	ldr	r3, [pc, #16]	; (20838 <AppConnIsOpen+0x14>)
   20826:	7918      	ldrb	r0, [r3, #4]
   20828:	b920      	cbnz	r0, 20834 <AppConnIsOpen+0x10>
   2082a:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
   2082e:	b908      	cbnz	r0, 20834 <AppConnIsOpen+0x10>
   20830:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
      return pCcb->connId;
    }
  }

  return DM_CONN_ID_NONE;
}
   20834:	4770      	bx	lr
   20836:	bf00      	nop
   20838:	1000b3d0 	.word	0x1000b3d0

0002083c <AppDbGetHdl>:
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
  return appConnCb[connId-1].dbHdl;
   2083c:	4b02      	ldr	r3, [pc, #8]	; (20848 <AppDbGetHdl+0xc>)
   2083e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
}
   20842:	f850 0c20 	ldr.w	r0, [r0, #-32]
   20846:	4770      	bx	lr
   20848:	1000b3d0 	.word	0x1000b3d0

0002084c <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   2084c:	b570      	push	{r4, r5, r6, lr}
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   2084e:	4b12      	ldr	r3, [pc, #72]	; (20898 <AppAddDevToResList+0x4c>)
   20850:	eb03 1141 	add.w	r1, r3, r1, lsl #5
{
   20854:	b082      	sub	sp, #8
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   20856:	f851 5c20 	ldr.w	r5, [r1, #-32]
{
   2085a:	4604      	mov	r4, r0

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   2085c:	f7f1 fbee 	bl	1203c <HciLlPrivacySupported>
   20860:	b908      	cbnz	r0, 20866 <AppAddDevToResList+0x1a>
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   20862:	b002      	add	sp, #8
   20864:	bd70      	pop	{r4, r5, r6, pc}
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   20866:	4628      	mov	r0, r5
   20868:	2200      	movs	r2, #0
   2086a:	2104      	movs	r1, #4
   2086c:	f7f3 fd9c 	bl	143a8 <AppDbGetKey>
   20870:	4605      	mov	r5, r0
   20872:	2800      	cmp	r0, #0
   20874:	d0f5      	beq.n	20862 <AppAddDevToResList+0x16>
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   20876:	7d86      	ldrb	r6, [r0, #22]
   20878:	f7fc fe4e 	bl	1d518 <DmSecGetLocalIrk>
   2087c:	8821      	ldrh	r1, [r4, #0]
   2087e:	2201      	movs	r2, #1
   20880:	e9cd 2100 	strd	r2, r1, [sp]
   20884:	4603      	mov	r3, r0
   20886:	462a      	mov	r2, r5
   20888:	f105 0110 	add.w	r1, r5, #16
   2088c:	4630      	mov	r0, r6
   2088e:	f7fc f869 	bl	1c964 <DmPrivAddDevToResList>
}
   20892:	b002      	add	sp, #8
   20894:	bd70      	pop	{r4, r5, r6, pc}
   20896:	bf00      	nop
   20898:	1000b3d0 	.word	0x1000b3d0

0002089c <AppUpdatePrivacyMode>:
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   2089c:	b128      	cbz	r0, 208aa <AppUpdatePrivacyMode+0xe>
{
   2089e:	b538      	push	{r3, r4, r5, lr}
   208a0:	4604      	mov	r4, r0
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   208a2:	f7f3 fe4d 	bl	14540 <AppDbGetPeerAddedToRl>
   208a6:	b908      	cbnz	r0, 208ac <AppUpdatePrivacyMode+0x10>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
    }
  }
}
   208a8:	bd38      	pop	{r3, r4, r5, pc}
   208aa:	4770      	bx	lr
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   208ac:	4620      	mov	r0, r4
   208ae:	f7f3 fe4f 	bl	14550 <AppDbGetPeerRpao>
   208b2:	4605      	mov	r5, r0
   208b4:	2800      	cmp	r0, #0
   208b6:	d1f7      	bne.n	208a8 <AppUpdatePrivacyMode+0xc>
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   208b8:	4602      	mov	r2, r0
   208ba:	2104      	movs	r1, #4
   208bc:	4620      	mov	r0, r4
   208be:	f7f3 fd73 	bl	143a8 <AppDbGetKey>
    if (pPeerKey != NULL)
   208c2:	2800      	cmp	r0, #0
   208c4:	d0f0      	beq.n	208a8 <AppUpdatePrivacyMode+0xc>
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   208c6:	f100 0110 	add.w	r1, r0, #16
   208ca:	2201      	movs	r2, #1
   208cc:	7d80      	ldrb	r0, [r0, #22]
   208ce:	f7fc f879 	bl	1c9c4 <DmPrivSetPrivacyMode>
      AppDbSetPeerAddedToRl(hdl, FALSE);
   208d2:	4629      	mov	r1, r5
   208d4:	4620      	mov	r0, r4
}
   208d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      AppDbSetPeerAddedToRl(hdl, FALSE);
   208da:	f7f3 be35 	b.w	14548 <AppDbSetPeerAddedToRl>
   208de:	bf00      	nop

000208e0 <appMasterProcMsg>:
      break;

    default:
      break;
  }
}
   208e0:	4770      	bx	lr
   208e2:	bf00      	nop

000208e4 <appMasterInitiateSec>:
{
   208e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   208e6:	6813      	ldr	r3, [r2, #0]
{
   208e8:	b085      	sub	sp, #20
   208ea:	4614      	mov	r4, r2
   208ec:	4605      	mov	r5, r0
   208ee:	460e      	mov	r6, r1
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   208f0:	b18b      	cbz	r3, 20916 <appMasterInitiateSec+0x32>
      ((pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_PEER_LTK, &secLevel)) != NULL))
   208f2:	f10d 020f 	add.w	r2, sp, #15
   208f6:	4618      	mov	r0, r3
   208f8:	2102      	movs	r1, #2
   208fa:	f7f3 fd55 	bl	143a8 <AppDbGetKey>
  if ((pCb->dbHdl != APP_DB_HDL_NONE) &&
   208fe:	4602      	mov	r2, r0
   20900:	b148      	cbz	r0, 20916 <appMasterInitiateSec+0x32>
    pCb->bondByLtk = TRUE;
   20902:	2301      	movs	r3, #1
    DmSecEncryptReq(connId, secLevel, &pKey->ltk);
   20904:	f89d 100f 	ldrb.w	r1, [sp, #15]
    pCb->bondByLtk = TRUE;
   20908:	71a3      	strb	r3, [r4, #6]
    pCb->initiatingSec = TRUE;
   2090a:	7223      	strb	r3, [r4, #8]
    DmSecEncryptReq(connId, secLevel, &pKey->ltk);
   2090c:	4628      	mov	r0, r5
   2090e:	f7fc febd 	bl	1d68c <DmSecEncryptReq>
}
   20912:	b005      	add	sp, #20
   20914:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (initiatePairing)
   20916:	2e00      	cmp	r6, #0
   20918:	d0fb      	beq.n	20912 <appMasterInitiateSec+0x2e>
    pCb->bondByPairing = (pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   2091a:	4e17      	ldr	r6, [pc, #92]	; (20978 <appMasterInitiateSec+0x94>)
   2091c:	6832      	ldr	r2, [r6, #0]
   2091e:	7813      	ldrb	r3, [r2, #0]
   20920:	f003 0301 	and.w	r3, r3, #1
   20924:	71e3      	strb	r3, [r4, #7]
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   20926:	b10b      	cbz	r3, 2092c <appMasterInitiateSec+0x48>
   20928:	6823      	ldr	r3, [r4, #0]
   2092a:	b1b3      	cbz	r3, 2095a <appMasterInitiateSec+0x76>
    pCb->rcvdKeys = 0;
   2092c:	2300      	movs	r3, #0
   2092e:	72e3      	strb	r3, [r4, #11]
    if (DmConnPeerAddrType(connId) == DM_ADDR_RANDOM)
   20930:	4628      	mov	r0, r5
    rKeyDist = pAppSecCfg->rKeyDist;
   20932:	7897      	ldrb	r7, [r2, #2]
    if (DmConnPeerAddrType(connId) == DM_ADDR_RANDOM)
   20934:	f7fb fbee 	bl	1c114 <DmConnPeerAddrType>
    DmSecPairReq(connId, pAppSecCfg->oob, pAppSecCfg->auth, pAppSecCfg->iKeyDist, rKeyDist);
   20938:	6831      	ldr	r1, [r6, #0]
    if (DmConnPeerAddrType(connId) == DM_ADDR_RANDOM)
   2093a:	2801      	cmp	r0, #1
    pCb->initiatingSec = TRUE;
   2093c:	f04f 0301 	mov.w	r3, #1
   20940:	7223      	strb	r3, [r4, #8]
      rKeyDist |= DM_KEY_DIST_IRK;
   20942:	bf08      	it	eq
   20944:	f047 0702 	orreq.w	r7, r7, #2
    DmSecPairReq(connId, pAppSecCfg->oob, pAppSecCfg->auth, pAppSecCfg->iKeyDist, rKeyDist);
   20948:	784b      	ldrb	r3, [r1, #1]
   2094a:	780a      	ldrb	r2, [r1, #0]
   2094c:	78c9      	ldrb	r1, [r1, #3]
   2094e:	9700      	str	r7, [sp, #0]
   20950:	4628      	mov	r0, r5
   20952:	f7fc fe7d 	bl	1d650 <DmSecPairReq>
}
   20956:	b005      	add	sp, #20
   20958:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId), DmConnPeerAddr(connId), TRUE);
   2095a:	4628      	mov	r0, r5
   2095c:	f7fb fbda 	bl	1c114 <DmConnPeerAddrType>
   20960:	4607      	mov	r7, r0
   20962:	4628      	mov	r0, r5
   20964:	f7fb fbe0 	bl	1c128 <DmConnPeerAddr>
   20968:	2201      	movs	r2, #1
   2096a:	4601      	mov	r1, r0
   2096c:	4638      	mov	r0, r7
   2096e:	f7f3 fc3d 	bl	141ec <AppDbNewRecord>
    rKeyDist = pAppSecCfg->rKeyDist;
   20972:	6832      	ldr	r2, [r6, #0]
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(connId), DmConnPeerAddr(connId), TRUE);
   20974:	6020      	str	r0, [r4, #0]
   20976:	e7d9      	b.n	2092c <appMasterInitiateSec+0x48>
   20978:	1000b440 	.word	0x1000b440

0002097c <AppMasterInit>:
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterInit(void)
{
  appMasterCb.inProgress = FALSE;
   2097c:	4904      	ldr	r1, [pc, #16]	; (20990 <AppMasterInit+0x14>)

  /* initialize scan mode */
  appMasterCb.scanMode = APP_SCAN_MODE_NONE;

  /* set up callback from main */
  appCb.masterCback = appMasterProcMsg;
   2097e:	4b05      	ldr	r3, [pc, #20]	; (20994 <AppMasterInit+0x18>)
   20980:	4a05      	ldr	r2, [pc, #20]	; (20998 <AppMasterInit+0x1c>)
   20982:	605a      	str	r2, [r3, #4]
  appMasterCb.inProgress = FALSE;
   20984:	f44f 407f 	mov.w	r0, #65280	; 0xff00
   20988:	f8a1 009c 	strh.w	r0, [r1, #156]	; 0x9c
}
   2098c:	4770      	bx	lr
   2098e:	bf00      	nop
   20990:	1000b444 	.word	0x1000b444
   20994:	1000b3c8 	.word	0x1000b3c8
   20998:	000208e1 	.word	0x000208e1

0002099c <AppMasterProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterProcDmMsg(dmEvt_t *pMsg)
{
   2099c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  appConnCb_t *pCb = NULL;

  /* look up app connection control block from DM connection ID */
  if (pMsg->hdr.event == DM_CONN_OPEN_IND  ||
   209a0:	7883      	ldrb	r3, [r0, #2]
   209a2:	f1a3 0227 	sub.w	r2, r3, #39	; 0x27
   209a6:	2a01      	cmp	r2, #1
{
   209a8:	b085      	sub	sp, #20
   209aa:	4604      	mov	r4, r0
  if (pMsg->hdr.event == DM_CONN_OPEN_IND  ||
   209ac:	d903      	bls.n	209b6 <AppMasterProcDmMsg+0x1a>
      pMsg->hdr.event == DM_CONN_CLOSE_IND ||
   209ae:	2b40      	cmp	r3, #64	; 0x40
   209b0:	d001      	beq.n	209b6 <AppMasterProcDmMsg+0x1a>
  appConnCb_t *pCb = NULL;
   209b2:	2500      	movs	r5, #0
   209b4:	e004      	b.n	209c0 <AppMasterProcDmMsg+0x24>
      pMsg->hdr.event == DM_REM_CONN_PARAM_REQ_IND)
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   209b6:	8822      	ldrh	r2, [r4, #0]
   209b8:	4d94      	ldr	r5, [pc, #592]	; (20c0c <AppMasterProcDmMsg+0x270>)
   209ba:	3a01      	subs	r2, #1
   209bc:	eb05 1542 	add.w	r5, r5, r2, lsl #5
  }

  switch(pMsg->hdr.event)
   209c0:	3b20      	subs	r3, #32
   209c2:	2b2c      	cmp	r3, #44	; 0x2c
   209c4:	d833      	bhi.n	20a2e <AppMasterProcDmMsg+0x92>
   209c6:	e8df f003 	tbb	[pc, r3]
   209ca:	32b8      	.short	0x32b8
   209cc:	35173232 	.word	0x35173232
   209d0:	32797341 	.word	0x32797341
   209d4:	32323232 	.word	0x32323232
   209d8:	32323232 	.word	0x32323232
   209dc:	32323232 	.word	0x32323232
   209e0:	32328432 	.word	0x32328432
   209e4:	32323232 	.word	0x32323232
   209e8:	32aa3232 	.word	0x32aa3232
   209ec:	32323232 	.word	0x32323232
   209f0:	32323232 	.word	0x32323232
   209f4:	3517      	.short	0x3517
   209f6:	41          	.byte	0x41
   209f7:	00          	.byte	0x00
  if (pMsg->hdr.status == HCI_SUCCESS)
   209f8:	78e2      	ldrb	r2, [r4, #3]
   209fa:	b9c2      	cbnz	r2, 20a2e <AppMasterProcDmMsg+0x92>
  appMasterCb.numScanResults = 0;
   209fc:	4e84      	ldr	r6, [pc, #528]	; (20c10 <AppMasterProcDmMsg+0x274>)
    pDev->addrType = APP_ADDR_NONE;
   209fe:	23ff      	movs	r3, #255	; 0xff
  appMasterCb.numScanResults = 0;
   20a00:	f886 2096 	strb.w	r2, [r6, #150]	; 0x96
    pDev->addrType = APP_ADDR_NONE;
   20a04:	71b3      	strb	r3, [r6, #6]
   20a06:	7573      	strb	r3, [r6, #21]
   20a08:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
   20a0c:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
   20a10:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
   20a14:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
   20a18:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
   20a1c:	f886 306f 	strb.w	r3, [r6, #111]	; 0x6f
   20a20:	f886 307e 	strb.w	r3, [r6, #126]	; 0x7e
   20a24:	f886 308d 	strb.w	r3, [r6, #141]	; 0x8d
  appMasterCb.inProgress = FALSE;
   20a28:	2300      	movs	r3, #0
   20a2a:	f886 309c 	strb.w	r3, [r6, #156]	; 0x9c
      break;

    default:
      break;
  }
}
   20a2e:	b005      	add	sp, #20
   20a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (pMsg->hdr.status == HCI_SUCCESS)
   20a34:	78e3      	ldrb	r3, [r4, #3]
   20a36:	2b00      	cmp	r3, #0
   20a38:	d1f9      	bne.n	20a2e <AppMasterProcDmMsg+0x92>
 *  \return Number of stored scan results.
 */
/*************************************************************************************************/
uint8_t AppScanGetNumResults(void)
{
  return appMasterCb.numScanResults;
   20a3a:	4b75      	ldr	r3, [pc, #468]	; (20c10 <AppMasterProcDmMsg+0x274>)
    APP_TRACE_INFO1("Scan results: %d", AppScanGetNumResults());
   20a3c:	4875      	ldr	r0, [pc, #468]	; (20c14 <AppMasterProcDmMsg+0x278>)
   20a3e:	f893 1096 	ldrb.w	r1, [r3, #150]	; 0x96
}
   20a42:	b005      	add	sp, #20
   20a44:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    APP_TRACE_INFO1("Scan results: %d", AppScanGetNumResults());
   20a48:	f7f7 bcaa 	b.w	183a0 <WsfTrace>
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   20a4c:	4e70      	ldr	r6, [pc, #448]	; (20c10 <AppMasterProcDmMsg+0x274>)
            BdaCmp(pDev->addr, pMsg->extScanReport.addr))
   20a4e:	f104 0907 	add.w	r9, r4, #7
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   20a52:	4635      	mov	r5, r6
            BdaCmp(pDev->addr, pMsg->scanReport.addr))
   20a54:	f104 080c 	add.w	r8, r4, #12
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   20a58:	f106 0796 	add.w	r7, r6, #150	; 0x96
   20a5c:	e008      	b.n	20a70 <AppMasterProcDmMsg+0xd4>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   20a5e:	7ae2      	ldrb	r2, [r4, #11]
   20a60:	429a      	cmp	r2, r3
   20a62:	d071      	beq.n	20b48 <AppMasterProcDmMsg+0x1ac>
        else if (pDev->addrType == APP_ADDR_NONE)
   20a64:	2bff      	cmp	r3, #255	; 0xff
   20a66:	f000 80b6 	beq.w	20bd6 <AppMasterProcDmMsg+0x23a>
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   20a6a:	350f      	adds	r5, #15
   20a6c:	42bd      	cmp	r5, r7
   20a6e:	d0de      	beq.n	20a2e <AppMasterProcDmMsg+0x92>
    if(DmScanModeLeg())
   20a70:	f7fc fc4c 	bl	1d30c <DmScanModeLeg>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   20a74:	79ab      	ldrb	r3, [r5, #6]
    if(DmScanModeLeg())
   20a76:	2800      	cmp	r0, #0
   20a78:	d1f1      	bne.n	20a5e <AppMasterProcDmMsg+0xc2>
        if ((pDev->addrType == pMsg->extScanReport.addrType) &&
   20a7a:	79a2      	ldrb	r2, [r4, #6]
   20a7c:	429a      	cmp	r2, r3
   20a7e:	d06c      	beq.n	20b5a <AppMasterProcDmMsg+0x1be>
        else if (pDev->addrType == APP_ADDR_NONE)
   20a80:	2bff      	cmp	r3, #255	; 0xff
   20a82:	d1f2      	bne.n	20a6a <AppMasterProcDmMsg+0xce>
          pDev->addrType = pMsg->extScanReport.addrType;
   20a84:	79a3      	ldrb	r3, [r4, #6]
   20a86:	71ab      	strb	r3, [r5, #6]
          pDev->secPhy = pMsg->extScanReport.secPhy;
   20a88:	7ba3      	ldrb	r3, [r4, #14]
   20a8a:	73ab      	strb	r3, [r5, #14]
          BdaCpy(pDev->addr, pMsg->extScanReport.addr);
   20a8c:	1de1      	adds	r1, r4, #7
   20a8e:	4628      	mov	r0, r5
   20a90:	f7f2 fc46 	bl	13320 <BdaCpy>
          pDev->directAddrType = pMsg->extScanReport.directAddrType;
   20a94:	7d23      	ldrb	r3, [r4, #20]
          BdaCpy(pDev->directAddr, pMsg->extScanReport.directAddr);
   20a96:	f104 0115 	add.w	r1, r4, #21
          pDev->directAddrType = pMsg->extScanReport.directAddrType;
   20a9a:	71eb      	strb	r3, [r5, #7]
          BdaCpy(pDev->directAddr, pMsg->extScanReport.directAddr);
   20a9c:	f105 0008 	add.w	r0, r5, #8
   20aa0:	f7f2 fc3e 	bl	13320 <BdaCpy>
          appMasterCb.numScanResults++;
   20aa4:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   20aa8:	3301      	adds	r3, #1
   20aaa:	f886 3096 	strb.w	r3, [r6, #150]	; 0x96
          break;
   20aae:	e7be      	b.n	20a2e <AppMasterProcDmMsg+0x92>
  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   20ab0:	7820      	ldrb	r0, [r4, #0]
}
   20ab2:	b005      	add	sp, #20
   20ab4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DmReadRemoteFeatures((dmConnId_t) pMsg->hdr.param);
   20ab8:	f7fb ba80 	b.w	1bfbc <DmReadRemoteFeatures>
  AppUpdatePrivacyMode(pCb->dbHdl);
   20abc:	6828      	ldr	r0, [r5, #0]
   20abe:	f7ff feed 	bl	2089c <AppUpdatePrivacyMode>
  appMasterCb.inProgress = FALSE;
   20ac2:	4a53      	ldr	r2, [pc, #332]	; (20c10 <AppMasterProcDmMsg+0x274>)
  pCb->connId = DM_CONN_ID_NONE;
   20ac4:	2300      	movs	r3, #0
   20ac6:	712b      	strb	r3, [r5, #4]
  appMasterCb.inProgress = FALSE;
   20ac8:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
}
   20acc:	b005      	add	sp, #20
   20ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!appMasterCb.inProgress)
   20ad2:	4e4f      	ldr	r6, [pc, #316]	; (20c10 <AppMasterProcDmMsg+0x274>)
   20ad4:	f896 309c 	ldrb.w	r3, [r6, #156]	; 0x9c
   20ad8:	2b00      	cmp	r3, #0
   20ada:	d0a8      	beq.n	20a2e <AppMasterProcDmMsg+0x92>
  if (pMsg->hdr.status == HCI_SUCCESS)
   20adc:	78e3      	ldrb	r3, [r4, #3]
  pDev = &appMasterCb.scanResults[appMasterCb.idx];
   20ade:	f896 5097 	ldrb.w	r5, [r6, #151]	; 0x97
  if (pMsg->hdr.status == HCI_SUCCESS)
   20ae2:	2b00      	cmp	r3, #0
   20ae4:	d042      	beq.n	20b6c <AppMasterProcDmMsg+0x1d0>
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appMasterCb.dbHdl != APP_DB_HDL_NONE))
   20ae6:	2b05      	cmp	r3, #5
   20ae8:	d19e      	bne.n	20a28 <AppMasterProcDmMsg+0x8c>
   20aea:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
   20aee:	2800      	cmp	r0, #0
   20af0:	d09a      	beq.n	20a28 <AppMasterProcDmMsg+0x8c>
    appMasterCb.dbHdl = AppDbGetNextRecord(appMasterCb.dbHdl);
   20af2:	f7f3 fbb3 	bl	1425c <AppDbGetNextRecord>
   20af6:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
    if ((appMasterCb.dbHdl != APP_DB_HDL_NONE) &&
   20afa:	2800      	cmp	r0, #0
   20afc:	d094      	beq.n	20a28 <AppMasterProcDmMsg+0x8c>
        ((pPeerKey = AppDbGetKey(appMasterCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   20afe:	2200      	movs	r2, #0
   20b00:	2104      	movs	r1, #4
   20b02:	f7f3 fc51 	bl	143a8 <AppDbGetKey>
    if ((appMasterCb.dbHdl != APP_DB_HDL_NONE) &&
   20b06:	2800      	cmp	r0, #0
   20b08:	d08e      	beq.n	20a28 <AppMasterProcDmMsg+0x8c>
      DmPrivResolveAddr(pDev->addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   20b0a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
   20b0e:	4601      	mov	r1, r0
   20b10:	2200      	movs	r2, #0
   20b12:	1970      	adds	r0, r6, r5
}
   20b14:	b005      	add	sp, #20
   20b16:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      DmPrivResolveAddr(pDev->addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   20b1a:	f7fb bf03 	b.w	1c924 <DmPrivResolveAddr>
  if (pAppMasterReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   20b1e:	4b3e      	ldr	r3, [pc, #248]	; (20c18 <AppMasterProcDmMsg+0x27c>)
   20b20:	681b      	ldr	r3, [r3, #0]
   20b22:	781b      	ldrb	r3, [r3, #0]
   20b24:	2b00      	cmp	r3, #0
   20b26:	d03a      	beq.n	20b9e <AppMasterProcDmMsg+0x202>
  else if (pAppMasterReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   20b28:	2b01      	cmp	r3, #1
   20b2a:	d180      	bne.n	20a2e <AppMasterProcDmMsg+0x92>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   20b2c:	7928      	ldrb	r0, [r5, #4]
   20b2e:	2111      	movs	r1, #17
}
   20b30:	b005      	add	sp, #20
   20b32:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   20b36:	f7fb baab 	b.w	1c090 <DmRemoteConnParamReqNegReply>
      appMasterCb.scanMode = APP_SCAN_MODE_NONE;
   20b3a:	4b35      	ldr	r3, [pc, #212]	; (20c10 <AppMasterProcDmMsg+0x274>)
   20b3c:	22ff      	movs	r2, #255	; 0xff
   20b3e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
}
   20b42:	b005      	add	sp, #20
   20b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            BdaCmp(pDev->addr, pMsg->scanReport.addr))
   20b48:	4628      	mov	r0, r5
   20b4a:	4641      	mov	r1, r8
   20b4c:	f7f2 fbee 	bl	1332c <BdaCmp>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   20b50:	2800      	cmp	r0, #0
   20b52:	f47f af6c 	bne.w	20a2e <AppMasterProcDmMsg+0x92>
        else if (pDev->addrType == APP_ADDR_NONE)
   20b56:	79ab      	ldrb	r3, [r5, #6]
   20b58:	e784      	b.n	20a64 <AppMasterProcDmMsg+0xc8>
            BdaCmp(pDev->addr, pMsg->extScanReport.addr))
   20b5a:	4628      	mov	r0, r5
   20b5c:	4649      	mov	r1, r9
   20b5e:	f7f2 fbe5 	bl	1332c <BdaCmp>
        if ((pDev->addrType == pMsg->extScanReport.addrType) &&
   20b62:	2800      	cmp	r0, #0
   20b64:	f47f af63 	bne.w	20a2e <AppMasterProcDmMsg+0x92>
        else if (pDev->addrType == APP_ADDR_NONE)
   20b68:	79ab      	ldrb	r3, [r5, #6]
   20b6a:	e789      	b.n	20a80 <AppMasterProcDmMsg+0xe4>
    if ((pMsg->hdr.param == APP_RESOLVE_ADV_RPA) && DM_RAND_ADDR_RPA(pDev->directAddr, pDev->directAddrType))
   20b6c:	8823      	ldrh	r3, [r4, #0]
   20b6e:	bb83      	cbnz	r3, 20bd2 <AppMasterProcDmMsg+0x236>
   20b70:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
   20b74:	4433      	add	r3, r6
   20b76:	012c      	lsls	r4, r5, #4
   20b78:	79df      	ldrb	r7, [r3, #7]
   20b7a:	2f01      	cmp	r7, #1
   20b7c:	d036      	beq.n	20bec <AppMasterProcDmMsg+0x250>
    if(DmScanModeLeg())
   20b7e:	f7fc fbc5 	bl	1d30c <DmScanModeLeg>
   20b82:	b1c0      	cbz	r0, 20bb6 <AppMasterProcDmMsg+0x21a>
        AppConnOpen(pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   20b84:	1b64      	subs	r4, r4, r5
   20b86:	4434      	add	r4, r6
   20b88:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
        AppScanStop();
   20b8c:	f000 fa4a 	bl	21024 <AppScanStop>
        AppConnOpen(pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   20b90:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
   20b94:	79a0      	ldrb	r0, [r4, #6]
   20b96:	1971      	adds	r1, r6, r5
   20b98:	f000 fa5e 	bl	21058 <AppConnOpen>
   20b9c:	e744      	b.n	20a28 <AppMasterProcDmMsg+0x8c>
    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   20b9e:	f8d4 1006 	ldr.w	r1, [r4, #6]
   20ba2:	f8d4 200a 	ldr.w	r2, [r4, #10]
   20ba6:	9101      	str	r1, [sp, #4]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   20ba8:	7928      	ldrb	r0, [r5, #4]
   20baa:	a901      	add	r1, sp, #4
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   20bac:	e9cd 2302 	strd	r2, r3, [sp, #8]
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   20bb0:	f7fb fa50 	bl	1c054 <DmRemoteConnParamReqReply>
   20bb4:	e73b      	b.n	20a2e <AppMasterProcDmMsg+0x92>
        AppExtConnOpen(pDev->secPhy, pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   20bb6:	1b64      	subs	r4, r4, r5
   20bb8:	4434      	add	r4, r6
   20bba:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
        AppExtScanStop();
   20bbe:	f000 f9b3 	bl	20f28 <AppExtScanStop>
        AppExtConnOpen(pDev->secPhy, pDev->addrType, pDev->addr, appMasterCb.dbHdl);
   20bc2:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   20bc6:	79a1      	ldrb	r1, [r4, #6]
   20bc8:	7ba0      	ldrb	r0, [r4, #14]
   20bca:	1972      	adds	r2, r6, r5
   20bcc:	f000 f9ca 	bl	20f64 <AppExtConnOpen>
   20bd0:	e72a      	b.n	20a28 <AppMasterProcDmMsg+0x8c>
   20bd2:	012c      	lsls	r4, r5, #4
   20bd4:	e7d3      	b.n	20b7e <AppMasterProcDmMsg+0x1e2>
          pDev->addrType = pMsg->scanReport.addrType;
   20bd6:	7ae3      	ldrb	r3, [r4, #11]
   20bd8:	71ab      	strb	r3, [r5, #6]
          BdaCpy(pDev->addr, pMsg->scanReport.addr);
   20bda:	f104 010c 	add.w	r1, r4, #12
   20bde:	4628      	mov	r0, r5
   20be0:	f7f2 fb9e 	bl	13320 <BdaCpy>
          pDev->directAddrType = pMsg->scanReport.directAddrType;
   20be4:	7ca3      	ldrb	r3, [r4, #18]
          BdaCpy(pDev->directAddr, pMsg->scanReport.directAddr);
   20be6:	f104 0113 	add.w	r1, r4, #19
   20bea:	e756      	b.n	20a9a <AppMasterProcDmMsg+0xfe>
    if ((pMsg->hdr.param == APP_RESOLVE_ADV_RPA) && DM_RAND_ADDR_RPA(pDev->directAddr, pDev->directAddrType))
   20bec:	7b5b      	ldrb	r3, [r3, #13]
   20bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20bf2:	2b40      	cmp	r3, #64	; 0x40
   20bf4:	d1c3      	bne.n	20b7e <AppMasterProcDmMsg+0x1e2>
      DmPrivResolveAddr(pDev->directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   20bf6:	f7fc fc8f 	bl	1d518 <DmSecGetLocalIrk>
   20bfa:	230f      	movs	r3, #15
   20bfc:	fb03 6505 	mla	r5, r3, r5, r6
   20c00:	4601      	mov	r1, r0
   20c02:	463a      	mov	r2, r7
   20c04:	f105 0008 	add.w	r0, r5, #8
   20c08:	e784      	b.n	20b14 <AppMasterProcDmMsg+0x178>
   20c0a:	bf00      	nop
   20c0c:	1000b3d0 	.word	0x1000b3d0
   20c10:	1000b444 	.word	0x1000b444
   20c14:	00026478 	.word	0x00026478
   20c18:	10002ec0 	.word	0x10002ec0

00020c1c <AppMasterSecProcDmMsg>:
{
   20c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c1e:	4604      	mov	r4, r0
  pCb = &appConnCb[pMsg->hdr.param - 1];
   20c20:	8800      	ldrh	r0, [r0, #0]
  switch(pMsg->hdr.event)
   20c22:	78a3      	ldrb	r3, [r4, #2]
  pCb = &appConnCb[pMsg->hdr.param - 1];
   20c24:	4d56      	ldr	r5, [pc, #344]	; (20d80 <AppMasterSecProcDmMsg+0x164>)
   20c26:	1e42      	subs	r2, r0, #1
  switch(pMsg->hdr.event)
   20c28:	3b27      	subs	r3, #39	; 0x27
  pCb = &appConnCb[pMsg->hdr.param - 1];
   20c2a:	0156      	lsls	r6, r2, #5
{
   20c2c:	b083      	sub	sp, #12
  pCb = &appConnCb[pMsg->hdr.param - 1];
   20c2e:	eb05 1242 	add.w	r2, r5, r2, lsl #5
  switch(pMsg->hdr.event)
   20c32:	2b3f      	cmp	r3, #63	; 0x3f
   20c34:	d827      	bhi.n	20c86 <AppMasterSecProcDmMsg+0x6a>
   20c36:	e8df f003 	tbb	[pc, r3]
   20c3a:	8a7e      	.short	0x8a7e
   20c3c:	28232026 	.word	0x28232026
   20c40:	26352626 	.word	0x26352626
   20c44:	26264626 	.word	0x26264626
   20c48:	26262626 	.word	0x26262626
   20c4c:	26615926 	.word	0x26615926
   20c50:	266c2626 	.word	0x266c2626
   20c54:	26262626 	.word	0x26262626
   20c58:	26262626 	.word	0x26262626
   20c5c:	26262626 	.word	0x26262626
   20c60:	26262626 	.word	0x26262626
   20c64:	26262626 	.word	0x26262626
   20c68:	26262626 	.word	0x26262626
   20c6c:	26262626 	.word	0x26262626
   20c70:	26262626 	.word	0x26262626
   20c74:	26262626 	.word	0x26262626
   20c78:	7626      	.short	0x7626
  if (pMsg->pairCmpl.auth & DM_AUTH_BOND_FLAG)
   20c7a:	7923      	ldrb	r3, [r4, #4]
   20c7c:	07db      	lsls	r3, r3, #31
   20c7e:	d46e      	bmi.n	20d5e <AppMasterSecProcDmMsg+0x142>
  pCb->initiatingSec = FALSE;
   20c80:	4435      	add	r5, r6
   20c82:	2300      	movs	r3, #0
   20c84:	722b      	strb	r3, [r5, #8]
}
   20c86:	b003      	add	sp, #12
   20c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   20c8a:	4435      	add	r5, r6
   20c8c:	79ab      	ldrb	r3, [r5, #6]
   20c8e:	2b00      	cmp	r3, #0
   20c90:	d0f9      	beq.n	20c86 <AppMasterSecProcDmMsg+0x6a>
   20c92:	7923      	ldrb	r3, [r4, #4]
   20c94:	2b00      	cmp	r3, #0
   20c96:	d0f6      	beq.n	20c86 <AppMasterSecProcDmMsg+0x6a>
    pCb->bonded = TRUE;
   20c98:	4a3a      	ldr	r2, [pc, #232]	; (20d84 <AppMasterSecProcDmMsg+0x168>)
   20c9a:	2101      	movs	r1, #1
    pCb->initiatingSec = FALSE;
   20c9c:	2300      	movs	r3, #0
    pCb->bonded = TRUE;
   20c9e:	5391      	strh	r1, [r2, r6]
    pCb->initiatingSec = FALSE;
   20ca0:	722b      	strb	r3, [r5, #8]
   20ca2:	e7f0      	b.n	20c86 <AppMasterSecProcDmMsg+0x6a>
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   20ca4:	19ab      	adds	r3, r5, r6
   20ca6:	79da      	ldrb	r2, [r3, #7]
   20ca8:	2a00      	cmp	r2, #0
   20caa:	d0ec      	beq.n	20c86 <AppMasterSecProcDmMsg+0x6a>
   20cac:	59a8      	ldr	r0, [r5, r6]
   20cae:	2800      	cmp	r0, #0
   20cb0:	d0e9      	beq.n	20c86 <AppMasterSecProcDmMsg+0x6a>
    pCb->rcvdKeys |= pMsg->keyInd.type;
   20cb2:	7ada      	ldrb	r2, [r3, #11]
   20cb4:	7fa5      	ldrb	r5, [r4, #30]
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   20cb6:	4621      	mov	r1, r4
    pCb->rcvdKeys |= pMsg->keyInd.type;
   20cb8:	432a      	orrs	r2, r5
   20cba:	72da      	strb	r2, [r3, #11]
}
   20cbc:	b003      	add	sp, #12
   20cbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   20cc2:	f7f3 bb8f 	b.w	143e4 <AppDbSetKey>
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   20cc6:	4b30      	ldr	r3, [pc, #192]	; (20d88 <AppMasterSecProcDmMsg+0x16c>)
   20cc8:	681b      	ldr	r3, [r3, #0]
   20cca:	791b      	ldrb	r3, [r3, #4]
   20ccc:	2b00      	cmp	r3, #0
   20cce:	d1da      	bne.n	20c86 <AppMasterSecProcDmMsg+0x6a>
   20cd0:	4435      	add	r5, r6
   20cd2:	7a2b      	ldrb	r3, [r5, #8]
   20cd4:	2b00      	cmp	r3, #0
   20cd6:	d1d6      	bne.n	20c86 <AppMasterSecProcDmMsg+0x6a>
      (DmConnSecLevel((dmConnId_t) pMsg->hdr.param) == DM_SEC_LEVEL_NONE))
   20cd8:	b2c0      	uxtb	r0, r0
   20cda:	9201      	str	r2, [sp, #4]
   20cdc:	f7fb fa56 	bl	1c18c <DmConnSecLevel>
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   20ce0:	9a01      	ldr	r2, [sp, #4]
   20ce2:	2800      	cmp	r0, #0
   20ce4:	d1cf      	bne.n	20c86 <AppMasterSecProcDmMsg+0x6a>
    appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, TRUE, pCb);
   20ce6:	7820      	ldrb	r0, [r4, #0]
   20ce8:	2101      	movs	r1, #1
   20cea:	e02b      	b.n	20d44 <AppMasterSecProcDmMsg+0x128>
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   20cec:	78e3      	ldrb	r3, [r4, #3]
   20cee:	2b00      	cmp	r3, #0
   20cf0:	d1c9      	bne.n	20c86 <AppMasterSecProcDmMsg+0x6a>
   20cf2:	59a8      	ldr	r0, [r5, r6]
   20cf4:	2800      	cmp	r0, #0
   20cf6:	d0c6      	beq.n	20c86 <AppMasterSecProcDmMsg+0x6a>
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   20cf8:	2101      	movs	r1, #1
   20cfa:	e005      	b.n	20d08 <AppMasterSecProcDmMsg+0xec>
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   20cfc:	78e1      	ldrb	r1, [r4, #3]
   20cfe:	2900      	cmp	r1, #0
   20d00:	d1c1      	bne.n	20c86 <AppMasterSecProcDmMsg+0x6a>
   20d02:	59a8      	ldr	r0, [r5, r6]
   20d04:	2800      	cmp	r0, #0
   20d06:	d0be      	beq.n	20c86 <AppMasterSecProcDmMsg+0x6a>
}
   20d08:	b003      	add	sp, #12
   20d0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   20d0e:	f7f3 bc1b 	b.w	14548 <AppDbSetPeerAddedToRl>
  if (pMsg->hdr.status == HCI_SUCCESS)
   20d12:	78e3      	ldrb	r3, [r4, #3]
   20d14:	2b00      	cmp	r3, #0
   20d16:	d1b6      	bne.n	20c86 <AppMasterSecProcDmMsg+0x6a>
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   20d18:	f7fb fc76 	bl	1c608 <DmLlPrivEnabled>
}
   20d1c:	b003      	add	sp, #12
   20d1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   20d22:	f7fc bced 	b.w	1d700 <SvcCoreGapCentAddrResUpdate>
      HciDrvRadioBoot(0);
   20d26:	2000      	movs	r0, #0
   20d28:	f7ee fee4 	bl	faf4 <HciDrvRadioBoot>
}
   20d2c:	b003      	add	sp, #12
   20d2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DmDevReset();
   20d32:	f7fb bb9d 	b.w	1c470 <DmDevReset>
  pCb->bonded = FALSE;
   20d36:	4b13      	ldr	r3, [pc, #76]	; (20d84 <AppMasterSecProcDmMsg+0x168>)
   20d38:	2100      	movs	r1, #0
   20d3a:	5199      	str	r1, [r3, r6]
  appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, pAppSecCfg->initiateSec, pCb);
   20d3c:	4b12      	ldr	r3, [pc, #72]	; (20d88 <AppMasterSecProcDmMsg+0x16c>)
   20d3e:	681b      	ldr	r3, [r3, #0]
   20d40:	7919      	ldrb	r1, [r3, #4]
   20d42:	b2c0      	uxtb	r0, r0
}
   20d44:	b003      	add	sp, #12
   20d46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    appMasterInitiateSec((dmConnId_t) pMsg->hdr.param, TRUE, pCb);
   20d4a:	f7ff bdcb 	b.w	208e4 <appMasterInitiateSec>
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   20d4e:	59a8      	ldr	r0, [r5, r6]
   20d50:	2800      	cmp	r0, #0
   20d52:	d098      	beq.n	20c86 <AppMasterSecProcDmMsg+0x6a>
}
   20d54:	b003      	add	sp, #12
   20d56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    AppDbCheckValidRecord(pCb->dbHdl);
   20d5a:	f7f3 bab1 	b.w	142c0 <AppDbCheckValidRecord>
    pCb->bonded = TRUE;
   20d5e:	19af      	adds	r7, r5, r6
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   20d60:	59a8      	ldr	r0, [r5, r6]
    pCb->bonded = TRUE;
   20d62:	2301      	movs	r3, #1
   20d64:	717b      	strb	r3, [r7, #5]
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   20d66:	2800      	cmp	r0, #0
   20d68:	d08a      	beq.n	20c80 <AppMasterSecProcDmMsg+0x64>
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   20d6a:	7af9      	ldrb	r1, [r7, #11]
   20d6c:	f7f3 faa2 	bl	142b4 <AppDbValidateRecord>
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   20d70:	59ab      	ldr	r3, [r5, r6]
   20d72:	2b00      	cmp	r3, #0
   20d74:	d084      	beq.n	20c80 <AppMasterSecProcDmMsg+0x64>
      AppAddDevToResList(pMsg, pCb->connId);
   20d76:	7939      	ldrb	r1, [r7, #4]
   20d78:	4620      	mov	r0, r4
   20d7a:	f7ff fd67 	bl	2084c <AppAddDevToResList>
  pCb->initiatingSec = FALSE;
   20d7e:	e77f      	b.n	20c80 <AppMasterSecProcDmMsg+0x64>
   20d80:	1000b3d0 	.word	0x1000b3d0
   20d84:	1000b3d5 	.word	0x1000b3d5
   20d88:	1000b440 	.word	0x1000b440

00020d8c <AppScanGetResult>:
  if (idx < APP_SCAN_RESULT_MAX && appMasterCb.scanResults[idx].addrType != APP_ADDR_NONE)
   20d8c:	2809      	cmp	r0, #9
   20d8e:	d80a      	bhi.n	20da6 <AppScanGetResult+0x1a>
   20d90:	4b06      	ldr	r3, [pc, #24]	; (20dac <AppScanGetResult+0x20>)
   20d92:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
   20d96:	441a      	add	r2, r3
   20d98:	7992      	ldrb	r2, [r2, #6]
   20d9a:	2aff      	cmp	r2, #255	; 0xff
   20d9c:	d003      	beq.n	20da6 <AppScanGetResult+0x1a>
    return &appMasterCb.scanResults[idx];
   20d9e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   20da2:	4418      	add	r0, r3
   20da4:	4770      	bx	lr
    return NULL;
   20da6:	2000      	movs	r0, #0
}
   20da8:	4770      	bx	lr
   20daa:	bf00      	nop
   20dac:	1000b444 	.word	0x1000b444

00020db0 <AppScanGetNumResults>:
  return appMasterCb.numScanResults;
   20db0:	4b01      	ldr	r3, [pc, #4]	; (20db8 <AppScanGetNumResults+0x8>)
}
   20db2:	f893 0096 	ldrb.w	r0, [r3, #150]	; 0x96
   20db6:	4770      	bx	lr
   20db8:	1000b444 	.word	0x1000b444

00020dbc <appConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t appConnOpen(uint8_t initPhys, uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   20dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20dc0:	460d      	mov	r5, r1
   20dc2:	4616      	mov	r6, r2
  dmConnId_t  connId;
  appConnCb_t *pCb;

  /* open connection */
  connId = DmConnOpen(DM_CLIENT_ID_APP, initPhys, addrType, pAddr);
   20dc4:	4601      	mov	r1, r0
{
   20dc6:	461f      	mov	r7, r3
  connId = DmConnOpen(DM_CLIENT_ID_APP, initPhys, addrType, pAddr);
   20dc8:	2003      	movs	r0, #3
   20dca:	4613      	mov	r3, r2
   20dcc:	462a      	mov	r2, r5
   20dce:	f7fb fa65 	bl	1c29c <DmConnOpen>

  if (connId != DM_CONN_ID_NONE)
   20dd2:	4604      	mov	r4, r0
   20dd4:	b180      	cbz	r0, 20df8 <appConnOpen+0x3c>
  {
    /* set up conn. control block */
    pCb = &appConnCb[connId - 1];

    pCb->connId = connId;
   20dd6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 20e10 <appConnOpen+0x54>
    pCb = &appConnCb[connId - 1];
   20dda:	f100 3cff 	add.w	ip, r0, #4294967295
    pCb->connId = connId;
   20dde:	ea4f 194c 	mov.w	r9, ip, lsl #5
   20de2:	eb08 1c4c 	add.w	ip, r8, ip, lsl #5
   20de6:	f88c 0004 	strb.w	r0, [ip, #4]

    /* if database record handle is in use */
    if ((dbHdl != APP_DB_HDL_NONE) && AppDbRecordInUse(dbHdl))
   20dea:	b147      	cbz	r7, 20dfe <appConnOpen+0x42>
   20dec:	4638      	mov	r0, r7
   20dee:	f7f3 fa6d 	bl	142cc <AppDbRecordInUse>
   20df2:	b120      	cbz	r0, 20dfe <appConnOpen+0x42>
    {
      pCb->dbHdl = dbHdl;
   20df4:	f848 7009 	str.w	r7, [r8, r9]
      pCb->dbHdl = AppDbFindByAddr(addrType, pAddr);
    }
  }

  return connId;
}
   20df8:	4620      	mov	r0, r4
   20dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pCb->dbHdl = AppDbFindByAddr(addrType, pAddr);
   20dfe:	4631      	mov	r1, r6
   20e00:	4628      	mov	r0, r5
   20e02:	f7f3 fa97 	bl	14334 <AppDbFindByAddr>
   20e06:	f848 0009 	str.w	r0, [r8, r9]
}
   20e0a:	4620      	mov	r0, r4
   20e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20e10:	1000b3d0 	.word	0x1000b3d0

00020e14 <AppMasterSecurityReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterSecurityReq(dmConnId_t connId)
{
   20e14:	b538      	push	{r3, r4, r5, lr}

  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[connId - 1];

  /* if master is not initiating security and not already secure */
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   20e16:	4b0b      	ldr	r3, [pc, #44]	; (20e44 <AppMasterSecurityReq+0x30>)
   20e18:	681b      	ldr	r3, [r3, #0]
   20e1a:	791b      	ldrb	r3, [r3, #4]
   20e1c:	b933      	cbnz	r3, 20e2c <AppMasterSecurityReq+0x18>
   20e1e:	4d0a      	ldr	r5, [pc, #40]	; (20e48 <AppMasterSecurityReq+0x34>)
  pCb = &appConnCb[connId - 1];
   20e20:	1e42      	subs	r2, r0, #1
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   20e22:	eb05 1542 	add.w	r5, r5, r2, lsl #5
   20e26:	4604      	mov	r4, r0
   20e28:	7a2b      	ldrb	r3, [r5, #8]
   20e2a:	b103      	cbz	r3, 20e2e <AppMasterSecurityReq+0x1a>
      (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE))
  {
    appMasterInitiateSec(connId, TRUE, pCb);
  }
}
   20e2c:	bd38      	pop	{r3, r4, r5, pc}
      (DmConnSecLevel(connId) == DM_SEC_LEVEL_NONE))
   20e2e:	f7fb f9ad 	bl	1c18c <DmConnSecLevel>
  if (!pAppSecCfg->initiateSec && !pCb->initiatingSec &&
   20e32:	2800      	cmp	r0, #0
   20e34:	d1fa      	bne.n	20e2c <AppMasterSecurityReq+0x18>
    appMasterInitiateSec(connId, TRUE, pCb);
   20e36:	462a      	mov	r2, r5
   20e38:	4620      	mov	r0, r4
   20e3a:	2101      	movs	r1, #1
}
   20e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    appMasterInitiateSec(connId, TRUE, pCb);
   20e40:	f7ff bd50 	b.w	208e4 <appMasterInitiateSec>
   20e44:	1000b440 	.word	0x1000b440
   20e48:	1000b3d0 	.word	0x1000b3d0

00020e4c <AppMasterResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppMasterResolveAddr(dmEvt_t *pMsg, appDbHdl_t dbHdl, uint8_t resolveType)
{
   20e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t    idx;

  /* if address resolution's in progress or scan record is not found */
  if ((appMasterCb.inProgress) || ((idx = appScanResultFind(pMsg)) >= APP_SCAN_RESULT_MAX))
   20e50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 20f24 <AppMasterResolveAddr+0xd8>
   20e54:	f898 409c 	ldrb.w	r4, [r8, #156]	; 0x9c
   20e58:	b10c      	cbz	r4, 20e5e <AppMasterResolveAddr+0x12>
      appMasterCb.idx = idx;
      appMasterCb.dbHdl = hdl;
      appMasterCb.inProgress = TRUE;
    }
  }
}
   20e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e5e:	4605      	mov	r5, r0
   20e60:	460f      	mov	r7, r1
   20e62:	4616      	mov	r6, r2
  appDevInfo_t  *pDev = appMasterCb.scanResults;
   20e64:	46c3      	mov	fp, r8
            BdaCmp(pDev->addr, pMsg->extScanReport.addr))
   20e66:	f100 0a07 	add.w	sl, r0, #7
            BdaCmp(pDev->addr, pMsg->scanReport.addr))
   20e6a:	f100 090c 	add.w	r9, r0, #12
   20e6e:	e008      	b.n	20e82 <AppMasterResolveAddr+0x36>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   20e70:	7aeb      	ldrb	r3, [r5, #11]
   20e72:	429a      	cmp	r2, r3
   20e74:	d036      	beq.n	20ee4 <AppMasterResolveAddr+0x98>
  for (i = 0; i < APP_SCAN_RESULT_MAX; i++, pDev++)
   20e76:	3401      	adds	r4, #1
   20e78:	b2e4      	uxtb	r4, r4
   20e7a:	2c0a      	cmp	r4, #10
   20e7c:	f10b 0b0f 	add.w	fp, fp, #15
   20e80:	d0eb      	beq.n	20e5a <AppMasterResolveAddr+0xe>
    if(DmScanModeLeg())
   20e82:	f7fc fa43 	bl	1d30c <DmScanModeLeg>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   20e86:	f89b 2006 	ldrb.w	r2, [fp, #6]
    if(DmScanModeLeg())
   20e8a:	2800      	cmp	r0, #0
   20e8c:	d1f0      	bne.n	20e70 <AppMasterResolveAddr+0x24>
        if ((pDev->addrType == pMsg->extScanReport.addrType) &&
   20e8e:	79ab      	ldrb	r3, [r5, #6]
   20e90:	429a      	cmp	r2, r3
   20e92:	d1f0      	bne.n	20e76 <AppMasterResolveAddr+0x2a>
            BdaCmp(pDev->addr, pMsg->extScanReport.addr))
   20e94:	4658      	mov	r0, fp
   20e96:	4651      	mov	r1, sl
   20e98:	f7f2 fa48 	bl	1332c <BdaCmp>
        if ((pDev->addrType == pMsg->extScanReport.addrType) &&
   20e9c:	2800      	cmp	r0, #0
   20e9e:	d0ea      	beq.n	20e76 <AppMasterResolveAddr+0x2a>
  if (resolveType == APP_RESOLVE_DIRECT_RPA)
   20ea0:	2e01      	cmp	r6, #1
   20ea2:	d026      	beq.n	20ef2 <AppMasterResolveAddr+0xa6>
  else if (resolveType == APP_RESOLVE_ADV_RPA)
   20ea4:	2e00      	cmp	r6, #0
   20ea6:	d1d8      	bne.n	20e5a <AppMasterResolveAddr+0xe>
    appDbHdl_t hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   20ea8:	4630      	mov	r0, r6
   20eaa:	f7f3 f9d7 	bl	1425c <AppDbGetNextRecord>
    if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   20eae:	4607      	mov	r7, r0
   20eb0:	2800      	cmp	r0, #0
   20eb2:	d0d2      	beq.n	20e5a <AppMasterResolveAddr+0xe>
   20eb4:	4632      	mov	r2, r6
   20eb6:	2104      	movs	r1, #4
   20eb8:	f7f3 fa76 	bl	143a8 <AppDbGetKey>
   20ebc:	4681      	mov	r9, r0
   20ebe:	2800      	cmp	r0, #0
   20ec0:	d0cb      	beq.n	20e5a <AppMasterResolveAddr+0xe>
        if(DmScanModeLeg())
   20ec2:	f7fc fa23 	bl	1d30c <DmScanModeLeg>
          DmPrivResolveAddr(pMsg->scanReport.addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   20ec6:	4632      	mov	r2, r6
   20ec8:	4649      	mov	r1, r9
        if(DmScanModeLeg())
   20eca:	b338      	cbz	r0, 20f1c <AppMasterResolveAddr+0xd0>
          DmPrivResolveAddr(pMsg->scanReport.addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   20ecc:	f105 000c 	add.w	r0, r5, #12
   20ed0:	f7fb fd28 	bl	1c924 <DmPrivResolveAddr>
      appMasterCb.inProgress = TRUE;
   20ed4:	2301      	movs	r3, #1
      appMasterCb.idx = idx;
   20ed6:	f888 4097 	strb.w	r4, [r8, #151]	; 0x97
      appMasterCb.dbHdl = hdl;
   20eda:	f8c8 7098 	str.w	r7, [r8, #152]	; 0x98
      appMasterCb.inProgress = TRUE;
   20ede:	f888 309c 	strb.w	r3, [r8, #156]	; 0x9c
   20ee2:	e7ba      	b.n	20e5a <AppMasterResolveAddr+0xe>
            BdaCmp(pDev->addr, pMsg->scanReport.addr))
   20ee4:	4658      	mov	r0, fp
   20ee6:	4649      	mov	r1, r9
   20ee8:	f7f2 fa20 	bl	1332c <BdaCmp>
        if ((pDev->addrType == pMsg->scanReport.addrType) &&
   20eec:	2800      	cmp	r0, #0
   20eee:	d0c2      	beq.n	20e76 <AppMasterResolveAddr+0x2a>
   20ef0:	e7d6      	b.n	20ea0 <AppMasterResolveAddr+0x54>
    if(DmScanModeLeg())
   20ef2:	f7fc fa0b 	bl	1d30c <DmScanModeLeg>
   20ef6:	b140      	cbz	r0, 20f0a <AppMasterResolveAddr+0xbe>
        DmPrivResolveAddr(pMsg->scanReport.directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   20ef8:	f7fc fb0e 	bl	1d518 <DmSecGetLocalIrk>
   20efc:	4632      	mov	r2, r6
   20efe:	4601      	mov	r1, r0
   20f00:	f105 0013 	add.w	r0, r5, #19
   20f04:	f7fb fd0e 	bl	1c924 <DmPrivResolveAddr>
   20f08:	e7e4      	b.n	20ed4 <AppMasterResolveAddr+0x88>
        DmPrivResolveAddr(pMsg->extScanReport.directAddr, DmSecGetLocalIrk(), APP_RESOLVE_DIRECT_RPA);
   20f0a:	f7fc fb05 	bl	1d518 <DmSecGetLocalIrk>
   20f0e:	4632      	mov	r2, r6
   20f10:	4601      	mov	r1, r0
   20f12:	f105 0015 	add.w	r0, r5, #21
   20f16:	f7fb fd05 	bl	1c924 <DmPrivResolveAddr>
    appMasterCb.idx = idx;
   20f1a:	e7db      	b.n	20ed4 <AppMasterResolveAddr+0x88>
          DmPrivResolveAddr(pMsg->extScanReport.addr, pPeerKey->irk.key, APP_RESOLVE_ADV_RPA);
   20f1c:	1de8      	adds	r0, r5, #7
   20f1e:	f7fb fd01 	bl	1c924 <DmPrivResolveAddr>
   20f22:	e7d7      	b.n	20ed4 <AppMasterResolveAddr+0x88>
   20f24:	1000b444 	.word	0x1000b444

00020f28 <AppExtScanStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppExtScanStop(void)
{
   20f28:	b508      	push	{r3, lr}
  if (DmScanModeExt())
   20f2a:	f7fc f8f1 	bl	1d110 <DmScanModeExt>
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   20f2e:	4b0b      	ldr	r3, [pc, #44]	; (20f5c <AppExtScanStop+0x34>)
   20f30:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
  if (DmScanModeExt())
   20f34:	b108      	cbz	r0, 20f3a <AppExtScanStop+0x12>
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   20f36:	2aff      	cmp	r2, #255	; 0xff
   20f38:	d006      	beq.n	20f48 <AppExtScanStop+0x20>
  if (appMasterCb.scanMode == APP_SCAN_MODE_EXT)
   20f3a:	2a01      	cmp	r2, #1
   20f3c:	d007      	beq.n	20f4e <AppExtScanStop+0x26>
    /* stop address resolution */
    appMasterCb.inProgress = FALSE;

    DmScanStop();
  }
}
   20f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as legacy");
   20f42:	4807      	ldr	r0, [pc, #28]	; (20f60 <AppExtScanStop+0x38>)
   20f44:	f7f7 ba2c 	b.w	183a0 <WsfTrace>
      appMasterCb.scanMode = APP_SCAN_MODE_EXT;
   20f48:	2201      	movs	r2, #1
   20f4a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    appMasterCb.inProgress = FALSE;
   20f4e:	2200      	movs	r2, #0
   20f50:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
   20f54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DmScanStop();
   20f58:	f7fb bdd2 	b.w	1cb00 <DmScanStop>
   20f5c:	1000b444 	.word	0x1000b444
   20f60:	0002648c 	.word	0x0002648c

00020f64 <AppExtConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t AppExtConnOpen(uint8_t initPhys, uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   20f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f68:	461d      	mov	r5, r3
   20f6a:	4604      	mov	r4, r0
   20f6c:	460f      	mov	r7, r1
   20f6e:	4616      	mov	r6, r2
  if (DmScanModeExt())
   20f70:	f7fc f8ce 	bl	1d110 <DmScanModeExt>
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   20f74:	4b12      	ldr	r3, [pc, #72]	; (20fc0 <AppExtConnOpen+0x5c>)
  if (DmScanModeExt())
   20f76:	b158      	cbz	r0, 20f90 <AppExtConnOpen+0x2c>
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   20f78:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
   20f7c:	28ff      	cmp	r0, #255	; 0xff
   20f7e:	d013      	beq.n	20fa8 <AppExtConnOpen+0x44>
  if (appMasterCb.scanMode == APP_SCAN_MODE_EXT)
   20f80:	2801      	cmp	r0, #1
   20f82:	d009      	beq.n	20f98 <AppExtConnOpen+0x34>
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as legacy");
   20f84:	480f      	ldr	r0, [pc, #60]	; (20fc4 <AppExtConnOpen+0x60>)
   20f86:	f7f7 fa0b 	bl	183a0 <WsfTrace>
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
  }

  /* wrong connect mode */
  return DM_CONN_ID_NONE;
}
   20f8a:	2000      	movs	r0, #0
   20f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   20f90:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
  if (appMasterCb.scanMode == APP_SCAN_MODE_EXT)
   20f94:	2801      	cmp	r0, #1
   20f96:	d1f5      	bne.n	20f84 <AppExtConnOpen+0x20>
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
   20f98:	462b      	mov	r3, r5
   20f9a:	4632      	mov	r2, r6
   20f9c:	4639      	mov	r1, r7
   20f9e:	4620      	mov	r0, r4
}
   20fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
   20fa4:	f7ff bf0a 	b.w	20dbc <appConnOpen>
      appMasterCb.scanMode = APP_SCAN_MODE_EXT;
   20fa8:	2201      	movs	r2, #1
   20faa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
   20fae:	4639      	mov	r1, r7
   20fb0:	462b      	mov	r3, r5
   20fb2:	4632      	mov	r2, r6
   20fb4:	4620      	mov	r0, r4
}
   20fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return appConnOpen(initPhys, addrType, pAddr, dbHdl);
   20fba:	f7ff beff 	b.w	20dbc <appConnOpen>
   20fbe:	bf00      	nop
   20fc0:	1000b444 	.word	0x1000b444
   20fc4:	0002648c 	.word	0x0002648c

00020fc8 <AppScanStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppScanStart(uint8_t mode, uint8_t scanType, uint16_t duration)
{
   20fc8:	b570      	push	{r4, r5, r6, lr}
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   20fca:	4d13      	ldr	r5, [pc, #76]	; (21018 <AppScanStart+0x50>)
   20fcc:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
{
   20fd0:	b084      	sub	sp, #16
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   20fd2:	2bff      	cmp	r3, #255	; 0xff
{
   20fd4:	f88d 100f 	strb.w	r1, [sp, #15]
   20fd8:	4606      	mov	r6, r0
   20fda:	4614      	mov	r4, r2
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   20fdc:	d017      	beq.n	2100e <AppScanStart+0x46>
  if (appMasterCb.scanMode == APP_SCAN_MODE_LEG)
   20fde:	b98b      	cbnz	r3, 21004 <AppScanStart+0x3c>
  if (appMasterScanMode())
  {
    DmScanSetInterval(HCI_SCAN_PHY_LE_1M_BIT, &pAppMasterCfg->scanInterval, &pAppMasterCfg->scanWindow);
   20fe0:	4b0e      	ldr	r3, [pc, #56]	; (2101c <AppScanStart+0x54>)
   20fe2:	6819      	ldr	r1, [r3, #0]
   20fe4:	2001      	movs	r0, #1
   20fe6:	1c8a      	adds	r2, r1, #2
   20fe8:	f7fb fd9c 	bl	1cb24 <DmScanSetInterval>

    DmScanStart(HCI_SCAN_PHY_LE_1M_BIT, mode, &scanType, TRUE, duration, 0);
   20fec:	2301      	movs	r3, #1
   20fee:	2200      	movs	r2, #0
   20ff0:	e9cd 4200 	strd	r4, r2, [sp]
   20ff4:	4631      	mov	r1, r6
   20ff6:	f10d 020f 	add.w	r2, sp, #15
   20ffa:	4618      	mov	r0, r3
   20ffc:	f7fb fd12 	bl	1ca24 <DmScanStart>
  }
}
   21000:	b004      	add	sp, #16
   21002:	bd70      	pop	{r4, r5, r6, pc}
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as extended");
   21004:	4806      	ldr	r0, [pc, #24]	; (21020 <AppScanStart+0x58>)
   21006:	f7f7 f9cb 	bl	183a0 <WsfTrace>
}
   2100a:	b004      	add	sp, #16
   2100c:	bd70      	pop	{r4, r5, r6, pc}
    appMasterCb.scanMode = APP_SCAN_MODE_LEG;
   2100e:	2300      	movs	r3, #0
   21010:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
    return TRUE;
   21014:	e7e4      	b.n	20fe0 <AppScanStart+0x18>
   21016:	bf00      	nop
   21018:	1000b444 	.word	0x1000b444
   2101c:	1000b43c 	.word	0x1000b43c
   21020:	000264c0 	.word	0x000264c0

00021024 <AppScanStop>:
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   21024:	4b0a      	ldr	r3, [pc, #40]	; (21050 <AppScanStop+0x2c>)
   21026:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   2102a:	2aff      	cmp	r2, #255	; 0xff
   2102c:	d008      	beq.n	21040 <AppScanStop+0x1c>
  if (appMasterCb.scanMode == APP_SCAN_MODE_LEG)
   2102e:	b922      	cbnz	r2, 2103a <AppScanStop+0x16>
void AppScanStop(void)
{
  if (appMasterScanMode())
  {
    /* stop address resolution */
    appMasterCb.inProgress = FALSE;
   21030:	2200      	movs	r2, #0
   21032:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

    DmScanStop();
   21036:	f7fb bd63 	b.w	1cb00 <DmScanStop>
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as extended");
   2103a:	4806      	ldr	r0, [pc, #24]	; (21054 <AppScanStop+0x30>)
   2103c:	f7f7 b9b0 	b.w	183a0 <WsfTrace>
    appMasterCb.scanMode = APP_SCAN_MODE_LEG;
   21040:	2200      	movs	r2, #0
   21042:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    appMasterCb.inProgress = FALSE;
   21046:	2200      	movs	r2, #0
   21048:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    DmScanStop();
   2104c:	f7fb bd58 	b.w	1cb00 <DmScanStop>
   21050:	1000b444 	.word	0x1000b444
   21054:	000264c0 	.word	0x000264c0

00021058 <AppConnOpen>:
 *
 *  \return Connection identifier.
 */
/*************************************************************************************************/
dmConnId_t AppConnOpen(uint8_t addrType, uint8_t *pAddr, appDbHdl_t dbHdl)
{
   21058:	b570      	push	{r4, r5, r6, lr}
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   2105a:	4d0e      	ldr	r5, [pc, #56]	; (21094 <AppConnOpen+0x3c>)
   2105c:	f895 409d 	ldrb.w	r4, [r5, #157]	; 0x9d
   21060:	2cff      	cmp	r4, #255	; 0xff
{
   21062:	4613      	mov	r3, r2
  if (appMasterCb.scanMode == APP_SCAN_MODE_NONE)
   21064:	d00c      	beq.n	21080 <AppConnOpen+0x28>
  if (appMasterCb.scanMode == APP_SCAN_MODE_LEG)
   21066:	b934      	cbnz	r4, 21076 <AppConnOpen+0x1e>
  if (appMasterScanMode())
  {
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   21068:	460a      	mov	r2, r1
  }

  /* wrong connect mode */
  return DM_CONN_ID_NONE;
}
   2106a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   2106e:	4601      	mov	r1, r0
   21070:	2001      	movs	r0, #1
   21072:	f7ff bea3 	b.w	20dbc <appConnOpen>
  APP_TRACE_WARN0("Invalid DM scanning mode; mode configured as extended");
   21076:	4808      	ldr	r0, [pc, #32]	; (21098 <AppConnOpen+0x40>)
   21078:	f7f7 f992 	bl	183a0 <WsfTrace>
}
   2107c:	2000      	movs	r0, #0
   2107e:	bd70      	pop	{r4, r5, r6, pc}
    appMasterCb.scanMode = APP_SCAN_MODE_LEG;
   21080:	2200      	movs	r2, #0
   21082:	f885 209d 	strb.w	r2, [r5, #157]	; 0x9d
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   21086:	460a      	mov	r2, r1
}
   21088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return appConnOpen(HCI_INIT_PHY_LE_1M_BIT, addrType, pAddr, dbHdl);
   2108c:	4601      	mov	r1, r0
   2108e:	2001      	movs	r0, #1
   21090:	f7ff be94 	b.w	20dbc <appConnOpen>
   21094:	1000b444 	.word	0x1000b444
   21098:	000264c0 	.word	0x000264c0

0002109c <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   2109c:	e7fe      	b.n	2109c <NMI_Handler>
   2109e:	bf00      	nop

000210a0 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   210a0:	e7fe      	b.n	210a0 <BusFault_Handler>
   210a2:	bf00      	nop

000210a4 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
   210a4:	e7fe      	b.n	210a4 <DebugMon_Handler>
   210a6:	bf00      	nop

000210a8 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
   210a8:	4811      	ldr	r0, [pc, #68]	; (210f0 <zero_loop+0x12>)
   210aa:	4912      	ldr	r1, [pc, #72]	; (210f4 <zero_loop+0x16>)
   210ac:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
   210ae:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
   210b2:	4811      	ldr	r0, [pc, #68]	; (210f8 <zero_loop+0x1a>)
   210b4:	6801      	ldr	r1, [r0, #0]
   210b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   210ba:	6001      	str	r1, [r0, #0]
   210bc:	f3bf 8f4f 	dsb	sy
   210c0:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
   210c4:	480d      	ldr	r0, [pc, #52]	; (210fc <zero_loop+0x1e>)
   210c6:	490e      	ldr	r1, [pc, #56]	; (21100 <zero_loop+0x22>)
   210c8:	4a0e      	ldr	r2, [pc, #56]	; (21104 <zero_loop+0x26>)

000210ca <copy_loop>:
   210ca:	f850 3b04 	ldr.w	r3, [r0], #4
   210ce:	f841 3b04 	str.w	r3, [r1], #4
   210d2:	4291      	cmp	r1, r2
   210d4:	dbf9      	blt.n	210ca <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
   210d6:	480c      	ldr	r0, [pc, #48]	; (21108 <zero_loop+0x2a>)
   210d8:	490c      	ldr	r1, [pc, #48]	; (2110c <zero_loop+0x2e>)
   210da:	f04f 0200 	mov.w	r2, #0

000210de <zero_loop>:
   210de:	4288      	cmp	r0, r1
   210e0:	bfb8      	it	lt
   210e2:	f840 2b04 	strlt.w	r2, [r0], #4
   210e6:	dbfa      	blt.n	210de <zero_loop>
    main();
   210e8:	f7ee fb8e 	bl	f808 <main>
    __asm("    bkpt     ");
   210ec:	be00      	bkpt	0x0000
}
   210ee:	0000      	.short	0x0000
   210f0:	e000ed08 	.word	0xe000ed08
   210f4:	0000c000 	.word	0x0000c000
   210f8:	e000ed88 	.word	0xe000ed88
   210fc:	00028424 	.word	0x00028424
   21100:	10002b00 	.word	0x10002b00
   21104:	100040bc 	.word	0x100040bc
   21108:	100040c0 	.word	0x100040c0
   2110c:	1000b704 	.word	0x1000b704

00021110 <memcmp>:
   21110:	2a03      	cmp	r2, #3
   21112:	b570      	push	{r4, r5, r6, lr}
   21114:	d915      	bls.n	21142 <memcmp+0x32>
   21116:	ea40 0c01 	orr.w	ip, r0, r1
   2111a:	f01c 0f03 	tst.w	ip, #3
   2111e:	4604      	mov	r4, r0
   21120:	460b      	mov	r3, r1
   21122:	d121      	bne.n	21168 <memcmp+0x58>
   21124:	4619      	mov	r1, r3
   21126:	4620      	mov	r0, r4
   21128:	680e      	ldr	r6, [r1, #0]
   2112a:	6805      	ldr	r5, [r0, #0]
   2112c:	42b5      	cmp	r5, r6
   2112e:	f104 0404 	add.w	r4, r4, #4
   21132:	f103 0304 	add.w	r3, r3, #4
   21136:	d117      	bne.n	21168 <memcmp+0x58>
   21138:	3a04      	subs	r2, #4
   2113a:	2a03      	cmp	r2, #3
   2113c:	4620      	mov	r0, r4
   2113e:	4619      	mov	r1, r3
   21140:	d8f0      	bhi.n	21124 <memcmp+0x14>
   21142:	1e54      	subs	r4, r2, #1
   21144:	b1a2      	cbz	r2, 21170 <memcmp+0x60>
   21146:	f100 3cff 	add.w	ip, r0, #4294967295
   2114a:	3901      	subs	r1, #1
   2114c:	e001      	b.n	21152 <memcmp+0x42>
   2114e:	18c3      	adds	r3, r0, r3
   21150:	d00c      	beq.n	2116c <memcmp+0x5c>
   21152:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   21156:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2115a:	4596      	cmp	lr, r2
   2115c:	eba4 030c 	sub.w	r3, r4, ip
   21160:	d0f5      	beq.n	2114e <memcmp+0x3e>
   21162:	ebae 0002 	sub.w	r0, lr, r2
   21166:	bd70      	pop	{r4, r5, r6, pc}
   21168:	1e54      	subs	r4, r2, #1
   2116a:	e7ec      	b.n	21146 <memcmp+0x36>
   2116c:	4618      	mov	r0, r3
   2116e:	bd70      	pop	{r4, r5, r6, pc}
   21170:	4610      	mov	r0, r2
   21172:	bd70      	pop	{r4, r5, r6, pc}

00021174 <memset>:
   21174:	0783      	lsls	r3, r0, #30
   21176:	b530      	push	{r4, r5, lr}
   21178:	d048      	beq.n	2120c <memset+0x98>
   2117a:	1e54      	subs	r4, r2, #1
   2117c:	2a00      	cmp	r2, #0
   2117e:	d03f      	beq.n	21200 <memset+0x8c>
   21180:	b2ca      	uxtb	r2, r1
   21182:	4603      	mov	r3, r0
   21184:	e001      	b.n	2118a <memset+0x16>
   21186:	3c01      	subs	r4, #1
   21188:	d33a      	bcc.n	21200 <memset+0x8c>
   2118a:	f803 2b01 	strb.w	r2, [r3], #1
   2118e:	079d      	lsls	r5, r3, #30
   21190:	d1f9      	bne.n	21186 <memset+0x12>
   21192:	2c03      	cmp	r4, #3
   21194:	d92d      	bls.n	211f2 <memset+0x7e>
   21196:	b2cd      	uxtb	r5, r1
   21198:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2119c:	2c0f      	cmp	r4, #15
   2119e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   211a2:	d936      	bls.n	21212 <memset+0x9e>
   211a4:	f1a4 0210 	sub.w	r2, r4, #16
   211a8:	f022 0c0f 	bic.w	ip, r2, #15
   211ac:	f103 0e20 	add.w	lr, r3, #32
   211b0:	44e6      	add	lr, ip
   211b2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   211b6:	f103 0210 	add.w	r2, r3, #16
   211ba:	e942 5504 	strd	r5, r5, [r2, #-16]
   211be:	e942 5502 	strd	r5, r5, [r2, #-8]
   211c2:	3210      	adds	r2, #16
   211c4:	4572      	cmp	r2, lr
   211c6:	d1f8      	bne.n	211ba <memset+0x46>
   211c8:	f10c 0201 	add.w	r2, ip, #1
   211cc:	f014 0f0c 	tst.w	r4, #12
   211d0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   211d4:	f004 0c0f 	and.w	ip, r4, #15
   211d8:	d013      	beq.n	21202 <memset+0x8e>
   211da:	f1ac 0304 	sub.w	r3, ip, #4
   211de:	f023 0303 	bic.w	r3, r3, #3
   211e2:	3304      	adds	r3, #4
   211e4:	4413      	add	r3, r2
   211e6:	f842 5b04 	str.w	r5, [r2], #4
   211ea:	4293      	cmp	r3, r2
   211ec:	d1fb      	bne.n	211e6 <memset+0x72>
   211ee:	f00c 0403 	and.w	r4, ip, #3
   211f2:	b12c      	cbz	r4, 21200 <memset+0x8c>
   211f4:	b2ca      	uxtb	r2, r1
   211f6:	441c      	add	r4, r3
   211f8:	f803 2b01 	strb.w	r2, [r3], #1
   211fc:	429c      	cmp	r4, r3
   211fe:	d1fb      	bne.n	211f8 <memset+0x84>
   21200:	bd30      	pop	{r4, r5, pc}
   21202:	4664      	mov	r4, ip
   21204:	4613      	mov	r3, r2
   21206:	2c00      	cmp	r4, #0
   21208:	d1f4      	bne.n	211f4 <memset+0x80>
   2120a:	e7f9      	b.n	21200 <memset+0x8c>
   2120c:	4603      	mov	r3, r0
   2120e:	4614      	mov	r4, r2
   21210:	e7bf      	b.n	21192 <memset+0x1e>
   21212:	461a      	mov	r2, r3
   21214:	46a4      	mov	ip, r4
   21216:	e7e0      	b.n	211da <memset+0x66>

00021218 <am_bsp_low_power_init>:
   21218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2121a:	f002 f879 	bl	23310 <am_hal_pwrctrl_low_power_init>
   2121e:	f002 f9dd 	bl	235dc <am_hal_rtc_osc_disable>
   21222:	4b0b      	ldr	r3, [pc, #44]	; (21250 <am_bsp_low_power_init+0x38>)
   21224:	4f0b      	ldr	r7, [pc, #44]	; (21254 <am_bsp_low_power_init+0x3c>)
   21226:	681e      	ldr	r6, [r3, #0]
   21228:	2400      	movs	r4, #0
   2122a:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   2122e:	4631      	mov	r1, r6
   21230:	4628      	mov	r0, r5
   21232:	f001 fdbd 	bl	22db0 <am_hal_gpio_pinconfig>
   21236:	2103      	movs	r1, #3
   21238:	4628      	mov	r0, r5
   2123a:	f001 feef 	bl	2301c <am_hal_gpio_state_write>
   2123e:	3401      	adds	r4, #1
   21240:	2100      	movs	r1, #0
   21242:	4628      	mov	r0, r5
   21244:	f001 feea 	bl	2301c <am_hal_gpio_state_write>
   21248:	2c05      	cmp	r4, #5
   2124a:	d1ee      	bne.n	2122a <am_bsp_low_power_init+0x12>
   2124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2124e:	bf00      	nop
   21250:	00028178 	.word	0x00028178
   21254:	10002ec4 	.word	0x10002ec4

00021258 <am_bsp_itm_printf_enable>:
   21258:	b500      	push	{lr}
   2125a:	4b0b      	ldr	r3, [pc, #44]	; (21288 <am_bsp_itm_printf_enable+0x30>)
   2125c:	b087      	sub	sp, #28
   2125e:	2201      	movs	r2, #1
   21260:	601a      	str	r2, [r3, #0]
   21262:	f001 ff27 	bl	230b4 <am_hal_itm_enable>
   21266:	4b09      	ldr	r3, [pc, #36]	; (2128c <am_bsp_itm_printf_enable+0x34>)
   21268:	9301      	str	r3, [sp, #4]
   2126a:	a801      	add	r0, sp, #4
   2126c:	f002 faac 	bl	237c8 <am_hal_tpiu_enable>
   21270:	4b07      	ldr	r3, [pc, #28]	; (21290 <am_bsp_itm_printf_enable+0x38>)
   21272:	2029      	movs	r0, #41	; 0x29
   21274:	6819      	ldr	r1, [r3, #0]
   21276:	f001 fd9b 	bl	22db0 <am_hal_gpio_pinconfig>
   2127a:	4806      	ldr	r0, [pc, #24]	; (21294 <am_bsp_itm_printf_enable+0x3c>)
   2127c:	f7fe fa3c 	bl	1f6f8 <am_util_stdio_printf_init>
   21280:	b007      	add	sp, #28
   21282:	f85d fb04 	ldr.w	pc, [sp], #4
   21286:	bf00      	nop
   21288:	1000b4e4 	.word	0x1000b4e4
   2128c:	000f4240 	.word	0x000f4240
   21290:	00026500 	.word	0x00026500
   21294:	000230fd 	.word	0x000230fd

00021298 <am_hal_ble_blocking_transfer.part.0>:
   21298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2129c:	4dbc      	ldr	r5, [pc, #752]	; (21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   2129e:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   212a2:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   212a6:	f36f 13c7 	bfc	r3, #7, #1
   212aa:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   212ae:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   212b2:	f36f 2308 	bfc	r3, #8, #1
   212b6:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   212ba:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   212be:	f36f 0300 	bfc	r3, #0, #1
   212c2:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   212c6:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   212ca:	f36f 0341 	bfc	r3, #1, #1
   212ce:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   212d2:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   212d6:	f043 0301 	orr.w	r3, r3, #1
   212da:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   212de:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   212e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   212e6:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   212ea:	7a8b      	ldrb	r3, [r1, #10]
   212ec:	2b01      	cmp	r3, #1
   212ee:	b085      	sub	sp, #20
   212f0:	460e      	mov	r6, r1
   212f2:	4604      	mov	r4, r0
   212f4:	d03c      	beq.n	21370 <am_hal_ble_blocking_transfer.part.0+0xd8>
   212f6:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   212fa:	061a      	lsls	r2, r3, #24
   212fc:	d532      	bpl.n	21364 <am_hal_ble_blocking_transfer.part.0+0xcc>
   212fe:	f001 fed1 	bl	230a4 <am_hal_interrupt_master_disable>
   21302:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   21306:	9003      	str	r0, [sp, #12]
   21308:	9803      	ldr	r0, [sp, #12]
   2130a:	2b00      	cmp	r3, #0
   2130c:	d151      	bne.n	213b2 <am_hal_ble_blocking_transfer.part.0+0x11a>
   2130e:	2301      	movs	r3, #1
   21310:	6463      	str	r3, [r4, #68]	; 0x44
   21312:	f001 fecb 	bl	230ac <am_hal_interrupt_master_set>
   21316:	7b33      	ldrb	r3, [r6, #12]
   21318:	b113      	cbz	r3, 21320 <am_hal_ble_blocking_transfer.part.0+0x88>
   2131a:	2301      	movs	r3, #1
   2131c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   21320:	6833      	ldr	r3, [r6, #0]
   21322:	6872      	ldr	r2, [r6, #4]
   21324:	68b1      	ldr	r1, [r6, #8]
   21326:	68f0      	ldr	r0, [r6, #12]
   21328:	61a0      	str	r0, [r4, #24]
   2132a:	60e3      	str	r3, [r4, #12]
   2132c:	6122      	str	r2, [r4, #16]
   2132e:	6161      	str	r1, [r4, #20]
   21330:	6933      	ldr	r3, [r6, #16]
   21332:	6972      	ldr	r2, [r6, #20]
   21334:	6222      	str	r2, [r4, #32]
   21336:	61e3      	str	r3, [r4, #28]
   21338:	f001 feb4 	bl	230a4 <am_hal_interrupt_master_disable>
   2133c:	6823      	ldr	r3, [r4, #0]
   2133e:	4a95      	ldr	r2, [pc, #596]	; (21594 <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   21340:	9001      	str	r0, [sp, #4]
   21342:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21346:	4293      	cmp	r3, r2
   21348:	f104 070c 	add.w	r7, r4, #12
   2134c:	f040 8156 	bne.w	215fc <am_hal_ble_blocking_transfer.part.0+0x364>
   21350:	79f2      	ldrb	r2, [r6, #7]
   21352:	2a03      	cmp	r2, #3
   21354:	f200 8152 	bhi.w	215fc <am_hal_ble_blocking_transfer.part.0+0x364>
   21358:	e8df f012 	tbh	[pc, r2, lsl #1]
   2135c:	01040071 	.word	0x01040071
   21360:	010900ff 	.word	0x010900ff
   21364:	488c      	ldr	r0, [pc, #560]	; (21598 <am_hal_ble_blocking_transfer.part.0+0x300>)
   21366:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   2136a:	b005      	add	sp, #20
   2136c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21370:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   21374:	b333      	cbz	r3, 213c4 <am_hal_ble_blocking_transfer.part.0+0x12c>
   21376:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
   2137a:	2d00      	cmp	r5, #0
   2137c:	f000 81c4 	beq.w	21708 <am_hal_ble_blocking_transfer.part.0+0x470>
   21380:	2300      	movs	r3, #0
   21382:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
   21386:	4f82      	ldr	r7, [pc, #520]	; (21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   21388:	f240 152d 	movw	r5, #301	; 0x12d
   2138c:	f04f 0900 	mov.w	r9, #0
   21390:	e008      	b.n	213a4 <am_hal_ble_blocking_transfer.part.0+0x10c>
   21392:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   21396:	071b      	lsls	r3, r3, #28
   21398:	d518      	bpl.n	213cc <am_hal_ble_blocking_transfer.part.0+0x134>
   2139a:	20a0      	movs	r0, #160	; 0xa0
   2139c:	f001 fcaa 	bl	22cf4 <am_hal_flash_delay>
   213a0:	3d01      	subs	r5, #1
   213a2:	d013      	beq.n	213cc <am_hal_ble_blocking_transfer.part.0+0x134>
   213a4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   213a8:	2b00      	cmp	r3, #0
   213aa:	d0f2      	beq.n	21392 <am_hal_ble_blocking_transfer.part.0+0xfa>
   213ac:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   213b0:	e7f3      	b.n	2139a <am_hal_ble_blocking_transfer.part.0+0x102>
   213b2:	f001 fe7b 	bl	230ac <am_hal_interrupt_master_set>
   213b6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   213ba:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   213be:	b005      	add	sp, #20
   213c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   213c8:	2b00      	cmp	r3, #0
   213ca:	d1dc      	bne.n	21386 <am_hal_ble_blocking_transfer.part.0+0xee>
   213cc:	4d70      	ldr	r5, [pc, #448]	; (21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   213ce:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   213d2:	f043 0302 	orr.w	r3, r3, #2
   213d6:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   213da:	2050      	movs	r0, #80	; 0x50
   213dc:	f001 fc8a 	bl	22cf4 <am_hal_flash_delay>
   213e0:	6823      	ldr	r3, [r4, #0]
   213e2:	4a6c      	ldr	r2, [pc, #432]	; (21594 <am_hal_ble_blocking_transfer.part.0+0x2fc>)
   213e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   213e8:	4293      	cmp	r3, r2
   213ea:	d105      	bne.n	213f8 <am_hal_ble_blocking_transfer.part.0+0x160>
   213ec:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   213f0:	f043 030c 	orr.w	r3, r3, #12
   213f4:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   213f8:	2500      	movs	r5, #0
   213fa:	4f65      	ldr	r7, [pc, #404]	; (21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   213fc:	46a9      	mov	r9, r5
   213fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   21402:	2b00      	cmp	r3, #0
   21404:	f040 80ba 	bne.w	2157c <am_hal_ble_blocking_transfer.part.0+0x2e4>
   21408:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   2140c:	0718      	lsls	r0, r3, #28
   2140e:	f140 80c7 	bpl.w	215a0 <am_hal_ble_blocking_transfer.part.0+0x308>
   21412:	f001 fe47 	bl	230a4 <am_hal_interrupt_master_disable>
   21416:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
   2141a:	9002      	str	r0, [sp, #8]
   2141c:	9802      	ldr	r0, [sp, #8]
   2141e:	f1ba 0f00 	cmp.w	sl, #0
   21422:	f040 80ae 	bne.w	21582 <am_hal_ble_blocking_transfer.part.0+0x2ea>
   21426:	2301      	movs	r3, #1
   21428:	6463      	str	r3, [r4, #68]	; 0x44
   2142a:	f001 fe3f 	bl	230ac <am_hal_interrupt_master_set>
   2142e:	4b58      	ldr	r3, [pc, #352]	; (21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   21430:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   21434:	f36a 0241 	bfi	r2, sl, #1, #1
   21438:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   2143c:	e76b      	b.n	21316 <am_hal_ble_blocking_transfer.part.0+0x7e>
   2143e:	2500      	movs	r5, #0
   21440:	46a9      	mov	r9, r5
   21442:	f896 e00a 	ldrb.w	lr, [r6, #10]
   21446:	f896 c00c 	ldrb.w	ip, [r6, #12]
   2144a:	8930      	ldrh	r0, [r6, #8]
   2144c:	4b53      	ldr	r3, [pc, #332]	; (2159c <am_hal_ble_blocking_transfer.part.0+0x304>)
   2144e:	0151      	lsls	r1, r2, #5
   21450:	ea03 2a00 	and.w	sl, r3, r0, lsl #8
   21454:	f001 0b60 	and.w	fp, r1, #96	; 0x60
   21458:	ea4e 13cc 	orr.w	r3, lr, ip, lsl #7
   2145c:	ea43 030b 	orr.w	r3, r3, fp
   21460:	ea43 030a 	orr.w	r3, r3, sl
   21464:	ea43 0309 	orr.w	r3, r3, r9
   21468:	f8df 9124 	ldr.w	r9, [pc, #292]	; 21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   2146c:	f1be 0f01 	cmp.w	lr, #1
   21470:	f8c9 5214 	str.w	r5, [r9, #532]	; 0x214
   21474:	f8c9 320c 	str.w	r3, [r9, #524]	; 0x20c
   21478:	f000 8131 	beq.w	216de <am_hal_ble_blocking_transfer.part.0+0x446>
   2147c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2147e:	f8b4 c014 	ldrh.w	ip, [r4, #20]
   21482:	f8df e110 	ldr.w	lr, [pc, #272]	; 21594 <am_hal_ble_blocking_transfer.part.0+0x2fc>
   21486:	4a42      	ldr	r2, [pc, #264]	; (21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   21488:	2500      	movs	r5, #0
   2148a:	459c      	cmp	ip, r3
   2148c:	d924      	bls.n	214d8 <am_hal_ble_blocking_transfer.part.0+0x240>
   2148e:	6821      	ldr	r1, [r4, #0]
   21490:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
   21494:	4571      	cmp	r1, lr
   21496:	d1fd      	bne.n	21494 <am_hal_ble_blocking_transfer.part.0+0x1fc>
   21498:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   2149c:	f3c1 4107 	ubfx	r1, r1, #16, #8
   214a0:	2903      	cmp	r1, #3
   214a2:	d9f2      	bls.n	2148a <am_hal_ble_blocking_transfer.part.0+0x1f2>
   214a4:	4561      	cmp	r1, ip
   214a6:	f080 80a3 	bcs.w	215f0 <am_hal_ble_blocking_transfer.part.0+0x358>
   214aa:	68e0      	ldr	r0, [r4, #12]
   214ac:	f021 0103 	bic.w	r1, r1, #3
   214b0:	f023 0303 	bic.w	r3, r3, #3
   214b4:	eb00 0903 	add.w	r9, r0, r3
   214b8:	464b      	mov	r3, r9
   214ba:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
   214be:	f843 0b04 	str.w	r0, [r3], #4
   214c2:	eba3 0009 	sub.w	r0, r3, r9
   214c6:	4288      	cmp	r0, r1
   214c8:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
   214cc:	d3f5      	bcc.n	214ba <am_hal_ble_blocking_transfer.part.0+0x222>
   214ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   214d0:	440b      	add	r3, r1
   214d2:	459c      	cmp	ip, r3
   214d4:	63e3      	str	r3, [r4, #60]	; 0x3c
   214d6:	d8da      	bhi.n	2148e <am_hal_ble_blocking_transfer.part.0+0x1f6>
   214d8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>
   214dc:	9801      	ldr	r0, [sp, #4]
   214de:	f001 fde5 	bl	230ac <am_hal_interrupt_master_set>
   214e2:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   214e6:	07da      	lsls	r2, r3, #31
   214e8:	bf58      	it	pl
   214ea:	f242 7510 	movwpl	r5, #10000	; 0x2710
   214ee:	d503      	bpl.n	214f8 <am_hal_ble_blocking_transfer.part.0+0x260>
   214f0:	e009      	b.n	21506 <am_hal_ble_blocking_transfer.part.0+0x26e>
   214f2:	3d01      	subs	r5, #1
   214f4:	f000 80fc 	beq.w	216f0 <am_hal_ble_blocking_transfer.part.0+0x458>
   214f8:	2010      	movs	r0, #16
   214fa:	f001 fbfb 	bl	22cf4 <am_hal_flash_delay>
   214fe:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   21502:	07db      	lsls	r3, r3, #31
   21504:	d5f5      	bpl.n	214f2 <am_hal_ble_blocking_transfer.part.0+0x25a>
   21506:	4a22      	ldr	r2, [pc, #136]	; (21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   21508:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   2150c:	f041 0101 	orr.w	r1, r1, #1
   21510:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   21514:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   21518:	2300      	movs	r3, #0
   2151a:	f041 0102 	orr.w	r1, r1, #2
   2151e:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   21522:	60e3      	str	r3, [r4, #12]
   21524:	607b      	str	r3, [r7, #4]
   21526:	60bb      	str	r3, [r7, #8]
   21528:	60fb      	str	r3, [r7, #12]
   2152a:	613b      	str	r3, [r7, #16]
   2152c:	617b      	str	r3, [r7, #20]
   2152e:	63e3      	str	r3, [r4, #60]	; 0x3c
   21530:	7ab1      	ldrb	r1, [r6, #10]
   21532:	2901      	cmp	r1, #1
   21534:	f000 80c2 	beq.w	216bc <am_hal_ble_blocking_transfer.part.0+0x424>
   21538:	2902      	cmp	r1, #2
   2153a:	d104      	bne.n	21546 <am_hal_ble_blocking_transfer.part.0+0x2ae>
   2153c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   21540:	b10a      	cbz	r2, 21546 <am_hal_ble_blocking_transfer.part.0+0x2ae>
   21542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   21546:	2300      	movs	r3, #0
   21548:	4a11      	ldr	r2, [pc, #68]	; (21590 <am_hal_ble_blocking_transfer.part.0+0x2f8>)
   2154a:	4618      	mov	r0, r3
   2154c:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   21550:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   21554:	b005      	add	sp, #20
   21556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2155a:	7973      	ldrb	r3, [r6, #5]
   2155c:	7935      	ldrb	r5, [r6, #4]
   2155e:	ea4f 6903 	mov.w	r9, r3, lsl #24
   21562:	e76e      	b.n	21442 <am_hal_ble_blocking_transfer.part.0+0x1aa>
   21564:	7933      	ldrb	r3, [r6, #4]
   21566:	2500      	movs	r5, #0
   21568:	ea4f 6903 	mov.w	r9, r3, lsl #24
   2156c:	e769      	b.n	21442 <am_hal_ble_blocking_transfer.part.0+0x1aa>
   2156e:	88b5      	ldrh	r5, [r6, #4]
   21570:	79b3      	ldrb	r3, [r6, #6]
   21572:	ba6d      	rev16	r5, r5
   21574:	b2ad      	uxth	r5, r5
   21576:	ea4f 6903 	mov.w	r9, r3, lsl #24
   2157a:	e762      	b.n	21442 <am_hal_ble_blocking_transfer.part.0+0x1aa>
   2157c:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
   21580:	e747      	b.n	21412 <am_hal_ble_blocking_transfer.part.0+0x17a>
   21582:	f001 fd93 	bl	230ac <am_hal_interrupt_master_set>
   21586:	20a0      	movs	r0, #160	; 0xa0
   21588:	3501      	adds	r5, #1
   2158a:	f001 fbb3 	bl	22cf4 <am_hal_flash_delay>
   2158e:	e736      	b.n	213fe <am_hal_ble_blocking_transfer.part.0+0x166>
   21590:	5000c000 	.word	0x5000c000
   21594:	01775230 	.word	0x01775230
   21598:	08000001 	.word	0x08000001
   2159c:	000fff00 	.word	0x000fff00
   215a0:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   215a4:	d203      	bcs.n	215ae <am_hal_ble_blocking_transfer.part.0+0x316>
   215a6:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   215aa:	0619      	lsls	r1, r3, #24
   215ac:	d5eb      	bpl.n	21586 <am_hal_ble_blocking_transfer.part.0+0x2ee>
   215ae:	6823      	ldr	r3, [r4, #0]
   215b0:	4a6a      	ldr	r2, [pc, #424]	; (2175c <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   215b2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   215b6:	4293      	cmp	r3, r2
   215b8:	4b69      	ldr	r3, [pc, #420]	; (21760 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   215ba:	f040 809b 	bne.w	216f4 <am_hal_ble_blocking_transfer.part.0+0x45c>
   215be:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   215c2:	4868      	ldr	r0, [pc, #416]	; (21764 <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   215c4:	2102      	movs	r1, #2
   215c6:	f361 0283 	bfi	r2, r1, #2, #2
   215ca:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   215ce:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   215d2:	f36f 0241 	bfc	r2, #1, #1
   215d6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   215da:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   215de:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   215e2:	f361 0283 	bfi	r2, r1, #2, #2
   215e6:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   215ea:	b005      	add	sp, #20
   215ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215f0:	ebac 0103 	sub.w	r1, ip, r3
   215f4:	68e0      	ldr	r0, [r4, #12]
   215f6:	f023 0303 	bic.w	r3, r3, #3
   215fa:	e75b      	b.n	214b4 <am_hal_ble_blocking_transfer.part.0+0x21c>
   215fc:	7ab3      	ldrb	r3, [r6, #10]
   215fe:	2b01      	cmp	r3, #1
   21600:	f47f af3c 	bne.w	2147c <am_hal_ble_blocking_transfer.part.0+0x1e4>
   21604:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   21608:	68e5      	ldr	r5, [r4, #12]
   2160a:	f8df b154 	ldr.w	fp, [pc, #340]	; 21760 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   2160e:	f1b9 0f00 	cmp.w	r9, #0
   21612:	d019      	beq.n	21648 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   21614:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   21618:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2161c:	2b03      	cmp	r3, #3
   2161e:	d835      	bhi.n	2168c <am_hal_ble_blocking_transfer.part.0+0x3f4>
   21620:	f8df a14c 	ldr.w	sl, [pc, #332]	; 21770 <am_hal_ble_blocking_transfer.part.0+0x4d8>
   21624:	e00a      	b.n	2163c <am_hal_ble_blocking_transfer.part.0+0x3a4>
   21626:	f1ba 0a01 	subs.w	sl, sl, #1
   2162a:	d00d      	beq.n	21648 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   2162c:	f001 fb62 	bl	22cf4 <am_hal_flash_delay>
   21630:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
   21634:	f3c3 2307 	ubfx	r3, r3, #8, #8
   21638:	2b03      	cmp	r3, #3
   2163a:	d827      	bhi.n	2168c <am_hal_ble_blocking_transfer.part.0+0x3f4>
   2163c:	f8db 3224 	ldr.w	r3, [fp, #548]	; 0x224
   21640:	07db      	lsls	r3, r3, #31
   21642:	f04f 0010 	mov.w	r0, #16
   21646:	d5ee      	bpl.n	21626 <am_hal_ble_blocking_transfer.part.0+0x38e>
   21648:	f8df 9114 	ldr.w	r9, [pc, #276]	; 21760 <am_hal_ble_blocking_transfer.part.0+0x4c8>
   2164c:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   21650:	07d8      	lsls	r0, r3, #31
   21652:	bf58      	it	pl
   21654:	f44f 65fa 	movpl.w	r5, #2000	; 0x7d0
   21658:	d408      	bmi.n	2166c <am_hal_ble_blocking_transfer.part.0+0x3d4>
   2165a:	2010      	movs	r0, #16
   2165c:	f001 fb4a 	bl	22cf4 <am_hal_flash_delay>
   21660:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   21664:	07d9      	lsls	r1, r3, #31
   21666:	d401      	bmi.n	2166c <am_hal_ble_blocking_transfer.part.0+0x3d4>
   21668:	3d01      	subs	r5, #1
   2166a:	d1f6      	bne.n	2165a <am_hal_ble_blocking_transfer.part.0+0x3c2>
   2166c:	6823      	ldr	r3, [r4, #0]
   2166e:	4a3b      	ldr	r2, [pc, #236]	; (2175c <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   21670:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21674:	4293      	cmp	r3, r2
   21676:	f47f af2f 	bne.w	214d8 <am_hal_ble_blocking_transfer.part.0+0x240>
   2167a:	4b39      	ldr	r3, [pc, #228]	; (21760 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   2167c:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   21680:	2102      	movs	r1, #2
   21682:	f361 0283 	bfi	r2, r1, #2, #2
   21686:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   2168a:	e725      	b.n	214d8 <am_hal_ble_blocking_transfer.part.0+0x240>
   2168c:	f009 0003 	and.w	r0, r9, #3
   21690:	462a      	mov	r2, r5
   21692:	f852 1b04 	ldr.w	r1, [r2], #4
   21696:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
   2169a:	4581      	cmp	r9, r0
   2169c:	eba5 0102 	sub.w	r1, r5, r2
   216a0:	4419      	add	r1, r3
   216a2:	f1a9 0904 	sub.w	r9, r9, #4
   216a6:	d005      	beq.n	216b4 <am_hal_ble_blocking_transfer.part.0+0x41c>
   216a8:	2903      	cmp	r1, #3
   216aa:	d905      	bls.n	216b8 <am_hal_ble_blocking_transfer.part.0+0x420>
   216ac:	f1b9 0f00 	cmp.w	r9, #0
   216b0:	d1ef      	bne.n	21692 <am_hal_ble_blocking_transfer.part.0+0x3fa>
   216b2:	e7c9      	b.n	21648 <am_hal_ble_blocking_transfer.part.0+0x3b0>
   216b4:	f04f 0900 	mov.w	r9, #0
   216b8:	4615      	mov	r5, r2
   216ba:	e7a8      	b.n	2160e <am_hal_ble_blocking_transfer.part.0+0x376>
   216bc:	6823      	ldr	r3, [r4, #0]
   216be:	4927      	ldr	r1, [pc, #156]	; (2175c <am_hal_ble_blocking_transfer.part.0+0x4c4>)
   216c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   216c4:	428b      	cmp	r3, r1
   216c6:	d106      	bne.n	216d6 <am_hal_ble_blocking_transfer.part.0+0x43e>
   216c8:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   216cc:	2102      	movs	r1, #2
   216ce:	f361 0383 	bfi	r3, r1, #2, #2
   216d2:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   216d6:	2301      	movs	r3, #1
   216d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   216dc:	e733      	b.n	21546 <am_hal_ble_blocking_transfer.part.0+0x2ae>
   216de:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   216e2:	68e5      	ldr	r5, [r4, #12]
   216e4:	2a03      	cmp	r2, #3
   216e6:	d890      	bhi.n	2160a <am_hal_ble_blocking_transfer.part.0+0x372>
   216e8:	e8df f002 	tbb	[pc, r2]
   216ec:	2a303417 	.word	0x2a303417
   216f0:	481d      	ldr	r0, [pc, #116]	; (21768 <am_hal_ble_blocking_transfer.part.0+0x4d0>)
   216f2:	e63a      	b.n	2136a <am_hal_ble_blocking_transfer.part.0+0xd2>
   216f4:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   216f8:	481a      	ldr	r0, [pc, #104]	; (21764 <am_hal_ble_blocking_transfer.part.0+0x4cc>)
   216fa:	f36f 0241 	bfc	r2, #1, #1
   216fe:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   21702:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   21706:	e630      	b.n	2136a <am_hal_ble_blocking_transfer.part.0+0xd2>
   21708:	f64b 3080 	movw	r0, #48000	; 0xbb80
   2170c:	f001 faf2 	bl	22cf4 <am_hal_flash_delay>
   21710:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   21714:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
   21718:	e656      	b.n	213c8 <am_hal_ble_blocking_transfer.part.0+0x130>
   2171a:	2200      	movs	r2, #0
   2171c:	4613      	mov	r3, r2
   2171e:	f001 0160 	and.w	r1, r1, #96	; 0x60
   21722:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
   21726:	430b      	orrs	r3, r1
   21728:	4910      	ldr	r1, [pc, #64]	; (2176c <am_hal_ble_blocking_transfer.part.0+0x4d4>)
   2172a:	ea01 2000 	and.w	r0, r1, r0, lsl #8
   2172e:	4303      	orrs	r3, r0
   21730:	490b      	ldr	r1, [pc, #44]	; (21760 <am_hal_ble_blocking_transfer.part.0+0x4c8>)
   21732:	f043 0301 	orr.w	r3, r3, #1
   21736:	f8c1 2214 	str.w	r2, [r1, #532]	; 0x214
   2173a:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   2173e:	e764      	b.n	2160a <am_hal_ble_blocking_transfer.part.0+0x372>
   21740:	88b2      	ldrh	r2, [r6, #4]
   21742:	79b3      	ldrb	r3, [r6, #6]
   21744:	ba52      	rev16	r2, r2
   21746:	b292      	uxth	r2, r2
   21748:	061b      	lsls	r3, r3, #24
   2174a:	e7e8      	b.n	2171e <am_hal_ble_blocking_transfer.part.0+0x486>
   2174c:	7973      	ldrb	r3, [r6, #5]
   2174e:	7932      	ldrb	r2, [r6, #4]
   21750:	061b      	lsls	r3, r3, #24
   21752:	e7e4      	b.n	2171e <am_hal_ble_blocking_transfer.part.0+0x486>
   21754:	7933      	ldrb	r3, [r6, #4]
   21756:	2200      	movs	r2, #0
   21758:	061b      	lsls	r3, r3, #24
   2175a:	e7e0      	b.n	2171e <am_hal_ble_blocking_transfer.part.0+0x486>
   2175c:	01775230 	.word	0x01775230
   21760:	5000c000 	.word	0x5000c000
   21764:	08000002 	.word	0x08000002
   21768:	08000009 	.word	0x08000009
   2176c:	000fff00 	.word	0x000fff00
   21770:	0007a121 	.word	0x0007a121

00021774 <am_hal_ble_initialize>:
   21774:	bb58      	cbnz	r0, 217ce <am_hal_ble_initialize+0x5a>
   21776:	b361      	cbz	r1, 217d2 <am_hal_ble_initialize+0x5e>
   21778:	4b17      	ldr	r3, [pc, #92]	; (217d8 <am_hal_ble_initialize+0x64>)
   2177a:	78d8      	ldrb	r0, [r3, #3]
   2177c:	b410      	push	{r4}
   2177e:	f3c0 0400 	ubfx	r4, r0, #0, #1
   21782:	f010 0001 	ands.w	r0, r0, #1
   21786:	d11e      	bne.n	217c6 <am_hal_ble_initialize+0x52>
   21788:	681a      	ldr	r2, [r3, #0]
   2178a:	f883 4047 	strb.w	r4, [r3, #71]	; 0x47
   2178e:	e9c3 0004 	strd	r0, r0, [r3, #16]
   21792:	e9c3 0006 	strd	r0, r0, [r3, #24]
   21796:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
   2179a:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
   2179e:	721c      	strb	r4, [r3, #8]
   217a0:	4c0e      	ldr	r4, [pc, #56]	; (217dc <am_hal_ble_initialize+0x68>)
   217a2:	60d8      	str	r0, [r3, #12]
   217a4:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   217a8:	6258      	str	r0, [r3, #36]	; 0x24
   217aa:	6218      	str	r0, [r3, #32]
   217ac:	4314      	orrs	r4, r2
   217ae:	6398      	str	r0, [r3, #56]	; 0x38
   217b0:	601c      	str	r4, [r3, #0]
   217b2:	63d8      	str	r0, [r3, #60]	; 0x3c
   217b4:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
   217b8:	f8c3 0043 	str.w	r0, [r3, #67]	; 0x43
   217bc:	6058      	str	r0, [r3, #4]
   217be:	f85d 4b04 	ldr.w	r4, [sp], #4
   217c2:	600b      	str	r3, [r1, #0]
   217c4:	4770      	bx	lr
   217c6:	2007      	movs	r0, #7
   217c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   217cc:	4770      	bx	lr
   217ce:	2005      	movs	r0, #5
   217d0:	4770      	bx	lr
   217d2:	2006      	movs	r0, #6
   217d4:	4770      	bx	lr
   217d6:	bf00      	nop
   217d8:	1000b56c 	.word	0x1000b56c
   217dc:	01775230 	.word	0x01775230

000217e0 <am_hal_ble_deinitialize>:
   217e0:	b128      	cbz	r0, 217ee <am_hal_ble_deinitialize+0xe>
   217e2:	6803      	ldr	r3, [r0, #0]
   217e4:	4a0d      	ldr	r2, [pc, #52]	; (2181c <am_hal_ble_deinitialize+0x3c>)
   217e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   217ea:	4293      	cmp	r3, r2
   217ec:	d001      	beq.n	217f2 <am_hal_ble_deinitialize+0x12>
   217ee:	2002      	movs	r0, #2
   217f0:	4770      	bx	lr
   217f2:	6802      	ldr	r2, [r0, #0]
   217f4:	2300      	movs	r3, #0
   217f6:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
   217fa:	e9c0 2300 	strd	r2, r3, [r0]
   217fe:	60c3      	str	r3, [r0, #12]
   21800:	6103      	str	r3, [r0, #16]
   21802:	6143      	str	r3, [r0, #20]
   21804:	6183      	str	r3, [r0, #24]
   21806:	61c3      	str	r3, [r0, #28]
   21808:	6203      	str	r3, [r0, #32]
   2180a:	63c3      	str	r3, [r0, #60]	; 0x3c
   2180c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
   21810:	f8c0 3043 	str.w	r3, [r0, #67]	; 0x43
   21814:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   21818:	4618      	mov	r0, r3
   2181a:	4770      	bx	lr
   2181c:	01775230 	.word	0x01775230

00021820 <am_hal_ble_config>:
   21820:	2800      	cmp	r0, #0
   21822:	d04e      	beq.n	218c2 <am_hal_ble_config+0xa2>
   21824:	6803      	ldr	r3, [r0, #0]
   21826:	4a3e      	ldr	r2, [pc, #248]	; (21920 <am_hal_ble_config+0x100>)
   21828:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2182c:	4293      	cmp	r3, r2
   2182e:	d148      	bne.n	218c2 <am_hal_ble_config+0xa2>
   21830:	b470      	push	{r4, r5, r6}
   21832:	4b3c      	ldr	r3, [pc, #240]	; (21924 <am_hal_ble_config+0x104>)
   21834:	6844      	ldr	r4, [r0, #4]
   21836:	2203      	movs	r2, #3
   21838:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   2183c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21840:	f36f 4251 	bfc	r2, #17, #1
   21844:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21848:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2184c:	f36f 4210 	bfc	r2, #16, #1
   21850:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21854:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   21858:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   2185c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   21860:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   21864:	6888      	ldr	r0, [r1, #8]
   21866:	f360 220d 	bfi	r2, r0, #8, #6
   2186a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   2186e:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   21872:	6848      	ldr	r0, [r1, #4]
   21874:	f360 0205 	bfi	r2, r0, #0, #6
   21878:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   2187c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   21880:	f042 0201 	orr.w	r2, r2, #1
   21884:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   21888:	680b      	ldr	r3, [r1, #0]
   2188a:	68c8      	ldr	r0, [r1, #12]
   2188c:	4a25      	ldr	r2, [pc, #148]	; (21924 <am_hal_ble_config+0x104>)
   2188e:	021b      	lsls	r3, r3, #8
   21890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   21894:	2802      	cmp	r0, #2
   21896:	bf08      	it	eq
   21898:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   2189c:	f043 0301 	orr.w	r3, r3, #1
   218a0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   218a4:	4b20      	ldr	r3, [pc, #128]	; (21928 <am_hal_ble_config+0x108>)
   218a6:	68db      	ldr	r3, [r3, #12]
   218a8:	b2db      	uxtb	r3, r3
   218aa:	2b12      	cmp	r3, #18
   218ac:	d00b      	beq.n	218c6 <am_hal_ble_config+0xa6>
   218ae:	4b1f      	ldr	r3, [pc, #124]	; (2192c <am_hal_ble_config+0x10c>)
   218b0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   218b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   218b8:	7e8b      	ldrb	r3, [r1, #26]
   218ba:	7223      	strb	r3, [r4, #8]
   218bc:	2000      	movs	r0, #0
   218be:	bc70      	pop	{r4, r5, r6}
   218c0:	4770      	bx	lr
   218c2:	2002      	movs	r0, #2
   218c4:	4770      	bx	lr
   218c6:	4e1a      	ldr	r6, [pc, #104]	; (21930 <am_hal_ble_config+0x110>)
   218c8:	68f2      	ldr	r2, [r6, #12]
   218ca:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   218ce:	690b      	ldr	r3, [r1, #16]
   218d0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
   218d4:	690b      	ldr	r3, [r1, #16]
   218d6:	0a1b      	lsrs	r3, r3, #8
   218d8:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
   218dc:	694b      	ldr	r3, [r1, #20]
   218de:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
   218e2:	694b      	ldr	r3, [r1, #20]
   218e4:	0a1b      	lsrs	r3, r3, #8
   218e6:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
   218ea:	7e4b      	ldrb	r3, [r1, #25]
   218ec:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
   218f0:	7e0b      	ldrb	r3, [r1, #24]
   218f2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
   218f6:	6873      	ldr	r3, [r6, #4]
   218f8:	b183      	cbz	r3, 2191c <am_hal_ble_config+0xfc>
   218fa:	3b01      	subs	r3, #1
   218fc:	4d0d      	ldr	r5, [pc, #52]	; (21934 <am_hal_ble_config+0x114>)
   218fe:	eb02 0c03 	add.w	ip, r2, r3
   21902:	3a01      	subs	r2, #1
   21904:	2300      	movs	r3, #0
   21906:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2190a:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   2190e:	4562      	cmp	r2, ip
   21910:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
   21914:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   21918:	b29b      	uxth	r3, r3
   2191a:	d1f4      	bne.n	21906 <am_hal_ble_config+0xe6>
   2191c:	60b3      	str	r3, [r6, #8]
   2191e:	e7c6      	b.n	218ae <am_hal_ble_config+0x8e>
   21920:	01775230 	.word	0x01775230
   21924:	5000c000 	.word	0x5000c000
   21928:	40020000 	.word	0x40020000
   2192c:	1000b56c 	.word	0x1000b56c
   21930:	10002fbc 	.word	0x10002fbc
   21934:	00026504 	.word	0x00026504

00021938 <am_hal_ble_power_control>:
   21938:	b538      	push	{r3, r4, r5, lr}
   2193a:	2800      	cmp	r0, #0
   2193c:	f000 8086 	beq.w	21a4c <am_hal_ble_power_control+0x114>
   21940:	6803      	ldr	r3, [r0, #0]
   21942:	4a50      	ldr	r2, [pc, #320]	; (21a84 <am_hal_ble_power_control+0x14c>)
   21944:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21948:	4293      	cmp	r3, r2
   2194a:	d17f      	bne.n	21a4c <am_hal_ble_power_control+0x114>
   2194c:	2900      	cmp	r1, #0
   2194e:	d154      	bne.n	219fa <am_hal_ble_power_control+0xc2>
   21950:	4b4d      	ldr	r3, [pc, #308]	; (21a88 <am_hal_ble_power_control+0x150>)
   21952:	699b      	ldr	r3, [r3, #24]
   21954:	05db      	lsls	r3, r3, #23
   21956:	d44d      	bmi.n	219f4 <am_hal_ble_power_control+0xbc>
   21958:	4d4c      	ldr	r5, [pc, #304]	; (21a8c <am_hal_ble_power_control+0x154>)
   2195a:	69ab      	ldr	r3, [r5, #24]
   2195c:	f043 0301 	orr.w	r3, r3, #1
   21960:	61ab      	str	r3, [r5, #24]
   21962:	69ab      	ldr	r3, [r5, #24]
   21964:	f003 0307 	and.w	r3, r3, #7
   21968:	2b07      	cmp	r3, #7
   2196a:	d00c      	beq.n	21986 <am_hal_ble_power_control+0x4e>
   2196c:	4c48      	ldr	r4, [pc, #288]	; (21a90 <am_hal_ble_power_control+0x158>)
   2196e:	e002      	b.n	21976 <am_hal_ble_power_control+0x3e>
   21970:	3c01      	subs	r4, #1
   21972:	f000 8083 	beq.w	21a7c <am_hal_ble_power_control+0x144>
   21976:	2010      	movs	r0, #16
   21978:	f001 f9bc 	bl	22cf4 <am_hal_flash_delay>
   2197c:	69ab      	ldr	r3, [r5, #24]
   2197e:	f003 0307 	and.w	r3, r3, #7
   21982:	2b07      	cmp	r3, #7
   21984:	d1f4      	bne.n	21970 <am_hal_ble_power_control+0x38>
   21986:	200e      	movs	r0, #14
   21988:	f001 fc6c 	bl	23264 <am_hal_pwrctrl_periph_enable>
   2198c:	2800      	cmp	r0, #0
   2198e:	d173      	bne.n	21a78 <am_hal_ble_power_control+0x140>
   21990:	4b40      	ldr	r3, [pc, #256]	; (21a94 <am_hal_ble_power_control+0x15c>)
   21992:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21996:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   2199a:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   2199e:	4a3b      	ldr	r2, [pc, #236]	; (21a8c <am_hal_ble_power_control+0x154>)
   219a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   219a4:	f360 01df 	bfi	r1, r0, #3, #29
   219a8:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   219ac:	68d3      	ldr	r3, [r2, #12]
   219ae:	b2db      	uxtb	r3, r3
   219b0:	2b11      	cmp	r3, #17
   219b2:	d85a      	bhi.n	21a6a <am_hal_ble_power_control+0x132>
   219b4:	2304      	movs	r3, #4
   219b6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   219ba:	4d36      	ldr	r5, [pc, #216]	; (21a94 <am_hal_ble_power_control+0x15c>)
   219bc:	4836      	ldr	r0, [pc, #216]	; (21a98 <am_hal_ble_power_control+0x160>)
   219be:	f001 f999 	bl	22cf4 <am_hal_flash_delay>
   219c2:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   219c6:	f043 0301 	orr.w	r3, r3, #1
   219ca:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   219ce:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   219d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
   219d6:	2b03      	cmp	r3, #3
   219d8:	d00c      	beq.n	219f4 <am_hal_ble_power_control+0xbc>
   219da:	4c30      	ldr	r4, [pc, #192]	; (21a9c <am_hal_ble_power_control+0x164>)
   219dc:	e001      	b.n	219e2 <am_hal_ble_power_control+0xaa>
   219de:	3c01      	subs	r4, #1
   219e0:	d04e      	beq.n	21a80 <am_hal_ble_power_control+0x148>
   219e2:	2010      	movs	r0, #16
   219e4:	f001 f986 	bl	22cf4 <am_hal_flash_delay>
   219e8:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   219ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
   219f0:	2b03      	cmp	r3, #3
   219f2:	d1f4      	bne.n	219de <am_hal_ble_power_control+0xa6>
   219f4:	2400      	movs	r4, #0
   219f6:	4620      	mov	r0, r4
   219f8:	bd38      	pop	{r3, r4, r5, pc}
   219fa:	2901      	cmp	r1, #1
   219fc:	d129      	bne.n	21a52 <am_hal_ble_power_control+0x11a>
   219fe:	4b25      	ldr	r3, [pc, #148]	; (21a94 <am_hal_ble_power_control+0x15c>)
   21a00:	4a22      	ldr	r2, [pc, #136]	; (21a8c <am_hal_ble_power_control+0x154>)
   21a02:	2100      	movs	r1, #0
   21a04:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   21a08:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   21a0c:	f361 00df 	bfi	r0, r1, #3, #29
   21a10:	f8c3 0410 	str.w	r0, [r3, #1040]	; 0x410
   21a14:	68d3      	ldr	r3, [r2, #12]
   21a16:	b2db      	uxtb	r3, r3
   21a18:	2b11      	cmp	r3, #17
   21a1a:	d91d      	bls.n	21a58 <am_hal_ble_power_control+0x120>
   21a1c:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   21a20:	f361 1345 	bfi	r3, r1, #5, #1
   21a24:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   21a28:	4b1a      	ldr	r3, [pc, #104]	; (21a94 <am_hal_ble_power_control+0x15c>)
   21a2a:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   21a2e:	f36f 0200 	bfc	r2, #0, #1
   21a32:	200e      	movs	r0, #14
   21a34:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   21a38:	f001 fc3e 	bl	232b8 <am_hal_pwrctrl_periph_disable>
   21a3c:	4604      	mov	r4, r0
   21a3e:	b990      	cbnz	r0, 21a66 <am_hal_ble_power_control+0x12e>
   21a40:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   21a44:	f001 f956 	bl	22cf4 <am_hal_flash_delay>
   21a48:	4620      	mov	r0, r4
   21a4a:	bd38      	pop	{r3, r4, r5, pc}
   21a4c:	2402      	movs	r4, #2
   21a4e:	4620      	mov	r0, r4
   21a50:	bd38      	pop	{r3, r4, r5, pc}
   21a52:	2407      	movs	r4, #7
   21a54:	4620      	mov	r0, r4
   21a56:	bd38      	pop	{r3, r4, r5, pc}
   21a58:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
   21a5c:	f023 0304 	bic.w	r3, r3, #4
   21a60:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
   21a64:	e7e0      	b.n	21a28 <am_hal_ble_power_control+0xf0>
   21a66:	4c0e      	ldr	r4, [pc, #56]	; (21aa0 <am_hal_ble_power_control+0x168>)
   21a68:	e7c5      	b.n	219f6 <am_hal_ble_power_control+0xbe>
   21a6a:	f892 3198 	ldrb.w	r3, [r2, #408]	; 0x198
   21a6e:	f043 0320 	orr.w	r3, r3, #32
   21a72:	f882 3198 	strb.w	r3, [r2, #408]	; 0x198
   21a76:	e7a0      	b.n	219ba <am_hal_ble_power_control+0x82>
   21a78:	4c0a      	ldr	r4, [pc, #40]	; (21aa4 <am_hal_ble_power_control+0x16c>)
   21a7a:	e7bc      	b.n	219f6 <am_hal_ble_power_control+0xbe>
   21a7c:	4c0a      	ldr	r4, [pc, #40]	; (21aa8 <am_hal_ble_power_control+0x170>)
   21a7e:	e7ba      	b.n	219f6 <am_hal_ble_power_control+0xbe>
   21a80:	4c0a      	ldr	r4, [pc, #40]	; (21aac <am_hal_ble_power_control+0x174>)
   21a82:	e7b8      	b.n	219f6 <am_hal_ble_power_control+0xbe>
   21a84:	01775230 	.word	0x01775230
   21a88:	40021000 	.word	0x40021000
   21a8c:	40020000 	.word	0x40020000
   21a90:	000186a0 	.word	0x000186a0
   21a94:	5000c000 	.word	0x5000c000
   21a98:	00013880 	.word	0x00013880
   21a9c:	000f4240 	.word	0x000f4240
   21aa0:	08000006 	.word	0x08000006
   21aa4:	08000007 	.word	0x08000007
   21aa8:	08000005 	.word	0x08000005
   21aac:	08000008 	.word	0x08000008

00021ab0 <am_hal_ble_patch_apply>:
   21ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ab4:	b093      	sub	sp, #76	; 0x4c
   21ab6:	2800      	cmp	r0, #0
   21ab8:	d05c      	beq.n	21b74 <am_hal_ble_patch_apply+0xc4>
   21aba:	6803      	ldr	r3, [r0, #0]
   21abc:	4ab7      	ldr	r2, [pc, #732]	; (21d9c <am_hal_ble_patch_apply+0x2ec>)
   21abe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21ac2:	4293      	cmp	r3, r2
   21ac4:	4605      	mov	r5, r0
   21ac6:	d155      	bne.n	21b74 <am_hal_ble_patch_apply+0xc4>
   21ac8:	4688      	mov	r8, r1
   21aca:	6809      	ldr	r1, [r1, #0]
   21acc:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   21ad0:	f88d 1009 	strb.w	r1, [sp, #9]
   21ad4:	2001      	movs	r0, #1
   21ad6:	f240 21f1 	movw	r1, #753	; 0x2f1
   21ada:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 21db0 <am_hal_ble_patch_apply+0x300>
   21ade:	f88d 0008 	strb.w	r0, [sp, #8]
   21ae2:	f8ad 100a 	strh.w	r1, [sp, #10]
   21ae6:	f8ad 200c 	strh.w	r2, [sp, #12]
   21aea:	f241 3788 	movw	r7, #5000	; 0x1388
   21aee:	2400      	movs	r4, #0
   21af0:	4699      	mov	r9, r3
   21af2:	aa02      	add	r2, sp, #8
   21af4:	454b      	cmp	r3, r9
   21af6:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
   21afa:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
   21afe:	a90c      	add	r1, sp, #48	; 0x30
   21b00:	4628      	mov	r0, r5
   21b02:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   21b06:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
   21b0a:	d014      	beq.n	21b36 <am_hal_ble_patch_apply+0x86>
   21b0c:	4ba4      	ldr	r3, [pc, #656]	; (21da0 <am_hal_ble_patch_apply+0x2f0>)
   21b0e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   21b12:	061b      	lsls	r3, r3, #24
   21b14:	d41a      	bmi.n	21b4c <am_hal_ble_patch_apply+0x9c>
   21b16:	4ea3      	ldr	r6, [pc, #652]	; (21da4 <am_hal_ble_patch_apply+0x2f4>)
   21b18:	4ca1      	ldr	r4, [pc, #644]	; (21da0 <am_hal_ble_patch_apply+0x2f0>)
   21b1a:	2010      	movs	r0, #16
   21b1c:	f001 f8ea 	bl	22cf4 <am_hal_flash_delay>
   21b20:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   21b24:	061f      	lsls	r7, r3, #24
   21b26:	d411      	bmi.n	21b4c <am_hal_ble_patch_apply+0x9c>
   21b28:	3e01      	subs	r6, #1
   21b2a:	d1f6      	bne.n	21b1a <am_hal_ble_patch_apply+0x6a>
   21b2c:	4e9e      	ldr	r6, [pc, #632]	; (21da8 <am_hal_ble_patch_apply+0x2f8>)
   21b2e:	4630      	mov	r0, r6
   21b30:	b013      	add	sp, #76	; 0x4c
   21b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b36:	f7ff fbaf 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   21b3a:	4606      	mov	r6, r0
   21b3c:	2800      	cmp	r0, #0
   21b3e:	d0e5      	beq.n	21b0c <am_hal_ble_patch_apply+0x5c>
   21b40:	3f01      	subs	r7, #1
   21b42:	d0f4      	beq.n	21b2e <am_hal_ble_patch_apply+0x7e>
   21b44:	682b      	ldr	r3, [r5, #0]
   21b46:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21b4a:	e7d2      	b.n	21af2 <am_hal_ble_patch_apply+0x42>
   21b4c:	2300      	movs	r3, #0
   21b4e:	e9cd 3307 	strd	r3, r3, [sp, #28]
   21b52:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   21b56:	930b      	str	r3, [sp, #44]	; 0x2c
   21b58:	2302      	movs	r3, #2
   21b5a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   21b5e:	2305      	movs	r3, #5
   21b60:	f8ad 3020 	strh.w	r3, [sp, #32]
   21b64:	682b      	ldr	r3, [r5, #0]
   21b66:	f023 4b7e 	bic.w	fp, r3, #4261412864	; 0xfe000000
   21b6a:	4b8c      	ldr	r3, [pc, #560]	; (21d9c <am_hal_ble_patch_apply+0x2ec>)
   21b6c:	aa02      	add	r2, sp, #8
   21b6e:	459b      	cmp	fp, r3
   21b70:	9206      	str	r2, [sp, #24]
   21b72:	d004      	beq.n	21b7e <am_hal_ble_patch_apply+0xce>
   21b74:	2602      	movs	r6, #2
   21b76:	4630      	mov	r0, r6
   21b78:	b013      	add	sp, #76	; 0x4c
   21b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b7e:	a906      	add	r1, sp, #24
   21b80:	4628      	mov	r0, r5
   21b82:	f7ff fb89 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   21b86:	4606      	mov	r6, r0
   21b88:	2800      	cmp	r0, #0
   21b8a:	d1d0      	bne.n	21b2e <am_hal_ble_patch_apply+0x7e>
   21b8c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   21b90:	f8d8 3000 	ldr.w	r3, [r8]
   21b94:	2904      	cmp	r1, #4
   21b96:	b2da      	uxtb	r2, r3
   21b98:	f040 80fb 	bne.w	21d92 <am_hal_ble_patch_apply+0x2e2>
   21b9c:	f89d 1009 	ldrb.w	r1, [sp, #9]
   21ba0:	4291      	cmp	r1, r2
   21ba2:	f040 80f6 	bne.w	21d92 <am_hal_ble_patch_apply+0x2e2>
   21ba6:	f89d 100a 	ldrb.w	r1, [sp, #10]
   21baa:	29f1      	cmp	r1, #241	; 0xf1
   21bac:	f040 80f1 	bne.w	21d92 <am_hal_ble_patch_apply+0x2e2>
   21bb0:	f89d 100b 	ldrb.w	r1, [sp, #11]
   21bb4:	2901      	cmp	r1, #1
   21bb6:	f040 80ec 	bne.w	21d92 <am_hal_ble_patch_apply+0x2e2>
   21bba:	f89d 100c 	ldrb.w	r1, [sp, #12]
   21bbe:	2900      	cmp	r1, #0
   21bc0:	f040 80e7 	bne.w	21d92 <am_hal_ble_patch_apply+0x2e2>
   21bc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   21bc8:	9101      	str	r1, [sp, #4]
   21bca:	2900      	cmp	r1, #0
   21bcc:	d07d      	beq.n	21cca <am_hal_ble_patch_apply+0x21a>
   21bce:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 21db4 <am_hal_ble_patch_apply+0x304>
   21bd2:	4f73      	ldr	r7, [pc, #460]	; (21da0 <am_hal_ble_patch_apply+0x2f0>)
   21bd4:	f88a 3001 	strb.w	r3, [sl, #1]
   21bd8:	9b01      	ldr	r3, [sp, #4]
   21bda:	f8d8 100c 	ldr.w	r1, [r8, #12]
   21bde:	4873      	ldr	r0, [pc, #460]	; (21dac <am_hal_ble_patch_apply+0x2fc>)
   21be0:	f8cd a018 	str.w	sl, [sp, #24]
   21be4:	2b80      	cmp	r3, #128	; 0x80
   21be6:	bf28      	it	cs
   21be8:	2380      	movcs	r3, #128	; 0x80
   21bea:	4699      	mov	r9, r3
   21bec:	f88a 3003 	strb.w	r3, [sl, #3]
   21bf0:	f026 0303 	bic.w	r3, r6, #3
   21bf4:	4419      	add	r1, r3
   21bf6:	2300      	movs	r3, #0
   21bf8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   21bfc:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   21c00:	930b      	str	r3, [sp, #44]	; 0x2c
   21c02:	2301      	movs	r3, #1
   21c04:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   21c08:	f88a 3000 	strb.w	r3, [sl]
   21c0c:	f109 0304 	add.w	r3, r9, #4
   21c10:	f8ad 3020 	strh.w	r3, [sp, #32]
   21c14:	23f2      	movs	r3, #242	; 0xf2
   21c16:	f88a 3002 	strb.w	r3, [sl, #2]
   21c1a:	464a      	mov	r2, r9
   21c1c:	f7ea fa70 	bl	c100 <memcpy>
   21c20:	682b      	ldr	r3, [r5, #0]
   21c22:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21c26:	455b      	cmp	r3, fp
   21c28:	d1a4      	bne.n	21b74 <am_hal_ble_patch_apply+0xc4>
   21c2a:	a906      	add	r1, sp, #24
   21c2c:	4628      	mov	r0, r5
   21c2e:	f7ff fb33 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   21c32:	2800      	cmp	r0, #0
   21c34:	f040 80cc 	bne.w	21dd0 <am_hal_ble_patch_apply+0x320>
   21c38:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   21c3c:	061c      	lsls	r4, r3, #24
   21c3e:	d40b      	bmi.n	21c58 <am_hal_ble_patch_apply+0x1a8>
   21c40:	4c58      	ldr	r4, [pc, #352]	; (21da4 <am_hal_ble_patch_apply+0x2f4>)
   21c42:	e002      	b.n	21c4a <am_hal_ble_patch_apply+0x19a>
   21c44:	3c01      	subs	r4, #1
   21c46:	f43f af71 	beq.w	21b2c <am_hal_ble_patch_apply+0x7c>
   21c4a:	2010      	movs	r0, #16
   21c4c:	f001 f852 	bl	22cf4 <am_hal_flash_delay>
   21c50:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   21c54:	0618      	lsls	r0, r3, #24
   21c56:	d5f5      	bpl.n	21c44 <am_hal_ble_patch_apply+0x194>
   21c58:	ab02      	add	r3, sp, #8
   21c5a:	9306      	str	r3, [sp, #24]
   21c5c:	682b      	ldr	r3, [r5, #0]
   21c5e:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   21c62:	2300      	movs	r3, #0
   21c64:	e9cd 3307 	strd	r3, r3, [sp, #28]
   21c68:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   21c6c:	930b      	str	r3, [sp, #44]	; 0x2c
   21c6e:	2302      	movs	r3, #2
   21c70:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   21c74:	455a      	cmp	r2, fp
   21c76:	f04f 0305 	mov.w	r3, #5
   21c7a:	f8ad 3020 	strh.w	r3, [sp, #32]
   21c7e:	f47f af79 	bne.w	21b74 <am_hal_ble_patch_apply+0xc4>
   21c82:	a906      	add	r1, sp, #24
   21c84:	4628      	mov	r0, r5
   21c86:	f7ff fb07 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   21c8a:	2800      	cmp	r0, #0
   21c8c:	f040 80a0 	bne.w	21dd0 <am_hal_ble_patch_apply+0x320>
   21c90:	f89d 1008 	ldrb.w	r1, [sp, #8]
   21c94:	f8d8 3000 	ldr.w	r3, [r8]
   21c98:	2904      	cmp	r1, #4
   21c9a:	b2da      	uxtb	r2, r3
   21c9c:	d179      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21c9e:	f89d 1009 	ldrb.w	r1, [sp, #9]
   21ca2:	4291      	cmp	r1, r2
   21ca4:	d175      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21ca6:	f89d 100a 	ldrb.w	r1, [sp, #10]
   21caa:	29f2      	cmp	r1, #242	; 0xf2
   21cac:	d171      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21cae:	f89d 100b 	ldrb.w	r1, [sp, #11]
   21cb2:	2901      	cmp	r1, #1
   21cb4:	d16d      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21cb6:	f89d 100c 	ldrb.w	r1, [sp, #12]
   21cba:	2900      	cmp	r1, #0
   21cbc:	d169      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21cbe:	9901      	ldr	r1, [sp, #4]
   21cc0:	ebb1 0109 	subs.w	r1, r1, r9
   21cc4:	444e      	add	r6, r9
   21cc6:	9101      	str	r1, [sp, #4]
   21cc8:	d184      	bne.n	21bd4 <am_hal_ble_patch_apply+0x124>
   21cca:	f88d 2009 	strb.w	r2, [sp, #9]
   21cce:	2200      	movs	r2, #0
   21cd0:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   21cd4:	920d      	str	r2, [sp, #52]	; 0x34
   21cd6:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   21cda:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   21cde:	f8ad 200c 	strh.w	r2, [sp, #12]
   21ce2:	ab02      	add	r3, sp, #8
   21ce4:	4a32      	ldr	r2, [pc, #200]	; (21db0 <am_hal_ble_patch_apply+0x300>)
   21ce6:	930c      	str	r3, [sp, #48]	; 0x30
   21ce8:	920e      	str	r2, [sp, #56]	; 0x38
   21cea:	682b      	ldr	r3, [r5, #0]
   21cec:	492b      	ldr	r1, [pc, #172]	; (21d9c <am_hal_ble_patch_apply+0x2ec>)
   21cee:	2201      	movs	r2, #1
   21cf0:	f88d 2008 	strb.w	r2, [sp, #8]
   21cf4:	f240 22f3 	movw	r2, #755	; 0x2f3
   21cf8:	f8ad 200a 	strh.w	r2, [sp, #10]
   21cfc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
   21d00:	428a      	cmp	r2, r1
   21d02:	d059      	beq.n	21db8 <am_hal_ble_patch_apply+0x308>
   21d04:	4a26      	ldr	r2, [pc, #152]	; (21da0 <am_hal_ble_patch_apply+0x2f0>)
   21d06:	f8d2 230c 	ldr.w	r2, [r2, #780]	; 0x30c
   21d0a:	0611      	lsls	r1, r2, #24
   21d0c:	d40d      	bmi.n	21d2a <am_hal_ble_patch_apply+0x27a>
   21d0e:	4c25      	ldr	r4, [pc, #148]	; (21da4 <am_hal_ble_patch_apply+0x2f4>)
   21d10:	4e23      	ldr	r6, [pc, #140]	; (21da0 <am_hal_ble_patch_apply+0x2f0>)
   21d12:	e002      	b.n	21d1a <am_hal_ble_patch_apply+0x26a>
   21d14:	3c01      	subs	r4, #1
   21d16:	f43f af09 	beq.w	21b2c <am_hal_ble_patch_apply+0x7c>
   21d1a:	2010      	movs	r0, #16
   21d1c:	f000 ffea 	bl	22cf4 <am_hal_flash_delay>
   21d20:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   21d24:	061b      	lsls	r3, r3, #24
   21d26:	d5f5      	bpl.n	21d14 <am_hal_ble_patch_apply+0x264>
   21d28:	682b      	ldr	r3, [r5, #0]
   21d2a:	491c      	ldr	r1, [pc, #112]	; (21d9c <am_hal_ble_patch_apply+0x2ec>)
   21d2c:	aa02      	add	r2, sp, #8
   21d2e:	9206      	str	r2, [sp, #24]
   21d30:	2200      	movs	r2, #0
   21d32:	e9cd 2207 	strd	r2, r2, [sp, #28]
   21d36:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
   21d3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21d3e:	920b      	str	r2, [sp, #44]	; 0x2c
   21d40:	2202      	movs	r2, #2
   21d42:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   21d46:	428b      	cmp	r3, r1
   21d48:	f04f 0205 	mov.w	r2, #5
   21d4c:	f8ad 2020 	strh.w	r2, [sp, #32]
   21d50:	f47f af10 	bne.w	21b74 <am_hal_ble_patch_apply+0xc4>
   21d54:	a906      	add	r1, sp, #24
   21d56:	4628      	mov	r0, r5
   21d58:	f7ff fa9e 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   21d5c:	4606      	mov	r6, r0
   21d5e:	2800      	cmp	r0, #0
   21d60:	f47f aee5 	bne.w	21b2e <am_hal_ble_patch_apply+0x7e>
   21d64:	f89d 2008 	ldrb.w	r2, [sp, #8]
   21d68:	f898 3000 	ldrb.w	r3, [r8]
   21d6c:	2a04      	cmp	r2, #4
   21d6e:	d110      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21d70:	f89d 2009 	ldrb.w	r2, [sp, #9]
   21d74:	429a      	cmp	r2, r3
   21d76:	d10c      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21d78:	f89d 300a 	ldrb.w	r3, [sp, #10]
   21d7c:	2bf3      	cmp	r3, #243	; 0xf3
   21d7e:	d108      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21d80:	f89d 300b 	ldrb.w	r3, [sp, #11]
   21d84:	2b01      	cmp	r3, #1
   21d86:	d104      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21d88:	f89d 300c 	ldrb.w	r3, [sp, #12]
   21d8c:	2b00      	cmp	r3, #0
   21d8e:	f43f aece 	beq.w	21b2e <am_hal_ble_patch_apply+0x7e>
   21d92:	2601      	movs	r6, #1
   21d94:	4630      	mov	r0, r6
   21d96:	b013      	add	sp, #76	; 0x4c
   21d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d9c:	01775230 	.word	0x01775230
   21da0:	5000c000 	.word	0x5000c000
   21da4:	000f4240 	.word	0x000f4240
   21da8:	08000004 	.word	0x08000004
   21dac:	1000b4ec 	.word	0x1000b4ec
   21db0:	00010006 	.word	0x00010006
   21db4:	1000b4e8 	.word	0x1000b4e8
   21db8:	a90c      	add	r1, sp, #48	; 0x30
   21dba:	4628      	mov	r0, r5
   21dbc:	f7ff fa6c 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   21dc0:	2800      	cmp	r0, #0
   21dc2:	d1e6      	bne.n	21d92 <am_hal_ble_patch_apply+0x2e2>
   21dc4:	4b03      	ldr	r3, [pc, #12]	; (21dd4 <am_hal_ble_patch_apply+0x324>)
   21dc6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   21dca:	061a      	lsls	r2, r3, #24
   21dcc:	d59f      	bpl.n	21d0e <am_hal_ble_patch_apply+0x25e>
   21dce:	e7ab      	b.n	21d28 <am_hal_ble_patch_apply+0x278>
   21dd0:	4606      	mov	r6, r0
   21dd2:	e6ac      	b.n	21b2e <am_hal_ble_patch_apply+0x7e>
   21dd4:	5000c000 	.word	0x5000c000

00021dd8 <am_hal_ble_patch_copy_end_apply>:
   21dd8:	2800      	cmp	r0, #0
   21dda:	d076      	beq.n	21eca <am_hal_ble_patch_copy_end_apply+0xf2>
   21ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21de0:	6803      	ldr	r3, [r0, #0]
   21de2:	4a3c      	ldr	r2, [pc, #240]	; (21ed4 <am_hal_ble_patch_copy_end_apply+0xfc>)
   21de4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21de8:	4293      	cmp	r3, r2
   21dea:	b08b      	sub	sp, #44	; 0x2c
   21dec:	4606      	mov	r6, r0
   21dee:	d168      	bne.n	21ec2 <am_hal_ble_patch_copy_end_apply+0xea>
   21df0:	4a39      	ldr	r2, [pc, #228]	; (21ed8 <am_hal_ble_patch_copy_end_apply+0x100>)
   21df2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 21ee8 <am_hal_ble_patch_copy_end_apply+0x110>
   21df6:	9200      	str	r2, [sp, #0]
   21df8:	2400      	movs	r4, #0
   21dfa:	f8ad 4004 	strh.w	r4, [sp, #4]
   21dfe:	f241 3588 	movw	r5, #5000	; 0x1388
   21e02:	4698      	mov	r8, r3
   21e04:	af04      	add	r7, sp, #16
   21e06:	4543      	cmp	r3, r8
   21e08:	e9cd 4905 	strd	r4, r9, [sp, #20]
   21e0c:	e9cd 4408 	strd	r4, r4, [sp, #32]
   21e10:	4639      	mov	r1, r7
   21e12:	4630      	mov	r0, r6
   21e14:	f8cd d010 	str.w	sp, [sp, #16]
   21e18:	f88d 401c 	strb.w	r4, [sp, #28]
   21e1c:	d013      	beq.n	21e46 <am_hal_ble_patch_copy_end_apply+0x6e>
   21e1e:	4b2f      	ldr	r3, [pc, #188]	; (21edc <am_hal_ble_patch_copy_end_apply+0x104>)
   21e20:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   21e24:	061a      	lsls	r2, r3, #24
   21e26:	d419      	bmi.n	21e5c <am_hal_ble_patch_copy_end_apply+0x84>
   21e28:	4d2d      	ldr	r5, [pc, #180]	; (21ee0 <am_hal_ble_patch_copy_end_apply+0x108>)
   21e2a:	4c2c      	ldr	r4, [pc, #176]	; (21edc <am_hal_ble_patch_copy_end_apply+0x104>)
   21e2c:	2010      	movs	r0, #16
   21e2e:	f000 ff61 	bl	22cf4 <am_hal_flash_delay>
   21e32:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   21e36:	061b      	lsls	r3, r3, #24
   21e38:	d40f      	bmi.n	21e5a <am_hal_ble_patch_copy_end_apply+0x82>
   21e3a:	3d01      	subs	r5, #1
   21e3c:	d1f6      	bne.n	21e2c <am_hal_ble_patch_copy_end_apply+0x54>
   21e3e:	4829      	ldr	r0, [pc, #164]	; (21ee4 <am_hal_ble_patch_copy_end_apply+0x10c>)
   21e40:	b00b      	add	sp, #44	; 0x2c
   21e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21e46:	f7ff fa27 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   21e4a:	2800      	cmp	r0, #0
   21e4c:	d0e7      	beq.n	21e1e <am_hal_ble_patch_copy_end_apply+0x46>
   21e4e:	3d01      	subs	r5, #1
   21e50:	d0f6      	beq.n	21e40 <am_hal_ble_patch_copy_end_apply+0x68>
   21e52:	6833      	ldr	r3, [r6, #0]
   21e54:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21e58:	e7d4      	b.n	21e04 <am_hal_ble_patch_copy_end_apply+0x2c>
   21e5a:	af04      	add	r7, sp, #16
   21e5c:	6832      	ldr	r2, [r6, #0]
   21e5e:	491d      	ldr	r1, [pc, #116]	; (21ed4 <am_hal_ble_patch_copy_end_apply+0xfc>)
   21e60:	f8cd d010 	str.w	sp, [sp, #16]
   21e64:	2300      	movs	r3, #0
   21e66:	e9cd 3305 	strd	r3, r3, [sp, #20]
   21e6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
   21e6e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   21e72:	9309      	str	r3, [sp, #36]	; 0x24
   21e74:	2302      	movs	r3, #2
   21e76:	f88d 301a 	strb.w	r3, [sp, #26]
   21e7a:	428a      	cmp	r2, r1
   21e7c:	f04f 0305 	mov.w	r3, #5
   21e80:	f8ad 3018 	strh.w	r3, [sp, #24]
   21e84:	d11d      	bne.n	21ec2 <am_hal_ble_patch_copy_end_apply+0xea>
   21e86:	4639      	mov	r1, r7
   21e88:	4630      	mov	r0, r6
   21e8a:	f7ff fa05 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   21e8e:	2800      	cmp	r0, #0
   21e90:	d1d6      	bne.n	21e40 <am_hal_ble_patch_copy_end_apply+0x68>
   21e92:	f89d 3000 	ldrb.w	r3, [sp]
   21e96:	2b04      	cmp	r3, #4
   21e98:	d119      	bne.n	21ece <am_hal_ble_patch_copy_end_apply+0xf6>
   21e9a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   21e9e:	2bee      	cmp	r3, #238	; 0xee
   21ea0:	d115      	bne.n	21ece <am_hal_ble_patch_copy_end_apply+0xf6>
   21ea2:	f89d 3002 	ldrb.w	r3, [sp, #2]
   21ea6:	2bf1      	cmp	r3, #241	; 0xf1
   21ea8:	d111      	bne.n	21ece <am_hal_ble_patch_copy_end_apply+0xf6>
   21eaa:	f89d 3003 	ldrb.w	r3, [sp, #3]
   21eae:	2b01      	cmp	r3, #1
   21eb0:	d10d      	bne.n	21ece <am_hal_ble_patch_copy_end_apply+0xf6>
   21eb2:	f89d 0004 	ldrb.w	r0, [sp, #4]
   21eb6:	3800      	subs	r0, #0
   21eb8:	bf18      	it	ne
   21eba:	2001      	movne	r0, #1
   21ebc:	b00b      	add	sp, #44	; 0x2c
   21ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21ec2:	2002      	movs	r0, #2
   21ec4:	b00b      	add	sp, #44	; 0x2c
   21ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21eca:	2002      	movs	r0, #2
   21ecc:	4770      	bx	lr
   21ece:	2001      	movs	r0, #1
   21ed0:	e7b6      	b.n	21e40 <am_hal_ble_patch_copy_end_apply+0x68>
   21ed2:	bf00      	nop
   21ed4:	01775230 	.word	0x01775230
   21ed8:	02f1ee01 	.word	0x02f1ee01
   21edc:	5000c000 	.word	0x5000c000
   21ee0:	000f4240 	.word	0x000f4240
   21ee4:	08000004 	.word	0x08000004
   21ee8:	00010006 	.word	0x00010006

00021eec <am_hal_ble_default_patch_apply>:
   21eec:	4a1c      	ldr	r2, [pc, #112]	; (21f60 <am_hal_ble_default_patch_apply+0x74>)
   21eee:	68d3      	ldr	r3, [r2, #12]
   21ef0:	b2db      	uxtb	r3, r3
   21ef2:	2b11      	cmp	r3, #17
   21ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ef8:	4605      	mov	r5, r0
   21efa:	d02c      	beq.n	21f56 <am_hal_ble_default_patch_apply+0x6a>
   21efc:	68d3      	ldr	r3, [r2, #12]
   21efe:	b2db      	uxtb	r3, r3
   21f00:	2b12      	cmp	r3, #18
   21f02:	d028      	beq.n	21f56 <am_hal_ble_default_patch_apply+0x6a>
   21f04:	4a17      	ldr	r2, [pc, #92]	; (21f64 <am_hal_ble_default_patch_apply+0x78>)
   21f06:	4b18      	ldr	r3, [pc, #96]	; (21f68 <am_hal_ble_default_patch_apply+0x7c>)
   21f08:	6816      	ldr	r6, [r2, #0]
   21f0a:	681b      	ldr	r3, [r3, #0]
   21f0c:	b306      	cbz	r6, 21f50 <am_hal_ble_default_patch_apply+0x64>
   21f0e:	4c17      	ldr	r4, [pc, #92]	; (21f6c <am_hal_ble_default_patch_apply+0x80>)
   21f10:	f1a3 0804 	sub.w	r8, r3, #4
   21f14:	2700      	movs	r7, #0
   21f16:	f858 1f04 	ldr.w	r1, [r8, #4]!
   21f1a:	684b      	ldr	r3, [r1, #4]
   21f1c:	68ca      	ldr	r2, [r1, #12]
   21f1e:	b17b      	cbz	r3, 21f40 <am_hal_ble_default_patch_apply+0x54>
   21f20:	3b01      	subs	r3, #1
   21f22:	eb02 0c03 	add.w	ip, r2, r3
   21f26:	1e50      	subs	r0, r2, #1
   21f28:	2300      	movs	r3, #0
   21f2a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   21f2e:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   21f32:	4584      	cmp	ip, r0
   21f34:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
   21f38:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   21f3c:	b29b      	uxth	r3, r3
   21f3e:	d1f4      	bne.n	21f2a <am_hal_ble_default_patch_apply+0x3e>
   21f40:	608b      	str	r3, [r1, #8]
   21f42:	4628      	mov	r0, r5
   21f44:	f7ff fdb4 	bl	21ab0 <am_hal_ble_patch_apply>
   21f48:	b918      	cbnz	r0, 21f52 <am_hal_ble_default_patch_apply+0x66>
   21f4a:	3701      	adds	r7, #1
   21f4c:	42be      	cmp	r6, r7
   21f4e:	d1e2      	bne.n	21f16 <am_hal_ble_default_patch_apply+0x2a>
   21f50:	2000      	movs	r0, #0
   21f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21f56:	4a06      	ldr	r2, [pc, #24]	; (21f70 <am_hal_ble_default_patch_apply+0x84>)
   21f58:	4b06      	ldr	r3, [pc, #24]	; (21f74 <am_hal_ble_default_patch_apply+0x88>)
   21f5a:	6816      	ldr	r6, [r2, #0]
   21f5c:	681b      	ldr	r3, [r3, #0]
   21f5e:	e7d5      	b.n	21f0c <am_hal_ble_default_patch_apply+0x20>
   21f60:	40020000 	.word	0x40020000
   21f64:	0002816c 	.word	0x0002816c
   21f68:	100040ac 	.word	0x100040ac
   21f6c:	00026504 	.word	0x00026504
   21f70:	00027d50 	.word	0x00027d50
   21f74:	10003104 	.word	0x10003104

00021f78 <am_hal_ble_default_trim_set_ramcode>:
   21f78:	4b0f      	ldr	r3, [pc, #60]	; (21fb8 <am_hal_ble_default_trim_set_ramcode+0x40>)
   21f7a:	68db      	ldr	r3, [r3, #12]
   21f7c:	b2db      	uxtb	r3, r3
   21f7e:	2b21      	cmp	r3, #33	; 0x21
   21f80:	bf0c      	ite	eq
   21f82:	4b0e      	ldreq	r3, [pc, #56]	; (21fbc <am_hal_ble_default_trim_set_ramcode+0x44>)
   21f84:	4b0e      	ldrne	r3, [pc, #56]	; (21fc0 <am_hal_ble_default_trim_set_ramcode+0x48>)
   21f86:	68da      	ldr	r2, [r3, #12]
   21f88:	4b0e      	ldr	r3, [pc, #56]	; (21fc4 <am_hal_ble_default_trim_set_ramcode+0x4c>)
   21f8a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
   21f8e:	ba19      	rev	r1, r3
   21f90:	3301      	adds	r3, #1
   21f92:	4b0c      	ldr	r3, [pc, #48]	; (21fc4 <am_hal_ble_default_trim_set_ramcode+0x4c>)
   21f94:	bf18      	it	ne
   21f96:	6091      	strne	r1, [r2, #8]
   21f98:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   21f9c:	1c59      	adds	r1, r3, #1
   21f9e:	d009      	beq.n	21fb4 <am_hal_ble_default_trim_set_ramcode+0x3c>
   21fa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21fa4:	ba19      	rev	r1, r3
   21fa6:	3301      	adds	r3, #1
   21fa8:	d004      	beq.n	21fb4 <am_hal_ble_default_trim_set_ramcode+0x3c>
   21faa:	68d3      	ldr	r3, [r2, #12]
   21fac:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
   21fb0:	430b      	orrs	r3, r1
   21fb2:	60d3      	str	r3, [r2, #12]
   21fb4:	2000      	movs	r0, #0
   21fb6:	4770      	bx	lr
   21fb8:	40020000 	.word	0x40020000
   21fbc:	100031f0 	.word	0x100031f0
   21fc0:	10002fdc 	.word	0x10002fdc
   21fc4:	50023000 	.word	0x50023000

00021fc8 <am_hal_ble_blocking_hci_write>:
   21fc8:	b530      	push	{r4, r5, lr}
   21fca:	b087      	sub	sp, #28
   21fcc:	2400      	movs	r4, #0
   21fce:	e9cd 4404 	strd	r4, r4, [sp, #16]
   21fd2:	b29b      	uxth	r3, r3
   21fd4:	f88d 4005 	strb.w	r4, [sp, #5]
   21fd8:	f8ad 4006 	strh.w	r4, [sp, #6]
   21fdc:	f88d 400c 	strb.w	r4, [sp, #12]
   21fe0:	2401      	movs	r4, #1
   21fe2:	9200      	str	r2, [sp, #0]
   21fe4:	f88d 1004 	strb.w	r1, [sp, #4]
   21fe8:	f8ad 3008 	strh.w	r3, [sp, #8]
   21fec:	f8ad 400a 	strh.w	r4, [sp, #10]
   21ff0:	b128      	cbz	r0, 21ffe <am_hal_ble_blocking_hci_write+0x36>
   21ff2:	6802      	ldr	r2, [r0, #0]
   21ff4:	4d08      	ldr	r5, [pc, #32]	; (22018 <am_hal_ble_blocking_hci_write+0x50>)
   21ff6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   21ffa:	42aa      	cmp	r2, r5
   21ffc:	d002      	beq.n	22004 <am_hal_ble_blocking_hci_write+0x3c>
   21ffe:	2000      	movs	r0, #0
   22000:	b007      	add	sp, #28
   22002:	bd30      	pop	{r4, r5, pc}
   22004:	b109      	cbz	r1, 2200a <am_hal_ble_blocking_hci_write+0x42>
   22006:	f88d 4007 	strb.w	r4, [sp, #7]
   2200a:	2b00      	cmp	r3, #0
   2200c:	d0f7      	beq.n	21ffe <am_hal_ble_blocking_hci_write+0x36>
   2200e:	4669      	mov	r1, sp
   22010:	f7ff f942 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   22014:	b007      	add	sp, #28
   22016:	bd30      	pop	{r4, r5, pc}
   22018:	01775230 	.word	0x01775230

0002201c <am_hal_ble_blocking_hci_read>:
   2201c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2201e:	b089      	sub	sp, #36	; 0x24
   22020:	ab01      	add	r3, sp, #4
   22022:	9302      	str	r3, [sp, #8]
   22024:	4b26      	ldr	r3, [pc, #152]	; (220c0 <am_hal_ble_blocking_hci_read+0xa4>)
   22026:	681b      	ldr	r3, [r3, #0]
   22028:	f8ad 300c 	strh.w	r3, [sp, #12]
   2202c:	0c1b      	lsrs	r3, r3, #16
   2202e:	f88d 300e 	strb.w	r3, [sp, #14]
   22032:	2300      	movs	r3, #0
   22034:	e9cd 3306 	strd	r3, r3, [sp, #24]
   22038:	f88d 300f 	strb.w	r3, [sp, #15]
   2203c:	f88d 3014 	strb.w	r3, [sp, #20]
   22040:	f04f 1302 	mov.w	r3, #131074	; 0x20002
   22044:	9304      	str	r3, [sp, #16]
   22046:	b130      	cbz	r0, 22056 <am_hal_ble_blocking_hci_read+0x3a>
   22048:	6805      	ldr	r5, [r0, #0]
   2204a:	4b1e      	ldr	r3, [pc, #120]	; (220c4 <am_hal_ble_blocking_hci_read+0xa8>)
   2204c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   22050:	429d      	cmp	r5, r3
   22052:	4604      	mov	r4, r0
   22054:	d002      	beq.n	2205c <am_hal_ble_blocking_hci_read+0x40>
   22056:	2000      	movs	r0, #0
   22058:	b009      	add	sp, #36	; 0x24
   2205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2205c:	4b1a      	ldr	r3, [pc, #104]	; (220c8 <am_hal_ble_blocking_hci_read+0xac>)
   2205e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22062:	460e      	mov	r6, r1
   22064:	f3c3 11c0 	ubfx	r1, r3, #7, #1
   22068:	061b      	lsls	r3, r3, #24
   2206a:	4617      	mov	r7, r2
   2206c:	d403      	bmi.n	22076 <am_hal_ble_blocking_hci_read+0x5a>
   2206e:	2f00      	cmp	r7, #0
   22070:	d0f1      	beq.n	22056 <am_hal_ble_blocking_hci_read+0x3a>
   22072:	6039      	str	r1, [r7, #0]
   22074:	e7ef      	b.n	22056 <am_hal_ble_blocking_hci_read+0x3a>
   22076:	a902      	add	r1, sp, #8
   22078:	f7ff f90e 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   2207c:	2800      	cmp	r0, #0
   2207e:	d1eb      	bne.n	22058 <am_hal_ble_blocking_hci_read+0x3c>
   22080:	f89d 1005 	ldrb.w	r1, [sp, #5]
   22084:	f89d 3004 	ldrb.w	r3, [sp, #4]
   22088:	9602      	str	r6, [sp, #8]
   2208a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   2208e:	b29b      	uxth	r3, r3
   22090:	f8ad 3010 	strh.w	r3, [sp, #16]
   22094:	3b01      	subs	r3, #1
   22096:	2bff      	cmp	r3, #255	; 0xff
   22098:	d80f      	bhi.n	220ba <am_hal_ble_blocking_hci_read+0x9e>
   2209a:	6823      	ldr	r3, [r4, #0]
   2209c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   220a0:	42ab      	cmp	r3, r5
   220a2:	d108      	bne.n	220b6 <am_hal_ble_blocking_hci_read+0x9a>
   220a4:	a902      	add	r1, sp, #8
   220a6:	4620      	mov	r0, r4
   220a8:	f7ff f8f6 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   220ac:	2800      	cmp	r0, #0
   220ae:	d1d3      	bne.n	22058 <am_hal_ble_blocking_hci_read+0x3c>
   220b0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   220b4:	e7db      	b.n	2206e <am_hal_ble_blocking_hci_read+0x52>
   220b6:	2002      	movs	r0, #2
   220b8:	e7ce      	b.n	22058 <am_hal_ble_blocking_hci_read+0x3c>
   220ba:	2005      	movs	r0, #5
   220bc:	e7cc      	b.n	22058 <am_hal_ble_blocking_hci_read+0x3c>
   220be:	bf00      	nop
   220c0:	0002406c 	.word	0x0002406c
   220c4:	01775230 	.word	0x01775230
   220c8:	5000c000 	.word	0x5000c000

000220cc <am_hal_ble_int_enable>:
   220cc:	b128      	cbz	r0, 220da <am_hal_ble_int_enable+0xe>
   220ce:	6803      	ldr	r3, [r0, #0]
   220d0:	4a0c      	ldr	r2, [pc, #48]	; (22104 <am_hal_ble_int_enable+0x38>)
   220d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   220d6:	4293      	cmp	r3, r2
   220d8:	d001      	beq.n	220de <am_hal_ble_int_enable+0x12>
   220da:	2002      	movs	r0, #2
   220dc:	4770      	bx	lr
   220de:	b510      	push	{r4, lr}
   220e0:	b082      	sub	sp, #8
   220e2:	460c      	mov	r4, r1
   220e4:	f000 ffde 	bl	230a4 <am_hal_interrupt_master_disable>
   220e8:	4b07      	ldr	r3, [pc, #28]	; (22108 <am_hal_ble_int_enable+0x3c>)
   220ea:	9001      	str	r0, [sp, #4]
   220ec:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   220f0:	4321      	orrs	r1, r4
   220f2:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   220f6:	9801      	ldr	r0, [sp, #4]
   220f8:	f000 ffd8 	bl	230ac <am_hal_interrupt_master_set>
   220fc:	2000      	movs	r0, #0
   220fe:	b002      	add	sp, #8
   22100:	bd10      	pop	{r4, pc}
   22102:	bf00      	nop
   22104:	01775230 	.word	0x01775230
   22108:	5000c000 	.word	0x5000c000

0002210c <am_hal_ble_int_status>:
   2210c:	4b05      	ldr	r3, [pc, #20]	; (22124 <am_hal_ble_int_status+0x18>)
   2210e:	b129      	cbz	r1, 2211c <am_hal_ble_int_status+0x10>
   22110:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   22114:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   22118:	4010      	ands	r0, r2
   2211a:	4770      	bx	lr
   2211c:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   22120:	4770      	bx	lr
   22122:	bf00      	nop
   22124:	5000c000 	.word	0x5000c000

00022128 <am_hal_ble_int_clear>:
   22128:	b150      	cbz	r0, 22140 <am_hal_ble_int_clear+0x18>
   2212a:	6803      	ldr	r3, [r0, #0]
   2212c:	4a05      	ldr	r2, [pc, #20]	; (22144 <am_hal_ble_int_clear+0x1c>)
   2212e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22132:	4293      	cmp	r3, r2
   22134:	d104      	bne.n	22140 <am_hal_ble_int_clear+0x18>
   22136:	4b04      	ldr	r3, [pc, #16]	; (22148 <am_hal_ble_int_clear+0x20>)
   22138:	2000      	movs	r0, #0
   2213a:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   2213e:	4770      	bx	lr
   22140:	2002      	movs	r0, #2
   22142:	4770      	bx	lr
   22144:	01775230 	.word	0x01775230
   22148:	5000c000 	.word	0x5000c000
   2214c:	00000000 	.word	0x00000000

00022150 <am_hal_ble_plf_reg_read>:
   22150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22154:	b092      	sub	sp, #72	; 0x48
   22156:	0a0c      	lsrs	r4, r1, #8
   22158:	f88d 1004 	strb.w	r1, [sp, #4]
   2215c:	0c0b      	lsrs	r3, r1, #16
   2215e:	0e09      	lsrs	r1, r1, #24
   22160:	f88d 3006 	strb.w	r3, [sp, #6]
   22164:	f88d 1007 	strb.w	r1, [sp, #7]
   22168:	f88d 4005 	strb.w	r4, [sp, #5]
   2216c:	9c01      	ldr	r4, [sp, #4]
   2216e:	4d2c      	ldr	r5, [pc, #176]	; (22220 <am_hal_ble_plf_reg_read+0xd0>)
   22170:	492c      	ldr	r1, [pc, #176]	; (22224 <am_hal_ble_plf_reg_read+0xd4>)
   22172:	e9cd 5402 	strd	r5, r4, [sp, #8]
   22176:	ed9f 7b28 	vldr	d7, [pc, #160]	; 22218 <am_hal_ble_plf_reg_read+0xc8>
   2217a:	4617      	mov	r7, r2
   2217c:	4a2a      	ldr	r2, [pc, #168]	; (22228 <am_hal_ble_plf_reg_read+0xd8>)
   2217e:	f8d1 8220 	ldr.w	r8, [r1, #544]	; 0x220
   22182:	2300      	movs	r3, #0
   22184:	ac02      	add	r4, sp, #8
   22186:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   2218a:	930c      	str	r3, [sp, #48]	; 0x30
   2218c:	4606      	mov	r6, r0
   2218e:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   22192:	e9cd 3205 	strd	r3, r2, [sp, #20]
   22196:	e9cd 3308 	strd	r3, r3, [sp, #32]
   2219a:	9404      	str	r4, [sp, #16]
   2219c:	f88d 301c 	strb.w	r3, [sp, #28]
   221a0:	b128      	cbz	r0, 221ae <am_hal_ble_plf_reg_read+0x5e>
   221a2:	6803      	ldr	r3, [r0, #0]
   221a4:	4a21      	ldr	r2, [pc, #132]	; (2222c <am_hal_ble_plf_reg_read+0xdc>)
   221a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   221aa:	4293      	cmp	r3, r2
   221ac:	d029      	beq.n	22202 <am_hal_ble_plf_reg_read+0xb2>
   221ae:	4d1d      	ldr	r5, [pc, #116]	; (22224 <am_hal_ble_plf_reg_read+0xd4>)
   221b0:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   221b4:	f043 0302 	orr.w	r3, r3, #2
   221b8:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   221bc:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   221c0:	061a      	lsls	r2, r3, #24
   221c2:	d40a      	bmi.n	221da <am_hal_ble_plf_reg_read+0x8a>
   221c4:	4c1a      	ldr	r4, [pc, #104]	; (22230 <am_hal_ble_plf_reg_read+0xe0>)
   221c6:	e001      	b.n	221cc <am_hal_ble_plf_reg_read+0x7c>
   221c8:	3c01      	subs	r4, #1
   221ca:	d01e      	beq.n	2220a <am_hal_ble_plf_reg_read+0xba>
   221cc:	2010      	movs	r0, #16
   221ce:	f000 fd91 	bl	22cf4 <am_hal_flash_delay>
   221d2:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   221d6:	061b      	lsls	r3, r3, #24
   221d8:	d5f6      	bpl.n	221c8 <am_hal_ble_plf_reg_read+0x78>
   221da:	a90a      	add	r1, sp, #40	; 0x28
   221dc:	2200      	movs	r2, #0
   221de:	4630      	mov	r0, r6
   221e0:	f7ff ff1c 	bl	2201c <am_hal_ble_blocking_hci_read>
   221e4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   221e8:	990c      	ldr	r1, [sp, #48]	; 0x30
   221ea:	4a0e      	ldr	r2, [pc, #56]	; (22224 <am_hal_ble_plf_reg_read+0xd4>)
   221ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   221f0:	2000      	movs	r0, #0
   221f2:	603b      	str	r3, [r7, #0]
   221f4:	f8c2 8228 	str.w	r8, [r2, #552]	; 0x228
   221f8:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   221fc:	b012      	add	sp, #72	; 0x48
   221fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22202:	a904      	add	r1, sp, #16
   22204:	f7ff f848 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   22208:	e7d1      	b.n	221ae <am_hal_ble_plf_reg_read+0x5e>
   2220a:	480a      	ldr	r0, [pc, #40]	; (22234 <am_hal_ble_plf_reg_read+0xe4>)
   2220c:	b012      	add	sp, #72	; 0x48
   2220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22212:	bf00      	nop
   22214:	f3af 8000 	nop.w
	...
   22220:	04fd0201 	.word	0x04fd0201
   22224:	5000c000 	.word	0x5000c000
   22228:	00010008 	.word	0x00010008
   2222c:	01775230 	.word	0x01775230
   22230:	0007a120 	.word	0x0007a120
   22234:	08000004 	.word	0x08000004

00022238 <am_hal_ble_plf_reg_write>:
   22238:	b5f0      	push	{r4, r5, r6, r7, lr}
   2223a:	b08d      	sub	sp, #52	; 0x34
   2223c:	0a0c      	lsrs	r4, r1, #8
   2223e:	0c0b      	lsrs	r3, r1, #16
   22240:	f88d 1004 	strb.w	r1, [sp, #4]
   22244:	f88d 4005 	strb.w	r4, [sp, #5]
   22248:	f88d 3006 	strb.w	r3, [sp, #6]
   2224c:	f88d 2008 	strb.w	r2, [sp, #8]
   22250:	0a14      	lsrs	r4, r2, #8
   22252:	0c13      	lsrs	r3, r2, #16
   22254:	0e09      	lsrs	r1, r1, #24
   22256:	0e12      	lsrs	r2, r2, #24
   22258:	f88d 4009 	strb.w	r4, [sp, #9]
   2225c:	f88d 300a 	strb.w	r3, [sp, #10]
   22260:	f88d 200b 	strb.w	r2, [sp, #11]
   22264:	f88d 1007 	strb.w	r1, [sp, #7]
   22268:	ab01      	add	r3, sp, #4
   2226a:	4606      	mov	r6, r0
   2226c:	e893 0003 	ldmia.w	r3, {r0, r1}
   22270:	ab04      	add	r3, sp, #16
   22272:	e883 0003 	stmia.w	r3, {r0, r1}
   22276:	4a22      	ldr	r2, [pc, #136]	; (22300 <am_hal_ble_plf_reg_write+0xc8>)
   22278:	4c22      	ldr	r4, [pc, #136]	; (22304 <am_hal_ble_plf_reg_write+0xcc>)
   2227a:	9403      	str	r4, [sp, #12]
   2227c:	2300      	movs	r3, #0
   2227e:	4922      	ldr	r1, [pc, #136]	; (22308 <am_hal_ble_plf_reg_write+0xd0>)
   22280:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   22284:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   22288:	a803      	add	r0, sp, #12
   2228a:	e9cd 0306 	strd	r0, r3, [sp, #24]
   2228e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   22292:	9108      	str	r1, [sp, #32]
   22294:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   22298:	b12e      	cbz	r6, 222a6 <am_hal_ble_plf_reg_write+0x6e>
   2229a:	6833      	ldr	r3, [r6, #0]
   2229c:	4a1b      	ldr	r2, [pc, #108]	; (2230c <am_hal_ble_plf_reg_write+0xd4>)
   2229e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   222a2:	4293      	cmp	r3, r2
   222a4:	d024      	beq.n	222f0 <am_hal_ble_plf_reg_write+0xb8>
   222a6:	4d16      	ldr	r5, [pc, #88]	; (22300 <am_hal_ble_plf_reg_write+0xc8>)
   222a8:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   222ac:	f043 0302 	orr.w	r3, r3, #2
   222b0:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   222b4:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   222b8:	061a      	lsls	r2, r3, #24
   222ba:	bf58      	it	pl
   222bc:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   222c0:	d502      	bpl.n	222c8 <am_hal_ble_plf_reg_write+0x90>
   222c2:	e008      	b.n	222d6 <am_hal_ble_plf_reg_write+0x9e>
   222c4:	3c01      	subs	r4, #1
   222c6:	d018      	beq.n	222fa <am_hal_ble_plf_reg_write+0xc2>
   222c8:	2010      	movs	r0, #16
   222ca:	f000 fd13 	bl	22cf4 <am_hal_flash_delay>
   222ce:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   222d2:	061b      	lsls	r3, r3, #24
   222d4:	d5f6      	bpl.n	222c4 <am_hal_ble_plf_reg_write+0x8c>
   222d6:	2200      	movs	r2, #0
   222d8:	a906      	add	r1, sp, #24
   222da:	4630      	mov	r0, r6
   222dc:	f7ff fe9e 	bl	2201c <am_hal_ble_blocking_hci_read>
   222e0:	4b07      	ldr	r3, [pc, #28]	; (22300 <am_hal_ble_plf_reg_write+0xc8>)
   222e2:	2000      	movs	r0, #0
   222e4:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   222e8:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   222ec:	b00d      	add	sp, #52	; 0x34
   222ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   222f0:	a906      	add	r1, sp, #24
   222f2:	4630      	mov	r0, r6
   222f4:	f7fe ffd0 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   222f8:	e7d5      	b.n	222a6 <am_hal_ble_plf_reg_write+0x6e>
   222fa:	4805      	ldr	r0, [pc, #20]	; (22310 <am_hal_ble_plf_reg_write+0xd8>)
   222fc:	b00d      	add	sp, #52	; 0x34
   222fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22300:	5000c000 	.word	0x5000c000
   22304:	08fd0301 	.word	0x08fd0301
   22308:	0001000c 	.word	0x0001000c
   2230c:	01775230 	.word	0x01775230
   22310:	08000004 	.word	0x08000004

00022314 <am_hal_ble_transmitter_modex_set>:
   22314:	b530      	push	{r4, r5, lr}
   22316:	b085      	sub	sp, #20
   22318:	4604      	mov	r4, r0
   2231a:	2300      	movs	r3, #0
   2231c:	466a      	mov	r2, sp
   2231e:	460d      	mov	r5, r1
   22320:	4927      	ldr	r1, [pc, #156]	; (223c0 <am_hal_ble_transmitter_modex_set+0xac>)
   22322:	9303      	str	r3, [sp, #12]
   22324:	f7ff ff14 	bl	22150 <am_hal_ble_plf_reg_read>
   22328:	4925      	ldr	r1, [pc, #148]	; (223c0 <am_hal_ble_transmitter_modex_set+0xac>)
   2232a:	f04f 32ff 	mov.w	r2, #4294967295
   2232e:	4620      	mov	r0, r4
   22330:	f7ff ff82 	bl	22238 <am_hal_ble_plf_reg_write>
   22334:	aa03      	add	r2, sp, #12
   22336:	4923      	ldr	r1, [pc, #140]	; (223c4 <am_hal_ble_transmitter_modex_set+0xb0>)
   22338:	4620      	mov	r0, r4
   2233a:	f7ff ff09 	bl	22150 <am_hal_ble_plf_reg_read>
   2233e:	9b03      	ldr	r3, [sp, #12]
   22340:	aa02      	add	r2, sp, #8
   22342:	f043 0308 	orr.w	r3, r3, #8
   22346:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2234a:	4620      	mov	r0, r4
   2234c:	9303      	str	r3, [sp, #12]
   2234e:	f7ff feff 	bl	22150 <am_hal_ble_plf_reg_read>
   22352:	9a02      	ldr	r2, [sp, #8]
   22354:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   22358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   2235c:	4620      	mov	r0, r4
   2235e:	9202      	str	r2, [sp, #8]
   22360:	f7ff ff6a 	bl	22238 <am_hal_ble_plf_reg_write>
   22364:	aa01      	add	r2, sp, #4
   22366:	4918      	ldr	r1, [pc, #96]	; (223c8 <am_hal_ble_transmitter_modex_set+0xb4>)
   22368:	4620      	mov	r0, r4
   2236a:	f7ff fef1 	bl	22150 <am_hal_ble_plf_reg_read>
   2236e:	9a01      	ldr	r2, [sp, #4]
   22370:	4915      	ldr	r1, [pc, #84]	; (223c8 <am_hal_ble_transmitter_modex_set+0xb4>)
   22372:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   22376:	f042 0208 	orr.w	r2, r2, #8
   2237a:	4620      	mov	r0, r4
   2237c:	f7ff ff5c 	bl	22238 <am_hal_ble_plf_reg_write>
   22380:	006a      	lsls	r2, r5, #1
   22382:	4912      	ldr	r1, [pc, #72]	; (223cc <am_hal_ble_transmitter_modex_set+0xb8>)
   22384:	f042 0201 	orr.w	r2, r2, #1
   22388:	4620      	mov	r0, r4
   2238a:	f7ff ff55 	bl	22238 <am_hal_ble_plf_reg_write>
   2238e:	490d      	ldr	r1, [pc, #52]	; (223c4 <am_hal_ble_transmitter_modex_set+0xb0>)
   22390:	9a03      	ldr	r2, [sp, #12]
   22392:	4620      	mov	r0, r4
   22394:	f7ff ff50 	bl	22238 <am_hal_ble_plf_reg_write>
   22398:	4b0d      	ldr	r3, [pc, #52]	; (223d0 <am_hal_ble_transmitter_modex_set+0xbc>)
   2239a:	68db      	ldr	r3, [r3, #12]
   2239c:	b2db      	uxtb	r3, r3
   2239e:	2b21      	cmp	r3, #33	; 0x21
   223a0:	bf0c      	ite	eq
   223a2:	490c      	ldreq	r1, [pc, #48]	; (223d4 <am_hal_ble_transmitter_modex_set+0xc0>)
   223a4:	490c      	ldrne	r1, [pc, #48]	; (223d8 <am_hal_ble_transmitter_modex_set+0xc4>)
   223a6:	462a      	mov	r2, r5
   223a8:	4620      	mov	r0, r4
   223aa:	f7ff ff45 	bl	22238 <am_hal_ble_plf_reg_write>
   223ae:	9a00      	ldr	r2, [sp, #0]
   223b0:	4903      	ldr	r1, [pc, #12]	; (223c0 <am_hal_ble_transmitter_modex_set+0xac>)
   223b2:	4620      	mov	r0, r4
   223b4:	f7ff ff40 	bl	22238 <am_hal_ble_plf_reg_write>
   223b8:	2000      	movs	r0, #0
   223ba:	b005      	add	sp, #20
   223bc:	bd30      	pop	{r4, r5, pc}
   223be:	bf00      	nop
   223c0:	43000004 	.word	0x43000004
   223c4:	52000008 	.word	0x52000008
   223c8:	45800070 	.word	0x45800070
   223cc:	52000014 	.word	0x52000014
   223d0:	40020000 	.word	0x40020000
   223d4:	20006874 	.word	0x20006874
   223d8:	20006070 	.word	0x20006070

000223dc <am_hal_ble_patch_complete.part.0>:
   223dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   223e0:	b08c      	sub	sp, #48	; 0x30
   223e2:	2300      	movs	r3, #0
   223e4:	2201      	movs	r2, #1
   223e6:	e9cd 3307 	strd	r3, r3, [sp, #28]
   223ea:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   223ee:	930b      	str	r3, [sp, #44]	; 0x2c
   223f0:	f8ad 3004 	strh.w	r3, [sp, #4]
   223f4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   223f8:	4b7e      	ldr	r3, [pc, #504]	; (225f4 <am_hal_ble_patch_complete.part.0+0x218>)
   223fa:	f8cd d018 	str.w	sp, [sp, #24]
   223fe:	2206      	movs	r2, #6
   22400:	f8ad 2020 	strh.w	r2, [sp, #32]
   22404:	9300      	str	r3, [sp, #0]
   22406:	4604      	mov	r4, r0
   22408:	2800      	cmp	r0, #0
   2240a:	f000 80ec 	beq.w	225e6 <am_hal_ble_patch_complete.part.0+0x20a>
   2240e:	4e7a      	ldr	r6, [pc, #488]	; (225f8 <am_hal_ble_patch_complete.part.0+0x21c>)
   22410:	f241 3588 	movw	r5, #5000	; 0x1388
   22414:	6823      	ldr	r3, [r4, #0]
   22416:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2241a:	42b3      	cmp	r3, r6
   2241c:	a906      	add	r1, sp, #24
   2241e:	4620      	mov	r0, r4
   22420:	d107      	bne.n	22432 <am_hal_ble_patch_complete.part.0+0x56>
   22422:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   22426:	b123      	cbz	r3, 22432 <am_hal_ble_patch_complete.part.0+0x56>
   22428:	f7fe ff36 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   2242c:	b108      	cbz	r0, 22432 <am_hal_ble_patch_complete.part.0+0x56>
   2242e:	3d01      	subs	r5, #1
   22430:	d1f0      	bne.n	22414 <am_hal_ble_patch_complete.part.0+0x38>
   22432:	4b72      	ldr	r3, [pc, #456]	; (225fc <am_hal_ble_patch_complete.part.0+0x220>)
   22434:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   22438:	061b      	lsls	r3, r3, #24
   2243a:	d458      	bmi.n	224ee <am_hal_ble_patch_complete.part.0+0x112>
   2243c:	4d70      	ldr	r5, [pc, #448]	; (22600 <am_hal_ble_patch_complete.part.0+0x224>)
   2243e:	4e6f      	ldr	r6, [pc, #444]	; (225fc <am_hal_ble_patch_complete.part.0+0x220>)
   22440:	2010      	movs	r0, #16
   22442:	f000 fc57 	bl	22cf4 <am_hal_flash_delay>
   22446:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   2244a:	061f      	lsls	r7, r3, #24
   2244c:	d406      	bmi.n	2245c <am_hal_ble_patch_complete.part.0+0x80>
   2244e:	3d01      	subs	r5, #1
   22450:	d1f6      	bne.n	22440 <am_hal_ble_patch_complete.part.0+0x64>
   22452:	4d6c      	ldr	r5, [pc, #432]	; (22604 <am_hal_ble_patch_complete.part.0+0x228>)
   22454:	4628      	mov	r0, r5
   22456:	b00c      	add	sp, #48	; 0x30
   22458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2245c:	2302      	movs	r3, #2
   2245e:	f10d 080c 	add.w	r8, sp, #12
   22462:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   22466:	f8cd 8018 	str.w	r8, [sp, #24]
   2246a:	f8ad 3020 	strh.w	r3, [sp, #32]
   2246e:	2c00      	cmp	r4, #0
   22470:	d038      	beq.n	224e4 <am_hal_ble_patch_complete.part.0+0x108>
   22472:	6826      	ldr	r6, [r4, #0]
   22474:	4b60      	ldr	r3, [pc, #384]	; (225f8 <am_hal_ble_patch_complete.part.0+0x21c>)
   22476:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   2247a:	429e      	cmp	r6, r3
   2247c:	d132      	bne.n	224e4 <am_hal_ble_patch_complete.part.0+0x108>
   2247e:	a906      	add	r1, sp, #24
   22480:	4620      	mov	r0, r4
   22482:	f7fe ff09 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   22486:	4605      	mov	r5, r0
   22488:	bb68      	cbnz	r0, 224e6 <am_hal_ble_patch_complete.part.0+0x10a>
   2248a:	f89d 200d 	ldrb.w	r2, [sp, #13]
   2248e:	2aee      	cmp	r2, #238	; 0xee
   22490:	d037      	beq.n	22502 <am_hal_ble_patch_complete.part.0+0x126>
   22492:	f89d 300c 	ldrb.w	r3, [sp, #12]
   22496:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2249a:	6822      	ldr	r2, [r4, #0]
   2249c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   224a0:	b29b      	uxth	r3, r3
   224a2:	42b2      	cmp	r2, r6
   224a4:	f8ad 3020 	strh.w	r3, [sp, #32]
   224a8:	d11c      	bne.n	224e4 <am_hal_ble_patch_complete.part.0+0x108>
   224aa:	b133      	cbz	r3, 224ba <am_hal_ble_patch_complete.part.0+0xde>
   224ac:	a906      	add	r1, sp, #24
   224ae:	4620      	mov	r0, r4
   224b0:	f7fe fef2 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   224b4:	2800      	cmp	r0, #0
   224b6:	f040 8094 	bne.w	225e2 <am_hal_ble_patch_complete.part.0+0x206>
   224ba:	2301      	movs	r3, #1
   224bc:	4628      	mov	r0, r5
   224be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   224c2:	b00c      	add	sp, #48	; 0x30
   224c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   224c8:	6826      	ldr	r6, [r4, #0]
   224ca:	4b4b      	ldr	r3, [pc, #300]	; (225f8 <am_hal_ble_patch_complete.part.0+0x21c>)
   224cc:	f8cd 8018 	str.w	r8, [sp, #24]
   224d0:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   224d4:	2702      	movs	r7, #2
   224d6:	2209      	movs	r2, #9
   224d8:	429e      	cmp	r6, r3
   224da:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   224de:	f8ad 2020 	strh.w	r2, [sp, #32]
   224e2:	d054      	beq.n	2258e <am_hal_ble_patch_complete.part.0+0x1b2>
   224e4:	2502      	movs	r5, #2
   224e6:	4628      	mov	r0, r5
   224e8:	b00c      	add	sp, #48	; 0x30
   224ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   224ee:	2302      	movs	r3, #2
   224f0:	f10d 080c 	add.w	r8, sp, #12
   224f4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   224f8:	f8cd 8018 	str.w	r8, [sp, #24]
   224fc:	f8ad 3020 	strh.w	r3, [sp, #32]
   22500:	e7b7      	b.n	22472 <am_hal_ble_patch_complete.part.0+0x96>
   22502:	6827      	ldr	r7, [r4, #0]
   22504:	f027 477e 	bic.w	r7, r7, #4261412864	; 0xfe000000
   22508:	2303      	movs	r3, #3
   2250a:	42b7      	cmp	r7, r6
   2250c:	f8ad 3020 	strh.w	r3, [sp, #32]
   22510:	d1e8      	bne.n	224e4 <am_hal_ble_patch_complete.part.0+0x108>
   22512:	a906      	add	r1, sp, #24
   22514:	4620      	mov	r0, r4
   22516:	f7fe febf 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   2251a:	4605      	mov	r5, r0
   2251c:	2800      	cmp	r0, #0
   2251e:	d1e2      	bne.n	224e6 <am_hal_ble_patch_complete.part.0+0x10a>
   22520:	2301      	movs	r3, #1
   22522:	e9cd 0007 	strd	r0, r0, [sp, #28]
   22526:	f88d 3004 	strb.w	r3, [sp, #4]
   2252a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   2252e:	f103 73fe 	add.w	r3, r3, #33292288	; 0x1fc0000
   22532:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
   22536:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   2253a:	9300      	str	r3, [sp, #0]
   2253c:	2305      	movs	r3, #5
   2253e:	f8cd d018 	str.w	sp, [sp, #24]
   22542:	900b      	str	r0, [sp, #44]	; 0x2c
   22544:	f241 3688 	movw	r6, #5000	; 0x1388
   22548:	f8ad 3020 	strh.w	r3, [sp, #32]
   2254c:	6823      	ldr	r3, [r4, #0]
   2254e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22552:	42bb      	cmp	r3, r7
   22554:	a906      	add	r1, sp, #24
   22556:	4620      	mov	r0, r4
   22558:	d1c4      	bne.n	224e4 <am_hal_ble_patch_complete.part.0+0x108>
   2255a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2255e:	b133      	cbz	r3, 2256e <am_hal_ble_patch_complete.part.0+0x192>
   22560:	f7fe fe9a 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   22564:	4605      	mov	r5, r0
   22566:	b110      	cbz	r0, 2256e <am_hal_ble_patch_complete.part.0+0x192>
   22568:	3e01      	subs	r6, #1
   2256a:	d1ef      	bne.n	2254c <am_hal_ble_patch_complete.part.0+0x170>
   2256c:	e7bb      	b.n	224e6 <am_hal_ble_patch_complete.part.0+0x10a>
   2256e:	4e23      	ldr	r6, [pc, #140]	; (225fc <am_hal_ble_patch_complete.part.0+0x220>)
   22570:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   22574:	0618      	lsls	r0, r3, #24
   22576:	d4a7      	bmi.n	224c8 <am_hal_ble_patch_complete.part.0+0xec>
   22578:	4d21      	ldr	r5, [pc, #132]	; (22600 <am_hal_ble_patch_complete.part.0+0x224>)
   2257a:	2010      	movs	r0, #16
   2257c:	f000 fbba 	bl	22cf4 <am_hal_flash_delay>
   22580:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   22584:	0619      	lsls	r1, r3, #24
   22586:	d49f      	bmi.n	224c8 <am_hal_ble_patch_complete.part.0+0xec>
   22588:	3d01      	subs	r5, #1
   2258a:	d1f6      	bne.n	2257a <am_hal_ble_patch_complete.part.0+0x19e>
   2258c:	e761      	b.n	22452 <am_hal_ble_patch_complete.part.0+0x76>
   2258e:	a906      	add	r1, sp, #24
   22590:	4620      	mov	r0, r4
   22592:	f7fe fe81 	bl	21298 <am_hal_ble_blocking_transfer.part.0>
   22596:	4605      	mov	r5, r0
   22598:	2800      	cmp	r0, #0
   2259a:	d1a4      	bne.n	224e6 <am_hal_ble_patch_complete.part.0+0x10a>
   2259c:	6823      	ldr	r3, [r4, #0]
   2259e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   225a2:	42b3      	cmp	r3, r6
   225a4:	d106      	bne.n	225b4 <am_hal_ble_patch_complete.part.0+0x1d8>
   225a6:	4b15      	ldr	r3, [pc, #84]	; (225fc <am_hal_ble_patch_complete.part.0+0x220>)
   225a8:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   225ac:	f367 0283 	bfi	r2, r7, #2, #2
   225b0:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   225b4:	2301      	movs	r3, #1
   225b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   225ba:	4813      	ldr	r0, [pc, #76]	; (22608 <am_hal_ble_patch_complete.part.0+0x22c>)
   225bc:	f000 fb9a 	bl	22cf4 <am_hal_flash_delay>
   225c0:	4b12      	ldr	r3, [pc, #72]	; (2260c <am_hal_ble_patch_complete.part.0+0x230>)
   225c2:	4a13      	ldr	r2, [pc, #76]	; (22610 <am_hal_ble_patch_complete.part.0+0x234>)
   225c4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
   225c8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
   225cc:	4291      	cmp	r1, r2
   225ce:	d18a      	bne.n	224e6 <am_hal_ble_patch_complete.part.0+0x10a>
   225d0:	b2d9      	uxtb	r1, r3
   225d2:	f1a1 0320 	sub.w	r3, r1, #32
   225d6:	2b30      	cmp	r3, #48	; 0x30
   225d8:	d885      	bhi.n	224e6 <am_hal_ble_patch_complete.part.0+0x10a>
   225da:	4620      	mov	r0, r4
   225dc:	f7ff fe9a 	bl	22314 <am_hal_ble_transmitter_modex_set>
   225e0:	e781      	b.n	224e6 <am_hal_ble_patch_complete.part.0+0x10a>
   225e2:	4605      	mov	r5, r0
   225e4:	e77f      	b.n	224e6 <am_hal_ble_patch_complete.part.0+0x10a>
   225e6:	4b05      	ldr	r3, [pc, #20]	; (225fc <am_hal_ble_patch_complete.part.0+0x220>)
   225e8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   225ec:	061a      	lsls	r2, r3, #24
   225ee:	f57f af25 	bpl.w	2243c <am_hal_ble_patch_complete.part.0+0x60>
   225f2:	e777      	b.n	224e4 <am_hal_ble_patch_complete.part.0+0x108>
   225f4:	02f1ee01 	.word	0x02f1ee01
   225f8:	01775230 	.word	0x01775230
   225fc:	5000c000 	.word	0x5000c000
   22600:	000186a0 	.word	0x000186a0
   22604:	08000004 	.word	0x08000004
   22608:	007a1200 	.word	0x007a1200
   2260c:	50023000 	.word	0x50023000
   22610:	18240600 	.word	0x18240600

00022614 <am_hal_ble_boot>:
   22614:	2800      	cmp	r0, #0
   22616:	d06c      	beq.n	226f2 <am_hal_ble_boot+0xde>
   22618:	b530      	push	{r4, r5, lr}
   2261a:	6803      	ldr	r3, [r0, #0]
   2261c:	4a36      	ldr	r2, [pc, #216]	; (226f8 <am_hal_ble_boot+0xe4>)
   2261e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   22622:	4293      	cmp	r3, r2
   22624:	b083      	sub	sp, #12
   22626:	4604      	mov	r4, r0
   22628:	d137      	bne.n	2269a <am_hal_ble_boot+0x86>
   2262a:	7a03      	ldrb	r3, [r0, #8]
   2262c:	b1f3      	cbz	r3, 2266c <am_hal_ble_boot+0x58>
   2262e:	4a33      	ldr	r2, [pc, #204]	; (226fc <am_hal_ble_boot+0xe8>)
   22630:	68d3      	ldr	r3, [r2, #12]
   22632:	b2db      	uxtb	r3, r3
   22634:	2b11      	cmp	r3, #17
   22636:	d039      	beq.n	226ac <am_hal_ble_boot+0x98>
   22638:	68d3      	ldr	r3, [r2, #12]
   2263a:	b2db      	uxtb	r3, r3
   2263c:	2b12      	cmp	r3, #18
   2263e:	d035      	beq.n	226ac <am_hal_ble_boot+0x98>
   22640:	4620      	mov	r0, r4
   22642:	f7ff fc99 	bl	21f78 <am_hal_ble_default_trim_set_ramcode>
   22646:	b108      	cbz	r0, 2264c <am_hal_ble_boot+0x38>
   22648:	b003      	add	sp, #12
   2264a:	bd30      	pop	{r4, r5, pc}
   2264c:	4620      	mov	r0, r4
   2264e:	f7ff fc4d 	bl	21eec <am_hal_ble_default_patch_apply>
   22652:	2800      	cmp	r0, #0
   22654:	d1f8      	bne.n	22648 <am_hal_ble_boot+0x34>
   22656:	6823      	ldr	r3, [r4, #0]
   22658:	4a27      	ldr	r2, [pc, #156]	; (226f8 <am_hal_ble_boot+0xe4>)
   2265a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2265e:	4293      	cmp	r3, r2
   22660:	d11b      	bne.n	2269a <am_hal_ble_boot+0x86>
   22662:	4620      	mov	r0, r4
   22664:	f7ff feba 	bl	223dc <am_hal_ble_patch_complete.part.0>
   22668:	2800      	cmp	r0, #0
   2266a:	d1ed      	bne.n	22648 <am_hal_ble_boot+0x34>
   2266c:	4b23      	ldr	r3, [pc, #140]	; (226fc <am_hal_ble_boot+0xe8>)
   2266e:	f04f 32ff 	mov.w	r2, #4294967295
   22672:	9201      	str	r2, [sp, #4]
   22674:	68db      	ldr	r3, [r3, #12]
   22676:	b2db      	uxtb	r3, r3
   22678:	2b21      	cmp	r3, #33	; 0x21
   2267a:	d011      	beq.n	226a0 <am_hal_ble_boot+0x8c>
   2267c:	4920      	ldr	r1, [pc, #128]	; (22700 <am_hal_ble_boot+0xec>)
   2267e:	aa01      	add	r2, sp, #4
   22680:	4620      	mov	r0, r4
   22682:	f7ff fd65 	bl	22150 <am_hal_ble_plf_reg_read>
   22686:	9b01      	ldr	r3, [sp, #4]
   22688:	481e      	ldr	r0, [pc, #120]	; (22704 <am_hal_ble_boot+0xf0>)
   2268a:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   2268e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   22692:	bf98      	it	ls
   22694:	2000      	movls	r0, #0
   22696:	b003      	add	sp, #12
   22698:	bd30      	pop	{r4, r5, pc}
   2269a:	2002      	movs	r0, #2
   2269c:	b003      	add	sp, #12
   2269e:	bd30      	pop	{r4, r5, pc}
   226a0:	4919      	ldr	r1, [pc, #100]	; (22708 <am_hal_ble_boot+0xf4>)
   226a2:	aa01      	add	r2, sp, #4
   226a4:	4620      	mov	r0, r4
   226a6:	f7ff fd53 	bl	22150 <am_hal_ble_plf_reg_read>
   226aa:	e7ec      	b.n	22686 <am_hal_ble_boot+0x72>
   226ac:	4b17      	ldr	r3, [pc, #92]	; (2270c <am_hal_ble_boot+0xf8>)
   226ae:	681b      	ldr	r3, [r3, #0]
   226b0:	6819      	ldr	r1, [r3, #0]
   226b2:	684b      	ldr	r3, [r1, #4]
   226b4:	68ca      	ldr	r2, [r1, #12]
   226b6:	b183      	cbz	r3, 226da <am_hal_ble_boot+0xc6>
   226b8:	3b01      	subs	r3, #1
   226ba:	4d15      	ldr	r5, [pc, #84]	; (22710 <am_hal_ble_boot+0xfc>)
   226bc:	eb02 0c03 	add.w	ip, r2, r3
   226c0:	1e50      	subs	r0, r2, #1
   226c2:	2300      	movs	r3, #0
   226c4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   226c8:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   226cc:	4560      	cmp	r0, ip
   226ce:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   226d2:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   226d6:	b29b      	uxth	r3, r3
   226d8:	d1f4      	bne.n	226c4 <am_hal_ble_boot+0xb0>
   226da:	608b      	str	r3, [r1, #8]
   226dc:	4620      	mov	r0, r4
   226de:	f7ff f9e7 	bl	21ab0 <am_hal_ble_patch_apply>
   226e2:	2800      	cmp	r0, #0
   226e4:	d1b0      	bne.n	22648 <am_hal_ble_boot+0x34>
   226e6:	4620      	mov	r0, r4
   226e8:	f7ff fb76 	bl	21dd8 <am_hal_ble_patch_copy_end_apply>
   226ec:	2800      	cmp	r0, #0
   226ee:	d0a7      	beq.n	22640 <am_hal_ble_boot+0x2c>
   226f0:	e7aa      	b.n	22648 <am_hal_ble_boot+0x34>
   226f2:	2002      	movs	r0, #2
   226f4:	4770      	bx	lr
   226f6:	bf00      	nop
   226f8:	01775230 	.word	0x01775230
   226fc:	40020000 	.word	0x40020000
   22700:	20006054 	.word	0x20006054
   22704:	0800000b 	.word	0x0800000b
   22708:	20006858 	.word	0x20006858
   2270c:	100030f4 	.word	0x100030f4
   22710:	00026504 	.word	0x00026504

00022714 <am_hal_ble_tx_power_set>:
   22714:	b530      	push	{r4, r5, lr}
   22716:	b083      	sub	sp, #12
   22718:	4604      	mov	r4, r0
   2271a:	2300      	movs	r3, #0
   2271c:	460d      	mov	r5, r1
   2271e:	466a      	mov	r2, sp
   22720:	491a      	ldr	r1, [pc, #104]	; (2278c <am_hal_ble_tx_power_set+0x78>)
   22722:	9301      	str	r3, [sp, #4]
   22724:	f7ff fd14 	bl	22150 <am_hal_ble_plf_reg_read>
   22728:	4918      	ldr	r1, [pc, #96]	; (2278c <am_hal_ble_tx_power_set+0x78>)
   2272a:	f04f 32ff 	mov.w	r2, #4294967295
   2272e:	4620      	mov	r0, r4
   22730:	f7ff fd82 	bl	22238 <am_hal_ble_plf_reg_write>
   22734:	042a      	lsls	r2, r5, #16
   22736:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   2273a:	4915      	ldr	r1, [pc, #84]	; (22790 <am_hal_ble_tx_power_set+0x7c>)
   2273c:	f042 0208 	orr.w	r2, r2, #8
   22740:	4620      	mov	r0, r4
   22742:	f7ff fd79 	bl	22238 <am_hal_ble_plf_reg_write>
   22746:	4911      	ldr	r1, [pc, #68]	; (2278c <am_hal_ble_tx_power_set+0x78>)
   22748:	9a00      	ldr	r2, [sp, #0]
   2274a:	4620      	mov	r0, r4
   2274c:	f7ff fd74 	bl	22238 <am_hal_ble_plf_reg_write>
   22750:	4b10      	ldr	r3, [pc, #64]	; (22794 <am_hal_ble_tx_power_set+0x80>)
   22752:	68db      	ldr	r3, [r3, #12]
   22754:	b2db      	uxtb	r3, r3
   22756:	2b21      	cmp	r3, #33	; 0x21
   22758:	bf0c      	ite	eq
   2275a:	490f      	ldreq	r1, [pc, #60]	; (22798 <am_hal_ble_tx_power_set+0x84>)
   2275c:	490f      	ldrne	r1, [pc, #60]	; (2279c <am_hal_ble_tx_power_set+0x88>)
   2275e:	aa01      	add	r2, sp, #4
   22760:	4620      	mov	r0, r4
   22762:	f7ff fcf5 	bl	22150 <am_hal_ble_plf_reg_read>
   22766:	9b01      	ldr	r3, [sp, #4]
   22768:	490a      	ldr	r1, [pc, #40]	; (22794 <am_hal_ble_tx_power_set+0x80>)
   2276a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2276e:	ea43 0205 	orr.w	r2, r3, r5
   22772:	9201      	str	r2, [sp, #4]
   22774:	68cb      	ldr	r3, [r1, #12]
   22776:	b2db      	uxtb	r3, r3
   22778:	2b21      	cmp	r3, #33	; 0x21
   2277a:	bf0c      	ite	eq
   2277c:	4906      	ldreq	r1, [pc, #24]	; (22798 <am_hal_ble_tx_power_set+0x84>)
   2277e:	4907      	ldrne	r1, [pc, #28]	; (2279c <am_hal_ble_tx_power_set+0x88>)
   22780:	4620      	mov	r0, r4
   22782:	f7ff fd59 	bl	22238 <am_hal_ble_plf_reg_write>
   22786:	2000      	movs	r0, #0
   22788:	b003      	add	sp, #12
   2278a:	bd30      	pop	{r4, r5, pc}
   2278c:	43000004 	.word	0x43000004
   22790:	52400018 	.word	0x52400018
   22794:	40020000 	.word	0x40020000
   22798:	20006838 	.word	0x20006838
   2279c:	20006038 	.word	0x20006038

000227a0 <am_hal_cachectrl_config>:
   227a0:	b530      	push	{r4, r5, lr}
   227a2:	b083      	sub	sp, #12
   227a4:	4604      	mov	r4, r0
   227a6:	f000 fc7d 	bl	230a4 <am_hal_interrupt_master_disable>
   227aa:	4d0e      	ldr	r5, [pc, #56]	; (227e4 <am_hal_cachectrl_config+0x44>)
   227ac:	9001      	str	r0, [sp, #4]
   227ae:	682b      	ldr	r3, [r5, #0]
   227b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   227b4:	602b      	str	r3, [r5, #0]
   227b6:	9801      	ldr	r0, [sp, #4]
   227b8:	f000 fc78 	bl	230ac <am_hal_interrupt_master_set>
   227bc:	7863      	ldrb	r3, [r4, #1]
   227be:	7822      	ldrb	r2, [r4, #0]
   227c0:	78a1      	ldrb	r1, [r4, #2]
   227c2:	021b      	lsls	r3, r3, #8
   227c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
   227c8:	0112      	lsls	r2, r2, #4
   227ca:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   227ce:	b2d2      	uxtb	r2, r2
   227d0:	4313      	orrs	r3, r2
   227d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   227d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   227da:	2000      	movs	r0, #0
   227dc:	602b      	str	r3, [r5, #0]
   227de:	b003      	add	sp, #12
   227e0:	bd30      	pop	{r4, r5, pc}
   227e2:	bf00      	nop
   227e4:	40018000 	.word	0x40018000

000227e8 <am_hal_cachectrl_enable>:
   227e8:	4a03      	ldr	r2, [pc, #12]	; (227f8 <am_hal_cachectrl_enable+0x10>)
   227ea:	6813      	ldr	r3, [r2, #0]
   227ec:	f043 0301 	orr.w	r3, r3, #1
   227f0:	2000      	movs	r0, #0
   227f2:	6013      	str	r3, [r2, #0]
   227f4:	4770      	bx	lr
   227f6:	bf00      	nop
   227f8:	40018000 	.word	0x40018000

000227fc <am_hal_cachectrl_control>:
   227fc:	b510      	push	{r4, lr}
   227fe:	3801      	subs	r0, #1
   22800:	b08e      	sub	sp, #56	; 0x38
   22802:	2810      	cmp	r0, #16
   22804:	f200 815e 	bhi.w	22ac4 <am_hal_cachectrl_control+0x2c8>
   22808:	e8df f010 	tbh	[pc, r0, lsl #1]
   2280c:	00360018 	.word	0x00360018
   22810:	0040003d 	.word	0x0040003d
   22814:	00450043 	.word	0x00450043
   22818:	0011001a 	.word	0x0011001a
   2281c:	00540047 	.word	0x00540047
   22820:	009a0061 	.word	0x009a0061
   22824:	010c00d3 	.word	0x010c00d3
   22828:	013f0126 	.word	0x013f0126
   2282c:	001d      	.short	0x001d
   2282e:	f44f 7300 	mov.w	r3, #512	; 0x200
   22832:	4aac      	ldr	r2, [pc, #688]	; (22ae4 <am_hal_cachectrl_control+0x2e8>)
   22834:	2000      	movs	r0, #0
   22836:	6093      	str	r3, [r2, #8]
   22838:	b00e      	add	sp, #56	; 0x38
   2283a:	bd10      	pop	{r4, pc}
   2283c:	2301      	movs	r3, #1
   2283e:	e7f8      	b.n	22832 <am_hal_cachectrl_control+0x36>
   22840:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22844:	e7f5      	b.n	22832 <am_hal_cachectrl_control+0x36>
   22846:	2900      	cmp	r1, #0
   22848:	f000 813c 	beq.w	22ac4 <am_hal_cachectrl_control+0x2c8>
   2284c:	684a      	ldr	r2, [r1, #4]
   2284e:	48a6      	ldr	r0, [pc, #664]	; (22ae8 <am_hal_cachectrl_control+0x2ec>)
   22850:	4202      	tst	r2, r0
   22852:	f040 8137 	bne.w	22ac4 <am_hal_cachectrl_control+0x2c8>
   22856:	688b      	ldr	r3, [r1, #8]
   22858:	4018      	ands	r0, r3
   2285a:	f040 8133 	bne.w	22ac4 <am_hal_cachectrl_control+0x2c8>
   2285e:	780c      	ldrb	r4, [r1, #0]
   22860:	2c00      	cmp	r4, #0
   22862:	f040 8133 	bne.w	22acc <am_hal_cachectrl_control+0x2d0>
   22866:	4c9f      	ldr	r4, [pc, #636]	; (22ae4 <am_hal_cachectrl_control+0x2e8>)
   22868:	7849      	ldrb	r1, [r1, #1]
   2286a:	6122      	str	r2, [r4, #16]
   2286c:	6163      	str	r3, [r4, #20]
   2286e:	6823      	ldr	r3, [r4, #0]
   22870:	f361 0382 	bfi	r3, r1, #2, #1
   22874:	6023      	str	r3, [r4, #0]
   22876:	e7df      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22878:	4b9a      	ldr	r3, [pc, #616]	; (22ae4 <am_hal_cachectrl_control+0x2e8>)
   2287a:	681b      	ldr	r3, [r3, #0]
   2287c:	01db      	lsls	r3, r3, #7
   2287e:	f140 811f 	bpl.w	22ac0 <am_hal_cachectrl_control+0x2c4>
   22882:	2302      	movs	r3, #2
   22884:	e7d5      	b.n	22832 <am_hal_cachectrl_control+0x36>
   22886:	f44f 6388 	mov.w	r3, #1088	; 0x440
   2288a:	e7d2      	b.n	22832 <am_hal_cachectrl_control+0x36>
   2288c:	f44f 7308 	mov.w	r3, #544	; 0x220
   22890:	e7cf      	b.n	22832 <am_hal_cachectrl_control+0x36>
   22892:	2340      	movs	r3, #64	; 0x40
   22894:	e7cd      	b.n	22832 <am_hal_cachectrl_control+0x36>
   22896:	2320      	movs	r3, #32
   22898:	e7cb      	b.n	22832 <am_hal_cachectrl_control+0x36>
   2289a:	f000 fc03 	bl	230a4 <am_hal_interrupt_master_disable>
   2289e:	4a91      	ldr	r2, [pc, #580]	; (22ae4 <am_hal_cachectrl_control+0x2e8>)
   228a0:	9000      	str	r0, [sp, #0]
   228a2:	6813      	ldr	r3, [r2, #0]
   228a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   228a8:	6013      	str	r3, [r2, #0]
   228aa:	9800      	ldr	r0, [sp, #0]
   228ac:	f000 fbfe 	bl	230ac <am_hal_interrupt_master_set>
   228b0:	2000      	movs	r0, #0
   228b2:	e7c1      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   228b4:	f000 fbf6 	bl	230a4 <am_hal_interrupt_master_disable>
   228b8:	4a8a      	ldr	r2, [pc, #552]	; (22ae4 <am_hal_cachectrl_control+0x2e8>)
   228ba:	9001      	str	r0, [sp, #4]
   228bc:	6813      	ldr	r3, [r2, #0]
   228be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   228c2:	6013      	str	r3, [r2, #0]
   228c4:	9801      	ldr	r0, [sp, #4]
   228c6:	f000 fbf1 	bl	230ac <am_hal_interrupt_master_set>
   228ca:	2000      	movs	r0, #0
   228cc:	e7b4      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   228ce:	f000 fbe9 	bl	230a4 <am_hal_interrupt_master_disable>
   228d2:	4603      	mov	r3, r0
   228d4:	4885      	ldr	r0, [pc, #532]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   228d6:	9302      	str	r3, [sp, #8]
   228d8:	f000 fa52 	bl	22d80 <am_hal_flash_load_ui32>
   228dc:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   228e0:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   228e4:	4881      	ldr	r0, [pc, #516]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   228e6:	f000 fa4f 	bl	22d88 <am_hal_flash_store_ui32>
   228ea:	9802      	ldr	r0, [sp, #8]
   228ec:	f000 fbde 	bl	230ac <am_hal_interrupt_master_set>
   228f0:	f000 fbd8 	bl	230a4 <am_hal_interrupt_master_disable>
   228f4:	4603      	mov	r3, r0
   228f6:	487d      	ldr	r0, [pc, #500]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   228f8:	9303      	str	r3, [sp, #12]
   228fa:	f000 fa41 	bl	22d80 <am_hal_flash_load_ui32>
   228fe:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   22902:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
   22906:	4879      	ldr	r0, [pc, #484]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22908:	f000 fa3e 	bl	22d88 <am_hal_flash_store_ui32>
   2290c:	9803      	ldr	r0, [sp, #12]
   2290e:	f000 fbcd 	bl	230ac <am_hal_interrupt_master_set>
   22912:	f000 fbc7 	bl	230a4 <am_hal_interrupt_master_disable>
   22916:	4603      	mov	r3, r0
   22918:	4874      	ldr	r0, [pc, #464]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   2291a:	9304      	str	r3, [sp, #16]
   2291c:	f000 fa30 	bl	22d80 <am_hal_flash_load_ui32>
   22920:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   22924:	f020 000f 	bic.w	r0, r0, #15
   22928:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   2292c:	f041 0103 	orr.w	r1, r1, #3
   22930:	486e      	ldr	r0, [pc, #440]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22932:	f000 fa29 	bl	22d88 <am_hal_flash_store_ui32>
   22936:	9804      	ldr	r0, [sp, #16]
   22938:	f000 fbb8 	bl	230ac <am_hal_interrupt_master_set>
   2293c:	2000      	movs	r0, #0
   2293e:	e77b      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22940:	f000 fbb0 	bl	230a4 <am_hal_interrupt_master_disable>
   22944:	4603      	mov	r3, r0
   22946:	4869      	ldr	r0, [pc, #420]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22948:	9305      	str	r3, [sp, #20]
   2294a:	f000 fa19 	bl	22d80 <am_hal_flash_load_ui32>
   2294e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   22952:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   22956:	4865      	ldr	r0, [pc, #404]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22958:	f000 fa16 	bl	22d88 <am_hal_flash_store_ui32>
   2295c:	9805      	ldr	r0, [sp, #20]
   2295e:	f000 fba5 	bl	230ac <am_hal_interrupt_master_set>
   22962:	f000 fb9f 	bl	230a4 <am_hal_interrupt_master_disable>
   22966:	4603      	mov	r3, r0
   22968:	4860      	ldr	r0, [pc, #384]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   2296a:	9306      	str	r3, [sp, #24]
   2296c:	f000 fa08 	bl	22d80 <am_hal_flash_load_ui32>
   22970:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   22974:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
   22978:	485c      	ldr	r0, [pc, #368]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   2297a:	f000 fa05 	bl	22d88 <am_hal_flash_store_ui32>
   2297e:	9806      	ldr	r0, [sp, #24]
   22980:	f000 fb94 	bl	230ac <am_hal_interrupt_master_set>
   22984:	f000 fb8e 	bl	230a4 <am_hal_interrupt_master_disable>
   22988:	4603      	mov	r3, r0
   2298a:	4858      	ldr	r0, [pc, #352]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   2298c:	9307      	str	r3, [sp, #28]
   2298e:	f000 f9f7 	bl	22d80 <am_hal_flash_load_ui32>
   22992:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   22996:	f020 000f 	bic.w	r0, r0, #15
   2299a:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   2299e:	f041 0101 	orr.w	r1, r1, #1
   229a2:	4852      	ldr	r0, [pc, #328]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   229a4:	f000 f9f0 	bl	22d88 <am_hal_flash_store_ui32>
   229a8:	9807      	ldr	r0, [sp, #28]
   229aa:	f000 fb7f 	bl	230ac <am_hal_interrupt_master_set>
   229ae:	2000      	movs	r0, #0
   229b0:	e742      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   229b2:	f000 fb77 	bl	230a4 <am_hal_interrupt_master_disable>
   229b6:	4603      	mov	r3, r0
   229b8:	484c      	ldr	r0, [pc, #304]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   229ba:	9308      	str	r3, [sp, #32]
   229bc:	f000 f9e0 	bl	22d80 <am_hal_flash_load_ui32>
   229c0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   229c4:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   229c8:	4848      	ldr	r0, [pc, #288]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   229ca:	f000 f9dd 	bl	22d88 <am_hal_flash_store_ui32>
   229ce:	9808      	ldr	r0, [sp, #32]
   229d0:	f000 fb6c 	bl	230ac <am_hal_interrupt_master_set>
   229d4:	f000 fb66 	bl	230a4 <am_hal_interrupt_master_disable>
   229d8:	4603      	mov	r3, r0
   229da:	4844      	ldr	r0, [pc, #272]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   229dc:	9309      	str	r3, [sp, #36]	; 0x24
   229de:	f000 f9cf 	bl	22d80 <am_hal_flash_load_ui32>
   229e2:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   229e6:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
   229ea:	4840      	ldr	r0, [pc, #256]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   229ec:	f000 f9cc 	bl	22d88 <am_hal_flash_store_ui32>
   229f0:	9809      	ldr	r0, [sp, #36]	; 0x24
   229f2:	f000 fb5b 	bl	230ac <am_hal_interrupt_master_set>
   229f6:	f000 fb55 	bl	230a4 <am_hal_interrupt_master_disable>
   229fa:	4603      	mov	r3, r0
   229fc:	483b      	ldr	r0, [pc, #236]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   229fe:	930a      	str	r3, [sp, #40]	; 0x28
   22a00:	f000 f9be 	bl	22d80 <am_hal_flash_load_ui32>
   22a04:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   22a08:	f020 000f 	bic.w	r0, r0, #15
   22a0c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   22a10:	f041 0101 	orr.w	r1, r1, #1
   22a14:	4835      	ldr	r0, [pc, #212]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22a16:	f000 f9b7 	bl	22d88 <am_hal_flash_store_ui32>
   22a1a:	980a      	ldr	r0, [sp, #40]	; 0x28
   22a1c:	f000 fb46 	bl	230ac <am_hal_interrupt_master_set>
   22a20:	2000      	movs	r0, #0
   22a22:	e709      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22a24:	2900      	cmp	r1, #0
   22a26:	d04d      	beq.n	22ac4 <am_hal_cachectrl_control+0x2c8>
   22a28:	680c      	ldr	r4, [r1, #0]
   22a2a:	2c03      	cmp	r4, #3
   22a2c:	d84c      	bhi.n	22ac8 <am_hal_cachectrl_control+0x2cc>
   22a2e:	f000 fb39 	bl	230a4 <am_hal_interrupt_master_disable>
   22a32:	4603      	mov	r3, r0
   22a34:	482d      	ldr	r0, [pc, #180]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22a36:	930b      	str	r3, [sp, #44]	; 0x2c
   22a38:	f000 f9a2 	bl	22d80 <am_hal_flash_load_ui32>
   22a3c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   22a40:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   22a44:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22a48:	4828      	ldr	r0, [pc, #160]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22a4a:	f000 f99d 	bl	22d88 <am_hal_flash_store_ui32>
   22a4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22a50:	f000 fb2c 	bl	230ac <am_hal_interrupt_master_set>
   22a54:	2000      	movs	r0, #0
   22a56:	e6ef      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22a58:	b3a1      	cbz	r1, 22ac4 <am_hal_cachectrl_control+0x2c8>
   22a5a:	680c      	ldr	r4, [r1, #0]
   22a5c:	2c07      	cmp	r4, #7
   22a5e:	d833      	bhi.n	22ac8 <am_hal_cachectrl_control+0x2cc>
   22a60:	f000 fb20 	bl	230a4 <am_hal_interrupt_master_disable>
   22a64:	4603      	mov	r3, r0
   22a66:	4821      	ldr	r0, [pc, #132]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22a68:	930c      	str	r3, [sp, #48]	; 0x30
   22a6a:	f000 f989 	bl	22d80 <am_hal_flash_load_ui32>
   22a6e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   22a72:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   22a76:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22a7a:	481c      	ldr	r0, [pc, #112]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22a7c:	f000 f984 	bl	22d88 <am_hal_flash_store_ui32>
   22a80:	980c      	ldr	r0, [sp, #48]	; 0x30
   22a82:	f000 fb13 	bl	230ac <am_hal_interrupt_master_set>
   22a86:	2000      	movs	r0, #0
   22a88:	e6d6      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22a8a:	b1d9      	cbz	r1, 22ac4 <am_hal_cachectrl_control+0x2c8>
   22a8c:	680c      	ldr	r4, [r1, #0]
   22a8e:	2c0f      	cmp	r4, #15
   22a90:	d81a      	bhi.n	22ac8 <am_hal_cachectrl_control+0x2cc>
   22a92:	f000 fb07 	bl	230a4 <am_hal_interrupt_master_disable>
   22a96:	4603      	mov	r3, r0
   22a98:	4814      	ldr	r0, [pc, #80]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22a9a:	930d      	str	r3, [sp, #52]	; 0x34
   22a9c:	f000 f970 	bl	22d80 <am_hal_flash_load_ui32>
   22aa0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   22aa4:	f020 000f 	bic.w	r0, r0, #15
   22aa8:	ea40 0104 	orr.w	r1, r0, r4
   22aac:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   22ab0:	480e      	ldr	r0, [pc, #56]	; (22aec <am_hal_cachectrl_control+0x2f0>)
   22ab2:	f000 f969 	bl	22d88 <am_hal_flash_store_ui32>
   22ab6:	980d      	ldr	r0, [sp, #52]	; 0x34
   22ab8:	f000 faf8 	bl	230ac <am_hal_interrupt_master_set>
   22abc:	2000      	movs	r0, #0
   22abe:	e6bb      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22ac0:	2007      	movs	r0, #7
   22ac2:	e6b9      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22ac4:	2006      	movs	r0, #6
   22ac6:	e6b7      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22ac8:	2001      	movs	r0, #1
   22aca:	e6b5      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22acc:	2c01      	cmp	r4, #1
   22ace:	d1f9      	bne.n	22ac4 <am_hal_cachectrl_control+0x2c8>
   22ad0:	4c04      	ldr	r4, [pc, #16]	; (22ae4 <am_hal_cachectrl_control+0x2e8>)
   22ad2:	7849      	ldrb	r1, [r1, #1]
   22ad4:	61a2      	str	r2, [r4, #24]
   22ad6:	61e3      	str	r3, [r4, #28]
   22ad8:	6823      	ldr	r3, [r4, #0]
   22ada:	f361 03c3 	bfi	r3, r1, #3, #1
   22ade:	6023      	str	r3, [r4, #0]
   22ae0:	e6aa      	b.n	22838 <am_hal_cachectrl_control+0x3c>
   22ae2:	bf00      	nop
   22ae4:	40018000 	.word	0x40018000
   22ae8:	f800000f 	.word	0xf800000f
   22aec:	40018004 	.word	0x40018004

00022af0 <am_hal_clkgen_control>:
   22af0:	4b49      	ldr	r3, [pc, #292]	; (22c18 <am_hal_clkgen_control+0x128>)
   22af2:	681a      	ldr	r2, [r3, #0]
   22af4:	b912      	cbnz	r2, 22afc <am_hal_clkgen_control+0xc>
   22af6:	4a49      	ldr	r2, [pc, #292]	; (22c1c <am_hal_clkgen_control+0x12c>)
   22af8:	6812      	ldr	r2, [r2, #0]
   22afa:	601a      	str	r2, [r3, #0]
   22afc:	2809      	cmp	r0, #9
   22afe:	f200 8089 	bhi.w	22c14 <am_hal_clkgen_control+0x124>
   22b02:	e8df f000 	tbb	[pc, r0]
   22b06:	160d      	.short	0x160d
   22b08:	423a261e 	.word	0x423a261e
   22b0c:	055c544c 	.word	0x055c544c
   22b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22b14:	2000      	movs	r0, #0
   22b16:	6a1a      	ldr	r2, [r3, #32]
   22b18:	f36f 0200 	bfc	r2, #0, #1
   22b1c:	621a      	str	r2, [r3, #32]
   22b1e:	4770      	bx	lr
   22b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22b24:	2200      	movs	r2, #0
   22b26:	2147      	movs	r1, #71	; 0x47
   22b28:	6159      	str	r1, [r3, #20]
   22b2a:	4610      	mov	r0, r2
   22b2c:	619a      	str	r2, [r3, #24]
   22b2e:	615a      	str	r2, [r3, #20]
   22b30:	4770      	bx	lr
   22b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22b36:	2000      	movs	r0, #0
   22b38:	899a      	ldrh	r2, [r3, #12]
   22b3a:	f36f 0200 	bfc	r2, #0, #1
   22b3e:	819a      	strh	r2, [r3, #12]
   22b40:	4770      	bx	lr
   22b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22b46:	2000      	movs	r0, #0
   22b48:	899a      	ldrh	r2, [r3, #12]
   22b4a:	f36f 0241 	bfc	r2, #1, #1
   22b4e:	819a      	strh	r2, [r3, #12]
   22b50:	4770      	bx	lr
   22b52:	4a33      	ldr	r2, [pc, #204]	; (22c20 <am_hal_clkgen_control+0x130>)
   22b54:	68d3      	ldr	r3, [r2, #12]
   22b56:	b2db      	uxtb	r3, r3
   22b58:	2b21      	cmp	r3, #33	; 0x21
   22b5a:	d106      	bne.n	22b6a <am_hal_clkgen_control+0x7a>
   22b5c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   22b60:	2101      	movs	r1, #1
   22b62:	f361 2309 	bfi	r3, r1, #8, #2
   22b66:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   22b6a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22b6e:	2000      	movs	r0, #0
   22b70:	8993      	ldrh	r3, [r2, #12]
   22b72:	f043 0301 	orr.w	r3, r3, #1
   22b76:	8193      	strh	r3, [r2, #12]
   22b78:	4770      	bx	lr
   22b7a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22b7e:	2000      	movs	r0, #0
   22b80:	8993      	ldrh	r3, [r2, #12]
   22b82:	f043 0302 	orr.w	r3, r3, #2
   22b86:	8193      	strh	r3, [r2, #12]
   22b88:	4770      	bx	lr
   22b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22b8e:	2200      	movs	r2, #0
   22b90:	2047      	movs	r0, #71	; 0x47
   22b92:	2101      	movs	r1, #1
   22b94:	6158      	str	r0, [r3, #20]
   22b96:	6199      	str	r1, [r3, #24]
   22b98:	4610      	mov	r0, r2
   22b9a:	615a      	str	r2, [r3, #20]
   22b9c:	4770      	bx	lr
   22b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22ba2:	2000      	movs	r0, #0
   22ba4:	899a      	ldrh	r2, [r3, #12]
   22ba6:	f36f 12c7 	bfc	r2, #7, #1
   22baa:	819a      	strh	r2, [r3, #12]
   22bac:	4770      	bx	lr
   22bae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22bb2:	2000      	movs	r0, #0
   22bb4:	8993      	ldrh	r3, [r2, #12]
   22bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   22bba:	8193      	strh	r3, [r2, #12]
   22bbc:	4770      	bx	lr
   22bbe:	4a18      	ldr	r2, [pc, #96]	; (22c20 <am_hal_clkgen_control+0x130>)
   22bc0:	68d3      	ldr	r3, [r2, #12]
   22bc2:	b2db      	uxtb	r3, r3
   22bc4:	2b21      	cmp	r3, #33	; 0x21
   22bc6:	d00a      	beq.n	22bde <am_hal_clkgen_control+0xee>
   22bc8:	b139      	cbz	r1, 22bda <am_hal_clkgen_control+0xea>
   22bca:	680b      	ldr	r3, [r1, #0]
   22bcc:	f043 0301 	orr.w	r3, r3, #1
   22bd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22bd4:	2000      	movs	r0, #0
   22bd6:	6213      	str	r3, [r2, #32]
   22bd8:	4770      	bx	lr
   22bda:	4b12      	ldr	r3, [pc, #72]	; (22c24 <am_hal_clkgen_control+0x134>)
   22bdc:	e7f8      	b.n	22bd0 <am_hal_clkgen_control+0xe0>
   22bde:	b500      	push	{lr}
   22be0:	b083      	sub	sp, #12
   22be2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   22be6:	9101      	str	r1, [sp, #4]
   22be8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   22bec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   22bf0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   22bf4:	f000 f87e 	bl	22cf4 <am_hal_flash_delay>
   22bf8:	9901      	ldr	r1, [sp, #4]
   22bfa:	b149      	cbz	r1, 22c10 <am_hal_clkgen_control+0x120>
   22bfc:	680b      	ldr	r3, [r1, #0]
   22bfe:	f043 0301 	orr.w	r3, r3, #1
   22c02:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   22c06:	2000      	movs	r0, #0
   22c08:	6213      	str	r3, [r2, #32]
   22c0a:	b003      	add	sp, #12
   22c0c:	f85d fb04 	ldr.w	pc, [sp], #4
   22c10:	4b04      	ldr	r3, [pc, #16]	; (22c24 <am_hal_clkgen_control+0x134>)
   22c12:	e7f6      	b.n	22c02 <am_hal_clkgen_control+0x112>
   22c14:	2006      	movs	r0, #6
   22c16:	4770      	bx	lr
   22c18:	1000b634 	.word	0x1000b634
   22c1c:	4ffff000 	.word	0x4ffff000
   22c20:	40020000 	.word	0x40020000
   22c24:	0025b801 	.word	0x0025b801

00022c28 <am_hal_clkgen_status_get>:
   22c28:	b1b0      	cbz	r0, 22c58 <am_hal_clkgen_status_get+0x30>
   22c2a:	b410      	push	{r4}
   22c2c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
   22c30:	4603      	mov	r3, r0
   22c32:	698c      	ldr	r4, [r1, #24]
   22c34:	4809      	ldr	r0, [pc, #36]	; (22c5c <am_hal_clkgen_status_get+0x34>)
   22c36:	4a0a      	ldr	r2, [pc, #40]	; (22c60 <am_hal_clkgen_status_get+0x38>)
   22c38:	f014 0f01 	tst.w	r4, #1
   22c3c:	bf08      	it	eq
   22c3e:	4602      	moveq	r2, r0
   22c40:	601a      	str	r2, [r3, #0]
   22c42:	69ca      	ldr	r2, [r1, #28]
   22c44:	f85d 4b04 	ldr.w	r4, [sp], #4
   22c48:	f002 0101 	and.w	r1, r2, #1
   22c4c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   22c50:	2000      	movs	r0, #0
   22c52:	6059      	str	r1, [r3, #4]
   22c54:	721a      	strb	r2, [r3, #8]
   22c56:	4770      	bx	lr
   22c58:	2006      	movs	r0, #6
   22c5a:	4770      	bx	lr
   22c5c:	02dc6c00 	.word	0x02dc6c00
   22c60:	016e3600 	.word	0x016e3600

00022c64 <am_hal_ctimer_int_service>:
   22c64:	b198      	cbz	r0, 22c8e <am_hal_ctimer_int_service+0x2a>
   22c66:	b570      	push	{r4, r5, r6, lr}
   22c68:	4e09      	ldr	r6, [pc, #36]	; (22c90 <am_hal_ctimer_int_service+0x2c>)
   22c6a:	4604      	mov	r4, r0
   22c6c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   22c70:	fab4 f384 	clz	r3, r4
   22c74:	f1c3 021f 	rsb	r2, r3, #31
   22c78:	fa25 f303 	lsr.w	r3, r5, r3
   22c7c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   22c80:	ea24 0403 	bic.w	r4, r4, r3
   22c84:	b102      	cbz	r2, 22c88 <am_hal_ctimer_int_service+0x24>
   22c86:	4790      	blx	r2
   22c88:	2c00      	cmp	r4, #0
   22c8a:	d1f1      	bne.n	22c70 <am_hal_ctimer_int_service+0xc>
   22c8c:	bd70      	pop	{r4, r5, r6, pc}
   22c8e:	4770      	bx	lr
   22c90:	1000b5b4 	.word	0x1000b5b4

00022c94 <am_hal_ctimer_int_clear>:
   22c94:	b510      	push	{r4, lr}
   22c96:	b082      	sub	sp, #8
   22c98:	4604      	mov	r4, r0
   22c9a:	f000 fa03 	bl	230a4 <am_hal_interrupt_master_disable>
   22c9e:	4b05      	ldr	r3, [pc, #20]	; (22cb4 <am_hal_ctimer_int_clear+0x20>)
   22ca0:	9001      	str	r0, [sp, #4]
   22ca2:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   22ca6:	9801      	ldr	r0, [sp, #4]
   22ca8:	b002      	add	sp, #8
   22caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22cae:	f000 b9fd 	b.w	230ac <am_hal_interrupt_master_set>
   22cb2:	bf00      	nop
   22cb4:	40008000 	.word	0x40008000

00022cb8 <am_hal_ctimer_int_status_get>:
   22cb8:	b510      	push	{r4, lr}
   22cba:	b082      	sub	sp, #8
   22cbc:	4604      	mov	r4, r0
   22cbe:	f000 f9f1 	bl	230a4 <am_hal_interrupt_master_disable>
   22cc2:	4b0b      	ldr	r3, [pc, #44]	; (22cf0 <am_hal_ctimer_int_status_get+0x38>)
   22cc4:	9001      	str	r0, [sp, #4]
   22cc6:	b154      	cbz	r4, 22cde <am_hal_ctimer_int_status_get+0x26>
   22cc8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   22ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   22cd0:	9801      	ldr	r0, [sp, #4]
   22cd2:	401c      	ands	r4, r3
   22cd4:	f000 f9ea 	bl	230ac <am_hal_interrupt_master_set>
   22cd8:	4620      	mov	r0, r4
   22cda:	b002      	add	sp, #8
   22cdc:	bd10      	pop	{r4, pc}
   22cde:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   22ce2:	9801      	ldr	r0, [sp, #4]
   22ce4:	f000 f9e2 	bl	230ac <am_hal_interrupt_master_set>
   22ce8:	4620      	mov	r0, r4
   22cea:	b002      	add	sp, #8
   22cec:	bd10      	pop	{r4, pc}
   22cee:	bf00      	nop
   22cf0:	40008000 	.word	0x40008000

00022cf4 <am_hal_flash_delay>:
   22cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   22cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   22cfa:	075b      	lsls	r3, r3, #29
   22cfc:	bf46      	itte	mi
   22cfe:	0040      	lslmi	r0, r0, #1
   22d00:	230e      	movmi	r3, #14
   22d02:	230b      	movpl	r3, #11
   22d04:	4298      	cmp	r0, r3
   22d06:	d902      	bls.n	22d0e <am_hal_flash_delay+0x1a>
   22d08:	4a01      	ldr	r2, [pc, #4]	; (22d10 <am_hal_flash_delay+0x1c>)
   22d0a:	1ac0      	subs	r0, r0, r3
   22d0c:	4710      	bx	r2
   22d0e:	4770      	bx	lr
   22d10:	0800009d 	.word	0x0800009d

00022d14 <am_hal_flash_delay_status_check>:
   22d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22d18:	f89d c020 	ldrb.w	ip, [sp, #32]
   22d1c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 22d7c <am_hal_flash_delay_status_check+0x68>
   22d20:	4604      	mov	r4, r0
   22d22:	460d      	mov	r5, r1
   22d24:	4616      	mov	r6, r2
   22d26:	461f      	mov	r7, r3
   22d28:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   22d2c:	f1bc 0f00 	cmp.w	ip, #0
   22d30:	d00a      	beq.n	22d48 <am_hal_flash_delay_status_check+0x34>
   22d32:	e01a      	b.n	22d6a <am_hal_flash_delay_status_check+0x56>
   22d34:	b1f4      	cbz	r4, 22d74 <am_hal_flash_delay_status_check+0x60>
   22d36:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   22d3a:	f013 0f04 	tst.w	r3, #4
   22d3e:	bf0c      	ite	eq
   22d40:	2005      	moveq	r0, #5
   22d42:	2012      	movne	r0, #18
   22d44:	3c01      	subs	r4, #1
   22d46:	47c0      	blx	r8
   22d48:	6828      	ldr	r0, [r5, #0]
   22d4a:	4030      	ands	r0, r6
   22d4c:	42b8      	cmp	r0, r7
   22d4e:	d0f1      	beq.n	22d34 <am_hal_flash_delay_status_check+0x20>
   22d50:	2000      	movs	r0, #0
   22d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22d56:	b16c      	cbz	r4, 22d74 <am_hal_flash_delay_status_check+0x60>
   22d58:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   22d5c:	f013 0f04 	tst.w	r3, #4
   22d60:	bf0c      	ite	eq
   22d62:	2005      	moveq	r0, #5
   22d64:	2012      	movne	r0, #18
   22d66:	3c01      	subs	r4, #1
   22d68:	47c0      	blx	r8
   22d6a:	6828      	ldr	r0, [r5, #0]
   22d6c:	4030      	ands	r0, r6
   22d6e:	42b8      	cmp	r0, r7
   22d70:	d1f1      	bne.n	22d56 <am_hal_flash_delay_status_check+0x42>
   22d72:	e7ed      	b.n	22d50 <am_hal_flash_delay_status_check+0x3c>
   22d74:	2004      	movs	r0, #4
   22d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22d7a:	bf00      	nop
   22d7c:	0800009d 	.word	0x0800009d

00022d80 <am_hal_flash_load_ui32>:
   22d80:	4b00      	ldr	r3, [pc, #0]	; (22d84 <am_hal_flash_load_ui32+0x4>)
   22d82:	4718      	bx	r3
   22d84:	08000075 	.word	0x08000075

00022d88 <am_hal_flash_store_ui32>:
   22d88:	4b01      	ldr	r3, [pc, #4]	; (22d90 <am_hal_flash_store_ui32+0x8>)
   22d8a:	f043 0301 	orr.w	r3, r3, #1
   22d8e:	4718      	bx	r3
   22d90:	100040b0 	.word	0x100040b0

00022d94 <am_hal_triple_read>:
   22d94:	b412      	push	{r1, r4}
   22d96:	f3ef 8410 	mrs	r4, PRIMASK
   22d9a:	b672      	cpsid	i
   22d9c:	6801      	ldr	r1, [r0, #0]
   22d9e:	6802      	ldr	r2, [r0, #0]
   22da0:	6803      	ldr	r3, [r0, #0]
   22da2:	f384 8810 	msr	PRIMASK, r4
   22da6:	bc11      	pop	{r0, r4}
   22da8:	6001      	str	r1, [r0, #0]
   22daa:	6042      	str	r2, [r0, #4]
   22dac:	6083      	str	r3, [r0, #8]
   22dae:	4770      	bx	lr

00022db0 <am_hal_gpio_pinconfig>:
   22db0:	2831      	cmp	r0, #49	; 0x31
   22db2:	f200 80c3 	bhi.w	22f3c <am_hal_gpio_pinconfig+0x18c>
   22db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22dba:	4604      	mov	r4, r0
   22dbc:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
   22dc0:	f001 0007 	and.w	r0, r1, #7
   22dc4:	b085      	sub	sp, #20
   22dc6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
   22dca:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   22dce:	d00f      	beq.n	22df0 <am_hal_gpio_pinconfig+0x40>
   22dd0:	f3c1 1642 	ubfx	r6, r1, #5, #3
   22dd4:	1db5      	adds	r5, r6, #6
   22dd6:	f005 0507 	and.w	r5, r5, #7
   22dda:	2d03      	cmp	r5, #3
   22ddc:	f042 0201 	orr.w	r2, r2, #1
   22de0:	f240 80ae 	bls.w	22f40 <am_hal_gpio_pinconfig+0x190>
   22de4:	2fc0      	cmp	r7, #192	; 0xc0
   22de6:	f000 80e1 	beq.w	22fac <am_hal_gpio_pinconfig+0x1fc>
   22dea:	2f20      	cmp	r7, #32
   22dec:	f000 80e3 	beq.w	22fb6 <am_hal_gpio_pinconfig+0x206>
   22df0:	b163      	cbz	r3, 22e0c <am_hal_gpio_pinconfig+0x5c>
   22df2:	2b01      	cmp	r3, #1
   22df4:	f000 80d3 	beq.w	22f9e <am_hal_gpio_pinconfig+0x1ee>
   22df8:	2b02      	cmp	r3, #2
   22dfa:	f040 80c9 	bne.w	22f90 <am_hal_gpio_pinconfig+0x1e0>
   22dfe:	4b79      	ldr	r3, [pc, #484]	; (22fe4 <am_hal_gpio_pinconfig+0x234>)
   22e00:	5d1b      	ldrb	r3, [r3, r4]
   22e02:	075b      	lsls	r3, r3, #29
   22e04:	f140 80c4 	bpl.w	22f90 <am_hal_gpio_pinconfig+0x1e0>
   22e08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   22e0c:	4b76      	ldr	r3, [pc, #472]	; (22fe8 <am_hal_gpio_pinconfig+0x238>)
   22e0e:	5d1b      	ldrb	r3, [r3, r4]
   22e10:	4103      	asrs	r3, r0
   22e12:	005b      	lsls	r3, r3, #1
   22e14:	f003 0302 	and.w	r3, r3, #2
   22e18:	4313      	orrs	r3, r2
   22e1a:	4a74      	ldr	r2, [pc, #464]	; (22fec <am_hal_gpio_pinconfig+0x23c>)
   22e1c:	5d12      	ldrb	r2, [r2, r4]
   22e1e:	4282      	cmp	r2, r0
   22e20:	f000 8099 	beq.w	22f56 <am_hal_gpio_pinconfig+0x1a6>
   22e24:	f3c1 3000 	ubfx	r0, r1, #12, #1
   22e28:	f3c1 2581 	ubfx	r5, r1, #10, #2
   22e2c:	f3c1 3280 	ubfx	r2, r1, #14, #1
   22e30:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
   22e34:	0a88      	lsrs	r0, r1, #10
   22e36:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   22e3a:	f000 0008 	and.w	r0, r0, #8
   22e3e:	4302      	orrs	r2, r0
   22e40:	f3c1 2007 	ubfx	r0, r1, #8, #8
   22e44:	f000 050c 	and.w	r5, r0, #12
   22e48:	2d04      	cmp	r5, #4
   22e4a:	f000 80a5 	beq.w	22f98 <am_hal_gpio_pinconfig+0x1e8>
   22e4e:	4d68      	ldr	r5, [pc, #416]	; (22ff0 <am_hal_gpio_pinconfig+0x240>)
   22e50:	682d      	ldr	r5, [r5, #0]
   22e52:	eba1 0805 	sub.w	r8, r1, r5
   22e56:	fab8 f888 	clz	r8, r8
   22e5a:	ea4f 1858 	mov.w	r8, r8, lsr #5
   22e5e:	f010 0f60 	tst.w	r0, #96	; 0x60
   22e62:	bf04      	itt	eq
   22e64:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
   22e68:	f360 0200 	bfieq	r2, r0, #0, #1
   22e6c:	00a0      	lsls	r0, r4, #2
   22e6e:	f3c1 2101 	ubfx	r1, r1, #8, #2
   22e72:	2902      	cmp	r1, #2
   22e74:	d05c      	beq.n	22f30 <am_hal_gpio_pinconfig+0x180>
   22e76:	2903      	cmp	r1, #3
   22e78:	d058      	beq.n	22f2c <am_hal_gpio_pinconfig+0x17c>
   22e7a:	2901      	cmp	r1, #1
   22e7c:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   22e80:	bf08      	it	eq
   22e82:	f043 0304 	orreq.w	r3, r3, #4
   22e86:	f001 0118 	and.w	r1, r1, #24
   22e8a:	2700      	movs	r7, #0
   22e8c:	f000 001c 	and.w	r0, r0, #28
   22e90:	fa02 f600 	lsl.w	r6, r2, r0
   22e94:	220f      	movs	r2, #15
   22e96:	4082      	lsls	r2, r0
   22e98:	43d2      	mvns	r2, r2
   22e9a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   22e9e:	fa03 f501 	lsl.w	r5, r3, r1
   22ea2:	fa09 f901 	lsl.w	r9, r9, r1
   22ea6:	9201      	str	r2, [sp, #4]
   22ea8:	f000 f8fc 	bl	230a4 <am_hal_interrupt_master_disable>
   22eac:	f024 0a03 	bic.w	sl, r4, #3
   22eb0:	ea4f 0b54 	mov.w	fp, r4, lsr #1
   22eb4:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
   22eb8:	4b4e      	ldr	r3, [pc, #312]	; (22ff4 <am_hal_gpio_pinconfig+0x244>)
   22eba:	494f      	ldr	r1, [pc, #316]	; (22ff8 <am_hal_gpio_pinconfig+0x248>)
   22ebc:	9a01      	ldr	r2, [sp, #4]
   22ebe:	9003      	str	r0, [sp, #12]
   22ec0:	ea6f 0909 	mvn.w	r9, r9
   22ec4:	f02b 0b03 	bic.w	fp, fp, #3
   22ec8:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
   22ecc:	f1b8 0f00 	cmp.w	r8, #0
   22ed0:	d00b      	beq.n	22eea <am_hal_gpio_pinconfig+0x13a>
   22ed2:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   22ed6:	f004 081f 	and.w	r8, r4, #31
   22eda:	4848      	ldr	r0, [pc, #288]	; (22ffc <am_hal_gpio_pinconfig+0x24c>)
   22edc:	f00e 0e04 	and.w	lr, lr, #4
   22ee0:	2401      	movs	r4, #1
   22ee2:	fa04 f408 	lsl.w	r4, r4, r8
   22ee6:	f84e 4000 	str.w	r4, [lr, r0]
   22eea:	4845      	ldr	r0, [pc, #276]	; (23000 <am_hal_gpio_pinconfig+0x250>)
   22eec:	2473      	movs	r4, #115	; 0x73
   22eee:	6604      	str	r4, [r0, #96]	; 0x60
   22ef0:	f8dc 4000 	ldr.w	r4, [ip]
   22ef4:	ea04 0409 	and.w	r4, r4, r9
   22ef8:	4325      	orrs	r5, r4
   22efa:	f8cc 5000 	str.w	r5, [ip]
   22efe:	f85b 4003 	ldr.w	r4, [fp, r3]
   22f02:	4022      	ands	r2, r4
   22f04:	4332      	orrs	r2, r6
   22f06:	f84b 2003 	str.w	r2, [fp, r3]
   22f0a:	f85a 3001 	ldr.w	r3, [sl, r1]
   22f0e:	ea03 0909 	and.w	r9, r3, r9
   22f12:	2400      	movs	r4, #0
   22f14:	ea49 0707 	orr.w	r7, r9, r7
   22f18:	f84a 7001 	str.w	r7, [sl, r1]
   22f1c:	6604      	str	r4, [r0, #96]	; 0x60
   22f1e:	9803      	ldr	r0, [sp, #12]
   22f20:	f000 f8c4 	bl	230ac <am_hal_interrupt_master_set>
   22f24:	4620      	mov	r0, r4
   22f26:	b005      	add	sp, #20
   22f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f2c:	f043 0304 	orr.w	r3, r3, #4
   22f30:	00e1      	lsls	r1, r4, #3
   22f32:	f001 0118 	and.w	r1, r1, #24
   22f36:	2701      	movs	r7, #1
   22f38:	408f      	lsls	r7, r1
   22f3a:	e7a7      	b.n	22e8c <am_hal_gpio_pinconfig+0xdc>
   22f3c:	2006      	movs	r0, #6
   22f3e:	4770      	bx	lr
   22f40:	4d28      	ldr	r5, [pc, #160]	; (22fe4 <am_hal_gpio_pinconfig+0x234>)
   22f42:	5d2d      	ldrb	r5, [r5, r4]
   22f44:	3e02      	subs	r6, #2
   22f46:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   22f4a:	07ee      	lsls	r6, r5, #31
   22f4c:	d536      	bpl.n	22fbc <am_hal_gpio_pinconfig+0x20c>
   22f4e:	2b00      	cmp	r3, #0
   22f50:	f43f af5c 	beq.w	22e0c <am_hal_gpio_pinconfig+0x5c>
   22f54:	e74d      	b.n	22df2 <am_hal_gpio_pinconfig+0x42>
   22f56:	f3c1 4202 	ubfx	r2, r1, #16, #3
   22f5a:	2a07      	cmp	r2, #7
   22f5c:	d030      	beq.n	22fc0 <am_hal_gpio_pinconfig+0x210>
   22f5e:	4d29      	ldr	r5, [pc, #164]	; (23004 <am_hal_gpio_pinconfig+0x254>)
   22f60:	f3c1 40c1 	ubfx	r0, r1, #19, #2
   22f64:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   22f68:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
   22f6c:	4290      	cmp	r0, r2
   22f6e:	d029      	beq.n	22fc4 <am_hal_gpio_pinconfig+0x214>
   22f70:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   22f74:	00a0      	lsls	r0, r4, #2
   22f76:	786e      	ldrb	r6, [r5, #1]
   22f78:	4296      	cmp	r6, r2
   22f7a:	d02d      	beq.n	22fd8 <am_hal_gpio_pinconfig+0x228>
   22f7c:	78ae      	ldrb	r6, [r5, #2]
   22f7e:	4296      	cmp	r6, r2
   22f80:	d02c      	beq.n	22fdc <am_hal_gpio_pinconfig+0x22c>
   22f82:	78ed      	ldrb	r5, [r5, #3]
   22f84:	4295      	cmp	r5, r2
   22f86:	d02b      	beq.n	22fe0 <am_hal_gpio_pinconfig+0x230>
   22f88:	481f      	ldr	r0, [pc, #124]	; (23008 <am_hal_gpio_pinconfig+0x258>)
   22f8a:	b005      	add	sp, #20
   22f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f90:	481e      	ldr	r0, [pc, #120]	; (2300c <am_hal_gpio_pinconfig+0x25c>)
   22f92:	b005      	add	sp, #20
   22f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f98:	f04f 0801 	mov.w	r8, #1
   22f9c:	e75f      	b.n	22e5e <am_hal_gpio_pinconfig+0xae>
   22f9e:	4b11      	ldr	r3, [pc, #68]	; (22fe4 <am_hal_gpio_pinconfig+0x234>)
   22fa0:	5d1b      	ldrb	r3, [r3, r4]
   22fa2:	079d      	lsls	r5, r3, #30
   22fa4:	d5f4      	bpl.n	22f90 <am_hal_gpio_pinconfig+0x1e0>
   22fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   22faa:	e72f      	b.n	22e0c <am_hal_gpio_pinconfig+0x5c>
   22fac:	2c14      	cmp	r4, #20
   22fae:	f43f af1f 	beq.w	22df0 <am_hal_gpio_pinconfig+0x40>
   22fb2:	4817      	ldr	r0, [pc, #92]	; (23010 <am_hal_gpio_pinconfig+0x260>)
   22fb4:	e7b7      	b.n	22f26 <am_hal_gpio_pinconfig+0x176>
   22fb6:	2c14      	cmp	r4, #20
   22fb8:	f47f af1a 	bne.w	22df0 <am_hal_gpio_pinconfig+0x40>
   22fbc:	4815      	ldr	r0, [pc, #84]	; (23014 <am_hal_gpio_pinconfig+0x264>)
   22fbe:	e7b2      	b.n	22f26 <am_hal_gpio_pinconfig+0x176>
   22fc0:	4815      	ldr	r0, [pc, #84]	; (23018 <am_hal_gpio_pinconfig+0x268>)
   22fc2:	e7b0      	b.n	22f26 <am_hal_gpio_pinconfig+0x176>
   22fc4:	2200      	movs	r2, #0
   22fc6:	00a0      	lsls	r0, r4, #2
   22fc8:	0052      	lsls	r2, r2, #1
   22fca:	f3c1 5540 	ubfx	r5, r1, #21, #1
   22fce:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
   22fd2:	f04f 0800 	mov.w	r8, #0
   22fd6:	e74a      	b.n	22e6e <am_hal_gpio_pinconfig+0xbe>
   22fd8:	2201      	movs	r2, #1
   22fda:	e7f5      	b.n	22fc8 <am_hal_gpio_pinconfig+0x218>
   22fdc:	2202      	movs	r2, #2
   22fde:	e7f3      	b.n	22fc8 <am_hal_gpio_pinconfig+0x218>
   22fe0:	2203      	movs	r2, #3
   22fe2:	e7f1      	b.n	22fc8 <am_hal_gpio_pinconfig+0x218>
   22fe4:	0002817c 	.word	0x0002817c
   22fe8:	000281b0 	.word	0x000281b0
   22fec:	000282ac 	.word	0x000282ac
   22ff0:	00028174 	.word	0x00028174
   22ff4:	40010040 	.word	0x40010040
   22ff8:	400100e0 	.word	0x400100e0
   22ffc:	400100b4 	.word	0x400100b4
   23000:	40010000 	.word	0x40010000
   23004:	000281e4 	.word	0x000281e4
   23008:	08000104 	.word	0x08000104
   2300c:	08000102 	.word	0x08000102
   23010:	08000101 	.word	0x08000101
   23014:	08000100 	.word	0x08000100
   23018:	08000103 	.word	0x08000103

0002301c <am_hal_gpio_state_write>:
   2301c:	2831      	cmp	r0, #49	; 0x31
   2301e:	d81a      	bhi.n	23056 <am_hal_gpio_state_write+0x3a>
   23020:	b570      	push	{r4, r5, r6, lr}
   23022:	2905      	cmp	r1, #5
   23024:	b082      	sub	sp, #8
   23026:	460d      	mov	r5, r1
   23028:	d812      	bhi.n	23050 <am_hal_gpio_state_write+0x34>
   2302a:	f000 031f 	and.w	r3, r0, #31
   2302e:	2201      	movs	r2, #1
   23030:	08c0      	lsrs	r0, r0, #3
   23032:	fa02 f603 	lsl.w	r6, r2, r3
   23036:	f000 0404 	and.w	r4, r0, #4
   2303a:	f000 f833 	bl	230a4 <am_hal_interrupt_master_disable>
   2303e:	3d01      	subs	r5, #1
   23040:	9001      	str	r0, [sp, #4]
   23042:	2d04      	cmp	r5, #4
   23044:	d821      	bhi.n	2308a <am_hal_gpio_state_write+0x6e>
   23046:	e8df f005 	tbb	[pc, r5]
   2304a:	1512      	.short	0x1512
   2304c:	1d1a      	.short	0x1d1a
   2304e:	08          	.byte	0x08
   2304f:	00          	.byte	0x00
   23050:	2006      	movs	r0, #6
   23052:	b002      	add	sp, #8
   23054:	bd70      	pop	{r4, r5, r6, pc}
   23056:	2005      	movs	r0, #5
   23058:	4770      	bx	lr
   2305a:	4a0d      	ldr	r2, [pc, #52]	; (23090 <am_hal_gpio_state_write+0x74>)
   2305c:	58a3      	ldr	r3, [r4, r2]
   2305e:	4073      	eors	r3, r6
   23060:	50a3      	str	r3, [r4, r2]
   23062:	9801      	ldr	r0, [sp, #4]
   23064:	f000 f822 	bl	230ac <am_hal_interrupt_master_set>
   23068:	2000      	movs	r0, #0
   2306a:	b002      	add	sp, #8
   2306c:	bd70      	pop	{r4, r5, r6, pc}
   2306e:	4b09      	ldr	r3, [pc, #36]	; (23094 <am_hal_gpio_state_write+0x78>)
   23070:	50e6      	str	r6, [r4, r3]
   23072:	e7f6      	b.n	23062 <am_hal_gpio_state_write+0x46>
   23074:	4a08      	ldr	r2, [pc, #32]	; (23098 <am_hal_gpio_state_write+0x7c>)
   23076:	58a3      	ldr	r3, [r4, r2]
   23078:	4073      	eors	r3, r6
   2307a:	50a3      	str	r3, [r4, r2]
   2307c:	e7f1      	b.n	23062 <am_hal_gpio_state_write+0x46>
   2307e:	4b04      	ldr	r3, [pc, #16]	; (23090 <am_hal_gpio_state_write+0x74>)
   23080:	50e6      	str	r6, [r4, r3]
   23082:	e7ee      	b.n	23062 <am_hal_gpio_state_write+0x46>
   23084:	4b05      	ldr	r3, [pc, #20]	; (2309c <am_hal_gpio_state_write+0x80>)
   23086:	50e6      	str	r6, [r4, r3]
   23088:	e7eb      	b.n	23062 <am_hal_gpio_state_write+0x46>
   2308a:	4b05      	ldr	r3, [pc, #20]	; (230a0 <am_hal_gpio_state_write+0x84>)
   2308c:	50e6      	str	r6, [r4, r3]
   2308e:	e7e8      	b.n	23062 <am_hal_gpio_state_write+0x46>
   23090:	400100b4 	.word	0x400100b4
   23094:	40010090 	.word	0x40010090
   23098:	40010088 	.word	0x40010088
   2309c:	400100a8 	.word	0x400100a8
   230a0:	40010098 	.word	0x40010098

000230a4 <am_hal_interrupt_master_disable>:
   230a4:	f3ef 8010 	mrs	r0, PRIMASK
   230a8:	b672      	cpsid	i
   230aa:	4770      	bx	lr

000230ac <am_hal_interrupt_master_set>:
   230ac:	f380 8810 	msr	PRIMASK, r0
   230b0:	4770      	bx	lr
   230b2:	bf00      	nop

000230b4 <am_hal_itm_enable>:
   230b4:	4a0e      	ldr	r2, [pc, #56]	; (230f0 <am_hal_itm_enable+0x3c>)
   230b6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   230ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   230be:	b410      	push	{r4}
   230c0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
   230c4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   230c8:	01db      	lsls	r3, r3, #7
   230ca:	d5fb      	bpl.n	230c4 <am_hal_itm_enable+0x10>
   230cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   230d0:	4c08      	ldr	r4, [pc, #32]	; (230f4 <am_hal_itm_enable+0x40>)
   230d2:	4a09      	ldr	r2, [pc, #36]	; (230f8 <am_hal_itm_enable+0x44>)
   230d4:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
   230d8:	200f      	movs	r0, #15
   230da:	f04f 31ff 	mov.w	r1, #4294967295
   230de:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   230e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   230e6:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   230ea:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   230ee:	4770      	bx	lr
   230f0:	e000ed00 	.word	0xe000ed00
   230f4:	c5acce55 	.word	0xc5acce55
   230f8:	00150511 	.word	0x00150511

000230fc <am_hal_itm_print>:
   230fc:	7803      	ldrb	r3, [r0, #0]
   230fe:	b1a3      	cbz	r3, 2312a <am_hal_itm_print+0x2e>
   23100:	4603      	mov	r3, r0
   23102:	f1c0 0c01 	rsb	ip, r0, #1
   23106:	eb0c 0103 	add.w	r1, ip, r3
   2310a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2310e:	2a00      	cmp	r2, #0
   23110:	d1f9      	bne.n	23106 <am_hal_itm_print+0xa>
   23112:	4401      	add	r1, r0
   23114:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   23118:	f810 cb01 	ldrb.w	ip, [r0], #1
   2311c:	6813      	ldr	r3, [r2, #0]
   2311e:	2b00      	cmp	r3, #0
   23120:	d0fc      	beq.n	2311c <am_hal_itm_print+0x20>
   23122:	4288      	cmp	r0, r1
   23124:	f882 c000 	strb.w	ip, [r2]
   23128:	d1f6      	bne.n	23118 <am_hal_itm_print+0x1c>
   2312a:	4770      	bx	lr

0002312c <am_hal_mcuctrl_info_get>:
   2312c:	2900      	cmp	r1, #0
   2312e:	f000 808f 	beq.w	23250 <am_hal_mcuctrl_info_get+0x124>
   23132:	2801      	cmp	r0, #1
   23134:	b430      	push	{r4, r5}
   23136:	d006      	beq.n	23146 <am_hal_mcuctrl_info_get+0x1a>
   23138:	2802      	cmp	r0, #2
   2313a:	d06d      	beq.n	23218 <am_hal_mcuctrl_info_get+0xec>
   2313c:	2800      	cmp	r0, #0
   2313e:	d055      	beq.n	231ec <am_hal_mcuctrl_info_get+0xc0>
   23140:	2006      	movs	r0, #6
   23142:	bc30      	pop	{r4, r5}
   23144:	4770      	bx	lr
   23146:	4a43      	ldr	r2, [pc, #268]	; (23254 <am_hal_mcuctrl_info_get+0x128>)
   23148:	4843      	ldr	r0, [pc, #268]	; (23258 <am_hal_mcuctrl_info_get+0x12c>)
   2314a:	6813      	ldr	r3, [r2, #0]
   2314c:	600b      	str	r3, [r1, #0]
   2314e:	6854      	ldr	r4, [r2, #4]
   23150:	604c      	str	r4, [r1, #4]
   23152:	6894      	ldr	r4, [r2, #8]
   23154:	608c      	str	r4, [r1, #8]
   23156:	68d4      	ldr	r4, [r2, #12]
   23158:	60cc      	str	r4, [r1, #12]
   2315a:	f3c3 5503 	ubfx	r5, r3, #20, #4
   2315e:	6914      	ldr	r4, [r2, #16]
   23160:	610c      	str	r4, [r1, #16]
   23162:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   23166:	4c3d      	ldr	r4, [pc, #244]	; (2325c <am_hal_mcuctrl_info_get+0x130>)
   23168:	6950      	ldr	r0, [r2, #20]
   2316a:	6148      	str	r0, [r1, #20]
   2316c:	f003 0201 	and.w	r2, r3, #1
   23170:	f3c3 4303 	ubfx	r3, r3, #16, #4
   23174:	e9c1 2506 	strd	r2, r5, [r1, #24]
   23178:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   2317c:	4a38      	ldr	r2, [pc, #224]	; (23260 <am_hal_mcuctrl_info_get+0x134>)
   2317e:	620b      	str	r3, [r1, #32]
   23180:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   23184:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
   23188:	b2db      	uxtb	r3, r3
   2318a:	f000 000f 	and.w	r0, r0, #15
   2318e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   23192:	624b      	str	r3, [r1, #36]	; 0x24
   23194:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   23198:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
   2319c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   231a0:	f000 000f 	and.w	r0, r0, #15
   231a4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   231a8:	628b      	str	r3, [r1, #40]	; 0x28
   231aa:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   231ae:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
   231b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   231b6:	f3c0 1003 	ubfx	r0, r0, #4, #4
   231ba:	4303      	orrs	r3, r0
   231bc:	62cb      	str	r3, [r1, #44]	; 0x2c
   231be:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
   231c2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
   231c6:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
   231ca:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   231ce:	b2db      	uxtb	r3, r3
   231d0:	041b      	lsls	r3, r3, #16
   231d2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   231d6:	fa5f fc82 	uxtb.w	ip, r2
   231da:	ea43 030c 	orr.w	r3, r3, ip
   231de:	b2c2      	uxtb	r2, r0
   231e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   231e4:	630b      	str	r3, [r1, #48]	; 0x30
   231e6:	2000      	movs	r0, #0
   231e8:	bc30      	pop	{r4, r5}
   231ea:	4770      	bx	lr
   231ec:	4a19      	ldr	r2, [pc, #100]	; (23254 <am_hal_mcuctrl_info_get+0x128>)
   231ee:	6993      	ldr	r3, [r2, #24]
   231f0:	f3c3 1480 	ubfx	r4, r3, #6, #1
   231f4:	700c      	strb	r4, [r1, #0]
   231f6:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
   231fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
   231fe:	704b      	strb	r3, [r1, #1]
   23200:	f3c4 6381 	ubfx	r3, r4, #26, #2
   23204:	710b      	strb	r3, [r1, #4]
   23206:	6953      	ldr	r3, [r2, #20]
   23208:	f3c3 0240 	ubfx	r2, r3, #1, #1
   2320c:	f003 0301 	and.w	r3, r3, #1
   23210:	bc30      	pop	{r4, r5}
   23212:	708a      	strb	r2, [r1, #2]
   23214:	70cb      	strb	r3, [r1, #3]
   23216:	4770      	bx	lr
   23218:	4a0e      	ldr	r2, [pc, #56]	; (23254 <am_hal_mcuctrl_info_get+0x128>)
   2321a:	6848      	ldr	r0, [r1, #4]
   2321c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   23220:	f003 0401 	and.w	r4, r3, #1
   23224:	700c      	strb	r4, [r1, #0]
   23226:	f3c3 0440 	ubfx	r4, r3, #1, #1
   2322a:	720c      	strb	r4, [r1, #8]
   2322c:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
   23230:	60cc      	str	r4, [r1, #12]
   23232:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
   23236:	4320      	orrs	r0, r4
   23238:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2323c:	6048      	str	r0, [r1, #4]
   2323e:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   23242:	740b      	strb	r3, [r1, #16]
   23244:	694b      	ldr	r3, [r1, #20]
   23246:	4313      	orrs	r3, r2
   23248:	2000      	movs	r0, #0
   2324a:	bc30      	pop	{r4, r5}
   2324c:	614b      	str	r3, [r1, #20]
   2324e:	4770      	bx	lr
   23250:	2006      	movs	r0, #6
   23252:	4770      	bx	lr
   23254:	40020000 	.word	0x40020000
   23258:	000282e0 	.word	0x000282e0
   2325c:	00028320 	.word	0x00028320
   23260:	f0000f00 	.word	0xf0000f00

00023264 <am_hal_pwrctrl_periph_enable>:
   23264:	b570      	push	{r4, r5, r6, lr}
   23266:	b082      	sub	sp, #8
   23268:	4604      	mov	r4, r0
   2326a:	f7ff ff1b 	bl	230a4 <am_hal_interrupt_master_disable>
   2326e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   23272:	4e0f      	ldr	r6, [pc, #60]	; (232b0 <am_hal_pwrctrl_periph_enable+0x4c>)
   23274:	4d0f      	ldr	r5, [pc, #60]	; (232b4 <am_hal_pwrctrl_periph_enable+0x50>)
   23276:	9001      	str	r0, [sp, #4]
   23278:	00a4      	lsls	r4, r4, #2
   2327a:	68b3      	ldr	r3, [r6, #8]
   2327c:	592a      	ldr	r2, [r5, r4]
   2327e:	4313      	orrs	r3, r2
   23280:	60b3      	str	r3, [r6, #8]
   23282:	9801      	ldr	r0, [sp, #4]
   23284:	442c      	add	r4, r5
   23286:	f7ff ff11 	bl	230ac <am_hal_interrupt_master_set>
   2328a:	20a0      	movs	r0, #160	; 0xa0
   2328c:	f7ff fd32 	bl	22cf4 <am_hal_flash_delay>
   23290:	69b3      	ldr	r3, [r6, #24]
   23292:	6864      	ldr	r4, [r4, #4]
   23294:	4223      	tst	r3, r4
   23296:	d103      	bne.n	232a0 <am_hal_pwrctrl_periph_enable+0x3c>
   23298:	20a0      	movs	r0, #160	; 0xa0
   2329a:	f7ff fd2b 	bl	22cf4 <am_hal_flash_delay>
   2329e:	69b3      	ldr	r3, [r6, #24]
   232a0:	4b03      	ldr	r3, [pc, #12]	; (232b0 <am_hal_pwrctrl_periph_enable+0x4c>)
   232a2:	699b      	ldr	r3, [r3, #24]
   232a4:	4223      	tst	r3, r4
   232a6:	bf0c      	ite	eq
   232a8:	2001      	moveq	r0, #1
   232aa:	2000      	movne	r0, #0
   232ac:	b002      	add	sp, #8
   232ae:	bd70      	pop	{r4, r5, r6, pc}
   232b0:	40021000 	.word	0x40021000
   232b4:	00028360 	.word	0x00028360

000232b8 <am_hal_pwrctrl_periph_disable>:
   232b8:	b570      	push	{r4, r5, r6, lr}
   232ba:	b082      	sub	sp, #8
   232bc:	4604      	mov	r4, r0
   232be:	f7ff fef1 	bl	230a4 <am_hal_interrupt_master_disable>
   232c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   232c6:	4e10      	ldr	r6, [pc, #64]	; (23308 <am_hal_pwrctrl_periph_disable+0x50>)
   232c8:	4d10      	ldr	r5, [pc, #64]	; (2330c <am_hal_pwrctrl_periph_disable+0x54>)
   232ca:	9001      	str	r0, [sp, #4]
   232cc:	00a4      	lsls	r4, r4, #2
   232ce:	68b3      	ldr	r3, [r6, #8]
   232d0:	592a      	ldr	r2, [r5, r4]
   232d2:	ea23 0302 	bic.w	r3, r3, r2
   232d6:	60b3      	str	r3, [r6, #8]
   232d8:	9801      	ldr	r0, [sp, #4]
   232da:	442c      	add	r4, r5
   232dc:	f7ff fee6 	bl	230ac <am_hal_interrupt_master_set>
   232e0:	20a0      	movs	r0, #160	; 0xa0
   232e2:	f7ff fd07 	bl	22cf4 <am_hal_flash_delay>
   232e6:	69b3      	ldr	r3, [r6, #24]
   232e8:	6864      	ldr	r4, [r4, #4]
   232ea:	4223      	tst	r3, r4
   232ec:	d003      	beq.n	232f6 <am_hal_pwrctrl_periph_disable+0x3e>
   232ee:	20a0      	movs	r0, #160	; 0xa0
   232f0:	f7ff fd00 	bl	22cf4 <am_hal_flash_delay>
   232f4:	69b3      	ldr	r3, [r6, #24]
   232f6:	4b04      	ldr	r3, [pc, #16]	; (23308 <am_hal_pwrctrl_periph_disable+0x50>)
   232f8:	699b      	ldr	r3, [r3, #24]
   232fa:	4223      	tst	r3, r4
   232fc:	bf14      	ite	ne
   232fe:	2001      	movne	r0, #1
   23300:	2000      	moveq	r0, #0
   23302:	b002      	add	sp, #8
   23304:	bd70      	pop	{r4, r5, r6, pc}
   23306:	bf00      	nop
   23308:	40021000 	.word	0x40021000
   2330c:	00028360 	.word	0x00028360

00023310 <am_hal_pwrctrl_low_power_init>:
   23310:	b530      	push	{r4, r5, lr}
   23312:	4b69      	ldr	r3, [pc, #420]	; (234b8 <am_hal_pwrctrl_low_power_init+0x1a8>)
   23314:	681a      	ldr	r2, [r3, #0]
   23316:	b085      	sub	sp, #20
   23318:	b912      	cbnz	r2, 23320 <am_hal_pwrctrl_low_power_init+0x10>
   2331a:	4a68      	ldr	r2, [pc, #416]	; (234bc <am_hal_pwrctrl_low_power_init+0x1ac>)
   2331c:	6812      	ldr	r2, [r2, #0]
   2331e:	601a      	str	r2, [r3, #0]
   23320:	4b67      	ldr	r3, [pc, #412]	; (234c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
   23322:	68db      	ldr	r3, [r3, #12]
   23324:	b2db      	uxtb	r3, r3
   23326:	2b12      	cmp	r3, #18
   23328:	d104      	bne.n	23334 <am_hal_pwrctrl_low_power_init+0x24>
   2332a:	4c66      	ldr	r4, [pc, #408]	; (234c4 <am_hal_pwrctrl_low_power_init+0x1b4>)
   2332c:	6863      	ldr	r3, [r4, #4]
   2332e:	07d8      	lsls	r0, r3, #31
   23330:	f100 8088 	bmi.w	23444 <am_hal_pwrctrl_low_power_init+0x134>
   23334:	4b62      	ldr	r3, [pc, #392]	; (234c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
   23336:	68da      	ldr	r2, [r3, #12]
   23338:	b2d2      	uxtb	r2, r2
   2333a:	2a20      	cmp	r2, #32
   2333c:	d934      	bls.n	233a8 <am_hal_pwrctrl_low_power_init+0x98>
   2333e:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   23342:	2002      	movs	r0, #2
   23344:	f360 4213 	bfi	r2, r0, #16, #4
   23348:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
   2334c:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   23350:	2203      	movs	r2, #3
   23352:	f362 5117 	bfi	r1, r2, #20, #4
   23356:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
   2335a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2335e:	2405      	movs	r4, #5
   23360:	f364 0103 	bfi	r1, r4, #0, #4
   23364:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   23368:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2336c:	f360 1107 	bfi	r1, r0, #4, #4
   23370:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   23374:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   23378:	2406      	movs	r4, #6
   2337a:	f364 210b 	bfi	r1, r4, #8, #4
   2337e:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   23382:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   23386:	2001      	movs	r0, #1
   23388:	f360 310f 	bfi	r1, r0, #12, #4
   2338c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   23390:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   23394:	f362 61de 	bfi	r1, r2, #27, #4
   23398:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
   2339c:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   233a0:	f362 0103 	bfi	r1, r2, #0, #4
   233a4:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
   233a8:	4a45      	ldr	r2, [pc, #276]	; (234c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
   233aa:	68d3      	ldr	r3, [r2, #12]
   233ac:	b2db      	uxtb	r3, r3
   233ae:	2b11      	cmp	r3, #17
   233b0:	d905      	bls.n	233be <am_hal_pwrctrl_low_power_init+0xae>
   233b2:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
   233b6:	f36f 6318 	bfc	r3, #24, #1
   233ba:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
   233be:	2100      	movs	r1, #0
   233c0:	200c      	movs	r0, #12
   233c2:	f7ff fa1b 	bl	227fc <am_hal_cachectrl_control>
   233c6:	4b3f      	ldr	r3, [pc, #252]	; (234c4 <am_hal_pwrctrl_low_power_init+0x1b4>)
   233c8:	699b      	ldr	r3, [r3, #24]
   233ca:	f3c3 2500 	ubfx	r5, r3, #8, #1
   233ce:	05db      	lsls	r3, r3, #23
   233d0:	d420      	bmi.n	23414 <am_hal_pwrctrl_low_power_init+0x104>
   233d2:	4c3b      	ldr	r4, [pc, #236]	; (234c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
   233d4:	68e3      	ldr	r3, [r4, #12]
   233d6:	b2db      	uxtb	r3, r3
   233d8:	2b11      	cmp	r3, #17
   233da:	d84e      	bhi.n	2347a <am_hal_pwrctrl_low_power_init+0x16a>
   233dc:	4c38      	ldr	r4, [pc, #224]	; (234c0 <am_hal_pwrctrl_low_power_init+0x1b0>)
   233de:	493a      	ldr	r1, [pc, #232]	; (234c8 <am_hal_pwrctrl_low_power_init+0x1b8>)
   233e0:	7e22      	ldrb	r2, [r4, #24]
   233e2:	2001      	movs	r0, #1
   233e4:	4302      	orrs	r2, r0
   233e6:	2307      	movs	r3, #7
   233e8:	7622      	strb	r2, [r4, #24]
   233ea:	9000      	str	r0, [sp, #0]
   233ec:	461a      	mov	r2, r3
   233ee:	f242 7010 	movw	r0, #10000	; 0x2710
   233f2:	f7ff fc8f 	bl	22d14 <am_hal_flash_delay_status_check>
   233f6:	2800      	cmp	r0, #0
   233f8:	d15a      	bne.n	234b0 <am_hal_pwrctrl_low_power_init+0x1a0>
   233fa:	4b32      	ldr	r3, [pc, #200]	; (234c4 <am_hal_pwrctrl_low_power_init+0x1b4>)
   233fc:	681a      	ldr	r2, [r3, #0]
   233fe:	f042 0201 	orr.w	r2, r2, #1
   23402:	601a      	str	r2, [r3, #0]
   23404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   23406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2340a:	625a      	str	r2, [r3, #36]	; 0x24
   2340c:	68e3      	ldr	r3, [r4, #12]
   2340e:	b2db      	uxtb	r3, r3
   23410:	2b11      	cmp	r3, #17
   23412:	d002      	beq.n	2341a <am_hal_pwrctrl_low_power_init+0x10a>
   23414:	2000      	movs	r0, #0
   23416:	b005      	add	sp, #20
   23418:	bd30      	pop	{r4, r5, pc}
   2341a:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
   2341e:	f360 5356 	bfi	r3, r0, #21, #2
   23422:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
   23426:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   2342a:	220f      	movs	r2, #15
   2342c:	f362 138b 	bfi	r3, r2, #6, #6
   23430:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   23434:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   23438:	f362 0305 	bfi	r3, r2, #0, #6
   2343c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   23440:	b005      	add	sp, #20
   23442:	bd30      	pop	{r4, r5, pc}
   23444:	f7ff fe2e 	bl	230a4 <am_hal_interrupt_master_disable>
   23448:	9002      	str	r0, [sp, #8]
   2344a:	68a3      	ldr	r3, [r4, #8]
   2344c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   23450:	60a3      	str	r3, [r4, #8]
   23452:	9802      	ldr	r0, [sp, #8]
   23454:	f7ff fe2a 	bl	230ac <am_hal_interrupt_master_set>
   23458:	20a0      	movs	r0, #160	; 0xa0
   2345a:	f7ff fc4b 	bl	22cf4 <am_hal_flash_delay>
   2345e:	69a3      	ldr	r3, [r4, #24]
   23460:	0619      	lsls	r1, r3, #24
   23462:	d403      	bmi.n	2346c <am_hal_pwrctrl_low_power_init+0x15c>
   23464:	20a0      	movs	r0, #160	; 0xa0
   23466:	f7ff fc45 	bl	22cf4 <am_hal_flash_delay>
   2346a:	69a3      	ldr	r3, [r4, #24]
   2346c:	4b15      	ldr	r3, [pc, #84]	; (234c4 <am_hal_pwrctrl_low_power_init+0x1b4>)
   2346e:	699b      	ldr	r3, [r3, #24]
   23470:	061a      	lsls	r2, r3, #24
   23472:	f53f af5f 	bmi.w	23334 <am_hal_pwrctrl_low_power_init+0x24>
   23476:	2001      	movs	r0, #1
   23478:	e7cd      	b.n	23416 <am_hal_pwrctrl_low_power_init+0x106>
   2347a:	f7ff fe13 	bl	230a4 <am_hal_interrupt_master_disable>
   2347e:	9003      	str	r0, [sp, #12]
   23480:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
   23484:	2219      	movs	r2, #25
   23486:	f362 138b 	bfi	r3, r2, #6, #6
   2348a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
   2348e:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
   23492:	210c      	movs	r1, #12
   23494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   23498:	f361 0205 	bfi	r2, r1, #0, #6
   2349c:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
   234a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   234a2:	f365 5296 	bfi	r2, r5, #22, #1
   234a6:	63da      	str	r2, [r3, #60]	; 0x3c
   234a8:	9803      	ldr	r0, [sp, #12]
   234aa:	f7ff fdff 	bl	230ac <am_hal_interrupt_master_set>
   234ae:	e795      	b.n	233dc <am_hal_pwrctrl_low_power_init+0xcc>
   234b0:	2004      	movs	r0, #4
   234b2:	b005      	add	sp, #20
   234b4:	bd30      	pop	{r4, r5, pc}
   234b6:	bf00      	nop
   234b8:	1000b634 	.word	0x1000b634
   234bc:	4ffff000 	.word	0x4ffff000
   234c0:	40020000 	.word	0x40020000
   234c4:	40021000 	.word	0x40021000
   234c8:	40020018 	.word	0x40020018

000234cc <am_hal_queue_init>:
   234cc:	b410      	push	{r4}
   234ce:	2400      	movs	r4, #0
   234d0:	e9c0 4400 	strd	r4, r4, [r0]
   234d4:	e9c0 4302 	strd	r4, r3, [r0, #8]
   234d8:	e9c0 2104 	strd	r2, r1, [r0, #16]
   234dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   234e0:	4770      	bx	lr
   234e2:	bf00      	nop

000234e4 <am_hal_queue_item_add>:
   234e4:	b570      	push	{r4, r5, r6, lr}
   234e6:	6905      	ldr	r5, [r0, #16]
   234e8:	b082      	sub	sp, #8
   234ea:	4604      	mov	r4, r0
   234ec:	fb02 f505 	mul.w	r5, r2, r5
   234f0:	460e      	mov	r6, r1
   234f2:	f7ff fdd7 	bl	230a4 <am_hal_interrupt_master_disable>
   234f6:	68e2      	ldr	r2, [r4, #12]
   234f8:	9001      	str	r0, [sp, #4]
   234fa:	68a0      	ldr	r0, [r4, #8]
   234fc:	1a13      	subs	r3, r2, r0
   234fe:	42ab      	cmp	r3, r5
   23500:	d31c      	bcc.n	2353c <am_hal_queue_item_add+0x58>
   23502:	b195      	cbz	r5, 2352a <am_hal_queue_item_add+0x46>
   23504:	6823      	ldr	r3, [r4, #0]
   23506:	b306      	cbz	r6, 2354a <am_hal_queue_item_add+0x66>
   23508:	1e71      	subs	r1, r6, #1
   2350a:	194e      	adds	r6, r1, r5
   2350c:	6962      	ldr	r2, [r4, #20]
   2350e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   23512:	54d0      	strb	r0, [r2, r3]
   23514:	6823      	ldr	r3, [r4, #0]
   23516:	68e0      	ldr	r0, [r4, #12]
   23518:	3301      	adds	r3, #1
   2351a:	428e      	cmp	r6, r1
   2351c:	fbb3 f2f0 	udiv	r2, r3, r0
   23520:	fb00 3312 	mls	r3, r0, r2, r3
   23524:	6023      	str	r3, [r4, #0]
   23526:	d1f1      	bne.n	2350c <am_hal_queue_item_add+0x28>
   23528:	68a0      	ldr	r0, [r4, #8]
   2352a:	4405      	add	r5, r0
   2352c:	60a5      	str	r5, [r4, #8]
   2352e:	9801      	ldr	r0, [sp, #4]
   23530:	f7ff fdbc 	bl	230ac <am_hal_interrupt_master_set>
   23534:	2401      	movs	r4, #1
   23536:	4620      	mov	r0, r4
   23538:	b002      	add	sp, #8
   2353a:	bd70      	pop	{r4, r5, r6, pc}
   2353c:	9801      	ldr	r0, [sp, #4]
   2353e:	f7ff fdb5 	bl	230ac <am_hal_interrupt_master_set>
   23542:	2400      	movs	r4, #0
   23544:	4620      	mov	r0, r4
   23546:	b002      	add	sp, #8
   23548:	bd70      	pop	{r4, r5, r6, pc}
   2354a:	4631      	mov	r1, r6
   2354c:	3101      	adds	r1, #1
   2354e:	3301      	adds	r3, #1
   23550:	428d      	cmp	r5, r1
   23552:	fbb3 f6f2 	udiv	r6, r3, r2
   23556:	fb02 3316 	mls	r3, r2, r6, r3
   2355a:	d1f7      	bne.n	2354c <am_hal_queue_item_add+0x68>
   2355c:	6023      	str	r3, [r4, #0]
   2355e:	e7e4      	b.n	2352a <am_hal_queue_item_add+0x46>

00023560 <am_hal_queue_item_get>:
   23560:	b570      	push	{r4, r5, r6, lr}
   23562:	6905      	ldr	r5, [r0, #16]
   23564:	4604      	mov	r4, r0
   23566:	b082      	sub	sp, #8
   23568:	fb02 f505 	mul.w	r5, r2, r5
   2356c:	460e      	mov	r6, r1
   2356e:	f7ff fd99 	bl	230a4 <am_hal_interrupt_master_disable>
   23572:	68a2      	ldr	r2, [r4, #8]
   23574:	9001      	str	r0, [sp, #4]
   23576:	42aa      	cmp	r2, r5
   23578:	d31c      	bcc.n	235b4 <am_hal_queue_item_get+0x54>
   2357a:	b195      	cbz	r5, 235a2 <am_hal_queue_item_get+0x42>
   2357c:	6863      	ldr	r3, [r4, #4]
   2357e:	b306      	cbz	r6, 235c2 <am_hal_queue_item_get+0x62>
   23580:	1e71      	subs	r1, r6, #1
   23582:	194e      	adds	r6, r1, r5
   23584:	6962      	ldr	r2, [r4, #20]
   23586:	5cd3      	ldrb	r3, [r2, r3]
   23588:	f801 3f01 	strb.w	r3, [r1, #1]!
   2358c:	6863      	ldr	r3, [r4, #4]
   2358e:	68e0      	ldr	r0, [r4, #12]
   23590:	3301      	adds	r3, #1
   23592:	428e      	cmp	r6, r1
   23594:	fbb3 f2f0 	udiv	r2, r3, r0
   23598:	fb00 3312 	mls	r3, r0, r2, r3
   2359c:	6063      	str	r3, [r4, #4]
   2359e:	d1f1      	bne.n	23584 <am_hal_queue_item_get+0x24>
   235a0:	68a2      	ldr	r2, [r4, #8]
   235a2:	9801      	ldr	r0, [sp, #4]
   235a4:	1b52      	subs	r2, r2, r5
   235a6:	60a2      	str	r2, [r4, #8]
   235a8:	f7ff fd80 	bl	230ac <am_hal_interrupt_master_set>
   235ac:	2401      	movs	r4, #1
   235ae:	4620      	mov	r0, r4
   235b0:	b002      	add	sp, #8
   235b2:	bd70      	pop	{r4, r5, r6, pc}
   235b4:	9801      	ldr	r0, [sp, #4]
   235b6:	f7ff fd79 	bl	230ac <am_hal_interrupt_master_set>
   235ba:	2400      	movs	r4, #0
   235bc:	4620      	mov	r0, r4
   235be:	b002      	add	sp, #8
   235c0:	bd70      	pop	{r4, r5, r6, pc}
   235c2:	68e0      	ldr	r0, [r4, #12]
   235c4:	4631      	mov	r1, r6
   235c6:	3101      	adds	r1, #1
   235c8:	3301      	adds	r3, #1
   235ca:	42a9      	cmp	r1, r5
   235cc:	fbb3 f6f0 	udiv	r6, r3, r0
   235d0:	fb00 3316 	mls	r3, r0, r6, r3
   235d4:	d1f7      	bne.n	235c6 <am_hal_queue_item_get+0x66>
   235d6:	6063      	str	r3, [r4, #4]
   235d8:	e7e3      	b.n	235a2 <am_hal_queue_item_get+0x42>
   235da:	bf00      	nop

000235dc <am_hal_rtc_osc_disable>:
   235dc:	4a03      	ldr	r2, [pc, #12]	; (235ec <am_hal_rtc_osc_disable+0x10>)
   235de:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   235e2:	f043 0310 	orr.w	r3, r3, #16
   235e6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   235ea:	4770      	bx	lr
   235ec:	40004200 	.word	0x40004200

000235f0 <am_hal_stimer_config>:
   235f0:	4a03      	ldr	r2, [pc, #12]	; (23600 <am_hal_stimer_config+0x10>)
   235f2:	4603      	mov	r3, r0
   235f4:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   235f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
   235fc:	4770      	bx	lr
   235fe:	bf00      	nop
   23600:	40008000 	.word	0x40008000

00023604 <am_hal_stimer_counter_get>:
   23604:	b500      	push	{lr}
   23606:	b085      	sub	sp, #20
   23608:	4805      	ldr	r0, [pc, #20]	; (23620 <am_hal_stimer_counter_get+0x1c>)
   2360a:	a901      	add	r1, sp, #4
   2360c:	f7ff fbc2 	bl	22d94 <am_hal_triple_read>
   23610:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   23614:	4283      	cmp	r3, r0
   23616:	bf18      	it	ne
   23618:	9803      	ldrne	r0, [sp, #12]
   2361a:	b005      	add	sp, #20
   2361c:	f85d fb04 	ldr.w	pc, [sp], #4
   23620:	40008144 	.word	0x40008144

00023624 <am_hal_stimer_compare_delta_set>:
   23624:	2807      	cmp	r0, #7
   23626:	d900      	bls.n	2362a <am_hal_stimer_compare_delta_set+0x6>
   23628:	4770      	bx	lr
   2362a:	b530      	push	{r4, r5, lr}
   2362c:	b083      	sub	sp, #12
   2362e:	460c      	mov	r4, r1
   23630:	4605      	mov	r5, r0
   23632:	f7ff fd37 	bl	230a4 <am_hal_interrupt_master_disable>
   23636:	4a27      	ldr	r2, [pc, #156]	; (236d4 <am_hal_stimer_compare_delta_set+0xb0>)
   23638:	9001      	str	r0, [sp, #4]
   2363a:	4b27      	ldr	r3, [pc, #156]	; (236d8 <am_hal_stimer_compare_delta_set+0xb4>)
   2363c:	f8d2 1140 	ldr.w	r1, [r2, #320]	; 0x140
   23640:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
   23644:	f44f 7c80 	mov.w	ip, #256	; 0x100
   23648:	442b      	add	r3, r5
   2364a:	fa0c f505 	lsl.w	r5, ip, r5
   2364e:	009b      	lsls	r3, r3, #2
   23650:	ea20 0005 	bic.w	r0, r0, r5
   23654:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
   23658:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   2365c:	601c      	str	r4, [r3, #0]
   2365e:	6818      	ldr	r0, [r3, #0]
   23660:	4422      	add	r2, r4
   23662:	eba0 0c02 	sub.w	ip, r0, r2
   23666:	f1bc 0f00 	cmp.w	ip, #0
   2366a:	db03      	blt.n	23674 <am_hal_stimer_compare_delta_set+0x50>
   2366c:	320a      	adds	r2, #10
   2366e:	1a82      	subs	r2, r0, r2
   23670:	2a00      	cmp	r2, #0
   23672:	dd22      	ble.n	236ba <am_hal_stimer_compare_delta_set+0x96>
   23674:	4a17      	ldr	r2, [pc, #92]	; (236d4 <am_hal_stimer_compare_delta_set+0xb0>)
   23676:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   2367a:	601c      	str	r4, [r3, #0]
   2367c:	6818      	ldr	r0, [r3, #0]
   2367e:	4422      	add	r2, r4
   23680:	eba0 0c02 	sub.w	ip, r0, r2
   23684:	f1bc 0f00 	cmp.w	ip, #0
   23688:	db03      	blt.n	23692 <am_hal_stimer_compare_delta_set+0x6e>
   2368a:	320a      	adds	r2, #10
   2368c:	1a82      	subs	r2, r0, r2
   2368e:	2a00      	cmp	r2, #0
   23690:	dd13      	ble.n	236ba <am_hal_stimer_compare_delta_set+0x96>
   23692:	4a10      	ldr	r2, [pc, #64]	; (236d4 <am_hal_stimer_compare_delta_set+0xb0>)
   23694:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   23698:	601c      	str	r4, [r3, #0]
   2369a:	6818      	ldr	r0, [r3, #0]
   2369c:	4422      	add	r2, r4
   2369e:	eba0 0c02 	sub.w	ip, r0, r2
   236a2:	f1bc 0f00 	cmp.w	ip, #0
   236a6:	db03      	blt.n	236b0 <am_hal_stimer_compare_delta_set+0x8c>
   236a8:	320a      	adds	r2, #10
   236aa:	1a82      	subs	r2, r0, r2
   236ac:	2a00      	cmp	r2, #0
   236ae:	dd04      	ble.n	236ba <am_hal_stimer_compare_delta_set+0x96>
   236b0:	4a08      	ldr	r2, [pc, #32]	; (236d4 <am_hal_stimer_compare_delta_set+0xb0>)
   236b2:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
   236b6:	601c      	str	r4, [r3, #0]
   236b8:	681b      	ldr	r3, [r3, #0]
   236ba:	4b06      	ldr	r3, [pc, #24]	; (236d4 <am_hal_stimer_compare_delta_set+0xb0>)
   236bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   236c0:	400d      	ands	r5, r1
   236c2:	4315      	orrs	r5, r2
   236c4:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
   236c8:	9801      	ldr	r0, [sp, #4]
   236ca:	b003      	add	sp, #12
   236cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   236d0:	f7ff bcec 	b.w	230ac <am_hal_interrupt_master_set>
   236d4:	40008000 	.word	0x40008000
   236d8:	10002054 	.word	0x10002054

000236dc <am_hal_stimer_int_enable>:
   236dc:	4a03      	ldr	r2, [pc, #12]	; (236ec <am_hal_stimer_int_enable+0x10>)
   236de:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   236e2:	4318      	orrs	r0, r3
   236e4:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   236e8:	4770      	bx	lr
   236ea:	bf00      	nop
   236ec:	40008000 	.word	0x40008000

000236f0 <am_hal_stimer_int_clear>:
   236f0:	4b01      	ldr	r3, [pc, #4]	; (236f8 <am_hal_stimer_int_clear+0x8>)
   236f2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   236f6:	4770      	bx	lr
   236f8:	40008000 	.word	0x40008000

000236fc <am_hal_stimer_int_status_get>:
   236fc:	4a04      	ldr	r2, [pc, #16]	; (23710 <am_hal_stimer_int_status_get+0x14>)
   236fe:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   23702:	b110      	cbz	r0, 2370a <am_hal_stimer_int_status_get+0xe>
   23704:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   23708:	4013      	ands	r3, r2
   2370a:	4618      	mov	r0, r3
   2370c:	4770      	bx	lr
   2370e:	bf00      	nop
   23710:	40008000 	.word	0x40008000

00023714 <am_hal_sysctrl_sleep>:
   23714:	b510      	push	{r4, lr}
   23716:	b082      	sub	sp, #8
   23718:	4604      	mov	r4, r0
   2371a:	f7ff fcc3 	bl	230a4 <am_hal_interrupt_master_disable>
   2371e:	9001      	str	r0, [sp, #4]
   23720:	b124      	cbz	r4, 2372c <am_hal_sysctrl_sleep+0x18>
   23722:	4b12      	ldr	r3, [pc, #72]	; (2376c <am_hal_sysctrl_sleep+0x58>)
   23724:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   23728:	07db      	lsls	r3, r3, #31
   2372a:	d513      	bpl.n	23754 <am_hal_sysctrl_sleep+0x40>
   2372c:	4a10      	ldr	r2, [pc, #64]	; (23770 <am_hal_sysctrl_sleep+0x5c>)
   2372e:	6913      	ldr	r3, [r2, #16]
   23730:	f023 0304 	bic.w	r3, r3, #4
   23734:	6113      	str	r3, [r2, #16]
   23736:	f3bf 8f4f 	dsb	sy
   2373a:	4a0e      	ldr	r2, [pc, #56]	; (23774 <am_hal_sysctrl_sleep+0x60>)
   2373c:	4b0e      	ldr	r3, [pc, #56]	; (23778 <am_hal_sysctrl_sleep+0x64>)
   2373e:	6812      	ldr	r2, [r2, #0]
   23740:	601a      	str	r2, [r3, #0]
   23742:	bf30      	wfi
   23744:	f3bf 8f6f 	isb	sy
   23748:	9801      	ldr	r0, [sp, #4]
   2374a:	b002      	add	sp, #8
   2374c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23750:	f7ff bcac 	b.w	230ac <am_hal_interrupt_master_set>
   23754:	4b09      	ldr	r3, [pc, #36]	; (2377c <am_hal_sysctrl_sleep+0x68>)
   23756:	681a      	ldr	r2, [r3, #0]
   23758:	b912      	cbnz	r2, 23760 <am_hal_sysctrl_sleep+0x4c>
   2375a:	4a09      	ldr	r2, [pc, #36]	; (23780 <am_hal_sysctrl_sleep+0x6c>)
   2375c:	6812      	ldr	r2, [r2, #0]
   2375e:	601a      	str	r2, [r3, #0]
   23760:	4a03      	ldr	r2, [pc, #12]	; (23770 <am_hal_sysctrl_sleep+0x5c>)
   23762:	6913      	ldr	r3, [r2, #16]
   23764:	f043 0304 	orr.w	r3, r3, #4
   23768:	6113      	str	r3, [r2, #16]
   2376a:	e7e4      	b.n	23736 <am_hal_sysctrl_sleep+0x22>
   2376c:	40020000 	.word	0x40020000
   23770:	e000ed00 	.word	0xe000ed00
   23774:	5fff0000 	.word	0x5fff0000
   23778:	1000b638 	.word	0x1000b638
   2377c:	1000b634 	.word	0x1000b634
   23780:	4ffff000 	.word	0x4ffff000

00023784 <am_hal_sysctrl_fpu_enable>:
   23784:	4b02      	ldr	r3, [pc, #8]	; (23790 <am_hal_sysctrl_fpu_enable+0xc>)
   23786:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   2378a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   2378e:	4770      	bx	lr
   23790:	e000ed00 	.word	0xe000ed00

00023794 <am_hal_sysctrl_fpu_stacking_enable>:
   23794:	b510      	push	{r4, lr}
   23796:	b082      	sub	sp, #8
   23798:	4604      	mov	r4, r0
   2379a:	f7ff fc83 	bl	230a4 <am_hal_interrupt_master_disable>
   2379e:	4909      	ldr	r1, [pc, #36]	; (237c4 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   237a0:	9001      	str	r0, [sp, #4]
   237a2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   237a4:	2c00      	cmp	r4, #0
   237a6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
   237aa:	bf14      	ite	ne
   237ac:	f04f 4340 	movne.w	r3, #3221225472	; 0xc0000000
   237b0:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
   237b4:	4313      	orrs	r3, r2
   237b6:	634b      	str	r3, [r1, #52]	; 0x34
   237b8:	9801      	ldr	r0, [sp, #4]
   237ba:	b002      	add	sp, #8
   237bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   237c0:	f7ff bc74 	b.w	230ac <am_hal_interrupt_master_set>
   237c4:	e000ef00 	.word	0xe000ef00

000237c8 <am_hal_tpiu_enable>:
   237c8:	b510      	push	{r4, lr}
   237ca:	4b23      	ldr	r3, [pc, #140]	; (23858 <am_hal_tpiu_enable+0x90>)
   237cc:	6804      	ldr	r4, [r0, #0]
   237ce:	2200      	movs	r2, #0
   237d0:	b084      	sub	sp, #16
   237d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   237d6:	b334      	cbz	r4, 23826 <am_hal_tpiu_enable+0x5e>
   237d8:	4a20      	ldr	r2, [pc, #128]	; (2385c <am_hal_tpiu_enable+0x94>)
   237da:	4921      	ldr	r1, [pc, #132]	; (23860 <am_hal_tpiu_enable+0x98>)
   237dc:	2001      	movs	r0, #1
   237de:	6058      	str	r0, [r3, #4]
   237e0:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
   237e4:	a801      	add	r0, sp, #4
   237e6:	428b      	cmp	r3, r1
   237e8:	bf88      	it	hi
   237ea:	4614      	movhi	r4, r2
   237ec:	f7ff fa1c 	bl	22c28 <am_hal_clkgen_status_get>
   237f0:	9b01      	ldr	r3, [sp, #4]
   237f2:	1c5a      	adds	r2, r3, #1
   237f4:	d02d      	beq.n	23852 <am_hal_tpiu_enable+0x8a>
   237f6:	08db      	lsrs	r3, r3, #3
   237f8:	fbb3 f4f4 	udiv	r4, r3, r4
   237fc:	3c01      	subs	r4, #1
   237fe:	b2a4      	uxth	r4, r4
   23800:	4b15      	ldr	r3, [pc, #84]	; (23858 <am_hal_tpiu_enable+0x90>)
   23802:	4a18      	ldr	r2, [pc, #96]	; (23864 <am_hal_tpiu_enable+0x9c>)
   23804:	611c      	str	r4, [r3, #16]
   23806:	2102      	movs	r1, #2
   23808:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
   2380c:	2000      	movs	r0, #0
   2380e:	f240 2101 	movw	r1, #513	; 0x201
   23812:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
   23816:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
   2381a:	f44f 7048 	mov.w	r0, #800	; 0x320
   2381e:	f7ff fa69 	bl	22cf4 <am_hal_flash_delay>
   23822:	b004      	add	sp, #16
   23824:	bd10      	pop	{r4, pc}
   23826:	6902      	ldr	r2, [r0, #16]
   23828:	611a      	str	r2, [r3, #16]
   2382a:	6882      	ldr	r2, [r0, #8]
   2382c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   23830:	68c1      	ldr	r1, [r0, #12]
   23832:	2201      	movs	r2, #1
   23834:	3901      	subs	r1, #1
   23836:	408a      	lsls	r2, r1
   23838:	605a      	str	r2, [r3, #4]
   2383a:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
   2383e:	4a09      	ldr	r2, [pc, #36]	; (23864 <am_hal_tpiu_enable+0x9c>)
   23840:	6843      	ldr	r3, [r0, #4]
   23842:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   23846:	f44f 7048 	mov.w	r0, #800	; 0x320
   2384a:	f7ff fa53 	bl	22cf4 <am_hal_flash_delay>
   2384e:	b004      	add	sp, #16
   23850:	bd10      	pop	{r4, pc}
   23852:	2405      	movs	r4, #5
   23854:	e7d4      	b.n	23800 <am_hal_tpiu_enable+0x38>
   23856:	bf00      	nop
   23858:	e0040000 	.word	0xe0040000
   2385c:	000f4240 	.word	0x000f4240
   23860:	001da380 	.word	0x001da380
   23864:	40020000 	.word	0x40020000

00023868 <am_hal_uart_initialize>:
   23868:	2801      	cmp	r0, #1
   2386a:	d81a      	bhi.n	238a2 <am_hal_uart_initialize+0x3a>
   2386c:	b1e9      	cbz	r1, 238aa <am_hal_uart_initialize+0x42>
   2386e:	b530      	push	{r4, r5, lr}
   23870:	2264      	movs	r2, #100	; 0x64
   23872:	4d0f      	ldr	r5, [pc, #60]	; (238b0 <am_hal_uart_initialize+0x48>)
   23874:	fb00 f202 	mul.w	r2, r0, r2
   23878:	18ac      	adds	r4, r5, r2
   2387a:	78e3      	ldrb	r3, [r4, #3]
   2387c:	f3c3 0e00 	ubfx	lr, r3, #0, #1
   23880:	f013 0301 	ands.w	r3, r3, #1
   23884:	d10f      	bne.n	238a6 <am_hal_uart_initialize+0x3e>
   23886:	6260      	str	r0, [r4, #36]	; 0x24
   23888:	58a8      	ldr	r0, [r5, r2]
   2388a:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
   2388e:	4809      	ldr	r0, [pc, #36]	; (238b4 <am_hal_uart_initialize+0x4c>)
   23890:	ea4c 0000 	orr.w	r0, ip, r0
   23894:	50a8      	str	r0, [r5, r2]
   23896:	f884 e004 	strb.w	lr, [r4, #4]
   2389a:	6623      	str	r3, [r4, #96]	; 0x60
   2389c:	4618      	mov	r0, r3
   2389e:	600c      	str	r4, [r1, #0]
   238a0:	bd30      	pop	{r4, r5, pc}
   238a2:	2005      	movs	r0, #5
   238a4:	4770      	bx	lr
   238a6:	2007      	movs	r0, #7
   238a8:	bd30      	pop	{r4, r5, pc}
   238aa:	2006      	movs	r0, #6
   238ac:	4770      	bx	lr
   238ae:	bf00      	nop
   238b0:	1000b63c 	.word	0x1000b63c
   238b4:	01ea9e06 	.word	0x01ea9e06

000238b8 <am_hal_uart_power_control>:
   238b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   238ba:	4604      	mov	r4, r0
   238bc:	6800      	ldr	r0, [r0, #0]
   238be:	4b39      	ldr	r3, [pc, #228]	; (239a4 <am_hal_uart_power_control+0xec>)
   238c0:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
   238c4:	429e      	cmp	r6, r3
   238c6:	b085      	sub	sp, #20
   238c8:	d13f      	bne.n	2394a <am_hal_uart_power_control+0x92>
   238ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
   238cc:	f105 0008 	add.w	r0, r5, #8
   238d0:	b2c7      	uxtb	r7, r0
   238d2:	b189      	cbz	r1, 238f8 <am_hal_uart_power_control+0x40>
   238d4:	3901      	subs	r1, #1
   238d6:	2901      	cmp	r1, #1
   238d8:	d834      	bhi.n	23944 <am_hal_uart_power_control+0x8c>
   238da:	2a00      	cmp	r2, #0
   238dc:	d138      	bne.n	23950 <am_hal_uart_power_control+0x98>
   238de:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   238e2:	351c      	adds	r5, #28
   238e4:	032d      	lsls	r5, r5, #12
   238e6:	f04f 33ff 	mov.w	r3, #4294967295
   238ea:	646b      	str	r3, [r5, #68]	; 0x44
   238ec:	4638      	mov	r0, r7
   238ee:	f7ff fce3 	bl	232b8 <am_hal_pwrctrl_periph_disable>
   238f2:	2000      	movs	r0, #0
   238f4:	b005      	add	sp, #20
   238f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   238f8:	2a00      	cmp	r2, #0
   238fa:	d04a      	beq.n	23992 <am_hal_uart_power_control+0xda>
   238fc:	7923      	ldrb	r3, [r4, #4]
   238fe:	2b00      	cmp	r3, #0
   23900:	d04e      	beq.n	239a0 <am_hal_uart_power_control+0xe8>
   23902:	4638      	mov	r0, r7
   23904:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   23908:	9101      	str	r1, [sp, #4]
   2390a:	351c      	adds	r5, #28
   2390c:	f7ff fcaa 	bl	23264 <am_hal_pwrctrl_periph_enable>
   23910:	f7ff fbc8 	bl	230a4 <am_hal_interrupt_master_disable>
   23914:	032d      	lsls	r5, r5, #12
   23916:	68a3      	ldr	r3, [r4, #8]
   23918:	9002      	str	r0, [sp, #8]
   2391a:	622b      	str	r3, [r5, #32]
   2391c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   23920:	626a      	str	r2, [r5, #36]	; 0x24
   23922:	62ab      	str	r3, [r5, #40]	; 0x28
   23924:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   23928:	62ea      	str	r2, [r5, #44]	; 0x2c
   2392a:	632b      	str	r3, [r5, #48]	; 0x30
   2392c:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   23930:	9901      	ldr	r1, [sp, #4]
   23932:	636a      	str	r2, [r5, #52]	; 0x34
   23934:	63ab      	str	r3, [r5, #56]	; 0x38
   23936:	9802      	ldr	r0, [sp, #8]
   23938:	7121      	strb	r1, [r4, #4]
   2393a:	f7ff fbb7 	bl	230ac <am_hal_interrupt_master_set>
   2393e:	9901      	ldr	r1, [sp, #4]
   23940:	4608      	mov	r0, r1
   23942:	e000      	b.n	23946 <am_hal_uart_power_control+0x8e>
   23944:	2006      	movs	r0, #6
   23946:	b005      	add	sp, #20
   23948:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2394a:	2002      	movs	r0, #2
   2394c:	b005      	add	sp, #20
   2394e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23950:	f7ff fba8 	bl	230a4 <am_hal_interrupt_master_disable>
   23954:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   23958:	351c      	adds	r5, #28
   2395a:	032d      	lsls	r5, r5, #12
   2395c:	9003      	str	r0, [sp, #12]
   2395e:	6a2b      	ldr	r3, [r5, #32]
   23960:	60a3      	str	r3, [r4, #8]
   23962:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23964:	60e3      	str	r3, [r4, #12]
   23966:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23968:	6123      	str	r3, [r4, #16]
   2396a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2396c:	6163      	str	r3, [r4, #20]
   2396e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   23970:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   23972:	61a3      	str	r3, [r4, #24]
   23974:	6bab      	ldr	r3, [r5, #56]	; 0x38
   23976:	61e2      	str	r2, [r4, #28]
   23978:	2201      	movs	r2, #1
   2397a:	6223      	str	r3, [r4, #32]
   2397c:	9803      	ldr	r0, [sp, #12]
   2397e:	7122      	strb	r2, [r4, #4]
   23980:	f7ff fb94 	bl	230ac <am_hal_interrupt_master_set>
   23984:	6823      	ldr	r3, [r4, #0]
   23986:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2398a:	42b3      	cmp	r3, r6
   2398c:	d1ae      	bne.n	238ec <am_hal_uart_power_control+0x34>
   2398e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   23990:	e7a5      	b.n	238de <am_hal_uart_power_control+0x26>
   23992:	4638      	mov	r0, r7
   23994:	9201      	str	r2, [sp, #4]
   23996:	f7ff fc65 	bl	23264 <am_hal_pwrctrl_periph_enable>
   2399a:	9a01      	ldr	r2, [sp, #4]
   2399c:	4610      	mov	r0, r2
   2399e:	e7d2      	b.n	23946 <am_hal_uart_power_control+0x8e>
   239a0:	2007      	movs	r0, #7
   239a2:	e7d0      	b.n	23946 <am_hal_uart_power_control+0x8e>
   239a4:	01ea9e06 	.word	0x01ea9e06

000239a8 <am_hal_uart_configure>:
   239a8:	6803      	ldr	r3, [r0, #0]
   239aa:	4a78      	ldr	r2, [pc, #480]	; (23b8c <am_hal_uart_configure+0x1e4>)
   239ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   239b0:	4293      	cmp	r3, r2
   239b2:	d001      	beq.n	239b8 <am_hal_uart_configure+0x10>
   239b4:	2002      	movs	r0, #2
   239b6:	4770      	bx	lr
   239b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
   239be:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
   239c2:	341c      	adds	r4, #28
   239c4:	0324      	lsls	r4, r4, #12
   239c6:	2700      	movs	r7, #0
   239c8:	b084      	sub	sp, #16
   239ca:	6327      	str	r7, [r4, #48]	; 0x30
   239cc:	460e      	mov	r6, r1
   239ce:	4605      	mov	r5, r0
   239d0:	f7ff fb68 	bl	230a4 <am_hal_interrupt_master_disable>
   239d4:	9001      	str	r0, [sp, #4]
   239d6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   239d8:	f043 0308 	orr.w	r3, r3, #8
   239dc:	8623      	strh	r3, [r4, #48]	; 0x30
   239de:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   239e0:	2201      	movs	r2, #1
   239e2:	f362 1306 	bfi	r3, r2, #4, #3
   239e6:	8623      	strh	r3, [r4, #48]	; 0x30
   239e8:	9801      	ldr	r0, [sp, #4]
   239ea:	f7ff fb5f 	bl	230ac <am_hal_interrupt_master_set>
   239ee:	f7ff fb59 	bl	230a4 <am_hal_interrupt_master_disable>
   239f2:	9002      	str	r0, [sp, #8]
   239f4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   239f6:	f367 0300 	bfi	r3, r7, #0, #1
   239fa:	8623      	strh	r3, [r4, #48]	; 0x30
   239fc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   239fe:	f367 2349 	bfi	r3, r7, #9, #1
   23a02:	8623      	strh	r3, [r4, #48]	; 0x30
   23a04:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   23a06:	f367 2308 	bfi	r3, r7, #8, #1
   23a0a:	8623      	strh	r3, [r4, #48]	; 0x30
   23a0c:	9802      	ldr	r0, [sp, #8]
   23a0e:	f7ff fb4d 	bl	230ac <am_hal_interrupt_master_set>
   23a12:	4b5f      	ldr	r3, [pc, #380]	; (23b90 <am_hal_uart_configure+0x1e8>)
   23a14:	6832      	ldr	r2, [r6, #0]
   23a16:	68db      	ldr	r3, [r3, #12]
   23a18:	b2db      	uxtb	r3, r3
   23a1a:	2b12      	cmp	r3, #18
   23a1c:	d076      	beq.n	23b0c <am_hal_uart_configure+0x164>
   23a1e:	4b5c      	ldr	r3, [pc, #368]	; (23b90 <am_hal_uart_configure+0x1e8>)
   23a20:	68db      	ldr	r3, [r3, #12]
   23a22:	b2db      	uxtb	r3, r3
   23a24:	2b20      	cmp	r3, #32
   23a26:	d902      	bls.n	23a2e <am_hal_uart_configure+0x86>
   23a28:	4b5a      	ldr	r3, [pc, #360]	; (23b94 <am_hal_uart_configure+0x1ec>)
   23a2a:	429a      	cmp	r2, r3
   23a2c:	d871      	bhi.n	23b12 <am_hal_uart_configure+0x16a>
   23a2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23a30:	f3c3 1302 	ubfx	r3, r3, #4, #3
   23a34:	3b01      	subs	r3, #1
   23a36:	b2db      	uxtb	r3, r3
   23a38:	2b03      	cmp	r3, #3
   23a3a:	d86c      	bhi.n	23b16 <am_hal_uart_configure+0x16e>
   23a3c:	4956      	ldr	r1, [pc, #344]	; (23b98 <am_hal_uart_configure+0x1f0>)
   23a3e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   23a42:	0112      	lsls	r2, r2, #4
   23a44:	4291      	cmp	r1, r2
   23a46:	ea4f 1381 	mov.w	r3, r1, lsl #6
   23a4a:	fbb1 f0f2 	udiv	r0, r1, r2
   23a4e:	fbb3 f3f2 	udiv	r3, r3, r2
   23a52:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
   23a56:	d364      	bcc.n	23b22 <am_hal_uart_configure+0x17a>
   23a58:	6260      	str	r0, [r4, #36]	; 0x24
   23a5a:	6260      	str	r0, [r4, #36]	; 0x24
   23a5c:	62a3      	str	r3, [r4, #40]	; 0x28
   23a5e:	089b      	lsrs	r3, r3, #2
   23a60:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   23a64:	fbb1 f3f3 	udiv	r3, r1, r3
   23a68:	662b      	str	r3, [r5, #96]	; 0x60
   23a6a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   23a6c:	f36f 338e 	bfc	r3, #14, #1
   23a70:	8623      	strh	r3, [r4, #48]	; 0x30
   23a72:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   23a74:	f36f 33cf 	bfc	r3, #15, #1
   23a78:	8623      	strh	r3, [r4, #48]	; 0x30
   23a7a:	6933      	ldr	r3, [r6, #16]
   23a7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   23a7e:	6971      	ldr	r1, [r6, #20]
   23a80:	431a      	orrs	r2, r3
   23a82:	6873      	ldr	r3, [r6, #4]
   23a84:	6322      	str	r2, [r4, #48]	; 0x30
   23a86:	68f2      	ldr	r2, [r6, #12]
   23a88:	6361      	str	r1, [r4, #52]	; 0x34
   23a8a:	4313      	orrs	r3, r2
   23a8c:	68b2      	ldr	r2, [r6, #8]
   23a8e:	4313      	orrs	r3, r2
   23a90:	f043 0310 	orr.w	r3, r3, #16
   23a94:	62e3      	str	r3, [r4, #44]	; 0x2c
   23a96:	f7ff fb05 	bl	230a4 <am_hal_interrupt_master_disable>
   23a9a:	9003      	str	r0, [sp, #12]
   23a9c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   23a9e:	f043 0301 	orr.w	r3, r3, #1
   23aa2:	8623      	strh	r3, [r4, #48]	; 0x30
   23aa4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   23aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   23aaa:	8623      	strh	r3, [r4, #48]	; 0x30
   23aac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   23aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23ab2:	8623      	strh	r3, [r4, #48]	; 0x30
   23ab4:	9803      	ldr	r0, [sp, #12]
   23ab6:	f7ff faf9 	bl	230ac <am_hal_interrupt_master_set>
   23aba:	682a      	ldr	r2, [r5, #0]
   23abc:	4b33      	ldr	r3, [pc, #204]	; (23b8c <am_hal_uart_configure+0x1e4>)
   23abe:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
   23ac2:	4598      	cmp	r8, r3
   23ac4:	d11e      	bne.n	23b04 <am_hal_uart_configure+0x15c>
   23ac6:	69b1      	ldr	r1, [r6, #24]
   23ac8:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
   23acc:	b109      	cbz	r1, 23ad2 <am_hal_uart_configure+0x12a>
   23ace:	69f3      	ldr	r3, [r6, #28]
   23ad0:	bb5b      	cbnz	r3, 23b2a <am_hal_uart_configure+0x182>
   23ad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23ad4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23ad8:	331c      	adds	r3, #28
   23ada:	031b      	lsls	r3, r3, #12
   23adc:	2200      	movs	r2, #0
   23ade:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
   23ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23ae4:	f022 0220 	bic.w	r2, r2, #32
   23ae8:	639a      	str	r2, [r3, #56]	; 0x38
   23aea:	b10c      	cbz	r4, 23af0 <am_hal_uart_configure+0x148>
   23aec:	2f00      	cmp	r7, #0
   23aee:	d132      	bne.n	23b56 <am_hal_uart_configure+0x1ae>
   23af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23af2:	2000      	movs	r0, #0
   23af4:	f022 0250 	bic.w	r2, r2, #80	; 0x50
   23af8:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
   23afc:	639a      	str	r2, [r3, #56]	; 0x38
   23afe:	b004      	add	sp, #16
   23b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b04:	2000      	movs	r0, #0
   23b06:	b004      	add	sp, #16
   23b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b0c:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
   23b10:	d985      	bls.n	23a1e <am_hal_uart_configure+0x76>
   23b12:	4822      	ldr	r0, [pc, #136]	; (23b9c <am_hal_uart_configure+0x1f4>)
   23b14:	e7f3      	b.n	23afe <am_hal_uart_configure+0x156>
   23b16:	4822      	ldr	r0, [pc, #136]	; (23ba0 <am_hal_uart_configure+0x1f8>)
   23b18:	2300      	movs	r3, #0
   23b1a:	662b      	str	r3, [r5, #96]	; 0x60
   23b1c:	b004      	add	sp, #16
   23b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23b22:	2300      	movs	r3, #0
   23b24:	481d      	ldr	r0, [pc, #116]	; (23b9c <am_hal_uart_configure+0x1f4>)
   23b26:	662b      	str	r3, [r5, #96]	; 0x60
   23b28:	e7e9      	b.n	23afe <am_hal_uart_configure+0x156>
   23b2a:	2201      	movs	r2, #1
   23b2c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
   23b30:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   23b34:	f7ff fcca 	bl	234cc <am_hal_queue_init>
   23b38:	682b      	ldr	r3, [r5, #0]
   23b3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23b3e:	4543      	cmp	r3, r8
   23b40:	d1e0      	bne.n	23b04 <am_hal_uart_configure+0x15c>
   23b42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23b44:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23b48:	331c      	adds	r3, #28
   23b4a:	031b      	lsls	r3, r3, #12
   23b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23b4e:	f042 0220 	orr.w	r2, r2, #32
   23b52:	639a      	str	r2, [r3, #56]	; 0x38
   23b54:	e7c9      	b.n	23aea <am_hal_uart_configure+0x142>
   23b56:	2201      	movs	r2, #1
   23b58:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
   23b5c:	463b      	mov	r3, r7
   23b5e:	4621      	mov	r1, r4
   23b60:	f105 0048 	add.w	r0, r5, #72	; 0x48
   23b64:	f7ff fcb2 	bl	234cc <am_hal_queue_init>
   23b68:	682b      	ldr	r3, [r5, #0]
   23b6a:	4a08      	ldr	r2, [pc, #32]	; (23b8c <am_hal_uart_configure+0x1e4>)
   23b6c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23b70:	4293      	cmp	r3, r2
   23b72:	d1c7      	bne.n	23b04 <am_hal_uart_configure+0x15c>
   23b74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23b76:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23b7a:	331c      	adds	r3, #28
   23b7c:	031b      	lsls	r3, r3, #12
   23b7e:	2000      	movs	r0, #0
   23b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23b82:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   23b86:	639a      	str	r2, [r3, #56]	; 0x38
   23b88:	e7b9      	b.n	23afe <am_hal_uart_configure+0x156>
   23b8a:	bf00      	nop
   23b8c:	01ea9e06 	.word	0x01ea9e06
   23b90:	40020000 	.word	0x40020000
   23b94:	0016e360 	.word	0x0016e360
   23b98:	00028414 	.word	0x00028414
   23b9c:	08000003 	.word	0x08000003
   23ba0:	08000002 	.word	0x08000002

00023ba4 <am_hal_uart_transfer>:
   23ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ba8:	ed2d 8b02 	vpush	{d8}
   23bac:	680d      	ldr	r5, [r1, #0]
   23bae:	b091      	sub	sp, #68	; 0x44
   23bb0:	4604      	mov	r4, r0
   23bb2:	b14d      	cbz	r5, 23bc8 <am_hal_uart_transfer+0x24>
   23bb4:	2d01      	cmp	r5, #1
   23bb6:	f000 808f 	beq.w	23cd8 <am_hal_uart_transfer+0x134>
   23bba:	2507      	movs	r5, #7
   23bbc:	4628      	mov	r0, r5
   23bbe:	b011      	add	sp, #68	; 0x44
   23bc0:	ecbd 8b02 	vpop	{d8}
   23bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23bc8:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
   23bcc:	684b      	ldr	r3, [r1, #4]
   23bce:	690a      	ldr	r2, [r1, #16]
   23bd0:	9202      	str	r2, [sp, #8]
   23bd2:	4618      	mov	r0, r3
   23bd4:	f1b8 0f00 	cmp.w	r8, #0
   23bd8:	f000 8111 	beq.w	23dfe <am_hal_uart_transfer+0x25a>
   23bdc:	f1bb 0f00 	cmp.w	fp, #0
   23be0:	f000 8172 	beq.w	23ec8 <am_hal_uart_transfer+0x324>
   23be4:	2c00      	cmp	r4, #0
   23be6:	f000 8165 	beq.w	23eb4 <am_hal_uart_transfer+0x310>
   23bea:	46a9      	mov	r9, r5
   23bec:	462f      	mov	r7, r5
   23bee:	9501      	str	r5, [sp, #4]
   23bf0:	4625      	mov	r5, r4
   23bf2:	4619      	mov	r1, r3
   23bf4:	682a      	ldr	r2, [r5, #0]
   23bf6:	461c      	mov	r4, r3
   23bf8:	4bad      	ldr	r3, [pc, #692]	; (23eb0 <am_hal_uart_transfer+0x30c>)
   23bfa:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   23bfe:	429a      	cmp	r2, r3
   23c00:	465e      	mov	r6, fp
   23c02:	d12d      	bne.n	23c60 <am_hal_uart_transfer+0xbc>
   23c04:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   23c08:	bb7a      	cbnz	r2, 23c6a <am_hal_uart_transfer+0xc6>
   23c0a:	1e48      	subs	r0, r1, #1
   23c0c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   23c0e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   23c12:	311c      	adds	r1, #28
   23c14:	0309      	lsls	r1, r1, #12
   23c16:	698b      	ldr	r3, [r1, #24]
   23c18:	069b      	lsls	r3, r3, #26
   23c1a:	d405      	bmi.n	23c28 <am_hal_uart_transfer+0x84>
   23c1c:	3201      	adds	r2, #1
   23c1e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   23c22:	600b      	str	r3, [r1, #0]
   23c24:	4296      	cmp	r6, r2
   23c26:	d8f6      	bhi.n	23c16 <am_hal_uart_transfer+0x72>
   23c28:	4417      	add	r7, r2
   23c2a:	1ab6      	subs	r6, r6, r2
   23c2c:	b936      	cbnz	r6, 23c3c <am_hal_uart_transfer+0x98>
   23c2e:	9d01      	ldr	r5, [sp, #4]
   23c30:	9b02      	ldr	r3, [sp, #8]
   23c32:	2b00      	cmp	r3, #0
   23c34:	f000 808c 	beq.w	23d50 <am_hal_uart_transfer+0x1ac>
   23c38:	601f      	str	r7, [r3, #0]
   23c3a:	e7bf      	b.n	23bbc <am_hal_uart_transfer+0x18>
   23c3c:	2010      	movs	r0, #16
   23c3e:	f7ff f859 	bl	22cf4 <am_hal_flash_delay>
   23c42:	f1b8 3fff 	cmp.w	r8, #4294967295
   23c46:	bf18      	it	ne
   23c48:	f109 0901 	addne.w	r9, r9, #1
   23c4c:	45c8      	cmp	r8, r9
   23c4e:	d9ee      	bls.n	23c2e <am_hal_uart_transfer+0x8a>
   23c50:	682a      	ldr	r2, [r5, #0]
   23c52:	4b97      	ldr	r3, [pc, #604]	; (23eb0 <am_hal_uart_transfer+0x30c>)
   23c54:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   23c58:	429a      	cmp	r2, r3
   23c5a:	eb04 0107 	add.w	r1, r4, r7
   23c5e:	d0d1      	beq.n	23c04 <am_hal_uart_transfer+0x60>
   23c60:	9b02      	ldr	r3, [sp, #8]
   23c62:	b103      	cbz	r3, 23c66 <am_hal_uart_transfer+0xc2>
   23c64:	601f      	str	r7, [r3, #0]
   23c66:	2502      	movs	r5, #2
   23c68:	e7a8      	b.n	23bbc <am_hal_uart_transfer+0x18>
   23c6a:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
   23c6e:	1a12      	subs	r2, r2, r0
   23c70:	42b2      	cmp	r2, r6
   23c72:	4613      	mov	r3, r2
   23c74:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
   23c78:	bf28      	it	cs
   23c7a:	4633      	movcs	r3, r6
   23c7c:	461a      	mov	r2, r3
   23c7e:	4658      	mov	r0, fp
   23c80:	9303      	str	r3, [sp, #12]
   23c82:	f7ff fc2f 	bl	234e4 <am_hal_queue_item_add>
   23c86:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
   23c8a:	f7ff fa0b 	bl	230a4 <am_hal_interrupt_master_disable>
   23c8e:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
   23c92:	f10a 0a1c 	add.w	sl, sl, #28
   23c96:	9008      	str	r0, [sp, #32]
   23c98:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
   23c9c:	e00d      	b.n	23cba <am_hal_uart_transfer+0x116>
   23c9e:	f7ff fc5f 	bl	23560 <am_hal_queue_item_get>
   23ca2:	b190      	cbz	r0, 23cca <am_hal_uart_transfer+0x126>
   23ca4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   23ca6:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   23caa:	321c      	adds	r2, #28
   23cac:	0312      	lsls	r2, r2, #12
   23cae:	6993      	ldr	r3, [r2, #24]
   23cb0:	0699      	lsls	r1, r3, #26
   23cb2:	bf5c      	itt	pl
   23cb4:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
   23cb8:	6013      	strpl	r3, [r2, #0]
   23cba:	f8da 3018 	ldr.w	r3, [sl, #24]
   23cbe:	069b      	lsls	r3, r3, #26
   23cc0:	f04f 0201 	mov.w	r2, #1
   23cc4:	a907      	add	r1, sp, #28
   23cc6:	4658      	mov	r0, fp
   23cc8:	d5e9      	bpl.n	23c9e <am_hal_uart_transfer+0xfa>
   23cca:	9b03      	ldr	r3, [sp, #12]
   23ccc:	9808      	ldr	r0, [sp, #32]
   23cce:	441f      	add	r7, r3
   23cd0:	1af6      	subs	r6, r6, r3
   23cd2:	f7ff f9eb 	bl	230ac <am_hal_interrupt_master_set>
   23cd6:	e7a9      	b.n	23c2c <am_hal_uart_transfer+0x88>
   23cd8:	68cd      	ldr	r5, [r1, #12]
   23cda:	690b      	ldr	r3, [r1, #16]
   23cdc:	9301      	str	r3, [sp, #4]
   23cde:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
   23ce2:	2d00      	cmp	r5, #0
   23ce4:	f000 80b5 	beq.w	23e52 <am_hal_uart_transfer+0x2ae>
   23ce8:	2f00      	cmp	r7, #0
   23cea:	f000 811e 	beq.w	23f2a <am_hal_uart_transfer+0x386>
   23cee:	2800      	cmp	r0, #0
   23cf0:	f000 80e7 	beq.w	23ec2 <am_hal_uart_transfer+0x31e>
   23cf4:	6822      	ldr	r2, [r4, #0]
   23cf6:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 23eb0 <am_hal_uart_transfer+0x30c>
   23cfa:	f100 0348 	add.w	r3, r0, #72	; 0x48
   23cfe:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   23d02:	ee08 3a10 	vmov	s16, r3
   23d06:	f04f 0900 	mov.w	r9, #0
   23d0a:	462b      	mov	r3, r5
   23d0c:	4552      	cmp	r2, sl
   23d0e:	46c8      	mov	r8, r9
   23d10:	465d      	mov	r5, fp
   23d12:	461e      	mov	r6, r3
   23d14:	d133      	bne.n	23d7e <am_hal_uart_transfer+0x1da>
   23d16:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   23d1a:	2a00      	cmp	r2, #0
   23d1c:	d137      	bne.n	23d8e <am_hal_uart_transfer+0x1ea>
   23d1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23d20:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   23d24:	311c      	adds	r1, #28
   23d26:	1e68      	subs	r0, r5, #1
   23d28:	0309      	lsls	r1, r1, #12
   23d2a:	698b      	ldr	r3, [r1, #24]
   23d2c:	06dd      	lsls	r5, r3, #27
   23d2e:	d408      	bmi.n	23d42 <am_hal_uart_transfer+0x19e>
   23d30:	680b      	ldr	r3, [r1, #0]
   23d32:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   23d36:	d15e      	bne.n	23df6 <am_hal_uart_transfer+0x252>
   23d38:	3201      	adds	r2, #1
   23d3a:	4297      	cmp	r7, r2
   23d3c:	f800 3f01 	strb.w	r3, [r0, #1]!
   23d40:	d8f3      	bhi.n	23d2a <am_hal_uart_transfer+0x186>
   23d42:	4490      	add	r8, r2
   23d44:	1abf      	subs	r7, r7, r2
   23d46:	b957      	cbnz	r7, 23d5e <am_hal_uart_transfer+0x1ba>
   23d48:	9b01      	ldr	r3, [sp, #4]
   23d4a:	b10b      	cbz	r3, 23d50 <am_hal_uart_transfer+0x1ac>
   23d4c:	f8c3 8000 	str.w	r8, [r3]
   23d50:	2500      	movs	r5, #0
   23d52:	4628      	mov	r0, r5
   23d54:	b011      	add	sp, #68	; 0x44
   23d56:	ecbd 8b02 	vpop	{d8}
   23d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d5e:	2010      	movs	r0, #16
   23d60:	f7fe ffc8 	bl	22cf4 <am_hal_flash_delay>
   23d64:	1c73      	adds	r3, r6, #1
   23d66:	bf18      	it	ne
   23d68:	f109 0901 	addne.w	r9, r9, #1
   23d6c:	454e      	cmp	r6, r9
   23d6e:	d9eb      	bls.n	23d48 <am_hal_uart_transfer+0x1a4>
   23d70:	6822      	ldr	r2, [r4, #0]
   23d72:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   23d76:	4552      	cmp	r2, sl
   23d78:	eb0b 0508 	add.w	r5, fp, r8
   23d7c:	d0cb      	beq.n	23d16 <am_hal_uart_transfer+0x172>
   23d7e:	2502      	movs	r5, #2
   23d80:	9b01      	ldr	r3, [sp, #4]
   23d82:	2b00      	cmp	r3, #0
   23d84:	f43f af1a 	beq.w	23bbc <am_hal_uart_transfer+0x18>
   23d88:	f8c3 8000 	str.w	r8, [r3]
   23d8c:	e716      	b.n	23bbc <am_hal_uart_transfer+0x18>
   23d8e:	f7ff f989 	bl	230a4 <am_hal_interrupt_master_disable>
   23d92:	9007      	str	r0, [sp, #28]
   23d94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   23d96:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   23d9a:	301c      	adds	r0, #28
   23d9c:	0300      	lsls	r0, r0, #12
   23d9e:	f10d 0c20 	add.w	ip, sp, #32
   23da2:	2200      	movs	r2, #0
   23da4:	6983      	ldr	r3, [r0, #24]
   23da6:	06db      	lsls	r3, r3, #27
   23da8:	d409      	bmi.n	23dbe <am_hal_uart_transfer+0x21a>
   23daa:	6803      	ldr	r3, [r0, #0]
   23dac:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   23db0:	f102 0201 	add.w	r2, r2, #1
   23db4:	d119      	bne.n	23dea <am_hal_uart_transfer+0x246>
   23db6:	2a20      	cmp	r2, #32
   23db8:	f80c 3b01 	strb.w	r3, [ip], #1
   23dbc:	d1f2      	bne.n	23da4 <am_hal_uart_transfer+0x200>
   23dbe:	ee18 0a10 	vmov	r0, s16
   23dc2:	a908      	add	r1, sp, #32
   23dc4:	f7ff fb8e 	bl	234e4 <am_hal_queue_item_add>
   23dc8:	2800      	cmp	r0, #0
   23dca:	d075      	beq.n	23eb8 <am_hal_uart_transfer+0x314>
   23dcc:	9807      	ldr	r0, [sp, #28]
   23dce:	f7ff f96d 	bl	230ac <am_hal_interrupt_master_set>
   23dd2:	6d22      	ldr	r2, [r4, #80]	; 0x50
   23dd4:	42ba      	cmp	r2, r7
   23dd6:	bf28      	it	cs
   23dd8:	463a      	movcs	r2, r7
   23dda:	ee18 0a10 	vmov	r0, s16
   23dde:	4629      	mov	r1, r5
   23de0:	4490      	add	r8, r2
   23de2:	1abf      	subs	r7, r7, r2
   23de4:	f7ff fbbc 	bl	23560 <am_hal_queue_item_get>
   23de8:	e7ad      	b.n	23d46 <am_hal_uart_transfer+0x1a2>
   23dea:	9807      	ldr	r0, [sp, #28]
   23dec:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   23df0:	f7ff f95c 	bl	230ac <am_hal_interrupt_master_set>
   23df4:	e7c4      	b.n	23d80 <am_hal_uart_transfer+0x1dc>
   23df6:	4490      	add	r8, r2
   23df8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   23dfc:	e7c0      	b.n	23d80 <am_hal_uart_transfer+0x1dc>
   23dfe:	2c00      	cmp	r4, #0
   23e00:	f43f af31 	beq.w	23c66 <am_hal_uart_transfer+0xc2>
   23e04:	6822      	ldr	r2, [r4, #0]
   23e06:	492a      	ldr	r1, [pc, #168]	; (23eb0 <am_hal_uart_transfer+0x30c>)
   23e08:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   23e0c:	428a      	cmp	r2, r1
   23e0e:	f47f af2a 	bne.w	23c66 <am_hal_uart_transfer+0xc2>
   23e12:	9b02      	ldr	r3, [sp, #8]
   23e14:	b10b      	cbz	r3, 23e1a <am_hal_uart_transfer+0x276>
   23e16:	f8c3 8000 	str.w	r8, [r3]
   23e1a:	f1bb 0f00 	cmp.w	fp, #0
   23e1e:	d097      	beq.n	23d50 <am_hal_uart_transfer+0x1ac>
   23e20:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   23e24:	2d00      	cmp	r5, #0
   23e26:	d151      	bne.n	23ecc <am_hal_uart_transfer+0x328>
   23e28:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23e2a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   23e2e:	311c      	adds	r1, #28
   23e30:	1e42      	subs	r2, r0, #1
   23e32:	0309      	lsls	r1, r1, #12
   23e34:	698b      	ldr	r3, [r1, #24]
   23e36:	0698      	lsls	r0, r3, #26
   23e38:	d405      	bmi.n	23e46 <am_hal_uart_transfer+0x2a2>
   23e3a:	3501      	adds	r5, #1
   23e3c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   23e40:	600b      	str	r3, [r1, #0]
   23e42:	45ab      	cmp	fp, r5
   23e44:	d1f6      	bne.n	23e34 <am_hal_uart_transfer+0x290>
   23e46:	9b02      	ldr	r3, [sp, #8]
   23e48:	2b00      	cmp	r3, #0
   23e4a:	d081      	beq.n	23d50 <am_hal_uart_transfer+0x1ac>
   23e4c:	601d      	str	r5, [r3, #0]
   23e4e:	2500      	movs	r5, #0
   23e50:	e6b4      	b.n	23bbc <am_hal_uart_transfer+0x18>
   23e52:	2800      	cmp	r0, #0
   23e54:	f43f af07 	beq.w	23c66 <am_hal_uart_transfer+0xc2>
   23e58:	6802      	ldr	r2, [r0, #0]
   23e5a:	4915      	ldr	r1, [pc, #84]	; (23eb0 <am_hal_uart_transfer+0x30c>)
   23e5c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   23e60:	428a      	cmp	r2, r1
   23e62:	f47f af00 	bne.w	23c66 <am_hal_uart_transfer+0xc2>
   23e66:	b103      	cbz	r3, 23e6a <am_hal_uart_transfer+0x2c6>
   23e68:	601d      	str	r5, [r3, #0]
   23e6a:	2f00      	cmp	r7, #0
   23e6c:	f43f af70 	beq.w	23d50 <am_hal_uart_transfer+0x1ac>
   23e70:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   23e74:	2a00      	cmp	r2, #0
   23e76:	d15a      	bne.n	23f2e <am_hal_uart_transfer+0x38a>
   23e78:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23e7a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   23e7e:	311c      	adds	r1, #28
   23e80:	f10b 33ff 	add.w	r3, fp, #4294967295
   23e84:	0309      	lsls	r1, r1, #12
   23e86:	4614      	mov	r4, r2
   23e88:	698a      	ldr	r2, [r1, #24]
   23e8a:	06d2      	lsls	r2, r2, #27
   23e8c:	d409      	bmi.n	23ea2 <am_hal_uart_transfer+0x2fe>
   23e8e:	680a      	ldr	r2, [r1, #0]
   23e90:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
   23e94:	d176      	bne.n	23f84 <am_hal_uart_transfer+0x3e0>
   23e96:	3401      	adds	r4, #1
   23e98:	42a7      	cmp	r7, r4
   23e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
   23e9e:	d1f3      	bne.n	23e88 <am_hal_uart_transfer+0x2e4>
   23ea0:	4605      	mov	r5, r0
   23ea2:	9b01      	ldr	r3, [sp, #4]
   23ea4:	2b00      	cmp	r3, #0
   23ea6:	f43f ae89 	beq.w	23bbc <am_hal_uart_transfer+0x18>
   23eaa:	601c      	str	r4, [r3, #0]
   23eac:	e686      	b.n	23bbc <am_hal_uart_transfer+0x18>
   23eae:	bf00      	nop
   23eb0:	01ea9e06 	.word	0x01ea9e06
   23eb4:	4627      	mov	r7, r4
   23eb6:	e6d3      	b.n	23c60 <am_hal_uart_transfer+0xbc>
   23eb8:	9807      	ldr	r0, [sp, #28]
   23eba:	4d39      	ldr	r5, [pc, #228]	; (23fa0 <am_hal_uart_transfer+0x3fc>)
   23ebc:	f7ff f8f6 	bl	230ac <am_hal_interrupt_master_set>
   23ec0:	e75e      	b.n	23d80 <am_hal_uart_transfer+0x1dc>
   23ec2:	2502      	movs	r5, #2
   23ec4:	4680      	mov	r8, r0
   23ec6:	e75b      	b.n	23d80 <am_hal_uart_transfer+0x1dc>
   23ec8:	462f      	mov	r7, r5
   23eca:	e6b1      	b.n	23c30 <am_hal_uart_transfer+0x8c>
   23ecc:	6b65      	ldr	r5, [r4, #52]	; 0x34
   23ece:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   23ed0:	1b52      	subs	r2, r2, r5
   23ed2:	455a      	cmp	r2, fp
   23ed4:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   23ed8:	4601      	mov	r1, r0
   23eda:	bf28      	it	cs
   23edc:	465a      	movcs	r2, fp
   23ede:	4638      	mov	r0, r7
   23ee0:	4615      	mov	r5, r2
   23ee2:	f7ff faff 	bl	234e4 <am_hal_queue_item_add>
   23ee6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   23ee8:	f7ff f8dc 	bl	230a4 <am_hal_interrupt_master_disable>
   23eec:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
   23ef0:	361c      	adds	r6, #28
   23ef2:	9005      	str	r0, [sp, #20]
   23ef4:	0336      	lsls	r6, r6, #12
   23ef6:	e00f      	b.n	23f18 <am_hal_uart_transfer+0x374>
   23ef8:	a908      	add	r1, sp, #32
   23efa:	4638      	mov	r0, r7
   23efc:	f7ff fb30 	bl	23560 <am_hal_queue_item_get>
   23f00:	b178      	cbz	r0, 23f22 <am_hal_uart_transfer+0x37e>
   23f02:	6a62      	ldr	r2, [r4, #36]	; 0x24
   23f04:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   23f08:	321c      	adds	r2, #28
   23f0a:	0312      	lsls	r2, r2, #12
   23f0c:	6993      	ldr	r3, [r2, #24]
   23f0e:	0699      	lsls	r1, r3, #26
   23f10:	bf5c      	itt	pl
   23f12:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
   23f16:	6013      	strpl	r3, [r2, #0]
   23f18:	69b3      	ldr	r3, [r6, #24]
   23f1a:	069b      	lsls	r3, r3, #26
   23f1c:	f04f 0201 	mov.w	r2, #1
   23f20:	d5ea      	bpl.n	23ef8 <am_hal_uart_transfer+0x354>
   23f22:	9805      	ldr	r0, [sp, #20]
   23f24:	f7ff f8c2 	bl	230ac <am_hal_interrupt_master_set>
   23f28:	e78d      	b.n	23e46 <am_hal_uart_transfer+0x2a2>
   23f2a:	46b8      	mov	r8, r7
   23f2c:	e70c      	b.n	23d48 <am_hal_uart_transfer+0x1a4>
   23f2e:	f7ff f8b9 	bl	230a4 <am_hal_interrupt_master_disable>
   23f32:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23f34:	9006      	str	r0, [sp, #24]
   23f36:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   23f3a:	311c      	adds	r1, #28
   23f3c:	0309      	lsls	r1, r1, #12
   23f3e:	ae08      	add	r6, sp, #32
   23f40:	2200      	movs	r2, #0
   23f42:	698b      	ldr	r3, [r1, #24]
   23f44:	06d8      	lsls	r0, r3, #27
   23f46:	d409      	bmi.n	23f5c <am_hal_uart_transfer+0x3b8>
   23f48:	680b      	ldr	r3, [r1, #0]
   23f4a:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   23f4e:	f102 0201 	add.w	r2, r2, #1
   23f52:	d11a      	bne.n	23f8a <am_hal_uart_transfer+0x3e6>
   23f54:	2a20      	cmp	r2, #32
   23f56:	f806 3b01 	strb.w	r3, [r6], #1
   23f5a:	d1f2      	bne.n	23f42 <am_hal_uart_transfer+0x39e>
   23f5c:	f104 0648 	add.w	r6, r4, #72	; 0x48
   23f60:	a908      	add	r1, sp, #32
   23f62:	4630      	mov	r0, r6
   23f64:	f7ff fabe 	bl	234e4 <am_hal_queue_item_add>
   23f68:	b1a8      	cbz	r0, 23f96 <am_hal_uart_transfer+0x3f2>
   23f6a:	9806      	ldr	r0, [sp, #24]
   23f6c:	f7ff f89e 	bl	230ac <am_hal_interrupt_master_set>
   23f70:	6d24      	ldr	r4, [r4, #80]	; 0x50
   23f72:	42bc      	cmp	r4, r7
   23f74:	bf28      	it	cs
   23f76:	463c      	movcs	r4, r7
   23f78:	4659      	mov	r1, fp
   23f7a:	4630      	mov	r0, r6
   23f7c:	4622      	mov	r2, r4
   23f7e:	f7ff faef 	bl	23560 <am_hal_queue_item_get>
   23f82:	e78e      	b.n	23ea2 <am_hal_uart_transfer+0x2fe>
   23f84:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   23f88:	e78b      	b.n	23ea2 <am_hal_uart_transfer+0x2fe>
   23f8a:	9806      	ldr	r0, [sp, #24]
   23f8c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   23f90:	f7ff f88c 	bl	230ac <am_hal_interrupt_master_set>
   23f94:	e612      	b.n	23bbc <am_hal_uart_transfer+0x18>
   23f96:	9806      	ldr	r0, [sp, #24]
   23f98:	4d01      	ldr	r5, [pc, #4]	; (23fa0 <am_hal_uart_transfer+0x3fc>)
   23f9a:	f7ff f887 	bl	230ac <am_hal_interrupt_master_set>
   23f9e:	e60d      	b.n	23bbc <am_hal_uart_transfer+0x18>
   23fa0:	08000001 	.word	0x08000001

00023fa4 <am_hal_uart_interrupt_enable>:
   23fa4:	6803      	ldr	r3, [r0, #0]
   23fa6:	4a08      	ldr	r2, [pc, #32]	; (23fc8 <am_hal_uart_interrupt_enable+0x24>)
   23fa8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23fac:	4293      	cmp	r3, r2
   23fae:	d109      	bne.n	23fc4 <am_hal_uart_interrupt_enable+0x20>
   23fb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   23fb2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23fb6:	331c      	adds	r3, #28
   23fb8:	031b      	lsls	r3, r3, #12
   23fba:	2000      	movs	r0, #0
   23fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23fbe:	4311      	orrs	r1, r2
   23fc0:	6399      	str	r1, [r3, #56]	; 0x38
   23fc2:	4770      	bx	lr
   23fc4:	2002      	movs	r0, #2
   23fc6:	4770      	bx	lr
   23fc8:	01ea9e06 	.word	0x01ea9e06

00023fcc <am_hal_uart_interrupt_clear>:
   23fcc:	6803      	ldr	r3, [r0, #0]
   23fce:	4a07      	ldr	r2, [pc, #28]	; (23fec <am_hal_uart_interrupt_clear+0x20>)
   23fd0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23fd4:	4293      	cmp	r3, r2
   23fd6:	d107      	bne.n	23fe8 <am_hal_uart_interrupt_clear+0x1c>
   23fd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   23fda:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23fde:	331c      	adds	r3, #28
   23fe0:	031b      	lsls	r3, r3, #12
   23fe2:	2000      	movs	r0, #0
   23fe4:	6459      	str	r1, [r3, #68]	; 0x44
   23fe6:	4770      	bx	lr
   23fe8:	2002      	movs	r0, #2
   23fea:	4770      	bx	lr
   23fec:	01ea9e06 	.word	0x01ea9e06

00023ff0 <am_hal_uart_interrupt_status_get>:
   23ff0:	6803      	ldr	r3, [r0, #0]
   23ff2:	b410      	push	{r4}
   23ff4:	4c0b      	ldr	r4, [pc, #44]	; (24024 <am_hal_uart_interrupt_status_get+0x34>)
   23ff6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   23ffa:	42a3      	cmp	r3, r4
   23ffc:	d10d      	bne.n	2401a <am_hal_uart_interrupt_status_get+0x2a>
   23ffe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   24000:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   24004:	331c      	adds	r3, #28
   24006:	031b      	lsls	r3, r3, #12
   24008:	b92a      	cbnz	r2, 24016 <am_hal_uart_interrupt_status_get+0x26>
   2400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   2400c:	f85d 4b04 	ldr.w	r4, [sp], #4
   24010:	600b      	str	r3, [r1, #0]
   24012:	2000      	movs	r0, #0
   24014:	4770      	bx	lr
   24016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   24018:	e7f8      	b.n	2400c <am_hal_uart_interrupt_status_get+0x1c>
   2401a:	2002      	movs	r0, #2
   2401c:	f85d 4b04 	ldr.w	r4, [sp], #4
   24020:	4770      	bx	lr
   24022:	bf00      	nop
   24024:	01ea9e06 	.word	0x01ea9e06
   24028:	0001c200 	.word	0x0001c200
   2402c:	00000060 	.word	0x00000060
	...
   2403c:	00000012 	.word	0x00000012
	...
   24050:	00000004 	.word	0x00000004
   24054:	00000020 	.word	0x00000020
   24058:	00000020 	.word	0x00000020
   2405c:	00000002 	.word	0x00000002
   24060:	00000000 	.word	0x00000000
   24064:	00000032 	.word	0x00000032
   24068:	00010101 	.word	0x00010101
   2406c:	00000000 	.word	0x00000000
   24070:	646e6152 	.word	0x646e6152
   24074:	00614e20 	.word	0x00614e20
   24078:	72656550 	.word	0x72656550
   2407c:	00624320 	.word	0x00624320
   24080:	61636f4c 	.word	0x61636f4c
   24084:	6243206c 	.word	0x6243206c
   24088:	00000000 	.word	0x00000000
   2408c:	00696143 	.word	0x00696143
   24090:	00696243 	.word	0x00696243
   24094:	74696e49 	.word	0x74696e49
   24098:	6f746169 	.word	0x6f746169
   2409c:	62432072 	.word	0x62432072
   240a0:	00000000 	.word	0x00000000
   240a4:	654b4844 	.word	0x654b4844
   240a8:	62452079 	.word	0x62452079
   240ac:	00000000 	.word	0x00000000

000240b0 <smpiScActionTbl>:
   240b0:	0000ca85 0000e2e5 0000e2f9 0000e315     ................
   240c0:	0000cba9 0000cbed 0000cbf5 0000cc51     ............Q...
   240d0:	0000cc81 0000cf2d 0000cfb1 0000cfd1     ....-...........
   240e0:	0000cfb9 0000cfc5 0000d03d 0000c2d5     ........=.......
   240f0:	0000c345 0000c359 0000c385 0000c3f5     E...Y...........
   24100:	0000c455 0000c4b9 0000c501 0000c591     U...............
   24110:	0000c5c5 0000c5f9 0000c5f5 0000c605     ................
   24120:	0000c649 0000c689 0000c6ad 0000e4f1     I...............
   24130:	0000e3bd 0000e549 0000e591 0000c6e9     ....I...........
   24140:	0000c779 0000c7bd 0000c7e1 0000c80d     y...............
   24150:	0000c871 0000c8dd 0000c949 0000e5d1     q.......I.......
   24160:	0000e66d 0000e711 0000e795 0000e811     m...............
   24170:	0000e895 0000c96d 0000c9a5              ....m.......

0002417c <smpiScSmIf>:
   2417c:	00024188 000240b0 00024288              .A...@...B..

00024188 <smpiScStateTbl>:
   24188:	000242bc 00024354 00024324 0002431c     .B..TC..$C...C..
   24198:	00024388 00024238 000242f0 000242e8     .C..8B...B...B..
   241a8:	000242d4 000242dc 000242f8 000243b8     .B...B...B...C..
   241b8:	0002435c 0002436c 00024374 00024364     \C..lC..tC..dC..
   241c8:	0002437c 00024330 00024338 00024244     |C..0C..8C..DB..
   241d8:	0002425c 00024254 0002424c 00024298     \B..TB..LB...B..
   241e8:	000242a0 000243b0 00024314 00024268     .B...C...C..hB..
   241f8:	00024270 00024344 0002434c 00024278     pB..DC..LC..xB..
   24208:	00024280 000243a4 000242a8 00024304     .B...C...B...C..
   24218:	00024220 00024390                        B...C..

00024220 <smpiScStateTblAttempts>:
   24220:	0f0b0010 24060225 0c01010a 0301000a     ....%..$........
   24230:	24070100 00000000                       ...$....

00024238 <smpiScStateTblAuthSelect>:
   24238:	141b0613 1115200b 00000028              ..... ..(...

00024244 <smpiScStateTblCalcDHKey>:
   24244:	002c1419 00000000                       ..,.....

0002424c <smpiScStateTblCalcF5LTK>:
   2424c:	002f171c 00000000                       ../.....

00024254 <smpiScStateTblCalcF5MacKey>:
   24254:	002e161c 00000000                       ........

0002425c <smpiScStateTblCalcF5TKey>:
   2425c:	0d2d151c 00000924 00000000              ..-.$.......

00024268 <smpiScStateTblCnfCalc1>:
   24268:	00051c0b 00000000                       ........

00024270 <smpiScStateTblCnfCalc2>:
   24270:	00061d0b 00000000                       ........

00024278 <smpiScStateTblCnfVerCalc1>:
   24278:	0008200b 00000000                       . ......

00024280 <smpiScStateTblCnfVerCalc2>:
   24280:	0014210b 00000000                       .!......

00024288 <smpiScStateTblCommon>:
   24288:	0702000a 00030200 02250f03 00000000     ..........%.....

00024298 <smpiScStateTblDhCalcF6Ea>:
   24298:	0030181c 00000000                       ..0.....

000242a0 <smpiScStateTblDhCalcF6Eb>:
   242a0:	0031191c 00000000                       ..1.....

000242a8 <smpiScStateTblEncrypt>:
   242a8:	09162308 22030200 03001d00 0009240d     .#.....".....$..
   242b8:	00000000                                ....

000242bc <smpiScStateTblIdle>:
   242bc:	0a0f0101 00030100 11000610 0f000007     ................
	...

000242d4 <smpiScStateTblJwNcCheck1>:
   242d4:	001e091c 00000000                       ........

000242dc <smpiScStateTblJwNcCheck2>:
   242dc:	0d1f0a1c 00000924 00000000              ....$.......

000242e8 <smpiScStateTblJwNcRand>:
   242e8:	001d0806 00000000                       ........

000242f0 <smpiScStateTblJwNcWaitCnf>:
   242f0:	001c0706 00000000                       ........

000242f8 <smpiScStateTblJwNcWaitUser>:
   242f8:	0d2b1316 00000924 00000000              ..+.$.......

00024304 <smpiScStateTblKeyDist>:
   24304:	0c172306 000e1823 0023030e 00000000     .#..#.....#.....

00024314 <smpiScStateTblLegacyPin>:
   24314:	00041b04 00000000                       ........

0002431c <smpiScStateTblLescPin>:
   2431c:	00190404 00000000                       ........

00024324 <smpiScStateTblModeSelect>:
   24324:	12000311 0000001a 00000000              ............

00024330 <smpiScStateTblOobSendRand>:
   24330:	0029121c 00000000                       ..).....

00024338 <smpiScStateTblOobWaitRand>:
   24338:	0d2a1306 00000924 00000000              ..*.$.......

00024344 <smpiScStateTblPairCnf>:
   24344:	00131e06 00000000                       ........

0002434c <smpiScStateTblPairRand>:
   2434c:	00071f06 00000000                       ........

00024354 <smpiScStateTblPairRsp>:
   24354:	00120206 00000000                       ........

0002435c <smpiScStateTblPasskeyCalc>:
   2435c:	00250d1c 00000000                       ..%.....

00024364 <smpiScStateTblPasskeyCheck>:
   24364:	0027101c 00000000                       ..'.....

0002436c <smpiScStateTblPasskeyCnf>:
   2436c:	00260e06 00000000                       ..&.....

00024374 <smpiScStateTblPasskeyRand>:
   24374:	00240f06 00000000                       ..$.....

0002437c <smpiScStateTblPasskeyRepeat>:
   2437c:	1b230c1a 240d2b13 00000009              ..#..+.$....

00024388 <smpiScStateTblPubKey>:
   24388:	001a0506 00000000                       ........

00024390 <smpiScStateTblRspTo>:
   24390:	0701000a 25030025 00250f00 000d2501     ....%..%..%..%..
   243a0:	00000000                                ....

000243a4 <smpiScStateTblStkCalc>:
   243a4:	0d15220b 00000924 00000000              ."..$.......

000243b0 <smpiScStateTblVerifyDHCheck>:
   243b0:	00322206 00000000                       ."2.....

000243b8 <smprScStateTblPasskeyKeypress>:
   243b8:	17210b06 0c04220b 00000023              ..!.."..#...

000243c4 <smpiActionTbl>:
   243c4:	0000ca85 0000ca89 0000cae9 0000cb3d     ............=...
   243d4:	0000cba9 0000cbed 0000cbf5 0000cc51     ............Q...
   243e4:	0000cc81 0000cf2d 0000cfb1 0000cfd1     ....-...........
   243f4:	0000cfb9 0000cfc5 0000d03d 0000c2d5     ........=.......
   24404:	0000c345 0000c359 0000c385 0000c3f5     E...Y...........
   24414:	0000c455 0000c4b9 0000c501 0000c591     U...............
   24424:	0000c5c5                                ....

00024428 <smpiSmIf>:
   24428:	00024434 000243c4 000244a4              4D...C...D..

00024434 <smpiStateTbl>:
   24434:	000244c0 000244f8 00024500 00024484     .D...D...E...D..
   24444:	0002448c 000244e8 000244f0 00024494     .D...D...D...D..
   24454:	0002449c 0002451c 000244b4 000244d8     .D...E...D...D..
   24464:	0002446c 00024508                       lD...E..

0002446c <smpiStateTblAttempts>:
   2446c:	0f0b0010 0c06020d 0c01010a 0301000a     ................
   2447c:	0c070100 00000000                       ........

00024484 <smpiStateTblCnfCalc1>:
   24484:	0005040b 00000000                       ........

0002448c <smpiStateTblCnfCalc2>:
   2448c:	0006050b 00000000                       ........

00024494 <smpiStateTblCnfVerCalc1>:
   24494:	0008080b 00000000                       ........

0002449c <smpiStateTblCnfVerCalc2>:
   2449c:	0014090b 00000000                       ........

000244a4 <smpiStateTblCommon>:
   244a4:	0702000a 00030200 020d0f03 00000000     ................

000244b4 <smpiStateTblEncrypt>:
   244b4:	09160b08 0a030200 00000000              ............

000244c0 <smpiStateTblIdle>:
   244c0:	0a0f0101 00030100 11000610 0f000007     ................
	...

000244d8 <smpiStateTblKeyDist>:
   244d8:	0c170b06 000e180b 000b030e 00000000     ................

000244e8 <smpiStateTblPairCnf>:
   244e8:	00130606 00000000                       ........

000244f0 <smpiStateTblPairRand>:
   244f0:	00070706 00000000                       ........

000244f8 <smpiStateTblPairRsp>:
   244f8:	00120206 00000000                       ........

00024500 <smpiStateTblPin>:
   24500:	00040304 00000000                       ........

00024508 <smpiStateTblRspTo>:
   24508:	0701000a 0d03000d 000d0f00 000d0d01     ................
   24518:	00000000                                ....

0002451c <smpiStateTblStkCalc>:
   2451c:	0d150a0b 0000090c 00000000 53706d73     ............smpS
   2452c:	4b646e65 75207965 7078656e 65746365     endKey unexpecte
   2453c:	74732064 20657461 4479656b 3a747369     d state keyDist:
   2454c:	6c206425 53747361 4b746e65 253a7965     %d lastSentKey:%
   2455c:	00000064 53706d73 6578456d 65747563     d...smpSmExecute
   2456c:	65766520 253d746e 74732064 3d657461      event=%d state=
   2457c:	00006425 44706d73 74654762 6f636552     %d..smpDbGetReco
   2458c:	203a6472 6e6e6f63 203a6449 74206425     rd: connId: %d t
   2459c:	3a657079 00642520 44706d73 64644162     ype: %d.smpDbAdd
   245ac:	69766544 00006563 44706d73 74654762     Device..smpDbGet
   245bc:	6f636552 203a6472 6d6d6f63 72206e6f     Record: common r
   245cc:	726f6365 00000064 44706d53 74654762     ecord...SmpDbGet
   245dc:	72696150 44676e69 62617369 5464656c     PairingDisabledT
   245ec:	3a656d69 6e6f6320 3a64496e 20642520     ime: connId: %d 
   245fc:	69726570 203a646f 61206425 6d657474     period: %d attem
   2460c:	754d7470 203a746c 00006425 44706d53     ptMult: %d..SmpD
   2461c:	74655362 6c696146 43657275 746e756f     bSetFailureCount
   2462c:	6f63203a 64496e6e 6425203a 756f6320     : connId: %d cou
   2463c:	203a746e 00006425 44706d53 74654762     nt: %d..SmpDbGet
   2464c:	6c696146 43657275 746e756f 6f63203a     FailureCount: co
   2465c:	64496e6e 6425203a 756f6320 203a746e     nnId: %d count: 
   2466c:	00006425 44706d53 78614d62 65747441     %d..SmpDbMaxAtte
   2467c:	5274706d 68636165 203a6465 6e6e6f63     mptReached: conn
   2468c:	203a6449 00006425 44706d53 69615062     Id: %d..SmpDbPai
   2469c:	676e6972 6c696146 203a6465 6e6e6f63     ringFailed: conn
   246ac:	203a6449 00006425 78656e75 74636570     Id: %d..unexpect
   246bc:	70206465 656b6361 6d632074 64253a64     ed packet cmd:%d
   246cc:	6e656c20 2c64253a 70786520 65746365      len:%d, expecte
   246dc:	64253a64 00000000 53706d73 50646e65     d:%d....smpSendP
   246ec:	7020746b 656b6361 69642074 72616373     kt packet discar
   246fc:	20646564 3a646d63 00006425 20534541     ded cmd:%d..AES 
   2470c:	656b6f74 696d206e 74616d73 203a6863     token mismatch: 
   2471c:	25206425 00000064                       %d %d...

00024724 <smpPktLenTbl>:
   24724:	11070700 0b110211 02110811 00021141     ............A...
   24734:	50203446 0000624b 50203446 0000614b     F4 PKb..F4 PKa..
   24744:	4e203446 00000062 434e574a 73694420     F4 Nb...JWNC Dis
   24754:	79616c70 666e4320 00000000 654b4844     play Cnf....DHKe
   24764:	53282079 65726168 65532064 74657263     y (Shared Secret
   24774:	00000029 9183886c 38a5f5aa db0b3760     )...l......8`7..
   24784:	be83605a 00000000 00000054 0043414d     Z`......T...MAC.
   24794:	004b544c 654b4844 61452079 00000000     LTK.DHKey Ea....

000247a4 <smpScF5Key>:
   247a4:	656c7462 53706d53 74654763 636e6143     btleSmpScGetCanc
   247b4:	734d6c65 74695767 61655268 6d657474     elMsgWithReattem
   247c4:	203a7470 00006425 20424f4f 72656550     pt: %d..OOB Peer
   247d4:	6e6f4320 6d726966 00000000 20424f4f      Confirm....OOB 
   247e4:	72656550 6e615220 006d6f64 20424f4f     Peer Random.OOB 
   247f4:	61636f4c 6f43206c 7269666e 0000006d     Local Confirm...
   24804:	20424f4f 61636f4c 6152206c 6d6f646e     OOB Local Random
   24814:	00000000 74646d41 65536370 6554646e     ....AmdtpcSendTe
   24824:	61447473 29286174 69616620 2c64656c     stData() failed,
   24834:	61747320 20737574 6425203d 0000000a      status = %d....
   24844:	74646d61 70744470 6e617254 61624373     amdtpDtpTransCba
   24854:	73206b63 75746174 203d2073 000a6425     ck status = %d..
   24864:	74646d41 6f436370 704f6e6e 29286e65     AmdtpcConnOpen()
   24874:	76656420 6f666e49 4e203d20 0a4c4c55      devInfo = NULL.
   24884:	00000000 74646d41 65526370 73657571     ....AmdtpcReques
   24894:	72655374 53726576 28646e65 61662029     tServerSend() fa
   248a4:	64656c69 7473202c 73757461 25203d20     iled, status = %
   248b4:	00000a64 74646d41 61486370 656c646e     d...AmdtpcHandle
   248c4:	696e4972 00000074 74646d41 67206370     rInit...Amdtpc g
   248d4:	6520746f 25207476 00000064 6f726874     ot evt %d...thro
   248e4:	70686775 3a207475 20642520 65747942     ughput : %d Byte
   248f4:	0a732f73 00000000 6e616373 6f747320     s/s.....scan sto
   24904:	000a0d70 6e6f4320 7463656e 206e6f69     p... Connection 
   24914:	6e65706f 0a0d6465 00000000              opened......

00024920 <amdtpcAckCccNtfVal>:
   24920:	00000001                                ....

00024924 <amdtpcAppCfg>:
   24924:	00000101                                ....

00024928 <amdtpcCccIndVal>:
   24928:	00000002                                ....

0002492c <amdtpcConnCfg>:
   2492c:	00280028 02580000 00000000              (.(...X.....

00024938 <amdtpcDiscCfg>:
   24938:	00000000                                ....

0002493c <amdtpcDiscCfgList>:
   2493c:	00024928 00000102 0002497c 00000702     (I......|I......
   2494c:	00024920 00000902                        I......

00024954 <amdtpcMasterCfg>:
   24954:	00300060 01000fa0                       `.0.....

0002495c <amdtpcSecCfg>:
   2495c:	00030209 00000000                       ........

00024964 <amdtpcSmpCfg>:
   24964:	00000bb8 03100703 00000000 00000000     ................
	...

0002497c <amdtpcTxCccNtfVal>:
   2497c:	00000001 65657246 534f5452 444d4120     ....FreeRTOS AMD
   2498c:	45205054 706d6178 000a656c 6f6d654d     TP Example..Memo
   2499c:	70207972 206c6f6f 74207369 73206f6f     ry pool is too s
   249ac:	6c6c616d 20796220 0a0d6425 00000000     mall by %d......
   249bc:	69646152 7361546f 73203a6b 70757465     RadioTask: setup
   249cc:	00000a0d 72617453 676e6974 63697720     ....Starting wic
   249dc:	72746e65 74206369 65636172 000a0a3a     entric trace:...
   249ec:	6e6e7552 20676e69 75746573 61742070     Running setup ta
   249fc:	2e736b73 0a0d2e2e 00000000 69646152     sks.........Radi
   24a0c:	7361546f 0000006b 75746553 00000070     oTask...Setup...
   24a1c:	4f525245 48435f52 204b4345 685f6d61     ERROR_CHECK am_h
   24a2c:	625f6c61 695f656c 6974696e 7a696c61     al_ble_initializ
   24a3c:	2c302865 4c422620 000a2945 4f525245     e(0, &BLE)..ERRO
   24a4c:	48435f52 204b4345 685f6d61 625f6c61     R_CHECK am_hal_b
   24a5c:	705f656c 7265776f 6e6f635f 6c6f7274     le_power_control
   24a6c:	454c4228 4d41202c 4c41485f 454c425f     (BLE, AM_HAL_BLE
   24a7c:	574f505f 415f5245 56495443 000a2945     _POWER_ACTIVE)..
   24a8c:	4f525245 48435f52 204b4345 685f6d61     ERROR_CHECK am_h
   24a9c:	625f6c61 635f656c 69666e6f 4c422867     al_ble_config(BL
   24aac:	26202c45 656c4273 666e6f43 0a296769     E, &sBleConfig).
   24abc:	00000000 4f525245 48435f52 204b4345     ....ERROR_CHECK 
   24acc:	685f6d61 625f6c61 705f656c 7265776f     am_hal_ble_power
   24adc:	6e6f635f 6c6f7274 454c4228 4d41202c     _control(BLE, AM
   24aec:	4c41485f 454c425f 574f505f 4f5f5245     _HAL_BLE_POWER_O
   24afc:	0a294646 00000000 4f525245 48435f52     FF).....ERROR_CH
   24b0c:	204b4345 685f6d61 625f6c61 645f656c     ECK am_hal_ble_d
   24b1c:	696e6965 6c616974 28657a69 29454c42     einitialize(BLE)
   24b2c:	0000000a                                ....

00024b30 <hciEventMask>:
   24b30:	02008890 20008000                       ....... 

00024b38 <hciEventMaskPage2>:
   24b38:	00800000 00000000                       ........

00024b40 <hciLeEventMask>:
   24b40:	007fffff 00000000 6d20454c 20617465     ........LE meta 
   24b50:	20627573 6e657665 203d2074 78257830     sub event = 0x%x
   24b60:	00000000 45696368 72507476 7365636f     ....hciEvtProces
   24b70:	43654c73 496e6e6f 70655251 0074726f     sLeConnIQReport.
   24b80:	20766372 4320654c 496e6e6f 65522051     rcv Le ConnIQ Re
   24b90:	74726f70 002e2e2e 20657463 20716572     port....cte req 
   24ba0:	6c696166 2e2e6465 00002e2e 20766372     failed......rcv 
   24bb0:	4320654c 746e6e6f 7373656c 20514920     Le Conntless IQ 
   24bc0:	6f706552 2e2e7472 0000002e              Report......

00024bcc <hciEvtCbackLen>:
   24bcc:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   24bdc:	06080610 06060606 16060c0c 0a08080e     ................
   24bec:	0e0e0806 0826460e 0a060a06 0c0a0424     .....F&.....$...
   24bfc:	04061016 04040404 04040404 08041c04     ................
   24c0c:	00080808                                ....

00024c10 <hciEvtParseFcnTbl>:
   24c10:	00000000 00012691 000124c5 00012051     .....&...$..Q ..
   24c20:	0001206d 000120b1 00000000 000120c5     m ... ....... ..
   24c30:	0001266d 000120e1 000120f5 00012645     m&... ... ..E&..
   24c40:	00012131 00012149 00012161 00012179     1!..I!..a!..y!..
   24c50:	00012615 00012195 000125f9 000125f1     .&...!...%...%..
   24c60:	000121a1 000121a9 000121bd 000121d1     .!...!...!...!..
   24c70:	000124ad 00012495 000121e5 000125c5     .$...$...!...%..
   24c80:	000125a9 000121f9 00012211 00012229     .%...!..."..)"..
   24c90:	00012249 0001225d 00012275 000122ad     I"..]"..u"..."..
   24ca0:	000122ed 00012575 0001252d 0001232d     ."..u%..-%..-#..
   24cb0:	00012345 00012355 00012379 0001238d     E#..U#..y#...#..
   24cc0:	00000000 000123b1 000123b5 00012485     .....#...#...$..
   24cd0:	00012449 00000000 0001243d 00000000     I$......=$......
   24ce0:	000123d5 000123d5 000123d5 000123d5     .#...#...#...#..
   24cf0:	000123d5 00000000 00000000 00000000     .#..............
	...
   24d0c:	000123dd 000123f5 0001240d 00012425     .#...#...$..%$..

00024d1c <calc128Zeros>:
	...

00024d2c <crc32Table>:
   24d2c:	00000000 77073096 ee0e612c 990951ba     .....0.w,a...Q..
   24d3c:	076dc419 706af48f e963a535 9e6495a3     ..m...jp5.c...d.
   24d4c:	0edb8832 79dcb8a4 e0d5e91e 97d2d988     2......y........
   24d5c:	09b64c2b 7eb17cbd e7b82d07 90bf1d91     +L...|.~.-......
   24d6c:	1db71064 6ab020f2 f3b97148 84be41de     d.... .jHq...A..
   24d7c:	1adad47d 6ddde4eb f4d4b551 83d385c7     }......mQ.......
   24d8c:	136c9856 646ba8c0 fd62f97a 8a65c9ec     V.l...kdz.b...e.
   24d9c:	14015c4f 63066cd9 fa0f3d63 8d080df5     O\...l.cc=......
   24dac:	3b6e20c8 4c69105e d56041e4 a2677172     . n;^.iL.A`.rqg.
   24dbc:	3c03e4d1 4b04d447 d20d85fd a50ab56b     ...<G..K....k...
   24dcc:	35b5a8fa 42b2986c dbbbc9d6 acbcf940     ...5l..B....@...
   24ddc:	32d86ce3 45df5c75 dcd60dcf abd13d59     .l.2u\.E....Y=..
   24dec:	26d930ac 51de003a c8d75180 bfd06116     .0.&:..Q.Q...a..
   24dfc:	21b4f4b5 56b3c423 cfba9599 b8bda50f     ...!#..V........
   24e0c:	2802b89e 5f058808 c60cd9b2 b10be924     ...(..._....$...
   24e1c:	2f6f7c87 58684c11 c1611dab b6662d3d     .|o/.LhX..a.=-f.
   24e2c:	76dc4190 01db7106 98d220bc efd5102a     .A.v.q... ..*...
   24e3c:	71b18589 06b6b51f 9fbfe4a5 e8b8d433     ...q........3...
   24e4c:	7807c9a2 0f00f934 9609a88e e10e9818     ...x4...........
   24e5c:	7f6a0dbb 086d3d2d 91646c97 e6635c01     ..j.-=m..ld..\c.
   24e6c:	6b6b51f4 1c6c6162 856530d8 f262004e     .Qkkbal..0e.N.b.
   24e7c:	6c0695ed 1b01a57b 8208f4c1 f50fc457     ...l{.......W...
   24e8c:	65b0d9c6 12b7e950 8bbeb8ea fcb9887c     ...eP.......|...
   24e9c:	62dd1ddf 15da2d49 8cd37cf3 fbd44c65     ...bI-...|..eL..
   24eac:	4db26158 3ab551ce a3bc0074 d4bb30e2     Xa.M.Q.:t....0..
   24ebc:	4adfa541 3dd895d7 a4d1c46d d3d6f4fb     A..J...=m.......
   24ecc:	4369e96a 346ed9fc ad678846 da60b8d0     j.iC..n4F.g...`.
   24edc:	44042d73 33031de5 aa0a4c5f dd0d7cc9     s-.D...3_L...|..
   24eec:	5005713c 270241aa be0b1010 c90c2086     <q.P.A.'..... ..
   24efc:	5768b525 206f85b3 b966d409 ce61e49f     %.hW..o ..f...a.
   24f0c:	5edef90e 29d9c998 b0d09822 c7d7a8b4     ...^...)".......
   24f1c:	59b33d17 2eb40d81 b7bd5c3b c0ba6cad     .=.Y....;\...l..
   24f2c:	edb88320 9abfb3b6 03b6e20c 74b1d29a      ..............t
   24f3c:	ead54739 9dd277af 04db2615 73dc1683     9G...w...&.....s
   24f4c:	e3630b12 94643b84 0d6d6a3e 7a6a5aa8     ..c..;d.>jm..Zjz
   24f5c:	e40ecf0b 9309ff9d 0a00ae27 7d079eb1     ........'......}
   24f6c:	f00f9344 8708a3d2 1e01f268 6906c2fe     D.......h......i
   24f7c:	f762575d 806567cb 196c3671 6e6b06e7     ]Wb..ge.q6l...kn
   24f8c:	fed41b76 89d32be0 10da7a5a 67dd4acc     v....+..Zz...J.g
   24f9c:	f9b9df6f 8ebeeff9 17b7be43 60b08ed5     o.......C......`
   24fac:	d6d6a3e8 a1d1937e 38d8c2c4 4fdff252     ....~......8R..O
   24fbc:	d1bb67f1 a6bc5767 3fb506dd 48b2364b     .g..gW.....?K6.H
   24fcc:	d80d2bda af0a1b4c 36034af6 41047a60     .+..L....J.6`z.A
   24fdc:	df60efc3 a867df55 316e8eef 4669be79     ..`.U.g...n1y.iF
   24fec:	cb61b38c bc66831a 256fd2a0 5268e236     ..a...f...o%6.hR
   24ffc:	cc0c7795 bb0b4703 220216b9 5505262f     .w...G....."/&.U
   2500c:	c5ba3bbe b2bd0b28 2bb45a92 5cb36a04     .;..(....Z.+.j.\
   2501c:	c2d7ffa7 b5d0cf31 2cd99e8b 5bdeae1d     ....1......,...[
   2502c:	9b64c2b0 ec63f226 756aa39c 026d930a     ..d.&.c...ju..m.
   2503c:	9c0906a9 eb0e363f 72076785 05005713     ....?6...g.r.W..
   2504c:	95bf4a82 e2b87a14 7bb12bae 0cb61b38     .J...z...+.{8...
   2505c:	92d28e9b e5d5be0d 7cdcefb7 0bdbdf21     ...........|!...
   2506c:	86d3d2d4 f1d4e242 68ddb3f8 1fda836e     ....B......hn...
   2507c:	81be16cd f6b9265b 6fb077e1 18b74777     ....[&...w.owG..
   2508c:	88085ae6 ff0f6a70 66063bca 11010b5c     .Z..pj...;.f\...
   2509c:	8f659eff f862ae69 616bffd3 166ccf45     ..e.i.b...kaE.l.
   250ac:	a00ae278 d70dd2ee 4e048354 3903b3c2     x.......T..N...9
   250bc:	a7672661 d06016f7 4969474d 3e6e77db     a&g...`.MGiI.wn>
   250cc:	aed16a4a d9d65adc 40df0b66 37d83bf0     Jj...Z..f..@.;.7
   250dc:	a9bcae53 debb9ec5 47b2cf7f 30b5ffe9     S..........G...0
   250ec:	bdbdf21c cabac28a 53b39330 24b4a3a6     ........0..S...$
   250fc:	bad03605 cdd70693 54de5729 23d967bf     .6......)W.T.g.#
   2510c:	b3667a2e c4614ab8 5d681b02 2a6f2b94     .zf..Ja...h].+o*
   2511c:	b40bbe37 c30c8ea1 5a05df1b 2d02ef8d     7..........Z...-

0002512c <gapCar>:
   2512c:	000259a8 00000000                       .Y......

00025134 <gapRpao>:
   25134:	000259c8 00000000 74646d41 65536370     .Y......AmdtpcSe
   25144:	6341646e 2029286b 63206f6e 656e6e6f     ndAck() no conne
   25154:	6f697463 00000a6e 61766e49 2064696c     ction...Invalid 
   25164:	41747461 64486b63 203d206c 78257830     attAckHdl = 0x%x
   25174:	0000000a 74646d41 65536370 6144646e     ....AmdtpcSendDa
   25184:	29286174 206f6e20 6e6e6f63 69746365     ta() no connecti
   25194:	000a6e6f 61766e49 2064696c 52747461     on..Invalid attR
   251a4:	6c644878 30203d20 0a782578 00000000     xHdl = 0x%x.....
   251b4:	74646d61 735f6370 74726174 6e202928     amdtpc_start() n
   251c4:	6f63206f 63656e6e 6e6f6974 0000000a     o connection....
   251d4:	2055544d 657a6973 25203d20 79622064     MTU size = %d by
   251e4:	00736574 74646d61 74206370 69742078     tes.amdtpc tx ti
   251f4:	756f656d 74202c74 746b5078 3d206e53     meout, txPktSn =
   25204:	00642520 61746164 6e657320 676e6964      %d.data sending
   25214:	69616620 2c64656c 20787420 74617473      failed, tx stat
   25224:	203d2065 00006425 61746164 6e657320     e = %d..data sen
   25234:	676e6964 69616620 2c64656c 63786520     ding failed, exc
   25244:	20646565 6978616d 206d756d 6c796170     eed maximum payl
   25254:	2c64616f 6e656c20 25203d20 00002e64     oad, len = %d...
   25264:	61746164 6e657320 676e6964 69616620     data sending fai
   25274:	2c64656c 746f6e20 61657220 66207964     led, not ready f
   25284:	6e20726f 6669746f 74616369 2e6e6f69     or notification.
   25294:	00000000                                ....

00025298 <amdtpAck>:
   25298:	000252a8 00000003                       .R......

000252a0 <amdtpAckCcc>:
   252a0:	000259b0 00000006                       .Y......

000252a8 <amdtpAckChUuid>:
   252a8:	c72e0013 90730e8a 08c211e1 00002760     ......s.....`'..

000252b8 <amdtpRx>:
   252b8:	000252c0 00000003                       .R......

000252c0 <amdtpRxChUuid>:
   252c0:	c72e0011 90730e8a 08c211e1 00002760     ......s.....`'..

000252d0 <amdtpSvcUuid>:
   252d0:	c72e1011 90730e8a 08c211e1 00002760     ......s.....`'..

000252e0 <amdtpTx>:
   252e0:	000252f0 00000003                       .R......

000252e8 <amdtpTxCcc>:
   252e8:	000259b0 00000006                       .Y......

000252f0 <amdtpTxChUuid>:
   252f0:	c72e0012 90730e8a 08c211e1 00002760     ......s.....`'..
   25300:	61766e49 2064696c 6b636170 21217465     Invalid packet!!
   25310:	00000021 74646d41 6e655370 70655264     !...AmdtpSendRep
   25320:	7320796c 75746174 203d2073 000a6425     ly status = %d..
   25330:	65707974 25203d20 73202c64 203d206e     type = %d, sn = 
   25340:	00006425 20636e65 6425203d 6361202c     %d..enc = %d, ac
   25350:	616e456b 64656c62 25203d20 00000064     kEnabled = %d...
   25360:	20746f6e 756f6e65 62206867 65666675     not enough buffe
   25370:	69732072 2121657a 00000021 20637263     r size!!!...crc 
   25380:	6f727265 00000a72 65736572 6b50646e     error...resendPk
   25390:	206e5374 6425203d 616c202c 78527473     tSn = %d, lastRx
   253a0:	53746b50 203d206e 00006425 78656e75     PktSn = %d..unex
   253b0:	74636570 63206465 72746e6f 203d206c     pected contrl = 
   253c0:	000a6425 74646d41 6e655370 6e6f4364     %d..AmdtpSendCon
   253d0:	6c6f7274 61747320 20737574 6425203d     trol status = %d
   253e0:	0000000a 203e3e3e 65736552 6f632074     ....>>> Reset co
   253f0:	656c706d 3c206574 00003c3c 203e3e3e     mplete <<<..>>> 
   25400:	65766441 73697472 20676e69 72617473     Advertising star
   25410:	20646574 003c3c3c 203e3e3e 65766441     ted <<<.>>> Adve
   25420:	73697472 20676e69 706f7473 20646570     rtising stopped 
   25430:	003c3c3c 203e3e3e 6e616353 676e696e     <<<.>>> Scanning
   25440:	61747320 64657472 3c3c3c20 00000000      started <<<....
   25450:	203e3e3e 6e616353 676e696e 6f747320     >>> Scanning sto
   25460:	64657070 3c3c3c20 00000000 203e3e3e     pped <<<....>>> 
   25470:	6e616353 74616420 65722061 76696563     Scan data receiv
   25480:	66206465 206d6f72 72656570 3c3c3c20     ed from peer <<<
   25490:	00000000 203e3e3e 6e6e6f43 69746365     ....>>> Connecti
   254a0:	6f206e6f 656e6570 3c3c2064 0000003c     on opened <<<...
   254b0:	203e3e3e 6e6e6f43 69746365 63206e6f     >>> Connection c
   254c0:	65736f6c 3c3c2064 0000003c 203e3e3e     losed <<<...>>> 
   254d0:	72696150 20676e69 706d6f63 6574656c     Pairing complete
   254e0:	75732064 73656363 6c756673 3c20796c     d successfully <
   254f0:	00003c3c 203e3e3e 72696150 20676e69     <<..>>> Pairing 
   25500:	6c696166 3c206465 00003c3c 203e3e3e     failed <<<..>>> 
   25510:	6e6e6f43 69746365 65206e6f 7972636e     Connection encry
   25520:	64657470 3c3c3c20 00000000 203e3e3e     pted <<<....>>> 
   25530:	72636e45 69747079 66206e6f 656c6961     Encryption faile
   25540:	3c3c2064 0000003c 203e3e3e 6d6f7250     d <<<...>>> Prom
   25550:	75207470 20726573 65206f74 7265746e     pt user to enter
   25560:	73617020 79656b73 3c3c3c20 00000000      passkey <<<....
   25570:	203e3e3e 636e6143 61206c65 776f6c20     >>> Cancel a low
   25580:	20726f20 68676968 656c6120 3c207472      or high alert <
   25590:	00003c3c 203e3e3e 20776f4c 72656c61     <<..>>> Low aler
   255a0:	3c3c2074 0000003c 203e3e3e 68676948     t <<<...>>> High
   255b0:	656c6120 3c207472 00003c3c 203e3e3e      alert <<<..>>> 
   255c0:	65766441 73697472 20676e69 73746573     Advertising sets
   255d0:	61747320 64657472 3c3c3c20 00000000      started <<<....
   255e0:	203e3e3e 65766441 73697472 20676e69     >>> Advertising 
   255f0:	73746573 6f747320 64657070 3c3c3c20     sets stopped <<<
   25600:	00000000 203e3e3e 6e616353 71657220     ....>>> Scan req
   25610:	74736575 63657220 65766965 3c3c2064     uest received <<
   25620:	0000003c 203e3e3e 65747845 6465646e     <...>>> Extended
   25630:	61637320 6e696e6e 74732067 65747261      scanning starte
   25640:	3c3c2064 0000003c 203e3e3e 65747845     d <<<...>>> Exte
   25650:	6465646e 61637320 6e696e6e 74732067     nded scanning st
   25660:	6570706f 3c3c2064 0000003c 203e3e3e     opped <<<...>>> 
   25670:	69726550 6369646f 76646120 69747265     Periodic adverti
   25680:	676e6973 74657320 61747320 64657472     sing set started
   25690:	3c3c3c20 00000000 203e3e3e 69726550      <<<....>>> Peri
   256a0:	6369646f 76646120 69747265 676e6973     odic advertising
   256b0:	74657320 6f747320 64657070 3c3c3c20      set stopped <<<
   256c0:	00000000 203e3e3e 69726550 6369646f     ....>>> Periodic
   256d0:	76646120 69747265 676e6973 6e797320      advertising syn
   256e0:	73652063 6c626174 65687369 3c3c2064     c established <<
   256f0:	0000003c 203e3e3e 69726550 6369646f     <...>>> Periodic
   25700:	76646120 69747265 676e6973 6e797320      advertising syn
   25710:	6f6c2063 3c207473 00003c3c 203e3e3e     c lost <<<..>>> 
   25720:	73736150 3a79656b 20642520 003c3c3c     Passkey: %d <<<.
   25730:	203e3e3e 666e6f43 206d7269 756c6156     >>> Confirm Valu
   25740:	25203a65 3c3c2064 0000003c 78656e75     e: %d <<<...unex
   25750:	74636570 63206465 626c6c61 206b6361     pected callback 
   25760:	6e657665 64252074 00000000 6e756f66     event %d....foun
   25770:	65732064 63697672 74732065 48747261     d service startH
   25780:	303d6c64 20782578 48646e65 303d6c64     dl=0x%x endHdl=0
   25790:	00782578 72616863 65746361 74736972     x%x.characterist
   257a0:	66206369 646e756f 6e616820 3a656c64     ic found handle:
   257b0:	78257830 00000000 61766e69 2064696c     0x%x....invalid 
   257c0:	646e6168 303a656c 00782578 63736564     handle:0x%x.desc
   257d0:	74706972 6620726f 646e756f 6e616820     riptor found han
   257e0:	3a656c64 78257830 00000000 63747461     dle:0x%x....attc
   257f0:	6b6e7520 6e776f6e 63706f20 2065646f      unknown opcode 
   25800:	30257830 00007832 63747461 62636320     0x%02x..attc ccb
   25810:	746f6e20 206e6920 3a657375 00642520      not in use: %d.
   25820:	2055544d 20716572 63736964 65647261     MTU req discarde
   25830:	00000064                                d...

00025834 <attcFcnIf>:
   25834:	00014d4d 00014da1 0001519d 00014ebd     MM...M...Q...N..

00025844 <attcSendReqTbl>:
   25844:	00000000 00014e55 000150f5 000150f5     ....UN...P...P..
   25854:	000150f5 00014d15 000150f5 00014d15     .P...M...P...M..
   25864:	000150f5 00014d15 00014df1 00015031     .P...M...M..1P..
   25874:	00014d15                                .M..

00025878 <attcProcRspTbl>:
   25878:	00015499 000155dd 000154c9 00015abd     .T...U...T...Z..
   25888:	000154c9 000155d1 00015b3d 000155d1     .T...U..=[...U..
   25898:	000154c9 000155d5 00000000 00015c15     .T...U.......\..
   258a8:	000155d5 61746144 65736162 73616820     .U..Database has
   258b8:	61632068 6c75636c 6f697461 6f63206e     h calculation co
   258c8:	656c706d 00006574 636c6143 74616c75     mplete..Calculat
   258d8:	20676e69 61746164 65736162 73616820     ing database has
   258e8:	00000068 6e6e6f43 25206449 68632064     h...ConnId %d ch
   258f8:	65676e61 61776120 73206572 65746174     ange aware state
   25908:	20736920 00006425 6e6e6f43 25206449      is %d..ConnId %
   25918:	756f2064 666f2074 6e797320 50202c63     d out of sync, P
   25928:	77205544 20687469 6f63706f 30206564     DU with opcode 0
   25938:	32302578 67692078 65726f6e 00002164     x%02x ignored!..
   25948:	73747461 62636320 746f6e20 206e6920     atts ccb not in 
   25958:	3a657375 00642520                       use: %d.

00025960 <attsIndFcnIf>:
   25960:	000178a9 00015f65 00015db1 00015ed5     .x..e_...]...^..

00025970 <attsFcnIf>:
   25970:	000160d5 00016085 000162dd 00016091     .`...`...b...`..

00025980 <attsMinPduLen>:
   25980:	07050300 05050305 05030305 01000002     ................
   25990:	0000000f                                ....

00025994 <attFcnDefault>:
   25994:	000178a9 000178a1 000178a1 000178a5     .x...x...x...x..

000259a4 <attApChUuid>:
   259a4:	00002a01                                .*..

000259a8 <attCarChUuid>:
   259a8:	00002aa6                                .*..

000259ac <attChUuid>:
   259ac:	00002803                                .(..

000259b0 <attCliChCfgUuid>:
   259b0:	00002902                                .)..

000259b4 <attGapSvcUuid>:
   259b4:	00001800                                ....

000259b8 <attGattCsfChUuid>:
   259b8:	00002b29                                )+..

000259bc <attGattDbhChUuid>:
   259bc:	00002b2a                                *+..

000259c0 <attGattSvcUuid>:
   259c0:	00001801                                ....

000259c4 <attPrimSvcUuid>:
   259c4:	00002800                                .(..

000259c8 <attRpaoChUuid>:
   259c8:	00002ac9                                .*..

000259cc <attScChUuid>:
   259cc:	00002a05 42667357 6c416675 20636f6c     .*..WsfBufAlloc 
   259dc:	6c696166 6c206465 253a6e65 00000075     failed len:%u...
   259ec:	20465357 656d6954 00000072 58323025     WSF Timer...%02X
   259fc:	00000020 2e2f2e2e 2e2e2f2e 2f2e2e2f      ...../../../../
   25a0c:	742f2e2e 64726968 7261705f 632f7974     ../third_party/c
   25a1c:	6964726f 73772f6f 6f732f66 65637275     ordio/wsf/source
   25a2c:	6f702f73 662f7472 72656572 2f736f74     s/port/freertos/
   25a3c:	5f667377 63617274 00632e65              wsf_trace.c.

00025a48 <gattCsf>:
   25a48:	000259b8 00000000                       .Y......

00025a50 <gattSc>:
   25a50:	000259cc 00000000                       .Y......

00025a58 <gattScCcc>:
   25a58:	000259b0 00000004                       .Y......

00025a60 <curve_G>:
   25a60:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
   25a70:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k
   25a80:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
   25a90:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O

00025aa0 <curve_b>:
   25aa0:	27d2604b 3bce3c3e cc53b0f6 651d06b0     K`.'><.;..S....e
   25ab0:	769886bc b3ebbd55 aa3a93e7 5ac635d8     ...vU.....:..5.Z

00025ac0 <curve_n>:
   25ac0:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
   25ad0:	ffffffff ffffffff 00000000 ffffffff     ................

00025ae0 <curve_p>:
   25ae0:	ffffffff ffffffff ffffffff 00000000     ................
	...
   25af8:	00000001 ffffffff 2d2d2d2d 2d2d2d2d     ........--------
   25b08:	2d2d2d2d 2d2d2d2d 2d2d2d2d 6e616353     ------------Scan
   25b18:	73655220 73746c75 2d2d2d2d 2d2d2d2d      Results--------
   25b28:	2d2d2d2d 2d2d2d2d 2d2d2d2d 00000a0d     ------------....
   25b38:	3a206425 20642520 78323025 78323025     %d : %d %02x%02x
   25b48:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   25b58:	000a0d20 2d2d2d2d 2d2d2d2d 2d2d2d2d      ...------------
   25b68:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   25b78:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   25b88:	2d2d2d2d 2d2d2d2d 000a0d2d 0a0d7325     ---------...%s..
   25b98:	00000000 2d2d2d2d 2d2d2d2d 2d2d2d2d     ....------------
   25ba8:	2d2d2d2d 2d2d2d2d 20454c42 6e69616d     --------BLE main
   25bb8:	6e656d20 2d2d2d75 2d2d2d2d 2d2d2d2d      menu-----------
   25bc8:	2d2d2d2d 2d2d2d2d 000a0d2d 746e6968     ---------...hint
   25bd8:	7375203a 68272065 6f742027 206f6420     : use 'h' to do 
   25be8:	6e69616d 6e656d20 000a0d75 4d656c42     main menu...BleM
   25bf8:	52756e65 61642078 3d206174 0a732520     enuRx data = %s.
   25c08:	00000000 6e616373 61747320 0a0d7472     ....scan start..
   25c18:	00000000 6f6f6863 61206573 6469206e     ....choose an id
   25c28:	72662078 73206d6f 206e6163 75736572     x from scan resu
   25c38:	2073746c 63206f74 656e6e6f 0d3a7463     lts to connect:.
   25c48:	0000000a 646e6573 74616420 6f742061     ....send data to
   25c58:	72657320 0d726576 0000000a 646e6573      server.....send
   25c68:	74616420 6f742061 72657320 20726576      data to server 
   25c78:	706f7473 00000a0d 75716572 20747365     stop....request 
   25c88:	76726573 74207265 6573206f 0a0d646e     server to send..
   25c98:	00000000 75716572 20747365 76726573     ....request serv
   25ca8:	74207265 7473206f 0a0d706f 00000000     er to stop......
   25cb8:	646e6168 6553656c 7463656c 286e6f69     handleSelection(
   25cc8:	6e752029 776f6e6b 6e69206e 0a747570     ) unknown input.
   25cd8:	00000000                                ....

00025cdc <attCfg>:
   25cdc:	0000000f 041e01e0                       ........

00025ce4 <smpCfg>:
   25ce4:	000001f4 01100703 00000000 0000fa00     ................
   25cf4:	0000fa00 00000002 61766e49 2064696c     ........Invalid 
   25d04:	656c6f72 6e6f6320 75676966 69746172     role configurati
   25d14:	203a6e6f 656c6f72 0064253d 6e6b6e75     on: role=%d.unkn
   25d24:	206e776f 3d646963 30257830 00007834     own cid=0x%04x..
   25d34:	64766372 74616420 6e6f2061 65727520     rcvd data on ure
   25d44:	74736967 64657265 64696320 00000000     gistered cid....
   25d54:	676e656c 6d206874 616d7369 3a686374     length mismatch:
   25d64:	63326c20 2075253d 3d696368 00007525      l2c=%u hci=%u..
   25d74:	61766e69 2064696c 2067736d 65646f63     invalid msg code
   25d84:	2064253a 3a6e656c 6c206425 654c6332     :%d len:%d l2cLe
   25d94:	64253a6e 00000000 64416d64 74634176     n:%d....dmAdvAct
   25da4:	666e6f43 203a6769 74617473 25203a65     Config: state: %
   25db4:	00000064 64416d44 6e6f4376 20676966     d...DmAdvConfig 
   25dc4:	69727564 6420676e 63657269 20646574     during directed 
   25dd4:	65766461 73697472 21676e69 00000000     advertising!....
   25de4:	64416d64 74634176 44746553 3a617461     dmAdvActSetData:
   25df4:	61747320 203a6574 00006425 64416d64      state: %d..dmAd
   25e04:	74634176 72617453 73203a74 65746174     vActStart: state
   25e14:	6425203a 00000000 64416d64 74634176     : %d....dmAdvAct
   25e24:	72617453 75642074 676e6972 72696420     Start during dir
   25e34:	65746365 64612064 74726576 6e697369     ected advertisin
   25e44:	00002167 64416d64 74634176 706f7453     g!..dmAdvActStop
   25e54:	7473203a 3a657461 00642520 64416d44     : state: %d.DmAd
   25e64:	6f745376 75642070 676e6972 72696420     vStop during dir
   25e74:	65746365 64612064 74726576 6e697369     ected advertisin
   25e84:	00002167 5f494348 415f454c 455f5644     g!..HCI_LE_ADV_E
   25e94:	4c42414e 4d435f45 4d435f44 435f4c50     NABLE_CMD_CMPL_C
   25ea4:	4b434142 5456455f 7473203a 3a657461     BACK_EVT: state:
   25eb4:	00642520 64416d64 74634176 656d6954      %d.dmAdvActTime
   25ec4:	2174756f 00000000                       out!....

00025ecc <dmAdvAct>:
   25ecc:	0001b421 0001b49d 0001b4d5 0001b51d     !...............
   25edc:	0001b3c1 0001b65d 0001b661 0001b665     ....]...a...e...

00025eec <dmAdvFcnIf>:
   25eec:	0001b3d9 0001b561 0001b3c5 6f436d64     ....a.......dmCo
   25efc:	63436e6e 61654462 636f6c6c 00642520     nnCcbDealloc %d.
   25f0c:	6f436d64 63436e6e 48794262 6c646e61     dmConnCcbByHandl
   25f1c:	6f6e2065 6f662074 20646e75 30257830     e not found 0x%0
   25f2c:	00007834 6f436d64 64496e6e 64427942     4x..dmConnIdByBd
   25f3c:	72646441 746f6e20 756f6620 0000646e     Addr not found..
   25f4c:	6f436d64 6d436e6e 74536c70 73657461     dmConnCmplStates
   25f5c:	00642520 6f436d64 63436e6e 6c6c4162      %d.dmConnCcbAll
   25f6c:	2520636f 00000064 6f436d64 63436e6e     oc %d...dmConnCc
   25f7c:	6c6c4162 6620636f 656c6961 00000064     bAlloc failed...
   25f8c:	6e6e6f63 253d6449 64692064 614d656c     connId=%d idleMa
   25f9c:	303d6b73 34302578 00000078              sk=0x%04x...

00025fa8 <dmConn2FcnIf>:
   25fa8:	0001c539 0001b95d 0001b8b9              9...].......

00025fb4 <dmConnActSetMain>:
   25fb4:	0001b6bd 0001b6d5 0001b74d 0001b6dd     ........M.......
   25fc4:	0001b81d 0001b6c1                       ........

00025fcc <dmConnFcnIf>:
   25fcc:	0001bcbd 0001bb09 0001b885              ............

00025fd8 <dmConnSpecDefaults>:
   25fd8:	00280018 07d00000 00000000              ..(.........

00025fe4 <dmConnActSetMaster>:
   25fe4:	0001c2b9 0001c239 0001c251 0001c259     ....9...Q...Y...
   25ff4:	6f436d64 6d536e6e 63657845 20657475     dmConnSmExecute 
   26004:	6e657665 64253d74 61747320 253d6574     event=%d state=%
   26014:	00000064                                d...

00026018 <dmConnStateTbl>:
   26018:	00001001 00002002 00000000 00000000     ..... ..........
   26028:	00002303 00000000 00010000 00011104     .#..............
   26038:	00010001 00010001 02030300 00010300     ................
   26048:	00010001 21000002 00020002 00020002     .......!........
   26058:	24000002 24002303 00020002 00030002     ...$.#.$........
   26068:	00030104 22031203 25031303 00030003     ......."...%....
   26078:	05030400 05030003 00040004 00040004     ................
   26088:	00040004 04000004 04000104 00040004     ................
   26098:	00000004 65446d64 73615076 74764573     ....dmDevPassEvt
   260a8:	65446f54 69725076 65203a76 746e6576     ToDevPriv: event
   260b8:	6425203a 6170202c 3a6d6172 2c642520     : %d, param: %d,
   260c8:	76646120 646e6148 203a656c 00006425      advHandle: %d..

000260d8 <dmDevFcnIf>:
   260d8:	0001c539 0001c39d 0001c3d9              9...........

000260e4 <dmEvtCbackLen>:
   260e4:	00040004 000c0004 00040004 0024001c     ..............$.
   260f4:	000e000a 00040006 00040006 00220006     ..............".
   26104:	00080010 00240006 00140064 00040006     ......$.d.......
   26114:	000a000a 00060006 000c0006 0006000c     ................
   26124:	000e000e 00060008 0006000a 0008000a     ................
   26134:	000c000a 00040004 00060024 00160006     ........$.......
   26144:	00060016 001a001a 00080008 00100010     ................
   26154:	001c000e 0008001c 00080008 00080008     ................
   26164:	00080008 000a0008 00040008 00060006     ................

00026174 <dmFcnDefault>:
   26174:	0001c539 0001c53d 0001c53d              9...=...=...

00026180 <dmHciToIdTbl>:
   26180:	03030307 04020303 04040404 05050505     ................
   26190:	07070705 06060607 05060606 07040405     ................
   261a0:	04070407 04050504 09090904 00000202     ................
   261b0:	070b0b0b 00020002 0c0b010a 0d0d0d0c     ................
   261c0:	0d0d0d0d 0d100f0f                       ........

000261c8 <dmPrivAct>:
   261c8:	0001c835 0001c6cd 0001c715 0001c739     5...........9...
   261d8:	0001c74d 0001c751 0001c761 0001c8a1     M...Q...a.......
   261e8:	0001c699                                ....

000261ec <dmPrivFcnIf>:
   261ec:	0001c685 0001c76d 0001c671 78456d64     ....m...q...dmEx
   261fc:	61635374 6963486e 646e6148 3a72656c     tScanHciHandler:
   2620c:	65766520 203a746e 73206425 65746174      event: %d state
   2621c:	6425203a 00000000                       : %d....

00026224 <dmScanAct>:
   26224:	0001cd21 0001cf79 0001cd09              !...y.......

00026230 <dmScanFcnIf>:
   26230:	0001d0dd 0001cf9d 0001cd0d              ............

0002623c <dmScanAct>:
   2623c:	0001d255 0001d17d 0001d2d1              U...}.......

00026248 <dmScanFcnIf>:
   26248:	0001d13d 0001d199 0001d129              =.......)...

00026254 <dmSecFcnIf>:
   26254:	0001d389 0001d38d 0001d325              ........%...

00026260 <dmSecLescFcnIf>:
   26260:	0001c539 0001c53d 0001d525              9...=...%...

0002626c <gapLenAp>:
   2626c:	                                         ..

0002626e <gapLenApCh>:
   2626e:	                                         ..

00026270 <gapLenCar>:
   26270:	                                         ..

00026272 <gapLenCarCh>:
   26272:	                                         ..

00026274 <gapLenRpao>:
   26274:	                                         ..

00026276 <gapLenRpaoCh>:
   26276:	                                         ..

00026278 <gapLenSvc>:
   26278:	00000002                                ....

0002627c <gapList>:
   2627c:	000259c4 00026304 00026278 01000002     .Y...c..xb......
   2628c:	000259ac 000262ec 0002626e 01000005     .Y...b..nb......
   2629c:	000259a4 10007140 0002626c 01000002     .Y..@q..lb......
   262ac:	000259ac 000262f4 00026272 01000005     .Y...b..rb......
   262bc:	000259a8 10007144 00026270 01000001     .Y..Dq..pb......
   262cc:	000259ac 000262fc 00026276 01000005     .Y...b..vb......
   262dc:	000259c8 10007148 00026274 01000001     .Y..Hq..tb......

000262ec <gapValApCh>:
   262ec:	01000502 0000002a                       ....*...

000262f4 <gapValCarCh>:
   262f4:	a6000702 0000002a                       ....*...

000262fc <gapValRpaoCh>:
   262fc:	c9000902 0000002a                       ....*...

00026304 <gapValSvc>:
   26304:	                                         ..

00026306 <gattLenCsf>:
   26306:	                                         ..

00026308 <gattLenCsfCh>:
   26308:	                                         ..

0002630a <gattLenDbh>:
   2630a:	                                         ..

0002630c <gattLenDbhCh>:
   2630c:	                                         ..

0002630e <gattLenSc>:
   2630e:	                                         ..

00026310 <gattLenScCh>:
   26310:	                                         ..

00026312 <gattLenScChCcc>:
   26312:	                                         ..

00026314 <gattLenSvc>:
   26314:	00000002                                ....

00026318 <gattList>:
   26318:	000259c4 000263b4 00026314 01000002     .Y...c...c......
   26328:	000259ac 000263ac 00026310 01000005     .Y...c...c......
   26338:	000259cc 000263a8 0002630e 00000004     .Y...c...c......
   26348:	000259b0 10007160 00026312 11200002     .Y..`q...c.... .
   26358:	000259ac 00026398 00026308 01000005     .Y...c...c......
   26368:	000259b8 1000714c 00026306 11060001     .Y..Lq...c......
   26378:	000259ac 000263a0 0002630c 01000005     .Y...c...c......
   26388:	000259bc 10007150 0002630a 01040010     .Y..Pq...c......

00026398 <gattValCsfCh>:
   26398:	29001502 0000002b                       ...)+...

000263a0 <gattValDbhCh>:
   263a0:	2a001702 0000002b                       ...*+...

000263a8 <gattValSc>:
   263a8:	ffff0001                                ....

000263ac <gattValScCh>:
   263ac:	05001220 0000002a                        ...*...

000263b4 <gattValSvc>:
   263b4:	00001801 20726d54 00637653 0a0a0a0a     ....Tmr Svc.....
   263c4:	0a0a0a0a 0a0a0a0a 0a0a0a0a 00000a0a     ................
   263d4:	63747441 63736944 76726553 43656369     AttcDiscServiceC
   263e4:	206c706d 74617473 30207375 32302578     mpl status 0x%02
   263f4:	00000078 63747441 63736944 72616843     x...AttcDiscChar
   26404:	6c706d43 61747320 20737574 30257830     Cmpl status 0x%0
   26414:	00007832 63747441 63736944 666e6f43     2x..AttcDiscConf
   26424:	6d436769 73206c70 75746174 78302073     igCmpl status 0x
   26434:	78323025 00000000 44707041 43637369     %02x....AppDiscC
   26444:	6c706d6f 20657465 6e6e6f63 253a6449     omplete connId:%
   26454:	74732064 73757461 2578303a 00783230     d status:0x%02x.
   26464:	20707041 20746f67 20747665 00006425     App got evt %d..

00026474 <appReqActCfg>:
   26474:	00000000 6e616353 73657220 73746c75     ....Scan results
   26484:	6425203a 00000000 61766e49 2064696c     : %d....Invalid 
   26494:	73204d44 6e6e6163 20676e69 65646f6d     DM scanning mode
   264a4:	6f6d203b 63206564 69666e6f 65727567     ; mode configure
   264b4:	73612064 67656c20 00796361 61766e49     d as legacy.Inva
   264c4:	2064696c 73204d44 6e6e6163 20676e69     lid DM scanning 
   264d4:	65646f6d 6f6d203b 63206564 69666e6f     mode; mode confi
   264e4:	65727567 73612064 74786520 65646e65     gured as extende
   264f4:	00000064                                d...

000264f8 <g_AM_BSP_GPIO_COM_UART_RX>:
   264f8:	00000000                                ....

000264fc <g_AM_BSP_GPIO_COM_UART_TX>:
   264fc:	00000000                                ....

00026500 <g_AM_BSP_GPIO_ITM_SWO>:
   26500:	00000002                                ....

00026504 <ccitt_table>:
   26504:	80050000 000a800f 001e801b 80110014     ................
   26514:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   26524:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   26534:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   26544:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   26554:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   26564:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   26574:	00968093 8099009c 808d0088 00828087     ................
   26584:	01868183 8189018c 819d0198 01928197     ................
   26594:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   265a4:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   265b4:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   265c4:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   265d4:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   265e4:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   265f4:	81150110 011a811f 010e810b 81010104     ................
   26604:	03068303 8309030c 831d0318 03128317     ................
   26614:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   26624:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   26634:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   26644:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   26654:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   26664:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   26674:	83950390 039a839f 038e838b 83810384     ................
   26684:	82850280 028a828f 029e829b 82910294     ................
   26694:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   266a4:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   266b4:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   266c4:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   266d4:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   266e4:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   266f4:	02168213 8219021c 820d0208 02028207     ................

00026704 <am_ble_buffer_patch_data>:
   26704:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   26714:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   26724:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   26734:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   26744:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   26780:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   26790:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   267a0:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   267b0:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   267c0:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   267d0:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   267e0:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   267f0:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   26800:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   26810:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   26820:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   26830:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   26840:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   26850:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   26860:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   26870:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   26880:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   26890:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   268a0:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   268b0:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   268c0:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   268d0:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   268e0:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   268f0:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   26900:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   26910:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   26920:	8f809011 9812900e 900d3008 30309812     .........0....00
   26930:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   26940:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   26950:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   26960:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   26970:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   26980:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   26990:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   269a0:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   269b0:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   269c0:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   269d0:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   269e0:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   269f0:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   26a10:	00000021 00000000 00000001 00000000     !...............
   26a20:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   26a30:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   26a40:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   26a50:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   26a60:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   26a70:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   26a80:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   26a90:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   26aa0:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   26ab0:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   26ac0:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   26ad0:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   26ae0:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   26af0:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   26b00:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   26b10:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   26b20:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   26b30:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   26b40:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   26b50:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   26b60:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   26b70:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   26b80:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   26b90:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   26ba0:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   26bb0:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   26bc0:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   26bd0:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   26be0:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   26bf0:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   26c00:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   26c10:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   26c20:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   26c30:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   26c40:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   26c50:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   26c60:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   26c70:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   26c80:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   26c90:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   26ca0:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   26cb0:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   26cc0:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   26cd0:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   26ce0:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   26cf0:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   26d00:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   26d10:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   26d20:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   26d30:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   26d40:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   26d50:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   26d60:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   26d70:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   26d80:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   26d90:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   26da0:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   26db0:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   26dc0:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   26dd0:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   26de0:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   26df0:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   26e00:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   26e10:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   26e20:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   26e30:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   26e40:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   26e50:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   26e60:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   26e70:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   26e80:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   26e90:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   26ea0:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   26eb0:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   26ec0:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   26ed0:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   26ee0:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   26ef0:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   26f00:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   26f10:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   26f20:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   26f30:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   26f40:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   26f50:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   26f60:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   26f70:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   26f80:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   26f90:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   26fa0:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   26fb0:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   26fc0:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   26fd0:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   26fe0:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   26ff0:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   27000:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   27010:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   27020:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   27030:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   27040:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   27050:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   27060:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   27070:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   27080:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   27090:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   270a0:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   270b0:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   270c0:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   270d0:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   270e0:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   270f0:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   27100:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   27110:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   27120:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   27130:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   27140:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   27150:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   27160:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   27170:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   27180:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   27190:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   271a0:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   271b0:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   271c0:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   271d0:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   271e0:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   271f0:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   27200:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   27210:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   27220:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   27230:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   27240:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   27250:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   27260:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   27270:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   27280:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   27290:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   272a0:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   272b0:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   272c0:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   272d0:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   272e0:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   272f0:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   27300:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   27310:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   27320:	00010341 50804000 000093a5 00000466     A....@.P....f...
   27330:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   27340:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   27350:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   27360:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   27370:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   27380:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   27390:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   273a0:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   273b0:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   273c0:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   273d0:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   273e0:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   273f0:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   27400:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   27410:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   27420:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   27430:	00004770 20006780 20006054              pG...g. T`. 

0002743c <am_ble_performance_copy_patch_data>:
   2743c:	006e1100 00000400 00000000 01c50101     ..n.............
   2744c:	00000039 00000000 00000000 00000000     9...............
   2745c:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   2746c:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   2747c:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   2748c:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   2749c:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   274ac:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   274bc:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   274cc:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   274dc:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   274ec:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   274fc:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   2750c:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   2751c:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   2752c:	f000e00a e007fb94 b2c09801 fac7f000     ................
   2753c:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   2754c:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   2755c:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   2756c:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   2757c:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   2758c:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   2759c:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   275ac:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   275bc:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   275cc:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   275dc:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   275ec:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   275fc:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   2760c:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   2761c:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   2762c:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   2763c:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   2764c:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   2765c:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   2766c:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   2767c:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   2768c:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   2769c:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   276ac:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   276bc:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   276cc:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   276dc:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   276ec:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   276fc:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   2770c:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   2771c:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   2772c:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   2773c:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   2774c:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   2775c:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   2776c:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   2777c:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   2778c:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   2779c:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   277ac:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   277bc:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   277cc:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   277dc:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   277ec:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   277fc:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   2780c:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   2781c:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   2782c:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   2783c:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   2784c:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   2785c:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   2786c:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   2787c:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   2788c:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   2789c:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   278ac:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   278bc:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   278cc:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   278dc:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   278ec:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   278fc:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   2790c:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   2791c:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   2792c:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   2793c:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   2794c:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   2795c:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   2796c:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   2797c:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   2798c:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   2799c:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   279ac:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   279bc:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   279cc:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   279dc:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   279ec:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   279fc:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   27a0c:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   27a1c:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   27a2c:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   27a3c:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   27a4c:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   27a5c:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   27a6c:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   27a7c:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   27a8c:	00400000 00804580 021e4580 00030000     ..@..E...E......
   27a9c:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   27aac:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   27abc:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   27acc:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   27adc:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   27aec:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   27afc:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   27b0c:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   27b1c:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   27b2c:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   27b3c:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   27b4c:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   27b5c:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   27b6c:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   27b7c:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   27b8c:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   27b9c:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   27bac:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   27bbc:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   27bcc:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   27bdc:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   27bec:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   27bfc:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   27c0c:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   27c1c:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   27c2c:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   27c3c:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   27c4c:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   27c5c:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   27c6c:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   27c7c:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   27c8c:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   27c9c:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   27cac:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   27cbc:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   27ccc:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   27cdc:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   27cec:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   27cfc:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   27d0c:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   27d1c:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   27d2c:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   27d3c:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   27d4c:	00000001                                ....

00027d50 <am_hal_ble_num_default_patches>:
   27d50:	00000003                                ....

00027d54 <am_ble_buffer_patch_data_b0>:
   27d54:	04182200 000003ff 00077584 00077d73     .".......u..s}..
   27d64:	00078575 00078b17 000795a9 00079b18     u...............
   27d74:	0007a32d 0007acc5 0007b2f4 0007b9ff     -...............
	...
   27db4:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   27dc4:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   27dd4:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   27de4:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   27df4:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   27e04:	20003e01 7cca4e23 6ac96875 d01d2a00     .>. #N.|uh.j.*..
   27e14:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   27e24:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   27e34:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   27e44:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   27e54:	2000682c 20006e0c 47084900 20003e31     ,h. .n. .I.G1>. 
   27e64:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   27e74:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   27e84:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   27e94:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   27ea4:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   27eb4:	00000021 00000000 00000001 00000000     !...............
   27ec4:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   27ed4:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   27ee4:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   27ef4:	30286928 8d013040 1a409800 b280492a     (i(0@0....@.*I..
   27f04:	bf00bf00 22054628 30631c71 fdacf7f3     ....(F."q.c0....
   27f14:	99006928 fbdff001 70602001 2003e001     (i....... `p... 
   27f24:	2f007060 7860d139 d2362806 44790001     `p./9.`x.(6...yD
   27f34:	bf00bf00 22568931 46315351 fe3ef001     ....1.V"QS1F..>.
   27f44:	70602001 2003e001 2f007060 7860d167     . `p... `p./g.`x
   27f54:	d2642806 44790001 18497909 185f448f     .(d...yD.yI..D_.
   27f64:	1207020c 98052128 fc54f7ff 213de057     ....(!....T.W.=!
   27f74:	20006878 20006dac 50800040 00002017     xh. .m. @..P. ..
   27f84:	00000801 5080407e 200068d8 47084900     ....~@.P.h. .I.G
   27f94:	20003e91 78c34311 021b7882 0412431a     .>. .C.x.x...C..
   27fa4:	4c1a430a 79426062 02127901 79c34311     .C.Lb`By.y...C.y
   27fb4:	d01b2e13 550e21a1 46692202 724e720a     .....!.U."iF.rNr
   27fc4:	4308210f 46019001 f7fe4638 4669f909     .!.C...F8F....iF
   27fd4:	b2e87a0a f7ffa902 3440ff55 8aa220ff     .z......U.@4. ..
   27fe4:	30034639 bf00bf00 bdf0b003 21a12216     9F.0.........".!
   27ff4:	00808820 30405838 07c07f00 2500d005      ...8X@0.......%
   28004:	8820e02f fd22f008 4668e02b 20017a01     /. ...".+.hF.z. 
   28014:	d0034388 28002000 e001d108 e7fa2001     .C... .(..... ..
   28024:	43882004 2000d004 d0032800 e018253a     . .C... .(..:%..
   28034:	6b114a08 4b086b52 d9014298 47702000     .J.kRk.K.B... pG
   28044:	43424341 0c900989 49041808 d9f64288     ACBC.......I.B..
   28054:	47702000 20007ec0 001e8480 03938700     . pG.~. ........
   28064:	4913b410 4a136b89 d9024290 2000bc10     ...I.k.J.B..... 
   28074:	4a114770 6813247d 02242214 42a34342     pG.J}$.h."$.BC.B
   28084:	4341d903 18100c08 4341e002 1a100c08     ..AC......AC....
   28094:	4288490a 2000d902 4770bc10 d0002800     .I.B... ..pG.(..
   280a4:	42a31e40 2800d2f8 bc10d0f6 47701e40     @..B...(....@.pG
   280b4:	20007ec0 000186a0 20006858 00030d40     .~. ....Xh. @...
   280c4:	f3efb4f0 b2cc8110 f3812101 78428810     .........!....Bx
   280d4:	02127801 78c34311 021b7882 0412431a     .x...C.x.x...C..
   280e4:	4d1d430a 7942606a 02127901 79c34311     .C.Mj`By.y...C.y
   280f4:	021b7982 0412431a 60aa430a 7a017a42     .y...C...C.`Bz.z
   28104:	43110212 7a827ac3 431a021b 430a0412     ...C.z.z...C...C
   28114:	7b4260ea 02127b01 7bc34311 021b7b82     .`B{.{...C.{.{..
   28124:	0412431a 612a430a 23103010 21004a0b     .C...C*a.0.#.J.!
   28134:	54565c46 b2891c49 d3f94299 6168206e     F\VTI....B..n ha
   28144:	60282001 21014806 f3847401 bcf08810     . (`.H.!.t......
   28154:	20104904 00004708 508000c0 5080406e     .I. .G.....Pn@.P
   28164:	200068d8 000159a1                       .h. .Y..

0002816c <am_hal_ble_num_default_patches_b0>:
   2816c:	00000003                                ....

00028170 <am_hal_cachectrl_defaults>:
   28170:	00000308                                ....

00028174 <g_AM_HAL_GPIO_DISABLE>:
   28174:	00000003                                ....

00028178 <g_AM_HAL_GPIO_OUTPUT>:
   28178:	00000403                                ....

0002817c <g_ui8Bit76Capabilities>:
   2817c:	02800101 80010180 80800101 80808080     ................
   2818c:	80808080 80808008 01800180 80808080     ................
   2819c:	80808080 01800402 01010401 80808080     ................
   281ac:	00000101                                ....

000281b0 <g_ui8Inpen>:
   281b0:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   281c0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   281d0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   281e0:	00003130                                01..

000281e4 <g_ui8NCEtable>:
   281e4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   281f4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   28204:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   28214:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   28224:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   28234:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   28244:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   28254:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   28264:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   28274:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   28284:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   28294:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   282a4:	32221202 43231303                       .."2..#C

000282ac <g_ui8nCEpins>:
   282ac:	02070707 00080802 01020202 01010101     ................
   282bc:	01010101 01010101 01010101 01010101     ................
   282cc:	01010101 08010101 01010008 01010101     ................
   282dc:	00000101                                ....

000282e0 <g_am_hal_mcuctrl_flash_size>:
   282e0:	00004000 00008000 00010000 00020000     .@..............
   282f0:	00040000 00080000 00100000 00200000     .............. .
   28300:	00180000 00000000 00000000 00000000     ................
	...

00028320 <g_am_hal_mcuctrl_sram_size>:
   28320:	00004000 00008000 00010000 00020000     .@..............
   28330:	00040000 00080000 00100000 00060000     ................
   28340:	000c0000 00000000 00000000 00000000     ................
	...

00028360 <am_hal_pwrctrl_peripheral_control>:
	...
   2836c:	00000001 00000004 00000004 00000002     ................
   2837c:	00000008 00000008 00000004 00000008     ................
   2838c:	00000008 00000008 00000008 00000008     ................
   2839c:	00000010 00000010 00000010 00000020     ............ ...
   283ac:	00000010 00000010 00000040 00000010     ........@.......
   283bc:	00000010 00000080 00000004 00000004     ................
   283cc:	00000100 00000004 00000004 00000200     ................
   283dc:	00000020 00000020 00000400 00000004      ... ...........
   283ec:	00000004 00000800 00000040 00000040     ........@...@...
   283fc:	00001000 00000080 00000080 00002000     ............. ..
   2840c:	00000100 00000100                       ........

00028414 <CSWTCH.20>:
   28414:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
