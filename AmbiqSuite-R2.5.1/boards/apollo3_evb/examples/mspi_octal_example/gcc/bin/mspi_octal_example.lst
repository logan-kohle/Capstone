
bin/mspi_octal_example.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 3d e3 00 00 a5 e3 00 00 a5 c6 00 00     ....=...........
    c010:	a7 e3 00 00 a7 e3 00 00 a7 e3 00 00 00 00 00 00     ................
	...
    c02c:	a9 e3 00 00 a9 e3 00 00 00 00 00 00 a9 e3 00 00     ................
    c03c:	a9 e3 00 00 a9 e3 00 00 a9 e3 00 00 a9 e3 00 00     ................
    c04c:	a9 e3 00 00 a9 e3 00 00 a9 e3 00 00 a9 e3 00 00     ................
    c05c:	a9 e3 00 00 a9 e3 00 00 a9 e3 00 00 a9 e3 00 00     ................
    c06c:	a9 e3 00 00 a9 e3 00 00 a9 e3 00 00 a9 e3 00 00     ................
    c07c:	a9 e3 00 00 a9 e3 00 00 a9 e3 00 00 a9 e3 00 00     ................
    c08c:	a9 e3 00 00 a9 e3 00 00 a9 e3 00 00 a9 e3 00 00     ................
    c09c:	a9 e3 00 00 a9 e3 00 00 a9 e3 00 00 a9 e3 00 00     ................
    c0ac:	a9 e3 00 00 a9 e3 00 00 a9 e3 00 00 a9 e3 00 00     ................
    c0bc:	a9 e3 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <memcpy>:
    c1a0:	4684      	mov	ip, r0
    c1a2:	ea41 0300 	orr.w	r3, r1, r0
    c1a6:	f013 0303 	ands.w	r3, r3, #3
    c1aa:	d16d      	bne.n	c288 <memcpy+0xe8>
    c1ac:	3a40      	subs	r2, #64	; 0x40
    c1ae:	d341      	bcc.n	c234 <memcpy+0x94>
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1bc:	f840 3b04 	str.w	r3, [r0], #4
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1cc:	f840 3b04 	str.w	r3, [r0], #4
    c1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1d4:	f840 3b04 	str.w	r3, [r0], #4
    c1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1dc:	f840 3b04 	str.w	r3, [r0], #4
    c1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1e4:	f840 3b04 	str.w	r3, [r0], #4
    c1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ec:	f840 3b04 	str.w	r3, [r0], #4
    c1f0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1f4:	f840 3b04 	str.w	r3, [r0], #4
    c1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1fc:	f840 3b04 	str.w	r3, [r0], #4
    c200:	f851 3b04 	ldr.w	r3, [r1], #4
    c204:	f840 3b04 	str.w	r3, [r0], #4
    c208:	f851 3b04 	ldr.w	r3, [r1], #4
    c20c:	f840 3b04 	str.w	r3, [r0], #4
    c210:	f851 3b04 	ldr.w	r3, [r1], #4
    c214:	f840 3b04 	str.w	r3, [r0], #4
    c218:	f851 3b04 	ldr.w	r3, [r1], #4
    c21c:	f840 3b04 	str.w	r3, [r0], #4
    c220:	f851 3b04 	ldr.w	r3, [r1], #4
    c224:	f840 3b04 	str.w	r3, [r0], #4
    c228:	f851 3b04 	ldr.w	r3, [r1], #4
    c22c:	f840 3b04 	str.w	r3, [r0], #4
    c230:	3a40      	subs	r2, #64	; 0x40
    c232:	d2bd      	bcs.n	c1b0 <memcpy+0x10>
    c234:	3230      	adds	r2, #48	; 0x30
    c236:	d311      	bcc.n	c25c <memcpy+0xbc>
    c238:	f851 3b04 	ldr.w	r3, [r1], #4
    c23c:	f840 3b04 	str.w	r3, [r0], #4
    c240:	f851 3b04 	ldr.w	r3, [r1], #4
    c244:	f840 3b04 	str.w	r3, [r0], #4
    c248:	f851 3b04 	ldr.w	r3, [r1], #4
    c24c:	f840 3b04 	str.w	r3, [r0], #4
    c250:	f851 3b04 	ldr.w	r3, [r1], #4
    c254:	f840 3b04 	str.w	r3, [r0], #4
    c258:	3a10      	subs	r2, #16
    c25a:	d2ed      	bcs.n	c238 <memcpy+0x98>
    c25c:	320c      	adds	r2, #12
    c25e:	d305      	bcc.n	c26c <memcpy+0xcc>
    c260:	f851 3b04 	ldr.w	r3, [r1], #4
    c264:	f840 3b04 	str.w	r3, [r0], #4
    c268:	3a04      	subs	r2, #4
    c26a:	d2f9      	bcs.n	c260 <memcpy+0xc0>
    c26c:	3204      	adds	r2, #4
    c26e:	d008      	beq.n	c282 <memcpy+0xe2>
    c270:	07d2      	lsls	r2, r2, #31
    c272:	bf1c      	itt	ne
    c274:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c278:	f800 3b01 	strbne.w	r3, [r0], #1
    c27c:	d301      	bcc.n	c282 <memcpy+0xe2>
    c27e:	880b      	ldrh	r3, [r1, #0]
    c280:	8003      	strh	r3, [r0, #0]
    c282:	4660      	mov	r0, ip
    c284:	4770      	bx	lr
    c286:	bf00      	nop
    c288:	2a08      	cmp	r2, #8
    c28a:	d313      	bcc.n	c2b4 <memcpy+0x114>
    c28c:	078b      	lsls	r3, r1, #30
    c28e:	d08d      	beq.n	c1ac <memcpy+0xc>
    c290:	f010 0303 	ands.w	r3, r0, #3
    c294:	d08a      	beq.n	c1ac <memcpy+0xc>
    c296:	f1c3 0304 	rsb	r3, r3, #4
    c29a:	1ad2      	subs	r2, r2, r3
    c29c:	07db      	lsls	r3, r3, #31
    c29e:	bf1c      	itt	ne
    c2a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c2a4:	f800 3b01 	strbne.w	r3, [r0], #1
    c2a8:	d380      	bcc.n	c1ac <memcpy+0xc>
    c2aa:	f831 3b02 	ldrh.w	r3, [r1], #2
    c2ae:	f820 3b02 	strh.w	r3, [r0], #2
    c2b2:	e77b      	b.n	c1ac <memcpy+0xc>
    c2b4:	3a04      	subs	r2, #4
    c2b6:	d3d9      	bcc.n	c26c <memcpy+0xcc>
    c2b8:	3a01      	subs	r2, #1
    c2ba:	f811 3b01 	ldrb.w	r3, [r1], #1
    c2be:	f800 3b01 	strb.w	r3, [r0], #1
    c2c2:	d2f9      	bcs.n	c2b8 <memcpy+0x118>
    c2c4:	780b      	ldrb	r3, [r1, #0]
    c2c6:	7003      	strb	r3, [r0, #0]
    c2c8:	784b      	ldrb	r3, [r1, #1]
    c2ca:	7043      	strb	r3, [r0, #1]
    c2cc:	788b      	ldrb	r3, [r1, #2]
    c2ce:	7083      	strb	r3, [r0, #2]
    c2d0:	4660      	mov	r0, ip
    c2d2:	4770      	bx	lr

0000c2d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c2d4:	b082      	sub	sp, #8
    c2d6:	4603      	mov	r3, r0
    c2d8:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c2dc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c2e0:	2b00      	cmp	r3, #0
    c2e2:	db0c      	blt.n	c2fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c2e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c2e8:	f003 021f 	and.w	r2, r3, #31
    c2ec:	4905      	ldr	r1, [pc, #20]	; (c304 <__NVIC_EnableIRQ+0x30>)
    c2ee:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c2f2:	095b      	lsrs	r3, r3, #5
    c2f4:	2001      	movs	r0, #1
    c2f6:	fa00 f202 	lsl.w	r2, r0, r2
    c2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c2fe:	bf00      	nop
    c300:	b002      	add	sp, #8
    c302:	4770      	bx	lr
    c304:	e000e100 	.word	0xe000e100

0000c308 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    c308:	b082      	sub	sp, #8
    c30a:	4603      	mov	r3, r0
    c30c:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c310:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c314:	2b00      	cmp	r3, #0
    c316:	db13      	blt.n	c340 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c31c:	f003 021f 	and.w	r2, r3, #31
    c320:	4909      	ldr	r1, [pc, #36]	; (c348 <__NVIC_DisableIRQ+0x40>)
    c322:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c326:	095b      	lsrs	r3, r3, #5
    c328:	2001      	movs	r0, #1
    c32a:	fa00 f202 	lsl.w	r2, r0, r2
    c32e:	3320      	adds	r3, #32
    c330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c334:	f3bf 8f4f 	dsb	sy
}
    c338:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    c33a:	f3bf 8f6f 	isb	sy
}
    c33e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
    c340:	bf00      	nop
    c342:	b002      	add	sp, #8
    c344:	4770      	bx	lr
    c346:	bf00      	nop
    c348:	e000e100 	.word	0xe000e100

0000c34c <xip_test_function>:
//*****************************************************************************
#if defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
static void xip_test_function(void)
{
    __asm
    c34c:	bf00      	nop
    c34e:	bf00      	nop
    c350:	bf00      	nop
    c352:	bf00      	nop
    c354:	bf00      	nop
    c356:	bf00      	nop
    c358:	bf00      	nop
    c35a:	bf00      	nop
    c35c:	bf00      	nop
    c35e:	bf00      	nop
    c360:	bf00      	nop
    c362:	bf00      	nop
    c364:	bf00      	nop
    c366:	bf00      	nop
    c368:	bf00      	nop
    c36a:	bf00      	nop
    c36c:	bf00      	nop
    c36e:	bf00      	nop
    c370:	bf00      	nop
    c372:	bf00      	nop
    c374:	bf00      	nop
    c376:	bf00      	nop
    c378:	bf00      	nop
    c37a:	bf00      	nop
    c37c:	bf00      	nop
    c37e:	bf00      	nop
    c380:	bf00      	nop
    c382:	bf00      	nop
    c384:	bf00      	nop
    c386:	bf00      	nop
    c388:	bf00      	nop
    c38a:	bf00      	nop
    c38c:	4770      	bx	lr
        "   nop\n"
        "   nop\n"
        "   nop\n"
        "   bx      lr\n"
    );
}
    c38e:	bf00      	nop

0000c390 <main>:
// MSPI Example Main.
//
//*****************************************************************************
int
main(void)
{
    c390:	b500      	push	{lr}
    c392:	b089      	sub	sp, #36	; 0x24
    uint32_t      ui32Status;
    uint32_t      funcAddr = ((uint32_t)&xip_test_function) & 0xFFFFFFFE;
    c394:	4b8a      	ldr	r3, [pc, #552]	; (c5c0 <main+0x230>)
    c396:	f023 0301 	bic.w	r3, r3, #1
    c39a:	9305      	str	r3, [sp, #20]

    //
    // Cast a pointer to the begining of the sector as the test function to call.
    //
    mspi_xip_test_function_t test_function = (mspi_xip_test_function_t)((MSPI_XIP_BASE_ADDRESS + (MSPI_TARGET_SECTOR << 16)) | 0x00000001);
    c39c:	4b89      	ldr	r3, [pc, #548]	; (c5c4 <main+0x234>)
    c39e:	9304      	str	r3, [sp, #16]

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c3a0:	2100      	movs	r1, #0
    c3a2:	2000      	movs	r0, #0
    c3a4:	f002 f854 	bl	e450 <am_hal_clkgen_control>
    //am_hal_cachectrl_enable();

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c3a8:	f004 f8fa 	bl	105a0 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c3ac:	f004 f918 	bl	105e0 <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c3b0:	f001 f9c8 	bl	d744 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Apollo3p Octal MSPI Example\n\n");
    c3b4:	4884      	ldr	r0, [pc, #528]	; (c5c8 <main+0x238>)
    c3b6:	f001 f9a5 	bl	d704 <am_util_stdio_printf>

    //
    // Configure the MSPI and Flash Device.
    //
    ui32Status = am_devices_mspi_atxp032_init(MSPI_TEST_MODULE, (void*)&MSPI_Flash_Config, &g_FlashHdl, &g_MSPIHdl);
    c3ba:	4b84      	ldr	r3, [pc, #528]	; (c5cc <main+0x23c>)
    c3bc:	4a84      	ldr	r2, [pc, #528]	; (c5d0 <main+0x240>)
    c3be:	4985      	ldr	r1, [pc, #532]	; (c5d4 <main+0x244>)
    c3c0:	2001      	movs	r0, #1
    c3c2:	f001 fadb 	bl	d97c <am_devices_mspi_atxp032_init>
    c3c6:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c3c8:	9b03      	ldr	r3, [sp, #12]
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d002      	beq.n	c3d4 <main+0x44>
    {
        am_util_stdio_printf("Failed to configure the MSPI and Flash Device correctly!\n");
    c3ce:	4882      	ldr	r0, [pc, #520]	; (c5d8 <main+0x248>)
    c3d0:	f001 f998 	bl	d704 <am_util_stdio_printf>
    }
    NVIC_EnableIRQ(mspi_interrupts[MSPI_TEST_MODULE]);
    c3d4:	2300      	movs	r3, #0
    c3d6:	4618      	mov	r0, r3
    c3d8:	f7ff ff7c 	bl	c2d4 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c3dc:	f002 f942 	bl	e664 <am_hal_interrupt_master_enable>

    //
    // Generate data into the Sector Buffer
    //
    for (uint32_t i = 0; i < MSPI_BUFFER_SIZE; i++)
    c3e0:	2300      	movs	r3, #0
    c3e2:	9307      	str	r3, [sp, #28]
    c3e4:	e009      	b.n	c3fa <main+0x6a>
    {
        g_SectorTXBuffer[i] = (i & 0xFF);
    c3e6:	9b07      	ldr	r3, [sp, #28]
    c3e8:	b2d9      	uxtb	r1, r3
    c3ea:	4a7c      	ldr	r2, [pc, #496]	; (c5dc <main+0x24c>)
    c3ec:	9b07      	ldr	r3, [sp, #28]
    c3ee:	4413      	add	r3, r2
    c3f0:	460a      	mov	r2, r1
    c3f2:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < MSPI_BUFFER_SIZE; i++)
    c3f4:	9b07      	ldr	r3, [sp, #28]
    c3f6:	3301      	adds	r3, #1
    c3f8:	9307      	str	r3, [sp, #28]
    c3fa:	9b07      	ldr	r3, [sp, #28]
    c3fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c400:	d3f1      	bcc.n	c3e6 <main+0x56>
    }

    //
    // Erase the target sector.
    //
    am_util_stdio_printf("Erasing Sector %d\n", MSPI_TARGET_SECTOR);
    c402:	2110      	movs	r1, #16
    c404:	4876      	ldr	r0, [pc, #472]	; (c5e0 <main+0x250>)
    c406:	f001 f97d 	bl	d704 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_atxp032_sector_erase(g_FlashHdl, MSPI_TARGET_SECTOR << 16);
    c40a:	4b71      	ldr	r3, [pc, #452]	; (c5d0 <main+0x240>)
    c40c:	681b      	ldr	r3, [r3, #0]
    c40e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    c412:	4618      	mov	r0, r3
    c414:	f001 fe66 	bl	e0e4 <am_devices_mspi_atxp032_sector_erase>
    c418:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c41a:	9b03      	ldr	r3, [sp, #12]
    c41c:	2b00      	cmp	r3, #0
    c41e:	d002      	beq.n	c426 <main+0x96>
    {
        am_util_stdio_printf("Failed to erase Flash Device sector!\n");
    c420:	4870      	ldr	r0, [pc, #448]	; (c5e4 <main+0x254>)
    c422:	f001 f96f 	bl	d704 <am_util_stdio_printf>
    }

    //
    // Make sure we aren't in XIP mode.
    //
    ui32Status = am_devices_mspi_atxp032_disable_xip(g_FlashHdl);
    c426:	4b6a      	ldr	r3, [pc, #424]	; (c5d0 <main+0x240>)
    c428:	681b      	ldr	r3, [r3, #0]
    c42a:	4618      	mov	r0, r3
    c42c:	f001 ff41 	bl	e2b2 <am_devices_mspi_atxp032_disable_xip>
    c430:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c432:	9b03      	ldr	r3, [sp, #12]
    c434:	2b00      	cmp	r3, #0
    c436:	d002      	beq.n	c43e <main+0xae>
    {
        am_util_stdio_printf("Failed to disable XIP mode in the MSPI!\n");
    c438:	486b      	ldr	r0, [pc, #428]	; (c5e8 <main+0x258>)
    c43a:	f001 f963 	bl	d704 <am_util_stdio_printf>
    }

    //
    // Write the TX buffer into the target sector.
    //
    am_util_stdio_printf("Writing %d Bytes to Sector %d\n", MSPI_BUFFER_SIZE, MSPI_TARGET_SECTOR);
    c43e:	2210      	movs	r2, #16
    c440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    c444:	4869      	ldr	r0, [pc, #420]	; (c5ec <main+0x25c>)
    c446:	f001 f95d 	bl	d704 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_atxp032_write(g_FlashHdl, g_SectorTXBuffer, MSPI_TARGET_SECTOR << 16, MSPI_BUFFER_SIZE, true);
    c44a:	4b61      	ldr	r3, [pc, #388]	; (c5d0 <main+0x240>)
    c44c:	6818      	ldr	r0, [r3, #0]
    c44e:	2301      	movs	r3, #1
    c450:	9300      	str	r3, [sp, #0]
    c452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    c456:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    c45a:	4960      	ldr	r1, [pc, #384]	; (c5dc <main+0x24c>)
    c45c:	f001 fd44 	bl	dee8 <am_devices_mspi_atxp032_write>
    c460:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c462:	9b03      	ldr	r3, [sp, #12]
    c464:	2b00      	cmp	r3, #0
    c466:	d002      	beq.n	c46e <main+0xde>
    {
        am_util_stdio_printf("Failed to write buffer to Flash Device!\n");
    c468:	4861      	ldr	r0, [pc, #388]	; (c5f0 <main+0x260>)
    c46a:	f001 f94b 	bl	d704 <am_util_stdio_printf>
    }

    //
    // Read the data back into the RX buffer.
    //
    am_util_stdio_printf("Read %d Bytes from Sector %d\n", MSPI_BUFFER_SIZE, MSPI_TARGET_SECTOR);
    c46e:	2210      	movs	r2, #16
    c470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    c474:	485f      	ldr	r0, [pc, #380]	; (c5f4 <main+0x264>)
    c476:	f001 f945 	bl	d704 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_atxp032_read(g_FlashHdl, g_SectorRXBuffer, MSPI_TARGET_SECTOR << 16, MSPI_BUFFER_SIZE, true);
    c47a:	4b55      	ldr	r3, [pc, #340]	; (c5d0 <main+0x240>)
    c47c:	6818      	ldr	r0, [r3, #0]
    c47e:	2301      	movs	r3, #1
    c480:	9300      	str	r3, [sp, #0]
    c482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    c486:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    c48a:	495b      	ldr	r1, [pc, #364]	; (c5f8 <main+0x268>)
    c48c:	f001 fcc6 	bl	de1c <am_devices_mspi_atxp032_read>
    c490:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c492:	9b03      	ldr	r3, [sp, #12]
    c494:	2b00      	cmp	r3, #0
    c496:	d002      	beq.n	c49e <main+0x10e>
    {
        am_util_stdio_printf("Failed to read buffer to Flash Device!\n");
    c498:	4858      	ldr	r0, [pc, #352]	; (c5fc <main+0x26c>)
    c49a:	f001 f933 	bl	d704 <am_util_stdio_printf>
    }

    //
    // Compare the buffers
    //
    am_util_stdio_printf("Comparing the TX and RX Buffers\n");
    c49e:	4858      	ldr	r0, [pc, #352]	; (c600 <main+0x270>)
    c4a0:	f001 f930 	bl	d704 <am_util_stdio_printf>
    for (uint32_t i = 0; i < MSPI_BUFFER_SIZE; i++)
    c4a4:	2300      	movs	r3, #0
    c4a6:	9306      	str	r3, [sp, #24]
    c4a8:	e010      	b.n	c4cc <main+0x13c>
    {
        if (g_SectorRXBuffer[i] != g_SectorTXBuffer[i])
    c4aa:	4a53      	ldr	r2, [pc, #332]	; (c5f8 <main+0x268>)
    c4ac:	9b06      	ldr	r3, [sp, #24]
    c4ae:	4413      	add	r3, r2
    c4b0:	781a      	ldrb	r2, [r3, #0]
    c4b2:	494a      	ldr	r1, [pc, #296]	; (c5dc <main+0x24c>)
    c4b4:	9b06      	ldr	r3, [sp, #24]
    c4b6:	440b      	add	r3, r1
    c4b8:	781b      	ldrb	r3, [r3, #0]
    c4ba:	429a      	cmp	r2, r3
    c4bc:	d003      	beq.n	c4c6 <main+0x136>
        {
            am_util_stdio_printf("TX and RX buffers failed to compare!\n");
    c4be:	4851      	ldr	r0, [pc, #324]	; (c604 <main+0x274>)
    c4c0:	f001 f920 	bl	d704 <am_util_stdio_printf>
            break;
    c4c4:	e006      	b.n	c4d4 <main+0x144>
    for (uint32_t i = 0; i < MSPI_BUFFER_SIZE; i++)
    c4c6:	9b06      	ldr	r3, [sp, #24]
    c4c8:	3301      	adds	r3, #1
    c4ca:	9306      	str	r3, [sp, #24]
    c4cc:	9b06      	ldr	r3, [sp, #24]
    c4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c4d2:	d3ea      	bcc.n	c4aa <main+0x11a>
    }

    //
    // Erase the target sector.
    //
    am_util_stdio_printf("Erasing Sector %d\n", MSPI_TARGET_SECTOR);
    c4d4:	2110      	movs	r1, #16
    c4d6:	4842      	ldr	r0, [pc, #264]	; (c5e0 <main+0x250>)
    c4d8:	f001 f914 	bl	d704 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_atxp032_sector_erase(g_FlashHdl, MSPI_TARGET_SECTOR << 16);
    c4dc:	4b3c      	ldr	r3, [pc, #240]	; (c5d0 <main+0x240>)
    c4de:	681b      	ldr	r3, [r3, #0]
    c4e0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    c4e4:	4618      	mov	r0, r3
    c4e6:	f001 fdfd 	bl	e0e4 <am_devices_mspi_atxp032_sector_erase>
    c4ea:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c4ec:	9b03      	ldr	r3, [sp, #12]
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	d002      	beq.n	c4f8 <main+0x168>
    {
        am_util_stdio_printf("Failed to erase Flash Device sector!\n");
    c4f2:	483c      	ldr	r0, [pc, #240]	; (c5e4 <main+0x254>)
    c4f4:	f001 f906 	bl	d704 <am_util_stdio_printf>
    }

    //
    // Turn on scrambling operation.
    //
    am_util_stdio_printf("Putting the MSPI into Scrambling mode\n");
    c4f8:	4843      	ldr	r0, [pc, #268]	; (c608 <main+0x278>)
    c4fa:	f001 f903 	bl	d704 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_atxp032_enable_scrambling(g_FlashHdl);
    c4fe:	4b34      	ldr	r3, [pc, #208]	; (c5d0 <main+0x240>)
    c500:	681b      	ldr	r3, [r3, #0]
    c502:	4618      	mov	r0, r3
    c504:	f001 ff02 	bl	e30c <am_devices_mspi_atxp032_enable_scrambling>
    c508:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c50a:	9b03      	ldr	r3, [sp, #12]
    c50c:	2b00      	cmp	r3, #0
    c50e:	d002      	beq.n	c516 <main+0x186>
    {
        am_util_stdio_printf("Failed to enable MSPI scrambling!\n");
    c510:	483e      	ldr	r0, [pc, #248]	; (c60c <main+0x27c>)
    c512:	f001 f8f7 	bl	d704 <am_util_stdio_printf>
    }

    //
    // Write the executable function into the target sector.
    //
    am_util_stdio_printf("Writing Executable function of %d Bytes to Sector %d\n", MSPI_XIP_FUNCTION_SIZE, MSPI_TARGET_SECTOR);
    c516:	2210      	movs	r2, #16
    c518:	2148      	movs	r1, #72	; 0x48
    c51a:	483d      	ldr	r0, [pc, #244]	; (c610 <main+0x280>)
    c51c:	f001 f8f2 	bl	d704 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_atxp032_write(g_FlashHdl, (uint8_t *)funcAddr, MSPI_TARGET_SECTOR << 16, MSPI_XIP_FUNCTION_SIZE, true);
    c520:	4b2b      	ldr	r3, [pc, #172]	; (c5d0 <main+0x240>)
    c522:	6818      	ldr	r0, [r3, #0]
    c524:	9905      	ldr	r1, [sp, #20]
    c526:	2301      	movs	r3, #1
    c528:	9300      	str	r3, [sp, #0]
    c52a:	2348      	movs	r3, #72	; 0x48
    c52c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    c530:	f001 fcda 	bl	dee8 <am_devices_mspi_atxp032_write>
    c534:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c536:	9b03      	ldr	r3, [sp, #12]
    c538:	2b00      	cmp	r3, #0
    c53a:	d002      	beq.n	c542 <main+0x1b2>
    {
        am_util_stdio_printf("Failed to write executable function to Flash Device!\n");
    c53c:	4835      	ldr	r0, [pc, #212]	; (c614 <main+0x284>)
    c53e:	f001 f8e1 	bl	d704 <am_util_stdio_printf>
    }

    //
    // Set up for XIP operation.
    //
    am_util_stdio_printf("Putting the MSPI and External Flash into XIP mode\n");
    c542:	4835      	ldr	r0, [pc, #212]	; (c618 <main+0x288>)
    c544:	f001 f8de 	bl	d704 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_atxp032_enable_xip(g_FlashHdl);
    c548:	4b21      	ldr	r3, [pc, #132]	; (c5d0 <main+0x240>)
    c54a:	681b      	ldr	r3, [r3, #0]
    c54c:	4618      	mov	r0, r3
    c54e:	f001 fe99 	bl	e284 <am_devices_mspi_atxp032_enable_xip>
    c552:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c554:	9b03      	ldr	r3, [sp, #12]
    c556:	2b00      	cmp	r3, #0
    c558:	d002      	beq.n	c560 <main+0x1d0>
    {
        am_util_stdio_printf("Failed to put the MSPI into XIP mode!\n");
    c55a:	4830      	ldr	r0, [pc, #192]	; (c61c <main+0x28c>)
    c55c:	f001 f8d2 	bl	d704 <am_util_stdio_printf>
    }

    //
    // Execute a call to the test function in the sector.
    //
    am_util_stdio_printf("Jumping to function in External Flash\n");
    c560:	482f      	ldr	r0, [pc, #188]	; (c620 <main+0x290>)
    c562:	f001 f8cf 	bl	d704 <am_util_stdio_printf>
    test_function();
    c566:	9b04      	ldr	r3, [sp, #16]
    c568:	4798      	blx	r3
    am_util_stdio_printf("Returned from XIP call\n");
    c56a:	482e      	ldr	r0, [pc, #184]	; (c624 <main+0x294>)
    c56c:	f001 f8ca 	bl	d704 <am_util_stdio_printf>

    //
    // Shutdown XIP operation.
    //
    am_util_stdio_printf("Disabling the MSPI and External Flash from XIP mode\n");
    c570:	482d      	ldr	r0, [pc, #180]	; (c628 <main+0x298>)
    c572:	f001 f8c7 	bl	d704 <am_util_stdio_printf>
    ui32Status = am_devices_mspi_atxp032_disable_xip(g_FlashHdl);
    c576:	4b16      	ldr	r3, [pc, #88]	; (c5d0 <main+0x240>)
    c578:	681b      	ldr	r3, [r3, #0]
    c57a:	4618      	mov	r0, r3
    c57c:	f001 fe99 	bl	e2b2 <am_devices_mspi_atxp032_disable_xip>
    c580:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c582:	9b03      	ldr	r3, [sp, #12]
    c584:	2b00      	cmp	r3, #0
    c586:	d002      	beq.n	c58e <main+0x1fe>
    {
        am_util_stdio_printf("Failed to disable XIP mode in the MSPI!\n");
    c588:	4817      	ldr	r0, [pc, #92]	; (c5e8 <main+0x258>)
    c58a:	f001 f8bb 	bl	d704 <am_util_stdio_printf>
    }

    am_hal_interrupt_master_disable();
    c58e:	f002 f86d 	bl	e66c <am_hal_interrupt_master_disable>
    NVIC_DisableIRQ(mspi_interrupts[MSPI_TEST_MODULE]);
    c592:	2300      	movs	r3, #0
    c594:	4618      	mov	r0, r3
    c596:	f7ff feb7 	bl	c308 <__NVIC_DisableIRQ>
    //
    // Clean up the MSPI before exit.
    //
    ui32Status = am_devices_mspi_atxp032_deinit(g_FlashHdl);
    c59a:	4b0d      	ldr	r3, [pc, #52]	; (c5d0 <main+0x240>)
    c59c:	681b      	ldr	r3, [r3, #0]
    c59e:	4618      	mov	r0, r3
    c5a0:	f001 fbb8 	bl	dd14 <am_devices_mspi_atxp032_deinit>
    c5a4:	9003      	str	r0, [sp, #12]
    if (AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS != ui32Status)
    c5a6:	9b03      	ldr	r3, [sp, #12]
    c5a8:	2b00      	cmp	r3, #0
    c5aa:	d002      	beq.n	c5b2 <main+0x222>
    {
        am_util_stdio_printf("Failed to shutdown the MSPI and Flash Device!\n");
    c5ac:	481f      	ldr	r0, [pc, #124]	; (c62c <main+0x29c>)
    c5ae:	f001 f8a9 	bl	d704 <am_util_stdio_printf>
    }

    //
    //  End banner.
    //
    am_util_stdio_printf("Apollo3p MSPI Example Complete\n");
    c5b2:	481f      	ldr	r0, [pc, #124]	; (c630 <main+0x2a0>)
    c5b4:	f001 f8a6 	bl	d704 <am_util_stdio_printf>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c5b8:	2001      	movs	r0, #1
    c5ba:	f003 fc73 	bl	fea4 <am_hal_sysctrl_sleep>
    c5be:	e7fb      	b.n	c5b8 <main+0x228>
    c5c0:	0000c34d 	.word	0x0000c34d
    c5c4:	04100001 	.word	0x04100001
    c5c8:	00010b70 	.word	0x00010b70
    c5cc:	1000590c 	.word	0x1000590c
    c5d0:	10005910 	.word	0x10005910
    c5d4:	0001129c 	.word	0x0001129c
    c5d8:	00010b90 	.word	0x00010b90
    c5dc:	1000390c 	.word	0x1000390c
    c5e0:	00010bcc 	.word	0x00010bcc
    c5e4:	00010be0 	.word	0x00010be0
    c5e8:	00010c08 	.word	0x00010c08
    c5ec:	00010c34 	.word	0x00010c34
    c5f0:	00010c54 	.word	0x00010c54
    c5f4:	00010c80 	.word	0x00010c80
    c5f8:	1000490c 	.word	0x1000490c
    c5fc:	00010ca0 	.word	0x00010ca0
    c600:	00010cc8 	.word	0x00010cc8
    c604:	00010cec 	.word	0x00010cec
    c608:	00010d14 	.word	0x00010d14
    c60c:	00010d3c 	.word	0x00010d3c
    c610:	00010d60 	.word	0x00010d60
    c614:	00010d98 	.word	0x00010d98
    c618:	00010dd0 	.word	0x00010dd0
    c61c:	00010e04 	.word	0x00010e04
    c620:	00010e2c 	.word	0x00010e2c
    c624:	00010e54 	.word	0x00010e54
    c628:	00010e6c 	.word	0x00010e6c
    c62c:	00010ea4 	.word	0x00010ea4
    c630:	00010ed4 	.word	0x00010ed4

0000c634 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c634:	b500      	push	{lr}
    c636:	b089      	sub	sp, #36	; 0x24
    c638:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c63a:	ab03      	add	r3, sp, #12
    c63c:	4618      	mov	r0, r3
    c63e:	f001 ffa3 	bl	e588 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c642:	9b03      	ldr	r3, [sp, #12]
    c644:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c646:	9b07      	ldr	r3, [sp, #28]
    c648:	4a07      	ldr	r2, [pc, #28]	; (c668 <am_util_delay_ms+0x34>)
    c64a:	fba2 2303 	umull	r2, r3, r2, r3
    c64e:	099a      	lsrs	r2, r3, #6
    c650:	9b01      	ldr	r3, [sp, #4]
    c652:	fb02 f303 	mul.w	r3, r2, r3
    c656:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c658:	9806      	ldr	r0, [sp, #24]
    c65a:	f001 ffb3 	bl	e5c4 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c65e:	bf00      	nop
    c660:	b009      	add	sp, #36	; 0x24
    c662:	f85d fb04 	ldr.w	pc, [sp], #4
    c666:	bf00      	nop
    c668:	057619f1 	.word	0x057619f1

0000c66c <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    c66c:	b500      	push	{lr}
    c66e:	b089      	sub	sp, #36	; 0x24
    c670:	9001      	str	r0, [sp, #4]
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c672:	ab03      	add	r3, sp, #12
    c674:	4618      	mov	r0, r3
    c676:	f001 ff87 	bl	e588 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c67a:	9b03      	ldr	r3, [sp, #12]
    c67c:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    c67e:	9b07      	ldr	r3, [sp, #28]
    c680:	4a07      	ldr	r2, [pc, #28]	; (c6a0 <am_util_delay_us+0x34>)
    c682:	fba2 2303 	umull	r2, r3, r2, r3
    c686:	0c9a      	lsrs	r2, r3, #18
    c688:	9b01      	ldr	r3, [sp, #4]
    c68a:	fb02 f303 	mul.w	r3, r2, r3
    c68e:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c690:	9806      	ldr	r0, [sp, #24]
    c692:	f001 ff97 	bl	e5c4 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c696:	bf00      	nop
    c698:	b009      	add	sp, #36	; 0x24
    c69a:	f85d fb04 	ldr.w	pc, [sp], #4
    c69e:	bf00      	nop
    c6a0:	165e9f81 	.word	0x165e9f81

0000c6a4 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c6a4:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c6a6:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c6aa:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c6ac:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c6b0:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c6b4:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c6b8:	f000 f80a 	bl	c6d0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c6bc:	bd01      	pop	{r0, pc}
}
    c6be:	bf00      	nop
    c6c0:	4618      	mov	r0, r3

0000c6c2 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c6c2:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c6c4:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c6c6:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c6c8:	4770      	bx	lr
}
    c6ca:	bf00      	nop
    c6cc:	4618      	mov	r0, r3
	...

0000c6d0 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c6d0:	b500      	push	{lr}
    c6d2:	b097      	sub	sp, #92	; 0x5c
    c6d4:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c6d6:	ab03      	add	r3, sp, #12
    c6d8:	2200      	movs	r2, #0
    c6da:	601a      	str	r2, [r3, #0]
    c6dc:	605a      	str	r2, [r3, #4]
    c6de:	609a      	str	r2, [r3, #8]
    c6e0:	60da      	str	r2, [r3, #12]
    c6e2:	611a      	str	r2, [r3, #16]
    c6e4:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c6e6:	2300      	movs	r3, #0
    c6e8:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c6ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c6ec:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c6ee:	4ba4      	ldr	r3, [pc, #656]	; (c980 <am_util_faultisr_collect_data+0x2b0>)
    c6f0:	681b      	ldr	r3, [r3, #0]
    c6f2:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c6f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c6f6:	b2db      	uxtb	r3, r3
    c6f8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c6fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c6fe:	0a1b      	lsrs	r3, r3, #8
    c700:	b2db      	uxtb	r3, r3
    c702:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c708:	0c1b      	lsrs	r3, r3, #16
    c70a:	b29b      	uxth	r3, r3
    c70c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c710:	4b9c      	ldr	r3, [pc, #624]	; (c984 <am_util_faultisr_collect_data+0x2b4>)
    c712:	681b      	ldr	r3, [r3, #0]
    c714:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c716:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c71a:	b2db      	uxtb	r3, r3
    c71c:	f003 0302 	and.w	r3, r3, #2
    c720:	2b00      	cmp	r3, #0
    c722:	d005      	beq.n	c730 <am_util_faultisr_collect_data+0x60>
    c724:	9901      	ldr	r1, [sp, #4]
    c726:	2006      	movs	r0, #6
    c728:	f7ff ffcb 	bl	c6c2 <getStackedReg>
    c72c:	4603      	mov	r3, r0
    c72e:	e001      	b.n	c734 <am_util_faultisr_collect_data+0x64>
    c730:	f04f 33ff 	mov.w	r3, #4294967295
    c734:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c736:	9901      	ldr	r1, [sp, #4]
    c738:	2000      	movs	r0, #0
    c73a:	f7ff ffc2 	bl	c6c2 <getStackedReg>
    c73e:	4603      	mov	r3, r0
    c740:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c742:	9901      	ldr	r1, [sp, #4]
    c744:	2001      	movs	r0, #1
    c746:	f7ff ffbc 	bl	c6c2 <getStackedReg>
    c74a:	4603      	mov	r3, r0
    c74c:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c74e:	9901      	ldr	r1, [sp, #4]
    c750:	2002      	movs	r0, #2
    c752:	f7ff ffb6 	bl	c6c2 <getStackedReg>
    c756:	4603      	mov	r3, r0
    c758:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c75a:	9901      	ldr	r1, [sp, #4]
    c75c:	2003      	movs	r0, #3
    c75e:	f7ff ffb0 	bl	c6c2 <getStackedReg>
    c762:	4603      	mov	r3, r0
    c764:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c766:	9901      	ldr	r1, [sp, #4]
    c768:	2004      	movs	r0, #4
    c76a:	f7ff ffaa 	bl	c6c2 <getStackedReg>
    c76e:	4603      	mov	r3, r0
    c770:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c772:	9901      	ldr	r1, [sp, #4]
    c774:	2005      	movs	r0, #5
    c776:	f7ff ffa4 	bl	c6c2 <getStackedReg>
    c77a:	4603      	mov	r3, r0
    c77c:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c77e:	9901      	ldr	r1, [sp, #4]
    c780:	2006      	movs	r0, #6
    c782:	f7ff ff9e 	bl	c6c2 <getStackedReg>
    c786:	4603      	mov	r3, r0
    c788:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c78a:	9901      	ldr	r1, [sp, #4]
    c78c:	2007      	movs	r0, #7
    c78e:	f7ff ff98 	bl	c6c2 <getStackedReg>
    c792:	4603      	mov	r3, r0
    c794:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c796:	ab03      	add	r3, sp, #12
    c798:	4619      	mov	r1, r3
    c79a:	2002      	movs	r0, #2
    c79c:	f002 f830 	bl	e800 <am_hal_mcuctrl_info_get>
#ifdef AM_UTIL_FAULTISR_PRINT
    //
    // If printf has previously been initialized in the application, we should
    // be able to print out the fault information.
    //
    am_util_stdio_printf("Hard Fault stacked data:\n");
    c7a0:	4879      	ldr	r0, [pc, #484]	; (c988 <am_util_faultisr_collect_data+0x2b8>)
    c7a2:	f000 ffaf 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    R0  = 0x%08X\n", sFaultData.u32R0);
    c7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7a8:	4619      	mov	r1, r3
    c7aa:	4878      	ldr	r0, [pc, #480]	; (c98c <am_util_faultisr_collect_data+0x2bc>)
    c7ac:	f000 ffaa 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    R1  = 0x%08X\n", sFaultData.u32R1);
    c7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c7b2:	4619      	mov	r1, r3
    c7b4:	4876      	ldr	r0, [pc, #472]	; (c990 <am_util_faultisr_collect_data+0x2c0>)
    c7b6:	f000 ffa5 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    R2  = 0x%08X\n", sFaultData.u32R2);
    c7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7bc:	4619      	mov	r1, r3
    c7be:	4875      	ldr	r0, [pc, #468]	; (c994 <am_util_faultisr_collect_data+0x2c4>)
    c7c0:	f000 ffa0 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    R3  = 0x%08X\n", sFaultData.u32R3);
    c7c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c7c6:	4619      	mov	r1, r3
    c7c8:	4873      	ldr	r0, [pc, #460]	; (c998 <am_util_faultisr_collect_data+0x2c8>)
    c7ca:	f000 ff9b 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    R12 = 0x%08X\n", sFaultData.u32R12);
    c7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c7d0:	4619      	mov	r1, r3
    c7d2:	4872      	ldr	r0, [pc, #456]	; (c99c <am_util_faultisr_collect_data+0x2cc>)
    c7d4:	f000 ff96 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    LR  = 0x%08X\n", sFaultData.u32LR);
    c7d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c7da:	4619      	mov	r1, r3
    c7dc:	4870      	ldr	r0, [pc, #448]	; (c9a0 <am_util_faultisr_collect_data+0x2d0>)
    c7de:	f000 ff91 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    PC  = 0x%08X\n", sFaultData.u32PC);
    c7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7e4:	4619      	mov	r1, r3
    c7e6:	486f      	ldr	r0, [pc, #444]	; (c9a4 <am_util_faultisr_collect_data+0x2d4>)
    c7e8:	f000 ff8c 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    PSR = 0x%08X\n", sFaultData.u32PSR);
    c7ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c7ee:	4619      	mov	r1, r3
    c7f0:	486d      	ldr	r0, [pc, #436]	; (c9a8 <am_util_faultisr_collect_data+0x2d8>)
    c7f2:	f000 ff87 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("Other Hard Fault data:\n");
    c7f6:	486d      	ldr	r0, [pc, #436]	; (c9ac <am_util_faultisr_collect_data+0x2dc>)
    c7f8:	f000 ff84 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    Fault address = 0x%08X\n", sFaultData.u32FaultAddr);
    c7fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c7fe:	4619      	mov	r1, r3
    c800:	486b      	ldr	r0, [pc, #428]	; (c9b0 <am_util_faultisr_collect_data+0x2e0>)
    c802:	f000 ff7f 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    BFAR (Bus Fault Addr Reg) = 0x%08X\n", sFaultData.u32BFAR);
    c806:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c808:	4619      	mov	r1, r3
    c80a:	486a      	ldr	r0, [pc, #424]	; (c9b4 <am_util_faultisr_collect_data+0x2e4>)
    c80c:	f000 ff7a 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    MMSR (Mem Mgmt Fault Status Reg) = 0x%02X\n", sFaultData.u8MMSR);
    c810:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    c814:	b2db      	uxtb	r3, r3
    c816:	4619      	mov	r1, r3
    c818:	4867      	ldr	r0, [pc, #412]	; (c9b8 <am_util_faultisr_collect_data+0x2e8>)
    c81a:	f000 ff73 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    BFSR (Bus Fault Status Reg) = 0x%02X\n", sFaultData.u8BFSR);
    c81e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c822:	b2db      	uxtb	r3, r3
    c824:	4619      	mov	r1, r3
    c826:	4865      	ldr	r0, [pc, #404]	; (c9bc <am_util_faultisr_collect_data+0x2ec>)
    c828:	f000 ff6c 	bl	d704 <am_util_stdio_printf>
    am_util_stdio_printf("    UFSR (Usage Fault Status Reg) = 0x%04X\n", sFaultData.u16UFSR);
    c82c:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    c830:	b29b      	uxth	r3, r3
    c832:	4619      	mov	r1, r3
    c834:	4862      	ldr	r0, [pc, #392]	; (c9c0 <am_util_faultisr_collect_data+0x2f0>)
    c836:	f000 ff65 	bl	d704 <am_util_stdio_printf>

    //
    // Print out any bits set in the BFSR.
    //
    u32Mask = 0x80;
    c83a:	2380      	movs	r3, #128	; 0x80
    c83c:	9315      	str	r3, [sp, #84]	; 0x54
    while (u32Mask)
    c83e:	e07a      	b.n	c936 <am_util_faultisr_collect_data+0x266>
    {
        switch (sFaultData.u8BFSR & u32Mask)
    c840:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c844:	b2db      	uxtb	r3, r3
    c846:	461a      	mov	r2, r3
    c848:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c84a:	4013      	ands	r3, r2
    c84c:	2b80      	cmp	r3, #128	; 0x80
    c84e:	d04e      	beq.n	c8ee <am_util_faultisr_collect_data+0x21e>
    c850:	2b80      	cmp	r3, #128	; 0x80
    c852:	d86c      	bhi.n	c92e <am_util_faultisr_collect_data+0x25e>
    c854:	2b20      	cmp	r3, #32
    c856:	d847      	bhi.n	c8e8 <am_util_faultisr_collect_data+0x218>
    c858:	2b00      	cmp	r3, #0
    c85a:	d068      	beq.n	c92e <am_util_faultisr_collect_data+0x25e>
    c85c:	3b01      	subs	r3, #1
    c85e:	2b1f      	cmp	r3, #31
    c860:	d865      	bhi.n	c92e <am_util_faultisr_collect_data+0x25e>
    c862:	a201      	add	r2, pc, #4	; (adr r2, c868 <am_util_faultisr_collect_data+0x198>)
    c864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c868:	0000c927 	.word	0x0000c927
    c86c:	0000c91f 	.word	0x0000c91f
    c870:	0000c92f 	.word	0x0000c92f
    c874:	0000c917 	.word	0x0000c917
    c878:	0000c92f 	.word	0x0000c92f
    c87c:	0000c92f 	.word	0x0000c92f
    c880:	0000c92f 	.word	0x0000c92f
    c884:	0000c90f 	.word	0x0000c90f
    c888:	0000c92f 	.word	0x0000c92f
    c88c:	0000c92f 	.word	0x0000c92f
    c890:	0000c92f 	.word	0x0000c92f
    c894:	0000c92f 	.word	0x0000c92f
    c898:	0000c92f 	.word	0x0000c92f
    c89c:	0000c92f 	.word	0x0000c92f
    c8a0:	0000c92f 	.word	0x0000c92f
    c8a4:	0000c907 	.word	0x0000c907
    c8a8:	0000c92f 	.word	0x0000c92f
    c8ac:	0000c92f 	.word	0x0000c92f
    c8b0:	0000c92f 	.word	0x0000c92f
    c8b4:	0000c92f 	.word	0x0000c92f
    c8b8:	0000c92f 	.word	0x0000c92f
    c8bc:	0000c92f 	.word	0x0000c92f
    c8c0:	0000c92f 	.word	0x0000c92f
    c8c4:	0000c92f 	.word	0x0000c92f
    c8c8:	0000c92f 	.word	0x0000c92f
    c8cc:	0000c92f 	.word	0x0000c92f
    c8d0:	0000c92f 	.word	0x0000c92f
    c8d4:	0000c92f 	.word	0x0000c92f
    c8d8:	0000c92f 	.word	0x0000c92f
    c8dc:	0000c92f 	.word	0x0000c92f
    c8e0:	0000c92f 	.word	0x0000c92f
    c8e4:	0000c8ff 	.word	0x0000c8ff
    c8e8:	2b40      	cmp	r3, #64	; 0x40
    c8ea:	d004      	beq.n	c8f6 <am_util_faultisr_collect_data+0x226>
                break;
            case 0x01:
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
                break;
            default:
                break;
    c8ec:	e01f      	b.n	c92e <am_util_faultisr_collect_data+0x25e>
                am_util_stdio_printf("        BFSR bit7: BFARVALID\n");
    c8ee:	4835      	ldr	r0, [pc, #212]	; (c9c4 <am_util_faultisr_collect_data+0x2f4>)
    c8f0:	f000 ff08 	bl	d704 <am_util_stdio_printf>
                break;
    c8f4:	e01c      	b.n	c930 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit6: RESERVED\n");
    c8f6:	4834      	ldr	r0, [pc, #208]	; (c9c8 <am_util_faultisr_collect_data+0x2f8>)
    c8f8:	f000 ff04 	bl	d704 <am_util_stdio_printf>
                break;
    c8fc:	e018      	b.n	c930 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit5: LSPERR\n");
    c8fe:	4833      	ldr	r0, [pc, #204]	; (c9cc <am_util_faultisr_collect_data+0x2fc>)
    c900:	f000 ff00 	bl	d704 <am_util_stdio_printf>
                break;
    c904:	e014      	b.n	c930 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit4: STKERR\n");
    c906:	4832      	ldr	r0, [pc, #200]	; (c9d0 <am_util_faultisr_collect_data+0x300>)
    c908:	f000 fefc 	bl	d704 <am_util_stdio_printf>
                break;
    c90c:	e010      	b.n	c930 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit3: UNSTKERR\n");
    c90e:	4831      	ldr	r0, [pc, #196]	; (c9d4 <am_util_faultisr_collect_data+0x304>)
    c910:	f000 fef8 	bl	d704 <am_util_stdio_printf>
                break;
    c914:	e00c      	b.n	c930 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit2: IMPRECISERR\n");
    c916:	4830      	ldr	r0, [pc, #192]	; (c9d8 <am_util_faultisr_collect_data+0x308>)
    c918:	f000 fef4 	bl	d704 <am_util_stdio_printf>
                break;
    c91c:	e008      	b.n	c930 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit1: PRECISEERR\n");
    c91e:	482f      	ldr	r0, [pc, #188]	; (c9dc <am_util_faultisr_collect_data+0x30c>)
    c920:	f000 fef0 	bl	d704 <am_util_stdio_printf>
                break;
    c924:	e004      	b.n	c930 <am_util_faultisr_collect_data+0x260>
                am_util_stdio_printf("        BFSR bit0: IBUSERR\n");
    c926:	482e      	ldr	r0, [pc, #184]	; (c9e0 <am_util_faultisr_collect_data+0x310>)
    c928:	f000 feec 	bl	d704 <am_util_stdio_printf>
                break;
    c92c:	e000      	b.n	c930 <am_util_faultisr_collect_data+0x260>
                break;
    c92e:	bf00      	nop
        }
        u32Mask >>= 1;
    c930:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c932:	085b      	lsrs	r3, r3, #1
    c934:	9315      	str	r3, [sp, #84]	; 0x54
    while (u32Mask)
    c936:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c938:	2b00      	cmp	r3, #0
    c93a:	d181      	bne.n	c840 <am_util_faultisr_collect_data+0x170>
    }

    //
    // Print out any Apollo* Internal fault information.
    //
    am_util_stdio_printf("MCU Fault data:\n");
    c93c:	4829      	ldr	r0, [pc, #164]	; (c9e4 <am_util_faultisr_collect_data+0x314>)
    c93e:	f000 fee1 	bl	d704 <am_util_stdio_printf>
    if (sHalFaultData.bICODE)
    c942:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c946:	2b00      	cmp	r3, #0
    c948:	d004      	beq.n	c954 <am_util_faultisr_collect_data+0x284>
    {
      am_util_stdio_printf("   ICODE Fault Address: 0x%08X\n", sHalFaultData.ui32ICODE);
    c94a:	9b04      	ldr	r3, [sp, #16]
    c94c:	4619      	mov	r1, r3
    c94e:	4826      	ldr	r0, [pc, #152]	; (c9e8 <am_util_faultisr_collect_data+0x318>)
    c950:	f000 fed8 	bl	d704 <am_util_stdio_printf>
    }
    if (sHalFaultData.bDCODE)
    c954:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c958:	2b00      	cmp	r3, #0
    c95a:	d004      	beq.n	c966 <am_util_faultisr_collect_data+0x296>
    {
      am_util_stdio_printf("   DCODE Fault Address: 0x%08X\n", sHalFaultData.ui32DCODE);
    c95c:	9b06      	ldr	r3, [sp, #24]
    c95e:	4619      	mov	r1, r3
    c960:	4822      	ldr	r0, [pc, #136]	; (c9ec <am_util_faultisr_collect_data+0x31c>)
    c962:	f000 fecf 	bl	d704 <am_util_stdio_printf>
    }
    if (sHalFaultData.bSYS)
    c966:	f89d 301c 	ldrb.w	r3, [sp, #28]
    c96a:	2b00      	cmp	r3, #0
    c96c:	d004      	beq.n	c978 <am_util_faultisr_collect_data+0x2a8>
    {
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    c96e:	9b08      	ldr	r3, [sp, #32]
    c970:	4619      	mov	r1, r3
    c972:	481f      	ldr	r0, [pc, #124]	; (c9f0 <am_util_faultisr_collect_data+0x320>)
    c974:	f000 fec6 	bl	d704 <am_util_stdio_printf>
    }

#endif

    u32Mask = 0;
    c978:	2300      	movs	r3, #0
    c97a:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c97c:	e7fe      	b.n	c97c <am_util_faultisr_collect_data+0x2ac>
    c97e:	bf00      	nop
    c980:	e000ed28 	.word	0xe000ed28
    c984:	e000ed38 	.word	0xe000ed38
    c988:	00010ef4 	.word	0x00010ef4
    c98c:	00010f10 	.word	0x00010f10
    c990:	00010f24 	.word	0x00010f24
    c994:	00010f38 	.word	0x00010f38
    c998:	00010f4c 	.word	0x00010f4c
    c99c:	00010f60 	.word	0x00010f60
    c9a0:	00010f74 	.word	0x00010f74
    c9a4:	00010f88 	.word	0x00010f88
    c9a8:	00010f9c 	.word	0x00010f9c
    c9ac:	00010fb0 	.word	0x00010fb0
    c9b0:	00010fc8 	.word	0x00010fc8
    c9b4:	00010fe4 	.word	0x00010fe4
    c9b8:	0001100c 	.word	0x0001100c
    c9bc:	0001103c 	.word	0x0001103c
    c9c0:	00011068 	.word	0x00011068
    c9c4:	00011094 	.word	0x00011094
    c9c8:	000110b4 	.word	0x000110b4
    c9cc:	000110d4 	.word	0x000110d4
    c9d0:	000110f0 	.word	0x000110f0
    c9d4:	0001110c 	.word	0x0001110c
    c9d8:	0001112c 	.word	0x0001112c
    c9dc:	0001114c 	.word	0x0001114c
    c9e0:	0001116c 	.word	0x0001116c
    c9e4:	00011188 	.word	0x00011188
    c9e8:	0001119c 	.word	0x0001119c
    c9ec:	000111bc 	.word	0x000111bc
    c9f0:	000111dc 	.word	0x000111dc

0000c9f4 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c9f4:	b082      	sub	sp, #8
    c9f6:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c9f8:	4a02      	ldr	r2, [pc, #8]	; (ca04 <am_util_stdio_printf_init+0x10>)
    c9fa:	9b01      	ldr	r3, [sp, #4]
    c9fc:	6013      	str	r3, [r2, #0]
}
    c9fe:	bf00      	nop
    ca00:	b002      	add	sp, #8
    ca02:	4770      	bx	lr
    ca04:	10005914 	.word	0x10005914

0000ca08 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    ca08:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    ca0c:	b098      	sub	sp, #96	; 0x60
    ca0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    ca12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ca16:	f04f 0000 	mov.w	r0, #0
    ca1a:	f04f 0100 	mov.w	r1, #0
    ca1e:	0018      	movs	r0, r3
    ca20:	2100      	movs	r1, #0
    ca22:	ea50 0301 	orrs.w	r3, r0, r1
    ca26:	f000 80b0 	beq.w	cb8a <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    ca2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ca2e:	f04f 0400 	mov.w	r4, #0
    ca32:	f04f 0500 	mov.w	r5, #0
    ca36:	0854      	lsrs	r4, r2, #1
    ca38:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    ca3c:	085d      	lsrs	r5, r3, #1
    ca3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    ca42:	f04f 0000 	mov.w	r0, #0
    ca46:	f04f 0100 	mov.w	r1, #0
    ca4a:	0890      	lsrs	r0, r2, #2
    ca4c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    ca50:	0899      	lsrs	r1, r3, #2
    ca52:	eb14 0a00 	adds.w	sl, r4, r0
    ca56:	eb45 0b01 	adc.w	fp, r5, r1
    ca5a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    ca5e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ca62:	f04f 0000 	mov.w	r0, #0
    ca66:	f04f 0100 	mov.w	r1, #0
    ca6a:	0910      	lsrs	r0, r2, #4
    ca6c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    ca70:	0919      	lsrs	r1, r3, #4
    ca72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ca76:	1814      	adds	r4, r2, r0
    ca78:	9402      	str	r4, [sp, #8]
    ca7a:	414b      	adcs	r3, r1
    ca7c:	9303      	str	r3, [sp, #12]
    ca7e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    ca82:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    ca86:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ca8a:	f04f 0000 	mov.w	r0, #0
    ca8e:	f04f 0100 	mov.w	r1, #0
    ca92:	0a10      	lsrs	r0, r2, #8
    ca94:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    ca98:	0a19      	lsrs	r1, r3, #8
    ca9a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    ca9e:	1814      	adds	r4, r2, r0
    caa0:	9404      	str	r4, [sp, #16]
    caa2:	414b      	adcs	r3, r1
    caa4:	9305      	str	r3, [sp, #20]
    caa6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    caaa:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    caae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cab2:	f04f 0000 	mov.w	r0, #0
    cab6:	f04f 0100 	mov.w	r1, #0
    caba:	0c10      	lsrs	r0, r2, #16
    cabc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    cac0:	0c19      	lsrs	r1, r3, #16
    cac2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cac6:	1814      	adds	r4, r2, r0
    cac8:	9406      	str	r4, [sp, #24]
    caca:	414b      	adcs	r3, r1
    cacc:	9307      	str	r3, [sp, #28]
    cace:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    cad2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    cad6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cada:	f04f 0000 	mov.w	r0, #0
    cade:	f04f 0100 	mov.w	r1, #0
    cae2:	0018      	movs	r0, r3
    cae4:	2100      	movs	r1, #0
    cae6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    caea:	1814      	adds	r4, r2, r0
    caec:	9408      	str	r4, [sp, #32]
    caee:	414b      	adcs	r3, r1
    caf0:	9309      	str	r3, [sp, #36]	; 0x24
    caf2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    caf6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    cafa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cafe:	f04f 0200 	mov.w	r2, #0
    cb02:	f04f 0300 	mov.w	r3, #0
    cb06:	08c2      	lsrs	r2, r0, #3
    cb08:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    cb0c:	08cb      	lsrs	r3, r1, #3
    cb0e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    cb12:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    cb16:	4622      	mov	r2, r4
    cb18:	462b      	mov	r3, r5
    cb1a:	f04f 0000 	mov.w	r0, #0
    cb1e:	f04f 0100 	mov.w	r1, #0
    cb22:	0099      	lsls	r1, r3, #2
    cb24:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    cb28:	0090      	lsls	r0, r2, #2
    cb2a:	4602      	mov	r2, r0
    cb2c:	460b      	mov	r3, r1
    cb2e:	1916      	adds	r6, r2, r4
    cb30:	eb43 0705 	adc.w	r7, r3, r5
    cb34:	19b3      	adds	r3, r6, r6
    cb36:	930a      	str	r3, [sp, #40]	; 0x28
    cb38:	eb47 0307 	adc.w	r3, r7, r7
    cb3c:	930b      	str	r3, [sp, #44]	; 0x2c
    cb3e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    cb42:	4630      	mov	r0, r6
    cb44:	4639      	mov	r1, r7
    cb46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    cb4a:	1a14      	subs	r4, r2, r0
    cb4c:	940c      	str	r4, [sp, #48]	; 0x30
    cb4e:	eb63 0301 	sbc.w	r3, r3, r1
    cb52:	930d      	str	r3, [sp, #52]	; 0x34
    cb54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    cb58:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    cb5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    cb60:	f112 0806 	adds.w	r8, r2, #6
    cb64:	f143 0900 	adc.w	r9, r3, #0
    cb68:	f04f 0200 	mov.w	r2, #0
    cb6c:	f04f 0300 	mov.w	r3, #0
    cb70:	ea4f 1218 	mov.w	r2, r8, lsr #4
    cb74:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    cb78:	ea4f 1319 	mov.w	r3, r9, lsr #4
    cb7c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cb80:	1814      	adds	r4, r2, r0
    cb82:	9400      	str	r4, [sp, #0]
    cb84:	414b      	adcs	r3, r1
    cb86:	9301      	str	r3, [sp, #4]
    cb88:	e02a      	b.n	cbe0 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    cb8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb8c:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cb8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cb90:	085a      	lsrs	r2, r3, #1
    cb92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cb94:	089b      	lsrs	r3, r3, #2
    cb96:	4413      	add	r3, r2
    cb98:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    cb9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cb9c:	091b      	lsrs	r3, r3, #4
    cb9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cba0:	4413      	add	r3, r2
    cba2:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    cba4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cba6:	0a1b      	lsrs	r3, r3, #8
    cba8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cbaa:	4413      	add	r3, r2
    cbac:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    cbae:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cbb0:	0c1b      	lsrs	r3, r3, #16
    cbb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cbb4:	4413      	add	r3, r2
    cbb6:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    cbb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cbba:	08db      	lsrs	r3, r3, #3
    cbbc:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    cbbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cbc0:	4613      	mov	r3, r2
    cbc2:	009b      	lsls	r3, r3, #2
    cbc4:	4413      	add	r3, r2
    cbc6:	005b      	lsls	r3, r3, #1
    cbc8:	461a      	mov	r2, r3
    cbca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cbcc:	1a9b      	subs	r3, r3, r2
    cbce:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cbd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cbd2:	3306      	adds	r3, #6
    cbd4:	091a      	lsrs	r2, r3, #4
    cbd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cbd8:	4413      	add	r3, r2
    cbda:	2200      	movs	r2, #0
    cbdc:	9300      	str	r3, [sp, #0]
    cbde:	9201      	str	r2, [sp, #4]
    }
}
    cbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
    cbe4:	4610      	mov	r0, r2
    cbe6:	4619      	mov	r1, r3
    cbe8:	b018      	add	sp, #96	; 0x60
    cbea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    cbee:	4770      	bx	lr

0000cbf0 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    cbf0:	b500      	push	{lr}
    cbf2:	b085      	sub	sp, #20
    cbf4:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    cbf8:	9a00      	ldr	r2, [sp, #0]
    cbfa:	9b01      	ldr	r3, [sp, #4]
    cbfc:	4313      	orrs	r3, r2
    cbfe:	2b00      	cmp	r3, #0
    cc00:	bf0c      	ite	eq
    cc02:	2301      	moveq	r3, #1
    cc04:	2300      	movne	r3, #0
    cc06:	b2db      	uxtb	r3, r3
    cc08:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    cc0a:	e008      	b.n	cc1e <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    cc0c:	e9dd 0100 	ldrd	r0, r1, [sp]
    cc10:	f7ff fefa 	bl	ca08 <divu64_10>
    cc14:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    cc18:	9b03      	ldr	r3, [sp, #12]
    cc1a:	3301      	adds	r3, #1
    cc1c:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    cc1e:	e9dd 2300 	ldrd	r2, r3, [sp]
    cc22:	4313      	orrs	r3, r2
    cc24:	d1f2      	bne.n	cc0c <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    cc26:	9b03      	ldr	r3, [sp, #12]
}
    cc28:	4618      	mov	r0, r3
    cc2a:	b005      	add	sp, #20
    cc2c:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc30 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    cc30:	b530      	push	{r4, r5, lr}
    cc32:	b083      	sub	sp, #12
    cc34:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    cc38:	e9dd 2300 	ldrd	r2, r3, [sp]
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	da07      	bge.n	cc50 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    cc40:	e9dd 2300 	ldrd	r2, r3, [sp]
    cc44:	2100      	movs	r1, #0
    cc46:	4254      	negs	r4, r2
    cc48:	eb61 0503 	sbc.w	r5, r1, r3
    cc4c:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    cc50:	e9dd 2300 	ldrd	r2, r3, [sp]
    cc54:	4610      	mov	r0, r2
    cc56:	4619      	mov	r1, r3
    cc58:	f7ff ffca 	bl	cbf0 <ndigits_in_u64>
    cc5c:	4603      	mov	r3, r0
}
    cc5e:	4618      	mov	r0, r3
    cc60:	b003      	add	sp, #12
    cc62:	bd30      	pop	{r4, r5, pc}

0000cc64 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    cc64:	b084      	sub	sp, #16
    cc66:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    cc6a:	9a00      	ldr	r2, [sp, #0]
    cc6c:	9b01      	ldr	r3, [sp, #4]
    cc6e:	4313      	orrs	r3, r2
    cc70:	2b00      	cmp	r3, #0
    cc72:	bf0c      	ite	eq
    cc74:	2301      	moveq	r3, #1
    cc76:	2300      	movne	r3, #0
    cc78:	b2db      	uxtb	r3, r3
    cc7a:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    cc7c:	e00e      	b.n	cc9c <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    cc7e:	e9dd 0100 	ldrd	r0, r1, [sp]
    cc82:	f04f 0200 	mov.w	r2, #0
    cc86:	f04f 0300 	mov.w	r3, #0
    cc8a:	0902      	lsrs	r2, r0, #4
    cc8c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cc90:	090b      	lsrs	r3, r1, #4
    cc92:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    cc96:	9b03      	ldr	r3, [sp, #12]
    cc98:	3301      	adds	r3, #1
    cc9a:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    cc9c:	e9dd 2300 	ldrd	r2, r3, [sp]
    cca0:	4313      	orrs	r3, r2
    cca2:	d1ec      	bne.n	cc7e <ndigits_in_hex+0x1a>
    }

    return iDigits;
    cca4:	9b03      	ldr	r3, [sp, #12]
}
    cca6:	4618      	mov	r0, r3
    cca8:	b004      	add	sp, #16
    ccaa:	4770      	bx	lr

0000ccac <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    ccac:	b086      	sub	sp, #24
    ccae:	9001      	str	r0, [sp, #4]
    ccb0:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    ccb2:	2300      	movs	r3, #0
    ccb4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    ccb8:	2300      	movs	r3, #0
    ccba:	9304      	str	r3, [sp, #16]
    ccbc:	2300      	movs	r3, #0
    ccbe:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    ccc0:	9b01      	ldr	r3, [sp, #4]
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	2b2d      	cmp	r3, #45	; 0x2d
    ccc6:	d11c      	bne.n	cd02 <decstr_to_int+0x56>
    {
        bNeg = true;
    ccc8:	2301      	movs	r3, #1
    ccca:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    ccce:	9b01      	ldr	r3, [sp, #4]
    ccd0:	3301      	adds	r3, #1
    ccd2:	9301      	str	r3, [sp, #4]
        uCnt++;
    ccd4:	9b03      	ldr	r3, [sp, #12]
    ccd6:	3301      	adds	r3, #1
    ccd8:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccda:	e012      	b.n	cd02 <decstr_to_int+0x56>
    {
        ++uCnt;
    ccdc:	9b03      	ldr	r3, [sp, #12]
    ccde:	3301      	adds	r3, #1
    cce0:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    cce2:	9a04      	ldr	r2, [sp, #16]
    cce4:	4613      	mov	r3, r2
    cce6:	009b      	lsls	r3, r3, #2
    cce8:	4413      	add	r3, r2
    ccea:	005b      	lsls	r3, r3, #1
    ccec:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    ccee:	9b01      	ldr	r3, [sp, #4]
    ccf0:	781b      	ldrb	r3, [r3, #0]
    ccf2:	461a      	mov	r2, r3
    ccf4:	9b04      	ldr	r3, [sp, #16]
    ccf6:	4413      	add	r3, r2
    ccf8:	3b30      	subs	r3, #48	; 0x30
    ccfa:	9304      	str	r3, [sp, #16]
        pcStr++;
    ccfc:	9b01      	ldr	r3, [sp, #4]
    ccfe:	3301      	adds	r3, #1
    cd00:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd02:	9b01      	ldr	r3, [sp, #4]
    cd04:	781b      	ldrb	r3, [r3, #0]
    cd06:	2b2f      	cmp	r3, #47	; 0x2f
    cd08:	d903      	bls.n	cd12 <decstr_to_int+0x66>
    cd0a:	9b01      	ldr	r3, [sp, #4]
    cd0c:	781b      	ldrb	r3, [r3, #0]
    cd0e:	2b39      	cmp	r3, #57	; 0x39
    cd10:	d9e4      	bls.n	ccdc <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    cd12:	9b00      	ldr	r3, [sp, #0]
    cd14:	2b00      	cmp	r3, #0
    cd16:	d002      	beq.n	cd1e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    cd18:	9b00      	ldr	r3, [sp, #0]
    cd1a:	9a03      	ldr	r2, [sp, #12]
    cd1c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    cd1e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cd22:	2b00      	cmp	r3, #0
    cd24:	d002      	beq.n	cd2c <decstr_to_int+0x80>
    cd26:	9b04      	ldr	r3, [sp, #16]
    cd28:	425b      	negs	r3, r3
    cd2a:	e000      	b.n	cd2e <decstr_to_int+0x82>
    cd2c:	9b04      	ldr	r3, [sp, #16]
}
    cd2e:	4618      	mov	r0, r3
    cd30:	b006      	add	sp, #24
    cd32:	4770      	bx	lr

0000cd34 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    cd34:	b500      	push	{lr}
    cd36:	b091      	sub	sp, #68	; 0x44
    cd38:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cd3c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    cd3e:	2300      	movs	r3, #0
    cd40:	930f      	str	r3, [sp, #60]	; 0x3c
    cd42:	2300      	movs	r3, #0
    cd44:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    cd46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cd4a:	f7ff fe5d 	bl	ca08 <divu64_10>
    cd4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    cd52:	9902      	ldr	r1, [sp, #8]
    cd54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd56:	4613      	mov	r3, r2
    cd58:	009b      	lsls	r3, r3, #2
    cd5a:	4413      	add	r3, r2
    cd5c:	005b      	lsls	r3, r3, #1
    cd5e:	1acb      	subs	r3, r1, r3
    cd60:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    cd62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd64:	b2da      	uxtb	r2, r3
    cd66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cd68:	1c59      	adds	r1, r3, #1
    cd6a:	910f      	str	r1, [sp, #60]	; 0x3c
    cd6c:	3230      	adds	r2, #48	; 0x30
    cd6e:	b2d2      	uxtb	r2, r2
    cd70:	3340      	adds	r3, #64	; 0x40
    cd72:	446b      	add	r3, sp
    cd74:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    cd78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    cd7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    cd80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cd84:	4313      	orrs	r3, r2
    cd86:	d1de      	bne.n	cd46 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cd88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cd8a:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cd8c:	9b01      	ldr	r3, [sp, #4]
    cd8e:	2b00      	cmp	r3, #0
    cd90:	d010      	beq.n	cdb4 <uint64_to_str+0x80>
    {
        while ( ix-- )
    cd92:	e007      	b.n	cda4 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    cd94:	9b01      	ldr	r3, [sp, #4]
    cd96:	1c5a      	adds	r2, r3, #1
    cd98:	9201      	str	r2, [sp, #4]
    cd9a:	a904      	add	r1, sp, #16
    cd9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cd9e:	440a      	add	r2, r1
    cda0:	7812      	ldrb	r2, [r2, #0]
    cda2:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    cda4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cda6:	1e5a      	subs	r2, r3, #1
    cda8:	920f      	str	r2, [sp, #60]	; 0x3c
    cdaa:	2b00      	cmp	r3, #0
    cdac:	d1f2      	bne.n	cd94 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cdae:	9b01      	ldr	r3, [sp, #4]
    cdb0:	2200      	movs	r2, #0
    cdb2:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cdb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    cdb6:	4618      	mov	r0, r3
    cdb8:	b011      	add	sp, #68	; 0x44
    cdba:	f85d fb04 	ldr.w	pc, [sp], #4

0000cdbe <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    cdbe:	b08c      	sub	sp, #48	; 0x30
    cdc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cdc4:	9201      	str	r2, [sp, #4]
    cdc6:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    cdca:	2300      	movs	r3, #0
    cdcc:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cdce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cdd2:	4313      	orrs	r3, r2
    cdd4:	d135      	bne.n	ce42 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cdd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdd8:	1c5a      	adds	r2, r3, #1
    cdda:	920b      	str	r2, [sp, #44]	; 0x2c
    cddc:	3330      	adds	r3, #48	; 0x30
    cdde:	446b      	add	r3, sp
    cde0:	2230      	movs	r2, #48	; 0x30
    cde2:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cde6:	e02c      	b.n	ce42 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    cde8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cdec:	f003 030f 	and.w	r3, r3, #15
    cdf0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cdf4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cdf8:	2b09      	cmp	r3, #9
    cdfa:	d90b      	bls.n	ce14 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cdfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ce00:	2b00      	cmp	r3, #0
    ce02:	d001      	beq.n	ce08 <uint64_to_hexstr+0x4a>
    ce04:	2227      	movs	r2, #39	; 0x27
    ce06:	e000      	b.n	ce0a <uint64_to_hexstr+0x4c>
    ce08:	2207      	movs	r2, #7
    ce0a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    ce0e:	4413      	add	r3, r2
    ce10:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    ce14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce16:	1c5a      	adds	r2, r3, #1
    ce18:	920b      	str	r2, [sp, #44]	; 0x2c
    ce1a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    ce1e:	3230      	adds	r2, #48	; 0x30
    ce20:	b2d2      	uxtb	r2, r2
    ce22:	3330      	adds	r3, #48	; 0x30
    ce24:	446b      	add	r3, sp
    ce26:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    ce2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ce2e:	f04f 0200 	mov.w	r2, #0
    ce32:	f04f 0300 	mov.w	r3, #0
    ce36:	0902      	lsrs	r2, r0, #4
    ce38:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    ce3c:	090b      	lsrs	r3, r1, #4
    ce3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    ce42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ce46:	4313      	orrs	r3, r2
    ce48:	d1ce      	bne.n	cde8 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ce4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce4c:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    ce4e:	9b01      	ldr	r3, [sp, #4]
    ce50:	2b00      	cmp	r3, #0
    ce52:	d010      	beq.n	ce76 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    ce54:	e007      	b.n	ce66 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    ce56:	9b01      	ldr	r3, [sp, #4]
    ce58:	1c5a      	adds	r2, r3, #1
    ce5a:	9201      	str	r2, [sp, #4]
    ce5c:	a904      	add	r1, sp, #16
    ce5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ce60:	440a      	add	r2, r1
    ce62:	7812      	ldrb	r2, [r2, #0]
    ce64:	701a      	strb	r2, [r3, #0]
        while (ix--)
    ce66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce68:	1e5a      	subs	r2, r3, #1
    ce6a:	920b      	str	r2, [sp, #44]	; 0x2c
    ce6c:	2b00      	cmp	r3, #0
    ce6e:	d1f2      	bne.n	ce56 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    ce70:	9b01      	ldr	r3, [sp, #4]
    ce72:	2200      	movs	r2, #0
    ce74:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ce76:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    ce78:	4618      	mov	r0, r3
    ce7a:	b00c      	add	sp, #48	; 0x30
    ce7c:	4770      	bx	lr

0000ce7e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ce7e:	b084      	sub	sp, #16
    ce80:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    ce82:	2300      	movs	r3, #0
    ce84:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    ce86:	9b01      	ldr	r3, [sp, #4]
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d104      	bne.n	ce96 <simple_strlen+0x18>
    {
        return ui32RetVal;
    ce8c:	9b03      	ldr	r3, [sp, #12]
    ce8e:	e009      	b.n	cea4 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    ce90:	9b03      	ldr	r3, [sp, #12]
    ce92:	3301      	adds	r3, #1
    ce94:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    ce96:	9b01      	ldr	r3, [sp, #4]
    ce98:	1c5a      	adds	r2, r3, #1
    ce9a:	9201      	str	r2, [sp, #4]
    ce9c:	781b      	ldrb	r3, [r3, #0]
    ce9e:	2b00      	cmp	r3, #0
    cea0:	d1f6      	bne.n	ce90 <simple_strlen+0x12>
    }
    return ui32RetVal;
    cea2:	9b03      	ldr	r3, [sp, #12]
}
    cea4:	4618      	mov	r0, r3
    cea6:	b004      	add	sp, #16
    cea8:	4770      	bx	lr

0000ceaa <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    ceaa:	b086      	sub	sp, #24
    ceac:	9003      	str	r0, [sp, #12]
    ceae:	460b      	mov	r3, r1
    ceb0:	9201      	str	r2, [sp, #4]
    ceb2:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    ceb6:	2300      	movs	r3, #0
    ceb8:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    ceba:	9b01      	ldr	r3, [sp, #4]
    cebc:	2b00      	cmp	r3, #0
    cebe:	dc0d      	bgt.n	cedc <padbuffer+0x32>
    {
        return i32Cnt;
    cec0:	9b05      	ldr	r3, [sp, #20]
    cec2:	e011      	b.n	cee8 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cec4:	9b03      	ldr	r3, [sp, #12]
    cec6:	2b00      	cmp	r3, #0
    cec8:	d005      	beq.n	ced6 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    ceca:	9b03      	ldr	r3, [sp, #12]
    cecc:	1c5a      	adds	r2, r3, #1
    cece:	9203      	str	r2, [sp, #12]
    ced0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ced4:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    ced6:	9b05      	ldr	r3, [sp, #20]
    ced8:	3301      	adds	r3, #1
    ceda:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cedc:	9b01      	ldr	r3, [sp, #4]
    cede:	1e5a      	subs	r2, r3, #1
    cee0:	9201      	str	r2, [sp, #4]
    cee2:	2b00      	cmp	r3, #0
    cee4:	d1ee      	bne.n	cec4 <padbuffer+0x1a>
    }

    return i32Cnt;
    cee6:	9b05      	ldr	r3, [sp, #20]
}
    cee8:	4618      	mov	r0, r3
    ceea:	b006      	add	sp, #24
    ceec:	4770      	bx	lr
	...

0000cef0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cef2:	b08f      	sub	sp, #60	; 0x3c
    cef4:	ed8d 0a03 	vstr	s0, [sp, #12]
    cef8:	9002      	str	r0, [sp, #8]
    cefa:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cefc:	9b02      	ldr	r3, [sp, #8]
    cefe:	681b      	ldr	r3, [r3, #0]
    cf00:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cf02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf04:	2b03      	cmp	r3, #3
    cf06:	dc02      	bgt.n	cf0e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cf08:	f06f 0302 	mvn.w	r3, #2
    cf0c:	e0e9      	b.n	d0e2 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cf0e:	eddd 7a03 	vldr	s15, [sp, #12]
    cf12:	eef5 7a40 	vcmp.f32	s15, #0.0
    cf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cf1a:	d104      	bne.n	cf26 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cf1c:	9b02      	ldr	r3, [sp, #8]
    cf1e:	4a72      	ldr	r2, [pc, #456]	; (d0e8 <ftoa+0x1f8>)
    cf20:	601a      	str	r2, [r3, #0]
        return 3;
    cf22:	2303      	movs	r3, #3
    cf24:	e0dd      	b.n	d0e2 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cf26:	9b02      	ldr	r3, [sp, #8]
    cf28:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cf2a:	9b03      	ldr	r3, [sp, #12]
    cf2c:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cf2e:	9b04      	ldr	r3, [sp, #16]
    cf30:	15db      	asrs	r3, r3, #23
    cf32:	b2db      	uxtb	r3, r3
    cf34:	3b7f      	subs	r3, #127	; 0x7f
    cf36:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cf38:	9b04      	ldr	r3, [sp, #16]
    cf3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cf3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cf42:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cf44:	2300      	movs	r3, #0
    cf46:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cf48:	2300      	movs	r3, #0
    cf4a:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cf4c:	9b07      	ldr	r3, [sp, #28]
    cf4e:	2b1e      	cmp	r3, #30
    cf50:	dd02      	ble.n	cf58 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cf52:	f06f 0301 	mvn.w	r3, #1
    cf56:	e0c4      	b.n	d0e2 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cf58:	9b07      	ldr	r3, [sp, #28]
    cf5a:	f113 0f17 	cmn.w	r3, #23
    cf5e:	da02      	bge.n	cf66 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cf60:	f04f 33ff 	mov.w	r3, #4294967295
    cf64:	e0bd      	b.n	d0e2 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cf66:	9b07      	ldr	r3, [sp, #28]
    cf68:	2b16      	cmp	r3, #22
    cf6a:	dd06      	ble.n	cf7a <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cf6c:	9b07      	ldr	r3, [sp, #28]
    cf6e:	3b17      	subs	r3, #23
    cf70:	9a06      	ldr	r2, [sp, #24]
    cf72:	fa02 f303 	lsl.w	r3, r2, r3
    cf76:	930d      	str	r3, [sp, #52]	; 0x34
    cf78:	e01a      	b.n	cfb0 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cf7a:	9b07      	ldr	r3, [sp, #28]
    cf7c:	2b00      	cmp	r3, #0
    cf7e:	db0f      	blt.n	cfa0 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cf80:	9b07      	ldr	r3, [sp, #28]
    cf82:	f1c3 0317 	rsb	r3, r3, #23
    cf86:	9a06      	ldr	r2, [sp, #24]
    cf88:	fa42 f303 	asr.w	r3, r2, r3
    cf8c:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cf8e:	9b07      	ldr	r3, [sp, #28]
    cf90:	3301      	adds	r3, #1
    cf92:	9a06      	ldr	r2, [sp, #24]
    cf94:	fa02 f303 	lsl.w	r3, r2, r3
    cf98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cf9c:	930c      	str	r3, [sp, #48]	; 0x30
    cf9e:	e007      	b.n	cfb0 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cfa0:	9b06      	ldr	r3, [sp, #24]
    cfa2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cfa6:	9b07      	ldr	r3, [sp, #28]
    cfa8:	43db      	mvns	r3, r3
    cfaa:	fa42 f303 	asr.w	r3, r2, r3
    cfae:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cfb0:	9b04      	ldr	r3, [sp, #16]
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	da04      	bge.n	cfc0 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cfb6:	9b02      	ldr	r3, [sp, #8]
    cfb8:	1c5a      	adds	r2, r3, #1
    cfba:	9202      	str	r2, [sp, #8]
    cfbc:	222d      	movs	r2, #45	; 0x2d
    cfbe:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cfc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cfc2:	2b00      	cmp	r3, #0
    cfc4:	d105      	bne.n	cfd2 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cfc6:	9b02      	ldr	r3, [sp, #8]
    cfc8:	1c5a      	adds	r2, r3, #1
    cfca:	9202      	str	r2, [sp, #8]
    cfcc:	2230      	movs	r2, #48	; 0x30
    cfce:	701a      	strb	r2, [r3, #0]
    cfd0:	e023      	b.n	d01a <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cfd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cfd4:	2b00      	cmp	r3, #0
    cfd6:	dd09      	ble.n	cfec <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cfd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cfda:	17da      	asrs	r2, r3, #31
    cfdc:	461e      	mov	r6, r3
    cfde:	4617      	mov	r7, r2
    cfe0:	9a02      	ldr	r2, [sp, #8]
    cfe2:	4630      	mov	r0, r6
    cfe4:	4639      	mov	r1, r7
    cfe6:	f7ff fea5 	bl	cd34 <uint64_to_str>
    cfea:	e012      	b.n	d012 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cfec:	9b02      	ldr	r3, [sp, #8]
    cfee:	1c5a      	adds	r2, r3, #1
    cff0:	9202      	str	r2, [sp, #8]
    cff2:	222d      	movs	r2, #45	; 0x2d
    cff4:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cff8:	425b      	negs	r3, r3
    cffa:	17da      	asrs	r2, r3, #31
    cffc:	461c      	mov	r4, r3
    cffe:	4615      	mov	r5, r2
    d000:	9a02      	ldr	r2, [sp, #8]
    d002:	4620      	mov	r0, r4
    d004:	4629      	mov	r1, r5
    d006:	f7ff fe95 	bl	cd34 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    d00a:	e002      	b.n	d012 <ftoa+0x122>
        {
            pcBuf++;
    d00c:	9b02      	ldr	r3, [sp, #8]
    d00e:	3301      	adds	r3, #1
    d010:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    d012:	9b02      	ldr	r3, [sp, #8]
    d014:	781b      	ldrb	r3, [r3, #0]
    d016:	2b00      	cmp	r3, #0
    d018:	d1f8      	bne.n	d00c <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    d01a:	9b02      	ldr	r3, [sp, #8]
    d01c:	1c5a      	adds	r2, r3, #1
    d01e:	9202      	str	r2, [sp, #8]
    d020:	222e      	movs	r2, #46	; 0x2e
    d022:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    d024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d026:	2b00      	cmp	r3, #0
    d028:	d105      	bne.n	d036 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    d02a:	9b02      	ldr	r3, [sp, #8]
    d02c:	1c5a      	adds	r2, r3, #1
    d02e:	9202      	str	r2, [sp, #8]
    d030:	2230      	movs	r2, #48	; 0x30
    d032:	701a      	strb	r2, [r3, #0]
    d034:	e04f      	b.n	d0d6 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d036:	9a02      	ldr	r2, [sp, #8]
    d038:	9b08      	ldr	r3, [sp, #32]
    d03a:	1ad3      	subs	r3, r2, r3
    d03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d03e:	1ad3      	subs	r3, r2, r3
    d040:	3b01      	subs	r3, #1
    d042:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d044:	9a05      	ldr	r2, [sp, #20]
    d046:	9b01      	ldr	r3, [sp, #4]
    d048:	4293      	cmp	r3, r2
    d04a:	bfa8      	it	ge
    d04c:	4613      	movge	r3, r2
    d04e:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    d050:	2300      	movs	r3, #0
    d052:	930a      	str	r3, [sp, #40]	; 0x28
    d054:	e015      	b.n	d082 <ftoa+0x192>
        {
            i32FracPart *= 10;
    d056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d058:	4613      	mov	r3, r2
    d05a:	009b      	lsls	r3, r3, #2
    d05c:	4413      	add	r3, r2
    d05e:	005b      	lsls	r3, r3, #1
    d060:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d064:	161b      	asrs	r3, r3, #24
    d066:	b2da      	uxtb	r2, r3
    d068:	9b02      	ldr	r3, [sp, #8]
    d06a:	1c59      	adds	r1, r3, #1
    d06c:	9102      	str	r1, [sp, #8]
    d06e:	3230      	adds	r2, #48	; 0x30
    d070:	b2d2      	uxtb	r2, r2
    d072:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    d074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d076:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d07a:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    d07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d07e:	3301      	adds	r3, #1
    d080:	930a      	str	r3, [sp, #40]	; 0x28
    d082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d084:	9b05      	ldr	r3, [sp, #20]
    d086:	429a      	cmp	r2, r3
    d088:	dbe5      	blt.n	d056 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d08a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d08c:	4613      	mov	r3, r2
    d08e:	009b      	lsls	r3, r3, #2
    d090:	4413      	add	r3, r2
    d092:	005b      	lsls	r3, r3, #1
    d094:	161b      	asrs	r3, r3, #24
    d096:	2b04      	cmp	r3, #4
    d098:	dd1d      	ble.n	d0d6 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    d09a:	9b02      	ldr	r3, [sp, #8]
    d09c:	3b01      	subs	r3, #1
    d09e:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d0a0:	e015      	b.n	d0ce <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    d0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0a4:	781b      	ldrb	r3, [r3, #0]
    d0a6:	2b2e      	cmp	r3, #46	; 0x2e
    d0a8:	d00e      	beq.n	d0c8 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    d0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0ac:	781b      	ldrb	r3, [r3, #0]
    d0ae:	2b39      	cmp	r3, #57	; 0x39
    d0b0:	d103      	bne.n	d0ba <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    d0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0b4:	2230      	movs	r2, #48	; 0x30
    d0b6:	701a      	strb	r2, [r3, #0]
    d0b8:	e006      	b.n	d0c8 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    d0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0bc:	781b      	ldrb	r3, [r3, #0]
    d0be:	3301      	adds	r3, #1
    d0c0:	b2da      	uxtb	r2, r3
    d0c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0c4:	701a      	strb	r2, [r3, #0]
                    break;
    d0c6:	e006      	b.n	d0d6 <ftoa+0x1e6>
                }
                pcBuftmp--;
    d0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0ca:	3b01      	subs	r3, #1
    d0cc:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    d0ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d0d0:	9b08      	ldr	r3, [sp, #32]
    d0d2:	429a      	cmp	r2, r3
    d0d4:	d2e5      	bcs.n	d0a2 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    d0d6:	9b02      	ldr	r3, [sp, #8]
    d0d8:	2200      	movs	r2, #0
    d0da:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    d0dc:	9a02      	ldr	r2, [sp, #8]
    d0de:	9b08      	ldr	r3, [sp, #32]
    d0e0:	1ad3      	subs	r3, r2, r3
} // ftoa()
    d0e2:	4618      	mov	r0, r3
    d0e4:	b00f      	add	sp, #60	; 0x3c
    d0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0e8:	00302e30 	.word	0x00302e30

0000d0ec <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0f0:	b097      	sub	sp, #92	; 0x5c
    d0f2:	9003      	str	r0, [sp, #12]
    d0f4:	9102      	str	r1, [sp, #8]
    d0f6:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    d0f8:	2300      	movs	r3, #0
    d0fa:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    d0fc:	2300      	movs	r3, #0
    d0fe:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    d100:	e2e9      	b.n	d6d6 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    d102:	2306      	movs	r3, #6
    d104:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    d106:	9b02      	ldr	r3, [sp, #8]
    d108:	781b      	ldrb	r3, [r3, #0]
    d10a:	2b25      	cmp	r3, #37	; 0x25
    d10c:	d01f      	beq.n	d14e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    d10e:	9b03      	ldr	r3, [sp, #12]
    d110:	2b00      	cmp	r3, #0
    d112:	d015      	beq.n	d140 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    d114:	9b02      	ldr	r3, [sp, #8]
    d116:	781b      	ldrb	r3, [r3, #0]
    d118:	2b0a      	cmp	r3, #10
    d11a:	d10b      	bne.n	d134 <am_util_stdio_vsprintf+0x48>
    d11c:	4ba8      	ldr	r3, [pc, #672]	; (d3c0 <am_util_stdio_vsprintf+0x2d4>)
    d11e:	781b      	ldrb	r3, [r3, #0]
    d120:	2b00      	cmp	r3, #0
    d122:	d007      	beq.n	d134 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    d124:	9b03      	ldr	r3, [sp, #12]
    d126:	1c5a      	adds	r2, r3, #1
    d128:	9203      	str	r2, [sp, #12]
    d12a:	220d      	movs	r2, #13
    d12c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    d12e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d130:	3301      	adds	r3, #1
    d132:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    d134:	9b03      	ldr	r3, [sp, #12]
    d136:	1c5a      	adds	r2, r3, #1
    d138:	9203      	str	r2, [sp, #12]
    d13a:	9a02      	ldr	r2, [sp, #8]
    d13c:	7812      	ldrb	r2, [r2, #0]
    d13e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    d140:	9b02      	ldr	r3, [sp, #8]
    d142:	3301      	adds	r3, #1
    d144:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    d146:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d148:	3301      	adds	r3, #1
    d14a:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    d14c:	e2c3      	b.n	d6d6 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    d14e:	9b02      	ldr	r3, [sp, #8]
    d150:	3301      	adds	r3, #1
    d152:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    d154:	2300      	movs	r3, #0
    d156:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    d15a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d15e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    d162:	2320      	movs	r3, #32
    d164:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    d168:	9b02      	ldr	r3, [sp, #8]
    d16a:	781b      	ldrb	r3, [r3, #0]
    d16c:	2b30      	cmp	r3, #48	; 0x30
    d16e:	d105      	bne.n	d17c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    d170:	2330      	movs	r3, #48	; 0x30
    d172:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    d176:	9b02      	ldr	r3, [sp, #8]
    d178:	3301      	adds	r3, #1
    d17a:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    d17c:	ab05      	add	r3, sp, #20
    d17e:	4619      	mov	r1, r3
    d180:	9802      	ldr	r0, [sp, #8]
    d182:	f7ff fd93 	bl	ccac <decstr_to_int>
    d186:	4603      	mov	r3, r0
    d188:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    d18a:	9b05      	ldr	r3, [sp, #20]
    d18c:	9a02      	ldr	r2, [sp, #8]
    d18e:	4413      	add	r3, r2
    d190:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    d192:	9b02      	ldr	r3, [sp, #8]
    d194:	781b      	ldrb	r3, [r3, #0]
    d196:	2b73      	cmp	r3, #115	; 0x73
    d198:	d005      	beq.n	d1a6 <am_util_stdio_vsprintf+0xba>
    d19a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d19c:	2b00      	cmp	r3, #0
    d19e:	da02      	bge.n	d1a6 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    d1a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1a2:	425b      	negs	r3, r3
    d1a4:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    d1a6:	9b02      	ldr	r3, [sp, #8]
    d1a8:	781b      	ldrb	r3, [r3, #0]
    d1aa:	2b2e      	cmp	r3, #46	; 0x2e
    d1ac:	d10d      	bne.n	d1ca <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    d1ae:	9b02      	ldr	r3, [sp, #8]
    d1b0:	3301      	adds	r3, #1
    d1b2:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    d1b4:	ab05      	add	r3, sp, #20
    d1b6:	4619      	mov	r1, r3
    d1b8:	9802      	ldr	r0, [sp, #8]
    d1ba:	f7ff fd77 	bl	ccac <decstr_to_int>
    d1be:	4603      	mov	r3, r0
    d1c0:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    d1c2:	9b05      	ldr	r3, [sp, #20]
    d1c4:	9a02      	ldr	r2, [sp, #8]
    d1c6:	4413      	add	r3, r2
    d1c8:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    d1ca:	9b02      	ldr	r3, [sp, #8]
    d1cc:	781b      	ldrb	r3, [r3, #0]
    d1ce:	2b6c      	cmp	r3, #108	; 0x6c
    d1d0:	d10c      	bne.n	d1ec <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    d1d2:	9b02      	ldr	r3, [sp, #8]
    d1d4:	3301      	adds	r3, #1
    d1d6:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    d1d8:	9b02      	ldr	r3, [sp, #8]
    d1da:	781b      	ldrb	r3, [r3, #0]
    d1dc:	2b6c      	cmp	r3, #108	; 0x6c
    d1de:	d105      	bne.n	d1ec <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    d1e0:	9b02      	ldr	r3, [sp, #8]
    d1e2:	3301      	adds	r3, #1
    d1e4:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    d1e6:	2301      	movs	r3, #1
    d1e8:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    d1ec:	9b02      	ldr	r3, [sp, #8]
    d1ee:	781b      	ldrb	r3, [r3, #0]
    d1f0:	3b46      	subs	r3, #70	; 0x46
    d1f2:	2b32      	cmp	r3, #50	; 0x32
    d1f4:	f200 825c 	bhi.w	d6b0 <am_util_stdio_vsprintf+0x5c4>
    d1f8:	a201      	add	r2, pc, #4	; (adr r2, d200 <am_util_stdio_vsprintf+0x114>)
    d1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d1fe:	bf00      	nop
    d200:	0000d637 	.word	0x0000d637
    d204:	0000d6b1 	.word	0x0000d6b1
    d208:	0000d6b1 	.word	0x0000d6b1
    d20c:	0000d6b1 	.word	0x0000d6b1
    d210:	0000d6b1 	.word	0x0000d6b1
    d214:	0000d6b1 	.word	0x0000d6b1
    d218:	0000d6b1 	.word	0x0000d6b1
    d21c:	0000d6b1 	.word	0x0000d6b1
    d220:	0000d6b1 	.word	0x0000d6b1
    d224:	0000d6b1 	.word	0x0000d6b1
    d228:	0000d6b1 	.word	0x0000d6b1
    d22c:	0000d6b1 	.word	0x0000d6b1
    d230:	0000d6b1 	.word	0x0000d6b1
    d234:	0000d6b1 	.word	0x0000d6b1
    d238:	0000d6b1 	.word	0x0000d6b1
    d23c:	0000d6b1 	.word	0x0000d6b1
    d240:	0000d6b1 	.word	0x0000d6b1
    d244:	0000d6b1 	.word	0x0000d6b1
    d248:	0000d3cb 	.word	0x0000d3cb
    d24c:	0000d6b1 	.word	0x0000d6b1
    d250:	0000d6b1 	.word	0x0000d6b1
    d254:	0000d6b1 	.word	0x0000d6b1
    d258:	0000d6b1 	.word	0x0000d6b1
    d25c:	0000d6b1 	.word	0x0000d6b1
    d260:	0000d6b1 	.word	0x0000d6b1
    d264:	0000d6b1 	.word	0x0000d6b1
    d268:	0000d6b1 	.word	0x0000d6b1
    d26c:	0000d6b1 	.word	0x0000d6b1
    d270:	0000d6b1 	.word	0x0000d6b1
    d274:	0000d2cd 	.word	0x0000d2cd
    d278:	0000d4fb 	.word	0x0000d4fb
    d27c:	0000d6b1 	.word	0x0000d6b1
    d280:	0000d637 	.word	0x0000d637
    d284:	0000d6b1 	.word	0x0000d6b1
    d288:	0000d6b1 	.word	0x0000d6b1
    d28c:	0000d4fb 	.word	0x0000d4fb
    d290:	0000d6b1 	.word	0x0000d6b1
    d294:	0000d6b1 	.word	0x0000d6b1
    d298:	0000d6b1 	.word	0x0000d6b1
    d29c:	0000d6b1 	.word	0x0000d6b1
    d2a0:	0000d6b1 	.word	0x0000d6b1
    d2a4:	0000d6b1 	.word	0x0000d6b1
    d2a8:	0000d6b1 	.word	0x0000d6b1
    d2ac:	0000d6b1 	.word	0x0000d6b1
    d2b0:	0000d6b1 	.word	0x0000d6b1
    d2b4:	0000d2f3 	.word	0x0000d2f3
    d2b8:	0000d6b1 	.word	0x0000d6b1
    d2bc:	0000d465 	.word	0x0000d465
    d2c0:	0000d6b1 	.word	0x0000d6b1
    d2c4:	0000d6b1 	.word	0x0000d6b1
    d2c8:	0000d3c5 	.word	0x0000d3c5
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d2cc:	9b01      	ldr	r3, [sp, #4]
    d2ce:	1d1a      	adds	r2, r3, #4
    d2d0:	9201      	str	r2, [sp, #4]
    d2d2:	681b      	ldr	r3, [r3, #0]
    d2d4:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    d2d8:	9b03      	ldr	r3, [sp, #12]
    d2da:	2b00      	cmp	r3, #0
    d2dc:	d005      	beq.n	d2ea <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d2de:	9b03      	ldr	r3, [sp, #12]
    d2e0:	1c5a      	adds	r2, r3, #1
    d2e2:	9203      	str	r2, [sp, #12]
    d2e4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d2e8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d2ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2ec:	3301      	adds	r3, #1
    d2ee:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d2f0:	e1ee      	b.n	d6d0 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d2f2:	9b01      	ldr	r3, [sp, #4]
    d2f4:	1d1a      	adds	r2, r3, #4
    d2f6:	9201      	str	r2, [sp, #4]
    d2f8:	681b      	ldr	r3, [r3, #0]
    d2fa:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d2fc:	9815      	ldr	r0, [sp, #84]	; 0x54
    d2fe:	f7ff fdbe 	bl	ce7e <simple_strlen>
    d302:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    d304:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d306:	2b00      	cmp	r3, #0
    d308:	dd2e      	ble.n	d368 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d30a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d30c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d30e:	429a      	cmp	r2, r3
    d310:	d22a      	bcs.n	d368 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d312:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d316:	1ad3      	subs	r3, r2, r3
    d318:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d31a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d31e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d320:	4619      	mov	r1, r3
    d322:	9803      	ldr	r0, [sp, #12]
    d324:	f7ff fdc1 	bl	ceaa <padbuffer>
    d328:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d32a:	9b03      	ldr	r3, [sp, #12]
    d32c:	2b00      	cmp	r3, #0
    d32e:	d001      	beq.n	d334 <am_util_stdio_vsprintf+0x248>
    d330:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d332:	e000      	b.n	d336 <am_util_stdio_vsprintf+0x24a>
    d334:	2300      	movs	r3, #0
    d336:	9a03      	ldr	r2, [sp, #12]
    d338:	4413      	add	r3, r2
    d33a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d33c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d33e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d340:	4413      	add	r3, r2
    d342:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d344:	2300      	movs	r3, #0
    d346:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d348:	e00e      	b.n	d368 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d34a:	9b03      	ldr	r3, [sp, #12]
    d34c:	2b00      	cmp	r3, #0
    d34e:	d005      	beq.n	d35c <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d350:	9b03      	ldr	r3, [sp, #12]
    d352:	1c5a      	adds	r2, r3, #1
    d354:	9203      	str	r2, [sp, #12]
    d356:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d358:	7812      	ldrb	r2, [r2, #0]
    d35a:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d35c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d35e:	3301      	adds	r3, #1
    d360:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d362:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d364:	3301      	adds	r3, #1
    d366:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d368:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d36a:	781b      	ldrb	r3, [r3, #0]
    d36c:	2b00      	cmp	r3, #0
    d36e:	d1ec      	bne.n	d34a <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d370:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d372:	2b00      	cmp	r3, #0
    d374:	f000 81a9 	beq.w	d6ca <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d378:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d37a:	425b      	negs	r3, r3
    d37c:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d37e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d382:	429a      	cmp	r2, r3
    d384:	f080 81a1 	bcs.w	d6ca <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d388:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d38c:	1ad3      	subs	r3, r2, r3
    d38e:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d390:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d394:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d396:	4619      	mov	r1, r3
    d398:	9803      	ldr	r0, [sp, #12]
    d39a:	f7ff fd86 	bl	ceaa <padbuffer>
    d39e:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d3a0:	9b03      	ldr	r3, [sp, #12]
    d3a2:	2b00      	cmp	r3, #0
    d3a4:	d001      	beq.n	d3aa <am_util_stdio_vsprintf+0x2be>
    d3a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3a8:	e000      	b.n	d3ac <am_util_stdio_vsprintf+0x2c0>
    d3aa:	2300      	movs	r3, #0
    d3ac:	9a03      	ldr	r2, [sp, #12]
    d3ae:	4413      	add	r3, r2
    d3b0:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d3b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d3b6:	4413      	add	r3, r2
    d3b8:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d3ba:	2300      	movs	r3, #0
    d3bc:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d3be:	e184      	b.n	d6ca <am_util_stdio_vsprintf+0x5de>
    d3c0:	10005a18 	.word	0x10005a18

            case 'x':
                bLower = true;
    d3c4:	2301      	movs	r3, #1
    d3c6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d3ca:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	d009      	beq.n	d3e6 <am_util_stdio_vsprintf+0x2fa>
    d3d2:	9b01      	ldr	r3, [sp, #4]
    d3d4:	3307      	adds	r3, #7
    d3d6:	f023 0307 	bic.w	r3, r3, #7
    d3da:	f103 0208 	add.w	r2, r3, #8
    d3de:	9201      	str	r2, [sp, #4]
    d3e0:	e9d3 4500 	ldrd	r4, r5, [r3]
    d3e4:	e006      	b.n	d3f4 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d3e6:	9b01      	ldr	r3, [sp, #4]
    d3e8:	1d1a      	adds	r2, r3, #4
    d3ea:	9201      	str	r2, [sp, #4]
    d3ec:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d3ee:	2200      	movs	r2, #0
    d3f0:	461c      	mov	r4, r3
    d3f2:	4615      	mov	r5, r2
    d3f4:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d3f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d01e      	beq.n	d43c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d3fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d402:	f7ff fc2f 	bl	cc64 <ndigits_in_hex>
    d406:	4602      	mov	r2, r0
    d408:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d40a:	1a9b      	subs	r3, r3, r2
    d40c:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d40e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d412:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d414:	4619      	mov	r1, r3
    d416:	9803      	ldr	r0, [sp, #12]
    d418:	f7ff fd47 	bl	ceaa <padbuffer>
    d41c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d41e:	9b03      	ldr	r3, [sp, #12]
    d420:	2b00      	cmp	r3, #0
    d422:	d001      	beq.n	d428 <am_util_stdio_vsprintf+0x33c>
    d424:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d426:	e000      	b.n	d42a <am_util_stdio_vsprintf+0x33e>
    d428:	2300      	movs	r3, #0
    d42a:	9a03      	ldr	r2, [sp, #12]
    d42c:	4413      	add	r3, r2
    d42e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d430:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d432:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d434:	4413      	add	r3, r2
    d436:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d438:	2300      	movs	r3, #0
    d43a:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d43c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d440:	9a03      	ldr	r2, [sp, #12]
    d442:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d446:	f7ff fcba 	bl	cdbe <uint64_to_hexstr>
    d44a:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d44c:	9b03      	ldr	r3, [sp, #12]
    d44e:	2b00      	cmp	r3, #0
    d450:	d003      	beq.n	d45a <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d454:	9a03      	ldr	r2, [sp, #12]
    d456:	4413      	add	r3, r2
    d458:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d45a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d45c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d45e:	4413      	add	r3, r2
    d460:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d462:	e135      	b.n	d6d0 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d464:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d468:	2b00      	cmp	r3, #0
    d46a:	d009      	beq.n	d480 <am_util_stdio_vsprintf+0x394>
    d46c:	9b01      	ldr	r3, [sp, #4]
    d46e:	3307      	adds	r3, #7
    d470:	f023 0307 	bic.w	r3, r3, #7
    d474:	f103 0208 	add.w	r2, r3, #8
    d478:	9201      	str	r2, [sp, #4]
    d47a:	e9d3 6700 	ldrd	r6, r7, [r3]
    d47e:	e006      	b.n	d48e <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d480:	9b01      	ldr	r3, [sp, #4]
    d482:	1d1a      	adds	r2, r3, #4
    d484:	9201      	str	r2, [sp, #4]
    d486:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d488:	2200      	movs	r2, #0
    d48a:	461e      	mov	r6, r3
    d48c:	4617      	mov	r7, r2
    d48e:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d492:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d494:	2b00      	cmp	r3, #0
    d496:	d01e      	beq.n	d4d6 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d498:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d49c:	f7ff fba8 	bl	cbf0 <ndigits_in_u64>
    d4a0:	4602      	mov	r2, r0
    d4a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4a4:	1a9b      	subs	r3, r3, r2
    d4a6:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d4a8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d4ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d4ae:	4619      	mov	r1, r3
    d4b0:	9803      	ldr	r0, [sp, #12]
    d4b2:	f7ff fcfa 	bl	ceaa <padbuffer>
    d4b6:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d4b8:	9b03      	ldr	r3, [sp, #12]
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	d001      	beq.n	d4c2 <am_util_stdio_vsprintf+0x3d6>
    d4be:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4c0:	e000      	b.n	d4c4 <am_util_stdio_vsprintf+0x3d8>
    d4c2:	2300      	movs	r3, #0
    d4c4:	9a03      	ldr	r2, [sp, #12]
    d4c6:	4413      	add	r3, r2
    d4c8:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d4ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d4cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d4ce:	4413      	add	r3, r2
    d4d0:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d4d2:	2300      	movs	r3, #0
    d4d4:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d4d6:	9a03      	ldr	r2, [sp, #12]
    d4d8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d4dc:	f7ff fc2a 	bl	cd34 <uint64_to_str>
    d4e0:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d4e2:	9b03      	ldr	r3, [sp, #12]
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	d003      	beq.n	d4f0 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d4e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4ea:	9a03      	ldr	r2, [sp, #12]
    d4ec:	4413      	add	r3, r2
    d4ee:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d4f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d4f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d4f4:	4413      	add	r3, r2
    d4f6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d4f8:	e0ea      	b.n	d6d0 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d4fa:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d4fe:	2b00      	cmp	r3, #0
    d500:	d009      	beq.n	d516 <am_util_stdio_vsprintf+0x42a>
    d502:	9b01      	ldr	r3, [sp, #4]
    d504:	3307      	adds	r3, #7
    d506:	f023 0307 	bic.w	r3, r3, #7
    d50a:	f103 0208 	add.w	r2, r3, #8
    d50e:	9201      	str	r2, [sp, #4]
    d510:	e9d3 8900 	ldrd	r8, r9, [r3]
    d514:	e006      	b.n	d524 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d516:	9b01      	ldr	r3, [sp, #4]
    d518:	1d1a      	adds	r2, r3, #4
    d51a:	9201      	str	r2, [sp, #4]
    d51c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d51e:	17da      	asrs	r2, r3, #31
    d520:	4698      	mov	r8, r3
    d522:	4691      	mov	r9, r2
    d524:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d528:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d52c:	2b00      	cmp	r3, #0
    d52e:	da0c      	bge.n	d54a <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d530:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d534:	2100      	movs	r1, #0
    d536:	f1d2 0a00 	rsbs	sl, r2, #0
    d53a:	eb61 0b03 	sbc.w	fp, r1, r3
    d53e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d542:	2301      	movs	r3, #1
    d544:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d548:	e006      	b.n	d558 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d54a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d54e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d552:	2300      	movs	r3, #0
    d554:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d558:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d55a:	2b00      	cmp	r3, #0
    d55c:	d04a      	beq.n	d5f4 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d55e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d562:	4610      	mov	r0, r2
    d564:	4619      	mov	r1, r3
    d566:	f7ff fb63 	bl	cc30 <ndigits_in_i64>
    d56a:	4602      	mov	r2, r0
    d56c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d56e:	1a9b      	subs	r3, r3, r2
    d570:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d572:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d576:	2b00      	cmp	r3, #0
    d578:	d011      	beq.n	d59e <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d57a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d57c:	3b01      	subs	r3, #1
    d57e:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d580:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d584:	2b30      	cmp	r3, #48	; 0x30
    d586:	d10a      	bne.n	d59e <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d588:	9b03      	ldr	r3, [sp, #12]
    d58a:	2b00      	cmp	r3, #0
    d58c:	d004      	beq.n	d598 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d58e:	9b03      	ldr	r3, [sp, #12]
    d590:	1c5a      	adds	r2, r3, #1
    d592:	9203      	str	r2, [sp, #12]
    d594:	222d      	movs	r2, #45	; 0x2d
    d596:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d598:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d59a:	3301      	adds	r3, #1
    d59c:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d59e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d5a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d5a4:	4619      	mov	r1, r3
    d5a6:	9803      	ldr	r0, [sp, #12]
    d5a8:	f7ff fc7f 	bl	ceaa <padbuffer>
    d5ac:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d5ae:	9b03      	ldr	r3, [sp, #12]
    d5b0:	2b00      	cmp	r3, #0
    d5b2:	d001      	beq.n	d5b8 <am_util_stdio_vsprintf+0x4cc>
    d5b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5b6:	e000      	b.n	d5ba <am_util_stdio_vsprintf+0x4ce>
    d5b8:	2300      	movs	r3, #0
    d5ba:	9a03      	ldr	r2, [sp, #12]
    d5bc:	4413      	add	r3, r2
    d5be:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d5c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d5c4:	4413      	add	r3, r2
    d5c6:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d5c8:	2300      	movs	r3, #0
    d5ca:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d5cc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d5d0:	2b00      	cmp	r3, #0
    d5d2:	d01e      	beq.n	d612 <am_util_stdio_vsprintf+0x526>
    d5d4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d5d8:	2b20      	cmp	r3, #32
    d5da:	d11a      	bne.n	d612 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d5dc:	9b03      	ldr	r3, [sp, #12]
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d004      	beq.n	d5ec <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d5e2:	9b03      	ldr	r3, [sp, #12]
    d5e4:	1c5a      	adds	r2, r3, #1
    d5e6:	9203      	str	r2, [sp, #12]
    d5e8:	222d      	movs	r2, #45	; 0x2d
    d5ea:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d5ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d5ee:	3301      	adds	r3, #1
    d5f0:	9311      	str	r3, [sp, #68]	; 0x44
    d5f2:	e00e      	b.n	d612 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d5f4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d5f8:	2b00      	cmp	r3, #0
    d5fa:	d00a      	beq.n	d612 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d5fc:	9b03      	ldr	r3, [sp, #12]
    d5fe:	2b00      	cmp	r3, #0
    d600:	d004      	beq.n	d60c <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d602:	9b03      	ldr	r3, [sp, #12]
    d604:	1c5a      	adds	r2, r3, #1
    d606:	9203      	str	r2, [sp, #12]
    d608:	222d      	movs	r2, #45	; 0x2d
    d60a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d60c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d60e:	3301      	adds	r3, #1
    d610:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d612:	9a03      	ldr	r2, [sp, #12]
    d614:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d618:	f7ff fb8c 	bl	cd34 <uint64_to_str>
    d61c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d61e:	9b03      	ldr	r3, [sp, #12]
    d620:	2b00      	cmp	r3, #0
    d622:	d003      	beq.n	d62c <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d626:	9a03      	ldr	r2, [sp, #12]
    d628:	4413      	add	r3, r2
    d62a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d62c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d62e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d630:	4413      	add	r3, r2
    d632:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d634:	e04c      	b.n	d6d0 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d636:	9b03      	ldr	r3, [sp, #12]
    d638:	2b00      	cmp	r3, #0
    d63a:	d048      	beq.n	d6ce <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d63c:	9b01      	ldr	r3, [sp, #4]
    d63e:	3307      	adds	r3, #7
    d640:	f023 0307 	bic.w	r3, r3, #7
    d644:	f103 0208 	add.w	r2, r3, #8
    d648:	9201      	str	r2, [sp, #4]
    d64a:	e9d3 2300 	ldrd	r2, r3, [r3]
    d64e:	4610      	mov	r0, r2
    d650:	4619      	mov	r1, r3
    d652:	f7fe fd55 	bl	c100 <__aeabi_d2f>
    d656:	4603      	mov	r3, r0
    d658:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d65a:	9b03      	ldr	r3, [sp, #12]
    d65c:	2214      	movs	r2, #20
    d65e:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d660:	990e      	ldr	r1, [sp, #56]	; 0x38
    d662:	9803      	ldr	r0, [sp, #12]
    d664:	ed9d 0a06 	vldr	s0, [sp, #24]
    d668:	f7ff fc42 	bl	cef0 <ftoa>
    d66c:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d66e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d670:	2b00      	cmp	r3, #0
    d672:	da14      	bge.n	d69e <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d676:	f1b3 3fff 	cmp.w	r3, #4294967295
    d67a:	d102      	bne.n	d682 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d67c:	4b1e      	ldr	r3, [pc, #120]	; (d6f8 <am_util_stdio_vsprintf+0x60c>)
    d67e:	930c      	str	r3, [sp, #48]	; 0x30
    d680:	e008      	b.n	d694 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d684:	f113 0f02 	cmn.w	r3, #2
    d688:	d102      	bne.n	d690 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d68a:	4b1c      	ldr	r3, [pc, #112]	; (d6fc <am_util_stdio_vsprintf+0x610>)
    d68c:	930c      	str	r3, [sp, #48]	; 0x30
    d68e:	e001      	b.n	d694 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d690:	4b1b      	ldr	r3, [pc, #108]	; (d700 <am_util_stdio_vsprintf+0x614>)
    d692:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d694:	9b03      	ldr	r3, [sp, #12]
    d696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d698:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d69a:	2303      	movs	r3, #3
    d69c:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d69e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d6a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d6a2:	4413      	add	r3, r2
    d6a4:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d6a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d6a8:	9a03      	ldr	r2, [sp, #12]
    d6aa:	4413      	add	r3, r2
    d6ac:	9303      	str	r3, [sp, #12]
                }
                break;
    d6ae:	e00e      	b.n	d6ce <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d6b0:	9b03      	ldr	r3, [sp, #12]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d005      	beq.n	d6c2 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d6b6:	9b03      	ldr	r3, [sp, #12]
    d6b8:	1c5a      	adds	r2, r3, #1
    d6ba:	9203      	str	r2, [sp, #12]
    d6bc:	9a02      	ldr	r2, [sp, #8]
    d6be:	7812      	ldrb	r2, [r2, #0]
    d6c0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d6c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d6c4:	3301      	adds	r3, #1
    d6c6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d6c8:	e002      	b.n	d6d0 <am_util_stdio_vsprintf+0x5e4>
                break;
    d6ca:	bf00      	nop
    d6cc:	e000      	b.n	d6d0 <am_util_stdio_vsprintf+0x5e4>
                break;
    d6ce:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d6d0:	9b02      	ldr	r3, [sp, #8]
    d6d2:	3301      	adds	r3, #1
    d6d4:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d6d6:	9b02      	ldr	r3, [sp, #8]
    d6d8:	781b      	ldrb	r3, [r3, #0]
    d6da:	2b00      	cmp	r3, #0
    d6dc:	f47f ad11 	bne.w	d102 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d6e0:	9b03      	ldr	r3, [sp, #12]
    d6e2:	2b00      	cmp	r3, #0
    d6e4:	d002      	beq.n	d6ec <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d6e6:	9b03      	ldr	r3, [sp, #12]
    d6e8:	2200      	movs	r2, #0
    d6ea:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d6ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d6ee:	4618      	mov	r0, r3
    d6f0:	b017      	add	sp, #92	; 0x5c
    d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6f6:	bf00      	nop
    d6f8:	00302e30 	.word	0x00302e30
    d6fc:	00232e23 	.word	0x00232e23
    d700:	003f2e3f 	.word	0x003f2e3f

0000d704 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d704:	b40f      	push	{r0, r1, r2, r3}
    d706:	b500      	push	{lr}
    d708:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d70a:	4b0c      	ldr	r3, [pc, #48]	; (d73c <am_util_stdio_printf+0x38>)
    d70c:	681b      	ldr	r3, [r3, #0]
    d70e:	2b00      	cmp	r3, #0
    d710:	d101      	bne.n	d716 <am_util_stdio_printf+0x12>
    {
        return 0;
    d712:	2300      	movs	r3, #0
    d714:	e00c      	b.n	d730 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d716:	ab05      	add	r3, sp, #20
    d718:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d71a:	9a00      	ldr	r2, [sp, #0]
    d71c:	9904      	ldr	r1, [sp, #16]
    d71e:	4808      	ldr	r0, [pc, #32]	; (d740 <am_util_stdio_printf+0x3c>)
    d720:	f7ff fce4 	bl	d0ec <am_util_stdio_vsprintf>
    d724:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d726:	4b05      	ldr	r3, [pc, #20]	; (d73c <am_util_stdio_printf+0x38>)
    d728:	681b      	ldr	r3, [r3, #0]
    d72a:	4805      	ldr	r0, [pc, #20]	; (d740 <am_util_stdio_printf+0x3c>)
    d72c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d72e:	9b01      	ldr	r3, [sp, #4]
}
    d730:	4618      	mov	r0, r3
    d732:	b003      	add	sp, #12
    d734:	f85d eb04 	ldr.w	lr, [sp], #4
    d738:	b004      	add	sp, #16
    d73a:	4770      	bx	lr
    d73c:	10005914 	.word	0x10005914
    d740:	10005918 	.word	0x10005918

0000d744 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d744:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d746:	4802      	ldr	r0, [pc, #8]	; (d750 <am_util_stdio_terminal_clear+0xc>)
    d748:	f7ff ffdc 	bl	d704 <am_util_stdio_printf>
}
    d74c:	bf00      	nop
    d74e:	bd08      	pop	{r3, pc}
    d750:	000111fc 	.word	0x000111fc

0000d754 <am_device_init_flash>:
//
// Device specific initialization function.
//
static uint32_t
am_device_init_flash(void *pHandle)
{
    d754:	b500      	push	{lr}
    d756:	b0a7      	sub	sp, #156	; 0x9c
    d758:	9003      	str	r0, [sp, #12]
    uint32_t      ui32PIOBuffer[32] = {0};
    d75a:	ab05      	add	r3, sp, #20
    d75c:	2280      	movs	r2, #128	; 0x80
    d75e:	2100      	movs	r1, #0
    d760:	4618      	mov	r0, r3
    d762:	f000 fe23 	bl	e3ac <memset>
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    d766:	9b03      	ldr	r3, [sp, #12]
    d768:	9325      	str	r3, [sp, #148]	; 0x94

    //
    // Set the Dummy Cycles in Status/Control register 3 to 8.
    //
    am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_MSPI_ATXP032_WRITE_ENABLE, false, 0, ui32PIOBuffer, 0);
    d76a:	2300      	movs	r3, #0
    d76c:	9301      	str	r3, [sp, #4]
    d76e:	ab05      	add	r3, sp, #20
    d770:	9300      	str	r3, [sp, #0]
    d772:	2300      	movs	r3, #0
    d774:	2200      	movs	r2, #0
    d776:	2106      	movs	r1, #6
    d778:	9803      	ldr	r0, [sp, #12]
    d77a:	f000 f87d 	bl	d878 <am_devices_mspi_atxp032_command_write>
    ui32PIOBuffer[0] = 0x00000003;
    d77e:	2303      	movs	r3, #3
    d780:	9305      	str	r3, [sp, #20]
    am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_ATXP032_WRITE_STATUS_CTRL, false, 0, ui32PIOBuffer, 2);
    d782:	2302      	movs	r3, #2
    d784:	9301      	str	r3, [sp, #4]
    d786:	ab05      	add	r3, sp, #20
    d788:	9300      	str	r3, [sp, #0]
    d78a:	2300      	movs	r3, #0
    d78c:	2200      	movs	r2, #0
    d78e:	2171      	movs	r1, #113	; 0x71
    d790:	9803      	ldr	r0, [sp, #12]
    d792:	f000 f871 	bl	d878 <am_devices_mspi_atxp032_command_write>

    //
    // Configure the ATXP032 mode based on the MSPI configuration.
    //
    am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_MSPI_ATXP032_WRITE_ENABLE, false, 0, ui32PIOBuffer, 0);
    d796:	2300      	movs	r3, #0
    d798:	9301      	str	r3, [sp, #4]
    d79a:	ab05      	add	r3, sp, #20
    d79c:	9300      	str	r3, [sp, #0]
    d79e:	2300      	movs	r3, #0
    d7a0:	2200      	movs	r2, #0
    d7a2:	2106      	movs	r1, #6
    d7a4:	9803      	ldr	r0, [sp, #12]
    d7a6:	f000 f867 	bl	d878 <am_devices_mspi_atxp032_command_write>

    switch ( pFlash->stSetting.eDeviceConfig )
    d7aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d7ac:	7b5b      	ldrb	r3, [r3, #13]
    d7ae:	2b07      	cmp	r3, #7
    d7b0:	dc2b      	bgt.n	d80a <am_device_init_flash+0xb6>
    d7b2:	2b06      	cmp	r3, #6
    d7b4:	da1e      	bge.n	d7f4 <am_device_init_flash+0xa0>
    d7b6:	2b01      	cmp	r3, #1
    d7b8:	dc02      	bgt.n	d7c0 <am_device_init_flash+0x6c>
    d7ba:	2b00      	cmp	r3, #0
    d7bc:	da04      	bge.n	d7c8 <am_device_init_flash+0x74>
    d7be:	e024      	b.n	d80a <am_device_init_flash+0xb6>
    d7c0:	3b04      	subs	r3, #4
    d7c2:	2b01      	cmp	r3, #1
    d7c4:	d821      	bhi.n	d80a <am_device_init_flash+0xb6>
    d7c6:	e00a      	b.n	d7de <am_device_init_flash+0x8a>
    {
        case AM_HAL_MSPI_FLASH_SERIAL_CE0:
        case AM_HAL_MSPI_FLASH_SERIAL_CE1:
            am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_ATXP032_RETURN_TO_SPI_MODE, false, 0, ui32PIOBuffer, 0);
    d7c8:	2300      	movs	r3, #0
    d7ca:	9301      	str	r3, [sp, #4]
    d7cc:	ab05      	add	r3, sp, #20
    d7ce:	9300      	str	r3, [sp, #0]
    d7d0:	2300      	movs	r3, #0
    d7d2:	2200      	movs	r2, #0
    d7d4:	21ff      	movs	r1, #255	; 0xff
    d7d6:	9803      	ldr	r0, [sp, #12]
    d7d8:	f000 f84e 	bl	d878 <am_devices_mspi_atxp032_command_write>
            break;
    d7dc:	e017      	b.n	d80e <am_device_init_flash+0xba>
        case AM_HAL_MSPI_FLASH_QUAD_CE0:
        case AM_HAL_MSPI_FLASH_QUAD_CE1:
            am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_ATXP032_ENTER_QUAD_MODE, false, 0, ui32PIOBuffer, 0);
    d7de:	2300      	movs	r3, #0
    d7e0:	9301      	str	r3, [sp, #4]
    d7e2:	ab05      	add	r3, sp, #20
    d7e4:	9300      	str	r3, [sp, #0]
    d7e6:	2300      	movs	r3, #0
    d7e8:	2200      	movs	r2, #0
    d7ea:	2138      	movs	r1, #56	; 0x38
    d7ec:	9803      	ldr	r0, [sp, #12]
    d7ee:	f000 f843 	bl	d878 <am_devices_mspi_atxp032_command_write>
            break;
    d7f2:	e00c      	b.n	d80e <am_device_init_flash+0xba>
        case AM_HAL_MSPI_FLASH_OCTAL_CE0:
        case AM_HAL_MSPI_FLASH_OCTAL_CE1:
            am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_ATXP032_ENTER_OCTAL_MODE, false, 0, ui32PIOBuffer, 0);
    d7f4:	2300      	movs	r3, #0
    d7f6:	9301      	str	r3, [sp, #4]
    d7f8:	ab05      	add	r3, sp, #20
    d7fa:	9300      	str	r3, [sp, #0]
    d7fc:	2300      	movs	r3, #0
    d7fe:	2200      	movs	r2, #0
    d800:	21e8      	movs	r1, #232	; 0xe8
    d802:	9803      	ldr	r0, [sp, #12]
    d804:	f000 f838 	bl	d878 <am_devices_mspi_atxp032_command_write>
            break;
    d808:	e001      	b.n	d80e <am_device_init_flash+0xba>
        default:
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    d80a:	2301      	movs	r3, #1
    d80c:	e000      	b.n	d810 <am_device_init_flash+0xbc>
    }

    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    d80e:	2300      	movs	r3, #0
}
    d810:	4618      	mov	r0, r3
    d812:	b027      	add	sp, #156	; 0x9c
    d814:	f85d fb04 	ldr.w	pc, [sp], #4

0000d818 <am_device_deinit_flash>:
//
// Device specific de-initialization function.
//
static uint32_t
am_device_deinit_flash(void *pHandle)
{
    d818:	b500      	push	{lr}
    d81a:	b0a7      	sub	sp, #156	; 0x9c
    d81c:	9003      	str	r0, [sp, #12]
    uint32_t      ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    d81e:	9b03      	ldr	r3, [sp, #12]
    d820:	9325      	str	r3, [sp, #148]	; 0x94
    uint32_t      ui32PIOBuffer[32] = {0};
    d822:	ab04      	add	r3, sp, #16
    d824:	2280      	movs	r2, #128	; 0x80
    d826:	2100      	movs	r1, #0
    d828:	4618      	mov	r0, r3
    d82a:	f000 fdbf 	bl	e3ac <memset>

    //
    // Configure the Adesto ATXP032 Device mode.
    //
    switch (pFlash->stSetting.eDeviceConfig)
    d82e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d830:	7b5b      	ldrb	r3, [r3, #13]
    d832:	2b01      	cmp	r3, #1
    d834:	dc02      	bgt.n	d83c <am_device_deinit_flash+0x24>
    d836:	2b00      	cmp	r3, #0
    d838:	da15      	bge.n	d866 <am_device_deinit_flash+0x4e>
    d83a:	e012      	b.n	d862 <am_device_deinit_flash+0x4a>
    d83c:	3b04      	subs	r3, #4
    d83e:	2b03      	cmp	r3, #3
    d840:	d80f      	bhi.n	d862 <am_device_deinit_flash+0x4a>
            break;
        case AM_HAL_MSPI_FLASH_QUAD_CE0:
        case AM_HAL_MSPI_FLASH_QUAD_CE1:
        case AM_HAL_MSPI_FLASH_OCTAL_CE0:
        case AM_HAL_MSPI_FLASH_OCTAL_CE1:
            ui32Status = am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_ATXP032_RETURN_TO_SPI_MODE, false, 0, ui32PIOBuffer, 0);
    d842:	2300      	movs	r3, #0
    d844:	9301      	str	r3, [sp, #4]
    d846:	ab04      	add	r3, sp, #16
    d848:	9300      	str	r3, [sp, #0]
    d84a:	2300      	movs	r3, #0
    d84c:	2200      	movs	r2, #0
    d84e:	21ff      	movs	r1, #255	; 0xff
    d850:	9803      	ldr	r0, [sp, #12]
    d852:	f000 f811 	bl	d878 <am_devices_mspi_atxp032_command_write>
    d856:	9024      	str	r0, [sp, #144]	; 0x90
            if (AM_HAL_STATUS_SUCCESS != ui32Status)
    d858:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d85a:	2b00      	cmp	r3, #0
    d85c:	d005      	beq.n	d86a <am_device_deinit_flash+0x52>
            {
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    d85e:	2301      	movs	r3, #1
    d860:	e005      	b.n	d86e <am_device_deinit_flash+0x56>
            }
            break;
        default:
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    d862:	2301      	movs	r3, #1
    d864:	e003      	b.n	d86e <am_device_deinit_flash+0x56>
            break;
    d866:	bf00      	nop
    d868:	e000      	b.n	d86c <am_device_deinit_flash+0x54>
            break;
    d86a:	bf00      	nop
            //break;
    }

    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    d86c:	2300      	movs	r3, #0
}
    d86e:	4618      	mov	r0, r3
    d870:	b027      	add	sp, #156	; 0x9c
    d872:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000d878 <am_devices_mspi_atxp032_command_write>:
//*****************************************************************************
static uint32_t
am_devices_mspi_atxp032_command_write(void *pHandle, uint8_t ui8Instr, bool bSendAddr,
                                      uint32_t ui32Addr, uint32_t *pData,
                                      uint32_t ui32NumBytes)
{
    d878:	b500      	push	{lr}
    d87a:	b08d      	sub	sp, #52	; 0x34
    d87c:	9003      	str	r0, [sp, #12]
    d87e:	9301      	str	r3, [sp, #4]
    d880:	460b      	mov	r3, r1
    d882:	f88d 300b 	strb.w	r3, [sp, #11]
    d886:	4613      	mov	r3, r2
    d888:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32_t ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    d88c:	9b03      	ldr	r3, [sp, #12]
    d88e:	930b      	str	r3, [sp, #44]	; 0x2c
    am_hal_mspi_pio_transfer_t  stMSPIFlashPIOTransaction = {0};
    d890:	ab04      	add	r3, sp, #16
    d892:	2200      	movs	r2, #0
    d894:	601a      	str	r2, [r3, #0]
    d896:	605a      	str	r2, [r3, #4]
    d898:	609a      	str	r2, [r3, #8]
    d89a:	60da      	str	r2, [r3, #12]
    d89c:	611a      	str	r2, [r3, #16]
    d89e:	615a      	str	r2, [r3, #20]

    // Create the individual write transaction.
    stMSPIFlashPIOTransaction.ui32NumBytes       = ui32NumBytes;
    d8a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d8a2:	9304      	str	r3, [sp, #16]
    stMSPIFlashPIOTransaction.eDirection         = AM_HAL_MSPI_TX;
    d8a4:	2301      	movs	r3, #1
    d8a6:	f88d 3015 	strb.w	r3, [sp, #21]
    stMSPIFlashPIOTransaction.bSendAddr          = bSendAddr;
    d8aa:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d8ae:	f88d 3016 	strb.w	r3, [sp, #22]
    stMSPIFlashPIOTransaction.ui32DeviceAddr     = ui32Addr;
    d8b2:	9b01      	ldr	r3, [sp, #4]
    d8b4:	9306      	str	r3, [sp, #24]
    stMSPIFlashPIOTransaction.bSendInstr         = true;
    d8b6:	2301      	movs	r3, #1
    d8b8:	f88d 301c 	strb.w	r3, [sp, #28]
    stMSPIFlashPIOTransaction.ui16DeviceInstr    = ui8Instr;
    d8bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8c0:	b29b      	uxth	r3, r3
    d8c2:	f8ad 301e 	strh.w	r3, [sp, #30]
    stMSPIFlashPIOTransaction.bTurnaround        = false;
    d8c6:	2300      	movs	r3, #0
    d8c8:	f88d 3020 	strb.w	r3, [sp, #32]
#if 0 // A3DS-25 Deprecate MSPI CONT
    stMSPIFlashPIOTransaction.bContinue          = false;
#endif // A3DS-25
    stMSPIFlashPIOTransaction.pui32Buffer        = pData;
    d8cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d8ce:	9309      	str	r3, [sp, #36]	; 0x24
    stMSPIFlashPIOTransaction.bEnWRLatency       = false;
    stMSPIFlashPIOTransaction.bContinue          = false;
#endif

    // Execute the transction over MSPI.
    ui32Status = am_hal_mspi_blocking_transfer(pFlash->pMspiHandle, &stMSPIFlashPIOTransaction,
    d8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d8d2:	685b      	ldr	r3, [r3, #4]
    d8d4:	a904      	add	r1, sp, #16
    d8d6:	4a05      	ldr	r2, [pc, #20]	; (d8ec <am_devices_mspi_atxp032_command_write+0x74>)
    d8d8:	4618      	mov	r0, r3
    d8da:	f001 ff23 	bl	f724 <am_hal_mspi_blocking_transfer>
    d8de:	900a      	str	r0, [sp, #40]	; 0x28
                                         AM_DEVICES_MSPI_ATXP032_TIMEOUT);

    return ui32Status;
    d8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
    d8e2:	4618      	mov	r0, r3
    d8e4:	b00d      	add	sp, #52	; 0x34
    d8e6:	f85d fb04 	ldr.w	pc, [sp], #4
    d8ea:	bf00      	nop
    d8ec:	000f4240 	.word	0x000f4240

0000d8f0 <am_devices_mspi_atxp032_command_read>:
//*****************************************************************************
static uint32_t
am_devices_mspi_atxp032_command_read(void *pHandle, uint8_t ui8Instr, bool bSendAddr,
                                     uint32_t ui32Addr, uint32_t *pData,
                                     uint32_t ui32NumBytes)
{
    d8f0:	b500      	push	{lr}
    d8f2:	b08d      	sub	sp, #52	; 0x34
    d8f4:	9003      	str	r0, [sp, #12]
    d8f6:	9301      	str	r3, [sp, #4]
    d8f8:	460b      	mov	r3, r1
    d8fa:	f88d 300b 	strb.w	r3, [sp, #11]
    d8fe:	4613      	mov	r3, r2
    d900:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32_t ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    d904:	9b03      	ldr	r3, [sp, #12]
    d906:	930b      	str	r3, [sp, #44]	; 0x2c
    am_hal_mspi_pio_transfer_t      stMSPIFlashPIOTransaction = {0};
    d908:	ab04      	add	r3, sp, #16
    d90a:	2200      	movs	r2, #0
    d90c:	601a      	str	r2, [r3, #0]
    d90e:	605a      	str	r2, [r3, #4]
    d910:	609a      	str	r2, [r3, #8]
    d912:	60da      	str	r2, [r3, #12]
    d914:	611a      	str	r2, [r3, #16]
    d916:	615a      	str	r2, [r3, #20]

    // Create the individual write transaction.
    stMSPIFlashPIOTransaction.eDirection         = AM_HAL_MSPI_RX;
    d918:	2300      	movs	r3, #0
    d91a:	f88d 3015 	strb.w	r3, [sp, #21]
    stMSPIFlashPIOTransaction.bSendAddr          = bSendAddr;
    d91e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d922:	f88d 3016 	strb.w	r3, [sp, #22]
    stMSPIFlashPIOTransaction.ui32DeviceAddr     = ui32Addr;
    d926:	9b01      	ldr	r3, [sp, #4]
    d928:	9306      	str	r3, [sp, #24]
    stMSPIFlashPIOTransaction.bSendInstr         = true;
    d92a:	2301      	movs	r3, #1
    d92c:	f88d 301c 	strb.w	r3, [sp, #28]
    stMSPIFlashPIOTransaction.ui16DeviceInstr    = ui8Instr;
    d930:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d934:	b29b      	uxth	r3, r3
    d936:	f8ad 301e 	strh.w	r3, [sp, #30]
    stMSPIFlashPIOTransaction.bTurnaround        = false;
    d93a:	2300      	movs	r3, #0
    d93c:	f88d 3020 	strb.w	r3, [sp, #32]
#if 0 // A3DS-25 Deprecate MSPI CONT
    stMSPIFlashPIOTransaction.bContinue          = false;
#endif // A3DS-25
    stMSPIFlashPIOTransaction.ui32NumBytes     = ui32NumBytes;
    d940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d942:	9304      	str	r3, [sp, #16]
    stMSPIFlashPIOTransaction.pui32Buffer        = pData;
    d944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d946:	9309      	str	r3, [sp, #36]	; 0x24
    stMSPIFlashPIOTransaction.bEnWRLatency       = false;
    stMSPIFlashPIOTransaction.bContinue          = false;
#endif

    // Execute the transction over MSPI.
    ui32Status = am_hal_mspi_blocking_transfer(pFlash->pMspiHandle, &stMSPIFlashPIOTransaction,
    d948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d94a:	685b      	ldr	r3, [r3, #4]
    d94c:	a904      	add	r1, sp, #16
    d94e:	4a05      	ldr	r2, [pc, #20]	; (d964 <am_devices_mspi_atxp032_command_read+0x74>)
    d950:	4618      	mov	r0, r3
    d952:	f001 fee7 	bl	f724 <am_hal_mspi_blocking_transfer>
    d956:	900a      	str	r0, [sp, #40]	; 0x28
                                         AM_DEVICES_MSPI_ATXP032_TIMEOUT);

    return ui32Status;
    d958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
    d95a:	4618      	mov	r0, r3
    d95c:	b00d      	add	sp, #52	; 0x34
    d95e:	f85d fb04 	ldr.w	pc, [sp], #4
    d962:	bf00      	nop
    d964:	000f4240 	.word	0x000f4240

0000d968 <pfnMSPI_ATXP032_Callback>:

static void
pfnMSPI_ATXP032_Callback(void *pCallbackCtxt, uint32_t status)
{
    d968:	b082      	sub	sp, #8
    d96a:	9001      	str	r0, [sp, #4]
    d96c:	9100      	str	r1, [sp, #0]
    // Set the DMA complete flag.
    *(volatile bool *)pCallbackCtxt = true;
    d96e:	9b01      	ldr	r3, [sp, #4]
    d970:	2201      	movs	r2, #1
    d972:	701a      	strb	r2, [r3, #0]
}
    d974:	bf00      	nop
    d976:	b002      	add	sp, #8
    d978:	4770      	bx	lr
	...

0000d97c <am_devices_mspi_atxp032_init>:
//! @return None.
//
//*****************************************************************************
uint32_t
am_devices_mspi_atxp032_init(uint32_t ui32Module, am_devices_mspi_atxp032_config_t *psMSPISettings, void **ppHandle, void **ppMspiHandle)
{
    d97c:	b530      	push	{r4, r5, lr}
    d97e:	b08b      	sub	sp, #44	; 0x2c
    d980:	9003      	str	r0, [sp, #12]
    d982:	9102      	str	r1, [sp, #8]
    d984:	9201      	str	r2, [sp, #4]
    d986:	9300      	str	r3, [sp, #0]
    uint32_t      ui32Status;
    am_hal_mspi_dev_config_t *psConfig = g_ATXP032_DevConfig[0].psDevConfig;
    d988:	4ba8      	ldr	r3, [pc, #672]	; (dc2c <am_devices_mspi_atxp032_init+0x2b0>)
    d98a:	685b      	ldr	r3, [r3, #4]
    d98c:	9309      	str	r3, [sp, #36]	; 0x24
    void                     *pMspiHandle;
    uint32_t      ui32Index = 0;
    d98e:	2300      	movs	r3, #0
    d990:	9308      	str	r3, [sp, #32]

    if ((ui32Module > AM_REG_MSPI_NUM_MODULES) || (psMSPISettings == NULL))
    d992:	9b03      	ldr	r3, [sp, #12]
    d994:	2b01      	cmp	r3, #1
    d996:	d802      	bhi.n	d99e <am_devices_mspi_atxp032_init+0x22>
    d998:	9b02      	ldr	r3, [sp, #8]
    d99a:	2b00      	cmp	r3, #0
    d99c:	d101      	bne.n	d9a2 <am_devices_mspi_atxp032_init+0x26>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    d99e:	2301      	movs	r3, #1
    d9a0:	e1b2      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
    }

    // Allocate a vacant device handle
    for ( ui32Index = 0; ui32Index < AM_DEVICES_MSPI_ATXP032_MAX_DEVICE_NUM; ui32Index++ )
    d9a2:	2300      	movs	r3, #0
    d9a4:	9308      	str	r3, [sp, #32]
    d9a6:	e010      	b.n	d9ca <am_devices_mspi_atxp032_init+0x4e>
    {
        if ( gAmAtxp032[ui32Index].bOccupied == false )
    d9a8:	49a1      	ldr	r1, [pc, #644]	; (dc30 <am_devices_mspi_atxp032_init+0x2b4>)
    d9aa:	9a08      	ldr	r2, [sp, #32]
    d9ac:	4613      	mov	r3, r2
    d9ae:	009b      	lsls	r3, r3, #2
    d9b0:	4413      	add	r3, r2
    d9b2:	00db      	lsls	r3, r3, #3
    d9b4:	440b      	add	r3, r1
    d9b6:	3324      	adds	r3, #36	; 0x24
    d9b8:	781b      	ldrb	r3, [r3, #0]
    d9ba:	f083 0301 	eor.w	r3, r3, #1
    d9be:	b2db      	uxtb	r3, r3
    d9c0:	2b00      	cmp	r3, #0
    d9c2:	d106      	bne.n	d9d2 <am_devices_mspi_atxp032_init+0x56>
    for ( ui32Index = 0; ui32Index < AM_DEVICES_MSPI_ATXP032_MAX_DEVICE_NUM; ui32Index++ )
    d9c4:	9b08      	ldr	r3, [sp, #32]
    d9c6:	3301      	adds	r3, #1
    d9c8:	9308      	str	r3, [sp, #32]
    d9ca:	9b08      	ldr	r3, [sp, #32]
    d9cc:	2b00      	cmp	r3, #0
    d9ce:	d0eb      	beq.n	d9a8 <am_devices_mspi_atxp032_init+0x2c>
    d9d0:	e000      	b.n	d9d4 <am_devices_mspi_atxp032_init+0x58>
        {
            break;
    d9d2:	bf00      	nop
        }
    }
    if ( ui32Index == AM_DEVICES_MSPI_ATXP032_MAX_DEVICE_NUM )
    d9d4:	9b08      	ldr	r3, [sp, #32]
    d9d6:	2b01      	cmp	r3, #1
    d9d8:	d101      	bne.n	d9de <am_devices_mspi_atxp032_init+0x62>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    d9da:	2301      	movs	r3, #1
    d9dc:	e194      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
    }

    for ( uint32_t i = 0; i < (sizeof(g_ATXP032_DevConfig) / sizeof(g_ATXP032_DevConfig[0])); i++ )
    d9de:	2300      	movs	r3, #0
    d9e0:	9307      	str	r3, [sp, #28]
    d9e2:	e025      	b.n	da30 <am_devices_mspi_atxp032_init+0xb4>
    {
        if ( psMSPISettings->eDeviceConfig == g_ATXP032_DevConfig[i].eHalDeviceEnum )
    d9e4:	9b02      	ldr	r3, [sp, #8]
    d9e6:	781a      	ldrb	r2, [r3, #0]
    d9e8:	4990      	ldr	r1, [pc, #576]	; (dc2c <am_devices_mspi_atxp032_init+0x2b0>)
    d9ea:	9b07      	ldr	r3, [sp, #28]
    d9ec:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    d9f0:	429a      	cmp	r2, r3
    d9f2:	d11a      	bne.n	da2a <am_devices_mspi_atxp032_init+0xae>
        {
            psConfig = g_ATXP032_DevConfig[i].psDevConfig;
    d9f4:	4a8d      	ldr	r2, [pc, #564]	; (dc2c <am_devices_mspi_atxp032_init+0x2b0>)
    d9f6:	9b07      	ldr	r3, [sp, #28]
    d9f8:	00db      	lsls	r3, r3, #3
    d9fa:	4413      	add	r3, r2
    d9fc:	685b      	ldr	r3, [r3, #4]
    d9fe:	9309      	str	r3, [sp, #36]	; 0x24
            psConfig->eClockFreq = psMSPISettings->eClockFreq;
    da00:	9b02      	ldr	r3, [sp, #8]
    da02:	785a      	ldrb	r2, [r3, #1]
    da04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da06:	71da      	strb	r2, [r3, #7]
#if !defined(AM_PART_APOLLO4) && !defined(AM_PART_APOLLO4B)
            psConfig->pTCB = psMSPISettings->pNBTxnBuf;
    da08:	9b02      	ldr	r3, [sp, #8]
    da0a:	685a      	ldr	r2, [r3, #4]
    da0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da0e:	611a      	str	r2, [r3, #16]
            psConfig->ui32TCBSize = psMSPISettings->ui32NBTxnBufLength;
    da10:	9b02      	ldr	r3, [sp, #8]
    da12:	689a      	ldr	r2, [r3, #8]
    da14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da16:	60da      	str	r2, [r3, #12]
            psConfig->scramblingStartAddr = psMSPISettings->ui32ScramblingStartAddr;
    da18:	9b02      	ldr	r3, [sp, #8]
    da1a:	68da      	ldr	r2, [r3, #12]
    da1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da1e:	615a      	str	r2, [r3, #20]
            psConfig->scramblingEndAddr = psMSPISettings->ui32ScramblingEndAddr;
    da20:	9b02      	ldr	r3, [sp, #8]
    da22:	691a      	ldr	r2, [r3, #16]
    da24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da26:	619a      	str	r2, [r3, #24]
#endif
            break;
    da28:	e005      	b.n	da36 <am_devices_mspi_atxp032_init+0xba>
    for ( uint32_t i = 0; i < (sizeof(g_ATXP032_DevConfig) / sizeof(g_ATXP032_DevConfig[0])); i++ )
    da2a:	9b07      	ldr	r3, [sp, #28]
    da2c:	3301      	adds	r3, #1
    da2e:	9307      	str	r3, [sp, #28]
    da30:	9b07      	ldr	r3, [sp, #28]
    da32:	2b05      	cmp	r3, #5
    da34:	d9d6      	bls.n	d9e4 <am_devices_mspi_atxp032_init+0x68>
    //
#if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    am_hal_fault_capture_enable();
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_control(AM_HAL_MCUCTRL_CONTROL_FAULT_CAPTURE_ENABLE, 0);
    da36:	2100      	movs	r1, #0
    da38:	2000      	movs	r0, #0
    da3a:	f000 fe1f 	bl	e67c <am_hal_mcuctrl_control>
#endif // !AM_PART_APOLLO4

    //
    // Configure the MSPI for Serial or Quad-Paired Serial operation during initialization.
    //
    switch (psConfig->eDeviceConfig)
    da3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da40:	795b      	ldrb	r3, [r3, #5]
    da42:	2b07      	cmp	r3, #7
    da44:	f200 80ac 	bhi.w	dba0 <am_devices_mspi_atxp032_init+0x224>
    da48:	a201      	add	r2, pc, #4	; (adr r2, da50 <am_devices_mspi_atxp032_init+0xd4>)
    da4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    da4e:	bf00      	nop
    da50:	0000da71 	.word	0x0000da71
    da54:	0000db09 	.word	0x0000db09
    da58:	0000dba1 	.word	0x0000dba1
    da5c:	0000dba1 	.word	0x0000dba1
    da60:	0000da71 	.word	0x0000da71
    da64:	0000db09 	.word	0x0000db09
    da68:	0000da71 	.word	0x0000da71
    da6c:	0000db09 	.word	0x0000db09
    {
        case AM_HAL_MSPI_FLASH_SERIAL_CE0:
        case AM_HAL_MSPI_FLASH_QUAD_CE0:
        case AM_HAL_MSPI_FLASH_OCTAL_CE0:
            gAmAtxp032[ui32Index].stSetting = MSPI_ATXP032_Serial_CE0_MSPIConfig;
    da70:	496f      	ldr	r1, [pc, #444]	; (dc30 <am_devices_mspi_atxp032_init+0x2b4>)
    da72:	9a08      	ldr	r2, [sp, #32]
    da74:	4613      	mov	r3, r2
    da76:	009b      	lsls	r3, r3, #2
    da78:	4413      	add	r3, r2
    da7a:	00db      	lsls	r3, r3, #3
    da7c:	440b      	add	r3, r1
    da7e:	3308      	adds	r3, #8
    da80:	4a6c      	ldr	r2, [pc, #432]	; (dc34 <am_devices_mspi_atxp032_init+0x2b8>)
    da82:	461c      	mov	r4, r3
    da84:	4615      	mov	r5, r2
    da86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    da88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    da8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    da8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_initialize(ui32Module, &pMspiHandle))
    da92:	ab05      	add	r3, sp, #20
    da94:	4619      	mov	r1, r3
    da96:	9803      	ldr	r0, [sp, #12]
    da98:	f001 f986 	bl	eda8 <am_hal_mspi_initialize>
    da9c:	4603      	mov	r3, r0
    da9e:	2b00      	cmp	r3, #0
    daa0:	d004      	beq.n	daac <am_devices_mspi_atxp032_init+0x130>
            {
                am_util_stdio_printf("Error - Failed to initialize MSPI.\n");
    daa2:	4865      	ldr	r0, [pc, #404]	; (dc38 <am_devices_mspi_atxp032_init+0x2bc>)
    daa4:	f7ff fe2e 	bl	d704 <am_util_stdio_printf>
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    daa8:	2301      	movs	r3, #1
    daaa:	e12d      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
            }
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_power_control(pMspiHandle, AM_HAL_SYSCTRL_WAKE, false))
    daac:	9b05      	ldr	r3, [sp, #20]
    daae:	2200      	movs	r2, #0
    dab0:	2100      	movs	r1, #0
    dab2:	4618      	mov	r0, r3
    dab4:	f001 fff0 	bl	fa98 <am_hal_mspi_power_control>
    dab8:	4603      	mov	r3, r0
    daba:	2b00      	cmp	r3, #0
    dabc:	d004      	beq.n	dac8 <am_devices_mspi_atxp032_init+0x14c>
            {
                am_util_stdio_printf("Error - Failed to power on MSPI.\n");
    dabe:	485f      	ldr	r0, [pc, #380]	; (dc3c <am_devices_mspi_atxp032_init+0x2c0>)
    dac0:	f7ff fe20 	bl	d704 <am_util_stdio_printf>
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dac4:	2301      	movs	r3, #1
    dac6:	e11f      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
                am_util_stdio_printf("Error - Failed to configure MSPI device.\n");
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
              }
            }
#endif
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_device_configure(pMspiHandle, &MSPI_ATXP032_Serial_CE0_MSPIConfig))
    dac8:	9b05      	ldr	r3, [sp, #20]
    daca:	495a      	ldr	r1, [pc, #360]	; (dc34 <am_devices_mspi_atxp032_init+0x2b8>)
    dacc:	4618      	mov	r0, r3
    dace:	f001 f9f5 	bl	eebc <am_hal_mspi_device_configure>
    dad2:	4603      	mov	r3, r0
    dad4:	2b00      	cmp	r3, #0
    dad6:	d004      	beq.n	dae2 <am_devices_mspi_atxp032_init+0x166>
            {
                am_util_stdio_printf("Error - Failed to configure MSPI.\n");
    dad8:	4859      	ldr	r0, [pc, #356]	; (dc40 <am_devices_mspi_atxp032_init+0x2c4>)
    dada:	f7ff fe13 	bl	d704 <am_util_stdio_printf>
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dade:	2301      	movs	r3, #1
    dae0:	e112      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
            }


            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_enable(pMspiHandle))
    dae2:	9b05      	ldr	r3, [sp, #20]
    dae4:	4618      	mov	r0, r3
    dae6:	f001 faa9 	bl	f03c <am_hal_mspi_enable>
    daea:	4603      	mov	r3, r0
    daec:	2b00      	cmp	r3, #0
    daee:	d004      	beq.n	dafa <am_devices_mspi_atxp032_init+0x17e>
            {
                am_util_stdio_printf("Error - Failed to enable MSPI.\n");
    daf0:	4854      	ldr	r0, [pc, #336]	; (dc44 <am_devices_mspi_atxp032_init+0x2c8>)
    daf2:	f7ff fe07 	bl	d704 <am_util_stdio_printf>
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    daf6:	2301      	movs	r3, #1
    daf8:	e106      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
            }
            am_bsp_mspi_pins_enable(ui32Module, MSPI_ATXP032_Serial_CE0_MSPIConfig.eDeviceConfig);
    dafa:	4b4e      	ldr	r3, [pc, #312]	; (dc34 <am_devices_mspi_atxp032_init+0x2b8>)
    dafc:	795b      	ldrb	r3, [r3, #5]
    dafe:	4619      	mov	r1, r3
    db00:	9803      	ldr	r0, [sp, #12]
    db02:	f002 fd8d 	bl	10620 <am_bsp_mspi_pins_enable>
            break;
    db06:	e04d      	b.n	dba4 <am_devices_mspi_atxp032_init+0x228>
        case AM_HAL_MSPI_FLASH_SERIAL_CE1:
        case AM_HAL_MSPI_FLASH_QUAD_CE1:
        case AM_HAL_MSPI_FLASH_OCTAL_CE1:
            gAmAtxp032[ui32Index].stSetting = MSPI_ATXP032_Serial_CE1_MSPIConfig;
    db08:	4949      	ldr	r1, [pc, #292]	; (dc30 <am_devices_mspi_atxp032_init+0x2b4>)
    db0a:	9a08      	ldr	r2, [sp, #32]
    db0c:	4613      	mov	r3, r2
    db0e:	009b      	lsls	r3, r3, #2
    db10:	4413      	add	r3, r2
    db12:	00db      	lsls	r3, r3, #3
    db14:	440b      	add	r3, r1
    db16:	3308      	adds	r3, #8
    db18:	4a4b      	ldr	r2, [pc, #300]	; (dc48 <am_devices_mspi_atxp032_init+0x2cc>)
    db1a:	461c      	mov	r4, r3
    db1c:	4615      	mov	r5, r2
    db1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    db20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    db22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    db26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_initialize(ui32Module, &pMspiHandle))
    db2a:	ab05      	add	r3, sp, #20
    db2c:	4619      	mov	r1, r3
    db2e:	9803      	ldr	r0, [sp, #12]
    db30:	f001 f93a 	bl	eda8 <am_hal_mspi_initialize>
    db34:	4603      	mov	r3, r0
    db36:	2b00      	cmp	r3, #0
    db38:	d004      	beq.n	db44 <am_devices_mspi_atxp032_init+0x1c8>
            {
                am_util_stdio_printf("Error - Failed to initialize MSPI.\n");
    db3a:	483f      	ldr	r0, [pc, #252]	; (dc38 <am_devices_mspi_atxp032_init+0x2bc>)
    db3c:	f7ff fde2 	bl	d704 <am_util_stdio_printf>
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    db40:	2301      	movs	r3, #1
    db42:	e0e1      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
            }

            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_power_control(pMspiHandle, AM_HAL_SYSCTRL_WAKE, false))
    db44:	9b05      	ldr	r3, [sp, #20]
    db46:	2200      	movs	r2, #0
    db48:	2100      	movs	r1, #0
    db4a:	4618      	mov	r0, r3
    db4c:	f001 ffa4 	bl	fa98 <am_hal_mspi_power_control>
    db50:	4603      	mov	r3, r0
    db52:	2b00      	cmp	r3, #0
    db54:	d004      	beq.n	db60 <am_devices_mspi_atxp032_init+0x1e4>
            {
                am_util_stdio_printf("Error - Failed to power on MSPI.\n");
    db56:	4839      	ldr	r0, [pc, #228]	; (dc3c <am_devices_mspi_atxp032_init+0x2c0>)
    db58:	f7ff fdd4 	bl	d704 <am_util_stdio_printf>
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    db5c:	2301      	movs	r3, #1
    db5e:	e0d3      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
                am_util_stdio_printf("Error - Failed to configure MSPI device.\n");
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
              }
            }
#endif
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_device_configure(pMspiHandle, &MSPI_ATXP032_Serial_CE1_MSPIConfig))
    db60:	9b05      	ldr	r3, [sp, #20]
    db62:	4939      	ldr	r1, [pc, #228]	; (dc48 <am_devices_mspi_atxp032_init+0x2cc>)
    db64:	4618      	mov	r0, r3
    db66:	f001 f9a9 	bl	eebc <am_hal_mspi_device_configure>
    db6a:	4603      	mov	r3, r0
    db6c:	2b00      	cmp	r3, #0
    db6e:	d004      	beq.n	db7a <am_devices_mspi_atxp032_init+0x1fe>
            {
                am_util_stdio_printf("Error - Failed to configure MSPI.\n");
    db70:	4833      	ldr	r0, [pc, #204]	; (dc40 <am_devices_mspi_atxp032_init+0x2c4>)
    db72:	f7ff fdc7 	bl	d704 <am_util_stdio_printf>
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    db76:	2301      	movs	r3, #1
    db78:	e0c6      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
            }
            if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_enable(pMspiHandle))
    db7a:	9b05      	ldr	r3, [sp, #20]
    db7c:	4618      	mov	r0, r3
    db7e:	f001 fa5d 	bl	f03c <am_hal_mspi_enable>
    db82:	4603      	mov	r3, r0
    db84:	2b00      	cmp	r3, #0
    db86:	d004      	beq.n	db92 <am_devices_mspi_atxp032_init+0x216>
            {
                am_util_stdio_printf("Error - Failed to enable MSPI.\n");
    db88:	482e      	ldr	r0, [pc, #184]	; (dc44 <am_devices_mspi_atxp032_init+0x2c8>)
    db8a:	f7ff fdbb 	bl	d704 <am_util_stdio_printf>
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    db8e:	2301      	movs	r3, #1
    db90:	e0ba      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
            }
            am_bsp_mspi_pins_enable(ui32Module, MSPI_ATXP032_Serial_CE1_MSPIConfig.eDeviceConfig);
    db92:	4b2d      	ldr	r3, [pc, #180]	; (dc48 <am_devices_mspi_atxp032_init+0x2cc>)
    db94:	795b      	ldrb	r3, [r3, #5]
    db96:	4619      	mov	r1, r3
    db98:	9803      	ldr	r0, [sp, #12]
    db9a:	f002 fd41 	bl	10620 <am_bsp_mspi_pins_enable>
            break;
    db9e:	e001      	b.n	dba4 <am_devices_mspi_atxp032_init+0x228>
        default:
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dba0:	2301      	movs	r3, #1
    dba2:	e0b1      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
            //break;
    }

    gAmAtxp032[ui32Index].pMspiHandle = pMspiHandle;
    dba4:	9905      	ldr	r1, [sp, #20]
    dba6:	4822      	ldr	r0, [pc, #136]	; (dc30 <am_devices_mspi_atxp032_init+0x2b4>)
    dba8:	9a08      	ldr	r2, [sp, #32]
    dbaa:	4613      	mov	r3, r2
    dbac:	009b      	lsls	r3, r3, #2
    dbae:	4413      	add	r3, r2
    dbb0:	00db      	lsls	r3, r3, #3
    dbb2:	4403      	add	r3, r0
    dbb4:	3304      	adds	r3, #4
    dbb6:	6019      	str	r1, [r3, #0]
    gAmAtxp032[ui32Index].ui32Module = ui32Module;
    dbb8:	491d      	ldr	r1, [pc, #116]	; (dc30 <am_devices_mspi_atxp032_init+0x2b4>)
    dbba:	9a08      	ldr	r2, [sp, #32]
    dbbc:	4613      	mov	r3, r2
    dbbe:	009b      	lsls	r3, r3, #2
    dbc0:	4413      	add	r3, r2
    dbc2:	00db      	lsls	r3, r3, #3
    dbc4:	440b      	add	r3, r1
    dbc6:	9a03      	ldr	r2, [sp, #12]
    dbc8:	601a      	str	r2, [r3, #0]

    if (AM_HAL_STATUS_SUCCESS != am_devices_mspi_atxp032_reset((void*)&gAmAtxp032[ui32Index]))
    dbca:	9a08      	ldr	r2, [sp, #32]
    dbcc:	4613      	mov	r3, r2
    dbce:	009b      	lsls	r3, r3, #2
    dbd0:	4413      	add	r3, r2
    dbd2:	00db      	lsls	r3, r3, #3
    dbd4:	4a16      	ldr	r2, [pc, #88]	; (dc30 <am_devices_mspi_atxp032_init+0x2b4>)
    dbd6:	4413      	add	r3, r2
    dbd8:	4618      	mov	r0, r3
    dbda:	f000 f901 	bl	dde0 <am_devices_mspi_atxp032_reset>
    dbde:	4603      	mov	r3, r0
    dbe0:	2b00      	cmp	r3, #0
    dbe2:	d001      	beq.n	dbe8 <am_devices_mspi_atxp032_init+0x26c>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dbe4:	2301      	movs	r3, #1
    dbe6:	e08f      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
    }
    gAmAtxp032[ui32Index].stSetting = *psConfig;
    dbe8:	4911      	ldr	r1, [pc, #68]	; (dc30 <am_devices_mspi_atxp032_init+0x2b4>)
    dbea:	9a08      	ldr	r2, [sp, #32]
    dbec:	4613      	mov	r3, r2
    dbee:	009b      	lsls	r3, r3, #2
    dbf0:	4413      	add	r3, r2
    dbf2:	00db      	lsls	r3, r3, #3
    dbf4:	440b      	add	r3, r1
    dbf6:	f103 0208 	add.w	r2, r3, #8
    dbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dbfc:	4614      	mov	r4, r2
    dbfe:	461d      	mov	r5, r3
    dc00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dc02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dc04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    dc08:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    //
    // Device specific MSPI Flash initialization.
    //
    ui32Status = am_device_init_flash((void*)&gAmAtxp032[ui32Index]);
    dc0c:	9a08      	ldr	r2, [sp, #32]
    dc0e:	4613      	mov	r3, r2
    dc10:	009b      	lsls	r3, r3, #2
    dc12:	4413      	add	r3, r2
    dc14:	00db      	lsls	r3, r3, #3
    dc16:	4a06      	ldr	r2, [pc, #24]	; (dc30 <am_devices_mspi_atxp032_init+0x2b4>)
    dc18:	4413      	add	r3, r2
    dc1a:	4618      	mov	r0, r3
    dc1c:	f7ff fd9a 	bl	d754 <am_device_init_flash>
    dc20:	9006      	str	r0, [sp, #24]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dc22:	9b06      	ldr	r3, [sp, #24]
    dc24:	2b00      	cmp	r3, #0
    dc26:	d011      	beq.n	dc4c <am_devices_mspi_atxp032_init+0x2d0>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dc28:	2301      	movs	r3, #1
    dc2a:	e06d      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
    dc2c:	100010a8 	.word	0x100010a8
    dc30:	10005a1c 	.word	0x10005a1c
    dc34:	10001000 	.word	0x10001000
    dc38:	00011210 	.word	0x00011210
    dc3c:	00011234 	.word	0x00011234
    dc40:	00011258 	.word	0x00011258
    dc44:	0001127c 	.word	0x0001127c
    dc48:	1000101c 	.word	0x1000101c
    }
    am_devices_mspi_atxp032_enable_xip((void*)&gAmAtxp032[ui32Index]);
    dc4c:	9a08      	ldr	r2, [sp, #32]
    dc4e:	4613      	mov	r3, r2
    dc50:	009b      	lsls	r3, r3, #2
    dc52:	4413      	add	r3, r2
    dc54:	00db      	lsls	r3, r3, #3
    dc56:	4a2e      	ldr	r2, [pc, #184]	; (dd10 <am_devices_mspi_atxp032_init+0x394>)
    dc58:	4413      	add	r3, r2
    dc5a:	4618      	mov	r0, r3
    dc5c:	f000 fb12 	bl	e284 <am_devices_mspi_atxp032_enable_xip>
    // Disable MSPI defore re-configuring it
    ui32Status = am_hal_mspi_disable(pMspiHandle);
    dc60:	9b05      	ldr	r3, [sp, #20]
    dc62:	4618      	mov	r0, r3
    dc64:	f001 f8be 	bl	ede4 <am_hal_mspi_disable>
    dc68:	9006      	str	r0, [sp, #24]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dc6a:	9b06      	ldr	r3, [sp, #24]
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	d001      	beq.n	dc74 <am_devices_mspi_atxp032_init+0x2f8>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dc70:	2301      	movs	r3, #1
    dc72:	e049      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
    }
    //
    // Re-Configure the MSPI for the requested operation mode.
    //
    ui32Status = am_hal_mspi_device_configure(pMspiHandle, psConfig);
    dc74:	9b05      	ldr	r3, [sp, #20]
    dc76:	9909      	ldr	r1, [sp, #36]	; 0x24
    dc78:	4618      	mov	r0, r3
    dc7a:	f001 f91f 	bl	eebc <am_hal_mspi_device_configure>
    dc7e:	9006      	str	r0, [sp, #24]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dc80:	9b06      	ldr	r3, [sp, #24]
    dc82:	2b00      	cmp	r3, #0
    dc84:	d001      	beq.n	dc8a <am_devices_mspi_atxp032_init+0x30e>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dc86:	2301      	movs	r3, #1
    dc88:	e03e      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
    }
    // Re-Enable MSPI
    ui32Status = am_hal_mspi_enable(pMspiHandle);
    dc8a:	9b05      	ldr	r3, [sp, #20]
    dc8c:	4618      	mov	r0, r3
    dc8e:	f001 f9d5 	bl	f03c <am_hal_mspi_enable>
    dc92:	9006      	str	r0, [sp, #24]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dc94:	9b06      	ldr	r3, [sp, #24]
    dc96:	2b00      	cmp	r3, #0
    dc98:	d001      	beq.n	dc9e <am_devices_mspi_atxp032_init+0x322>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dc9a:	2301      	movs	r3, #1
    dc9c:	e034      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
    }

    //
    // Configure the MSPI pins.
    //
    am_bsp_mspi_pins_enable(ui32Module, psConfig->eDeviceConfig);
    dc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dca0:	795b      	ldrb	r3, [r3, #5]
    dca2:	4619      	mov	r1, r3
    dca4:	9803      	ldr	r0, [sp, #12]
    dca6:	f002 fcbb 	bl	10620 <am_bsp_mspi_pins_enable>

    //
    // Enable MSPI interrupts.
    //

    ui32Status = am_hal_mspi_interrupt_clear(pMspiHandle, AM_HAL_MSPI_INT_CQUPD | AM_HAL_MSPI_INT_ERR );
    dcaa:	9b05      	ldr	r3, [sp, #20]
    dcac:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
    dcb0:	4618      	mov	r0, r3
    dcb2:	f001 fedf 	bl	fa74 <am_hal_mspi_interrupt_clear>
    dcb6:	9006      	str	r0, [sp, #24]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dcb8:	9b06      	ldr	r3, [sp, #24]
    dcba:	2b00      	cmp	r3, #0
    dcbc:	d001      	beq.n	dcc2 <am_devices_mspi_atxp032_init+0x346>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dcbe:	2301      	movs	r3, #1
    dcc0:	e022      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
    }

    ui32Status = am_hal_mspi_interrupt_enable(pMspiHandle, AM_HAL_MSPI_INT_CQUPD | AM_HAL_MSPI_INT_ERR );
    dcc2:	9b05      	ldr	r3, [sp, #20]
    dcc4:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
    dcc8:	4618      	mov	r0, r3
    dcca:	f001 fea7 	bl	fa1c <am_hal_mspi_interrupt_enable>
    dcce:	9006      	str	r0, [sp, #24]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dcd0:	9b06      	ldr	r3, [sp, #24]
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	d001      	beq.n	dcda <am_devices_mspi_atxp032_init+0x35e>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dcd6:	2301      	movs	r3, #1
    dcd8:	e016      	b.n	dd08 <am_devices_mspi_atxp032_init+0x38c>
    }

    //
    // Return the handle.
    //
    gAmAtxp032[ui32Index].bOccupied = true;
    dcda:	490d      	ldr	r1, [pc, #52]	; (dd10 <am_devices_mspi_atxp032_init+0x394>)
    dcdc:	9a08      	ldr	r2, [sp, #32]
    dcde:	4613      	mov	r3, r2
    dce0:	009b      	lsls	r3, r3, #2
    dce2:	4413      	add	r3, r2
    dce4:	00db      	lsls	r3, r3, #3
    dce6:	440b      	add	r3, r1
    dce8:	3324      	adds	r3, #36	; 0x24
    dcea:	2201      	movs	r2, #1
    dcec:	701a      	strb	r2, [r3, #0]
    *ppMspiHandle = pMspiHandle;
    dcee:	9a05      	ldr	r2, [sp, #20]
    dcf0:	9b00      	ldr	r3, [sp, #0]
    dcf2:	601a      	str	r2, [r3, #0]
    *ppHandle = (void *)&gAmAtxp032[ui32Index];
    dcf4:	9a08      	ldr	r2, [sp, #32]
    dcf6:	4613      	mov	r3, r2
    dcf8:	009b      	lsls	r3, r3, #2
    dcfa:	4413      	add	r3, r2
    dcfc:	00db      	lsls	r3, r3, #3
    dcfe:	4a04      	ldr	r2, [pc, #16]	; (dd10 <am_devices_mspi_atxp032_init+0x394>)
    dd00:	441a      	add	r2, r3
    dd02:	9b01      	ldr	r3, [sp, #4]
    dd04:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    dd06:	2300      	movs	r3, #0
}
    dd08:	4618      	mov	r0, r3
    dd0a:	b00b      	add	sp, #44	; 0x2c
    dd0c:	bd30      	pop	{r4, r5, pc}
    dd0e:	bf00      	nop
    dd10:	10005a1c 	.word	0x10005a1c

0000dd14 <am_devices_mspi_atxp032_deinit>:
//! @return None.
//
//*****************************************************************************
uint32_t
am_devices_mspi_atxp032_deinit(void *pHandle)
{
    dd14:	b500      	push	{lr}
    dd16:	b085      	sub	sp, #20
    dd18:	9001      	str	r0, [sp, #4]
    uint32_t      ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    dd1a:	9b01      	ldr	r3, [sp, #4]
    dd1c:	9303      	str	r3, [sp, #12]

    //
    // Device specific MSPI Flash de-initialization.
    //
    ui32Status = am_device_deinit_flash(pHandle);
    dd1e:	9801      	ldr	r0, [sp, #4]
    dd20:	f7ff fd7a 	bl	d818 <am_device_deinit_flash>
    dd24:	9002      	str	r0, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dd26:	9b02      	ldr	r3, [sp, #8]
    dd28:	2b00      	cmp	r3, #0
    dd2a:	d001      	beq.n	dd30 <am_devices_mspi_atxp032_deinit+0x1c>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dd2c:	2301      	movs	r3, #1
    dd2e:	e04e      	b.n	ddce <am_devices_mspi_atxp032_deinit+0xba>
    }

    if (AM_HAL_STATUS_SUCCESS != am_devices_mspi_atxp032_reset(pHandle))
    dd30:	9801      	ldr	r0, [sp, #4]
    dd32:	f000 f855 	bl	dde0 <am_devices_mspi_atxp032_reset>
    dd36:	4603      	mov	r3, r0
    dd38:	2b00      	cmp	r3, #0
    dd3a:	d001      	beq.n	dd40 <am_devices_mspi_atxp032_deinit+0x2c>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dd3c:	2301      	movs	r3, #1
    dd3e:	e046      	b.n	ddce <am_devices_mspi_atxp032_deinit+0xba>
    }

    //
    // Disable and clear the interrupts to start with.
    //
    ui32Status = am_hal_mspi_interrupt_disable(pFlash->pMspiHandle, 0xFFFFFFFF);
    dd40:	9b03      	ldr	r3, [sp, #12]
    dd42:	685b      	ldr	r3, [r3, #4]
    dd44:	f04f 31ff 	mov.w	r1, #4294967295
    dd48:	4618      	mov	r0, r3
    dd4a:	f001 fe7d 	bl	fa48 <am_hal_mspi_interrupt_disable>
    dd4e:	9002      	str	r0, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dd50:	9b02      	ldr	r3, [sp, #8]
    dd52:	2b00      	cmp	r3, #0
    dd54:	d001      	beq.n	dd5a <am_devices_mspi_atxp032_deinit+0x46>
    {
      return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dd56:	2301      	movs	r3, #1
    dd58:	e039      	b.n	ddce <am_devices_mspi_atxp032_deinit+0xba>
    }
    ui32Status = am_hal_mspi_interrupt_clear(pFlash->pMspiHandle, 0xFFFFFFFF);
    dd5a:	9b03      	ldr	r3, [sp, #12]
    dd5c:	685b      	ldr	r3, [r3, #4]
    dd5e:	f04f 31ff 	mov.w	r1, #4294967295
    dd62:	4618      	mov	r0, r3
    dd64:	f001 fe86 	bl	fa74 <am_hal_mspi_interrupt_clear>
    dd68:	9002      	str	r0, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dd6a:	9b02      	ldr	r3, [sp, #8]
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d001      	beq.n	dd74 <am_devices_mspi_atxp032_deinit+0x60>
    {
      return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dd70:	2301      	movs	r3, #1
    dd72:	e02c      	b.n	ddce <am_devices_mspi_atxp032_deinit+0xba>
    }

    //
    // Disable the MSPI instance.
    //
    ui32Status = am_hal_mspi_disable(pFlash->pMspiHandle);
    dd74:	9b03      	ldr	r3, [sp, #12]
    dd76:	685b      	ldr	r3, [r3, #4]
    dd78:	4618      	mov	r0, r3
    dd7a:	f001 f833 	bl	ede4 <am_hal_mspi_disable>
    dd7e:	9002      	str	r0, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dd80:	9b02      	ldr	r3, [sp, #8]
    dd82:	2b00      	cmp	r3, #0
    dd84:	d001      	beq.n	dd8a <am_devices_mspi_atxp032_deinit+0x76>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dd86:	2301      	movs	r3, #1
    dd88:	e021      	b.n	ddce <am_devices_mspi_atxp032_deinit+0xba>
    }

    if (AM_HAL_STATUS_SUCCESS != am_hal_mspi_power_control(pFlash->pMspiHandle, AM_HAL_SYSCTRL_DEEPSLEEP, false))
    dd8a:	9b03      	ldr	r3, [sp, #12]
    dd8c:	685b      	ldr	r3, [r3, #4]
    dd8e:	2200      	movs	r2, #0
    dd90:	2102      	movs	r1, #2
    dd92:	4618      	mov	r0, r3
    dd94:	f001 fe80 	bl	fa98 <am_hal_mspi_power_control>
    dd98:	4603      	mov	r3, r0
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d004      	beq.n	dda8 <am_devices_mspi_atxp032_deinit+0x94>
    {
        am_util_stdio_printf("Error - Failed to power on MSPI.\n");
    dd9e:	480e      	ldr	r0, [pc, #56]	; (ddd8 <am_devices_mspi_atxp032_deinit+0xc4>)
    dda0:	f7ff fcb0 	bl	d704 <am_util_stdio_printf>
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dda4:	2301      	movs	r3, #1
    dda6:	e012      	b.n	ddce <am_devices_mspi_atxp032_deinit+0xba>
    }

    //
    // Deinitialize the MSPI instance.
    //
    ui32Status = am_hal_mspi_deinitialize(pFlash->pMspiHandle);
    dda8:	9b03      	ldr	r3, [sp, #12]
    ddaa:	685b      	ldr	r3, [r3, #4]
    ddac:	4618      	mov	r0, r3
    ddae:	f001 f84d 	bl	ee4c <am_hal_mspi_deinitialize>
    ddb2:	9002      	str	r0, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    ddb4:	9b02      	ldr	r3, [sp, #8]
    ddb6:	2b00      	cmp	r3, #0
    ddb8:	d001      	beq.n	ddbe <am_devices_mspi_atxp032_deinit+0xaa>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    ddba:	2301      	movs	r3, #1
    ddbc:	e007      	b.n	ddce <am_devices_mspi_atxp032_deinit+0xba>
    }

    // Free this device handle
    pFlash->bOccupied = false;
    ddbe:	9b03      	ldr	r3, [sp, #12]
    ddc0:	2200      	movs	r2, #0
    ddc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    //
    // Clear the Flash Caching.
    //
#if !defined(AM_PART_APOLLO4) && !defined(AM_PART_APOLLO4B)
#if AM_CMSIS_REGS
    CACHECTRL->CACHECFG = 0;
    ddc6:	4b05      	ldr	r3, [pc, #20]	; (dddc <am_devices_mspi_atxp032_deinit+0xc8>)
    ddc8:	2200      	movs	r2, #0
    ddca:	601a      	str	r2, [r3, #0]
#endif // AM_CMSIS_REGS
#endif // !AM_PART_APOLLO4
    //
    // Return the status.
    //
    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    ddcc:	2300      	movs	r3, #0
}
    ddce:	4618      	mov	r0, r3
    ddd0:	b005      	add	sp, #20
    ddd2:	f85d fb04 	ldr.w	pc, [sp], #4
    ddd6:	bf00      	nop
    ddd8:	00011234 	.word	0x00011234
    dddc:	40018000 	.word	0x40018000

0000dde0 <am_devices_mspi_atxp032_reset>:
//! @return 32-bit status
//
//*****************************************************************************
uint32_t
am_devices_mspi_atxp032_reset(void *pHandle)
{
    dde0:	b500      	push	{lr}
    dde2:	b0a5      	sub	sp, #148	; 0x94
    dde4:	9003      	str	r0, [sp, #12]
    uint32_t      ui32PIOBuffer[32] = {0};
    dde6:	ab04      	add	r3, sp, #16
    dde8:	2280      	movs	r2, #128	; 0x80
    ddea:	2100      	movs	r1, #0
    ddec:	4618      	mov	r0, r3
    ddee:	f000 fadd 	bl	e3ac <memset>

    //
    // Return the device to SPI mode.
    //
    if (AM_HAL_STATUS_SUCCESS != am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_ATXP032_RETURN_TO_SPI_MODE, false, 0, ui32PIOBuffer, 0))
    ddf2:	2300      	movs	r3, #0
    ddf4:	9301      	str	r3, [sp, #4]
    ddf6:	ab04      	add	r3, sp, #16
    ddf8:	9300      	str	r3, [sp, #0]
    ddfa:	2300      	movs	r3, #0
    ddfc:	2200      	movs	r2, #0
    ddfe:	21ff      	movs	r1, #255	; 0xff
    de00:	9803      	ldr	r0, [sp, #12]
    de02:	f7ff fd39 	bl	d878 <am_devices_mspi_atxp032_command_write>
    de06:	4603      	mov	r3, r0
    de08:	2b00      	cmp	r3, #0
    de0a:	d001      	beq.n	de10 <am_devices_mspi_atxp032_reset+0x30>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    de0c:	2301      	movs	r3, #1
    de0e:	e000      	b.n	de12 <am_devices_mspi_atxp032_reset+0x32>
    }

    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    de10:	2300      	movs	r3, #0
}
    de12:	4618      	mov	r0, r3
    de14:	b025      	add	sp, #148	; 0x94
    de16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000de1c <am_devices_mspi_atxp032_read>:
uint32_t
am_devices_mspi_atxp032_read(void *pHandle, uint8_t *pui8RxBuffer,
                             uint32_t ui32ReadAddress,
                             uint32_t ui32NumBytes,
                             bool bWaitForCompletion)
{
    de1c:	b500      	push	{lr}
    de1e:	b091      	sub	sp, #68	; 0x44
    de20:	9005      	str	r0, [sp, #20]
    de22:	9104      	str	r1, [sp, #16]
    de24:	9203      	str	r2, [sp, #12]
    de26:	9302      	str	r3, [sp, #8]
    am_hal_mspi_dma_transfer_t    Transaction;
    uint32_t                      ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    de28:	9b05      	ldr	r3, [sp, #20]
    de2a:	930e      	str	r3, [sp, #56]	; 0x38

    // Set the DMA priority
    Transaction.ui8Priority = 1;
    de2c:	2301      	movs	r3, #1
    de2e:	f88d 301d 	strb.w	r3, [sp, #29]

    // Set the transfer direction to RX (Read)
    Transaction.eDirection = AM_HAL_MSPI_RX;
    de32:	2300      	movs	r3, #0
    de34:	f88d 301e 	strb.w	r3, [sp, #30]

    // Set the transfer count in bytes.
    Transaction.ui32TransferCount = ui32NumBytes;
    de38:	9b02      	ldr	r3, [sp, #8]
    de3a:	9308      	str	r3, [sp, #32]

    // Set the address to read data from.
    Transaction.ui32DeviceAddress = ui32ReadAddress;
    de3c:	9b03      	ldr	r3, [sp, #12]
    de3e:	9309      	str	r3, [sp, #36]	; 0x24

    // Set the target SRAM buffer address.
    Transaction.ui32SRAMAddress = (uint32_t)pui8RxBuffer;
    de40:	9b04      	ldr	r3, [sp, #16]
    de42:	930a      	str	r3, [sp, #40]	; 0x28

    // Clear the CQ stimulus.
    Transaction.ui32PauseCondition = 0;
    de44:	2300      	movs	r3, #0
    de46:	930b      	str	r3, [sp, #44]	; 0x2c
    // Clear the post-processing
    Transaction.ui32StatusSetClr = 0;
    de48:	2300      	movs	r3, #0
    de4a:	930c      	str	r3, [sp, #48]	; 0x30

#if defined(AM_PART_APOLLO4)
    Transaction.eDeviceNum         = AM_HAL_MSPI_DEVICE0;
#endif

    if (bWaitForCompletion)
    de4c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    de50:	2b00      	cmp	r3, #0
    de52:	d030      	beq.n	deb6 <am_devices_mspi_atxp032_read+0x9a>
    {
        // Start the transaction.
        volatile bool bDMAComplete = false;
    de54:	2300      	movs	r3, #0
    de56:	f88d 301b 	strb.w	r3, [sp, #27]
        ui32Status = am_hal_mspi_nonblocking_transfer(pFlash->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA, pfnMSPI_ATXP032_Callback, (void *)&bDMAComplete);
    de5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de5c:	6858      	ldr	r0, [r3, #4]
    de5e:	a907      	add	r1, sp, #28
    de60:	f10d 031b 	add.w	r3, sp, #27
    de64:	9300      	str	r3, [sp, #0]
    de66:	4b1e      	ldr	r3, [pc, #120]	; (dee0 <am_devices_mspi_atxp032_read+0xc4>)
    de68:	2201      	movs	r2, #1
    de6a:	f001 fd31 	bl	f8d0 <am_hal_mspi_nonblocking_transfer>
    de6e:	900d      	str	r0, [sp, #52]	; 0x34

        // Check the transaction status.
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    de70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de72:	2b00      	cmp	r3, #0
    de74:	d001      	beq.n	de7a <am_devices_mspi_atxp032_read+0x5e>
        {
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    de76:	2301      	movs	r3, #1
    de78:	e02d      	b.n	ded6 <am_devices_mspi_atxp032_read+0xba>
        }

        // Wait for DMA Complete or Timeout
        for (uint32_t i = 0; i < AM_DEVICES_MSPI_ATXP032_TIMEOUT; i++)
    de7a:	2300      	movs	r3, #0
    de7c:	930f      	str	r3, [sp, #60]	; 0x3c
    de7e:	e00a      	b.n	de96 <am_devices_mspi_atxp032_read+0x7a>
        {
            if (bDMAComplete)
    de80:	f89d 301b 	ldrb.w	r3, [sp, #27]
    de84:	b2db      	uxtb	r3, r3
    de86:	2b00      	cmp	r3, #0
    de88:	d10a      	bne.n	dea0 <am_devices_mspi_atxp032_read+0x84>
                break;
            }
            //
            // Call the BOOTROM cycle function to delay for about 1 microsecond.
            //
            am_util_delay_us(1);
    de8a:	2001      	movs	r0, #1
    de8c:	f7fe fbee 	bl	c66c <am_util_delay_us>
        for (uint32_t i = 0; i < AM_DEVICES_MSPI_ATXP032_TIMEOUT; i++)
    de90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de92:	3301      	adds	r3, #1
    de94:	930f      	str	r3, [sp, #60]	; 0x3c
    de96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de98:	4a12      	ldr	r2, [pc, #72]	; (dee4 <am_devices_mspi_atxp032_read+0xc8>)
    de9a:	4293      	cmp	r3, r2
    de9c:	d9f0      	bls.n	de80 <am_devices_mspi_atxp032_read+0x64>
    de9e:	e000      	b.n	dea2 <am_devices_mspi_atxp032_read+0x86>
                break;
    dea0:	bf00      	nop
        }

        // Check the status.
        if (!bDMAComplete)
    dea2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    dea6:	b2db      	uxtb	r3, r3
    dea8:	f083 0301 	eor.w	r3, r3, #1
    deac:	b2db      	uxtb	r3, r3
    deae:	2b00      	cmp	r3, #0
    deb0:	d010      	beq.n	ded4 <am_devices_mspi_atxp032_read+0xb8>
        {
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    deb2:	2301      	movs	r3, #1
    deb4:	e00f      	b.n	ded6 <am_devices_mspi_atxp032_read+0xba>
        }
    }
    else
    {
        // Check the transaction status.
        ui32Status = am_hal_mspi_nonblocking_transfer(pFlash->pMspiHandle, &Transaction,
    deb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    deb8:	6858      	ldr	r0, [r3, #4]
    deba:	a907      	add	r1, sp, #28
    debc:	2300      	movs	r3, #0
    debe:	9300      	str	r3, [sp, #0]
    dec0:	2300      	movs	r3, #0
    dec2:	2201      	movs	r2, #1
    dec4:	f001 fd04 	bl	f8d0 <am_hal_mspi_nonblocking_transfer>
    dec8:	900d      	str	r0, [sp, #52]	; 0x34
                                                      AM_HAL_MSPI_TRANS_DMA, NULL, NULL);
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    deca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    decc:	2b00      	cmp	r3, #0
    dece:	d001      	beq.n	ded4 <am_devices_mspi_atxp032_read+0xb8>
        {
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    ded0:	2301      	movs	r3, #1
    ded2:	e000      	b.n	ded6 <am_devices_mspi_atxp032_read+0xba>
    }

    //
    // Return the status.
    //
    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    ded4:	2300      	movs	r3, #0
}
    ded6:	4618      	mov	r0, r3
    ded8:	b011      	add	sp, #68	; 0x44
    deda:	f85d fb04 	ldr.w	pc, [sp], #4
    dede:	bf00      	nop
    dee0:	0000d969 	.word	0x0000d969
    dee4:	000f423f 	.word	0x000f423f

0000dee8 <am_devices_mspi_atxp032_write>:
uint32_t
am_devices_mspi_atxp032_write(void *pHandle, uint8_t *pui8TxBuffer,
                              uint32_t ui32WriteAddress,
                              uint32_t ui32NumBytes,
                              bool bWaitForCompletion)
{
    dee8:	b500      	push	{lr}
    deea:	b0b7      	sub	sp, #220	; 0xdc
    deec:	9005      	str	r0, [sp, #20]
    deee:	9104      	str	r1, [sp, #16]
    def0:	9203      	str	r2, [sp, #12]
    def2:	9302      	str	r3, [sp, #8]
    am_hal_mspi_dma_transfer_t    Transaction;
    bool                          bWriteComplete = false;
    def4:	2300      	movs	r3, #0
    def6:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
    uint32_t                      ui32BytesLeft = ui32NumBytes;
    defa:	9b02      	ldr	r3, [sp, #8]
    defc:	9334      	str	r3, [sp, #208]	; 0xd0
    uint32_t                      ui32PageAddress = ui32WriteAddress;
    defe:	9b03      	ldr	r3, [sp, #12]
    df00:	9333      	str	r3, [sp, #204]	; 0xcc
    uint32_t                      ui32BufferAddress = (uint32_t)pui8TxBuffer;
    df02:	9b04      	ldr	r3, [sp, #16]
    df04:	9332      	str	r3, [sp, #200]	; 0xc8
    uint32_t                      ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    df06:	9b05      	ldr	r3, [sp, #20]
    df08:	932f      	str	r3, [sp, #188]	; 0xbc
    uint32_t      ui32PIOBuffer[32] = {0};
    df0a:	ab08      	add	r3, sp, #32
    df0c:	2280      	movs	r2, #128	; 0x80
    df0e:	2100      	movs	r1, #0
    df10:	4618      	mov	r0, r3
    df12:	f000 fa4b 	bl	e3ac <memset>

    while (ui32BytesLeft > 0)
    df16:	e0d7      	b.n	e0c8 <am_devices_mspi_atxp032_write+0x1e0>
    {
        //
        // Send the command sequence to enable writing.
        //
        ui32Status = am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_MSPI_ATXP032_WRITE_ENABLE, false, 0, ui32PIOBuffer, 0);
    df18:	2300      	movs	r3, #0
    df1a:	9301      	str	r3, [sp, #4]
    df1c:	ab08      	add	r3, sp, #32
    df1e:	9300      	str	r3, [sp, #0]
    df20:	2300      	movs	r3, #0
    df22:	2200      	movs	r2, #0
    df24:	2106      	movs	r1, #6
    df26:	9805      	ldr	r0, [sp, #20]
    df28:	f7ff fca6 	bl	d878 <am_devices_mspi_atxp032_command_write>
    df2c:	902e      	str	r0, [sp, #184]	; 0xb8
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    df2e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    df30:	2b00      	cmp	r3, #0
    df32:	d001      	beq.n	df38 <am_devices_mspi_atxp032_write+0x50>
        {
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    df34:	2301      	movs	r3, #1
    df36:	e0cc      	b.n	e0d2 <am_devices_mspi_atxp032_write+0x1ea>
        }

        // Set the DMA priority
        Transaction.ui8Priority = 1;
    df38:	2301      	movs	r3, #1
    df3a:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1

        // Set the transfer direction to TX (Write)
        Transaction.eDirection = AM_HAL_MSPI_TX;
    df3e:	2301      	movs	r3, #1
    df40:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2

        if (ui32BytesLeft > AM_DEVICES_MSPI_ATXP032_PAGE_SIZE)
    df44:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    df46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    df4a:	d907      	bls.n	df5c <am_devices_mspi_atxp032_write+0x74>
        {
            // Set the transfer count in bytes.
            Transaction.ui32TransferCount = AM_DEVICES_MSPI_ATXP032_PAGE_SIZE;
    df4c:	f44f 7380 	mov.w	r3, #256	; 0x100
    df50:	9329      	str	r3, [sp, #164]	; 0xa4
            ui32BytesLeft -= AM_DEVICES_MSPI_ATXP032_PAGE_SIZE;
    df52:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    df54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
    df58:	9334      	str	r3, [sp, #208]	; 0xd0
    df5a:	e003      	b.n	df64 <am_devices_mspi_atxp032_write+0x7c>
        }
        else
        {
            // Set the transfer count in bytes.
            Transaction.ui32TransferCount = ui32BytesLeft;
    df5c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    df5e:	9329      	str	r3, [sp, #164]	; 0xa4
            ui32BytesLeft = 0;
    df60:	2300      	movs	r3, #0
    df62:	9334      	str	r3, [sp, #208]	; 0xd0

        //    Transaction.eAddrExtSize = AM_HAL_MSPI_ADDR_EXT_0_BYTE;
        //    Transaction.ui8AddrExtValue = 0;

        // Set the address to read data to.
        Transaction.ui32DeviceAddress = ui32PageAddress;
    df64:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    df66:	932a      	str	r3, [sp, #168]	; 0xa8
        ui32PageAddress += AM_DEVICES_MSPI_ATXP032_PAGE_SIZE;
    df68:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    df6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    df6e:	9333      	str	r3, [sp, #204]	; 0xcc

        // Set the source SRAM buffer address.
        Transaction.ui32SRAMAddress = ui32BufferAddress;
    df70:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    df72:	932b      	str	r3, [sp, #172]	; 0xac
        ui32BufferAddress += AM_DEVICES_MSPI_ATXP032_PAGE_SIZE;
    df74:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    df76:	f503 7380 	add.w	r3, r3, #256	; 0x100
    df7a:	9332      	str	r3, [sp, #200]	; 0xc8

        // Clear the CQ stimulus.
        Transaction.ui32PauseCondition = 0;
    df7c:	2300      	movs	r3, #0
    df7e:	932c      	str	r3, [sp, #176]	; 0xb0
        // Clear the post-processing
        Transaction.ui32StatusSetClr = 0;
    df80:	2300      	movs	r3, #0
    df82:	932d      	str	r3, [sp, #180]	; 0xb4
#if defined(AM_PART_APOLLO4)
    Transaction.eDeviceNum         = AM_HAL_MSPI_DEVICE0;
#endif

        // Start the transaction.
        volatile bool bDMAComplete = false;
    df84:	2300      	movs	r3, #0
    df86:	f88d 301f 	strb.w	r3, [sp, #31]
        ui32Status = am_hal_mspi_nonblocking_transfer(pFlash->pMspiHandle, &Transaction, AM_HAL_MSPI_TRANS_DMA, pfnMSPI_ATXP032_Callback, (void*)&bDMAComplete);
    df8a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    df8c:	6858      	ldr	r0, [r3, #4]
    df8e:	a928      	add	r1, sp, #160	; 0xa0
    df90:	f10d 031f 	add.w	r3, sp, #31
    df94:	9300      	str	r3, [sp, #0]
    df96:	4b51      	ldr	r3, [pc, #324]	; (e0dc <am_devices_mspi_atxp032_write+0x1f4>)
    df98:	2201      	movs	r2, #1
    df9a:	f001 fc99 	bl	f8d0 <am_hal_mspi_nonblocking_transfer>
    df9e:	902e      	str	r0, [sp, #184]	; 0xb8

        // Check the transaction status.
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    dfa0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    dfa2:	2b00      	cmp	r3, #0
    dfa4:	d001      	beq.n	dfaa <am_devices_mspi_atxp032_write+0xc2>
        {
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dfa6:	2301      	movs	r3, #1
    dfa8:	e093      	b.n	e0d2 <am_devices_mspi_atxp032_write+0x1ea>
        }

        // Wait for DMA Complete or Timeout
        for (uint32_t i = 0; i < AM_DEVICES_MSPI_ATXP032_TIMEOUT; i++)
    dfaa:	2300      	movs	r3, #0
    dfac:	9331      	str	r3, [sp, #196]	; 0xc4
    dfae:	e00a      	b.n	dfc6 <am_devices_mspi_atxp032_write+0xde>
        {
            if (bDMAComplete)
    dfb0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    dfb4:	b2db      	uxtb	r3, r3
    dfb6:	2b00      	cmp	r3, #0
    dfb8:	d10a      	bne.n	dfd0 <am_devices_mspi_atxp032_write+0xe8>
                break;
            }
            //
            // Call the BOOTROM cycle function to delay for about 1 microsecond.
            //
            am_util_delay_us(1);
    dfba:	2001      	movs	r0, #1
    dfbc:	f7fe fb56 	bl	c66c <am_util_delay_us>
        for (uint32_t i = 0; i < AM_DEVICES_MSPI_ATXP032_TIMEOUT; i++)
    dfc0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    dfc2:	3301      	adds	r3, #1
    dfc4:	9331      	str	r3, [sp, #196]	; 0xc4
    dfc6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    dfc8:	4a45      	ldr	r2, [pc, #276]	; (e0e0 <am_devices_mspi_atxp032_write+0x1f8>)
    dfca:	4293      	cmp	r3, r2
    dfcc:	d9f0      	bls.n	dfb0 <am_devices_mspi_atxp032_write+0xc8>
    dfce:	e000      	b.n	dfd2 <am_devices_mspi_atxp032_write+0xea>
                break;
    dfd0:	bf00      	nop
        }

        // Check the status.
        if (!bDMAComplete)
    dfd2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    dfd6:	b2db      	uxtb	r3, r3
    dfd8:	f083 0301 	eor.w	r3, r3, #1
    dfdc:	b2db      	uxtb	r3, r3
    dfde:	2b00      	cmp	r3, #0
    dfe0:	d001      	beq.n	dfe6 <am_devices_mspi_atxp032_write+0xfe>
        {
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    dfe2:	2301      	movs	r3, #1
    dfe4:	e075      	b.n	e0d2 <am_devices_mspi_atxp032_write+0x1ea>
        }

        //
        // Wait for the Write In Progress to indicate the erase is complete.
        //
        for (uint32_t i = 0; i < AM_DEVICES_MSPI_ATXP032_TIMEOUT; i++)
    dfe6:	2300      	movs	r3, #0
    dfe8:	9330      	str	r3, [sp, #192]	; 0xc0
    dfea:	e057      	b.n	e09c <am_devices_mspi_atxp032_write+0x1b4>
        {
            // ATXP032 has different number of bytes for each speed of status read.
            switch ( pFlash->stSetting.eDeviceConfig )
    dfec:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    dfee:	7b5b      	ldrb	r3, [r3, #13]
    dff0:	2b07      	cmp	r3, #7
    dff2:	dc47      	bgt.n	e084 <am_devices_mspi_atxp032_write+0x19c>
    dff4:	2b06      	cmp	r3, #6
    dff6:	da31      	bge.n	e05c <am_devices_mspi_atxp032_write+0x174>
    dff8:	2b01      	cmp	r3, #1
    dffa:	dc02      	bgt.n	e002 <am_devices_mspi_atxp032_write+0x11a>
    dffc:	2b00      	cmp	r3, #0
    dffe:	da04      	bge.n	e00a <am_devices_mspi_atxp032_write+0x122>
    e000:	e040      	b.n	e084 <am_devices_mspi_atxp032_write+0x19c>
    e002:	3b04      	subs	r3, #4
    e004:	2b01      	cmp	r3, #1
    e006:	d83d      	bhi.n	e084 <am_devices_mspi_atxp032_write+0x19c>
    e008:	e013      	b.n	e032 <am_devices_mspi_atxp032_write+0x14a>
            {
                case AM_HAL_MSPI_FLASH_SERIAL_CE0:
                case AM_HAL_MSPI_FLASH_SERIAL_CE1:
                    am_devices_mspi_atxp032_command_read(pHandle, AM_DEVICES_MSPI_ATXP032_READ_STATUS, false, 0, ui32PIOBuffer, 2);
    e00a:	2302      	movs	r3, #2
    e00c:	9301      	str	r3, [sp, #4]
    e00e:	ab08      	add	r3, sp, #32
    e010:	9300      	str	r3, [sp, #0]
    e012:	2300      	movs	r3, #0
    e014:	2200      	movs	r2, #0
    e016:	2105      	movs	r1, #5
    e018:	9805      	ldr	r0, [sp, #20]
    e01a:	f7ff fc69 	bl	d8f0 <am_devices_mspi_atxp032_command_read>
                    bWriteComplete = (0 == (ui32PIOBuffer[0] & AM_DEVICES_ATXP032_WIP));
    e01e:	9b08      	ldr	r3, [sp, #32]
    e020:	f003 0301 	and.w	r3, r3, #1
    e024:	2b00      	cmp	r3, #0
    e026:	bf0c      	ite	eq
    e028:	2301      	moveq	r3, #1
    e02a:	2300      	movne	r3, #0
    e02c:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
                    break;
    e030:	e02a      	b.n	e088 <am_devices_mspi_atxp032_write+0x1a0>
                case AM_HAL_MSPI_FLASH_QUAD_CE0:
                case AM_HAL_MSPI_FLASH_QUAD_CE1:
                    am_devices_mspi_atxp032_command_read(pHandle, AM_DEVICES_MSPI_ATXP032_READ_STATUS, false, 0, ui32PIOBuffer, 4);
    e032:	2304      	movs	r3, #4
    e034:	9301      	str	r3, [sp, #4]
    e036:	ab08      	add	r3, sp, #32
    e038:	9300      	str	r3, [sp, #0]
    e03a:	2300      	movs	r3, #0
    e03c:	2200      	movs	r2, #0
    e03e:	2105      	movs	r1, #5
    e040:	9805      	ldr	r0, [sp, #20]
    e042:	f7ff fc55 	bl	d8f0 <am_devices_mspi_atxp032_command_read>
                    bWriteComplete = (0 == ((ui32PIOBuffer[0] >> 16) & AM_DEVICES_ATXP032_WIP));
    e046:	9b08      	ldr	r3, [sp, #32]
    e048:	0c1b      	lsrs	r3, r3, #16
    e04a:	f003 0301 	and.w	r3, r3, #1
    e04e:	2b00      	cmp	r3, #0
    e050:	bf0c      	ite	eq
    e052:	2301      	moveq	r3, #1
    e054:	2300      	movne	r3, #0
    e056:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
                    break;
    e05a:	e015      	b.n	e088 <am_devices_mspi_atxp032_write+0x1a0>
                case AM_HAL_MSPI_FLASH_OCTAL_CE0:
                case AM_HAL_MSPI_FLASH_OCTAL_CE1:
                    am_devices_mspi_atxp032_command_read(pHandle, AM_DEVICES_MSPI_ATXP032_READ_STATUS, false, 0, ui32PIOBuffer, 6);
    e05c:	2306      	movs	r3, #6
    e05e:	9301      	str	r3, [sp, #4]
    e060:	ab08      	add	r3, sp, #32
    e062:	9300      	str	r3, [sp, #0]
    e064:	2300      	movs	r3, #0
    e066:	2200      	movs	r2, #0
    e068:	2105      	movs	r1, #5
    e06a:	9805      	ldr	r0, [sp, #20]
    e06c:	f7ff fc40 	bl	d8f0 <am_devices_mspi_atxp032_command_read>
                    bWriteComplete = (0 == (ui32PIOBuffer[1] & AM_DEVICES_ATXP032_WIP));
    e070:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e072:	f003 0301 	and.w	r3, r3, #1
    e076:	2b00      	cmp	r3, #0
    e078:	bf0c      	ite	eq
    e07a:	2301      	moveq	r3, #1
    e07c:	2300      	movne	r3, #0
    e07e:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
                    break;
    e082:	e001      	b.n	e088 <am_devices_mspi_atxp032_write+0x1a0>
                default:
                    return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e084:	2301      	movs	r3, #1
    e086:	e024      	b.n	e0d2 <am_devices_mspi_atxp032_write+0x1ea>
            }

            am_util_delay_us(100);
    e088:	2064      	movs	r0, #100	; 0x64
    e08a:	f7fe faef 	bl	c66c <am_util_delay_us>
            if (bWriteComplete)
    e08e:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
    e092:	2b00      	cmp	r3, #0
    e094:	d107      	bne.n	e0a6 <am_devices_mspi_atxp032_write+0x1be>
        for (uint32_t i = 0; i < AM_DEVICES_MSPI_ATXP032_TIMEOUT; i++)
    e096:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    e098:	3301      	adds	r3, #1
    e09a:	9330      	str	r3, [sp, #192]	; 0xc0
    e09c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    e09e:	4a10      	ldr	r2, [pc, #64]	; (e0e0 <am_devices_mspi_atxp032_write+0x1f8>)
    e0a0:	4293      	cmp	r3, r2
    e0a2:	d9a3      	bls.n	dfec <am_devices_mspi_atxp032_write+0x104>
    e0a4:	e000      	b.n	e0a8 <am_devices_mspi_atxp032_write+0x1c0>
            {
                break;
    e0a6:	bf00      	nop
        }

        //
        // Send the command sequence to disable writing.
        //
        ui32Status = am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_MSPI_ATXP032_WRITE_DISABLE, false, 0, ui32PIOBuffer, 0);
    e0a8:	2300      	movs	r3, #0
    e0aa:	9301      	str	r3, [sp, #4]
    e0ac:	ab08      	add	r3, sp, #32
    e0ae:	9300      	str	r3, [sp, #0]
    e0b0:	2300      	movs	r3, #0
    e0b2:	2200      	movs	r2, #0
    e0b4:	2104      	movs	r1, #4
    e0b6:	9805      	ldr	r0, [sp, #20]
    e0b8:	f7ff fbde 	bl	d878 <am_devices_mspi_atxp032_command_write>
    e0bc:	902e      	str	r0, [sp, #184]	; 0xb8
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e0be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	d001      	beq.n	e0c8 <am_devices_mspi_atxp032_write+0x1e0>
        {
            return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e0c4:	2301      	movs	r3, #1
    e0c6:	e004      	b.n	e0d2 <am_devices_mspi_atxp032_write+0x1ea>
    while (ui32BytesLeft > 0)
    e0c8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    e0ca:	2b00      	cmp	r3, #0
    e0cc:	f47f af24 	bne.w	df18 <am_devices_mspi_atxp032_write+0x30>
    }

  //
  // Return the status.
  //
  return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    e0d0:	2300      	movs	r3, #0
}
    e0d2:	4618      	mov	r0, r3
    e0d4:	b037      	add	sp, #220	; 0xdc
    e0d6:	f85d fb04 	ldr.w	pc, [sp], #4
    e0da:	bf00      	nop
    e0dc:	0000d969 	.word	0x0000d969
    e0e0:	000f423f 	.word	0x000f423f

0000e0e4 <am_devices_mspi_atxp032_sector_erase>:
//! @return 32-bit status
//
//*****************************************************************************
uint32_t
am_devices_mspi_atxp032_sector_erase(void *pHandle, uint32_t ui32SectorAddress)
{
    e0e4:	b500      	push	{lr}
    e0e6:	b0a9      	sub	sp, #164	; 0xa4
    e0e8:	9003      	str	r0, [sp, #12]
    e0ea:	9102      	str	r1, [sp, #8]
    bool          bEraseComplete = false;
    e0ec:	2300      	movs	r3, #0
    e0ee:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    uint32_t      ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    e0f2:	9b03      	ldr	r3, [sp, #12]
    e0f4:	9325      	str	r3, [sp, #148]	; 0x94
    uint32_t      ui32PIOBuffer[32] = {0};
    e0f6:	ab04      	add	r3, sp, #16
    e0f8:	2280      	movs	r2, #128	; 0x80
    e0fa:	2100      	movs	r1, #0
    e0fc:	4618      	mov	r0, r3
    e0fe:	f000 f955 	bl	e3ac <memset>

    //
    // Send the command sequence to enable writing.
    //
    ui32Status = am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_MSPI_ATXP032_WRITE_ENABLE, false, 0, ui32PIOBuffer, 0);
    e102:	2300      	movs	r3, #0
    e104:	9301      	str	r3, [sp, #4]
    e106:	ab04      	add	r3, sp, #16
    e108:	9300      	str	r3, [sp, #0]
    e10a:	2300      	movs	r3, #0
    e10c:	2200      	movs	r2, #0
    e10e:	2106      	movs	r1, #6
    e110:	9803      	ldr	r0, [sp, #12]
    e112:	f7ff fbb1 	bl	d878 <am_devices_mspi_atxp032_command_write>
    e116:	9024      	str	r0, [sp, #144]	; 0x90
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e118:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e11a:	2b00      	cmp	r3, #0
    e11c:	d001      	beq.n	e122 <am_devices_mspi_atxp032_sector_erase+0x3e>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e11e:	2301      	movs	r3, #1
    e120:	e0aa      	b.n	e278 <am_devices_mspi_atxp032_sector_erase+0x194>
    }

    //
    // Send the command to remove protection from the sector.
    //
    ui32Status = am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_ATXP032_UNPROTECT_SECTOR, true, ui32SectorAddress, ui32PIOBuffer, 0);
    e122:	2300      	movs	r3, #0
    e124:	9301      	str	r3, [sp, #4]
    e126:	ab04      	add	r3, sp, #16
    e128:	9300      	str	r3, [sp, #0]
    e12a:	9b02      	ldr	r3, [sp, #8]
    e12c:	2201      	movs	r2, #1
    e12e:	2139      	movs	r1, #57	; 0x39
    e130:	9803      	ldr	r0, [sp, #12]
    e132:	f7ff fba1 	bl	d878 <am_devices_mspi_atxp032_command_write>
    e136:	9024      	str	r0, [sp, #144]	; 0x90
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e138:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e13a:	2b00      	cmp	r3, #0
    e13c:	d001      	beq.n	e142 <am_devices_mspi_atxp032_sector_erase+0x5e>
    {
      return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e13e:	2301      	movs	r3, #1
    e140:	e09a      	b.n	e278 <am_devices_mspi_atxp032_sector_erase+0x194>
    }

    //
    // Send the command sequence to enable writing.
    //
    ui32Status = am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_MSPI_ATXP032_WRITE_ENABLE, false, 0, ui32PIOBuffer, 0);
    e142:	2300      	movs	r3, #0
    e144:	9301      	str	r3, [sp, #4]
    e146:	ab04      	add	r3, sp, #16
    e148:	9300      	str	r3, [sp, #0]
    e14a:	2300      	movs	r3, #0
    e14c:	2200      	movs	r2, #0
    e14e:	2106      	movs	r1, #6
    e150:	9803      	ldr	r0, [sp, #12]
    e152:	f7ff fb91 	bl	d878 <am_devices_mspi_atxp032_command_write>
    e156:	9024      	str	r0, [sp, #144]	; 0x90
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e158:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e15a:	2b00      	cmp	r3, #0
    e15c:	d001      	beq.n	e162 <am_devices_mspi_atxp032_sector_erase+0x7e>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e15e:	2301      	movs	r3, #1
    e160:	e08a      	b.n	e278 <am_devices_mspi_atxp032_sector_erase+0x194>
    }

    //
    // Send the command sequence to do the sector erase.
    //
    ui32Status = am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_MSPI_ATXP032_SECTOR_ERASE, true, ui32SectorAddress, ui32PIOBuffer, 0);
    e162:	2300      	movs	r3, #0
    e164:	9301      	str	r3, [sp, #4]
    e166:	ab04      	add	r3, sp, #16
    e168:	9300      	str	r3, [sp, #0]
    e16a:	9b02      	ldr	r3, [sp, #8]
    e16c:	2201      	movs	r2, #1
    e16e:	21d8      	movs	r1, #216	; 0xd8
    e170:	9803      	ldr	r0, [sp, #12]
    e172:	f7ff fb81 	bl	d878 <am_devices_mspi_atxp032_command_write>
    e176:	9024      	str	r0, [sp, #144]	; 0x90
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e178:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e17a:	2b00      	cmp	r3, #0
    e17c:	d001      	beq.n	e182 <am_devices_mspi_atxp032_sector_erase+0x9e>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e17e:	2301      	movs	r3, #1
    e180:	e07a      	b.n	e278 <am_devices_mspi_atxp032_sector_erase+0x194>
    }

    //
    // Wait for the Write In Progress to indicate the erase is complete.
    //
    for (uint32_t i = 0; i < AM_DEVICES_MSPI_ATXP032_ERASE_TIMEOUT; i++)
    e182:	2300      	movs	r3, #0
    e184:	9326      	str	r3, [sp, #152]	; 0x98
    e186:	e057      	b.n	e238 <am_devices_mspi_atxp032_sector_erase+0x154>
    {
        // ATXP032 has different number of bytes for each speed of status read.
        switch ( pFlash->stSetting.eDeviceConfig )
    e188:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e18a:	7b5b      	ldrb	r3, [r3, #13]
    e18c:	2b07      	cmp	r3, #7
    e18e:	dc47      	bgt.n	e220 <am_devices_mspi_atxp032_sector_erase+0x13c>
    e190:	2b06      	cmp	r3, #6
    e192:	da31      	bge.n	e1f8 <am_devices_mspi_atxp032_sector_erase+0x114>
    e194:	2b01      	cmp	r3, #1
    e196:	dc02      	bgt.n	e19e <am_devices_mspi_atxp032_sector_erase+0xba>
    e198:	2b00      	cmp	r3, #0
    e19a:	da04      	bge.n	e1a6 <am_devices_mspi_atxp032_sector_erase+0xc2>
    e19c:	e040      	b.n	e220 <am_devices_mspi_atxp032_sector_erase+0x13c>
    e19e:	3b04      	subs	r3, #4
    e1a0:	2b01      	cmp	r3, #1
    e1a2:	d83d      	bhi.n	e220 <am_devices_mspi_atxp032_sector_erase+0x13c>
    e1a4:	e013      	b.n	e1ce <am_devices_mspi_atxp032_sector_erase+0xea>
        {
            case AM_HAL_MSPI_FLASH_SERIAL_CE0:
            case AM_HAL_MSPI_FLASH_SERIAL_CE1:
                am_devices_mspi_atxp032_command_read(pHandle, AM_DEVICES_MSPI_ATXP032_READ_STATUS, false, 0, ui32PIOBuffer, 2);
    e1a6:	2302      	movs	r3, #2
    e1a8:	9301      	str	r3, [sp, #4]
    e1aa:	ab04      	add	r3, sp, #16
    e1ac:	9300      	str	r3, [sp, #0]
    e1ae:	2300      	movs	r3, #0
    e1b0:	2200      	movs	r2, #0
    e1b2:	2105      	movs	r1, #5
    e1b4:	9803      	ldr	r0, [sp, #12]
    e1b6:	f7ff fb9b 	bl	d8f0 <am_devices_mspi_atxp032_command_read>
                bEraseComplete = (0 == (ui32PIOBuffer[0] & AM_DEVICES_ATXP032_WIP));
    e1ba:	9b04      	ldr	r3, [sp, #16]
    e1bc:	f003 0301 	and.w	r3, r3, #1
    e1c0:	2b00      	cmp	r3, #0
    e1c2:	bf0c      	ite	eq
    e1c4:	2301      	moveq	r3, #1
    e1c6:	2300      	movne	r3, #0
    e1c8:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
                break;
    e1cc:	e02a      	b.n	e224 <am_devices_mspi_atxp032_sector_erase+0x140>
            case AM_HAL_MSPI_FLASH_QUAD_CE0:
            case AM_HAL_MSPI_FLASH_QUAD_CE1:
                am_devices_mspi_atxp032_command_read(pHandle, AM_DEVICES_MSPI_ATXP032_READ_STATUS, false, 0, ui32PIOBuffer, 4);
    e1ce:	2304      	movs	r3, #4
    e1d0:	9301      	str	r3, [sp, #4]
    e1d2:	ab04      	add	r3, sp, #16
    e1d4:	9300      	str	r3, [sp, #0]
    e1d6:	2300      	movs	r3, #0
    e1d8:	2200      	movs	r2, #0
    e1da:	2105      	movs	r1, #5
    e1dc:	9803      	ldr	r0, [sp, #12]
    e1de:	f7ff fb87 	bl	d8f0 <am_devices_mspi_atxp032_command_read>
                bEraseComplete = (0 == ((ui32PIOBuffer[0] >> 16) & AM_DEVICES_ATXP032_WIP));
    e1e2:	9b04      	ldr	r3, [sp, #16]
    e1e4:	0c1b      	lsrs	r3, r3, #16
    e1e6:	f003 0301 	and.w	r3, r3, #1
    e1ea:	2b00      	cmp	r3, #0
    e1ec:	bf0c      	ite	eq
    e1ee:	2301      	moveq	r3, #1
    e1f0:	2300      	movne	r3, #0
    e1f2:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
                break;
    e1f6:	e015      	b.n	e224 <am_devices_mspi_atxp032_sector_erase+0x140>
            case AM_HAL_MSPI_FLASH_OCTAL_CE0:
            case AM_HAL_MSPI_FLASH_OCTAL_CE1:
                am_devices_mspi_atxp032_command_read(pHandle, AM_DEVICES_MSPI_ATXP032_READ_STATUS, false, 0, ui32PIOBuffer, 6);
    e1f8:	2306      	movs	r3, #6
    e1fa:	9301      	str	r3, [sp, #4]
    e1fc:	ab04      	add	r3, sp, #16
    e1fe:	9300      	str	r3, [sp, #0]
    e200:	2300      	movs	r3, #0
    e202:	2200      	movs	r2, #0
    e204:	2105      	movs	r1, #5
    e206:	9803      	ldr	r0, [sp, #12]
    e208:	f7ff fb72 	bl	d8f0 <am_devices_mspi_atxp032_command_read>
                bEraseComplete = (0 == (ui32PIOBuffer[1] & AM_DEVICES_ATXP032_WIP));
    e20c:	9b05      	ldr	r3, [sp, #20]
    e20e:	f003 0301 	and.w	r3, r3, #1
    e212:	2b00      	cmp	r3, #0
    e214:	bf0c      	ite	eq
    e216:	2301      	moveq	r3, #1
    e218:	2300      	movne	r3, #0
    e21a:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
                break;
    e21e:	e001      	b.n	e224 <am_devices_mspi_atxp032_sector_erase+0x140>
            default:
                return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e220:	2301      	movs	r3, #1
    e222:	e029      	b.n	e278 <am_devices_mspi_atxp032_sector_erase+0x194>
        }

        if (bEraseComplete)
    e224:	f89d 309f 	ldrb.w	r3, [sp, #159]	; 0x9f
    e228:	2b00      	cmp	r3, #0
    e22a:	d10a      	bne.n	e242 <am_devices_mspi_atxp032_sector_erase+0x15e>
        {
            break;
        }
        am_util_delay_ms(10);
    e22c:	200a      	movs	r0, #10
    e22e:	f7fe fa01 	bl	c634 <am_util_delay_ms>
    for (uint32_t i = 0; i < AM_DEVICES_MSPI_ATXP032_ERASE_TIMEOUT; i++)
    e232:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e234:	3301      	adds	r3, #1
    e236:	9326      	str	r3, [sp, #152]	; 0x98
    e238:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e23a:	4a11      	ldr	r2, [pc, #68]	; (e280 <am_devices_mspi_atxp032_sector_erase+0x19c>)
    e23c:	4293      	cmp	r3, r2
    e23e:	d9a3      	bls.n	e188 <am_devices_mspi_atxp032_sector_erase+0xa4>
    e240:	e000      	b.n	e244 <am_devices_mspi_atxp032_sector_erase+0x160>
            break;
    e242:	bf00      	nop
    }

    //
    // Check the status.
    //
    if (!bEraseComplete)
    e244:	f89d 309f 	ldrb.w	r3, [sp, #159]	; 0x9f
    e248:	f083 0301 	eor.w	r3, r3, #1
    e24c:	b2db      	uxtb	r3, r3
    e24e:	2b00      	cmp	r3, #0
    e250:	d001      	beq.n	e256 <am_devices_mspi_atxp032_sector_erase+0x172>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e252:	2301      	movs	r3, #1
    e254:	e010      	b.n	e278 <am_devices_mspi_atxp032_sector_erase+0x194>
    }

    //
    // Send the command sequence to disable writing.
    //
    ui32Status = am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_MSPI_ATXP032_WRITE_DISABLE, false, 0, ui32PIOBuffer, 0);
    e256:	2300      	movs	r3, #0
    e258:	9301      	str	r3, [sp, #4]
    e25a:	ab04      	add	r3, sp, #16
    e25c:	9300      	str	r3, [sp, #0]
    e25e:	2300      	movs	r3, #0
    e260:	2200      	movs	r2, #0
    e262:	2104      	movs	r1, #4
    e264:	9803      	ldr	r0, [sp, #12]
    e266:	f7ff fb07 	bl	d878 <am_devices_mspi_atxp032_command_write>
    e26a:	9024      	str	r0, [sp, #144]	; 0x90
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e26c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e26e:	2b00      	cmp	r3, #0
    e270:	d001      	beq.n	e276 <am_devices_mspi_atxp032_sector_erase+0x192>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e272:	2301      	movs	r3, #1
    e274:	e000      	b.n	e278 <am_devices_mspi_atxp032_sector_erase+0x194>
    }
    //
    // Return the status.
    //
    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    e276:	2300      	movs	r3, #0
}
    e278:	4618      	mov	r0, r3
    e27a:	b029      	add	sp, #164	; 0xa4
    e27c:	f85d fb04 	ldr.w	pc, [sp], #4
    e280:	000f423f 	.word	0x000f423f

0000e284 <am_devices_mspi_atxp032_enable_xip>:
//! @return 32-bit status
//
//*****************************************************************************
uint32_t
am_devices_mspi_atxp032_enable_xip(void *pHandle)
{
    e284:	b500      	push	{lr}
    e286:	b085      	sub	sp, #20
    e288:	9001      	str	r0, [sp, #4]
    uint32_t ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    e28a:	9b01      	ldr	r3, [sp, #4]
    e28c:	9303      	str	r3, [sp, #12]
    // Enable XIP on the MSPI.
    //
#if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    ui32Status = am_hal_mspi_control(pFlash->pMspiHandle, AM_HAL_MSPI_REQ_XIP_EN, &gXipConfig[pFlash->ui32Module]);
#else
    ui32Status = am_hal_mspi_control(pFlash->pMspiHandle, AM_HAL_MSPI_REQ_XIP_EN, NULL);
    e28e:	9b03      	ldr	r3, [sp, #12]
    e290:	685b      	ldr	r3, [r3, #4]
    e292:	2200      	movs	r2, #0
    e294:	2107      	movs	r1, #7
    e296:	4618      	mov	r0, r3
    e298:	f000 ff1e 	bl	f0d8 <am_hal_mspi_control>
    e29c:	9002      	str	r0, [sp, #8]
#endif
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e29e:	9b02      	ldr	r3, [sp, #8]
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	d001      	beq.n	e2a8 <am_devices_mspi_atxp032_enable_xip+0x24>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e2a4:	2301      	movs	r3, #1
    e2a6:	e000      	b.n	e2aa <am_devices_mspi_atxp032_enable_xip+0x26>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    }
#endif

    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    e2a8:	2300      	movs	r3, #0
}
    e2aa:	4618      	mov	r0, r3
    e2ac:	b005      	add	sp, #20
    e2ae:	f85d fb04 	ldr.w	pc, [sp], #4

0000e2b2 <am_devices_mspi_atxp032_disable_xip>:
//! @return 32-bit status
//
//*****************************************************************************
uint32_t
am_devices_mspi_atxp032_disable_xip(void *pHandle)
{
    e2b2:	b500      	push	{lr}
    e2b4:	b0a7      	sub	sp, #156	; 0x9c
    e2b6:	9003      	str	r0, [sp, #12]
    uint32_t ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    e2b8:	9b03      	ldr	r3, [sp, #12]
    e2ba:	9325      	str	r3, [sp, #148]	; 0x94
    uint32_t      ui32PIOBuffer[32] = {0};
    e2bc:	ab04      	add	r3, sp, #16
    e2be:	2280      	movs	r2, #128	; 0x80
    e2c0:	2100      	movs	r1, #0
    e2c2:	4618      	mov	r0, r3
    e2c4:	f000 f872 	bl	e3ac <memset>

    //
    // Send the command to enable writing.
    //
    ui32Status = am_devices_mspi_atxp032_command_write(pHandle, AM_DEVICES_MSPI_ATXP032_WRITE_ENABLE, false, 0, ui32PIOBuffer, 0);
    e2c8:	2300      	movs	r3, #0
    e2ca:	9301      	str	r3, [sp, #4]
    e2cc:	ab04      	add	r3, sp, #16
    e2ce:	9300      	str	r3, [sp, #0]
    e2d0:	2300      	movs	r3, #0
    e2d2:	2200      	movs	r2, #0
    e2d4:	2106      	movs	r1, #6
    e2d6:	9803      	ldr	r0, [sp, #12]
    e2d8:	f7ff face 	bl	d878 <am_devices_mspi_atxp032_command_write>
    e2dc:	9024      	str	r0, [sp, #144]	; 0x90
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e2de:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e2e0:	2b00      	cmp	r3, #0
    e2e2:	d001      	beq.n	e2e8 <am_devices_mspi_atxp032_disable_xip+0x36>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e2e4:	2301      	movs	r3, #1
    e2e6:	e00d      	b.n	e304 <am_devices_mspi_atxp032_disable_xip+0x52>
    // Disable XIP on the MSPI.
    //
#if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    ui32Status = am_hal_mspi_control(pFlash->pMspiHandle, AM_HAL_MSPI_REQ_XIP_DIS, &gXipConfig[pFlash->ui32Module]);
#else
    ui32Status = am_hal_mspi_control(pFlash->pMspiHandle, AM_HAL_MSPI_REQ_XIP_DIS, NULL);
    e2e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e2ea:	685b      	ldr	r3, [r3, #4]
    e2ec:	2200      	movs	r2, #0
    e2ee:	2106      	movs	r1, #6
    e2f0:	4618      	mov	r0, r3
    e2f2:	f000 fef1 	bl	f0d8 <am_hal_mspi_control>
    e2f6:	9024      	str	r0, [sp, #144]	; 0x90
#endif
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e2f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e2fa:	2b00      	cmp	r3, #0
    e2fc:	d001      	beq.n	e302 <am_devices_mspi_atxp032_disable_xip+0x50>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e2fe:	2301      	movs	r3, #1
    e300:	e000      	b.n	e304 <am_devices_mspi_atxp032_disable_xip+0x52>
    }

    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    e302:	2300      	movs	r3, #0
}
    e304:	4618      	mov	r0, r3
    e306:	b027      	add	sp, #156	; 0x9c
    e308:	f85d fb04 	ldr.w	pc, [sp], #4

0000e30c <am_devices_mspi_atxp032_enable_scrambling>:
//! @return 32-bit status
//
//*****************************************************************************
uint32_t
am_devices_mspi_atxp032_enable_scrambling(void *pHandle)
{
    e30c:	b500      	push	{lr}
    e30e:	b085      	sub	sp, #20
    e310:	9001      	str	r0, [sp, #4]
    uint32_t ui32Status;
    am_devices_mspi_atxp032_t *pFlash = (am_devices_mspi_atxp032_t *)pHandle;
    e312:	9b01      	ldr	r3, [sp, #4]
    e314:	9303      	str	r3, [sp, #12]
    // Enable scrambling on the MSPI.
    //
#if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    ui32Status = am_hal_mspi_control(pFlash->pMspiHandle, AM_HAL_MSPI_REQ_SCRAMB_EN, &gXipConfig[pFlash->ui32Module]);
#else
    ui32Status = am_hal_mspi_control(pFlash->pMspiHandle, AM_HAL_MSPI_REQ_SCRAMB_EN, NULL);
    e316:	9b03      	ldr	r3, [sp, #12]
    e318:	685b      	ldr	r3, [r3, #4]
    e31a:	2200      	movs	r2, #0
    e31c:	2104      	movs	r1, #4
    e31e:	4618      	mov	r0, r3
    e320:	f000 feda 	bl	f0d8 <am_hal_mspi_control>
    e324:	9002      	str	r0, [sp, #8]
#endif
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
    e326:	9b02      	ldr	r3, [sp, #8]
    e328:	2b00      	cmp	r3, #0
    e32a:	d001      	beq.n	e330 <am_devices_mspi_atxp032_enable_scrambling+0x24>
    {
        return AM_DEVICES_MSPI_ATXP032_STATUS_ERROR;
    e32c:	2301      	movs	r3, #1
    e32e:	e000      	b.n	e332 <am_devices_mspi_atxp032_enable_scrambling+0x26>
    }
    return AM_DEVICES_MSPI_ATXP032_STATUS_SUCCESS;
    e330:	2300      	movs	r3, #0
}
    e332:	4618      	mov	r0, r3
    e334:	b005      	add	sp, #20
    e336:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000e33c <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    e33c:	4811      	ldr	r0, [pc, #68]	; (e384 <zero_loop+0x12>)
    e33e:	4912      	ldr	r1, [pc, #72]	; (e388 <zero_loop+0x16>)
    e340:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    e342:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    e346:	4811      	ldr	r0, [pc, #68]	; (e38c <zero_loop+0x1a>)
    e348:	6801      	ldr	r1, [r0, #0]
    e34a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e34e:	6001      	str	r1, [r0, #0]
    e350:	f3bf 8f4f 	dsb	sy
    e354:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    e358:	480d      	ldr	r0, [pc, #52]	; (e390 <zero_loop+0x1e>)
    e35a:	490e      	ldr	r1, [pc, #56]	; (e394 <zero_loop+0x22>)
    e35c:	4a0e      	ldr	r2, [pc, #56]	; (e398 <zero_loop+0x26>)

0000e35e <copy_loop>:
    e35e:	f850 3b04 	ldr.w	r3, [r0], #4
    e362:	f841 3b04 	str.w	r3, [r1], #4
    e366:	4291      	cmp	r1, r2
    e368:	dbf9      	blt.n	e35e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    e36a:	480c      	ldr	r0, [pc, #48]	; (e39c <zero_loop+0x2a>)
    e36c:	490c      	ldr	r1, [pc, #48]	; (e3a0 <zero_loop+0x2e>)
    e36e:	f04f 0200 	mov.w	r2, #0

0000e372 <zero_loop>:
    e372:	4288      	cmp	r0, r1
    e374:	bfb8      	it	lt
    e376:	f840 2b04 	strlt.w	r2, [r0], #4
    e37a:	dbfa      	blt.n	e372 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    e37c:	f7fe f808 	bl	c390 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    e380:	be00      	bkpt	0x0000
}
    e382:	bf00      	nop
    e384:	e000ed08 	.word	0xe000ed08
    e388:	0000c000 	.word	0x0000c000
    e38c:	e000ed88 	.word	0xe000ed88
    e390:	000116cc 	.word	0x000116cc
    e394:	10001000 	.word	0x10001000
    e398:	1000110c 	.word	0x1000110c
    e39c:	1000110c 	.word	0x1000110c
    e3a0:	10006450 	.word	0x10006450

0000e3a4 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    e3a4:	e7fe      	b.n	e3a4 <NMI_Handler>

0000e3a6 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    e3a6:	e7fe      	b.n	e3a6 <BusFault_Handler>

0000e3a8 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    e3a8:	e7fe      	b.n	e3a8 <DebugMon_Handler>
	...

0000e3ac <memset>:
    e3ac:	0783      	lsls	r3, r0, #30
    e3ae:	b530      	push	{r4, r5, lr}
    e3b0:	d048      	beq.n	e444 <memset+0x98>
    e3b2:	1e54      	subs	r4, r2, #1
    e3b4:	2a00      	cmp	r2, #0
    e3b6:	d03f      	beq.n	e438 <memset+0x8c>
    e3b8:	b2ca      	uxtb	r2, r1
    e3ba:	4603      	mov	r3, r0
    e3bc:	e001      	b.n	e3c2 <memset+0x16>
    e3be:	3c01      	subs	r4, #1
    e3c0:	d33a      	bcc.n	e438 <memset+0x8c>
    e3c2:	f803 2b01 	strb.w	r2, [r3], #1
    e3c6:	079d      	lsls	r5, r3, #30
    e3c8:	d1f9      	bne.n	e3be <memset+0x12>
    e3ca:	2c03      	cmp	r4, #3
    e3cc:	d92d      	bls.n	e42a <memset+0x7e>
    e3ce:	b2cd      	uxtb	r5, r1
    e3d0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e3d4:	2c0f      	cmp	r4, #15
    e3d6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e3da:	d936      	bls.n	e44a <memset+0x9e>
    e3dc:	f1a4 0210 	sub.w	r2, r4, #16
    e3e0:	f022 0c0f 	bic.w	ip, r2, #15
    e3e4:	f103 0e20 	add.w	lr, r3, #32
    e3e8:	44e6      	add	lr, ip
    e3ea:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    e3ee:	f103 0210 	add.w	r2, r3, #16
    e3f2:	e942 5504 	strd	r5, r5, [r2, #-16]
    e3f6:	e942 5502 	strd	r5, r5, [r2, #-8]
    e3fa:	3210      	adds	r2, #16
    e3fc:	4572      	cmp	r2, lr
    e3fe:	d1f8      	bne.n	e3f2 <memset+0x46>
    e400:	f10c 0201 	add.w	r2, ip, #1
    e404:	f014 0f0c 	tst.w	r4, #12
    e408:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    e40c:	f004 0c0f 	and.w	ip, r4, #15
    e410:	d013      	beq.n	e43a <memset+0x8e>
    e412:	f1ac 0304 	sub.w	r3, ip, #4
    e416:	f023 0303 	bic.w	r3, r3, #3
    e41a:	3304      	adds	r3, #4
    e41c:	4413      	add	r3, r2
    e41e:	f842 5b04 	str.w	r5, [r2], #4
    e422:	4293      	cmp	r3, r2
    e424:	d1fb      	bne.n	e41e <memset+0x72>
    e426:	f00c 0403 	and.w	r4, ip, #3
    e42a:	b12c      	cbz	r4, e438 <memset+0x8c>
    e42c:	b2ca      	uxtb	r2, r1
    e42e:	441c      	add	r4, r3
    e430:	f803 2b01 	strb.w	r2, [r3], #1
    e434:	429c      	cmp	r4, r3
    e436:	d1fb      	bne.n	e430 <memset+0x84>
    e438:	bd30      	pop	{r4, r5, pc}
    e43a:	4664      	mov	r4, ip
    e43c:	4613      	mov	r3, r2
    e43e:	2c00      	cmp	r4, #0
    e440:	d1f4      	bne.n	e42c <memset+0x80>
    e442:	e7f9      	b.n	e438 <memset+0x8c>
    e444:	4603      	mov	r3, r0
    e446:	4614      	mov	r4, r2
    e448:	e7bf      	b.n	e3ca <memset+0x1e>
    e44a:	461a      	mov	r2, r3
    e44c:	46a4      	mov	ip, r4
    e44e:	e7e0      	b.n	e412 <memset+0x66>

0000e450 <am_hal_clkgen_control>:
    e450:	4b49      	ldr	r3, [pc, #292]	; (e578 <am_hal_clkgen_control+0x128>)
    e452:	681a      	ldr	r2, [r3, #0]
    e454:	b912      	cbnz	r2, e45c <am_hal_clkgen_control+0xc>
    e456:	4a49      	ldr	r2, [pc, #292]	; (e57c <am_hal_clkgen_control+0x12c>)
    e458:	6812      	ldr	r2, [r2, #0]
    e45a:	601a      	str	r2, [r3, #0]
    e45c:	2809      	cmp	r0, #9
    e45e:	f200 8089 	bhi.w	e574 <am_hal_clkgen_control+0x124>
    e462:	e8df f000 	tbb	[pc, r0]
    e466:	160d      	.short	0x160d
    e468:	423a261e 	.word	0x423a261e
    e46c:	055c544c 	.word	0x055c544c
    e470:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e474:	2000      	movs	r0, #0
    e476:	6a1a      	ldr	r2, [r3, #32]
    e478:	f36f 0200 	bfc	r2, #0, #1
    e47c:	621a      	str	r2, [r3, #32]
    e47e:	4770      	bx	lr
    e480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e484:	2200      	movs	r2, #0
    e486:	2147      	movs	r1, #71	; 0x47
    e488:	6159      	str	r1, [r3, #20]
    e48a:	4610      	mov	r0, r2
    e48c:	619a      	str	r2, [r3, #24]
    e48e:	615a      	str	r2, [r3, #20]
    e490:	4770      	bx	lr
    e492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e496:	2000      	movs	r0, #0
    e498:	899a      	ldrh	r2, [r3, #12]
    e49a:	f36f 0200 	bfc	r2, #0, #1
    e49e:	819a      	strh	r2, [r3, #12]
    e4a0:	4770      	bx	lr
    e4a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e4a6:	2000      	movs	r0, #0
    e4a8:	899a      	ldrh	r2, [r3, #12]
    e4aa:	f36f 0241 	bfc	r2, #1, #1
    e4ae:	819a      	strh	r2, [r3, #12]
    e4b0:	4770      	bx	lr
    e4b2:	4a33      	ldr	r2, [pc, #204]	; (e580 <am_hal_clkgen_control+0x130>)
    e4b4:	68d3      	ldr	r3, [r2, #12]
    e4b6:	b2db      	uxtb	r3, r3
    e4b8:	2b21      	cmp	r3, #33	; 0x21
    e4ba:	d106      	bne.n	e4ca <am_hal_clkgen_control+0x7a>
    e4bc:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e4c0:	2101      	movs	r1, #1
    e4c2:	f361 2309 	bfi	r3, r1, #8, #2
    e4c6:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e4ca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e4ce:	2000      	movs	r0, #0
    e4d0:	8993      	ldrh	r3, [r2, #12]
    e4d2:	f043 0301 	orr.w	r3, r3, #1
    e4d6:	8193      	strh	r3, [r2, #12]
    e4d8:	4770      	bx	lr
    e4da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e4de:	2000      	movs	r0, #0
    e4e0:	8993      	ldrh	r3, [r2, #12]
    e4e2:	f043 0302 	orr.w	r3, r3, #2
    e4e6:	8193      	strh	r3, [r2, #12]
    e4e8:	4770      	bx	lr
    e4ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e4ee:	2200      	movs	r2, #0
    e4f0:	2047      	movs	r0, #71	; 0x47
    e4f2:	2101      	movs	r1, #1
    e4f4:	6158      	str	r0, [r3, #20]
    e4f6:	6199      	str	r1, [r3, #24]
    e4f8:	4610      	mov	r0, r2
    e4fa:	615a      	str	r2, [r3, #20]
    e4fc:	4770      	bx	lr
    e4fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e502:	2000      	movs	r0, #0
    e504:	899a      	ldrh	r2, [r3, #12]
    e506:	f36f 12c7 	bfc	r2, #7, #1
    e50a:	819a      	strh	r2, [r3, #12]
    e50c:	4770      	bx	lr
    e50e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e512:	2000      	movs	r0, #0
    e514:	8993      	ldrh	r3, [r2, #12]
    e516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e51a:	8193      	strh	r3, [r2, #12]
    e51c:	4770      	bx	lr
    e51e:	4a18      	ldr	r2, [pc, #96]	; (e580 <am_hal_clkgen_control+0x130>)
    e520:	68d3      	ldr	r3, [r2, #12]
    e522:	b2db      	uxtb	r3, r3
    e524:	2b21      	cmp	r3, #33	; 0x21
    e526:	d00a      	beq.n	e53e <am_hal_clkgen_control+0xee>
    e528:	b139      	cbz	r1, e53a <am_hal_clkgen_control+0xea>
    e52a:	680b      	ldr	r3, [r1, #0]
    e52c:	f043 0301 	orr.w	r3, r3, #1
    e530:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e534:	2000      	movs	r0, #0
    e536:	6213      	str	r3, [r2, #32]
    e538:	4770      	bx	lr
    e53a:	4b12      	ldr	r3, [pc, #72]	; (e584 <am_hal_clkgen_control+0x134>)
    e53c:	e7f8      	b.n	e530 <am_hal_clkgen_control+0xe0>
    e53e:	b500      	push	{lr}
    e540:	b083      	sub	sp, #12
    e542:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e546:	9101      	str	r1, [sp, #4]
    e548:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e54c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e550:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e554:	f000 f836 	bl	e5c4 <am_hal_flash_delay>
    e558:	9901      	ldr	r1, [sp, #4]
    e55a:	b149      	cbz	r1, e570 <am_hal_clkgen_control+0x120>
    e55c:	680b      	ldr	r3, [r1, #0]
    e55e:	f043 0301 	orr.w	r3, r3, #1
    e562:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e566:	2000      	movs	r0, #0
    e568:	6213      	str	r3, [r2, #32]
    e56a:	b003      	add	sp, #12
    e56c:	f85d fb04 	ldr.w	pc, [sp], #4
    e570:	4b04      	ldr	r3, [pc, #16]	; (e584 <am_hal_clkgen_control+0x134>)
    e572:	e7f6      	b.n	e562 <am_hal_clkgen_control+0x112>
    e574:	2006      	movs	r0, #6
    e576:	4770      	bx	lr
    e578:	100062e4 	.word	0x100062e4
    e57c:	4ffff000 	.word	0x4ffff000
    e580:	40020000 	.word	0x40020000
    e584:	0025b801 	.word	0x0025b801

0000e588 <am_hal_clkgen_status_get>:
    e588:	b1b0      	cbz	r0, e5b8 <am_hal_clkgen_status_get+0x30>
    e58a:	b410      	push	{r4}
    e58c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    e590:	4603      	mov	r3, r0
    e592:	698c      	ldr	r4, [r1, #24]
    e594:	4809      	ldr	r0, [pc, #36]	; (e5bc <am_hal_clkgen_status_get+0x34>)
    e596:	4a0a      	ldr	r2, [pc, #40]	; (e5c0 <am_hal_clkgen_status_get+0x38>)
    e598:	f014 0f01 	tst.w	r4, #1
    e59c:	bf08      	it	eq
    e59e:	4602      	moveq	r2, r0
    e5a0:	601a      	str	r2, [r3, #0]
    e5a2:	69ca      	ldr	r2, [r1, #28]
    e5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    e5a8:	f002 0101 	and.w	r1, r2, #1
    e5ac:	f3c2 0240 	ubfx	r2, r2, #1, #1
    e5b0:	2000      	movs	r0, #0
    e5b2:	6059      	str	r1, [r3, #4]
    e5b4:	721a      	strb	r2, [r3, #8]
    e5b6:	4770      	bx	lr
    e5b8:	2006      	movs	r0, #6
    e5ba:	4770      	bx	lr
    e5bc:	02dc6c00 	.word	0x02dc6c00
    e5c0:	016e3600 	.word	0x016e3600

0000e5c4 <am_hal_flash_delay>:
    e5c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e5ca:	075b      	lsls	r3, r3, #29
    e5cc:	bf46      	itte	mi
    e5ce:	0040      	lslmi	r0, r0, #1
    e5d0:	230e      	movmi	r3, #14
    e5d2:	230b      	movpl	r3, #11
    e5d4:	4298      	cmp	r0, r3
    e5d6:	d902      	bls.n	e5de <am_hal_flash_delay+0x1a>
    e5d8:	4a01      	ldr	r2, [pc, #4]	; (e5e0 <am_hal_flash_delay+0x1c>)
    e5da:	1ac0      	subs	r0, r0, r3
    e5dc:	4710      	bx	r2
    e5de:	4770      	bx	lr
    e5e0:	0800009d 	.word	0x0800009d

0000e5e4 <am_hal_flash_delay_status_check>:
    e5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e5e8:	f89d c020 	ldrb.w	ip, [sp, #32]
    e5ec:	f8df 805c 	ldr.w	r8, [pc, #92]	; e64c <am_hal_flash_delay_status_check+0x68>
    e5f0:	4604      	mov	r4, r0
    e5f2:	460d      	mov	r5, r1
    e5f4:	4616      	mov	r6, r2
    e5f6:	461f      	mov	r7, r3
    e5f8:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e5fc:	f1bc 0f00 	cmp.w	ip, #0
    e600:	d00a      	beq.n	e618 <am_hal_flash_delay_status_check+0x34>
    e602:	e01a      	b.n	e63a <am_hal_flash_delay_status_check+0x56>
    e604:	b1f4      	cbz	r4, e644 <am_hal_flash_delay_status_check+0x60>
    e606:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e60a:	f013 0f04 	tst.w	r3, #4
    e60e:	bf0c      	ite	eq
    e610:	2005      	moveq	r0, #5
    e612:	2012      	movne	r0, #18
    e614:	3c01      	subs	r4, #1
    e616:	47c0      	blx	r8
    e618:	6828      	ldr	r0, [r5, #0]
    e61a:	4030      	ands	r0, r6
    e61c:	42b8      	cmp	r0, r7
    e61e:	d0f1      	beq.n	e604 <am_hal_flash_delay_status_check+0x20>
    e620:	2000      	movs	r0, #0
    e622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e626:	b16c      	cbz	r4, e644 <am_hal_flash_delay_status_check+0x60>
    e628:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e62c:	f013 0f04 	tst.w	r3, #4
    e630:	bf0c      	ite	eq
    e632:	2005      	moveq	r0, #5
    e634:	2012      	movne	r0, #18
    e636:	3c01      	subs	r4, #1
    e638:	47c0      	blx	r8
    e63a:	6828      	ldr	r0, [r5, #0]
    e63c:	4030      	ands	r0, r6
    e63e:	42b8      	cmp	r0, r7
    e640:	d1f1      	bne.n	e626 <am_hal_flash_delay_status_check+0x42>
    e642:	e7ed      	b.n	e620 <am_hal_flash_delay_status_check+0x3c>
    e644:	2004      	movs	r0, #4
    e646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e64a:	bf00      	nop
    e64c:	0800009d 	.word	0x0800009d

0000e650 <am_hal_flash_load_ui32>:
    e650:	4b00      	ldr	r3, [pc, #0]	; (e654 <am_hal_flash_load_ui32+0x4>)
    e652:	4718      	bx	r3
    e654:	08000075 	.word	0x08000075

0000e658 <am_hal_flash_store_ui32>:
    e658:	4b01      	ldr	r3, [pc, #4]	; (e660 <am_hal_flash_store_ui32+0x8>)
    e65a:	f043 0301 	orr.w	r3, r3, #1
    e65e:	4718      	bx	r3
    e660:	100010d8 	.word	0x100010d8

0000e664 <am_hal_interrupt_master_enable>:
    e664:	f3ef 8010 	mrs	r0, PRIMASK
    e668:	b662      	cpsie	i
    e66a:	4770      	bx	lr

0000e66c <am_hal_interrupt_master_disable>:
    e66c:	f3ef 8010 	mrs	r0, PRIMASK
    e670:	b672      	cpsid	i
    e672:	4770      	bx	lr

0000e674 <am_hal_interrupt_master_set>:
    e674:	f380 8810 	msr	PRIMASK, r0
    e678:	4770      	bx	lr
    e67a:	bf00      	nop

0000e67c <am_hal_mcuctrl_control>:
    e67c:	b570      	push	{r4, r5, r6, lr}
    e67e:	b082      	sub	sp, #8
    e680:	2804      	cmp	r0, #4
    e682:	f200 80b9 	bhi.w	e7f8 <am_hal_mcuctrl_control+0x17c>
    e686:	e8df f000 	tbb	[pc, r0]
    e68a:	3a2f      	.short	0x3a2f
    e68c:	5645      	.short	0x5645
    e68e:	03          	.byte	0x03
    e68f:	00          	.byte	0x00
    e690:	680a      	ldr	r2, [r1, #0]
    e692:	f032 1433 	bics.w	r4, r2, #3342387	; 0x330033
    e696:	f040 80af 	bne.w	e7f8 <am_hal_mcuctrl_control+0x17c>
    e69a:	4b58      	ldr	r3, [pc, #352]	; (e7fc <am_hal_mcuctrl_control+0x180>)
    e69c:	f8d3 1284 	ldr.w	r1, [r3, #644]	; 0x284
    e6a0:	00cb      	lsls	r3, r1, #3
    e6a2:	0048      	lsls	r0, r1, #1
    e6a4:	f000 0004 	and.w	r0, r0, #4
    e6a8:	f003 0308 	and.w	r3, r3, #8
    e6ac:	4303      	orrs	r3, r0
    e6ae:	00d0      	lsls	r0, r2, #3
    e6b0:	f000 0008 	and.w	r0, r0, #8
    e6b4:	4303      	orrs	r3, r0
    e6b6:	0050      	lsls	r0, r2, #1
    e6b8:	f000 0004 	and.w	r0, r0, #4
    e6bc:	4303      	orrs	r3, r0
    e6be:	0bd0      	lsrs	r0, r2, #15
    e6c0:	f000 0002 	and.w	r0, r0, #2
    e6c4:	4303      	orrs	r3, r0
    e6c6:	f3c2 4040 	ubfx	r0, r2, #17, #1
    e6ca:	4303      	orrs	r3, r0
    e6cc:	3b01      	subs	r3, #1
    e6ce:	2b0e      	cmp	r3, #14
    e6d0:	f200 808e 	bhi.w	e7f0 <am_hal_mcuctrl_control+0x174>
    e6d4:	e8df f003 	tbb	[pc, r3]
    e6d8:	75404083 	.word	0x75404083
    e6dc:	7740758c 	.word	0x7740758c
    e6e0:	7f404077 	.word	0x7f404077
    e6e4:	7577      	.short	0x7577
    e6e6:	40          	.byte	0x40
    e6e7:	00          	.byte	0x00
    e6e8:	4a44      	ldr	r2, [pc, #272]	; (e7fc <am_hal_mcuctrl_control+0x180>)
    e6ea:	f892 31d0 	ldrb.w	r3, [r2, #464]	; 0x1d0
    e6ee:	f043 0301 	orr.w	r3, r3, #1
    e6f2:	2400      	movs	r4, #0
    e6f4:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
    e6f8:	4620      	mov	r0, r4
    e6fa:	b002      	add	sp, #8
    e6fc:	bd70      	pop	{r4, r5, r6, pc}
    e6fe:	4a3f      	ldr	r2, [pc, #252]	; (e7fc <am_hal_mcuctrl_control+0x180>)
    e700:	f892 31d0 	ldrb.w	r3, [r2, #464]	; 0x1d0
    e704:	2400      	movs	r4, #0
    e706:	f36f 0300 	bfc	r3, #0, #1
    e70a:	4620      	mov	r0, r4
    e70c:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
    e710:	b002      	add	sp, #8
    e712:	bd70      	pop	{r4, r5, r6, pc}
    e714:	4b39      	ldr	r3, [pc, #228]	; (e7fc <am_hal_mcuctrl_control+0x180>)
    e716:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    e71a:	f022 021f 	bic.w	r2, r2, #31
    e71e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e722:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    e726:	2400      	movs	r4, #0
    e728:	f042 0207 	orr.w	r2, r2, #7
    e72c:	4620      	mov	r0, r4
    e72e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e732:	b002      	add	sp, #8
    e734:	bd70      	pop	{r4, r5, r6, pc}
    e736:	4b31      	ldr	r3, [pc, #196]	; (e7fc <am_hal_mcuctrl_control+0x180>)
    e738:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    e73c:	f022 021f 	bic.w	r2, r2, #31
    e740:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e744:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    e748:	2400      	movs	r4, #0
    e74a:	f042 0218 	orr.w	r2, r2, #24
    e74e:	4620      	mov	r0, r4
    e750:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e754:	b002      	add	sp, #8
    e756:	bd70      	pop	{r4, r5, r6, pc}
    e758:	2600      	movs	r6, #0
    e75a:	f06f 0503 	mvn.w	r5, #3
    e75e:	084b      	lsrs	r3, r1, #1
    e760:	08c9      	lsrs	r1, r1, #3
    e762:	f001 0104 	and.w	r1, r1, #4
    e766:	f003 0308 	and.w	r3, r3, #8
    e76a:	430b      	orrs	r3, r1
    e76c:	0851      	lsrs	r1, r2, #1
    e76e:	ea43 5352 	orr.w	r3, r3, r2, lsr #21
    e772:	f001 0108 	and.w	r1, r1, #8
    e776:	430b      	orrs	r3, r1
    e778:	08d1      	lsrs	r1, r2, #3
    e77a:	f001 0104 	and.w	r1, r1, #4
    e77e:	0cd2      	lsrs	r2, r2, #19
    e780:	430b      	orrs	r3, r1
    e782:	f002 0202 	and.w	r2, r2, #2
    e786:	431a      	orrs	r2, r3
    e788:	3a01      	subs	r2, #1
    e78a:	2a0e      	cmp	r2, #14
    e78c:	d80b      	bhi.n	e7a6 <am_hal_mcuctrl_control+0x12a>
    e78e:	e8df f002 	tbb	[pc, r2]
    e792:	082c      	.short	0x082c
    e794:	180a1808 	.word	0x180a1808
    e798:	081e1e08 	.word	0x081e1e08
    e79c:	181e2a08 	.word	0x181e2a08
    e7a0:	08          	.byte	0x08
    e7a1:	00          	.byte	0x00
    e7a2:	f06f 0530 	mvn.w	r5, #48	; 0x30
    e7a6:	f7ff ff61 	bl	e66c <am_hal_interrupt_master_disable>
    e7aa:	4b14      	ldr	r3, [pc, #80]	; (e7fc <am_hal_mcuctrl_control+0x180>)
    e7ac:	9001      	str	r0, [sp, #4]
    e7ae:	f8d3 2284 	ldr.w	r2, [r3, #644]	; 0x284
    e7b2:	4316      	orrs	r6, r2
    e7b4:	4035      	ands	r5, r6
    e7b6:	f8c3 5284 	str.w	r5, [r3, #644]	; 0x284
    e7ba:	9801      	ldr	r0, [sp, #4]
    e7bc:	f7ff ff5a 	bl	e674 <am_hal_interrupt_master_set>
    e7c0:	e79a      	b.n	e6f8 <am_hal_mcuctrl_control+0x7c>
    e7c2:	2407      	movs	r4, #7
    e7c4:	e798      	b.n	e6f8 <am_hal_mcuctrl_control+0x7c>
    e7c6:	f06f 0502 	mvn.w	r5, #2
    e7ca:	2601      	movs	r6, #1
    e7cc:	e7c7      	b.n	e75e <am_hal_mcuctrl_control+0xe2>
    e7ce:	f06f 0520 	mvn.w	r5, #32
    e7d2:	2610      	movs	r6, #16
    e7d4:	e7e7      	b.n	e7a6 <am_hal_mcuctrl_control+0x12a>
    e7d6:	f04f 35ff 	mov.w	r5, #4294967295
    e7da:	2603      	movs	r6, #3
    e7dc:	e7bf      	b.n	e75e <am_hal_mcuctrl_control+0xe2>
    e7de:	2600      	movs	r6, #0
    e7e0:	f06f 0502 	mvn.w	r5, #2
    e7e4:	e7bb      	b.n	e75e <am_hal_mcuctrl_control+0xe2>
    e7e6:	2630      	movs	r6, #48	; 0x30
    e7e8:	e7dd      	b.n	e7a6 <am_hal_mcuctrl_control+0x12a>
    e7ea:	f06f 0520 	mvn.w	r5, #32
    e7ee:	e7da      	b.n	e7a6 <am_hal_mcuctrl_control+0x12a>
    e7f0:	2600      	movs	r6, #0
    e7f2:	f04f 35ff 	mov.w	r5, #4294967295
    e7f6:	e7b2      	b.n	e75e <am_hal_mcuctrl_control+0xe2>
    e7f8:	2406      	movs	r4, #6
    e7fa:	e77d      	b.n	e6f8 <am_hal_mcuctrl_control+0x7c>
    e7fc:	40020000 	.word	0x40020000

0000e800 <am_hal_mcuctrl_info_get>:
    e800:	2900      	cmp	r1, #0
    e802:	f000 808f 	beq.w	e924 <am_hal_mcuctrl_info_get+0x124>
    e806:	2801      	cmp	r0, #1
    e808:	b430      	push	{r4, r5}
    e80a:	d006      	beq.n	e81a <am_hal_mcuctrl_info_get+0x1a>
    e80c:	2802      	cmp	r0, #2
    e80e:	d06d      	beq.n	e8ec <am_hal_mcuctrl_info_get+0xec>
    e810:	2800      	cmp	r0, #0
    e812:	d055      	beq.n	e8c0 <am_hal_mcuctrl_info_get+0xc0>
    e814:	2006      	movs	r0, #6
    e816:	bc30      	pop	{r4, r5}
    e818:	4770      	bx	lr
    e81a:	4a43      	ldr	r2, [pc, #268]	; (e928 <am_hal_mcuctrl_info_get+0x128>)
    e81c:	4843      	ldr	r0, [pc, #268]	; (e92c <am_hal_mcuctrl_info_get+0x12c>)
    e81e:	6813      	ldr	r3, [r2, #0]
    e820:	600b      	str	r3, [r1, #0]
    e822:	6854      	ldr	r4, [r2, #4]
    e824:	604c      	str	r4, [r1, #4]
    e826:	6894      	ldr	r4, [r2, #8]
    e828:	608c      	str	r4, [r1, #8]
    e82a:	68d4      	ldr	r4, [r2, #12]
    e82c:	60cc      	str	r4, [r1, #12]
    e82e:	f3c3 5503 	ubfx	r5, r3, #20, #4
    e832:	6914      	ldr	r4, [r2, #16]
    e834:	610c      	str	r4, [r1, #16]
    e836:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    e83a:	4c3d      	ldr	r4, [pc, #244]	; (e930 <am_hal_mcuctrl_info_get+0x130>)
    e83c:	6950      	ldr	r0, [r2, #20]
    e83e:	6148      	str	r0, [r1, #20]
    e840:	f003 0201 	and.w	r2, r3, #1
    e844:	f3c3 4303 	ubfx	r3, r3, #16, #4
    e848:	e9c1 2506 	strd	r2, r5, [r1, #24]
    e84c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    e850:	4a38      	ldr	r2, [pc, #224]	; (e934 <am_hal_mcuctrl_info_get+0x134>)
    e852:	620b      	str	r3, [r1, #32]
    e854:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    e858:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    e85c:	b2db      	uxtb	r3, r3
    e85e:	f000 000f 	and.w	r0, r0, #15
    e862:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    e866:	624b      	str	r3, [r1, #36]	; 0x24
    e868:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    e86c:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    e870:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e874:	f000 000f 	and.w	r0, r0, #15
    e878:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e87c:	628b      	str	r3, [r1, #40]	; 0x28
    e87e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e882:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e88a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e88e:	4303      	orrs	r3, r0
    e890:	62cb      	str	r3, [r1, #44]	; 0x2c
    e892:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e896:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e89a:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e89e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e8a2:	b2db      	uxtb	r3, r3
    e8a4:	041b      	lsls	r3, r3, #16
    e8a6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e8aa:	fa5f fc82 	uxtb.w	ip, r2
    e8ae:	ea43 030c 	orr.w	r3, r3, ip
    e8b2:	b2c2      	uxtb	r2, r0
    e8b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e8b8:	630b      	str	r3, [r1, #48]	; 0x30
    e8ba:	2000      	movs	r0, #0
    e8bc:	bc30      	pop	{r4, r5}
    e8be:	4770      	bx	lr
    e8c0:	4a19      	ldr	r2, [pc, #100]	; (e928 <am_hal_mcuctrl_info_get+0x128>)
    e8c2:	6993      	ldr	r3, [r2, #24]
    e8c4:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e8c8:	700c      	strb	r4, [r1, #0]
    e8ca:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e8ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e8d2:	704b      	strb	r3, [r1, #1]
    e8d4:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e8d8:	710b      	strb	r3, [r1, #4]
    e8da:	6953      	ldr	r3, [r2, #20]
    e8dc:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e8e0:	f003 0301 	and.w	r3, r3, #1
    e8e4:	bc30      	pop	{r4, r5}
    e8e6:	708a      	strb	r2, [r1, #2]
    e8e8:	70cb      	strb	r3, [r1, #3]
    e8ea:	4770      	bx	lr
    e8ec:	4a0e      	ldr	r2, [pc, #56]	; (e928 <am_hal_mcuctrl_info_get+0x128>)
    e8ee:	6848      	ldr	r0, [r1, #4]
    e8f0:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e8f4:	f003 0401 	and.w	r4, r3, #1
    e8f8:	700c      	strb	r4, [r1, #0]
    e8fa:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e8fe:	720c      	strb	r4, [r1, #8]
    e900:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e904:	60cc      	str	r4, [r1, #12]
    e906:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e90a:	4320      	orrs	r0, r4
    e90c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e910:	6048      	str	r0, [r1, #4]
    e912:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e916:	740b      	strb	r3, [r1, #16]
    e918:	694b      	ldr	r3, [r1, #20]
    e91a:	4313      	orrs	r3, r2
    e91c:	2000      	movs	r0, #0
    e91e:	bc30      	pop	{r4, r5}
    e920:	614b      	str	r3, [r1, #20]
    e922:	4770      	bx	lr
    e924:	2006      	movs	r0, #6
    e926:	4770      	bx	lr
    e928:	40020000 	.word	0x40020000
    e92c:	000112b0 	.word	0x000112b0
    e930:	000112f0 	.word	0x000112f0
    e934:	f0000f00 	.word	0xf0000f00

0000e938 <mspi_dummy_callback>:
    e938:	4770      	bx	lr
    e93a:	bf00      	nop

0000e93c <mspi_seq_loopback>:
    e93c:	f8d0 382c 	ldr.w	r3, [r0, #2092]	; 0x82c
    e940:	4a07      	ldr	r2, [pc, #28]	; (e960 <mspi_seq_loopback+0x24>)
    e942:	b410      	push	{r4}
    e944:	3301      	adds	r3, #1
    e946:	2400      	movs	r4, #0
    e948:	e9c0 4306 	strd	r4, r3, [r0, #24]
    e94c:	2101      	movs	r1, #1
    e94e:	2340      	movs	r3, #64	; 0x40
    e950:	f880 1830 	strb.w	r1, [r0, #2096]	; 0x830
    e954:	f85d 4b04 	ldr.w	r4, [sp], #4
    e958:	f8c2 32b4 	str.w	r3, [r2, #692]	; 0x2b4
    e95c:	4770      	bx	lr
    e95e:	bf00      	nop
    e960:	50014000 	.word	0x50014000

0000e964 <mspi_device_configure.constprop.0>:
    e964:	b410      	push	{r4}
    e966:	2813      	cmp	r0, #19
    e968:	f200 8123 	bhi.w	ebb2 <mspi_device_configure.constprop.0+0x24e>
    e96c:	e8df f010 	tbh	[pc, r0, lsl #1]
    e970:	007d0096 	.word	0x007d0096
    e974:	00670072 	.word	0x00670072
    e978:	0051005c 	.word	0x0051005c
    e97c:	0033004e 	.word	0x0033004e
    e980:	00140014 	.word	0x00140014
    e984:	011c0018 	.word	0x011c0018
    e988:	00fa010b 	.word	0x00fa010b
    e98c:	00d800e9 	.word	0x00d800e9
    e990:	00b400cd 	.word	0x00b400cd
    e994:	00ae00b1 	.word	0x00ae00b1
    e998:	2006      	movs	r0, #6
    e99a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e99e:	4770      	bx	lr
    e9a0:	4b85      	ldr	r3, [pc, #532]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    e9a2:	6859      	ldr	r1, [r3, #4]
    e9a4:	2001      	movs	r0, #1
    e9a6:	f360 0103 	bfi	r1, r0, #0, #4
    e9aa:	6059      	str	r1, [r3, #4]
    e9ac:	6859      	ldr	r1, [r3, #4]
    e9ae:	f36f 11c7 	bfc	r1, #7, #1
    e9b2:	6059      	str	r1, [r3, #4]
    e9b4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    e9b8:	2200      	movs	r2, #0
    e9ba:	f240 1403 	movw	r4, #259	; 0x103
    e9be:	f360 210a 	bfi	r1, r0, #8, #3
    e9c2:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    e9c6:	4610      	mov	r0, r2
    e9c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e9cc:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    e9d0:	f85d 4b04 	ldr.w	r4, [sp], #4
    e9d4:	4770      	bx	lr
    e9d6:	4b78      	ldr	r3, [pc, #480]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    e9d8:	200e      	movs	r0, #14
    e9da:	6859      	ldr	r1, [r3, #4]
    e9dc:	f360 0103 	bfi	r1, r0, #0, #4
    e9e0:	6059      	str	r1, [r3, #4]
    e9e2:	6859      	ldr	r1, [r3, #4]
    e9e4:	2200      	movs	r2, #0
    e9e6:	f240 14ff 	movw	r4, #511	; 0x1ff
    e9ea:	f36f 11c7 	bfc	r1, #7, #1
    e9ee:	6059      	str	r1, [r3, #4]
    e9f0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    e9f4:	f36f 210a 	bfc	r1, #8, #3
    e9f8:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    e9fc:	4610      	mov	r0, r2
    e9fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ea02:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    ea06:	f85d 4b04 	ldr.w	r4, [sp], #4
    ea0a:	4770      	bx	lr
    ea0c:	4b6a      	ldr	r3, [pc, #424]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    ea0e:	200d      	movs	r0, #13
    ea10:	e7e3      	b.n	e9da <mspi_device_configure.constprop.0+0x76>
    ea12:	4b69      	ldr	r3, [pc, #420]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    ea14:	6859      	ldr	r1, [r3, #4]
    ea16:	200a      	movs	r0, #10
    ea18:	f360 0103 	bfi	r1, r0, #0, #4
    ea1c:	6059      	str	r1, [r3, #4]
    ea1e:	6859      	ldr	r1, [r3, #4]
    ea20:	2200      	movs	r2, #0
    ea22:	f44f 74f8 	mov.w	r4, #496	; 0x1f0
    ea26:	e7e0      	b.n	e9ea <mspi_device_configure.constprop.0+0x86>
    ea28:	4b63      	ldr	r3, [pc, #396]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    ea2a:	6859      	ldr	r1, [r3, #4]
    ea2c:	2009      	movs	r0, #9
    ea2e:	f360 0103 	bfi	r1, r0, #0, #4
    ea32:	6059      	str	r1, [r3, #4]
    ea34:	6859      	ldr	r1, [r3, #4]
    ea36:	2200      	movs	r2, #0
    ea38:	f240 140f 	movw	r4, #271	; 0x10f
    ea3c:	e7d5      	b.n	e9ea <mspi_device_configure.constprop.0+0x86>
    ea3e:	4b5e      	ldr	r3, [pc, #376]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    ea40:	2006      	movs	r0, #6
    ea42:	6859      	ldr	r1, [r3, #4]
    ea44:	f360 0103 	bfi	r1, r0, #0, #4
    ea48:	6059      	str	r1, [r3, #4]
    ea4a:	6859      	ldr	r1, [r3, #4]
    ea4c:	2200      	movs	r2, #0
    ea4e:	f44f 7498 	mov.w	r4, #304	; 0x130
    ea52:	e7ca      	b.n	e9ea <mspi_device_configure.constprop.0+0x86>
    ea54:	4b58      	ldr	r3, [pc, #352]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    ea56:	2005      	movs	r0, #5
    ea58:	6859      	ldr	r1, [r3, #4]
    ea5a:	f360 0103 	bfi	r1, r0, #0, #4
    ea5e:	6059      	str	r1, [r3, #4]
    ea60:	6859      	ldr	r1, [r3, #4]
    ea62:	2200      	movs	r2, #0
    ea64:	f240 1403 	movw	r4, #259	; 0x103
    ea68:	e7bf      	b.n	e9ea <mspi_device_configure.constprop.0+0x86>
    ea6a:	4b53      	ldr	r3, [pc, #332]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    ea6c:	685a      	ldr	r2, [r3, #4]
    ea6e:	2002      	movs	r0, #2
    ea70:	f360 0203 	bfi	r2, r0, #0, #4
    ea74:	605a      	str	r2, [r3, #4]
    ea76:	685a      	ldr	r2, [r3, #4]
    ea78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ea7c:	605a      	str	r2, [r3, #4]
    ea7e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    ea82:	2100      	movs	r1, #0
    ea84:	f44f 7498 	mov.w	r4, #304	; 0x130
    ea88:	f36f 220a 	bfc	r2, #8, #3
    ea8c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    ea90:	4608      	mov	r0, r1
    ea92:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    ea96:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    ea9a:	e77e      	b.n	e99a <mspi_device_configure.constprop.0+0x36>
    ea9c:	4b46      	ldr	r3, [pc, #280]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    ea9e:	685a      	ldr	r2, [r3, #4]
    eaa0:	2401      	movs	r4, #1
    eaa2:	f364 0203 	bfi	r2, r4, #0, #4
    eaa6:	605a      	str	r2, [r3, #4]
    eaa8:	685a      	ldr	r2, [r3, #4]
    eaaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    eaae:	605a      	str	r2, [r3, #4]
    eab0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    eab4:	f36f 220a 	bfc	r2, #8, #3
    eab8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    eabc:	2100      	movs	r1, #0
    eabe:	f240 1203 	movw	r2, #259	; 0x103
    eac2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    eac6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    eaca:	e766      	b.n	e99a <mspi_device_configure.constprop.0+0x36>
    eacc:	4b3a      	ldr	r3, [pc, #232]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    eace:	2002      	movs	r0, #2
    ead0:	e7b7      	b.n	ea42 <mspi_device_configure.constprop.0+0xde>
    ead2:	4b39      	ldr	r3, [pc, #228]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    ead4:	2001      	movs	r0, #1
    ead6:	e7bf      	b.n	ea58 <mspi_device_configure.constprop.0+0xf4>
    ead8:	4b37      	ldr	r3, [pc, #220]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    eada:	685a      	ldr	r2, [r3, #4]
    eadc:	2002      	movs	r0, #2
    eade:	f360 0203 	bfi	r2, r0, #0, #4
    eae2:	605a      	str	r2, [r3, #4]
    eae4:	685a      	ldr	r2, [r3, #4]
    eae6:	2100      	movs	r1, #0
    eae8:	f44f 74f8 	mov.w	r4, #496	; 0x1f0
    eaec:	f36f 12c7 	bfc	r2, #7, #1
    eaf0:	605a      	str	r2, [r3, #4]
    eaf2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    eaf6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
    eafa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    eafe:	4608      	mov	r0, r1
    eb00:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    eb04:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    eb08:	e747      	b.n	e99a <mspi_device_configure.constprop.0+0x36>
    eb0a:	4b2b      	ldr	r3, [pc, #172]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    eb0c:	685a      	ldr	r2, [r3, #4]
    eb0e:	2001      	movs	r0, #1
    eb10:	f360 0203 	bfi	r2, r0, #0, #4
    eb14:	605a      	str	r2, [r3, #4]
    eb16:	685a      	ldr	r2, [r3, #4]
    eb18:	2100      	movs	r1, #0
    eb1a:	f240 140f 	movw	r4, #271	; 0x10f
    eb1e:	e7e5      	b.n	eaec <mspi_device_configure.constprop.0+0x188>
    eb20:	4b25      	ldr	r3, [pc, #148]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    eb22:	685a      	ldr	r2, [r3, #4]
    eb24:	2102      	movs	r1, #2
    eb26:	f361 0203 	bfi	r2, r1, #0, #4
    eb2a:	605a      	str	r2, [r3, #4]
    eb2c:	6859      	ldr	r1, [r3, #4]
    eb2e:	f36f 11c7 	bfc	r1, #7, #1
    eb32:	6059      	str	r1, [r3, #4]
    eb34:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    eb38:	2005      	movs	r0, #5
    eb3a:	2200      	movs	r2, #0
    eb3c:	f44f 74f8 	mov.w	r4, #496	; 0x1f0
    eb40:	e73d      	b.n	e9be <mspi_device_configure.constprop.0+0x5a>
    eb42:	4b1d      	ldr	r3, [pc, #116]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    eb44:	685a      	ldr	r2, [r3, #4]
    eb46:	2101      	movs	r1, #1
    eb48:	f361 0203 	bfi	r2, r1, #0, #4
    eb4c:	605a      	str	r2, [r3, #4]
    eb4e:	6859      	ldr	r1, [r3, #4]
    eb50:	f36f 11c7 	bfc	r1, #7, #1
    eb54:	6059      	str	r1, [r3, #4]
    eb56:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    eb5a:	2005      	movs	r0, #5
    eb5c:	2200      	movs	r2, #0
    eb5e:	f240 140f 	movw	r4, #271	; 0x10f
    eb62:	e72c      	b.n	e9be <mspi_device_configure.constprop.0+0x5a>
    eb64:	4b14      	ldr	r3, [pc, #80]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    eb66:	685a      	ldr	r2, [r3, #4]
    eb68:	2102      	movs	r1, #2
    eb6a:	2003      	movs	r0, #3
    eb6c:	f361 0203 	bfi	r2, r1, #0, #4
    eb70:	605a      	str	r2, [r3, #4]
    eb72:	6859      	ldr	r1, [r3, #4]
    eb74:	f36f 11c7 	bfc	r1, #7, #1
    eb78:	6059      	str	r1, [r3, #4]
    eb7a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    eb7e:	2200      	movs	r2, #0
    eb80:	f44f 7498 	mov.w	r4, #304	; 0x130
    eb84:	e71b      	b.n	e9be <mspi_device_configure.constprop.0+0x5a>
    eb86:	4b0c      	ldr	r3, [pc, #48]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    eb88:	685a      	ldr	r2, [r3, #4]
    eb8a:	2101      	movs	r1, #1
    eb8c:	f361 0203 	bfi	r2, r1, #0, #4
    eb90:	605a      	str	r2, [r3, #4]
    eb92:	6859      	ldr	r1, [r3, #4]
    eb94:	f36f 11c7 	bfc	r1, #7, #1
    eb98:	6059      	str	r1, [r3, #4]
    eb9a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    eb9e:	2003      	movs	r0, #3
    eba0:	2200      	movs	r2, #0
    eba2:	f240 1403 	movw	r4, #259	; 0x103
    eba6:	e70a      	b.n	e9be <mspi_device_configure.constprop.0+0x5a>
    eba8:	4b03      	ldr	r3, [pc, #12]	; (ebb8 <mspi_device_configure.constprop.0+0x254>)
    ebaa:	2102      	movs	r1, #2
    ebac:	685a      	ldr	r2, [r3, #4]
    ebae:	2001      	movs	r0, #1
    ebb0:	e7dc      	b.n	eb6c <mspi_device_configure.constprop.0+0x208>
    ebb2:	2000      	movs	r0, #0
    ebb4:	e6f1      	b.n	e99a <mspi_device_configure.constprop.0+0x36>
    ebb6:	bf00      	nop
    ebb8:	50014000 	.word	0x50014000

0000ebbc <sched_hiprio>:
    ebbc:	b570      	push	{r4, r5, r6, lr}
    ebbe:	4606      	mov	r6, r0
    ebc0:	b084      	sub	sp, #16
    ebc2:	460c      	mov	r4, r1
    ebc4:	f7ff fd52 	bl	e66c <am_hal_interrupt_master_disable>
    ebc8:	f8d6 583c 	ldr.w	r5, [r6, #2108]	; 0x83c
    ebcc:	9003      	str	r0, [sp, #12]
    ebce:	442c      	add	r4, r5
    ebd0:	9803      	ldr	r0, [sp, #12]
    ebd2:	f8c6 483c 	str.w	r4, [r6, #2108]	; 0x83c
    ebd6:	f7ff fd4d 	bl	e674 <am_hal_interrupt_master_set>
    ebda:	b115      	cbz	r5, ebe2 <sched_hiprio+0x26>
    ebdc:	2000      	movs	r0, #0
    ebde:	b004      	add	sp, #16
    ebe0:	bd70      	pop	{r4, r5, r6, pc}
    ebe2:	4d2a      	ldr	r5, [pc, #168]	; (ec8c <sched_hiprio+0xd0>)
    ebe4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    ebe8:	f8c5 32b4 	str.w	r3, [r5, #692]	; 0x2b4
    ebec:	f8d5 32a0 	ldr.w	r3, [r5, #672]	; 0x2a0
    ebf0:	07d8      	lsls	r0, r3, #31
    ebf2:	d512      	bpl.n	ec1a <sched_hiprio+0x5e>
    ebf4:	4c26      	ldr	r4, [pc, #152]	; (ec90 <sched_hiprio+0xd4>)
    ebf6:	f8d5 32ac 	ldr.w	r3, [r5, #684]	; 0x2ac
    ebfa:	0719      	lsls	r1, r3, #28
    ebfc:	f04f 0010 	mov.w	r0, #16
    ec00:	d503      	bpl.n	ec0a <sched_hiprio+0x4e>
    ec02:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
    ec06:	061a      	lsls	r2, r3, #24
    ec08:	d407      	bmi.n	ec1a <sched_hiprio+0x5e>
    ec0a:	3c01      	subs	r4, #1
    ec0c:	d03c      	beq.n	ec88 <sched_hiprio+0xcc>
    ec0e:	f7ff fcd9 	bl	e5c4 <am_hal_flash_delay>
    ec12:	f8d5 32a0 	ldr.w	r3, [r5, #672]	; 0x2a0
    ec16:	07db      	lsls	r3, r3, #31
    ec18:	d4ed      	bmi.n	ebf6 <sched_hiprio+0x3a>
    ec1a:	2401      	movs	r4, #1
    ec1c:	491d      	ldr	r1, [pc, #116]	; (ec94 <sched_hiprio+0xd8>)
    ec1e:	481e      	ldr	r0, [pc, #120]	; (ec98 <sched_hiprio+0xdc>)
    ec20:	9400      	str	r4, [sp, #0]
    ec22:	2300      	movs	r3, #0
    ec24:	4622      	mov	r2, r4
    ec26:	f7ff fcdd 	bl	e5e4 <am_hal_flash_delay_status_check>
    ec2a:	2800      	cmp	r0, #0
    ec2c:	d1d7      	bne.n	ebde <sched_hiprio+0x22>
    ec2e:	4d17      	ldr	r5, [pc, #92]	; (ec8c <sched_hiprio+0xd0>)
    ec30:	6230      	str	r0, [r6, #32]
    ec32:	2341      	movs	r3, #65	; 0x41
    ec34:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
    ec38:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    ec3c:	f8d6 1850 	ldr.w	r1, [r6, #2128]	; 0x850
    ec40:	f043 0341 	orr.w	r3, r3, #65	; 0x41
    ec44:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    ec48:	f8d6 384c 	ldr.w	r3, [r6, #2124]	; 0x84c
    ec4c:	f8d6 2844 	ldr.w	r2, [r6, #2116]	; 0x844
    ec50:	f886 4838 	strb.w	r4, [r6, #2104]	; 0x838
    ec54:	4423      	add	r3, r4
    ec56:	fbb3 f4f2 	udiv	r4, r3, r2
    ec5a:	fb02 3314 	mls	r3, r2, r4, r3
    ec5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ec62:	f8c5 0250 	str.w	r0, [r5, #592]	; 0x250
    ec66:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    ec6a:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    ec6e:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
    ec72:	6853      	ldr	r3, [r2, #4]
    ec74:	f8c5 325c 	str.w	r3, [r5, #604]	; 0x25c
    ec78:	6893      	ldr	r3, [r2, #8]
    ec7a:	f8c5 3260 	str.w	r3, [r5, #608]	; 0x260
    ec7e:	68d3      	ldr	r3, [r2, #12]
    ec80:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
    ec84:	b004      	add	sp, #16
    ec86:	bd70      	pop	{r4, r5, r6, pc}
    ec88:	2004      	movs	r0, #4
    ec8a:	e7a8      	b.n	ebde <sched_hiprio+0x22>
    ec8c:	50014000 	.word	0x50014000
    ec90:	000186a1 	.word	0x000186a1
    ec94:	50014254 	.word	0x50014254
    ec98:	000186a0 	.word	0x000186a0

0000ec9c <build_dma_cmdlist>:
    ec9c:	b470      	push	{r4, r5, r6}
    ec9e:	2900      	cmp	r1, #0
    eca0:	d03b      	beq.n	ed1a <build_dma_cmdlist+0x7e>
    eca2:	2901      	cmp	r1, #1
    eca4:	d136      	bne.n	ed14 <build_dma_cmdlist+0x78>
    eca6:	6859      	ldr	r1, [r3, #4]
    eca8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    ecac:	d26c      	bcs.n	ed88 <build_dma_cmdlist+0xec>
    ecae:	f8d0 6834 	ldr.w	r6, [r0, #2100]	; 0x834
    ecb2:	691d      	ldr	r5, [r3, #16]
    ecb4:	b10e      	cbz	r6, ecba <build_dma_cmdlist+0x1e>
    ecb6:	2d00      	cmp	r5, #0
    ecb8:	d169      	bne.n	ed8e <build_dma_cmdlist+0xf2>
    ecba:	68dc      	ldr	r4, [r3, #12]
    ecbc:	6154      	str	r4, [r2, #20]
    ecbe:	689c      	ldr	r4, [r3, #8]
    ecc0:	6251      	str	r1, [r2, #36]	; 0x24
    ecc2:	4934      	ldr	r1, [pc, #208]	; (ed94 <build_dma_cmdlist+0xf8>)
    ecc4:	6311      	str	r1, [r2, #48]	; 0x30
    ecc6:	6291      	str	r1, [r2, #40]	; 0x28
    ecc8:	3108      	adds	r1, #8
    ecca:	6111      	str	r1, [r2, #16]
    eccc:	3104      	adds	r1, #4
    ecce:	6191      	str	r1, [r2, #24]
    ecd0:	3104      	adds	r1, #4
    ecd2:	6211      	str	r1, [r2, #32]
    ecd4:	2100      	movs	r1, #0
    ecd6:	61d4      	str	r4, [r2, #28]
    ecd8:	6351      	str	r1, [r2, #52]	; 0x34
    ecda:	7859      	ldrb	r1, [r3, #1]
    ecdc:	789c      	ldrb	r4, [r3, #2]
    ecde:	00c9      	lsls	r1, r1, #3
    ece0:	00a4      	lsls	r4, r4, #2
    ece2:	f001 0118 	and.w	r1, r1, #24
    ece6:	f004 0404 	and.w	r4, r4, #4
    ecea:	4321      	orrs	r1, r4
    ecec:	f041 0103 	orr.w	r1, r1, #3
    ecf0:	62d1      	str	r1, [r2, #44]	; 0x2c
    ecf2:	2e01      	cmp	r6, #1
    ecf4:	4928      	ldr	r1, [pc, #160]	; (ed98 <build_dma_cmdlist+0xfc>)
    ecf6:	6091      	str	r1, [r2, #8]
    ecf8:	6011      	str	r1, [r2, #0]
    ecfa:	d03d      	beq.n	ed78 <build_dma_cmdlist+0xdc>
    ecfc:	2e02      	cmp	r6, #2
    ecfe:	d138      	bne.n	ed72 <build_dma_cmdlist+0xd6>
    ed00:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    ed04:	6958      	ldr	r0, [r3, #20]
    ed06:	4b25      	ldr	r3, [pc, #148]	; (ed9c <build_dma_cmdlist+0x100>)
    ed08:	6055      	str	r5, [r2, #4]
    ed0a:	e9c2 300e 	strd	r3, r0, [r2, #56]	; 0x38
    ed0e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    ed12:	60d4      	str	r4, [r2, #12]
    ed14:	2000      	movs	r0, #0
    ed16:	bc70      	pop	{r4, r5, r6}
    ed18:	4770      	bx	lr
    ed1a:	681c      	ldr	r4, [r3, #0]
    ed1c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    ed20:	d232      	bcs.n	ed88 <build_dma_cmdlist+0xec>
    ed22:	7a80      	ldrb	r0, [r0, #10]
    ed24:	791d      	ldrb	r5, [r3, #4]
    ed26:	0424      	lsls	r4, r4, #16
    ed28:	ea44 1480 	orr.w	r4, r4, r0, lsl #6
    ed2c:	4608      	mov	r0, r1
    ed2e:	ea44 21c5 	orr.w	r1, r4, r5, lsl #11
    ed32:	7b1c      	ldrb	r4, [r3, #12]
    ed34:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
    ed38:	799c      	ldrb	r4, [r3, #6]
    ed3a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    ed3e:	7c1c      	ldrb	r4, [r3, #16]
    ed40:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
    ed44:	7c5c      	ldrb	r4, [r3, #17]
    ed46:	ea41 01c4 	orr.w	r1, r1, r4, lsl #3
    ed4a:	689c      	ldr	r4, [r3, #8]
    ed4c:	6054      	str	r4, [r2, #4]
    ed4e:	4c14      	ldr	r4, [pc, #80]	; (eda0 <build_dma_cmdlist+0x104>)
    ed50:	6094      	str	r4, [r2, #8]
    ed52:	89dc      	ldrh	r4, [r3, #14]
    ed54:	60d4      	str	r4, [r2, #12]
    ed56:	4c13      	ldr	r4, [pc, #76]	; (eda4 <build_dma_cmdlist+0x108>)
    ed58:	6114      	str	r4, [r2, #16]
    ed5a:	3408      	adds	r4, #8
    ed5c:	6014      	str	r4, [r2, #0]
    ed5e:	795b      	ldrb	r3, [r3, #5]
    ed60:	029b      	lsls	r3, r3, #10
    ed62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ed66:	430b      	orrs	r3, r1
    ed68:	f043 0301 	orr.w	r3, r3, #1
    ed6c:	bc70      	pop	{r4, r5, r6}
    ed6e:	6153      	str	r3, [r2, #20]
    ed70:	4770      	bx	lr
    ed72:	f445 4581 	orr.w	r5, r5, #16512	; 0x4080
    ed76:	e7c5      	b.n	ed04 <build_dma_cmdlist+0x68>
    ed78:	f445 4581 	orr.w	r5, r5, #16512	; 0x4080
    ed7c:	2402      	movs	r4, #2
    ed7e:	f045 0520 	orr.w	r5, r5, #32
    ed82:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
    ed86:	e7bd      	b.n	ed04 <build_dma_cmdlist+0x68>
    ed88:	2005      	movs	r0, #5
    ed8a:	bc70      	pop	{r4, r5, r6}
    ed8c:	4770      	bx	lr
    ed8e:	2007      	movs	r0, #7
    ed90:	e7c1      	b.n	ed16 <build_dma_cmdlist+0x7a>
    ed92:	bf00      	nop
    ed94:	50014250 	.word	0x50014250
    ed98:	500142b8 	.word	0x500142b8
    ed9c:	500142b4 	.word	0x500142b4
    eda0:	5001400c 	.word	0x5001400c
    eda4:	50014000 	.word	0x50014000

0000eda8 <am_hal_mspi_initialize>:
    eda8:	b990      	cbnz	r0, edd0 <am_hal_mspi_initialize+0x28>
    edaa:	b1a9      	cbz	r1, edd8 <am_hal_mspi_initialize+0x30>
    edac:	4b0b      	ldr	r3, [pc, #44]	; (eddc <am_hal_mspi_initialize+0x34>)
    edae:	78d8      	ldrb	r0, [r3, #3]
    edb0:	f010 0001 	ands.w	r0, r0, #1
    edb4:	d10e      	bne.n	edd4 <am_hal_mspi_initialize+0x2c>
    edb6:	b410      	push	{r4}
    edb8:	681c      	ldr	r4, [r3, #0]
    edba:	4a09      	ldr	r2, [pc, #36]	; (ede0 <am_hal_mspi_initialize+0x38>)
    edbc:	f004 4c7e 	and.w	ip, r4, #4261412864	; 0xfe000000
    edc0:	ea4c 0202 	orr.w	r2, ip, r2
    edc4:	e9c3 2000 	strd	r2, r0, [r3]
    edc8:	f85d 4b04 	ldr.w	r4, [sp], #4
    edcc:	600b      	str	r3, [r1, #0]
    edce:	4770      	bx	lr
    edd0:	2005      	movs	r0, #5
    edd2:	4770      	bx	lr
    edd4:	2007      	movs	r0, #7
    edd6:	4770      	bx	lr
    edd8:	2006      	movs	r0, #6
    edda:	4770      	bx	lr
    eddc:	10005a44 	.word	0x10005a44
    ede0:	01bebebe 	.word	0x01bebebe

0000ede4 <am_hal_mspi_disable>:
    ede4:	b570      	push	{r4, r5, r6, lr}
    ede6:	b1a0      	cbz	r0, ee12 <am_hal_mspi_disable+0x2e>
    ede8:	6803      	ldr	r3, [r0, #0]
    edea:	4a16      	ldr	r2, [pc, #88]	; (ee44 <am_hal_mspi_disable+0x60>)
    edec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    edf0:	4293      	cmp	r3, r2
    edf2:	4604      	mov	r4, r0
    edf4:	d10d      	bne.n	ee12 <am_hal_mspi_disable+0x2e>
    edf6:	78c5      	ldrb	r5, [r0, #3]
    edf8:	f015 0502 	ands.w	r5, r5, #2
    edfc:	d007      	beq.n	ee0e <am_hal_mspi_disable+0x2a>
    edfe:	6943      	ldr	r3, [r0, #20]
    ee00:	b1c3      	cbz	r3, ee34 <am_hal_mspi_disable+0x50>
    ee02:	f8d0 0824 	ldr.w	r0, [r0, #2084]	; 0x824
    ee06:	f001 fa75 	bl	102f4 <am_hal_cmdq_disable>
    ee0a:	4605      	mov	r5, r0
    ee0c:	b120      	cbz	r0, ee18 <am_hal_mspi_disable+0x34>
    ee0e:	4628      	mov	r0, r5
    ee10:	bd70      	pop	{r4, r5, r6, pc}
    ee12:	2502      	movs	r5, #2
    ee14:	4628      	mov	r0, r5
    ee16:	bd70      	pop	{r4, r5, r6, pc}
    ee18:	6863      	ldr	r3, [r4, #4]
    ee1a:	4e0b      	ldr	r6, [pc, #44]	; (ee48 <am_hal_mspi_disable+0x64>)
    ee1c:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
    ee20:	fb02 6603 	mla	r6, r2, r3, r6
    ee24:	f8d6 0824 	ldr.w	r0, [r6, #2084]	; 0x824
    ee28:	b120      	cbz	r0, ee34 <am_hal_mspi_disable+0x50>
    ee2a:	2101      	movs	r1, #1
    ee2c:	f001 fb20 	bl	10470 <am_hal_cmdq_term>
    ee30:	f8c6 5824 	str.w	r5, [r6, #2084]	; 0x824
    ee34:	78e3      	ldrb	r3, [r4, #3]
    ee36:	2500      	movs	r5, #0
    ee38:	f36f 0341 	bfc	r3, #1, #1
    ee3c:	70e3      	strb	r3, [r4, #3]
    ee3e:	4628      	mov	r0, r5
    ee40:	bd70      	pop	{r4, r5, r6, pc}
    ee42:	bf00      	nop
    ee44:	01bebebe 	.word	0x01bebebe
    ee48:	10005a44 	.word	0x10005a44

0000ee4c <am_hal_mspi_deinitialize>:
    ee4c:	b380      	cbz	r0, eeb0 <am_hal_mspi_deinitialize+0x64>
    ee4e:	6803      	ldr	r3, [r0, #0]
    ee50:	4a18      	ldr	r2, [pc, #96]	; (eeb4 <am_hal_mspi_deinitialize+0x68>)
    ee52:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ee56:	4293      	cmp	r3, r2
    ee58:	b570      	push	{r4, r5, r6, lr}
    ee5a:	4604      	mov	r4, r0
    ee5c:	d10a      	bne.n	ee74 <am_hal_mspi_deinitialize+0x28>
    ee5e:	78c3      	ldrb	r3, [r0, #3]
    ee60:	079b      	lsls	r3, r3, #30
    ee62:	d409      	bmi.n	ee78 <am_hal_mspi_deinitialize+0x2c>
    ee64:	78e3      	ldrb	r3, [r4, #3]
    ee66:	2000      	movs	r0, #0
    ee68:	f36f 0300 	bfc	r3, #0, #1
    ee6c:	7220      	strb	r0, [r4, #8]
    ee6e:	70e3      	strb	r3, [r4, #3]
    ee70:	6060      	str	r0, [r4, #4]
    ee72:	bd70      	pop	{r4, r5, r6, pc}
    ee74:	2002      	movs	r0, #2
    ee76:	bd70      	pop	{r4, r5, r6, pc}
    ee78:	6943      	ldr	r3, [r0, #20]
    ee7a:	b1a3      	cbz	r3, eea6 <am_hal_mspi_deinitialize+0x5a>
    ee7c:	f8d0 0824 	ldr.w	r0, [r0, #2084]	; 0x824
    ee80:	f001 fa38 	bl	102f4 <am_hal_cmdq_disable>
    ee84:	4605      	mov	r5, r0
    ee86:	2800      	cmp	r0, #0
    ee88:	d1ec      	bne.n	ee64 <am_hal_mspi_deinitialize+0x18>
    ee8a:	6863      	ldr	r3, [r4, #4]
    ee8c:	4e0a      	ldr	r6, [pc, #40]	; (eeb8 <am_hal_mspi_deinitialize+0x6c>)
    ee8e:	f44f 620a 	mov.w	r2, #2208	; 0x8a0
    ee92:	fb02 6603 	mla	r6, r2, r3, r6
    ee96:	f8d6 0824 	ldr.w	r0, [r6, #2084]	; 0x824
    ee9a:	b120      	cbz	r0, eea6 <am_hal_mspi_deinitialize+0x5a>
    ee9c:	2101      	movs	r1, #1
    ee9e:	f001 fae7 	bl	10470 <am_hal_cmdq_term>
    eea2:	f8c6 5824 	str.w	r5, [r6, #2084]	; 0x824
    eea6:	78e3      	ldrb	r3, [r4, #3]
    eea8:	f36f 0341 	bfc	r3, #1, #1
    eeac:	70e3      	strb	r3, [r4, #3]
    eeae:	e7d9      	b.n	ee64 <am_hal_mspi_deinitialize+0x18>
    eeb0:	2002      	movs	r0, #2
    eeb2:	4770      	bx	lr
    eeb4:	01bebebe 	.word	0x01bebebe
    eeb8:	10005a44 	.word	0x10005a44

0000eebc <am_hal_mspi_device_configure>:
    eebc:	2800      	cmp	r0, #0
    eebe:	f000 80ae 	beq.w	f01e <am_hal_mspi_device_configure+0x162>
    eec2:	b538      	push	{r3, r4, r5, lr}
    eec4:	6803      	ldr	r3, [r0, #0]
    eec6:	4a57      	ldr	r2, [pc, #348]	; (f024 <am_hal_mspi_device_configure+0x168>)
    eec8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eecc:	4293      	cmp	r3, r2
    eece:	4605      	mov	r5, r0
    eed0:	f040 809a 	bne.w	f008 <am_hal_mspi_device_configure+0x14c>
    eed4:	78c3      	ldrb	r3, [r0, #3]
    eed6:	f013 0302 	ands.w	r3, r3, #2
    eeda:	f040 809e 	bne.w	f01a <am_hal_mspi_device_configure+0x15e>
    eede:	7988      	ldrb	r0, [r1, #6]
    eee0:	686a      	ldr	r2, [r5, #4]
    eee2:	3801      	subs	r0, #1
    eee4:	b2c0      	uxtb	r0, r0
    eee6:	2802      	cmp	r0, #2
    eee8:	460c      	mov	r4, r1
    eeea:	bf96      	itet	ls
    eeec:	4b4e      	ldrls	r3, [pc, #312]	; (f028 <am_hal_mspi_device_configure+0x16c>)
    eeee:	4619      	movhi	r1, r3
    eef0:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
    eef4:	7823      	ldrb	r3, [r4, #0]
    eef6:	7860      	ldrb	r0, [r4, #1]
    eef8:	021b      	lsls	r3, r3, #8
    eefa:	0100      	lsls	r0, r0, #4
    eefc:	f000 0030 	and.w	r0, r0, #48	; 0x30
    ef00:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    ef04:	4303      	orrs	r3, r0
    ef06:	78a0      	ldrb	r0, [r4, #2]
    ef08:	0180      	lsls	r0, r0, #6
    ef0a:	f000 0040 	and.w	r0, r0, #64	; 0x40
    ef0e:	4303      	orrs	r3, r0
    ef10:	430b      	orrs	r3, r1
    ef12:	4946      	ldr	r1, [pc, #280]	; (f02c <am_hal_mspi_device_configure+0x170>)
    ef14:	604b      	str	r3, [r1, #4]
    ef16:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
    ef1a:	79e3      	ldrb	r3, [r4, #7]
    ef1c:	f363 200d 	bfi	r0, r3, #8, #6
    ef20:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ef24:	2b01      	cmp	r3, #1
    ef26:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    ef2a:	bf0c      	ite	eq
    ef2c:	f043 0308 	orreq.w	r3, r3, #8
    ef30:	f36f 03c3 	bfcne	r3, #3, #1
    ef34:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    ef38:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    ef3c:	f36f 0382 	bfc	r3, #2, #1
    ef40:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    ef44:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    ef48:	f043 0302 	orr.w	r3, r3, #2
    ef4c:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    ef50:	4936      	ldr	r1, [pc, #216]	; (f02c <am_hal_mspi_device_configure+0x170>)
    ef52:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    ef56:	f043 0301 	orr.w	r3, r3, #1
    ef5a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    ef5e:	7a63      	ldrb	r3, [r4, #9]
    ef60:	7a20      	ldrb	r0, [r4, #8]
    ef62:	2b00      	cmp	r3, #0
    ef64:	bf0b      	itete	eq
    ef66:	2340      	moveq	r3, #64	; 0x40
    ef68:	23c0      	movne	r3, #192	; 0xc0
    ef6a:	2100      	moveq	r1, #0
    ef6c:	2180      	movne	r1, #128	; 0x80
    ef6e:	2800      	cmp	r0, #0
    ef70:	bf18      	it	ne
    ef72:	4619      	movne	r1, r3
    ef74:	7aa3      	ldrb	r3, [r4, #10]
    ef76:	b10b      	cbz	r3, ef7c <am_hal_mspi_device_configure+0xc0>
    ef78:	f041 0120 	orr.w	r1, r1, #32
    ef7c:	7923      	ldrb	r3, [r4, #4]
    ef7e:	78e0      	ldrb	r0, [r4, #3]
    ef80:	041b      	lsls	r3, r3, #16
    ef82:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    ef86:	430b      	orrs	r3, r1
    ef88:	7aa9      	ldrb	r1, [r5, #10]
    ef8a:	6920      	ldr	r0, [r4, #16]
    ef8c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    ef90:	4926      	ldr	r1, [pc, #152]	; (f02c <am_hal_mspi_device_configure+0x170>)
    ef92:	f043 030c 	orr.w	r3, r3, #12
    ef96:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
    ef9a:	4b25      	ldr	r3, [pc, #148]	; (f030 <am_hal_mspi_device_configure+0x174>)
    ef9c:	f44f 6c0a 	mov.w	ip, #2208	; 0x8a0
    efa0:	fb0c 3202 	mla	r2, ip, r2, r3
    efa4:	68e3      	ldr	r3, [r4, #12]
    efa6:	6150      	str	r0, [r2, #20]
    efa8:	6113      	str	r3, [r2, #16]
    efaa:	b188      	cbz	r0, efd0 <am_hal_mspi_device_configure+0x114>
    efac:	2020      	movs	r0, #32
    efae:	f8c1 0264 	str.w	r0, [r1, #612]	; 0x264
    efb2:	2008      	movs	r0, #8
    efb4:	3b08      	subs	r3, #8
    efb6:	f8c1 0278 	str.w	r0, [r1, #632]	; 0x278
    efba:	f644 0047 	movw	r0, #18503	; 0x4847
    efbe:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
    efc2:	ea4f 0183 	mov.w	r1, r3, lsl #2
    efc6:	d221      	bcs.n	f00c <am_hal_mspi_device_configure+0x150>
    efc8:	f44f 7380 	mov.w	r3, #256	; 0x100
    efcc:	f8c2 3854 	str.w	r3, [r2, #2132]	; 0x854
    efd0:	8b61      	ldrh	r1, [r4, #26]
    efd2:	8ae2      	ldrh	r2, [r4, #22]
    efd4:	4b17      	ldr	r3, [pc, #92]	; (f034 <am_hal_mspi_device_configure+0x178>)
    efd6:	f3c2 0209 	ubfx	r2, r2, #0, #10
    efda:	ea03 4301 	and.w	r3, r3, r1, lsl #16
    efde:	4313      	orrs	r3, r2
    efe0:	4a12      	ldr	r2, [pc, #72]	; (f02c <am_hal_mspi_device_configure+0x170>)
    efe2:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    efe6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    efea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    efee:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    eff2:	7960      	ldrb	r0, [r4, #5]
    eff4:	f7ff fcb6 	bl	e964 <mspi_device_configure.constprop.0>
    eff8:	2000      	movs	r0, #0
    effa:	72a8      	strb	r0, [r5, #10]
    effc:	79e2      	ldrb	r2, [r4, #7]
    effe:	726a      	strb	r2, [r5, #9]
    f000:	f242 7310 	movw	r3, #10000	; 0x2710
    f004:	60eb      	str	r3, [r5, #12]
    f006:	bd38      	pop	{r3, r4, r5, pc}
    f008:	2002      	movs	r0, #2
    f00a:	bd38      	pop	{r3, r4, r5, pc}
    f00c:	4b0a      	ldr	r3, [pc, #40]	; (f038 <am_hal_mspi_device_configure+0x17c>)
    f00e:	fba3 3101 	umull	r3, r1, r3, r1
    f012:	0909      	lsrs	r1, r1, #4
    f014:	f8c2 1854 	str.w	r1, [r2, #2132]	; 0x854
    f018:	e7da      	b.n	efd0 <am_hal_mspi_device_configure+0x114>
    f01a:	2007      	movs	r0, #7
    f01c:	bd38      	pop	{r3, r4, r5, pc}
    f01e:	2002      	movs	r0, #2
    f020:	4770      	bx	lr
    f022:	bf00      	nop
    f024:	01bebebe 	.word	0x01bebebe
    f028:	00011330 	.word	0x00011330
    f02c:	50014000 	.word	0x50014000
    f030:	10005a44 	.word	0x10005a44
    f034:	03ff0000 	.word	0x03ff0000
    f038:	38e38e39 	.word	0x38e38e39

0000f03c <am_hal_mspi_enable>:
    f03c:	2800      	cmp	r0, #0
    f03e:	d041      	beq.n	f0c4 <am_hal_mspi_enable+0x88>
    f040:	b530      	push	{r4, r5, lr}
    f042:	6803      	ldr	r3, [r0, #0]
    f044:	4a20      	ldr	r2, [pc, #128]	; (f0c8 <am_hal_mspi_enable+0x8c>)
    f046:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f04a:	4293      	cmp	r3, r2
    f04c:	b085      	sub	sp, #20
    f04e:	4604      	mov	r4, r0
    f050:	d135      	bne.n	f0be <am_hal_mspi_enable+0x82>
    f052:	6943      	ldr	r3, [r0, #20]
    f054:	b363      	cbz	r3, f0b0 <am_hal_mspi_enable+0x74>
    f056:	6840      	ldr	r0, [r0, #4]
    f058:	6921      	ldr	r1, [r4, #16]
    f05a:	9302      	str	r3, [sp, #8]
    f05c:	4a1b      	ldr	r2, [pc, #108]	; (f0cc <am_hal_mspi_enable+0x90>)
    f05e:	2301      	movs	r3, #1
    f060:	f88d 300c 	strb.w	r3, [sp, #12]
    f064:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
    f068:	2500      	movs	r5, #0
    f06a:	fb03 2200 	mla	r2, r3, r0, r2
    f06e:	0849      	lsrs	r1, r1, #1
    f070:	3006      	adds	r0, #6
    f072:	9101      	str	r1, [sp, #4]
    f074:	f602 0224 	addw	r2, r2, #2084	; 0x824
    f078:	a901      	add	r1, sp, #4
    f07a:	e9c4 5506 	strd	r5, r5, [r4, #24]
    f07e:	b2c0      	uxtb	r0, r0
    f080:	f001 f8c2 	bl	10208 <am_hal_cmdq_init>
    f084:	4a12      	ldr	r2, [pc, #72]	; (f0d0 <am_hal_mspi_enable+0x94>)
    f086:	4913      	ldr	r1, [pc, #76]	; (f0d4 <am_hal_mspi_enable+0x98>)
    f088:	f8c2 12b4 	str.w	r1, [r2, #692]	; 0x2b4
    f08c:	f44f 7380 	mov.w	r3, #256	; 0x100
    f090:	f8c4 5850 	str.w	r5, [r4, #2128]	; 0x850
    f094:	f884 5838 	strb.w	r5, [r4, #2104]	; 0x838
    f098:	f8c4 5840 	str.w	r5, [r4, #2112]	; 0x840
    f09c:	f8c4 5834 	str.w	r5, [r4, #2100]	; 0x834
    f0a0:	f8c4 583c 	str.w	r5, [r4, #2108]	; 0x83c
    f0a4:	f8c4 582c 	str.w	r5, [r4, #2092]	; 0x82c
    f0a8:	f8a4 3828 	strh.w	r3, [r4, #2088]	; 0x828
    f0ac:	f8c4 5858 	str.w	r5, [r4, #2136]	; 0x858
    f0b0:	78e3      	ldrb	r3, [r4, #3]
    f0b2:	2000      	movs	r0, #0
    f0b4:	f043 0302 	orr.w	r3, r3, #2
    f0b8:	70e3      	strb	r3, [r4, #3]
    f0ba:	b005      	add	sp, #20
    f0bc:	bd30      	pop	{r4, r5, pc}
    f0be:	2002      	movs	r0, #2
    f0c0:	b005      	add	sp, #20
    f0c2:	bd30      	pop	{r4, r5, pc}
    f0c4:	2002      	movs	r0, #2
    f0c6:	4770      	bx	lr
    f0c8:	01bebebe 	.word	0x01bebebe
    f0cc:	10005a44 	.word	0x10005a44
    f0d0:	50014000 	.word	0x50014000
    f0d4:	00400080 	.word	0x00400080

0000f0d8 <am_hal_mspi_control>:
    f0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0dc:	b086      	sub	sp, #24
    f0de:	b1f8      	cbz	r0, f120 <am_hal_mspi_control+0x48>
    f0e0:	6803      	ldr	r3, [r0, #0]
    f0e2:	4616      	mov	r6, r2
    f0e4:	4ab5      	ldr	r2, [pc, #724]	; (f3bc <am_hal_mspi_control+0x2e4>)
    f0e6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f0ea:	4293      	cmp	r3, r2
    f0ec:	4604      	mov	r4, r0
    f0ee:	d117      	bne.n	f120 <am_hal_mspi_control+0x48>
    f0f0:	2912      	cmp	r1, #18
    f0f2:	d81a      	bhi.n	f12a <am_hal_mspi_control+0x52>
    f0f4:	2911      	cmp	r1, #17
    f0f6:	d818      	bhi.n	f12a <am_hal_mspi_control+0x52>
    f0f8:	e8df f011 	tbh	[pc, r1, lsl #1]
    f0fc:	00b700aa 	.word	0x00b700aa
    f100:	00d800c6 	.word	0x00d800c6
    f104:	00ea00e1 	.word	0x00ea00e1
    f108:	010000f7 	.word	0x010000f7
    f10c:	01120109 	.word	0x01120109
    f110:	01590133 	.word	0x01590133
    f114:	01b8016e 	.word	0x01b8016e
    f118:	022b024d 	.word	0x022b024d
    f11c:	001c0238 	.word	0x001c0238
    f120:	2502      	movs	r5, #2
    f122:	4628      	mov	r0, r5
    f124:	b006      	add	sp, #24
    f126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f12a:	2506      	movs	r5, #6
    f12c:	4628      	mov	r0, r5
    f12e:	b006      	add	sp, #24
    f130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f134:	2e00      	cmp	r6, #0
    f136:	d0f8      	beq.n	f12a <am_hal_mspi_control+0x52>
    f138:	f8d0 0824 	ldr.w	r0, [r0, #2084]	; 0x824
    f13c:	2800      	cmp	r0, #0
    f13e:	f000 8246 	beq.w	f5ce <am_hal_mspi_control+0x4f6>
    f142:	69e3      	ldr	r3, [r4, #28]
    f144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f148:	f000 8243 	beq.w	f5d2 <am_hal_mspi_control+0x4fa>
    f14c:	68f1      	ldr	r1, [r6, #12]
    f14e:	ab05      	add	r3, sp, #20
    f150:	3103      	adds	r1, #3
    f152:	aa04      	add	r2, sp, #16
    f154:	f001 f8ea 	bl	1032c <am_hal_cmdq_alloc_block>
    f158:	2800      	cmp	r0, #0
    f15a:	f040 823a 	bne.w	f5d2 <am_hal_mspi_control+0x4fa>
    f15e:	f8d4 2834 	ldr.w	r2, [r4, #2100]	; 0x834
    f162:	9d04      	ldr	r5, [sp, #16]
    f164:	4b96      	ldr	r3, [pc, #600]	; (f3c0 <am_hal_mspi_control+0x2e8>)
    f166:	602b      	str	r3, [r5, #0]
    f168:	2a01      	cmp	r2, #1
    f16a:	6833      	ldr	r3, [r6, #0]
    f16c:	f000 8240 	beq.w	f5f0 <am_hal_mspi_control+0x518>
    f170:	2a02      	cmp	r2, #2
    f172:	f000 8232 	beq.w	f5da <am_hal_mspi_control+0x502>
    f176:	f443 4381 	orr.w	r3, r3, #16512	; 0x4080
    f17a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    f17e:	606b      	str	r3, [r5, #4]
    f180:	f105 0708 	add.w	r7, r5, #8
    f184:	9704      	str	r7, [sp, #16]
    f186:	f1bc 0f00 	cmp.w	ip, #0
    f18a:	d018      	beq.n	f1be <am_hal_mspi_control+0xe6>
    f18c:	68b2      	ldr	r2, [r6, #8]
    f18e:	ea47 0302 	orr.w	r3, r7, r2
    f192:	0759      	lsls	r1, r3, #29
    f194:	f040 8255 	bne.w	f642 <am_hal_mspi_control+0x56a>
    f198:	f10c 33ff 	add.w	r3, ip, #4294967295
    f19c:	2b04      	cmp	r3, #4
    f19e:	f240 8250 	bls.w	f642 <am_hal_mspi_control+0x56a>
    f1a2:	f10c 0301 	add.w	r3, ip, #1
    f1a6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    f1aa:	3a08      	subs	r2, #8
    f1ac:	463b      	mov	r3, r7
    f1ae:	e9f2 0102 	ldrd	r0, r1, [r2, #8]!
    f1b2:	e8e3 0102 	strd	r0, r1, [r3], #8
    f1b6:	429d      	cmp	r5, r3
    f1b8:	d1f9      	bne.n	f1ae <am_hal_mspi_control+0xd6>
    f1ba:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
    f1be:	69b3      	ldr	r3, [r6, #24]
    f1c0:	b103      	cbz	r3, f1c4 <am_hal_mspi_control+0xec>
    f1c2:	601f      	str	r7, [r3, #0]
    f1c4:	4a7e      	ldr	r2, [pc, #504]	; (f3c0 <am_hal_mspi_control+0x2e8>)
    f1c6:	f8d6 8010 	ldr.w	r8, [r6, #16]
    f1ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    f1ce:	e9c7 2300 	strd	r2, r3, [r7]
    f1d2:	f107 0308 	add.w	r3, r7, #8
    f1d6:	9304      	str	r3, [sp, #16]
    f1d8:	4b7a      	ldr	r3, [pc, #488]	; (f3c4 <am_hal_mspi_control+0x2ec>)
    f1da:	60bb      	str	r3, [r7, #8]
    f1dc:	6873      	ldr	r3, [r6, #4]
    f1de:	60fb      	str	r3, [r7, #12]
    f1e0:	f1b8 0f00 	cmp.w	r8, #0
    f1e4:	f000 820c 	beq.w	f600 <am_hal_mspi_control+0x528>
    f1e8:	2501      	movs	r5, #1
    f1ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
    f1ee:	6972      	ldr	r2, [r6, #20]
    f1f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f1f4:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
    f1f8:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    f1fc:	f7ff fa36 	bl	e66c <am_hal_interrupt_master_disable>
    f200:	4629      	mov	r1, r5
    f202:	4607      	mov	r7, r0
    f204:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f208:	f001 f910 	bl	1042c <am_hal_cmdq_post_block>
    f20c:	4605      	mov	r5, r0
    f20e:	2800      	cmp	r0, #0
    f210:	f040 81e6 	bne.w	f5e0 <am_hal_mspi_control+0x508>
    f214:	f8d4 382c 	ldr.w	r3, [r4, #2092]	; 0x82c
    f218:	6932      	ldr	r2, [r6, #16]
    f21a:	69e6      	ldr	r6, [r4, #28]
    f21c:	3301      	adds	r3, #1
    f21e:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
    f222:	1c73      	adds	r3, r6, #1
    f224:	61e3      	str	r3, [r4, #28]
    f226:	2a00      	cmp	r2, #0
    f228:	f000 81fe 	beq.w	f628 <am_hal_mspi_control+0x550>
    f22c:	f884 0829 	strb.w	r0, [r4, #2089]	; 0x829
    f230:	f8c4 0858 	str.w	r0, [r4, #2136]	; 0x858
    f234:	4638      	mov	r0, r7
    f236:	f7ff fa1d 	bl	e674 <am_hal_interrupt_master_set>
    f23a:	2e00      	cmp	r6, #0
    f23c:	f47f af71 	bne.w	f122 <am_hal_mspi_control+0x4a>
    f240:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f244:	f001 f838 	bl	102b8 <am_hal_cmdq_enable>
    f248:	2800      	cmp	r0, #0
    f24a:	bf18      	it	ne
    f24c:	4605      	movne	r5, r0
    f24e:	e768      	b.n	f122 <am_hal_mspi_control+0x4a>
    f250:	2e00      	cmp	r6, #0
    f252:	f43f af6a 	beq.w	f12a <am_hal_mspi_control+0x52>
    f256:	4b5c      	ldr	r3, [pc, #368]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f258:	6831      	ldr	r1, [r6, #0]
    f25a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    f25e:	f361 0200 	bfi	r2, r1, #0, #1
    f262:	2500      	movs	r5, #0
    f264:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    f268:	e75b      	b.n	f122 <am_hal_mspi_control+0x4a>
    f26a:	2e00      	cmp	r6, #0
    f26c:	f43f af5d 	beq.w	f12a <am_hal_mspi_control+0x52>
    f270:	6833      	ldr	r3, [r6, #0]
    f272:	f003 35e0 	and.w	r5, r3, #3772834016	; 0xe0e0e0e0
    f276:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
    f27a:	2d00      	cmp	r5, #0
    f27c:	f47f af55 	bne.w	f12a <am_hal_mspi_control+0x52>
    f280:	4a51      	ldr	r2, [pc, #324]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f282:	f8c2 32b4 	str.w	r3, [r2, #692]	; 0x2b4
    f286:	e74c      	b.n	f122 <am_hal_mspi_control+0x4a>
    f288:	2e00      	cmp	r6, #0
    f28a:	f43f af4e 	beq.w	f12a <am_hal_mspi_control+0x52>
    f28e:	6833      	ldr	r3, [r6, #0]
    f290:	2b05      	cmp	r3, #5
    f292:	d902      	bls.n	f29a <am_hal_mspi_control+0x1c2>
    f294:	2b07      	cmp	r3, #7
    f296:	f47f af48 	bne.w	f12a <am_hal_mspi_control+0x52>
    f29a:	4a4b      	ldr	r2, [pc, #300]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f29c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    f2a0:	f363 1106 	bfi	r1, r3, #4, #3
    f2a4:	2500      	movs	r5, #0
    f2a6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    f2aa:	e73a      	b.n	f122 <am_hal_mspi_control+0x4a>
    f2ac:	4b46      	ldr	r3, [pc, #280]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f2ae:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    f2b2:	f36f 72df 	bfc	r2, #31, #1
    f2b6:	2500      	movs	r5, #0
    f2b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    f2bc:	e731      	b.n	f122 <am_hal_mspi_control+0x4a>
    f2be:	4a42      	ldr	r2, [pc, #264]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f2c0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    f2c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f2c8:	2500      	movs	r5, #0
    f2ca:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    f2ce:	e728      	b.n	f122 <am_hal_mspi_control+0x4a>
    f2d0:	2e00      	cmp	r6, #0
    f2d2:	f43f af2a 	beq.w	f12a <am_hal_mspi_control+0x52>
    f2d6:	4b3c      	ldr	r3, [pc, #240]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f2d8:	6831      	ldr	r1, [r6, #0]
    f2da:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    f2de:	f361 0283 	bfi	r2, r1, #2, #2
    f2e2:	2500      	movs	r5, #0
    f2e4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    f2e8:	e71b      	b.n	f122 <am_hal_mspi_control+0x4a>
    f2ea:	4b37      	ldr	r3, [pc, #220]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f2ec:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    f2f0:	f36f 0200 	bfc	r2, #0, #1
    f2f4:	2500      	movs	r5, #0
    f2f6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    f2fa:	e712      	b.n	f122 <am_hal_mspi_control+0x4a>
    f2fc:	4a32      	ldr	r2, [pc, #200]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f2fe:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    f302:	f043 0301 	orr.w	r3, r3, #1
    f306:	2500      	movs	r5, #0
    f308:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    f30c:	e709      	b.n	f122 <am_hal_mspi_control+0x4a>
    f30e:	2e00      	cmp	r6, #0
    f310:	f43f af0b 	beq.w	f12a <am_hal_mspi_control+0x52>
    f314:	7830      	ldrb	r0, [r6, #0]
    f316:	b006      	add	sp, #24
    f318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f31c:	f7ff bb22 	b.w	e964 <mspi_device_configure.constprop.0>
    f320:	4b29      	ldr	r3, [pc, #164]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f322:	7832      	ldrb	r2, [r6, #0]
    f324:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    f328:	f362 210d 	bfi	r1, r2, #8, #6
    f32c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    f330:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    f334:	2a01      	cmp	r2, #1
    f336:	bf0c      	ite	eq
    f338:	f041 0108 	orreq.w	r1, r1, #8
    f33c:	f36f 01c3 	bfcne	r1, #3, #1
    f340:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    f344:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    f348:	f36f 0182 	bfc	r1, #2, #1
    f34c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    f350:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    f354:	f041 0102 	orr.w	r1, r1, #2
    f358:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    f35c:	7242      	strb	r2, [r0, #9]
    f35e:	2500      	movs	r5, #0
    f360:	e6df      	b.n	f122 <am_hal_mspi_control+0x4a>
    f362:	4d19      	ldr	r5, [pc, #100]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f364:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f368:	f8c5 32b4 	str.w	r3, [r5, #692]	; 0x2b4
    f36c:	f8d5 32a0 	ldr.w	r3, [r5, #672]	; 0x2a0
    f370:	07db      	lsls	r3, r3, #31
    f372:	d513      	bpl.n	f39c <am_hal_mspi_control+0x2c4>
    f374:	4c15      	ldr	r4, [pc, #84]	; (f3cc <am_hal_mspi_control+0x2f4>)
    f376:	f8d5 32ac 	ldr.w	r3, [r5, #684]	; 0x2ac
    f37a:	071f      	lsls	r7, r3, #28
    f37c:	f04f 0010 	mov.w	r0, #16
    f380:	d503      	bpl.n	f38a <am_hal_mspi_control+0x2b2>
    f382:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
    f386:	061e      	lsls	r6, r3, #24
    f388:	d408      	bmi.n	f39c <am_hal_mspi_control+0x2c4>
    f38a:	3c01      	subs	r4, #1
    f38c:	f000 8123 	beq.w	f5d6 <am_hal_mspi_control+0x4fe>
    f390:	f7ff f918 	bl	e5c4 <am_hal_flash_delay>
    f394:	f8d5 32a0 	ldr.w	r3, [r5, #672]	; 0x2a0
    f398:	07d8      	lsls	r0, r3, #31
    f39a:	d4ec      	bmi.n	f376 <am_hal_mspi_control+0x29e>
    f39c:	2201      	movs	r2, #1
    f39e:	490c      	ldr	r1, [pc, #48]	; (f3d0 <am_hal_mspi_control+0x2f8>)
    f3a0:	480c      	ldr	r0, [pc, #48]	; (f3d4 <am_hal_mspi_control+0x2fc>)
    f3a2:	9200      	str	r2, [sp, #0]
    f3a4:	2300      	movs	r3, #0
    f3a6:	f7ff f91d 	bl	e5e4 <am_hal_flash_delay_status_check>
    f3aa:	4605      	mov	r5, r0
    f3ac:	e6b9      	b.n	f122 <am_hal_mspi_control+0x4a>
    f3ae:	4b06      	ldr	r3, [pc, #24]	; (f3c8 <am_hal_mspi_control+0x2f0>)
    f3b0:	2280      	movs	r2, #128	; 0x80
    f3b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    f3b6:	2500      	movs	r5, #0
    f3b8:	e6b3      	b.n	f122 <am_hal_mspi_control+0x4a>
    f3ba:	bf00      	nop
    f3bc:	01bebebe 	.word	0x01bebebe
    f3c0:	500142b8 	.word	0x500142b8
    f3c4:	500142b4 	.word	0x500142b4
    f3c8:	50014000 	.word	0x50014000
    f3cc:	000186a1 	.word	0x000186a1
    f3d0:	50014254 	.word	0x50014254
    f3d4:	000186a0 	.word	0x000186a0
    f3d8:	2e00      	cmp	r6, #0
    f3da:	f43f aea6 	beq.w	f12a <am_hal_mspi_control+0x52>
    f3de:	6943      	ldr	r3, [r0, #20]
    f3e0:	2b00      	cmp	r3, #0
    f3e2:	f000 80f4 	beq.w	f5ce <am_hal_mspi_control+0x4f6>
    f3e6:	7837      	ldrb	r7, [r6, #0]
    f3e8:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
    f3ec:	42bb      	cmp	r3, r7
    f3ee:	d0b6      	beq.n	f35e <am_hal_mspi_control+0x286>
    f3f0:	2b00      	cmp	r3, #0
    f3f2:	f000 80e8 	beq.w	f5c6 <am_hal_mspi_control+0x4ee>
    f3f6:	2b02      	cmp	r3, #2
    f3f8:	d127      	bne.n	f44a <am_hal_mspi_control+0x372>
    f3fa:	4ebb      	ldr	r6, [pc, #748]	; (f6e8 <am_hal_mspi_control+0x610>)
    f3fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    f400:	f8c6 32b4 	str.w	r3, [r6, #692]	; 0x2b4
    f404:	f8d6 32a0 	ldr.w	r3, [r6, #672]	; 0x2a0
    f408:	07d9      	lsls	r1, r3, #31
    f40a:	d513      	bpl.n	f434 <am_hal_mspi_control+0x35c>
    f40c:	4db7      	ldr	r5, [pc, #732]	; (f6ec <am_hal_mspi_control+0x614>)
    f40e:	f8d6 32ac 	ldr.w	r3, [r6, #684]	; 0x2ac
    f412:	071a      	lsls	r2, r3, #28
    f414:	f04f 0010 	mov.w	r0, #16
    f418:	d503      	bpl.n	f422 <am_hal_mspi_control+0x34a>
    f41a:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
    f41e:	061b      	lsls	r3, r3, #24
    f420:	d408      	bmi.n	f434 <am_hal_mspi_control+0x35c>
    f422:	3d01      	subs	r5, #1
    f424:	f000 80d7 	beq.w	f5d6 <am_hal_mspi_control+0x4fe>
    f428:	f7ff f8cc 	bl	e5c4 <am_hal_flash_delay>
    f42c:	f8d6 32a0 	ldr.w	r3, [r6, #672]	; 0x2a0
    f430:	07d8      	lsls	r0, r3, #31
    f432:	d4ec      	bmi.n	f40e <am_hal_mspi_control+0x336>
    f434:	2201      	movs	r2, #1
    f436:	49ae      	ldr	r1, [pc, #696]	; (f6f0 <am_hal_mspi_control+0x618>)
    f438:	48ae      	ldr	r0, [pc, #696]	; (f6f4 <am_hal_mspi_control+0x61c>)
    f43a:	9200      	str	r2, [sp, #0]
    f43c:	2300      	movs	r3, #0
    f43e:	f7ff f8d1 	bl	e5e4 <am_hal_flash_delay_status_check>
    f442:	4605      	mov	r5, r0
    f444:	2800      	cmp	r0, #0
    f446:	f47f ae6c 	bne.w	f122 <am_hal_mspi_control+0x4a>
    f44a:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f44e:	f001 f853 	bl	104f8 <am_hal_cmdq_reset>
    f452:	2500      	movs	r5, #0
    f454:	2301      	movs	r3, #1
    f456:	61a5      	str	r5, [r4, #24]
    f458:	f8c4 582c 	str.w	r5, [r4, #2092]	; 0x82c
    f45c:	61e5      	str	r5, [r4, #28]
    f45e:	f884 7828 	strb.w	r7, [r4, #2088]	; 0x828
    f462:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
    f466:	f8c4 5858 	str.w	r5, [r4, #2136]	; 0x858
    f46a:	e65a      	b.n	f122 <am_hal_mspi_control+0x4a>
    f46c:	2e00      	cmp	r6, #0
    f46e:	f43f ae5c 	beq.w	f12a <am_hal_mspi_control+0x52>
    f472:	6873      	ldr	r3, [r6, #4]
    f474:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    f478:	f47f ae57 	bne.w	f12a <am_hal_mspi_control+0x52>
    f47c:	68b7      	ldr	r7, [r6, #8]
    f47e:	f007 37e0 	and.w	r7, r7, #3772834016	; 0xe0e0e0e0
    f482:	f027 4760 	bic.w	r7, r7, #3758096384	; 0xe0000000
    f486:	2f00      	cmp	r7, #0
    f488:	f47f ae4f 	bne.w	f12a <am_hal_mspi_control+0x52>
    f48c:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
    f490:	2b01      	cmp	r3, #1
    f492:	f040 809c 	bne.w	f5ce <am_hal_mspi_control+0x4f6>
    f496:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
    f49a:	b12b      	cbz	r3, f4a8 <am_hal_mspi_control+0x3d0>
    f49c:	4b92      	ldr	r3, [pc, #584]	; (f6e8 <am_hal_mspi_control+0x610>)
    f49e:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
    f4a2:	2220      	movs	r2, #32
    f4a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    f4a8:	7833      	ldrb	r3, [r6, #0]
    f4aa:	b123      	cbz	r3, f4b6 <am_hal_mspi_control+0x3de>
    f4ac:	f894 3829 	ldrb.w	r3, [r4, #2089]	; 0x829
    f4b0:	2b00      	cmp	r3, #0
    f4b2:	f000 80d5 	beq.w	f660 <am_hal_mspi_control+0x588>
    f4b6:	f04f 0800 	mov.w	r8, #0
    f4ba:	ab05      	add	r3, sp, #20
    f4bc:	aa04      	add	r2, sp, #16
    f4be:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f4c2:	2103      	movs	r1, #3
    f4c4:	f000 ff32 	bl	1032c <am_hal_cmdq_alloc_block>
    f4c8:	4605      	mov	r5, r0
    f4ca:	2800      	cmp	r0, #0
    f4cc:	f47f ae29 	bne.w	f122 <am_hal_mspi_control+0x4a>
    f4d0:	6872      	ldr	r2, [r6, #4]
    f4d2:	9b04      	ldr	r3, [sp, #16]
    f4d4:	4988      	ldr	r1, [pc, #544]	; (f6f8 <am_hal_mspi_control+0x620>)
    f4d6:	4317      	orrs	r7, r2
    f4d8:	f8d4 2834 	ldr.w	r2, [r4, #2100]	; 0x834
    f4dc:	6099      	str	r1, [r3, #8]
    f4de:	6019      	str	r1, [r3, #0]
    f4e0:	2a01      	cmp	r2, #1
    f4e2:	f1a1 0104 	sub.w	r1, r1, #4
    f4e6:	6119      	str	r1, [r3, #16]
    f4e8:	f000 80ef 	beq.w	f6ca <am_hal_mspi_control+0x5f2>
    f4ec:	2a02      	cmp	r2, #2
    f4ee:	f000 80a1 	beq.w	f634 <am_hal_mspi_control+0x55c>
    f4f2:	f447 4781 	orr.w	r7, r7, #16512	; 0x4080
    f4f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f4fa:	60da      	str	r2, [r3, #12]
    f4fc:	68b2      	ldr	r2, [r6, #8]
    f4fe:	605f      	str	r7, [r3, #4]
    f500:	ea42 0208 	orr.w	r2, r2, r8
    f504:	615a      	str	r2, [r3, #20]
    f506:	f7ff f8b1 	bl	e66c <am_hal_interrupt_master_disable>
    f50a:	7831      	ldrb	r1, [r6, #0]
    f50c:	4607      	mov	r7, r0
    f50e:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f512:	2900      	cmp	r1, #0
    f514:	f000 8091 	beq.w	f63a <am_hal_mspi_control+0x562>
    f518:	2100      	movs	r1, #0
    f51a:	f001 f81b 	bl	10554 <am_hal_cmdq_post_loop_block>
    f51e:	4605      	mov	r5, r0
    f520:	2d00      	cmp	r5, #0
    f522:	d15d      	bne.n	f5e0 <am_hal_mspi_control+0x508>
    f524:	7833      	ldrb	r3, [r6, #0]
    f526:	69e6      	ldr	r6, [r4, #28]
    f528:	2b00      	cmp	r3, #0
    f52a:	f106 0301 	add.w	r3, r6, #1
    f52e:	61e3      	str	r3, [r4, #28]
    f530:	bf14      	ite	ne
    f532:	2302      	movne	r3, #2
    f534:	2300      	moveq	r3, #0
    f536:	4638      	mov	r0, r7
    f538:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
    f53c:	f7ff f89a 	bl	e674 <am_hal_interrupt_master_set>
    f540:	2e00      	cmp	r6, #0
    f542:	f47f adee 	bne.w	f122 <am_hal_mspi_control+0x4a>
    f546:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f54a:	f000 feb5 	bl	102b8 <am_hal_cmdq_enable>
    f54e:	4605      	mov	r5, r0
    f550:	e5e7      	b.n	f122 <am_hal_mspi_control+0x4a>
    f552:	4965      	ldr	r1, [pc, #404]	; (f6e8 <am_hal_mspi_control+0x610>)
    f554:	2300      	movs	r3, #0
    f556:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    f55a:	2201      	movs	r2, #1
    f55c:	f8c1 02b4 	str.w	r0, [r1, #692]	; 0x2b4
    f560:	461d      	mov	r5, r3
    f562:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
    f566:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    f56a:	e5da      	b.n	f122 <am_hal_mspi_control+0x4a>
    f56c:	4b5e      	ldr	r3, [pc, #376]	; (f6e8 <am_hal_mspi_control+0x610>)
    f56e:	2220      	movs	r2, #32
    f570:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    f574:	f8d0 1840 	ldr.w	r1, [r0, #2112]	; 0x840
    f578:	2300      	movs	r3, #0
    f57a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    f57e:	2900      	cmp	r1, #0
    f580:	f43f aeed 	beq.w	f35e <am_hal_mspi_control+0x286>
    f584:	f7ff fb1a 	bl	ebbc <sched_hiprio>
    f588:	4605      	mov	r5, r0
    f58a:	2800      	cmp	r0, #0
    f58c:	f47f adc9 	bne.w	f122 <am_hal_mspi_control+0x4a>
    f590:	f8c4 0840 	str.w	r0, [r4, #2112]	; 0x840
    f594:	e5c5      	b.n	f122 <am_hal_mspi_control+0x4a>
    f596:	2e00      	cmp	r6, #0
    f598:	f43f adc7 	beq.w	f12a <am_hal_mspi_control+0x52>
    f59c:	f8d0 5850 	ldr.w	r5, [r0, #2128]	; 0x850
    f5a0:	b9ad      	cbnz	r5, f5ce <am_hal_mspi_control+0x4f6>
    f5a2:	6873      	ldr	r3, [r6, #4]
    f5a4:	4955      	ldr	r1, [pc, #340]	; (f6fc <am_hal_mspi_control+0x624>)
    f5a6:	6832      	ldr	r2, [r6, #0]
    f5a8:	f8c0 2850 	str.w	r2, [r0, #2128]	; 0x850
    f5ac:	fba1 1303 	umull	r1, r3, r1, r3
    f5b0:	091b      	lsrs	r3, r3, #4
    f5b2:	2101      	movs	r1, #1
    f5b4:	f8c0 584c 	str.w	r5, [r0, #2124]	; 0x84c
    f5b8:	f8c0 583c 	str.w	r5, [r0, #2108]	; 0x83c
    f5bc:	f8c0 1848 	str.w	r1, [r0, #2120]	; 0x848
    f5c0:	f8c0 3844 	str.w	r3, [r0, #2116]	; 0x844
    f5c4:	e5ad      	b.n	f122 <am_hal_mspi_control+0x4a>
    f5c6:	69c3      	ldr	r3, [r0, #28]
    f5c8:	2b00      	cmp	r3, #0
    f5ca:	f43f af3e 	beq.w	f44a <am_hal_mspi_control+0x372>
    f5ce:	2507      	movs	r5, #7
    f5d0:	e5a7      	b.n	f122 <am_hal_mspi_control+0x4a>
    f5d2:	2505      	movs	r5, #5
    f5d4:	e5a5      	b.n	f122 <am_hal_mspi_control+0x4a>
    f5d6:	2504      	movs	r5, #4
    f5d8:	e5a3      	b.n	f122 <am_hal_mspi_control+0x4a>
    f5da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    f5de:	e5cc      	b.n	f17a <am_hal_mspi_control+0xa2>
    f5e0:	4638      	mov	r0, r7
    f5e2:	f7ff f847 	bl	e674 <am_hal_interrupt_master_set>
    f5e6:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f5ea:	f000 ff07 	bl	103fc <am_hal_cmdq_release_block>
    f5ee:	e598      	b.n	f122 <am_hal_mspi_control+0x4a>
    f5f0:	f443 4381 	orr.w	r3, r3, #16512	; 0x4080
    f5f4:	2202      	movs	r2, #2
    f5f6:	f043 0320 	orr.w	r3, r3, #32
    f5fa:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
    f5fe:	e5bc      	b.n	f17a <am_hal_mspi_control+0xa2>
    f600:	f8d4 3834 	ldr.w	r3, [r4, #2100]	; 0x834
    f604:	b973      	cbnz	r3, f624 <am_hal_mspi_control+0x54c>
    f606:	f894 3828 	ldrb.w	r3, [r4, #2088]	; 0x828
    f60a:	b95b      	cbnz	r3, f624 <am_hal_mspi_control+0x54c>
    f60c:	f8d4 3854 	ldr.w	r3, [r4, #2132]	; 0x854
    f610:	f8d4 2858 	ldr.w	r2, [r4, #2136]	; 0x858
    f614:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
    f618:	4b39      	ldr	r3, [pc, #228]	; (f700 <am_hal_mspi_control+0x628>)
    f61a:	bf32      	itee	cc
    f61c:	2500      	movcc	r5, #0
    f61e:	2501      	movcs	r5, #1
    f620:	4698      	movcs	r8, r3
    f622:	e5e2      	b.n	f1ea <am_hal_mspi_control+0x112>
    f624:	4645      	mov	r5, r8
    f626:	e5e0      	b.n	f1ea <am_hal_mspi_control+0x112>
    f628:	f1b8 0f00 	cmp.w	r8, #0
    f62c:	d055      	beq.n	f6da <am_hal_mspi_control+0x602>
    f62e:	f8c4 0858 	str.w	r0, [r4, #2136]	; 0x858
    f632:	e5ff      	b.n	f234 <am_hal_mspi_control+0x15c>
    f634:	f44f 4780 	mov.w	r7, #16384	; 0x4000
    f638:	e75d      	b.n	f4f6 <am_hal_mspi_control+0x41e>
    f63a:	f000 fef7 	bl	1042c <am_hal_cmdq_post_block>
    f63e:	4605      	mov	r5, r0
    f640:	e76e      	b.n	f520 <am_hal_mspi_control+0x448>
    f642:	350c      	adds	r5, #12
    f644:	f102 0e04 	add.w	lr, r2, #4
    f648:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
    f64c:	f85e 3030 	ldr.w	r3, [lr, r0, lsl #3]
    f650:	f847 1030 	str.w	r1, [r7, r0, lsl #3]
    f654:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
    f658:	3001      	adds	r0, #1
    f65a:	4560      	cmp	r0, ip
    f65c:	d1f4      	bne.n	f648 <am_hal_mspi_control+0x570>
    f65e:	e5ac      	b.n	f1ba <am_hal_mspi_control+0xe2>
    f660:	ab05      	add	r3, sp, #20
    f662:	aa04      	add	r2, sp, #16
    f664:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f668:	9303      	str	r3, [sp, #12]
    f66a:	2101      	movs	r1, #1
    f66c:	9202      	str	r2, [sp, #8]
    f66e:	f000 fe5d 	bl	1032c <am_hal_cmdq_alloc_block>
    f672:	4605      	mov	r5, r0
    f674:	2800      	cmp	r0, #0
    f676:	f47f ad54 	bne.w	f122 <am_hal_mspi_control+0x4a>
    f67a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    f67e:	9804      	ldr	r0, [sp, #16]
    f680:	4f20      	ldr	r7, [pc, #128]	; (f704 <am_hal_mspi_control+0x62c>)
    f682:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    f686:	624f      	str	r7, [r1, #36]	; 0x24
    f688:	f8c1 4424 	str.w	r4, [r1, #1060]	; 0x424
    f68c:	491e      	ldr	r1, [pc, #120]	; (f708 <am_hal_mspi_control+0x630>)
    f68e:	6045      	str	r5, [r0, #4]
    f690:	6001      	str	r1, [r0, #0]
    f692:	f7fe ffeb 	bl	e66c <am_hal_interrupt_master_disable>
    f696:	2101      	movs	r1, #1
    f698:	4607      	mov	r7, r0
    f69a:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f69e:	f000 fec5 	bl	1042c <am_hal_cmdq_post_block>
    f6a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f6a6:	4605      	mov	r5, r0
    f6a8:	2800      	cmp	r0, #0
    f6aa:	d199      	bne.n	f5e0 <am_hal_mspi_control+0x508>
    f6ac:	69e5      	ldr	r5, [r4, #28]
    f6ae:	1c69      	adds	r1, r5, #1
    f6b0:	4638      	mov	r0, r7
    f6b2:	61e1      	str	r1, [r4, #28]
    f6b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f6b8:	f7fe ffdc 	bl	e674 <am_hal_interrupt_master_set>
    f6bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f6c0:	b325      	cbz	r5, f70c <am_hal_mspi_control+0x634>
    f6c2:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
    f6c6:	2740      	movs	r7, #64	; 0x40
    f6c8:	e6f9      	b.n	f4be <am_hal_mspi_control+0x3e6>
    f6ca:	f447 4781 	orr.w	r7, r7, #16512	; 0x4080
    f6ce:	2202      	movs	r2, #2
    f6d0:	f047 0720 	orr.w	r7, r7, #32
    f6d4:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
    f6d8:	e70d      	b.n	f4f6 <am_hal_mspi_control+0x41e>
    f6da:	f8d4 3858 	ldr.w	r3, [r4, #2136]	; 0x858
    f6de:	3301      	adds	r3, #1
    f6e0:	f8c4 3858 	str.w	r3, [r4, #2136]	; 0x858
    f6e4:	e5a6      	b.n	f234 <am_hal_mspi_control+0x15c>
    f6e6:	bf00      	nop
    f6e8:	50014000 	.word	0x50014000
    f6ec:	000186a1 	.word	0x000186a1
    f6f0:	50014254 	.word	0x50014254
    f6f4:	000186a0 	.word	0x000186a0
    f6f8:	500142b8 	.word	0x500142b8
    f6fc:	aaaaaaab 	.word	0xaaaaaaab
    f700:	0000e939 	.word	0x0000e939
    f704:	0000e93d 	.word	0x0000e93d
    f708:	500142b4 	.word	0x500142b4
    f70c:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f710:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f714:	f000 fdd0 	bl	102b8 <am_hal_cmdq_enable>
    f718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f71c:	4605      	mov	r5, r0
    f71e:	2800      	cmp	r0, #0
    f720:	d0cf      	beq.n	f6c2 <am_hal_mspi_control+0x5ea>
    f722:	e4fe      	b.n	f122 <am_hal_mspi_control+0x4a>

0000f724 <am_hal_mspi_blocking_transfer>:
    f724:	2800      	cmp	r0, #0
    f726:	f000 8091 	beq.w	f84c <am_hal_mspi_blocking_transfer+0x128>
    f72a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f72e:	6803      	ldr	r3, [r0, #0]
    f730:	4614      	mov	r4, r2
    f732:	4a63      	ldr	r2, [pc, #396]	; (f8c0 <am_hal_mspi_blocking_transfer+0x19c>)
    f734:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f738:	4293      	cmp	r3, r2
    f73a:	b087      	sub	sp, #28
    f73c:	d15c      	bne.n	f7f8 <am_hal_mspi_blocking_transfer+0xd4>
    f73e:	78c3      	ldrb	r3, [r0, #3]
    f740:	079b      	lsls	r3, r3, #30
    f742:	d555      	bpl.n	f7f0 <am_hal_mspi_blocking_transfer+0xcc>
    f744:	69c3      	ldr	r3, [r0, #28]
    f746:	2b00      	cmp	r3, #0
    f748:	d152      	bne.n	f7f0 <am_hal_mspi_blocking_transfer+0xcc>
    f74a:	f8d0 383c 	ldr.w	r3, [r0, #2108]	; 0x83c
    f74e:	2b00      	cmp	r3, #0
    f750:	d14e      	bne.n	f7f0 <am_hal_mspi_blocking_transfer+0xcc>
    f752:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
    f756:	2b02      	cmp	r3, #2
    f758:	d04a      	beq.n	f7f0 <am_hal_mspi_blocking_transfer+0xcc>
    f75a:	f8d1 8000 	ldr.w	r8, [r1]
    f75e:	790b      	ldrb	r3, [r1, #4]
    f760:	794f      	ldrb	r7, [r1, #5]
    f762:	7b0e      	ldrb	r6, [r1, #12]
    f764:	6845      	ldr	r5, [r0, #4]
    f766:	ea4f 4208 	mov.w	r2, r8, lsl #16
    f76a:	ea42 22c3 	orr.w	r2, r2, r3, lsl #11
    f76e:	02bb      	lsls	r3, r7, #10
    f770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    f774:	4313      	orrs	r3, r2
    f776:	b126      	cbz	r6, f782 <am_hal_mspi_blocking_transfer+0x5e>
    f778:	4a52      	ldr	r2, [pc, #328]	; (f8c4 <am_hal_mspi_blocking_transfer+0x1a0>)
    f77a:	89ce      	ldrh	r6, [r1, #14]
    f77c:	60d6      	str	r6, [r2, #12]
    f77e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f782:	798e      	ldrb	r6, [r1, #6]
    f784:	b126      	cbz	r6, f790 <am_hal_mspi_blocking_transfer+0x6c>
    f786:	4e4f      	ldr	r6, [pc, #316]	; (f8c4 <am_hal_mspi_blocking_transfer+0x1a0>)
    f788:	688a      	ldr	r2, [r1, #8]
    f78a:	60b2      	str	r2, [r6, #8]
    f78c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f790:	7c0e      	ldrb	r6, [r1, #16]
    f792:	b10e      	cbz	r6, f798 <am_hal_mspi_blocking_transfer+0x74>
    f794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f798:	7a86      	ldrb	r6, [r0, #10]
    f79a:	7c4a      	ldrb	r2, [r1, #17]
    f79c:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    f7a0:	b10a      	cbz	r2, f7a6 <am_hal_mspi_blocking_transfer+0x82>
    f7a2:	f043 0308 	orr.w	r3, r3, #8
    f7a6:	4e47      	ldr	r6, [pc, #284]	; (f8c4 <am_hal_mspi_blocking_transfer+0x1a0>)
    f7a8:	f043 0301 	orr.w	r3, r3, #1
    f7ac:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
    f7b0:	9202      	str	r2, [sp, #8]
    f7b2:	f04f 0c00 	mov.w	ip, #0
    f7b6:	f04f 3eff 	mov.w	lr, #4294967295
    f7ba:	f8c6 c200 	str.w	ip, [r6, #512]	; 0x200
    f7be:	f8c6 e208 	str.w	lr, [r6, #520]	; 0x208
    f7c2:	6033      	str	r3, [r6, #0]
    f7c4:	b1e7      	cbz	r7, f800 <am_hal_mspi_blocking_transfer+0xdc>
    f7c6:	2f01      	cmp	r7, #1
    f7c8:	d042      	beq.n	f850 <am_hal_mspi_blocking_transfer+0x12c>
    f7ca:	4d3e      	ldr	r5, [pc, #248]	; (f8c4 <am_hal_mspi_blocking_transfer+0x1a0>)
    f7cc:	2302      	movs	r3, #2
    f7ce:	2201      	movs	r2, #1
    f7d0:	9200      	str	r2, [sp, #0]
    f7d2:	4620      	mov	r0, r4
    f7d4:	461a      	mov	r2, r3
    f7d6:	4629      	mov	r1, r5
    f7d8:	f7fe ff04 	bl	e5e4 <am_hal_flash_delay_status_check>
    f7dc:	f04f 33ff 	mov.w	r3, #4294967295
    f7e0:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
    f7e4:	9b02      	ldr	r3, [sp, #8]
    f7e6:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
    f7ea:	b007      	add	sp, #28
    f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7f0:	2007      	movs	r0, #7
    f7f2:	b007      	add	sp, #28
    f7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7f8:	2002      	movs	r0, #2
    f7fa:	b007      	add	sp, #28
    f7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f800:	2d00      	cmp	r5, #0
    f802:	d15b      	bne.n	f8bc <am_hal_mspi_blocking_transfer+0x198>
    f804:	694b      	ldr	r3, [r1, #20]
    f806:	f8d0 900c 	ldr.w	r9, [r0, #12]
    f80a:	9303      	str	r3, [sp, #12]
    f80c:	ea5f 0b98 	movs.w	fp, r8, lsr #2
    f810:	d03d      	beq.n	f88e <am_hal_mspi_blocking_transfer+0x16a>
    f812:	492d      	ldr	r1, [pc, #180]	; (f8c8 <am_hal_mspi_blocking_transfer+0x1a4>)
    f814:	1f1f      	subs	r7, r3, #4
    f816:	46aa      	mov	sl, r5
    f818:	e005      	b.n	f826 <am_hal_mspi_blocking_transfer+0x102>
    f81a:	6973      	ldr	r3, [r6, #20]
    f81c:	f847 3f04 	str.w	r3, [r7, #4]!
    f820:	45ab      	cmp	fp, r5
    f822:	4929      	ldr	r1, [pc, #164]	; (f8c8 <am_hal_mspi_blocking_transfer+0x1a4>)
    f824:	d033      	beq.n	f88e <am_hal_mspi_blocking_transfer+0x16a>
    f826:	f8cd a000 	str.w	sl, [sp]
    f82a:	2300      	movs	r3, #0
    f82c:	221f      	movs	r2, #31
    f82e:	4648      	mov	r0, r9
    f830:	3501      	adds	r5, #1
    f832:	f7fe fed7 	bl	e5e4 <am_hal_flash_delay_status_check>
    f836:	2800      	cmp	r0, #0
    f838:	d0ef      	beq.n	f81a <am_hal_mspi_blocking_transfer+0xf6>
    f83a:	4b22      	ldr	r3, [pc, #136]	; (f8c4 <am_hal_mspi_blocking_transfer+0x1a0>)
    f83c:	f04f 32ff 	mov.w	r2, #4294967295
    f840:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    f844:	9a02      	ldr	r2, [sp, #8]
    f846:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f84a:	e7d2      	b.n	f7f2 <am_hal_mspi_blocking_transfer+0xce>
    f84c:	2002      	movs	r0, #2
    f84e:	4770      	bx	lr
    f850:	2d00      	cmp	r5, #0
    f852:	d133      	bne.n	f8bc <am_hal_mspi_blocking_transfer+0x198>
    f854:	f1b8 0f00 	cmp.w	r8, #0
    f858:	d0b7      	beq.n	f7ca <am_hal_mspi_blocking_transfer+0xa6>
    f85a:	694f      	ldr	r7, [r1, #20]
    f85c:	f8d0 900c 	ldr.w	r9, [r0, #12]
    f860:	491a      	ldr	r1, [pc, #104]	; (f8cc <am_hal_mspi_blocking_transfer+0x1a8>)
    f862:	46ab      	mov	fp, r5
    f864:	f1a7 0a04 	sub.w	sl, r7, #4
    f868:	4655      	mov	r5, sl
    f86a:	3508      	adds	r5, #8
    f86c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    f870:	6133      	str	r3, [r6, #16]
    f872:	221f      	movs	r2, #31
    f874:	f8cd b000 	str.w	fp, [sp]
    f878:	2310      	movs	r3, #16
    f87a:	4648      	mov	r0, r9
    f87c:	1bed      	subs	r5, r5, r7
    f87e:	f7fe feb1 	bl	e5e4 <am_hal_flash_delay_status_check>
    f882:	45a8      	cmp	r8, r5
    f884:	4911      	ldr	r1, [pc, #68]	; (f8cc <am_hal_mspi_blocking_transfer+0x1a8>)
    f886:	d8ef      	bhi.n	f868 <am_hal_mspi_blocking_transfer+0x144>
    f888:	2800      	cmp	r0, #0
    f88a:	d09e      	beq.n	f7ca <am_hal_mspi_blocking_transfer+0xa6>
    f88c:	e7d5      	b.n	f83a <am_hal_mspi_blocking_transfer+0x116>
    f88e:	f018 0803 	ands.w	r8, r8, #3
    f892:	d09a      	beq.n	f7ca <am_hal_mspi_blocking_transfer+0xa6>
    f894:	2300      	movs	r3, #0
    f896:	490c      	ldr	r1, [pc, #48]	; (f8c8 <am_hal_mspi_blocking_transfer+0x1a4>)
    f898:	9300      	str	r3, [sp, #0]
    f89a:	4648      	mov	r0, r9
    f89c:	221f      	movs	r2, #31
    f89e:	f7fe fea1 	bl	e5e4 <am_hal_flash_delay_status_check>
    f8a2:	2800      	cmp	r0, #0
    f8a4:	d1c9      	bne.n	f83a <am_hal_mspi_blocking_transfer+0x116>
    f8a6:	9b03      	ldr	r3, [sp, #12]
    f8a8:	eb03 008b 	add.w	r0, r3, fp, lsl #2
    f8ac:	4b05      	ldr	r3, [pc, #20]	; (f8c4 <am_hal_mspi_blocking_transfer+0x1a0>)
    f8ae:	4642      	mov	r2, r8
    f8b0:	695b      	ldr	r3, [r3, #20]
    f8b2:	9305      	str	r3, [sp, #20]
    f8b4:	a905      	add	r1, sp, #20
    f8b6:	f7fc fc73 	bl	c1a0 <memcpy>
    f8ba:	e786      	b.n	f7ca <am_hal_mspi_blocking_transfer+0xa6>
    f8bc:	2005      	movs	r0, #5
    f8be:	e7bc      	b.n	f83a <am_hal_mspi_blocking_transfer+0x116>
    f8c0:	01bebebe 	.word	0x01bebebe
    f8c4:	50014000 	.word	0x50014000
    f8c8:	5001401c 	.word	0x5001401c
    f8cc:	50014018 	.word	0x50014018

0000f8d0 <am_hal_mspi_nonblocking_transfer>:
    f8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f8d4:	b082      	sub	sp, #8
    f8d6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    f8da:	2800      	cmp	r0, #0
    f8dc:	d030      	beq.n	f940 <am_hal_mspi_nonblocking_transfer+0x70>
    f8de:	4616      	mov	r6, r2
    f8e0:	6802      	ldr	r2, [r0, #0]
    f8e2:	461f      	mov	r7, r3
    f8e4:	4b4b      	ldr	r3, [pc, #300]	; (fa14 <am_hal_mspi_nonblocking_transfer+0x144>)
    f8e6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f8ea:	429a      	cmp	r2, r3
    f8ec:	4604      	mov	r4, r0
    f8ee:	d127      	bne.n	f940 <am_hal_mspi_nonblocking_transfer+0x70>
    f8f0:	6943      	ldr	r3, [r0, #20]
    f8f2:	b303      	cbz	r3, f936 <am_hal_mspi_nonblocking_transfer+0x66>
    f8f4:	78c3      	ldrb	r3, [r0, #3]
    f8f6:	079b      	lsls	r3, r3, #30
    f8f8:	d51d      	bpl.n	f936 <am_hal_mspi_nonblocking_transfer+0x66>
    f8fa:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
    f8fe:	2b02      	cmp	r3, #2
    f900:	d019      	beq.n	f936 <am_hal_mspi_nonblocking_transfer+0x66>
    f902:	4688      	mov	r8, r1
    f904:	2f00      	cmp	r7, #0
    f906:	d05a      	beq.n	f9be <am_hal_mspi_nonblocking_transfer+0xee>
    f908:	46ba      	mov	sl, r7
    f90a:	2e00      	cmp	r6, #0
    f90c:	d06a      	beq.n	f9e4 <am_hal_mspi_nonblocking_transfer+0x114>
    f90e:	2e01      	cmp	r6, #1
    f910:	bf0c      	ite	eq
    f912:	2108      	moveq	r1, #8
    f914:	2100      	movne	r1, #0
    f916:	69e3      	ldr	r3, [r4, #28]
    f918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f91c:	d06c      	beq.n	f9f8 <am_hal_mspi_nonblocking_transfer+0x128>
    f91e:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f922:	ab01      	add	r3, sp, #4
    f924:	466a      	mov	r2, sp
    f926:	f000 fd01 	bl	1032c <am_hal_cmdq_alloc_block>
    f92a:	4605      	mov	r5, r0
    f92c:	b168      	cbz	r0, f94a <am_hal_mspi_nonblocking_transfer+0x7a>
    f92e:	4628      	mov	r0, r5
    f930:	b002      	add	sp, #8
    f932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f936:	2507      	movs	r5, #7
    f938:	4628      	mov	r0, r5
    f93a:	b002      	add	sp, #8
    f93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f940:	2502      	movs	r5, #2
    f942:	4628      	mov	r0, r5
    f944:	b002      	add	sp, #8
    f946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f94a:	9a00      	ldr	r2, [sp, #0]
    f94c:	4643      	mov	r3, r8
    f94e:	4631      	mov	r1, r6
    f950:	4620      	mov	r0, r4
    f952:	f7ff f9a3 	bl	ec9c <build_dma_cmdlist>
    f956:	4605      	mov	r5, r0
    f958:	2800      	cmp	r0, #0
    f95a:	d148      	bne.n	f9ee <am_hal_mspi_nonblocking_transfer+0x11e>
    f95c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f960:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f964:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
    f968:	f8c3 9424 	str.w	r9, [r3, #1060]	; 0x424
    f96c:	f7fe fe7e 	bl	e66c <am_hal_interrupt_master_disable>
    f970:	f1ba 0100 	subs.w	r1, sl, #0
    f974:	bf18      	it	ne
    f976:	2101      	movne	r1, #1
    f978:	4606      	mov	r6, r0
    f97a:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f97e:	f000 fd55 	bl	1042c <am_hal_cmdq_post_block>
    f982:	4605      	mov	r5, r0
    f984:	bb80      	cbnz	r0, f9e8 <am_hal_mspi_nonblocking_transfer+0x118>
    f986:	f8d4 382c 	ldr.w	r3, [r4, #2092]	; 0x82c
    f98a:	f8d4 801c 	ldr.w	r8, [r4, #28]
    f98e:	3301      	adds	r3, #1
    f990:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
    f994:	f108 0301 	add.w	r3, r8, #1
    f998:	61e3      	str	r3, [r4, #28]
    f99a:	b37f      	cbz	r7, f9fc <am_hal_mspi_nonblocking_transfer+0x12c>
    f99c:	f884 0829 	strb.w	r0, [r4, #2089]	; 0x829
    f9a0:	f8c4 0858 	str.w	r0, [r4, #2136]	; 0x858
    f9a4:	4630      	mov	r0, r6
    f9a6:	f7fe fe65 	bl	e674 <am_hal_interrupt_master_set>
    f9aa:	f1b8 0f00 	cmp.w	r8, #0
    f9ae:	d1be      	bne.n	f92e <am_hal_mspi_nonblocking_transfer+0x5e>
    f9b0:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f9b4:	b002      	add	sp, #8
    f9b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9ba:	f000 bc7d 	b.w	102b8 <am_hal_cmdq_enable>
    f9be:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
    f9c2:	2a00      	cmp	r2, #0
    f9c4:	d1a0      	bne.n	f908 <am_hal_mspi_nonblocking_transfer+0x38>
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d19e      	bne.n	f908 <am_hal_mspi_nonblocking_transfer+0x38>
    f9ca:	f8d0 3858 	ldr.w	r3, [r0, #2136]	; 0x858
    f9ce:	f8d0 2854 	ldr.w	r2, [r0, #2132]	; 0x854
    f9d2:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
    f9d6:	4b10      	ldr	r3, [pc, #64]	; (fa18 <am_hal_mspi_nonblocking_transfer+0x148>)
    f9d8:	bf34      	ite	cc
    f9da:	f04f 0a00 	movcc.w	sl, #0
    f9de:	469a      	movcs	sl, r3
    f9e0:	2e00      	cmp	r6, #0
    f9e2:	d194      	bne.n	f90e <am_hal_mspi_nonblocking_transfer+0x3e>
    f9e4:	2103      	movs	r1, #3
    f9e6:	e796      	b.n	f916 <am_hal_mspi_nonblocking_transfer+0x46>
    f9e8:	4630      	mov	r0, r6
    f9ea:	f7fe fe43 	bl	e674 <am_hal_interrupt_master_set>
    f9ee:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
    f9f2:	f000 fd03 	bl	103fc <am_hal_cmdq_release_block>
    f9f6:	e79a      	b.n	f92e <am_hal_mspi_nonblocking_transfer+0x5e>
    f9f8:	2505      	movs	r5, #5
    f9fa:	e798      	b.n	f92e <am_hal_mspi_nonblocking_transfer+0x5e>
    f9fc:	f1ba 0f00 	cmp.w	sl, #0
    fa00:	d002      	beq.n	fa08 <am_hal_mspi_nonblocking_transfer+0x138>
    fa02:	f8c4 0858 	str.w	r0, [r4, #2136]	; 0x858
    fa06:	e7cd      	b.n	f9a4 <am_hal_mspi_nonblocking_transfer+0xd4>
    fa08:	f8d4 3858 	ldr.w	r3, [r4, #2136]	; 0x858
    fa0c:	3301      	adds	r3, #1
    fa0e:	f8c4 3858 	str.w	r3, [r4, #2136]	; 0x858
    fa12:	e7c7      	b.n	f9a4 <am_hal_mspi_nonblocking_transfer+0xd4>
    fa14:	01bebebe 	.word	0x01bebebe
    fa18:	0000e939 	.word	0x0000e939

0000fa1c <am_hal_mspi_interrupt_enable>:
    fa1c:	b168      	cbz	r0, fa3a <am_hal_mspi_interrupt_enable+0x1e>
    fa1e:	6803      	ldr	r3, [r0, #0]
    fa20:	4a07      	ldr	r2, [pc, #28]	; (fa40 <am_hal_mspi_interrupt_enable+0x24>)
    fa22:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fa26:	4293      	cmp	r3, r2
    fa28:	d107      	bne.n	fa3a <am_hal_mspi_interrupt_enable+0x1e>
    fa2a:	4a06      	ldr	r2, [pc, #24]	; (fa44 <am_hal_mspi_interrupt_enable+0x28>)
    fa2c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    fa30:	4319      	orrs	r1, r3
    fa32:	2000      	movs	r0, #0
    fa34:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    fa38:	4770      	bx	lr
    fa3a:	2002      	movs	r0, #2
    fa3c:	4770      	bx	lr
    fa3e:	bf00      	nop
    fa40:	01bebebe 	.word	0x01bebebe
    fa44:	50014000 	.word	0x50014000

0000fa48 <am_hal_mspi_interrupt_disable>:
    fa48:	b170      	cbz	r0, fa68 <am_hal_mspi_interrupt_disable+0x20>
    fa4a:	6803      	ldr	r3, [r0, #0]
    fa4c:	4a07      	ldr	r2, [pc, #28]	; (fa6c <am_hal_mspi_interrupt_disable+0x24>)
    fa4e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fa52:	4293      	cmp	r3, r2
    fa54:	d108      	bne.n	fa68 <am_hal_mspi_interrupt_disable+0x20>
    fa56:	4a06      	ldr	r2, [pc, #24]	; (fa70 <am_hal_mspi_interrupt_disable+0x28>)
    fa58:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    fa5c:	ea23 0101 	bic.w	r1, r3, r1
    fa60:	2000      	movs	r0, #0
    fa62:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    fa66:	4770      	bx	lr
    fa68:	2002      	movs	r0, #2
    fa6a:	4770      	bx	lr
    fa6c:	01bebebe 	.word	0x01bebebe
    fa70:	50014000 	.word	0x50014000

0000fa74 <am_hal_mspi_interrupt_clear>:
    fa74:	b150      	cbz	r0, fa8c <am_hal_mspi_interrupt_clear+0x18>
    fa76:	6803      	ldr	r3, [r0, #0]
    fa78:	4a05      	ldr	r2, [pc, #20]	; (fa90 <am_hal_mspi_interrupt_clear+0x1c>)
    fa7a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fa7e:	4293      	cmp	r3, r2
    fa80:	d104      	bne.n	fa8c <am_hal_mspi_interrupt_clear+0x18>
    fa82:	4b04      	ldr	r3, [pc, #16]	; (fa94 <am_hal_mspi_interrupt_clear+0x20>)
    fa84:	2000      	movs	r0, #0
    fa86:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    fa8a:	4770      	bx	lr
    fa8c:	2002      	movs	r0, #2
    fa8e:	4770      	bx	lr
    fa90:	01bebebe 	.word	0x01bebebe
    fa94:	50014000 	.word	0x50014000

0000fa98 <am_hal_mspi_power_control>:
    fa98:	2800      	cmp	r0, #0
    fa9a:	f000 80bd 	beq.w	fc18 <am_hal_mspi_power_control+0x180>
    fa9e:	b510      	push	{r4, lr}
    faa0:	6803      	ldr	r3, [r0, #0]
    faa2:	4604      	mov	r4, r0
    faa4:	4863      	ldr	r0, [pc, #396]	; (fc34 <am_hal_mspi_power_control+0x19c>)
    faa6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    faaa:	4283      	cmp	r3, r0
    faac:	b082      	sub	sp, #8
    faae:	d162      	bne.n	fb76 <am_hal_mspi_power_control+0xde>
    fab0:	2900      	cmp	r1, #0
    fab2:	d066      	beq.n	fb82 <am_hal_mspi_power_control+0xea>
    fab4:	3901      	subs	r1, #1
    fab6:	2901      	cmp	r1, #1
    fab8:	d860      	bhi.n	fb7c <am_hal_mspi_power_control+0xe4>
    faba:	78e3      	ldrb	r3, [r4, #3]
    fabc:	0799      	lsls	r1, r3, #30
    fabe:	d50a      	bpl.n	fad6 <am_hal_mspi_power_control+0x3e>
    fac0:	4b5d      	ldr	r3, [pc, #372]	; (fc38 <am_hal_mspi_power_control+0x1a0>)
    fac2:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
    fac6:	07db      	lsls	r3, r3, #31
    fac8:	f100 80af 	bmi.w	fc2a <am_hal_mspi_power_control+0x192>
    facc:	f8d4 3840 	ldr.w	r3, [r4, #2112]	; 0x840
    fad0:	2b00      	cmp	r3, #0
    fad2:	f040 80aa 	bne.w	fc2a <am_hal_mspi_power_control+0x192>
    fad6:	2a00      	cmp	r2, #0
    fad8:	d03e      	beq.n	fb58 <am_hal_mspi_power_control+0xc0>
    fada:	4b57      	ldr	r3, [pc, #348]	; (fc38 <am_hal_mspi_power_control+0x1a0>)
    fadc:	6859      	ldr	r1, [r3, #4]
    fade:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    fae2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    fae6:	f8c4 1868 	str.w	r1, [r4, #2152]	; 0x868
    faea:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    faee:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    faf2:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
    faf6:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    fafa:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    fafe:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    fb02:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    fb06:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    fb0a:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    fb0e:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    fb12:	f8d3 12b8 	ldr.w	r1, [r3, #696]	; 0x2b8
    fb16:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    fb1a:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    fb1e:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    fb22:	f8d3 12c0 	ldr.w	r1, [r3, #704]	; 0x2c0
    fb26:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    fb2a:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
    fb2e:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    fb32:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    fb36:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    fb3a:	f8d3 1264 	ldr.w	r1, [r3, #612]	; 0x264
    fb3e:	f8c4 1898 	str.w	r1, [r4, #2200]	; 0x898
    fb42:	f8d3 1278 	ldr.w	r1, [r3, #632]	; 0x278
    fb46:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
    fb4a:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
    fb4e:	f8c4 387c 	str.w	r3, [r4, #2172]	; 0x87c
    fb52:	2201      	movs	r2, #1
    fb54:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    fb58:	4a37      	ldr	r2, [pc, #220]	; (fc38 <am_hal_mspi_power_control+0x1a0>)
    fb5a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    fb5e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
    fb62:	f023 031f 	bic.w	r3, r3, #31
    fb66:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    fb6a:	200c      	movs	r0, #12
    fb6c:	f000 f890 	bl	fc90 <am_hal_pwrctrl_periph_disable>
    fb70:	2000      	movs	r0, #0
    fb72:	b002      	add	sp, #8
    fb74:	bd10      	pop	{r4, pc}
    fb76:	2002      	movs	r0, #2
    fb78:	b002      	add	sp, #8
    fb7a:	bd10      	pop	{r4, pc}
    fb7c:	2006      	movs	r0, #6
    fb7e:	b002      	add	sp, #8
    fb80:	bd10      	pop	{r4, pc}
    fb82:	2a00      	cmp	r2, #0
    fb84:	d04a      	beq.n	fc1c <am_hal_mspi_power_control+0x184>
    fb86:	f894 3860 	ldrb.w	r3, [r4, #2144]	; 0x860
    fb8a:	2b00      	cmp	r3, #0
    fb8c:	d04f      	beq.n	fc2e <am_hal_mspi_power_control+0x196>
    fb8e:	200c      	movs	r0, #12
    fb90:	9101      	str	r1, [sp, #4]
    fb92:	f000 f853 	bl	fc3c <am_hal_pwrctrl_periph_enable>
    fb96:	4b28      	ldr	r3, [pc, #160]	; (fc38 <am_hal_mspi_power_control+0x1a0>)
    fb98:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    fb9c:	605a      	str	r2, [r3, #4]
    fb9e:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    fba2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    fba6:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    fbaa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    fbae:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    fbb2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    fbb6:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    fbba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    fbbe:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    fbc2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    fbc6:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    fbca:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    fbce:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    fbd2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    fbd6:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    fbda:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    fbde:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    fbe2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
    fbe6:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    fbea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    fbee:	f8d4 2898 	ldr.w	r2, [r4, #2200]	; 0x898
    fbf2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
    fbf6:	f8d4 289c 	ldr.w	r2, [r4, #2204]	; 0x89c
    fbfa:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
    fbfe:	f894 2888 	ldrb.w	r2, [r4, #2184]	; 0x888
    fc02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    fc06:	9901      	ldr	r1, [sp, #4]
    fc08:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    fc0c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
    fc10:	4608      	mov	r0, r1
    fc12:	f884 1860 	strb.w	r1, [r4, #2144]	; 0x860
    fc16:	e7af      	b.n	fb78 <am_hal_mspi_power_control+0xe0>
    fc18:	2002      	movs	r0, #2
    fc1a:	4770      	bx	lr
    fc1c:	200c      	movs	r0, #12
    fc1e:	9201      	str	r2, [sp, #4]
    fc20:	f000 f80c 	bl	fc3c <am_hal_pwrctrl_periph_enable>
    fc24:	9a01      	ldr	r2, [sp, #4]
    fc26:	4610      	mov	r0, r2
    fc28:	e7a6      	b.n	fb78 <am_hal_mspi_power_control+0xe0>
    fc2a:	2003      	movs	r0, #3
    fc2c:	e7a4      	b.n	fb78 <am_hal_mspi_power_control+0xe0>
    fc2e:	2007      	movs	r0, #7
    fc30:	e7a2      	b.n	fb78 <am_hal_mspi_power_control+0xe0>
    fc32:	bf00      	nop
    fc34:	01bebebe 	.word	0x01bebebe
    fc38:	50014000 	.word	0x50014000

0000fc3c <am_hal_pwrctrl_periph_enable>:
    fc3c:	b570      	push	{r4, r5, r6, lr}
    fc3e:	b082      	sub	sp, #8
    fc40:	4604      	mov	r4, r0
    fc42:	f7fe fd13 	bl	e66c <am_hal_interrupt_master_disable>
    fc46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fc4a:	4e0f      	ldr	r6, [pc, #60]	; (fc88 <am_hal_pwrctrl_periph_enable+0x4c>)
    fc4c:	4d0f      	ldr	r5, [pc, #60]	; (fc8c <am_hal_pwrctrl_periph_enable+0x50>)
    fc4e:	9001      	str	r0, [sp, #4]
    fc50:	00a4      	lsls	r4, r4, #2
    fc52:	68b3      	ldr	r3, [r6, #8]
    fc54:	592a      	ldr	r2, [r5, r4]
    fc56:	4313      	orrs	r3, r2
    fc58:	60b3      	str	r3, [r6, #8]
    fc5a:	9801      	ldr	r0, [sp, #4]
    fc5c:	442c      	add	r4, r5
    fc5e:	f7fe fd09 	bl	e674 <am_hal_interrupt_master_set>
    fc62:	20a0      	movs	r0, #160	; 0xa0
    fc64:	f7fe fcae 	bl	e5c4 <am_hal_flash_delay>
    fc68:	69b3      	ldr	r3, [r6, #24]
    fc6a:	6864      	ldr	r4, [r4, #4]
    fc6c:	4223      	tst	r3, r4
    fc6e:	d103      	bne.n	fc78 <am_hal_pwrctrl_periph_enable+0x3c>
    fc70:	20a0      	movs	r0, #160	; 0xa0
    fc72:	f7fe fca7 	bl	e5c4 <am_hal_flash_delay>
    fc76:	69b3      	ldr	r3, [r6, #24]
    fc78:	4b03      	ldr	r3, [pc, #12]	; (fc88 <am_hal_pwrctrl_periph_enable+0x4c>)
    fc7a:	699b      	ldr	r3, [r3, #24]
    fc7c:	4223      	tst	r3, r4
    fc7e:	bf0c      	ite	eq
    fc80:	2001      	moveq	r0, #1
    fc82:	2000      	movne	r0, #0
    fc84:	b002      	add	sp, #8
    fc86:	bd70      	pop	{r4, r5, r6, pc}
    fc88:	40021000 	.word	0x40021000
    fc8c:	0001133c 	.word	0x0001133c

0000fc90 <am_hal_pwrctrl_periph_disable>:
    fc90:	b570      	push	{r4, r5, r6, lr}
    fc92:	b082      	sub	sp, #8
    fc94:	4604      	mov	r4, r0
    fc96:	f7fe fce9 	bl	e66c <am_hal_interrupt_master_disable>
    fc9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    fc9e:	4e10      	ldr	r6, [pc, #64]	; (fce0 <am_hal_pwrctrl_periph_disable+0x50>)
    fca0:	4d10      	ldr	r5, [pc, #64]	; (fce4 <am_hal_pwrctrl_periph_disable+0x54>)
    fca2:	9001      	str	r0, [sp, #4]
    fca4:	00a4      	lsls	r4, r4, #2
    fca6:	68b3      	ldr	r3, [r6, #8]
    fca8:	592a      	ldr	r2, [r5, r4]
    fcaa:	ea23 0302 	bic.w	r3, r3, r2
    fcae:	60b3      	str	r3, [r6, #8]
    fcb0:	9801      	ldr	r0, [sp, #4]
    fcb2:	442c      	add	r4, r5
    fcb4:	f7fe fcde 	bl	e674 <am_hal_interrupt_master_set>
    fcb8:	20a0      	movs	r0, #160	; 0xa0
    fcba:	f7fe fc83 	bl	e5c4 <am_hal_flash_delay>
    fcbe:	69b3      	ldr	r3, [r6, #24]
    fcc0:	6864      	ldr	r4, [r4, #4]
    fcc2:	4223      	tst	r3, r4
    fcc4:	d003      	beq.n	fcce <am_hal_pwrctrl_periph_disable+0x3e>
    fcc6:	20a0      	movs	r0, #160	; 0xa0
    fcc8:	f7fe fc7c 	bl	e5c4 <am_hal_flash_delay>
    fccc:	69b3      	ldr	r3, [r6, #24]
    fcce:	4b04      	ldr	r3, [pc, #16]	; (fce0 <am_hal_pwrctrl_periph_disable+0x50>)
    fcd0:	699b      	ldr	r3, [r3, #24]
    fcd2:	4223      	tst	r3, r4
    fcd4:	bf14      	ite	ne
    fcd6:	2001      	movne	r0, #1
    fcd8:	2000      	moveq	r0, #0
    fcda:	b002      	add	sp, #8
    fcdc:	bd70      	pop	{r4, r5, r6, pc}
    fcde:	bf00      	nop
    fce0:	40021000 	.word	0x40021000
    fce4:	0001133c 	.word	0x0001133c

0000fce8 <am_hal_pwrctrl_low_power_init>:
    fce8:	b530      	push	{r4, r5, lr}
    fcea:	4b69      	ldr	r3, [pc, #420]	; (fe90 <am_hal_pwrctrl_low_power_init+0x1a8>)
    fcec:	681a      	ldr	r2, [r3, #0]
    fcee:	b085      	sub	sp, #20
    fcf0:	b912      	cbnz	r2, fcf8 <am_hal_pwrctrl_low_power_init+0x10>
    fcf2:	4a68      	ldr	r2, [pc, #416]	; (fe94 <am_hal_pwrctrl_low_power_init+0x1ac>)
    fcf4:	6812      	ldr	r2, [r2, #0]
    fcf6:	601a      	str	r2, [r3, #0]
    fcf8:	4b67      	ldr	r3, [pc, #412]	; (fe98 <am_hal_pwrctrl_low_power_init+0x1b0>)
    fcfa:	68db      	ldr	r3, [r3, #12]
    fcfc:	b2db      	uxtb	r3, r3
    fcfe:	2b12      	cmp	r3, #18
    fd00:	d104      	bne.n	fd0c <am_hal_pwrctrl_low_power_init+0x24>
    fd02:	4c66      	ldr	r4, [pc, #408]	; (fe9c <am_hal_pwrctrl_low_power_init+0x1b4>)
    fd04:	6863      	ldr	r3, [r4, #4]
    fd06:	07d8      	lsls	r0, r3, #31
    fd08:	f100 8088 	bmi.w	fe1c <am_hal_pwrctrl_low_power_init+0x134>
    fd0c:	4b62      	ldr	r3, [pc, #392]	; (fe98 <am_hal_pwrctrl_low_power_init+0x1b0>)
    fd0e:	68da      	ldr	r2, [r3, #12]
    fd10:	b2d2      	uxtb	r2, r2
    fd12:	2a20      	cmp	r2, #32
    fd14:	d934      	bls.n	fd80 <am_hal_pwrctrl_low_power_init+0x98>
    fd16:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    fd1a:	2002      	movs	r0, #2
    fd1c:	f360 4213 	bfi	r2, r0, #16, #4
    fd20:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    fd24:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    fd28:	2203      	movs	r2, #3
    fd2a:	f362 5117 	bfi	r1, r2, #20, #4
    fd2e:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    fd32:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    fd36:	2405      	movs	r4, #5
    fd38:	f364 0103 	bfi	r1, r4, #0, #4
    fd3c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    fd40:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    fd44:	f360 1107 	bfi	r1, r0, #4, #4
    fd48:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    fd4c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    fd50:	2406      	movs	r4, #6
    fd52:	f364 210b 	bfi	r1, r4, #8, #4
    fd56:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    fd5a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    fd5e:	2001      	movs	r0, #1
    fd60:	f360 310f 	bfi	r1, r0, #12, #4
    fd64:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    fd68:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    fd6c:	f362 61de 	bfi	r1, r2, #27, #4
    fd70:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    fd74:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    fd78:	f362 0103 	bfi	r1, r2, #0, #4
    fd7c:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    fd80:	4a45      	ldr	r2, [pc, #276]	; (fe98 <am_hal_pwrctrl_low_power_init+0x1b0>)
    fd82:	68d3      	ldr	r3, [r2, #12]
    fd84:	b2db      	uxtb	r3, r3
    fd86:	2b11      	cmp	r3, #17
    fd88:	d905      	bls.n	fd96 <am_hal_pwrctrl_low_power_init+0xae>
    fd8a:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    fd8e:	f36f 6318 	bfc	r3, #24, #1
    fd92:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    fd96:	2100      	movs	r1, #0
    fd98:	200c      	movs	r0, #12
    fd9a:	f000 f8bb 	bl	ff14 <am_hal_cachectrl_control>
    fd9e:	4b3f      	ldr	r3, [pc, #252]	; (fe9c <am_hal_pwrctrl_low_power_init+0x1b4>)
    fda0:	699b      	ldr	r3, [r3, #24]
    fda2:	f3c3 2500 	ubfx	r5, r3, #8, #1
    fda6:	05db      	lsls	r3, r3, #23
    fda8:	d420      	bmi.n	fdec <am_hal_pwrctrl_low_power_init+0x104>
    fdaa:	4c3b      	ldr	r4, [pc, #236]	; (fe98 <am_hal_pwrctrl_low_power_init+0x1b0>)
    fdac:	68e3      	ldr	r3, [r4, #12]
    fdae:	b2db      	uxtb	r3, r3
    fdb0:	2b11      	cmp	r3, #17
    fdb2:	d84e      	bhi.n	fe52 <am_hal_pwrctrl_low_power_init+0x16a>
    fdb4:	4c38      	ldr	r4, [pc, #224]	; (fe98 <am_hal_pwrctrl_low_power_init+0x1b0>)
    fdb6:	493a      	ldr	r1, [pc, #232]	; (fea0 <am_hal_pwrctrl_low_power_init+0x1b8>)
    fdb8:	7e22      	ldrb	r2, [r4, #24]
    fdba:	2001      	movs	r0, #1
    fdbc:	4302      	orrs	r2, r0
    fdbe:	2307      	movs	r3, #7
    fdc0:	7622      	strb	r2, [r4, #24]
    fdc2:	9000      	str	r0, [sp, #0]
    fdc4:	461a      	mov	r2, r3
    fdc6:	f242 7010 	movw	r0, #10000	; 0x2710
    fdca:	f7fe fc0b 	bl	e5e4 <am_hal_flash_delay_status_check>
    fdce:	2800      	cmp	r0, #0
    fdd0:	d15a      	bne.n	fe88 <am_hal_pwrctrl_low_power_init+0x1a0>
    fdd2:	4b32      	ldr	r3, [pc, #200]	; (fe9c <am_hal_pwrctrl_low_power_init+0x1b4>)
    fdd4:	681a      	ldr	r2, [r3, #0]
    fdd6:	f042 0201 	orr.w	r2, r2, #1
    fdda:	601a      	str	r2, [r3, #0]
    fddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fdde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    fde2:	625a      	str	r2, [r3, #36]	; 0x24
    fde4:	68e3      	ldr	r3, [r4, #12]
    fde6:	b2db      	uxtb	r3, r3
    fde8:	2b11      	cmp	r3, #17
    fdea:	d002      	beq.n	fdf2 <am_hal_pwrctrl_low_power_init+0x10a>
    fdec:	2000      	movs	r0, #0
    fdee:	b005      	add	sp, #20
    fdf0:	bd30      	pop	{r4, r5, pc}
    fdf2:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    fdf6:	f360 5356 	bfi	r3, r0, #21, #2
    fdfa:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    fdfe:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    fe02:	220f      	movs	r2, #15
    fe04:	f362 138b 	bfi	r3, r2, #6, #6
    fe08:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    fe0c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    fe10:	f362 0305 	bfi	r3, r2, #0, #6
    fe14:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    fe18:	b005      	add	sp, #20
    fe1a:	bd30      	pop	{r4, r5, pc}
    fe1c:	f7fe fc26 	bl	e66c <am_hal_interrupt_master_disable>
    fe20:	9002      	str	r0, [sp, #8]
    fe22:	68a3      	ldr	r3, [r4, #8]
    fe24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    fe28:	60a3      	str	r3, [r4, #8]
    fe2a:	9802      	ldr	r0, [sp, #8]
    fe2c:	f7fe fc22 	bl	e674 <am_hal_interrupt_master_set>
    fe30:	20a0      	movs	r0, #160	; 0xa0
    fe32:	f7fe fbc7 	bl	e5c4 <am_hal_flash_delay>
    fe36:	69a3      	ldr	r3, [r4, #24]
    fe38:	0619      	lsls	r1, r3, #24
    fe3a:	d403      	bmi.n	fe44 <am_hal_pwrctrl_low_power_init+0x15c>
    fe3c:	20a0      	movs	r0, #160	; 0xa0
    fe3e:	f7fe fbc1 	bl	e5c4 <am_hal_flash_delay>
    fe42:	69a3      	ldr	r3, [r4, #24]
    fe44:	4b15      	ldr	r3, [pc, #84]	; (fe9c <am_hal_pwrctrl_low_power_init+0x1b4>)
    fe46:	699b      	ldr	r3, [r3, #24]
    fe48:	061a      	lsls	r2, r3, #24
    fe4a:	f53f af5f 	bmi.w	fd0c <am_hal_pwrctrl_low_power_init+0x24>
    fe4e:	2001      	movs	r0, #1
    fe50:	e7cd      	b.n	fdee <am_hal_pwrctrl_low_power_init+0x106>
    fe52:	f7fe fc0b 	bl	e66c <am_hal_interrupt_master_disable>
    fe56:	9003      	str	r0, [sp, #12]
    fe58:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    fe5c:	2219      	movs	r2, #25
    fe5e:	f362 138b 	bfi	r3, r2, #6, #6
    fe62:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    fe66:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    fe6a:	210c      	movs	r1, #12
    fe6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    fe70:	f361 0205 	bfi	r2, r1, #0, #6
    fe74:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    fe78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    fe7a:	f365 5296 	bfi	r2, r5, #22, #1
    fe7e:	63da      	str	r2, [r3, #60]	; 0x3c
    fe80:	9803      	ldr	r0, [sp, #12]
    fe82:	f7fe fbf7 	bl	e674 <am_hal_interrupt_master_set>
    fe86:	e795      	b.n	fdb4 <am_hal_pwrctrl_low_power_init+0xcc>
    fe88:	2004      	movs	r0, #4
    fe8a:	b005      	add	sp, #20
    fe8c:	bd30      	pop	{r4, r5, pc}
    fe8e:	bf00      	nop
    fe90:	100062e4 	.word	0x100062e4
    fe94:	4ffff000 	.word	0x4ffff000
    fe98:	40020000 	.word	0x40020000
    fe9c:	40021000 	.word	0x40021000
    fea0:	40020018 	.word	0x40020018

0000fea4 <am_hal_sysctrl_sleep>:
    fea4:	b510      	push	{r4, lr}
    fea6:	b082      	sub	sp, #8
    fea8:	4604      	mov	r4, r0
    feaa:	f7fe fbdf 	bl	e66c <am_hal_interrupt_master_disable>
    feae:	9001      	str	r0, [sp, #4]
    feb0:	b124      	cbz	r4, febc <am_hal_sysctrl_sleep+0x18>
    feb2:	4b12      	ldr	r3, [pc, #72]	; (fefc <am_hal_sysctrl_sleep+0x58>)
    feb4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    feb8:	07db      	lsls	r3, r3, #31
    feba:	d513      	bpl.n	fee4 <am_hal_sysctrl_sleep+0x40>
    febc:	4a10      	ldr	r2, [pc, #64]	; (ff00 <am_hal_sysctrl_sleep+0x5c>)
    febe:	6913      	ldr	r3, [r2, #16]
    fec0:	f023 0304 	bic.w	r3, r3, #4
    fec4:	6113      	str	r3, [r2, #16]
    fec6:	f3bf 8f4f 	dsb	sy
    feca:	4a0e      	ldr	r2, [pc, #56]	; (ff04 <am_hal_sysctrl_sleep+0x60>)
    fecc:	4b0e      	ldr	r3, [pc, #56]	; (ff08 <am_hal_sysctrl_sleep+0x64>)
    fece:	6812      	ldr	r2, [r2, #0]
    fed0:	601a      	str	r2, [r3, #0]
    fed2:	bf30      	wfi
    fed4:	f3bf 8f6f 	isb	sy
    fed8:	9801      	ldr	r0, [sp, #4]
    feda:	b002      	add	sp, #8
    fedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fee0:	f7fe bbc8 	b.w	e674 <am_hal_interrupt_master_set>
    fee4:	4b09      	ldr	r3, [pc, #36]	; (ff0c <am_hal_sysctrl_sleep+0x68>)
    fee6:	681a      	ldr	r2, [r3, #0]
    fee8:	b912      	cbnz	r2, fef0 <am_hal_sysctrl_sleep+0x4c>
    feea:	4a09      	ldr	r2, [pc, #36]	; (ff10 <am_hal_sysctrl_sleep+0x6c>)
    feec:	6812      	ldr	r2, [r2, #0]
    feee:	601a      	str	r2, [r3, #0]
    fef0:	4a03      	ldr	r2, [pc, #12]	; (ff00 <am_hal_sysctrl_sleep+0x5c>)
    fef2:	6913      	ldr	r3, [r2, #16]
    fef4:	f043 0304 	orr.w	r3, r3, #4
    fef8:	6113      	str	r3, [r2, #16]
    fefa:	e7e4      	b.n	fec6 <am_hal_sysctrl_sleep+0x22>
    fefc:	40020000 	.word	0x40020000
    ff00:	e000ed00 	.word	0xe000ed00
    ff04:	5fff0000 	.word	0x5fff0000
    ff08:	100062e8 	.word	0x100062e8
    ff0c:	100062e4 	.word	0x100062e4
    ff10:	4ffff000 	.word	0x4ffff000

0000ff14 <am_hal_cachectrl_control>:
    ff14:	b510      	push	{r4, lr}
    ff16:	3801      	subs	r0, #1
    ff18:	b08e      	sub	sp, #56	; 0x38
    ff1a:	2810      	cmp	r0, #16
    ff1c:	f200 815e 	bhi.w	101dc <am_hal_cachectrl_control+0x2c8>
    ff20:	e8df f010 	tbh	[pc, r0, lsl #1]
    ff24:	00360018 	.word	0x00360018
    ff28:	0040003d 	.word	0x0040003d
    ff2c:	00450043 	.word	0x00450043
    ff30:	0011001a 	.word	0x0011001a
    ff34:	00540047 	.word	0x00540047
    ff38:	009a0061 	.word	0x009a0061
    ff3c:	010c00d3 	.word	0x010c00d3
    ff40:	013f0126 	.word	0x013f0126
    ff44:	001d      	.short	0x001d
    ff46:	f44f 7300 	mov.w	r3, #512	; 0x200
    ff4a:	4aac      	ldr	r2, [pc, #688]	; (101fc <am_hal_cachectrl_control+0x2e8>)
    ff4c:	2000      	movs	r0, #0
    ff4e:	6093      	str	r3, [r2, #8]
    ff50:	b00e      	add	sp, #56	; 0x38
    ff52:	bd10      	pop	{r4, pc}
    ff54:	2301      	movs	r3, #1
    ff56:	e7f8      	b.n	ff4a <am_hal_cachectrl_control+0x36>
    ff58:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ff5c:	e7f5      	b.n	ff4a <am_hal_cachectrl_control+0x36>
    ff5e:	2900      	cmp	r1, #0
    ff60:	f000 813c 	beq.w	101dc <am_hal_cachectrl_control+0x2c8>
    ff64:	684a      	ldr	r2, [r1, #4]
    ff66:	48a6      	ldr	r0, [pc, #664]	; (10200 <am_hal_cachectrl_control+0x2ec>)
    ff68:	4202      	tst	r2, r0
    ff6a:	f040 8137 	bne.w	101dc <am_hal_cachectrl_control+0x2c8>
    ff6e:	688b      	ldr	r3, [r1, #8]
    ff70:	4018      	ands	r0, r3
    ff72:	f040 8133 	bne.w	101dc <am_hal_cachectrl_control+0x2c8>
    ff76:	780c      	ldrb	r4, [r1, #0]
    ff78:	2c00      	cmp	r4, #0
    ff7a:	f040 8133 	bne.w	101e4 <am_hal_cachectrl_control+0x2d0>
    ff7e:	4c9f      	ldr	r4, [pc, #636]	; (101fc <am_hal_cachectrl_control+0x2e8>)
    ff80:	7849      	ldrb	r1, [r1, #1]
    ff82:	6122      	str	r2, [r4, #16]
    ff84:	6163      	str	r3, [r4, #20]
    ff86:	6823      	ldr	r3, [r4, #0]
    ff88:	f361 0382 	bfi	r3, r1, #2, #1
    ff8c:	6023      	str	r3, [r4, #0]
    ff8e:	e7df      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
    ff90:	4b9a      	ldr	r3, [pc, #616]	; (101fc <am_hal_cachectrl_control+0x2e8>)
    ff92:	681b      	ldr	r3, [r3, #0]
    ff94:	01db      	lsls	r3, r3, #7
    ff96:	f140 811f 	bpl.w	101d8 <am_hal_cachectrl_control+0x2c4>
    ff9a:	2302      	movs	r3, #2
    ff9c:	e7d5      	b.n	ff4a <am_hal_cachectrl_control+0x36>
    ff9e:	f44f 6388 	mov.w	r3, #1088	; 0x440
    ffa2:	e7d2      	b.n	ff4a <am_hal_cachectrl_control+0x36>
    ffa4:	f44f 7308 	mov.w	r3, #544	; 0x220
    ffa8:	e7cf      	b.n	ff4a <am_hal_cachectrl_control+0x36>
    ffaa:	2340      	movs	r3, #64	; 0x40
    ffac:	e7cd      	b.n	ff4a <am_hal_cachectrl_control+0x36>
    ffae:	2320      	movs	r3, #32
    ffb0:	e7cb      	b.n	ff4a <am_hal_cachectrl_control+0x36>
    ffb2:	f7fe fb5b 	bl	e66c <am_hal_interrupt_master_disable>
    ffb6:	4a91      	ldr	r2, [pc, #580]	; (101fc <am_hal_cachectrl_control+0x2e8>)
    ffb8:	9000      	str	r0, [sp, #0]
    ffba:	6813      	ldr	r3, [r2, #0]
    ffbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ffc0:	6013      	str	r3, [r2, #0]
    ffc2:	9800      	ldr	r0, [sp, #0]
    ffc4:	f7fe fb56 	bl	e674 <am_hal_interrupt_master_set>
    ffc8:	2000      	movs	r0, #0
    ffca:	e7c1      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
    ffcc:	f7fe fb4e 	bl	e66c <am_hal_interrupt_master_disable>
    ffd0:	4a8a      	ldr	r2, [pc, #552]	; (101fc <am_hal_cachectrl_control+0x2e8>)
    ffd2:	9001      	str	r0, [sp, #4]
    ffd4:	6813      	ldr	r3, [r2, #0]
    ffd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ffda:	6013      	str	r3, [r2, #0]
    ffdc:	9801      	ldr	r0, [sp, #4]
    ffde:	f7fe fb49 	bl	e674 <am_hal_interrupt_master_set>
    ffe2:	2000      	movs	r0, #0
    ffe4:	e7b4      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
    ffe6:	f7fe fb41 	bl	e66c <am_hal_interrupt_master_disable>
    ffea:	4603      	mov	r3, r0
    ffec:	4885      	ldr	r0, [pc, #532]	; (10204 <am_hal_cachectrl_control+0x2f0>)
    ffee:	9302      	str	r3, [sp, #8]
    fff0:	f7fe fb2e 	bl	e650 <am_hal_flash_load_ui32>
    fff4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    fff8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    fffc:	4881      	ldr	r0, [pc, #516]	; (10204 <am_hal_cachectrl_control+0x2f0>)
    fffe:	f7fe fb2b 	bl	e658 <am_hal_flash_store_ui32>
   10002:	9802      	ldr	r0, [sp, #8]
   10004:	f7fe fb36 	bl	e674 <am_hal_interrupt_master_set>
   10008:	f7fe fb30 	bl	e66c <am_hal_interrupt_master_disable>
   1000c:	4603      	mov	r3, r0
   1000e:	487d      	ldr	r0, [pc, #500]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10010:	9303      	str	r3, [sp, #12]
   10012:	f7fe fb1d 	bl	e650 <am_hal_flash_load_ui32>
   10016:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1001a:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
   1001e:	4879      	ldr	r0, [pc, #484]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10020:	f7fe fb1a 	bl	e658 <am_hal_flash_store_ui32>
   10024:	9803      	ldr	r0, [sp, #12]
   10026:	f7fe fb25 	bl	e674 <am_hal_interrupt_master_set>
   1002a:	f7fe fb1f 	bl	e66c <am_hal_interrupt_master_disable>
   1002e:	4603      	mov	r3, r0
   10030:	4874      	ldr	r0, [pc, #464]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10032:	9304      	str	r3, [sp, #16]
   10034:	f7fe fb0c 	bl	e650 <am_hal_flash_load_ui32>
   10038:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   1003c:	f020 000f 	bic.w	r0, r0, #15
   10040:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   10044:	f041 0103 	orr.w	r1, r1, #3
   10048:	486e      	ldr	r0, [pc, #440]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   1004a:	f7fe fb05 	bl	e658 <am_hal_flash_store_ui32>
   1004e:	9804      	ldr	r0, [sp, #16]
   10050:	f7fe fb10 	bl	e674 <am_hal_interrupt_master_set>
   10054:	2000      	movs	r0, #0
   10056:	e77b      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   10058:	f7fe fb08 	bl	e66c <am_hal_interrupt_master_disable>
   1005c:	4603      	mov	r3, r0
   1005e:	4869      	ldr	r0, [pc, #420]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10060:	9305      	str	r3, [sp, #20]
   10062:	f7fe faf5 	bl	e650 <am_hal_flash_load_ui32>
   10066:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   1006a:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   1006e:	4865      	ldr	r0, [pc, #404]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10070:	f7fe faf2 	bl	e658 <am_hal_flash_store_ui32>
   10074:	9805      	ldr	r0, [sp, #20]
   10076:	f7fe fafd 	bl	e674 <am_hal_interrupt_master_set>
   1007a:	f7fe faf7 	bl	e66c <am_hal_interrupt_master_disable>
   1007e:	4603      	mov	r3, r0
   10080:	4860      	ldr	r0, [pc, #384]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10082:	9306      	str	r3, [sp, #24]
   10084:	f7fe fae4 	bl	e650 <am_hal_flash_load_ui32>
   10088:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1008c:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
   10090:	485c      	ldr	r0, [pc, #368]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10092:	f7fe fae1 	bl	e658 <am_hal_flash_store_ui32>
   10096:	9806      	ldr	r0, [sp, #24]
   10098:	f7fe faec 	bl	e674 <am_hal_interrupt_master_set>
   1009c:	f7fe fae6 	bl	e66c <am_hal_interrupt_master_disable>
   100a0:	4603      	mov	r3, r0
   100a2:	4858      	ldr	r0, [pc, #352]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   100a4:	9307      	str	r3, [sp, #28]
   100a6:	f7fe fad3 	bl	e650 <am_hal_flash_load_ui32>
   100aa:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   100ae:	f020 000f 	bic.w	r0, r0, #15
   100b2:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   100b6:	f041 0101 	orr.w	r1, r1, #1
   100ba:	4852      	ldr	r0, [pc, #328]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   100bc:	f7fe facc 	bl	e658 <am_hal_flash_store_ui32>
   100c0:	9807      	ldr	r0, [sp, #28]
   100c2:	f7fe fad7 	bl	e674 <am_hal_interrupt_master_set>
   100c6:	2000      	movs	r0, #0
   100c8:	e742      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   100ca:	f7fe facf 	bl	e66c <am_hal_interrupt_master_disable>
   100ce:	4603      	mov	r3, r0
   100d0:	484c      	ldr	r0, [pc, #304]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   100d2:	9308      	str	r3, [sp, #32]
   100d4:	f7fe fabc 	bl	e650 <am_hal_flash_load_ui32>
   100d8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   100dc:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
   100e0:	4848      	ldr	r0, [pc, #288]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   100e2:	f7fe fab9 	bl	e658 <am_hal_flash_store_ui32>
   100e6:	9808      	ldr	r0, [sp, #32]
   100e8:	f7fe fac4 	bl	e674 <am_hal_interrupt_master_set>
   100ec:	f7fe fabe 	bl	e66c <am_hal_interrupt_master_disable>
   100f0:	4603      	mov	r3, r0
   100f2:	4844      	ldr	r0, [pc, #272]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   100f4:	9309      	str	r3, [sp, #36]	; 0x24
   100f6:	f7fe faab 	bl	e650 <am_hal_flash_load_ui32>
   100fa:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   100fe:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
   10102:	4840      	ldr	r0, [pc, #256]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10104:	f7fe faa8 	bl	e658 <am_hal_flash_store_ui32>
   10108:	9809      	ldr	r0, [sp, #36]	; 0x24
   1010a:	f7fe fab3 	bl	e674 <am_hal_interrupt_master_set>
   1010e:	f7fe faad 	bl	e66c <am_hal_interrupt_master_disable>
   10112:	4603      	mov	r3, r0
   10114:	483b      	ldr	r0, [pc, #236]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10116:	930a      	str	r3, [sp, #40]	; 0x28
   10118:	f7fe fa9a 	bl	e650 <am_hal_flash_load_ui32>
   1011c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   10120:	f020 000f 	bic.w	r0, r0, #15
   10124:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
   10128:	f041 0101 	orr.w	r1, r1, #1
   1012c:	4835      	ldr	r0, [pc, #212]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   1012e:	f7fe fa93 	bl	e658 <am_hal_flash_store_ui32>
   10132:	980a      	ldr	r0, [sp, #40]	; 0x28
   10134:	f7fe fa9e 	bl	e674 <am_hal_interrupt_master_set>
   10138:	2000      	movs	r0, #0
   1013a:	e709      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   1013c:	2900      	cmp	r1, #0
   1013e:	d04d      	beq.n	101dc <am_hal_cachectrl_control+0x2c8>
   10140:	680c      	ldr	r4, [r1, #0]
   10142:	2c03      	cmp	r4, #3
   10144:	d84c      	bhi.n	101e0 <am_hal_cachectrl_control+0x2cc>
   10146:	f7fe fa91 	bl	e66c <am_hal_interrupt_master_disable>
   1014a:	4603      	mov	r3, r0
   1014c:	482d      	ldr	r0, [pc, #180]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   1014e:	930b      	str	r3, [sp, #44]	; 0x2c
   10150:	f7fe fa7e 	bl	e650 <am_hal_flash_load_ui32>
   10154:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
   10158:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
   1015c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   10160:	4828      	ldr	r0, [pc, #160]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10162:	f7fe fa79 	bl	e658 <am_hal_flash_store_ui32>
   10166:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10168:	f7fe fa84 	bl	e674 <am_hal_interrupt_master_set>
   1016c:	2000      	movs	r0, #0
   1016e:	e6ef      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   10170:	b3a1      	cbz	r1, 101dc <am_hal_cachectrl_control+0x2c8>
   10172:	680c      	ldr	r4, [r1, #0]
   10174:	2c07      	cmp	r4, #7
   10176:	d833      	bhi.n	101e0 <am_hal_cachectrl_control+0x2cc>
   10178:	f7fe fa78 	bl	e66c <am_hal_interrupt_master_disable>
   1017c:	4603      	mov	r3, r0
   1017e:	4821      	ldr	r0, [pc, #132]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10180:	930c      	str	r3, [sp, #48]	; 0x30
   10182:	f7fe fa65 	bl	e650 <am_hal_flash_load_ui32>
   10186:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
   1018a:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
   1018e:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   10192:	481c      	ldr	r0, [pc, #112]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   10194:	f7fe fa60 	bl	e658 <am_hal_flash_store_ui32>
   10198:	980c      	ldr	r0, [sp, #48]	; 0x30
   1019a:	f7fe fa6b 	bl	e674 <am_hal_interrupt_master_set>
   1019e:	2000      	movs	r0, #0
   101a0:	e6d6      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   101a2:	b1d9      	cbz	r1, 101dc <am_hal_cachectrl_control+0x2c8>
   101a4:	680c      	ldr	r4, [r1, #0]
   101a6:	2c0f      	cmp	r4, #15
   101a8:	d81a      	bhi.n	101e0 <am_hal_cachectrl_control+0x2cc>
   101aa:	f7fe fa5f 	bl	e66c <am_hal_interrupt_master_disable>
   101ae:	4603      	mov	r3, r0
   101b0:	4814      	ldr	r0, [pc, #80]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   101b2:	930d      	str	r3, [sp, #52]	; 0x34
   101b4:	f7fe fa4c 	bl	e650 <am_hal_flash_load_ui32>
   101b8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
   101bc:	f020 000f 	bic.w	r0, r0, #15
   101c0:	ea40 0104 	orr.w	r1, r0, r4
   101c4:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   101c8:	480e      	ldr	r0, [pc, #56]	; (10204 <am_hal_cachectrl_control+0x2f0>)
   101ca:	f7fe fa45 	bl	e658 <am_hal_flash_store_ui32>
   101ce:	980d      	ldr	r0, [sp, #52]	; 0x34
   101d0:	f7fe fa50 	bl	e674 <am_hal_interrupt_master_set>
   101d4:	2000      	movs	r0, #0
   101d6:	e6bb      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   101d8:	2007      	movs	r0, #7
   101da:	e6b9      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   101dc:	2006      	movs	r0, #6
   101de:	e6b7      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   101e0:	2001      	movs	r0, #1
   101e2:	e6b5      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   101e4:	2c01      	cmp	r4, #1
   101e6:	d1f9      	bne.n	101dc <am_hal_cachectrl_control+0x2c8>
   101e8:	4c04      	ldr	r4, [pc, #16]	; (101fc <am_hal_cachectrl_control+0x2e8>)
   101ea:	7849      	ldrb	r1, [r1, #1]
   101ec:	61a2      	str	r2, [r4, #24]
   101ee:	61e3      	str	r3, [r4, #28]
   101f0:	6823      	ldr	r3, [r4, #0]
   101f2:	f361 03c3 	bfi	r3, r1, #3, #1
   101f6:	6023      	str	r3, [r4, #0]
   101f8:	e6aa      	b.n	ff50 <am_hal_cachectrl_control+0x3c>
   101fa:	bf00      	nop
   101fc:	40018000 	.word	0x40018000
   10200:	f800000f 	.word	0xf800000f
   10204:	40018004 	.word	0x40018004

00010208 <am_hal_cmdq_init>:
   10208:	2807      	cmp	r0, #7
   1020a:	d849      	bhi.n	102a0 <am_hal_cmdq_init+0x98>
   1020c:	2900      	cmp	r1, #0
   1020e:	d04b      	beq.n	102a8 <am_hal_cmdq_init+0xa0>
   10210:	b5f0      	push	{r4, r5, r6, r7, lr}
   10212:	684e      	ldr	r6, [r1, #4]
   10214:	2e00      	cmp	r6, #0
   10216:	d041      	beq.n	1029c <am_hal_cmdq_init+0x94>
   10218:	2a00      	cmp	r2, #0
   1021a:	d03f      	beq.n	1029c <am_hal_cmdq_init+0x94>
   1021c:	680c      	ldr	r4, [r1, #0]
   1021e:	2c01      	cmp	r4, #1
   10220:	d93c      	bls.n	1029c <am_hal_cmdq_init+0x94>
   10222:	4f22      	ldr	r7, [pc, #136]	; (102ac <am_hal_cmdq_init+0xa4>)
   10224:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   10228:	fb0e fe00 	mul.w	lr, lr, r0
   1022c:	eb07 030e 	add.w	r3, r7, lr
   10230:	78dd      	ldrb	r5, [r3, #3]
   10232:	f015 0501 	ands.w	r5, r5, #1
   10236:	d135      	bne.n	102a4 <am_hal_cmdq_init+0x9c>
   10238:	00e4      	lsls	r4, r4, #3
   1023a:	619c      	str	r4, [r3, #24]
   1023c:	4434      	add	r4, r6
   1023e:	e9c3 6401 	strd	r6, r4, [r3, #4]
   10242:	e9c3 6604 	strd	r6, r6, [r3, #16]
   10246:	60de      	str	r6, [r3, #12]
   10248:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
   1024c:	4818      	ldr	r0, [pc, #96]	; (102b0 <am_hal_cmdq_init+0xa8>)
   1024e:	f857 400e 	ldr.w	r4, [r7, lr]
   10252:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
   10256:	f8df c05c 	ldr.w	ip, [pc, #92]	; 102b4 <am_hal_cmdq_init+0xac>
   1025a:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
   1025e:	ea44 040c 	orr.w	r4, r4, ip
   10262:	f847 400e 	str.w	r4, [r7, lr]
   10266:	6258      	str	r0, [r3, #36]	; 0x24
   10268:	6880      	ldr	r0, [r0, #8]
   1026a:	e9c3 5507 	strd	r5, r5, [r3, #28]
   1026e:	6005      	str	r5, [r0, #0]
   10270:	6a58      	ldr	r0, [r3, #36]	; 0x24
   10272:	68c0      	ldr	r0, [r0, #12]
   10274:	6005      	str	r5, [r0, #0]
   10276:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10278:	4628      	mov	r0, r5
   1027a:	e9d4 5704 	ldrd	r5, r7, [r4, #16]
   1027e:	682c      	ldr	r4, [r5, #0]
   10280:	433c      	orrs	r4, r7
   10282:	602c      	str	r4, [r5, #0]
   10284:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10286:	6864      	ldr	r4, [r4, #4]
   10288:	6026      	str	r6, [r4, #0]
   1028a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1028c:	7a09      	ldrb	r1, [r1, #8]
   1028e:	6824      	ldr	r4, [r4, #0]
   10290:	0049      	lsls	r1, r1, #1
   10292:	f001 0102 	and.w	r1, r1, #2
   10296:	6021      	str	r1, [r4, #0]
   10298:	6013      	str	r3, [r2, #0]
   1029a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1029c:	2006      	movs	r0, #6
   1029e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102a0:	2005      	movs	r0, #5
   102a2:	4770      	bx	lr
   102a4:	2007      	movs	r0, #7
   102a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102a8:	2006      	movs	r0, #6
   102aa:	4770      	bx	lr
   102ac:	100062ec 	.word	0x100062ec
   102b0:	000113f0 	.word	0x000113f0
   102b4:	01cdcdcd 	.word	0x01cdcdcd

000102b8 <am_hal_cmdq_enable>:
   102b8:	4603      	mov	r3, r0
   102ba:	b1a0      	cbz	r0, 102e6 <am_hal_cmdq_enable+0x2e>
   102bc:	6802      	ldr	r2, [r0, #0]
   102be:	490c      	ldr	r1, [pc, #48]	; (102f0 <am_hal_cmdq_enable+0x38>)
   102c0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   102c4:	428a      	cmp	r2, r1
   102c6:	d10e      	bne.n	102e6 <am_hal_cmdq_enable+0x2e>
   102c8:	78c0      	ldrb	r0, [r0, #3]
   102ca:	f010 0002 	ands.w	r0, r0, #2
   102ce:	d10c      	bne.n	102ea <am_hal_cmdq_enable+0x32>
   102d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   102d2:	6811      	ldr	r1, [r2, #0]
   102d4:	680a      	ldr	r2, [r1, #0]
   102d6:	f042 0201 	orr.w	r2, r2, #1
   102da:	600a      	str	r2, [r1, #0]
   102dc:	78da      	ldrb	r2, [r3, #3]
   102de:	f042 0202 	orr.w	r2, r2, #2
   102e2:	70da      	strb	r2, [r3, #3]
   102e4:	4770      	bx	lr
   102e6:	2002      	movs	r0, #2
   102e8:	4770      	bx	lr
   102ea:	2000      	movs	r0, #0
   102ec:	4770      	bx	lr
   102ee:	bf00      	nop
   102f0:	01cdcdcd 	.word	0x01cdcdcd

000102f4 <am_hal_cmdq_disable>:
   102f4:	4603      	mov	r3, r0
   102f6:	b1a8      	cbz	r0, 10324 <am_hal_cmdq_disable+0x30>
   102f8:	6802      	ldr	r2, [r0, #0]
   102fa:	490b      	ldr	r1, [pc, #44]	; (10328 <am_hal_cmdq_disable+0x34>)
   102fc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10300:	428a      	cmp	r2, r1
   10302:	d10f      	bne.n	10324 <am_hal_cmdq_disable+0x30>
   10304:	78c0      	ldrb	r0, [r0, #3]
   10306:	f010 0002 	ands.w	r0, r0, #2
   1030a:	d00c      	beq.n	10326 <am_hal_cmdq_disable+0x32>
   1030c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1030e:	6811      	ldr	r1, [r2, #0]
   10310:	680a      	ldr	r2, [r1, #0]
   10312:	f022 0201 	bic.w	r2, r2, #1
   10316:	600a      	str	r2, [r1, #0]
   10318:	78da      	ldrb	r2, [r3, #3]
   1031a:	f36f 0241 	bfc	r2, #1, #1
   1031e:	2000      	movs	r0, #0
   10320:	70da      	strb	r2, [r3, #3]
   10322:	4770      	bx	lr
   10324:	2002      	movs	r0, #2
   10326:	4770      	bx	lr
   10328:	01cdcdcd 	.word	0x01cdcdcd

0001032c <am_hal_cmdq_alloc_block>:
   1032c:	2800      	cmp	r0, #0
   1032e:	d060      	beq.n	103f2 <am_hal_cmdq_alloc_block+0xc6>
   10330:	b5f0      	push	{r4, r5, r6, r7, lr}
   10332:	4604      	mov	r4, r0
   10334:	6800      	ldr	r0, [r0, #0]
   10336:	461d      	mov	r5, r3
   10338:	4b2f      	ldr	r3, [pc, #188]	; (103f8 <am_hal_cmdq_alloc_block+0xcc>)
   1033a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   1033e:	4298      	cmp	r0, r3
   10340:	b083      	sub	sp, #12
   10342:	d146      	bne.n	103d2 <am_hal_cmdq_alloc_block+0xa6>
   10344:	4616      	mov	r6, r2
   10346:	2a00      	cmp	r2, #0
   10348:	d049      	beq.n	103de <am_hal_cmdq_alloc_block+0xb2>
   1034a:	2d00      	cmp	r5, #0
   1034c:	d047      	beq.n	103de <am_hal_cmdq_alloc_block+0xb2>
   1034e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   10352:	429a      	cmp	r2, r3
   10354:	d140      	bne.n	103d8 <am_hal_cmdq_alloc_block+0xac>
   10356:	460f      	mov	r7, r1
   10358:	f7fe f988 	bl	e66c <am_hal_interrupt_master_disable>
   1035c:	9001      	str	r0, [sp, #4]
   1035e:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
   10362:	6883      	ldr	r3, [r0, #8]
   10364:	6819      	ldr	r1, [r3, #0]
   10366:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   1036a:	b2c9      	uxtb	r1, r1
   1036c:	430b      	orrs	r3, r1
   1036e:	1ad2      	subs	r2, r2, r3
   10370:	2a00      	cmp	r2, #0
   10372:	bfb8      	it	lt
   10374:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
   10378:	61e3      	str	r3, [r4, #28]
   1037a:	6843      	ldr	r3, [r0, #4]
   1037c:	681b      	ldr	r3, [r3, #0]
   1037e:	60e3      	str	r3, [r4, #12]
   10380:	9801      	ldr	r0, [sp, #4]
   10382:	f7fe f977 	bl	e674 <am_hal_interrupt_master_set>
   10386:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   1038a:	1ad2      	subs	r2, r2, r3
   1038c:	f112 0ffe 	cmn.w	r2, #254	; 0xfe
   10390:	d42d      	bmi.n	103ee <am_hal_cmdq_alloc_block+0xc2>
   10392:	e9d4 c103 	ldrd	ip, r1, [r4, #12]
   10396:	4561      	cmp	r1, ip
   10398:	d324      	bcc.n	103e4 <am_hal_cmdq_alloc_block+0xb8>
   1039a:	1cba      	adds	r2, r7, #2
   1039c:	68a0      	ldr	r0, [r4, #8]
   1039e:	eb01 0ec2 	add.w	lr, r1, r2, lsl #3
   103a2:	4586      	cmp	lr, r0
   103a4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   103a8:	d909      	bls.n	103be <am_hal_cmdq_alloc_block+0x92>
   103aa:	6860      	ldr	r0, [r4, #4]
   103ac:	3a08      	subs	r2, #8
   103ae:	4402      	add	r2, r0
   103b0:	4594      	cmp	ip, r2
   103b2:	d91c      	bls.n	103ee <am_hal_cmdq_alloc_block+0xc2>
   103b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   103b6:	6852      	ldr	r2, [r2, #4]
   103b8:	e9c1 2000 	strd	r2, r0, [r1]
   103bc:	4601      	mov	r1, r0
   103be:	6031      	str	r1, [r6, #0]
   103c0:	3301      	adds	r3, #1
   103c2:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
   103c6:	2000      	movs	r0, #0
   103c8:	6223      	str	r3, [r4, #32]
   103ca:	602b      	str	r3, [r5, #0]
   103cc:	6161      	str	r1, [r4, #20]
   103ce:	b003      	add	sp, #12
   103d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103d2:	2002      	movs	r0, #2
   103d4:	b003      	add	sp, #12
   103d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103d8:	2007      	movs	r0, #7
   103da:	b003      	add	sp, #12
   103dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103de:	2006      	movs	r0, #6
   103e0:	b003      	add	sp, #12
   103e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103e4:	1c7a      	adds	r2, r7, #1
   103e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   103ea:	4594      	cmp	ip, r2
   103ec:	d8e7      	bhi.n	103be <am_hal_cmdq_alloc_block+0x92>
   103ee:	2005      	movs	r0, #5
   103f0:	e7f0      	b.n	103d4 <am_hal_cmdq_alloc_block+0xa8>
   103f2:	2002      	movs	r0, #2
   103f4:	4770      	bx	lr
   103f6:	bf00      	nop
   103f8:	01cdcdcd 	.word	0x01cdcdcd

000103fc <am_hal_cmdq_release_block>:
   103fc:	b178      	cbz	r0, 1041e <am_hal_cmdq_release_block+0x22>
   103fe:	6803      	ldr	r3, [r0, #0]
   10400:	4a09      	ldr	r2, [pc, #36]	; (10428 <am_hal_cmdq_release_block+0x2c>)
   10402:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10406:	4293      	cmp	r3, r2
   10408:	d109      	bne.n	1041e <am_hal_cmdq_release_block+0x22>
   1040a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1040e:	429a      	cmp	r2, r3
   10410:	d007      	beq.n	10422 <am_hal_cmdq_release_block+0x26>
   10412:	6a03      	ldr	r3, [r0, #32]
   10414:	6142      	str	r2, [r0, #20]
   10416:	3b01      	subs	r3, #1
   10418:	6203      	str	r3, [r0, #32]
   1041a:	2000      	movs	r0, #0
   1041c:	4770      	bx	lr
   1041e:	2002      	movs	r0, #2
   10420:	4770      	bx	lr
   10422:	2007      	movs	r0, #7
   10424:	4770      	bx	lr
   10426:	bf00      	nop
   10428:	01cdcdcd 	.word	0x01cdcdcd

0001042c <am_hal_cmdq_post_block>:
   1042c:	b1d0      	cbz	r0, 10464 <am_hal_cmdq_post_block+0x38>
   1042e:	6803      	ldr	r3, [r0, #0]
   10430:	4a0e      	ldr	r2, [pc, #56]	; (1046c <am_hal_cmdq_post_block+0x40>)
   10432:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   10436:	4293      	cmp	r3, r2
   10438:	d114      	bne.n	10464 <am_hal_cmdq_post_block+0x38>
   1043a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1043e:	429a      	cmp	r2, r3
   10440:	d012      	beq.n	10468 <am_hal_cmdq_post_block+0x3c>
   10442:	b410      	push	{r4}
   10444:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10446:	e9d4 2402 	ldrd	r2, r4, [r4, #8]
   1044a:	4311      	orrs	r1, r2
   1044c:	6a02      	ldr	r2, [r0, #32]
   1044e:	e9c3 1200 	strd	r1, r2, [r3]
   10452:	3308      	adds	r3, #8
   10454:	b2d2      	uxtb	r2, r2
   10456:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1045a:	2000      	movs	r0, #0
   1045c:	6022      	str	r2, [r4, #0]
   1045e:	f85d 4b04 	ldr.w	r4, [sp], #4
   10462:	4770      	bx	lr
   10464:	2002      	movs	r0, #2
   10466:	4770      	bx	lr
   10468:	2007      	movs	r0, #7
   1046a:	4770      	bx	lr
   1046c:	01cdcdcd 	.word	0x01cdcdcd

00010470 <am_hal_cmdq_term>:
   10470:	2800      	cmp	r0, #0
   10472:	d03d      	beq.n	104f0 <am_hal_cmdq_term+0x80>
   10474:	b570      	push	{r4, r5, r6, lr}
   10476:	6803      	ldr	r3, [r0, #0]
   10478:	4a1e      	ldr	r2, [pc, #120]	; (104f4 <am_hal_cmdq_term+0x84>)
   1047a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1047e:	4293      	cmp	r3, r2
   10480:	b082      	sub	sp, #8
   10482:	4604      	mov	r4, r0
   10484:	d002      	beq.n	1048c <am_hal_cmdq_term+0x1c>
   10486:	2002      	movs	r0, #2
   10488:	b002      	add	sp, #8
   1048a:	bd70      	pop	{r4, r5, r6, pc}
   1048c:	460d      	mov	r5, r1
   1048e:	f7fe f8ed 	bl	e66c <am_hal_interrupt_master_disable>
   10492:	6a66      	ldr	r6, [r4, #36]	; 0x24
   10494:	9001      	str	r0, [sp, #4]
   10496:	68b3      	ldr	r3, [r6, #8]
   10498:	6a22      	ldr	r2, [r4, #32]
   1049a:	6819      	ldr	r1, [r3, #0]
   1049c:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   104a0:	b2c9      	uxtb	r1, r1
   104a2:	430b      	orrs	r3, r1
   104a4:	1ad2      	subs	r2, r2, r3
   104a6:	2a00      	cmp	r2, #0
   104a8:	bfb8      	it	lt
   104aa:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
   104ae:	61e3      	str	r3, [r4, #28]
   104b0:	6873      	ldr	r3, [r6, #4]
   104b2:	681b      	ldr	r3, [r3, #0]
   104b4:	60e3      	str	r3, [r4, #12]
   104b6:	9801      	ldr	r0, [sp, #4]
   104b8:	f7fe f8dc 	bl	e674 <am_hal_interrupt_master_set>
   104bc:	b91d      	cbnz	r5, 104c6 <am_hal_cmdq_term+0x56>
   104be:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   104c2:	429a      	cmp	r2, r3
   104c4:	d112      	bne.n	104ec <am_hal_cmdq_term+0x7c>
   104c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   104c8:	78e3      	ldrb	r3, [r4, #3]
   104ca:	6810      	ldr	r0, [r2, #0]
   104cc:	6911      	ldr	r1, [r2, #16]
   104ce:	f36f 0300 	bfc	r3, #0, #1
   104d2:	70e3      	strb	r3, [r4, #3]
   104d4:	6803      	ldr	r3, [r0, #0]
   104d6:	f023 0301 	bic.w	r3, r3, #1
   104da:	6003      	str	r3, [r0, #0]
   104dc:	680b      	ldr	r3, [r1, #0]
   104de:	6952      	ldr	r2, [r2, #20]
   104e0:	2000      	movs	r0, #0
   104e2:	ea23 0302 	bic.w	r3, r3, r2
   104e6:	600b      	str	r3, [r1, #0]
   104e8:	b002      	add	sp, #8
   104ea:	bd70      	pop	{r4, r5, r6, pc}
   104ec:	2003      	movs	r0, #3
   104ee:	e7cb      	b.n	10488 <am_hal_cmdq_term+0x18>
   104f0:	2002      	movs	r0, #2
   104f2:	4770      	bx	lr
   104f4:	01cdcdcd 	.word	0x01cdcdcd

000104f8 <am_hal_cmdq_reset>:
   104f8:	b328      	cbz	r0, 10546 <am_hal_cmdq_reset+0x4e>
   104fa:	6802      	ldr	r2, [r0, #0]
   104fc:	4914      	ldr	r1, [pc, #80]	; (10550 <am_hal_cmdq_reset+0x58>)
   104fe:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10502:	428a      	cmp	r2, r1
   10504:	4603      	mov	r3, r0
   10506:	d11e      	bne.n	10546 <am_hal_cmdq_reset+0x4e>
   10508:	78c2      	ldrb	r2, [r0, #3]
   1050a:	f012 0202 	ands.w	r2, r2, #2
   1050e:	d11c      	bne.n	1054a <am_hal_cmdq_reset+0x52>
   10510:	6a41      	ldr	r1, [r0, #36]	; 0x24
   10512:	b430      	push	{r4, r5}
   10514:	680c      	ldr	r4, [r1, #0]
   10516:	6820      	ldr	r0, [r4, #0]
   10518:	f020 0001 	bic.w	r0, r0, #1
   1051c:	6020      	str	r0, [r4, #0]
   1051e:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
   10522:	6858      	ldr	r0, [r3, #4]
   10524:	6849      	ldr	r1, [r1, #4]
   10526:	60d8      	str	r0, [r3, #12]
   10528:	e9c3 0004 	strd	r0, r0, [r3, #16]
   1052c:	e9c3 2207 	strd	r2, r2, [r3, #28]
   10530:	602a      	str	r2, [r5, #0]
   10532:	6022      	str	r2, [r4, #0]
   10534:	6858      	ldr	r0, [r3, #4]
   10536:	6008      	str	r0, [r1, #0]
   10538:	78d9      	ldrb	r1, [r3, #3]
   1053a:	f362 0141 	bfi	r1, r2, #1, #1
   1053e:	4610      	mov	r0, r2
   10540:	bc30      	pop	{r4, r5}
   10542:	70d9      	strb	r1, [r3, #3]
   10544:	4770      	bx	lr
   10546:	2002      	movs	r0, #2
   10548:	4770      	bx	lr
   1054a:	2007      	movs	r0, #7
   1054c:	4770      	bx	lr
   1054e:	bf00      	nop
   10550:	01cdcdcd 	.word	0x01cdcdcd

00010554 <am_hal_cmdq_post_loop_block>:
   10554:	b1f0      	cbz	r0, 10594 <am_hal_cmdq_post_loop_block+0x40>
   10556:	6802      	ldr	r2, [r0, #0]
   10558:	4603      	mov	r3, r0
   1055a:	4810      	ldr	r0, [pc, #64]	; (1059c <am_hal_cmdq_post_loop_block+0x48>)
   1055c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10560:	4282      	cmp	r2, r0
   10562:	d117      	bne.n	10594 <am_hal_cmdq_post_loop_block+0x40>
   10564:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
   10568:	4290      	cmp	r0, r2
   1056a:	d015      	beq.n	10598 <am_hal_cmdq_post_loop_block+0x44>
   1056c:	b430      	push	{r4, r5}
   1056e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10570:	6865      	ldr	r5, [r4, #4]
   10572:	68a0      	ldr	r0, [r4, #8]
   10574:	6010      	str	r0, [r2, #0]
   10576:	4329      	orrs	r1, r5
   10578:	68e4      	ldr	r4, [r4, #12]
   1057a:	6091      	str	r1, [r2, #8]
   1057c:	2000      	movs	r0, #0
   1057e:	6859      	ldr	r1, [r3, #4]
   10580:	6050      	str	r0, [r2, #4]
   10582:	60d1      	str	r1, [r2, #12]
   10584:	3210      	adds	r2, #16
   10586:	e9c3 2204 	strd	r2, r2, [r3, #16]
   1058a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1058e:	6023      	str	r3, [r4, #0]
   10590:	bc30      	pop	{r4, r5}
   10592:	4770      	bx	lr
   10594:	2002      	movs	r0, #2
   10596:	4770      	bx	lr
   10598:	2007      	movs	r0, #7
   1059a:	4770      	bx	lr
   1059c:	01cdcdcd 	.word	0x01cdcdcd

000105a0 <am_bsp_low_power_init>:
   105a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105a2:	f7ff fba1 	bl	fce8 <am_hal_pwrctrl_low_power_init>
   105a6:	f000 fa89 	bl	10abc <am_hal_rtc_osc_disable>
   105aa:	4b0b      	ldr	r3, [pc, #44]	; (105d8 <am_bsp_low_power_init+0x38>)
   105ac:	4f0b      	ldr	r7, [pc, #44]	; (105dc <am_bsp_low_power_init+0x3c>)
   105ae:	681e      	ldr	r6, [r3, #0]
   105b0:	2400      	movs	r4, #0
   105b2:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   105b6:	4631      	mov	r1, r6
   105b8:	4628      	mov	r0, r5
   105ba:	f000 f8c9 	bl	10750 <am_hal_gpio_pinconfig>
   105be:	2103      	movs	r1, #3
   105c0:	4628      	mov	r0, r5
   105c2:	f000 f9fb 	bl	109bc <am_hal_gpio_state_write>
   105c6:	3401      	adds	r4, #1
   105c8:	2100      	movs	r1, #0
   105ca:	4628      	mov	r0, r5
   105cc:	f000 f9f6 	bl	109bc <am_hal_gpio_state_write>
   105d0:	2c05      	cmp	r4, #5
   105d2:	d1ee      	bne.n	105b2 <am_bsp_low_power_init+0x12>
   105d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   105d6:	bf00      	nop
   105d8:	00011564 	.word	0x00011564
   105dc:	100010e4 	.word	0x100010e4

000105e0 <am_bsp_itm_printf_enable>:
   105e0:	b500      	push	{lr}
   105e2:	4b0b      	ldr	r3, [pc, #44]	; (10610 <am_bsp_itm_printf_enable+0x30>)
   105e4:	b087      	sub	sp, #28
   105e6:	2201      	movs	r2, #1
   105e8:	601a      	str	r2, [r3, #0]
   105ea:	f000 fa2b 	bl	10a44 <am_hal_itm_enable>
   105ee:	4b09      	ldr	r3, [pc, #36]	; (10614 <am_bsp_itm_printf_enable+0x34>)
   105f0:	9301      	str	r3, [sp, #4]
   105f2:	a801      	add	r0, sp, #4
   105f4:	f000 fa6c 	bl	10ad0 <am_hal_tpiu_enable>
   105f8:	4b07      	ldr	r3, [pc, #28]	; (10618 <am_bsp_itm_printf_enable+0x38>)
   105fa:	2029      	movs	r0, #41	; 0x29
   105fc:	6819      	ldr	r1, [r3, #0]
   105fe:	f000 f8a7 	bl	10750 <am_hal_gpio_pinconfig>
   10602:	4806      	ldr	r0, [pc, #24]	; (1061c <am_bsp_itm_printf_enable+0x3c>)
   10604:	f7fc f9f6 	bl	c9f4 <am_util_stdio_printf_init>
   10608:	b007      	add	sp, #28
   1060a:	f85d fb04 	ldr.w	pc, [sp], #4
   1060e:	bf00      	nop
   10610:	1000644c 	.word	0x1000644c
   10614:	000f4240 	.word	0x000f4240
   10618:	00011530 	.word	0x00011530
   1061c:	00010a8d 	.word	0x00010a8d

00010620 <am_bsp_mspi_pins_enable>:
   10620:	b100      	cbz	r0, 10624 <am_bsp_mspi_pins_enable+0x4>
   10622:	4770      	bx	lr
   10624:	b508      	push	{r3, lr}
   10626:	2913      	cmp	r1, #19
   10628:	d80b      	bhi.n	10642 <am_bsp_mspi_pins_enable+0x22>
   1062a:	e8df f001 	tbb	[pc, r1]
   1062e:	0b21      	.short	0x0b21
   10630:	2e450b21 	.word	0x2e450b21
   10634:	5c5c6178 	.word	0x5c5c6178
   10638:	0b210b21 	.word	0x0b210b21
   1063c:	2e452e45 	.word	0x2e452e45
   10640:	0b21      	.short	0x0b21
   10642:	bd08      	pop	{r3, pc}
   10644:	4b37      	ldr	r3, [pc, #220]	; (10724 <am_bsp_mspi_pins_enable+0x104>)
   10646:	2029      	movs	r0, #41	; 0x29
   10648:	6819      	ldr	r1, [r3, #0]
   1064a:	f000 f881 	bl	10750 <am_hal_gpio_pinconfig>
   1064e:	4b36      	ldr	r3, [pc, #216]	; (10728 <am_bsp_mspi_pins_enable+0x108>)
   10650:	2000      	movs	r0, #0
   10652:	6819      	ldr	r1, [r3, #0]
   10654:	f000 f87c 	bl	10750 <am_hal_gpio_pinconfig>
   10658:	4b34      	ldr	r3, [pc, #208]	; (1072c <am_bsp_mspi_pins_enable+0x10c>)
   1065a:	2001      	movs	r0, #1
   1065c:	6819      	ldr	r1, [r3, #0]
   1065e:	f000 f877 	bl	10750 <am_hal_gpio_pinconfig>
   10662:	4b33      	ldr	r3, [pc, #204]	; (10730 <am_bsp_mspi_pins_enable+0x110>)
   10664:	2018      	movs	r0, #24
   10666:	6819      	ldr	r1, [r3, #0]
   10668:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1066c:	f000 b870 	b.w	10750 <am_hal_gpio_pinconfig>
   10670:	4b30      	ldr	r3, [pc, #192]	; (10734 <am_bsp_mspi_pins_enable+0x114>)
   10672:	2013      	movs	r0, #19
   10674:	6819      	ldr	r1, [r3, #0]
   10676:	f000 f86b 	bl	10750 <am_hal_gpio_pinconfig>
   1067a:	4b2f      	ldr	r3, [pc, #188]	; (10738 <am_bsp_mspi_pins_enable+0x118>)
   1067c:	2016      	movs	r0, #22
   1067e:	6819      	ldr	r1, [r3, #0]
   10680:	f000 f866 	bl	10750 <am_hal_gpio_pinconfig>
   10684:	4b2d      	ldr	r3, [pc, #180]	; (1073c <am_bsp_mspi_pins_enable+0x11c>)
   10686:	201a      	movs	r0, #26
   10688:	e7e8      	b.n	1065c <am_bsp_mspi_pins_enable+0x3c>
   1068a:	4b26      	ldr	r3, [pc, #152]	; (10724 <am_bsp_mspi_pins_enable+0x104>)
   1068c:	2029      	movs	r0, #41	; 0x29
   1068e:	6819      	ldr	r1, [r3, #0]
   10690:	f000 f85e 	bl	10750 <am_hal_gpio_pinconfig>
   10694:	4b24      	ldr	r3, [pc, #144]	; (10728 <am_bsp_mspi_pins_enable+0x108>)
   10696:	2000      	movs	r0, #0
   10698:	6819      	ldr	r1, [r3, #0]
   1069a:	f000 f859 	bl	10750 <am_hal_gpio_pinconfig>
   1069e:	4b23      	ldr	r3, [pc, #140]	; (1072c <am_bsp_mspi_pins_enable+0x10c>)
   106a0:	2001      	movs	r0, #1
   106a2:	6819      	ldr	r1, [r3, #0]
   106a4:	f000 f854 	bl	10750 <am_hal_gpio_pinconfig>
   106a8:	4b25      	ldr	r3, [pc, #148]	; (10740 <am_bsp_mspi_pins_enable+0x120>)
   106aa:	2002      	movs	r0, #2
   106ac:	6819      	ldr	r1, [r3, #0]
   106ae:	f000 f84f 	bl	10750 <am_hal_gpio_pinconfig>
   106b2:	4b24      	ldr	r3, [pc, #144]	; (10744 <am_bsp_mspi_pins_enable+0x124>)
   106b4:	2003      	movs	r0, #3
   106b6:	e7d1      	b.n	1065c <am_bsp_mspi_pins_enable+0x3c>
   106b8:	4b1e      	ldr	r3, [pc, #120]	; (10734 <am_bsp_mspi_pins_enable+0x114>)
   106ba:	2013      	movs	r0, #19
   106bc:	6819      	ldr	r1, [r3, #0]
   106be:	f000 f847 	bl	10750 <am_hal_gpio_pinconfig>
   106c2:	4b1d      	ldr	r3, [pc, #116]	; (10738 <am_bsp_mspi_pins_enable+0x118>)
   106c4:	2016      	movs	r0, #22
   106c6:	6819      	ldr	r1, [r3, #0]
   106c8:	f000 f842 	bl	10750 <am_hal_gpio_pinconfig>
   106cc:	4b1b      	ldr	r3, [pc, #108]	; (1073c <am_bsp_mspi_pins_enable+0x11c>)
   106ce:	201a      	movs	r0, #26
   106d0:	6819      	ldr	r1, [r3, #0]
   106d2:	f000 f83d 	bl	10750 <am_hal_gpio_pinconfig>
   106d6:	4b1c      	ldr	r3, [pc, #112]	; (10748 <am_bsp_mspi_pins_enable+0x128>)
   106d8:	2004      	movs	r0, #4
   106da:	6819      	ldr	r1, [r3, #0]
   106dc:	f000 f838 	bl	10750 <am_hal_gpio_pinconfig>
   106e0:	4b1a      	ldr	r3, [pc, #104]	; (1074c <am_bsp_mspi_pins_enable+0x12c>)
   106e2:	2017      	movs	r0, #23
   106e4:	e7ba      	b.n	1065c <am_bsp_mspi_pins_enable+0x3c>
   106e6:	4b13      	ldr	r3, [pc, #76]	; (10734 <am_bsp_mspi_pins_enable+0x114>)
   106e8:	2013      	movs	r0, #19
   106ea:	6819      	ldr	r1, [r3, #0]
   106ec:	f000 f830 	bl	10750 <am_hal_gpio_pinconfig>
   106f0:	4b0c      	ldr	r3, [pc, #48]	; (10724 <am_bsp_mspi_pins_enable+0x104>)
   106f2:	2029      	movs	r0, #41	; 0x29
   106f4:	6819      	ldr	r1, [r3, #0]
   106f6:	f000 f82b 	bl	10750 <am_hal_gpio_pinconfig>
   106fa:	4b0f      	ldr	r3, [pc, #60]	; (10738 <am_bsp_mspi_pins_enable+0x118>)
   106fc:	2016      	movs	r0, #22
   106fe:	6819      	ldr	r1, [r3, #0]
   10700:	f000 f826 	bl	10750 <am_hal_gpio_pinconfig>
   10704:	4b0d      	ldr	r3, [pc, #52]	; (1073c <am_bsp_mspi_pins_enable+0x11c>)
   10706:	201a      	movs	r0, #26
   10708:	6819      	ldr	r1, [r3, #0]
   1070a:	f000 f821 	bl	10750 <am_hal_gpio_pinconfig>
   1070e:	4b0e      	ldr	r3, [pc, #56]	; (10748 <am_bsp_mspi_pins_enable+0x128>)
   10710:	2004      	movs	r0, #4
   10712:	6819      	ldr	r1, [r3, #0]
   10714:	f000 f81c 	bl	10750 <am_hal_gpio_pinconfig>
   10718:	4b0c      	ldr	r3, [pc, #48]	; (1074c <am_bsp_mspi_pins_enable+0x12c>)
   1071a:	2017      	movs	r0, #23
   1071c:	e7b7      	b.n	1068e <am_bsp_mspi_pins_enable+0x6e>
   1071e:	4b05      	ldr	r3, [pc, #20]	; (10734 <am_bsp_mspi_pins_enable+0x114>)
   10720:	2013      	movs	r0, #19
   10722:	e7e7      	b.n	106f4 <am_bsp_mspi_pins_enable+0xd4>
   10724:	00011538 	.word	0x00011538
   10728:	0001154c 	.word	0x0001154c
   1072c:	00011550 	.word	0x00011550
   10730:	0001155c 	.word	0x0001155c
   10734:	00011534 	.word	0x00011534
   10738:	0001153c 	.word	0x0001153c
   1073c:	00011540 	.word	0x00011540
   10740:	00011554 	.word	0x00011554
   10744:	00011558 	.word	0x00011558
   10748:	00011544 	.word	0x00011544
   1074c:	00011548 	.word	0x00011548

00010750 <am_hal_gpio_pinconfig>:
   10750:	2831      	cmp	r0, #49	; 0x31
   10752:	f200 80c3 	bhi.w	108dc <am_hal_gpio_pinconfig+0x18c>
   10756:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1075a:	4604      	mov	r4, r0
   1075c:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
   10760:	f001 0007 	and.w	r0, r1, #7
   10764:	b085      	sub	sp, #20
   10766:	f3c1 03c1 	ubfx	r3, r1, #3, #2
   1076a:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1076e:	d00f      	beq.n	10790 <am_hal_gpio_pinconfig+0x40>
   10770:	f3c1 1642 	ubfx	r6, r1, #5, #3
   10774:	1db5      	adds	r5, r6, #6
   10776:	f005 0507 	and.w	r5, r5, #7
   1077a:	2d03      	cmp	r5, #3
   1077c:	f042 0201 	orr.w	r2, r2, #1
   10780:	f240 80ae 	bls.w	108e0 <am_hal_gpio_pinconfig+0x190>
   10784:	2fc0      	cmp	r7, #192	; 0xc0
   10786:	f000 80e1 	beq.w	1094c <am_hal_gpio_pinconfig+0x1fc>
   1078a:	2f20      	cmp	r7, #32
   1078c:	f000 80e3 	beq.w	10956 <am_hal_gpio_pinconfig+0x206>
   10790:	b163      	cbz	r3, 107ac <am_hal_gpio_pinconfig+0x5c>
   10792:	2b01      	cmp	r3, #1
   10794:	f000 80d3 	beq.w	1093e <am_hal_gpio_pinconfig+0x1ee>
   10798:	2b02      	cmp	r3, #2
   1079a:	f040 80c9 	bne.w	10930 <am_hal_gpio_pinconfig+0x1e0>
   1079e:	4b79      	ldr	r3, [pc, #484]	; (10984 <am_hal_gpio_pinconfig+0x234>)
   107a0:	5d1b      	ldrb	r3, [r3, r4]
   107a2:	075b      	lsls	r3, r3, #29
   107a4:	f140 80c4 	bpl.w	10930 <am_hal_gpio_pinconfig+0x1e0>
   107a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   107ac:	4b76      	ldr	r3, [pc, #472]	; (10988 <am_hal_gpio_pinconfig+0x238>)
   107ae:	5d1b      	ldrb	r3, [r3, r4]
   107b0:	4103      	asrs	r3, r0
   107b2:	005b      	lsls	r3, r3, #1
   107b4:	f003 0302 	and.w	r3, r3, #2
   107b8:	4313      	orrs	r3, r2
   107ba:	4a74      	ldr	r2, [pc, #464]	; (1098c <am_hal_gpio_pinconfig+0x23c>)
   107bc:	5d12      	ldrb	r2, [r2, r4]
   107be:	4282      	cmp	r2, r0
   107c0:	f000 8099 	beq.w	108f6 <am_hal_gpio_pinconfig+0x1a6>
   107c4:	f3c1 3000 	ubfx	r0, r1, #12, #1
   107c8:	f3c1 2581 	ubfx	r5, r1, #10, #2
   107cc:	f3c1 3280 	ubfx	r2, r1, #14, #1
   107d0:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
   107d4:	0a88      	lsrs	r0, r1, #10
   107d6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   107da:	f000 0008 	and.w	r0, r0, #8
   107de:	4302      	orrs	r2, r0
   107e0:	f3c1 2007 	ubfx	r0, r1, #8, #8
   107e4:	f000 050c 	and.w	r5, r0, #12
   107e8:	2d04      	cmp	r5, #4
   107ea:	f000 80a5 	beq.w	10938 <am_hal_gpio_pinconfig+0x1e8>
   107ee:	4d68      	ldr	r5, [pc, #416]	; (10990 <am_hal_gpio_pinconfig+0x240>)
   107f0:	682d      	ldr	r5, [r5, #0]
   107f2:	eba1 0805 	sub.w	r8, r1, r5
   107f6:	fab8 f888 	clz	r8, r8
   107fa:	ea4f 1858 	mov.w	r8, r8, lsr #5
   107fe:	f010 0f60 	tst.w	r0, #96	; 0x60
   10802:	bf04      	itt	eq
   10804:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
   10808:	f360 0200 	bfieq	r2, r0, #0, #1
   1080c:	00a0      	lsls	r0, r4, #2
   1080e:	f3c1 2101 	ubfx	r1, r1, #8, #2
   10812:	2902      	cmp	r1, #2
   10814:	d05c      	beq.n	108d0 <am_hal_gpio_pinconfig+0x180>
   10816:	2903      	cmp	r1, #3
   10818:	d058      	beq.n	108cc <am_hal_gpio_pinconfig+0x17c>
   1081a:	2901      	cmp	r1, #1
   1081c:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   10820:	bf08      	it	eq
   10822:	f043 0304 	orreq.w	r3, r3, #4
   10826:	f001 0118 	and.w	r1, r1, #24
   1082a:	2700      	movs	r7, #0
   1082c:	f000 001c 	and.w	r0, r0, #28
   10830:	fa02 f600 	lsl.w	r6, r2, r0
   10834:	220f      	movs	r2, #15
   10836:	4082      	lsls	r2, r0
   10838:	43d2      	mvns	r2, r2
   1083a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1083e:	fa03 f501 	lsl.w	r5, r3, r1
   10842:	fa09 f901 	lsl.w	r9, r9, r1
   10846:	9201      	str	r2, [sp, #4]
   10848:	f7fd ff10 	bl	e66c <am_hal_interrupt_master_disable>
   1084c:	f024 0a03 	bic.w	sl, r4, #3
   10850:	ea4f 0b54 	mov.w	fp, r4, lsr #1
   10854:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
   10858:	4b4e      	ldr	r3, [pc, #312]	; (10994 <am_hal_gpio_pinconfig+0x244>)
   1085a:	494f      	ldr	r1, [pc, #316]	; (10998 <am_hal_gpio_pinconfig+0x248>)
   1085c:	9a01      	ldr	r2, [sp, #4]
   1085e:	9003      	str	r0, [sp, #12]
   10860:	ea6f 0909 	mvn.w	r9, r9
   10864:	f02b 0b03 	bic.w	fp, fp, #3
   10868:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
   1086c:	f1b8 0f00 	cmp.w	r8, #0
   10870:	d00b      	beq.n	1088a <am_hal_gpio_pinconfig+0x13a>
   10872:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   10876:	f004 081f 	and.w	r8, r4, #31
   1087a:	4848      	ldr	r0, [pc, #288]	; (1099c <am_hal_gpio_pinconfig+0x24c>)
   1087c:	f00e 0e04 	and.w	lr, lr, #4
   10880:	2401      	movs	r4, #1
   10882:	fa04 f408 	lsl.w	r4, r4, r8
   10886:	f84e 4000 	str.w	r4, [lr, r0]
   1088a:	4845      	ldr	r0, [pc, #276]	; (109a0 <am_hal_gpio_pinconfig+0x250>)
   1088c:	2473      	movs	r4, #115	; 0x73
   1088e:	6604      	str	r4, [r0, #96]	; 0x60
   10890:	f8dc 4000 	ldr.w	r4, [ip]
   10894:	ea04 0409 	and.w	r4, r4, r9
   10898:	4325      	orrs	r5, r4
   1089a:	f8cc 5000 	str.w	r5, [ip]
   1089e:	f85b 4003 	ldr.w	r4, [fp, r3]
   108a2:	4022      	ands	r2, r4
   108a4:	4332      	orrs	r2, r6
   108a6:	f84b 2003 	str.w	r2, [fp, r3]
   108aa:	f85a 3001 	ldr.w	r3, [sl, r1]
   108ae:	ea03 0909 	and.w	r9, r3, r9
   108b2:	2400      	movs	r4, #0
   108b4:	ea49 0707 	orr.w	r7, r9, r7
   108b8:	f84a 7001 	str.w	r7, [sl, r1]
   108bc:	6604      	str	r4, [r0, #96]	; 0x60
   108be:	9803      	ldr	r0, [sp, #12]
   108c0:	f7fd fed8 	bl	e674 <am_hal_interrupt_master_set>
   108c4:	4620      	mov	r0, r4
   108c6:	b005      	add	sp, #20
   108c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108cc:	f043 0304 	orr.w	r3, r3, #4
   108d0:	00e1      	lsls	r1, r4, #3
   108d2:	f001 0118 	and.w	r1, r1, #24
   108d6:	2701      	movs	r7, #1
   108d8:	408f      	lsls	r7, r1
   108da:	e7a7      	b.n	1082c <am_hal_gpio_pinconfig+0xdc>
   108dc:	2006      	movs	r0, #6
   108de:	4770      	bx	lr
   108e0:	4d28      	ldr	r5, [pc, #160]	; (10984 <am_hal_gpio_pinconfig+0x234>)
   108e2:	5d2d      	ldrb	r5, [r5, r4]
   108e4:	3e02      	subs	r6, #2
   108e6:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   108ea:	07ee      	lsls	r6, r5, #31
   108ec:	d536      	bpl.n	1095c <am_hal_gpio_pinconfig+0x20c>
   108ee:	2b00      	cmp	r3, #0
   108f0:	f43f af5c 	beq.w	107ac <am_hal_gpio_pinconfig+0x5c>
   108f4:	e74d      	b.n	10792 <am_hal_gpio_pinconfig+0x42>
   108f6:	f3c1 4202 	ubfx	r2, r1, #16, #3
   108fa:	2a07      	cmp	r2, #7
   108fc:	d030      	beq.n	10960 <am_hal_gpio_pinconfig+0x210>
   108fe:	4d29      	ldr	r5, [pc, #164]	; (109a4 <am_hal_gpio_pinconfig+0x254>)
   10900:	f3c1 40c1 	ubfx	r0, r1, #19, #2
   10904:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   10908:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
   1090c:	4290      	cmp	r0, r2
   1090e:	d029      	beq.n	10964 <am_hal_gpio_pinconfig+0x214>
   10910:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   10914:	00a0      	lsls	r0, r4, #2
   10916:	786e      	ldrb	r6, [r5, #1]
   10918:	4296      	cmp	r6, r2
   1091a:	d02d      	beq.n	10978 <am_hal_gpio_pinconfig+0x228>
   1091c:	78ae      	ldrb	r6, [r5, #2]
   1091e:	4296      	cmp	r6, r2
   10920:	d02c      	beq.n	1097c <am_hal_gpio_pinconfig+0x22c>
   10922:	78ed      	ldrb	r5, [r5, #3]
   10924:	4295      	cmp	r5, r2
   10926:	d02b      	beq.n	10980 <am_hal_gpio_pinconfig+0x230>
   10928:	481f      	ldr	r0, [pc, #124]	; (109a8 <am_hal_gpio_pinconfig+0x258>)
   1092a:	b005      	add	sp, #20
   1092c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10930:	481e      	ldr	r0, [pc, #120]	; (109ac <am_hal_gpio_pinconfig+0x25c>)
   10932:	b005      	add	sp, #20
   10934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10938:	f04f 0801 	mov.w	r8, #1
   1093c:	e75f      	b.n	107fe <am_hal_gpio_pinconfig+0xae>
   1093e:	4b11      	ldr	r3, [pc, #68]	; (10984 <am_hal_gpio_pinconfig+0x234>)
   10940:	5d1b      	ldrb	r3, [r3, r4]
   10942:	079d      	lsls	r5, r3, #30
   10944:	d5f4      	bpl.n	10930 <am_hal_gpio_pinconfig+0x1e0>
   10946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1094a:	e72f      	b.n	107ac <am_hal_gpio_pinconfig+0x5c>
   1094c:	2c14      	cmp	r4, #20
   1094e:	f43f af1f 	beq.w	10790 <am_hal_gpio_pinconfig+0x40>
   10952:	4817      	ldr	r0, [pc, #92]	; (109b0 <am_hal_gpio_pinconfig+0x260>)
   10954:	e7b7      	b.n	108c6 <am_hal_gpio_pinconfig+0x176>
   10956:	2c14      	cmp	r4, #20
   10958:	f47f af1a 	bne.w	10790 <am_hal_gpio_pinconfig+0x40>
   1095c:	4815      	ldr	r0, [pc, #84]	; (109b4 <am_hal_gpio_pinconfig+0x264>)
   1095e:	e7b2      	b.n	108c6 <am_hal_gpio_pinconfig+0x176>
   10960:	4815      	ldr	r0, [pc, #84]	; (109b8 <am_hal_gpio_pinconfig+0x268>)
   10962:	e7b0      	b.n	108c6 <am_hal_gpio_pinconfig+0x176>
   10964:	2200      	movs	r2, #0
   10966:	00a0      	lsls	r0, r4, #2
   10968:	0052      	lsls	r2, r2, #1
   1096a:	f3c1 5540 	ubfx	r5, r1, #21, #1
   1096e:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
   10972:	f04f 0800 	mov.w	r8, #0
   10976:	e74a      	b.n	1080e <am_hal_gpio_pinconfig+0xbe>
   10978:	2201      	movs	r2, #1
   1097a:	e7f5      	b.n	10968 <am_hal_gpio_pinconfig+0x218>
   1097c:	2202      	movs	r2, #2
   1097e:	e7f3      	b.n	10968 <am_hal_gpio_pinconfig+0x218>
   10980:	2203      	movs	r2, #3
   10982:	e7f1      	b.n	10968 <am_hal_gpio_pinconfig+0x218>
   10984:	00011568 	.word	0x00011568
   10988:	0001159c 	.word	0x0001159c
   1098c:	00011698 	.word	0x00011698
   10990:	00011560 	.word	0x00011560
   10994:	40010040 	.word	0x40010040
   10998:	400100e0 	.word	0x400100e0
   1099c:	400100b4 	.word	0x400100b4
   109a0:	40010000 	.word	0x40010000
   109a4:	000115d0 	.word	0x000115d0
   109a8:	08000104 	.word	0x08000104
   109ac:	08000102 	.word	0x08000102
   109b0:	08000101 	.word	0x08000101
   109b4:	08000100 	.word	0x08000100
   109b8:	08000103 	.word	0x08000103

000109bc <am_hal_gpio_state_write>:
   109bc:	2831      	cmp	r0, #49	; 0x31
   109be:	d81a      	bhi.n	109f6 <am_hal_gpio_state_write+0x3a>
   109c0:	b570      	push	{r4, r5, r6, lr}
   109c2:	2905      	cmp	r1, #5
   109c4:	b082      	sub	sp, #8
   109c6:	460d      	mov	r5, r1
   109c8:	d812      	bhi.n	109f0 <am_hal_gpio_state_write+0x34>
   109ca:	f000 031f 	and.w	r3, r0, #31
   109ce:	2201      	movs	r2, #1
   109d0:	08c0      	lsrs	r0, r0, #3
   109d2:	fa02 f603 	lsl.w	r6, r2, r3
   109d6:	f000 0404 	and.w	r4, r0, #4
   109da:	f7fd fe47 	bl	e66c <am_hal_interrupt_master_disable>
   109de:	3d01      	subs	r5, #1
   109e0:	9001      	str	r0, [sp, #4]
   109e2:	2d04      	cmp	r5, #4
   109e4:	d821      	bhi.n	10a2a <am_hal_gpio_state_write+0x6e>
   109e6:	e8df f005 	tbb	[pc, r5]
   109ea:	1512      	.short	0x1512
   109ec:	1d1a      	.short	0x1d1a
   109ee:	08          	.byte	0x08
   109ef:	00          	.byte	0x00
   109f0:	2006      	movs	r0, #6
   109f2:	b002      	add	sp, #8
   109f4:	bd70      	pop	{r4, r5, r6, pc}
   109f6:	2005      	movs	r0, #5
   109f8:	4770      	bx	lr
   109fa:	4a0d      	ldr	r2, [pc, #52]	; (10a30 <am_hal_gpio_state_write+0x74>)
   109fc:	58a3      	ldr	r3, [r4, r2]
   109fe:	4073      	eors	r3, r6
   10a00:	50a3      	str	r3, [r4, r2]
   10a02:	9801      	ldr	r0, [sp, #4]
   10a04:	f7fd fe36 	bl	e674 <am_hal_interrupt_master_set>
   10a08:	2000      	movs	r0, #0
   10a0a:	b002      	add	sp, #8
   10a0c:	bd70      	pop	{r4, r5, r6, pc}
   10a0e:	4b09      	ldr	r3, [pc, #36]	; (10a34 <am_hal_gpio_state_write+0x78>)
   10a10:	50e6      	str	r6, [r4, r3]
   10a12:	e7f6      	b.n	10a02 <am_hal_gpio_state_write+0x46>
   10a14:	4a08      	ldr	r2, [pc, #32]	; (10a38 <am_hal_gpio_state_write+0x7c>)
   10a16:	58a3      	ldr	r3, [r4, r2]
   10a18:	4073      	eors	r3, r6
   10a1a:	50a3      	str	r3, [r4, r2]
   10a1c:	e7f1      	b.n	10a02 <am_hal_gpio_state_write+0x46>
   10a1e:	4b04      	ldr	r3, [pc, #16]	; (10a30 <am_hal_gpio_state_write+0x74>)
   10a20:	50e6      	str	r6, [r4, r3]
   10a22:	e7ee      	b.n	10a02 <am_hal_gpio_state_write+0x46>
   10a24:	4b05      	ldr	r3, [pc, #20]	; (10a3c <am_hal_gpio_state_write+0x80>)
   10a26:	50e6      	str	r6, [r4, r3]
   10a28:	e7eb      	b.n	10a02 <am_hal_gpio_state_write+0x46>
   10a2a:	4b05      	ldr	r3, [pc, #20]	; (10a40 <am_hal_gpio_state_write+0x84>)
   10a2c:	50e6      	str	r6, [r4, r3]
   10a2e:	e7e8      	b.n	10a02 <am_hal_gpio_state_write+0x46>
   10a30:	400100b4 	.word	0x400100b4
   10a34:	40010090 	.word	0x40010090
   10a38:	40010088 	.word	0x40010088
   10a3c:	400100a8 	.word	0x400100a8
   10a40:	40010098 	.word	0x40010098

00010a44 <am_hal_itm_enable>:
   10a44:	4a0e      	ldr	r2, [pc, #56]	; (10a80 <am_hal_itm_enable+0x3c>)
   10a46:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   10a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   10a4e:	b410      	push	{r4}
   10a50:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
   10a54:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   10a58:	01db      	lsls	r3, r3, #7
   10a5a:	d5fb      	bpl.n	10a54 <am_hal_itm_enable+0x10>
   10a5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   10a60:	4c08      	ldr	r4, [pc, #32]	; (10a84 <am_hal_itm_enable+0x40>)
   10a62:	4a09      	ldr	r2, [pc, #36]	; (10a88 <am_hal_itm_enable+0x44>)
   10a64:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
   10a68:	200f      	movs	r0, #15
   10a6a:	f04f 31ff 	mov.w	r1, #4294967295
   10a6e:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   10a72:	f85d 4b04 	ldr.w	r4, [sp], #4
   10a76:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   10a7a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   10a7e:	4770      	bx	lr
   10a80:	e000ed00 	.word	0xe000ed00
   10a84:	c5acce55 	.word	0xc5acce55
   10a88:	00150511 	.word	0x00150511

00010a8c <am_hal_itm_print>:
   10a8c:	7803      	ldrb	r3, [r0, #0]
   10a8e:	b1a3      	cbz	r3, 10aba <am_hal_itm_print+0x2e>
   10a90:	4603      	mov	r3, r0
   10a92:	f1c0 0c01 	rsb	ip, r0, #1
   10a96:	eb0c 0103 	add.w	r1, ip, r3
   10a9a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10a9e:	2a00      	cmp	r2, #0
   10aa0:	d1f9      	bne.n	10a96 <am_hal_itm_print+0xa>
   10aa2:	4401      	add	r1, r0
   10aa4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   10aa8:	f810 cb01 	ldrb.w	ip, [r0], #1
   10aac:	6813      	ldr	r3, [r2, #0]
   10aae:	2b00      	cmp	r3, #0
   10ab0:	d0fc      	beq.n	10aac <am_hal_itm_print+0x20>
   10ab2:	4288      	cmp	r0, r1
   10ab4:	f882 c000 	strb.w	ip, [r2]
   10ab8:	d1f6      	bne.n	10aa8 <am_hal_itm_print+0x1c>
   10aba:	4770      	bx	lr

00010abc <am_hal_rtc_osc_disable>:
   10abc:	4a03      	ldr	r2, [pc, #12]	; (10acc <am_hal_rtc_osc_disable+0x10>)
   10abe:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   10ac2:	f043 0310 	orr.w	r3, r3, #16
   10ac6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   10aca:	4770      	bx	lr
   10acc:	40004200 	.word	0x40004200

00010ad0 <am_hal_tpiu_enable>:
   10ad0:	b510      	push	{r4, lr}
   10ad2:	4b23      	ldr	r3, [pc, #140]	; (10b60 <am_hal_tpiu_enable+0x90>)
   10ad4:	6804      	ldr	r4, [r0, #0]
   10ad6:	2200      	movs	r2, #0
   10ad8:	b084      	sub	sp, #16
   10ada:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   10ade:	b334      	cbz	r4, 10b2e <am_hal_tpiu_enable+0x5e>
   10ae0:	4a20      	ldr	r2, [pc, #128]	; (10b64 <am_hal_tpiu_enable+0x94>)
   10ae2:	4921      	ldr	r1, [pc, #132]	; (10b68 <am_hal_tpiu_enable+0x98>)
   10ae4:	2001      	movs	r0, #1
   10ae6:	6058      	str	r0, [r3, #4]
   10ae8:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
   10aec:	a801      	add	r0, sp, #4
   10aee:	428b      	cmp	r3, r1
   10af0:	bf88      	it	hi
   10af2:	4614      	movhi	r4, r2
   10af4:	f7fd fd48 	bl	e588 <am_hal_clkgen_status_get>
   10af8:	9b01      	ldr	r3, [sp, #4]
   10afa:	1c5a      	adds	r2, r3, #1
   10afc:	d02d      	beq.n	10b5a <am_hal_tpiu_enable+0x8a>
   10afe:	08db      	lsrs	r3, r3, #3
   10b00:	fbb3 f4f4 	udiv	r4, r3, r4
   10b04:	3c01      	subs	r4, #1
   10b06:	b2a4      	uxth	r4, r4
   10b08:	4b15      	ldr	r3, [pc, #84]	; (10b60 <am_hal_tpiu_enable+0x90>)
   10b0a:	4a18      	ldr	r2, [pc, #96]	; (10b6c <am_hal_tpiu_enable+0x9c>)
   10b0c:	611c      	str	r4, [r3, #16]
   10b0e:	2102      	movs	r1, #2
   10b10:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
   10b14:	2000      	movs	r0, #0
   10b16:	f240 2101 	movw	r1, #513	; 0x201
   10b1a:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
   10b1e:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
   10b22:	f44f 7048 	mov.w	r0, #800	; 0x320
   10b26:	f7fd fd4d 	bl	e5c4 <am_hal_flash_delay>
   10b2a:	b004      	add	sp, #16
   10b2c:	bd10      	pop	{r4, pc}
   10b2e:	6902      	ldr	r2, [r0, #16]
   10b30:	611a      	str	r2, [r3, #16]
   10b32:	6882      	ldr	r2, [r0, #8]
   10b34:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   10b38:	68c1      	ldr	r1, [r0, #12]
   10b3a:	2201      	movs	r2, #1
   10b3c:	3901      	subs	r1, #1
   10b3e:	408a      	lsls	r2, r1
   10b40:	605a      	str	r2, [r3, #4]
   10b42:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
   10b46:	4a09      	ldr	r2, [pc, #36]	; (10b6c <am_hal_tpiu_enable+0x9c>)
   10b48:	6843      	ldr	r3, [r0, #4]
   10b4a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   10b4e:	f44f 7048 	mov.w	r0, #800	; 0x320
   10b52:	f7fd fd37 	bl	e5c4 <am_hal_flash_delay>
   10b56:	b004      	add	sp, #16
   10b58:	bd10      	pop	{r4, pc}
   10b5a:	2405      	movs	r4, #5
   10b5c:	e7d4      	b.n	10b08 <am_hal_tpiu_enable+0x38>
   10b5e:	bf00      	nop
   10b60:	e0040000 	.word	0xe0040000
   10b64:	000f4240 	.word	0x000f4240
   10b68:	001da380 	.word	0x001da380
   10b6c:	40020000 	.word	0x40020000
   10b70:	6c6f7041 	.word	0x6c6f7041
   10b74:	70336f6c 	.word	0x70336f6c
   10b78:	74634f20 	.word	0x74634f20
   10b7c:	4d206c61 	.word	0x4d206c61
   10b80:	20495053 	.word	0x20495053
   10b84:	6d617845 	.word	0x6d617845
   10b88:	0a656c70 	.word	0x0a656c70
   10b8c:	0000000a 	.word	0x0000000a
   10b90:	6c696146 	.word	0x6c696146
   10b94:	74206465 	.word	0x74206465
   10b98:	6f63206f 	.word	0x6f63206f
   10b9c:	6769666e 	.word	0x6769666e
   10ba0:	20657275 	.word	0x20657275
   10ba4:	20656874 	.word	0x20656874
   10ba8:	4950534d 	.word	0x4950534d
   10bac:	646e6120 	.word	0x646e6120
   10bb0:	616c4620 	.word	0x616c4620
   10bb4:	44206873 	.word	0x44206873
   10bb8:	63697665 	.word	0x63697665
   10bbc:	6f632065 	.word	0x6f632065
   10bc0:	63657272 	.word	0x63657272
   10bc4:	21796c74 	.word	0x21796c74
   10bc8:	0000000a 	.word	0x0000000a
   10bcc:	73617245 	.word	0x73617245
   10bd0:	20676e69 	.word	0x20676e69
   10bd4:	74636553 	.word	0x74636553
   10bd8:	2520726f 	.word	0x2520726f
   10bdc:	00000a64 	.word	0x00000a64
   10be0:	6c696146 	.word	0x6c696146
   10be4:	74206465 	.word	0x74206465
   10be8:	7265206f 	.word	0x7265206f
   10bec:	20657361 	.word	0x20657361
   10bf0:	73616c46 	.word	0x73616c46
   10bf4:	65442068 	.word	0x65442068
   10bf8:	65636976 	.word	0x65636976
   10bfc:	63657320 	.word	0x63657320
   10c00:	21726f74 	.word	0x21726f74
   10c04:	0000000a 	.word	0x0000000a
   10c08:	6c696146 	.word	0x6c696146
   10c0c:	74206465 	.word	0x74206465
   10c10:	6964206f 	.word	0x6964206f
   10c14:	6c626173 	.word	0x6c626173
   10c18:	49582065 	.word	0x49582065
   10c1c:	6f6d2050 	.word	0x6f6d2050
   10c20:	69206564 	.word	0x69206564
   10c24:	6874206e 	.word	0x6874206e
   10c28:	534d2065 	.word	0x534d2065
   10c2c:	0a214950 	.word	0x0a214950
   10c30:	00000000 	.word	0x00000000
   10c34:	74697257 	.word	0x74697257
   10c38:	20676e69 	.word	0x20676e69
   10c3c:	42206425 	.word	0x42206425
   10c40:	73657479 	.word	0x73657479
   10c44:	206f7420 	.word	0x206f7420
   10c48:	74636553 	.word	0x74636553
   10c4c:	2520726f 	.word	0x2520726f
   10c50:	00000a64 	.word	0x00000a64
   10c54:	6c696146 	.word	0x6c696146
   10c58:	74206465 	.word	0x74206465
   10c5c:	7277206f 	.word	0x7277206f
   10c60:	20657469 	.word	0x20657469
   10c64:	66667562 	.word	0x66667562
   10c68:	74207265 	.word	0x74207265
   10c6c:	6c46206f 	.word	0x6c46206f
   10c70:	20687361 	.word	0x20687361
   10c74:	69766544 	.word	0x69766544
   10c78:	0a216563 	.word	0x0a216563
   10c7c:	00000000 	.word	0x00000000
   10c80:	64616552 	.word	0x64616552
   10c84:	20642520 	.word	0x20642520
   10c88:	65747942 	.word	0x65747942
   10c8c:	72662073 	.word	0x72662073
   10c90:	53206d6f 	.word	0x53206d6f
   10c94:	6f746365 	.word	0x6f746365
   10c98:	64252072 	.word	0x64252072
   10c9c:	0000000a 	.word	0x0000000a
   10ca0:	6c696146 	.word	0x6c696146
   10ca4:	74206465 	.word	0x74206465
   10ca8:	6572206f 	.word	0x6572206f
   10cac:	62206461 	.word	0x62206461
   10cb0:	65666675 	.word	0x65666675
   10cb4:	6f742072 	.word	0x6f742072
   10cb8:	616c4620 	.word	0x616c4620
   10cbc:	44206873 	.word	0x44206873
   10cc0:	63697665 	.word	0x63697665
   10cc4:	000a2165 	.word	0x000a2165
   10cc8:	706d6f43 	.word	0x706d6f43
   10ccc:	6e697261 	.word	0x6e697261
   10cd0:	68742067 	.word	0x68742067
   10cd4:	58542065 	.word	0x58542065
   10cd8:	646e6120 	.word	0x646e6120
   10cdc:	20585220 	.word	0x20585220
   10ce0:	66667542 	.word	0x66667542
   10ce4:	0a737265 	.word	0x0a737265
   10ce8:	00000000 	.word	0x00000000
   10cec:	61205854 	.word	0x61205854
   10cf0:	5220646e 	.word	0x5220646e
   10cf4:	75622058 	.word	0x75622058
   10cf8:	72656666 	.word	0x72656666
   10cfc:	61662073 	.word	0x61662073
   10d00:	64656c69 	.word	0x64656c69
   10d04:	206f7420 	.word	0x206f7420
   10d08:	706d6f63 	.word	0x706d6f63
   10d0c:	21657261 	.word	0x21657261
   10d10:	0000000a 	.word	0x0000000a
   10d14:	74747550 	.word	0x74747550
   10d18:	20676e69 	.word	0x20676e69
   10d1c:	20656874 	.word	0x20656874
   10d20:	4950534d 	.word	0x4950534d
   10d24:	746e6920 	.word	0x746e6920
   10d28:	6353206f 	.word	0x6353206f
   10d2c:	626d6172 	.word	0x626d6172
   10d30:	676e696c 	.word	0x676e696c
   10d34:	646f6d20 	.word	0x646f6d20
   10d38:	00000a65 	.word	0x00000a65
   10d3c:	6c696146 	.word	0x6c696146
   10d40:	74206465 	.word	0x74206465
   10d44:	6e65206f 	.word	0x6e65206f
   10d48:	656c6261 	.word	0x656c6261
   10d4c:	50534d20 	.word	0x50534d20
   10d50:	63732049 	.word	0x63732049
   10d54:	626d6172 	.word	0x626d6172
   10d58:	676e696c 	.word	0x676e696c
   10d5c:	00000a21 	.word	0x00000a21
   10d60:	74697257 	.word	0x74697257
   10d64:	20676e69 	.word	0x20676e69
   10d68:	63657845 	.word	0x63657845
   10d6c:	62617475 	.word	0x62617475
   10d70:	6620656c 	.word	0x6620656c
   10d74:	74636e75 	.word	0x74636e75
   10d78:	206e6f69 	.word	0x206e6f69
   10d7c:	2520666f 	.word	0x2520666f
   10d80:	79422064 	.word	0x79422064
   10d84:	20736574 	.word	0x20736574
   10d88:	53206f74 	.word	0x53206f74
   10d8c:	6f746365 	.word	0x6f746365
   10d90:	64252072 	.word	0x64252072
   10d94:	0000000a 	.word	0x0000000a
   10d98:	6c696146 	.word	0x6c696146
   10d9c:	74206465 	.word	0x74206465
   10da0:	7277206f 	.word	0x7277206f
   10da4:	20657469 	.word	0x20657469
   10da8:	63657865 	.word	0x63657865
   10dac:	62617475 	.word	0x62617475
   10db0:	6620656c 	.word	0x6620656c
   10db4:	74636e75 	.word	0x74636e75
   10db8:	206e6f69 	.word	0x206e6f69
   10dbc:	46206f74 	.word	0x46206f74
   10dc0:	6873616c 	.word	0x6873616c
   10dc4:	76654420 	.word	0x76654420
   10dc8:	21656369 	.word	0x21656369
   10dcc:	0000000a 	.word	0x0000000a
   10dd0:	74747550 	.word	0x74747550
   10dd4:	20676e69 	.word	0x20676e69
   10dd8:	20656874 	.word	0x20656874
   10ddc:	4950534d 	.word	0x4950534d
   10de0:	646e6120 	.word	0x646e6120
   10de4:	74784520 	.word	0x74784520
   10de8:	616e7265 	.word	0x616e7265
   10dec:	6c46206c 	.word	0x6c46206c
   10df0:	20687361 	.word	0x20687361
   10df4:	6f746e69 	.word	0x6f746e69
   10df8:	50495820 	.word	0x50495820
   10dfc:	646f6d20 	.word	0x646f6d20
   10e00:	00000a65 	.word	0x00000a65
   10e04:	6c696146 	.word	0x6c696146
   10e08:	74206465 	.word	0x74206465
   10e0c:	7570206f 	.word	0x7570206f
   10e10:	68742074 	.word	0x68742074
   10e14:	534d2065 	.word	0x534d2065
   10e18:	69204950 	.word	0x69204950
   10e1c:	206f746e 	.word	0x206f746e
   10e20:	20504958 	.word	0x20504958
   10e24:	65646f6d 	.word	0x65646f6d
   10e28:	00000a21 	.word	0x00000a21
   10e2c:	706d754a 	.word	0x706d754a
   10e30:	20676e69 	.word	0x20676e69
   10e34:	66206f74 	.word	0x66206f74
   10e38:	74636e75 	.word	0x74636e75
   10e3c:	206e6f69 	.word	0x206e6f69
   10e40:	45206e69 	.word	0x45206e69
   10e44:	72657478 	.word	0x72657478
   10e48:	206c616e 	.word	0x206c616e
   10e4c:	73616c46 	.word	0x73616c46
   10e50:	00000a68 	.word	0x00000a68
   10e54:	75746552 	.word	0x75746552
   10e58:	64656e72 	.word	0x64656e72
   10e5c:	6f726620 	.word	0x6f726620
   10e60:	4958206d 	.word	0x4958206d
   10e64:	61632050 	.word	0x61632050
   10e68:	000a6c6c 	.word	0x000a6c6c
   10e6c:	61736944 	.word	0x61736944
   10e70:	6e696c62 	.word	0x6e696c62
   10e74:	68742067 	.word	0x68742067
   10e78:	534d2065 	.word	0x534d2065
   10e7c:	61204950 	.word	0x61204950
   10e80:	4520646e 	.word	0x4520646e
   10e84:	72657478 	.word	0x72657478
   10e88:	206c616e 	.word	0x206c616e
   10e8c:	73616c46 	.word	0x73616c46
   10e90:	72662068 	.word	0x72662068
   10e94:	58206d6f 	.word	0x58206d6f
   10e98:	6d205049 	.word	0x6d205049
   10e9c:	0a65646f 	.word	0x0a65646f
   10ea0:	00000000 	.word	0x00000000
   10ea4:	6c696146 	.word	0x6c696146
   10ea8:	74206465 	.word	0x74206465
   10eac:	6873206f 	.word	0x6873206f
   10eb0:	6f647475 	.word	0x6f647475
   10eb4:	74206e77 	.word	0x74206e77
   10eb8:	4d206568 	.word	0x4d206568
   10ebc:	20495053 	.word	0x20495053
   10ec0:	20646e61 	.word	0x20646e61
   10ec4:	73616c46 	.word	0x73616c46
   10ec8:	65442068 	.word	0x65442068
   10ecc:	65636976 	.word	0x65636976
   10ed0:	00000a21 	.word	0x00000a21
   10ed4:	6c6f7041 	.word	0x6c6f7041
   10ed8:	70336f6c 	.word	0x70336f6c
   10edc:	50534d20 	.word	0x50534d20
   10ee0:	78452049 	.word	0x78452049
   10ee4:	6c706d61 	.word	0x6c706d61
   10ee8:	6f432065 	.word	0x6f432065
   10eec:	656c706d 	.word	0x656c706d
   10ef0:	000a6574 	.word	0x000a6574
   10ef4:	64726148 	.word	0x64726148
   10ef8:	75614620 	.word	0x75614620
   10efc:	7320746c 	.word	0x7320746c
   10f00:	6b636174 	.word	0x6b636174
   10f04:	64206465 	.word	0x64206465
   10f08:	3a617461 	.word	0x3a617461
   10f0c:	0000000a 	.word	0x0000000a
   10f10:	20202020 	.word	0x20202020
   10f14:	20203052 	.word	0x20203052
   10f18:	7830203d 	.word	0x7830203d
   10f1c:	58383025 	.word	0x58383025
   10f20:	0000000a 	.word	0x0000000a
   10f24:	20202020 	.word	0x20202020
   10f28:	20203152 	.word	0x20203152
   10f2c:	7830203d 	.word	0x7830203d
   10f30:	58383025 	.word	0x58383025
   10f34:	0000000a 	.word	0x0000000a
   10f38:	20202020 	.word	0x20202020
   10f3c:	20203252 	.word	0x20203252
   10f40:	7830203d 	.word	0x7830203d
   10f44:	58383025 	.word	0x58383025
   10f48:	0000000a 	.word	0x0000000a
   10f4c:	20202020 	.word	0x20202020
   10f50:	20203352 	.word	0x20203352
   10f54:	7830203d 	.word	0x7830203d
   10f58:	58383025 	.word	0x58383025
   10f5c:	0000000a 	.word	0x0000000a
   10f60:	20202020 	.word	0x20202020
   10f64:	20323152 	.word	0x20323152
   10f68:	7830203d 	.word	0x7830203d
   10f6c:	58383025 	.word	0x58383025
   10f70:	0000000a 	.word	0x0000000a
   10f74:	20202020 	.word	0x20202020
   10f78:	2020524c 	.word	0x2020524c
   10f7c:	7830203d 	.word	0x7830203d
   10f80:	58383025 	.word	0x58383025
   10f84:	0000000a 	.word	0x0000000a
   10f88:	20202020 	.word	0x20202020
   10f8c:	20204350 	.word	0x20204350
   10f90:	7830203d 	.word	0x7830203d
   10f94:	58383025 	.word	0x58383025
   10f98:	0000000a 	.word	0x0000000a
   10f9c:	20202020 	.word	0x20202020
   10fa0:	20525350 	.word	0x20525350
   10fa4:	7830203d 	.word	0x7830203d
   10fa8:	58383025 	.word	0x58383025
   10fac:	0000000a 	.word	0x0000000a
   10fb0:	6568744f 	.word	0x6568744f
   10fb4:	61482072 	.word	0x61482072
   10fb8:	46206472 	.word	0x46206472
   10fbc:	746c7561 	.word	0x746c7561
   10fc0:	74616420 	.word	0x74616420
   10fc4:	000a3a61 	.word	0x000a3a61
   10fc8:	20202020 	.word	0x20202020
   10fcc:	6c756146 	.word	0x6c756146
   10fd0:	64612074 	.word	0x64612074
   10fd4:	73657264 	.word	0x73657264
   10fd8:	203d2073 	.word	0x203d2073
   10fdc:	30257830 	.word	0x30257830
   10fe0:	000a5838 	.word	0x000a5838
   10fe4:	20202020 	.word	0x20202020
   10fe8:	52414642 	.word	0x52414642
   10fec:	75422820 	.word	0x75422820
   10ff0:	61462073 	.word	0x61462073
   10ff4:	20746c75 	.word	0x20746c75
   10ff8:	72646441 	.word	0x72646441
   10ffc:	67655220 	.word	0x67655220
   11000:	203d2029 	.word	0x203d2029
   11004:	30257830 	.word	0x30257830
   11008:	000a5838 	.word	0x000a5838
   1100c:	20202020 	.word	0x20202020
   11010:	52534d4d 	.word	0x52534d4d
   11014:	654d2820 	.word	0x654d2820
   11018:	674d206d 	.word	0x674d206d
   1101c:	4620746d 	.word	0x4620746d
   11020:	746c7561 	.word	0x746c7561
   11024:	61745320 	.word	0x61745320
   11028:	20737574 	.word	0x20737574
   1102c:	29676552 	.word	0x29676552
   11030:	30203d20 	.word	0x30203d20
   11034:	32302578 	.word	0x32302578
   11038:	00000a58 	.word	0x00000a58
   1103c:	20202020 	.word	0x20202020
   11040:	52534642 	.word	0x52534642
   11044:	75422820 	.word	0x75422820
   11048:	61462073 	.word	0x61462073
   1104c:	20746c75 	.word	0x20746c75
   11050:	74617453 	.word	0x74617453
   11054:	52207375 	.word	0x52207375
   11058:	20296765 	.word	0x20296765
   1105c:	7830203d 	.word	0x7830203d
   11060:	58323025 	.word	0x58323025
   11064:	0000000a 	.word	0x0000000a
   11068:	20202020 	.word	0x20202020
   1106c:	52534655 	.word	0x52534655
   11070:	73552820 	.word	0x73552820
   11074:	20656761 	.word	0x20656761
   11078:	6c756146 	.word	0x6c756146
   1107c:	74532074 	.word	0x74532074
   11080:	73757461 	.word	0x73757461
   11084:	67655220 	.word	0x67655220
   11088:	203d2029 	.word	0x203d2029
   1108c:	30257830 	.word	0x30257830
   11090:	000a5834 	.word	0x000a5834
   11094:	20202020 	.word	0x20202020
   11098:	20202020 	.word	0x20202020
   1109c:	52534642 	.word	0x52534642
   110a0:	74696220 	.word	0x74696220
   110a4:	42203a37 	.word	0x42203a37
   110a8:	56524146 	.word	0x56524146
   110ac:	44494c41 	.word	0x44494c41
   110b0:	0000000a 	.word	0x0000000a
   110b4:	20202020 	.word	0x20202020
   110b8:	20202020 	.word	0x20202020
   110bc:	52534642 	.word	0x52534642
   110c0:	74696220 	.word	0x74696220
   110c4:	52203a36 	.word	0x52203a36
   110c8:	52455345 	.word	0x52455345
   110cc:	0a444556 	.word	0x0a444556
   110d0:	00000000 	.word	0x00000000
   110d4:	20202020 	.word	0x20202020
   110d8:	20202020 	.word	0x20202020
   110dc:	52534642 	.word	0x52534642
   110e0:	74696220 	.word	0x74696220
   110e4:	4c203a35 	.word	0x4c203a35
   110e8:	52455053 	.word	0x52455053
   110ec:	00000a52 	.word	0x00000a52
   110f0:	20202020 	.word	0x20202020
   110f4:	20202020 	.word	0x20202020
   110f8:	52534642 	.word	0x52534642
   110fc:	74696220 	.word	0x74696220
   11100:	53203a34 	.word	0x53203a34
   11104:	52454b54 	.word	0x52454b54
   11108:	00000a52 	.word	0x00000a52
   1110c:	20202020 	.word	0x20202020
   11110:	20202020 	.word	0x20202020
   11114:	52534642 	.word	0x52534642
   11118:	74696220 	.word	0x74696220
   1111c:	55203a33 	.word	0x55203a33
   11120:	4b54534e 	.word	0x4b54534e
   11124:	0a525245 	.word	0x0a525245
   11128:	00000000 	.word	0x00000000
   1112c:	20202020 	.word	0x20202020
   11130:	20202020 	.word	0x20202020
   11134:	52534642 	.word	0x52534642
   11138:	74696220 	.word	0x74696220
   1113c:	49203a32 	.word	0x49203a32
   11140:	4552504d 	.word	0x4552504d
   11144:	45534943 	.word	0x45534943
   11148:	000a5252 	.word	0x000a5252
   1114c:	20202020 	.word	0x20202020
   11150:	20202020 	.word	0x20202020
   11154:	52534642 	.word	0x52534642
   11158:	74696220 	.word	0x74696220
   1115c:	50203a31 	.word	0x50203a31
   11160:	49434552 	.word	0x49434552
   11164:	52454553 	.word	0x52454553
   11168:	00000a52 	.word	0x00000a52
   1116c:	20202020 	.word	0x20202020
   11170:	20202020 	.word	0x20202020
   11174:	52534642 	.word	0x52534642
   11178:	74696220 	.word	0x74696220
   1117c:	49203a30 	.word	0x49203a30
   11180:	45535542 	.word	0x45535542
   11184:	000a5252 	.word	0x000a5252
   11188:	2055434d 	.word	0x2055434d
   1118c:	6c756146 	.word	0x6c756146
   11190:	61642074 	.word	0x61642074
   11194:	0a3a6174 	.word	0x0a3a6174
   11198:	00000000 	.word	0x00000000
   1119c:	49202020 	.word	0x49202020
   111a0:	45444f43 	.word	0x45444f43
   111a4:	75614620 	.word	0x75614620
   111a8:	4120746c 	.word	0x4120746c
   111ac:	65726464 	.word	0x65726464
   111b0:	203a7373 	.word	0x203a7373
   111b4:	30257830 	.word	0x30257830
   111b8:	000a5838 	.word	0x000a5838
   111bc:	44202020 	.word	0x44202020
   111c0:	45444f43 	.word	0x45444f43
   111c4:	75614620 	.word	0x75614620
   111c8:	4120746c 	.word	0x4120746c
   111cc:	65726464 	.word	0x65726464
   111d0:	203a7373 	.word	0x203a7373
   111d4:	30257830 	.word	0x30257830
   111d8:	000a5838 	.word	0x000a5838
   111dc:	53202020 	.word	0x53202020
   111e0:	46205359 	.word	0x46205359
   111e4:	746c7561 	.word	0x746c7561
   111e8:	64644120 	.word	0x64644120
   111ec:	73736572 	.word	0x73736572
   111f0:	7830203a 	.word	0x7830203a
   111f4:	58383025 	.word	0x58383025
   111f8:	0000000a 	.word	0x0000000a
   111fc:	0a0a0a0a 	.word	0x0a0a0a0a
   11200:	0a0a0a0a 	.word	0x0a0a0a0a
   11204:	0a0a0a0a 	.word	0x0a0a0a0a
   11208:	0a0a0a0a 	.word	0x0a0a0a0a
   1120c:	00000a0a 	.word	0x00000a0a
   11210:	6f727245 	.word	0x6f727245
   11214:	202d2072 	.word	0x202d2072
   11218:	6c696146 	.word	0x6c696146
   1121c:	74206465 	.word	0x74206465
   11220:	6e69206f 	.word	0x6e69206f
   11224:	61697469 	.word	0x61697469
   11228:	657a696c 	.word	0x657a696c
   1122c:	50534d20 	.word	0x50534d20
   11230:	000a2e49 	.word	0x000a2e49
   11234:	6f727245 	.word	0x6f727245
   11238:	202d2072 	.word	0x202d2072
   1123c:	6c696146 	.word	0x6c696146
   11240:	74206465 	.word	0x74206465
   11244:	6f70206f 	.word	0x6f70206f
   11248:	20726577 	.word	0x20726577
   1124c:	4d206e6f 	.word	0x4d206e6f
   11250:	2e495053 	.word	0x2e495053
   11254:	0000000a 	.word	0x0000000a
   11258:	6f727245 	.word	0x6f727245
   1125c:	202d2072 	.word	0x202d2072
   11260:	6c696146 	.word	0x6c696146
   11264:	74206465 	.word	0x74206465
   11268:	6f63206f 	.word	0x6f63206f
   1126c:	6769666e 	.word	0x6769666e
   11270:	20657275 	.word	0x20657275
   11274:	4950534d 	.word	0x4950534d
   11278:	00000a2e 	.word	0x00000a2e
   1127c:	6f727245 	.word	0x6f727245
   11280:	202d2072 	.word	0x202d2072
   11284:	6c696146 	.word	0x6c696146
   11288:	74206465 	.word	0x74206465
   1128c:	6e65206f 	.word	0x6e65206f
   11290:	656c6261 	.word	0x656c6261
   11294:	50534d20 	.word	0x50534d20
   11298:	000a2e49 	.word	0x000a2e49

0001129c <MSPI_Flash_Config>:
   1129c:	00000206 1000110c 00000a00 00000000     ................
   112ac:	00000000                                ....

000112b0 <g_am_hal_mcuctrl_flash_size>:
   112b0:	00004000 00008000 00010000 00020000     .@..............
   112c0:	00040000 00080000 00100000 00200000     .............. .
   112d0:	00180000 00000000 00000000 00000000     ................
	...

000112f0 <g_am_hal_mcuctrl_sram_size>:
   112f0:	00004000 00008000 00010000 00020000     .@..............
   11300:	00040000 00080000 00100000 00060000     ................
   11310:	000c0000 00000000 00000000 00000000     ................
	...

00011330 <CSWTCH.47>:
   11330:	00020000 00010000 00030000              ............

0001133c <am_hal_pwrctrl_peripheral_control>:
	...
   11348:	00000001 00000004 00000004 00000002     ................
   11358:	00000008 00000008 00000004 00000008     ................
   11368:	00000008 00000008 00000008 00000008     ................
   11378:	00000010 00000010 00000010 00000020     ............ ...
   11388:	00000010 00000010 00000040 00000010     ........@.......
   11398:	00000010 00000080 00000004 00000004     ................
   113a8:	00000100 00000004 00000004 00000200     ................
   113b8:	00000020 00000020 00000400 00000004      ... ...........
   113c8:	00000004 00000800 00000040 00000040     ........@...@...
   113d8:	00001000 00000080 00000080 00002000     ............. ..
   113e8:	00000100 00000100                       ........

000113f0 <gAmHalCmdQReg>:
   113f0:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   11400:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   11410:	00000004 00000002 50005294 50005298     .........R.P.R.P
   11420:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   11430:	5000529c 00000001 00000004 00000002     .R.P............
   11440:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   11450:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   11460:	00000004 00000002 50007294 50007298     .........r.P.r.P
   11470:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   11480:	5000729c 00000001 00000004 00000002     .r.P............
   11490:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   114a0:	500082a8 00008000 5000829c 00000001     ...P.......P....
   114b0:	00000004 00000002 50009294 50009298     ...........P...P
   114c0:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   114d0:	5000929c 00000001 00000004 00000002     ...P............
   114e0:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   114f0:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   11500:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   11510:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   11520:	5000c250 00000001 00000004 00000002     P..P............

00011530 <g_AM_BSP_GPIO_ITM_SWO>:
   11530:	00000002                                ....

00011534 <g_AM_BSP_GPIO_MSPI_CE0>:
   11534:	00060701                                ....

00011538 <g_AM_BSP_GPIO_MSPI_CE1>:
   11538:	000e0700                                ....

0001153c <g_AM_BSP_GPIO_MSPI_D0>:
   1153c:	00060206                                ....

00011540 <g_AM_BSP_GPIO_MSPI_D1>:
   11540:	00060205                                ....

00011544 <g_AM_BSP_GPIO_MSPI_D2>:
   11544:	00060207                                ....

00011548 <g_AM_BSP_GPIO_MSPI_D3>:
   11548:	00060206                                ....

0001154c <g_AM_BSP_GPIO_MSPI_D4>:
   1154c:	00060205                                ....

00011550 <g_AM_BSP_GPIO_MSPI_D5>:
   11550:	00060205                                ....

00011554 <g_AM_BSP_GPIO_MSPI_D6>:
   11554:	00060205                                ....

00011558 <g_AM_BSP_GPIO_MSPI_D7>:
   11558:	00060205                                ....

0001155c <g_AM_BSP_GPIO_MSPI_SCK>:
   1155c:	00060302                                ....

00011560 <g_AM_HAL_GPIO_DISABLE>:
   11560:	00000003                                ....

00011564 <g_AM_HAL_GPIO_OUTPUT>:
   11564:	00000403                                ....

00011568 <g_ui8Bit76Capabilities>:
   11568:	02800101 80010180 80800101 80808080     ................
   11578:	80808080 80808008 01800180 80808080     ................
   11588:	80808080 01800402 01010401 80808080     ................
   11598:	00000101                                ....

0001159c <g_ui8Inpen>:
   1159c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   115ac:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   115bc:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   115cc:	00003130                                01..

000115d0 <g_ui8NCEtable>:
   115d0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   115e0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   115f0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   11600:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   11610:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   11620:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   11630:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   11640:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   11650:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   11660:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   11670:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   11680:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   11690:	32221202 43231303                       .."2..#C

00011698 <g_ui8nCEpins>:
   11698:	02070707 00080802 01020202 01010101     ................
   116a8:	01010101 01010101 01010101 01010101     ................
   116b8:	01010101 08010101 01010008 01010101     ................
   116c8:	00000101                                ....
