
bin/adc_lpmode0_dma.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 09 d4 00 00 71 d4 00 00 9d c5 00 00     ........q.......
    c010:	73 d4 00 00 73 d4 00 00 73 d4 00 00 00 00 00 00     s...s...s.......
	...
    c02c:	75 d4 00 00 75 d4 00 00 00 00 00 00 75 d4 00 00     u...u.......u...
    c03c:	75 d4 00 00 75 d4 00 00 75 d4 00 00 75 d4 00 00     u...u...u...u...
    c04c:	75 d4 00 00 75 d4 00 00 75 d4 00 00 75 d4 00 00     u...u...u...u...
    c05c:	75 d4 00 00 75 d4 00 00 75 d4 00 00 75 d4 00 00     u...u...u...u...
    c06c:	75 d4 00 00 75 d4 00 00 75 d4 00 00 75 d4 00 00     u...u...u...u...
    c07c:	75 d4 00 00 75 d4 00 00 75 d4 00 00 d5 c1 00 00     u...u...u.......
    c08c:	75 d4 00 00 75 d4 00 00 75 d4 00 00 75 d4 00 00     u...u...u...u...
    c09c:	75 d4 00 00 75 d4 00 00 75 d4 00 00 75 d4 00 00     u...u...u...u...
    c0ac:	75 d4 00 00 75 d4 00 00 75 d4 00 00 75 d4 00 00     u...u...u...u...
    c0bc:	75 d4 00 00                                         u...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <am_adc_isr>:
// Interrupt handler for the ADC.
//
//*****************************************************************************
void
am_adc_isr(void)
{
    c1d4:	b500      	push	{lr}
    c1d6:	b083      	sub	sp, #12
    uint32_t ui32IntMask;

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    c1d8:	4b16      	ldr	r3, [pc, #88]	; (c234 <am_adc_isr+0x60>)
    c1da:	681b      	ldr	r3, [r3, #0]
    c1dc:	a901      	add	r1, sp, #4
    c1de:	2200      	movs	r2, #0
    c1e0:	4618      	mov	r0, r3
    c1e2:	f001 fab7 	bl	d754 <am_hal_adc_interrupt_status>
    c1e6:	4603      	mov	r3, r0
    c1e8:	2b00      	cmp	r3, #0
    c1ea:	d002      	beq.n	c1f2 <am_adc_isr+0x1e>
    {
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    c1ec:	4812      	ldr	r0, [pc, #72]	; (c238 <am_adc_isr+0x64>)
    c1ee:	f001 f8e3 	bl	d3b8 <am_util_stdio_printf>
    }

    //
    // Clear the ADC interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    c1f2:	4b10      	ldr	r3, [pc, #64]	; (c234 <am_adc_isr+0x60>)
    c1f4:	681b      	ldr	r3, [r3, #0]
    c1f6:	9a01      	ldr	r2, [sp, #4]
    c1f8:	4611      	mov	r1, r2
    c1fa:	4618      	mov	r0, r3
    c1fc:	f001 face 	bl	d79c <am_hal_adc_interrupt_clear>
    c200:	4603      	mov	r3, r0
    c202:	2b00      	cmp	r3, #0
    c204:	d002      	beq.n	c20c <am_adc_isr+0x38>
    {
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    c206:	480d      	ldr	r0, [pc, #52]	; (c23c <am_adc_isr+0x68>)
    c208:	f001 f8d6 	bl	d3b8 <am_util_stdio_printf>
    }

    //
    // If we got a DMA complete, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DCMP)
    c20c:	9b01      	ldr	r3, [sp, #4]
    c20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c212:	2b00      	cmp	r3, #0
    c214:	d002      	beq.n	c21c <am_adc_isr+0x48>
    {
        g_bADCDMAComplete = true;
    c216:	4b0a      	ldr	r3, [pc, #40]	; (c240 <am_adc_isr+0x6c>)
    c218:	2201      	movs	r2, #1
    c21a:	701a      	strb	r2, [r3, #0]
    }

    //
    // If we got a DMA error, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DERR)
    c21c:	9b01      	ldr	r3, [sp, #4]
    c21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c222:	2b00      	cmp	r3, #0
    c224:	d002      	beq.n	c22c <am_adc_isr+0x58>
    {
        g_bADCDMAError = true;
    c226:	4b07      	ldr	r3, [pc, #28]	; (c244 <am_adc_isr+0x70>)
    c228:	2201      	movs	r2, #1
    c22a:	701a      	strb	r2, [r3, #0]
    }
}
    c22c:	bf00      	nop
    c22e:	b003      	add	sp, #12
    c230:	f85d fb04 	ldr.w	pc, [sp], #4
    c234:	10001644 	.word	0x10001644
    c238:	0000e9ac 	.word	0x0000e9ac
    c23c:	0000e9d0 	.word	0x0000e9d0
    c240:	10001648 	.word	0x10001648
    c244:	10001649 	.word	0x10001649

0000c248 <sleep>:
// Set up the core for sleeping, and then go to sleep.
//
//*****************************************************************************
void
sleep(void)
{
    c248:	b508      	push	{r3, lr}
#endif

    //
    // Go to Deep Sleep.
    //
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c24a:	2001      	movs	r0, #1
    c24c:	f002 fb26 	bl	e89c <am_hal_sysctrl_sleep>
    // Re-enable peripherals for run mode.
    //
#if (0 == ADC_EXAMPLE_DEBUG)
    am_bsp_debug_printf_enable();
#endif
}
    c250:	bf00      	nop
    c252:	bd08      	pop	{r3, pc}

0000c254 <adc_config_dma>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config_dma(void)
{
    c254:	b500      	push	{lr}
    c256:	b085      	sub	sp, #20
    am_hal_adc_dma_config_t       ADCDMAConfig;

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    ADCDMAConfig.bDynamicPriority = true;
    c258:	2301      	movs	r3, #1
    c25a:	f88d 3004 	strb.w	r3, [sp, #4]
    ADCDMAConfig.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
    c25e:	2301      	movs	r3, #1
    c260:	f88d 3005 	strb.w	r3, [sp, #5]
    ADCDMAConfig.bDMAEnable = true;
    c264:	2301      	movs	r3, #1
    c266:	f88d 3006 	strb.w	r3, [sp, #6]
    ADCDMAConfig.ui32SampleCount = ADC_SAMPLE_BUF_SIZE;
    c26a:	2380      	movs	r3, #128	; 0x80
    c26c:	9302      	str	r3, [sp, #8]
    ADCDMAConfig.ui32TargetAddress = (uint32_t)g_ui32ADCSampleBuffer;
    c26e:	4b0c      	ldr	r3, [pc, #48]	; (c2a0 <adc_config_dma+0x4c>)
    c270:	9303      	str	r3, [sp, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_ADCHandle, &ADCDMAConfig))
    c272:	4b0c      	ldr	r3, [pc, #48]	; (c2a4 <adc_config_dma+0x50>)
    c274:	681b      	ldr	r3, [r3, #0]
    c276:	aa01      	add	r2, sp, #4
    c278:	4611      	mov	r1, r2
    c27a:	4618      	mov	r0, r3
    c27c:	f001 fa04 	bl	d688 <am_hal_adc_configure_dma>
    c280:	4603      	mov	r3, r0
    c282:	2b00      	cmp	r3, #0
    c284:	d002      	beq.n	c28c <adc_config_dma+0x38>
    {
        am_util_stdio_printf("Error - configuring ADC DMA failed.\n");
    c286:	4808      	ldr	r0, [pc, #32]	; (c2a8 <adc_config_dma+0x54>)
    c288:	f001 f896 	bl	d3b8 <am_util_stdio_printf>
    }

    //
    // Reset the ADC DMA flags.
    //
    g_bADCDMAComplete = false;
    c28c:	4b07      	ldr	r3, [pc, #28]	; (c2ac <adc_config_dma+0x58>)
    c28e:	2200      	movs	r2, #0
    c290:	701a      	strb	r2, [r3, #0]
    g_bADCDMAError = false;
    c292:	4b07      	ldr	r3, [pc, #28]	; (c2b0 <adc_config_dma+0x5c>)
    c294:	2200      	movs	r2, #0
    c296:	701a      	strb	r2, [r3, #0]
}
    c298:	bf00      	nop
    c29a:	b005      	add	sp, #20
    c29c:	f85d fb04 	ldr.w	pc, [sp], #4
    c2a0:	10001044 	.word	0x10001044
    c2a4:	10001644 	.word	0x10001644
    c2a8:	0000e9f8 	.word	0x0000e9f8
    c2ac:	10001648 	.word	0x10001648
    c2b0:	10001649 	.word	0x10001649

0000c2b4 <adc_config>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config(void)
{
    c2b4:	b500      	push	{lr}
    c2b6:	b085      	sub	sp, #20
    am_hal_adc_slot_config_t      ADCSlotConfig;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    c2b8:	4935      	ldr	r1, [pc, #212]	; (c390 <adc_config+0xdc>)
    c2ba:	2000      	movs	r0, #0
    c2bc:	f001 f91c 	bl	d4f8 <am_hal_adc_initialize>
    c2c0:	4603      	mov	r3, r0
    c2c2:	2b00      	cmp	r3, #0
    c2c4:	d002      	beq.n	c2cc <adc_config+0x18>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    c2c6:	4833      	ldr	r0, [pc, #204]	; (c394 <adc_config+0xe0>)
    c2c8:	f001 f876 	bl	d3b8 <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    c2cc:	4b30      	ldr	r3, [pc, #192]	; (c390 <adc_config+0xdc>)
    c2ce:	681b      	ldr	r3, [r3, #0]
    c2d0:	2200      	movs	r2, #0
    c2d2:	2100      	movs	r1, #0
    c2d4:	4618      	mov	r0, r3
    c2d6:	f001 fae1 	bl	d89c <am_hal_adc_power_control>
    c2da:	4603      	mov	r3, r0
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d002      	beq.n	c2e6 <adc_config+0x32>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC power on failed.\n");
    c2e0:	482d      	ldr	r0, [pc, #180]	; (c398 <adc_config+0xe4>)
    c2e2:	f001 f869 	bl	d3b8 <am_util_stdio_printf>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    c2e6:	2301      	movs	r3, #1
    c2e8:	f88d 3008 	strb.w	r3, [sp, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    c2ec:	2300      	movs	r3, #0
    c2ee:	f88d 3009 	strb.w	r3, [sp, #9]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    c2f2:	2307      	movs	r3, #7
    c2f4:	f88d 300a 	strb.w	r3, [sp, #10]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_1P5;
    c2f8:	2301      	movs	r3, #1
    c2fa:	f88d 300b 	strb.w	r3, [sp, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_LATENCY;
    c2fe:	2301      	movs	r3, #1
    c300:	f88d 300c 	strb.w	r3, [sp, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    c304:	2300      	movs	r3, #0
    c306:	f88d 300d 	strb.w	r3, [sp, #13]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    c30a:	2301      	movs	r3, #1
    c30c:	f88d 300e 	strb.w	r3, [sp, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    c310:	4b1f      	ldr	r3, [pc, #124]	; (c390 <adc_config+0xdc>)
    c312:	681b      	ldr	r3, [r3, #0]
    c314:	aa02      	add	r2, sp, #8
    c316:	4611      	mov	r1, r2
    c318:	4618      	mov	r0, r3
    c31a:	f001 f93f 	bl	d59c <am_hal_adc_configure>
    c31e:	4603      	mov	r3, r0
    c320:	2b00      	cmp	r3, #0
    c322:	d002      	beq.n	c32a <adc_config+0x76>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    c324:	481d      	ldr	r0, [pc, #116]	; (c39c <adc_config+0xe8>)
    c326:	f001 f847 	bl	d3b8 <am_util_stdio_printf>
    }

    //
    // Set up an ADC slot
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_128;
    c32a:	2307      	movs	r3, #7
    c32c:	f88d 3000 	strb.w	r3, [sp]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    c330:	2300      	movs	r3, #0
    c332:	f88d 3001 	strb.w	r3, [sp, #1]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE0;
    c336:	2300      	movs	r3, #0
    c338:	f88d 3002 	strb.w	r3, [sp, #2]
    ADCSlotConfig.bWindowCompare  = false;
    c33c:	2300      	movs	r3, #0
    c33e:	f88d 3003 	strb.w	r3, [sp, #3]
    ADCSlotConfig.bEnabled        = true;
    c342:	2301      	movs	r3, #1
    c344:	f88d 3004 	strb.w	r3, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    c348:	4b11      	ldr	r3, [pc, #68]	; (c390 <adc_config+0xdc>)
    c34a:	681b      	ldr	r3, [r3, #0]
    c34c:	466a      	mov	r2, sp
    c34e:	2100      	movs	r1, #0
    c350:	4618      	mov	r0, r3
    c352:	f001 f95f 	bl	d614 <am_hal_adc_configure_slot>
    c356:	4603      	mov	r3, r0
    c358:	2b00      	cmp	r3, #0
    c35a:	d002      	beq.n	c362 <adc_config+0xae>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    c35c:	4810      	ldr	r0, [pc, #64]	; (c3a0 <adc_config+0xec>)
    c35e:	f001 f82b 	bl	d3b8 <am_util_stdio_printf>
    }

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    adc_config_dma();
    c362:	f7ff ff77 	bl	c254 <adc_config_dma>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
    c366:	4b0a      	ldr	r3, [pc, #40]	; (c390 <adc_config+0xdc>)
    c368:	681b      	ldr	r3, [r3, #0]
    c36a:	21c0      	movs	r1, #192	; 0xc0
    c36c:	4618      	mov	r0, r3
    c36e:	f001 f9dd 	bl	d72c <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    c372:	4b07      	ldr	r3, [pc, #28]	; (c390 <adc_config+0xdc>)
    c374:	681b      	ldr	r3, [r3, #0]
    c376:	4618      	mov	r0, r3
    c378:	f001 f9ba 	bl	d6f0 <am_hal_adc_enable>
    c37c:	4603      	mov	r3, r0
    c37e:	2b00      	cmp	r3, #0
    c380:	d002      	beq.n	c388 <adc_config+0xd4>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    c382:	4808      	ldr	r0, [pc, #32]	; (c3a4 <adc_config+0xf0>)
    c384:	f001 f818 	bl	d3b8 <am_util_stdio_printf>
    }
}
    c388:	bf00      	nop
    c38a:	b005      	add	sp, #20
    c38c:	f85d fb04 	ldr.w	pc, [sp], #4
    c390:	10001644 	.word	0x10001644
    c394:	0000ea20 	.word	0x0000ea20
    c398:	0000ea54 	.word	0x0000ea54
    c39c:	0000ea74 	.word	0x0000ea74
    c3a0:	0000ea98 	.word	0x0000ea98
    c3a4:	0000eac0 	.word	0x0000eac0

0000c3a8 <init_timerA3_for_ADC>:
// Initialize the ADC repetitive sample timer A3.
//
//*****************************************************************************
void
init_timerA3_for_ADC(void)
{
    c3a8:	b508      	push	{r3, lr}
    //
    // Start a timer to trigger the ADC periodically (1 second).
    //
    am_hal_ctimer_config_single(3, AM_HAL_CTIMER_TIMERA,
    c3aa:	f240 2242 	movw	r2, #578	; 0x242
    c3ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3b2:	2003      	movs	r0, #3
    c3b4:	f001 fd3e 	bl	de34 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_HFRC_12MHZ    |
                                AM_HAL_CTIMER_FN_REPEAT     |
                                AM_HAL_CTIMER_INT_ENABLE);

    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA3);
    c3b8:	2040      	movs	r0, #64	; 0x40
    c3ba:	f001 fe23 	bl	e004 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA, 10, 5);
    c3be:	2305      	movs	r3, #5
    c3c0:	220a      	movs	r2, #10
    c3c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3c6:	2003      	movs	r0, #3
    c3c8:	f001 fdb0 	bl	df2c <am_hal_ctimer_period_set>

    //
    // Enable the timer A3 to trigger the ADC directly
    //
    am_hal_ctimer_adc_trigger_enable();
    c3cc:	f001 fe08 	bl	dfe0 <am_hal_ctimer_adc_trigger_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
    c3d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3d4:	2003      	movs	r0, #3
    c3d6:	f001 fd7b 	bl	ded0 <am_hal_ctimer_start>
}
    c3da:	bf00      	nop
    c3dc:	bd08      	pop	{r3, pc}
	...

0000c3e0 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c3e0:	b500      	push	{lr}
    c3e2:	b085      	sub	sp, #20
    //
    // Set the clock frequency.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    c3e4:	2100      	movs	r1, #0
    c3e6:	2000      	movs	r0, #0
    c3e8:	f001 fc6a 	bl	dcc0 <am_hal_clkgen_control>
    c3ec:	4603      	mov	r3, r0
    c3ee:	2b00      	cmp	r3, #0
    c3f0:	d002      	beq.n	c3f8 <main+0x18>
    {
        am_util_stdio_printf("Error - configuring the system clock failed.\n");
    c3f2:	484a      	ldr	r0, [pc, #296]	; (c51c <main+0x13c>)
    c3f4:	f000 ffe0 	bl	d3b8 <am_util_stdio_printf>


    //
    // Set the default cache configuration and enable it.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    c3f8:	4849      	ldr	r0, [pc, #292]	; (c520 <main+0x140>)
    c3fa:	f001 fab9 	bl	d970 <am_hal_cachectrl_config>
    c3fe:	4603      	mov	r3, r0
    c400:	2b00      	cmp	r3, #0
    c402:	d002      	beq.n	c40a <main+0x2a>
    {
        am_util_stdio_printf("Error - configuring the system cache failed.\n");
    c404:	4847      	ldr	r0, [pc, #284]	; (c524 <main+0x144>)
    c406:	f000 ffd7 	bl	d3b8 <am_util_stdio_printf>
    }

    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    c40a:	f001 fad5 	bl	d9b8 <am_hal_cachectrl_enable>
    c40e:	4603      	mov	r3, r0
    c410:	2b00      	cmp	r3, #0
    c412:	d002      	beq.n	c41a <main+0x3a>
    {
        am_util_stdio_printf("Error - enabling the system cache failed.\n");
    c414:	4844      	ldr	r0, [pc, #272]	; (c528 <main+0x148>)
    c416:	f000 ffcf 	bl	d3b8 <am_util_stdio_printf>
    }

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c41a:	f001 f82d 	bl	d478 <am_bsp_low_power_init>

    //
    // Enable only the first 512KB bank of Flash (0).  Disable Flash(1)
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_MIN))
    c41e:	200e      	movs	r0, #14
    c420:	f002 f908 	bl	e634 <am_hal_pwrctrl_memory_enable>
    c424:	4603      	mov	r3, r0
    c426:	2b00      	cmp	r3, #0
    c428:	d002      	beq.n	c430 <main+0x50>
    {
        am_util_stdio_printf("Error - configuring the flash memory failed.\n");
    c42a:	4840      	ldr	r0, [pc, #256]	; (c52c <main+0x14c>)
    c42c:	f000 ffc4 	bl	d3b8 <am_util_stdio_printf>

#if defined(AM_PART_APOLLO3)
    //
    // Enable the first 32K of TCM SRAM.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM))
    c430:	2002      	movs	r0, #2
    c432:	f002 f8ff 	bl	e634 <am_hal_pwrctrl_memory_enable>
    c436:	4603      	mov	r3, r0
    c438:	2b00      	cmp	r3, #0
    c43a:	d002      	beq.n	c442 <main+0x62>
    {
        am_util_stdio_printf("Error - configuring the SRAM failed.\n");
    c43c:	483c      	ldr	r0, [pc, #240]	; (c530 <main+0x150>)
    c43e:	f000 ffbb 	bl	d3b8 <am_util_stdio_printf>


    //
    // Start the ITM interface.
    //
    am_bsp_itm_printf_enable();
    c442:	f001 f839 	bl	d4b8 <am_bsp_itm_printf_enable>

    //
    // Start the CTIMER A3 for timer-based ADC measurements.
    //
    init_timerA3_for_ADC();
    c446:	f7ff ffaf 	bl	c3a8 <init_timerA3_for_ADC>

    //
    // Enable interrupts.
    //
    NVIC_EnableIRQ(ADC_IRQn);
    c44a:	2012      	movs	r0, #18
    c44c:	f7ff fea8 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c450:	f001 ffb6 	bl	e3c0 <am_hal_interrupt_master_enable>

    //
    // Set a pin to act as our ADC input
    //
    am_hal_gpio_pinconfig(16, g_AM_PIN_16_ADCSE0);
    c454:	4b37      	ldr	r3, [pc, #220]	; (c534 <main+0x154>)
    c456:	6819      	ldr	r1, [r3, #0]
    c458:	2010      	movs	r0, #16
    c45a:	f001 fe37 	bl	e0cc <am_hal_gpio_pinconfig>

    //
    // Configure the ADC
    //
    adc_config();
    c45e:	f7ff ff29 	bl	c2b4 <adc_config>

    //
    // Trigger the ADC sampling for the first time manually.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c462:	4b35      	ldr	r3, [pc, #212]	; (c538 <main+0x158>)
    c464:	681b      	ldr	r3, [r3, #0]
    c466:	4618      	mov	r0, r3
    c468:	f001 fa06 	bl	d878 <am_hal_adc_sw_trigger>
    c46c:	4603      	mov	r3, r0
    c46e:	2b00      	cmp	r3, #0
    c470:	d002      	beq.n	c478 <main+0x98>
    {
        am_util_stdio_printf("Error - triggering the ADC failed.\n");
    c472:	4832      	ldr	r0, [pc, #200]	; (c53c <main+0x15c>)
    c474:	f000 ffa0 	bl	d3b8 <am_util_stdio_printf>
    }

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c478:	f000 ffbe 	bl	d3f8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC Example with 1.2Msps and LPMODE=0\n");
    c47c:	4830      	ldr	r0, [pc, #192]	; (c540 <main+0x160>)
    c47e:	f000 ff9b 	bl	d3b8 <am_util_stdio_printf>

    //
    // Allow time for all printing to finish.
    //
    am_util_delay_ms(10);
    c482:	200a      	movs	r0, #10
    c484:	f000 f86e 	bl	c564 <am_util_delay_ms>
    while(1)
    {
        //
        // Go to Deep Sleep.
        //
        if (!g_bADCDMAComplete)
    c488:	4b2e      	ldr	r3, [pc, #184]	; (c544 <main+0x164>)
    c48a:	781b      	ldrb	r3, [r3, #0]
    c48c:	b2db      	uxtb	r3, r3
    c48e:	f083 0301 	eor.w	r3, r3, #1
    c492:	b2db      	uxtb	r3, r3
    c494:	2b00      	cmp	r3, #0
    c496:	d001      	beq.n	c49c <main+0xbc>
        {
            sleep();
    c498:	f7ff fed6 	bl	c248 <sleep>
        }

        //
        // Check for DMA errors.
        //
        if (g_bADCDMAError)
    c49c:	4b2a      	ldr	r3, [pc, #168]	; (c548 <main+0x168>)
    c49e:	781b      	ldrb	r3, [r3, #0]
    c4a0:	b2db      	uxtb	r3, r3
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	d003      	beq.n	c4ae <main+0xce>
        {
            am_util_stdio_printf("DMA Error occured\n");
    c4a6:	4829      	ldr	r0, [pc, #164]	; (c54c <main+0x16c>)
    c4a8:	f000 ff86 	bl	d3b8 <am_util_stdio_printf>
            while(1);
    c4ac:	e7fe      	b.n	c4ac <main+0xcc>
        }

        //
        // Check if the ADC DMA completion interrupt occurred.
        //
        if (g_bADCDMAComplete)
    c4ae:	4b25      	ldr	r3, [pc, #148]	; (c544 <main+0x164>)
    c4b0:	781b      	ldrb	r3, [r3, #0]
    c4b2:	b2db      	uxtb	r3, r3
    c4b4:	2b00      	cmp	r3, #0
    c4b6:	d0e7      	beq.n	c488 <main+0xa8>
        {
#if ADC_EXAMPLE_DEBUG
            {
                uint32_t        ui32SampleCount;
                am_util_stdio_printf("DMA Complete\n");
    c4b8:	4825      	ldr	r0, [pc, #148]	; (c550 <main+0x170>)
    c4ba:	f000 ff7d 	bl	d3b8 <am_util_stdio_printf>
                ui32SampleCount = ADC_SAMPLE_BUF_SIZE;
    c4be:	2380      	movs	r3, #128	; 0x80
    c4c0:	9303      	str	r3, [sp, #12]
                if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle, false,
    c4c2:	4b1d      	ldr	r3, [pc, #116]	; (c538 <main+0x158>)
    c4c4:	6818      	ldr	r0, [r3, #0]
    c4c6:	ab03      	add	r3, sp, #12
    c4c8:	4a22      	ldr	r2, [pc, #136]	; (c554 <main+0x174>)
    c4ca:	9200      	str	r2, [sp, #0]
    c4cc:	4a22      	ldr	r2, [pc, #136]	; (c558 <main+0x178>)
    c4ce:	2100      	movs	r1, #0
    c4d0:	f001 f974 	bl	d7bc <am_hal_adc_samples_read>
    c4d4:	4603      	mov	r3, r0
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d002      	beq.n	c4e0 <main+0x100>
                                                                     g_ui32ADCSampleBuffer,
                                                                     &ui32SampleCount,
                                                                     SampleBuffer))
                {
                    am_util_stdio_printf("Error - failed to process samples.\n");
    c4da:	4820      	ldr	r0, [pc, #128]	; (c55c <main+0x17c>)
    c4dc:	f000 ff6c 	bl	d3b8 <am_util_stdio_printf>
#endif

            //
            // Reset the DMA completion and error flags.
            //
            g_bADCDMAComplete = false;
    c4e0:	4b18      	ldr	r3, [pc, #96]	; (c544 <main+0x164>)
    c4e2:	2200      	movs	r2, #0
    c4e4:	701a      	strb	r2, [r3, #0]

            //
            // Re-configure the ADC DMA.
            //
            adc_config_dma();
    c4e6:	f7ff feb5 	bl	c254 <adc_config_dma>

            //
            // Clear the ADC interrupts.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, 0xFFFFFFFF))
    c4ea:	4b13      	ldr	r3, [pc, #76]	; (c538 <main+0x158>)
    c4ec:	681b      	ldr	r3, [r3, #0]
    c4ee:	f04f 31ff 	mov.w	r1, #4294967295
    c4f2:	4618      	mov	r0, r3
    c4f4:	f001 f952 	bl	d79c <am_hal_adc_interrupt_clear>
    c4f8:	4603      	mov	r3, r0
    c4fa:	2b00      	cmp	r3, #0
    c4fc:	d002      	beq.n	c504 <main+0x124>
            {
                am_util_stdio_printf("Error - clearing the ADC interrupts failed.\n");
    c4fe:	4818      	ldr	r0, [pc, #96]	; (c560 <main+0x180>)
    c500:	f000 ff5a 	bl	d3b8 <am_util_stdio_printf>
            }

            //
            // Trigger the ADC sampling for the first time manually.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c504:	4b0c      	ldr	r3, [pc, #48]	; (c538 <main+0x158>)
    c506:	681b      	ldr	r3, [r3, #0]
    c508:	4618      	mov	r0, r3
    c50a:	f001 f9b5 	bl	d878 <am_hal_adc_sw_trigger>
    c50e:	4603      	mov	r3, r0
    c510:	2b00      	cmp	r3, #0
    c512:	d0b9      	beq.n	c488 <main+0xa8>
            {
                am_util_stdio_printf("Error - triggering the ADC failed.\n");
    c514:	4809      	ldr	r0, [pc, #36]	; (c53c <main+0x15c>)
    c516:	f000 ff4f 	bl	d3b8 <am_util_stdio_printf>
        if (!g_bADCDMAComplete)
    c51a:	e7b5      	b.n	c488 <main+0xa8>
    c51c:	0000eae0 	.word	0x0000eae0
    c520:	0000eca4 	.word	0x0000eca4
    c524:	0000eb10 	.word	0x0000eb10
    c528:	0000eb40 	.word	0x0000eb40
    c52c:	0000eb6c 	.word	0x0000eb6c
    c530:	0000eb9c 	.word	0x0000eb9c
    c534:	0000ec9c 	.word	0x0000ec9c
    c538:	10001644 	.word	0x10001644
    c53c:	0000ebc4 	.word	0x0000ebc4
    c540:	0000ebe8 	.word	0x0000ebe8
    c544:	10001648 	.word	0x10001648
    c548:	10001649 	.word	0x10001649
    c54c:	0000ec10 	.word	0x0000ec10
    c550:	0000ec24 	.word	0x0000ec24
    c554:	10001244 	.word	0x10001244
    c558:	10001044 	.word	0x10001044
    c55c:	0000ec34 	.word	0x0000ec34
    c560:	0000ec58 	.word	0x0000ec58

0000c564 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c564:	b500      	push	{lr}
    c566:	b089      	sub	sp, #36	; 0x24
    c568:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c56a:	ab03      	add	r3, sp, #12
    c56c:	4618      	mov	r0, r3
    c56e:	f001 fc43 	bl	ddf8 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c572:	9b03      	ldr	r3, [sp, #12]
    c574:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c576:	9b07      	ldr	r3, [sp, #28]
    c578:	4a07      	ldr	r2, [pc, #28]	; (c598 <am_util_delay_ms+0x34>)
    c57a:	fba2 2303 	umull	r2, r3, r2, r3
    c57e:	099a      	lsrs	r2, r3, #6
    c580:	9b01      	ldr	r3, [sp, #4]
    c582:	fb02 f303 	mul.w	r3, r2, r3
    c586:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c588:	9806      	ldr	r0, [sp, #24]
    c58a:	f001 fd4f 	bl	e02c <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c58e:	bf00      	nop
    c590:	b009      	add	sp, #36	; 0x24
    c592:	f85d fb04 	ldr.w	pc, [sp], #4
    c596:	bf00      	nop
    c598:	057619f1 	.word	0x057619f1

0000c59c <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c59c:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c59e:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c5a2:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c5a4:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c5a8:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c5ac:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c5b0:	f000 f80a 	bl	c5c8 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c5b4:	bd01      	pop	{r0, pc}
}
    c5b6:	bf00      	nop
    c5b8:	4618      	mov	r0, r3

0000c5ba <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c5ba:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c5bc:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c5be:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c5c0:	4770      	bx	lr
}
    c5c2:	bf00      	nop
    c5c4:	4618      	mov	r0, r3
	...

0000c5c8 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c5c8:	b500      	push	{lr}
    c5ca:	b097      	sub	sp, #92	; 0x5c
    c5cc:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c5ce:	ab03      	add	r3, sp, #12
    c5d0:	2200      	movs	r2, #0
    c5d2:	601a      	str	r2, [r3, #0]
    c5d4:	605a      	str	r2, [r3, #4]
    c5d6:	609a      	str	r2, [r3, #8]
    c5d8:	60da      	str	r2, [r3, #12]
    c5da:	611a      	str	r2, [r3, #16]
    c5dc:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c5de:	2300      	movs	r3, #0
    c5e0:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c5e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c5e4:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c5e6:	4b2e      	ldr	r3, [pc, #184]	; (c6a0 <am_util_faultisr_collect_data+0xd8>)
    c5e8:	681b      	ldr	r3, [r3, #0]
    c5ea:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c5ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c5ee:	b2db      	uxtb	r3, r3
    c5f0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c5f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c5f6:	0a1b      	lsrs	r3, r3, #8
    c5f8:	b2db      	uxtb	r3, r3
    c5fa:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c5fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c600:	0c1b      	lsrs	r3, r3, #16
    c602:	b29b      	uxth	r3, r3
    c604:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c608:	4b26      	ldr	r3, [pc, #152]	; (c6a4 <am_util_faultisr_collect_data+0xdc>)
    c60a:	681b      	ldr	r3, [r3, #0]
    c60c:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c60e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c612:	b2db      	uxtb	r3, r3
    c614:	f003 0302 	and.w	r3, r3, #2
    c618:	2b00      	cmp	r3, #0
    c61a:	d005      	beq.n	c628 <am_util_faultisr_collect_data+0x60>
    c61c:	9901      	ldr	r1, [sp, #4]
    c61e:	2006      	movs	r0, #6
    c620:	f7ff ffcb 	bl	c5ba <getStackedReg>
    c624:	4603      	mov	r3, r0
    c626:	e001      	b.n	c62c <am_util_faultisr_collect_data+0x64>
    c628:	f04f 33ff 	mov.w	r3, #4294967295
    c62c:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c62e:	9901      	ldr	r1, [sp, #4]
    c630:	2000      	movs	r0, #0
    c632:	f7ff ffc2 	bl	c5ba <getStackedReg>
    c636:	4603      	mov	r3, r0
    c638:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c63a:	9901      	ldr	r1, [sp, #4]
    c63c:	2001      	movs	r0, #1
    c63e:	f7ff ffbc 	bl	c5ba <getStackedReg>
    c642:	4603      	mov	r3, r0
    c644:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c646:	9901      	ldr	r1, [sp, #4]
    c648:	2002      	movs	r0, #2
    c64a:	f7ff ffb6 	bl	c5ba <getStackedReg>
    c64e:	4603      	mov	r3, r0
    c650:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c652:	9901      	ldr	r1, [sp, #4]
    c654:	2003      	movs	r0, #3
    c656:	f7ff ffb0 	bl	c5ba <getStackedReg>
    c65a:	4603      	mov	r3, r0
    c65c:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c65e:	9901      	ldr	r1, [sp, #4]
    c660:	2004      	movs	r0, #4
    c662:	f7ff ffaa 	bl	c5ba <getStackedReg>
    c666:	4603      	mov	r3, r0
    c668:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c66a:	9901      	ldr	r1, [sp, #4]
    c66c:	2005      	movs	r0, #5
    c66e:	f7ff ffa4 	bl	c5ba <getStackedReg>
    c672:	4603      	mov	r3, r0
    c674:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c676:	9901      	ldr	r1, [sp, #4]
    c678:	2006      	movs	r0, #6
    c67a:	f7ff ff9e 	bl	c5ba <getStackedReg>
    c67e:	4603      	mov	r3, r0
    c680:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c682:	9901      	ldr	r1, [sp, #4]
    c684:	2007      	movs	r0, #7
    c686:	f7ff ff98 	bl	c5ba <getStackedReg>
    c68a:	4603      	mov	r3, r0
    c68c:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c68e:	ab03      	add	r3, sp, #12
    c690:	4619      	mov	r1, r3
    c692:	2002      	movs	r0, #2
    c694:	f001 fedc 	bl	e450 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c698:	2300      	movs	r3, #0
    c69a:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c69c:	e7fe      	b.n	c69c <am_util_faultisr_collect_data+0xd4>
    c69e:	bf00      	nop
    c6a0:	e000ed28 	.word	0xe000ed28
    c6a4:	e000ed38 	.word	0xe000ed38

0000c6a8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c6a8:	b082      	sub	sp, #8
    c6aa:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c6ac:	4a02      	ldr	r2, [pc, #8]	; (c6b8 <am_util_stdio_printf_init+0x10>)
    c6ae:	9b01      	ldr	r3, [sp, #4]
    c6b0:	6013      	str	r3, [r2, #0]
}
    c6b2:	bf00      	nop
    c6b4:	b002      	add	sp, #8
    c6b6:	4770      	bx	lr
    c6b8:	1000164c 	.word	0x1000164c

0000c6bc <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c6bc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c6c0:	b098      	sub	sp, #96	; 0x60
    c6c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c6c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6ca:	f04f 0000 	mov.w	r0, #0
    c6ce:	f04f 0100 	mov.w	r1, #0
    c6d2:	0018      	movs	r0, r3
    c6d4:	2100      	movs	r1, #0
    c6d6:	ea50 0301 	orrs.w	r3, r0, r1
    c6da:	f000 80b0 	beq.w	c83e <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c6de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6e2:	f04f 0400 	mov.w	r4, #0
    c6e6:	f04f 0500 	mov.w	r5, #0
    c6ea:	0854      	lsrs	r4, r2, #1
    c6ec:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c6f0:	085d      	lsrs	r5, r3, #1
    c6f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c6f6:	f04f 0000 	mov.w	r0, #0
    c6fa:	f04f 0100 	mov.w	r1, #0
    c6fe:	0890      	lsrs	r0, r2, #2
    c700:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c704:	0899      	lsrs	r1, r3, #2
    c706:	eb14 0a00 	adds.w	sl, r4, r0
    c70a:	eb45 0b01 	adc.w	fp, r5, r1
    c70e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c712:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c716:	f04f 0000 	mov.w	r0, #0
    c71a:	f04f 0100 	mov.w	r1, #0
    c71e:	0910      	lsrs	r0, r2, #4
    c720:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c724:	0919      	lsrs	r1, r3, #4
    c726:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c72a:	1814      	adds	r4, r2, r0
    c72c:	9402      	str	r4, [sp, #8]
    c72e:	414b      	adcs	r3, r1
    c730:	9303      	str	r3, [sp, #12]
    c732:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c736:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c73a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c73e:	f04f 0000 	mov.w	r0, #0
    c742:	f04f 0100 	mov.w	r1, #0
    c746:	0a10      	lsrs	r0, r2, #8
    c748:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c74c:	0a19      	lsrs	r1, r3, #8
    c74e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c752:	1814      	adds	r4, r2, r0
    c754:	9404      	str	r4, [sp, #16]
    c756:	414b      	adcs	r3, r1
    c758:	9305      	str	r3, [sp, #20]
    c75a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c75e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c762:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c766:	f04f 0000 	mov.w	r0, #0
    c76a:	f04f 0100 	mov.w	r1, #0
    c76e:	0c10      	lsrs	r0, r2, #16
    c770:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c774:	0c19      	lsrs	r1, r3, #16
    c776:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c77a:	1814      	adds	r4, r2, r0
    c77c:	9406      	str	r4, [sp, #24]
    c77e:	414b      	adcs	r3, r1
    c780:	9307      	str	r3, [sp, #28]
    c782:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c786:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c78a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c78e:	f04f 0000 	mov.w	r0, #0
    c792:	f04f 0100 	mov.w	r1, #0
    c796:	0018      	movs	r0, r3
    c798:	2100      	movs	r1, #0
    c79a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c79e:	1814      	adds	r4, r2, r0
    c7a0:	9408      	str	r4, [sp, #32]
    c7a2:	414b      	adcs	r3, r1
    c7a4:	9309      	str	r3, [sp, #36]	; 0x24
    c7a6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c7aa:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c7ae:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c7b2:	f04f 0200 	mov.w	r2, #0
    c7b6:	f04f 0300 	mov.w	r3, #0
    c7ba:	08c2      	lsrs	r2, r0, #3
    c7bc:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c7c0:	08cb      	lsrs	r3, r1, #3
    c7c2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c7c6:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c7ca:	4622      	mov	r2, r4
    c7cc:	462b      	mov	r3, r5
    c7ce:	f04f 0000 	mov.w	r0, #0
    c7d2:	f04f 0100 	mov.w	r1, #0
    c7d6:	0099      	lsls	r1, r3, #2
    c7d8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c7dc:	0090      	lsls	r0, r2, #2
    c7de:	4602      	mov	r2, r0
    c7e0:	460b      	mov	r3, r1
    c7e2:	1916      	adds	r6, r2, r4
    c7e4:	eb43 0705 	adc.w	r7, r3, r5
    c7e8:	19b3      	adds	r3, r6, r6
    c7ea:	930a      	str	r3, [sp, #40]	; 0x28
    c7ec:	eb47 0307 	adc.w	r3, r7, r7
    c7f0:	930b      	str	r3, [sp, #44]	; 0x2c
    c7f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c7f6:	4630      	mov	r0, r6
    c7f8:	4639      	mov	r1, r7
    c7fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c7fe:	1a14      	subs	r4, r2, r0
    c800:	940c      	str	r4, [sp, #48]	; 0x30
    c802:	eb63 0301 	sbc.w	r3, r3, r1
    c806:	930d      	str	r3, [sp, #52]	; 0x34
    c808:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c80c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c810:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c814:	f112 0806 	adds.w	r8, r2, #6
    c818:	f143 0900 	adc.w	r9, r3, #0
    c81c:	f04f 0200 	mov.w	r2, #0
    c820:	f04f 0300 	mov.w	r3, #0
    c824:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c828:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c82c:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c830:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c834:	1814      	adds	r4, r2, r0
    c836:	9400      	str	r4, [sp, #0]
    c838:	414b      	adcs	r3, r1
    c83a:	9301      	str	r3, [sp, #4]
    c83c:	e02a      	b.n	c894 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c83e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c840:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c844:	085a      	lsrs	r2, r3, #1
    c846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c848:	089b      	lsrs	r3, r3, #2
    c84a:	4413      	add	r3, r2
    c84c:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c84e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c850:	091b      	lsrs	r3, r3, #4
    c852:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c854:	4413      	add	r3, r2
    c856:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c858:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c85a:	0a1b      	lsrs	r3, r3, #8
    c85c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c85e:	4413      	add	r3, r2
    c860:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c862:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c864:	0c1b      	lsrs	r3, r3, #16
    c866:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c868:	4413      	add	r3, r2
    c86a:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c86c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c86e:	08db      	lsrs	r3, r3, #3
    c870:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c872:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c874:	4613      	mov	r3, r2
    c876:	009b      	lsls	r3, r3, #2
    c878:	4413      	add	r3, r2
    c87a:	005b      	lsls	r3, r3, #1
    c87c:	461a      	mov	r2, r3
    c87e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c880:	1a9b      	subs	r3, r3, r2
    c882:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c884:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c886:	3306      	adds	r3, #6
    c888:	091a      	lsrs	r2, r3, #4
    c88a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c88c:	4413      	add	r3, r2
    c88e:	2200      	movs	r2, #0
    c890:	9300      	str	r3, [sp, #0]
    c892:	9201      	str	r2, [sp, #4]
    }
}
    c894:	e9dd 2300 	ldrd	r2, r3, [sp]
    c898:	4610      	mov	r0, r2
    c89a:	4619      	mov	r1, r3
    c89c:	b018      	add	sp, #96	; 0x60
    c89e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c8a2:	4770      	bx	lr

0000c8a4 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c8a4:	b500      	push	{lr}
    c8a6:	b085      	sub	sp, #20
    c8a8:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c8ac:	9a00      	ldr	r2, [sp, #0]
    c8ae:	9b01      	ldr	r3, [sp, #4]
    c8b0:	4313      	orrs	r3, r2
    c8b2:	2b00      	cmp	r3, #0
    c8b4:	bf0c      	ite	eq
    c8b6:	2301      	moveq	r3, #1
    c8b8:	2300      	movne	r3, #0
    c8ba:	b2db      	uxtb	r3, r3
    c8bc:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c8be:	e008      	b.n	c8d2 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c8c0:	e9dd 0100 	ldrd	r0, r1, [sp]
    c8c4:	f7ff fefa 	bl	c6bc <divu64_10>
    c8c8:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c8cc:	9b03      	ldr	r3, [sp, #12]
    c8ce:	3301      	adds	r3, #1
    c8d0:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c8d2:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8d6:	4313      	orrs	r3, r2
    c8d8:	d1f2      	bne.n	c8c0 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c8da:	9b03      	ldr	r3, [sp, #12]
}
    c8dc:	4618      	mov	r0, r3
    c8de:	b005      	add	sp, #20
    c8e0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c8e4 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c8e4:	b530      	push	{r4, r5, lr}
    c8e6:	b083      	sub	sp, #12
    c8e8:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c8ec:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8f0:	2b00      	cmp	r3, #0
    c8f2:	da07      	bge.n	c904 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c8f4:	e9dd 2300 	ldrd	r2, r3, [sp]
    c8f8:	2100      	movs	r1, #0
    c8fa:	4254      	negs	r4, r2
    c8fc:	eb61 0503 	sbc.w	r5, r1, r3
    c900:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c904:	e9dd 2300 	ldrd	r2, r3, [sp]
    c908:	4610      	mov	r0, r2
    c90a:	4619      	mov	r1, r3
    c90c:	f7ff ffca 	bl	c8a4 <ndigits_in_u64>
    c910:	4603      	mov	r3, r0
}
    c912:	4618      	mov	r0, r3
    c914:	b003      	add	sp, #12
    c916:	bd30      	pop	{r4, r5, pc}

0000c918 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c918:	b084      	sub	sp, #16
    c91a:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c91e:	9a00      	ldr	r2, [sp, #0]
    c920:	9b01      	ldr	r3, [sp, #4]
    c922:	4313      	orrs	r3, r2
    c924:	2b00      	cmp	r3, #0
    c926:	bf0c      	ite	eq
    c928:	2301      	moveq	r3, #1
    c92a:	2300      	movne	r3, #0
    c92c:	b2db      	uxtb	r3, r3
    c92e:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c930:	e00e      	b.n	c950 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c932:	e9dd 0100 	ldrd	r0, r1, [sp]
    c936:	f04f 0200 	mov.w	r2, #0
    c93a:	f04f 0300 	mov.w	r3, #0
    c93e:	0902      	lsrs	r2, r0, #4
    c940:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c944:	090b      	lsrs	r3, r1, #4
    c946:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c94a:	9b03      	ldr	r3, [sp, #12]
    c94c:	3301      	adds	r3, #1
    c94e:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c950:	e9dd 2300 	ldrd	r2, r3, [sp]
    c954:	4313      	orrs	r3, r2
    c956:	d1ec      	bne.n	c932 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c958:	9b03      	ldr	r3, [sp, #12]
}
    c95a:	4618      	mov	r0, r3
    c95c:	b004      	add	sp, #16
    c95e:	4770      	bx	lr

0000c960 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c960:	b086      	sub	sp, #24
    c962:	9001      	str	r0, [sp, #4]
    c964:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c966:	2300      	movs	r3, #0
    c968:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c96c:	2300      	movs	r3, #0
    c96e:	9304      	str	r3, [sp, #16]
    c970:	2300      	movs	r3, #0
    c972:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c974:	9b01      	ldr	r3, [sp, #4]
    c976:	781b      	ldrb	r3, [r3, #0]
    c978:	2b2d      	cmp	r3, #45	; 0x2d
    c97a:	d11c      	bne.n	c9b6 <decstr_to_int+0x56>
    {
        bNeg = true;
    c97c:	2301      	movs	r3, #1
    c97e:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c982:	9b01      	ldr	r3, [sp, #4]
    c984:	3301      	adds	r3, #1
    c986:	9301      	str	r3, [sp, #4]
        uCnt++;
    c988:	9b03      	ldr	r3, [sp, #12]
    c98a:	3301      	adds	r3, #1
    c98c:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c98e:	e012      	b.n	c9b6 <decstr_to_int+0x56>
    {
        ++uCnt;
    c990:	9b03      	ldr	r3, [sp, #12]
    c992:	3301      	adds	r3, #1
    c994:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c996:	9a04      	ldr	r2, [sp, #16]
    c998:	4613      	mov	r3, r2
    c99a:	009b      	lsls	r3, r3, #2
    c99c:	4413      	add	r3, r2
    c99e:	005b      	lsls	r3, r3, #1
    c9a0:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c9a2:	9b01      	ldr	r3, [sp, #4]
    c9a4:	781b      	ldrb	r3, [r3, #0]
    c9a6:	461a      	mov	r2, r3
    c9a8:	9b04      	ldr	r3, [sp, #16]
    c9aa:	4413      	add	r3, r2
    c9ac:	3b30      	subs	r3, #48	; 0x30
    c9ae:	9304      	str	r3, [sp, #16]
        pcStr++;
    c9b0:	9b01      	ldr	r3, [sp, #4]
    c9b2:	3301      	adds	r3, #1
    c9b4:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9b6:	9b01      	ldr	r3, [sp, #4]
    c9b8:	781b      	ldrb	r3, [r3, #0]
    c9ba:	2b2f      	cmp	r3, #47	; 0x2f
    c9bc:	d903      	bls.n	c9c6 <decstr_to_int+0x66>
    c9be:	9b01      	ldr	r3, [sp, #4]
    c9c0:	781b      	ldrb	r3, [r3, #0]
    c9c2:	2b39      	cmp	r3, #57	; 0x39
    c9c4:	d9e4      	bls.n	c990 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c9c6:	9b00      	ldr	r3, [sp, #0]
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d002      	beq.n	c9d2 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c9cc:	9b00      	ldr	r3, [sp, #0]
    c9ce:	9a03      	ldr	r2, [sp, #12]
    c9d0:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c9d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c9d6:	2b00      	cmp	r3, #0
    c9d8:	d002      	beq.n	c9e0 <decstr_to_int+0x80>
    c9da:	9b04      	ldr	r3, [sp, #16]
    c9dc:	425b      	negs	r3, r3
    c9de:	e000      	b.n	c9e2 <decstr_to_int+0x82>
    c9e0:	9b04      	ldr	r3, [sp, #16]
}
    c9e2:	4618      	mov	r0, r3
    c9e4:	b006      	add	sp, #24
    c9e6:	4770      	bx	lr

0000c9e8 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c9e8:	b500      	push	{lr}
    c9ea:	b091      	sub	sp, #68	; 0x44
    c9ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c9f0:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c9f2:	2300      	movs	r3, #0
    c9f4:	930f      	str	r3, [sp, #60]	; 0x3c
    c9f6:	2300      	movs	r3, #0
    c9f8:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c9fe:	f7ff fe5d 	bl	c6bc <divu64_10>
    ca02:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    ca06:	9902      	ldr	r1, [sp, #8]
    ca08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca0a:	4613      	mov	r3, r2
    ca0c:	009b      	lsls	r3, r3, #2
    ca0e:	4413      	add	r3, r2
    ca10:	005b      	lsls	r3, r3, #1
    ca12:	1acb      	subs	r3, r1, r3
    ca14:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    ca16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca18:	b2da      	uxtb	r2, r3
    ca1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca1c:	1c59      	adds	r1, r3, #1
    ca1e:	910f      	str	r1, [sp, #60]	; 0x3c
    ca20:	3230      	adds	r2, #48	; 0x30
    ca22:	b2d2      	uxtb	r2, r2
    ca24:	3340      	adds	r3, #64	; 0x40
    ca26:	446b      	add	r3, sp
    ca28:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    ca2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ca30:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    ca34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca38:	4313      	orrs	r3, r2
    ca3a:	d1de      	bne.n	c9fa <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca3e:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    ca40:	9b01      	ldr	r3, [sp, #4]
    ca42:	2b00      	cmp	r3, #0
    ca44:	d010      	beq.n	ca68 <uint64_to_str+0x80>
    {
        while ( ix-- )
    ca46:	e007      	b.n	ca58 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    ca48:	9b01      	ldr	r3, [sp, #4]
    ca4a:	1c5a      	adds	r2, r3, #1
    ca4c:	9201      	str	r2, [sp, #4]
    ca4e:	a904      	add	r1, sp, #16
    ca50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ca52:	440a      	add	r2, r1
    ca54:	7812      	ldrb	r2, [r2, #0]
    ca56:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    ca58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca5a:	1e5a      	subs	r2, r3, #1
    ca5c:	920f      	str	r2, [sp, #60]	; 0x3c
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d1f2      	bne.n	ca48 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    ca62:	9b01      	ldr	r3, [sp, #4]
    ca64:	2200      	movs	r2, #0
    ca66:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    ca6a:	4618      	mov	r0, r3
    ca6c:	b011      	add	sp, #68	; 0x44
    ca6e:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca72 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    ca72:	b08c      	sub	sp, #48	; 0x30
    ca74:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ca78:	9201      	str	r2, [sp, #4]
    ca7a:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    ca7e:	2300      	movs	r3, #0
    ca80:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    ca82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca86:	4313      	orrs	r3, r2
    ca88:	d135      	bne.n	caf6 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    ca8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca8c:	1c5a      	adds	r2, r3, #1
    ca8e:	920b      	str	r2, [sp, #44]	; 0x2c
    ca90:	3330      	adds	r3, #48	; 0x30
    ca92:	446b      	add	r3, sp
    ca94:	2230      	movs	r2, #48	; 0x30
    ca96:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    ca9a:	e02c      	b.n	caf6 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    ca9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    caa0:	f003 030f 	and.w	r3, r3, #15
    caa4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    caa8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    caac:	2b09      	cmp	r3, #9
    caae:	d90b      	bls.n	cac8 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cab0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cab4:	2b00      	cmp	r3, #0
    cab6:	d001      	beq.n	cabc <uint64_to_hexstr+0x4a>
    cab8:	2227      	movs	r2, #39	; 0x27
    caba:	e000      	b.n	cabe <uint64_to_hexstr+0x4c>
    cabc:	2207      	movs	r2, #7
    cabe:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cac2:	4413      	add	r3, r2
    cac4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caca:	1c5a      	adds	r2, r3, #1
    cacc:	920b      	str	r2, [sp, #44]	; 0x2c
    cace:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    cad2:	3230      	adds	r2, #48	; 0x30
    cad4:	b2d2      	uxtb	r2, r2
    cad6:	3330      	adds	r3, #48	; 0x30
    cad8:	446b      	add	r3, sp
    cada:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cae2:	f04f 0200 	mov.w	r2, #0
    cae6:	f04f 0300 	mov.w	r3, #0
    caea:	0902      	lsrs	r2, r0, #4
    caec:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    caf0:	090b      	lsrs	r3, r1, #4
    caf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    caf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cafa:	4313      	orrs	r3, r2
    cafc:	d1ce      	bne.n	ca9c <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb00:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cb02:	9b01      	ldr	r3, [sp, #4]
    cb04:	2b00      	cmp	r3, #0
    cb06:	d010      	beq.n	cb2a <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cb08:	e007      	b.n	cb1a <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cb0a:	9b01      	ldr	r3, [sp, #4]
    cb0c:	1c5a      	adds	r2, r3, #1
    cb0e:	9201      	str	r2, [sp, #4]
    cb10:	a904      	add	r1, sp, #16
    cb12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cb14:	440a      	add	r2, r1
    cb16:	7812      	ldrb	r2, [r2, #0]
    cb18:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cb1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb1c:	1e5a      	subs	r2, r3, #1
    cb1e:	920b      	str	r2, [sp, #44]	; 0x2c
    cb20:	2b00      	cmp	r3, #0
    cb22:	d1f2      	bne.n	cb0a <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cb24:	9b01      	ldr	r3, [sp, #4]
    cb26:	2200      	movs	r2, #0
    cb28:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cb2c:	4618      	mov	r0, r3
    cb2e:	b00c      	add	sp, #48	; 0x30
    cb30:	4770      	bx	lr

0000cb32 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cb32:	b084      	sub	sp, #16
    cb34:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    cb36:	2300      	movs	r3, #0
    cb38:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    cb3a:	9b01      	ldr	r3, [sp, #4]
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	d104      	bne.n	cb4a <simple_strlen+0x18>
    {
        return ui32RetVal;
    cb40:	9b03      	ldr	r3, [sp, #12]
    cb42:	e009      	b.n	cb58 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cb44:	9b03      	ldr	r3, [sp, #12]
    cb46:	3301      	adds	r3, #1
    cb48:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    cb4a:	9b01      	ldr	r3, [sp, #4]
    cb4c:	1c5a      	adds	r2, r3, #1
    cb4e:	9201      	str	r2, [sp, #4]
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	2b00      	cmp	r3, #0
    cb54:	d1f6      	bne.n	cb44 <simple_strlen+0x12>
    }
    return ui32RetVal;
    cb56:	9b03      	ldr	r3, [sp, #12]
}
    cb58:	4618      	mov	r0, r3
    cb5a:	b004      	add	sp, #16
    cb5c:	4770      	bx	lr

0000cb5e <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cb5e:	b086      	sub	sp, #24
    cb60:	9003      	str	r0, [sp, #12]
    cb62:	460b      	mov	r3, r1
    cb64:	9201      	str	r2, [sp, #4]
    cb66:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cb6a:	2300      	movs	r3, #0
    cb6c:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cb6e:	9b01      	ldr	r3, [sp, #4]
    cb70:	2b00      	cmp	r3, #0
    cb72:	dc0d      	bgt.n	cb90 <padbuffer+0x32>
    {
        return i32Cnt;
    cb74:	9b05      	ldr	r3, [sp, #20]
    cb76:	e011      	b.n	cb9c <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cb78:	9b03      	ldr	r3, [sp, #12]
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d005      	beq.n	cb8a <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cb7e:	9b03      	ldr	r3, [sp, #12]
    cb80:	1c5a      	adds	r2, r3, #1
    cb82:	9203      	str	r2, [sp, #12]
    cb84:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb88:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cb8a:	9b05      	ldr	r3, [sp, #20]
    cb8c:	3301      	adds	r3, #1
    cb8e:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cb90:	9b01      	ldr	r3, [sp, #4]
    cb92:	1e5a      	subs	r2, r3, #1
    cb94:	9201      	str	r2, [sp, #4]
    cb96:	2b00      	cmp	r3, #0
    cb98:	d1ee      	bne.n	cb78 <padbuffer+0x1a>
    }

    return i32Cnt;
    cb9a:	9b05      	ldr	r3, [sp, #20]
}
    cb9c:	4618      	mov	r0, r3
    cb9e:	b006      	add	sp, #24
    cba0:	4770      	bx	lr
	...

0000cba4 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cba6:	b08f      	sub	sp, #60	; 0x3c
    cba8:	ed8d 0a03 	vstr	s0, [sp, #12]
    cbac:	9002      	str	r0, [sp, #8]
    cbae:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cbb0:	9b02      	ldr	r3, [sp, #8]
    cbb2:	681b      	ldr	r3, [r3, #0]
    cbb4:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbb8:	2b03      	cmp	r3, #3
    cbba:	dc02      	bgt.n	cbc2 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cbbc:	f06f 0302 	mvn.w	r3, #2
    cbc0:	e0e9      	b.n	cd96 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cbc2:	eddd 7a03 	vldr	s15, [sp, #12]
    cbc6:	eef5 7a40 	vcmp.f32	s15, #0.0
    cbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cbce:	d104      	bne.n	cbda <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cbd0:	9b02      	ldr	r3, [sp, #8]
    cbd2:	4a72      	ldr	r2, [pc, #456]	; (cd9c <ftoa+0x1f8>)
    cbd4:	601a      	str	r2, [r3, #0]
        return 3;
    cbd6:	2303      	movs	r3, #3
    cbd8:	e0dd      	b.n	cd96 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cbda:	9b02      	ldr	r3, [sp, #8]
    cbdc:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cbde:	9b03      	ldr	r3, [sp, #12]
    cbe0:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cbe2:	9b04      	ldr	r3, [sp, #16]
    cbe4:	15db      	asrs	r3, r3, #23
    cbe6:	b2db      	uxtb	r3, r3
    cbe8:	3b7f      	subs	r3, #127	; 0x7f
    cbea:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cbec:	9b04      	ldr	r3, [sp, #16]
    cbee:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cbf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cbf6:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cbf8:	2300      	movs	r3, #0
    cbfa:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cbfc:	2300      	movs	r3, #0
    cbfe:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cc00:	9b07      	ldr	r3, [sp, #28]
    cc02:	2b1e      	cmp	r3, #30
    cc04:	dd02      	ble.n	cc0c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cc06:	f06f 0301 	mvn.w	r3, #1
    cc0a:	e0c4      	b.n	cd96 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cc0c:	9b07      	ldr	r3, [sp, #28]
    cc0e:	f113 0f17 	cmn.w	r3, #23
    cc12:	da02      	bge.n	cc1a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cc14:	f04f 33ff 	mov.w	r3, #4294967295
    cc18:	e0bd      	b.n	cd96 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cc1a:	9b07      	ldr	r3, [sp, #28]
    cc1c:	2b16      	cmp	r3, #22
    cc1e:	dd06      	ble.n	cc2e <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cc20:	9b07      	ldr	r3, [sp, #28]
    cc22:	3b17      	subs	r3, #23
    cc24:	9a06      	ldr	r2, [sp, #24]
    cc26:	fa02 f303 	lsl.w	r3, r2, r3
    cc2a:	930d      	str	r3, [sp, #52]	; 0x34
    cc2c:	e01a      	b.n	cc64 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    cc2e:	9b07      	ldr	r3, [sp, #28]
    cc30:	2b00      	cmp	r3, #0
    cc32:	db0f      	blt.n	cc54 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cc34:	9b07      	ldr	r3, [sp, #28]
    cc36:	f1c3 0317 	rsb	r3, r3, #23
    cc3a:	9a06      	ldr	r2, [sp, #24]
    cc3c:	fa42 f303 	asr.w	r3, r2, r3
    cc40:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cc42:	9b07      	ldr	r3, [sp, #28]
    cc44:	3301      	adds	r3, #1
    cc46:	9a06      	ldr	r2, [sp, #24]
    cc48:	fa02 f303 	lsl.w	r3, r2, r3
    cc4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc50:	930c      	str	r3, [sp, #48]	; 0x30
    cc52:	e007      	b.n	cc64 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cc54:	9b06      	ldr	r3, [sp, #24]
    cc56:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cc5a:	9b07      	ldr	r3, [sp, #28]
    cc5c:	43db      	mvns	r3, r3
    cc5e:	fa42 f303 	asr.w	r3, r2, r3
    cc62:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cc64:	9b04      	ldr	r3, [sp, #16]
    cc66:	2b00      	cmp	r3, #0
    cc68:	da04      	bge.n	cc74 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    cc6a:	9b02      	ldr	r3, [sp, #8]
    cc6c:	1c5a      	adds	r2, r3, #1
    cc6e:	9202      	str	r2, [sp, #8]
    cc70:	222d      	movs	r2, #45	; 0x2d
    cc72:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cc74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc76:	2b00      	cmp	r3, #0
    cc78:	d105      	bne.n	cc86 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    cc7a:	9b02      	ldr	r3, [sp, #8]
    cc7c:	1c5a      	adds	r2, r3, #1
    cc7e:	9202      	str	r2, [sp, #8]
    cc80:	2230      	movs	r2, #48	; 0x30
    cc82:	701a      	strb	r2, [r3, #0]
    cc84:	e023      	b.n	ccce <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cc86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc88:	2b00      	cmp	r3, #0
    cc8a:	dd09      	ble.n	cca0 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cc8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc8e:	17da      	asrs	r2, r3, #31
    cc90:	461e      	mov	r6, r3
    cc92:	4617      	mov	r7, r2
    cc94:	9a02      	ldr	r2, [sp, #8]
    cc96:	4630      	mov	r0, r6
    cc98:	4639      	mov	r1, r7
    cc9a:	f7ff fea5 	bl	c9e8 <uint64_to_str>
    cc9e:	e012      	b.n	ccc6 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cca0:	9b02      	ldr	r3, [sp, #8]
    cca2:	1c5a      	adds	r2, r3, #1
    cca4:	9202      	str	r2, [sp, #8]
    cca6:	222d      	movs	r2, #45	; 0x2d
    cca8:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    ccaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccac:	425b      	negs	r3, r3
    ccae:	17da      	asrs	r2, r3, #31
    ccb0:	461c      	mov	r4, r3
    ccb2:	4615      	mov	r5, r2
    ccb4:	9a02      	ldr	r2, [sp, #8]
    ccb6:	4620      	mov	r0, r4
    ccb8:	4629      	mov	r1, r5
    ccba:	f7ff fe95 	bl	c9e8 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ccbe:	e002      	b.n	ccc6 <ftoa+0x122>
        {
            pcBuf++;
    ccc0:	9b02      	ldr	r3, [sp, #8]
    ccc2:	3301      	adds	r3, #1
    ccc4:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    ccc6:	9b02      	ldr	r3, [sp, #8]
    ccc8:	781b      	ldrb	r3, [r3, #0]
    ccca:	2b00      	cmp	r3, #0
    cccc:	d1f8      	bne.n	ccc0 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ccce:	9b02      	ldr	r3, [sp, #8]
    ccd0:	1c5a      	adds	r2, r3, #1
    ccd2:	9202      	str	r2, [sp, #8]
    ccd4:	222e      	movs	r2, #46	; 0x2e
    ccd6:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ccd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d105      	bne.n	ccea <ftoa+0x146>
    {
        *pcBuf++ = '0';
    ccde:	9b02      	ldr	r3, [sp, #8]
    cce0:	1c5a      	adds	r2, r3, #1
    cce2:	9202      	str	r2, [sp, #8]
    cce4:	2230      	movs	r2, #48	; 0x30
    cce6:	701a      	strb	r2, [r3, #0]
    cce8:	e04f      	b.n	cd8a <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ccea:	9a02      	ldr	r2, [sp, #8]
    ccec:	9b08      	ldr	r3, [sp, #32]
    ccee:	1ad3      	subs	r3, r2, r3
    ccf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ccf2:	1ad3      	subs	r3, r2, r3
    ccf4:	3b01      	subs	r3, #1
    ccf6:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ccf8:	9a05      	ldr	r2, [sp, #20]
    ccfa:	9b01      	ldr	r3, [sp, #4]
    ccfc:	4293      	cmp	r3, r2
    ccfe:	bfa8      	it	ge
    cd00:	4613      	movge	r3, r2
    cd02:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cd04:	2300      	movs	r3, #0
    cd06:	930a      	str	r3, [sp, #40]	; 0x28
    cd08:	e015      	b.n	cd36 <ftoa+0x192>
        {
            i32FracPart *= 10;
    cd0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd0c:	4613      	mov	r3, r2
    cd0e:	009b      	lsls	r3, r3, #2
    cd10:	4413      	add	r3, r2
    cd12:	005b      	lsls	r3, r3, #1
    cd14:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cd16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd18:	161b      	asrs	r3, r3, #24
    cd1a:	b2da      	uxtb	r2, r3
    cd1c:	9b02      	ldr	r3, [sp, #8]
    cd1e:	1c59      	adds	r1, r3, #1
    cd20:	9102      	str	r1, [sp, #8]
    cd22:	3230      	adds	r2, #48	; 0x30
    cd24:	b2d2      	uxtb	r2, r2
    cd26:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd2e:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd32:	3301      	adds	r3, #1
    cd34:	930a      	str	r3, [sp, #40]	; 0x28
    cd36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cd38:	9b05      	ldr	r3, [sp, #20]
    cd3a:	429a      	cmp	r2, r3
    cd3c:	dbe5      	blt.n	cd0a <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cd3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd40:	4613      	mov	r3, r2
    cd42:	009b      	lsls	r3, r3, #2
    cd44:	4413      	add	r3, r2
    cd46:	005b      	lsls	r3, r3, #1
    cd48:	161b      	asrs	r3, r3, #24
    cd4a:	2b04      	cmp	r3, #4
    cd4c:	dd1d      	ble.n	cd8a <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cd4e:	9b02      	ldr	r3, [sp, #8]
    cd50:	3b01      	subs	r3, #1
    cd52:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd54:	e015      	b.n	cd82 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cd56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd58:	781b      	ldrb	r3, [r3, #0]
    cd5a:	2b2e      	cmp	r3, #46	; 0x2e
    cd5c:	d00e      	beq.n	cd7c <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cd5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd60:	781b      	ldrb	r3, [r3, #0]
    cd62:	2b39      	cmp	r3, #57	; 0x39
    cd64:	d103      	bne.n	cd6e <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd68:	2230      	movs	r2, #48	; 0x30
    cd6a:	701a      	strb	r2, [r3, #0]
    cd6c:	e006      	b.n	cd7c <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd70:	781b      	ldrb	r3, [r3, #0]
    cd72:	3301      	adds	r3, #1
    cd74:	b2da      	uxtb	r2, r3
    cd76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd78:	701a      	strb	r2, [r3, #0]
                    break;
    cd7a:	e006      	b.n	cd8a <ftoa+0x1e6>
                }
                pcBuftmp--;
    cd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd7e:	3b01      	subs	r3, #1
    cd80:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cd82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd84:	9b08      	ldr	r3, [sp, #32]
    cd86:	429a      	cmp	r2, r3
    cd88:	d2e5      	bcs.n	cd56 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cd8a:	9b02      	ldr	r3, [sp, #8]
    cd8c:	2200      	movs	r2, #0
    cd8e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    cd90:	9a02      	ldr	r2, [sp, #8]
    cd92:	9b08      	ldr	r3, [sp, #32]
    cd94:	1ad3      	subs	r3, r2, r3
} // ftoa()
    cd96:	4618      	mov	r0, r3
    cd98:	b00f      	add	sp, #60	; 0x3c
    cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd9c:	00302e30 	.word	0x00302e30

0000cda0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cda4:	b097      	sub	sp, #92	; 0x5c
    cda6:	9003      	str	r0, [sp, #12]
    cda8:	9102      	str	r1, [sp, #8]
    cdaa:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cdac:	2300      	movs	r3, #0
    cdae:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cdb0:	2300      	movs	r3, #0
    cdb2:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    cdb4:	e2e9      	b.n	d38a <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cdb6:	2306      	movs	r3, #6
    cdb8:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    cdba:	9b02      	ldr	r3, [sp, #8]
    cdbc:	781b      	ldrb	r3, [r3, #0]
    cdbe:	2b25      	cmp	r3, #37	; 0x25
    cdc0:	d01f      	beq.n	ce02 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cdc2:	9b03      	ldr	r3, [sp, #12]
    cdc4:	2b00      	cmp	r3, #0
    cdc6:	d015      	beq.n	cdf4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cdc8:	9b02      	ldr	r3, [sp, #8]
    cdca:	781b      	ldrb	r3, [r3, #0]
    cdcc:	2b0a      	cmp	r3, #10
    cdce:	d10b      	bne.n	cde8 <am_util_stdio_vsprintf+0x48>
    cdd0:	4ba8      	ldr	r3, [pc, #672]	; (d074 <am_util_stdio_vsprintf+0x2d4>)
    cdd2:	781b      	ldrb	r3, [r3, #0]
    cdd4:	2b00      	cmp	r3, #0
    cdd6:	d007      	beq.n	cde8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cdd8:	9b03      	ldr	r3, [sp, #12]
    cdda:	1c5a      	adds	r2, r3, #1
    cddc:	9203      	str	r2, [sp, #12]
    cdde:	220d      	movs	r2, #13
    cde0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cde2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cde4:	3301      	adds	r3, #1
    cde6:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    cde8:	9b03      	ldr	r3, [sp, #12]
    cdea:	1c5a      	adds	r2, r3, #1
    cdec:	9203      	str	r2, [sp, #12]
    cdee:	9a02      	ldr	r2, [sp, #8]
    cdf0:	7812      	ldrb	r2, [r2, #0]
    cdf2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cdf4:	9b02      	ldr	r3, [sp, #8]
    cdf6:	3301      	adds	r3, #1
    cdf8:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    cdfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cdfc:	3301      	adds	r3, #1
    cdfe:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    ce00:	e2c3      	b.n	d38a <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    ce02:	9b02      	ldr	r3, [sp, #8]
    ce04:	3301      	adds	r3, #1
    ce06:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    ce08:	2300      	movs	r3, #0
    ce0a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    ce0e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce12:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    ce16:	2320      	movs	r3, #32
    ce18:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    ce1c:	9b02      	ldr	r3, [sp, #8]
    ce1e:	781b      	ldrb	r3, [r3, #0]
    ce20:	2b30      	cmp	r3, #48	; 0x30
    ce22:	d105      	bne.n	ce30 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    ce24:	2330      	movs	r3, #48	; 0x30
    ce26:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    ce2a:	9b02      	ldr	r3, [sp, #8]
    ce2c:	3301      	adds	r3, #1
    ce2e:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ce30:	ab05      	add	r3, sp, #20
    ce32:	4619      	mov	r1, r3
    ce34:	9802      	ldr	r0, [sp, #8]
    ce36:	f7ff fd93 	bl	c960 <decstr_to_int>
    ce3a:	4603      	mov	r3, r0
    ce3c:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    ce3e:	9b05      	ldr	r3, [sp, #20]
    ce40:	9a02      	ldr	r2, [sp, #8]
    ce42:	4413      	add	r3, r2
    ce44:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ce46:	9b02      	ldr	r3, [sp, #8]
    ce48:	781b      	ldrb	r3, [r3, #0]
    ce4a:	2b73      	cmp	r3, #115	; 0x73
    ce4c:	d005      	beq.n	ce5a <am_util_stdio_vsprintf+0xba>
    ce4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce50:	2b00      	cmp	r3, #0
    ce52:	da02      	bge.n	ce5a <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    ce54:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce56:	425b      	negs	r3, r3
    ce58:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ce5a:	9b02      	ldr	r3, [sp, #8]
    ce5c:	781b      	ldrb	r3, [r3, #0]
    ce5e:	2b2e      	cmp	r3, #46	; 0x2e
    ce60:	d10d      	bne.n	ce7e <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    ce62:	9b02      	ldr	r3, [sp, #8]
    ce64:	3301      	adds	r3, #1
    ce66:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    ce68:	ab05      	add	r3, sp, #20
    ce6a:	4619      	mov	r1, r3
    ce6c:	9802      	ldr	r0, [sp, #8]
    ce6e:	f7ff fd77 	bl	c960 <decstr_to_int>
    ce72:	4603      	mov	r3, r0
    ce74:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    ce76:	9b05      	ldr	r3, [sp, #20]
    ce78:	9a02      	ldr	r2, [sp, #8]
    ce7a:	4413      	add	r3, r2
    ce7c:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    ce7e:	9b02      	ldr	r3, [sp, #8]
    ce80:	781b      	ldrb	r3, [r3, #0]
    ce82:	2b6c      	cmp	r3, #108	; 0x6c
    ce84:	d10c      	bne.n	cea0 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    ce86:	9b02      	ldr	r3, [sp, #8]
    ce88:	3301      	adds	r3, #1
    ce8a:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    ce8c:	9b02      	ldr	r3, [sp, #8]
    ce8e:	781b      	ldrb	r3, [r3, #0]
    ce90:	2b6c      	cmp	r3, #108	; 0x6c
    ce92:	d105      	bne.n	cea0 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    ce94:	9b02      	ldr	r3, [sp, #8]
    ce96:	3301      	adds	r3, #1
    ce98:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    ce9a:	2301      	movs	r3, #1
    ce9c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cea0:	9b02      	ldr	r3, [sp, #8]
    cea2:	781b      	ldrb	r3, [r3, #0]
    cea4:	3b46      	subs	r3, #70	; 0x46
    cea6:	2b32      	cmp	r3, #50	; 0x32
    cea8:	f200 825c 	bhi.w	d364 <am_util_stdio_vsprintf+0x5c4>
    ceac:	a201      	add	r2, pc, #4	; (adr r2, ceb4 <am_util_stdio_vsprintf+0x114>)
    ceae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ceb2:	bf00      	nop
    ceb4:	0000d2eb 	.word	0x0000d2eb
    ceb8:	0000d365 	.word	0x0000d365
    cebc:	0000d365 	.word	0x0000d365
    cec0:	0000d365 	.word	0x0000d365
    cec4:	0000d365 	.word	0x0000d365
    cec8:	0000d365 	.word	0x0000d365
    cecc:	0000d365 	.word	0x0000d365
    ced0:	0000d365 	.word	0x0000d365
    ced4:	0000d365 	.word	0x0000d365
    ced8:	0000d365 	.word	0x0000d365
    cedc:	0000d365 	.word	0x0000d365
    cee0:	0000d365 	.word	0x0000d365
    cee4:	0000d365 	.word	0x0000d365
    cee8:	0000d365 	.word	0x0000d365
    ceec:	0000d365 	.word	0x0000d365
    cef0:	0000d365 	.word	0x0000d365
    cef4:	0000d365 	.word	0x0000d365
    cef8:	0000d365 	.word	0x0000d365
    cefc:	0000d07f 	.word	0x0000d07f
    cf00:	0000d365 	.word	0x0000d365
    cf04:	0000d365 	.word	0x0000d365
    cf08:	0000d365 	.word	0x0000d365
    cf0c:	0000d365 	.word	0x0000d365
    cf10:	0000d365 	.word	0x0000d365
    cf14:	0000d365 	.word	0x0000d365
    cf18:	0000d365 	.word	0x0000d365
    cf1c:	0000d365 	.word	0x0000d365
    cf20:	0000d365 	.word	0x0000d365
    cf24:	0000d365 	.word	0x0000d365
    cf28:	0000cf81 	.word	0x0000cf81
    cf2c:	0000d1af 	.word	0x0000d1af
    cf30:	0000d365 	.word	0x0000d365
    cf34:	0000d2eb 	.word	0x0000d2eb
    cf38:	0000d365 	.word	0x0000d365
    cf3c:	0000d365 	.word	0x0000d365
    cf40:	0000d1af 	.word	0x0000d1af
    cf44:	0000d365 	.word	0x0000d365
    cf48:	0000d365 	.word	0x0000d365
    cf4c:	0000d365 	.word	0x0000d365
    cf50:	0000d365 	.word	0x0000d365
    cf54:	0000d365 	.word	0x0000d365
    cf58:	0000d365 	.word	0x0000d365
    cf5c:	0000d365 	.word	0x0000d365
    cf60:	0000d365 	.word	0x0000d365
    cf64:	0000d365 	.word	0x0000d365
    cf68:	0000cfa7 	.word	0x0000cfa7
    cf6c:	0000d365 	.word	0x0000d365
    cf70:	0000d119 	.word	0x0000d119
    cf74:	0000d365 	.word	0x0000d365
    cf78:	0000d365 	.word	0x0000d365
    cf7c:	0000d079 	.word	0x0000d079
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cf80:	9b01      	ldr	r3, [sp, #4]
    cf82:	1d1a      	adds	r2, r3, #4
    cf84:	9201      	str	r2, [sp, #4]
    cf86:	681b      	ldr	r3, [r3, #0]
    cf88:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cf8c:	9b03      	ldr	r3, [sp, #12]
    cf8e:	2b00      	cmp	r3, #0
    cf90:	d005      	beq.n	cf9e <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cf92:	9b03      	ldr	r3, [sp, #12]
    cf94:	1c5a      	adds	r2, r3, #1
    cf96:	9203      	str	r2, [sp, #12]
    cf98:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cf9c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cf9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cfa0:	3301      	adds	r3, #1
    cfa2:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cfa4:	e1ee      	b.n	d384 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cfa6:	9b01      	ldr	r3, [sp, #4]
    cfa8:	1d1a      	adds	r2, r3, #4
    cfaa:	9201      	str	r2, [sp, #4]
    cfac:	681b      	ldr	r3, [r3, #0]
    cfae:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cfb0:	9815      	ldr	r0, [sp, #84]	; 0x54
    cfb2:	f7ff fdbe 	bl	cb32 <simple_strlen>
    cfb6:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cfb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfba:	2b00      	cmp	r3, #0
    cfbc:	dd2e      	ble.n	d01c <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cfbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cfc2:	429a      	cmp	r2, r3
    cfc4:	d22a      	bcs.n	d01c <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cfc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfca:	1ad3      	subs	r3, r2, r3
    cfcc:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfce:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cfd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfd4:	4619      	mov	r1, r3
    cfd6:	9803      	ldr	r0, [sp, #12]
    cfd8:	f7ff fdc1 	bl	cb5e <padbuffer>
    cfdc:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cfde:	9b03      	ldr	r3, [sp, #12]
    cfe0:	2b00      	cmp	r3, #0
    cfe2:	d001      	beq.n	cfe8 <am_util_stdio_vsprintf+0x248>
    cfe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfe6:	e000      	b.n	cfea <am_util_stdio_vsprintf+0x24a>
    cfe8:	2300      	movs	r3, #0
    cfea:	9a03      	ldr	r2, [sp, #12]
    cfec:	4413      	add	r3, r2
    cfee:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cff0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cff4:	4413      	add	r3, r2
    cff6:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cff8:	2300      	movs	r3, #0
    cffa:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cffc:	e00e      	b.n	d01c <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    cffe:	9b03      	ldr	r3, [sp, #12]
    d000:	2b00      	cmp	r3, #0
    d002:	d005      	beq.n	d010 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d004:	9b03      	ldr	r3, [sp, #12]
    d006:	1c5a      	adds	r2, r3, #1
    d008:	9203      	str	r2, [sp, #12]
    d00a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d00c:	7812      	ldrb	r2, [r2, #0]
    d00e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d010:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d012:	3301      	adds	r3, #1
    d014:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d016:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d018:	3301      	adds	r3, #1
    d01a:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d01c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d01e:	781b      	ldrb	r3, [r3, #0]
    d020:	2b00      	cmp	r3, #0
    d022:	d1ec      	bne.n	cffe <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d024:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d026:	2b00      	cmp	r3, #0
    d028:	f000 81a9 	beq.w	d37e <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d02e:	425b      	negs	r3, r3
    d030:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d032:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d036:	429a      	cmp	r2, r3
    d038:	f080 81a1 	bcs.w	d37e <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d03c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d040:	1ad3      	subs	r3, r2, r3
    d042:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d044:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d048:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d04a:	4619      	mov	r1, r3
    d04c:	9803      	ldr	r0, [sp, #12]
    d04e:	f7ff fd86 	bl	cb5e <padbuffer>
    d052:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d054:	9b03      	ldr	r3, [sp, #12]
    d056:	2b00      	cmp	r3, #0
    d058:	d001      	beq.n	d05e <am_util_stdio_vsprintf+0x2be>
    d05a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d05c:	e000      	b.n	d060 <am_util_stdio_vsprintf+0x2c0>
    d05e:	2300      	movs	r3, #0
    d060:	9a03      	ldr	r2, [sp, #12]
    d062:	4413      	add	r3, r2
    d064:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d066:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d068:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d06a:	4413      	add	r3, r2
    d06c:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d06e:	2300      	movs	r3, #0
    d070:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d072:	e184      	b.n	d37e <am_util_stdio_vsprintf+0x5de>
    d074:	10001750 	.word	0x10001750

            case 'x':
                bLower = true;
    d078:	2301      	movs	r3, #1
    d07a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d07e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d082:	2b00      	cmp	r3, #0
    d084:	d009      	beq.n	d09a <am_util_stdio_vsprintf+0x2fa>
    d086:	9b01      	ldr	r3, [sp, #4]
    d088:	3307      	adds	r3, #7
    d08a:	f023 0307 	bic.w	r3, r3, #7
    d08e:	f103 0208 	add.w	r2, r3, #8
    d092:	9201      	str	r2, [sp, #4]
    d094:	e9d3 4500 	ldrd	r4, r5, [r3]
    d098:	e006      	b.n	d0a8 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d09a:	9b01      	ldr	r3, [sp, #4]
    d09c:	1d1a      	adds	r2, r3, #4
    d09e:	9201      	str	r2, [sp, #4]
    d0a0:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0a2:	2200      	movs	r2, #0
    d0a4:	461c      	mov	r4, r3
    d0a6:	4615      	mov	r5, r2
    d0a8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d0ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0ae:	2b00      	cmp	r3, #0
    d0b0:	d01e      	beq.n	d0f0 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d0b2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0b6:	f7ff fc2f 	bl	c918 <ndigits_in_hex>
    d0ba:	4602      	mov	r2, r0
    d0bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0be:	1a9b      	subs	r3, r3, r2
    d0c0:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0c2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d0c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d0c8:	4619      	mov	r1, r3
    d0ca:	9803      	ldr	r0, [sp, #12]
    d0cc:	f7ff fd47 	bl	cb5e <padbuffer>
    d0d0:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d0d2:	9b03      	ldr	r3, [sp, #12]
    d0d4:	2b00      	cmp	r3, #0
    d0d6:	d001      	beq.n	d0dc <am_util_stdio_vsprintf+0x33c>
    d0d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0da:	e000      	b.n	d0de <am_util_stdio_vsprintf+0x33e>
    d0dc:	2300      	movs	r3, #0
    d0de:	9a03      	ldr	r2, [sp, #12]
    d0e0:	4413      	add	r3, r2
    d0e2:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0e8:	4413      	add	r3, r2
    d0ea:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d0ec:	2300      	movs	r3, #0
    d0ee:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d0f0:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d0f4:	9a03      	ldr	r2, [sp, #12]
    d0f6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d0fa:	f7ff fcba 	bl	ca72 <uint64_to_hexstr>
    d0fe:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d100:	9b03      	ldr	r3, [sp, #12]
    d102:	2b00      	cmp	r3, #0
    d104:	d003      	beq.n	d10e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d108:	9a03      	ldr	r2, [sp, #12]
    d10a:	4413      	add	r3, r2
    d10c:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d10e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d110:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d112:	4413      	add	r3, r2
    d114:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d116:	e135      	b.n	d384 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d118:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d11c:	2b00      	cmp	r3, #0
    d11e:	d009      	beq.n	d134 <am_util_stdio_vsprintf+0x394>
    d120:	9b01      	ldr	r3, [sp, #4]
    d122:	3307      	adds	r3, #7
    d124:	f023 0307 	bic.w	r3, r3, #7
    d128:	f103 0208 	add.w	r2, r3, #8
    d12c:	9201      	str	r2, [sp, #4]
    d12e:	e9d3 6700 	ldrd	r6, r7, [r3]
    d132:	e006      	b.n	d142 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d134:	9b01      	ldr	r3, [sp, #4]
    d136:	1d1a      	adds	r2, r3, #4
    d138:	9201      	str	r2, [sp, #4]
    d13a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d13c:	2200      	movs	r2, #0
    d13e:	461e      	mov	r6, r3
    d140:	4617      	mov	r7, r2
    d142:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d146:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d148:	2b00      	cmp	r3, #0
    d14a:	d01e      	beq.n	d18a <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d14c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d150:	f7ff fba8 	bl	c8a4 <ndigits_in_u64>
    d154:	4602      	mov	r2, r0
    d156:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d158:	1a9b      	subs	r3, r3, r2
    d15a:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d15c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d160:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d162:	4619      	mov	r1, r3
    d164:	9803      	ldr	r0, [sp, #12]
    d166:	f7ff fcfa 	bl	cb5e <padbuffer>
    d16a:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d16c:	9b03      	ldr	r3, [sp, #12]
    d16e:	2b00      	cmp	r3, #0
    d170:	d001      	beq.n	d176 <am_util_stdio_vsprintf+0x3d6>
    d172:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d174:	e000      	b.n	d178 <am_util_stdio_vsprintf+0x3d8>
    d176:	2300      	movs	r3, #0
    d178:	9a03      	ldr	r2, [sp, #12]
    d17a:	4413      	add	r3, r2
    d17c:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d17e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d180:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d182:	4413      	add	r3, r2
    d184:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d186:	2300      	movs	r3, #0
    d188:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d18a:	9a03      	ldr	r2, [sp, #12]
    d18c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d190:	f7ff fc2a 	bl	c9e8 <uint64_to_str>
    d194:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d196:	9b03      	ldr	r3, [sp, #12]
    d198:	2b00      	cmp	r3, #0
    d19a:	d003      	beq.n	d1a4 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d19c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d19e:	9a03      	ldr	r2, [sp, #12]
    d1a0:	4413      	add	r3, r2
    d1a2:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1a8:	4413      	add	r3, r2
    d1aa:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d1ac:	e0ea      	b.n	d384 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1ae:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	d009      	beq.n	d1ca <am_util_stdio_vsprintf+0x42a>
    d1b6:	9b01      	ldr	r3, [sp, #4]
    d1b8:	3307      	adds	r3, #7
    d1ba:	f023 0307 	bic.w	r3, r3, #7
    d1be:	f103 0208 	add.w	r2, r3, #8
    d1c2:	9201      	str	r2, [sp, #4]
    d1c4:	e9d3 8900 	ldrd	r8, r9, [r3]
    d1c8:	e006      	b.n	d1d8 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d1ca:	9b01      	ldr	r3, [sp, #4]
    d1cc:	1d1a      	adds	r2, r3, #4
    d1ce:	9201      	str	r2, [sp, #4]
    d1d0:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1d2:	17da      	asrs	r2, r3, #31
    d1d4:	4698      	mov	r8, r3
    d1d6:	4691      	mov	r9, r2
    d1d8:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d1dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	da0c      	bge.n	d1fe <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d1e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d1e8:	2100      	movs	r1, #0
    d1ea:	f1d2 0a00 	rsbs	sl, r2, #0
    d1ee:	eb61 0b03 	sbc.w	fp, r1, r3
    d1f2:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d1f6:	2301      	movs	r3, #1
    d1f8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d1fc:	e006      	b.n	d20c <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d1fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d202:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d206:	2300      	movs	r3, #0
    d208:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d20e:	2b00      	cmp	r3, #0
    d210:	d04a      	beq.n	d2a8 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d212:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d216:	4610      	mov	r0, r2
    d218:	4619      	mov	r1, r3
    d21a:	f7ff fb63 	bl	c8e4 <ndigits_in_i64>
    d21e:	4602      	mov	r2, r0
    d220:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d222:	1a9b      	subs	r3, r3, r2
    d224:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d226:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d22a:	2b00      	cmp	r3, #0
    d22c:	d011      	beq.n	d252 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d22e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d230:	3b01      	subs	r3, #1
    d232:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d234:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d238:	2b30      	cmp	r3, #48	; 0x30
    d23a:	d10a      	bne.n	d252 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d23c:	9b03      	ldr	r3, [sp, #12]
    d23e:	2b00      	cmp	r3, #0
    d240:	d004      	beq.n	d24c <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d242:	9b03      	ldr	r3, [sp, #12]
    d244:	1c5a      	adds	r2, r3, #1
    d246:	9203      	str	r2, [sp, #12]
    d248:	222d      	movs	r2, #45	; 0x2d
    d24a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d24c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d24e:	3301      	adds	r3, #1
    d250:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d252:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d256:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d258:	4619      	mov	r1, r3
    d25a:	9803      	ldr	r0, [sp, #12]
    d25c:	f7ff fc7f 	bl	cb5e <padbuffer>
    d260:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d262:	9b03      	ldr	r3, [sp, #12]
    d264:	2b00      	cmp	r3, #0
    d266:	d001      	beq.n	d26c <am_util_stdio_vsprintf+0x4cc>
    d268:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d26a:	e000      	b.n	d26e <am_util_stdio_vsprintf+0x4ce>
    d26c:	2300      	movs	r3, #0
    d26e:	9a03      	ldr	r2, [sp, #12]
    d270:	4413      	add	r3, r2
    d272:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d274:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d276:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d278:	4413      	add	r3, r2
    d27a:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d27c:	2300      	movs	r3, #0
    d27e:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d280:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d284:	2b00      	cmp	r3, #0
    d286:	d01e      	beq.n	d2c6 <am_util_stdio_vsprintf+0x526>
    d288:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d28c:	2b20      	cmp	r3, #32
    d28e:	d11a      	bne.n	d2c6 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d290:	9b03      	ldr	r3, [sp, #12]
    d292:	2b00      	cmp	r3, #0
    d294:	d004      	beq.n	d2a0 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d296:	9b03      	ldr	r3, [sp, #12]
    d298:	1c5a      	adds	r2, r3, #1
    d29a:	9203      	str	r2, [sp, #12]
    d29c:	222d      	movs	r2, #45	; 0x2d
    d29e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d2a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2a2:	3301      	adds	r3, #1
    d2a4:	9311      	str	r3, [sp, #68]	; 0x44
    d2a6:	e00e      	b.n	d2c6 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d2a8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d2ac:	2b00      	cmp	r3, #0
    d2ae:	d00a      	beq.n	d2c6 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d2b0:	9b03      	ldr	r3, [sp, #12]
    d2b2:	2b00      	cmp	r3, #0
    d2b4:	d004      	beq.n	d2c0 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d2b6:	9b03      	ldr	r3, [sp, #12]
    d2b8:	1c5a      	adds	r2, r3, #1
    d2ba:	9203      	str	r2, [sp, #12]
    d2bc:	222d      	movs	r2, #45	; 0x2d
    d2be:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d2c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2c2:	3301      	adds	r3, #1
    d2c4:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d2c6:	9a03      	ldr	r2, [sp, #12]
    d2c8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d2cc:	f7ff fb8c 	bl	c9e8 <uint64_to_str>
    d2d0:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d2d2:	9b03      	ldr	r3, [sp, #12]
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d003      	beq.n	d2e0 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d2d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2da:	9a03      	ldr	r2, [sp, #12]
    d2dc:	4413      	add	r3, r2
    d2de:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d2e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d2e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d2e4:	4413      	add	r3, r2
    d2e6:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d2e8:	e04c      	b.n	d384 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d2ea:	9b03      	ldr	r3, [sp, #12]
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	d048      	beq.n	d382 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d2f0:	9b01      	ldr	r3, [sp, #4]
    d2f2:	3307      	adds	r3, #7
    d2f4:	f023 0307 	bic.w	r3, r3, #7
    d2f8:	f103 0208 	add.w	r2, r3, #8
    d2fc:	9201      	str	r2, [sp, #4]
    d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    d302:	4610      	mov	r0, r2
    d304:	4619      	mov	r1, r3
    d306:	f7fe fefb 	bl	c100 <__aeabi_d2f>
    d30a:	4603      	mov	r3, r0
    d30c:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d30e:	9b03      	ldr	r3, [sp, #12]
    d310:	2214      	movs	r2, #20
    d312:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d314:	990e      	ldr	r1, [sp, #56]	; 0x38
    d316:	9803      	ldr	r0, [sp, #12]
    d318:	ed9d 0a06 	vldr	s0, [sp, #24]
    d31c:	f7ff fc42 	bl	cba4 <ftoa>
    d320:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d324:	2b00      	cmp	r3, #0
    d326:	da14      	bge.n	d352 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d32a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d32e:	d102      	bne.n	d336 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d330:	4b1e      	ldr	r3, [pc, #120]	; (d3ac <am_util_stdio_vsprintf+0x60c>)
    d332:	930c      	str	r3, [sp, #48]	; 0x30
    d334:	e008      	b.n	d348 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d338:	f113 0f02 	cmn.w	r3, #2
    d33c:	d102      	bne.n	d344 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d33e:	4b1c      	ldr	r3, [pc, #112]	; (d3b0 <am_util_stdio_vsprintf+0x610>)
    d340:	930c      	str	r3, [sp, #48]	; 0x30
    d342:	e001      	b.n	d348 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d344:	4b1b      	ldr	r3, [pc, #108]	; (d3b4 <am_util_stdio_vsprintf+0x614>)
    d346:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d348:	9b03      	ldr	r3, [sp, #12]
    d34a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d34c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d34e:	2303      	movs	r3, #3
    d350:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d354:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d356:	4413      	add	r3, r2
    d358:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d35a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d35c:	9a03      	ldr	r2, [sp, #12]
    d35e:	4413      	add	r3, r2
    d360:	9303      	str	r3, [sp, #12]
                }
                break;
    d362:	e00e      	b.n	d382 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d364:	9b03      	ldr	r3, [sp, #12]
    d366:	2b00      	cmp	r3, #0
    d368:	d005      	beq.n	d376 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d36a:	9b03      	ldr	r3, [sp, #12]
    d36c:	1c5a      	adds	r2, r3, #1
    d36e:	9203      	str	r2, [sp, #12]
    d370:	9a02      	ldr	r2, [sp, #8]
    d372:	7812      	ldrb	r2, [r2, #0]
    d374:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d376:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d378:	3301      	adds	r3, #1
    d37a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d37c:	e002      	b.n	d384 <am_util_stdio_vsprintf+0x5e4>
                break;
    d37e:	bf00      	nop
    d380:	e000      	b.n	d384 <am_util_stdio_vsprintf+0x5e4>
                break;
    d382:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d384:	9b02      	ldr	r3, [sp, #8]
    d386:	3301      	adds	r3, #1
    d388:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d38a:	9b02      	ldr	r3, [sp, #8]
    d38c:	781b      	ldrb	r3, [r3, #0]
    d38e:	2b00      	cmp	r3, #0
    d390:	f47f ad11 	bne.w	cdb6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d394:	9b03      	ldr	r3, [sp, #12]
    d396:	2b00      	cmp	r3, #0
    d398:	d002      	beq.n	d3a0 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d39a:	9b03      	ldr	r3, [sp, #12]
    d39c:	2200      	movs	r2, #0
    d39e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d3a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d3a2:	4618      	mov	r0, r3
    d3a4:	b017      	add	sp, #92	; 0x5c
    d3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3aa:	bf00      	nop
    d3ac:	00302e30 	.word	0x00302e30
    d3b0:	00232e23 	.word	0x00232e23
    d3b4:	003f2e3f 	.word	0x003f2e3f

0000d3b8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d3b8:	b40f      	push	{r0, r1, r2, r3}
    d3ba:	b500      	push	{lr}
    d3bc:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d3be:	4b0c      	ldr	r3, [pc, #48]	; (d3f0 <am_util_stdio_printf+0x38>)
    d3c0:	681b      	ldr	r3, [r3, #0]
    d3c2:	2b00      	cmp	r3, #0
    d3c4:	d101      	bne.n	d3ca <am_util_stdio_printf+0x12>
    {
        return 0;
    d3c6:	2300      	movs	r3, #0
    d3c8:	e00c      	b.n	d3e4 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d3ca:	ab05      	add	r3, sp, #20
    d3cc:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d3ce:	9a00      	ldr	r2, [sp, #0]
    d3d0:	9904      	ldr	r1, [sp, #16]
    d3d2:	4808      	ldr	r0, [pc, #32]	; (d3f4 <am_util_stdio_printf+0x3c>)
    d3d4:	f7ff fce4 	bl	cda0 <am_util_stdio_vsprintf>
    d3d8:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d3da:	4b05      	ldr	r3, [pc, #20]	; (d3f0 <am_util_stdio_printf+0x38>)
    d3dc:	681b      	ldr	r3, [r3, #0]
    d3de:	4805      	ldr	r0, [pc, #20]	; (d3f4 <am_util_stdio_printf+0x3c>)
    d3e0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d3e2:	9b01      	ldr	r3, [sp, #4]
}
    d3e4:	4618      	mov	r0, r3
    d3e6:	b003      	add	sp, #12
    d3e8:	f85d eb04 	ldr.w	lr, [sp], #4
    d3ec:	b004      	add	sp, #16
    d3ee:	4770      	bx	lr
    d3f0:	1000164c 	.word	0x1000164c
    d3f4:	10001650 	.word	0x10001650

0000d3f8 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d3f8:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d3fa:	4802      	ldr	r0, [pc, #8]	; (d404 <am_util_stdio_terminal_clear+0xc>)
    d3fc:	f7ff ffdc 	bl	d3b8 <am_util_stdio_printf>
}
    d400:	bf00      	nop
    d402:	bd08      	pop	{r3, pc}
    d404:	0000ec88 	.word	0x0000ec88

0000d408 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d408:	4811      	ldr	r0, [pc, #68]	; (d450 <zero_loop+0x12>)
    d40a:	4912      	ldr	r1, [pc, #72]	; (d454 <zero_loop+0x16>)
    d40c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d40e:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d412:	4811      	ldr	r0, [pc, #68]	; (d458 <zero_loop+0x1a>)
    d414:	6801      	ldr	r1, [r0, #0]
    d416:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d41a:	6001      	str	r1, [r0, #0]
    d41c:	f3bf 8f4f 	dsb	sy
    d420:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d424:	480d      	ldr	r0, [pc, #52]	; (d45c <zero_loop+0x1e>)
    d426:	490e      	ldr	r1, [pc, #56]	; (d460 <zero_loop+0x22>)
    d428:	4a0e      	ldr	r2, [pc, #56]	; (d464 <zero_loop+0x26>)

0000d42a <copy_loop>:
    d42a:	f850 3b04 	ldr.w	r3, [r0], #4
    d42e:	f841 3b04 	str.w	r3, [r1], #4
    d432:	4291      	cmp	r1, r2
    d434:	dbf9      	blt.n	d42a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d436:	480c      	ldr	r0, [pc, #48]	; (d468 <zero_loop+0x2a>)
    d438:	490c      	ldr	r1, [pc, #48]	; (d46c <zero_loop+0x2e>)
    d43a:	f04f 0200 	mov.w	r2, #0

0000d43e <zero_loop>:
    d43e:	4288      	cmp	r0, r1
    d440:	bfb8      	it	lt
    d442:	f840 2b04 	strlt.w	r2, [r0], #4
    d446:	dbfa      	blt.n	d43e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d448:	f7fe ffca 	bl	c3e0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d44c:	be00      	bkpt	0x0000
}
    d44e:	bf00      	nop
    d450:	e000ed08 	.word	0xe000ed08
    d454:	0000c000 	.word	0x0000c000
    d458:	e000ed88 	.word	0xe000ed88
    d45c:	0000f0f8 	.word	0x0000f0f8
    d460:	10001000 	.word	0x10001000
    d464:	10001044 	.word	0x10001044
    d468:	10001044 	.word	0x10001044
    d46c:	100017b4 	.word	0x100017b4

0000d470 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d470:	e7fe      	b.n	d470 <NMI_Handler>

0000d472 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d472:	e7fe      	b.n	d472 <BusFault_Handler>

0000d474 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d474:	e7fe      	b.n	d474 <DebugMon_Handler>
	...

0000d478 <am_bsp_low_power_init>:
    d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d47a:	f001 f927 	bl	e6cc <am_hal_pwrctrl_low_power_init>
    d47e:	f001 fa03 	bl	e888 <am_hal_rtc_osc_disable>
    d482:	4b0b      	ldr	r3, [pc, #44]	; (d4b0 <am_bsp_low_power_init+0x38>)
    d484:	4f0b      	ldr	r7, [pc, #44]	; (d4b4 <am_bsp_low_power_init+0x3c>)
    d486:	681e      	ldr	r6, [r3, #0]
    d488:	2400      	movs	r4, #0
    d48a:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d48e:	4631      	mov	r1, r6
    d490:	4628      	mov	r0, r5
    d492:	f000 fe1b 	bl	e0cc <am_hal_gpio_pinconfig>
    d496:	2103      	movs	r1, #3
    d498:	4628      	mov	r0, r5
    d49a:	f000 ff4d 	bl	e338 <am_hal_gpio_state_write>
    d49e:	3401      	adds	r4, #1
    d4a0:	2100      	movs	r1, #0
    d4a2:	4628      	mov	r0, r5
    d4a4:	f000 ff48 	bl	e338 <am_hal_gpio_state_write>
    d4a8:	2c05      	cmp	r4, #5
    d4aa:	d1ee      	bne.n	d48a <am_bsp_low_power_init+0x12>
    d4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4ae:	bf00      	nop
    d4b0:	0000ecac 	.word	0x0000ecac
    d4b4:	10001000 	.word	0x10001000

0000d4b8 <am_bsp_itm_printf_enable>:
    d4b8:	b500      	push	{lr}
    d4ba:	4b0b      	ldr	r3, [pc, #44]	; (d4e8 <am_bsp_itm_printf_enable+0x30>)
    d4bc:	b087      	sub	sp, #28
    d4be:	2201      	movs	r2, #1
    d4c0:	601a      	str	r2, [r3, #0]
    d4c2:	f000 ff89 	bl	e3d8 <am_hal_itm_enable>
    d4c6:	4b09      	ldr	r3, [pc, #36]	; (d4ec <am_bsp_itm_printf_enable+0x34>)
    d4c8:	9301      	str	r3, [sp, #4]
    d4ca:	a801      	add	r0, sp, #4
    d4cc:	f001 fa1e 	bl	e90c <am_hal_tpiu_enable>
    d4d0:	4b07      	ldr	r3, [pc, #28]	; (d4f0 <am_bsp_itm_printf_enable+0x38>)
    d4d2:	2029      	movs	r0, #41	; 0x29
    d4d4:	6819      	ldr	r1, [r3, #0]
    d4d6:	f000 fdf9 	bl	e0cc <am_hal_gpio_pinconfig>
    d4da:	4806      	ldr	r0, [pc, #24]	; (d4f4 <am_bsp_itm_printf_enable+0x3c>)
    d4dc:	f7ff f8e4 	bl	c6a8 <am_util_stdio_printf_init>
    d4e0:	b007      	add	sp, #28
    d4e2:	f85d fb04 	ldr.w	pc, [sp], #4
    d4e6:	bf00      	nop
    d4e8:	10001754 	.word	0x10001754
    d4ec:	000f4240 	.word	0x000f4240
    d4f0:	0000eca0 	.word	0x0000eca0
    d4f4:	0000e421 	.word	0x0000e421

0000d4f8 <am_hal_adc_initialize>:
    d4f8:	2800      	cmp	r0, #0
    d4fa:	d136      	bne.n	d56a <am_hal_adc_initialize+0x72>
    d4fc:	2900      	cmp	r1, #0
    d4fe:	d036      	beq.n	d56e <am_hal_adc_initialize+0x76>
    d500:	b538      	push	{r3, r4, r5, lr}
    d502:	4b1c      	ldr	r3, [pc, #112]	; (d574 <am_hal_adc_initialize+0x7c>)
    d504:	78d8      	ldrb	r0, [r3, #3]
    d506:	f010 0501 	ands.w	r5, r0, #1
    d50a:	d123      	bne.n	d554 <am_hal_adc_initialize+0x5c>
    d50c:	681a      	ldr	r2, [r3, #0]
    d50e:	481a      	ldr	r0, [pc, #104]	; (d578 <am_hal_adc_initialize+0x80>)
    d510:	4c1a      	ldr	r4, [pc, #104]	; (d57c <am_hal_adc_initialize+0x84>)
    d512:	f002 427e 	and.w	r2, r2, #4261412864	; 0xfe000000
    d516:	4302      	orrs	r2, r0
    d518:	4819      	ldr	r0, [pc, #100]	; (d580 <am_hal_adc_initialize+0x88>)
    d51a:	e9c3 2500 	strd	r2, r5, [r3]
    d51e:	6005      	str	r5, [r0, #0]
    d520:	600b      	str	r3, [r1, #0]
    d522:	4818      	ldr	r0, [pc, #96]	; (d584 <am_hal_adc_initialize+0x8c>)
    d524:	f000 fdc8 	bl	e0b8 <am_hal_flash_load_ui32>
    d528:	6020      	str	r0, [r4, #0]
    d52a:	4817      	ldr	r0, [pc, #92]	; (d588 <am_hal_adc_initialize+0x90>)
    d52c:	f000 fdc4 	bl	e0b8 <am_hal_flash_load_ui32>
    d530:	4603      	mov	r3, r0
    d532:	4816      	ldr	r0, [pc, #88]	; (d58c <am_hal_adc_initialize+0x94>)
    d534:	6063      	str	r3, [r4, #4]
    d536:	f000 fdbf 	bl	e0b8 <am_hal_flash_load_ui32>
    d53a:	6823      	ldr	r3, [r4, #0]
    d53c:	60a0      	str	r0, [r4, #8]
    d53e:	3301      	adds	r3, #1
    d540:	d00a      	beq.n	d558 <am_hal_adc_initialize+0x60>
    d542:	6863      	ldr	r3, [r4, #4]
    d544:	3301      	adds	r3, #1
    d546:	d007      	beq.n	d558 <am_hal_adc_initialize+0x60>
    d548:	3001      	adds	r0, #1
    d54a:	d005      	beq.n	d558 <am_hal_adc_initialize+0x60>
    d54c:	2301      	movs	r3, #1
    d54e:	7323      	strb	r3, [r4, #12]
    d550:	4628      	mov	r0, r5
    d552:	bd38      	pop	{r3, r4, r5, pc}
    d554:	2007      	movs	r0, #7
    d556:	bd38      	pop	{r3, r4, r5, pc}
    d558:	490d      	ldr	r1, [pc, #52]	; (d590 <am_hal_adc_initialize+0x98>)
    d55a:	4a0e      	ldr	r2, [pc, #56]	; (d594 <am_hal_adc_initialize+0x9c>)
    d55c:	4b0e      	ldr	r3, [pc, #56]	; (d598 <am_hal_adc_initialize+0xa0>)
    d55e:	6021      	str	r1, [r4, #0]
    d560:	2000      	movs	r0, #0
    d562:	6062      	str	r2, [r4, #4]
    d564:	60a3      	str	r3, [r4, #8]
    d566:	7320      	strb	r0, [r4, #12]
    d568:	bd38      	pop	{r3, r4, r5, pc}
    d56a:	2005      	movs	r0, #5
    d56c:	4770      	bx	lr
    d56e:	2006      	movs	r0, #6
    d570:	4770      	bx	lr
    d572:	bf00      	nop
    d574:	1000175c 	.word	0x1000175c
    d578:	01afafaf 	.word	0x01afafaf
    d57c:	1000179c 	.word	0x1000179c
    d580:	10001758 	.word	0x10001758
    d584:	50023840 	.word	0x50023840
    d588:	50023844 	.word	0x50023844
    d58c:	50023848 	.word	0x50023848
    d590:	4395c000 	.word	0x4395c000
    d594:	3f839874 	.word	0x3f839874
    d598:	bb8c47a1 	.word	0xbb8c47a1

0000d59c <am_hal_adc_configure>:
    d59c:	6803      	ldr	r3, [r0, #0]
    d59e:	4a1b      	ldr	r2, [pc, #108]	; (d60c <am_hal_adc_configure+0x70>)
    d5a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d5a4:	4293      	cmp	r3, r2
    d5a6:	d12e      	bne.n	d606 <am_hal_adc_configure+0x6a>
    d5a8:	b500      	push	{lr}
    d5aa:	780b      	ldrb	r3, [r1, #0]
    d5ac:	7988      	ldrb	r0, [r1, #6]
    d5ae:	784a      	ldrb	r2, [r1, #1]
    d5b0:	f891 e002 	ldrb.w	lr, [r1, #2]
    d5b4:	f891 c003 	ldrb.w	ip, [r1, #3]
    d5b8:	061b      	lsls	r3, r3, #24
    d5ba:	0080      	lsls	r0, r0, #2
    d5bc:	f000 0004 	and.w	r0, r0, #4
    d5c0:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    d5c4:	04d2      	lsls	r2, r2, #19
    d5c6:	4303      	orrs	r3, r0
    d5c8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
    d5cc:	7908      	ldrb	r0, [r1, #4]
    d5ce:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
    d5d2:	4313      	orrs	r3, r2
    d5d4:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    d5d8:	794a      	ldrb	r2, [r1, #5]
    d5da:	f40e 21e0 	and.w	r1, lr, #458752	; 0x70000
    d5de:	430b      	orrs	r3, r1
    d5e0:	f40c 7c40 	and.w	ip, ip, #768	; 0x300
    d5e4:	0101      	lsls	r1, r0, #4
    d5e6:	ea43 030c 	orr.w	r3, r3, ip
    d5ea:	f001 0110 	and.w	r1, r1, #16
    d5ee:	00d2      	lsls	r2, r2, #3
    d5f0:	430b      	orrs	r3, r1
    d5f2:	f002 0208 	and.w	r2, r2, #8
    d5f6:	4906      	ldr	r1, [pc, #24]	; (d610 <am_hal_adc_configure+0x74>)
    d5f8:	4313      	orrs	r3, r2
    d5fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d5fe:	600b      	str	r3, [r1, #0]
    d600:	2000      	movs	r0, #0
    d602:	f85d fb04 	ldr.w	pc, [sp], #4
    d606:	2002      	movs	r0, #2
    d608:	4770      	bx	lr
    d60a:	bf00      	nop
    d60c:	01afafaf 	.word	0x01afafaf
    d610:	50010000 	.word	0x50010000

0000d614 <am_hal_adc_configure_slot>:
    d614:	6803      	ldr	r3, [r0, #0]
    d616:	b410      	push	{r4}
    d618:	4c18      	ldr	r4, [pc, #96]	; (d67c <am_hal_adc_configure_slot+0x68>)
    d61a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d61e:	42a3      	cmp	r3, r4
    d620:	d123      	bne.n	d66a <am_hal_adc_configure_slot+0x56>
    d622:	2907      	cmp	r1, #7
    d624:	d825      	bhi.n	d672 <am_hal_adc_configure_slot+0x5e>
    d626:	7810      	ldrb	r0, [r2, #0]
    d628:	78d4      	ldrb	r4, [r2, #3]
    d62a:	7913      	ldrb	r3, [r2, #4]
    d62c:	f892 c001 	ldrb.w	ip, [r2, #1]
    d630:	0600      	lsls	r0, r0, #24
    d632:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    d636:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000
    d63a:	4303      	orrs	r3, r0
    d63c:	7890      	ldrb	r0, [r2, #2]
    d63e:	4a10      	ldr	r2, [pc, #64]	; (d680 <am_hal_adc_configure_slot+0x6c>)
    d640:	4c10      	ldr	r4, [pc, #64]	; (d684 <am_hal_adc_configure_slot+0x70>)
    d642:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    d646:	0200      	lsls	r0, r0, #8
    d648:	440a      	add	r2, r1
    d64a:	f40c 3c40 	and.w	ip, ip, #196608	; 0x30000
    d64e:	f400 6170 	and.w	r1, r0, #3840	; 0xf00
    d652:	ea43 030c 	orr.w	r3, r3, ip
    d656:	0092      	lsls	r2, r2, #2
    d658:	430b      	orrs	r3, r1
    d65a:	6013      	str	r3, [r2, #0]
    d65c:	6823      	ldr	r3, [r4, #0]
    d65e:	3301      	adds	r3, #1
    d660:	2000      	movs	r0, #0
    d662:	6023      	str	r3, [r4, #0]
    d664:	f85d 4b04 	ldr.w	r4, [sp], #4
    d668:	4770      	bx	lr
    d66a:	2002      	movs	r0, #2
    d66c:	f85d 4b04 	ldr.w	r4, [sp], #4
    d670:	4770      	bx	lr
    d672:	2005      	movs	r0, #5
    d674:	f85d 4b04 	ldr.w	r4, [sp], #4
    d678:	4770      	bx	lr
    d67a:	bf00      	nop
    d67c:	01afafaf 	.word	0x01afafaf
    d680:	14004003 	.word	0x14004003
    d684:	10001758 	.word	0x10001758

0000d688 <am_hal_adc_configure_dma>:
    d688:	6803      	ldr	r3, [r0, #0]
    d68a:	4a16      	ldr	r2, [pc, #88]	; (d6e4 <am_hal_adc_configure_dma+0x5c>)
    d68c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d690:	4293      	cmp	r3, r2
    d692:	d125      	bne.n	d6e0 <am_hal_adc_configure_dma+0x58>
    d694:	4a14      	ldr	r2, [pc, #80]	; (d6e8 <am_hal_adc_configure_dma+0x60>)
    d696:	784b      	ldrb	r3, [r1, #1]
    d698:	6810      	ldr	r0, [r2, #0]
    d69a:	780a      	ldrb	r2, [r1, #0]
    d69c:	2801      	cmp	r0, #1
    d69e:	b410      	push	{r4}
    d6a0:	bf8c      	ite	hi
    d6a2:	2000      	movhi	r0, #0
    d6a4:	f44f 3000 	movls.w	r0, #131072	; 0x20000
    d6a8:	021b      	lsls	r3, r3, #8
    d6aa:	ea40 2042 	orr.w	r0, r0, r2, lsl #9
    d6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d6b2:	4a0e      	ldr	r2, [pc, #56]	; (d6ec <am_hal_adc_configure_dma+0x64>)
    d6b4:	4303      	orrs	r3, r0
    d6b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    d6ba:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
    d6be:	8888      	ldrh	r0, [r1, #4]
    d6c0:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
    d6c4:	f360 0391 	bfi	r3, r0, #2, #16
    d6c8:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    d6cc:	688b      	ldr	r3, [r1, #8]
    d6ce:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
    d6d2:	2401      	movs	r4, #1
    d6d4:	2000      	movs	r0, #0
    d6d6:	f8c2 4240 	str.w	r4, [r2, #576]	; 0x240
    d6da:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6de:	4770      	bx	lr
    d6e0:	2002      	movs	r0, #2
    d6e2:	4770      	bx	lr
    d6e4:	01afafaf 	.word	0x01afafaf
    d6e8:	10001758 	.word	0x10001758
    d6ec:	50010000 	.word	0x50010000

0000d6f0 <am_hal_adc_enable>:
    d6f0:	6802      	ldr	r2, [r0, #0]
    d6f2:	490c      	ldr	r1, [pc, #48]	; (d724 <am_hal_adc_enable+0x34>)
    d6f4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d6f8:	428a      	cmp	r2, r1
    d6fa:	4603      	mov	r3, r0
    d6fc:	d10f      	bne.n	d71e <am_hal_adc_enable+0x2e>
    d6fe:	78c0      	ldrb	r0, [r0, #3]
    d700:	f010 0002 	ands.w	r0, r0, #2
    d704:	d109      	bne.n	d71a <am_hal_adc_enable+0x2a>
    d706:	4908      	ldr	r1, [pc, #32]	; (d728 <am_hal_adc_enable+0x38>)
    d708:	680a      	ldr	r2, [r1, #0]
    d70a:	f042 0201 	orr.w	r2, r2, #1
    d70e:	600a      	str	r2, [r1, #0]
    d710:	78da      	ldrb	r2, [r3, #3]
    d712:	f042 0202 	orr.w	r2, r2, #2
    d716:	70da      	strb	r2, [r3, #3]
    d718:	4770      	bx	lr
    d71a:	2000      	movs	r0, #0
    d71c:	4770      	bx	lr
    d71e:	2002      	movs	r0, #2
    d720:	4770      	bx	lr
    d722:	bf00      	nop
    d724:	01afafaf 	.word	0x01afafaf
    d728:	50010000 	.word	0x50010000

0000d72c <am_hal_adc_interrupt_enable>:
    d72c:	6803      	ldr	r3, [r0, #0]
    d72e:	4a07      	ldr	r2, [pc, #28]	; (d74c <am_hal_adc_interrupt_enable+0x20>)
    d730:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d734:	4293      	cmp	r3, r2
    d736:	d107      	bne.n	d748 <am_hal_adc_interrupt_enable+0x1c>
    d738:	4a05      	ldr	r2, [pc, #20]	; (d750 <am_hal_adc_interrupt_enable+0x24>)
    d73a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d73e:	4319      	orrs	r1, r3
    d740:	2000      	movs	r0, #0
    d742:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    d746:	4770      	bx	lr
    d748:	2002      	movs	r0, #2
    d74a:	4770      	bx	lr
    d74c:	01afafaf 	.word	0x01afafaf
    d750:	50010000 	.word	0x50010000

0000d754 <am_hal_adc_interrupt_status>:
    d754:	6803      	ldr	r3, [r0, #0]
    d756:	b410      	push	{r4}
    d758:	4c0e      	ldr	r4, [pc, #56]	; (d794 <am_hal_adc_interrupt_status+0x40>)
    d75a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d75e:	42a3      	cmp	r3, r4
    d760:	d113      	bne.n	d78a <am_hal_adc_interrupt_status+0x36>
    d762:	b93a      	cbnz	r2, d774 <am_hal_adc_interrupt_status+0x20>
    d764:	4b0c      	ldr	r3, [pc, #48]	; (d798 <am_hal_adc_interrupt_status+0x44>)
    d766:	f85d 4b04 	ldr.w	r4, [sp], #4
    d76a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d76e:	600b      	str	r3, [r1, #0]
    d770:	4610      	mov	r0, r2
    d772:	4770      	bx	lr
    d774:	4a08      	ldr	r2, [pc, #32]	; (d798 <am_hal_adc_interrupt_status+0x44>)
    d776:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
    d77a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d77e:	4023      	ands	r3, r4
    d780:	2000      	movs	r0, #0
    d782:	f85d 4b04 	ldr.w	r4, [sp], #4
    d786:	600b      	str	r3, [r1, #0]
    d788:	4770      	bx	lr
    d78a:	2002      	movs	r0, #2
    d78c:	f85d 4b04 	ldr.w	r4, [sp], #4
    d790:	4770      	bx	lr
    d792:	bf00      	nop
    d794:	01afafaf 	.word	0x01afafaf
    d798:	50010000 	.word	0x50010000

0000d79c <am_hal_adc_interrupt_clear>:
    d79c:	6803      	ldr	r3, [r0, #0]
    d79e:	4a05      	ldr	r2, [pc, #20]	; (d7b4 <am_hal_adc_interrupt_clear+0x18>)
    d7a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d7a4:	4293      	cmp	r3, r2
    d7a6:	bf03      	ittte	eq
    d7a8:	4b03      	ldreq	r3, [pc, #12]	; (d7b8 <am_hal_adc_interrupt_clear+0x1c>)
    d7aa:	2000      	moveq	r0, #0
    d7ac:	f8c3 1208 	streq.w	r1, [r3, #520]	; 0x208
    d7b0:	2002      	movne	r0, #2
    d7b2:	4770      	bx	lr
    d7b4:	01afafaf 	.word	0x01afafaf
    d7b8:	50010000 	.word	0x50010000

0000d7bc <am_hal_adc_samples_read>:
    d7bc:	6800      	ldr	r0, [r0, #0]
    d7be:	b470      	push	{r4, r5, r6}
    d7c0:	4c2b      	ldr	r4, [pc, #172]	; (d870 <am_hal_adc_samples_read+0xb4>)
    d7c2:	9d03      	ldr	r5, [sp, #12]
    d7c4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    d7c8:	42a0      	cmp	r0, r4
    d7ca:	d11c      	bne.n	d806 <am_hal_adc_samples_read+0x4a>
    d7cc:	2d00      	cmp	r5, #0
    d7ce:	d04d      	beq.n	d86c <am_hal_adc_samples_read+0xb0>
    d7d0:	2000      	movs	r0, #0
    d7d2:	681c      	ldr	r4, [r3, #0]
    d7d4:	6018      	str	r0, [r3, #0]
    d7d6:	b1ca      	cbz	r2, d80c <am_hal_adc_samples_read+0x50>
    d7d8:	f105 0108 	add.w	r1, r5, #8
    d7dc:	1f10      	subs	r0, r2, #4
    d7de:	f850 2f04 	ldr.w	r2, [r0, #4]!
    d7e2:	3108      	adds	r1, #8
    d7e4:	f3c2 7202 	ubfx	r2, r2, #28, #3
    d7e8:	f841 2c0c 	str.w	r2, [r1, #-12]
    d7ec:	6802      	ldr	r2, [r0, #0]
    d7ee:	f3c2 128d 	ubfx	r2, r2, #6, #14
    d7f2:	f841 2c10 	str.w	r2, [r1, #-16]
    d7f6:	681a      	ldr	r2, [r3, #0]
    d7f8:	3201      	adds	r2, #1
    d7fa:	42a2      	cmp	r2, r4
    d7fc:	601a      	str	r2, [r3, #0]
    d7fe:	d3ee      	bcc.n	d7de <am_hal_adc_samples_read+0x22>
    d800:	2000      	movs	r0, #0
    d802:	bc70      	pop	{r4, r5, r6}
    d804:	4770      	bx	lr
    d806:	2002      	movs	r0, #2
    d808:	bc70      	pop	{r4, r5, r6}
    d80a:	4770      	bx	lr
    d80c:	4e19      	ldr	r6, [pc, #100]	; (d874 <am_hal_adc_samples_read+0xb8>)
    d80e:	b9b1      	cbnz	r1, d83e <am_hal_adc_samples_read+0x82>
    d810:	f105 0108 	add.w	r1, r5, #8
    d814:	e001      	b.n	d81a <am_hal_adc_samples_read+0x5e>
    d816:	4294      	cmp	r4, r2
    d818:	d9f2      	bls.n	d800 <am_hal_adc_samples_read+0x44>
    d81a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    d81c:	3108      	adds	r1, #8
    d81e:	f3c0 7202 	ubfx	r2, r0, #28, #3
    d822:	f841 2c0c 	str.w	r2, [r1, #-12]
    d826:	f3c0 128d 	ubfx	r2, r0, #6, #14
    d82a:	f841 2c10 	str.w	r2, [r1, #-16]
    d82e:	681a      	ldr	r2, [r3, #0]
    d830:	f010 6f7f 	tst.w	r0, #267386880	; 0xff00000
    d834:	f102 0201 	add.w	r2, r2, #1
    d838:	601a      	str	r2, [r3, #0]
    d83a:	d1ec      	bne.n	d816 <am_hal_adc_samples_read+0x5a>
    d83c:	e7e0      	b.n	d800 <am_hal_adc_samples_read+0x44>
    d83e:	f105 0108 	add.w	r1, r5, #8
    d842:	e001      	b.n	d848 <am_hal_adc_samples_read+0x8c>
    d844:	42a2      	cmp	r2, r4
    d846:	d2db      	bcs.n	d800 <am_hal_adc_samples_read+0x44>
    d848:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    d84a:	3108      	adds	r1, #8
    d84c:	f3c0 7202 	ubfx	r2, r0, #28, #3
    d850:	f841 2c0c 	str.w	r2, [r1, #-12]
    d854:	f3c0 0213 	ubfx	r2, r0, #0, #20
    d858:	f841 2c10 	str.w	r2, [r1, #-16]
    d85c:	681a      	ldr	r2, [r3, #0]
    d85e:	f010 6f7f 	tst.w	r0, #267386880	; 0xff00000
    d862:	f102 0201 	add.w	r2, r2, #1
    d866:	601a      	str	r2, [r3, #0]
    d868:	d1ec      	bne.n	d844 <am_hal_adc_samples_read+0x88>
    d86a:	e7c9      	b.n	d800 <am_hal_adc_samples_read+0x44>
    d86c:	2006      	movs	r0, #6
    d86e:	e7c8      	b.n	d802 <am_hal_adc_samples_read+0x46>
    d870:	01afafaf 	.word	0x01afafaf
    d874:	50010000 	.word	0x50010000

0000d878 <am_hal_adc_sw_trigger>:
    d878:	6803      	ldr	r3, [r0, #0]
    d87a:	4a06      	ldr	r2, [pc, #24]	; (d894 <am_hal_adc_sw_trigger+0x1c>)
    d87c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d880:	4293      	cmp	r3, r2
    d882:	d104      	bne.n	d88e <am_hal_adc_sw_trigger+0x16>
    d884:	4b04      	ldr	r3, [pc, #16]	; (d898 <am_hal_adc_sw_trigger+0x20>)
    d886:	2237      	movs	r2, #55	; 0x37
    d888:	609a      	str	r2, [r3, #8]
    d88a:	2000      	movs	r0, #0
    d88c:	4770      	bx	lr
    d88e:	2002      	movs	r0, #2
    d890:	4770      	bx	lr
    d892:	bf00      	nop
    d894:	01afafaf 	.word	0x01afafaf
    d898:	50010000 	.word	0x50010000

0000d89c <am_hal_adc_power_control>:
    d89c:	b510      	push	{r4, lr}
    d89e:	4604      	mov	r4, r0
    d8a0:	4831      	ldr	r0, [pc, #196]	; (d968 <am_hal_adc_power_control+0xcc>)
    d8a2:	6823      	ldr	r3, [r4, #0]
    d8a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d8a8:	4283      	cmp	r3, r0
    d8aa:	b082      	sub	sp, #8
    d8ac:	d150      	bne.n	d950 <am_hal_adc_power_control+0xb4>
    d8ae:	b329      	cbz	r1, d8fc <am_hal_adc_power_control+0x60>
    d8b0:	3901      	subs	r1, #1
    d8b2:	2901      	cmp	r1, #1
    d8b4:	d849      	bhi.n	d94a <am_hal_adc_power_control+0xae>
    d8b6:	b1da      	cbz	r2, d8f0 <am_hal_adc_power_control+0x54>
    d8b8:	4b2c      	ldr	r3, [pc, #176]	; (d96c <am_hal_adc_power_control+0xd0>)
    d8ba:	68d9      	ldr	r1, [r3, #12]
    d8bc:	6161      	str	r1, [r4, #20]
    d8be:	6919      	ldr	r1, [r3, #16]
    d8c0:	61a1      	str	r1, [r4, #24]
    d8c2:	6959      	ldr	r1, [r3, #20]
    d8c4:	61e1      	str	r1, [r4, #28]
    d8c6:	6999      	ldr	r1, [r3, #24]
    d8c8:	6221      	str	r1, [r4, #32]
    d8ca:	69d9      	ldr	r1, [r3, #28]
    d8cc:	6261      	str	r1, [r4, #36]	; 0x24
    d8ce:	6a19      	ldr	r1, [r3, #32]
    d8d0:	62a1      	str	r1, [r4, #40]	; 0x28
    d8d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    d8d4:	62e1      	str	r1, [r4, #44]	; 0x2c
    d8d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    d8d8:	6321      	str	r1, [r4, #48]	; 0x30
    d8da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    d8dc:	6361      	str	r1, [r4, #52]	; 0x34
    d8de:	6b19      	ldr	r1, [r3, #48]	; 0x30
    d8e0:	63a1      	str	r1, [r4, #56]	; 0x38
    d8e2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    d8e6:	63e1      	str	r1, [r4, #60]	; 0x3c
    d8e8:	681b      	ldr	r3, [r3, #0]
    d8ea:	6123      	str	r3, [r4, #16]
    d8ec:	2201      	movs	r2, #1
    d8ee:	7322      	strb	r2, [r4, #12]
    d8f0:	200a      	movs	r0, #10
    d8f2:	f000 fe73 	bl	e5dc <am_hal_pwrctrl_periph_disable>
    d8f6:	2000      	movs	r0, #0
    d8f8:	b002      	add	sp, #8
    d8fa:	bd10      	pop	{r4, pc}
    d8fc:	2a00      	cmp	r2, #0
    d8fe:	d02a      	beq.n	d956 <am_hal_adc_power_control+0xba>
    d900:	7b23      	ldrb	r3, [r4, #12]
    d902:	2b00      	cmp	r3, #0
    d904:	d02e      	beq.n	d964 <am_hal_adc_power_control+0xc8>
    d906:	200a      	movs	r0, #10
    d908:	9101      	str	r1, [sp, #4]
    d90a:	f000 fe3d 	bl	e588 <am_hal_pwrctrl_periph_enable>
    d90e:	4b17      	ldr	r3, [pc, #92]	; (d96c <am_hal_adc_power_control+0xd0>)
    d910:	6962      	ldr	r2, [r4, #20]
    d912:	60da      	str	r2, [r3, #12]
    d914:	69a2      	ldr	r2, [r4, #24]
    d916:	611a      	str	r2, [r3, #16]
    d918:	69e2      	ldr	r2, [r4, #28]
    d91a:	615a      	str	r2, [r3, #20]
    d91c:	6a22      	ldr	r2, [r4, #32]
    d91e:	619a      	str	r2, [r3, #24]
    d920:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d922:	61da      	str	r2, [r3, #28]
    d924:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d926:	621a      	str	r2, [r3, #32]
    d928:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d92a:	625a      	str	r2, [r3, #36]	; 0x24
    d92c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    d92e:	629a      	str	r2, [r3, #40]	; 0x28
    d930:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d932:	62da      	str	r2, [r3, #44]	; 0x2c
    d934:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d936:	631a      	str	r2, [r3, #48]	; 0x30
    d938:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    d93a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    d93e:	9901      	ldr	r1, [sp, #4]
    d940:	6922      	ldr	r2, [r4, #16]
    d942:	601a      	str	r2, [r3, #0]
    d944:	4608      	mov	r0, r1
    d946:	7321      	strb	r1, [r4, #12]
    d948:	e000      	b.n	d94c <am_hal_adc_power_control+0xb0>
    d94a:	2006      	movs	r0, #6
    d94c:	b002      	add	sp, #8
    d94e:	bd10      	pop	{r4, pc}
    d950:	2002      	movs	r0, #2
    d952:	b002      	add	sp, #8
    d954:	bd10      	pop	{r4, pc}
    d956:	200a      	movs	r0, #10
    d958:	9201      	str	r2, [sp, #4]
    d95a:	f000 fe15 	bl	e588 <am_hal_pwrctrl_periph_enable>
    d95e:	9a01      	ldr	r2, [sp, #4]
    d960:	4610      	mov	r0, r2
    d962:	e7f3      	b.n	d94c <am_hal_adc_power_control+0xb0>
    d964:	2007      	movs	r0, #7
    d966:	e7f1      	b.n	d94c <am_hal_adc_power_control+0xb0>
    d968:	01afafaf 	.word	0x01afafaf
    d96c:	50010000 	.word	0x50010000

0000d970 <am_hal_cachectrl_config>:
    d970:	b530      	push	{r4, r5, lr}
    d972:	b083      	sub	sp, #12
    d974:	4604      	mov	r4, r0
    d976:	f000 fd27 	bl	e3c8 <am_hal_interrupt_master_disable>
    d97a:	4d0e      	ldr	r5, [pc, #56]	; (d9b4 <am_hal_cachectrl_config+0x44>)
    d97c:	9001      	str	r0, [sp, #4]
    d97e:	682b      	ldr	r3, [r5, #0]
    d980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d984:	602b      	str	r3, [r5, #0]
    d986:	9801      	ldr	r0, [sp, #4]
    d988:	f000 fd22 	bl	e3d0 <am_hal_interrupt_master_set>
    d98c:	7863      	ldrb	r3, [r4, #1]
    d98e:	7822      	ldrb	r2, [r4, #0]
    d990:	78a1      	ldrb	r1, [r4, #2]
    d992:	021b      	lsls	r3, r3, #8
    d994:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d998:	0112      	lsls	r2, r2, #4
    d99a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d99e:	b2d2      	uxtb	r2, r2
    d9a0:	4313      	orrs	r3, r2
    d9a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d9a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d9aa:	2000      	movs	r0, #0
    d9ac:	602b      	str	r3, [r5, #0]
    d9ae:	b003      	add	sp, #12
    d9b0:	bd30      	pop	{r4, r5, pc}
    d9b2:	bf00      	nop
    d9b4:	40018000 	.word	0x40018000

0000d9b8 <am_hal_cachectrl_enable>:
    d9b8:	4a03      	ldr	r2, [pc, #12]	; (d9c8 <am_hal_cachectrl_enable+0x10>)
    d9ba:	6813      	ldr	r3, [r2, #0]
    d9bc:	f043 0301 	orr.w	r3, r3, #1
    d9c0:	2000      	movs	r0, #0
    d9c2:	6013      	str	r3, [r2, #0]
    d9c4:	4770      	bx	lr
    d9c6:	bf00      	nop
    d9c8:	40018000 	.word	0x40018000

0000d9cc <am_hal_cachectrl_control>:
    d9cc:	b510      	push	{r4, lr}
    d9ce:	3801      	subs	r0, #1
    d9d0:	b08e      	sub	sp, #56	; 0x38
    d9d2:	2810      	cmp	r0, #16
    d9d4:	f200 815e 	bhi.w	dc94 <am_hal_cachectrl_control+0x2c8>
    d9d8:	e8df f010 	tbh	[pc, r0, lsl #1]
    d9dc:	00360018 	.word	0x00360018
    d9e0:	0040003d 	.word	0x0040003d
    d9e4:	00450043 	.word	0x00450043
    d9e8:	0011001a 	.word	0x0011001a
    d9ec:	00540047 	.word	0x00540047
    d9f0:	009a0061 	.word	0x009a0061
    d9f4:	010c00d3 	.word	0x010c00d3
    d9f8:	013f0126 	.word	0x013f0126
    d9fc:	001d      	.short	0x001d
    d9fe:	f44f 7300 	mov.w	r3, #512	; 0x200
    da02:	4aac      	ldr	r2, [pc, #688]	; (dcb4 <am_hal_cachectrl_control+0x2e8>)
    da04:	2000      	movs	r0, #0
    da06:	6093      	str	r3, [r2, #8]
    da08:	b00e      	add	sp, #56	; 0x38
    da0a:	bd10      	pop	{r4, pc}
    da0c:	2301      	movs	r3, #1
    da0e:	e7f8      	b.n	da02 <am_hal_cachectrl_control+0x36>
    da10:	f44f 6380 	mov.w	r3, #1024	; 0x400
    da14:	e7f5      	b.n	da02 <am_hal_cachectrl_control+0x36>
    da16:	2900      	cmp	r1, #0
    da18:	f000 813c 	beq.w	dc94 <am_hal_cachectrl_control+0x2c8>
    da1c:	684a      	ldr	r2, [r1, #4]
    da1e:	48a6      	ldr	r0, [pc, #664]	; (dcb8 <am_hal_cachectrl_control+0x2ec>)
    da20:	4202      	tst	r2, r0
    da22:	f040 8137 	bne.w	dc94 <am_hal_cachectrl_control+0x2c8>
    da26:	688b      	ldr	r3, [r1, #8]
    da28:	4018      	ands	r0, r3
    da2a:	f040 8133 	bne.w	dc94 <am_hal_cachectrl_control+0x2c8>
    da2e:	780c      	ldrb	r4, [r1, #0]
    da30:	2c00      	cmp	r4, #0
    da32:	f040 8133 	bne.w	dc9c <am_hal_cachectrl_control+0x2d0>
    da36:	4c9f      	ldr	r4, [pc, #636]	; (dcb4 <am_hal_cachectrl_control+0x2e8>)
    da38:	7849      	ldrb	r1, [r1, #1]
    da3a:	6122      	str	r2, [r4, #16]
    da3c:	6163      	str	r3, [r4, #20]
    da3e:	6823      	ldr	r3, [r4, #0]
    da40:	f361 0382 	bfi	r3, r1, #2, #1
    da44:	6023      	str	r3, [r4, #0]
    da46:	e7df      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    da48:	4b9a      	ldr	r3, [pc, #616]	; (dcb4 <am_hal_cachectrl_control+0x2e8>)
    da4a:	681b      	ldr	r3, [r3, #0]
    da4c:	01db      	lsls	r3, r3, #7
    da4e:	f140 811f 	bpl.w	dc90 <am_hal_cachectrl_control+0x2c4>
    da52:	2302      	movs	r3, #2
    da54:	e7d5      	b.n	da02 <am_hal_cachectrl_control+0x36>
    da56:	f44f 6388 	mov.w	r3, #1088	; 0x440
    da5a:	e7d2      	b.n	da02 <am_hal_cachectrl_control+0x36>
    da5c:	f44f 7308 	mov.w	r3, #544	; 0x220
    da60:	e7cf      	b.n	da02 <am_hal_cachectrl_control+0x36>
    da62:	2340      	movs	r3, #64	; 0x40
    da64:	e7cd      	b.n	da02 <am_hal_cachectrl_control+0x36>
    da66:	2320      	movs	r3, #32
    da68:	e7cb      	b.n	da02 <am_hal_cachectrl_control+0x36>
    da6a:	f000 fcad 	bl	e3c8 <am_hal_interrupt_master_disable>
    da6e:	4a91      	ldr	r2, [pc, #580]	; (dcb4 <am_hal_cachectrl_control+0x2e8>)
    da70:	9000      	str	r0, [sp, #0]
    da72:	6813      	ldr	r3, [r2, #0]
    da74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    da78:	6013      	str	r3, [r2, #0]
    da7a:	9800      	ldr	r0, [sp, #0]
    da7c:	f000 fca8 	bl	e3d0 <am_hal_interrupt_master_set>
    da80:	2000      	movs	r0, #0
    da82:	e7c1      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    da84:	f000 fca0 	bl	e3c8 <am_hal_interrupt_master_disable>
    da88:	4a8a      	ldr	r2, [pc, #552]	; (dcb4 <am_hal_cachectrl_control+0x2e8>)
    da8a:	9001      	str	r0, [sp, #4]
    da8c:	6813      	ldr	r3, [r2, #0]
    da8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    da92:	6013      	str	r3, [r2, #0]
    da94:	9801      	ldr	r0, [sp, #4]
    da96:	f000 fc9b 	bl	e3d0 <am_hal_interrupt_master_set>
    da9a:	2000      	movs	r0, #0
    da9c:	e7b4      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    da9e:	f000 fc93 	bl	e3c8 <am_hal_interrupt_master_disable>
    daa2:	4603      	mov	r3, r0
    daa4:	4885      	ldr	r0, [pc, #532]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    daa6:	9302      	str	r3, [sp, #8]
    daa8:	f000 fb06 	bl	e0b8 <am_hal_flash_load_ui32>
    daac:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    dab0:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    dab4:	4881      	ldr	r0, [pc, #516]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dab6:	f000 fb03 	bl	e0c0 <am_hal_flash_store_ui32>
    daba:	9802      	ldr	r0, [sp, #8]
    dabc:	f000 fc88 	bl	e3d0 <am_hal_interrupt_master_set>
    dac0:	f000 fc82 	bl	e3c8 <am_hal_interrupt_master_disable>
    dac4:	4603      	mov	r3, r0
    dac6:	487d      	ldr	r0, [pc, #500]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dac8:	9303      	str	r3, [sp, #12]
    daca:	f000 faf5 	bl	e0b8 <am_hal_flash_load_ui32>
    dace:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    dad2:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    dad6:	4879      	ldr	r0, [pc, #484]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dad8:	f000 faf2 	bl	e0c0 <am_hal_flash_store_ui32>
    dadc:	9803      	ldr	r0, [sp, #12]
    dade:	f000 fc77 	bl	e3d0 <am_hal_interrupt_master_set>
    dae2:	f000 fc71 	bl	e3c8 <am_hal_interrupt_master_disable>
    dae6:	4603      	mov	r3, r0
    dae8:	4874      	ldr	r0, [pc, #464]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    daea:	9304      	str	r3, [sp, #16]
    daec:	f000 fae4 	bl	e0b8 <am_hal_flash_load_ui32>
    daf0:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    daf4:	f020 000f 	bic.w	r0, r0, #15
    daf8:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    dafc:	f041 0103 	orr.w	r1, r1, #3
    db00:	486e      	ldr	r0, [pc, #440]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    db02:	f000 fadd 	bl	e0c0 <am_hal_flash_store_ui32>
    db06:	9804      	ldr	r0, [sp, #16]
    db08:	f000 fc62 	bl	e3d0 <am_hal_interrupt_master_set>
    db0c:	2000      	movs	r0, #0
    db0e:	e77b      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    db10:	f000 fc5a 	bl	e3c8 <am_hal_interrupt_master_disable>
    db14:	4603      	mov	r3, r0
    db16:	4869      	ldr	r0, [pc, #420]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    db18:	9305      	str	r3, [sp, #20]
    db1a:	f000 facd 	bl	e0b8 <am_hal_flash_load_ui32>
    db1e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    db22:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    db26:	4865      	ldr	r0, [pc, #404]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    db28:	f000 faca 	bl	e0c0 <am_hal_flash_store_ui32>
    db2c:	9805      	ldr	r0, [sp, #20]
    db2e:	f000 fc4f 	bl	e3d0 <am_hal_interrupt_master_set>
    db32:	f000 fc49 	bl	e3c8 <am_hal_interrupt_master_disable>
    db36:	4603      	mov	r3, r0
    db38:	4860      	ldr	r0, [pc, #384]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    db3a:	9306      	str	r3, [sp, #24]
    db3c:	f000 fabc 	bl	e0b8 <am_hal_flash_load_ui32>
    db40:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    db44:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    db48:	485c      	ldr	r0, [pc, #368]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    db4a:	f000 fab9 	bl	e0c0 <am_hal_flash_store_ui32>
    db4e:	9806      	ldr	r0, [sp, #24]
    db50:	f000 fc3e 	bl	e3d0 <am_hal_interrupt_master_set>
    db54:	f000 fc38 	bl	e3c8 <am_hal_interrupt_master_disable>
    db58:	4603      	mov	r3, r0
    db5a:	4858      	ldr	r0, [pc, #352]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    db5c:	9307      	str	r3, [sp, #28]
    db5e:	f000 faab 	bl	e0b8 <am_hal_flash_load_ui32>
    db62:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    db66:	f020 000f 	bic.w	r0, r0, #15
    db6a:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    db6e:	f041 0101 	orr.w	r1, r1, #1
    db72:	4852      	ldr	r0, [pc, #328]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    db74:	f000 faa4 	bl	e0c0 <am_hal_flash_store_ui32>
    db78:	9807      	ldr	r0, [sp, #28]
    db7a:	f000 fc29 	bl	e3d0 <am_hal_interrupt_master_set>
    db7e:	2000      	movs	r0, #0
    db80:	e742      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    db82:	f000 fc21 	bl	e3c8 <am_hal_interrupt_master_disable>
    db86:	4603      	mov	r3, r0
    db88:	484c      	ldr	r0, [pc, #304]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    db8a:	9308      	str	r3, [sp, #32]
    db8c:	f000 fa94 	bl	e0b8 <am_hal_flash_load_ui32>
    db90:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    db94:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    db98:	4848      	ldr	r0, [pc, #288]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    db9a:	f000 fa91 	bl	e0c0 <am_hal_flash_store_ui32>
    db9e:	9808      	ldr	r0, [sp, #32]
    dba0:	f000 fc16 	bl	e3d0 <am_hal_interrupt_master_set>
    dba4:	f000 fc10 	bl	e3c8 <am_hal_interrupt_master_disable>
    dba8:	4603      	mov	r3, r0
    dbaa:	4844      	ldr	r0, [pc, #272]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dbac:	9309      	str	r3, [sp, #36]	; 0x24
    dbae:	f000 fa83 	bl	e0b8 <am_hal_flash_load_ui32>
    dbb2:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    dbb6:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    dbba:	4840      	ldr	r0, [pc, #256]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dbbc:	f000 fa80 	bl	e0c0 <am_hal_flash_store_ui32>
    dbc0:	9809      	ldr	r0, [sp, #36]	; 0x24
    dbc2:	f000 fc05 	bl	e3d0 <am_hal_interrupt_master_set>
    dbc6:	f000 fbff 	bl	e3c8 <am_hal_interrupt_master_disable>
    dbca:	4603      	mov	r3, r0
    dbcc:	483b      	ldr	r0, [pc, #236]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dbce:	930a      	str	r3, [sp, #40]	; 0x28
    dbd0:	f000 fa72 	bl	e0b8 <am_hal_flash_load_ui32>
    dbd4:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    dbd8:	f020 000f 	bic.w	r0, r0, #15
    dbdc:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    dbe0:	f041 0101 	orr.w	r1, r1, #1
    dbe4:	4835      	ldr	r0, [pc, #212]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dbe6:	f000 fa6b 	bl	e0c0 <am_hal_flash_store_ui32>
    dbea:	980a      	ldr	r0, [sp, #40]	; 0x28
    dbec:	f000 fbf0 	bl	e3d0 <am_hal_interrupt_master_set>
    dbf0:	2000      	movs	r0, #0
    dbf2:	e709      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    dbf4:	2900      	cmp	r1, #0
    dbf6:	d04d      	beq.n	dc94 <am_hal_cachectrl_control+0x2c8>
    dbf8:	680c      	ldr	r4, [r1, #0]
    dbfa:	2c03      	cmp	r4, #3
    dbfc:	d84c      	bhi.n	dc98 <am_hal_cachectrl_control+0x2cc>
    dbfe:	f000 fbe3 	bl	e3c8 <am_hal_interrupt_master_disable>
    dc02:	4603      	mov	r3, r0
    dc04:	482d      	ldr	r0, [pc, #180]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dc06:	930b      	str	r3, [sp, #44]	; 0x2c
    dc08:	f000 fa56 	bl	e0b8 <am_hal_flash_load_ui32>
    dc0c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    dc10:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    dc14:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    dc18:	4828      	ldr	r0, [pc, #160]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dc1a:	f000 fa51 	bl	e0c0 <am_hal_flash_store_ui32>
    dc1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dc20:	f000 fbd6 	bl	e3d0 <am_hal_interrupt_master_set>
    dc24:	2000      	movs	r0, #0
    dc26:	e6ef      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    dc28:	b3a1      	cbz	r1, dc94 <am_hal_cachectrl_control+0x2c8>
    dc2a:	680c      	ldr	r4, [r1, #0]
    dc2c:	2c07      	cmp	r4, #7
    dc2e:	d833      	bhi.n	dc98 <am_hal_cachectrl_control+0x2cc>
    dc30:	f000 fbca 	bl	e3c8 <am_hal_interrupt_master_disable>
    dc34:	4603      	mov	r3, r0
    dc36:	4821      	ldr	r0, [pc, #132]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dc38:	930c      	str	r3, [sp, #48]	; 0x30
    dc3a:	f000 fa3d 	bl	e0b8 <am_hal_flash_load_ui32>
    dc3e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    dc42:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    dc46:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    dc4a:	481c      	ldr	r0, [pc, #112]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dc4c:	f000 fa38 	bl	e0c0 <am_hal_flash_store_ui32>
    dc50:	980c      	ldr	r0, [sp, #48]	; 0x30
    dc52:	f000 fbbd 	bl	e3d0 <am_hal_interrupt_master_set>
    dc56:	2000      	movs	r0, #0
    dc58:	e6d6      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    dc5a:	b1d9      	cbz	r1, dc94 <am_hal_cachectrl_control+0x2c8>
    dc5c:	680c      	ldr	r4, [r1, #0]
    dc5e:	2c0f      	cmp	r4, #15
    dc60:	d81a      	bhi.n	dc98 <am_hal_cachectrl_control+0x2cc>
    dc62:	f000 fbb1 	bl	e3c8 <am_hal_interrupt_master_disable>
    dc66:	4603      	mov	r3, r0
    dc68:	4814      	ldr	r0, [pc, #80]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dc6a:	930d      	str	r3, [sp, #52]	; 0x34
    dc6c:	f000 fa24 	bl	e0b8 <am_hal_flash_load_ui32>
    dc70:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    dc74:	f020 000f 	bic.w	r0, r0, #15
    dc78:	ea40 0104 	orr.w	r1, r0, r4
    dc7c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    dc80:	480e      	ldr	r0, [pc, #56]	; (dcbc <am_hal_cachectrl_control+0x2f0>)
    dc82:	f000 fa1d 	bl	e0c0 <am_hal_flash_store_ui32>
    dc86:	980d      	ldr	r0, [sp, #52]	; 0x34
    dc88:	f000 fba2 	bl	e3d0 <am_hal_interrupt_master_set>
    dc8c:	2000      	movs	r0, #0
    dc8e:	e6bb      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    dc90:	2007      	movs	r0, #7
    dc92:	e6b9      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    dc94:	2006      	movs	r0, #6
    dc96:	e6b7      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    dc98:	2001      	movs	r0, #1
    dc9a:	e6b5      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    dc9c:	2c01      	cmp	r4, #1
    dc9e:	d1f9      	bne.n	dc94 <am_hal_cachectrl_control+0x2c8>
    dca0:	4c04      	ldr	r4, [pc, #16]	; (dcb4 <am_hal_cachectrl_control+0x2e8>)
    dca2:	7849      	ldrb	r1, [r1, #1]
    dca4:	61a2      	str	r2, [r4, #24]
    dca6:	61e3      	str	r3, [r4, #28]
    dca8:	6823      	ldr	r3, [r4, #0]
    dcaa:	f361 03c3 	bfi	r3, r1, #3, #1
    dcae:	6023      	str	r3, [r4, #0]
    dcb0:	e6aa      	b.n	da08 <am_hal_cachectrl_control+0x3c>
    dcb2:	bf00      	nop
    dcb4:	40018000 	.word	0x40018000
    dcb8:	f800000f 	.word	0xf800000f
    dcbc:	40018004 	.word	0x40018004

0000dcc0 <am_hal_clkgen_control>:
    dcc0:	4b49      	ldr	r3, [pc, #292]	; (dde8 <am_hal_clkgen_control+0x128>)
    dcc2:	681a      	ldr	r2, [r3, #0]
    dcc4:	b912      	cbnz	r2, dccc <am_hal_clkgen_control+0xc>
    dcc6:	4a49      	ldr	r2, [pc, #292]	; (ddec <am_hal_clkgen_control+0x12c>)
    dcc8:	6812      	ldr	r2, [r2, #0]
    dcca:	601a      	str	r2, [r3, #0]
    dccc:	2809      	cmp	r0, #9
    dcce:	f200 8089 	bhi.w	dde4 <am_hal_clkgen_control+0x124>
    dcd2:	e8df f000 	tbb	[pc, r0]
    dcd6:	160d      	.short	0x160d
    dcd8:	423a261e 	.word	0x423a261e
    dcdc:	055c544c 	.word	0x055c544c
    dce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dce4:	2000      	movs	r0, #0
    dce6:	6a1a      	ldr	r2, [r3, #32]
    dce8:	f36f 0200 	bfc	r2, #0, #1
    dcec:	621a      	str	r2, [r3, #32]
    dcee:	4770      	bx	lr
    dcf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dcf4:	2200      	movs	r2, #0
    dcf6:	2147      	movs	r1, #71	; 0x47
    dcf8:	6159      	str	r1, [r3, #20]
    dcfa:	4610      	mov	r0, r2
    dcfc:	619a      	str	r2, [r3, #24]
    dcfe:	615a      	str	r2, [r3, #20]
    dd00:	4770      	bx	lr
    dd02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd06:	2000      	movs	r0, #0
    dd08:	899a      	ldrh	r2, [r3, #12]
    dd0a:	f36f 0200 	bfc	r2, #0, #1
    dd0e:	819a      	strh	r2, [r3, #12]
    dd10:	4770      	bx	lr
    dd12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd16:	2000      	movs	r0, #0
    dd18:	899a      	ldrh	r2, [r3, #12]
    dd1a:	f36f 0241 	bfc	r2, #1, #1
    dd1e:	819a      	strh	r2, [r3, #12]
    dd20:	4770      	bx	lr
    dd22:	4a33      	ldr	r2, [pc, #204]	; (ddf0 <am_hal_clkgen_control+0x130>)
    dd24:	68d3      	ldr	r3, [r2, #12]
    dd26:	b2db      	uxtb	r3, r3
    dd28:	2b21      	cmp	r3, #33	; 0x21
    dd2a:	d106      	bne.n	dd3a <am_hal_clkgen_control+0x7a>
    dd2c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dd30:	2101      	movs	r1, #1
    dd32:	f361 2309 	bfi	r3, r1, #8, #2
    dd36:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    dd3a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dd3e:	2000      	movs	r0, #0
    dd40:	8993      	ldrh	r3, [r2, #12]
    dd42:	f043 0301 	orr.w	r3, r3, #1
    dd46:	8193      	strh	r3, [r2, #12]
    dd48:	4770      	bx	lr
    dd4a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dd4e:	2000      	movs	r0, #0
    dd50:	8993      	ldrh	r3, [r2, #12]
    dd52:	f043 0302 	orr.w	r3, r3, #2
    dd56:	8193      	strh	r3, [r2, #12]
    dd58:	4770      	bx	lr
    dd5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd5e:	2200      	movs	r2, #0
    dd60:	2047      	movs	r0, #71	; 0x47
    dd62:	2101      	movs	r1, #1
    dd64:	6158      	str	r0, [r3, #20]
    dd66:	6199      	str	r1, [r3, #24]
    dd68:	4610      	mov	r0, r2
    dd6a:	615a      	str	r2, [r3, #20]
    dd6c:	4770      	bx	lr
    dd6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd72:	2000      	movs	r0, #0
    dd74:	899a      	ldrh	r2, [r3, #12]
    dd76:	f36f 12c7 	bfc	r2, #7, #1
    dd7a:	819a      	strh	r2, [r3, #12]
    dd7c:	4770      	bx	lr
    dd7e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dd82:	2000      	movs	r0, #0
    dd84:	8993      	ldrh	r3, [r2, #12]
    dd86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dd8a:	8193      	strh	r3, [r2, #12]
    dd8c:	4770      	bx	lr
    dd8e:	4a18      	ldr	r2, [pc, #96]	; (ddf0 <am_hal_clkgen_control+0x130>)
    dd90:	68d3      	ldr	r3, [r2, #12]
    dd92:	b2db      	uxtb	r3, r3
    dd94:	2b21      	cmp	r3, #33	; 0x21
    dd96:	d00a      	beq.n	ddae <am_hal_clkgen_control+0xee>
    dd98:	b139      	cbz	r1, ddaa <am_hal_clkgen_control+0xea>
    dd9a:	680b      	ldr	r3, [r1, #0]
    dd9c:	f043 0301 	orr.w	r3, r3, #1
    dda0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dda4:	2000      	movs	r0, #0
    dda6:	6213      	str	r3, [r2, #32]
    dda8:	4770      	bx	lr
    ddaa:	4b12      	ldr	r3, [pc, #72]	; (ddf4 <am_hal_clkgen_control+0x134>)
    ddac:	e7f8      	b.n	dda0 <am_hal_clkgen_control+0xe0>
    ddae:	b500      	push	{lr}
    ddb0:	b083      	sub	sp, #12
    ddb2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    ddb6:	9101      	str	r1, [sp, #4]
    ddb8:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    ddbc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    ddc0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    ddc4:	f000 f932 	bl	e02c <am_hal_flash_delay>
    ddc8:	9901      	ldr	r1, [sp, #4]
    ddca:	b149      	cbz	r1, dde0 <am_hal_clkgen_control+0x120>
    ddcc:	680b      	ldr	r3, [r1, #0]
    ddce:	f043 0301 	orr.w	r3, r3, #1
    ddd2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    ddd6:	2000      	movs	r0, #0
    ddd8:	6213      	str	r3, [r2, #32]
    ddda:	b003      	add	sp, #12
    dddc:	f85d fb04 	ldr.w	pc, [sp], #4
    dde0:	4b04      	ldr	r3, [pc, #16]	; (ddf4 <am_hal_clkgen_control+0x134>)
    dde2:	e7f6      	b.n	ddd2 <am_hal_clkgen_control+0x112>
    dde4:	2006      	movs	r0, #6
    dde6:	4770      	bx	lr
    dde8:	100017ac 	.word	0x100017ac
    ddec:	4ffff000 	.word	0x4ffff000
    ddf0:	40020000 	.word	0x40020000
    ddf4:	0025b801 	.word	0x0025b801

0000ddf8 <am_hal_clkgen_status_get>:
    ddf8:	b1b0      	cbz	r0, de28 <am_hal_clkgen_status_get+0x30>
    ddfa:	b410      	push	{r4}
    ddfc:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    de00:	4603      	mov	r3, r0
    de02:	698c      	ldr	r4, [r1, #24]
    de04:	4809      	ldr	r0, [pc, #36]	; (de2c <am_hal_clkgen_status_get+0x34>)
    de06:	4a0a      	ldr	r2, [pc, #40]	; (de30 <am_hal_clkgen_status_get+0x38>)
    de08:	f014 0f01 	tst.w	r4, #1
    de0c:	bf08      	it	eq
    de0e:	4602      	moveq	r2, r0
    de10:	601a      	str	r2, [r3, #0]
    de12:	69ca      	ldr	r2, [r1, #28]
    de14:	f85d 4b04 	ldr.w	r4, [sp], #4
    de18:	f002 0101 	and.w	r1, r2, #1
    de1c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    de20:	2000      	movs	r0, #0
    de22:	6059      	str	r1, [r3, #4]
    de24:	721a      	strb	r2, [r3, #8]
    de26:	4770      	bx	lr
    de28:	2006      	movs	r0, #6
    de2a:	4770      	bx	lr
    de2c:	02dc6c00 	.word	0x02dc6c00
    de30:	016e3600 	.word	0x016e3600

0000de34 <am_hal_ctimer_config_single>:
    de34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de38:	b082      	sub	sp, #8
    de3a:	460e      	mov	r6, r1
    de3c:	4605      	mov	r5, r0
    de3e:	4614      	mov	r4, r2
    de40:	f000 fac2 	bl	e3c8 <am_hal_interrupt_master_disable>
    de44:	4f20      	ldr	r7, [pc, #128]	; (dec8 <am_hal_ctimer_config_single+0x94>)
    de46:	9001      	str	r0, [sp, #4]
    de48:	ea4f 1845 	mov.w	r8, r5, lsl #5
    de4c:	f006 2308 	and.w	r3, r6, #134219776	; 0x8000800
    de50:	f858 2007 	ldr.w	r2, [r8, r7]
    de54:	4313      	orrs	r3, r2
    de56:	f848 3007 	str.w	r3, [r8, r7]
    de5a:	9801      	ldr	r0, [sp, #4]
    de5c:	f000 fab8 	bl	e3d0 <am_hal_interrupt_master_set>
    de60:	f000 fab2 	bl	e3c8 <am_hal_interrupt_master_disable>
    de64:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    de68:	9000      	str	r0, [sp, #0]
    de6a:	f858 3007 	ldr.w	r3, [r8, r7]
    de6e:	d021      	beq.n	deb4 <am_hal_ctimer_config_single+0x80>
    de70:	ea23 0306 	bic.w	r3, r3, r6
    de74:	1c72      	adds	r2, r6, #1
    de76:	ea43 0304 	orr.w	r3, r3, r4
    de7a:	d110      	bne.n	de9e <am_hal_ctimer_config_single+0x6a>
    de7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    de80:	f848 3007 	str.w	r3, [r8, r7]
    de84:	9800      	ldr	r0, [sp, #0]
    de86:	f000 faa3 	bl	e3d0 <am_hal_interrupt_master_set>
    de8a:	2300      	movs	r3, #0
    de8c:	480f      	ldr	r0, [pc, #60]	; (decc <am_hal_ctimer_config_single+0x98>)
    de8e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    de92:	f3c4 0444 	ubfx	r4, r4, #1, #5
    de96:	54ec      	strb	r4, [r5, r3]
    de98:	b002      	add	sp, #8
    de9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de9e:	f848 3007 	str.w	r3, [r8, r7]
    dea2:	9800      	ldr	r0, [sp, #0]
    dea4:	f000 fa94 	bl	e3d0 <am_hal_interrupt_master_set>
    dea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    deac:	429e      	cmp	r6, r3
    deae:	d1f3      	bne.n	de98 <am_hal_ctimer_config_single+0x64>
    deb0:	2300      	movs	r3, #0
    deb2:	e7eb      	b.n	de8c <am_hal_ctimer_config_single+0x58>
    deb4:	b29b      	uxth	r3, r3
    deb6:	0424      	lsls	r4, r4, #16
    deb8:	4323      	orrs	r3, r4
    deba:	f848 3007 	str.w	r3, [r8, r7]
    debe:	9800      	ldr	r0, [sp, #0]
    dec0:	f000 fa86 	bl	e3d0 <am_hal_interrupt_master_set>
    dec4:	2301      	movs	r3, #1
    dec6:	e7e1      	b.n	de8c <am_hal_ctimer_config_single+0x58>
    dec8:	4000800c 	.word	0x4000800c
    decc:	10001028 	.word	0x10001028

0000ded0 <am_hal_ctimer_start>:
    ded0:	b530      	push	{r4, r5, lr}
    ded2:	b083      	sub	sp, #12
    ded4:	460c      	mov	r4, r1
    ded6:	4605      	mov	r5, r0
    ded8:	f000 fa76 	bl	e3c8 <am_hal_interrupt_master_disable>
    dedc:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    dee0:	4910      	ldr	r1, [pc, #64]	; (df24 <am_hal_ctimer_start+0x54>)
    dee2:	9001      	str	r0, [sp, #4]
    dee4:	f85c 3001 	ldr.w	r3, [ip, r1]
    dee8:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    deec:	ea23 0202 	bic.w	r2, r3, r2
    def0:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    def4:	4313      	orrs	r3, r2
    def6:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    defa:	f84c 3001 	str.w	r3, [ip, r1]
    defe:	bf0c      	ite	eq
    df00:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    df04:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    df08:	4b07      	ldr	r3, [pc, #28]	; (df28 <am_hal_ctimer_start+0x58>)
    df0a:	9801      	ldr	r0, [sp, #4]
    df0c:	bf0c      	ite	eq
    df0e:	2201      	moveq	r2, #1
    df10:	2200      	movne	r2, #0
    df12:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    df16:	54ac      	strb	r4, [r5, r2]
    df18:	b003      	add	sp, #12
    df1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    df1e:	f000 ba57 	b.w	e3d0 <am_hal_interrupt_master_set>
    df22:	bf00      	nop
    df24:	4000800c 	.word	0x4000800c
    df28:	10001028 	.word	0x10001028

0000df2c <am_hal_ctimer_period_set>:
    df2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df30:	b082      	sub	sp, #8
    df32:	0145      	lsls	r5, r0, #5
    df34:	460e      	mov	r6, r1
    df36:	4614      	mov	r4, r2
    df38:	461f      	mov	r7, r3
    df3a:	f000 fa45 	bl	e3c8 <am_hal_interrupt_master_disable>
    df3e:	f8df 809c 	ldr.w	r8, [pc, #156]	; dfdc <am_hal_ctimer_period_set+0xb0>
    df42:	9001      	str	r0, [sp, #4]
    df44:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    df48:	f855 2008 	ldr.w	r2, [r5, r8]
    df4c:	4821      	ldr	r0, [pc, #132]	; (dfd4 <am_hal_ctimer_period_set+0xa8>)
    df4e:	d02f      	beq.n	dfb0 <am_hal_ctimer_period_set+0x84>
    df50:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    df54:	2a80      	cmp	r2, #128	; 0x80
    df56:	d019      	beq.n	df8c <am_hal_ctimer_period_set+0x60>
    df58:	f64f 72ff 	movw	r2, #65535	; 0xffff
    df5c:	2100      	movs	r1, #0
    df5e:	4296      	cmp	r6, r2
    df60:	460b      	mov	r3, r1
    df62:	d01c      	beq.n	df9e <am_hal_ctimer_period_set+0x72>
    df64:	4a1c      	ldr	r2, [pc, #112]	; (dfd8 <am_hal_ctimer_period_set+0xac>)
    df66:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    df6a:	eb05 0702 	add.w	r7, r5, r2
    df6e:	d027      	beq.n	dfc0 <am_hal_ctimer_period_set+0x94>
    df70:	0c1b      	lsrs	r3, r3, #16
    df72:	041b      	lsls	r3, r3, #16
    df74:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    df78:	b2a4      	uxth	r4, r4
    df7a:	4321      	orrs	r1, r4
    df7c:	5029      	str	r1, [r5, r0]
    df7e:	50ab      	str	r3, [r5, r2]
    df80:	9801      	ldr	r0, [sp, #4]
    df82:	b002      	add	sp, #8
    df84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    df88:	f000 ba22 	b.w	e3d0 <am_hal_interrupt_master_set>
    df8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    df90:	4296      	cmp	r6, r2
    df92:	ea4f 4104 	mov.w	r1, r4, lsl #16
    df96:	4623      	mov	r3, r4
    df98:	eba4 0407 	sub.w	r4, r4, r7
    df9c:	d1e2      	bne.n	df64 <am_hal_ctimer_period_set+0x38>
    df9e:	b2a4      	uxth	r4, r4
    dfa0:	4321      	orrs	r1, r4
    dfa2:	5029      	str	r1, [r5, r0]
    dfa4:	9801      	ldr	r0, [sp, #4]
    dfa6:	b002      	add	sp, #8
    dfa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dfac:	f000 ba10 	b.w	e3d0 <am_hal_interrupt_master_set>
    dfb0:	0c12      	lsrs	r2, r2, #16
    dfb2:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    dfb6:	2a80      	cmp	r2, #128	; 0x80
    dfb8:	d0e8      	beq.n	df8c <am_hal_ctimer_period_set+0x60>
    dfba:	4f07      	ldr	r7, [pc, #28]	; (dfd8 <am_hal_ctimer_period_set+0xac>)
    dfbc:	2100      	movs	r1, #0
    dfbe:	442f      	add	r7, r5
    dfc0:	b2a4      	uxth	r4, r4
    dfc2:	4321      	orrs	r1, r4
    dfc4:	6039      	str	r1, [r7, #0]
    dfc6:	9801      	ldr	r0, [sp, #4]
    dfc8:	b002      	add	sp, #8
    dfca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dfce:	f000 b9ff 	b.w	e3d0 <am_hal_interrupt_master_set>
    dfd2:	bf00      	nop
    dfd4:	40008004 	.word	0x40008004
    dfd8:	40008008 	.word	0x40008008
    dfdc:	4000800c 	.word	0x4000800c

0000dfe0 <am_hal_ctimer_adc_trigger_enable>:
    dfe0:	b500      	push	{lr}
    dfe2:	b083      	sub	sp, #12
    dfe4:	f000 f9f0 	bl	e3c8 <am_hal_interrupt_master_disable>
    dfe8:	4a05      	ldr	r2, [pc, #20]	; (e000 <am_hal_ctimer_adc_trigger_enable+0x20>)
    dfea:	9001      	str	r0, [sp, #4]
    dfec:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    dfee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dff2:	66d3      	str	r3, [r2, #108]	; 0x6c
    dff4:	9801      	ldr	r0, [sp, #4]
    dff6:	b003      	add	sp, #12
    dff8:	f85d eb04 	ldr.w	lr, [sp], #4
    dffc:	f000 b9e8 	b.w	e3d0 <am_hal_interrupt_master_set>
    e000:	40008000 	.word	0x40008000

0000e004 <am_hal_ctimer_int_enable>:
    e004:	b510      	push	{r4, lr}
    e006:	b082      	sub	sp, #8
    e008:	4604      	mov	r4, r0
    e00a:	f000 f9dd 	bl	e3c8 <am_hal_interrupt_master_disable>
    e00e:	4a06      	ldr	r2, [pc, #24]	; (e028 <am_hal_ctimer_int_enable+0x24>)
    e010:	9001      	str	r0, [sp, #4]
    e012:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    e016:	4323      	orrs	r3, r4
    e018:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    e01c:	9801      	ldr	r0, [sp, #4]
    e01e:	b002      	add	sp, #8
    e020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e024:	f000 b9d4 	b.w	e3d0 <am_hal_interrupt_master_set>
    e028:	40008000 	.word	0x40008000

0000e02c <am_hal_flash_delay>:
    e02c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e032:	075b      	lsls	r3, r3, #29
    e034:	bf46      	itte	mi
    e036:	0040      	lslmi	r0, r0, #1
    e038:	230e      	movmi	r3, #14
    e03a:	230b      	movpl	r3, #11
    e03c:	4298      	cmp	r0, r3
    e03e:	d902      	bls.n	e046 <am_hal_flash_delay+0x1a>
    e040:	4a01      	ldr	r2, [pc, #4]	; (e048 <am_hal_flash_delay+0x1c>)
    e042:	1ac0      	subs	r0, r0, r3
    e044:	4710      	bx	r2
    e046:	4770      	bx	lr
    e048:	0800009d 	.word	0x0800009d

0000e04c <am_hal_flash_delay_status_check>:
    e04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e050:	f89d c020 	ldrb.w	ip, [sp, #32]
    e054:	f8df 805c 	ldr.w	r8, [pc, #92]	; e0b4 <am_hal_flash_delay_status_check+0x68>
    e058:	4604      	mov	r4, r0
    e05a:	460d      	mov	r5, r1
    e05c:	4616      	mov	r6, r2
    e05e:	461f      	mov	r7, r3
    e060:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e064:	f1bc 0f00 	cmp.w	ip, #0
    e068:	d00a      	beq.n	e080 <am_hal_flash_delay_status_check+0x34>
    e06a:	e01a      	b.n	e0a2 <am_hal_flash_delay_status_check+0x56>
    e06c:	b1f4      	cbz	r4, e0ac <am_hal_flash_delay_status_check+0x60>
    e06e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e072:	f013 0f04 	tst.w	r3, #4
    e076:	bf0c      	ite	eq
    e078:	2005      	moveq	r0, #5
    e07a:	2012      	movne	r0, #18
    e07c:	3c01      	subs	r4, #1
    e07e:	47c0      	blx	r8
    e080:	6828      	ldr	r0, [r5, #0]
    e082:	4030      	ands	r0, r6
    e084:	42b8      	cmp	r0, r7
    e086:	d0f1      	beq.n	e06c <am_hal_flash_delay_status_check+0x20>
    e088:	2000      	movs	r0, #0
    e08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e08e:	b16c      	cbz	r4, e0ac <am_hal_flash_delay_status_check+0x60>
    e090:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e094:	f013 0f04 	tst.w	r3, #4
    e098:	bf0c      	ite	eq
    e09a:	2005      	moveq	r0, #5
    e09c:	2012      	movne	r0, #18
    e09e:	3c01      	subs	r4, #1
    e0a0:	47c0      	blx	r8
    e0a2:	6828      	ldr	r0, [r5, #0]
    e0a4:	4030      	ands	r0, r6
    e0a6:	42b8      	cmp	r0, r7
    e0a8:	d1f1      	bne.n	e08e <am_hal_flash_delay_status_check+0x42>
    e0aa:	e7ed      	b.n	e088 <am_hal_flash_delay_status_check+0x3c>
    e0ac:	2004      	movs	r0, #4
    e0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e0b2:	bf00      	nop
    e0b4:	0800009d 	.word	0x0800009d

0000e0b8 <am_hal_flash_load_ui32>:
    e0b8:	4b00      	ldr	r3, [pc, #0]	; (e0bc <am_hal_flash_load_ui32+0x4>)
    e0ba:	4718      	bx	r3
    e0bc:	08000075 	.word	0x08000075

0000e0c0 <am_hal_flash_store_ui32>:
    e0c0:	4b01      	ldr	r3, [pc, #4]	; (e0c8 <am_hal_flash_store_ui32+0x8>)
    e0c2:	f043 0301 	orr.w	r3, r3, #1
    e0c6:	4718      	bx	r3
    e0c8:	10001038 	.word	0x10001038

0000e0cc <am_hal_gpio_pinconfig>:
    e0cc:	2831      	cmp	r0, #49	; 0x31
    e0ce:	f200 80c3 	bhi.w	e258 <am_hal_gpio_pinconfig+0x18c>
    e0d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0d6:	4604      	mov	r4, r0
    e0d8:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    e0dc:	f001 0007 	and.w	r0, r1, #7
    e0e0:	b085      	sub	sp, #20
    e0e2:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    e0e6:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    e0ea:	d00f      	beq.n	e10c <am_hal_gpio_pinconfig+0x40>
    e0ec:	f3c1 1642 	ubfx	r6, r1, #5, #3
    e0f0:	1db5      	adds	r5, r6, #6
    e0f2:	f005 0507 	and.w	r5, r5, #7
    e0f6:	2d03      	cmp	r5, #3
    e0f8:	f042 0201 	orr.w	r2, r2, #1
    e0fc:	f240 80ae 	bls.w	e25c <am_hal_gpio_pinconfig+0x190>
    e100:	2fc0      	cmp	r7, #192	; 0xc0
    e102:	f000 80e1 	beq.w	e2c8 <am_hal_gpio_pinconfig+0x1fc>
    e106:	2f20      	cmp	r7, #32
    e108:	f000 80e3 	beq.w	e2d2 <am_hal_gpio_pinconfig+0x206>
    e10c:	b163      	cbz	r3, e128 <am_hal_gpio_pinconfig+0x5c>
    e10e:	2b01      	cmp	r3, #1
    e110:	f000 80d3 	beq.w	e2ba <am_hal_gpio_pinconfig+0x1ee>
    e114:	2b02      	cmp	r3, #2
    e116:	f040 80c9 	bne.w	e2ac <am_hal_gpio_pinconfig+0x1e0>
    e11a:	4b79      	ldr	r3, [pc, #484]	; (e300 <am_hal_gpio_pinconfig+0x234>)
    e11c:	5d1b      	ldrb	r3, [r3, r4]
    e11e:	075b      	lsls	r3, r3, #29
    e120:	f140 80c4 	bpl.w	e2ac <am_hal_gpio_pinconfig+0x1e0>
    e124:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e128:	4b76      	ldr	r3, [pc, #472]	; (e304 <am_hal_gpio_pinconfig+0x238>)
    e12a:	5d1b      	ldrb	r3, [r3, r4]
    e12c:	4103      	asrs	r3, r0
    e12e:	005b      	lsls	r3, r3, #1
    e130:	f003 0302 	and.w	r3, r3, #2
    e134:	4313      	orrs	r3, r2
    e136:	4a74      	ldr	r2, [pc, #464]	; (e308 <am_hal_gpio_pinconfig+0x23c>)
    e138:	5d12      	ldrb	r2, [r2, r4]
    e13a:	4282      	cmp	r2, r0
    e13c:	f000 8099 	beq.w	e272 <am_hal_gpio_pinconfig+0x1a6>
    e140:	f3c1 3000 	ubfx	r0, r1, #12, #1
    e144:	f3c1 2581 	ubfx	r5, r1, #10, #2
    e148:	f3c1 3280 	ubfx	r2, r1, #14, #1
    e14c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    e150:	0a88      	lsrs	r0, r1, #10
    e152:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e156:	f000 0008 	and.w	r0, r0, #8
    e15a:	4302      	orrs	r2, r0
    e15c:	f3c1 2007 	ubfx	r0, r1, #8, #8
    e160:	f000 050c 	and.w	r5, r0, #12
    e164:	2d04      	cmp	r5, #4
    e166:	f000 80a5 	beq.w	e2b4 <am_hal_gpio_pinconfig+0x1e8>
    e16a:	4d68      	ldr	r5, [pc, #416]	; (e30c <am_hal_gpio_pinconfig+0x240>)
    e16c:	682d      	ldr	r5, [r5, #0]
    e16e:	eba1 0805 	sub.w	r8, r1, r5
    e172:	fab8 f888 	clz	r8, r8
    e176:	ea4f 1858 	mov.w	r8, r8, lsr #5
    e17a:	f010 0f60 	tst.w	r0, #96	; 0x60
    e17e:	bf04      	itt	eq
    e180:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    e184:	f360 0200 	bfieq	r2, r0, #0, #1
    e188:	00a0      	lsls	r0, r4, #2
    e18a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e18e:	2902      	cmp	r1, #2
    e190:	d05c      	beq.n	e24c <am_hal_gpio_pinconfig+0x180>
    e192:	2903      	cmp	r1, #3
    e194:	d058      	beq.n	e248 <am_hal_gpio_pinconfig+0x17c>
    e196:	2901      	cmp	r1, #1
    e198:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    e19c:	bf08      	it	eq
    e19e:	f043 0304 	orreq.w	r3, r3, #4
    e1a2:	f001 0118 	and.w	r1, r1, #24
    e1a6:	2700      	movs	r7, #0
    e1a8:	f000 001c 	and.w	r0, r0, #28
    e1ac:	fa02 f600 	lsl.w	r6, r2, r0
    e1b0:	220f      	movs	r2, #15
    e1b2:	4082      	lsls	r2, r0
    e1b4:	43d2      	mvns	r2, r2
    e1b6:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e1ba:	fa03 f501 	lsl.w	r5, r3, r1
    e1be:	fa09 f901 	lsl.w	r9, r9, r1
    e1c2:	9201      	str	r2, [sp, #4]
    e1c4:	f000 f900 	bl	e3c8 <am_hal_interrupt_master_disable>
    e1c8:	f024 0a03 	bic.w	sl, r4, #3
    e1cc:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    e1d0:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    e1d4:	4b4e      	ldr	r3, [pc, #312]	; (e310 <am_hal_gpio_pinconfig+0x244>)
    e1d6:	494f      	ldr	r1, [pc, #316]	; (e314 <am_hal_gpio_pinconfig+0x248>)
    e1d8:	9a01      	ldr	r2, [sp, #4]
    e1da:	9003      	str	r0, [sp, #12]
    e1dc:	ea6f 0909 	mvn.w	r9, r9
    e1e0:	f02b 0b03 	bic.w	fp, fp, #3
    e1e4:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    e1e8:	f1b8 0f00 	cmp.w	r8, #0
    e1ec:	d00b      	beq.n	e206 <am_hal_gpio_pinconfig+0x13a>
    e1ee:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    e1f2:	f004 081f 	and.w	r8, r4, #31
    e1f6:	4848      	ldr	r0, [pc, #288]	; (e318 <am_hal_gpio_pinconfig+0x24c>)
    e1f8:	f00e 0e04 	and.w	lr, lr, #4
    e1fc:	2401      	movs	r4, #1
    e1fe:	fa04 f408 	lsl.w	r4, r4, r8
    e202:	f84e 4000 	str.w	r4, [lr, r0]
    e206:	4845      	ldr	r0, [pc, #276]	; (e31c <am_hal_gpio_pinconfig+0x250>)
    e208:	2473      	movs	r4, #115	; 0x73
    e20a:	6604      	str	r4, [r0, #96]	; 0x60
    e20c:	f8dc 4000 	ldr.w	r4, [ip]
    e210:	ea04 0409 	and.w	r4, r4, r9
    e214:	4325      	orrs	r5, r4
    e216:	f8cc 5000 	str.w	r5, [ip]
    e21a:	f85b 4003 	ldr.w	r4, [fp, r3]
    e21e:	4022      	ands	r2, r4
    e220:	4332      	orrs	r2, r6
    e222:	f84b 2003 	str.w	r2, [fp, r3]
    e226:	f85a 3001 	ldr.w	r3, [sl, r1]
    e22a:	ea03 0909 	and.w	r9, r3, r9
    e22e:	2400      	movs	r4, #0
    e230:	ea49 0707 	orr.w	r7, r9, r7
    e234:	f84a 7001 	str.w	r7, [sl, r1]
    e238:	6604      	str	r4, [r0, #96]	; 0x60
    e23a:	9803      	ldr	r0, [sp, #12]
    e23c:	f000 f8c8 	bl	e3d0 <am_hal_interrupt_master_set>
    e240:	4620      	mov	r0, r4
    e242:	b005      	add	sp, #20
    e244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e248:	f043 0304 	orr.w	r3, r3, #4
    e24c:	00e1      	lsls	r1, r4, #3
    e24e:	f001 0118 	and.w	r1, r1, #24
    e252:	2701      	movs	r7, #1
    e254:	408f      	lsls	r7, r1
    e256:	e7a7      	b.n	e1a8 <am_hal_gpio_pinconfig+0xdc>
    e258:	2006      	movs	r0, #6
    e25a:	4770      	bx	lr
    e25c:	4d28      	ldr	r5, [pc, #160]	; (e300 <am_hal_gpio_pinconfig+0x234>)
    e25e:	5d2d      	ldrb	r5, [r5, r4]
    e260:	3e02      	subs	r6, #2
    e262:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e266:	07ee      	lsls	r6, r5, #31
    e268:	d536      	bpl.n	e2d8 <am_hal_gpio_pinconfig+0x20c>
    e26a:	2b00      	cmp	r3, #0
    e26c:	f43f af5c 	beq.w	e128 <am_hal_gpio_pinconfig+0x5c>
    e270:	e74d      	b.n	e10e <am_hal_gpio_pinconfig+0x42>
    e272:	f3c1 4202 	ubfx	r2, r1, #16, #3
    e276:	2a07      	cmp	r2, #7
    e278:	d030      	beq.n	e2dc <am_hal_gpio_pinconfig+0x210>
    e27a:	4d29      	ldr	r5, [pc, #164]	; (e320 <am_hal_gpio_pinconfig+0x254>)
    e27c:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    e280:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e284:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    e288:	4290      	cmp	r0, r2
    e28a:	d029      	beq.n	e2e0 <am_hal_gpio_pinconfig+0x214>
    e28c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e290:	00a0      	lsls	r0, r4, #2
    e292:	786e      	ldrb	r6, [r5, #1]
    e294:	4296      	cmp	r6, r2
    e296:	d02d      	beq.n	e2f4 <am_hal_gpio_pinconfig+0x228>
    e298:	78ae      	ldrb	r6, [r5, #2]
    e29a:	4296      	cmp	r6, r2
    e29c:	d02c      	beq.n	e2f8 <am_hal_gpio_pinconfig+0x22c>
    e29e:	78ed      	ldrb	r5, [r5, #3]
    e2a0:	4295      	cmp	r5, r2
    e2a2:	d02b      	beq.n	e2fc <am_hal_gpio_pinconfig+0x230>
    e2a4:	481f      	ldr	r0, [pc, #124]	; (e324 <am_hal_gpio_pinconfig+0x258>)
    e2a6:	b005      	add	sp, #20
    e2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2ac:	481e      	ldr	r0, [pc, #120]	; (e328 <am_hal_gpio_pinconfig+0x25c>)
    e2ae:	b005      	add	sp, #20
    e2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2b4:	f04f 0801 	mov.w	r8, #1
    e2b8:	e75f      	b.n	e17a <am_hal_gpio_pinconfig+0xae>
    e2ba:	4b11      	ldr	r3, [pc, #68]	; (e300 <am_hal_gpio_pinconfig+0x234>)
    e2bc:	5d1b      	ldrb	r3, [r3, r4]
    e2be:	079d      	lsls	r5, r3, #30
    e2c0:	d5f4      	bpl.n	e2ac <am_hal_gpio_pinconfig+0x1e0>
    e2c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e2c6:	e72f      	b.n	e128 <am_hal_gpio_pinconfig+0x5c>
    e2c8:	2c14      	cmp	r4, #20
    e2ca:	f43f af1f 	beq.w	e10c <am_hal_gpio_pinconfig+0x40>
    e2ce:	4817      	ldr	r0, [pc, #92]	; (e32c <am_hal_gpio_pinconfig+0x260>)
    e2d0:	e7b7      	b.n	e242 <am_hal_gpio_pinconfig+0x176>
    e2d2:	2c14      	cmp	r4, #20
    e2d4:	f47f af1a 	bne.w	e10c <am_hal_gpio_pinconfig+0x40>
    e2d8:	4815      	ldr	r0, [pc, #84]	; (e330 <am_hal_gpio_pinconfig+0x264>)
    e2da:	e7b2      	b.n	e242 <am_hal_gpio_pinconfig+0x176>
    e2dc:	4815      	ldr	r0, [pc, #84]	; (e334 <am_hal_gpio_pinconfig+0x268>)
    e2de:	e7b0      	b.n	e242 <am_hal_gpio_pinconfig+0x176>
    e2e0:	2200      	movs	r2, #0
    e2e2:	00a0      	lsls	r0, r4, #2
    e2e4:	0052      	lsls	r2, r2, #1
    e2e6:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e2ea:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    e2ee:	f04f 0800 	mov.w	r8, #0
    e2f2:	e74a      	b.n	e18a <am_hal_gpio_pinconfig+0xbe>
    e2f4:	2201      	movs	r2, #1
    e2f6:	e7f5      	b.n	e2e4 <am_hal_gpio_pinconfig+0x218>
    e2f8:	2202      	movs	r2, #2
    e2fa:	e7f3      	b.n	e2e4 <am_hal_gpio_pinconfig+0x218>
    e2fc:	2203      	movs	r2, #3
    e2fe:	e7f1      	b.n	e2e4 <am_hal_gpio_pinconfig+0x218>
    e300:	0000ecb0 	.word	0x0000ecb0
    e304:	0000ece4 	.word	0x0000ece4
    e308:	0000ede0 	.word	0x0000ede0
    e30c:	0000eca8 	.word	0x0000eca8
    e310:	40010040 	.word	0x40010040
    e314:	400100e0 	.word	0x400100e0
    e318:	400100b4 	.word	0x400100b4
    e31c:	40010000 	.word	0x40010000
    e320:	0000ed18 	.word	0x0000ed18
    e324:	08000104 	.word	0x08000104
    e328:	08000102 	.word	0x08000102
    e32c:	08000101 	.word	0x08000101
    e330:	08000100 	.word	0x08000100
    e334:	08000103 	.word	0x08000103

0000e338 <am_hal_gpio_state_write>:
    e338:	2831      	cmp	r0, #49	; 0x31
    e33a:	d81a      	bhi.n	e372 <am_hal_gpio_state_write+0x3a>
    e33c:	b570      	push	{r4, r5, r6, lr}
    e33e:	2905      	cmp	r1, #5
    e340:	b082      	sub	sp, #8
    e342:	460d      	mov	r5, r1
    e344:	d812      	bhi.n	e36c <am_hal_gpio_state_write+0x34>
    e346:	f000 031f 	and.w	r3, r0, #31
    e34a:	2201      	movs	r2, #1
    e34c:	08c0      	lsrs	r0, r0, #3
    e34e:	fa02 f603 	lsl.w	r6, r2, r3
    e352:	f000 0404 	and.w	r4, r0, #4
    e356:	f000 f837 	bl	e3c8 <am_hal_interrupt_master_disable>
    e35a:	3d01      	subs	r5, #1
    e35c:	9001      	str	r0, [sp, #4]
    e35e:	2d04      	cmp	r5, #4
    e360:	d821      	bhi.n	e3a6 <am_hal_gpio_state_write+0x6e>
    e362:	e8df f005 	tbb	[pc, r5]
    e366:	1512      	.short	0x1512
    e368:	1d1a      	.short	0x1d1a
    e36a:	08          	.byte	0x08
    e36b:	00          	.byte	0x00
    e36c:	2006      	movs	r0, #6
    e36e:	b002      	add	sp, #8
    e370:	bd70      	pop	{r4, r5, r6, pc}
    e372:	2005      	movs	r0, #5
    e374:	4770      	bx	lr
    e376:	4a0d      	ldr	r2, [pc, #52]	; (e3ac <am_hal_gpio_state_write+0x74>)
    e378:	58a3      	ldr	r3, [r4, r2]
    e37a:	4073      	eors	r3, r6
    e37c:	50a3      	str	r3, [r4, r2]
    e37e:	9801      	ldr	r0, [sp, #4]
    e380:	f000 f826 	bl	e3d0 <am_hal_interrupt_master_set>
    e384:	2000      	movs	r0, #0
    e386:	b002      	add	sp, #8
    e388:	bd70      	pop	{r4, r5, r6, pc}
    e38a:	4b09      	ldr	r3, [pc, #36]	; (e3b0 <am_hal_gpio_state_write+0x78>)
    e38c:	50e6      	str	r6, [r4, r3]
    e38e:	e7f6      	b.n	e37e <am_hal_gpio_state_write+0x46>
    e390:	4a08      	ldr	r2, [pc, #32]	; (e3b4 <am_hal_gpio_state_write+0x7c>)
    e392:	58a3      	ldr	r3, [r4, r2]
    e394:	4073      	eors	r3, r6
    e396:	50a3      	str	r3, [r4, r2]
    e398:	e7f1      	b.n	e37e <am_hal_gpio_state_write+0x46>
    e39a:	4b04      	ldr	r3, [pc, #16]	; (e3ac <am_hal_gpio_state_write+0x74>)
    e39c:	50e6      	str	r6, [r4, r3]
    e39e:	e7ee      	b.n	e37e <am_hal_gpio_state_write+0x46>
    e3a0:	4b05      	ldr	r3, [pc, #20]	; (e3b8 <am_hal_gpio_state_write+0x80>)
    e3a2:	50e6      	str	r6, [r4, r3]
    e3a4:	e7eb      	b.n	e37e <am_hal_gpio_state_write+0x46>
    e3a6:	4b05      	ldr	r3, [pc, #20]	; (e3bc <am_hal_gpio_state_write+0x84>)
    e3a8:	50e6      	str	r6, [r4, r3]
    e3aa:	e7e8      	b.n	e37e <am_hal_gpio_state_write+0x46>
    e3ac:	400100b4 	.word	0x400100b4
    e3b0:	40010090 	.word	0x40010090
    e3b4:	40010088 	.word	0x40010088
    e3b8:	400100a8 	.word	0x400100a8
    e3bc:	40010098 	.word	0x40010098

0000e3c0 <am_hal_interrupt_master_enable>:
    e3c0:	f3ef 8010 	mrs	r0, PRIMASK
    e3c4:	b662      	cpsie	i
    e3c6:	4770      	bx	lr

0000e3c8 <am_hal_interrupt_master_disable>:
    e3c8:	f3ef 8010 	mrs	r0, PRIMASK
    e3cc:	b672      	cpsid	i
    e3ce:	4770      	bx	lr

0000e3d0 <am_hal_interrupt_master_set>:
    e3d0:	f380 8810 	msr	PRIMASK, r0
    e3d4:	4770      	bx	lr
    e3d6:	bf00      	nop

0000e3d8 <am_hal_itm_enable>:
    e3d8:	4a0e      	ldr	r2, [pc, #56]	; (e414 <am_hal_itm_enable+0x3c>)
    e3da:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e3de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e3e2:	b410      	push	{r4}
    e3e4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e3e8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e3ec:	01db      	lsls	r3, r3, #7
    e3ee:	d5fb      	bpl.n	e3e8 <am_hal_itm_enable+0x10>
    e3f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e3f4:	4c08      	ldr	r4, [pc, #32]	; (e418 <am_hal_itm_enable+0x40>)
    e3f6:	4a09      	ldr	r2, [pc, #36]	; (e41c <am_hal_itm_enable+0x44>)
    e3f8:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e3fc:	200f      	movs	r0, #15
    e3fe:	f04f 31ff 	mov.w	r1, #4294967295
    e402:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e406:	f85d 4b04 	ldr.w	r4, [sp], #4
    e40a:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e40e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e412:	4770      	bx	lr
    e414:	e000ed00 	.word	0xe000ed00
    e418:	c5acce55 	.word	0xc5acce55
    e41c:	00150511 	.word	0x00150511

0000e420 <am_hal_itm_print>:
    e420:	7803      	ldrb	r3, [r0, #0]
    e422:	b1a3      	cbz	r3, e44e <am_hal_itm_print+0x2e>
    e424:	4603      	mov	r3, r0
    e426:	f1c0 0c01 	rsb	ip, r0, #1
    e42a:	eb0c 0103 	add.w	r1, ip, r3
    e42e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e432:	2a00      	cmp	r2, #0
    e434:	d1f9      	bne.n	e42a <am_hal_itm_print+0xa>
    e436:	4401      	add	r1, r0
    e438:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e43c:	f810 cb01 	ldrb.w	ip, [r0], #1
    e440:	6813      	ldr	r3, [r2, #0]
    e442:	2b00      	cmp	r3, #0
    e444:	d0fc      	beq.n	e440 <am_hal_itm_print+0x20>
    e446:	4288      	cmp	r0, r1
    e448:	f882 c000 	strb.w	ip, [r2]
    e44c:	d1f6      	bne.n	e43c <am_hal_itm_print+0x1c>
    e44e:	4770      	bx	lr

0000e450 <am_hal_mcuctrl_info_get>:
    e450:	2900      	cmp	r1, #0
    e452:	f000 808f 	beq.w	e574 <am_hal_mcuctrl_info_get+0x124>
    e456:	2801      	cmp	r0, #1
    e458:	b430      	push	{r4, r5}
    e45a:	d006      	beq.n	e46a <am_hal_mcuctrl_info_get+0x1a>
    e45c:	2802      	cmp	r0, #2
    e45e:	d06d      	beq.n	e53c <am_hal_mcuctrl_info_get+0xec>
    e460:	2800      	cmp	r0, #0
    e462:	d055      	beq.n	e510 <am_hal_mcuctrl_info_get+0xc0>
    e464:	2006      	movs	r0, #6
    e466:	bc30      	pop	{r4, r5}
    e468:	4770      	bx	lr
    e46a:	4a43      	ldr	r2, [pc, #268]	; (e578 <am_hal_mcuctrl_info_get+0x128>)
    e46c:	4843      	ldr	r0, [pc, #268]	; (e57c <am_hal_mcuctrl_info_get+0x12c>)
    e46e:	6813      	ldr	r3, [r2, #0]
    e470:	600b      	str	r3, [r1, #0]
    e472:	6854      	ldr	r4, [r2, #4]
    e474:	604c      	str	r4, [r1, #4]
    e476:	6894      	ldr	r4, [r2, #8]
    e478:	608c      	str	r4, [r1, #8]
    e47a:	68d4      	ldr	r4, [r2, #12]
    e47c:	60cc      	str	r4, [r1, #12]
    e47e:	f3c3 5503 	ubfx	r5, r3, #20, #4
    e482:	6914      	ldr	r4, [r2, #16]
    e484:	610c      	str	r4, [r1, #16]
    e486:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    e48a:	4c3d      	ldr	r4, [pc, #244]	; (e580 <am_hal_mcuctrl_info_get+0x130>)
    e48c:	6950      	ldr	r0, [r2, #20]
    e48e:	6148      	str	r0, [r1, #20]
    e490:	f003 0201 	and.w	r2, r3, #1
    e494:	f3c3 4303 	ubfx	r3, r3, #16, #4
    e498:	e9c1 2506 	strd	r2, r5, [r1, #24]
    e49c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    e4a0:	4a38      	ldr	r2, [pc, #224]	; (e584 <am_hal_mcuctrl_info_get+0x134>)
    e4a2:	620b      	str	r3, [r1, #32]
    e4a4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    e4a8:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    e4ac:	b2db      	uxtb	r3, r3
    e4ae:	f000 000f 	and.w	r0, r0, #15
    e4b2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    e4b6:	624b      	str	r3, [r1, #36]	; 0x24
    e4b8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    e4bc:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    e4c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e4c4:	f000 000f 	and.w	r0, r0, #15
    e4c8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e4cc:	628b      	str	r3, [r1, #40]	; 0x28
    e4ce:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e4d2:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e4d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e4da:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e4de:	4303      	orrs	r3, r0
    e4e0:	62cb      	str	r3, [r1, #44]	; 0x2c
    e4e2:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e4e6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e4ea:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e4ee:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e4f2:	b2db      	uxtb	r3, r3
    e4f4:	041b      	lsls	r3, r3, #16
    e4f6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e4fa:	fa5f fc82 	uxtb.w	ip, r2
    e4fe:	ea43 030c 	orr.w	r3, r3, ip
    e502:	b2c2      	uxtb	r2, r0
    e504:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e508:	630b      	str	r3, [r1, #48]	; 0x30
    e50a:	2000      	movs	r0, #0
    e50c:	bc30      	pop	{r4, r5}
    e50e:	4770      	bx	lr
    e510:	4a19      	ldr	r2, [pc, #100]	; (e578 <am_hal_mcuctrl_info_get+0x128>)
    e512:	6993      	ldr	r3, [r2, #24]
    e514:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e518:	700c      	strb	r4, [r1, #0]
    e51a:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e51e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e522:	704b      	strb	r3, [r1, #1]
    e524:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e528:	710b      	strb	r3, [r1, #4]
    e52a:	6953      	ldr	r3, [r2, #20]
    e52c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e530:	f003 0301 	and.w	r3, r3, #1
    e534:	bc30      	pop	{r4, r5}
    e536:	708a      	strb	r2, [r1, #2]
    e538:	70cb      	strb	r3, [r1, #3]
    e53a:	4770      	bx	lr
    e53c:	4a0e      	ldr	r2, [pc, #56]	; (e578 <am_hal_mcuctrl_info_get+0x128>)
    e53e:	6848      	ldr	r0, [r1, #4]
    e540:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e544:	f003 0401 	and.w	r4, r3, #1
    e548:	700c      	strb	r4, [r1, #0]
    e54a:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e54e:	720c      	strb	r4, [r1, #8]
    e550:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e554:	60cc      	str	r4, [r1, #12]
    e556:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e55a:	4320      	orrs	r0, r4
    e55c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e560:	6048      	str	r0, [r1, #4]
    e562:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e566:	740b      	strb	r3, [r1, #16]
    e568:	694b      	ldr	r3, [r1, #20]
    e56a:	4313      	orrs	r3, r2
    e56c:	2000      	movs	r0, #0
    e56e:	bc30      	pop	{r4, r5}
    e570:	614b      	str	r3, [r1, #20]
    e572:	4770      	bx	lr
    e574:	2006      	movs	r0, #6
    e576:	4770      	bx	lr
    e578:	40020000 	.word	0x40020000
    e57c:	0000ee14 	.word	0x0000ee14
    e580:	0000ee54 	.word	0x0000ee54
    e584:	f0000f00 	.word	0xf0000f00

0000e588 <am_hal_pwrctrl_periph_enable>:
    e588:	b570      	push	{r4, r5, r6, lr}
    e58a:	b082      	sub	sp, #8
    e58c:	4604      	mov	r4, r0
    e58e:	f7ff ff1b 	bl	e3c8 <am_hal_interrupt_master_disable>
    e592:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e596:	4e0f      	ldr	r6, [pc, #60]	; (e5d4 <am_hal_pwrctrl_periph_enable+0x4c>)
    e598:	4d0f      	ldr	r5, [pc, #60]	; (e5d8 <am_hal_pwrctrl_periph_enable+0x50>)
    e59a:	9001      	str	r0, [sp, #4]
    e59c:	00a4      	lsls	r4, r4, #2
    e59e:	68b3      	ldr	r3, [r6, #8]
    e5a0:	592a      	ldr	r2, [r5, r4]
    e5a2:	4313      	orrs	r3, r2
    e5a4:	60b3      	str	r3, [r6, #8]
    e5a6:	9801      	ldr	r0, [sp, #4]
    e5a8:	442c      	add	r4, r5
    e5aa:	f7ff ff11 	bl	e3d0 <am_hal_interrupt_master_set>
    e5ae:	20a0      	movs	r0, #160	; 0xa0
    e5b0:	f7ff fd3c 	bl	e02c <am_hal_flash_delay>
    e5b4:	69b3      	ldr	r3, [r6, #24]
    e5b6:	6864      	ldr	r4, [r4, #4]
    e5b8:	4223      	tst	r3, r4
    e5ba:	d103      	bne.n	e5c4 <am_hal_pwrctrl_periph_enable+0x3c>
    e5bc:	20a0      	movs	r0, #160	; 0xa0
    e5be:	f7ff fd35 	bl	e02c <am_hal_flash_delay>
    e5c2:	69b3      	ldr	r3, [r6, #24]
    e5c4:	4b03      	ldr	r3, [pc, #12]	; (e5d4 <am_hal_pwrctrl_periph_enable+0x4c>)
    e5c6:	699b      	ldr	r3, [r3, #24]
    e5c8:	4223      	tst	r3, r4
    e5ca:	bf0c      	ite	eq
    e5cc:	2001      	moveq	r0, #1
    e5ce:	2000      	movne	r0, #0
    e5d0:	b002      	add	sp, #8
    e5d2:	bd70      	pop	{r4, r5, r6, pc}
    e5d4:	40021000 	.word	0x40021000
    e5d8:	0000f044 	.word	0x0000f044

0000e5dc <am_hal_pwrctrl_periph_disable>:
    e5dc:	b570      	push	{r4, r5, r6, lr}
    e5de:	b082      	sub	sp, #8
    e5e0:	4604      	mov	r4, r0
    e5e2:	f7ff fef1 	bl	e3c8 <am_hal_interrupt_master_disable>
    e5e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e5ea:	4e10      	ldr	r6, [pc, #64]	; (e62c <am_hal_pwrctrl_periph_disable+0x50>)
    e5ec:	4d10      	ldr	r5, [pc, #64]	; (e630 <am_hal_pwrctrl_periph_disable+0x54>)
    e5ee:	9001      	str	r0, [sp, #4]
    e5f0:	00a4      	lsls	r4, r4, #2
    e5f2:	68b3      	ldr	r3, [r6, #8]
    e5f4:	592a      	ldr	r2, [r5, r4]
    e5f6:	ea23 0302 	bic.w	r3, r3, r2
    e5fa:	60b3      	str	r3, [r6, #8]
    e5fc:	9801      	ldr	r0, [sp, #4]
    e5fe:	442c      	add	r4, r5
    e600:	f7ff fee6 	bl	e3d0 <am_hal_interrupt_master_set>
    e604:	20a0      	movs	r0, #160	; 0xa0
    e606:	f7ff fd11 	bl	e02c <am_hal_flash_delay>
    e60a:	69b3      	ldr	r3, [r6, #24]
    e60c:	6864      	ldr	r4, [r4, #4]
    e60e:	4223      	tst	r3, r4
    e610:	d003      	beq.n	e61a <am_hal_pwrctrl_periph_disable+0x3e>
    e612:	20a0      	movs	r0, #160	; 0xa0
    e614:	f7ff fd0a 	bl	e02c <am_hal_flash_delay>
    e618:	69b3      	ldr	r3, [r6, #24]
    e61a:	4b04      	ldr	r3, [pc, #16]	; (e62c <am_hal_pwrctrl_periph_disable+0x50>)
    e61c:	699b      	ldr	r3, [r3, #24]
    e61e:	4223      	tst	r3, r4
    e620:	bf14      	ite	ne
    e622:	2001      	movne	r0, #1
    e624:	2000      	moveq	r0, #0
    e626:	b002      	add	sp, #8
    e628:	bd70      	pop	{r4, r5, r6, pc}
    e62a:	bf00      	nop
    e62c:	40021000 	.word	0x40021000
    e630:	0000f044 	.word	0x0000f044

0000e634 <am_hal_pwrctrl_memory_enable>:
    e634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e638:	4d22      	ldr	r5, [pc, #136]	; (e6c4 <am_hal_pwrctrl_memory_enable+0x90>)
    e63a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    e63e:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
    e642:	f855 8033 	ldr.w	r8, [r5, r3, lsl #3]
    e646:	f8d9 6010 	ldr.w	r6, [r9, #16]
    e64a:	f1b8 3fff 	cmp.w	r8, #4294967295
    e64e:	4604      	mov	r4, r0
    e650:	ea4f 0740 	mov.w	r7, r0, lsl #1
    e654:	d120      	bne.n	e698 <am_hal_pwrctrl_memory_enable+0x64>
    e656:	f8df 9070 	ldr.w	r9, [pc, #112]	; e6c8 <am_hal_pwrctrl_memory_enable+0x94>
    e65a:	f8d9 3010 	ldr.w	r3, [r9, #16]
    e65e:	443c      	add	r4, r7
    e660:	ea43 0308 	orr.w	r3, r3, r8
    e664:	f8c9 3010 	str.w	r3, [r9, #16]
    e668:	20a0      	movs	r0, #160	; 0xa0
    e66a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    e66e:	f7ff fcdd 	bl	e02c <am_hal_flash_delay>
    e672:	f8d9 3014 	ldr.w	r3, [r9, #20]
    e676:	686c      	ldr	r4, [r5, #4]
    e678:	4033      	ands	r3, r6
    e67a:	42a3      	cmp	r3, r4
    e67c:	d004      	beq.n	e688 <am_hal_pwrctrl_memory_enable+0x54>
    e67e:	20a0      	movs	r0, #160	; 0xa0
    e680:	f7ff fcd4 	bl	e02c <am_hal_flash_delay>
    e684:	f8d9 3014 	ldr.w	r3, [r9, #20]
    e688:	4b0f      	ldr	r3, [pc, #60]	; (e6c8 <am_hal_pwrctrl_memory_enable+0x94>)
    e68a:	6958      	ldr	r0, [r3, #20]
    e68c:	4030      	ands	r0, r6
    e68e:	1b00      	subs	r0, r0, r4
    e690:	bf18      	it	ne
    e692:	2001      	movne	r0, #1
    e694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e698:	f8d9 300c 	ldr.w	r3, [r9, #12]
    e69c:	4a0a      	ldr	r2, [pc, #40]	; (e6c8 <am_hal_pwrctrl_memory_enable+0x94>)
    e69e:	ea68 0303 	orn	r3, r8, r3
    e6a2:	6911      	ldr	r1, [r2, #16]
    e6a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e6a8:	f043 0301 	orr.w	r3, r3, #1
    e6ac:	400b      	ands	r3, r1
    e6ae:	2010      	movs	r0, #16
    e6b0:	6113      	str	r3, [r2, #16]
    e6b2:	f7ff fcbb 	bl	e02c <am_hal_flash_delay>
    e6b6:	f1b8 0f00 	cmp.w	r8, #0
    e6ba:	d1cc      	bne.n	e656 <am_hal_pwrctrl_memory_enable+0x22>
    e6bc:	f8d9 4004 	ldr.w	r4, [r9, #4]
    e6c0:	e7e2      	b.n	e688 <am_hal_pwrctrl_memory_enable+0x54>
    e6c2:	bf00      	nop
    e6c4:	0000ee94 	.word	0x0000ee94
    e6c8:	40021000 	.word	0x40021000

0000e6cc <am_hal_pwrctrl_low_power_init>:
    e6cc:	b530      	push	{r4, r5, lr}
    e6ce:	4b69      	ldr	r3, [pc, #420]	; (e874 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e6d0:	681a      	ldr	r2, [r3, #0]
    e6d2:	b085      	sub	sp, #20
    e6d4:	b912      	cbnz	r2, e6dc <am_hal_pwrctrl_low_power_init+0x10>
    e6d6:	4a68      	ldr	r2, [pc, #416]	; (e878 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e6d8:	6812      	ldr	r2, [r2, #0]
    e6da:	601a      	str	r2, [r3, #0]
    e6dc:	4b67      	ldr	r3, [pc, #412]	; (e87c <am_hal_pwrctrl_low_power_init+0x1b0>)
    e6de:	68db      	ldr	r3, [r3, #12]
    e6e0:	b2db      	uxtb	r3, r3
    e6e2:	2b12      	cmp	r3, #18
    e6e4:	d104      	bne.n	e6f0 <am_hal_pwrctrl_low_power_init+0x24>
    e6e6:	4c66      	ldr	r4, [pc, #408]	; (e880 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e6e8:	6863      	ldr	r3, [r4, #4]
    e6ea:	07d8      	lsls	r0, r3, #31
    e6ec:	f100 8088 	bmi.w	e800 <am_hal_pwrctrl_low_power_init+0x134>
    e6f0:	4b62      	ldr	r3, [pc, #392]	; (e87c <am_hal_pwrctrl_low_power_init+0x1b0>)
    e6f2:	68da      	ldr	r2, [r3, #12]
    e6f4:	b2d2      	uxtb	r2, r2
    e6f6:	2a20      	cmp	r2, #32
    e6f8:	d934      	bls.n	e764 <am_hal_pwrctrl_low_power_init+0x98>
    e6fa:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e6fe:	2002      	movs	r0, #2
    e700:	f360 4213 	bfi	r2, r0, #16, #4
    e704:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e708:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e70c:	2203      	movs	r2, #3
    e70e:	f362 5117 	bfi	r1, r2, #20, #4
    e712:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e716:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e71a:	2405      	movs	r4, #5
    e71c:	f364 0103 	bfi	r1, r4, #0, #4
    e720:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e724:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e728:	f360 1107 	bfi	r1, r0, #4, #4
    e72c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e730:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e734:	2406      	movs	r4, #6
    e736:	f364 210b 	bfi	r1, r4, #8, #4
    e73a:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e73e:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e742:	2001      	movs	r0, #1
    e744:	f360 310f 	bfi	r1, r0, #12, #4
    e748:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e74c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e750:	f362 61de 	bfi	r1, r2, #27, #4
    e754:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e758:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e75c:	f362 0103 	bfi	r1, r2, #0, #4
    e760:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e764:	4a45      	ldr	r2, [pc, #276]	; (e87c <am_hal_pwrctrl_low_power_init+0x1b0>)
    e766:	68d3      	ldr	r3, [r2, #12]
    e768:	b2db      	uxtb	r3, r3
    e76a:	2b11      	cmp	r3, #17
    e76c:	d905      	bls.n	e77a <am_hal_pwrctrl_low_power_init+0xae>
    e76e:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e772:	f36f 6318 	bfc	r3, #24, #1
    e776:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e77a:	2100      	movs	r1, #0
    e77c:	200c      	movs	r0, #12
    e77e:	f7ff f925 	bl	d9cc <am_hal_cachectrl_control>
    e782:	4b3f      	ldr	r3, [pc, #252]	; (e880 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e784:	699b      	ldr	r3, [r3, #24]
    e786:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e78a:	05db      	lsls	r3, r3, #23
    e78c:	d420      	bmi.n	e7d0 <am_hal_pwrctrl_low_power_init+0x104>
    e78e:	4c3b      	ldr	r4, [pc, #236]	; (e87c <am_hal_pwrctrl_low_power_init+0x1b0>)
    e790:	68e3      	ldr	r3, [r4, #12]
    e792:	b2db      	uxtb	r3, r3
    e794:	2b11      	cmp	r3, #17
    e796:	d84e      	bhi.n	e836 <am_hal_pwrctrl_low_power_init+0x16a>
    e798:	4c38      	ldr	r4, [pc, #224]	; (e87c <am_hal_pwrctrl_low_power_init+0x1b0>)
    e79a:	493a      	ldr	r1, [pc, #232]	; (e884 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e79c:	7e22      	ldrb	r2, [r4, #24]
    e79e:	2001      	movs	r0, #1
    e7a0:	4302      	orrs	r2, r0
    e7a2:	2307      	movs	r3, #7
    e7a4:	7622      	strb	r2, [r4, #24]
    e7a6:	9000      	str	r0, [sp, #0]
    e7a8:	461a      	mov	r2, r3
    e7aa:	f242 7010 	movw	r0, #10000	; 0x2710
    e7ae:	f7ff fc4d 	bl	e04c <am_hal_flash_delay_status_check>
    e7b2:	2800      	cmp	r0, #0
    e7b4:	d15a      	bne.n	e86c <am_hal_pwrctrl_low_power_init+0x1a0>
    e7b6:	4b32      	ldr	r3, [pc, #200]	; (e880 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e7b8:	681a      	ldr	r2, [r3, #0]
    e7ba:	f042 0201 	orr.w	r2, r2, #1
    e7be:	601a      	str	r2, [r3, #0]
    e7c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e7c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e7c6:	625a      	str	r2, [r3, #36]	; 0x24
    e7c8:	68e3      	ldr	r3, [r4, #12]
    e7ca:	b2db      	uxtb	r3, r3
    e7cc:	2b11      	cmp	r3, #17
    e7ce:	d002      	beq.n	e7d6 <am_hal_pwrctrl_low_power_init+0x10a>
    e7d0:	2000      	movs	r0, #0
    e7d2:	b005      	add	sp, #20
    e7d4:	bd30      	pop	{r4, r5, pc}
    e7d6:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e7da:	f360 5356 	bfi	r3, r0, #21, #2
    e7de:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e7e2:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e7e6:	220f      	movs	r2, #15
    e7e8:	f362 138b 	bfi	r3, r2, #6, #6
    e7ec:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e7f0:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e7f4:	f362 0305 	bfi	r3, r2, #0, #6
    e7f8:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e7fc:	b005      	add	sp, #20
    e7fe:	bd30      	pop	{r4, r5, pc}
    e800:	f7ff fde2 	bl	e3c8 <am_hal_interrupt_master_disable>
    e804:	9002      	str	r0, [sp, #8]
    e806:	68a3      	ldr	r3, [r4, #8]
    e808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e80c:	60a3      	str	r3, [r4, #8]
    e80e:	9802      	ldr	r0, [sp, #8]
    e810:	f7ff fdde 	bl	e3d0 <am_hal_interrupt_master_set>
    e814:	20a0      	movs	r0, #160	; 0xa0
    e816:	f7ff fc09 	bl	e02c <am_hal_flash_delay>
    e81a:	69a3      	ldr	r3, [r4, #24]
    e81c:	0619      	lsls	r1, r3, #24
    e81e:	d403      	bmi.n	e828 <am_hal_pwrctrl_low_power_init+0x15c>
    e820:	20a0      	movs	r0, #160	; 0xa0
    e822:	f7ff fc03 	bl	e02c <am_hal_flash_delay>
    e826:	69a3      	ldr	r3, [r4, #24]
    e828:	4b15      	ldr	r3, [pc, #84]	; (e880 <am_hal_pwrctrl_low_power_init+0x1b4>)
    e82a:	699b      	ldr	r3, [r3, #24]
    e82c:	061a      	lsls	r2, r3, #24
    e82e:	f53f af5f 	bmi.w	e6f0 <am_hal_pwrctrl_low_power_init+0x24>
    e832:	2001      	movs	r0, #1
    e834:	e7cd      	b.n	e7d2 <am_hal_pwrctrl_low_power_init+0x106>
    e836:	f7ff fdc7 	bl	e3c8 <am_hal_interrupt_master_disable>
    e83a:	9003      	str	r0, [sp, #12]
    e83c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e840:	2219      	movs	r2, #25
    e842:	f362 138b 	bfi	r3, r2, #6, #6
    e846:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e84a:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e84e:	210c      	movs	r1, #12
    e850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e854:	f361 0205 	bfi	r2, r1, #0, #6
    e858:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e85c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e85e:	f365 5296 	bfi	r2, r5, #22, #1
    e862:	63da      	str	r2, [r3, #60]	; 0x3c
    e864:	9803      	ldr	r0, [sp, #12]
    e866:	f7ff fdb3 	bl	e3d0 <am_hal_interrupt_master_set>
    e86a:	e795      	b.n	e798 <am_hal_pwrctrl_low_power_init+0xcc>
    e86c:	2004      	movs	r0, #4
    e86e:	b005      	add	sp, #20
    e870:	bd30      	pop	{r4, r5, pc}
    e872:	bf00      	nop
    e874:	100017ac 	.word	0x100017ac
    e878:	4ffff000 	.word	0x4ffff000
    e87c:	40020000 	.word	0x40020000
    e880:	40021000 	.word	0x40021000
    e884:	40020018 	.word	0x40020018

0000e888 <am_hal_rtc_osc_disable>:
    e888:	4a03      	ldr	r2, [pc, #12]	; (e898 <am_hal_rtc_osc_disable+0x10>)
    e88a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e88e:	f043 0310 	orr.w	r3, r3, #16
    e892:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e896:	4770      	bx	lr
    e898:	40004200 	.word	0x40004200

0000e89c <am_hal_sysctrl_sleep>:
    e89c:	b510      	push	{r4, lr}
    e89e:	b082      	sub	sp, #8
    e8a0:	4604      	mov	r4, r0
    e8a2:	f7ff fd91 	bl	e3c8 <am_hal_interrupt_master_disable>
    e8a6:	9001      	str	r0, [sp, #4]
    e8a8:	b124      	cbz	r4, e8b4 <am_hal_sysctrl_sleep+0x18>
    e8aa:	4b12      	ldr	r3, [pc, #72]	; (e8f4 <am_hal_sysctrl_sleep+0x58>)
    e8ac:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e8b0:	07db      	lsls	r3, r3, #31
    e8b2:	d513      	bpl.n	e8dc <am_hal_sysctrl_sleep+0x40>
    e8b4:	4a10      	ldr	r2, [pc, #64]	; (e8f8 <am_hal_sysctrl_sleep+0x5c>)
    e8b6:	6913      	ldr	r3, [r2, #16]
    e8b8:	f023 0304 	bic.w	r3, r3, #4
    e8bc:	6113      	str	r3, [r2, #16]
    e8be:	f3bf 8f4f 	dsb	sy
    e8c2:	4a0e      	ldr	r2, [pc, #56]	; (e8fc <am_hal_sysctrl_sleep+0x60>)
    e8c4:	4b0e      	ldr	r3, [pc, #56]	; (e900 <am_hal_sysctrl_sleep+0x64>)
    e8c6:	6812      	ldr	r2, [r2, #0]
    e8c8:	601a      	str	r2, [r3, #0]
    e8ca:	bf30      	wfi
    e8cc:	f3bf 8f6f 	isb	sy
    e8d0:	9801      	ldr	r0, [sp, #4]
    e8d2:	b002      	add	sp, #8
    e8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8d8:	f7ff bd7a 	b.w	e3d0 <am_hal_interrupt_master_set>
    e8dc:	4b09      	ldr	r3, [pc, #36]	; (e904 <am_hal_sysctrl_sleep+0x68>)
    e8de:	681a      	ldr	r2, [r3, #0]
    e8e0:	b912      	cbnz	r2, e8e8 <am_hal_sysctrl_sleep+0x4c>
    e8e2:	4a09      	ldr	r2, [pc, #36]	; (e908 <am_hal_sysctrl_sleep+0x6c>)
    e8e4:	6812      	ldr	r2, [r2, #0]
    e8e6:	601a      	str	r2, [r3, #0]
    e8e8:	4a03      	ldr	r2, [pc, #12]	; (e8f8 <am_hal_sysctrl_sleep+0x5c>)
    e8ea:	6913      	ldr	r3, [r2, #16]
    e8ec:	f043 0304 	orr.w	r3, r3, #4
    e8f0:	6113      	str	r3, [r2, #16]
    e8f2:	e7e4      	b.n	e8be <am_hal_sysctrl_sleep+0x22>
    e8f4:	40020000 	.word	0x40020000
    e8f8:	e000ed00 	.word	0xe000ed00
    e8fc:	5fff0000 	.word	0x5fff0000
    e900:	100017b0 	.word	0x100017b0
    e904:	100017ac 	.word	0x100017ac
    e908:	4ffff000 	.word	0x4ffff000

0000e90c <am_hal_tpiu_enable>:
    e90c:	b510      	push	{r4, lr}
    e90e:	4b23      	ldr	r3, [pc, #140]	; (e99c <am_hal_tpiu_enable+0x90>)
    e910:	6804      	ldr	r4, [r0, #0]
    e912:	2200      	movs	r2, #0
    e914:	b084      	sub	sp, #16
    e916:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e91a:	b334      	cbz	r4, e96a <am_hal_tpiu_enable+0x5e>
    e91c:	4a20      	ldr	r2, [pc, #128]	; (e9a0 <am_hal_tpiu_enable+0x94>)
    e91e:	4921      	ldr	r1, [pc, #132]	; (e9a4 <am_hal_tpiu_enable+0x98>)
    e920:	2001      	movs	r0, #1
    e922:	6058      	str	r0, [r3, #4]
    e924:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e928:	a801      	add	r0, sp, #4
    e92a:	428b      	cmp	r3, r1
    e92c:	bf88      	it	hi
    e92e:	4614      	movhi	r4, r2
    e930:	f7ff fa62 	bl	ddf8 <am_hal_clkgen_status_get>
    e934:	9b01      	ldr	r3, [sp, #4]
    e936:	1c5a      	adds	r2, r3, #1
    e938:	d02d      	beq.n	e996 <am_hal_tpiu_enable+0x8a>
    e93a:	08db      	lsrs	r3, r3, #3
    e93c:	fbb3 f4f4 	udiv	r4, r3, r4
    e940:	3c01      	subs	r4, #1
    e942:	b2a4      	uxth	r4, r4
    e944:	4b15      	ldr	r3, [pc, #84]	; (e99c <am_hal_tpiu_enable+0x90>)
    e946:	4a18      	ldr	r2, [pc, #96]	; (e9a8 <am_hal_tpiu_enable+0x9c>)
    e948:	611c      	str	r4, [r3, #16]
    e94a:	2102      	movs	r1, #2
    e94c:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e950:	2000      	movs	r0, #0
    e952:	f240 2101 	movw	r1, #513	; 0x201
    e956:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e95a:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e95e:	f44f 7048 	mov.w	r0, #800	; 0x320
    e962:	f7ff fb63 	bl	e02c <am_hal_flash_delay>
    e966:	b004      	add	sp, #16
    e968:	bd10      	pop	{r4, pc}
    e96a:	6902      	ldr	r2, [r0, #16]
    e96c:	611a      	str	r2, [r3, #16]
    e96e:	6882      	ldr	r2, [r0, #8]
    e970:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e974:	68c1      	ldr	r1, [r0, #12]
    e976:	2201      	movs	r2, #1
    e978:	3901      	subs	r1, #1
    e97a:	408a      	lsls	r2, r1
    e97c:	605a      	str	r2, [r3, #4]
    e97e:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e982:	4a09      	ldr	r2, [pc, #36]	; (e9a8 <am_hal_tpiu_enable+0x9c>)
    e984:	6843      	ldr	r3, [r0, #4]
    e986:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e98a:	f44f 7048 	mov.w	r0, #800	; 0x320
    e98e:	f7ff fb4d 	bl	e02c <am_hal_flash_delay>
    e992:	b004      	add	sp, #16
    e994:	bd10      	pop	{r4, pc}
    e996:	2405      	movs	r4, #5
    e998:	e7d4      	b.n	e944 <am_hal_tpiu_enable+0x38>
    e99a:	bf00      	nop
    e99c:	e0040000 	.word	0xe0040000
    e9a0:	000f4240 	.word	0x000f4240
    e9a4:	001da380 	.word	0x001da380
    e9a8:	40020000 	.word	0x40020000
    e9ac:	6f727245 	.word	0x6f727245
    e9b0:	65722072 	.word	0x65722072
    e9b4:	6e696461 	.word	0x6e696461
    e9b8:	44412067 	.word	0x44412067
    e9bc:	6e692043 	.word	0x6e692043
    e9c0:	72726574 	.word	0x72726574
    e9c4:	20747075 	.word	0x20747075
    e9c8:	74617473 	.word	0x74617473
    e9cc:	000a7375 	.word	0x000a7375
    e9d0:	6f727245 	.word	0x6f727245
    e9d4:	6c632072 	.word	0x6c632072
    e9d8:	69726165 	.word	0x69726165
    e9dc:	4120676e 	.word	0x4120676e
    e9e0:	69204344 	.word	0x69204344
    e9e4:	7265746e 	.word	0x7265746e
    e9e8:	74707572 	.word	0x74707572
    e9ec:	61747320 	.word	0x61747320
    e9f0:	0a737574 	.word	0x0a737574
    e9f4:	00000000 	.word	0x00000000
    e9f8:	6f727245 	.word	0x6f727245
    e9fc:	202d2072 	.word	0x202d2072
    ea00:	666e6f63 	.word	0x666e6f63
    ea04:	72756769 	.word	0x72756769
    ea08:	20676e69 	.word	0x20676e69
    ea0c:	20434441 	.word	0x20434441
    ea10:	20414d44 	.word	0x20414d44
    ea14:	6c696166 	.word	0x6c696166
    ea18:	0a2e6465 	.word	0x0a2e6465
    ea1c:	00000000 	.word	0x00000000
    ea20:	6f727245 	.word	0x6f727245
    ea24:	202d2072 	.word	0x202d2072
    ea28:	65736572 	.word	0x65736572
    ea2c:	74617672 	.word	0x74617672
    ea30:	206e6f69 	.word	0x206e6f69
    ea34:	7420666f 	.word	0x7420666f
    ea38:	41206568 	.word	0x41206568
    ea3c:	69204344 	.word	0x69204344
    ea40:	6174736e 	.word	0x6174736e
    ea44:	2065636e 	.word	0x2065636e
    ea48:	6c696166 	.word	0x6c696166
    ea4c:	0a2e6465 	.word	0x0a2e6465
    ea50:	00000000 	.word	0x00000000
    ea54:	6f727245 	.word	0x6f727245
    ea58:	202d2072 	.word	0x202d2072
    ea5c:	20434441 	.word	0x20434441
    ea60:	65776f70 	.word	0x65776f70
    ea64:	6e6f2072 	.word	0x6e6f2072
    ea68:	69616620 	.word	0x69616620
    ea6c:	2e64656c 	.word	0x2e64656c
    ea70:	0000000a 	.word	0x0000000a
    ea74:	6f727245 	.word	0x6f727245
    ea78:	202d2072 	.word	0x202d2072
    ea7c:	666e6f63 	.word	0x666e6f63
    ea80:	72756769 	.word	0x72756769
    ea84:	20676e69 	.word	0x20676e69
    ea88:	20434441 	.word	0x20434441
    ea8c:	6c696166 	.word	0x6c696166
    ea90:	0a2e6465 	.word	0x0a2e6465
    ea94:	00000000 	.word	0x00000000
    ea98:	6f727245 	.word	0x6f727245
    ea9c:	202d2072 	.word	0x202d2072
    eaa0:	666e6f63 	.word	0x666e6f63
    eaa4:	72756769 	.word	0x72756769
    eaa8:	20676e69 	.word	0x20676e69
    eaac:	20434441 	.word	0x20434441
    eab0:	746f6c53 	.word	0x746f6c53
    eab4:	66203020 	.word	0x66203020
    eab8:	656c6961 	.word	0x656c6961
    eabc:	000a2e64 	.word	0x000a2e64
    eac0:	6f727245 	.word	0x6f727245
    eac4:	202d2072 	.word	0x202d2072
    eac8:	62616e65 	.word	0x62616e65
    eacc:	676e696c 	.word	0x676e696c
    ead0:	43444120 	.word	0x43444120
    ead4:	69616620 	.word	0x69616620
    ead8:	2e64656c 	.word	0x2e64656c
    eadc:	0000000a 	.word	0x0000000a
    eae0:	6f727245 	.word	0x6f727245
    eae4:	202d2072 	.word	0x202d2072
    eae8:	666e6f63 	.word	0x666e6f63
    eaec:	72756769 	.word	0x72756769
    eaf0:	20676e69 	.word	0x20676e69
    eaf4:	20656874 	.word	0x20656874
    eaf8:	74737973 	.word	0x74737973
    eafc:	63206d65 	.word	0x63206d65
    eb00:	6b636f6c 	.word	0x6b636f6c
    eb04:	69616620 	.word	0x69616620
    eb08:	2e64656c 	.word	0x2e64656c
    eb0c:	0000000a 	.word	0x0000000a
    eb10:	6f727245 	.word	0x6f727245
    eb14:	202d2072 	.word	0x202d2072
    eb18:	666e6f63 	.word	0x666e6f63
    eb1c:	72756769 	.word	0x72756769
    eb20:	20676e69 	.word	0x20676e69
    eb24:	20656874 	.word	0x20656874
    eb28:	74737973 	.word	0x74737973
    eb2c:	63206d65 	.word	0x63206d65
    eb30:	65686361 	.word	0x65686361
    eb34:	69616620 	.word	0x69616620
    eb38:	2e64656c 	.word	0x2e64656c
    eb3c:	0000000a 	.word	0x0000000a
    eb40:	6f727245 	.word	0x6f727245
    eb44:	202d2072 	.word	0x202d2072
    eb48:	62616e65 	.word	0x62616e65
    eb4c:	676e696c 	.word	0x676e696c
    eb50:	65687420 	.word	0x65687420
    eb54:	73797320 	.word	0x73797320
    eb58:	206d6574 	.word	0x206d6574
    eb5c:	68636163 	.word	0x68636163
    eb60:	61662065 	.word	0x61662065
    eb64:	64656c69 	.word	0x64656c69
    eb68:	00000a2e 	.word	0x00000a2e
    eb6c:	6f727245 	.word	0x6f727245
    eb70:	202d2072 	.word	0x202d2072
    eb74:	666e6f63 	.word	0x666e6f63
    eb78:	72756769 	.word	0x72756769
    eb7c:	20676e69 	.word	0x20676e69
    eb80:	20656874 	.word	0x20656874
    eb84:	73616c66 	.word	0x73616c66
    eb88:	656d2068 	.word	0x656d2068
    eb8c:	79726f6d 	.word	0x79726f6d
    eb90:	69616620 	.word	0x69616620
    eb94:	2e64656c 	.word	0x2e64656c
    eb98:	0000000a 	.word	0x0000000a
    eb9c:	6f727245 	.word	0x6f727245
    eba0:	202d2072 	.word	0x202d2072
    eba4:	666e6f63 	.word	0x666e6f63
    eba8:	72756769 	.word	0x72756769
    ebac:	20676e69 	.word	0x20676e69
    ebb0:	20656874 	.word	0x20656874
    ebb4:	4d415253 	.word	0x4d415253
    ebb8:	69616620 	.word	0x69616620
    ebbc:	2e64656c 	.word	0x2e64656c
    ebc0:	0000000a 	.word	0x0000000a
    ebc4:	6f727245 	.word	0x6f727245
    ebc8:	202d2072 	.word	0x202d2072
    ebcc:	67697274 	.word	0x67697274
    ebd0:	69726567 	.word	0x69726567
    ebd4:	7420676e 	.word	0x7420676e
    ebd8:	41206568 	.word	0x41206568
    ebdc:	66204344 	.word	0x66204344
    ebe0:	656c6961 	.word	0x656c6961
    ebe4:	000a2e64 	.word	0x000a2e64
    ebe8:	20434441 	.word	0x20434441
    ebec:	6d617845 	.word	0x6d617845
    ebf0:	20656c70 	.word	0x20656c70
    ebf4:	68746977 	.word	0x68746977
    ebf8:	322e3120 	.word	0x322e3120
    ebfc:	7370734d 	.word	0x7370734d
    ec00:	646e6120 	.word	0x646e6120
    ec04:	4d504c20 	.word	0x4d504c20
    ec08:	3d45444f 	.word	0x3d45444f
    ec0c:	00000a30 	.word	0x00000a30
    ec10:	20414d44 	.word	0x20414d44
    ec14:	6f727245 	.word	0x6f727245
    ec18:	636f2072 	.word	0x636f2072
    ec1c:	65727563 	.word	0x65727563
    ec20:	00000a64 	.word	0x00000a64
    ec24:	20414d44 	.word	0x20414d44
    ec28:	706d6f43 	.word	0x706d6f43
    ec2c:	6574656c 	.word	0x6574656c
    ec30:	0000000a 	.word	0x0000000a
    ec34:	6f727245 	.word	0x6f727245
    ec38:	202d2072 	.word	0x202d2072
    ec3c:	6c696166 	.word	0x6c696166
    ec40:	74206465 	.word	0x74206465
    ec44:	7270206f 	.word	0x7270206f
    ec48:	7365636f 	.word	0x7365636f
    ec4c:	61732073 	.word	0x61732073
    ec50:	656c706d 	.word	0x656c706d
    ec54:	000a2e73 	.word	0x000a2e73
    ec58:	6f727245 	.word	0x6f727245
    ec5c:	202d2072 	.word	0x202d2072
    ec60:	61656c63 	.word	0x61656c63
    ec64:	676e6972 	.word	0x676e6972
    ec68:	65687420 	.word	0x65687420
    ec6c:	43444120 	.word	0x43444120
    ec70:	746e6920 	.word	0x746e6920
    ec74:	75727265 	.word	0x75727265
    ec78:	20737470 	.word	0x20737470
    ec7c:	6c696166 	.word	0x6c696166
    ec80:	0a2e6465 	.word	0x0a2e6465
    ec84:	00000000 	.word	0x00000000
    ec88:	0a0a0a0a 	.word	0x0a0a0a0a
    ec8c:	0a0a0a0a 	.word	0x0a0a0a0a
    ec90:	0a0a0a0a 	.word	0x0a0a0a0a
    ec94:	0a0a0a0a 	.word	0x0a0a0a0a
    ec98:	00000a0a 	.word	0x00000a0a

0000ec9c <g_AM_PIN_16_ADCSE0>:
    ec9c:	00000000                                ....

0000eca0 <g_AM_BSP_GPIO_ITM_SWO>:
    eca0:	00000002                                ....

0000eca4 <am_hal_cachectrl_defaults>:
    eca4:	00000308                                ....

0000eca8 <g_AM_HAL_GPIO_DISABLE>:
    eca8:	00000003                                ....

0000ecac <g_AM_HAL_GPIO_OUTPUT>:
    ecac:	00000403                                ....

0000ecb0 <g_ui8Bit76Capabilities>:
    ecb0:	02800101 80010180 80800101 80808080     ................
    ecc0:	80808080 80808008 01800180 80808080     ................
    ecd0:	80808080 01800402 01010401 80808080     ................
    ece0:	00000101                                ....

0000ece4 <g_ui8Inpen>:
    ece4:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    ecf4:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    ed04:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    ed14:	00003130                                01..

0000ed18 <g_ui8NCEtable>:
    ed18:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    ed28:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    ed38:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    ed48:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    ed58:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    ed68:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    ed78:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    ed88:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    ed98:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    eda8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    edb8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    edc8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    edd8:	32221202 43231303                       .."2..#C

0000ede0 <g_ui8nCEpins>:
    ede0:	02070707 00080802 01020202 01010101     ................
    edf0:	01010101 01010101 01010101 01010101     ................
    ee00:	01010101 08010101 01010008 01010101     ................
    ee10:	00000101                                ....

0000ee14 <g_am_hal_mcuctrl_flash_size>:
    ee14:	00004000 00008000 00010000 00020000     .@..............
    ee24:	00040000 00080000 00100000 00200000     .............. .
    ee34:	00180000 00000000 00000000 00000000     ................
	...

0000ee54 <g_am_hal_mcuctrl_sram_size>:
    ee54:	00004000 00008000 00010000 00020000     .@..............
    ee64:	00040000 00080000 00100000 00060000     ................
    ee74:	000c0000 00000000 00000000 00000000     ................
	...

0000ee94 <am_hal_pwrctrl_memory_control>:
	...
    eeac:	00000001 00000001 00000001 00001fff     ................
    eebc:	00001fff 00000001 00000003 00000003     ................
    eecc:	00000003 00001fff 00001fff 00000003     ................
    eedc:	00000007 00000007 00000007 00001fff     ................
    eeec:	00001fff 00000007 0000000f 0000000f     ................
    eefc:	0000000f 00001fff 00001fff 0000000f     ................
    ef0c:	0000001f 0000001f 0000001f 00001fff     ................
    ef1c:	00001fff 0000001f 0000003f 0000003f     ........?...?...
    ef2c:	0000003f 00001fff 00001fff 0000003f     ?...........?...
    ef3c:	0000007f 0000007f 0000007f 00001fff     ................
    ef4c:	00001fff 0000007f 000000ff 000000ff     ................
    ef5c:	000000ff 00001fff 00001fff 000000ff     ................
    ef6c:	000001ff 000001ff 000001ff 00001fff     ................
    ef7c:	00001fff 000001ff 000003ff 000003ff     ................
    ef8c:	000003ff 00001fff 00001fff 000003ff     ................
    ef9c:	000007ff 000007ff 000007ff 00001fff     ................
    efac:	00001fff 000007ff 00000fff 00000fff     ................
    efbc:	00000fff 00001fff 00001fff 00000fff     ................
    efcc:	00001fff 00001fff 00001fff 00001fff     ................
    efdc:	00001fff 00001fff 00002000 00002000     ......... ... ..
    efec:	00002000 00006000 00006000 00002000     . ...`...`... ..
    effc:	00006000 00006000 00006000 00006000     .`...`...`...`..
    f00c:	00006000 00006000 c0000000 00000000     .`...`..........
    f01c:	c0000000 c0000000 00000000 80000000     ................
    f02c:	c0007fff 00007fff c0007fff c0007fff     ................
    f03c:	00007fff 80007fff                       ........

0000f044 <am_hal_pwrctrl_peripheral_control>:
	...
    f050:	00000001 00000004 00000004 00000002     ................
    f060:	00000008 00000008 00000004 00000008     ................
    f070:	00000008 00000008 00000008 00000008     ................
    f080:	00000010 00000010 00000010 00000020     ............ ...
    f090:	00000010 00000010 00000040 00000010     ........@.......
    f0a0:	00000010 00000080 00000004 00000004     ................
    f0b0:	00000100 00000004 00000004 00000200     ................
    f0c0:	00000020 00000020 00000400 00000004      ... ...........
    f0d0:	00000004 00000800 00000040 00000040     ........@...@...
    f0e0:	00001000 00000080 00000080 00002000     ............. ..
    f0f0:	00000100 00000100                       ........
