
bin/b0_hfadj.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 b5 d0 00 00 1d d1 00 00 49 c2 00 00     ............I...
    c010:	1f d1 00 00 1f d1 00 00 1f d1 00 00 00 00 00 00     ................
	...
    c02c:	21 d1 00 00 21 d1 00 00 00 00 00 00 21 d1 00 00     !...!.......!...
    c03c:	21 d1 00 00 21 d1 00 00 21 d1 00 00 21 d1 00 00     !...!...!...!...
    c04c:	21 d1 00 00 21 d1 00 00 21 d1 00 00 21 d1 00 00     !...!...!...!...
    c05c:	21 d1 00 00 21 d1 00 00 21 d1 00 00 21 d1 00 00     !...!...!...!...
    c06c:	21 d1 00 00 21 d1 00 00 21 d1 00 00 21 d1 00 00     !...!...!...!...
    c07c:	21 d1 00 00 21 d1 00 00 21 d1 00 00 21 d1 00 00     !...!...!...!...
    c08c:	21 d1 00 00 21 d1 00 00 21 d1 00 00 21 d1 00 00     !...!...!...!...
    c09c:	21 d1 00 00 21 d1 00 00 21 d1 00 00 21 d1 00 00     !...!...!...!...
    c0ac:	21 d1 00 00 21 d1 00 00 21 d1 00 00 21 d1 00 00     !...!...!...!...
    c0bc:	21 d1 00 00                                         !...

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c1a0:	b508      	push	{r3, lr}
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a2:	2100      	movs	r1, #0
    c1a4:	2000      	movs	r0, #0
    c1a6:	f001 f9db 	bl	d560 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1aa:	4815      	ldr	r0, [pc, #84]	; (c200 <main+0x60>)
    c1ac:	f001 f830 	bl	d210 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b0:	f001 f852 	bl	d258 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c1b4:	f000 ffb6 	bl	d124 <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM output
    //
    am_bsp_itm_printf_enable();
    c1b8:	f001 f80a 	bl	d1d0 <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c1bc:	f000 ff72 	bl	d0a4 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("B0 ERR00x Workaround Example\n\n");
    c1c0:	4810      	ldr	r0, [pc, #64]	; (c204 <main+0x64>)
    c1c2:	f000 ff4f 	bl	d064 <am_util_stdio_printf>

    am_util_stdio_printf("Enabling the 32KHz Crystal\n");
    c1c6:	4810      	ldr	r0, [pc, #64]	; (c208 <main+0x68>)
    c1c8:	f000 ff4c 	bl	d064 <am_util_stdio_printf>
    //
    // Enable the 32KHz XTAL.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
    c1cc:	2100      	movs	r1, #0
    c1ce:	2001      	movs	r0, #1
    c1d0:	f001 f9c6 	bl	d560 <am_hal_clkgen_control>

    //
    // Wait for 1 second for the 32KHz XTAL to startup and stabilize.
    //
    am_util_delay_ms(1000);
    c1d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c1d8:	f000 f81a 	bl	c210 <am_util_delay_ms>

    //
    // Enable HFADJ.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_HFADJ_ENABLE, 0);
    c1dc:	2100      	movs	r1, #0
    c1de:	2008      	movs	r0, #8
    c1e0:	f001 f9be 	bl	d560 <am_hal_clkgen_control>

    am_util_stdio_printf("\nDisabling the 32KHz Crystal\n");
    c1e4:	4809      	ldr	r0, [pc, #36]	; (c20c <main+0x6c>)
    c1e6:	f000 ff3d 	bl	d064 <am_util_stdio_printf>

    //
    // Disable the 32KHz XTAL.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_STOP, 0);
    c1ea:	2100      	movs	r1, #0
    c1ec:	2003      	movs	r0, #3
    c1ee:	f001 f9b7 	bl	d560 <am_hal_clkgen_control>

    //
    // We are done printing.
    // Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c1f2:	f000 ffb7 	bl	d164 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c1f6:	2001      	movs	r0, #1
    c1f8:	f001 feae 	bl	df58 <am_hal_sysctrl_sleep>
    c1fc:	e7fb      	b.n	c1f6 <main+0x56>
    c1fe:	bf00      	nop
    c200:	0000e244 	.word	0x0000e244
    c204:	0000e1d0 	.word	0x0000e1d0
    c208:	0000e1f0 	.word	0x0000e1f0
    c20c:	0000e20c 	.word	0x0000e20c

0000c210 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c210:	b500      	push	{lr}
    c212:	b089      	sub	sp, #36	; 0x24
    c214:	9001      	str	r0, [sp, #4]
    am_hal_delay_us( ui32MilliSeconds * 1000);
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;
#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c216:	ab03      	add	r3, sp, #12
    c218:	4618      	mov	r0, r3
    c21a:	f001 fa3d 	bl	d698 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c21e:	9b03      	ldr	r3, [sp, #12]
    c220:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c222:	9b07      	ldr	r3, [sp, #28]
    c224:	4a07      	ldr	r2, [pc, #28]	; (c244 <am_util_delay_ms+0x34>)
    c226:	fba2 2303 	umull	r2, r3, r2, r3
    c22a:	099a      	lsrs	r2, r3, #6
    c22c:	9b01      	ldr	r3, [sp, #4]
    c22e:	fb02 f303 	mul.w	r3, r2, r3
    c232:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c234:	9806      	ldr	r0, [sp, #24]
    c236:	f001 fa4d 	bl	d6d4 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    c23a:	bf00      	nop
    c23c:	b009      	add	sp, #36	; 0x24
    c23e:	f85d fb04 	ldr.w	pc, [sp], #4
    c242:	bf00      	nop
    c244:	057619f1 	.word	0x057619f1

0000c248 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c248:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c24a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c24e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c250:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c254:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c258:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c25c:	f000 f80a 	bl	c274 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c260:	bd01      	pop	{r0, pc}
}
    c262:	bf00      	nop
    c264:	4618      	mov	r0, r3

0000c266 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c266:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c268:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c26a:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c26c:	4770      	bx	lr
}
    c26e:	bf00      	nop
    c270:	4618      	mov	r0, r3
	...

0000c274 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c274:	b500      	push	{lr}
    c276:	b097      	sub	sp, #92	; 0x5c
    c278:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c27a:	ab03      	add	r3, sp, #12
    c27c:	2200      	movs	r2, #0
    c27e:	601a      	str	r2, [r3, #0]
    c280:	605a      	str	r2, [r3, #4]
    c282:	609a      	str	r2, [r3, #8]
    c284:	60da      	str	r2, [r3, #12]
    c286:	611a      	str	r2, [r3, #16]
    c288:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c28a:	2300      	movs	r3, #0
    c28c:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c28e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c290:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c292:	4b2e      	ldr	r3, [pc, #184]	; (c34c <am_util_faultisr_collect_data+0xd8>)
    c294:	681b      	ldr	r3, [r3, #0]
    c296:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c298:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c29a:	b2db      	uxtb	r3, r3
    c29c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c2a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c2a2:	0a1b      	lsrs	r3, r3, #8
    c2a4:	b2db      	uxtb	r3, r3
    c2a6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c2aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c2ac:	0c1b      	lsrs	r3, r3, #16
    c2ae:	b29b      	uxth	r3, r3
    c2b0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c2b4:	4b26      	ldr	r3, [pc, #152]	; (c350 <am_util_faultisr_collect_data+0xdc>)
    c2b6:	681b      	ldr	r3, [r3, #0]
    c2b8:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c2ba:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c2be:	b2db      	uxtb	r3, r3
    c2c0:	f003 0302 	and.w	r3, r3, #2
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d005      	beq.n	c2d4 <am_util_faultisr_collect_data+0x60>
    c2c8:	9901      	ldr	r1, [sp, #4]
    c2ca:	2006      	movs	r0, #6
    c2cc:	f7ff ffcb 	bl	c266 <getStackedReg>
    c2d0:	4603      	mov	r3, r0
    c2d2:	e001      	b.n	c2d8 <am_util_faultisr_collect_data+0x64>
    c2d4:	f04f 33ff 	mov.w	r3, #4294967295
    c2d8:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c2da:	9901      	ldr	r1, [sp, #4]
    c2dc:	2000      	movs	r0, #0
    c2de:	f7ff ffc2 	bl	c266 <getStackedReg>
    c2e2:	4603      	mov	r3, r0
    c2e4:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c2e6:	9901      	ldr	r1, [sp, #4]
    c2e8:	2001      	movs	r0, #1
    c2ea:	f7ff ffbc 	bl	c266 <getStackedReg>
    c2ee:	4603      	mov	r3, r0
    c2f0:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c2f2:	9901      	ldr	r1, [sp, #4]
    c2f4:	2002      	movs	r0, #2
    c2f6:	f7ff ffb6 	bl	c266 <getStackedReg>
    c2fa:	4603      	mov	r3, r0
    c2fc:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c2fe:	9901      	ldr	r1, [sp, #4]
    c300:	2003      	movs	r0, #3
    c302:	f7ff ffb0 	bl	c266 <getStackedReg>
    c306:	4603      	mov	r3, r0
    c308:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c30a:	9901      	ldr	r1, [sp, #4]
    c30c:	2004      	movs	r0, #4
    c30e:	f7ff ffaa 	bl	c266 <getStackedReg>
    c312:	4603      	mov	r3, r0
    c314:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c316:	9901      	ldr	r1, [sp, #4]
    c318:	2005      	movs	r0, #5
    c31a:	f7ff ffa4 	bl	c266 <getStackedReg>
    c31e:	4603      	mov	r3, r0
    c320:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c322:	9901      	ldr	r1, [sp, #4]
    c324:	2006      	movs	r0, #6
    c326:	f7ff ff9e 	bl	c266 <getStackedReg>
    c32a:	4603      	mov	r3, r0
    c32c:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c32e:	9901      	ldr	r1, [sp, #4]
    c330:	2007      	movs	r0, #7
    c332:	f7ff ff98 	bl	c266 <getStackedReg>
    c336:	4603      	mov	r3, r0
    c338:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c33a:	ab03      	add	r3, sp, #12
    c33c:	4619      	mov	r1, r3
    c33e:	2002      	movs	r0, #2
    c340:	f001 fc30 	bl	dba4 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c344:	2300      	movs	r3, #0
    c346:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c348:	e7fe      	b.n	c348 <am_util_faultisr_collect_data+0xd4>
    c34a:	bf00      	nop
    c34c:	e000ed28 	.word	0xe000ed28
    c350:	e000ed38 	.word	0xe000ed38

0000c354 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c354:	b082      	sub	sp, #8
    c356:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c358:	4a02      	ldr	r2, [pc, #8]	; (c364 <am_util_stdio_printf_init+0x10>)
    c35a:	9b01      	ldr	r3, [sp, #4]
    c35c:	6013      	str	r3, [r2, #0]
}
    c35e:	bf00      	nop
    c360:	b002      	add	sp, #8
    c362:	4770      	bx	lr
    c364:	10001034 	.word	0x10001034

0000c368 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c368:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c36c:	b098      	sub	sp, #96	; 0x60
    c36e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c372:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c376:	f04f 0000 	mov.w	r0, #0
    c37a:	f04f 0100 	mov.w	r1, #0
    c37e:	0018      	movs	r0, r3
    c380:	2100      	movs	r1, #0
    c382:	ea50 0301 	orrs.w	r3, r0, r1
    c386:	f000 80b0 	beq.w	c4ea <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c38a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c38e:	f04f 0400 	mov.w	r4, #0
    c392:	f04f 0500 	mov.w	r5, #0
    c396:	0854      	lsrs	r4, r2, #1
    c398:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c39c:	085d      	lsrs	r5, r3, #1
    c39e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c3a2:	f04f 0000 	mov.w	r0, #0
    c3a6:	f04f 0100 	mov.w	r1, #0
    c3aa:	0890      	lsrs	r0, r2, #2
    c3ac:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c3b0:	0899      	lsrs	r1, r3, #2
    c3b2:	eb14 0a00 	adds.w	sl, r4, r0
    c3b6:	eb45 0b01 	adc.w	fp, r5, r1
    c3ba:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c3be:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c3c2:	f04f 0000 	mov.w	r0, #0
    c3c6:	f04f 0100 	mov.w	r1, #0
    c3ca:	0910      	lsrs	r0, r2, #4
    c3cc:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c3d0:	0919      	lsrs	r1, r3, #4
    c3d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c3d6:	1814      	adds	r4, r2, r0
    c3d8:	9402      	str	r4, [sp, #8]
    c3da:	414b      	adcs	r3, r1
    c3dc:	9303      	str	r3, [sp, #12]
    c3de:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c3e2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c3e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c3ea:	f04f 0000 	mov.w	r0, #0
    c3ee:	f04f 0100 	mov.w	r1, #0
    c3f2:	0a10      	lsrs	r0, r2, #8
    c3f4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c3f8:	0a19      	lsrs	r1, r3, #8
    c3fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c3fe:	1814      	adds	r4, r2, r0
    c400:	9404      	str	r4, [sp, #16]
    c402:	414b      	adcs	r3, r1
    c404:	9305      	str	r3, [sp, #20]
    c406:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c40a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c40e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c412:	f04f 0000 	mov.w	r0, #0
    c416:	f04f 0100 	mov.w	r1, #0
    c41a:	0c10      	lsrs	r0, r2, #16
    c41c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c420:	0c19      	lsrs	r1, r3, #16
    c422:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c426:	1814      	adds	r4, r2, r0
    c428:	9406      	str	r4, [sp, #24]
    c42a:	414b      	adcs	r3, r1
    c42c:	9307      	str	r3, [sp, #28]
    c42e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c432:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c436:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c43a:	f04f 0000 	mov.w	r0, #0
    c43e:	f04f 0100 	mov.w	r1, #0
    c442:	0018      	movs	r0, r3
    c444:	2100      	movs	r1, #0
    c446:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c44a:	1814      	adds	r4, r2, r0
    c44c:	9408      	str	r4, [sp, #32]
    c44e:	414b      	adcs	r3, r1
    c450:	9309      	str	r3, [sp, #36]	; 0x24
    c452:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c456:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c45a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c45e:	f04f 0200 	mov.w	r2, #0
    c462:	f04f 0300 	mov.w	r3, #0
    c466:	08c2      	lsrs	r2, r0, #3
    c468:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c46c:	08cb      	lsrs	r3, r1, #3
    c46e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c472:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c476:	4622      	mov	r2, r4
    c478:	462b      	mov	r3, r5
    c47a:	f04f 0000 	mov.w	r0, #0
    c47e:	f04f 0100 	mov.w	r1, #0
    c482:	0099      	lsls	r1, r3, #2
    c484:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c488:	0090      	lsls	r0, r2, #2
    c48a:	4602      	mov	r2, r0
    c48c:	460b      	mov	r3, r1
    c48e:	1916      	adds	r6, r2, r4
    c490:	eb43 0705 	adc.w	r7, r3, r5
    c494:	19b3      	adds	r3, r6, r6
    c496:	930a      	str	r3, [sp, #40]	; 0x28
    c498:	eb47 0307 	adc.w	r3, r7, r7
    c49c:	930b      	str	r3, [sp, #44]	; 0x2c
    c49e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c4a2:	4630      	mov	r0, r6
    c4a4:	4639      	mov	r1, r7
    c4a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c4aa:	1a14      	subs	r4, r2, r0
    c4ac:	940c      	str	r4, [sp, #48]	; 0x30
    c4ae:	eb63 0301 	sbc.w	r3, r3, r1
    c4b2:	930d      	str	r3, [sp, #52]	; 0x34
    c4b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c4b8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c4bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c4c0:	f112 0806 	adds.w	r8, r2, #6
    c4c4:	f143 0900 	adc.w	r9, r3, #0
    c4c8:	f04f 0200 	mov.w	r2, #0
    c4cc:	f04f 0300 	mov.w	r3, #0
    c4d0:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c4d4:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c4d8:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c4dc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c4e0:	1814      	adds	r4, r2, r0
    c4e2:	9400      	str	r4, [sp, #0]
    c4e4:	414b      	adcs	r3, r1
    c4e6:	9301      	str	r3, [sp, #4]
    c4e8:	e02a      	b.n	c540 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c4ec:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c4ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c4f0:	085a      	lsrs	r2, r3, #1
    c4f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c4f4:	089b      	lsrs	r3, r3, #2
    c4f6:	4413      	add	r3, r2
    c4f8:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c4fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c4fc:	091b      	lsrs	r3, r3, #4
    c4fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c500:	4413      	add	r3, r2
    c502:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c504:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c506:	0a1b      	lsrs	r3, r3, #8
    c508:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c50a:	4413      	add	r3, r2
    c50c:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c50e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c510:	0c1b      	lsrs	r3, r3, #16
    c512:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c514:	4413      	add	r3, r2
    c516:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c518:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c51a:	08db      	lsrs	r3, r3, #3
    c51c:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c51e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c520:	4613      	mov	r3, r2
    c522:	009b      	lsls	r3, r3, #2
    c524:	4413      	add	r3, r2
    c526:	005b      	lsls	r3, r3, #1
    c528:	461a      	mov	r2, r3
    c52a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c52c:	1a9b      	subs	r3, r3, r2
    c52e:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c530:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c532:	3306      	adds	r3, #6
    c534:	091a      	lsrs	r2, r3, #4
    c536:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c538:	4413      	add	r3, r2
    c53a:	2200      	movs	r2, #0
    c53c:	9300      	str	r3, [sp, #0]
    c53e:	9201      	str	r2, [sp, #4]
    }
}
    c540:	e9dd 2300 	ldrd	r2, r3, [sp]
    c544:	4610      	mov	r0, r2
    c546:	4619      	mov	r1, r3
    c548:	b018      	add	sp, #96	; 0x60
    c54a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c54e:	4770      	bx	lr

0000c550 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c550:	b500      	push	{lr}
    c552:	b085      	sub	sp, #20
    c554:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c558:	9a00      	ldr	r2, [sp, #0]
    c55a:	9b01      	ldr	r3, [sp, #4]
    c55c:	4313      	orrs	r3, r2
    c55e:	2b00      	cmp	r3, #0
    c560:	bf0c      	ite	eq
    c562:	2301      	moveq	r3, #1
    c564:	2300      	movne	r3, #0
    c566:	b2db      	uxtb	r3, r3
    c568:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c56a:	e008      	b.n	c57e <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c56c:	e9dd 0100 	ldrd	r0, r1, [sp]
    c570:	f7ff fefa 	bl	c368 <divu64_10>
    c574:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c578:	9b03      	ldr	r3, [sp, #12]
    c57a:	3301      	adds	r3, #1
    c57c:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c57e:	e9dd 2300 	ldrd	r2, r3, [sp]
    c582:	4313      	orrs	r3, r2
    c584:	d1f2      	bne.n	c56c <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c586:	9b03      	ldr	r3, [sp, #12]
}
    c588:	4618      	mov	r0, r3
    c58a:	b005      	add	sp, #20
    c58c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c590 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c590:	b530      	push	{r4, r5, lr}
    c592:	b083      	sub	sp, #12
    c594:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c598:	e9dd 2300 	ldrd	r2, r3, [sp]
    c59c:	2b00      	cmp	r3, #0
    c59e:	da07      	bge.n	c5b0 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c5a0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c5a4:	2100      	movs	r1, #0
    c5a6:	4254      	negs	r4, r2
    c5a8:	eb61 0503 	sbc.w	r5, r1, r3
    c5ac:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c5b0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c5b4:	4610      	mov	r0, r2
    c5b6:	4619      	mov	r1, r3
    c5b8:	f7ff ffca 	bl	c550 <ndigits_in_u64>
    c5bc:	4603      	mov	r3, r0
}
    c5be:	4618      	mov	r0, r3
    c5c0:	b003      	add	sp, #12
    c5c2:	bd30      	pop	{r4, r5, pc}

0000c5c4 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c5c4:	b084      	sub	sp, #16
    c5c6:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c5ca:	9a00      	ldr	r2, [sp, #0]
    c5cc:	9b01      	ldr	r3, [sp, #4]
    c5ce:	4313      	orrs	r3, r2
    c5d0:	2b00      	cmp	r3, #0
    c5d2:	bf0c      	ite	eq
    c5d4:	2301      	moveq	r3, #1
    c5d6:	2300      	movne	r3, #0
    c5d8:	b2db      	uxtb	r3, r3
    c5da:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c5dc:	e00e      	b.n	c5fc <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c5de:	e9dd 0100 	ldrd	r0, r1, [sp]
    c5e2:	f04f 0200 	mov.w	r2, #0
    c5e6:	f04f 0300 	mov.w	r3, #0
    c5ea:	0902      	lsrs	r2, r0, #4
    c5ec:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c5f0:	090b      	lsrs	r3, r1, #4
    c5f2:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c5f6:	9b03      	ldr	r3, [sp, #12]
    c5f8:	3301      	adds	r3, #1
    c5fa:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c5fc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c600:	4313      	orrs	r3, r2
    c602:	d1ec      	bne.n	c5de <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c604:	9b03      	ldr	r3, [sp, #12]
}
    c606:	4618      	mov	r0, r3
    c608:	b004      	add	sp, #16
    c60a:	4770      	bx	lr

0000c60c <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c60c:	b086      	sub	sp, #24
    c60e:	9001      	str	r0, [sp, #4]
    c610:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c612:	2300      	movs	r3, #0
    c614:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c618:	2300      	movs	r3, #0
    c61a:	9304      	str	r3, [sp, #16]
    c61c:	2300      	movs	r3, #0
    c61e:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c620:	9b01      	ldr	r3, [sp, #4]
    c622:	781b      	ldrb	r3, [r3, #0]
    c624:	2b2d      	cmp	r3, #45	; 0x2d
    c626:	d11c      	bne.n	c662 <decstr_to_int+0x56>
    {
        bNeg = true;
    c628:	2301      	movs	r3, #1
    c62a:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    c62e:	9b01      	ldr	r3, [sp, #4]
    c630:	3301      	adds	r3, #1
    c632:	9301      	str	r3, [sp, #4]
        uCnt++;
    c634:	9b03      	ldr	r3, [sp, #12]
    c636:	3301      	adds	r3, #1
    c638:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c63a:	e012      	b.n	c662 <decstr_to_int+0x56>
    {
        ++uCnt;
    c63c:	9b03      	ldr	r3, [sp, #12]
    c63e:	3301      	adds	r3, #1
    c640:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c642:	9a04      	ldr	r2, [sp, #16]
    c644:	4613      	mov	r3, r2
    c646:	009b      	lsls	r3, r3, #2
    c648:	4413      	add	r3, r2
    c64a:	005b      	lsls	r3, r3, #1
    c64c:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c64e:	9b01      	ldr	r3, [sp, #4]
    c650:	781b      	ldrb	r3, [r3, #0]
    c652:	461a      	mov	r2, r3
    c654:	9b04      	ldr	r3, [sp, #16]
    c656:	4413      	add	r3, r2
    c658:	3b30      	subs	r3, #48	; 0x30
    c65a:	9304      	str	r3, [sp, #16]
        pcStr++;
    c65c:	9b01      	ldr	r3, [sp, #4]
    c65e:	3301      	adds	r3, #1
    c660:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c662:	9b01      	ldr	r3, [sp, #4]
    c664:	781b      	ldrb	r3, [r3, #0]
    c666:	2b2f      	cmp	r3, #47	; 0x2f
    c668:	d903      	bls.n	c672 <decstr_to_int+0x66>
    c66a:	9b01      	ldr	r3, [sp, #4]
    c66c:	781b      	ldrb	r3, [r3, #0]
    c66e:	2b39      	cmp	r3, #57	; 0x39
    c670:	d9e4      	bls.n	c63c <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c672:	9b00      	ldr	r3, [sp, #0]
    c674:	2b00      	cmp	r3, #0
    c676:	d002      	beq.n	c67e <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c678:	9b00      	ldr	r3, [sp, #0]
    c67a:	9a03      	ldr	r2, [sp, #12]
    c67c:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c67e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c682:	2b00      	cmp	r3, #0
    c684:	d002      	beq.n	c68c <decstr_to_int+0x80>
    c686:	9b04      	ldr	r3, [sp, #16]
    c688:	425b      	negs	r3, r3
    c68a:	e000      	b.n	c68e <decstr_to_int+0x82>
    c68c:	9b04      	ldr	r3, [sp, #16]
}
    c68e:	4618      	mov	r0, r3
    c690:	b006      	add	sp, #24
    c692:	4770      	bx	lr

0000c694 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c694:	b500      	push	{lr}
    c696:	b091      	sub	sp, #68	; 0x44
    c698:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c69c:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c69e:	2300      	movs	r3, #0
    c6a0:	930f      	str	r3, [sp, #60]	; 0x3c
    c6a2:	2300      	movs	r3, #0
    c6a4:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c6aa:	f7ff fe5d 	bl	c368 <divu64_10>
    c6ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c6b2:	9902      	ldr	r1, [sp, #8]
    c6b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c6b6:	4613      	mov	r3, r2
    c6b8:	009b      	lsls	r3, r3, #2
    c6ba:	4413      	add	r3, r2
    c6bc:	005b      	lsls	r3, r3, #1
    c6be:	1acb      	subs	r3, r1, r3
    c6c0:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c6c4:	b2da      	uxtb	r2, r3
    c6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c6c8:	1c59      	adds	r1, r3, #1
    c6ca:	910f      	str	r1, [sp, #60]	; 0x3c
    c6cc:	3230      	adds	r2, #48	; 0x30
    c6ce:	b2d2      	uxtb	r2, r2
    c6d0:	3340      	adds	r3, #64	; 0x40
    c6d2:	446b      	add	r3, sp
    c6d4:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c6d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    c6dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    c6e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c6e4:	4313      	orrs	r3, r2
    c6e6:	d1de      	bne.n	c6a6 <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c6e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c6ea:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c6ec:	9b01      	ldr	r3, [sp, #4]
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	d010      	beq.n	c714 <uint64_to_str+0x80>
    {
        while ( ix-- )
    c6f2:	e007      	b.n	c704 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    c6f4:	9b01      	ldr	r3, [sp, #4]
    c6f6:	1c5a      	adds	r2, r3, #1
    c6f8:	9201      	str	r2, [sp, #4]
    c6fa:	a904      	add	r1, sp, #16
    c6fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c6fe:	440a      	add	r2, r1
    c700:	7812      	ldrb	r2, [r2, #0]
    c702:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c706:	1e5a      	subs	r2, r3, #1
    c708:	920f      	str	r2, [sp, #60]	; 0x3c
    c70a:	2b00      	cmp	r3, #0
    c70c:	d1f2      	bne.n	c6f4 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c70e:	9b01      	ldr	r3, [sp, #4]
    c710:	2200      	movs	r2, #0
    c712:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    c716:	4618      	mov	r0, r3
    c718:	b011      	add	sp, #68	; 0x44
    c71a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c71e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c71e:	b08c      	sub	sp, #48	; 0x30
    c720:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c724:	9201      	str	r2, [sp, #4]
    c726:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    c72a:	2300      	movs	r3, #0
    c72c:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c72e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c732:	4313      	orrs	r3, r2
    c734:	d135      	bne.n	c7a2 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c738:	1c5a      	adds	r2, r3, #1
    c73a:	920b      	str	r2, [sp, #44]	; 0x2c
    c73c:	3330      	adds	r3, #48	; 0x30
    c73e:	446b      	add	r3, sp
    c740:	2230      	movs	r2, #48	; 0x30
    c742:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c746:	e02c      	b.n	c7a2 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    c748:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c74c:	f003 030f 	and.w	r3, r3, #15
    c750:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c754:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c758:	2b09      	cmp	r3, #9
    c75a:	d90b      	bls.n	c774 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    c75c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c760:	2b00      	cmp	r3, #0
    c762:	d001      	beq.n	c768 <uint64_to_hexstr+0x4a>
    c764:	2227      	movs	r2, #39	; 0x27
    c766:	e000      	b.n	c76a <uint64_to_hexstr+0x4c>
    c768:	2207      	movs	r2, #7
    c76a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    c76e:	4413      	add	r3, r2
    c770:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    c774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c776:	1c5a      	adds	r2, r3, #1
    c778:	920b      	str	r2, [sp, #44]	; 0x2c
    c77a:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    c77e:	3230      	adds	r2, #48	; 0x30
    c780:	b2d2      	uxtb	r2, r2
    c782:	3330      	adds	r3, #48	; 0x30
    c784:	446b      	add	r3, sp
    c786:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    c78a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c78e:	f04f 0200 	mov.w	r2, #0
    c792:	f04f 0300 	mov.w	r3, #0
    c796:	0902      	lsrs	r2, r0, #4
    c798:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c79c:	090b      	lsrs	r3, r1, #4
    c79e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    c7a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c7a6:	4313      	orrs	r3, r2
    c7a8:	d1ce      	bne.n	c748 <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7ac:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    c7ae:	9b01      	ldr	r3, [sp, #4]
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	d010      	beq.n	c7d6 <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    c7b4:	e007      	b.n	c7c6 <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    c7b6:	9b01      	ldr	r3, [sp, #4]
    c7b8:	1c5a      	adds	r2, r3, #1
    c7ba:	9201      	str	r2, [sp, #4]
    c7bc:	a904      	add	r1, sp, #16
    c7be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c7c0:	440a      	add	r2, r1
    c7c2:	7812      	ldrb	r2, [r2, #0]
    c7c4:	701a      	strb	r2, [r3, #0]
        while (ix--)
    c7c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7c8:	1e5a      	subs	r2, r3, #1
    c7ca:	920b      	str	r2, [sp, #44]	; 0x2c
    c7cc:	2b00      	cmp	r3, #0
    c7ce:	d1f2      	bne.n	c7b6 <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    c7d0:	9b01      	ldr	r3, [sp, #4]
    c7d2:	2200      	movs	r2, #0
    c7d4:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    c7d8:	4618      	mov	r0, r3
    c7da:	b00c      	add	sp, #48	; 0x30
    c7dc:	4770      	bx	lr

0000c7de <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    c7de:	b084      	sub	sp, #16
    c7e0:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    c7e2:	2300      	movs	r3, #0
    c7e4:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    c7e6:	9b01      	ldr	r3, [sp, #4]
    c7e8:	2b00      	cmp	r3, #0
    c7ea:	d104      	bne.n	c7f6 <simple_strlen+0x18>
    {
        return ui32RetVal;
    c7ec:	9b03      	ldr	r3, [sp, #12]
    c7ee:	e009      	b.n	c804 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    c7f0:	9b03      	ldr	r3, [sp, #12]
    c7f2:	3301      	adds	r3, #1
    c7f4:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    c7f6:	9b01      	ldr	r3, [sp, #4]
    c7f8:	1c5a      	adds	r2, r3, #1
    c7fa:	9201      	str	r2, [sp, #4]
    c7fc:	781b      	ldrb	r3, [r3, #0]
    c7fe:	2b00      	cmp	r3, #0
    c800:	d1f6      	bne.n	c7f0 <simple_strlen+0x12>
    }
    return ui32RetVal;
    c802:	9b03      	ldr	r3, [sp, #12]
}
    c804:	4618      	mov	r0, r3
    c806:	b004      	add	sp, #16
    c808:	4770      	bx	lr

0000c80a <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    c80a:	b086      	sub	sp, #24
    c80c:	9003      	str	r0, [sp, #12]
    c80e:	460b      	mov	r3, r1
    c810:	9201      	str	r2, [sp, #4]
    c812:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    c816:	2300      	movs	r3, #0
    c818:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    c81a:	9b01      	ldr	r3, [sp, #4]
    c81c:	2b00      	cmp	r3, #0
    c81e:	dc0d      	bgt.n	c83c <padbuffer+0x32>
    {
        return i32Cnt;
    c820:	9b05      	ldr	r3, [sp, #20]
    c822:	e011      	b.n	c848 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    c824:	9b03      	ldr	r3, [sp, #12]
    c826:	2b00      	cmp	r3, #0
    c828:	d005      	beq.n	c836 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    c82a:	9b03      	ldr	r3, [sp, #12]
    c82c:	1c5a      	adds	r2, r3, #1
    c82e:	9203      	str	r2, [sp, #12]
    c830:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c834:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    c836:	9b05      	ldr	r3, [sp, #20]
    c838:	3301      	adds	r3, #1
    c83a:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    c83c:	9b01      	ldr	r3, [sp, #4]
    c83e:	1e5a      	subs	r2, r3, #1
    c840:	9201      	str	r2, [sp, #4]
    c842:	2b00      	cmp	r3, #0
    c844:	d1ee      	bne.n	c824 <padbuffer+0x1a>
    }

    return i32Cnt;
    c846:	9b05      	ldr	r3, [sp, #20]
}
    c848:	4618      	mov	r0, r3
    c84a:	b006      	add	sp, #24
    c84c:	4770      	bx	lr
	...

0000c850 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    c850:	b5f0      	push	{r4, r5, r6, r7, lr}
    c852:	b08f      	sub	sp, #60	; 0x3c
    c854:	ed8d 0a03 	vstr	s0, [sp, #12]
    c858:	9002      	str	r0, [sp, #8]
    c85a:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    c85c:	9b02      	ldr	r3, [sp, #8]
    c85e:	681b      	ldr	r3, [r3, #0]
    c860:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    c862:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c864:	2b03      	cmp	r3, #3
    c866:	dc02      	bgt.n	c86e <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    c868:	f06f 0302 	mvn.w	r3, #2
    c86c:	e0e9      	b.n	ca42 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    c86e:	eddd 7a03 	vldr	s15, [sp, #12]
    c872:	eef5 7a40 	vcmp.f32	s15, #0.0
    c876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c87a:	d104      	bne.n	c886 <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c87c:	9b02      	ldr	r3, [sp, #8]
    c87e:	4a72      	ldr	r2, [pc, #456]	; (ca48 <ftoa+0x1f8>)
    c880:	601a      	str	r2, [r3, #0]
        return 3;
    c882:	2303      	movs	r3, #3
    c884:	e0dd      	b.n	ca42 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    c886:	9b02      	ldr	r3, [sp, #8]
    c888:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    c88a:	9b03      	ldr	r3, [sp, #12]
    c88c:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c88e:	9b04      	ldr	r3, [sp, #16]
    c890:	15db      	asrs	r3, r3, #23
    c892:	b2db      	uxtb	r3, r3
    c894:	3b7f      	subs	r3, #127	; 0x7f
    c896:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c898:	9b04      	ldr	r3, [sp, #16]
    c89a:	f3c3 0316 	ubfx	r3, r3, #0, #23
    c89e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c8a2:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    c8a4:	2300      	movs	r3, #0
    c8a6:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    c8a8:	2300      	movs	r3, #0
    c8aa:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    c8ac:	9b07      	ldr	r3, [sp, #28]
    c8ae:	2b1e      	cmp	r3, #30
    c8b0:	dd02      	ble.n	c8b8 <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    c8b2:	f06f 0301 	mvn.w	r3, #1
    c8b6:	e0c4      	b.n	ca42 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    c8b8:	9b07      	ldr	r3, [sp, #28]
    c8ba:	f113 0f17 	cmn.w	r3, #23
    c8be:	da02      	bge.n	c8c6 <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    c8c0:	f04f 33ff 	mov.w	r3, #4294967295
    c8c4:	e0bd      	b.n	ca42 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    c8c6:	9b07      	ldr	r3, [sp, #28]
    c8c8:	2b16      	cmp	r3, #22
    c8ca:	dd06      	ble.n	c8da <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    c8cc:	9b07      	ldr	r3, [sp, #28]
    c8ce:	3b17      	subs	r3, #23
    c8d0:	9a06      	ldr	r2, [sp, #24]
    c8d2:	fa02 f303 	lsl.w	r3, r2, r3
    c8d6:	930d      	str	r3, [sp, #52]	; 0x34
    c8d8:	e01a      	b.n	c910 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    c8da:	9b07      	ldr	r3, [sp, #28]
    c8dc:	2b00      	cmp	r3, #0
    c8de:	db0f      	blt.n	c900 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    c8e0:	9b07      	ldr	r3, [sp, #28]
    c8e2:	f1c3 0317 	rsb	r3, r3, #23
    c8e6:	9a06      	ldr	r2, [sp, #24]
    c8e8:	fa42 f303 	asr.w	r3, r2, r3
    c8ec:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    c8ee:	9b07      	ldr	r3, [sp, #28]
    c8f0:	3301      	adds	r3, #1
    c8f2:	9a06      	ldr	r2, [sp, #24]
    c8f4:	fa02 f303 	lsl.w	r3, r2, r3
    c8f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c8fc:	930c      	str	r3, [sp, #48]	; 0x30
    c8fe:	e007      	b.n	c910 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    c900:	9b06      	ldr	r3, [sp, #24]
    c902:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    c906:	9b07      	ldr	r3, [sp, #28]
    c908:	43db      	mvns	r3, r3
    c90a:	fa42 f303 	asr.w	r3, r2, r3
    c90e:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    c910:	9b04      	ldr	r3, [sp, #16]
    c912:	2b00      	cmp	r3, #0
    c914:	da04      	bge.n	c920 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    c916:	9b02      	ldr	r3, [sp, #8]
    c918:	1c5a      	adds	r2, r3, #1
    c91a:	9202      	str	r2, [sp, #8]
    c91c:	222d      	movs	r2, #45	; 0x2d
    c91e:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    c920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c922:	2b00      	cmp	r3, #0
    c924:	d105      	bne.n	c932 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    c926:	9b02      	ldr	r3, [sp, #8]
    c928:	1c5a      	adds	r2, r3, #1
    c92a:	9202      	str	r2, [sp, #8]
    c92c:	2230      	movs	r2, #48	; 0x30
    c92e:	701a      	strb	r2, [r3, #0]
    c930:	e023      	b.n	c97a <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    c932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c934:	2b00      	cmp	r3, #0
    c936:	dd09      	ble.n	c94c <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    c938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c93a:	17da      	asrs	r2, r3, #31
    c93c:	461e      	mov	r6, r3
    c93e:	4617      	mov	r7, r2
    c940:	9a02      	ldr	r2, [sp, #8]
    c942:	4630      	mov	r0, r6
    c944:	4639      	mov	r1, r7
    c946:	f7ff fea5 	bl	c694 <uint64_to_str>
    c94a:	e012      	b.n	c972 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    c94c:	9b02      	ldr	r3, [sp, #8]
    c94e:	1c5a      	adds	r2, r3, #1
    c950:	9202      	str	r2, [sp, #8]
    c952:	222d      	movs	r2, #45	; 0x2d
    c954:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    c956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c958:	425b      	negs	r3, r3
    c95a:	17da      	asrs	r2, r3, #31
    c95c:	461c      	mov	r4, r3
    c95e:	4615      	mov	r5, r2
    c960:	9a02      	ldr	r2, [sp, #8]
    c962:	4620      	mov	r0, r4
    c964:	4629      	mov	r1, r5
    c966:	f7ff fe95 	bl	c694 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    c96a:	e002      	b.n	c972 <ftoa+0x122>
        {
            pcBuf++;
    c96c:	9b02      	ldr	r3, [sp, #8]
    c96e:	3301      	adds	r3, #1
    c970:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    c972:	9b02      	ldr	r3, [sp, #8]
    c974:	781b      	ldrb	r3, [r3, #0]
    c976:	2b00      	cmp	r3, #0
    c978:	d1f8      	bne.n	c96c <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    c97a:	9b02      	ldr	r3, [sp, #8]
    c97c:	1c5a      	adds	r2, r3, #1
    c97e:	9202      	str	r2, [sp, #8]
    c980:	222e      	movs	r2, #46	; 0x2e
    c982:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    c984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c986:	2b00      	cmp	r3, #0
    c988:	d105      	bne.n	c996 <ftoa+0x146>
    {
        *pcBuf++ = '0';
    c98a:	9b02      	ldr	r3, [sp, #8]
    c98c:	1c5a      	adds	r2, r3, #1
    c98e:	9202      	str	r2, [sp, #8]
    c990:	2230      	movs	r2, #48	; 0x30
    c992:	701a      	strb	r2, [r3, #0]
    c994:	e04f      	b.n	ca36 <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    c996:	9a02      	ldr	r2, [sp, #8]
    c998:	9b08      	ldr	r3, [sp, #32]
    c99a:	1ad3      	subs	r3, r2, r3
    c99c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c99e:	1ad3      	subs	r3, r2, r3
    c9a0:	3b01      	subs	r3, #1
    c9a2:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    c9a4:	9a05      	ldr	r2, [sp, #20]
    c9a6:	9b01      	ldr	r3, [sp, #4]
    c9a8:	4293      	cmp	r3, r2
    c9aa:	bfa8      	it	ge
    c9ac:	4613      	movge	r3, r2
    c9ae:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    c9b0:	2300      	movs	r3, #0
    c9b2:	930a      	str	r3, [sp, #40]	; 0x28
    c9b4:	e015      	b.n	c9e2 <ftoa+0x192>
        {
            i32FracPart *= 10;
    c9b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c9b8:	4613      	mov	r3, r2
    c9ba:	009b      	lsls	r3, r3, #2
    c9bc:	4413      	add	r3, r2
    c9be:	005b      	lsls	r3, r3, #1
    c9c0:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    c9c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c9c4:	161b      	asrs	r3, r3, #24
    c9c6:	b2da      	uxtb	r2, r3
    c9c8:	9b02      	ldr	r3, [sp, #8]
    c9ca:	1c59      	adds	r1, r3, #1
    c9cc:	9102      	str	r1, [sp, #8]
    c9ce:	3230      	adds	r2, #48	; 0x30
    c9d0:	b2d2      	uxtb	r2, r2
    c9d2:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    c9d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c9d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c9da:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    c9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9de:	3301      	adds	r3, #1
    c9e0:	930a      	str	r3, [sp, #40]	; 0x28
    c9e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c9e4:	9b05      	ldr	r3, [sp, #20]
    c9e6:	429a      	cmp	r2, r3
    c9e8:	dbe5      	blt.n	c9b6 <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    c9ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c9ec:	4613      	mov	r3, r2
    c9ee:	009b      	lsls	r3, r3, #2
    c9f0:	4413      	add	r3, r2
    c9f2:	005b      	lsls	r3, r3, #1
    c9f4:	161b      	asrs	r3, r3, #24
    c9f6:	2b04      	cmp	r3, #4
    c9f8:	dd1d      	ble.n	ca36 <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    c9fa:	9b02      	ldr	r3, [sp, #8]
    c9fc:	3b01      	subs	r3, #1
    c9fe:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ca00:	e015      	b.n	ca2e <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    ca02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca04:	781b      	ldrb	r3, [r3, #0]
    ca06:	2b2e      	cmp	r3, #46	; 0x2e
    ca08:	d00e      	beq.n	ca28 <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    ca0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca0c:	781b      	ldrb	r3, [r3, #0]
    ca0e:	2b39      	cmp	r3, #57	; 0x39
    ca10:	d103      	bne.n	ca1a <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    ca12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca14:	2230      	movs	r2, #48	; 0x30
    ca16:	701a      	strb	r2, [r3, #0]
    ca18:	e006      	b.n	ca28 <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    ca1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca1c:	781b      	ldrb	r3, [r3, #0]
    ca1e:	3301      	adds	r3, #1
    ca20:	b2da      	uxtb	r2, r3
    ca22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca24:	701a      	strb	r2, [r3, #0]
                    break;
    ca26:	e006      	b.n	ca36 <ftoa+0x1e6>
                }
                pcBuftmp--;
    ca28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca2a:	3b01      	subs	r3, #1
    ca2c:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ca2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca30:	9b08      	ldr	r3, [sp, #32]
    ca32:	429a      	cmp	r2, r3
    ca34:	d2e5      	bcs.n	ca02 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    ca36:	9b02      	ldr	r3, [sp, #8]
    ca38:	2200      	movs	r2, #0
    ca3a:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    ca3c:	9a02      	ldr	r2, [sp, #8]
    ca3e:	9b08      	ldr	r3, [sp, #32]
    ca40:	1ad3      	subs	r3, r2, r3
} // ftoa()
    ca42:	4618      	mov	r0, r3
    ca44:	b00f      	add	sp, #60	; 0x3c
    ca46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca48:	00302e30 	.word	0x00302e30

0000ca4c <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca50:	b097      	sub	sp, #92	; 0x5c
    ca52:	9003      	str	r0, [sp, #12]
    ca54:	9102      	str	r1, [sp, #8]
    ca56:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ca58:	2300      	movs	r3, #0
    ca5a:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    ca5c:	2300      	movs	r3, #0
    ca5e:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    ca60:	e2e9      	b.n	d036 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    ca62:	2306      	movs	r3, #6
    ca64:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    ca66:	9b02      	ldr	r3, [sp, #8]
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	2b25      	cmp	r3, #37	; 0x25
    ca6c:	d01f      	beq.n	caae <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ca6e:	9b03      	ldr	r3, [sp, #12]
    ca70:	2b00      	cmp	r3, #0
    ca72:	d015      	beq.n	caa0 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ca74:	9b02      	ldr	r3, [sp, #8]
    ca76:	781b      	ldrb	r3, [r3, #0]
    ca78:	2b0a      	cmp	r3, #10
    ca7a:	d10b      	bne.n	ca94 <am_util_stdio_vsprintf+0x48>
    ca7c:	4ba8      	ldr	r3, [pc, #672]	; (cd20 <am_util_stdio_vsprintf+0x2d4>)
    ca7e:	781b      	ldrb	r3, [r3, #0]
    ca80:	2b00      	cmp	r3, #0
    ca82:	d007      	beq.n	ca94 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    ca84:	9b03      	ldr	r3, [sp, #12]
    ca86:	1c5a      	adds	r2, r3, #1
    ca88:	9203      	str	r2, [sp, #12]
    ca8a:	220d      	movs	r2, #13
    ca8c:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    ca8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ca90:	3301      	adds	r3, #1
    ca92:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    ca94:	9b03      	ldr	r3, [sp, #12]
    ca96:	1c5a      	adds	r2, r3, #1
    ca98:	9203      	str	r2, [sp, #12]
    ca9a:	9a02      	ldr	r2, [sp, #8]
    ca9c:	7812      	ldrb	r2, [r2, #0]
    ca9e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    caa0:	9b02      	ldr	r3, [sp, #8]
    caa2:	3301      	adds	r3, #1
    caa4:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    caa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    caa8:	3301      	adds	r3, #1
    caaa:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    caac:	e2c3      	b.n	d036 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    caae:	9b02      	ldr	r3, [sp, #8]
    cab0:	3301      	adds	r3, #1
    cab2:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    cab4:	2300      	movs	r3, #0
    cab6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    caba:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cabe:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cac2:	2320      	movs	r3, #32
    cac4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    cac8:	9b02      	ldr	r3, [sp, #8]
    caca:	781b      	ldrb	r3, [r3, #0]
    cacc:	2b30      	cmp	r3, #48	; 0x30
    cace:	d105      	bne.n	cadc <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cad0:	2330      	movs	r3, #48	; 0x30
    cad2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    cad6:	9b02      	ldr	r3, [sp, #8]
    cad8:	3301      	adds	r3, #1
    cada:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cadc:	ab05      	add	r3, sp, #20
    cade:	4619      	mov	r1, r3
    cae0:	9802      	ldr	r0, [sp, #8]
    cae2:	f7ff fd93 	bl	c60c <decstr_to_int>
    cae6:	4603      	mov	r3, r0
    cae8:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    caea:	9b05      	ldr	r3, [sp, #20]
    caec:	9a02      	ldr	r2, [sp, #8]
    caee:	4413      	add	r3, r2
    caf0:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    caf2:	9b02      	ldr	r3, [sp, #8]
    caf4:	781b      	ldrb	r3, [r3, #0]
    caf6:	2b73      	cmp	r3, #115	; 0x73
    caf8:	d005      	beq.n	cb06 <am_util_stdio_vsprintf+0xba>
    cafa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cafc:	2b00      	cmp	r3, #0
    cafe:	da02      	bge.n	cb06 <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    cb00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb02:	425b      	negs	r3, r3
    cb04:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cb06:	9b02      	ldr	r3, [sp, #8]
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	2b2e      	cmp	r3, #46	; 0x2e
    cb0c:	d10d      	bne.n	cb2a <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cb0e:	9b02      	ldr	r3, [sp, #8]
    cb10:	3301      	adds	r3, #1
    cb12:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cb14:	ab05      	add	r3, sp, #20
    cb16:	4619      	mov	r1, r3
    cb18:	9802      	ldr	r0, [sp, #8]
    cb1a:	f7ff fd77 	bl	c60c <decstr_to_int>
    cb1e:	4603      	mov	r3, r0
    cb20:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cb22:	9b05      	ldr	r3, [sp, #20]
    cb24:	9a02      	ldr	r2, [sp, #8]
    cb26:	4413      	add	r3, r2
    cb28:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cb2a:	9b02      	ldr	r3, [sp, #8]
    cb2c:	781b      	ldrb	r3, [r3, #0]
    cb2e:	2b6c      	cmp	r3, #108	; 0x6c
    cb30:	d10c      	bne.n	cb4c <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cb32:	9b02      	ldr	r3, [sp, #8]
    cb34:	3301      	adds	r3, #1
    cb36:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cb38:	9b02      	ldr	r3, [sp, #8]
    cb3a:	781b      	ldrb	r3, [r3, #0]
    cb3c:	2b6c      	cmp	r3, #108	; 0x6c
    cb3e:	d105      	bne.n	cb4c <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cb40:	9b02      	ldr	r3, [sp, #8]
    cb42:	3301      	adds	r3, #1
    cb44:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cb46:	2301      	movs	r3, #1
    cb48:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cb4c:	9b02      	ldr	r3, [sp, #8]
    cb4e:	781b      	ldrb	r3, [r3, #0]
    cb50:	3b46      	subs	r3, #70	; 0x46
    cb52:	2b32      	cmp	r3, #50	; 0x32
    cb54:	f200 825c 	bhi.w	d010 <am_util_stdio_vsprintf+0x5c4>
    cb58:	a201      	add	r2, pc, #4	; (adr r2, cb60 <am_util_stdio_vsprintf+0x114>)
    cb5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb5e:	bf00      	nop
    cb60:	0000cf97 	.word	0x0000cf97
    cb64:	0000d011 	.word	0x0000d011
    cb68:	0000d011 	.word	0x0000d011
    cb6c:	0000d011 	.word	0x0000d011
    cb70:	0000d011 	.word	0x0000d011
    cb74:	0000d011 	.word	0x0000d011
    cb78:	0000d011 	.word	0x0000d011
    cb7c:	0000d011 	.word	0x0000d011
    cb80:	0000d011 	.word	0x0000d011
    cb84:	0000d011 	.word	0x0000d011
    cb88:	0000d011 	.word	0x0000d011
    cb8c:	0000d011 	.word	0x0000d011
    cb90:	0000d011 	.word	0x0000d011
    cb94:	0000d011 	.word	0x0000d011
    cb98:	0000d011 	.word	0x0000d011
    cb9c:	0000d011 	.word	0x0000d011
    cba0:	0000d011 	.word	0x0000d011
    cba4:	0000d011 	.word	0x0000d011
    cba8:	0000cd2b 	.word	0x0000cd2b
    cbac:	0000d011 	.word	0x0000d011
    cbb0:	0000d011 	.word	0x0000d011
    cbb4:	0000d011 	.word	0x0000d011
    cbb8:	0000d011 	.word	0x0000d011
    cbbc:	0000d011 	.word	0x0000d011
    cbc0:	0000d011 	.word	0x0000d011
    cbc4:	0000d011 	.word	0x0000d011
    cbc8:	0000d011 	.word	0x0000d011
    cbcc:	0000d011 	.word	0x0000d011
    cbd0:	0000d011 	.word	0x0000d011
    cbd4:	0000cc2d 	.word	0x0000cc2d
    cbd8:	0000ce5b 	.word	0x0000ce5b
    cbdc:	0000d011 	.word	0x0000d011
    cbe0:	0000cf97 	.word	0x0000cf97
    cbe4:	0000d011 	.word	0x0000d011
    cbe8:	0000d011 	.word	0x0000d011
    cbec:	0000ce5b 	.word	0x0000ce5b
    cbf0:	0000d011 	.word	0x0000d011
    cbf4:	0000d011 	.word	0x0000d011
    cbf8:	0000d011 	.word	0x0000d011
    cbfc:	0000d011 	.word	0x0000d011
    cc00:	0000d011 	.word	0x0000d011
    cc04:	0000d011 	.word	0x0000d011
    cc08:	0000d011 	.word	0x0000d011
    cc0c:	0000d011 	.word	0x0000d011
    cc10:	0000d011 	.word	0x0000d011
    cc14:	0000cc53 	.word	0x0000cc53
    cc18:	0000d011 	.word	0x0000d011
    cc1c:	0000cdc5 	.word	0x0000cdc5
    cc20:	0000d011 	.word	0x0000d011
    cc24:	0000d011 	.word	0x0000d011
    cc28:	0000cd25 	.word	0x0000cd25
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cc2c:	9b01      	ldr	r3, [sp, #4]
    cc2e:	1d1a      	adds	r2, r3, #4
    cc30:	9201      	str	r2, [sp, #4]
    cc32:	681b      	ldr	r3, [r3, #0]
    cc34:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    cc38:	9b03      	ldr	r3, [sp, #12]
    cc3a:	2b00      	cmp	r3, #0
    cc3c:	d005      	beq.n	cc4a <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cc3e:	9b03      	ldr	r3, [sp, #12]
    cc40:	1c5a      	adds	r2, r3, #1
    cc42:	9203      	str	r2, [sp, #12]
    cc44:	f89d 201f 	ldrb.w	r2, [sp, #31]
    cc48:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cc4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc4c:	3301      	adds	r3, #1
    cc4e:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cc50:	e1ee      	b.n	d030 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cc52:	9b01      	ldr	r3, [sp, #4]
    cc54:	1d1a      	adds	r2, r3, #4
    cc56:	9201      	str	r2, [sp, #4]
    cc58:	681b      	ldr	r3, [r3, #0]
    cc5a:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cc5c:	9815      	ldr	r0, [sp, #84]	; 0x54
    cc5e:	f7ff fdbe 	bl	c7de <simple_strlen>
    cc62:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    cc64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc66:	2b00      	cmp	r3, #0
    cc68:	dd2e      	ble.n	ccc8 <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cc6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cc6e:	429a      	cmp	r2, r3
    cc70:	d22a      	bcs.n	ccc8 <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cc72:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cc74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc76:	1ad3      	subs	r3, r2, r3
    cc78:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cc7a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cc7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cc80:	4619      	mov	r1, r3
    cc82:	9803      	ldr	r0, [sp, #12]
    cc84:	f7ff fdc1 	bl	c80a <padbuffer>
    cc88:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cc8a:	9b03      	ldr	r3, [sp, #12]
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	d001      	beq.n	cc94 <am_util_stdio_vsprintf+0x248>
    cc90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc92:	e000      	b.n	cc96 <am_util_stdio_vsprintf+0x24a>
    cc94:	2300      	movs	r3, #0
    cc96:	9a03      	ldr	r2, [sp, #12]
    cc98:	4413      	add	r3, r2
    cc9a:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cc9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cca0:	4413      	add	r3, r2
    cca2:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cca4:	2300      	movs	r3, #0
    cca6:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    cca8:	e00e      	b.n	ccc8 <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    ccaa:	9b03      	ldr	r3, [sp, #12]
    ccac:	2b00      	cmp	r3, #0
    ccae:	d005      	beq.n	ccbc <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    ccb0:	9b03      	ldr	r3, [sp, #12]
    ccb2:	1c5a      	adds	r2, r3, #1
    ccb4:	9203      	str	r2, [sp, #12]
    ccb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ccb8:	7812      	ldrb	r2, [r2, #0]
    ccba:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    ccbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ccbe:	3301      	adds	r3, #1
    ccc0:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    ccc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ccc4:	3301      	adds	r3, #1
    ccc6:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    ccc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ccca:	781b      	ldrb	r3, [r3, #0]
    cccc:	2b00      	cmp	r3, #0
    ccce:	d1ec      	bne.n	ccaa <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    ccd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ccd2:	2b00      	cmp	r3, #0
    ccd4:	f000 81a9 	beq.w	d02a <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    ccd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ccda:	425b      	negs	r3, r3
    ccdc:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    ccde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cce2:	429a      	cmp	r2, r3
    cce4:	f080 81a1 	bcs.w	d02a <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cce8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ccea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccec:	1ad3      	subs	r3, r2, r3
    ccee:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ccf0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ccf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ccf6:	4619      	mov	r1, r3
    ccf8:	9803      	ldr	r0, [sp, #12]
    ccfa:	f7ff fd86 	bl	c80a <padbuffer>
    ccfe:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    cd00:	9b03      	ldr	r3, [sp, #12]
    cd02:	2b00      	cmp	r3, #0
    cd04:	d001      	beq.n	cd0a <am_util_stdio_vsprintf+0x2be>
    cd06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd08:	e000      	b.n	cd0c <am_util_stdio_vsprintf+0x2c0>
    cd0a:	2300      	movs	r3, #0
    cd0c:	9a03      	ldr	r2, [sp, #12]
    cd0e:	4413      	add	r3, r2
    cd10:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    cd12:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd14:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cd16:	4413      	add	r3, r2
    cd18:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    cd1a:	2300      	movs	r3, #0
    cd1c:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    cd1e:	e184      	b.n	d02a <am_util_stdio_vsprintf+0x5de>
    cd20:	10001138 	.word	0x10001138

            case 'x':
                bLower = true;
    cd24:	2301      	movs	r3, #1
    cd26:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd2a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cd2e:	2b00      	cmp	r3, #0
    cd30:	d009      	beq.n	cd46 <am_util_stdio_vsprintf+0x2fa>
    cd32:	9b01      	ldr	r3, [sp, #4]
    cd34:	3307      	adds	r3, #7
    cd36:	f023 0307 	bic.w	r3, r3, #7
    cd3a:	f103 0208 	add.w	r2, r3, #8
    cd3e:	9201      	str	r2, [sp, #4]
    cd40:	e9d3 4500 	ldrd	r4, r5, [r3]
    cd44:	e006      	b.n	cd54 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    cd46:	9b01      	ldr	r3, [sp, #4]
    cd48:	1d1a      	adds	r2, r3, #4
    cd4a:	9201      	str	r2, [sp, #4]
    cd4c:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd4e:	2200      	movs	r2, #0
    cd50:	461c      	mov	r4, r3
    cd52:	4615      	mov	r5, r2
    cd54:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    cd58:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd5a:	2b00      	cmp	r3, #0
    cd5c:	d01e      	beq.n	cd9c <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    cd5e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cd62:	f7ff fc2f 	bl	c5c4 <ndigits_in_hex>
    cd66:	4602      	mov	r2, r0
    cd68:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd6a:	1a9b      	subs	r3, r3, r2
    cd6c:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cd6e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cd72:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd74:	4619      	mov	r1, r3
    cd76:	9803      	ldr	r0, [sp, #12]
    cd78:	f7ff fd47 	bl	c80a <padbuffer>
    cd7c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cd7e:	9b03      	ldr	r3, [sp, #12]
    cd80:	2b00      	cmp	r3, #0
    cd82:	d001      	beq.n	cd88 <am_util_stdio_vsprintf+0x33c>
    cd84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd86:	e000      	b.n	cd8a <am_util_stdio_vsprintf+0x33e>
    cd88:	2300      	movs	r3, #0
    cd8a:	9a03      	ldr	r2, [sp, #12]
    cd8c:	4413      	add	r3, r2
    cd8e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cd90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd92:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cd94:	4413      	add	r3, r2
    cd96:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cd98:	2300      	movs	r3, #0
    cd9a:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    cd9c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    cda0:	9a03      	ldr	r2, [sp, #12]
    cda2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cda6:	f7ff fcba 	bl	c71e <uint64_to_hexstr>
    cdaa:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cdac:	9b03      	ldr	r3, [sp, #12]
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d003      	beq.n	cdba <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    cdb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cdb4:	9a03      	ldr	r2, [sp, #12]
    cdb6:	4413      	add	r3, r2
    cdb8:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cdba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cdbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cdbe:	4413      	add	r3, r2
    cdc0:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cdc2:	e135      	b.n	d030 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cdc4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    cdc8:	2b00      	cmp	r3, #0
    cdca:	d009      	beq.n	cde0 <am_util_stdio_vsprintf+0x394>
    cdcc:	9b01      	ldr	r3, [sp, #4]
    cdce:	3307      	adds	r3, #7
    cdd0:	f023 0307 	bic.w	r3, r3, #7
    cdd4:	f103 0208 	add.w	r2, r3, #8
    cdd8:	9201      	str	r2, [sp, #4]
    cdda:	e9d3 6700 	ldrd	r6, r7, [r3]
    cdde:	e006      	b.n	cdee <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    cde0:	9b01      	ldr	r3, [sp, #4]
    cde2:	1d1a      	adds	r2, r3, #4
    cde4:	9201      	str	r2, [sp, #4]
    cde6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cde8:	2200      	movs	r2, #0
    cdea:	461e      	mov	r6, r3
    cdec:	4617      	mov	r7, r2
    cdee:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    cdf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cdf4:	2b00      	cmp	r3, #0
    cdf6:	d01e      	beq.n	ce36 <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    cdf8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cdfc:	f7ff fba8 	bl	c550 <ndigits_in_u64>
    ce00:	4602      	mov	r2, r0
    ce02:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce04:	1a9b      	subs	r3, r3, r2
    ce06:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    ce08:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    ce0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ce0e:	4619      	mov	r1, r3
    ce10:	9803      	ldr	r0, [sp, #12]
    ce12:	f7ff fcfa 	bl	c80a <padbuffer>
    ce16:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    ce18:	9b03      	ldr	r3, [sp, #12]
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	d001      	beq.n	ce22 <am_util_stdio_vsprintf+0x3d6>
    ce1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce20:	e000      	b.n	ce24 <am_util_stdio_vsprintf+0x3d8>
    ce22:	2300      	movs	r3, #0
    ce24:	9a03      	ldr	r2, [sp, #12]
    ce26:	4413      	add	r3, r2
    ce28:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    ce2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce2e:	4413      	add	r3, r2
    ce30:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    ce32:	2300      	movs	r3, #0
    ce34:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    ce36:	9a03      	ldr	r2, [sp, #12]
    ce38:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ce3c:	f7ff fc2a 	bl	c694 <uint64_to_str>
    ce40:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    ce42:	9b03      	ldr	r3, [sp, #12]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d003      	beq.n	ce50 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    ce48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce4a:	9a03      	ldr	r2, [sp, #12]
    ce4c:	4413      	add	r3, r2
    ce4e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    ce50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce52:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce54:	4413      	add	r3, r2
    ce56:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    ce58:	e0ea      	b.n	d030 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ce5a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d009      	beq.n	ce76 <am_util_stdio_vsprintf+0x42a>
    ce62:	9b01      	ldr	r3, [sp, #4]
    ce64:	3307      	adds	r3, #7
    ce66:	f023 0307 	bic.w	r3, r3, #7
    ce6a:	f103 0208 	add.w	r2, r3, #8
    ce6e:	9201      	str	r2, [sp, #4]
    ce70:	e9d3 8900 	ldrd	r8, r9, [r3]
    ce74:	e006      	b.n	ce84 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    ce76:	9b01      	ldr	r3, [sp, #4]
    ce78:	1d1a      	adds	r2, r3, #4
    ce7a:	9201      	str	r2, [sp, #4]
    ce7c:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    ce7e:	17da      	asrs	r2, r3, #31
    ce80:	4698      	mov	r8, r3
    ce82:	4691      	mov	r9, r2
    ce84:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    ce88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ce8c:	2b00      	cmp	r3, #0
    ce8e:	da0c      	bge.n	ceaa <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    ce90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ce94:	2100      	movs	r1, #0
    ce96:	f1d2 0a00 	rsbs	sl, r2, #0
    ce9a:	eb61 0b03 	sbc.w	fp, r1, r3
    ce9e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    cea2:	2301      	movs	r3, #1
    cea4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    cea8:	e006      	b.n	ceb8 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    ceaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ceae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    ceb2:	2300      	movs	r3, #0
    ceb4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    ceb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ceba:	2b00      	cmp	r3, #0
    cebc:	d04a      	beq.n	cf54 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    cebe:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cec2:	4610      	mov	r0, r2
    cec4:	4619      	mov	r1, r3
    cec6:	f7ff fb63 	bl	c590 <ndigits_in_i64>
    ceca:	4602      	mov	r2, r0
    cecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cece:	1a9b      	subs	r3, r3, r2
    ced0:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    ced2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    ced6:	2b00      	cmp	r3, #0
    ced8:	d011      	beq.n	cefe <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    ceda:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cedc:	3b01      	subs	r3, #1
    cede:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    cee0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cee4:	2b30      	cmp	r3, #48	; 0x30
    cee6:	d10a      	bne.n	cefe <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    cee8:	9b03      	ldr	r3, [sp, #12]
    ceea:	2b00      	cmp	r3, #0
    ceec:	d004      	beq.n	cef8 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    ceee:	9b03      	ldr	r3, [sp, #12]
    cef0:	1c5a      	adds	r2, r3, #1
    cef2:	9203      	str	r2, [sp, #12]
    cef4:	222d      	movs	r2, #45	; 0x2d
    cef6:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    cef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cefa:	3301      	adds	r3, #1
    cefc:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cefe:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf02:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf04:	4619      	mov	r1, r3
    cf06:	9803      	ldr	r0, [sp, #12]
    cf08:	f7ff fc7f 	bl	c80a <padbuffer>
    cf0c:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    cf0e:	9b03      	ldr	r3, [sp, #12]
    cf10:	2b00      	cmp	r3, #0
    cf12:	d001      	beq.n	cf18 <am_util_stdio_vsprintf+0x4cc>
    cf14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf16:	e000      	b.n	cf1a <am_util_stdio_vsprintf+0x4ce>
    cf18:	2300      	movs	r3, #0
    cf1a:	9a03      	ldr	r2, [sp, #12]
    cf1c:	4413      	add	r3, r2
    cf1e:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    cf20:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf22:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf24:	4413      	add	r3, r2
    cf26:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    cf28:	2300      	movs	r3, #0
    cf2a:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cf2c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cf30:	2b00      	cmp	r3, #0
    cf32:	d01e      	beq.n	cf72 <am_util_stdio_vsprintf+0x526>
    cf34:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    cf38:	2b20      	cmp	r3, #32
    cf3a:	d11a      	bne.n	cf72 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    cf3c:	9b03      	ldr	r3, [sp, #12]
    cf3e:	2b00      	cmp	r3, #0
    cf40:	d004      	beq.n	cf4c <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    cf42:	9b03      	ldr	r3, [sp, #12]
    cf44:	1c5a      	adds	r2, r3, #1
    cf46:	9203      	str	r2, [sp, #12]
    cf48:	222d      	movs	r2, #45	; 0x2d
    cf4a:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    cf4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf4e:	3301      	adds	r3, #1
    cf50:	9311      	str	r3, [sp, #68]	; 0x44
    cf52:	e00e      	b.n	cf72 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    cf54:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    cf58:	2b00      	cmp	r3, #0
    cf5a:	d00a      	beq.n	cf72 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    cf5c:	9b03      	ldr	r3, [sp, #12]
    cf5e:	2b00      	cmp	r3, #0
    cf60:	d004      	beq.n	cf6c <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    cf62:	9b03      	ldr	r3, [sp, #12]
    cf64:	1c5a      	adds	r2, r3, #1
    cf66:	9203      	str	r2, [sp, #12]
    cf68:	222d      	movs	r2, #45	; 0x2d
    cf6a:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    cf6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf6e:	3301      	adds	r3, #1
    cf70:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    cf72:	9a03      	ldr	r2, [sp, #12]
    cf74:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    cf78:	f7ff fb8c 	bl	c694 <uint64_to_str>
    cf7c:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    cf7e:	9b03      	ldr	r3, [sp, #12]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d003      	beq.n	cf8c <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    cf84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf86:	9a03      	ldr	r2, [sp, #12]
    cf88:	4413      	add	r3, r2
    cf8a:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    cf8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf90:	4413      	add	r3, r2
    cf92:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cf94:	e04c      	b.n	d030 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    cf96:	9b03      	ldr	r3, [sp, #12]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d048      	beq.n	d02e <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    cf9c:	9b01      	ldr	r3, [sp, #4]
    cf9e:	3307      	adds	r3, #7
    cfa0:	f023 0307 	bic.w	r3, r3, #7
    cfa4:	f103 0208 	add.w	r2, r3, #8
    cfa8:	9201      	str	r2, [sp, #4]
    cfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfae:	4610      	mov	r0, r2
    cfb0:	4619      	mov	r1, r3
    cfb2:	f7ff f8a5 	bl	c100 <__aeabi_d2f>
    cfb6:	4603      	mov	r3, r0
    cfb8:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    cfba:	9b03      	ldr	r3, [sp, #12]
    cfbc:	2214      	movs	r2, #20
    cfbe:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    cfc0:	990e      	ldr	r1, [sp, #56]	; 0x38
    cfc2:	9803      	ldr	r0, [sp, #12]
    cfc4:	ed9d 0a06 	vldr	s0, [sp, #24]
    cfc8:	f7ff fc42 	bl	c850 <ftoa>
    cfcc:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    cfce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	da14      	bge.n	cffe <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    cfd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
    cfda:	d102      	bne.n	cfe2 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    cfdc:	4b1e      	ldr	r3, [pc, #120]	; (d058 <am_util_stdio_vsprintf+0x60c>)
    cfde:	930c      	str	r3, [sp, #48]	; 0x30
    cfe0:	e008      	b.n	cff4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    cfe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfe4:	f113 0f02 	cmn.w	r3, #2
    cfe8:	d102      	bne.n	cff0 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    cfea:	4b1c      	ldr	r3, [pc, #112]	; (d05c <am_util_stdio_vsprintf+0x610>)
    cfec:	930c      	str	r3, [sp, #48]	; 0x30
    cfee:	e001      	b.n	cff4 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    cff0:	4b1b      	ldr	r3, [pc, #108]	; (d060 <am_util_stdio_vsprintf+0x614>)
    cff2:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    cff4:	9b03      	ldr	r3, [sp, #12]
    cff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cff8:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    cffa:	2303      	movs	r3, #3
    cffc:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    cffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d000:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d002:	4413      	add	r3, r2
    d004:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d008:	9a03      	ldr	r2, [sp, #12]
    d00a:	4413      	add	r3, r2
    d00c:	9303      	str	r3, [sp, #12]
                }
                break;
    d00e:	e00e      	b.n	d02e <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d010:	9b03      	ldr	r3, [sp, #12]
    d012:	2b00      	cmp	r3, #0
    d014:	d005      	beq.n	d022 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d016:	9b03      	ldr	r3, [sp, #12]
    d018:	1c5a      	adds	r2, r3, #1
    d01a:	9203      	str	r2, [sp, #12]
    d01c:	9a02      	ldr	r2, [sp, #8]
    d01e:	7812      	ldrb	r2, [r2, #0]
    d020:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d022:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d024:	3301      	adds	r3, #1
    d026:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d028:	e002      	b.n	d030 <am_util_stdio_vsprintf+0x5e4>
                break;
    d02a:	bf00      	nop
    d02c:	e000      	b.n	d030 <am_util_stdio_vsprintf+0x5e4>
                break;
    d02e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d030:	9b02      	ldr	r3, [sp, #8]
    d032:	3301      	adds	r3, #1
    d034:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d036:	9b02      	ldr	r3, [sp, #8]
    d038:	781b      	ldrb	r3, [r3, #0]
    d03a:	2b00      	cmp	r3, #0
    d03c:	f47f ad11 	bne.w	ca62 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d040:	9b03      	ldr	r3, [sp, #12]
    d042:	2b00      	cmp	r3, #0
    d044:	d002      	beq.n	d04c <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d046:	9b03      	ldr	r3, [sp, #12]
    d048:	2200      	movs	r2, #0
    d04a:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d04c:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d04e:	4618      	mov	r0, r3
    d050:	b017      	add	sp, #92	; 0x5c
    d052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d056:	bf00      	nop
    d058:	00302e30 	.word	0x00302e30
    d05c:	00232e23 	.word	0x00232e23
    d060:	003f2e3f 	.word	0x003f2e3f

0000d064 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d064:	b40f      	push	{r0, r1, r2, r3}
    d066:	b500      	push	{lr}
    d068:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d06a:	4b0c      	ldr	r3, [pc, #48]	; (d09c <am_util_stdio_printf+0x38>)
    d06c:	681b      	ldr	r3, [r3, #0]
    d06e:	2b00      	cmp	r3, #0
    d070:	d101      	bne.n	d076 <am_util_stdio_printf+0x12>
    {
        return 0;
    d072:	2300      	movs	r3, #0
    d074:	e00c      	b.n	d090 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d076:	ab05      	add	r3, sp, #20
    d078:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d07a:	9a00      	ldr	r2, [sp, #0]
    d07c:	9904      	ldr	r1, [sp, #16]
    d07e:	4808      	ldr	r0, [pc, #32]	; (d0a0 <am_util_stdio_printf+0x3c>)
    d080:	f7ff fce4 	bl	ca4c <am_util_stdio_vsprintf>
    d084:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d086:	4b05      	ldr	r3, [pc, #20]	; (d09c <am_util_stdio_printf+0x38>)
    d088:	681b      	ldr	r3, [r3, #0]
    d08a:	4805      	ldr	r0, [pc, #20]	; (d0a0 <am_util_stdio_printf+0x3c>)
    d08c:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d08e:	9b01      	ldr	r3, [sp, #4]
}
    d090:	4618      	mov	r0, r3
    d092:	b003      	add	sp, #12
    d094:	f85d eb04 	ldr.w	lr, [sp], #4
    d098:	b004      	add	sp, #16
    d09a:	4770      	bx	lr
    d09c:	10001034 	.word	0x10001034
    d0a0:	10001038 	.word	0x10001038

0000d0a4 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d0a4:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d0a6:	4802      	ldr	r0, [pc, #8]	; (d0b0 <am_util_stdio_terminal_clear+0xc>)
    d0a8:	f7ff ffdc 	bl	d064 <am_util_stdio_printf>
}
    d0ac:	bf00      	nop
    d0ae:	bd08      	pop	{r3, pc}
    d0b0:	0000e22c 	.word	0x0000e22c

0000d0b4 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d0b4:	4811      	ldr	r0, [pc, #68]	; (d0fc <zero_loop+0x12>)
    d0b6:	4912      	ldr	r1, [pc, #72]	; (d100 <zero_loop+0x16>)
    d0b8:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d0ba:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d0be:	4811      	ldr	r0, [pc, #68]	; (d104 <zero_loop+0x1a>)
    d0c0:	6801      	ldr	r1, [r0, #0]
    d0c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d0c6:	6001      	str	r1, [r0, #0]
    d0c8:	f3bf 8f4f 	dsb	sy
    d0cc:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d0d0:	480d      	ldr	r0, [pc, #52]	; (d108 <zero_loop+0x1e>)
    d0d2:	490e      	ldr	r1, [pc, #56]	; (d10c <zero_loop+0x22>)
    d0d4:	4a0e      	ldr	r2, [pc, #56]	; (d110 <zero_loop+0x26>)

0000d0d6 <copy_loop>:
    d0d6:	f850 3b04 	ldr.w	r3, [r0], #4
    d0da:	f841 3b04 	str.w	r3, [r1], #4
    d0de:	4291      	cmp	r1, r2
    d0e0:	dbf9      	blt.n	d0d6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d0e2:	480c      	ldr	r0, [pc, #48]	; (d114 <zero_loop+0x2a>)
    d0e4:	490c      	ldr	r1, [pc, #48]	; (d118 <zero_loop+0x2e>)
    d0e6:	f04f 0200 	mov.w	r2, #0

0000d0ea <zero_loop>:
    d0ea:	4288      	cmp	r0, r1
    d0ec:	bfb8      	it	lt
    d0ee:	f840 2b04 	strlt.w	r2, [r0], #4
    d0f2:	dbfa      	blt.n	d0ea <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d0f4:	f7ff f854 	bl	c1a0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d0f8:	be00      	bkpt	0x0000
}
    d0fa:	bf00      	nop
    d0fc:	e000ed08 	.word	0xe000ed08
    d100:	0000c000 	.word	0x0000c000
    d104:	e000ed88 	.word	0xe000ed88
    d108:	0000e4e8 	.word	0x0000e4e8
    d10c:	10001000 	.word	0x10001000
    d110:	10001034 	.word	0x10001034
    d114:	10001034 	.word	0x10001034
    d118:	1000114c 	.word	0x1000114c

0000d11c <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d11c:	e7fe      	b.n	d11c <NMI_Handler>

0000d11e <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d11e:	e7fe      	b.n	d11e <BusFault_Handler>

0000d120 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d120:	e7fe      	b.n	d120 <DebugMon_Handler>
	...

0000d124 <am_bsp_low_power_init>:
    d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d126:	f000 fe2f 	bl	dd88 <am_hal_pwrctrl_low_power_init>
    d12a:	f000 ff0b 	bl	df44 <am_hal_rtc_osc_disable>
    d12e:	4b0b      	ldr	r3, [pc, #44]	; (d15c <am_bsp_low_power_init+0x38>)
    d130:	4f0b      	ldr	r7, [pc, #44]	; (d160 <am_bsp_low_power_init+0x3c>)
    d132:	681e      	ldr	r6, [r3, #0]
    d134:	2400      	movs	r4, #0
    d136:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d13a:	4631      	mov	r1, r6
    d13c:	4628      	mov	r0, r5
    d13e:	f000 fb19 	bl	d774 <am_hal_gpio_pinconfig>
    d142:	2103      	movs	r1, #3
    d144:	4628      	mov	r0, r5
    d146:	f000 fc4b 	bl	d9e0 <am_hal_gpio_state_write>
    d14a:	3401      	adds	r4, #1
    d14c:	2100      	movs	r1, #0
    d14e:	4628      	mov	r0, r5
    d150:	f000 fc46 	bl	d9e0 <am_hal_gpio_state_write>
    d154:	2c05      	cmp	r4, #5
    d156:	d1ee      	bne.n	d136 <am_bsp_low_power_init+0x12>
    d158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d15a:	bf00      	nop
    d15c:	0000e24c 	.word	0x0000e24c
    d160:	10001000 	.word	0x10001000

0000d164 <am_bsp_debug_printf_disable>:
    d164:	b538      	push	{r3, r4, r5, lr}
    d166:	4b17      	ldr	r3, [pc, #92]	; (d1c4 <am_bsp_debug_printf_disable+0x60>)
    d168:	681c      	ldr	r4, [r3, #0]
    d16a:	2c01      	cmp	r4, #1
    d16c:	d002      	beq.n	d174 <am_bsp_debug_printf_disable+0x10>
    d16e:	2c02      	cmp	r4, #2
    d170:	d00c      	beq.n	d18c <am_bsp_debug_printf_disable+0x28>
    d172:	bd38      	pop	{r3, r4, r5, pc}
    d174:	f000 fca4 	bl	dac0 <am_hal_itm_disable>
    d178:	2000      	movs	r0, #0
    d17a:	f7ff f8eb 	bl	c354 <am_util_stdio_printf_init>
    d17e:	4b12      	ldr	r3, [pc, #72]	; (d1c8 <am_bsp_debug_printf_disable+0x64>)
    d180:	2029      	movs	r0, #41	; 0x29
    d182:	6819      	ldr	r1, [r3, #0]
    d184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d188:	f000 baf4 	b.w	d774 <am_hal_gpio_pinconfig>
    d18c:	4d0f      	ldr	r5, [pc, #60]	; (d1cc <am_bsp_debug_printf_disable+0x68>)
    d18e:	6828      	ldr	r0, [r5, #0]
    d190:	f000 fff6 	bl	e180 <am_hal_uart_tx_flush>
    d194:	2000      	movs	r0, #0
    d196:	f7ff f8dd 	bl	c354 <am_util_stdio_printf_init>
    d19a:	4621      	mov	r1, r4
    d19c:	2200      	movs	r2, #0
    d19e:	6828      	ldr	r0, [r5, #0]
    d1a0:	f000 ff76 	bl	e090 <am_hal_uart_power_control>
    d1a4:	6828      	ldr	r0, [r5, #0]
    d1a6:	f000 ff5f 	bl	e068 <am_hal_uart_deinitialize>
    d1aa:	4b07      	ldr	r3, [pc, #28]	; (d1c8 <am_bsp_debug_printf_disable+0x64>)
    d1ac:	681c      	ldr	r4, [r3, #0]
    d1ae:	2016      	movs	r0, #22
    d1b0:	4621      	mov	r1, r4
    d1b2:	f000 fadf 	bl	d774 <am_hal_gpio_pinconfig>
    d1b6:	4621      	mov	r1, r4
    d1b8:	2017      	movs	r0, #23
    d1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d1be:	f000 bad9 	b.w	d774 <am_hal_gpio_pinconfig>
    d1c2:	bf00      	nop
    d1c4:	10001140 	.word	0x10001140
    d1c8:	0000e248 	.word	0x0000e248
    d1cc:	1000113c 	.word	0x1000113c

0000d1d0 <am_bsp_itm_printf_enable>:
    d1d0:	b500      	push	{lr}
    d1d2:	4b0b      	ldr	r3, [pc, #44]	; (d200 <am_bsp_itm_printf_enable+0x30>)
    d1d4:	b087      	sub	sp, #28
    d1d6:	2201      	movs	r2, #1
    d1d8:	601a      	str	r2, [r3, #0]
    d1da:	f000 fc4d 	bl	da78 <am_hal_itm_enable>
    d1de:	4b09      	ldr	r3, [pc, #36]	; (d204 <am_bsp_itm_printf_enable+0x34>)
    d1e0:	9301      	str	r3, [sp, #4]
    d1e2:	a801      	add	r0, sp, #4
    d1e4:	f000 fef0 	bl	dfc8 <am_hal_tpiu_enable>
    d1e8:	4b07      	ldr	r3, [pc, #28]	; (d208 <am_bsp_itm_printf_enable+0x38>)
    d1ea:	2029      	movs	r0, #41	; 0x29
    d1ec:	6819      	ldr	r1, [r3, #0]
    d1ee:	f000 fac1 	bl	d774 <am_hal_gpio_pinconfig>
    d1f2:	4806      	ldr	r0, [pc, #24]	; (d20c <am_bsp_itm_printf_enable+0x3c>)
    d1f4:	f7ff f8ae 	bl	c354 <am_util_stdio_printf_init>
    d1f8:	b007      	add	sp, #28
    d1fa:	f85d fb04 	ldr.w	pc, [sp], #4
    d1fe:	bf00      	nop
    d200:	10001140 	.word	0x10001140
    d204:	000f4240 	.word	0x000f4240
    d208:	0000e240 	.word	0x0000e240
    d20c:	0000db75 	.word	0x0000db75

0000d210 <am_hal_cachectrl_config>:
    d210:	b530      	push	{r4, r5, lr}
    d212:	b083      	sub	sp, #12
    d214:	4604      	mov	r4, r0
    d216:	f000 fc27 	bl	da68 <am_hal_interrupt_master_disable>
    d21a:	4d0e      	ldr	r5, [pc, #56]	; (d254 <am_hal_cachectrl_config+0x44>)
    d21c:	9001      	str	r0, [sp, #4]
    d21e:	682b      	ldr	r3, [r5, #0]
    d220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d224:	602b      	str	r3, [r5, #0]
    d226:	9801      	ldr	r0, [sp, #4]
    d228:	f000 fc22 	bl	da70 <am_hal_interrupt_master_set>
    d22c:	7863      	ldrb	r3, [r4, #1]
    d22e:	7822      	ldrb	r2, [r4, #0]
    d230:	78a1      	ldrb	r1, [r4, #2]
    d232:	021b      	lsls	r3, r3, #8
    d234:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d238:	0112      	lsls	r2, r2, #4
    d23a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d23e:	b2d2      	uxtb	r2, r2
    d240:	4313      	orrs	r3, r2
    d242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d24a:	2000      	movs	r0, #0
    d24c:	602b      	str	r3, [r5, #0]
    d24e:	b003      	add	sp, #12
    d250:	bd30      	pop	{r4, r5, pc}
    d252:	bf00      	nop
    d254:	40018000 	.word	0x40018000

0000d258 <am_hal_cachectrl_enable>:
    d258:	4a03      	ldr	r2, [pc, #12]	; (d268 <am_hal_cachectrl_enable+0x10>)
    d25a:	6813      	ldr	r3, [r2, #0]
    d25c:	f043 0301 	orr.w	r3, r3, #1
    d260:	2000      	movs	r0, #0
    d262:	6013      	str	r3, [r2, #0]
    d264:	4770      	bx	lr
    d266:	bf00      	nop
    d268:	40018000 	.word	0x40018000

0000d26c <am_hal_cachectrl_control>:
    d26c:	b510      	push	{r4, lr}
    d26e:	3801      	subs	r0, #1
    d270:	b08e      	sub	sp, #56	; 0x38
    d272:	2810      	cmp	r0, #16
    d274:	f200 815e 	bhi.w	d534 <am_hal_cachectrl_control+0x2c8>
    d278:	e8df f010 	tbh	[pc, r0, lsl #1]
    d27c:	00360018 	.word	0x00360018
    d280:	0040003d 	.word	0x0040003d
    d284:	00450043 	.word	0x00450043
    d288:	0011001a 	.word	0x0011001a
    d28c:	00540047 	.word	0x00540047
    d290:	009a0061 	.word	0x009a0061
    d294:	010c00d3 	.word	0x010c00d3
    d298:	013f0126 	.word	0x013f0126
    d29c:	001d      	.short	0x001d
    d29e:	f44f 7300 	mov.w	r3, #512	; 0x200
    d2a2:	4aac      	ldr	r2, [pc, #688]	; (d554 <am_hal_cachectrl_control+0x2e8>)
    d2a4:	2000      	movs	r0, #0
    d2a6:	6093      	str	r3, [r2, #8]
    d2a8:	b00e      	add	sp, #56	; 0x38
    d2aa:	bd10      	pop	{r4, pc}
    d2ac:	2301      	movs	r3, #1
    d2ae:	e7f8      	b.n	d2a2 <am_hal_cachectrl_control+0x36>
    d2b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d2b4:	e7f5      	b.n	d2a2 <am_hal_cachectrl_control+0x36>
    d2b6:	2900      	cmp	r1, #0
    d2b8:	f000 813c 	beq.w	d534 <am_hal_cachectrl_control+0x2c8>
    d2bc:	684a      	ldr	r2, [r1, #4]
    d2be:	48a6      	ldr	r0, [pc, #664]	; (d558 <am_hal_cachectrl_control+0x2ec>)
    d2c0:	4202      	tst	r2, r0
    d2c2:	f040 8137 	bne.w	d534 <am_hal_cachectrl_control+0x2c8>
    d2c6:	688b      	ldr	r3, [r1, #8]
    d2c8:	4018      	ands	r0, r3
    d2ca:	f040 8133 	bne.w	d534 <am_hal_cachectrl_control+0x2c8>
    d2ce:	780c      	ldrb	r4, [r1, #0]
    d2d0:	2c00      	cmp	r4, #0
    d2d2:	f040 8133 	bne.w	d53c <am_hal_cachectrl_control+0x2d0>
    d2d6:	4c9f      	ldr	r4, [pc, #636]	; (d554 <am_hal_cachectrl_control+0x2e8>)
    d2d8:	7849      	ldrb	r1, [r1, #1]
    d2da:	6122      	str	r2, [r4, #16]
    d2dc:	6163      	str	r3, [r4, #20]
    d2de:	6823      	ldr	r3, [r4, #0]
    d2e0:	f361 0382 	bfi	r3, r1, #2, #1
    d2e4:	6023      	str	r3, [r4, #0]
    d2e6:	e7df      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d2e8:	4b9a      	ldr	r3, [pc, #616]	; (d554 <am_hal_cachectrl_control+0x2e8>)
    d2ea:	681b      	ldr	r3, [r3, #0]
    d2ec:	01db      	lsls	r3, r3, #7
    d2ee:	f140 811f 	bpl.w	d530 <am_hal_cachectrl_control+0x2c4>
    d2f2:	2302      	movs	r3, #2
    d2f4:	e7d5      	b.n	d2a2 <am_hal_cachectrl_control+0x36>
    d2f6:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d2fa:	e7d2      	b.n	d2a2 <am_hal_cachectrl_control+0x36>
    d2fc:	f44f 7308 	mov.w	r3, #544	; 0x220
    d300:	e7cf      	b.n	d2a2 <am_hal_cachectrl_control+0x36>
    d302:	2340      	movs	r3, #64	; 0x40
    d304:	e7cd      	b.n	d2a2 <am_hal_cachectrl_control+0x36>
    d306:	2320      	movs	r3, #32
    d308:	e7cb      	b.n	d2a2 <am_hal_cachectrl_control+0x36>
    d30a:	f000 fbad 	bl	da68 <am_hal_interrupt_master_disable>
    d30e:	4a91      	ldr	r2, [pc, #580]	; (d554 <am_hal_cachectrl_control+0x2e8>)
    d310:	9000      	str	r0, [sp, #0]
    d312:	6813      	ldr	r3, [r2, #0]
    d314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d318:	6013      	str	r3, [r2, #0]
    d31a:	9800      	ldr	r0, [sp, #0]
    d31c:	f000 fba8 	bl	da70 <am_hal_interrupt_master_set>
    d320:	2000      	movs	r0, #0
    d322:	e7c1      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d324:	f000 fba0 	bl	da68 <am_hal_interrupt_master_disable>
    d328:	4a8a      	ldr	r2, [pc, #552]	; (d554 <am_hal_cachectrl_control+0x2e8>)
    d32a:	9001      	str	r0, [sp, #4]
    d32c:	6813      	ldr	r3, [r2, #0]
    d32e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d332:	6013      	str	r3, [r2, #0]
    d334:	9801      	ldr	r0, [sp, #4]
    d336:	f000 fb9b 	bl	da70 <am_hal_interrupt_master_set>
    d33a:	2000      	movs	r0, #0
    d33c:	e7b4      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d33e:	f000 fb93 	bl	da68 <am_hal_interrupt_master_disable>
    d342:	4603      	mov	r3, r0
    d344:	4885      	ldr	r0, [pc, #532]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d346:	9302      	str	r3, [sp, #8]
    d348:	f000 fa0a 	bl	d760 <am_hal_flash_load_ui32>
    d34c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d350:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d354:	4881      	ldr	r0, [pc, #516]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d356:	f000 fa07 	bl	d768 <am_hal_flash_store_ui32>
    d35a:	9802      	ldr	r0, [sp, #8]
    d35c:	f000 fb88 	bl	da70 <am_hal_interrupt_master_set>
    d360:	f000 fb82 	bl	da68 <am_hal_interrupt_master_disable>
    d364:	4603      	mov	r3, r0
    d366:	487d      	ldr	r0, [pc, #500]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d368:	9303      	str	r3, [sp, #12]
    d36a:	f000 f9f9 	bl	d760 <am_hal_flash_load_ui32>
    d36e:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d372:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d376:	4879      	ldr	r0, [pc, #484]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d378:	f000 f9f6 	bl	d768 <am_hal_flash_store_ui32>
    d37c:	9803      	ldr	r0, [sp, #12]
    d37e:	f000 fb77 	bl	da70 <am_hal_interrupt_master_set>
    d382:	f000 fb71 	bl	da68 <am_hal_interrupt_master_disable>
    d386:	4603      	mov	r3, r0
    d388:	4874      	ldr	r0, [pc, #464]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d38a:	9304      	str	r3, [sp, #16]
    d38c:	f000 f9e8 	bl	d760 <am_hal_flash_load_ui32>
    d390:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d394:	f020 000f 	bic.w	r0, r0, #15
    d398:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d39c:	f041 0103 	orr.w	r1, r1, #3
    d3a0:	486e      	ldr	r0, [pc, #440]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d3a2:	f000 f9e1 	bl	d768 <am_hal_flash_store_ui32>
    d3a6:	9804      	ldr	r0, [sp, #16]
    d3a8:	f000 fb62 	bl	da70 <am_hal_interrupt_master_set>
    d3ac:	2000      	movs	r0, #0
    d3ae:	e77b      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d3b0:	f000 fb5a 	bl	da68 <am_hal_interrupt_master_disable>
    d3b4:	4603      	mov	r3, r0
    d3b6:	4869      	ldr	r0, [pc, #420]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d3b8:	9305      	str	r3, [sp, #20]
    d3ba:	f000 f9d1 	bl	d760 <am_hal_flash_load_ui32>
    d3be:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d3c2:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d3c6:	4865      	ldr	r0, [pc, #404]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d3c8:	f000 f9ce 	bl	d768 <am_hal_flash_store_ui32>
    d3cc:	9805      	ldr	r0, [sp, #20]
    d3ce:	f000 fb4f 	bl	da70 <am_hal_interrupt_master_set>
    d3d2:	f000 fb49 	bl	da68 <am_hal_interrupt_master_disable>
    d3d6:	4603      	mov	r3, r0
    d3d8:	4860      	ldr	r0, [pc, #384]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d3da:	9306      	str	r3, [sp, #24]
    d3dc:	f000 f9c0 	bl	d760 <am_hal_flash_load_ui32>
    d3e0:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d3e4:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d3e8:	485c      	ldr	r0, [pc, #368]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d3ea:	f000 f9bd 	bl	d768 <am_hal_flash_store_ui32>
    d3ee:	9806      	ldr	r0, [sp, #24]
    d3f0:	f000 fb3e 	bl	da70 <am_hal_interrupt_master_set>
    d3f4:	f000 fb38 	bl	da68 <am_hal_interrupt_master_disable>
    d3f8:	4603      	mov	r3, r0
    d3fa:	4858      	ldr	r0, [pc, #352]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d3fc:	9307      	str	r3, [sp, #28]
    d3fe:	f000 f9af 	bl	d760 <am_hal_flash_load_ui32>
    d402:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d406:	f020 000f 	bic.w	r0, r0, #15
    d40a:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d40e:	f041 0101 	orr.w	r1, r1, #1
    d412:	4852      	ldr	r0, [pc, #328]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d414:	f000 f9a8 	bl	d768 <am_hal_flash_store_ui32>
    d418:	9807      	ldr	r0, [sp, #28]
    d41a:	f000 fb29 	bl	da70 <am_hal_interrupt_master_set>
    d41e:	2000      	movs	r0, #0
    d420:	e742      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d422:	f000 fb21 	bl	da68 <am_hal_interrupt_master_disable>
    d426:	4603      	mov	r3, r0
    d428:	484c      	ldr	r0, [pc, #304]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d42a:	9308      	str	r3, [sp, #32]
    d42c:	f000 f998 	bl	d760 <am_hal_flash_load_ui32>
    d430:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d434:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d438:	4848      	ldr	r0, [pc, #288]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d43a:	f000 f995 	bl	d768 <am_hal_flash_store_ui32>
    d43e:	9808      	ldr	r0, [sp, #32]
    d440:	f000 fb16 	bl	da70 <am_hal_interrupt_master_set>
    d444:	f000 fb10 	bl	da68 <am_hal_interrupt_master_disable>
    d448:	4603      	mov	r3, r0
    d44a:	4844      	ldr	r0, [pc, #272]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d44c:	9309      	str	r3, [sp, #36]	; 0x24
    d44e:	f000 f987 	bl	d760 <am_hal_flash_load_ui32>
    d452:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d456:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d45a:	4840      	ldr	r0, [pc, #256]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d45c:	f000 f984 	bl	d768 <am_hal_flash_store_ui32>
    d460:	9809      	ldr	r0, [sp, #36]	; 0x24
    d462:	f000 fb05 	bl	da70 <am_hal_interrupt_master_set>
    d466:	f000 faff 	bl	da68 <am_hal_interrupt_master_disable>
    d46a:	4603      	mov	r3, r0
    d46c:	483b      	ldr	r0, [pc, #236]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d46e:	930a      	str	r3, [sp, #40]	; 0x28
    d470:	f000 f976 	bl	d760 <am_hal_flash_load_ui32>
    d474:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d478:	f020 000f 	bic.w	r0, r0, #15
    d47c:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d480:	f041 0101 	orr.w	r1, r1, #1
    d484:	4835      	ldr	r0, [pc, #212]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d486:	f000 f96f 	bl	d768 <am_hal_flash_store_ui32>
    d48a:	980a      	ldr	r0, [sp, #40]	; 0x28
    d48c:	f000 faf0 	bl	da70 <am_hal_interrupt_master_set>
    d490:	2000      	movs	r0, #0
    d492:	e709      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d494:	2900      	cmp	r1, #0
    d496:	d04d      	beq.n	d534 <am_hal_cachectrl_control+0x2c8>
    d498:	680c      	ldr	r4, [r1, #0]
    d49a:	2c03      	cmp	r4, #3
    d49c:	d84c      	bhi.n	d538 <am_hal_cachectrl_control+0x2cc>
    d49e:	f000 fae3 	bl	da68 <am_hal_interrupt_master_disable>
    d4a2:	4603      	mov	r3, r0
    d4a4:	482d      	ldr	r0, [pc, #180]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d4a6:	930b      	str	r3, [sp, #44]	; 0x2c
    d4a8:	f000 f95a 	bl	d760 <am_hal_flash_load_ui32>
    d4ac:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d4b0:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d4b4:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d4b8:	4828      	ldr	r0, [pc, #160]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d4ba:	f000 f955 	bl	d768 <am_hal_flash_store_ui32>
    d4be:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d4c0:	f000 fad6 	bl	da70 <am_hal_interrupt_master_set>
    d4c4:	2000      	movs	r0, #0
    d4c6:	e6ef      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d4c8:	b3a1      	cbz	r1, d534 <am_hal_cachectrl_control+0x2c8>
    d4ca:	680c      	ldr	r4, [r1, #0]
    d4cc:	2c07      	cmp	r4, #7
    d4ce:	d833      	bhi.n	d538 <am_hal_cachectrl_control+0x2cc>
    d4d0:	f000 faca 	bl	da68 <am_hal_interrupt_master_disable>
    d4d4:	4603      	mov	r3, r0
    d4d6:	4821      	ldr	r0, [pc, #132]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d4d8:	930c      	str	r3, [sp, #48]	; 0x30
    d4da:	f000 f941 	bl	d760 <am_hal_flash_load_ui32>
    d4de:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d4e2:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d4e6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d4ea:	481c      	ldr	r0, [pc, #112]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d4ec:	f000 f93c 	bl	d768 <am_hal_flash_store_ui32>
    d4f0:	980c      	ldr	r0, [sp, #48]	; 0x30
    d4f2:	f000 fabd 	bl	da70 <am_hal_interrupt_master_set>
    d4f6:	2000      	movs	r0, #0
    d4f8:	e6d6      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d4fa:	b1d9      	cbz	r1, d534 <am_hal_cachectrl_control+0x2c8>
    d4fc:	680c      	ldr	r4, [r1, #0]
    d4fe:	2c0f      	cmp	r4, #15
    d500:	d81a      	bhi.n	d538 <am_hal_cachectrl_control+0x2cc>
    d502:	f000 fab1 	bl	da68 <am_hal_interrupt_master_disable>
    d506:	4603      	mov	r3, r0
    d508:	4814      	ldr	r0, [pc, #80]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d50a:	930d      	str	r3, [sp, #52]	; 0x34
    d50c:	f000 f928 	bl	d760 <am_hal_flash_load_ui32>
    d510:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d514:	f020 000f 	bic.w	r0, r0, #15
    d518:	ea40 0104 	orr.w	r1, r0, r4
    d51c:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d520:	480e      	ldr	r0, [pc, #56]	; (d55c <am_hal_cachectrl_control+0x2f0>)
    d522:	f000 f921 	bl	d768 <am_hal_flash_store_ui32>
    d526:	980d      	ldr	r0, [sp, #52]	; 0x34
    d528:	f000 faa2 	bl	da70 <am_hal_interrupt_master_set>
    d52c:	2000      	movs	r0, #0
    d52e:	e6bb      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d530:	2007      	movs	r0, #7
    d532:	e6b9      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d534:	2006      	movs	r0, #6
    d536:	e6b7      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d538:	2001      	movs	r0, #1
    d53a:	e6b5      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d53c:	2c01      	cmp	r4, #1
    d53e:	d1f9      	bne.n	d534 <am_hal_cachectrl_control+0x2c8>
    d540:	4c04      	ldr	r4, [pc, #16]	; (d554 <am_hal_cachectrl_control+0x2e8>)
    d542:	7849      	ldrb	r1, [r1, #1]
    d544:	61a2      	str	r2, [r4, #24]
    d546:	61e3      	str	r3, [r4, #28]
    d548:	6823      	ldr	r3, [r4, #0]
    d54a:	f361 03c3 	bfi	r3, r1, #3, #1
    d54e:	6023      	str	r3, [r4, #0]
    d550:	e6aa      	b.n	d2a8 <am_hal_cachectrl_control+0x3c>
    d552:	bf00      	nop
    d554:	40018000 	.word	0x40018000
    d558:	f800000f 	.word	0xf800000f
    d55c:	40018004 	.word	0x40018004

0000d560 <am_hal_clkgen_control>:
    d560:	4b49      	ldr	r3, [pc, #292]	; (d688 <am_hal_clkgen_control+0x128>)
    d562:	681a      	ldr	r2, [r3, #0]
    d564:	b912      	cbnz	r2, d56c <am_hal_clkgen_control+0xc>
    d566:	4a49      	ldr	r2, [pc, #292]	; (d68c <am_hal_clkgen_control+0x12c>)
    d568:	6812      	ldr	r2, [r2, #0]
    d56a:	601a      	str	r2, [r3, #0]
    d56c:	2809      	cmp	r0, #9
    d56e:	f200 8089 	bhi.w	d684 <am_hal_clkgen_control+0x124>
    d572:	e8df f000 	tbb	[pc, r0]
    d576:	160d      	.short	0x160d
    d578:	423a261e 	.word	0x423a261e
    d57c:	055c544c 	.word	0x055c544c
    d580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d584:	2000      	movs	r0, #0
    d586:	6a1a      	ldr	r2, [r3, #32]
    d588:	f36f 0200 	bfc	r2, #0, #1
    d58c:	621a      	str	r2, [r3, #32]
    d58e:	4770      	bx	lr
    d590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d594:	2200      	movs	r2, #0
    d596:	2147      	movs	r1, #71	; 0x47
    d598:	6159      	str	r1, [r3, #20]
    d59a:	4610      	mov	r0, r2
    d59c:	619a      	str	r2, [r3, #24]
    d59e:	615a      	str	r2, [r3, #20]
    d5a0:	4770      	bx	lr
    d5a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5a6:	2000      	movs	r0, #0
    d5a8:	899a      	ldrh	r2, [r3, #12]
    d5aa:	f36f 0200 	bfc	r2, #0, #1
    d5ae:	819a      	strh	r2, [r3, #12]
    d5b0:	4770      	bx	lr
    d5b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5b6:	2000      	movs	r0, #0
    d5b8:	899a      	ldrh	r2, [r3, #12]
    d5ba:	f36f 0241 	bfc	r2, #1, #1
    d5be:	819a      	strh	r2, [r3, #12]
    d5c0:	4770      	bx	lr
    d5c2:	4a33      	ldr	r2, [pc, #204]	; (d690 <am_hal_clkgen_control+0x130>)
    d5c4:	68d3      	ldr	r3, [r2, #12]
    d5c6:	b2db      	uxtb	r3, r3
    d5c8:	2b21      	cmp	r3, #33	; 0x21
    d5ca:	d106      	bne.n	d5da <am_hal_clkgen_control+0x7a>
    d5cc:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d5d0:	2101      	movs	r1, #1
    d5d2:	f361 2309 	bfi	r3, r1, #8, #2
    d5d6:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d5da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d5de:	2000      	movs	r0, #0
    d5e0:	8993      	ldrh	r3, [r2, #12]
    d5e2:	f043 0301 	orr.w	r3, r3, #1
    d5e6:	8193      	strh	r3, [r2, #12]
    d5e8:	4770      	bx	lr
    d5ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d5ee:	2000      	movs	r0, #0
    d5f0:	8993      	ldrh	r3, [r2, #12]
    d5f2:	f043 0302 	orr.w	r3, r3, #2
    d5f6:	8193      	strh	r3, [r2, #12]
    d5f8:	4770      	bx	lr
    d5fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d5fe:	2200      	movs	r2, #0
    d600:	2047      	movs	r0, #71	; 0x47
    d602:	2101      	movs	r1, #1
    d604:	6158      	str	r0, [r3, #20]
    d606:	6199      	str	r1, [r3, #24]
    d608:	4610      	mov	r0, r2
    d60a:	615a      	str	r2, [r3, #20]
    d60c:	4770      	bx	lr
    d60e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d612:	2000      	movs	r0, #0
    d614:	899a      	ldrh	r2, [r3, #12]
    d616:	f36f 12c7 	bfc	r2, #7, #1
    d61a:	819a      	strh	r2, [r3, #12]
    d61c:	4770      	bx	lr
    d61e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d622:	2000      	movs	r0, #0
    d624:	8993      	ldrh	r3, [r2, #12]
    d626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d62a:	8193      	strh	r3, [r2, #12]
    d62c:	4770      	bx	lr
    d62e:	4a18      	ldr	r2, [pc, #96]	; (d690 <am_hal_clkgen_control+0x130>)
    d630:	68d3      	ldr	r3, [r2, #12]
    d632:	b2db      	uxtb	r3, r3
    d634:	2b21      	cmp	r3, #33	; 0x21
    d636:	d00a      	beq.n	d64e <am_hal_clkgen_control+0xee>
    d638:	b139      	cbz	r1, d64a <am_hal_clkgen_control+0xea>
    d63a:	680b      	ldr	r3, [r1, #0]
    d63c:	f043 0301 	orr.w	r3, r3, #1
    d640:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d644:	2000      	movs	r0, #0
    d646:	6213      	str	r3, [r2, #32]
    d648:	4770      	bx	lr
    d64a:	4b12      	ldr	r3, [pc, #72]	; (d694 <am_hal_clkgen_control+0x134>)
    d64c:	e7f8      	b.n	d640 <am_hal_clkgen_control+0xe0>
    d64e:	b500      	push	{lr}
    d650:	b083      	sub	sp, #12
    d652:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d656:	9101      	str	r1, [sp, #4]
    d658:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d65c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d660:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d664:	f000 f836 	bl	d6d4 <am_hal_flash_delay>
    d668:	9901      	ldr	r1, [sp, #4]
    d66a:	b149      	cbz	r1, d680 <am_hal_clkgen_control+0x120>
    d66c:	680b      	ldr	r3, [r1, #0]
    d66e:	f043 0301 	orr.w	r3, r3, #1
    d672:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d676:	2000      	movs	r0, #0
    d678:	6213      	str	r3, [r2, #32]
    d67a:	b003      	add	sp, #12
    d67c:	f85d fb04 	ldr.w	pc, [sp], #4
    d680:	4b04      	ldr	r3, [pc, #16]	; (d694 <am_hal_clkgen_control+0x134>)
    d682:	e7f6      	b.n	d672 <am_hal_clkgen_control+0x112>
    d684:	2006      	movs	r0, #6
    d686:	4770      	bx	lr
    d688:	10001144 	.word	0x10001144
    d68c:	4ffff000 	.word	0x4ffff000
    d690:	40020000 	.word	0x40020000
    d694:	0025b801 	.word	0x0025b801

0000d698 <am_hal_clkgen_status_get>:
    d698:	b1b0      	cbz	r0, d6c8 <am_hal_clkgen_status_get+0x30>
    d69a:	b410      	push	{r4}
    d69c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    d6a0:	4603      	mov	r3, r0
    d6a2:	698c      	ldr	r4, [r1, #24]
    d6a4:	4809      	ldr	r0, [pc, #36]	; (d6cc <am_hal_clkgen_status_get+0x34>)
    d6a6:	4a0a      	ldr	r2, [pc, #40]	; (d6d0 <am_hal_clkgen_status_get+0x38>)
    d6a8:	f014 0f01 	tst.w	r4, #1
    d6ac:	bf08      	it	eq
    d6ae:	4602      	moveq	r2, r0
    d6b0:	601a      	str	r2, [r3, #0]
    d6b2:	69ca      	ldr	r2, [r1, #28]
    d6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6b8:	f002 0101 	and.w	r1, r2, #1
    d6bc:	f3c2 0240 	ubfx	r2, r2, #1, #1
    d6c0:	2000      	movs	r0, #0
    d6c2:	6059      	str	r1, [r3, #4]
    d6c4:	721a      	strb	r2, [r3, #8]
    d6c6:	4770      	bx	lr
    d6c8:	2006      	movs	r0, #6
    d6ca:	4770      	bx	lr
    d6cc:	02dc6c00 	.word	0x02dc6c00
    d6d0:	016e3600 	.word	0x016e3600

0000d6d4 <am_hal_flash_delay>:
    d6d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d6da:	075b      	lsls	r3, r3, #29
    d6dc:	bf46      	itte	mi
    d6de:	0040      	lslmi	r0, r0, #1
    d6e0:	230e      	movmi	r3, #14
    d6e2:	230b      	movpl	r3, #11
    d6e4:	4298      	cmp	r0, r3
    d6e6:	d902      	bls.n	d6ee <am_hal_flash_delay+0x1a>
    d6e8:	4a01      	ldr	r2, [pc, #4]	; (d6f0 <am_hal_flash_delay+0x1c>)
    d6ea:	1ac0      	subs	r0, r0, r3
    d6ec:	4710      	bx	r2
    d6ee:	4770      	bx	lr
    d6f0:	0800009d 	.word	0x0800009d

0000d6f4 <am_hal_flash_delay_status_check>:
    d6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d6f8:	f89d c020 	ldrb.w	ip, [sp, #32]
    d6fc:	f8df 805c 	ldr.w	r8, [pc, #92]	; d75c <am_hal_flash_delay_status_check+0x68>
    d700:	4604      	mov	r4, r0
    d702:	460d      	mov	r5, r1
    d704:	4616      	mov	r6, r2
    d706:	461f      	mov	r7, r3
    d708:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d70c:	f1bc 0f00 	cmp.w	ip, #0
    d710:	d00a      	beq.n	d728 <am_hal_flash_delay_status_check+0x34>
    d712:	e01a      	b.n	d74a <am_hal_flash_delay_status_check+0x56>
    d714:	b1f4      	cbz	r4, d754 <am_hal_flash_delay_status_check+0x60>
    d716:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d71a:	f013 0f04 	tst.w	r3, #4
    d71e:	bf0c      	ite	eq
    d720:	2005      	moveq	r0, #5
    d722:	2012      	movne	r0, #18
    d724:	3c01      	subs	r4, #1
    d726:	47c0      	blx	r8
    d728:	6828      	ldr	r0, [r5, #0]
    d72a:	4030      	ands	r0, r6
    d72c:	42b8      	cmp	r0, r7
    d72e:	d0f1      	beq.n	d714 <am_hal_flash_delay_status_check+0x20>
    d730:	2000      	movs	r0, #0
    d732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d736:	b16c      	cbz	r4, d754 <am_hal_flash_delay_status_check+0x60>
    d738:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d73c:	f013 0f04 	tst.w	r3, #4
    d740:	bf0c      	ite	eq
    d742:	2005      	moveq	r0, #5
    d744:	2012      	movne	r0, #18
    d746:	3c01      	subs	r4, #1
    d748:	47c0      	blx	r8
    d74a:	6828      	ldr	r0, [r5, #0]
    d74c:	4030      	ands	r0, r6
    d74e:	42b8      	cmp	r0, r7
    d750:	d1f1      	bne.n	d736 <am_hal_flash_delay_status_check+0x42>
    d752:	e7ed      	b.n	d730 <am_hal_flash_delay_status_check+0x3c>
    d754:	2004      	movs	r0, #4
    d756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d75a:	bf00      	nop
    d75c:	0800009d 	.word	0x0800009d

0000d760 <am_hal_flash_load_ui32>:
    d760:	4b00      	ldr	r3, [pc, #0]	; (d764 <am_hal_flash_load_ui32+0x4>)
    d762:	4718      	bx	r3
    d764:	08000075 	.word	0x08000075

0000d768 <am_hal_flash_store_ui32>:
    d768:	4b01      	ldr	r3, [pc, #4]	; (d770 <am_hal_flash_store_ui32+0x8>)
    d76a:	f043 0301 	orr.w	r3, r3, #1
    d76e:	4718      	bx	r3
    d770:	10001028 	.word	0x10001028

0000d774 <am_hal_gpio_pinconfig>:
    d774:	2831      	cmp	r0, #49	; 0x31
    d776:	f200 80c3 	bhi.w	d900 <am_hal_gpio_pinconfig+0x18c>
    d77a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d77e:	4604      	mov	r4, r0
    d780:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    d784:	f001 0007 	and.w	r0, r1, #7
    d788:	b085      	sub	sp, #20
    d78a:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    d78e:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d792:	d00f      	beq.n	d7b4 <am_hal_gpio_pinconfig+0x40>
    d794:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d798:	1db5      	adds	r5, r6, #6
    d79a:	f005 0507 	and.w	r5, r5, #7
    d79e:	2d03      	cmp	r5, #3
    d7a0:	f042 0201 	orr.w	r2, r2, #1
    d7a4:	f240 80ae 	bls.w	d904 <am_hal_gpio_pinconfig+0x190>
    d7a8:	2fc0      	cmp	r7, #192	; 0xc0
    d7aa:	f000 80e1 	beq.w	d970 <am_hal_gpio_pinconfig+0x1fc>
    d7ae:	2f20      	cmp	r7, #32
    d7b0:	f000 80e3 	beq.w	d97a <am_hal_gpio_pinconfig+0x206>
    d7b4:	b163      	cbz	r3, d7d0 <am_hal_gpio_pinconfig+0x5c>
    d7b6:	2b01      	cmp	r3, #1
    d7b8:	f000 80d3 	beq.w	d962 <am_hal_gpio_pinconfig+0x1ee>
    d7bc:	2b02      	cmp	r3, #2
    d7be:	f040 80c9 	bne.w	d954 <am_hal_gpio_pinconfig+0x1e0>
    d7c2:	4b79      	ldr	r3, [pc, #484]	; (d9a8 <am_hal_gpio_pinconfig+0x234>)
    d7c4:	5d1b      	ldrb	r3, [r3, r4]
    d7c6:	075b      	lsls	r3, r3, #29
    d7c8:	f140 80c4 	bpl.w	d954 <am_hal_gpio_pinconfig+0x1e0>
    d7cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d7d0:	4b76      	ldr	r3, [pc, #472]	; (d9ac <am_hal_gpio_pinconfig+0x238>)
    d7d2:	5d1b      	ldrb	r3, [r3, r4]
    d7d4:	4103      	asrs	r3, r0
    d7d6:	005b      	lsls	r3, r3, #1
    d7d8:	f003 0302 	and.w	r3, r3, #2
    d7dc:	4313      	orrs	r3, r2
    d7de:	4a74      	ldr	r2, [pc, #464]	; (d9b0 <am_hal_gpio_pinconfig+0x23c>)
    d7e0:	5d12      	ldrb	r2, [r2, r4]
    d7e2:	4282      	cmp	r2, r0
    d7e4:	f000 8099 	beq.w	d91a <am_hal_gpio_pinconfig+0x1a6>
    d7e8:	f3c1 3000 	ubfx	r0, r1, #12, #1
    d7ec:	f3c1 2581 	ubfx	r5, r1, #10, #2
    d7f0:	f3c1 3280 	ubfx	r2, r1, #14, #1
    d7f4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    d7f8:	0a88      	lsrs	r0, r1, #10
    d7fa:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d7fe:	f000 0008 	and.w	r0, r0, #8
    d802:	4302      	orrs	r2, r0
    d804:	f3c1 2007 	ubfx	r0, r1, #8, #8
    d808:	f000 050c 	and.w	r5, r0, #12
    d80c:	2d04      	cmp	r5, #4
    d80e:	f000 80a5 	beq.w	d95c <am_hal_gpio_pinconfig+0x1e8>
    d812:	4d68      	ldr	r5, [pc, #416]	; (d9b4 <am_hal_gpio_pinconfig+0x240>)
    d814:	682d      	ldr	r5, [r5, #0]
    d816:	eba1 0805 	sub.w	r8, r1, r5
    d81a:	fab8 f888 	clz	r8, r8
    d81e:	ea4f 1858 	mov.w	r8, r8, lsr #5
    d822:	f010 0f60 	tst.w	r0, #96	; 0x60
    d826:	bf04      	itt	eq
    d828:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    d82c:	f360 0200 	bfieq	r2, r0, #0, #1
    d830:	00a0      	lsls	r0, r4, #2
    d832:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d836:	2902      	cmp	r1, #2
    d838:	d05c      	beq.n	d8f4 <am_hal_gpio_pinconfig+0x180>
    d83a:	2903      	cmp	r1, #3
    d83c:	d058      	beq.n	d8f0 <am_hal_gpio_pinconfig+0x17c>
    d83e:	2901      	cmp	r1, #1
    d840:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    d844:	bf08      	it	eq
    d846:	f043 0304 	orreq.w	r3, r3, #4
    d84a:	f001 0118 	and.w	r1, r1, #24
    d84e:	2700      	movs	r7, #0
    d850:	f000 001c 	and.w	r0, r0, #28
    d854:	fa02 f600 	lsl.w	r6, r2, r0
    d858:	220f      	movs	r2, #15
    d85a:	4082      	lsls	r2, r0
    d85c:	43d2      	mvns	r2, r2
    d85e:	f04f 09ff 	mov.w	r9, #255	; 0xff
    d862:	fa03 f501 	lsl.w	r5, r3, r1
    d866:	fa09 f901 	lsl.w	r9, r9, r1
    d86a:	9201      	str	r2, [sp, #4]
    d86c:	f000 f8fc 	bl	da68 <am_hal_interrupt_master_disable>
    d870:	f024 0a03 	bic.w	sl, r4, #3
    d874:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    d878:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    d87c:	4b4e      	ldr	r3, [pc, #312]	; (d9b8 <am_hal_gpio_pinconfig+0x244>)
    d87e:	494f      	ldr	r1, [pc, #316]	; (d9bc <am_hal_gpio_pinconfig+0x248>)
    d880:	9a01      	ldr	r2, [sp, #4]
    d882:	9003      	str	r0, [sp, #12]
    d884:	ea6f 0909 	mvn.w	r9, r9
    d888:	f02b 0b03 	bic.w	fp, fp, #3
    d88c:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    d890:	f1b8 0f00 	cmp.w	r8, #0
    d894:	d00b      	beq.n	d8ae <am_hal_gpio_pinconfig+0x13a>
    d896:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    d89a:	f004 081f 	and.w	r8, r4, #31
    d89e:	4848      	ldr	r0, [pc, #288]	; (d9c0 <am_hal_gpio_pinconfig+0x24c>)
    d8a0:	f00e 0e04 	and.w	lr, lr, #4
    d8a4:	2401      	movs	r4, #1
    d8a6:	fa04 f408 	lsl.w	r4, r4, r8
    d8aa:	f84e 4000 	str.w	r4, [lr, r0]
    d8ae:	4845      	ldr	r0, [pc, #276]	; (d9c4 <am_hal_gpio_pinconfig+0x250>)
    d8b0:	2473      	movs	r4, #115	; 0x73
    d8b2:	6604      	str	r4, [r0, #96]	; 0x60
    d8b4:	f8dc 4000 	ldr.w	r4, [ip]
    d8b8:	ea04 0409 	and.w	r4, r4, r9
    d8bc:	4325      	orrs	r5, r4
    d8be:	f8cc 5000 	str.w	r5, [ip]
    d8c2:	f85b 4003 	ldr.w	r4, [fp, r3]
    d8c6:	4022      	ands	r2, r4
    d8c8:	4332      	orrs	r2, r6
    d8ca:	f84b 2003 	str.w	r2, [fp, r3]
    d8ce:	f85a 3001 	ldr.w	r3, [sl, r1]
    d8d2:	ea03 0909 	and.w	r9, r3, r9
    d8d6:	2400      	movs	r4, #0
    d8d8:	ea49 0707 	orr.w	r7, r9, r7
    d8dc:	f84a 7001 	str.w	r7, [sl, r1]
    d8e0:	6604      	str	r4, [r0, #96]	; 0x60
    d8e2:	9803      	ldr	r0, [sp, #12]
    d8e4:	f000 f8c4 	bl	da70 <am_hal_interrupt_master_set>
    d8e8:	4620      	mov	r0, r4
    d8ea:	b005      	add	sp, #20
    d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8f0:	f043 0304 	orr.w	r3, r3, #4
    d8f4:	00e1      	lsls	r1, r4, #3
    d8f6:	f001 0118 	and.w	r1, r1, #24
    d8fa:	2701      	movs	r7, #1
    d8fc:	408f      	lsls	r7, r1
    d8fe:	e7a7      	b.n	d850 <am_hal_gpio_pinconfig+0xdc>
    d900:	2006      	movs	r0, #6
    d902:	4770      	bx	lr
    d904:	4d28      	ldr	r5, [pc, #160]	; (d9a8 <am_hal_gpio_pinconfig+0x234>)
    d906:	5d2d      	ldrb	r5, [r5, r4]
    d908:	3e02      	subs	r6, #2
    d90a:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d90e:	07ee      	lsls	r6, r5, #31
    d910:	d536      	bpl.n	d980 <am_hal_gpio_pinconfig+0x20c>
    d912:	2b00      	cmp	r3, #0
    d914:	f43f af5c 	beq.w	d7d0 <am_hal_gpio_pinconfig+0x5c>
    d918:	e74d      	b.n	d7b6 <am_hal_gpio_pinconfig+0x42>
    d91a:	f3c1 4202 	ubfx	r2, r1, #16, #3
    d91e:	2a07      	cmp	r2, #7
    d920:	d030      	beq.n	d984 <am_hal_gpio_pinconfig+0x210>
    d922:	4d29      	ldr	r5, [pc, #164]	; (d9c8 <am_hal_gpio_pinconfig+0x254>)
    d924:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    d928:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    d92c:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    d930:	4290      	cmp	r0, r2
    d932:	d029      	beq.n	d988 <am_hal_gpio_pinconfig+0x214>
    d934:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    d938:	00a0      	lsls	r0, r4, #2
    d93a:	786e      	ldrb	r6, [r5, #1]
    d93c:	4296      	cmp	r6, r2
    d93e:	d02d      	beq.n	d99c <am_hal_gpio_pinconfig+0x228>
    d940:	78ae      	ldrb	r6, [r5, #2]
    d942:	4296      	cmp	r6, r2
    d944:	d02c      	beq.n	d9a0 <am_hal_gpio_pinconfig+0x22c>
    d946:	78ed      	ldrb	r5, [r5, #3]
    d948:	4295      	cmp	r5, r2
    d94a:	d02b      	beq.n	d9a4 <am_hal_gpio_pinconfig+0x230>
    d94c:	481f      	ldr	r0, [pc, #124]	; (d9cc <am_hal_gpio_pinconfig+0x258>)
    d94e:	b005      	add	sp, #20
    d950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d954:	481e      	ldr	r0, [pc, #120]	; (d9d0 <am_hal_gpio_pinconfig+0x25c>)
    d956:	b005      	add	sp, #20
    d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d95c:	f04f 0801 	mov.w	r8, #1
    d960:	e75f      	b.n	d822 <am_hal_gpio_pinconfig+0xae>
    d962:	4b11      	ldr	r3, [pc, #68]	; (d9a8 <am_hal_gpio_pinconfig+0x234>)
    d964:	5d1b      	ldrb	r3, [r3, r4]
    d966:	079d      	lsls	r5, r3, #30
    d968:	d5f4      	bpl.n	d954 <am_hal_gpio_pinconfig+0x1e0>
    d96a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d96e:	e72f      	b.n	d7d0 <am_hal_gpio_pinconfig+0x5c>
    d970:	2c14      	cmp	r4, #20
    d972:	f43f af1f 	beq.w	d7b4 <am_hal_gpio_pinconfig+0x40>
    d976:	4817      	ldr	r0, [pc, #92]	; (d9d4 <am_hal_gpio_pinconfig+0x260>)
    d978:	e7b7      	b.n	d8ea <am_hal_gpio_pinconfig+0x176>
    d97a:	2c14      	cmp	r4, #20
    d97c:	f47f af1a 	bne.w	d7b4 <am_hal_gpio_pinconfig+0x40>
    d980:	4815      	ldr	r0, [pc, #84]	; (d9d8 <am_hal_gpio_pinconfig+0x264>)
    d982:	e7b2      	b.n	d8ea <am_hal_gpio_pinconfig+0x176>
    d984:	4815      	ldr	r0, [pc, #84]	; (d9dc <am_hal_gpio_pinconfig+0x268>)
    d986:	e7b0      	b.n	d8ea <am_hal_gpio_pinconfig+0x176>
    d988:	2200      	movs	r2, #0
    d98a:	00a0      	lsls	r0, r4, #2
    d98c:	0052      	lsls	r2, r2, #1
    d98e:	f3c1 5540 	ubfx	r5, r1, #21, #1
    d992:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    d996:	f04f 0800 	mov.w	r8, #0
    d99a:	e74a      	b.n	d832 <am_hal_gpio_pinconfig+0xbe>
    d99c:	2201      	movs	r2, #1
    d99e:	e7f5      	b.n	d98c <am_hal_gpio_pinconfig+0x218>
    d9a0:	2202      	movs	r2, #2
    d9a2:	e7f3      	b.n	d98c <am_hal_gpio_pinconfig+0x218>
    d9a4:	2203      	movs	r2, #3
    d9a6:	e7f1      	b.n	d98c <am_hal_gpio_pinconfig+0x218>
    d9a8:	0000e250 	.word	0x0000e250
    d9ac:	0000e284 	.word	0x0000e284
    d9b0:	0000e380 	.word	0x0000e380
    d9b4:	0000e248 	.word	0x0000e248
    d9b8:	40010040 	.word	0x40010040
    d9bc:	400100e0 	.word	0x400100e0
    d9c0:	400100b4 	.word	0x400100b4
    d9c4:	40010000 	.word	0x40010000
    d9c8:	0000e2b8 	.word	0x0000e2b8
    d9cc:	08000104 	.word	0x08000104
    d9d0:	08000102 	.word	0x08000102
    d9d4:	08000101 	.word	0x08000101
    d9d8:	08000100 	.word	0x08000100
    d9dc:	08000103 	.word	0x08000103

0000d9e0 <am_hal_gpio_state_write>:
    d9e0:	2831      	cmp	r0, #49	; 0x31
    d9e2:	d81a      	bhi.n	da1a <am_hal_gpio_state_write+0x3a>
    d9e4:	b570      	push	{r4, r5, r6, lr}
    d9e6:	2905      	cmp	r1, #5
    d9e8:	b082      	sub	sp, #8
    d9ea:	460d      	mov	r5, r1
    d9ec:	d812      	bhi.n	da14 <am_hal_gpio_state_write+0x34>
    d9ee:	f000 031f 	and.w	r3, r0, #31
    d9f2:	2201      	movs	r2, #1
    d9f4:	08c0      	lsrs	r0, r0, #3
    d9f6:	fa02 f603 	lsl.w	r6, r2, r3
    d9fa:	f000 0404 	and.w	r4, r0, #4
    d9fe:	f000 f833 	bl	da68 <am_hal_interrupt_master_disable>
    da02:	3d01      	subs	r5, #1
    da04:	9001      	str	r0, [sp, #4]
    da06:	2d04      	cmp	r5, #4
    da08:	d821      	bhi.n	da4e <am_hal_gpio_state_write+0x6e>
    da0a:	e8df f005 	tbb	[pc, r5]
    da0e:	1512      	.short	0x1512
    da10:	1d1a      	.short	0x1d1a
    da12:	08          	.byte	0x08
    da13:	00          	.byte	0x00
    da14:	2006      	movs	r0, #6
    da16:	b002      	add	sp, #8
    da18:	bd70      	pop	{r4, r5, r6, pc}
    da1a:	2005      	movs	r0, #5
    da1c:	4770      	bx	lr
    da1e:	4a0d      	ldr	r2, [pc, #52]	; (da54 <am_hal_gpio_state_write+0x74>)
    da20:	58a3      	ldr	r3, [r4, r2]
    da22:	4073      	eors	r3, r6
    da24:	50a3      	str	r3, [r4, r2]
    da26:	9801      	ldr	r0, [sp, #4]
    da28:	f000 f822 	bl	da70 <am_hal_interrupt_master_set>
    da2c:	2000      	movs	r0, #0
    da2e:	b002      	add	sp, #8
    da30:	bd70      	pop	{r4, r5, r6, pc}
    da32:	4b09      	ldr	r3, [pc, #36]	; (da58 <am_hal_gpio_state_write+0x78>)
    da34:	50e6      	str	r6, [r4, r3]
    da36:	e7f6      	b.n	da26 <am_hal_gpio_state_write+0x46>
    da38:	4a08      	ldr	r2, [pc, #32]	; (da5c <am_hal_gpio_state_write+0x7c>)
    da3a:	58a3      	ldr	r3, [r4, r2]
    da3c:	4073      	eors	r3, r6
    da3e:	50a3      	str	r3, [r4, r2]
    da40:	e7f1      	b.n	da26 <am_hal_gpio_state_write+0x46>
    da42:	4b04      	ldr	r3, [pc, #16]	; (da54 <am_hal_gpio_state_write+0x74>)
    da44:	50e6      	str	r6, [r4, r3]
    da46:	e7ee      	b.n	da26 <am_hal_gpio_state_write+0x46>
    da48:	4b05      	ldr	r3, [pc, #20]	; (da60 <am_hal_gpio_state_write+0x80>)
    da4a:	50e6      	str	r6, [r4, r3]
    da4c:	e7eb      	b.n	da26 <am_hal_gpio_state_write+0x46>
    da4e:	4b05      	ldr	r3, [pc, #20]	; (da64 <am_hal_gpio_state_write+0x84>)
    da50:	50e6      	str	r6, [r4, r3]
    da52:	e7e8      	b.n	da26 <am_hal_gpio_state_write+0x46>
    da54:	400100b4 	.word	0x400100b4
    da58:	40010090 	.word	0x40010090
    da5c:	40010088 	.word	0x40010088
    da60:	400100a8 	.word	0x400100a8
    da64:	40010098 	.word	0x40010098

0000da68 <am_hal_interrupt_master_disable>:
    da68:	f3ef 8010 	mrs	r0, PRIMASK
    da6c:	b672      	cpsid	i
    da6e:	4770      	bx	lr

0000da70 <am_hal_interrupt_master_set>:
    da70:	f380 8810 	msr	PRIMASK, r0
    da74:	4770      	bx	lr
    da76:	bf00      	nop

0000da78 <am_hal_itm_enable>:
    da78:	4a0e      	ldr	r2, [pc, #56]	; (dab4 <am_hal_itm_enable+0x3c>)
    da7a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    da7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    da82:	b410      	push	{r4}
    da84:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    da88:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    da8c:	01db      	lsls	r3, r3, #7
    da8e:	d5fb      	bpl.n	da88 <am_hal_itm_enable+0x10>
    da90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    da94:	4c08      	ldr	r4, [pc, #32]	; (dab8 <am_hal_itm_enable+0x40>)
    da96:	4a09      	ldr	r2, [pc, #36]	; (dabc <am_hal_itm_enable+0x44>)
    da98:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    da9c:	200f      	movs	r0, #15
    da9e:	f04f 31ff 	mov.w	r1, #4294967295
    daa2:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    daa6:	f85d 4b04 	ldr.w	r4, [sp], #4
    daaa:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    daae:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dab2:	4770      	bx	lr
    dab4:	e000ed00 	.word	0xe000ed00
    dab8:	c5acce55 	.word	0xc5acce55
    dabc:	00150511 	.word	0x00150511

0000dac0 <am_hal_itm_disable>:
    dac0:	4b27      	ldr	r3, [pc, #156]	; (db60 <am_hal_itm_disable+0xa0>)
    dac2:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    dac6:	b510      	push	{r4, lr}
    dac8:	b9cb      	cbnz	r3, dafe <am_hal_itm_disable+0x3e>
    daca:	4a26      	ldr	r2, [pc, #152]	; (db64 <am_hal_itm_disable+0xa4>)
    dacc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dad4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dad8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    dadc:	01d9      	lsls	r1, r3, #7
    dade:	d5fb      	bpl.n	dad8 <am_hal_itm_disable+0x18>
    dae0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dae4:	4c20      	ldr	r4, [pc, #128]	; (db68 <am_hal_itm_disable+0xa8>)
    dae6:	4a21      	ldr	r2, [pc, #132]	; (db6c <am_hal_itm_disable+0xac>)
    dae8:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    daec:	200f      	movs	r0, #15
    daee:	f04f 31ff 	mov.w	r1, #4294967295
    daf2:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    daf6:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dafa:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dafe:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    db02:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    db06:	021b      	lsls	r3, r3, #8
    db08:	d4fb      	bmi.n	db02 <am_hal_itm_disable+0x42>
    db0a:	f44f 7048 	mov.w	r0, #800	; 0x320
    db0e:	f7ff fde1 	bl	d6d4 <am_hal_flash_delay>
    db12:	4b15      	ldr	r3, [pc, #84]	; (db68 <am_hal_itm_disable+0xa8>)
    db14:	4916      	ldr	r1, [pc, #88]	; (db70 <am_hal_itm_disable+0xb0>)
    db16:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    db1a:	2064      	movs	r0, #100	; 0x64
    db1c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    db20:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    db24:	f023 0301 	bic.w	r3, r3, #1
    db28:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    db2c:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    db30:	420b      	tst	r3, r1
    db32:	d1fb      	bne.n	db2c <am_hal_itm_disable+0x6c>
    db34:	3801      	subs	r0, #1
    db36:	d1f3      	bne.n	db20 <am_hal_itm_disable+0x60>
    db38:	4a0a      	ldr	r2, [pc, #40]	; (db64 <am_hal_itm_disable+0xa4>)
    db3a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    db3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    db42:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    db46:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    db4a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    db4e:	d1fa      	bne.n	db46 <am_hal_itm_disable+0x86>
    db50:	4a03      	ldr	r2, [pc, #12]	; (db60 <am_hal_itm_disable+0xa0>)
    db52:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    db56:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    db5a:	2b00      	cmp	r3, #0
    db5c:	d1fb      	bne.n	db56 <am_hal_itm_disable+0x96>
    db5e:	bd10      	pop	{r4, pc}
    db60:	40020000 	.word	0x40020000
    db64:	e000ed00 	.word	0xe000ed00
    db68:	c5acce55 	.word	0xc5acce55
    db6c:	00150511 	.word	0x00150511
    db70:	00800001 	.word	0x00800001

0000db74 <am_hal_itm_print>:
    db74:	7803      	ldrb	r3, [r0, #0]
    db76:	b1a3      	cbz	r3, dba2 <am_hal_itm_print+0x2e>
    db78:	4603      	mov	r3, r0
    db7a:	f1c0 0c01 	rsb	ip, r0, #1
    db7e:	eb0c 0103 	add.w	r1, ip, r3
    db82:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    db86:	2a00      	cmp	r2, #0
    db88:	d1f9      	bne.n	db7e <am_hal_itm_print+0xa>
    db8a:	4401      	add	r1, r0
    db8c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    db90:	f810 cb01 	ldrb.w	ip, [r0], #1
    db94:	6813      	ldr	r3, [r2, #0]
    db96:	2b00      	cmp	r3, #0
    db98:	d0fc      	beq.n	db94 <am_hal_itm_print+0x20>
    db9a:	4288      	cmp	r0, r1
    db9c:	f882 c000 	strb.w	ip, [r2]
    dba0:	d1f6      	bne.n	db90 <am_hal_itm_print+0x1c>
    dba2:	4770      	bx	lr

0000dba4 <am_hal_mcuctrl_info_get>:
    dba4:	2900      	cmp	r1, #0
    dba6:	f000 808f 	beq.w	dcc8 <am_hal_mcuctrl_info_get+0x124>
    dbaa:	2801      	cmp	r0, #1
    dbac:	b430      	push	{r4, r5}
    dbae:	d006      	beq.n	dbbe <am_hal_mcuctrl_info_get+0x1a>
    dbb0:	2802      	cmp	r0, #2
    dbb2:	d06d      	beq.n	dc90 <am_hal_mcuctrl_info_get+0xec>
    dbb4:	2800      	cmp	r0, #0
    dbb6:	d055      	beq.n	dc64 <am_hal_mcuctrl_info_get+0xc0>
    dbb8:	2006      	movs	r0, #6
    dbba:	bc30      	pop	{r4, r5}
    dbbc:	4770      	bx	lr
    dbbe:	4a43      	ldr	r2, [pc, #268]	; (dccc <am_hal_mcuctrl_info_get+0x128>)
    dbc0:	4843      	ldr	r0, [pc, #268]	; (dcd0 <am_hal_mcuctrl_info_get+0x12c>)
    dbc2:	6813      	ldr	r3, [r2, #0]
    dbc4:	600b      	str	r3, [r1, #0]
    dbc6:	6854      	ldr	r4, [r2, #4]
    dbc8:	604c      	str	r4, [r1, #4]
    dbca:	6894      	ldr	r4, [r2, #8]
    dbcc:	608c      	str	r4, [r1, #8]
    dbce:	68d4      	ldr	r4, [r2, #12]
    dbd0:	60cc      	str	r4, [r1, #12]
    dbd2:	f3c3 5503 	ubfx	r5, r3, #20, #4
    dbd6:	6914      	ldr	r4, [r2, #16]
    dbd8:	610c      	str	r4, [r1, #16]
    dbda:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    dbde:	4c3d      	ldr	r4, [pc, #244]	; (dcd4 <am_hal_mcuctrl_info_get+0x130>)
    dbe0:	6950      	ldr	r0, [r2, #20]
    dbe2:	6148      	str	r0, [r1, #20]
    dbe4:	f003 0201 	and.w	r2, r3, #1
    dbe8:	f3c3 4303 	ubfx	r3, r3, #16, #4
    dbec:	e9c1 2506 	strd	r2, r5, [r1, #24]
    dbf0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    dbf4:	4a38      	ldr	r2, [pc, #224]	; (dcd8 <am_hal_mcuctrl_info_get+0x134>)
    dbf6:	620b      	str	r3, [r1, #32]
    dbf8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    dbfc:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    dc00:	b2db      	uxtb	r3, r3
    dc02:	f000 000f 	and.w	r0, r0, #15
    dc06:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    dc0a:	624b      	str	r3, [r1, #36]	; 0x24
    dc0c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    dc10:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    dc14:	f3c3 1303 	ubfx	r3, r3, #4, #4
    dc18:	f000 000f 	and.w	r0, r0, #15
    dc1c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    dc20:	628b      	str	r3, [r1, #40]	; 0x28
    dc22:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    dc26:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    dc2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    dc2e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    dc32:	4303      	orrs	r3, r0
    dc34:	62cb      	str	r3, [r1, #44]	; 0x2c
    dc36:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    dc3a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    dc3e:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    dc42:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    dc46:	b2db      	uxtb	r3, r3
    dc48:	041b      	lsls	r3, r3, #16
    dc4a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    dc4e:	fa5f fc82 	uxtb.w	ip, r2
    dc52:	ea43 030c 	orr.w	r3, r3, ip
    dc56:	b2c2      	uxtb	r2, r0
    dc58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dc5c:	630b      	str	r3, [r1, #48]	; 0x30
    dc5e:	2000      	movs	r0, #0
    dc60:	bc30      	pop	{r4, r5}
    dc62:	4770      	bx	lr
    dc64:	4a19      	ldr	r2, [pc, #100]	; (dccc <am_hal_mcuctrl_info_get+0x128>)
    dc66:	6993      	ldr	r3, [r2, #24]
    dc68:	f3c3 1480 	ubfx	r4, r3, #6, #1
    dc6c:	700c      	strb	r4, [r1, #0]
    dc6e:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    dc72:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dc76:	704b      	strb	r3, [r1, #1]
    dc78:	f3c4 6381 	ubfx	r3, r4, #26, #2
    dc7c:	710b      	strb	r3, [r1, #4]
    dc7e:	6953      	ldr	r3, [r2, #20]
    dc80:	f3c3 0240 	ubfx	r2, r3, #1, #1
    dc84:	f003 0301 	and.w	r3, r3, #1
    dc88:	bc30      	pop	{r4, r5}
    dc8a:	708a      	strb	r2, [r1, #2]
    dc8c:	70cb      	strb	r3, [r1, #3]
    dc8e:	4770      	bx	lr
    dc90:	4a0e      	ldr	r2, [pc, #56]	; (dccc <am_hal_mcuctrl_info_get+0x128>)
    dc92:	6848      	ldr	r0, [r1, #4]
    dc94:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    dc98:	f003 0401 	and.w	r4, r3, #1
    dc9c:	700c      	strb	r4, [r1, #0]
    dc9e:	f3c3 0440 	ubfx	r4, r3, #1, #1
    dca2:	720c      	strb	r4, [r1, #8]
    dca4:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    dca8:	60cc      	str	r4, [r1, #12]
    dcaa:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    dcae:	4320      	orrs	r0, r4
    dcb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dcb4:	6048      	str	r0, [r1, #4]
    dcb6:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    dcba:	740b      	strb	r3, [r1, #16]
    dcbc:	694b      	ldr	r3, [r1, #20]
    dcbe:	4313      	orrs	r3, r2
    dcc0:	2000      	movs	r0, #0
    dcc2:	bc30      	pop	{r4, r5}
    dcc4:	614b      	str	r3, [r1, #20]
    dcc6:	4770      	bx	lr
    dcc8:	2006      	movs	r0, #6
    dcca:	4770      	bx	lr
    dccc:	40020000 	.word	0x40020000
    dcd0:	0000e3b4 	.word	0x0000e3b4
    dcd4:	0000e3f4 	.word	0x0000e3f4
    dcd8:	f0000f00 	.word	0xf0000f00

0000dcdc <am_hal_pwrctrl_periph_enable>:
    dcdc:	b570      	push	{r4, r5, r6, lr}
    dcde:	b082      	sub	sp, #8
    dce0:	4604      	mov	r4, r0
    dce2:	f7ff fec1 	bl	da68 <am_hal_interrupt_master_disable>
    dce6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dcea:	4e0f      	ldr	r6, [pc, #60]	; (dd28 <am_hal_pwrctrl_periph_enable+0x4c>)
    dcec:	4d0f      	ldr	r5, [pc, #60]	; (dd2c <am_hal_pwrctrl_periph_enable+0x50>)
    dcee:	9001      	str	r0, [sp, #4]
    dcf0:	00a4      	lsls	r4, r4, #2
    dcf2:	68b3      	ldr	r3, [r6, #8]
    dcf4:	592a      	ldr	r2, [r5, r4]
    dcf6:	4313      	orrs	r3, r2
    dcf8:	60b3      	str	r3, [r6, #8]
    dcfa:	9801      	ldr	r0, [sp, #4]
    dcfc:	442c      	add	r4, r5
    dcfe:	f7ff feb7 	bl	da70 <am_hal_interrupt_master_set>
    dd02:	20a0      	movs	r0, #160	; 0xa0
    dd04:	f7ff fce6 	bl	d6d4 <am_hal_flash_delay>
    dd08:	69b3      	ldr	r3, [r6, #24]
    dd0a:	6864      	ldr	r4, [r4, #4]
    dd0c:	4223      	tst	r3, r4
    dd0e:	d103      	bne.n	dd18 <am_hal_pwrctrl_periph_enable+0x3c>
    dd10:	20a0      	movs	r0, #160	; 0xa0
    dd12:	f7ff fcdf 	bl	d6d4 <am_hal_flash_delay>
    dd16:	69b3      	ldr	r3, [r6, #24]
    dd18:	4b03      	ldr	r3, [pc, #12]	; (dd28 <am_hal_pwrctrl_periph_enable+0x4c>)
    dd1a:	699b      	ldr	r3, [r3, #24]
    dd1c:	4223      	tst	r3, r4
    dd1e:	bf0c      	ite	eq
    dd20:	2001      	moveq	r0, #1
    dd22:	2000      	movne	r0, #0
    dd24:	b002      	add	sp, #8
    dd26:	bd70      	pop	{r4, r5, r6, pc}
    dd28:	40021000 	.word	0x40021000
    dd2c:	0000e434 	.word	0x0000e434

0000dd30 <am_hal_pwrctrl_periph_disable>:
    dd30:	b570      	push	{r4, r5, r6, lr}
    dd32:	b082      	sub	sp, #8
    dd34:	4604      	mov	r4, r0
    dd36:	f7ff fe97 	bl	da68 <am_hal_interrupt_master_disable>
    dd3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dd3e:	4e10      	ldr	r6, [pc, #64]	; (dd80 <am_hal_pwrctrl_periph_disable+0x50>)
    dd40:	4d10      	ldr	r5, [pc, #64]	; (dd84 <am_hal_pwrctrl_periph_disable+0x54>)
    dd42:	9001      	str	r0, [sp, #4]
    dd44:	00a4      	lsls	r4, r4, #2
    dd46:	68b3      	ldr	r3, [r6, #8]
    dd48:	592a      	ldr	r2, [r5, r4]
    dd4a:	ea23 0302 	bic.w	r3, r3, r2
    dd4e:	60b3      	str	r3, [r6, #8]
    dd50:	9801      	ldr	r0, [sp, #4]
    dd52:	442c      	add	r4, r5
    dd54:	f7ff fe8c 	bl	da70 <am_hal_interrupt_master_set>
    dd58:	20a0      	movs	r0, #160	; 0xa0
    dd5a:	f7ff fcbb 	bl	d6d4 <am_hal_flash_delay>
    dd5e:	69b3      	ldr	r3, [r6, #24]
    dd60:	6864      	ldr	r4, [r4, #4]
    dd62:	4223      	tst	r3, r4
    dd64:	d003      	beq.n	dd6e <am_hal_pwrctrl_periph_disable+0x3e>
    dd66:	20a0      	movs	r0, #160	; 0xa0
    dd68:	f7ff fcb4 	bl	d6d4 <am_hal_flash_delay>
    dd6c:	69b3      	ldr	r3, [r6, #24]
    dd6e:	4b04      	ldr	r3, [pc, #16]	; (dd80 <am_hal_pwrctrl_periph_disable+0x50>)
    dd70:	699b      	ldr	r3, [r3, #24]
    dd72:	4223      	tst	r3, r4
    dd74:	bf14      	ite	ne
    dd76:	2001      	movne	r0, #1
    dd78:	2000      	moveq	r0, #0
    dd7a:	b002      	add	sp, #8
    dd7c:	bd70      	pop	{r4, r5, r6, pc}
    dd7e:	bf00      	nop
    dd80:	40021000 	.word	0x40021000
    dd84:	0000e434 	.word	0x0000e434

0000dd88 <am_hal_pwrctrl_low_power_init>:
    dd88:	b530      	push	{r4, r5, lr}
    dd8a:	4b69      	ldr	r3, [pc, #420]	; (df30 <am_hal_pwrctrl_low_power_init+0x1a8>)
    dd8c:	681a      	ldr	r2, [r3, #0]
    dd8e:	b085      	sub	sp, #20
    dd90:	b912      	cbnz	r2, dd98 <am_hal_pwrctrl_low_power_init+0x10>
    dd92:	4a68      	ldr	r2, [pc, #416]	; (df34 <am_hal_pwrctrl_low_power_init+0x1ac>)
    dd94:	6812      	ldr	r2, [r2, #0]
    dd96:	601a      	str	r2, [r3, #0]
    dd98:	4b67      	ldr	r3, [pc, #412]	; (df38 <am_hal_pwrctrl_low_power_init+0x1b0>)
    dd9a:	68db      	ldr	r3, [r3, #12]
    dd9c:	b2db      	uxtb	r3, r3
    dd9e:	2b12      	cmp	r3, #18
    dda0:	d104      	bne.n	ddac <am_hal_pwrctrl_low_power_init+0x24>
    dda2:	4c66      	ldr	r4, [pc, #408]	; (df3c <am_hal_pwrctrl_low_power_init+0x1b4>)
    dda4:	6863      	ldr	r3, [r4, #4]
    dda6:	07d8      	lsls	r0, r3, #31
    dda8:	f100 8088 	bmi.w	debc <am_hal_pwrctrl_low_power_init+0x134>
    ddac:	4b62      	ldr	r3, [pc, #392]	; (df38 <am_hal_pwrctrl_low_power_init+0x1b0>)
    ddae:	68da      	ldr	r2, [r3, #12]
    ddb0:	b2d2      	uxtb	r2, r2
    ddb2:	2a20      	cmp	r2, #32
    ddb4:	d934      	bls.n	de20 <am_hal_pwrctrl_low_power_init+0x98>
    ddb6:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    ddba:	2002      	movs	r0, #2
    ddbc:	f360 4213 	bfi	r2, r0, #16, #4
    ddc0:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    ddc4:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    ddc8:	2203      	movs	r2, #3
    ddca:	f362 5117 	bfi	r1, r2, #20, #4
    ddce:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    ddd2:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ddd6:	2405      	movs	r4, #5
    ddd8:	f364 0103 	bfi	r1, r4, #0, #4
    dddc:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    dde0:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    dde4:	f360 1107 	bfi	r1, r0, #4, #4
    dde8:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ddec:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ddf0:	2406      	movs	r4, #6
    ddf2:	f364 210b 	bfi	r1, r4, #8, #4
    ddf6:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    ddfa:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    ddfe:	2001      	movs	r0, #1
    de00:	f360 310f 	bfi	r1, r0, #12, #4
    de04:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    de08:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    de0c:	f362 61de 	bfi	r1, r2, #27, #4
    de10:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    de14:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    de18:	f362 0103 	bfi	r1, r2, #0, #4
    de1c:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    de20:	4a45      	ldr	r2, [pc, #276]	; (df38 <am_hal_pwrctrl_low_power_init+0x1b0>)
    de22:	68d3      	ldr	r3, [r2, #12]
    de24:	b2db      	uxtb	r3, r3
    de26:	2b11      	cmp	r3, #17
    de28:	d905      	bls.n	de36 <am_hal_pwrctrl_low_power_init+0xae>
    de2a:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    de2e:	f36f 6318 	bfc	r3, #24, #1
    de32:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    de36:	2100      	movs	r1, #0
    de38:	200c      	movs	r0, #12
    de3a:	f7ff fa17 	bl	d26c <am_hal_cachectrl_control>
    de3e:	4b3f      	ldr	r3, [pc, #252]	; (df3c <am_hal_pwrctrl_low_power_init+0x1b4>)
    de40:	699b      	ldr	r3, [r3, #24]
    de42:	f3c3 2500 	ubfx	r5, r3, #8, #1
    de46:	05db      	lsls	r3, r3, #23
    de48:	d420      	bmi.n	de8c <am_hal_pwrctrl_low_power_init+0x104>
    de4a:	4c3b      	ldr	r4, [pc, #236]	; (df38 <am_hal_pwrctrl_low_power_init+0x1b0>)
    de4c:	68e3      	ldr	r3, [r4, #12]
    de4e:	b2db      	uxtb	r3, r3
    de50:	2b11      	cmp	r3, #17
    de52:	d84e      	bhi.n	def2 <am_hal_pwrctrl_low_power_init+0x16a>
    de54:	4c38      	ldr	r4, [pc, #224]	; (df38 <am_hal_pwrctrl_low_power_init+0x1b0>)
    de56:	493a      	ldr	r1, [pc, #232]	; (df40 <am_hal_pwrctrl_low_power_init+0x1b8>)
    de58:	7e22      	ldrb	r2, [r4, #24]
    de5a:	2001      	movs	r0, #1
    de5c:	4302      	orrs	r2, r0
    de5e:	2307      	movs	r3, #7
    de60:	7622      	strb	r2, [r4, #24]
    de62:	9000      	str	r0, [sp, #0]
    de64:	461a      	mov	r2, r3
    de66:	f242 7010 	movw	r0, #10000	; 0x2710
    de6a:	f7ff fc43 	bl	d6f4 <am_hal_flash_delay_status_check>
    de6e:	2800      	cmp	r0, #0
    de70:	d15a      	bne.n	df28 <am_hal_pwrctrl_low_power_init+0x1a0>
    de72:	4b32      	ldr	r3, [pc, #200]	; (df3c <am_hal_pwrctrl_low_power_init+0x1b4>)
    de74:	681a      	ldr	r2, [r3, #0]
    de76:	f042 0201 	orr.w	r2, r2, #1
    de7a:	601a      	str	r2, [r3, #0]
    de7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    de7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    de82:	625a      	str	r2, [r3, #36]	; 0x24
    de84:	68e3      	ldr	r3, [r4, #12]
    de86:	b2db      	uxtb	r3, r3
    de88:	2b11      	cmp	r3, #17
    de8a:	d002      	beq.n	de92 <am_hal_pwrctrl_low_power_init+0x10a>
    de8c:	2000      	movs	r0, #0
    de8e:	b005      	add	sp, #20
    de90:	bd30      	pop	{r4, r5, pc}
    de92:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    de96:	f360 5356 	bfi	r3, r0, #21, #2
    de9a:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    de9e:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    dea2:	220f      	movs	r2, #15
    dea4:	f362 138b 	bfi	r3, r2, #6, #6
    dea8:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    deac:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    deb0:	f362 0305 	bfi	r3, r2, #0, #6
    deb4:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    deb8:	b005      	add	sp, #20
    deba:	bd30      	pop	{r4, r5, pc}
    debc:	f7ff fdd4 	bl	da68 <am_hal_interrupt_master_disable>
    dec0:	9002      	str	r0, [sp, #8]
    dec2:	68a3      	ldr	r3, [r4, #8]
    dec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    dec8:	60a3      	str	r3, [r4, #8]
    deca:	9802      	ldr	r0, [sp, #8]
    decc:	f7ff fdd0 	bl	da70 <am_hal_interrupt_master_set>
    ded0:	20a0      	movs	r0, #160	; 0xa0
    ded2:	f7ff fbff 	bl	d6d4 <am_hal_flash_delay>
    ded6:	69a3      	ldr	r3, [r4, #24]
    ded8:	0619      	lsls	r1, r3, #24
    deda:	d403      	bmi.n	dee4 <am_hal_pwrctrl_low_power_init+0x15c>
    dedc:	20a0      	movs	r0, #160	; 0xa0
    dede:	f7ff fbf9 	bl	d6d4 <am_hal_flash_delay>
    dee2:	69a3      	ldr	r3, [r4, #24]
    dee4:	4b15      	ldr	r3, [pc, #84]	; (df3c <am_hal_pwrctrl_low_power_init+0x1b4>)
    dee6:	699b      	ldr	r3, [r3, #24]
    dee8:	061a      	lsls	r2, r3, #24
    deea:	f53f af5f 	bmi.w	ddac <am_hal_pwrctrl_low_power_init+0x24>
    deee:	2001      	movs	r0, #1
    def0:	e7cd      	b.n	de8e <am_hal_pwrctrl_low_power_init+0x106>
    def2:	f7ff fdb9 	bl	da68 <am_hal_interrupt_master_disable>
    def6:	9003      	str	r0, [sp, #12]
    def8:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    defc:	2219      	movs	r2, #25
    defe:	f362 138b 	bfi	r3, r2, #6, #6
    df02:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    df06:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    df0a:	210c      	movs	r1, #12
    df0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    df10:	f361 0205 	bfi	r2, r1, #0, #6
    df14:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    df18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    df1a:	f365 5296 	bfi	r2, r5, #22, #1
    df1e:	63da      	str	r2, [r3, #60]	; 0x3c
    df20:	9803      	ldr	r0, [sp, #12]
    df22:	f7ff fda5 	bl	da70 <am_hal_interrupt_master_set>
    df26:	e795      	b.n	de54 <am_hal_pwrctrl_low_power_init+0xcc>
    df28:	2004      	movs	r0, #4
    df2a:	b005      	add	sp, #20
    df2c:	bd30      	pop	{r4, r5, pc}
    df2e:	bf00      	nop
    df30:	10001144 	.word	0x10001144
    df34:	4ffff000 	.word	0x4ffff000
    df38:	40020000 	.word	0x40020000
    df3c:	40021000 	.word	0x40021000
    df40:	40020018 	.word	0x40020018

0000df44 <am_hal_rtc_osc_disable>:
    df44:	4a03      	ldr	r2, [pc, #12]	; (df54 <am_hal_rtc_osc_disable+0x10>)
    df46:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    df4a:	f043 0310 	orr.w	r3, r3, #16
    df4e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    df52:	4770      	bx	lr
    df54:	40004200 	.word	0x40004200

0000df58 <am_hal_sysctrl_sleep>:
    df58:	b510      	push	{r4, lr}
    df5a:	b082      	sub	sp, #8
    df5c:	4604      	mov	r4, r0
    df5e:	f7ff fd83 	bl	da68 <am_hal_interrupt_master_disable>
    df62:	9001      	str	r0, [sp, #4]
    df64:	b124      	cbz	r4, df70 <am_hal_sysctrl_sleep+0x18>
    df66:	4b12      	ldr	r3, [pc, #72]	; (dfb0 <am_hal_sysctrl_sleep+0x58>)
    df68:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    df6c:	07db      	lsls	r3, r3, #31
    df6e:	d513      	bpl.n	df98 <am_hal_sysctrl_sleep+0x40>
    df70:	4a10      	ldr	r2, [pc, #64]	; (dfb4 <am_hal_sysctrl_sleep+0x5c>)
    df72:	6913      	ldr	r3, [r2, #16]
    df74:	f023 0304 	bic.w	r3, r3, #4
    df78:	6113      	str	r3, [r2, #16]
    df7a:	f3bf 8f4f 	dsb	sy
    df7e:	4a0e      	ldr	r2, [pc, #56]	; (dfb8 <am_hal_sysctrl_sleep+0x60>)
    df80:	4b0e      	ldr	r3, [pc, #56]	; (dfbc <am_hal_sysctrl_sleep+0x64>)
    df82:	6812      	ldr	r2, [r2, #0]
    df84:	601a      	str	r2, [r3, #0]
    df86:	bf30      	wfi
    df88:	f3bf 8f6f 	isb	sy
    df8c:	9801      	ldr	r0, [sp, #4]
    df8e:	b002      	add	sp, #8
    df90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df94:	f7ff bd6c 	b.w	da70 <am_hal_interrupt_master_set>
    df98:	4b09      	ldr	r3, [pc, #36]	; (dfc0 <am_hal_sysctrl_sleep+0x68>)
    df9a:	681a      	ldr	r2, [r3, #0]
    df9c:	b912      	cbnz	r2, dfa4 <am_hal_sysctrl_sleep+0x4c>
    df9e:	4a09      	ldr	r2, [pc, #36]	; (dfc4 <am_hal_sysctrl_sleep+0x6c>)
    dfa0:	6812      	ldr	r2, [r2, #0]
    dfa2:	601a      	str	r2, [r3, #0]
    dfa4:	4a03      	ldr	r2, [pc, #12]	; (dfb4 <am_hal_sysctrl_sleep+0x5c>)
    dfa6:	6913      	ldr	r3, [r2, #16]
    dfa8:	f043 0304 	orr.w	r3, r3, #4
    dfac:	6113      	str	r3, [r2, #16]
    dfae:	e7e4      	b.n	df7a <am_hal_sysctrl_sleep+0x22>
    dfb0:	40020000 	.word	0x40020000
    dfb4:	e000ed00 	.word	0xe000ed00
    dfb8:	5fff0000 	.word	0x5fff0000
    dfbc:	10001148 	.word	0x10001148
    dfc0:	10001144 	.word	0x10001144
    dfc4:	4ffff000 	.word	0x4ffff000

0000dfc8 <am_hal_tpiu_enable>:
    dfc8:	b510      	push	{r4, lr}
    dfca:	4b23      	ldr	r3, [pc, #140]	; (e058 <am_hal_tpiu_enable+0x90>)
    dfcc:	6804      	ldr	r4, [r0, #0]
    dfce:	2200      	movs	r2, #0
    dfd0:	b084      	sub	sp, #16
    dfd2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    dfd6:	b334      	cbz	r4, e026 <am_hal_tpiu_enable+0x5e>
    dfd8:	4a20      	ldr	r2, [pc, #128]	; (e05c <am_hal_tpiu_enable+0x94>)
    dfda:	4921      	ldr	r1, [pc, #132]	; (e060 <am_hal_tpiu_enable+0x98>)
    dfdc:	2001      	movs	r0, #1
    dfde:	6058      	str	r0, [r3, #4]
    dfe0:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    dfe4:	a801      	add	r0, sp, #4
    dfe6:	428b      	cmp	r3, r1
    dfe8:	bf88      	it	hi
    dfea:	4614      	movhi	r4, r2
    dfec:	f7ff fb54 	bl	d698 <am_hal_clkgen_status_get>
    dff0:	9b01      	ldr	r3, [sp, #4]
    dff2:	1c5a      	adds	r2, r3, #1
    dff4:	d02d      	beq.n	e052 <am_hal_tpiu_enable+0x8a>
    dff6:	08db      	lsrs	r3, r3, #3
    dff8:	fbb3 f4f4 	udiv	r4, r3, r4
    dffc:	3c01      	subs	r4, #1
    dffe:	b2a4      	uxth	r4, r4
    e000:	4b15      	ldr	r3, [pc, #84]	; (e058 <am_hal_tpiu_enable+0x90>)
    e002:	4a18      	ldr	r2, [pc, #96]	; (e064 <am_hal_tpiu_enable+0x9c>)
    e004:	611c      	str	r4, [r3, #16]
    e006:	2102      	movs	r1, #2
    e008:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e00c:	2000      	movs	r0, #0
    e00e:	f240 2101 	movw	r1, #513	; 0x201
    e012:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e016:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e01a:	f44f 7048 	mov.w	r0, #800	; 0x320
    e01e:	f7ff fb59 	bl	d6d4 <am_hal_flash_delay>
    e022:	b004      	add	sp, #16
    e024:	bd10      	pop	{r4, pc}
    e026:	6902      	ldr	r2, [r0, #16]
    e028:	611a      	str	r2, [r3, #16]
    e02a:	6882      	ldr	r2, [r0, #8]
    e02c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e030:	68c1      	ldr	r1, [r0, #12]
    e032:	2201      	movs	r2, #1
    e034:	3901      	subs	r1, #1
    e036:	408a      	lsls	r2, r1
    e038:	605a      	str	r2, [r3, #4]
    e03a:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e03e:	4a09      	ldr	r2, [pc, #36]	; (e064 <am_hal_tpiu_enable+0x9c>)
    e040:	6843      	ldr	r3, [r0, #4]
    e042:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e046:	f44f 7048 	mov.w	r0, #800	; 0x320
    e04a:	f7ff fb43 	bl	d6d4 <am_hal_flash_delay>
    e04e:	b004      	add	sp, #16
    e050:	bd10      	pop	{r4, pc}
    e052:	2405      	movs	r4, #5
    e054:	e7d4      	b.n	e000 <am_hal_tpiu_enable+0x38>
    e056:	bf00      	nop
    e058:	e0040000 	.word	0xe0040000
    e05c:	000f4240 	.word	0x000f4240
    e060:	001da380 	.word	0x001da380
    e064:	40020000 	.word	0x40020000

0000e068 <am_hal_uart_deinitialize>:
    e068:	b170      	cbz	r0, e088 <am_hal_uart_deinitialize+0x20>
    e06a:	6803      	ldr	r3, [r0, #0]
    e06c:	4a07      	ldr	r2, [pc, #28]	; (e08c <am_hal_uart_deinitialize+0x24>)
    e06e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e072:	4293      	cmp	r3, r2
    e074:	d108      	bne.n	e088 <am_hal_uart_deinitialize+0x20>
    e076:	78c2      	ldrb	r2, [r0, #3]
    e078:	2300      	movs	r3, #0
    e07a:	f36f 0200 	bfc	r2, #0, #1
    e07e:	70c2      	strb	r2, [r0, #3]
    e080:	6243      	str	r3, [r0, #36]	; 0x24
    e082:	7103      	strb	r3, [r0, #4]
    e084:	4618      	mov	r0, r3
    e086:	4770      	bx	lr
    e088:	2002      	movs	r0, #2
    e08a:	4770      	bx	lr
    e08c:	01ea9e06 	.word	0x01ea9e06

0000e090 <am_hal_uart_power_control>:
    e090:	b5f0      	push	{r4, r5, r6, r7, lr}
    e092:	4604      	mov	r4, r0
    e094:	6800      	ldr	r0, [r0, #0]
    e096:	4b39      	ldr	r3, [pc, #228]	; (e17c <am_hal_uart_power_control+0xec>)
    e098:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e09c:	429e      	cmp	r6, r3
    e09e:	b085      	sub	sp, #20
    e0a0:	d13f      	bne.n	e122 <am_hal_uart_power_control+0x92>
    e0a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e0a4:	f105 0008 	add.w	r0, r5, #8
    e0a8:	b2c7      	uxtb	r7, r0
    e0aa:	b189      	cbz	r1, e0d0 <am_hal_uart_power_control+0x40>
    e0ac:	3901      	subs	r1, #1
    e0ae:	2901      	cmp	r1, #1
    e0b0:	d834      	bhi.n	e11c <am_hal_uart_power_control+0x8c>
    e0b2:	2a00      	cmp	r2, #0
    e0b4:	d138      	bne.n	e128 <am_hal_uart_power_control+0x98>
    e0b6:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e0ba:	351c      	adds	r5, #28
    e0bc:	032d      	lsls	r5, r5, #12
    e0be:	f04f 33ff 	mov.w	r3, #4294967295
    e0c2:	646b      	str	r3, [r5, #68]	; 0x44
    e0c4:	4638      	mov	r0, r7
    e0c6:	f7ff fe33 	bl	dd30 <am_hal_pwrctrl_periph_disable>
    e0ca:	2000      	movs	r0, #0
    e0cc:	b005      	add	sp, #20
    e0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0d0:	2a00      	cmp	r2, #0
    e0d2:	d04a      	beq.n	e16a <am_hal_uart_power_control+0xda>
    e0d4:	7923      	ldrb	r3, [r4, #4]
    e0d6:	2b00      	cmp	r3, #0
    e0d8:	d04e      	beq.n	e178 <am_hal_uart_power_control+0xe8>
    e0da:	4638      	mov	r0, r7
    e0dc:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e0e0:	9101      	str	r1, [sp, #4]
    e0e2:	351c      	adds	r5, #28
    e0e4:	f7ff fdfa 	bl	dcdc <am_hal_pwrctrl_periph_enable>
    e0e8:	f7ff fcbe 	bl	da68 <am_hal_interrupt_master_disable>
    e0ec:	032d      	lsls	r5, r5, #12
    e0ee:	68a3      	ldr	r3, [r4, #8]
    e0f0:	9002      	str	r0, [sp, #8]
    e0f2:	622b      	str	r3, [r5, #32]
    e0f4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e0f8:	626a      	str	r2, [r5, #36]	; 0x24
    e0fa:	62ab      	str	r3, [r5, #40]	; 0x28
    e0fc:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e100:	62ea      	str	r2, [r5, #44]	; 0x2c
    e102:	632b      	str	r3, [r5, #48]	; 0x30
    e104:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e108:	9901      	ldr	r1, [sp, #4]
    e10a:	636a      	str	r2, [r5, #52]	; 0x34
    e10c:	63ab      	str	r3, [r5, #56]	; 0x38
    e10e:	9802      	ldr	r0, [sp, #8]
    e110:	7121      	strb	r1, [r4, #4]
    e112:	f7ff fcad 	bl	da70 <am_hal_interrupt_master_set>
    e116:	9901      	ldr	r1, [sp, #4]
    e118:	4608      	mov	r0, r1
    e11a:	e000      	b.n	e11e <am_hal_uart_power_control+0x8e>
    e11c:	2006      	movs	r0, #6
    e11e:	b005      	add	sp, #20
    e120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e122:	2002      	movs	r0, #2
    e124:	b005      	add	sp, #20
    e126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e128:	f7ff fc9e 	bl	da68 <am_hal_interrupt_master_disable>
    e12c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e130:	351c      	adds	r5, #28
    e132:	032d      	lsls	r5, r5, #12
    e134:	9003      	str	r0, [sp, #12]
    e136:	6a2b      	ldr	r3, [r5, #32]
    e138:	60a3      	str	r3, [r4, #8]
    e13a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e13c:	60e3      	str	r3, [r4, #12]
    e13e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e140:	6123      	str	r3, [r4, #16]
    e142:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e144:	6163      	str	r3, [r4, #20]
    e146:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e148:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e14a:	61a3      	str	r3, [r4, #24]
    e14c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e14e:	61e2      	str	r2, [r4, #28]
    e150:	2201      	movs	r2, #1
    e152:	6223      	str	r3, [r4, #32]
    e154:	9803      	ldr	r0, [sp, #12]
    e156:	7122      	strb	r2, [r4, #4]
    e158:	f7ff fc8a 	bl	da70 <am_hal_interrupt_master_set>
    e15c:	6823      	ldr	r3, [r4, #0]
    e15e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e162:	42b3      	cmp	r3, r6
    e164:	d1ae      	bne.n	e0c4 <am_hal_uart_power_control+0x34>
    e166:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e168:	e7a5      	b.n	e0b6 <am_hal_uart_power_control+0x26>
    e16a:	4638      	mov	r0, r7
    e16c:	9201      	str	r2, [sp, #4]
    e16e:	f7ff fdb5 	bl	dcdc <am_hal_pwrctrl_periph_enable>
    e172:	9a01      	ldr	r2, [sp, #4]
    e174:	4610      	mov	r0, r2
    e176:	e7d2      	b.n	e11e <am_hal_uart_power_control+0x8e>
    e178:	2007      	movs	r0, #7
    e17a:	e7d0      	b.n	e11e <am_hal_uart_power_control+0x8e>
    e17c:	01ea9e06 	.word	0x01ea9e06

0000e180 <am_hal_uart_tx_flush>:
    e180:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e184:	b570      	push	{r4, r5, r6, lr}
    e186:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e188:	4604      	mov	r4, r0
    e18a:	b15b      	cbz	r3, e1a4 <am_hal_uart_tx_flush+0x24>
    e18c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e18e:	b14b      	cbz	r3, e1a4 <am_hal_uart_tx_flush+0x24>
    e190:	4e0e      	ldr	r6, [pc, #56]	; (e1cc <am_hal_uart_tx_flush+0x4c>)
    e192:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e194:	fbb6 f0f0 	udiv	r0, r6, r0
    e198:	0100      	lsls	r0, r0, #4
    e19a:	f7ff fa9b 	bl	d6d4 <am_hal_flash_delay>
    e19e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e1a0:	2b00      	cmp	r3, #0
    e1a2:	d1f6      	bne.n	e192 <am_hal_uart_tx_flush+0x12>
    e1a4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e1a8:	351c      	adds	r5, #28
    e1aa:	032d      	lsls	r5, r5, #12
    e1ac:	69ab      	ldr	r3, [r5, #24]
    e1ae:	071a      	lsls	r2, r3, #28
    e1b0:	d509      	bpl.n	e1c6 <am_hal_uart_tx_flush+0x46>
    e1b2:	4e06      	ldr	r6, [pc, #24]	; (e1cc <am_hal_uart_tx_flush+0x4c>)
    e1b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e1b6:	fbb6 f3f3 	udiv	r3, r6, r3
    e1ba:	0118      	lsls	r0, r3, #4
    e1bc:	f7ff fa8a 	bl	d6d4 <am_hal_flash_delay>
    e1c0:	69ab      	ldr	r3, [r5, #24]
    e1c2:	071b      	lsls	r3, r3, #28
    e1c4:	d4f6      	bmi.n	e1b4 <am_hal_uart_tx_flush+0x34>
    e1c6:	2000      	movs	r0, #0
    e1c8:	bd70      	pop	{r4, r5, r6, pc}
    e1ca:	bf00      	nop
    e1cc:	00b71b00 	.word	0x00b71b00
    e1d0:	45203042 	.word	0x45203042
    e1d4:	30305252 	.word	0x30305252
    e1d8:	6f572078 	.word	0x6f572078
    e1dc:	72616b72 	.word	0x72616b72
    e1e0:	646e756f 	.word	0x646e756f
    e1e4:	61784520 	.word	0x61784520
    e1e8:	656c706d 	.word	0x656c706d
    e1ec:	00000a0a 	.word	0x00000a0a
    e1f0:	62616e45 	.word	0x62616e45
    e1f4:	676e696c 	.word	0x676e696c
    e1f8:	65687420 	.word	0x65687420
    e1fc:	4b323320 	.word	0x4b323320
    e200:	43207a48 	.word	0x43207a48
    e204:	74737972 	.word	0x74737972
    e208:	000a6c61 	.word	0x000a6c61
    e20c:	7369440a 	.word	0x7369440a
    e210:	696c6261 	.word	0x696c6261
    e214:	7420676e 	.word	0x7420676e
    e218:	33206568 	.word	0x33206568
    e21c:	7a484b32 	.word	0x7a484b32
    e220:	79724320 	.word	0x79724320
    e224:	6c617473 	.word	0x6c617473
    e228:	0000000a 	.word	0x0000000a
    e22c:	0a0a0a0a 	.word	0x0a0a0a0a
    e230:	0a0a0a0a 	.word	0x0a0a0a0a
    e234:	0a0a0a0a 	.word	0x0a0a0a0a
    e238:	0a0a0a0a 	.word	0x0a0a0a0a
    e23c:	00000a0a 	.word	0x00000a0a

0000e240 <g_AM_BSP_GPIO_ITM_SWO>:
    e240:	00000002                                ....

0000e244 <am_hal_cachectrl_defaults>:
    e244:	00000308                                ....

0000e248 <g_AM_HAL_GPIO_DISABLE>:
    e248:	00000003                                ....

0000e24c <g_AM_HAL_GPIO_OUTPUT>:
    e24c:	00000403                                ....

0000e250 <g_ui8Bit76Capabilities>:
    e250:	02800101 80010180 80800101 80808080     ................
    e260:	80808080 80808008 01800180 80808080     ................
    e270:	80808080 01800402 01010401 80808080     ................
    e280:	00000101                                ....

0000e284 <g_ui8Inpen>:
    e284:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e294:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e2a4:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e2b4:	00003130                                01..

0000e2b8 <g_ui8NCEtable>:
    e2b8:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e2c8:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e2d8:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e2e8:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e2f8:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e308:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e318:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e328:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e338:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e348:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e358:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e368:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e378:	32221202 43231303                       .."2..#C

0000e380 <g_ui8nCEpins>:
    e380:	02070707 00080802 01020202 01010101     ................
    e390:	01010101 01010101 01010101 01010101     ................
    e3a0:	01010101 08010101 01010008 01010101     ................
    e3b0:	00000101                                ....

0000e3b4 <g_am_hal_mcuctrl_flash_size>:
    e3b4:	00004000 00008000 00010000 00020000     .@..............
    e3c4:	00040000 00080000 00100000 00200000     .............. .
    e3d4:	00180000 00000000 00000000 00000000     ................
	...

0000e3f4 <g_am_hal_mcuctrl_sram_size>:
    e3f4:	00004000 00008000 00010000 00020000     .@..............
    e404:	00040000 00080000 00100000 00060000     ................
    e414:	000c0000 00000000 00000000 00000000     ................
	...

0000e434 <am_hal_pwrctrl_peripheral_control>:
	...
    e440:	00000001 00000004 00000004 00000002     ................
    e450:	00000008 00000008 00000004 00000008     ................
    e460:	00000008 00000008 00000008 00000008     ................
    e470:	00000010 00000010 00000010 00000020     ............ ...
    e480:	00000010 00000010 00000040 00000010     ........@.......
    e490:	00000010 00000080 00000004 00000004     ................
    e4a0:	00000100 00000004 00000004 00000200     ................
    e4b0:	00000020 00000020 00000400 00000004      ... ...........
    e4c0:	00000004 00000800 00000040 00000040     ........@...@...
    e4d0:	00001000 00000080 00000080 00002000     ............. ..
    e4e0:	00000100 00000100                       ........
