
bin/binary_counter.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 89 d4 00 00 f1 d4 00 00 1f c6 00 00     ................
    c010:	f3 d4 00 00 f3 d4 00 00 f3 d4 00 00 00 00 00 00     ................
	...
    c02c:	f5 d4 00 00 f5 d4 00 00 00 00 00 00 f5 d4 00 00     ................
    c03c:	f5 d4 00 00 f5 d4 00 00 f5 d4 00 00 f5 d4 00 00     ................
    c04c:	f5 d4 00 00 f5 d4 00 00 f5 d4 00 00 f5 d4 00 00     ................
    c05c:	f5 d4 00 00 f5 d4 00 00 f5 d4 00 00 f5 d4 00 00     ................
    c06c:	f5 d4 00 00 f5 d4 00 00 f5 d4 00 00 19 c2 00 00     ................
    c07c:	f5 d4 00 00 f5 d4 00 00 f5 d4 00 00 f5 d4 00 00     ................
    c08c:	f5 d4 00 00 f5 d4 00 00 f5 d4 00 00 f5 d4 00 00     ................
    c09c:	f5 d4 00 00 f5 d4 00 00 f5 d4 00 00 f5 d4 00 00     ................
    c0ac:	f5 d4 00 00 f5 d4 00 00 f5 d4 00 00 f5 d4 00 00     ................
    c0bc:	f5 d4 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b082      	sub	sp, #8
    c1a2:	4603      	mov	r3, r0
    c1a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    c1a8:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	db0c      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b4:	f003 021f 	and.w	r2, r3, #31
    c1b8:	4905      	ldr	r1, [pc, #20]	; (c1d0 <__NVIC_EnableIRQ+0x30>)
    c1ba:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    c1be:	095b      	lsrs	r3, r3, #5
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    c1ca:	bf00      	nop
    c1cc:	b002      	add	sp, #8
    c1ce:	4770      	bx	lr
    c1d0:	e000e100 	.word	0xe000e100

0000c1d4 <timerA0_init>:
// Function to initialize Timer A0 to interrupt every 1/4 second.
//
//*****************************************************************************
void
timerA0_init(void)
{
    c1d4:	b500      	push	{lr}
    c1d6:	b083      	sub	sp, #12
    // Enable the LFRC.
    //
#if USE_XTAL
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_XTAL_START, 0);
#else
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_LFRC_START, 0);
    c1d8:	2100      	movs	r1, #0
    c1da:	2002      	movs	r0, #2
    c1dc:	f001 fbca 	bl	d974 <am_hal_clkgen_control>
#endif

    //
    // Set up timer A0.
    //
    am_hal_ctimer_clear(0, AM_HAL_CTIMER_TIMERA);
    c1e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1e4:	2000      	movs	r0, #0
    c1e6:	f001 fceb 	bl	dbc0 <am_hal_ctimer_clear>
    am_hal_ctimer_config(0, &g_sTimer0);
    c1ea:	490a      	ldr	r1, [pc, #40]	; (c214 <timerA0_init+0x40>)
    c1ec:	2000      	movs	r0, #0
    c1ee:	f001 fc7b 	bl	dae8 <am_hal_ctimer_config>

    //
    // Set up timerA0 to 32Hz from LFRC divided to 1 second period.
    //
    ui32Period = 32;
    c1f2:	2320      	movs	r3, #32
    c1f4:	9301      	str	r3, [sp, #4]
#if USE_XTAL
    ui32Period *= 8;
#endif
    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ui32Period,
    c1f6:	9b01      	ldr	r3, [sp, #4]
    c1f8:	085b      	lsrs	r3, r3, #1
    c1fa:	9a01      	ldr	r2, [sp, #4]
    c1fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c200:	2000      	movs	r0, #0
    c202:	f001 fcf3 	bl	dbec <am_hal_ctimer_period_set>
                             (ui32Period >> 1));

    //
    // Clear the timer Interrupt
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    c206:	2001      	movs	r0, #1
    c208:	f001 fd5e 	bl	dcc8 <am_hal_ctimer_int_clear>
} // timerA0_init()
    c20c:	bf00      	nop
    c20e:	b003      	add	sp, #12
    c210:	f85d fb04 	ldr.w	pc, [sp], #4
    c214:	10001000 	.word	0x10001000

0000c218 <am_ctimer_isr>:
// Timer Interrupt Service Routine (ISR)
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
    c218:	b508      	push	{r3, lr}
    //
    // Clear TimerA0 Interrupt (write to clear).
    //
    am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    c21a:	2001      	movs	r0, #1
    c21c:	f001 fd54 	bl	dcc8 <am_hal_ctimer_int_clear>

    //
    // Increment count and set limit based on the number of LEDs available.
    //
    g_ui32TimerCount++;
    c220:	4b06      	ldr	r3, [pc, #24]	; (c23c <am_ctimer_isr+0x24>)
    c222:	681b      	ldr	r3, [r3, #0]
    c224:	3301      	adds	r3, #1
    c226:	4a05      	ldr	r2, [pc, #20]	; (c23c <am_ctimer_isr+0x24>)
    c228:	6013      	str	r3, [r2, #0]

    if ( g_ui32TimerCount >= MAX_COUNT )
    c22a:	4b04      	ldr	r3, [pc, #16]	; (c23c <am_ctimer_isr+0x24>)
    c22c:	681b      	ldr	r3, [r3, #0]
    c22e:	2b1f      	cmp	r3, #31
    c230:	d902      	bls.n	c238 <am_ctimer_isr+0x20>
    {
        //
        // Reset the global.
        //
        g_ui32TimerCount = 0;
    c232:	4b02      	ldr	r3, [pc, #8]	; (c23c <am_ctimer_isr+0x24>)
    c234:	2200      	movs	r2, #0
    c236:	601a      	str	r2, [r3, #0]
    }

} // am_ctimer_isr()
    c238:	bf00      	nop
    c23a:	bd08      	pop	{r3, pc}
    c23c:	10001078 	.word	0x10001078

0000c240 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c240:	b500      	push	{lr}
    c242:	b083      	sub	sp, #12
    am_hal_burst_avail_e    eBurstModeAvailable;

    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c244:	2100      	movs	r1, #0
    c246:	2000      	movs	r0, #0
    c248:	f001 fb94 	bl	d974 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c24c:	485e      	ldr	r0, [pc, #376]	; (c3c8 <main+0x188>)
    c24e:	f001 f9e9 	bl	d624 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c252:	f001 fa0b 	bl	d66c <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c256:	f002 f819 	bl	e28c <am_bsp_low_power_init>

#ifdef AM_BSP_NUM_LEDS
    //
    // Initialize the LED array
    //
    am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    c25a:	2105      	movs	r1, #5
    c25c:	485b      	ldr	r0, [pc, #364]	; (c3cc <main+0x18c>)
    c25e:	f000 f921 	bl	c4a4 <am_devices_led_array_init>

    //
    // Initialize the count to max so that the counting begins with 0
    // after the first trip to the ISR.
    //
    g_ui32TimerCount = MAX_COUNT;
    c262:	4b5b      	ldr	r3, [pc, #364]	; (c3d0 <main+0x190>)
    c264:	2220      	movs	r2, #32
    c266:	601a      	str	r2, [r3, #0]

    //
    // Initialize the printf interface for ITM/SWO output.
    //
    am_bsp_itm_printf_enable();
    c268:	f002 f8da 	bl	e420 <am_bsp_itm_printf_enable>

    //
    // Clear the terminal and print the banner.
    //
    am_util_stdio_terminal_clear();
    c26c:	f001 f904 	bl	d478 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Binary Counter Example for %s\n", AM_HAL_DEVICE_NAME);
    c270:	4958      	ldr	r1, [pc, #352]	; (c3d4 <main+0x194>)
    c272:	4859      	ldr	r0, [pc, #356]	; (c3d8 <main+0x198>)
    c274:	f001 f8e0 	bl	d438 <am_util_stdio_printf>
    am_util_stdio_printf("  (Timer clock source is " BC_CLKSRC ")\n");
    c278:	4858      	ldr	r0, [pc, #352]	; (c3dc <main+0x19c>)
    c27a:	f001 f8dd 	bl	d438 <am_util_stdio_printf>

    //
    // Put into TurboSPOT mode
    //
    if ( am_hal_burst_mode_initialize(&eBurstModeAvailable) == AM_HAL_STATUS_SUCCESS )
    c27e:	f10d 0302 	add.w	r3, sp, #2
    c282:	4618      	mov	r0, r3
    c284:	f001 f938 	bl	d4f8 <am_hal_burst_mode_initialize>
    c288:	4603      	mov	r3, r0
    c28a:	2b00      	cmp	r3, #0
    c28c:	d11f      	bne.n	c2ce <main+0x8e>
    {
        if ( eBurstModeAvailable == AM_HAL_BURST_AVAIL )
    c28e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c292:	2b00      	cmp	r3, #0
    c294:	d117      	bne.n	c2c6 <main+0x86>
        {
            am_util_stdio_printf("\nTurboSPOT mode is Available\n");
    c296:	4852      	ldr	r0, [pc, #328]	; (c3e0 <main+0x1a0>)
    c298:	f001 f8ce 	bl	d438 <am_util_stdio_printf>

            //
            // It's available, put the MCU into TurboSPOT mode.
            //
            if ( am_hal_burst_mode_enable(&eBurstMode) == AM_HAL_STATUS_SUCCESS )
    c29c:	f10d 0303 	add.w	r3, sp, #3
    c2a0:	4618      	mov	r0, r3
    c2a2:	f001 f963 	bl	d56c <am_hal_burst_mode_enable>
    c2a6:	4603      	mov	r3, r0
    c2a8:	2b00      	cmp	r3, #0
    c2aa:	d108      	bne.n	c2be <main+0x7e>
            {
                if ( eBurstMode == AM_HAL_BURST_MODE )
    c2ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2b0:	2b00      	cmp	r3, #0
    c2b2:	d10f      	bne.n	c2d4 <main+0x94>
                {
                    am_util_stdio_printf("Operating in TurboSPOT mode (%dMHz)\n",
    c2b4:	2160      	movs	r1, #96	; 0x60
    c2b6:	484b      	ldr	r0, [pc, #300]	; (c3e4 <main+0x1a4>)
    c2b8:	f001 f8be 	bl	d438 <am_util_stdio_printf>
    c2bc:	e00a      	b.n	c2d4 <main+0x94>
                                         AM_HAL_CLKGEN_FREQ_MAX_MHZ * 2);
                }
            }
            else
            {
                am_util_stdio_printf("Failed to Enable TurboSPOT mode operation\n");
    c2be:	484a      	ldr	r0, [pc, #296]	; (c3e8 <main+0x1a8>)
    c2c0:	f001 f8ba 	bl	d438 <am_util_stdio_printf>
    c2c4:	e006      	b.n	c2d4 <main+0x94>
            }
        }
        else
        {
            am_util_stdio_printf("TurboSPOT mode is Not Available\n");
    c2c6:	4849      	ldr	r0, [pc, #292]	; (c3ec <main+0x1ac>)
    c2c8:	f001 f8b6 	bl	d438 <am_util_stdio_printf>
    c2cc:	e002      	b.n	c2d4 <main+0x94>
        }
    }
    else
    {
        am_util_stdio_printf("Failed to Initialize for TurboSPOT mode operation\n");
    c2ce:	4848      	ldr	r0, [pc, #288]	; (c3f0 <main+0x1b0>)
    c2d0:	f001 f8b2 	bl	d438 <am_util_stdio_printf>
    }

    //
    // TimerA0 init.
    //
    timerA0_init();
    c2d4:	f7ff ff7e 	bl	c1d4 <timerA0_init>

    //
    // Enable the timer Interrupt.
    //
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    c2d8:	2001      	movs	r0, #1
    c2da:	f001 fce1 	bl	dca0 <am_hal_ctimer_int_enable>

    //
    // Enable the timer interrupt in the NVIC.
    //
    NVIC_EnableIRQ(CTIMER_IRQn);
    c2de:	200e      	movs	r0, #14
    c2e0:	f7ff ff5e 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c2e4:	f001 fecc 	bl	e080 <am_hal_interrupt_master_enable>

    //
    // Start timer A0
    //
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    c2e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c2ec:	2000      	movs	r0, #0
    c2ee:	f001 fc39 	bl	db64 <am_hal_ctimer_start>

    //
    // We are done printing. Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c2f2:	f002 f85f 	bl	e3b4 <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c2f6:	2001      	movs	r0, #1
    c2f8:	f001 ff6a 	bl	e1d0 <am_hal_sysctrl_sleep>

#ifdef AM_BSP_NUM_LEDS
        //
        // Set the LEDs.
        //
        am_devices_led_array_out(am_bsp_psLEDs, AM_BSP_NUM_LEDS,
    c2fc:	4b34      	ldr	r3, [pc, #208]	; (c3d0 <main+0x190>)
    c2fe:	681b      	ldr	r3, [r3, #0]
    c300:	461a      	mov	r2, r3
    c302:	2105      	movs	r1, #5
    c304:	4831      	ldr	r0, [pc, #196]	; (c3cc <main+0x18c>)
    c306:	f000 f964 	bl	c5d2 <am_devices_led_array_out>
                                 g_ui32TimerCount);
#endif
        //
        // Enable debug printf messages using ITM on SWO pin
        //
        am_bsp_debug_printf_enable();
    c30a:	f001 ffdf 	bl	e2cc <am_bsp_debug_printf_enable>

        am_util_stdio_printf("%2d ", g_ui32TimerCount);
    c30e:	4b30      	ldr	r3, [pc, #192]	; (c3d0 <main+0x190>)
    c310:	681b      	ldr	r3, [r3, #0]
    c312:	4619      	mov	r1, r3
    c314:	4837      	ldr	r0, [pc, #220]	; (c3f4 <main+0x1b4>)
    c316:	f001 f88f 	bl	d438 <am_util_stdio_printf>

        if ( (g_ui32TimerCount & ((MAX_COUNT / 2) - 1)) >= ((MAX_COUNT / 2) - 1) )
    c31a:	4b2d      	ldr	r3, [pc, #180]	; (c3d0 <main+0x190>)
    c31c:	681b      	ldr	r3, [r3, #0]
    c31e:	f003 030f 	and.w	r3, r3, #15
    c322:	2b0e      	cmp	r3, #14
    c324:	d94d      	bls.n	c3c2 <main+0x182>
        {
            //
            // Take this opportunity to toggle TurboSPOT mode.
            //
            if ( (g_ui32TimerCount >= (MAX_COUNT - 1 ))  &&
    c326:	4b2a      	ldr	r3, [pc, #168]	; (c3d0 <main+0x190>)
    c328:	681b      	ldr	r3, [r3, #0]
    c32a:	2b1e      	cmp	r3, #30
    c32c:	d946      	bls.n	c3bc <main+0x17c>
                 eBurstModeAvailable == AM_HAL_BURST_AVAIL )
    c32e:	f89d 3002 	ldrb.w	r3, [sp, #2]
            if ( (g_ui32TimerCount >= (MAX_COUNT - 1 ))  &&
    c332:	2b00      	cmp	r3, #0
    c334:	d142      	bne.n	c3bc <main+0x17c>
            {
                if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
    c336:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    c33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c33c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c340:	b2db      	uxtb	r3, r3
    c342:	2b00      	cmp	r3, #0
    c344:	d019      	beq.n	c37a <main+0x13a>
                {
                    ui32Ret = am_hal_burst_mode_disable(&eBurstMode);
    c346:	f10d 0303 	add.w	r3, sp, #3
    c34a:	4618      	mov	r0, r3
    c34c:	f001 f93e 	bl	d5cc <am_hal_burst_mode_disable>
    c350:	9001      	str	r0, [sp, #4]
                    if ( (ui32Ret == AM_HAL_STATUS_SUCCESS) &&
    c352:	9b01      	ldr	r3, [sp, #4]
    c354:	2b00      	cmp	r3, #0
    c356:	d108      	bne.n	c36a <main+0x12a>
                         (eBurstMode == AM_HAL_NORMAL_MODE) )
    c358:	f89d 3003 	ldrb.w	r3, [sp, #3]
                    if ( (ui32Ret == AM_HAL_STATUS_SUCCESS) &&
    c35c:	2b01      	cmp	r3, #1
    c35e:	d104      	bne.n	c36a <main+0x12a>
                    {
                        am_util_stdio_printf("\n\nSwitching to Normal mode (%dMHZ)",
    c360:	2130      	movs	r1, #48	; 0x30
    c362:	4825      	ldr	r0, [pc, #148]	; (c3f8 <main+0x1b8>)
    c364:	f001 f868 	bl	d438 <am_util_stdio_printf>
    c368:	e028      	b.n	c3bc <main+0x17c>
                                             AM_HAL_CLKGEN_FREQ_MAX_MHZ);
                    }
                    else
                    {
                        am_util_stdio_printf("\nError (%d) while switching from Normal to TurboSPOT, eBurstMode=%d.",
    c36a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c36e:	461a      	mov	r2, r3
    c370:	9901      	ldr	r1, [sp, #4]
    c372:	4822      	ldr	r0, [pc, #136]	; (c3fc <main+0x1bc>)
    c374:	f001 f860 	bl	d438 <am_util_stdio_printf>
    c378:	e020      	b.n	c3bc <main+0x17c>
                                             ui32Ret, eBurstMode);
                    }
                }
                else if ( am_hal_burst_mode_status() == AM_HAL_NORMAL_MODE )
    c37a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    c37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c380:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c384:	b2db      	uxtb	r3, r3
    c386:	2b00      	cmp	r3, #0
    c388:	d118      	bne.n	c3bc <main+0x17c>
                {
                    ui32Ret = am_hal_burst_mode_enable(&eBurstMode);
    c38a:	f10d 0303 	add.w	r3, sp, #3
    c38e:	4618      	mov	r0, r3
    c390:	f001 f8ec 	bl	d56c <am_hal_burst_mode_enable>
    c394:	9001      	str	r0, [sp, #4]
                    if ( (ui32Ret == AM_HAL_STATUS_SUCCESS) &&
    c396:	9b01      	ldr	r3, [sp, #4]
    c398:	2b00      	cmp	r3, #0
    c39a:	d108      	bne.n	c3ae <main+0x16e>
                         (eBurstMode == AM_HAL_BURST_MODE) )
    c39c:	f89d 3003 	ldrb.w	r3, [sp, #3]
                    if ( (ui32Ret == AM_HAL_STATUS_SUCCESS) &&
    c3a0:	2b00      	cmp	r3, #0
    c3a2:	d104      	bne.n	c3ae <main+0x16e>
                    {
                        am_util_stdio_printf("\n\nSwitching to TurboSPOT mode (%dMHz)",
    c3a4:	2160      	movs	r1, #96	; 0x60
    c3a6:	4816      	ldr	r0, [pc, #88]	; (c400 <main+0x1c0>)
    c3a8:	f001 f846 	bl	d438 <am_util_stdio_printf>
    c3ac:	e006      	b.n	c3bc <main+0x17c>
                                             AM_HAL_CLKGEN_FREQ_MAX_MHZ * 2);
                    }
                    else
                    {
                        am_util_stdio_printf("\nError (%d) while switching from TurboSPOT to Normal, eBurstMode=%d.",
    c3ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c3b2:	461a      	mov	r2, r3
    c3b4:	9901      	ldr	r1, [sp, #4]
    c3b6:	4813      	ldr	r0, [pc, #76]	; (c404 <main+0x1c4>)
    c3b8:	f001 f83e 	bl	d438 <am_util_stdio_printf>
                                             ui32Ret, eBurstMode);
                    }
                }
            }
            am_util_stdio_printf("\n");
    c3bc:	4812      	ldr	r0, [pc, #72]	; (c408 <main+0x1c8>)
    c3be:	f001 f83b 	bl	d438 <am_util_stdio_printf>


        //
        // We are done printing. Disable debug printf messages on ITM.
        //
        am_bsp_debug_printf_disable();
    c3c2:	f001 fff7 	bl	e3b4 <am_bsp_debug_printf_disable>
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c3c6:	e796      	b.n	c2f6 <main+0xb6>
    c3c8:	0000f384 	.word	0x0000f384
    c3cc:	10001028 	.word	0x10001028
    c3d0:	10001078 	.word	0x10001078
    c3d4:	0000f16c 	.word	0x0000f16c
    c3d8:	0000f17c 	.word	0x0000f17c
    c3dc:	0000f19c 	.word	0x0000f19c
    c3e0:	0000f1bc 	.word	0x0000f1bc
    c3e4:	0000f1dc 	.word	0x0000f1dc
    c3e8:	0000f204 	.word	0x0000f204
    c3ec:	0000f230 	.word	0x0000f230
    c3f0:	0000f254 	.word	0x0000f254
    c3f4:	0000f288 	.word	0x0000f288
    c3f8:	0000f290 	.word	0x0000f290
    c3fc:	0000f2b4 	.word	0x0000f2b4
    c400:	0000f2fc 	.word	0x0000f2fc
    c404:	0000f324 	.word	0x0000f324
    c408:	0000f36c 	.word	0x0000f36c

0000c40c <am_devices_led_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_init(am_devices_led_t *psLED)
{
    c40c:	b500      	push	{lr}
    c40e:	b083      	sub	sp, #12
    c410:	9001      	str	r0, [sp, #4]
    if ( (psLED == NULL)    ||
    c412:	9b01      	ldr	r3, [sp, #4]
    c414:	2b00      	cmp	r3, #0
    c416:	d03d      	beq.n	c494 <am_devices_led_init+0x88>
         (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c418:	9b01      	ldr	r3, [sp, #4]
    c41a:	681b      	ldr	r3, [r3, #0]
    if ( (psLED == NULL)    ||
    c41c:	2b31      	cmp	r3, #49	; 0x31
    c41e:	d839      	bhi.n	c494 <am_devices_led_init+0x88>
#else
#if AM_APOLLO3_GPIO
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    c420:	9b01      	ldr	r3, [sp, #4]
    c422:	685b      	ldr	r3, [r3, #4]
    c424:	f003 0302 	and.w	r3, r3, #2
    c428:	2b00      	cmp	r3, #0
    c42a:	d019      	beq.n	c460 <am_devices_led_init+0x54>
    {
        //
        // Configure the pin as a push-pull GPIO output.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    c42c:	9b01      	ldr	r3, [sp, #4]
    c42e:	681b      	ldr	r3, [r3, #0]
    c430:	4a1a      	ldr	r2, [pc, #104]	; (c49c <am_devices_led_init+0x90>)
    c432:	6811      	ldr	r1, [r2, #0]
    c434:	4618      	mov	r0, r3
    c436:	f001 fca9 	bl	dd8c <am_hal_gpio_pinconfig>
        // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
        // enable, normally a tri-state control, instead functions as an enable
        // for Fast GPIO. Its state does not matter on previous chips, so for
        // normal GPIO usage on Apollo3, it must be disabled.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    c43a:	9b01      	ldr	r3, [sp, #4]
    c43c:	681b      	ldr	r3, [r3, #0]
    c43e:	2103      	movs	r1, #3
    c440:	4618      	mov	r0, r3
    c442:	f001 fdd9 	bl	dff8 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c446:	9b01      	ldr	r3, [sp, #4]
    c448:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c44a:	9b01      	ldr	r3, [sp, #4]
    c44c:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    c44e:	b2db      	uxtb	r3, r3
    c450:	f003 0301 	and.w	r3, r3, #1
    c454:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c456:	4619      	mov	r1, r3
    c458:	4610      	mov	r0, r2
    c45a:	f001 fdcd 	bl	dff8 <am_hal_gpio_state_write>
    c45e:	e01a      	b.n	c496 <am_devices_led_init+0x8a>
    else
    {
        //
        // Configure the pin as a tri-state GPIO.
        //
        am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    c460:	9b01      	ldr	r3, [sp, #4]
    c462:	681b      	ldr	r3, [r3, #0]
    c464:	4a0e      	ldr	r2, [pc, #56]	; (c4a0 <am_devices_led_init+0x94>)
    c466:	6811      	ldr	r1, [r2, #0]
    c468:	4618      	mov	r0, r3
    c46a:	f001 fc8f 	bl	dd8c <am_hal_gpio_pinconfig>

        //
        // Disable the output driver, and set the output value to the LEDs "ON"
        // state.
        //
        am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    c46e:	9b01      	ldr	r3, [sp, #4]
    c470:	681b      	ldr	r3, [r3, #0]
    c472:	2103      	movs	r1, #3
    c474:	4618      	mov	r0, r3
    c476:	f001 fdbf 	bl	dff8 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c47a:	9b01      	ldr	r3, [sp, #4]
    c47c:	681a      	ldr	r2, [r3, #0]
                                psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c47e:	9b01      	ldr	r3, [sp, #4]
    c480:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    c482:	b2db      	uxtb	r3, r3
    c484:	f003 0301 	and.w	r3, r3, #1
    c488:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLED->ui32GPIONumber,
    c48a:	4619      	mov	r1, r3
    c48c:	4610      	mov	r0, r2
    c48e:	f001 fdb3 	bl	dff8 <am_hal_gpio_state_write>
    c492:	e000      	b.n	c496 <am_devices_led_init+0x8a>
        return;
    c494:	bf00      	nop
                                    psLED->ui32Polarity &
                                    AM_DEVICES_LED_POL_POLARITY_M );
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    c496:	b003      	add	sp, #12
    c498:	f85d fb04 	ldr.w	pc, [sp], #4
    c49c:	0000f38c 	.word	0x0000f38c
    c4a0:	0000f390 	.word	0x0000f390

0000c4a4 <am_devices_led_array_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
{
    c4a4:	b500      	push	{lr}
    c4a6:	b085      	sub	sp, #20
    c4a8:	9001      	str	r0, [sp, #4]
    c4aa:	9100      	str	r1, [sp, #0]
    uint32_t i;

    if ( (psLEDs == NULL)                       ||
    c4ac:	9b01      	ldr	r3, [sp, #4]
    c4ae:	2b00      	cmp	r3, #0
    c4b0:	d014      	beq.n	c4dc <am_devices_led_array_init+0x38>
    c4b2:	9b00      	ldr	r3, [sp, #0]
    c4b4:	2b1f      	cmp	r3, #31
    c4b6:	d811      	bhi.n	c4dc <am_devices_led_array_init+0x38>
    }

    //
    // Loop through the list of LEDs, configuring each one individually.
    //
    for ( i = 0; i < ui32NumLEDs; i++ )
    c4b8:	2300      	movs	r3, #0
    c4ba:	9303      	str	r3, [sp, #12]
    c4bc:	e009      	b.n	c4d2 <am_devices_led_array_init+0x2e>
    {
        am_devices_led_init(psLEDs + i);
    c4be:	9b03      	ldr	r3, [sp, #12]
    c4c0:	00db      	lsls	r3, r3, #3
    c4c2:	9a01      	ldr	r2, [sp, #4]
    c4c4:	4413      	add	r3, r2
    c4c6:	4618      	mov	r0, r3
    c4c8:	f7ff ffa0 	bl	c40c <am_devices_led_init>
    for ( i = 0; i < ui32NumLEDs; i++ )
    c4cc:	9b03      	ldr	r3, [sp, #12]
    c4ce:	3301      	adds	r3, #1
    c4d0:	9303      	str	r3, [sp, #12]
    c4d2:	9a03      	ldr	r2, [sp, #12]
    c4d4:	9b00      	ldr	r3, [sp, #0]
    c4d6:	429a      	cmp	r2, r3
    c4d8:	d3f1      	bcc.n	c4be <am_devices_led_array_init+0x1a>
    c4da:	e000      	b.n	c4de <am_devices_led_array_init+0x3a>
        return;
    c4dc:	bf00      	nop
    }
}
    c4de:	b005      	add	sp, #20
    c4e0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c4e4 <am_devices_led_on>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    c4e4:	b500      	push	{lr}
    c4e6:	b083      	sub	sp, #12
    c4e8:	9001      	str	r0, [sp, #4]
    c4ea:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    c4ec:	9b01      	ldr	r3, [sp, #4]
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	d02e      	beq.n	c550 <am_devices_led_on+0x6c>
    c4f2:	9b00      	ldr	r3, [sp, #0]
    c4f4:	2b1e      	cmp	r3, #30
    c4f6:	d82b      	bhi.n	c550 <am_devices_led_on+0x6c>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c4f8:	9b00      	ldr	r3, [sp, #0]
    c4fa:	00db      	lsls	r3, r3, #3
    c4fc:	9a01      	ldr	r2, [sp, #4]
    c4fe:	4413      	add	r3, r2
    c500:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    c502:	2b31      	cmp	r3, #49	; 0x31
    c504:	d824      	bhi.n	c550 <am_devices_led_on+0x6c>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    c506:	9b00      	ldr	r3, [sp, #0]
    c508:	00db      	lsls	r3, r3, #3
    c50a:	9a01      	ldr	r2, [sp, #4]
    c50c:	4413      	add	r3, r2
    c50e:	685b      	ldr	r3, [r3, #4]
    c510:	f003 0302 	and.w	r3, r3, #2
    c514:	2b00      	cmp	r3, #0
    c516:	d011      	beq.n	c53c <am_devices_led_on+0x58>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c518:	9b00      	ldr	r3, [sp, #0]
    c51a:	00db      	lsls	r3, r3, #3
    c51c:	9a01      	ldr	r2, [sp, #4]
    c51e:	4413      	add	r3, r2
    c520:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c522:	9b00      	ldr	r3, [sp, #0]
    c524:	00db      	lsls	r3, r3, #3
    c526:	9a01      	ldr	r2, [sp, #4]
    c528:	4413      	add	r3, r2
    c52a:	685b      	ldr	r3, [r3, #4]
                                AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    c52c:	b2db      	uxtb	r3, r3
    c52e:	f003 0301 	and.w	r3, r3, #1
    c532:	b2db      	uxtb	r3, r3
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c534:	4619      	mov	r1, r3
    c536:	f001 fd5f 	bl	dff8 <am_hal_gpio_state_write>
    c53a:	e00a      	b.n	c552 <am_devices_led_on+0x6e>
    else
    {
        //
        // Turn on the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c53c:	9b00      	ldr	r3, [sp, #0]
    c53e:	00db      	lsls	r3, r3, #3
    c540:	9a01      	ldr	r2, [sp, #4]
    c542:	4413      	add	r3, r2
    c544:	681b      	ldr	r3, [r3, #0]
    c546:	2104      	movs	r1, #4
    c548:	4618      	mov	r0, r3
    c54a:	f001 fd55 	bl	dff8 <am_hal_gpio_state_write>
    c54e:	e000      	b.n	c552 <am_devices_led_on+0x6e>
        return;
    c550:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    c552:	b003      	add	sp, #12
    c554:	f85d fb04 	ldr.w	pc, [sp], #4

0000c558 <am_devices_led_off>:
//! @return None.
//
//*****************************************************************************
void
am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
{
    c558:	b500      	push	{lr}
    c55a:	b083      	sub	sp, #12
    c55c:	9001      	str	r0, [sp, #4]
    c55e:	9100      	str	r1, [sp, #0]
    if ( (psLEDs == NULL)                       ||
    c560:	9b01      	ldr	r3, [sp, #4]
    c562:	2b00      	cmp	r3, #0
    c564:	d031      	beq.n	c5ca <am_devices_led_off+0x72>
    c566:	9b00      	ldr	r3, [sp, #0]
    c568:	2b1e      	cmp	r3, #30
    c56a:	d82e      	bhi.n	c5ca <am_devices_led_off+0x72>
         (ui32LEDNum >= MAX_LEDS)               ||
         (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    c56c:	9b00      	ldr	r3, [sp, #0]
    c56e:	00db      	lsls	r3, r3, #3
    c570:	9a01      	ldr	r2, [sp, #4]
    c572:	4413      	add	r3, r2
    c574:	681b      	ldr	r3, [r3, #0]
         (ui32LEDNum >= MAX_LEDS)               ||
    c576:	2b31      	cmp	r3, #49	; 0x31
    c578:	d827      	bhi.n	c5ca <am_devices_led_off+0x72>
#else
#if (1 == AM_APOLLO3_GPIO)
    //
    // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    //
    if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    c57a:	9b00      	ldr	r3, [sp, #0]
    c57c:	00db      	lsls	r3, r3, #3
    c57e:	9a01      	ldr	r2, [sp, #4]
    c580:	4413      	add	r3, r2
    c582:	685b      	ldr	r3, [r3, #4]
    c584:	f003 0302 	and.w	r3, r3, #2
    c588:	2b00      	cmp	r3, #0
    c58a:	d014      	beq.n	c5b6 <am_devices_led_off+0x5e>
    {
        //
        // Set the output to the correct state for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c58c:	9b00      	ldr	r3, [sp, #0]
    c58e:	00db      	lsls	r3, r3, #3
    c590:	9a01      	ldr	r2, [sp, #4]
    c592:	4413      	add	r3, r2
    c594:	6818      	ldr	r0, [r3, #0]
                                psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    c596:	9b00      	ldr	r3, [sp, #0]
    c598:	00db      	lsls	r3, r3, #3
    c59a:	9a01      	ldr	r2, [sp, #4]
    c59c:	4413      	add	r3, r2
    c59e:	685b      	ldr	r3, [r3, #4]
    c5a0:	f003 0301 	and.w	r3, r3, #1
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	bf0c      	ite	eq
    c5a8:	2301      	moveq	r3, #1
    c5aa:	2300      	movne	r3, #0
    c5ac:	b2db      	uxtb	r3, r3
    c5ae:	4619      	mov	r1, r3
    c5b0:	f001 fd22 	bl	dff8 <am_hal_gpio_state_write>
    c5b4:	e00a      	b.n	c5cc <am_devices_led_off+0x74>
    else
    {
        //
        // Turn off the output driver for the LED.
        //
        am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    c5b6:	9b00      	ldr	r3, [sp, #0]
    c5b8:	00db      	lsls	r3, r3, #3
    c5ba:	9a01      	ldr	r2, [sp, #4]
    c5bc:	4413      	add	r3, r2
    c5be:	681b      	ldr	r3, [r3, #0]
    c5c0:	2103      	movs	r1, #3
    c5c2:	4618      	mov	r0, r3
    c5c4:	f001 fd18 	bl	dff8 <am_hal_gpio_state_write>
    c5c8:	e000      	b.n	c5cc <am_devices_led_off+0x74>
        return;
    c5ca:	bf00      	nop
        //
        am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    }
#endif // AM_APOLLO3_GPIO
#endif
}
    c5cc:	b003      	add	sp, #12
    c5ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000c5d2 <am_devices_led_array_out>:
//
//*****************************************************************************
void
am_devices_led_array_out(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs,
                         uint32_t ui32Value)
{
    c5d2:	b500      	push	{lr}
    c5d4:	b087      	sub	sp, #28
    c5d6:	9003      	str	r0, [sp, #12]
    c5d8:	9102      	str	r1, [sp, #8]
    c5da:	9201      	str	r2, [sp, #4]
    uint32_t i;

    for ( i = 0; i < ui32NumLEDs; i++ )
    c5dc:	2300      	movs	r3, #0
    c5de:	9305      	str	r3, [sp, #20]
    c5e0:	e014      	b.n	c60c <am_devices_led_array_out+0x3a>
    {
        if ( ui32Value & (1 << i) )
    c5e2:	2201      	movs	r2, #1
    c5e4:	9b05      	ldr	r3, [sp, #20]
    c5e6:	fa02 f303 	lsl.w	r3, r2, r3
    c5ea:	461a      	mov	r2, r3
    c5ec:	9b01      	ldr	r3, [sp, #4]
    c5ee:	4013      	ands	r3, r2
    c5f0:	2b00      	cmp	r3, #0
    c5f2:	d004      	beq.n	c5fe <am_devices_led_array_out+0x2c>
        {
            am_devices_led_on(psLEDs, i);
    c5f4:	9905      	ldr	r1, [sp, #20]
    c5f6:	9803      	ldr	r0, [sp, #12]
    c5f8:	f7ff ff74 	bl	c4e4 <am_devices_led_on>
    c5fc:	e003      	b.n	c606 <am_devices_led_array_out+0x34>
        }
        else
        {
            am_devices_led_off(psLEDs, i);
    c5fe:	9905      	ldr	r1, [sp, #20]
    c600:	9803      	ldr	r0, [sp, #12]
    c602:	f7ff ffa9 	bl	c558 <am_devices_led_off>
    for ( i = 0; i < ui32NumLEDs; i++ )
    c606:	9b05      	ldr	r3, [sp, #20]
    c608:	3301      	adds	r3, #1
    c60a:	9305      	str	r3, [sp, #20]
    c60c:	9a05      	ldr	r2, [sp, #20]
    c60e:	9b02      	ldr	r3, [sp, #8]
    c610:	429a      	cmp	r2, r3
    c612:	d3e6      	bcc.n	c5e2 <am_devices_led_array_out+0x10>
        }
    }
}
    c614:	bf00      	nop
    c616:	bf00      	nop
    c618:	b007      	add	sp, #28
    c61a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c61e <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c61e:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c620:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c624:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c626:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c62a:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c62e:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c632:	f000 f809 	bl	c648 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c636:	bd01      	pop	{r0, pc}
}
    c638:	bf00      	nop
    c63a:	4618      	mov	r0, r3

0000c63c <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c63c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c63e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c640:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c642:	4770      	bx	lr
}
    c644:	bf00      	nop
    c646:	4618      	mov	r0, r3

0000c648 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c648:	b500      	push	{lr}
    c64a:	b097      	sub	sp, #92	; 0x5c
    c64c:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c64e:	ab03      	add	r3, sp, #12
    c650:	2200      	movs	r2, #0
    c652:	601a      	str	r2, [r3, #0]
    c654:	605a      	str	r2, [r3, #4]
    c656:	609a      	str	r2, [r3, #8]
    c658:	60da      	str	r2, [r3, #12]
    c65a:	611a      	str	r2, [r3, #16]
    c65c:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    c65e:	2300      	movs	r3, #0
    c660:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c662:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c664:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c666:	4b2e      	ldr	r3, [pc, #184]	; (c720 <am_util_faultisr_collect_data+0xd8>)
    c668:	681b      	ldr	r3, [r3, #0]
    c66a:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c66c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c66e:	b2db      	uxtb	r3, r3
    c670:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c676:	0a1b      	lsrs	r3, r3, #8
    c678:	b2db      	uxtb	r3, r3
    c67a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c67e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c680:	0c1b      	lsrs	r3, r3, #16
    c682:	b29b      	uxth	r3, r3
    c684:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c688:	4b26      	ldr	r3, [pc, #152]	; (c724 <am_util_faultisr_collect_data+0xdc>)
    c68a:	681b      	ldr	r3, [r3, #0]
    c68c:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c68e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    c692:	b2db      	uxtb	r3, r3
    c694:	f003 0302 	and.w	r3, r3, #2
    c698:	2b00      	cmp	r3, #0
    c69a:	d005      	beq.n	c6a8 <am_util_faultisr_collect_data+0x60>
    c69c:	9901      	ldr	r1, [sp, #4]
    c69e:	2006      	movs	r0, #6
    c6a0:	f7ff ffcc 	bl	c63c <getStackedReg>
    c6a4:	4603      	mov	r3, r0
    c6a6:	e001      	b.n	c6ac <am_util_faultisr_collect_data+0x64>
    c6a8:	f04f 33ff 	mov.w	r3, #4294967295
    c6ac:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c6ae:	9901      	ldr	r1, [sp, #4]
    c6b0:	2000      	movs	r0, #0
    c6b2:	f7ff ffc3 	bl	c63c <getStackedReg>
    c6b6:	4603      	mov	r3, r0
    c6b8:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c6ba:	9901      	ldr	r1, [sp, #4]
    c6bc:	2001      	movs	r0, #1
    c6be:	f7ff ffbd 	bl	c63c <getStackedReg>
    c6c2:	4603      	mov	r3, r0
    c6c4:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c6c6:	9901      	ldr	r1, [sp, #4]
    c6c8:	2002      	movs	r0, #2
    c6ca:	f7ff ffb7 	bl	c63c <getStackedReg>
    c6ce:	4603      	mov	r3, r0
    c6d0:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c6d2:	9901      	ldr	r1, [sp, #4]
    c6d4:	2003      	movs	r0, #3
    c6d6:	f7ff ffb1 	bl	c63c <getStackedReg>
    c6da:	4603      	mov	r3, r0
    c6dc:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c6de:	9901      	ldr	r1, [sp, #4]
    c6e0:	2004      	movs	r0, #4
    c6e2:	f7ff ffab 	bl	c63c <getStackedReg>
    c6e6:	4603      	mov	r3, r0
    c6e8:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c6ea:	9901      	ldr	r1, [sp, #4]
    c6ec:	2005      	movs	r0, #5
    c6ee:	f7ff ffa5 	bl	c63c <getStackedReg>
    c6f2:	4603      	mov	r3, r0
    c6f4:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c6f6:	9901      	ldr	r1, [sp, #4]
    c6f8:	2006      	movs	r0, #6
    c6fa:	f7ff ff9f 	bl	c63c <getStackedReg>
    c6fe:	4603      	mov	r3, r0
    c700:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c702:	9901      	ldr	r1, [sp, #4]
    c704:	2007      	movs	r0, #7
    c706:	f7ff ff99 	bl	c63c <getStackedReg>
    c70a:	4603      	mov	r3, r0
    c70c:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c70e:	ab03      	add	r3, sp, #12
    c710:	4619      	mov	r1, r3
    c712:	2002      	movs	r0, #2
    c714:	f001 fcc0 	bl	e098 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    c718:	2300      	movs	r3, #0
    c71a:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c71c:	e7fe      	b.n	c71c <am_util_faultisr_collect_data+0xd4>
    c71e:	bf00      	nop
    c720:	e000ed28 	.word	0xe000ed28
    c724:	e000ed38 	.word	0xe000ed38

0000c728 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c728:	b082      	sub	sp, #8
    c72a:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    c72c:	4a02      	ldr	r2, [pc, #8]	; (c738 <am_util_stdio_printf_init+0x10>)
    c72e:	9b01      	ldr	r3, [sp, #4]
    c730:	6013      	str	r3, [r2, #0]
}
    c732:	bf00      	nop
    c734:	b002      	add	sp, #8
    c736:	4770      	bx	lr
    c738:	1000107c 	.word	0x1000107c

0000c73c <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c73c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c740:	b098      	sub	sp, #96	; 0x60
    c742:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c746:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c74a:	f04f 0000 	mov.w	r0, #0
    c74e:	f04f 0100 	mov.w	r1, #0
    c752:	0018      	movs	r0, r3
    c754:	2100      	movs	r1, #0
    c756:	ea50 0301 	orrs.w	r3, r0, r1
    c75a:	f000 80b0 	beq.w	c8be <divu64_10+0x182>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c75e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c762:	f04f 0400 	mov.w	r4, #0
    c766:	f04f 0500 	mov.w	r5, #0
    c76a:	0854      	lsrs	r4, r2, #1
    c76c:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
    c770:	085d      	lsrs	r5, r3, #1
    c772:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c776:	f04f 0000 	mov.w	r0, #0
    c77a:	f04f 0100 	mov.w	r1, #0
    c77e:	0890      	lsrs	r0, r2, #2
    c780:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
    c784:	0899      	lsrs	r1, r3, #2
    c786:	eb14 0a00 	adds.w	sl, r4, r0
    c78a:	eb45 0b01 	adc.w	fp, r5, r1
    c78e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
        q64 += (q64 >> 4);
    c792:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c796:	f04f 0000 	mov.w	r0, #0
    c79a:	f04f 0100 	mov.w	r1, #0
    c79e:	0910      	lsrs	r0, r2, #4
    c7a0:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    c7a4:	0919      	lsrs	r1, r3, #4
    c7a6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7aa:	1814      	adds	r4, r2, r0
    c7ac:	9402      	str	r4, [sp, #8]
    c7ae:	414b      	adcs	r3, r1
    c7b0:	9303      	str	r3, [sp, #12]
    c7b2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    c7b6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 8);
    c7ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7be:	f04f 0000 	mov.w	r0, #0
    c7c2:	f04f 0100 	mov.w	r1, #0
    c7c6:	0a10      	lsrs	r0, r2, #8
    c7c8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    c7cc:	0a19      	lsrs	r1, r3, #8
    c7ce:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7d2:	1814      	adds	r4, r2, r0
    c7d4:	9404      	str	r4, [sp, #16]
    c7d6:	414b      	adcs	r3, r1
    c7d8:	9305      	str	r3, [sp, #20]
    c7da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    c7de:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 16);
    c7e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7e6:	f04f 0000 	mov.w	r0, #0
    c7ea:	f04f 0100 	mov.w	r1, #0
    c7ee:	0c10      	lsrs	r0, r2, #16
    c7f0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c7f4:	0c19      	lsrs	r1, r3, #16
    c7f6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c7fa:	1814      	adds	r4, r2, r0
    c7fc:	9406      	str	r4, [sp, #24]
    c7fe:	414b      	adcs	r3, r1
    c800:	9307      	str	r3, [sp, #28]
    c802:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    c806:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 += (q64 >> 32);
    c80a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c80e:	f04f 0000 	mov.w	r0, #0
    c812:	f04f 0100 	mov.w	r1, #0
    c816:	0018      	movs	r0, r3
    c818:	2100      	movs	r1, #0
    c81a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    c81e:	1814      	adds	r4, r2, r0
    c820:	9408      	str	r4, [sp, #32]
    c822:	414b      	adcs	r3, r1
    c824:	9309      	str	r3, [sp, #36]	; 0x24
    c826:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    c82a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
        q64 >>= 3;
    c82e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c832:	f04f 0200 	mov.w	r2, #0
    c836:	f04f 0300 	mov.w	r3, #0
    c83a:	08c2      	lsrs	r2, r0, #3
    c83c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    c840:	08cb      	lsrs	r3, r1, #3
    c842:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    c846:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    c84a:	4622      	mov	r2, r4
    c84c:	462b      	mov	r3, r5
    c84e:	f04f 0000 	mov.w	r0, #0
    c852:	f04f 0100 	mov.w	r1, #0
    c856:	0099      	lsls	r1, r3, #2
    c858:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
    c85c:	0090      	lsls	r0, r2, #2
    c85e:	4602      	mov	r2, r0
    c860:	460b      	mov	r3, r1
    c862:	1916      	adds	r6, r2, r4
    c864:	eb43 0705 	adc.w	r7, r3, r5
    c868:	19b3      	adds	r3, r6, r6
    c86a:	930a      	str	r3, [sp, #40]	; 0x28
    c86c:	eb47 0307 	adc.w	r3, r7, r7
    c870:	930b      	str	r3, [sp, #44]	; 0x2c
    c872:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c876:	4630      	mov	r0, r6
    c878:	4639      	mov	r1, r7
    c87a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    c87e:	1a14      	subs	r4, r2, r0
    c880:	940c      	str	r4, [sp, #48]	; 0x30
    c882:	eb63 0301 	sbc.w	r3, r3, r1
    c886:	930d      	str	r3, [sp, #52]	; 0x34
    c888:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    c88c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
        return q64 + ((r64 + 6) >> 4);
    c890:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    c894:	f112 0806 	adds.w	r8, r2, #6
    c898:	f143 0900 	adc.w	r9, r3, #0
    c89c:	f04f 0200 	mov.w	r2, #0
    c8a0:	f04f 0300 	mov.w	r3, #0
    c8a4:	ea4f 1218 	mov.w	r2, r8, lsr #4
    c8a8:	ea42 7209 	orr.w	r2, r2, r9, lsl #28
    c8ac:	ea4f 1319 	mov.w	r3, r9, lsr #4
    c8b0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    c8b4:	1814      	adds	r4, r2, r0
    c8b6:	9400      	str	r4, [sp, #0]
    c8b8:	414b      	adcs	r3, r1
    c8ba:	9301      	str	r3, [sp, #4]
    c8bc:	e02a      	b.n	c914 <divu64_10+0x1d8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c8be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8c0:	9317      	str	r3, [sp, #92]	; 0x5c
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c8c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c8c4:	085a      	lsrs	r2, r3, #1
    c8c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c8c8:	089b      	lsrs	r3, r3, #2
    c8ca:	4413      	add	r3, r2
    c8cc:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 4);
    c8ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c8d0:	091b      	lsrs	r3, r3, #4
    c8d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c8d4:	4413      	add	r3, r2
    c8d6:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 8);
    c8d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c8da:	0a1b      	lsrs	r3, r3, #8
    c8dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c8de:	4413      	add	r3, r2
    c8e0:	9316      	str	r3, [sp, #88]	; 0x58
        q32 += (q32 >> 16);
    c8e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c8e4:	0c1b      	lsrs	r3, r3, #16
    c8e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c8e8:	4413      	add	r3, r2
    c8ea:	9316      	str	r3, [sp, #88]	; 0x58
        q32 >>= 3;
    c8ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c8ee:	08db      	lsrs	r3, r3, #3
    c8f0:	9316      	str	r3, [sp, #88]	; 0x58
        r32 = ui32Val - q32*10;
    c8f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c8f4:	4613      	mov	r3, r2
    c8f6:	009b      	lsls	r3, r3, #2
    c8f8:	4413      	add	r3, r2
    c8fa:	005b      	lsls	r3, r3, #1
    c8fc:	461a      	mov	r2, r3
    c8fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c900:	1a9b      	subs	r3, r3, r2
    c902:	9315      	str	r3, [sp, #84]	; 0x54
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c904:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c906:	3306      	adds	r3, #6
    c908:	091a      	lsrs	r2, r3, #4
    c90a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c90c:	4413      	add	r3, r2
    c90e:	2200      	movs	r2, #0
    c910:	9300      	str	r3, [sp, #0]
    c912:	9201      	str	r2, [sp, #4]
    }
}
    c914:	e9dd 2300 	ldrd	r2, r3, [sp]
    c918:	4610      	mov	r0, r2
    c91a:	4619      	mov	r1, r3
    c91c:	b018      	add	sp, #96	; 0x60
    c91e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c922:	4770      	bx	lr

0000c924 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c924:	b500      	push	{lr}
    c926:	b085      	sub	sp, #20
    c928:	e9cd 0100 	strd	r0, r1, [sp]
    int iNDigits = ui64Val ? 0 : 1;
    c92c:	9a00      	ldr	r2, [sp, #0]
    c92e:	9b01      	ldr	r3, [sp, #4]
    c930:	4313      	orrs	r3, r2
    c932:	2b00      	cmp	r3, #0
    c934:	bf0c      	ite	eq
    c936:	2301      	moveq	r3, #1
    c938:	2300      	movne	r3, #0
    c93a:	b2db      	uxtb	r3, r3
    c93c:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c93e:	e008      	b.n	c952 <ndigits_in_u64+0x2e>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c940:	e9dd 0100 	ldrd	r0, r1, [sp]
    c944:	f7ff fefa 	bl	c73c <divu64_10>
    c948:	e9cd 0100 	strd	r0, r1, [sp]
        ++iNDigits;
    c94c:	9b03      	ldr	r3, [sp, #12]
    c94e:	3301      	adds	r3, #1
    c950:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c952:	e9dd 2300 	ldrd	r2, r3, [sp]
    c956:	4313      	orrs	r3, r2
    c958:	d1f2      	bne.n	c940 <ndigits_in_u64+0x1c>
    }

    return iNDigits;
    c95a:	9b03      	ldr	r3, [sp, #12]
}
    c95c:	4618      	mov	r0, r3
    c95e:	b005      	add	sp, #20
    c960:	f85d fb04 	ldr.w	pc, [sp], #4

0000c964 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c964:	b530      	push	{r4, r5, lr}
    c966:	b083      	sub	sp, #12
    c968:	e9cd 0100 	strd	r0, r1, [sp]
    if ( i64Val < 0 )
    c96c:	e9dd 2300 	ldrd	r2, r3, [sp]
    c970:	2b00      	cmp	r3, #0
    c972:	da07      	bge.n	c984 <ndigits_in_i64+0x20>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c974:	e9dd 2300 	ldrd	r2, r3, [sp]
    c978:	2100      	movs	r1, #0
    c97a:	4254      	negs	r4, r2
    c97c:	eb61 0503 	sbc.w	r5, r1, r3
    c980:	e9cd 4500 	strd	r4, r5, [sp]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c984:	e9dd 2300 	ldrd	r2, r3, [sp]
    c988:	4610      	mov	r0, r2
    c98a:	4619      	mov	r1, r3
    c98c:	f7ff ffca 	bl	c924 <ndigits_in_u64>
    c990:	4603      	mov	r3, r0
}
    c992:	4618      	mov	r0, r3
    c994:	b003      	add	sp, #12
    c996:	bd30      	pop	{r4, r5, pc}

0000c998 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c998:	b084      	sub	sp, #16
    c99a:	e9cd 0100 	strd	r0, r1, [sp]
    int iDigits = ui64Val ? 0 : 1;
    c99e:	9a00      	ldr	r2, [sp, #0]
    c9a0:	9b01      	ldr	r3, [sp, #4]
    c9a2:	4313      	orrs	r3, r2
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	bf0c      	ite	eq
    c9a8:	2301      	moveq	r3, #1
    c9aa:	2300      	movne	r3, #0
    c9ac:	b2db      	uxtb	r3, r3
    c9ae:	9303      	str	r3, [sp, #12]

    while ( ui64Val )
    c9b0:	e00e      	b.n	c9d0 <ndigits_in_hex+0x38>
    {
        ui64Val >>= 4;
    c9b2:	e9dd 0100 	ldrd	r0, r1, [sp]
    c9b6:	f04f 0200 	mov.w	r2, #0
    c9ba:	f04f 0300 	mov.w	r3, #0
    c9be:	0902      	lsrs	r2, r0, #4
    c9c0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    c9c4:	090b      	lsrs	r3, r1, #4
    c9c6:	e9cd 2300 	strd	r2, r3, [sp]
        ++iDigits;
    c9ca:	9b03      	ldr	r3, [sp, #12]
    c9cc:	3301      	adds	r3, #1
    c9ce:	9303      	str	r3, [sp, #12]
    while ( ui64Val )
    c9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
    c9d4:	4313      	orrs	r3, r2
    c9d6:	d1ec      	bne.n	c9b2 <ndigits_in_hex+0x1a>
    }

    return iDigits;
    c9d8:	9b03      	ldr	r3, [sp, #12]
}
    c9da:	4618      	mov	r0, r3
    c9dc:	b004      	add	sp, #16
    c9de:	4770      	bx	lr

0000c9e0 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c9e0:	b086      	sub	sp, #24
    c9e2:	9001      	str	r0, [sp, #4]
    c9e4:	9100      	str	r1, [sp, #0]
    bool bNeg = false;
    c9e6:	2300      	movs	r3, #0
    c9e8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c9ec:	2300      	movs	r3, #0
    c9ee:	9304      	str	r3, [sp, #16]
    c9f0:	2300      	movs	r3, #0
    c9f2:	9303      	str	r3, [sp, #12]

    if ( *pcStr == '-')
    c9f4:	9b01      	ldr	r3, [sp, #4]
    c9f6:	781b      	ldrb	r3, [r3, #0]
    c9f8:	2b2d      	cmp	r3, #45	; 0x2d
    c9fa:	d11c      	bne.n	ca36 <decstr_to_int+0x56>
    {
        bNeg = true;
    c9fc:	2301      	movs	r3, #1
    c9fe:	f88d 3017 	strb.w	r3, [sp, #23]
        pcStr++;
    ca02:	9b01      	ldr	r3, [sp, #4]
    ca04:	3301      	adds	r3, #1
    ca06:	9301      	str	r3, [sp, #4]
        uCnt++;
    ca08:	9b03      	ldr	r3, [sp, #12]
    ca0a:	3301      	adds	r3, #1
    ca0c:	9303      	str	r3, [sp, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca0e:	e012      	b.n	ca36 <decstr_to_int+0x56>
    {
        ++uCnt;
    ca10:	9b03      	ldr	r3, [sp, #12]
    ca12:	3301      	adds	r3, #1
    ca14:	9303      	str	r3, [sp, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    ca16:	9a04      	ldr	r2, [sp, #16]
    ca18:	4613      	mov	r3, r2
    ca1a:	009b      	lsls	r3, r3, #2
    ca1c:	4413      	add	r3, r2
    ca1e:	005b      	lsls	r3, r3, #1
    ca20:	9304      	str	r3, [sp, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    ca22:	9b01      	ldr	r3, [sp, #4]
    ca24:	781b      	ldrb	r3, [r3, #0]
    ca26:	461a      	mov	r2, r3
    ca28:	9b04      	ldr	r3, [sp, #16]
    ca2a:	4413      	add	r3, r2
    ca2c:	3b30      	subs	r3, #48	; 0x30
    ca2e:	9304      	str	r3, [sp, #16]
        pcStr++;
    ca30:	9b01      	ldr	r3, [sp, #4]
    ca32:	3301      	adds	r3, #1
    ca34:	9301      	str	r3, [sp, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca36:	9b01      	ldr	r3, [sp, #4]
    ca38:	781b      	ldrb	r3, [r3, #0]
    ca3a:	2b2f      	cmp	r3, #47	; 0x2f
    ca3c:	d903      	bls.n	ca46 <decstr_to_int+0x66>
    ca3e:	9b01      	ldr	r3, [sp, #4]
    ca40:	781b      	ldrb	r3, [r3, #0]
    ca42:	2b39      	cmp	r3, #57	; 0x39
    ca44:	d9e4      	bls.n	ca10 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    ca46:	9b00      	ldr	r3, [sp, #0]
    ca48:	2b00      	cmp	r3, #0
    ca4a:	d002      	beq.n	ca52 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    ca4c:	9b00      	ldr	r3, [sp, #0]
    ca4e:	9a03      	ldr	r2, [sp, #12]
    ca50:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    ca52:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ca56:	2b00      	cmp	r3, #0
    ca58:	d002      	beq.n	ca60 <decstr_to_int+0x80>
    ca5a:	9b04      	ldr	r3, [sp, #16]
    ca5c:	425b      	negs	r3, r3
    ca5e:	e000      	b.n	ca62 <decstr_to_int+0x82>
    ca60:	9b04      	ldr	r3, [sp, #16]
}
    ca62:	4618      	mov	r0, r3
    ca64:	b006      	add	sp, #24
    ca66:	4770      	bx	lr

0000ca68 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    ca68:	b500      	push	{lr}
    ca6a:	b091      	sub	sp, #68	; 0x44
    ca6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ca70:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    ca72:	2300      	movs	r3, #0
    ca74:	930f      	str	r3, [sp, #60]	; 0x3c
    ca76:	2300      	movs	r3, #0
    ca78:	930e      	str	r3, [sp, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    ca7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ca7e:	f7ff fe5d 	bl	c73c <divu64_10>
    ca82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    ca86:	9902      	ldr	r1, [sp, #8]
    ca88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca8a:	4613      	mov	r3, r2
    ca8c:	009b      	lsls	r3, r3, #2
    ca8e:	4413      	add	r3, r2
    ca90:	005b      	lsls	r3, r3, #1
    ca92:	1acb      	subs	r3, r1, r3
    ca94:	930b      	str	r3, [sp, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    ca96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca98:	b2da      	uxtb	r2, r3
    ca9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ca9c:	1c59      	adds	r1, r3, #1
    ca9e:	910f      	str	r1, [sp, #60]	; 0x3c
    caa0:	3230      	adds	r2, #48	; 0x30
    caa2:	b2d2      	uxtb	r2, r2
    caa4:	3340      	adds	r3, #64	; 0x40
    caa6:	446b      	add	r3, sp
    caa8:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    caac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    cab0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    } while ( ui64Val );
    cab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cab8:	4313      	orrs	r3, r2
    caba:	d1de      	bne.n	ca7a <uint64_to_str+0x12>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cabc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cabe:	930e      	str	r3, [sp, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cac0:	9b01      	ldr	r3, [sp, #4]
    cac2:	2b00      	cmp	r3, #0
    cac4:	d010      	beq.n	cae8 <uint64_to_str+0x80>
    {
        while ( ix-- )
    cac6:	e007      	b.n	cad8 <uint64_to_str+0x70>
        {
            *pcBuf++ = tbuf[ix];
    cac8:	9b01      	ldr	r3, [sp, #4]
    caca:	1c5a      	adds	r2, r3, #1
    cacc:	9201      	str	r2, [sp, #4]
    cace:	a904      	add	r1, sp, #16
    cad0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cad2:	440a      	add	r2, r1
    cad4:	7812      	ldrb	r2, [r2, #0]
    cad6:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    cad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cada:	1e5a      	subs	r2, r3, #1
    cadc:	920f      	str	r2, [sp, #60]	; 0x3c
    cade:	2b00      	cmp	r3, #0
    cae0:	d1f2      	bne.n	cac8 <uint64_to_str+0x60>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cae2:	9b01      	ldr	r3, [sp, #4]
    cae4:	2200      	movs	r2, #0
    cae6:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
}
    caea:	4618      	mov	r0, r3
    caec:	b011      	add	sp, #68	; 0x44
    caee:	f85d fb04 	ldr.w	pc, [sp], #4

0000caf2 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    caf2:	b08c      	sub	sp, #48	; 0x30
    caf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    caf8:	9201      	str	r2, [sp, #4]
    cafa:	f88d 3003 	strb.w	r3, [sp, #3]
    int iNumDig, ix = 0;
    cafe:	2300      	movs	r3, #0
    cb00:	930b      	str	r3, [sp, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cb02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb06:	4313      	orrs	r3, r2
    cb08:	d135      	bne.n	cb76 <uint64_to_hexstr+0x84>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb0c:	1c5a      	adds	r2, r3, #1
    cb0e:	920b      	str	r2, [sp, #44]	; 0x2c
    cb10:	3330      	adds	r3, #48	; 0x30
    cb12:	446b      	add	r3, sp
    cb14:	2230      	movs	r2, #48	; 0x30
    cb16:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cb1a:	e02c      	b.n	cb76 <uint64_to_hexstr+0x84>
    {
        cCh = ui64Val & 0xf;
    cb1c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    cb20:	f003 030f 	and.w	r3, r3, #15
    cb24:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cb28:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cb2c:	2b09      	cmp	r3, #9
    cb2e:	d90b      	bls.n	cb48 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cb30:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cb34:	2b00      	cmp	r3, #0
    cb36:	d001      	beq.n	cb3c <uint64_to_hexstr+0x4a>
    cb38:	2227      	movs	r2, #39	; 0x27
    cb3a:	e000      	b.n	cb3e <uint64_to_hexstr+0x4c>
    cb3c:	2207      	movs	r2, #7
    cb3e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    cb42:	4413      	add	r3, r2
    cb44:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cb48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb4a:	1c5a      	adds	r2, r3, #1
    cb4c:	920b      	str	r2, [sp, #44]	; 0x2c
    cb4e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    cb52:	3230      	adds	r2, #48	; 0x30
    cb54:	b2d2      	uxtb	r2, r2
    cb56:	3330      	adds	r3, #48	; 0x30
    cb58:	446b      	add	r3, sp
    cb5a:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cb5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cb62:	f04f 0200 	mov.w	r2, #0
    cb66:	f04f 0300 	mov.w	r3, #0
    cb6a:	0902      	lsrs	r2, r0, #4
    cb6c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cb70:	090b      	lsrs	r3, r1, #4
    cb72:	e9cd 2302 	strd	r2, r3, [sp, #8]
    while ( ui64Val )
    cb76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cb7a:	4313      	orrs	r3, r2
    cb7c:	d1ce      	bne.n	cb1c <uint64_to_hexstr+0x2a>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cb7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb80:	9309      	str	r3, [sp, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cb82:	9b01      	ldr	r3, [sp, #4]
    cb84:	2b00      	cmp	r3, #0
    cb86:	d010      	beq.n	cbaa <uint64_to_hexstr+0xb8>
    {
        while (ix--)
    cb88:	e007      	b.n	cb9a <uint64_to_hexstr+0xa8>
        {
            *pcBuf++ = tbuf[ix];
    cb8a:	9b01      	ldr	r3, [sp, #4]
    cb8c:	1c5a      	adds	r2, r3, #1
    cb8e:	9201      	str	r2, [sp, #4]
    cb90:	a904      	add	r1, sp, #16
    cb92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cb94:	440a      	add	r2, r1
    cb96:	7812      	ldrb	r2, [r2, #0]
    cb98:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cb9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb9c:	1e5a      	subs	r2, r3, #1
    cb9e:	920b      	str	r2, [sp, #44]	; 0x2c
    cba0:	2b00      	cmp	r3, #0
    cba2:	d1f2      	bne.n	cb8a <uint64_to_hexstr+0x98>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cba4:	9b01      	ldr	r3, [sp, #4]
    cba6:	2200      	movs	r2, #0
    cba8:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    cbac:	4618      	mov	r0, r3
    cbae:	b00c      	add	sp, #48	; 0x30
    cbb0:	4770      	bx	lr

0000cbb2 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cbb2:	b084      	sub	sp, #16
    cbb4:	9001      	str	r0, [sp, #4]
    uint32_t ui32RetVal = 0;
    cbb6:	2300      	movs	r3, #0
    cbb8:	9303      	str	r3, [sp, #12]
    if ( !pcBuf )
    cbba:	9b01      	ldr	r3, [sp, #4]
    cbbc:	2b00      	cmp	r3, #0
    cbbe:	d104      	bne.n	cbca <simple_strlen+0x18>
    {
        return ui32RetVal;
    cbc0:	9b03      	ldr	r3, [sp, #12]
    cbc2:	e009      	b.n	cbd8 <simple_strlen+0x26>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cbc4:	9b03      	ldr	r3, [sp, #12]
    cbc6:	3301      	adds	r3, #1
    cbc8:	9303      	str	r3, [sp, #12]
    while ( *pcBuf++ )
    cbca:	9b01      	ldr	r3, [sp, #4]
    cbcc:	1c5a      	adds	r2, r3, #1
    cbce:	9201      	str	r2, [sp, #4]
    cbd0:	781b      	ldrb	r3, [r3, #0]
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d1f6      	bne.n	cbc4 <simple_strlen+0x12>
    }
    return ui32RetVal;
    cbd6:	9b03      	ldr	r3, [sp, #12]
}
    cbd8:	4618      	mov	r0, r3
    cbda:	b004      	add	sp, #16
    cbdc:	4770      	bx	lr

0000cbde <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cbde:	b086      	sub	sp, #24
    cbe0:	9003      	str	r0, [sp, #12]
    cbe2:	460b      	mov	r3, r1
    cbe4:	9201      	str	r2, [sp, #4]
    cbe6:	f88d 300b 	strb.w	r3, [sp, #11]
    int32_t i32Cnt = 0;
    cbea:	2300      	movs	r3, #0
    cbec:	9305      	str	r3, [sp, #20]

    if ( i32NumChars <= 0 )
    cbee:	9b01      	ldr	r3, [sp, #4]
    cbf0:	2b00      	cmp	r3, #0
    cbf2:	dc0d      	bgt.n	cc10 <padbuffer+0x32>
    {
        return i32Cnt;
    cbf4:	9b05      	ldr	r3, [sp, #20]
    cbf6:	e011      	b.n	cc1c <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cbf8:	9b03      	ldr	r3, [sp, #12]
    cbfa:	2b00      	cmp	r3, #0
    cbfc:	d005      	beq.n	cc0a <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cbfe:	9b03      	ldr	r3, [sp, #12]
    cc00:	1c5a      	adds	r2, r3, #1
    cc02:	9203      	str	r2, [sp, #12]
    cc04:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cc08:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cc0a:	9b05      	ldr	r3, [sp, #20]
    cc0c:	3301      	adds	r3, #1
    cc0e:	9305      	str	r3, [sp, #20]
    while ( i32NumChars-- )
    cc10:	9b01      	ldr	r3, [sp, #4]
    cc12:	1e5a      	subs	r2, r3, #1
    cc14:	9201      	str	r2, [sp, #4]
    cc16:	2b00      	cmp	r3, #0
    cc18:	d1ee      	bne.n	cbf8 <padbuffer+0x1a>
    }

    return i32Cnt;
    cc1a:	9b05      	ldr	r3, [sp, #20]
}
    cc1c:	4618      	mov	r0, r3
    cc1e:	b006      	add	sp, #24
    cc20:	4770      	bx	lr
	...

0000cc24 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cc24:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc26:	b08f      	sub	sp, #60	; 0x3c
    cc28:	ed8d 0a03 	vstr	s0, [sp, #12]
    cc2c:	9002      	str	r0, [sp, #8]
    cc2e:	9101      	str	r1, [sp, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cc30:	9b02      	ldr	r3, [sp, #8]
    cc32:	681b      	ldr	r3, [r3, #0]
    cc34:	9309      	str	r3, [sp, #36]	; 0x24
    if (iBufSize < 4)
    cc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc38:	2b03      	cmp	r3, #3
    cc3a:	dc02      	bgt.n	cc42 <ftoa+0x1e>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cc3c:	f06f 0302 	mvn.w	r3, #2
    cc40:	e0e9      	b.n	ce16 <ftoa+0x1f2>
    }

    if (fValue == 0.0f)
    cc42:	eddd 7a03 	vldr	s15, [sp, #12]
    cc46:	eef5 7a40 	vcmp.f32	s15, #0.0
    cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc4e:	d104      	bne.n	cc5a <ftoa+0x36>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cc50:	9b02      	ldr	r3, [sp, #8]
    cc52:	4a72      	ldr	r2, [pc, #456]	; (ce1c <ftoa+0x1f8>)
    cc54:	601a      	str	r2, [r3, #0]
        return 3;
    cc56:	2303      	movs	r3, #3
    cc58:	e0dd      	b.n	ce16 <ftoa+0x1f2>
    }

    pcBufInitial = pcBuf;
    cc5a:	9b02      	ldr	r3, [sp, #8]
    cc5c:	9308      	str	r3, [sp, #32]

    unFloatValue.F = fValue;
    cc5e:	9b03      	ldr	r3, [sp, #12]
    cc60:	9304      	str	r3, [sp, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cc62:	9b04      	ldr	r3, [sp, #16]
    cc64:	15db      	asrs	r3, r3, #23
    cc66:	b2db      	uxtb	r3, r3
    cc68:	3b7f      	subs	r3, #127	; 0x7f
    cc6a:	9307      	str	r3, [sp, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cc6c:	9b04      	ldr	r3, [sp, #16]
    cc6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cc72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cc76:	9306      	str	r3, [sp, #24]
    i32FracPart = 0;
    cc78:	2300      	movs	r3, #0
    cc7a:	930c      	str	r3, [sp, #48]	; 0x30
    i32IntPart = 0;
    cc7c:	2300      	movs	r3, #0
    cc7e:	930d      	str	r3, [sp, #52]	; 0x34

    if (iExp2 >= 31)
    cc80:	9b07      	ldr	r3, [sp, #28]
    cc82:	2b1e      	cmp	r3, #30
    cc84:	dd02      	ble.n	cc8c <ftoa+0x68>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cc86:	f06f 0301 	mvn.w	r3, #1
    cc8a:	e0c4      	b.n	ce16 <ftoa+0x1f2>
    }
    else if (iExp2 < -23)
    cc8c:	9b07      	ldr	r3, [sp, #28]
    cc8e:	f113 0f17 	cmn.w	r3, #23
    cc92:	da02      	bge.n	cc9a <ftoa+0x76>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cc94:	f04f 33ff 	mov.w	r3, #4294967295
    cc98:	e0bd      	b.n	ce16 <ftoa+0x1f2>
    }
    else if (iExp2 >= 23)
    cc9a:	9b07      	ldr	r3, [sp, #28]
    cc9c:	2b16      	cmp	r3, #22
    cc9e:	dd06      	ble.n	ccae <ftoa+0x8a>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cca0:	9b07      	ldr	r3, [sp, #28]
    cca2:	3b17      	subs	r3, #23
    cca4:	9a06      	ldr	r2, [sp, #24]
    cca6:	fa02 f303 	lsl.w	r3, r2, r3
    ccaa:	930d      	str	r3, [sp, #52]	; 0x34
    ccac:	e01a      	b.n	cce4 <ftoa+0xc0>
    }
    else if (iExp2 >= 0)
    ccae:	9b07      	ldr	r3, [sp, #28]
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	db0f      	blt.n	ccd4 <ftoa+0xb0>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    ccb4:	9b07      	ldr	r3, [sp, #28]
    ccb6:	f1c3 0317 	rsb	r3, r3, #23
    ccba:	9a06      	ldr	r2, [sp, #24]
    ccbc:	fa42 f303 	asr.w	r3, r2, r3
    ccc0:	930d      	str	r3, [sp, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ccc2:	9b07      	ldr	r3, [sp, #28]
    ccc4:	3301      	adds	r3, #1
    ccc6:	9a06      	ldr	r2, [sp, #24]
    ccc8:	fa02 f303 	lsl.w	r3, r2, r3
    cccc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ccd0:	930c      	str	r3, [sp, #48]	; 0x30
    ccd2:	e007      	b.n	cce4 <ftoa+0xc0>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ccd4:	9b06      	ldr	r3, [sp, #24]
    ccd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    ccda:	9b07      	ldr	r3, [sp, #28]
    ccdc:	43db      	mvns	r3, r3
    ccde:	fa42 f303 	asr.w	r3, r2, r3
    cce2:	930c      	str	r3, [sp, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cce4:	9b04      	ldr	r3, [sp, #16]
    cce6:	2b00      	cmp	r3, #0
    cce8:	da04      	bge.n	ccf4 <ftoa+0xd0>
    {
        *pcBuf++ = '-';
    ccea:	9b02      	ldr	r3, [sp, #8]
    ccec:	1c5a      	adds	r2, r3, #1
    ccee:	9202      	str	r2, [sp, #8]
    ccf0:	222d      	movs	r2, #45	; 0x2d
    ccf2:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    ccf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccf6:	2b00      	cmp	r3, #0
    ccf8:	d105      	bne.n	cd06 <ftoa+0xe2>
    {
        *pcBuf++ = '0';
    ccfa:	9b02      	ldr	r3, [sp, #8]
    ccfc:	1c5a      	adds	r2, r3, #1
    ccfe:	9202      	str	r2, [sp, #8]
    cd00:	2230      	movs	r2, #48	; 0x30
    cd02:	701a      	strb	r2, [r3, #0]
    cd04:	e023      	b.n	cd4e <ftoa+0x12a>
    }
    else
    {
        if (i32IntPart > 0)
    cd06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd08:	2b00      	cmp	r3, #0
    cd0a:	dd09      	ble.n	cd20 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cd0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd0e:	17da      	asrs	r2, r3, #31
    cd10:	461e      	mov	r6, r3
    cd12:	4617      	mov	r7, r2
    cd14:	9a02      	ldr	r2, [sp, #8]
    cd16:	4630      	mov	r0, r6
    cd18:	4639      	mov	r1, r7
    cd1a:	f7ff fea5 	bl	ca68 <uint64_to_str>
    cd1e:	e012      	b.n	cd46 <ftoa+0x122>
        }
        else
        {
            *pcBuf++ = '-';
    cd20:	9b02      	ldr	r3, [sp, #8]
    cd22:	1c5a      	adds	r2, r3, #1
    cd24:	9202      	str	r2, [sp, #8]
    cd26:	222d      	movs	r2, #45	; 0x2d
    cd28:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cd2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd2c:	425b      	negs	r3, r3
    cd2e:	17da      	asrs	r2, r3, #31
    cd30:	461c      	mov	r4, r3
    cd32:	4615      	mov	r5, r2
    cd34:	9a02      	ldr	r2, [sp, #8]
    cd36:	4620      	mov	r0, r4
    cd38:	4629      	mov	r1, r5
    cd3a:	f7ff fe95 	bl	ca68 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cd3e:	e002      	b.n	cd46 <ftoa+0x122>
        {
            pcBuf++;
    cd40:	9b02      	ldr	r3, [sp, #8]
    cd42:	3301      	adds	r3, #1
    cd44:	9302      	str	r3, [sp, #8]
        while (*pcBuf)    // Get to end of new string
    cd46:	9b02      	ldr	r3, [sp, #8]
    cd48:	781b      	ldrb	r3, [r3, #0]
    cd4a:	2b00      	cmp	r3, #0
    cd4c:	d1f8      	bne.n	cd40 <ftoa+0x11c>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cd4e:	9b02      	ldr	r3, [sp, #8]
    cd50:	1c5a      	adds	r2, r3, #1
    cd52:	9202      	str	r2, [sp, #8]
    cd54:	222e      	movs	r2, #46	; 0x2e
    cd56:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cd58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd5a:	2b00      	cmp	r3, #0
    cd5c:	d105      	bne.n	cd6a <ftoa+0x146>
    {
        *pcBuf++ = '0';
    cd5e:	9b02      	ldr	r3, [sp, #8]
    cd60:	1c5a      	adds	r2, r3, #1
    cd62:	9202      	str	r2, [sp, #8]
    cd64:	2230      	movs	r2, #48	; 0x30
    cd66:	701a      	strb	r2, [r3, #0]
    cd68:	e04f      	b.n	ce0a <ftoa+0x1e6>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cd6a:	9a02      	ldr	r2, [sp, #8]
    cd6c:	9b08      	ldr	r3, [sp, #32]
    cd6e:	1ad3      	subs	r3, r2, r3
    cd70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cd72:	1ad3      	subs	r3, r2, r3
    cd74:	3b01      	subs	r3, #1
    cd76:	9305      	str	r3, [sp, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cd78:	9a05      	ldr	r2, [sp, #20]
    cd7a:	9b01      	ldr	r3, [sp, #4]
    cd7c:	4293      	cmp	r3, r2
    cd7e:	bfa8      	it	ge
    cd80:	4613      	movge	r3, r2
    cd82:	9305      	str	r3, [sp, #20]

        for (jx = 0; jx < iMax; jx++)
    cd84:	2300      	movs	r3, #0
    cd86:	930a      	str	r3, [sp, #40]	; 0x28
    cd88:	e015      	b.n	cdb6 <ftoa+0x192>
        {
            i32FracPart *= 10;
    cd8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd8c:	4613      	mov	r3, r2
    cd8e:	009b      	lsls	r3, r3, #2
    cd90:	4413      	add	r3, r2
    cd92:	005b      	lsls	r3, r3, #1
    cd94:	930c      	str	r3, [sp, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cd96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd98:	161b      	asrs	r3, r3, #24
    cd9a:	b2da      	uxtb	r2, r3
    cd9c:	9b02      	ldr	r3, [sp, #8]
    cd9e:	1c59      	adds	r1, r3, #1
    cda0:	9102      	str	r1, [sp, #8]
    cda2:	3230      	adds	r2, #48	; 0x30
    cda4:	b2d2      	uxtb	r2, r2
    cda6:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cdaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cdae:	930c      	str	r3, [sp, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cdb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cdb2:	3301      	adds	r3, #1
    cdb4:	930a      	str	r3, [sp, #40]	; 0x28
    cdb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cdb8:	9b05      	ldr	r3, [sp, #20]
    cdba:	429a      	cmp	r2, r3
    cdbc:	dbe5      	blt.n	cd8a <ftoa+0x166>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cdbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cdc0:	4613      	mov	r3, r2
    cdc2:	009b      	lsls	r3, r3, #2
    cdc4:	4413      	add	r3, r2
    cdc6:	005b      	lsls	r3, r3, #1
    cdc8:	161b      	asrs	r3, r3, #24
    cdca:	2b04      	cmp	r3, #4
    cdcc:	dd1d      	ble.n	ce0a <ftoa+0x1e6>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    cdce:	9b02      	ldr	r3, [sp, #8]
    cdd0:	3b01      	subs	r3, #1
    cdd2:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cdd4:	e015      	b.n	ce02 <ftoa+0x1de>
            {
                if ( *pcBuftmp == '.' )
    cdd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdd8:	781b      	ldrb	r3, [r3, #0]
    cdda:	2b2e      	cmp	r3, #46	; 0x2e
    cddc:	d00e      	beq.n	cdfc <ftoa+0x1d8>
                {
                }
                else if ( *pcBuftmp == '9' )
    cdde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cde0:	781b      	ldrb	r3, [r3, #0]
    cde2:	2b39      	cmp	r3, #57	; 0x39
    cde4:	d103      	bne.n	cdee <ftoa+0x1ca>
                {
                    *pcBuftmp = '0';
    cde6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cde8:	2230      	movs	r2, #48	; 0x30
    cdea:	701a      	strb	r2, [r3, #0]
    cdec:	e006      	b.n	cdfc <ftoa+0x1d8>
                }
                else
                {
                    *pcBuftmp += 1;
    cdee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdf0:	781b      	ldrb	r3, [r3, #0]
    cdf2:	3301      	adds	r3, #1
    cdf4:	b2da      	uxtb	r2, r3
    cdf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdf8:	701a      	strb	r2, [r3, #0]
                    break;
    cdfa:	e006      	b.n	ce0a <ftoa+0x1e6>
                }
                pcBuftmp--;
    cdfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdfe:	3b01      	subs	r3, #1
    ce00:	930b      	str	r3, [sp, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ce02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ce04:	9b08      	ldr	r3, [sp, #32]
    ce06:	429a      	cmp	r2, r3
    ce08:	d2e5      	bcs.n	cdd6 <ftoa+0x1b2>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    ce0a:	9b02      	ldr	r3, [sp, #8]
    ce0c:	2200      	movs	r2, #0
    ce0e:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    ce10:	9a02      	ldr	r2, [sp, #8]
    ce12:	9b08      	ldr	r3, [sp, #32]
    ce14:	1ad3      	subs	r3, r2, r3
} // ftoa()
    ce16:	4618      	mov	r0, r3
    ce18:	b00f      	add	sp, #60	; 0x3c
    ce1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce1c:	00302e30 	.word	0x00302e30

0000ce20 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce24:	b097      	sub	sp, #92	; 0x5c
    ce26:	9003      	str	r0, [sp, #12]
    ce28:	9102      	str	r1, [sp, #8]
    ce2a:	9201      	str	r2, [sp, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    ce2c:	2300      	movs	r3, #0
    ce2e:	9311      	str	r3, [sp, #68]	; 0x44
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    ce30:	2300      	movs	r3, #0
    ce32:	930b      	str	r3, [sp, #44]	; 0x2c

    while ( *pcFmt != 0x0 )
    ce34:	e2e9      	b.n	d40a <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    ce36:	2306      	movs	r3, #6
    ce38:	930e      	str	r3, [sp, #56]	; 0x38

        if ( *pcFmt != '%' )
    ce3a:	9b02      	ldr	r3, [sp, #8]
    ce3c:	781b      	ldrb	r3, [r3, #0]
    ce3e:	2b25      	cmp	r3, #37	; 0x25
    ce40:	d01f      	beq.n	ce82 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    ce42:	9b03      	ldr	r3, [sp, #12]
    ce44:	2b00      	cmp	r3, #0
    ce46:	d015      	beq.n	ce74 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    ce48:	9b02      	ldr	r3, [sp, #8]
    ce4a:	781b      	ldrb	r3, [r3, #0]
    ce4c:	2b0a      	cmp	r3, #10
    ce4e:	d10b      	bne.n	ce68 <am_util_stdio_vsprintf+0x48>
    ce50:	4ba8      	ldr	r3, [pc, #672]	; (d0f4 <am_util_stdio_vsprintf+0x2d4>)
    ce52:	781b      	ldrb	r3, [r3, #0]
    ce54:	2b00      	cmp	r3, #0
    ce56:	d007      	beq.n	ce68 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    ce58:	9b03      	ldr	r3, [sp, #12]
    ce5a:	1c5a      	adds	r2, r3, #1
    ce5c:	9203      	str	r2, [sp, #12]
    ce5e:	220d      	movs	r2, #13
    ce60:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    ce62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce64:	3301      	adds	r3, #1
    ce66:	9311      	str	r3, [sp, #68]	; 0x44
                }
                *pcBuf++ = *pcFmt;
    ce68:	9b03      	ldr	r3, [sp, #12]
    ce6a:	1c5a      	adds	r2, r3, #1
    ce6c:	9203      	str	r2, [sp, #12]
    ce6e:	9a02      	ldr	r2, [sp, #8]
    ce70:	7812      	ldrb	r2, [r2, #0]
    ce72:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    ce74:	9b02      	ldr	r3, [sp, #8]
    ce76:	3301      	adds	r3, #1
    ce78:	9302      	str	r3, [sp, #8]
            ++ui32CharCnt;
    ce7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce7c:	3301      	adds	r3, #1
    ce7e:	9311      	str	r3, [sp, #68]	; 0x44
            continue;
    ce80:	e2c3      	b.n	d40a <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    ce82:	9b02      	ldr	r3, [sp, #8]
    ce84:	3301      	adds	r3, #1
    ce86:	9302      	str	r3, [sp, #8]
        bLower = bLongLong = false;
    ce88:	2300      	movs	r3, #0
    ce8a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    ce8e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ce92:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    ce96:	2320      	movs	r3, #32
    ce98:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

        if ( *pcFmt == '0' )
    ce9c:	9b02      	ldr	r3, [sp, #8]
    ce9e:	781b      	ldrb	r3, [r3, #0]
    cea0:	2b30      	cmp	r3, #48	; 0x30
    cea2:	d105      	bne.n	ceb0 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cea4:	2330      	movs	r3, #48	; 0x30
    cea6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
            ++pcFmt;
    ceaa:	9b02      	ldr	r3, [sp, #8]
    ceac:	3301      	adds	r3, #1
    ceae:	9302      	str	r3, [sp, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    ceb0:	ab05      	add	r3, sp, #20
    ceb2:	4619      	mov	r1, r3
    ceb4:	9802      	ldr	r0, [sp, #8]
    ceb6:	f7ff fd93 	bl	c9e0 <decstr_to_int>
    ceba:	4603      	mov	r3, r0
    cebc:	9310      	str	r3, [sp, #64]	; 0x40
        pcFmt += ui32NumChars;
    cebe:	9b05      	ldr	r3, [sp, #20]
    cec0:	9a02      	ldr	r2, [sp, #8]
    cec2:	4413      	add	r3, r2
    cec4:	9302      	str	r3, [sp, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cec6:	9b02      	ldr	r3, [sp, #8]
    cec8:	781b      	ldrb	r3, [r3, #0]
    ceca:	2b73      	cmp	r3, #115	; 0x73
    cecc:	d005      	beq.n	ceda <am_util_stdio_vsprintf+0xba>
    cece:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ced0:	2b00      	cmp	r3, #0
    ced2:	da02      	bge.n	ceda <am_util_stdio_vsprintf+0xba>
        {
            iWidth = -iWidth;
    ced4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ced6:	425b      	negs	r3, r3
    ced8:	9310      	str	r3, [sp, #64]	; 0x40
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    ceda:	9b02      	ldr	r3, [sp, #8]
    cedc:	781b      	ldrb	r3, [r3, #0]
    cede:	2b2e      	cmp	r3, #46	; 0x2e
    cee0:	d10d      	bne.n	cefe <am_util_stdio_vsprintf+0xde>
        {
            ++pcFmt;
    cee2:	9b02      	ldr	r3, [sp, #8]
    cee4:	3301      	adds	r3, #1
    cee6:	9302      	str	r3, [sp, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cee8:	ab05      	add	r3, sp, #20
    ceea:	4619      	mov	r1, r3
    ceec:	9802      	ldr	r0, [sp, #8]
    ceee:	f7ff fd77 	bl	c9e0 <decstr_to_int>
    cef2:	4603      	mov	r3, r0
    cef4:	930e      	str	r3, [sp, #56]	; 0x38
            pcFmt += ui32NumChars;
    cef6:	9b05      	ldr	r3, [sp, #20]
    cef8:	9a02      	ldr	r2, [sp, #8]
    cefa:	4413      	add	r3, r2
    cefc:	9302      	str	r3, [sp, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cefe:	9b02      	ldr	r3, [sp, #8]
    cf00:	781b      	ldrb	r3, [r3, #0]
    cf02:	2b6c      	cmp	r3, #108	; 0x6c
    cf04:	d10c      	bne.n	cf20 <am_util_stdio_vsprintf+0x100>
        {
            pcFmt++;
    cf06:	9b02      	ldr	r3, [sp, #8]
    cf08:	3301      	adds	r3, #1
    cf0a:	9302      	str	r3, [sp, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cf0c:	9b02      	ldr	r3, [sp, #8]
    cf0e:	781b      	ldrb	r3, [r3, #0]
    cf10:	2b6c      	cmp	r3, #108	; 0x6c
    cf12:	d105      	bne.n	cf20 <am_util_stdio_vsprintf+0x100>
            {
                pcFmt++;
    cf14:	9b02      	ldr	r3, [sp, #8]
    cf16:	3301      	adds	r3, #1
    cf18:	9302      	str	r3, [sp, #8]
                bLongLong = true;
    cf1a:	2301      	movs	r3, #1
    cf1c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            }
        }

        switch ( *pcFmt )
    cf20:	9b02      	ldr	r3, [sp, #8]
    cf22:	781b      	ldrb	r3, [r3, #0]
    cf24:	3b46      	subs	r3, #70	; 0x46
    cf26:	2b32      	cmp	r3, #50	; 0x32
    cf28:	f200 825c 	bhi.w	d3e4 <am_util_stdio_vsprintf+0x5c4>
    cf2c:	a201      	add	r2, pc, #4	; (adr r2, cf34 <am_util_stdio_vsprintf+0x114>)
    cf2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cf32:	bf00      	nop
    cf34:	0000d36b 	.word	0x0000d36b
    cf38:	0000d3e5 	.word	0x0000d3e5
    cf3c:	0000d3e5 	.word	0x0000d3e5
    cf40:	0000d3e5 	.word	0x0000d3e5
    cf44:	0000d3e5 	.word	0x0000d3e5
    cf48:	0000d3e5 	.word	0x0000d3e5
    cf4c:	0000d3e5 	.word	0x0000d3e5
    cf50:	0000d3e5 	.word	0x0000d3e5
    cf54:	0000d3e5 	.word	0x0000d3e5
    cf58:	0000d3e5 	.word	0x0000d3e5
    cf5c:	0000d3e5 	.word	0x0000d3e5
    cf60:	0000d3e5 	.word	0x0000d3e5
    cf64:	0000d3e5 	.word	0x0000d3e5
    cf68:	0000d3e5 	.word	0x0000d3e5
    cf6c:	0000d3e5 	.word	0x0000d3e5
    cf70:	0000d3e5 	.word	0x0000d3e5
    cf74:	0000d3e5 	.word	0x0000d3e5
    cf78:	0000d3e5 	.word	0x0000d3e5
    cf7c:	0000d0ff 	.word	0x0000d0ff
    cf80:	0000d3e5 	.word	0x0000d3e5
    cf84:	0000d3e5 	.word	0x0000d3e5
    cf88:	0000d3e5 	.word	0x0000d3e5
    cf8c:	0000d3e5 	.word	0x0000d3e5
    cf90:	0000d3e5 	.word	0x0000d3e5
    cf94:	0000d3e5 	.word	0x0000d3e5
    cf98:	0000d3e5 	.word	0x0000d3e5
    cf9c:	0000d3e5 	.word	0x0000d3e5
    cfa0:	0000d3e5 	.word	0x0000d3e5
    cfa4:	0000d3e5 	.word	0x0000d3e5
    cfa8:	0000d001 	.word	0x0000d001
    cfac:	0000d22f 	.word	0x0000d22f
    cfb0:	0000d3e5 	.word	0x0000d3e5
    cfb4:	0000d36b 	.word	0x0000d36b
    cfb8:	0000d3e5 	.word	0x0000d3e5
    cfbc:	0000d3e5 	.word	0x0000d3e5
    cfc0:	0000d22f 	.word	0x0000d22f
    cfc4:	0000d3e5 	.word	0x0000d3e5
    cfc8:	0000d3e5 	.word	0x0000d3e5
    cfcc:	0000d3e5 	.word	0x0000d3e5
    cfd0:	0000d3e5 	.word	0x0000d3e5
    cfd4:	0000d3e5 	.word	0x0000d3e5
    cfd8:	0000d3e5 	.word	0x0000d3e5
    cfdc:	0000d3e5 	.word	0x0000d3e5
    cfe0:	0000d3e5 	.word	0x0000d3e5
    cfe4:	0000d3e5 	.word	0x0000d3e5
    cfe8:	0000d027 	.word	0x0000d027
    cfec:	0000d3e5 	.word	0x0000d3e5
    cff0:	0000d199 	.word	0x0000d199
    cff4:	0000d3e5 	.word	0x0000d3e5
    cff8:	0000d3e5 	.word	0x0000d3e5
    cffc:	0000d0f9 	.word	0x0000d0f9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d000:	9b01      	ldr	r3, [sp, #4]
    d002:	1d1a      	adds	r2, r3, #4
    d004:	9201      	str	r2, [sp, #4]
    d006:	681b      	ldr	r3, [r3, #0]
    d008:	f88d 301f 	strb.w	r3, [sp, #31]

                if ( pcBuf )
    d00c:	9b03      	ldr	r3, [sp, #12]
    d00e:	2b00      	cmp	r3, #0
    d010:	d005      	beq.n	d01e <am_util_stdio_vsprintf+0x1fe>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d012:	9b03      	ldr	r3, [sp, #12]
    d014:	1c5a      	adds	r2, r3, #1
    d016:	9203      	str	r2, [sp, #12]
    d018:	f89d 201f 	ldrb.w	r2, [sp, #31]
    d01c:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d01e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d020:	3301      	adds	r3, #1
    d022:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d024:	e1ee      	b.n	d404 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d026:	9b01      	ldr	r3, [sp, #4]
    d028:	1d1a      	adds	r2, r3, #4
    d02a:	9201      	str	r2, [sp, #4]
    d02c:	681b      	ldr	r3, [r3, #0]
    d02e:	9315      	str	r3, [sp, #84]	; 0x54
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d030:	9815      	ldr	r0, [sp, #84]	; 0x54
    d032:	f7ff fdbe 	bl	cbb2 <simple_strlen>
    d036:	900b      	str	r0, [sp, #44]	; 0x2c
                if ( iWidth > 0 )
    d038:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d03a:	2b00      	cmp	r3, #0
    d03c:	dd2e      	ble.n	d09c <am_util_stdio_vsprintf+0x27c>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d03e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d040:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d042:	429a      	cmp	r2, r3
    d044:	d22a      	bcs.n	d09c <am_util_stdio_vsprintf+0x27c>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d046:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d04a:	1ad3      	subs	r3, r2, r3
    d04c:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d04e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d052:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d054:	4619      	mov	r1, r3
    d056:	9803      	ldr	r0, [sp, #12]
    d058:	f7ff fdc1 	bl	cbde <padbuffer>
    d05c:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d05e:	9b03      	ldr	r3, [sp, #12]
    d060:	2b00      	cmp	r3, #0
    d062:	d001      	beq.n	d068 <am_util_stdio_vsprintf+0x248>
    d064:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d066:	e000      	b.n	d06a <am_util_stdio_vsprintf+0x24a>
    d068:	2300      	movs	r3, #0
    d06a:	9a03      	ldr	r2, [sp, #12]
    d06c:	4413      	add	r3, r2
    d06e:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d070:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d072:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d074:	4413      	add	r3, r2
    d076:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d078:	2300      	movs	r3, #0
    d07a:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }

                while (*pcStr != 0x0)
    d07c:	e00e      	b.n	d09c <am_util_stdio_vsprintf+0x27c>
                {
                    if ( pcBuf )
    d07e:	9b03      	ldr	r3, [sp, #12]
    d080:	2b00      	cmp	r3, #0
    d082:	d005      	beq.n	d090 <am_util_stdio_vsprintf+0x270>
                    {
                        *pcBuf++ = *pcStr;
    d084:	9b03      	ldr	r3, [sp, #12]
    d086:	1c5a      	adds	r2, r3, #1
    d088:	9203      	str	r2, [sp, #12]
    d08a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d08c:	7812      	ldrb	r2, [r2, #0]
    d08e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d090:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d092:	3301      	adds	r3, #1
    d094:	9315      	str	r3, [sp, #84]	; 0x54
                    ++ui32CharCnt;
    d096:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d098:	3301      	adds	r3, #1
    d09a:	9311      	str	r3, [sp, #68]	; 0x44
                while (*pcStr != 0x0)
    d09c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d09e:	781b      	ldrb	r3, [r3, #0]
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	d1ec      	bne.n	d07e <am_util_stdio_vsprintf+0x25e>
                }

                if ( iWidth )
    d0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0a6:	2b00      	cmp	r3, #0
    d0a8:	f000 81a9 	beq.w	d3fe <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d0ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0ae:	425b      	negs	r3, r3
    d0b0:	9310      	str	r3, [sp, #64]	; 0x40

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d0b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d0b6:	429a      	cmp	r2, r3
    d0b8:	f080 81a1 	bcs.w	d3fe <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d0bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d0be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0c0:	1ad3      	subs	r3, r2, r3
    d0c2:	9310      	str	r3, [sp, #64]	; 0x40
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0c4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d0c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d0ca:	4619      	mov	r1, r3
    d0cc:	9803      	ldr	r0, [sp, #12]
    d0ce:	f7ff fd86 	bl	cbde <padbuffer>
    d0d2:	9010      	str	r0, [sp, #64]	; 0x40
                        pcBuf += pcBuf ? iWidth : 0;
    d0d4:	9b03      	ldr	r3, [sp, #12]
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	d001      	beq.n	d0de <am_util_stdio_vsprintf+0x2be>
    d0da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0dc:	e000      	b.n	d0e0 <am_util_stdio_vsprintf+0x2c0>
    d0de:	2300      	movs	r3, #0
    d0e0:	9a03      	ldr	r2, [sp, #12]
    d0e2:	4413      	add	r3, r2
    d0e4:	9303      	str	r3, [sp, #12]
                        ui32CharCnt += iWidth;
    d0e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d0ea:	4413      	add	r3, r2
    d0ec:	9311      	str	r3, [sp, #68]	; 0x44
                        iWidth = 0;
    d0ee:	2300      	movs	r3, #0
    d0f0:	9310      	str	r3, [sp, #64]	; 0x40
                    }
                }
                break;
    d0f2:	e184      	b.n	d3fe <am_util_stdio_vsprintf+0x5de>
    d0f4:	10001180 	.word	0x10001180

            case 'x':
                bLower = true;
    d0f8:	2301      	movs	r3, #1
    d0fa:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0fe:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d102:	2b00      	cmp	r3, #0
    d104:	d009      	beq.n	d11a <am_util_stdio_vsprintf+0x2fa>
    d106:	9b01      	ldr	r3, [sp, #4]
    d108:	3307      	adds	r3, #7
    d10a:	f023 0307 	bic.w	r3, r3, #7
    d10e:	f103 0208 	add.w	r2, r3, #8
    d112:	9201      	str	r2, [sp, #4]
    d114:	e9d3 4500 	ldrd	r4, r5, [r3]
    d118:	e006      	b.n	d128 <am_util_stdio_vsprintf+0x308>
                                      va_arg(pArgs, uint32_t);
    d11a:	9b01      	ldr	r3, [sp, #4]
    d11c:	1d1a      	adds	r2, r3, #4
    d11e:	9201      	str	r2, [sp, #4]
    d120:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d122:	2200      	movs	r2, #0
    d124:	461c      	mov	r4, r3
    d126:	4615      	mov	r5, r2
    d128:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48

                if ( iWidth )
    d12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d12e:	2b00      	cmp	r3, #0
    d130:	d01e      	beq.n	d170 <am_util_stdio_vsprintf+0x350>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d132:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d136:	f7ff fc2f 	bl	c998 <ndigits_in_hex>
    d13a:	4602      	mov	r2, r0
    d13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d13e:	1a9b      	subs	r3, r3, r2
    d140:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d142:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d146:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d148:	4619      	mov	r1, r3
    d14a:	9803      	ldr	r0, [sp, #12]
    d14c:	f7ff fd47 	bl	cbde <padbuffer>
    d150:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d152:	9b03      	ldr	r3, [sp, #12]
    d154:	2b00      	cmp	r3, #0
    d156:	d001      	beq.n	d15c <am_util_stdio_vsprintf+0x33c>
    d158:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d15a:	e000      	b.n	d15e <am_util_stdio_vsprintf+0x33e>
    d15c:	2300      	movs	r3, #0
    d15e:	9a03      	ldr	r2, [sp, #12]
    d160:	4413      	add	r3, r2
    d162:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d164:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d166:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d168:	4413      	add	r3, r2
    d16a:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d16c:	2300      	movs	r3, #0
    d16e:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d170:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    d174:	9a03      	ldr	r2, [sp, #12]
    d176:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d17a:	f7ff fcba 	bl	caf2 <uint64_to_hexstr>
    d17e:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d180:	9b03      	ldr	r3, [sp, #12]
    d182:	2b00      	cmp	r3, #0
    d184:	d003      	beq.n	d18e <am_util_stdio_vsprintf+0x36e>
                {
                    pcBuf += iVal;
    d186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d188:	9a03      	ldr	r2, [sp, #12]
    d18a:	4413      	add	r3, r2
    d18c:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d18e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d190:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d192:	4413      	add	r3, r2
    d194:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d196:	e135      	b.n	d404 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d198:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d19c:	2b00      	cmp	r3, #0
    d19e:	d009      	beq.n	d1b4 <am_util_stdio_vsprintf+0x394>
    d1a0:	9b01      	ldr	r3, [sp, #4]
    d1a2:	3307      	adds	r3, #7
    d1a4:	f023 0307 	bic.w	r3, r3, #7
    d1a8:	f103 0208 	add.w	r2, r3, #8
    d1ac:	9201      	str	r2, [sp, #4]
    d1ae:	e9d3 6700 	ldrd	r6, r7, [r3]
    d1b2:	e006      	b.n	d1c2 <am_util_stdio_vsprintf+0x3a2>
                                      va_arg(pArgs, uint32_t);
    d1b4:	9b01      	ldr	r3, [sp, #4]
    d1b6:	1d1a      	adds	r2, r3, #4
    d1b8:	9201      	str	r2, [sp, #4]
    d1ba:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d1bc:	2200      	movs	r2, #0
    d1be:	461e      	mov	r6, r3
    d1c0:	4617      	mov	r7, r2
    d1c2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48

                if ( iWidth )
    d1c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1c8:	2b00      	cmp	r3, #0
    d1ca:	d01e      	beq.n	d20a <am_util_stdio_vsprintf+0x3ea>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d1cc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d1d0:	f7ff fba8 	bl	c924 <ndigits_in_u64>
    d1d4:	4602      	mov	r2, r0
    d1d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1d8:	1a9b      	subs	r3, r3, r2
    d1da:	9310      	str	r3, [sp, #64]	; 0x40

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d1dc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d1e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d1e2:	4619      	mov	r1, r3
    d1e4:	9803      	ldr	r0, [sp, #12]
    d1e6:	f7ff fcfa 	bl	cbde <padbuffer>
    d1ea:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d1ec:	9b03      	ldr	r3, [sp, #12]
    d1ee:	2b00      	cmp	r3, #0
    d1f0:	d001      	beq.n	d1f6 <am_util_stdio_vsprintf+0x3d6>
    d1f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1f4:	e000      	b.n	d1f8 <am_util_stdio_vsprintf+0x3d8>
    d1f6:	2300      	movs	r3, #0
    d1f8:	9a03      	ldr	r2, [sp, #12]
    d1fa:	4413      	add	r3, r2
    d1fc:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d1fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d200:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d202:	4413      	add	r3, r2
    d204:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d206:	2300      	movs	r3, #0
    d208:	9310      	str	r3, [sp, #64]	; 0x40
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d20a:	9a03      	ldr	r2, [sp, #12]
    d20c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d210:	f7ff fc2a 	bl	ca68 <uint64_to_str>
    d214:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d216:	9b03      	ldr	r3, [sp, #12]
    d218:	2b00      	cmp	r3, #0
    d21a:	d003      	beq.n	d224 <am_util_stdio_vsprintf+0x404>
                {
                    pcBuf += iVal;
    d21c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d21e:	9a03      	ldr	r2, [sp, #12]
    d220:	4413      	add	r3, r2
    d222:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d226:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d228:	4413      	add	r3, r2
    d22a:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d22c:	e0ea      	b.n	d404 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d22e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    d232:	2b00      	cmp	r3, #0
    d234:	d009      	beq.n	d24a <am_util_stdio_vsprintf+0x42a>
    d236:	9b01      	ldr	r3, [sp, #4]
    d238:	3307      	adds	r3, #7
    d23a:	f023 0307 	bic.w	r3, r3, #7
    d23e:	f103 0208 	add.w	r2, r3, #8
    d242:	9201      	str	r2, [sp, #4]
    d244:	e9d3 8900 	ldrd	r8, r9, [r3]
    d248:	e006      	b.n	d258 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d24a:	9b01      	ldr	r3, [sp, #4]
    d24c:	1d1a      	adds	r2, r3, #4
    d24e:	9201      	str	r2, [sp, #4]
    d250:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d252:	17da      	asrs	r2, r3, #31
    d254:	4698      	mov	r8, r3
    d256:	4691      	mov	r9, r2
    d258:	e9cd 8908 	strd	r8, r9, [sp, #32]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d25c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d260:	2b00      	cmp	r3, #0
    d262:	da0c      	bge.n	d27e <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d264:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d268:	2100      	movs	r1, #0
    d26a:	f1d2 0a00 	rsbs	sl, r2, #0
    d26e:	eb61 0b03 	sbc.w	fp, r1, r3
    d272:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
                    bNeg = true;
    d276:	2301      	movs	r3, #1
    d278:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    d27c:	e006      	b.n	d28c <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d27e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d282:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                    bNeg = false;
    d286:	2300      	movs	r3, #0
    d288:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                }

                if ( iWidth )
    d28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d28e:	2b00      	cmp	r3, #0
    d290:	d04a      	beq.n	d328 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d292:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    d296:	4610      	mov	r0, r2
    d298:	4619      	mov	r1, r3
    d29a:	f7ff fb63 	bl	c964 <ndigits_in_i64>
    d29e:	4602      	mov	r2, r0
    d2a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2a2:	1a9b      	subs	r3, r3, r2
    d2a4:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg )
    d2a6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d2aa:	2b00      	cmp	r3, #0
    d2ac:	d011      	beq.n	d2d2 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d2ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2b0:	3b01      	subs	r3, #1
    d2b2:	9310      	str	r3, [sp, #64]	; 0x40

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d2b4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d2b8:	2b30      	cmp	r3, #48	; 0x30
    d2ba:	d10a      	bne.n	d2d2 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d2bc:	9b03      	ldr	r3, [sp, #12]
    d2be:	2b00      	cmp	r3, #0
    d2c0:	d004      	beq.n	d2cc <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d2c2:	9b03      	ldr	r3, [sp, #12]
    d2c4:	1c5a      	adds	r2, r3, #1
    d2c6:	9203      	str	r2, [sp, #12]
    d2c8:	222d      	movs	r2, #45	; 0x2d
    d2ca:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d2cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d2ce:	3301      	adds	r3, #1
    d2d0:	9311      	str	r3, [sp, #68]	; 0x44
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d2d2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d2d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d2d8:	4619      	mov	r1, r3
    d2da:	9803      	ldr	r0, [sp, #12]
    d2dc:	f7ff fc7f 	bl	cbde <padbuffer>
    d2e0:	9010      	str	r0, [sp, #64]	; 0x40
                    pcBuf += pcBuf ? iWidth : 0;
    d2e2:	9b03      	ldr	r3, [sp, #12]
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d001      	beq.n	d2ec <am_util_stdio_vsprintf+0x4cc>
    d2e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2ea:	e000      	b.n	d2ee <am_util_stdio_vsprintf+0x4ce>
    d2ec:	2300      	movs	r3, #0
    d2ee:	9a03      	ldr	r2, [sp, #12]
    d2f0:	4413      	add	r3, r2
    d2f2:	9303      	str	r3, [sp, #12]
                    ui32CharCnt += iWidth;
    d2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d2f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d2f8:	4413      	add	r3, r2
    d2fa:	9311      	str	r3, [sp, #68]	; 0x44
                    iWidth = 0;
    d2fc:	2300      	movs	r3, #0
    d2fe:	9310      	str	r3, [sp, #64]	; 0x40

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d300:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d304:	2b00      	cmp	r3, #0
    d306:	d01e      	beq.n	d346 <am_util_stdio_vsprintf+0x526>
    d308:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    d30c:	2b20      	cmp	r3, #32
    d30e:	d11a      	bne.n	d346 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d310:	9b03      	ldr	r3, [sp, #12]
    d312:	2b00      	cmp	r3, #0
    d314:	d004      	beq.n	d320 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d316:	9b03      	ldr	r3, [sp, #12]
    d318:	1c5a      	adds	r2, r3, #1
    d31a:	9203      	str	r2, [sp, #12]
    d31c:	222d      	movs	r2, #45	; 0x2d
    d31e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d320:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d322:	3301      	adds	r3, #1
    d324:	9311      	str	r3, [sp, #68]	; 0x44
    d326:	e00e      	b.n	d346 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d328:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    d32c:	2b00      	cmp	r3, #0
    d32e:	d00a      	beq.n	d346 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d330:	9b03      	ldr	r3, [sp, #12]
    d332:	2b00      	cmp	r3, #0
    d334:	d004      	beq.n	d340 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d336:	9b03      	ldr	r3, [sp, #12]
    d338:	1c5a      	adds	r2, r3, #1
    d33a:	9203      	str	r2, [sp, #12]
    d33c:	222d      	movs	r2, #45	; 0x2d
    d33e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d340:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d342:	3301      	adds	r3, #1
    d344:	9311      	str	r3, [sp, #68]	; 0x44
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d346:	9a03      	ldr	r2, [sp, #12]
    d348:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    d34c:	f7ff fb8c 	bl	ca68 <uint64_to_str>
    d350:	900f      	str	r0, [sp, #60]	; 0x3c

                if ( pcBuf )
    d352:	9b03      	ldr	r3, [sp, #12]
    d354:	2b00      	cmp	r3, #0
    d356:	d003      	beq.n	d360 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d35a:	9a03      	ldr	r2, [sp, #12]
    d35c:	4413      	add	r3, r2
    d35e:	9303      	str	r3, [sp, #12]
                }

                ui32CharCnt += iVal;
    d360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d362:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d364:	4413      	add	r3, r2
    d366:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d368:	e04c      	b.n	d404 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d36a:	9b03      	ldr	r3, [sp, #12]
    d36c:	2b00      	cmp	r3, #0
    d36e:	d048      	beq.n	d402 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d370:	9b01      	ldr	r3, [sp, #4]
    d372:	3307      	adds	r3, #7
    d374:	f023 0307 	bic.w	r3, r3, #7
    d378:	f103 0208 	add.w	r2, r3, #8
    d37c:	9201      	str	r2, [sp, #4]
    d37e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d382:	4610      	mov	r0, r2
    d384:	4619      	mov	r1, r3
    d386:	f7fe febb 	bl	c100 <__aeabi_d2f>
    d38a:	4603      	mov	r3, r0
    d38c:	9306      	str	r3, [sp, #24]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d38e:	9b03      	ldr	r3, [sp, #12]
    d390:	2214      	movs	r2, #20
    d392:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d394:	990e      	ldr	r1, [sp, #56]	; 0x38
    d396:	9803      	ldr	r0, [sp, #12]
    d398:	ed9d 0a06 	vldr	s0, [sp, #24]
    d39c:	f7ff fc42 	bl	cc24 <ftoa>
    d3a0:	900f      	str	r0, [sp, #60]	; 0x3c
                    if ( iVal < 0 )
    d3a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	da14      	bge.n	d3d2 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d3a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
    d3ae:	d102      	bne.n	d3b6 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d3b0:	4b1e      	ldr	r3, [pc, #120]	; (d42c <am_util_stdio_vsprintf+0x60c>)
    d3b2:	930c      	str	r3, [sp, #48]	; 0x30
    d3b4:	e008      	b.n	d3c8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d3b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3b8:	f113 0f02 	cmn.w	r3, #2
    d3bc:	d102      	bne.n	d3c4 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d3be:	4b1c      	ldr	r3, [pc, #112]	; (d430 <am_util_stdio_vsprintf+0x610>)
    d3c0:	930c      	str	r3, [sp, #48]	; 0x30
    d3c2:	e001      	b.n	d3c8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d3c4:	4b1b      	ldr	r3, [pc, #108]	; (d434 <am_util_stdio_vsprintf+0x614>)
    d3c6:	930c      	str	r3, [sp, #48]	; 0x30
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d3c8:	9b03      	ldr	r3, [sp, #12]
    d3ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d3cc:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d3ce:	2303      	movs	r3, #3
    d3d0:	930f      	str	r3, [sp, #60]	; 0x3c
                    }
                    ui32CharCnt += iVal;
    d3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d3d6:	4413      	add	r3, r2
    d3d8:	9311      	str	r3, [sp, #68]	; 0x44
                    pcBuf += iVal;
    d3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3dc:	9a03      	ldr	r2, [sp, #12]
    d3de:	4413      	add	r3, r2
    d3e0:	9303      	str	r3, [sp, #12]
                }
                break;
    d3e2:	e00e      	b.n	d402 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d3e4:	9b03      	ldr	r3, [sp, #12]
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d005      	beq.n	d3f6 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d3ea:	9b03      	ldr	r3, [sp, #12]
    d3ec:	1c5a      	adds	r2, r3, #1
    d3ee:	9203      	str	r2, [sp, #12]
    d3f0:	9a02      	ldr	r2, [sp, #8]
    d3f2:	7812      	ldrb	r2, [r2, #0]
    d3f4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d3f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3f8:	3301      	adds	r3, #1
    d3fa:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    d3fc:	e002      	b.n	d404 <am_util_stdio_vsprintf+0x5e4>
                break;
    d3fe:	bf00      	nop
    d400:	e000      	b.n	d404 <am_util_stdio_vsprintf+0x5e4>
                break;
    d402:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d404:	9b02      	ldr	r3, [sp, #8]
    d406:	3301      	adds	r3, #1
    d408:	9302      	str	r3, [sp, #8]
    while ( *pcFmt != 0x0 )
    d40a:	9b02      	ldr	r3, [sp, #8]
    d40c:	781b      	ldrb	r3, [r3, #0]
    d40e:	2b00      	cmp	r3, #0
    d410:	f47f ad11 	bne.w	ce36 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d414:	9b03      	ldr	r3, [sp, #12]
    d416:	2b00      	cmp	r3, #0
    d418:	d002      	beq.n	d420 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d41a:	9b03      	ldr	r3, [sp, #12]
    d41c:	2200      	movs	r2, #0
    d41e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d420:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    d422:	4618      	mov	r0, r3
    d424:	b017      	add	sp, #92	; 0x5c
    d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d42a:	bf00      	nop
    d42c:	00302e30 	.word	0x00302e30
    d430:	00232e23 	.word	0x00232e23
    d434:	003f2e3f 	.word	0x003f2e3f

0000d438 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d438:	b40f      	push	{r0, r1, r2, r3}
    d43a:	b500      	push	{lr}
    d43c:	b083      	sub	sp, #12
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d43e:	4b0c      	ldr	r3, [pc, #48]	; (d470 <am_util_stdio_printf+0x38>)
    d440:	681b      	ldr	r3, [r3, #0]
    d442:	2b00      	cmp	r3, #0
    d444:	d101      	bne.n	d44a <am_util_stdio_printf+0x12>
    {
        return 0;
    d446:	2300      	movs	r3, #0
    d448:	e00c      	b.n	d464 <am_util_stdio_printf+0x2c>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d44a:	ab05      	add	r3, sp, #20
    d44c:	9300      	str	r3, [sp, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d44e:	9a00      	ldr	r2, [sp, #0]
    d450:	9904      	ldr	r1, [sp, #16]
    d452:	4808      	ldr	r0, [pc, #32]	; (d474 <am_util_stdio_printf+0x3c>)
    d454:	f7ff fce4 	bl	ce20 <am_util_stdio_vsprintf>
    d458:	9001      	str	r0, [sp, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d45a:	4b05      	ldr	r3, [pc, #20]	; (d470 <am_util_stdio_printf+0x38>)
    d45c:	681b      	ldr	r3, [r3, #0]
    d45e:	4805      	ldr	r0, [pc, #20]	; (d474 <am_util_stdio_printf+0x3c>)
    d460:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d462:	9b01      	ldr	r3, [sp, #4]
}
    d464:	4618      	mov	r0, r3
    d466:	b003      	add	sp, #12
    d468:	f85d eb04 	ldr.w	lr, [sp], #4
    d46c:	b004      	add	sp, #16
    d46e:	4770      	bx	lr
    d470:	1000107c 	.word	0x1000107c
    d474:	10001080 	.word	0x10001080

0000d478 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d478:	b508      	push	{r3, lr}
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d47a:	4802      	ldr	r0, [pc, #8]	; (d484 <am_util_stdio_terminal_clear+0xc>)
    d47c:	f7ff ffdc 	bl	d438 <am_util_stdio_printf>
}
    d480:	bf00      	nop
    d482:	bd08      	pop	{r3, pc}
    d484:	0000f370 	.word	0x0000f370

0000d488 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d488:	4811      	ldr	r0, [pc, #68]	; (d4d0 <zero_loop+0x12>)
    d48a:	4912      	ldr	r1, [pc, #72]	; (d4d4 <zero_loop+0x16>)
    d48c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d48e:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d492:	4811      	ldr	r0, [pc, #68]	; (d4d8 <zero_loop+0x1a>)
    d494:	6801      	ldr	r1, [r0, #0]
    d496:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d49a:	6001      	str	r1, [r0, #0]
    d49c:	f3bf 8f4f 	dsb	sy
    d4a0:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d4a4:	480d      	ldr	r0, [pc, #52]	; (d4dc <zero_loop+0x1e>)
    d4a6:	490e      	ldr	r1, [pc, #56]	; (d4e0 <zero_loop+0x22>)
    d4a8:	4a0e      	ldr	r2, [pc, #56]	; (d4e4 <zero_loop+0x26>)

0000d4aa <copy_loop>:
    d4aa:	f850 3b04 	ldr.w	r3, [r0], #4
    d4ae:	f841 3b04 	str.w	r3, [r1], #4
    d4b2:	4291      	cmp	r1, r2
    d4b4:	dbf9      	blt.n	d4aa <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d4b6:	480c      	ldr	r0, [pc, #48]	; (d4e8 <zero_loop+0x2a>)
    d4b8:	490c      	ldr	r1, [pc, #48]	; (d4ec <zero_loop+0x2e>)
    d4ba:	f04f 0200 	mov.w	r2, #0

0000d4be <zero_loop>:
    d4be:	4288      	cmp	r0, r1
    d4c0:	bfb8      	it	lt
    d4c2:	f840 2b04 	strlt.w	r2, [r0], #4
    d4c6:	dbfa      	blt.n	d4be <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d4c8:	f7fe feba 	bl	c240 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d4cc:	be00      	bkpt	0x0000
}
    d4ce:	bf00      	nop
    d4d0:	e000ed08 	.word	0xe000ed08
    d4d4:	0000c000 	.word	0x0000c000
    d4d8:	e000ed88 	.word	0xe000ed88
    d4dc:	0000f670 	.word	0x0000f670
    d4e0:	10001000 	.word	0x10001000
    d4e4:	10001078 	.word	0x10001078
    d4e8:	10001078 	.word	0x10001078
    d4ec:	10001a5c 	.word	0x10001a5c

0000d4f0 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d4f0:	e7fe      	b.n	d4f0 <NMI_Handler>

0000d4f2 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d4f2:	e7fe      	b.n	d4f2 <BusFault_Handler>

0000d4f4 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    d4f4:	e7fe      	b.n	d4f4 <DebugMon_Handler>
	...

0000d4f8 <am_hal_burst_mode_initialize>:
    d4f8:	b570      	push	{r4, r5, r6, lr}
    d4fa:	4c19      	ldr	r4, [pc, #100]	; (d560 <am_hal_burst_mode_initialize+0x68>)
    d4fc:	6963      	ldr	r3, [r4, #20]
    d4fe:	07d9      	lsls	r1, r3, #31
    d500:	b082      	sub	sp, #8
    d502:	4605      	mov	r5, r0
    d504:	d51e      	bpl.n	d544 <am_hal_burst_mode_initialize+0x4c>
    d506:	4917      	ldr	r1, [pc, #92]	; (d564 <am_hal_burst_mode_initialize+0x6c>)
    d508:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    d50a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    d50e:	628a      	str	r2, [r1, #40]	; 0x28
    d510:	7e22      	ldrb	r2, [r4, #24]
    d512:	2320      	movs	r3, #32
    d514:	f042 0210 	orr.w	r2, r2, #16
    d518:	2601      	movs	r6, #1
    d51a:	7622      	strb	r2, [r4, #24]
    d51c:	f6a1 71e8 	subw	r1, r1, #4072	; 0xfe8
    d520:	9600      	str	r6, [sp, #0]
    d522:	461a      	mov	r2, r3
    d524:	f242 7010 	movw	r0, #10000	; 0x2710
    d528:	f000 fbf0 	bl	dd0c <am_hal_flash_delay_status_check>
    d52c:	b990      	cbnz	r0, d554 <am_hal_burst_mode_initialize+0x5c>
    d52e:	69a3      	ldr	r3, [r4, #24]
    d530:	065a      	lsls	r2, r3, #25
    d532:	d507      	bpl.n	d544 <am_hal_burst_mode_initialize+0x4c>
    d534:	69a3      	ldr	r3, [r4, #24]
    d536:	069b      	lsls	r3, r3, #26
    d538:	d504      	bpl.n	d544 <am_hal_burst_mode_initialize+0x4c>
    d53a:	4b0b      	ldr	r3, [pc, #44]	; (d568 <am_hal_burst_mode_initialize+0x70>)
    d53c:	701e      	strb	r6, [r3, #0]
    d53e:	7028      	strb	r0, [r5, #0]
    d540:	b002      	add	sp, #8
    d542:	bd70      	pop	{r4, r5, r6, pc}
    d544:	4a08      	ldr	r2, [pc, #32]	; (d568 <am_hal_burst_mode_initialize+0x70>)
    d546:	2100      	movs	r1, #0
    d548:	2301      	movs	r3, #1
    d54a:	2007      	movs	r0, #7
    d54c:	7011      	strb	r1, [r2, #0]
    d54e:	702b      	strb	r3, [r5, #0]
    d550:	b002      	add	sp, #8
    d552:	bd70      	pop	{r4, r5, r6, pc}
    d554:	4b04      	ldr	r3, [pc, #16]	; (d568 <am_hal_burst_mode_initialize+0x70>)
    d556:	2200      	movs	r2, #0
    d558:	701a      	strb	r2, [r3, #0]
    d55a:	702e      	strb	r6, [r5, #0]
    d55c:	b002      	add	sp, #8
    d55e:	bd70      	pop	{r4, r5, r6, pc}
    d560:	40020000 	.word	0x40020000
    d564:	40021000 	.word	0x40021000
    d568:	10001181 	.word	0x10001181

0000d56c <am_hal_burst_mode_enable>:
    d56c:	b570      	push	{r4, r5, r6, lr}
    d56e:	4b15      	ldr	r3, [pc, #84]	; (d5c4 <am_hal_burst_mode_enable+0x58>)
    d570:	781b      	ldrb	r3, [r3, #0]
    d572:	b082      	sub	sp, #8
    d574:	4604      	mov	r4, r0
    d576:	b1db      	cbz	r3, d5b0 <am_hal_burst_mode_enable+0x44>
    d578:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
    d57c:	2601      	movs	r6, #1
    d57e:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    d582:	4911      	ldr	r1, [pc, #68]	; (d5c8 <am_hal_burst_mode_enable+0x5c>)
    d584:	4332      	orrs	r2, r6
    d586:	2304      	movs	r3, #4
    d588:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    d58c:	f242 7010 	movw	r0, #10000	; 0x2710
    d590:	9600      	str	r6, [sp, #0]
    d592:	461a      	mov	r2, r3
    d594:	f000 fbba 	bl	dd0c <am_hal_flash_delay_status_check>
    d598:	b938      	cbnz	r0, d5aa <am_hal_burst_mode_enable+0x3e>
    d59a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d59c:	079b      	lsls	r3, r3, #30
    d59e:	d50c      	bpl.n	d5ba <am_hal_burst_mode_enable+0x4e>
    d5a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    d5a2:	f013 0f04 	tst.w	r3, #4
    d5a6:	bf18      	it	ne
    d5a8:	4606      	movne	r6, r0
    d5aa:	7026      	strb	r6, [r4, #0]
    d5ac:	b002      	add	sp, #8
    d5ae:	bd70      	pop	{r4, r5, r6, pc}
    d5b0:	2301      	movs	r3, #1
    d5b2:	7003      	strb	r3, [r0, #0]
    d5b4:	2007      	movs	r0, #7
    d5b6:	b002      	add	sp, #8
    d5b8:	bd70      	pop	{r4, r5, r6, pc}
    d5ba:	4630      	mov	r0, r6
    d5bc:	7026      	strb	r6, [r4, #0]
    d5be:	b002      	add	sp, #8
    d5c0:	bd70      	pop	{r4, r5, r6, pc}
    d5c2:	bf00      	nop
    d5c4:	10001181 	.word	0x10001181
    d5c8:	40004034 	.word	0x40004034

0000d5cc <am_hal_burst_mode_disable>:
    d5cc:	b530      	push	{r4, r5, lr}
    d5ce:	b085      	sub	sp, #20
    d5d0:	4605      	mov	r5, r0
    d5d2:	f000 fd59 	bl	e088 <am_hal_interrupt_master_disable>
    d5d6:	2100      	movs	r1, #0
    d5d8:	4603      	mov	r3, r0
    d5da:	4810      	ldr	r0, [pc, #64]	; (d61c <am_hal_burst_mode_disable+0x50>)
    d5dc:	9303      	str	r3, [sp, #12]
    d5de:	f000 fbcf 	bl	dd80 <am_hal_flash_store_ui32>
    d5e2:	9803      	ldr	r0, [sp, #12]
    d5e4:	f000 fd54 	bl	e090 <am_hal_interrupt_master_set>
    d5e8:	4a0d      	ldr	r2, [pc, #52]	; (d620 <am_hal_burst_mode_disable+0x54>)
    d5ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
    d5ec:	2401      	movs	r4, #1
    d5ee:	f36f 71df 	bfc	r1, #31, #1
    d5f2:	6291      	str	r1, [r2, #40]	; 0x28
    d5f4:	2300      	movs	r3, #0
    d5f6:	4909      	ldr	r1, [pc, #36]	; (d61c <am_hal_burst_mode_disable+0x50>)
    d5f8:	9400      	str	r4, [sp, #0]
    d5fa:	2204      	movs	r2, #4
    d5fc:	f242 7010 	movw	r0, #10000	; 0x2710
    d600:	f000 fb84 	bl	dd0c <am_hal_flash_delay_status_check>
    d604:	b930      	cbnz	r0, d614 <am_hal_burst_mode_disable+0x48>
    d606:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d60c:	f013 0f04 	tst.w	r3, #4
    d610:	bf18      	it	ne
    d612:	4604      	movne	r4, r0
    d614:	702c      	strb	r4, [r5, #0]
    d616:	b005      	add	sp, #20
    d618:	bd30      	pop	{r4, r5, pc}
    d61a:	bf00      	nop
    d61c:	40004034 	.word	0x40004034
    d620:	40021000 	.word	0x40021000

0000d624 <am_hal_cachectrl_config>:
    d624:	b530      	push	{r4, r5, lr}
    d626:	b083      	sub	sp, #12
    d628:	4604      	mov	r4, r0
    d62a:	f000 fd2d 	bl	e088 <am_hal_interrupt_master_disable>
    d62e:	4d0e      	ldr	r5, [pc, #56]	; (d668 <am_hal_cachectrl_config+0x44>)
    d630:	9001      	str	r0, [sp, #4]
    d632:	682b      	ldr	r3, [r5, #0]
    d634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d638:	602b      	str	r3, [r5, #0]
    d63a:	9801      	ldr	r0, [sp, #4]
    d63c:	f000 fd28 	bl	e090 <am_hal_interrupt_master_set>
    d640:	7863      	ldrb	r3, [r4, #1]
    d642:	7822      	ldrb	r2, [r4, #0]
    d644:	78a1      	ldrb	r1, [r4, #2]
    d646:	021b      	lsls	r3, r3, #8
    d648:	f403 7340 	and.w	r3, r3, #768	; 0x300
    d64c:	0112      	lsls	r2, r2, #4
    d64e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    d652:	b2d2      	uxtb	r2, r2
    d654:	4313      	orrs	r3, r2
    d656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d65a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d65e:	2000      	movs	r0, #0
    d660:	602b      	str	r3, [r5, #0]
    d662:	b003      	add	sp, #12
    d664:	bd30      	pop	{r4, r5, pc}
    d666:	bf00      	nop
    d668:	40018000 	.word	0x40018000

0000d66c <am_hal_cachectrl_enable>:
    d66c:	4a03      	ldr	r2, [pc, #12]	; (d67c <am_hal_cachectrl_enable+0x10>)
    d66e:	6813      	ldr	r3, [r2, #0]
    d670:	f043 0301 	orr.w	r3, r3, #1
    d674:	2000      	movs	r0, #0
    d676:	6013      	str	r3, [r2, #0]
    d678:	4770      	bx	lr
    d67a:	bf00      	nop
    d67c:	40018000 	.word	0x40018000

0000d680 <am_hal_cachectrl_control>:
    d680:	b510      	push	{r4, lr}
    d682:	3801      	subs	r0, #1
    d684:	b08e      	sub	sp, #56	; 0x38
    d686:	2810      	cmp	r0, #16
    d688:	f200 815e 	bhi.w	d948 <am_hal_cachectrl_control+0x2c8>
    d68c:	e8df f010 	tbh	[pc, r0, lsl #1]
    d690:	00360018 	.word	0x00360018
    d694:	0040003d 	.word	0x0040003d
    d698:	00450043 	.word	0x00450043
    d69c:	0011001a 	.word	0x0011001a
    d6a0:	00540047 	.word	0x00540047
    d6a4:	009a0061 	.word	0x009a0061
    d6a8:	010c00d3 	.word	0x010c00d3
    d6ac:	013f0126 	.word	0x013f0126
    d6b0:	001d      	.short	0x001d
    d6b2:	f44f 7300 	mov.w	r3, #512	; 0x200
    d6b6:	4aac      	ldr	r2, [pc, #688]	; (d968 <am_hal_cachectrl_control+0x2e8>)
    d6b8:	2000      	movs	r0, #0
    d6ba:	6093      	str	r3, [r2, #8]
    d6bc:	b00e      	add	sp, #56	; 0x38
    d6be:	bd10      	pop	{r4, pc}
    d6c0:	2301      	movs	r3, #1
    d6c2:	e7f8      	b.n	d6b6 <am_hal_cachectrl_control+0x36>
    d6c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d6c8:	e7f5      	b.n	d6b6 <am_hal_cachectrl_control+0x36>
    d6ca:	2900      	cmp	r1, #0
    d6cc:	f000 813c 	beq.w	d948 <am_hal_cachectrl_control+0x2c8>
    d6d0:	684a      	ldr	r2, [r1, #4]
    d6d2:	48a6      	ldr	r0, [pc, #664]	; (d96c <am_hal_cachectrl_control+0x2ec>)
    d6d4:	4202      	tst	r2, r0
    d6d6:	f040 8137 	bne.w	d948 <am_hal_cachectrl_control+0x2c8>
    d6da:	688b      	ldr	r3, [r1, #8]
    d6dc:	4018      	ands	r0, r3
    d6de:	f040 8133 	bne.w	d948 <am_hal_cachectrl_control+0x2c8>
    d6e2:	780c      	ldrb	r4, [r1, #0]
    d6e4:	2c00      	cmp	r4, #0
    d6e6:	f040 8133 	bne.w	d950 <am_hal_cachectrl_control+0x2d0>
    d6ea:	4c9f      	ldr	r4, [pc, #636]	; (d968 <am_hal_cachectrl_control+0x2e8>)
    d6ec:	7849      	ldrb	r1, [r1, #1]
    d6ee:	6122      	str	r2, [r4, #16]
    d6f0:	6163      	str	r3, [r4, #20]
    d6f2:	6823      	ldr	r3, [r4, #0]
    d6f4:	f361 0382 	bfi	r3, r1, #2, #1
    d6f8:	6023      	str	r3, [r4, #0]
    d6fa:	e7df      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d6fc:	4b9a      	ldr	r3, [pc, #616]	; (d968 <am_hal_cachectrl_control+0x2e8>)
    d6fe:	681b      	ldr	r3, [r3, #0]
    d700:	01db      	lsls	r3, r3, #7
    d702:	f140 811f 	bpl.w	d944 <am_hal_cachectrl_control+0x2c4>
    d706:	2302      	movs	r3, #2
    d708:	e7d5      	b.n	d6b6 <am_hal_cachectrl_control+0x36>
    d70a:	f44f 6388 	mov.w	r3, #1088	; 0x440
    d70e:	e7d2      	b.n	d6b6 <am_hal_cachectrl_control+0x36>
    d710:	f44f 7308 	mov.w	r3, #544	; 0x220
    d714:	e7cf      	b.n	d6b6 <am_hal_cachectrl_control+0x36>
    d716:	2340      	movs	r3, #64	; 0x40
    d718:	e7cd      	b.n	d6b6 <am_hal_cachectrl_control+0x36>
    d71a:	2320      	movs	r3, #32
    d71c:	e7cb      	b.n	d6b6 <am_hal_cachectrl_control+0x36>
    d71e:	f000 fcb3 	bl	e088 <am_hal_interrupt_master_disable>
    d722:	4a91      	ldr	r2, [pc, #580]	; (d968 <am_hal_cachectrl_control+0x2e8>)
    d724:	9000      	str	r0, [sp, #0]
    d726:	6813      	ldr	r3, [r2, #0]
    d728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d72c:	6013      	str	r3, [r2, #0]
    d72e:	9800      	ldr	r0, [sp, #0]
    d730:	f000 fcae 	bl	e090 <am_hal_interrupt_master_set>
    d734:	2000      	movs	r0, #0
    d736:	e7c1      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d738:	f000 fca6 	bl	e088 <am_hal_interrupt_master_disable>
    d73c:	4a8a      	ldr	r2, [pc, #552]	; (d968 <am_hal_cachectrl_control+0x2e8>)
    d73e:	9001      	str	r0, [sp, #4]
    d740:	6813      	ldr	r3, [r2, #0]
    d742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d746:	6013      	str	r3, [r2, #0]
    d748:	9801      	ldr	r0, [sp, #4]
    d74a:	f000 fca1 	bl	e090 <am_hal_interrupt_master_set>
    d74e:	2000      	movs	r0, #0
    d750:	e7b4      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d752:	f000 fc99 	bl	e088 <am_hal_interrupt_master_disable>
    d756:	4603      	mov	r3, r0
    d758:	4885      	ldr	r0, [pc, #532]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d75a:	9302      	str	r3, [sp, #8]
    d75c:	f000 fb0c 	bl	dd78 <am_hal_flash_load_ui32>
    d760:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d764:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d768:	4881      	ldr	r0, [pc, #516]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d76a:	f000 fb09 	bl	dd80 <am_hal_flash_store_ui32>
    d76e:	9802      	ldr	r0, [sp, #8]
    d770:	f000 fc8e 	bl	e090 <am_hal_interrupt_master_set>
    d774:	f000 fc88 	bl	e088 <am_hal_interrupt_master_disable>
    d778:	4603      	mov	r3, r0
    d77a:	487d      	ldr	r0, [pc, #500]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d77c:	9303      	str	r3, [sp, #12]
    d77e:	f000 fafb 	bl	dd78 <am_hal_flash_load_ui32>
    d782:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d786:	f440 61ee 	orr.w	r1, r0, #1904	; 0x770
    d78a:	4879      	ldr	r0, [pc, #484]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d78c:	f000 faf8 	bl	dd80 <am_hal_flash_store_ui32>
    d790:	9803      	ldr	r0, [sp, #12]
    d792:	f000 fc7d 	bl	e090 <am_hal_interrupt_master_set>
    d796:	f000 fc77 	bl	e088 <am_hal_interrupt_master_disable>
    d79a:	4603      	mov	r3, r0
    d79c:	4874      	ldr	r0, [pc, #464]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d79e:	9304      	str	r3, [sp, #16]
    d7a0:	f000 faea 	bl	dd78 <am_hal_flash_load_ui32>
    d7a4:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d7a8:	f020 000f 	bic.w	r0, r0, #15
    d7ac:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d7b0:	f041 0103 	orr.w	r1, r1, #3
    d7b4:	486e      	ldr	r0, [pc, #440]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d7b6:	f000 fae3 	bl	dd80 <am_hal_flash_store_ui32>
    d7ba:	9804      	ldr	r0, [sp, #16]
    d7bc:	f000 fc68 	bl	e090 <am_hal_interrupt_master_set>
    d7c0:	2000      	movs	r0, #0
    d7c2:	e77b      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d7c4:	f000 fc60 	bl	e088 <am_hal_interrupt_master_disable>
    d7c8:	4603      	mov	r3, r0
    d7ca:	4869      	ldr	r0, [pc, #420]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d7cc:	9305      	str	r3, [sp, #20]
    d7ce:	f000 fad3 	bl	dd78 <am_hal_flash_load_ui32>
    d7d2:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d7d6:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d7da:	4865      	ldr	r0, [pc, #404]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d7dc:	f000 fad0 	bl	dd80 <am_hal_flash_store_ui32>
    d7e0:	9805      	ldr	r0, [sp, #20]
    d7e2:	f000 fc55 	bl	e090 <am_hal_interrupt_master_set>
    d7e6:	f000 fc4f 	bl	e088 <am_hal_interrupt_master_disable>
    d7ea:	4603      	mov	r3, r0
    d7ec:	4860      	ldr	r0, [pc, #384]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d7ee:	9306      	str	r3, [sp, #24]
    d7f0:	f000 fac2 	bl	dd78 <am_hal_flash_load_ui32>
    d7f4:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d7f8:	f440 61ea 	orr.w	r1, r0, #1872	; 0x750
    d7fc:	485c      	ldr	r0, [pc, #368]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d7fe:	f000 fabf 	bl	dd80 <am_hal_flash_store_ui32>
    d802:	9806      	ldr	r0, [sp, #24]
    d804:	f000 fc44 	bl	e090 <am_hal_interrupt_master_set>
    d808:	f000 fc3e 	bl	e088 <am_hal_interrupt_master_disable>
    d80c:	4603      	mov	r3, r0
    d80e:	4858      	ldr	r0, [pc, #352]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d810:	9307      	str	r3, [sp, #28]
    d812:	f000 fab1 	bl	dd78 <am_hal_flash_load_ui32>
    d816:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d81a:	f020 000f 	bic.w	r0, r0, #15
    d81e:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d822:	f041 0101 	orr.w	r1, r1, #1
    d826:	4852      	ldr	r0, [pc, #328]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d828:	f000 faaa 	bl	dd80 <am_hal_flash_store_ui32>
    d82c:	9807      	ldr	r0, [sp, #28]
    d82e:	f000 fc2f 	bl	e090 <am_hal_interrupt_master_set>
    d832:	2000      	movs	r0, #0
    d834:	e742      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d836:	f000 fc27 	bl	e088 <am_hal_interrupt_master_disable>
    d83a:	4603      	mov	r3, r0
    d83c:	484c      	ldr	r0, [pc, #304]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d83e:	9308      	str	r3, [sp, #32]
    d840:	f000 fa9a 	bl	dd78 <am_hal_flash_load_ui32>
    d844:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d848:	f440 51b8 	orr.w	r1, r0, #5888	; 0x1700
    d84c:	4848      	ldr	r0, [pc, #288]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d84e:	f000 fa97 	bl	dd80 <am_hal_flash_store_ui32>
    d852:	9808      	ldr	r0, [sp, #32]
    d854:	f000 fc1c 	bl	e090 <am_hal_interrupt_master_set>
    d858:	f000 fc16 	bl	e088 <am_hal_interrupt_master_disable>
    d85c:	4603      	mov	r3, r0
    d85e:	4844      	ldr	r0, [pc, #272]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d860:	9309      	str	r3, [sp, #36]	; 0x24
    d862:	f000 fa89 	bl	dd78 <am_hal_flash_load_ui32>
    d866:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d86a:	f440 61ec 	orr.w	r1, r0, #1888	; 0x760
    d86e:	4840      	ldr	r0, [pc, #256]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d870:	f000 fa86 	bl	dd80 <am_hal_flash_store_ui32>
    d874:	9809      	ldr	r0, [sp, #36]	; 0x24
    d876:	f000 fc0b 	bl	e090 <am_hal_interrupt_master_set>
    d87a:	f000 fc05 	bl	e088 <am_hal_interrupt_master_disable>
    d87e:	4603      	mov	r3, r0
    d880:	483b      	ldr	r0, [pc, #236]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d882:	930a      	str	r3, [sp, #40]	; 0x28
    d884:	f000 fa78 	bl	dd78 <am_hal_flash_load_ui32>
    d888:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d88c:	f020 000f 	bic.w	r0, r0, #15
    d890:	f440 61e0 	orr.w	r1, r0, #1792	; 0x700
    d894:	f041 0101 	orr.w	r1, r1, #1
    d898:	4835      	ldr	r0, [pc, #212]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d89a:	f000 fa71 	bl	dd80 <am_hal_flash_store_ui32>
    d89e:	980a      	ldr	r0, [sp, #40]	; 0x28
    d8a0:	f000 fbf6 	bl	e090 <am_hal_interrupt_master_set>
    d8a4:	2000      	movs	r0, #0
    d8a6:	e709      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d8a8:	2900      	cmp	r1, #0
    d8aa:	d04d      	beq.n	d948 <am_hal_cachectrl_control+0x2c8>
    d8ac:	680c      	ldr	r4, [r1, #0]
    d8ae:	2c03      	cmp	r4, #3
    d8b0:	d84c      	bhi.n	d94c <am_hal_cachectrl_control+0x2cc>
    d8b2:	f000 fbe9 	bl	e088 <am_hal_interrupt_master_disable>
    d8b6:	4603      	mov	r3, r0
    d8b8:	482d      	ldr	r0, [pc, #180]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d8ba:	930b      	str	r3, [sp, #44]	; 0x2c
    d8bc:	f000 fa5c 	bl	dd78 <am_hal_flash_load_ui32>
    d8c0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    d8c4:	ea40 3104 	orr.w	r1, r0, r4, lsl #12
    d8c8:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d8cc:	4828      	ldr	r0, [pc, #160]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d8ce:	f000 fa57 	bl	dd80 <am_hal_flash_store_ui32>
    d8d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d8d4:	f000 fbdc 	bl	e090 <am_hal_interrupt_master_set>
    d8d8:	2000      	movs	r0, #0
    d8da:	e6ef      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d8dc:	b3a1      	cbz	r1, d948 <am_hal_cachectrl_control+0x2c8>
    d8de:	680c      	ldr	r4, [r1, #0]
    d8e0:	2c07      	cmp	r4, #7
    d8e2:	d833      	bhi.n	d94c <am_hal_cachectrl_control+0x2cc>
    d8e4:	f000 fbd0 	bl	e088 <am_hal_interrupt_master_disable>
    d8e8:	4603      	mov	r3, r0
    d8ea:	4821      	ldr	r0, [pc, #132]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d8ec:	930c      	str	r3, [sp, #48]	; 0x30
    d8ee:	f000 fa43 	bl	dd78 <am_hal_flash_load_ui32>
    d8f2:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    d8f6:	ea40 1104 	orr.w	r1, r0, r4, lsl #4
    d8fa:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d8fe:	481c      	ldr	r0, [pc, #112]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d900:	f000 fa3e 	bl	dd80 <am_hal_flash_store_ui32>
    d904:	980c      	ldr	r0, [sp, #48]	; 0x30
    d906:	f000 fbc3 	bl	e090 <am_hal_interrupt_master_set>
    d90a:	2000      	movs	r0, #0
    d90c:	e6d6      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d90e:	b1d9      	cbz	r1, d948 <am_hal_cachectrl_control+0x2c8>
    d910:	680c      	ldr	r4, [r1, #0]
    d912:	2c0f      	cmp	r4, #15
    d914:	d81a      	bhi.n	d94c <am_hal_cachectrl_control+0x2cc>
    d916:	f000 fbb7 	bl	e088 <am_hal_interrupt_master_disable>
    d91a:	4603      	mov	r3, r0
    d91c:	4814      	ldr	r0, [pc, #80]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d91e:	930d      	str	r3, [sp, #52]	; 0x34
    d920:	f000 fa2a 	bl	dd78 <am_hal_flash_load_ui32>
    d924:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    d928:	f020 000f 	bic.w	r0, r0, #15
    d92c:	ea40 0104 	orr.w	r1, r0, r4
    d930:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d934:	480e      	ldr	r0, [pc, #56]	; (d970 <am_hal_cachectrl_control+0x2f0>)
    d936:	f000 fa23 	bl	dd80 <am_hal_flash_store_ui32>
    d93a:	980d      	ldr	r0, [sp, #52]	; 0x34
    d93c:	f000 fba8 	bl	e090 <am_hal_interrupt_master_set>
    d940:	2000      	movs	r0, #0
    d942:	e6bb      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d944:	2007      	movs	r0, #7
    d946:	e6b9      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d948:	2006      	movs	r0, #6
    d94a:	e6b7      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d94c:	2001      	movs	r0, #1
    d94e:	e6b5      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d950:	2c01      	cmp	r4, #1
    d952:	d1f9      	bne.n	d948 <am_hal_cachectrl_control+0x2c8>
    d954:	4c04      	ldr	r4, [pc, #16]	; (d968 <am_hal_cachectrl_control+0x2e8>)
    d956:	7849      	ldrb	r1, [r1, #1]
    d958:	61a2      	str	r2, [r4, #24]
    d95a:	61e3      	str	r3, [r4, #28]
    d95c:	6823      	ldr	r3, [r4, #0]
    d95e:	f361 03c3 	bfi	r3, r1, #3, #1
    d962:	6023      	str	r3, [r4, #0]
    d964:	e6aa      	b.n	d6bc <am_hal_cachectrl_control+0x3c>
    d966:	bf00      	nop
    d968:	40018000 	.word	0x40018000
    d96c:	f800000f 	.word	0xf800000f
    d970:	40018004 	.word	0x40018004

0000d974 <am_hal_clkgen_control>:
    d974:	4b49      	ldr	r3, [pc, #292]	; (da9c <am_hal_clkgen_control+0x128>)
    d976:	681a      	ldr	r2, [r3, #0]
    d978:	b912      	cbnz	r2, d980 <am_hal_clkgen_control+0xc>
    d97a:	4a49      	ldr	r2, [pc, #292]	; (daa0 <am_hal_clkgen_control+0x12c>)
    d97c:	6812      	ldr	r2, [r2, #0]
    d97e:	601a      	str	r2, [r3, #0]
    d980:	2809      	cmp	r0, #9
    d982:	f200 8089 	bhi.w	da98 <am_hal_clkgen_control+0x124>
    d986:	e8df f000 	tbb	[pc, r0]
    d98a:	160d      	.short	0x160d
    d98c:	423a261e 	.word	0x423a261e
    d990:	055c544c 	.word	0x055c544c
    d994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d998:	2000      	movs	r0, #0
    d99a:	6a1a      	ldr	r2, [r3, #32]
    d99c:	f36f 0200 	bfc	r2, #0, #1
    d9a0:	621a      	str	r2, [r3, #32]
    d9a2:	4770      	bx	lr
    d9a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9a8:	2200      	movs	r2, #0
    d9aa:	2147      	movs	r1, #71	; 0x47
    d9ac:	6159      	str	r1, [r3, #20]
    d9ae:	4610      	mov	r0, r2
    d9b0:	619a      	str	r2, [r3, #24]
    d9b2:	615a      	str	r2, [r3, #20]
    d9b4:	4770      	bx	lr
    d9b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9ba:	2000      	movs	r0, #0
    d9bc:	899a      	ldrh	r2, [r3, #12]
    d9be:	f36f 0200 	bfc	r2, #0, #1
    d9c2:	819a      	strh	r2, [r3, #12]
    d9c4:	4770      	bx	lr
    d9c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9ca:	2000      	movs	r0, #0
    d9cc:	899a      	ldrh	r2, [r3, #12]
    d9ce:	f36f 0241 	bfc	r2, #1, #1
    d9d2:	819a      	strh	r2, [r3, #12]
    d9d4:	4770      	bx	lr
    d9d6:	4a33      	ldr	r2, [pc, #204]	; (daa4 <am_hal_clkgen_control+0x130>)
    d9d8:	68d3      	ldr	r3, [r2, #12]
    d9da:	b2db      	uxtb	r3, r3
    d9dc:	2b21      	cmp	r3, #33	; 0x21
    d9de:	d106      	bne.n	d9ee <am_hal_clkgen_control+0x7a>
    d9e0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d9e4:	2101      	movs	r1, #1
    d9e6:	f361 2309 	bfi	r3, r1, #8, #2
    d9ea:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d9ee:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d9f2:	2000      	movs	r0, #0
    d9f4:	8993      	ldrh	r3, [r2, #12]
    d9f6:	f043 0301 	orr.w	r3, r3, #1
    d9fa:	8193      	strh	r3, [r2, #12]
    d9fc:	4770      	bx	lr
    d9fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da02:	2000      	movs	r0, #0
    da04:	8993      	ldrh	r3, [r2, #12]
    da06:	f043 0302 	orr.w	r3, r3, #2
    da0a:	8193      	strh	r3, [r2, #12]
    da0c:	4770      	bx	lr
    da0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da12:	2200      	movs	r2, #0
    da14:	2047      	movs	r0, #71	; 0x47
    da16:	2101      	movs	r1, #1
    da18:	6158      	str	r0, [r3, #20]
    da1a:	6199      	str	r1, [r3, #24]
    da1c:	4610      	mov	r0, r2
    da1e:	615a      	str	r2, [r3, #20]
    da20:	4770      	bx	lr
    da22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da26:	2000      	movs	r0, #0
    da28:	899a      	ldrh	r2, [r3, #12]
    da2a:	f36f 12c7 	bfc	r2, #7, #1
    da2e:	819a      	strh	r2, [r3, #12]
    da30:	4770      	bx	lr
    da32:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da36:	2000      	movs	r0, #0
    da38:	8993      	ldrh	r3, [r2, #12]
    da3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    da3e:	8193      	strh	r3, [r2, #12]
    da40:	4770      	bx	lr
    da42:	4a18      	ldr	r2, [pc, #96]	; (daa4 <am_hal_clkgen_control+0x130>)
    da44:	68d3      	ldr	r3, [r2, #12]
    da46:	b2db      	uxtb	r3, r3
    da48:	2b21      	cmp	r3, #33	; 0x21
    da4a:	d00a      	beq.n	da62 <am_hal_clkgen_control+0xee>
    da4c:	b139      	cbz	r1, da5e <am_hal_clkgen_control+0xea>
    da4e:	680b      	ldr	r3, [r1, #0]
    da50:	f043 0301 	orr.w	r3, r3, #1
    da54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da58:	2000      	movs	r0, #0
    da5a:	6213      	str	r3, [r2, #32]
    da5c:	4770      	bx	lr
    da5e:	4b12      	ldr	r3, [pc, #72]	; (daa8 <am_hal_clkgen_control+0x134>)
    da60:	e7f8      	b.n	da54 <am_hal_clkgen_control+0xe0>
    da62:	b500      	push	{lr}
    da64:	b083      	sub	sp, #12
    da66:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    da6a:	9101      	str	r1, [sp, #4]
    da6c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    da70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    da74:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    da78:	f000 f938 	bl	dcec <am_hal_flash_delay>
    da7c:	9901      	ldr	r1, [sp, #4]
    da7e:	b149      	cbz	r1, da94 <am_hal_clkgen_control+0x120>
    da80:	680b      	ldr	r3, [r1, #0]
    da82:	f043 0301 	orr.w	r3, r3, #1
    da86:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    da8a:	2000      	movs	r0, #0
    da8c:	6213      	str	r3, [r2, #32]
    da8e:	b003      	add	sp, #12
    da90:	f85d fb04 	ldr.w	pc, [sp], #4
    da94:	4b04      	ldr	r3, [pc, #16]	; (daa8 <am_hal_clkgen_control+0x134>)
    da96:	e7f6      	b.n	da86 <am_hal_clkgen_control+0x112>
    da98:	2006      	movs	r0, #6
    da9a:	4770      	bx	lr
    da9c:	10001184 	.word	0x10001184
    daa0:	4ffff000 	.word	0x4ffff000
    daa4:	40020000 	.word	0x40020000
    daa8:	0025b801 	.word	0x0025b801

0000daac <am_hal_clkgen_status_get>:
    daac:	b1b0      	cbz	r0, dadc <am_hal_clkgen_status_get+0x30>
    daae:	b410      	push	{r4}
    dab0:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    dab4:	4603      	mov	r3, r0
    dab6:	698c      	ldr	r4, [r1, #24]
    dab8:	4809      	ldr	r0, [pc, #36]	; (dae0 <am_hal_clkgen_status_get+0x34>)
    daba:	4a0a      	ldr	r2, [pc, #40]	; (dae4 <am_hal_clkgen_status_get+0x38>)
    dabc:	f014 0f01 	tst.w	r4, #1
    dac0:	bf08      	it	eq
    dac2:	4602      	moveq	r2, r0
    dac4:	601a      	str	r2, [r3, #0]
    dac6:	69ca      	ldr	r2, [r1, #28]
    dac8:	f85d 4b04 	ldr.w	r4, [sp], #4
    dacc:	f002 0101 	and.w	r1, r2, #1
    dad0:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dad4:	2000      	movs	r0, #0
    dad6:	6059      	str	r1, [r3, #4]
    dad8:	721a      	strb	r2, [r3, #8]
    dada:	4770      	bx	lr
    dadc:	2006      	movs	r0, #6
    dade:	4770      	bx	lr
    dae0:	02dc6c00 	.word	0x02dc6c00
    dae4:	016e3600 	.word	0x016e3600

0000dae8 <am_hal_ctimer_config>:
    dae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daec:	b082      	sub	sp, #8
    daee:	460c      	mov	r4, r1
    daf0:	4606      	mov	r6, r0
    daf2:	f000 fac9 	bl	e088 <am_hal_interrupt_master_disable>
    daf6:	4f19      	ldr	r7, [pc, #100]	; (db5c <am_hal_ctimer_config+0x74>)
    daf8:	9001      	str	r0, [sp, #4]
    dafa:	ea4f 1846 	mov.w	r8, r6, lsl #5
    dafe:	f858 3007 	ldr.w	r3, [r8, r7]
    db02:	f043 2308 	orr.w	r3, r3, #134219776	; 0x8000800
    db06:	f848 3007 	str.w	r3, [r8, r7]
    db0a:	9801      	ldr	r0, [sp, #4]
    db0c:	f000 fac0 	bl	e090 <am_hal_interrupt_master_set>
    db10:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
    db14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    db18:	6823      	ldr	r3, [r4, #0]
    db1a:	b10b      	cbz	r3, db20 <am_hal_ctimer_config+0x38>
    db1c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    db20:	f000 fab2 	bl	e088 <am_hal_interrupt_master_disable>
    db24:	9000      	str	r0, [sp, #0]
    db26:	f848 5007 	str.w	r5, [r8, r7]
    db2a:	9800      	ldr	r0, [sp, #0]
    db2c:	f000 fab0 	bl	e090 <am_hal_interrupt_master_set>
    db30:	6863      	ldr	r3, [r4, #4]
    db32:	b90b      	cbnz	r3, db38 <am_hal_ctimer_config+0x50>
    db34:	6822      	ldr	r2, [r4, #0]
    db36:	b14a      	cbz	r2, db4c <am_hal_ctimer_config+0x64>
    db38:	f3c3 0344 	ubfx	r3, r3, #1, #5
    db3c:	2200      	movs	r2, #0
    db3e:	4808      	ldr	r0, [pc, #32]	; (db60 <am_hal_ctimer_config+0x78>)
    db40:	eb00 0646 	add.w	r6, r0, r6, lsl #1
    db44:	54b3      	strb	r3, [r6, r2]
    db46:	b002      	add	sp, #8
    db48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db4c:	68a3      	ldr	r3, [r4, #8]
    db4e:	2b00      	cmp	r3, #0
    db50:	d0f9      	beq.n	db46 <am_hal_ctimer_config+0x5e>
    db52:	f3c3 0344 	ubfx	r3, r3, #1, #5
    db56:	2201      	movs	r2, #1
    db58:	e7f1      	b.n	db3e <am_hal_ctimer_config+0x56>
    db5a:	bf00      	nop
    db5c:	4000800c 	.word	0x4000800c
    db60:	1000100c 	.word	0x1000100c

0000db64 <am_hal_ctimer_start>:
    db64:	b530      	push	{r4, r5, lr}
    db66:	b083      	sub	sp, #12
    db68:	460c      	mov	r4, r1
    db6a:	4605      	mov	r5, r0
    db6c:	f000 fa8c 	bl	e088 <am_hal_interrupt_master_disable>
    db70:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    db74:	4910      	ldr	r1, [pc, #64]	; (dbb8 <am_hal_ctimer_start+0x54>)
    db76:	9001      	str	r0, [sp, #4]
    db78:	f85c 3001 	ldr.w	r3, [ip, r1]
    db7c:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    db80:	ea23 0202 	bic.w	r2, r3, r2
    db84:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    db88:	4313      	orrs	r3, r2
    db8a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    db8e:	f84c 3001 	str.w	r3, [ip, r1]
    db92:	bf0c      	ite	eq
    db94:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    db98:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    db9c:	4b07      	ldr	r3, [pc, #28]	; (dbbc <am_hal_ctimer_start+0x58>)
    db9e:	9801      	ldr	r0, [sp, #4]
    dba0:	bf0c      	ite	eq
    dba2:	2201      	moveq	r2, #1
    dba4:	2200      	movne	r2, #0
    dba6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    dbaa:	54ac      	strb	r4, [r5, r2]
    dbac:	b003      	add	sp, #12
    dbae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    dbb2:	f000 ba6d 	b.w	e090 <am_hal_interrupt_master_set>
    dbb6:	bf00      	nop
    dbb8:	4000800c 	.word	0x4000800c
    dbbc:	1000100c 	.word	0x1000100c

0000dbc0 <am_hal_ctimer_clear>:
    dbc0:	b530      	push	{r4, r5, lr}
    dbc2:	b083      	sub	sp, #12
    dbc4:	0145      	lsls	r5, r0, #5
    dbc6:	460c      	mov	r4, r1
    dbc8:	f000 fa5e 	bl	e088 <am_hal_interrupt_master_disable>
    dbcc:	4b06      	ldr	r3, [pc, #24]	; (dbe8 <am_hal_ctimer_clear+0x28>)
    dbce:	9001      	str	r0, [sp, #4]
    dbd0:	58e9      	ldr	r1, [r5, r3]
    dbd2:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    dbd6:	430c      	orrs	r4, r1
    dbd8:	50ec      	str	r4, [r5, r3]
    dbda:	9801      	ldr	r0, [sp, #4]
    dbdc:	b003      	add	sp, #12
    dbde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    dbe2:	f000 ba55 	b.w	e090 <am_hal_interrupt_master_set>
    dbe6:	bf00      	nop
    dbe8:	4000800c 	.word	0x4000800c

0000dbec <am_hal_ctimer_period_set>:
    dbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbf0:	b082      	sub	sp, #8
    dbf2:	0145      	lsls	r5, r0, #5
    dbf4:	460e      	mov	r6, r1
    dbf6:	4614      	mov	r4, r2
    dbf8:	461f      	mov	r7, r3
    dbfa:	f000 fa45 	bl	e088 <am_hal_interrupt_master_disable>
    dbfe:	f8df 809c 	ldr.w	r8, [pc, #156]	; dc9c <am_hal_ctimer_period_set+0xb0>
    dc02:	9001      	str	r0, [sp, #4]
    dc04:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dc08:	f855 2008 	ldr.w	r2, [r5, r8]
    dc0c:	4821      	ldr	r0, [pc, #132]	; (dc94 <am_hal_ctimer_period_set+0xa8>)
    dc0e:	d02f      	beq.n	dc70 <am_hal_ctimer_period_set+0x84>
    dc10:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    dc14:	2a80      	cmp	r2, #128	; 0x80
    dc16:	d019      	beq.n	dc4c <am_hal_ctimer_period_set+0x60>
    dc18:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc1c:	2100      	movs	r1, #0
    dc1e:	4296      	cmp	r6, r2
    dc20:	460b      	mov	r3, r1
    dc22:	d01c      	beq.n	dc5e <am_hal_ctimer_period_set+0x72>
    dc24:	4a1c      	ldr	r2, [pc, #112]	; (dc98 <am_hal_ctimer_period_set+0xac>)
    dc26:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dc2a:	eb05 0702 	add.w	r7, r5, r2
    dc2e:	d027      	beq.n	dc80 <am_hal_ctimer_period_set+0x94>
    dc30:	0c1b      	lsrs	r3, r3, #16
    dc32:	041b      	lsls	r3, r3, #16
    dc34:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    dc38:	b2a4      	uxth	r4, r4
    dc3a:	4321      	orrs	r1, r4
    dc3c:	5029      	str	r1, [r5, r0]
    dc3e:	50ab      	str	r3, [r5, r2]
    dc40:	9801      	ldr	r0, [sp, #4]
    dc42:	b002      	add	sp, #8
    dc44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dc48:	f000 ba22 	b.w	e090 <am_hal_interrupt_master_set>
    dc4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc50:	4296      	cmp	r6, r2
    dc52:	ea4f 4104 	mov.w	r1, r4, lsl #16
    dc56:	4623      	mov	r3, r4
    dc58:	eba4 0407 	sub.w	r4, r4, r7
    dc5c:	d1e2      	bne.n	dc24 <am_hal_ctimer_period_set+0x38>
    dc5e:	b2a4      	uxth	r4, r4
    dc60:	4321      	orrs	r1, r4
    dc62:	5029      	str	r1, [r5, r0]
    dc64:	9801      	ldr	r0, [sp, #4]
    dc66:	b002      	add	sp, #8
    dc68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dc6c:	f000 ba10 	b.w	e090 <am_hal_interrupt_master_set>
    dc70:	0c12      	lsrs	r2, r2, #16
    dc72:	f402 72c0 	and.w	r2, r2, #384	; 0x180
    dc76:	2a80      	cmp	r2, #128	; 0x80
    dc78:	d0e8      	beq.n	dc4c <am_hal_ctimer_period_set+0x60>
    dc7a:	4f07      	ldr	r7, [pc, #28]	; (dc98 <am_hal_ctimer_period_set+0xac>)
    dc7c:	2100      	movs	r1, #0
    dc7e:	442f      	add	r7, r5
    dc80:	b2a4      	uxth	r4, r4
    dc82:	4321      	orrs	r1, r4
    dc84:	6039      	str	r1, [r7, #0]
    dc86:	9801      	ldr	r0, [sp, #4]
    dc88:	b002      	add	sp, #8
    dc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dc8e:	f000 b9ff 	b.w	e090 <am_hal_interrupt_master_set>
    dc92:	bf00      	nop
    dc94:	40008004 	.word	0x40008004
    dc98:	40008008 	.word	0x40008008
    dc9c:	4000800c 	.word	0x4000800c

0000dca0 <am_hal_ctimer_int_enable>:
    dca0:	b510      	push	{r4, lr}
    dca2:	b082      	sub	sp, #8
    dca4:	4604      	mov	r4, r0
    dca6:	f000 f9ef 	bl	e088 <am_hal_interrupt_master_disable>
    dcaa:	4a06      	ldr	r2, [pc, #24]	; (dcc4 <am_hal_ctimer_int_enable+0x24>)
    dcac:	9001      	str	r0, [sp, #4]
    dcae:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    dcb2:	4323      	orrs	r3, r4
    dcb4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    dcb8:	9801      	ldr	r0, [sp, #4]
    dcba:	b002      	add	sp, #8
    dcbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcc0:	f000 b9e6 	b.w	e090 <am_hal_interrupt_master_set>
    dcc4:	40008000 	.word	0x40008000

0000dcc8 <am_hal_ctimer_int_clear>:
    dcc8:	b510      	push	{r4, lr}
    dcca:	b082      	sub	sp, #8
    dccc:	4604      	mov	r4, r0
    dcce:	f000 f9db 	bl	e088 <am_hal_interrupt_master_disable>
    dcd2:	4b05      	ldr	r3, [pc, #20]	; (dce8 <am_hal_ctimer_int_clear+0x20>)
    dcd4:	9001      	str	r0, [sp, #4]
    dcd6:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    dcda:	9801      	ldr	r0, [sp, #4]
    dcdc:	b002      	add	sp, #8
    dcde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dce2:	f000 b9d5 	b.w	e090 <am_hal_interrupt_master_set>
    dce6:	bf00      	nop
    dce8:	40008000 	.word	0x40008000

0000dcec <am_hal_flash_delay>:
    dcec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dcf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dcf2:	075b      	lsls	r3, r3, #29
    dcf4:	bf46      	itte	mi
    dcf6:	0040      	lslmi	r0, r0, #1
    dcf8:	230e      	movmi	r3, #14
    dcfa:	230b      	movpl	r3, #11
    dcfc:	4298      	cmp	r0, r3
    dcfe:	d902      	bls.n	dd06 <am_hal_flash_delay+0x1a>
    dd00:	4a01      	ldr	r2, [pc, #4]	; (dd08 <am_hal_flash_delay+0x1c>)
    dd02:	1ac0      	subs	r0, r0, r3
    dd04:	4710      	bx	r2
    dd06:	4770      	bx	lr
    dd08:	0800009d 	.word	0x0800009d

0000dd0c <am_hal_flash_delay_status_check>:
    dd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd10:	f89d c020 	ldrb.w	ip, [sp, #32]
    dd14:	f8df 805c 	ldr.w	r8, [pc, #92]	; dd74 <am_hal_flash_delay_status_check+0x68>
    dd18:	4604      	mov	r4, r0
    dd1a:	460d      	mov	r5, r1
    dd1c:	4616      	mov	r6, r2
    dd1e:	461f      	mov	r7, r3
    dd20:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    dd24:	f1bc 0f00 	cmp.w	ip, #0
    dd28:	d00a      	beq.n	dd40 <am_hal_flash_delay_status_check+0x34>
    dd2a:	e01a      	b.n	dd62 <am_hal_flash_delay_status_check+0x56>
    dd2c:	b1f4      	cbz	r4, dd6c <am_hal_flash_delay_status_check+0x60>
    dd2e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dd32:	f013 0f04 	tst.w	r3, #4
    dd36:	bf0c      	ite	eq
    dd38:	2005      	moveq	r0, #5
    dd3a:	2012      	movne	r0, #18
    dd3c:	3c01      	subs	r4, #1
    dd3e:	47c0      	blx	r8
    dd40:	6828      	ldr	r0, [r5, #0]
    dd42:	4030      	ands	r0, r6
    dd44:	42b8      	cmp	r0, r7
    dd46:	d0f1      	beq.n	dd2c <am_hal_flash_delay_status_check+0x20>
    dd48:	2000      	movs	r0, #0
    dd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd4e:	b16c      	cbz	r4, dd6c <am_hal_flash_delay_status_check+0x60>
    dd50:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    dd54:	f013 0f04 	tst.w	r3, #4
    dd58:	bf0c      	ite	eq
    dd5a:	2005      	moveq	r0, #5
    dd5c:	2012      	movne	r0, #18
    dd5e:	3c01      	subs	r4, #1
    dd60:	47c0      	blx	r8
    dd62:	6828      	ldr	r0, [r5, #0]
    dd64:	4030      	ands	r0, r6
    dd66:	42b8      	cmp	r0, r7
    dd68:	d1f1      	bne.n	dd4e <am_hal_flash_delay_status_check+0x42>
    dd6a:	e7ed      	b.n	dd48 <am_hal_flash_delay_status_check+0x3c>
    dd6c:	2004      	movs	r0, #4
    dd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd72:	bf00      	nop
    dd74:	0800009d 	.word	0x0800009d

0000dd78 <am_hal_flash_load_ui32>:
    dd78:	4b00      	ldr	r3, [pc, #0]	; (dd7c <am_hal_flash_load_ui32+0x4>)
    dd7a:	4718      	bx	r3
    dd7c:	08000075 	.word	0x08000075

0000dd80 <am_hal_flash_store_ui32>:
    dd80:	4b01      	ldr	r3, [pc, #4]	; (dd88 <am_hal_flash_store_ui32+0x8>)
    dd82:	f043 0301 	orr.w	r3, r3, #1
    dd86:	4718      	bx	r3
    dd88:	1000101c 	.word	0x1000101c

0000dd8c <am_hal_gpio_pinconfig>:
    dd8c:	2831      	cmp	r0, #49	; 0x31
    dd8e:	f200 80c3 	bhi.w	df18 <am_hal_gpio_pinconfig+0x18c>
    dd92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd96:	4604      	mov	r4, r0
    dd98:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    dd9c:	f001 0007 	and.w	r0, r1, #7
    dda0:	b085      	sub	sp, #20
    dda2:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    dda6:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    ddaa:	d00f      	beq.n	ddcc <am_hal_gpio_pinconfig+0x40>
    ddac:	f3c1 1642 	ubfx	r6, r1, #5, #3
    ddb0:	1db5      	adds	r5, r6, #6
    ddb2:	f005 0507 	and.w	r5, r5, #7
    ddb6:	2d03      	cmp	r5, #3
    ddb8:	f042 0201 	orr.w	r2, r2, #1
    ddbc:	f240 80ae 	bls.w	df1c <am_hal_gpio_pinconfig+0x190>
    ddc0:	2fc0      	cmp	r7, #192	; 0xc0
    ddc2:	f000 80e1 	beq.w	df88 <am_hal_gpio_pinconfig+0x1fc>
    ddc6:	2f20      	cmp	r7, #32
    ddc8:	f000 80e3 	beq.w	df92 <am_hal_gpio_pinconfig+0x206>
    ddcc:	b163      	cbz	r3, dde8 <am_hal_gpio_pinconfig+0x5c>
    ddce:	2b01      	cmp	r3, #1
    ddd0:	f000 80d3 	beq.w	df7a <am_hal_gpio_pinconfig+0x1ee>
    ddd4:	2b02      	cmp	r3, #2
    ddd6:	f040 80c9 	bne.w	df6c <am_hal_gpio_pinconfig+0x1e0>
    ddda:	4b79      	ldr	r3, [pc, #484]	; (dfc0 <am_hal_gpio_pinconfig+0x234>)
    dddc:	5d1b      	ldrb	r3, [r3, r4]
    ddde:	075b      	lsls	r3, r3, #29
    dde0:	f140 80c4 	bpl.w	df6c <am_hal_gpio_pinconfig+0x1e0>
    dde4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dde8:	4b76      	ldr	r3, [pc, #472]	; (dfc4 <am_hal_gpio_pinconfig+0x238>)
    ddea:	5d1b      	ldrb	r3, [r3, r4]
    ddec:	4103      	asrs	r3, r0
    ddee:	005b      	lsls	r3, r3, #1
    ddf0:	f003 0302 	and.w	r3, r3, #2
    ddf4:	4313      	orrs	r3, r2
    ddf6:	4a74      	ldr	r2, [pc, #464]	; (dfc8 <am_hal_gpio_pinconfig+0x23c>)
    ddf8:	5d12      	ldrb	r2, [r2, r4]
    ddfa:	4282      	cmp	r2, r0
    ddfc:	f000 8099 	beq.w	df32 <am_hal_gpio_pinconfig+0x1a6>
    de00:	f3c1 3000 	ubfx	r0, r1, #12, #1
    de04:	f3c1 2581 	ubfx	r5, r1, #10, #2
    de08:	f3c1 3280 	ubfx	r2, r1, #14, #1
    de0c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    de10:	0a88      	lsrs	r0, r1, #10
    de12:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    de16:	f000 0008 	and.w	r0, r0, #8
    de1a:	4302      	orrs	r2, r0
    de1c:	f3c1 2007 	ubfx	r0, r1, #8, #8
    de20:	f000 050c 	and.w	r5, r0, #12
    de24:	2d04      	cmp	r5, #4
    de26:	f000 80a5 	beq.w	df74 <am_hal_gpio_pinconfig+0x1e8>
    de2a:	4d68      	ldr	r5, [pc, #416]	; (dfcc <am_hal_gpio_pinconfig+0x240>)
    de2c:	682d      	ldr	r5, [r5, #0]
    de2e:	eba1 0805 	sub.w	r8, r1, r5
    de32:	fab8 f888 	clz	r8, r8
    de36:	ea4f 1858 	mov.w	r8, r8, lsr #5
    de3a:	f010 0f60 	tst.w	r0, #96	; 0x60
    de3e:	bf04      	itt	eq
    de40:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    de44:	f360 0200 	bfieq	r2, r0, #0, #1
    de48:	00a0      	lsls	r0, r4, #2
    de4a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    de4e:	2902      	cmp	r1, #2
    de50:	d05c      	beq.n	df0c <am_hal_gpio_pinconfig+0x180>
    de52:	2903      	cmp	r1, #3
    de54:	d058      	beq.n	df08 <am_hal_gpio_pinconfig+0x17c>
    de56:	2901      	cmp	r1, #1
    de58:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    de5c:	bf08      	it	eq
    de5e:	f043 0304 	orreq.w	r3, r3, #4
    de62:	f001 0118 	and.w	r1, r1, #24
    de66:	2700      	movs	r7, #0
    de68:	f000 001c 	and.w	r0, r0, #28
    de6c:	fa02 f600 	lsl.w	r6, r2, r0
    de70:	220f      	movs	r2, #15
    de72:	4082      	lsls	r2, r0
    de74:	43d2      	mvns	r2, r2
    de76:	f04f 09ff 	mov.w	r9, #255	; 0xff
    de7a:	fa03 f501 	lsl.w	r5, r3, r1
    de7e:	fa09 f901 	lsl.w	r9, r9, r1
    de82:	9201      	str	r2, [sp, #4]
    de84:	f000 f900 	bl	e088 <am_hal_interrupt_master_disable>
    de88:	f024 0a03 	bic.w	sl, r4, #3
    de8c:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    de90:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    de94:	4b4e      	ldr	r3, [pc, #312]	; (dfd0 <am_hal_gpio_pinconfig+0x244>)
    de96:	494f      	ldr	r1, [pc, #316]	; (dfd4 <am_hal_gpio_pinconfig+0x248>)
    de98:	9a01      	ldr	r2, [sp, #4]
    de9a:	9003      	str	r0, [sp, #12]
    de9c:	ea6f 0909 	mvn.w	r9, r9
    dea0:	f02b 0b03 	bic.w	fp, fp, #3
    dea4:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    dea8:	f1b8 0f00 	cmp.w	r8, #0
    deac:	d00b      	beq.n	dec6 <am_hal_gpio_pinconfig+0x13a>
    deae:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    deb2:	f004 081f 	and.w	r8, r4, #31
    deb6:	4848      	ldr	r0, [pc, #288]	; (dfd8 <am_hal_gpio_pinconfig+0x24c>)
    deb8:	f00e 0e04 	and.w	lr, lr, #4
    debc:	2401      	movs	r4, #1
    debe:	fa04 f408 	lsl.w	r4, r4, r8
    dec2:	f84e 4000 	str.w	r4, [lr, r0]
    dec6:	4845      	ldr	r0, [pc, #276]	; (dfdc <am_hal_gpio_pinconfig+0x250>)
    dec8:	2473      	movs	r4, #115	; 0x73
    deca:	6604      	str	r4, [r0, #96]	; 0x60
    decc:	f8dc 4000 	ldr.w	r4, [ip]
    ded0:	ea04 0409 	and.w	r4, r4, r9
    ded4:	4325      	orrs	r5, r4
    ded6:	f8cc 5000 	str.w	r5, [ip]
    deda:	f85b 4003 	ldr.w	r4, [fp, r3]
    dede:	4022      	ands	r2, r4
    dee0:	4332      	orrs	r2, r6
    dee2:	f84b 2003 	str.w	r2, [fp, r3]
    dee6:	f85a 3001 	ldr.w	r3, [sl, r1]
    deea:	ea03 0909 	and.w	r9, r3, r9
    deee:	2400      	movs	r4, #0
    def0:	ea49 0707 	orr.w	r7, r9, r7
    def4:	f84a 7001 	str.w	r7, [sl, r1]
    def8:	6604      	str	r4, [r0, #96]	; 0x60
    defa:	9803      	ldr	r0, [sp, #12]
    defc:	f000 f8c8 	bl	e090 <am_hal_interrupt_master_set>
    df00:	4620      	mov	r0, r4
    df02:	b005      	add	sp, #20
    df04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df08:	f043 0304 	orr.w	r3, r3, #4
    df0c:	00e1      	lsls	r1, r4, #3
    df0e:	f001 0118 	and.w	r1, r1, #24
    df12:	2701      	movs	r7, #1
    df14:	408f      	lsls	r7, r1
    df16:	e7a7      	b.n	de68 <am_hal_gpio_pinconfig+0xdc>
    df18:	2006      	movs	r0, #6
    df1a:	4770      	bx	lr
    df1c:	4d28      	ldr	r5, [pc, #160]	; (dfc0 <am_hal_gpio_pinconfig+0x234>)
    df1e:	5d2d      	ldrb	r5, [r5, r4]
    df20:	3e02      	subs	r6, #2
    df22:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    df26:	07ee      	lsls	r6, r5, #31
    df28:	d536      	bpl.n	df98 <am_hal_gpio_pinconfig+0x20c>
    df2a:	2b00      	cmp	r3, #0
    df2c:	f43f af5c 	beq.w	dde8 <am_hal_gpio_pinconfig+0x5c>
    df30:	e74d      	b.n	ddce <am_hal_gpio_pinconfig+0x42>
    df32:	f3c1 4202 	ubfx	r2, r1, #16, #3
    df36:	2a07      	cmp	r2, #7
    df38:	d030      	beq.n	df9c <am_hal_gpio_pinconfig+0x210>
    df3a:	4d29      	ldr	r5, [pc, #164]	; (dfe0 <am_hal_gpio_pinconfig+0x254>)
    df3c:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    df40:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    df44:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    df48:	4290      	cmp	r0, r2
    df4a:	d029      	beq.n	dfa0 <am_hal_gpio_pinconfig+0x214>
    df4c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    df50:	00a0      	lsls	r0, r4, #2
    df52:	786e      	ldrb	r6, [r5, #1]
    df54:	4296      	cmp	r6, r2
    df56:	d02d      	beq.n	dfb4 <am_hal_gpio_pinconfig+0x228>
    df58:	78ae      	ldrb	r6, [r5, #2]
    df5a:	4296      	cmp	r6, r2
    df5c:	d02c      	beq.n	dfb8 <am_hal_gpio_pinconfig+0x22c>
    df5e:	78ed      	ldrb	r5, [r5, #3]
    df60:	4295      	cmp	r5, r2
    df62:	d02b      	beq.n	dfbc <am_hal_gpio_pinconfig+0x230>
    df64:	481f      	ldr	r0, [pc, #124]	; (dfe4 <am_hal_gpio_pinconfig+0x258>)
    df66:	b005      	add	sp, #20
    df68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df6c:	481e      	ldr	r0, [pc, #120]	; (dfe8 <am_hal_gpio_pinconfig+0x25c>)
    df6e:	b005      	add	sp, #20
    df70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df74:	f04f 0801 	mov.w	r8, #1
    df78:	e75f      	b.n	de3a <am_hal_gpio_pinconfig+0xae>
    df7a:	4b11      	ldr	r3, [pc, #68]	; (dfc0 <am_hal_gpio_pinconfig+0x234>)
    df7c:	5d1b      	ldrb	r3, [r3, r4]
    df7e:	079d      	lsls	r5, r3, #30
    df80:	d5f4      	bpl.n	df6c <am_hal_gpio_pinconfig+0x1e0>
    df82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    df86:	e72f      	b.n	dde8 <am_hal_gpio_pinconfig+0x5c>
    df88:	2c14      	cmp	r4, #20
    df8a:	f43f af1f 	beq.w	ddcc <am_hal_gpio_pinconfig+0x40>
    df8e:	4817      	ldr	r0, [pc, #92]	; (dfec <am_hal_gpio_pinconfig+0x260>)
    df90:	e7b7      	b.n	df02 <am_hal_gpio_pinconfig+0x176>
    df92:	2c14      	cmp	r4, #20
    df94:	f47f af1a 	bne.w	ddcc <am_hal_gpio_pinconfig+0x40>
    df98:	4815      	ldr	r0, [pc, #84]	; (dff0 <am_hal_gpio_pinconfig+0x264>)
    df9a:	e7b2      	b.n	df02 <am_hal_gpio_pinconfig+0x176>
    df9c:	4815      	ldr	r0, [pc, #84]	; (dff4 <am_hal_gpio_pinconfig+0x268>)
    df9e:	e7b0      	b.n	df02 <am_hal_gpio_pinconfig+0x176>
    dfa0:	2200      	movs	r2, #0
    dfa2:	00a0      	lsls	r0, r4, #2
    dfa4:	0052      	lsls	r2, r2, #1
    dfa6:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dfaa:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    dfae:	f04f 0800 	mov.w	r8, #0
    dfb2:	e74a      	b.n	de4a <am_hal_gpio_pinconfig+0xbe>
    dfb4:	2201      	movs	r2, #1
    dfb6:	e7f5      	b.n	dfa4 <am_hal_gpio_pinconfig+0x218>
    dfb8:	2202      	movs	r2, #2
    dfba:	e7f3      	b.n	dfa4 <am_hal_gpio_pinconfig+0x218>
    dfbc:	2203      	movs	r2, #3
    dfbe:	e7f1      	b.n	dfa4 <am_hal_gpio_pinconfig+0x218>
    dfc0:	0000f394 	.word	0x0000f394
    dfc4:	0000f3c8 	.word	0x0000f3c8
    dfc8:	0000f4c4 	.word	0x0000f4c4
    dfcc:	0000f388 	.word	0x0000f388
    dfd0:	40010040 	.word	0x40010040
    dfd4:	400100e0 	.word	0x400100e0
    dfd8:	400100b4 	.word	0x400100b4
    dfdc:	40010000 	.word	0x40010000
    dfe0:	0000f3fc 	.word	0x0000f3fc
    dfe4:	08000104 	.word	0x08000104
    dfe8:	08000102 	.word	0x08000102
    dfec:	08000101 	.word	0x08000101
    dff0:	08000100 	.word	0x08000100
    dff4:	08000103 	.word	0x08000103

0000dff8 <am_hal_gpio_state_write>:
    dff8:	2831      	cmp	r0, #49	; 0x31
    dffa:	d81a      	bhi.n	e032 <am_hal_gpio_state_write+0x3a>
    dffc:	b570      	push	{r4, r5, r6, lr}
    dffe:	2905      	cmp	r1, #5
    e000:	b082      	sub	sp, #8
    e002:	460d      	mov	r5, r1
    e004:	d812      	bhi.n	e02c <am_hal_gpio_state_write+0x34>
    e006:	f000 031f 	and.w	r3, r0, #31
    e00a:	2201      	movs	r2, #1
    e00c:	08c0      	lsrs	r0, r0, #3
    e00e:	fa02 f603 	lsl.w	r6, r2, r3
    e012:	f000 0404 	and.w	r4, r0, #4
    e016:	f000 f837 	bl	e088 <am_hal_interrupt_master_disable>
    e01a:	3d01      	subs	r5, #1
    e01c:	9001      	str	r0, [sp, #4]
    e01e:	2d04      	cmp	r5, #4
    e020:	d821      	bhi.n	e066 <am_hal_gpio_state_write+0x6e>
    e022:	e8df f005 	tbb	[pc, r5]
    e026:	1512      	.short	0x1512
    e028:	1d1a      	.short	0x1d1a
    e02a:	08          	.byte	0x08
    e02b:	00          	.byte	0x00
    e02c:	2006      	movs	r0, #6
    e02e:	b002      	add	sp, #8
    e030:	bd70      	pop	{r4, r5, r6, pc}
    e032:	2005      	movs	r0, #5
    e034:	4770      	bx	lr
    e036:	4a0d      	ldr	r2, [pc, #52]	; (e06c <am_hal_gpio_state_write+0x74>)
    e038:	58a3      	ldr	r3, [r4, r2]
    e03a:	4073      	eors	r3, r6
    e03c:	50a3      	str	r3, [r4, r2]
    e03e:	9801      	ldr	r0, [sp, #4]
    e040:	f000 f826 	bl	e090 <am_hal_interrupt_master_set>
    e044:	2000      	movs	r0, #0
    e046:	b002      	add	sp, #8
    e048:	bd70      	pop	{r4, r5, r6, pc}
    e04a:	4b09      	ldr	r3, [pc, #36]	; (e070 <am_hal_gpio_state_write+0x78>)
    e04c:	50e6      	str	r6, [r4, r3]
    e04e:	e7f6      	b.n	e03e <am_hal_gpio_state_write+0x46>
    e050:	4a08      	ldr	r2, [pc, #32]	; (e074 <am_hal_gpio_state_write+0x7c>)
    e052:	58a3      	ldr	r3, [r4, r2]
    e054:	4073      	eors	r3, r6
    e056:	50a3      	str	r3, [r4, r2]
    e058:	e7f1      	b.n	e03e <am_hal_gpio_state_write+0x46>
    e05a:	4b04      	ldr	r3, [pc, #16]	; (e06c <am_hal_gpio_state_write+0x74>)
    e05c:	50e6      	str	r6, [r4, r3]
    e05e:	e7ee      	b.n	e03e <am_hal_gpio_state_write+0x46>
    e060:	4b05      	ldr	r3, [pc, #20]	; (e078 <am_hal_gpio_state_write+0x80>)
    e062:	50e6      	str	r6, [r4, r3]
    e064:	e7eb      	b.n	e03e <am_hal_gpio_state_write+0x46>
    e066:	4b05      	ldr	r3, [pc, #20]	; (e07c <am_hal_gpio_state_write+0x84>)
    e068:	50e6      	str	r6, [r4, r3]
    e06a:	e7e8      	b.n	e03e <am_hal_gpio_state_write+0x46>
    e06c:	400100b4 	.word	0x400100b4
    e070:	40010090 	.word	0x40010090
    e074:	40010088 	.word	0x40010088
    e078:	400100a8 	.word	0x400100a8
    e07c:	40010098 	.word	0x40010098

0000e080 <am_hal_interrupt_master_enable>:
    e080:	f3ef 8010 	mrs	r0, PRIMASK
    e084:	b662      	cpsie	i
    e086:	4770      	bx	lr

0000e088 <am_hal_interrupt_master_disable>:
    e088:	f3ef 8010 	mrs	r0, PRIMASK
    e08c:	b672      	cpsid	i
    e08e:	4770      	bx	lr

0000e090 <am_hal_interrupt_master_set>:
    e090:	f380 8810 	msr	PRIMASK, r0
    e094:	4770      	bx	lr
    e096:	bf00      	nop

0000e098 <am_hal_mcuctrl_info_get>:
    e098:	2900      	cmp	r1, #0
    e09a:	f000 808f 	beq.w	e1bc <am_hal_mcuctrl_info_get+0x124>
    e09e:	2801      	cmp	r0, #1
    e0a0:	b430      	push	{r4, r5}
    e0a2:	d006      	beq.n	e0b2 <am_hal_mcuctrl_info_get+0x1a>
    e0a4:	2802      	cmp	r0, #2
    e0a6:	d06d      	beq.n	e184 <am_hal_mcuctrl_info_get+0xec>
    e0a8:	2800      	cmp	r0, #0
    e0aa:	d055      	beq.n	e158 <am_hal_mcuctrl_info_get+0xc0>
    e0ac:	2006      	movs	r0, #6
    e0ae:	bc30      	pop	{r4, r5}
    e0b0:	4770      	bx	lr
    e0b2:	4a43      	ldr	r2, [pc, #268]	; (e1c0 <am_hal_mcuctrl_info_get+0x128>)
    e0b4:	4843      	ldr	r0, [pc, #268]	; (e1c4 <am_hal_mcuctrl_info_get+0x12c>)
    e0b6:	6813      	ldr	r3, [r2, #0]
    e0b8:	600b      	str	r3, [r1, #0]
    e0ba:	6854      	ldr	r4, [r2, #4]
    e0bc:	604c      	str	r4, [r1, #4]
    e0be:	6894      	ldr	r4, [r2, #8]
    e0c0:	608c      	str	r4, [r1, #8]
    e0c2:	68d4      	ldr	r4, [r2, #12]
    e0c4:	60cc      	str	r4, [r1, #12]
    e0c6:	f3c3 5503 	ubfx	r5, r3, #20, #4
    e0ca:	6914      	ldr	r4, [r2, #16]
    e0cc:	610c      	str	r4, [r1, #16]
    e0ce:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    e0d2:	4c3d      	ldr	r4, [pc, #244]	; (e1c8 <am_hal_mcuctrl_info_get+0x130>)
    e0d4:	6950      	ldr	r0, [r2, #20]
    e0d6:	6148      	str	r0, [r1, #20]
    e0d8:	f003 0201 	and.w	r2, r3, #1
    e0dc:	f3c3 4303 	ubfx	r3, r3, #16, #4
    e0e0:	e9c1 2506 	strd	r2, r5, [r1, #24]
    e0e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    e0e8:	4a38      	ldr	r2, [pc, #224]	; (e1cc <am_hal_mcuctrl_info_get+0x134>)
    e0ea:	620b      	str	r3, [r1, #32]
    e0ec:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    e0f0:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    e0f4:	b2db      	uxtb	r3, r3
    e0f6:	f000 000f 	and.w	r0, r0, #15
    e0fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    e0fe:	624b      	str	r3, [r1, #36]	; 0x24
    e100:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    e104:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    e108:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e10c:	f000 000f 	and.w	r0, r0, #15
    e110:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e114:	628b      	str	r3, [r1, #40]	; 0x28
    e116:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e11a:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e11e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e122:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e126:	4303      	orrs	r3, r0
    e128:	62cb      	str	r3, [r1, #44]	; 0x2c
    e12a:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e12e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e132:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e136:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e13a:	b2db      	uxtb	r3, r3
    e13c:	041b      	lsls	r3, r3, #16
    e13e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e142:	fa5f fc82 	uxtb.w	ip, r2
    e146:	ea43 030c 	orr.w	r3, r3, ip
    e14a:	b2c2      	uxtb	r2, r0
    e14c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e150:	630b      	str	r3, [r1, #48]	; 0x30
    e152:	2000      	movs	r0, #0
    e154:	bc30      	pop	{r4, r5}
    e156:	4770      	bx	lr
    e158:	4a19      	ldr	r2, [pc, #100]	; (e1c0 <am_hal_mcuctrl_info_get+0x128>)
    e15a:	6993      	ldr	r3, [r2, #24]
    e15c:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e160:	700c      	strb	r4, [r1, #0]
    e162:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e166:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e16a:	704b      	strb	r3, [r1, #1]
    e16c:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e170:	710b      	strb	r3, [r1, #4]
    e172:	6953      	ldr	r3, [r2, #20]
    e174:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e178:	f003 0301 	and.w	r3, r3, #1
    e17c:	bc30      	pop	{r4, r5}
    e17e:	708a      	strb	r2, [r1, #2]
    e180:	70cb      	strb	r3, [r1, #3]
    e182:	4770      	bx	lr
    e184:	4a0e      	ldr	r2, [pc, #56]	; (e1c0 <am_hal_mcuctrl_info_get+0x128>)
    e186:	6848      	ldr	r0, [r1, #4]
    e188:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e18c:	f003 0401 	and.w	r4, r3, #1
    e190:	700c      	strb	r4, [r1, #0]
    e192:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e196:	720c      	strb	r4, [r1, #8]
    e198:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e19c:	60cc      	str	r4, [r1, #12]
    e19e:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e1a2:	4320      	orrs	r0, r4
    e1a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e1a8:	6048      	str	r0, [r1, #4]
    e1aa:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e1ae:	740b      	strb	r3, [r1, #16]
    e1b0:	694b      	ldr	r3, [r1, #20]
    e1b2:	4313      	orrs	r3, r2
    e1b4:	2000      	movs	r0, #0
    e1b6:	bc30      	pop	{r4, r5}
    e1b8:	614b      	str	r3, [r1, #20]
    e1ba:	4770      	bx	lr
    e1bc:	2006      	movs	r0, #6
    e1be:	4770      	bx	lr
    e1c0:	40020000 	.word	0x40020000
    e1c4:	0000f4f8 	.word	0x0000f4f8
    e1c8:	0000f538 	.word	0x0000f538
    e1cc:	f0000f00 	.word	0xf0000f00

0000e1d0 <am_hal_sysctrl_sleep>:
    e1d0:	b510      	push	{r4, lr}
    e1d2:	b082      	sub	sp, #8
    e1d4:	4604      	mov	r4, r0
    e1d6:	f7ff ff57 	bl	e088 <am_hal_interrupt_master_disable>
    e1da:	9001      	str	r0, [sp, #4]
    e1dc:	b124      	cbz	r4, e1e8 <am_hal_sysctrl_sleep+0x18>
    e1de:	4b12      	ldr	r3, [pc, #72]	; (e228 <am_hal_sysctrl_sleep+0x58>)
    e1e0:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e1e4:	07db      	lsls	r3, r3, #31
    e1e6:	d513      	bpl.n	e210 <am_hal_sysctrl_sleep+0x40>
    e1e8:	4a10      	ldr	r2, [pc, #64]	; (e22c <am_hal_sysctrl_sleep+0x5c>)
    e1ea:	6913      	ldr	r3, [r2, #16]
    e1ec:	f023 0304 	bic.w	r3, r3, #4
    e1f0:	6113      	str	r3, [r2, #16]
    e1f2:	f3bf 8f4f 	dsb	sy
    e1f6:	4a0e      	ldr	r2, [pc, #56]	; (e230 <am_hal_sysctrl_sleep+0x60>)
    e1f8:	4b0e      	ldr	r3, [pc, #56]	; (e234 <am_hal_sysctrl_sleep+0x64>)
    e1fa:	6812      	ldr	r2, [r2, #0]
    e1fc:	601a      	str	r2, [r3, #0]
    e1fe:	bf30      	wfi
    e200:	f3bf 8f6f 	isb	sy
    e204:	9801      	ldr	r0, [sp, #4]
    e206:	b002      	add	sp, #8
    e208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e20c:	f7ff bf40 	b.w	e090 <am_hal_interrupt_master_set>
    e210:	4b09      	ldr	r3, [pc, #36]	; (e238 <am_hal_sysctrl_sleep+0x68>)
    e212:	681a      	ldr	r2, [r3, #0]
    e214:	b912      	cbnz	r2, e21c <am_hal_sysctrl_sleep+0x4c>
    e216:	4a09      	ldr	r2, [pc, #36]	; (e23c <am_hal_sysctrl_sleep+0x6c>)
    e218:	6812      	ldr	r2, [r2, #0]
    e21a:	601a      	str	r2, [r3, #0]
    e21c:	4a03      	ldr	r2, [pc, #12]	; (e22c <am_hal_sysctrl_sleep+0x5c>)
    e21e:	6913      	ldr	r3, [r2, #16]
    e220:	f043 0304 	orr.w	r3, r3, #4
    e224:	6113      	str	r3, [r2, #16]
    e226:	e7e4      	b.n	e1f2 <am_hal_sysctrl_sleep+0x22>
    e228:	40020000 	.word	0x40020000
    e22c:	e000ed00 	.word	0xe000ed00
    e230:	5fff0000 	.word	0x5fff0000
    e234:	10001188 	.word	0x10001188
    e238:	10001184 	.word	0x10001184
    e23c:	4ffff000 	.word	0x4ffff000

0000e240 <am_bsp_uart_string_print>:
    e240:	b530      	push	{r4, r5, lr}
    e242:	b087      	sub	sp, #28
    e244:	7804      	ldrb	r4, [r0, #0]
    e246:	2300      	movs	r3, #0
    e248:	4605      	mov	r5, r0
    e24a:	9300      	str	r3, [sp, #0]
    e24c:	b13c      	cbz	r4, e25e <am_bsp_uart_string_print+0x1e>
    e24e:	4603      	mov	r3, r0
    e250:	f1c0 0101 	rsb	r1, r0, #1
    e254:	18cc      	adds	r4, r1, r3
    e256:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e25a:	2a00      	cmp	r2, #0
    e25c:	d1fa      	bne.n	e254 <am_bsp_uart_string_print+0x14>
    e25e:	4b0a      	ldr	r3, [pc, #40]	; (e288 <am_bsp_uart_string_print+0x48>)
    e260:	f8cd d014 	str.w	sp, [sp, #20]
    e264:	6818      	ldr	r0, [r3, #0]
    e266:	2200      	movs	r2, #0
    e268:	f04f 33ff 	mov.w	r3, #4294967295
    e26c:	a901      	add	r1, sp, #4
    e26e:	e9cd 4303 	strd	r4, r3, [sp, #12]
    e272:	e9cd 2501 	strd	r2, r5, [sp, #4]
    e276:	f000 fcc9 	bl	ec0c <am_hal_uart_transfer>
    e27a:	9b00      	ldr	r3, [sp, #0]
    e27c:	42a3      	cmp	r3, r4
    e27e:	d000      	beq.n	e282 <am_bsp_uart_string_print+0x42>
    e280:	e7fe      	b.n	e280 <am_bsp_uart_string_print+0x40>
    e282:	b007      	add	sp, #28
    e284:	bd30      	pop	{r4, r5, pc}
    e286:	bf00      	nop
    e288:	1000118c 	.word	0x1000118c

0000e28c <am_bsp_low_power_init>:
    e28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e28e:	f000 f9d3 	bl	e638 <am_hal_pwrctrl_low_power_init>
    e292:	f000 faaf 	bl	e7f4 <am_hal_rtc_osc_disable>
    e296:	4b0b      	ldr	r3, [pc, #44]	; (e2c4 <am_bsp_low_power_init+0x38>)
    e298:	4f0b      	ldr	r7, [pc, #44]	; (e2c8 <am_bsp_low_power_init+0x3c>)
    e29a:	681e      	ldr	r6, [r3, #0]
    e29c:	2400      	movs	r4, #0
    e29e:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    e2a2:	4631      	mov	r1, r6
    e2a4:	4628      	mov	r0, r5
    e2a6:	f7ff fd71 	bl	dd8c <am_hal_gpio_pinconfig>
    e2aa:	2103      	movs	r1, #3
    e2ac:	4628      	mov	r0, r5
    e2ae:	f7ff fea3 	bl	dff8 <am_hal_gpio_state_write>
    e2b2:	3401      	adds	r4, #1
    e2b4:	2100      	movs	r1, #0
    e2b6:	4628      	mov	r0, r5
    e2b8:	f7ff fe9e 	bl	dff8 <am_hal_gpio_state_write>
    e2bc:	2c05      	cmp	r4, #5
    e2be:	d1ee      	bne.n	e29e <am_bsp_low_power_init+0x12>
    e2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2c2:	bf00      	nop
    e2c4:	0000f38c 	.word	0x0000f38c
    e2c8:	10001028 	.word	0x10001028

0000e2cc <am_bsp_debug_printf_enable>:
    e2cc:	b510      	push	{r4, lr}
    e2ce:	4a2e      	ldr	r2, [pc, #184]	; (e388 <am_bsp_debug_printf_enable+0xbc>)
    e2d0:	6813      	ldr	r3, [r2, #0]
    e2d2:	2b01      	cmp	r3, #1
    e2d4:	b086      	sub	sp, #24
    e2d6:	d005      	beq.n	e2e4 <am_bsp_debug_printf_enable+0x18>
    e2d8:	2b02      	cmp	r3, #2
    e2da:	d014      	beq.n	e306 <am_bsp_debug_printf_enable+0x3a>
    e2dc:	2b03      	cmp	r3, #3
    e2de:	d030      	beq.n	e342 <am_bsp_debug_printf_enable+0x76>
    e2e0:	b006      	add	sp, #24
    e2e2:	bd10      	pop	{r4, pc}
    e2e4:	f000 f8bc 	bl	e460 <am_hal_itm_enable>
    e2e8:	4b28      	ldr	r3, [pc, #160]	; (e38c <am_bsp_debug_printf_enable+0xc0>)
    e2ea:	9301      	str	r3, [sp, #4]
    e2ec:	a801      	add	r0, sp, #4
    e2ee:	f000 fa8b 	bl	e808 <am_hal_tpiu_enable>
    e2f2:	4b27      	ldr	r3, [pc, #156]	; (e390 <am_bsp_debug_printf_enable+0xc4>)
    e2f4:	2029      	movs	r0, #41	; 0x29
    e2f6:	6819      	ldr	r1, [r3, #0]
    e2f8:	f7ff fd48 	bl	dd8c <am_hal_gpio_pinconfig>
    e2fc:	4825      	ldr	r0, [pc, #148]	; (e394 <am_bsp_debug_printf_enable+0xc8>)
    e2fe:	f7fe fa13 	bl	c728 <am_util_stdio_printf_init>
    e302:	b006      	add	sp, #24
    e304:	bd10      	pop	{r4, pc}
    e306:	4c24      	ldr	r4, [pc, #144]	; (e398 <am_bsp_debug_printf_enable+0xcc>)
    e308:	2000      	movs	r0, #0
    e30a:	4621      	mov	r1, r4
    e30c:	f000 facc 	bl	e8a8 <am_hal_uart_initialize>
    e310:	2200      	movs	r2, #0
    e312:	4611      	mov	r1, r2
    e314:	6820      	ldr	r0, [r4, #0]
    e316:	f000 fb03 	bl	e920 <am_hal_uart_power_control>
    e31a:	4920      	ldr	r1, [pc, #128]	; (e39c <am_bsp_debug_printf_enable+0xd0>)
    e31c:	6820      	ldr	r0, [r4, #0]
    e31e:	f000 fb77 	bl	ea10 <am_hal_uart_configure>
    e322:	4b1f      	ldr	r3, [pc, #124]	; (e3a0 <am_bsp_debug_printf_enable+0xd4>)
    e324:	2016      	movs	r0, #22
    e326:	6819      	ldr	r1, [r3, #0]
    e328:	f7ff fd30 	bl	dd8c <am_hal_gpio_pinconfig>
    e32c:	4b1d      	ldr	r3, [pc, #116]	; (e3a4 <am_bsp_debug_printf_enable+0xd8>)
    e32e:	2017      	movs	r0, #23
    e330:	6819      	ldr	r1, [r3, #0]
    e332:	f7ff fd2b 	bl	dd8c <am_hal_gpio_pinconfig>
    e336:	481c      	ldr	r0, [pc, #112]	; (e3a8 <am_bsp_debug_printf_enable+0xdc>)
    e338:	b006      	add	sp, #24
    e33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e33e:	f7fe b9f3 	b.w	c728 <am_util_stdio_printf_init>
    e342:	4c15      	ldr	r4, [pc, #84]	; (e398 <am_bsp_debug_printf_enable+0xcc>)
    e344:	2302      	movs	r3, #2
    e346:	4621      	mov	r1, r4
    e348:	2000      	movs	r0, #0
    e34a:	6013      	str	r3, [r2, #0]
    e34c:	f000 faac 	bl	e8a8 <am_hal_uart_initialize>
    e350:	2200      	movs	r2, #0
    e352:	4611      	mov	r1, r2
    e354:	6820      	ldr	r0, [r4, #0]
    e356:	f000 fae3 	bl	e920 <am_hal_uart_power_control>
    e35a:	4914      	ldr	r1, [pc, #80]	; (e3ac <am_bsp_debug_printf_enable+0xe0>)
    e35c:	6820      	ldr	r0, [r4, #0]
    e35e:	f000 fb57 	bl	ea10 <am_hal_uart_configure>
    e362:	4b0f      	ldr	r3, [pc, #60]	; (e3a0 <am_bsp_debug_printf_enable+0xd4>)
    e364:	2016      	movs	r0, #22
    e366:	6819      	ldr	r1, [r3, #0]
    e368:	f7ff fd10 	bl	dd8c <am_hal_gpio_pinconfig>
    e36c:	4b0d      	ldr	r3, [pc, #52]	; (e3a4 <am_bsp_debug_printf_enable+0xd8>)
    e36e:	2017      	movs	r0, #23
    e370:	6819      	ldr	r1, [r3, #0]
    e372:	f7ff fd0b 	bl	dd8c <am_hal_gpio_pinconfig>
    e376:	480c      	ldr	r0, [pc, #48]	; (e3a8 <am_bsp_debug_printf_enable+0xdc>)
    e378:	f7fe f9d6 	bl	c728 <am_util_stdio_printf_init>
    e37c:	4b0c      	ldr	r3, [pc, #48]	; (e3b0 <am_bsp_debug_printf_enable+0xe4>)
    e37e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e382:	601a      	str	r2, [r3, #0]
    e384:	b006      	add	sp, #24
    e386:	bd10      	pop	{r4, pc}
    e388:	10001190 	.word	0x10001190
    e38c:	000f4240 	.word	0x000f4240
    e390:	0000f5a8 	.word	0x0000f5a8
    e394:	0000e55d 	.word	0x0000e55d
    e398:	1000118c 	.word	0x1000118c
    e39c:	0000f578 	.word	0x0000f578
    e3a0:	0000f5a4 	.word	0x0000f5a4
    e3a4:	0000f5a0 	.word	0x0000f5a0
    e3a8:	0000e241 	.word	0x0000e241
    e3ac:	10001050 	.word	0x10001050
    e3b0:	e000e100 	.word	0xe000e100

0000e3b4 <am_bsp_debug_printf_disable>:
    e3b4:	b538      	push	{r3, r4, r5, lr}
    e3b6:	4b17      	ldr	r3, [pc, #92]	; (e414 <am_bsp_debug_printf_disable+0x60>)
    e3b8:	681c      	ldr	r4, [r3, #0]
    e3ba:	2c01      	cmp	r4, #1
    e3bc:	d002      	beq.n	e3c4 <am_bsp_debug_printf_disable+0x10>
    e3be:	2c02      	cmp	r4, #2
    e3c0:	d00c      	beq.n	e3dc <am_bsp_debug_printf_disable+0x28>
    e3c2:	bd38      	pop	{r3, r4, r5, pc}
    e3c4:	f000 f870 	bl	e4a8 <am_hal_itm_disable>
    e3c8:	2000      	movs	r0, #0
    e3ca:	f7fe f9ad 	bl	c728 <am_util_stdio_printf_init>
    e3ce:	4b12      	ldr	r3, [pc, #72]	; (e418 <am_bsp_debug_printf_disable+0x64>)
    e3d0:	2029      	movs	r0, #41	; 0x29
    e3d2:	6819      	ldr	r1, [r3, #0]
    e3d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e3d8:	f7ff bcd8 	b.w	dd8c <am_hal_gpio_pinconfig>
    e3dc:	4d0f      	ldr	r5, [pc, #60]	; (e41c <am_bsp_debug_printf_disable+0x68>)
    e3de:	6828      	ldr	r0, [r5, #0]
    e3e0:	f000 fe14 	bl	f00c <am_hal_uart_tx_flush>
    e3e4:	2000      	movs	r0, #0
    e3e6:	f7fe f99f 	bl	c728 <am_util_stdio_printf_init>
    e3ea:	4621      	mov	r1, r4
    e3ec:	2200      	movs	r2, #0
    e3ee:	6828      	ldr	r0, [r5, #0]
    e3f0:	f000 fa96 	bl	e920 <am_hal_uart_power_control>
    e3f4:	6828      	ldr	r0, [r5, #0]
    e3f6:	f000 fa7f 	bl	e8f8 <am_hal_uart_deinitialize>
    e3fa:	4b07      	ldr	r3, [pc, #28]	; (e418 <am_bsp_debug_printf_disable+0x64>)
    e3fc:	681c      	ldr	r4, [r3, #0]
    e3fe:	2016      	movs	r0, #22
    e400:	4621      	mov	r1, r4
    e402:	f7ff fcc3 	bl	dd8c <am_hal_gpio_pinconfig>
    e406:	4621      	mov	r1, r4
    e408:	2017      	movs	r0, #23
    e40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e40e:	f7ff bcbd 	b.w	dd8c <am_hal_gpio_pinconfig>
    e412:	bf00      	nop
    e414:	10001190 	.word	0x10001190
    e418:	0000f388 	.word	0x0000f388
    e41c:	1000118c 	.word	0x1000118c

0000e420 <am_bsp_itm_printf_enable>:
    e420:	b500      	push	{lr}
    e422:	4b0b      	ldr	r3, [pc, #44]	; (e450 <am_bsp_itm_printf_enable+0x30>)
    e424:	b087      	sub	sp, #28
    e426:	2201      	movs	r2, #1
    e428:	601a      	str	r2, [r3, #0]
    e42a:	f000 f819 	bl	e460 <am_hal_itm_enable>
    e42e:	4b09      	ldr	r3, [pc, #36]	; (e454 <am_bsp_itm_printf_enable+0x34>)
    e430:	9301      	str	r3, [sp, #4]
    e432:	a801      	add	r0, sp, #4
    e434:	f000 f9e8 	bl	e808 <am_hal_tpiu_enable>
    e438:	4b07      	ldr	r3, [pc, #28]	; (e458 <am_bsp_itm_printf_enable+0x38>)
    e43a:	2029      	movs	r0, #41	; 0x29
    e43c:	6819      	ldr	r1, [r3, #0]
    e43e:	f7ff fca5 	bl	dd8c <am_hal_gpio_pinconfig>
    e442:	4806      	ldr	r0, [pc, #24]	; (e45c <am_bsp_itm_printf_enable+0x3c>)
    e444:	f7fe f970 	bl	c728 <am_util_stdio_printf_init>
    e448:	b007      	add	sp, #28
    e44a:	f85d fb04 	ldr.w	pc, [sp], #4
    e44e:	bf00      	nop
    e450:	10001190 	.word	0x10001190
    e454:	000f4240 	.word	0x000f4240
    e458:	0000f5a8 	.word	0x0000f5a8
    e45c:	0000e55d 	.word	0x0000e55d

0000e460 <am_hal_itm_enable>:
    e460:	4a0e      	ldr	r2, [pc, #56]	; (e49c <am_hal_itm_enable+0x3c>)
    e462:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e46a:	b410      	push	{r4}
    e46c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e470:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e474:	01db      	lsls	r3, r3, #7
    e476:	d5fb      	bpl.n	e470 <am_hal_itm_enable+0x10>
    e478:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e47c:	4c08      	ldr	r4, [pc, #32]	; (e4a0 <am_hal_itm_enable+0x40>)
    e47e:	4a09      	ldr	r2, [pc, #36]	; (e4a4 <am_hal_itm_enable+0x44>)
    e480:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e484:	200f      	movs	r0, #15
    e486:	f04f 31ff 	mov.w	r1, #4294967295
    e48a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e48e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e492:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e496:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e49a:	4770      	bx	lr
    e49c:	e000ed00 	.word	0xe000ed00
    e4a0:	c5acce55 	.word	0xc5acce55
    e4a4:	00150511 	.word	0x00150511

0000e4a8 <am_hal_itm_disable>:
    e4a8:	4b27      	ldr	r3, [pc, #156]	; (e548 <am_hal_itm_disable+0xa0>)
    e4aa:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e4ae:	b510      	push	{r4, lr}
    e4b0:	b9cb      	cbnz	r3, e4e6 <am_hal_itm_disable+0x3e>
    e4b2:	4a26      	ldr	r2, [pc, #152]	; (e54c <am_hal_itm_disable+0xa4>)
    e4b4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e4b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e4bc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e4c0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e4c4:	01d9      	lsls	r1, r3, #7
    e4c6:	d5fb      	bpl.n	e4c0 <am_hal_itm_disable+0x18>
    e4c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e4cc:	4c20      	ldr	r4, [pc, #128]	; (e550 <am_hal_itm_disable+0xa8>)
    e4ce:	4a21      	ldr	r2, [pc, #132]	; (e554 <am_hal_itm_disable+0xac>)
    e4d0:	f8c3 4fb0 	str.w	r4, [r3, #4016]	; 0xfb0
    e4d4:	200f      	movs	r0, #15
    e4d6:	f04f 31ff 	mov.w	r1, #4294967295
    e4da:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e4de:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e4e2:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e4e6:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e4ea:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    e4ee:	021b      	lsls	r3, r3, #8
    e4f0:	d4fb      	bmi.n	e4ea <am_hal_itm_disable+0x42>
    e4f2:	f44f 7048 	mov.w	r0, #800	; 0x320
    e4f6:	f7ff fbf9 	bl	dcec <am_hal_flash_delay>
    e4fa:	4b15      	ldr	r3, [pc, #84]	; (e550 <am_hal_itm_disable+0xa8>)
    e4fc:	4916      	ldr	r1, [pc, #88]	; (e558 <am_hal_itm_disable+0xb0>)
    e4fe:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    e502:	2064      	movs	r0, #100	; 0x64
    e504:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e508:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e50c:	f023 0301 	bic.w	r3, r3, #1
    e510:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    e514:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e518:	420b      	tst	r3, r1
    e51a:	d1fb      	bne.n	e514 <am_hal_itm_disable+0x6c>
    e51c:	3801      	subs	r0, #1
    e51e:	d1f3      	bne.n	e508 <am_hal_itm_disable+0x60>
    e520:	4a0a      	ldr	r2, [pc, #40]	; (e54c <am_hal_itm_disable+0xa4>)
    e522:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e52a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    e52e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    e532:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    e536:	d1fa      	bne.n	e52e <am_hal_itm_disable+0x86>
    e538:	4a03      	ldr	r2, [pc, #12]	; (e548 <am_hal_itm_disable+0xa0>)
    e53a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e53e:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    e542:	2b00      	cmp	r3, #0
    e544:	d1fb      	bne.n	e53e <am_hal_itm_disable+0x96>
    e546:	bd10      	pop	{r4, pc}
    e548:	40020000 	.word	0x40020000
    e54c:	e000ed00 	.word	0xe000ed00
    e550:	c5acce55 	.word	0xc5acce55
    e554:	00150511 	.word	0x00150511
    e558:	00800001 	.word	0x00800001

0000e55c <am_hal_itm_print>:
    e55c:	7803      	ldrb	r3, [r0, #0]
    e55e:	b1a3      	cbz	r3, e58a <am_hal_itm_print+0x2e>
    e560:	4603      	mov	r3, r0
    e562:	f1c0 0c01 	rsb	ip, r0, #1
    e566:	eb0c 0103 	add.w	r1, ip, r3
    e56a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e56e:	2a00      	cmp	r2, #0
    e570:	d1f9      	bne.n	e566 <am_hal_itm_print+0xa>
    e572:	4401      	add	r1, r0
    e574:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e578:	f810 cb01 	ldrb.w	ip, [r0], #1
    e57c:	6813      	ldr	r3, [r2, #0]
    e57e:	2b00      	cmp	r3, #0
    e580:	d0fc      	beq.n	e57c <am_hal_itm_print+0x20>
    e582:	4288      	cmp	r0, r1
    e584:	f882 c000 	strb.w	ip, [r2]
    e588:	d1f6      	bne.n	e578 <am_hal_itm_print+0x1c>
    e58a:	4770      	bx	lr

0000e58c <am_hal_pwrctrl_periph_enable>:
    e58c:	b570      	push	{r4, r5, r6, lr}
    e58e:	b082      	sub	sp, #8
    e590:	4604      	mov	r4, r0
    e592:	f7ff fd79 	bl	e088 <am_hal_interrupt_master_disable>
    e596:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e59a:	4e0f      	ldr	r6, [pc, #60]	; (e5d8 <am_hal_pwrctrl_periph_enable+0x4c>)
    e59c:	4d0f      	ldr	r5, [pc, #60]	; (e5dc <am_hal_pwrctrl_periph_enable+0x50>)
    e59e:	9001      	str	r0, [sp, #4]
    e5a0:	00a4      	lsls	r4, r4, #2
    e5a2:	68b3      	ldr	r3, [r6, #8]
    e5a4:	592a      	ldr	r2, [r5, r4]
    e5a6:	4313      	orrs	r3, r2
    e5a8:	60b3      	str	r3, [r6, #8]
    e5aa:	9801      	ldr	r0, [sp, #4]
    e5ac:	442c      	add	r4, r5
    e5ae:	f7ff fd6f 	bl	e090 <am_hal_interrupt_master_set>
    e5b2:	20a0      	movs	r0, #160	; 0xa0
    e5b4:	f7ff fb9a 	bl	dcec <am_hal_flash_delay>
    e5b8:	69b3      	ldr	r3, [r6, #24]
    e5ba:	6864      	ldr	r4, [r4, #4]
    e5bc:	4223      	tst	r3, r4
    e5be:	d103      	bne.n	e5c8 <am_hal_pwrctrl_periph_enable+0x3c>
    e5c0:	20a0      	movs	r0, #160	; 0xa0
    e5c2:	f7ff fb93 	bl	dcec <am_hal_flash_delay>
    e5c6:	69b3      	ldr	r3, [r6, #24]
    e5c8:	4b03      	ldr	r3, [pc, #12]	; (e5d8 <am_hal_pwrctrl_periph_enable+0x4c>)
    e5ca:	699b      	ldr	r3, [r3, #24]
    e5cc:	4223      	tst	r3, r4
    e5ce:	bf0c      	ite	eq
    e5d0:	2001      	moveq	r0, #1
    e5d2:	2000      	movne	r0, #0
    e5d4:	b002      	add	sp, #8
    e5d6:	bd70      	pop	{r4, r5, r6, pc}
    e5d8:	40021000 	.word	0x40021000
    e5dc:	0000f5ac 	.word	0x0000f5ac

0000e5e0 <am_hal_pwrctrl_periph_disable>:
    e5e0:	b570      	push	{r4, r5, r6, lr}
    e5e2:	b082      	sub	sp, #8
    e5e4:	4604      	mov	r4, r0
    e5e6:	f7ff fd4f 	bl	e088 <am_hal_interrupt_master_disable>
    e5ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e5ee:	4e10      	ldr	r6, [pc, #64]	; (e630 <am_hal_pwrctrl_periph_disable+0x50>)
    e5f0:	4d10      	ldr	r5, [pc, #64]	; (e634 <am_hal_pwrctrl_periph_disable+0x54>)
    e5f2:	9001      	str	r0, [sp, #4]
    e5f4:	00a4      	lsls	r4, r4, #2
    e5f6:	68b3      	ldr	r3, [r6, #8]
    e5f8:	592a      	ldr	r2, [r5, r4]
    e5fa:	ea23 0302 	bic.w	r3, r3, r2
    e5fe:	60b3      	str	r3, [r6, #8]
    e600:	9801      	ldr	r0, [sp, #4]
    e602:	442c      	add	r4, r5
    e604:	f7ff fd44 	bl	e090 <am_hal_interrupt_master_set>
    e608:	20a0      	movs	r0, #160	; 0xa0
    e60a:	f7ff fb6f 	bl	dcec <am_hal_flash_delay>
    e60e:	69b3      	ldr	r3, [r6, #24]
    e610:	6864      	ldr	r4, [r4, #4]
    e612:	4223      	tst	r3, r4
    e614:	d003      	beq.n	e61e <am_hal_pwrctrl_periph_disable+0x3e>
    e616:	20a0      	movs	r0, #160	; 0xa0
    e618:	f7ff fb68 	bl	dcec <am_hal_flash_delay>
    e61c:	69b3      	ldr	r3, [r6, #24]
    e61e:	4b04      	ldr	r3, [pc, #16]	; (e630 <am_hal_pwrctrl_periph_disable+0x50>)
    e620:	699b      	ldr	r3, [r3, #24]
    e622:	4223      	tst	r3, r4
    e624:	bf14      	ite	ne
    e626:	2001      	movne	r0, #1
    e628:	2000      	moveq	r0, #0
    e62a:	b002      	add	sp, #8
    e62c:	bd70      	pop	{r4, r5, r6, pc}
    e62e:	bf00      	nop
    e630:	40021000 	.word	0x40021000
    e634:	0000f5ac 	.word	0x0000f5ac

0000e638 <am_hal_pwrctrl_low_power_init>:
    e638:	b530      	push	{r4, r5, lr}
    e63a:	4b69      	ldr	r3, [pc, #420]	; (e7e0 <am_hal_pwrctrl_low_power_init+0x1a8>)
    e63c:	681a      	ldr	r2, [r3, #0]
    e63e:	b085      	sub	sp, #20
    e640:	b912      	cbnz	r2, e648 <am_hal_pwrctrl_low_power_init+0x10>
    e642:	4a68      	ldr	r2, [pc, #416]	; (e7e4 <am_hal_pwrctrl_low_power_init+0x1ac>)
    e644:	6812      	ldr	r2, [r2, #0]
    e646:	601a      	str	r2, [r3, #0]
    e648:	4b67      	ldr	r3, [pc, #412]	; (e7e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e64a:	68db      	ldr	r3, [r3, #12]
    e64c:	b2db      	uxtb	r3, r3
    e64e:	2b12      	cmp	r3, #18
    e650:	d104      	bne.n	e65c <am_hal_pwrctrl_low_power_init+0x24>
    e652:	4c66      	ldr	r4, [pc, #408]	; (e7ec <am_hal_pwrctrl_low_power_init+0x1b4>)
    e654:	6863      	ldr	r3, [r4, #4]
    e656:	07d8      	lsls	r0, r3, #31
    e658:	f100 8088 	bmi.w	e76c <am_hal_pwrctrl_low_power_init+0x134>
    e65c:	4b62      	ldr	r3, [pc, #392]	; (e7e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e65e:	68da      	ldr	r2, [r3, #12]
    e660:	b2d2      	uxtb	r2, r2
    e662:	2a20      	cmp	r2, #32
    e664:	d934      	bls.n	e6d0 <am_hal_pwrctrl_low_power_init+0x98>
    e666:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
    e66a:	2002      	movs	r0, #2
    e66c:	f360 4213 	bfi	r2, r0, #16, #4
    e670:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    e674:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
    e678:	2203      	movs	r2, #3
    e67a:	f362 5117 	bfi	r1, r2, #20, #4
    e67e:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
    e682:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e686:	2405      	movs	r4, #5
    e688:	f364 0103 	bfi	r1, r4, #0, #4
    e68c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e690:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e694:	f360 1107 	bfi	r1, r0, #4, #4
    e698:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e69c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e6a0:	2406      	movs	r4, #6
    e6a2:	f364 210b 	bfi	r1, r4, #8, #4
    e6a6:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e6aa:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e6ae:	2001      	movs	r0, #1
    e6b0:	f360 310f 	bfi	r1, r0, #12, #4
    e6b4:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e6b8:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
    e6bc:	f362 61de 	bfi	r1, r2, #27, #4
    e6c0:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
    e6c4:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
    e6c8:	f362 0103 	bfi	r1, r2, #0, #4
    e6cc:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    e6d0:	4a45      	ldr	r2, [pc, #276]	; (e7e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e6d2:	68d3      	ldr	r3, [r2, #12]
    e6d4:	b2db      	uxtb	r3, r3
    e6d6:	2b11      	cmp	r3, #17
    e6d8:	d905      	bls.n	e6e6 <am_hal_pwrctrl_low_power_init+0xae>
    e6da:	f8d2 335c 	ldr.w	r3, [r2, #860]	; 0x35c
    e6de:	f36f 6318 	bfc	r3, #24, #1
    e6e2:	f8c2 335c 	str.w	r3, [r2, #860]	; 0x35c
    e6e6:	2100      	movs	r1, #0
    e6e8:	200c      	movs	r0, #12
    e6ea:	f7fe ffc9 	bl	d680 <am_hal_cachectrl_control>
    e6ee:	4b3f      	ldr	r3, [pc, #252]	; (e7ec <am_hal_pwrctrl_low_power_init+0x1b4>)
    e6f0:	699b      	ldr	r3, [r3, #24]
    e6f2:	f3c3 2500 	ubfx	r5, r3, #8, #1
    e6f6:	05db      	lsls	r3, r3, #23
    e6f8:	d420      	bmi.n	e73c <am_hal_pwrctrl_low_power_init+0x104>
    e6fa:	4c3b      	ldr	r4, [pc, #236]	; (e7e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e6fc:	68e3      	ldr	r3, [r4, #12]
    e6fe:	b2db      	uxtb	r3, r3
    e700:	2b11      	cmp	r3, #17
    e702:	d84e      	bhi.n	e7a2 <am_hal_pwrctrl_low_power_init+0x16a>
    e704:	4c38      	ldr	r4, [pc, #224]	; (e7e8 <am_hal_pwrctrl_low_power_init+0x1b0>)
    e706:	493a      	ldr	r1, [pc, #232]	; (e7f0 <am_hal_pwrctrl_low_power_init+0x1b8>)
    e708:	7e22      	ldrb	r2, [r4, #24]
    e70a:	2001      	movs	r0, #1
    e70c:	4302      	orrs	r2, r0
    e70e:	2307      	movs	r3, #7
    e710:	7622      	strb	r2, [r4, #24]
    e712:	9000      	str	r0, [sp, #0]
    e714:	461a      	mov	r2, r3
    e716:	f242 7010 	movw	r0, #10000	; 0x2710
    e71a:	f7ff faf7 	bl	dd0c <am_hal_flash_delay_status_check>
    e71e:	2800      	cmp	r0, #0
    e720:	d15a      	bne.n	e7d8 <am_hal_pwrctrl_low_power_init+0x1a0>
    e722:	4b32      	ldr	r3, [pc, #200]	; (e7ec <am_hal_pwrctrl_low_power_init+0x1b4>)
    e724:	681a      	ldr	r2, [r3, #0]
    e726:	f042 0201 	orr.w	r2, r2, #1
    e72a:	601a      	str	r2, [r3, #0]
    e72c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e72e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e732:	625a      	str	r2, [r3, #36]	; 0x24
    e734:	68e3      	ldr	r3, [r4, #12]
    e736:	b2db      	uxtb	r3, r3
    e738:	2b11      	cmp	r3, #17
    e73a:	d002      	beq.n	e742 <am_hal_pwrctrl_low_power_init+0x10a>
    e73c:	2000      	movs	r0, #0
    e73e:	b005      	add	sp, #20
    e740:	bd30      	pop	{r4, r5, pc}
    e742:	f8d4 335c 	ldr.w	r3, [r4, #860]	; 0x35c
    e746:	f360 5356 	bfi	r3, r0, #21, #2
    e74a:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
    e74e:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e752:	220f      	movs	r2, #15
    e754:	f362 138b 	bfi	r3, r2, #6, #6
    e758:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e75c:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e760:	f362 0305 	bfi	r3, r2, #0, #6
    e764:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e768:	b005      	add	sp, #20
    e76a:	bd30      	pop	{r4, r5, pc}
    e76c:	f7ff fc8c 	bl	e088 <am_hal_interrupt_master_disable>
    e770:	9002      	str	r0, [sp, #8]
    e772:	68a3      	ldr	r3, [r4, #8]
    e774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e778:	60a3      	str	r3, [r4, #8]
    e77a:	9802      	ldr	r0, [sp, #8]
    e77c:	f7ff fc88 	bl	e090 <am_hal_interrupt_master_set>
    e780:	20a0      	movs	r0, #160	; 0xa0
    e782:	f7ff fab3 	bl	dcec <am_hal_flash_delay>
    e786:	69a3      	ldr	r3, [r4, #24]
    e788:	0619      	lsls	r1, r3, #24
    e78a:	d403      	bmi.n	e794 <am_hal_pwrctrl_low_power_init+0x15c>
    e78c:	20a0      	movs	r0, #160	; 0xa0
    e78e:	f7ff faad 	bl	dcec <am_hal_flash_delay>
    e792:	69a3      	ldr	r3, [r4, #24]
    e794:	4b15      	ldr	r3, [pc, #84]	; (e7ec <am_hal_pwrctrl_low_power_init+0x1b4>)
    e796:	699b      	ldr	r3, [r3, #24]
    e798:	061a      	lsls	r2, r3, #24
    e79a:	f53f af5f 	bmi.w	e65c <am_hal_pwrctrl_low_power_init+0x24>
    e79e:	2001      	movs	r0, #1
    e7a0:	e7cd      	b.n	e73e <am_hal_pwrctrl_low_power_init+0x106>
    e7a2:	f7ff fc71 	bl	e088 <am_hal_interrupt_master_disable>
    e7a6:	9003      	str	r0, [sp, #12]
    e7a8:	f8d4 3368 	ldr.w	r3, [r4, #872]	; 0x368
    e7ac:	2219      	movs	r2, #25
    e7ae:	f362 138b 	bfi	r3, r2, #6, #6
    e7b2:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
    e7b6:	f8d4 2368 	ldr.w	r2, [r4, #872]	; 0x368
    e7ba:	210c      	movs	r1, #12
    e7bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e7c0:	f361 0205 	bfi	r2, r1, #0, #6
    e7c4:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
    e7c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    e7ca:	f365 5296 	bfi	r2, r5, #22, #1
    e7ce:	63da      	str	r2, [r3, #60]	; 0x3c
    e7d0:	9803      	ldr	r0, [sp, #12]
    e7d2:	f7ff fc5d 	bl	e090 <am_hal_interrupt_master_set>
    e7d6:	e795      	b.n	e704 <am_hal_pwrctrl_low_power_init+0xcc>
    e7d8:	2004      	movs	r0, #4
    e7da:	b005      	add	sp, #20
    e7dc:	bd30      	pop	{r4, r5, pc}
    e7de:	bf00      	nop
    e7e0:	10001184 	.word	0x10001184
    e7e4:	4ffff000 	.word	0x4ffff000
    e7e8:	40020000 	.word	0x40020000
    e7ec:	40021000 	.word	0x40021000
    e7f0:	40020018 	.word	0x40020018

0000e7f4 <am_hal_rtc_osc_disable>:
    e7f4:	4a03      	ldr	r2, [pc, #12]	; (e804 <am_hal_rtc_osc_disable+0x10>)
    e7f6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e7fa:	f043 0310 	orr.w	r3, r3, #16
    e7fe:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e802:	4770      	bx	lr
    e804:	40004200 	.word	0x40004200

0000e808 <am_hal_tpiu_enable>:
    e808:	b510      	push	{r4, lr}
    e80a:	4b23      	ldr	r3, [pc, #140]	; (e898 <am_hal_tpiu_enable+0x90>)
    e80c:	6804      	ldr	r4, [r0, #0]
    e80e:	2200      	movs	r2, #0
    e810:	b084      	sub	sp, #16
    e812:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e816:	b334      	cbz	r4, e866 <am_hal_tpiu_enable+0x5e>
    e818:	4a20      	ldr	r2, [pc, #128]	; (e89c <am_hal_tpiu_enable+0x94>)
    e81a:	4921      	ldr	r1, [pc, #132]	; (e8a0 <am_hal_tpiu_enable+0x98>)
    e81c:	2001      	movs	r0, #1
    e81e:	6058      	str	r0, [r3, #4]
    e820:	f5a4 4361 	sub.w	r3, r4, #57600	; 0xe100
    e824:	a801      	add	r0, sp, #4
    e826:	428b      	cmp	r3, r1
    e828:	bf88      	it	hi
    e82a:	4614      	movhi	r4, r2
    e82c:	f7ff f93e 	bl	daac <am_hal_clkgen_status_get>
    e830:	9b01      	ldr	r3, [sp, #4]
    e832:	1c5a      	adds	r2, r3, #1
    e834:	d02d      	beq.n	e892 <am_hal_tpiu_enable+0x8a>
    e836:	08db      	lsrs	r3, r3, #3
    e838:	fbb3 f4f4 	udiv	r4, r3, r4
    e83c:	3c01      	subs	r4, #1
    e83e:	b2a4      	uxth	r4, r4
    e840:	4b15      	ldr	r3, [pc, #84]	; (e898 <am_hal_tpiu_enable+0x90>)
    e842:	4a18      	ldr	r2, [pc, #96]	; (e8a4 <am_hal_tpiu_enable+0x9c>)
    e844:	611c      	str	r4, [r3, #16]
    e846:	2102      	movs	r1, #2
    e848:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    e84c:	2000      	movs	r0, #0
    e84e:	f240 2101 	movw	r1, #513	; 0x201
    e852:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
    e856:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
    e85a:	f44f 7048 	mov.w	r0, #800	; 0x320
    e85e:	f7ff fa45 	bl	dcec <am_hal_flash_delay>
    e862:	b004      	add	sp, #16
    e864:	bd10      	pop	{r4, pc}
    e866:	6902      	ldr	r2, [r0, #16]
    e868:	611a      	str	r2, [r3, #16]
    e86a:	6882      	ldr	r2, [r0, #8]
    e86c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    e870:	68c1      	ldr	r1, [r0, #12]
    e872:	2201      	movs	r2, #1
    e874:	3901      	subs	r1, #1
    e876:	408a      	lsls	r2, r1
    e878:	605a      	str	r2, [r3, #4]
    e87a:	f8c3 4f00 	str.w	r4, [r3, #3840]	; 0xf00
    e87e:	4a09      	ldr	r2, [pc, #36]	; (e8a4 <am_hal_tpiu_enable+0x9c>)
    e880:	6843      	ldr	r3, [r0, #4]
    e882:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e886:	f44f 7048 	mov.w	r0, #800	; 0x320
    e88a:	f7ff fa2f 	bl	dcec <am_hal_flash_delay>
    e88e:	b004      	add	sp, #16
    e890:	bd10      	pop	{r4, pc}
    e892:	2405      	movs	r4, #5
    e894:	e7d4      	b.n	e840 <am_hal_tpiu_enable+0x38>
    e896:	bf00      	nop
    e898:	e0040000 	.word	0xe0040000
    e89c:	000f4240 	.word	0x000f4240
    e8a0:	001da380 	.word	0x001da380
    e8a4:	40020000 	.word	0x40020000

0000e8a8 <am_hal_uart_initialize>:
    e8a8:	2801      	cmp	r0, #1
    e8aa:	d81a      	bhi.n	e8e2 <am_hal_uart_initialize+0x3a>
    e8ac:	b1e9      	cbz	r1, e8ea <am_hal_uart_initialize+0x42>
    e8ae:	b530      	push	{r4, r5, lr}
    e8b0:	2264      	movs	r2, #100	; 0x64
    e8b2:	4d0f      	ldr	r5, [pc, #60]	; (e8f0 <am_hal_uart_initialize+0x48>)
    e8b4:	fb00 f202 	mul.w	r2, r0, r2
    e8b8:	18ac      	adds	r4, r5, r2
    e8ba:	78e3      	ldrb	r3, [r4, #3]
    e8bc:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    e8c0:	f013 0301 	ands.w	r3, r3, #1
    e8c4:	d10f      	bne.n	e8e6 <am_hal_uart_initialize+0x3e>
    e8c6:	6260      	str	r0, [r4, #36]	; 0x24
    e8c8:	58a8      	ldr	r0, [r5, r2]
    e8ca:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    e8ce:	4809      	ldr	r0, [pc, #36]	; (e8f4 <am_hal_uart_initialize+0x4c>)
    e8d0:	ea4c 0000 	orr.w	r0, ip, r0
    e8d4:	50a8      	str	r0, [r5, r2]
    e8d6:	f884 e004 	strb.w	lr, [r4, #4]
    e8da:	6623      	str	r3, [r4, #96]	; 0x60
    e8dc:	4618      	mov	r0, r3
    e8de:	600c      	str	r4, [r1, #0]
    e8e0:	bd30      	pop	{r4, r5, pc}
    e8e2:	2005      	movs	r0, #5
    e8e4:	4770      	bx	lr
    e8e6:	2007      	movs	r0, #7
    e8e8:	bd30      	pop	{r4, r5, pc}
    e8ea:	2006      	movs	r0, #6
    e8ec:	4770      	bx	lr
    e8ee:	bf00      	nop
    e8f0:	10001994 	.word	0x10001994
    e8f4:	01ea9e06 	.word	0x01ea9e06

0000e8f8 <am_hal_uart_deinitialize>:
    e8f8:	b170      	cbz	r0, e918 <am_hal_uart_deinitialize+0x20>
    e8fa:	6803      	ldr	r3, [r0, #0]
    e8fc:	4a07      	ldr	r2, [pc, #28]	; (e91c <am_hal_uart_deinitialize+0x24>)
    e8fe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e902:	4293      	cmp	r3, r2
    e904:	d108      	bne.n	e918 <am_hal_uart_deinitialize+0x20>
    e906:	78c2      	ldrb	r2, [r0, #3]
    e908:	2300      	movs	r3, #0
    e90a:	f36f 0200 	bfc	r2, #0, #1
    e90e:	70c2      	strb	r2, [r0, #3]
    e910:	6243      	str	r3, [r0, #36]	; 0x24
    e912:	7103      	strb	r3, [r0, #4]
    e914:	4618      	mov	r0, r3
    e916:	4770      	bx	lr
    e918:	2002      	movs	r0, #2
    e91a:	4770      	bx	lr
    e91c:	01ea9e06 	.word	0x01ea9e06

0000e920 <am_hal_uart_power_control>:
    e920:	b5f0      	push	{r4, r5, r6, r7, lr}
    e922:	4604      	mov	r4, r0
    e924:	6800      	ldr	r0, [r0, #0]
    e926:	4b39      	ldr	r3, [pc, #228]	; (ea0c <am_hal_uart_power_control+0xec>)
    e928:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e92c:	429e      	cmp	r6, r3
    e92e:	b085      	sub	sp, #20
    e930:	d13f      	bne.n	e9b2 <am_hal_uart_power_control+0x92>
    e932:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e934:	f105 0008 	add.w	r0, r5, #8
    e938:	b2c7      	uxtb	r7, r0
    e93a:	b189      	cbz	r1, e960 <am_hal_uart_power_control+0x40>
    e93c:	3901      	subs	r1, #1
    e93e:	2901      	cmp	r1, #1
    e940:	d834      	bhi.n	e9ac <am_hal_uart_power_control+0x8c>
    e942:	2a00      	cmp	r2, #0
    e944:	d138      	bne.n	e9b8 <am_hal_uart_power_control+0x98>
    e946:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e94a:	351c      	adds	r5, #28
    e94c:	032d      	lsls	r5, r5, #12
    e94e:	f04f 33ff 	mov.w	r3, #4294967295
    e952:	646b      	str	r3, [r5, #68]	; 0x44
    e954:	4638      	mov	r0, r7
    e956:	f7ff fe43 	bl	e5e0 <am_hal_pwrctrl_periph_disable>
    e95a:	2000      	movs	r0, #0
    e95c:	b005      	add	sp, #20
    e95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e960:	2a00      	cmp	r2, #0
    e962:	d04a      	beq.n	e9fa <am_hal_uart_power_control+0xda>
    e964:	7923      	ldrb	r3, [r4, #4]
    e966:	2b00      	cmp	r3, #0
    e968:	d04e      	beq.n	ea08 <am_hal_uart_power_control+0xe8>
    e96a:	4638      	mov	r0, r7
    e96c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e970:	9101      	str	r1, [sp, #4]
    e972:	351c      	adds	r5, #28
    e974:	f7ff fe0a 	bl	e58c <am_hal_pwrctrl_periph_enable>
    e978:	f7ff fb86 	bl	e088 <am_hal_interrupt_master_disable>
    e97c:	032d      	lsls	r5, r5, #12
    e97e:	68a3      	ldr	r3, [r4, #8]
    e980:	9002      	str	r0, [sp, #8]
    e982:	622b      	str	r3, [r5, #32]
    e984:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e988:	626a      	str	r2, [r5, #36]	; 0x24
    e98a:	62ab      	str	r3, [r5, #40]	; 0x28
    e98c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e990:	62ea      	str	r2, [r5, #44]	; 0x2c
    e992:	632b      	str	r3, [r5, #48]	; 0x30
    e994:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e998:	9901      	ldr	r1, [sp, #4]
    e99a:	636a      	str	r2, [r5, #52]	; 0x34
    e99c:	63ab      	str	r3, [r5, #56]	; 0x38
    e99e:	9802      	ldr	r0, [sp, #8]
    e9a0:	7121      	strb	r1, [r4, #4]
    e9a2:	f7ff fb75 	bl	e090 <am_hal_interrupt_master_set>
    e9a6:	9901      	ldr	r1, [sp, #4]
    e9a8:	4608      	mov	r0, r1
    e9aa:	e000      	b.n	e9ae <am_hal_uart_power_control+0x8e>
    e9ac:	2006      	movs	r0, #6
    e9ae:	b005      	add	sp, #20
    e9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9b2:	2002      	movs	r0, #2
    e9b4:	b005      	add	sp, #20
    e9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9b8:	f7ff fb66 	bl	e088 <am_hal_interrupt_master_disable>
    e9bc:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e9c0:	351c      	adds	r5, #28
    e9c2:	032d      	lsls	r5, r5, #12
    e9c4:	9003      	str	r0, [sp, #12]
    e9c6:	6a2b      	ldr	r3, [r5, #32]
    e9c8:	60a3      	str	r3, [r4, #8]
    e9ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e9cc:	60e3      	str	r3, [r4, #12]
    e9ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e9d0:	6123      	str	r3, [r4, #16]
    e9d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e9d4:	6163      	str	r3, [r4, #20]
    e9d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    e9d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e9da:	61a3      	str	r3, [r4, #24]
    e9dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e9de:	61e2      	str	r2, [r4, #28]
    e9e0:	2201      	movs	r2, #1
    e9e2:	6223      	str	r3, [r4, #32]
    e9e4:	9803      	ldr	r0, [sp, #12]
    e9e6:	7122      	strb	r2, [r4, #4]
    e9e8:	f7ff fb52 	bl	e090 <am_hal_interrupt_master_set>
    e9ec:	6823      	ldr	r3, [r4, #0]
    e9ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e9f2:	42b3      	cmp	r3, r6
    e9f4:	d1ae      	bne.n	e954 <am_hal_uart_power_control+0x34>
    e9f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e9f8:	e7a5      	b.n	e946 <am_hal_uart_power_control+0x26>
    e9fa:	4638      	mov	r0, r7
    e9fc:	9201      	str	r2, [sp, #4]
    e9fe:	f7ff fdc5 	bl	e58c <am_hal_pwrctrl_periph_enable>
    ea02:	9a01      	ldr	r2, [sp, #4]
    ea04:	4610      	mov	r0, r2
    ea06:	e7d2      	b.n	e9ae <am_hal_uart_power_control+0x8e>
    ea08:	2007      	movs	r0, #7
    ea0a:	e7d0      	b.n	e9ae <am_hal_uart_power_control+0x8e>
    ea0c:	01ea9e06 	.word	0x01ea9e06

0000ea10 <am_hal_uart_configure>:
    ea10:	6803      	ldr	r3, [r0, #0]
    ea12:	4a78      	ldr	r2, [pc, #480]	; (ebf4 <am_hal_uart_configure+0x1e4>)
    ea14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea18:	4293      	cmp	r3, r2
    ea1a:	d001      	beq.n	ea20 <am_hal_uart_configure+0x10>
    ea1c:	2002      	movs	r0, #2
    ea1e:	4770      	bx	lr
    ea20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea24:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ea26:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    ea2a:	341c      	adds	r4, #28
    ea2c:	0324      	lsls	r4, r4, #12
    ea2e:	2700      	movs	r7, #0
    ea30:	b084      	sub	sp, #16
    ea32:	6327      	str	r7, [r4, #48]	; 0x30
    ea34:	460e      	mov	r6, r1
    ea36:	4605      	mov	r5, r0
    ea38:	f7ff fb26 	bl	e088 <am_hal_interrupt_master_disable>
    ea3c:	9001      	str	r0, [sp, #4]
    ea3e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ea40:	f043 0308 	orr.w	r3, r3, #8
    ea44:	8623      	strh	r3, [r4, #48]	; 0x30
    ea46:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ea48:	2201      	movs	r2, #1
    ea4a:	f362 1306 	bfi	r3, r2, #4, #3
    ea4e:	8623      	strh	r3, [r4, #48]	; 0x30
    ea50:	9801      	ldr	r0, [sp, #4]
    ea52:	f7ff fb1d 	bl	e090 <am_hal_interrupt_master_set>
    ea56:	f7ff fb17 	bl	e088 <am_hal_interrupt_master_disable>
    ea5a:	9002      	str	r0, [sp, #8]
    ea5c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ea5e:	f367 0300 	bfi	r3, r7, #0, #1
    ea62:	8623      	strh	r3, [r4, #48]	; 0x30
    ea64:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ea66:	f367 2349 	bfi	r3, r7, #9, #1
    ea6a:	8623      	strh	r3, [r4, #48]	; 0x30
    ea6c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ea6e:	f367 2308 	bfi	r3, r7, #8, #1
    ea72:	8623      	strh	r3, [r4, #48]	; 0x30
    ea74:	9802      	ldr	r0, [sp, #8]
    ea76:	f7ff fb0b 	bl	e090 <am_hal_interrupt_master_set>
    ea7a:	4b5f      	ldr	r3, [pc, #380]	; (ebf8 <am_hal_uart_configure+0x1e8>)
    ea7c:	6832      	ldr	r2, [r6, #0]
    ea7e:	68db      	ldr	r3, [r3, #12]
    ea80:	b2db      	uxtb	r3, r3
    ea82:	2b12      	cmp	r3, #18
    ea84:	d076      	beq.n	eb74 <am_hal_uart_configure+0x164>
    ea86:	4b5c      	ldr	r3, [pc, #368]	; (ebf8 <am_hal_uart_configure+0x1e8>)
    ea88:	68db      	ldr	r3, [r3, #12]
    ea8a:	b2db      	uxtb	r3, r3
    ea8c:	2b20      	cmp	r3, #32
    ea8e:	d902      	bls.n	ea96 <am_hal_uart_configure+0x86>
    ea90:	4b5a      	ldr	r3, [pc, #360]	; (ebfc <am_hal_uart_configure+0x1ec>)
    ea92:	429a      	cmp	r2, r3
    ea94:	d871      	bhi.n	eb7a <am_hal_uart_configure+0x16a>
    ea96:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ea98:	f3c3 1302 	ubfx	r3, r3, #4, #3
    ea9c:	3b01      	subs	r3, #1
    ea9e:	b2db      	uxtb	r3, r3
    eaa0:	2b03      	cmp	r3, #3
    eaa2:	d86c      	bhi.n	eb7e <am_hal_uart_configure+0x16e>
    eaa4:	4956      	ldr	r1, [pc, #344]	; (ec00 <am_hal_uart_configure+0x1f0>)
    eaa6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    eaaa:	0112      	lsls	r2, r2, #4
    eaac:	4291      	cmp	r1, r2
    eaae:	ea4f 1381 	mov.w	r3, r1, lsl #6
    eab2:	fbb1 f0f2 	udiv	r0, r1, r2
    eab6:	fbb3 f3f2 	udiv	r3, r3, r2
    eaba:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    eabe:	d364      	bcc.n	eb8a <am_hal_uart_configure+0x17a>
    eac0:	6260      	str	r0, [r4, #36]	; 0x24
    eac2:	6260      	str	r0, [r4, #36]	; 0x24
    eac4:	62a3      	str	r3, [r4, #40]	; 0x28
    eac6:	089b      	lsrs	r3, r3, #2
    eac8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    eacc:	fbb1 f3f3 	udiv	r3, r1, r3
    ead0:	662b      	str	r3, [r5, #96]	; 0x60
    ead2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    ead4:	f36f 338e 	bfc	r3, #14, #1
    ead8:	8623      	strh	r3, [r4, #48]	; 0x30
    eada:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    eadc:	f36f 33cf 	bfc	r3, #15, #1
    eae0:	8623      	strh	r3, [r4, #48]	; 0x30
    eae2:	6933      	ldr	r3, [r6, #16]
    eae4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    eae6:	6971      	ldr	r1, [r6, #20]
    eae8:	431a      	orrs	r2, r3
    eaea:	6873      	ldr	r3, [r6, #4]
    eaec:	6322      	str	r2, [r4, #48]	; 0x30
    eaee:	68f2      	ldr	r2, [r6, #12]
    eaf0:	6361      	str	r1, [r4, #52]	; 0x34
    eaf2:	4313      	orrs	r3, r2
    eaf4:	68b2      	ldr	r2, [r6, #8]
    eaf6:	4313      	orrs	r3, r2
    eaf8:	f043 0310 	orr.w	r3, r3, #16
    eafc:	62e3      	str	r3, [r4, #44]	; 0x2c
    eafe:	f7ff fac3 	bl	e088 <am_hal_interrupt_master_disable>
    eb02:	9003      	str	r0, [sp, #12]
    eb04:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    eb06:	f043 0301 	orr.w	r3, r3, #1
    eb0a:	8623      	strh	r3, [r4, #48]	; 0x30
    eb0c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    eb0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    eb12:	8623      	strh	r3, [r4, #48]	; 0x30
    eb14:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    eb16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    eb1a:	8623      	strh	r3, [r4, #48]	; 0x30
    eb1c:	9803      	ldr	r0, [sp, #12]
    eb1e:	f7ff fab7 	bl	e090 <am_hal_interrupt_master_set>
    eb22:	682a      	ldr	r2, [r5, #0]
    eb24:	4b33      	ldr	r3, [pc, #204]	; (ebf4 <am_hal_uart_configure+0x1e4>)
    eb26:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    eb2a:	4598      	cmp	r8, r3
    eb2c:	d11e      	bne.n	eb6c <am_hal_uart_configure+0x15c>
    eb2e:	69b1      	ldr	r1, [r6, #24]
    eb30:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    eb34:	b109      	cbz	r1, eb3a <am_hal_uart_configure+0x12a>
    eb36:	69f3      	ldr	r3, [r6, #28]
    eb38:	bb5b      	cbnz	r3, eb92 <am_hal_uart_configure+0x182>
    eb3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb3c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eb40:	331c      	adds	r3, #28
    eb42:	031b      	lsls	r3, r3, #12
    eb44:	2200      	movs	r2, #0
    eb46:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    eb4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    eb4c:	f022 0220 	bic.w	r2, r2, #32
    eb50:	639a      	str	r2, [r3, #56]	; 0x38
    eb52:	b10c      	cbz	r4, eb58 <am_hal_uart_configure+0x148>
    eb54:	2f00      	cmp	r7, #0
    eb56:	d132      	bne.n	ebbe <am_hal_uart_configure+0x1ae>
    eb58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    eb5a:	2000      	movs	r0, #0
    eb5c:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    eb60:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    eb64:	639a      	str	r2, [r3, #56]	; 0x38
    eb66:	b004      	add	sp, #16
    eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb6c:	2000      	movs	r0, #0
    eb6e:	b004      	add	sp, #16
    eb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb74:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    eb78:	d985      	bls.n	ea86 <am_hal_uart_configure+0x76>
    eb7a:	4822      	ldr	r0, [pc, #136]	; (ec04 <am_hal_uart_configure+0x1f4>)
    eb7c:	e7f3      	b.n	eb66 <am_hal_uart_configure+0x156>
    eb7e:	4822      	ldr	r0, [pc, #136]	; (ec08 <am_hal_uart_configure+0x1f8>)
    eb80:	2300      	movs	r3, #0
    eb82:	662b      	str	r3, [r5, #96]	; 0x60
    eb84:	b004      	add	sp, #16
    eb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb8a:	2300      	movs	r3, #0
    eb8c:	481d      	ldr	r0, [pc, #116]	; (ec04 <am_hal_uart_configure+0x1f4>)
    eb8e:	662b      	str	r3, [r5, #96]	; 0x60
    eb90:	e7e9      	b.n	eb66 <am_hal_uart_configure+0x156>
    eb92:	2201      	movs	r2, #1
    eb94:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    eb98:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    eb9c:	f000 fa5e 	bl	f05c <am_hal_queue_init>
    eba0:	682b      	ldr	r3, [r5, #0]
    eba2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eba6:	4543      	cmp	r3, r8
    eba8:	d1e0      	bne.n	eb6c <am_hal_uart_configure+0x15c>
    ebaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ebac:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ebb0:	331c      	adds	r3, #28
    ebb2:	031b      	lsls	r3, r3, #12
    ebb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ebb6:	f042 0220 	orr.w	r2, r2, #32
    ebba:	639a      	str	r2, [r3, #56]	; 0x38
    ebbc:	e7c9      	b.n	eb52 <am_hal_uart_configure+0x142>
    ebbe:	2201      	movs	r2, #1
    ebc0:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    ebc4:	463b      	mov	r3, r7
    ebc6:	4621      	mov	r1, r4
    ebc8:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ebcc:	f000 fa46 	bl	f05c <am_hal_queue_init>
    ebd0:	682b      	ldr	r3, [r5, #0]
    ebd2:	4a08      	ldr	r2, [pc, #32]	; (ebf4 <am_hal_uart_configure+0x1e4>)
    ebd4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ebd8:	4293      	cmp	r3, r2
    ebda:	d1c7      	bne.n	eb6c <am_hal_uart_configure+0x15c>
    ebdc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ebde:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ebe2:	331c      	adds	r3, #28
    ebe4:	031b      	lsls	r3, r3, #12
    ebe6:	2000      	movs	r0, #0
    ebe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ebea:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    ebee:	639a      	str	r2, [r3, #56]	; 0x38
    ebf0:	e7b9      	b.n	eb66 <am_hal_uart_configure+0x156>
    ebf2:	bf00      	nop
    ebf4:	01ea9e06 	.word	0x01ea9e06
    ebf8:	40020000 	.word	0x40020000
    ebfc:	0016e360 	.word	0x0016e360
    ec00:	0000f660 	.word	0x0000f660
    ec04:	08000003 	.word	0x08000003
    ec08:	08000002 	.word	0x08000002

0000ec0c <am_hal_uart_transfer>:
    ec0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec10:	ed2d 8b02 	vpush	{d8}
    ec14:	680d      	ldr	r5, [r1, #0]
    ec16:	b091      	sub	sp, #68	; 0x44
    ec18:	4604      	mov	r4, r0
    ec1a:	b14d      	cbz	r5, ec30 <am_hal_uart_transfer+0x24>
    ec1c:	2d01      	cmp	r5, #1
    ec1e:	f000 808f 	beq.w	ed40 <am_hal_uart_transfer+0x134>
    ec22:	2507      	movs	r5, #7
    ec24:	4628      	mov	r0, r5
    ec26:	b011      	add	sp, #68	; 0x44
    ec28:	ecbd 8b02 	vpop	{d8}
    ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec30:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    ec34:	684b      	ldr	r3, [r1, #4]
    ec36:	690a      	ldr	r2, [r1, #16]
    ec38:	9202      	str	r2, [sp, #8]
    ec3a:	4618      	mov	r0, r3
    ec3c:	f1b8 0f00 	cmp.w	r8, #0
    ec40:	f000 8111 	beq.w	ee66 <am_hal_uart_transfer+0x25a>
    ec44:	f1bb 0f00 	cmp.w	fp, #0
    ec48:	f000 8172 	beq.w	ef30 <am_hal_uart_transfer+0x324>
    ec4c:	2c00      	cmp	r4, #0
    ec4e:	f000 8165 	beq.w	ef1c <am_hal_uart_transfer+0x310>
    ec52:	46a9      	mov	r9, r5
    ec54:	462f      	mov	r7, r5
    ec56:	9501      	str	r5, [sp, #4]
    ec58:	4625      	mov	r5, r4
    ec5a:	4619      	mov	r1, r3
    ec5c:	682a      	ldr	r2, [r5, #0]
    ec5e:	461c      	mov	r4, r3
    ec60:	4bad      	ldr	r3, [pc, #692]	; (ef18 <am_hal_uart_transfer+0x30c>)
    ec62:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ec66:	429a      	cmp	r2, r3
    ec68:	465e      	mov	r6, fp
    ec6a:	d12d      	bne.n	ecc8 <am_hal_uart_transfer+0xbc>
    ec6c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    ec70:	bb7a      	cbnz	r2, ecd2 <am_hal_uart_transfer+0xc6>
    ec72:	1e48      	subs	r0, r1, #1
    ec74:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ec76:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ec7a:	311c      	adds	r1, #28
    ec7c:	0309      	lsls	r1, r1, #12
    ec7e:	698b      	ldr	r3, [r1, #24]
    ec80:	069b      	lsls	r3, r3, #26
    ec82:	d405      	bmi.n	ec90 <am_hal_uart_transfer+0x84>
    ec84:	3201      	adds	r2, #1
    ec86:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    ec8a:	600b      	str	r3, [r1, #0]
    ec8c:	4296      	cmp	r6, r2
    ec8e:	d8f6      	bhi.n	ec7e <am_hal_uart_transfer+0x72>
    ec90:	4417      	add	r7, r2
    ec92:	1ab6      	subs	r6, r6, r2
    ec94:	b936      	cbnz	r6, eca4 <am_hal_uart_transfer+0x98>
    ec96:	9d01      	ldr	r5, [sp, #4]
    ec98:	9b02      	ldr	r3, [sp, #8]
    ec9a:	2b00      	cmp	r3, #0
    ec9c:	f000 808c 	beq.w	edb8 <am_hal_uart_transfer+0x1ac>
    eca0:	601f      	str	r7, [r3, #0]
    eca2:	e7bf      	b.n	ec24 <am_hal_uart_transfer+0x18>
    eca4:	2010      	movs	r0, #16
    eca6:	f7ff f821 	bl	dcec <am_hal_flash_delay>
    ecaa:	f1b8 3fff 	cmp.w	r8, #4294967295
    ecae:	bf18      	it	ne
    ecb0:	f109 0901 	addne.w	r9, r9, #1
    ecb4:	45c8      	cmp	r8, r9
    ecb6:	d9ee      	bls.n	ec96 <am_hal_uart_transfer+0x8a>
    ecb8:	682a      	ldr	r2, [r5, #0]
    ecba:	4b97      	ldr	r3, [pc, #604]	; (ef18 <am_hal_uart_transfer+0x30c>)
    ecbc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ecc0:	429a      	cmp	r2, r3
    ecc2:	eb04 0107 	add.w	r1, r4, r7
    ecc6:	d0d1      	beq.n	ec6c <am_hal_uart_transfer+0x60>
    ecc8:	9b02      	ldr	r3, [sp, #8]
    ecca:	b103      	cbz	r3, ecce <am_hal_uart_transfer+0xc2>
    eccc:	601f      	str	r7, [r3, #0]
    ecce:	2502      	movs	r5, #2
    ecd0:	e7a8      	b.n	ec24 <am_hal_uart_transfer+0x18>
    ecd2:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    ecd6:	1a12      	subs	r2, r2, r0
    ecd8:	42b2      	cmp	r2, r6
    ecda:	4613      	mov	r3, r2
    ecdc:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    ece0:	bf28      	it	cs
    ece2:	4633      	movcs	r3, r6
    ece4:	461a      	mov	r2, r3
    ece6:	4658      	mov	r0, fp
    ece8:	9303      	str	r3, [sp, #12]
    ecea:	f000 f9c3 	bl	f074 <am_hal_queue_item_add>
    ecee:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    ecf2:	f7ff f9c9 	bl	e088 <am_hal_interrupt_master_disable>
    ecf6:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    ecfa:	f10a 0a1c 	add.w	sl, sl, #28
    ecfe:	9008      	str	r0, [sp, #32]
    ed00:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    ed04:	e00d      	b.n	ed22 <am_hal_uart_transfer+0x116>
    ed06:	f000 f9f3 	bl	f0f0 <am_hal_queue_item_get>
    ed0a:	b190      	cbz	r0, ed32 <am_hal_uart_transfer+0x126>
    ed0c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ed0e:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ed12:	321c      	adds	r2, #28
    ed14:	0312      	lsls	r2, r2, #12
    ed16:	6993      	ldr	r3, [r2, #24]
    ed18:	0699      	lsls	r1, r3, #26
    ed1a:	bf5c      	itt	pl
    ed1c:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    ed20:	6013      	strpl	r3, [r2, #0]
    ed22:	f8da 3018 	ldr.w	r3, [sl, #24]
    ed26:	069b      	lsls	r3, r3, #26
    ed28:	f04f 0201 	mov.w	r2, #1
    ed2c:	a907      	add	r1, sp, #28
    ed2e:	4658      	mov	r0, fp
    ed30:	d5e9      	bpl.n	ed06 <am_hal_uart_transfer+0xfa>
    ed32:	9b03      	ldr	r3, [sp, #12]
    ed34:	9808      	ldr	r0, [sp, #32]
    ed36:	441f      	add	r7, r3
    ed38:	1af6      	subs	r6, r6, r3
    ed3a:	f7ff f9a9 	bl	e090 <am_hal_interrupt_master_set>
    ed3e:	e7a9      	b.n	ec94 <am_hal_uart_transfer+0x88>
    ed40:	68cd      	ldr	r5, [r1, #12]
    ed42:	690b      	ldr	r3, [r1, #16]
    ed44:	9301      	str	r3, [sp, #4]
    ed46:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    ed4a:	2d00      	cmp	r5, #0
    ed4c:	f000 80b5 	beq.w	eeba <am_hal_uart_transfer+0x2ae>
    ed50:	2f00      	cmp	r7, #0
    ed52:	f000 811e 	beq.w	ef92 <am_hal_uart_transfer+0x386>
    ed56:	2800      	cmp	r0, #0
    ed58:	f000 80e7 	beq.w	ef2a <am_hal_uart_transfer+0x31e>
    ed5c:	6822      	ldr	r2, [r4, #0]
    ed5e:	f8df a1b8 	ldr.w	sl, [pc, #440]	; ef18 <am_hal_uart_transfer+0x30c>
    ed62:	f100 0348 	add.w	r3, r0, #72	; 0x48
    ed66:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ed6a:	ee08 3a10 	vmov	s16, r3
    ed6e:	f04f 0900 	mov.w	r9, #0
    ed72:	462b      	mov	r3, r5
    ed74:	4552      	cmp	r2, sl
    ed76:	46c8      	mov	r8, r9
    ed78:	465d      	mov	r5, fp
    ed7a:	461e      	mov	r6, r3
    ed7c:	d133      	bne.n	ede6 <am_hal_uart_transfer+0x1da>
    ed7e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    ed82:	2a00      	cmp	r2, #0
    ed84:	d137      	bne.n	edf6 <am_hal_uart_transfer+0x1ea>
    ed86:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ed88:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ed8c:	311c      	adds	r1, #28
    ed8e:	1e68      	subs	r0, r5, #1
    ed90:	0309      	lsls	r1, r1, #12
    ed92:	698b      	ldr	r3, [r1, #24]
    ed94:	06dd      	lsls	r5, r3, #27
    ed96:	d408      	bmi.n	edaa <am_hal_uart_transfer+0x19e>
    ed98:	680b      	ldr	r3, [r1, #0]
    ed9a:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ed9e:	d15e      	bne.n	ee5e <am_hal_uart_transfer+0x252>
    eda0:	3201      	adds	r2, #1
    eda2:	4297      	cmp	r7, r2
    eda4:	f800 3f01 	strb.w	r3, [r0, #1]!
    eda8:	d8f3      	bhi.n	ed92 <am_hal_uart_transfer+0x186>
    edaa:	4490      	add	r8, r2
    edac:	1abf      	subs	r7, r7, r2
    edae:	b957      	cbnz	r7, edc6 <am_hal_uart_transfer+0x1ba>
    edb0:	9b01      	ldr	r3, [sp, #4]
    edb2:	b10b      	cbz	r3, edb8 <am_hal_uart_transfer+0x1ac>
    edb4:	f8c3 8000 	str.w	r8, [r3]
    edb8:	2500      	movs	r5, #0
    edba:	4628      	mov	r0, r5
    edbc:	b011      	add	sp, #68	; 0x44
    edbe:	ecbd 8b02 	vpop	{d8}
    edc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edc6:	2010      	movs	r0, #16
    edc8:	f7fe ff90 	bl	dcec <am_hal_flash_delay>
    edcc:	1c73      	adds	r3, r6, #1
    edce:	bf18      	it	ne
    edd0:	f109 0901 	addne.w	r9, r9, #1
    edd4:	454e      	cmp	r6, r9
    edd6:	d9eb      	bls.n	edb0 <am_hal_uart_transfer+0x1a4>
    edd8:	6822      	ldr	r2, [r4, #0]
    edda:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    edde:	4552      	cmp	r2, sl
    ede0:	eb0b 0508 	add.w	r5, fp, r8
    ede4:	d0cb      	beq.n	ed7e <am_hal_uart_transfer+0x172>
    ede6:	2502      	movs	r5, #2
    ede8:	9b01      	ldr	r3, [sp, #4]
    edea:	2b00      	cmp	r3, #0
    edec:	f43f af1a 	beq.w	ec24 <am_hal_uart_transfer+0x18>
    edf0:	f8c3 8000 	str.w	r8, [r3]
    edf4:	e716      	b.n	ec24 <am_hal_uart_transfer+0x18>
    edf6:	f7ff f947 	bl	e088 <am_hal_interrupt_master_disable>
    edfa:	9007      	str	r0, [sp, #28]
    edfc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    edfe:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    ee02:	301c      	adds	r0, #28
    ee04:	0300      	lsls	r0, r0, #12
    ee06:	f10d 0c20 	add.w	ip, sp, #32
    ee0a:	2200      	movs	r2, #0
    ee0c:	6983      	ldr	r3, [r0, #24]
    ee0e:	06db      	lsls	r3, r3, #27
    ee10:	d409      	bmi.n	ee26 <am_hal_uart_transfer+0x21a>
    ee12:	6803      	ldr	r3, [r0, #0]
    ee14:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ee18:	f102 0201 	add.w	r2, r2, #1
    ee1c:	d119      	bne.n	ee52 <am_hal_uart_transfer+0x246>
    ee1e:	2a20      	cmp	r2, #32
    ee20:	f80c 3b01 	strb.w	r3, [ip], #1
    ee24:	d1f2      	bne.n	ee0c <am_hal_uart_transfer+0x200>
    ee26:	ee18 0a10 	vmov	r0, s16
    ee2a:	a908      	add	r1, sp, #32
    ee2c:	f000 f922 	bl	f074 <am_hal_queue_item_add>
    ee30:	2800      	cmp	r0, #0
    ee32:	d075      	beq.n	ef20 <am_hal_uart_transfer+0x314>
    ee34:	9807      	ldr	r0, [sp, #28]
    ee36:	f7ff f92b 	bl	e090 <am_hal_interrupt_master_set>
    ee3a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ee3c:	42ba      	cmp	r2, r7
    ee3e:	bf28      	it	cs
    ee40:	463a      	movcs	r2, r7
    ee42:	ee18 0a10 	vmov	r0, s16
    ee46:	4629      	mov	r1, r5
    ee48:	4490      	add	r8, r2
    ee4a:	1abf      	subs	r7, r7, r2
    ee4c:	f000 f950 	bl	f0f0 <am_hal_queue_item_get>
    ee50:	e7ad      	b.n	edae <am_hal_uart_transfer+0x1a2>
    ee52:	9807      	ldr	r0, [sp, #28]
    ee54:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ee58:	f7ff f91a 	bl	e090 <am_hal_interrupt_master_set>
    ee5c:	e7c4      	b.n	ede8 <am_hal_uart_transfer+0x1dc>
    ee5e:	4490      	add	r8, r2
    ee60:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ee64:	e7c0      	b.n	ede8 <am_hal_uart_transfer+0x1dc>
    ee66:	2c00      	cmp	r4, #0
    ee68:	f43f af31 	beq.w	ecce <am_hal_uart_transfer+0xc2>
    ee6c:	6822      	ldr	r2, [r4, #0]
    ee6e:	492a      	ldr	r1, [pc, #168]	; (ef18 <am_hal_uart_transfer+0x30c>)
    ee70:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ee74:	428a      	cmp	r2, r1
    ee76:	f47f af2a 	bne.w	ecce <am_hal_uart_transfer+0xc2>
    ee7a:	9b02      	ldr	r3, [sp, #8]
    ee7c:	b10b      	cbz	r3, ee82 <am_hal_uart_transfer+0x276>
    ee7e:	f8c3 8000 	str.w	r8, [r3]
    ee82:	f1bb 0f00 	cmp.w	fp, #0
    ee86:	d097      	beq.n	edb8 <am_hal_uart_transfer+0x1ac>
    ee88:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    ee8c:	2d00      	cmp	r5, #0
    ee8e:	d151      	bne.n	ef34 <am_hal_uart_transfer+0x328>
    ee90:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ee92:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ee96:	311c      	adds	r1, #28
    ee98:	1e42      	subs	r2, r0, #1
    ee9a:	0309      	lsls	r1, r1, #12
    ee9c:	698b      	ldr	r3, [r1, #24]
    ee9e:	0698      	lsls	r0, r3, #26
    eea0:	d405      	bmi.n	eeae <am_hal_uart_transfer+0x2a2>
    eea2:	3501      	adds	r5, #1
    eea4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    eea8:	600b      	str	r3, [r1, #0]
    eeaa:	45ab      	cmp	fp, r5
    eeac:	d1f6      	bne.n	ee9c <am_hal_uart_transfer+0x290>
    eeae:	9b02      	ldr	r3, [sp, #8]
    eeb0:	2b00      	cmp	r3, #0
    eeb2:	d081      	beq.n	edb8 <am_hal_uart_transfer+0x1ac>
    eeb4:	601d      	str	r5, [r3, #0]
    eeb6:	2500      	movs	r5, #0
    eeb8:	e6b4      	b.n	ec24 <am_hal_uart_transfer+0x18>
    eeba:	2800      	cmp	r0, #0
    eebc:	f43f af07 	beq.w	ecce <am_hal_uart_transfer+0xc2>
    eec0:	6802      	ldr	r2, [r0, #0]
    eec2:	4915      	ldr	r1, [pc, #84]	; (ef18 <am_hal_uart_transfer+0x30c>)
    eec4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eec8:	428a      	cmp	r2, r1
    eeca:	f47f af00 	bne.w	ecce <am_hal_uart_transfer+0xc2>
    eece:	b103      	cbz	r3, eed2 <am_hal_uart_transfer+0x2c6>
    eed0:	601d      	str	r5, [r3, #0]
    eed2:	2f00      	cmp	r7, #0
    eed4:	f43f af70 	beq.w	edb8 <am_hal_uart_transfer+0x1ac>
    eed8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    eedc:	2a00      	cmp	r2, #0
    eede:	d15a      	bne.n	ef96 <am_hal_uart_transfer+0x38a>
    eee0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    eee2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    eee6:	311c      	adds	r1, #28
    eee8:	f10b 33ff 	add.w	r3, fp, #4294967295
    eeec:	0309      	lsls	r1, r1, #12
    eeee:	4614      	mov	r4, r2
    eef0:	698a      	ldr	r2, [r1, #24]
    eef2:	06d2      	lsls	r2, r2, #27
    eef4:	d409      	bmi.n	ef0a <am_hal_uart_transfer+0x2fe>
    eef6:	680a      	ldr	r2, [r1, #0]
    eef8:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    eefc:	d176      	bne.n	efec <am_hal_uart_transfer+0x3e0>
    eefe:	3401      	adds	r4, #1
    ef00:	42a7      	cmp	r7, r4
    ef02:	f803 2f01 	strb.w	r2, [r3, #1]!
    ef06:	d1f3      	bne.n	eef0 <am_hal_uart_transfer+0x2e4>
    ef08:	4605      	mov	r5, r0
    ef0a:	9b01      	ldr	r3, [sp, #4]
    ef0c:	2b00      	cmp	r3, #0
    ef0e:	f43f ae89 	beq.w	ec24 <am_hal_uart_transfer+0x18>
    ef12:	601c      	str	r4, [r3, #0]
    ef14:	e686      	b.n	ec24 <am_hal_uart_transfer+0x18>
    ef16:	bf00      	nop
    ef18:	01ea9e06 	.word	0x01ea9e06
    ef1c:	4627      	mov	r7, r4
    ef1e:	e6d3      	b.n	ecc8 <am_hal_uart_transfer+0xbc>
    ef20:	9807      	ldr	r0, [sp, #28]
    ef22:	4d39      	ldr	r5, [pc, #228]	; (f008 <am_hal_uart_transfer+0x3fc>)
    ef24:	f7ff f8b4 	bl	e090 <am_hal_interrupt_master_set>
    ef28:	e75e      	b.n	ede8 <am_hal_uart_transfer+0x1dc>
    ef2a:	2502      	movs	r5, #2
    ef2c:	4680      	mov	r8, r0
    ef2e:	e75b      	b.n	ede8 <am_hal_uart_transfer+0x1dc>
    ef30:	462f      	mov	r7, r5
    ef32:	e6b1      	b.n	ec98 <am_hal_uart_transfer+0x8c>
    ef34:	6b65      	ldr	r5, [r4, #52]	; 0x34
    ef36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ef38:	1b52      	subs	r2, r2, r5
    ef3a:	455a      	cmp	r2, fp
    ef3c:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    ef40:	4601      	mov	r1, r0
    ef42:	bf28      	it	cs
    ef44:	465a      	movcs	r2, fp
    ef46:	4638      	mov	r0, r7
    ef48:	4615      	mov	r5, r2
    ef4a:	f000 f893 	bl	f074 <am_hal_queue_item_add>
    ef4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    ef50:	f7ff f89a 	bl	e088 <am_hal_interrupt_master_disable>
    ef54:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    ef58:	361c      	adds	r6, #28
    ef5a:	9005      	str	r0, [sp, #20]
    ef5c:	0336      	lsls	r6, r6, #12
    ef5e:	e00f      	b.n	ef80 <am_hal_uart_transfer+0x374>
    ef60:	a908      	add	r1, sp, #32
    ef62:	4638      	mov	r0, r7
    ef64:	f000 f8c4 	bl	f0f0 <am_hal_queue_item_get>
    ef68:	b178      	cbz	r0, ef8a <am_hal_uart_transfer+0x37e>
    ef6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    ef6c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ef70:	321c      	adds	r2, #28
    ef72:	0312      	lsls	r2, r2, #12
    ef74:	6993      	ldr	r3, [r2, #24]
    ef76:	0699      	lsls	r1, r3, #26
    ef78:	bf5c      	itt	pl
    ef7a:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    ef7e:	6013      	strpl	r3, [r2, #0]
    ef80:	69b3      	ldr	r3, [r6, #24]
    ef82:	069b      	lsls	r3, r3, #26
    ef84:	f04f 0201 	mov.w	r2, #1
    ef88:	d5ea      	bpl.n	ef60 <am_hal_uart_transfer+0x354>
    ef8a:	9805      	ldr	r0, [sp, #20]
    ef8c:	f7ff f880 	bl	e090 <am_hal_interrupt_master_set>
    ef90:	e78d      	b.n	eeae <am_hal_uart_transfer+0x2a2>
    ef92:	46b8      	mov	r8, r7
    ef94:	e70c      	b.n	edb0 <am_hal_uart_transfer+0x1a4>
    ef96:	f7ff f877 	bl	e088 <am_hal_interrupt_master_disable>
    ef9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ef9c:	9006      	str	r0, [sp, #24]
    ef9e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    efa2:	311c      	adds	r1, #28
    efa4:	0309      	lsls	r1, r1, #12
    efa6:	ae08      	add	r6, sp, #32
    efa8:	2200      	movs	r2, #0
    efaa:	698b      	ldr	r3, [r1, #24]
    efac:	06d8      	lsls	r0, r3, #27
    efae:	d409      	bmi.n	efc4 <am_hal_uart_transfer+0x3b8>
    efb0:	680b      	ldr	r3, [r1, #0]
    efb2:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    efb6:	f102 0201 	add.w	r2, r2, #1
    efba:	d11a      	bne.n	eff2 <am_hal_uart_transfer+0x3e6>
    efbc:	2a20      	cmp	r2, #32
    efbe:	f806 3b01 	strb.w	r3, [r6], #1
    efc2:	d1f2      	bne.n	efaa <am_hal_uart_transfer+0x39e>
    efc4:	f104 0648 	add.w	r6, r4, #72	; 0x48
    efc8:	a908      	add	r1, sp, #32
    efca:	4630      	mov	r0, r6
    efcc:	f000 f852 	bl	f074 <am_hal_queue_item_add>
    efd0:	b1a8      	cbz	r0, effe <am_hal_uart_transfer+0x3f2>
    efd2:	9806      	ldr	r0, [sp, #24]
    efd4:	f7ff f85c 	bl	e090 <am_hal_interrupt_master_set>
    efd8:	6d24      	ldr	r4, [r4, #80]	; 0x50
    efda:	42bc      	cmp	r4, r7
    efdc:	bf28      	it	cs
    efde:	463c      	movcs	r4, r7
    efe0:	4659      	mov	r1, fp
    efe2:	4630      	mov	r0, r6
    efe4:	4622      	mov	r2, r4
    efe6:	f000 f883 	bl	f0f0 <am_hal_queue_item_get>
    efea:	e78e      	b.n	ef0a <am_hal_uart_transfer+0x2fe>
    efec:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    eff0:	e78b      	b.n	ef0a <am_hal_uart_transfer+0x2fe>
    eff2:	9806      	ldr	r0, [sp, #24]
    eff4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    eff8:	f7ff f84a 	bl	e090 <am_hal_interrupt_master_set>
    effc:	e612      	b.n	ec24 <am_hal_uart_transfer+0x18>
    effe:	9806      	ldr	r0, [sp, #24]
    f000:	4d01      	ldr	r5, [pc, #4]	; (f008 <am_hal_uart_transfer+0x3fc>)
    f002:	f7ff f845 	bl	e090 <am_hal_interrupt_master_set>
    f006:	e60d      	b.n	ec24 <am_hal_uart_transfer+0x18>
    f008:	08000001 	.word	0x08000001

0000f00c <am_hal_uart_tx_flush>:
    f00c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    f010:	b570      	push	{r4, r5, r6, lr}
    f012:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f014:	4604      	mov	r4, r0
    f016:	b15b      	cbz	r3, f030 <am_hal_uart_tx_flush+0x24>
    f018:	6b43      	ldr	r3, [r0, #52]	; 0x34
    f01a:	b14b      	cbz	r3, f030 <am_hal_uart_tx_flush+0x24>
    f01c:	4e0e      	ldr	r6, [pc, #56]	; (f058 <am_hal_uart_tx_flush+0x4c>)
    f01e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    f020:	fbb6 f0f0 	udiv	r0, r6, r0
    f024:	0100      	lsls	r0, r0, #4
    f026:	f7fe fe61 	bl	dcec <am_hal_flash_delay>
    f02a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f02c:	2b00      	cmp	r3, #0
    f02e:	d1f6      	bne.n	f01e <am_hal_uart_tx_flush+0x12>
    f030:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f034:	351c      	adds	r5, #28
    f036:	032d      	lsls	r5, r5, #12
    f038:	69ab      	ldr	r3, [r5, #24]
    f03a:	071a      	lsls	r2, r3, #28
    f03c:	d509      	bpl.n	f052 <am_hal_uart_tx_flush+0x46>
    f03e:	4e06      	ldr	r6, [pc, #24]	; (f058 <am_hal_uart_tx_flush+0x4c>)
    f040:	6e23      	ldr	r3, [r4, #96]	; 0x60
    f042:	fbb6 f3f3 	udiv	r3, r6, r3
    f046:	0118      	lsls	r0, r3, #4
    f048:	f7fe fe50 	bl	dcec <am_hal_flash_delay>
    f04c:	69ab      	ldr	r3, [r5, #24]
    f04e:	071b      	lsls	r3, r3, #28
    f050:	d4f6      	bmi.n	f040 <am_hal_uart_tx_flush+0x34>
    f052:	2000      	movs	r0, #0
    f054:	bd70      	pop	{r4, r5, r6, pc}
    f056:	bf00      	nop
    f058:	00b71b00 	.word	0x00b71b00

0000f05c <am_hal_queue_init>:
    f05c:	b410      	push	{r4}
    f05e:	2400      	movs	r4, #0
    f060:	e9c0 4400 	strd	r4, r4, [r0]
    f064:	e9c0 4302 	strd	r4, r3, [r0, #8]
    f068:	e9c0 2104 	strd	r2, r1, [r0, #16]
    f06c:	f85d 4b04 	ldr.w	r4, [sp], #4
    f070:	4770      	bx	lr
    f072:	bf00      	nop

0000f074 <am_hal_queue_item_add>:
    f074:	b570      	push	{r4, r5, r6, lr}
    f076:	6905      	ldr	r5, [r0, #16]
    f078:	b082      	sub	sp, #8
    f07a:	4604      	mov	r4, r0
    f07c:	fb02 f505 	mul.w	r5, r2, r5
    f080:	460e      	mov	r6, r1
    f082:	f7ff f801 	bl	e088 <am_hal_interrupt_master_disable>
    f086:	68e2      	ldr	r2, [r4, #12]
    f088:	9001      	str	r0, [sp, #4]
    f08a:	68a0      	ldr	r0, [r4, #8]
    f08c:	1a13      	subs	r3, r2, r0
    f08e:	42ab      	cmp	r3, r5
    f090:	d31c      	bcc.n	f0cc <am_hal_queue_item_add+0x58>
    f092:	b195      	cbz	r5, f0ba <am_hal_queue_item_add+0x46>
    f094:	6823      	ldr	r3, [r4, #0]
    f096:	b306      	cbz	r6, f0da <am_hal_queue_item_add+0x66>
    f098:	1e71      	subs	r1, r6, #1
    f09a:	194e      	adds	r6, r1, r5
    f09c:	6962      	ldr	r2, [r4, #20]
    f09e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    f0a2:	54d0      	strb	r0, [r2, r3]
    f0a4:	6823      	ldr	r3, [r4, #0]
    f0a6:	68e0      	ldr	r0, [r4, #12]
    f0a8:	3301      	adds	r3, #1
    f0aa:	428e      	cmp	r6, r1
    f0ac:	fbb3 f2f0 	udiv	r2, r3, r0
    f0b0:	fb00 3312 	mls	r3, r0, r2, r3
    f0b4:	6023      	str	r3, [r4, #0]
    f0b6:	d1f1      	bne.n	f09c <am_hal_queue_item_add+0x28>
    f0b8:	68a0      	ldr	r0, [r4, #8]
    f0ba:	4405      	add	r5, r0
    f0bc:	60a5      	str	r5, [r4, #8]
    f0be:	9801      	ldr	r0, [sp, #4]
    f0c0:	f7fe ffe6 	bl	e090 <am_hal_interrupt_master_set>
    f0c4:	2401      	movs	r4, #1
    f0c6:	4620      	mov	r0, r4
    f0c8:	b002      	add	sp, #8
    f0ca:	bd70      	pop	{r4, r5, r6, pc}
    f0cc:	9801      	ldr	r0, [sp, #4]
    f0ce:	f7fe ffdf 	bl	e090 <am_hal_interrupt_master_set>
    f0d2:	2400      	movs	r4, #0
    f0d4:	4620      	mov	r0, r4
    f0d6:	b002      	add	sp, #8
    f0d8:	bd70      	pop	{r4, r5, r6, pc}
    f0da:	4631      	mov	r1, r6
    f0dc:	3101      	adds	r1, #1
    f0de:	3301      	adds	r3, #1
    f0e0:	428d      	cmp	r5, r1
    f0e2:	fbb3 f6f2 	udiv	r6, r3, r2
    f0e6:	fb02 3316 	mls	r3, r2, r6, r3
    f0ea:	d1f7      	bne.n	f0dc <am_hal_queue_item_add+0x68>
    f0ec:	6023      	str	r3, [r4, #0]
    f0ee:	e7e4      	b.n	f0ba <am_hal_queue_item_add+0x46>

0000f0f0 <am_hal_queue_item_get>:
    f0f0:	b570      	push	{r4, r5, r6, lr}
    f0f2:	6905      	ldr	r5, [r0, #16]
    f0f4:	4604      	mov	r4, r0
    f0f6:	b082      	sub	sp, #8
    f0f8:	fb02 f505 	mul.w	r5, r2, r5
    f0fc:	460e      	mov	r6, r1
    f0fe:	f7fe ffc3 	bl	e088 <am_hal_interrupt_master_disable>
    f102:	68a2      	ldr	r2, [r4, #8]
    f104:	9001      	str	r0, [sp, #4]
    f106:	42aa      	cmp	r2, r5
    f108:	d31c      	bcc.n	f144 <am_hal_queue_item_get+0x54>
    f10a:	b195      	cbz	r5, f132 <am_hal_queue_item_get+0x42>
    f10c:	6863      	ldr	r3, [r4, #4]
    f10e:	b306      	cbz	r6, f152 <am_hal_queue_item_get+0x62>
    f110:	1e71      	subs	r1, r6, #1
    f112:	194e      	adds	r6, r1, r5
    f114:	6962      	ldr	r2, [r4, #20]
    f116:	5cd3      	ldrb	r3, [r2, r3]
    f118:	f801 3f01 	strb.w	r3, [r1, #1]!
    f11c:	6863      	ldr	r3, [r4, #4]
    f11e:	68e0      	ldr	r0, [r4, #12]
    f120:	3301      	adds	r3, #1
    f122:	428e      	cmp	r6, r1
    f124:	fbb3 f2f0 	udiv	r2, r3, r0
    f128:	fb00 3312 	mls	r3, r0, r2, r3
    f12c:	6063      	str	r3, [r4, #4]
    f12e:	d1f1      	bne.n	f114 <am_hal_queue_item_get+0x24>
    f130:	68a2      	ldr	r2, [r4, #8]
    f132:	9801      	ldr	r0, [sp, #4]
    f134:	1b52      	subs	r2, r2, r5
    f136:	60a2      	str	r2, [r4, #8]
    f138:	f7fe ffaa 	bl	e090 <am_hal_interrupt_master_set>
    f13c:	2401      	movs	r4, #1
    f13e:	4620      	mov	r0, r4
    f140:	b002      	add	sp, #8
    f142:	bd70      	pop	{r4, r5, r6, pc}
    f144:	9801      	ldr	r0, [sp, #4]
    f146:	f7fe ffa3 	bl	e090 <am_hal_interrupt_master_set>
    f14a:	2400      	movs	r4, #0
    f14c:	4620      	mov	r0, r4
    f14e:	b002      	add	sp, #8
    f150:	bd70      	pop	{r4, r5, r6, pc}
    f152:	68e0      	ldr	r0, [r4, #12]
    f154:	4631      	mov	r1, r6
    f156:	3101      	adds	r1, #1
    f158:	3301      	adds	r3, #1
    f15a:	42a9      	cmp	r1, r5
    f15c:	fbb3 f6f0 	udiv	r6, r3, r0
    f160:	fb00 3316 	mls	r3, r0, r6, r3
    f164:	d1f7      	bne.n	f156 <am_hal_queue_item_get+0x66>
    f166:	6063      	str	r3, [r4, #4]
    f168:	e7e3      	b.n	f132 <am_hal_queue_item_get+0x42>
    f16a:	bf00      	nop
    f16c:	6c6f7041 	.word	0x6c6f7041
    f170:	20336f6c 	.word	0x20336f6c
    f174:	65756c42 	.word	0x65756c42
    f178:	00000000 	.word	0x00000000
    f17c:	616e6942 	.word	0x616e6942
    f180:	43207972 	.word	0x43207972
    f184:	746e756f 	.word	0x746e756f
    f188:	45207265 	.word	0x45207265
    f18c:	706d6178 	.word	0x706d6178
    f190:	6620656c 	.word	0x6620656c
    f194:	2520726f 	.word	0x2520726f
    f198:	00000a73 	.word	0x00000a73
    f19c:	54282020 	.word	0x54282020
    f1a0:	72656d69 	.word	0x72656d69
    f1a4:	6f6c6320 	.word	0x6f6c6320
    f1a8:	73206b63 	.word	0x73206b63
    f1ac:	6372756f 	.word	0x6372756f
    f1b0:	73692065 	.word	0x73692065
    f1b4:	52464c20 	.word	0x52464c20
    f1b8:	000a2943 	.word	0x000a2943
    f1bc:	7275540a 	.word	0x7275540a
    f1c0:	50536f62 	.word	0x50536f62
    f1c4:	6d20544f 	.word	0x6d20544f
    f1c8:	2065646f 	.word	0x2065646f
    f1cc:	41207369 	.word	0x41207369
    f1d0:	6c696176 	.word	0x6c696176
    f1d4:	656c6261 	.word	0x656c6261
    f1d8:	0000000a 	.word	0x0000000a
    f1dc:	7265704f 	.word	0x7265704f
    f1e0:	6e697461 	.word	0x6e697461
    f1e4:	6e692067 	.word	0x6e692067
    f1e8:	72755420 	.word	0x72755420
    f1ec:	50536f62 	.word	0x50536f62
    f1f0:	6d20544f 	.word	0x6d20544f
    f1f4:	2065646f 	.word	0x2065646f
    f1f8:	4d642528 	.word	0x4d642528
    f1fc:	0a297a48 	.word	0x0a297a48
    f200:	00000000 	.word	0x00000000
    f204:	6c696146 	.word	0x6c696146
    f208:	74206465 	.word	0x74206465
    f20c:	6e45206f 	.word	0x6e45206f
    f210:	656c6261 	.word	0x656c6261
    f214:	72755420 	.word	0x72755420
    f218:	50536f62 	.word	0x50536f62
    f21c:	6d20544f 	.word	0x6d20544f
    f220:	2065646f 	.word	0x2065646f
    f224:	7265706f 	.word	0x7265706f
    f228:	6f697461 	.word	0x6f697461
    f22c:	00000a6e 	.word	0x00000a6e
    f230:	62727554 	.word	0x62727554
    f234:	4f50536f 	.word	0x4f50536f
    f238:	6f6d2054 	.word	0x6f6d2054
    f23c:	69206564 	.word	0x69206564
    f240:	6f4e2073 	.word	0x6f4e2073
    f244:	76412074 	.word	0x76412074
    f248:	616c6961 	.word	0x616c6961
    f24c:	0a656c62 	.word	0x0a656c62
    f250:	00000000 	.word	0x00000000
    f254:	6c696146 	.word	0x6c696146
    f258:	74206465 	.word	0x74206465
    f25c:	6e49206f 	.word	0x6e49206f
    f260:	61697469 	.word	0x61697469
    f264:	657a696c 	.word	0x657a696c
    f268:	726f6620 	.word	0x726f6620
    f26c:	72755420 	.word	0x72755420
    f270:	50536f62 	.word	0x50536f62
    f274:	6d20544f 	.word	0x6d20544f
    f278:	2065646f 	.word	0x2065646f
    f27c:	7265706f 	.word	0x7265706f
    f280:	6f697461 	.word	0x6f697461
    f284:	00000a6e 	.word	0x00000a6e
    f288:	20643225 	.word	0x20643225
    f28c:	00000000 	.word	0x00000000
    f290:	77530a0a 	.word	0x77530a0a
    f294:	68637469 	.word	0x68637469
    f298:	20676e69 	.word	0x20676e69
    f29c:	4e206f74 	.word	0x4e206f74
    f2a0:	616d726f 	.word	0x616d726f
    f2a4:	6f6d206c 	.word	0x6f6d206c
    f2a8:	28206564 	.word	0x28206564
    f2ac:	484d6425 	.word	0x484d6425
    f2b0:	0000295a 	.word	0x0000295a
    f2b4:	7272450a 	.word	0x7272450a
    f2b8:	2820726f 	.word	0x2820726f
    f2bc:	20296425 	.word	0x20296425
    f2c0:	6c696877 	.word	0x6c696877
    f2c4:	77732065 	.word	0x77732065
    f2c8:	68637469 	.word	0x68637469
    f2cc:	20676e69 	.word	0x20676e69
    f2d0:	6d6f7266 	.word	0x6d6f7266
    f2d4:	726f4e20 	.word	0x726f4e20
    f2d8:	206c616d 	.word	0x206c616d
    f2dc:	54206f74 	.word	0x54206f74
    f2e0:	6f627275 	.word	0x6f627275
    f2e4:	544f5053 	.word	0x544f5053
    f2e8:	4265202c 	.word	0x4265202c
    f2ec:	74737275 	.word	0x74737275
    f2f0:	65646f4d 	.word	0x65646f4d
    f2f4:	2e64253d 	.word	0x2e64253d
    f2f8:	00000000 	.word	0x00000000
    f2fc:	77530a0a 	.word	0x77530a0a
    f300:	68637469 	.word	0x68637469
    f304:	20676e69 	.word	0x20676e69
    f308:	54206f74 	.word	0x54206f74
    f30c:	6f627275 	.word	0x6f627275
    f310:	544f5053 	.word	0x544f5053
    f314:	646f6d20 	.word	0x646f6d20
    f318:	25282065 	.word	0x25282065
    f31c:	7a484d64 	.word	0x7a484d64
    f320:	00000029 	.word	0x00000029
    f324:	7272450a 	.word	0x7272450a
    f328:	2820726f 	.word	0x2820726f
    f32c:	20296425 	.word	0x20296425
    f330:	6c696877 	.word	0x6c696877
    f334:	77732065 	.word	0x77732065
    f338:	68637469 	.word	0x68637469
    f33c:	20676e69 	.word	0x20676e69
    f340:	6d6f7266 	.word	0x6d6f7266
    f344:	72755420 	.word	0x72755420
    f348:	50536f62 	.word	0x50536f62
    f34c:	7420544f 	.word	0x7420544f
    f350:	6f4e206f 	.word	0x6f4e206f
    f354:	6c616d72 	.word	0x6c616d72
    f358:	4265202c 	.word	0x4265202c
    f35c:	74737275 	.word	0x74737275
    f360:	65646f4d 	.word	0x65646f4d
    f364:	2e64253d 	.word	0x2e64253d
    f368:	00000000 	.word	0x00000000
    f36c:	0000000a 	.word	0x0000000a
    f370:	0a0a0a0a 	.word	0x0a0a0a0a
    f374:	0a0a0a0a 	.word	0x0a0a0a0a
    f378:	0a0a0a0a 	.word	0x0a0a0a0a
    f37c:	0a0a0a0a 	.word	0x0a0a0a0a
    f380:	00000a0a 	.word	0x00000a0a

0000f384 <am_hal_cachectrl_defaults>:
    f384:	00000308                                ....

0000f388 <g_AM_HAL_GPIO_DISABLE>:
    f388:	00000003                                ....

0000f38c <g_AM_HAL_GPIO_OUTPUT>:
    f38c:	00000403                                ....

0000f390 <g_AM_HAL_GPIO_TRISTATE>:
    f390:	00000c03                                ....

0000f394 <g_ui8Bit76Capabilities>:
    f394:	02800101 80010180 80800101 80808080     ................
    f3a4:	80808080 80808008 01800180 80808080     ................
    f3b4:	80808080 01800402 01010401 80808080     ................
    f3c4:	00000101                                ....

0000f3c8 <g_ui8Inpen>:
    f3c8:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    f3d8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    f3e8:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    f3f8:	00003130                                01..

0000f3fc <g_ui8NCEtable>:
    f3fc:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f40c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f41c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f42c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f43c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f44c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f45c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f46c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f47c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f48c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f49c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f4ac:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f4bc:	32221202 43231303                       .."2..#C

0000f4c4 <g_ui8nCEpins>:
    f4c4:	02070707 00080802 01020202 01010101     ................
    f4d4:	01010101 01010101 01010101 01010101     ................
    f4e4:	01010101 08010101 01010008 01010101     ................
    f4f4:	00000101                                ....

0000f4f8 <g_am_hal_mcuctrl_flash_size>:
    f4f8:	00004000 00008000 00010000 00020000     .@..............
    f508:	00040000 00080000 00100000 00200000     .............. .
    f518:	00180000 00000000 00000000 00000000     ................
	...

0000f538 <g_am_hal_mcuctrl_sram_size>:
    f538:	00004000 00008000 00010000 00020000     .@..............
    f548:	00040000 00080000 00100000 00060000     ................
    f558:	000c0000 00000000 00000000 00000000     ................
	...

0000f578 <g_sBspUartConfig>:
    f578:	0001c200 00000060 00000000 00000000     ....`...........
    f588:	00000000 00000012 00000000 00000000     ................
	...

0000f5a0 <g_AM_BSP_GPIO_COM_UART_RX>:
    f5a0:	00000000                                ....

0000f5a4 <g_AM_BSP_GPIO_COM_UART_TX>:
    f5a4:	00000000                                ....

0000f5a8 <g_AM_BSP_GPIO_ITM_SWO>:
    f5a8:	00000002                                ....

0000f5ac <am_hal_pwrctrl_peripheral_control>:
	...
    f5b8:	00000001 00000004 00000004 00000002     ................
    f5c8:	00000008 00000008 00000004 00000008     ................
    f5d8:	00000008 00000008 00000008 00000008     ................
    f5e8:	00000010 00000010 00000010 00000020     ............ ...
    f5f8:	00000010 00000010 00000040 00000010     ........@.......
    f608:	00000010 00000080 00000004 00000004     ................
    f618:	00000100 00000004 00000004 00000200     ................
    f628:	00000020 00000020 00000400 00000004      ... ...........
    f638:	00000004 00000800 00000040 00000040     ........@...@...
    f648:	00001000 00000080 00000080 00002000     ............. ..
    f658:	00000100 00000100                       ........

0000f660 <CSWTCH.20>:
    f660:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
